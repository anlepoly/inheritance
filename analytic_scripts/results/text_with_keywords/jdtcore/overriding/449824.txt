BUG REPORT COMMENTS:
(In reply to Alex Blewitt from comment #5)
> (In reply to Srikanth Sankaran from comment #3)
> > (In reply to Alex Blewitt from comment #0)
> > > The following code fails to compile in Java 1.8.0_11 but succeeds in Eclipse
> > > 4.5M3 and 4.4.1; however, converting the method reference to a lambda (or
> > > uncommenting the line) results in a compile error for both:
> > 
> > They are not totally equivalent. The method reference is an exact method
> > reference while the lambda you are replacing with is an implcitly typed
> > lambda. If I declare the lambda parameter's type explicitly, difference
> > between the compilers surfaces again.
> 
> The exact method reference could be called against the default method
> though, since the default method and the concrete method have different
> signatures. In fact, if you comment out the call() in Concrete<T> and
> Right<T>, the method reference can be bound to the (default)  Left<T>.call
> instead:

Right, I am not saying we find the default method incompatible, only
that there is a piece of code which "prefers" a class method over
a default method.

