BUG REPORT COMMENTS:
3.2RC6

In presence of duplicate local variables, duplicate fields or methods; the compiler discards all instances of the offending construct.
This means that more secondary errors may arise and be quite misleading outside of context, and other tools based on the AST (DOM AST for instance) may behave suboptimally as lacking some of the binding information.

What if:
- it still created the bindings, and attached them to the AST node
- it would leave at least one entry in binding arrays to reduce amount of secondary errors.

e.g. we currently complain about missing both #foo() and #baz()
public class X {
	void foo() {
	}
	void foo() {
	}
	void bar() {
		foo();
		baz();
	}
}
Other related scenario with local variables:

public class X {
	void foo(){
		int x = 0;
		String x = "";
		x.toString();
	}
}

Currently complains about applying #toString() to primitive type int. Considering the last definition to override previous one, we would tolerate the message send (note that variable lookup already does walk the sco

