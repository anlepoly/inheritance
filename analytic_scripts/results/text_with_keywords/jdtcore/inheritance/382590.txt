BUG TITLE:
TypesImpl.asMemberOf must also work with a subclass and its superclass' element

BUG REPORT COMMENTS:
(In reply to Jay Arthanareeswaran from comment #22)
> (In reply to Jay Arthanareeswaran from comment #21)
> > Sasi reported that the case reported in comment #9 is not fixed. I can see
> > that things don't work well for parameterized methods. Will try to fix this
> > for RC1.
> 
> This particular case is not about inherited elements. Regardless of the
> types, looks like we have always had issues around parameterized types.
> 
> In the example, the element is retrieved from the base type and thus has
> method binding as "compareTo(T)". But the type that inherits is parametrized
> to be public class Concrete extends Base<Long> and thus the method binding
> is "compareTo(java.lang.Long)".
> 
> If we do the substitution things should work. I don't know if this is the
> right way, but I see getExactMethod() makes things work, but I wonder if
> there are better ways.
> 
> Sasi/Stephan, any thoughts?

I'm not sure I have sufficient context to join the discussion, let me check:

- we are talking about code inside TypesImp.asMemberOf following the METHOD case label?

- we have a ReferenceBinding for class Concrete?

- we have a MethodBinding for Base<T>.compareTo(T)? Or is it Comaparable<T>.compareTo(T)?

- when returning newTypeMirror(method), what method do you expect to see here?

- is method comparison failing? (Using areParameterErasuresEqual we should already be safe?

- or are we answering a wrong variant of the method?

