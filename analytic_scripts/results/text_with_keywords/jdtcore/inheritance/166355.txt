BUG REPORT COMMENTS:
In the attached test case, the Eclipse compiler (3.3M3) does not report an ambiguity, whereas the Sun javac compiler fails to compile the test with:

> javac -version A.java B.java C.java
javac 1.5.0_10
C.java:3: reference to remove is ambiguous, both method remove(A<?>) in B and method remove(C.D) in C match
       remove(new D());
       ^
1 error
Created an attachment (id=54782)
Test case


JDKs 1.5.0_11, 6_01_b03 and 7_b06 all complain the same. We don't.
Added test cases AmbiguousMethodTest#51 to 53. Javac complains upon 51 and 53, which we don't.
For clarity, copying test051 here:
interface I<T> {
}
class Y {
  void bar(I<?> x) {
  }
}
public class X extends Y {
  void foo() {
    bar(new Z()); // a
  }
  void bar(Z x) {
  }
  private static class Z implements I {
  }
}

My reading of JLS3 yields the following:
- by 15.12.2.2, both X#bar and Y#bar are applicable to the call on line a;
  accordingly, we should pick the most specific method of those, if any;
- by 15.12.2.5, because I#RAW does not <: I<?> 

