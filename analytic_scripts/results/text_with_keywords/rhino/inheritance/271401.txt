BUG TITLE:
JS prototypes for superclasses with ScriptableObject.defineClass

BUG REPORT COMMENTS:
User-Agent:       Mozilla/5.0 (Windows; U; Windows NT 5.0; en-US; rv:1.7.5) Gecko/20041107 Firefox/1.0
Build Identifier: Mozilla/5.0 (Windows; U; Windows NT 5.0; en-US; rv:1.7.5) Gecko/20041107 Firefox/1.0

Classes that extend ScriptableObject cannot use polymorphism to define
JavaScript-accessible properties and functions, because
FunctionObject.getMethodList(Class) uses Class.getDeclaredMethods() instead of
Class.getMethods() whenever it can, apparently as an optimization. The reason
that getDeclaredMethods() is faster is that they are fundamentally different
methods: getDeclaredMethods() excludes inherited methods, but getMethods()
includes them. So for example if I have:

public class A extends ScriptableObject {
  public String jsGet_name() {
    return "A";
  }
}

public class B extends A {
}

then as far as the JavaScript is concerned, an instance of B does not have a
property "name". Unless, of course, calling getDeclaredMethods() fails with a
SecurityException, in which case FunctionObject will use g

