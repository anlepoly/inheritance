<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>412284</bug_id>
          
          <creation_ts>2013-07-04 05:57:00 -0400</creation_ts>
          <short_desc>[1.8][compiler] Inspect all casts to/instanceof AbstractMethodDeclaration to eliminate potential CCEs</short_desc>
          <delta_ts>2013-07-29 00:35:13 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Manoj Palat Away Until May 11 2015">manpalat</reporter>
          <assigned_to name="Manoj Palat Away Until May 11 2015">manpalat</assigned_to>
          <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="58906"
          type_id="1"
          status="+"
          setter="srikanth_sankaran"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2280573</commentid>
    <comment_count>0</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2013-07-04 05:57:51 -0400</bug_when>
    <thetext>Inspect all casts to and instance of checks for AbstractMethodDeclaration
to eliminate potential CCEs&quot; (when the operand of cast/instanceof is
MethodScope.referenceContext)

This is a follow up of bug 412155 comment 3</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2280923</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-07-05 00:28:26 -0400</bug_when>
    <thetext>If not already familiar, look at Limit to match locations facility
in the Java search dialog (^H).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2286712</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-07-22 05:14:18 -0400</bug_when>
    <thetext>(In reply to comment #0)
&gt; Inspect all casts to and instance of checks for AbstractMethodDeclaration
&gt; to eliminate potential CCEs&quot; (when the operand of cast/instanceof is
&gt; MethodScope.referenceContext)
&gt; 
&gt; This is a follow up of bug 412155 comment 3

Only cast needs to be checked. instance of check if present means unsafe
casting will not be attempted.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2287165</commentid>
    <comment_count>3</comment_count>
      <attachid>233693</attachid>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2013-07-23 03:59:40 -0400</bug_when>
    <thetext>Created attachment 233693
Test case depicting a scenario</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2287247</commentid>
    <comment_count>4</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2013-07-23 07:01:47 -0400</bug_when>
    <thetext>Another Scenario throwing CCE - Test case attached

interface I { void foo();}

class X { 
   void bar() {}
   void bar1() {}
   final int t;
   X(int i){
       I x = () -&gt;  {
    	  try {
    		  t = 3;
    	  } catch (Exception e) {
    		  t = 4;
    	  }
      };
}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2287454</commentid>
    <comment_count>5</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2013-07-23 12:48:31 -0400</bug_when>
    <thetext>(In reply to comment #4)
Similar scenario, but in compound assignment - another test case/scenario
interface I { void foo();}

class X { 
   final int t;
   X(){
       I x = () -&gt;  {
    	   try {
    		  t += 3;
    	  } catch (Exception e) {
    		  t += 4;
    	  }
      };
}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2287782</commentid>
    <comment_count>6</comment_count>
      <attachid>233748</attachid>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2013-07-24 08:01:39 -0400</bug_when>
    <thetext>Created attachment 233748
Proposed Patch

Includes the scenarios listed (with fixes)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2288143</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-07-25 01:51:37 -0400</bug_when>
    <thetext>I am fine with this patch - did you check the error messages from javac
to make sure there is a match ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2288977</commentid>
    <comment_count>8</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2013-07-29 00:26:09 -0400</bug_when>
    <thetext>(In reply to comment #7)
&gt; I am fine with this patch - did you check the error messages from javac
&gt; to make sure there is a match ?

Yes. Error messages match with javac. However, jdt.core prints out an additional error message as well (which I believe should be fine) as reproduced below:

&quot;The blank final field t may not have been initialized&quot;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2288978</commentid>
    <comment_count>9</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2013-07-29 00:35:13 -0400</bug_when>
    <thetext>Committed via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=5837879057685bd1f5ce163887ddcdfbc05fb795</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>233693</attachid>
            <date>2013-07-23 03:59:00 -0400</date>
            <delta_ts>2013-07-23 03:59:40 -0400</delta_ts>
            <desc>Test case depicting a scenario</desc>
            <filename>file_412284.txt</filename>
            <type>text/plain</type>
            <size>252</size>
            <attacher name="Manoj Palat Away Until May 11 2015">manpalat</attacher>
            
              <data encoding="base64">aW1wb3J0IGphdmEuaW8uSU9FeGNlcHRpb247DQoNCmludGVyZmFjZSBJIHsgdm9pZCBmb28oKSB0
aHJvd3MgSU9FeGNlcHRpb247IH0NCnB1YmxpYyBjbGFzcyBYIHsNCiB2b2lkIGJhcigpIHsNCgkg
SSBpID0gKCkgLT4gew0KCQkgdHJ5IHsNCgkJCSB0aHJvdyBuZXcgSU9FeGNlcHRpb24oKTsNCgkJ
IH0gY2F0Y2ggKElPRXhjZXB0aW9uIGUpIHsJCQkgDQoJCSB9IGZpbmFsbHkgew0KCQkJIGkuZm9v
KCk7DQoJCSB9DQoJIH07DQogfQ0KfQ0K
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>233748</attachid>
            <date>2013-07-24 08:01:00 -0400</date>
            <delta_ts>2013-07-24 08:01:39 -0400</delta_ts>
            <desc>Proposed Patch</desc>
            <filename>Fix-for-Bug-412284-18compiler-Inspect-all-casts-to-i.patch</filename>
            <type>text/plain</type>
            <size>6321</size>
            <attacher name="Manoj Palat Away Until May 11 2015">manpalat</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRh
RXhwcmVzc2lvbnNUZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxl
ci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OZWdh
dGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCmluZGV4IGM3NjgzYjIuLjg5YzI4MDYgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRhRXhw
cmVzc2lvbnNUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGls
ZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVn
YXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YQpAQCAtNjczMiw2ICs2NzMyLDEyMyBAQAog
CQludWxsIC8qIGN1c3RvbSBvcHRpb25zICovCiAJKTsKIH0KKy8vaHR0cHM6Ly9idWdzLmVjbGlw
c2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQxMjI4NCwKKy8vWzEuOF1bY29tcGlsZXJdIFsx
LjhdW2NvbXBpbGVyXSBJbnNwZWN0IGFsbCBjYXN0cyB0by9pbnN0YW5jZW9mIEFic3RyYWN0TWV0
aG9kRGVjbGFyYXRpb24gdG8gZWxpbWluYXRlIHBvdGVudGlhbCBDQ0VzCitwdWJsaWMgdm9pZCB0
ZXN0NDEyMjg0YSgpIHsKKwl0aGlzLnJ1bk5lZ2F0aXZlVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsK
KwkJCQkiWC5qYXZhIiwKKwkJCQkiaW1wb3J0IGphdmEuaW8uSU9FeGNlcHRpb247XG4iICsKKwkJ
CQkiaW50ZXJmYWNlIEkgeyB2b2lkIGZvbygpIHRocm93cyBJT0V4Y2VwdGlvbjsgfVxuIiArCisJ
CQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJCSIgdm9pZCBiYXIoKSB7XG4iICsKKwkJCQki
CSBJIGkgPSAoKSAtPiB7XG4iICsKKwkJCQkiCQkgdHJ5IHtcbiIgKworCQkJCSIJCQkgdGhyb3cg
bmV3IElPRXhjZXB0aW9uKCk7XG4iICsKKwkJCQkiCQkgfSBjYXRjaCAoSU9FeGNlcHRpb24gZSkg
ewkJCSBcbiIgKworCQkJCSIJCSB9IGZpbmFsbHkge1xuIiArCisJCQkJIgkJCSBpLmZvbygpO1xu
IiArCisJCQkJIgkJIH1cbiIgKworCQkJCSIJIH07XG4iICsKKwkJCQkiIH1cbiIgKworCQkJCSJ9
XG4iCisJCX0sCisKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjEuIEVSUk9SIGluIFguamF2YSAo
YXQgbGluZSAxMClcbiIgKyAKKwkJIglpLmZvbygpO1xuIiArIAorCQkiCV5cbiIgKyAKKwkJIlRo
ZSBsb2NhbCB2YXJpYWJsZSBpIG1heSBub3QgaGF2ZSBiZWVuIGluaXRpYWxpemVkXG4iICsgCisJ
CSItLS0tLS0tLS0tXG4iLAorCQludWxsIC8qIG5vIGV4dHJhIGNsYXNzIGxpYnJhcmllcyAqLywK
KwkJdHJ1ZSAvKiBmbHVzaCBvdXRwdXQgZGlyZWN0b3J5ICovLAorCQludWxsIC8qIGN1c3RvbSBv
cHRpb25zICovCisJKTsKK30KKy8vaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19i
dWcuY2dpP2lkPTQxMjI4NCwKKy8vWzEuOF1bY29tcGlsZXJdIFsxLjhdW2NvbXBpbGVyXSBJbnNw
ZWN0IGFsbCBjYXN0cyB0by9pbnN0YW5jZW9mIEFic3RyYWN0TWV0aG9kRGVjbGFyYXRpb24gdG8g
ZWxpbWluYXRlIHBvdGVudGlhbCBDQ0VzCitwdWJsaWMgdm9pZCB0ZXN0NDEyMjg0YigpIHsKKwl0
aGlzLnJ1bk5lZ2F0aXZlVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCQkiWC5qYXZhIiwKKwkJ
CQkiaW50ZXJmYWNlIEkgeyB2b2lkIGZvbygpO31cbiIgKyAKKwkJCQkiY2xhc3MgWCB7IFxuIiAr
CisJCQkJIiAgIGZpbmFsIGludCB0O1xuIiArCisJCQkJIiAgIFgoKXtcbiIgKworCQkJCSIgICAg
ICAgSSB4ID0gKCkgLT4gIHtcbiIgKworCQkJCSIgICAgCSB0cnkge1xuIiArCisJCQkJIiAgICAg
ICAgICAgdCA9IDM7XG4iICsKKwkJCQkiICAgICAgICAgfSBjYXRjaCAoRXhjZXB0aW9uIGUpIHtc
biIgKworCQkJCSIgICAgICAgICAgIHQgPSA0O1xuIiArCisJCQkJIiAgICAgICAgIH1cbiIgKwor
CQkJCSIgICAgICB9O1xuIiArCisJCQkJIiAgfVxuIiArCisJCQkJIn1cbiIKKwkJfSwKKworCQki
LS0tLS0tLS0tLVxuIiArIAorCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDQpXG4iICsg
CisJCSIJWCgpe1xuIiArIAorCQkiCV5eXlxuIiArIAorCQkiVGhlIGJsYW5rIGZpbmFsIGZpZWxk
IHQgbWF5IG5vdCBoYXZlIGJlZW4gaW5pdGlhbGl6ZWRcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIg
KyAKKwkJIjIuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA3KVxuIiArIAorCQkiCXQgPSAzO1xu
IiArIAorCQkiCV5cbiIgKyAKKwkJIlRoZSBmaW5hbCBmaWVsZCBYLnQgY2Fubm90IGJlIGFzc2ln
bmVkXG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIzLiBFUlJPUiBpbiBYLmphdmEgKGF0
IGxpbmUgOSlcbiIgKyAKKwkJIgl0ID0gNDtcbiIgKyAKKwkJIgleXG4iICsgCisJCSJUaGUgZmlu
YWwgZmllbGQgWC50IGNhbm5vdCBiZSBhc3NpZ25lZFxuIiArIAorCQkiLS0tLS0tLS0tLVxuIiwK
KwkJbnVsbCAvKiBubyBleHRyYSBjbGFzcyBsaWJyYXJpZXMgKi8sCisJCXRydWUgLyogZmx1c2gg
b3V0cHV0IGRpcmVjdG9yeSAqLywKKwkJbnVsbCAvKiBjdXN0b20gb3B0aW9ucyAqLworCSk7Cit9
CisvL2h0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00MTIyODQs
CisvL1sxLjhdW2NvbXBpbGVyXSBbMS44XVtjb21waWxlcl0gSW5zcGVjdCBhbGwgY2FzdHMgdG8v
aW5zdGFuY2VvZiBBYnN0cmFjdE1ldGhvZERlY2xhcmF0aW9uIHRvIGVsaW1pbmF0ZSBwb3RlbnRp
YWwgQ0NFcworcHVibGljIHZvaWQgdGVzdDQxMjI4NGMoKSB7CisJdGhpcy5ydW5OZWdhdGl2ZVRl
c3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkJIlguamF2YSIsCisJCQkJImludGVyZmFjZSBJIHsg
dm9pZCBmb28oKTt9XG4iICsgCisJCQkJImNsYXNzIFggeyBcbiIgKworCQkJCSIgICBmaW5hbCBp
bnQgdDtcbiIgKworCQkJCSIgICBYKCl7XG4iICsKKwkJCQkiICAgICAgIEkgeCA9ICgpIC0+ICB7
XG4iICsKKwkJCQkiICAgIAkgdHJ5IHtcbiIgKworCQkJCSIgICAgICAgICAgIHQgKz0gMztcbiIg
KworCQkJCSIgICAgICAgICB9IGNhdGNoIChFeGNlcHRpb24gZSkge1xuIiArCisJCQkJIiAgICAg
ICAgICAgdCArPSA0O1xuIiArCisJCQkJIiAgICAgICAgIH1cbiIgKworCQkJCSIgICAgICB9O1xu
IiArCisJCQkJIiAgfVxuIiArCisJCQkJIn1cbiIKKwkJfSwKKworCQkiLS0tLS0tLS0tLVxuIiAr
IAorCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDQpXG4iICsgCisJCSIJWCgpe1xuIiAr
IAorCQkiCV5eXlxuIiArIAorCQkiVGhlIGJsYW5rIGZpbmFsIGZpZWxkIHQgbWF5IG5vdCBoYXZl
IGJlZW4gaW5pdGlhbGl6ZWRcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjIuIEVSUk9S
IGluIFguamF2YSAoYXQgbGluZSA3KVxuIiArIAorCQkiCXQgKz0gMztcbiIgKyAKKwkJIgleXG4i
ICsgCisJCSJUaGUgZmluYWwgZmllbGQgWC50IGNhbm5vdCBiZSBhc3NpZ25lZFxuIiArIAorCQki
LS0tLS0tLS0tLVxuIiArIAorCQkiMy4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDkpXG4iICsg
CisJCSIJdCArPSA0O1xuIiArIAorCQkiCV5cbiIgKyAKKwkJIlRoZSBmaW5hbCBmaWVsZCBYLnQg
Y2Fubm90IGJlIGFzc2lnbmVkXG4iICsgCisJCSItLS0tLS0tLS0tXG4iLAorCQludWxsIC8qIG5v
IGV4dHJhIGNsYXNzIGxpYnJhcmllcyAqLywKKwkJdHJ1ZSAvKiBmbHVzaCBvdXRwdXQgZGlyZWN0
b3J5ICovLAorCQludWxsIC8qIGN1c3RvbSBvcHRpb25zICovCisJKTsKK30KIHB1YmxpYyBzdGF0
aWMgQ2xhc3MgdGVzdENsYXNzKCkgewogCXJldHVybiBOZWdhdGl2ZUxhbWJkYUV4cHJlc3Npb25z
VGVzdC5jbGFzczsKIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvVHJ5U3RhdGVtZW50LmphdmEg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvYXN0L1RyeVN0YXRlbWVudC5qYXZhCmluZGV4IDMyZGQzZDguLjEwODAxNWQgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9hc3QvVHJ5U3RhdGVtZW50LmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9U
cnlTdGF0ZW1lbnQuamF2YQpAQCAtMTA2Miw4ICsxMDYyLDkgQEAKIAkJCXRoaXMuYW55RXhjZXB0
aW9uVmFyaWFibGUuc2V0Q29uc3RhbnQoQ29uc3RhbnQuTm90QUNvbnN0YW50KTsgLy8gbm90IGlu
bGluYWJsZQogCiAJCQlpZiAoIW1ldGhvZFNjb3BlLmlzSW5zaWRlSW5pdGlhbGl6ZXIoKSkgewot
CQkJCU1ldGhvZEJpbmRpbmcgbWV0aG9kQmluZGluZyA9Ci0JCQkJCSgoQWJzdHJhY3RNZXRob2RE
ZWNsYXJhdGlvbikgbWV0aG9kU2NvcGUucmVmZXJlbmNlQ29udGV4dCkuYmluZGluZzsKKwkJCQlN
ZXRob2RCaW5kaW5nIG1ldGhvZEJpbmRpbmcgPSBtZXRob2RTY29wZS5yZWZlcmVuY2VDb250ZXh0
IGluc3RhbmNlb2YgQWJzdHJhY3RNZXRob2REZWNsYXJhdGlvbiA/CisJCQkJCSgoQWJzdHJhY3RN
ZXRob2REZWNsYXJhdGlvbikgbWV0aG9kU2NvcGUucmVmZXJlbmNlQ29udGV4dCkuYmluZGluZyA6
IChtZXRob2RTY29wZS5yZWZlcmVuY2VDb250ZXh0IGluc3RhbmNlb2YgTGFtYmRhRXhwcmVzc2lv
biA/IAorCQkJCQkJCSgoTGFtYmRhRXhwcmVzc2lvbiltZXRob2RTY29wZS5yZWZlcmVuY2VDb250
ZXh0KS5iaW5kaW5nIDogbnVsbCk7CiAJCQkJaWYgKG1ldGhvZEJpbmRpbmcgIT0gbnVsbCkgewog
CQkJCQlUeXBlQmluZGluZyBtZXRob2RSZXR1cm5UeXBlID0gbWV0aG9kQmluZGluZy5yZXR1cm5U
eXBlOwogCQkJCQlpZiAobWV0aG9kUmV0dXJuVHlwZS5pZCAhPSBUeXBlSWRzLlRfdm9pZCkgewpk
aWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9CbG9ja1Njb3BlLmphdmEgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3Vw
L0Jsb2NrU2NvcGUuamF2YQppbmRleCA4M2JlZDEyLi42OGFhMGU0IDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvbG9va3VwL0Jsb2NrU2NvcGUuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0Jsb2NrU2NvcGUu
amF2YQpAQCAtMTcwLDYgKzE3MCw4IEBACiAJTWV0aG9kU2NvcGUgbWV0aG9kU2NvcGUgPSBtZXRo
b2RTY29wZSgpOwogCWlmIChtZXRob2RTY29wZS5pc1N0YXRpYyAhPSBiaW5kaW5nLmlzU3RhdGlj
KCkpCiAJCXJldHVybiBmYWxzZTsKKwlpZiAobWV0aG9kU2NvcGUuaXNMYW1iZGFTY29wZSgpKSAK
KwkJcmV0dXJuIGZhbHNlOwogCXJldHVybiBtZXRob2RTY29wZS5pc0luc2lkZUluaXRpYWxpemVy
KCkgLy8gaW5zaWRlIGluaXRpYWxpemVyCiAJCQl8fCAoKEFic3RyYWN0TWV0aG9kRGVjbGFyYXRp
b24pIG1ldGhvZFNjb3BlLnJlZmVyZW5jZUNvbnRleHQpLmlzSW5pdGlhbGl6YXRpb25NZXRob2Qo
KTsgLy8gaW5zaWRlIGNvbnN0cnVjdG9yIG9yIGNsaW5pdAogfQpAQCAtOTM5LDYgKzk0MSw4IEBA
CiAJd2hpbGUgKG1ldGhvZFNjb3BlICE9IG51bGwpIHsKIAkJaWYgKG1ldGhvZFNjb3BlLmlzU3Rh
dGljICE9IGlzU3RhdGljKQogCQkJcmV0dXJuIGZhbHNlOworCQlpZiAobWV0aG9kU2NvcGUuaXNM
YW1iZGFTY29wZSgpKQorCQkJcmV0dXJuIGZhbHNlOwogCQlpZiAoIW1ldGhvZFNjb3BlLmlzSW5z
aWRlSW5pdGlhbGl6ZXIoKSAvLyBpbnNpZGUgaW5pdGlhbGl6ZXIKIAkJCQkmJiAhKChBYnN0cmFj
dE1ldGhvZERlY2xhcmF0aW9uKSBtZXRob2RTY29wZS5yZWZlcmVuY2VDb250ZXh0KS5pc0luaXRp
YWxpemF0aW9uTWV0aG9kKCkpIHsgLy8gaW5zaWRlIGNvbnN0cnVjdG9yIG9yIGNsaW5pdAogCQkJ
cmV0dXJuIGZhbHNlOyAvLyBmb3VuZCBzb21lIG5vbi1pbml0aWFsaXplciBjb250ZXh0
</data>

          </attachment>
      

    </bug>

</bugzilla>