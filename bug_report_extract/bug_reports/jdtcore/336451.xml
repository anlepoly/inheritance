<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>336451</bug_id>
          
          <creation_ts>2011-02-06 07:27:00 -0500</creation_ts>
          <short_desc>&quot;Content Assist&quot; does not complete normally on certain types</short_desc>
          <delta_ts>2011-05-12 09:16:57 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.6.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>3.7 RC1</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Alexey Titov">a.m.titov</reporter>
          <assigned_to name="Ayushman Jain">amj87.iitr</assigned_to>
          <cc>kentarou</cc>
    
    <cc>Olivier_Thomann</cc>
    
    <cc>satyam.kandula</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="41763"
          type_id="1"
          status="+"
          setter="Olivier_Thomann"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1878909</commentid>
    <comment_count>0</comment_count>
    <who name="Alexey Titov">a.m.titov</who>
    <bug_when>2011-02-06 07:27:54 -0500</bug_when>
    <thetext>What steps will reproduce the problem?
1.  Create the following example:

public class EclipseTest {
	private static interface InvokerIF{
		public &lt;T extends ArgIF&gt; T invoke(T arg) throws Exception;
	}
	
	private static class Invoker implements InvokerIF{
		public &lt;T extends ArgIF&gt; T invoke(T arg){
			return arg;
		}
	}
	
	private static interface ArgIF{
	}
	
	private static interface ArgIF2&lt;C&gt; extends ArgIF{
		
	}
	private static class ArgImpl&lt;C&gt; implements ArgIF2&lt;C&gt;{
		public ArgImpl() {
			super();
		}
	}
	public static void main(String[] args) throws Exception {
		InvokerIF test = new Invoker();
		test.invoke(new ArgImpl)
	}
}

2.  Place cursor after &quot;new ArgImpl&quot;, before &quot;)&quot;
3.  Call &quot;Content Assist&quot; by pressing Ctrl+space

Note: if you change 

		public &lt;T extends ArgIF&gt; T invoke(T arg) throws Exception;
 
to

		public &lt;T extends ArgIF&gt; T invoke(T arg);

&quot;Content Assist&quot; works as expected.

-- Error Details --
Date: Sun Feb 06 15:12:48 MSK 2011
Message: org.eclipse.jdt.core.dom.MethodBinding cannot be cast to org.eclipse.jdt.core.dom.ITypeBinding
Severity: Error
Product: Eclipse 1.3.1.20100913-1228 (org.eclipse.epp.package.jee.product)
Plugin: org.eclipse.ui
Session Data:
eclipse.buildId=M20100909-0800
java.version=1.6.0_20
java.vendor=Sun Microsystems Inc.
BootLoader constants: OS=linux, ARCH=x86_64, WS=gtk, NL=ru_RU
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os linux -ws gtk -arch x86_64 -product org.eclipse.epp.package.jee.product


Exception Stack Trace:
java.lang.ClassCastException: org.eclipse.jdt.core.dom.MethodBinding cannot be cast to org.eclipse.jdt.core.dom.ITypeBinding
	at org.eclipse.jdt.internal.ui.text.java.LazyGenericTypeProposal.getExpectedType(LazyGenericTypeProposal.java:612)
	at org.eclipse.jdt.internal.ui.text.java.LazyGenericTypeProposal.computeTypeArgumentProposals(LazyGenericTypeProposal.java:308)
	at org.eclipse.jdt.internal.ui.text.java.LazyGenericTypeProposal.apply(LazyGenericTypeProposal.java:205)
	at org.eclipse.jdt.internal.ui.text.java.AbstractJavaCompletionProposal.apply(AbstractJavaCompletionProposal.java:317)
	at org.eclipse.jdt.internal.ui.text.java.AbstractJavaCompletionProposal.apply(AbstractJavaCompletionProposal.java:332)
	at org.eclipse.jdt.internal.ui.text.java.JavaMethodCompletionProposal.apply(JavaMethodCompletionProposal.java:55)
	at org.eclipse.jdt.internal.ui.text.java.AbstractJavaCompletionProposal.apply(AbstractJavaCompletionProposal.java:477)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.insertProposal(CompletionProposalPopup.java:928)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$21(CompletionProposalPopup.java:892)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:495)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.showProposals(CompletionProposalPopup.java:482)
	at org.eclipse.jface.text.contentassist.ContentAssistant.showPossibleCompletions(ContentAssistant.java:1660)
	at org.eclipse.jdt.internal.ui.javaeditor.CompilationUnitEditor$AdaptedSourceViewer.doOperation(CompilationUnitEditor.java:182)
	at org.eclipse.ui.texteditor.ContentAssistAction$1.run(ContentAssistAction.java:82)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)
	at org.eclipse.ui.texteditor.ContentAssistAction.run(ContentAssistAction.java:80)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:498)
	at org.eclipse.ui.commands.ActionHandler.execute(ActionHandler.java:185)
	at org.eclipse.ui.internal.handlers.LegacyHandlerWrapper.execute(LegacyHandlerWrapper.java:109)
	at org.eclipse.core.commands.Command.executeWithChecks(Command.java:476)
	at org.eclipse.core.commands.ParameterizedCommand.executeWithChecks(ParameterizedCommand.java:508)
	at org.eclipse.ui.internal.handlers.HandlerService.executeCommand(HandlerService.java:169)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.executeCommand(WorkbenchKeyboard.java:468)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.press(WorkbenchKeyboard.java:786)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.processKeyEvent(WorkbenchKeyboard.java:885)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.filterKeySequenceBindings(WorkbenchKeyboard.java:567)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard.access$3(WorkbenchKeyboard.java:508)
	at org.eclipse.ui.internal.keys.WorkbenchKeyboard$KeyDownFilter.handleEvent(WorkbenchKeyboard.java:123)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Display.filterEvent(Display.java:1524)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1257)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1282)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1267)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1294)
	at org.eclipse.swt.widgets.Widget.gtk_key_press_event(Widget.java:730)
	at org.eclipse.swt.widgets.Control.gtk_key_press_event(Control.java:2841)
	at org.eclipse.swt.widgets.Composite.gtk_key_press_event(Composite.java:734)
	at org.eclipse.swt.widgets.Widget.windowProc(Widget.java:1743)
	at org.eclipse.swt.widgets.Control.windowProc(Control.java:4796)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:4360)
	at org.eclipse.swt.internal.gtk.OS._gtk_main_do_event(Native Method)
	at org.eclipse.swt.internal.gtk.OS.gtk_main_do_event(OS.java:8168)
	at org.eclipse.swt.widgets.Display.eventProc(Display.java:1238)
	at org.eclipse.swt.internal.gtk.OS._g_main_context_iteration(Native Method)
	at org.eclipse.swt.internal.gtk.OS.g_main_context_iteration(OS.java:2229)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3159)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2640)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2604)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2438)
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:671)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:664)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:115)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:369)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:616)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:619)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:574)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1407)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1383)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1878940</commentid>
    <comment_count>1</comment_count>
    <who name="Kentarou Fukuda">kentarou</who>
    <bug_when>2011-02-06 13:05:07 -0500</bug_when>
    <thetext>Does this relate to JDT core?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1878995</commentid>
    <comment_count>2</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-02-06 20:37:35 -0500</bug_when>
    <thetext>(In reply to comment #1)
&gt; Does this relate to JDT core?
I think so. I believe the underlying problem comes from JDT/Core.

Ayushman, please investigate.
Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1926422</commentid>
    <comment_count>3</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-05-09 13:18:15 -0400</bug_when>
    <thetext>This happens because of incorrect parsing of the binding key.
org.eclipse.jdt.internal.core.util.BindingKeyParser.parseMethod() first parses the method signature and then parses the exceptions via the call to parseThrownExceptions(), and then the parsing of the type variables is done in org.eclipse.jdt.internal.core.util.BindingKeyParser.parse(boolean), line 647 after the parseMethod() has returned.

Now the problem is that the parsing of the exceptions in parseThrownExceptions() is done by creating another parser but sharing the same scanner. So when the sub parser starts parsing, it finds the qualified name representing the signature and then when it tries to look for type variables, it also finds them since the signature looks like this:

LEclipseTest$InvokerIF;.invoke&lt;T::LEclipseTest$ArgIF;&gt;(TT;)TT;|Ljava/lang/RuntimeException;:TT;

The :TT; represents the type parameters and since they&apos;re immediately followed by the thrown exception, the parser moves the scanner ahead(though the type parameters are not relevant for this parser and it simply ignores it, the scanner cannot be reset back now). This way, when the control returns back to the original parser, and when it tries to look for the type variables of the method invoke(), it cannot find it since the scanner has already moved one place ahead.

A possible fix is to make sure the parser does not look for type variable when parsing thrown exceptions, since exceptions cannot have type variables. I&apos;m testing this fix.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1926478</commentid>
    <comment_count>4</comment_count>
      <attachid>195119</attachid>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-05-09 14:20:42 -0400</bug_when>
    <thetext>Created attachment 195119
proposed fix

Patch passes all tests</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1926962</commentid>
    <comment_count>5</comment_count>
      <attachid>195191</attachid>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-05-10 06:25:47 -0400</bug_when>
    <thetext>Created attachment 195191
proposed fix v1.0 + regression tests

This patch simply makes sure that the scanner doesnt look for tyoe variables while parsing thrown exceptions</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1926963</commentid>
    <comment_count>6</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-05-10 06:26:41 -0400</bug_when>
    <thetext>Olivier, can you please review? Thanks!

A UI test will have to be added to check that content assist doesn&apos;t throw an exception here.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1927126</commentid>
    <comment_count>7</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-05-10 10:02:17 -0400</bug_when>
    <thetext>+1. The problem does come from the fact parsing the thrown exceptions also consuming the next type variable. The binding key resolver has lots of side-effects everywhere.
Consuming the exception sets the type binding to be the exception type and the enclosing keybinding parser method binding is not remembered. So when scanning the type variable at the same time the exceptions are scanned, there is no match for the type variable binding name, because the type variable of the exception type are retrieved instead of the one from the method binding.

So forcing to skip the type variable scanning while scanning the exception type seems to make sense. Once the exception is scanned, the binding key parser still needs to scan the type variable but in this case the method binding is there to return its type variables.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1927527</commentid>
    <comment_count>8</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-05-10 15:33:01 -0400</bug_when>
    <thetext>Thanks Olivier.

Released in HEAD for 3.7RC1</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1928865</commentid>
    <comment_count>9</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-05-12 06:51:27 -0400</bug_when>
    <thetext>
&gt; A UI test will have to be added to check that content assist doesn&apos;t throw an
&gt; exception here.
Added test via bug 345363</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1928939</commentid>
    <comment_count>10</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-05-12 09:16:57 -0400</bug_when>
    <thetext>Verified for 3.7RC1 using I20110511-0800</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>195119</attachid>
            <date>2011-05-09 14:20:00 -0400</date>
            <delta_ts>2011-05-10 06:25:47 -0400</delta_ts>
            <desc>proposed fix</desc>
            <filename>patch336451.txt</filename>
            <type>text/plain</type>
            <size>1406</size>
            <attacher name="Ayushman Jain">amj87.iitr</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMA0KI1Agb3JnLmVjbGlwc2UuamR0LmNvcmUN
CkluZGV4OiBtb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS91dGlsL0JpbmRpbmdL
ZXlQYXJzZXIuamF2YQ0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PQ0KUkNTIGZpbGU6IC9jdnNyb290L2VjbGlwc2Uvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvdXRp
bC9CaW5kaW5nS2V5UGFyc2VyLmphdmEsdg0KcmV0cmlldmluZyByZXZpc2lvbiAxLjQyDQpkaWZm
IC11IC1yMS40MiBCaW5kaW5nS2V5UGFyc2VyLmphdmENCi0tLSBtb2RlbC9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29yZS91dGlsL0JpbmRpbmdLZXlQYXJzZXIuamF2YQkyMSBKYW4gMjAxMSAw
NzoxNjozMyAtMDAwMAkxLjQyDQorKysgbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
cmUvdXRpbC9CaW5kaW5nS2V5UGFyc2VyLmphdmEJOSBNYXkgMjAxMSAxODoyMDoyOCAtMDAwMA0K
QEAgLTQ0NSw2ICs0NDUsOCBAQA0KIAlwcml2YXRlIGJvb2xlYW4gaGFzVHlwZU5hbWUgPSB0cnVl
Ow0KIA0KIAlwcml2YXRlIGJvb2xlYW4gaXNNYWxmb3JtZWQ7DQorCQ0KKwlwcml2YXRlIGJvb2xl
YW4gaXNQYXJzaW5nVGhyb3duRXhjZXB0aW9ucyA9IGZhbHNlOw0KIA0KIAlwdWJsaWMgQmluZGlu
Z0tleVBhcnNlcihCaW5kaW5nS2V5UGFyc2VyIHBhcnNlcikgew0KIAkJdGhpcygiIik7IC8vJE5P
Ti1OTFMtMSQNCkBAIC02NTIsNyArNjU0LDcgQEANCiAJCQkJCW1hbGZvcm1lZEtleSgpOw0KIAkJ
CQkJcmV0dXJuOw0KIAkJCX0NCi0JCX0gZWxzZSBpZiAodGhpcy5zY2FubmVyLmlzQXRUeXBlVmFy
aWFibGVTdGFydCgpKSB7DQorCQl9IGVsc2UgaWYgKCF0aGlzLmlzUGFyc2luZ1Rocm93bkV4Y2Vw
dGlvbnMgJiYgdGhpcy5zY2FubmVyLmlzQXRUeXBlVmFyaWFibGVTdGFydCgpKSB7DQogCQkJcGFy
c2VUeXBlVmFyaWFibGUoKTsNCiAJCX0gZWxzZSBpZiAodGhpcy5zY2FubmVyLmlzQXRXaWxkY2Fy
ZFN0YXJ0KCkpIHsNCiAJCQlwYXJzZVdpbGRjYXJkKCk7DQpAQCAtODQyLDYgKzg0NCw3IEBADQog
CQl3aGlsZSAodGhpcy5zY2FubmVyLmlzQXRUaHJvd25TdGFydCgpICYmICF0aGlzLmlzTWFsZm9y
bWVkKSB7DQogCQkJdGhpcy5zY2FubmVyLnNraXBUaHJvd25TdGFydCgpOw0KIAkJCUJpbmRpbmdL
ZXlQYXJzZXIgcGFyc2VyID0gbmV3UGFyc2VyKCk7DQorCQkJcGFyc2VyLmlzUGFyc2luZ1Rocm93
bkV4Y2VwdGlvbnMgPSB0cnVlOw0KIAkJCXBhcnNlci5wYXJzZSgpOw0KIAkJCWNvbnN1bWVQYXJz
ZXIocGFyc2VyKTsNCiAJCQljb25zdW1lRXhjZXB0aW9uKCk7DQo=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>195191</attachid>
            <date>2011-05-10 06:25:00 -0400</date>
            <delta_ts>2011-05-10 06:25:47 -0400</delta_ts>
            <desc>proposed fix v1.0 + regression tests</desc>
            <filename>patch336451.txt</filename>
            <type>text/plain</type>
            <size>2997</size>
            <attacher name="Ayushman Jain">amj87.iitr</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMA0KI1Agb3JnLmVjbGlwc2UuamR0LmNvcmUN
CkluZGV4OiBtb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS91dGlsL0JpbmRpbmdL
ZXlQYXJzZXIuamF2YQ0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PQ0KUkNTIGZpbGU6IC9jdnNyb290L2VjbGlwc2Uvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvdXRp
bC9CaW5kaW5nS2V5UGFyc2VyLmphdmEsdg0KcmV0cmlldmluZyByZXZpc2lvbiAxLjQyDQpkaWZm
IC11IC1yMS40MiBCaW5kaW5nS2V5UGFyc2VyLmphdmENCi0tLSBtb2RlbC9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29yZS91dGlsL0JpbmRpbmdLZXlQYXJzZXIuamF2YQkyMSBKYW4gMjAxMSAw
NzoxNjozMyAtMDAwMAkxLjQyDQorKysgbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
cmUvdXRpbC9CaW5kaW5nS2V5UGFyc2VyLmphdmEJMTAgTWF5IDIwMTEgMTA6MTc6MTQgLTAwMDAN
CkBAIC00NDUsNiArNDQ1LDggQEANCiAJcHJpdmF0ZSBib29sZWFuIGhhc1R5cGVOYW1lID0gdHJ1
ZTsNCiANCiAJcHJpdmF0ZSBib29sZWFuIGlzTWFsZm9ybWVkOw0KKwkNCisJcHJpdmF0ZSBib29s
ZWFuIGlzUGFyc2luZ1Rocm93bkV4Y2VwdGlvbnMgPSBmYWxzZTsJLy8gaHR0cHM6Ly9idWdzLmVj
bGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTMzNjQ1MQ0KIA0KIAlwdWJsaWMgQmluZGlu
Z0tleVBhcnNlcihCaW5kaW5nS2V5UGFyc2VyIHBhcnNlcikgew0KIAkJdGhpcygiIik7IC8vJE5P
Ti1OTFMtMSQNCkBAIC02NTIsNyArNjU0LDcgQEANCiAJCQkJCW1hbGZvcm1lZEtleSgpOw0KIAkJ
CQkJcmV0dXJuOw0KIAkJCX0NCi0JCX0gZWxzZSBpZiAodGhpcy5zY2FubmVyLmlzQXRUeXBlVmFy
aWFibGVTdGFydCgpKSB7DQorCQl9IGVsc2UgaWYgKCF0aGlzLmlzUGFyc2luZ1Rocm93bkV4Y2Vw
dGlvbnMgJiYgdGhpcy5zY2FubmVyLmlzQXRUeXBlVmFyaWFibGVTdGFydCgpKSB7DQogCQkJcGFy
c2VUeXBlVmFyaWFibGUoKTsNCiAJCX0gZWxzZSBpZiAodGhpcy5zY2FubmVyLmlzQXRXaWxkY2Fy
ZFN0YXJ0KCkpIHsNCiAJCQlwYXJzZVdpbGRjYXJkKCk7DQpAQCAtODQyLDYgKzg0NCw3IEBADQog
CQl3aGlsZSAodGhpcy5zY2FubmVyLmlzQXRUaHJvd25TdGFydCgpICYmICF0aGlzLmlzTWFsZm9y
bWVkKSB7DQogCQkJdGhpcy5zY2FubmVyLnNraXBUaHJvd25TdGFydCgpOw0KIAkJCUJpbmRpbmdL
ZXlQYXJzZXIgcGFyc2VyID0gbmV3UGFyc2VyKCk7DQorCQkJcGFyc2VyLmlzUGFyc2luZ1Rocm93
bkV4Y2VwdGlvbnMgPSB0cnVlOw0KIAkJCXBhcnNlci5wYXJzZSgpOw0KIAkJCWNvbnN1bWVQYXJz
ZXIocGFyc2VyKTsNCiAJCQljb25zdW1lRXhjZXB0aW9uKCk7DQojUCBvcmcuZWNsaXBzZS5qZHQu
Y29yZS50ZXN0cy5tb2RlbA0KSW5kZXg6IHNyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9t
b2RlbC9CaW5kaW5nS2V5VGVzdHMuamF2YQ0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KUkNTIGZpbGU6IC9jdnNyb290
L2VjbGlwc2Uvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNl
L2pkdC9jb3JlL3Rlc3RzL21vZGVsL0JpbmRpbmdLZXlUZXN0cy5qYXZhLHYNCnJldHJpZXZpbmcg
cmV2aXNpb24gMS40NA0KZGlmZiAtdSAtcjEuNDQgQmluZGluZ0tleVRlc3RzLmphdmENCi0tLSBz
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvbW9kZWwvQmluZGluZ0tleVRlc3RzLmphdmEJ
NiBKYW4gMjAxMSAxOTo1ODo0OSAtMDAwMAkxLjQ0DQorKysgc3JjL29yZy9lY2xpcHNlL2pkdC9j
b3JlL3Rlc3RzL21vZGVsL0JpbmRpbmdLZXlUZXN0cy5qYXZhCTEwIE1heSAyMDExIDEwOjE3OjE3
IC0wMDAwDQpAQCAtNjM5LDQgKzYzOSwyNiBAQA0KIAkJCSJMTnVsbEJpbmRpbmd+T25lPFtMTnVs
bEJpbmRpbmd+T3V0ZXI8TGphdmEvbGFuZy9JbnRlZ2VyOz4uSW5uZXI8TGphdmEvbGFuZy9Eb3Vi
bGU7Pjs+OyINCiAJCSk7DQogCX0NCisJLyoNCisJICogaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3Jn
L2J1Z3Mvc2hvd19idWcuY2dpP2lkPTMzNjQ1MQ0KKwkgKiBNYWtlIHN1cmUgdGhhdCB0aGUgYmlu
ZGluZyBvYnRhaW5lZCBpcyBhIHR5cGUgYmluZGluZyBjb3JyZXNwb25kaW5nIHRvIHRoZQ0KKwkg
KiBtZXRob2QgdHlwZSB2YXJpYWJsZXMNCisJICovDQorCXB1YmxpYyB2b2lkIHRlc3QwNTcoKSB7
DQorCQlhc3NlcnRCaW5kaW5nS2V5U2lnbmF0dXJlRXF1YWxzKA0KKwkJCSJUVDsiLA0KKwkJCSJM
RWNsaXBzZVRlc3QkSW52b2tlcklGOy5pbnZva2U8VDo6TEVjbGlwc2VUZXN0JEFyZ0lGOz4oVFQ7
KVRUO3xMamF2YS9sYW5nL1J1bnRpbWVFeGNlcHRpb247OlRUOyINCisJCSk7DQorCX0NCisJLyoN
CisJICogaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTMzNjQ1
MQ0KKwkgKiBNYWtlIHN1cmUgdGhhdCB0aGUgYmluZGluZyBvYnRhaW5lZCBpcyBhIHR5cGUgYmlu
ZGluZyBjb3JyZXNwb25kaW5nIHRvIHRoZQ0KKwkgKiBtZXRob2QgdHlwZSB2YXJpYWJsZXMuIElu
IHRoaXMgY2FzZSBtZXRob2QgaGFzIDIgZXhjZXB0aW9ucyBhbmQgMiB0eXBlIHZhcmlhYmxlcy4N
CisJICovDQorCXB1YmxpYyB2b2lkIHRlc3QwNTgoKSB7DQorCQlhc3NlcnRCaW5kaW5nS2V5U2ln
bmF0dXJlRXF1YWxzKA0KKwkJCSJUVDsiLA0KKwkJCSJMRWNsaXBzZVRlc3QkSW52b2tlcklGOy5p
bnZva2U8VDo6TEVjbGlwc2VUZXN0JEFyZ0lGO1k6TGphdmEvbGFuZy9PYmplY3Q7PihUVDspVFQ7
fExqYXZhL2xhbmcvUnVudGltZUV4Y2VwdGlvbjt8TGphdmEvbGFuZy9JbmRleE91dE9mQm91bmRz
RXhjZXB0aW9uOzpUVDsiDQorCQkpOw0KKwl9DQogfQ0K
</data>

          </attachment>
      

    </bug>

</bugzilla>