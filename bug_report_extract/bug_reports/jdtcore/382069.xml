<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>382069</bug_id>
          
          <creation_ts>2012-06-07 18:31:00 -0400</creation_ts>
          <short_desc>[null] Make the null analysis consider JUnit&apos;s assertNotNull similarly to assertions</short_desc>
          <delta_ts>2013-08-21 12:08:25 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.3 M6</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Tor Norbye">tor.norbye</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>ed</cc>
    
    <cc>jarthana</cc>
    
    <cc>markus_keller</cc>
    
    <cc>opinali</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>toellrich</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2121383</commentid>
    <comment_count>0</comment_count>
    <who name="Tor Norbye">tor.norbye</who>
    <bug_when>2012-06-07 18:31:44 -0400</bug_when>
    <thetext>Build Identifier: 20120524-0130

It would be nice if the null analysis would be aware of JUnit&apos;s assertNull and assertNotNull, and treat it in the same way that it already handles &quot;assert x == null&quot; and &quot;assert x != null&quot;: as a way to guide the analysis for unknown null states.

Here&apos;s a scenario (from issue 381445):
Similarly, in some JUnit tests, I had places where I had 
    assertNotNull(x);
and I would later get a warning from the null analysis that &quot;x may be null&quot;.
When I inserted a &quot;assert x != null&quot; after the assertNotNull JUnit call, the
warning went away, but in a similar spirit to the Closeables.closeQuietly
issue, it would be nice if this JUnit API call could be known to be synonymous
with assert != null.

Similarly to issue 381445, there are some Guava (and probably Apache Commons) null assertion methods as well -- see http://code.google.com/p/guava-libraries/wiki/PreconditionsExplained . If you for example see Preconditions.checkNotNull(x), that&apos;s just like assert x != null. It would be nice to have these work as well.

Reproducible: Always</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2121538</commentid>
    <comment_count>1</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2012-06-08 06:50:26 -0400</bug_when>
    <thetext>I&apos;m OK with adding exceptions for the two JUnit Assert classes, Guava&apos;s Preconditions.checkNotNull(..) and a similar construct in Apache Commons.

We already do the same for org.eclipse.core.runtime.Assert.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2146793</commentid>
    <comment_count>2</comment_count>
    <who name="Thomas Oellrich">toellrich</who>
    <bug_when>2012-08-10 07:38:30 -0400</bug_when>
    <thetext>Next to those mentioned, it would be great if you could add Hamcrest&apos;s Matchers as well:

 assertThat(x, is(notNullValue())); 

or

 assertThat(x, is(not(nullValue))));</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2146802</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-08-10 08:17:02 -0400</bug_when>
    <thetext>(In reply to comment #2)
&gt; Next to those mentioned, it would be great if you could add Hamcrest&apos;s
&gt; Matchers as well:
&gt; 
&gt;  assertThat(x, is(notNullValue())); 
&gt; 
&gt; or
&gt; 
&gt;  assertThat(x, is(not(nullValue))));

I&apos;m not familiar with hamcrest, but this looks complicated to me. the JUnit and Guava methods are structurally simple, this:
   assertNotNull(x)
is treated similar to:
   assert x != null;

However, in the hamcrest case some sophisticated pattern matching would be required to recognize the above patterns. The JDT compiler doesn&apos;t perform any pattern matching that could cover these patterns.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2147631</commentid>
    <comment_count>4</comment_count>
    <who name="Thomas Oellrich">toellrich</who>
    <bug_when>2012-08-14 02:20:51 -0400</bug_when>
    <thetext>In understand. It would be good, though, if you could add Java 7&apos;s Objects#requireNonNull.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2147722</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-08-14 05:52:50 -0400</bug_when>
    <thetext>(In reply to comment #4)
&gt; In understand. It would be good, though, if you could add Java 7&apos;s
&gt; Objects#requireNonNull.

Makes sense, thanks for mentioning.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2207224</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-01-24 13:35:15 -0500</bug_when>
    <thetext>Summarizing utilities mentioned so far:

junit.framework.Assert
org.apache.commons.lang.Validate
org.apache.commons.lang3.Validate
com.google.common.base.Preconditions
java.util.Objects</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2217788</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-02-17 13:38:18 -0500</bug_when>
    <thetext>Released for 4.3 M6 via 340d76460697d1d853431b9a4e8d18df2a5632b9

The patch considers all utilities mentioned in comment 6.
Of these classes all checks for null / nonnull and boolean assertions are respected.

Analysis uses the asserted information for downstream analysis and detects dead code due to always-failing assertions.

Also plays well with syntactic analysis for @NonNull fields.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2217961</commentid>
    <comment_count>8</comment_count>
    <who name="Ed Willink">ed</who>
    <bug_when>2013-02-18 04:41:15 -0500</bug_when>
    <thetext>(In reply to comment #6)
&gt; Summarizing utilities mentioned so far:
&gt; 
&gt; junit.framework.Assert
&gt; org.apache.commons.lang.Validate
&gt; org.apache.commons.lang3.Validate
&gt; com.google.common.base.Preconditions
&gt; java.util.Objects

How about org.eclipse.core.runtime.Assert?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2217970</commentid>
    <comment_count>9</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-02-18 04:54:11 -0500</bug_when>
    <thetext>(In reply to comment #8)
&gt; (In reply to comment #6)
&gt; &gt; Summarizing utilities mentioned so far:
&gt; &gt; 
&gt; &gt; junit.framework.Assert
&gt; &gt; org.apache.commons.lang.Validate
&gt; &gt; org.apache.commons.lang3.Validate
&gt; &gt; com.google.common.base.Preconditions
&gt; &gt; java.util.Objects
&gt; 
&gt; How about org.eclipse.core.runtime.Assert?

Yes. This has already been handled via bug 127575, and I&apos;ve included more methods of that class as of this bug.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2229693</commentid>
    <comment_count>10</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-03-12 11:45:19 -0400</bug_when>
    <thetext>I am sorry if this has been documented somewhere, but I am not able to understand the following behavior:

class Y {
	@Nullable String str;
	int foo(@Nullable String str2) {
		int i;
		assert str2 != null;
		i = str2.length();	// No warning
		
		org.junit.Assert.assertNotNull(str2);
		i = str2.length();	// No warning
		
		org.junit.Assert.assertNotNull(str);
		i = str.length();	// No warning

		assert this.str != null;
		i = str.length(); // Potential NPE warning

		return i;
	}
}

Why is the assert not having any effect on the nullable field?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2229801</commentid>
    <comment_count>11</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-03-12 13:08:23 -0400</bug_when>
    <thetext>(In reply to comment #10)
&gt; Why is the assert not having any effect on the nullable field?

Good point! I gave it a new home in bug 403086.

However, I hold that it&apos;s not a problem of this bug but a problem that 
previous fixes in other bugs weren&apos;t as smart :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2229807</commentid>
    <comment_count>12</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-03-12 13:10:10 -0400</bug_when>
    <thetext>Verified for 4.3 M6 with build I20130311-2000</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2297419</commentid>
    <comment_count>13</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-08-21 11:57:16 -0400</bug_when>
    <thetext>*** Bug 415587 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2297426</commentid>
    <comment_count>14</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-08-21 12:08:25 -0400</bug_when>
    <thetext>*** Bug 415587 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>