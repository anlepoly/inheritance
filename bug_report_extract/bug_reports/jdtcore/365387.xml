<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>365387</bug_id>
          
          <creation_ts>2011-12-01 23:07:00 -0500</creation_ts>
          <short_desc>[compiler][null] bug 186342: Issues to follow up post review and verification.</short_desc>
          <delta_ts>2012-01-24 12:29:52 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>3.8 M5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>daniel_megert</cc>
    
    <cc>jarthana</cc>
    
    <cc>markus_keller</cc>
    
    <cc>satyam.kandula</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2034780</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-01 23:07:24 -0500</bug_when>
    <thetext>This bug will be used a as a placeholder to log issues I discover during review
and verification of the implementation for bug 186342 for M4 test week.

Source code references are w.r.t the patch referred to by
https://bugs.eclipse.org/bugs/show_bug.cgi?id=186342#c196

Right now there is one issue:

(1) What are the changes in Scanner.java for ? Even without those changes all
tests pass. Changes to Scanner.java almost always need to be mirrored into
PublicScanner.java and in this case, only one file has changed.

As this change, even if only a minor one, constitutes a change deep in the
entrails, we should justify this with a regression test. Otherwise, if this
change is not integral to this feature we should consider backing out this 
particular change.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2034791</commentid>
    <comment_count>1</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-12-02 01:11:23 -0500</bug_when>
    <thetext>Also including this query here:
Is the TODO mentioned here (https://bugs.eclipse.org/bugs/show_bug.cgi?id=186342#c171) done?
&gt;+ variant using a generic constructor to challenge an alternative flow in
&gt;  BinaryTypeBinding.createMethod: this revealed an omission to propagate
&gt;  parameterNonNullness from an original MethodBinding to its
&gt;  ParameterizedGenericMethodBinding version. 
&gt;  Fixed for several subclasses of MethodBinding. I omitted:
&gt;  + ProblemMethodBinding: obviously irrelevant, right?
&gt;  + SyntheticMethodBinding: is probably relevant. TODO
&gt;  + PolymorphicMethodBinding: frankly I couldn&apos;t think of a way to get
&gt;    parameter annotations into one of these.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2034792</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-02 01:13:20 -0500</bug_when>
    <thetext>(In reply to comment #0)

&gt; (1) What are the changes in Scanner.java for ? Even without those changes all
&gt; tests pass. Changes to Scanner.java almost always need to be mirrored into
&gt; PublicScanner.java and in this case, only one file has changed.

Ayush pointed me to https://bugs.eclipse.org/bugs/show_bug.cgi?id=186342#c118
which claims this scanner change was made to address a regression in
CompletionTests.testCompletionVariableName32. This test did not fail for
me when I removed the scanner changes.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2034882</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-02 07:12:15 -0500</bug_when>
    <thetext>I&apos;ll assign issue numbers (2) and (3) for these two brought over from
https://bugs.eclipse.org/bugs/show_bug.cgi?id=186342#c198

(2_) Just checking - was this part done?
&gt;+ SyntheticMethodBinding: is probably relevant. TODO

(3) And is there a bug for this:
&gt;Created attachment 207657 [details] [details]
&gt;alternative strategy for internally encoding nullness defaults

Just a clarification that an &quot;issue&quot; listed here need not necessarily
result in a code change and even when it does need not go into M4.
It only means that the issue must be given due consideration right
away.

I have finished reviewing 41/59 files that went into the commit.
So far no major issues have been found. A bunch of minor ones found
are:

(4) OPTION_ReportNullSpecInsufficientInfo is missing in the list returned
by org.eclipse.jdt.internal.compiler.impl.CompilerOptions.warningOptionNames()
Is this intentional ?

(5) org.eclipse.jdt.internal.compiler.impl.CompilerOptions.resetDefaults() is
not resetting defaultNonNullness - Is this intentional ? 

(6) Could we have reused
org.eclipse.jdt.internal.compiler.lookup.MethodScope.insideTypeAnnotation
instead of inventing
org.eclipse.jdt.internal.compiler.ast.ASTNode.IsMemberValueReference ?
At the point where we use this bit to avoid reporting a forward reference,
the insideTypeAnnotation field has been updated properly for us to have to
 have used it, though it is not readily available there - being a member of
MethodScope, while the static type at the use site is the parent type
BlockScope.

(7) Do the other calls to forwardReference need similar treatment ? (I didn&apos;t
check in any detail)

(8) just a nitpick: &quot;can not&quot; should be cannot.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2034885</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-02 07:24:23 -0500</bug_when>
    <thetext>One concern I have regarding earlier/eagerer(?!) processing of annotations:
I understand the rationale that necessitates this. However I haven&apos;t studied
the patch enough to know if the code that was processing annotations in the
&quot;usual place&quot; has been removed or is still there.

It looks like to avoid a test failure in org.eclipse.jdt.core.tests.compiler.regression.EnumTest.test180()
*even when the master switch was off* some new code changes were needed to
be done. It would have been ideal if all the eager processing of annotations
was controlled by the master switch so that upon upgrading to a new eclipse
a project will have ZERO IMPACT if they don&apos;t plan to use the new feature.

If the original annotation processing code continues to be in place, I would
recommend using the master switch at all eager processing sites, given how
close this is to the milestone. After a few weeks, this can be removed if
deemed a good idea.

Stephan/Ayush, please clarify where we stand on this. In case the old code paths
have been deleted, could you point me to the relevant places ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2034943</commentid>
    <comment_count>5</comment_count>
      <attachid>207842</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-02 08:56:29 -0500</bug_when>
    <thetext>Created attachment 207842
Fix for an AIOOBE found during stress test

(9) While doing stress tests which the new analysis enabled
on the code base of the JDT/Core with many null-annotations added
I observed an AIOOBE that can easily be fixed by the attached patch.

Analysis showed that the actual array size of this.expectedTypes
can be more than one behind the value in nullCount.

I propose to include the fix in M4 based on the following assessment:
- the bug does not occur when the analysis is disabled
+ AIOOBE is bad and the fix is local and small.

A regression test will follow.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2034946</commentid>
    <comment_count>6</comment_count>
      <attachid>207843</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-02 09:05:23 -0500</bug_when>
    <thetext>Created attachment 207843
test &amp; fix for a wrong warning

(10) The same stress test as in the previous comment also revealed a bogus
warning (redunant null check). The attached patch contains a regression
test and a straight forward fix.

Analysis: a message send, where the target method has the @Nullable annotation
reports its null-status as POTENTIALLY_NULL, which is OK for raising desired
warnings. However, when assigning the result to a variable that previously
hat status NULL, this fails to signal that the variable can also have a 
non-null value after the assignment. The simple fix is to report
POTENTIALLY_NULL | POTENTIALLY_NON_NULL 

Assessment:
- also this bug only occurs with the new analysis enabled
- the wrong warning is no showstopper
+ the fix is well localized and small</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2034950</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-02 09:12:16 -0500</bug_when>
    <thetext>(In reply to comment #0)
&gt; (1) What are the changes in Scanner.java for ? Even without those changes all
&gt; tests pass. Changes to Scanner.java almost always need to be mirrored into
&gt; PublicScanner.java and in this case, only one file has changed.
&gt; 
&gt; As this change, even if only a minor one, constitutes a change deep in the
&gt; entrails, we should justify this with a regression test. Otherwise, if this
&gt; change is not integral to this feature we should consider backing out this 
&gt; particular change.

I&apos;ll try to reconstruct the regression in a test case as a basis for
your decission about possible backing out.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2034973</commentid>
    <comment_count>8</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-02 09:30:37 -0500</bug_when>
    <thetext>(In reply to comment #3)
&gt; (2_) Just checking - was this part done?
&gt; &gt;+ SyntheticMethodBinding: is probably relevant. TODO

Still TODO, I&apos;m not sure if any change is required.
Will report back soon.
 
&gt; (3) And is there a bug for this:
&gt; &gt;Created attachment 207657 [details] [details] [details]
&gt; &gt;alternative strategy for internally encoding nullness defaults

Clearly for consideration post M4.

&gt; (4) OPTION_ReportNullSpecInsufficientInfo is missing in the list returned
&gt; by org.eclipse.jdt.internal.compiler.impl.CompilerOptions.warningOptionNames()
&gt; Is this intentional ?
&gt;
&gt; (5) org.eclipse.jdt.internal.compiler.impl.CompilerOptions.resetDefaults() is
&gt; not resetting defaultNonNullness - Is this intentional ? 

Both: Pure oversight. I&apos;ll fix it.
 
&gt; (6) Could we have reused
&gt; org.eclipse.jdt.internal.compiler.lookup.MethodScope.insideTypeAnnotation
&gt; instead of inventing
&gt; org.eclipse.jdt.internal.compiler.ast.ASTNode.IsMemberValueReference ?
&gt; At the point where we use this bit to avoid reporting a forward reference,
&gt; the insideTypeAnnotation field has been updated properly for us to have to
&gt;  have used it, though it is not readily available there - being a member of
&gt; MethodScope, while the static type at the use site is the parent type
&gt; BlockScope.

Interesting suggestion, I&apos;ll check and report back.
&gt; 
&gt; (7) Do the other calls to forwardReference need similar treatment ? (I didn&apos;t
&gt; check in any detail)

good point, I&apos;ll check.

&gt; (8) just a nitpick: &quot;can not&quot; should be cannot.

Where did you find &quot;can not&quot;?


Assessment:
(4)+(5) are bugs
(2)+(7) are due checks for completeness
(3)+(6) future considerations for better code quality
(8) ?

do you agree?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2035058</commentid>
    <comment_count>9</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-02 10:59:09 -0500</bug_when>
    <thetext>(In reply to comment #4)
&gt; One concern I have regarding earlier/eagerer(?!) processing of annotations:
&gt; I understand the rationale that necessitates this. However I haven&apos;t studied
&gt; the patch enough to know if the code that was processing annotations in the
&gt; &quot;usual place&quot; has been removed or is still there.

Nothing has been removed, essentially method Argument.bind(..) was split
into two, so that the new Argument.createBinding() can now be called
separatedly, but just calling the original method also works.
 
&gt; It looks like to avoid a test failure in
&gt; org.eclipse.jdt.core.tests.compiler.regression.EnumTest.test180()
&gt; *even when the master switch was off* some new code changes were needed to
&gt; be done. It would have been ideal if all the eager processing of annotations
&gt; was controlled by the master switch so that upon upgrading to a new eclipse
&gt; a project will have ZERO IMPACT if they don&apos;t plan to use the new feature.

If desired this can be achieved by protecting the call to
createArgumentBindings (inside SourceTypeBinding.resolveTypesFor(MB))
by
  if (this.scope.compilerOptions().isAnnotationBasedNullAnalysisEnabled)

This suffices to fix the problem in EnumTest.test180(), i.e., in this case
the change in QualifiedNameReference (using ASTNode.IsMemberValueReference)
is  only needed when the analysis is switched *on*.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2035274</commentid>
    <comment_count>10</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-02 19:07:39 -0500</bug_when>
    <thetext>(In reply to comment #7)
&gt; (In reply to comment #0)
&gt; &gt; (1) What are the changes in Scanner.java for ? Even without those changes all
&gt; &gt; tests pass. Changes to Scanner.java almost always need to be mirrored into
&gt; &gt; PublicScanner.java and in this case, only one file has changed.
&gt; &gt; 
&gt; &gt; As this change, even if only a minor one, constitutes a change deep in the
&gt; &gt; entrails, we should justify this with a regression test. Otherwise, if this
&gt; &gt; change is not integral to this feature we should consider backing out this 
&gt; &gt; particular change.
&gt; 
&gt; I&apos;ll try to reconstruct the regression in a test case as a basis for
&gt; your decission about possible backing out.

Update: this regression is no longer reproducable. In intermediate
versions I simply called Argument.bind(..) from STB.resolveTypesFor(..)
but at one point I split bind() into two methods (the same split as also
mentioned in comment 9). This split lessens the effect of resolving
annotations earlier, which achieves that also
CompletionTests.testCompletionVariableName32
passes even without the change in Parser.

If you like we can backout the change in Parser for now.
We can then check after M4 if my claim, that the changed version is safer,
actually holds.

On a side note we *could* also change CompletionOnArgumentName to
intercept (override) the new method createBinding instead of bind.
On the one hand this would restore the mentioned regression but on the
positive side this would mean that CompletionNodeFound is thrown a bit
earlier. Not a big deal but in line with the strategy to throw 
CompletionNodeFound as soon as the binding is available.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2035285</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-02 20:04:00 -0500</bug_when>
    <thetext>(In reply to comment #8)

&gt; &gt; (6) Could we have reused
&gt; &gt; org.eclipse.jdt.internal.compiler.lookup.MethodScope.insideTypeAnnotation
&gt; &gt; instead of inventing
&gt; &gt; org.eclipse.jdt.internal.compiler.ast.ASTNode.IsMemberValueReference ?

[...]

&gt; Interesting suggestion, I&apos;ll check and report back.

Post M4 is OK. We may have to introduce a getter method at BlockScope level
for this.

&gt; &gt; (8) just a nitpick: &quot;can not&quot; should be cannot.
&gt; 
&gt; Where did you find &quot;can not&quot;?

org.eclipse.jdt.annotation.NonNull documentation. That said, I found a few
dozens of existing usages roughtly half inside API javadocs and messages.
I&apos;ll let you take a call. (we don&apos;t want to change existing usages now)
 
&gt; Assessment:
&gt; (4)+(5) are bugs

Since these are trivial and safe, let us include them for M4.

&gt; (2)+(7) are due checks for completeness
&gt; (3)+(6) future considerations for better code quality
&gt; (8) ?

&gt; do you agree?

Yes.

(In reply to comment #9)

&gt; If desired this can be achieved by protecting the call to
&gt; createArgumentBindings (inside SourceTypeBinding.resolveTypesFor(MB))
&gt; by
&gt;   if (this.scope.compilerOptions().isAnnotationBasedNullAnalysisEnabled)

Yes, please ! Let us do this for M4. Is this the only place such a treatment
would be needed/possible ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2035286</commentid>
    <comment_count>12</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-02 20:08:55 -0500</bug_when>
    <thetext>(In reply to comment #5)
&gt; Created attachment 207842 [details]
&gt; Fix for an AIOOBE found during stress test

[...]

&gt; A regression test will follow.

Is this included in the patch below  ?

(In reply to comment #6)
&gt; Created attachment 207843 [details]
&gt; test &amp; fix for a wrong warning

Both look candidates for M4. After Ayush has a chance to review it,
we will finalize.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2035287</commentid>
    <comment_count>13</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-02 20:36:01 -0500</bug_when>
    <thetext>(In reply to comment #10)

&gt; If you like we can backout the change in Parser for now.
&gt; We can then check after M4 if my claim, that the changed version is safer,
&gt; actually holds.

You mean the Scanner, yes please, let us restore this code to the original.
and revisit this post M4. So if we number the gating of createArgumentBinding
by the master switch as issue (11), at this time there is agreement that 

(1), (4), (5), (8 ?), (9), (10), (11) 

are candidates for M4. Let us target to deliver them on Monday, followed by
another patch if needed on Tuesday. Stephan, can you post a tested patch with
these by Monday ? Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2035308</commentid>
    <comment_count>14</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-03 04:51:53 -0500</bug_when>
    <thetext>Here are a few more: None of them urgent enough to be fixed for
M4.


(12) Nit:
org.eclipse.jdt.internal.compiler.ast.EqualExpression.checkNullComparison:
Comment reads:
// check if either method is annotated @NonNull and compared to null:
I think you meant
// check if either is a method annotated @NonNull and compared to null:

(13) Nit: Argument#bind(): Why is the call to the new extracted method
createBinding happening in the &quot;wrong&quot; place ? It could have been made
in the same place from which the extraction happened, i.e just after
the localVariableHiding diagnostic. I don&apos;t see a problem per se with
the new place, just that it makes a reviewer spend wasteful cycles
trying to understand if there is some side effect that needs to be 
understood. (can be left as it is)

(14) Nit: Argument#bind(): This (pre-existing) comment should have
been deleted long ago. It makes no sense there now: (Long ago, there
was a call to the ctor of LVB there)
//true stand for argument instead of just local

(15) ReturnStatement#checkAgainstNullAnnotation(): What motivates the
try-catch block for the NPE ? (can leave it as it is regardless)

(16) org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.findDefaultNullness:
The line that reads:
while (currentType instanceof SourceTypeBinding) {
Could this have been the cheaper check:
while (currentType != null) ? 
(If so fix post M4)

(17) org.eclipse.jdt.internal.compiler.lookup.MethodBinding.fillInDefaultNonNullness
for (int i = 0; i &lt; this.parameterNonNullness.length; i++) {
length could have been extracted into a local since it is loop invariant (no need to fix now)
Same comment for org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.validateAnnotations()

(18) Same method: I think you meant to have
boolean added = false;  and
if (added)
	this.tagBits |= TagBits.HasParameterAnnotations;
outside the loop.

(19) org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.addNullnessAnnotation
Should this have been named addNonNullAnnotation to match
org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.addParameterNonNullAnnotation
They both do the same thing, one on parameters and the other on return type.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2035317</commentid>
    <comment_count>15</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-03 08:09:53 -0500</bug_when>
    <thetext>(20) org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.scanMethodForNullAnnotation
For loop: Length could have been extracted into a local.
Same comment for org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.scanTypeForNullAnnotation

(21) org.eclipse.jdt.internal.compiler.env.IBinaryMethod.getNumParameterAnnotations()
is a highly misleading name. We should change it to getTotalParameterCount(). Does the
current method always evaluate to Util.getParameterCount(methodInfo.getMethodDescriptor()) ?
If so, do we even need this new method ?

(22) org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.scanTypeForNullAnnotation
I don&apos;t see how this method makes sense for any case other than package-info.java

There are two effects:

(a) BinaryTypeBinding&apos;s tagBits gets updated
(b) The package containing the BTB - its nullnessDefaultAnnotation gets updated.

I cannot see why (a) matters since a type cannot be split across binary &amp; source
(b) can matter because part of a package can be in binary form and the rest in source
and if package-info carried a default annotation specification, that influences the
source part of the package too.

If there is no major misunderstanding here, why wouldn&apos;t we check for package-info
class file right at the top and get out of there quickly ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2035326</commentid>
    <comment_count>16</comment_count>
      <attachid>207876</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-03 10:17:51 -0500</bug_when>
    <thetext>Created attachment 207876
accumulated fixes

(In reply to comment #13)
&gt; (In reply to comment #10)
&gt; 
&gt; &gt; If you like we can backout the change in Parser for now.
&gt; &gt; We can then check after M4 if my claim, that the changed version is safer,
&gt; &gt; actually holds.
&gt; 
&gt; You mean the Scanner, yes please, let us restore this code to the original.

Scanner, sure. Sorry for the confusion.

&gt; and revisit this post M4. So if we number the gating of createArgumentBinding
&gt; by the master switch as issue (11), at this time there is agreement that 
&gt; 
&gt; (1), (4), (5), (8 ?), (9), (10), (11) 
&gt; 
&gt; are candidates for M4. Let us target to deliver them on Monday, followed by
&gt; another patch if needed on Tuesday. Stephan, can you post a tested patch with
&gt; these by Monday ? Thanks.

This patch accumulates the changes for the above list, just the regression
test for item (9) is still missing - I need to distill existing an witness 
to a small test case.

Patch has been tested using RunJDTCoreTests which only brought to light that
two test cases in the converter suite are now back to their original result.
This result is actually wrong, but the real cause is bug 164660 which is
still unresolved. The patch in bug 186342 produced the right outcome in these
tests because annotations are resolved earlier. As of item (11) we are back
to the previous state. I&apos;ve documented the connection in the test.

Apart from that change I saw all green.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2035361</commentid>
    <comment_count>17</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-04 04:44:33 -0500</bug_when>
    <thetext>I have completed the review and here is the final batch of comments:

(23) org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.validateAnnotations
Should be renamed to be specific to null annotations.

(24) Extract to local: 
(a) org.eclipse.jdt.internal.compiler.ast.Statement.analyseArguments
    arguments.length can be extracted into a local (for loop)
(b) org.eclipse.jdt.internal.compiler.lookup.MethodVerifier15.checkNullSpecInheritance
    inheritedMethod.parameterNonNullness.length can be extracted into local.
    currentMethod.parameterNonNullness.length can be extracted into local.
(c) org.eclipse.jdt.internal.compiler.lookup.PackageBinding.isPackageOfQualifiedTypeName
    packageName.length : extract to local.
(d) org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.validateAnnotations
    this.binding.parameters.length can be extracted into a local.
(e) org.eclipse.jdt.internal.compiler.problem.ProblemReporter.findAnnotationSourceStart
    annotations.length can be extracted to local.
   
(25) org.eclipse.jdt.internal.compiler.ast.Statement.analyseArguments:
Will it work well with varargs methods ?
for (int i = 0; i &lt; arguments.length; i++) {
			if (methodBinding.parameterNonNullness[i] == Boolean.TRUE) {
				TypeBinding expectedType = methodBinding.parameters[i];
				Expression argument = arguments[i];
				int nullStatus = argument.nullStatus(flowInfo); // slight loss of precision: should also use the null info from the receiver.
				if (nullStatus != FlowInfo.NON_NULL) // if required non-null is not provided
					flowContext.recordNullityMismatch(currentScope, argument, nullStatus, expectedType);
			}
		}
This loop above assumes arguments and parameters can be indexed lock step with each other.

(26) If 25 is an issue, check arg varargs index safety everywhere - Devise regression tests
expressly for this purpose.

(27) Surround the entire of the method body of
org.eclipse.jdt.internal.compiler.lookup.PackageBinding.checkIfNullAnnotationType
with a if (env.globalOptions.isAnnotationBasedNullAnalysisEnabled)

(28) Rather than inventing org.eclipse.jdt.internal.compiler.lookup.PackageBinding.checkIfNullAnnotationType
we could have used org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.computeId. It would have been
cleaner to continue to centralize the id computation in one place.

(29) Should org.eclipse.jdt.internal.compiler.problem.ProblemReporter.parameterLackingNonNullAnnotation
have been named parameterLackingNullAnnotation ?

(30) No need to fix this: It would have been better if the expected types maintenance in
FlowContext was pushed down to Fina*Flow*Context and Loop*Flow*Context even if this meant
duplication. Such a solution would have integrated better with the existing code (See
management of nullLocals, nullReferences and nullCheckTypes in both classes)

(31) org.eclipse.jdt.internal.compiler.flow.FlowContext.recordNullityMismatch:

Did you mean to have the statements:

	// no reason to defer, so report now:
	char[][] annotationName = currentScope.environment().getNonNullAnnotationName();
	currentScope.problemReporter().nullityMismatch(expression, expectedType, nullStatus, annotationName);


inside the if (expression.localVariableBinding() != null) { // flowContext cannot yet handle ...
block ???

(32) For org.eclipse.jdt.internal.compiler.problem.ProblemReporter.nullityMismatch diagnostics,
could you give me an example that explains why LFC and FFC would want to implement deferred
checking ? i.e is there a case where there would be a material difference in reporting ?
I couldn&apos;t think of a case where the problem id would change - did I overlook something ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2035363</commentid>
    <comment_count>18</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-04 04:55:47 -0500</bug_when>
    <thetext>(In reply to comment #16)
&gt; Created attachment 207876 [details]
&gt; accumulated fixes

Thanks Stephan, I&apos;ll get this released in time for M4.

Here is what I would recommend for the rest of the comments: Many of them
are editorial in nature and if after due consideration, you choose not
to follow up some of them and treat them as general review guidelines for
future work it is fine by me.

For those you follow up I would request 2 separate patches:

(i) Only the changes made for (3),(25),(26) (if they call for changes)
need further code review.

(ii) A tested patch with all other changes can be released without review
any time *after* M4 ships, as early as possible.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2035364</commentid>
    <comment_count>19</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-04 05:02:53 -0500</bug_when>
    <thetext>It is very evident to a reviewer that there is a lot of planning, care and
diligence that have gone into this work. The code integrates very well with
the existing body of code - architecturally and structurally speaking.

Thanks a lot for this work Stephan and look forward to ongoing contributions
from you !</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2035379</commentid>
    <comment_count>20</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-04 07:57:54 -0500</bug_when>
    <thetext>(In reply to comment #18)
&gt; (ii) A tested patch with all other changes can be released without review
&gt; any time *after* M4 ships, as early as possible.

I&apos;ve created bug 365519 as a scratch pad for these changes.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2035418</commentid>
    <comment_count>21</comment_count>
      <attachid>207888</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-04 15:01:59 -0500</bug_when>
    <thetext>Created attachment 207888
regression test for item (9)

Here&apos;s the promised regression test for item (9).
The part of attachment 207876 that affects FlowContext toggles
PASS/ERROR in this new test.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2035424</commentid>
    <comment_count>22</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-04 15:44:10 -0500</bug_when>
    <thetext>Regarding this one:
&gt; (2) Just checking - was this part done?
&gt;&gt; + SyntheticMethodBinding: is probably relevant. TODO

I could not find any path how a SyntheticMethodBinding could be used
during analyseCode, hence I conclude they don&apos;t need values to be copied 
to parameterNonNullness. -&gt; no action.


This leaves us with the following status:

M4 candidates:
==============
(1), (4), (5), (8), (9), (10), (11)
  resolved as per comment 16 with attachment 207876
  plus regression test for (9) from comment 21 (attachment 207888)

Plus possibly: (25), (26) 
  TODO


Post M4:
========
(3): bug 365531

(12), (14), (15), (16), (18), (19), (23), (27) (improved), (29)
  -&gt; patch prepared, via bug 365519
(17), (20), (24)
  -&gt; trivial, via bug 365519


No action planned:
==================
(2)
  - see above (this comment)
(13), (28)?, (30), (31), (32)
  - comments in bug 365519


Pending assessment:
===================
(6), (7), (21), (22)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2035461</commentid>
    <comment_count>23</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-04 23:32:45 -0500</bug_when>
    <thetext>(In reply to comment #17)

&gt; (24) Extract to local: 

May be we should add some support in the compiler at some future point
to at least diagnose such cases: while it is generally held true that 
the quality of jit compiler generated code is way more important than
the byte code quality, there can be lots of opportunities around the
traditional classic optimizer transformations such loop invariant code
motion, common  subexpression elimination etc.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2035469</commentid>
    <comment_count>24</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-05 00:47:21 -0500</bug_when>
    <thetext>(In reply to comment #18)
&gt; (In reply to comment #16)
&gt; &gt; Created attachment 207876 [details] [details]
&gt; &gt; accumulated fixes
&gt; 
&gt; Thanks Stephan, I&apos;ll get this released in time for M4.

This patch and ...

(In reply to comment #21)
&gt; Created attachment 207888 [details]
&gt; regression test for item (9)
&gt; 
&gt; Here&apos;s the promised regression test for item (9).

... this patch both look good and released for 3.8 M4 via
commit c077066d38e166a56e4eb4a0d6b6c8b7125fd6f2.

(In reply to comment #22)

[...]

&gt; M4 candidates:

[...]

&gt; Plus possibly: (25), (26) 
&gt;   TODO

OK, we can consider this one too, if a patch comes in time.
Jay - FYI, please include what has already been released for
the next I build.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2035470</commentid>
    <comment_count>25</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-05 01:10:26 -0500</bug_when>
    <thetext>(33) The javadoc for org.eclipse.jdt.core.JavaCore.COMPILER_NONNULL_IS_DEFAULT
and user documentation should both be updated to specify that this option
has no effect on binary types.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2035486</commentid>
    <comment_count>26</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-05 02:00:22 -0500</bug_when>
    <thetext>(34) 

import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jdt.annotation.Nullable;
public class X {
	void foo (@Nullable Object o) {
		
	}
}

class Y extends X {
	@Override
	void foo (@NonNull Object o) {
		
	}
 }

we report: 

Illegal redefinition of parameter o, inherited method from X declares this parameter as @Nullable

should this instead be: 

Illegal redefinition of parameter o, supertype method from X declares this
parameter as @Nullable

(35) The following program should not compile, but does.

import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jdt.annotation.Nullable;

class X {
	public void foo(@Nullable @NonNull Object o) {
	}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2035516</commentid>
    <comment_count>27</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-05 04:04:05 -0500</bug_when>
    <thetext>(37) Should this produce a redundant annotation message ? 

import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jdt.annotation.NonNullByDefault;
import org.eclipse.jdt.annotation.Nullable;

@NonNullByDefault
class X {
	@NonNullByDefault Object foo( Object o) {
		return new Object();
	}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2035698</commentid>
    <comment_count>28</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-12-05 09:34:00 -0500</bug_when>
    <thetext>(In reply to comment #26)
&gt; Illegal redefinition of parameter o, inherited method from X declares this
&gt; parameter as @Nullable
&gt; 
&gt; should this instead be: 
&gt; 
&gt; Illegal redefinition of parameter o, supertype method from X declares this
&gt; parameter as @Nullable
I did consider this too but looking at existing messages in messages.properties, I concluded Stephan&apos;s choice as valid. We&apos;ve always used &quot;inherited method from...&quot;.

Anyway, if we chose to go with Srikanth&apos;s suggestion, I guess its better worded as &quot;supertype method in X..&quot;

&gt; 
&gt; (35) The following program should not compile, but does.
&gt; 
&gt; import org.eclipse.jdt.annotation.NonNull;
&gt; import org.eclipse.jdt.annotation.Nullable;
&gt; 
&gt; class X {
&gt;     public void foo(@Nullable @NonNull Object o) {
&gt;     }
&gt; }

Semantically this code is ok. If both @Nullable and @NonNull are marker annotations applicable to parameters I should be able to use them together like this. So instead of giving a compiler error, maybe we can give a null analaysis specific error/warning when two different &quot;null annotations&quot;  are applied at the same element.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2035949</commentid>
    <comment_count>29</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-05 15:07:04 -0500</bug_when>
    <thetext>(In reply to comment #28)
&gt; &gt; (35) The following program should not compile, but does.
&gt; &gt; 
&gt; &gt; import org.eclipse.jdt.annotation.NonNull;
&gt; &gt; import org.eclipse.jdt.annotation.Nullable;
&gt; &gt; 
&gt; &gt; class X {
&gt; &gt;     public void foo(@Nullable @NonNull Object o) {
&gt; &gt;     }
&gt; &gt; }
&gt; 
&gt; Semantically this code is ok. If both @Nullable and @NonNull are marker
&gt; annotations applicable to parameters I should be able to use them together like
&gt; this. So instead of giving a compiler error, maybe we can give a null analaysis
&gt; specific error/warning when two different &quot;null annotations&quot;  are applied at
&gt; the same element.

Exactly, it&apos;s legal Java but makes no sense for null analysis.
I filed bug 365662 for this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2035960</commentid>
    <comment_count>30</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-05 15:20:29 -0500</bug_when>
    <thetext>(In reply to comment #27)
&gt; (37) Should this produce a redundant annotation message ? 
&gt; 
&gt; import org.eclipse.jdt.annotation.NonNull;
&gt; import org.eclipse.jdt.annotation.NonNullByDefault;
&gt; import org.eclipse.jdt.annotation.Nullable;
&gt; 
&gt; @NonNullByDefault
&gt; class X {
&gt;     @NonNullByDefault Object foo( Object o) {
&gt;         return new Object();
&gt;     }
&gt; }

I had briefly thought about this and than forget to implement it.
Thanks for mentioning.

I put it into the same bucket as item (35): bug 365662.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2035973</commentid>
    <comment_count>31</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-05 15:41:09 -0500</bug_when>
    <thetext>(In reply to comment #25)
&gt; (33) The javadoc for org.eclipse.jdt.core.JavaCore.COMPILER_NONNULL_IS_DEFAULT
&gt; and user documentation should both be updated to specify that this option
&gt; has no effect on binary types.

OK.

Summarizing items post comment 22:

(33) post M4, put into bucket bug 365519

(34) undecided between comment 26 and comment 28

(35) + (37): post M4, bug 365662

(36): this item - errh - oops, where is it? :)

---
I&apos;m investigating item (25) now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2036066</commentid>
    <comment_count>32</comment_count>
      <attachid>207952</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-05 18:22:07 -0500</bug_when>
    <thetext>Created attachment 207952
tests &amp; implementation for item (25)

(In reply to comment #24)
&gt; (In reply to comment #18)
&gt; &gt; Plus possibly: (25), (26) 
&gt; &gt;   TODO
&gt; 
&gt; OK, we can consider this one too, if a patch comes in time.
&gt; Jay - FYI, please include what has already been released for
&gt; the next I build.

OK, here you go.
I hope we still have sufficient time for a review of this patch.

(In reply to comment #17)
&gt; (25) org.eclipse.jdt.internal.compiler.ast.Statement.analyseArguments:
&gt; Will it work well with varargs methods ?
&gt; for (int i = 0; i &lt; arguments.length; i++) {
&gt;             if (methodBinding.parameterNonNullness[i] == Boolean.TRUE) {
&gt;                 TypeBinding expectedType = methodBinding.parameters[i];
&gt;                 Expression argument = arguments[i];
&gt;                 int nullStatus = argument.nullStatus(flowInfo); // slight loss
&gt; of precision: should also use the null info from the receiver.
&gt;                 if (nullStatus != FlowInfo.NON_NULL) // if required non-null is
&gt; not provided
&gt;                     flowContext.recordNullityMismatch(currentScope, argument,
&gt; nullStatus, expectedType);
&gt;             }
&gt;         }
&gt; This loop above assumes arguments and parameters can be indexed lock step with
&gt; each other.

Indeed, varargs pose a problem.
Without a fix the attached regression tests throw AIOOBE.
The patch adds explicit handling of varargs to this method.


&gt; (26) If 25 is an issue, check arg varargs index safety everywhere - Devise
&gt; regression tests
&gt; expressly for this purpose.

Fortunately, I&apos;m routing all analyses of method/ctor call sites through this
one method Statement.analyseArguments(..), thus I believe this is only 
location affected by this issue.

Tests cover message sends, (qualified) allocation expressions, and
explicit constructor calls (super and this).

All JDT/Core tests pass with this patch.

Actually, on first run I saw 4 failures, which, however, were not repeatable:

org.eclipse.jdt.core.tests.model.AttachSourceTests.testExternalFolder1()
org.eclipse.jdt.core.tests.model.AttachSourceTests.testZIPArchive1()
org.eclipse.jdt.core.tests.model.JavaElementDeltaTests.testAddExternalLibFolder1()
org.eclipse.jdt.core.tests.model.JavaElementDeltaTests.testAddExternalLibFolder2()

My imagination fails me in drawing a connection between the patch and these
failures. More likely some heavy disk-activity during the test run 
disturbed these tests? As said, when re-running these tests were green again.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2036107</commentid>
    <comment_count>33</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-06 00:15:16 -0500</bug_when>
    <thetext>(In reply to comment #28)

&gt; &gt; class X {
&gt; &gt;     public void foo(@Nullable @NonNull Object o) {
&gt; &gt;     }
&gt; &gt; }
&gt; 
&gt; Semantically this code is ok. If both @Nullable and @NonNull are marker
&gt; annotations applicable to parameters I should be able to use them together like
&gt; this.

Nitpicking: You meant syntactically it is OK. Semantically it is garbage
which is why we should issue a diagnostic.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2036115</commentid>
    <comment_count>34</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-06 00:54:37 -0500</bug_when>
    <thetext>(In reply to comment #28)
&gt; (In reply to comment #26)
&gt; &gt; Illegal redefinition of parameter o, inherited method from X declares this
&gt; &gt; parameter as @Nullable
&gt; &gt; 
&gt; &gt; should this instead be: 
&gt; &gt; 
&gt; &gt; Illegal redefinition of parameter o, supertype method from X declares this
&gt; &gt; parameter as @Nullable
&gt; I did consider this too but looking at existing messages in
&gt; messages.properties, I concluded Stephan&apos;s choice as valid. We&apos;ve always used
&gt; &quot;inherited method from...&quot;.
&gt; 
&gt; Anyway, if we chose to go with Srikanth&apos;s suggestion, I guess its better worded
&gt; as &quot;supertype method in X..&quot;

Personally I prefer the term &quot;inherited method&quot; when the current type
does not override the method and prefer the terms &quot;overriding method&quot;
and &quot;overridden method&quot; when the current type overrides super type method.

A quick scan shows several messages using the phrase &quot;inherited method&quot;.
I don&apos;t know that these are used uniformly - so I am OK with leaving this
message as it is.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2036248</commentid>
    <comment_count>35</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-06 06:26:54 -0500</bug_when>
    <thetext>(In reply to comment #32)
&gt; Created attachment 207952 [details]
&gt; tests &amp; implementation for item (25)

&gt; OK, here you go.
&gt; I hope we still have sufficient time for a review of this patch.

A good part of the day got washed out due to some git issues - though
I was not directly involved in the solution. I&apos;ll take a look at it
tomorrow and if we have an opportunity we can release this, though
we won&apos;t ask for a build expressly for this.

[...]
 
&gt; My imagination fails me in drawing a connection between the patch and these
&gt; failures. More likely some heavy disk-activity during the test run 
&gt; disturbed these tests? As said, when re-running these tests were green again.

Satyam ran all tests again with this patch and there were no issues.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2036924</commentid>
    <comment_count>36</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-07 03:02:15 -0500</bug_when>
    <thetext>What should be the right behavior here:

import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jdt.annotation.NonNullByDefault;
import org.eclipse.jdt.annotation.Nullable;

// @NonNullByDefault
public class X {
	@NonNullByDefault 
	public void foo(@Nullable String [] args) {
		class local {
			void zoo(Object o) {
				
			}
		};
		new local().zoo(null); // No error with defaults applying to foo
	}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2036940</commentid>
    <comment_count>37</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-07 03:29:07 -0500</bug_when>
    <thetext>(In reply to comment #36)
&gt; What should be the right behavior here:

I have raised bug 365836 to track this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2036960</commentid>
    <comment_count>38</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-07 04:12:17 -0500</bug_when>
    <thetext>&quot;Redundant null check: The variable f cannot be null at this location&quot;

Do we want to introduce a variant of this message for a @NonNull annotated
local ? The phrase: &quot;at this location&quot; is redundant here as the variable 
cannot be null at any location. (IMO it is OK either way)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2036992</commentid>
    <comment_count>39</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-07 05:03:05 -0500</bug_when>
    <thetext>(In reply to comment #38)
&gt; &quot;Redundant null check: The variable f cannot be null at this location&quot;
&gt; 
&gt; Do we want to introduce a variant of this message for a @NonNull annotated
&gt; local ? The phrase: &quot;at this location&quot; is redundant here as the variable 
&gt; cannot be null at any location. (IMO it is OK either way)

Makes sense.
Should be no problem to make that distinction.
I filed bug 365859 for this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2037350</commentid>
    <comment_count>40</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-07 14:39:52 -0500</bug_when>
    <thetext>(In reply to comment #35)
&gt; (In reply to comment #32)
&gt; &gt; Created attachment 207952 [details] [details]
&gt; &gt; tests &amp; implementation for item (25)
&gt; 
&gt; &gt; OK, here you go.
&gt; &gt; I hope we still have sufficient time for a review of this patch.
&gt; 
&gt; A good part of the day got washed out due to some git issues - though
&gt; I was not directly involved in the solution. I&apos;ll take a look at it
&gt; tomorrow and if we have an opportunity we can release this, though
&gt; we won&apos;t ask for a build expressly for this.

So this one fell victim to the time sink daemon?
It&apos;s an AIOOBE, but null-annotating varargs methods is probably not the
first thing everybody will do with M4.

Well, we still have a few hours until today&apos;s 18:00 I-Build :)

I should probably mention one conceptual issue that is surfaced by this
patch: we haven&apos;t yet a way to say whether &quot;@NonNull Object[]&quot; means
a non-null array of Object or an array of non-null Object.
I know of existing work on this problem but I hadn&apos;t yet found the time
to investigate in detail (would JSR 308 help here??).

Still, despite that conceptual issue, the patch should be the best we can
do right now: avoid AIOOBE and do a best effort analysis for var args:
Read &quot;@NonNull Object ... o&quot; as any number of &quot;@NonNull Object&quot; arguments.
MessageSends will be appropriately checked against this interpretation.
Only inside the method when encountering expressions like &quot;o[1]&quot; we&apos;re
currently out of luck.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2037501</commentid>
    <comment_count>41</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-07 23:55:05 -0500</bug_when>
    <thetext>(In reply to comment #40)
&gt; (In reply to comment #35)
&gt; &gt; (In reply to comment #32)
&gt; &gt; &gt; Created attachment 207952 [details] [details] [details]
&gt; &gt; &gt; tests &amp; implementation for item (25)
&gt; &gt; 
&gt; &gt; &gt; OK, here you go.
&gt; &gt; &gt; I hope we still have sufficient time for a review of this patch.
&gt; &gt; 
&gt; &gt; A good part of the day got washed out due to some git issues - though
&gt; &gt; I was not directly involved in the solution. I&apos;ll take a look at it
&gt; &gt; tomorrow and if we have an opportunity we can release this, though
&gt; &gt; we won&apos;t ask for a build expressly for this.
&gt; 
&gt; So this one fell victim to the time sink daemon?
&gt; It&apos;s an AIOOBE, but null-annotating varargs methods is probably not the
&gt; first thing everybody will do with M4.

I am sorry we ran out of time on this. I have spawned bug 365983
and added a reference to the patch with fix and tests from here.

Let us have a distinct bugzilla entry opened for every clear cut defect
discovered during testing so that each issue can be tracked individually
for verification purpose, the current one can be used for discussions,
questions on gray areas etc.

At this point only the varargs fix and the alternate strategy for propagating
null defaults need review. Patches for these could be attached to the respective
bugs. For all miscellaneous issues, if released early enough in M5, no review
is needed:  If you want, you can resort to cumulative testing and release as
long as there are comments in code, bugzilla and git commit logs that allow
us to recognize the pieces if needed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2037521</commentid>
    <comment_count>42</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-08 02:00:23 -0500</bug_when>
    <thetext>(38) We should verify that these methods

    AbstractMethodDeclaration.validateAnnotations() and all its overrides
    Statement.analyseArguments
    Statement.checkAssignmentAgainstNullAnnotation
    Scope.validateNullAnnotation
    ReturnStatement.checkAgainstNullAnnotation
    BinaryTypeBinding.scanMethodForNullAnnotation
    BinaryTypeBinding.scanTypeForNullAnnotation
    MethodVerifier15.checkNullSpecInheritance
    PackageBinding.checkIfNullAnnotationPackage
    PackageBinding.checkIfNullAnnotationType
    SourceTypeBinding.evaluateNullAnnotations

do not have side effects and if so short circuit the calls with a check
for the global master switch being on.

Some of these (not all) return quickly if the master switch is off
or otherwise some state indicates so, but I think we should eliminate
the call overhead itself. There is no point going through an elaborate
call sequence, marshalling several arguments only to beat a retreat.

This is a win-win from a performance point of view as well as code
being better self documenting.

In general, if a method is called from several dozens of call sites
it would be worth pushing the check into the method and avoid
cluttering the numerous call sites, but in the case of these methods,
the call sites are just a few, so there is no need to worry about 
code clutter.

(I only cursorily checked that these methods don&apos;t have side effects)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2037522</commentid>
    <comment_count>43</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-08 02:07:25 -0500</bug_when>
    <thetext>(In reply to comment #42)
&gt; (38) We should verify that these methods

[...]

&gt; do not have side effects ...

For example, the newly added method AbstractMethodDeclaration.analyseArguments
has some side effects and so should not be short circuited.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2037593</commentid>
    <comment_count>44</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-12-08 05:49:29 -0500</bug_when>
    <thetext>Couple of questions:
 - Does Nullable on Local variable make sense? I do see that NonNullByDefault doesn&apos;t really apply on local variables.
 - Similarly NonNullByDefault doesn&apos;t have to be retained in the class file. Is it required?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2037599</commentid>
    <comment_count>45</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-12-08 06:00:27 -0500</bug_when>
    <thetext>NonNullableByDefault takes an argument value. Isn&apos;t value false required to be appropriately mapped in the UI?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2037606</commentid>
    <comment_count>46</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-08 06:21:24 -0500</bug_when>
    <thetext>(In reply to comment #45)
&gt; NonNullableByDefault takes an argument value. Isn&apos;t value false required to be
&gt; appropriately mapped in the UI?

No, this value matters only at the sites where the annotation is applied.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2037608</commentid>
    <comment_count>47</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-08 06:25:31 -0500</bug_when>
    <thetext>(In reply to comment #44)
&gt; Couple of questions:
&gt;  - Does Nullable on Local variable make sense? I do see that NonNullByDefault
&gt; doesn&apos;t really apply on local variables.

Good question. In fact I don&apos;t expect many locals to be specified as
Nullable. Yet it is a valid specification and thus I don&apos;t see reason
to prohibit. It can actually be useful, e.g., if assigning the value from
a call to an unannotated method. If the local is unannotated, too, we
remain silent about any dereference because nullness state is UNKNOWN.
By marking the local as Nullable we say: I think the unannotated method
can indeed return null, let&apos;s be careful. Then later in the sequence of
statements the compiler can remind us of this and flag unchecked
dereference with a warning.
It&apos;s because of the three-valued nature of our null-analysis (nullable-
unknown-nonnull) that specifying a local as nullable does make a (small)
difference.

&gt;  - Similarly NonNullByDefault doesn&apos;t have to be retained in the class file. Is
&gt; it required?

I hadn&apos;t thought about this, and basically you&apos;re right, the effect of 
NonNullByDefault is expanded into individual synthetic NonNull annotations.
Retaining the individual annotations should normally suffice, at least from
a compiler POV. This is actually related to item (22) from comment 15,
which at a closer look also gives the final answer: for normal types
NonNullByDefault need not be retained, but for package-info.java it must be.

=&gt; This annotation must retain its current @Retention status.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2037611</commentid>
    <comment_count>48</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-12-08 06:37:10 -0500</bug_when>
    <thetext>(In reply to comment #46)
&gt; (In reply to comment #45)
&gt; &gt; NonNullableByDefault takes an argument value. Isn&apos;t value false required to be
&gt; &gt; appropriately mapped in the UI?
&gt; 
&gt; No, this value matters only at the sites where the annotation is applied.
As we don&apos;t have another annotation like NullableByDefault which probably another custom annotation could have been using, they will not be able to use this annotation.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2037615</commentid>
    <comment_count>49</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-12-08 06:42:33 -0500</bug_when>
    <thetext>Null annotation mapping doesn&apos;t seem to allow multiple mappings. If dependent jars use a custom null annotation library, we will not be able to read them. Am I missing anything here?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2037648</commentid>
    <comment_count>50</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-08 07:28:10 -0500</bug_when>
    <thetext>(In reply to comment #42)
&gt; (38) We should verify that these methods
&gt; 
[...]
&gt; 
&gt; do not have side effects and if so short circuit the calls with a check
&gt; for the global master switch being on.

Moved to bug 365519 comment 8 ff.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2037653</commentid>
    <comment_count>51</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-08 07:39:32 -0500</bug_when>
    <thetext>(In reply to comment #48)
&gt; (In reply to comment #46)
&gt; &gt; (In reply to comment #45)
&gt; &gt; &gt; NonNullableByDefault takes an argument value. Isn&apos;t value false required to be
&gt; &gt; &gt; appropriately mapped in the UI?
&gt; &gt; 
&gt; &gt; No, this value matters only at the sites where the annotation is applied.
&gt; As we don&apos;t have another annotation like NullableByDefault which probably
&gt; another custom annotation could have been using, they will not be able to use
&gt; this annotation.

So by &quot;mapped in the UI&quot; you mean configurable in the preferences?

IIRC this came up in the discussion with Markus in Ludwigsburg and we
agreed that this one annotation (@NonNullByDefault(false)) is a JDT-
specific solution for which we don&apos;t see an easy way of providing 
compatibility with other sets of annotations.
Note that most others simply don&apos;t have the concept of canceling a default.
We preferred the economy of avoiding yet another annotation
(e.g., @NullDefaultUnspecified) over the compatibility argument in this 
particular case.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2037697</commentid>
    <comment_count>52</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-12-08 08:34:35 -0500</bug_when>
    <thetext>(In reply to comment #51)
&gt; IIRC this came up in the discussion with Markus in Ludwigsburg and we
&gt; agreed that this one annotation (@NonNullByDefault(false)) is a JDT-
&gt; specific solution for which we don&apos;t see an easy way of providing 
&gt; compatibility with other sets of annotations.
&gt; Note that most others simply don&apos;t have the concept of canceling a default.
&gt; We preferred the economy of avoiding yet another annotation
&gt; (e.g., @NullDefaultUnspecified) over the compatibility argument in this 
&gt; particular case.
Thanks for the explanation. This sounds ok.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2037717</commentid>
    <comment_count>53</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-08 09:00:13 -0500</bug_when>
    <thetext>(In reply to comment #49)
&gt; Null annotation mapping doesn&apos;t seem to allow multiple mappings. If dependent
&gt; jars use a custom null annotation library, we will not be able to read them. Am
&gt; I missing anything here?

This question has some history, so let&apos;s use the time machine:

bug 186342 comment 12 (2007-06-22):
&gt; As users might even mix different libraries, this could even be a list:
&gt; org.eclipse.jdt.core.compiler.notNullAnnotation=org.eclipse.runtime.NotNull;edu.umd.cs.findbugs.annotations.NonNull

bug 186342 comment 40 (2010-10-27):
&gt; [...] as they are not a standard
&gt; I suggest we keep the concept of configurable annotation names 
&gt; and provide the above as defaults, OK?

bug 186342 comment 42 (2010-12-02):
&gt; (1) Annotation names are configurable via these keys:
&gt;    OPTION_NullableAnnotationNames : comma-separated list of qualified
&gt;        type names that will be recognized as &quot;nullable&quot; annotation.
&gt;    OPTION_NonNullAnnotationNames : comma-separated list of qualified
&gt;        type names that will be recognized as &quot;non-null&quot; annotation.

bug 186342 comment 43 (2010-12-02):
&gt; Should we account for building against different libraries using different
&gt; annotation types? One option would be to leave this to the profile
&gt; mechanism proposed in bug 331651, which would enable us to use the simpler
&gt; model (only one set of annotation names) within the compiler.

reply in bug 186342 comment 44 (2010-12-06):
&gt; I think this sounds reasonable. For the scenario of this bug, we should just
&gt; try and keep things as straightforward as possible

bug 186342 comment 45 (2010-12-19):
&gt; I no longer support multiple equivalent annotation types, but only one
&gt; type for nonnull and one type for nullable (see bug 186342 comment 43).

Finally, at ECE2011 Markus and me briefly touched this question and concluded
that if desired by users, supporting multiple sets of annotation types can
be added via a future RFE.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2037720</commentid>
    <comment_count>54</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-12-08 09:05:08 -0500</bug_when>
    <thetext>(In reply to comment #53)
Thanks for your patience in replying to this. I got lost in looking at bug 186342 :(.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2037743</commentid>
    <comment_count>55</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-08 09:25:37 -0500</bug_when>
    <thetext>(In reply to comment #54)
&gt; (In reply to comment #53)
&gt; Thanks for your patience in replying to this. I got lost in looking at bug
&gt; 186342 :(.

I fully understand. 200+ comments spanning 4+ years of discussion
is a bit overwhelming..</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2037781</commentid>
    <comment_count>56</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-08 10:12:59 -0500</bug_when>
    <thetext>Here&apos;s a fresh status checkpoint for everything post comment 31:

DONE:
+ items (25), (26) have moved to bug 365983

+ discussion regarding item (34) has terminated in comment 34: no action.

+ comment 36 has spawned bug 365836.

+ comment 38 has spawned bug 365859

+ item (38) has moved into the bug 365519 bucket (for partial action)

Other items could be settled by additional explanations (no action now).


TODO:
This leaves us with only two items undecided/unassigned: (21) and (22).

Neither is critical, for both items my answer will probably start 
with &quot;yes, but&quot;.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2037791</commentid>
    <comment_count>57</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-08 10:20:49 -0500</bug_when>
    <thetext>(In reply to comment #56)

&gt; TODO:
&gt; This leaves us with only two items undecided/unassigned: (21) and (22).
&gt; 
&gt; Neither is critical, for both items my answer will probably start 
&gt; with &quot;yes, but&quot;.

For (21) let us do the name change now. as the current choice is not appropriate.
We can defer the other questions around (21) and all of (22) for later.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2037807</commentid>
    <comment_count>58</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-08 10:35:56 -0500</bug_when>
    <thetext>(In reply to comment #45)
&gt; NonNullableByDefault takes an argument value. Isn&apos;t value false required to be
&gt; appropriately mapped in the UI?

At first reading I thought by &quot;mapped&quot; you meant &quot;rendered&quot;.
This reminded me that the story of visualization isn&apos;t finished yet, 
see bug 366007.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2038161</commentid>
    <comment_count>59</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-08 19:27:27 -0500</bug_when>
    <thetext>(In reply to comment #58)
&gt; (In reply to comment #45)
&gt; &gt; NonNullableByDefault takes an argument value. Isn&apos;t value false required to be
&gt; &gt; appropriately mapped in the UI?
&gt; 
&gt; At first reading I thought by &quot;mapped&quot; you meant &quot;rendered&quot;.

So did I and responded with comment# 46, but not sure now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2050579</commentid>
    <comment_count>60</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-01-15 07:26:58 -0500</bug_when>
    <thetext>I&apos;ve pushed in commit 40ad9904e939ba54abece52421044021edd6e1c0 a fix for
item (22).

At this point all items raised in this bug are either resolved or have
been forked into separate bugs. 
At the time of this writing these have already been resolved:
- bug 365519, bug 365836, bug 365983
while only these are still open:
- bug 365662 (target 3.8 M5), bug 365859 (target 3.8)

With these results I consider this bug resolved.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2052890</commentid>
    <comment_count>61</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-01-19 09:41:36 -0500</bug_when>
    <thetext>(In reply to comment #53)
&gt; Finally, at ECE2011 Markus and me briefly touched this question and concluded
&gt; that if desired by users, supporting multiple sets of annotation types can
&gt; be added via a future RFE.

We now have this RFE, its bug 369079.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2055298</commentid>
    <comment_count>62</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-01-24 12:29:52 -0500</bug_when>
    <thetext>Verified for 3.8M5 using code inspection</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>207842</attachid>
            <date>2011-12-02 08:56:00 -0500</date>
            <delta_ts>2011-12-03 10:17:51 -0500</delta_ts>
            <desc>Fix for an AIOOBE found during stress test</desc>
            <filename>Fix-AIOOBE.patch</filename>
            <type>text/plain</type>
            <size>900</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9mbG93L0Zsb3dDb250ZXh0LmphdmEgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvZmxvdy9G
bG93Q29udGV4dC5qYXZhCmluZGV4IDdkZjhhNzEuLjk4Y2FmMzAgMTAwNjQ0Ci0tLSBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9mbG93L0Zsb3dDb250ZXh0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Zsb3cvRmxvd0NvbnRleHQuamF2
YQpAQCAtNTY0LDkgKzU2NCwxMCBAQAogCQl3aGlsZSAoc2l6ZSA8PSBudWxsQ291bnQpIHNpemUg
Kj0gMjsKIAkJdGhpcy5leHBlY3RlZFR5cGVzID0gbmV3IFR5cGVCaW5kaW5nW3NpemVdOwogCX0K
LQllbHNlIGlmIChudWxsQ291bnQgPT0gdGhpcy5leHBlY3RlZFR5cGVzLmxlbmd0aCkgeworCWVs
c2UgaWYgKG51bGxDb3VudCA+PSB0aGlzLmV4cGVjdGVkVHlwZXMubGVuZ3RoKSB7CisJCWludCBv
bGRMZW4gPSB0aGlzLmV4cGVjdGVkVHlwZXMubGVuZ3RoOwogCQlTeXN0ZW0uYXJyYXljb3B5KHRo
aXMuZXhwZWN0ZWRUeXBlcywgMCwKLQkJCXRoaXMuZXhwZWN0ZWRUeXBlcyA9IG5ldyBUeXBlQmlu
ZGluZ1tudWxsQ291bnQgKiAyXSwgMCwgbnVsbENvdW50KTsKKwkJCXRoaXMuZXhwZWN0ZWRUeXBl
cyA9IG5ldyBUeXBlQmluZGluZ1tudWxsQ291bnQgKiAyXSwgMCwgb2xkTGVuKTsKIAl9CiAJdGhp
cy5leHBlY3RlZFR5cGVzW251bGxDb3VudF0gPSBleHBlY3RlZFR5cGU7CiB9
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>207843</attachid>
            <date>2011-12-02 09:05:00 -0500</date>
            <delta_ts>2011-12-03 10:17:51 -0500</delta_ts>
            <desc>test &amp; fix for a wrong warning</desc>
            <filename>wrong-warning-redundantnullcheck.patch</filename>
            <type>text/plain</type>
            <size>3124</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxBbm5vdGF0aW9u
VGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbEFubm90YXRpb25U
ZXN0LmphdmEKaW5kZXggOTA3YWM0ZS4uYWRmZjQxZSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Nv
bXBpbGVyL3JlZ3Jlc3Npb24vTnVsbEFubm90YXRpb25UZXN0LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3Rz
L2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbEFubm90YXRpb25UZXN0LmphdmEKQEAgLTUyLDcgKzUy
LDcgQEAKIC8vIFN0YXRpYyBpbml0aWFsaXplciB0byBzcGVjaWZ5IHRlc3RzIHN1YnNldCB1c2lu
ZyBURVNUU18qIHN0YXRpYyB2YXJpYWJsZXMKIC8vIEFsbCBzcGVjaWZpZWQgdGVzdHMgd2hpY2gg
ZG8gbm90IGJlbG9uZyB0byB0aGUgY2xhc3MgYXJlIHNraXBwZWQuLi4KIHN0YXRpYyB7Ci0vLwkJ
VEVTVFNfTkFNRVMgPSBuZXcgU3RyaW5nW10geyAidGVzdF9pbGxlZ2FsX2Fubm90YXRpb25fMDA3
IiB9OworLy8JCVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1tdIHsgInRlc3RfYXNzaWdubWVudF9l
eHByZXNzaW9uXzEiIH07CiAvLwkJVEVTVFNfTlVNQkVSUyA9IG5ldyBpbnRbXSB7IDU2MSB9Owog
Ly8JCVRFU1RTX1JBTkdFID0gbmV3IGludFtdIHsgMSwgMjA0OSB9OwogfQpAQCAtMjQ3NCw2ICsy
NDc0LDM2IEBACiAJCSJUeXBlIG1pc21hdGNoOiByZXF1aXJlZCBcJ0BOb25OdWxsIFN0cmluZ1wn
IGJ1dCB0aGUgcHJvdmlkZWQgdmFsdWUgY2FuIGJlIG51bGxcbiIgKwogCQkiLS0tLS0tLS0tLVxu
Iik7CiB9CitwdWJsaWMgdm9pZCB0ZXN0X2Fzc2lnbm1lbnRfZXhwcmVzc2lvbl8xKCkgeworCU1h
cCBjdXN0b21PcHRpb25zID0gZ2V0Q29tcGlsZXJPcHRpb25zKCk7CisvLwljdXN0b21PcHRpb25z
LnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydFBvdGVudGlhbE51bGxTcGVjVmlvbGF0
aW9uLCBKYXZhQ29yZS5FUlJPUik7CisJY3VzdG9tT3B0aW9ucy5wdXQoSmF2YUNvcmUuQ09NUElM
RVJfTk9OTlVMTF9JU19ERUZBVUxULCBKYXZhQ29yZS5FTkFCTEVEKTsKKwljdXN0b21PcHRpb25z
LnB1dChKYXZhQ29yZS5DT01QSUxFUl9QQl9SRURVTkRBTlRfTlVMTF9DSEVDSywgSmF2YUNvcmUu
RVJST1IpOworCXJ1bkNvbmZvcm1UZXN0V2l0aExpYnMoCisJCW5ldyBTdHJpbmdbXSB7CisJCQki
WC5qYXZhIiwKKwkJCSJpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uKjtcbiIgKwor
CQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJIglATnVsbGFibGUgT2JqZWN0IGZvbygpIHtc
biIgKworCQkJIgkJT2JqZWN0IG8gPSBudWxsO1xuIiArCisJCQkiCQlib29sZWFuIGtlZXBMb29r
aW5nID0gdHJ1ZTtcbiIgKworCQkJIgkJd2hpbGUoa2VlcExvb2tpbmcpIHtcbiIgKworCQkJIgkJ
CWlmICgobz1nZXRPKCkpICE9IG51bGwpIHtcbiIgKworCQkJIgkJCQlyZXR1cm4gbztcbiIgKwor
CQkJIgkJCX1cbiIgKworCQkJIgkJfVxuIiArCisJCQkiCQlyZXR1cm4gbnVsbDtcbiIgKworCQkJ
Igl9XG4iICsKKwkJCSJcbiIgKworCQkJIglwcml2YXRlIEBOdWxsYWJsZSBPYmplY3QgZ2V0Tygp
IHtcbiIgKworCQkJIgkJcmV0dXJuIG5ldyBPYmplY3QoKTtcbiIgKworCQkJIgl9XG4iICsKKwkJ
CSJ9XG4iLAorCisJCX0sCisJCWN1c3RvbU9wdGlvbnMsCisJCSIiKTsJCit9CiAvLyBhIG5vbm51
bGwgdmFyaWFibGUgaXMgZGVyZWZlcmVuY2VkIG1ldGhvZCBvZiBhIG5lc3RlZCB0eXBlCiBwdWJs
aWMgdm9pZCB0ZXN0X25lc3RpbmdfMSgpIHsKIAlNYXAgY3VzdG9tT3B0aW9ucyA9IGdldENvbXBp
bGVyT3B0aW9ucygpOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9NZXNzYWdlU2VuZC5qYXZhIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FzdC9NZXNzYWdlU2VuZC5qYXZhCmluZGV4IDFkOGMxNTMuLjNlZGE3NjggMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hc3QvTWVzc2FnZVNlbmQuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L01lc3Nh
Z2VTZW5kLmphdmEKQEAgLTExOSw3ICsxMTksNyBAQAogfQogcHVibGljIHZvaWQgY2hlY2tOUEUo
QmxvY2tTY29wZSBzY29wZSwgRmxvd0NvbnRleHQgZmxvd0NvbnRleHQsIEZsb3dJbmZvIGZsb3dJ
bmZvKSB7CiAJc3VwZXIuY2hlY2tOUEUoc2NvcGUsIGZsb3dDb250ZXh0LCBmbG93SW5mbyk7Ci0J
aWYgKG51bGxTdGF0dXMoZmxvd0luZm8pID09IEZsb3dJbmZvLlBPVEVOVElBTExZX05VTEwpCisJ
aWYgKChudWxsU3RhdHVzKGZsb3dJbmZvKSAmIEZsb3dJbmZvLlBPVEVOVElBTExZX05VTEwpICE9
IDApCiAJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLm1lc3NhZ2VTZW5kUG90ZW50aWFsTnVsbFJl
ZmVyZW5jZSh0aGlzLmJpbmRpbmcsIHRoaXMpOwogfQogLyoqCkBAIC0yODEsNyArMjgxLDcgQEAK
IAkJaWYgKCh0YWdCaXRzICYgVGFnQml0cy5Bbm5vdGF0aW9uTm9uTnVsbCkgIT0gMCkKIAkJCXJl
dHVybiBGbG93SW5mby5OT05fTlVMTDsKIAkJaWYgKCh0YWdCaXRzICYgVGFnQml0cy5Bbm5vdGF0
aW9uTnVsbGFibGUpICE9IDApCi0JCQlyZXR1cm4gRmxvd0luZm8uUE9URU5USUFMTFlfTlVMTDsK
KwkJCXJldHVybiBGbG93SW5mby5QT1RFTlRJQUxMWV9OVUxMIHwgRmxvd0luZm8uUE9URU5USUFM
TFlfTk9OX05VTEw7CiAJfQogCXJldHVybiBGbG93SW5mby5VTktOT1dOOwogfQ==
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>207876</attachid>
            <date>2011-12-03 10:17:00 -0500</date>
            <delta_ts>2011-12-03 10:17:51 -0500</delta_ts>
            <desc>accumulated fixes</desc>
            <filename>Bug_365387_v1.patch</filename>
            <type>text/plain</type>
            <size>10844</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvYW5ub3RhdGlvbi9Ob25OdWxsLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuYW5ub3RhdGlvbi9z
cmMvb3JnL2VjbGlwc2UvamR0L2Fubm90YXRpb24vTm9uTnVsbC5qYXZhCmluZGV4IDc4YWE3MWMu
LjkzNzI3MzkgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvYW5ub3RhdGlvbi9Ob25OdWxsLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmFubm90YXRpb24vc3JjL29yZy9lY2xpcHNlL2pkdC9hbm5vdGF0aW9uL05vbk51bGwuamF2YQpA
QCAtMzUsOCArMzUsOCBAQAogICogPGxpPk51bGxuZXNzIG9mIHRoZSB2YWx1ZSBjYW4gYmUgc3Rh
dGljYWxseSBkZXRlcm1pbmVkLCB0aGUgZW50aXR5IGlzIGRlZmluaXRlbHkgYm91bmQgZnJvbSBl
aXRoZXIgb2Y6CiAgKiAgICAgPHVsPjxsaT50aGUgdmFsdWUgPGNvZGU+bnVsbDwvY29kZT4sIG9y
PC9saT4KICAqICAgICAgICAgPGxpPmFuIGVudGl0eSB3aXRoIGEge0BsaW5rIE51bGxhYmxlIEBO
dWxsYWJsZX0gdHlwZS48L2xpPjwvdWw+PC9saT4KLSAqIDxsaT5OdWxsbmVzcyBjYW4gbm90IGRl
ZmluaXRlbHkgYmUgZGV0ZXJtaW5lZCwgYmVjYXVzZSBkaWZmZXJlbnQgY29kZSBicmFuY2hlcyB5
aWVsZCBkaWZmZXJlbnQgcmVzdWx0cy48L2xpPgotICogPGxpPk51bGxuZXNzIGNhbiBub3QgYmUg
ZGV0ZXJtaW5lZCwgYmVjYXVzZSBvdGhlciBwcm9ncmFtIGVsZW1lbnRzIGFyZSBpbnZvbHZlZCBm
b3Igd2hpY2gKKyAqIDxsaT5OdWxsbmVzcyBjYW5ub3QgZGVmaW5pdGVseSBiZSBkZXRlcm1pbmVk
LCBiZWNhdXNlIGRpZmZlcmVudCBjb2RlIGJyYW5jaGVzIHlpZWxkIGRpZmZlcmVudCByZXN1bHRz
LjwvbGk+CisgKiA8bGk+TnVsbG5lc3MgY2Fubm90IGJlIGRldGVybWluZWQsIGJlY2F1c2Ugb3Ro
ZXIgcHJvZ3JhbSBlbGVtZW50cyBhcmUgaW52b2x2ZWQgZm9yIHdoaWNoCiAgKiAgICAgbnVsbCBh
bm5vdGF0aW9ucyBhcmUgbGFja2luZy48L2xpPgogICogPC9vbD4KICAqIDwvcD4KZGlmZiAtLWdp
dCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxBbm5vdGF0aW9uVGVzdC5qYXZh
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pk
dC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbEFubm90YXRpb25UZXN0LmphdmEK
aW5kZXggNmM2YmQwMS4uMDI1YzIxYyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUu
dGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3Jl
Z3Jlc3Npb24vTnVsbEFubm90YXRpb25UZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vTnVsbEFubm90YXRpb25UZXN0LmphdmEKQEAgLTUyLDcgKzUyLDcgQEAKIC8v
IFN0YXRpYyBpbml0aWFsaXplciB0byBzcGVjaWZ5IHRlc3RzIHN1YnNldCB1c2luZyBURVNUU18q
IHN0YXRpYyB2YXJpYWJsZXMKIC8vIEFsbCBzcGVjaWZpZWQgdGVzdHMgd2hpY2ggZG8gbm90IGJl
bG9uZyB0byB0aGUgY2xhc3MgYXJlIHNraXBwZWQuLi4KIHN0YXRpYyB7Ci0vLwkJVEVTVFNfTkFN
RVMgPSBuZXcgU3RyaW5nW10geyAidGVzdF9pbGxlZ2FsX2Fubm90YXRpb25fMDA3IiB9OworLy8J
CVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1tdIHsgInRlc3RfYXNzaWdubWVudF9leHByZXNzaW9u
XzEiIH07CiAvLwkJVEVTVFNfTlVNQkVSUyA9IG5ldyBpbnRbXSB7IDU2MSB9OwogLy8JCVRFU1RT
X1JBTkdFID0gbmV3IGludFtdIHsgMSwgMjA0OSB9OwogfQpAQCAtMjQ3NCw2ICsyNDc0LDM2IEBA
CiAJCSJUeXBlIG1pc21hdGNoOiByZXF1aXJlZCBcJ0BOb25OdWxsIFN0cmluZ1wnIGJ1dCB0aGUg
cHJvdmlkZWQgdmFsdWUgY2FuIGJlIG51bGxcbiIgKwogCQkiLS0tLS0tLS0tLVxuIik7CiB9Citw
dWJsaWMgdm9pZCB0ZXN0X2Fzc2lnbm1lbnRfZXhwcmVzc2lvbl8xKCkgeworCU1hcCBjdXN0b21P
cHRpb25zID0gZ2V0Q29tcGlsZXJPcHRpb25zKCk7CisvLwljdXN0b21PcHRpb25zLnB1dChDb21w
aWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydFBvdGVudGlhbE51bGxTcGVjVmlvbGF0aW9uLCBKYXZh
Q29yZS5FUlJPUik7CisJY3VzdG9tT3B0aW9ucy5wdXQoSmF2YUNvcmUuQ09NUElMRVJfTk9OTlVM
TF9JU19ERUZBVUxULCBKYXZhQ29yZS5FTkFCTEVEKTsKKwljdXN0b21PcHRpb25zLnB1dChKYXZh
Q29yZS5DT01QSUxFUl9QQl9SRURVTkRBTlRfTlVMTF9DSEVDSywgSmF2YUNvcmUuRVJST1IpOwor
CXJ1bkNvbmZvcm1UZXN0V2l0aExpYnMoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwK
KwkJCSJpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uKjtcbiIgKworCQkJInB1Ymxp
YyBjbGFzcyBYIHtcbiIgKworCQkJIglATnVsbGFibGUgT2JqZWN0IGZvbygpIHtcbiIgKworCQkJ
IgkJT2JqZWN0IG8gPSBudWxsO1xuIiArCisJCQkiCQlib29sZWFuIGtlZXBMb29raW5nID0gdHJ1
ZTtcbiIgKworCQkJIgkJd2hpbGUoa2VlcExvb2tpbmcpIHtcbiIgKworCQkJIgkJCWlmICgobz1n
ZXRPKCkpICE9IG51bGwpIHtcbiIgKworCQkJIgkJCQlyZXR1cm4gbztcbiIgKworCQkJIgkJCX1c
biIgKworCQkJIgkJfVxuIiArCisJCQkiCQlyZXR1cm4gbnVsbDtcbiIgKworCQkJIgl9XG4iICsK
KwkJCSJcbiIgKworCQkJIglwcml2YXRlIEBOdWxsYWJsZSBPYmplY3QgZ2V0TygpIHtcbiIgKwor
CQkJIgkJcmV0dXJuIG5ldyBPYmplY3QoKTtcbiIgKworCQkJIgl9XG4iICsKKwkJCSJ9XG4iLAor
CisJCX0sCisJCWN1c3RvbU9wdGlvbnMsCisJCSIiKTsJCit9CiAvLyBhIG5vbm51bGwgdmFyaWFi
bGUgaXMgZGVyZWZlcmVuY2VkIG1ldGhvZCBvZiBhIG5lc3RlZCB0eXBlCiBwdWJsaWMgdm9pZCB0
ZXN0X25lc3RpbmdfMSgpIHsKIAlNYXAgY3VzdG9tT3B0aW9ucyA9IGdldENvbXBpbGVyT3B0aW9u
cygpOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2RvbS9BU1RDb252ZXJ0ZXIxNUpMUzRUZXN0LmphdmEg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2Nv
cmUvdGVzdHMvZG9tL0FTVENvbnZlcnRlcjE1SkxTNFRlc3QuamF2YQppbmRleCAxZTA2YzExLi45
YzdiOGU5IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMv
b3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvZG9tL0FTVENvbnZlcnRlcjE1SkxTNFRlc3QuamF2
YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2Uv
amR0L2NvcmUvdGVzdHMvZG9tL0FTVENvbnZlcnRlcjE1SkxTNFRlc3QuamF2YQpAQCAtNzQ3Niw3
ICs3NDc2LDYgQEAKICAgICAJYXNzZXJ0VHJ1ZSgiTm90IGFzc2lnbmVtZW50IGNvbXBhdGlibGUi
LCB0eXBlQmluZGluZy5pc0Fzc2lnbm1lbnRDb21wYXRpYmxlKHR5cGVCaW5kaW5nMikpOwogICAg
IAlhc3NlcnRUcnVlKCJOb3QgYXNzaWduZW1lbnQgY29tcGF0aWJsZSIsIHR5cGVCaW5kaW5nLmlz
QXNzaWdubWVudENvbXBhdGlibGUoY29sbGVjdGlvblR5cGVCaW5kaW5nKSk7CiAJfQotCiAJLyoK
IAkgKiBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MTU2MzUy
CiAJICovCkBAIC03NDk1LDEwICs3NDk0LDEzIEBACiAJCQkJYnVmZmVyLmFwcGVuZCh0eXBlQmlu
ZGluZy5nZXRBbm5vdGF0aW9ucygpLmxlbmd0aCk7CiAJCQkJdHlwZUJpbmRpbmc9IHR5cGVCaW5k
aW5nLmdldFN1cGVyY2xhc3MoKTsKIAkJCX0KLQkJCS8vIGluaXRpYWxseSwgdGhpcyB0ZXN0IGV4
cGVjdGVkICIwMDAiLCBidXQgYWZ0ZXIgaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnLzE4NjM0Mgot
CQkJLy8gYW5ub3RhdGlvbnMgYXJlIHJlc29sdmVkIG1vcmUgZWFnZXJseSwgd2hpY2ggbWFrZXMg
dGhlIGFubm90YXRpb25zIG9uIFRlc3QyIHNob3cgdXAsCi0JCQkvLyB3aGljaCBpcyBhY3R1YWxs
eSB0aGUgcmlnaHQgb3V0Y29tZS4KLQkJCWFzc2VydEVxdWFscygiV3JvbmcgbnVtYmVyIG9mIGFu
bm90YXRpb25zIiwgIjAyMCIsIFN0cmluZy52YWx1ZU9mKGJ1ZmZlcikpOworCQkJLy8gdGhlIHJp
Z2h0IG91dGNvbWUgd291bGQgYmUgIjAyMCIsIGJ1dCBkZXBlbmRpbmcgb24gdGhlIHN0cmF0ZWd5
IHdoZW4gZXhhY3RseQorCQkJLy8gYW5ub3RhdGlvbnMgYXJlIHJlc29sdmVkIHRoZSBhbm5vdGF0
aW9ucyBvbiBUZXN0MiBhcmUgKG5vdCkgcHJlc2VudCB3aGVuCisJCQkvLyB0cmF2ZXJzaW5nIHRo
ZSBzdXBlci1jbGFzcyBjaGFpbi4KKwkJCS8vIFRoZSBwYXRjaCBpbiBodHRwczovL2J1Z3MuZWNs
aXBzZS5vcmcvMTg2MzQyI2MxOTYgcHJvZHVjZWQgIjAyMCIgYnV0CisJCQkvLyB0aGUgcHJldmlv
dXMgYmVoYXZpb3IgKCIwMDAiKSB3YXMgcmVzdG9yZWQgaW4gaHR0cHM6Ly9idWdzLmVjbGlwc2Uu
b3JnLzM2NTM4NworCQkJLy8gKHNlZSB0aGUgY2hhbmdlIGluIFNvdXJjZVR5cGVCaW5kaW5nLnJl
c29sdmVUeXBlc0ZvciguLikpCisJCQlhc3NlcnRFcXVhbHMoIldyb25nIG51bWJlciBvZiBhbm5v
dGF0aW9ucyIsICIwMDAiLCBTdHJpbmcudmFsdWVPZihidWZmZXIpKTsKIAkJfQogCX0KIApkaWZm
IC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNl
L2pkdC9jb3JlL3Rlc3RzL2RvbS9BU1RDb252ZXJ0ZXIxNVRlc3QuamF2YSBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9kb20v
QVNUQ29udmVydGVyMTVUZXN0LmphdmEKaW5kZXggZTg5YmE4Zi4uZmQzODhhNiAxMDA2NDQKLS0t
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9j
b3JlL3Rlc3RzL2RvbS9BU1RDb252ZXJ0ZXIxNVRlc3QuamF2YQorKysgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvZG9tL0FT
VENvbnZlcnRlcjE1VGVzdC5qYXZhCkBAIC03NDk4LDEwICs3NDk4LDEzIEBACiAJCQkJYnVmZmVy
LmFwcGVuZCh0eXBlQmluZGluZy5nZXRBbm5vdGF0aW9ucygpLmxlbmd0aCk7CiAJCQkJdHlwZUJp
bmRpbmc9IHR5cGVCaW5kaW5nLmdldFN1cGVyY2xhc3MoKTsKIAkJCX0KLQkJCS8vIGluaXRpYWxs
eSwgdGhpcyB0ZXN0IGV4cGVjdGVkICIwMDAiLCBidXQgYWZ0ZXIgaHR0cHM6Ly9idWdzLmVjbGlw
c2Uub3JnLzE4NjM0MgotCQkJLy8gYW5ub3RhdGlvbnMgYXJlIHJlc29sdmVkIG1vcmUgZWFnZXJs
eSwgd2hpY2ggbWFrZXMgdGhlIGFubm90YXRpb25zIG9uIFRlc3QyIHNob3cgdXAsCi0JCQkvLyB3
aGljaCBpcyBhY3R1YWxseSB0aGUgcmlnaHQgb3V0Y29tZS4KLQkJCWFzc2VydEVxdWFscygiV3Jv
bmcgbnVtYmVyIG9mIGFubm90YXRpb25zIiwgIjAyMCIsIFN0cmluZy52YWx1ZU9mKGJ1ZmZlcikp
OworCQkJLy8gdGhlIHJpZ2h0IG91dGNvbWUgd291bGQgYmUgIjAyMCIsIGJ1dCBkZXBlbmRpbmcg
b24gdGhlIHN0cmF0ZWd5IHdoZW4gZXhhY3RseQorCQkJLy8gYW5ub3RhdGlvbnMgYXJlIHJlc29s
dmVkIHRoZSBhbm5vdGF0aW9ucyBvbiBUZXN0MiBhcmUgKG5vdCkgcHJlc2VudCB3aGVuCisJCQkv
LyB0cmF2ZXJzaW5nIHRoZSBzdXBlci1jbGFzcyBjaGFpbi4KKwkJCS8vIFRoZSBwYXRjaCBpbiBo
dHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvMTg2MzQyI2MxOTYgcHJvZHVjZWQgIjAyMCIgYnV0CisJ
CQkvLyB0aGUgcHJldmlvdXMgYmVoYXZpb3IgKCIwMDAiKSB3YXMgcmVzdG9yZWQgaW4gaHR0cHM6
Ly9idWdzLmVjbGlwc2Uub3JnLzM2NTM4NworCQkJLy8gKHNlZSB0aGUgY2hhbmdlIGluIFNvdXJj
ZVR5cGVCaW5kaW5nLnJlc29sdmVUeXBlc0ZvciguLikpCisJCQlhc3NlcnRFcXVhbHMoIldyb25n
IG51bWJlciBvZiBhbm5vdGF0aW9ucyIsICIwMDAiLCBTdHJpbmcudmFsdWVPZihidWZmZXIpKTsK
IAkJfQogCX0KIApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9NZXNzYWdlU2VuZC5qYXZhIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9NZXNzYWdlU2VuZC5qYXZhCmluZGV4IDU5YTdlY2QuLjQ2ZDQ1NDAgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hc3QvTWVzc2FnZVNlbmQuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L01lc3NhZ2VT
ZW5kLmphdmEKQEAgLTExOSw3ICsxMTksNyBAQAogfQogcHVibGljIHZvaWQgY2hlY2tOUEUoQmxv
Y2tTY29wZSBzY29wZSwgRmxvd0NvbnRleHQgZmxvd0NvbnRleHQsIEZsb3dJbmZvIGZsb3dJbmZv
KSB7CiAJc3VwZXIuY2hlY2tOUEUoc2NvcGUsIGZsb3dDb250ZXh0LCBmbG93SW5mbyk7Ci0JaWYg
KG51bGxTdGF0dXMoZmxvd0luZm8pID09IEZsb3dJbmZvLlBPVEVOVElBTExZX05VTEwpCisJaWYg
KChudWxsU3RhdHVzKGZsb3dJbmZvKSAmIEZsb3dJbmZvLlBPVEVOVElBTExZX05VTEwpICE9IDAp
CiAJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLm1lc3NhZ2VTZW5kUG90ZW50aWFsTnVsbFJlZmVy
ZW5jZSh0aGlzLmJpbmRpbmcsIHRoaXMpOwogfQogLyoqCkBAIC0yODEsNyArMjgxLDcgQEAKIAkJ
aWYgKCh0YWdCaXRzICYgVGFnQml0cy5Bbm5vdGF0aW9uTm9uTnVsbCkgIT0gMCkKIAkJCXJldHVy
biBGbG93SW5mby5OT05fTlVMTDsKIAkJaWYgKCh0YWdCaXRzICYgVGFnQml0cy5Bbm5vdGF0aW9u
TnVsbGFibGUpICE9IDApCi0JCQlyZXR1cm4gRmxvd0luZm8uUE9URU5USUFMTFlfTlVMTDsKKwkJ
CXJldHVybiBGbG93SW5mby5QT1RFTlRJQUxMWV9OVUxMIHwgRmxvd0luZm8uUE9URU5USUFMTFlf
Tk9OX05VTEw7CiAJfQogCXJldHVybiBGbG93SW5mby5VTktOT1dOOwogfQpkaWZmIC0tZ2l0IGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2Zsb3cvRmxvd0NvbnRleHQuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9mbG93L0Zsb3dDb250ZXh0Lmph
dmEKaW5kZXggN2RmOGE3MS4uOThjYWYzMCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Zsb3cvRmxvd0Nv
bnRleHQuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvZmxvdy9GbG93Q29udGV4dC5qYXZhCkBAIC01NjQsOSAr
NTY0LDEwIEBACiAJCXdoaWxlIChzaXplIDw9IG51bGxDb3VudCkgc2l6ZSAqPSAyOwogCQl0aGlz
LmV4cGVjdGVkVHlwZXMgPSBuZXcgVHlwZUJpbmRpbmdbc2l6ZV07CiAJfQotCWVsc2UgaWYgKG51
bGxDb3VudCA9PSB0aGlzLmV4cGVjdGVkVHlwZXMubGVuZ3RoKSB7CisJZWxzZSBpZiAobnVsbENv
dW50ID49IHRoaXMuZXhwZWN0ZWRUeXBlcy5sZW5ndGgpIHsKKwkJaW50IG9sZExlbiA9IHRoaXMu
ZXhwZWN0ZWRUeXBlcy5sZW5ndGg7CiAJCVN5c3RlbS5hcnJheWNvcHkodGhpcy5leHBlY3RlZFR5
cGVzLCAwLAotCQkJdGhpcy5leHBlY3RlZFR5cGVzID0gbmV3IFR5cGVCaW5kaW5nW251bGxDb3Vu
dCAqIDJdLCAwLCBudWxsQ291bnQpOworCQkJdGhpcy5leHBlY3RlZFR5cGVzID0gbmV3IFR5cGVC
aW5kaW5nW251bGxDb3VudCAqIDJdLCAwLCBvbGRMZW4pOwogCX0KIAl0aGlzLmV4cGVjdGVkVHlw
ZXNbbnVsbENvdW50XSA9IGV4cGVjdGVkVHlwZTsKIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9pbXBs
L0NvbXBpbGVyT3B0aW9ucy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2ltcGwvQ29tcGlsZXJPcHRpb25zLmphdmEK
aW5kZXggMGFjMDljOS4uYzk3M2ZkMyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2ltcGwvQ29tcGlsZXJP
cHRpb25zLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2ltcGwvQ29tcGlsZXJPcHRpb25zLmphdmEKQEAgLTc3
OCw2ICs3NzgsNyBAQAogCQkJT1BUSU9OX05vbk51bGxJc0RlZmF1bHQsCiAJCQlPUFRJT05fUmVw
b3J0TnVsbFNwZWNWaW9sYXRpb24sCiAJCQlPUFRJT05fUmVwb3J0UG90ZW50aWFsTnVsbFNwZWNW
aW9sYXRpb24sCisJCQlPUFRJT05fUmVwb3J0TnVsbFNwZWNJbnN1ZmZpY2llbnRJbmZvLAogCQkJ
T1BUSU9OX1JlcG9ydFJlZHVuZGFudE51bGxBbm5vdGF0aW9uCiAJCX07CiAJCXJldHVybiByZXN1
bHQ7CkBAIC0xMjI1LDYgKzEyMjYsNyBAQAogCQl0aGlzLm51bGxhYmxlQW5ub3RhdGlvbk5hbWUg
PSBERUZBVUxUX05VTExBQkxFX0FOTk9UQVRJT05fTkFNRTsKIAkJdGhpcy5ub25OdWxsQW5ub3Rh
dGlvbk5hbWUgPSBERUZBVUxUX05PTk5VTExfQU5OT1RBVElPTl9OQU1FOwogCQl0aGlzLm5vbk51
bGxCeURlZmF1bHRBbm5vdGF0aW9uTmFtZSA9IERFRkFVTFRfTk9OTlVMTEJZREVGQVVMVF9BTk5P
VEFUSU9OX05BTUU7CisJCXRoaXMuZGVmYXVsdE5vbk51bGxuZXNzID0gMDsKIAl9CiAKIAlwdWJs
aWMgdm9pZCBzZXQoTWFwIG9wdGlvbnNNYXApIHsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAv
U291cmNlVHlwZUJpbmRpbmcuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU291cmNlVHlwZUJpbmRpbmcu
amF2YQppbmRleCAwOTRjMTU1Li5lOGIyNzdjIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Nv
dXJjZVR5cGVCaW5kaW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Tb3VyY2VUeXBlQmluZGlu
Zy5qYXZhCkBAIC0xNTk3LDcgKzE1OTcsOCBAQAogCQkJCXR5cGVQYXJhbWV0ZXJzW2ldLmJpbmRp
bmcgPSBudWxsOwogCQlyZXR1cm4gbnVsbDsKIAl9Ci0JY3JlYXRlQXJndW1lbnRCaW5kaW5ncyht
ZXRob2QpOworCWlmICh0aGlzLnNjb3BlLmNvbXBpbGVyT3B0aW9ucygpLmlzQW5ub3RhdGlvbkJh
c2VkTnVsbEFuYWx5c2lzRW5hYmxlZCkKKwkJY3JlYXRlQXJndW1lbnRCaW5kaW5ncyhtZXRob2Qp
OyAvLyBuZWVkIGFubm90YXRpb25zIHJlc29sdmVkIGFscmVhZHkgYXQgdGhpcyBwb2ludAogCWlm
IChmb3VuZFJldHVyblR5cGVQcm9ibGVtKQogCQlyZXR1cm4gbWV0aG9kOyAvLyBidXQgaXRzIHN0
aWxsIHVucmVzb2x2ZWQgd2l0aCBhIG51bGwgcmV0dXJuIHR5cGUgJiBpcyBzdGlsbCBjb25uZWN0
ZWQgdG8gaXRzIG1ldGhvZCBkZWNsYXJhdGlvbgogCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcGFyc2Vy
L1NjYW5uZXIuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9wYXJzZXIvU2Nhbm5lci5qYXZhCmluZGV4IGNhNmI5ZmEu
LmIzODFiMDEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wYXJzZXIvU2Nhbm5lci5qYXZhCisrKyBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9wYXJzZXIvU2Nhbm5lci5qYXZhCkBAIC01NDcsMTEgKzU0NywxMSBAQAogCiAJaWYgKHRo
aXMubGluZUVuZHMgPT0gbnVsbCB8fCB0aGlzLmxpbmVQdHIgPT0gLTEpCiAJCXJldHVybiAtMTsK
LQlpZiAobGluZU51bWJlciA+IHRoaXMubGluZVB0ciArIDIpCisJaWYgKGxpbmVOdW1iZXIgPiB0
aGlzLmxpbmVFbmRzLmxlbmd0aCsxKQogCQlyZXR1cm4gLTE7CiAJaWYgKGxpbmVOdW1iZXIgPD0g
MCkKIAkJcmV0dXJuIC0xOwotCWlmIChsaW5lTnVtYmVyID09IHRoaXMubGluZVB0ciArIDIpCisJ
aWYgKGxpbmVOdW1iZXIgPT0gdGhpcy5saW5lRW5kcy5sZW5ndGggKyAxKQogCQlyZXR1cm4gdGhp
cy5lb2ZQb3NpdGlvbjsKIAlyZXR1cm4gdGhpcy5saW5lRW5kc1tsaW5lTnVtYmVyLTFdOyAvLyBu
ZXh0IGxpbmUgc3RhcnQgb25lIGNoYXJhY3RlciBiZWhpbmQgdGhlIGxpbmVFbmQgb2YgdGhlIHBy
ZXZpb3VzIGxpbmUKIH0=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>207888</attachid>
            <date>2011-12-04 15:01:00 -0500</date>
            <delta_ts>2011-12-04 15:01:59 -0500</delta_ts>
            <desc>regression test for item (9)</desc>
            <filename>Bug_365519_item9_test.patch</filename>
            <type>text/plain</type>
            <size>4621</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxBbm5vdGF0aW9u
VGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbEFubm90YXRpb25U
ZXN0LmphdmEKaW5kZXggMDI1YzIxYy4uNTNkOGE2ZiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Nv
bXBpbGVyL3JlZ3Jlc3Npb24vTnVsbEFubm90YXRpb25UZXN0LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3Rz
L2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbEFubm90YXRpb25UZXN0LmphdmEKQEAgLTI0NzQsNiAr
MjQ3NCw5MSBAQAogCQkiVHlwZSBtaXNtYXRjaDogcmVxdWlyZWQgXCdATm9uTnVsbCBTdHJpbmdc
JyBidXQgdGhlIHByb3ZpZGVkIHZhbHVlIGNhbiBiZSBudWxsXG4iICsKIAkJIi0tLS0tLS0tLS1c
biIpOwogfQorLy8gd2l0bmVzcyBmb3IgYW4gQUlPT0JFIGluIEZsb3dDb250ZXh0LnJlY29yZEV4
cGVjdGVkVHlwZSgpCitwdWJsaWMgdm9pZCB0ZXN0X21lc3NhZ2Vfc2VuZF9pbl9jb250cm9sX3N0
cnVjdHVyZV8wMSgpIHsKKwlNYXAgY3VzdG9tT3B0aW9ucyA9IGdldENvbXBpbGVyT3B0aW9ucygp
OworCWN1c3RvbU9wdGlvbnMucHV0KEphdmFDb3JlLkNPTVBJTEVSX1BCX05VTExfU1BFQ0lGSUNB
VElPTl9JTlNVRkZJQ0lFTlRfSU5GTywgSmF2YUNvcmUuSUdOT1JFKTsKKwljdXN0b21PcHRpb25z
LnB1dChKYXZhQ29yZS5DT01QSUxFUl9QQl9QT1RFTlRJQUxfTlVMTF9SRUZFUkVOQ0UsIEphdmFD
b3JlLldBUk5JTkcpOworCXJ1bk5lZ2F0aXZlVGVzdFdpdGhMaWJzKAorCQluZXcgU3RyaW5nW10g
eworCQkJInAvU2NvcGUuamF2YSIsCisJCQkicGFja2FnZSBwO1xuIiArCisJCQkiQG9yZy5lY2xp
cHNlLmpkdC5hbm5vdGF0aW9uLk5vbk51bGxCeURlZmF1bHRcbiIgKworCQkJInB1YmxpYyBhYnN0
cmFjdCBjbGFzcyBTY29wZSB7XG4iICsKKwkJCSIJcHVibGljIFJlZmVyZW5jZUJpbmRpbmcgZmlu
ZE1lbWJlclR5cGUoY2hhcltdIHR5cGVOYW1lLCBSZWZlcmVuY2VCaW5kaW5nIGVuY2xvc2luZ1R5
cGUpIHtcbiIgKworCQkJIgkJUmVmZXJlbmNlQmluZGluZyBlbmNsb3NpbmdTb3VyY2VUeXBlID0g
ZW5jbG9zaW5nU291cmNlVHlwZSgpO1xuIiArCisJCQkiCQlQYWNrYWdlQmluZGluZyBjdXJyZW50
UGFja2FnZSA9IGdldEN1cnJlbnRQYWNrYWdlKCk7XG4iICsKKwkJCSIJCUNvbXBpbGF0aW9uVW5p
dFNjb3BlIHVuaXRTY29wZSA9IGNvbXBpbGF0aW9uVW5pdFNjb3BlKCk7XG4iICsKKwkJCSIJCVJl
ZmVyZW5jZUJpbmRpbmcgbWVtYmVyVHlwZSA9IGVuY2xvc2luZ1R5cGUuZ2V0TWVtYmVyVHlwZSh0
eXBlTmFtZSk7XG4iICsKKwkJCSIJCVJlZmVyZW5jZUJpbmRpbmcgY3VycmVudFR5cGUgPSBlbmNs
b3NpbmdUeXBlO1xuIiArCisJCQkiCQlSZWZlcmVuY2VCaW5kaW5nW10gaW50ZXJmYWNlc1RvVmlz
aXQgPSBudWxsO1xuIiArCisJCQkiCQl3aGlsZSAodHJ1ZSkge1xuIiArCisJCQkiCQkJUmVmZXJl
bmNlQmluZGluZ1tdIGl0c0ludGVyZmFjZXMgPSBjdXJyZW50VHlwZS5zdXBlckludGVyZmFjZXMo
KTtcbiIgKworCQkJIgkJCWlmIChpdHNJbnRlcmZhY2VzICE9IG51bGwpIHtcbiIgKworCQkJIgkJ
CQlpZiAoaW50ZXJmYWNlc1RvVmlzaXQgPT0gbnVsbCkge1xuIiArCisJCQkiCQkJCQlpbnRlcmZh
Y2VzVG9WaXNpdCA9IGl0c0ludGVyZmFjZXM7XG4iICsKKwkJCSIJCQkJfVxuIiArCisJCQkiCQkJ
fVxuIiArCisJCQkiCQkJdW5pdFNjb3BlLnJlY29yZFJlZmVyZW5jZShjdXJyZW50VHlwZSwgdHlw
ZU5hbWUpO1xuIiArCisJCQkiCQkJXG4iICsKKwkJCSIJCQlpZiAoKG1lbWJlclR5cGUgPSBjdXJy
ZW50VHlwZS5nZXRNZW1iZXJUeXBlKHR5cGVOYW1lKSkgIT0gbnVsbCkge1xuIiArCisJCQkiCQkJ
CWlmIChlbmNsb3NpbmdTb3VyY2VUeXBlID09IG51bGxcbiIgKworCQkJIgkJCQkJPyBtZW1iZXJU
eXBlLmNhbkJlU2VlbkJ5KGN1cnJlbnRQYWNrYWdlKVxuIiArCisJCQkiCQkJCQk6IG1lbWJlclR5
cGUuY2FuQmVTZWVuQnkoZW5jbG9zaW5nVHlwZSwgZW5jbG9zaW5nU291cmNlVHlwZSkpIHtcbiIg
KworCQkJIgkJCQkJCXJldHVybiBtZW1iZXJUeXBlO1xuIiArCisJCQkiCQkJCX1cbiIgKworCQkJ
IgkJCX1cbiIgKworCQkJIgkJfVxuIiArCisJCQkiCX1cbiIgKworCQkJIglwcml2YXRlIENvbXBp
bGF0aW9uVW5pdFNjb3BlIGNvbXBpbGF0aW9uVW5pdFNjb3BlKCkge1xuIiArCisJCQkiCQlyZXR1
cm4gY29tcGlsYXRpb25Vbml0U2NvcGUoKTtcbiIgKworCQkJIgl9XG4iICsKKwkJCSIJcHJpdmF0
ZSBQYWNrYWdlQmluZGluZyBnZXRDdXJyZW50UGFja2FnZSgpIHtcbiIgKworCQkJIgkJcmV0dXJu
IGdldEN1cnJlbnRQYWNrYWdlKCk7XG4iICsKKwkJCSIJfVxuIiArCisJCQkiCXByaXZhdGUgUmVm
ZXJlbmNlQmluZGluZyBlbmNsb3NpbmdTb3VyY2VUeXBlKCkge1xuIiArCisJCQkiCQlyZXR1cm4g
ZW5jbG9zaW5nU291cmNlVHlwZSgpO1xuIiArCisJCQkiCX1cbiIgKworCQkJIn1cbiIsCisJCQki
cC9Db21waWxhdGlvblVuaXRTY29wZS5qYXZhIiwKKwkJCSJwYWNrYWdlIHA7XG4iICsKKwkJCSJA
b3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTm9uTnVsbEJ5RGVmYXVsdFxuIiArCisJCQkicHVi
bGljIGNsYXNzIENvbXBpbGF0aW9uVW5pdFNjb3BlIHtcbiIgKworCQkJIiAgICB2b2lkIHJlY29y
ZFJlZmVyZW5jZShSZWZlcmVuY2VCaW5kaW5nIHJiLCBjaGFyW10gbmFtZSkge31cbiIgKworCQkJ
In1cbiIsCisJCQkicC9QYWNrYWdlQmluZGluZy5qYXZhIiwKKwkJCSJwYWNrYWdlIHA7XG4iICsK
KwkJCSJAb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTm9uTnVsbEJ5RGVmYXVsdFxuIiArCisJ
CQkicHVibGljIGNsYXNzIFBhY2thZ2VCaW5kaW5nIHtcbiIgKworCQkJIn1cbiIsCisJCQkicC9S
ZWZlcmVuY2VCaW5kaW5nLmphdmEiLAorCQkJInBhY2thZ2UgcDtcbiIgKworCQkJIkBvcmcuZWNs
aXBzZS5qZHQuYW5ub3RhdGlvbi5Ob25OdWxsQnlEZWZhdWx0XG4iICsKKwkJCSJwdWJsaWMgY2xh
c3MgUmVmZXJlbmNlQmluZGluZyB7XG4iICsKKwkJCSIgICAgUmVmZXJlbmNlQmluZGluZyBnZXRN
ZW1iZXJUeXBlKGNoYXJbXSBuYW1lKSB7IHJldHVybiB0aGlzOyB9XG4iICsKKwkJCSIgICAgUmVm
ZXJlbmNlQmluZGluZ1tdIHN1cGVySW50ZXJmYWNlcygpIHsgcmV0dXJuIG5ldyBSZWZlcmVuY2VC
aW5kaW5nWzBdOyB9XG4iICsKKwkJCSIgICAgYm9vbGVhbiBjYW5CZVNlZW5CeShQYWNrYWdlQmlu
ZGluZyBvYikgeyByZXR1cm4gdHJ1ZTsgfVxuIiArCisJCQkiICAgIGJvb2xlYW4gY2FuQmVTZWVu
QnkoUmVmZXJlbmNlQmluZGluZyByYiwgUmVmZXJlbmNlQmluZGluZyByYjIpIHsgcmV0dXJuIHRy
dWU7IH1cbiIgKworCQkJIn1cbiIKKwkJfSwKKwkJY3VzdG9tT3B0aW9ucywKKwkJIi0tLS0tLS0t
LS1cbiIgKworCQkiMS4gRVJST1IgaW4gcFxcU2NvcGUuamF2YSAoYXQgbGluZSAxMylcbiIgKwor
CQkiCWlmIChpdHNJbnRlcmZhY2VzICE9IG51bGwpIHtcbiIgKworCQkiCSAgICBeXl5eXl5eXl5e
Xl5eXG4iICsKKwkJIlJlZHVuZGFudCBudWxsIGNoZWNrOiBUaGUgdmFyaWFibGUgaXRzSW50ZXJm
YWNlcyBjYW5ub3QgYmUgbnVsbCBhdCB0aGlzIGxvY2F0aW9uXG4iICsKKwkJIi0tLS0tLS0tLS1c
biIgKworCQkiMi4gRVJST1IgaW4gcFxcU2NvcGUuamF2YSAoYXQgbGluZSAyMClcbiIgKworCQki
CWlmICgobWVtYmVyVHlwZSA9IGN1cnJlbnRUeXBlLmdldE1lbWJlclR5cGUodHlwZU5hbWUpKSAh
PSBudWxsKSB7XG4iICsKKwkJIgkgICAgXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5cbiIgKworCQkiUmVkdW5kYW50IG51bGwgY2hlY2s6IFRoZSB2YXJp
YWJsZSBtZW1iZXJUeXBlIGNhbm5vdCBiZSBudWxsIGF0IHRoaXMgbG9jYXRpb25cbiIgKworCQki
LS0tLS0tLS0tLVxuIiArCisJCSIzLiBFUlJPUiBpbiBwXFxTY29wZS5qYXZhIChhdCBsaW5lIDIx
KVxuIiArCisJCSIJaWYgKGVuY2xvc2luZ1NvdXJjZVR5cGUgPT0gbnVsbFxuIiArCisJCSIJICAg
IF5eXl5eXl5eXl5eXl5eXl5eXl5cbiIgKworCQkiTnVsbCBjb21wYXJpc29uIGFsd2F5cyB5aWVs
ZHMgZmFsc2U6IFRoZSB2YXJpYWJsZSBlbmNsb3NpbmdTb3VyY2VUeXBlIGNhbm5vdCBiZSBudWxs
IGF0IHRoaXMgbG9jYXRpb25cbiIgKworCQkiLS0tLS0tLS0tLVxuIik7Cit9CiBwdWJsaWMgdm9p
ZCB0ZXN0X2Fzc2lnbm1lbnRfZXhwcmVzc2lvbl8xKCkgewogCU1hcCBjdXN0b21PcHRpb25zID0g
Z2V0Q29tcGlsZXJPcHRpb25zKCk7CiAvLwljdXN0b21PcHRpb25zLnB1dChDb21waWxlck9wdGlv
bnMuT1BUSU9OX1JlcG9ydFBvdGVudGlhbE51bGxTcGVjVmlvbGF0aW9uLCBKYXZhQ29yZS5FUlJP
Uik7Cg==
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>207952</attachid>
            <date>2011-12-05 18:22:00 -0500</date>
            <delta_ts>2011-12-05 18:22:07 -0500</delta_ts>
            <desc>tests &amp; implementation for item (25)</desc>
            <filename>Bug_365387_items_25+26.patch</filename>
            <type>text/plain</type>
            <size>9581</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxBbm5vdGF0aW9u
VGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbEFubm90YXRpb25U
ZXN0LmphdmEKaW5kZXggNTNkOGE2Zi4uNjdhYmIyNCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Nv
bXBpbGVyL3JlZ3Jlc3Npb24vTnVsbEFubm90YXRpb25UZXN0LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3Rz
L2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbEFubm90YXRpb25UZXN0LmphdmEKQEAgLTUyLDcgKzUy
LDcgQEAKIC8vIFN0YXRpYyBpbml0aWFsaXplciB0byBzcGVjaWZ5IHRlc3RzIHN1YnNldCB1c2lu
ZyBURVNUU18qIHN0YXRpYyB2YXJpYWJsZXMKIC8vIEFsbCBzcGVjaWZpZWQgdGVzdHMgd2hpY2gg
ZG8gbm90IGJlbG9uZyB0byB0aGUgY2xhc3MgYXJlIHNraXBwZWQuLi4KIHN0YXRpYyB7Ci0vLwkJ
VEVTVFNfTkFNRVMgPSBuZXcgU3RyaW5nW10geyAidGVzdF9hc3NpZ25tZW50X2V4cHJlc3Npb25f
MSIgfTsKKy8vCQlURVNUU19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7ICJ0ZXN0X25vbm51bGxfcGFy
YW1ldGVyXzAxNSIgfTsKIC8vCQlURVNUU19OVU1CRVJTID0gbmV3IGludFtdIHsgNTYxIH07CiAv
LwkJVEVTVFNfUkFOR0UgPSBuZXcgaW50W10geyAxLCAyMDQ5IH07CiB9CkBAIC01NTAsNiArNTUw
LDE1OCBAQAogCQkiVHlwZSBtaXNtYXRjaDogcmVxdWlyZWQgXCdATm9uTnVsbCBPYmplY3RcJyBi
dXQgdGhlIHByb3ZpZGVkIHZhbHVlIGlzIG51bGxcbiIgKyAKIAkJIi0tLS0tLS0tLS1cbiIpOwog
fQorLy8gbm9uLW51bGwgdmFyYXJncyAobWVzc2FnZSBzZW5kKQorcHVibGljIHZvaWQgdGVzdF9u
b25udWxsX3BhcmFtZXRlcl8wMTUoKSB7CisJcnVuTmVnYXRpdmVUZXN0KAorCQluZXcgU3RyaW5n
W10geworCQkJIlguamF2YSIsCisJCQkiaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9u
Lio7XG4iICsKKwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCSIgICAgdm9pZCBmb28oQE5v
bk51bGwgT2JqZWN0IC4uLiBvKSB7XG4iICsKKwkJCSIgICAgICAgIGlmIChvICE9IG51bGwpXG4i
ICsKKwkJCSIgICAgICAgICAgICAgIFN5c3RlbS5vdXQucHJpbnQoby50b1N0cmluZygpKTtcbiIg
KworCQkJIiAgICB9XG4iICsKKwkJCSIgICAgdm9pZCBmb28yKGludCBpLCBATm9uTnVsbCBPYmpl
Y3QgLi4uIG8pIHtcbiIgKworCQkJIiAgICAgICAgaWYgKG8ubGVuZ3RoID4gMCAmJiBvWzBdICE9
IG51bGwpXG4iICsKKwkJCSIgICAgICAgICAgICAgIFN5c3RlbS5vdXQucHJpbnQob1swXS50b1N0
cmluZygpKTtcbiIgKworCQkJIiAgICB9XG4iICsKKwkJCSIgICAgdm9pZCBiYXIoKSB7XG4iICsK
KwkJCSIgICAgICAgIGZvbygoT2JqZWN0KW51bGwpO1xuIiArCisJCQkiICAgICAgICBmb28odGhp
cywgbnVsbCk7XG4iICsKKwkJCSIgICAgICAgIGZvbyhudWxsLCB0aGlzKTtcbiIgKworCQkJIiAg
ICAgICAgZm9vMigyLCAoT2JqZWN0KW51bGwpO1xuIiArCisJCQkiICAgICAgICBmb28yKDIsIHRo
aXMsIG51bGwpO1xuIiArCisJCQkiICAgICAgICBmb28yKDIsIG51bGwsIHRoaXMpO1xuIiArCisJ
CQkiICAgICAgICBmb28yKDIsIChPYmplY3RbXSludWxsKTtcbiIgKworCQkJIiAgICB9XG4iICsK
KwkJCSJ9XG4ifSwKKwkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkiMS4gRVJST1IgaW4gWC5qYXZh
IChhdCBsaW5lIDQpXG4iICsgCisJCQkiCWlmIChvICE9IG51bGwpXG4iICsgCisJCQkiCSAgICBe
XG4iICsgCisJCQkiUmVkdW5kYW50IG51bGwgY2hlY2s6IFRoZSB2YXJpYWJsZSBvIGNhbm5vdCBi
ZSBudWxsIGF0IHRoaXMgbG9jYXRpb25cbiIgKworLy8gY2Fubm90IHlldCBsb29rIGludG8gYXJy
YXlzOgorLy8JCQkiLS0tLS0tLS0tLVxuIiArIAorLy8JCQkiMi4gRVJST1IgaW4gWC5qYXZhIChh
dCBsaW5lIDgpXG4iICsgCisvLwkJCSIJaWYgKG8ubGVuZ3RoID4gMCAmJiBvWzBdICE9IG51bGwp
XG4iICsgCisvLwkJCSIJICAgICAgICAgICAgICAgICAgICBeXl5eXG4iICsgCisvLwkJCSJSZWR1
bmRhbnQgbnVsbCBjaGVjazogVGhlIGFycmF5IHZhcmlhYmxlIG8gY2Fubm90IGNvbnRhaW4gbnVs
bCBhdCB0aGlzIHByb2dyYW0gbG9jYXRpb25cbiIgKyAKKwkJCSItLS0tLS0tLS0tXG4iICsgCisJ
CQkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDEyKVxuIiArIAorCQkJIglmb28oKE9iamVj
dCludWxsKTtcbiIgKyAKKwkJCSIJICAgIF5eXl5eXl5eXl5eXlxuIiArIAorCQkJIlR5cGUgbWlz
bWF0Y2g6IHJlcXVpcmVkIFwnQE5vbk51bGwgT2JqZWN0XCcgYnV0IHRoZSBwcm92aWRlZCB2YWx1
ZSBpcyBudWxsXG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJIjMuIEVSUk9SIGluIFgu
amF2YSAoYXQgbGluZSAxMylcbiIgKyAKKwkJCSIJZm9vKHRoaXMsIG51bGwpO1xuIiArIAorCQkJ
IgkgICAgICAgICAgXl5eXlxuIiArIAorCQkJIlR5cGUgbWlzbWF0Y2g6IHJlcXVpcmVkIFwnQE5v
bk51bGwgT2JqZWN0XCcgYnV0IHRoZSBwcm92aWRlZCB2YWx1ZSBpcyBudWxsXG4iICsgCisJCQki
LS0tLS0tLS0tLVxuIiArIAorCQkJIjQuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxNClcbiIg
KyAKKwkJCSIJZm9vKG51bGwsIHRoaXMpO1xuIiArIAorCQkJIgkgICAgXl5eXlxuIiArIAorCQkJ
IlR5cGUgbWlzbWF0Y2g6IHJlcXVpcmVkIFwnQE5vbk51bGwgT2JqZWN0XCcgYnV0IHRoZSBwcm92
aWRlZCB2YWx1ZSBpcyBudWxsXG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJIjUuIEVS
Uk9SIGluIFguamF2YSAoYXQgbGluZSAxNSlcbiIgKyAKKwkJCSIJZm9vMigyLCAoT2JqZWN0KW51
bGwpO1xuIiArIAorCQkJIgkgICAgICAgIF5eXl5eXl5eXl5eXlxuIiArIAorCQkJIlR5cGUgbWlz
bWF0Y2g6IHJlcXVpcmVkIFwnQE5vbk51bGwgT2JqZWN0XCcgYnV0IHRoZSBwcm92aWRlZCB2YWx1
ZSBpcyBudWxsXG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJIjYuIEVSUk9SIGluIFgu
amF2YSAoYXQgbGluZSAxNilcbiIgKyAKKwkJCSIJZm9vMigyLCB0aGlzLCBudWxsKTtcbiIgKyAK
KwkJCSIJICAgICAgICAgICAgICBeXl5eXG4iICsgCisJCQkiVHlwZSBtaXNtYXRjaDogcmVxdWly
ZWQgXCdATm9uTnVsbCBPYmplY3RcJyBidXQgdGhlIHByb3ZpZGVkIHZhbHVlIGlzIG51bGxcbiIg
KyAKKwkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkiNy4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5l
IDE3KVxuIiArIAorCQkJIglmb28yKDIsIG51bGwsIHRoaXMpO1xuIiArIAorCQkJIgkgICAgICAg
IF5eXl5cbiIgKyAKKwkJCSJUeXBlIG1pc21hdGNoOiByZXF1aXJlZCBcJ0BOb25OdWxsIE9iamVj
dFwnIGJ1dCB0aGUgcHJvdmlkZWQgdmFsdWUgaXMgbnVsbFxuIiArIAorCQkJIi0tLS0tLS0tLS1c
biIgKyAKKwkJCSI4LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTgpXG4iICsgCisJCQkiCWZv
bzIoMiwgKE9iamVjdFtdKW51bGwpO1xuIiArIAorCQkJIgkgICAgICAgIF5eXl5eXl5eXl5eXl5e
XG4iICsgCisJCQkiVHlwZSBtaXNtYXRjaDogcmVxdWlyZWQgXCdATm9uTnVsbCBPYmplY3RbXVwn
IGJ1dCB0aGUgcHJvdmlkZWQgdmFsdWUgaXMgbnVsbFxuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIs
CisJCXRoaXMuTElCUywKKwkJdHJ1ZSAvKiBzaG91bGRGbHVzaCovKTsKK30KKy8vIG5vbi1udWxs
IHZhcmFyZ3MgKGFsbG9jYXRpb24gYW5kIGV4cGxpY2l0IGNvbnN0cnVjdG9yIGNhbGxzKQorcHVi
bGljIHZvaWQgdGVzdF9ub25udWxsX3BhcmFtZXRlcl8wMTYoKSB7CisJcnVuTmVnYXRpdmVUZXN0
KAorCQluZXcgU3RyaW5nW10geworCQkJIlguamF2YSIsCisJCQkiaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5hbm5vdGF0aW9uLio7XG4iICsKKwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCSIg
ICAgWChATm9uTnVsbCBPYmplY3QgLi4uIG8pIHtcbiIgKworCQkJIiAgICAgICAgaWYgKG8gIT0g
bnVsbClcbiIgKworCQkJIiAgICAgICAgICAgICAgU3lzdGVtLm91dC5wcmludChvLnRvU3RyaW5n
KCkpO1xuIiArCisJCQkiICAgIH1cbiIgKworCQkJIiAgICBjbGFzcyBZIGV4dGVuZHMgWCB7XG4i
ICsKKwkJCSIgICAgICAgIFkoaW50IGksIEBOb25OdWxsIE9iamVjdCAuLi4gbykge1xuIiArCisJ
CQkiICAgICAgICAJc3VwZXIoaSwgKE9iamVjdCludWxsKTtcbiIgKworCQkJIiAgICAgICAgfVxu
IiArCisJCQkiICAgICAgICBZKGNoYXIgYywgQE5vbk51bGwgT2JqZWN0IC4uLiBvKSB7XG4iICsK
KwkJCSIgICAgICAgIAl0aGlzKDEsIG5ldyBPYmplY3QoKSwgbnVsbCk7XG4iICsKKwkJCSIgICAg
ICAgIH1cbiIgKworCQkJIiAgICB9XG4iICsKKwkJCSIgICAgdm9pZCBiYXIoKSB7XG4iICsKKwkJ
CSIgICAgICAgIG5ldyBYKChPYmplY3QpbnVsbCk7XG4iICsKKwkJCSIgICAgICAgIG5ldyBYKHRo
aXMsIG51bGwpO1xuIiArCisJCQkiICAgICAgICBYIHggPSBuZXcgWChudWxsLCB0aGlzKTtcbiIg
KworCQkJIiAgICAgICAgeC5uZXcgWSgyLCAoT2JqZWN0KW51bGwpO1xuIiArCisJCQkiICAgICAg
ICB0aGlzLm5ldyBZKDIsIG51bGwsIHRoaXMpO1xuIiArCisJCQkiICAgICAgICB0aGlzLm5ldyBZ
KDIsIChPYmplY3RbXSludWxsKTtcbiIgKworCQkJIiAgICB9XG4iICsKKwkJCSJ9XG4ifSwKKwkJ
CSItLS0tLS0tLS0tXG4iICsgCisJCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDQpXG4i
ICsgCisJCQkiCWlmIChvICE9IG51bGwpXG4iICsgCisJCQkiCSAgICBeXG4iICsgCisJCQkiUmVk
dW5kYW50IG51bGwgY2hlY2s6IFRoZSB2YXJpYWJsZSBvIGNhbm5vdCBiZSBudWxsIGF0IHRoaXMg
bG9jYXRpb25cbiIgKyAKKwkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkiMi4gRVJST1IgaW4gWC5q
YXZhIChhdCBsaW5lIDkpXG4iICsgCisJCQkiCXN1cGVyKGksIChPYmplY3QpbnVsbCk7XG4iICsg
CisJCQkiCSAgICAgICAgIF5eXl5eXl5eXl5eXlxuIiArIAorCQkJIlR5cGUgbWlzbWF0Y2g6IHJl
cXVpcmVkIFwnQE5vbk51bGwgT2JqZWN0XCcgYnV0IHRoZSBwcm92aWRlZCB2YWx1ZSBpcyBudWxs
XG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJIjMuIEVSUk9SIGluIFguamF2YSAoYXQg
bGluZSAxMilcbiIgKyAKKwkJCSIJdGhpcygxLCBuZXcgT2JqZWN0KCksIG51bGwpO1xuIiArIAor
CQkJIgkgICAgICAgICAgICAgICAgICAgICAgXl5eXlxuIiArIAorCQkJIlR5cGUgbWlzbWF0Y2g6
IHJlcXVpcmVkIFwnQE5vbk51bGwgT2JqZWN0XCcgYnV0IHRoZSBwcm92aWRlZCB2YWx1ZSBpcyBu
dWxsXG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJIjQuIEVSUk9SIGluIFguamF2YSAo
YXQgbGluZSAxNilcbiIgKyAKKwkJCSIJbmV3IFgoKE9iamVjdCludWxsKTtcbiIgKyAKKwkJCSIJ
ICAgICAgXl5eXl5eXl5eXl5eXG4iICsgCisJCQkiVHlwZSBtaXNtYXRjaDogcmVxdWlyZWQgXCdA
Tm9uTnVsbCBPYmplY3RcJyBidXQgdGhlIHByb3ZpZGVkIHZhbHVlIGlzIG51bGxcbiIgKyAKKwkJ
CSItLS0tLS0tLS0tXG4iICsgCisJCQkiNS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDE3KVxu
IiArIAorCQkJIgluZXcgWCh0aGlzLCBudWxsKTtcbiIgKyAKKwkJCSIJICAgICAgICAgICAgXl5e
XlxuIiArIAorCQkJIlR5cGUgbWlzbWF0Y2g6IHJlcXVpcmVkIFwnQE5vbk51bGwgT2JqZWN0XCcg
YnV0IHRoZSBwcm92aWRlZCB2YWx1ZSBpcyBudWxsXG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIiAr
IAorCQkJIjYuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxOClcbiIgKyAKKwkJCSIJWCB4ID0g
bmV3IFgobnVsbCwgdGhpcyk7XG4iICsgCisJCQkiCSAgICAgICAgICAgIF5eXl5cbiIgKyAKKwkJ
CSJUeXBlIG1pc21hdGNoOiByZXF1aXJlZCBcJ0BOb25OdWxsIE9iamVjdFwnIGJ1dCB0aGUgcHJv
dmlkZWQgdmFsdWUgaXMgbnVsbFxuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCSI3LiBF
UlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTkpXG4iICsgCisJCQkiCXgubmV3IFkoMiwgKE9iamVj
dCludWxsKTtcbiIgKyAKKwkJCSIJICAgICAgICAgICBeXl5eXl5eXl5eXl5cbiIgKyAKKwkJCSJU
eXBlIG1pc21hdGNoOiByZXF1aXJlZCBcJ0BOb25OdWxsIE9iamVjdFwnIGJ1dCB0aGUgcHJvdmlk
ZWQgdmFsdWUgaXMgbnVsbFxuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCSI4LiBFUlJP
UiBpbiBYLmphdmEgKGF0IGxpbmUgMjApXG4iICsgCisJCQkiCXRoaXMubmV3IFkoMiwgbnVsbCwg
dGhpcyk7XG4iICsgCisJCQkiCSAgICAgICAgICAgICAgXl5eXlxuIiArIAorCQkJIlR5cGUgbWlz
bWF0Y2g6IHJlcXVpcmVkIFwnQE5vbk51bGwgT2JqZWN0XCcgYnV0IHRoZSBwcm92aWRlZCB2YWx1
ZSBpcyBudWxsXG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJIjkuIEVSUk9SIGluIFgu
amF2YSAoYXQgbGluZSAyMSlcbiIgKyAKKwkJCSIJdGhpcy5uZXcgWSgyLCAoT2JqZWN0W10pbnVs
bCk7XG4iICsgCisJCQkiCSAgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5cbiIgKyAKKwkJCSJU
eXBlIG1pc21hdGNoOiByZXF1aXJlZCBcJ0BOb25OdWxsIE9iamVjdFtdXCcgYnV0IHRoZSBwcm92
aWRlZCB2YWx1ZSBpcyBudWxsXG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIiwKKwkJdGhpcy5MSUJT
LAorCQl0cnVlIC8qIHNob3VsZEZsdXNoKi8pOworfQogLy8gYXNzaWduaW5nIHBvdGVudGlhbCBu
dWxsIHRvIGEgbm9ubnVsbCBsb2NhbCB2YXJpYWJsZQogcHVibGljIHZvaWQgdGVzdF9ub25udWxs
X2xvY2FsXzAwMSgpIHsKIAlydW5OZWdhdGl2ZVRlc3QoCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0
L1N0YXRlbWVudC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9TdGF0ZW1lbnQuamF2YQppbmRleCAwNzNlY2Mx
Li5jMDNlZGM4IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1N0YXRlbWVudC5qYXZhCisrKyBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9hc3QvU3RhdGVtZW50LmphdmEKQEAgLTY0LDcgKzY0LDI2IEBACiB7CiAJLy8gY29tcGFy
ZSBhY3R1YWwgbnVsbC1zdGF0dXMgYWdhaW5zdCBwYXJhbWV0ZXIgYW5ub3RhdGlvbnMgb2YgdGhl
IGNhbGxlZCBtZXRob2Q6CiAJaWYgKGFyZ3VtZW50cyAhPSBudWxsICYmIG1ldGhvZEJpbmRpbmcu
cGFyYW1ldGVyTm9uTnVsbG5lc3MgIT0gbnVsbCkgewotCQlmb3IgKGludCBpID0gMDsgaSA8IGFy
Z3VtZW50cy5sZW5ndGg7IGkrKykgeworCisJCS8vIGNoZWNrIGlmIHZhcmFyZ3MgbmVlZCBzcGVj
aWFsIHRyZWF0bWVudDoKKwkJaW50IHJlZ3VsYXJQYXJhbXNMZW4gPSBtZXRob2RCaW5kaW5nLnBh
cmFtZXRlcnMubGVuZ3RoOworCQlib29sZWFuIHBhc3NUaHJvdWdoID0gZmFsc2U7CisJCWlmICht
ZXRob2RCaW5kaW5nLmlzVmFyYXJncygpKSB7CisJCQkvLyB0aGlzIGlmLWJsb2NrIGVzc2VudGlh
bGx5IGNvcGllZCBmcm9tIGdlbmVyYXRlQXJndW1lbnRzKC4uKToKKwkJCWlmIChyZWd1bGFyUGFy
YW1zTGVuID09IGFyZ3VtZW50cy5sZW5ndGgpIHsKKwkJCQlUeXBlQmluZGluZyB2YXJBcmdzVHlw
ZSA9IG1ldGhvZEJpbmRpbmcucGFyYW1ldGVyc1tyZWd1bGFyUGFyYW1zTGVuLTFdOworCQkJCVR5
cGVCaW5kaW5nIGxhc3RUeXBlID0gYXJndW1lbnRzW3JlZ3VsYXJQYXJhbXNMZW4tMV0ucmVzb2x2
ZWRUeXBlOworCQkJCWlmIChsYXN0VHlwZSA9PSBUeXBlQmluZGluZy5OVUxMCisJCQkJCQl8fCAo
dmFyQXJnc1R5cGUuZGltZW5zaW9ucygpID09IGxhc3RUeXBlLmRpbWVuc2lvbnMoKQorCQkJCQkJ
JiYgbGFzdFR5cGUuaXNDb21wYXRpYmxlV2l0aCh2YXJBcmdzVHlwZSkpKQorCQkJCQlwYXNzVGhy
b3VnaCA9IHRydWU7IC8vIHBhc3MgZGlyZWN0bHkgYXMtaXMKKwkJCX0KKwkJCWlmICghcGFzc1Ro
cm91Z2gpCisJCQkJcmVndWxhclBhcmFtc0xlbi0tOyAvLyBsYXN0IG9uZSBpcyB0cmVhdGVkIHNw
ZWNpYWxseQorCQl9CisKKwkJLy8gbWFpbiBjaGVja2luZyBsb29wOgorCQlmb3IgKGludCBpID0g
MDsgaSA8IHJlZ3VsYXJQYXJhbXNMZW47IGkrKykgewogCQkJaWYgKG1ldGhvZEJpbmRpbmcucGFy
YW1ldGVyTm9uTnVsbG5lc3NbaV0gPT0gQm9vbGVhbi5UUlVFKSB7CiAJCQkJVHlwZUJpbmRpbmcg
ZXhwZWN0ZWRUeXBlID0gbWV0aG9kQmluZGluZy5wYXJhbWV0ZXJzW2ldOwogCQkJCUV4cHJlc3Np
b24gYXJndW1lbnQgPSBhcmd1bWVudHNbaV07CkBAIC03Myw2ICs5MiwxOSBAQAogCQkJCQlmbG93
Q29udGV4dC5yZWNvcmROdWxsaXR5TWlzbWF0Y2goY3VycmVudFNjb3BlLCBhcmd1bWVudCwgbnVs
bFN0YXR1cywgZXhwZWN0ZWRUeXBlKTsKIAkJCX0KIAkJfQorCisJCS8vIGlmIHZhcmFyZyBpcyBz
cGVjaWZpZWQgQE5vbk51bGw6CisJCWlmICghcGFzc1Rocm91Z2ggJiYgbWV0aG9kQmluZGluZy5p
c1ZhcmFyZ3MoKSAmJiBtZXRob2RCaW5kaW5nLnBhcmFtZXRlck5vbk51bGxuZXNzW3JlZ3VsYXJQ
YXJhbXNMZW5dID09IEJvb2xlYW4uVFJVRSkgeworCQkJVHlwZUJpbmRpbmcgdmFyQXJnc1R5cGUg
PSAoKEFycmF5QmluZGluZyltZXRob2RCaW5kaW5nLnBhcmFtZXRlcnNbcmVndWxhclBhcmFtc0xl
bl0pLmVsZW1lbnRzVHlwZSgpOyAvLyBsYXN0IHR5cGUgaXMgYXJyYXkgYnkgZGVmaW5pdGlvbgor
CQkJLy8gY29udGludWUgbG9vcCB1bnRpbCBhbGwgYXJndW1lbnRzIGFyZSBoYW5kbGVkOgorCQkJ
aW50IGFyZ3VtZW50c0xlbiA9IGFyZ3VtZW50cy5sZW5ndGg7CisJCQlmb3IgKGludCBpPXJlZ3Vs
YXJQYXJhbXNMZW47IGk8YXJndW1lbnRzTGVuOyBpKyspIHsKKwkJCQlFeHByZXNzaW9uIGFyZ3Vt
ZW50ID0gYXJndW1lbnRzW2ldOworCQkJCWludCBudWxsU3RhdHVzID0gYXJndW1lbnQubnVsbFN0
YXR1cyhmbG93SW5mbyk7IC8vIHNsaWdodCBsb3NzIG9mIHByZWNpc2lvbjogc2hvdWxkIGFsc28g
dXNlIHRoZSBudWxsIGluZm8gZnJvbSB0aGUgcmVjZWl2ZXIuCisJCQkJaWYgKG51bGxTdGF0dXMg
IT0gRmxvd0luZm8uTk9OX05VTEwpIC8vIGlmIHJlcXVpcmVkIG5vbi1udWxsIGlzIG5vdCBwcm92
aWRlZAorCQkJCQlmbG93Q29udGV4dC5yZWNvcmROdWxsaXR5TWlzbWF0Y2goY3VycmVudFNjb3Bl
LCBhcmd1bWVudCwgbnVsbFN0YXR1cywgdmFyQXJnc1R5cGUpOwkJCQkKKwkJCX0KKwkJfQogCX0K
IH0KIAo=
</data>

          </attachment>
      

    </bug>

</bugzilla>