<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>382347</bug_id>
          
          <creation_ts>2012-06-12 07:52:00 -0400</creation_ts>
          <short_desc>[1.8][compiler] Compiler accepts incorrect default method inheritance</short_desc>
          <delta_ts>2012-10-08 17:57:41 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>383966</blocked>
    
    <blocked>388800</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2122923</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-06-12 07:52:46 -0400</bug_when>
    <thetext>BETA_JAVA8

The following program should be rejected since a class is not allowed
to inherit a default method whose signature is override equivalent with
another method inherited by it. It is not rejected at the moment.

// ----

interface I {
  void foo() default {}
}

interface J {
  void foo();
}

abstract class X implements I, J {
}

Please also test the interface case where similar prohibitions hold.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2150318</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-08-20 18:22:47 -0400</bug_when>
    <thetext>Starting to work on this I&apos;m wondering why the spec says (9.4.1):

&quot;It is a compile-time error if an interface I inherits a default method whose signature is override-equivalent with another method inherited by I.&quot;

Why &quot;override-equivalent&quot;, not plain &quot;equal signatures&quot;? If signatures are not equal we already get the error re clash: equal erasures but not overriding.

I can only see test cases for the new error where different inherited methods have the *same* signature, how could I create a test for the new error with signatures that are not the same, but override-equivalent?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2155292</commentid>
    <comment_count>2</comment_count>
      <attachid>220639</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-09-02 17:25:08 -0400</bug_when>
    <thetext>Created attachment 220639
WIP: tests &amp; fix

I should&apos;ve shared my current state, so here it is.

It&apos;s the added tests 3 &amp; 4 that got my puzzled (see previous comment).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2155765</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-09-04 09:56:14 -0400</bug_when>
    <thetext>I&apos;ve pushed the current patch via commit 705390b3d4e931310269932c3d040a1bf61dd26b to facilitate work in bug 388739 on top of this patch.

Leaving this bug open as a reminder that we *might* want more tests here.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2162157</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-09-20 04:24:02 -0400</bug_when>
    <thetext>(In reply to comment #1)

Sorry for the delay in responding to this:

&gt; Starting to work on this I&apos;m wondering why the spec says (9.4.1):
&gt; 
&gt; &quot;It is a compile-time error if an interface I inherits a default method
&gt; whose signature is override-equivalent with another method inherited by I.&quot;
&gt; 
&gt; Why &quot;override-equivalent&quot;, not plain &quot;equal signatures&quot;? If signatures are
&gt; not equal we already get the error re clash: equal erasures but not
&gt; overriding.

I don&apos;t think there is any mystery/hidden nuance/subtlety here. It is just
a statement of fact and if that ends up restating something that was already
the case, that is just due to the choice of words.

&gt; I can only see test cases for the new error where different inherited
&gt; methods have the *same* signature, how could I create a test for the new
&gt; error with signatures that are not the same, but override-equivalent?

I don&apos;t think you can.

(In reply to comment #3)
&gt; Leaving this bug open as a reminder that we *might* want more tests here.

I would close it as is if there aren&apos;t going to be additional &quot;interesting&quot;
tests that offer some additional coverage.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2164115</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-09-25 06:05:37 -0400</bug_when>
    <thetext>I&apos;ve pushed copyright updates via commit 8a3b59860042c242d4e16ee3f50746d591d948f0.

Closing as advised.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2164298</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-09-25 13:00:16 -0400</bug_when>
    <thetext>During work on bug 388800 and bug 388954 I found a test case where this analysis is over-eager:

  public abstract class StringList implements Collection&lt;String&gt; { }
  
Currently yields:

  The default method isEmpty() inherited from Iterable&lt;String&gt; conflicts with another method inherited from Collection&lt;String&gt;

Several test cases in GenericTypeTest are affected by this problem.

Needs further investigation.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2166474</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-10-02 02:13:56 -0400</bug_when>
    <thetext>(In reply to comment #6)
&gt; During work on bug 388800 and bug 388954 I found a test case where this
&gt; analysis is over-eager:
&gt; 
&gt;   public abstract class StringList implements Collection&lt;String&gt; { }
&gt;   
&gt; Currently yields:
&gt; 
&gt;   The default method isEmpty() inherited from Iterable&lt;String&gt; conflicts
&gt; with another method inherited from Collection&lt;String&gt;
&gt; 
&gt; Several test cases in GenericTypeTest are affected by this problem.
&gt; 
&gt; Needs further investigation.

With the fix for https://bugs.eclipse.org/bugs/show_bug.cgi?id=390761,
I am getting 0 errors against JDK8b56. I think this error you cite should
be covered by the same fix and so this can be closed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2166642</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-10-02 07:23:00 -0400</bug_when>
    <thetext>Closing this bug as the issue stands resolved.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2169187</commentid>
    <comment_count>9</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-10-08 17:57:41 -0400</bug_when>
    <thetext>On cleaning up my workspace with stale WIP for this bug I
- released two more (simple) tests (commit 8c030d505f30b0cafedd9f4204a10256b97739b1)
  both are now green indeed.
- filed bug 391376 as a follow-up</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>220639</attachid>
            <date>2012-09-02 17:25:00 -0400</date>
            <delta_ts>2012-09-02 17:25:08 -0400</delta_ts>
            <desc>WIP: tests &amp; fix</desc>
            <filename>clipboard.txt</filename>
            <type>text/plain</type>
            <size>9709</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0RlZmF1bHRNZXRob2Rz
VGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vRGVmYXVsdE1ldGhvZHNU
ZXN0LmphdmEKaW5kZXggM2EzNWVkYi4uZmE5N2FiMCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Nv
bXBpbGVyL3JlZ3Jlc3Npb24vRGVmYXVsdE1ldGhvZHNUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3Rz
L2NvbXBpbGVyL3JlZ3Jlc3Npb24vRGVmYXVsdE1ldGhvZHNUZXN0LmphdmEKQEAgLTIzLDcgKzIz
LDcgQEAKIC8vIFN0YXRpYyBpbml0aWFsaXplciB0byBzcGVjaWZ5IHRlc3RzIHN1YnNldCB1c2lu
ZyBURVNUU18qIHN0YXRpYyB2YXJpYWJsZXMKIC8vIEFsbCBzcGVjaWZpZWQgdGVzdHMgd2hpY2gg
ZG8gbm90IGJlbG9uZyB0byB0aGUgY2xhc3MgYXJlIHNraXBwZWQuLi4KIAlzdGF0aWMgewotLy8J
CQlURVNUU19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7ICJ0ZXN0T2JqZWN0TWV0aG9kIiB9OworCQkJ
VEVTVFNfTkFNRVMgPSBuZXcgU3RyaW5nW10geyAidGVzdEluaGVyaXRlZERlZmF1bHRPdmVycmlk
ZXMiIH07CiAvLwkJCVRFU1RTX05VTUJFUlMgPSBuZXcgaW50W10geyA1NjEgfTsKIC8vCQkJVEVT
VFNfUkFOR0UgPSBuZXcgaW50W10geyAxLCAyMDQ5IH07CiAJfQpAQCAtMjk3LDQgKzI5NywxMjgg
QEAKIAkJCSJDYW5ub3Qgb3ZlcnJpZGUgdGhlIGZpbmFsIG1ldGhvZCBmcm9tIE9iamVjdFxuIiAr
IAogCQkJIi0tLS0tLS0tLS1cbiIpOwogCX0KKworCS8vIEpMUyA5LjQuMQorCS8vIEJ1ZyAzODIz
NDcgLSBbMS44XVtjb21waWxlcl0gQ29tcGlsZXIgYWNjZXB0cyBpbmNvcnJlY3QgZGVmYXVsdCBt
ZXRob2QgaW5oZXJpdGFuY2UKKwkvLyBhbiBpbmhlcml0ZWQgZGVmYXVsdCBtZXRob2RzIGNsYXNo
ZXMgd2l0aCBhbm90aGVyIGluaGVyaXRlZCBtZXRob2QKKwkvLyBzaW1wbGUgY2FzZQorCXB1Ymxp
YyB2b2lkIHRlc3RJbmhlcml0ZWREZWZhdWx0T3ZlcnJpZGVzMDEoKSB7CisJCXJ1bk5lZ2F0aXZl
VGVzdCgKKwkJCW5ldyBTdHJpbmdbXSB7CisJCQkJIkkxLmphdmEiLAorCQkJCSJwdWJsaWMgaW50
ZXJmYWNlIEkxIHtcbiIgKworCQkJCSIJU3RyaW5nIGZvbygpO1xuIiArCisJCQkJIn1cbiIsCisJ
CQkJIkkyLmphdmEiLAorCQkJCSJwdWJsaWMgaW50ZXJmYWNlIEkyIHtcbiIgKworCQkJCSIJU3Ry
aW5nIGZvbygpIGRlZmF1bHQgeyByZXR1cm4gXCJcIjsgfVxuIiArCisJCQkJIn1cbiIsCisJCQkJ
IkkzLmphdmEiLAorCQkJCSJwdWJsaWMgaW50ZXJmYWNlIEkzIGV4dGVuZHMgSTEsIEkyIHtcbiIg
KworCQkJCSJ9XG4iLAorCQkJfSwKKwkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkiMS4gRVJST1Ig
aW4gSTMuamF2YSAoYXQgbGluZSAxKVxuIiArIAorCQkJIglwdWJsaWMgaW50ZXJmYWNlIEkzIGV4
dGVuZHMgSTEsIEkyIHtcbiIgKyAKKwkJCSIJICAgICAgICAgICAgICAgICBeXlxuIiArIAorCQkJ
IlRoZSBkZWZhdWx0IG1ldGhvZCBmb28oKSBpbmhlcml0ZWQgZnJvbSBJMiBjb25mbGljdHMgd2l0
aCBhbm90aGVyIG1ldGhvZCBpbmhlcml0ZWQgZnJvbSB0eXBlIEkxXG4iICsKKwkJCSItLS0tLS0t
LS0tXG4iKTsKKwl9CisJCisJLy8gSkxTIDkuNC4xCisJLy8gQnVnIDM4MjM0NyAtIFsxLjhdW2Nv
bXBpbGVyXSBDb21waWxlciBhY2NlcHRzIGluY29ycmVjdCBkZWZhdWx0IG1ldGhvZCBpbmhlcml0
YW5jZQorCS8vIGFuIGluaGVyaXRlZCBkZWZhdWx0IG1ldGhvZHMgY2xhc2hlcyB3aXRoIGFub3Ro
ZXIgaW5oZXJpdGVkIG1ldGhvZAorCS8vIGluZGlyZWN0IGluaGVyaXRhbmNlCisJcHVibGljIHZv
aWQgdGVzdEluaGVyaXRlZERlZmF1bHRPdmVycmlkZXMwMigpIHsKKwkJcnVuTmVnYXRpdmVUZXN0
KAorCQkJbmV3IFN0cmluZ1tdIHsKKwkJCQkiSTEuamF2YSIsCisJCQkJInB1YmxpYyBpbnRlcmZh
Y2UgSTEge1xuIiArCisJCQkJIglTdHJpbmcgZm9vKCk7XG4iICsKKwkJCQkifVxuIiwKKwkJCQki
STIuamF2YSIsCisJCQkJInB1YmxpYyBpbnRlcmZhY2UgSTIge1xuIiArCisJCQkJIglTdHJpbmcg
Zm9vKCkgZGVmYXVsdCB7IHJldHVybiBcIlwiOyB9XG4iICsKKwkJCQkifVxuIiwKKwkJCQkiSTFB
LmphdmEiLAorCQkJCSJwdWJsaWMgaW50ZXJmYWNlIEkxQSBleHRlbmRzIEkxIHtcbiIgKworCQkJ
CSJ9XG4iLAorCQkJCSJJMkEuamF2YSIsCisJCQkJInB1YmxpYyBpbnRlcmZhY2UgSTJBIGV4dGVu
ZHMgSTIge1xuIiArCisJCQkJIn1cbiIsCisJCQkJIkkzLmphdmEiLAorCQkJCSJwdWJsaWMgaW50
ZXJmYWNlIEkzIGV4dGVuZHMgSTFBLCBJMkEge1xuIiArCisJCQkJIn1cbiIsCisJCQl9LAorCQkJ
Ii0tLS0tLS0tLS1cbiIgKyAKKwkJCSIxLiBFUlJPUiBpbiBJMy5qYXZhIChhdCBsaW5lIDEpXG4i
ICsgCisJCQkiCXB1YmxpYyBpbnRlcmZhY2UgSTMgZXh0ZW5kcyBJMUEsIEkyQSB7XG4iICsgCisJ
CQkiCSAgICAgICAgICAgICAgICAgXl5cbiIgKyAKKwkJCSJUaGUgZGVmYXVsdCBtZXRob2QgZm9v
KCkgaW5oZXJpdGVkIGZyb20gSTIgY29uZmxpY3RzIHdpdGggYW5vdGhlciBtZXRob2QgaW5oZXJp
dGVkIGZyb20gdHlwZSBJMVxuIiArCisJCQkiLS0tLS0tLS0tLVxuIik7CisJfQorCisJLy8gSkxT
IDkuNC4xCisJLy8gQnVnIDM4MjM0NyAtIFsxLjhdW2NvbXBpbGVyXSBDb21waWxlciBhY2NlcHRz
IGluY29ycmVjdCBkZWZhdWx0IG1ldGhvZCBpbmhlcml0YW5jZQorCS8vIFBhcmFtZXRlcml6ZWQg
Y2FzZSBpcyBhbHJlYWR5IHJlcG9ydGVkIGFzIGEgY2xhc2gKKwlwdWJsaWMgdm9pZCB0ZXN0SW5o
ZXJpdGVkRGVmYXVsdE92ZXJyaWRlczAzKCkgeworCQlydW5OZWdhdGl2ZVRlc3QoCisJCQluZXcg
U3RyaW5nW10geworCQkJCSJJMS5qYXZhIiwKKwkJCQkiaW1wb3J0IGphdmEudXRpbC5MaXN0O1xu
IiArCisJCQkJInB1YmxpYyBpbnRlcmZhY2UgSTEge1xuIiArCisJCQkJIglTdHJpbmcgZm9vKExp
c3Q8U3RyaW5nPiBsKTtcbiIgKworCQkJCSJ9XG4iLAorCQkJCSJJMi5qYXZhIiwKKwkJCQkiaW1w
b3J0IGphdmEudXRpbC5MaXN0O1xuIiArCisJCQkJInB1YmxpYyBpbnRlcmZhY2UgSTIge1xuIiAr
CisJCQkJIiAgIEBTdXBwcmVzc1dhcm5pbmdzKFwicmF3dHlwZXNcIilcbiIgKworCQkJCSIJU3Ry
aW5nIGZvbyhMaXN0IGwpIGRlZmF1bHQgeyByZXR1cm4gXCJcIjsgfVxuIiArCisJCQkJIn1cbiIs
CisJCQkJIkkzLmphdmEiLAorCQkJCSJpbXBvcnQgamF2YS51dGlsLkxpc3Q7XG4iICsKKwkJCQki
cHVibGljIGludGVyZmFjZSBJMyBleHRlbmRzIEkxLCBJMiB7XG4iICsKKwkJCQkiICAgQE92ZXJy
aWRlXG4iICsKKwkJCQkiICAgU3RyaW5nIGZvbyhMaXN0PFN0cmluZz4gbCk7XG4iICsKKwkJCQki
fVxuIiwKKwkJCX0sCisJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJIjEuIEVSUk9SIGluIEkzLmph
dmEgKGF0IGxpbmUgNClcbiIgKyAKKwkJCSIJU3RyaW5nIGZvbyhMaXN0PFN0cmluZz4gbCk7XG4i
ICsgCisJCQkiCSAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCQkiTmFtZSBjbGFz
aDogVGhlIG1ldGhvZCBmb28oTGlzdDxTdHJpbmc+KSBvZiB0eXBlIEkzIGhhcyB0aGUgc2FtZSBl
cmFzdXJlIGFzIGZvbyhMaXN0KSBvZiB0eXBlIEkyIGJ1dCBkb2VzIG5vdCBvdmVycmlkZSBpdFxu
IiArIAorCQkJIi0tLS0tLS0tLS1cbiIpOworCX0KKworCS8vIEpMUyA5LjQuMQorCS8vIEJ1ZyAz
ODIzNDcgLSBbMS44XVtjb21waWxlcl0gQ29tcGlsZXIgYWNjZXB0cyBpbmNvcnJlY3QgZGVmYXVs
dCBtZXRob2QgaW5oZXJpdGFuY2UKKwkvLyBQYXJhbWV0ZXJpemVkIGNhc2UgaXMgYWxyZWFkeSBy
ZXBvcnRlZCBhcyBhIGNsYXNoIC0gaW52ZXJzZSBjYXNlIG9mIHByZXZpb3VzCisJcHVibGljIHZv
aWQgdGVzdEluaGVyaXRlZERlZmF1bHRPdmVycmlkZXMwNCgpIHsKKwkJcnVuTmVnYXRpdmVUZXN0
KAorCQkJbmV3IFN0cmluZ1tdIHsKKwkJCQkiSTEuamF2YSIsCisJCQkJImltcG9ydCBqYXZhLnV0
aWwuTGlzdDtcbiIgKworCQkJCSJwdWJsaWMgaW50ZXJmYWNlIEkxIHtcbiIgKworCQkJCSIJU3Ry
aW5nIGZvbyhMaXN0PFN0cmluZz4gbCkgZGVmYXVsdCB7IHJldHVybiBcIlwiOyB9XG4iICsKKwkJ
CQkifVxuIiwKKwkJCQkiSTIuamF2YSIsCisJCQkJImltcG9ydCBqYXZhLnV0aWwuTGlzdDtcbiIg
KworCQkJCSJwdWJsaWMgaW50ZXJmYWNlIEkyIHtcbiIgKworCQkJCSIgICBAU3VwcHJlc3NXYXJu
aW5ncyhcInJhd3R5cGVzXCIpXG4iICsKKwkJCQkiCVN0cmluZyBmb28oTGlzdCBsKTtcbiIgKwor
CQkJCSJ9XG4iLAorCQkJCSJJMy5qYXZhIiwKKwkJCQkiaW1wb3J0IGphdmEudXRpbC5MaXN0O1xu
IiArCisJCQkJInB1YmxpYyBpbnRlcmZhY2UgSTMgZXh0ZW5kcyBJMSwgSTIge1xuIiArCisJCQkJ
IiAgIEBPdmVycmlkZVxuIiArCisJCQkJIiAgIFN0cmluZyBmb28oTGlzdDxTdHJpbmc+IGwpO1xu
IiArCisJCQkJIn1cbiIsCisJCQl9LAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCSIxLiBFUlJP
UiBpbiBJMy5qYXZhIChhdCBsaW5lIDQpXG4iICsgCisJCQkiCVN0cmluZyBmb28oTGlzdDxTdHJp
bmc+IGwpO1xuIiArIAorCQkJIgkgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkJ
Ik5hbWUgY2xhc2g6IFRoZSBtZXRob2QgZm9vKExpc3Q8U3RyaW5nPikgb2YgdHlwZSBJMyBoYXMg
dGhlIHNhbWUgZXJhc3VyZSBhcyBmb28oTGlzdCkgb2YgdHlwZSBJMiBidXQgZG9lcyBub3Qgb3Zl
cnJpZGUgaXRcbiIgKyAKKwkJCSItLS0tLS0tLS0tXG4iKTsKKwl9CiB9CmRpZmYgLS1naXQgYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvY29yZS9jb21waWxl
ci9JUHJvYmxlbS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2NvcmUvY29tcGlsZXIvSVByb2JsZW0uamF2YQppbmRleCA4NTU2MzcwLi40ZTBlNWQx
IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvY29yZS9jb21waWxlci9JUHJvYmxlbS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9jb3JlL2NvbXBpbGVyL0lQcm9ibGVtLmphdmEKQEAg
LTE1NTAsNiArMTU1MCw5IEBACiAKIAkvKiogQHNpbmNlIDMuOSAqLwogCWludCBEZWZhdWx0TWV0
aG9kT3ZlcnJpZGVzT2JqZWN0TWV0aG9kID0gTWV0aG9kUmVsYXRlZCArIDEwNTE7CisJCisJLyoq
IEBzaW5jZSAzLjkgKi8KKwlpbnQgSW5oZXJpdGVkRGVmYXVsdE1ldGhvZENvbmZsaWN0c1dpdGhP
dGhlckluaGVyaXRlZCA9IE1ldGhvZFJlbGF0ZWQgKyAxMDUyOwogCiAJLyoqCiAJICogRXh0ZXJu
YWwgcHJvYmxlbXMgLS0gVGhlc2UgYXJlIHByb2JsZW1zIGRlZmluZWQgYnkgb3RoZXIgcGx1Z2lu
cwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9NZXRob2RWZXJpZmllci5qYXZhIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2xvb2t1cC9NZXRob2RWZXJpZmllci5qYXZhCmluZGV4IDQ1NTFmNjUuLjkxNmMyZWYgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9sb29rdXAvTWV0aG9kVmVyaWZpZXIuamF2YQorKysgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9v
a3VwL01ldGhvZFZlcmlmaWVyLmphdmEKQEAgLTM5NCw2ICszOTQsOCBAQAogCQkJfQogCQl9IGVs
c2UgaWYgKG5vTWF0Y2gpIHsKIAkJCXByb2JsZW1SZXBvcnRlcigpLmluaGVyaXRlZE1ldGhvZHNI
YXZlSW5jb21wYXRpYmxlUmV0dXJuVHlwZXModGhpcy50eXBlLCBtZXRob2RzLCBsZW5ndGgpOwor
CQl9IGVsc2UgaWYgKHRoaXMuZW52aXJvbm1lbnQuZ2xvYmFsT3B0aW9ucy5zb3VyY2VMZXZlbCA+
PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84KSB7CisJCQljaGVja0luaGVyaXRlZERlZmF1bHRN
ZXRob2RzKG1ldGhvZHMsIGxlbmd0aCk7CiAJCX0KIAkJcmV0dXJuOwogCX0KQEAgLTQyMSw3ICs0
MjMsMjEgQEAKIAkJU3lzdGVtLmFycmF5Y29weShhYnN0cmFjdE1ldGhvZHMsIDAsIGFic3RyYWN0
TWV0aG9kcyA9IG5ldyBNZXRob2RCaW5kaW5nW2luZGV4XSwgMCwgaW5kZXgpOwogCWNoZWNrQ29u
Y3JldGVJbmhlcml0ZWRNZXRob2QoY29uY3JldGVNZXRob2QsIGFic3RyYWN0TWV0aG9kcyk7CiB9
Ci0KK3ByaXZhdGUgdm9pZCBjaGVja0luaGVyaXRlZERlZmF1bHRNZXRob2RzKE1ldGhvZEJpbmRp
bmdbXSBtZXRob2RzLCBpbnQgbGVuZ3RoKSB7CisJLy8gSlNMIDkuNC4xIChKYXZhIDgpOiBkZWZh
dWx0IG1ldGhvZCBjbGFzaGVzIHdpdGggb3RoZXIgaW5oZXJpdGVkIG1ldGhvZCB3aGljaCBpcyBv
dmVycmlkZS1lcXVpdmFsZW50IAorCWlmIChsZW5ndGggPCAyKSByZXR1cm47CisJZmluZERlZmF1
bHRNZXRob2Q6IGZvciAoaW50IGk9MDsgaTxsZW5ndGg7IGkrKykgeworCQlpZiAobWV0aG9kc1tp
XS5pc0RlZmF1bHRNZXRob2QoKSkgeworCQkJZmluZEVxdWl2YWxlbnQ6IGZvciAoaW50IGo9MDsg
ajxsZW5ndGg7IGorKykgeworCQkJCWlmIChqID09IGkpIGNvbnRpbnVlIGZpbmRFcXVpdmFsZW50
OworCQkJCWlmIChpc01ldGhvZFN1YnNpZ25hdHVyZShtZXRob2RzW2ldLCBtZXRob2RzW2pdKSkg
eworCQkJCQlwcm9ibGVtUmVwb3J0ZXIoKS5pbmhlcml0ZWREZWZhdWx0TWV0aG9kQ29uZmxpY3Rz
V2l0aE90aGVySW5oZXJpdGVkKHRoaXMudHlwZSwgbWV0aG9kc1tpXSwgbWV0aG9kc1tqXSk7CisJ
CQkJCWNvbnRpbnVlIGZpbmREZWZhdWx0TWV0aG9kOworCQkJCX0KKwkJCX0KKwkJfQorCX0KK30K
IGJvb2xlYW4gY2hlY2tJbmhlcml0ZWRSZXR1cm5UeXBlcyhNZXRob2RCaW5kaW5nIG1ldGhvZCwg
TWV0aG9kQmluZGluZyBvdGhlck1ldGhvZCkgewogCWlmIChhcmVSZXR1cm5UeXBlc0NvbXBhdGli
bGUobWV0aG9kLCBvdGhlck1ldGhvZCkpIHJldHVybiB0cnVlOwogCmRpZmYgLS1naXQgYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvcHJvYmxlbS9Qcm9ibGVtUmVwb3J0ZXIuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL1Byb2JsZW1S
ZXBvcnRlci5qYXZhCmluZGV4IDhmOTc0YmIuLjM5MzM0ZTMgMTAwNjQ0Ci0tLSBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9w
cm9ibGVtL1Byb2JsZW1SZXBvcnRlci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL1Byb2JsZW1S
ZXBvcnRlci5qYXZhCkBAIC0zMDkyLDYgKzMwOTIsMjIgQEAKIAkJbG9jYXRpb24uc291cmNlU3Rh
cnQsCiAJCWxvY2F0aW9uLnNvdXJjZUVuZCk7CiB9CitwdWJsaWMgdm9pZCBpbmhlcml0ZWREZWZh
dWx0TWV0aG9kQ29uZmxpY3RzV2l0aE90aGVySW5oZXJpdGVkKFNvdXJjZVR5cGVCaW5kaW5nIHR5
cGUsIE1ldGhvZEJpbmRpbmcgZGVmYXVsdE1ldGhvZCwgTWV0aG9kQmluZGluZyBvdGhlck1ldGhv
ZCkgeworCVR5cGVEZWNsYXJhdGlvbiB0eXBlRGVjbCA9IHR5cGUuc2NvcGUucmVmZXJlbmNlQ29u
dGV4dDsKKwlTdHJpbmdbXSBwcm9ibGVtQXJndW1lbnRzID0gbmV3IFN0cmluZ1tdIHsgCisJCQlT
dHJpbmcudmFsdWVPZihkZWZhdWx0TWV0aG9kLnJlYWRhYmxlTmFtZSgpKSwgCisJCQlTdHJpbmcu
dmFsdWVPZihkZWZhdWx0TWV0aG9kLmRlY2xhcmluZ0NsYXNzLnJlYWRhYmxlTmFtZSgpKSwgCisJ
CQlTdHJpbmcudmFsdWVPZihvdGhlck1ldGhvZC5kZWNsYXJpbmdDbGFzcy5yZWFkYWJsZU5hbWUo
KSkgfTsKKwlTdHJpbmdbXSBtZXNzYWdlQXJndW1lbnRzID0gbmV3IFN0cmluZ1tdIHsgCisJCQlT
dHJpbmcudmFsdWVPZihkZWZhdWx0TWV0aG9kLnNob3J0UmVhZGFibGVOYW1lKCkpLCAKKwkJCVN0
cmluZy52YWx1ZU9mKGRlZmF1bHRNZXRob2QuZGVjbGFyaW5nQ2xhc3Muc2hvcnRSZWFkYWJsZU5h
bWUoKSksIAorCQkJU3RyaW5nLnZhbHVlT2Yob3RoZXJNZXRob2QuZGVjbGFyaW5nQ2xhc3Muc2hv
cnRSZWFkYWJsZU5hbWUoKSkgfTsJCisJdGhpcy5oYW5kbGUoSVByb2JsZW0uSW5oZXJpdGVkRGVm
YXVsdE1ldGhvZENvbmZsaWN0c1dpdGhPdGhlckluaGVyaXRlZCwKKwkJCXByb2JsZW1Bcmd1bWVu
dHMsCisJCQltZXNzYWdlQXJndW1lbnRzLAorCQkJdHlwZURlY2wuc291cmNlU3RhcnQsCisJCQl0
eXBlRGVjbC5zb3VyY2VFbmQpOworfQogcHJpdmF0ZSB2b2lkIGluaGVyaXRlZE1ldGhvZFJlZHVj
ZXNWaXNpYmlsaXR5KGludCBzb3VyY2VTdGFydCwgaW50IHNvdXJjZUVuZCwgTWV0aG9kQmluZGlu
ZyBjb25jcmV0ZU1ldGhvZCwgTWV0aG9kQmluZGluZ1tdIGFic3RyYWN0TWV0aG9kcykgewogCVN0
cmluZ0J1ZmZlciBjb25jcmV0ZVNpZ25hdHVyZSA9IG5ldyBTdHJpbmdCdWZmZXIoKTsKIAljb25j
cmV0ZVNpZ25hdHVyZQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vbWVzc2FnZXMucHJvcGVy
dGllcyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9wcm9ibGVtL21lc3NhZ2VzLnByb3BlcnRpZXMKaW5kZXggZDQ5YmMwOS4u
Y2M0MDFiMSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vbWVzc2FnZXMucHJvcGVydGllcwor
KysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvcHJvYmxlbS9tZXNzYWdlcy5wcm9wZXJ0aWVzCkBAIC03MTksNyArNzE5LDcg
QEAKICMgdmFyaWFudCBvZiAzNTk6IAogMTA1MCA9IElsbGVnYWwgbW9kaWZpZXIgZm9yIHRoZSBp
bnRlcmZhY2UgbWV0aG9kIHswfTsgb25seSBwdWJsaWMsIGFic3RyYWN0LCBzdHJpY3RmcCAmIHN5
bmNocm9uaXplZCBhcmUgcGVybWl0dGVkCiAxMDUxID0gQSBkZWZhdWx0IG1ldGhvZCBjYW5ub3Qg
b3ZlcnJpZGUgYSBtZXRob2QgZnJvbSBqYXZhLmxhbmcuT2JqZWN0IAotCisxMDUyID0gVGhlIGRl
ZmF1bHQgbWV0aG9kIHswfSBpbmhlcml0ZWQgZnJvbSB7MX0gY29uZmxpY3RzIHdpdGggYW5vdGhl
ciBtZXRob2QgaW5oZXJpdGVkIGZyb20gdHlwZSB7Mn0KIAogIyMjIEVMQUJPUkFUSU9OUwogIyMg
QWNjZXNzIHJlc3RyaWN0aW9ucw==
</data>

          </attachment>
      

    </bug>

</bugzilla>