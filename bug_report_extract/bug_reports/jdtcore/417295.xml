<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>417295</bug_id>
          
          <creation_ts>2013-09-16 01:04:00 -0400</creation_ts>
          <short_desc>[1.8[[null] Massage type annotated null analysis to gel well with deep encoded type bindings.</short_desc>
          <delta_ts>2013-09-29 07:22:47 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>392099</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>daniel_megert</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2307020</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-09-16 01:04:23 -0400</bug_when>
    <thetext>BETA_JAVA8:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd released on behalf of
https://bugs.eclipse.org/bugs/show_bug.cgi?id=417113 needs some tweaking/massaging
in the type annotated null analysis support. These were captured during review
of the mentioned patch and the present CR is being opened to track such tasks.

From bug 409586 comment 65:
(1) NTAT#testBinary05 demonstrates that resetting contradictory nullTagBits is currently broken. Subsequently the non-null value is detected as not conforming to &apos;@NonNull @Nullable Object&apos;.

(2) ArrayBinding.nullAnnotatedReadableName(CompilerOptions, boolean) must use nullAnnotatedReadableName(..) also for its #leafComponentType, tests will need adjustments after that.

(3) FlowAnalysisTest8#testLambda_04 is now expecting one more error, which should be reverted. Should be a simple matter of clearing bogus nullAnnotationTagBits.

(4) Error messages in testBug416175()
1.: mixing short and long names
2.: I like &quot;required \&apos;@NonNull ? extends String\&apos;&quot; better than &quot;required \&apos;@NonNull capture#\&apos;&quot; when it&apos;s clear we&apos;re not interested in compatibility of the capture itself, only in null safety.


(5) STB#resolveTypeFor(FieldBinding): Invoking copySE8AnnotationsToType before field.fillInDefaultNonNullness is problematic because we&apos;ll use field.tagBits instead of field.type.tagBits!
&apos;Accidentally&apos; this is partly fixed by VariableBinding.isNonNull() where we check both tagBits locations. But bug shows when assigning null to such field:
  @NonNullByDefault class AllAreNonNull {
	String s3 = &quot;&quot;; // leaving this uninitialized would be detected
	void test() {
		this.s3 = null; // this goes unnoticed!!!
	}
  }
Note that the corresponding method resolveTypesFor(MethodBinding) does not have this issue, because INAV.checkImplicitNullAnnotations already distinguishes 1.7- vs. 1.8+ 

(6) MethodBinding#fillInDefaultNonNullness18 is currently broken. The following two simple changes seem to fix the respective TODOs:
  this.parameters[i] = env.createAnnotatedType(parameter, new AnnotationBinding[]{env.getNonNullAnnotation()});
  this.returnType = env.createAnnotatedType(this.returnType, new AnnotationBinding[]{env.getNonNullAnnotation()});
Seeing these as marked TODO could indicate there&apos;s more to this??

[No, I didn&apos;t know env.getNonNullAnnotation() was available]

(7) BinaryTB#scanFieldForNullAnnotation had an initial stanza which served two purposes for the 1.8+ case:
- apply a @NonNullByDefault to the field&apos;s type binding
- shortcut everything else that is needed only for 1.7-

Frankly, I don&apos;t understand this change.
The first aspect may partly be covered by VariableBinding#isNonNull() which checks tagBits at the FieldBinding AND at its type, but this is probably not sufficient/safe.

[Sorry, I may have been guilty of over-pruning here and in a few other places]</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2307022</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-09-16 01:09:10 -0400</bug_when>
    <thetext>(8) If it is not too much work, rewire IProblem.NullAnnotationUnsupportedLocationAtType (and IProblem.NullAnnotationUnsupportedLocation ?) to report errors after checking
bindings and not AST. This combined with good coverage in test suite to reject
null annotations in all unsupported locations would help shake out any bugs
in the deep encoding implementation.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2307056</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-09-16 03:55:57 -0400</bug_when>
    <thetext>(9) http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd has 10 items
with the tag TODO(Stephan). Go through these to make sure all are suitably
addressed. A few may have to wait until TVB/substitution issues are fully
investigated. Many others can be cleaned up already.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2307333</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-09-16 10:35:14 -0400</bug_when>
    <thetext>(10) LE#getNullableAnnotation and its counterpart should not call new,
but should use LE#createAnnotation or LE.typeSystem.getAnnotationType.
Looks like I wrote the getNullableAnnotation and its partner, I have
no memory of it :) These routines could come in handy to synthesize
null annotations for use with getAnnotatedType.

(11) In ParameterizedTypeBinding.isEquivalentTo(TypeBinding), I have commented
out some code with the question: &quot;is this intentional ??&quot;. I felt a bit
uncomfortable with routines that implement JLS being changed. This needs to
be looked into to see what is the right thing. Can a test be constructed
that would show why this change is absolutely needed ? Is commenting out
this code the reason for the mutation of the message in NTAT#testBinary02 ?
If so, is the new message good enough that we can have this change stay
commented out (deleted)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2307770</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-09-17 07:48:11 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #1)
&gt; (8) If it is not too much work, rewire
&gt; IProblem.NullAnnotationUnsupportedLocationAtType (and
&gt; IProblem.NullAnnotationUnsupportedLocation ?) to report errors after checking
&gt; bindings and not AST. This combined with good coverage in test suite to
&gt; reject
&gt; null annotations in all unsupported locations would help shake out any bugs
&gt; in the deep encoding implementation.

Can you clarify the intention?
Are you suggesting to detect problems later in order to exercise more of
our code while running NTAT?
If so, maybe the same can be achieved by one-time tweaking of options during
test so that null annotations are not handled specially? Not sure.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2307963</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-09-17 12:48:01 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #0)
&gt; (2) ArrayBinding.nullAnnotatedReadableName(CompilerOptions, boolean) must
&gt; use nullAnnotatedReadableName(..) also for its #leafComponentType, tests
&gt; will need adjustments after that.

This is fixed the easy way via commit a170a70f9fd89b9996c94f318397ff4dca1db782</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2307964</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-09-17 12:52:19 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #0)
&gt; (1) NTAT#testBinary05 demonstrates that resetting contradictory nullTagBits
&gt; is currently broken. Subsequently the non-null value is detected as not
&gt; conforming to &apos;@NonNull @Nullable Object&apos;.

Also other items speak of wiping bogus null annotations. Bit thinking more about this I feel this would be wrong: When using TypeBinding.unannotated() we could easily remove unrelated annotations, and in the end we should probably present the original bindings with all annotations to JDT/UI.
Even wiping just the null tag bits is probably not a good idea: only if we keep all null tag bits we can recognize by inspecting instantiated PGMBs if substitution created any contradictions, which will be a first step towards solving bug 416190.
For these reasons I implemented the inverse strategy:
- annotations and even null tag bits are fully retained
- ensure that both bits set (Nullable &amp; NonNull) won&apos;t cause duplicate error
  messages. Use NAM.validNullTagBits for filtering where appropriate
- do not call TypeBinding.unannotated() after detecting an error
- to compensate for not calling unannotated() from InstanceOfExpression
  Expression.checkCastTypesCompatibility needs to use equalsEquals() in two
  locations

Additionally, I moved one block from MessageSend.analyseCode to resolveType,
because it doesn&apos;t depend on any flow information

Released via commit 25c55f5a3b95044fb71ce56ee0bb0a797b58daa1</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2307965</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-09-17 12:53:48 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #0)
&gt; (6) MethodBinding#fillInDefaultNonNullness18 is currently broken. The
&gt; following two simple changes seem to fix the respective TODOs:
&gt;   this.parameters[i] = env.createAnnotatedType(parameter, new
&gt; AnnotationBinding[]{env.getNonNullAnnotation()});
&gt;   this.returnType = env.createAnnotatedType(this.returnType, new
&gt; AnnotationBinding[]{env.getNonNullAnnotation()});
&gt; Seeing these as marked TODO could indicate there&apos;s more to this??
&gt; 
&gt; [No, I didn&apos;t know env.getNonNullAnnotation() was available]

Fixed the easy way via commit aa6078ae8b56e2dd94bf0e99bd049422ccaa24f4</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2308021</commentid>
    <comment_count>8</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-09-17 14:58:14 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #0)
&gt; (3) FlowAnalysisTest8#testLambda_04 is now expecting one more error, which
&gt; should be reverted. Should be a simple matter of clearing bogus
&gt; nullAnnotationTagBits.

Fixed in commit e3e2c6db2bd518e6c887dd95ff25a83382caa874 by avoiding to set nullAnnotationTagBits on BaseTypeBindings.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2308022</commentid>
    <comment_count>9</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-09-17 15:00:46 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #0)
&gt; (4) Error messages in testBug416175()
&gt; 1.: mixing short and long names
&gt; 2.: I like &quot;required \&apos;@NonNull ? extends String\&apos;&quot; better than &quot;required
&gt; \&apos;@NonNull capture#\&apos;&quot; when it&apos;s clear we&apos;re not interested in compatibility
&gt; of the capture itself, only in null safety.

Fixed in commit 79dfe93fb5ee8f61e6c4f3be92a2d21cce1717db :

1.: Fixed an unconditional readableName() to obey to shortNames

2.: In ProblemReporter don&apos;t blame this problem against a capture but its wildcard. May optionally want to apply the same strategy to more problems.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2308043</commentid>
    <comment_count>10</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-09-17 16:13:44 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #0)
&gt; (5) STB#resolveTypeFor(FieldBinding): Invoking copySE8AnnotationsToType
&gt; before field.fillInDefaultNonNullness is problematic because we&apos;ll use
&gt; field.tagBits instead of field.type.tagBits!
&gt; &apos;Accidentally&apos; this is partly fixed by VariableBinding.isNonNull() where we
&gt; check both tagBits locations. But bug shows when assigning null to such
&gt; field:
&gt;   @NonNullByDefault class AllAreNonNull {
&gt; 	String s3 = &quot;&quot;; // leaving this uninitialized would be detected
&gt; 	void test() {
&gt; 		this.s3 = null; // this goes unnoticed!!!
&gt; 	}
&gt;   }
&gt; Note that the corresponding method resolveTypesFor(MethodBinding) does not
&gt; have this issue, because INAV.checkImplicitNullAnnotations already
&gt; distinguishes 1.7- vs. 1.8+ 

Instead of fiddling with the order of steps I adjusted FieldBinding.fillInDefaultNonNullness to directly create an annotated type in 1.8+

Released via commit 6ca7655344cc04fd2732983b3bef96aa0f451863</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2308046</commentid>
    <comment_count>11</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-09-17 16:17:31 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #0)
&gt; (7) BinaryTB#scanFieldForNullAnnotation had an initial stanza which served
&gt; two purposes for the 1.8+ case:
&gt; - apply a @NonNullByDefault to the field&apos;s type binding
&gt; - shortcut everything else that is needed only for 1.7-
&gt; 
&gt; Frankly, I don&apos;t understand this change.
&gt; The first aspect may partly be covered by VariableBinding#isNonNull() which
&gt; checks tagBits at the FieldBinding AND at its type, but this is probably not
&gt; sufficient/safe.
&gt; 
&gt; [Sorry, I may have been guilty of over-pruning here and in a few other
&gt; places]

I added a test to witness the problem (actually a direct variant of what I added for item (5)). The test shows that restoring the deleted block fixes the problem.

Released via commit 43351a2f71910029138257aaee18da33f0b724b2

This concludes the bunch of items from comment 0.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2308090</commentid>
    <comment_count>12</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-09-17 19:28:35 -0400</bug_when>
    <thetext>Addressing test failures in NullAnnotationTests I consolidated detection of contradictory annotations:

- during Annotation#resolveType:
  - all recipients check for contradictions based on SE5 tagBits
  - no more special checking for locals

- consistently use Scope#validateNullAnnotation after resolving Annotations
  to check more illegal usages

- within ASTNode.copySE8AnnotationsToType() check whether the newbies conflict
  with any existing annotations on the type (e.g., type variable with
  declaration site null annotation).

- avoid double treatment in Argument#createBinding

Released via commit 68db0a50107f072688f40bcdb70cc1c2cadc3119

Additionally commit 7c0be3631ccaa5ae2d50fbe318ed50c01164d856 brings a refactoring suggested in bug 417113 (item (9) after renumber).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2308154</commentid>
    <comment_count>13</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-09-18 02:08:15 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #4)
&gt; (In reply to Srikanth Sankaran from comment #1)
&gt; &gt; (8) If it is not too much work, rewire
&gt; &gt; IProblem.NullAnnotationUnsupportedLocationAtType (and
&gt; &gt; IProblem.NullAnnotationUnsupportedLocation ?) to report errors after checking
&gt; &gt; bindings and not AST. This combined with good coverage in test suite to
&gt; &gt; reject
&gt; &gt; null annotations in all unsupported locations would help shake out any bugs
&gt; &gt; in the deep encoding implementation.
&gt; 
&gt; Can you clarify the intention?
&gt; Are you suggesting to detect problems later in order to exercise more of
&gt; our code while running NTAT?
&gt; If so, maybe the same can be achieved by one-time tweaking of options during
&gt; test so that null annotations are not handled specially? Not sure.

OK, let us say we see a construct:

    pkg.@NonNull Outer.@NonNull Inner oi;

If we say @NonNull annotation does not make sense on Outer and want to complain,
then we could complain looking at the AST or at the binding. My suggestion was 
to complain looking at the binding, so these tests serve as additional proof 
that the encoding works as expected. But only if it is not too much to work
to change.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2308597</commentid>
    <comment_count>14</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-09-18 19:14:47 -0400</bug_when>
    <thetext>Some failures in NullAnnotationTest where due to wrong behaviour in {Field,Method}Binding#canBeSeenBy(..). Suitable use of equalsEquals / notEquals fixes these issues. Released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=c8fa56c625729a2c5aff4c492dea2eebe9fdcef6

Another group of failures was related to open TODOs in ImplicitNullAnnotationVerifier, fixed via commit http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=841f0bfe84392d37aa864c563d3642fdef603b24

With these I&apos;m down at 1 failure in NullAnnotationTest, which is related to ConditionalExpression and whether we need an intersection type...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2308609</commentid>
    <comment_count>15</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-09-18 21:18:20 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #14)

&gt; With these I&apos;m down at 1 failure in NullAnnotationTest, which is related to
&gt; ConditionalExpression and whether we need an intersection type...

Thanks, I hope to get to my set of open issues within a week&apos;s time. Thanks
for your patience.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2308610</commentid>
    <comment_count>16</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-09-18 21:21:50 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #14)

&gt; With these I&apos;m down at 1 failure in NullAnnotationTest, which is related to
&gt; ConditionalExpression and whether we need an intersection type...

Does it make sense to disable that one test and enable the suite, so everyone
gets the benefit of testing more ? TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2308751</commentid>
    <comment_count>17</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-09-19 07:38:43 -0400</bug_when>
    <thetext>(In reply to comment #16)
&gt; (In reply to Stephan Herrmann from comment #14)
&gt; 
&gt; &gt; With these I&apos;m down at 1 failure in NullAnnotationTest, which is related to
&gt; &gt; ConditionalExpression and whether we need an intersection type...
&gt; 
&gt; Does it make sense to disable that one test and enable the suite, so everyone
&gt; gets the benefit of testing more ? TIA.

No need for tweak :) 
Simply adding one more equalsEquals in ConditionalExpression fixes that failure and brings NAT back to full success.

Released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=2070676b1e20c45846e614809eff55257373d539 are:
- the fix in ConditionalExpression for NullAnnotationTest
- a preventive improvement to use the more dangerous of two equalsEquals types
- a follow-up correction in NAM.computeNullProblemSeverity()
- re-enabling of NullAnnotationTest in 1.8 mode</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2308799</commentid>
    <comment_count>18</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-09-19 09:17:09 -0400</bug_when>
    <thetext>(In reply to comment #2)
&gt; (9)
&gt; http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=3b7e9a0f1d7c1bcba3808ca366020fd264fda3dd
&gt; has 10 items
&gt; with the tag TODO(Stephan). Go through these to make sure all are suitably
&gt; addressed. A few may have to wait until TVB/substitution issues are fully
&gt; investigated. Many others can be cleaned up already.

Some items have already been addressed by previous changes, some are covered by numbered items in this bug.
Last remaining TODO in NTAT on behalf of bug 417113 is addressed by http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=3e7114db66d7154ea4072c5af4dcd065de055bb8:

* ConditionalExpression with different annotations on valueIfTrue / False: if types are equalsEquals try harder to find the &quot;more dangerous&quot; type, otherwise: see below

New item arising from the above:

(12) lub computation if types are 
- compatible 
- but not equalsEquals 
- *and* have different null annotations 
-&gt; requires more work, see new disabled NTAT._testConditional2</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2308804</commentid>
    <comment_count>19</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-09-19 09:29:24 -0400</bug_when>
    <thetext>(In reply to comment #3)
&gt; (10) LE#getNullableAnnotation and its counterpart should not call new,
&gt; but should use LE#createAnnotation or LE.typeSystem.getAnnotationType.
&gt; Looks like I wrote the getNullableAnnotation and its partner, I have
&gt; no memory of it :) These routines could come in handy to synthesize
&gt; null annotations for use with getAnnotatedType.

Resolved via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=7bc187afbb4bb56c7b85a00c0e5a5881aabde72f

(I took the liberty to cache these two annotation bindings in LE)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2308811</commentid>
    <comment_count>20</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-09-19 09:47:29 -0400</bug_when>
    <thetext>(In reply to comment #3)
&gt; (11) In ParameterizedTypeBinding.isEquivalentTo(TypeBinding), I have commented
&gt; out some code with the question: &quot;is this intentional ??&quot;. I felt a bit
&gt; uncomfortable with routines that implement JLS being changed. This needs to
&gt; be looked into to see what is the right thing. Can a test be constructed
&gt; that would show why this change is absolutely needed ? Is commenting out
&gt; this code the reason for the mutation of the message in NTAT#testBinary02 ?
&gt; If so, is the new message good enough that we can have this change stay
&gt; commented out (deleted)

Thanks for catching this. These lines were prematurely released for bug 392384, at what time NAT had some failures in 1.8 mode, ie. null type annotation analysis was pretty much in flux, still. Much water has flown into the sea since then and today those lines would only cause harm -&gt; removed via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=0de87442117bb22923c82a3ea7fce2ce6f7d0ece</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2308815</commentid>
    <comment_count>21</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-09-19 09:52:36 -0400</bug_when>
    <thetext>Taking stock of done vs. todo the following items remain:

(In reply to Srikanth Sankaran from comment #1)
&gt; (8) If it is not too much work, rewire
&gt; IProblem.NullAnnotationUnsupportedLocationAtType (and
&gt; IProblem.NullAnnotationUnsupportedLocation ?) to report errors after checking
&gt; bindings and not AST. This combined with good coverage in test suite to
&gt; reject
&gt; null annotations in all unsupported locations would help shake out any bugs
&gt; in the deep encoding implementation.

(In reply to Stephan Herrmann from comment #18)
&gt; (12) lub computation if types are 
&gt; - compatible 
&gt; - but not equalsEquals 
&gt; - *and* have different null annotations 
&gt; -&gt; requires more work, see new disabled NTAT._testConditional2</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2309510</commentid>
    <comment_count>22</comment_count>
      <attachid>235685</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-09-21 11:54:21 -0400</bug_when>
    <thetext>Created attachment 235685
proposal for lub computation

Srikanth, here&apos;s a proposal how we could approach the lub computation involving annotated types.

I&apos;d like to hear your say before committing, because this goes in a different direction than what you have indicated in the code, maybe I misunderstood s.t.

My starting point was test NTAT.testConditional2, where a conditional expression requires computing the lub of List&lt;@NonNull String&gt; and ArrayList&lt;String&gt;.

The patch does contain a commented attempt to use an intersection type as suggested, but 
(a) this gives a *typing* error 

  Type mismatch: cannot convert from List&lt;capture#1-of ? extends String&gt; to List&lt;String&gt;

where we need a null type safety error

  Null type safety (type annotations): The expression of type &apos;List&lt;String&gt;&apos; needs unchecked conversion to conform to &apos;List&lt;@NonNull String&gt;&apos;\n

and (b) intersection type to me seems to go the wrong direction, isn&apos;t lub more like a union type than an intersection?


The patch proceeds in two steps:

In Scope.minimalErasedCandidates() I revert to using != instead of notEquals so we populate allInvocations also with mapping String-&gt;&apos;@NonNull String&apos; etc. (thus reading &quot;erased&quot; as &quot;erased and unannotated&quot;). In this vein erasedSuperTypes is populated with unannotated() types, too.

When the result of the above is fed into leastContainingTypeArgument I added special case treatment for two types that only differ in type annotations: in that case refrain from creating wildcards but simply use the unannotated variant. This is in line with reading &apos;unannotated&apos; as the union type of all annotated variants. Perhaps we should be more specific, to combine C&lt;@A T&gt; and C&lt;@A @B T&gt; into C&lt;@A T&gt;, i.e., we may have to compute the intersection of incoming annotations.

All changes are commented with some variant of TODO. 


The patch fixes this particular test and doesn&apos;t cause regressions in RunAllJava8Test, but obviously we need more tests in this area as well.

Do you have a comment?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2309526</commentid>
    <comment_count>23</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-09-21 14:44:34 -0400</bug_when>
    <thetext>(In reply to comment #22)

Apparently I tested a slightly different variant than what I posted: The given patch does cause a failure in ClassFileReaderTest_1_8.test003_classExtends(), which can be fixed by either:
- revert the change marked as &quot;// TODO unnecessary?&quot;
- add code to Scope.hasErasedCandidatesCollisions() to filter out the case
  where multiple mecs only differ in annotations.

More tests needed to decide which is better.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2309590</commentid>
    <comment_count>24</comment_count>
      <attachid>235694</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-09-22 10:15:15 -0400</bug_when>
    <thetext>Created attachment 235694
improved patch for lub computation

This is probably as good as it will get for now, some more successful tests added, no regression found.

Summarizing the revised strategy:

- the initial change is still in Scope#minimalErasedCandidates:
  + here we use != rather than notEquals to add more mappings
    naked-&gt;annotated into the allInvocations map.
  + erasedSuperTypes are recorded unannotated
  + new: when a &apos;match&apos; was found which is annotated, include the naked
    variant as a value into the allInvocations map to signal that the type
    annotations of &apos;match&apos; have not yet been checked against all input types
  As a result all returned types are naked, but allInvocations if filled with
  more mappings holding the type annotations.

- inside Scope#leastContainingInvocation we may need to perform one more step: after identifying the type/bestArgument we want to re-apply the intersection of annotations from input types.

- re-applying common type annotations requires a small change in AnnotatableTypeSystem.getAnnotatedType(TypeBinding, TypeBinding,
TypeBinding[], AnnotationBinding[]) as proposed in bug 417113 comment 43

- Scope#leastContainingTypeArgument: if two types are != and equalsEquals consider the unannotated version as the common containing type (could apply the intersection of common annotations as above, but no test found for this, yet).

- as a consequence of the above: when checking for super interface collision we now need to check if the perceived collision is due only to type annotations and avoid reporting in that case

At the end I could remove the special treatment in ConditionalExpression using NAM.moreDangerousType(). By reverting to using &quot;==&quot; instead of equalsEquals more cases go into the lub() branch, where they are now treated well :)

The causes one change in observable behavior:
Previously, a CE of the shape &apos;boolean ? @Nullable C : C&apos; would be typed as &apos;@Nullable C&apos; (due to special semantics in moreDangerousType()), which would show in error messages.
Now, the expression is *typed* as &apos;C&apos; but flow analysis *infers* it to be @Nullable.
The message is similar but reported in category NullAnnotationInferenceConflict rather than NullSpecViolation.

I&apos;ll let it rest for a couple of days before committing. Comments welcome.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2310075</commentid>
    <comment_count>25</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-09-23 22:58:41 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #24)
&gt; Created attachment 235694 [details]
&gt; improved patch for lub computation
onInferenceConflict rather than NullSpecViolation.

&gt; I&apos;ll let it rest for a couple of days before committing. Comments welcome.

Give me a few days more please. I am wondering if we should punt on the whole
issue as belonging to grey area - I don&apos;t think the spec calls for annotations
being handled one way or other for lub computation and an ostrich approach may
not be uncalled for. For null analysis, may be some special code could be
added that would look deep inspect the parts of the conditional - I don&apos;t know
how easy/clean this would be, but something to think about.

Not ruling out the proposed solution, it has its merits.

In ATS, if you want to make the change, we should use the unannotated type as 
the key consistently every where, not just in getAnnotatedType() ? Also the
cachedType must be compared with the incoming type everywhere along with
other attributes of the value element that are already being compared ? Earlier
this comparison was implied since the keys were different.

I think this change in ATS is worth making, it would likely address the
needless duplication referred to in https://bugs.eclipse.org/bugs/show_bug.cgi?id=417113#c16</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2310078</commentid>
    <comment_count>26</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-09-23 23:51:36 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #25)

&gt; Not ruling out the proposed solution, it has its merits.

On investigaing further, I can see the complications that led you to the
proposed solution. This is a tricky one, I&apos;ll study further.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2310083</commentid>
    <comment_count>27</comment_count>
      <attachid>235738</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-09-24 02:03:05 -0400</bug_when>
    <thetext>Created attachment 235738
Fix that completely bypasses lub computation.

Stephan, please take a look and see if this meet our needs. I had to remaster
the tests to match the new expected output - that is slightly different, but
IMO something we can live with.

This fix completely side steps the issue of lub computation in the presence of
type annotations. 

I think this approach is consistent with JSR308&apos;s as well as overall JLS&apos;s
mandate that the compiler should ignore (type) annotations other than to validate
their syntactical correctness and applicability via meta annotations.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2310084</commentid>
    <comment_count>28</comment_count>
      <attachid>235738</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-09-24 02:08:10 -0400</bug_when>
    <thetext>Comment on attachment 235738
Fix that completely bypasses lub computation.

On another note, it would seem all compiler subsystems except *TypeSystem
should ignore type annotations and use TypeBinding.equalsEquals and 
TypeBinding.notEquals consistently and we should keep to a minimum the use of 
the method unannotated(). I am beginning to think that anytime we see a need 
for ==/!= or unannotated(), we need to take a second (and perhaps a third) look.
That goal may turn out to be utopian, but not terribly so ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2310087</commentid>
    <comment_count>29</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-09-24 02:26:49 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #27)
&gt; Created attachment 235738 [details]
&gt; Fix that completely bypasses lub computation.

Sorry for the piecemeal updates, this fails a couple of tests:
test_nullable_field_11 and test_nullable_field_11a.

I think the expiry policy for null checked field info needs some massaging to
work well with the new solution that reaches into the conditional&apos;s arms.
Stephan, do you want to take a look ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2310261</commentid>
    <comment_count>30</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-09-24 10:04:08 -0400</bug_when>
    <thetext>Srikanth, your proposed patch is tempting by its simplicity. Nice!

From a JLS purist p.o.v. this is probably the way to go.
From a null analysis p.o.v. I don&apos;t know how to proceed from there.
Here&apos;s a mean little example:

	@NonNull String lub(List&lt;@NonNull String&gt; l1, 
			List&lt;@Nullable String&gt; l2, int i) {
		if (i &lt; 10)
			return ((i % 2 == 0) ? l1 : l2).get(i/2); // #1
		return ((i % 2 == 0) ? l2 : l1).get(i-10); // #2
	}

With your patch we&apos;re silent at #1 and at #2 we report
   Null type mismatch (type annotations): required &apos;@NonNull String&apos; but this expression has type &apos;@Nullable String&apos;

Without going into details of this asymmetry: the main question is whether or not the ConditionalExpression itself has a type that carries useful type annotations. Regarding this question
- JLS is silent
- null analysis wants intersection of type annotations
- JDT/UI *may* want the rich variant, e.g., for extracting the CE into a method and proposing a suitably annotated return type

Looking further into one possible future: having type annotations (optionally?) considered in lub computation we would be doing one step towards a universal poor-man&apos;s pluggable type system, i.e., ability to raise an optional warning if *any* type annotations don&apos;t provably match. I say &quot;poor man&apos;s&quot;, because most type systems for type annotations probably need *some* special treatment that cannot be covered by this universal scheme. But we could do initial compatibility checking - optionally of course.


The JLS argument weighs heavy. As you may guess I want a better answer for null analysis. I suggest to let this rest for now (my time to work on this right now is limited). On a related note: should we include substitution in the same discussion? AFAICS in that scenario you&apos;ve gone the deep route, haven&apos;t you?


As for better test coverage I was thinking of creating a bunch of white box tests using DOM bindings, which much better let us test the exact type bindings computed by the compiler - after bug 409586 is released, that is.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2310288</commentid>
    <comment_count>31</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-09-24 10:30:58 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #30)
&gt; Srikanth, your proposed patch is tempting by its simplicity. Nice!
&gt; 
&gt; From a JLS purist p.o.v. this is probably the way to go.
&gt; From a null analysis p.o.v. I don&apos;t know how to proceed from there.
&gt; Here&apos;s a mean little example:

Sorry, my bad. IIRC, you pointed out the same/similar oversight earlier. I 
couldn&apos;t readily locate that comment though.

&gt; The JLS argument weighs heavy. As you may guess I want a better answer for
&gt; null analysis. I suggest to let this rest for now (my time to work on this
&gt; right now is limited).

OK, I plan to spend a bounded time to try and understand this scenario better.

&gt; On a related note: should we include substitution in
&gt; the same discussion? AFAICS in that scenario you&apos;ve gone the deep route,
&gt; haven&apos;t you?

Yes, but that is fully warranted, even though the JLS may not call it out
expressly. If annotations on type arguments of a parameterized type do not
participate in substitution, they are worthless. 

&gt; As for better test coverage I was thinking of creating a bunch of white box
&gt; tests using DOM bindings, which much better let us test the exact type
&gt; bindings computed by the compiler - after bug 409586 is released, that is.

Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2312103</commentid>
    <comment_count>32</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-09-29 07:22:47 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #21)
&gt; Taking stock of done vs. todo the following items remain:
&gt; 
&gt; (In reply to Srikanth Sankaran from comment #1)
&gt; &gt; (8) If it is not too much work, rewire
&gt; &gt; IProblem.NullAnnotationUnsupportedLocationAtType (and
&gt; &gt; IProblem.NullAnnotationUnsupportedLocation ?) to report errors after checking
&gt; &gt; bindings and not AST. This combined with good coverage in test suite to
&gt; &gt; reject
&gt; &gt; null annotations in all unsupported locations would help shake out any bugs
&gt; &gt; in the deep encoding implementation.

Thanks to Jay, there is excellent coverage via TypeBindingTests308.
I think we can tag this items as done. We have further tests coming
in for APT TypeMirrors too.


&gt; (In reply to Stephan Herrmann from comment #18)
&gt; &gt; (12) lub computation if types are 
&gt; &gt; - compatible 
&gt; &gt; - but not equalsEquals 
&gt; &gt; - *and* have different null annotations 
&gt; &gt; -&gt; requires more work, see new disabled NTAT._testConditional2

Let us handle this in https://bugs.eclipse.org/bugs/show_bug.cgi?id=417113.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>235685</attachid>
            <date>2013-09-21 11:54:00 -0400</date>
            <delta_ts>2013-09-22 10:15:15 -0400</delta_ts>
            <desc>proposal for lub computation</desc>
            <filename>WIP-on-Bug-417295--18null-Massage-type-annotated-nul.patch</filename>
            <type>text/plain</type>
            <size>6272</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxUeXBlQW5ub3Rh
dGlvblRlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9v
cmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxUeXBlQW5u
b3RhdGlvblRlc3QuamF2YQppbmRleCA0MDk3MmRkLi43OWUyNDU5IDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OdWxsVHlwZUFubm90YXRpb25UZXN0LmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pk
dC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbFR5cGVBbm5vdGF0aW9uVGVzdC5q
YXZhCkBAIC0xNDgzLDcgKzE0ODMsNyBAQAogCQkJIi0tLS0tLS0tLS1cbiIpOwogCX0KIAotCXB1
YmxpYyB2b2lkIF90ZXN0Q29uZGl0aW9uYWwyKCkgeworCXB1YmxpYyB2b2lkIHRlc3RDb25kaXRp
b25hbDIoKSB7CiAJCXJ1bk5lZ2F0aXZlVGVzdFdpdGhMaWJzKAogCQkJbmV3IFN0cmluZ1tdIHsK
IAkJCQkiWC5qYXZhIiwKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YSBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9sb29rdXAvU2NvcGUuamF2YQppbmRleCBlM2NkMDJjLi4wNzk0YmRlIDEwMDY0NAotLS0g
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZh
CkBAIC0zMzg5LDcgKzMzODksMTcgQEAKIAkJbWVjID0gbWVjLmxlYWZDb21wb25lbnRUeXBlKCk7
CiAKIAkJaW50IGFyZ0xlbmd0aCA9IG1lYy50eXBlVmFyaWFibGVzKCkubGVuZ3RoOwotCQlpZiAo
YXJnTGVuZ3RoID09IDApIHJldHVybiBtZWM7IC8vIHNob3VsZCBiZSBjYXVnaHQgYnkgbm8gaW52
b2NhdGlvbiBjaGVjaworCQlpZiAoYXJnTGVuZ3RoID09IDApIHsKKy8vIFRPRE86IGRvIHdlIHBy
ZWZlciBpbnRlcnNlY3Rpb24gdHlwZXM/CisvLwkJCWludCBsZW4gPSBpbnZvY2F0aW9ucy5sZW5n
dGg7CisvLwkJCWZvciAoaW50IGkgPSAwOyBpIDwgbGVuOyBpKyspCisvLwkJCQlmb3IgKGludCBq
ID0gaSsxOyBqIDwgbGVuOyBqKyspCisvLwkJCQkJaWYgKFR5cGVCaW5kaW5nLm5vdEVxdWFscyhp
bnZvY2F0aW9uc1tpXSwgaW52b2NhdGlvbnNbal0pKQorCQkJCQkJcmV0dXJuIG1lYzsgLy8gc2hv
dWxkIGJlIGNhdWdodCBieSBubyBpbnZvY2F0aW9uIGNoZWNrCisvLwkJCVJlZmVyZW5jZUJpbmRp
bmdbXSBpbnZvY2F0aW9uUmVmcyA9IG5ldyBSZWZlcmVuY2VCaW5kaW5nW2xlbl07CisvLwkJCVN5
c3RlbS5hcnJheWNvcHkoaW52b2NhdGlvbnMsIDAsIGludm9jYXRpb25SZWZzLCAwLCBsZW4pOwor
Ly8JCQlyZXR1cm4gbmV3IEludGVyc2VjdGlvbkNhc3RUeXBlQmluZGluZyhpbnZvY2F0aW9uUmVm
cywgdGhpcy5lbnZpcm9ubWVudCgpKTsKKwkJfQogCiAJCS8vIGluZmVyIHByb3BlciBwYXJhbWV0
ZXJpemVkIHR5cGUgZnJvbSBpbnZvY2F0aW9ucwogCQlUeXBlQmluZGluZ1tdIGJlc3RBcmd1bWVu
dHMgPSBuZXcgVHlwZUJpbmRpbmdbYXJnTGVuZ3RoXTsKQEAgLTM0MjQsNiArMzQzNCw4IEBACiAJ
cHJpdmF0ZSBUeXBlQmluZGluZyBsZWFzdENvbnRhaW5pbmdUeXBlQXJndW1lbnQoVHlwZUJpbmRp
bmcgdSwgVHlwZUJpbmRpbmcgdiwgUmVmZXJlbmNlQmluZGluZyBnZW5lcmljVHlwZSwgaW50IHJh
bmssIEFycmF5TGlzdCBsdWJTdGFjaykgewogCQlpZiAodSA9PSBudWxsKSByZXR1cm4gdjsKIAkJ
aWYgKHUgPT0gdikgcmV0dXJuIHU7CisJCWlmIChUeXBlQmluZGluZy5lcXVhbHNFcXVhbHModSwg
dikpCisJCQlyZXR1cm4gdS51bmFubm90YXRlZCgpOyAvLyBUT0RPIHRoaXMgdmFyaWFudCB0cmVh
dHMgdGhlIHVuYW5ub3RhdGVkIHR5cGUgYXMgY29udGFpbmluZyBhbGwgYW5ub3RhdGVkIHZhcmlh
bnRzCiAJCWlmICh2LmlzV2lsZGNhcmQoKSkgewogCQkJV2lsZGNhcmRCaW5kaW5nIHdpbGRWID0g
KFdpbGRjYXJkQmluZGluZykgdjsKIAkJCWlmICh1LmlzV2lsZGNhcmQoKSkgewpAQCAtMzY0MSwx
MCArMzY1MywxMCBAQAogCQkJCWZpcnN0RXJhc3VyZSA9IGZpcnN0VHlwZS5lcmFzdXJlKCk7CiAJ
CQkJYnJlYWs7CiAJCQlkZWZhdWx0IDoKLQkJCQlmaXJzdEVyYXN1cmUgPSBmaXJzdFR5cGU7CisJ
CQkJZmlyc3RFcmFzdXJlID0gZmlyc3RUeXBlLnVuYW5ub3RhdGVkKCk7IC8vIFRPRE8gdW5uZWNl
c3Nhcnk/CiAJCQkJYnJlYWs7CiAJCX0KLQkJaWYgKFR5cGVCaW5kaW5nLm5vdEVxdWFscyhmaXJz
dEVyYXN1cmUsIGZpcnN0VHlwZSkpIHsKKwkJaWYgKGZpcnN0RXJhc3VyZSAhPSBmaXJzdFR5cGUp
IHsgLy8gVE9ETyBub3RFcXVhbHM/CiAJCQlhbGxJbnZvY2F0aW9ucy5wdXQoZmlyc3RFcmFzdXJl
LCBmaXJzdFR5cGUpOwogCQl9CiAJCXR5cGVzVG9WaXNpdC5hZGQoZmlyc3RUeXBlKTsKQEAgLTM3
MDQsNyArMzcxNiw3IEBACiAJCQkJCQl0eXBlc1RvVmlzaXQuYWRkKHN1cGVyVHlwZSk7CiAJCQkJ
CQltYXgrKzsKIAkJCQkJCVR5cGVCaW5kaW5nIHN1cGVyVHlwZUVyYXN1cmUgPSAoZmlyc3RCb3Vu
ZC5pc1R5cGVWYXJpYWJsZSgpIHx8IGZpcnN0Qm91bmQuaXNXaWxkY2FyZCgpIC8qJiYgIWl0c0lu
dGVyZmFjZS5pc0NhcHR1cmUoKSovKSA/IHN1cGVyVHlwZSA6IHN1cGVyVHlwZS5lcmFzdXJlKCk7
Ci0JCQkJCQlpZiAoVHlwZUJpbmRpbmcubm90RXF1YWxzKHN1cGVyVHlwZUVyYXN1cmUsIHN1cGVy
VHlwZSkpIHsKKwkJCQkJCWlmIChzdXBlclR5cGVFcmFzdXJlICE9IHN1cGVyVHlwZSkgeyAgLy8g
VE9ETyBub3RFcXVhbHM/CiAJCQkJCQkJYWxsSW52b2NhdGlvbnMucHV0KHN1cGVyVHlwZUVyYXN1
cmUsIHN1cGVyVHlwZSk7CiAJCQkJCQl9CiAJCQkJCX0KQEAgLTM3MjEsNyArMzczMyw3IEBACiAJ
CQkJCQl0eXBlc1RvVmlzaXQuYWRkKHN1cGVyVHlwZSk7CiAJCQkJCQltYXgrKzsKIAkJCQkJCVR5
cGVCaW5kaW5nIHN1cGVyVHlwZUVyYXN1cmUgPSAoaXRzSW50ZXJmYWNlLmlzVHlwZVZhcmlhYmxl
KCkgfHwgaXRzSW50ZXJmYWNlLmlzV2lsZGNhcmQoKSAvKiYmICFpdHNJbnRlcmZhY2UuaXNDYXB0
dXJlKCkqLykgPyBzdXBlclR5cGUgOiBzdXBlclR5cGUuZXJhc3VyZSgpOwotCQkJCQkJaWYgKFR5
cGVCaW5kaW5nLm5vdEVxdWFscyhzdXBlclR5cGVFcmFzdXJlLCBzdXBlclR5cGUpKSB7CisJCQkJ
CQlpZiAoc3VwZXJUeXBlRXJhc3VyZSAhPSBzdXBlclR5cGUpIHsgLy8gVE9ETyBub3RFcXVhbHM/
CiAJCQkJCQkJYWxsSW52b2NhdGlvbnMucHV0KHN1cGVyVHlwZUVyYXN1cmUsIHN1cGVyVHlwZSk7
CiAJCQkJCQl9CiAJCQkJCX0KQEAgLTM3MzQsNyArMzc0Niw3IEBACiAJCQkJCXR5cGVzVG9WaXNp
dC5hZGQoc3VwZXJUeXBlKTsKIAkJCQkJbWF4Kys7CiAJCQkJCVR5cGVCaW5kaW5nIHN1cGVyVHlw
ZUVyYXN1cmUgPSAoaXRzU3VwZXJjbGFzcy5pc1R5cGVWYXJpYWJsZSgpIHx8IGl0c1N1cGVyY2xh
c3MuaXNXaWxkY2FyZCgpIC8qJiYgIWl0c1N1cGVyY2xhc3MuaXNDYXB0dXJlKCkqLykgPyBzdXBl
clR5cGUgOiBzdXBlclR5cGUuZXJhc3VyZSgpOwotCQkJCQlpZiAoVHlwZUJpbmRpbmcubm90RXF1
YWxzKHN1cGVyVHlwZUVyYXN1cmUsIHN1cGVyVHlwZSkpIHsKKwkJCQkJaWYgKHN1cGVyVHlwZUVy
YXN1cmUgIT0gc3VwZXJUeXBlKSB7IC8vIFRPRE8gbm90RXF1YWxzPwogCQkJCQkJYWxsSW52b2Nh
dGlvbnMucHV0KHN1cGVyVHlwZUVyYXN1cmUsIHN1cGVyVHlwZSk7CiAJCQkJCX0KIAkJCQl9CkBA
IC0zNzQ2LDcgKzM3NTgsNyBAQAogCQlmb3IgKEl0ZXJhdG9yIGl0ZXIgPSB0eXBlc1RvVmlzaXQu
aXRlcmF0b3IoKTsgaXRlci5oYXNOZXh0KCk7KSB7CiAJCQlUeXBlQmluZGluZyB0eXBlID0gKFR5
cGVCaW5kaW5nKWl0ZXIubmV4dCgpOwogCQkJbGVhZlR5cGUgPSB0eXBlLmxlYWZDb21wb25lbnRU
eXBlKCk7Ci0JCQllcmFzZWRTdXBlclR5cGVzW3JhbmsrK10gPSAobGVhZlR5cGUuaXNUeXBlVmFy
aWFibGUoKSB8fCBsZWFmVHlwZS5pc1dpbGRjYXJkKCkgLyomJiAhbGVhZlR5cGUuaXNDYXB0dXJl
KCkqLykgPyB0eXBlIDogdHlwZS5lcmFzdXJlKCk7CisJCQllcmFzZWRTdXBlclR5cGVzW3Jhbmsr
K10gPSAobGVhZlR5cGUuaXNUeXBlVmFyaWFibGUoKSB8fCBsZWFmVHlwZS5pc1dpbGRjYXJkKCkg
LyomJiAhbGVhZlR5cGUuaXNDYXB0dXJlKCkqLykgPyB0eXBlIDogdHlwZS5lcmFzdXJlKCkudW5h
bm5vdGF0ZWQoKTsKIAkJfQogCQkvLyBpbnRlcnNlY3RpbmcgZmlyc3QgdHlwZSBzdXBlcnR5cGVz
IHdpdGggb3RoZXIgdHlwZXMnIG9uZXMsIG51bGxpZnlpbmcgbm9uIG1hdGNoaW5nIHN1cGVydHlw
ZXMKIAkJaW50IHJlbWFpbmluZyA9IHN1cGVyTGVuZ3RoOwpAQCAtMzc2OCw3ICszNzgwLDcgQEAK
IAkJCQkJaWYgKGludm9jYXRpb25EYXRhID09IG51bGwpIHsKIAkJCQkJCWFsbEludm9jYXRpb25z
LnB1dChlcmFzZWRTdXBlclR5cGUsIG1hdGNoKTsgLy8gbm8gYXJyYXkgZm9yIHNpbmdsZXRvbgog
CQkJCQl9IGVsc2UgaWYgKGludm9jYXRpb25EYXRhIGluc3RhbmNlb2YgVHlwZUJpbmRpbmcpIHsK
LQkJCQkJCWlmIChUeXBlQmluZGluZy5ub3RFcXVhbHMobWF0Y2gsIChUeXBlQmluZGluZykgaW52
b2NhdGlvbkRhdGEpKSB7CisJCQkJCQlpZiAobWF0Y2ggIT0gaW52b2NhdGlvbkRhdGEpIHsgLy8g
VE9ETyBub3RFcXVhbHM/CiAJCQkJCQkJLy8gdXNpbmcgYW4gYXJyYXkgdG8gcmVjb3JkIGludm9j
YXRpb25zIGluIG9yZGVyICgxODgxMDMpCiAJCQkJCQkJVHlwZUJpbmRpbmdbXSBzb21lSW52b2Nh
dGlvbnMgPSB7IChUeXBlQmluZGluZykgaW52b2NhdGlvbkRhdGEsIG1hdGNoLCB9OwogCQkJCQkJ
CWFsbEludm9jYXRpb25zLnB1dChlcmFzZWRTdXBlclR5cGUsIHNvbWVJbnZvY2F0aW9ucyk7CkBA
IC0zNzkyLDcgKzM4MDQsNyBAQAogCQkJCVR5cGVCaW5kaW5nIGVyYXNlZFN1cGVyVHlwZSA9IGVy
YXNlZFN1cGVyVHlwZXNbal07CiAJCQkJaWYgKGVyYXNlZFN1cGVyVHlwZSA9PSBudWxsKSBjb250
aW51ZSBuZXh0U3VwZXJUeXBlOwogCQkJCVR5cGVCaW5kaW5nIG1hdGNoOwotCQkJCWlmIChlcmFz
ZWRTdXBlclR5cGUgPT0gb3RoZXJUeXBlIHx8IGVyYXNlZFN1cGVyVHlwZS5pZCA9PSBUeXBlSWRz
LlRfSmF2YUxhbmdPYmplY3QgJiYgb3RoZXJUeXBlLmlzSW50ZXJmYWNlKCkpIHsKKwkJCQlpZiAo
ZXJhc2VkU3VwZXJUeXBlID09IG90aGVyVHlwZSB8fCBlcmFzZWRTdXBlclR5cGUuaWQgPT0gVHlw
ZUlkcy5UX0phdmFMYW5nT2JqZWN0ICYmIG90aGVyVHlwZS5pc0ludGVyZmFjZSgpKSB7IC8vIFRP
RE8gZXF1YWxzRXF1YWxzPwogCQkJCQltYXRjaCA9IGVyYXNlZFN1cGVyVHlwZTsKIAkJCQl9IGVs
c2UgewogCQkJCQlpZiAoZXJhc2VkU3VwZXJUeXBlLmlzQXJyYXlUeXBlKCkpIHsKQEAgLTM4MTEs
NyArMzgyMyw3IEBACiAJCQkJaWYgKGludm9jYXRpb25EYXRhID09IG51bGwpIHsKIAkJCQkJYWxs
SW52b2NhdGlvbnMucHV0KGVyYXNlZFN1cGVyVHlwZSwgbWF0Y2gpOyAvLyBubyBhcnJheSBmb3Ig
c2luZ2xldG9uCiAJCQkJfSBlbHNlIGlmIChpbnZvY2F0aW9uRGF0YSBpbnN0YW5jZW9mIFR5cGVC
aW5kaW5nKSB7Ci0JCQkJCWlmIChUeXBlQmluZGluZy5ub3RFcXVhbHMobWF0Y2gsIChUeXBlQmlu
ZGluZykgaW52b2NhdGlvbkRhdGEpKSB7CisJCQkJCWlmIChtYXRjaCAhPSBpbnZvY2F0aW9uRGF0
YSkgeyAvLyBUT0RPIG5vdEVxdWFscz8KIAkJCQkJCS8vIHVzaW5nIGFuIGFycmF5IHRvIHJlY29y
ZCBpbnZvY2F0aW9ucyBpbiBvcmRlciAoMTg4MTAzKQogCQkJCQkJVHlwZUJpbmRpbmdbXSBzb21l
SW52b2NhdGlvbnMgPSB7IChUeXBlQmluZGluZykgaW52b2NhdGlvbkRhdGEsIG1hdGNoLCB9Owog
CQkJCQkJYWxsSW52b2NhdGlvbnMucHV0KGVyYXNlZFN1cGVyVHlwZSwgc29tZUludm9jYXRpb25z
KTs=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>235694</attachid>
            <date>2013-09-22 10:15:00 -0400</date>
            <delta_ts>2013-09-22 10:15:15 -0400</delta_ts>
            <desc>improved patch for lub computation</desc>
            <filename>WIP-on-Bug-417295--18null-Massage-type-annotated-nul.patch</filename>
            <type>text/plain</type>
            <size>21732</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxUeXBlQW5ub3Rh
dGlvblRlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9v
cmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxUeXBlQW5u
b3RhdGlvblRlc3QuamF2YQppbmRleCA0MDk3MmRkLi5lZGY4NDdjIDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OdWxsVHlwZUFubm90YXRpb25UZXN0LmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pk
dC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbFR5cGVBbm5vdGF0aW9uVGVzdC5q
YXZhCkBAIC0xNDUyLDYgKzE0NTIsOCBAQAogCQkJCSJOdWxsIHR5cGUgbWlzbWF0Y2ggKHR5cGUg
YW5ub3RhdGlvbnMpOiByZXF1aXJlZCBcJ0xpc3Q8QE51bGxhYmxlID8gZXh0ZW5kcyBYMT5cJyBi
dXQgdGhpcyBleHByZXNzaW9uIGhhcyB0eXBlIFwnQXJyYXlMaXN0PEBOb25OdWxsIFgxPlwnLCBj
b3JyZXNwb25kaW5nIHN1cGVydHlwZSBpcyBcJ0xpc3Q8QE5vbk51bGwgWDE+XCdcbiIgKyAKIAkJ
CQkiLS0tLS0tLS0tLVxuIik7CiAJfQorCisJLy8gYW5ub3RhdGlvbnMgb24gdHlwZSBwYXJhbWV0
ZXIsIHNhbWUgZ2VuZXJpYyB0eXBlCiAJcHVibGljIHZvaWQgdGVzdENvbmRpdGlvbmFsMSgpIHsK
IAkJcnVuTmVnYXRpdmVUZXN0V2l0aExpYnMoCiAJCQluZXcgU3RyaW5nW10gewpAQCAtMTQ4Myw3
ICsxNDg1LDggQEAKIAkJCSItLS0tLS0tLS0tXG4iKTsKIAl9CiAKLQlwdWJsaWMgdm9pZCBfdGVz
dENvbmRpdGlvbmFsMigpIHsKKwkvLyBhbm5vdGF0aW9ucyBvbiB0eXBlIHBhcmFtZXRlciwgZGlm
ZmVyZW50IGdlbmVyaWMgdHlwZQorCXB1YmxpYyB2b2lkIHRlc3RDb25kaXRpb25hbDIoKSB7CiAJ
CXJ1bk5lZ2F0aXZlVGVzdFdpdGhMaWJzKAogCQkJbmV3IFN0cmluZ1tdIHsKIAkJCQkiWC5qYXZh
IiwKQEAgLTE1MTQsNiArMTUxNywxNTIgQEAKIAkJCSItLS0tLS0tLS0tXG4iKTsKIAl9CiAKKwkv
LyBhbm5vdGF0aW9ucyBvbiBjb2xsZWN0aW9uIGFuZCBpdHMgdHlwZSBwYXJhbWV0ZXIKKwlwdWJs
aWMgdm9pZCB0ZXN0Q29uZGl0aW9uYWwzKCkgeworCQlydW5OZWdhdGl2ZVRlc3RXaXRoTGlicygK
KwkJCW5ldyBTdHJpbmdbXSB7CisJCQkJIkEuamF2YSIsCisJCQkJImltcG9ydCBzdGF0aWMgamF2
YS5sYW5nLmFubm90YXRpb24uRWxlbWVudFR5cGUuKjtcbiIgKworCQkJCSJpbXBvcnQgamF2YS5s
YW5nLmFubm90YXRpb24uKjtcbiIgKworCQkJCSJAUmV0ZW50aW9uKFJldGVudGlvblBvbGljeS5D
TEFTUylcbiIgKworCQkJCSJAVGFyZ2V0KHtUWVBFX1VTRX0pXG4iICsKKwkJCQkicHVibGljIEBp
bnRlcmZhY2UgQSB7XG4iICsKKwkJCQkifVxuIiwKKwkJCQkiQi5qYXZhIiwKKwkJCQkiaW1wb3J0
IHN0YXRpYyBqYXZhLmxhbmcuYW5ub3RhdGlvbi5FbGVtZW50VHlwZS4qO1xuIiArCisJCQkJImlt
cG9ydCBqYXZhLmxhbmcuYW5ub3RhdGlvbi4qO1xuIiArCisJCQkJIkBSZXRlbnRpb24oUmV0ZW50
aW9uUG9saWN5LkNMQVNTKVxuIiArCisJCQkJIkBUYXJnZXQoe1RZUEVfVVNFfSlcbiIgKworCQkJ
CSJwdWJsaWMgQGludGVyZmFjZSBCIHtcbiIgKworCQkJCSJ9XG4iLAorCQkJCSJYLmphdmEiLAor
CQkJCSJpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uKjtcbiIKKwkJCQkrICJpbXBv
cnQgamF2YS51dGlsLio7XG4iCisJCQkJKyAicHVibGljIGNsYXNzIFgge1xuIgorCQkJCSsgIglA
Tm9uTnVsbCBMaXN0PEBOb25OdWxsIFN0cmluZz4gZm9vKEBOb25OdWxsIEBCIExpc3Q8QE5vbk51
bGwgQEIgU3RyaW5nPiBnb29kLCBBcnJheUxpc3Q8U3RyaW5nPiBkdWJpb3VzLFxuIgorCQkJCSsg
IiAJCUBCIExpc3Q8QEEgQE5vbk51bGwgU3RyaW5nPiBhbG1vc3QsIEBBIEBOb25OdWxsIExpc3Q8
QE5vbk51bGwgQEIgU3RyaW5nPiBnb29kMiwgaW50IGYpIHtcbiIKKwkJCQkrICIJCWlmIChmIDwg
MilcbiIKKwkJCQkrICIJCQlyZXR1cm4gZiA9PSAwID8gZ29vZCA6IGR1YmlvdXM7XG4iCisJCQkJ
KyAiCQlpZiAoZiA8IDQpXG4iCisJCQkJKyAiCQkJcmV0dXJuIGYgPT0gMiA/IGR1YmlvdXMgOiBn
b29kO1xuIgorCQkJCSsgIgkJaWYgKGYgPCA2KVxuIgorCQkJCSsgIgkJCXJldHVybiBmID09IDQg
PyBnb29kIDogYWxtb3N0O1xuIgkJCQkKKwkJCQkrICIJCWlmIChmIDwgOClcbiIKKwkJCQkrICIJ
CQlyZXR1cm4gZiA9PSA2ID8gYWxtb3N0IDogZ29vZDtcbiIgLy8gcHJvdmlkZWQgdHlwZSBoYXMg
YSBAQiBhbm5vdGF0aW9uIHdoaWNoIGRvZXNuJ3Qgc2hvdyBpbiB0aGUgd2FybmluZworCQkJCSsg
IgkJcmV0dXJuIGYgPT0gOSA/IGdvb2QgOiBnb29kMjtcbiIgLy8gcHJvdmlkZWQgdHlwZSBoYXMg
YSBAQiBhbm5vdGF0aW9uIHdoaWNoIGRvZXNuJ3Qgc2hvdyBpbiB0aGUgd2FybmluZworCQkJCSsg
Igl9XG4iCisJCQkJKyAifVxuIgorCQkJfSwKKwkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkiMS4g
V0FSTklORyBpbiBYLmphdmEgKGF0IGxpbmUgNylcbiIgKyAKKwkJCSIJcmV0dXJuIGYgPT0gMCA/
IGdvb2QgOiBkdWJpb3VzO1xuIiArIAorCQkJIgkgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5cbiIgKyAKKwkJCSJOdWxsIHR5cGUgc2FmZXR5ICh0eXBlIGFubm90YXRpb25zKTogVGhlIGV4
cHJlc3Npb24gb2YgdHlwZSBcJ0xpc3Q8U3RyaW5nPlwnIG5lZWRzIHVuY2hlY2tlZCBjb252ZXJz
aW9uIHRvIGNvbmZvcm0gdG8gXCdATm9uTnVsbCBMaXN0PEBOb25OdWxsIFN0cmluZz5cJ1xuIiAr
IAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCSIyLiBXQVJOSU5HIGluIFguamF2YSAoYXQgbGlu
ZSA5KVxuIiArIAorCQkJIglyZXR1cm4gZiA9PSAyID8gZHViaW91cyA6IGdvb2Q7XG4iICsgCisJ
CQkiCSAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkJIk51bGwgdHlwZSBz
YWZldHkgKHR5cGUgYW5ub3RhdGlvbnMpOiBUaGUgZXhwcmVzc2lvbiBvZiB0eXBlIFwnTGlzdDxT
dHJpbmc+XCcgbmVlZHMgdW5jaGVja2VkIGNvbnZlcnNpb24gdG8gY29uZm9ybSB0byBcJ0BOb25O
dWxsIExpc3Q8QE5vbk51bGwgU3RyaW5nPlwnXG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIiArIAor
CQkJIjMuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDExKVxuIiArIAorCQkJIglyZXR1cm4g
ZiA9PSA0ID8gZ29vZCA6IGFsbW9zdDtcbiIgKyAKKwkJCSIJICAgICAgIF5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5cbiIgKyAKKwkJCSJOdWxsIHR5cGUgc2FmZXR5ICh0eXBlIGFubm90YXRpb25zKTog
VGhlIGV4cHJlc3Npb24gb2YgdHlwZSBcJ0xpc3Q8QE5vbk51bGwgU3RyaW5nPlwnIG5lZWRzIHVu
Y2hlY2tlZCBjb252ZXJzaW9uIHRvIGNvbmZvcm0gdG8gXCdATm9uTnVsbCBMaXN0PEBOb25OdWxs
IFN0cmluZz5cJ1xuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCSI0LiBXQVJOSU5HIGlu
IFguamF2YSAoYXQgbGluZSAxMylcbiIgKyAKKwkJCSIJcmV0dXJuIGYgPT0gNiA/IGFsbW9zdCA6
IGdvb2Q7XG4iICsgCisJCQkiCSAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCisJ
CQkiTnVsbCB0eXBlIHNhZmV0eSAodHlwZSBhbm5vdGF0aW9ucyk6IFRoZSBleHByZXNzaW9uIG9m
IHR5cGUgXCdMaXN0PEBOb25OdWxsIFN0cmluZz5cJyBuZWVkcyB1bmNoZWNrZWQgY29udmVyc2lv
biB0byBjb25mb3JtIHRvIFwnQE5vbk51bGwgTGlzdDxATm9uTnVsbCBTdHJpbmc+XCdcbiIgKyAK
KwkJCSItLS0tLS0tLS0tXG4iKTsKKwl9CisKKwkvLyBhbm5vdGF0aW9ucyBvbiB3aWxkY2FyZHMK
KwlwdWJsaWMgdm9pZCB0ZXN0Q29uZGl0aW9uYWw0KCkgeworCQlydW5OZWdhdGl2ZVRlc3RXaXRo
TGlicygKKwkJCW5ldyBTdHJpbmdbXSB7CisJCQkJIlguamF2YSIsCisJCQkJImltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuYW5ub3RhdGlvbi4qO1xuIgorCQkJCSsgImltcG9ydCBqYXZhLnV0aWwuKjtc
biIKKwkJCQkrICJwdWJsaWMgY2xhc3MgWCB7XG4iCisJCQkJKyAiCUBOb25OdWxsIExpc3Q8QE5v
bk51bGwgPyBleHRlbmRzIFN0cmluZz4gZm9vKEBOb25OdWxsIExpc3Q8QE5vbk51bGwgPyBleHRl
bmRzIFN0cmluZz4gZ29vZCwgQXJyYXlMaXN0PD8gZXh0ZW5kcyBTdHJpbmc+IGR1YmlvdXMsIExp
c3Q8QE5vbk51bGwgPyBleHRlbmRzIFN0cmluZz4gYWxtb3N0LCBpbnQgZikge1xuIgorCQkJCSsg
IgkJaWYgKGYgPCAyKVxuIgorCQkJCSsgIgkJCXJldHVybiBmID09IDAgPyBnb29kIDogZHViaW91
cztcbiIKKwkJCQkrICIJCWlmIChmIDwgNClcbiIKKwkJCQkrICIJCQlyZXR1cm4gZiA9PSAyID8g
ZHViaW91cyA6IGdvb2Q7XG4iCisJCQkJKyAiCQlpZiAoZiA8IDYpXG4iCisJCQkJKyAiCQkJcmV0
dXJuIGYgPT0gNCA/IGdvb2QgOiBhbG1vc3Q7XG4iCQkJCQorCQkJCSsgIgkJaWYgKGYgPCA4KVxu
IgorCQkJCSsgIgkJCXJldHVybiBmID09IDYgPyBhbG1vc3QgOiBnb29kO1xuIgorCQkJCSsgIgkJ
cmV0dXJuIGYgPT0gOSA/IGdvb2QgOiBnb29kO1xuIgorCQkJCSsgIgl9XG4iCisJCQkJKyAifVxu
IgorCQkJfSwKKwkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkiMS4gV0FSTklORyBpbiBYLmphdmEg
KGF0IGxpbmUgNilcbiIgKyAKKwkJCSIJcmV0dXJuIGYgPT0gMCA/IGdvb2QgOiBkdWJpb3VzO1xu
IiArIAorCQkJIgkgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5cbiIgKyAKKwkJCSJOdWxs
IHR5cGUgc2FmZXR5ICh0eXBlIGFubm90YXRpb25zKTogVGhlIGV4cHJlc3Npb24gb2YgdHlwZSBc
J0xpc3Q8Y2FwdHVyZSM+XCcgbmVlZHMgdW5jaGVja2VkIGNvbnZlcnNpb24gdG8gY29uZm9ybSB0
byBcJ0BOb25OdWxsIExpc3Q8QE5vbk51bGwgPyBleHRlbmRzIFN0cmluZz5cJ1xuIiArIAorCQkJ
Ii0tLS0tLS0tLS1cbiIgKyAKKwkJCSIyLiBXQVJOSU5HIGluIFguamF2YSAoYXQgbGluZSA4KVxu
IiArIAorCQkJIglyZXR1cm4gZiA9PSAyID8gZHViaW91cyA6IGdvb2Q7XG4iICsgCisJCQkiCSAg
ICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkJIk51bGwgdHlwZSBzYWZldHkg
KHR5cGUgYW5ub3RhdGlvbnMpOiBUaGUgZXhwcmVzc2lvbiBvZiB0eXBlIFwnTGlzdDxjYXB0dXJl
Iz5cJyBuZWVkcyB1bmNoZWNrZWQgY29udmVyc2lvbiB0byBjb25mb3JtIHRvIFwnQE5vbk51bGwg
TGlzdDxATm9uTnVsbCA/IGV4dGVuZHMgU3RyaW5nPlwnXG4iICsgCisJCQkiLS0tLS0tLS0tLVxu
IiArIAorCQkJIjMuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDEwKVxuIiArIAorCQkJIgly
ZXR1cm4gZiA9PSA0ID8gZ29vZCA6IGFsbW9zdDtcbiIgKyAKKwkJCSIJICAgICAgIF5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5cbiIgKyAKKwkJCSJOdWxsIHR5cGUgc2FmZXR5ICh0eXBlIGFubm90YXRp
b25zKTogVGhlIGV4cHJlc3Npb24gb2YgdHlwZSBcJ0xpc3Q8QE5vbk51bGwgY2FwdHVyZSM+XCcg
bmVlZHMgdW5jaGVja2VkIGNvbnZlcnNpb24gdG8gY29uZm9ybSB0byBcJ0BOb25OdWxsIExpc3Q8
QE5vbk51bGwgPyBleHRlbmRzIFN0cmluZz5cJ1xuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIgKyAK
KwkJCSI0LiBXQVJOSU5HIGluIFguamF2YSAoYXQgbGluZSAxMilcbiIgKyAKKwkJCSIJcmV0dXJu
IGYgPT0gNiA/IGFsbW9zdCA6IGdvb2Q7XG4iICsgCisJCQkiCSAgICAgICBeXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXG4iICsgCisJCQkiTnVsbCB0eXBlIHNhZmV0eSAodHlwZSBhbm5vdGF0aW9ucyk6
IFRoZSBleHByZXNzaW9uIG9mIHR5cGUgXCdMaXN0PEBOb25OdWxsIGNhcHR1cmUjPlwnIG5lZWRz
IHVuY2hlY2tlZCBjb252ZXJzaW9uIHRvIGNvbmZvcm0gdG8gXCdATm9uTnVsbCBMaXN0PEBOb25O
dWxsID8gZXh0ZW5kcyBTdHJpbmc+XCdcbiIgKyAKKwkJCSItLS0tLS0tLS0tXG4iKTsKKwl9CisK
KwkvLyBATnVsbGFibGUgYXQgdG9wIGxldmVsIHNob3VsZCB3aW4KKwlwdWJsaWMgdm9pZCB0ZXN0
Q29uZGl0aW9uYWw1KCkgeworCQlydW5OZWdhdGl2ZVRlc3RXaXRoTGlicygKKwkJCW5ldyBTdHJp
bmdbXSB7CisJCQkJIlguamF2YSIsCisJCQkJImltcG9ydCBvcmcuZWNsaXBzZS5qZHQuYW5ub3Rh
dGlvbi4qO1xuIgorCQkJCSsgInB1YmxpYyBjbGFzcyBYIHtcbiIKKwkJCQkrICIJQE5vbk51bGwg
T2JqZWN0IGZvbyhTdHJpbmcgZ29vZDEsIEBOb25OdWxsIFN0cmluZyBnb29kMiwgQE51bGxhYmxl
IE9iamVjdCBkdWJpb3VzLCBpbnQgZikge1xuIgorCQkJCSsgIgkJaWYgKGYgPCAyKVxuIgorCQkJ
CSsgIgkJCXJldHVybiBmID09IDAgPyBnb29kMSA6IGR1YmlvdXM7XG4iCisJCQkJKyAiCQlpZiAo
ZiA8IDQpXG4iCisJCQkJKyAiCQkJcmV0dXJuIGYgPT0gMiA/IGR1YmlvdXMgOiBnb29kMTtcbiIK
KwkJCQkrICIJCWlmIChmIDwgNilcbiIKKwkJCQkrICIJCQlyZXR1cm4gZiA9PSA0ID8gZ29vZDIg
OiBkdWJpb3VzO1xuIgorCQkJCSsgIgkJaWYgKGYgPCA4KVxuIgorCQkJCSsgIgkJCXJldHVybiBm
ID09IDYgPyBkdWJpb3VzIDogZ29vZDI7XG4iCisJCQkJKyAiCQlyZXR1cm4gdGhpcztcbiIKKwkJ
CQkrICIJfVxuIgorCQkJCSsgIn1cbiIKKwkJCX0sCisJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJ
IjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA1KVxuIiArIAorCQkJIglyZXR1cm4gZiA9PSAw
ID8gZ29vZDEgOiBkdWJpb3VzO1xuIiArIAorCQkJIgkgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXG4iICsgCisJCQkiTnVsbCB0eXBlIG1pc21hdGNoOiByZXF1aXJlZCBcJ0BOb25OdWxs
IE9iamVjdFwnIGJ1dCB0aGUgcHJvdmlkZWQgdmFsdWUgaXMgaW5mZXJyZWQgYXMgQE51bGxhYmxl
XG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJIjIuIEVSUk9SIGluIFguamF2YSAoYXQg
bGluZSA3KVxuIiArIAorCQkJIglyZXR1cm4gZiA9PSAyID8gZHViaW91cyA6IGdvb2QxO1xuIiAr
IAorCQkJIgkgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCQkiTnVsbCB0
eXBlIG1pc21hdGNoOiByZXF1aXJlZCBcJ0BOb25OdWxsIE9iamVjdFwnIGJ1dCB0aGUgcHJvdmlk
ZWQgdmFsdWUgaXMgaW5mZXJyZWQgYXMgQE51bGxhYmxlXG4iICsgCisJCQkiLS0tLS0tLS0tLVxu
IiArIAorCQkJIjMuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA5KVxuIiArIAorCQkJIglyZXR1
cm4gZiA9PSA0ID8gZ29vZDIgOiBkdWJpb3VzO1xuIiArIAorCQkJIgkgICAgICAgXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCQkiTnVsbCB0eXBlIG1pc21hdGNoOiByZXF1aXJlZCBc
J0BOb25OdWxsIE9iamVjdFwnIGJ1dCB0aGUgcHJvdmlkZWQgdmFsdWUgaXMgaW5mZXJyZWQgYXMg
QE51bGxhYmxlXG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJIjQuIEVSUk9SIGluIFgu
amF2YSAoYXQgbGluZSAxMSlcbiIgKyAKKwkJCSIJcmV0dXJuIGYgPT0gNiA/IGR1YmlvdXMgOiBn
b29kMjtcbiIgKyAKKwkJCSIJICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAor
CQkJIk51bGwgdHlwZSBtaXNtYXRjaDogcmVxdWlyZWQgXCdATm9uTnVsbCBPYmplY3RcJyBidXQg
dGhlIHByb3ZpZGVkIHZhbHVlIGlzIGluZmVycmVkIGFzIEBOdWxsYWJsZVxuIiArIAorCQkJIi0t
LS0tLS0tLS1cbiIpOworCX0KKwogCS8vIHR5cGVzIHdpdGggbnVsbCBhbm5vdGF0aW9ucyBvbiBk
ZXRhaWxzICh0eXBlIHBhcmFtZXRlcikgYXJlIGNvbXBhdGlibGUgdG8gZXF1YWwgdHlwZXMKIAlw
dWJsaWMgdm9pZCB0ZXN0Q29tcGF0aWJpbGl0eTEoKSB7CiAJCXJ1bkNvbmZvcm1UZXN0V2l0aExp
YnMoCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0NvbmRpdGlvbmFsRXhwcmVzc2lvbi5qYXZhIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FzdC9Db25kaXRpb25hbEV4cHJlc3Npb24uamF2YQppbmRleCAxZDA5ZDA3Li5mNjc4
ZTRmIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0NvbmRpdGlvbmFsRXhwcmVzc2lvbi5qYXZhCisr
KyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hc3QvQ29uZGl0aW9uYWxFeHByZXNzaW9uLmphdmEKQEAgLTUxNyw3ICs1MTcs
NyBAQAogCQkJLy8gZnJvbSB2YWx1ZUlGVHJ1ZSBvciB2YWx1ZUlmRmFsc2UgdG8gdGhlIHJlY2Vp
dmVyIGNvbnN0YW50CiAJCQl0aGlzLmNvbnN0YW50ID0gY29uZENvbnN0YW50LmJvb2xlYW5WYWx1
ZSgpID8gdHJ1ZUNvbnN0YW50IDogZmFsc2VDb25zdGFudDsKIAkJfQotCQlpZiAoVHlwZUJpbmRp
bmcuZXF1YWxzRXF1YWxzKHZhbHVlSWZUcnVlVHlwZSwgdmFsdWVJZkZhbHNlVHlwZSkpIHsgLy8g
aGFybWVkIHRoZSBpbXBsaWNpdCBjb252ZXJzaW9uCisJCWlmICh2YWx1ZUlmVHJ1ZVR5cGUgPT0g
dmFsdWVJZkZhbHNlVHlwZSkgeyAvLyBoYXJtZWQgdGhlIGltcGxpY2l0IGNvbnZlcnNpb24KIAkJ
CXRoaXMudmFsdWVJZlRydWUuY29tcHV0ZUNvbnZlcnNpb24oc2NvcGUsIHZhbHVlSWZUcnVlVHlw
ZSwgdGhpcy5vcmlnaW5hbFZhbHVlSWZUcnVlVHlwZSk7CiAJCQl0aGlzLnZhbHVlSWZGYWxzZS5j
b21wdXRlQ29udmVyc2lvbihzY29wZSwgdmFsdWVJZkZhbHNlVHlwZSwgdGhpcy5vcmlnaW5hbFZh
bHVlSWZGYWxzZVR5cGUpOwogCQkJaWYgKHZhbHVlSWZUcnVlVHlwZSA9PSBUeXBlQmluZGluZy5C
T09MRUFOKSB7CkBAIC01MzQsNyArNTM0LDcgQEAKIAkJCQkJCTogdGhpcy5vcHRpbWl6ZWRJZkZh
bHNlQ29uc3RhbnQ7CiAJCQkJfQogCQkJfQotCQkJcmV0dXJuIHRoaXMucmVzb2x2ZWRUeXBlID0g
TnVsbEFubm90YXRpb25NYXRjaGluZy5tb3JlRGFuZ2Vyb3VzVHlwZSh2YWx1ZUlmVHJ1ZVR5cGUs
IHZhbHVlSWZGYWxzZVR5cGUpOworCQkJcmV0dXJuIHRoaXMucmVzb2x2ZWRUeXBlID0gdmFsdWVJ
ZlRydWVUeXBlOwogCQl9CiAJCS8vIERldGVybWluZSB0aGUgcmV0dXJuIHR5cGUgZGVwZW5kaW5n
IG9uIGFyZ3VtZW50IHR5cGVzCiAJCS8vIE51bWVyaWMgdHlwZXMKZGlmZiAtLWdpdCBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hc3QvTnVsbEFubm90YXRpb25NYXRjaGluZy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9OdWxsQW5ub3Rh
dGlvbk1hdGNoaW5nLmphdmEKaW5kZXggNjNmMGQyMS4uNzFlODY5OCAxMDA2NDQKLS0tIGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9OdWxsQW5ub3RhdGlvbk1hdGNoaW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9OdWxs
QW5ub3RhdGlvbk1hdGNoaW5nLmphdmEKQEAgLTE2NCwyNyArMTY0LDYgQEAKIAkJYml0cyAmPSBU
YWdCaXRzLkFubm90YXRpb25OdWxsTUFTSzsKIAkJcmV0dXJuIGJpdHMgPT0gVGFnQml0cy5Bbm5v
dGF0aW9uTnVsbE1BU0sgPyAwIDogYml0czsKIAl9Ci0JCi0JLyoqIFByb3ZpZGVkIHRoYXQgYm90
aCB0eXBlcyBhcmUge0BsaW5rIFR5cGVCaW5kaW5nI2VxdWFsc0VxdWFsc30sIHJldHVybiB0aGUg
b25lIHRoYXQgaXMgbW9yZSBsaWtlbHkgdG8gc2hvdyBudWxsIGF0IHJ1bnRpbWUuICovCi0JcHVi
bGljIHN0YXRpYyBUeXBlQmluZGluZyBtb3JlRGFuZ2Vyb3VzVHlwZShUeXBlQmluZGluZyBvbmUs
IFR5cGVCaW5kaW5nIHR3bykgewotCQlpZiAob25lID09IG51bGwpIHJldHVybiBudWxsOwotCQls
b25nIG9uZU51bGxCaXRzID0gdmFsaWROdWxsVGFnQml0cyhvbmUudGFnQml0cyk7Ci0JCWxvbmcg
dHdvTnVsbEJpdHMgPSB2YWxpZE51bGxUYWdCaXRzKHR3by50YWdCaXRzKTsKLQkJaWYgKG9uZU51
bGxCaXRzICE9IHR3b051bGxCaXRzKSB7Ci0JCQlpZiAob25lTnVsbEJpdHMgPT0gVGFnQml0cy5B
bm5vdGF0aW9uTnVsbGFibGUpCi0JCQkJcmV0dXJuIG9uZTsJCQkvLyBudWxsYWJsZSBpcyBkYW5n
ZXJvdXMKLQkJCWlmICh0d29OdWxsQml0cyA9PSBUYWdCaXRzLkFubm90YXRpb25OdWxsYWJsZSkK
LQkJCQlyZXR1cm4gdHdvOwkJCS8vIG51bGxhYmxlIGlzIGRhbmdlcm91cwotCQkJLy8gYmVsb3cg
dGhpcyBwb2ludCB3ZSBoYXZlIHVua25vd24gdnMuIG5vbm51bGwsIHdoaWNoIGlzIHdoaWNoPwot
CQkJaWYgKG9uZU51bGxCaXRzID09IDApCi0JCQkJcmV0dXJuIG9uZTsJCQkvLyB1bmtub3duIGlz
IG1vcmUgZGFuZ2Vyb3VzIHRoYW4gbm9ubnVsbAotCQkJcmV0dXJuIHR3bzsJCQkJLy8gdW5rbm93
biBpcyBtb3JlIGRhbmdlcm91cyB0aGFuIG5vbm51bGwKLQkJfSBlbHNlIGlmIChvbmUgIT0gdHdv
KSB7Ci0JCQlpZiAoYW5hbHlzZShvbmUsIHR3bywgLTEpLmlzQW55TWlzbWF0Y2goKSkKLQkJCQly
ZXR1cm4gdHdvOwkJCS8vIHR3byBkb2Vzbid0IHNudWdseSBmaXQgaW50byBvbmUsIHNvIGl0IG11
c3QgYmUgbW9yZSBkYW5nZXJvdXMKLQkJfQotCQlyZXR1cm4gb25lOwotCX0KIAogCXByaXZhdGUg
c3RhdGljIGludCBjb21wdXRlTnVsbFByb2JsZW1TZXZlcml0eShsb25nIHJlcXVpcmVkQml0cywg
bG9uZyBwcm92aWRlZEJpdHMsIGludCBudWxsU3RhdHVzKSB7CiAJCWlmIChyZXF1aXJlZEJpdHMg
IT0gMCAmJiByZXF1aXJlZEJpdHMgIT0gcHJvdmlkZWRCaXRzKSB7CmRpZmYgLS1naXQgYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvbG9va3VwL0Fubm90YXRhYmxlVHlwZVN5c3RlbS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Bbm5v
dGF0YWJsZVR5cGVTeXN0ZW0uamF2YQppbmRleCBhOTIwNGFkLi5hZmFiN2RiIDEwMDY0NAotLS0g
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvbG9va3VwL0Fubm90YXRhYmxlVHlwZVN5c3RlbS5qYXZhCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9s
b29rdXAvQW5ub3RhdGFibGVUeXBlU3lzdGVtLmphdmEKQEAgLTE5OSw3ICsxOTksNyBAQAogCiAJ
Ly8gUHJpdmF0ZSBzdWJyb3V0aW5lIGZvciBnZXRBbm5vdGF0ZWRUeXBlKFR5cGVCaW5kaW5nIHR5
cGUsIEFubm90YXRpb25CaW5kaW5nW11bXSBhbm5vdGF0aW9ucykKIAlwcml2YXRlIFR5cGVCaW5k
aW5nIGdldEFubm90YXRlZFR5cGUoVHlwZUJpbmRpbmcgdHlwZSwgVHlwZUJpbmRpbmcgZW5jbG9z
aW5nVHlwZSwgVHlwZUJpbmRpbmcgW10gdHlwZUFyZ3VtZW50cywgQW5ub3RhdGlvbkJpbmRpbmdb
XSBhbm5vdGF0aW9ucykgewotCQlUeXBlQmluZGluZ1tdIGNhY2hlZEluZm8gPSAoVHlwZUJpbmRp
bmdbXSkgdGhpcy5hbm5vdGF0ZWRUeXBlcy5nZXQodHlwZSk7CisJCVR5cGVCaW5kaW5nW10gY2Fj
aGVkSW5mbyA9IChUeXBlQmluZGluZ1tdKSB0aGlzLmFubm90YXRlZFR5cGVzLmdldCh0eXBlLnVu
YW5ub3RhdGVkKCkpOwogCQlpbnQgaSA9IDA7CiAJCWlmIChjYWNoZWRJbmZvICE9IG51bGwpIHsK
IAkJCWZvciAoaW50IGxlbmd0aCA9IGNhY2hlZEluZm8ubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKysp
IHsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAv
U2NvcGUuamF2YQppbmRleCBlM2NkMDJjLi41NGZlYjFlIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9v
a3VwL1Njb3BlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhCkBAIC0zMDY3LDkg
KzMwNjcsMTcgQEAKIAkJCQlPYmplY3QgdmFsdWUgPSBpbnZvY2F0aW9ucy5nZXQobWVjKTsKIAkJ
CQlpZiAodmFsdWUgaW5zdGFuY2VvZiBUeXBlQmluZGluZ1tdKSB7CiAJCQkJCVR5cGVCaW5kaW5n
W10gaW52YWxpZEludm9jYXRpb25zID0gKFR5cGVCaW5kaW5nW10pIHZhbHVlOwotCQkJCQlwcm9i
bGVtUmVwb3J0ZXIoKS5zdXBlcmludGVyZmFjZXNDb2xsaWRlKGludmFsaWRJbnZvY2F0aW9uc1sw
XS5lcmFzdXJlKCksIHR5cGVSZWYsIGludmFsaWRJbnZvY2F0aW9uc1swXSwgaW52YWxpZEludm9j
YXRpb25zWzFdKTsKLQkJCQkJdHlwZS50YWdCaXRzIHw9IFRhZ0JpdHMuSGllcmFyY2h5SGFzUHJv
YmxlbXM7Ci0JCQkJCXJldHVybiB0cnVlOworCQkJCQlpbnQgbGVuID0gaW52YWxpZEludm9jYXRp
b25zLmxlbmd0aDsKKwkJCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW47IGkrKykgeworCQkJCQkJ
Zm9yIChpbnQgaiA9IGkrMTsgaiA8IGxlbjsgaisrKSB7CisJCQkJCQkJLy8gb25seSBjb21wbGFp
biBpZiBkaWZmZXJlbmNlcyBhcmUgbW9yZSB0aGFuIGRpZmZlcmVuY2VzIGluIGFubm90YXRpb25z
OgorCQkJCQkJCWlmIChUeXBlQmluZGluZy5ub3RFcXVhbHMoaW52YWxpZEludm9jYXRpb25zW2ld
LCBpbnZhbGlkSW52b2NhdGlvbnNbal0pKSB7CisJCQkJCQkJCXByb2JsZW1SZXBvcnRlcigpLnN1
cGVyaW50ZXJmYWNlc0NvbGxpZGUoaW52YWxpZEludm9jYXRpb25zWzBdLmVyYXN1cmUoKSwgdHlw
ZVJlZiwgaW52YWxpZEludm9jYXRpb25zWzBdLCBpbnZhbGlkSW52b2NhdGlvbnNbMV0pOworCQkJ
CQkJCQl0eXBlLnRhZ0JpdHMgfD0gVGFnQml0cy5IaWVyYXJjaHlIYXNQcm9ibGVtczsKKwkJCQkJ
CQkJcmV0dXJuIHRydWU7CisJCQkJCQkJfQorCQkJCQkJfQorCQkJCQl9CiAJCQkJfQogCQkJfQog
CQl9CkBAIC0zMzg5LDcgKzMzOTcsMTQgQEAKIAkJbWVjID0gbWVjLmxlYWZDb21wb25lbnRUeXBl
KCk7CiAKIAkJaW50IGFyZ0xlbmd0aCA9IG1lYy50eXBlVmFyaWFibGVzKCkubGVuZ3RoOwotCQlp
ZiAoYXJnTGVuZ3RoID09IDApIHJldHVybiBtZWM7IC8vIHNob3VsZCBiZSBjYXVnaHQgYnkgbm8g
aW52b2NhdGlvbiBjaGVjaworCQlpZiAoYXJnTGVuZ3RoID09IDApIHsKKwkJCWludCBsZW4gPSBp
bnZvY2F0aW9ucy5sZW5ndGg7CisJCQlmb3IgKGludCBpID0gMDsgaSA8IGxlbjsgaSsrKQorCQkJ
CWZvciAoaW50IGogPSBpKzE7IGogPCBsZW47IGorKykKKwkJCQkJaWYgKFR5cGVCaW5kaW5nLm5v
dEVxdWFscyhpbnZvY2F0aW9uc1tpXSwgaW52b2NhdGlvbnNbal0pKQorCQkJCQkJcmV0dXJuIG1l
YzsgLy8gc2hvdWxkIGJlIGNhdWdodCBieSBubyBpbnZvY2F0aW9uIGNoZWNrCisJCQlyZXR1cm4g
YXBwbHlDb21tb25UeXBlQW5ub3RhdGlvbnMobWVjLCBpbnZvY2F0aW9ucyk7CisJCX0KIAogCQkv
LyBpbmZlciBwcm9wZXIgcGFyYW1ldGVyaXplZCB0eXBlIGZyb20gaW52b2NhdGlvbnMKIAkJVHlw
ZUJpbmRpbmdbXSBiZXN0QXJndW1lbnRzID0gbmV3IFR5cGVCaW5kaW5nW2FyZ0xlbmd0aF07CkBA
IC0zNDAxLDcgKzM0MTYsNyBAQAogCQkJCQlmb3IgKGludCBqID0gMDsgaiA8IGFyZ0xlbmd0aDsg
aisrKSB7CiAJCQkJCQlUeXBlQmluZGluZyBiZXN0QXJndW1lbnQgPSBsZWFzdENvbnRhaW5pbmdU
eXBlQXJndW1lbnQoYmVzdEFyZ3VtZW50c1tqXSwgaW52b2NhdGlvblZhcmlhYmxlc1tqXSwgKFJl
ZmVyZW5jZUJpbmRpbmcpIG1lYywgaiwgKEFycmF5TGlzdClsdWJTdGFjay5jbG9uZSgpKTsKIAkJ
CQkJCWlmIChiZXN0QXJndW1lbnQgPT0gbnVsbCkgcmV0dXJuIG51bGw7Ci0JCQkJCQliZXN0QXJn
dW1lbnRzW2pdID0gYmVzdEFyZ3VtZW50OworCQkJCQkJYmVzdEFyZ3VtZW50c1tqXSA9IGFwcGx5
Q29tbW9uVHlwZUFubm90YXRpb25zKGJlc3RBcmd1bWVudCwgbmV3IFR5cGVCaW5kaW5nW117IGJl
c3RBcmd1bWVudHNbal0sIGludm9jYXRpb25WYXJpYWJsZXNbal0gfSk7CiAJCQkJCX0KIAkJCQkJ
YnJlYWs7CiAJCQkJY2FzZSBCaW5kaW5nLlBBUkFNRVRFUklaRURfVFlQRSA6CkBAIC0zNDA5LDcg
KzM0MjQsNyBAQAogCQkJCQlmb3IgKGludCBqID0gMDsgaiA8IGFyZ0xlbmd0aDsgaisrKSB7CiAJ
CQkJCQlUeXBlQmluZGluZyBiZXN0QXJndW1lbnQgPSBsZWFzdENvbnRhaW5pbmdUeXBlQXJndW1l
bnQoYmVzdEFyZ3VtZW50c1tqXSwgcGFyYW1ldGVyaXplZFR5cGUuYXJndW1lbnRzW2pdLCAoUmVm
ZXJlbmNlQmluZGluZykgbWVjLCBqLCAoQXJyYXlMaXN0KWx1YlN0YWNrLmNsb25lKCkpOwogCQkJ
CQkJaWYgKGJlc3RBcmd1bWVudCA9PSBudWxsKSByZXR1cm4gbnVsbDsKLQkJCQkJCWJlc3RBcmd1
bWVudHNbal0gPSBiZXN0QXJndW1lbnQ7CisJCQkJCQliZXN0QXJndW1lbnRzW2pdID0gYXBwbHlD
b21tb25UeXBlQW5ub3RhdGlvbnMoYmVzdEFyZ3VtZW50LCBuZXcgVHlwZUJpbmRpbmdbXXsgYmVz
dEFyZ3VtZW50c1tqXSwgcGFyYW1ldGVyaXplZFR5cGUuYXJndW1lbnRzW2pdIH0pOwogCQkJCQl9
CiAJCQkJCWJyZWFrOwogCQkJCWNhc2UgQmluZGluZy5SQVdfVFlQRSA6CkBAIC0zNDIwLDEwICsz
NDM1LDU4IEBACiAJCXJldHVybiBkaW0gPT0gMCA/IGxlYXN0IDogZW52aXJvbm1lbnQoKS5jcmVh
dGVBcnJheVR5cGUobGVhc3QsIGRpbSk7CiAJfQogCisJLyoqCisJICogRHVyaW5nIGx1YiBjb21w
dXRhdGlvbiwgd2UgZm91bmQgYSB0eXBlICd0eXBlJywgYW5kIG5vdyB3ZSB3YW50IHRvIGFwcGx5
IGFsbCB0eXBlIGFubm90YXRpb25zCisJICogdGhhdCBhcmUgc2hhcmVkIGJ5IGFsbCB0eXBlcyBp
biAnYW5ub3RhdGVkVHlwZXMnICh0b3BsZXZlbCB0eXBlIGFubm90YXRpb25zIG9ubHksIG5vIGRl
dGFpbHMpLgorCSAqLworCXByaXZhdGUgVHlwZUJpbmRpbmcgYXBwbHlDb21tb25UeXBlQW5ub3Rh
dGlvbnMoVHlwZUJpbmRpbmcgdHlwZSwgVHlwZUJpbmRpbmdbXSBhbm5vdGF0ZWRUeXBlcykgewor
CQlpbnQgdHlwZUlkeCA9IDA7CisJCWludCB0eXBlQ291bnQgPSBhbm5vdGF0ZWRUeXBlcy5sZW5n
dGg7CisJCUFubm90YXRpb25CaW5kaW5nW10gZmlyc3RBbm5vdGF0aW9ucyA9IG51bGw7CisJCXdo
aWxlICh0cnVlKSB7CisJCQlpZiAodHlwZUlkeCA+PSB0eXBlQ291bnQpIHJldHVybiB0eXBlOwor
CQkJVHlwZUJpbmRpbmcgZmlyc3RUeXBlID0gYW5ub3RhdGVkVHlwZXNbdHlwZUlkeCsrXTsKKwkJ
CWlmIChmaXJzdFR5cGUgPT0gbnVsbCkgY29udGludWU7CisJCQlmaXJzdEFubm90YXRpb25zID0g
Zmlyc3RUeXBlLnR5cGVBbm5vdGF0aW9uczsKKwkJCWJyZWFrOworCQl9CisJCWlmIChmaXJzdEFu
bm90YXRpb25zID09IG51bGwgfHwgZmlyc3RBbm5vdGF0aW9ucyA9PSBCaW5kaW5nLk5PX0FOTk9U
QVRJT05TKQorCQkJcmV0dXJuIHR5cGU7CisJCWludCBtYXggPSBmaXJzdEFubm90YXRpb25zLmxl
bmd0aDsKKwkJZm9yIChpbnQgaSA9IHR5cGVJZHg7IGkgPCB0eXBlQ291bnQ7IGkrKykgeworCQkJ
VHlwZUJpbmRpbmcgb3RoZXJUeXBlID0gYW5ub3RhdGVkVHlwZXNbdHlwZUlkeCsrXTsKKwkJCWlm
IChvdGhlclR5cGUgPT0gbnVsbCkgY29udGludWU7CisJCQlBbm5vdGF0aW9uQmluZGluZ1tdIG90
aGVyQW5ub3RhdGlvbnMgPSBvdGhlclR5cGUudHlwZUFubm90YXRpb25zOworCQkJaWYgKG90aGVy
QW5ub3RhdGlvbnMgPT0gbnVsbCB8fCBvdGhlckFubm90YXRpb25zID09IEJpbmRpbmcuTk9fQU5O
T1RBVElPTlMpCisJCQkJcmV0dXJuIHR5cGU7IC8vIGlmIGFueSB0eXBlIGhhcyBubyBhbm5vdGF0
aW9ucyB0aGVuIHdlIGhhdmUgbm8gY29tbW9uIGFubm90YXRpb25zCisJCQkvLyByZW1vdmUgZnJv
bSBmaXJzdEFubm90YXRpb25zIGFsbCB0aGF0IGFyZSBub3QgcHJlc2VudCBpbiBvdGhlckFubm90
YXRpb25zOgorCQkJbmV4dENvbW1vbjogZm9yIChpbnQgayA9IDA7IGsgPCBmaXJzdEFubm90YXRp
b25zLmxlbmd0aDsgaysrKSB7CisJCQkJaWYgKGZpcnN0QW5ub3RhdGlvbnNba10gPT0gbnVsbCkg
Y29udGludWU7CisJCQkJZm9yIChpbnQgaiA9IDA7IGogPCBvdGhlckFubm90YXRpb25zLmxlbmd0
aDsgaisrKSB7CisJCQkJCUFubm90YXRpb25CaW5kaW5nIG90aGVyQW5ub3RhdGlvbiA9IG90aGVy
QW5ub3RhdGlvbnNbal07CisJCQkJCWlmIChvdGhlckFubm90YXRpb24gPT0gZmlyc3RBbm5vdGF0
aW9uc1trXSkKKwkJCQkJCWNvbnRpbnVlIG5leHRDb21tb247CisJCQkJfQorCQkJCWZpcnN0QW5u
b3RhdGlvbnNba10gPSBudWxsOworCQkJCW1heC0tOworCQkJCWlmIChtYXggPT0gMCkKKwkJCQkJ
cmV0dXJuIHR5cGU7CisJCQl9CisJCX0KKwkJQW5ub3RhdGlvbkJpbmRpbmdbXSBjb21tb24gPSBu
ZXcgQW5ub3RhdGlvbkJpbmRpbmdbbWF4XTsKKwkJZm9yIChpbnQgaSA9IGZpcnN0QW5ub3RhdGlv
bnMubGVuZ3RoLTE7IGkgPj0gMDsgaS0tKQorCQkJaWYgKGZpcnN0QW5ub3RhdGlvbnNbaV0gIT0g
bnVsbCkKKwkJCQljb21tb25bLS1tYXhdID0gZmlyc3RBbm5vdGF0aW9uc1tpXTsKKwkJVHlwZUJp
bmRpbmcgY3JlYXRlQW5ub3RhdGVkVHlwZSA9IHRoaXMuZW52aXJvbm1lbnQoKS5jcmVhdGVBbm5v
dGF0ZWRUeXBlKHR5cGUsIG5ldyBBbm5vdGF0aW9uQmluZGluZyBbXVtdIHsgY29tbW9uIH0pOwor
CQlyZXR1cm4gY3JlYXRlQW5ub3RhdGVkVHlwZTsKKwl9CisKIAkvLyBKTFMgMTUuMTIuMgogCXBy
aXZhdGUgVHlwZUJpbmRpbmcgbGVhc3RDb250YWluaW5nVHlwZUFyZ3VtZW50KFR5cGVCaW5kaW5n
IHUsIFR5cGVCaW5kaW5nIHYsIFJlZmVyZW5jZUJpbmRpbmcgZ2VuZXJpY1R5cGUsIGludCByYW5r
LCBBcnJheUxpc3QgbHViU3RhY2spIHsKIAkJaWYgKHUgPT0gbnVsbCkgcmV0dXJuIHY7CiAJCWlm
ICh1ID09IHYpIHJldHVybiB1OworCQlpZiAoVHlwZUJpbmRpbmcuZXF1YWxzRXF1YWxzKHUsIHYp
KQorCQkJcmV0dXJuIHUudW5hbm5vdGF0ZWQoKTsgLy8gVE9ETyhzdGVwaGFuKTogY291bGQgaW1w
cm92ZSBieSBhcHBseWluZyB0aGUgaW50ZXJzZWN0aW9uIG9mIGdpdmVuIHR5cGUgYW5ub3RhdGlv
bnMsIGlmIG5lZWRlZAogCQlpZiAodi5pc1dpbGRjYXJkKCkpIHsKIAkJCVdpbGRjYXJkQmluZGlu
ZyB3aWxkViA9IChXaWxkY2FyZEJpbmRpbmcpIHY7CiAJCQlpZiAodS5pc1dpbGRjYXJkKCkpIHsK
QEAgLTM2NDEsMTAgKzM3MDQsMTAgQEAKIAkJCQlmaXJzdEVyYXN1cmUgPSBmaXJzdFR5cGUuZXJh
c3VyZSgpOwogCQkJCWJyZWFrOwogCQkJZGVmYXVsdCA6Ci0JCQkJZmlyc3RFcmFzdXJlID0gZmly
c3RUeXBlOworCQkJCWZpcnN0RXJhc3VyZSA9IGZpcnN0VHlwZTsvLy51bmFubm90YXRlZCgpOyAv
LyBUT0RPIHVubmVjZXNzYXJ5PwogCQkJCWJyZWFrOwogCQl9Ci0JCWlmIChUeXBlQmluZGluZy5u
b3RFcXVhbHMoZmlyc3RFcmFzdXJlLCBmaXJzdFR5cGUpKSB7CisJCWlmIChmaXJzdEVyYXN1cmUg
IT0gZmlyc3RUeXBlKSB7IC8vIFRPRE8gbm90RXF1YWxzPwogCQkJYWxsSW52b2NhdGlvbnMucHV0
KGZpcnN0RXJhc3VyZSwgZmlyc3RUeXBlKTsKIAkJfQogCQl0eXBlc1RvVmlzaXQuYWRkKGZpcnN0
VHlwZSk7CkBAIC0zNzA0LDcgKzM3NjcsNyBAQAogCQkJCQkJdHlwZXNUb1Zpc2l0LmFkZChzdXBl
clR5cGUpOwogCQkJCQkJbWF4Kys7CiAJCQkJCQlUeXBlQmluZGluZyBzdXBlclR5cGVFcmFzdXJl
ID0gKGZpcnN0Qm91bmQuaXNUeXBlVmFyaWFibGUoKSB8fCBmaXJzdEJvdW5kLmlzV2lsZGNhcmQo
KSAvKiYmICFpdHNJbnRlcmZhY2UuaXNDYXB0dXJlKCkqLykgPyBzdXBlclR5cGUgOiBzdXBlclR5
cGUuZXJhc3VyZSgpOwotCQkJCQkJaWYgKFR5cGVCaW5kaW5nLm5vdEVxdWFscyhzdXBlclR5cGVF
cmFzdXJlLCBzdXBlclR5cGUpKSB7CisJCQkJCQlpZiAoc3VwZXJUeXBlRXJhc3VyZSAhPSBzdXBl
clR5cGUpIHsgIC8vIFRPRE8gbm90RXF1YWxzPwogCQkJCQkJCWFsbEludm9jYXRpb25zLnB1dChz
dXBlclR5cGVFcmFzdXJlLCBzdXBlclR5cGUpOwogCQkJCQkJfQogCQkJCQl9CkBAIC0zNzIxLDcg
KzM3ODQsNyBAQAogCQkJCQkJdHlwZXNUb1Zpc2l0LmFkZChzdXBlclR5cGUpOwogCQkJCQkJbWF4
Kys7CiAJCQkJCQlUeXBlQmluZGluZyBzdXBlclR5cGVFcmFzdXJlID0gKGl0c0ludGVyZmFjZS5p
c1R5cGVWYXJpYWJsZSgpIHx8IGl0c0ludGVyZmFjZS5pc1dpbGRjYXJkKCkgLyomJiAhaXRzSW50
ZXJmYWNlLmlzQ2FwdHVyZSgpKi8pID8gc3VwZXJUeXBlIDogc3VwZXJUeXBlLmVyYXN1cmUoKTsK
LQkJCQkJCWlmIChUeXBlQmluZGluZy5ub3RFcXVhbHMoc3VwZXJUeXBlRXJhc3VyZSwgc3VwZXJU
eXBlKSkgeworCQkJCQkJaWYgKHN1cGVyVHlwZUVyYXN1cmUgIT0gc3VwZXJUeXBlKSB7IC8vIFRP
RE8gbm90RXF1YWxzPwogCQkJCQkJCWFsbEludm9jYXRpb25zLnB1dChzdXBlclR5cGVFcmFzdXJl
LCBzdXBlclR5cGUpOwogCQkJCQkJfQogCQkJCQl9CkBAIC0zNzM0LDcgKzM3OTcsNyBAQAogCQkJ
CQl0eXBlc1RvVmlzaXQuYWRkKHN1cGVyVHlwZSk7CiAJCQkJCW1heCsrOwogCQkJCQlUeXBlQmlu
ZGluZyBzdXBlclR5cGVFcmFzdXJlID0gKGl0c1N1cGVyY2xhc3MuaXNUeXBlVmFyaWFibGUoKSB8
fCBpdHNTdXBlcmNsYXNzLmlzV2lsZGNhcmQoKSAvKiYmICFpdHNTdXBlcmNsYXNzLmlzQ2FwdHVy
ZSgpKi8pID8gc3VwZXJUeXBlIDogc3VwZXJUeXBlLmVyYXN1cmUoKTsKLQkJCQkJaWYgKFR5cGVC
aW5kaW5nLm5vdEVxdWFscyhzdXBlclR5cGVFcmFzdXJlLCBzdXBlclR5cGUpKSB7CisJCQkJCWlm
IChzdXBlclR5cGVFcmFzdXJlICE9IHN1cGVyVHlwZSkgeyAvLyBUT0RPIG5vdEVxdWFscz8KIAkJ
CQkJCWFsbEludm9jYXRpb25zLnB1dChzdXBlclR5cGVFcmFzdXJlLCBzdXBlclR5cGUpOwogCQkJ
CQl9CiAJCQkJfQpAQCAtMzc0Niw3ICszODA5LDcgQEAKIAkJZm9yIChJdGVyYXRvciBpdGVyID0g
dHlwZXNUb1Zpc2l0Lml0ZXJhdG9yKCk7IGl0ZXIuaGFzTmV4dCgpOykgewogCQkJVHlwZUJpbmRp
bmcgdHlwZSA9IChUeXBlQmluZGluZylpdGVyLm5leHQoKTsKIAkJCWxlYWZUeXBlID0gdHlwZS5s
ZWFmQ29tcG9uZW50VHlwZSgpOwotCQkJZXJhc2VkU3VwZXJUeXBlc1tyYW5rKytdID0gKGxlYWZU
eXBlLmlzVHlwZVZhcmlhYmxlKCkgfHwgbGVhZlR5cGUuaXNXaWxkY2FyZCgpIC8qJiYgIWxlYWZU
eXBlLmlzQ2FwdHVyZSgpKi8pID8gdHlwZSA6IHR5cGUuZXJhc3VyZSgpOworCQkJZXJhc2VkU3Vw
ZXJUeXBlc1tyYW5rKytdID0gKGxlYWZUeXBlLmlzVHlwZVZhcmlhYmxlKCkgfHwgbGVhZlR5cGUu
aXNXaWxkY2FyZCgpIC8qJiYgIWxlYWZUeXBlLmlzQ2FwdHVyZSgpKi8pID8gdHlwZSA6IHR5cGUu
ZXJhc3VyZSgpLnVuYW5ub3RhdGVkKCk7CiAJCX0KIAkJLy8gaW50ZXJzZWN0aW5nIGZpcnN0IHR5
cGUgc3VwZXJ0eXBlcyB3aXRoIG90aGVyIHR5cGVzJyBvbmVzLCBudWxsaWZ5aW5nIG5vbiBtYXRj
aGluZyBzdXBlcnR5cGVzCiAJCWludCByZW1haW5pbmcgPSBzdXBlckxlbmd0aDsKQEAgLTM3Njgs
NyArMzgzMSw3IEBACiAJCQkJCWlmIChpbnZvY2F0aW9uRGF0YSA9PSBudWxsKSB7CiAJCQkJCQlh
bGxJbnZvY2F0aW9ucy5wdXQoZXJhc2VkU3VwZXJUeXBlLCBtYXRjaCk7IC8vIG5vIGFycmF5IGZv
ciBzaW5nbGV0b24KIAkJCQkJfSBlbHNlIGlmIChpbnZvY2F0aW9uRGF0YSBpbnN0YW5jZW9mIFR5
cGVCaW5kaW5nKSB7Ci0JCQkJCQlpZiAoVHlwZUJpbmRpbmcubm90RXF1YWxzKG1hdGNoLCAoVHlw
ZUJpbmRpbmcpIGludm9jYXRpb25EYXRhKSkgeworCQkJCQkJaWYgKG1hdGNoICE9IGludm9jYXRp
b25EYXRhKSB7IC8vIFRPRE8gbm90RXF1YWxzPwogCQkJCQkJCS8vIHVzaW5nIGFuIGFycmF5IHRv
IHJlY29yZCBpbnZvY2F0aW9ucyBpbiBvcmRlciAoMTg4MTAzKQogCQkJCQkJCVR5cGVCaW5kaW5n
W10gc29tZUludm9jYXRpb25zID0geyAoVHlwZUJpbmRpbmcpIGludm9jYXRpb25EYXRhLCBtYXRj
aCwgfTsKIAkJCQkJCQlhbGxJbnZvY2F0aW9ucy5wdXQoZXJhc2VkU3VwZXJUeXBlLCBzb21lSW52
b2NhdGlvbnMpOwpAQCAtMzc5Miw3ICszODU1LDcgQEAKIAkJCQlUeXBlQmluZGluZyBlcmFzZWRT
dXBlclR5cGUgPSBlcmFzZWRTdXBlclR5cGVzW2pdOwogCQkJCWlmIChlcmFzZWRTdXBlclR5cGUg
PT0gbnVsbCkgY29udGludWUgbmV4dFN1cGVyVHlwZTsKIAkJCQlUeXBlQmluZGluZyBtYXRjaDsK
LQkJCQlpZiAoZXJhc2VkU3VwZXJUeXBlID09IG90aGVyVHlwZSB8fCBlcmFzZWRTdXBlclR5cGUu
aWQgPT0gVHlwZUlkcy5UX0phdmFMYW5nT2JqZWN0ICYmIG90aGVyVHlwZS5pc0ludGVyZmFjZSgp
KSB7CisJCQkJaWYgKGVyYXNlZFN1cGVyVHlwZSA9PSBvdGhlclR5cGUgfHwgZXJhc2VkU3VwZXJU
eXBlLmlkID09IFR5cGVJZHMuVF9KYXZhTGFuZ09iamVjdCAmJiBvdGhlclR5cGUuaXNJbnRlcmZh
Y2UoKSkgeyAvLyBUT0RPIGVxdWFsc0VxdWFscz8KIAkJCQkJbWF0Y2ggPSBlcmFzZWRTdXBlclR5
cGU7CiAJCQkJfSBlbHNlIHsKIAkJCQkJaWYgKGVyYXNlZFN1cGVyVHlwZS5pc0FycmF5VHlwZSgp
KSB7CkBAIC0zODA4LDEwICszODcxLDEyIEBACiAJCQkJfQogCQkJCS8vIHJlY29yZCBpbnZvY2F0
aW9uCiAJCQkJT2JqZWN0IGludm9jYXRpb25EYXRhID0gYWxsSW52b2NhdGlvbnMuZ2V0KGVyYXNl
ZFN1cGVyVHlwZSk7CisJCQkJaWYgKGludm9jYXRpb25EYXRhID09IG51bGwgJiYgbWF0Y2guaGFz
VHlwZUFubm90YXRpb25zKCkpCisJCQkJCWludm9jYXRpb25EYXRhID0gbWF0Y2gudW5hbm5vdGF0
ZWQoKTsgLy8gd2hlbiBhZGRpbmcgYW4gYW5ub3RhdGVkIGludm9jYXRpb24gbWFrZSBzdXJlIHdl
IGFsc28gaGF2ZSB0aGUgbmFrZWQgZm9ybQogCQkJCWlmIChpbnZvY2F0aW9uRGF0YSA9PSBudWxs
KSB7CiAJCQkJCWFsbEludm9jYXRpb25zLnB1dChlcmFzZWRTdXBlclR5cGUsIG1hdGNoKTsgLy8g
bm8gYXJyYXkgZm9yIHNpbmdsZXRvbgogCQkJCX0gZWxzZSBpZiAoaW52b2NhdGlvbkRhdGEgaW5z
dGFuY2VvZiBUeXBlQmluZGluZykgewotCQkJCQlpZiAoVHlwZUJpbmRpbmcubm90RXF1YWxzKG1h
dGNoLCAoVHlwZUJpbmRpbmcpIGludm9jYXRpb25EYXRhKSkgeworCQkJCQlpZiAobWF0Y2ggIT0g
aW52b2NhdGlvbkRhdGEpIHsgLy8gVE9ETyBub3RFcXVhbHM/CiAJCQkJCQkvLyB1c2luZyBhbiBh
cnJheSB0byByZWNvcmQgaW52b2NhdGlvbnMgaW4gb3JkZXIgKDE4ODEwMykKIAkJCQkJCVR5cGVC
aW5kaW5nW10gc29tZUludm9jYXRpb25zID0geyAoVHlwZUJpbmRpbmcpIGludm9jYXRpb25EYXRh
LCBtYXRjaCwgfTsKIAkJCQkJCWFsbEludm9jYXRpb25zLnB1dChlcmFzZWRTdXBlclR5cGUsIHNv
bWVJbnZvY2F0aW9ucyk7
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>235738</attachid>
            <date>2013-09-24 02:03:00 -0400</date>
            <delta_ts>2013-09-24 02:08:10 -0400</delta_ts>
            <desc>Fix that completely bypasses lub computation.</desc>
            <filename>Lub.patch</filename>
            <type>text/plain</type>
            <size>15822</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxUeXBlQW5ub3Rh
dGlvblRlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9v
cmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxUeXBlQW5u
b3RhdGlvblRlc3QuamF2YQppbmRleCBjMTJmNGE1Li5lY2UxNzE5IDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OdWxsVHlwZUFubm90YXRpb25UZXN0LmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pk
dC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbFR5cGVBbm5vdGF0aW9uVGVzdC5q
YXZhCkBAIC0xNDUyLDYgKzE0NTIsOCBAQAogCQkJCSJOdWxsIHR5cGUgbWlzbWF0Y2ggKHR5cGUg
YW5ub3RhdGlvbnMpOiByZXF1aXJlZCBcJ0xpc3Q8QE51bGxhYmxlID8gZXh0ZW5kcyBYMT5cJyBi
dXQgdGhpcyBleHByZXNzaW9uIGhhcyB0eXBlIFwnQXJyYXlMaXN0PEBOb25OdWxsIFgxPlwnLCBj
b3JyZXNwb25kaW5nIHN1cGVydHlwZSBpcyBcJ0xpc3Q8QE5vbk51bGwgWDE+XCdcbiIgKyAKIAkJ
CQkiLS0tLS0tLS0tLVxuIik7CiAJfQorCisJLy8gYW5ub3RhdGlvbnMgb24gdHlwZSBwYXJhbWV0
ZXIsIHNhbWUgZ2VuZXJpYyB0eXBlCiAJcHVibGljIHZvaWQgdGVzdENvbmRpdGlvbmFsMSgpIHsK
IAkJcnVuTmVnYXRpdmVUZXN0V2l0aExpYnMoCiAJCQluZXcgU3RyaW5nW10gewpAQCAtMTQ3Mywx
NyArMTQ3NSwxOCBAQAogCQkJIi0tLS0tLS0tLS1cbiIgKyAKIAkJCSIxLiBXQVJOSU5HIGluIFgu
amF2YSAoYXQgbGluZSA2KVxuIiArIAogCQkJIglyZXR1cm4gZiA9PSAwID8gZ29vZCA6IGR1Ymlv
dXM7XG4iICsgCi0JCQkiCSAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkJ
IgkgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5cbiIgKyAKIAkJCSJOdWxsIHR5cGUgc2Fm
ZXR5ICh0eXBlIGFubm90YXRpb25zKTogVGhlIGV4cHJlc3Npb24gb2YgdHlwZSBcJ0xpc3Q8U3Ry
aW5nPlwnIG5lZWRzIHVuY2hlY2tlZCBjb252ZXJzaW9uIHRvIGNvbmZvcm0gdG8gXCdMaXN0PEBO
b25OdWxsIFN0cmluZz5cJ1xuIiArIAogCQkJIi0tLS0tLS0tLS1cbiIgKyAKIAkJCSIyLiBXQVJO
SU5HIGluIFguamF2YSAoYXQgbGluZSA4KVxuIiArIAogCQkJIglyZXR1cm4gZiA9PSAyID8gZHVi
aW91cyA6IGdvb2Q7XG4iICsgCi0JCQkiCSAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXlxu
IiArIAorCQkJIgkgICAgICAgICAgICAgICAgXl5eXl5eXlxuIiArIAogCQkJIk51bGwgdHlwZSBz
YWZldHkgKHR5cGUgYW5ub3RhdGlvbnMpOiBUaGUgZXhwcmVzc2lvbiBvZiB0eXBlIFwnTGlzdDxT
dHJpbmc+XCcgbmVlZHMgdW5jaGVja2VkIGNvbnZlcnNpb24gdG8gY29uZm9ybSB0byBcJ0xpc3Q8
QE5vbk51bGwgU3RyaW5nPlwnXG4iICsgCiAJCQkiLS0tLS0tLS0tLVxuIik7CiAJfQogCi0JcHVi
bGljIHZvaWQgX3Rlc3RDb25kaXRpb25hbDIoKSB7CisJLy8gYW5ub3RhdGlvbnMgb24gdHlwZSBw
YXJhbWV0ZXIsIGRpZmZlcmVudCBnZW5lcmljIHR5cGUKKwlwdWJsaWMgdm9pZCB0ZXN0Q29uZGl0
aW9uYWwyKCkgewogCQlydW5OZWdhdGl2ZVRlc3RXaXRoTGlicygKIAkJCW5ldyBTdHJpbmdbXSB7
CiAJCQkJIlguamF2YSIsCkBAIC0xNTA0LDEzICsxNTA3LDE2OSBAQAogCQkJIi0tLS0tLS0tLS1c
biIgKyAKIAkJCSIxLiBXQVJOSU5HIGluIFguamF2YSAoYXQgbGluZSA2KVxuIiArIAogCQkJIgly
ZXR1cm4gZiA9PSAwID8gZ29vZCA6IGR1YmlvdXM7XG4iICsgCi0JCQkiCSAgICAgICBeXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXlxuIiArIAotCQkJIk51bGwgdHlwZSBzYWZldHkgKHR5cGUgYW5ub3Rh
dGlvbnMpOiBUaGUgZXhwcmVzc2lvbiBvZiB0eXBlIFwnTGlzdDxTdHJpbmc+XCcgbmVlZHMgdW5j
aGVja2VkIGNvbnZlcnNpb24gdG8gY29uZm9ybSB0byBcJ0xpc3Q8QE5vbk51bGwgU3RyaW5nPlwn
XG4iICsgCisJCQkiCSAgICAgICAgICAgICAgICAgICAgICAgXl5eXl5eXlxuIiArIAorCQkJIk51
bGwgdHlwZSBzYWZldHkgKHR5cGUgYW5ub3RhdGlvbnMpOiBUaGUgZXhwcmVzc2lvbiBvZiB0eXBl
IFwnQXJyYXlMaXN0PFN0cmluZz5cJyBuZWVkcyB1bmNoZWNrZWQgY29udmVyc2lvbiB0byBjb25m
b3JtIHRvIFwnTGlzdDxATm9uTnVsbCBTdHJpbmc+XCdcbiIgKyAKIAkJCSItLS0tLS0tLS0tXG4i
ICsgCiAJCQkiMi4gV0FSTklORyBpbiBYLmphdmEgKGF0IGxpbmUgOClcbiIgKyAKIAkJCSIJcmV0
dXJuIGYgPT0gMiA/IGR1YmlvdXMgOiBnb29kO1xuIiArIAotCQkJIgkgICAgICAgXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5cbiIgKyAKLQkJCSJOdWxsIHR5cGUgc2FmZXR5ICh0eXBlIGFubm90YXRp
b25zKTogVGhlIGV4cHJlc3Npb24gb2YgdHlwZSBcJ0xpc3Q8U3RyaW5nPlwnIG5lZWRzIHVuY2hl
Y2tlZCBjb252ZXJzaW9uIHRvIGNvbmZvcm0gdG8gXCdMaXN0PEBOb25OdWxsIFN0cmluZz5cJ1xu
IiArIAorCQkJIgkgICAgICAgICAgICAgICAgXl5eXl5eXlxuIiArIAorCQkJIk51bGwgdHlwZSBz
YWZldHkgKHR5cGUgYW5ub3RhdGlvbnMpOiBUaGUgZXhwcmVzc2lvbiBvZiB0eXBlIFwnQXJyYXlM
aXN0PFN0cmluZz5cJyBuZWVkcyB1bmNoZWNrZWQgY29udmVyc2lvbiB0byBjb25mb3JtIHRvIFwn
TGlzdDxATm9uTnVsbCBTdHJpbmc+XCdcbiIgKyAKKwkJCSItLS0tLS0tLS0tXG4iKTsKKwl9CisK
KwkvLyBhbm5vdGF0aW9ucyBvbiBjb2xsZWN0aW9uIGFuZCBpdHMgdHlwZSBwYXJhbWV0ZXIKKwlw
dWJsaWMgdm9pZCB0ZXN0Q29uZGl0aW9uYWwzKCkgeworCQlydW5OZWdhdGl2ZVRlc3RXaXRoTGli
cygKKwkJCW5ldyBTdHJpbmdbXSB7CisJCQkJIkEuamF2YSIsCisJCQkJImltcG9ydCBzdGF0aWMg
amF2YS5sYW5nLmFubm90YXRpb24uRWxlbWVudFR5cGUuKjtcbiIgKworCQkJCSJpbXBvcnQgamF2
YS5sYW5nLmFubm90YXRpb24uKjtcbiIgKworCQkJCSJAUmV0ZW50aW9uKFJldGVudGlvblBvbGlj
eS5DTEFTUylcbiIgKworCQkJCSJAVGFyZ2V0KHtUWVBFX1VTRX0pXG4iICsKKwkJCQkicHVibGlj
IEBpbnRlcmZhY2UgQSB7XG4iICsKKwkJCQkifVxuIiwKKwkJCQkiQi5qYXZhIiwKKwkJCQkiaW1w
b3J0IHN0YXRpYyBqYXZhLmxhbmcuYW5ub3RhdGlvbi5FbGVtZW50VHlwZS4qO1xuIiArCisJCQkJ
ImltcG9ydCBqYXZhLmxhbmcuYW5ub3RhdGlvbi4qO1xuIiArCisJCQkJIkBSZXRlbnRpb24oUmV0
ZW50aW9uUG9saWN5LkNMQVNTKVxuIiArCisJCQkJIkBUYXJnZXQoe1RZUEVfVVNFfSlcbiIgKwor
CQkJCSJwdWJsaWMgQGludGVyZmFjZSBCIHtcbiIgKworCQkJCSJ9XG4iLAorCQkJCSJYLmphdmEi
LAorCQkJCSJpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uKjtcbiIKKwkJCQkrICJp
bXBvcnQgamF2YS51dGlsLio7XG4iCisJCQkJKyAicHVibGljIGNsYXNzIFgge1xuIgorCQkJCSsg
IglATm9uTnVsbCBMaXN0PEBOb25OdWxsIFN0cmluZz4gZm9vKEBOb25OdWxsIEBCIExpc3Q8QE5v
bk51bGwgQEIgU3RyaW5nPiBnb29kLCBBcnJheUxpc3Q8U3RyaW5nPiBkdWJpb3VzLFxuIgorCQkJ
CSsgIiAJCUBCIExpc3Q8QEEgQE5vbk51bGwgU3RyaW5nPiBhbG1vc3QsIEBBIEBOb25OdWxsIExp
c3Q8QE5vbk51bGwgQEIgU3RyaW5nPiBnb29kMiwgaW50IGYpIHtcbiIKKwkJCQkrICIJCWlmIChm
IDwgMilcbiIKKwkJCQkrICIJCQlyZXR1cm4gZiA9PSAwID8gZ29vZCA6IGR1YmlvdXM7XG4iCisJ
CQkJKyAiCQlpZiAoZiA8IDQpXG4iCisJCQkJKyAiCQkJcmV0dXJuIGYgPT0gMiA/IGR1YmlvdXMg
OiBnb29kO1xuIgorCQkJCSsgIgkJaWYgKGYgPCA2KVxuIgorCQkJCSsgIgkJCXJldHVybiBmID09
IDQgPyBnb29kIDogYWxtb3N0O1xuIgkJCQkKKwkJCQkrICIJCWlmIChmIDwgOClcbiIKKwkJCQkr
ICIJCQlyZXR1cm4gZiA9PSA2ID8gYWxtb3N0IDogZ29vZDtcbiIgLy8gcHJvdmlkZWQgdHlwZSBo
YXMgYSBAQiBhbm5vdGF0aW9uIHdoaWNoIGRvZXNuJ3Qgc2hvdyBpbiB0aGUgd2FybmluZworCQkJ
CSsgIgkJcmV0dXJuIGYgPT0gOSA/IGdvb2QgOiBnb29kMjtcbiIgLy8gcHJvdmlkZWQgdHlwZSBo
YXMgYSBAQiBhbm5vdGF0aW9uIHdoaWNoIGRvZXNuJ3Qgc2hvdyBpbiB0aGUgd2FybmluZworCQkJ
CSsgIgl9XG4iCisJCQkJKyAifVxuIgorCQkJfSwKKwkJCSItLS0tLS0tLS0tXG4iICsgCisJCQki
MS4gV0FSTklORyBpbiBYLmphdmEgKGF0IGxpbmUgNylcbiIgKyAKKwkJCSIJcmV0dXJuIGYgPT0g
MCA/IGdvb2QgOiBkdWJpb3VzO1xuIiArIAorCQkJIgkgICAgICAgICAgICAgICAgICAgICAgIF5e
Xl5eXl5cbiIgKyAKKwkJCSJOdWxsIHR5cGUgc2FmZXR5ICh0eXBlIGFubm90YXRpb25zKTogVGhl
IGV4cHJlc3Npb24gb2YgdHlwZSBcJ0FycmF5TGlzdDxTdHJpbmc+XCcgbmVlZHMgdW5jaGVja2Vk
IGNvbnZlcnNpb24gdG8gY29uZm9ybSB0byBcJ0BOb25OdWxsIExpc3Q8QE5vbk51bGwgU3RyaW5n
PlwnXG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJIjIuIFdBUk5JTkcgaW4gWC5qYXZh
IChhdCBsaW5lIDkpXG4iICsgCisJCQkiCXJldHVybiBmID09IDIgPyBkdWJpb3VzIDogZ29vZDtc
biIgKyAKKwkJCSIJICAgICAgICAgICAgICAgIF5eXl5eXl5cbiIgKyAKKwkJCSJOdWxsIHR5cGUg
c2FmZXR5ICh0eXBlIGFubm90YXRpb25zKTogVGhlIGV4cHJlc3Npb24gb2YgdHlwZSBcJ0FycmF5
TGlzdDxTdHJpbmc+XCcgbmVlZHMgdW5jaGVja2VkIGNvbnZlcnNpb24gdG8gY29uZm9ybSB0byBc
J0BOb25OdWxsIExpc3Q8QE5vbk51bGwgU3RyaW5nPlwnXG4iICsgCisJCQkiLS0tLS0tLS0tLVxu
IiArIAorCQkJIjMuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDExKVxuIiArIAorCQkJIgly
ZXR1cm4gZiA9PSA0ID8gZ29vZCA6IGFsbW9zdDtcbiIgKyAKKwkJCSIJICAgICAgICAgICAgICAg
ICAgICAgICBeXl5eXl5cbiIgKyAKKwkJCSJOdWxsIHR5cGUgc2FmZXR5ICh0eXBlIGFubm90YXRp
b25zKTogVGhlIGV4cHJlc3Npb24gb2YgdHlwZSBcJ0xpc3Q8QE5vbk51bGwgU3RyaW5nPlwnIG5l
ZWRzIHVuY2hlY2tlZCBjb252ZXJzaW9uIHRvIGNvbmZvcm0gdG8gXCdATm9uTnVsbCBMaXN0PEBO
b25OdWxsIFN0cmluZz5cJ1xuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCSI0LiBXQVJO
SU5HIGluIFguamF2YSAoYXQgbGluZSAxMylcbiIgKyAKKwkJCSIJcmV0dXJuIGYgPT0gNiA/IGFs
bW9zdCA6IGdvb2Q7XG4iICsgCisJCQkiCSAgICAgICAgICAgICAgICBeXl5eXl5cbiIgKyAKKwkJ
CSJOdWxsIHR5cGUgc2FmZXR5ICh0eXBlIGFubm90YXRpb25zKTogVGhlIGV4cHJlc3Npb24gb2Yg
dHlwZSBcJ0xpc3Q8QE5vbk51bGwgU3RyaW5nPlwnIG5lZWRzIHVuY2hlY2tlZCBjb252ZXJzaW9u
IHRvIGNvbmZvcm0gdG8gXCdATm9uTnVsbCBMaXN0PEBOb25OdWxsIFN0cmluZz5cJ1xuIiArIAor
CQkJIi0tLS0tLS0tLS1cbiIpOworCX0KKworCS8vIGFubm90YXRpb25zIG9uIHdpbGRjYXJkcwor
CXB1YmxpYyB2b2lkIHRlc3RDb25kaXRpb25hbDQoKSB7CisJCXJ1bk5lZ2F0aXZlVGVzdFdpdGhM
aWJzKAorCQkJbmV3IFN0cmluZ1tdIHsKKwkJCQkiWC5qYXZhIiwKKwkJCQkiaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5hbm5vdGF0aW9uLio7XG4iCisJCQkJKyAiaW1wb3J0IGphdmEudXRpbC4qO1xu
IgorCQkJCSsgInB1YmxpYyBjbGFzcyBYIHtcbiIKKwkJCQkrICIJQE5vbk51bGwgTGlzdDxATm9u
TnVsbCA/IGV4dGVuZHMgU3RyaW5nPiBmb28oQE5vbk51bGwgTGlzdDxATm9uTnVsbCA/IGV4dGVu
ZHMgU3RyaW5nPiBnb29kLCBBcnJheUxpc3Q8PyBleHRlbmRzIFN0cmluZz4gZHViaW91cywgTGlz
dDxATm9uTnVsbCA/IGV4dGVuZHMgU3RyaW5nPiBhbG1vc3QsIGludCBmKSB7XG4iCisJCQkJKyAi
CQlpZiAoZiA8IDIpXG4iCisJCQkJKyAiCQkJcmV0dXJuIGYgPT0gMCA/IGdvb2QgOiBkdWJpb3Vz
O1xuIgorCQkJCSsgIgkJaWYgKGYgPCA0KVxuIgorCQkJCSsgIgkJCXJldHVybiBmID09IDIgPyBk
dWJpb3VzIDogZ29vZDtcbiIKKwkJCQkrICIJCWlmIChmIDwgNilcbiIKKwkJCQkrICIJCQlyZXR1
cm4gZiA9PSA0ID8gZ29vZCA6IGFsbW9zdDtcbiIJCQkJCisJCQkJKyAiCQlpZiAoZiA8IDgpXG4i
CisJCQkJKyAiCQkJcmV0dXJuIGYgPT0gNiA/IGFsbW9zdCA6IGdvb2Q7XG4iCisJCQkJKyAiCQly
ZXR1cm4gZiA9PSA5ID8gZ29vZCA6IGdvb2Q7XG4iCisJCQkJKyAiCX1cbiIKKwkJCQkrICJ9XG4i
CisJCQl9LAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCSIxLiBXQVJOSU5HIGluIFguamF2YSAo
YXQgbGluZSA2KVxuIiArIAorCQkJIglyZXR1cm4gZiA9PSAwID8gZ29vZCA6IGR1YmlvdXM7XG4i
ICsgCisJCQkiCSAgICAgICAgICAgICAgICAgICAgICAgXl5eXl5eXlxuIiArIAorCQkJIk51bGwg
dHlwZSBzYWZldHkgKHR5cGUgYW5ub3RhdGlvbnMpOiBUaGUgZXhwcmVzc2lvbiBvZiB0eXBlIFwn
QXJyYXlMaXN0PGNhcHR1cmUjPlwnIG5lZWRzIHVuY2hlY2tlZCBjb252ZXJzaW9uIHRvIGNvbmZv
cm0gdG8gXCdATm9uTnVsbCBMaXN0PEBOb25OdWxsID8gZXh0ZW5kcyBTdHJpbmc+XCdcbiIgKyAK
KwkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkiMi4gV0FSTklORyBpbiBYLmphdmEgKGF0IGxpbmUg
OClcbiIgKyAKKwkJCSIJcmV0dXJuIGYgPT0gMiA/IGR1YmlvdXMgOiBnb29kO1xuIiArIAorCQkJ
IgkgICAgICAgICAgICAgICAgXl5eXl5eXlxuIiArIAorCQkJIk51bGwgdHlwZSBzYWZldHkgKHR5
cGUgYW5ub3RhdGlvbnMpOiBUaGUgZXhwcmVzc2lvbiBvZiB0eXBlIFwnQXJyYXlMaXN0PGNhcHR1
cmUjPlwnIG5lZWRzIHVuY2hlY2tlZCBjb252ZXJzaW9uIHRvIGNvbmZvcm0gdG8gXCdATm9uTnVs
bCBMaXN0PEBOb25OdWxsID8gZXh0ZW5kcyBTdHJpbmc+XCdcbiIgKyAKKwkJCSItLS0tLS0tLS0t
XG4iICsgCisJCQkiMy4gV0FSTklORyBpbiBYLmphdmEgKGF0IGxpbmUgMTApXG4iICsgCisJCQki
CXJldHVybiBmID09IDQgPyBnb29kIDogYWxtb3N0O1xuIiArIAorCQkJIgkgICAgICAgICAgICAg
ICAgICAgICAgIF5eXl5eXlxuIiArIAorCQkJIk51bGwgdHlwZSBzYWZldHkgKHR5cGUgYW5ub3Rh
dGlvbnMpOiBUaGUgZXhwcmVzc2lvbiBvZiB0eXBlIFwnTGlzdDxATm9uTnVsbCBjYXB0dXJlIz5c
JyBuZWVkcyB1bmNoZWNrZWQgY29udmVyc2lvbiB0byBjb25mb3JtIHRvIFwnQE5vbk51bGwgTGlz
dDxATm9uTnVsbCA/IGV4dGVuZHMgU3RyaW5nPlwnXG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIiAr
IAorCQkJIjQuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDEyKVxuIiArIAorCQkJIglyZXR1
cm4gZiA9PSA2ID8gYWxtb3N0IDogZ29vZDtcbiIgKyAKKwkJCSIJICAgICAgICAgICAgICAgIF5e
Xl5eXlxuIiArIAorCQkJIk51bGwgdHlwZSBzYWZldHkgKHR5cGUgYW5ub3RhdGlvbnMpOiBUaGUg
ZXhwcmVzc2lvbiBvZiB0eXBlIFwnTGlzdDxATm9uTnVsbCBjYXB0dXJlIz5cJyBuZWVkcyB1bmNo
ZWNrZWQgY29udmVyc2lvbiB0byBjb25mb3JtIHRvIFwnQE5vbk51bGwgTGlzdDxATm9uTnVsbCA/
IGV4dGVuZHMgU3RyaW5nPlwnXG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIik7CisJfQorCisJLy8g
QE51bGxhYmxlIGF0IHRvcCBsZXZlbCBzaG91bGQgd2luCisJcHVibGljIHZvaWQgdGVzdENvbmRp
dGlvbmFsNSgpIHsKKwkJcnVuTmVnYXRpdmVUZXN0V2l0aExpYnMoCisJCQluZXcgU3RyaW5nW10g
eworCQkJCSJYLmphdmEiLAorCQkJCSJpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24u
KjtcbiIKKwkJCQkrICJwdWJsaWMgY2xhc3MgWCB7XG4iCisJCQkJKyAiCUBOb25OdWxsIE9iamVj
dCBmb28oU3RyaW5nIGR1YmlvdXMwLCBATm9uTnVsbCBTdHJpbmcgZ29vZDIsIEBOdWxsYWJsZSBP
YmplY3QgZHViaW91cywgaW50IGYpIHtcbiIKKwkJCQkrICIJCWlmIChmIDwgMilcbiIKKwkJCQkr
ICIJCQlyZXR1cm4gZiA9PSAwID8gZHViaW91czAgOiBkdWJpb3VzO1xuIgorCQkJCSsgIgkJaWYg
KGYgPCA0KVxuIgorCQkJCSsgIgkJCXJldHVybiBmID09IDIgPyBkdWJpb3VzIDogZHViaW91czA7
XG4iCisJCQkJKyAiCQlpZiAoZiA8IDYpXG4iCisJCQkJKyAiCQkJcmV0dXJuIGYgPT0gNCA/IGdv
b2QyIDogZHViaW91cztcbiIKKwkJCQkrICIJCWlmIChmIDwgOClcbiIKKwkJCQkrICIJCQlyZXR1
cm4gZiA9PSA2ID8gZHViaW91cyA6IGdvb2QyO1xuIgorCQkJCSsgIgkJcmV0dXJuIHRoaXM7XG4i
CisJCQkJKyAiCX1cbiIKKwkJCQkrICJ9XG4iCisJCQl9LAorCQkJIi0tLS0tLS0tLS1cbiIgKyAK
KwkJCSIxLiBXQVJOSU5HIGluIFguamF2YSAoYXQgbGluZSA1KVxuIiArIAorCQkJIglyZXR1cm4g
ZiA9PSAwID8gZHViaW91czAgOiBkdWJpb3VzO1xuIiArIAorCQkJIgkgICAgICAgICAgICAgICAg
Xl5eXl5eXl5cbiIgKyAKKwkJCSJOdWxsIHR5cGUgc2FmZXR5ICh0eXBlIGFubm90YXRpb25zKTog
VGhlIGV4cHJlc3Npb24gb2YgdHlwZSBcJ1N0cmluZ1wnIG5lZWRzIHVuY2hlY2tlZCBjb252ZXJz
aW9uIHRvIGNvbmZvcm0gdG8gXCdATm9uTnVsbCBPYmplY3RcJ1xuIiArIAorCQkJIi0tLS0tLS0t
LS1cbiIgKyAKKwkJCSIyLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNSlcbiIgKyAKKwkJCSIJ
cmV0dXJuIGYgPT0gMCA/IGR1YmlvdXMwIDogZHViaW91cztcbiIgKyAKKwkJCSIJICAgICAgICAg
ICAgICAgICAgICAgICAgICAgXl5eXl5eXlxuIiArIAorCQkJIk51bGwgdHlwZSBtaXNtYXRjaCAo
dHlwZSBhbm5vdGF0aW9ucyk6IHJlcXVpcmVkIFwnQE5vbk51bGwgT2JqZWN0XCcgYnV0IHRoaXMg
ZXhwcmVzc2lvbiBoYXMgdHlwZSBcJ0BOdWxsYWJsZSBPYmplY3RcJ1xuIiArIAorCQkJIi0tLS0t
LS0tLS1cbiIgKyAKKwkJCSIzLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNylcbiIgKyAKKwkJ
CSIJcmV0dXJuIGYgPT0gMiA/IGR1YmlvdXMgOiBkdWJpb3VzMDtcbiIgKyAKKwkJCSIJICAgICAg
ICAgICAgICAgIF5eXl5eXl5cbiIgKyAKKwkJCSJOdWxsIHR5cGUgbWlzbWF0Y2ggKHR5cGUgYW5u
b3RhdGlvbnMpOiByZXF1aXJlZCBcJ0BOb25OdWxsIE9iamVjdFwnIGJ1dCB0aGlzIGV4cHJlc3Np
b24gaGFzIHR5cGUgXCdATnVsbGFibGUgT2JqZWN0XCdcbiIgKyAKKwkJCSItLS0tLS0tLS0tXG4i
ICsgCisJCQkiNC4gV0FSTklORyBpbiBYLmphdmEgKGF0IGxpbmUgNylcbiIgKyAKKwkJCSIJcmV0
dXJuIGYgPT0gMiA/IGR1YmlvdXMgOiBkdWJpb3VzMDtcbiIgKyAKKwkJCSIJICAgICAgICAgICAg
ICAgICAgICAgICAgICBeXl5eXl5eXlxuIiArIAorCQkJIk51bGwgdHlwZSBzYWZldHkgKHR5cGUg
YW5ub3RhdGlvbnMpOiBUaGUgZXhwcmVzc2lvbiBvZiB0eXBlIFwnU3RyaW5nXCcgbmVlZHMgdW5j
aGVja2VkIGNvbnZlcnNpb24gdG8gY29uZm9ybSB0byBcJ0BOb25OdWxsIE9iamVjdFwnXG4iICsg
CisJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJIjUuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA5
KVxuIiArIAorCQkJIglyZXR1cm4gZiA9PSA0ID8gZ29vZDIgOiBkdWJpb3VzO1xuIiArIAorCQkJ
IgkgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXG4iICsgCisJCQkiTnVsbCB0eXBlIG1p
c21hdGNoICh0eXBlIGFubm90YXRpb25zKTogcmVxdWlyZWQgXCdATm9uTnVsbCBPYmplY3RcJyBi
dXQgdGhpcyBleHByZXNzaW9uIGhhcyB0eXBlIFwnQE51bGxhYmxlIE9iamVjdFwnXG4iICsgCisJ
CQkiLS0tLS0tLS0tLVxuIiArIAorCQkJIjYuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMSlc
biIgKyAKKwkJCSIJcmV0dXJuIGYgPT0gNiA/IGR1YmlvdXMgOiBnb29kMjtcbiIgKyAKKwkJCSIJ
ICAgICAgICAgICAgICAgIF5eXl5eXl5cbiIgKyAKKwkJCSJOdWxsIHR5cGUgbWlzbWF0Y2ggKHR5
cGUgYW5ub3RhdGlvbnMpOiByZXF1aXJlZCBcJ0BOb25OdWxsIE9iamVjdFwnIGJ1dCB0aGlzIGV4
cHJlc3Npb24gaGFzIHR5cGUgXCdATnVsbGFibGUgT2JqZWN0XCdcbiIgKyAKIAkJCSItLS0tLS0t
LS0tXG4iKTsKIAl9CiAKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQ29uZGl0aW9uYWxFeHByZXNz
aW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L0NvbmRpdGlvbmFsRXhwcmVzc2lvbi5qYXZhCmluZGV4IDFk
MDlkMDcuLmQ5ODQxYjIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQ29uZGl0aW9uYWxFeHByZXNz
aW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Db25kaXRpb25hbEV4cHJlc3Npb24uamF2YQpAQCAt
NTM0LDcgKzUzNCw3IEBACiAJCQkJCQk6IHRoaXMub3B0aW1pemVkSWZGYWxzZUNvbnN0YW50Owog
CQkJCX0KIAkJCX0KLQkJCXJldHVybiB0aGlzLnJlc29sdmVkVHlwZSA9IE51bGxBbm5vdGF0aW9u
TWF0Y2hpbmcubW9yZURhbmdlcm91c1R5cGUodmFsdWVJZlRydWVUeXBlLCB2YWx1ZUlmRmFsc2VU
eXBlKTsKKwkJCXJldHVybiB0aGlzLnJlc29sdmVkVHlwZSA9IHZhbHVlSWZUcnVlVHlwZTsKIAkJ
fQogCQkvLyBEZXRlcm1pbmUgdGhlIHJldHVybiB0eXBlIGRlcGVuZGluZyBvbiBhcmd1bWVudCB0
eXBlcwogCQkvLyBOdW1lcmljIHR5cGVzCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L051bGxBbm5v
dGF0aW9uTWF0Y2hpbmcuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTnVsbEFubm90YXRpb25NYXRjaGluZy5q
YXZhCmluZGV4IDAwOWNiNWYuLmQ5NDAzMzcgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTnVsbEFu
bm90YXRpb25NYXRjaGluZy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTnVsbEFubm90YXRpb25NYXRj
aGluZy5qYXZhCkBAIC0xNjgsMjcgKzE2OCw2IEBACiAJCWJpdHMgJj0gVGFnQml0cy5Bbm5vdGF0
aW9uTnVsbE1BU0s7CiAJCXJldHVybiBiaXRzID09IFRhZ0JpdHMuQW5ub3RhdGlvbk51bGxNQVNL
ID8gMCA6IGJpdHM7CiAJfQotCQotCS8qKiBQcm92aWRlZCB0aGF0IGJvdGggdHlwZXMgYXJlIHtA
bGluayBUeXBlQmluZGluZyNlcXVhbHNFcXVhbHN9LCByZXR1cm4gdGhlIG9uZSB0aGF0IGlzIG1v
cmUgbGlrZWx5IHRvIHNob3cgbnVsbCBhdCBydW50aW1lLiAqLwotCXB1YmxpYyBzdGF0aWMgVHlw
ZUJpbmRpbmcgbW9yZURhbmdlcm91c1R5cGUoVHlwZUJpbmRpbmcgb25lLCBUeXBlQmluZGluZyB0
d28pIHsKLQkJaWYgKG9uZSA9PSBudWxsKSByZXR1cm4gbnVsbDsKLQkJbG9uZyBvbmVOdWxsQml0
cyA9IHZhbGlkTnVsbFRhZ0JpdHMob25lLnRhZ0JpdHMpOwotCQlsb25nIHR3b051bGxCaXRzID0g
dmFsaWROdWxsVGFnQml0cyh0d28udGFnQml0cyk7Ci0JCWlmIChvbmVOdWxsQml0cyAhPSB0d29O
dWxsQml0cykgewotCQkJaWYgKG9uZU51bGxCaXRzID09IFRhZ0JpdHMuQW5ub3RhdGlvbk51bGxh
YmxlKQotCQkJCXJldHVybiBvbmU7CQkJLy8gbnVsbGFibGUgaXMgZGFuZ2Vyb3VzCi0JCQlpZiAo
dHdvTnVsbEJpdHMgPT0gVGFnQml0cy5Bbm5vdGF0aW9uTnVsbGFibGUpCi0JCQkJcmV0dXJuIHR3
bzsJCQkvLyBudWxsYWJsZSBpcyBkYW5nZXJvdXMKLQkJCS8vIGJlbG93IHRoaXMgcG9pbnQgd2Ug
aGF2ZSB1bmtub3duIHZzLiBub25udWxsLCB3aGljaCBpcyB3aGljaD8KLQkJCWlmIChvbmVOdWxs
Qml0cyA9PSAwKQotCQkJCXJldHVybiBvbmU7CQkJLy8gdW5rbm93biBpcyBtb3JlIGRhbmdlcm91
cyB0aGFuIG5vbm51bGwKLQkJCXJldHVybiB0d287CQkJCS8vIHVua25vd24gaXMgbW9yZSBkYW5n
ZXJvdXMgdGhhbiBub25udWxsCi0JCX0gZWxzZSBpZiAob25lICE9IHR3bykgewotCQkJaWYgKGFu
YWx5c2Uob25lLCB0d28sIC0xKS5pc0FueU1pc21hdGNoKCkpCi0JCQkJcmV0dXJuIHR3bzsJCQkv
LyB0d28gZG9lc24ndCBzbnVnbHkgZml0IGludG8gb25lLCBzbyBpdCBtdXN0IGJlIG1vcmUgZGFu
Z2Vyb3VzCi0JCX0KLQkJcmV0dXJuIG9uZTsKLQl9CiAKIAlwcml2YXRlIHN0YXRpYyBpbnQgY29t
cHV0ZU51bGxQcm9ibGVtU2V2ZXJpdHkobG9uZyByZXF1aXJlZEJpdHMsIGxvbmcgcHJvdmlkZWRC
aXRzLCBpbnQgbnVsbFN0YXR1cykgewogCQlpZiAocmVxdWlyZWRCaXRzICE9IDAgJiYgcmVxdWly
ZWRCaXRzICE9IHByb3ZpZGVkQml0cykgewpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9TdGF0ZW1l
bnQuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9hc3QvU3RhdGVtZW50LmphdmEKaW5kZXggMzI1NDZmMy4uOTQxN2I2
ZCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9TdGF0ZW1lbnQuamF2YQorKysgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0
L1N0YXRlbWVudC5qYXZhCkBAIC0xNDcsNiArMTQ3LDEzIEBACiB9CiAKIHByb3RlY3RlZCB2b2lk
IGNoZWNrQWdhaW5zdE51bGxUeXBlQW5ub3RhdGlvbihCbG9ja1Njb3BlIHNjb3BlLCBUeXBlQmlu
ZGluZyByZXF1aXJlZFR5cGUsIEV4cHJlc3Npb24gZXhwcmVzc2lvbiwgRmxvd0NvbnRleHQgZmxv
d0NvbnRleHQsIEZsb3dJbmZvIGZsb3dJbmZvKSB7CisJaWYgKGV4cHJlc3Npb24gaW5zdGFuY2Vv
ZiBDb25kaXRpb25hbEV4cHJlc3Npb24pIHsKKwkJLy8gTm90IHN1cmUgd2UgY2FyZSBhYm91dCBy
ZWFjaGFiaWxpdHkgb2YgdGhlIGFybXMuCisJCUNvbmRpdGlvbmFsRXhwcmVzc2lvbiBjb25kaXRp
b25hbCA9IChDb25kaXRpb25hbEV4cHJlc3Npb24pIGV4cHJlc3Npb247CisJCWNoZWNrQWdhaW5z
dE51bGxUeXBlQW5ub3RhdGlvbihzY29wZSwgcmVxdWlyZWRUeXBlLCBjb25kaXRpb25hbC52YWx1
ZUlmVHJ1ZSwgZmxvd0NvbnRleHQsIGZsb3dJbmZvKTsKKwkJY2hlY2tBZ2FpbnN0TnVsbFR5cGVB
bm5vdGF0aW9uKHNjb3BlLCByZXF1aXJlZFR5cGUsIGNvbmRpdGlvbmFsLnZhbHVlSWZGYWxzZSwg
Zmxvd0NvbnRleHQsIGZsb3dJbmZvKTsKKwkJcmV0dXJuOworCX0KIAlpbnQgbnVsbFN0YXR1cyA9
IGV4cHJlc3Npb24ubnVsbFN0YXR1cyhmbG93SW5mbywgZmxvd0NvbnRleHQpOwogCU51bGxBbm5v
dGF0aW9uTWF0Y2hpbmcgYW5ub3RhdGlvblN0YXR1cyA9IE51bGxBbm5vdGF0aW9uTWF0Y2hpbmcu
YW5hbHlzZShyZXF1aXJlZFR5cGUsIGV4cHJlc3Npb24ucmVzb2x2ZWRUeXBlLCBudWxsU3RhdHVz
KTsKIAlpZiAoYW5ub3RhdGlvblN0YXR1cy5pc0RlZmluaXRlTWlzbWF0Y2goKSkgewpkaWZmIC0t
Z2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZh
CmluZGV4IDMzN2VmNmIuLmE4ZGUxM2EgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUu
amF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEKQEAgLTM1MTAsNyArMzUxMCwxMSBA
QAogCQlyZXR1cm4gbG93ZXJVcHBlckJvdW5kKHR5cGVzLCBuZXcgQXJyYXlMaXN0KDEpKTsKIAl9
CiAKLQkvLyAxNS4xMi4yCisJLyogMTUuMTIuMi4KKwkgICBXZSBjb21wbGV0ZWx5IGlnbm9yZSBk
aWZmZXJlbmNlcyBkdWUgdG8gdHlwZSBhbm5vdGF0aW9ucyBoZXJlLiBKU1IzMDggZG9lcyBub3Qg
c3BlY2lmeSBjb21waWxlciBiZWhhdmlvciBvbiBsdWIgY29tcHV0YXRpb24gaW4gdGhlIHByZXNl
bmNlIG9mCisJICAgZGlmZmVyZW50bHkgYW5ub3RhdGVkIHR5cGVzLiBUaHVzIHdlIGFyZSBhbm5v
dGF0aW9uIGFnbm9zdGljIGhlcmUgYW5kIGFzIGEgcmVzdWx0LCB0aGUgY29tcHV0ZWQgbG93ZXIg
dXBwZXIgYm91bmQgbWF5IGhhdmUgdW5zcGVjaWZpZWQgdHlwZQorCSAgIGFubm90YXRpb25zLiBB
bnlib2R5IHdobyBjYXJlcyBzaG91bGQgZGVlcCBpbnNwZWN0IHRoZSBjb25zdGl0dWVudC9pbnRl
cnNlY3RpbmcgdHlwZXMuCisJKi8KIAlwcml2YXRlIFR5cGVCaW5kaW5nIGxvd2VyVXBwZXJCb3Vu
ZChUeXBlQmluZGluZ1tdIHR5cGVzLCBBcnJheUxpc3QgbHViU3RhY2spIHsKIAogCQlpbnQgdHlw
ZUxlbmd0aCA9IHR5cGVzLmxlbmd0aDsKQEAgLTM1NjUsNyArMzU2OSw2IEBACiAJCQljYXNlIDAg
OiByZXR1cm4gVHlwZUJpbmRpbmcuVk9JRDsKIAkJCWNhc2UgMSA6IHJldHVybiBtZWNzWzBdOwog
CQkJY2FzZSAyIDoKLQkJCQkvLyBUT0RPKFN0ZXBoYW4pIDogaWYgbnVsbCBhbm5vdGF0aW9ucyBk
aWZmZXIsIHdlIG5lZWQgdG8gY3JlYXRlIGFuIGludGVyc2VjdGlvbiB0eXBlIGFuZCByZXR1cm4u
CiAJCQkJaWYgKChjb21tb25EaW0gPT0gMCA/IG1lY3NbMV0uaWQgOiBtZWNzWzFdLmxlYWZDb21w
b25lbnRUeXBlKCkuaWQpID09IFR5cGVJZHMuVF9KYXZhTGFuZ09iamVjdCkgcmV0dXJuIG1lY3Nb
MF07CiAJCQkJaWYgKChjb21tb25EaW0gPT0gMCA/IG1lY3NbMF0uaWQgOiBtZWNzWzBdLmxlYWZD
b21wb25lbnRUeXBlKCkuaWQpID09IFR5cGVJZHMuVF9KYXZhTGFuZ09iamVjdCkgcmV0dXJuIG1l
Y3NbMV07CiAJCX0KQEAgLTM1NzcsNyArMzU4MCw3IEBACiAJCQkJb3RoZXJCb3VuZHNbcmFuaysr
XSA9IG1lYzsKIAkJCX0KIAkJfQotCQlUeXBlQmluZGluZyBpbnRlcnNlY3Rpb25UeXBlID0gZW52
aXJvbm1lbnQoKS5jcmVhdGVXaWxkY2FyZChudWxsLCAwLCBmaXJzdEJvdW5kLCBvdGhlckJvdW5k
cywgV2lsZGNhcmQuRVhURU5EUyk7ICAvLyBwYXNzIGNvbW1vbiBudWxsIGFubm90YXRpb25zIGJ5
IHN5bnRoZXNpemVkIGFubm90YXRpb24gYmluZGluZ3MuCisJCVR5cGVCaW5kaW5nIGludGVyc2Vj
dGlvblR5cGUgPSBlbnZpcm9ubWVudCgpLmNyZWF0ZVdpbGRjYXJkKG51bGwsIDAsIGZpcnN0Qm91
bmQsIG90aGVyQm91bmRzLCBXaWxkY2FyZC5FWFRFTkRTKTsKIAkJcmV0dXJuIGNvbW1vbkRpbSA9
PSAwID8gaW50ZXJzZWN0aW9uVHlwZSA6IGVudmlyb25tZW50KCkuY3JlYXRlQXJyYXlUeXBlKGlu
dGVyc2VjdGlvblR5cGUsIGNvbW1vbkRpbSk7CiAJfQog
</data>

          </attachment>
      

    </bug>

</bugzilla>