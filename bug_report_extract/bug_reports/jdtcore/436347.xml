<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>436347</bug_id>
          
          <creation_ts>2014-06-02 06:04:00 -0400</creation_ts>
          <short_desc>Regression: NegativeArraySizeException at org.eclipse.jdt.internal.core.ClassFileInfo.generateMethodInfos</short_desc>
          <delta_ts>2014-06-13 05:45:19 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          <see_also>https://bugs.eclipse.org/bugs/show_bug.cgi?id=437322</see_also>
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>critical</bug_severity>
          <target_milestone>4.4 RC4</target_milestone>
          
          <blocked>437322</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Heiko Kopp">heiko</reporter>
          <assigned_to name="shankha banerjee">shankhba</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>david_williams</cc>
    
    <cc>heiko</cc>
    
    <cc>jarthana</cc>
    
    <cc>manpalat</cc>
    
    <cc>markus_keller</cc>
    
    <cc>shankhba</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="62866"
          type_id="1"
          status="+"
          setter="jarthana"
    />
    <flag name="review"
          id="62867"
          type_id="1"
          status="+"
          setter="markus_keller"
    />
    <flag name="review"
          id="62868"
          type_id="1"
          status="+"
          setter="manpalat"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2411133</commentid>
    <comment_count>0</comment_count>
    <who name="Heiko Kopp">heiko</who>
    <bug_when>2014-06-02 06:04:47 -0400</bug_when>
    <thetext>Hello,

updating a complex Maven Project leads to the following error:

java.lang.NegativeArraySizeException
	at org.eclipse.jdt.internal.core.ClassFileInfo.generateMethodInfos(ClassFileInfo.java:273)
	at org.eclipse.jdt.internal.core.ClassFileInfo.readBinaryChildren(ClassFileInfo.java:420)
	at org.eclipse.jdt.internal.core.ClassFile.buildStructure(ClassFile.java:98)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.SourceRefElement.generateInfos(SourceRefElement.java:107)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:557)
	at org.eclipse.jdt.internal.core.BinaryType.getElementInfo(BinaryType.java:287)
	at org.eclipse.jdt.internal.core.JavaElement.getElementInfo(JavaElement.java:280)
	at org.eclipse.jdt.internal.core.JavaElement.exists(JavaElement.java:198)
	at org.jboss.tools.common.util.EclipseJavaUtil.findType(EclipseJavaUtil.java:116)
	at org.jboss.tools.common.java.ParametedTypeFactory.getParametedType(ParametedTypeFactory.java:128)
	at org.jboss.tools.common.java.ParametedTypeFactory.getParametedType(ParametedTypeFactory.java:80)
	at org.jboss.tools.cdi.internal.core.impl.definition.ParameterDefinition.init(ParameterDefinition.java:43)
	at org.jboss.tools.cdi.internal.core.impl.definition.AbstractMemberDefinition.setAnnotatable(AbstractMemberDefinition.java:64)
	at org.jboss.tools.cdi.internal.core.impl.definition.ParameterDefinition.setLocalVariable(ParameterDefinition.java:37)
	at org.jboss.tools.cdi.internal.core.impl.definition.MethodDefinition.loadParamDefinitions(MethodDefinition.java:87)
	at org.jboss.tools.cdi.internal.core.impl.definition.MethodDefinition.init(MethodDefinition.java:63)
	at org.jboss.tools.cdi.internal.core.impl.definition.AbstractMemberDefinition.setAnnotatable(AbstractMemberDefinition.java:64)
	at org.jboss.tools.cdi.internal.core.impl.definition.MethodDefinition.setMethod(MethodDefinition.java:48)
	at org.jboss.tools.cdi.internal.core.impl.definition.TypeDefinition.init(TypeDefinition.java:70)
	at org.jboss.tools.cdi.internal.core.impl.definition.AbstractMemberDefinition.setAnnotatable(AbstractMemberDefinition.java:64)
	at org.jboss.tools.cdi.internal.core.impl.definition.AbstractTypeDefinition.setType(AbstractTypeDefinition.java:69)
	at org.jboss.tools.cdi.internal.core.impl.CDIProject.rebuildBeans(CDIProject.java:1310)
	at org.jboss.tools.cdi.internal.core.impl.CDIProject.update(CDIProject.java:1172)
	at org.jboss.tools.cdi.internal.core.impl.CDIProject.update(CDIProject.java:1199)
	at org.jboss.tools.cdi.internal.core.impl.definition.DefinitionContext.applyWorkingCopy(DefinitionContext.java:419)
	at org.jboss.tools.cdi.core.CDICoreBuilder.build(CDICoreBuilder.java:247)
	at org.eclipse.core.internal.events.BuildManager$2.run(BuildManager.java:734)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:206)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:246)
	at org.eclipse.core.internal.events.BuildManager$1.run(BuildManager.java:299)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.core.internal.events.BuildManager.basicBuild(BuildManager.java:302)
	at org.eclipse.core.internal.events.BuildManager.basicBuildLoop(BuildManager.java:358)
	at org.eclipse.core.internal.events.BuildManager.build(BuildManager.java:381)
	at org.eclipse.core.internal.events.AutoBuildJob.doBuild(AutoBuildJob.java:143)
	at org.eclipse.core.internal.events.AutoBuildJob.run(AutoBuildJob.java:241)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)

I have seen bug fixes for ArrayOutOfBoundsExceptions in this way but it seems the problem has not been fixed completely.

Regards,

Heiko


eclipse.buildId=4.4.0.I20140601-2000
java.fullversion=JRE 1.7.0 IBM J9 2.6 Windows 7 amd64-64 Compressed References 20140106_181350 (JIT enabled, AOT enabled)
J9VM - R26_Java726_SR6_20140106_1601_B181350
JIT  - r11.b05_20131003_47443.02
GC   - R26_Java726_SR6_20140106_1601_B181350_CMPRSS
J9CL - 20140106_181350
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=de_DE
Command-line arguments:  -os win32 -ws win32 -arch x86_64</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2412052</commentid>
    <comment_count>1</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2014-06-03 09:45:13 -0400</bug_when>
    <thetext>(In reply to Missing name Mising name from comment #0)
&gt; Hello,
&gt; 
&gt; updating a complex Maven Project leads to the following error:

Does it always happen?

Does it also happen when using 4.3.2?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2412419</commentid>
    <comment_count>2</comment_count>
    <who name="Heiko Kopp">heiko</who>
    <bug_when>2014-06-04 00:26:25 -0400</bug_when>
    <thetext>This problem only happens on a certain project, not always so I&apos;ve not found a way to produce it with other projects. However with this project it always happens.

It did not happen and does not happen for the very same project with 4.3.2, so its solely a 4.4.x problem.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2412473</commentid>
    <comment_count>3</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-06-04 04:25:17 -0400</bug_when>
    <thetext>Looks like fix to bug 406805 caused this, perhaps bug 436226 in another form.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2412486</commentid>
    <comment_count>4</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-06-04 04:45:39 -0400</bug_when>
    <thetext>(In reply to Missing name Mising name from comment #2)
&gt; This problem only happens on a certain project, not always so I&apos;ve not found
&gt; a way to produce it with other projects. However with this project it always
&gt; happens.
&gt; 
&gt; It did not happen and does not happen for the very same project with 4.3.2,
&gt; so its solely a 4.4.x problem.

There must be something different about the project. The problem happens with enum in binary format. During our testing, we found that both Javac and ours produce the additional two parameters, but in this case it appears to be not happening. Can you tell me what&apos;s the compliance level, JRE in build path etc. on that project?

Shankha, what&apos;s likelihood of not having those synthetic params in that code?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2412550</commentid>
    <comment_count>5</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-06-04 07:32:04 -0400</bug_when>
    <thetext>I can&apos;t think of a scenario where we would be missing the synthetic arguments to the enum constructors. Both Javac and eclipse appear to be emitting them consistently. My guess is this particular project&apos;s case, there were perhaps missing search results or unreported element.

Until we know what is wrong with the generated code, we can only talk of avoiding the exception and perhaps let it take the older execution path (i.e. prior to the fix to bug 406805).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2412589</commentid>
    <comment_count>6</comment_count>
    <who name="Heiko Kopp">heiko</who>
    <bug_when>2014-06-04 08:26:40 -0400</bug_when>
    <thetext>Hello,

the complience level is set to Java 1.6 as the development is done for WebSphere Application Server. Eclipse is running under

JDK 1.7.0 IBM J9 2.6 Windows 7 amd64-64 Compressed References 20140106_181350 (JIT enabled, AOT enabled)

from IBM, so maybe their compiler generates different code? The maven project setup heavily uses runtime enhancements like OpenJPA class enhancement as well as generation of classes for QueryDSL via maven-processor-plugin.

Hope this helps figuring out what goes wrong here.

Regards,

Heiko</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2412619</commentid>
    <comment_count>7</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-06-04 08:58:16 -0400</bug_when>
    <thetext>Heiko,

 Thanks for the information. The binaries that you using in the affected project - are these something you can share with us? At this point, do you know which library might be causing this?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2412712</commentid>
    <comment_count>8</comment_count>
      <attachid>243929</attachid>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-06-04 10:17:27 -0400</bug_when>
    <thetext>Created attachment 243929
Patch

1) A test case is added with no parameters.
2) Checks have been put in place not to copy parameters if the count is less than 2 for enum constructors.

Tests will finish in few minutes.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2412721</commentid>
    <comment_count>9</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-06-04 10:29:18 -0400</bug_when>
    <thetext>Thanks Shankha. 

The other option I would like to put on the table (for options sake) is revert the fix made for bug 406805.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2412803</commentid>
    <comment_count>10</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-06-04 11:00:04 -0400</bug_when>
    <thetext>(In reply to shankha banerjee from comment #8)
Test results are good.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2412836</commentid>
    <comment_count>11</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2014-06-04 11:20:17 -0400</bug_when>
    <thetext>To be explicit, is then then yet another change to the compiler? So we will have another &quot;final version&quot;?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2412850</commentid>
    <comment_count>12</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-06-04 11:28:55 -0400</bug_when>
    <thetext>Okay, just to see if I understood the patch right, we extract the synthetic parameters only when the total no of parameters is &gt; 2. 

This is good, because this will leave all but Heiko&apos;s scenario untouched.

I see two possibilities in the buggy scenario:
1. The no of explicit parameters in the enum constructor is less than 2:
   Everything works as expected.

2. The no of explicit parameters in the enum constructor is more than 2:
   We will assume that there are synthetic params and extract them out. This will result in incompatible no of paramters and we will loose the parameter names, which will be substituted by arg0 etc.

Shankha, is this elaboration correct?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2412852</commentid>
    <comment_count>13</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-06-04 11:29:33 -0400</bug_when>
    <thetext>(In reply to David Williams from comment #11)
&gt; To be explicit, is then then yet another change to the compiler? So we will
&gt; have another &quot;final version&quot;?

I won&apos;t worry about this. This doesn&apos;t affect the compiler part of JDT Core.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2412923</commentid>
    <comment_count>14</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-06-04 12:14:28 -0400</bug_when>
    <thetext>Stephan, I am not sure if you will find time today, but if you do, please take a look at the options we have. TIA!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2412933</commentid>
    <comment_count>15</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2014-06-04 12:27:19 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #13)
&gt; (In reply to David Williams from comment #11)
&gt; &gt; To be explicit, is then then yet another change to the compiler? So we will
&gt; &gt; have another &quot;final version&quot;?
&gt; 
&gt; I won&apos;t worry about this. This doesn&apos;t affect the compiler part of JDT Core.

Ok, I won&apos;t worry about &quot;changing compiler version&quot; right now ... but ... in our build and maven repo we put in all of &quot;org.eclipse.jdt.core&quot; as &quot;the compiler&quot;, so we&apos;ll want/need to be sure to update/fix our &quot;version list&quot; in bug 436481 (even though the &quot;compiler inside it&quot; is the same).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2412963</commentid>
    <comment_count>16</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-06-04 12:59:25 -0400</bug_when>
    <thetext>(In reply to David Williams from comment #15)
&gt; Ok, I won&apos;t worry about &quot;changing compiler version&quot; right now ... but ... in
&gt; our build and maven repo we put in all of &quot;org.eclipse.jdt.core&quot; as &quot;the
&gt; compiler&quot;, so we&apos;ll want/need to be sure to update/fix our &quot;version list&quot; in
&gt; bug 436481 (even though the &quot;compiler inside it&quot; is the same).

Sure, as you mentioned in bug 436481, it&apos;s better that we wait.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2412964</commentid>
    <comment_count>17</comment_count>
      <attachid>243947</attachid>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-06-04 13:00:13 -0400</bug_when>
    <thetext>Created attachment 243947
Hacked Color.class whose &lt;init&gt; has signature ()V

Here&apos;s a hacked 1.7 class file for enum Color with two constructors: One with signature ()V, and one with signature (Ljava/lang/String;ILjava/lang/String;)V

package test;
public enum Color {
	RED, GREEN, BLUES
}

I didn&apos;t change anything else, so the VM will (correctly) throw a VerifyError if you try to load the class file. But you can put it into a class folder and see that Eclipse 4.4 RC3 throws the NegativeArraySizeException, and that Shankha&apos;s patch from comment 8 fixes the problem.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2412965</commentid>
    <comment_count>18</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-06-04 13:00:43 -0400</bug_when>
    <thetext>(In reply to shankha banerjee from comment #8)
&gt; Created attachment 243929 [details] [diff]
&gt; Patch

+1 for 4.4 RC4.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2412970</commentid>
    <comment_count>19</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-06-04 13:07:40 -0400</bug_when>
    <thetext>Ran into mid-air collision. Here&apos;s what I had set out to post:

(In reply to Jayaprakash Arthanareeswaran from comment #12)
&gt; Shankha, is this elaboration correct?

Had a discussion with Shankha and we both agree that hypothetically speaking, the damage will be loosing out on the parameter names. 

That will be more or less same as the bug that we fixed via bug 406805, but for a rare test case, one we don&apos;t yet know to reproduce.

So, as far as risk assessment goes, I would say this is the lesser evil pertaining to a rare and (yet) unknown use case.

Update: Thanks Markus for coming up with that case.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2412996</commentid>
    <comment_count>20</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-06-04 13:29:59 -0400</bug_when>
    <thetext>Thanks everyone, I will release the patch after some more tests in a bit.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2413011</commentid>
    <comment_count>21</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-06-04 13:54:40 -0400</bug_when>
    <thetext>Released in master via:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=c0f9341badc01719d6b4f4d3ab99e20a8dc0821a</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2413015</commentid>
    <comment_count>22</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-06-04 13:56:15 -0400</bug_when>
    <thetext>Heiko, I would appreciate if you can spare sometime testing out the next I build and see if it works well for you. TIA!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2413220</commentid>
    <comment_count>23</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-06-04 22:54:45 -0400</bug_when>
    <thetext>Hi Heiko,

The latest build with this fix is available for download here:

http://download.eclipse.org/eclipse/downloads/drops4/I20140604-2000/

Could you download and verify that the fix works for you? Thanks!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2413259</commentid>
    <comment_count>24</comment_count>
    <who name="Heiko Kopp">heiko</who>
    <bug_when>2014-06-05 02:30:16 -0400</bug_when>
    <thetext>Hello,

I can confirm that this fix works as expected. The program now incrementally builds fine again without any exceptions.

Thanks for the fast fix.

Heiko</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2413271</commentid>
    <comment_count>25</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-06-05 02:53:32 -0400</bug_when>
    <thetext>(In reply to Heiko Kopp from comment #24)
&gt; Hello,
&gt; 
&gt; I can confirm that this fix works as expected. The program now incrementally
&gt; builds fine again without any exceptions.
&gt; 
&gt; Thanks for the fast fix.
&gt; 
&gt; Heiko

Thanks for confirming! Marking as verified:

Verified for Luna RC4 with build I20140604-2000.

Heiko, What we have put in is only a stop gap fix. There probably is more to the bug. Is there any chance we can get access to the affected project or library that is causing the grief?  We would like to get to the root of the issue, so this doesn&apos;t come back and bite us again.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2413691</commentid>
    <comment_count>26</comment_count>
    <who name="Heiko Kopp">heiko</who>
    <bug_when>2014-06-05 12:10:54 -0400</bug_when>
    <thetext>Hello,

thats my problem here, I can&apos;t really give any sources and or binaries away, as this is closed source from one of our customers.

I&apos;ve tried to build JDT-Core as plugin to run in debug mode, but failed yesterday (too many missing maven dependencies). I&apos;ve to check into this more closely. Is there any documentation on how to get JDT to run in debug mode within a second eclipse? I could in that case set a break point at the problematic position (where you put the if-clause in the fix) and check what enum is the problem. 

Another way would be that you provide an output of the erroneous type (preferably in the error console) so that I can easily find it. I think I could share the enum source and binary, cause most enums we use do not contain anything classified.

Regards,

Heiko</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2413700</commentid>
    <comment_count>27</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-06-05 12:37:53 -0400</bug_when>
    <thetext>(In reply to Heiko Kopp from comment #26)
&gt; Another way would be that you provide an output of the erroneous type
&gt; (preferably in the error console) so that I can easily find it. I think I
&gt; could share the enum source and binary, cause most enums we use do not
&gt; contain anything classified.

We will be happy to provide you a plug-in patch for JDT Core that you overwrite the one on your eclipse installation with). That sounds okay?

Shankha, please add a statement that dumps the state (when the enum constructor has less than 2 parameters) and create the jdt.core bundle with the version I20140604-2000, assuming that&apos;s the one Heiko will test it with.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2413703</commentid>
    <comment_count>28</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-06-05 12:46:43 -0400</bug_when>
    <thetext>Just in case:

(In reply to Heiko Kopp from comment #26)
&gt; I&apos;ve tried to build JDT-Core as plugin to run in debug mode, but failed
&gt; yesterday (too many missing maven dependencies). I&apos;ve to check into this
&gt; more closely. Is there any documentation on how to get JDT to run in debug
&gt; mode within a second eclipse? 

No need to use Maven for a workspace project. If you import the org.eclipse.jdt.core project as-is into a workspace, the existing .project and .classpath (plus .settings/) should be all that&apos;s needed to configure the project. The base Eclipse should provide all dependencies via PDE.

Once you have this, simply create a launch configuration of type &quot;Eclipse Application&quot; and you should be all set for debugging.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2413758</commentid>
    <comment_count>29</comment_count>
    <who name="Heiko Kopp">heiko</who>
    <bug_when>2014-06-05 14:28:08 -0400</bug_when>
    <thetext>Hello,

thank you. It worked perfectly. I&apos;ve some more information now, cause I know which enumeration causes this problem. You won&apos;t believe it, but I bet you know what the problem is, when you see what artifact the enumeration belongs to. It is not even in our own code, so I do not have to send you anything ;-)

enum InterceptionType 
[in InterceptionType.class 
   [in javax.enterprise.inject.spi 
      [in C:\ws\maven_repository\javax\javaee-api\6.0\javaee-api-6.0.jar]]]

It is a dependency to the god forsaken javaee-api-6.0.jar (which we did not import directly, but is a transitive dependency.

As far as I know, these jar files contain the API stripped by all their method bodies and god knows what else.

For this file, my conditional break point set at line 273 in ClassFileInfo.java with the condition &apos;length &lt; 0&apos; hit.

Hope this helps you!

Regards,

Heiko</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2413760</commentid>
    <comment_count>30</comment_count>
    <who name="Heiko Kopp">heiko</who>
    <bug_when>2014-06-05 14:34:23 -0400</bug_when>
    <thetext>Content of the InterceptionType.class extracted via Java Decompiler:

package javax.enterprise.inject.spi;

public enum InterceptionType
{
  private InterceptionType();
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2413887</commentid>
    <comment_count>31</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-06-05 21:56:37 -0400</bug_when>
    <thetext>(In reply to Heiko Kopp from comment #30)
I see the following output through dissembler:


InterceptionType.class:

 private javax.enterprise.inject.spi.InterceptionType();
    descriptor: ()V
    flags: ACC_PRIVATE

The descriptor does not have synthetic arguments.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2413889</commentid>
    <comment_count>32</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-06-05 22:02:34 -0400</bug_when>
    <thetext>I will dig a little bit into it. e.g

(1) Is it mandatory to generate two synthetic arguments to a enum constructor. 
(2) Are there any java compilers which do not follow the behavior of javac and eclipse with respect to this scenario.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2413894</commentid>
    <comment_count>33</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-06-05 23:01:31 -0400</bug_when>
    <thetext>public class X{
    enum Y{}
} 

---
generated class file:
public X();
    descriptor: ()V
---

A descriptor with no synthetic signatures.
Similar behavior with oracle and eclipse compiler.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2414704</commentid>
    <comment_count>34</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-06-09 10:04:36 -0400</bug_when>
    <thetext>(In reply to shankha banerjee from comment #33)
&gt; public class X{
&gt;     enum Y{}
&gt; } 
&gt; 
&gt; ---
&gt; generated class file:
&gt; public X();
&gt;     descriptor: ()V
&gt; ---
&gt; 
&gt; A descriptor with no synthetic signatures.
&gt; Similar behavior with oracle and eclipse compiler.
&gt; 
&gt; Thanks

The assembler output confused me. The synthetic parameters are added to the
class file, even for this example. So as of now I do not have a test case through which I can reproduce the scenario in the bug.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2416454</commentid>
    <comment_count>35</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2014-06-12 18:01:21 -0400</bug_when>
    <thetext>(In reply to shankha banerjee from comment #34)
&gt; (In reply to shankha banerjee from comment #33)
&gt; &gt; public class X{
&gt; &gt;     enum Y{}
&gt; &gt; } 
&gt; &gt; 
&gt; &gt; ---
&gt; &gt; generated class file:
&gt; &gt; public X();
&gt; &gt;     descriptor: ()V
&gt; &gt; ---
&gt; &gt; 
&gt; &gt; A descriptor with no synthetic signatures.
&gt; &gt; Similar behavior with oracle and eclipse compiler.
&gt; &gt; 
&gt; &gt; Thanks
&gt; 
&gt; The assembler output confused me. The synthetic parameters are added to the
&gt; class file, even for this example. So as of now I do not have a test case
&gt; through which I can reproduce the scenario in the bug.
&gt; 
&gt; Thanks

Guys, please capture the follow-up discussion in a new bug that we eventually fix later.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2416493</commentid>
    <comment_count>36</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-06-12 23:07:17 -0400</bug_when>
    <thetext>Please see Bug 437322 for further discussions.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>243929</attachid>
            <date>2014-06-04 10:17:00 -0400</date>
            <delta_ts>2014-06-04 10:17:27 -0400</delta_ts>
            <desc>Patch</desc>
            <filename>patch.patch</filename>
            <type>text/plain</type>
            <size>4073</size>
            <attacher name="shankha banerjee">shankhba</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9kb20vQVNUQ29udmVydGVyMThUZXN0LmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
ZG9tL0FTVENvbnZlcnRlcjE4VGVzdC5qYXZhCmluZGV4IGIzNTIzNTQuLjhmM2JkOWYgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9kb20vQVNUQ29udmVydGVyMThUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Rv
bS9BU1RDb252ZXJ0ZXIxOFRlc3QuamF2YQpAQCAtNDY0NCw0ICs0NjQ0LDY2IEBAIHB1YmxpYyB2
b2lkIHRlc3Q0MDY4MDVkKCkgdGhyb3dzIENvcmVFeGNlcHRpb24sIElPRXhjZXB0aW9uIHsKIAkJ
cmVtb3ZlTGlicmFyeShqYXZhUHJvamVjdCwgamFyTmFtZSwgc3JjTmFtZSk7CiAJfQogfQorCisv
L0J1ZyA0MzYzNDcgLSBSZWdyZXNzaW9uOiBOZWdhdGl2ZUFycmF5U2l6ZUV4Y2VwdGlvbiBhdCBv
cmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS5DbGFzc0ZpbGVJbmZvLmdlbmVyYXRlTWV0aG9k
SW5mb3MKKy8vaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQz
NjM0NworLy9FbnVtIGNvbnN0cnVjdG9yIHdpdGggbm8gcGFyYW1ldGVycy4KK3B1YmxpYyB2b2lk
IHRlc3Q0MzYzNDcoKSB0aHJvd3MgQ29yZUV4Y2VwdGlvbiwgSU9FeGNlcHRpb24geworCVN0cmlu
ZyBjb250ZW50czEgPQorCQkJInBhY2thZ2UgdGVzdDQzNjM0NztcbiIgKworCQkJInB1YmxpYyBj
bGFzcyBYIHtcbiIgKworCQkJIn0iOworCWNyZWF0ZUZvbGRlcigiL0NvbnZlcnRlcjE4L3NyYy90
ZXN0NDM2MzQ3Iik7CisJY3JlYXRlRmlsZSgiL0NvbnZlcnRlcjE4L3NyYy90ZXN0NDM2MzQ3L1gu
amF2YSIsIGNvbnRlbnRzMSk7CisJdGhpcy53b3JraW5nQ29weSA9IGdldFdvcmtpbmdDb3B5KAor
CQkJIi9Db252ZXJ0ZXIxOC9zcmMvdGVzdDQzNjM0Ny9YLmphdmEiLAorCQkJY29udGVudHMxLAor
CQkJdHJ1ZQorCQkpOworCisJU3RyaW5nIGphck5hbWUgPSAiZ2V0UGFyYW1ldGVycy5qYXIiOwor
CVN0cmluZyBzcmNOYW1lID0gImdldFBhcmFtZXRlcnNfc3JjLnppcCI7CisJZmluYWwgSUphdmFQ
cm9qZWN0IGphdmFQcm9qZWN0ID0gdGhpcy53b3JraW5nQ29weS5nZXRKYXZhUHJvamVjdCgpOwor
CXRyeSB7CisJU3RyaW5nW10gY29udGVudHMgPSBuZXcgU3RyaW5nW10geworCQkiVGVzdEVudW0u
amF2YSIsCisJCSJwYWNrYWdlIHRlc3Q0MzYzNDc7XG4iICsKKwkJInB1YmxpYyBlbnVtIFRlc3RF
bnVtIHtcbiIgKworCQkiCUZpcnN0VmFsdWUoKSB7XG4iICsKKwkJIgkJQE92ZXJyaWRlXG4iICsK
KwkJIgkJcHVibGljIFN0cmluZyB0b1N0cmluZygpIHtcbiIgKworCQkiCQkJcmV0dXJuIHN1cGVy
LnRvU3RyaW5nKCk7XG4iICsKKwkJIgkJfVxuIiArCisJCSIJfSxcbiIgKworCQkiCVNlY29uZFZh
bHVlKCk7XG4iICsKKwkJIglUZXN0RW51bSgpIHtcbiIgKworCQkiCQlyZXR1cm47XG4iICsKKwkJ
Igl9XG4iICsKKwkJIn0iCisJfTsKKwlhZGRMaWJyYXJ5KGphdmFQcm9qZWN0LCBqYXJOYW1lLCBz
cmNOYW1lLCBjb250ZW50cywgSmF2YUNvcmUuVkVSU0lPTl8xXzgpOworCisJQVNUUGFyc2VyIHBh
cnNlciA9IEFTVFBhcnNlci5uZXdQYXJzZXIoQVNULkpMUzgpOworCXBhcnNlci5zZXRJZ25vcmVN
ZXRob2RCb2RpZXModHJ1ZSk7CisJcGFyc2VyLnNldFByb2plY3QoamF2YVByb2plY3QpOworCUlU
eXBlIHR5cGUgPSBqYXZhUHJvamVjdC5maW5kVHlwZSgidGVzdDQzNjM0Ny5UZXN0RW51bSIpOwor
CUlCaW5kaW5nW10gYmluZGluZ3MgPSBwYXJzZXIuY3JlYXRlQmluZGluZ3MobmV3IElKYXZhRWxl
bWVudFtdIHsgdHlwZSB9LCBudWxsKTsKKwlJVHlwZUJpbmRpbmcgdHlwZUJpbmRpbmcgPSAoSVR5
cGVCaW5kaW5nKSBiaW5kaW5nc1swXTsKKwlJTWV0aG9kQmluZGluZ1tdIG1ldGhvZHMgPSB0eXBl
QmluZGluZy5nZXREZWNsYXJlZE1ldGhvZHMoKTsKKworCWZvciAoaW50IGkgPSAwLCBsZW5ndGgg
PSBtZXRob2RzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7CisJCUlNZXRob2RCaW5kaW5nIG1l
dGhvZCA9IG1ldGhvZHNbaV07CisJCWlmIChtZXRob2QuaXNDb25zdHJ1Y3RvcigpKSB7CisJCQlS
ZXNvbHZlZEJpbmFyeU1ldGhvZCBibSA9IChSZXNvbHZlZEJpbmFyeU1ldGhvZCkgbWV0aG9kLmdl
dEphdmFFbGVtZW50KCk7CisJCQlhc3NlcnRUcnVlKGJtLmdldFBhcmFtZXRlck5hbWVzKCkubGVu
Z3RoID09IDApOworCQkJYXNzZXJ0VHJ1ZShibS5nZXRQYXJhbWV0ZXJUeXBlcygpLmxlbmd0aCA9
PSAwKTsKKwkJfQorCX0KKwl9IGZpbmFsbHkgeworCQlyZW1vdmVMaWJyYXJ5KGphdmFQcm9qZWN0
LCBqYXJOYW1lLCBzcmNOYW1lKTsKKwl9Cit9CisKKwogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvQmluYXJ5TWV0
aG9kLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29yZS9CaW5hcnlNZXRob2QuamF2YQppbmRleCAxY2VkNTkyLi40MjFmNjBjIDEwMDY0
NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29yZS9CaW5hcnlNZXRob2QuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2Rl
bC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9CaW5hcnlNZXRob2QuamF2YQpAQCAtMjc4
LDcgKzI3OCw4IEBAIHB1YmxpYyBTdHJpbmdbXSBnZXRQYXJhbWV0ZXJOYW1lcygpIHRocm93cyBK
YXZhTW9kZWxFeGNlcHRpb24gewogCQkJCSYmICFGbGFncy5pc1N0YXRpYyhkZWNsYXJpbmdUeXBl
LmdldEZsYWdzKCkpKSB7CiAJCQlwYXJhbUNvdW50LS07IC8vIHJlbW92ZSBzeW50aGV0aWMgYXJn
dW1lbnQgZnJvbSBjb25zdHJ1Y3RvciBwYXJhbSBjb3VudAogCQl9IGVsc2UgaWYgKGRlY2xhcmlu
Z1R5cGUuaXNFbnVtKCkpIHsKLQkJCXBhcmFtQ291bnQgLT0gMjsKKwkJCWlmIChwYXJhbUNvdW50
ID49IDIpCisJCQkJcGFyYW1Db3VudCAtPSAyOwogCQl9CiAJfQogCmRpZmYgLS1naXQgYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9DbGFz
c0ZpbGVJbmZvLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29yZS9DbGFzc0ZpbGVJbmZvLmphdmEKaW5kZXggNDRiM2U0YS4uM2QxZmJj
YSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvcmUvQ2xhc3NGaWxlSW5mby5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0NsYXNzRmlsZUluZm8uamF2
YQpAQCAtMjcwLDcgKzI3MCw4IEBAIHByaXZhdGUgdm9pZCBnZW5lcmF0ZU1ldGhvZEluZm9zKElU
eXBlIHR5cGUsIElCaW5hcnlUeXBlIHR5cGVJbmZvLCBIYXNoTWFwIG5ld0VsCiAJCQlpZiAoaXNF
bnVtICYmIGlzQ29uc3RydWN0b3IpIHsKIAkJCQlwTmFtZXMgPSBTaWduYXR1cmUuZ2V0UGFyYW1l
dGVyVHlwZXMobmV3IFN0cmluZyhzaWduYXR1cmUpKTsKIAkJCQlpbnQgbGVuZ3RoID0gcE5hbWVz
Lmxlbmd0aCAtIDI7Ci0JCQkJU3lzdGVtLmFycmF5Y29weShwTmFtZXMsIDIsIHBOYW1lcyA9IG5l
dyBTdHJpbmdbbGVuZ3RoXSwgMCwgbGVuZ3RoKTsKKwkJCQlpZiAobGVuZ3RoID49IDApCisJCQkJ
CVN5c3RlbS5hcnJheWNvcHkocE5hbWVzLCAyLCBwTmFtZXMgPSBuZXcgU3RyaW5nW2xlbmd0aF0s
IDAsIGxlbmd0aCk7CiAJCQl9CiAJCX0KIAkJU3RyaW5nIHNlbGVjdG9yID0gbmV3IFN0cmluZyht
ZXRob2RJbmZvLmdldFNlbGVjdG9yKCkpOwo=
</data>
<flag name="review"
          id="62865"
          type_id="6"
          status="?"
          setter="shankhba"
    />
          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>243947</attachid>
            <date>2014-06-04 13:00:00 -0400</date>
            <delta_ts>2014-06-04 13:00:13 -0400</delta_ts>
            <desc>Hacked Color.class whose &lt;init&gt; has signature ()V</desc>
            <filename>Color.class</filename>
            <type>application/octet-stream</type>
            <size>1025</size>
            <attacher name="Markus Keller">markus_keller</attacher>
            
              <data encoding="base64">yv66vgAAADMAMwEACnRlc3QvQ29sb3IHAAEBAB5MamF2YS9sYW5nL0VudW08THRlc3QvQ29sb3I7
PjsBAA5qYXZhL2xhbmcvRW51bQcABAEACkNvbG9yLmphdmEBAANSRUQBAAxMdGVzdC9Db2xvcjsB
AAVHUkVFTgEABUJMVUVTAQALRU5VTSRWQUxVRVMBAA1bTHRlc3QvQ29sb3I7AQAIPGNsaW5pdD4B
AAMoKVYIAAcBAAY8aW5pdD4BABYoTGphdmEvbGFuZy9TdHJpbmc7SSlWDAAQABEKAAIAEgwABwAI
CQACABQIAAkMAAkACAkAAgAXCAAKDAAKAAgJAAIAGgwACwAMCQACABwKAAUAEgEABHRoaXMBACgo
TGphdmEvbGFuZy9TdHJpbmc7SUxqYXZhL2xhbmcvU3RyaW5nOylWAQAGdmFsdWVzAQAPKClbTHRl
c3QvQ29sb3I7AQAQamF2YS9sYW5nL1N5c3RlbQcAIwEACWFycmF5Y29weQEAKihMamF2YS9sYW5n
L09iamVjdDtJTGphdmEvbGFuZy9PYmplY3Q7SUkpVgwAJQAmCgAkACcBAAd2YWx1ZU9mAQAgKExq
YXZhL2xhbmcvU3RyaW5nOylMdGVzdC9Db2xvcjsBADUoTGphdmEvbGFuZy9DbGFzcztMamF2YS9s
YW5nL1N0cmluZzspTGphdmEvbGFuZy9FbnVtOwwAKQArCgAFACwBAARDb2RlAQAPTGluZU51bWJl
clRhYmxlAQASTG9jYWxWYXJpYWJsZVRhYmxlAQAJU2lnbmF0dXJlAQAKU291cmNlRmlsZUAxAAIA
BQAAAARAGQAHAAgAAEAZAAkACAAAQBkACgAIAAAQGgALAAwAAAAFAAgADQAOAAEALgAAAF0ABAAA
AAAAQbsAAlkSDwO3ABOzABW7AAJZEhYEtwATswAYuwACWRIZBbcAE7MAGwa9AAJZA7IAFVNZBLIA
GFNZBbIAG1OzAB2xAAAAAQAvAAAACgACAAAABAAnAAMAAgAQAA4AAQAuAAAAMQADAAMAAAAHKisc
twAesQAAAAIAMAAAAAwAAQAAAAcAHwAIAAAALwAAAAYAAQAAAAMAAgAQACAAAQAuAAAAMQADAAMA
AAAHKisctwAesQAAAAIAMAAAAAwAAQAAAAcAHwAIAAAALwAAAAYAAQAAAAMACQAhACIAAQAuAAAA
LgAFAAMAAAAWsgAdWUsDKr5ZPL0AAllNAxu4ACgssAAAAAEALwAAAAYAAQAAAAEACQApACoAAQAu
AAAAIgACAAEAAAAKEgIquAAtwAACsAAAAAEALwAAAAYAAQAAAAEAAgAxAAAAAgADADIAAAACAAY=
</data>

          </attachment>
      

    </bug>

</bugzilla>