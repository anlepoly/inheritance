<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>405066</bug_id>
          
          <creation_ts>2013-04-06 04:22:00 -0400</creation_ts>
          <short_desc>[1.8][compiler][codegen] Implement code generation infrastructure for JSR335.</short_desc>
          <delta_ts>2013-07-01 12:11:38 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>400875</blocked>
    
    <blocked>405067</blocked>
    
    <blocked>405068</blocked>
    
    <blocked>405069</blocked>
    
    <blocked>405070</blocked>
    
    <blocked>405071</blocked>
    
    <blocked>405104</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Jesper Moller">jesper</assigned_to>
          <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2240483</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-04-06 04:22:48 -0400</bug_when>
    <thetext>BETA_JAVA8:

This ER will be used to implement the infrastructure support for generating
code for lambda expressions and method references.

Among other things:

We need to add capability to generate:

 - ConstantPool sections for MethodHandles, MethodType, InvokeDynamic 
 - Attribute section for BootStrapMethods
 - Adding of InnerClass reference for MethodHandles.Lookup

The patch at https://bugs.eclipse.org/bugs/show_bug.cgi?id=400875 has
support for these. The infrastructure portion needs to be separated out,
reviewed and released.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2240724</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-04-07 23:53:04 -0400</bug_when>
    <thetext>(In reply to comment #0)

&gt; The patch at https://bugs.eclipse.org/bugs/show_bug.cgi?id=400875 has
&gt; support for these. The infrastructure portion needs to be separated out,
&gt; reviewed and released.

I am doing this now. I&apos;ll a post a patch shortly.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2241237</commentid>
    <comment_count>2</comment_count>
      <attachid>229476</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-04-09 01:20:41 -0400</bug_when>
    <thetext>Created attachment 229476
Jesper work for infrastructure changes

Here are changes I made:

(1) Added JCP disclaimer and updated copyright on all files.
(2) ClassFileConstants.java: Renamed MethodHandleRefKindInvokeNewSpecial
to be MethodHandleRefKindNewInvokeSpecial to be consistent with JVMS 4.4.8
(3) Opcodes.java: Inserted the new opcode in its proper place so as to
maintain the monotonically ascending sequence.
(4) Scope.java: we need to build some resilience for handling misconfigured
JREs. It looks like getJavaLangInvokeMethodHandlesLookup could return null ?
Will raise a follow up defect for this.
(5) TypeConstants.java: Deleted the new field JAVA_LANG_INVOKE_METHODHANDLES_LOOKUP  as it is unused. Rearranged the new
fields to minimize diffs.
(6) FunctionalExpression.java: Renamed the method getInstantiatedMethodType()
to be signature(), since that is after all what it is returning and that
signature is used in turn to materialize a MethodType.

Yet to be reviewed:

ClassFile.java
CodeStream.java
ConstantPool.java</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2244793</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-04-17 09:32:00 -0400</bug_when>
    <thetext>(In reply to comment #2)

&gt; Yet to be reviewed:
&gt; 
&gt; ClassFile.java
&gt; CodeStream.java
&gt; ConstantPool.java

Continuing review:

(7) CodeStream.java: invokeDynamic is missing bounds check and growing of
code stream byte array.

(8) ClassFile.java: Fixed a couple of compiler warnings in the original patch.

(9) ClassFile.java: renamed functionalBootstrapMethods to be bootstrapMethods,
Likewise, recordBootStrapMethod to recordBootstrapMethod and generateBootStrapMethods to generateBootstrapMethods 

(10) ClassFile.java: Changed bootstrapMethods from a being captured in a linked
list to an ArrayList. We don&apos;t seem to use LinkedList&apos;s at all the in the 
compiler and this can keep the footprint smaller for the batch compiler.

(11) ClassFile.java: changed ! this.bootstrapMethods.isEmpty() into
!this.bootstrapMethods.isEmpty() to be consistent with rest of code base.

(12) ClassFile.java: Changed formatting of this.bootstrapMethods.size()-1 to be
this.bootstrapMethods.size() - 1 to be consistent with rest of code base.

(13) ClassFile.java: Replaced occurrence of
(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;
with ConstantPool.JAVA_LANG_INVOKE_LAMBDAMETAFACTORY_METAFACTORY_SIGNATURE

(14) ConstantPool.java: Eliminated a couple of unused fields.

(15) Changed &quot;signature&quot; to &quot;descriptor&quot; in various places.

Implementation released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=ea1fe8ed052821b2b1ca5a7ad0079411db5ede64

Thanks Jesper.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2273825</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-06-18 07:27:37 -0400</bug_when>
    <thetext>I have a question regarding SourceTypeBinding.addSyntheticMethod(LambdaExpression).

I can&apos;t clearly associate which bug brought that method so I hope this is a good
place to discuss it.

Why do you store an array of accessor methods? Was this code copied from similar
situations where we indeed need e.g. a pair of get/set accessors?
Seeing the allocation of an array of length 1 makes me feel I&apos;m missing some point.

Hidden design or bug?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2273848</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-06-18 08:32:29 -0400</bug_when>
    <thetext>Next is a design question:

Why is outerLocalVariables a field of LambdaExpression?
In previous code SyntheticArgumentBinding are stored in bindings (NestedTypeBinding) or scope (MethodScope) but never in ast nodes.

I&apos;m not sure about motivation for the existing design (ability to discard information that is only connected to the scope _might_ play a role), but I guess every deviation from existing design should have a good reason behind. Could you please explain? Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2279283</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-07-01 05:32:59 -0400</bug_when>
    <thetext>(In reply to comment #4)

&gt; Why do you store an array of accessor methods? Was this code copied from
&gt; similar
&gt; situations where we indeed need e.g. a pair of get/set accessors?
&gt; Seeing the allocation of an array of length 1 makes me feel I&apos;m missing some
&gt; point.

Sorry for the delay in responding to this. 
&gt; 
&gt; Hidden design or bug?

I would say it is an attempt to play along with the existing infrastructure
and co-exist harmoniously.

See that STB#syntheticMethods() does a 

while (methodArrayIterator.hasNext()) {
		SyntheticMethodBinding[] methodAccessors = (SyntheticMethodBinding[]) methodArrayIterator.next();

OIOW, there is a presumption that the values element of the hashmap is an
array of SMBs.

For prior art see:

addSyntheticEnumMethod: which allocates an array of two entries, but uses
only one element of it - so we are actually doing better by allocating just
a single cell array where we know it would suffice.

Also addSyntheticMethodForSwitchEnum, addSyntheticMethodForEnumInitialization
addSyntheticBridgeMethod (both overloaded versions) - these all use only one
cell of the array, but still opt for the array to co-exist and to avoid a CCE.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2279287</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-07-01 05:46:11 -0400</bug_when>
    <thetext>(In reply to comment #5)
&gt; Next is a design question:
&gt; 
&gt; Why is outerLocalVariables a field of LambdaExpression?
&gt; In previous code SyntheticArgumentBinding are stored in bindings
&gt; (NestedTypeBinding) or scope (MethodScope) but never in ast nodes.

I haven&apos;t (re)looked into how captured locals are tracked for local classes,
but it looks most natural that a lambda&apos;s state would include information
of what outer local it accesses. Yes, technically this decoration could happen 
on the MethodBinding, but given we don&apos;t have a special kind for lambdas we
would increase memory pressure - I admit that is a post facto defense and a
weak one at that.

Looking at the uses of this variable, it looks quite natural that it belongs
in the AST node - all uses are from the AST node and it is a private field.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2279490</commentid>
    <comment_count>8</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-07-01 12:11:38 -0400</bug_when>
    <thetext>(In reply to comment #6)
&gt; (In reply to comment #4)
&gt; 
&gt; &gt; Why do you store an array of accessor methods? Was this code copied from
&gt; &gt; similar
&gt; &gt; situations where we indeed need e.g. a pair of get/set accessors?
&gt; &gt; Seeing the allocation of an array of length 1 makes me feel I&apos;m missing some
&gt; &gt; point.
&gt; 
&gt; Sorry for the delay in responding to this. 
&gt; &gt; 
&gt; &gt; Hidden design or bug?
&gt; 
&gt; I would say it is an attempt to play along with the existing infrastructure
&gt; and co-exist harmoniously.
&gt; 
&gt; See that STB#syntheticMethods() does a 
&gt; 
&gt; while (methodArrayIterator.hasNext()) {
&gt; 		SyntheticMethodBinding[] methodAccessors = (SyntheticMethodBinding[])
&gt; methodArrayIterator.next();

You&apos;re right, this snippet makes the underlying assumption explicit.
I was confused by seeing single elements in the FIELD_EMUL slot of the
same structure.

I could still argue that an explicit instanceof is probably cheaper than
creating 1-elem arrays, but at this point it&apos;s probably not very relevant
after all. The code is consistent for all METHOD_EMUL and that&apos;s good.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>229476</attachid>
            <date>2013-04-09 01:20:00 -0400</date>
            <delta_ts>2013-04-09 01:20:41 -0400</delta_ts>
            <desc>Jesper work for infrastructure changes</desc>
            <filename>Codegen-infrastructure.patch</filename>
            <type>text/plain</type>
            <size>26798</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9DbGFzc0ZpbGUuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9DbGFzc0ZpbGUuamF2
YQppbmRleCA0NWE4MjA3Li4xMzMwNGVlIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvQ2xhc3NGaWxlLmph
dmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL0NsYXNzRmlsZS5qYXZhCkBAIC0xMSw2ICsxMSw4IEBACiAgKgogICog
Q29udHJpYnV0b3JzOgogICogICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJIGFuZCBp
bXBsZW1lbnRhdGlvbgorICogICAgIEplc3BlciBTIE1vbGxlciAtIENvbnRyaWJ1dGlvbnMgZm9y
CisgKgkJCQkJCQlCdWcgNDA1MDY2IC0gWzEuOF1bY29tcGlsZXJdW2NvZGVnZW5dIEltcGxlbWVu
dCBjb2RlIGdlbmVyYXRpb24gaW5mcmFzdHJ1Y3R1cmUgZm9yIEpTUjMzNSAgICAgICAgICAgICAK
ICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqLwogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJu
YWwuY29tcGlsZXI7CiAKQEAgLTIxLDYgKzIzLDcgQEAKIGltcG9ydCBqYXZhLnV0aWwuSGFzaE1h
cDsKIGltcG9ydCBqYXZhLnV0aWwuSGFzaFNldDsKIGltcG9ydCBqYXZhLnV0aWwuSXRlcmF0b3I7
CitpbXBvcnQgamF2YS51dGlsLkxpbmtlZExpc3Q7CiBpbXBvcnQgamF2YS51dGlsLkxpc3Q7CiBp
bXBvcnQgamF2YS51dGlsLk1hcDsKIGltcG9ydCBqYXZhLnV0aWwuU2V0OwpAQCAtMzcsNiArNDAs
NyBAQAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuQ2xhc3NM
aXRlcmFsQWNjZXNzOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5h
c3QuRXhwcmVzc2lvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
YXN0LkZpZWxkRGVjbGFyYXRpb247CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNv
bXBpbGVyLmFzdC5GdW5jdGlvbmFsRXhwcmVzc2lvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIuYXN0Lk1lbWJlclZhbHVlUGFpcjsKIGltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0Lk1ldGhvZERlY2xhcmF0aW9uOwogaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuTm9ybWFsQW5ub3RhdGlvbjsKQEAg
LTExNyw2ICsxMjEsNyBAQAogCS8vIHRoYXQgY29sbGVjdGlvbiBjb250YWlucyBhbGwgdGhlIHJl
bWFpbmluZyBieXRlcyBvZiB0aGUgLmNsYXNzIGZpbGUKIAlwdWJsaWMgaW50IGhlYWRlck9mZnNl
dDsKIAlwdWJsaWMgU2V0IGlubmVyQ2xhc3Nlc0JpbmRpbmdzOworCXB1YmxpYyBMaXN0IGJvb3RT
dHJhcE1ldGhvZHMgPSBudWxsOwogCXB1YmxpYyBpbnQgbWV0aG9kQ291bnQ7CiAJcHVibGljIGlu
dCBtZXRob2RDb3VudE9mZnNldDsKIAkvLyBwb29sIG1hbmFnbWVudApAQCAtMzQ2LDYgKzM1MSwx
MCBAQAogCQkJCXRoaXMubWlzc2luZ1R5cGVzID0gc3VwZXJJbnRlcmZhY2VzW2ldLmNvbGxlY3RN
aXNzaW5nVHlwZXModGhpcy5taXNzaW5nVHlwZXMpOwogCQkJfQogCQkJYXR0cmlidXRlc051bWJl
ciArPSBnZW5lcmF0ZUhpZXJhcmNoeUluY29uc2lzdGVudEF0dHJpYnV0ZSgpOworCQl9CisJCS8v
IEZ1bmN0aW9uYWwgZXhwcmVzc2lvbiBhbmQgbGFtYmRhIGJvb3RzdHJhcCBtZXRob2RzCisJCWlm
ICh0aGlzLmJvb3RTdHJhcE1ldGhvZHMgIT0gbnVsbCAmJiAhIHRoaXMuYm9vdFN0cmFwTWV0aG9k
cy5pc0VtcHR5KCkpIHsKKwkJCWF0dHJpYnV0ZXNOdW1iZXIgKz0gZ2VuZXJhdGVCb290U3RyYXBN
ZXRob2RzKHRoaXMuYm9vdFN0cmFwTWV0aG9kcyk7CiAJCX0KIAkJLy8gSW5uZXIgY2xhc3MgYXR0
cmlidXRlCiAJCWludCBudW1iZXJPZklubmVyQ2xhc3NlcyA9IHRoaXMuaW5uZXJDbGFzc2VzQmlu
ZGluZ3MgPT0gbnVsbCA/IDAgOiB0aGlzLmlubmVyQ2xhc3Nlc0JpbmRpbmdzLnNpemUoKTsKQEAg
LTIzOTQsNiArMjQwMyw3MSBAQAogCQl0aGlzLmNvbnRlbnRzT2Zmc2V0ID0gbG9jYWxDb250ZW50
c09mZnNldDsKIAkJcmV0dXJuIDE7CiAJfQorCisJcHJpdmF0ZSBpbnQgZ2VuZXJhdGVCb290U3Ry
YXBNZXRob2RzKExpc3QgZnVuY0xpc3QpIHsKKwkJLy8gR2VuZXJhdGUgYWNjb3JkaW5nIHRvIHRo
ZSBKVk0gc3BlYyA/NC43LjIxCisJCS8vVGhlIEJvb3RzdHJhcE1ldGhvZHMgYXR0cmlidXRlIGhh
cyB0aGUgZm9sbG93aW5nIGZvcm1hdDoKKwkJLy8gQm9vdHN0cmFwTWV0aG9kc19hdHRyaWJ1dGUg
eworCQkvLyAgICAgIHUyIGF0dHJpYnV0ZV9uYW1lX2luZGV4OworCQkvLyAgICAgIHU0IGF0dHJp
YnV0ZV9sZW5ndGg7CisJCS8vICAgICAgdTIgbnVtX2Jvb3RzdHJhcF9tZXRob2RzOworCQkvLyAg
ICAgIHsgICB1MiBib290c3RyYXBfbWV0aG9kX3JlZjsKKwkJLy8gICAgICAgICAgdTIgbnVtX2Jv
b3RzdHJhcF9hcmd1bWVudHM7CisJCS8vICAgICAgICAgIHUyIGJvb3RzdHJhcF9hcmd1bWVudHNb
bnVtX2Jvb3RzdHJhcF9hcmd1bWVudHNdOworCQkvLyAgICAgIH0gYm9vdHN0cmFwX21ldGhvZHNb
bnVtX2Jvb3RzdHJhcF9tZXRob2RzXTsKKwkJLy8gfQorCQkvLyBSZWNvcmQgaW5uZXIgY2xhc3Nl
cyBmb3IgTWV0aG9kSGFuZGxlcyRMb29rdXAKKwkJcmVjb3JkSW5uZXJDbGFzc2VzKHRoaXMucmVm
ZXJlbmNlQmluZGluZy5zY29wZS5nZXRKYXZhTGFuZ0ludm9rZU1ldGhvZEhhbmRsZXNMb29rdXAo
KSk7IC8vIFNob3VsZCBiZSBkb25lLCBpdCdzIHdoYXQgamF2YWMgZG9lcyBhbHNvCisJCVJlZmVy
ZW5jZUJpbmRpbmcgamF2YUxhbmdJbnZva2VMYW1iZGFNZXRhZmFjdG9yeSA9IHRoaXMucmVmZXJl
bmNlQmluZGluZy5zY29wZS5nZXRKYXZhTGFuZ0ludm9rZUxhbWJkYU1ldGFmYWN0b3J5KCk7IAor
CQlpbnQgaW5kZXhGb3JNZXRhRmFjdG9yeSA9IHRoaXMuY29uc3RhbnRQb29sLmxpdGVyYWxJbmRl
eEZvck1ldGhvZEhhbmRsZShDbGFzc0ZpbGVDb25zdGFudHMuTWV0aG9kSGFuZGxlUmVmS2luZElu
dm9rZVN0YXRpYywgamF2YUxhbmdJbnZva2VMYW1iZGFNZXRhZmFjdG9yeSwgCisJCQkJIm1ldGFG
YWN0b3J5Ii50b0NoYXJBcnJheSgpLCAiKExqYXZhL2xhbmcvaW52b2tlL01ldGhvZEhhbmRsZXMk
TG9va3VwO0xqYXZhL2xhbmcvU3RyaW5nO0xqYXZhL2xhbmcvaW52b2tlL01ldGhvZFR5cGU7TGph
dmEvbGFuZy9pbnZva2UvTWV0aG9kSGFuZGxlO0xqYXZhL2xhbmcvaW52b2tlL01ldGhvZEhhbmRs
ZTtMamF2YS9sYW5nL2ludm9rZS9NZXRob2RUeXBlOylMamF2YS9sYW5nL2ludm9rZS9DYWxsU2l0
ZTsiLnRvQ2hhckFycmF5KCksIGZhbHNlKTsgLy8kTk9OLU5MUy0xJCAvLyROT04tTkxTLTIkCisK
KwkJaW50IG51bWJlck9mQm9vdFN0cmFwcyA9IGZ1bmNMaXN0LnNpemUoKTsKKwkJaW50IGxvY2Fs
Q29udGVudHNPZmZzZXQgPSB0aGlzLmNvbnRlbnRzT2Zmc2V0OworCQkvLyBHZW5lcmF0ZSB0aGUg
Ym9vdCBzdHJhcCBhdHRyaWJ1dGUgLSBzaW5jZSB3ZSBhcmUgb25seSBtYWtpbmcgbGFtYmRhcyBh
bmQKKwkJLy8gZnVuY3Rpb25hbCBleHByZXNzaW9ucywgd2Uga25vdyB0aGUgc2l6ZSBhaGVhZCBv
ZiB0aW1lIC0gdGhpcyBsZXNzIGdlbmVyYWwKKwkJLy8gdGhhbiB0aGUgZnVsbCBpbnZva2VkeW5h
bWljIHNjb3BlLCBidXQgZmluZSBmb3IgSmF2YSA4CisJCWludCBleFNpemUgPSAxMCAqIG51bWJl
ck9mQm9vdFN0cmFwcyArIDg7CisJCWlmIChleFNpemUgKyBsb2NhbENvbnRlbnRzT2Zmc2V0ID49
IHRoaXMuY29udGVudHMubGVuZ3RoKSB7CisJCQlyZXNpemVDb250ZW50cyhleFNpemUpOworCQl9
CisJCXRoaXMuY29udGVudHNPZmZzZXQgKz0gZXhTaXplOyAvLyBTa2lwIHBhc3QsIGFuZCBvbmx5
IHVzZSB0aGUgcmVjb3JkZWQgb2Zmc2V0CisJCS8vIE5vdyB3ZSBub3cgdGhlIHNpemUgb2YgdGhl
IGF0dHJpYnV0ZSBhbmQgdGhlIG51bWJlciBvZiBlbnRyaWVzCisJCS8vIGF0dHJpYnV0ZSBuYW1l
CisJCWludCBhdHRyaWJ1dGVOYW1lSW5kZXggPQorCQkJdGhpcy5jb25zdGFudFBvb2wubGl0ZXJh
bEluZGV4KEF0dHJpYnV0ZU5hbWVzQ29uc3RhbnRzLkJvb3RzdHJhcE1ldGhvZHNOYW1lKTsKKwkJ
dGhpcy5jb250ZW50c1tsb2NhbENvbnRlbnRzT2Zmc2V0KytdID0gKGJ5dGUpIChhdHRyaWJ1dGVO
YW1lSW5kZXggPj4gOCk7CisJCXRoaXMuY29udGVudHNbbG9jYWxDb250ZW50c09mZnNldCsrXSA9
IChieXRlKSBhdHRyaWJ1dGVOYW1lSW5kZXg7CisJCWludCB2YWx1ZSA9IChudW1iZXJPZkJvb3RT
dHJhcHMgKiAxMCkgKyAyOworCQl0aGlzLmNvbnRlbnRzW2xvY2FsQ29udGVudHNPZmZzZXQrK10g
PSAoYnl0ZSkgKHZhbHVlID4+IDI0KTsKKwkJdGhpcy5jb250ZW50c1tsb2NhbENvbnRlbnRzT2Zm
c2V0KytdID0gKGJ5dGUpICh2YWx1ZSA+PiAxNik7CisJCXRoaXMuY29udGVudHNbbG9jYWxDb250
ZW50c09mZnNldCsrXSA9IChieXRlKSAodmFsdWUgPj4gOCk7CisJCXRoaXMuY29udGVudHNbbG9j
YWxDb250ZW50c09mZnNldCsrXSA9IChieXRlKSB2YWx1ZTsKKwkJdGhpcy5jb250ZW50c1tsb2Nh
bENvbnRlbnRzT2Zmc2V0KytdID0gKGJ5dGUpIChudW1iZXJPZkJvb3RTdHJhcHMgPj4gOCk7CisJ
CXRoaXMuY29udGVudHNbbG9jYWxDb250ZW50c09mZnNldCsrXSA9IChieXRlKSBudW1iZXJPZkJv
b3RTdHJhcHM7CisJCWZvciAoaW50IGkgPSAwOyBpIDwgbnVtYmVyT2ZCb290U3RyYXBzOyBpKysp
IHsKKwkJCUZ1bmN0aW9uYWxFeHByZXNzaW9uIGZ1bmN0aW9uYWwgPSAoRnVuY3Rpb25hbEV4cHJl
c3Npb24pIGZ1bmNMaXN0LmdldChpKTsKKwkJCXRoaXMuY29udGVudHNbbG9jYWxDb250ZW50c09m
ZnNldCsrXSA9IChieXRlKSAoaW5kZXhGb3JNZXRhRmFjdG9yeSA+PiA4KTsKKwkJCXRoaXMuY29u
dGVudHNbbG9jYWxDb250ZW50c09mZnNldCsrXSA9IChieXRlKSBpbmRleEZvck1ldGFGYWN0b3J5
OworCQkJCisJCQl0aGlzLmNvbnRlbnRzW2xvY2FsQ29udGVudHNPZmZzZXQrK10gPSAwOworCQkJ
dGhpcy5jb250ZW50c1tsb2NhbENvbnRlbnRzT2Zmc2V0KytdID0gKGJ5dGUpIDM7CisJCQkKKwkJ
CWludCBmdW5jdGlvbmFsRGVzY3JpcHRvckluZGV4ID0gdGhpcy5jb25zdGFudFBvb2wubGl0ZXJh
bEluZGV4Rm9yTWV0aG9kSGFuZGxlKGZ1bmN0aW9uYWwuZGVzY3JpcHRvci5vcmlnaW5hbCgpKTsK
KwkJCXRoaXMuY29udGVudHNbbG9jYWxDb250ZW50c09mZnNldCsrXSA9IChieXRlKSAoZnVuY3Rp
b25hbERlc2NyaXB0b3JJbmRleCA+PiA4KTsKKwkJCXRoaXMuY29udGVudHNbbG9jYWxDb250ZW50
c09mZnNldCsrXSA9IChieXRlKSBmdW5jdGlvbmFsRGVzY3JpcHRvckluZGV4OworCisJCQlpbnQg
bWV0aG9kSGFuZGxlSW5kZXggPSB0aGlzLmNvbnN0YW50UG9vbC5saXRlcmFsSW5kZXhGb3JNZXRo
b2RIYW5kbGUoZnVuY3Rpb25hbC5iaW5kaW5nKTsKKwkJCXRoaXMuY29udGVudHNbbG9jYWxDb250
ZW50c09mZnNldCsrXSA9IChieXRlKSAobWV0aG9kSGFuZGxlSW5kZXggPj4gOCk7CisJCQl0aGlz
LmNvbnRlbnRzW2xvY2FsQ29udGVudHNPZmZzZXQrK10gPSAoYnl0ZSkgbWV0aG9kSGFuZGxlSW5k
ZXg7CisKKwkJCWNoYXIgW10gaW5zdGFudGlhdGVkU2lnbmF0dXJlID0gZnVuY3Rpb25hbC5zaWdu
YXR1cmUoKTsKKwkJCWludCBtZXRob2RUeXBlSW5kZXggPSB0aGlzLmNvbnN0YW50UG9vbC5saXRl
cmFsSW5kZXhGb3JNZXRob2RUeXBlKGluc3RhbnRpYXRlZFNpZ25hdHVyZSk7CisJCQl0aGlzLmNv
bnRlbnRzW2xvY2FsQ29udGVudHNPZmZzZXQrK10gPSAoYnl0ZSkgKG1ldGhvZFR5cGVJbmRleCA+
PiA4KTsKKwkJCXRoaXMuY29udGVudHNbbG9jYWxDb250ZW50c09mZnNldCsrXSA9IChieXRlKSBt
ZXRob2RUeXBlSW5kZXg7CisJCX0KKwkJcmV0dXJuIDE7CisJfQogCXByaXZhdGUgaW50IGdlbmVy
YXRlTGluZU51bWJlckF0dHJpYnV0ZSgpIHsKIAkJaW50IGxvY2FsQ29udGVudHNPZmZzZXQgPSB0
aGlzLmNvbnRlbnRzT2Zmc2V0OwogCQlpbnQgYXR0cmlidXRlc051bWJlciA9IDA7CkBAIC00MTU0
LDYgKzQyMjgsMTQgQEAKIAkJfQogCX0KIAorCXB1YmxpYyBpbnQgcmVjb3JkQm9vdFN0cmFwTWV0
aG9kKEZ1bmN0aW9uYWxFeHByZXNzaW9uIGV4cHJlc3Npb24pIHsKKwkJaWYgKHRoaXMuYm9vdFN0
cmFwTWV0aG9kcyA9PSBudWxsKSB7CisJCQl0aGlzLmJvb3RTdHJhcE1ldGhvZHMgPSBuZXcgTGlu
a2VkTGlzdCgpOworCQl9CisJCXRoaXMuYm9vdFN0cmFwTWV0aG9kcy5hZGQoZXhwcmVzc2lvbik7
CisJCXJldHVybiB0aGlzLmJvb3RTdHJhcE1ldGhvZHMuc2l6ZSgpLTE7CisJfQorCiAJcHVibGlj
IHZvaWQgcmVzZXQoU291cmNlVHlwZUJpbmRpbmcgdHlwZUJpbmRpbmcpIHsKIAkJLy8gdGhlIGNv
ZGUgc3RyZWFtIGlzIHJlaW5pdGlhbGl6ZWQgZm9yIGVhY2ggbWV0aG9kCiAJCWZpbmFsIENvbXBp
bGVyT3B0aW9ucyBvcHRpb25zID0gdHlwZUJpbmRpbmcuc2NvcGUuY29tcGlsZXJPcHRpb25zKCk7
CkBAIC00MTgwLDYgKzQyNjIsOSBAQAogCQlpZiAodGhpcy5pbm5lckNsYXNzZXNCaW5kaW5ncyAh
PSBudWxsKSB7CiAJCQl0aGlzLmlubmVyQ2xhc3Nlc0JpbmRpbmdzLmNsZWFyKCk7CiAJCX0KKwkJ
aWYgKHRoaXMuYm9vdFN0cmFwTWV0aG9kcyAhPSBudWxsKSB7CisJCQl0aGlzLmJvb3RTdHJhcE1l
dGhvZHMuY2xlYXIoKTsKKwkJfQogCQl0aGlzLm1pc3NpbmdUeXBlcyA9IG51bGw7CiAJCXRoaXMu
dmlzaXRlZFR5cGVzID0gbnVsbDsKIAl9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0NvbXBpbGF0
aW9uVW5pdERlY2xhcmF0aW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0NvbXBpbGF0aW9uVW5pdERlY2xh
cmF0aW9uLmphdmEKaW5kZXggMTc0Njc4NS4uY2FjMGIzOSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fz
dC9Db21waWxhdGlvblVuaXREZWNsYXJhdGlvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQ29tcGls
YXRpb25Vbml0RGVjbGFyYXRpb24uamF2YQpAQCAtMTIsNiArMTIsOCBAQAogICogQ29udHJpYnV0
b3JzOgogICogICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRh
dGlvbgogICogICAgIFN0ZXBoYW4gSGVycm1hbm4gIC0gQ29udHJpYnV0aW9uIGZvciBidWcgMjk1
NTUxCisgKiAgICAgSmVzcGVyIFMgTW9sbGVyICAgLSBDb250cmlidXRpb25zIGZvcgorICoJCQkJ
CQkJICBCdWcgNDA1MDY2IC0gWzEuOF1bY29tcGlsZXJdW2NvZGVnZW5dIEltcGxlbWVudCBjb2Rl
IGdlbmVyYXRpb24gaW5mcmFzdHJ1Y3R1cmUgZm9yIEpTUjMzNSAgICAgICAgICAgICAKICAqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqLwogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29t
cGlsZXIuYXN0OwogCkBAIC0xNDksNiArMTUxLDcgQEAKIAkJLy8gbnVsbCBvdXQgdGhlIGNsYXNz
ZmlsZSBiYWNrcG9pbnRlciB0byBhIHR5cGUgYmluZGluZwogCQljbGFzc0ZpbGUucmVmZXJlbmNl
QmluZGluZyA9IG51bGw7CiAJCWNsYXNzRmlsZS5pbm5lckNsYXNzZXNCaW5kaW5ncyA9IG51bGw7
CisJCWNsYXNzRmlsZS5ib290U3RyYXBNZXRob2RzID0gbnVsbDsKIAkJY2xhc3NGaWxlLm1pc3Np
bmdUeXBlcyA9IG51bGw7CiAJCWNsYXNzRmlsZS52aXNpdGVkVHlwZXMgPSBudWxsOwogCX0KZGlm
ZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9hc3QvRnVuY3Rpb25hbEV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvRnVuY3Rpb25hbEV4cHJlc3Npb24uamF2YQppbmRleCAzODVjMmJjLi4zZjQwN2MwIDEwMDY0
NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYXN0L0Z1bmN0aW9uYWxFeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FzdC9GdW5jdGlvbmFsRXhwcmVzc2lvbi5qYXZhCkBAIC0xMyw2ICsxMyw3IEBACiAgKiAgICAg
SUJNIENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCiAgKiAgICAg
SmVzcGVyIFMgTW9sbGVyIC0gQ29udHJpYnV0aW9ucyBmb3IKICAqCQkJCQkJCWJ1ZyAzODI3MDEg
LSBbMS44XVtjb21waWxlcl0gSW1wbGVtZW50IHNlbWFudGljIGFuYWx5c2lzIG9mIExhbWJkYSBl
eHByZXNzaW9ucyAmIFJlZmVyZW5jZSBleHByZXNzaW9uCisgKgkJCQkJCQlCdWcgNDA1MDY2IC0g
WzEuOF1bY29tcGlsZXJdW2NvZGVnZW5dIEltcGxlbWVudCBjb2RlIGdlbmVyYXRpb24gaW5mcmFz
dHJ1Y3R1cmUgZm9yIEpTUjMzNSAgICAgICAgCiAgKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KIHBh
Y2thZ2Ugb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdDsKIApAQCAtMzcsNyAr
MzgsNyBAQAogcHVibGljIGFic3RyYWN0IGNsYXNzIEZ1bmN0aW9uYWxFeHByZXNzaW9uIGV4dGVu
ZHMgRXhwcmVzc2lvbiB7CiAJCiAJVHlwZUJpbmRpbmcgZXhwZWN0ZWRUeXBlOwotCU1ldGhvZEJp
bmRpbmcgZGVzY3JpcHRvcjsKKwlwdWJsaWMgTWV0aG9kQmluZGluZyBkZXNjcmlwdG9yOwogCXB1
YmxpYyBNZXRob2RCaW5kaW5nIGJpbmRpbmc7CiAJYm9vbGVhbiBpZ25vcmVGdXJ0aGVySW52ZXN0
aWdhdGlvbjsKIAlwcm90ZWN0ZWQgRXhwcmVzc2lvbkNvbnRleHQgZXhwcmVzc2lvbkNvbnRleHQg
PSBWQU5JTExBX0NPTlRFWFQ7CkBAIC0xNzcsNCArMTc4LDggQEAKIAkJfQogCQljb2RlU3RyZWFt
LnJlY29yZFBvc2l0aW9uc0Zyb20ocGMsIHRoaXMuc291cmNlU3RhcnQpOwogCX0KKworCXB1Ymxp
YyBjaGFyW10gc2lnbmF0dXJlKCkgeworCQlyZXR1cm4gbnVsbDsKKwl9CiB9ClwgTm8gbmV3bGlu
ZSBhdCBlbmQgb2YgZmlsZQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2NsYXNzZm10L0NsYXNzRmlsZUNv
bnN0YW50cy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2NsYXNzZm10L0NsYXNzRmlsZUNvbnN0YW50cy5qYXZhCmlu
ZGV4IDU3MmZlMGEuLjAzOWNlNmYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9jbGFzc2ZtdC9DbGFzc0Zp
bGVDb25zdGFudHMuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvY2xhc3NmbXQvQ2xhc3NGaWxlQ29uc3RhbnRz
LmphdmEKQEAgLTExLDYgKzExLDggQEAKICAqCiAgKiBDb250cmlidXRvcnM6CiAgKiAgICAgSUJN
IENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCisgKiAgICAgSmVz
cGVyIFMgTW9sbGVyIC0gQ29udHJpYnV0aW9ucyBmb3IKKyAqCQkJCQkJCUJ1ZyA0MDUwNjYgLSBb
MS44XVtjb21waWxlcl1bY29kZWdlbl0gSW1wbGVtZW50IGNvZGUgZ2VuZXJhdGlvbiBpbmZyYXN0
cnVjdHVyZSBmb3IgSlNSMzM1ICAgICAgICAgICAgIAogICoqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiov
CiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5jbGFzc2ZtdDsKIApA
QCAtODEsNiArODMsMTcgQEAKIAlpbnQgQ29uc3RhbnRNZXRob2RUeXBlRml4ZWRTaXplID0gMzsK
IAlpbnQgQ29uc3RhbnRJbnZva2VEeW5hbWljRml4ZWRTaXplID0gNTsKIAorCS8vIEpWTVMgNC40
LjgKKwlpbnQgTWV0aG9kSGFuZGxlUmVmS2luZEdldEZpZWxkID0gMTsKKwlpbnQgTWV0aG9kSGFu
ZGxlUmVmS2luZEdldFN0YXRpYyA9IDI7CisJaW50IE1ldGhvZEhhbmRsZVJlZktpbmRQdXRGaWVs
ZCA9IDM7CisJaW50IE1ldGhvZEhhbmRsZVJlZktpbmRQdXRTdGF0aWMgPSA0OworCWludCBNZXRo
b2RIYW5kbGVSZWZLaW5kSW52b2tlVmlydHVhbCA9IDU7CisJaW50IE1ldGhvZEhhbmRsZVJlZktp
bmRJbnZva2VTdGF0aWMgPSA2OworCWludCBNZXRob2RIYW5kbGVSZWZLaW5kSW52b2tlU3BlY2lh
bCA9IDc7CisJaW50IE1ldGhvZEhhbmRsZVJlZktpbmROZXdJbnZva2VTcGVjaWFsID0gODsKKwlp
bnQgTWV0aG9kSGFuZGxlUmVmS2luZEludm9rZUludGVyZmFjZSA9IDk7CisKIAlpbnQgTUFKT1Jf
VkVSU0lPTl8xXzEgPSA0NTsKIAlpbnQgTUFKT1JfVkVSU0lPTl8xXzIgPSA0NjsKIAlpbnQgTUFK
T1JfVkVSU0lPTl8xXzMgPSA0NzsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9jb2RlZ2VuL0F0dHJpYnV0
ZU5hbWVzQ29uc3RhbnRzLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvY29kZWdlbi9BdHRyaWJ1dGVOYW1lc0NvbnN0
YW50cy5qYXZhCmluZGV4IDUxYTRlODMuLjBiMTRiZTAgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9jb2Rl
Z2VuL0F0dHJpYnV0ZU5hbWVzQ29uc3RhbnRzLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2NvZGVnZW4vQXR0
cmlidXRlTmFtZXNDb25zdGFudHMuamF2YQpAQCAtMSwxMiArMSwxOCBAQAogLyoqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAwOCBJQk0gQ29ycG9yYXRpb24g
YW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRpb24g
YW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhl
IGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUg
dGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21w
YW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKICAqIGh0dHA6Ly93
d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCisgKiAKKyAqIFRoaXMgaXMgYW4gaW1w
bGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQgc3BlY2lmaWNhdGlvbiBkZXZlbG9wZWQgdW5k
ZXIgdGhlIEphdmEKKyAqIENvbW11bml0eSBQcm9jZXNzIChKQ1ApIGFuZCBpcyBtYWRlIGF2YWls
YWJsZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiBwdXJwb3NlcworICogb25seS4gVGhlIGNv
ZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkgc3BlY2lmaWNhdGlvbiBvZiB0aGUgSkNQLgog
ICoKICAqIENvbnRyaWJ1dG9yczoKICAqICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQ
SSBhbmQgaW1wbGVtZW50YXRpb24KKyAqICAgICBKZXNwZXIgUyBNb2xsZXIgLSBDb250cmlidXRp
b25zIGZvcgorICoJCQkJCQkJQnVnIDQwNTA2NiAtIFsxLjhdW2NvbXBpbGVyXVtjb2RlZ2VuXSBJ
bXBsZW1lbnQgY29kZSBnZW5lcmF0aW9uIGluZnJhc3RydWN0dXJlIGZvciBKU1IzMzUgICAgICAg
ICAgICAgCiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KIHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0
LmludGVybmFsLmNvbXBpbGVyLmNvZGVnZW47CiAKQEAgLTMzLDQgKzM5LDUgQEAKIAlmaW5hbCBj
aGFyW10gVmFyYXJnc05hbWUgPSAiVmFyYXJncyIudG9DaGFyQXJyYXkoKTsgLy8kTk9OLU5MUy0x
JAogCWZpbmFsIGNoYXJbXSBTdGFja01hcE5hbWUgPSAiU3RhY2tNYXAiLnRvQ2hhckFycmF5KCk7
IC8vJE5PTi1OTFMtMSQKIAlmaW5hbCBjaGFyW10gTWlzc2luZ1R5cGVzTmFtZSA9ICJNaXNzaW5n
VHlwZXMiLnRvQ2hhckFycmF5KCk7IC8vJE5PTi1OTFMtMSQKKwlmaW5hbCBjaGFyW10gQm9vdHN0
cmFwTWV0aG9kc05hbWUgPSAiQm9vdHN0cmFwTWV0aG9kcyIudG9DaGFyQXJyYXkoKTsgLy8kTk9O
LU5MUy0xJAogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2NvZGVnZW4vQ29kZVN0cmVhbS5qYXZhIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2NvZGVnZW4vQ29kZVN0cmVhbS5qYXZhCmluZGV4IGQzNDkwNTQuLmM3ZGRkYmIgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9jb2RlZ2VuL0NvZGVTdHJlYW0uamF2YQorKysgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvY29k
ZWdlbi9Db2RlU3RyZWFtLmphdmEKQEAgLTE0LDYgKzE0LDggQEAKICAqICAgICBTdGVwaGFuIEhl
cnJtYW5uIC0gQ29udHJpYnV0aW9uIGZvcgogICoJCQkJCQkJCWJ1ZyA0MDA3MTAgLSBbMS44XVtj
b21waWxlcl0gc3ludGhldGljIGFjY2VzcyB0byBkZWZhdWx0IG1ldGhvZCBnZW5lcmF0ZXMgd3Jv
bmcgY29kZQogICoJCQkJCQkJCWJ1ZyAzOTEzNzYgLSBbMS44XSBjaGVjayBpbnRlcmFjdGlvbiBv
ZiBkZWZhdWx0IG1ldGhvZHMgd2l0aCBicmlkZ2UgbWV0aG9kcyBhbmQgZ2VuZXJpY3MKKyAqICAg
ICBKZXNwZXIgUyBNb2xsZXIgLSBDb250cmlidXRpb25zIGZvcgorICoJCQkJCQkJQnVnIDQwNTA2
NiAtIFsxLjhdW2NvbXBpbGVyXVtjb2RlZ2VuXSBJbXBsZW1lbnQgY29kZSBnZW5lcmF0aW9uIGlu
ZnJhc3RydWN0dXJlIGZvciBKU1IzMzUgICAgICAgIAogICoqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiov
CiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5jb2RlZ2VuOwogCkBA
IC0zOTAwLDYgKzM5MDIsMTggQEAKIAkJdGhpcy5zdGFja01heCA9IHRoaXMuc3RhY2tEZXB0aDsK
IAl9CiB9CitwdWJsaWMgdm9pZCBpbnZva2VEeW5hbWljKGludCBib290U3RyYXBJbmRleCwgaW50
IGFyZ3NTaXplLCBpbnQgcmV0dXJuVHlwZVNpemUsIGNoYXJbXSBzZWxlY3RvciwgY2hhcltdIHNp
Z25hdHVyZSkgeworCWludCBpbnZva2VEeW5hbWljSW5kZXggPSB0aGlzLmNvbnN0YW50UG9vbC5s
aXRlcmFsSW5kZXhGb3JJbnZva2VEeW5hbWljKGJvb3RTdHJhcEluZGV4LCBzZWxlY3Rvciwgc2ln
bmF0dXJlKTsKKwl0aGlzLnBvc2l0aW9uICs9MzsKKwl0aGlzLmJDb2RlU3RyZWFtW3RoaXMuY2xh
c3NGaWxlT2Zmc2V0KytdID0gT3Bjb2Rlcy5PUENfaW52b2tlZHluYW1pYzsKKwl3cml0ZVVuc2ln
bmVkU2hvcnQoaW52b2tlRHluYW1pY0luZGV4KTsKKwl0aGlzLmJDb2RlU3RyZWFtW3RoaXMuY2xh
c3NGaWxlT2Zmc2V0KytdID0gMDsKKwl0aGlzLmJDb2RlU3RyZWFtW3RoaXMuY2xhc3NGaWxlT2Zm
c2V0KytdID0gMDsKKwl0aGlzLnN0YWNrRGVwdGggKz0gcmV0dXJuVHlwZVNpemUgLSBhcmdzU2l6
ZTsKKwlpZiAodGhpcy5zdGFja0RlcHRoID4gdGhpcy5zdGFja01heCkgeworCQl0aGlzLnN0YWNr
TWF4ID0gdGhpcy5zdGFja0RlcHRoOworCX0KK30KIAogcHVibGljIHZvaWQgaW52b2tlKGJ5dGUg
b3Bjb2RlLCBNZXRob2RCaW5kaW5nIG1ldGhvZEJpbmRpbmcsIFR5cGVCaW5kaW5nIGRlY2xhcmlu
Z0NsYXNzKSB7CiAJaWYgKGRlY2xhcmluZ0NsYXNzID09IG51bGwpIGRlY2xhcmluZ0NsYXNzID0g
bWV0aG9kQmluZGluZy5kZWNsYXJpbmdDbGFzczsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9jb2RlZ2Vu
L0NvbnN0YW50UG9vbC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2NvZGVnZW4vQ29uc3RhbnRQb29sLmphdmEKaW5k
ZXggYzQ0OTM4NS4uY2EyNWEzMiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2NvZGVnZW4vQ29uc3RhbnRQ
b29sLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2NvZGVnZW4vQ29uc3RhbnRQb29sLmphdmEKQEAgLTEsMTgg
KzEsMjUgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAs
IDIwMTIgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAs
IDIwMTMgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVk
LiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFk
ZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNl
IHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZh
aWxhYmxlIGF0CiAgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbAog
ICoKKyAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQgc3BlY2lm
aWNhdGlvbiBkZXZlbG9wZWQgdW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0eSBQcm9jZXNzIChK
Q1ApIGFuZCBpcyBtYWRlIGF2YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiBwdXJw
b3NlcworICogb25seS4gVGhlIGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkgc3BlY2lm
aWNhdGlvbiBvZiB0aGUgSkNQLgorICogCiAgKiBDb250cmlidXRvcnM6CiAgKiAgICAgSUJNIENv
cnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCisgKiAgICAgSmVzcGVy
IFMgTW9sbGVyIC0gQ29udHJpYnV0aW9ucyBmb3IKKyAqCQkJCQkJCUJ1ZyA0MDUwNjYgLSBbMS44
XVtjb21waWxlcl1bY29kZWdlbl0gSW1wbGVtZW50IGNvZGUgZ2VuZXJhdGlvbiBpbmZyYXN0cnVj
dHVyZSBmb3IgSlNSMzM1ICAgICAgICAKICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwogcGFja2Fn
ZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuY29kZWdlbjsKIAogaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLkNoYXJPcGVyYXRpb247CiBpbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLkNsYXNzRmlsZTsKIGltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuY2xhc3NmbXQuQ2xhc3NGaWxlQ29uc3RhbnRzOworaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuTWV0aG9kQmluZGlu
ZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlRhZ0Jp
dHM7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5UeXBl
QmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3Vw
LlR5cGVDb25zdGFudHM7CkBAIC0yNDgsNiArMjU1LDEwIEBACiAJcHVibGljIHN0YXRpYyBmaW5h
bCBjaGFyW10gSkFWQV9MQU5HX1NBRkVWQVJBUkdTID0gIkxqYXZhL2xhbmcvU2FmZVZhcmFyZ3M7
Ii50b0NoYXJBcnJheSgpOyAvLyROT04tTkxTLTEkCiAJLy8gamF2YSA3IGphdmEubGFuZy5pbnZv
a2UuTWV0aG9kSGFuZGxlLmludm9rZUV4YWN0KC4uKS9pbnZva2VHZW5lcmljKC4uKQogCXB1Ymxp
YyBzdGF0aWMgZmluYWwgY2hhcltdIEpBVkFfTEFOR19JTlZPS0VfTUVUSE9ESEFORExFX1BPTFlN
T1JQSElDU0lHTkFUVVJFID0gIkxqYXZhL2xhbmcvaW52b2tlL01ldGhvZEhhbmRsZSRQb2x5bW9y
cGhpY1NpZ25hdHVyZTsiLnRvQ2hhckFycmF5KCk7IC8vJE5PTi1OTFMtMSQKKwkvLyBKYXZhIDgg
bGFtYmRhIHN1cHBvcnQKKwlwdWJsaWMgc3RhdGljIGZpbmFsIGNoYXJbXSBKQVZBX0xBTkdfSU5W
T0tFX0xBTUJEQU1FVEFGQUNUT1JZID0gImphdmEvbGFuZy9pbnZva2UvTGFtYmRhTWV0YWZhY3Rv
cnkiLnRvQ2hhckFycmF5KCk7IC8vJE5PTi1OTFMtMSQKKwlwdWJsaWMgc3RhdGljIGZpbmFsIGNo
YXJbXSBKQVZBX0xBTkdfSU5WT0tFX0xBTUJEQU1FVEFGQUNUT1JZX01FVEFGQUNUT1JZID0gImph
dmEvbGFuZy9pbnZva2UvTGFtYmRhTWV0YWZhY3RvcnkubWV0YUZhY3Rvcnk6KExqYXZhL2xhbmcv
aW52b2tlL01ldGhvZEhhbmRsZXMkTG9va3VwO0xqYXZhL2xhbmcvU3RyaW5nO0xqYXZhL2xhbmcv
aW52b2tlL01ldGhvZFR5cGU7TGphdmEvbGFuZy9pbnZva2UvTWV0aG9kSGFuZGxlO0xqYXZhL2xh
bmcvaW52b2tlL01ldGhvZEhhbmRsZTtMamF2YS9sYW5nL2ludm9rZS9NZXRob2RUeXBlOylMamF2
YS9sYW5nL2ludm9rZS9DYWxsU2l0ZTsiLnRvQ2hhckFycmF5KCk7IC8vJE5PTi1OTFMtMSQKKwlw
dWJsaWMgc3RhdGljIGZpbmFsIGNoYXJbXSBKQVZBX0xBTkdfSU5WT0tFX0xBTUJEQU1FVEFGQUNU
T1JZX01FVEFGQUNUT1JZX1NJR05BVFVSRSA9ICIoTGphdmEvbGFuZy9pbnZva2UvTWV0aG9kSGFu
ZGxlcyRMb29rdXA7TGphdmEvbGFuZy9TdHJpbmc7TGphdmEvbGFuZy9pbnZva2UvTWV0aG9kVHlw
ZTtMamF2YS9sYW5nL2ludm9rZS9NZXRob2RIYW5kbGU7TGphdmEvbGFuZy9pbnZva2UvTWV0aG9k
SGFuZGxlO0xqYXZhL2xhbmcvaW52b2tlL01ldGhvZFR5cGU7KUxqYXZhL2xhbmcvaW52b2tlL0Nh
bGxTaXRlOyIudG9DaGFyQXJyYXkoKTsgLy8kTk9OLU5MUy0xJAogCiAJcHVibGljIHN0YXRpYyBm
aW5hbCBjaGFyW10gSGFzaENvZGUgPSAiaGFzaENvZGUiLnRvQ2hhckFycmF5KCk7IC8vJE5PTi1O
TFMtMSQKIAlwdWJsaWMgc3RhdGljIGZpbmFsIGNoYXJbXSBIYXNoQ29kZVNpZ25hdHVyZSA9ICIo
KUkiLnRvQ2hhckFycmF5KCk7IC8vJE5PTi1OTFMtMSQ7IApAQCAtNzM4LDYgKzc0OSw3NCBAQAog
CQl9CiAJCXJldHVybiBpbmRleDsKIAl9CisJcHVibGljIGludCBsaXRlcmFsSW5kZXhGb3JNZXRo
b2RIYW5kbGUoTWV0aG9kQmluZGluZyBiaW5kaW5nKSB7CisJCS8vIFRPRE86IENoZWNrIGlmIHRo
ZSBiaW5kaW5nIHdhcyBnZW5lcmF0ZWQgYWxyZWFkeQorCQkvLworCQkvLyAgcmVmZXJlbmNlX2lu
ZGV4CisJCS8vICBUaGUgdmFsdWUgb2YgdGhlIHJlZmVyZW5jZV9pbmRleCBpdGVtIG11c3QgYmUg
YSB2YWxpZCBpbmRleCBpbnRvIHRoZQorCQkvLyAgY29uc3RhbnRfcG9vbCB0YWJsZS4KKwkJLy8g
IElmIHRoZSB2YWx1ZSBvZiB0aGUgcmVmZXJlbmNlX2tpbmQgaXRlbSBpcyAxIChSRUZfZ2V0Rmll
bGQpLCAyIChSRUZfZ2V0U3RhdGljKSwgMyAoUkVGX3B1dEZpZWxkKSwgb3IgNCAoUkVGX3B1dFN0
YXRpYyksIHRoZW4gdGhlIGNvbnN0YW50X3Bvb2wgZW50cnkgYXQgdGhhdCBpbmRleCBtdXN0IGJl
IGEgQ09OU1RBTlRfRmllbGRyZWZfaW5mbyAoPzQuNC4yKSBzdHJ1Y3R1cmUgcmVwcmVzZW50aW5n
IGEgZmllbGQgZm9yIHdoaWNoIGEgbWV0aG9kIGhhbmRsZSBpcyB0byBiZSBjcmVhdGVkLgorCQkv
LyAgSWYgdGhlIHZhbHVlIG9mIHRoZSByZWZlcmVuY2Vfa2luZCBpdGVtIGlzIDUgKFJFRl9pbnZv
a2VWaXJ0dWFsKSwgNiAoUkVGX2ludm9rZVN0YXRpYyksIDcgKFJFRl9pbnZva2VTcGVjaWFsKSwg
b3IgOCAoUkVGX25ld0ludm9rZVNwZWNpYWwpLCB0aGVuIHRoZSBjb25zdGFudF9wb29sIGVudHJ5
IGF0IHRoYXQgaW5kZXggbXVzdCBiZSBhIENPTlNUQU5UX01ldGhvZHJlZl9pbmZvICg/NC40LjIp
IHN0cnVjdHVyZSByZXByZXNlbnRpbmcgYSBjbGFzcydzIG1ldGhvZCBvciBjb25zdHJ1Y3RvciAo
PzIuOSkgZm9yIHdoaWNoIGEgbWV0aG9kIGhhbmRsZSBpcyB0byBiZSBjcmVhdGVkLgorCQkvLyAg
SWYgdGhlIHZhbHVlIG9mIHRoZSByZWZlcmVuY2Vfa2luZCBpdGVtIGlzIDkgKFJFRl9pbnZva2VJ
bnRlcmZhY2UpLCB0aGVuIHRoZSBjb25zdGFudF9wb29sIGVudHJ5IGF0IHRoYXQgaW5kZXggbXVz
dCBiZSBhIENPTlNUQU5UX0ludGVyZmFjZU1ldGhvZHJlZl9pbmZvICg/NC40LjIpIHN0cnVjdHVy
ZSByZXByZXNlbnRpbmcgYW4gaW50ZXJmYWNlJ3MgbWV0aG9kIGZvciB3aGljaCBhIG1ldGhvZCBo
YW5kbGUgaXMgdG8gYmUgY3JlYXRlZC4KKwkJCisJCQorCQlib29sZWFuIGlzSW50ZXJmYWNlID0g
YmluZGluZy5kZWNsYXJpbmdDbGFzcy5pc0ludGVyZmFjZSgpOworCQlpbnQgcmVmZXJlbmNlS2lu
ZCA9CisJCQlpc0ludGVyZmFjZSA/IE1ldGhvZEhhbmRsZVJlZktpbmRJbnZva2VJbnRlcmZhY2UK
KwkJCTogYmluZGluZy5pc0NvbnN0cnVjdG9yKCkgPyBNZXRob2RIYW5kbGVSZWZLaW5kTmV3SW52
b2tlU3BlY2lhbAorCQkJOiBiaW5kaW5nLmlzU3RhdGljKCkgPyBNZXRob2RIYW5kbGVSZWZLaW5k
SW52b2tlU3RhdGljCisJCQk6IE1ldGhvZEhhbmRsZVJlZktpbmRJbnZva2VWaXJ0dWFsOworCQkK
KwkJcmV0dXJuIGxpdGVyYWxJbmRleEZvck1ldGhvZEhhbmRsZShyZWZlcmVuY2VLaW5kLCBiaW5k
aW5nLmRlY2xhcmluZ0NsYXNzLCBiaW5kaW5nLnNlbGVjdG9yLCBiaW5kaW5nLnNpZ25hdHVyZSgp
LCBpc0ludGVyZmFjZSk7CisJfQorCQorCXB1YmxpYyBpbnQgbGl0ZXJhbEluZGV4Rm9yTWV0aG9k
SGFuZGxlKGludCByZWZlcmVuY2VLaW5kLCBUeXBlQmluZGluZyBkZWNsYXJpbmdDbGFzcywgY2hh
cltdIHNlbGVjdG9yLCBjaGFyW10gc2lnbmF0dXJlLCBib29sZWFuIGlzSW50ZXJmYWNlKSB7CisJ
CWludCBpbmRleEZvck1ldGhvZCA9IGxpdGVyYWxJbmRleEZvck1ldGhvZChkZWNsYXJpbmdDbGFz
cywgc2VsZWN0b3IsIHNpZ25hdHVyZSwgaXNJbnRlcmZhY2UpOworCisJCWludCBpbmRleCA9IHRo
aXMuY3VycmVudEluZGV4Kys7CisJCWludCBsZW5ndGggPSB0aGlzLm9mZnNldHMubGVuZ3RoOwor
CQlpZiAobGVuZ3RoIDw9IGluZGV4KSB7CisJCQkvLyByZXNpemUKKwkJCVN5c3RlbS5hcnJheWNv
cHkodGhpcy5vZmZzZXRzLCAwLCAodGhpcy5vZmZzZXRzID0gbmV3IGludFtpbmRleCAqIDJdKSwg
MCwgbGVuZ3RoKTsKKwkJfQorCQkKKwkJdGhpcy5vZmZzZXRzW2luZGV4XSA9IHRoaXMuY3VycmVu
dE9mZnNldDsKKwkJd3JpdGVVMShNZXRob2RIYW5kbGVUYWcpOworCQl3cml0ZVUxKHJlZmVyZW5j
ZUtpbmQpOworCQl3cml0ZVUyKGluZGV4Rm9yTWV0aG9kKTsKKworCQlyZXR1cm4gaW5kZXg7CisJ
fQorCXB1YmxpYyBpbnQgbGl0ZXJhbEluZGV4Rm9yTWV0aG9kVHlwZShjaGFyW10gc2lnbmF0dXJl
KSB7CisJCWludCBzaWduYXR1cmVJbmRleCA9IGxpdGVyYWxJbmRleChzaWduYXR1cmUpOworCisJ
CWludCBpbmRleCA9IHRoaXMuY3VycmVudEluZGV4Kys7CisJCQorCQlpbnQgbGVuZ3RoID0gdGhp
cy5vZmZzZXRzLmxlbmd0aDsKKwkJaWYgKGxlbmd0aCA8PSBpbmRleCkgeworCQkJLy8gcmVzaXpl
CisJCQlTeXN0ZW0uYXJyYXljb3B5KHRoaXMub2Zmc2V0cywgMCwgKHRoaXMub2Zmc2V0cyA9IG5l
dyBpbnRbaW5kZXggKiAyXSksIDAsIGxlbmd0aCk7CisJCX0KKwkJdGhpcy5vZmZzZXRzW2luZGV4
XSA9IHRoaXMuY3VycmVudE9mZnNldDsKKwkJd3JpdGVVMShNZXRob2RUeXBlVGFnKTsKKwkJd3Jp
dGVVMihzaWduYXR1cmVJbmRleCk7CisKKwkJcmV0dXJuIGluZGV4OworCX0KKwlwdWJsaWMgaW50
IGxpdGVyYWxJbmRleEZvckludm9rZUR5bmFtaWMoaW50IGJvb3RTdHJhcEluZGV4LCBjaGFyW10g
c2VsZWN0b3IsIGNoYXJbXSBzaWduYXR1cmUpIHsKKwkJaW50IG5hbWVBbmRUeXBlSW5kZXggPSBs
aXRlcmFsSW5kZXhGb3JOYW1lQW5kVHlwZShzZWxlY3Rvciwgc2lnbmF0dXJlKTsKKwkJaW50IGlu
ZGV4ID0gdGhpcy5jdXJyZW50SW5kZXgrKzsKKwkJaW50IGxlbmd0aCA9IHRoaXMub2Zmc2V0cy5s
ZW5ndGg7CisJCWlmIChsZW5ndGggPD0gaW5kZXgpIHsKKwkJCS8vIHJlc2l6ZQorCQkJU3lzdGVt
LmFycmF5Y29weSh0aGlzLm9mZnNldHMsIDAsICh0aGlzLm9mZnNldHMgPSBuZXcgaW50W2luZGV4
ICogMl0pLCAwLCBsZW5ndGgpOworCQl9CisJCXRoaXMub2Zmc2V0c1tpbmRleF0gPSB0aGlzLmN1
cnJlbnRPZmZzZXQ7CisJCXdyaXRlVTEoSW52b2tlRHluYW1pY1RhZyk7CisJCXdyaXRlVTIoYm9v
dFN0cmFwSW5kZXgpOworCQl3cml0ZVUyKG5hbWVBbmRUeXBlSW5kZXgpOworCQlyZXR1cm4gaW5k
ZXg7CisJfQogCXB1YmxpYyBpbnQgbGl0ZXJhbEluZGV4Rm9yRmllbGQoY2hhcltdIGRlY2xhcmlu
Z0NsYXNzLCBjaGFyW10gbmFtZSwgY2hhcltdIHNpZ25hdHVyZSkgewogCQlpbnQgaW5kZXg7CiAJ
CWlmICgoaW5kZXggPSBwdXRJbkNhY2hlSWZBYnNlbnQoZGVjbGFyaW5nQ2xhc3MsIG5hbWUsIHNp
Z25hdHVyZSwgdGhpcy5jdXJyZW50SW5kZXgpKSA8IDApIHsKZGlmZiAtLWdpdCBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9j
b2RlZ2VuL09wY29kZXMuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9jb2RlZ2VuL09wY29kZXMuamF2YQppbmRleCA4
NWFlMjc5Li5hMTc3NzEzIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvY29kZWdlbi9PcGNvZGVzLmphdmEK
KysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2NvZGVnZW4vT3Bjb2Rlcy5qYXZhCkBAIC0xLDEyICsxLDE5IEBACiAvKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDA2IElCTSBDb3Jw
b3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEzIElCTSBDb3Jw
b3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFt
IGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVu
ZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGlj
aCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdAogICog
aHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKICAqCisgKiBUaGlzIGlz
IGFuIGltcGxlbWVudGF0aW9uIG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxv
cGVkIHVuZGVyIHRoZSBKYXZhCisgKiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFk
ZSBhdmFpbGFibGUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9ubHku
IFRoZSBjb2RlIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24gb2YgdGhl
IEpDUC4KKyAqIAogICogQ29udHJpYnV0b3JzOgogICogICAgIElCTSBDb3Jwb3JhdGlvbiAtIGlu
aXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgorICogICAgIAorICogICAgIEplc3BlciBTIE1v
bGxlciAtIENvbnRyaWJ1dGlvbnMgZm9yCisgKgkJCQkJCQlCdWcgNDA1MDY2IC0gWzEuOF1bY29t
cGlsZXJdW2NvZGVnZW5dIEltcGxlbWVudCBjb2RlIGdlbmVyYXRpb24gaW5mcmFzdHJ1Y3R1cmUg
Zm9yIEpTUjMzNSAgICAKICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwogcGFja2FnZSBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuY29kZWdlbjsKIApAQCAtMTk4LDYgKzIwNSw3IEBA
CiAJcHVibGljIHN0YXRpYyBmaW5hbCBieXRlIE9QQ19pbnZva2VzcGVjaWFsID0gKGJ5dGUpIDE4
MzsKIAlwdWJsaWMgc3RhdGljIGZpbmFsIGJ5dGUgT1BDX2ludm9rZXN0YXRpYyA9IChieXRlKSAx
ODQ7CiAJcHVibGljIHN0YXRpYyBmaW5hbCBieXRlIE9QQ19pbnZva2VpbnRlcmZhY2UgPSAoYnl0
ZSkgMTg1OworCXB1YmxpYyBzdGF0aWMgZmluYWwgYnl0ZSBPUENfaW52b2tlZHluYW1pYyA9IChi
eXRlKSAxODY7CiAJcHVibGljIHN0YXRpYyBmaW5hbCBieXRlIE9QQ19uZXcgPSAoYnl0ZSkgMTg3
OwogCXB1YmxpYyBzdGF0aWMgZmluYWwgYnl0ZSBPUENfbmV3YXJyYXkgPSAoYnl0ZSkgMTg4Owog
CXB1YmxpYyBzdGF0aWMgZmluYWwgYnl0ZSBPUENfYW5ld2FycmF5ID0gKGJ5dGUpIDE4OTsKZGlm
ZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUu
amF2YQppbmRleCA3NDFhYTg5Li4xZTM0YzAzIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Nj
b3BlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhCkBAIC0xOSw2ICsxOSw3IEBA
CiAgKgkJCQkJCQkJYnVnIDQwMTI3MSAtIFN0YWNrT3ZlcmZsb3dFcnJvciB3aGVuIHNlYXJjaGlu
ZyBmb3IgYSBtZXRob2RzIHJlZmVyZW5jZXMKICAqICAgICBKZXNwZXIgUyBNb2xsZXIgLSBDb250
cmlidXRpb25zIGZvcgogICoJCQkJCQkJCUJ1ZyAzNzg2NzQgLSAiVGhlIG1ldGhvZCBjYW4gYmUg
ZGVjbGFyZWQgYXMgc3RhdGljIiBpcyB3cm9uZworICogIAkJCQkJCQlCdWcgNDA1MDY2IC0gWzEu
OF1bY29tcGlsZXJdW2NvZGVnZW5dIEltcGxlbWVudCBjb2RlIGdlbmVyYXRpb24gaW5mcmFzdHJ1
Y3R1cmUgZm9yIEpTUjMzNQogICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCiBwYWNrYWdlIG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXA7CiAKQEAgLTIzNzksNiArMjM4MCwx
OSBAQAogCQlyZXR1cm4gdW5pdFNjb3BlLmVudmlyb25tZW50LmdldFJlc29sdmVkVHlwZShUeXBl
Q29uc3RhbnRzLkpBVkFfTEFOR19FTlVNLCB0aGlzKTsKIAl9CiAKKwlwdWJsaWMgZmluYWwgUmVm
ZXJlbmNlQmluZGluZyBnZXRKYXZhTGFuZ0ludm9rZUxhbWJkYU1ldGFmYWN0b3J5KCkgeworCQlD
b21waWxhdGlvblVuaXRTY29wZSB1bml0U2NvcGUgPSBjb21waWxhdGlvblVuaXRTY29wZSgpOwor
CQl1bml0U2NvcGUucmVjb3JkUXVhbGlmaWVkUmVmZXJlbmNlKFR5cGVDb25zdGFudHMuSkFWQV9M
QU5HX0lOVk9LRV9MQU1CREFNRVRBRkFDVE9SWSk7CisJCXJldHVybiB1bml0U2NvcGUuZW52aXJv
bm1lbnQuZ2V0UmVzb2x2ZWRUeXBlKFR5cGVDb25zdGFudHMuSkFWQV9MQU5HX0lOVk9LRV9MQU1C
REFNRVRBRkFDVE9SWSwgdGhpcyk7CisJfQorCisJcHVibGljIGZpbmFsIFJlZmVyZW5jZUJpbmRp
bmcgZ2V0SmF2YUxhbmdJbnZva2VNZXRob2RIYW5kbGVzTG9va3VwKCkgeworCQlDb21waWxhdGlv
blVuaXRTY29wZSB1bml0U2NvcGUgPSBjb21waWxhdGlvblVuaXRTY29wZSgpOworCQl1bml0U2Nv
cGUucmVjb3JkUXVhbGlmaWVkUmVmZXJlbmNlKFR5cGVDb25zdGFudHMuSkFWQV9MQU5HX0lOVk9L
RV9NRVRIT0RIQU5ETEVTKTsKKwkJUmVmZXJlbmNlQmluZGluZyBvdXRlclR5cGUgPSB1bml0U2Nv
cGUuZW52aXJvbm1lbnQuZ2V0UmVzb2x2ZWRUeXBlKFR5cGVDb25zdGFudHMuSkFWQV9MQU5HX0lO
Vk9LRV9NRVRIT0RIQU5ETEVTLCB0aGlzKTsKKwkJcmV0dXJuIGZpbmREaXJlY3RNZW1iZXJUeXBl
KCJMb29rdXAiLnRvQ2hhckFycmF5KCksIG91dGVyVHlwZSk7IC8vJE5PTi1OTFMtMSQKKwl9CisK
IAlwdWJsaWMgZmluYWwgUmVmZXJlbmNlQmluZGluZyBnZXRKYXZhTGFuZ0l0ZXJhYmxlKCkgewog
CQlDb21waWxhdGlvblVuaXRTY29wZSB1bml0U2NvcGUgPSBjb21waWxhdGlvblVuaXRTY29wZSgp
OwogCQl1bml0U2NvcGUucmVjb3JkUXVhbGlmaWVkUmVmZXJlbmNlKFR5cGVDb25zdGFudHMuSkFW
QV9MQU5HX0lURVJBQkxFKTsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvVHlwZUNvbnN0YW50
cy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2xvb2t1cC9UeXBlQ29uc3RhbnRzLmphdmEKaW5kZXggYTYwNWQ2Ni4u
NjQ1M2ZmMSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9UeXBlQ29uc3RhbnRzLmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2xvb2t1cC9UeXBlQ29uc3RhbnRzLmphdmEKQEAgLTE3LDYgKzE3LDkgQEAKICAq
CQkJCQkJCQlidWcgMzgxNDQ1IC0gW2NvbXBpbGVyXVtyZXNvdXJjZV0gQ2FuIHRoZSByZXNvdXJj
ZSBsZWFrIGNoZWNrIGJlIG1hZGUgYXdhcmUgb2YgQ2xvc2VhYmxlcy5jbG9zZVF1aWV0bHk/CiAg
KgkJCQkJCQkJYnVnIDQwMDQyMSAtIFtjb21waWxlcl0gTnVsbCBhbmFseXNpcyBmb3IgZmllbGRz
IGRvZXMgbm90IHRha2UgQGNvbS5nb29nbGUuaW5qZWN0LkluamVjdCBpbnRvIGFjY291bnQKICAq
CQkJCQkJCQlidWcgMzgyMDY5IC0gW251bGxdIE1ha2UgdGhlIG51bGwgYW5hbHlzaXMgY29uc2lk
ZXIgSlVuaXQncyBhc3NlcnROb3ROdWxsIHNpbWlsYXJseSB0byBhc3NlcnRpb25zCisgKgorICog
ICAgSmVzcGVyIFMgTW9sbGVyIC0gQ29udHJpYnV0aW9ucyBmb3IKKyAqCQkJCQkJCUJ1ZyA0MDUw
NjYgLSBbMS44XVtjb21waWxlcl1bY29kZWdlbl0gSW1wbGVtZW50IGNvZGUgZ2VuZXJhdGlvbiBp
bmZyYXN0cnVjdHVyZSBmb3IgSlNSMzM1CiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KIHBhY2th
Z2Ugb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cDsKIApAQCAtMTgwLDYg
KzE4Myw4IEBACiAJCQlJTlZPS0UsCiAJCQkiTWV0aG9kSGFuZGxlJFBvbHltb3JwaGljU2lnbmF0
dXJlIi50b0NoYXJBcnJheSgpIC8vJE5PTi1OTFMtMSQKIAl9OworCWNoYXJbXVtdIEpBVkFfTEFO
R19JTlZPS0VfTEFNQkRBTUVUQUZBQ1RPUlkgPSB7SkFWQSwgTEFORywgSU5WT0tFLCAiTGFtYmRh
TWV0YWZhY3RvcnkiLnRvQ2hhckFycmF5KCl9OyAvLyROT04tTkxTLTEkCisJY2hhcltdW10gSkFW
QV9MQU5HX0lOVk9LRV9NRVRIT0RIQU5ETEVTID0ge0pBVkEsIExBTkcsIElOVk9LRSwgIk1ldGhv
ZEhhbmRsZXMiLnRvQ2hhckFycmF5KCl9OyAvLyROT04tTkxTLTEkCiAJY2hhcltdW10gSkFWQV9M
QU5HX0FVVE9DTE9TRUFCTEUgPSAge0pBVkEsIExBTkcsICJBdXRvQ2xvc2VhYmxlIi50b0NoYXJB
cnJheSgpfTsgLy8kTk9OLU5MUy0xJAogCWNoYXJbXSBDTE9TRSA9ICJjbG9zZSIudG9DaGFyQXJy
YXkoKTsgLy8kTk9OLU5MUy0xJAogCS8vIGtub3duIGhlbHBlciBmdW5jdGlvbnMgZm9yIGNsb3Np
bmcgYSBDbG9zZWFibGUgKGFsbCByZWNlaXZlIGEgQ2xvc2VhYmxlIGFzIHRoZWlyIGZpcnN0IGFy
Z3VtZW50KTo=
</data>

          </attachment>
      

    </bug>

</bugzilla>