<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>431408</bug_id>
          
          <creation_ts>2014-03-27 16:37:00 -0400</creation_ts>
          <short_desc>Java 8 (1.8) generics bug</short_desc>
          <delta_ts>2014-08-16 13:40:45 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3.2</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.4 M7</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Garret Wilson">garret</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>garret</cc>
    
    <cc>jarthana</cc>
    
    <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2381345</commentid>
    <comment_count>0</comment_count>
    <who name="Garret Wilson">garret</who>
    <bug_when>2014-03-27 16:37:28 -0400</bug_when>
    <thetext>I&apos;m using Eclipse 4.3.2 with the Java 8 patch. We have the following code, which compiled just fine in Eclipse 4.3.2 with Java 7. This also compiles fine with the Oracle JDK 8 compiler using Maven.

protected &lt;V&gt; CustomNamedTypedProperty&lt;V, ? extends CustomType&lt;V&gt;&gt; parseHeaderField(int fieldIndex, String headerField) throws FileFormatException {
  CustomNamedTypedProperty&lt;V, ? extends CustomType&lt;V&gt;&gt; prop = super.parseHeaderField(fieldIndex, headerField);

Eclipse gives the following error:

Type mismatch: cannot convert from CustomNamedTypedProperty&lt;Object,capture#1-of ? extends CustomType&lt;Object&gt;&gt; to CustomNamedTypedProperty&lt;V,? extends CustomType&lt;V&gt;&gt;

Obviously if I call the superclass version of a method, I expect to be able to store its return value in a variable of the same type as the return type. This should be self-evident, even without know the hierarchy of the types in question. But to help track down the bug, here are some more (abridged) definitions:

public class CustomNamedTypedProperty&lt;V, T extends CustomType&lt;V&gt;&gt; extends DefaultNamedTypedProperty&lt;V&gt; implements NamedTypedProperty&lt;V&gt;

interface CustomType&lt;V&gt; extends NamedTypedProperty&lt;V&gt;

interface NamedTypedProperty&lt;V&gt; extends Named, TypedProperty&lt;V&gt;

interface TypedProperty&lt;V&gt; extends Property, Typed&lt;V&gt;

(Note that there are several other lines in our that exhibit similar generics compatibility problems, even though they compiled fine in Java 7.)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2381437</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-27 23:22:11 -0400</bug_when>
    <thetext>Garret, can you attach a self contained small reproducible example ? TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2381934</commentid>
    <comment_count>2</comment_count>
    <who name="Garret Wilson">garret</who>
    <bug_when>2014-03-28 15:44:36 -0400</bug_when>
    <thetext>The following class completely reproduces this problem:

public class EclipseJava8Generics {

  public interface Foo&lt;V&gt; {
  }

  public static class FooBar&lt;V, T extends Foo&lt;V&gt;&gt; {
  }

  public static class BaseClass {
    protected &lt;V&gt; FooBar&lt;V, ? extends Foo&lt;V&gt;&gt; doSomething() {
      return null;
    }
  }

  public static class DerivedClass extends BaseClass {
    @Override
    protected &lt;V&gt; FooBar&lt;V, ? extends Foo&lt;V&gt;&gt; doSomething() {
      //Eclipse 4.3.2 with Java 8 can&apos;t compile the next line 
      FooBar&lt;V, ? extends Foo&lt;V&gt;&gt; prop = super.doSomething();
      return prop;
    }
  }
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2388244</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-04-11 17:27:10 -0400</bug_when>
    <thetext>Many thanks for report and example.

At one point during type inference we used a wrong substitution (see use of theta in JLS 18.3.2). As a result the type variable V declared in Foo leaked into the inference and created a conflict which made inference fail.

Test &amp; fix released for 4.4 M7 via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=83445beb69e15e5eb2488d8746136cbbd8c4461a</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2393862</commentid>
    <comment_count>4</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-04-28 06:56:19 -0400</bug_when>
    <thetext>No type mismatch errors with the example given in Comment 2. The example compiles without any issues.

Verified for 4.4 M7 using I20140427-2030 build.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2396468</commentid>
    <comment_count>5</comment_count>
    <who name="Garret Wilson">garret</who>
    <bug_when>2014-05-03 13:27:40 -0400</bug_when>
    <thetext>So I just upgraded to Eclipse 4.4 M7, reverted my workarounds (which I had put in because of this bug), and I still have several generics-related bugs. One of them seems to be exactly the one I reported here?

Did this fix get into 4.4 M7? Do I need to create more test cases and file more bugs?

Has the Java 8 generics code been code-reviewed?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2396469</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-03 13:58:43 -0400</bug_when>
    <thetext>The test from comment 2 successfully runs in each of our builds. If a similar problem persists please provide an example.

Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2396472</commentid>
    <comment_count>7</comment_count>
    <who name="Garret Wilson">garret</who>
    <bug_when>2014-05-03 14:45:47 -0400</bug_when>
    <thetext>Nope, doesn&apos;t work for me.

I initially had Eclipse 4.3.2 installed with the Java 8 patches, as I indicated above. This morning I added the http://download.eclipse.org/eclipse/updates/4.4milestones repository to my available software sites and checked for updates, which installed Eclipse 4.4 M7. It now says Eclipse SDK 4.4.0.I20140501-0200 in the about installation details.

I created a new class and copied the test code directly from my comment in this bug. I still get an error:

Type mismatch: cannot convert from EclipseJava8Generics.FooBar&lt;Object,? extends EclipseJava8Generics.Foo&lt;Object&gt;&gt; to EclipseJava8Generics.FooBar&lt;V,? extends EclipseJava8Generics.Foo&lt;V&gt;&gt;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2396473</commentid>
    <comment_count>8</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-03 15:02:58 -0400</bug_when>
    <thetext>(In reply to Garret Wilson from comment #7)
&gt; I initially had Eclipse 4.3.2 installed with the Java 8 patches, as I
&gt; indicated above. This morning I added the
&gt; http://download.eclipse.org/eclipse/updates/4.4milestones repository to my
&gt; available software sites and checked for updates, which installed Eclipse
&gt; 4.4 M7. It now says Eclipse SDK 4.4.0.I20140501-0200 in the about
&gt; installation details.

So far it looks good. To rule out any installation problems, could you still please mention the exact version number of plugin org.eclipse.jdt.core? TIA.


&gt; I created a new class and copied the test code directly from my comment in
&gt; this bug. I still get an error:
&gt; 
&gt; Type mismatch: cannot convert from EclipseJava8Generics.FooBar&lt;Object,?
&gt; extends EclipseJava8Generics.Foo&lt;Object&gt;&gt; to EclipseJava8Generics.FooBar&lt;V,?
&gt; extends EclipseJava8Generics.Foo&lt;V&gt;&gt;

I just tried the same with a pristine SDK 4.4 M7: no error.

Next guess: a configuration issue, like different jdt preferences. To rule this out, could you please attach a full example project that exhibits the error?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2396474</commentid>
    <comment_count>9</comment_count>
    <who name="Garret Wilson">garret</who>
    <bug_when>2014-05-03 15:22:13 -0400</bug_when>
    <thetext>Ah ha! I still had the 4.3.2 patch installed:

Eclipse JDT (Java Development Tools) Patch with Java 8 support (for Kepler SR2)	1.0.0.v20140317-1956

It must have been overriding the M7 compiler. I uninstalled it, and now the test code passes.

I will revert all the workarounds we added to see if the M7 changes fixes those, too.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2396475</commentid>
    <comment_count>10</comment_count>
    <who name="Garret Wilson">garret</who>
    <bug_when>2014-05-03 15:27:26 -0400</bug_when>
    <thetext>(sigh) Unfortunately after reverting the workarounds we had added to get Eclipse to compile generics with Java 8, we still have several errors. They are related to generics; although they might not be the exact same bug, I wouldn&apos;t be surprised if they involve similar mistakes in the code.

I will now go about creating test cases. :( Would you prefer that I reopen this bug, or create new bugs for the new test cases?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2396484</commentid>
    <comment_count>11</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-03 17:16:29 -0400</bug_when>
    <thetext>(In reply to Garret Wilson from comment #10)
&gt; (sigh) Unfortunately after reverting the workarounds we had added to get
&gt; Eclipse to compile generics with Java 8, we still have several errors. They
&gt; are related to generics; although they might not be the exact same bug, I
&gt; wouldn&apos;t be surprised if they involve similar mistakes in the code.

I wouldn&apos;t dare such a guess before I see the bug in the debugger :)

&gt; I will now go about creating test cases. :( Would you prefer that I reopen
&gt; this bug, or create new bugs for the new test cases?

Please file new bugs, thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2396490</commentid>
    <comment_count>12</comment_count>
    <who name="Garret Wilson">garret</who>
    <bug_when>2014-05-03 18:14:36 -0400</bug_when>
    <thetext>OK, I&apos;ve filed Bug 434044. Thanks.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>