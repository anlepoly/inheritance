<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>428291</bug_id>
          
          <creation_ts>2014-02-16 07:32:00 -0500</creation_ts>
          <short_desc>[1.8][compiler] The method addListener(ListExpressionHelper&lt;E&gt;, ObservableListValue&lt;E&gt;, InvalidationListener) in the type ListExpressionHelper is not applicable for the arguments (ListExpressionHelper&lt;E&gt;, ListBinding&lt;E&gt;, ChangeListener&lt;capture#2-of ? supe</short_desc>
          <delta_ts>2014-02-21 00:13:44 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Mac OS X</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Steve Northover">snorthov</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2363922</commentid>
    <comment_count>0</comment_count>
      <attachid>239995</attachid>
    <who name="Steve Northover">snorthov</who>
    <bug_when>2014-02-16 07:32:49 -0500</bug_when>
    <thetext>Created attachment 239995
This is the file that has the compile error.

This bug is impacting openJFX project builds.

The attached file compiles properly under 1.7 but fails under 1.8.  Make sure that you compile against JDK8 or have jfxrt.jar on the class path.  

The compiler has trouble with ListExpressionHelper.addListener() and ListExpressionHelper.removeListener().</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2363938</commentid>
    <comment_count>1</comment_count>
    <who name="Steve Northover">snorthov</who>
    <bug_when>2014-02-16 09:19:21 -0500</bug_when>
    <thetext>This one is really bad.  The entire OpenJFX stack relies on base classes like this so that development in Eclipse is stopped cold.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2363942</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-16 09:29:56 -0500</bug_when>
    <thetext>Luckily this can be reproduced without further configuration battles. :)

Still work is needed to extract a non-GPL test case ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2363947</commentid>
    <comment_count>3</comment_count>
    <who name="Steve Northover">snorthov</who>
    <bug_when>2014-02-16 10:01:53 -0500</bug_when>
    <thetext>I had a quick go at constructing a stand alone test case but in the end, ran out of time.  It was more important to get the bug into your hands.  As indicated in this bug report, fixing this is critical as nothing about it in the OpenJFX stack will work meaning.

I am using the Eclipse JDK8 update site.  When (if) you have something for me to try, I&apos;ll be glad to let you know how I get on.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2363948</commentid>
    <comment_count>4</comment_count>
    <who name="Steve Northover">snorthov</who>
    <bug_when>2014-02-16 10:02:54 -0500</bug_when>
    <thetext>&quot;As indicated in this bug report, fixing this is critical as nothing above it in the OpenJFX stack will work&quot;

I got Mac spell corrected when I wasn&apos;t looking ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2363990</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-16 11:54:02 -0500</bug_when>
    <thetext>Extracting a practical JUnit was the tedious part. Once I had it, the root cause was clear:

When reducing a subtype constraint with 
  X &lt;: capture-of ? super Y
we need to create:
  X &lt;: Y

In spec lingo this is:

  If T is a type variable...
    ...
    if T has a lower bound, B, the constraint reduces to S &lt;: B.

I simply didn&apos;t think of a CaptureBinding as a type variable that could possibly have a lower bound. Now I know :)

As the same code location still contained a TODO hinting at missing implementation for intersection types, I added that, too. Not touched by any JUnit yet, though.

While running tests I saw a shiny new error, which I haven&apos;t seen before:

Java HotSpot(TM) Server VM warning: INFO: os::commit_memory(0x6d4c0000, 50593792, 0) failed; error=&apos;Cannot allocate memory&apos; (errno=12)

This happened at the exact test case that is having performance issues:
GRT_1_8.testBug424195_comment2()

Running just that test suite everything was fine.

Test &amp; fix released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=a5722689742a043213ccdec9d3d691140ed7f4f9


UNFORTUNATELY, when re-testing the original example this still fails :(, back to the debugger ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2363992</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-16 12:03:01 -0500</bug_when>
    <thetext>Remaining problem: I simply was overly cautious when checking that the lower bound is the only bound of the capture: in real life we may get a lower bound plus an upper bound of j.l.Object - this shouldn&apos;t count, I suppose.

Added the check for j.l.Object via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=6f632e6c9b1f2ab8d4dcc2c951d7c4d82550641a

Resolved.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2366467</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-21 00:13:44 -0500</bug_when>
    <thetext>Verified as working for Eclipse + Java 8 RC1 using Kepler SR1 +   
Eclipse Java Development Tools Patch for Java 8 Support (BETA)	1.0.0.v20140220-2054</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>239995</attachid>
            <date>2014-02-16 07:32:00 -0500</date>
            <delta_ts>2014-02-16 07:32:49 -0500</delta_ts>
            <desc>This is the file that has the compile error.</desc>
            <filename>ListBinding.java</filename>
            <type>application/octet-stream</type>
            <size>9434</size>
            <attacher name="Steve Northover">snorthov</attacher>
            
              <data encoding="base64">LyoKICogQ29weXJpZ2h0IChjKSAyMDExLCAyMDEzLCBPcmFjbGUgYW5kL29yIGl0cyBhZmZpbGlh
dGVzLiBBbGwgcmlnaHRzIHJlc2VydmVkLgogKiBETyBOT1QgQUxURVIgT1IgUkVNT1ZFIENPUFlS
SUdIVCBOT1RJQ0VTIE9SIFRISVMgRklMRSBIRUFERVIuCiAqCiAqIFRoaXMgY29kZSBpcyBmcmVl
IHNvZnR3YXJlOyB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5IGl0CiAqIHVu
ZGVyIHRoZSB0ZXJtcyBvZiB0aGUgR05VIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgdmVyc2lvbiAy
IG9ubHksIGFzCiAqIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLiAg
T3JhY2xlIGRlc2lnbmF0ZXMgdGhpcwogKiBwYXJ0aWN1bGFyIGZpbGUgYXMgc3ViamVjdCB0byB0
aGUgIkNsYXNzcGF0aCIgZXhjZXB0aW9uIGFzIHByb3ZpZGVkCiAqIGJ5IE9yYWNsZSBpbiB0aGUg
TElDRU5TRSBmaWxlIHRoYXQgYWNjb21wYW5pZWQgdGhpcyBjb2RlLgogKgogKiBUaGlzIGNvZGUg
aXMgZGlzdHJpYnV0ZWQgaW4gdGhlIGhvcGUgdGhhdCBpdCB3aWxsIGJlIHVzZWZ1bCwgYnV0IFdJ
VEhPVVQKICogQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkg
b2YgTUVSQ0hBTlRBQklMSVRZIG9yCiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NF
LiAgU2VlIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZQogKiB2ZXJzaW9uIDIgZm9yIG1v
cmUgZGV0YWlscyAoYSBjb3B5IGlzIGluY2x1ZGVkIGluIHRoZSBMSUNFTlNFIGZpbGUgdGhhdAog
KiBhY2NvbXBhbmllZCB0aGlzIGNvZGUpLgogKgogKiBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQg
YSBjb3B5IG9mIHRoZSBHTlUgR2VuZXJhbCBQdWJsaWMgTGljZW5zZSB2ZXJzaW9uCiAqIDIgYWxv
bmcgd2l0aCB0aGlzIHdvcms7IGlmIG5vdCwgd3JpdGUgdG8gdGhlIEZyZWUgU29mdHdhcmUgRm91
bmRhdGlvbiwKICogSW5jLiwgNTEgRnJhbmtsaW4gU3QsIEZpZnRoIEZsb29yLCBCb3N0b24sIE1B
IDAyMTEwLTEzMDEgVVNBLgogKgogKiBQbGVhc2UgY29udGFjdCBPcmFjbGUsIDUwMCBPcmFjbGUg
UGFya3dheSwgUmVkd29vZCBTaG9yZXMsIENBIDk0MDY1IFVTQQogKiBvciB2aXNpdCB3d3cub3Jh
Y2xlLmNvbSBpZiB5b3UgbmVlZCBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIG9yIGhhdmUgYW55CiAq
IHF1ZXN0aW9ucy4KICovCgpwYWNrYWdlIGphdmFmeC5iZWFucy5iaW5kaW5nOwoKaW1wb3J0IGNv
bS5zdW4uamF2YWZ4LmJpbmRpbmcuQmluZGluZ0hlbHBlck9ic2VydmVyOwppbXBvcnQgY29tLnN1
bi5qYXZhZnguYmluZGluZy5MaXN0RXhwcmVzc2lvbkhlbHBlcjsKaW1wb3J0IGphdmFmeC5iZWFu
cy5JbnZhbGlkYXRpb25MaXN0ZW5lcjsKaW1wb3J0IGphdmFmeC5iZWFucy5PYnNlcnZhYmxlOwpp
bXBvcnQgamF2YWZ4LmJlYW5zLnByb3BlcnR5LlJlYWRPbmx5Qm9vbGVhblByb3BlcnR5OwppbXBv
cnQgamF2YWZ4LmJlYW5zLnByb3BlcnR5LlJlYWRPbmx5Qm9vbGVhblByb3BlcnR5QmFzZTsKaW1w
b3J0IGphdmFmeC5iZWFucy5wcm9wZXJ0eS5SZWFkT25seUludGVnZXJQcm9wZXJ0eTsKaW1wb3J0
IGphdmFmeC5iZWFucy5wcm9wZXJ0eS5SZWFkT25seUludGVnZXJQcm9wZXJ0eUJhc2U7CmltcG9y
dCBqYXZhZnguYmVhbnMudmFsdWUuQ2hhbmdlTGlzdGVuZXI7CmltcG9ydCBqYXZhZnguY29sbGVj
dGlvbnMuRlhDb2xsZWN0aW9uczsKaW1wb3J0IGphdmFmeC5jb2xsZWN0aW9ucy5MaXN0Q2hhbmdl
TGlzdGVuZXI7CmltcG9ydCBqYXZhZnguY29sbGVjdGlvbnMuT2JzZXJ2YWJsZUxpc3Q7CgovKioK
ICogQmFzZSBjbGFzcyB0aGF0IHByb3ZpZGVzIG1vc3Qgb2YgdGhlIGZ1bmN0aW9uYWxpdHkgbmVl
ZGVkIHRvIGltcGxlbWVudCBhCiAqIHtAbGluayBCaW5kaW5nfSBvZiBhbiB7QGxpbmsgamF2YWZ4
LmNvbGxlY3Rpb25zLk9ic2VydmFibGVMaXN0fS4KICogPHA+CiAqIHtAY29kZSBMaXN0QmluZGlu
Z30gcHJvdmlkZXMgYSBzaW1wbGUgaW52YWxpZGF0aW9uLXNjaGVtZS4gQW4gZXh0ZW5kaW5nCiAq
IGNsYXNzIGNhbiByZWdpc3RlciBkZXBlbmRlbmNpZXMgYnkgY2FsbGluZyB7QGxpbmsgI2JpbmQo
T2JzZXJ2YWJsZS4uLil9LgogKiBJZiBvbmUgb2YgdGhlIHJlZ2lzdGVyZWQgZGVwZW5kZW5jaWVz
IGJlY29tZXMgaW52YWxpZCwgdGhpcwogKiB7QGNvZGUgTGlzdEJpbmRpbmd9IGlzIG1hcmtlZCBh
cyBpbnZhbGlkLiBXaXRoCiAqIHtAbGluayAjdW5iaW5kKE9ic2VydmFibGUuLi4pfSBsaXN0ZW5p
bmcgdG8gZGVwZW5kZW5jaWVzIGNhbiBiZSBzdG9wcGVkLgogKiA8cD4KICogVG8gcHJvdmlkZSBh
IGNvbmNyZXRlIGltcGxlbWVudGF0aW9uIG9mIHRoaXMgY2xhc3MsIHRoZSBtZXRob2QKICoge0Bs
aW5rICNjb21wdXRlVmFsdWUoKX0gaGFzIHRvIGJlIGltcGxlbWVudGVkIHRvIGNhbGN1bGF0ZSB0
aGUgdmFsdWUgb2YgdGhpcwogKiBiaW5kaW5nIGJhc2VkIG9uIHRoZSBjdXJyZW50IHN0YXRlIG9m
IHRoZSBkZXBlbmRlbmNpZXMuIEl0IGlzIGNhbGxlZCB3aGVuCiAqIHtAbGluayAjZ2V0KCl9IGlz
IGNhbGxlZCBmb3IgYW4gaW52YWxpZCBiaW5kaW5nLgogKiA8cD4KICogU2VlIHtAbGluayBEb3Vi
bGVCaW5kaW5nfSBmb3IgYW4gZXhhbXBsZSBob3cgdGhpcyBiYXNlIGNsYXNzIGNhbiBiZSBleHRl
bmRlZC4KICoKICogQHNlZSBCaW5kaW5nCiAqIEBzZWUgTGlzdEV4cHJlc3Npb24KICoKICogQHBh
cmFtIDxFPgogKiAgICAgICAgICAgIHRoZSB0eXBlIG9mIHRoZSB7QGNvZGUgTGlzdH0gZWxlbWVu
dAogKiBAc2luY2UgSmF2YUZYIDIuMQogKi8KcHVibGljIGFic3RyYWN0IGNsYXNzIExpc3RCaW5k
aW5nPEU+IGV4dGVuZHMgTGlzdEV4cHJlc3Npb248RT4gaW1wbGVtZW50cyBCaW5kaW5nPE9ic2Vy
dmFibGVMaXN0PEU+PiB7CgogICAgcHJpdmF0ZSBmaW5hbCBMaXN0Q2hhbmdlTGlzdGVuZXI8RT4g
bGlzdENoYW5nZUxpc3RlbmVyID0gbmV3IExpc3RDaGFuZ2VMaXN0ZW5lcjxFPigpIHsKICAgICAg
ICBAT3ZlcnJpZGUKICAgICAgICBwdWJsaWMgdm9pZCBvbkNoYW5nZWQoQ2hhbmdlPD8gZXh0ZW5k
cyBFPiBjaGFuZ2UpIHsKICAgICAgICAgICAgaW52YWxpZGF0ZVByb3BlcnRpZXMoKTsKICAgICAg
ICAgICAgb25JbnZhbGlkYXRpbmcoKTsKICAgICAgICAgICAgTGlzdEV4cHJlc3Npb25IZWxwZXIu
ZmlyZVZhbHVlQ2hhbmdlZEV2ZW50KGhlbHBlciwgY2hhbmdlKTsKICAgICAgICB9CiAgICB9OwoK
ICAgIHByaXZhdGUgT2JzZXJ2YWJsZUxpc3Q8RT4gdmFsdWU7CiAgICBwcml2YXRlIGJvb2xlYW4g
dmFsaWQgPSBmYWxzZTsKICAgIHByaXZhdGUgQmluZGluZ0hlbHBlck9ic2VydmVyIG9ic2VydmVy
OwogICAgcHJpdmF0ZSBMaXN0RXhwcmVzc2lvbkhlbHBlcjxFPiBoZWxwZXIgPSBudWxsOwoKICAg
IHByaXZhdGUgU2l6ZVByb3BlcnR5IHNpemUwOwogICAgcHJpdmF0ZSBFbXB0eVByb3BlcnR5IGVt
cHR5MDsKICAgIAogICAgQE92ZXJyaWRlCiAgICBwdWJsaWMgUmVhZE9ubHlJbnRlZ2VyUHJvcGVy
dHkgc2l6ZVByb3BlcnR5KCkgewogICAgICAgIGlmIChzaXplMCA9PSBudWxsKSB7CiAgICAgICAg
ICAgIHNpemUwID0gbmV3IFNpemVQcm9wZXJ0eSgpOwogICAgICAgIH0KICAgICAgICByZXR1cm4g
c2l6ZTA7CiAgICB9CgogICAgcHJpdmF0ZSBjbGFzcyBTaXplUHJvcGVydHkgZXh0ZW5kcyBSZWFk
T25seUludGVnZXJQcm9wZXJ0eUJhc2UgewogICAgICAgIEBPdmVycmlkZQogICAgICAgIHB1Ymxp
YyBpbnQgZ2V0KCkgewogICAgICAgICAgICByZXR1cm4gc2l6ZSgpOwogICAgICAgIH0KCiAgICAg
ICAgQE92ZXJyaWRlCiAgICAgICAgcHVibGljIE9iamVjdCBnZXRCZWFuKCkgewogICAgICAgICAg
ICByZXR1cm4gTGlzdEJpbmRpbmcudGhpczsKICAgICAgICB9CgogICAgICAgIEBPdmVycmlkZQog
ICAgICAgIHB1YmxpYyBTdHJpbmcgZ2V0TmFtZSgpIHsKICAgICAgICAgICAgcmV0dXJuICJzaXpl
IjsKICAgICAgICB9CgogICAgICAgIHByb3RlY3RlZCB2b2lkIGZpcmVWYWx1ZUNoYW5nZWRFdmVu
dCgpIHsKICAgICAgICAgICAgc3VwZXIuZmlyZVZhbHVlQ2hhbmdlZEV2ZW50KCk7CiAgICAgICAg
fQogICAgfQoKICAgIEBPdmVycmlkZQogICAgcHVibGljIFJlYWRPbmx5Qm9vbGVhblByb3BlcnR5
IGVtcHR5UHJvcGVydHkoKSB7CiAgICAgICAgaWYgKGVtcHR5MCA9PSBudWxsKSB7CiAgICAgICAg
ICAgIGVtcHR5MCA9IG5ldyBFbXB0eVByb3BlcnR5KCk7CiAgICAgICAgfQogICAgICAgIHJldHVy
biBlbXB0eTA7CiAgICB9CgogICAgcHJpdmF0ZSBjbGFzcyBFbXB0eVByb3BlcnR5IGV4dGVuZHMg
UmVhZE9ubHlCb29sZWFuUHJvcGVydHlCYXNlIHsKCiAgICAgICAgQE92ZXJyaWRlCiAgICAgICAg
cHVibGljIGJvb2xlYW4gZ2V0KCkgewogICAgICAgICAgICByZXR1cm4gaXNFbXB0eSgpOwogICAg
ICAgIH0KCiAgICAgICAgQE92ZXJyaWRlCiAgICAgICAgcHVibGljIE9iamVjdCBnZXRCZWFuKCkg
ewogICAgICAgICAgICByZXR1cm4gTGlzdEJpbmRpbmcudGhpczsKICAgICAgICB9CgogICAgICAg
IEBPdmVycmlkZQogICAgICAgIHB1YmxpYyBTdHJpbmcgZ2V0TmFtZSgpIHsKICAgICAgICAgICAg
cmV0dXJuICJlbXB0eSI7CiAgICAgICAgfQoKICAgICAgICBwcm90ZWN0ZWQgdm9pZCBmaXJlVmFs
dWVDaGFuZ2VkRXZlbnQoKSB7CiAgICAgICAgICAgIHN1cGVyLmZpcmVWYWx1ZUNoYW5nZWRFdmVu
dCgpOwogICAgICAgIH0KICAgIH0KCiAgICBAT3ZlcnJpZGUKICAgIHB1YmxpYyB2b2lkIGFkZExp
c3RlbmVyKEludmFsaWRhdGlvbkxpc3RlbmVyIGxpc3RlbmVyKSB7CiAgICAgICAgaGVscGVyID0g
TGlzdEV4cHJlc3Npb25IZWxwZXIuYWRkTGlzdGVuZXIoaGVscGVyLCB0aGlzLCBsaXN0ZW5lcik7
CiAgICB9CgogICAgQE92ZXJyaWRlCiAgICBwdWJsaWMgdm9pZCByZW1vdmVMaXN0ZW5lcihJbnZh
bGlkYXRpb25MaXN0ZW5lciBsaXN0ZW5lcikgewogICAgICAgIGhlbHBlciA9IExpc3RFeHByZXNz
aW9uSGVscGVyLnJlbW92ZUxpc3RlbmVyKGhlbHBlciwgbGlzdGVuZXIpOwogICAgfQoKICAgIEBP
dmVycmlkZQogICAgcHVibGljIHZvaWQgYWRkTGlzdGVuZXIoQ2hhbmdlTGlzdGVuZXI8PyBzdXBl
ciBPYnNlcnZhYmxlTGlzdDxFPj4gbGlzdGVuZXIpIHsKICAgICAgICBoZWxwZXIgPSBMaXN0RXhw
cmVzc2lvbkhlbHBlci5hZGRMaXN0ZW5lcihoZWxwZXIsIHRoaXMsIGxpc3RlbmVyKTsKICAgIH0K
CiAgICBAT3ZlcnJpZGUKICAgIHB1YmxpYyB2b2lkIHJlbW92ZUxpc3RlbmVyKENoYW5nZUxpc3Rl
bmVyPD8gc3VwZXIgT2JzZXJ2YWJsZUxpc3Q8RT4+IGxpc3RlbmVyKSB7CiAgICAgICAgaGVscGVy
ID0gTGlzdEV4cHJlc3Npb25IZWxwZXIucmVtb3ZlTGlzdGVuZXIoaGVscGVyLCBsaXN0ZW5lcik7
CiAgICB9CgogICAgQE92ZXJyaWRlCiAgICBwdWJsaWMgdm9pZCBhZGRMaXN0ZW5lcihMaXN0Q2hh
bmdlTGlzdGVuZXI8PyBzdXBlciBFPiBsaXN0ZW5lcikgewogICAgICAgIGhlbHBlciA9IExpc3RF
eHByZXNzaW9uSGVscGVyLmFkZExpc3RlbmVyKGhlbHBlciwgdGhpcywgbGlzdGVuZXIpOwogICAg
fQoKICAgIEBPdmVycmlkZQogICAgcHVibGljIHZvaWQgcmVtb3ZlTGlzdGVuZXIoTGlzdENoYW5n
ZUxpc3RlbmVyPD8gc3VwZXIgRT4gbGlzdGVuZXIpIHsKICAgICAgICBoZWxwZXIgPSBMaXN0RXhw
cmVzc2lvbkhlbHBlci5yZW1vdmVMaXN0ZW5lcihoZWxwZXIsIGxpc3RlbmVyKTsKICAgIH0KCiAg
ICAvKioKICAgICAqIFN0YXJ0IG9ic2VydmluZyB0aGUgZGVwZW5kZW5jaWVzIGZvciBjaGFuZ2Vz
LiBJZiB0aGUgdmFsdWUgb2Ygb25lIG9mIHRoZQogICAgICogZGVwZW5kZW5jaWVzIGNoYW5nZXMs
IHRoZSBiaW5kaW5nIGlzIG1hcmtlZCBhcyBpbnZhbGlkLgogICAgICoKICAgICAqIEBwYXJhbSBk
ZXBlbmRlbmNpZXMKICAgICAqICAgICAgICAgICAgdGhlIGRlcGVuZGVuY2llcyB0byBvYnNlcnZl
CiAgICAgKi8KICAgIHByb3RlY3RlZCBmaW5hbCB2b2lkIGJpbmQoT2JzZXJ2YWJsZS4uLiBkZXBl
bmRlbmNpZXMpIHsKICAgICAgICBpZiAoKGRlcGVuZGVuY2llcyAhPSBudWxsKSAmJiAoZGVwZW5k
ZW5jaWVzLmxlbmd0aCA+IDApKSB7CiAgICAgICAgICAgIGlmIChvYnNlcnZlciA9PSBudWxsKSB7
CiAgICAgICAgICAgICAgICBvYnNlcnZlciA9IG5ldyBCaW5kaW5nSGVscGVyT2JzZXJ2ZXIodGhp
cyk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgZm9yIChmaW5hbCBPYnNlcnZhYmxlIGRlcCA6
IGRlcGVuZGVuY2llcykgewogICAgICAgICAgICAgICAgaWYgKGRlcCAhPSBudWxsKSB7CiAgICAg
ICAgICAgICAgICAgICAgZGVwLmFkZExpc3RlbmVyKG9ic2VydmVyKTsKICAgICAgICAgICAgICAg
IH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAgICAqIFN0b3Agb2Jz
ZXJ2aW5nIHRoZSBkZXBlbmRlbmNpZXMgZm9yIGNoYW5nZXMuCiAgICAgKgogICAgICogQHBhcmFt
IGRlcGVuZGVuY2llcwogICAgICogICAgICAgICAgICB0aGUgZGVwZW5kZW5jaWVzIHRvIHN0b3Ag
b2JzZXJ2aW5nCiAgICAgKi8KICAgIHByb3RlY3RlZCBmaW5hbCB2b2lkIHVuYmluZChPYnNlcnZh
YmxlLi4uIGRlcGVuZGVuY2llcykgewogICAgICAgIGlmIChvYnNlcnZlciAhPSBudWxsKSB7CiAg
ICAgICAgICAgIGZvciAoZmluYWwgT2JzZXJ2YWJsZSBkZXAgOiBkZXBlbmRlbmNpZXMpIHsKICAg
ICAgICAgICAgICAgIGlmIChkZXAgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgIGRlcC5y
ZW1vdmVMaXN0ZW5lcihvYnNlcnZlcik7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0K
ICAgICAgICAgICAgb2JzZXJ2ZXIgPSBudWxsOwogICAgICAgIH0KICAgIH0KCiAgICAvKioKICAg
ICAqIEEgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBvZiB7QGNvZGUgZGlzcG9zZSgpfSB0aGF0IGlz
IGVtcHR5LgogICAgICovCiAgICBAT3ZlcnJpZGUKICAgIHB1YmxpYyB2b2lkIGRpc3Bvc2UoKSB7
CiAgICB9CgogICAgLyoqCiAgICAgKiBBIGRlZmF1bHQgaW1wbGVtZW50YXRpb24gb2Yge0Bjb2Rl
IGdldERlcGVuZGVuY2llcygpfSB0aGF0IHJldHVybnMgYW4KICAgICAqIGVtcHR5IHtAbGluayBq
YXZhZnguY29sbGVjdGlvbnMuT2JzZXJ2YWJsZUxpc3R9LgogICAgICoKICAgICAqIEByZXR1cm4g
YW4gZW1wdHkge0Bjb2RlIE9ic2VydmFibGVMaXN0fQogICAgICovCiAgICBAT3ZlcnJpZGUKICAg
IHB1YmxpYyBPYnNlcnZhYmxlTGlzdDw/PiBnZXREZXBlbmRlbmNpZXMoKSB7CiAgICAgICAgcmV0
dXJuIEZYQ29sbGVjdGlvbnMuZW1wdHlPYnNlcnZhYmxlTGlzdCgpOwogICAgfQoKICAgIC8qKgog
ICAgICogUmV0dXJucyB0aGUgcmVzdWx0IG9mIHtAbGluayAjY29tcHV0ZVZhbHVlKCl9LiBUaGUg
bWV0aG9kCiAgICAgKiB7QGNvZGUgY29tcHV0ZVZhbHVlKCl9IGlzIG9ubHkgY2FsbGVkIGlmIHRo
ZSBiaW5kaW5nIGlzIGludmFsaWQuIFRoZQogICAgICogcmVzdWx0IGlzIGNhY2hlZCBhbmQgcmV0
dXJuZWQgaWYgdGhlIGJpbmRpbmcgZGlkIG5vdCBiZWNvbWUgaW52YWxpZCBzaW5jZQogICAgICog
dGhlIGxhc3QgY2FsbCBvZiB7QGNvZGUgZ2V0KCl9LgogICAgICoKICAgICAqIEByZXR1cm4gdGhl
IGN1cnJlbnQgdmFsdWUKICAgICAqLwogICAgQE92ZXJyaWRlCiAgICBwdWJsaWMgZmluYWwgT2Jz
ZXJ2YWJsZUxpc3Q8RT4gZ2V0KCkgewogICAgICAgIGlmICghdmFsaWQpIHsKICAgICAgICAgICAg
dmFsdWUgPSBjb21wdXRlVmFsdWUoKTsKICAgICAgICAgICAgdmFsaWQgPSB0cnVlOwogICAgICAg
ICAgICBpZiAodmFsdWUgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgdmFsdWUuYWRkTGlzdGVu
ZXIobGlzdENoYW5nZUxpc3RlbmVyKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICBy
ZXR1cm4gdmFsdWU7CiAgICB9CgogICAgLyoqCiAgICAgKiBUaGUgbWV0aG9kIG9uSW52YWxpZGF0
aW5nKCkgY2FuIGJlIG92ZXJyaWRkZW4gYnkgZXh0ZW5kaW5nIGNsYXNzZXMgdG8KICAgICAqIHJl
YWN0LCBpZiB0aGlzIGJpbmRpbmcgYmVjb21lcyBpbnZhbGlkLiBUaGUgZGVmYXVsdCBpbXBsZW1l
bnRhdGlvbiBpcwogICAgICogZW1wdHkuCiAgICAgKi8KICAgIHByb3RlY3RlZCB2b2lkIG9uSW52
YWxpZGF0aW5nKCkgewogICAgfQogICAgCiAgICBwcml2YXRlIHZvaWQgaW52YWxpZGF0ZVByb3Bl
cnRpZXMoKSB7CiAgICAgICAgaWYgKHNpemUwICE9IG51bGwpIHsKICAgICAgICAgICAgc2l6ZTAu
ZmlyZVZhbHVlQ2hhbmdlZEV2ZW50KCk7CiAgICAgICAgfQogICAgICAgIGlmIChlbXB0eTAgIT0g
bnVsbCkgewogICAgICAgICAgICBlbXB0eTAuZmlyZVZhbHVlQ2hhbmdlZEV2ZW50KCk7CiAgICAg
ICAgfQogICAgfQoKICAgIEBPdmVycmlkZQogICAgcHVibGljIGZpbmFsIHZvaWQgaW52YWxpZGF0
ZSgpIHsKICAgICAgICBpZiAodmFsaWQpIHsKICAgICAgICAgICAgaWYgKHZhbHVlICE9IG51bGwp
IHsKICAgICAgICAgICAgICAgIHZhbHVlLnJlbW92ZUxpc3RlbmVyKGxpc3RDaGFuZ2VMaXN0ZW5l
cik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTsKICAgICAgICAgICAg
aW52YWxpZGF0ZVByb3BlcnRpZXMoKTsKICAgICAgICAgICAgb25JbnZhbGlkYXRpbmcoKTsKICAg
ICAgICAgICAgTGlzdEV4cHJlc3Npb25IZWxwZXIuZmlyZVZhbHVlQ2hhbmdlZEV2ZW50KGhlbHBl
cik7CiAgICAgICAgfQogICAgfQoKICAgIEBPdmVycmlkZQogICAgcHVibGljIGZpbmFsIGJvb2xl
YW4gaXNWYWxpZCgpIHsKICAgICAgICByZXR1cm4gdmFsaWQ7CiAgICB9CgogICAgLyoqCiAgICAg
KiBDYWxjdWxhdGVzIHRoZSBjdXJyZW50IHZhbHVlIG9mIHRoaXMgYmluZGluZy4KICAgICAqIDxw
PgogICAgICogQ2xhc3NlcyBleHRlbmRpbmcge0Bjb2RlIExpc3RCaW5kaW5nfSBoYXZlIHRvIHBy
b3ZpZGUgYW4gaW1wbGVtZW50YXRpb24KICAgICAqIG9mIHtAY29kZSBjb21wdXRlVmFsdWV9Lgog
ICAgICoKICAgICAqIEByZXR1cm4gdGhlIGN1cnJlbnQgdmFsdWUKICAgICAqLwogICAgcHJvdGVj
dGVkIGFic3RyYWN0IE9ic2VydmFibGVMaXN0PEU+IGNvbXB1dGVWYWx1ZSgpOwoKICAgIC8qKgog
ICAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHtAY29kZSBMaXN0
QmluZGluZ30gb2JqZWN0LgogICAgICogQHJldHVybiBhIHN0cmluZyByZXByZXNlbnRhdGlvbiBv
ZiB0aGlzIHtAY29kZSBMaXN0QmluZGluZ30gb2JqZWN0LgogICAgICovCiAgICBAT3ZlcnJpZGUK
ICAgIHB1YmxpYyBTdHJpbmcgdG9TdHJpbmcoKSB7CiAgICAgICAgcmV0dXJuIHZhbGlkID8gIkxp
c3RCaW5kaW5nIFt2YWx1ZTogIiArIGdldCgpICsgIl0iCiAgICAgICAgICAgICAgICA6ICJMaXN0
QmluZGluZyBbaW52YWxpZF0iOwogICAgfQoKfQo=
</data>

          </attachment>
      

    </bug>

</bugzilla>