<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>416379</bug_id>
          
          <creation_ts>2013-09-02 17:15:00 -0400</creation_ts>
          <short_desc>[1.8][parser] Should allow type annotations on return type of generic methods</short_desc>
          <delta_ts>2013-10-17 07:36:02 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Stephan Herrmann">stephan.herrmann</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2301865</commentid>
    <comment_count>0</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-09-02 17:15:49 -0400</bug_when>
    <thetext>I was day dreaming along these lines (see bug 416304):

  &lt;N extends Annotation&gt; @N B f(@N A a)

Much to my surprise ecj didn&apos;t call me nuts but simply answered:

	&lt;N extends Annotation&gt; @N B f(@N A a)
	                       ^^
	Syntax error, type annotations are illegal here

Oops, this seems to be derived from (JSR 308 draft):

  MethodOrFieldDecl:
	UnannType Identifier MethodOrFieldRest

where in fact these original rule should apply:

  GenericMethodOrConstructorDecl:
	TypeParameters GenericMethodOrConstructorRest

  GenericMethodOrConstructorRest:
	(Type | void) Identifier MethodDeclaratorRest
	Identifier ConstructorDeclaratorRest

in the second rule, unchanged for JSR 308, the NT Type now expands to

  [Annotations] UnannType

Ergo: the above syntax should be accepted, leaving the question *why* the above
snippet is illegal as an exercise for the reader :)


As an aside, this implies that the following is legal though totally crazy:

  @NonNull &lt;T&gt; @Nullable String foo() { return null; }

Bonus question: Can @NonNull in this example still be interpreted as a type annotation?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2313683</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-02 23:31:50 -0400</bug_when>
    <thetext>Please remember to set the target so this shows up queries that look for it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2314880</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-07 02:58:03 -0400</bug_when>
    <thetext>Shankha, please follow up: Good news is parser accepts it, so no grammar changes
are required.

Test case:

// --
import java.lang.annotation.ElementType;
import java.lang.annotation.Target;
@Target(ElementType.TYPE_USE)
@interface T {
} 
public class X { 
	&lt;N&gt; @T N f(@T N a) {
		return null;
	}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2319408</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-17 06:53:15 -0400</bug_when>
    <thetext>Comparing against reference compiler I see several problems:

(1) The following program compiles, it should not:

public class X {
	public &lt;T&gt; @Marker Object foo() {
            return null;
	}
}
@interface Marker {
}

Since @Marker does not specify @Target TYPE_USE it cannot feature in a place
where only type annotations are allowed.

(2) The following program is illegal, it is accepted:

import java.lang.annotation.ElementType;
import java.lang.annotation.Target;
@Target(ElementType.TYPE_USE)
@interface T {
} 
public class X {
	public &lt;T&gt; @Marker X() {
        
	}
}

(3) javac 8b108 crashes on:

import java.lang.annotation.Annotation;
import java.util.ArrayList;
import java.lang.annotation.ElementType;
import java.lang.annotation.Target;
@Target(ElementType.TYPE_USE)
@interface T {
} 
public class X { 

	class Y {
		
	}
	
	&lt;N extends Annotation&gt; @T String f(N a) {
		return null;
	}
	
	public static void main(String[] args) {
		new @T X();
		new @T  ArrayList&lt;String&gt;();
		new X().new &lt;String&gt; @T Y() {
			
		};
		
	}
}

We do the right thing everywhere ;-)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2319409</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-17 06:55:39 -0400</bug_when>
    <thetext>(4) Also this code should not be compiled, but javac does.

// --
@interface X {
	@Marker String foo();
}
@interface Marker {
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2319430</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-17 07:36:02 -0400</bug_when>
    <thetext>Fix and tests pushed here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=bc9ce3968f8f3e0eb426deb1d35cab387ea00774

[Stephan, sorry for breaking my own moratorium, we are preparing for
a public early access early next week].

[Shankha, Sorry, I grabbed this bug for the same reason.]</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>