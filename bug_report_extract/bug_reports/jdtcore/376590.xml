<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>376590</bug_id>
          
          <creation_ts>2012-04-12 09:04:00 -0400</creation_ts>
          <short_desc>Private fields with @Inject are ignored by unused field validation</short_desc>
          <delta_ts>2013-08-06 06:59:41 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.3 M6</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Sebastian Zarnekow">Sebastian.Zarnekow</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>daniel_megert</cc>
    
    <cc>entwurf</cc>
    
    <cc>fern</cc>
    
    <cc>fionapple</cc>
    
    <cc>markus_keller</cc>
    
    <cc>shri</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>8</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2092595</commentid>
    <comment_count>0</comment_count>
    <who name="Sebastian Zarnekow">Sebastian.Zarnekow</who>
    <bug_when>2012-04-12 09:04:47 -0400</bug_when>
    <thetext>import com.google.inject.Inject;

public class Empty {

	@Inject
	private String unusedButNotFlagged;
	
	private String unusedAnfFlagged;
	
}


This is a regression since bug 365437 was fixed (which is great!)

Fields that are annotated with @Inject but never read should be flagged as unused fields.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2092607</commentid>
    <comment_count>1</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-04-12 09:16:13 -0400</bug_when>
    <thetext>In light of bug 365437 comment 32 and 33, I&apos;d say this is intentional and not a regression</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2092615</commentid>
    <comment_count>2</comment_count>
    <who name="Sebastian Zarnekow">Sebastian.Zarnekow</who>
    <bug_when>2012-04-12 09:27:52 -0400</bug_when>
    <thetext>Copied new comment from original ticket to move the discussion to this one here:

The container annotations (@Inject and friends) declare dependencies thus
introduce coupling between components. If these dependencies are unused, the
tool should warn me about that because I have the chance to reduce coupling
simply by removing these unused fields.

There is already a special treatment of @Deprecated (I still get the warning
about unused fields). From my perception it may be useful to make a distinction
between common used annotations that lead to reading or writing a field. Since
@Inject will usually be processed by a writing service, I&apos;d expect a warning if
no client reads that field.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2092782</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-04-12 12:17:31 -0400</bug_when>
    <thetext>Hm, maybe for @Inject the best way is indeed to make an exception from the exception from the rule.

But on the long run, maintaining an implementation that hard-codes the subtleties of semantics of lots of annotations looks like a battle we cannot win. In bug 365437 making these things configurable by user options was deemed as too arbitrary an approach.

I wonder, if this information should actually come from additional plug-ins? If JDT/Core would provide an extension point someone can provide a plug-in that knows the rules for DI, someone else do the same for persistence annotations etc.
The point is: you need more than superficial knowledge about an annotation to tell whether it creates a relevant usage relationship. A user option makes it too easy for users to misconfigure (and they&apos;ll blame the compiler that it gave wrong advice). A plug-in providing this info via an extension can be reviewed once and for all.

The only downside I can see: this won&apos;t directly work for the batch compiler.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2145430</commentid>
    <comment_count>4</comment_count>
    <who name="Michael Piefel">entwurf</who>
    <bug_when>2012-08-07 02:45:06 -0400</bug_when>
    <thetext>(In reply to comment #1)
&gt; In light of bug 365437 comment 32 and 33, I&apos;d say this is intentional and
&gt; not a regression

I believe it is a regression and the fix for 365437 actually made things worse:

- old behaviour: field is actually used -&gt; just silence the warning

- new behaviour: field is actually unused -&gt; no indication anywhere</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2145439</commentid>
    <comment_count>5</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-08-07 03:16:18 -0400</bug_when>
    <thetext>*** Bug 386692 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2145475</commentid>
    <comment_count>6</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-08-07 04:36:02 -0400</bug_when>
    <thetext>(In reply to comment #4)
&gt; (In reply to comment #1)
&gt; &gt; In light of bug 365437 comment 32 and 33, I&apos;d say this is intentional and
&gt; &gt; not a regression
&gt; 
&gt; [..] the fix for 365437 actually made things
&gt; worse:
It really depends on how you look at things. I would say that the problem of fields being marked as unused even when they&apos;re actually used in some way is worse than being silent on unused fields. Ofcourse, its good to have the warning on the above cases to guarantee leaner code, but its not like the code will break at runtime or anything. I still don&apos;t know how we can fix this bug to accomodate all the hundreds of annotations people will want to have excluded. And this list will never stop growing!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2146211</commentid>
    <comment_count>7</comment_count>
    <who name="Michael Piefel">entwurf</who>
    <bug_when>2012-08-08 14:19:51 -0400</bug_when>
    <thetext>(In reply to comment #6)
&gt; I would say that the problem of fields being marked
&gt; as unused even when they&apos;re actually used in some way is
&gt; worse than being silent on unused fields.

I agree when you put it that way.

However, you can easily silence the spurious warning once you determined the field is indeed used. I do not have a work-around to accomplish the analysis that I would want to have  yet.

Regarding the possibly infinite number of annotations to consider and to make exceptions for (although Id say that @Inject, @In and @Autowired should cover a lot of ground), if you want to avoid that, make it configurable.

For me, make the old behaviour an option.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2157292</commentid>
    <comment_count>8</comment_count>
    <who name="Michael Piefel">entwurf</who>
    <bug_when>2012-09-07 04:52:53 -0400</bug_when>
    <thetext>import javax.annotation.Nonnull;

public class Nulls {
	private String unusedAndFlagged() { return null; }
	
	@Nonnull
	private String usedButNotFlagged() { return &quot;&quot;; }
}


With this example its even more obvious that the approach to consider each annotation as use is hurting. I can now trade in null analysis for unused analysis.

You say And this list will never stop growing! and youre quite right. You suppress way too many warnings when it is so easy to suppress the few actually necessary places with @SuppressWarnings.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2171403</commentid>
    <comment_count>9</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-10-12 20:37:55 -0400</bug_when>
    <thetext>*** Bug 391842 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2189731</commentid>
    <comment_count>10</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-12-02 08:41:01 -0500</bug_when>
    <thetext>Where do we stand in this discussion?

In bug 383371 comment 48 we have a request to respect @Inject also during null analysis.

If we agree that Guice&apos;s @Inject is worth hard-coding special treatment in our analysis, I&apos;d be happy to use that information for both analyses (&quot;unused&quot; and &quot;null&quot;) alike.

Brainstorming about the situation I could imagine that we classify the known effect of an annotation into:
1. read/write
2. guaranteed non-null write
3. unknown

Here, @Inject would be classified as (2), right? (Unless Guice is told to tolerate a null value(?)). (2) would *not* prevent &quot;unused&quot; warnings...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2189733</commentid>
    <comment_count>11</comment_count>
    <who name="Sebastian Zarnekow">Sebastian.Zarnekow</who>
    <bug_when>2012-12-02 09:00:38 -0500</bug_when>
    <thetext>(In reply to comment #10)
&gt; Where do we stand in this discussion?
&gt; 
&gt; In bug 383371 comment 48 we have a request to respect @Inject also during
&gt; null analysis.

Yes, that would be great!

&gt; If we agree that Guice&apos;s @Inject is worth hard-coding special treatment in
&gt; our analysis, I&apos;d be happy to use that information for both analyses
&gt; (&quot;unused&quot; and &quot;null&quot;) alike.

The solution should allow other to add other annotations (preference?, extension point?), e.g. to cover com.google.inject.Inject and javax.inject.Inject. Other frameworks may use different annotations for that purpose.

&gt; 
&gt; Brainstorming about the situation I could imagine that we classify the known
&gt; effect of an annotation into:
&gt; 1. read/write
&gt; 2. guaranteed non-null write
&gt; 3. unknown
&gt; 
&gt; Here, @Inject would be classified as (2), right? (Unless Guice is told to
&gt; tolerate a null value(?)). (2) would *not* prevent &quot;unused&quot; warnings...


Guice&apos;s @Inject has a notion of &apos;boolean optional()&apos;. option=true implies that that there is no guaranteed non-null write. 

@Inject(optional=true) Type name = new Type();
should be definitely non-null whereas @Inject(optional=true) Type name; is possibly null.

I&apos;d like to see warnings for unused injected fields, so (2) carries the right semantics for my use case. Please note that it is possible to annotate private methods with @Inject which implies that Guice will invoke that methods, so I don&apos;t expect an unused warning there.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2217787</commentid>
    <comment_count>12</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-02-17 13:36:25 -0500</bug_when>
    <thetext>Released for 4.3 M6 via commit fc2bbd994a305724f9f5d9645163d8f7329cd965.

The patch handles both @javax.inject.Inject and @com.google.inject.Inject.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2229300</commentid>
    <comment_count>13</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-12 02:26:05 -0400</bug_when>
    <thetext>Verified for 4.3 M6 using Build id: I20130310-2000</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2291645</commentid>
    <comment_count>14</comment_count>
    <who name="Fernando Padilla">fern</who>
    <bug_when>2013-08-05 20:18:28 -0400</bug_when>
    <thetext>Could you not support @Autowired too, which is probably also very popular?

org.springframework.beans.factory.annotation.Autowired</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2291776</commentid>
    <comment_count>15</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2013-08-06 06:59:41 -0400</bug_when>
    <thetext>(In reply to comment #14)
&gt; Could you not support @Autowired too, which is probably also very popular?
&gt; 
&gt; org.springframework.beans.factory.annotation.Autowired

See bug 386692 comment 3. Bug 386692 should be reopened and then either be closed as WONTFIX or get fixed.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>