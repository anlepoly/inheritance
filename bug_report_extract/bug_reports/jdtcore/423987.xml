<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>423987</bug_id>
          
          <creation_ts>2013-12-13 02:11:00 -0500</creation_ts>
          <short_desc>[1.8][assist] Follow up tasks from Bug 422468 - [1.8][assist] Code assist issues with type elided lambda parameters</short_desc>
          <delta_ts>2014-12-10 01:28:05 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.5 M4</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>manpalat</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2341395</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-12-13 02:11:23 -0500</bug_when>
    <thetext>This CR will collect the follow up tasks found during code review and testing.

1. We should/could get rid of the new abstraction CommitRollbackParser by
pushing down the APIs into Parser itself.

2. CompletionParser.becomeSimpileParser() and restoreAssistParser() needs
to be studied to see what effect if any they may have on the new commit-rollback
scheme.

3. Stacking of assist nodes can be handled better/cleaner ?

4. We could fast forward past the initial identifiers in an identifier
collection leading up to completion point. 

5. copyState() could avoid deep copy. Note: Parser state stack must be deep
copied. As well as the place in CompletionParser attachOrphanNode(), as the
latter mucks around with expression and ast stacks a bit too much.

6. One more round of review of CommitRollbackParser.

7. AssistParser.resumedAfterRepair: can be handled better. (?)

8. AssistParser.elementStack: do we need lambdas and body kind there - we
don&apos;t use it as of now at all.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2341999</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-12-15 09:28:59 -0500</bug_when>
    <thetext>9. Most important, we should move away from the fake EOF model on completion.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2476977</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-05 04:21:42 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #0)
&gt; This CR will collect the follow up tasks found during code review and
&gt; testing.
&gt; 
&gt; 1. We should/could get rid of the new abstraction CommitRollbackParser by
&gt; pushing down the APIs into Parser itself.

I got rid of CommitRollbackParser by pushing APIs down to Parser or
AssistParser as required here:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=cccafe00dbf29f156949d8f0d0aec370b02aa048

&gt; 3. Stacking of assist nodes can be handled better/cleaner ?

This was already implemented.

&gt; 4. We could fast forward past the initial identifiers in an identifier
&gt; collection leading up to completion point. 

This is optional - left alone.

&gt; 5. copyState() could avoid deep copy. Note: Parser state stack must be deep
&gt; copied. As well as the place in CompletionParser attachOrphanNode(), as the
&gt; latter mucks around with expression and ast stacks a bit too much.

This is optional - left alone.

&gt; 
&gt; 6. One more round of review of CommitRollbackParser.

Done and pushed down APIs.

&gt; 7. AssistParser.resumedAfterRepair: can be handled better. (?)

This works as is - left alone

&gt; 8. AssistParser.elementStack: do we need lambdas and body kind there - we
&gt; don&apos;t use it as of now at all.

This works as is - left alone

(In reply to Srikanth Sankaran from comment #1)
&gt; 9. Most important, we should move away from the fake EOF model on completion.

This works as is - left alone</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2494963</commentid>
    <comment_count>3</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2014-12-10 01:28:05 -0500</bug_when>
    <thetext>Verified for Eclipse Mars 4.5 M4 using build  I20141209-2000</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>