<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>414444</bug_id>
          
          <creation_ts>2013-08-05 18:05:00 -0400</creation_ts>
          <short_desc>[1.8][null] Configure null annotation bundle for 1.8 (TYPE_USE)</short_desc>
          <delta_ts>2014-02-20 15:22:02 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>392099</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Stephan Herrmann">stephan.herrmann</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>aclement</cc>
    
    <cc>daniel_megert</cc>
    
    <cc>jarthana</cc>
    
    <cc>markus_keller</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>tom.schindl</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2291633</commentid>
    <comment_count>0</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-08-05 18:05:22 -0400</bug_when>
    <thetext>Following the discussion in bug 394539 the bundle org.eclipse.jdt.annotation
will be bumped up to 2.0.0 to require a BREE of 1.8 and change our annotations
for target TYPE_USE.

At the same time we don&apos;t want to loose the ability to run our tests in 1.7 mode.
I&apos;m currently trying how the tests could automatically switch between both versions
of this bundle.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2291658</commentid>
    <comment_count>1</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-08-05 22:44:43 -0400</bug_when>
    <thetext>It&apos;ll be interesting</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2293497</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-08-11 06:12:14 -0400</bug_when>
    <thetext>Letting the tests pick the right annotation bundle isn&apos;t difficult,
PackageAdmin.getBundles() is our friend here (which, although deprecated,
is still recommended by Tom Watson).

The &quot;interesting&quot; part is: can we build and ship the SDK with two versions
of org.eclipse.jdt.annotation? If all goes well, we may only need to
- create a new project - say org.eclipse.jdt.annotation_old
- have both projects use the same BSN, but different versions
- include both bundles with explicit version in feature.xml

I&apos;ll make a little experiment if tycho would be happy with this setup.
Luckily there&apos;s no reason to make this bundle a singleton, so OSGi should
be happy with installing both versions side-by-side.


The reason for wanting both versions also in the release:
Users of Luna must still be able to program Java 7- and use null annotations
that are (have to be) declaration annotations.
Plug-in projects select one of the annotation bundles by specifying the
version as either &quot;[1.1.0,2.0.0)&quot; or &quot;[2.0.0,3.0.0)&quot;.
Plain Java projects will simply copy the desired jar onto their classpath.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2294611</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-08-14 05:20:02 -0400</bug_when>
    <thetext>Quick experiments indicate that PDE (IDE) and Tycho (headless build) seem to
be happy with including two versions of a plugin into the same feature.

As mentioned before, tests in my workspace can already leverage both versions
side-by-side.

-------------------------------------------------------
Therefore, can one of you guys please +1 this proposal:
-------------------------------------------------------

Ship Luna/J8 with two versions of org.eclipse.jdt.annotation
 - 1.1.0.v20130513-1648 for those needing SE5 annotations
 - 2.0.0.qualifier for those needing type annoatations

To achieve this
 - clone the existing project into org.eclipse.jdt.annotation_old, or similar
 - bump up the &quot;real&quot; annotation project to 2.0.0
 - include both bundles in the JDT feature with explicit versions


Given we don&apos;t want annotations with mixed targets (declaration and TYPE_USE)
this is the most straight-forward solution I can see right now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2295170</commentid>
    <comment_count>4</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-08-15 08:29:50 -0400</bug_when>
    <thetext>(In reply to comment #3)
Sounds good. I&apos;d call the SE5 project org.eclipse.jdt.annotation_v1.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2295174</commentid>
    <comment_count>5</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2013-08-15 08:33:26 -0400</bug_when>
    <thetext>(In reply to comment #3)

No objections.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2295326</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-08-15 13:36:49 -0400</bug_when>
    <thetext>(In reply to comment #4 &amp; comment #5)

Thanks!

I&apos;ve made the changes that were needed to unlock bug 392099:
- split org.eclipse.jdt.annotation into two projects with different versions
- adjust the tests so they access the correct annotations per compliance level

These changes are in commit 6e45c3b12d66a6d00320490b98ad7820ecc63934


This, however, doesn&apos;t fully resolve this bug:

- org.eclipse.jdt git repo has no BETA_JAVA8 branch where I could make the
  corresponding addition to feature.xml
  =&gt; this will be needed as soon as the jdt feature should be built for J8.

- I don&apos;t think everybody working on BETA_JAVA8 is doing this in a Java-8-
  enabled host IDE, so the following changes would not work in the IDE:
  - set the BREE to JavaSE-1.8
  - set compliance to 1.8
  Instead I made .classpath point to a JRE called &quot;jdk1.8.0&quot;.
  This means that for development in the branch you need to have a JRE
  configured by this exact name.

- maven build currently has a hickup:
  - the mojo org.eclipse.tycho.extras:tycho-eclipserun-plugin
    doesn&apos;t find its class org.eclipse.tycho.extras.eclipserun.Dependency
    I don&apos;t see how I could have caused that.
  Obviously, for the 1.8 project mvn needs to run on a 1.8 JRE.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2295525</commentid>
    <comment_count>7</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2013-08-16 05:34:31 -0400</bug_when>
    <thetext>(In reply to comment #6)
&gt; This, however, doesn&apos;t fully resolve this bug:
&gt; 
&gt; - org.eclipse.jdt git repo has no BETA_JAVA8 branch where I could make the
&gt;   corresponding addition to feature.xml
&gt;   =&gt; this will be needed as soon as the jdt feature should be built for J8.

I&apos;ve created the branch and updated the feature.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2295741</commentid>
    <comment_count>8</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-08-16 12:32:16 -0400</bug_when>
    <thetext>&gt;   Instead I made .classpath point to a JRE called &quot;jdk1.8.0&quot;.
&gt;   This means that for development in the branch you need to have a JRE
&gt;   configured by this exact name.

Let&apos;s call the JRE &quot;JavaSE-1.8&quot;. That way, the JRE_CONTAINER classpath entry magically converts to the EE as soon as it becomes available.

I&apos;ve also updated the compiler compliance levels to 1.7, so that they match the 1.7 BREE for now.

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=f6e41fcbae6b07a9efa1ca2e2b5d7b062827d264</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2296751</commentid>
    <comment_count>9</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-08-20 08:18:41 -0400</bug_when>
    <thetext>Tests have been cleaned up, a workaround is no longer necessary. 
Released via commit 0ebf7eb2d8f3c62d99ed8bef750b4c618547fe08</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2303249</commentid>
    <comment_count>10</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-09-05 11:08:06 -0400</bug_when>
    <thetext>org.eclipse.jdt.annotation_v1 must keep BREE J2SE-1.5.

Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=79e1bfca1c2af548692a1956fbf0eca8f8470de9</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2303255</commentid>
    <comment_count>11</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-09-05 11:13:55 -0400</bug_when>
    <thetext>After comment 6&apos;s http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=6e45c3b12d66a6d00320490b98ad7820ecc63934 , org.eclipse.jdt.core.tests.compiler now declares:

Require-Bundle:
 org.eclipse.jdt.annotation;bundle-version=&quot;[1.1.0,2.0.0)&quot;,
 org.eclipse.jdt.annotation;bundle-version=&quot;[2.0.0,3.0.0)&quot;

The second requirement means that tests can only be run with a 1.7 VM, since org.eclipse.jdt.annotation 2.0.0 has a JavaSE-1.7 BREE (which will eventually even become 1.8).

I&apos;ve marked the second requirement as optional for now: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=74cb74226fe254108607eae80c548bb2b6719e32</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2303271</commentid>
    <comment_count>12</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-09-05 11:33:28 -0400</bug_when>
    <thetext>I am working on adding Java 8 support in APT and for this I am going to use few Java 8 APIs in one of the test projects - org.eclipse.jdt.apt.tests. I guess I should do the same as what&apos;s being done for the annotation project for the time being, right? Or is it enough if I just set the classpath to use JavaSE1-8 or is it really necessary to update the MANIFEST and compliance to use 1.7?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2303285</commentid>
    <comment_count>13</comment_count>
    <who name="Thomas Schindl">tom.schindl</who>
    <bug_when>2013-09-05 11:50:29 -0400</bug_when>
    <thetext>(In reply to Markus Keller from comment #11)
&gt; After comment 6&apos;s
&gt; http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
&gt; ?id=6e45c3b12d66a6d00320490b98ad7820ecc63934 ,
&gt; org.eclipse.jdt.core.tests.compiler now declares:
&gt; 
&gt; Require-Bundle:
&gt;  org.eclipse.jdt.annotation;bundle-version=&quot;[1.1.0,2.0.0)&quot;,
&gt;  org.eclipse.jdt.annotation;bundle-version=&quot;[2.0.0,3.0.0)&quot;
&gt; 
&gt; The second requirement means that tests can only be run with a 1.7 VM, since
&gt; org.eclipse.jdt.annotation 2.0.0 has a JavaSE-1.7 BREE (which will
&gt; eventually even become 1.8).
&gt; 
&gt; I&apos;ve marked the second requirement as optional for now:
&gt; http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
&gt; ?id=74cb74226fe254108607eae80c548bb2b6719e32


Looks like this is all too high for me. How do you think this will work? 

If both versions of the bundle are available 1.x and 2.x will be enabled (v1 has a EE of 1.5) if you are running on JDK8. So i think both need to be optional? And you can not work with EE but need to make sure that 1.x is only loaded when the VM is &lt;= 1.8 which can only be done using capabilities.

Require-Capability: osgi.ee;filter:=&quot;(&amp;(osgi.ee=JavaSE)(version&gt;=1.5)(!(version&gt;=1.8)))&quot;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2303307</commentid>
    <comment_count>14</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-09-05 12:47:36 -0400</bug_when>
    <thetext>&gt; How do you think this will work? 

The bundles are not singletons, and they are not actually used directly by the test bundle. They are only used by tests that put them on the classpath of a test project. I think they could actually both be marked as optional (or not show up in Require-Bundle at all).

My main goal was to allow me to run tests with 1.6 again. I think the CBI setup for the two annotation bundles needs more work. I&apos;m e.g. not sure the
         version=&quot;1.1.0.qualifier&quot;
in /org.eclipse.jdt-feature/feature.xml is correct, given that org.eclipse.jdt.annotation_v1 has a hardcoded
Bundle-Version: 1.1.0.v20130513-1648

I also don&apos;t see the org.eclipse.jdt.annotation 2.0.0 in Andy&apos;s BETA_JAVA8 preview build.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2303313</commentid>
    <comment_count>15</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-09-05 13:07:54 -0400</bug_when>
    <thetext>(In reply to Markus Keller from comment #14)
&gt; I also don&apos;t see the org.eclipse.jdt.annotation 2.0.0 in Andy&apos;s BETA_JAVA8
&gt; preview build.

Doesn&apos;t his preview build pre-date org.eclipse.jdt.annotation 2.0.0?


To further de-mystiphy: the code inside the test bundle doesn&apos;t directly reference
code from the annotation bundle. Access is by explicitly asking Equinox for a
particular version of the bundle (using PackageAdmin [1]). The resulting bundle is
then added to the classpath of a test project.
The dependency only ensures that Equinox finds both versions.


[1] http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/tree/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/AbstractNullAnnotationTest.java?h=BETA_JAVA8#l81</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2303315</commentid>
    <comment_count>16</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-09-05 13:11:53 -0400</bug_when>
    <thetext>PS: sorry for giving redundant comments as I read through the comments on various related bugs ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2325456</commentid>
    <comment_count>17</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-11-01 02:45:14 -0400</bug_when>
    <thetext>Are there still open issues here ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2343607</commentid>
    <comment_count>18</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-12-18 21:26:59 -0500</bug_when>
    <thetext>Stephan, can this be closed ? What else needs to happen from who&apos;s side ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2343910</commentid>
    <comment_count>19</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-19 10:56:02 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #18)
&gt; Stephan, can this be closed ? What else needs to happen from who&apos;s side ?

- We should verify that Eclipse can be built with both versions of the annotation bundle contained. I can (and will) make some local experiments, but the final +1 has to come from the official SDK build, I&apos;d say. I&apos;ve been in contact with Kris de Volder who maintains our current EA-builds. The patch feature contains the newer version, but s.t. is still fishy wrt the older version, which is unintentionally uninstalled during update.

- I want to check with JDT/UI if their support for pulling the bundle into a Java project needs to select versions depending on the project&apos;s compliance.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2344052</commentid>
    <comment_count>20</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-12-19 14:43:45 -0500</bug_when>
    <thetext>The JDT UI code in UnresolvedElementsSubProcessor just used to call Platform.getBundle(&quot;org.eclipse.jdt.annotation&quot;).

I&apos;ve fixed that in BETA_JAVA8 with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=60c782eff728e9dc6e69dca8f048ce998399aba0


For the PDE case, where we offer to add

    additional.bundles = org.eclipse.jdt.annotation

to build.properties, I don&apos;t think there&apos;s a solution. org.eclipse.pde.internal.core.RequiredPluginsClasspathContainer#addSecondaryDependencies(..) doesn&apos;t support a version constraint on &quot;additional.bundles&quot; entries. The only way to get the right version is to disable to unwanted one in the Target Platform.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2344061</commentid>
    <comment_count>21</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-19 15:03:51 -0500</bug_when>
    <thetext>(In reply to Markus Keller from comment #20)
&gt; The JDT UI code in UnresolvedElementsSubProcessor just used to call
&gt; Platform.getBundle(&quot;org.eclipse.jdt.annotation&quot;).
&gt; 
&gt; I&apos;ve fixed that in BETA_JAVA8 with
&gt; http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/
&gt; ?id=60c782eff728e9dc6e69dca8f048ce998399aba0

Cool, thanks! 


&gt; For the PDE case, where we offer to add
&gt; 
&gt;     additional.bundles = org.eclipse.jdt.annotation
&gt; 
&gt; to build.properties, I don&apos;t think there&apos;s a solution.
&gt; org.eclipse.pde.internal.core.
&gt; RequiredPluginsClasspathContainer#addSecondaryDependencies(..) doesn&apos;t
&gt; support a version constraint on &quot;additional.bundles&quot; entries. The only way
&gt; to get the right version is to disable to unwanted one in the Target
&gt; Platform.

Well, that strategy had issues anyway. Did you see bug 413583?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2357513</commentid>
    <comment_count>22</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-01 10:17:11 -0500</bug_when>
    <thetext>The current beta snapshots succeed to build and provision both versions of o.e.j.annotation, but the generated metadata is bogus, resulting in failure to install both versions, only 2.0.0 is present after installing the patch feature.

Problem: p2 declares both versions as &lt;change&gt;. Installation would succeed if only one version were declared as a &lt;change&gt;, the other as a fresh new dependency (&lt;required&gt;).

I see 3 (theoretical) options:
1. post-process metadata (manually, or with some existing means(?)), or
2. instruct p2 to generate the metadata we need, or
3. introduce the new dependency by some other means

Obviously (1) is not very compelling. I&apos;m afraid (2) would require some changes in p2 - in the light of current p2 development resources not very likely to happen in time.

Leaves us with (3): I made experiments (by metadata editing for now), to introduce o.e.j.annotation_2.0.0 *not* via the patch feature, but via a dependency from one of our plugins. This works as desired!

Hence I&apos;m proposing the following workaround for the time we are shipping J8 support as a patch feature (should not be needed for Luna):
- remove o.e.j.annotation_2.0.0 from the jdt patch feature
- add a dependcy from jdt.ui to o.e.j.annotation_2.0.0

I&apos;m proposing jdt.ui not jdt.core because core should always have minimal dependencies, right? Any of the jdt plugins should be able to play this role, actually.


BTW, we don&apos;t seem to have a patch feature in our git, yet. That shouldn&apos;t be more than adding
   &lt;requires&gt;
      &lt;import feature=&quot;org.eclipse.jdt&quot; version=&quot;3.8.2.v20130116-090414-8-8nFu3FNOfwKLRuqgXKIy9z0I83&quot; patch=&quot;true&quot;/&gt;
   &lt;/requires&gt;
right? (Plus suitable about/license/disclaimer texts..)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2365171</commentid>
    <comment_count>23</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-18 17:12:31 -0500</bug_when>
    <thetext>After installing from http://build.eclipse.org/eclipse/builds/4P/siteDir/updates/4.3-P-builds I only see the 1.1 version of o.e.j.annotation installed, while both are correctly contained in the repo.

In the metadata I see the same situation as described in comment 22.


JDT leads, could you please comment on this proposal:

(In reply to Stephan Herrmann from comment #22)
&gt; Hence I&apos;m proposing the following workaround for the time we are shipping J8
&gt; support as a patch feature (should not be needed for Luna):
&gt; - remove o.e.j.annotation_2.0.0 from the jdt patch feature
&gt; - add a dependcy from jdt.ui to o.e.j.annotation_2.0.0

thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2365575</commentid>
    <comment_count>24</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2014-02-19 11:47:44 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #23)
&gt; After installing from
&gt; http://build.eclipse.org/eclipse/builds/4P/siteDir/updates/4.3-P-builds I
&gt; only see the 1.1 version of o.e.j.annotation installed, while both are
&gt; correctly contained in the repo.
&gt; 
&gt; In the metadata I see the same situation as described in comment 22.
&gt; 
&gt; 
&gt; JDT leads, could you please comment on this proposal:
&gt; 
&gt; (In reply to Stephan Herrmann from comment #22)
&gt; &gt; Hence I&apos;m proposing the following workaround for the time we are shipping J8
&gt; &gt; support as a patch feature (should not be needed for Luna):
&gt; &gt; - remove o.e.j.annotation_2.0.0 from the jdt patch feature
&gt; &gt; - add a dependcy from jdt.ui to o.e.j.annotation_2.0.0
&gt; 
&gt; thanks

You mean optionally as proposed in bug 413583 comment 1?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2365731</commentid>
    <comment_count>25</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-19 16:34:32 -0500</bug_when>
    <thetext>(In reply to Dani Megert from comment #24)
&gt; (In reply to Stephan Herrmann from comment #23)
&gt; &gt; After installing from
&gt; &gt; http://build.eclipse.org/eclipse/builds/4P/siteDir/updates/4.3-P-builds I
&gt; &gt; only see the 1.1 version of o.e.j.annotation installed, while both are
&gt; &gt; correctly contained in the repo.
&gt; &gt; 
&gt; &gt; In the metadata I see the same situation as described in comment 22.
&gt; &gt; 
&gt; &gt; 
&gt; &gt; JDT leads, could you please comment on this proposal:
&gt; &gt; 
&gt; &gt; (In reply to Stephan Herrmann from comment #22)
&gt; &gt; &gt; Hence I&apos;m proposing the following workaround for the time we are shipping J8
&gt; &gt; &gt; support as a patch feature (should not be needed for Luna):
&gt; &gt; &gt; - remove o.e.j.annotation_2.0.0 from the jdt patch feature
&gt; &gt; &gt; - add a dependcy from jdt.ui to o.e.j.annotation_2.0.0
&gt; &gt; 
&gt; &gt; thanks
&gt; 
&gt; You mean optionally as proposed in bug 413583 comment 1?

I was thinking of a normal dependency, because (unlike bug 413583 comment 1) what I want is not a (workaround for a) compile time dependency, but a means to actually pull the annotation bundle into installations (from where it can then be consumed by client projects).

Do you want me to try whether &quot;optional&quot; suffices to serve this purpose?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2365815</commentid>
    <comment_count>26</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2014-02-20 01:48:40 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #25)
&gt;I was thinking of a normal dependency,

Well, without &quot;optional&quot; it&apos;s a no go, since this would mean JDT UI needs JRE 8 to run.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2365826</commentid>
    <comment_count>27</comment_count>
    <who name="Thomas Schindl">tom.schindl</who>
    <bug_when>2014-02-20 02:11:06 -0500</bug_when>
    <thetext>Well maybe simply providing 2 bundles with a different name - i know this is not good OSGi style but it would solve the problem with installing and useage - to get the correct jdt.annotation wired one can not use build.properties but has to create an optional dependency on jdt.annotation only to make the compiler happy which seems a bad thing for compiletime only dependency!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2365974</commentid>
    <comment_count>28</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-20 07:28:53 -0500</bug_when>
    <thetext>I made quick experiments to ensure the long-term solution is good:

Starting with Luna we can provide both versions of o.e.j.annotation as a normal inclusion from the JDT feature and deploying and installing of both versions works without additional efforts. I tried with manual export from the IDE and installation into a 4.3.2RC4 Platform Binary. Both versions are installed.

At runtime we still need a tiny tweak: the JDT quickfix to add the annotation bundle to a plain Java project can only find one version, because the other version is only INSTALLED in Equinox, not RESOLVED. This can be easily solved by using PackageAdmin.getBundles() to find also unresolved bundles. I&apos;ll post a patch to the corresponding JDT/UI bug.

Regarding the build.properties vs. Require-Bundle +optional approach I don&apos;t see any advantage of the former. OSGi doesn&apos;t seem to have a clear concept of compile-time only dependencies, but an optional dependency is a viable workaround. Not being able to specify a version in build.properties is a no go in my opinion.

So, I tried all four scenarii: 
 - Plain Java project vs. Plug-in Project
 - 1.7  vs. 1.8
All work smoothly in what can be our configuration in Luna and beyond.


Remains the problem of the day: the patch feature. Only for this limited situation we have the problem that inclusion of two bundle versions from one feature doesn&apos;t work. I&apos;ll check, whether &quot;optional&quot; is sufficient in that scenario, but actually I understood that the J8-Patch is indented for users wanting to try Java 8 - don&apos;t we assume they have JRE8 installed?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2365977</commentid>
    <comment_count>29</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2014-02-20 07:33:37 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #28)
&gt; but actually I understood that the J8-Patch is indented for users
&gt; wanting to try Java 8 - don&apos;t we assume they have JRE8 installed?

Yes, try out Java 8 but not necessarily run their IDE with a JRE 8.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2365982</commentid>
    <comment_count>30</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-02-20 08:07:09 -0500</bug_when>
    <thetext>For the feature patch, couldn&apos;t we just add a new bundle org.eclipse.jdt.annotation.p2kludge and make it require org.eclipse.jdt.annotation 2.0.0?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2366063</commentid>
    <comment_count>31</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-20 09:52:03 -0500</bug_when>
    <thetext>After a bunch of unsuccessful experiments (I don&apos;t think you&apos;ll want to know all those failures :) ), here&apos;s an approach that works:


Create a new *feature* (thanks Markus for suggesting the name :) ):

&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;feature
      id=&quot;org.eclipse.jdt.annotation.p2kludge.feature&quot;
      label=&quot;Inclusion of org.eclipse.jdt.annotation_2.0.0&quot;
      version=&quot;1.0.0.qualifier&quot;
      provider-name=&quot;Eclipse.org&quot;&gt;
   &lt;plugin
         id=&quot;org.eclipse.jdt.annotation&quot;
         download-size=&quot;0&quot;
         install-size=&quot;0&quot;
         version=&quot;2.0.0.qualifier&quot;
         unpack=&quot;false&quot;/&gt;
&lt;/feature&gt;

Remove o.e.j.annotation_2.0.0 from org.eclipse.jdt.java8patch and add instead:

   &lt;includes
         id=&quot;org.eclipse.jdt.annotation.p2kludge.feature&quot;
         version=&quot;0.0.0&quot;/&gt;

(We probably want to hide that feature by not adding it to any category).

To my own surprise this succeeds to install both versions *even* when running *on* JRE7 (thanks Dani for reminding me of that difference)


This only needs a little massaging in terms of proper feature name, legal files etc., but from my p.o.v. this is the best solution we have right now.


Anything else I can do to make this happen? 
(I don&apos;t think I have commit rights to the feature repos, do I?
 BTW, what repo actually hosts the patch feature?)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2366110</commentid>
    <comment_count>32</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-02-20 10:38:31 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #31)
Sounds good, thanks a lot!

The patch features are here:
http://git.eclipse.org/c/platform/eclipse.platform.releng.aggregator.git/tree/eclipse.platform.releng.tychoeclipsebuilder/java8patch?h=BETA_JAVA8

Stephan, can you take the solution over to bug 428099, so that David can release this?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2366165</commentid>
    <comment_count>33</comment_count>
      <attachid>240170</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-20 11:43:46 -0500</bug_when>
    <thetext>Created attachment 240170
update for JDT/UI

(In reply to Markus Keller from comment #20)
&gt; The JDT UI code in UnresolvedElementsSubProcessor just used to call
&gt; Platform.getBundle(&quot;org.eclipse.jdt.annotation&quot;).
&gt; 
&gt; I&apos;ve fixed that in BETA_JAVA8 with
&gt; http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/
&gt; ?id=60c782eff728e9dc6e69dca8f048ce998399aba0

My patch updates that approach so that it also finds an installed but unresolved bundle.

The approach directly mirrors s.t. I found in JUnitPlugin :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2366230</commentid>
    <comment_count>34</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-02-20 13:14:48 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #33)
&gt; My patch updates that approach so that it also finds an installed but
&gt; unresolved bundle.

That happens when the IDE is started with a pre-Java8 VM. To test the quick fix in the runtime, make sure the o.e.j.annotations 2.0.0 bundle is not in source.

&gt; The approach directly mirrors s.t. I found in JUnitPlugin :)

I&apos;m not afraid of the word &quot;kludge&quot;, so feel free to use it when it fits ;)

Thanks for catching the problem and supplying a fix!

Released to BETA_JAVA8 with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=7881a5bf9c5f5d61a3d148acfc9dcc7538bc8086</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2366238</commentid>
    <comment_count>35</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-20 13:37:13 -0500</bug_when>
    <thetext>(In reply to Markus Keller from comment #34)
&gt; (In reply to Stephan Herrmann from comment #33)
&gt; &gt; My patch updates that approach so that it also finds an installed but
&gt; &gt; unresolved bundle.
&gt; 
&gt; That happens when the IDE is started with a pre-Java8 VM. To test the quick
&gt; fix in the runtime, make sure the o.e.j.annotations 2.0.0 bundle is not in
&gt; source.

Good point. I indeed tested this in a fresh standalone installation.

 
&gt; &gt; The approach directly mirrors s.t. I found in JUnitPlugin :)
&gt; 
&gt; I&apos;m not afraid of the word &quot;kludge&quot;, so feel free to use it when it fits ;)

I was only worried you might be worried of using deprecated API, but Tom Watson keeps confirming that the PackageAdmin is safe to use, so we should be safe :)

&gt; Thanks for catching the problem and supplying a fix!
&gt; 
&gt; Released to BETA_JAVA8 with
&gt; http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/
&gt; ?id=7881a5bf9c5f5d61a3d148acfc9dcc7538bc8086

Thanks!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2366299</commentid>
    <comment_count>36</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-20 15:22:02 -0500</bug_when>
    <thetext>Seeing bug 428099 resolved I think it&apos;s (finally) time to close this one, too.

Thanks!</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>240170</attachid>
            <date>2014-02-20 11:43:00 -0500</date>
            <delta_ts>2014-02-20 11:43:46 -0500</delta_ts>
            <desc>update for JDT/UI</desc>
            <filename>Bug-414444-18null-Configure-null-annotation-bundle-f.patch</filename>
            <type>text/plain</type>
            <size>3264</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC51aS91aS9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvdWkvSmF2YVBsdWdpbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LnVpL3VpL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC91aS9KYXZhUGx1Z2luLmphdmEKaW5kZXggNzNmZjA4Zi4uMGMyZGE4OCAx
MDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LnVpL3VpL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC91aS9KYXZhUGx1Z2luLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LnVpL3VpL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC91aS9KYXZhUGx1Z2luLmphdmEKQEAgLTE0LDcgKzE0LDEwIEBACiBp
bXBvcnQgamF2YS51dGlsLkl0ZXJhdG9yOwogaW1wb3J0IGphdmEudXRpbC5MaW5rZWRIYXNoTWFw
OwogCitpbXBvcnQgb3JnLm9zZ2kuZnJhbWV3b3JrLkJ1bmRsZTsKIGltcG9ydCBvcmcub3NnaS5m
cmFtZXdvcmsuQnVuZGxlQ29udGV4dDsKK2ltcG9ydCBvcmcub3NnaS5mcmFtZXdvcmsuU2Vydmlj
ZVJlZmVyZW5jZTsKK2ltcG9ydCBvcmcub3NnaS5zZXJ2aWNlLnBhY2thZ2VhZG1pbi5QYWNrYWdl
QWRtaW47CiBpbXBvcnQgb3JnLm9zZ2kuc2VydmljZS5wcmVmcy5CYWNraW5nU3RvcmVFeGNlcHRp
b247CiAKIGltcG9ydCBvcmcuZWNsaXBzZS5zd3Qud2lkZ2V0cy5EaXNwbGF5OwpAQCAtMjUsNiAr
MjgsNyBAQAogaW1wb3J0IG9yZy5lY2xpcHNlLmNvcmUucnVudGltZS5JUHJvZ3Jlc3NNb25pdG9y
OwogaW1wb3J0IG9yZy5lY2xpcHNlLmNvcmUucnVudGltZS5JU3RhdHVzOwogaW1wb3J0IG9yZy5l
Y2xpcHNlLmNvcmUucnVudGltZS5NdWx0aVN0YXR1czsKK2ltcG9ydCBvcmcuZWNsaXBzZS5jb3Jl
LnJ1bnRpbWUuUGxhdGZvcm07CiBpbXBvcnQgb3JnLmVjbGlwc2UuY29yZS5ydW50aW1lLlN0YXR1
czsKIGltcG9ydCBvcmcuZWNsaXBzZS5jb3JlLnJ1bnRpbWUucHJlZmVyZW5jZXMuSW5zdGFuY2VT
Y29wZTsKIApAQCAtMjY3LDYgKzI3MSw4IEBACiAJICovCiAJcHJpdmF0ZSBJUHJvcGVydHlDaGFu
Z2VMaXN0ZW5lciBmVGhlbWVMaXN0ZW5lcjsKIAorCXByaXZhdGUgQnVuZGxlQ29udGV4dCBmQnVu
ZGxlQ29udGV4dDsKKwogCXB1YmxpYyBzdGF0aWMgSmF2YVBsdWdpbiBnZXREZWZhdWx0KCkgewog
CQlyZXR1cm4gZmdKYXZhUGx1Z2luOwogCX0KQEAgLTM1OCw2ICszNjQsNyBAQAogCUBPdmVycmlk
ZQogCXB1YmxpYyB2b2lkIHN0YXJ0KEJ1bmRsZUNvbnRleHQgY29udGV4dCkgdGhyb3dzIEV4Y2Vw
dGlvbiB7CiAJCXN1cGVyLnN0YXJ0KGNvbnRleHQpOworCQlmQnVuZGxlQ29udGV4dD0gY29udGV4
dDsKIAogCQlXb3JraW5nQ29weU93bmVyLnNldFByaW1hcnlCdWZmZXJQcm92aWRlcihuZXcgV29y
a2luZ0NvcHlPd25lcigpIHsKIAkJCUBPdmVycmlkZQpAQCAtMTA5Miw0ICsxMDk5LDE5IEBACiAK
IAkJcmV0dXJuIEphdmFVSU1lc3NhZ2VzLkphdmFQbHVnaW5fYWRkaXRpb25hbEluZm9fYWZmb3Jk
YW5jZTsKIAl9CisJCisJcHVibGljIEJ1bmRsZVtdIGdldEJ1bmRsZXMoU3RyaW5nIGJ1bmRsZU5h
bWUsIFN0cmluZyB2ZXJzaW9uKSB7CisJCUJ1bmRsZVtdIGJ1bmRsZXM9IFBsYXRmb3JtLmdldEJ1
bmRsZXMoYnVuZGxlTmFtZSwgdmVyc2lvbik7CisJCWlmIChidW5kbGVzICE9IG51bGwpCisJCQly
ZXR1cm4gYnVuZGxlczsKKworCQkvLyBBY2Nlc3NpbmcgdW5yZXNvbHZlZCBidW5kbGUKKwkJU2Vy
dmljZVJlZmVyZW5jZTxQYWNrYWdlQWRtaW4+IHNlcnZpY2VSZWY9IGZCdW5kbGVDb250ZXh0Lmdl
dFNlcnZpY2VSZWZlcmVuY2UoUGFja2FnZUFkbWluLmNsYXNzKTsKKwkJUGFja2FnZUFkbWluIGFk
bWluPSBmQnVuZGxlQ29udGV4dC5nZXRTZXJ2aWNlKHNlcnZpY2VSZWYpOworCQlidW5kbGVzPSBh
ZG1pbi5nZXRCdW5kbGVzKGJ1bmRsZU5hbWUsIHZlcnNpb24pOworCQlpZiAoYnVuZGxlcyAhPSBu
dWxsICYmIGJ1bmRsZXMubGVuZ3RoID4gMCkKKwkJCXJldHVybiBidW5kbGVzOworCQlyZXR1cm4g
bnVsbDsKKwl9CisKIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC51aS91aS9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvdWkvdGV4dC9jb3JyZWN0aW9uL1VucmVzb2x2ZWRFbGVtZW50c1N1
YlByb2Nlc3Nvci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LnVpL3VpL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC91aS90ZXh0L2NvcnJlY3Rpb24vVW5yZXNvbHZlZEVsZW1lbnRzU3ViUHJvY2Vzc29y
LmphdmEKaW5kZXggODkzNGY2Zi4uYWY5NTRlZCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0
LnVpL3VpL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC91aS90ZXh0L2NvcnJlY3Rpb24vVW5yZXNv
bHZlZEVsZW1lbnRzU3ViUHJvY2Vzc29yLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LnVpL3Vp
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC91aS90ZXh0L2NvcnJlY3Rpb24vVW5yZXNvbHZlZEVs
ZW1lbnRzU3ViUHJvY2Vzc29yLmphdmEKQEAgLTM1LDcgKzM1LDYgQEAKIGltcG9ydCBvcmcuZWNs
aXBzZS5jb3JlLnJ1bnRpbWUuRmlsZUxvY2F0b3I7CiBpbXBvcnQgb3JnLmVjbGlwc2UuY29yZS5y
dW50aW1lLklQcm9ncmVzc01vbml0b3I7CiBpbXBvcnQgb3JnLmVjbGlwc2UuY29yZS5ydW50aW1l
LklTdGF0dXM7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuY29yZS5ydW50aW1lLlBsYXRmb3JtOwogaW1w
b3J0IG9yZy5lY2xpcHNlLmNvcmUucnVudGltZS5TdGF0dXM7CiAKIGltcG9ydCBvcmcuZWNsaXBz
ZS5jb3JlLnJlc291cmNlcy5JRmlsZTsKQEAgLTY5Nyw3ICs2OTYsNyBAQAogCQlpZiAoamF2YVBy
b2plY3QuZmluZFR5cGUoZGVmYXVsdE9wdGlvbnMuZ2V0KGFubm90YXRpb25OYW1lT3B0aW9uc1sw
XSkpICE9IG51bGwpCiAJCQlyZXR1cm47CiAJCVN0cmluZyB2ZXJzaW9uPSBKYXZhTW9kZWxVdGls
LmlzMThPckhpZ2hlcihqYXZhUHJvamVjdCkgPyAiMiIgOiAiWzEuMS4wLDIuMC4wKSI7IC8vJE5P
Ti1OTFMtMSQgLy8kTk9OLU5MUy0yJAotCQlCdW5kbGVbXSBhbm5vdGF0aW9uc0J1bmRsZXM9IFBs
YXRmb3JtLmdldEJ1bmRsZXMoIm9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uIiwgdmVyc2lvbik7
IC8vJE5PTi1OTFMtMSQKKwkJQnVuZGxlW10gYW5ub3RhdGlvbnNCdW5kbGVzPSBKYXZhUGx1Z2lu
LmdldERlZmF1bHQoKS5nZXRCdW5kbGVzKCJvcmcuZWNsaXBzZS5qZHQuYW5ub3RhdGlvbiIsIHZl
cnNpb24pOyAvLyROT04tTkxTLTEkCiAJCWlmIChhbm5vdGF0aW9uc0J1bmRsZXMgPT0gbnVsbCkK
IAkJCXJldHVybjsKIAkJ
</data>

          </attachment>
      

    </bug>

</bugzilla>