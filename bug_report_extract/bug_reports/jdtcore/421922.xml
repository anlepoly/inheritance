<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>421922</bug_id>
          
          <creation_ts>2013-11-17 20:04:00 -0500</creation_ts>
          <short_desc>[1.8][compiler] Varargs &amp; Overload - Align to Javac8</short_desc>
          <delta_ts>2014-03-17 20:17:50 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>WONTFIX</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>404648</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>daniel.dietrich</cc>
    
    <cc>daniel_megert</cc>
    
    <cc>jarthana</cc>
    
    <cc>manpalat</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2331073</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-11-17 20:04:07 -0500</bug_when>
    <thetext>BETA_JAVA8:

15.12.2.4:

// --
The previous &quot;applicable variable arity method&quot; terminology incorrectly 
hinted that, if a variable-arity method is applicable in any phase, it is 
applicable in and only in Phase 3. This overlooks the fact that variable 
arity methods can act as fixed-arity methods in Phases 1 and 2. What is 
relevant is the kinds of adaptations actually used to determine 
applicability, not the kinds of adaptations allowed by the method 
declaration.
//--

So this code:

import java.util.Arrays;

public class VarargPrimitiveTest {

    public static void test(int... a) {
        System.out.println(Arrays.toString(a));
    }

    public static &lt;T&gt; void test(Object... a) {
        System.out.println(Arrays.toString(a));
    }

    public static void main(String[] args) {
        test(1);
    }
}


should compile.

See https://bugs.eclipse.org/bugs/show_bug.cgi?id=383780</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2331075</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-11-17 20:05:56 -0500</bug_when>
    <thetext>See https://bugs.eclipse.org/bugs/show_bug.cgi?id=383780#c57</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2331108</commentid>
    <comment_count>2</comment_count>
      <attachid>237522</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-11-18 02:19:35 -0500</bug_when>
    <thetext>Created attachment 237522
partial fix - fails some tests

Javac 8b115 behavior is suspect in some cases. I need to study the spec closely
before proceeding.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354680</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-26 20:14:58 -0500</bug_when>
    <thetext>Disabled tests (variants from https://bugs.eclipse.org/bugs/show_bug.cgi?id=426678)

released here:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=dba39c1d5c61bbe26665fc6f71117b5055d2912c</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2360501</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-07 22:54:33 -0500</bug_when>
    <thetext>Stephan, I am going to need some help on this one.

This has had a colorful history with behavior changing and changing back
in the RI.

Looking at this code in mSMB

if (!ic18.isMoreSpecificThan(mbj, mbk, levelj == VARARGS_COMPATIBLE, levelk == VARARGS_COMPATIBLE)) {
							continue nextJ;
						}
					} else {
						for (int i = 0, length = argumentTypes.length; i &lt; length; i++) {
							TypeBinding argumentType = argumentTypes[i];
							TypeBinding s = InferenceContext18.getParameter(mbjParameters, i, levelj == VARARGS_COMPATIBLE); 
							TypeBinding t = InferenceContext18.getParameter(mbkParameters, i, levelk == VARARGS_COMPATIBLE); 

is it possible that 

ic18.isMoreSpecificThan and the two calls to 

InferenceContext18.getParameter

have different values for levelj and levelk ? 

In the older implementation, the moment we find a strict invocation candidates
other level candidates are immediately out of reckoning and only the other
strict candidates take part in mSMB,</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2360634</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-08 20:05:32 -0500</bug_when>
    <thetext>Please see this stanza before the snippet you pasted:

	if (levelj &gt; -1 &amp;&amp; levelk &gt; -1 &amp;&amp; levelj != levelk) {
		if (levelj &lt; levelk)
			continue nextK; // j is more specific than this k
		else
			continue nextJ; // j cannot be more specific
	}

This is meant to ensure indeed that we&apos;re not comparing apples and oranges.

Do you see two moreSpecific methods with different levels?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2360734</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-09 20:26:24 -0500</bug_when>
    <thetext>Stephan, I would like to request you to take over this one and solve it for
the generic method case as well non-generic one - this detours into the new
engine.

Basically, at 1.8, we want behavior that matches javac 8 and javac 6.

In ECJ javac6 compatibility behavior is implemented by https://bugs.eclipse.org/bugs/show_bug.cgi?id=383780 with an environment 
variable in effect - not by default.

In essence, during most specific method selection given the two applicable
methods: 

public static void test(int... a);
public static &lt;T&gt; void test(Object... a);

presently, while trying to determine whether one method could field all calls
to the other, we use the pairs:

    int, Object [] and Object, int [] and find that the call is ambiguous.

If we use the pairs:

    int, Object and Object, int or

the pairs:

    int [], Object [] and Object [], int []

we will find 

public static void test(int... a);

to be more specific.

Disabled test: OverloadResolutionTest8._test421922()
captures this scenario + there are a bunch of tests already in the suite
that should start to &quot;fail&quot; once a fix is made. TIA.

If in the debugger, you want to step through the behavior implemented by
https://bugs.eclipse.org/bugs/show_bug.cgi?id=383780, one or more of
VarargsTest.*tolerate tests should be good.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2361281</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-10 18:59:55 -0500</bug_when>
    <thetext>I tend to read the situation differently, which is unfortunate, because my reading is in conflict with javac.

The top level distinction is strict, loose, or variable-arity applicability.
If one of these three levels yields an applicable method, the next levels are not considered. (hence when passing in int[] we would never consider variable-arity applicability - that&apos;s the essence of the remark quoted in comment 0).

In the example of this bug, both candidates are not applicable in either strict or loose mode. All we are looking at is variable-arity applicability.

From this point forward the distinction between strict or loose applicability no longer exists.

The only means we have now, is to see which candidate is more specific according to 15.12.2.5.

(I) Is test(int[])  more specific than test(Object[])?
The second method is generic, hence we need to apply inference (18.5.4).
However, inside 18.5.4 we find a pair of proper types (int and Object).
Now the decision is made by sIsMoreSpecific where s is int and t is Object.
I.e., we&apos;re asking &quot;int &lt;: Object&quot;, which answers false.
Ergo test(int[]) is *not* more specific than test(Object[]).

(II) Is test(Object[]) more specific than test(int[])?
Now the second method is not generic, hence 15.12.2.5 directly decides,
this time by asking &quot;Object &lt;: int&quot;, which is even more false :)


Ergo: once both methods have been found applicable at the same level (variable-arity), the actual arguments are no longer considered, we only check subtyping (sic) between pairs of parameter types. Nothing indicates that boxing conversions are allowed at this point.


I could invent the following strategy for breaking the bind:
during applicability inference I could side step the spec and record whenever boxing conversion was applied to show applicability. If so, I could put a penalty on that candidate and prefer a candidate without this penalty.

I could imagine the spec should have listed four levels, instead of three:
1. strict applicability
2. loose applicability
3. variable-arity strict applicability
4. variable-arity loose applicability

With this kind of a spec, we would have ranked:

test(int[])    -&gt; applicable at level 3
test(Object[]) -&gt; not applicable at level 3

This hypothetical spec would produce the &apos;desired&apos; result.

I&apos;ll let it rest until tomorrow to see if either of us can spot a bug in this reasoning. Otherwise we need Dan&apos;s help once more.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2361286</commentid>
    <comment_count>8</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-10 19:25:12 -0500</bug_when>
    <thetext>Additionally, here&apos;s a third opinion (and more) on this:

https://bugs.openjdk.java.net/browse/JDK-6886431
(opened in 2009, yet unresolved)

Is that the bug which bug 383780 implicitly refers to?

Right in 2009, evaluation was: &quot;This behavior is deliberate.&quot;
At second sight, this could say: the spec&apos;d behavior (ambiguity) is deliberate, and the request to change the spec is rejected. This would explain, why the bug is still unresolved: compiler engineer wants spec to change, spec lead wants compiler to change.

I start to believe that boxing and varargs were intended to be considered in a more orthogonal way. The four-step ladder outlined in comment 7 would serve this purpose better than the spec&apos;d three-step ladder, I believe.

And for a delightful read (for the masochists among us ;-P ) I can really recommend Gilad&apos;s post:
  http://gbracha.blogspot.de/2009/09/systemic-overload.html</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2361289</commentid>
    <comment_count>9</comment_count>
      <attachid>239806</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-10 19:47:27 -0500</bug_when>
    <thetext>Created attachment 239806
experimental patch

This is a simplistic take at supporting a four-level distinction, by inventing a compatibility level VARBOX_COMPATIBLE :)

It looks like it affects the right set of tests.

Srikanth, do you want to check if the effect is approximately what you intended?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2361594</commentid>
    <comment_count>10</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-02-11 09:44:31 -0500</bug_when>
    <thetext>(In reply to comment #8)

&gt; Right in 2009, evaluation was: &quot;This behavior is deliberate.&quot;
&gt; At second sight, this could say: the spec&apos;d behavior (ambiguity) is deliberate,
&gt; and the request to change the spec is rejected.

I can&apos;t read it that way. The reference implementation doesn&apos;t implement this behavior so &quot;the spec&apos;d behavior&quot; can&apos;t be deliberate because such a thing doesn&apos;t exists within the Java(TM) realm. Thus &quot;behavior&quot; has to refer to javac&apos;s behavior.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2361613</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-11 10:00:35 -0500</bug_when>
    <thetext>Stephan, I&apos;ll grab this one back if you don&apos;t mind - I have a patch in the works
that aligns with javac and looks promising. I think the first step is to align 
with javac - we have been bitten by vociferous protests in the past forcing
us to introduce compatibility in this and other areas even where we were more
compliant with the document - and I am twice shy.

We can raise questions at the appropriate forums in parallel - though
I doubt at this point anything would change.

I think the passage cited in comment#0 is a potential source of infinite
confusion.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2361647</commentid>
    <comment_count>12</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-11 10:35:20 -0500</bug_when>
    <thetext>(In reply to Timo Kinnunen from comment #10)
&gt; (In reply to comment #8)
&gt; 
&gt; &gt; Right in 2009, evaluation was: &quot;This behavior is deliberate.&quot;
&gt; &gt; At second sight, this could say: the spec&apos;d behavior (ambiguity) is deliberate,
&gt; &gt; and the request to change the spec is rejected.
&gt; 
&gt; I can&apos;t read it that way. The reference implementation doesn&apos;t implement
&gt; this behavior so &quot;the spec&apos;d behavior&quot; can&apos;t be deliberate because such a
&gt; thing doesn&apos;t exists within the Java(TM) realm. Thus &quot;behavior&quot; has to refer
&gt; to javac&apos;s behavior.

That&apos;s what my first interpretation was, too. But compare the statement to Gilad&apos;s blog post, which Alex affirmatively cites: I believe that Alex&apos;s point is pro &quot;neither is more specific than the other&quot;. -- But this may be less relevant than seeing the JDK bug still unresolved.

(In reply to Srikanth Sankaran from comment #11)
&gt; Stephan, I&apos;ll grab this one back if you don&apos;t mind -

Please, go ahead. Thanks.
 
&gt; I think the passage cited in comment#0 is a potential source of infinite
&gt; confusion.

Let me make my interpretation explicit:

A varargs method may be applicable in strict or loose invocation context, by explicitly passing an array for the varargs parameter. *In this case* the fact that the method is varargs is *not relevant* for overload resolution &amp; inference.

Example:

public class Z {
  void m(Object... a) { System.out.println(&quot;Object...&quot;); }
  void m(String[]... a) { System.out.println(&quot;String[]...&quot;); }

  public static void main(String[] args) {
    new Z().m(args);
  }
}

Two varargs method, but one is applicable by strict invocation:
   void m(Object... a)
whereas the other is only applicable by variable-arity invocation:
   void m(String[]... a)

Overload resolution picks the first method during Phase 1, and doesn&apos;t even look for variable-arity invocations (i.e., there is no Phase 3). All this despite the fact that both *methods* are varargs.

Doesn&apos;t this fit to the quoted paragraph?

Unfortunately, this doesn&apos;t seem to help settle the core issue in this bug. I&apos;ll ask on the EG list ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2361780</commentid>
    <comment_count>13</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-11 13:47:24 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #12)
&gt; Unfortunately, this doesn&apos;t seem to help settle the core issue in this bug.
&gt; I&apos;ll ask on the EG list ...

See Dan&apos;s answer here: http://mail.openjdk.java.net/pipermail/lambda-spec-experts/2014-February/000506.html

In a nutshell: javac7 behavior is the intended version. Current javac8 behavior has leaked from experiments which have been rolled back in the spec as of 0.6.3.

New JDK bug will follow.

If that gets addressed in a timely fashion, this current bug may be a no-op.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2361803</commentid>
    <comment_count>14</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-11 14:51:23 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #13)
&gt; New JDK bug will follow.

here it is:

https://bugs.openjdk.java.net/browse/JDK-8034223

See Dan&apos;s comment:
  &quot;a corner case -- not prominent enough to justify holding up the release.&quot;

Correspondingly I vote that not having this bug shouldn&apos;t hold up our release :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2361983</commentid>
    <comment_count>15</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-12 03:24:29 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #14)
&gt; (In reply to Stephan Herrmann from comment #13)
&gt; &gt; New JDK bug will follow.
&gt; 
&gt; here it is:
&gt; 
&gt; https://bugs.openjdk.java.net/browse/JDK-8034223
&gt; 
&gt; See Dan&apos;s comment:
&gt;   &quot;a corner case -- not prominent enough to justify holding up the release.&quot;
&gt; 
&gt; Correspondingly I vote that not having this bug shouldn&apos;t hold up our
&gt; release :)

After having read through all the comments, material referred to etc, I agree
with the interpretation and the recommendation.

Thanks for having followed up on this, my proposed plan of action would have
meant  more work in the short term and then again more work when Oracle woke 
up to it.

As for it being a corner case: As their new defect report shows, variable 
arity methods need not be in the picture for the bug to manifest. So it is
a bit broader than the present topic.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2366836</commentid>
    <comment_count>16</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-02-21 10:12:46 -0500</bug_when>
    <thetext>Verified for Java 8 RC1</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2376909</commentid>
    <comment_count>17</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-17 20:17:50 -0400</bug_when>
    <thetext>*** Bug 430569 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>237522</attachid>
            <date>2013-11-18 02:19:00 -0500</date>
            <delta_ts>2013-11-18 02:19:35 -0500</delta_ts>
            <desc>partial fix - fails some tests</desc>
            <filename>Varargs.patch</filename>
            <type>text/plain</type>
            <size>12719</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL092ZXJsb2FkUmVzb2x1
dGlvblRlc3Q4LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMv
b3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9PdmVybG9hZFJl
c29sdXRpb25UZXN0OC5qYXZhCmluZGV4IDVjYzI2MTEuLjE3NDE4ZDggMTAwNjQ0Ci0tLSBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29y
ZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL092ZXJsb2FkUmVzb2x1dGlvblRlc3Q4LmphdmEK
KysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNl
L2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vT3ZlcmxvYWRSZXNvbHV0aW9uVGVz
dDguamF2YQpAQCAtMTgsNyArMTgsNyBAQAogcHVibGljIGNsYXNzIE92ZXJsb2FkUmVzb2x1dGlv
blRlc3Q4IGV4dGVuZHMgQWJzdHJhY3RSZWdyZXNzaW9uVGVzdCB7CiAKIHN0YXRpYyB7Ci0vLwlU
RVNUU19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7ICJ0ZXN0MDA3In07CisJVEVTVFNfTkFNRVMgPSBu
ZXcgU3RyaW5nW10geyAidGVzdDQyMTkyMmEifTsKIC8vCVRFU1RTX05VTUJFUlMgPSBuZXcgaW50
W10geyA1MCB9OwogLy8JVEVTVFNfUkFOR0UgPSBuZXcgaW50W10geyAxMSwgLTEgfTsKIH0KQEAg
LTM5OCw0ICszOTgsNDAgQEAKIAkJCX0sCiAJCQkiZm9vKEkpIik7CiB9CisvLyBodHRwczovL2J1
Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDIxOTIyLCBbMS44XVtjb21waWxl
cl0gVmFyYXJncyAmIE92ZXJsb2FkIC0gQWxpZ24gdG8gSkxTOAorcHVibGljIHZvaWQgdGVzdDQy
MTkyMigpIHsKKwl0aGlzLnJ1bkNvbmZvcm1UZXN0KAorCQkJbmV3IFN0cmluZ1tdIHsKKwkJCQki
WC5qYXZhIiwKKwkJCQkiaW1wb3J0IGphdmEudXRpbC5BcnJheXM7XG4iICsKKwkJCQkicHVibGlj
IGNsYXNzIFgge1xuIiArCisJCQkJIiAgICBwdWJsaWMgc3RhdGljIHZvaWQgdGVzdChpbnQuLi4g
YSkge1xuIiArCisJCQkJIiAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKEFycmF5cy50b1N0cmlu
ZyhhKSk7XG4iICsKKwkJCQkiICAgIH1cbiIgKworCQkJCSIgICAgcHVibGljIHN0YXRpYyA8VD4g
dm9pZCB0ZXN0KE9iamVjdC4uLiBhKSB7XG4iICsKKwkJCQkiICAgICAgICBTeXN0ZW0ub3V0LnBy
aW50bG4oQXJyYXlzLnRvU3RyaW5nKGEpKTtcbiIgKworCQkJCSIgICAgfVxuIiArCisJCQkJIiAg
ICBwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsKKwkJCQkiICAg
ICAgICB0ZXN0KDEpO1xuIiArCisJCQkJIiAgICB9XG4iICsKKwkJCQkifVxuIiwKKwkJCX0sCisJ
CQkiWzFdIik7Cit9CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5j
Z2k/aWQ9NDIxOTIyLCBbMS44XVtjb21waWxlcl0gVmFyYXJncyAmIE92ZXJsb2FkIC0gQWxpZ24g
dG8gSkxTOAorcHVibGljIHZvaWQgdGVzdDQyMTkyMmEoKSB7CisJdGhpcy5ydW5Db25mb3JtVGVz
dCgKKwkJCW5ldyBTdHJpbmdbXSB7CisJCQkJIlguamF2YSIsCisJCQkJInB1YmxpYyBjbGFzcyBY
IHtcbiIgKworCQkJCSIJcHJpdmF0ZSB2b2lkIGIoYm9vbGVhbiBiLCBPYmplY3QuLi4gbykge31c
biIgKworCQkJCSIJcHJpdmF0ZSB2b2lkIGIoQm9vbGVhbi4uLiBvKSB7fVxuIiArCisJCQkJIglw
dWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsKKwkJCQkiCQlYIHgg
PSBuZXcgWCgpO1xuIiArCisJCQkJIgkJeC5iKHRydWUpO1xuIiArCisJCQkJIgl9XG4iICsKKwkJ
CQkifVxuIiwKKwkJCX0sCisJCQkiZm9vKEkpIik7Cit9CiB9ClwgTm8gbmV3bGluZSBhdCBlbmQg
b2YgZmlsZQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIv
c3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vVmFyYXJn
c1Rlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1ZhcmFyZ3NUZXN0Lmph
dmEKaW5kZXggOWE2NTc2MS4uYzIyY2MyNyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vVmFyYXJnc1Rlc3QuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50
ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVn
cmVzc2lvbi9WYXJhcmdzVGVzdC5qYXZhCkBAIC0xMjkwLDcgKzEyOTAsNyBAQAogCX0KICAJLy8g
aHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTEwMjYzMQogCXB1
YmxpYyB2b2lkIHRlc3QwMzMoKSB7Ci0JCXRoaXMucnVuTmVnYXRpdmVUZXN0KAorCQl0aGlzLnJ1
bkNvbmZvcm1UZXN0KAogCQkJbmV3IFN0cmluZ1tdIHsKIAkJCQkiWC5qYXZhIiwKIAkJCQkicHVi
bGljIGNsYXNzIFgge1xuIiArCkBAIC0xMzA0LDE3ICsxMzA0LDcgQEAKIAkJCQkiCX1cbiIgKwog
CQkJCSJ9XG4iLAogCQkJfSwKLQkJCSItLS0tLS0tLS0tXG4iICsgCi0JCQkiMS4gRVJST1IgaW4g
WC5qYXZhIChhdCBsaW5lIDYpXG4iICsgCi0JCQkiCXguYSh0cnVlKTtcbiIgKyAKLQkJCSIJICBe
XG4iICsgCi0JCQkiVGhlIG1ldGhvZCBhKGJvb2xlYW4sIE9iamVjdFtdKSBpcyBhbWJpZ3VvdXMg
Zm9yIHRoZSB0eXBlIFhcbiIgKyAKLQkJCSItLS0tLS0tLS0tXG4iICsgCi0JCQkiMi4gRVJST1Ig
aW4gWC5qYXZhIChhdCBsaW5lIDcpXG4iICsgCi0JCQkiCXguYSh0cnVlLCBcImZvb2JhclwiKTtc
biIgKyAKLQkJCSIJICBeXG4iICsgCi0JCQkiVGhlIG1ldGhvZCBhKGJvb2xlYW4sIE9iamVjdFtd
KSBpcyBhbWJpZ3VvdXMgZm9yIHRoZSB0eXBlIFhcbiIgKyAKLQkJCSItLS0tLS0tLS0tXG4iKTsK
KwkJCSIxMTIiKTsKIAkJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCiAJCQluZXcgU3RyaW5nW10gewog
CQkJCSJYLmphdmEiLApAQCAtMTM2Miw3ICsxMzUyLDcgQEAKIAkJdHJ5IHsKIAkJCVN5c3RlbS5z
ZXRQcm9wZXJ0eSgidG9sZXJhdGVJbGxlZ2FsQW1iaWd1b3VzVmFyYXJnc0ludm9jYXRpb24iLCAi
dHJ1ZSIpOwogCQkJaWYgKHRoaXMuY29tcGxpYW5jZUxldmVsID49IENsYXNzRmlsZUNvbnN0YW50
cy5KREsxXzcpIHsKLQkJCQl0aGlzLnJ1bk5lZ2F0aXZlVGVzdCgKKwkJCQl0aGlzLnJ1bkNvbmZv
cm1UZXN0KAogCQkJCQluZXcgU3RyaW5nW10gewogCQkJCQkJIlguamF2YSIsCiAJCQkJCQkicHVi
bGljIGNsYXNzIFgge1xuIiArCkBAIC0xMzc2LDE4ICsxMzY2LDggQEAKIAkJCQkJCSIJfVxuIiAr
CiAJCQkJCQkifVxuIiwKIAkJCQkJfSwKLQkJCQkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJCQkJIjEu
IEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA2KVxuIiArIAotCQkJCQkiCXguYSh0cnVlKTtcbiIg
KyAKLQkJCQkJIgkgIF5cbiIgKyAKLQkJCQkJIlRoZSBtZXRob2QgYShib29sZWFuLCBPYmplY3Rb
XSkgaXMgYW1iaWd1b3VzIGZvciB0aGUgdHlwZSBYXG4iICsgCi0JCQkJCSItLS0tLS0tLS0tXG4i
ICsgCi0JCQkJCSIyLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNylcbiIgKyAKLQkJCQkJIgl4
LmEodHJ1ZSwgXCJmb29iYXJcIik7XG4iICsgCi0JCQkJCSIJICBeXG4iICsgCi0JCQkJCSJUaGUg
bWV0aG9kIGEoYm9vbGVhbiwgT2JqZWN0W10pIGlzIGFtYmlndW91cyBmb3IgdGhlIHR5cGUgWFxu
IiArIAotCQkJCQkiLS0tLS0tLS0tLVxuIiwKLQkJCQkJbnVsbCwgdHJ1ZSwgb3B0aW9ucyk7CisJ
CQkJCSIxMTIiLAorCQkJCQlvcHRpb25zKTsKIAkJCX0gZWxzZSB7CiAJCQkJdGhpcy5ydW5Db25m
b3JtVGVzdCgKIAkJCQkJCW5ldyBTdHJpbmdbXSB7CkBAIC0yOTgzLDcgKzI5NjMsNyBAQAogCQl0
cnkgewogCQkJU3lzdGVtLnNldFByb3BlcnR5KCJ0b2xlcmF0ZUlsbGVnYWxBbWJpZ3VvdXNWYXJh
cmdzSW52b2NhdGlvbiIsICJ0cnVlIik7CiAJCQlpZiAodGhpcy5jb21wbGlhbmNlTGV2ZWwgPj0g
Q2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNykgewotCQkJCXRoaXMucnVuTmVnYXRpdmVUZXN0KAor
CQkJCXRoaXMucnVuQ29uZm9ybVRlc3QoCiAJCQkJCW5ldyBTdHJpbmdbXSB7CiAJCQkJCQkiWC5q
YXZhIiwKIAkJCQkJCSJpbXBvcnQgamF2YS51dGlsLkFycmF5cztcbiIgKwpAQCAtMjk5NywxMyAr
Mjk3Nyw4IEBACiAJCQkJCQkiICAgICAgICB9XG4iICsKIAkJCQkJCSJ9XG4iCiAJCQkJCX0sCi0J
CQkJCSItLS0tLS0tLS0tXG4iICsgCi0JCQkJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUg
MTApXG4iICsgCi0JCQkJCSIJdGVzdCgxKTtcbiIgKyAKLQkJCQkJIgleXl5eXG4iICsgCi0JCQkJ
CSJUaGUgbWV0aG9kIHRlc3QoaW50W10pIGlzIGFtYmlndW91cyBmb3IgdGhlIHR5cGUgWFxuIiAr
IAotCQkJCQkiLS0tLS0tLS0tLVxuIiwgCi0JCQkJCW51bGwsIHRydWUsIG9wdGlvbnMpOworCQkJ
CQkiWzFdIiwgCisJCQkJCW9wdGlvbnMpOwogCQkJfSBlbHNlIHsKIAkJCQl0aGlzLnJ1bkNvbmZv
cm1UZXN0KAogCQkJCQkJbmV3IFN0cmluZ1tdIHsKQEAgLTMzNzEsMTUgKzMzNDYsMTAgQEAKIAkJ
CQl0aGlzLnJ1bk5lZ2F0aXZlVGVzdCgKIAkJCQkJCXNyYywKIAkJCQkJCSItLS0tLS0tLS0tXG4i
ICsgCi0JCQkJCQkiMS4gV0FSTklORyBpbiBYLmphdmEgKGF0IGxpbmUgNSlcbiIgKyAKLQkJCQkJ
CSIJcHJpdmF0ZSBzdGF0aWMgdm9pZCBiYXIoaW50IGludFZhbHVlLCBPYmplY3QuLi4gb2Jqcykg
e1xuIiArIAotCQkJCQkJIgkgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXlxuIiArIAotCQkJCQkJIlRoZSBtZXRob2QgYmFyKGludCwgT2JqZWN0Li4u
KSBmcm9tIHRoZSB0eXBlIFggaXMgbmV2ZXIgdXNlZCBsb2NhbGx5XG4iICsgCi0JCQkJCQkiLS0t
LS0tLS0tLVxuIiArIAotCQkJCQkJIjIuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA5KVxuIiAr
IAotCQkJCQkJIgliYXIoNSk7XG4iICsgCi0JCQkJCQkiCV5eXlxuIiArIAotCQkJCQkJIlRoZSBt
ZXRob2QgYmFyKE9iamVjdFtdKSBpcyBhbWJpZ3VvdXMgZm9yIHRoZSB0eXBlIFhcbiIgKyAKKwkJ
CQkJCSIxLiBXQVJOSU5HIGluIFguamF2YSAoYXQgbGluZSAyKVxuIiArIAorCQkJCQkJIglwcml2
YXRlIHN0YXRpYyB2b2lkIGJhcihPYmplY3QuLi4gb2Jqcykge1xuIiArIAorCQkJCQkJIgkgICAg
ICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5cbiIgKyAKKwkJCQkJCSJUaGUgbWV0
aG9kIGJhcihPYmplY3QuLi4pIGZyb20gdGhlIHR5cGUgWCBpcyBuZXZlciB1c2VkIGxvY2FsbHlc
biIgKyAKIAkJCQkJCSItLS0tLS0tLS0tXG4iKTsKIAkJCX0KIAkJfSBmaW5hbGx5IHsKQEAgLTM0
MDcsMjAgKzMzNzcsOSBAQAogCQkJfTsKIAkJdHJ5IHsKIAkJCVN5c3RlbS5zZXRQcm9wZXJ0eSgi
dG9sZXJhdGVJbGxlZ2FsQW1iaWd1b3VzVmFyYXJnc0ludm9jYXRpb24iLCAidHJ1ZSIpOwotCQkJ
aWYgKHRoaXMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNykgewot
CQkJCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCQl0aGlzLnJ1bkNvbmZvcm1UZXN0KAogCQkJCQlz
cmMsCiAJCQkJCSIxIik7Ci0JCQl9IGVsc2UgewotCQkJCXRoaXMucnVuTmVnYXRpdmVUZXN0KAot
CQkJCQkJc3JjLAotCQkJCQkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJCQkJCSIxLiBFUlJPUiBpbiBY
LmphdmEgKGF0IGxpbmUgOSlcbiIgKyAKLQkJCQkJCSIJdGVzdCgxLFwidGVzdFwiKTtcbiIgKyAK
LQkJCQkJCSIJXl5eXlxuIiArIAotCQkJCQkJIlRoZSBtZXRob2QgdGVzdChpbnQsIE9iamVjdFtd
KSBpcyBhbWJpZ3VvdXMgZm9yIHRoZSB0eXBlIFhcbiIgKyAKLQkJCQkJCSItLS0tLS0tLS0tXG4i
KTsKLQkJCX0KIAkJfSBmaW5hbGx5IHsKIAkJCVN5c3RlbS5zZXRQcm9wZXJ0eSgidG9sZXJhdGVJ
bGxlZ2FsQW1iaWd1b3VzVmFyYXJnc0ludm9jYXRpb24iLCAiZmFsc2UiKTsKIAkJfQpkaWZmIC0t
Z2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZh
CmluZGV4IDA4YjIzZjQuLjU4OTNlMDcgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUu
amF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEKQEAgLTMxNDEsMTMgKzMxNDEsMTEg
QEAKIAkJCQkJaWYgKGkgPT0gb25lUGFyYW1zTGVuZ3RoIC0gMSAmJiBvbmUuaXNWYXJhcmdzKCkg
JiYgdHdvLmlzVmFyYXJncygpKSB7CiAJCQkJCQlUeXBlQmluZGluZyBvVHlwZSA9ICgoQXJyYXlC
aW5kaW5nKSBvbmVQYXJhbSkuZWxlbWVudHNUeXBlKCk7CiAJCQkJCQlUeXBlQmluZGluZyBlVHlw
ZSA9ICgoQXJyYXlCaW5kaW5nKSB0d29QYXJhbSkuZWxlbWVudHNUeXBlKCk7Ci0JCQkJCQlpZiAo
Q29tcGlsZXJPcHRpb25zLnRvbGVyYXRlSWxsZWdhbEFtYmlndW91c1ZhcmFyZ3NJbnZvY2F0aW9u
ICYmIHRoaXMuY29tcGlsZXJPcHRpb25zKCkuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29u
c3RhbnRzLkpESzFfNykgewotCQkJCQkJCWlmIChUeXBlQmluZGluZy5lcXVhbHNFcXVhbHMob25l
UGFyYW0sIGVUeXBlKSB8fCBvbmVQYXJhbS5pc0NvbXBhdGlibGVXaXRoKGVUeXBlKSkKLQkJCQkJ
CQkJcmV0dXJuIHRydWU7IC8vIHNwZWNpYWwgY2FzZSB0byBjaG9vc2UgYmV0d2VlbiAyIHZhcmFy
Z3MgbWV0aG9kcyB3aGVuIHRoZSBsYXN0IGFyZyBpcyBPYmplY3RbXQotCQkJCQkJfSBlbHNlIHsK
LQkJCQkJCQlpZiAoVHlwZUJpbmRpbmcuZXF1YWxzRXF1YWxzKG9UeXBlLCBlVHlwZSkgfHwgb1R5
cGUuaXNDb21wYXRpYmxlV2l0aChlVHlwZSkpCi0JCQkJCQkJCXJldHVybiB0cnVlOyAvLyBzcGVj
aWFsIGNhc2UgdG8gY2hvb3NlIGJldHdlZW4gMiB2YXJhcmdzIG1ldGhvZHMgd2hlbiB0aGUgbGFz
dCBhcmcgaXMgT2JqZWN0W10KLQkJCQkJCX0KKwkJCQkJCWlmIChUeXBlQmluZGluZy5lcXVhbHNF
cXVhbHMob25lUGFyYW0sIGVUeXBlKSB8fCBvbmVQYXJhbS5pc0NvbXBhdGlibGVXaXRoKGVUeXBl
KSkKKwkJCQkJCQlyZXR1cm4gdHJ1ZTsgLy8gc3BlY2lhbCBjYXNlIHRvIGNob29zZSBiZXR3ZWVu
IDIgdmFyYXJncyBtZXRob2RzIHdoZW4gdGhlIGxhc3QgYXJnIGlzIE9iamVjdFtdCisKKwkJCQkJ
CWlmIChUeXBlQmluZGluZy5lcXVhbHNFcXVhbHMob1R5cGUsIGVUeXBlKSB8fCBvVHlwZS5pc0Nv
bXBhdGlibGVXaXRoKGVUeXBlKSkKKwkJCQkJCQlyZXR1cm4gdHJ1ZTsgLy8gc3BlY2lhbCBjYXNl
IHRvIGNob29zZSBiZXR3ZWVuIDIgdmFyYXJncyBtZXRob2RzIHdoZW4gdGhlIGxhc3QgYXJnIGlz
IE9iamVjdFtdCiAJCQkJCX0KIAkJCQkJcmV0dXJuIGZhbHNlOwogCQkJCX0KQEAgLTM5NzcsNyAr
Mzk3NSw3IEBACiAJCQogCQlpbnRbXSBjb21wYXRpYmlsaXR5TGV2ZWxzID0gbmV3IGludFt2aXNp
YmxlU2l6ZV07CiAJCWZvciAoaW50IGkgPSAwOyBpIDwgdmlzaWJsZVNpemU7IGkrKykKLQkJCWNv
bXBhdGliaWxpdHlMZXZlbHNbaV0gPSBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwodmlzaWJs
ZVtpXSwgYXJndW1lbnRUeXBlcyk7CisJCQljb21wYXRpYmlsaXR5TGV2ZWxzW2ldID0gcGFyYW1l
dGVyQ29tcGF0aWJpbGl0eUxldmVsKHZpc2libGVbaV0sIGFyZ3VtZW50VHlwZXMsIGZhbHNlKTsK
IAogCQlJbnZvY2F0aW9uU2l0ZSB0aWVCcmVha0ludm9jYXRpb25TaXRlID0gbmV3IEludm9jYXRp
b25TaXRlKCkgewogCQkJcHVibGljIFR5cGVCaW5kaW5nW10gZ2VuZXJpY1R5cGVBcmd1bWVudHMo
KSB7IHJldHVybiBudWxsOyB9IC8vIGlnbm9yZSBnZW5lcmljVHlwZUFyZ3MKQEAgLTQyMjUsOSAr
NDIyMyw2IEBACiAJCXJldHVybiBsYXN0TWV0aG9kU2NvcGU7IC8vIG1heSBhbnN3ZXIgbnVsbCBp
ZiBubyBtZXRob2QgYXJvdW5kCiAJfQogCi0JcHVibGljIGludCBwYXJhbWV0ZXJDb21wYXRpYmls
aXR5TGV2ZWwoTWV0aG9kQmluZGluZyBtZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRzKSB7
Ci0JCXJldHVybiBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwobWV0aG9kLCBhcmd1bWVudHMs
IGZhbHNlKTsKLQl9CQogCXB1YmxpYyBpbnQgcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKE1l
dGhvZEJpbmRpbmcgbWV0aG9kLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50cywgYm9vbGVhbiB0aWVi
cmVha2luZ1ZhcmFyZ3NNZXRob2RzKSB7CiAJCVR5cGVCaW5kaW5nW10gcGFyYW1ldGVycyA9IG1l
dGhvZC5wYXJhbWV0ZXJzOwogCQlpbnQgcGFyYW1MZW5ndGggPSBwYXJhbWV0ZXJzLmxlbmd0aDsK
QEAgLTQyNTMsMjEgKzQyNDgsMjAgQEAKIAkgICAgfQogCQlpbnQgbGV2ZWwgPSBDT01QQVRJQkxF
OyAvLyBubyBhdXRvYm94aW5nIG9yIHZhcmFyZ3Mgc3VwcG9ydCBuZWVkZWQKIAkJaW50IGxhc3RJ
bmRleCA9IGFyZ0xlbmd0aDsKLQkJTG9va3VwRW52aXJvbm1lbnQgZW52ID0gZW52aXJvbm1lbnQo
KTsKIAkJaWYgKG1ldGhvZC5pc1ZhcmFyZ3MoKSkgewogCQkJbGFzdEluZGV4ID0gcGFyYW1MZW5n
dGggLSAxOwogCQkJaWYgKHBhcmFtTGVuZ3RoID09IGFyZ0xlbmd0aCkgeyAvLyBhY2NlcHQgWCBv
ciBYW10gYnV0IG5vdCBYW11bXQogCQkJCVR5cGVCaW5kaW5nIHBhcmFtID0gcGFyYW1ldGVyc1ts
YXN0SW5kZXhdOyAvLyBpcyBhbiBBcnJheUJpbmRpbmcgYnkgZGVmaW5pdGlvbgogCQkJCVR5cGVC
aW5kaW5nIGFyZyA9IGFyZ3VtZW50c1tsYXN0SW5kZXhdOwogCQkJCWlmIChUeXBlQmluZGluZy5u
b3RFcXVhbHMocGFyYW0sIGFyZykpIHsKLQkJCQkJbGV2ZWwgPSBwYXJhbWV0ZXJDb21wYXRpYmls
aXR5TGV2ZWwoYXJnLCBwYXJhbSwgZW52LCB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzKTsKKwkJ
CQkJbGV2ZWwgPSBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwoYXJnLCBwYXJhbSk7CiAJCQkJ
CWlmIChsZXZlbCA9PSBOT1RfQ09NUEFUSUJMRSkgewogCQkJCQkJLy8gZXhwZWN0IFhbXSwgaXMg
aXQgY2FsbGVkIHdpdGggWAogCQkJCQkJcGFyYW0gPSAoKEFycmF5QmluZGluZykgcGFyYW0pLmVs
ZW1lbnRzVHlwZSgpOwogCQkJCQkJaWYgKHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMpIHsKIAkJ
CQkJCQlhcmcgPSAoKEFycmF5QmluZGluZykgYXJnKS5lbGVtZW50c1R5cGUoKTsKIAkJCQkJCX0K
LQkJCQkJCWlmIChwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwoYXJnLCBwYXJhbSwgZW52LCB0
aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzKSA9PSBOT1RfQ09NUEFUSUJMRSkKKwkJCQkJCWlmIChw
YXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwoYXJnLCBwYXJhbSkgPT0gTk9UX0NPTVBBVElCTEUp
CiAJCQkJCQkJcmV0dXJuIE5PVF9DT01QQVRJQkxFOwogCQkJCQkJbGV2ZWwgPSBWQVJBUkdTX0NP
TVBBVElCTEU7IC8vIHZhcmFyZ3Mgc3VwcG9ydCBuZWVkZWQKIAkJCQkJfQpAQCAtNDI3Nyw3ICs0
MjcxLDcgQEAKIAkJCQkJVHlwZUJpbmRpbmcgcGFyYW0gPSAoKEFycmF5QmluZGluZykgcGFyYW1l
dGVyc1tsYXN0SW5kZXhdKS5lbGVtZW50c1R5cGUoKTsKIAkJCQkJZm9yIChpbnQgaSA9IGxhc3RJ
bmRleDsgaSA8IGFyZ0xlbmd0aDsgaSsrKSB7CiAJCQkJCQlUeXBlQmluZGluZyBhcmcgPSAodGll
YnJlYWtpbmdWYXJhcmdzTWV0aG9kcyAmJiAoaSA9PSAoYXJnTGVuZ3RoIC0gMSkpKSA/ICgoQXJy
YXlCaW5kaW5nKWFyZ3VtZW50c1tpXSkuZWxlbWVudHNUeXBlKCkgOiBhcmd1bWVudHNbaV07Ci0J
CQkJCQlpZiAoVHlwZUJpbmRpbmcubm90RXF1YWxzKHBhcmFtLCBhcmcpICYmIHBhcmFtZXRlckNv
bXBhdGliaWxpdHlMZXZlbChhcmcsIHBhcmFtLCBlbnYsIHRpZWJyZWFraW5nVmFyYXJnc01ldGhv
ZHMpID09IE5PVF9DT01QQVRJQkxFKQorCQkJCQkJaWYgKFR5cGVCaW5kaW5nLm5vdEVxdWFscyhw
YXJhbSwgYXJnKSAmJiBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwoYXJnLCBwYXJhbSkgPT0g
Tk9UX0NPTVBBVElCTEUpCiAJCQkJCQkJcmV0dXJuIE5PVF9DT01QQVRJQkxFOwogCQkJCQl9CiAJ
CQkJfSAgZWxzZSBpZiAobGFzdEluZGV4ICE9IGFyZ0xlbmd0aCkgeyAvLyBjYW4gY2FsbCBmb28o
aW50IGksIFggLi4uIHgpIHdpdGggZm9vKDEpIGJ1dCBOT1QgZm9vKCk7CkBAIC00MjkxLDkgKzQy
ODUsOSBAQAogCQkvLyBub3cgY29tcGFyZSBzdGFuZGFyZCBhcmd1bWVudHMgZnJvbSAwIHRvIGxh
c3RJbmRleAogCQlmb3IgKGludCBpID0gMDsgaSA8IGxhc3RJbmRleDsgaSsrKSB7CiAJCQlUeXBl
QmluZGluZyBwYXJhbSA9IHBhcmFtZXRlcnNbaV07Ci0JCQlUeXBlQmluZGluZyBhcmcgPSAodGll
YnJlYWtpbmdWYXJhcmdzTWV0aG9kcyAmJiAoaSA9PSAoYXJnTGVuZ3RoIC0gMSkpKSA/ICgoQXJy
YXlCaW5kaW5nKWFyZ3VtZW50c1tpXSkuZWxlbWVudHNUeXBlKCkgOiBhcmd1bWVudHNbaV07CisJ
CQlUeXBlQmluZGluZyBhcmcgPSBhcmd1bWVudHNbaV07CiAJCQlpZiAoVHlwZUJpbmRpbmcubm90
RXF1YWxzKGFyZyxwYXJhbSkpIHsKLQkJCQlpbnQgbmV3TGV2ZWwgPSBwYXJhbWV0ZXJDb21wYXRp
YmlsaXR5TGV2ZWwoYXJnLCBwYXJhbSwgZW52LCB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzKTsK
KwkJCQlpbnQgbmV3TGV2ZWwgPSBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwoYXJnLCBwYXJh
bSk7CiAJCQkJaWYgKG5ld0xldmVsID09IE5PVF9DT01QQVRJQkxFKQogCQkJCQlyZXR1cm4gTk9U
X0NPTVBBVElCTEU7CiAJCQkJaWYgKG5ld0xldmVsID4gbGV2ZWwpCkBAIC00MzA5LDI3ICs0MzAz
LDYgQEAKIAkJCiAJCWlmIChhcmcuaXNCYXNlVHlwZSgpICE9IHBhcmFtLmlzQmFzZVR5cGUoKSkg
ewogCQkJVHlwZUJpbmRpbmcgY29udmVydGVkVHlwZSA9IGVudmlyb25tZW50KCkuY29tcHV0ZUJv
eGluZ1R5cGUoYXJnKTsKLQkJCWlmIChUeXBlQmluZGluZy5lcXVhbHNFcXVhbHMoY29udmVydGVk
VHlwZSwgcGFyYW0pIHx8IGNvbnZlcnRlZFR5cGUuaXNDb21wYXRpYmxlV2l0aChwYXJhbSkpCi0J
CQkJcmV0dXJuIEFVVE9CT1hfQ09NUEFUSUJMRTsKLQkJfQotCQlyZXR1cm4gTk9UX0NPTVBBVElC
TEU7Ci0JfQotCQotCXByaXZhdGUgaW50IHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChUeXBl
QmluZGluZyBhcmcsIFR5cGVCaW5kaW5nIHBhcmFtLCBMb29rdXBFbnZpcm9ubWVudCBlbnYsIGJv
b2xlYW4gdGllQnJlYWtpbmdWYXJhcmdzTWV0aG9kcykgewotCQkvLyBvbmx5IGNhbGxlZCBpZiBl
bnYub3B0aW9ucy5zb3VyY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV81Ci0JCWlm
IChhcmcuaXNDb21wYXRpYmxlV2l0aChwYXJhbSwgdGhpcykpCi0JCQlyZXR1cm4gQ09NUEFUSUJM
RTsKLQkJaWYgKHRpZUJyZWFraW5nVmFyYXJnc01ldGhvZHMgJiYgKHRoaXMuY29tcGlsZXJPcHRp
b25zKCkuY29tcGxpYW5jZUxldmVsID49IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzcgfHwgIUNv
bXBpbGVyT3B0aW9ucy50b2xlcmF0ZUlsbGVnYWxBbWJpZ3VvdXNWYXJhcmdzSW52b2NhdGlvbikp
IHsKLQkJCS8qIDE1LjEyLjIuNSBDaG9vc2luZyB0aGUgTW9zdCBTcGVjaWZpYyBNZXRob2QsIC4u
LiBPbmUgdmFyaWFibGUgYXJpdHkgbWVtYmVyIG1ldGhvZCBuYW1lZCBtIGlzIG1vcmUgc3BlY2lm
aWMgdGhhbgotCQkJICAgYW5vdGhlciB2YXJpYWJsZSBhcml0eSBtZW1iZXIgbWV0aG9kIG9mIHRo
ZSBzYW1lIG5hbWUgaWYgZWl0aGVyIC4uLiBPbmx5IHN1YnR5cGVzIHJlbGF0aW9uc2hpcCBzaG91
bGQgYmUgdXNlZC4KLQkJCSAgIEFjdHVhbGx5IHRoaXMgaXMgdHJ1ZSBldmVuIGZvciBmaXhlZCBh
cml0eSBtZXRob2RzLCBidXQgaW4gcHJhY3RpY2UgaXMgbm90IGFuIGlzc3VlIHNpbmNlIHdlIHJ1
biB0aGUgYWxnb3JpdGhtCi0JCQkgICBtdWx0aXBsZSB0aW1lcyBmb3IgZWFjaCBjb21wYXRpYmls
aXR5IGxldmVsLgotCQkJICAgaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcu
Y2dpP2lkPTM0NjAzOCwgaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dp
P2lkPTM0NjAzOS4KLQkJCSovCi0JCQlyZXR1cm4gTk9UX0NPTVBBVElCTEU7Ci0JCX0KLQkJaWYg
KGFyZy5pc0Jhc2VUeXBlKCkgIT0gcGFyYW0uaXNCYXNlVHlwZSgpKSB7Ci0JCQlUeXBlQmluZGlu
ZyBjb252ZXJ0ZWRUeXBlID0gZW52LmNvbXB1dGVCb3hpbmdUeXBlKGFyZyk7CiAJCQlpZiAoVHlw
ZUJpbmRpbmcuZXF1YWxzRXF1YWxzKGNvbnZlcnRlZFR5cGUsIHBhcmFtKSB8fCBjb252ZXJ0ZWRU
eXBlLmlzQ29tcGF0aWJsZVdpdGgocGFyYW0pKQogCQkJCXJldHVybiBBVVRPQk9YX0NPTVBBVElC
TEU7CiAJCX0=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>239806</attachid>
            <date>2014-02-10 19:47:00 -0500</date>
            <delta_ts>2014-02-10 19:47:27 -0500</delta_ts>
            <desc>experimental patch</desc>
            <filename>eclipse.jdt.core.patch</filename>
            <type>text/plain</type>
            <size>1255</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2Nv
cGUuamF2YQppbmRleCA1MDVlMjk1Li42YjczOGZlIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3Vw
L1Njb3BlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhCkBAIC03Myw2ICs3Myw3
IEBACiAJcHVibGljIGZpbmFsIHN0YXRpYyBpbnQgQ09NUEFUSUJMRSA9IDA7CiAJcHVibGljIGZp
bmFsIHN0YXRpYyBpbnQgQVVUT0JPWF9DT01QQVRJQkxFID0gMTsKIAlwdWJsaWMgZmluYWwgc3Rh
dGljIGludCBWQVJBUkdTX0NPTVBBVElCTEUgPSAyOworCXB1YmxpYyBmaW5hbCBzdGF0aWMgaW50
IFZBUkJPWF9DT01QQVRJQkxFID0gMzsKIAogCS8qIFR5cGUgQ29tcGF0aWJpbGl0aWVzICovCiAJ
cHVibGljIHN0YXRpYyBmaW5hbCBpbnQgRVFVQUxfT1JfTU9SRV9TUEVDSUZJQyA9IC0xOwpAQCAt
NDcyMSw5ICs0NzIyLDEzIEBACiAJCQkJCQlpZiAodGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcykg
ewogCQkJCQkJCWFyZyA9ICgoQXJyYXlCaW5kaW5nKSBhcmcpLmVsZW1lbnRzVHlwZSgpOwogCQkJ
CQkJfQotCQkJCQkJaWYgKHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChhcmcsIHBhcmFtLCBl
bnYsIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMpID09IE5PVF9DT01QQVRJQkxFKQotCQkJCQkJ
CXJldHVybiBOT1RfQ09NUEFUSUJMRTsKIAkJCQkJCWxldmVsID0gVkFSQVJHU19DT01QQVRJQkxF
OyAvLyB2YXJhcmdzIHN1cHBvcnQgbmVlZGVkCisJCQkJCQlzd2l0Y2ggKHBhcmFtZXRlckNvbXBh
dGliaWxpdHlMZXZlbChhcmcsIHBhcmFtLCBlbnYsIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMp
KSB7CisJCQkJCQkJY2FzZSBOT1RfQ09NUEFUSUJMRTogCisJCQkJCQkJCXJldHVybiBOT1RfQ09N
UEFUSUJMRTsKKwkJCQkJCQljYXNlIEFVVE9CT1hfQ09NUEFUSUJMRToKKwkJCQkJCQkJbGV2ZWwg
PSBWQVJCT1hfQ09NUEFUSUJMRTsKKwkJCQkJCX0KIAkJCQkJfQogCQkJCX0KIAkJCX0gZWxzZSB7
Cg==
</data>

          </attachment>
      

    </bug>

</bugzilla>