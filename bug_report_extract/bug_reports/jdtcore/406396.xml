<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>406396</bug_id>
          
          <creation_ts>2013-04-24 04:04:00 -0400</creation_ts>
          <short_desc>Method can be static analysis misses a bunch of cases...</short_desc>
          <delta_ts>2013-04-28 04:19:37 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2247726</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-04-24 04:04:27 -0400</bug_when>
    <thetext>(1) In the following program, foo is not tagged as can be static, while goo
is. Both can be static: 

// ---
public class X  {
	int f;
	int foo() {
		int f = 0;
		return f;
	}
	int goo() {
		return 0;
	}
}

// ---

Problem stems from the fact we do a look up for any existing f, to
report hiding diagnostics. That look up is confused with a real
field access. 

(2) See that in the following program we don&apos;t suggest that foo could
be static when in fact it could be:

// ---- 
public class X  {
	int f;
	void foo() {
		class Y {
			int p;
			{
				class Z {
					int f = p;
				}
			}
		};
	}
}

Basically the analysis as is implemented is broken and I don&apos;t see
any quick fixes. We can take solace that we are not meant to report 
every possible candidate, but what we report should be correct.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2249483</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-04-28 04:19:37 -0400</bug_when>
    <thetext>The situation was not as hopeless as comment#0 made it sound. The fix
for https://bugs.eclipse.org/bugs/show_bug.cgi?id=406392 addressed all
the issues known with the method can be declared static analysis. 

Tests from comment#0 released here:
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=5e051a21e3e28c6b61cdf2be33e4ed5e75bc3f11

Fix available only on the Java 8 branch.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>