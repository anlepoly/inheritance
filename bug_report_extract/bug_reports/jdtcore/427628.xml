<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>427628</bug_id>
          
          <creation_ts>2014-02-07 03:06:00 -0500</creation_ts>
          <short_desc>[1.8] regression : The method * is ambiguous for the type *</short_desc>
          <delta_ts>2014-02-21 03:50:19 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Mathieu Croizard">mcr</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>noopur_gupta</cc>
    
    <cc>philipp</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2359974</commentid>
    <comment_count>0</comment_count>
    <who name="Mathieu Croizard">mcr</who>
    <bug_when>2014-02-07 03:06:38 -0500</bug_when>
    <thetext>Hello,
since today (1.0.0.v20140207-0104_BETA_JAVA8) I have and error with the following code : 

public class H {
	
	public void error(I i)
	{
		test(i!=null?i.getJ():null);
	}
	
	
	public void test(I i)
	{
		
	}
	public void test(J j)
	{
		
	}
	
	
	public class I{
		public J getJ()
		{
			return null;
		}
	}
	public class J{}

}

The error is : The method test(H.I) is ambiguous for the type H
Is it not possible to guess that the result of the condition will be of the type J ?
It was working well with earlier versions (like 1.0.0.v20140206-0106_BETA_JAVA8)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2360037</commentid>
    <comment_count>1</comment_count>
    <who name="Philipp Keck">philipp</who>
    <bug_when>2014-02-07 05:23:40 -0500</bug_when>
    <thetext>I have almost the same problem, except that in my case the signature of the target method is inferred correctly from the ternary expression, but still the error is raised.

My code:

public void setSetting(String key, String value) {
    // Do something
}

public void setSetting(String key, Integer value) {
    setSetting(key, value == null ? null : Integer.toString(value));
}

The error message is: &quot;The method setSetting(String, String) is ambiguous for the type Settings&quot;.

Note that it says &quot;setSetting(String, String)&quot; there. The only methods called &quot;setSetting&quot; in this type and all of its super-types are the two that I posted here. So there is no way the compiler could not find &quot;setSetting(String, String)&quot; once it has guessed this signature.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2360165</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-07 08:48:51 -0500</bug_when>
    <thetext>Sorry about that and thanks for the report - fix is under way - The same problem 
is at the root cause of bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=427625 
also.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2360371</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-07 13:42:48 -0500</bug_when>
    <thetext>Fix and tests released here: should be available for download in roubly 8-9 hours from the update site.

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=d42283612c50c1a8c04bc9318f8606f0e3f485c5

Both the snippets compile fine now. 

Stephan, three observations/questions:

(1) mostSpecificMethodBinding recent changes could use some clean ups with
the filtering implemented by the present fix. 

(2) The present approach disengages from the code that computes best guess 
on error. 

(3) I was a bit surprised that with no type inference in the picture,
the control flow would look so different - i.e that we would even enter
MSMB computation with incompatible entries. I guess this is because the
more complicated nested constructs require it and there is no way to know
ahead of time due to deferred evaluation of types ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2360377</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-07 13:58:14 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #3)
&gt; (3) I was a bit surprised that with no type inference in the picture,
&gt; the control flow would look so different - i.e that we would even enter
&gt; MSMB computation with incompatible entries.

Did you see this with or without type inference in the picture?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2360380</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-07 14:01:57 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #4)
&gt; (In reply to Srikanth Sankaran from comment #3)
&gt; &gt; (3) I was a bit surprised that with no type inference in the picture,
&gt; &gt; the control flow would look so different - i.e that we would even enter
&gt; &gt; MSMB computation with incompatible entries.
&gt; 
&gt; Did you see this with or without type inference in the picture?

Basically for the code in comment#0. Poly reference conditional passed
as argument in a overloaded non-generic method invocation.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2360646</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-09 00:24:19 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #3)
&gt; Fix and tests released here: should be available for download in roubly 8-9
&gt; hours from the update site.
&gt; 
&gt; http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
&gt; ?h=BETA_JAVA8&amp;id=d42283612c50c1a8c04bc9318f8606f0e3f485c5


This fix causes a regression - we don&apos;t compile some code that used to
compile earlier. 

Raised bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=427744</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2361751</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-11 12:42:39 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #3)
&gt; Stephan, three observations/questions:
&gt; 
&gt; (1) mostSpecificMethodBinding recent changes could use some clean ups with
&gt; the filtering implemented by the present fix. 
&gt; 
&gt; (3) I was a bit surprised that with no type inference in the picture,
&gt; the control flow would look so different - i.e that we would even enter
&gt; MSMB computation with incompatible entries. I guess this is because the
&gt; more complicated nested constructs require it and there is no way to know
&gt; ahead of time due to deferred evaluation of types ?

I found a cause for (3), which could mean that the changes (1) could become redundant: Inside Scope.compatibilityLevel18FromInner() we missed to detect some incompatibilities concerning poly conditionals.

When I fix this, we will report a few more secondary errors, which should be double checked whether that&apos;s OK.

Should I file a new bug or are you OK with doing some polish via this bug?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2361766</commentid>
    <comment_count>8</comment_count>
      <attachid>239834</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-11 13:16:47 -0500</bug_when>
    <thetext>Created attachment 239834
proposed fix for root cause

This patch resolves the bug in Scope.compatibilityLevel18FromInner().

Now three tests report redundant errors, e.g.:
----------
1. ERROR in X.java (at line 9)
   foo(false ? (a,b)-&gt;a+b :new StringCatenation());
   ^^^
The method foo(BinaryOperation&lt;Integer&gt;) in the type X is not applicable for the arguments ((false ? (&lt;no type&gt; a, &lt;no type&gt; b) -&gt; (a + b) : new StringCatenation()))
----------
2. ERROR in X.java (at line 9)
   foo(false ? (a,b)-&gt;a+b :new StringCatenation());
                           ^^^^^^^^^^^^^^^^^^^^^^
Type mismatch: cannot convert from StringCatenation to BinaryOperation&lt;Integer&gt;
----------

I think it&apos;s acceptable, objections?


Finally, when this patch is applied the filtering section in Scope.mSMB is no longer strictly needed (see that I commented the effecting part). 
- should we revert that change, or
- keep it as a safety net to catch any dangling methods that make it here
  without being fully checked for compatibility?


please recommend, thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2362149</commentid>
    <comment_count>9</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-12 08:41:38 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #8)

&gt; I think it&apos;s acceptable, objections?

No,

&gt; Finally, when this patch is applied the filtering section in Scope.mSMB is
&gt; no longer strictly needed (see that I commented the effecting part). 
&gt; - should we revert that change, or

I am fine with it being reverted as it could expose any additional scenarios
however unlikely they may be - If closer to the GA, we discover such issues,
we can opt for this safety net.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2363764</commentid>
    <comment_count>10</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-15 08:00:20 -0500</bug_when>
    <thetext>I&apos;ve released the patch from comment 8 via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=7cf8a68136e90cda676cf99c112914a22eaf96cd</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2366537</commentid>
    <comment_count>11</comment_count>
    <who name="Noopur Gupta">noopur_gupta</who>
    <bug_when>2014-02-21 03:50:19 -0500</bug_when>
    <thetext>Verified as working for Eclipse + Java 8 RC1 using Kepler SR2(RC4) +   
Eclipse Java Development Tools Patch for Java 8 Support (BETA)	
1.0.0.v20140220-2054</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>239834</attachid>
            <date>2014-02-11 13:16:00 -0500</date>
            <delta_ts>2014-02-11 13:16:47 -0500</delta_ts>
            <desc>proposed fix for root cause</desc>
            <filename>eclipse.jdt.core.patch</filename>
            <type>text/plain</type>
            <size>7456</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0NvbmRpdGlvbmFsRXhw
cmVzc2lvblRlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3Ny
Yy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0NvbmRpdGlv
bmFsRXhwcmVzc2lvblRlc3QuamF2YQppbmRleCA5NWI3MDhiLi5jZmY4ODNhIDEwMDY0NAotLS0g
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0
L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9Db25kaXRpb25hbEV4cHJlc3Npb25UZXN0
LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vQ29uZGl0aW9uYWxFeHBy
ZXNzaW9uVGVzdC5qYXZhCkBAIC0yNTEsNiArMjUxLDExIEBACiAJCQkJIi0tLS0tLS0tLS1cbiIg
KyAKIAkJCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDkpXG4iICsgCiAJCQkJIglmb28o
ZmFsc2UgPyAoYSxiKS0+YStiIDpuZXcgU3RyaW5nQ2F0ZW5hdGlvbigpKTtcbiIgKyAKKwkJCQki
CV5eXlxuIiArIAorCQkJCSJUaGUgbWV0aG9kIGZvbyhCaW5hcnlPcGVyYXRpb248SW50ZWdlcj4p
IGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKChmYWxz
ZSA/ICg8bm8gdHlwZT4gYSwgPG5vIHR5cGU+IGIpIC0+IChhICsgYikgOiBuZXcgU3RyaW5nQ2F0
ZW5hdGlvbigpKSlcbiIgKyAKKwkJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJCSIyLiBFUlJPUiBp
biBYLmphdmEgKGF0IGxpbmUgOSlcbiIgKyAKKwkJCQkiCWZvbyhmYWxzZSA/IChhLGIpLT5hK2Ig
Om5ldyBTdHJpbmdDYXRlbmF0aW9uKCkpO1xuIiArIAogCQkJCSIJICAgICAgICAgICAgICAgICAg
ICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAogCQkJCSJUeXBlIG1pc21hdGNoOiBj
YW5ub3QgY29udmVydCBmcm9tIFN0cmluZ0NhdGVuYXRpb24gdG8gQmluYXJ5T3BlcmF0aW9uPElu
dGVnZXI+XG4iICsgCiAJCQkJIi0tLS0tLS0tLS1cbiIKQEAgLTI4MSw2ICsyODYsMTEgQEAKIAkJ
CQkiLS0tLS0tLS0tLVxuIiArIAogCQkJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgOSlc
biIgKyAKIAkJCQkiCWZvbyhmYWxzZSA/IG5ldyBTdHJpbmdDYXRlbmF0aW9uKCkgOiAoYSxiKS0+
YStiKTtcbiIgKyAKKwkJCQkiCV5eXlxuIiArIAorCQkJCSJUaGUgbWV0aG9kIGZvbyhCaW5hcnlP
cGVyYXRpb248SW50ZWdlcj4pIGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRo
ZSBhcmd1bWVudHMgKChmYWxzZSA/IG5ldyBTdHJpbmdDYXRlbmF0aW9uKCkgOiAoPG5vIHR5cGU+
IGEsIDxubyB0eXBlPiBiKSAtPiAoYSArIGIpKSlcbiIgKyAKKwkJCQkiLS0tLS0tLS0tLVxuIiAr
IAorCQkJCSIyLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgOSlcbiIgKyAKKwkJCQkiCWZvbyhm
YWxzZSA/IG5ldyBTdHJpbmdDYXRlbmF0aW9uKCkgOiAoYSxiKS0+YStiKTtcbiIgKyAKIAkJCQki
CSAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXl5cbiIgKyAKIAkJCQkiVHlwZSBtaXNt
YXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBTdHJpbmdDYXRlbmF0aW9uIHRvIEJpbmFyeU9wZXJh
dGlvbjxJbnRlZ2VyPlxuIiArIAogCQkJCSItLS0tLS0tLS0tXG4iCmRpZmYgLS1naXQgYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9PdmVybG9hZFJlc29sdXRpb25UZXN0OC5qYXZhIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9j
b3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vT3ZlcmxvYWRSZXNvbHV0aW9uVGVzdDguamF2
YQppbmRleCBjMTQzODAzLi41MzA4M2ZkIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIv
cmVncmVzc2lvbi9PdmVybG9hZFJlc29sdXRpb25UZXN0OC5qYXZhCisrKyBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9j
b21waWxlci9yZWdyZXNzaW9uL092ZXJsb2FkUmVzb2x1dGlvblRlc3Q4LmphdmEKQEAgLTIzMTEs
OSArMjMxMSwxNCBAQAogCQkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA2KVxuIiArIAog
CQkJIgl0ZXN0KGkhPW51bGw/aS5nZXRKKCk6bnVsbCk7XG4iICsgCiAJCQkiCV5eXl5cbiIgKyAK
LQkJCSJUaGUgbWV0aG9kIHRlc3QoKChpICE9IG51bGwpID8gaS5nZXRKKCkgOiBudWxsKSkgaXMg
dW5kZWZpbmVkIGZvciB0aGUgdHlwZSBYXG4iICsgCisJCQkiVGhlIG1ldGhvZCB0ZXN0KFguSSkg
aW4gdGhlIHR5cGUgWCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoKChpICE9
IG51bGwpID8gaS5nZXRKKCkgOiBudWxsKSlcbiIgKyAKIAkJCSItLS0tLS0tLS0tXG4iICsgCi0J
CQkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDEyKVxuIiArIAorCQkJIjIuIEVSUk9SIGlu
IFguamF2YSAoYXQgbGluZSA2KVxuIiArIAorCQkJIgl0ZXN0KGkhPW51bGw/aS5nZXRKKCk6bnVs
bCk7XG4iICsgCisJCQkiCSAgICAgICAgICAgICBeXl5eXl5eXlxuIiArIAorCQkJIlR5cGUgbWlz
bWF0Y2g6IGNhbm5vdCBjb252ZXJ0IGZyb20gWC5KIHRvIFguSVxuIiArIAorCQkJIi0tLS0tLS0t
LS1cbiIgKyAKKwkJCSIzLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTIpXG4iICsgCiAJCQki
CVN5c3RlbS5vdXQucHJpbnRsbihcIktcIiArIGopO1xuIiArIAogCQkJIgkgICAgICAgICAgICAg
ICAgICAgICAgICAgXlxuIiArIAogCQkJImogY2Fubm90IGJlIHJlc29sdmVkIHRvIGEgdmFyaWFi
bGVcbiIgKyAKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YSBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9s
b29rdXAvU2NvcGUuamF2YQppbmRleCBhYmVhOGI5Li5iZWEyNTE0IDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvbG9va3VwL1Njb3BlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhCkBAIC04
MDksOSArODA5LDEwIEBACiAJCX0KIAkJaWYgKHRhcmdldFR5cGUgPT0gbnVsbCkKIAkJCXJldHVy
biBOT1RfQ09NUEFUSUJMRTsgLy8gbWlzbWF0Y2hpbmcgbnVtYmVyIG9mIGFyZ3Mgb3Igb3RoZXIg
c2V2ZXJlIHByb2JsZW0gaW5zaWRlIG1ldGhvZCBiaW5kaW5nCisJCWludCBsZXZlbCA9IC0yOyAv
LyBkb24ndCBrbm93CiAJCWlmIChpbnZvY0FyZyBpbnN0YW5jZW9mIEludm9jYXRpb24gJiYgcmVz
b2x2ZWRUeXBlICE9IG51bGwpIHsKIAkJCUludm9jYXRpb24gaW5uZXJQb2x5ID0gKEludm9jYXRp
b24pIGludm9jQXJnOwotCQkJaW50IGxldmVsID0gcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVs
KHJlc29sdmVkVHlwZSwgdGFyZ2V0VHlwZSk7CisJCQlsZXZlbCA9IHBhcmFtZXRlckNvbXBhdGli
aWxpdHlMZXZlbChyZXNvbHZlZFR5cGUsIHRhcmdldFR5cGUpOwogCQkJaWYgKGxldmVsICE9IE5P
VF9DT01QQVRJQkxFKSB7CiAJCQkJcmV0dXJuIE1hdGgubWF4KGNvbXBhdGlibGUsIGxldmVsKTsK
IAkJCX0gZWxzZSB7CkBAIC04NTEsMjMgKzg1MiwyNyBAQAogCQkJCQl9CiAJCQkJfSBlbHNlIGlm
IChpbm5lclBvbHkgaW5zdGFuY2VvZiBBbGxvY2F0aW9uRXhwcmVzc2lvbikgewogCQkJCQlNZXRo
b2RCaW5kaW5nIHVwZGF0ZWRNZXRob2QgPSBpbm5lclBvbHkuYmluZGluZyh0YXJnZXRUeXBlKTsg
Ly8gMi4gdHJ5IHdpdGggdXBkYXRpbmcKLQkJCQkJaWYgKHVwZGF0ZWRNZXRob2QgIT0gaW5uZXJC
aW5kaW5nICYmIHVwZGF0ZWRNZXRob2QgIT0gbnVsbCAmJiB1cGRhdGVkTWV0aG9kLmlzVmFsaWRC
aW5kaW5nKCkpIHsKLQkJCQkJCWlmICh1cGRhdGVkTWV0aG9kLmRlY2xhcmluZ0NsYXNzLmlzQ29t
cGF0aWJsZVdpdGgodGFyZ2V0VHlwZSkpCi0JCQkJCQkJcmV0dXJuIGNvbXBhdGlibGU7Ci0JCQkJ
CQlyZXR1cm4gTk9UX0NPTVBBVElCTEU7CisJCQkJCWlmICh1cGRhdGVkTWV0aG9kICE9IGlubmVy
QmluZGluZyAmJiB1cGRhdGVkTWV0aG9kICE9IG51bGwpIHsKKwkJCQkJCWlmICh1cGRhdGVkTWV0
aG9kLmlzVmFsaWRCaW5kaW5nKCkpIHsKKwkJCQkJCQlpZiAodXBkYXRlZE1ldGhvZC5kZWNsYXJp
bmdDbGFzcy5pc0NvbXBhdGlibGVXaXRoKHRhcmdldFR5cGUpKQorCQkJCQkJCQlyZXR1cm4gY29t
cGF0aWJsZTsKKwkJCQkJCQlyZXR1cm4gTk9UX0NPTVBBVElCTEU7CisJCQkJCQl9IGVsc2UgaWYg
KHVwZGF0ZWRNZXRob2QucHJvYmxlbUlkKCkgPT0gUHJvYmxlbVJlYXNvbnMuQW1iaWd1b3VzKSB7
CisJCQkJCQkJbGV2ZWwgPSAtMjsgLy8gbmVpdGhlciBnb29kIG5vciBiYWQsIGFuc3dlciAidW5r
bm93biIKKwkJCQkJCX0KIAkJCQkJfQogCQkJCX0KIAkJCX0KIAkJfSBlbHNlIGlmIChpbnZvY0Fy
Zy5pc1BvbHlFeHByZXNzaW9uKCkpIHsKIAkJCWlmIChpbnZvY0FyZyBpbnN0YW5jZW9mIENvbmRp
dGlvbmFsRXhwcmVzc2lvbikgewogCQkJCUNvbmRpdGlvbmFsRXhwcmVzc2lvbiBjZSA9IChDb25k
aXRpb25hbEV4cHJlc3Npb24pIGludm9jQXJnOwotCQkJCWludCBsZXZlbCA9IGNvbXBhdGliaWxp
dHlMZXZlbDE4RnJvbUlubmVyKG1ldGhvZCwgaW5uZXJJbmZlcmVuY2VIZWxwZXIsIGNlLnZhbHVl
SWZUcnVlLCBhcmdMZW4sIGksIGlzVmFyQXJncyk7Ci0JCQkJaWYgKGxldmVsID09IE5PVF9DT01Q
QVRJQkxFKQorCQkJCWludCBsZXZlbDEgPSBjb21wYXRpYmlsaXR5TGV2ZWwxOEZyb21Jbm5lciht
ZXRob2QsIGlubmVySW5mZXJlbmNlSGVscGVyLCBjZS52YWx1ZUlmVHJ1ZSwgYXJnTGVuLCBpLCBp
c1ZhckFyZ3MpOworCQkJCWlmIChsZXZlbDEgPT0gTk9UX0NPTVBBVElCTEUpCiAJCQkJCXJldHVy
biBOT1RfQ09NUEFUSUJMRTsKIAkJCQlpbnQgbGV2ZWwyID0gY29tcGF0aWJpbGl0eUxldmVsMThG
cm9tSW5uZXIobWV0aG9kLCBpbm5lckluZmVyZW5jZUhlbHBlciwgY2UudmFsdWVJZkZhbHNlLCBh
cmdMZW4sIGksIGlzVmFyQXJncyk7CiAJCQkJaWYgKGxldmVsMiA9PSBOT1RfQ09NUEFUSUJMRSkK
IAkJCQkJcmV0dXJuIE5PVF9DT01QQVRJQkxFOwotCQkJCXJldHVybiBNYXRoLm1heChsZXZlbCwg
bGV2ZWwyKTsKKwkJCQlyZXR1cm4gTWF0aC5tYXgobGV2ZWwxLCBsZXZlbDIpOwogCQkJfQogCQkJ
Ly8gTEUgb3IgUkU6CiAJCQlpZiAoaW52b2NBcmcuaXNDb21wYXRpYmxlV2l0aCh0YXJnZXRUeXBl
LCB0aGlzKSkKQEAgLTg4Myw3ICs4ODgsNyBAQAogCQkJLy8gbmVlZCB0byBoYW5kbGUgIm5vcm1h
bCIgZXhwcmVzc2lvbnMgdG9vLCBzaW5jZSBtaXhlZCBwb2x5L3N0YW5kYWxvbmUgYXJndW1lbnQg
bGlzdHMgbXVzdCBiZSBmdWxseSBhbmFseXplZC4KIAkJCXJldHVybiBwYXJhbWV0ZXJDb21wYXRp
YmlsaXR5TGV2ZWwocmVzb2x2ZWRUeXBlLCB0YXJnZXRUeXBlKTsKIAkJfQotCQlyZXR1cm4gLTI7
IC8vIGRvbid0IGtub3cKKwkJcmV0dXJuIGxldmVsOwogCX0KIAogCXByaXZhdGUgYm9vbGVhbiBz
aG91bGRUcnlWYXJhcmdzKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBUeXBlQmluZGluZyByZXNvbHZl
ZFR5cGUsIFR5cGVCaW5kaW5nIHRhcmdldFR5cGUpIHsKQEAgLTQzNTEsMTggKzQzNTYsMTggQEAK
IAkJCQljb21wYXRpYmxlQ291bnQrKzsKIAkJCX0KIAkJfQotCQlpZiAoY29tcGF0aWJsZUNvdW50
ID09IDApIHsKLQkJCXJldHVybiBuZXcgUHJvYmxlbU1ldGhvZEJpbmRpbmcodmlzaWJsZVswXS5z
ZWxlY3RvciwgYXJndW1lbnRUeXBlcywgUHJvYmxlbVJlYXNvbnMuTm90Rm91bmQpOwotCQl9IGVs
c2UgaWYgKGNvbXBhdGlibGVDb3VudCA9PSAxKSB7Ci0JCQlNZXRob2RCaW5kaW5nIGNhbmRpZGF0
ZSA9IGluZmVySW52b2NhdGlvblR5cGUoaW52b2NhdGlvblNpdGUsIHZpc2libGVbMF0sIGFyZ3Vt
ZW50VHlwZXMpOwotCQkJY29tcGlsYXRpb25Vbml0U2NvcGUoKS5yZWNvcmRUeXBlUmVmZXJlbmNl
cyhjYW5kaWRhdGUudGhyb3duRXhjZXB0aW9ucyk7Ci0JCQlyZXR1cm4gY2FuZGlkYXRlOwotCQl9
Ci0JCi0JCWlmIChjb21wYXRpYmxlQ291bnQgIT0gdmlzaWJsZVNpemUpIHsKLQkJCVN5c3RlbS5h
cnJheWNvcHkodmlzaWJsZSwgMCwgdmlzaWJsZSA9IG5ldyBNZXRob2RCaW5kaW5nW3Zpc2libGVT
aXplID0gY29tcGF0aWJsZUNvdW50XSwgMCwgY29tcGF0aWJsZUNvdW50KTsKLQkJCVN5c3RlbS5h
cnJheWNvcHkoY29tcGF0aWJpbGl0eUxldmVscywgMCwgY29tcGF0aWJpbGl0eUxldmVscyA9IG5l
dyBpbnRbY29tcGF0aWJsZUNvdW50XSwgMCwgY29tcGF0aWJsZUNvdW50KTsKLQkJfQorLy8JCWlm
IChjb21wYXRpYmxlQ291bnQgPT0gMCkgeworLy8JCQlyZXR1cm4gbmV3IFByb2JsZW1NZXRob2RC
aW5kaW5nKHZpc2libGVbMF0uc2VsZWN0b3IsIGFyZ3VtZW50VHlwZXMsIFByb2JsZW1SZWFzb25z
Lk5vdEZvdW5kKTsKKy8vCQl9IGVsc2UgaWYgKGNvbXBhdGlibGVDb3VudCA9PSAxKSB7CisvLwkJ
CU1ldGhvZEJpbmRpbmcgY2FuZGlkYXRlID0gaW5mZXJJbnZvY2F0aW9uVHlwZShpbnZvY2F0aW9u
U2l0ZSwgdmlzaWJsZVswXSwgYXJndW1lbnRUeXBlcyk7CisvLwkJCWNvbXBpbGF0aW9uVW5pdFNj
b3BlKCkucmVjb3JkVHlwZVJlZmVyZW5jZXMoY2FuZGlkYXRlLnRocm93bkV4Y2VwdGlvbnMpOwor
Ly8JCQlyZXR1cm4gY2FuZGlkYXRlOworLy8JCX0KKy8vCQorLy8JCWlmIChjb21wYXRpYmxlQ291
bnQgIT0gdmlzaWJsZVNpemUpIHsKKy8vCQkJU3lzdGVtLmFycmF5Y29weSh2aXNpYmxlLCAwLCB2
aXNpYmxlID0gbmV3IE1ldGhvZEJpbmRpbmdbdmlzaWJsZVNpemUgPSBjb21wYXRpYmxlQ291bnRd
LCAwLCBjb21wYXRpYmxlQ291bnQpOworLy8JCQlTeXN0ZW0uYXJyYXljb3B5KGNvbXBhdGliaWxp
dHlMZXZlbHMsIDAsIGNvbXBhdGliaWxpdHlMZXZlbHMgPSBuZXcgaW50W2NvbXBhdGlibGVDb3Vu
dF0sIDAsIGNvbXBhdGlibGVDb3VudCk7CisvLwkJfQogCQkKIAkJTWV0aG9kQmluZGluZ1tdIG1v
cmVTcGVjaWZpYyA9IG5ldyBNZXRob2RCaW5kaW5nW3Zpc2libGVTaXplXTsKIA==
</data>

          </attachment>
      

    </bug>

</bugzilla>