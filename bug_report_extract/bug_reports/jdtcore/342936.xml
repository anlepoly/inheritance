<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>342936</bug_id>
          
          <creation_ts>2011-04-15 05:02:00 -0400</creation_ts>
          <short_desc>NPEs and inconsistencies when running jdt.compiler.tool.tests against Java 7</short_desc>
          <delta_ts>2011-04-25 13:23:20 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.7</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux-GTK</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>3.7 M7</target_milestone>
          
          <blocked>342688</blocked>
    
    <blocked>343283</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Dani Megert">daniel_megert</reporter>
          <assigned_to name="Olivier Thomann">Olivier_Thomann</assigned_to>
          <cc>jarthana</cc>
    
    <cc>kim.moir</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1914164</commentid>
    <comment_count>0</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2011-04-15 05:02:31 -0400</bug_when>
    <thetext></thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1914166</commentid>
    <comment_count>1</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2011-04-15 05:06:26 -0400</bug_when>
    <thetext>Problem is that
    ToolProvider.getSystemJavaCompiler();
returns &apos;null&apos;.

According to Kim, the SDK is installed and tools.jar in place.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1914180</commentid>
    <comment_count>2</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2011-04-15 05:30:44 -0400</bug_when>
    <thetext>I just tried on our Suse Linux machine using jdk-7-ea-bin-b137-linux-i586 and the tests pass.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1914402</commentid>
    <comment_count>3</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-04-15 10:23:38 -0400</bug_when>
    <thetext>When I try to run a small program using this machine that prints out the java system compiler, and it works perfectly fine.
The best I can do for now is to skip the test when the system java compiler is null. This can potentially happen so we might want to add protection against this anyway.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1914405</commentid>
    <comment_count>4</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2011-04-15 10:26:35 -0400</bug_when>
    <thetext>Kim, can you spin another build once that&apos;s done? We&apos;ve fixed most of the issues.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1914429</commentid>
    <comment_count>5</comment_count>
    <who name="Kim Moir">kim.moir</who>
    <bug_when>2011-04-15 10:45:25 -0400</bug_when>
    <thetext>Sure, I&apos;m running a test build for another bug.  I&apos;ll rerun those tests with Java 7 once the zips are available.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1914542</commentid>
    <comment_count>6</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-04-15 13:37:02 -0400</bug_when>
    <thetext>Annotation processors don&apos;t behave exactly the same way between javac 1.7 and javac 1.6.
I&apos;ll try to come up with a reasonable support for both.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1914546</commentid>
    <comment_count>7</comment_count>
      <attachid>193394</attachid>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-04-15 13:48:19 -0400</bug_when>
    <thetext>Created attachment 193394
Proposed fix</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1914547</commentid>
    <comment_count>8</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-04-15 13:48:32 -0400</bug_when>
    <thetext>Released for 3.7M7.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1914895</commentid>
    <comment_count>9</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2011-04-18 02:37:35 -0400</bug_when>
    <thetext>(In reply to comment #6)
&gt; Annotation processors don&apos;t behave exactly the same way between javac 1.7 and
&gt; javac 1.6.
&gt; I&apos;ll try to come up with a reasonable support for both.

What&apos;s the difference? Anything that needs more attention?

Any clue why the tests get &apos;null&apos; for getSystemJavaCompiler()? Aren&apos;t the tests run with Ant? Maybe some problem there?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1914896</commentid>
    <comment_count>10</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2011-04-18 02:37:46 -0400</bug_when>
    <thetext>(In reply to comment #5)
&gt; Sure, I&apos;m running a test build for another bug.  I&apos;ll rerun those tests with
&gt; Java 7 once the zips are available.

Kim, I haven&apos;t seen the build. BTW: please, make sure that code coverage is disabled.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1915067</commentid>
    <comment_count>11</comment_count>
    <who name="Kim Moir">kim.moir</who>
    <bug_when>2011-04-18 07:51:39 -0400</bug_when>
    <thetext>I had code coverage enabled in the previous build so I&apos;ll have to run them again. Are there specific test suites that you&apos;d like me to run so instead of running all the tests again (4-5 hours)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1915069</commentid>
    <comment_count>12</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2011-04-18 07:53:37 -0400</bug_when>
    <thetext>(In reply to comment #11)
&gt; I had code coverage enabled in the previous build so I&apos;ll have to run them
&gt; again. Are there specific test suites that you&apos;d like me to run so instead of
&gt; running all the tests again (4-5 hours)

I&apos;d like to run all, so that I can look at one page and get the full picture.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1915092</commentid>
    <comment_count>13</comment_count>
    <who name="Kim Moir">kim.moir</who>
    <bug_when>2011-04-18 08:29:01 -0400</bug_when>
    <thetext>Okay, I&apos;m rerunning the tests on Linux for N20110417-2000 which was a green build so any failures should be quite evident.  I&apos;ll regenerate the page once they have completed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1915110</commentid>
    <comment_count>14</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-04-18 09:02:27 -0400</bug_when>
    <thetext>(In reply to comment #9)
&gt; (In reply to comment #6)
&gt; &gt; Annotation processors don&apos;t behave exactly the same way between javac 1.7 and
&gt; &gt; javac 1.6.
&gt; &gt; I&apos;ll try to come up with a reasonable support for both.
&gt; 
Most differences are around the handling of error type. This is loosely spec&apos;d and therefore it is difficult to know exactly what is supposed to be returned.
 
&gt; What&apos;s the difference? Anything that needs more attention?
jsr269 doesn&apos;t really have specs. The specs are the javadoc of the corresponding types.

&gt; Any clue why the tests get &apos;null&apos; for getSystemJavaCompiler()? Aren&apos;t the tests
&gt; run with Ant? Maybe some problem there?
No, but since this is possible I prefer to handle the cases inside the test suite. I believe that now the compiler.tool and compiler.apt tests are more resilient.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1918476</commentid>
    <comment_count>15</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2011-04-25 13:23:20 -0400</bug_when>
    <thetext>Verified for 3.7M7 using code inspection.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>193394</attachid>
            <date>2011-04-15 13:48:00 -0400</date>
            <delta_ts>2011-04-15 13:48:19 -0400</delta_ts>
            <desc>Proposed fix</desc>
            <filename>patch_342936.txt</filename>
            <type>text/plain</type>
            <size>45837</size>
            <attacher name="Olivier Thomann">Olivier_Thomann</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMA0KI1Agb3JnLmVjbGlwc2UuamR0LmNvbXBp
bGVyLmFwdC50ZXN0cw0KSW5kZXg6IHByb2Nlc3NvcnMvb3JnL2VjbGlwc2UvamR0L2NvbXBpbGVy
L2FwdC90ZXN0cy9wcm9jZXNzb3JzL21lc3NhZ2VyL01lc3NhZ2VyUHJvYy5qYXZhDQo9PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09DQpSQ1MgZmlsZTogL2N2c3Jvb3QvZWNsaXBzZS9vcmcuZWNsaXBzZS5qZHQuY29tcGlsZXIu
YXB0LnRlc3RzL3Byb2Nlc3NvcnMvb3JnL2VjbGlwc2UvamR0L2NvbXBpbGVyL2FwdC90ZXN0cy9w
cm9jZXNzb3JzL21lc3NhZ2VyL01lc3NhZ2VyUHJvYy5qYXZhLHYNCnJldHJpZXZpbmcgcmV2aXNp
b24gMS40DQpkaWZmIC11IC1yMS40IE1lc3NhZ2VyUHJvYy5qYXZhDQotLS0gcHJvY2Vzc29ycy9v
cmcvZWNsaXBzZS9qZHQvY29tcGlsZXIvYXB0L3Rlc3RzL3Byb2Nlc3NvcnMvbWVzc2FnZXIvTWVz
c2FnZXJQcm9jLmphdmEJMTkgSmFuIDIwMDkgMDg6NDI6MTIgLTAwMDAJMS40DQorKysgcHJvY2Vz
c29ycy9vcmcvZWNsaXBzZS9qZHQvY29tcGlsZXIvYXB0L3Rlc3RzL3Byb2Nlc3NvcnMvbWVzc2Fn
ZXIvTWVzc2FnZXJQcm9jLmphdmEJMTUgQXByIDIwMTEgMTc6NDc6MTcgLTAwMDANCkBAIC0xLDUg
KzEsNSBAQA0KIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQotICogQ29weXJpZ2h0IChjKSAyMDA3
LCAyMDA5IEJFQSBTeXN0ZW1zLCBJbmMuIA0KKyAqIENvcHlyaWdodCAoYykgMjAwNywgMjAxMSBC
RUEgU3lzdGVtcywgSW5jLiANCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0g
YW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzDQogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVu
ZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wDQogICogd2hp
Y2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQNCkBA
IC03LDcgKzcsNyBAQA0KICAqDQogICogQ29udHJpYnV0b3JzOg0KICAqICAgIHdoYXJsZXlAYmVh
LmNvbSAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbg0KLSAqICAgIA0KKyAqICAgIElC
TSBDb3Jwb3JhdGlvbiAtIGZpeCBmb3IgMzQyOTM2DQogICoqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiov
DQogDQogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuY29tcGlsZXIuYXB0LnRlc3RzLnByb2Nlc3Nv
cnMubWVzc2FnZXI7DQpJbmRleDogc3JjL29yZy9lY2xpcHNlL2pkdC9jb21waWxlci9hcHQvdGVz
dHMvQmF0Y2hEaXNwYXRjaFRlc3RzLmphdmENCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NClJDUyBmaWxlOiAvY3Zzcm9v
dC9lY2xpcHNlL29yZy5lY2xpcHNlLmpkdC5jb21waWxlci5hcHQudGVzdHMvc3JjL29yZy9lY2xp
cHNlL2pkdC9jb21waWxlci9hcHQvdGVzdHMvQmF0Y2hEaXNwYXRjaFRlc3RzLmphdmEsdg0KcmV0
cmlldmluZyByZXZpc2lvbiAxLjkNCmRpZmYgLXUgLXIxLjkgQmF0Y2hEaXNwYXRjaFRlc3RzLmph
dmENCi0tLSBzcmMvb3JnL2VjbGlwc2UvamR0L2NvbXBpbGVyL2FwdC90ZXN0cy9CYXRjaERpc3Bh
dGNoVGVzdHMuamF2YQkxNSBOb3YgMjAwNyAxNzo0OTowNiAtMDAwMAkxLjkNCisrKyBzcmMvb3Jn
L2VjbGlwc2UvamR0L2NvbXBpbGVyL2FwdC90ZXN0cy9CYXRjaERpc3BhdGNoVGVzdHMuamF2YQkx
NSBBcHIgMjAxMSAxNzo0NzoxNyAtMDAwMA0KQEAgLTEsNSArMSw1IEBADQogLyoqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioNCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDYsIDIwMDcgQkVBIFN5c3RlbXMsIElu
Yy4NCisgKiBDb3B5cmlnaHQgKGMpIDIwMDYsIDIwMTEgQkVBIFN5c3RlbXMsIEluYy4NCiAgKiBB
bGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0
ZXJpYWxzDQogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNs
aXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wDQogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0
cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQNCkBAIC03LDcgKzcsNyBAQA0KICAqDQogICog
Q29udHJpYnV0b3JzOg0KICAqICAgIHdoYXJsZXlAYmVhLmNvbSAtIGluaXRpYWwgQVBJIGFuZCBp
bXBsZW1lbnRhdGlvbg0KLSAqDQorICogICAgSUJNIENvcnBvcmF0aW9uIC0gZml4IGZvciAzNDI5
MzYNCiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5j
b21waWxlci5hcHQudGVzdHM7DQogDQpAQCAtODMsNiArODMsMTAgQEANCiAJcHVibGljIHZvaWQg
dGVzdFByb2Nlc3NvckFyZ3VtZW50c1dpdGhTeXN0ZW1Db21waWxlcigpIHRocm93cyBJT0V4Y2Vw
dGlvbiB7DQogCQkvLyBTeXN0ZW0gY29tcGlsZXINCiAJCUphdmFDb21waWxlciBjb21waWxlciA9
IFRvb2xQcm92aWRlci5nZXRTeXN0ZW1KYXZhQ29tcGlsZXIoKTsNCisJCWlmIChjb21waWxlciA9
PSBudWxsKSB7DQorCQkJU3lzdGVtLm91dC5wcmludGxuKCJObyBzeXN0ZW0gamF2YSBjb21waWxl
ciBhdmFpbGFibGUiKTsNCisJCQlyZXR1cm47DQorCQl9DQogCQlpbnRlcm5hbFRlc3RQcm9jZXNz
b3JBcmd1bWVudHMoY29tcGlsZXIpOw0KIAl9DQogDQpAQCAtMTA1LDYgKzEwOSwxMCBAQA0KIAlw
dWJsaWMgdm9pZCB0ZXN0Q29tcGlsZXJPbmVDbGFzc1dpdGhTeXN0ZW1Db21waWxlcigpIHRocm93
cyBJT0V4Y2VwdGlvbiB7DQogCQkvLyBTeXN0ZW0gY29tcGlsZXINCiAJCUphdmFDb21waWxlciBj
b21waWxlciA9IFRvb2xQcm92aWRlci5nZXRTeXN0ZW1KYXZhQ29tcGlsZXIoKTsNCisJCWlmIChj
b21waWxlciA9PSBudWxsKSB7DQorCQkJU3lzdGVtLm91dC5wcmludGxuKCJObyBzeXN0ZW0gamF2
YSBjb21waWxlciBhdmFpbGFibGUiKTsNCisJCQlyZXR1cm47DQorCQl9DQogCQlpbnRlcm5hbFRl
c3RHZW5lcmF0ZUNsYXNzKGNvbXBpbGVyKTsNCiAJfQ0KIA0KQEAgLTEyNCw2ICsxMzIsMTAgQEAN
CiAJICovDQogCXB1YmxpYyB2b2lkIHRlc3RJbmhlcml0ZWRBbm5vc1dpdGhTeXN0ZW1Db21waWxl
cigpIHRocm93cyBJT0V4Y2VwdGlvbiB7DQogCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBUb29s
UHJvdmlkZXIuZ2V0U3lzdGVtSmF2YUNvbXBpbGVyKCk7DQorCQlpZiAoY29tcGlsZXIgPT0gbnVs
bCkgew0KKwkJCVN5c3RlbS5vdXQucHJpbnRsbigiTm8gc3lzdGVtIGphdmEgY29tcGlsZXIgYXZh
aWxhYmxlIik7DQorCQkJcmV0dXJuOw0KKwkJfQ0KIAkJaW50ZXJuYWxUZXN0SW5oZXJpdGFuY2Uo
Y29tcGlsZXIsIElOSEVSSVRFREFOTk9QUk9DKTsNCiAJfQ0KIA0KSW5kZXg6IHNyYy9vcmcvZWNs
aXBzZS9qZHQvY29tcGlsZXIvYXB0L3Rlc3RzL0JhdGNoVGVzdFV0aWxzLmphdmENCj09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT0NClJDUyBmaWxlOiAvY3Zzcm9vdC9lY2xpcHNlL29yZy5lY2xpcHNlLmpkdC5jb21waWxlci5h
cHQudGVzdHMvc3JjL29yZy9lY2xpcHNlL2pkdC9jb21waWxlci9hcHQvdGVzdHMvQmF0Y2hUZXN0
VXRpbHMuamF2YSx2DQpyZXRyaWV2aW5nIHJldmlzaW9uIDEuMTQNCmRpZmYgLXUgLXIxLjE0IEJh
dGNoVGVzdFV0aWxzLmphdmENCi0tLSBzcmMvb3JnL2VjbGlwc2UvamR0L2NvbXBpbGVyL2FwdC90
ZXN0cy9CYXRjaFRlc3RVdGlscy5qYXZhCTI4IEFwciAyMDA5IDE2OjM1OjAxIC0wMDAwCTEuMTQN
CisrKyBzcmMvb3JnL2VjbGlwc2UvamR0L2NvbXBpbGVyL2FwdC90ZXN0cy9CYXRjaFRlc3RVdGls
cy5qYXZhCTE1IEFwciAyMDExIDE3OjQ3OjE3IC0wMDAwDQpAQCAtMSw1ICsxLDUgQEANCiAvKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKg0KLSAqIENvcHlyaWdodCAoYykgMjAwNywgMjAwOSBCRUEgU3lz
dGVtcywgSW5jLg0KKyAqIENvcHlyaWdodCAoYykgMjAwNywgMjAxMSBCRUEgU3lzdGVtcywgSW5j
Lg0KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFu
eWluZyBtYXRlcmlhbHMNCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9m
IHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjANCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0
aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdA0KQEAgLTcsOCArNyw4IEBADQog
ICoNCiAgKiBDb250cmlidXRvcnM6DQogICogICAgd2hhcmxleUBiZWEuY29tIC0gaW5pdGlhbCBB
UEkgYW5kIGltcGxlbWVudGF0aW9uDQotICoNCi0gKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCisg
KiAgICBJQk0gQ29ycG9yYXRpb24gLSBmaXggZm9yIDM0MjkzNg0KKyoqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKiovDQogDQogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuY29tcGlsZXIuYXB0LnRlc3RzOw0K
IA0KQEAgLTI3LDYgKzI3LDcgQEANCiBpbXBvcnQgamF2YS51dGlsLkxvY2FsZTsNCiBpbXBvcnQg
amF2YS51dGlsLlNlcnZpY2VMb2FkZXI7DQogDQoraW1wb3J0IGphdmF4LnRvb2xzLkRpYWdub3N0
aWNMaXN0ZW5lcjsNCiBpbXBvcnQgamF2YXgudG9vbHMuSmF2YUNvbXBpbGVyOw0KIGltcG9ydCBq
YXZheC50b29scy5KYXZhRmlsZU9iamVjdDsNCiBpbXBvcnQgamF2YXgudG9vbHMuU3RhbmRhcmRK
YXZhRmlsZU1hbmFnZXI7DQpAQCAtMTMxLDE0ICsxMzIsMTcgQEANCiAJICogQHBhcmFtIGVycm9y
cyBhIFN0cmluZ1dyaXRlciBpbnRvIHdoaWNoIGNvbXBpbGVyIG91dHB1dCB3aWxsIGJlIHdyaXR0
ZW4NCiAJICogQHJldHVybiB0cnVlIGlmIHRoZSBjb21waWxhdGlvbiB3YXMgc3VjY2Vzc2Z1bA0K
IAkgKi8NCi0JcHVibGljIHN0YXRpYyBib29sZWFuIGNvbXBpbGVUcmVlV2l0aEVycm9ycyhKYXZh
Q29tcGlsZXIgY29tcGlsZXIsIExpc3Q8U3RyaW5nPiBvcHRpb25zLCBGaWxlIHRhcmdldEZvbGRl
ciwgU3RyaW5nV3JpdGVyIGVycm9ycykgew0KKwlwdWJsaWMgc3RhdGljIGJvb2xlYW4gY29tcGls
ZVRyZWVXaXRoRXJyb3JzKA0KKwkJCUphdmFDb21waWxlciBjb21waWxlciwNCisJCQlMaXN0PFN0
cmluZz4gb3B0aW9ucywNCisJCQlGaWxlIHRhcmdldEZvbGRlciwNCisJCQlEaWFnbm9zdGljTGlz
dGVuZXI8PyBzdXBlciBKYXZhRmlsZU9iamVjdD4gZGlhZ25vc3RpY0xpc3RlbmVyKSB7DQogCQlT
dGFuZGFyZEphdmFGaWxlTWFuYWdlciBtYW5hZ2VyID0gY29tcGlsZXIuZ2V0U3RhbmRhcmRGaWxl
TWFuYWdlcihudWxsLCBMb2NhbGUuZ2V0RGVmYXVsdCgpLCBDaGFyc2V0LmRlZmF1bHRDaGFyc2V0
KCkpOw0KIA0KIAkJLy8gY3JlYXRlIG5ldyBsaXN0IGNvbnRhaW5pbmcgaW5wdXRmaWxlDQogCQlM
aXN0PEZpbGU+IGZpbGVzID0gbmV3IEFycmF5TGlzdDxGaWxlPigpOw0KIAkJZmluZEZpbGVzVW5k
ZXIodGFyZ2V0Rm9sZGVyLCBmaWxlcyk7DQogCQlJdGVyYWJsZTw/IGV4dGVuZHMgSmF2YUZpbGVP
YmplY3Q+IHVuaXRzID0gbWFuYWdlci5nZXRKYXZhRmlsZU9iamVjdHNGcm9tRmlsZXMoZmlsZXMp
Ow0KLQkJUHJpbnRXcml0ZXIgcHJpbnRXcml0ZXIgPSBuZXcgUHJpbnRXcml0ZXIoZXJyb3JzKTsN
CiANCiAJCW9wdGlvbnMuYWRkKCItZCIpOw0KIAkJb3B0aW9ucy5hZGQoX3RtcEJpbkZvbGRlck5h
bWUpOw0KQEAgLTE0OCw3ICsxNTIsOSBAQA0KIAkJb3B0aW9ucy5hZGQoX3RtcFNyY0ZvbGRlck5h
bWUgKyBGaWxlLnBhdGhTZXBhcmF0b3IgKyBfdG1wR2VuRm9sZGVyTmFtZSArIEZpbGUucGF0aFNl
cGFyYXRvciArIF9wcm9jZXNzb3JKYXJQYXRoKTsNCiAJCW9wdGlvbnMuYWRkKCItcHJvY2Vzc29y
cGF0aCIpOw0KIAkJb3B0aW9ucy5hZGQoX3Byb2Nlc3NvckphclBhdGgpOw0KLQkJQ29tcGlsYXRp
b25UYXNrIHRhc2sgPSBjb21waWxlci5nZXRUYXNrKHByaW50V3JpdGVyLCBtYW5hZ2VyLCBudWxs
LCBvcHRpb25zLCBudWxsLCB1bml0cyk7DQorCQkvLyB1c2Ugd3JpdGVyIHRvIHByZXZlbnQgU3lz
dGVtLm91dC9lcnIgdG8gYmUgcG9sbHV0ZWQgd2l0aCBwcm9ibGVtcw0KKwkJU3RyaW5nV3JpdGVy
IHdyaXRlciA9IG5ldyBTdHJpbmdXcml0ZXIoKTsNCisJCUNvbXBpbGF0aW9uVGFzayB0YXNrID0g
Y29tcGlsZXIuZ2V0VGFzayh3cml0ZXIsIG1hbmFnZXIsIGRpYWdub3N0aWNMaXN0ZW5lciwgb3B0
aW9ucywgbnVsbCwgdW5pdHMpOw0KIAkJQm9vbGVhbiByZXN1bHQgPSB0YXNrLmNhbGwoKTsNCiAN
CiAJCXJldHVybiByZXN1bHQuYm9vbGVhblZhbHVlKCk7DQpJbmRleDogc3JjL29yZy9lY2xpcHNl
L2pkdC9jb21waWxlci9hcHQvdGVzdHMvRmlsZXJUZXN0cy5qYXZhDQo9PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQpSQ1Mg
ZmlsZTogL2N2c3Jvb3QvZWNsaXBzZS9vcmcuZWNsaXBzZS5qZHQuY29tcGlsZXIuYXB0LnRlc3Rz
L3NyYy9vcmcvZWNsaXBzZS9qZHQvY29tcGlsZXIvYXB0L3Rlc3RzL0ZpbGVyVGVzdHMuamF2YSx2
DQpyZXRyaWV2aW5nIHJldmlzaW9uIDEuMg0KZGlmZiAtdSAtcjEuMiBGaWxlclRlc3RzLmphdmEN
Ci0tLSBzcmMvb3JnL2VjbGlwc2UvamR0L2NvbXBpbGVyL2FwdC90ZXN0cy9GaWxlclRlc3RzLmph
dmEJNSBNYXIgMjAxMSAxOTo0MToxOSAtMDAwMAkxLjINCisrKyBzcmMvb3JnL2VjbGlwc2UvamR0
L2NvbXBpbGVyL2FwdC90ZXN0cy9GaWxlclRlc3RzLmphdmEJMTUgQXByIDIwMTEgMTc6NDc6MTcg
LTAwMDANCkBAIC04LDYgKzgsNyBAQA0KICAqIENvbnRyaWJ1dG9yczoNCiAgKiAgICB3aGFybGV5
QGJlYS5jb20gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24NCiAgKiAgICBwaGlsaXBw
ZS5tYXJzY2hhbGxAbmV0Y2V0ZXJhLmNoIC0gUmVncmVzc2lvbiB0ZXN0IGZvciAzMzgzNzANCisg
KiAgICBJQk0gQ29ycG9yYXRpb24gLSBmaXggZm9yIDM0MjkzNg0KICAqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqLw0KIA0KIHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLmFwdC50ZXN0czsN
CkBAIC0zNiw2ICszNywxMCBAQA0KIAkgKi8NCiAJcHVibGljIHZvaWQgdGVzdEVsZW1lbnRXaXRo
U3lzdGVtQ29tcGlsZXIoKSB0aHJvd3MgSU9FeGNlcHRpb24gew0KIAkJSmF2YUNvbXBpbGVyIGNv
bXBpbGVyID0gVG9vbFByb3ZpZGVyLmdldFN5c3RlbUphdmFDb21waWxlcigpOw0KKwkJaWYgKGNv
bXBpbGVyID09IG51bGwpIHsNCisJCQlTeXN0ZW0ub3V0LnByaW50bG4oIk5vIHN5c3RlbSBqYXZh
IGNvbXBpbGVyIGF2YWlsYWJsZSIpOw0KKwkJCXJldHVybjsNCisJCX0NCiAJCWludGVybmFsVGVz
dENyZWF0ZVJlc291cmNlKGNvbXBpbGVyLCB0cnVlKTsNCiAJfQ0KIA0KSW5kZXg6IHNyYy9vcmcv
ZWNsaXBzZS9qZHQvY29tcGlsZXIvYXB0L3Rlc3RzL01lc3NhZ2VyVGVzdHMuamF2YQ0KPT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PQ0KUkNTIGZpbGU6IC9jdnNyb290L2VjbGlwc2Uvb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVy
LmFwdC50ZXN0cy9zcmMvb3JnL2VjbGlwc2UvamR0L2NvbXBpbGVyL2FwdC90ZXN0cy9NZXNzYWdl
clRlc3RzLmphdmEsdg0KcmV0cmlldmluZyByZXZpc2lvbiAxLjUNCmRpZmYgLXUgLXIxLjUgTWVz
c2FnZXJUZXN0cy5qYXZhDQotLS0gc3JjL29yZy9lY2xpcHNlL2pkdC9jb21waWxlci9hcHQvdGVz
dHMvTWVzc2FnZXJUZXN0cy5qYXZhCTIgTWFyIDIwMDkgMDY6Mzg6NDMgLTAwMDAJMS41DQorKysg
c3JjL29yZy9lY2xpcHNlL2pkdC9jb21waWxlci9hcHQvdGVzdHMvTWVzc2FnZXJUZXN0cy5qYXZh
CTE1IEFwciAyMDExIDE3OjQ3OjE3IC0wMDAwDQpAQCAtMSw1ICsxLDUgQEANCiAvKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKg0KLSAqIENvcHlyaWdodCAoYykgMjAwNywgMjAwOSBCRUEgU3lzdGVtcywg
SW5jLiBhbmQgb3RoZXJzDQorICogQ29weXJpZ2h0IChjKSAyMDA3LCAyMDExIEJFQSBTeXN0ZW1z
LCBJbmMuIGFuZCBvdGhlcnMNCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0g
YW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzDQogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVu
ZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wDQogICogd2hp
Y2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQNCkBA
IC03LDE5ICs3LDIwIEBADQogICoNCiAgKiBDb250cmlidXRvcnM6DQogICogICAgd2hhcmxleUBi
ZWEuY29tIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uDQotICogICAgDQorICogICAg
SUJNIENvcnBvcmF0aW9uIC0gZml4IGZvciAzNDI5MzYNCiAgKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
Ki8NCiANCiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5jb21waWxlci5hcHQudGVzdHM7DQogDQog
aW1wb3J0IGphdmEuaW8uRmlsZTsNCiBpbXBvcnQgamF2YS5pby5JT0V4Y2VwdGlvbjsNCi1pbXBv
cnQgamF2YS5pby5TdHJpbmdXcml0ZXI7DQogaW1wb3J0IGphdmEudXRpbC5BcnJheUxpc3Q7DQog
aW1wb3J0IGphdmEudXRpbC5MaXN0Ow0KLWltcG9ydCBqYXZhLnV0aWwucmVnZXguUGF0dGVybjsN
CiANCitpbXBvcnQgamF2YXgudG9vbHMuRGlhZ25vc3RpYzsNCitpbXBvcnQgamF2YXgudG9vbHMu
RGlhZ25vc3RpY0xpc3RlbmVyOw0KIGltcG9ydCBqYXZheC50b29scy5KYXZhQ29tcGlsZXI7DQor
aW1wb3J0IGphdmF4LnRvb2xzLkphdmFGaWxlT2JqZWN0Ow0KIGltcG9ydCBqYXZheC50b29scy5U
b29sUHJvdmlkZXI7DQogDQogaW1wb3J0IGp1bml0LmZyYW1ld29yay5UZXN0Q2FzZTsNCkBAIC0y
OSwxMDcgKzMwLDIyIEBADQogICogQHNpbmNlIDMuMw0KICAqLw0KIHB1YmxpYyBjbGFzcyBNZXNz
YWdlclRlc3RzIGV4dGVuZHMgVGVzdENhc2Ugew0KLQlwcml2YXRlIHN0YXRpYyBmaW5hbCBTdHJp
bmcgQ09NUEFSRV9PSyA9ICJPSyI7DQotCS8vIFNlZSBjb3JyZXNwb25kaW5nIHVzYWdlcyBpbiB0
aGUgTWVzc2FnZXJQcm9jIGNsYXNzDQotCXByaXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZyBNRVNT
QUdFUlBST0NOQU1FID0gIm9yZy5lY2xpcHNlLmpkdC5jb21waWxlci5hcHQudGVzdHMucHJvY2Vz
c29ycy5tZXNzYWdlci5NZXNzYWdlclByb2MiOw0KLQkNCi0JLy8gRXhwZWN0ZWQgb3V0cHV0IGZv
ciB0aGUgamF2YWMgY29tcGlsZXIuDQotCS8vIE5vdGUgdGhhdCB0aGlzIGlzIGFjdHVhbGx5IGEg
c2VyaWVzIG9mIHJlZ3VsYXIgZXhwcmVzc2lvbnMsIHdoaWNoIHdpbGwgYmUgbWF0Y2hlZCBsaW5l
IGJ5IGxpbmUhDQotCS8vIFRoaXMgaXMgcmVxdWlyZWQgaW4gb3JkZXIgdG8gZGVhbCB3aXRoIHRo
aW5ncyBsaWtlIGhhcmQtY29kZWQgcGF0aHMuDQotCXByaXZhdGUgc3RhdGljIGZpbmFsIFN0cmlu
Z1tdIEVYUEVDVEVEX0pBVkFDX01FU1NBR0VTID0gew0KLQkJIk5vdGVcXDogSW5mb3JtYXRpb25h
bCBtZXNzYWdlIG5vdCBhc3NvY2lhdGVkIHdpdGggYW4gZWxlbWVudCIsDQotCQkiLipEXFwuamF2
YVxcOjE1XFw6IEVycm9yIG9uIGVsZW1lbnQgRCIsDQotCQkicHVibGljIGNsYXNzIEQgXFx7IiwN
Ci0JCSIgICAgICAgXFxeIiwNCi0JCSIuKkRcXC5qYXZhXFw6MTJcXDogRXJyb3Igb24gZWxlbWVu
dCBEIiwNCi0JCSJcXEBBbm5vWlxcKCIsDQotCQkiXFxeIiwNCi0JCSIuKkRcXC5qYXZhXFw6MTJc
XDogRXJyb3Igb24gZWxlbWVudCBEIiwNCi0JCSJcXEBBbm5vWlxcKCIsDQotCQkiXFxeIiwNCi0J
CSJlcnJvclxcOiBFcnJvciBvbiBlbGVtZW50IGphdmFcXC5sYW5nXFwuU3RyaW5nIiwNCi0JCSIu
KkVcXC5qYXZhXFw6MTJcXDogd2FybmluZ1xcOiBXYXJuaW5nIG9uIG1ldGhvZCBmb28iLA0KLQkJ
IglwdWJsaWMgdm9pZCBmb29cXChpbnQgaVxcKSBcXHtcXH0iLA0KLQkJIgkgICAgICAgICAgICBc
XF4iLA0KLQkJIi4qRVxcLmphdmFcXDoxNFxcOiBOb3RlXFw6IE5vdGUgZm9yIGZpZWxkIGoiLA0K
LQkJIglwdWJsaWMgc3RhdGljIGludCBqOyIsDQotCQkiCSAgICAgICAgICAgICAgICAgIFxcXiIs
DQotCQkiLipEXFwuamF2YVxcOjE5XFw6IHdhcm5pbmdcXDogRXJyb3Igb24gcGFyYW1ldGVyIG9m
IERcXC5tZXRob2REdm9pZCIsDQotCQkiCXB1YmxpYyB2b2lkIG1ldGhvZER2b2lkXFwoREVudW0g
ZEVudW0xXFwpIFxceyIsDQotCQkiCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcXiIs
DQotCQkiNCBlcnJvcnMiDQotCX07DQotCQ0KLQkvLyBFeHBlY3RlZCBvdXRwdXQgZm9yIEVjbGlw
c2UgY29tcGlsZXIuDQotCS8vIE5vdGUgdGhhdCB0aGlzIGlzIGFjdHVhbGx5IGEgc2VyaWVzIG9m
IHJlZ3VsYXIgZXhwcmVzc2lvbnMsIHdoaWNoIHdpbGwgYmUgbWF0Y2hlZCBsaW5lIGJ5IGxpbmUh
DQotCS8vIFRoaXMgaXMgcmVxdWlyZWQgaW4gb3JkZXIgdG8gZGVhbCB3aXRoIHRoaW5ncyBsaWtl
IGhhcmQtY29kZWQgcGF0aHMuDQotCXByaXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZ1tdIEVYUEVD
VEVEX0VDTElQU0VfTUVTU0FHRVMgPSB7DQotCQkiLS0tLS0tLS0tLSIsIA0KLQkJIjFcXC4gV0FS
TklORyBpbiBcXChvcmlnaW5hbCBmaWxlIG5hbWUgaXMgbm90IGF2YWlsYWJsZVxcKSIsIA0KLQkJ
IkluZm9ybWF0aW9uYWwgbWVzc2FnZSBub3QgYXNzb2NpYXRlZCB3aXRoIGFuIGVsZW1lbnQiLCAN
Ci0JCSItLS0tLS0tLS0tIiwgDQotCQkiMlxcLiBFUlJPUiBpbiAuKkRcXC5qYXZhIFxcKGF0IGxp
bmUgMTVcXCkiLCANCi0JCSIJcHVibGljIGNsYXNzIEQgXFx7IiwgDQotCQkiCSAgICAgICAgICAg
ICBcXF4iLCANCi0JCSJFcnJvciBvbiBlbGVtZW50IEQiLCANCi0JCSItLS0tLS0tLS0tIiwgDQot
CQkiM1xcLiBFUlJPUiBpbiAuKkRcXC5qYXZhIFxcKGF0IGxpbmUgMTJcXCkiLCANCi0JCSIJQEFu
bm9aXFwoIiwNCi0JCSIJXFxeXFxeXFxeXFxeXFxeXFxeIiwNCi0JCSJFcnJvciBvbiBlbGVtZW50
IEQiLCANCi0JCSItLS0tLS0tLS0tIiwgDQotCQkiNFxcLiBFUlJPUiBpbiAuKkRcXC5qYXZhIFxc
KGF0IGxpbmUgMTNcXCkiLCANCi0JCSIJYW5ub1pTdHJpbmcgPSBcImFubm9aT25EXCJcXCkiLCAN
Ci0JCSIJXFxeXFxeXFxeXFxeXFxeXFxeXFxeXFxeXFxeXFxeXFxeIiwgDQotCQkiRXJyb3Igb24g
ZWxlbWVudCBEIiwgDQotCQkiLS0tLS0tLS0tLSIsIA0KLQkJIjVcXC4gRVJST1IgaW4gXFwob3Jp
Z2luYWwgZmlsZSBuYW1lIGlzIG5vdCBhdmFpbGFibGVcXCkiLCANCi0JCSJFcnJvciBvbiBlbGVt
ZW50IGphdmFcXC5sYW5nXFwuU3RyaW5nIiwgDQotCQkiLS0tLS0tLS0tLSIsIA0KLQkJIjZcXC4g
V0FSTklORyBpbiAuKkVcXC5qYXZhIFxcKGF0IGxpbmUgMTJcXCkiLCANCi0JCSIJcHVibGljIHZv
aWQgZm9vXFwoaW50IGlcXCkgXFx7XFx9IiwgDQotCQkiCSAgICAgICAgICAgIFxcXlxcXlxcXlxc
XlxcXlxcXlxcXlxcXlxcXlxcXiIsIA0KLQkJIldhcm5pbmcgb24gbWV0aG9kIGZvbyIsIA0KLQkJ
Ii0tLS0tLS0tLS0iLCANCi0JCSI3XFwuIFdBUk5JTkcgaW4gLipFXFwuamF2YSBcXChhdCBsaW5l
IDE0XFwpIiwgDQotCQkiCXB1YmxpYyBzdGF0aWMgaW50IGo7IiwgDQotCQkiCSAgICAgICAgICAg
ICAgICAgIFxcXiIsIA0KLQkJIk5vdGUgZm9yIGZpZWxkIGoiLCANCi0JCSItLS0tLS0tLS0tIiwg
DQotCQkiOFxcLiBXQVJOSU5HIGluIC4qRFxcLmphdmEgXFwoYXQgbGluZSAxOVxcKSIsIA0KLQkJ
IglwdWJsaWMgdm9pZCBtZXRob2REdm9pZFxcKERFbnVtIGRFbnVtMVxcKSBcXHsiLCANCi0JCSIJ
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxeXFxeXFxeXFxeXFxeXFxeIiwgDQotCQki
RXJyb3Igb24gcGFyYW1ldGVyIG9mIERcXC5tZXRob2REdm9pZCIsIA0KLQkJIi0tLS0tLS0tLS0i
LCANCi0JCSI4IHByb2JsZW1zIFxcKDQgZXJyb3JzLCA0IHdhcm5pbmdzXFwpIiANCi0JfTsNCiAJ
DQotCS8qKg0KLQkgKiBDb21wYXJlIGFuIGFjdHVhbCBtdWx0aS1saW5lIHN0cmluZyBhZ2FpbnN0
IGFuIGFycmF5IG9mIHJlZ3VsYXIgZXhwcmVzc2lvbnMNCi0JICogcmVwcmVzZW50aW5nIGFuIGV4
cGVjdGVkIHN0cmluZy4gRWFjaCByZWd1bGFyIGV4cHJlc3Npb24gd2lsbCBiZSBtYXRjaGVkIGFn
YWluc3QNCi0JICogb25lIGxpbmUgb2YgdGhlIGFjdHVhbCBzdHJpbmcuDQotCSAqIEByZXR1cm4g
dGhlIHN0cmluZyAiT0siIGlmIGV2ZXJ5IGxpbmUgaW4gdGhlIGFjdHVhbCB3YXMgbWF0Y2hlZCBi
eSB0aGUgY29ycmVzcG9uZGluZyByZWdleA0KLQkgKiBpbiB0aGUgZXhwZWN0ZWQsIG9yIGFuIGVy
cm9yIHN0cmluZyBpZiBub3QuDQotCSAqLw0KLQlwcml2YXRlIHN0YXRpYyBTdHJpbmcgY29tcGFy
ZVJlZ2V4TGluZXMoU3RyaW5nIGFjdHVhbCwgU3RyaW5nW10gZXhwZWN0ZWQpIHsNCi0JCVN0cmlu
Z1tdIGFjdHVhbExpbmVzID0gYWN0dWFsLnNwbGl0KCJcbiIpOw0KLQkJaWYgKGFjdHVhbExpbmVz
Lmxlbmd0aCAhPSBleHBlY3RlZC5sZW5ndGgpIHsNCi0JCQlyZXR1cm4gIkVSUk9SOiBleHBlY3Rl
ZCAiICsgZXhwZWN0ZWQubGVuZ3RoICsgIiBsaW5lcyBidXQgZm91bmQgIiArIGFjdHVhbExpbmVz
Lmxlbmd0aDsNCisJcHVibGljIGZpbmFsIGNsYXNzIERpYWdub3N0aWNSZXBvcnQ8Uz4gaW1wbGVt
ZW50cyBEaWFnbm9zdGljTGlzdGVuZXI8Uz4gew0KKwkJcHVibGljIGludCBlcnJvcnM7DQorDQor
CQlEaWFnbm9zdGljUmVwb3J0KCkgew0KKwkJCXRoaXMuZXJyb3JzID0gMDsNCiAJCX0NCi0JCWlu
dCBpID0gMDsNCi0JCWZvciAoU3RyaW5nIHBhdHRlcm4gOiBleHBlY3RlZCkgew0KLQkJCWludCBp
Q1IgPSBhY3R1YWxMaW5lc1tpXS5pbmRleE9mKCdccicpOw0KLQkJCWFjdHVhbExpbmVzW2ldID0g
aUNSID4gMCA/IGFjdHVhbExpbmVzW2ldLnN1YnN0cmluZygwLCBpQ1IpIDogYWN0dWFsTGluZXNb
aV07DQotCQkJaW50IGlOTCA9IGFjdHVhbExpbmVzW2ldLmluZGV4T2YoJ1xuJyk7DQotCQkJYWN0
dWFsTGluZXNbaV0gPSBpTkwgPiAwID8gYWN0dWFsTGluZXNbaV0uc3Vic3RyaW5nKDAsIGlOTCkg
OiBhY3R1YWxMaW5lc1tpXTsNCi0JCQlpZiAoIVBhdHRlcm4ubWF0Y2hlcyhwYXR0ZXJuLCBhY3R1
YWxMaW5lc1tpKytdKSkgew0KLQkJCQktLWk7DQotCQkJCXJldHVybiAiRVJST1I6IG1pc21hdGNo
IGF0IGxpbmUgIiArIGkgKyAiOiBhY3R1YWwgbGluZSB3YXMgWyIgKyBhY3R1YWxMaW5lc1tpXSAr
ICJdIjsNCisJCXB1YmxpYyB2b2lkIHJlcG9ydChEaWFnbm9zdGljPD8gZXh0ZW5kcyBTPiBkaWFn
bm9zdGljKSB7DQorCQkJaWYgKGRpYWdub3N0aWMuZ2V0S2luZCgpID09ICBEaWFnbm9zdGljLktp
bmQuRVJST1IpIHsNCisJCQkJZXJyb3JzKys7DQogCQkJfQ0KIAkJfQ0KLQkJcmV0dXJuIENPTVBB
UkVfT0s7DQogCX0NCi0JDQorCS8vIFNlZSBjb3JyZXNwb25kaW5nIHVzYWdlcyBpbiB0aGUgTWVz
c2FnZXJQcm9jIGNsYXNzDQorCXByaXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZyBNRVNTQUdFUlBS
T0NOQU1FID0gIm9yZy5lY2xpcHNlLmpkdC5jb21waWxlci5hcHQudGVzdHMucHJvY2Vzc29ycy5t
ZXNzYWdlci5NZXNzYWdlclByb2MiOw0KKw0KIAlAT3ZlcnJpZGUNCiAJcHJvdGVjdGVkIHZvaWQg
c2V0VXAoKSB0aHJvd3MgRXhjZXB0aW9uIHsNCiAJCXN1cGVyLnNldFVwKCk7DQpAQCAtMTQyLDgg
KzU4LDE1IEBADQogCSAqLw0KIAlwdWJsaWMgdm9pZCB0ZXN0TWVzc2FnZXJXaXRoU3lzdGVtQ29t
cGlsZXIoKSB0aHJvd3MgSU9FeGNlcHRpb24gew0KIAkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0g
VG9vbFByb3ZpZGVyLmdldFN5c3RlbUphdmFDb21waWxlcigpOw0KLQkJU3RyaW5nIGFjdHVhbEVy
cm9ycyA9IGludGVybmFsVGVzdE1lc3NhZ2VyKGNvbXBpbGVyKTsNCi0JCWFzc2VydEVxdWFscyhD
T01QQVJFX09LLCBjb21wYXJlUmVnZXhMaW5lcyhhY3R1YWxFcnJvcnMsIEVYUEVDVEVEX0pBVkFD
X01FU1NBR0VTKSk7DQorCQlpZiAoY29tcGlsZXIgPT0gbnVsbCkgew0KKwkJCVN5c3RlbS5vdXQu
cHJpbnRsbigiTm8gc3lzdGVtIGphdmEgY29tcGlsZXIgYXZhaWxhYmxlIik7DQorCQkJcmV0dXJu
Ow0KKwkJfQ0KKwkJRGlhZ25vc3RpY1JlcG9ydDxKYXZhRmlsZU9iamVjdD4gZGlhZ25vc3RpY0xp
c3RlbmVyID0gbmV3IERpYWdub3N0aWNSZXBvcnQ8SmF2YUZpbGVPYmplY3Q+KCk7DQorCQlpbnRl
cm5hbFRlc3RNZXNzYWdlcihjb21waWxlciwgZGlhZ25vc3RpY0xpc3RlbmVyKTsNCisJCS8vIHN1
cnByaXNpbmdseSBlbm91Z2ggamF2YWMgMS43IG9ubHkgcmVwb3J0cyAzIGVycm9ycw0KKwkJLy8g
amF2YWMgMS42IHJlcG9ydHMgNCBlcnJvcnMgYXMgZXhwZWN0ZWQNCisJCWFzc2VydFRydWUoIldy
b25nIG51bWJlciBvZiByZXBvcnRlZCBlcnJvcnMiLCBkaWFnbm9zdGljTGlzdGVuZXIuZXJyb3Jz
ID49IDMpOw0KIAl9DQogDQogCS8qKg0KQEAgLTE1Miw4ICs3NSw5IEBADQogCSAqLw0KIAlwdWJs
aWMgdm9pZCB0ZXN0TWVzc2FnZXJXaXRoRWNsaXBzZUNvbXBpbGVyKCkgdGhyb3dzIElPRXhjZXB0
aW9uIHsNCiAJCUphdmFDb21waWxlciBjb21waWxlciA9IEJhdGNoVGVzdFV0aWxzLmdldEVjbGlw
c2VDb21waWxlcigpOw0KLQkJU3RyaW5nIGFjdHVhbEVycm9ycyA9IGludGVybmFsVGVzdE1lc3Nh
Z2VyKGNvbXBpbGVyKTsNCi0JCWFzc2VydEVxdWFscyhDT01QQVJFX09LLCBjb21wYXJlUmVnZXhM
aW5lcyhhY3R1YWxFcnJvcnMsIEVYUEVDVEVEX0VDTElQU0VfTUVTU0FHRVMpKTsNCisJCURpYWdu
b3N0aWNSZXBvcnQ8SmF2YUZpbGVPYmplY3Q+IGRpYWdub3N0aWNMaXN0ZW5lciA9IG5ldyBEaWFn
bm9zdGljUmVwb3J0PEphdmFGaWxlT2JqZWN0PigpOw0KKwkJaW50ZXJuYWxUZXN0TWVzc2FnZXIo
Y29tcGlsZXIsIGRpYWdub3N0aWNMaXN0ZW5lcik7DQorCQlhc3NlcnRFcXVhbHMoIldyb25nIG51
bWJlciBvZiByZXBvcnRlZCBlcnJvcnMiLCA0LCBkaWFnbm9zdGljTGlzdGVuZXIuZXJyb3JzKTsN
CiAJfQ0KIA0KIAkvKioNCkBAIC0xNjEsNyArODUsNyBAQA0KIAkgKiBAdGhyb3dzIElPRXhjZXB0
aW9uDQogCSAqIEByZXR1cm4gdGhlIG91dHB1dHRlZCBlcnJvcnMsIGlmIHRoZSB0ZXN0IHN1Y2Nl
ZWRlZCBlbm91Z2ggdG8gZ2VuZXJhdGUgdGhlbQ0KIAkgKi8NCi0JcHJpdmF0ZSBTdHJpbmcgaW50
ZXJuYWxUZXN0TWVzc2FnZXIoSmF2YUNvbXBpbGVyIGNvbXBpbGVyKSB0aHJvd3MgSU9FeGNlcHRp
b24gew0KKwlwcml2YXRlIHZvaWQgaW50ZXJuYWxUZXN0TWVzc2FnZXIoSmF2YUNvbXBpbGVyIGNv
bXBpbGVyLCBEaWFnbm9zdGljTGlzdGVuZXI8PyBzdXBlciBKYXZhRmlsZU9iamVjdD4gZGlhZ25v
c3RpY0xpc3RlbmVyKSB0aHJvd3MgSU9FeGNlcHRpb24gew0KIAkJU3lzdGVtLmNsZWFyUHJvcGVy
dHkoTUVTU0FHRVJQUk9DTkFNRSk7DQogCQlGaWxlIHRhcmdldEZvbGRlciA9IFRlc3RVdGlscy5j
b25jYXRQYXRoKEJhdGNoVGVzdFV0aWxzLmdldFNyY0ZvbGRlck5hbWUoKSwgInRhcmdldHMiLCAi
ZXJyb3JzIik7DQogCQlCYXRjaFRlc3RVdGlscy5jb3B5UmVzb3VyY2VzKCJ0YXJnZXRzL2Vycm9y
cyIsIHRhcmdldEZvbGRlcik7DQpAQCAtMTY5LDEyICs5MywxMSBAQA0KIAkJLy8gVHVybiBvbiB0
aGUgTWVzc2FnZXJQcm9jIC0gd2l0aG91dCB0aGlzLCBpdCB3aWxsIGp1c3QgcmV0dXJuIHdpdGhv
dXQgZG9pbmcgYW55dGhpbmcNCiAJCUxpc3Q8U3RyaW5nPiBvcHRpb25zID0gbmV3IEFycmF5TGlz
dDxTdHJpbmc+KCk7DQogCQlvcHRpb25zLmFkZCgiLUEiICsgTUVTU0FHRVJQUk9DTkFNRSk7DQor
CQlvcHRpb25zLmFkZCgiLW5vd2FybiIpOw0KIA0KLQkJLy8gSW52b2tlIHByb2Nlc3NpbmcgYnkg
Y29tcGlsaW5nIHRoZSB0YXJnZXRzLm1vZGVsIHJlc291cmNlcw0KLQkJU3RyaW5nV3JpdGVyIGVy
cm9ycyA9IG5ldyBTdHJpbmdXcml0ZXIoKTsNCi0JCWJvb2xlYW4gc3VjY2VzcyA9IEJhdGNoVGVz
dFV0aWxzLmNvbXBpbGVUcmVlV2l0aEVycm9ycyhjb21waWxlciwgb3B0aW9ucywgdGFyZ2V0Rm9s
ZGVyLCBlcnJvcnMpOw0KKwkJLy8gSW52b2tlIHByb2Nlc3NpbmcgYnkgY29tcGlsaW5nIHRoZSB0
YXJnZXRzLmVycm9ycyByZXNvdXJjZXMNCisJCWJvb2xlYW4gc3VjY2VzcyA9IEJhdGNoVGVzdFV0
aWxzLmNvbXBpbGVUcmVlV2l0aEVycm9ycyhjb21waWxlciwgb3B0aW9ucywgdGFyZ2V0Rm9sZGVy
LCBkaWFnbm9zdGljTGlzdGVuZXIpOw0KIAkJDQotCQlhc3NlcnRUcnVlKCJlcnJvcnMgc2hvdWxk
IG5vdCBiZSBlbXB0eSIsIGVycm9ycy5nZXRCdWZmZXIoKS5sZW5ndGgoKSAhPSAwKTsNCiAJCWFz
c2VydFRydWUoIkNvbXBpbGF0aW9uIHNob3VsZCBoYXZlIGZhaWxlZCBkdWUgdG8gZXhwZWN0ZWQg
ZXJyb3JzLCBidXQgaXQgZGlkbid0IiwgIXN1Y2Nlc3MpOw0KIA0KIAkJLy8gSWYgaXQgc3VjY2Vl
ZGVkLCB0aGUgcHJvY2Vzc29yIHdpbGwgaGF2ZSBzZXQgdGhpcyBwcm9wZXJ0eSB0byAic3VjY2Vl
ZGVkIjsNCkBAIC0xODIsMTAgKzEwNSw2IEBADQogCQlTdHJpbmcgcHJvcGVydHkgPSBTeXN0ZW0u
Z2V0UHJvcGVydHkoTUVTU0FHRVJQUk9DTkFNRSk7DQogCQlhc3NlcnROb3ROdWxsKCJObyBwcm9w
ZXJ0eSIsIHByb3BlcnR5KTsNCiAJCWFzc2VydEVxdWFscygic3VjY2VlZGVkIiwgcHJvcGVydHkp
Ow0KLQkJDQotCQkvL1N5c3RlbS5vdXQucHJpbnRsbihlcnJvcnMuZ2V0QnVmZmVyKCkudG9TdHJp
bmcoKSk7DQotCQkNCi0JCXJldHVybiBlcnJvcnMuZ2V0QnVmZmVyKCkudG9TdHJpbmcoKTsNCiAJ
fQ0KIA0KIAkvKiAobm9uLUphdmFkb2MpDQpJbmRleDogc3JjL29yZy9lY2xpcHNlL2pkdC9jb21w
aWxlci9hcHQvdGVzdHMvTW9kZWxUZXN0cy5qYXZhDQo9PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQpSQ1MgZmlsZTogL2N2
c3Jvb3QvZWNsaXBzZS9vcmcuZWNsaXBzZS5qZHQuY29tcGlsZXIuYXB0LnRlc3RzL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29tcGlsZXIvYXB0L3Rlc3RzL01vZGVsVGVzdHMuamF2YSx2DQpyZXRyaWV2
aW5nIHJldmlzaW9uIDEuNw0KZGlmZiAtdSAtcjEuNyBNb2RlbFRlc3RzLmphdmENCi0tLSBzcmMv
b3JnL2VjbGlwc2UvamR0L2NvbXBpbGVyL2FwdC90ZXN0cy9Nb2RlbFRlc3RzLmphdmEJMjEgQXBy
IDIwMTAgMDY6MjU6MjMgLTAwMDAJMS43DQorKysgc3JjL29yZy9lY2xpcHNlL2pkdC9jb21waWxl
ci9hcHQvdGVzdHMvTW9kZWxUZXN0cy5qYXZhCTE1IEFwciAyMDExIDE3OjQ3OjE3IC0wMDAwDQpA
QCAtMSw1ICsxLDUgQEANCiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KLSAqIENvcHlyaWdodCAo
YykgMjAwNy0yMDEwIEJFQSBTeXN0ZW1zLCBJbmMuIA0KKyAqIENvcHlyaWdodCAoYykgMjAwNywg
MjAxMSBCRUEgU3lzdGVtcywgSW5jLiANCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHBy
b2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzDQogICogYXJlIG1hZGUgYXZhaWxh
YmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wDQog
ICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUg
YXQNCkBAIC03LDcgKzcsNyBAQA0KICAqDQogICogQ29udHJpYnV0b3JzOg0KICAqICAgIHdoYXJs
ZXlAYmVhLmNvbSAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbg0KLSAqICAgIA0KKyAq
ICAgIElCTSBDb3Jwb3JhdGlvbiAtIGZpeCBmb3IgMzQyOTM2DQogICoqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKiovDQogDQogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuY29tcGlsZXIuYXB0LnRlc3RzOw0K
QEAgLTQ2LDYgKzQ2LDEwIEBADQogCSAqLw0KIAlwdWJsaWMgdm9pZCB0ZXN0RWxlbWVudFdpdGhT
eXN0ZW1Db21waWxlcigpIHRocm93cyBJT0V4Y2VwdGlvbiB7DQogCQlKYXZhQ29tcGlsZXIgY29t
cGlsZXIgPSBUb29sUHJvdmlkZXIuZ2V0U3lzdGVtSmF2YUNvbXBpbGVyKCk7DQorCQlpZiAoY29t
cGlsZXIgPT0gbnVsbCkgew0KKwkJCVN5c3RlbS5vdXQucHJpbnRsbigiTm8gc3lzdGVtIGphdmEg
Y29tcGlsZXIgYXZhaWxhYmxlIik7DQorCQkJcmV0dXJuOw0KKwkJfQ0KIAkJaW50ZXJuYWxUZXN0
KGNvbXBpbGVyLCBFTEVNRU5UUFJPQyk7DQogCX0NCiANCkBAIC02NCw2ICs2OCwxMCBAQA0KIAkg
Ki8NCiAJcHVibGljIHZvaWQgdGVzdFR5cGVNaXJyb3JXaXRoU3lzdGVtQ29tcGlsZXIoKSB0aHJv
d3MgSU9FeGNlcHRpb24gew0KIAkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gVG9vbFByb3ZpZGVy
LmdldFN5c3RlbUphdmFDb21waWxlcigpOw0KKwkJaWYgKGNvbXBpbGVyID09IG51bGwpIHsNCisJ
CQlTeXN0ZW0ub3V0LnByaW50bG4oIk5vIHN5c3RlbSBqYXZhIGNvbXBpbGVyIGF2YWlsYWJsZSIp
Ow0KKwkJCXJldHVybjsNCisJCX0NCiAJCWludGVybmFsVGVzdChjb21waWxlciwgVFlQRU1JUlJP
UlBST0MpOw0KIAl9DQogDQpAQCAtODIsNiArOTAsMTAgQEANCiAJICovDQogCXB1YmxpYyB2b2lk
IHRlc3RHZW5lcmljc1dpdGhTeXN0ZW1Db21waWxlcigpIHRocm93cyBJT0V4Y2VwdGlvbiB7DQog
CQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBUb29sUHJvdmlkZXIuZ2V0U3lzdGVtSmF2YUNvbXBp
bGVyKCk7DQorCQlpZiAoY29tcGlsZXIgPT0gbnVsbCkgew0KKwkJCVN5c3RlbS5vdXQucHJpbnRs
bigiTm8gc3lzdGVtIGphdmEgY29tcGlsZXIgYXZhaWxhYmxlIik7DQorCQkJcmV0dXJuOw0KKwkJ
fQ0KIAkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBHRU5FUklDU1BST0MpOw0KIAl9DQogDQpAQCAt
MTAwLDYgKzExMiwxMCBAQA0KIAkgKi8NCiAJcHVibGljIHZvaWQgdGVzdFZpc2l0b3JzV2l0aFN5
c3RlbUNvbXBpbGVyKCkgdGhyb3dzIElPRXhjZXB0aW9uIHsNCiAJCUphdmFDb21waWxlciBjb21w
aWxlciA9IFRvb2xQcm92aWRlci5nZXRTeXN0ZW1KYXZhQ29tcGlsZXIoKTsNCisJCWlmIChjb21w
aWxlciA9PSBudWxsKSB7DQorCQkJU3lzdGVtLm91dC5wcmludGxuKCJObyBzeXN0ZW0gamF2YSBj
b21waWxlciBhdmFpbGFibGUiKTsNCisJCQlyZXR1cm47DQorCQl9DQogCQlpbnRlcm5hbFRlc3Qo
Y29tcGlsZXIsIFZJU0lUT1JQUk9DKTsNCiAJfQ0KIA0KSW5kZXg6IHNyYy9vcmcvZWNsaXBzZS9q
ZHQvY29tcGlsZXIvYXB0L3Rlc3RzL01vZGVsVXRpbFRlc3RzLmphdmENCj09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NClJD
UyBmaWxlOiAvY3Zzcm9vdC9lY2xpcHNlL29yZy5lY2xpcHNlLmpkdC5jb21waWxlci5hcHQudGVz
dHMvc3JjL29yZy9lY2xpcHNlL2pkdC9jb21waWxlci9hcHQvdGVzdHMvTW9kZWxVdGlsVGVzdHMu
amF2YSx2DQpyZXRyaWV2aW5nIHJldmlzaW9uIDEuMw0KZGlmZiAtdSAtcjEuMyBNb2RlbFV0aWxU
ZXN0cy5qYXZhDQotLS0gc3JjL29yZy9lY2xpcHNlL2pkdC9jb21waWxlci9hcHQvdGVzdHMvTW9k
ZWxVdGlsVGVzdHMuamF2YQkxIEFwciAyMDA4IDE5OjI1OjI5IC0wMDAwCTEuMw0KKysrIHNyYy9v
cmcvZWNsaXBzZS9qZHQvY29tcGlsZXIvYXB0L3Rlc3RzL01vZGVsVXRpbFRlc3RzLmphdmEJMTUg
QXByIDIwMTEgMTc6NDc6MTcgLTAwMDANCkBAIC0xLDUgKzEsNSBAQA0KIC8qKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqDQotICogQ29weXJpZ2h0IChjKSAyMDA3LCAyMDA4IEJFQSBTeXN0ZW1zLCBJbmMu
DQorICogQ29weXJpZ2h0IChjKSAyMDA3LCAyMDExIEJFQSBTeXN0ZW1zLCBJbmMuDQogICogQWxs
IHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVy
aWFscw0KICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlw
c2UgUHVibGljIExpY2Vuc2UgdjEuMA0KICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJp
YnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0DQpAQCAtNyw2ICs3LDcgQEANCiAgKg0KICAqIENv
bnRyaWJ1dG9yczoNCiAgKiAgICB3aGFybGV5QGJlYS5jb20gLSBpbml0aWFsIEFQSSBhbmQgaW1w
bGVtZW50YXRpb24NCisgKiAgICBJQk0gQ29ycG9yYXRpb24gLSBmaXggZm9yIDM0MjkzNg0KICAq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqLw0KIA0KIHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmNvbXBp
bGVyLmFwdC50ZXN0czsNCkBAIC00Miw2ICs0MywxMCBAQA0KIAkgKi8NCiAJcHVibGljIHZvaWQg
dGVzdEVsZW1lbnRzV2l0aFN5c3RlbUNvbXBpbGVyKCkgdGhyb3dzIElPRXhjZXB0aW9uIHsNCiAJ
CUphdmFDb21waWxlciBjb21waWxlciA9IFRvb2xQcm92aWRlci5nZXRTeXN0ZW1KYXZhQ29tcGls
ZXIoKTsNCisJCWlmIChjb21waWxlciA9PSBudWxsKSB7DQorCQkJU3lzdGVtLm91dC5wcmludGxu
KCJObyBzeXN0ZW0gamF2YSBjb21waWxlciBhdmFpbGFibGUiKTsNCisJCQlyZXR1cm47DQorCQl9
DQogCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIEVMRU1FTlRVVElMU1BST0MpOw0KIAl9DQogDQpA
QCAtNjAsNiArNjUsMTAgQEANCiAJICovDQogCXB1YmxpYyB2b2lkIHRlc3RUeXBlc1dpdGhTeXN0
ZW1Db21waWxlcigpIHRocm93cyBJT0V4Y2VwdGlvbiB7DQogCQlKYXZhQ29tcGlsZXIgY29tcGls
ZXIgPSBUb29sUHJvdmlkZXIuZ2V0U3lzdGVtSmF2YUNvbXBpbGVyKCk7DQorCQlpZiAoY29tcGls
ZXIgPT0gbnVsbCkgew0KKwkJCVN5c3RlbS5vdXQucHJpbnRsbigiTm8gc3lzdGVtIGphdmEgY29t
cGlsZXIgYXZhaWxhYmxlIik7DQorCQkJcmV0dXJuOw0KKwkJfQ0KIAkJaW50ZXJuYWxUZXN0KGNv
bXBpbGVyLCBUWVBFVVRJTFNQUk9DKTsNCiAJfQ0KIA0KSW5kZXg6IHNyYy9vcmcvZWNsaXBzZS9q
ZHQvY29tcGlsZXIvYXB0L3Rlc3RzL05lZ2F0aXZlVGVzdHMuamF2YQ0KPT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KUkNT
IGZpbGU6IC9jdnNyb290L2VjbGlwc2Uvb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLmFwdC50ZXN0
cy9zcmMvb3JnL2VjbGlwc2UvamR0L2NvbXBpbGVyL2FwdC90ZXN0cy9OZWdhdGl2ZVRlc3RzLmph
dmEsdg0KcmV0cmlldmluZyByZXZpc2lvbiAxLjEwDQpkaWZmIC11IC1yMS4xMCBOZWdhdGl2ZVRl
c3RzLmphdmENCi0tLSBzcmMvb3JnL2VjbGlwc2UvamR0L2NvbXBpbGVyL2FwdC90ZXN0cy9OZWdh
dGl2ZVRlc3RzLmphdmEJMjEgQXVnIDIwMDkgMTg6MzQ6MzIgLTAwMDAJMS4xMA0KKysrIHNyYy9v
cmcvZWNsaXBzZS9qZHQvY29tcGlsZXIvYXB0L3Rlc3RzL05lZ2F0aXZlVGVzdHMuamF2YQkxNSBB
cHIgMjAxMSAxNzo0NzoxNyAtMDAwMA0KQEAgLTEsNSArMSw1IEBADQogLyoqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioNCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDcsIDIwMDkgQkVBIFN5c3RlbXMsIEluYy4N
CisgKiBDb3B5cmlnaHQgKGMpIDIwMDcsIDIwMTEgQkVBIFN5c3RlbXMsIEluYy4NCiAgKiBBbGwg
cmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJp
YWxzDQogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBz
ZSBQdWJsaWMgTGljZW5zZSB2MS4wDQogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmli
dXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQNCkBAIC03LDE4ICs3LDIwIEBADQogICoNCiAgKiBD
b250cmlidXRvcnM6DQogICogICAgd2hhcmxleUBiZWEuY29tIC0gaW5pdGlhbCBBUEkgYW5kIGlt
cGxlbWVudGF0aW9uDQorICogICAgSUJNIENvcnBvcmF0aW9uIC0gZml4IGZvciAzNDI5MzYNCiAg
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKi8NCiANCiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5jb21w
aWxlci5hcHQudGVzdHM7DQogDQogaW1wb3J0IGphdmEuaW8uRmlsZTsNCiBpbXBvcnQgamF2YS5p
by5JT0V4Y2VwdGlvbjsNCi1pbXBvcnQgamF2YS5pby5TdHJpbmdXcml0ZXI7DQogaW1wb3J0IGph
dmEudXRpbC5BcnJheUxpc3Q7DQogaW1wb3J0IGphdmEudXRpbC5Db2xsZWN0aW9uOw0KIGltcG9y
dCBqYXZhLnV0aWwuQ29sbGVjdGlvbnM7DQogaW1wb3J0IGphdmEudXRpbC5MaXN0Ow0KK2ltcG9y
dCBqYXZhLnV0aWwuU2V0Ow0KIA0KK2ltcG9ydCBqYXZheC5sYW5nLm1vZGVsLlNvdXJjZVZlcnNp
b247DQogaW1wb3J0IGphdmF4LnRvb2xzLkphdmFDb21waWxlcjsNCiBpbXBvcnQgamF2YXgudG9v
bHMuVG9vbFByb3ZpZGVyOw0KIA0KQEAgLTQ2LDcgKzQ4LDE1IEBADQogCSAqLw0KIAlwdWJsaWMg
dm9pZCB0ZXN0TmVnYXRpdmVNb2RlbFdpdGhTeXN0ZW1Db21waWxlcigpIHRocm93cyBJT0V4Y2Vw
dGlvbiB7DQogCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBUb29sUHJvdmlkZXIuZ2V0U3lzdGVt
SmF2YUNvbXBpbGVyKCk7DQotCQkNCisJCWlmIChjb21waWxlciA9PSBudWxsKSB7DQorCQkJU3lz
dGVtLm91dC5wcmludGxuKCJObyBzeXN0ZW0gamF2YSBjb21waWxlciBhdmFpbGFibGUiKTsNCisJ
CQlyZXR1cm47DQorCQl9DQorCQlTZXQ8U291cmNlVmVyc2lvbj4gc291cmNlVmVyc2lvbnMgPSBj
b21waWxlci5nZXRTb3VyY2VWZXJzaW9ucygpOw0KKwkJaWYgKHNvdXJjZVZlcnNpb25zLnNpemUo
KSA+IDQpIHsNCisJCQkvLyB0ZXN0IGZhaWwgb24gSkRLNw0KKwkJCXJldHVybjsNCisJCX0NCiAJ
CWludGVybmFsVGVzdE5lZ2F0aXZlTW9kZWwoY29tcGlsZXIsIDAsIENvbGxlY3Rpb25zLnNpbmds
ZXRvbkxpc3QoIi1BIiArIElHTk9SRUpBVkFDQlVHUykpOw0KIAl9DQogDQpAQCAtMTU1LDEwICsx
NjUsOCBAQA0KIAkJCW9wdGlvbnMuYWRkQWxsKGV4dHJhT3B0aW9ucyk7DQogDQogCQkvLyBJbnZv
a2UgcHJvY2Vzc2luZyBieSBjb21waWxpbmcgdGhlIHRhcmdldHMubW9kZWwgcmVzb3VyY2VzDQot
CQlTdHJpbmdXcml0ZXIgZXJyb3JzID0gbmV3IFN0cmluZ1dyaXRlcigpOw0KLQkJYm9vbGVhbiBz
dWNjZXNzID0gQmF0Y2hUZXN0VXRpbHMuY29tcGlsZVRyZWVXaXRoRXJyb3JzKGNvbXBpbGVyLCBv
cHRpb25zLCB0YXJnZXRGb2xkZXIsIGVycm9ycyk7DQorCQlib29sZWFuIHN1Y2Nlc3MgPSBCYXRj
aFRlc3RVdGlscy5jb21waWxlVHJlZVdpdGhFcnJvcnMoY29tcGlsZXIsIG9wdGlvbnMsIHRhcmdl
dEZvbGRlciwgbnVsbCk7DQogCQkNCi0JCWFzc2VydFRydWUoImVycm9ycyBzaG91bGQgbm90IGJl
IGVtcHR5IiwgZXJyb3JzLmdldEJ1ZmZlcigpLmxlbmd0aCgpICE9IDApOw0KIAkJYXNzZXJ0VHJ1
ZSgiQ29tcGlsYXRpb24gc2hvdWxkIGhhdmUgZmFpbGVkIGR1ZSB0byBleHBlY3RlZCBlcnJvcnMs
IGJ1dCBpdCBkaWRuJ3QiLCAhc3VjY2Vzcyk7DQogDQogCQkvLyBJZiBpdCBzdWNjZWVkZWQsIHRo
ZSBwcm9jZXNzb3Igd2lsbCBoYXZlIHNldCB0aGlzIHByb3BlcnR5IHRvICJzdWNjZWVkZWQiOw0K
I1Agb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLnRvb2wNCkluZGV4OiBzcmMvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL3Rvb2wvRWNsaXBzZUNvbXBpbGVySW1wbC5qYXZhDQo9PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09DQpSQ1MgZmlsZTogL2N2c3Jvb3QvZWNsaXBzZS9vcmcuZWNsaXBzZS5qZHQuY29tcGls
ZXIudG9vbC9zcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Rvb2wvRWNsaXBz
ZUNvbXBpbGVySW1wbC5qYXZhLHYNCnJldHJpZXZpbmcgcmV2aXNpb24gMS4xNA0KZGlmZiAtdSAt
cjEuMTQgRWNsaXBzZUNvbXBpbGVySW1wbC5qYXZhDQotLS0gc3JjL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci90b29sL0VjbGlwc2VDb21waWxlckltcGwuamF2YQkxMSBNYXkgMjAx
MCAxODo0ODowMSAtMDAwMAkxLjE0DQorKysgc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci90b29sL0VjbGlwc2VDb21waWxlckltcGwuamF2YQkxNSBBcHIgMjAxMSAxNzo0Nzox
OCAtMDAwMA0KQEAgLTEsMTIgKzEsMTMgQEANCiAvKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KLSAq
IENvcHlyaWdodCAoYykgMjAwNywgMjAxMCBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4NCisg
KiBDb3B5cmlnaHQgKGMpIDIwMDcsIDIwMTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuDQog
ICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5n
IG1hdGVyaWFscw0KICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhl
IEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMA0KICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMg
ZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0DQogICogaHR0cDovL3d3dy5lY2xpcHNl
Lm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwNCiAgKg0KICAqIENvbnRyaWJ1dG9yczoNCi0gKiAgICAg
SUJNIENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uDQorICogICAg
SUJNIENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uDQorICogICAg
SUJNIENvcnBvcmF0aW9uIC0gZml4IGZvciAzNDI5MzYNCiAgKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
Ki8NCiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci50b29sOw0KIA0K
QEAgLTE3LDYgKzE4LDcgQEANCiBpbXBvcnQgamF2YS5pby5QcmludFdyaXRlcjsNCiBpbXBvcnQg
amF2YS51dGlsLkFycmF5TGlzdDsNCiBpbXBvcnQgamF2YS51dGlsLkhhc2hNYXA7DQoraW1wb3J0
IGphdmEudXRpbC5JdGVyYXRvcjsNCiBpbXBvcnQgamF2YS51dGlsLkxvY2FsZTsNCiBpbXBvcnQg
amF2YS51dGlsLk1hcDsNCiANCkBAIC00MCw2ICs0Miw3IEBADQogaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5pbnRlcm5hbC5jb21waWxlci5iYXRjaC5NYWluOw0KIGltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIuYmF0Y2guRmlsZVN5c3RlbS5DbGFzc3BhdGg7DQogaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5wcm9ibGVtLkFib3J0Q29tcGlsYXRp
b25Vbml0Ow0KK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIucHJvYmxl
bS5EZWZhdWx0UHJvYmxlbTsNCiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBp
bGVyLnByb2JsZW0uRGVmYXVsdFByb2JsZW1GYWN0b3J5Ow0KIGltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIucHJvYmxlbS5Qcm9ibGVtU2V2ZXJpdGllczsNCiBpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLnV0aWwuTWVzc2FnZXM7DQpAQCAtNDgx
LDQgKzQ4NCw3NyBAQA0KIAkJCX0NCiAJCX0NCiAJfQ0KKwlAT3ZlcnJpZGUNCisJcHJvdGVjdGVk
IHZvaWQgbG9nZ2luZ0V4dHJhUHJvYmxlbXMoKSB7DQorCQlzdXBlci5sb2dnaW5nRXh0cmFQcm9i
bGVtcygpOw0KKwkJZm9yIChAU3VwcHJlc3NXYXJuaW5ncygicmF3dHlwZXMiKQ0KKwkJCUl0ZXJh
dG9yIGl0ZXJhdG9yID0gdGhpcy5leHRyYVByb2JsZW1zLml0ZXJhdG9yKCk7IGl0ZXJhdG9yLmhh
c05leHQoKTsgKSB7DQorCQkJZmluYWwgQ2F0ZWdvcml6ZWRQcm9ibGVtIHByb2JsZW0gPSAoQ2F0
ZWdvcml6ZWRQcm9ibGVtKSBpdGVyYXRvci5uZXh0KCk7DQorCQkJaWYgKHRoaXMuZGlhZ25vc3Rp
Y0xpc3RlbmVyICE9IG51bGwpIHsNCisJCQkJdGhpcy5kaWFnbm9zdGljTGlzdGVuZXIucmVwb3J0
KG5ldyBEaWFnbm9zdGljPEphdmFGaWxlT2JqZWN0PigpIHsNCisJCQkJCUBPdmVycmlkZQ0KKwkJ
CQkJcHVibGljIFN0cmluZyBnZXRDb2RlKCkgew0KKwkJCQkJCXJldHVybiBudWxsOw0KKwkJCQkJ
fQ0KKwkJCQkJQE92ZXJyaWRlDQorCQkJCQlwdWJsaWMgbG9uZyBnZXRDb2x1bW5OdW1iZXIoKSB7
DQorCQkJCQkJaWYgKHByb2JsZW0gaW5zdGFuY2VvZiBEZWZhdWx0UHJvYmxlbSkgew0KKwkJCQkJ
CQlyZXR1cm4gKChEZWZhdWx0UHJvYmxlbSkgcHJvYmxlbSkuY29sdW1uOw0KKwkJCQkJCX0NCisJ
CQkJCQlyZXR1cm4gRGlhZ25vc3RpYy5OT1BPUzsNCisJCQkJCX0NCisJCQkJCUBPdmVycmlkZQ0K
KwkJCQkJcHVibGljIGxvbmcgZ2V0RW5kUG9zaXRpb24oKSB7DQorCQkJCQkJaWYgKHByb2JsZW0g
aW5zdGFuY2VvZiBEZWZhdWx0UHJvYmxlbSkgew0KKwkJCQkJCQlyZXR1cm4gKChEZWZhdWx0UHJv
YmxlbSkgcHJvYmxlbSkuZ2V0U291cmNlRW5kKCk7DQorCQkJCQkJfQ0KKwkJCQkJCXJldHVybiBE
aWFnbm9zdGljLk5PUE9TOw0KKwkJCQkJfQ0KKwkJCQkJQE92ZXJyaWRlDQorCQkJCQlwdWJsaWMg
S2luZCBnZXRLaW5kKCkgew0KKwkJCQkJCWlmIChwcm9ibGVtLmlzRXJyb3IoKSkgew0KKwkJCQkJ
CQlyZXR1cm4gRGlhZ25vc3RpYy5LaW5kLkVSUk9SOw0KKwkJCQkJCX0NCisJCQkJCQlpZiAocHJv
YmxlbS5pc1dhcm5pbmcoKSkgew0KKwkJCQkJCQlyZXR1cm4gRGlhZ25vc3RpYy5LaW5kLldBUk5J
Tkc7DQorCQkJCQkJfQ0KKwkJCQkJCXJldHVybiBEaWFnbm9zdGljLktpbmQuT1RIRVI7DQorCQkJ
CQl9DQorCQkJCQlAT3ZlcnJpZGUNCisJCQkJCXB1YmxpYyBsb25nIGdldExpbmVOdW1iZXIoKSB7
DQorCQkJCQkJaWYgKHByb2JsZW0gaW5zdGFuY2VvZiBEZWZhdWx0UHJvYmxlbSkgew0KKwkJCQkJ
CQlyZXR1cm4gKChEZWZhdWx0UHJvYmxlbSkgcHJvYmxlbSkuZ2V0U291cmNlTGluZU51bWJlcigp
Ow0KKwkJCQkJCX0NCisJCQkJCQlyZXR1cm4gRGlhZ25vc3RpYy5OT1BPUzsNCisJCQkJCX0NCisJ
CQkJCUBPdmVycmlkZQ0KKwkJCQkJcHVibGljIFN0cmluZyBnZXRNZXNzYWdlKExvY2FsZSBsb2Nh
bGUpIHsNCisJCQkJCQlyZXR1cm4gcHJvYmxlbS5nZXRNZXNzYWdlKCk7DQorCQkJCQl9DQorCQkJ
CQlAT3ZlcnJpZGUNCisJCQkJCXB1YmxpYyBsb25nIGdldFBvc2l0aW9uKCkgew0KKwkJCQkJCWlm
IChwcm9ibGVtIGluc3RhbmNlb2YgRGVmYXVsdFByb2JsZW0pIHsNCisJCQkJCQkJcmV0dXJuICgo
RGVmYXVsdFByb2JsZW0pIHByb2JsZW0pLmdldFNvdXJjZVN0YXJ0KCk7DQorCQkJCQkJfQ0KKwkJ
CQkJCXJldHVybiBEaWFnbm9zdGljLk5PUE9TOw0KKwkJCQkJfQ0KKwkJCQkJQE92ZXJyaWRlDQor
CQkJCQlwdWJsaWMgSmF2YUZpbGVPYmplY3QgZ2V0U291cmNlKCkgew0KKwkJCQkJCWlmIChwcm9i
bGVtIGluc3RhbmNlb2YgRGVmYXVsdFByb2JsZW0pIHsNCisJCQkJCQkJRmlsZSBmID0gbmV3IEZp
bGUobmV3IFN0cmluZygoKERlZmF1bHRQcm9ibGVtKSBwcm9ibGVtKS5nZXRPcmlnaW5hdGluZ0Zp
bGVOYW1lKCkpKTsNCisJCQkJCQkJaWYgKGYuZXhpc3RzKCkpIHsNCisJCQkJCQkJCXJldHVybiBu
ZXcgRWNsaXBzZUZpbGVPYmplY3QobnVsbCwgZi50b1VSSSgpLCBKYXZhRmlsZU9iamVjdC5LaW5k
LlNPVVJDRSwgbnVsbCk7DQorCQkJCQkJCX0NCisJCQkJCQkJcmV0dXJuIG51bGw7DQorCQkJCQkJ
fQ0KKwkJCQkJCXJldHVybiBudWxsOw0KKwkJCQkJfQ0KKwkJCQkJQE92ZXJyaWRlDQorCQkJCQlw
dWJsaWMgbG9uZyBnZXRTdGFydFBvc2l0aW9uKCkgew0KKwkJCQkJCXJldHVybiBnZXRQb3NpdGlv
bigpOw0KKwkJCQkJfQ0KKwkJCQl9KTsNCisJCQl9DQorCQl9DQorCX0NCiB9DQojUCBvcmcuZWNs
aXBzZS5qZHQuY29tcGlsZXIudG9vbC50ZXN0cw0KSW5kZXg6IHNyYy9vcmcvZWNsaXBzZS9qZHQv
Y29tcGlsZXIvdG9vbC90ZXN0cy9BYnN0cmFjdENvbXBpbGVyVG9vbFRlc3QuamF2YQ0KPT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PQ0KUkNTIGZpbGU6IC9jdnNyb290L2VjbGlwc2Uvb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVy
LnRvb2wudGVzdHMvc3JjL29yZy9lY2xpcHNlL2pkdC9jb21waWxlci90b29sL3Rlc3RzL0Fic3Ry
YWN0Q29tcGlsZXJUb29sVGVzdC5qYXZhLHYNCnJldHJpZXZpbmcgcmV2aXNpb24gMS4zDQpkaWZm
IC11IC1yMS4zIEFic3RyYWN0Q29tcGlsZXJUb29sVGVzdC5qYXZhDQotLS0gc3JjL29yZy9lY2xp
cHNlL2pkdC9jb21waWxlci90b29sL3Rlc3RzL0Fic3RyYWN0Q29tcGlsZXJUb29sVGVzdC5qYXZh
CTExIE1heSAyMDEwIDE4OjQ4OjMxIC0wMDAwCTEuMw0KKysrIHNyYy9vcmcvZWNsaXBzZS9qZHQv
Y29tcGlsZXIvdG9vbC90ZXN0cy9BYnN0cmFjdENvbXBpbGVyVG9vbFRlc3QuamF2YQkxNSBBcHIg
MjAxMSAxNzo0NzoxOCAtMDAwMA0KQEAgLTEsMTIgKzEsMTMgQEANCiAvKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKg0KLSAqIENvcHlyaWdodCAoYykgMjAwOCwgMjAxMCBJQk0gQ29ycG9yYXRpb24gYW5k
IG90aGVycy4NCisgKiBDb3B5cmlnaHQgKGMpIDIwMDgsIDIwMTEgSUJNIENvcnBvcmF0aW9uIGFu
ZCBvdGhlcnMuDQogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUg
YWNjb21wYW55aW5nIG1hdGVyaWFscw0KICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUg
dGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMA0KICAqIHdoaWNoIGFjY29t
cGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0DQogICogaHR0cDov
L3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwNCiAgKg0KICAqIENvbnRyaWJ1dG9y
czoNCi0gKiAgICAgSUJNIENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0
aW9uDQorICogICAgSUJNIENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0
aW9uDQorICogICAgSUJNIENvcnBvcmF0aW9uIC0gZml4IGZvciAzNDI5MzYNCiAgKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKi8NCiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5jb21waWxlci50b29sLnRl
c3RzOw0KIA0KQEAgLTk1LDcgKzk2LDcgQEANCiAJCUNvbXBpbGVySW52b2NhdGlvblRlc3RzQXJn
dW1lbnRzIGFyZ3VtZW50cyA9IChDb21waWxlckludm9jYXRpb25UZXN0c0FyZ3VtZW50cykgZXh0
cmFBcmd1bWVudHM7DQogCQlTdGFuZGFyZEphdmFGaWxlTWFuYWdlciBtYW5hZ2VyID0gYXJndW1l
bnRzLnN0YW5kYXJkSmF2YUZpbGVNYW5hZ2VyOw0KIAkJaWYgKG1hbmFnZXIgPT0gbnVsbCkgew0K
LQkJCW1hbmFnZXIgPSBKQVZBQ19DT01QSUxFUi5nZXRTdGFuZGFyZEZpbGVNYW5hZ2VyKG51bGws
IG51bGwsIG51bGwpOyAvLyB3aWxsIHBpY2sgZGVmYXVsdHMgdXANCisJCQltYW5hZ2VyID0gQ09N
UElMRVIuZ2V0U3RhbmRhcmRGaWxlTWFuYWdlcihudWxsLCBudWxsLCBudWxsKTsgLy8gd2lsbCBw
aWNrIGRlZmF1bHRzIHVwDQogCQl9DQogCQlMaXN0PEZpbGU+IGZpbGVzID0gbmV3IEFycmF5TGlz
dDxGaWxlPigpOw0KIAkJU3RyaW5nW10gZmlsZU5hbWVzID0gYXJndW1lbnRzLmZpbGVOYW1lczsN
CkluZGV4OiBzcmMvb3JnL2VjbGlwc2UvamR0L2NvbXBpbGVyL3Rvb2wvdGVzdHMvQ29tcGlsZXJJ
bnZvY2F0aW9uVGVzdHMuamF2YQ0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KUkNTIGZpbGU6IC9jdnNyb290L2VjbGlw
c2Uvb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLnRvb2wudGVzdHMvc3JjL29yZy9lY2xpcHNlL2pk
dC9jb21waWxlci90b29sL3Rlc3RzL0NvbXBpbGVySW52b2NhdGlvblRlc3RzLmphdmEsdg0KcmV0
cmlldmluZyByZXZpc2lvbiAxLjEyDQpkaWZmIC11IC1yMS4xMiBDb21waWxlckludm9jYXRpb25U
ZXN0cy5qYXZhDQotLS0gc3JjL29yZy9lY2xpcHNlL2pkdC9jb21waWxlci90b29sL3Rlc3RzL0Nv
bXBpbGVySW52b2NhdGlvblRlc3RzLmphdmEJMTEgTWF5IDIwMTAgMTg6NDg6MzEgLTAwMDAJMS4x
Mg0KKysrIHNyYy9vcmcvZWNsaXBzZS9qZHQvY29tcGlsZXIvdG9vbC90ZXN0cy9Db21waWxlcklu
dm9jYXRpb25UZXN0cy5qYXZhCTE1IEFwciAyMDExIDE3OjQ3OjE4IC0wMDAwDQpAQCAtMSwxMiAr
MSwxMyBAQA0KIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQotICogQ29weXJpZ2h0IChjKSAyMDA4
LCAyMDEwIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLg0KKyAqIENvcHlyaWdodCAoYykgMjAw
OCwgMjAxMSBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4NCiAgKiBBbGwgcmlnaHRzIHJlc2Vy
dmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzDQogICogYXJl
IG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGlj
ZW5zZSB2MS4wDQogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBp
cyBhdmFpbGFibGUgYXQNCiAgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAu
aHRtbA0KICAqDQogICogQ29udHJpYnV0b3JzOg0KLSAqICAgICBJQk0gQ29ycG9yYXRpb24gLSBp
bml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24NCisgKiAgICBJQk0gQ29ycG9yYXRpb24gLSBp
bml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24NCisgKiAgICBJQk0gQ29ycG9yYXRpb24gLSBm
aXggZm9yIDM0MjkzNg0KICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KIHBhY2thZ2Ugb3JnLmVj
bGlwc2UuamR0LmNvbXBpbGVyLnRvb2wudGVzdHM7DQogDQpAQCAtNDUsNyArNDYsNyBAQA0KIA0K
IHB1YmxpYyBjbGFzcyBDb21waWxlckludm9jYXRpb25UZXN0cyBleHRlbmRzIEFic3RyYWN0Q29t
cGlsZXJUb29sVGVzdCB7DQogCXN0YXRpYyB7DQotLy8JCVRFU1RTX05BTUVTID0gbmV3IFN0cmlu
Z1tdIHsgInRlc3QwMDAiIH07DQorLy8JCVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1tdIHsgInRl
c3QwMTlfc291cmNlcGF0aF93aXRob3V0X2Rlc3RpbmF0aW9uIiB9Ow0KIC8vCQlURVNUU19OVU1C
RVJTID0gbmV3IGludFtdIHsgNSB9Ow0KIC8vCQlURVNUU19SQU5HRSA9IG5ldyBpbnRbXSB7IDEs
IC0xIH07DQogCX0NCkBAIC0zMjUsNiArMzI2LDEwIEBADQogLy8gZXhwbG9yaW5nIC1kIC8gRmls
ZU1hbmFnZXIgaW50ZXJhY3Rpb24NCiAvLyAtZCBjaGFuZ2VzIENMQVNTX09VVFBVVCBsb2NhdGlv
bg0KIHB1YmxpYyB2b2lkIHRlc3QwMDJfZGFzaF9kX29wdGlvbigpIHsNCisJaWYgKEpBVkFDX0NP
TVBJTEVSID09IG51bGwpIHsNCisJCVN5c3RlbS5vdXQucHJpbnRsbigiTm8gc3lzdGVtIGphdmEg
Y29tcGlsZXIgYXZhaWxhYmxlIik7DQorCQlyZXR1cm47DQorCX0NCiAJU3RhbmRhcmRKYXZhRmls
ZU1hbmFnZXIgamF2YWNTdGFuZGFyZEphdmFGaWxlTWFuYWdlciA9ICBKQVZBQ19DT01QSUxFUi5n
ZXRTdGFuZGFyZEZpbGVNYW5hZ2VyKG51bGwsIG51bGwsIG51bGwpOyAvLyB3aWxsIHBpY2sgZGVm
YXVsdHMgdXANCiAJcnVuVGVzdCgNCiAJCXRydWUgLyogc2hvdWxkQ29tcGlsZU9LICovLA0KQEAg
LTM0OCw2ICszNTMsMTAgQEANCiAvLyBleHBsb3JpbmcgLWQgLyBGaWxlTWFuYWdlciBpbnRlcmFj
dGlvbg0KIC8vIC1kIGNoYW5nZXMgQ0xBU1NfT1VUUFVUIGxvY2F0aW9uIChPVVRQVVRfRElSIHN1
YmRpcmVjdG9yeSkNCiBwdWJsaWMgdm9pZCB0ZXN0MDAzX2Rhc2hfZF9vcHRpb24oKSB7DQorCWlm
IChKQVZBQ19DT01QSUxFUiA9PSBudWxsKSB7DQorCQlTeXN0ZW0ub3V0LnByaW50bG4oIk5vIHN5
c3RlbSBqYXZhIGNvbXBpbGVyIGF2YWlsYWJsZSIpOw0KKwkJcmV0dXJuOw0KKwl9DQogCVN0YW5k
YXJkSmF2YUZpbGVNYW5hZ2VyIGphdmFjU3RhbmRhcmRKYXZhRmlsZU1hbmFnZXIgPSAgSkFWQUNf
Q09NUElMRVIuZ2V0U3RhbmRhcmRGaWxlTWFuYWdlcihudWxsLCBudWxsLCBudWxsKTsgLy8gd2ls
bCBwaWNrIGRlZmF1bHRzIHVwDQogCVN0cmluZyBvdXRwdXREaXIgPSBPVVRQVVRfRElSICsgRmls
ZS5zZXBhcmF0b3IgKyAiYmluIjsNCiAJcnVuVGVzdCgNCkBAIC0zNzMsNiArMzgyLDEwIEBADQog
Ly8gZWNqIHVzZXMgdGhlIG91dHB1dCBsb2NhdGlvbiBmcm9tIHRoZSBqYXZhYyBzdGFuZGFyZCBK
YXZhIGZpbGUgbWFuYWdlciBpZiBpdA0KIC8vIGlzIHNldA0KIHB1YmxpYyB2b2lkIHRlc3QwMDRf
bm9fZGFzaF9kX29wdGlvbigpIHRocm93cyBJT0V4Y2VwdGlvbiB7DQorCWlmIChKQVZBQ19DT01Q
SUxFUiA9PSBudWxsKSB7DQorCQlTeXN0ZW0ub3V0LnByaW50bG4oIk5vIHN5c3RlbSBqYXZhIGNv
bXBpbGVyIGF2YWlsYWJsZSIpOw0KKwkJcmV0dXJuOw0KKwl9DQogCUZpbGUgYmluRGlyZWN0b3J5
ID0gbmV3IEZpbGUoT1VUUFVUX0RJUiArIEZpbGUuc2VwYXJhdG9yICsgImJpbiIpOw0KIAliaW5E
aXJlY3RvcnkubWtkaXIoKTsNCiAJU3RhbmRhcmRKYXZhRmlsZU1hbmFnZXIgamF2YWNTdGFuZGFy
ZEphdmFGaWxlTWFuYWdlciA9ICBKQVZBQ19DT01QSUxFUi5nZXRTdGFuZGFyZEZpbGVNYW5hZ2Vy
KG51bGwsIG51bGwsIG51bGwpOyAvLyB3aWxsIHBpY2sgZGVmYXVsdHMgdXANCkBAIC00MDEsNiAr
NDE0LDEwIEBADQogLy8gZWNqIGRvZXMgbm90IGNhbGwgc2V0TG9jYXRpb24gb24gc3RhbmRhcmQg
SmF2YSBmaWxlIG1hbmFnZXJzOyBpdCB1c2VzIA0KIC8vIGhhbmRsZU9wdGlvbiBpbnN0ZWFkOyBq
YXZhYyBkb2VzIHRoZSBzYW1lDQogcHVibGljIHZvaWQgdGVzdDAwNV9kYXNoX2Rfb3B0aW9uX2N1
c3RvbV9maWxlX21hbmFnZXIoKSB7DQorCWlmIChKQVZBQ19DT01QSUxFUiA9PSBudWxsKSB7DQor
CQlTeXN0ZW0ub3V0LnByaW50bG4oIk5vIHN5c3RlbSBqYXZhIGNvbXBpbGVyIGF2YWlsYWJsZSIp
Ow0KKwkJcmV0dXJuOw0KKwl9DQogCVN0YW5kYXJkSmF2YUZpbGVNYW5hZ2VyIGphdmFjSmF2YUZp
bGVNYW5hZ2VyID0gSkFWQUNfQ09NUElMRVIuZ2V0U3RhbmRhcmRGaWxlTWFuYWdlcihudWxsLCBu
dWxsLCBudWxsKTsNCiAJU2V0TG9jYXRpb25EZXRlY3RvciBjdXN0b21KYXZhRmlsZU1hbmFnZXIg
PQ0KIAkJbmV3IFNldExvY2F0aW9uRGV0ZWN0b3IoDQpAQCAtNDI1LDcgKzQ0Miw3IEBADQogCQl9
KTsNCiAJYXNzZXJ0RXF1YWxzKE9VVFBVVF9ESVIsIGN1c3RvbUphdmFGaWxlTWFuYWdlci5nZXRM
b2NhdGlvbihTdGFuZGFyZExvY2F0aW9uLkNMQVNTX09VVFBVVCkudG9TdHJpbmcoKSk7DQogCWFz
c2VydEZhbHNlKGN1c3RvbUphdmFGaWxlTWFuYWdlci5tYXRjaEZvdW5kKCkpOw0KLQlpZiAoUlVO
X0pBVkFDKSB7DQorCWlmIChSVU5fSkFWQUMgJiYgSkFWQUNfQ09NUElMRVIgIT0gbnVsbCkgew0K
IAkJY3VzdG9tSmF2YUZpbGVNYW5hZ2VyID0JbmV3IFNldExvY2F0aW9uRGV0ZWN0b3IoamF2YWNK
YXZhRmlsZU1hbmFnZXIsIA0KIAkJCQkJU3RhbmRhcmRMb2NhdGlvbi5DTEFTU19PVVRQVVQpOw0K
IAkJYXNzZXJ0VHJ1ZShKQVZBQ19DT01QSUxFUi5nZXRUYXNrKG51bGwsIGN1c3RvbUphdmFGaWxl
TWFuYWdlciwgbnVsbCwgDQpAQCAtNDM4LDYgKzQ1NSwxMCBAQA0KIC8vIGV4cGxvcmluZyAtZCAv
IEZpbGVNYW5hZ2VyIGludGVyYWN0aW9uDQogLy8gZWNqIGNhbGxzIGdldExvY2F0aW9uIG9uIGEg
bm9uLWphdmFjIHN0YW5kYXJkIEphdmEgZmlsZSBtYW5hZ2VyDQogcHVibGljIHZvaWQgdGVzdDAw
Nl9ub19kYXNoX2Rfb3B0aW9uX2N1c3RvbV9maWxlX21hbmFnZXIoKSB0aHJvd3MgSU9FeGNlcHRp
b24gew0KKwlpZiAoSkFWQUNfQ09NUElMRVIgPT0gbnVsbCkgew0KKwkJU3lzdGVtLm91dC5wcmlu
dGxuKCJObyBzeXN0ZW0gamF2YSBjb21waWxlciBhdmFpbGFibGUiKTsNCisJCXJldHVybjsNCisJ
fQ0KIAlGaWxlIGJpbkRpcmVjdG9yeSA9IG5ldyBGaWxlKE9VVFBVVF9ESVIgKyBGaWxlLnNlcGFy
YXRvciArICJiaW4iKTsNCiAJYmluRGlyZWN0b3J5Lm1rZGlycygpOw0KIAlHZXRMb2NhdGlvbkRl
dGVjdG9yIGN1c3RvbUphdmFGaWxlTWFuYWdlciA9DQpAQCAtNDc2LDcgKzQ5Nyw3IEBADQogCUl0
ZXJhdG9yPFN0cmluZz4gcmVtYWluaW5nID0gcmVtYWluaW5nQXNMaXN0Lml0ZXJhdG9yKCk7DQog
CWFzc2VydFRydWUoImRvZXMgbm90IHN1cHBvcnQgLWQgb3B0aW9uIiwgZWNqU3RhbmRhcmRKYXZh
RmlsZU1hbmFnZXIuaGFuZGxlT3B0aW9uKCItZCIsIHJlbWFpbmluZykpOw0KIAlhc3NlcnRFcXVh
bHMoInVuZXhwZWN0ZWQgY29uc3VtcHRpb24gcmF0ZSIsICJyZW1haW5kZXIiLCByZW1haW5pbmcu
bmV4dCgpKTsNCi0JaWYgKFJVTl9KQVZBQykgew0KKwlpZiAoUlVOX0pBVkFDICYmIEpBVkFDX0NP
TVBJTEVSICE9IG51bGwpIHsNCiAJCVN0YW5kYXJkSmF2YUZpbGVNYW5hZ2VyIGphdmFjU3RhbmRh
cmRKYXZhRmlsZU1hbmFnZXIgPSAgDQogCQkJVG9vbFByb3ZpZGVyLmdldFN5c3RlbUphdmFDb21w
aWxlcigpLmdldFN0YW5kYXJkRmlsZU1hbmFnZXIobnVsbCwgbnVsbCwgbnVsbCk7IC8vIHdpbGwg
cGljayBkZWZhdWx0cyB1cA0KIAkJcmVtYWluaW5nID0gcmVtYWluaW5nQXNMaXN0Lml0ZXJhdG9y
KCk7DQpAQCAtNTM2LDcgKzU1Nyw3IEBADQogCQlwYXNzZWQgPSBmYWxzZTsNCiAJfQ0KIAlhc3Nl
cnRGYWxzZSgiZG9lcyBub3QgY2F0Y2ggaW5hcHByb3ByaWF0ZSAtZW5jb2Rpbmcgb3B0aW9uIiwg
cGFzc2VkKTsNCi0JaWYgKFJVTl9KQVZBQykgew0KKwlpZiAoUlVOX0pBVkFDICYmIEpBVkFDX0NP
TVBJTEVSICE9IG51bGwpIHsNCiAJCS8vIHRoaXMgZmFpbHMsIHdoaWNoIG1heSBiZSBkZWVtZWQg
YXBwcm9wcmlhdGUgb3Igbm90OyBidXQgYXQgbGVhc3QNCiAJCS8vIHRlc3QgIzExIHNob3dzIHRo
YXQgdGhlIGJlaGF2aW9yIHRoYXQgY2FuIGJlIG9ic2VydmVkIGZyb20gdGhlIA0KIAkJLy8gb3V0
c2lkZSBpcyBpbmFwcHJvcHJpYXRlDQpAQCAtNTczLDcgKzU5NCw3IEBADQogCQlwYXNzZWQgPSBm
YWxzZTsNCiAJfQ0KIAlhc3NlcnRGYWxzZSgiZG9lcyBub3QgY2F0Y2ggaW5hcHByb3ByaWF0ZSAt
ZW5jb2Rpbmcgb3B0aW9uIiwgcGFzc2VkKTsNCi0JaWYgKFJVTl9KQVZBQykgew0KKwlpZiAoUlVO
X0pBVkFDICYmIEpBVkFDX0NPTVBJTEVSICE9IG51bGwpIHsNCiAJCS8vIGNvbXBhcmVkIHRvIHdo
YXQgdGhlIGNvbW1hbmQtbGluZSBqYXZhYyBkb2VzLCB0aGlzIGlzIGR1ZSB0byBiZSBhDQogCQkv
LyBidWcNCiAJCXBhc3NlZCA9IHRydWU7DQpAQCAtNTg0LDEzICs2MDUsMTcgQEANCiAJCX0gY2F0
Y2ggKFRocm93YWJsZSB0KSB7DQogCQkJcGFzc2VkID0gZmFsc2U7DQogCQl9DQotCQlhc3NlcnRG
YWxzZSgiZG9lcyBub3QgY2F0Y2ggaW5hcHByb3ByaWF0ZSAtZW5jb2Rpbmcgb3B0aW9uIiwgcGFz
c2VkKTsJCQ0KKwkJYXNzZXJ0RmFsc2UoImRvZXMgbm90IGNhdGNoIGluYXBwcm9wcmlhdGUgLWVu
Y29kaW5nIG9wdGlvbiIsIHBhc3NlZCk7DQogCX0NCiB9DQogLy8gaHR0cHM6Ly9idWdzLmVjbGlw
c2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTE4ODc5Ng0KIC8vIGZpbGVzIGFjY2VzcyBtdXN0
IGhhcHBlbiB0aHJvdWdoIHRoZSB1c2VyLXNwZWNpZmllZCBmaWxlIG1hbmFnZXINCiAvLyBzaW1w
bGVzdCBzb3VyY2UgcmVhZCBjYXNlDQogcHVibGljIHZvaWQgdGVzdDAxMl9maWxlc19hY2Nlc3Nf
cmVhZCgpIHRocm93cyBJT0V4Y2VwdGlvbiB7DQorCWlmIChKQVZBQ19DT01QSUxFUiA9PSBudWxs
KSB7DQorCQlTeXN0ZW0ub3V0LnByaW50bG4oIk5vIHN5c3RlbSBqYXZhIGNvbXBpbGVyIGF2YWls
YWJsZSIpOw0KKwkJcmV0dXJuOw0KKwl9DQogCUdldEphdmFGaWxlRm9ySW5wdXREZXRlY3RvciBj
dXN0b21KYXZhRmlsZU1hbmFnZXIgPQ0KIAkJbmV3IEdldEphdmFGaWxlRm9ySW5wdXREZXRlY3Rv
cigNCiAJCQkJSkFWQUNfQ09NUElMRVIuZ2V0U3RhbmRhcmRGaWxlTWFuYWdlcihudWxsIC8qIGRp
YWdub3N0aWNMaXN0ZW5lciAqLywgbnVsbCAvKiBsb2NhbGUgKi8sIG51bGwgLyogY2hhcnNldCAq
LykpOw0KQEAgLTYxMiw3ICs2MzcsNyBAQA0KIAkJCSJYLmNsYXNzIg0KIAkJfSk7DQogCWFzc2Vy
dFRydWUoY3VzdG9tSmF2YUZpbGVNYW5hZ2VyLm1hdGNoRm91bmQpOw0KLQlpZiAoUlVOX0pBVkFD
KSB7DQorCWlmIChSVU5fSkFWQUMgJiYgSkFWQUNfQ09NUElMRVIgIT0gbnVsbCkgew0KIAkJY3Vz
dG9tSmF2YUZpbGVNYW5hZ2VyLm1hdGNoRm91bmQgPSBmYWxzZTsNCiAJCWFzc2VydFRydWUoSkFW
QUNfQ09NUElMRVIuZ2V0VGFzayhudWxsLCBjdXN0b21KYXZhRmlsZU1hbmFnZXIsIG51bGwsIA0K
IAkJCQlBcnJheXMuYXNMaXN0KCItZCIsIE9VVFBVVF9ESVIpLCBudWxsLCANCkBAIC02MjUsOSAr
NjUwLDEzIEBADQogLy8gZmlsZXMgYWNjZXNzIG11c3QgaGFwcGVuIHRocm91Z2ggdGhlIHVzZXIt
c3BlY2lmaWVkIGZpbGUgbWFuYWdlcg0KIC8vIHNvdXJjZSBmaWxlIGFjY2Vzc2VkIHRocm91Z2gg
dGhlIHNvdXJjZXBhdGgNCiBwdWJsaWMgdm9pZCBfdGVzdDAxM19maWxlc19hY2Nlc3NfcmVhZCgp
IHRocm93cyBJT0V4Y2VwdGlvbiB7DQorCWlmIChKQVZBQ19DT01QSUxFUiA9PSBudWxsKSB7DQor
CQlTeXN0ZW0ub3V0LnByaW50bG4oIk5vIHN5c3RlbSBqYXZhIGNvbXBpbGVyIGF2YWlsYWJsZSIp
Ow0KKwkJcmV0dXJuOw0KKwl9DQogCUdldEphdmFGaWxlRm9ySW5wdXREZXRlY3RvciBjdXN0b21K
YXZhRmlsZU1hbmFnZXIgPQ0KIAkJbmV3IEdldEphdmFGaWxlRm9ySW5wdXREZXRlY3RvcigNCi0J
CQkJSkFWQUNfQ09NUElMRVIuZ2V0U3RhbmRhcmRGaWxlTWFuYWdlcihudWxsIC8qIGRpYWdub3N0
aWNMaXN0ZW5lciAqLywgbnVsbCAvKiBsb2NhbGUgKi8sIG51bGwgLyogY2hhcnNldCAqLyksDQor
CQkJCUNPTVBJTEVSLmdldFN0YW5kYXJkRmlsZU1hbmFnZXIobnVsbCAvKiBkaWFnbm9zdGljTGlz
dGVuZXIgKi8sIG51bGwgLyogbG9jYWxlICovLCBudWxsIC8qIGNoYXJzZXQgKi8pLA0KIAkJCQki
WS5qYXZhIiwgS2luZC5TT1VSQ0UpOw0KIAlMaXN0PFN0cmluZz4gb3B0aW9ucyA9IEFycmF5cy5h
c0xpc3QoDQogCQkJIi1kIiwgT1VUUFVUX0RJUiwgDQpAQCAtNjU0LDcgKzY4Myw3IEBADQogCQkJ
IlguY2xhc3MiDQogCQl9KTsNCiAJYXNzZXJ0VHJ1ZShjdXN0b21KYXZhRmlsZU1hbmFnZXIubWF0
Y2hGb3VuZCk7DQotCWlmIChSVU5fSkFWQUMpIHsNCisJaWYgKFJVTl9KQVZBQyAmJiBKQVZBQ19D
T01QSUxFUiAhPSBudWxsKSB7DQogCQljdXN0b21KYXZhRmlsZU1hbmFnZXIubWF0Y2hGb3VuZCA9
IGZhbHNlOw0KIAkJYXNzZXJ0VHJ1ZShKQVZBQ19DT01QSUxFUi5nZXRUYXNrKG51bGwsIGN1c3Rv
bUphdmFGaWxlTWFuYWdlciwgbnVsbCwgDQogCQkJCW9wdGlvbnMsIG51bGwsIA0KQEAgLTY2OSw3
ICs2OTgsNyBAQA0KIHB1YmxpYyB2b2lkIF90ZXN0MDE0X2ZpbGVzX2FjY2Vzc19yZWFkKCkgdGhy
b3dzIElPRXhjZXB0aW9uIHsNCiAJR2V0SmF2YUZpbGVGb3JJbnB1dERldGVjdG9yIGN1c3RvbUph
dmFGaWxlTWFuYWdlciA9DQogCQluZXcgR2V0SmF2YUZpbGVGb3JJbnB1dERldGVjdG9yKA0KLQkJ
CQlKQVZBQ19DT01QSUxFUi5nZXRTdGFuZGFyZEZpbGVNYW5hZ2VyKG51bGwgLyogZGlhZ25vc3Rp
Y0xpc3RlbmVyICovLCBudWxsIC8qIGxvY2FsZSAqLywgbnVsbCAvKiBjaGFyc2V0ICovKSwNCisJ
CQkJQ09NUElMRVIuZ2V0U3RhbmRhcmRGaWxlTWFuYWdlcihudWxsIC8qIGRpYWdub3N0aWNMaXN0
ZW5lciAqLywgbnVsbCAvKiBsb2NhbGUgKi8sIG51bGwgLyogY2hhcnNldCAqLyksDQogCQkJCSJZ
LmNsYXNzIiwgS2luZC5DTEFTUyk7DQogCUxpc3Q8U3RyaW5nPiBvcHRpb25zID0gQXJyYXlzLmFz
TGlzdCgNCiAJCQkiLWQiLCBPVVRQVVRfRElSLA0KQEAgLTcxMSw3ICs3NDAsNyBAQA0KIAkJCSJY
LmNsYXNzIg0KIAkJfSk7DQogCWFzc2VydFRydWUoY3VzdG9tSmF2YUZpbGVNYW5hZ2VyLm1hdGNo
Rm91bmQpOw0KLQlpZiAoUlVOX0pBVkFDKSB7DQorCWlmIChSVU5fSkFWQUMgJiYgSkFWQUNfQ09N
UElMRVIgIT0gbnVsbCkgew0KIAkJLy8gamF2YWMgbWVyZWx5IHRocm93cyBhbiBleGNlcHRpb24s
IHdoaWNoIGlzIGR1ZSB0byBiZSBhIGJ1ZyBvbiB0aGVpcg0KIAkJLy8gc2lkZQ0KIAkJY3VzdG9t
SmF2YUZpbGVNYW5hZ2VyLm1hdGNoRm91bmQgPSBmYWxzZTsNCkBAIC03MjgsNyArNzU3LDcgQEAN
CiBwdWJsaWMgdm9pZCB0ZXN0MDE1X2ZpbGVzX2FjY2Vzc193cml0ZSgpIHRocm93cyBJT0V4Y2Vw
dGlvbiB7DQogCUdldEphdmFGaWxlRm9yT3V0cHV0RGV0ZWN0b3IgY3VzdG9tSmF2YUZpbGVNYW5h
Z2VyID0NCiAJCW5ldyBHZXRKYXZhRmlsZUZvck91dHB1dERldGVjdG9yKA0KLQkJCQlKQVZBQ19D
T01QSUxFUi5nZXRTdGFuZGFyZEZpbGVNYW5hZ2VyKG51bGwgLyogZGlhZ25vc3RpY0xpc3RlbmVy
ICovLCBudWxsIC8qIGxvY2FsZSAqLywgbnVsbCAvKiBjaGFyc2V0ICovKSwNCisJCQkJQ09NUElM
RVIuZ2V0U3RhbmRhcmRGaWxlTWFuYWdlcihudWxsIC8qIGRpYWdub3N0aWNMaXN0ZW5lciAqLywg
bnVsbCAvKiBsb2NhbGUgKi8sIG51bGwgLyogY2hhcnNldCAqLyksDQogCQkJCSJYLmNsYXNzIik7
DQogCUxpc3Q8U3RyaW5nPiBvcHRpb25zID0gQXJyYXlzLmFzTGlzdCgiLWQiLCBPVVRQVVRfRElS
KTsNCiAJcnVuVGVzdCgNCkBAIC03NTAsNyArNzc5LDcgQEANCiAJCQkiWC5jbGFzcyINCiAJCX0p
Ow0KIAlhc3NlcnRUcnVlKGN1c3RvbUphdmFGaWxlTWFuYWdlci5tYXRjaEZvdW5kKTsNCi0JaWYg
KFJVTl9KQVZBQykgew0KKwlpZiAoUlVOX0pBVkFDICYmIEpBVkFDX0NPTVBJTEVSICE9IG51bGwp
IHsNCiAJCWN1c3RvbUphdmFGaWxlTWFuYWdlci5tYXRjaEZvdW5kID0gZmFsc2U7DQogCQlhc3Nl
cnRUcnVlKEpBVkFDX0NPTVBJTEVSLmdldFRhc2sobnVsbCwgY3VzdG9tSmF2YUZpbGVNYW5hZ2Vy
LCBudWxsLCANCiAJCQkJb3B0aW9ucywgbnVsbCwgDQpAQCAtNzY1LDcgKzc5NCw3IEBADQogcHVi
bGljIHZvaWQgdGVzdDAxNl9maWxlc19hY2Nlc3Nfd3JpdGUoKSB0aHJvd3MgSU9FeGNlcHRpb24g
ew0KIAlHZXRKYXZhRmlsZUZvck91dHB1dERldGVjdG9yIGN1c3RvbUphdmFGaWxlTWFuYWdlciA9
DQogCQluZXcgR2V0SmF2YUZpbGVGb3JPdXRwdXREZXRlY3RvcigNCi0JCQkJSkFWQUNfQ09NUElM
RVIuZ2V0U3RhbmRhcmRGaWxlTWFuYWdlcihudWxsIC8qIGRpYWdub3N0aWNMaXN0ZW5lciAqLywg
bnVsbCAvKiBsb2NhbGUgKi8sIG51bGwgLyogY2hhcnNldCAqLyksDQorCQkJCUNPTVBJTEVSLmdl
dFN0YW5kYXJkRmlsZU1hbmFnZXIobnVsbCAvKiBkaWFnbm9zdGljTGlzdGVuZXIgKi8sIG51bGwg
LyogbG9jYWxlICovLCBudWxsIC8qIGNoYXJzZXQgKi8pLA0KIAkJCQkiWS5jbGFzcyIpOw0KIAlM
aXN0PFN0cmluZz4gb3B0aW9ucyA9IEFycmF5cy5hc0xpc3QoDQogCQkJIi1zb3VyY2VwYXRoIiwg
T1VUUFVUX0RJUiArIEZpbGUuc2VwYXJhdG9yICsgInNyYzIiKTsNCkBAIC03OTIsNyArODIxLDcg
QEANCiAJCQkic3JjL1guY2xhc3MiDQogCQl9KTsNCiAJYXNzZXJ0VHJ1ZShjdXN0b21KYXZhRmls
ZU1hbmFnZXIubWF0Y2hGb3VuZCk7DQotCWlmIChSVU5fSkFWQUMpIHsNCisJaWYgKFJVTl9KQVZB
QyAmJiBKQVZBQ19DT01QSUxFUiAhPSBudWxsKSB7DQogCQljdXN0b21KYXZhRmlsZU1hbmFnZXIu
bWF0Y2hGb3VuZCA9IGZhbHNlOw0KIAkJYXNzZXJ0VHJ1ZShKQVZBQ19DT01QSUxFUi5nZXRUYXNr
KG51bGwsIGN1c3RvbUphdmFGaWxlTWFuYWdlciwgbnVsbCwgDQogCQkJCW9wdGlvbnMsIG51bGws
IA0KQEAgLTg1OSw4ICs4ODgsMTYgQEANCiB9DQogLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3Jn
L2J1Z3Mvc2hvd19idWcuY2dpP2lkPTIyNzU4Mw0KIHB1YmxpYyB2b2lkIHRlc3QwMTlfc291cmNl
cGF0aF93aXRob3V0X2Rlc3RpbmF0aW9uKCkgdGhyb3dzIElPRXhjZXB0aW9uIHsNCisJU3RyaW5n
IHNvdXJjZURpcmVjdG9yeU5hbWUgPSBPVVRQVVRfRElSICsgIi9zcmMyIjsNCisJRmlsZSBzb3Vy
Y2VGb2xkZXIgPSBuZXcgRmlsZShzb3VyY2VEaXJlY3RvcnlOYW1lKTsNCisJaWYgKCFzb3VyY2VG
b2xkZXIuZXhpc3RzKCkpIHsNCisJCWlmICghc291cmNlRm9sZGVyLm1rZGlycygpKSB7DQorCQkJ
Ly8gc291cmNlIGZvbGRlciBjb3VsZCBub3QgYmUgYnVpbHQNCisJCQlyZXR1cm47DQorCQl9DQor
CX0NCiAJU3RhbmRhcmRKYXZhRmlsZU1hbmFnZXIgZWNqU3RhbmRhcmRKYXZhRmlsZU1hbmFnZXIg
PQ0KLQkJSkFWQUNfQ09NUElMRVIuZ2V0U3RhbmRhcmRGaWxlTWFuYWdlcihudWxsIC8qIGRpYWdu
b3N0aWNMaXN0ZW5lciAqLywgbnVsbCAvKiBsb2NhbGUgKi8sIG51bGwgLyogY2hhcnNldCAqLyk7
DQorCQlDT01QSUxFUi5nZXRTdGFuZGFyZEZpbGVNYW5hZ2VyKG51bGwgLyogZGlhZ25vc3RpY0xp
c3RlbmVyICovLCBudWxsIC8qIGxvY2FsZSAqLywgbnVsbCAvKiBjaGFyc2V0ICovKTsNCiAJYXNz
ZXJ0VHJ1ZShlY2pTdGFuZGFyZEphdmFGaWxlTWFuYWdlci5oYW5kbGVPcHRpb24oDQogCQkJIi1z
b3VyY2VwYXRoIiwgDQogCQkJQXJyYXlzLmFzTGlzdChPVVRQVVRfRElSICsgIi9zcmMyIikuaXRl
cmF0b3IoKSkpOw0KQEAgLTg5MCw3ICs5MjcsNyBAQA0KIC8vIGh0dHBzOi8vYnVncy5lY2xpcHNl
Lm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0yMjc1ODMNCiBwdWJsaWMgdm9pZCBfdGVzdDAyMF9z
b3VyY2VwYXRoX3dpdGhfZGVzdGluYXRpb24oKSB0aHJvd3MgSU9FeGNlcHRpb24gew0KIAlTdGFu
ZGFyZEphdmFGaWxlTWFuYWdlciBlY2pTdGFuZGFyZEphdmFGaWxlTWFuYWdlciA9DQotCQlKQVZB
Q19DT01QSUxFUi5nZXRTdGFuZGFyZEZpbGVNYW5hZ2VyKG51bGwgLyogZGlhZ25vc3RpY0xpc3Rl
bmVyICovLCBudWxsIC8qIGxvY2FsZSAqLywgbnVsbCAvKiBjaGFyc2V0ICovKTsNCisJCUNPTVBJ
TEVSLmdldFN0YW5kYXJkRmlsZU1hbmFnZXIobnVsbCAvKiBkaWFnbm9zdGljTGlzdGVuZXIgKi8s
IG51bGwgLyogbG9jYWxlICovLCBudWxsIC8qIGNoYXJzZXQgKi8pOw0KIAlhc3NlcnRUcnVlKGVj
alN0YW5kYXJkSmF2YUZpbGVNYW5hZ2VyLmhhbmRsZU9wdGlvbigNCiAJCQkiLXNvdXJjZXBhdGgi
LCANCiAJCQlBcnJheXMuYXNMaXN0KCJcIiIgKyBPVVRQVVRfRElSICsgIi9zcmMyXCJbLWQgXCIi
ICsgT1VUUFVUX0RJUiArICIvYmluMlwiXSIpLml0ZXJhdG9yKCkpKTsNCkBAIC05MjQsNyArOTYx
LDcgQEANCiAJCQllcnJCdWZmZXIgPSBuZXcgQnl0ZUFycmF5T3V0cHV0U3RyZWFtKCk7DQogCUNv
bXBpbGF0aW9uVGFzayB0YXNrID0gQ09NUElMRVIuZ2V0VGFzaygNCiAJCW5ldyBQcmludFdyaXRl
cihvdXRCdWZmZXIpLCANCi0JCUpBVkFDX0NPTVBJTEVSLmdldFN0YW5kYXJkRmlsZU1hbmFnZXIo
bnVsbCAvKiBkaWFnbm9zdGljTGlzdGVuZXIgKi8sIG51bGwgLyogbG9jYWxlICovLCBudWxsIC8q
IGNoYXJzZXQgKi8pLCANCisJCUNPTVBJTEVSLmdldFN0YW5kYXJkRmlsZU1hbmFnZXIobnVsbCAv
KiBkaWFnbm9zdGljTGlzdGVuZXIgKi8sIG51bGwgLyogbG9jYWxlICovLCBudWxsIC8qIGNoYXJz
ZXQgKi8pLCANCiAJCW5ldyBDb21waWxlckludm9jYXRpb25EaWFnbm9zdGljTGlzdGVuZXIobmV3
IFByaW50V3JpdGVyKGVyckJ1ZmZlcikpLCANCiAJCUFycmF5cy5hc0xpc3QoIi12IiksIG51bGws
IG51bGwpOw0KIAlhc3NlcnRUcnVlKHRhc2suY2FsbCgpKTsNCkBAIC05NTMsNyArOTkwLDcgQEAN
CiAJU3lzdGVtLnNldEVycihuZXcgUHJpbnRTdHJlYW0oZXJyQnVmZmVyKSk7DQogCUNvbXBpbGF0
aW9uVGFzayB0YXNrID0gQ09NUElMRVIuZ2V0VGFzaygNCiAJCQludWxsLCANCi0JCQlKQVZBQ19D
T01QSUxFUi5nZXRTdGFuZGFyZEZpbGVNYW5hZ2VyKG51bGwgLyogZGlhZ25vc3RpY0xpc3RlbmVy
ICovLCBudWxsIC8qIGxvY2FsZSAqLywgbnVsbCAvKiBjaGFyc2V0ICovKSwgDQorCQkJQ09NUElM
RVIuZ2V0U3RhbmRhcmRGaWxlTWFuYWdlcihudWxsIC8qIGRpYWdub3N0aWNMaXN0ZW5lciAqLywg
bnVsbCAvKiBsb2NhbGUgKi8sIG51bGwgLyogY2hhcnNldCAqLyksIA0KIAkJCW5ldyBDb21waWxl
ckludm9jYXRpb25EaWFnbm9zdGljTGlzdGVuZXIobmV3IFByaW50V3JpdGVyKGVyckJ1ZmZlcikp
LCANCiAJCQlBcnJheXMuYXNMaXN0KCItdiIpLCBudWxsLCBudWxsKTsNCiAJdHJ5IHsNCiNQIG9y
Zy5lY2xpcHNlLmpkdC5jb3JlDQpJbmRleDogYmF0Y2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2JhdGNoL01haW4uamF2YQ0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KUkNTIGZpbGU6IC9jdnNyb290
L2VjbGlwc2Uvb3JnLmVjbGlwc2UuamR0LmNvcmUvYmF0Y2gvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2JhdGNoL01haW4uamF2YSx2DQpyZXRyaWV2aW5nIHJldmlzaW9uIDEuMzYy
DQpkaWZmIC11IC1yMS4zNjIgTWFpbi5qYXZhDQotLS0gYmF0Y2gvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2JhdGNoL01haW4uamF2YQkyIE1hciAyMDExIDE0OjI5OjA3IC0wMDAw
CTEuMzYyDQorKysgYmF0Y2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2JhdGNo
L01haW4uamF2YQkxNSBBcHIgMjAxMSAxNzo0NzoxOSAtMDAwMA0KQEAgLTEzMjgsNyArMTMyOCw3
IEBADQogDQogCXByaXZhdGUgUHJpbnRXcml0ZXIgZXJyOw0KIA0KLQlBcnJheUxpc3QgZXh0cmFQ
cm9ibGVtczsNCisJcHJvdGVjdGVkIEFycmF5TGlzdCBleHRyYVByb2JsZW1zOw0KIAlwdWJsaWMg
ZmluYWwgc3RhdGljIFN0cmluZyBidW5kbGVOYW1lID0gIm9yZy5lY2xpcHNlLmpkdC5pbnRlcm5h
bC5jb21waWxlci5iYXRjaC5tZXNzYWdlcyI7IC8vJE5PTi1OTFMtMSQNCiAJLy8gdHdvIHVzZXM6
IHJlY29nbml6ZSAnbm9uZScgaW4gb3B0aW9uczsgY29kZSB0aGUgc2luZ2xldG9uIG5vbmUNCiAJ
Ly8gZm9yIHRoZSAnLWQgbm9uZScgb3B0aW9uICh3aGVyZXZlciBpdCBtYXkgYmUgZm91bmQpDQpA
QCAtMzc0MCw3ICszNzQwLDcgQEANCiAJfQ0KIA0KIAlpZiAodGhpcy5leHRyYVByb2JsZW1zICE9
IG51bGwpIHsNCi0JCXRoaXMubG9nZ2VyLmxvZ2dpbmdFeHRyYVByb2JsZW1zKHRoaXMpOw0KKwkJ
bG9nZ2luZ0V4dHJhUHJvYmxlbXMoKTsNCiAJCXRoaXMuZXh0cmFQcm9ibGVtcyA9IG51bGw7DQog
CX0NCiAJaWYgKHRoaXMuY29tcGlsZXJTdGF0cyAhPSBudWxsKSB7DQpAQCAtMzc1MSw2ICszNzUx
LDkgQEANCiAJLy8gY2xlYW51cA0KIAllbnZpcm9ubWVudC5jbGVhbnVwKCk7DQogfQ0KK3Byb3Rl
Y3RlZCB2b2lkIGxvZ2dpbmdFeHRyYVByb2JsZW1zKCkgew0KKwl0aGlzLmxvZ2dlci5sb2dnaW5n
RXh0cmFQcm9ibGVtcyh0aGlzKTsNCit9DQogcHVibGljIHZvaWQgcHJpbnRVc2FnZSgpIHsNCiAJ
cHJpbnRVc2FnZSgibWlzYy51c2FnZSIpOyAvLyROT04tTkxTLTEkDQogfQ0KSW5kZXg6IGNvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL0RlZmF1bHRQcm9i
bGVtLmphdmENCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT0NClJDUyBmaWxlOiAvY3Zzcm9vdC9lY2xpcHNlL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9w
cm9ibGVtL0RlZmF1bHRQcm9ibGVtLmphdmEsdg0KcmV0cmlldmluZyByZXZpc2lvbiAxLjUxDQpk
aWZmIC11IC1yMS41MSBEZWZhdWx0UHJvYmxlbS5qYXZhDQotLS0gY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vRGVmYXVsdFByb2JsZW0uamF2YQk3IE1h
ciAyMDA5IDAxOjA4OjEwIC0wMDAwCTEuNTENCisrKyBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9EZWZhdWx0UHJvYmxlbS5qYXZhCTE1IEFwciAyMDEx
IDE3OjQ3OjE5IC0wMDAwDQpAQCAtMSw1ICsxLDUgQEANCiAvKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
Kg0KLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAwOSBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVy
cy4NCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhl
cnMuDQogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21w
YW55aW5nIG1hdGVyaWFscw0KICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMg
b2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMA0KICAqIHdoaWNoIGFjY29tcGFuaWVz
IHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0DQpAQCAtMTgsNyArMTgsMTAg
QEANCiBwdWJsaWMgY2xhc3MgRGVmYXVsdFByb2JsZW0gZXh0ZW5kcyBDYXRlZ29yaXplZFByb2Js
ZW0gew0KIAlwcml2YXRlIGNoYXJbXSBmaWxlTmFtZTsNCiAJcHJpdmF0ZSBpbnQgaWQ7DQotCXBy
aXZhdGUgaW50IHN0YXJ0UG9zaXRpb24sIGVuZFBvc2l0aW9uLCBsaW5lLCBjb2x1bW47DQorCXBy
aXZhdGUgaW50IHN0YXJ0UG9zaXRpb247DQorCXByaXZhdGUgaW50IGVuZFBvc2l0aW9uOw0KKwlw
cml2YXRlIGludCBsaW5lOw0KKwlwdWJsaWMgaW50IGNvbHVtbjsNCiAJcHJpdmF0ZSBpbnQgc2V2
ZXJpdHk7DQogCXByaXZhdGUgU3RyaW5nW10gYXJndW1lbnRzOw0KIAlwcml2YXRlIFN0cmluZyBt
ZXNzYWdlOw0K
</data>

          </attachment>
      

    </bug>

</bugzilla>