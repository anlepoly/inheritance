<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>425152</bug_id>
          
          <creation_ts>2014-01-09 00:48:00 -0500</creation_ts>
          <short_desc>[1.8] [compiler] Lambda Expression not resolved but flow analyzed leading to NPE.</short_desc>
          <delta_ts>2014-03-06 21:17:07 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>424053</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Jay Arthanareeswaran">jarthana</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>noopur_gupta</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2347250</commentid>
    <comment_count>0</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-01-09 00:48:48 -0500</bug_when>
    <thetext>This code results in an NPE:

interface Base { 
	Base get(int x);
}
class Main {
    &lt;T&gt; Base foo(Base b) { 
        return null; 
     }
    void bar(Base b) { }
    void testCase() {
        bar(foo((int p)-&gt;null));
     }
}

And the stack trace:
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.analyseCode(LambdaExpression.java:393)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode(MessageSend.java:162)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode(MessageSend.java:162)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.analyseCode(MethodDeclaration.java:128)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.internalAnalyseCode(TypeDeclaration.java:741)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2347255</commentid>
    <comment_count>1</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-01-09 01:26:30 -0500</bug_when>
    <thetext>Note that just removing the type parameter &lt;T&gt; makes the program compile and run.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2347264</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-09 02:20:30 -0500</bug_when>
    <thetext>Thanks, I&apos;ll take a look.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2347266</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-09 02:34:17 -0500</bug_when>
    <thetext>I don&apos;t see eventual resolution happening on the lambda at all. Stephan, thanks
for taking a look, this should be simple I think.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2347269</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-09 02:43:34 -0500</bug_when>
    <thetext>Disabled test available here, will need some massaging: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=f7c2ed5ecce3841921f761b0b104d350042f786e</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2347418</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-09 07:53:22 -0500</bug_when>
    <thetext>Yep, that wasn&apos;t too hard, the old flag polyExpressionSeen simply missed the case of a non-poly invocation that still used inference -&gt; inference still needs to get a chance to finish and update bindings.

Release via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=55b8138a08d89b11e13e7b2e4131608d674ff549</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2353478</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-23 08:12:47 -0500</bug_when>
    <thetext>From: https://bugs.eclipse.org/bugs/show_bug.cgi?id=423429#c7:

package packDown;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;

public class SorterNew {
	void sort() {
		Collections.sort(new ArrayList&lt;Person&gt;(),
				Comparator.comparing((Person p) -&gt; p.getName()));
	}
}

class Person {
	public String getName() {
		return &quot;p&quot;;
	}
}
----------------------------------------------------------------
Getting the following exception on editing the above code:

java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.analyseCode(LambdaExpression.java:447)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode(MessageSend.java:167)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode(MessageSend.java:167)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.analyseCode(MethodDeclaration.java:128)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.internalAnalyseCode(TypeDeclaration.java:741)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode(TypeDeclaration.java:265)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.analyseCode(CompilationUnitDeclaration.java:119)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:923)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:965)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:204</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2353808</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-23 14:54:37 -0500</bug_when>
    <thetext>Same stack, same symptom, but different root cause.

In the case of comment 6 we didn&apos;t finish resolving, because we didnt&apos; find the type variable instantiation, which in turned happened, because we mixed single and double-level type variables. What do I mean by that:

A generic method in a generic class has two sets for type variables. Hence a ParameterizedGenericMethodBinding is created as a wrapper for a ParameterizedMethodBinding as a wrapper for a MethodBinding.

When inference acts on the type variables of the middle PMB (receiver type is parameterized, but method type variables still need to be inferred) we create inference variables for these type variables.

Later, when we retrieve the solution we used method.original() on the PGMB to get to the type variables. Unfortunately, original() works recursively, so instead of getting to the middle PMB we get straight to the bottom MB.

Fixed by a new method MB.shallowOriginal().

Released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=c4203edb27100ace82d961d9cf1385c837279276</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372646</commentid>
    <comment_count>8</comment_count>
    <who name="Noopur Gupta">noopur_gupta</who>
    <bug_when>2014-03-06 14:57:18 -0500</bug_when>
    <thetext>Encountered similar exception again:
--------------------------------------------
package bug;
interface I1 { int foo(String i); }
class Y {
	I1 i = (a) -&gt; { 
		a.charAt(0);
	};
}
--------------------------------------------

Place caret at end of &quot;String&quot; and press Backspace to delete &apos;g&apos;.
We get this exception:

java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode(MessageSend.java:123)
	at org.eclipse.jdt.internal.compiler.ast.Block.analyseCode(Block.java:52)
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.analyseCode(LambdaExpression.java:485)
	at org.eclipse.jdt.internal.compiler.ast.FieldDeclaration.analyseCode(FieldDeclaration.java:91)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.internalAnalyseCode(TypeDeclaration.java:703)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode(TypeDeclaration.java:265)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.analyseCode(CompilationUnitDeclaration.java:122)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:1211)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:693)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1187)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:813)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:548)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:541)
...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372660</commentid>
    <comment_count>9</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-06 15:13:42 -0500</bug_when>
    <thetext>Noopur, please open a fresh defect. Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372742</commentid>
    <comment_count>10</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-06 21:16:39 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #9)
&gt; Noopur, please open a fresh defect. Thanks.

https://bugs.eclipse.org/bugs/show_bug.cgi?id=429833</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372743</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-06 21:17:07 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #10)
&gt; (In reply to Srikanth Sankaran from comment #9)
&gt; &gt; Noopur, please open a fresh defect. Thanks.
&gt; 
&gt; https://bugs.eclipse.org/bugs/show_bug.cgi?id=429833

(this has a totally different root cause BTW)</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>