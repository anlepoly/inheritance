<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>329156</bug_id>
          
          <creation_ts>2010-10-31 05:42:00 -0400</creation_ts>
          <short_desc>[compiler][APT] Source generated in last round not compiled</short_desc>
          <delta_ts>2010-12-07 09:41:30 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.7</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>3.7 M4</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Holger Jaekel">holger.jaekel</reporter>
          <assigned_to name="Olivier Thomann">Olivier_Thomann</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>eclipse</cc>
    
    <cc>jarthana</cc>
    
    <cc>Olivier_Thomann</cc>
          
          <votes>0</votes>

      

      

      <flag name="pmc_approved"
          id="37222"
          type_id="2"
          status="-"
          setter="daniel_megert"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1835673</commentid>
    <comment_count>0</comment_count>
    <who name="Holger Jaekel">holger.jaekel</who>
    <bug_when>2010-10-31 05:42:11 -0400</bug_when>
    <thetext>Build Identifier: 20100917-0705

Source that is generated in the last round (when RoundEnvironment.processingOver()==true) is not compiled. 

The annotation processor writes the .java files to .apt_generated, but the corresponding .class files are not created. 


Reproducible: Always

Steps to Reproduce:
Use a annotation processor like:

@Override
public boolean process(final Set&lt;? extends TypeElement&gt; annotations, final RoundEnvironment roundEnvironment) {
	if( roundEnvironment.processingOver()) {
		writeSourcefile();
	}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1841906</commentid>
    <comment_count>1</comment_count>
    <who name="Walter Harley">eclipse</who>
    <bug_when>2010-11-13 18:41:49 -0500</bug_when>
    <thetext>That is correct behavior as per the APT spec.  You should not generate any new sources in the final round.  It is okay to generate non-source resources, such as XML files, that are not compiled.

The final round is there basically in order to support generation of compound or summary resources, such as deployment descriptors.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1841962</commentid>
    <comment_count>2</comment_count>
    <who name="Holger Jaekel">holger.jaekel</who>
    <bug_when>2010-11-14 17:24:00 -0500</bug_when>
    <thetext>The documentation of javac says:

&quot;After a round occurs where no new source files are generated, the annotation processors will be invoked one last time, to give them a chance to complete any work they may need to do. Finally, unless the -proc:only option is used, the compiler will compile the original and all the generated source files.&quot;

(from http://download.oracle.com/javase/6/docs/technotes/tools/solaris/javac.html#processing )

In my eyes, the term &quot;any work&quot; includes generating new source files. The compilation process starts _after_ the last round of annotation processing is finished. Furthermore, the annotation processing API does not restrict the type of files generated in the last round.

I found http://bugs.sun.com/view_bug.do?bug_id=6634138 which describes the same problem as discussed here. This bug was accepted and fixed for the javac, so I suppose that compiling generated source files from all rounds is the correct behaviour.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1841972</commentid>
    <comment_count>3</comment_count>
    <who name="Walter Harley">eclipse</who>
    <bug_when>2010-11-14 20:06:33 -0500</bug_when>
    <thetext>I&apos;ve always taken &quot;After a round where no new source files are generated&quot; to mean that you shouldn&apos;t be generating more new source files after that; I think that was the intention of the group working on JSR269.  But you&apos;re right, it doesn&apos;t explicitly say that you can&apos;t generate new source files in the final round; so if javac is doing that I guess we will need to as well.

Reopening.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1841973</commentid>
    <comment_count>4</comment_count>
    <who name="Walter Harley">eclipse</who>
    <bug_when>2010-11-14 20:07:51 -0500</bug_when>
    <thetext>By the way, what is the use case for doing this?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1842014</commentid>
    <comment_count>5</comment_count>
      <attachid>183105</attachid>
    <who name="Walter Harley">eclipse</who>
    <bug_when>2010-11-15 03:01:14 -0500</bug_when>
    <thetext>Created attachment 183105
Test case

Test case demonstrating the problem.  Run annotations.jardesc in order to regenerate the annotations jar, and then run BuilderTests.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1842015</commentid>
    <comment_count>6</comment_count>
    <who name="Walter Harley">eclipse</who>
    <bug_when>2010-11-15 03:02:26 -0500</bug_when>
    <thetext>Olivier, cc&apos;ing you since the fix to this will be in the compiler.  I will try to propose a patch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1842200</commentid>
    <comment_count>7</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2010-11-15 09:48:16 -0500</bug_when>
    <thetext>(In reply to comment #6)
&gt; Olivier, cc&apos;ing you since the fix to this will be in the compiler.  I will try
&gt; to propose a patch.
Ok, I&apos;ll let you provide a patch for this one.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1842391</commentid>
    <comment_count>8</comment_count>
      <attachid>183153</attachid>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2010-11-15 14:47:31 -0500</bug_when>
    <thetext>Created attachment 183153
Proposed fix + regression test

Possible fix. Walter, please review.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1842393</commentid>
    <comment_count>9</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2010-11-15 14:48:35 -0500</bug_when>
    <thetext>We probably need to move this to JDT/Core as the fix is inside the compiler code.
Walter, move back to APT if you believe this is better in APT.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1842646</commentid>
    <comment_count>10</comment_count>
    <who name="Walter Harley">eclipse</who>
    <bug_when>2010-11-16 03:55:59 -0500</bug_when>
    <thetext>Fix looks good to me.  +1.

I wonder if we should also include this in 3.6.2?  I think this would not break any existing annotation processors because it is unlikely that there are processors relying on being able to generate a Java type in the final round and not have it be compiled - especially if javac is behaving differently than Eclipse.  Holger, do you have input on that?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1842658</commentid>
    <comment_count>11</comment_count>
    <who name="Holger Jaekel">holger.jaekel</who>
    <bug_when>2010-11-16 04:26:06 -0500</bug_when>
    <thetext>I don&apos;t think this patch would break any existing annotation processors. But I know of at least one real world annotation processor that generates source files in the last round: the Hibernate JPA 2 Metamodel Generator [1]. If I find out how to compile and include your patch into my Eclipse, I will test it with the org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor.

[1] http://www.hibernate.org/subprojects/jpamodelgen</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1842815</commentid>
    <comment_count>12</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2010-11-16 08:59:52 -0500</bug_when>
    <thetext>I would need PMC approval to backport to 3.6.2.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1842816</commentid>
    <comment_count>13</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2010-11-16 09:00:07 -0500</bug_when>
    <thetext>I&apos;ll release the patch today.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1842820</commentid>
    <comment_count>14</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2010-11-16 09:08:00 -0500</bug_when>
    <thetext>Walter, I let you release the regression test in the apt tests.
I&apos;ll take care of releasing the patch in the compiler.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1842821</commentid>
    <comment_count>15</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2010-11-16 09:08:43 -0500</bug_when>
    <thetext>Be careful to properly update the copyrights.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1842822</commentid>
    <comment_count>16</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2010-11-16 09:10:15 -0500</bug_when>
    <thetext>Released for 3.7M4.
Regression test still need to be committed for apt.
Walter, once this is done, please close as FIXED.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1842824</commentid>
    <comment_count>17</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2010-11-16 09:13:02 -0500</bug_when>
    <thetext>(In reply to comment #11)
&gt; I don&apos;t think this patch would break any existing annotation processors. But I
&gt; know of at least one real world annotation processor that generates source
&gt; files in the last round: the Hibernate JPA 2 Metamodel Generator [1]. If I find
&gt; out how to compile and include your patch into my Eclipse, I will test it with
&gt; the org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor.
&gt; 
&gt; [1] http://www.hibernate.org/subprojects/jpamodelgen
You can easily test the patch by loading inside your workspace org.eclipse.jdt.core from CVS. Then you export and select run inside host.
This will install the HEAD version of jdt.core inside your host. On the next restart, you should use the version of JDT/Core that contains the fix. Of course this means that you need to run HEAD.

If you want to run 3.6.1+, then you select the branch R3_6_maintenance of JDT/Core and you apply the patch, export into host and restart.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1842830</commentid>
    <comment_count>18</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2010-11-16 09:19:49 -0500</bug_when>
    <thetext>There are several reasons why I don&apos;t like to see this in 3.6.2:
- It (including the diff to javac) has been like that for years.
- The new bug does not seem to a have major impact on a product, at least it
  was not reported so far.
- We do more work which could affect clients and the generated code could be
  different as we produce new class files.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1843018</commentid>
    <comment_count>19</comment_count>
    <who name="Walter Harley">eclipse</who>
    <bug_when>2010-11-16 12:29:58 -0500</bug_when>
    <thetext>To test the patch, you can:

1. Download and install the latest stream stable release of Eclipse (3.7M3).
2. In the Plugin Development perspective, Plugins view, import the org.eclipse.jdt.core plug-in as a source project.
3. Copy the text of the proposed patch onto the clipboard, or download it as a file.
4. Team -&gt; Apply Patch.  Don&apos;t worry about the patches to the test projects, you can ignore those; there is just one change to Compiler.java that you need to apply.
5. Run As -&gt; Eclipse Application.  That should start a second Eclipse instance running; in that second (&quot;target&quot;) instance you can try building something with the Hibernate JPA processor and see if it works.  If you want to point the target instance at a particular existing workspace, you do that by editing the Run As configuration.

Thanks!  What kind of files does the JPA processor generate on the final round?  (I&apos;m just trying to understand why it doesn&apos;t do them during the normal rounds.)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1843020</commentid>
    <comment_count>20</comment_count>
    <who name="Walter Harley">eclipse</who>
    <bug_when>2010-11-16 12:32:54 -0500</bug_when>
    <thetext>(In reply to comment #18)
&gt; There are several reasons why I don&apos;t like to see this in 3.6.2:
&gt; - It (including the diff to javac) has been like that for years.
&gt; - The new bug does not seem to a have major impact on a product, at least it
&gt;   was not reported so far.

I&apos;ve had a chance to sleep on it now and I agree with Dani&apos;s points.  Any change to the compiler should either have some time to settle in, or it should be motivated by a clearly urgent need (e.g. a regression).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1843247</commentid>
    <comment_count>21</comment_count>
    <who name="Walter Harley">eclipse</who>
    <bug_when>2010-11-17 02:59:14 -0500</bug_when>
    <thetext>Tests are committed. I&apos;ll make sure to tag the test project before the next I-build.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1846077</commentid>
    <comment_count>22</comment_count>
    <who name="Holger Jaekel">holger.jaekel</who>
    <bug_when>2010-11-21 11:47:43 -0500</bug_when>
    <thetext>I can confirm that the source files from the Hibernate JPA processor get compiled with the Compiler rev. 1.117. Walter and Olivier, thank you for providing this patch!

(In reply to comment #19)
&gt; Thanks!  What kind of files does the JPA processor generate on the final round?
&gt;  (I&apos;m just trying to understand why it doesn&apos;t do them during the normal
&gt; rounds.)

As far as I understand, the org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor collects information in every round and builds up an internal data structure. Only in the final round, source files are created from this data structure. 

Other ways of programming this task are possible, it&apos;s just the programmers choice to do it this way.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1853512</commentid>
    <comment_count>23</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2010-12-07 09:41:30 -0500</bug_when>
    <thetext>The reporter himself has confirmed that the bug has been fixed.
Verified for 3.7M4.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>183105</attachid>
            <date>2010-11-15 03:01:00 -0500</date>
            <delta_ts>2010-11-15 03:01:14 -0500</delta_ts>
            <desc>Test case</desc>
            <filename>bug329156-test.txt</filename>
            <type>text/plain</type>
            <size>10853</size>
            <attacher name="Walter Harley">eclipse</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMAojUCBvcmcuZWNsaXBzZS5qZHQuYXB0LnBs
dWdnYWJsZS50ZXN0cwpJbmRleDogTUVUQS1JTkYvc2VydmljZXMvamF2YXguYW5ub3RhdGlvbi5w
cm9jZXNzaW5nLlByb2Nlc3Nvcgo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ClJDUyBmaWxlOiAvY3Zzcm9vdC9lY2xpcHNl
L29yZy5lY2xpcHNlLmpkdC5hcHQucGx1Z2dhYmxlLnRlc3RzL01FVEEtSU5GL3NlcnZpY2VzL2ph
dmF4LmFubm90YXRpb24ucHJvY2Vzc2luZy5Qcm9jZXNzb3IsdgpyZXRyaWV2aW5nIHJldmlzaW9u
IDEuNQpkaWZmIC11IC1yMS41IGphdmF4LmFubm90YXRpb24ucHJvY2Vzc2luZy5Qcm9jZXNzb3IK
LS0tIE1FVEEtSU5GL3NlcnZpY2VzL2phdmF4LmFubm90YXRpb24ucHJvY2Vzc2luZy5Qcm9jZXNz
b3IJMjggQXByIDIwMDkgMDE6MjE6MjUgLTAwMDAJMS41CisrKyBNRVRBLUlORi9zZXJ2aWNlcy9q
YXZheC5hbm5vdGF0aW9uLnByb2Nlc3NpbmcuUHJvY2Vzc29yCTE1IE5vdiAyMDEwIDA3OjU5OjE0
IC0wMDAwCkBAIC0yLDQgKzIsNSBAQAogb3JnLmVjbGlwc2UuamR0LmFwdC5wbHVnZ2FibGUudGVz
dHMucHJvY2Vzc29ycy5tZXNzYWdlNi5NZXNzYWdlNlByb2MKIG9yZy5lY2xpcHNlLmpkdC5hcHQu
cGx1Z2dhYmxlLnRlc3RzLnByb2Nlc3NvcnMuZmlsZXJ0ZXN0ZXIuRmlsZXJUZXN0ZXJQcm9jCiBv
cmcuZWNsaXBzZS5qZHQuYXB0LnBsdWdnYWJsZS50ZXN0cy5wcm9jZXNzb3JzLmJ1aWxkZXJ0ZXN0
ZXIuSW5oZXJpdGVkQW5ub1Byb2MKK29yZy5lY2xpcHNlLmpkdC5hcHQucGx1Z2dhYmxlLnRlc3Rz
LnByb2Nlc3NvcnMuYnVpbGRlcnRlc3Rlci5UZXN0RmluYWxSb3VuZFByb2MKIG9yZy5lY2xpcHNl
LmpkdC5hcHQucGx1Z2dhYmxlLnRlc3RzLnByb2Nlc3NvcnMubW9kZWx0ZXN0ZXIuTW9kZWxUZXN0
ZXJQcm9jCkluZGV4OiBwbHVnaW4ueG1sCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KUkNTIGZpbGU6IC9jdnNyb290L2Vj
bGlwc2Uvb3JnLmVjbGlwc2UuamR0LmFwdC5wbHVnZ2FibGUudGVzdHMvcGx1Z2luLnhtbCx2CnJl
dHJpZXZpbmcgcmV2aXNpb24gMS44CmRpZmYgLXUgLXIxLjggcGx1Z2luLnhtbAotLS0gcGx1Z2lu
LnhtbAkxMyBNYXkgMjAxMCAxMjo0Mzo1MCAtMDAwMAkxLjgKKysrIHBsdWdpbi54bWwJMTUgTm92
IDIwMTAgMDc6NTk6MTQgLTAwMDAKQEAgLTI5LDYgKzI5LDkgQEAKICAgICAgICAgICAgICAgIGNs
YXNzPSJvcmcuZWNsaXBzZS5qZHQuYXB0LnBsdWdnYWJsZS50ZXN0cy5wcm9jZXNzb3JzLmJ1aWxk
ZXJ0ZXN0ZXIuSW5oZXJpdGVkQW5ub1Byb2MiPgogICAgICAgICAgPC9qYXZhNnByb2Nlc3Nvcj4K
ICAgICAgICAgIDxqYXZhNnByb2Nlc3NvcgorICAgICAgICAgICAgICAgY2xhc3M9Im9yZy5lY2xp
cHNlLmpkdC5hcHQucGx1Z2dhYmxlLnRlc3RzLnByb2Nlc3NvcnMuYnVpbGRlcnRlc3Rlci5UZXN0
RmluYWxSb3VuZFByb2MiPgorICAgICAgICAgPC9qYXZhNnByb2Nlc3Nvcj4KKyAgICAgICAgIDxq
YXZhNnByb2Nlc3NvcgogICAgICAgICAgICAgICAgY2xhc3M9Im9yZy5lY2xpcHNlLmpkdC5hcHQu
cGx1Z2dhYmxlLnRlc3RzLnByb2Nlc3NvcnMubW9kZWx0ZXN0ZXIuTW9kZWxUZXN0ZXJQcm9jIj4K
ICAgICAgICAgIDwvamF2YTZwcm9jZXNzb3I+CiAgICAgICA8L2phdmE2cHJvY2Vzc29ycz4KSW5k
ZXg6IHNyYy9vcmcvZWNsaXBzZS9qZHQvYXB0L3BsdWdnYWJsZS90ZXN0cy9CdWlsZGVyVGVzdHMu
amF2YQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09ClJDUyBmaWxlOiAvY3Zzcm9vdC9lY2xpcHNlL29yZy5lY2xpcHNlLmpk
dC5hcHQucGx1Z2dhYmxlLnRlc3RzL3NyYy9vcmcvZWNsaXBzZS9qZHQvYXB0L3BsdWdnYWJsZS90
ZXN0cy9CdWlsZGVyVGVzdHMuamF2YSx2CnJldHJpZXZpbmcgcmV2aXNpb24gMS4yCmRpZmYgLXUg
LXIxLjIgQnVpbGRlclRlc3RzLmphdmEKLS0tIHNyYy9vcmcvZWNsaXBzZS9qZHQvYXB0L3BsdWdn
YWJsZS90ZXN0cy9CdWlsZGVyVGVzdHMuamF2YQkyIERlYyAyMDA5IDE4OjM0OjQwIC0wMDAwCTEu
MgorKysgc3JjL29yZy9lY2xpcHNlL2pkdC9hcHQvcGx1Z2dhYmxlL3Rlc3RzL0J1aWxkZXJUZXN0
cy5qYXZhCTE1IE5vdiAyMDEwIDA3OjU5OjE0IC0wMDAwCkBAIC0yMCw2ICsyMCw3IEBACiBpbXBv
cnQgb3JnLmVjbGlwc2UuY29yZS5ydW50aW1lLklQYXRoOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5hcHQuY29yZS51dGlsLkFwdENvbmZpZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuYXB0LnBs
dWdnYWJsZS50ZXN0cy5wcm9jZXNzb3JzLmJ1aWxkZXJ0ZXN0ZXIuSW5oZXJpdGVkQW5ub1Byb2M7
CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmFwdC5wbHVnZ2FibGUudGVzdHMucHJvY2Vzc29ycy5i
dWlsZGVydGVzdGVyLlRlc3RGaW5hbFJvdW5kUHJvYzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
Y29yZS5JSmF2YVByb2plY3Q7CiAKIC8qKgpAQCAtMzYsOSArMzcsNDUgQEAKIAkJcmV0dXJuIG5l
dyBUZXN0U3VpdGUoQnVpbGRlclRlc3RzLmNsYXNzKTsKIAl9CiAJCi0JLy8gTmVlZCB0aGlzIHRv
IGF2b2lkIEpVbml0IGNvbXBsYWluaW5nIHRoYXQgdGhlcmUgYXJlIG5vIHRlc3RzIGluIHRoaXMg
c3VpdGUKLQlwdWJsaWMgdm9pZCB0ZXN0RHVtbXkoKSB7Ci0JCWFzc2VydFRydWUodHJ1ZSk7CisJ
LyoqCisJICogVmVyaWZ5IHRoYXQgYSBuZXcgdHlwZSBnZW5lcmF0ZWQgaW4gdGhlIGZpbmFsIHJv
dW5kIGRvZXMgbm90IGdldAorCSAqIGFubm90YXRpb25zIHByb2Nlc3NlZCwgYnV0IGRvZXMgZ2V0
IGNvbXBpbGVkLiBUaGUgSlNSMjY5IHNwZWMgaXMgc29tZXdoYXQKKwkgKiB2YWd1ZSBhYm91dCB3
aGV0aGVyIGl0IHNob3VsZCBiZSBwb3NzaWJsZSB0byBnZW5lcmF0ZSBhIG5ldyB0eXBlIGR1cmlu
ZworCSAqIHRoZSBmaW5hbCByb3VuZCAoc2luY2UgdGhlIGZpbmFsIHJvdW5kIGRvZXMgbm90IGhh
cHBlbiB1bnRpbCBhZnRlciBhCisJICogcm91bmQgaW4gd2hpY2ggbm8gbmV3IHR5cGVzIGFyZSBn
ZW5lcmF0ZWQpOyBidXQgYXBwYXJlbnRseSBqYXZhYyBiZWhhdmVzCisJICogdGhpcyB3YXkuCisJ
ICogPHA+CisJICogU2VlIDxhIGhyZWY9Imh0dHA6Ly9idWdzLmVjbGlwc2Uub3JnLzMyOTE1NiI+
QnVnIDMyOTE1NjwvYT4gYW5kIDxhCisJICogaHJlZj0iaHR0cDovL2J1Z3Muc3VuLmNvbS92aWV3
X2J1Zy5kbz9idWdfaWQ9NjYzNDEzOCI+dGhlIGNvcnJlc3BvbmRpbmcKKwkgKiBidWcgaW4gamF2
YWM8L2E+LCB3aGljaCBTdW4gZml4ZWQuCisJICovCisJcHVibGljIHZvaWQgdGVzdEZpbmFsUm91
bmQoKSB0aHJvd3MgVGhyb3dhYmxlIHsKKwkJUHJvY2Vzc29yVGVzdFN0YXR1cy5yZXNldCgpOwor
CQlUZXN0RmluYWxSb3VuZFByb2MucmVzZXROdW1Sb3VuZHMoKTsKKwkJSUphdmFQcm9qZWN0IGpw
cm9qID0gY3JlYXRlSmF2YVByb2plY3QoX3Byb2plY3ROYW1lKTsKKwkJZGlzYWJsZUphdmE1RmFj
dG9yaWVzKGpwcm9qKTsKKwkJSVByb2plY3QgcHJvaiA9IGpwcm9qLmdldFByb2plY3QoKTsKKwkJ
SVBhdGggcHJvalBhdGggPSBwcm9qLmdldEZ1bGxQYXRoKCk7CisJCUlQYXRoIHJvb3QgPSBwcm9q
UGF0aC5hcHBlbmQoInNyYyIpOworCQkKKwkJLy8gVGhlIEBGaW5hbFJvdW5kVGVzdFRyaWdnZXIg
cHJvY2Vzc29yIGRvZXMgbm90IGdlbmVyYXRlIGFueSBmaWxlcyB3aGVuIGl0CisJCS8vIGZpcnN0
IHJ1bnM7IGJ1dCBvbiBpdHMgZmluYWwgcm91bmQgaXQgdGhlbiBnZW5lcmF0ZXMgYSBuZXcgSmF2
YSB0eXBlCisJCS8vIHRoYXQgaXMgYW5ub3RhdGVkIHdpdGggQEZpbmFsUm91bmRUZXN0VHJpZ2dl
ci4KKwkJZW52LmFkZENsYXNzKHJvb3QsICJ0IiwgIkZvbyIsCisJCQkJInBhY2thZ2UgdDtcbiIg
KworCQkJCSJpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmFwdC5wbHVnZ2FibGUudGVzdHMuYW5ub3Rh
dGlvbnMuRmluYWxSb3VuZFRlc3RUcmlnZ2VyO1xuIiArCisJCQkJIkBGaW5hbFJvdW5kVGVzdFRy
aWdnZXJcbiIgKworCQkJCSJwdWJsaWMgY2xhc3MgRm9vIHt9IgorCQkpOworCQlBcHRDb25maWcu
c2V0RW5hYmxlZChqcHJvaiwgdHJ1ZSk7CisJCQorCQlmdWxsQnVpbGQoKTsKKwkJZXhwZWN0aW5n
Tm9Qcm9ibGVtcygpOworCQkKKwkJLy8gUHJvY2Vzc29yIHNob3VsZCBoYXZlIHJ1biB0b3RhbCBv
ZiB0d28gcm91bmRzOyBjb21waWxlZCBjbGFzc2VzCisJCS8vIHNob3VsZCBpbmNsdWRlIEZvbyBh
bmQgRmluYWxSb3VuZEdlbi4KKwkJYXNzZXJ0RXF1YWxzKDIsIFRlc3RGaW5hbFJvdW5kUHJvYy5n
ZXROdW1Sb3VuZHMoKSk7CisJCWV4cGVjdGluZ1VuaXF1ZUNvbXBpbGVkQ2xhc3NlcyhuZXcgU3Ry
aW5nW10geyJ0LkZvbyIsICJnLkZpbmFsUm91bmRHZW4ifSk7CiAJfQogCQogCS8qKgpJbmRleDog
c3JjL29yZy9lY2xpcHNlL2pkdC9hcHQvcGx1Z2dhYmxlL3Rlc3RzL2Fubm90YXRpb25zL0ZpbmFs
Um91bmRUZXN0VHJpZ2dlci5qYXZhCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KUkNTIGZpbGU6IHNyYy9vcmcvZWNsaXBz
ZS9qZHQvYXB0L3BsdWdnYWJsZS90ZXN0cy9hbm5vdGF0aW9ucy9GaW5hbFJvdW5kVGVzdFRyaWdn
ZXIuamF2YQpkaWZmIC1OIHNyYy9vcmcvZWNsaXBzZS9qZHQvYXB0L3BsdWdnYWJsZS90ZXN0cy9h
bm5vdGF0aW9ucy9GaW5hbFJvdW5kVGVzdFRyaWdnZXIuamF2YQotLS0gL2Rldi9udWxsCTEgSmFu
IDE5NzAgMDA6MDA6MDAgLTAwMDAKKysrIHNyYy9vcmcvZWNsaXBzZS9qZHQvYXB0L3BsdWdnYWJs
ZS90ZXN0cy9hbm5vdGF0aW9ucy9GaW5hbFJvdW5kVGVzdFRyaWdnZXIuamF2YQkxIEphbiAxOTcw
IDAwOjAwOjAwIC0wMDAwCkBAIC0wLDAgKzEsMjQgQEAKKy8qKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
CisgKiBDb3B5cmlnaHQgKGMpIDIwMTAgV2FsdGVyIEhhcmxleSBhbmQgb3RoZXJzCisgKiBBbGwg
cmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJp
YWxzCisgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNl
IFB1YmxpYyBMaWNlbnNlIHYxLjAKKyAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0
aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CisgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2Fs
L2VwbC12MTAuaHRtbAorICoKKyAqIENvbnRyaWJ1dG9yczoKKyAqICAgIGVjbGlwc2VAY2FmZXdh
bHRlci5jb20gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24KKyAqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqLworcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuYXB0LnBsdWdnYWJsZS50ZXN0cy5h
bm5vdGF0aW9uczsKKworLyoqCisgKiBNYXJrZXIgaW50ZXJmYWNlIHRvIHRyaWdnZXIgdGhlIFRl
c3RGaW5hbFJvdW5kUHJvYywgd2hpY2ggZG9lcyBub3RoaW5nCisgKiBub3JtYWxseSBidXQgb24g
dGhlIGZpbmFsIHJvdW5kIG9mIHByb2Nlc3NpbmcgZ2VuZXJhdGVzIGEgbmV3IEphdmEgdHlwZQor
ICogdGhhdCBpcyBhbm5vdGF0ZWQgd2l0aCB0aGlzIGFubm90YXRpb24uCisgKiA8cD4KKyAqIFNl
ZSA8YSBocmVmPSJodHRwOi8vYnVncy5lY2xpcHNlLm9yZy8zMjkxNTYiPkJ1ZyAzMjkxNTY8L2E+
IGFuZAorICogPGEgaHJlZj0iaHR0cDovL2J1Z3Muc3VuLmNvbS92aWV3X2J1Zy5kbz9idWdfaWQ9
NjYzNDEzOCI+dGhlCisgKiBjb3JyZXNwb25kaW5nIGJ1ZyBpbiBqYXZhYzwvYT4sIHdoaWNoIFN1
biBmaXhlZC4KKyAqIEBzaW5jZSAzLjcKKyAqLworcHVibGljIEBpbnRlcmZhY2UgRmluYWxSb3Vu
ZFRlc3RUcmlnZ2VyIHsKK30KSW5kZXg6IHNyYy9vcmcvZWNsaXBzZS9qZHQvYXB0L3BsdWdnYWJs
ZS90ZXN0cy9wcm9jZXNzb3JzL2J1aWxkZXJ0ZXN0ZXIvSW5oZXJpdGVkQW5ub1Byb2MuamF2YQo9
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09ClJDUyBmaWxlOiAvY3Zzcm9vdC9lY2xpcHNlL29yZy5lY2xpcHNlLmpkdC5hcHQu
cGx1Z2dhYmxlLnRlc3RzL3NyYy9vcmcvZWNsaXBzZS9qZHQvYXB0L3BsdWdnYWJsZS90ZXN0cy9w
cm9jZXNzb3JzL2J1aWxkZXJ0ZXN0ZXIvSW5oZXJpdGVkQW5ub1Byb2MuamF2YSx2CnJldHJpZXZp
bmcgcmV2aXNpb24gMS4xCmRpZmYgLXUgLXIxLjEgSW5oZXJpdGVkQW5ub1Byb2MuamF2YQotLS0g
c3JjL29yZy9lY2xpcHNlL2pkdC9hcHQvcGx1Z2dhYmxlL3Rlc3RzL3Byb2Nlc3NvcnMvYnVpbGRl
cnRlc3Rlci9Jbmhlcml0ZWRBbm5vUHJvYy5qYXZhCTI4IEFwciAyMDA5IDAxOjIxOjI0IC0wMDAw
CTEuMQorKysgc3JjL29yZy9lY2xpcHNlL2pkdC9hcHQvcGx1Z2dhYmxlL3Rlc3RzL3Byb2Nlc3Nv
cnMvYnVpbGRlcnRlc3Rlci9Jbmhlcml0ZWRBbm5vUHJvYy5qYXZhCTE1IE5vdiAyMDEwIDA3OjU5
OjE0IC0wMDAwCkBAIC00Myw3ICs0Myw3IEBACiBAU3VwcG9ydGVkT3B0aW9ucygge30pCiBwdWJs
aWMgY2xhc3MgSW5oZXJpdGVkQW5ub1Byb2MgZXh0ZW5kcyBBYnN0cmFjdFByb2Nlc3NvciB7CiAJ
Ci0JcHJpdmF0ZSBzdGF0aWMgTGlzdDxTdHJpbmc+IHByb2Nlc3NlZEVsZW1lbnRzID0gbmV3IEFy
cmF5TGlzdDxTdHJpbmc+KCk7CisJcHJpdmF0ZSBzdGF0aWMgZmluYWwgTGlzdDxTdHJpbmc+IHBy
b2Nlc3NlZEVsZW1lbnRzID0gbmV3IEFycmF5TGlzdDxTdHJpbmc+KCk7CiAKIAlwdWJsaWMgc3Rh
dGljIExpc3Q8U3RyaW5nPiBnZXRQcm9jZXNzZWRFbGVtZW50cygpIHsKIAkJcmV0dXJuIENvbGxl
Y3Rpb25zLnVubW9kaWZpYWJsZUxpc3QocHJvY2Vzc2VkRWxlbWVudHMpOwpJbmRleDogc3JjL29y
Zy9lY2xpcHNlL2pkdC9hcHQvcGx1Z2dhYmxlL3Rlc3RzL3Byb2Nlc3NvcnMvYnVpbGRlcnRlc3Rl
ci9UZXN0RmluYWxSb3VuZFByb2MuamF2YQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ClJDUyBmaWxlOiBzcmMvb3JnL2Vj
bGlwc2UvamR0L2FwdC9wbHVnZ2FibGUvdGVzdHMvcHJvY2Vzc29ycy9idWlsZGVydGVzdGVyL1Rl
c3RGaW5hbFJvdW5kUHJvYy5qYXZhCmRpZmYgLU4gc3JjL29yZy9lY2xpcHNlL2pkdC9hcHQvcGx1
Z2dhYmxlL3Rlc3RzL3Byb2Nlc3NvcnMvYnVpbGRlcnRlc3Rlci9UZXN0RmluYWxSb3VuZFByb2Mu
amF2YQotLS0gL2Rldi9udWxsCTEgSmFuIDE5NzAgMDA6MDA6MDAgLTAwMDAKKysrIHNyYy9vcmcv
ZWNsaXBzZS9qZHQvYXB0L3BsdWdnYWJsZS90ZXN0cy9wcm9jZXNzb3JzL2J1aWxkZXJ0ZXN0ZXIv
VGVzdEZpbmFsUm91bmRQcm9jLmphdmEJMSBKYW4gMTk3MCAwMDowMDowMCAtMDAwMApAQCAtMCww
ICsxLDg3IEBACisvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgorICogQ29weXJpZ2h0IChjKSAyMDEw
IFdhbHRlciBIYXJsZXkgYW5kIG90aGVycworICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBw
cm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscworICogYXJlIG1hZGUgYXZhaWxh
YmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCisg
KiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBh
dAorICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKKyAqCisgKiBD
b250cmlidXRvcnM6CisgKiAgICBlY2xpcHNlQGNhZmV3YWx0ZXIuY29tIC0gaW5pdGlhbCBBUEkg
YW5kIGltcGxlbWVudGF0aW9uCisgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KKworcGFja2FnZSBv
cmcuZWNsaXBzZS5qZHQuYXB0LnBsdWdnYWJsZS50ZXN0cy5wcm9jZXNzb3JzLmJ1aWxkZXJ0ZXN0
ZXI7CisKK2ltcG9ydCBqYXZhLmlvLklPRXhjZXB0aW9uOworaW1wb3J0IGphdmEuaW8uUHJpbnRX
cml0ZXI7CitpbXBvcnQgamF2YS51dGlsLlNldDsKKworaW1wb3J0IGphdmF4LmFubm90YXRpb24u
cHJvY2Vzc2luZy5BYnN0cmFjdFByb2Nlc3NvcjsKK2ltcG9ydCBqYXZheC5hbm5vdGF0aW9uLnBy
b2Nlc3NpbmcuUm91bmRFbnZpcm9ubWVudDsKK2ltcG9ydCBqYXZheC5hbm5vdGF0aW9uLnByb2Nl
c3NpbmcuU3VwcG9ydGVkQW5ub3RhdGlvblR5cGVzOworaW1wb3J0IGphdmF4LmFubm90YXRpb24u
cHJvY2Vzc2luZy5TdXBwb3J0ZWRPcHRpb25zOworaW1wb3J0IGphdmF4LmFubm90YXRpb24ucHJv
Y2Vzc2luZy5TdXBwb3J0ZWRTb3VyY2VWZXJzaW9uOworaW1wb3J0IGphdmF4LmxhbmcubW9kZWwu
U291cmNlVmVyc2lvbjsKK2ltcG9ydCBqYXZheC5sYW5nLm1vZGVsLmVsZW1lbnQuVHlwZUVsZW1l
bnQ7CitpbXBvcnQgamF2YXgudG9vbHMuRGlhZ25vc3RpYy5LaW5kOworaW1wb3J0IGphdmF4LnRv
b2xzLkphdmFGaWxlT2JqZWN0OworCitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmFwdC5wbHVnZ2Fi
bGUudGVzdHMuYW5ub3RhdGlvbnMuRmluYWxSb3VuZFRlc3RUcmlnZ2VyOworCisvKioKKyAqIERv
IG5vdGhpbmcgd2hlbiBmaXJzdCB0cmlnZ2VyZWQ7IHRoZW4sIGluIHRoZSBmaW5hbCByb3VuZCwg
Z2VuZXJhdGUgYQorICogbmV3IHR5cGUgdGhhdCBpcyBhbm5vdGF0ZWQgd2l0aCB7QGxpbmsgRmlu
YWxSb3VuZFRlc3RUcmlnZ2VyfS4KKyAqIFVzZWQgdG8gdmVyaWZ5IHRoYXQgYSBuZXcgdHlwZSBn
ZW5lcmF0ZWQgaW4gdGhlIGZpbmFsIHJvdW5kIGRvZXMgbm90IGdldAorICogYW5ub3RhdGlvbnMg
cHJvY2Vzc2VkLCBidXQgZG9lcyBnZXQgY29tcGlsZWQuIFRoZSBKU1IyNjkgc3BlYyBpcyBzb21l
d2hhdAorICogdmFndWUgYWJvdXQgd2hldGhlciBpdCBzaG91bGQgYmUgcG9zc2libGUgdG8gZ2Vu
ZXJhdGUgYSBuZXcgdHlwZSBkdXJpbmcKKyAqIHRoZSBmaW5hbCByb3VuZCAoc2luY2UgdGhlIGZp
bmFsIHJvdW5kIGRvZXMgbm90IGhhcHBlbiB1bnRpbCBhZnRlciBhCisgKiByb3VuZCBpbiB3aGlj
aCBubyBuZXcgdHlwZXMgYXJlIGdlbmVyYXRlZCk7IGJ1dCBhcHBhcmVudGx5IGphdmFjIGJlaGF2
ZXMKKyAqIHRoaXMgd2F5LgorICogPHA+CisgKiBTZWUgPGEgaHJlZj0iaHR0cDovL2J1Z3MuZWNs
aXBzZS5vcmcvMzI5MTU2Ij5CdWcgMzI5MTU2PC9hPiBhbmQgPGEKKyAqIGhyZWY9Imh0dHA6Ly9i
dWdzLnN1bi5jb20vdmlld19idWcuZG8/YnVnX2lkPTY2MzQxMzgiPnRoZSBjb3JyZXNwb25kaW5n
CisgKiBidWcgaW4gamF2YWM8L2E+LCB3aGljaCBTdW4gZml4ZWQuCisgKi8KK0BTdXBwb3J0ZWRB
bm5vdGF0aW9uVHlwZXMoIHsgIm9yZy5lY2xpcHNlLmpkdC5hcHQucGx1Z2dhYmxlLnRlc3RzLmFu
bm90YXRpb25zLkZpbmFsUm91bmRUZXN0VHJpZ2dlciIgfSkKK0BTdXBwb3J0ZWRTb3VyY2VWZXJz
aW9uKFNvdXJjZVZlcnNpb24uUkVMRUFTRV82KQorQFN1cHBvcnRlZE9wdGlvbnMoIHt9KQorcHVi
bGljIGNsYXNzIFRlc3RGaW5hbFJvdW5kUHJvYyBleHRlbmRzIEFic3RyYWN0UHJvY2Vzc29yIHsK
Kwlwcml2YXRlIHN0YXRpYyBpbnQgX251bVJvdW5kczsKKwkKKwlwdWJsaWMgc3RhdGljIGludCBn
ZXROdW1Sb3VuZHMoKSB7CisJCXJldHVybiBfbnVtUm91bmRzOworCX0KKwkKKwlwdWJsaWMgc3Rh
dGljIHZvaWQgcmVzZXROdW1Sb3VuZHMoKSB7CisJCV9udW1Sb3VuZHMgPSAwOworCX0KKworCUBP
dmVycmlkZQorCXB1YmxpYyBib29sZWFuIHByb2Nlc3MoU2V0PD8gZXh0ZW5kcyBUeXBlRWxlbWVu
dD4gYW5ub3RhdGlvbnMsCisJCQlSb3VuZEVudmlyb25tZW50IHJvdW5kRW52KSB7CisJCWlmIChy
b3VuZEVudi5wcm9jZXNzaW5nT3ZlcigpKSB7CisJCQljcmVhdGVGaWxlKCk7CisJCX0KKwkJX251
bVJvdW5kcysrOworCQlyZXR1cm4gdHJ1ZTsKKwl9CisKKwlwcml2YXRlIHZvaWQgY3JlYXRlRmls
ZSgpIHsKKwkJUHJpbnRXcml0ZXIgcHcgPSBudWxsOworCQl0cnkgeworCQkJSmF2YUZpbGVPYmpl
Y3QgamZvID0gcHJvY2Vzc2luZ0Vudi5nZXRGaWxlcigpLmNyZWF0ZVNvdXJjZUZpbGUoImcuRmlu
YWxSb3VuZEdlbiIpOworCQkJcHcgPSBuZXcgUHJpbnRXcml0ZXIoamZvLm9wZW5Xcml0ZXIoKSk7
CisJCQlwdy5wcmludGxuKCJwYWNrYWdlIGc7Iik7CisJCQlwdy5wcmludGxuKCJpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmFwdC5wbHVnZ2FibGUudGVzdHMuYW5ub3RhdGlvbnMuRmluYWxSb3VuZFRl
c3RUcmlnZ2VyOyIpOworCQkJcHcucHJpbnRsbigiQEZpbmFsUm91bmRUZXN0VHJpZ2dlciIpOwor
CQkJcHcucHJpbnRsbigicHVibGljIGNsYXNzIEZpbmFsUm91bmRHZW4ge30iKTsKKwkJfSBjYXRj
aCAoSU9FeGNlcHRpb24gZSkgeworCQkJZS5wcmludFN0YWNrVHJhY2UoKTsKKwkJCXByb2Nlc3Np
bmdFbnYuZ2V0TWVzc2FnZXIoKS5wcmludE1lc3NhZ2UoS2luZC5FUlJPUiwgIlVuYWJsZSB0byBj
cmVhdGUgc291cmNlIGZpbGUhIEV4Y2VwdGlvbiBtZXNzYWdlIHdhczogIiArIGUuZ2V0TWVzc2Fn
ZSgpKTsKKwkJfSBmaW5hbGx5IHsKKwkJCWlmIChwdyAhPSBudWxsKSB7CisJCQkJcHcuY2xvc2Uo
KTsKKwkJCX0KKwkJfQorCX0KKworfQo=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>183153</attachid>
            <date>2010-11-15 14:47:00 -0500</date>
            <delta_ts>2010-11-15 14:47:31 -0500</delta_ts>
            <desc>Proposed fix + regression test</desc>
            <filename>patch_329156.txt</filename>
            <type>text/plain</type>
            <size>13237</size>
            <attacher name="Olivier Thomann">Olivier_Thomann</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMA0KI1Agb3JnLmVjbGlwc2UuamR0LmFwdC5w
bHVnZ2FibGUudGVzdHMNCkluZGV4OiBNRVRBLUlORi9zZXJ2aWNlcy9qYXZheC5hbm5vdGF0aW9u
LnByb2Nlc3NpbmcuUHJvY2Vzc29yDQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQpSQ1MgZmlsZTogL2N2c3Jvb3QvZWNs
aXBzZS9vcmcuZWNsaXBzZS5qZHQuYXB0LnBsdWdnYWJsZS50ZXN0cy9NRVRBLUlORi9zZXJ2aWNl
cy9qYXZheC5hbm5vdGF0aW9uLnByb2Nlc3NpbmcuUHJvY2Vzc29yLHYNCnJldHJpZXZpbmcgcmV2
aXNpb24gMS41DQpkaWZmIC11IC1yMS41IGphdmF4LmFubm90YXRpb24ucHJvY2Vzc2luZy5Qcm9j
ZXNzb3INCi0tLSBNRVRBLUlORi9zZXJ2aWNlcy9qYXZheC5hbm5vdGF0aW9uLnByb2Nlc3Npbmcu
UHJvY2Vzc29yCTI4IEFwciAyMDA5IDAxOjIxOjI1IC0wMDAwCTEuNQ0KKysrIE1FVEEtSU5GL3Nl
cnZpY2VzL2phdmF4LmFubm90YXRpb24ucHJvY2Vzc2luZy5Qcm9jZXNzb3IJMTUgTm92IDIwMTAg
MTk6NDY6NDEgLTAwMDANCkBAIC0yLDQgKzIsNSBAQA0KIG9yZy5lY2xpcHNlLmpkdC5hcHQucGx1
Z2dhYmxlLnRlc3RzLnByb2Nlc3NvcnMubWVzc2FnZTYuTWVzc2FnZTZQcm9jDQogb3JnLmVjbGlw
c2UuamR0LmFwdC5wbHVnZ2FibGUudGVzdHMucHJvY2Vzc29ycy5maWxlcnRlc3Rlci5GaWxlclRl
c3RlclByb2MNCiBvcmcuZWNsaXBzZS5qZHQuYXB0LnBsdWdnYWJsZS50ZXN0cy5wcm9jZXNzb3Jz
LmJ1aWxkZXJ0ZXN0ZXIuSW5oZXJpdGVkQW5ub1Byb2MNCitvcmcuZWNsaXBzZS5qZHQuYXB0LnBs
dWdnYWJsZS50ZXN0cy5wcm9jZXNzb3JzLmJ1aWxkZXJ0ZXN0ZXIuVGVzdEZpbmFsUm91bmRQcm9j
DQogb3JnLmVjbGlwc2UuamR0LmFwdC5wbHVnZ2FibGUudGVzdHMucHJvY2Vzc29ycy5tb2RlbHRl
c3Rlci5Nb2RlbFRlc3RlclByb2MNCkluZGV4OiBwbHVnaW4ueG1sDQo9PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQpSQ1Mg
ZmlsZTogL2N2c3Jvb3QvZWNsaXBzZS9vcmcuZWNsaXBzZS5qZHQuYXB0LnBsdWdnYWJsZS50ZXN0
cy9wbHVnaW4ueG1sLHYNCnJldHJpZXZpbmcgcmV2aXNpb24gMS44DQpkaWZmIC11IC1yMS44IHBs
dWdpbi54bWwNCi0tLSBwbHVnaW4ueG1sCTEzIE1heSAyMDEwIDEyOjQzOjUwIC0wMDAwCTEuOA0K
KysrIHBsdWdpbi54bWwJMTUgTm92IDIwMTAgMTk6NDY6NDEgLTAwMDANCkBAIC0yOSw2ICsyOSw5
IEBADQogICAgICAgICAgICAgICAgY2xhc3M9Im9yZy5lY2xpcHNlLmpkdC5hcHQucGx1Z2dhYmxl
LnRlc3RzLnByb2Nlc3NvcnMuYnVpbGRlcnRlc3Rlci5Jbmhlcml0ZWRBbm5vUHJvYyI+DQogICAg
ICAgICAgPC9qYXZhNnByb2Nlc3Nvcj4NCiAgICAgICAgICA8amF2YTZwcm9jZXNzb3INCisgICAg
ICAgICAgICAgICBjbGFzcz0ib3JnLmVjbGlwc2UuamR0LmFwdC5wbHVnZ2FibGUudGVzdHMucHJv
Y2Vzc29ycy5idWlsZGVydGVzdGVyLlRlc3RGaW5hbFJvdW5kUHJvYyI+DQorICAgICAgICAgPC9q
YXZhNnByb2Nlc3Nvcj4NCisgICAgICAgICA8amF2YTZwcm9jZXNzb3INCiAgICAgICAgICAgICAg
ICBjbGFzcz0ib3JnLmVjbGlwc2UuamR0LmFwdC5wbHVnZ2FibGUudGVzdHMucHJvY2Vzc29ycy5t
b2RlbHRlc3Rlci5Nb2RlbFRlc3RlclByb2MiPg0KICAgICAgICAgIDwvamF2YTZwcm9jZXNzb3I+
DQogICAgICAgPC9qYXZhNnByb2Nlc3NvcnM+DQpJbmRleDogc3JjL29yZy9lY2xpcHNlL2pkdC9h
cHQvcGx1Z2dhYmxlL3Rlc3RzL0J1aWxkZXJUZXN0cy5qYXZhDQo9PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQpSQ1MgZmls
ZTogL2N2c3Jvb3QvZWNsaXBzZS9vcmcuZWNsaXBzZS5qZHQuYXB0LnBsdWdnYWJsZS50ZXN0cy9z
cmMvb3JnL2VjbGlwc2UvamR0L2FwdC9wbHVnZ2FibGUvdGVzdHMvQnVpbGRlclRlc3RzLmphdmEs
dg0KcmV0cmlldmluZyByZXZpc2lvbiAxLjINCmRpZmYgLXUgLXIxLjIgQnVpbGRlclRlc3RzLmph
dmENCi0tLSBzcmMvb3JnL2VjbGlwc2UvamR0L2FwdC9wbHVnZ2FibGUvdGVzdHMvQnVpbGRlclRl
c3RzLmphdmEJMiBEZWMgMjAwOSAxODozNDo0MCAtMDAwMAkxLjINCisrKyBzcmMvb3JnL2VjbGlw
c2UvamR0L2FwdC9wbHVnZ2FibGUvdGVzdHMvQnVpbGRlclRlc3RzLmphdmEJMTUgTm92IDIwMTAg
MTk6NDY6NDEgLTAwMDANCkBAIC0yMCw2ICsyMCw3IEBADQogaW1wb3J0IG9yZy5lY2xpcHNlLmNv
cmUucnVudGltZS5JUGF0aDsNCiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmFwdC5jb3JlLnV0aWwu
QXB0Q29uZmlnOw0KIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuYXB0LnBsdWdnYWJsZS50ZXN0cy5w
cm9jZXNzb3JzLmJ1aWxkZXJ0ZXN0ZXIuSW5oZXJpdGVkQW5ub1Byb2M7DQoraW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5hcHQucGx1Z2dhYmxlLnRlc3RzLnByb2Nlc3NvcnMuYnVpbGRlcnRlc3Rlci5U
ZXN0RmluYWxSb3VuZFByb2M7DQogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLklKYXZhUHJv
amVjdDsNCiANCiAvKioNCkBAIC0zNiw5ICszNyw0NSBAQA0KIAkJcmV0dXJuIG5ldyBUZXN0U3Vp
dGUoQnVpbGRlclRlc3RzLmNsYXNzKTsNCiAJfQ0KIAkNCi0JLy8gTmVlZCB0aGlzIHRvIGF2b2lk
IEpVbml0IGNvbXBsYWluaW5nIHRoYXQgdGhlcmUgYXJlIG5vIHRlc3RzIGluIHRoaXMgc3VpdGUN
Ci0JcHVibGljIHZvaWQgdGVzdER1bW15KCkgew0KLQkJYXNzZXJ0VHJ1ZSh0cnVlKTsNCisJLyoq
DQorCSAqIFZlcmlmeSB0aGF0IGEgbmV3IHR5cGUgZ2VuZXJhdGVkIGluIHRoZSBmaW5hbCByb3Vu
ZCBkb2VzIG5vdCBnZXQNCisJICogYW5ub3RhdGlvbnMgcHJvY2Vzc2VkLCBidXQgZG9lcyBnZXQg
Y29tcGlsZWQuIFRoZSBKU1IyNjkgc3BlYyBpcyBzb21ld2hhdA0KKwkgKiB2YWd1ZSBhYm91dCB3
aGV0aGVyIGl0IHNob3VsZCBiZSBwb3NzaWJsZSB0byBnZW5lcmF0ZSBhIG5ldyB0eXBlIGR1cmlu
Zw0KKwkgKiB0aGUgZmluYWwgcm91bmQgKHNpbmNlIHRoZSBmaW5hbCByb3VuZCBkb2VzIG5vdCBo
YXBwZW4gdW50aWwgYWZ0ZXIgYQ0KKwkgKiByb3VuZCBpbiB3aGljaCBubyBuZXcgdHlwZXMgYXJl
IGdlbmVyYXRlZCk7IGJ1dCBhcHBhcmVudGx5IGphdmFjIGJlaGF2ZXMNCisJICogdGhpcyB3YXku
DQorCSAqIDxwPg0KKwkgKiBTZWUgPGEgaHJlZj0iaHR0cDovL2J1Z3MuZWNsaXBzZS5vcmcvMzI5
MTU2Ij5CdWcgMzI5MTU2PC9hPiBhbmQgPGENCisJICogaHJlZj0iaHR0cDovL2J1Z3Muc3VuLmNv
bS92aWV3X2J1Zy5kbz9idWdfaWQ9NjYzNDEzOCI+dGhlIGNvcnJlc3BvbmRpbmcNCisJICogYnVn
IGluIGphdmFjPC9hPiwgd2hpY2ggU3VuIGZpeGVkLg0KKwkgKi8NCisJcHVibGljIHZvaWQgdGVz
dEZpbmFsUm91bmQoKSB0aHJvd3MgVGhyb3dhYmxlIHsNCisJCVByb2Nlc3NvclRlc3RTdGF0dXMu
cmVzZXQoKTsNCisJCVRlc3RGaW5hbFJvdW5kUHJvYy5yZXNldE51bVJvdW5kcygpOw0KKwkJSUph
dmFQcm9qZWN0IGpwcm9qID0gY3JlYXRlSmF2YVByb2plY3QoX3Byb2plY3ROYW1lKTsNCisJCWRp
c2FibGVKYXZhNUZhY3RvcmllcyhqcHJvaik7DQorCQlJUHJvamVjdCBwcm9qID0ganByb2ouZ2V0
UHJvamVjdCgpOw0KKwkJSVBhdGggcHJvalBhdGggPSBwcm9qLmdldEZ1bGxQYXRoKCk7DQorCQlJ
UGF0aCByb290ID0gcHJvalBhdGguYXBwZW5kKCJzcmMiKTsNCisJCQ0KKwkJLy8gVGhlIEBGaW5h
bFJvdW5kVGVzdFRyaWdnZXIgcHJvY2Vzc29yIGRvZXMgbm90IGdlbmVyYXRlIGFueSBmaWxlcyB3
aGVuIGl0DQorCQkvLyBmaXJzdCBydW5zOyBidXQgb24gaXRzIGZpbmFsIHJvdW5kIGl0IHRoZW4g
Z2VuZXJhdGVzIGEgbmV3IEphdmEgdHlwZQ0KKwkJLy8gdGhhdCBpcyBhbm5vdGF0ZWQgd2l0aCBA
RmluYWxSb3VuZFRlc3RUcmlnZ2VyLg0KKwkJZW52LmFkZENsYXNzKHJvb3QsICJ0IiwgIkZvbyIs
DQorCQkJCSJwYWNrYWdlIHQ7XG4iICsNCisJCQkJImltcG9ydCBvcmcuZWNsaXBzZS5qZHQuYXB0
LnBsdWdnYWJsZS50ZXN0cy5hbm5vdGF0aW9ucy5GaW5hbFJvdW5kVGVzdFRyaWdnZXI7XG4iICsN
CisJCQkJIkBGaW5hbFJvdW5kVGVzdFRyaWdnZXJcbiIgKw0KKwkJCQkicHVibGljIGNsYXNzIEZv
byB7fSINCisJCSk7DQorCQlBcHRDb25maWcuc2V0RW5hYmxlZChqcHJvaiwgdHJ1ZSk7DQorCQkN
CisJCWZ1bGxCdWlsZCgpOw0KKwkJZXhwZWN0aW5nTm9Qcm9ibGVtcygpOw0KKwkJDQorCQkvLyBQ
cm9jZXNzb3Igc2hvdWxkIGhhdmUgcnVuIHRvdGFsIG9mIHR3byByb3VuZHM7IGNvbXBpbGVkIGNs
YXNzZXMNCisJCS8vIHNob3VsZCBpbmNsdWRlIEZvbyBhbmQgRmluYWxSb3VuZEdlbi4NCisJCWFz
c2VydEVxdWFscygyLCBUZXN0RmluYWxSb3VuZFByb2MuZ2V0TnVtUm91bmRzKCkpOw0KKwkJZXhw
ZWN0aW5nVW5pcXVlQ29tcGlsZWRDbGFzc2VzKG5ldyBTdHJpbmdbXSB7InQuRm9vIiwgImcuRmlu
YWxSb3VuZEdlbiJ9KTsNCiAJfQ0KIAkNCiAJLyoqDQpJbmRleDogc3JjL29yZy9lY2xpcHNlL2pk
dC9hcHQvcGx1Z2dhYmxlL3Rlc3RzL2Fubm90YXRpb25zL0ZpbmFsUm91bmRUZXN0VHJpZ2dlci5q
YXZhDQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09DQpSQ1MgZmlsZTogc3JjL29yZy9lY2xpcHNlL2pkdC9hcHQvcGx1Z2dh
YmxlL3Rlc3RzL2Fubm90YXRpb25zL0ZpbmFsUm91bmRUZXN0VHJpZ2dlci5qYXZhDQpkaWZmIC1O
IHNyYy9vcmcvZWNsaXBzZS9qZHQvYXB0L3BsdWdnYWJsZS90ZXN0cy9hbm5vdGF0aW9ucy9GaW5h
bFJvdW5kVGVzdFRyaWdnZXIuamF2YQ0KLS0tIC9kZXYvbnVsbAkxIEphbiAxOTcwIDAwOjAwOjAw
IC0wMDAwDQorKysgc3JjL29yZy9lY2xpcHNlL2pkdC9hcHQvcGx1Z2dhYmxlL3Rlc3RzL2Fubm90
YXRpb25zL0ZpbmFsUm91bmRUZXN0VHJpZ2dlci5qYXZhCTEgSmFuIDE5NzAgMDA6MDA6MDAgLTAw
MDANCkBAIC0wLDAgKzEsMjQgQEANCisvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKyAqIENvcHly
aWdodCAoYykgMjAxMCBXYWx0ZXIgSGFybGV5IGFuZCBvdGhlcnMNCisgKiBBbGwgcmlnaHRzIHJl
c2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzDQorICog
YXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMg
TGljZW5zZSB2MS4wDQorICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFu
ZCBpcyBhdmFpbGFibGUgYXQNCisgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12
MTAuaHRtbA0KKyAqDQorICogQ29udHJpYnV0b3JzOg0KKyAqICAgIGVjbGlwc2VAY2FmZXdhbHRl
ci5jb20gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24NCisgKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKi8NCitwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5hcHQucGx1Z2dhYmxlLnRlc3RzLmFu
bm90YXRpb25zOw0KKw0KKy8qKg0KKyAqIE1hcmtlciBpbnRlcmZhY2UgdG8gdHJpZ2dlciB0aGUg
VGVzdEZpbmFsUm91bmRQcm9jLCB3aGljaCBkb2VzIG5vdGhpbmcNCisgKiBub3JtYWxseSBidXQg
b24gdGhlIGZpbmFsIHJvdW5kIG9mIHByb2Nlc3NpbmcgZ2VuZXJhdGVzIGEgbmV3IEphdmEgdHlw
ZQ0KKyAqIHRoYXQgaXMgYW5ub3RhdGVkIHdpdGggdGhpcyBhbm5vdGF0aW9uLg0KKyAqIDxwPg0K
KyAqIFNlZSA8YSBocmVmPSJodHRwOi8vYnVncy5lY2xpcHNlLm9yZy8zMjkxNTYiPkJ1ZyAzMjkx
NTY8L2E+IGFuZA0KKyAqIDxhIGhyZWY9Imh0dHA6Ly9idWdzLnN1bi5jb20vdmlld19idWcuZG8/
YnVnX2lkPTY2MzQxMzgiPnRoZQ0KKyAqIGNvcnJlc3BvbmRpbmcgYnVnIGluIGphdmFjPC9hPiwg
d2hpY2ggU3VuIGZpeGVkLg0KKyAqIEBzaW5jZSAzLjcNCisgKi8NCitwdWJsaWMgQGludGVyZmFj
ZSBGaW5hbFJvdW5kVGVzdFRyaWdnZXIgew0KK30NCkluZGV4OiBzcmMvb3JnL2VjbGlwc2UvamR0
L2FwdC9wbHVnZ2FibGUvdGVzdHMvcHJvY2Vzc29ycy9idWlsZGVydGVzdGVyL0luaGVyaXRlZEFu
bm9Qcm9jLmphdmENCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT0NClJDUyBmaWxlOiAvY3Zzcm9vdC9lY2xpcHNlL29yZy5l
Y2xpcHNlLmpkdC5hcHQucGx1Z2dhYmxlLnRlc3RzL3NyYy9vcmcvZWNsaXBzZS9qZHQvYXB0L3Bs
dWdnYWJsZS90ZXN0cy9wcm9jZXNzb3JzL2J1aWxkZXJ0ZXN0ZXIvSW5oZXJpdGVkQW5ub1Byb2Mu
amF2YSx2DQpyZXRyaWV2aW5nIHJldmlzaW9uIDEuMQ0KZGlmZiAtdSAtcjEuMSBJbmhlcml0ZWRB
bm5vUHJvYy5qYXZhDQotLS0gc3JjL29yZy9lY2xpcHNlL2pkdC9hcHQvcGx1Z2dhYmxlL3Rlc3Rz
L3Byb2Nlc3NvcnMvYnVpbGRlcnRlc3Rlci9Jbmhlcml0ZWRBbm5vUHJvYy5qYXZhCTI4IEFwciAy
MDA5IDAxOjIxOjI0IC0wMDAwCTEuMQ0KKysrIHNyYy9vcmcvZWNsaXBzZS9qZHQvYXB0L3BsdWdn
YWJsZS90ZXN0cy9wcm9jZXNzb3JzL2J1aWxkZXJ0ZXN0ZXIvSW5oZXJpdGVkQW5ub1Byb2MuamF2
YQkxNSBOb3YgMjAxMCAxOTo0Njo0MiAtMDAwMA0KQEAgLTQzLDcgKzQzLDcgQEANCiBAU3VwcG9y
dGVkT3B0aW9ucygge30pDQogcHVibGljIGNsYXNzIEluaGVyaXRlZEFubm9Qcm9jIGV4dGVuZHMg
QWJzdHJhY3RQcm9jZXNzb3Igew0KIAkNCi0JcHJpdmF0ZSBzdGF0aWMgTGlzdDxTdHJpbmc+IHBy
b2Nlc3NlZEVsZW1lbnRzID0gbmV3IEFycmF5TGlzdDxTdHJpbmc+KCk7DQorCXByaXZhdGUgc3Rh
dGljIGZpbmFsIExpc3Q8U3RyaW5nPiBwcm9jZXNzZWRFbGVtZW50cyA9IG5ldyBBcnJheUxpc3Q8
U3RyaW5nPigpOw0KIA0KIAlwdWJsaWMgc3RhdGljIExpc3Q8U3RyaW5nPiBnZXRQcm9jZXNzZWRF
bGVtZW50cygpIHsNCiAJCXJldHVybiBDb2xsZWN0aW9ucy51bm1vZGlmaWFibGVMaXN0KHByb2Nl
c3NlZEVsZW1lbnRzKTsNCkluZGV4OiBzcmMvb3JnL2VjbGlwc2UvamR0L2FwdC9wbHVnZ2FibGUv
dGVzdHMvcHJvY2Vzc29ycy9idWlsZGVydGVzdGVyL1Rlc3RGaW5hbFJvdW5kUHJvYy5qYXZhDQo9
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09DQpSQ1MgZmlsZTogc3JjL29yZy9lY2xpcHNlL2pkdC9hcHQvcGx1Z2dhYmxlL3Rl
c3RzL3Byb2Nlc3NvcnMvYnVpbGRlcnRlc3Rlci9UZXN0RmluYWxSb3VuZFByb2MuamF2YQ0KZGlm
ZiAtTiBzcmMvb3JnL2VjbGlwc2UvamR0L2FwdC9wbHVnZ2FibGUvdGVzdHMvcHJvY2Vzc29ycy9i
dWlsZGVydGVzdGVyL1Rlc3RGaW5hbFJvdW5kUHJvYy5qYXZhDQotLS0gL2Rldi9udWxsCTEgSmFu
IDE5NzAgMDA6MDA6MDAgLTAwMDANCisrKyBzcmMvb3JnL2VjbGlwc2UvamR0L2FwdC9wbHVnZ2Fi
bGUvdGVzdHMvcHJvY2Vzc29ycy9idWlsZGVydGVzdGVyL1Rlc3RGaW5hbFJvdW5kUHJvYy5qYXZh
CTEgSmFuIDE5NzAgMDA6MDA6MDAgLTAwMDANCkBAIC0wLDAgKzEsODcgQEANCisvKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKg0KKyAqIENvcHlyaWdodCAoYykgMjAxMCBXYWx0ZXIgSGFybGV5IGFuZCBv
dGhlcnMNCisgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2Nv
bXBhbnlpbmcgbWF0ZXJpYWxzDQorICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJt
cyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wDQorICogd2hpY2ggYWNjb21wYW5p
ZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQNCisgKiBodHRwOi8vd3d3
LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbA0KKyAqDQorICogQ29udHJpYnV0b3JzOg0K
KyAqICAgIGVjbGlwc2VAY2FmZXdhbHRlci5jb20gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50
YXRpb24NCisgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCisNCitwYWNrYWdlIG9yZy5lY2xpcHNl
LmpkdC5hcHQucGx1Z2dhYmxlLnRlc3RzLnByb2Nlc3NvcnMuYnVpbGRlcnRlc3RlcjsNCisNCitp
bXBvcnQgamF2YS5pby5JT0V4Y2VwdGlvbjsNCitpbXBvcnQgamF2YS5pby5QcmludFdyaXRlcjsN
CitpbXBvcnQgamF2YS51dGlsLlNldDsNCisNCitpbXBvcnQgamF2YXguYW5ub3RhdGlvbi5wcm9j
ZXNzaW5nLkFic3RyYWN0UHJvY2Vzc29yOw0KK2ltcG9ydCBqYXZheC5hbm5vdGF0aW9uLnByb2Nl
c3NpbmcuUm91bmRFbnZpcm9ubWVudDsNCitpbXBvcnQgamF2YXguYW5ub3RhdGlvbi5wcm9jZXNz
aW5nLlN1cHBvcnRlZEFubm90YXRpb25UeXBlczsNCitpbXBvcnQgamF2YXguYW5ub3RhdGlvbi5w
cm9jZXNzaW5nLlN1cHBvcnRlZE9wdGlvbnM7DQoraW1wb3J0IGphdmF4LmFubm90YXRpb24ucHJv
Y2Vzc2luZy5TdXBwb3J0ZWRTb3VyY2VWZXJzaW9uOw0KK2ltcG9ydCBqYXZheC5sYW5nLm1vZGVs
LlNvdXJjZVZlcnNpb247DQoraW1wb3J0IGphdmF4LmxhbmcubW9kZWwuZWxlbWVudC5UeXBlRWxl
bWVudDsNCitpbXBvcnQgamF2YXgudG9vbHMuRGlhZ25vc3RpYy5LaW5kOw0KK2ltcG9ydCBqYXZh
eC50b29scy5KYXZhRmlsZU9iamVjdDsNCisNCitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmFwdC5w
bHVnZ2FibGUudGVzdHMuYW5ub3RhdGlvbnMuRmluYWxSb3VuZFRlc3RUcmlnZ2VyOw0KKw0KKy8q
Kg0KKyAqIERvIG5vdGhpbmcgd2hlbiBmaXJzdCB0cmlnZ2VyZWQ7IHRoZW4sIGluIHRoZSBmaW5h
bCByb3VuZCwgZ2VuZXJhdGUgYQ0KKyAqIG5ldyB0eXBlIHRoYXQgaXMgYW5ub3RhdGVkIHdpdGgg
e0BsaW5rIEZpbmFsUm91bmRUZXN0VHJpZ2dlcn0uDQorICogVXNlZCB0byB2ZXJpZnkgdGhhdCBh
IG5ldyB0eXBlIGdlbmVyYXRlZCBpbiB0aGUgZmluYWwgcm91bmQgZG9lcyBub3QgZ2V0DQorICog
YW5ub3RhdGlvbnMgcHJvY2Vzc2VkLCBidXQgZG9lcyBnZXQgY29tcGlsZWQuIFRoZSBKU1IyNjkg
c3BlYyBpcyBzb21ld2hhdA0KKyAqIHZhZ3VlIGFib3V0IHdoZXRoZXIgaXQgc2hvdWxkIGJlIHBv
c3NpYmxlIHRvIGdlbmVyYXRlIGEgbmV3IHR5cGUgZHVyaW5nDQorICogdGhlIGZpbmFsIHJvdW5k
IChzaW5jZSB0aGUgZmluYWwgcm91bmQgZG9lcyBub3QgaGFwcGVuIHVudGlsIGFmdGVyIGENCisg
KiByb3VuZCBpbiB3aGljaCBubyBuZXcgdHlwZXMgYXJlIGdlbmVyYXRlZCk7IGJ1dCBhcHBhcmVu
dGx5IGphdmFjIGJlaGF2ZXMNCisgKiB0aGlzIHdheS4NCisgKiA8cD4NCisgKiBTZWUgPGEgaHJl
Zj0iaHR0cDovL2J1Z3MuZWNsaXBzZS5vcmcvMzI5MTU2Ij5CdWcgMzI5MTU2PC9hPiBhbmQgPGEN
CisgKiBocmVmPSJodHRwOi8vYnVncy5zdW4uY29tL3ZpZXdfYnVnLmRvP2J1Z19pZD02NjM0MTM4
Ij50aGUgY29ycmVzcG9uZGluZw0KKyAqIGJ1ZyBpbiBqYXZhYzwvYT4sIHdoaWNoIFN1biBmaXhl
ZC4NCisgKi8NCitAU3VwcG9ydGVkQW5ub3RhdGlvblR5cGVzKCB7ICJvcmcuZWNsaXBzZS5qZHQu
YXB0LnBsdWdnYWJsZS50ZXN0cy5hbm5vdGF0aW9ucy5GaW5hbFJvdW5kVGVzdFRyaWdnZXIiIH0p
DQorQFN1cHBvcnRlZFNvdXJjZVZlcnNpb24oU291cmNlVmVyc2lvbi5SRUxFQVNFXzYpDQorQFN1
cHBvcnRlZE9wdGlvbnMoIHt9KQ0KK3B1YmxpYyBjbGFzcyBUZXN0RmluYWxSb3VuZFByb2MgZXh0
ZW5kcyBBYnN0cmFjdFByb2Nlc3NvciB7DQorCXByaXZhdGUgc3RhdGljIGludCBfbnVtUm91bmRz
Ow0KKwkNCisJcHVibGljIHN0YXRpYyBpbnQgZ2V0TnVtUm91bmRzKCkgew0KKwkJcmV0dXJuIF9u
dW1Sb3VuZHM7DQorCX0NCisJDQorCXB1YmxpYyBzdGF0aWMgdm9pZCByZXNldE51bVJvdW5kcygp
IHsNCisJCV9udW1Sb3VuZHMgPSAwOw0KKwl9DQorDQorCUBPdmVycmlkZQ0KKwlwdWJsaWMgYm9v
bGVhbiBwcm9jZXNzKFNldDw/IGV4dGVuZHMgVHlwZUVsZW1lbnQ+IGFubm90YXRpb25zLA0KKwkJ
CVJvdW5kRW52aXJvbm1lbnQgcm91bmRFbnYpIHsNCisJCWlmIChyb3VuZEVudi5wcm9jZXNzaW5n
T3ZlcigpKSB7DQorCQkJY3JlYXRlRmlsZSgpOw0KKwkJfQ0KKwkJX251bVJvdW5kcysrOw0KKwkJ
cmV0dXJuIHRydWU7DQorCX0NCisNCisJcHJpdmF0ZSB2b2lkIGNyZWF0ZUZpbGUoKSB7DQorCQlQ
cmludFdyaXRlciBwdyA9IG51bGw7DQorCQl0cnkgew0KKwkJCUphdmFGaWxlT2JqZWN0IGpmbyA9
IHByb2Nlc3NpbmdFbnYuZ2V0RmlsZXIoKS5jcmVhdGVTb3VyY2VGaWxlKCJnLkZpbmFsUm91bmRH
ZW4iKTsNCisJCQlwdyA9IG5ldyBQcmludFdyaXRlcihqZm8ub3BlbldyaXRlcigpKTsNCisJCQlw
dy5wcmludGxuKCJwYWNrYWdlIGc7Iik7DQorCQkJcHcucHJpbnRsbigiaW1wb3J0IG9yZy5lY2xp
cHNlLmpkdC5hcHQucGx1Z2dhYmxlLnRlc3RzLmFubm90YXRpb25zLkZpbmFsUm91bmRUZXN0VHJp
Z2dlcjsiKTsNCisJCQlwdy5wcmludGxuKCJARmluYWxSb3VuZFRlc3RUcmlnZ2VyIik7DQorCQkJ
cHcucHJpbnRsbigicHVibGljIGNsYXNzIEZpbmFsUm91bmRHZW4ge30iKTsNCisJCX0gY2F0Y2gg
KElPRXhjZXB0aW9uIGUpIHsNCisJCQllLnByaW50U3RhY2tUcmFjZSgpOw0KKwkJCXByb2Nlc3Np
bmdFbnYuZ2V0TWVzc2FnZXIoKS5wcmludE1lc3NhZ2UoS2luZC5FUlJPUiwgIlVuYWJsZSB0byBj
cmVhdGUgc291cmNlIGZpbGUhIEV4Y2VwdGlvbiBtZXNzYWdlIHdhczogIiArIGUuZ2V0TWVzc2Fn
ZSgpKTsNCisJCX0gZmluYWxseSB7DQorCQkJaWYgKHB3ICE9IG51bGwpIHsNCisJCQkJcHcuY2xv
c2UoKTsNCisJCQl9DQorCQl9DQorCX0NCisNCit9DQojUCBvcmcuZWNsaXBzZS5qZHQuY29yZQ0K
SW5kZXg6IGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9Db21waWxl
ci5qYXZhDQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09DQpSQ1MgZmlsZTogL2N2c3Jvb3QvZWNsaXBzZS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvQ29t
cGlsZXIuamF2YSx2DQpyZXRyaWV2aW5nIHJldmlzaW9uIDEuMTE2DQpkaWZmIC11IC1yMS4xMTYg
Q29tcGlsZXIuamF2YQ0KLS0tIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9Db21waWxlci5qYXZhCTI0IE5vdiAyMDA5IDE4OjIyOjM4IC0wMDAwCTEuMTE2DQorKysg
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL0NvbXBpbGVyLmphdmEJ
MTUgTm92IDIwMTAgMTk6NDY6NDIgLTAwMDANCkBAIC0xLDUgKzEsNSBAQA0KIC8qKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqDQotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDA5IElCTSBDb3Jwb3JhdGlv
biBhbmQgb3RoZXJzLg0KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMCBJQk0gQ29ycG9yYXRp
b24gYW5kIG90aGVycy4NCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5k
IHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzDQogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVy
IHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wDQogICogd2hpY2gg
YWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQNCkBAIC04
MzEsMTAgKzgzMSwyNiBAQA0KIAkJCQl0aGlzLmFubm90YXRpb25Qcm9jZXNzb3JNYW5hZ2VyLnJl
c2V0KCk7DQogCQkJfQ0KIAkJfSB3aGlsZSAobmV3VW5pdFNpemUgIT0gMCB8fCBuZXdDbGFzc0Zp
bGVzU2l6ZSAhPSAwKTsNCi0JCS8vIG9uZSBtb3JlIGxvb3AgdG8gY3JlYXRlIHBvc3NpYmxlIHJl
c291cmNlcw0KLQkJLy8gdGhpcyBsb29wIGNhbm5vdCBjcmVhdGUgYW55IGphdmEgc291cmNlIGZp
bGVzDQorCQkNCiAJCXRoaXMuYW5ub3RhdGlvblByb2Nlc3Nvck1hbmFnZXIucHJvY2Vzc0Fubm90
YXRpb25zKG51bGwsIG51bGwsIHRydWUpOw0KLQkJLy8gVE9ETyB3ZSBtaWdodCB3YW50IHRvIGNo
ZWNrIGlmIHRoaXMgbG9vcCBjcmVhdGVkIG5ldyB1bml0cw0KKwkJLy8gcHJvY2VzcyBwb3RlbnRp
YWwgdW5pdHMgYWRkZWQgaW4gdGhlIGZpbmFsIHJvdW5kIHNlZSAzMjkxNTYgDQorCQlJQ29tcGls
YXRpb25Vbml0W10gbmV3VW5pdHMgPSB0aGlzLmFubm90YXRpb25Qcm9jZXNzb3JNYW5hZ2VyLmdl
dE5ld1VuaXRzKCk7DQorCQluZXdVbml0U2l6ZSA9IG5ld1VuaXRzLmxlbmd0aDsNCisJCWlmIChu
ZXdVbml0U2l6ZSAhPSAwKSB7DQorCQkJSUNvbXBpbGF0aW9uVW5pdFtdIG5ld1Byb2Nlc3NlZFVu
aXRzID0gKElDb21waWxhdGlvblVuaXRbXSkgbmV3VW5pdHMuY2xvbmUoKTsgLy8gcmVtZW1iZXIg
bmV3IHVuaXRzIGluIGNhc2UgYSBzb3VyY2UgdHlwZSBjb2xsaXNpb24gb2NjdXJzDQorCQkJdHJ5
IHsNCisJCQkJdGhpcy5sb29rdXBFbnZpcm9ubWVudC5pc1Byb2Nlc3NpbmdBbm5vdGF0aW9ucyA9
IHRydWU7DQorCQkJCWludGVybmFsQmVnaW5Ub0NvbXBpbGUobmV3VW5pdHMsIG5ld1VuaXRTaXpl
KTsNCisJCQl9IGNhdGNoIChTb3VyY2VUeXBlQ29sbGlzaW9uRXhjZXB0aW9uIGUpIHsNCisJCQkJ
ZS5uZXdBbm5vdGF0aW9uUHJvY2Vzc29yVW5pdHMgPSBuZXdQcm9jZXNzZWRVbml0czsNCisJCQkJ
dGhyb3cgZTsNCisJCQl9IGZpbmFsbHkgew0KKwkJCQl0aGlzLmxvb2t1cEVudmlyb25tZW50Lmlz
UHJvY2Vzc2luZ0Fubm90YXRpb25zID0gZmFsc2U7DQorCQkJCXRoaXMuYW5ub3RhdGlvblByb2Nl
c3Nvck1hbmFnZXIucmVzZXQoKTsNCisJCQl9DQorCQl9IGVsc2Ugew0KKwkJCXRoaXMuYW5ub3Rh
dGlvblByb2Nlc3Nvck1hbmFnZXIucmVzZXQoKTsNCisJCX0NCiAJfQ0KIA0KIAlwdWJsaWMgdm9p
ZCByZXNldCgpIHsNCg==
</data>

          </attachment>
      

    </bug>

</bugzilla>