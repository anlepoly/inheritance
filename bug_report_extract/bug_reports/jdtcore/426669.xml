<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>426669</bug_id>
          
          <creation_ts>2014-01-26 12:50:00 -0500</creation_ts>
          <short_desc>Initial issues doing production builds with BETA_JAVA8</short_desc>
          <delta_ts>2014-02-01 10:25:11 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="David Williams">david_williams</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
    
    <cc>tom.schindl</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2354640</commentid>
    <comment_count>0</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2014-01-26 12:50:35 -0500</bug_when>
    <thetext>I tried adjusting our production scripts to build the &quot;BETA_JAVA8 branch&quot; and in first attempt got the errors below. I have not looked at it enough to know if &quot;real&quot; error, or related to &quot;production scripts&quot; ... just wanted to get it documented. 

= = = = 

[ERROR] The build could not read 8 projects -&gt; [Help 1]
org.apache.maven.project.ProjectBuildingException: Some problems were encountered while processing the POMs:
[FATAL] Non-resolvable parent POM: Could not find artifact eclipse.jdt.core:tests-pom:pom:4.3.0-SNAPSHOT and &apos;parent.relativePath&apos; points at wrong local POM @ line 15, column 11 
[FATAL] Non-resolvable parent POM: Could not find artifact eclipse.jdt.core:tests-pom:pom:4.3.0-SNAPSHOT and &apos;parent.relativePath&apos; points at wrong local POM @ line 14, column 11 
[FATAL] Non-resolvable parent POM: Could not find artifact eclipse.jdt.core:tests-pom:pom:4.3.0-SNAPSHOT and &apos;parent.relativePath&apos; points at wrong local POM @ line 15, column 11 
[FATAL] Non-resolvable parent POM: Could not find artifact eclipse.jdt.core:tests-pom:pom:4.3.0-SNAPSHOT and &apos;parent.relativePath&apos; points at wrong local POM @ line 15, column 11 
[FATAL] Non-resolvable parent POM: Could not find artifact eclipse.jdt.core:tests-pom:pom:4.3.0-SNAPSHOT and &apos;parent.relativePath&apos; points at wrong local POM @ line 15, column 11 
[FATAL] Non-resolvable parent POM: Could not find artifact eclipse.jdt.core:tests-pom:pom:4.3.0-SNAPSHOT and &apos;parent.relativePath&apos; points at wrong local POM @ line 14, column 11 
[FATAL] Non-resolvable parent POM: Could not find artifact eclipse.jdt.core:tests-pom:pom:4.3.0-SNAPSHOT and &apos;parent.relativePath&apos; points at wrong local POM @ line 15, column 11 
[FATAL] Non-resolvable parent POM: Could not find artifact eclipse.jdt.core:tests-pom:pom:4.3.0-SNAPSHOT and &apos;parent.relativePath&apos; points at wrong local POM @ line 15, column 11 
[WARNING] &apos;build.plugins.plugin.version&apos; for org.eclipse.tycho.extras:tycho-custom-bundle-plugin is missing. @ line 51, column 15</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354642</commentid>
    <comment_count>1</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2014-01-26 13:12:35 -0500</bug_when>
    <thetext>Not sure if I&apos;m blind ... or Tycho/Maven log confusing ... but these earlier &quot;ERROR&quot; messages mentions the specific bundles involved ... where as the &quot;FATAL&quot; messages above don&apos;t seems to ... 


[ERROR] The build could not read 8 projects -&gt; [Help 1]
[ERROR]   
[ERROR]   The project org.eclipse.jdt:org.eclipse.jdt.compiler.tool.tests:1.0.200-SNAPSHOT (/data/shared/eclipse/buildsdavidw/4X/gitCache/eclipse.platform.releng.aggregator/eclipse.jdt.core/org.eclipse.jdt.compiler.tool.tests/pom.xml) has 1 error
[ERROR]     Non-resolvable parent POM: Could not find artifact eclipse.jdt.core:tests-pom:pom:4.3.0-SNAPSHOT and &apos;parent.relativePath&apos; points at wrong local POM @ line 15, column 11 -&gt; [Help 2]
[ERROR]   
[ERROR]   The project org.eclipse.jdt:org.eclipse.jdt.core.tests.builder:3.9.2-SNAPSHOT (/data/shared/eclipse/buildsdavidw/4X/gitCache/eclipse.platform.releng.aggregator/eclipse.jdt.core/org.eclipse.jdt.core.tests.builder/pom.xml) has 1 error
[ERROR]     Non-resolvable parent POM: Could not find artifact eclipse.jdt.core:tests-pom:pom:4.3.0-SNAPSHOT and &apos;parent.relativePath&apos; points at wrong local POM @ line 14, column 11 -&gt; [Help 2]
[ERROR]   
[ERROR]   The project org.eclipse.jdt:org.eclipse.jdt.core.tests.compiler:3.9.2-SNAPSHOT (/data/shared/eclipse/buildsdavidw/4X/gitCache/eclipse.platform.releng.aggregator/eclipse.jdt.core/org.eclipse.jdt.core.tests.compiler/pom.xml) has 1 error
[ERROR]     Non-resolvable parent POM: Could not find artifact eclipse.jdt.core:tests-pom:pom:4.3.0-SNAPSHOT and &apos;parent.relativePath&apos; points at wrong local POM @ line 15, column 11 -&gt; [Help 2]
[ERROR]   
[ERROR]   The project org.eclipse.jdt:org.eclipse.jdt.core.tests.model:3.9.2-SNAPSHOT (/data/shared/eclipse/buildsdavidw/4X/gitCache/eclipse.platform.releng.aggregator/eclipse.jdt.core/org.eclipse.jdt.core.tests.model/pom.xml) has 1 error
[ERROR]     Non-resolvable parent POM: Could not find artifact eclipse.jdt.core:tests-pom:pom:4.3.0-SNAPSHOT and &apos;parent.relativePath&apos; points at wrong local POM @ line 15, column 11 -&gt; [Help 2]
[ERROR]   
[ERROR]   The project org.eclipse.jdt:org.eclipse.jdt.core.tests.performance:3.9.2-SNAPSHOT (/data/shared/eclipse/buildsdavidw/4X/gitCache/eclipse.platform.releng.aggregator/eclipse.jdt.core/org.eclipse.jdt.core.tests.performance/pom.xml) has 1 error
[ERROR]     Non-resolvable parent POM: Could not find artifact eclipse.jdt.core:tests-pom:pom:4.3.0-SNAPSHOT and &apos;parent.relativePath&apos; points at wrong local POM @ line 15, column 11 -&gt; [Help 2]
[ERROR]   
[ERROR]   The project org.eclipse.jdt:org.eclipse.jdt.apt.pluggable.tests:3.3.500-SNAPSHOT (/data/shared/eclipse/buildsdavidw/4X/gitCache/eclipse.platform.releng.aggregator/eclipse.jdt.core/org.eclipse.jdt.apt.pluggable.tests/pom.xml) has 1 error
[ERROR]     Non-resolvable parent POM: Could not find artifact eclipse.jdt.core:tests-pom:pom:4.3.0-SNAPSHOT and &apos;parent.relativePath&apos; points at wrong local POM @ line 14, column 11 -&gt; [Help 2]
[ERROR]   
[ERROR]   The project org.eclipse.jdt:org.eclipse.jdt.apt.tests:3.3.500-SNAPSHOT (/data/shared/eclipse/buildsdavidw/4X/gitCache/eclipse.platform.releng.aggregator/eclipse.jdt.core/org.eclipse.jdt.apt.tests/pom.xml) has 1 error
[ERROR]     Non-resolvable parent POM: Could not find artifact eclipse.jdt.core:tests-pom:pom:4.3.0-SNAPSHOT and &apos;parent.relativePath&apos; points at wrong local POM @ line 15, column 11 -&gt; [Help 2]
[ERROR]   
[ERROR]   The project org.eclipse.jdt:org.eclipse.jdt.compiler.apt.tests:1.0.600-SNAPSHOT (/data/shared/eclipse/buildsdavidw/4X/gitCache/eclipse.platform.releng.aggregator/eclipse.jdt.core/org.eclipse.jdt.compiler.apt.tests/pom.xml) has 1 error
[ERROR]     Non-resolvable parent POM: Could not find artifact eclipse.jdt.core:tests-pom:pom:4.3.0-SNAPSHOT and &apos;parent.relativePath&apos; points at wrong local POM @ line 15, column 11 -&gt; [Help 2]
[ERROR]</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354656</commentid>
    <comment_count>2</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2014-01-26 15:13:43 -0500</bug_when>
    <thetext>Appears as thought the &apos;test.pom&apos; cam from master ... and the tests from R4_3_maintenance, so I think the easy fix is just to use the &quot;4.3.0&quot; versioning in test pom, instead of &quot;4.4.0&quot;. 

  &lt;parent&gt;
    &lt;groupId&gt;eclipse.jdt.core&lt;/groupId&gt;
    &lt;artifactId&gt;eclipse.jdt.core&lt;/artifactId&gt;
    &lt;version&gt;4.3.0-SNAPSHOT&lt;/version&gt;
  &lt;/parent&gt;
  &lt;artifactId&gt;tests-pom&lt;/artifactId&gt;
  &lt;version&gt;4.3.0-SNAPSHOT&lt;/version&gt;

... at least, when I make that fix locally, at least I get some other error :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354659</commentid>
    <comment_count>3</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2014-01-26 15:18:22 -0500</bug_when>
    <thetext>The next error I get looks more &quot;run of the mill&quot;? Some version range is too tight, or something? (I know ... technically should be separate bug ... but ... since we are just getting started ... not sure which direction you want to head here? 


[ERROR] Cannot resolve project dependencies:
[ERROR]   Software being installed: org.eclipse.jdt.feature.group 3.9.0.qualifier
[ERROR]   Missing requirement: org.eclipse.jdt.feature.group 3.9.0.qualifier requires &apos;org.eclipse.jdt.annotation [1.1.0,1.1.1)&apos; but it could not be found
[ERROR]
[ERROR] Internal error: java.lang.RuntimeException: No solution found because the problem is unsatisfiable.: [Unable to satisfy dependency from org.eclipse.jdt.feature.group 3.9.0.qualifier to org.eclipse.jdt.annotation [1.1.0,1.1.1).; No solution found because the problem is unsatisfiable.] -&gt; [Help 1]</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354661</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-26 15:34:18 -0500</bug_when>
    <thetext>(In reply to David Williams from comment #3)
&gt; The next error I get looks more &quot;run of the mill&quot;? Some version range is too
&gt; tight, or something? (I know ... technically should be separate bug ... but
&gt; ... since we are just getting started ... not sure which direction you want
&gt; to head here? 
&gt; 
&gt; 
&gt; [ERROR] Cannot resolve project dependencies:
&gt; [ERROR]   Software being installed: org.eclipse.jdt.feature.group
&gt; 3.9.0.qualifier
&gt; [ERROR]   Missing requirement: org.eclipse.jdt.feature.group 3.9.0.qualifier
&gt; requires &apos;org.eclipse.jdt.annotation [1.1.0,1.1.1)&apos; but it could not be found
&gt; [ERROR]
&gt; [ERROR] Internal error: java.lang.RuntimeException: No solution found
&gt; because the problem is unsatisfiable.: [Unable to satisfy dependency from
&gt; org.eclipse.jdt.feature.group 3.9.0.qualifier to org.eclipse.jdt.annotation
&gt; [1.1.0,1.1.1).; No solution found because the problem is unsatisfiable.] -&gt;
&gt; [Help 1]

I&apos;ll be happy to work with you on this (is next on my agenda anyway).

In a nutshell:

We want to ship two versions of org.eclipse.jdt.annotation, tests actually *need* both: 1.1.0 and 2.0.0.
Since the plugin is not a singleton, this should be fine, but tycho and p2 may need some convincing that this is OK indeed.

Specifically for the 1.1.0 version: this now resides in folder org.eclipse.jdt.annotation_v1, not sure if that needs special mentioning to be considered during the build?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354669</commentid>
    <comment_count>5</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2014-01-26 17:11:53 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #4)
&gt; (In reply to David Williams from comment #3)
&gt; &gt; The next error I get looks more &quot;run of the mill&quot;? Some version range is too
&gt; &gt; tight, or something? (I know ... technically should be separate bug ... but
&gt; &gt; ... since we are just getting started ... not sure which direction you want
&gt; &gt; to head here? 
&gt; &gt; 
&gt; &gt; 
&gt; &gt; [ERROR] Cannot resolve project dependencies:
&gt; &gt; [ERROR]   Software being installed: org.eclipse.jdt.feature.group
&gt; &gt; 3.9.0.qualifier
&gt; &gt; [ERROR]   Missing requirement: org.eclipse.jdt.feature.group 3.9.0.qualifier
&gt; &gt; requires &apos;org.eclipse.jdt.annotation [1.1.0,1.1.1)&apos; but it could not be found
&gt; &gt; [ERROR]
&gt; &gt; [ERROR] Internal error: java.lang.RuntimeException: No solution found
&gt; &gt; because the problem is unsatisfiable.: [Unable to satisfy dependency from
&gt; &gt; org.eclipse.jdt.feature.group 3.9.0.qualifier to org.eclipse.jdt.annotation
&gt; &gt; [1.1.0,1.1.1).; No solution found because the problem is unsatisfiable.] -&gt;
&gt; &gt; [Help 1]
&gt; 
&gt; I&apos;ll be happy to work with you on this (is next on my agenda anyway).
&gt; 
&gt; In a nutshell:
&gt; 
&gt; We want to ship two versions of org.eclipse.jdt.annotation, tests actually
&gt; *need* both: 1.1.0 and 2.0.0.
&gt; Since the plugin is not a singleton, this should be fine, but tycho and p2
&gt; may need some convincing that this is OK indeed.
&gt; 
&gt; Specifically for the 1.1.0 version: this now resides in folder
&gt; org.eclipse.jdt.annotation_v1, not sure if that needs special mentioning to
&gt; be considered during the build?

Given what you&apos;ve said, I think what is happening is that the &quot;jdt.feature&quot; being &quot;found&quot; during the build, has the same qualifier as the one from the &quot;comparator repo&quot;, which includes &quot;1.1.0...&quot; yet the &quot;bundle to be built&quot; says &quot;2.0.0&quot; so .... in the feature.xml, I think you&apos;ll need to list both. Not use &quot;0.0.0&quot; but instead one explicitly as &quot;1.1.0.qualifier&quot; and then have another entry that lists &quot;2.0.0.qualifier&quot;. Then you will also need to list &quot;org.eclipse.jdt.annotation_v1&quot; as another module in your pom file. 

I think that&apos;ll &quot;make the build happy&quot;. As far as I know.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354671</commentid>
    <comment_count>6</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2014-01-26 17:42:50 -0500</bug_when>
    <thetext> 
&gt; 
&gt; I think that&apos;ll &quot;make the build happy&quot;. As far as I know.

I&apos;ll have to give this more thought (late tonight) ... the idea basically works but now it &quot;needs&quot; two version of Java, I assume. The error now says 

[ERROR] Internal error: java.lang.RuntimeException: org.osgi.framework.BundleException: Bundle org.eclipse.jdt.core.tests.compiler cannot be resolved
[ERROR] Resolution errors:
[ERROR] Bundle org.eclipse.jdt.core.tests.compiler - Missing Constraint: Require-Bundle: org.eclipse.jdt.annotation; bundle-version=&quot;[1.1.0,2.0.0)&quot;

Unless the 2.0.0 one mistakenly says &quot;7&quot; instead of &quot;6&quot;? it might take some refactoring? So ... for example, one is a small fragment that uses 2.0.0 (and Java 7)? 

Which in turn likely would need another fragment that use 1.1.0 and Java 6? 

And then ?something? so it can actually run as two test suites? (e.g. two &quot;umbrella bundles&quot; with different ids, but same content, except for included fragment)? 

A quick fix, for immediate future, might be just to use one or the other, for now ... and once everything is working in production script ... go back and improve the tests?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354674</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-26 18:02:37 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #4)

&gt; I&apos;ll be happy to work with you on this (is next on my agenda anyway).

Hi Stephan, Thanks for the offer, to the extent this is due to the annotation
bundle, you can work on it. If it is beyond that issue, please feel free to
assign to Jay, as he is the owner for this task.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354696</commentid>
    <comment_count>8</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2014-01-27 01:33:29 -0500</bug_when>
    <thetext>(In reply to David Williams from comment #6)
&gt;  

I think best to ignore my comment 6 for now -- I suspect it&apos;ll take a semi-complicated fix in future (to actually run the tests twice, with two different VMs? but once I got back to it, and actually looked at the code, 
in 
org.eclipse.jdt.core.tests.compiler
I saw a more straightforward problem. 
The list of required bundles contained: 

 org.eclipse.jdt.annotation;bundle-version=&quot;[1.1.0,2.0.0)&quot;,
 org.eclipse.jdt.annotation;bundle-version=&quot;[2.0.0,3.0.0)&quot;;resolution:=optional

While it is an appealing idea, I think its over complicated, and I think, as written, it specifies an &quot;invalid constraint&quot;. The first one says to NOT include &quot;2.0.0&quot; (via the [1.1.0,2.0.0) range) and the second one, even if optionally, says to include 2.0.0 (during builds, Tycho takes &quot;optional requirements&quot; as mandatory). But I don&apos;t think just a Tycho build issue ... would be issues at runtime too, if org.eclipse.jdt.annotation really was &quot;version 2.0.0&quot;. 

I believe how most people would handle this is to either just specify a minimum, 1.1.0, or to specify an extra wide range that accommodates both. [1.0.0, 3.0.0). 

Just to repeat, it, to solve the &quot;real&quot; problem, you will have to introduce some &quot;higher level&quot; package/bundle/feature that contains the exact combination you want to test ... well ... from what I know now, at least. Perhaps there&apos;s something I still don&apos;t quite understand about how/what you are testing ... such as do you run one if Java 7 is being used? And, another if Java 8 is being used? (i.e. mutually exclusive) or ... ? 

BTW, since this is a &quot;test bundle&quot; and we (at least, on eclipse production machines, always use at least Java 7 to test with, the bree (of org.eclipse.jdt.core.tests.compiler) could be moved to 1.7 if it was later found required, to do so to &quot;match&quot; some of the pre-reqs/environments) ... naturally, I&apos;m just saying that from a releng perspective ... I have no idea what the real requirement is from JDT point of view. 

For what its worth .. in my local mirror of the repo, I changed 

 org.eclipse.jdt.annotation;bundle-version=&quot;[1.1.0,2.0.0)&quot;,
 org.eclipse.jdt.annotation;bundle-version=&quot;[2.0.0,3.0.0)&quot;;resolution:=optional

to 

 org.eclipse.jdt.annotation;bundle-version=&quot;[1.1.0,3.0.0)&quot;

and the build at least got past all the &quot;resolution/validation&quot; stuff and is continuing with the main compile/build.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354729</commentid>
    <comment_count>9</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2014-01-27 03:36:39 -0500</bug_when>
    <thetext>With the changes made thus far, we are down to a compile error -- which is not the say the results are &apos;correct&apos; ... just that we are getting close to completing a build (on my local test machine). 

= = = = = = =

$ grep &quot;^\[ERROR\]&quot; mb4X.out.log 
[ERROR] Failed to execute goal org.eclipse.tycho:tycho-compiler-plugin:0.18.1:compile (default-compile) on project org.eclipse.jdt.annotation: Compilation failure: Compilation failure:
[ERROR] /data/shared/eclipse/buildsdavidw/4X/gitCache/eclipse.platform.releng.aggregator/eclipse.jdt.core/org.eclipse.jdt.annotation/src/org/eclipse/jdt/annotation/Nullable.java:[18,0]
[ERROR] import static java.lang.annotation.ElementType.TYPE_USE;
[ERROR] ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ERROR] The import java.lang.annotation.ElementType.TYPE_USE cannot be resolved
[ERROR] /data/shared/eclipse/buildsdavidw/4X/gitCache/eclipse.platform.releng.aggregator/eclipse.jdt.core/org.eclipse.jdt.annotation/src/org/eclipse/jdt/annotation/Nullable.java:[41,0]
[ERROR] @Target({ TYPE_USE })
[ERROR] ^^^^^^^^
[ERROR] TYPE_USE cannot be resolved to a variable
[ERROR] /data/shared/eclipse/buildsdavidw/4X/gitCache/eclipse.platform.releng.aggregator/eclipse.jdt.core/org.eclipse.jdt.annotation/src/org/eclipse/jdt/annotation/NonNull.java:[18,0]
[ERROR] import static java.lang.annotation.ElementType.TYPE_USE;
[ERROR] ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[ERROR] The import java.lang.annotation.ElementType.TYPE_USE cannot be resolved
[ERROR] /data/shared/eclipse/buildsdavidw/4X/gitCache/eclipse.platform.releng.aggregator/eclipse.jdt.core/org.eclipse.jdt.annotation/src/org/eclipse/jdt/annotation/NonNull.java:[50,0]
[ERROR] @Target({ TYPE_USE })
[ERROR] ^^^^^^^^
[ERROR] TYPE_USE cannot be resolved to a variable
[ERROR] 4 problems (4 errors)

I am hoping the solution to this is obvious to JDT Team. 
Is wrong version of org.eclipse.jdt.annotation being used? 
Or is it a good sign that at least we compiling 
org.eclipse.jdt.annotation 2.0.0 :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354732</commentid>
    <comment_count>10</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2014-01-27 03:39:14 -0500</bug_when>
    <thetext>JDT committers ... sorry to just keep a &quot;running history&quot; of getting the build running ... feel free to &quot;split out&quot; any issues you&apos;d like in their own bugzilla entry.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354733</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-27 03:39:54 -0500</bug_when>
    <thetext>(In reply to David Williams from comment #9)
&gt; With the changes made thus far, we are down to a compile error -- which is
&gt; not the say the results are &apos;correct&apos; ... just that we are getting close to
&gt; completing a build (on my local test machine). 

&gt; aggregator/eclipse.jdt.core/org.eclipse.jdt.annotation/src/org/eclipse/jdt/
&gt; annotation/Nullable.java:[18,0]
&gt; [ERROR] import static java.lang.annotation.ElementType.TYPE_USE;
&gt; [ERROR] ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
&gt; [ERROR] The import java.lang.annotation.ElementType.TYPE_USE cannot be
&gt; resolved

This particular project requires JRE8, TYPE_USE is a new element type
introduced in Java 8.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354737</commentid>
    <comment_count>12</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-27 03:45:32 -0500</bug_when>
    <thetext>Re JRE version: I believe *everything* should run on JRE 1.8, and the 1.7-ish side only happens during testing when we configure JDT for 1.7.

Depending on the test mode we need one or the other annotation bundle, so both must be available.

AND, we want to include both versions in the feature so people have both versions available for use by their projects, depending on their compliance level.

Merging both dependencies into one will certainly not achieve this goal :)

FWIW, you can find the sources for the patch feature (that one on springsource servers) at : https://github.com/kdvolder/eclipse-java8</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354744</commentid>
    <comment_count>13</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2014-01-27 04:11:35 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #12)
&gt; Re JRE version: I believe *everything* should run on JRE 1.8, and the
&gt; 1.7-ish side only happens during testing when we configure JDT for 1.7.
&gt; 

Not sure what this means ... or else it contradicts other things I&apos;ve heard/read. Do you mean to run without Tycho&apos;s BREE-LIB option? That&apos;d be a shame, we seem so close to having true production builds. 

&gt; Depending on the test mode we need one or the other annotation bundle, so
&gt; both must be available.
&gt; 
&gt; AND, we want to include both versions in the feature ...
&gt; 

I&apos;ve described how to do that in comment 5. 

&gt; Merging both dependencies into one will certainly not achieve this goal :)

Did something I say sound like I was suggesting that? I wasn&apos;t, so not sure if left over from some other conversation or if I was unclear. 

&gt; FWIW, you can find the sources for the patch feature (that one on
&gt; springsource servers) at : https://github.com/kdvolder/eclipse-java8

I should not need that. (Or, else I am misunderstanding your point). 

By the way, if org.eclipse.jdt.annotation requires Java 8, then its manifest should be changed to specify JavaSE-1.8 ... it currently specifies JavaSE-1.7.
Oh, I just tried that and got an error &quot;Unknown OSGi execution environment: &apos;JavaSE-1.8&apos;. I am not sure if that means we need an update from Equinox? Or Tycho?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354769</commentid>
    <comment_count>14</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2014-01-27 05:01:32 -0500</bug_when>
    <thetext>(In reply to David Williams from comment #13)

&gt; 
&gt; By the way, if org.eclipse.jdt.annotation requires Java 8, then its manifest
&gt; should be changed to specify JavaSE-1.8 ... it currently specifies
&gt; JavaSE-1.7.
&gt; Oh, I just tried that and got an error &quot;Unknown OSGi execution environment:
&gt; &apos;JavaSE-1.8&apos;. I am not sure if that means we need an update from Equinox? Or
&gt; Tycho?

I see the support in Equinox (even for Kepler ... at least SR2 ... not sure if in SR1?) so opened a bug 426692 for Tycho support.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354959</commentid>
    <comment_count>15</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-27 10:35:23 -0500</bug_when>
    <thetext>David, sorry if my comments appear out-of-place. I&apos;m trying to squeeze this in between my day-job, I probably read your comments in too much of a haste ...

Disclaimer: I know little about the status of your build for BETA_JAVA8. OTOH, I communicated with Kris de Volder, to help him get the current patch feature up to speed. That&apos;s why I mentioned his github project: his (patch-) feature.xml is known to work, whereas our version may still lag behind. I&apos;m not sure.

IIRC, saying &quot;JavaSE-1.7&quot; was a stop-gap measure when we where developing in an IDE that had no support for JavaSE-1.8. Yes, meanwhile this should be corrected.

If inclusion of both versions of org.eclipse.jdt.annotation already works then I better shut up and wait for more questions from you :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2355666</commentid>
    <comment_count>16</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2014-01-28 16:21:20 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #15)
&gt; David, sorry if my comments appear out-of-place. I&apos;m trying to squeeze this
&gt; in between my day-job, I probably read your comments in too much of a haste
&gt; ...
&gt; 
&gt; Disclaimer: I know little about the status of your build for BETA_JAVA8.
&gt; OTOH, I communicated with Kris de Volder, to help him get the current patch
&gt; feature up to speed. That&apos;s why I mentioned his github project: his (patch-)
&gt; feature.xml is known to work, whereas our version may still lag behind. I&apos;m
&gt; not sure.
&gt; 
&gt; IIRC, saying &quot;JavaSE-1.7&quot; was a stop-gap measure when we where developing in
&gt; an IDE that had no support for JavaSE-1.8. Yes, meanwhile this should be
&gt; corrected.
&gt; 
&gt; If inclusion of both versions of org.eclipse.jdt.annotation already works
&gt; then I better shut up and wait for more questions from you :)

I appreciate the comments and questions ... sorry if my comments appeared out of place :) 

To give some status, though, after spending a long long time trying to get past bug 426692, I&apos;m going to focus on the rest of it ... everything except org.eclipse.jdt.annotation 2.0.0. I can not seem to get that bundle to build. 

I wanted to emphasize too, I fully agree we want to have &quot;patch builds&quot; for Kepler SR2, but I felt more comfortable trying to get &quot;everything to build&quot; using out normal methods first, since that would be the best way to find &quot;overall issues&quot; in the build ... instead of them showing up at runtime. 

I do have some questions about having two versions of org.eclipse.jdt.annotation, though will not immediately effect the build problems I am having. 

First, I notice that they are &quot;included&quot; in manifest.mf files with &quot;require-bundle&quot;. Ordinarily, when I&apos;ve seen two bundles used, with same ID, the manifest would use &quot;import package&quot; ... and the two bundles themselves would export their package version. But, as tried to look at the code some, and didn&apos;t see cases where org.eclipse.jdt.annotation was used as a normal &quot;java package&quot; ... just saw cases where bundle contents (or something) were read into a string array, or something. So, my question is ... can someone give a &quot;20 words or less&quot; explanation of what these are? Am I just missing the cases where they are used in Java code? And more importantly, how is it expected for these to &quot;resolve&quot; to the correct version at runtime?  

Thanks for any insights.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2355672</commentid>
    <comment_count>17</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-28 16:40:59 -0500</bug_when>
    <thetext>20 or less?
:)

Those are Java annotation types, which are *relevant only at compile time*:
- in some of our test cases the sources being compiled import these types,
  then we test if those are compiled correctly.
- for users these are relevant to import in *their* source code to enable
  advanced compile time checking.
  (different mechanisms exist to make the types available in their 
  projects, depending on OSGi/non-OSGi nature of those projects).

Mentioning this in feature.xml only serves for shipping these bundles, not to satisfy the requirements of JDT itself - no need to resolve at runtime.

(well, less then 20 lines :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2355708</commentid>
    <comment_count>18</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2014-01-28 18:11:08 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #17)
&gt; 20 or less?
&gt; :)
&gt; 
&gt; Those are Java annotation types, which are *relevant only at compile time*:
&gt; - in some of our test cases the sources being compiled import these types,
&gt;   then we test if those are compiled correctly.
&gt; - for users these are relevant to import in *their* source code to enable
&gt;   advanced compile time checking.
&gt;   (different mechanisms exist to make the types available in their 
&gt;   projects, depending on OSGi/non-OSGi nature of those projects).
&gt; 
&gt; Mentioning this in feature.xml only serves for shipping these bundles, not
&gt; to satisfy the requirements of JDT itself - no need to resolve at runtime.
&gt; 
&gt; (well, less then 20 lines :)

That&apos;s VERY helpful ... and notice how much longer my question was than your answer! 

So, makes no difference to our compiler, per se (jdt.core) if they are present or not ... just matters to testing our compiler. 

And, almost there ... let&apos;s take the case of the user using the OSGi case ... it basically comes down to what what BREE they specify ... if they use Java 7 or less, they can use the &quot;1.1.0&quot; type of annotation, but if they use the Java 8 they can use the &quot;2.0.0&quot; type? ... but in neither case they don&apos;t have to import or require anything any differently than the BREE. Right?  

This simplifies things quite a bit, if I&apos;m understanding it now. I mean ... still need to figure out how to get them both &quot;packaged&quot;, but ... sounds like it doesn&apos;t stand in the way of producing the jdt compiler. 

Now for what may be a goofy question ... if these are just used in tests, and we just &quot;read them in&quot; ... do they really need to be compiled? I guess this comes down to &quot;Do you insert strings, or byte codes at test time&quot;? (And apologies if it is goofy, I just skim read the code where it seemed to be used, and didn&apos;t read it closely). 

Thanks for your time.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2355718</commentid>
    <comment_count>19</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-01-28 19:42:34 -0500</bug_when>
    <thetext>(In reply to comment #18)
&gt; And, almost there ... let&apos;s take the case of the user using the OSGi case ... it
&gt; basically comes down to what what BREE they specify ... if they use Java 7 or
&gt; less, they can use the &quot;1.1.0&quot; type of annotation, but if they use the Java 8
&gt; they can use the &quot;2.0.0&quot; type? ... but in neither case they don&apos;t have to import
&gt; or require anything any differently than the BREE. Right?

It&apos;s also possible to compile Java 8 source code against the Java 7 annotations from 1.1.0 (to maintain a parallel Java 7 branch of the code, perhaps) and it might be possible (meaning I haven&apos;t tried it recently) to compile Java 7 source code against the Java 8 annotations from 2.0.0 if you create a few additional stub classes and you don&apos;t use Java 8&apos;s new syntax with them. To a developer these jar-files appear as if they come from a local mini-repo that comes pre-installed with Eclipse.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2355927</commentid>
    <comment_count>20</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2014-01-29 08:19:14 -0500</bug_when>
    <thetext>FWIW, I could do &quot;top to bottom&quot; production build on my local test machine ... with my local fixes of the bugs below ... so if/when those get accepted, I could try a &apos;testbuild&apos; on build.eclipse.org for the experts to examine for correctness. 

426861 	[BETA_JAVA8] use SYSTEM to compile o.e.j.annotations 2.0
426843 	[BETA_JAVA8] use qualifier in org.eclipse.jdt.annotation_v1
426845 	[BETA_JAVA8] increment service field of jdt feature +50
426844  [BETA_JAVA8] use &quot;4.3.0&quot; in tests-pom parent 

426670 	Releng changes to accommodate building BETA_JAVA8

Of course once changes made in main repository, I&apos;d want to &quot;check again&quot;, as might have missed something I was tweaking locally.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2355965</commentid>
    <comment_count>21</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-29 09:25:21 -0500</bug_when>
    <thetext>(In reply to David Williams from comment #20)

&gt; 426861 	[BETA_JAVA8] use SYSTEM to compile o.e.j.annotations 2.0
&gt; 426843 	[BETA_JAVA8] use qualifier in org.eclipse.jdt.annotation_v1
&gt; 426845 	[BETA_JAVA8] increment service field of jdt feature +50
&gt; 426844  [BETA_JAVA8] use &quot;4.3.0&quot; in tests-pom parent 

So David, are you asking that these be reviewed and committed ? 

Jay, please help take it forward once we hear an yes.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2355967</commentid>
    <comment_count>22</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2014-01-29 09:28:45 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #21)
&gt; (In reply to David Williams from comment #20)
&gt; 
&gt; &gt; 426861 	[BETA_JAVA8] use SYSTEM to compile o.e.j.annotations 2.0
&gt; &gt; 426843 	[BETA_JAVA8] use qualifier in org.eclipse.jdt.annotation_v1
&gt; &gt; 426845 	[BETA_JAVA8] increment service field of jdt feature +50
&gt; &gt; 426844  [BETA_JAVA8] use &quot;4.3.0&quot; in tests-pom parent 
&gt; 
&gt; So David, are you asking that these be reviewed and committed ? 
&gt; 
&gt; Jay, please help take it forward once we hear an yes.

yes please.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2355978</commentid>
    <comment_count>23</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-01-29 09:41:48 -0500</bug_when>
    <thetext>Just to it make it bit easier to navigate:

bug 426861 	[BETA_JAVA8] use SYSTEM to compile o.e.j.annotations 2.0
bug 426843 	[BETA_JAVA8] use qualifier in org.eclipse.jdt.annotation_v1
bug 426845 	[BETA_JAVA8] increment service field of jdt feature +50
bug 426844      [BETA_JAVA8] use &quot;4.3.0&quot; in tests-pom parent 

bug 426670 	Releng changes to accommodate building BETA_JAVA8</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2356090</commentid>
    <comment_count>24</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-01-29 11:34:54 -0500</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #23)
&gt; Just to it make it bit easier to navigate:
&gt; 
&gt; bug 426861 	[BETA_JAVA8] use SYSTEM to compile o.e.j.annotations 2.0
&gt; bug 426843 	[BETA_JAVA8] use qualifier in org.eclipse.jdt.annotation_v1
&gt; bug 426844      [BETA_JAVA8] use &quot;4.3.0&quot; in tests-pom parent 

I have released all these patches as part of this commit:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=d193384ef54e4e49815554a7436647ada18e0d53</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2356254</commentid>
    <comment_count>25</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2014-01-29 15:09:46 -0500</bug_when>
    <thetext>Here&apos;s another change I&apos;d made locally, but forgot to include with the other batch of patches. 

Bug 426937 - [BETA_JAVA8] include o.e.j.annotation_v1 in root pom

So, my local test failed due to that ... but, once that&apos;s fixed, I&apos;ll try again and see what&apos;s next that I forgot :/</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2356311</commentid>
    <comment_count>26</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2014-01-29 16:44:27 -0500</bug_when>
    <thetext>Well, there was another I forgot ... I need to learn to work with &quot;mirroed repos&quot; better ... but appreciate working through these to get &quot;in sync&quot;. 

Bug 426954 - [BETA_JAVA8] use wide range in manifest.mf prereq for o.e.j.annotations</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2356708</commentid>
    <comment_count>27</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2014-01-30 11:20:12 -0500</bug_when>
    <thetext>For the record, I was able to do a &quot;production build&quot; using the BETA branch, and from what I see there were 28 bundles that &quot;change&quot; from the Kepler maintenance builds. (plus a few extra: one for a fix that went in after RC2, and several &quot;branding bundles&quot; ). 

I&apos;ll paste the list below, so anyone can sanity check if something is obviously missing, but otherwise will consider this bug &quot;fixed&quot;. And, next, I&apos;ll try to work on something &quot;real&quot; the JDT committers can look at :) 

= = = = = = 

bundles &quot;new&quot; in BETA_JAVA8

org.eclipse.jdt.annotation_1.1.0.v20140129-1625.jar
org.eclipse.jdt.annotation_2.0.0.v20130816-1629.jar
org.eclipse.jdt.annotation.source_1.1.0.v20140129-1625.jar
org.eclipse.jdt.annotation.source_2.0.0.v20130816-1629.jar
org.eclipse.jdt.apt.core_3.3.500.v20140128-0244.jar
org.eclipse.jdt.apt.core.source_3.3.500.v20140128-0244.jar
org.eclipse.jdt.apt.pluggable.core_1.0.400.v20131113-0353.jar
org.eclipse.jdt.apt.pluggable.core.source_1.0.400.v20131113-0353.jar
org.eclipse.jdt.apt.ui_3.3.300.v20131121-1422.jar
org.eclipse.jdt.apt.ui.source_3.3.300.v20131121-1422.jar
org.eclipse.jdt.compiler.apt_1.0.600.v20140127-0757.jar
org.eclipse.jdt.compiler.apt.source_1.0.600.v20140127-0757.jar
org.eclipse.jdt.compiler.tool_1.0.200.v20140127-0757.jar
org.eclipse.jdt.compiler.tool.source_1.0.200.v20140127-0757.jar
org.eclipse.jdt.core_3.9.2.v20140129-2151.jar
org.eclipse.jdt.core.source_3.9.2.v20140129-2151.jar
org.eclipse.jdt.debug_3.8.0.v20140129-1519
org.eclipse.jdt.debug.source_3.8.0.v20140129-1519.jar
org.eclipse.jdt.debug.ui_3.6.200.v20131119-0918.jar
org.eclipse.jdt.debug.ui.source_3.6.200.v20131119-0918.jar
org.eclipse.jdt.launching_3.7.0.v20131118-2006.jar
org.eclipse.jdt.launching.source_3.7.0.v20131118-2006.jar
org.eclipse.jdt.ui_3.9.1.v20140110-1211.jar
org.eclipse.jdt.ui.source_3.9.1.v20140110-1211.jar
org.eclipse.pde.api.tools_1.0.501.v20130730-1756.jar
org.eclipse.pde.api.tools.source_1.0.501.v20130730-1756.jar
org.eclipse.pde.launching_3.6.100.v20130507-2111.jar
org.eclipse.pde.launching.source_3.6.100.v20130507-2111.jar


&quot;new&quot; due to fix that came in after RC2

org.eclipse.equinox.p2.publisher_1.3.0.v20140129-1405.jar
org.eclipse.equinox.p2.publisher.source_1.3.0.v20140129-1405.jar


&quot;new&quot; branding bundles?

org.eclipse.platform_4.3.2.v20140130-0132
org.eclipse.platform.source_4.3.2.v20140130-0132.jar
org.eclipse.rcp_4.3.0.v20140130-0132.jar
org.eclipse.help.base_4.0.1.v20140130-0132.jar
org.eclipse.help.base.source_4.0.1.v20140130-0132.jar
org.eclipse.jdt_3.9.0.v20140130-0132.jar
org.eclipse.pde_3.8.100.v20140130-0132.jar
org.eclipse.cvs_1.4.0.v20140130-0132.jar</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2357090</commentid>
    <comment_count>28</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2014-01-31 05:45:09 -0500</bug_when>
    <thetext>(In reply to David Williams from comment #27)

&gt; I&apos;ll paste the list below, so anyone can sanity check if something is
&gt; obviously missing, but otherwise will consider this bug &quot;fixed&quot;. 

Looks good to me.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2357515</commentid>
    <comment_count>29</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-01 10:25:11 -0500</bug_when>
    <thetext>*** Bug 416580 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>