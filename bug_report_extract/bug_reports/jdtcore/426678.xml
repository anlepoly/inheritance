<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>426678</bug_id>
          
          <creation_ts>2014-01-26 18:39:00 -0500</creation_ts>
          <short_desc>[1.8][compiler] Another issue with vararg type element accessibility</short_desc>
          <delta_ts>2014-01-28 03:44:07 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>jarthana</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2354675</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-26 18:39:47 -0500</bug_when>
    <thetext>Follow up of https://bugs.eclipse.org/bugs/show_bug.cgi?id=426534:

I see another problem with vararg accessibility: I&apos;ll shortly release a regression
test showing the problem.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354678</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-26 20:01:14 -0500</bug_when>
    <thetext>GenericsRegressionTest.test426678() : Our behavior and javac behavior match
across 1.5 - 1.8: Good.

GenericsRegressionTest.test426678() : Our behavior is self-consistent across 
1.5 - 1.8 and javac behavior is self-consistent (sort of - 1.5, 1.6 produce
class files which fail at runtime while 1.7, 1.8 reject upfront)

Net difference is that inaccessibility of a substitution candidate affects
overload resolution in our code - Is this allowed ? I am inclined to think not.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354681</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-26 20:15:34 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #1)
&gt; GenericsRegressionTest.test426678() : Our behavior and javac behavior match
&gt; across 1.5 - 1.8: Good.

This should be GenericsRegressionTest.test426678a.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354685</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-26 21:05:21 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #1)

&gt; Net difference is that inaccessibility of a substitution candidate affects
&gt; overload resolution in our code - Is this allowed ? I am inclined to think
&gt; not.

Thinking a bit more, I don&apos;t think &quot;inaccessibility of a substitution candidate affects overload resolution in our code&quot; and this is simply due to 
https://bugs.eclipse.org/bugs/show_bug.cgi?id=421922, I&apos;ll investigate and
confirm if a duplicate.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354871</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-27 08:12:17 -0500</bug_when>
    <thetext>Mea culpla. 

(In reply to Srikanth Sankaran from comment #1)

&gt; Net difference is that inaccessibility of a substitution candidate affects
&gt; overload resolution in our code - Is this allowed ? I am inclined to think
&gt; not.

The check for vararg element type was in the wrong place. It had no business
to be inside computeCompatibleMethod.

Fix and tests released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=e2f59df4da4b0717730e8b0f95dd08cfbb696924</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2355202</commentid>
    <comment_count>5</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-01-28 00:41:00 -0500</bug_when>
    <thetext>Could be a regression of this - when one of the overloaded varargs methods has an inaccessible type as a varargs parameter (and the other one is accessible), the compiler rejects the invocation, even though we could have picked a valid method.

Here&apos;a a test case:

package p.q;
public class C implements I {
    public C() { }
    static public void foo(I ... args) { }
    static public void foo(Object ... args) { }
}
interface I {} // Note the package access here

package p;
import p.q.*;

public class X  {
    public void bar() {
        C.foo(new C()); // Compile error here.
    }
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2355252</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-28 03:44:07 -0500</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #5)
&gt; Could be a regression of this - when one of the overloaded varargs methods
&gt; has an inaccessible type as a varargs parameter (and the other one is
&gt; accessible), the compiler rejects the invocation, even though we could have
&gt; picked a valid method.

This is not a regression caused by this, this is the same bug as in 
https://bugs.eclipse.org/bugs/show_bug.cgi?id=421922 - earlier it was
masked by our accidentally picking the right method by disqualifying the
inaccessible method.

I&apos;ll take a look. Thanks.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>