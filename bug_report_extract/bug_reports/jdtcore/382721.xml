<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>382721</bug_id>
          
          <creation_ts>2012-06-15 05:56:00 -0400</creation_ts>
          <short_desc>[1.8][compiler] Effectively final variables needs special treatment</short_desc>
          <delta_ts>2013-11-11 11:27:10 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          <dependson>382727</dependson>
          <blocked>382701</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Jesper Moller">jesper</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>anchakrk</cc>
    
    <cc>daniel_megert</cc>
    
    <cc>jarthana</cc>
    
    <cc>markus_keller</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2124804</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-06-15 05:56:00 -0400</bug_when>
    <thetext>BETA_JAVA8

(1) The following program which does not compile under 1.7-
should now begin to compile with Java 8:

// -------- 8&lt; -----------

public class X {
  public static void main(String[] args) {
    X x = new X() {
      void foo() {
        System.out.println(args);
      }
    };
  }
}

The proposed amends to 8.1.3 allow for a local class including anonymous
classes to use effectively final variables from its surrounding context.

(2) Likewise, we need to also allow lambda expressions to reference effectively
final, definitely assigned local variables, formal parameters or
exception handler parameter from the surrounding context (in addition
to finals)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2124819</commentid>
    <comment_count>1</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-06-15 06:37:25 -0400</bug_when>
    <thetext>I think I can take a look at this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2124851</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-06-15 08:07:49 -0400</bug_when>
    <thetext>Please wait until the fix for bug 382727 becomes available. As of now
the LambdaExpression and ReferenceExpression AST nodes are NOT part of
the recursive AST traversal for semantic analysis and type resolution.
I&apos;ll hook them up as a part of the fix for bug 382727.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2138332</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-07-18 03:05:35 -0400</bug_when>
    <thetext>I think the basic mechanism for this analysis can be implemented independent of the AST for lambdas. If needed I could help here.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2209766</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-01-30 06:52:21 -0500</bug_when>
    <thetext>Jesper - Just so we don&apos;t end up duplicating work, I&apos;ll try and clearly assign
items to you - I think this one would be of interest to you. This has two parts:

(1) Behavior changes in anonymous classes.
(2) Semantic checks in lambda that it is not trying to access variables that
are not final and not effectively final.

See org.eclipse.jdt.internal.compiler.lookup.TagBits.IsEffectivelyFinal
and IProblem.OuterLocalMustBeFinal.

You can provide as much of LambdaExpression.resolveType implementation as
needed to work on this problem.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2211370</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-02 12:49:11 -0500</bug_when>
    <thetext>Also please add a test verifying that the following compiles fine:

// ---
interface I {
	void foo();
}
interface J {
	
}
class X {
	void foo(int [] p) {
		for (int is : p) {
			I j = new I () {
				public void foo() {
					System.out.println(is);
				};
			};
		}
	}
}

// ----

The above is legal code in Java 8, while illegal in Java 7.

We need to test with both inner classes and lambdas. Basically
each iteration of foreach loop is considered to have its own
distinct version.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2211371</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-02 13:10:26 -0500</bug_when>
    <thetext>Here is something else to track:

According to 14.20: 

&quot;An implicitly final exception parameter is final by virtue of its declaration, while an effectively final exception parameter is (as it were) final by virtue of how it is used. An exception parameter of a multi-catch clause is implicitly final, so will never occur as the left-hand operand of an assignment operator, but is not considered effectively final.&quot;

So one would expect the following code to fail to compiler:

// ---
interface I {
	void doit();
}
public class X {
	
	void foo() {
	try {
		
	} catch (NullPointerException | ArrayIndexOutOfBoundsException e) {
		I i = () -&gt; {
			System.out.println(e);
		};
	}
	}
}
// ---

but 8b74 compiles it fine.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2211372</commentid>
    <comment_count>7</comment_count>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-02-02 13:11:51 -0500</bug_when>
    <thetext>(In reply to comment #5)
&gt; Also please add a test verifying that the following compiles fine:
&gt; 
&gt; // ---
&gt; interface I {
&gt; 	void foo();
&gt; }
&gt; interface J {
&gt; 	
&gt; }
&gt; class X {
&gt; 	void foo(int [] p) {
&gt; 		for (int is : p) {
&gt; 			I j = new I () {
&gt; 				public void foo() {
&gt; 					System.out.println(is);
&gt; 				};
&gt; 			};
&gt; 		}
&gt; 	}
&gt; }
&gt; 
&gt; // ----
&gt; 
&gt; The above is legal code in Java 8, while illegal in Java 7.
&gt; 
&gt; We need to test with both inner classes and lambdas. Basically
&gt; each iteration of foreach loop is considered to have its own
&gt; distinct version.

Exactly, I&apos;m adding a test for every distinct say of binding a variable, just in case.
Also we should test for nested uses, i.e. effectively final local var bound in an inner class, and then passed into e.g. a lambda - useful to think of all the combinations once we get to emitting code, too.

Fixing this is causing a lot of rework into old testcases, guarding for the 1.8 variation. It&apos;ll be a day or two until it&apos;s ready for review.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2211373</commentid>
    <comment_count>8</comment_count>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-02-02 13:15:02 -0500</bug_when>
    <thetext>Implicitly final also satisfies &apos;final or effectively final&apos;, so I&apos;d expect it to compile, too. They&apos;re just saying that it&apos;s final, becayse that&apos;s easier than allowing assignment to a union typed var.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2211429</commentid>
    <comment_count>9</comment_count>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-02-03 05:06:28 -0500</bug_when>
    <thetext>(In reply to comment #4)
[...]
&gt; See org.eclipse.jdt.internal.compiler.lookup.TagBits.IsEffectivelyFinal
&gt; and IProblem.OuterLocalMustBeFinal.

I&apos;ve found an issue which may need some design consideration: The bit for IsEffectivelyFinal is set p the resolve/resolveType traversing, but since some of the changes to the potentially effectively final variable can happen lexicographically AFTER the use, we cannot detect this in the same traversion.

Example:

interface I {
	void doit();
}
public class X {
  public static void main(String[] args) {
    int var = 2;
    I x = new I() {
      public void doit() {
        System.out.println(var); // Error: var is not effectively final
      }
    };
    var=2;
  }
}

I see to options:
 1) defer this check until the flow analysis
 2) Remember each assumed effectively final use of the variable and make the check when we discover that the variable is assigned to.

Ideas anyone?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2211553</commentid>
    <comment_count>10</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-04 04:35:21 -0500</bug_when>
    <thetext>(In reply to comment #9)
&gt; I see to options:
&gt;  1) defer this check until the flow analysis
&gt;  2) Remember each assumed effectively final use of the variable and make the
&gt; check when we discover that the variable is assigned to.
&gt; 
&gt; Ideas anyone?

(1) is the prevailing modus operadi. See SingleNameReference#analyze* methods.
It would be ideal to report an error at the reference site rather than at the
assignment site. Perhaps org.eclipse.jdt.internal.compiler.ast.SingleNameReference.analyseCode(BlockScope, FlowContext, FlowInfo, boolean) would be a right place.

Look at the uses of ASTNode.DepthMASK. Not sure if these come out correctly
automatically at the moment - didn&apos;t check.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2211559</commentid>
    <comment_count>11</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-02-04 04:44:15 -0500</bug_when>
    <thetext>If deferred checking is necessary, FlowContext could come to the rescue.
LMK if you want me to propose s.t. here.

Otherwise collecting info in the variable binding during resolve, and reporting problems during analyse sounds like the simplest solution (which should allow reporting against the variable declaration).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2211633</commentid>
    <comment_count>12</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-02-04 06:49:42 -0500</bug_when>
    <thetext>(In reply to comment #11)
&gt; If deferred checking is necessary, FlowContext could come to the rescue.
&gt; LMK if you want me to propose s.t. here.
&gt; 
&gt; Otherwise collecting info in the variable binding during resolve, and
&gt; reporting problems during analyse sounds like the simplest solution (which
&gt; should allow reporting against the variable declaration).

OK, looking more closely at the requirements I should give better advice:

Already during resolve it should be possible to detect which local variables are accessed from a nested lambda body and record this fact in the variable binding using a new TagBit (this doesn&apos;t necessarily have to happen at this point, but should help performance as we can now avoid the next step in the regular case).

During analyseCode we should check for each variable marked in phase 1 if it is ever assigned in a state where it was already assigned (potentially assigned is sufficient to create the error) - this part uses a flowInfo and is similar to checks done for final variables - cf. SingleNameReference.analyseAssignment. Again mark this finding in the variable binding.

We may then want to defer reporting until generateCode to detect any SingleNameReference that has a binding with both bits from phase 1 &amp; 2 set, and report against this reference that the variable is not effectively final.

Does this correctly reflect the requirements?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2211638</commentid>
    <comment_count>13</comment_count>
      <attachid>226498</attachid>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-02-04 06:59:36 -0500</bug_when>
    <thetext>Created attachment 226498
Proposed fix for this issue

Proposed fix, moved the final-ness check from the resolveXxx phase (where the final/effectively final information is gathered) to the analyzeCode, as suggested.

To my horror, this change hasn&apos;t caused massive test breakages, it would appear that this particular error message isn&apos;t part of any previous test. Yikes!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2211644</commentid>
    <comment_count>14</comment_count>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-02-04 07:18:11 -0500</bug_when>
    <thetext>(In reply to comment #12)

Note that I uploaded the patch before I read your suggestions. The test may be way too simplistic if the IsEffectivelyFinal bit is not calculated using flow information, I&apos;m gathering more test cases.
 
&gt; Already during resolve it should be possible to detect which local variables
&gt; are accessed from a nested lambda body and record this fact in the variable
&gt; binding using a new TagBit (this doesn&apos;t necessarily have to happen at this
&gt; point, but should help performance as we can now avoid the next step in the
&gt; regular case).
&gt; 
&gt; During analyseCode we should check for each variable marked in phase 1 if it
&gt; is ever assigned in a state where it was already assigned (potentially
&gt; assigned is sufficient to create the error) - this part uses a flowInfo and
&gt; is similar to checks done for final variables - cf.
&gt; SingleNameReference.analyseAssignment. Again mark this finding in the
&gt; variable binding.
&gt; 
&gt; We may then want to defer reporting until generateCode to detect any
&gt; SingleNameReference that has a binding with both bits from phase 1 &amp; 2 set,
&gt; and report against this reference that the variable is not effectively final.
&gt;
&gt; Does this correctly reflect the requirements?

I&apos;m not sure if that&apos;s more complicated then needed; I need to revisit the spec to make sure. And I need to make more test cases.

Thanks for your input.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2211659</commentid>
    <comment_count>15</comment_count>
      <attachid>226500</attachid>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-02-04 07:41:12 -0500</bug_when>
    <thetext>Created attachment 226500
Simple test case showing the basics

&apos;args&apos; is effectively final, but &apos;var&apos; is not.

Many more testcases needed, and error reporting site needs discussion. I hugely prefer that the point of usage is reported, since that is the hardest one to spot. Once you&apos;re there, it&apos;s easy to press F3 and see where the declaration is.

Alternatively, we could report the error on assignments, rewording so that it reads &apos;Since &lt;varname&gt; is used inside a lambda or inner class method, it must be effectively final.&apos;
But then the user may have to look for the usage, and that&apos;s many more keystrokes / mouse moves and clicks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2213086</commentid>
    <comment_count>16</comment_count>
      <attachid>226646</attachid>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-02-06 11:49:47 -0500</bug_when>
    <thetext>Created attachment 226646
Patch for this issue

This adds detection of references which escape a lambda expression, and supplies an error if such a reference is to a non-final local variable from an enclosing scope.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2213091</commentid>
    <comment_count>17</comment_count>
      <attachid>226647</attachid>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-02-06 11:58:36 -0500</bug_when>
    <thetext>Created attachment 226647
Updated patch

Updated tests, test various sources of local declarations.

Gives same errors as javac (b74)

No apparent regressions, BTW.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2213275</commentid>
    <comment_count>18</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-02-06 18:38:40 -0500</bug_when>
    <thetext>To discuss the necessity of using a flowInfo consider this:

interface I {
	void doit();
}
public class X {
  public static void main(String[] args) {
    int var;
    if (args != null)
       var = args.length;
    else
       var = 2;
    I x = new I() {
      public void doit() {
        System.out.println(var);
      }
    };
  }
}

The summary of Part B of the spec sounds very restrictive:
  &quot;A variable is effectively final if it is never assigned to after its
   initialization.&quot;
However, 4.12.4, adds:
  &quot;In addition, a local variable whose declaration lacks an initializer is
   effectively final if all of the following are true:...&quot;

What follows explicitly relates to the concept of definite assignment. Thus I believe my example should indeed be legal, and we indeed need the flowInfo, right?


And: I support your point of reporting against the *usage* inside the
inner class / lambda. Forget comment 11 which is superseded by comment 12.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2213724</commentid>
    <comment_count>19</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-07 13:33:06 -0500</bug_when>
    <thetext>(In reply to comment #17)
&gt; Created attachment 226647 [details]
&gt; Updated patch

Thanks, At the moment I am banging my head against bug 399773. The present
bug has some dependencies on it, but not wholly. I&apos;ll review your patch
within the next 3-4 days and share comments, next steps.

If you want other work, Bug 399778 would be a possibility.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2213725</commentid>
    <comment_count>20</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-07 13:33:50 -0500</bug_when>
    <thetext>(In reply to comment #19)
&gt; (In reply to comment #17)
&gt; &gt; Created attachment 226647 [details]
&gt; &gt; Updated patch
&gt; 
&gt; Thanks, At the moment I am banging my head against bug 399773. The present
&gt; bug has some dependencies on it, but not wholly. I&apos;ll review your patch
&gt; within the next 3-4 days and share comments, next steps.
&gt; 
&gt; If you want other work, Bug 399778 would be a possibility.

I meant to say Bug 399778 has some dependency on bug 399773</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2214356</commentid>
    <comment_count>21</comment_count>
      <attachid>226799</attachid>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-02-08 16:17:10 -0500</bug_when>
    <thetext>Created attachment 226799
New patch which does better final-analysis

New patch which deferes non-finalness detection to the generateCode stage so that the analyseCode-operations can determine EffectiveFinalness first. Obviously, code is still not generated for lambdas, but the error is now triggered correctly.

No known regressions.

This is as big as a patch as I can do (237 lines), so I hope it&apos;s good.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2214358</commentid>
    <comment_count>22</comment_count>
      <attachid>226800</attachid>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-02-08 16:19:22 -0500</bug_when>
    <thetext>Created attachment 226800
Patch with tricky test from Stephan

This test requires the full data-flow analysis to do its thing.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2214486</commentid>
    <comment_count>23</comment_count>
      <attachid>226810</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-10 11:46:24 -0500</bug_when>
    <thetext>Created attachment 226810
Same patch combined and synched with top of branch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2214507</commentid>
    <comment_count>24</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-10 13:18:08 -0500</bug_when>
    <thetext>Hello Jesper, Thanks for the patch. Here are some comments to follow up:

(1) Scope: Instead of inventing additional infrastructure, let us reuse
existing ones: &quot;Reaching into outer classes local/fields&quot; is handled via
the notion of &quot;depth&quot;. See org.eclipse.jdt.internal.compiler.lookup.InvocationSite.setDepth(int).
NameReference implements this interface. The existing code bumps
up the depth when we leave a class scope to reach into its parent. 
Similarly we need to bump up the depth when we leave the lambda to 
reach into enclosing abstractions. To facilitate detection of this, 
we could add a method say crossesOverTypes

Scope#crossesOverTypes -&gt; return false
ClassScope#crossesOverTypes -&gt; return true
MethodScope#crossesOverTypes -&gt; return true iff lambda.

To detect if a method scope corresponds to a lambda expression, 
we can introduce an alternate constructor that takes a boolean.

This last sentence really is similar to the LambdaScope idea from 
one of your patches - I don&apos;t yet see a need for a full blown class 
even if small, yet - just a boolean in MethodScope suffices for now.
(If possible, we want to avoid littering the code with instanceof checks)

If we do this, then Scope will have to see a single line change just above

scope = scope.parent;

and will be --&gt; if (scope.crossesOverTypes()) depth++. (We should get 
rid of the bump up in class scope)

(2) The tag bit IsFromOutsideLambda is problematic - You are using bit14
which is already used for IsStrictlyAssigned for references. This would
lead to problems - it is just that the tests you have added don&apos;t trigger
the path where the other bit use is made. 

(3) The only real use of IsFromOutsideLambda is to switch between two
different messages - I don&apos;t see much value there. I would suggest we 
simply punt on this and say something neutral like:

&quot;As &apos;x&apos; is not final and not also effectively final, it cannot be accessed here&quot;

(4) Also note: due to incorrect check in ProblemReporter the messages
actually come reversed. i.e for lambda we say inner classes and vice versa.

&quot;here&quot; is good enough :)

(4) The change in QNR looks suspect. Effectively final is a requirement for
local and parameters - these cannot be referenced by qualified names. I think
existing code is materializing a LVM in QNR#resolve* - That looks suspect
too. Does that code ever trigger ?  It looks like mindless copy + paste on
somebody&apos;s part in the past :) 

(5) The duplicated code in Assignment and CompoundAssignment should be 
moved and centralized into SNR.analyzeAssignment (Removing the simplistic,
but-correct-for-java7 code from these files is the correct thing to have
done.)

(6) I know this came from copy + paste, but

String[] arguments =new String[]

should be 

String[] arguments = new String[]

(7) Finally, I don&apos;t think we should defer the error reporting to
code generation time. Each phase gets skipped when ignore further
investigation is set and the earlier an error is reported the better.
Here is a scheme I propose: (this is really the same as Stephan&apos;s
idea of collecting information in the binding see comment#11, but
elaborated)

(a) Introduce a new tag bit &apos;IsCapturedVariable&apos; in local variable bindings.
This bit need to be set to true whenever a outer local (depth &gt; 0) is
accessed.

(b) In Resolve anytime an assignment is seen (we don&apos;t have flow data
to tell us its definite/potential assigned state, but right now we don&apos;t
care), if it is to a captured variable, clear its effectively final bit.

(c) In analyze clear the effectively final bit on assignment to an already
potentially assigned variable (definite assignment also sets potential 
assigned status but not vice versa).

(d) When analyzeCode is called for the lambda body, the captured variables
must have been definitely assigned to - if not it triggers a different
error : may be uninitialized error.

(e) During analyze if we see a captured variable which is not effectively
final, we complain.

Does that sound good ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2214508</commentid>
    <comment_count>25</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-10 13:22:23 -0500</bug_when>
    <thetext>(In reply to comment #12)

&gt; OK, looking more closely at the requirements I should give better advice:
&gt; 
&gt; Already during resolve it should be possible to detect which local variables
&gt; are accessed from a nested lambda body and record this fact in the variable
&gt; binding using a new TagBit (this doesn&apos;t necessarily have to happen at this
&gt; point, but should help performance as we can now avoid the next step in the
&gt; regular case).
&gt; 
&gt; During analyseCode we should check for each variable marked in phase 1 if it
&gt; is ever assigned in a state where it was already assigned (potentially
&gt; assigned is sufficient to create the error) - this part uses a flowInfo and
&gt; is similar to checks done for final variables - cf.
&gt; SingleNameReference.analyseAssignment. Again mark this finding in the
&gt; variable binding.

Ah, I should read the comments patiently, that will save me lots of typing
time :)

Jesper, what I proposed in comment#24 is the same as what Stephan has
proposed in comment#12 but for one crucial difference. Also clearing
the effectively final bit on assignment of captured variables even in
the absence of flow info would allow us to pull up reporting to analyze
and not involve code generation.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2214510</commentid>
    <comment_count>26</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-02-10 13:27:23 -0500</bug_when>
    <thetext>(In reply to comment #25)
&gt; [...] Also clearing
&gt; the effectively final bit on assignment of captured variables even in
&gt; the absence of flow info would allow us to pull up reporting to analyze
&gt; and not involve code generation.

I think that&apos;s in conflict with examples like in comment 18, no?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2214511</commentid>
    <comment_count>27</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-10 13:46:53 -0500</bug_when>
    <thetext>(In reply to comment #26)
&gt; (In reply to comment #25)
&gt; &gt; [...] Also clearing
&gt; &gt; the effectively final bit on assignment of captured variables even in
&gt; &gt; the absence of flow info would allow us to pull up reporting to analyze
&gt; &gt; and not involve code generation.
&gt; 
&gt; I think that&apos;s in conflict with examples like in comment 18, no?

No. When the statement:

if (args != null)
       var = args.length;
    else
       var = 2;

is resolved, &apos;var&apos; would NOT have been tagged as a &quot;captured variable&quot; yet,
so we won&apos;t clear the effectively final bit: Unlike the effectively final
bit which starts out as true for all locals, I am proposing the captured
status start out at false and be set only when an outer local is seen.

Does that explanation sound right ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2214512</commentid>
    <comment_count>28</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-10 13:51:28 -0500</bug_when>
    <thetext>(In reply to comment #27)

&gt; Does that explanation sound right ?

To elaborate, a captured outer local must have been definitely assigned
to - if not analyze will report an error at the lambda use site.

Once it is tagged as captured, further assignments lexically post capture
are monitored by resolve(). Multiple assignment ahead of capture are
flagged by analyze(). So somebody is watching the back and someone else
is covering the front. We should be good.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2214513</commentid>
    <comment_count>29</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-02-10 14:06:26 -0500</bug_when>
    <thetext>(In reply to comment #27)
&gt; Does that explanation sound right ?

Much clearer, thanks.

But let me try again:

interface I {
	void doit();
}
public class X {
  public static void main(String[] args) {
    int var;
    if (args != null) {
       var = args.length;
       I x = new I() {
         public void doit() {
           System.out.println(var);
         }
       };
    } else {
       var = 2; // HERE
    }
  }
}

Wouldn&apos;t your approach at the location HERE clear the effectively final bit?
Resolve would think &quot;HERE&quot; happens after the anonymous class, but there is no &quot;after&quot; in parallel structures like this.

I understand your motivation, but I feel that using flowInfo to determine whether a variable is effectively final is the most natural way. Any other approach will need much more mind-bending to achieve the same, and is hence more difficult to maintain.

If not deferring reporting to generateCode is important, we might get away with a brief iteration of all locals in scope, similar to resource leak analysis, i.e., another action to perform whenever analyseCode leaves a Block.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2214514</commentid>
    <comment_count>30</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-10 14:18:33 -0500</bug_when>
    <thetext>(In reply to comment #29)
&gt; (In reply to comment #27)

&gt; Wouldn&apos;t your approach at the location HERE clear the effectively final bit?
&gt; Resolve would think &quot;HERE&quot; happens after the anonymous class, but there is
&gt; no &quot;after&quot; in parallel structures like this.

Indeed, you caught me napping there. It is post midnight in India :)
Thanks for the new example.

&gt; If not deferring reporting to generateCode is important, 

I would say it is important, but that not that important enough to bend
over backwards.

So, Jesper, let us stick to code generation time reporting for now. Could
you reconcile/polish/clean up based on the other comments ? Thanks.
Also if you could role the snippets in comment#5 and comment#29, that
would be super.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2214515</commentid>
    <comment_count>31</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-10 14:25:33 -0500</bug_when>
    <thetext>(In reply to comment #29)

&gt; I understand your motivation, but I feel that using flowInfo to determine
&gt; whether a variable is effectively final is the most natural way. Any other

Agreed. I was also misled by some of the experiments I was doing with Java 7
precise rethrow semantics: In the following program:

import java.io.IOException;
interface I {
    void doit();
}
public class X {
  public static void main(String[] args) throws IOException {

	try {
		throw new IOException();
	} catch (Exception e) {
		if (args == null) {
			throw e;
		} 
                else {
			e = null;
		}
	}
  }
}

commenting out the else block will make the program compile. That was
the simple minded Java 7 implicit final model. What is required for JSR335
is full fledge data and control flow analysis.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2214523</commentid>
    <comment_count>32</comment_count>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-02-10 15:37:23 -0500</bug_when>
    <thetext>(In reply to comment #24)
&gt; Hello Jesper, Thanks for the patch. Here are some comments to follow up:
&gt; 
&gt; (1) Scope: Instead of inventing additional infrastructure, let us reuse
&gt; existing ones: &quot;Reaching into outer classes local/fields&quot; is handled via
&gt; the notion of &quot;depth&quot;. See
&gt; org.eclipse.jdt.internal.compiler.lookup.InvocationSite.setDepth(int).
&gt; NameReference implements this interface. The existing code bumps
&gt; up the depth when we leave a class scope to reach into its parent. 
&gt; Similarly we need to bump up the depth when we leave the lambda to 
&gt; reach into enclosing abstractions. To facilitate detection of this, 
&gt; we could add a method say crossesOverTypes

There&apos;s a problem with just using depth (which was my first idea): Redefinition must work differently: In a lambda it&apos;s an error, but in an inner class it is OK, but gives a warning (same behaviour in javac). This is because a lambda block is semantically NOT a method body of its own, but merely a block with some bound variables. (It should add 0.5 of depth, so to speak)
Tricky, but the depth-dependent checks break down when you try (I tried). In a way, this becomes another case for LambdaScope? Also, al captured vars must be efficiently recorded in the context so they can be formals in the lambda$x method, that could also be handled in the scope, but it also works differently between lambdas and anon types.

&gt; Scope#crossesOverTypes -&gt; return false
&gt; ClassScope#crossesOverTypes -&gt; return true
&gt; MethodScope#crossesOverTypes -&gt; return true iff lambda.

A lambda doesn&apos;t cross over a type...

&gt; To detect if a method scope corresponds to a lambda expression, 
&gt; we can introduce an alternate constructor that takes a boolean.
&gt; 
&gt; This last sentence really is similar to the LambdaScope idea from 
&gt; one of your patches - I don&apos;t yet see a need for a full blown class 
&gt; even if small, yet - just a boolean in MethodScope suffices for now.
&gt; (If possible, we want to avoid littering the code with instanceof checks)

True, could check Scope.kind or we&apos;d introduce a getter as needed.

&gt; If we do this, then Scope will have to see a single line change just above
&gt; 
&gt; scope = scope.parent;
&gt; 
&gt; and will be --&gt; if (scope.crossesOverTypes()) depth++. (We should get 
&gt; rid of the bump up in class scope)
&gt; 
&gt; (2) The tag bit IsFromOutsideLambda is problematic - You are using bit14
&gt; which is already used for IsStrictlyAssigned for references. This would
&gt; lead to problems - it is just that the tests you have added don&apos;t trigger
&gt; the path where the other bit use is made. 
Oops! I thought I checked in the right places.

&gt; (3) The only real use of IsFromOutsideLambda is to switch between two
&gt; different messages - I don&apos;t see much value there. I would suggest we 
&gt; simply punt on this and say something neutral like:

There&apos;s more than that since using the depth is problematic.

As for fixing this in the patch: I&apos;ve two problems: 1. The patch is becoming too big for IP rules (250 line limit) and 2. I&apos;m away on vacation this week, more snow than 3G coverage, so I won&apos;t be able to make these fixes at the mlment. I leave it to you to decide whether to A) postpone, B) fix as desired, or C) apply as is, pending further refinements. :-)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2214549</commentid>
    <comment_count>33</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-10 19:34:10 -0500</bug_when>
    <thetext>(In reply to comment #32)

&gt; There&apos;s a problem with just using depth (which was my first idea):
&gt; Redefinition must work differently: In a lambda it&apos;s an error, but in an
&gt; inner class it is OK, but gives a warning (same behaviour in javac). This is

Can this be handled by currentScope.methodScope().isLambdaScope() ? 

&gt; &gt; Scope#crossesOverTypes -&gt; return false
&gt; &gt; ClassScope#crossesOverTypes -&gt; return true
&gt; &gt; MethodScope#crossesOverTypes -&gt; return true iff lambda.
&gt; 
&gt; A lambda doesn&apos;t cross over a type...

That distinction is just academic ?

&gt; C) apply as is, pending further refinements. :-)

Thanks, I&apos;ll opt for C. I&apos;ll make the changes along the lines that has been
discussed and if there are any follow up issues, you can handle it upon your
return - have a great vacation !</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2214550</commentid>
    <comment_count>34</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-10 19:35:02 -0500</bug_when>
    <thetext>(In reply to comment #33)
&gt; (In reply to comment #32)
&gt; 
&gt; &gt; There&apos;s a problem with just using depth (which was my first idea):
&gt; &gt; Redefinition must work differently: In a lambda it&apos;s an error, but in an
&gt; &gt; inner class it is OK, but gives a warning (same behaviour in javac). This is
&gt; 
&gt; Can this be handled by currentScope.methodScope().isLambdaScope()  

better yet -&gt; currentScope.isLambdaScope() ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2214555</commentid>
    <comment_count>35</comment_count>
      <attachid>226799</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-10 20:03:04 -0500</bug_when>
    <thetext>Comment on attachment 226799
New patch which does better final-analysis

Released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=683ea9e225586815608aba47b7144305522e9131 - Thanks !</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2214557</commentid>
    <comment_count>36</comment_count>
      <attachid>226800</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-10 20:11:01 -0500</bug_when>
    <thetext>Comment on attachment 226800
Patch with tricky test from Stephan

Released these tests after synching with branch head.
Thanks Jesper, Thanks Stephan.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2214568</commentid>
    <comment_count>37</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-10 23:13:55 -0500</bug_when>
    <thetext>(In reply to comment #24)

&gt; (4) Also note: due to incorrect check in ProblemReporter the messages
&gt; actually come reversed. i.e for lambda we say inner classes and vice versa.

That&apos;s puzzling. In the IDE I see the messages coming out reversed. In the
junit, they are as expected. I&apos;ll see why.


(In reply to comment #32)

&gt; &gt; Scope#crossesOverTypes -&gt; return false
&gt; &gt; ClassScope#crossesOverTypes -&gt; return true
&gt; &gt; MethodScope#crossesOverTypes -&gt; return true iff lambda.
&gt; 
&gt; A lambda doesn&apos;t cross over a type...

I&apos;ll settle for Scope.isCrossOverScope()</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2214570</commentid>
    <comment_count>38</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-10 23:23:55 -0500</bug_when>
    <thetext>We should report an error for

// -
interface I {
	void foo();
}

class X {
	void foo() {
		int x = 10;
		I i = () -&gt; {
			System.out.println(x++);
		};
	}
}
//

presently we don&apos;t. I&apos;ll fix this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2214578</commentid>
    <comment_count>39</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-11 01:54:26 -0500</bug_when>
    <thetext>(In reply to comment #38)

After the patch this code compiles fine: it should not:

// ---
import java.io.IOException;

class X {
	void foo(int x) throws IOException {
		try {
			throw new IOException();
		} catch (Exception e) {
			if (x == 0) {
				throw e;
			} else {
				e = null;
			}
		}
	}
}
// -----

Basically removing the code from org.eclipse.jdt.internal.compiler.ast.SingleNameReference.resolveType(BlockScope)
was wrong.

Java7&apos;s notion of effectively final catch parameters was very simplistic and
did not involve data &amp; control flow analysis. If *any* assignment was seen at
all it was deemed to be not effectively final.

After the patch we are applying Java 8&apos;s (rigorous) definition of effective
finality to catch parameters also - we should not.

I&apos;ll include a fix in my follow up patch.

Sorry that this was not caught by the test suite.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2214657</commentid>
    <comment_count>40</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-11 06:39:16 -0500</bug_when>
    <thetext>Another test that breaks with the released code: 

// -------------------
class AJB {
  void foo() {
    int z = 0;
    new Object(){
      void bar(int x){
        x = z;
      }
    };
  }
}

This should trigger an error:

&quot;Cannot refer to a non-final variable z inside an inner class defined in a different method&quot;, but it doesn&apos;t any more.

BTW, the message is broken, it should say:
&quot;Cannot refer to a non-final variable z in a different method inside an inner
class&quot;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2214658</commentid>
    <comment_count>41</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-11 06:40:38 -0500</bug_when>
    <thetext>(In reply to comment #24)

&gt; (4) The change in QNR looks suspect. Effectively final is a requirement for
&gt; local and parameters - these cannot be referenced by qualified names. I think
&gt; existing code is materializing a LVM in QNR#resolve* - That looks suspect
&gt; too. Does that code ever trigger ?  It looks like mindless copy + paste on
&gt; somebody&apos;s part in the past :) 

My code review skills post midnight are what are suspect :) This code is
very much necessary.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2214661</commentid>
    <comment_count>42</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-11 06:45:08 -0500</bug_when>
    <thetext>(In reply to comment #32)

&gt; There&apos;s a problem with just using depth (which was my first idea):
&gt; Redefinition must work differently: In a lambda it&apos;s an error, but in an
&gt; inner class it is OK, but gives a warning (same behaviour in javac). This is
&gt; because a lambda block is semantically NOT a method body of its own, but
&gt; merely a block with some bound variables. (It should add 0.5 of depth, so to
&gt; speak)
&gt; Tricky, but the depth-dependent checks break down when you try (I tried).

OK, I tried too and I understand what you mean now :) I&apos;ll post a patch with
fixes to all the issues soon.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2214668</commentid>
    <comment_count>43</comment_count>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-02-11 07:03:29 -0500</bug_when>
    <thetext>(In reply to comment #40)
&gt; Another test that breaks with the released code: 
&gt; 
&gt; // -------------------
&gt; class AJB {
&gt;   void foo() {
&gt;     int z = 0;
&gt;     new Object(){
&gt;       void bar(int x){
&gt;         x = z;
&gt;       }
&gt;     };
&gt;   }
&gt; }
&gt; 
&gt; This should trigger an error:
&gt; 
&gt; &quot;Cannot refer to a non-final variable z inside an inner class defined in a
&gt; different method&quot;, but it doesn&apos;t any more.

In earlier versions, yes, but under 1.8 it shouldn&apos;t complain.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2214673</commentid>
    <comment_count>44</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-11 07:45:40 -0500</bug_when>
    <thetext>(In reply to comment #43)

&gt; In earlier versions, yes, but under 1.8 it shouldn&apos;t complain.

Yes, per comment#0.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2214778</commentid>
    <comment_count>45</comment_count>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-02-11 10:50:16 -0500</bug_when>
    <thetext>(In reply to comment #44)
&gt; (In reply to comment #43)
&gt; 
&gt; &gt; In earlier versions, yes, but under 1.8 it shouldn&apos;t complain.
&gt; 
&gt; Yes, per comment#0.

I disagree, since there is no assignment to &apos;z&apos;, it is effectively final. javac doesn&apos;t complain. Did you exclude a line or something?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2214782</commentid>
    <comment_count>46</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-11 10:58:04 -0500</bug_when>
    <thetext>(In reply to comment #45)
&gt; (In reply to comment #44)
&gt; &gt; (In reply to comment #43)
&gt; &gt; 
&gt; &gt; &gt; In earlier versions, yes, but under 1.8 it shouldn&apos;t complain.
&gt; &gt; 
&gt; &gt; Yes, per comment#0.
&gt; 
&gt; I disagree, since there is no assignment to &apos;z&apos;, it is effectively final.
&gt; javac doesn&apos;t complain. Did you exclude a line or something?

:)

I meant &quot;Yes, we should not complain&quot;, as also pointed out by comment#0.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2214787</commentid>
    <comment_count>47</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-11 11:04:04 -0500</bug_when>
    <thetext>Two more issues:

// ---
interface I {
	void doit ();
}
class X {
	int p;
	void foo(int p) {
		int i = 10;
		X x = new X();
		x = new X();
		I l = () -&gt; {
			x.p = i++;
		};
	}
}  
// ------------

This should generate two errors about x and i, but doesn&apos;t.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2215171</commentid>
    <comment_count>48</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-12 03:01:43 -0500</bug_when>
    <thetext>Incorporated review comments, fixed issues found during testing and reported
earlier here, polished a few things, dictatorially renamed a few symbols and
released the implementation via:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=9966baba46edc3df548fabd09b133cadc0093ca6

Additional tests released via:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=d32dbe370312bc68ef5b59c6268bfdfcda839b17

Jesper, I didn&apos;t change the design or implementation, so thanks for your
work on this capability.

Stephan, thanks for the discussion, tests etc.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2224980</commentid>
    <comment_count>49</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-02 12:55:13 -0500</bug_when>
    <thetext>335 spec v0.6.2 has introduced this new rule marked with ***

A lambda expression is compatible in an assignment, invocation, or casting 
context with type T if T is a function type (9.8) and the expression is 
congruent with a function descriptor derived from T.

A lambda expression is congruent with a function descriptor if the 
following are true:

Where the lambda parameters are assumed to have the same types as the 
descriptor parameter types:

*** There are no compile-time errors in the lambda body, except for 
(possibly) the exception checking errors specified by 11.2.3.

This is painfull. There are compile errors that we report
during resolution (aka semantic analysis), analyze (aka control/data flow
analysis) and *code generation* phases. 

For a lambda expression in a method invocation, we are going to have to 
resolve the lambda method possibly multiple times, analyze multiple times,
generate code multiple times etc to figure out if there are compile 
errors. (in the present scheme of things)

These errors are issued from where they are issued from for a reason. It
is going to be inconvenient to &quot;pull up&quot; the reporting.

https://bugs.eclipse.org/bugs/show_bug.cgi?id=401610#c3 has created the
infrastructure to do multiple traversals, so the complication is not
in implementing thus change, but in implementing it efficiently. But the
complexity is intrinsic to the specification and we should be able to
approach the intrinsic complexity and may be thing will wash out in the end.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2224982</commentid>
    <comment_count>50</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-02 12:58:22 -0500</bug_when>
    <thetext>Already https://bugs.eclipse.org/bugs/show_bug.cgi?id=401939 calls
for double analysis, but these are carefully restricted to the
real situations where heuristics won&apos;t work and we have to fail over
to full double analysis.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2224984</commentid>
    <comment_count>51</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-02 13:08:51 -0500</bug_when>
    <thetext>(In reply to comment #49)

&gt; https://bugs.eclipse.org/bugs/show_bug.cgi?id=401610#c3 has created the
&gt; infrastructure to do multiple traversals, so the complication is not
&gt; in implementing thus change,

I may have spoken too soon. Bug 401610 has created the infrastructure
for multiple traversals of the lambda itself, but there is nothing to
support multiple traversals of the enclosing context. Comment #29 type
of cases are going to be hard to handle.

Various solutions can be devised - all of them are going to require a good
bit of work I suspect.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2224986</commentid>
    <comment_count>52</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-03-02 13:30:59 -0500</bug_when>
    <thetext>(In reply to comment #49)
&gt; *** There are no compile-time errors in the lambda body, except for 
&gt; (possibly) the exception checking errors specified by 11.2.3.
&gt; 
&gt; This is painfull. There are compile errors that we report
&gt; during resolution (aka semantic analysis), analyze (aka control/data flow
&gt; analysis) and *code generation* phases. 

Have you checked what kinds of problems we report during code gen?
Are these really JLS-based errors or just ECJ warnings (which should
not affect resolution, right?) ?

I remember unused local warnings, which seem to fall into the second category.

What else?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2225000</commentid>
    <comment_count>53</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-02 14:44:11 -0500</bug_when>
    <thetext>(In reply to comment #52)

&gt; Have you checked what kinds of problems we report during code gen?
&gt; Are these really JLS-based errors or just ECJ warnings (which should
&gt; not affect resolution, right?) ?

Well, most recently we added errors for non-effectively final variable
usage inside lambda. 

&gt; What else?

I had noticed earlier that noSuchEnclosingInstance which would be JLS
required error gets reported during code generation. I don&apos;t know of
an easy way of finding out the exhaustive list.

Here perhaps is a huge silver lining: We _may_ be able to completely punt
on this requirement after all: Errors induced by surrounding context issues
(such as non-effective final usage) should show up irrespective of the
descriptor type being considered for compatibility check, right ? The 
descriptor only fills in the local blanks in the lambda (missing return
type, elided parameter types, throws clauses) and cannot fundamentally
alter a lambda&apos;s well formedness with respect to its context - right ?

Any holes in that reasoning ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2225061</commentid>
    <comment_count>54</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-03 05:19:07 -0500</bug_when>
    <thetext>(In reply to comment #49)
&gt; 335 spec v0.6.2 has introduced this new rule marked with ***

My eyes almost popped out of their sockets when I read it the first time,
but this is a false alarm. Sorry. We _can_ punt on this requirement - If the
lambda is FUBAR, then nothing that the descriptor of the target type from
the context can impose on the lambda can change the ill-formedness of
the lambda and so from a compatibility/applicability pov, any candidate method
is as  good as or as bad as the other. 

What this new rule is intended to require is to check whether the lambda
which is otherwise well formed, gets rendered ill-formed when the descriptor
types from the context are imposed on it - This is handled in https://bugs.eclipse.org/bugs/show_bug.cgi?id=402219.

Overall, this new rule will have a salutary effect in (a) minimizing ambiguity
in overload resolution and (b) bring the compilers closer in conformance.

For example, 8b76 javac reports the call as being ambiguous in the
following:

// --
interface I {
	String foo(String s1, String s2);
}

interface J {
	X foo(X x1, X x2);
}

public class X { 
	void goo(I i) {}
	void goo(J j) {}
    public static void main(String [] args) {
	new X().goo((p1, p2) -&gt; p1 + p2);
    }
}  

Even by 0.6.1 rules, this call is not ambiguous and eclipse was compiling
it correctly. The new rule will force javac to conform with eclipse.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2328790</commentid>
    <comment_count>55</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-11-11 11:27:10 -0500</bug_when>
    <thetext>I&apos;ve aligned both problem messages with existing similar messages:
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=fb2dd37cec63b32be19be47d4358718ed4d76649

- is required to be -&gt; must be
- variable -&gt; local variable
- in a different method inside an inner class -&gt; defined in an enclosing scope
  (reuse terminology; also correct for local variable defined in an initializer)</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="0"
              isprivate="0"
          >
            <attachid>226498</attachid>
            <date>2013-02-04 06:59:00 -0500</date>
            <delta_ts>2013-02-06 11:50:05 -0500</delta_ts>
            <desc>Proposed fix for this issue</desc>
            <filename>file_382721.txt</filename>
            <type>text/plain</type>
            <size>11416</size>
            <attacher name="Jesper Moller">jesper</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMA0KI1Agb3JnLmVjbGlwc2UuamR0LmNvcmUN
CmRpZmYgLS1naXQgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2NvcmUvY29tcGlsZXIvSVByb2Js
ZW0uamF2YSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvY29yZS9jb21waWxlci9JUHJvYmxlbS5q
YXZhDQppbmRleCA0ZDQ5ZGNkLi5mZTk2YWRhIDEwMDY0NA0KLS0tIGNvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9jb3JlL2NvbXBpbGVyL0lQcm9ibGVtLmphdmENCisrKyBjb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvY29yZS9jb21waWxlci9JUHJvYmxlbS5qYXZhDQpAQCAtMTYzLDYgKzE2Myw3IEBA
DQogICoJCQkJCQkJCQlOdWxsaXR5TWlzbWF0Y2hpbmdUeXBlQW5ub3RhdGlvblVuY2hlY2tlZA0K
ICAqICAgICAgSmVzcGVyIFMgTW9sbGVyICAtIGFkZGVkIHRoZSBmb2xsb3dpbmcgY29uc3RhbnRz
DQogICoJCQkJCQkJCQlUYXJnZXRUeXBlTm90QUZ1bmN0aW9uYWxJbnRlcmZhY2UNCisgKgkJCQkJ
CQkJCU91dGVyTG9jYWxNdXN0QmVFZmZlY3RpdmVseUZpbmFsDQogICoqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKiovDQogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlcjsNCiANCkBAIC0x
MzQ1LDYgKzEzNDYsOCBAQA0KIAlpbnQgVW51c2VkVHlwZVBhcmFtZXRlciA9IFR5cGVSZWxhdGVk
ICsgNjYxOw0KIAkvKiogQHNpbmNlIDMuOSAqLw0KIAlpbnQgSWxsZWdhbEFycmF5T2ZVbmlvblR5
cGUgPSBUeXBlUmVsYXRlZCArIDY2MjsNCisJLyoqIEBzaW5jZSAzLjkgKi8NCisJaW50IE91dGVy
TG9jYWxNdXN0QmVFZmZlY3RpdmVseUZpbmFsID0gSW50ZXJuYWwgKyA2NjM7DQogDQogCS8qKg0K
IAkgKiBDb3JydXB0ZWQgYmluYXJpZXMNCmRpZmYgLS1naXQgY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9OYW1lUmVmZXJlbmNlLmphdmEgY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9OYW1lUmVmZXJlbmNlLmphdmENCmlu
ZGV4IDgxNjAwZjAuLjRiMDgxYWEgMTAwNjQ0DQotLS0gY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2FzdC9OYW1lUmVmZXJlbmNlLmphdmENCisrKyBjb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L05hbWVSZWZlcmVuY2UuamF2YQ0K
QEAgLTEsNSArMSw1IEBADQogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCi0gKiBDb3B5cmlnaHQg
KGMpIDIwMDAsIDIwMTIgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuDQorICogQ29weXJpZ2h0
IChjKSAyMDAwLCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLg0KICAqIEFsbCByaWdo
dHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMN
CiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1
YmxpYyBMaWNlbnNlIHYxLjANCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlv
biwgYW5kIGlzIGF2YWlsYWJsZSBhdA0KQEAgLTExLDkgKzExLDEzIEBADQogICoNCiAgKiBDb250
cmlidXRvcnM6DQogICogICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJIGFuZCBpbXBs
ZW1lbnRhdGlvbg0KKyAqICAgICBKZXNwZXIgUyBNb2xsZXIgLSBDb250cmlidXRpb25zIGZvcg0K
KyAqCQkJCQkJCWJ1ZyAzODI3MjEgLSBbMS44XVtjb21waWxlcl0gRWZmZWN0aXZlbHkgZmluYWwg
dmFyaWFibGVzIG5lZWRzIHNwZWNpYWwgdHJlYXRtZW50DQogICoqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KiovDQogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0Ow0KIA0K
K2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuY2xhc3NmbXQuQ2xhc3NG
aWxlQ29uc3RhbnRzOw0KK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
Zmxvdy5GbG93SW5mbzsNCiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVy
Lmxvb2t1cC4qOw0KIA0KIHB1YmxpYyBhYnN0cmFjdCBjbGFzcyBOYW1lUmVmZXJlbmNlIGV4dGVu
ZHMgUmVmZXJlbmNlIGltcGxlbWVudHMgSW52b2NhdGlvblNpdGUgew0KQEAgLTcxLDQgKzc1LDI1
IEBADQogcHVibGljIGFic3RyYWN0IFN0cmluZyB1bmJvdW5kUmVmZXJlbmNlRXJyb3JOYW1lKCk7
DQogDQogcHVibGljIGFic3RyYWN0IGNoYXJbXVtdIGdldE5hbWUoKTsNCisNCitwcm90ZWN0ZWQg
dm9pZCBjaGVja0xvY2FsVmFyaWFibGVSZWFkKEJsb2NrU2NvcGUgY3VycmVudFNjb3BlLCBGbG93
SW5mbyBmbG93SW5mbykgew0KKwlMb2NhbFZhcmlhYmxlQmluZGluZyBsb2NhbEJpbmRpbmc7DQor
CWlmICghZmxvd0luZm8uaXNEZWZpbml0ZWx5QXNzaWduZWQobG9jYWxCaW5kaW5nID0gKExvY2Fs
VmFyaWFibGVCaW5kaW5nKSB0aGlzLmJpbmRpbmcpKSB7DQorCQljdXJyZW50U2NvcGUucHJvYmxl
bVJlcG9ydGVyKCkudW5pbml0aWFsaXplZExvY2FsVmFyaWFibGUobG9jYWxCaW5kaW5nLCB0aGlz
KTsNCisJfQ0KKwlpZiAoIWxvY2FsQmluZGluZy5pc0ZpbmFsKCkgJiYgKHRoaXMuYml0cyAmIEFT
VE5vZGUuRGVwdGhNQVNLKSAhPSAwKSB7DQorCQlpZiAoY3VycmVudFNjb3BlLmNvbXBpbGVyT3B0
aW9ucygpLmNvbXBsaWFuY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84KSB7DQor
CQkJaWYgKCFsb2NhbEJpbmRpbmcuaXNFZmZlY3RpdmVseUZpbmFsKCkpIHsNCisJCQkJY3VycmVu
dFNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmNhbm5vdFJlZmVyVG9Ob25FZmZlY3RpdmVseUZpbmFs
T3V0ZXJMb2NhbChsb2NhbEJpbmRpbmcsIHRoaXMpOw0KKwkJCX0NCisJCX0gZWxzZSB7DQorCQkJ
Y3VycmVudFNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmNhbm5vdFJlZmVyVG9Ob25GaW5hbE91dGVy
TG9jYWwobG9jYWxCaW5kaW5nLCB0aGlzKTsNCisJCX0NCisJfQ0KKwlpZiAoKGZsb3dJbmZvLnRh
Z0JpdHMgJiBGbG93SW5mby5VTlJFQUNIQUJMRSkgPT0gMCkgew0KKwkJbG9jYWxCaW5kaW5nLnVz
ZUZsYWcgPSBMb2NhbFZhcmlhYmxlQmluZGluZy5VU0VEOw0KKwl9IGVsc2UgaWYgKGxvY2FsQmlu
ZGluZy51c2VGbGFnID09IExvY2FsVmFyaWFibGVCaW5kaW5nLlVOVVNFRCkgew0KKwkJbG9jYWxC
aW5kaW5nLnVzZUZsYWcgPSBMb2NhbFZhcmlhYmxlQmluZGluZy5GQUtFX1VTRUQ7DQorCX0NCit9
DQogfQ0KZGlmZiAtLWdpdCBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvYXN0L1F1YWxpZmllZE5hbWVSZWZlcmVuY2UuamF2YSBjb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1F1YWxpZmllZE5hbWVSZWZlcmVuY2UuamF2YQ0KaW5k
ZXggOTFhZjcyYi4uMzQ2NzM1NCAxMDA2NDQNCi0tLSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L1F1YWxpZmllZE5hbWVSZWZlcmVuY2UuamF2YQ0KKysrIGNv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUXVhbGlmaWVkTmFt
ZVJlZmVyZW5jZS5qYXZhDQpAQCAtMSw1ICsxLDUgQEANCiAvKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
Kg0KLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMiBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVy
cy4NCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTMgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhl
cnMuDQogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21w
YW55aW5nIG1hdGVyaWFscw0KICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMg
b2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMA0KICAqIHdoaWNoIGFjY29tcGFuaWVz
IHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0DQpAQCAtMTcsNiArMTcsOCBA
QA0KICAqCQkJCQkJCQlidWcgMzY1NTE5IC0gZWRpdG9yaWFsIGNsZWFudXAgYWZ0ZXIgYnVnIDE4
NjM0MiBhbmQgYnVnIDM2NTM4Nw0KICAqCQkJCQkJCQlidWcgMzY4NTQ2IC0gW2NvbXBpbGVyXVty
ZXNvdXJjZV0gQXZvaWQgcmVtYWluaW5nIGZhbHNlIHBvc2l0aXZlcyBmb3VuZCB3aGVuIGNvbXBp
bGluZyB0aGUgRWNsaXBzZSBTREsNCiAgKgkJCQkJCQkJYnVnIDM0NTMwNSAtIFtjb21waWxlcl1b
bnVsbF0gQ29tcGlsZXIgbWlzaWRlbnRpZmllcyBhIGNhc2Ugb2YgInZhcmlhYmxlIGNhbiBvbmx5
IGJlIG51bGwiDQorICogICAgIEplc3BlciBTIE1vbGxlciAtIENvbnRyaWJ1dGlvbnMgZm9yDQor
ICoJCQkJCQkJCWJ1ZyAzODI3MjEgLSBbMS44XVtjb21waWxlcl0gRWZmZWN0aXZlbHkgZmluYWwg
dmFyaWFibGVzIG5lZWRzIHNwZWNpYWwgdHJlYXRtZW50DQogICoqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KiovDQogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0Ow0KIA0K
QEAgLTIwNCwxNSArMjA2LDcgQEANCiAJCQl9DQogCQkJYnJlYWs7DQogCQljYXNlIEJpbmRpbmcu
TE9DQUwgOiAvLyByZWFkaW5nIGEgbG9jYWwgdmFyaWFibGUNCi0JCQlMb2NhbFZhcmlhYmxlQmlu
ZGluZyBsb2NhbEJpbmRpbmc7DQotCQkJaWYgKCFmbG93SW5mby5pc0RlZmluaXRlbHlBc3NpZ25l
ZChsb2NhbEJpbmRpbmcgPSAoTG9jYWxWYXJpYWJsZUJpbmRpbmcpIHRoaXMuYmluZGluZykpIHsN
Ci0JCQkJY3VycmVudFNjb3BlLnByb2JsZW1SZXBvcnRlcigpLnVuaW5pdGlhbGl6ZWRMb2NhbFZh
cmlhYmxlKGxvY2FsQmluZGluZywgdGhpcyk7DQotCQkJfQ0KLQkJCWlmICgoZmxvd0luZm8udGFn
Qml0cyAmIEZsb3dJbmZvLlVOUkVBQ0hBQkxFKSA9PSAwKSB7DQotCQkJCWxvY2FsQmluZGluZy51
c2VGbGFnID0gTG9jYWxWYXJpYWJsZUJpbmRpbmcuVVNFRDsNCi0JCQl9IGVsc2UgaWYgKGxvY2Fs
QmluZGluZy51c2VGbGFnID09IExvY2FsVmFyaWFibGVCaW5kaW5nLlVOVVNFRCkgew0KLQkJCQls
b2NhbEJpbmRpbmcudXNlRmxhZyA9IExvY2FsVmFyaWFibGVCaW5kaW5nLkZBS0VfVVNFRDsNCi0J
CQl9DQorCQkJY2hlY2tMb2NhbFZhcmlhYmxlUmVhZChjdXJyZW50U2NvcGUsIGZsb3dJbmZvKTsN
CiAJCQlpZiAobmVlZFZhbHVlKSB7DQogCQkJCWNoZWNrTlBFKGN1cnJlbnRTY29wZSwgZmxvd0Nv
bnRleHQsIGZsb3dJbmZvLCB0cnVlKTsNCiAJCQl9DQpAQCAtOTQ1LDkgKzkzOSw2IEBADQogCQkJ
CQl0aGlzLmJpdHMgJj0gfkFTVE5vZGUuUmVzdHJpY3RpdmVGbGFnTUFTSzsgLy8gY2xlYXIgYml0
cw0KIAkJCQkJdGhpcy5iaXRzIHw9IEJpbmRpbmcuTE9DQUw7DQogCQkJCQlMb2NhbFZhcmlhYmxl
QmluZGluZyBsb2NhbCA9IChMb2NhbFZhcmlhYmxlQmluZGluZykgdGhpcy5iaW5kaW5nOw0KLQkJ
CQkJaWYgKCFsb2NhbC5pc0ZpbmFsKCkgJiYgKCh0aGlzLmJpdHMgJiBBU1ROb2RlLkRlcHRoTUFT
SykgIT0gMCkpIHsNCi0JCQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5jYW5ub3RSZWZlclRv
Tm9uRmluYWxPdXRlckxvY2FsKChMb2NhbFZhcmlhYmxlQmluZGluZykgdGhpcy5iaW5kaW5nLCB0
aGlzKTsNCi0JCQkJCX0NCiAJCQkJCWlmIChsb2NhbC50eXBlICE9IG51bGwgJiYgKGxvY2FsLnR5
cGUudGFnQml0cyAmIFRhZ0JpdHMuSGFzTWlzc2luZ1R5cGUpICE9IDApIHsNCiAJCQkJCQkvLyBv
bmx5IGNvbXBsYWluIGlmIGZpZWxkIHJlZmVyZW5jZSAoZm9yIGxvY2FsLCBpdHMgdHlwZSBnb3Qg
ZmxhZ2dlZCBhbHJlYWR5KQ0KIAkJCQkJCXJldHVybiBudWxsOw0KZGlmZiAtLWdpdCBjb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1NpbmdsZU5hbWVSZWZlcmVu
Y2UuamF2YSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1Np
bmdsZU5hbWVSZWZlcmVuY2UuamF2YQ0KaW5kZXggMDY3NmNiYi4uZTQ4YTc2ZiAxMDA2NDQNCi0t
LSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1NpbmdsZU5h
bWVSZWZlcmVuY2UuamF2YQ0KKysrIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hc3QvU2luZ2xlTmFtZVJlZmVyZW5jZS5qYXZhDQpAQCAtMSw1ICsxLDUgQEANCiAv
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKg0KLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMiBJQk0g
Q29ycG9yYXRpb24gYW5kIG90aGVycy4NCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTMgSUJN
IENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuDQogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBw
cm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscw0KICAqIGFyZSBtYWRlIGF2YWls
YWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMA0K
ICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxl
IGF0DQpAQCAtMTMsNiArMTMsOCBAQA0KICAqICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFs
IEFQSSBhbmQgaW1wbGVtZW50YXRpb24NCiAgKiAgICAgU3RlcGhhbiBIZXJybWFubiA8c3RlcGhh
bkBjcy50dS1iZXJsaW4uZGU+IC0gQ29udHJpYnV0aW9uIGZvciBidWcgMjkyNDc4IC0gUmVwb3J0
IHBvdGVudGlhbGx5IG51bGwgYWNyb3NzIHZhcmlhYmxlIGFzc2lnbm1lbnQsDQogICogICAgIAkJ
CQkJCQkJCQkJICAgIENvbnRyaWJ1dGlvbiBmb3IgYnVnIDE4NTY4MiAtIEluY3JlbWVudC9kZWNy
ZW1lbnQgb3BlcmF0b3JzIG1hcmsgbG9jYWwgdmFyaWFibGVzIGFzIHJlYWQNCisgKiAgICAgSmVz
cGVyIFMgTW9sbGVyIC0gQ29udHJpYnV0aW9ucyBmb3INCisgKgkJCQkJCQkJCQkJCSAgICAgQ29u
dHJpYnV0aW9uIGZvciBidWcgMzgyNzIxIC0gWzEuOF1bY29tcGlsZXJdIEVmZmVjdGl2ZWx5IGZp
bmFsIHZhcmlhYmxlcyBuZWVkcyBzcGVjaWFsIHRyZWF0bWVudA0KICAqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqLw0KIHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdDsN
CiANCkBAIC0xNjQsNiArMTY2LDkgQEANCiANCiBwdWJsaWMgRmxvd0luZm8gYW5hbHlzZUNvZGUo
QmxvY2tTY29wZSBjdXJyZW50U2NvcGUsIEZsb3dDb250ZXh0IGZsb3dDb250ZXh0LCBGbG93SW5m
byBmbG93SW5mbywgYm9vbGVhbiB2YWx1ZVJlcXVpcmVkKSB7DQogCXN3aXRjaCAodGhpcy5iaXRz
ICYgQVNUTm9kZS5SZXN0cmljdGl2ZUZsYWdNQVNLKSB7DQorCQljYXNlIEJpbmRpbmcuTE9DQUwg
OiAvLyByZWFkaW5nIGEgbG9jYWwgdmFyaWFibGUNCisJCQljaGVja0xvY2FsVmFyaWFibGVSZWFk
KGN1cnJlbnRTY29wZSwgZmxvd0luZm8pOw0KKwkJCWJyZWFrOw0KIAkJY2FzZSBCaW5kaW5nLkZJ
RUxEIDogLy8gcmVhZGluZyBhIGZpZWxkDQogCQkJaWYgKHZhbHVlUmVxdWlyZWQgfHwgY3VycmVu
dFNjb3BlLmNvbXBpbGVyT3B0aW9ucygpLmNvbXBsaWFuY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25z
dGFudHMuSkRLMV80KSB7DQogCQkJCW1hbmFnZVN5bnRoZXRpY0FjY2Vzc0lmTmVjZXNzYXJ5KGN1
cnJlbnRTY29wZSwgZmxvd0luZm8sIHRydWUgLypyZWFkLWFjY2VzcyovKTsNCkBAIC0xODEsMTYg
KzE4Niw2IEBADQogCQkJCWN1cnJlbnRTY29wZS5yZXNldERlY2xhcmluZ0NsYXNzTWV0aG9kU3Rh
dGljRmxhZyhmaWVsZEJpbmRpbmcuZGVjbGFyaW5nQ2xhc3MpOw0KIAkJCX0NCiAJCQlicmVhazsN
Ci0JCWNhc2UgQmluZGluZy5MT0NBTCA6IC8vIHJlYWRpbmcgYSBsb2NhbCB2YXJpYWJsZQ0KLQkJ
CUxvY2FsVmFyaWFibGVCaW5kaW5nIGxvY2FsQmluZGluZzsNCi0JCQlpZiAoIWZsb3dJbmZvLmlz
RGVmaW5pdGVseUFzc2lnbmVkKGxvY2FsQmluZGluZyA9IChMb2NhbFZhcmlhYmxlQmluZGluZykg
dGhpcy5iaW5kaW5nKSkgew0KLQkJCQljdXJyZW50U2NvcGUucHJvYmxlbVJlcG9ydGVyKCkudW5p
bml0aWFsaXplZExvY2FsVmFyaWFibGUobG9jYWxCaW5kaW5nLCB0aGlzKTsNCi0JCQl9DQotCQkJ
aWYgKChmbG93SW5mby50YWdCaXRzICYgRmxvd0luZm8uVU5SRUFDSEFCTEUpID09IDApIHsNCi0J
CQkJbG9jYWxCaW5kaW5nLnVzZUZsYWcgPSBMb2NhbFZhcmlhYmxlQmluZGluZy5VU0VEOw0KLQkJ
CX0gZWxzZSBpZiAobG9jYWxCaW5kaW5nLnVzZUZsYWcgPT0gTG9jYWxWYXJpYWJsZUJpbmRpbmcu
VU5VU0VEKSB7DQotCQkJCWxvY2FsQmluZGluZy51c2VGbGFnID0gTG9jYWxWYXJpYWJsZUJpbmRp
bmcuRkFLRV9VU0VEOw0KLQkJCX0NCiAJfQ0KIAlpZiAodmFsdWVSZXF1aXJlZCkgew0KIAkJbWFu
YWdlRW5jbG9zaW5nSW5zdGFuY2VBY2Nlc3NJZk5lY2Vzc2FyeShjdXJyZW50U2NvcGUsIGZsb3dJ
bmZvKTsNCkBAIC05NDcsOSArOTQyLDYgQEANCiAJCQkJCWlmICh0aGlzLmJpbmRpbmcgaW5zdGFu
Y2VvZiBMb2NhbFZhcmlhYmxlQmluZGluZykgew0KIAkJCQkJCXRoaXMuYml0cyAmPSB+QVNUTm9k
ZS5SZXN0cmljdGl2ZUZsYWdNQVNLOyAgLy8gY2xlYXIgYml0cw0KIAkJCQkJCXRoaXMuYml0cyB8
PSBCaW5kaW5nLkxPQ0FMOw0KLQkJCQkJCWlmICghdmFyaWFibGUuaXNGaW5hbCgpICYmICh0aGlz
LmJpdHMgJiBBU1ROb2RlLkRlcHRoTUFTSykgIT0gMCkgew0KLQkJCQkJCQlzY29wZS5wcm9ibGVt
UmVwb3J0ZXIoKS5jYW5ub3RSZWZlclRvTm9uRmluYWxPdXRlckxvY2FsKChMb2NhbFZhcmlhYmxl
QmluZGluZyl2YXJpYWJsZSwgdGhpcyk7DQotCQkJCQkJfQ0KIAkJCQkJCXZhcmlhYmxlVHlwZSA9
IHZhcmlhYmxlLnR5cGU7DQogCQkJCQkJdGhpcy5jb25zdGFudCA9ICh0aGlzLmJpdHMgJiBBU1RO
b2RlLklzU3RyaWN0bHlBc3NpZ25lZCkgPT0gMCA/IHZhcmlhYmxlLmNvbnN0YW50KCkgOiBDb25z
dGFudC5Ob3RBQ29uc3RhbnQ7DQogCQkJCQl9IGVsc2Ugew0KZGlmZiAtLWdpdCBjb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9Qcm9ibGVtUmVwb3J0ZXIu
amF2YSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9Q
cm9ibGVtUmVwb3J0ZXIuamF2YQ0KaW5kZXggOWY2M2FjYi4uOTBmNzMxOSAxMDA2NDQNCi0tLSBj
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9Qcm9ibGVt
UmVwb3J0ZXIuamF2YQ0KKysrIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9wcm9ibGVtL1Byb2JsZW1SZXBvcnRlci5qYXZhDQpAQCAtMTIxNiw2ICsxMjE2LDE1IEBA
DQogCQlub2RlU291cmNlU3RhcnQobG9jYWwsIGxvY2F0aW9uKSwNCiAJCW5vZGVTb3VyY2VFbmQo
bG9jYWwsIGxvY2F0aW9uKSk7DQogfQ0KK3B1YmxpYyB2b2lkIGNhbm5vdFJlZmVyVG9Ob25FZmZl
Y3RpdmVseUZpbmFsT3V0ZXJMb2NhbChMb2NhbFZhcmlhYmxlQmluZGluZyBsb2NhbCwgQVNUTm9k
ZSBsb2NhdGlvbikgew0KKwlTdHJpbmdbXSBhcmd1bWVudHMgPW5ldyBTdHJpbmdbXXsgbmV3IFN0
cmluZyhsb2NhbC5yZWFkYWJsZU5hbWUoKSl9Ow0KKwl0aGlzLmhhbmRsZSgNCisJCUlQcm9ibGVt
Lk91dGVyTG9jYWxNdXN0QmVFZmZlY3RpdmVseUZpbmFsLA0KKwkJYXJndW1lbnRzLA0KKwkJYXJn
dW1lbnRzLA0KKwkJbm9kZVNvdXJjZVN0YXJ0KGxvY2FsLCBsb2NhdGlvbiksDQorCQlub2RlU291
cmNlRW5kKGxvY2FsLCBsb2NhdGlvbikpOw0KK30NCiBwdWJsaWMgdm9pZCBjYW5ub3RSZXR1cm5J
bkluaXRpYWxpemVyKEFTVE5vZGUgbG9jYXRpb24pIHsNCiAJdGhpcy5oYW5kbGUoDQogCQlJUHJv
YmxlbS5DYW5ub3RSZXR1cm5JbkluaXRpYWxpemVyLA0KZGlmZiAtLWdpdCBjb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9tZXNzYWdlcy5wcm9wZXJ0aWVz
IGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL21lc3Nh
Z2VzLnByb3BlcnRpZXMNCmluZGV4IGRkZTQ5MWUuLmEzNjBjMzcgMTAwNjQ0DQotLS0gY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vbWVzc2FnZXMucHJv
cGVydGllcw0KKysrIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9w
cm9ibGVtL21lc3NhZ2VzLnByb3BlcnRpZXMNCkBAIC0yNyw2ICsyNyw3IEBADQogIwkJCQkJCQli
dWcgMzkyODYyIC0gWzEuOF1bY29tcGlsZXJdW251bGxdIEV2YWx1YXRlIG51bGwgYW5ub3RhdGlv
bnMgb24gYXJyYXkgdHlwZXMNCiAjCQlKZXNwZXIgUyBNb2xsZXIgPGplc3BlckBzZWxza2FiZXQu
b3JnPiAtIENvbnRyaWJ1dGlvbnMgZm9yDQogIwkJCQkJCQlidWcgMzgyNzAxIC0gWzEuOF1bY29t
cGlsZXJdIEltcGxlbWVudCBzZW1hbnRpYyBhbmFseXNpcyBvZiBMYW1iZGEgZXhwcmVzc2lvbnMg
JiBSZWZlcmVuY2UgZXhwcmVzc2lvbg0KKyMJCQkJCQkJYnVnIDM4MjcyMSAtIFsxLjhdW2NvbXBp
bGVyXSBFZmZlY3RpdmVseSBmaW5hbCB2YXJpYWJsZXMgbmVlZHMgc3BlY2lhbCB0cmVhdG1lbnQN
CiAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjDQogMCA9IHswfQ0KIDEgPSBzdXBlciBjYW5ub3QgYmUg
dXNlZCBpbiBqYXZhLmxhbmcuT2JqZWN0DQpAQCAtNjE1LDYgKzYxNiw3IEBADQogDQogIyMjIE1P
UkUgVFlQRSBSRUxBVEVEDQogNjYyID0gSWxsZWdhbCBhdHRlbXB0IHRvIGNyZWF0ZSBhcnJheXMg
b2YgdW5pb24gdHlwZXMNCis2NjMgPSBUaGUgdmFyaWFibGUgezB9IG11c3QgYmUgbXVzdCBiZSBm
aW5hbCBvciBlZmZlY3RpdmVseSBmaW5hbCBpZiB1c2VkIGluIGEgbGFtYmRhIGV4cHJlc3Npb24g
b3IgYW4gaW5uZXIgY2xhc3MNCiANCiAjIyMgQ09SUlVQVEVEIEJJTkFSSUVTDQogNzAwID0gVGhl
IGNsYXNzIGZpbGUgezB9IGNvbnRhaW5zIGEgc2lnbmF0dXJlICcnezF9JycgaWxsLWZvcm1lZCBh
dCBwb3NpdGlvbiB7Mn0NCg==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="0"
              isprivate="0"
          >
            <attachid>226500</attachid>
            <date>2013-02-04 07:41:00 -0500</date>
            <delta_ts>2013-02-06 11:50:08 -0500</delta_ts>
            <desc>Simple test case showing the basics</desc>
            <filename>file_382721.txt</filename>
            <type>text/plain</type>
            <size>4237</size>
            <attacher name="Jesper Moller">jesper</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMA0KI1Agb3JnLmVjbGlwc2UuamR0LmNvcmUu
dGVzdHMuY29tcGlsZXINCmRpZmYgLS1naXQgc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3Rz
L2NvbXBpbGVyL3JlZ3Jlc3Npb24vQ29tcGlsZXJJbnZvY2F0aW9uVGVzdHMuamF2YSBzcmMvb3Jn
L2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9Db21waWxlckludm9j
YXRpb25UZXN0cy5qYXZhDQppbmRleCAyOTA2NDZjLi42NGNhNjdhIDEwMDY0NA0KLS0tIHNyYy9v
cmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0NvbXBpbGVySW52
b2NhdGlvblRlc3RzLmphdmENCisrKyBzcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29t
cGlsZXIvcmVncmVzc2lvbi9Db21waWxlckludm9jYXRpb25UZXN0cy5qYXZhDQpAQCAtNzkwLDYg
Kzc5MCw3IEBADQogCQlleHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiT2JqZWN0Q2Fubm90
SGF2ZVN1cGVyVHlwZXMiLCBuZXcgUHJvYmxlbUF0dHJpYnV0ZXMoQ2F0ZWdvcml6ZWRQcm9ibGVt
LkNBVF9JTlRFUk5BTCkpOw0KIAkJZXhwZWN0ZWRQcm9ibGVtQXR0cmlidXRlcy5wdXQoIk9iamVj
dEhhc05vU3VwZXJjbGFzcyIsIG5ldyBQcm9ibGVtQXR0cmlidXRlcyhDYXRlZ29yaXplZFByb2Js
ZW0uQ0FUX1RZUEUpKTsNCiAJCWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0KCJPYmplY3RN
dXN0QmVDbGFzcyIsIG5ldyBQcm9ibGVtQXR0cmlidXRlcyhDYXRlZ29yaXplZFByb2JsZW0uQ0FU
X0lOVEVSTkFMKSk7DQorCQlleHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiT3V0ZXJMb2Nh
bE11c3RCZUVmZmVjdGl2ZWx5RmluYWwiLCBuZXcgUHJvYmxlbUF0dHJpYnV0ZXMoQ2F0ZWdvcml6
ZWRQcm9ibGVtLkNBVF9JTlRFUk5BTCkpOw0KIAkJZXhwZWN0ZWRQcm9ibGVtQXR0cmlidXRlcy5w
dXQoIk91dGVyTG9jYWxNdXN0QmVGaW5hbCIsIG5ldyBQcm9ibGVtQXR0cmlidXRlcyhDYXRlZ29y
aXplZFByb2JsZW0uQ0FUX0lOVEVSTkFMKSk7DQogCQlleHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVz
LnB1dCgiT3ZlcnJpZGluZ0RlcHJlY2F0ZWRNZXRob2QiLCBuZXcgUHJvYmxlbUF0dHJpYnV0ZXMo
Q2F0ZWdvcml6ZWRQcm9ibGVtLkNBVF9ERVBSRUNBVElPTikpOw0KIAkJZXhwZWN0ZWRQcm9ibGVt
QXR0cmlidXRlcy5wdXQoIk92ZXJyaWRpbmdNZXRob2RXaXRob3V0U3VwZXJJbnZvY2F0aW9uIiwg
bmV3IFByb2JsZW1BdHRyaWJ1dGVzKENhdGVnb3JpemVkUHJvYmxlbS5DQVRfUE9URU5USUFMX1BS
T0dSQU1NSU5HX1BST0JMRU0pKTsNCkBAIC0xNTI1LDYgKzE1MjYsNyBAQA0KIAkJZXhwZWN0ZWRQ
cm9ibGVtQXR0cmlidXRlcy5wdXQoIk9iamVjdENhbm5vdEhhdmVTdXBlclR5cGVzIiwgU0tJUCk7
DQogCQlleHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiT2JqZWN0SGFzTm9TdXBlcmNsYXNz
IiwgU0tJUCk7DQogCQlleHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiT2JqZWN0TXVzdEJl
Q2xhc3MiLCBTS0lQKTsNCisJCWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0KCJPdXRlckxv
Y2FsTXVzdEJlRWZmZWN0aXZlbHlGaW5hbCIsIFNLSVApOw0KIAkJZXhwZWN0ZWRQcm9ibGVtQXR0
cmlidXRlcy5wdXQoIk91dGVyTG9jYWxNdXN0QmVGaW5hbCIsIFNLSVApOw0KIAkJZXhwZWN0ZWRQ
cm9ibGVtQXR0cmlidXRlcy5wdXQoIk92ZXJyaWRpbmdEZXByZWNhdGVkTWV0aG9kIiwgbmV3IFBy
b2JsZW1BdHRyaWJ1dGVzKEphdmFDb3JlLkNPTVBJTEVSX1BCX0RFUFJFQ0FUSU9OKSk7DQogCQll
eHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiT3ZlcnJpZGluZ01ldGhvZFdpdGhvdXRTdXBl
ckludm9jYXRpb24iLCBuZXcgUHJvYmxlbUF0dHJpYnV0ZXMoSmF2YUNvcmUuQ09NUElMRVJfUEJf
T1ZFUlJJRElOR19NRVRIT0RfV0lUSE9VVF9TVVBFUl9JTlZPQ0FUSU9OKSk7DQpkaWZmIC0tZ2l0
IHNyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0
aXZlTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEgc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rl
c3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVnYXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2
YQ0KaW5kZXggNmZmMzFmYi4uYWEyNWVmZCAxMDA2NDQNCi0tLSBzcmMvb3JnL2VjbGlwc2UvamR0
L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OZWdhdGl2ZUxhbWJkYUV4cHJlc3Npb25z
VGVzdC5qYXZhDQorKysgc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3Jl
Z3Jlc3Npb24vTmVnYXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YQ0KQEAgLTEzLDcgKzEz
LDggQEANCiAgKiAgICAgSUJNIENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVu
dGF0aW9uDQogICogICAgIEplc3BlciBTIE1vbGxlciAtIENvbnRyaWJ1dGlvbnMgZm9yDQogICoJ
CQkJCQkJYnVnIDM4MjcwMSAtIFsxLjhdW2NvbXBpbGVyXSBJbXBsZW1lbnQgc2VtYW50aWMgYW5h
bHlzaXMgb2YgTGFtYmRhIGV4cHJlc3Npb25zICYgUmVmZXJlbmNlIGV4cHJlc3Npb24NCi0gDQor
ICogICAgIEplc3BlciBTIE1vbGxlciAtIENvbnRyaWJ1dGlvbnMgZm9yDQorICoJCQkJCQkJYnVn
IDM4MjcyMSAtIFsxLjhdW2NvbXBpbGVyXSBFZmZlY3RpdmVseSBmaW5hbCB2YXJpYWJsZXMgbmVl
ZHMgc3BlY2lhbCB0cmVhdG1lbnQNCiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCiBwYWNrYWdl
IG9yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyLnJlZ3Jlc3Npb247DQogDQpAQCAt
NDA4LDYgKzQwOSwzNiBAQA0KIAkJCQkiLS0tLS0tLS0tLVxuIg0KIAkJCQkpOw0KIH0NCisvL2h0
dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zODI3MjEsIFsxLjhd
W2NvbXBpbGVyXSBFZmZlY3RpdmVseSBmaW5hbCB2YXJpYWJsZXMgbmVlZHMgc3BlY2lhbCB0cmVh
dG1lbnQNCitwdWJsaWMgdm9pZCB0ZXN0MDE0KCkgew0KKwkvLyBUaGlzIHRlc3QgY2hlY2tzIHRo
YXQgY29tbW9uIHNlbWFudGljIGNoZWNrcyBhcmUgaW5kZWVkIA0KKwl0aGlzLnJ1bk5lZ2F0aXZl
VGVzdCgNCisJCQluZXcgU3RyaW5nW10gew0KKwkJCQkJIlguamF2YSIsDQorCQkJCQkiaW50ZXJm
YWNlIEkge1xuIiArIA0KKwkJCQkJIgl2b2lkIGRvaXQoKTtcbiIgKyANCisJCQkJCSJ9XG4iICsg
DQorCQkJCQkicHVibGljIGNsYXNzIFgge1xuIiArIA0KKwkJCQkJIiAgcHVibGljIHN0YXRpYyB2
b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuIiArIA0KKwkJCQkJIiAgICBpbnQgdmFyID0gMjtc
biIgKyANCisJCQkJCSIgICAgSSB4ID0gbmV3IEkoKSB7XG4iICsgDQorCQkJCQkiICAgICAgcHVi
bGljIHZvaWQgZG9pdCgpIHtcbiIgKyANCisJCQkJCSIgICAgICAgIFN5c3RlbS5vdXQucHJpbnRs
bihhcmdzKTsgLy8gT0s6IGFyZ3MgaXMgbm90IHJlLWFzc2lnbm1lbnQgc2luY2UgZGVjbGFyYXRp
b24vZmlyc3QgYXNzaWdubWVudFxuIiArIA0KKwkJCQkJIiAgICAgICAgU3lzdGVtLm91dC5wcmlu
dGxuKHZhcik7IC8vIEVycm9yOiB2YXIgaXMgbm90IGVmZmVjdGl2ZWx5IGZpbmFsXG4iICsgDQor
CQkJCQkiICAgICAgfVxuIiArIA0KKwkJCQkJIiAgICB9O1xuIiArIA0KKwkJCQkJIiAgICB2YXI9
MjtcbiIgKyANCisJCQkJCSIgIH1cbiIgKyANCisJCQkJCSJ9IiAsDQorCQkJCX0sDQorCQkJCSIt
LS0tLS0tLS0tXG4iICsgDQorCQkJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTApXG4i
ICsgDQorCQkJCSIJU3lzdGVtLm91dC5wcmludGxuKHZhcik7IC8vIEVycm9yOiB2YXIgaXMgbm90
IGVmZmVjdGl2ZWx5IGZpbmFsXG4iICsgDQorCQkJCSIJICAgICAgICAgICAgICAgICAgIF5eXlxu
IiArIA0KKwkJCQkiVGhlIHZhcmlhYmxlIHZhciBtdXN0IGJlIG11c3QgYmUgZmluYWwgb3IgZWZm
ZWN0aXZlbHkgZmluYWwgaWYgdXNlZCBpbiBhIGxhbWJkYSBleHByZXNzaW9uIG9yIGFuIGlubmVy
IGNsYXNzXG4iICsgDQorCQkJCSItLS0tLS0tLS0tXG4iDQorCQkJCSk7DQorfQ0KIHB1YmxpYyBz
dGF0aWMgQ2xhc3MgdGVzdENsYXNzKCkgew0KIAlyZXR1cm4gTmVnYXRpdmVMYW1iZGFFeHByZXNz
aW9uc1Rlc3QuY2xhc3M7DQogfQ==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>226646</attachid>
            <date>2013-02-06 11:49:00 -0500</date>
            <delta_ts>2013-02-08 16:17:26 -0500</delta_ts>
            <desc>Patch for this issue</desc>
            <filename>patch-core.txt</filename>
            <type>text/plain</type>
            <size>13578</size>
            <attacher name="Jesper Moller">jesper</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMA0KI1Agb3JnLmVjbGlwc2UuamR0LmNvcmUN
CmRpZmYgLS1naXQgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2NvcmUvY29tcGlsZXIvSVByb2Js
ZW0uamF2YSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvY29yZS9jb21waWxlci9JUHJvYmxlbS5q
YXZhDQppbmRleCA4MDc4MWE0Li43ODY4YjZkIDEwMDY0NA0KLS0tIGNvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9jb3JlL2NvbXBpbGVyL0lQcm9ibGVtLmphdmENCisrKyBjb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvY29yZS9jb21waWxlci9JUHJvYmxlbS5qYXZhDQpAQCAtMTY1LDQgKzE2NSw2IEBA
DQogICogICAgICBKZXNwZXIgUyBNb2xsZXIgIC0gYWRkZWQgdGhlIGZvbGxvd2luZyBjb25zdGFu
dHMNCiAgKgkJCQkJCQkJCVRhcmdldFR5cGVOb3RBRnVuY3Rpb25hbEludGVyZmFjZQ0KKyAqCQkJ
CQkJCQkJT3V0ZXJMb2NhbE11c3RCZUVmZmVjdGl2ZWx5RmluYWwNCisgKgkJCQkJCQkJCU91dGVy
TG9jYWxVbmRlckxhbWJkYU11c3RCZUVmZmVjdGl2ZWx5RmluYWwNCiAgKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKi8NCiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyOw0KQEAgLTEz
NTksNCArMTM2MSw4IEBADQogCS8qKiBAc2luY2UgMy45ICovDQogCWludCBJbGxlZ2FsQXJyYXlP
ZlVuaW9uVHlwZSA9IFR5cGVSZWxhdGVkICsgNjYyOw0KKwkvKiogQHNpbmNlIDMuOSAqLw0KKwlp
bnQgT3V0ZXJMb2NhbE11c3RCZUVmZmVjdGl2ZWx5RmluYWwgPSBJbnRlcm5hbCArIDY2MzsNCisJ
LyoqIEBzaW5jZSAzLjkgKi8NCisJaW50IE91dGVyTG9jYWxVbmRlckxhbWJkYU11c3RCZUVmZmVj
dGl2ZWx5RmluYWwgPSBJbnRlcm5hbCArIDY2NDsNCiANCiAJLyoqDQpkaWZmIC0tZ2l0IGNvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQVNUTm9kZS5qYXZhIGNv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQVNUTm9kZS5qYXZh
DQppbmRleCA2MzVkNjNhLi44Y2ZjMjZlIDEwMDY0NA0KLS0tIGNvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQVNUTm9kZS5qYXZhDQorKysgY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BU1ROb2RlLmphdmENCkBAIC0yMSw0
ICsyMSw2IEBADQogICoJCQkJCQkJCWJ1ZyAzODQ4NzAgLSBbY29tcGlsZXJdIEBEZXByZWNhdGVk
IGFubm90YXRpb24gbm90IGRldGVjdGVkIGlmIHByZWNlZGVkIGJ5IG90aGVyIGFubm90YXRpb24N
CiAgKgkJCQkJCQkJYnVnIDM5MzcxOSAtIFtjb21waWxlcl0gaW5jb25zaXN0ZW50IHdhcm5pbmdz
IG9uIGl0ZXJhdGlvbiB2YXJpYWJsZXMNCisgKiAgICAgSmVzcGVyIFMgTW9sbGVyIC0gQ29udHJp
YnV0aW9ucyBmb3INCisgKgkJCQkJCQkJYnVnIDM4MjcyMSAtIFsxLjhdW2NvbXBpbGVyXSBFZmZl
Y3RpdmVseSBmaW5hbCB2YXJpYWJsZXMgbmVlZHMgc3BlY2lhbCB0cmVhdG1lbnQNCiAgKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKi8NCiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21w
aWxlci5hc3Q7DQpAQCAtMTM5LDQgKzE0MSw1IEBADQogCXB1YmxpYyBzdGF0aWMgZmluYWwgaW50
IERlcHRoU0hJRlQgPSA1OwkvLyBCaXQ2IC0+IEJpdDEzDQogCXB1YmxpYyBzdGF0aWMgZmluYWwg
aW50IERlcHRoTUFTSyA9IEJpdDZ8Qml0N3xCaXQ4fEJpdDl8Qml0MTB8Qml0MTF8Qml0MTJ8Qml0
MTM7IC8vIDggYml0cyBmb3IgYWN0dWFsIGRlcHRoIHZhbHVlIChtYXguIDI1NSkNCisJcHVibGlj
IHN0YXRpYyBmaW5hbCBpbnQgSXNGcm9tT3V0c2lkZUxhbWJkYSA9IEJpdDE0Ow0KIA0KIAkvLyBm
b3Igc3RhdGVtZW50cw0KZGlmZiAtLWdpdCBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXN0L05hbWVSZWZlcmVuY2UuamF2YSBjb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L05hbWVSZWZlcmVuY2UuamF2YQ0KaW5kZXggODE2MDBm
MC4uM2Y0YmMyYSAxMDA2NDQNCi0tLSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvYXN0L05hbWVSZWZlcmVuY2UuamF2YQ0KKysrIGNvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTmFtZVJlZmVyZW5jZS5qYXZhDQpAQCAtMSw0ICsx
LDQgQEANCiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KLSAqIENvcHlyaWdodCAoYykgMjAwMCwg
MjAxMiBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4NCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAs
IDIwMTMgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuDQogICogQWxsIHJpZ2h0cyByZXNlcnZl
ZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscw0KICAqIGFyZSBt
YWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vu
c2UgdjEuMA0KQEAgLTEyLDcgKzEyLDExIEBADQogICogQ29udHJpYnV0b3JzOg0KICAqICAgICBJ
Qk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24NCisgKiAgICAg
SmVzcGVyIFMgTW9sbGVyIC0gQ29udHJpYnV0aW9ucyBmb3INCisgKgkJCQkJCQlidWcgMzgyNzIx
IC0gWzEuOF1bY29tcGlsZXJdIEVmZmVjdGl2ZWx5IGZpbmFsIHZhcmlhYmxlcyBuZWVkcyBzcGVj
aWFsIHRyZWF0bWVudA0KICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KIHBhY2thZ2Ugb3JnLmVj
bGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdDsNCiANCitpbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvbXBpbGVyLmNsYXNzZm10LkNsYXNzRmlsZUNvbnN0YW50czsNCitpbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmZsb3cuRmxvd0luZm87DQogaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuKjsNCiANCkBAIC03
MiwzICs3NiwyNCBAQA0KIA0KIHB1YmxpYyBhYnN0cmFjdCBjaGFyW11bXSBnZXROYW1lKCk7DQor
DQorcHJvdGVjdGVkIHZvaWQgY2hlY2tMb2NhbFZhcmlhYmxlUmVhZChCbG9ja1Njb3BlIGN1cnJl
bnRTY29wZSwgRmxvd0luZm8gZmxvd0luZm8pIHsNCisJTG9jYWxWYXJpYWJsZUJpbmRpbmcgbG9j
YWxCaW5kaW5nOw0KKwlpZiAoIWZsb3dJbmZvLmlzRGVmaW5pdGVseUFzc2lnbmVkKGxvY2FsQmlu
ZGluZyA9IChMb2NhbFZhcmlhYmxlQmluZGluZykgdGhpcy5iaW5kaW5nKSkgew0KKwkJY3VycmVu
dFNjb3BlLnByb2JsZW1SZXBvcnRlcigpLnVuaW5pdGlhbGl6ZWRMb2NhbFZhcmlhYmxlKGxvY2Fs
QmluZGluZywgdGhpcyk7DQorCX0NCisJaWYgKCFsb2NhbEJpbmRpbmcuaXNGaW5hbCgpICYmICgo
dGhpcy5iaXRzICYgQVNUTm9kZS5EZXB0aE1BU0spICE9IDAgfHwgKHRoaXMuYml0cyAmIEFTVE5v
ZGUuSXNGcm9tT3V0c2lkZUxhbWJkYSkgIT0gMCkpIHsNCisJCWlmIChjdXJyZW50U2NvcGUuY29t
cGlsZXJPcHRpb25zKCkuY29tcGxpYW5jZUxldmVsID49IENsYXNzRmlsZUNvbnN0YW50cy5KREsx
XzgpIHsNCisJCQlpZiAoIWxvY2FsQmluZGluZy5pc0VmZmVjdGl2ZWx5RmluYWwoKSkgew0KKwkJ
CQljdXJyZW50U2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuY2Fubm90UmVmZXJUb05vbkVmZmVjdGl2
ZWx5RmluYWxPdXRlckxvY2FsKGxvY2FsQmluZGluZywgdGhpcyk7DQorCQkJfQ0KKwkJfSBlbHNl
IHsNCisJCQljdXJyZW50U2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuY2Fubm90UmVmZXJUb05vbkZp
bmFsT3V0ZXJMb2NhbChsb2NhbEJpbmRpbmcsIHRoaXMpOw0KKwkJfQ0KKwl9DQorCWlmICgoZmxv
d0luZm8udGFnQml0cyAmIEZsb3dJbmZvLlVOUkVBQ0hBQkxFKSA9PSAwKSB7DQorCQlsb2NhbEJp
bmRpbmcudXNlRmxhZyA9IExvY2FsVmFyaWFibGVCaW5kaW5nLlVTRUQ7DQorCX0gZWxzZSBpZiAo
bG9jYWxCaW5kaW5nLnVzZUZsYWcgPT0gTG9jYWxWYXJpYWJsZUJpbmRpbmcuVU5VU0VEKSB7DQor
CQlsb2NhbEJpbmRpbmcudXNlRmxhZyA9IExvY2FsVmFyaWFibGVCaW5kaW5nLkZBS0VfVVNFRDsN
CisJfQ0KK30NCiB9DQpkaWZmIC0tZ2l0IGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hc3QvUXVhbGlmaWVkTmFtZVJlZmVyZW5jZS5qYXZhIGNvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUXVhbGlmaWVkTmFtZVJlZmVyZW5jZS5q
YXZhDQppbmRleCA5MWFmNzJiLi4zNDY3MzU0IDEwMDY0NA0KLS0tIGNvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUXVhbGlmaWVkTmFtZVJlZmVyZW5jZS5qYXZh
DQorKysgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9RdWFs
aWZpZWROYW1lUmVmZXJlbmNlLmphdmENCkBAIC0xLDQgKzEsNCBAQA0KIC8qKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqDQotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEyIElCTSBDb3Jwb3JhdGlvbiBh
bmQgb3RoZXJzLg0KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRpb24g
YW5kIG90aGVycy4NCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRo
ZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzDQogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRo
ZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wDQpAQCAtMTgsNCArMTgs
NiBAQA0KICAqCQkJCQkJCQlidWcgMzY4NTQ2IC0gW2NvbXBpbGVyXVtyZXNvdXJjZV0gQXZvaWQg
cmVtYWluaW5nIGZhbHNlIHBvc2l0aXZlcyBmb3VuZCB3aGVuIGNvbXBpbGluZyB0aGUgRWNsaXBz
ZSBTREsNCiAgKgkJCQkJCQkJYnVnIDM0NTMwNSAtIFtjb21waWxlcl1bbnVsbF0gQ29tcGlsZXIg
bWlzaWRlbnRpZmllcyBhIGNhc2Ugb2YgInZhcmlhYmxlIGNhbiBvbmx5IGJlIG51bGwiDQorICog
ICAgIEplc3BlciBTIE1vbGxlciAtIENvbnRyaWJ1dGlvbnMgZm9yDQorICoJCQkJCQkJCWJ1ZyAz
ODI3MjEgLSBbMS44XVtjb21waWxlcl0gRWZmZWN0aXZlbHkgZmluYWwgdmFyaWFibGVzIG5lZWRz
IHNwZWNpYWwgdHJlYXRtZW50DQogICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovDQogcGFja2FnZSBv
cmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0Ow0KQEAgLTIwNSwxMyArMjA3LDUg
QEANCiAJCQlicmVhazsNCiAJCWNhc2UgQmluZGluZy5MT0NBTCA6IC8vIHJlYWRpbmcgYSBsb2Nh
bCB2YXJpYWJsZQ0KLQkJCUxvY2FsVmFyaWFibGVCaW5kaW5nIGxvY2FsQmluZGluZzsNCi0JCQlp
ZiAoIWZsb3dJbmZvLmlzRGVmaW5pdGVseUFzc2lnbmVkKGxvY2FsQmluZGluZyA9IChMb2NhbFZh
cmlhYmxlQmluZGluZykgdGhpcy5iaW5kaW5nKSkgew0KLQkJCQljdXJyZW50U2NvcGUucHJvYmxl
bVJlcG9ydGVyKCkudW5pbml0aWFsaXplZExvY2FsVmFyaWFibGUobG9jYWxCaW5kaW5nLCB0aGlz
KTsNCi0JCQl9DQotCQkJaWYgKChmbG93SW5mby50YWdCaXRzICYgRmxvd0luZm8uVU5SRUFDSEFC
TEUpID09IDApIHsNCi0JCQkJbG9jYWxCaW5kaW5nLnVzZUZsYWcgPSBMb2NhbFZhcmlhYmxlQmlu
ZGluZy5VU0VEOw0KLQkJCX0gZWxzZSBpZiAobG9jYWxCaW5kaW5nLnVzZUZsYWcgPT0gTG9jYWxW
YXJpYWJsZUJpbmRpbmcuVU5VU0VEKSB7DQotCQkJCWxvY2FsQmluZGluZy51c2VGbGFnID0gTG9j
YWxWYXJpYWJsZUJpbmRpbmcuRkFLRV9VU0VEOw0KLQkJCX0NCisJCQljaGVja0xvY2FsVmFyaWFi
bGVSZWFkKGN1cnJlbnRTY29wZSwgZmxvd0luZm8pOw0KIAkJCWlmIChuZWVkVmFsdWUpIHsNCiAJ
CQkJY2hlY2tOUEUoY3VycmVudFNjb3BlLCBmbG93Q29udGV4dCwgZmxvd0luZm8sIHRydWUpOw0K
QEAgLTk0Niw3ICs5NDAsNCBAQA0KIAkJCQkJdGhpcy5iaXRzIHw9IEJpbmRpbmcuTE9DQUw7DQog
CQkJCQlMb2NhbFZhcmlhYmxlQmluZGluZyBsb2NhbCA9IChMb2NhbFZhcmlhYmxlQmluZGluZykg
dGhpcy5iaW5kaW5nOw0KLQkJCQkJaWYgKCFsb2NhbC5pc0ZpbmFsKCkgJiYgKCh0aGlzLmJpdHMg
JiBBU1ROb2RlLkRlcHRoTUFTSykgIT0gMCkpIHsNCi0JCQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0
ZXIoKS5jYW5ub3RSZWZlclRvTm9uRmluYWxPdXRlckxvY2FsKChMb2NhbFZhcmlhYmxlQmluZGlu
ZykgdGhpcy5iaW5kaW5nLCB0aGlzKTsNCi0JCQkJCX0NCiAJCQkJCWlmIChsb2NhbC50eXBlICE9
IG51bGwgJiYgKGxvY2FsLnR5cGUudGFnQml0cyAmIFRhZ0JpdHMuSGFzTWlzc2luZ1R5cGUpICE9
IDApIHsNCiAJCQkJCQkvLyBvbmx5IGNvbXBsYWluIGlmIGZpZWxkIHJlZmVyZW5jZSAoZm9yIGxv
Y2FsLCBpdHMgdHlwZSBnb3QgZmxhZ2dlZCBhbHJlYWR5KQ0KZGlmZiAtLWdpdCBjb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1NpbmdsZU5hbWVSZWZlcmVuY2Uu
amF2YSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1Npbmds
ZU5hbWVSZWZlcmVuY2UuamF2YQ0KaW5kZXggMDY3NmNiYi4uNWUzOGY3YiAxMDA2NDQNCi0tLSBj
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1NpbmdsZU5hbWVS
ZWZlcmVuY2UuamF2YQ0KKysrIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9hc3QvU2luZ2xlTmFtZVJlZmVyZW5jZS5qYXZhDQpAQCAtMSw0ICsxLDQgQEANCiAvKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKg0KLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMiBJQk0gQ29y
cG9yYXRpb24gYW5kIG90aGVycy4NCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTMgSUJNIENv
cnBvcmF0aW9uIGFuZCBvdGhlcnMuDQogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9n
cmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscw0KICAqIGFyZSBtYWRlIGF2YWlsYWJs
ZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMA0KQEAg
LTE0LDQgKzE0LDUgQEANCiAgKiAgICAgU3RlcGhhbiBIZXJybWFubiA8c3RlcGhhbkBjcy50dS1i
ZXJsaW4uZGU+IC0gQ29udHJpYnV0aW9uIGZvciBidWcgMjkyNDc4IC0gUmVwb3J0IHBvdGVudGlh
bGx5IG51bGwgYWNyb3NzIHZhcmlhYmxlIGFzc2lnbm1lbnQsDQogICogICAgIAkJCQkJCQkJCQkJ
ICAgIENvbnRyaWJ1dGlvbiBmb3IgYnVnIDE4NTY4MiAtIEluY3JlbWVudC9kZWNyZW1lbnQgb3Bl
cmF0b3JzIG1hcmsgbG9jYWwgdmFyaWFibGVzIGFzIHJlYWQNCisgKiAgICAgSmVzcGVyIFMgTW9s
bGVyIC0gPGplc3BlckBzZWxza2FiZXQub3JnPiAgIC0gQ29udHJpYnV0aW9ucyBmb3IgYnVnIDM4
MjcyMSAtIFsxLjhdW2NvbXBpbGVyXSBFZmZlY3RpdmVseSBmaW5hbCB2YXJpYWJsZXMgbmVlZHMg
c3BlY2lhbCB0cmVhdG1lbnQNCiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCiBwYWNrYWdlIG9y
Zy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3Q7DQpAQCAtMTY1LDQgKzE2Niw3IEBA
DQogcHVibGljIEZsb3dJbmZvIGFuYWx5c2VDb2RlKEJsb2NrU2NvcGUgY3VycmVudFNjb3BlLCBG
bG93Q29udGV4dCBmbG93Q29udGV4dCwgRmxvd0luZm8gZmxvd0luZm8sIGJvb2xlYW4gdmFsdWVS
ZXF1aXJlZCkgew0KIAlzd2l0Y2ggKHRoaXMuYml0cyAmIEFTVE5vZGUuUmVzdHJpY3RpdmVGbGFn
TUFTSykgew0KKwkJY2FzZSBCaW5kaW5nLkxPQ0FMIDogLy8gcmVhZGluZyBhIGxvY2FsIHZhcmlh
YmxlDQorCQkJY2hlY2tMb2NhbFZhcmlhYmxlUmVhZChjdXJyZW50U2NvcGUsIGZsb3dJbmZvKTsN
CisJCQlicmVhazsNCiAJCWNhc2UgQmluZGluZy5GSUVMRCA6IC8vIHJlYWRpbmcgYSBmaWVsZA0K
IAkJCWlmICh2YWx1ZVJlcXVpcmVkIHx8IGN1cnJlbnRTY29wZS5jb21waWxlck9wdGlvbnMoKS5j
b21wbGlhbmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNCkgew0KQEAgLTE4Miwx
NCArMTg2LDQgQEANCiAJCQl9DQogCQkJYnJlYWs7DQotCQljYXNlIEJpbmRpbmcuTE9DQUwgOiAv
LyByZWFkaW5nIGEgbG9jYWwgdmFyaWFibGUNCi0JCQlMb2NhbFZhcmlhYmxlQmluZGluZyBsb2Nh
bEJpbmRpbmc7DQotCQkJaWYgKCFmbG93SW5mby5pc0RlZmluaXRlbHlBc3NpZ25lZChsb2NhbEJp
bmRpbmcgPSAoTG9jYWxWYXJpYWJsZUJpbmRpbmcpIHRoaXMuYmluZGluZykpIHsNCi0JCQkJY3Vy
cmVudFNjb3BlLnByb2JsZW1SZXBvcnRlcigpLnVuaW5pdGlhbGl6ZWRMb2NhbFZhcmlhYmxlKGxv
Y2FsQmluZGluZywgdGhpcyk7DQotCQkJfQ0KLQkJCWlmICgoZmxvd0luZm8udGFnQml0cyAmIEZs
b3dJbmZvLlVOUkVBQ0hBQkxFKSA9PSAwKSB7DQotCQkJCWxvY2FsQmluZGluZy51c2VGbGFnID0g
TG9jYWxWYXJpYWJsZUJpbmRpbmcuVVNFRDsNCi0JCQl9IGVsc2UgaWYgKGxvY2FsQmluZGluZy51
c2VGbGFnID09IExvY2FsVmFyaWFibGVCaW5kaW5nLlVOVVNFRCkgew0KLQkJCQlsb2NhbEJpbmRp
bmcudXNlRmxhZyA9IExvY2FsVmFyaWFibGVCaW5kaW5nLkZBS0VfVVNFRDsNCi0JCQl9DQogCX0N
CiAJaWYgKHZhbHVlUmVxdWlyZWQpIHsNCkBAIC05NDgsNyArOTQyLDQgQEANCiAJCQkJCQl0aGlz
LmJpdHMgJj0gfkFTVE5vZGUuUmVzdHJpY3RpdmVGbGFnTUFTSzsgIC8vIGNsZWFyIGJpdHMNCiAJ
CQkJCQl0aGlzLmJpdHMgfD0gQmluZGluZy5MT0NBTDsNCi0JCQkJCQlpZiAoIXZhcmlhYmxlLmlz
RmluYWwoKSAmJiAodGhpcy5iaXRzICYgQVNUTm9kZS5EZXB0aE1BU0spICE9IDApIHsNCi0JCQkJ
CQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuY2Fubm90UmVmZXJUb05vbkZpbmFsT3V0ZXJMb2Nh
bCgoTG9jYWxWYXJpYWJsZUJpbmRpbmcpdmFyaWFibGUsIHRoaXMpOw0KLQkJCQkJCX0NCiAJCQkJ
CQl2YXJpYWJsZVR5cGUgPSB2YXJpYWJsZS50eXBlOw0KIAkJCQkJCXRoaXMuY29uc3RhbnQgPSAo
dGhpcy5iaXRzICYgQVNUTm9kZS5Jc1N0cmljdGx5QXNzaWduZWQpID09IDAgPyB2YXJpYWJsZS5j
b25zdGFudCgpIDogQ29uc3RhbnQuTm90QUNvbnN0YW50Ow0KZGlmZiAtLWdpdCBjb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEgY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhDQpp
bmRleCAwNTA0MzkwLi5iOWY4MzEyIDEwMDY0NA0KLS0tIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YQ0KKysrIGNvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YQ0KQEAgLTEsNCAr
MSw0IEBADQogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAs
IDIwMTIgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuDQorICogQ29weXJpZ2h0IChjKSAyMDAw
LCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLg0KICAqIEFsbCByaWdodHMgcmVzZXJ2
ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMNCiAgKiBhcmUg
bWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNl
bnNlIHYxLjANCkBAIC0xNiw0ICsxNiw2IEBADQogICoJCQkJCQkJCWJ1ZyAzODc2MTIgLSBVbnJl
YWNoYWJsZSBjYXRjaCBibG9jay4uLmV4Y2VwdGlvbiBpcyBuZXZlciB0aHJvd24gZnJvbSB0aGUg
dHJ5DQogICoJCQkJCQkJCWJ1ZyAzOTUwMDIgLSBTZWxmIGJvdW5kIGdlbmVyaWMgY2xhc3MgZG9l
c24ndCByZXNvbHZlIGJvdW5kcyBwcm9wZXJseSBmb3Igd2lsZGNhcmRzIGZvciBjZXJ0YWluIHBh
cmFtZXRyaXNhdGlvbi4NCisgKiAgICAgSmVzcGVyIFMgTW9sbGVyIC0gQ29udHJpYnV0aW9ucyBm
b3INCisgKgkJCQkJCQkJYnVnIDM4MjcyMSAtIFsxLjhdW2NvbXBpbGVyXSBFZmZlY3RpdmVseSBm
aW5hbCB2YXJpYWJsZXMgbmVlZHMgc3BlY2lhbCB0cmVhdG1lbnQNCiAgKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKi8NCiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29r
dXA7DQpAQCAtMTcxNiw0ICsxNzE4LDUgQEANCiAJCQkJaW50IGRlcHRoID0gMDsNCiAJCQkJaW50
IGZvdW5kRGVwdGggPSAwOw0KKwkJCQlib29sZWFuIGlzSW5zaWRlTGFtYmRhID0gZmFsc2U7DQog
CQkJCVJlZmVyZW5jZUJpbmRpbmcgZm91bmRBY3R1YWxSZWNlaXZlclR5cGUgPSBudWxsOw0KIAkJ
CQlkb25lIDogd2hpbGUgKHRydWUpIHsgLy8gZG9uZSB3aGVuIGEgQ09NUElMQVRJT05fVU5JVF9T
Q09QRSBpcyBmb3VuZA0KQEAgLTE3MzgsNCArMTc0MSw4IEBADQogCQkJCQkJCQlpZiAoZGVwdGgg
PiAwKQ0KIAkJCQkJCQkJCWludm9jYXRpb25TaXRlLnNldERlcHRoKGRlcHRoKTsNCisJCQkJCQkJ
CWlmIChpc0luc2lkZUxhbWJkYSAmJiBpbnZvY2F0aW9uU2l0ZSBpbnN0YW5jZW9mIE5hbWVSZWZl
cmVuY2UpIHsNCisJCQkJCQkJCQlOYW1lUmVmZXJlbmNlIG5hbWVSZWZlcmVuY2UgPSAoTmFtZVJl
ZmVyZW5jZSkgaW52b2NhdGlvblNpdGU7DQorCQkJCQkJCQkJbmFtZVJlZmVyZW5jZS5iaXRzIHw9
IEFTVE5vZGUuSXNGcm9tT3V0c2lkZUxhbWJkYTsNCisJCQkJCQkJCX0NCiAJCQkJCQkJCXJldHVy
biB2YXJpYWJsZUJpbmRpbmc7DQogCQkJCQkJCX0NCkBAIC0xODI3LDQgKzE4MzQsNyBAQA0KIAkJ
CQkJCQlicmVhayBkb25lOw0KIAkJCQkJfQ0KKwkJCQkJaWYgKHNjb3BlLmtpbmQgPT0gTUVUSE9E
X1NDT1BFICYmIHNjb3BlLnBhcmVudCAhPSBudWxsICYmIHNjb3BlLnBhcmVudC5raW5kICE9IENM
QVNTX1NDT1BFKSB7DQorCQkJCQkJaXNJbnNpZGVMYW1iZGEgPSB0cnVlOw0KKwkJCQkJfQ0KIAkJ
CQkJc2NvcGUgPSBzY29wZS5wYXJlbnQ7DQogCQkJCX0NCmRpZmYgLS1naXQgY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxlbVJlcG9ydGVyLmph
dmEgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJv
YmxlbVJlcG9ydGVyLmphdmENCmluZGV4IGIzOWE5ODMuLjUwZjRlOTUgMTAwNjQ0DQotLS0gY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxlbVJl
cG9ydGVyLmphdmENCisrKyBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvcHJvYmxlbS9Qcm9ibGVtUmVwb3J0ZXIuamF2YQ0KQEAgLTMzLDQgKzMzLDUgQEANCiAgKiAg
ICAgIEplc3BlciBTIE1vbGxlciA8amVzcGVyQHNlbHNrYWJldC5vcmc+IC0gIENvbnRyaWJ1dGlv
bnMgZm9yDQogICoJCQkJCQkJCWJ1ZyAzODI3MDEgLSBbMS44XVtjb21waWxlcl0gSW1wbGVtZW50
IHNlbWFudGljIGFuYWx5c2lzIG9mIExhbWJkYSBleHByZXNzaW9ucyAmIFJlZmVyZW5jZSBleHBy
ZXNzaW9uDQorICoJCQkJCQkJCWJ1ZyAzODI3MjEgLSBbMS44XVtjb21waWxlcl0gRWZmZWN0aXZl
bHkgZmluYWwgdmFyaWFibGVzIG5lZWRzIHNwZWNpYWwgdHJlYXRtZW50DQogICoqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKiovDQogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
cHJvYmxlbTsNCkBAIC0xMjI0LDQgKzEyMjUsMTMgQEANCiAJCW5vZGVTb3VyY2VFbmQobG9jYWws
IGxvY2F0aW9uKSk7DQogfQ0KK3B1YmxpYyB2b2lkIGNhbm5vdFJlZmVyVG9Ob25FZmZlY3RpdmVs
eUZpbmFsT3V0ZXJMb2NhbChMb2NhbFZhcmlhYmxlQmluZGluZyBsb2NhbCwgQVNUTm9kZSBsb2Nh
dGlvbikgew0KKwlTdHJpbmdbXSBhcmd1bWVudHMgPW5ldyBTdHJpbmdbXXsgbmV3IFN0cmluZyhs
b2NhbC5yZWFkYWJsZU5hbWUoKSl9Ow0KKwl0aGlzLmhhbmRsZSgNCisJCShsb2NhdGlvbi5iaXRz
ICYgQVNUTm9kZS5Jc0Zyb21PdXRzaWRlTGFtYmRhKSAhPSAwID8gSVByb2JsZW0uT3V0ZXJMb2Nh
bE11c3RCZUVmZmVjdGl2ZWx5RmluYWwgOiBJUHJvYmxlbS5PdXRlckxvY2FsVW5kZXJMYW1iZGFN
dXN0QmVFZmZlY3RpdmVseUZpbmFsLCANCisJCWFyZ3VtZW50cywNCisJCWFyZ3VtZW50cywNCisJ
CW5vZGVTb3VyY2VTdGFydChsb2NhbCwgbG9jYXRpb24pLA0KKwkJbm9kZVNvdXJjZUVuZChsb2Nh
bCwgbG9jYXRpb24pKTsNCit9DQogcHVibGljIHZvaWQgY2Fubm90UmV0dXJuSW5Jbml0aWFsaXpl
cihBU1ROb2RlIGxvY2F0aW9uKSB7DQogCXRoaXMuaGFuZGxlKA0KZGlmZiAtLWdpdCBjb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9tZXNzYWdlcy5wcm9w
ZXJ0aWVzIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVt
L21lc3NhZ2VzLnByb3BlcnRpZXMNCmluZGV4IDk3NzJhNWUuLmE2YjQwOTggMTAwNjQ0DQotLS0g
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vbWVzc2Fn
ZXMucHJvcGVydGllcw0KKysrIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9wcm9ibGVtL21lc3NhZ2VzLnByb3BlcnRpZXMNCkBAIC02MjQsNCArNjI0LDYgQEANCiAj
IyMgTU9SRSBUWVBFIFJFTEFURUQNCiA2NjIgPSBJbGxlZ2FsIGF0dGVtcHQgdG8gY3JlYXRlIGFy
cmF5cyBvZiB1bmlvbiB0eXBlcw0KKzY2MyA9IFRoZSB2YXJpYWJsZSB7MH0gbXVzdCBiZSBtdXN0
IGJlIGZpbmFsIG9yIGVmZmVjdGl2ZWx5IGZpbmFsIGlmIHVzZWQgaW4gYW4gaW5uZXIgY2xhc3MN
Cis2NjQgPSBUaGUgdmFyaWFibGUgezB9IG11c3QgYmUgbXVzdCBiZSBmaW5hbCBvciBlZmZlY3Rp
dmVseSBmaW5hbCBpZiB1c2VkIGluIGEgbGFtYmRhIGV4cHJlc3Npb24NCiANCiAjIyMgQ09SUlVQ
VEVEIEJJTkFSSUVT
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>226647</attachid>
            <date>2013-02-06 11:58:00 -0500</date>
            <delta_ts>2013-02-08 16:17:36 -0500</delta_ts>
            <desc>Updated patch</desc>
            <filename>updated-tests-patch.txt</filename>
            <type>text/plain</type>
            <size>7665</size>
            <attacher name="Jesper Moller">jesper</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMA0KI1Agb3JnLmVjbGlwc2UuamR0LmNvcmUu
dGVzdHMuY29tcGlsZXINCmRpZmYgLS1naXQgc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3Rz
L2NvbXBpbGVyL3JlZ3Jlc3Npb24vQ29tcGlsZXJJbnZvY2F0aW9uVGVzdHMuamF2YSBzcmMvb3Jn
L2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9Db21waWxlckludm9j
YXRpb25UZXN0cy5qYXZhDQppbmRleCAxY2NmYWE1Li41YTkzOGMxIDEwMDY0NA0KLS0tIHNyYy9v
cmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0NvbXBpbGVySW52
b2NhdGlvblRlc3RzLmphdmENCisrKyBzcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29t
cGlsZXIvcmVncmVzc2lvbi9Db21waWxlckludm9jYXRpb25UZXN0cy5qYXZhDQpAQCAtMjYsNiAr
MjYsNyBAQA0KICAqCQkJCQkJCQlidWcgMzkyODYyIC0gWzEuOF1bY29tcGlsZXJdW251bGxdIEV2
YWx1YXRlIG51bGwgYW5ub3RhdGlvbnMgb24gYXJyYXkgdHlwZXMNCiAgKiAgICAgSmVzcGVyIFMg
TW9sbGVyIC0gQ29udHJpYnV0aW9ucyBmb3INCiAgKgkJCQkJCQkJYnVnIDM4MjcwMSAtIFsxLjhd
W2NvbXBpbGVyXSBJbXBsZW1lbnQgc2VtYW50aWMgYW5hbHlzaXMgb2YgTGFtYmRhIGV4cHJlc3Np
b25zICYgUmVmZXJlbmNlIGV4cHJlc3Npb24NCisgKgkJCQkJCQkJYnVnIDM4MjcyMSAtIFsxLjhd
W2NvbXBpbGVyXSBFZmZlY3RpdmVseSBmaW5hbCB2YXJpYWJsZXMgbmVlZHMgc3BlY2lhbCB0cmVh
dG1lbnQNCiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpk
dC5jb3JlLnRlc3RzLmNvbXBpbGVyLnJlZ3Jlc3Npb247DQogDQpAQCAtNzk0LDYgKzc5NSw4IEBA
DQogCQlleHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiT2JqZWN0Q2Fubm90SGF2ZVN1cGVy
VHlwZXMiLCBuZXcgUHJvYmxlbUF0dHJpYnV0ZXMoQ2F0ZWdvcml6ZWRQcm9ibGVtLkNBVF9JTlRF
Uk5BTCkpOw0KIAkJZXhwZWN0ZWRQcm9ibGVtQXR0cmlidXRlcy5wdXQoIk9iamVjdEhhc05vU3Vw
ZXJjbGFzcyIsIG5ldyBQcm9ibGVtQXR0cmlidXRlcyhDYXRlZ29yaXplZFByb2JsZW0uQ0FUX1RZ
UEUpKTsNCiAJCWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0KCJPYmplY3RNdXN0QmVDbGFz
cyIsIG5ldyBQcm9ibGVtQXR0cmlidXRlcyhDYXRlZ29yaXplZFByb2JsZW0uQ0FUX0lOVEVSTkFM
KSk7DQorCQlleHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiT3V0ZXJMb2NhbE11c3RCZUVm
ZmVjdGl2ZWx5RmluYWwiLCBuZXcgUHJvYmxlbUF0dHJpYnV0ZXMoQ2F0ZWdvcml6ZWRQcm9ibGVt
LkNBVF9JTlRFUk5BTCkpOw0KKwkJZXhwZWN0ZWRQcm9ibGVtQXR0cmlidXRlcy5wdXQoIk91dGVy
TG9jYWxVbmRlckxhbWJkYU11c3RCZUVmZmVjdGl2ZWx5RmluYWwiLCBuZXcgUHJvYmxlbUF0dHJp
YnV0ZXMoQ2F0ZWdvcml6ZWRQcm9ibGVtLkNBVF9JTlRFUk5BTCkpOw0KIAkJZXhwZWN0ZWRQcm9i
bGVtQXR0cmlidXRlcy5wdXQoIk91dGVyTG9jYWxNdXN0QmVGaW5hbCIsIG5ldyBQcm9ibGVtQXR0
cmlidXRlcyhDYXRlZ29yaXplZFByb2JsZW0uQ0FUX0lOVEVSTkFMKSk7DQogCQlleHBlY3RlZFBy
b2JsZW1BdHRyaWJ1dGVzLnB1dCgiT3ZlcnJpZGluZ0RlcHJlY2F0ZWRNZXRob2QiLCBuZXcgUHJv
YmxlbUF0dHJpYnV0ZXMoQ2F0ZWdvcml6ZWRQcm9ibGVtLkNBVF9ERVBSRUNBVElPTikpOw0KIAkJ
ZXhwZWN0ZWRQcm9ibGVtQXR0cmlidXRlcy5wdXQoIk92ZXJyaWRpbmdNZXRob2RXaXRob3V0U3Vw
ZXJJbnZvY2F0aW9uIiwgbmV3IFByb2JsZW1BdHRyaWJ1dGVzKENhdGVnb3JpemVkUHJvYmxlbS5D
QVRfUE9URU5USUFMX1BST0dSQU1NSU5HX1BST0JMRU0pKTsNCkBAIC0xNTM1LDcgKzE1MzgsOSBA
QA0KIAkJZXhwZWN0ZWRQcm9ibGVtQXR0cmlidXRlcy5wdXQoIk9iamVjdENhbm5vdEhhdmVTdXBl
clR5cGVzIiwgU0tJUCk7DQogCQlleHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiT2JqZWN0
SGFzTm9TdXBlcmNsYXNzIiwgU0tJUCk7DQogCQlleHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1
dCgiT2JqZWN0TXVzdEJlQ2xhc3MiLCBTS0lQKTsNCisJCWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0
ZXMucHV0KCJPdXRlckxvY2FsTXVzdEJlRWZmZWN0aXZlbHlGaW5hbCIsIFNLSVApOw0KIAkJZXhw
ZWN0ZWRQcm9ibGVtQXR0cmlidXRlcy5wdXQoIk91dGVyTG9jYWxNdXN0QmVGaW5hbCIsIFNLSVAp
Ow0KKwkJZXhwZWN0ZWRQcm9ibGVtQXR0cmlidXRlcy5wdXQoIk91dGVyTG9jYWxVbmRlckxhbWJk
YU11c3RCZUVmZmVjdGl2ZWx5RmluYWwiLCBTS0lQKTsNCiAJCWV4cGVjdGVkUHJvYmxlbUF0dHJp
YnV0ZXMucHV0KCJPdmVycmlkaW5nRGVwcmVjYXRlZE1ldGhvZCIsIG5ldyBQcm9ibGVtQXR0cmli
dXRlcyhKYXZhQ29yZS5DT01QSUxFUl9QQl9ERVBSRUNBVElPTikpOw0KIAkJZXhwZWN0ZWRQcm9i
bGVtQXR0cmlidXRlcy5wdXQoIk92ZXJyaWRpbmdNZXRob2RXaXRob3V0U3VwZXJJbnZvY2F0aW9u
IiwgbmV3IFByb2JsZW1BdHRyaWJ1dGVzKEphdmFDb3JlLkNPTVBJTEVSX1BCX09WRVJSSURJTkdf
TUVUSE9EX1dJVEhPVVRfU1VQRVJfSU5WT0NBVElPTikpOw0KIAkJZXhwZWN0ZWRQcm9ibGVtQXR0
cmlidXRlcy5wdXQoIk92ZXJyaWRpbmdOb25WaXNpYmxlTWV0aG9kIiwgbmV3IFByb2JsZW1BdHRy
aWJ1dGVzKEphdmFDb3JlLkNPTVBJTEVSX1BCX09WRVJSSURJTkdfUEFDS0FHRV9ERUZBVUxUX01F
VEhPRCkpOw0KZGlmZiAtLWdpdCBzcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGls
ZXIvcmVncmVzc2lvbi9OZWdhdGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhIHNyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRh
RXhwcmVzc2lvbnNUZXN0LmphdmENCmluZGV4IDM1ZDJjYzcuLjk2ZGIwMDkgMTAwNjQ0DQotLS0g
c3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVnYXRp
dmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YQ0KKysrIHNyYy9vcmcvZWNsaXBzZS9qZHQvY29y
ZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRhRXhwcmVzc2lvbnNUZXN0
LmphdmENCkBAIC0xMyw3ICsxMyw3IEBADQogICogICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRp
YWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbg0KICAqICAgICBKZXNwZXIgUyBNb2xsZXIgLSBDb250
cmlidXRpb25zIGZvcg0KICAqCQkJCQkJCWJ1ZyAzODI3MDEgLSBbMS44XVtjb21waWxlcl0gSW1w
bGVtZW50IHNlbWFudGljIGFuYWx5c2lzIG9mIExhbWJkYSBleHByZXNzaW9ucyAmIFJlZmVyZW5j
ZSBleHByZXNzaW9uDQotIA0KKyAqCQkJCQkJCWJ1ZyAzODI3MjEgLSBbMS44XVtjb21waWxlcl0g
RWZmZWN0aXZlbHkgZmluYWwgdmFyaWFibGVzIG5lZWRzIHNwZWNpYWwgdHJlYXRtZW50DQogICoq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKiovDQogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0
cy5jb21waWxlci5yZWdyZXNzaW9uOw0KIA0KQEAgLTE1MTMsNiArMTUxMywxMDAgQEANCiAJCQki
SW5jb21wYXRpYmxlIHR5cGUgc3BlY2lmaWVkIGZvciBsYW1iZGEgZXhwcmVzc2lvblwncyBwYXJh
bWV0ZXIgeFxuIiArIA0KIAkJCSItLS0tLS0tLS0tXG4iKTsNCiB9DQorDQorLy9odHRwczovL2J1
Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzgyNzIxLCBbMS44XVtjb21waWxl
cl0gRWZmZWN0aXZlbHkgZmluYWwgdmFyaWFibGVzIG5lZWRzIHNwZWNpYWwgdHJlYXRtZW50DQor
cHVibGljIHZvaWQgdGVzdDA0NCgpIHsNCisJLy8gVGhpcyB0ZXN0IGNoZWNrcyB0aGF0IHRoZSBz
aW1wbGUgY2FzZXMgYXJlIE9LDQorCXRoaXMucnVuTmVnYXRpdmVUZXN0KA0KKwkJCW5ldyBTdHJp
bmdbXSB7DQorCQkJCQkiWC5qYXZhIiwNCisJCQkJCSJpbnRlcmZhY2UgSSB7XG4iICsgDQorCQkJ
CQkiCXZvaWQgZG9pdCgpO1xuIiArIA0KKwkJCQkJIn1cbiIgKyANCisJCQkJCSJwdWJsaWMgY2xh
c3MgWCB7XG4iICsgDQorCQkJCQkiICBwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBh
cmdzKSB7XG4iICsgDQorCQkJCQkiICAgIGludCB2YXIgPSAyO1xuIiArIA0KKwkJCQkJIiAgICBJ
IHggPSBuZXcgSSgpIHtcbiIgKyANCisJCQkJCSIgICAgICBwdWJsaWMgdm9pZCBkb2l0KCkge1xu
IiArIA0KKwkJCQkJIiAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKGFyZ3MpOyAvLyBPSzogYXJn
cyBpcyBub3QgcmUtYXNzaWdubWVudCBzaW5jZSBkZWNsYXJhdGlvbi9maXJzdCBhc3NpZ25tZW50
XG4iICsgDQorCQkJCQkiICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4odmFyKTsgLy8gRXJyb3I6
IHZhciBpcyBub3QgZWZmZWN0aXZlbHkgZmluYWxcbiIgKyANCisJCQkJCSIgICAgICB9XG4iICsg
DQorCQkJCQkiICAgIH07XG4iICsgDQorCQkJCQkiICAgIEkgeDIgPSAoKSAtPiB7XG4iICsgDQor
CQkJCQkiICAgICAgU3lzdGVtLm91dC5wcmludGxuKGFyZ3MpOyAvLyBPSzogYXJncyBpcyBub3Qg
cmUtYXNzaWdubWVudCBzaW5jZSBkZWNsYXJhdGlvbi9maXJzdCBhc3NpZ25tZW50XG4iICsgDQor
CQkJCQkiICAgICAgU3lzdGVtLm91dC5wcmludGxuKHZhcik7IC8vIEVycm9yOiB2YXIgaXMgbm90
IGVmZmVjdGl2ZWx5IGZpbmFsXG4iICsgDQorCQkJCQkiICAgIH07XG4iICsgDQorCQkJCQkiICAg
IHZhcj0yO1xuIiArIA0KKwkJCQkJIiAgfVxuIiArIA0KKwkJCQkJIn0iICwNCisJCQkJfSwNCisJ
CQkJIi0tLS0tLS0tLS1cbiIgKyANCisJCQkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAx
MClcbiIgKyANCisJCQkJIglTeXN0ZW0ub3V0LnByaW50bG4odmFyKTsgLy8gRXJyb3I6IHZhciBp
cyBub3QgZWZmZWN0aXZlbHkgZmluYWxcbiIgKyANCisJCQkJIgkgICAgICAgICAgICAgICAgICAg
Xl5eXG4iICsgDQorCQkJCSJUaGUgdmFyaWFibGUgdmFyIG11c3QgYmUgbXVzdCBiZSBmaW5hbCBv
ciBlZmZlY3RpdmVseSBmaW5hbCBpZiB1c2VkIGluIGEgbGFtYmRhIGV4cHJlc3Npb25cbiIgKyAN
CisJCQkJIi0tLS0tLS0tLS1cbiIgKyANCisJCQkJIjIuIEVSUk9SIGluIFguamF2YSAoYXQgbGlu
ZSAxNSlcbiIgKyANCisJCQkJIglTeXN0ZW0ub3V0LnByaW50bG4odmFyKTsgLy8gRXJyb3I6IHZh
ciBpcyBub3QgZWZmZWN0aXZlbHkgZmluYWxcbiIgKyANCisJCQkJIgkgICAgICAgICAgICAgICAg
ICAgXl5eXG4iICsgDQorCQkJCSJUaGUgdmFyaWFibGUgdmFyIG11c3QgYmUgbXVzdCBiZSBmaW5h
bCBvciBlZmZlY3RpdmVseSBmaW5hbCBpZiB1c2VkIGluIGFuIGlubmVyIGNsYXNzXG4iICsgDQor
CQkJCSItLS0tLS0tLS0tXG4iDQorCQkJCSk7DQorfQ0KKw0KKy8vaHR0cHM6Ly9idWdzLmVjbGlw
c2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM4MjcyMSwgWzEuOF1bY29tcGlsZXJdIEVmZmVj
dGl2ZWx5IGZpbmFsIHZhcmlhYmxlcyBuZWVkcyBzcGVjaWFsIHRyZWF0bWVudA0KK3B1YmxpYyB2
b2lkIHRlc3QwNDUoKSB7DQorCS8vIFRoaXMgdGVzdCBjaGVja3MgdGhhdCBjb21tb24gc2VtYW50
aWMgY2hlY2tzIGFyZSBpbmRlZWQgcnVuDQorCXRoaXMucnVuTmVnYXRpdmVUZXN0KA0KKwkJCW5l
dyBTdHJpbmdbXSB7DQorCQkJCQkiWC5qYXZhIiwNCisJCQkJCSJpbnRlcmZhY2UgSSB7XG4iICsg
DQorCQkJCQkiCXZvaWQgZG9pdCgpO1xuIiArIA0KKwkJCQkJIn1cbiIgKyANCisJCQkJCSJwdWJs
aWMgY2xhc3MgWCB7XG4iICsgDQorCQkJCQkiICBwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJp
bmdbXSBhcmdzKSB7XG4iICsgDQorCQkJCQkiICAgIHRyeSB7XG4iICsgDQorCQkJCQkiICAgICAg
bmV3IGphdmEuaW8uRmlsZShcImR3ZWVwXCIpLmdldENhbm9uaWNhbFBhdGgoKTtcbiIgKyANCisJ
CQkJCSIgICAgfSBjYXRjaCAoamF2YS5pby5JT0V4Y2VwdGlvbiBpb2UpIHtcbiIgKyANCisJCQkJ
CSIgICAgICBJIHgyID0gKCkgLT4ge1xuIiArIA0KKwkJCQkJIiAgICAgICAgU3lzdGVtLm91dC5w
cmludGxuKGlvZS5nZXRNZXNzYWdlKCkpOyAvLyBPSzogYXJncyBpcyBub3QgcmUtYXNzaWdubWVu
dCBzaW5jZSBkZWNsYXJhdGlvbi9maXJzdCBhc3NpZ25tZW50XG4iICsgDQorCQkJCQkiICAgICAg
fTtcbiIgKyANCisJCQkJCSIgICAgfTtcbiIgKyANCisJCQkJCSIgICAgamF2YS51dGlsLkxpc3Q8
U3RyaW5nPiBsaXN0ID0gbmV3IGphdmEudXRpbC5BcnJheUxpc3Q8PigpO1xuIiArIA0KKwkJCQkJ
IiAgICBmb3IgKFN0cmluZyBzIDogbGlzdCkge1xuIiArIA0KKwkJCQkJIiAgICAgIEkgeDIgPSAo
KSAtPiB7XG4iICsgDQorCQkJCQkiICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4ocyk7IC8vIE9L
OiBhcmdzIGlzIG5vdCByZS1hc3NpZ25tZW50IHNpbmNlIGRlY2xhcmF0aW9uL2ZpcnN0IGFzc2ln
bm1lbnRcbiIgKyANCisJCQkJCSIgICAgICB9O1xuIiArIA0KKwkJCQkJIiAgICB9O1xuIiArIA0K
KwkJCQkJIiAgICBmb3IgKFN0cmluZyBzMiA6IGxpc3QpIHtcbiIgKyANCisJCQkJCSIgICAgICBz
MiA9IFwiTmljZSFcIjtcbiIgKyANCisJCQkJCSIgICAgICBJIHgyID0gKCkgLT4ge1xuIiArIA0K
KwkJCQkJIiAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKHMyKTsgLy8gRXJyb3I6IHZhciBpcyBu
b3QgZWZmZWN0aXZlbHkgZmluYWxcbiIgKyANCisJCQkJCSIgICAgICB9O1xuIiArIA0KKwkJCQkJ
IiAgICB9O1xuIiArIA0KKwkJCQkJIiAgfVxuIiArIA0KKwkJCQkJIlxuIiArDQorCQkJCQkiICB2
b2lkIGZvbygpIHtcbiIgKyANCisJCQkJCSIgICAgdHJ5IHtcbiIgKyANCisJCQkJCSIgICAgICBc
biIgKyANCisJCQkJCSIgIH0gY2F0Y2ggKE51bGxQb2ludGVyRXhjZXB0aW9uIHwgQXJyYXlJbmRl
eE91dE9mQm91bmRzRXhjZXB0aW9uIGUpIHtcbiIgKyANCisJCQkJCSIgICAgSSBpID0gKCkgLT4g
e1xuIiArIA0KKwkJCQkJIiAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihlKTtcbiIgKyANCisJCQkJ
CSIgICAgIH07XG4iICsgDQorCQkJCQkiICAgIH1cbiIgKyANCisJCQkJCSIgIH1cbiIgKw0KKwkJ
CQkJIn1cbiIgLA0KKwkJCQl9LA0KKwkJCQkiLS0tLS0tLS0tLVxuIiArIA0KKwkJCQkiMS4gRVJS
T1IgaW4gWC5qYXZhIChhdCBsaW5lIDIyKVxuIiArIA0KKwkJCQkiCVN5c3RlbS5vdXQucHJpbnRs
bihzMik7IC8vIEVycm9yOiB2YXIgaXMgbm90IGVmZmVjdGl2ZWx5IGZpbmFsXG4iICsgDQorCQkJ
CSIJICAgICAgICAgICAgICAgICAgIF5eXG4iICsgDQorCQkJCSJUaGUgdmFyaWFibGUgczIgbXVz
dCBiZSBtdXN0IGJlIGZpbmFsIG9yIGVmZmVjdGl2ZWx5IGZpbmFsIGlmIHVzZWQgaW4gYW4gaW5u
ZXIgY2xhc3NcbiIgKyANCisJCQkJIi0tLS0tLS0tLS1cbiINCisJCQkJKTsNCit9DQorDQorDQog
cHVibGljIHN0YXRpYyBDbGFzcyB0ZXN0Q2xhc3MoKSB7DQogCXJldHVybiBOZWdhdGl2ZUxhbWJk
YUV4cHJlc3Npb25zVGVzdC5jbGFzczsNCiB9
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>226799</attachid>
            <date>2013-02-08 16:17:00 -0500</date>
            <delta_ts>2013-02-10 20:03:04 -0500</delta_ts>
            <desc>New patch which does better final-analysis</desc>
            <filename>new-patch.txt</filename>
            <type>text/plain</type>
            <size>14363</size>
            <attacher name="Jesper Moller">jesper</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9jb3JlL2NvbXBpbGVyL0lQcm9ibGVtLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvY29yZS9jb21waWxlci9JUHJvYmxlbS5qYXZhCmluZGV4IGU1
OWI1NmYuLmExZDNlM2QgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9jb3JlL2NvbXBpbGVyL0lQcm9ibGVtLmphdmEKKysrIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2NvcmUvY29tcGlsZXIvSVBy
b2JsZW0uamF2YQpAQCAtMTc0LDIgKzE3NCw0IEBACiAgKgkJCQkJCQkJCVRhcmdldFR5cGVOb3RB
RnVuY3Rpb25hbEludGVyZmFjZQorICoJCQkJCQkJCQlPdXRlckxvY2FsTXVzdEJlRWZmZWN0aXZl
bHlGaW5hbAorICoJCQkJCQkJCQlPdXRlckxvY2FsVW5kZXJMYW1iZGFNdXN0QmVFZmZlY3RpdmVs
eUZpbmFsCiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KQEAgLTEzNzAsMiArMTM3Miw2IEBACiAJ
aW50IElsbGVnYWxBcnJheU9mVW5pb25UeXBlID0gVHlwZVJlbGF0ZWQgKyA2NjI7CisJLyoqIEBz
aW5jZSAzLjkgKi8KKwlpbnQgT3V0ZXJMb2NhbE11c3RCZUVmZmVjdGl2ZWx5RmluYWwgPSBJbnRl
cm5hbCArIDY2MzsKKwkvKiogQHNpbmNlIDMuOSAqLworCWludCBPdXRlckxvY2FsVW5kZXJMYW1i
ZGFNdXN0QmVFZmZlY3RpdmVseUZpbmFsID0gSW50ZXJuYWwgKyA2NjQ7CiAKZGlmZiAtLWdpdCBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hc3QvQVNUTm9kZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BU1ROb2RlLmphdmEKaW5kZXgg
NjM1ZDYzYS4uOGNmYzI2ZSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BU1ROb2RlLmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FzdC9BU1ROb2RlLmphdmEKQEAgLTIyLDIgKzIyLDQgQEAKICAqCQkJCQkJCQli
dWcgMzkzNzE5IC0gW2NvbXBpbGVyXSBpbmNvbnNpc3RlbnQgd2FybmluZ3Mgb24gaXRlcmF0aW9u
IHZhcmlhYmxlcworICogICAgIEplc3BlciBTIE1vbGxlciAtIENvbnRyaWJ1dGlvbnMgZm9yCisg
KgkJCQkJCQkJYnVnIDM4MjcyMSAtIFsxLjhdW2NvbXBpbGVyXSBFZmZlY3RpdmVseSBmaW5hbCB2
YXJpYWJsZXMgbmVlZHMgc3BlY2lhbCB0cmVhdG1lbnQKICAqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
LwpAQCAtMTQwLDIgKzE0MiwzIEBACiAJcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgRGVwdGhNQVNL
ID0gQml0NnxCaXQ3fEJpdDh8Qml0OXxCaXQxMHxCaXQxMXxCaXQxMnxCaXQxMzsgLy8gOCBiaXRz
IGZvciBhY3R1YWwgZGVwdGggdmFsdWUgKG1heC4gMjU1KQorCXB1YmxpYyBzdGF0aWMgZmluYWwg
aW50IElzRnJvbU91dHNpZGVMYW1iZGEgPSBCaXQxNDsKIApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fz
dC9Bc3NpZ25tZW50LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Fzc2lnbm1lbnQuamF2YQppbmRleCBmMDgx
YTFkLi5mNmQ1ZTQ4IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Fzc2lnbm1lbnQuamF2YQorKysg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvYXN0L0Fzc2lnbm1lbnQuamF2YQpAQCAtNjAsMiArNjAsNSBAQAogCUxvY2FsVmFy
aWFibGVCaW5kaW5nIGxvY2FsID0gdGhpcy5saHMubG9jYWxWYXJpYWJsZUJpbmRpbmcoKTsKKwlp
ZiAobG9jYWwgIT0gbnVsbCAmJiBmbG93SW5mby5pc1BvdGVudGlhbGx5QXNzaWduZWQobG9jYWwp
KSB7CisJCWxvY2FsLnRhZ0JpdHMgJj0gflRhZ0JpdHMuSXNFZmZlY3RpdmVseUZpbmFsOworCX0K
IAlpZiAoKHRoaXMuZXhwcmVzc2lvbi5pbXBsaWNpdENvbnZlcnNpb24gJiBUeXBlSWRzLlVOQk9Y
SU5HKSAhPSAwKSB7CkBAIC0xOTYsNiArMTk5LDIgQEAKIAkJdGhpcy5yZXNvbHZlZFR5cGUgPSBs
aHNUeXBlLmNhcHR1cmUoc2NvcGUsIHRoaXMuc291cmNlRW5kKTsKLQl9Ci0JTG9jYWxWYXJpYWJs
ZUJpbmRpbmcgbG9jYWxWYXJpYWJsZUJpbmRpbmcgPSB0aGlzLmxocy5sb2NhbFZhcmlhYmxlQmlu
ZGluZygpOwotCWlmIChsb2NhbFZhcmlhYmxlQmluZGluZyAhPSBudWxsKSB7Ci0JCWxvY2FsVmFy
aWFibGVCaW5kaW5nLnRhZ0JpdHMgJj0gflRhZ0JpdHMuSXNFZmZlY3RpdmVseUZpbmFsOwogCX0K
ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvQ29tcG91bmRBc3NpZ25tZW50LmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
YXN0L0NvbXBvdW5kQXNzaWdubWVudC5qYXZhCmluZGV4IDNhYjAxMGUuLmM4N2FlNmYgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hc3QvQ29tcG91bmRBc3NpZ25tZW50LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fz
dC9Db21wb3VuZEFzc2lnbm1lbnQuamF2YQpAQCAtMSwzICsxLDMgQEAKIC8qKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTIgSUJNIENvcnBvcmF0aW9uIGFu
ZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTMgSUJNIENvcnBvcmF0aW9uIGFu
ZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBh
Y2NvbXBhbnlpbmcgbWF0ZXJpYWxzCkBAIC0xMiwyICsxMiw0IEBACiAgKgkJCQkJCQkJYnVnIDM4
MzM2OCAtIFtjb21waWxlcl1bbnVsbF0gc3ludGFjdGljIG51bGwgYW5hbHlzaXMgZm9yIGZpZWxk
IHJlZmVyZW5jZXMKKyAqICAgICBKZXNwZXIgUyBNb2xsZXIgLSBDb250cmlidXRpb25zIGZvcgor
ICoJCQkJCQkJCWJ1ZyAzODI3MjEgLSBbMS44XVtjb21waWxlcl0gRWZmZWN0aXZlbHkgZmluYWwg
dmFyaWFibGVzIG5lZWRzIHNwZWNpYWwgdHJlYXRtZW50CiAgKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
Ki8KQEAgLTQxLDIgKzQzLDYgQEAKIAkJRmxvd0luZm8gZmxvd0luZm8pIHsKKwlMb2NhbFZhcmlh
YmxlQmluZGluZyBsb2NhbFZhcmlhYmxlQmluZGluZyA9IHRoaXMubGhzLmxvY2FsVmFyaWFibGVC
aW5kaW5nKCk7CisJaWYgKGxvY2FsVmFyaWFibGVCaW5kaW5nICE9IG51bGwgJiYgZmxvd0luZm8u
aXNQb3RlbnRpYWxseUFzc2lnbmVkKGxvY2FsVmFyaWFibGVCaW5kaW5nKSkgeworCQlsb2NhbFZh
cmlhYmxlQmluZGluZy50YWdCaXRzICY9IH5UYWdCaXRzLklzRWZmZWN0aXZlbHlGaW5hbDsKKwl9
CiAJLy8gcmVjb3JkIHNldHRpbmcgYSB2YXJpYWJsZTogdmFyaW91cyBzY2VuYXJpaSBhcmUgcG9z
c2libGUsIHNldHRpbmcgYW4gYXJyYXkgcmVmZXJlbmNlLApAQCAtMTMyLDYgKzEzOCwyIEBACiAJ
CQlyZXR1cm4gbnVsbDsKLQkJTG9jYWxWYXJpYWJsZUJpbmRpbmcgbG9jYWxWYXJpYWJsZUJpbmRp
bmcgPSB0aGlzLmxocy5sb2NhbFZhcmlhYmxlQmluZGluZygpOwotCQlpZiAobG9jYWxWYXJpYWJs
ZUJpbmRpbmcgIT0gbnVsbCkgewotCQkJbG9jYWxWYXJpYWJsZUJpbmRpbmcudGFnQml0cyAmPSB+
VGFnQml0cy5Jc0VmZmVjdGl2ZWx5RmluYWw7Ci0JCX0KIAkJLy8gYXV0b2JveGluZyBzdXBwb3J0
CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0xhbWJkYUV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhCmluZGV4IDljZTg1OGUuLjVjMmExOGUgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFt
YmRhRXhwcmVzc2lvbi5qYXZhCkBAIC0xNSwyICsxNSwzIEBACiAgKgkJCQkJCQlidWcgMzgyNzAx
IC0gWzEuOF1bY29tcGlsZXJdIEltcGxlbWVudCBzZW1hbnRpYyBhbmFseXNpcyBvZiBMYW1iZGEg
ZXhwcmVzc2lvbnMgJiBSZWZlcmVuY2UgZXhwcmVzc2lvbgorICoJCQkJCQkJYnVnIDM4MjcyMSAt
IFsxLjhdW2NvbXBpbGVyXSBFZmZlY3RpdmVseSBmaW5hbCB2YXJpYWJsZXMgbmVlZHMgc3BlY2lh
bCB0cmVhdG1lbnQKICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwpAQCAtMjIsMiArMjMsMyBAQAog
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5jbGFzc2ZtdC5DbGFzc0Zp
bGVDb25zdGFudHM7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmNv
ZGVnZW4uQ29kZVN0cmVhbTsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIuZmxvdy5FeGNlcHRpb25IYW5kbGluZ0Zsb3dDb250ZXh0OwpAQCAtNTYsMiArNTgsNyBAQAog
CQorCXB1YmxpYyB2b2lkIGdlbmVyYXRlQ29kZShCbG9ja1Njb3BlIGN1cnJlbnRTY29wZSwgQ29k
ZVN0cmVhbSBjb2RlU3RyZWFtLCBib29sZWFuIHZhbHVlUmVxdWlyZWQpIHsKKwkJc3VwZXIuZ2Vu
ZXJhdGVDb2RlKGN1cnJlbnRTY29wZSwgY29kZVN0cmVhbSwgdmFsdWVSZXF1aXJlZCk7CisJCWlm
ICghdGhpcy5pZ25vcmVGdXJ0aGVySW52ZXN0aWdhdGlvbikgdGhpcy5ib2R5LmdlbmVyYXRlQ29k
ZSh0aGlzLnNjb3BlLCBjb2RlU3RyZWFtKTsgLy8gVE9ETyBwdXQgaW50byBuZXcgbWV0aG9kCisJ
fQorCiAJLyogVGhpcyBjb2RlIGlzIGFycmFuZ2VkIHNvIHRoYXQgd2UgY2FuIGNvbnRpbnVlIHdp
dGggYXMgbXVjaCBhbmFseXNpcyBhcyBwb3NzaWJsZSB3aGlsZSBhdm9pZGluZyAKZGlmZiAtLWdp
dCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hc3QvTmFtZVJlZmVyZW5jZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9OYW1lUmVmZXJl
bmNlLmphdmEKaW5kZXggZWNhOGFkYy4uN2M5MWNkNSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9O
YW1lUmVmZXJlbmNlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9OYW1lUmVmZXJlbmNlLmphdmEKQEAg
LTEsMyArMSwzIEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAy
MDAwLCAyMDEyIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAy
MDAwLCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNl
cnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwpAQCAtMTUs
MiArMTUsNCBAQAogICoJCQkJCQkJCWJ1ZyAzMzE2NDkgLSBbY29tcGlsZXJdW251bGxdIGNvbnNp
ZGVyIG51bGwgYW5ub3RhdGlvbnMgZm9yIGZpZWxkcworICogICAgIEplc3BlciBTIE1vbGxlciAt
IENvbnRyaWJ1dGlvbnMgZm9yCisgKgkJCQkJCQlidWcgMzgyNzIxIC0gWzEuOF1bY29tcGlsZXJd
IEVmZmVjdGl2ZWx5IGZpbmFsIHZhcmlhYmxlcyBuZWVkcyBzcGVjaWFsIHRyZWF0bWVudAogICoq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKiovCkBAIC0xOCwyICsyMCwzIEBACiAKK2ltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuY2xhc3NmbXQuQ2xhc3NGaWxlQ29uc3RhbnRzOwog
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuKjsKQEAgLTg2
LDIgKzg5LDE3IEBACiBwdWJsaWMgYWJzdHJhY3QgY2hhcltdW10gZ2V0TmFtZSgpOworCitwcm90
ZWN0ZWQgdm9pZCBjaGVja0VmZmVjdGl2ZWx5RmluYWxBY2Nlc3MoQmxvY2tTY29wZSBjdXJyZW50
U2NvcGUpIHsKKwlpZiAodGhpcy5iaW5kaW5nIGluc3RhbmNlb2YgTG9jYWxWYXJpYWJsZUJpbmRp
bmcpIHsKKwkJTG9jYWxWYXJpYWJsZUJpbmRpbmcgbG9jYWxCaW5kaW5nID0gKExvY2FsVmFyaWFi
bGVCaW5kaW5nKSB0aGlzLmJpbmRpbmc7CisJCWlmICghbG9jYWxCaW5kaW5nLmlzRmluYWwoKSAm
JiAoKHRoaXMuYml0cyAmIEFTVE5vZGUuRGVwdGhNQVNLKSAhPSAwIHx8ICh0aGlzLmJpdHMgJiBB
U1ROb2RlLklzRnJvbU91dHNpZGVMYW1iZGEpICE9IDApKSB7CisJCQlpZiAoY3VycmVudFNjb3Bl
LmNvbXBpbGVyT3B0aW9ucygpLmNvbXBsaWFuY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMu
SkRLMV84KSB7CisJCQkJaWYgKCFsb2NhbEJpbmRpbmcuaXNFZmZlY3RpdmVseUZpbmFsKCkpIHsK
KwkJCQkJY3VycmVudFNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmNhbm5vdFJlZmVyVG9Ob25FZmZl
Y3RpdmVseUZpbmFsT3V0ZXJMb2NhbChsb2NhbEJpbmRpbmcsIHRoaXMpOworCQkJCX0KKwkJCX0g
ZWxzZSB7CisJCQkJY3VycmVudFNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmNhbm5vdFJlZmVyVG9O
b25GaW5hbE91dGVyTG9jYWwobG9jYWxCaW5kaW5nLCB0aGlzKTsKKwkJCX0KKwkJfQorCX0KK30K
IH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUXVhbGlmaWVkTmFtZVJlZmVyZW5jZS5qYXZhIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FzdC9RdWFsaWZpZWROYW1lUmVmZXJlbmNlLmphdmEKaW5kZXggOTA4MWQ1Mi4uOGNl
YzdmYiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9RdWFsaWZpZWROYW1lUmVmZXJlbmNlLmphdmEK
KysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2FzdC9RdWFsaWZpZWROYW1lUmVmZXJlbmNlLmphdmEKQEAgLTEsMyArMSwz
IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEy
IElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEz
IElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhp
cyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwpAQCAtMTksMiArMTksNCBA
QAogICoJCQkJCQkJCWJ1ZyAzNDUzMDUgLSBbY29tcGlsZXJdW251bGxdIENvbXBpbGVyIG1pc2lk
ZW50aWZpZXMgYSBjYXNlIG9mICJ2YXJpYWJsZSBjYW4gb25seSBiZSBudWxsIgorICogICAgIEpl
c3BlciBTIE1vbGxlciAtIENvbnRyaWJ1dGlvbnMgZm9yCisgKgkJCQkJCQkJYnVnIDM4MjcyMSAt
IFsxLjhdW2NvbXBpbGVyXSBFZmZlY3RpdmVseSBmaW5hbCB2YXJpYWJsZXMgbmVlZHMgc3BlY2lh
bCB0cmVhdG1lbnQKICAqCQkJCQkJCQlidWcgMzMxNjQ5IC0gW2NvbXBpbGVyXVtudWxsXSBjb25z
aWRlciBudWxsIGFubm90YXRpb25zIGZvciBmaWVsZHMKQEAgLTM0MywyICszNDUsMyBAQAogcHVi
bGljIHZvaWQgZ2VuZXJhdGVDb2RlKEJsb2NrU2NvcGUgY3VycmVudFNjb3BlLCBDb2RlU3RyZWFt
IGNvZGVTdHJlYW0sIGJvb2xlYW4gdmFsdWVSZXF1aXJlZCkgeworCWNoZWNrRWZmZWN0aXZlbHlG
aW5hbEFjY2VzcyhjdXJyZW50U2NvcGUpOwogCWludCBwYyA9IGNvZGVTdHJlYW0ucG9zaXRpb247
CkBAIC0xMDA4LDUgKzEwMTEsMiBAQAogCQkJCQlMb2NhbFZhcmlhYmxlQmluZGluZyBsb2NhbCA9
IChMb2NhbFZhcmlhYmxlQmluZGluZykgdGhpcy5iaW5kaW5nOwotCQkJCQlpZiAoIWxvY2FsLmlz
RmluYWwoKSAmJiAoKHRoaXMuYml0cyAmIEFTVE5vZGUuRGVwdGhNQVNLKSAhPSAwKSkgewotCQkJ
CQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuY2Fubm90UmVmZXJUb05vbkZpbmFsT3V0ZXJMb2Nh
bCgoTG9jYWxWYXJpYWJsZUJpbmRpbmcpIHRoaXMuYmluZGluZywgdGhpcyk7Ci0JCQkJCX0KIAkJ
CQkJaWYgKGxvY2FsLnR5cGUgIT0gbnVsbCAmJiAobG9jYWwudHlwZS50YWdCaXRzICYgVGFnQml0
cy5IYXNNaXNzaW5nVHlwZSkgIT0gMCkgewpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9TaW5nbGVO
YW1lUmVmZXJlbmNlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1NpbmdsZU5hbWVSZWZlcmVuY2UuamF2YQpp
bmRleCBkN2YzZGU5Li4xYTE0MGJmIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1NpbmdsZU5hbWVS
ZWZlcmVuY2UuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1NpbmdsZU5hbWVSZWZlcmVuY2UuamF2YQpA
QCAtMSwzICsxLDMgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMp
IDIwMDAsIDIwMTIgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMp
IDIwMDAsIDIwMTMgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJl
c2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCkBAIC0x
OCwyICsxOCwzIEBACiAgKgkJCQkJCQkJYnVnIDM4MzM2OCAtIFtjb21waWxlcl1bbnVsbF0gc3lu
dGFjdGljIG51bGwgYW5hbHlzaXMgZm9yIGZpZWxkIHJlZmVyZW5jZXMKKyAqICAgICBKZXNwZXIg
UyBNb2xsZXIgLSA8amVzcGVyQHNlbHNrYWJldC5vcmc+ICAgLSBDb250cmlidXRpb25zIGZvciBi
dWcgMzgyNzIxIC0gWzEuOF1bY29tcGlsZXJdIEVmZmVjdGl2ZWx5IGZpbmFsIHZhcmlhYmxlcyBu
ZWVkcyBzcGVjaWFsIHRyZWF0bWVudAogICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCkBAIC0zOTYs
MiArMzk3LDMgQEAKIHB1YmxpYyB2b2lkIGdlbmVyYXRlQ29kZShCbG9ja1Njb3BlIGN1cnJlbnRT
Y29wZSwgQ29kZVN0cmVhbSBjb2RlU3RyZWFtLCBib29sZWFuIHZhbHVlUmVxdWlyZWQpIHsKKwlj
aGVja0VmZmVjdGl2ZWx5RmluYWxBY2Nlc3MoY3VycmVudFNjb3BlKTsKIAlpbnQgcGMgPSBjb2Rl
U3RyZWFtLnBvc2l0aW9uOwpAQCAtOTg2LDUgKzk4OCwyIEBACiAJCQkJCQl0aGlzLmJpdHMgfD0g
QmluZGluZy5MT0NBTDsKLQkJCQkJCWlmICghdmFyaWFibGUuaXNGaW5hbCgpICYmICh0aGlzLmJp
dHMgJiBBU1ROb2RlLkRlcHRoTUFTSykgIT0gMCkgewotCQkJCQkJCXNjb3BlLnByb2JsZW1SZXBv
cnRlcigpLmNhbm5vdFJlZmVyVG9Ob25GaW5hbE91dGVyTG9jYWwoKExvY2FsVmFyaWFibGVCaW5k
aW5nKXZhcmlhYmxlLCB0aGlzKTsKLQkJCQkJCX0KIAkJCQkJCXZhcmlhYmxlVHlwZSA9IHZhcmlh
YmxlLnR5cGU7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
bG9va3VwL1Njb3BlLmphdmEKaW5kZXggMDUwNDM5MC4uYjlmODMxMiAxMDA2NDQKLS0tIGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2xvb2t1cC9TY29wZS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YQpAQCAt
MSwzICsxLDMgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIw
MDAsIDIwMTIgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIw
MDAsIDIwMTMgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2Vy
dmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCkBAIC0xNywy
ICsxNyw0IEBACiAgKgkJCQkJCQkJYnVnIDM5NTAwMiAtIFNlbGYgYm91bmQgZ2VuZXJpYyBjbGFz
cyBkb2Vzbid0IHJlc29sdmUgYm91bmRzIHByb3Blcmx5IGZvciB3aWxkY2FyZHMgZm9yIGNlcnRh
aW4gcGFyYW1ldHJpc2F0aW9uLgorICogICAgIEplc3BlciBTIE1vbGxlciAtIENvbnRyaWJ1dGlv
bnMgZm9yCisgKgkJCQkJCQkJYnVnIDM4MjcyMSAtIFsxLjhdW2NvbXBpbGVyXSBFZmZlY3RpdmVs
eSBmaW5hbCB2YXJpYWJsZXMgbmVlZHMgc3BlY2lhbCB0cmVhdG1lbnQKICAqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqLwpAQCAtMTcxNywyICsxNzE5LDMgQEAKIAkJCQlpbnQgZm91bmREZXB0aCA9IDA7
CisJCQkJYm9vbGVhbiBpc0luc2lkZUxhbWJkYSA9IGZhbHNlOwogCQkJCVJlZmVyZW5jZUJpbmRp
bmcgZm91bmRBY3R1YWxSZWNlaXZlclR5cGUgPSBudWxsOwpAQCAtMTczOSwyICsxNzQyLDYgQEAK
IAkJCQkJCQkJCWludm9jYXRpb25TaXRlLnNldERlcHRoKGRlcHRoKTsKKwkJCQkJCQkJaWYgKGlz
SW5zaWRlTGFtYmRhICYmIGludm9jYXRpb25TaXRlIGluc3RhbmNlb2YgTmFtZVJlZmVyZW5jZSkg
eworCQkJCQkJCQkJTmFtZVJlZmVyZW5jZSBuYW1lUmVmZXJlbmNlID0gKE5hbWVSZWZlcmVuY2Up
IGludm9jYXRpb25TaXRlOworCQkJCQkJCQkJbmFtZVJlZmVyZW5jZS5iaXRzIHw9IEFTVE5vZGUu
SXNGcm9tT3V0c2lkZUxhbWJkYTsKKwkJCQkJCQkJfQogCQkJCQkJCQlyZXR1cm4gdmFyaWFibGVC
aW5kaW5nOwpAQCAtMTgyOCwyICsxODM1LDUgQEAKIAkJCQkJfQorCQkJCQlpZiAoc2NvcGUua2lu
ZCA9PSBNRVRIT0RfU0NPUEUgJiYgc2NvcGUucGFyZW50ICE9IG51bGwgJiYgc2NvcGUucGFyZW50
LmtpbmQgIT0gQ0xBU1NfU0NPUEUpIHsKKwkJCQkJCWlzSW5zaWRlTGFtYmRhID0gdHJ1ZTsKKwkJ
CQkJfQogCQkJCQlzY29wZSA9IHNjb3BlLnBhcmVudDsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9i
bGVtL1Byb2JsZW1SZXBvcnRlci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxlbVJlcG9ydGVy
LmphdmEKaW5kZXggNjhiOWQ3ZC4uMzA1ODc5MiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0v
UHJvYmxlbVJlcG9ydGVyLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxlbVJlcG9ydGVy
LmphdmEKQEAgLTM2LDIgKzM2LDMgQEAKICAqCQkJCQkJCQlidWcgMzgyNzAxIC0gWzEuOF1bY29t
cGlsZXJdIEltcGxlbWVudCBzZW1hbnRpYyBhbmFseXNpcyBvZiBMYW1iZGEgZXhwcmVzc2lvbnMg
JiBSZWZlcmVuY2UgZXhwcmVzc2lvbgorICoJCQkJCQkJCWJ1ZyAzODI3MjEgLSBbMS44XVtjb21w
aWxlcl0gRWZmZWN0aXZlbHkgZmluYWwgdmFyaWFibGVzIG5lZWRzIHNwZWNpYWwgdHJlYXRtZW50
CiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKi8KQEAgLTEyNDAsMiArMTI0MSwxMSBAQAogfQorcHVi
bGljIHZvaWQgY2Fubm90UmVmZXJUb05vbkVmZmVjdGl2ZWx5RmluYWxPdXRlckxvY2FsKExvY2Fs
VmFyaWFibGVCaW5kaW5nIGxvY2FsLCBBU1ROb2RlIGxvY2F0aW9uKSB7CisJU3RyaW5nW10gYXJn
dW1lbnRzID1uZXcgU3RyaW5nW117IG5ldyBTdHJpbmcobG9jYWwucmVhZGFibGVOYW1lKCkpfTsK
Kwl0aGlzLmhhbmRsZSgKKwkJKGxvY2F0aW9uLmJpdHMgJiBBU1ROb2RlLklzRnJvbU91dHNpZGVM
YW1iZGEpICE9IDAgPyBJUHJvYmxlbS5PdXRlckxvY2FsTXVzdEJlRWZmZWN0aXZlbHlGaW5hbCA6
IElQcm9ibGVtLk91dGVyTG9jYWxVbmRlckxhbWJkYU11c3RCZUVmZmVjdGl2ZWx5RmluYWwsIAor
CQlhcmd1bWVudHMsCisJCWFyZ3VtZW50cywKKwkJbm9kZVNvdXJjZVN0YXJ0KGxvY2FsLCBsb2Nh
dGlvbiksCisJCW5vZGVTb3VyY2VFbmQobG9jYWwsIGxvY2F0aW9uKSk7Cit9CiBwdWJsaWMgdm9p
ZCBjYW5ub3RSZXR1cm5JbkluaXRpYWxpemVyKEFTVE5vZGUgbG9jYXRpb24pIHsKZGlmZiAtLWdp
dCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9wcm9ibGVtL21lc3NhZ2VzLnByb3BlcnRpZXMgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9t
ZXNzYWdlcy5wcm9wZXJ0aWVzCmluZGV4IDQ0NjA4NTMuLjNjNWY0MTIgMTAwNjQ0Ci0tLSBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9wcm9ibGVtL21lc3NhZ2VzLnByb3BlcnRpZXMKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vbWVz
c2FnZXMucHJvcGVydGllcwpAQCAtNjI3LDIgKzYyNyw0IEBACiA2NjIgPSBJbGxlZ2FsIGF0dGVt
cHQgdG8gY3JlYXRlIGFycmF5cyBvZiB1bmlvbiB0eXBlcworNjYzID0gVGhlIHZhcmlhYmxlIHsw
fSBtdXN0IGJlIG11c3QgYmUgZmluYWwgb3IgZWZmZWN0aXZlbHkgZmluYWwgaWYgdXNlZCBpbiBh
biBpbm5lciBjbGFzcworNjY0ID0gVGhlIHZhcmlhYmxlIHswfSBtdXN0IGJlIG11c3QgYmUgZmlu
YWwgb3IgZWZmZWN0aXZlbHkgZmluYWwgaWYgdXNlZCBpbiBhIGxhbWJkYSBleHByZXNzaW9uCiA=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>226800</attachid>
            <date>2013-02-08 16:19:00 -0500</date>
            <delta_ts>2013-02-10 20:11:01 -0500</delta_ts>
            <desc>Patch with tricky test from Stephan</desc>
            <filename>tests-patch.txt</filename>
            <type>text/plain</type>
            <size>10021</size>
            <attacher name="Jesper Moller">jesper</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0NvbXBpbGVySW52b2Nh
dGlvblRlc3RzLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMv
b3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9Db21waWxlcklu
dm9jYXRpb25UZXN0cy5qYXZhCmluZGV4IDdhMTE1MmUuLjg4OGYxNWMgMTAwNjQ0Ci0tLSBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29y
ZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0NvbXBpbGVySW52b2NhdGlvblRlc3RzLmphdmEK
KysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNl
L2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vQ29tcGlsZXJJbnZvY2F0aW9uVGVz
dHMuamF2YQpAQCAtMjgsNiArMjgsNyBAQAogICoJCQkJCQkJCWJ1ZyAzODI3ODkgLSBbY29tcGls
ZXJdW251bGxdIHdhcm4gd2hlbiBzeW50YWN0aWNhbGx5LW5vbm51bGwgZXhwcmVzc2lvbiBpcyBj
b21wYXJlZCBhZ2FpbnN0IG51bGwKICAqICAgICBKZXNwZXIgUyBNb2xsZXIgLSBDb250cmlidXRp
b25zIGZvcgogICoJCQkJCQkJCWJ1ZyAzODI3MDEgLSBbMS44XVtjb21waWxlcl0gSW1wbGVtZW50
IHNlbWFudGljIGFuYWx5c2lzIG9mIExhbWJkYSBleHByZXNzaW9ucyAmIFJlZmVyZW5jZSBleHBy
ZXNzaW9uCisgKgkJCQkJCQkJYnVnIDM4MjcyMSAtIFsxLjhdW2NvbXBpbGVyXSBFZmZlY3RpdmVs
eSBmaW5hbCB2YXJpYWJsZXMgbmVlZHMgc3BlY2lhbCB0cmVhdG1lbnQKICAqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqLwogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci5y
ZWdyZXNzaW9uOwogCkBAIC04MDEsNiArODAyLDggQEAKIAkJZXhwZWN0ZWRQcm9ibGVtQXR0cmli
dXRlcy5wdXQoIk9iamVjdENhbm5vdEhhdmVTdXBlclR5cGVzIiwgbmV3IFByb2JsZW1BdHRyaWJ1
dGVzKENhdGVnb3JpemVkUHJvYmxlbS5DQVRfSU5URVJOQUwpKTsKIAkJZXhwZWN0ZWRQcm9ibGVt
QXR0cmlidXRlcy5wdXQoIk9iamVjdEhhc05vU3VwZXJjbGFzcyIsIG5ldyBQcm9ibGVtQXR0cmli
dXRlcyhDYXRlZ29yaXplZFByb2JsZW0uQ0FUX1RZUEUpKTsKIAkJZXhwZWN0ZWRQcm9ibGVtQXR0
cmlidXRlcy5wdXQoIk9iamVjdE11c3RCZUNsYXNzIiwgbmV3IFByb2JsZW1BdHRyaWJ1dGVzKENh
dGVnb3JpemVkUHJvYmxlbS5DQVRfSU5URVJOQUwpKTsKKwkJZXhwZWN0ZWRQcm9ibGVtQXR0cmli
dXRlcy5wdXQoIk91dGVyTG9jYWxNdXN0QmVFZmZlY3RpdmVseUZpbmFsIiwgbmV3IFByb2JsZW1B
dHRyaWJ1dGVzKENhdGVnb3JpemVkUHJvYmxlbS5DQVRfSU5URVJOQUwpKTsKKwkJZXhwZWN0ZWRQ
cm9ibGVtQXR0cmlidXRlcy5wdXQoIk91dGVyTG9jYWxVbmRlckxhbWJkYU11c3RCZUVmZmVjdGl2
ZWx5RmluYWwiLCBuZXcgUHJvYmxlbUF0dHJpYnV0ZXMoQ2F0ZWdvcml6ZWRQcm9ibGVtLkNBVF9J
TlRFUk5BTCkpOwogCQlleHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiT3V0ZXJMb2NhbE11
c3RCZUZpbmFsIiwgbmV3IFByb2JsZW1BdHRyaWJ1dGVzKENhdGVnb3JpemVkUHJvYmxlbS5DQVRf
SU5URVJOQUwpKTsKIAkJZXhwZWN0ZWRQcm9ibGVtQXR0cmlidXRlcy5wdXQoIk92ZXJyaWRpbmdE
ZXByZWNhdGVkTWV0aG9kIiwgbmV3IFByb2JsZW1BdHRyaWJ1dGVzKENhdGVnb3JpemVkUHJvYmxl
bS5DQVRfREVQUkVDQVRJT04pKTsKIAkJZXhwZWN0ZWRQcm9ibGVtQXR0cmlidXRlcy5wdXQoIk92
ZXJyaWRpbmdNZXRob2RXaXRob3V0U3VwZXJJbnZvY2F0aW9uIiwgbmV3IFByb2JsZW1BdHRyaWJ1
dGVzKENhdGVnb3JpemVkUHJvYmxlbS5DQVRfUE9URU5USUFMX1BST0dSQU1NSU5HX1BST0JMRU0p
KTsKQEAgLTE1NTEsNyArMTU1NCw5IEBACiAJCWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0
KCJPYmplY3RDYW5ub3RIYXZlU3VwZXJUeXBlcyIsIFNLSVApOwogCQlleHBlY3RlZFByb2JsZW1B
dHRyaWJ1dGVzLnB1dCgiT2JqZWN0SGFzTm9TdXBlcmNsYXNzIiwgU0tJUCk7CiAJCWV4cGVjdGVk
UHJvYmxlbUF0dHJpYnV0ZXMucHV0KCJPYmplY3RNdXN0QmVDbGFzcyIsIFNLSVApOworCQlleHBl
Y3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiT3V0ZXJMb2NhbE11c3RCZUVmZmVjdGl2ZWx5Rmlu
YWwiLCBTS0lQKTsKIAkJZXhwZWN0ZWRQcm9ibGVtQXR0cmlidXRlcy5wdXQoIk91dGVyTG9jYWxN
dXN0QmVGaW5hbCIsIFNLSVApOworCQlleHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiT3V0
ZXJMb2NhbFVuZGVyTGFtYmRhTXVzdEJlRWZmZWN0aXZlbHlGaW5hbCIsIFNLSVApOwogCQlleHBl
Y3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiT3ZlcnJpZGluZ0RlcHJlY2F0ZWRNZXRob2QiLCBu
ZXcgUHJvYmxlbUF0dHJpYnV0ZXMoSmF2YUNvcmUuQ09NUElMRVJfUEJfREVQUkVDQVRJT04pKTsK
IAkJZXhwZWN0ZWRQcm9ibGVtQXR0cmlidXRlcy5wdXQoIk92ZXJyaWRpbmdNZXRob2RXaXRob3V0
U3VwZXJJbnZvY2F0aW9uIiwgbmV3IFByb2JsZW1BdHRyaWJ1dGVzKEphdmFDb3JlLkNPTVBJTEVS
X1BCX09WRVJSSURJTkdfTUVUSE9EX1dJVEhPVVRfU1VQRVJfSU5WT0NBVElPTikpOwogCQlleHBl
Y3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiT3ZlcnJpZGluZ05vblZpc2libGVNZXRob2QiLCBu
ZXcgUHJvYmxlbUF0dHJpYnV0ZXMoSmF2YUNvcmUuQ09NUElMRVJfUEJfT1ZFUlJJRElOR19QQUNL
QUdFX0RFRkFVTFRfTUVUSE9EKSk7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50
ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVn
cmVzc2lvbi9OZWdhdGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Nv
bXBpbGVyL3JlZ3Jlc3Npb24vTmVnYXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YQppbmRl
eCBhZGE2ZmNhLi4xN2I4ZjllIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0
cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVz
c2lvbi9OZWdhdGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCisrKyBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9j
b21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKQEAg
LTEzLDcgKzEzLDcgQEAKICAqICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBhbmQg
aW1wbGVtZW50YXRpb24KICAqICAgICBKZXNwZXIgUyBNb2xsZXIgLSBDb250cmlidXRpb25zIGZv
cgogICoJCQkJCQkJYnVnIDM4MjcwMSAtIFsxLjhdW2NvbXBpbGVyXSBJbXBsZW1lbnQgc2VtYW50
aWMgYW5hbHlzaXMgb2YgTGFtYmRhIGV4cHJlc3Npb25zICYgUmVmZXJlbmNlIGV4cHJlc3Npb24K
LSAKKyAqCQkJCQkJCWJ1ZyAzODI3MjEgLSBbMS44XVtjb21waWxlcl0gRWZmZWN0aXZlbHkgZmlu
YWwgdmFyaWFibGVzIG5lZWRzIHNwZWNpYWwgdHJlYXRtZW50CiAgKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKi8KIHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIucmVncmVz
c2lvbjsKIApAQCAtMTcxNyw2ICsxNzE3LDE2NCBAQAogCQkJZmFsc2UsCiAJCQlvcHRpb25zKTsK
IH0KKworLy9odHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9Mzgy
NzIxLCBbMS44XVtjb21waWxlcl0gRWZmZWN0aXZlbHkgZmluYWwgdmFyaWFibGVzIG5lZWRzIHNw
ZWNpYWwgdHJlYXRtZW50CitwdWJsaWMgdm9pZCB0ZXN0MDQ1KCkgeworCS8vIFRoaXMgdGVzdCBj
aGVja3MgdGhhdCB0aGUgc2ltcGxlIGNhc2VzIGFyZSBPSworCXRoaXMucnVuTmVnYXRpdmVUZXN0
KAorCQkJbmV3IFN0cmluZ1tdIHsKKwkJCQkJIlguamF2YSIsCisJCQkJCSJpbnRlcmZhY2UgSSB7
XG4iICsgCisJCQkJCSIJdm9pZCBkb2l0KCk7XG4iICsgCisJCQkJCSJ9XG4iICsgCisJCQkJCSJw
dWJsaWMgY2xhc3MgWCB7XG4iICsgCisJCQkJCSIgIHB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0
cmluZ1tdIGFyZ3MpIHtcbiIgKyAKKwkJCQkJIiAgICBpbnQgdmFyID0gMjtcbiIgKyAKKwkJCQkJ
IiAgICBJIHggPSBuZXcgSSgpIHtcbiIgKyAKKwkJCQkJIiAgICAgIHB1YmxpYyB2b2lkIGRvaXQo
KSB7XG4iICsgCisJCQkJCSIgICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihhcmdzKTsgLy8gT0s6
IGFyZ3MgaXMgbm90IHJlLWFzc2lnbm1lbnQgc2luY2UgZGVjbGFyYXRpb24vZmlyc3QgYXNzaWdu
bWVudFxuIiArIAorCQkJCQkiICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4odmFyKTsgLy8gRXJy
b3I6IHZhciBpcyBub3QgZWZmZWN0aXZlbHkgZmluYWxcbiIgKyAKKwkJCQkJIiAgICAgIH1cbiIg
KyAKKwkJCQkJIiAgICB9O1xuIiArIAorCQkJCQkiICAgIEkgeDIgPSAoKSAtPiB7XG4iICsgCisJ
CQkJCSIgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oYXJncyk7IC8vIE9LOiBhcmdzIGlzIG5vdCBy
ZS1hc3NpZ25tZW50IHNpbmNlIGRlY2xhcmF0aW9uL2ZpcnN0IGFzc2lnbm1lbnRcbiIgKyAKKwkJ
CQkJIiAgICAgIFN5c3RlbS5vdXQucHJpbnRsbih2YXIpOyAvLyBFcnJvcjogdmFyIGlzIG5vdCBl
ZmZlY3RpdmVseSBmaW5hbFxuIiArIAorCQkJCQkiICAgIH07XG4iICsgCisJCQkJCSIgICAgdmFy
PTI7XG4iICsgCisJCQkJCSIgIH1cbiIgKyAKKwkJCQkJIn0iICwKKwkJCQl9LAorCQkJCSItLS0t
LS0tLS0tXG4iICsgCisJCQkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMClcbiIgKyAK
KwkJCQkiCVN5c3RlbS5vdXQucHJpbnRsbih2YXIpOyAvLyBFcnJvcjogdmFyIGlzIG5vdCBlZmZl
Y3RpdmVseSBmaW5hbFxuIiArIAorCQkJCSIJICAgICAgICAgICAgICAgICAgIF5eXlxuIiArIAor
CQkJCSJUaGUgdmFyaWFibGUgdmFyIG11c3QgYmUgbXVzdCBiZSBmaW5hbCBvciBlZmZlY3RpdmVs
eSBmaW5hbCBpZiB1c2VkIGluIGEgbGFtYmRhIGV4cHJlc3Npb25cbiIgKyAKKwkJCQkiLS0tLS0t
LS0tLVxuIiArIAorCQkJCSIyLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTUpXG4iICsgCisJ
CQkJIglTeXN0ZW0ub3V0LnByaW50bG4odmFyKTsgLy8gRXJyb3I6IHZhciBpcyBub3QgZWZmZWN0
aXZlbHkgZmluYWxcbiIgKyAKKwkJCQkiCSAgICAgICAgICAgICAgICAgICBeXl5cbiIgKyAKKwkJ
CQkiVGhlIHZhcmlhYmxlIHZhciBtdXN0IGJlIG11c3QgYmUgZmluYWwgb3IgZWZmZWN0aXZlbHkg
ZmluYWwgaWYgdXNlZCBpbiBhbiBpbm5lciBjbGFzc1xuIiArIAorCQkJCSItLS0tLS0tLS0tXG4i
CisJCQkJKTsKK30KKworLy9odHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5j
Z2k/aWQ9MzgyNzIxLCBbMS44XVtjb21waWxlcl0gRWZmZWN0aXZlbHkgZmluYWwgdmFyaWFibGVz
IG5lZWRzIHNwZWNpYWwgdHJlYXRtZW50CitwdWJsaWMgdm9pZCB0ZXN0MDQ2KCkgeworCS8vIFRo
aXMgdGVzdCBjaGVja3MgdGhhdCBjb21tb24gc2VtYW50aWMgY2hlY2tzIGFyZSBpbmRlZWQgcnVu
CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCQluZXcgU3RyaW5nW10geworCQkJCQkiWC5qYXZh
IiwKKwkJCQkJImludGVyZmFjZSBJIHtcbiIgKyAKKwkJCQkJIgl2b2lkIGRvaXQoKTtcbiIgKyAK
KwkJCQkJIn1cbiIgKyAKKwkJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKyAKKwkJCQkJIiAgcHVi
bGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuIiArIAorCQkJCQkiICAgIHRy
eSB7XG4iICsgCisJCQkJCSIgICAgICBuZXcgamF2YS5pby5GaWxlKFwiZHdlZXBcIikuZ2V0Q2Fu
b25pY2FsUGF0aCgpO1xuIiArIAorCQkJCQkiICAgIH0gY2F0Y2ggKGphdmEuaW8uSU9FeGNlcHRp
b24gaW9lKSB7XG4iICsgCisJCQkJCSIgICAgICBJIHgyID0gKCkgLT4ge1xuIiArIAorCQkJCQki
ICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oaW9lLmdldE1lc3NhZ2UoKSk7IC8vIE9LOiBhcmdz
IGlzIG5vdCByZS1hc3NpZ25tZW50IHNpbmNlIGRlY2xhcmF0aW9uL2ZpcnN0IGFzc2lnbm1lbnRc
biIgKyAKKwkJCQkJIiAgICAgIH07XG4iICsgCisJCQkJCSIgICAgfTtcbiIgKyAKKwkJCQkJIiAg
ICBqYXZhLnV0aWwuTGlzdDxTdHJpbmc+IGxpc3QgPSBuZXcgamF2YS51dGlsLkFycmF5TGlzdDw+
KCk7XG4iICsgCisJCQkJCSIgICAgZm9yIChTdHJpbmcgcyA6IGxpc3QpIHtcbiIgKyAKKwkJCQkJ
IiAgICAgIEkgeDIgPSAoKSAtPiB7XG4iICsgCisJCQkJCSIgICAgICAgIFN5c3RlbS5vdXQucHJp
bnRsbihzKTsgLy8gT0s6IGFyZ3MgaXMgbm90IHJlLWFzc2lnbm1lbnQgc2luY2UgZGVjbGFyYXRp
b24vZmlyc3QgYXNzaWdubWVudFxuIiArIAorCQkJCQkiICAgICAgfTtcbiIgKyAKKwkJCQkJIiAg
ICB9O1xuIiArIAorCQkJCQkiICAgIGZvciAoU3RyaW5nIHMyIDogbGlzdCkge1xuIiArIAorCQkJ
CQkiICAgICAgczIgPSBcIk5pY2UhXCI7XG4iICsgCisJCQkJCSIgICAgICBJIHgyID0gKCkgLT4g
e1xuIiArIAorCQkJCQkiICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oczIpOyAvLyBFcnJvcjog
dmFyIGlzIG5vdCBlZmZlY3RpdmVseSBmaW5hbFxuIiArIAorCQkJCQkiICAgICAgfTtcbiIgKyAK
KwkJCQkJIiAgICB9O1xuIiArIAorCQkJCQkiICB9XG4iICsgCisJCQkJCSJcbiIgKworCQkJCQki
ICB2b2lkIGZvbygpIHtcbiIgKyAKKwkJCQkJIiAgICB0cnkge1xuIiArIAorCQkJCQkiICAgICAg
XG4iICsgCisJCQkJCSIgIH0gY2F0Y2ggKE51bGxQb2ludGVyRXhjZXB0aW9uIHwgQXJyYXlJbmRl
eE91dE9mQm91bmRzRXhjZXB0aW9uIGUpIHtcbiIgKyAKKwkJCQkJIiAgICBJIGkgPSAoKSAtPiB7
XG4iICsgCisJCQkJCSIgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oZSk7XG4iICsgCisJCQkJCSIg
ICAgIH07XG4iICsgCisJCQkJCSIgICAgfVxuIiArIAorCQkJCQkiICB9XG4iICsKKwkJCQkJIn1c
biIgLAorCQkJCX0sCisJCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCQkiMS4gRVJST1IgaW4gWC5q
YXZhIChhdCBsaW5lIDIyKVxuIiArIAorCQkJCSIJU3lzdGVtLm91dC5wcmludGxuKHMyKTsgLy8g
RXJyb3I6IHZhciBpcyBub3QgZWZmZWN0aXZlbHkgZmluYWxcbiIgKyAKKwkJCQkiCSAgICAgICAg
ICAgICAgICAgICBeXlxuIiArIAorCQkJCSJUaGUgdmFyaWFibGUgczIgbXVzdCBiZSBtdXN0IGJl
IGZpbmFsIG9yIGVmZmVjdGl2ZWx5IGZpbmFsIGlmIHVzZWQgaW4gYW4gaW5uZXIgY2xhc3NcbiIg
KyAKKwkJCQkiLS0tLS0tLS0tLVxuIgorCQkJCSk7Cit9CisKKy8vaHR0cHM6Ly9idWdzLmVjbGlw
c2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM4MjcyMSwgWzEuOF1bY29tcGlsZXJdIEVmZmVj
dGl2ZWx5IGZpbmFsIHZhcmlhYmxlcyBuZWVkcyBzcGVjaWFsIHRyZWF0bWVudAorcHVibGljIHZv
aWQgdGVzdDA0NygpIHsKKwkvLyBUaGlzIHRlc3QgY2hlY2tzIHRoYXQgY29tbW9uIHNlbWFudGlj
IGNoZWNrcyBhcmUgaW5kZWVkIHJ1bgorCXRoaXMucnVuTmVnYXRpdmVUZXN0KAorCQkJbmV3IFN0
cmluZ1tdIHsKKwkJCQkJIlguamF2YSIsCisJCQkJCSJpbnRlcmZhY2UgSSB7XG4iICsgCisJCQkJ
CSIJdm9pZCBkb2l0KCk7XG4iICsgCisJCQkJCSJ9XG4iICsgCisJCQkJCSJwdWJsaWMgY2xhc3Mg
WCB7XG4iICsgCisJCQkJCSIgIHB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3Mp
IHtcbiIgKyAKKwkJCQkJIiAgICB0cnkge1xuIiArIAorCQkJCQkiICAgICAgbmV3IGphdmEuaW8u
RmlsZShcImR3ZWVwXCIpLmdldENhbm9uaWNhbFBhdGgoKTtcbiIgKyAKKwkJCQkJIiAgICB9IGNh
dGNoIChqYXZhLmlvLklPRXhjZXB0aW9uIGlvZSkge1xuIiArIAorCQkJCQkiICAgICAgSSB4MiA9
ICgpIC0+IHtcbiIgKyAKKwkJCQkJIiAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKGlvZS5nZXRN
ZXNzYWdlKCkpOyAvLyBPSzogYXJncyBpcyBub3QgcmUtYXNzaWdubWVudCBzaW5jZSBkZWNsYXJh
dGlvbi9maXJzdCBhc3NpZ25tZW50XG4iICsgCisJCQkJCSIgICAgICB9O1xuIiArIAorCQkJCQki
ICAgIH07XG4iICsgCisJCQkJCSIgICAgamF2YS51dGlsLkxpc3Q8U3RyaW5nPiBsaXN0ID0gbmV3
IGphdmEudXRpbC5BcnJheUxpc3Q8PigpO1xuIiArIAorCQkJCQkiICAgIGZvciAoU3RyaW5nIHMg
OiBsaXN0KSB7XG4iICsgCisJCQkJCSIgICAgICBJIHgyID0gKCkgLT4ge1xuIiArIAorCQkJCQki
ICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4ocyk7IC8vIE9LOiBhcmdzIGlzIG5vdCByZS1hc3Np
Z25tZW50IHNpbmNlIGRlY2xhcmF0aW9uL2ZpcnN0IGFzc2lnbm1lbnRcbiIgKyAKKwkJCQkJIiAg
ICAgIH07XG4iICsgCisJCQkJCSIgICAgfTtcbiIgKyAKKwkJCQkJIiAgICBmb3IgKFN0cmluZyBz
MiA6IGxpc3QpIHtcbiIgKyAKKwkJCQkJIiAgICAgIHMyID0gXCJOaWNlIVwiO1xuIiArIAorCQkJ
CQkiICAgICAgSSB4MiA9ICgpIC0+IHtcbiIgKyAKKwkJCQkJIiAgICAgICAgU3lzdGVtLm91dC5w
cmludGxuKHMyKTsgLy8gRXJyb3I6IHZhciBpcyBub3QgZWZmZWN0aXZlbHkgZmluYWxcbiIgKyAK
KwkJCQkJIiAgICAgIH07XG4iICsgCisJCQkJCSIgICAgfTtcbiIgKyAKKwkJCQkJIiAgfVxuIiAr
IAorCQkJCQkiXG4iICsKKwkJCQkJIiAgdm9pZCBmb28oKSB7XG4iICsgCisJCQkJCSIgICAgdHJ5
IHtcbiIgKyAKKwkJCQkJIiAgICAgIFxuIiArIAorCQkJCQkiICB9IGNhdGNoIChOdWxsUG9pbnRl
ckV4Y2VwdGlvbiB8IEFycmF5SW5kZXhPdXRPZkJvdW5kc0V4Y2VwdGlvbiBlKSB7XG4iICsgCisJ
CQkJCSIgICAgSSBpID0gKCkgLT4ge1xuIiArIAorCQkJCQkiICAgICAgU3lzdGVtLm91dC5wcmlu
dGxuKGUpO1xuIiArIAorCQkJCQkiICAgICB9O1xuIiArIAorCQkJCQkiICAgIH1cbiIgKyAKKwkJ
CQkJIiAgfVxuIiArCisJCQkJCSIgIHZvaWQgZm9vMihTdHJpbmdbXSBhcmdzKSB7XG4iICsgCisJ
CQkJCSIgICBpbnQgdmFyO1xuIiArIAorCQkJCQkiICAgaWYgKGFyZ3MgIT0gbnVsbClcbiIgKyAK
KwkJCQkJIiAgICAgIHZhciA9IGFyZ3MubGVuZ3RoO1xuIiArIAorCQkJCQkiICAgZWxzZVxuIiAr
IAorCQkJCQkiICAgICAgdmFyID0gMjtcbiIgKyAKKwkJCQkJIiAgIEkgeCA9IG5ldyBJKCkge1xu
IiArIAorCQkJCQkiICAgICBwdWJsaWMgdm9pZCBkb2l0KCkge1xuIiArIAorCQkJCQkiICAgICAg
IFN5c3RlbS5vdXQucHJpbnRsbih2YXIpO1xuIiArIAorCQkJCQkiICAgICB9XG4iICsgCisJCQkJ
CSIgICB9O1xuIiArIAorCQkJCQkiICB9XG4iICsKKwkJCQkJIn1cbiIgLAorCQkJCX0sCisJCQkJ
Ii0tLS0tLS0tLS1cbiIgKyAKKwkJCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDIyKVxu
IiArIAorCQkJCSIJU3lzdGVtLm91dC5wcmludGxuKHMyKTsgLy8gRXJyb3I6IHZhciBpcyBub3Qg
ZWZmZWN0aXZlbHkgZmluYWxcbiIgKyAKKwkJCQkiCSAgICAgICAgICAgICAgICAgICBeXlxuIiAr
IAorCQkJCSJUaGUgdmFyaWFibGUgczIgbXVzdCBiZSBtdXN0IGJlIGZpbmFsIG9yIGVmZmVjdGl2
ZWx5IGZpbmFsIGlmIHVzZWQgaW4gYW4gaW5uZXIgY2xhc3NcbiIgKyAKKwkJCQkiLS0tLS0tLS0t
LVxuIgorCQkJCSk7Cit9CisKKwogcHVibGljIHN0YXRpYyBDbGFzcyB0ZXN0Q2xhc3MoKSB7CiAJ
cmV0dXJuIE5lZ2F0aXZlTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmNsYXNzOwogfQ==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>226810</attachid>
            <date>2013-02-10 11:46:00 -0500</date>
            <delta_ts>2013-02-10 20:11:24 -0500</delta_ts>
            <desc>Same patch combined and synched with top of branch.</desc>
            <filename>Patch.patch</filename>
            <type>text/plain</type>
            <size>30054</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0NvbXBpbGVySW52b2Nh
dGlvblRlc3RzLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMv
b3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9Db21waWxlcklu
dm9jYXRpb25UZXN0cy5qYXZhCmluZGV4IDhmMTY4YTkuLjg2MTEwZjYgMTAwNjQ0Ci0tLSBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29y
ZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0NvbXBpbGVySW52b2NhdGlvblRlc3RzLmphdmEK
KysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNl
L2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vQ29tcGlsZXJJbnZvY2F0aW9uVGVz
dHMuamF2YQpAQCAtMjgsNiArMjgsNyBAQAogICoJCQkJCQkJCWJ1ZyAzODI3ODkgLSBbY29tcGls
ZXJdW251bGxdIHdhcm4gd2hlbiBzeW50YWN0aWNhbGx5LW5vbm51bGwgZXhwcmVzc2lvbiBpcyBj
b21wYXJlZCBhZ2FpbnN0IG51bGwKICAqICAgICBKZXNwZXIgUyBNb2xsZXIgLSBDb250cmlidXRp
b25zIGZvcgogICoJCQkJCQkJCWJ1ZyAzODI3MDEgLSBbMS44XVtjb21waWxlcl0gSW1wbGVtZW50
IHNlbWFudGljIGFuYWx5c2lzIG9mIExhbWJkYSBleHByZXNzaW9ucyAmIFJlZmVyZW5jZSBleHBy
ZXNzaW9uCisgKgkJCQkJCQkJYnVnIDM4MjcyMSAtIFsxLjhdW2NvbXBpbGVyXSBFZmZlY3RpdmVs
eSBmaW5hbCB2YXJpYWJsZXMgbmVlZHMgc3BlY2lhbCB0cmVhdG1lbnQKICAqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqLwogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci5y
ZWdyZXNzaW9uOwogCkBAIC04MDUsNiArODA2LDggQEAKIAkJZXhwZWN0ZWRQcm9ibGVtQXR0cmli
dXRlcy5wdXQoIk9iamVjdENhbm5vdEhhdmVTdXBlclR5cGVzIiwgbmV3IFByb2JsZW1BdHRyaWJ1
dGVzKENhdGVnb3JpemVkUHJvYmxlbS5DQVRfSU5URVJOQUwpKTsKIAkJZXhwZWN0ZWRQcm9ibGVt
QXR0cmlidXRlcy5wdXQoIk9iamVjdEhhc05vU3VwZXJjbGFzcyIsIG5ldyBQcm9ibGVtQXR0cmli
dXRlcyhDYXRlZ29yaXplZFByb2JsZW0uQ0FUX1RZUEUpKTsKIAkJZXhwZWN0ZWRQcm9ibGVtQXR0
cmlidXRlcy5wdXQoIk9iamVjdE11c3RCZUNsYXNzIiwgbmV3IFByb2JsZW1BdHRyaWJ1dGVzKENh
dGVnb3JpemVkUHJvYmxlbS5DQVRfSU5URVJOQUwpKTsKKwkJZXhwZWN0ZWRQcm9ibGVtQXR0cmli
dXRlcy5wdXQoIk91dGVyTG9jYWxNdXN0QmVFZmZlY3RpdmVseUZpbmFsIiwgbmV3IFByb2JsZW1B
dHRyaWJ1dGVzKENhdGVnb3JpemVkUHJvYmxlbS5DQVRfSU5URVJOQUwpKTsKKwkJZXhwZWN0ZWRQ
cm9ibGVtQXR0cmlidXRlcy5wdXQoIk91dGVyTG9jYWxVbmRlckxhbWJkYU11c3RCZUVmZmVjdGl2
ZWx5RmluYWwiLCBuZXcgUHJvYmxlbUF0dHJpYnV0ZXMoQ2F0ZWdvcml6ZWRQcm9ibGVtLkNBVF9J
TlRFUk5BTCkpOwogCQlleHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiT3V0ZXJMb2NhbE11
c3RCZUZpbmFsIiwgbmV3IFByb2JsZW1BdHRyaWJ1dGVzKENhdGVnb3JpemVkUHJvYmxlbS5DQVRf
SU5URVJOQUwpKTsKIAkJZXhwZWN0ZWRQcm9ibGVtQXR0cmlidXRlcy5wdXQoIk92ZXJyaWRpbmdE
ZXByZWNhdGVkTWV0aG9kIiwgbmV3IFByb2JsZW1BdHRyaWJ1dGVzKENhdGVnb3JpemVkUHJvYmxl
bS5DQVRfREVQUkVDQVRJT04pKTsKIAkJZXhwZWN0ZWRQcm9ibGVtQXR0cmlidXRlcy5wdXQoIk92
ZXJyaWRpbmdNZXRob2RXaXRob3V0U3VwZXJJbnZvY2F0aW9uIiwgbmV3IFByb2JsZW1BdHRyaWJ1
dGVzKENhdGVnb3JpemVkUHJvYmxlbS5DQVRfUE9URU5USUFMX1BST0dSQU1NSU5HX1BST0JMRU0p
KTsKQEAgLTE1NjAsNyArMTU2Myw5IEBACiAJCWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0
KCJPYmplY3RDYW5ub3RIYXZlU3VwZXJUeXBlcyIsIFNLSVApOwogCQlleHBlY3RlZFByb2JsZW1B
dHRyaWJ1dGVzLnB1dCgiT2JqZWN0SGFzTm9TdXBlcmNsYXNzIiwgU0tJUCk7CiAJCWV4cGVjdGVk
UHJvYmxlbUF0dHJpYnV0ZXMucHV0KCJPYmplY3RNdXN0QmVDbGFzcyIsIFNLSVApOworCQlleHBl
Y3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiT3V0ZXJMb2NhbE11c3RCZUVmZmVjdGl2ZWx5Rmlu
YWwiLCBTS0lQKTsKIAkJZXhwZWN0ZWRQcm9ibGVtQXR0cmlidXRlcy5wdXQoIk91dGVyTG9jYWxN
dXN0QmVGaW5hbCIsIFNLSVApOworCQlleHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiT3V0
ZXJMb2NhbFVuZGVyTGFtYmRhTXVzdEJlRWZmZWN0aXZlbHlGaW5hbCIsIFNLSVApOwogCQlleHBl
Y3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiT3ZlcnJpZGluZ0RlcHJlY2F0ZWRNZXRob2QiLCBu
ZXcgUHJvYmxlbUF0dHJpYnV0ZXMoSmF2YUNvcmUuQ09NUElMRVJfUEJfREVQUkVDQVRJT04pKTsK
IAkJZXhwZWN0ZWRQcm9ibGVtQXR0cmlidXRlcy5wdXQoIk92ZXJyaWRpbmdNZXRob2RXaXRob3V0
U3VwZXJJbnZvY2F0aW9uIiwgbmV3IFByb2JsZW1BdHRyaWJ1dGVzKEphdmFDb3JlLkNPTVBJTEVS
X1BCX09WRVJSSURJTkdfTUVUSE9EX1dJVEhPVVRfU1VQRVJfSU5WT0NBVElPTikpOwogCQlleHBl
Y3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiT3ZlcnJpZGluZ05vblZpc2libGVNZXRob2QiLCBu
ZXcgUHJvYmxlbUF0dHJpYnV0ZXMoSmF2YUNvcmUuQ09NUElMRVJfUEJfT1ZFUlJJRElOR19QQUNL
QUdFX0RFRkFVTFRfTUVUSE9EKSk7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50
ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVn
cmVzc2lvbi9OZWdhdGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Nv
bXBpbGVyL3JlZ3Jlc3Npb24vTmVnYXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YQppbmRl
eCAxNTc0NmYwLi45YTM0NzRkIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0
cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVz
c2lvbi9OZWdhdGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCisrKyBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9j
b21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKQEAg
LTEzLDcgKzEzLDcgQEAKICAqICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBhbmQg
aW1wbGVtZW50YXRpb24KICAqICAgICBKZXNwZXIgUyBNb2xsZXIgLSBDb250cmlidXRpb25zIGZv
cgogICoJCQkJCQkJYnVnIDM4MjcwMSAtIFsxLjhdW2NvbXBpbGVyXSBJbXBsZW1lbnQgc2VtYW50
aWMgYW5hbHlzaXMgb2YgTGFtYmRhIGV4cHJlc3Npb25zICYgUmVmZXJlbmNlIGV4cHJlc3Npb24K
LSAKKyAqCQkJCQkJCWJ1ZyAzODI3MjEgLSBbMS44XVtjb21waWxlcl0gRWZmZWN0aXZlbHkgZmlu
YWwgdmFyaWFibGVzIG5lZWRzIHNwZWNpYWwgdHJlYXRtZW50CiAgKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKi8KIHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIucmVncmVz
c2lvbjsKIApAQCAtMTc1OCw2ICsxNzU4LDE2MSBAQAogCQkJIk5hbWUgY2xhc2g6IFRoZSBtZXRo
b2QgZihMaXN0PEludGVnZXI+KSBvZiB0eXBlIEIgaGFzIHRoZSBzYW1lIGVyYXN1cmUgYXMgZihM
aXN0PFN0cmluZz4pIG9mIHR5cGUgQSBidXQgZG9lcyBub3Qgb3ZlcnJpZGUgaXRcbiIgKyAKIAkJ
CSItLS0tLS0tLS0tXG4iKTsKIH0KKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3No
b3dfYnVnLmNnaT9pZD0zODI3MjEsIFsxLjhdW2NvbXBpbGVyXSBFZmZlY3RpdmVseSBmaW5hbCB2
YXJpYWJsZXMgbmVlZHMgc3BlY2lhbCB0cmVhdG1lbnQKK3B1YmxpYyB2b2lkIHRlc3QwNDcoKSB7
CisJLy8gVGhpcyB0ZXN0IGNoZWNrcyB0aGF0IHRoZSBzaW1wbGUgY2FzZXMgYXJlIE9LCisJdGhp
cy5ydW5OZWdhdGl2ZVRlc3QoCisJCQluZXcgU3RyaW5nW10geworCQkJCQkiWC5qYXZhIiwKKwkJ
CQkJImludGVyZmFjZSBJIHtcbiIgKyAKKwkJCQkJIgl2b2lkIGRvaXQoKTtcbiIgKyAKKwkJCQkJ
In1cbiIgKyAKKwkJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKyAKKwkJCQkJIiAgcHVibGljIHN0
YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuIiArIAorCQkJCQkiICAgIGludCB2YXIg
PSAyO1xuIiArIAorCQkJCQkiICAgIEkgeCA9IG5ldyBJKCkge1xuIiArIAorCQkJCQkiICAgICAg
cHVibGljIHZvaWQgZG9pdCgpIHtcbiIgKyAKKwkJCQkJIiAgICAgICAgU3lzdGVtLm91dC5wcmlu
dGxuKGFyZ3MpOyAvLyBPSzogYXJncyBpcyBub3QgcmUtYXNzaWdubWVudCBzaW5jZSBkZWNsYXJh
dGlvbi9maXJzdCBhc3NpZ25tZW50XG4iICsgCisJCQkJCSIgICAgICAgIFN5c3RlbS5vdXQucHJp
bnRsbih2YXIpOyAvLyBFcnJvcjogdmFyIGlzIG5vdCBlZmZlY3RpdmVseSBmaW5hbFxuIiArIAor
CQkJCQkiICAgICAgfVxuIiArIAorCQkJCQkiICAgIH07XG4iICsgCisJCQkJCSIgICAgSSB4MiA9
ICgpIC0+IHtcbiIgKyAKKwkJCQkJIiAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihhcmdzKTsgLy8g
T0s6IGFyZ3MgaXMgbm90IHJlLWFzc2lnbm1lbnQgc2luY2UgZGVjbGFyYXRpb24vZmlyc3QgYXNz
aWdubWVudFxuIiArIAorCQkJCQkiICAgICAgU3lzdGVtLm91dC5wcmludGxuKHZhcik7IC8vIEVy
cm9yOiB2YXIgaXMgbm90IGVmZmVjdGl2ZWx5IGZpbmFsXG4iICsgCisJCQkJCSIgICAgfTtcbiIg
KyAKKwkJCQkJIiAgICB2YXI9MjtcbiIgKyAKKwkJCQkJIiAgfVxuIiArIAorCQkJCQkifSIgLAor
CQkJCX0sCisJCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCQkiMS4gRVJST1IgaW4gWC5qYXZhIChh
dCBsaW5lIDEwKVxuIiArIAorCQkJCSIJU3lzdGVtLm91dC5wcmludGxuKHZhcik7IC8vIEVycm9y
OiB2YXIgaXMgbm90IGVmZmVjdGl2ZWx5IGZpbmFsXG4iICsgCisJCQkJIgkgICAgICAgICAgICAg
ICAgICAgXl5eXG4iICsgCisJCQkJIlRoZSB2YXJpYWJsZSB2YXIgbXVzdCBiZSBtdXN0IGJlIGZp
bmFsIG9yIGVmZmVjdGl2ZWx5IGZpbmFsIGlmIHVzZWQgaW4gYSBsYW1iZGEgZXhwcmVzc2lvblxu
IiArIAorCQkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkJIjIuIEVSUk9SIGluIFguamF2YSAoYXQg
bGluZSAxNSlcbiIgKyAKKwkJCQkiCVN5c3RlbS5vdXQucHJpbnRsbih2YXIpOyAvLyBFcnJvcjog
dmFyIGlzIG5vdCBlZmZlY3RpdmVseSBmaW5hbFxuIiArIAorCQkJCSIJICAgICAgICAgICAgICAg
ICAgIF5eXlxuIiArIAorCQkJCSJUaGUgdmFyaWFibGUgdmFyIG11c3QgYmUgbXVzdCBiZSBmaW5h
bCBvciBlZmZlY3RpdmVseSBmaW5hbCBpZiB1c2VkIGluIGFuIGlubmVyIGNsYXNzXG4iICsgCisJ
CQkJIi0tLS0tLS0tLS1cbiIKKwkJCQkpOworfQorCisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5v
cmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzgyNzIxLCBbMS44XVtjb21waWxlcl0gRWZmZWN0aXZl
bHkgZmluYWwgdmFyaWFibGVzIG5lZWRzIHNwZWNpYWwgdHJlYXRtZW50CitwdWJsaWMgdm9pZCB0
ZXN0MDQ4KCkgeworCS8vIFRoaXMgdGVzdCBjaGVja3MgdGhhdCBjb21tb24gc2VtYW50aWMgY2hl
Y2tzIGFyZSBpbmRlZWQgcnVuCisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCQluZXcgU3RyaW5n
W10geworCQkJCQkiWC5qYXZhIiwKKwkJCQkJImludGVyZmFjZSBJIHtcbiIgKyAKKwkJCQkJIgl2
b2lkIGRvaXQoKTtcbiIgKyAKKwkJCQkJIn1cbiIgKyAKKwkJCQkJInB1YmxpYyBjbGFzcyBYIHtc
biIgKyAKKwkJCQkJIiAgcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xu
IiArIAorCQkJCQkiICAgIHRyeSB7XG4iICsgCisJCQkJCSIgICAgICBuZXcgamF2YS5pby5GaWxl
KFwiZHdlZXBcIikuZ2V0Q2Fub25pY2FsUGF0aCgpO1xuIiArIAorCQkJCQkiICAgIH0gY2F0Y2gg
KGphdmEuaW8uSU9FeGNlcHRpb24gaW9lKSB7XG4iICsgCisJCQkJCSIgICAgICBJIHgyID0gKCkg
LT4ge1xuIiArIAorCQkJCQkiICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oaW9lLmdldE1lc3Nh
Z2UoKSk7IC8vIE9LOiBhcmdzIGlzIG5vdCByZS1hc3NpZ25tZW50IHNpbmNlIGRlY2xhcmF0aW9u
L2ZpcnN0IGFzc2lnbm1lbnRcbiIgKyAKKwkJCQkJIiAgICAgIH07XG4iICsgCisJCQkJCSIgICAg
fTtcbiIgKyAKKwkJCQkJIiAgICBqYXZhLnV0aWwuTGlzdDxTdHJpbmc+IGxpc3QgPSBuZXcgamF2
YS51dGlsLkFycmF5TGlzdDw+KCk7XG4iICsgCisJCQkJCSIgICAgZm9yIChTdHJpbmcgcyA6IGxp
c3QpIHtcbiIgKyAKKwkJCQkJIiAgICAgIEkgeDIgPSAoKSAtPiB7XG4iICsgCisJCQkJCSIgICAg
ICAgIFN5c3RlbS5vdXQucHJpbnRsbihzKTsgLy8gT0s6IGFyZ3MgaXMgbm90IHJlLWFzc2lnbm1l
bnQgc2luY2UgZGVjbGFyYXRpb24vZmlyc3QgYXNzaWdubWVudFxuIiArIAorCQkJCQkiICAgICAg
fTtcbiIgKyAKKwkJCQkJIiAgICB9O1xuIiArIAorCQkJCQkiICAgIGZvciAoU3RyaW5nIHMyIDog
bGlzdCkge1xuIiArIAorCQkJCQkiICAgICAgczIgPSBcIk5pY2UhXCI7XG4iICsgCisJCQkJCSIg
ICAgICBJIHgyID0gKCkgLT4ge1xuIiArIAorCQkJCQkiICAgICAgICBTeXN0ZW0ub3V0LnByaW50
bG4oczIpOyAvLyBFcnJvcjogdmFyIGlzIG5vdCBlZmZlY3RpdmVseSBmaW5hbFxuIiArIAorCQkJ
CQkiICAgICAgfTtcbiIgKyAKKwkJCQkJIiAgICB9O1xuIiArIAorCQkJCQkiICB9XG4iICsgCisJ
CQkJCSJcbiIgKworCQkJCQkiICB2b2lkIGZvbygpIHtcbiIgKyAKKwkJCQkJIiAgICB0cnkge1xu
IiArIAorCQkJCQkiICAgICAgXG4iICsgCisJCQkJCSIgIH0gY2F0Y2ggKE51bGxQb2ludGVyRXhj
ZXB0aW9uIHwgQXJyYXlJbmRleE91dE9mQm91bmRzRXhjZXB0aW9uIGUpIHtcbiIgKyAKKwkJCQkJ
IiAgICBJIGkgPSAoKSAtPiB7XG4iICsgCisJCQkJCSIgICAgICBTeXN0ZW0ub3V0LnByaW50bG4o
ZSk7XG4iICsgCisJCQkJCSIgICAgIH07XG4iICsgCisJCQkJCSIgICAgfVxuIiArIAorCQkJCQki
ICB9XG4iICsKKwkJCQkJIn1cbiIgLAorCQkJCX0sCisJCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJ
CQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDIyKVxuIiArIAorCQkJCSIJU3lzdGVtLm91
dC5wcmludGxuKHMyKTsgLy8gRXJyb3I6IHZhciBpcyBub3QgZWZmZWN0aXZlbHkgZmluYWxcbiIg
KyAKKwkJCQkiCSAgICAgICAgICAgICAgICAgICBeXlxuIiArIAorCQkJCSJUaGUgdmFyaWFibGUg
czIgbXVzdCBiZSBtdXN0IGJlIGZpbmFsIG9yIGVmZmVjdGl2ZWx5IGZpbmFsIGlmIHVzZWQgaW4g
YW4gaW5uZXIgY2xhc3NcbiIgKyAKKwkJCQkiLS0tLS0tLS0tLVxuIgorCQkJCSk7Cit9CisKKy8v
IGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zODI3MjEsIFsx
LjhdW2NvbXBpbGVyXSBFZmZlY3RpdmVseSBmaW5hbCB2YXJpYWJsZXMgbmVlZHMgc3BlY2lhbCB0
cmVhdG1lbnQKK3B1YmxpYyB2b2lkIHRlc3QwNDkoKSB7CisJLy8gVGhpcyB0ZXN0IGNoZWNrcyB0
aGF0IGNvbW1vbiBzZW1hbnRpYyBjaGVja3MgYXJlIGluZGVlZCBydW4KKwl0aGlzLnJ1bk5lZ2F0
aXZlVGVzdCgKKwkJCW5ldyBTdHJpbmdbXSB7CisJCQkJCSJYLmphdmEiLAorCQkJCQkiaW50ZXJm
YWNlIEkge1xuIiArIAorCQkJCQkiCXZvaWQgZG9pdCgpO1xuIiArIAorCQkJCQkifVxuIiArIAor
CQkJCQkicHVibGljIGNsYXNzIFgge1xuIiArIAorCQkJCQkiICBwdWJsaWMgc3RhdGljIHZvaWQg
bWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsgCisJCQkJCSIgICAgdHJ5IHtcbiIgKyAKKwkJCQkJ
IiAgICAgIG5ldyBqYXZhLmlvLkZpbGUoXCJkd2VlcFwiKS5nZXRDYW5vbmljYWxQYXRoKCk7XG4i
ICsgCisJCQkJCSIgICAgfSBjYXRjaCAoamF2YS5pby5JT0V4Y2VwdGlvbiBpb2UpIHtcbiIgKyAK
KwkJCQkJIiAgICAgIEkgeDIgPSAoKSAtPiB7XG4iICsgCisJCQkJCSIgICAgICAgIFN5c3RlbS5v
dXQucHJpbnRsbihpb2UuZ2V0TWVzc2FnZSgpKTsgLy8gT0s6IGFyZ3MgaXMgbm90IHJlLWFzc2ln
bm1lbnQgc2luY2UgZGVjbGFyYXRpb24vZmlyc3QgYXNzaWdubWVudFxuIiArIAorCQkJCQkiICAg
ICAgfTtcbiIgKyAKKwkJCQkJIiAgICB9O1xuIiArIAorCQkJCQkiICAgIGphdmEudXRpbC5MaXN0
PFN0cmluZz4gbGlzdCA9IG5ldyBqYXZhLnV0aWwuQXJyYXlMaXN0PD4oKTtcbiIgKyAKKwkJCQkJ
IiAgICBmb3IgKFN0cmluZyBzIDogbGlzdCkge1xuIiArIAorCQkJCQkiICAgICAgSSB4MiA9ICgp
IC0+IHtcbiIgKyAKKwkJCQkJIiAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKHMpOyAvLyBPSzog
YXJncyBpcyBub3QgcmUtYXNzaWdubWVudCBzaW5jZSBkZWNsYXJhdGlvbi9maXJzdCBhc3NpZ25t
ZW50XG4iICsgCisJCQkJCSIgICAgICB9O1xuIiArIAorCQkJCQkiICAgIH07XG4iICsgCisJCQkJ
CSIgICAgZm9yIChTdHJpbmcgczIgOiBsaXN0KSB7XG4iICsgCisJCQkJCSIgICAgICBzMiA9IFwi
TmljZSFcIjtcbiIgKyAKKwkJCQkJIiAgICAgIEkgeDIgPSAoKSAtPiB7XG4iICsgCisJCQkJCSIg
ICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihzMik7IC8vIEVycm9yOiB2YXIgaXMgbm90IGVmZmVj
dGl2ZWx5IGZpbmFsXG4iICsgCisJCQkJCSIgICAgICB9O1xuIiArIAorCQkJCQkiICAgIH07XG4i
ICsgCisJCQkJCSIgIH1cbiIgKyAKKwkJCQkJIlxuIiArCisJCQkJCSIgIHZvaWQgZm9vKCkge1xu
IiArIAorCQkJCQkiICAgIHRyeSB7XG4iICsgCisJCQkJCSIgICAgICBcbiIgKyAKKwkJCQkJIiAg
fSBjYXRjaCAoTnVsbFBvaW50ZXJFeGNlcHRpb24gfCBBcnJheUluZGV4T3V0T2ZCb3VuZHNFeGNl
cHRpb24gZSkge1xuIiArIAorCQkJCQkiICAgIEkgaSA9ICgpIC0+IHtcbiIgKyAKKwkJCQkJIiAg
ICAgIFN5c3RlbS5vdXQucHJpbnRsbihlKTtcbiIgKyAKKwkJCQkJIiAgICAgfTtcbiIgKyAKKwkJ
CQkJIiAgICB9XG4iICsgCisJCQkJCSIgIH1cbiIgKworCQkJCQkiICB2b2lkIGZvbzIoU3RyaW5n
W10gYXJncykge1xuIiArIAorCQkJCQkiICAgaW50IHZhcjtcbiIgKyAKKwkJCQkJIiAgIGlmIChh
cmdzICE9IG51bGwpXG4iICsgCisJCQkJCSIgICAgICB2YXIgPSBhcmdzLmxlbmd0aDtcbiIgKyAK
KwkJCQkJIiAgIGVsc2VcbiIgKyAKKwkJCQkJIiAgICAgIHZhciA9IDI7XG4iICsgCisJCQkJCSIg
ICBJIHggPSBuZXcgSSgpIHtcbiIgKyAKKwkJCQkJIiAgICAgcHVibGljIHZvaWQgZG9pdCgpIHtc
biIgKyAKKwkJCQkJIiAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4odmFyKTtcbiIgKyAKKwkJCQkJ
IiAgICAgfVxuIiArIAorCQkJCQkiICAgfTtcbiIgKyAKKwkJCQkJIiAgfVxuIiArCisJCQkJCSJ9
XG4iICwKKwkJCQl9LAorCQkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkJIjEuIEVSUk9SIGluIFgu
amF2YSAoYXQgbGluZSAyMilcbiIgKyAKKwkJCQkiCVN5c3RlbS5vdXQucHJpbnRsbihzMik7IC8v
IEVycm9yOiB2YXIgaXMgbm90IGVmZmVjdGl2ZWx5IGZpbmFsXG4iICsgCisJCQkJIgkgICAgICAg
ICAgICAgICAgICAgXl5cbiIgKyAKKwkJCQkiVGhlIHZhcmlhYmxlIHMyIG11c3QgYmUgbXVzdCBi
ZSBmaW5hbCBvciBlZmZlY3RpdmVseSBmaW5hbCBpZiB1c2VkIGluIGFuIGlubmVyIGNsYXNzXG4i
ICsgCisJCQkJIi0tLS0tLS0tLS1cbiIKKwkJCQkpOworfQogcHVibGljIHN0YXRpYyBDbGFzcyB0
ZXN0Q2xhc3MoKSB7CiAJcmV0dXJuIE5lZ2F0aXZlTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmNsYXNz
OwogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2NvcmUvY29tcGlsZXIvSVByb2JsZW0uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9jb3JlL2NvbXBpbGVyL0lQcm9ibGVtLmphdmEKaW5k
ZXggYjYxMGQ4Ny4uNGMzZDhlYyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2NvcmUvY29tcGlsZXIvSVByb2JsZW0uamF2YQorKysgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvY29yZS9jb21waWxl
ci9JUHJvYmxlbS5qYXZhCkBAIC0xNzIsNiArMTcyLDggQEAKICAqCQkJCQkJCQkJUmVkdW5kYW50
TnVsbENoZWNrT25Ob25OdWxsRXhwcmVzc2lvbgogICogICAgICBKZXNwZXIgUyBNb2xsZXIgIC0g
YWRkZWQgdGhlIGZvbGxvd2luZyBjb25zdGFudHMKICAqCQkJCQkJCQkJVGFyZ2V0VHlwZU5vdEFG
dW5jdGlvbmFsSW50ZXJmYWNlCisgKgkJCQkJCQkJCU91dGVyTG9jYWxNdXN0QmVFZmZlY3RpdmVs
eUZpbmFsCisgKgkJCQkJCQkJCU91dGVyTG9jYWxVbmRlckxhbWJkYU11c3RCZUVmZmVjdGl2ZWx5
RmluYWwKICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQu
Y29yZS5jb21waWxlcjsKIApAQCAtMTM2OCw2ICsxMzcwLDEwIEBACiAJaW50IFVudXNlZFR5cGVQ
YXJhbWV0ZXIgPSBUeXBlUmVsYXRlZCArIDY2MTsKIAkvKiogQHNpbmNlIDMuOSAqLwogCWludCBJ
bGxlZ2FsQXJyYXlPZlVuaW9uVHlwZSA9IFR5cGVSZWxhdGVkICsgNjYyOworCS8qKiBAc2luY2Ug
My45ICovCisJaW50IE91dGVyTG9jYWxNdXN0QmVFZmZlY3RpdmVseUZpbmFsID0gSW50ZXJuYWwg
KyA2NjM7CisJLyoqIEBzaW5jZSAzLjkgKi8KKwlpbnQgT3V0ZXJMb2NhbFVuZGVyTGFtYmRhTXVz
dEJlRWZmZWN0aXZlbHlGaW5hbCA9IEludGVybmFsICsgNjY0OwogCiAJLyoqCiAJICogTnVsbCBh
bmFseXNpcyBmb3Igb3RoZXIga2luZHMgb2YgZXhwcmVzc2lvbnMsIHN5bnRhY3RpY2FsbHkgbm9u
bnVsbApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BU1ROb2RlLmphdmEgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FT
VE5vZGUuamF2YQppbmRleCA2MzVkNjNhLi44Y2ZjMjZlIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0
L0FTVE5vZGUuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FTVE5vZGUuamF2YQpAQCAtMjAsNiArMjAs
OCBAQAogICoJCQkJCQkJCWJ1ZyAzNzQ2MDUgLSBVbnJlYXNvbmFibGUgd2FybmluZyBmb3IgZW51
bS1iYXNlZCBzd2l0Y2ggc3RhdGVtZW50cwogICoJCQkJCQkJCWJ1ZyAzODQ4NzAgLSBbY29tcGls
ZXJdIEBEZXByZWNhdGVkIGFubm90YXRpb24gbm90IGRldGVjdGVkIGlmIHByZWNlZGVkIGJ5IG90
aGVyIGFubm90YXRpb24KICAqCQkJCQkJCQlidWcgMzkzNzE5IC0gW2NvbXBpbGVyXSBpbmNvbnNp
c3RlbnQgd2FybmluZ3Mgb24gaXRlcmF0aW9uIHZhcmlhYmxlcworICogICAgIEplc3BlciBTIE1v
bGxlciAtIENvbnRyaWJ1dGlvbnMgZm9yCisgKgkJCQkJCQkJYnVnIDM4MjcyMSAtIFsxLjhdW2Nv
bXBpbGVyXSBFZmZlY3RpdmVseSBmaW5hbCB2YXJpYWJsZXMgbmVlZHMgc3BlY2lhbCB0cmVhdG1l
bnQKICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqLwogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50
ZXJuYWwuY29tcGlsZXIuYXN0OwogCkBAIC0xMzgsNiArMTQwLDcgQEAKIAkvLyBmb3Igc2luZ2xl
IG5hbWUgcmVmZXJlbmNlcwogCXB1YmxpYyBzdGF0aWMgZmluYWwgaW50IERlcHRoU0hJRlQgPSA1
OwkvLyBCaXQ2IC0+IEJpdDEzCiAJcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgRGVwdGhNQVNLID0g
Qml0NnxCaXQ3fEJpdDh8Qml0OXxCaXQxMHxCaXQxMXxCaXQxMnxCaXQxMzsgLy8gOCBiaXRzIGZv
ciBhY3R1YWwgZGVwdGggdmFsdWUgKG1heC4gMjU1KQorCXB1YmxpYyBzdGF0aWMgZmluYWwgaW50
IElzRnJvbU91dHNpZGVMYW1iZGEgPSBCaXQxNDsKIAogCS8vIGZvciBzdGF0ZW1lbnRzCiAJcHVi
bGljIHN0YXRpYyBmaW5hbCBpbnQgSXNSZWFjaGFibGUgPSBCaXQzMjsKZGlmZiAtLWdpdCBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9hc3QvQXNzaWdubWVudC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Bc3NpZ25tZW50LmphdmEKaW5k
ZXggZjA4MWExZC4uZjZkNWU0OCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Bc3NpZ25tZW50Lmph
dmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2FzdC9Bc3NpZ25tZW50LmphdmEKQEAgLTU4LDYgKzU4LDkgQEAKIC8v
IGEgZmllbGQgcmVmZXJlbmNlLCBhIGJsYW5rIGZpbmFsIGZpZWxkIHJlZmVyZW5jZSwgYSBmaWVs
ZCBvZiBhbiBlbmNsb3NpbmcgaW5zdGFuY2Ugb3IKIC8vIGp1c3QgYSBsb2NhbCB2YXJpYWJsZS4K
IAlMb2NhbFZhcmlhYmxlQmluZGluZyBsb2NhbCA9IHRoaXMubGhzLmxvY2FsVmFyaWFibGVCaW5k
aW5nKCk7CisJaWYgKGxvY2FsICE9IG51bGwgJiYgZmxvd0luZm8uaXNQb3RlbnRpYWxseUFzc2ln
bmVkKGxvY2FsKSkgeworCQlsb2NhbC50YWdCaXRzICY9IH5UYWdCaXRzLklzRWZmZWN0aXZlbHlG
aW5hbDsKKwl9CiAJaWYgKCh0aGlzLmV4cHJlc3Npb24uaW1wbGljaXRDb252ZXJzaW9uICYgVHlw
ZUlkcy5VTkJPWElORykgIT0gMCkgewogCQl0aGlzLmV4cHJlc3Npb24uY2hlY2tOUEUoY3VycmVu
dFNjb3BlLCBmbG93Q29udGV4dCwgZmxvd0luZm8pOwogCX0KQEAgLTE5NCwxMCArMTk3LDYgQEAK
IAl0aGlzLmV4cHJlc3Npb24uc2V0RXhwZWN0ZWRUeXBlKGxoc1R5cGUpOyAvLyBuZWVkZWQgaW4g
Y2FzZSBvZiBnZW5lcmljIG1ldGhvZCBpbnZvY2F0aW9uCiAJaWYgKGxoc1R5cGUgIT0gbnVsbCkg
ewogCQl0aGlzLnJlc29sdmVkVHlwZSA9IGxoc1R5cGUuY2FwdHVyZShzY29wZSwgdGhpcy5zb3Vy
Y2VFbmQpOwotCX0KLQlMb2NhbFZhcmlhYmxlQmluZGluZyBsb2NhbFZhcmlhYmxlQmluZGluZyA9
IHRoaXMubGhzLmxvY2FsVmFyaWFibGVCaW5kaW5nKCk7Ci0JaWYgKGxvY2FsVmFyaWFibGVCaW5k
aW5nICE9IG51bGwpIHsKLQkJbG9jYWxWYXJpYWJsZUJpbmRpbmcudGFnQml0cyAmPSB+VGFnQml0
cy5Jc0VmZmVjdGl2ZWx5RmluYWw7CiAJfQogCVR5cGVCaW5kaW5nIHJoc1R5cGUgPSB0aGlzLmV4
cHJlc3Npb24ucmVzb2x2ZVR5cGUoc2NvcGUpOwogCWlmIChsaHNUeXBlID09IG51bGwgfHwgcmhz
VHlwZSA9PSBudWxsKSB7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0NvbXBvdW5kQXNzaWdubWVu
dC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2FzdC9Db21wb3VuZEFzc2lnbm1lbnQuamF2YQppbmRleCAzYWIwMTBl
Li5jODdhZTZmIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0NvbXBvdW5kQXNzaWdubWVudC5qYXZh
CisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hc3QvQ29tcG91bmRBc3NpZ25tZW50LmphdmEKQEAgLTEsNSArMSw1IEBA
CiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEyIElC
TSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEzIElC
TSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBw
cm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxh
YmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAg
KiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBh
dApAQCAtMTAsNiArMTAsOCBAQAogICogICAgIFN0ZXBoYW4gSGVycm1hbm4gLSBDb250cmlidXRp
b24gZm9yCiAgKgkJCQkJCQkJYnVnIDM0NTMwNSAtIFtjb21waWxlcl1bbnVsbF0gQ29tcGlsZXIg
bWlzaWRlbnRpZmllcyBhIGNhc2Ugb2YgInZhcmlhYmxlIGNhbiBvbmx5IGJlIG51bGwiCiAgKgkJ
CQkJCQkJYnVnIDM4MzM2OCAtIFtjb21waWxlcl1bbnVsbF0gc3ludGFjdGljIG51bGwgYW5hbHlz
aXMgZm9yIGZpZWxkIHJlZmVyZW5jZXMKKyAqICAgICBKZXNwZXIgUyBNb2xsZXIgLSBDb250cmli
dXRpb25zIGZvcgorICoJCQkJCQkJCWJ1ZyAzODI3MjEgLSBbMS44XVtjb21waWxlcl0gRWZmZWN0
aXZlbHkgZmluYWwgdmFyaWFibGVzIG5lZWRzIHNwZWNpYWwgdHJlYXRtZW50CiAgKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKi8KIHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVy
LmFzdDsKIApAQCAtMzksNiArNDEsMTAgQEAKIAogcHVibGljIEZsb3dJbmZvIGFuYWx5c2VDb2Rl
KEJsb2NrU2NvcGUgY3VycmVudFNjb3BlLCBGbG93Q29udGV4dCBmbG93Q29udGV4dCwKIAkJRmxv
d0luZm8gZmxvd0luZm8pIHsKKwlMb2NhbFZhcmlhYmxlQmluZGluZyBsb2NhbFZhcmlhYmxlQmlu
ZGluZyA9IHRoaXMubGhzLmxvY2FsVmFyaWFibGVCaW5kaW5nKCk7CisJaWYgKGxvY2FsVmFyaWFi
bGVCaW5kaW5nICE9IG51bGwgJiYgZmxvd0luZm8uaXNQb3RlbnRpYWxseUFzc2lnbmVkKGxvY2Fs
VmFyaWFibGVCaW5kaW5nKSkgeworCQlsb2NhbFZhcmlhYmxlQmluZGluZy50YWdCaXRzICY9IH5U
YWdCaXRzLklzRWZmZWN0aXZlbHlGaW5hbDsKKwl9CiAJLy8gcmVjb3JkIHNldHRpbmcgYSB2YXJp
YWJsZTogdmFyaW91cyBzY2VuYXJpaSBhcmUgcG9zc2libGUsIHNldHRpbmcgYW4gYXJyYXkgcmVm
ZXJlbmNlLAogCS8vIGEgZmllbGQgcmVmZXJlbmNlLCBhIGJsYW5rIGZpbmFsIGZpZWxkIHJlZmVy
ZW5jZSwgYSBmaWVsZCBvZiBhbiBlbmNsb3NpbmcgaW5zdGFuY2Ugb3IKIAkvLyBqdXN0IGEgbG9j
YWwgdmFyaWFibGUuCkBAIC0xMzAsMTAgKzEzNiw2IEBACiAJCVR5cGVCaW5kaW5nIG9yaWdpbmFs
RXhwcmVzc2lvblR5cGUgPSB0aGlzLmV4cHJlc3Npb24ucmVzb2x2ZVR5cGUoc2NvcGUpOwogCQlp
ZiAob3JpZ2luYWxMaHNUeXBlID09IG51bGwgfHwgb3JpZ2luYWxFeHByZXNzaW9uVHlwZSA9PSBu
dWxsKQogCQkJcmV0dXJuIG51bGw7Ci0JCUxvY2FsVmFyaWFibGVCaW5kaW5nIGxvY2FsVmFyaWFi
bGVCaW5kaW5nID0gdGhpcy5saHMubG9jYWxWYXJpYWJsZUJpbmRpbmcoKTsKLQkJaWYgKGxvY2Fs
VmFyaWFibGVCaW5kaW5nICE9IG51bGwpIHsKLQkJCWxvY2FsVmFyaWFibGVCaW5kaW5nLnRhZ0Jp
dHMgJj0gflRhZ0JpdHMuSXNFZmZlY3RpdmVseUZpbmFsOwotCQl9CiAJCS8vIGF1dG9ib3hpbmcg
c3VwcG9ydAogCQlMb29rdXBFbnZpcm9ubWVudCBlbnYgPSBzY29wZS5lbnZpcm9ubWVudCgpOwog
CQlUeXBlQmluZGluZyBsaHNUeXBlID0gb3JpZ2luYWxMaHNUeXBlLCBleHByZXNzaW9uVHlwZSA9
IG9yaWdpbmFsRXhwcmVzc2lvblR5cGU7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0xhbWJkYUV4
cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhCmluZGV4IDlj
ZTg1OGUuLjVjMmExOGUgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5q
YXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhCkBAIC0xMyw2ICsxMyw3
IEBACiAgKiAgICAgSUJNIENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0
aW9uCiAgKiAgICAgSmVzcGVyIFMgTW9sbGVyIC0gQ29udHJpYnV0aW9ucyBmb3IKICAqCQkJCQkJ
CWJ1ZyAzODI3MDEgLSBbMS44XVtjb21waWxlcl0gSW1wbGVtZW50IHNlbWFudGljIGFuYWx5c2lz
IG9mIExhbWJkYSBleHByZXNzaW9ucyAmIFJlZmVyZW5jZSBleHByZXNzaW9uCisgKgkJCQkJCQli
dWcgMzgyNzIxIC0gWzEuOF1bY29tcGlsZXJdIEVmZmVjdGl2ZWx5IGZpbmFsIHZhcmlhYmxlcyBu
ZWVkcyBzcGVjaWFsIHRyZWF0bWVudAogICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCiBwYWNrYWdl
IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3Q7CiAKQEAgLTIwLDYgKzIxLDcg
QEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuQVNUVmlzaXRvcjsK
IGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuQ29tcGlsYXRpb25SZXN1
bHQ7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmNsYXNzZm10LkNs
YXNzRmlsZUNvbnN0YW50czsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIuY29kZWdlbi5Db2RlU3RyZWFtOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b21waWxlci5mbG93LkV4Y2VwdGlvbkhhbmRsaW5nRmxvd0NvbnRleHQ7CiBpbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmZsb3cuRmxvd0NvbnRleHQ7CiBpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmZsb3cuRmxvd0luZm87CkBAIC01NCw2ICs1
NiwxMSBAQAogCQl0aGlzLmJvZHkgPSBib2R5OwogCX0KIAkKKwlwdWJsaWMgdm9pZCBnZW5lcmF0
ZUNvZGUoQmxvY2tTY29wZSBjdXJyZW50U2NvcGUsIENvZGVTdHJlYW0gY29kZVN0cmVhbSwgYm9v
bGVhbiB2YWx1ZVJlcXVpcmVkKSB7CisJCXN1cGVyLmdlbmVyYXRlQ29kZShjdXJyZW50U2NvcGUs
IGNvZGVTdHJlYW0sIHZhbHVlUmVxdWlyZWQpOworCQlpZiAoIXRoaXMuaWdub3JlRnVydGhlcklu
dmVzdGlnYXRpb24pIHRoaXMuYm9keS5nZW5lcmF0ZUNvZGUodGhpcy5zY29wZSwgY29kZVN0cmVh
bSk7IC8vIFRPRE8gcHV0IGludG8gbmV3IG1ldGhvZAorCX0KKwogCS8qIFRoaXMgY29kZSBpcyBh
cnJhbmdlZCBzbyB0aGF0IHdlIGNhbiBjb250aW51ZSB3aXRoIGFzIG11Y2ggYW5hbHlzaXMgYXMg
cG9zc2libGUgd2hpbGUgYXZvaWRpbmcgCiAJICogbWluZSBmaWVsZHMgdGhhdCB3b3VsZCByZXN1
bHQgaW4gYSBzbGV3IG9mIHNwdXJpb3VzIG1lc3NhZ2VzLiBUaGlzIG1ldGhvZCBpcyBhIG1lcmdl
ciBvZjoKIAkgKiBAc2VlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAu
TWV0aG9kU2NvcGUuY3JlYXRlTWV0aG9kKEFic3RyYWN0TWV0aG9kRGVjbGFyYXRpb24pCmRpZmYg
LS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYXN0L05hbWVSZWZlcmVuY2UuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTmFtZVJl
ZmVyZW5jZS5qYXZhCmluZGV4IGVjYThhZGMuLjdjOTFjZDUgMTAwNjQ0Ci0tLSBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvTmFtZVJlZmVyZW5jZS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTmFtZVJlZmVyZW5jZS5qYXZh
CkBAIC0xLDUgKzEsNSBAQAogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAo
YykgMjAwMCwgMjAxMiBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAo
YykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMg
cmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAq
IGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGlj
IExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFu
ZCBpcyBhdmFpbGFibGUgYXQKQEAgLTEzLDkgKzEzLDEyIEBACiAgKiAgICAgSUJNIENvcnBvcmF0
aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCiAgKiAgICAgU3RlcGhhbiBIZXJy
bWFubiAtIENvbnRyaWJ1dGlvbiBmb3IKICAqCQkJCQkJCQlidWcgMzMxNjQ5IC0gW2NvbXBpbGVy
XVtudWxsXSBjb25zaWRlciBudWxsIGFubm90YXRpb25zIGZvciBmaWVsZHMKKyAqICAgICBKZXNw
ZXIgUyBNb2xsZXIgLSBDb250cmlidXRpb25zIGZvcgorICoJCQkJCQkJYnVnIDM4MjcyMSAtIFsx
LjhdW2NvbXBpbGVyXSBFZmZlY3RpdmVseSBmaW5hbCB2YXJpYWJsZXMgbmVlZHMgc3BlY2lhbCB0
cmVhdG1lbnQKICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwogcGFja2FnZSBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0OwogCitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVy
bmFsLmNvbXBpbGVyLmNsYXNzZm10LkNsYXNzRmlsZUNvbnN0YW50czsKIGltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLio7CiAKIHB1YmxpYyBhYnN0cmFjdCBj
bGFzcyBOYW1lUmVmZXJlbmNlIGV4dGVuZHMgUmVmZXJlbmNlIGltcGxlbWVudHMgSW52b2NhdGlv
blNpdGUgewpAQCAtODQsNCArODcsMTkgQEAKIHB1YmxpYyBhYnN0cmFjdCBTdHJpbmcgdW5ib3Vu
ZFJlZmVyZW5jZUVycm9yTmFtZSgpOwogCiBwdWJsaWMgYWJzdHJhY3QgY2hhcltdW10gZ2V0TmFt
ZSgpOworCitwcm90ZWN0ZWQgdm9pZCBjaGVja0VmZmVjdGl2ZWx5RmluYWxBY2Nlc3MoQmxvY2tT
Y29wZSBjdXJyZW50U2NvcGUpIHsKKwlpZiAodGhpcy5iaW5kaW5nIGluc3RhbmNlb2YgTG9jYWxW
YXJpYWJsZUJpbmRpbmcpIHsKKwkJTG9jYWxWYXJpYWJsZUJpbmRpbmcgbG9jYWxCaW5kaW5nID0g
KExvY2FsVmFyaWFibGVCaW5kaW5nKSB0aGlzLmJpbmRpbmc7CisJCWlmICghbG9jYWxCaW5kaW5n
LmlzRmluYWwoKSAmJiAoKHRoaXMuYml0cyAmIEFTVE5vZGUuRGVwdGhNQVNLKSAhPSAwIHx8ICh0
aGlzLmJpdHMgJiBBU1ROb2RlLklzRnJvbU91dHNpZGVMYW1iZGEpICE9IDApKSB7CisJCQlpZiAo
Y3VycmVudFNjb3BlLmNvbXBpbGVyT3B0aW9ucygpLmNvbXBsaWFuY2VMZXZlbCA+PSBDbGFzc0Zp
bGVDb25zdGFudHMuSkRLMV84KSB7CisJCQkJaWYgKCFsb2NhbEJpbmRpbmcuaXNFZmZlY3RpdmVs
eUZpbmFsKCkpIHsKKwkJCQkJY3VycmVudFNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmNhbm5vdFJl
ZmVyVG9Ob25FZmZlY3RpdmVseUZpbmFsT3V0ZXJMb2NhbChsb2NhbEJpbmRpbmcsIHRoaXMpOwor
CQkJCX0KKwkJCX0gZWxzZSB7CisJCQkJY3VycmVudFNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmNh
bm5vdFJlZmVyVG9Ob25GaW5hbE91dGVyTG9jYWwobG9jYWxCaW5kaW5nLCB0aGlzKTsKKwkJCX0K
KwkJfQorCX0KK30KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUXVhbGlmaWVkTmFtZVJlZmVy
ZW5jZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2FzdC9RdWFsaWZpZWROYW1lUmVmZXJlbmNlLmphdmEKaW5kZXgg
OTA4MWQ1Mi4uOGNlYzdmYiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9RdWFsaWZpZWROYW1lUmVm
ZXJlbmNlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9RdWFsaWZpZWROYW1lUmVmZXJlbmNlLmphdmEK
QEAgLTEsNSArMSw1IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChj
KSAyMDAwLCAyMDEyIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChj
KSAyMDAwLCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyBy
ZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICog
YXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMg
TGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5k
IGlzIGF2YWlsYWJsZSBhdApAQCAtMTcsNiArMTcsOCBAQAogICoJCQkJCQkJCWJ1ZyAzNjU1MTkg
LSBlZGl0b3JpYWwgY2xlYW51cCBhZnRlciBidWcgMTg2MzQyIGFuZCBidWcgMzY1Mzg3CiAgKgkJ
CQkJCQkJYnVnIDM2ODU0NiAtIFtjb21waWxlcl1bcmVzb3VyY2VdIEF2b2lkIHJlbWFpbmluZyBm
YWxzZSBwb3NpdGl2ZXMgZm91bmQgd2hlbiBjb21waWxpbmcgdGhlIEVjbGlwc2UgU0RLCiAgKgkJ
CQkJCQkJYnVnIDM0NTMwNSAtIFtjb21waWxlcl1bbnVsbF0gQ29tcGlsZXIgbWlzaWRlbnRpZmll
cyBhIGNhc2Ugb2YgInZhcmlhYmxlIGNhbiBvbmx5IGJlIG51bGwiCisgKiAgICAgSmVzcGVyIFMg
TW9sbGVyIC0gQ29udHJpYnV0aW9ucyBmb3IKKyAqCQkJCQkJCQlidWcgMzgyNzIxIC0gWzEuOF1b
Y29tcGlsZXJdIEVmZmVjdGl2ZWx5IGZpbmFsIHZhcmlhYmxlcyBuZWVkcyBzcGVjaWFsIHRyZWF0
bWVudAogICoJCQkJCQkJCWJ1ZyAzMzE2NDkgLSBbY29tcGlsZXJdW251bGxdIGNvbnNpZGVyIG51
bGwgYW5ub3RhdGlvbnMgZm9yIGZpZWxkcwogICoJCQkJCQkJCWJ1ZyAzODMzNjggLSBbY29tcGls
ZXJdW251bGxdIHN5bnRhY3RpYyBudWxsIGFuYWx5c2lzIGZvciBmaWVsZCByZWZlcmVuY2VzCiAg
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKi8KQEAgLTM0MSw2ICszNDMsNyBAQAogfQogCiBwdWJsaWMg
dm9pZCBnZW5lcmF0ZUNvZGUoQmxvY2tTY29wZSBjdXJyZW50U2NvcGUsIENvZGVTdHJlYW0gY29k
ZVN0cmVhbSwgYm9vbGVhbiB2YWx1ZVJlcXVpcmVkKSB7CisJY2hlY2tFZmZlY3RpdmVseUZpbmFs
QWNjZXNzKGN1cnJlbnRTY29wZSk7CiAJaW50IHBjID0gY29kZVN0cmVhbS5wb3NpdGlvbjsKIAlp
ZiAodGhpcy5jb25zdGFudCAhPSBDb25zdGFudC5Ob3RBQ29uc3RhbnQpIHsKIAkJaWYgKHZhbHVl
UmVxdWlyZWQpIHsKQEAgLTEwMDYsOSArMTAwOSw2IEBACiAJCQkJCXRoaXMuYml0cyAmPSB+QVNU
Tm9kZS5SZXN0cmljdGl2ZUZsYWdNQVNLOyAvLyBjbGVhciBiaXRzCiAJCQkJCXRoaXMuYml0cyB8
PSBCaW5kaW5nLkxPQ0FMOwogCQkJCQlMb2NhbFZhcmlhYmxlQmluZGluZyBsb2NhbCA9IChMb2Nh
bFZhcmlhYmxlQmluZGluZykgdGhpcy5iaW5kaW5nOwotCQkJCQlpZiAoIWxvY2FsLmlzRmluYWwo
KSAmJiAoKHRoaXMuYml0cyAmIEFTVE5vZGUuRGVwdGhNQVNLKSAhPSAwKSkgewotCQkJCQkJc2Nv
cGUucHJvYmxlbVJlcG9ydGVyKCkuY2Fubm90UmVmZXJUb05vbkZpbmFsT3V0ZXJMb2NhbCgoTG9j
YWxWYXJpYWJsZUJpbmRpbmcpIHRoaXMuYmluZGluZywgdGhpcyk7Ci0JCQkJCX0KIAkJCQkJaWYg
KGxvY2FsLnR5cGUgIT0gbnVsbCAmJiAobG9jYWwudHlwZS50YWdCaXRzICYgVGFnQml0cy5IYXNN
aXNzaW5nVHlwZSkgIT0gMCkgewogCQkJCQkJLy8gb25seSBjb21wbGFpbiBpZiBmaWVsZCByZWZl
cmVuY2UgKGZvciBsb2NhbCwgaXRzIHR5cGUgZ290IGZsYWdnZWQgYWxyZWFkeSkKIAkJCQkJCXJl
dHVybiBudWxsOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9TaW5nbGVOYW1lUmVmZXJlbmNlLmph
dmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXN0L1NpbmdsZU5hbWVSZWZlcmVuY2UuamF2YQppbmRleCBkN2YzZGU5Li4x
YTE0MGJmIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1NpbmdsZU5hbWVSZWZlcmVuY2UuamF2YQor
KysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXN0L1NpbmdsZU5hbWVSZWZlcmVuY2UuamF2YQpAQCAtMSw1ICsxLDUgQEAK
IC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTIgSUJN
IENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTMgSUJN
IENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHBy
b2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFi
bGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAq
IHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0
CkBAIC0xNiw2ICsxNiw3IEBACiAgKgkJCQkJCQkJYnVnIDE4NTY4MiAtIEluY3JlbWVudC9kZWNy
ZW1lbnQgb3BlcmF0b3JzIG1hcmsgbG9jYWwgdmFyaWFibGVzIGFzIHJlYWQKICAqCQkJCQkJCQli
dWcgMzMxNjQ5IC0gW2NvbXBpbGVyXVtudWxsXSBjb25zaWRlciBudWxsIGFubm90YXRpb25zIGZv
ciBmaWVsZHMKICAqCQkJCQkJCQlidWcgMzgzMzY4IC0gW2NvbXBpbGVyXVtudWxsXSBzeW50YWN0
aWMgbnVsbCBhbmFseXNpcyBmb3IgZmllbGQgcmVmZXJlbmNlcworICogICAgIEplc3BlciBTIE1v
bGxlciAtIDxqZXNwZXJAc2Vsc2thYmV0Lm9yZz4gICAtIENvbnRyaWJ1dGlvbnMgZm9yIGJ1ZyAz
ODI3MjEgLSBbMS44XVtjb21waWxlcl0gRWZmZWN0aXZlbHkgZmluYWwgdmFyaWFibGVzIG5lZWRz
IHNwZWNpYWwgdHJlYXRtZW50CiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KIHBhY2thZ2Ugb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdDsKIApAQCAtMzk0LDYgKzM5NSw3IEBA
CiB9CiAKIHB1YmxpYyB2b2lkIGdlbmVyYXRlQ29kZShCbG9ja1Njb3BlIGN1cnJlbnRTY29wZSwg
Q29kZVN0cmVhbSBjb2RlU3RyZWFtLCBib29sZWFuIHZhbHVlUmVxdWlyZWQpIHsKKwljaGVja0Vm
ZmVjdGl2ZWx5RmluYWxBY2Nlc3MoY3VycmVudFNjb3BlKTsKIAlpbnQgcGMgPSBjb2RlU3RyZWFt
LnBvc2l0aW9uOwogCWlmICh0aGlzLmNvbnN0YW50ICE9IENvbnN0YW50Lk5vdEFDb25zdGFudCkg
ewogCQlpZiAodmFsdWVSZXF1aXJlZCkgewpAQCAtOTg0LDkgKzk4Niw2IEBACiAJCQkJCWlmICh0
aGlzLmJpbmRpbmcgaW5zdGFuY2VvZiBMb2NhbFZhcmlhYmxlQmluZGluZykgewogCQkJCQkJdGhp
cy5iaXRzICY9IH5BU1ROb2RlLlJlc3RyaWN0aXZlRmxhZ01BU0s7ICAvLyBjbGVhciBiaXRzCiAJ
CQkJCQl0aGlzLmJpdHMgfD0gQmluZGluZy5MT0NBTDsKLQkJCQkJCWlmICghdmFyaWFibGUuaXNG
aW5hbCgpICYmICh0aGlzLmJpdHMgJiBBU1ROb2RlLkRlcHRoTUFTSykgIT0gMCkgewotCQkJCQkJ
CXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmNhbm5vdFJlZmVyVG9Ob25GaW5hbE91dGVyTG9jYWwo
KExvY2FsVmFyaWFibGVCaW5kaW5nKXZhcmlhYmxlLCB0aGlzKTsKLQkJCQkJCX0KIAkJCQkJCXZh
cmlhYmxlVHlwZSA9IHZhcmlhYmxlLnR5cGU7CiAJCQkJCQl0aGlzLmNvbnN0YW50ID0gKHRoaXMu
Yml0cyAmIEFTVE5vZGUuSXNTdHJpY3RseUFzc2lnbmVkKSA9PSAwID8gdmFyaWFibGUuY29uc3Rh
bnQoKSA6IENvbnN0YW50Lk5vdEFDb25zdGFudDsKIAkJCQkJfSBlbHNlIHsKZGlmZiAtLWdpdCBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9sb29rdXAvU2NvcGUuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YQppbmRl
eCAwNTA0MzkwLi5iOWY4MzEyIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEK
KysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhCkBAIC0xLDUgKzEsNSBAQAogLyoqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMiBJQk0gQ29ycG9yYXRp
b24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRp
b24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQg
dGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0
aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNj
b21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKQEAgLTE1LDYg
KzE1LDggQEAKICAqCSAJCQkJCQkJYnVnIDE4NjM0MiAtIFtjb21waWxlcl1bbnVsbF0gVXNpbmcg
YW5ub3RhdGlvbnMgZm9yIG51bGwgY2hlY2tpbmcKICAqCQkJCQkJCQlidWcgMzg3NjEyIC0gVW5y
ZWFjaGFibGUgY2F0Y2ggYmxvY2suLi5leGNlcHRpb24gaXMgbmV2ZXIgdGhyb3duIGZyb20gdGhl
IHRyeQogICoJCQkJCQkJCWJ1ZyAzOTUwMDIgLSBTZWxmIGJvdW5kIGdlbmVyaWMgY2xhc3MgZG9l
c24ndCByZXNvbHZlIGJvdW5kcyBwcm9wZXJseSBmb3Igd2lsZGNhcmRzIGZvciBjZXJ0YWluIHBh
cmFtZXRyaXNhdGlvbi4KKyAqICAgICBKZXNwZXIgUyBNb2xsZXIgLSBDb250cmlidXRpb25zIGZv
cgorICoJCQkJCQkJCWJ1ZyAzODI3MjEgLSBbMS44XVtjb21waWxlcl0gRWZmZWN0aXZlbHkgZmlu
YWwgdmFyaWFibGVzIG5lZWRzIHNwZWNpYWwgdHJlYXRtZW50CiAgKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKi8KIHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cDsK
IApAQCAtMTcxNSw2ICsxNzE3LDcgQEAKIAkJCQlTY29wZSBzY29wZSA9IHRoaXM7CiAJCQkJaW50
IGRlcHRoID0gMDsKIAkJCQlpbnQgZm91bmREZXB0aCA9IDA7CisJCQkJYm9vbGVhbiBpc0luc2lk
ZUxhbWJkYSA9IGZhbHNlOwogCQkJCVJlZmVyZW5jZUJpbmRpbmcgZm91bmRBY3R1YWxSZWNlaXZl
clR5cGUgPSBudWxsOwogCQkJCWRvbmUgOiB3aGlsZSAodHJ1ZSkgeyAvLyBkb25lIHdoZW4gYSBD
T01QSUxBVElPTl9VTklUX1NDT1BFIGlzIGZvdW5kCiAJCQkJCXN3aXRjaCAoc2NvcGUua2luZCkg
ewpAQCAtMTczNyw2ICsxNzQwLDEwIEBACiAJCQkJCQkJCQkJUHJvYmxlbVJlYXNvbnMuSW5oZXJp
dGVkTmFtZUhpZGVzRW5jbG9zaW5nTmFtZSk7CiAJCQkJCQkJCWlmIChkZXB0aCA+IDApCiAJCQkJ
CQkJCQlpbnZvY2F0aW9uU2l0ZS5zZXREZXB0aChkZXB0aCk7CisJCQkJCQkJCWlmIChpc0luc2lk
ZUxhbWJkYSAmJiBpbnZvY2F0aW9uU2l0ZSBpbnN0YW5jZW9mIE5hbWVSZWZlcmVuY2UpIHsKKwkJ
CQkJCQkJCU5hbWVSZWZlcmVuY2UgbmFtZVJlZmVyZW5jZSA9IChOYW1lUmVmZXJlbmNlKSBpbnZv
Y2F0aW9uU2l0ZTsKKwkJCQkJCQkJCW5hbWVSZWZlcmVuY2UuYml0cyB8PSBBU1ROb2RlLklzRnJv
bU91dHNpZGVMYW1iZGE7CisJCQkJCQkJCX0KIAkJCQkJCQkJcmV0dXJuIHZhcmlhYmxlQmluZGlu
ZzsKIAkJCQkJCQl9CiAJCQkJCQkJYnJlYWs7CkBAIC0xODI2LDYgKzE4MzMsOSBAQAogCQkJCQkJ
Y2FzZSBDT01QSUxBVElPTl9VTklUX1NDT1BFIDoKIAkJCQkJCQlicmVhayBkb25lOwogCQkJCQl9
CisJCQkJCWlmIChzY29wZS5raW5kID09IE1FVEhPRF9TQ09QRSAmJiBzY29wZS5wYXJlbnQgIT0g
bnVsbCAmJiBzY29wZS5wYXJlbnQua2luZCAhPSBDTEFTU19TQ09QRSkgeworCQkJCQkJaXNJbnNp
ZGVMYW1iZGEgPSB0cnVlOworCQkJCQl9CiAJCQkJCXNjb3BlID0gc2NvcGUucGFyZW50OwogCQkJ
CX0KIApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxlbVJlcG9ydGVyLmphdmEgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvcHJvYmxlbS9Qcm9ibGVtUmVwb3J0ZXIuamF2YQppbmRleCA1MDVmMjkyLi4xMzQ3M2Zk
IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9Qcm9ibGVtUmVwb3J0ZXIuamF2YQorKysgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvcHJvYmxlbS9Qcm9ibGVtUmVwb3J0ZXIuamF2YQpAQCAtMzQsNiArMzQsNyBAQAogICoJ
CQkJCQkJCWJ1ZyAzODI3ODkgLSBbY29tcGlsZXJdW251bGxdIHdhcm4gd2hlbiBzeW50YWN0aWNh
bGx5LW5vbm51bGwgZXhwcmVzc2lvbiBpcyBjb21wYXJlZCBhZ2FpbnN0IG51bGwKICAqICAgICAg
SmVzcGVyIFMgTW9sbGVyIDxqZXNwZXJAc2Vsc2thYmV0Lm9yZz4gLSAgQ29udHJpYnV0aW9ucyBm
b3IKICAqCQkJCQkJCQlidWcgMzgyNzAxIC0gWzEuOF1bY29tcGlsZXJdIEltcGxlbWVudCBzZW1h
bnRpYyBhbmFseXNpcyBvZiBMYW1iZGEgZXhwcmVzc2lvbnMgJiBSZWZlcmVuY2UgZXhwcmVzc2lv
bgorICoJCQkJCQkJCWJ1ZyAzODI3MjEgLSBbMS44XVtjb21waWxlcl0gRWZmZWN0aXZlbHkgZmlu
YWwgdmFyaWFibGVzIG5lZWRzIHNwZWNpYWwgdHJlYXRtZW50CiAgKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKi8KIHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLnByb2JsZW07
CiAKQEAgLTEyMzgsNiArMTIzOSwxNSBAQAogCQlub2RlU291cmNlU3RhcnQobG9jYWwsIGxvY2F0
aW9uKSwKIAkJbm9kZVNvdXJjZUVuZChsb2NhbCwgbG9jYXRpb24pKTsKIH0KK3B1YmxpYyB2b2lk
IGNhbm5vdFJlZmVyVG9Ob25FZmZlY3RpdmVseUZpbmFsT3V0ZXJMb2NhbChMb2NhbFZhcmlhYmxl
QmluZGluZyBsb2NhbCwgQVNUTm9kZSBsb2NhdGlvbikgeworCVN0cmluZ1tdIGFyZ3VtZW50cyA9
bmV3IFN0cmluZ1tdeyBuZXcgU3RyaW5nKGxvY2FsLnJlYWRhYmxlTmFtZSgpKX07CisJdGhpcy5o
YW5kbGUoCisJCShsb2NhdGlvbi5iaXRzICYgQVNUTm9kZS5Jc0Zyb21PdXRzaWRlTGFtYmRhKSAh
PSAwID8gSVByb2JsZW0uT3V0ZXJMb2NhbE11c3RCZUVmZmVjdGl2ZWx5RmluYWwgOiBJUHJvYmxl
bS5PdXRlckxvY2FsVW5kZXJMYW1iZGFNdXN0QmVFZmZlY3RpdmVseUZpbmFsLCAKKwkJYXJndW1l
bnRzLAorCQlhcmd1bWVudHMsCisJCW5vZGVTb3VyY2VTdGFydChsb2NhbCwgbG9jYXRpb24pLAor
CQlub2RlU291cmNlRW5kKGxvY2FsLCBsb2NhdGlvbikpOworfQogcHVibGljIHZvaWQgY2Fubm90
UmV0dXJuSW5Jbml0aWFsaXplcihBU1ROb2RlIGxvY2F0aW9uKSB7CiAJdGhpcy5oYW5kbGUoCiAJ
CUlQcm9ibGVtLkNhbm5vdFJldHVybkluSW5pdGlhbGl6ZXIsCmRpZmYgLS1naXQgYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
cHJvYmxlbS9tZXNzYWdlcy5wcm9wZXJ0aWVzIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vbWVzc2FnZXMucHJv
cGVydGllcwppbmRleCA3YjIzMWRiLi40Nzg5YjMyIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJvYmxl
bS9tZXNzYWdlcy5wcm9wZXJ0aWVzCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL21lc3NhZ2VzLnByb3Bl
cnRpZXMKQEAgLTYyNSw2ICs2MjUsOCBAQAogCiAjIyMgTU9SRSBUWVBFIFJFTEFURUQKIDY2MiA9
IElsbGVnYWwgYXR0ZW1wdCB0byBjcmVhdGUgYXJyYXlzIG9mIHVuaW9uIHR5cGVzCis2NjMgPSBU
aGUgdmFyaWFibGUgezB9IG11c3QgYmUgbXVzdCBiZSBmaW5hbCBvciBlZmZlY3RpdmVseSBmaW5h
bCBpZiB1c2VkIGluIGFuIGlubmVyIGNsYXNzCis2NjQgPSBUaGUgdmFyaWFibGUgezB9IG11c3Qg
YmUgbXVzdCBiZSBmaW5hbCBvciBlZmZlY3RpdmVseSBmaW5hbCBpZiB1c2VkIGluIGEgbGFtYmRh
IGV4cHJlc3Npb24KIAogIyMjIE5VTEwgQU5BTFlTSVMgRk9SIE9USEVSIEVYUFJFU1NJT05TCiA2
NzAgPSBOdWxsIGNvbXBhcmlzb24gYWx3YXlzIHlpZWxkcyBmYWxzZTogdGhpcyBleHByZXNzaW9u
IGNhbm5vdCBiZSBudWxs
</data>

          </attachment>
      

    </bug>

</bugzilla>