<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>351697</bug_id>
          
          <creation_ts>2011-07-11 07:21:00 -0400</creation_ts>
          <short_desc>ClassCastException while copying a .class file to wrong source package</short_desc>
          <delta_ts>2012-11-07 04:31:23 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.7</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows XP</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>3.8 M7</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Rozhkov Igor">irozhkov2007</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>daniel_megert</cc>
    
    <cc>minhyuk</cc>
    
    <cc>satyam.kandula</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="50015"
          type_id="1"
          status="+"
          setter="amj87.iitr"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1962908</commentid>
    <comment_count>0</comment_count>
    <who name="Rozhkov Igor">irozhkov2007</who>
    <bug_when>2011-07-11 07:21:15 -0400</bug_when>
    <thetext>-- Configuration Details --
Product: Eclipse 1.4.0.20110609-1120 (org.eclipse.epp.package.jee.product)
Installed Features:
 org.eclipse.jdt 3.7.0.v20110520-0800-7z8gFchFMTdFYKuLqBLqRja9B15B

 3004: Unexpected error occurred.
  java.lang.ClassCastException: org.eclipse.jdt.internal.core.ClassFile cannot be cast to org.eclipse.jdt.core.ICompilationUnit
  	at org.eclipse.jdt.internal.core.NameLookup.seekTypesInSourcePackage(NameLookup.java:1083)
  	at org.eclipse.jdt.internal.core.NameLookup.seekTypes(NameLookup.java:989)
  	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:778)
  	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:662)
  	at org.eclipse.jdt.internal.core.NameLookup.findType(NameLookup.java:621)
  	at org.eclipse.jdt.internal.core.SearchableEnvironment.find(SearchableEnvironment.java:103)
  	at org.eclipse.jdt.internal.core.SearchableEnvironment.findType(SearchableEnvironment.java:294)
  	at org.eclipse.jdt.internal.core.CancelableNameEnvironment.findType(CancelableNameEnvironment.java:45)
  	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:132)
  	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getTypeOrPackage(PackageBinding.java:183)
  	at org.eclipse.jdt.internal.compiler.lookup.Scope.getTypeOrPackage(Scope.java:2661)
  	at org.eclipse.jdt.internal.compiler.lookup.Scope.getType(Scope.java:2378)
  	at org.eclipse.jdt.internal.compiler.ast.SingleTypeReference.getTypeBinding(SingleTypeReference.java:44)
  	at org.eclipse.jdt.internal.compiler.ast.TypeReference.internalResolveType(TypeReference.java:131)
  	at org.eclipse.jdt.internal.compiler.ast.TypeReference.resolveType(TypeReference.java:203)
  	at org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.resolveTypesFor(SourceTypeBinding.java:1451)
  	at org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.methods(SourceTypeBinding.java:1174)
  	at org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.faultInTypesForFieldsAndMethods(SourceTypeBinding.java:677)
  	at org.eclipse.jdt.internal.compiler.lookup.CompilationUnitScope.faultInTypes(CompilationUnitScope.java:469)
  	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:1174)
  	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:681)
  	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1175)
  	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:801)
  	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
  	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
  	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
  	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
  	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
  	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
  	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
  	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1963119</commentid>
    <comment_count>1</comment_count>
    <who name="Walter Harley">eclipse</who>
    <bug_when>2011-07-11 13:33:49 -0400</bug_when>
    <thetext>Igor, is it possible to attach a code snippet that causes this to happen? Can you say anything about how to reproduce this problem?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1963123</commentid>
    <comment_count>2</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-07-11 13:38:10 -0400</bug_when>
    <thetext>Jay, can you please investigate? Thanks!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1963403</commentid>
    <comment_count>3</comment_count>
    <who name="Rozhkov Igor">irozhkov2007</who>
    <bug_when>2011-07-12 05:42:09 -0400</bug_when>
    <thetext>I watched it when editing the different parts of the code, and when you press Ctrl-1.
Now this problem has disappeared.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2090602</commentid>
    <comment_count>4</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-04-06 02:48:19 -0400</bug_when>
    <thetext>Since we don&apos;t have reproducible steps and now the problem no longer occurs, closing the bug.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2090630</commentid>
    <comment_count>5</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-04-06 05:14:31 -0400</bug_when>
    <thetext>(In reply to comment #4)
&gt; Since we don&apos;t have reproducible steps and now the problem no longer occurs,
&gt; closing the bug.

Its not too hard to construct the steps:
1. Launch a runtime workbench in debug mode
2. Create a source folder, for which the output folder is the same as the source folder itself. Create two classes A and B. In A, have this
void foo() {
   B b = new B();
}
3. Now open the directory in the file system corresponding to the src folder. You will see A.java, A.class, B.java and B.class. 
4. Delete ONLY B.java
5. Go back to Eclipse runtime workbench and try hovering over B in the B b = new B(). Try other things like selection or quick assist. 
6. Look at the error log in the base Eclipse instance. You will see the exception from comment 0.

Obviously, the assumption in NameLookup.seekTypesInSourcePackage line 1090 is flawed. The &apos;cu&apos; array is obtained by getting all children of the source package, however those children can also be class files. 
An instanceof check, IMO, should suffice.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2090637</commentid>
    <comment_count>6</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-04-06 06:01:11 -0400</bug_when>
    <thetext>(In reply to comment #5)
&gt; Its not too hard to construct the steps:

Thanks for the steps, Ayush. But is something amiss? Because I can&apos;t reproduce it even with the steps. I tried with auto-build off, with &apos;B&apos; being closed, problems view being closed etc. In debug mode, at some point, I only see only one CU in the array and I also see an error in the editor about the unresolved type &apos;B&apos;.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2090646</commentid>
    <comment_count>7</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-04-06 06:35:53 -0400</bug_when>
    <thetext>(In reply to comment #6)
&gt; (In reply to comment #5)
&gt; &gt; Its not too hard to construct the steps:
&gt; 
&gt; Thanks for the steps, Ayush. But is something amiss? Because I can&apos;t reproduce
&gt; it even with the steps. I tried with auto-build off, with &apos;B&apos; being closed,
&gt; problems view being closed etc. In debug mode, at some point, I only see only
&gt; one CU in the array and I also see an error in the editor about the unresolved
&gt; type &apos;B&apos;.

Oops, those were the wrong steps: I didn&apos;t notice that some other experiment triggered the CCE, and not this one. Steps:
1) In any package &apos;p&apos; in a project, add some sample A.class file in the &apos;p&apos; folder in the filesystem or in the package explorer, and refresh the package.
2) In any .java file in the package add a line A a = new A(); like this
class Sample {
  A a = new A();
}

Now the CCE should occur in whatever Eclipse instance you&apos;re running. I tried this a couple of times and could consistently reproduce.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2090992</commentid>
    <comment_count>8</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-04-09 07:08:41 -0400</bug_when>
    <thetext>Here are the correct steps:

1. Create project &apos;P&apos;, with one source folder &apos;src&apos; with default output folder and two packages namely &apos;p&apos; and &apos;q&apos;.
2. Create two classes A and B in packages p and q respectively with following content:

    package p;
    public class A {
	B b = new B();
    }

    package q;
    public class B {
    }

3. Create a temporary folder, say &apos;temp&apos; within the same project.
4. Open the Navigator view and copy the file /P/bin/q/B.class to /P/temp
5. Delete /P/src/q/B.java from the Navigator view
6. Copy the B.class from the temporary location to /P/src/p. Note that the B actually belonged to package &apos;q&apos; originally, but we are copying it to &apos;p&apos;.

The errors appears in the error log view in a few seconds. If they don&apos;t, try reopening A.java in the Java editor and try selecting &apos;B&apos;.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2091073</commentid>
    <comment_count>9</comment_count>
      <attachid>213754</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-04-09 11:57:06 -0400</bug_when>
    <thetext>Created attachment 213754
Proposed fix

The fix is to ignore binary files when we are looking for source elements. A new test has been added. I will update after running all existing tests.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2091082</commentid>
    <comment_count>10</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-04-09 12:12:55 -0400</bug_when>
    <thetext>Minor point: there&apos;s a commented out import statement in NameLookup. While the fix looks good, I&apos;m wondering if the getType() for ITypeRoot is still required, since currently getType exists both in ICompilationUnit and IClassFile and does the same thing - return the top level type? Maybe we should open an api request for 3.9.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2091088</commentid>
    <comment_count>11</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-04-09 12:24:51 -0400</bug_when>
    <thetext>(In reply to comment #10)
&gt; I&apos;m wondering if the getType() for ITypeRoot is still required,
&gt; since currently getType exists both in ICompilationUnit and IClassFile and does
&gt; the same thing - return the top level type? Maybe we should open an api request
&gt; for 3.9.

Actually from an IClassFile.getType() there&apos;s no guarantee of obtaining a top-level type since inner classes have their own class files, while ICU.getType() will always return top level type. So clients will anyway have to handle the result differently. Hence, doesn&apos;t make a strong case for ITypeRoot.getType().

I also checked for all other usages of getType(..) and they are protected by proper checks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2091287</commentid>
    <comment_count>12</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-04-09 23:39:00 -0400</bug_when>
    <thetext>(In reply to comment #11)
&gt; Actually from an IClassFile.getType() there&apos;s no guarantee of obtaining a
&gt; top-level type since inner classes have their own class files, while
&gt; ICU.getType() will always return top level type. So clients will anyway have to
&gt; handle the result differently. Hence, doesn&apos;t make a strong case for
&gt; ITypeRoot.getType().
&gt; 
&gt; I also checked for all other usages of getType(..) and they are protected by
&gt; proper checks.

That&apos;s right.

Ideally we don&apos;t want to add the ClassFile to the package&apos;s children list at all since it doesn&apos;t belong to that package. But such a fix would be more complicated and might even have side effects. Hence, I chose the simple fix to just ignore it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2091288</commentid>
    <comment_count>13</comment_count>
      <attachid>213785</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-04-09 23:40:13 -0400</bug_when>
    <thetext>Created attachment 213785
Updated patch

Removed the commented out import statement.
Ayush, please review this patch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2091310</commentid>
    <comment_count>14</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-04-10 02:18:56 -0400</bug_when>
    <thetext>Looks good.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2091313</commentid>
    <comment_count>15</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-04-10 02:32:06 -0400</bug_when>
    <thetext>Released the fix here: 

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=c71a2dd3276b1c054fbb64a586af2db8d142bd3f</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2100304</commentid>
    <comment_count>16</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-04-30 04:24:52 -0400</bug_when>
    <thetext>Verified for 3.8M7 using build I20120429-1800</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2180397</commentid>
    <comment_count>17</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-11-07 04:31:23 -0500</bug_when>
    <thetext>*** Bug 393745 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>213754</attachid>
            <date>2012-04-09 11:57:00 -0400</date>
            <delta_ts>2012-04-09 23:40:13 -0400</delta_ts>
            <desc>Proposed fix</desc>
            <filename>Fix-for-bug-351697.patch</filename>
            <type>text/plain</type>
            <size>4522</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9tb2RlbC9KYXZhUHJvamVjdFRlc3RzLmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
bW9kZWwvSmF2YVByb2plY3RUZXN0cy5qYXZhCmluZGV4IGE0ZGEyZTMuLmI1ZTA3ZTkgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9tb2RlbC9KYXZhUHJvamVjdFRlc3RzLmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21v
ZGVsL0phdmFQcm9qZWN0VGVzdHMuamF2YQpAQCAtMjcsNiArMjcsOSBAQAogaW1wb3J0IG9yZy5l
Y2xpcHNlLmNvcmUucnVudGltZS5QYXRoOwogaW1wb3J0IG9yZy5lY2xpcHNlLmNvcmUucnVudGlt
ZS5wcmVmZXJlbmNlcy5JRWNsaXBzZVByZWZlcmVuY2VzOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5jb3JlLio7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkFTVDsKK2ltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQVNUTm9kZTsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
Y29yZS5kb20uQVNUUGFyc2VyOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21w
aWxlci5jbGFzc2ZtdC5DbGFzc0ZpbGVDb25zdGFudHM7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmludGVybmFsLmNvcmUuSmF2YU1vZGVsTWFuYWdlcjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29yZS5QYWNrYWdlRnJhZ21lbnRSb290OwpAQCAtMzcsNyArNDAsNyBAQAogCXN1
cGVyKG5hbWUpOwogfQogc3RhdGljIHsKLS8vCVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1tdIHsg
InRlc3RCdWczNjAxNjQiIH07CisvLwlURVNUU19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7ICJ0ZXN0
QnVnMzUxNjk3IiB9OwogfQogcHVibGljIHN0YXRpYyBUZXN0IHN1aXRlKCkgewogCVRlc3RTdWl0
ZSBzdWl0ZSA9IChUZXN0U3VpdGUpIGJ1aWxkTW9kZWxUZXN0U3VpdGUoSmF2YVByb2plY3RUZXN0
cy5jbGFzcyk7CkBAIC0yNTMwLDQgKzI1MzMsNTQgQEAKIAkJdGhpcy5kZWxldGVQcm9qZWN0KCJQ
Iik7CiAJfQogfQorLyoqCisgKiBAYnVnIDM1MTY5NzogamF2YS5sYW5nLkNsYXNzQ2FzdEV4Y2Vw
dGlvbgorICogQHRlc3QgVmVyaWZ5IHRoYXQgQ2xhc3NDYXN0RXhjZXB0aW9uIGlzIG5vdCB0aHJv
d24gd2hlbiBhIC5jbGFzcyBmaWxlIGlzIGNvcGllZCB0byBhIHdyb25nIHNvdXJjZSBwYWNrYWdl
LgorICogQHNlZSAiaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lk
PTM1MTY5NyIKKyAqLworcHVibGljIHZvaWQgdGVzdEJ1ZzM1MTY5NygpIHRocm93cyBFeGNlcHRp
b24geworCXRyeSB7CisJCUlKYXZhUHJvamVjdCBwcm9qID0gdGhpcy5jcmVhdGVKYXZhUHJvamVj
dCgiUCIsIG5ldyBTdHJpbmdbXSB7InNyYyJ9LCAiYmluIik7CisJCXByb2ouZ2V0UHJvamVjdCgp
Lm9wZW4obnVsbCk7CisJCWNyZWF0ZUZvbGRlcigiL1Avc3JjL3AiKTsKKwkJY3JlYXRlRm9sZGVy
KCIvUC9zcmMvcSIpOworCQljcmVhdGVGb2xkZXIoIi9QL3RlbXBfZm9sZGVyIik7CisKKwkJSUZp
bGUgdG9FZGl0ID0gY3JlYXRlRmlsZSgiL1Avc3JjL3AvUC5qYXZhIiwKKwkJCQkicGFja2FnZSBw
OyIgKworCQkJCSJwdWJsaWMgY2xhc3MgUCB7IiArCisJCQkJIglRIGIgPSBuZXcgUSgpOyIgKwor
CQkJCSIJcHVibGljIHZvaWQgZm9vKCkgeyIgKworCQkJCSIJfSIpOworCisJCUlGaWxlIHRvRGVs
ZXRlID0gY3JlYXRlRmlsZSgiL1Avc3JjL3EvUS5qYXZhIiwKKwkJCQkicGFja2FnZSBxOyIgKwor
CQkJCSJwdWJsaWMgY2xhc3MgUSB7IiArCisJCQkJIn0iKTsKKwkJcHJvai5nZXRQcm9qZWN0KCku
YnVpbGQoSW5jcmVtZW50YWxQcm9qZWN0QnVpbGRlci5GVUxMX0JVSUxELCBudWxsKTsKKworCQlt
b3ZlRmlsZSgiL1AvYmluL3EvUS5jbGFzcyIsICIvUC90ZW1wX2ZvbGRlci9RLmNsYXNzIik7CisJ
CWRlbGV0ZVJlc291cmNlKHRvRGVsZXRlKTsKKwkJcHJvai5nZXRQcm9qZWN0KCkuYnVpbGQoSW5j
cmVtZW50YWxQcm9qZWN0QnVpbGRlci5GVUxMX0JVSUxELCBudWxsKTsKKworCQlJQ29tcGlsYXRp
b25Vbml0IHVuaXQgPSAoSUNvbXBpbGF0aW9uVW5pdClKYXZhQ29yZS5jcmVhdGUodG9FZGl0KTsK
KwkJdW5pdC5vcGVuKG51bGwpOworCQltb3ZlRmlsZSggIi9QL3RlbXBfZm9sZGVyL1EuY2xhc3Mi
LCAiL1Avc3JjL3AvUS5jbGFzcy8iKTsKKwkJcHJvai5nZXRQcm9qZWN0KCkuYnVpbGQoSW5jcmVt
ZW50YWxQcm9qZWN0QnVpbGRlci5GVUxMX0JVSUxELCBudWxsKTsKKworCQl0cnkgeworCQkJQVNU
UGFyc2VyIHBhcnNlcj0gQVNUUGFyc2VyLm5ld1BhcnNlcihBU1QuSkxTNCk7CisJCQlwYXJzZXIu
c2V0U291cmNlKHVuaXQpOworCQkJcGFyc2VyLnNldFJlc29sdmVCaW5kaW5ncyh0cnVlKTsKKwkJ
CUFTVE5vZGUgbm9kZSA9IHBhcnNlci5jcmVhdGVBU1QobnVsbCk7CisJCQlhc3NlcnROb3ROdWxs
KCJBU1ROb2RlIHNob3VsZCBub3QgYmUgbnVsbCIsIG5vZGUpOworCQl9CisJCWNhdGNoKENsYXNz
Q2FzdEV4Y2VwdGlvbiBjY2UpIHsKKwkJCWZhaWwoIkNsYXNzQ2FzdEV4Y2VwdGlvbjoiICsgY2Nl
LmdldE1lc3NhZ2UoKSk7CisJCX0KKworCX0gZmluYWxseSB7CisJCXRoaXMuZGVsZXRlUHJvamVj
dCgiUCIpOworCX0KK30KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVs
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL05hbWVMb29rdXAuamF2YSBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL05hbWVMb29r
dXAuamF2YQppbmRleCBkMDhkZmY1Li5jZGVkNWI1IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9OYW1lTG9va3VwLmph
dmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvcmUvTmFtZUxvb2t1cC5qYXZhCkBAIC0xLDUgKzEsNSBAQAogLyoqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMSBJQk0gQ29ycG9yYXRpb24gYW5k
IG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMiBJQk0gQ29ycG9yYXRpb24gYW5k
IG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFj
Y29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVy
bXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5p
ZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKQEAgLTE3LDYgKzE3LDcg
QEAKIGltcG9ydCBvcmcuZWNsaXBzZS5jb3JlLnJlc291cmNlcy4qOwogaW1wb3J0IG9yZy5lY2xp
cHNlLmNvcmUucnVudGltZS5JUGF0aDsKIGltcG9ydCBvcmcuZWNsaXBzZS5jb3JlLnJ1bnRpbWUu
SVByb2dyZXNzTW9uaXRvcjsKKy8vaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLklDbGFzc0Zp
bGU7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuSUNsYXNzcGF0aEVudHJ5OwogaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5jb3JlLklDb21waWxhdGlvblVuaXQ7CiBpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmNvcmUuSUphdmFFbGVtZW50OwpAQCAtMTA4Nyw2ICsxMDg4LDExIEBACiAJCQkJCQlp
bnQgbGFzdERvdCA9IGN1TmFtZS5sYXN0SW5kZXhPZignLicpOwogCQkJCQkJaWYgKGxhc3REb3Qg
IT0gdG9wTGV2ZWxUeXBlTmFtZS5sZW5ndGgoKSB8fCAhdG9wTGV2ZWxUeXBlTmFtZS5yZWdpb25N
YXRjaGVzKDAsIGN1TmFtZSwgMCwgbGFzdERvdCkpCiAJCQkJCQkJY29udGludWU7CisKKwkJCQkJ
CS8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNTE2OTcK
KwkJCQkJCS8vIElmIHdlIGFyZSBsb29raW5nIGF0IHNvdXJjZSBsb2NhdGlvbiwganVzdCBpZ25v
cmUgYmluYXJ5IHR5cGVzCisJCQkJCQlpZiAoIShjdSBpbnN0YW5jZW9mIElDb21waWxhdGlvblVu
aXQpKQorCQkJCQkJCWNvbnRpbnVlOwogCQkJCQkJSVR5cGUgdHlwZSA9ICgoSUNvbXBpbGF0aW9u
VW5pdCkgY3UpLmdldFR5cGUodG9wTGV2ZWxUeXBlTmFtZSk7CiAJCQkJCQl0eXBlID0gZ2V0TWVt
YmVyVHlwZSh0eXBlLCBuYW1lLCBmaXJzdERvdCk7CiAJCQkJCQlpZiAoYWNjZXB0VHlwZSh0eXBl
LCBhY2NlcHRGbGFncywgdHJ1ZS8qYSBzb3VyY2UgdHlwZSovKSkgeyAvLyBhY2NlcHQgdHlwZSBj
aGVja3MgZm9yIGV4aXN0ZW5jZQ==
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>213785</attachid>
            <date>2012-04-09 23:40:00 -0400</date>
            <delta_ts>2012-04-09 23:40:13 -0400</delta_ts>
            <desc>Updated patch</desc>
            <filename>Fix-for-bug-351697.patch</filename>
            <type>text/plain</type>
            <size>4196</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9tb2RlbC9KYXZhUHJvamVjdFRlc3RzLmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
bW9kZWwvSmF2YVByb2plY3RUZXN0cy5qYXZhCmluZGV4IGE0ZGEyZTMuLmI1ZTA3ZTkgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9tb2RlbC9KYXZhUHJvamVjdFRlc3RzLmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21v
ZGVsL0phdmFQcm9qZWN0VGVzdHMuamF2YQpAQCAtMjcsNiArMjcsOSBAQAogaW1wb3J0IG9yZy5l
Y2xpcHNlLmNvcmUucnVudGltZS5QYXRoOwogaW1wb3J0IG9yZy5lY2xpcHNlLmNvcmUucnVudGlt
ZS5wcmVmZXJlbmNlcy5JRWNsaXBzZVByZWZlcmVuY2VzOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5jb3JlLio7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLkFTVDsKK2ltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQVNUTm9kZTsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
Y29yZS5kb20uQVNUUGFyc2VyOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21w
aWxlci5jbGFzc2ZtdC5DbGFzc0ZpbGVDb25zdGFudHM7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmludGVybmFsLmNvcmUuSmF2YU1vZGVsTWFuYWdlcjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29yZS5QYWNrYWdlRnJhZ21lbnRSb290OwpAQCAtMzcsNyArNDAsNyBAQAogCXN1
cGVyKG5hbWUpOwogfQogc3RhdGljIHsKLS8vCVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1tdIHsg
InRlc3RCdWczNjAxNjQiIH07CisvLwlURVNUU19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7ICJ0ZXN0
QnVnMzUxNjk3IiB9OwogfQogcHVibGljIHN0YXRpYyBUZXN0IHN1aXRlKCkgewogCVRlc3RTdWl0
ZSBzdWl0ZSA9IChUZXN0U3VpdGUpIGJ1aWxkTW9kZWxUZXN0U3VpdGUoSmF2YVByb2plY3RUZXN0
cy5jbGFzcyk7CkBAIC0yNTMwLDQgKzI1MzMsNTQgQEAKIAkJdGhpcy5kZWxldGVQcm9qZWN0KCJQ
Iik7CiAJfQogfQorLyoqCisgKiBAYnVnIDM1MTY5NzogamF2YS5sYW5nLkNsYXNzQ2FzdEV4Y2Vw
dGlvbgorICogQHRlc3QgVmVyaWZ5IHRoYXQgQ2xhc3NDYXN0RXhjZXB0aW9uIGlzIG5vdCB0aHJv
d24gd2hlbiBhIC5jbGFzcyBmaWxlIGlzIGNvcGllZCB0byBhIHdyb25nIHNvdXJjZSBwYWNrYWdl
LgorICogQHNlZSAiaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lk
PTM1MTY5NyIKKyAqLworcHVibGljIHZvaWQgdGVzdEJ1ZzM1MTY5NygpIHRocm93cyBFeGNlcHRp
b24geworCXRyeSB7CisJCUlKYXZhUHJvamVjdCBwcm9qID0gdGhpcy5jcmVhdGVKYXZhUHJvamVj
dCgiUCIsIG5ldyBTdHJpbmdbXSB7InNyYyJ9LCAiYmluIik7CisJCXByb2ouZ2V0UHJvamVjdCgp
Lm9wZW4obnVsbCk7CisJCWNyZWF0ZUZvbGRlcigiL1Avc3JjL3AiKTsKKwkJY3JlYXRlRm9sZGVy
KCIvUC9zcmMvcSIpOworCQljcmVhdGVGb2xkZXIoIi9QL3RlbXBfZm9sZGVyIik7CisKKwkJSUZp
bGUgdG9FZGl0ID0gY3JlYXRlRmlsZSgiL1Avc3JjL3AvUC5qYXZhIiwKKwkJCQkicGFja2FnZSBw
OyIgKworCQkJCSJwdWJsaWMgY2xhc3MgUCB7IiArCisJCQkJIglRIGIgPSBuZXcgUSgpOyIgKwor
CQkJCSIJcHVibGljIHZvaWQgZm9vKCkgeyIgKworCQkJCSIJfSIpOworCisJCUlGaWxlIHRvRGVs
ZXRlID0gY3JlYXRlRmlsZSgiL1Avc3JjL3EvUS5qYXZhIiwKKwkJCQkicGFja2FnZSBxOyIgKwor
CQkJCSJwdWJsaWMgY2xhc3MgUSB7IiArCisJCQkJIn0iKTsKKwkJcHJvai5nZXRQcm9qZWN0KCku
YnVpbGQoSW5jcmVtZW50YWxQcm9qZWN0QnVpbGRlci5GVUxMX0JVSUxELCBudWxsKTsKKworCQlt
b3ZlRmlsZSgiL1AvYmluL3EvUS5jbGFzcyIsICIvUC90ZW1wX2ZvbGRlci9RLmNsYXNzIik7CisJ
CWRlbGV0ZVJlc291cmNlKHRvRGVsZXRlKTsKKwkJcHJvai5nZXRQcm9qZWN0KCkuYnVpbGQoSW5j
cmVtZW50YWxQcm9qZWN0QnVpbGRlci5GVUxMX0JVSUxELCBudWxsKTsKKworCQlJQ29tcGlsYXRp
b25Vbml0IHVuaXQgPSAoSUNvbXBpbGF0aW9uVW5pdClKYXZhQ29yZS5jcmVhdGUodG9FZGl0KTsK
KwkJdW5pdC5vcGVuKG51bGwpOworCQltb3ZlRmlsZSggIi9QL3RlbXBfZm9sZGVyL1EuY2xhc3Mi
LCAiL1Avc3JjL3AvUS5jbGFzcy8iKTsKKwkJcHJvai5nZXRQcm9qZWN0KCkuYnVpbGQoSW5jcmVt
ZW50YWxQcm9qZWN0QnVpbGRlci5GVUxMX0JVSUxELCBudWxsKTsKKworCQl0cnkgeworCQkJQVNU
UGFyc2VyIHBhcnNlcj0gQVNUUGFyc2VyLm5ld1BhcnNlcihBU1QuSkxTNCk7CisJCQlwYXJzZXIu
c2V0U291cmNlKHVuaXQpOworCQkJcGFyc2VyLnNldFJlc29sdmVCaW5kaW5ncyh0cnVlKTsKKwkJ
CUFTVE5vZGUgbm9kZSA9IHBhcnNlci5jcmVhdGVBU1QobnVsbCk7CisJCQlhc3NlcnROb3ROdWxs
KCJBU1ROb2RlIHNob3VsZCBub3QgYmUgbnVsbCIsIG5vZGUpOworCQl9CisJCWNhdGNoKENsYXNz
Q2FzdEV4Y2VwdGlvbiBjY2UpIHsKKwkJCWZhaWwoIkNsYXNzQ2FzdEV4Y2VwdGlvbjoiICsgY2Nl
LmdldE1lc3NhZ2UoKSk7CisJCX0KKworCX0gZmluYWxseSB7CisJCXRoaXMuZGVsZXRlUHJvamVj
dCgiUCIpOworCX0KK30KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVs
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL05hbWVMb29rdXAuamF2YSBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL05hbWVMb29r
dXAuamF2YQppbmRleCBkMDhkZmY1Li5lYmZiNjdiIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9OYW1lTG9va3VwLmph
dmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvcmUvTmFtZUxvb2t1cC5qYXZhCkBAIC0xLDUgKzEsNSBAQAogLyoqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMSBJQk0gQ29ycG9yYXRpb24gYW5k
IG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMiBJQk0gQ29ycG9yYXRpb24gYW5k
IG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFj
Y29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVy
bXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5p
ZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKQEAgLTEwODcsNiArMTA4
NywxMSBAQAogCQkJCQkJaW50IGxhc3REb3QgPSBjdU5hbWUubGFzdEluZGV4T2YoJy4nKTsKIAkJ
CQkJCWlmIChsYXN0RG90ICE9IHRvcExldmVsVHlwZU5hbWUubGVuZ3RoKCkgfHwgIXRvcExldmVs
VHlwZU5hbWUucmVnaW9uTWF0Y2hlcygwLCBjdU5hbWUsIDAsIGxhc3REb3QpKQogCQkJCQkJCWNv
bnRpbnVlOworCisJCQkJCQkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1
Zy5jZ2k/aWQ9MzUxNjk3CisJCQkJCQkvLyBJZiB3ZSBhcmUgbG9va2luZyBhdCBzb3VyY2UgbG9j
YXRpb24sIGp1c3QgaWdub3JlIGJpbmFyeSB0eXBlcworCQkJCQkJaWYgKCEoY3UgaW5zdGFuY2Vv
ZiBJQ29tcGlsYXRpb25Vbml0KSkKKwkJCQkJCQljb250aW51ZTsKIAkJCQkJCUlUeXBlIHR5cGUg
PSAoKElDb21waWxhdGlvblVuaXQpIGN1KS5nZXRUeXBlKHRvcExldmVsVHlwZU5hbWUpOwogCQkJ
CQkJdHlwZSA9IGdldE1lbWJlclR5cGUodHlwZSwgbmFtZSwgZmlyc3REb3QpOwogCQkJCQkJaWYg
KGFjY2VwdFR5cGUodHlwZSwgYWNjZXB0RmxhZ3MsIHRydWUvKmEgc291cmNlIHR5cGUqLykpIHsg
Ly8gYWNjZXB0IHR5cGUgY2hlY2tzIGZvciBleGlzdGVuY2U=
</data>
<flag name="review"
          id="50014"
          type_id="6"
          status="?"
          setter="jarthana"
    />
          </attachment>
      

    </bug>

</bugzilla>