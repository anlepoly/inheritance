<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>356620</bug_id>
          
          <creation_ts>2011-09-02 12:04:00 -0400</creation_ts>
          <short_desc>Make it possible to provide indexes for defined libraries</short_desc>
          <delta_ts>2012-01-31 05:39:17 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.7</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>3.8 M5</target_milestone>
          
          <blocked>365446</blocked>
    
    <blocked>364287</blocked>
    
    <blocked>364290</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Olivier Thomann">Olivier_Thomann</reporter>
          <assigned_to name="Satyam Kandula">satyam.kandula</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>ankur_sharma</cc>
    
    <cc>cwindatt</cc>
    
    <cc>daniel_megert</cc>
    
    <cc>deepakazad</cc>
    
    <cc>gdtaylor</cc>
    
    <cc>jarthana</cc>
    
    <cc>markus_keller</cc>
    
    <cc>martin.oberhuber</cc>
    
    <cc>melickm</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="47016"
          type_id="1"
          status="+"
          setter="srikanth_sankaran"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1988442</commentid>
    <comment_count>0</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-09-02 12:04:08 -0400</bug_when>
    <thetext>In some cases, indexing takes a significant amount of time. There is not much that can be done to significantly improve the performance except for having a pre-built index.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1988443</commentid>
    <comment_count>1</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-09-02 12:04:32 -0400</bug_when>
    <thetext>Satyam,

Please investigate.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2011062</commentid>
    <comment_count>2</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-10-14 22:39:48 -0400</bug_when>
    <thetext>I will not be able to finish it by M3, so moving it to M4.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2011064</commentid>
    <comment_count>3</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-10-14 23:11:13 -0400</bug_when>
    <thetext>Here is the overall approach I am taking for this in JDT/Core.

. This solution is targeted to have indexes for only jars, which includes plugin jars. It will not be targeted for class folders or source folders. Source folders and class folders are likely to change and hence tracking could be difficult.

. The index file can be generated either through an ant task or direct function call or an headless application. The index file can be generated only for a jar. To make it simple, all of these just take two parameters, a jar file to index and the path to the index file that needs to be written.

. The path to the index file can be provided through the classpath attribute. It should be like a URL string, so that the path to the indexFile can be easily mentioned even if it is in a jar. Here is the javadoc for attribute in IClasspathAttribute
#######
/**
 * Constant for the name of the index location attribute.
 * 
 * &lt;p&gt;The value for this attribute has to be the string representation of a URL.
 * It should point to an existing index file in a folder or a jar.&lt;/p&gt;
 * 
 * @since 3.8
 */
String INDEX_LOCATION_ATTRIBUTE_NAME = &quot;index_location&quot;; //$NON-NLS-1$
#######

. If the index file specified is not present or if the indexer thinks it is corrupt, the library is reindexed. I haven&apos;t planned yet to see if the index file is really in sync with the jar. If there are multiple projects depending on the same jar, but if their index_location classpath attributes are different, the last one that sets wins. I am assuming that this will generally not happen and hence it is not worth taking care of this. 

Please let me know if you have any alternative view on the above points.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2011065</commentid>
    <comment_count>4</comment_count>
      <attachid>205241</attachid>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-10-14 23:18:25 -0400</bug_when>
    <thetext>Created attachment 205241
First cut

This patch is not complete. I have marked TODOs for all the incomplete tasks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2011429</commentid>
    <comment_count>5</comment_count>
    <who name="Martin Oberhuber">martin.oberhuber</who>
    <bug_when>2011-10-17 08:59:37 -0400</bug_when>
    <thetext>(In reply to comment #3)
&gt; The path to the index file can be provided through the classpath attribute.
&gt; It should be like a URL string

Would that be an absolute URL, or a relative one?

When sharing project(s) in a team, it can happen that different team members have the project (and thus the index) in a different physical location.

So the &quot;index_location&quot; should either support specifying the location relative (eg relative to the plugin root, or relative to the JAR being indexed; Javadocs would need to specify what it is relative to) or some sort of variable substitution mechanism is needed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2012312</commentid>
    <comment_count>6</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-10-18 10:20:25 -0400</bug_when>
    <thetext>(In reply to comment #5)
Thanks for this comment. This should better support both an absolute and a relative path. Do you think variable substitution mechanism is needed? I don&apos;t plan to.
I will update the Javadoc accordingly. Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2021615</commentid>
    <comment_count>7</comment_count>
    <who name="Grant Taylor">gdtaylor</who>
    <bug_when>2011-11-04 16:04:55 -0400</bug_when>
    <thetext>I think this sounds good.  In our case, we have a WST server target which defines many jars.  If these jars can be pre-indexed, we&apos;ll get a big boost in performance.  It sounds like we should be able to:
- generate these index files before shipping our product
- ensure that the classpath containers point to the index files (which would be plugin resource URLs).  Is this true?  Can I set up index file references for a classpath container?
If the above is all true, then I&apos;m good with the design.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2024270</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-10 01:17:28 -0500</bug_when>
    <thetext>(In reply to comment #7)

&gt; If the above is all true, then I&apos;m good with the design.

Satyam, for the record, please document where we stand with
respect to Grant&apos;s observations.

Jay, please review when a close to final form version as indicated
by Satyam becomes available.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2024275</commentid>
    <comment_count>9</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-11-10 01:32:25 -0500</bug_when>
    <thetext>(In reply to comment #7)
Grant, Thanks for your comments.
You should be able to specify the index file from a classpath container.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2028019</commentid>
    <comment_count>10</comment_count>
      <attachid>207155</attachid>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-11-17 11:37:52 -0500</bug_when>
    <thetext>Created attachment 207155
Proposed patch</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2028020</commentid>
    <comment_count>11</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-11-17 11:39:36 -0500</bug_when>
    <thetext>(In reply to comment #10)
I still have to improve in the Javadocs and comments. Jay, please review.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2028025</commentid>
    <comment_count>12</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-11-17 11:42:40 -0500</bug_when>
    <thetext>(In reply to comment #5)
Here is the new javadoc for attribute in IClasspathAttribute. Hope this is good enough. I wanted to refer to the javadoc of the platform spec but couldn&apos;t find a javadoc. 
#######
/**
 * Constant for the name of the index location attribute.
 * 
 * &lt;p&gt;The value for this attribute has to be the string representation of a
URL.
 * It should point to an existing index file in a folder or a jar. 
 * The URL can also be of platform protocol.&lt;/p&gt;
 * 
 * @since 3.8
 */
String INDEX_LOCATION_ATTRIBUTE_NAME = &quot;index_location&quot;; //$NON-NLS-1$
#######</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2028282</commentid>
    <comment_count>13</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-17 19:31:28 -0500</bug_when>
    <thetext>(In reply to comment #11)
&gt; (In reply to comment #10)
&gt; I still have to improve in the Javadocs and comments. Jay, please review.

All stake holders, you are welcome for an early test drive even as this patch
is being reviewed and tested from our side. Let us know of any issues asap, TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2029265</commentid>
    <comment_count>14</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-11-21 06:04:11 -0500</bug_when>
    <thetext>While discussing with Srikanth, he has pointed out that I haven&apos;t taken care of reporting a build error/warning/info when the index file attribute is wrong or not present or corrupt.
Should the classpath validator report a warning or should there be a different API to tell whether the index file looks good?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2029311</commentid>
    <comment_count>15</comment_count>
    <who name="Deepak Azad">deepakazad</who>
    <bug_when>2011-11-21 06:56:01 -0500</bug_when>
    <thetext>Satyam, a couple of nit picks about usage of the command line application which you specified as

&quot;
Usage: eclipse -application org.eclipse.jdt.core.JavaCodeGenerateIndex [ OPTIONS ] -output &lt;indexFile&gt; &lt;jarfile&gt;

   -output &lt;indexFile&gt; The index file to be generated.
   &lt;jarfile&gt;   Jar file for which index needs to be generated.
&quot;

1. Since the output file is specified via -output option, I assumed that there would be a default behavior in case this is not specified, i.e. an index file would be created in the same location as the jar file. Is it possible to have this default behavior?

2. There is no success message once the application is run. If I specify verbose option I get a &apos;Generating Index .... &quot; however a similar message should also be there when verbose option is not specified.

3. When an index file already exists, it is &apos;silently&apos; overwritten. I suppose this is deliberate?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2029317</commentid>
    <comment_count>16</comment_count>
    <who name="Deepak Azad">deepakazad</who>
    <bug_when>2011-11-21 07:10:24 -0500</bug_when>
    <thetext>(In reply to comment #7)
&gt; I think this sounds good.  In our case, we have a WST server target which
&gt; defines many jars.  If these jars can be pre-indexed, we&apos;ll get a big boost in
&gt; performance.  It sounds like we should be able to:
&gt; - generate these index files before shipping our product
&gt; - ensure that the classpath containers point to the index files (which would be
&gt; plugin resource URLs).  Is this true?  Can I set up index file references for a
&gt; classpath container?

(In reply to comment #9)
&gt; (In reply to comment #7)
&gt; Grant, Thanks for your comments.
&gt; You should be able to specify the index file from a classpath container.

Wouldn&apos;t a better/right solution be to have an extension point similar to the ones for Javadoc and source attachments
- http://help.eclipse.org/indigo/index.jsp?topic=%2Forg.eclipse.pde.doc.user%2Freference%2Fextension-points%2Forg_eclipse_pde_core_javadoc.html
- http://help.eclipse.org/indigo/index.jsp?topic=%2Forg.eclipse.pde.doc.user%2Freference%2Fextension-points%2Forg_eclipse_pde_core_source.html</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2029352</commentid>
    <comment_count>17</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2011-11-21 08:16:37 -0500</bug_when>
    <thetext>(In reply to comment #14)
&gt; While discussing with Srikanth, he has pointed out that I haven&apos;t taken care of
&gt; reporting a build error/warning/info when the index file attribute is wrong or
&gt; not present or corrupt.
&gt; Should the classpath validator report a warning or should there be a different
&gt; API to tell whether the index file looks good?

A wrong index results in very bad behavior of the whole IDE and hence needs to be reported to the user. I&apos;d says this should be reported as build path problem.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2029374</commentid>
    <comment_count>18</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2011-11-21 08:42:25 -0500</bug_when>
    <thetext>&gt; Wouldn&apos;t a better/right solution be to have an extension point similar to the
&gt; ones for Javadoc and source attachments
&gt; -
&gt; http://help.eclipse.org/indigo/index.jsp?topic=%2Forg.eclipse.pde.doc.user%2Freference%2Fextension-points%2Forg_eclipse_pde_core_javadoc.html
&gt; -
&gt; http://help.eclipse.org/indigo/index.jsp?topic=%2Forg.eclipse.pde.doc.user%2Freference%2Fextension-points%2Forg_eclipse_pde_core_source.html

I *think* this is the old way for providing the source and no longer in use. We now normally ship the source in a bundle called &lt;bundleName&gt; + &quot;.source.&quot; + &lt;version&gt; + &quot;.jar&quot; and the manifest of the source bundle has something like:

Eclipse-SourceBundle: &lt;bundleName&gt;;version=&quot;&lt;version&gt;&quot;;roots:=&quot;.&quot;

Curtis, please correct me if I&apos;m wrong. PDE needs to provide a similar mechanism for the index.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2029748</commentid>
    <comment_count>19</comment_count>
    <who name="Curtis Windatt">cwindatt</who>
    <bug_when>2011-11-21 13:44:05 -0500</bug_when>
    <thetext>(In reply to comment #18)
&gt; I *think* this is the old way for providing the source and no longer in use. We
&gt; now normally ship the source in a bundle called &lt;bundleName&gt; + &quot;.source.&quot; +
&gt; &lt;version&gt; + &quot;.jar&quot; and the manifest of the source bundle has something like:
&gt; 
&gt; Eclipse-SourceBundle: &lt;bundleName&gt;;version=&quot;&lt;version&gt;&quot;;roots:=&quot;.&quot;
&gt; 
&gt; Curtis, please correct me if I&apos;m wrong. PDE needs to provide a similar
&gt; mechanism for the index.

Yes, source is now provided by generated source bundles which have an OSGi bundle structure but use that header to specify the source roots and what they provide source for.

Bug 364290 covers adding support for this in the PDE classpath container, but the discussion on how to contribute the index belongs here.  Couple of questions:

- Does the ant task produce individual files for each jar?  Is there any way an index file will belong to more than one jar?

- Are we expecting index files to typically be included inside the binary jars, in the source jars or independently?

PDE wants to address our side of this in M5.  As there won&apos;t be PDE Build support for index generation or creating a custom manifest header I&apos;m not sure where the process for contributing will be specified.  If a custom header is used, when we read the bundles of the target platform we will store the information and later add it to the classpath entry similar to how we specify source or javadoc locations.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2029984</commentid>
    <comment_count>20</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-11-21 23:05:42 -0500</bug_when>
    <thetext>&gt; 1. Since the output file is specified via -output option, I assumed that there
&gt; would be a default behavior in case this is not specified, i.e. an index file
&gt; would be created in the same location as the jar file. Is it possible to have
&gt; this default behavior?
Users would have to do something with the generated index file and hence I thought it will be better to force them to specify it. Otherwise, I am fine to do this. If we do that I think it can be location of the jar file itself and may be the jarname appended with index could do. 
&gt; 
&gt; 2. There is no success message once the application is run. If I specify
&gt; verbose option I get a &apos;Generating Index .... &quot; however a similar message
&gt; should also be there when verbose option is not specified.
I think this should behave something like javac and hence it better not generate. At the same time, I think verbose should be improved. 
&gt; 
&gt; 3. When an index file already exists, it is &apos;silently&apos; overwritten. I suppose
&gt; this is deliberate?
Yes and I think this is OK, again taking inspiration from javac.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2029985</commentid>
    <comment_count>21</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-11-21 23:07:38 -0500</bug_when>
    <thetext>(In reply to comment #17)
&gt; (In reply to comment #14)
&gt; &gt; While discussing with Srikanth, he has pointed out that I haven&apos;t taken care of
&gt; &gt; reporting a build error/warning/info when the index file attribute is wrong or
&gt; &gt; not present or corrupt.
&gt; &gt; Should the classpath validator report a warning or should there be a different
&gt; &gt; API to tell whether the index file looks good?
&gt; 
&gt; A wrong index results in very bad behavior of the whole IDE and hence needs to
&gt; be reported to the user. I&apos;d says this should be reported as build path
&gt; problem.
Sorry, I didn&apos;t mention that in this case the indexer will generate the index file and use it and hence there will be loss of performance but no change in search results.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2029990</commentid>
    <comment_count>22</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-11-21 23:42:35 -0500</bug_when>
    <thetext>
&gt; - Does the ant task produce individual files for each jar?  Is there any way an
&gt; index file will belong to more than one jar?

Yes, this provides individual files for each jar. No, there is 1-1 mapping between a jar and the index file. 
&gt; 
&gt; - Are we expecting index files to typically be included inside the binary jars,
&gt; in the source jars or independently?
I think this could go in the source jar or be independent but not in the binary jar. 

I haven&apos;t done yet but I am contemplating putting some signature in the index file which could tell if the index file is generated from a different jar file. If this is done, the index files cannot be part of the binary jar.  

&gt; 
&gt; PDE wants to address our side of this in M5.  As there won&apos;t be PDE Build
&gt; support for index generation or creating a custom manifest header I&apos;m not sure
&gt; where the process for contributing will be specified.  If a custom header is
&gt; used, when we read the bundles of the target platform we will store the
&gt; information and later add it to the classpath entry similar to how we specify
&gt; source or javadoc locations.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2030672</commentid>
    <comment_count>23</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-23 04:12:53 -0500</bug_when>
    <thetext>I am part way through the review and even as I go through the
rest of the files, here are some review comments for you to
chew on:

I. The changes in

org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaSearchScopeTests.java
org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/RunJavaSearchTests.java
org.eclipse.jdt.core/META-INF/MANIFEST.MF
org.eclipse.jdt.core/antadapter/org/eclipse/jdt/internal/antadapter/messages.properties
org.eclipse.jdt.core/build.properties
org.eclipse.jdt.core/plugin.xml
org.eclipse.jdt.core/model/org/eclipse/jdt/core/IPackageFragmentRoot.java
org.eclipse.jdt.core/model/org/eclipse/jdt/core/IClasspathAttribute.java

look ok.

II. Here are some comments:

org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/util/Util.java:

(1)	The current call stacks are using external paths only, but should we
conservatively include the call to path.replace(&apos;\\&apos;, &apos;/&apos;) as done in other
Util.zipFiles methods ?

(2) What explains the absence of try-finally in this method compared to
org.eclipse.jdt.core.tests.util.Util.zip(File, String) ? 

org.eclipse.jdt.core/antadapter/org/eclipse/jdt/core/BuildJarIndex.java

(3) javadoc: introduce a blank line above @since.
(4) what is the setProject(getProject()); doing ? Is this a cut &amp; paste issue ?

org.eclipse.jdt.core/search/org/eclipse/jdt/core/index/JavaIndexer.java
(5) Provide Javadoc (as acknowledged in TODO)

org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/DefaultJavaIndexer.java

(6) FileNotFoundException ctor call missing white spaces.
(7) Is the condition in if below always true ? 

	if (org.eclipse.jdt.internal.compiler.util.Util.isClassFileName(entryDocument.getPath())) {
		new BinaryIndexer(entryDocument).indexDocument();
	}
I could not see how it can be false.
(8) Also why is one isClassFileName call fully qualified while the other is not ? 
(9) Is the field JAR_SEPARATOR really needed ?

org.eclipse.jdt.core/search/org/eclipse/jdt/core/index/JavaIndexerApplication.java
(10) Fix javadoc (as acknowledged in TODO)
(11) org.eclipse.jdt.core.index.JavaIndexerApplication.displayHelp() would
print wrong application name ?
(12) There is a mix of System.err.println and System.out.println - 
is this intentional ?
(13) Messages.CommandLineProcessing: arguments are passed in the wrong order.
Do we have tests to elicit the various messages ?
(14) CommandLineOnlyOutputError is better renamed CommandLineOnlyOneOutputError
(15) If the jar file does not exist, we will print a message but will
continue to attempt to index it ? 
(16) if (this.indexFile != null || index == argCount) {
	displayError(Messages.bind(Messages.CommandLineOnlyOutputError));
	return false;
     }
block would generate &quot;Only one jar file need to be specified&quot; if
-output is the last token in the command line ?

org.eclipse.jdt.core/search/org/eclipse/jdt/core/index/messages.properties
(17) &quot;need to be specified&quot; should be &quot;needs to be specified&quot; (in 2 places)

org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/PackageFragmentRoot.java
(18) org.eclipse.jdt.core.IPackageFragmentRoot.getIndexPath() is declared to
throw JME, while org.eclipse.jdt.internal.core.PackageFragmentRoot.getIndexPath()
deliberately drops the exception. Is this intentional ?

org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathEntry.java
(19) extra attrributes could be null ? I see some of the old code guarding for
null and at other places not - so may be it is safe.
(20) getLibraryIndexLocation: Can this silently swallow malformed urls ?
(21) Please get rid of the noise change at the end of the file.

III. I am yet to review the following files:

org.eclipse.jdt.core/model/org/eclipse/jdt/core/IJavaElementDelta.java
org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathChange.java
org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java
org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElementDelta.java
org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchParticipant.java
org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java
org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/FlatFileIndex.java
org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/Index.java
org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/IndexLocation.java
org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/JarEntryIndex.java
org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/IndexSelector.java
org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchParticipant.java
org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/PatternSearchJob.java
org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/AddJarFileToIndex.java
org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexAllProject.java
org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexBinaryFolder.java
org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java
org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaIndexTests.java

After I finish all, I&apos;ll share overall comments.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2031328</commentid>
    <comment_count>24</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-24 04:57:29 -0500</bug_when>
    <thetext>Hi Satyam,

Here is another of comments:

These files:
org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexBinaryFolder.java
org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexAllProject.java
org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/IndexLocation.java
org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/JarEntryIndex.java
org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/FlatFileIndex.java
org.eclipse.jdt.core/search/org/eclipse/jdt/core/search/SearchParticipant.java
org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/JavaSearchParticipant.java
org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/IndexSelector.java

look ok.


Comments:
---------
org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/AddJarFileToIndex.java
(22) org.eclipse.jdt.internal.core.search.indexing.AddJarFileToIndex.execute(IProgressMonitor)
when we fall back and regenerate the index, we do it silently, should be report/log here ?

org.eclipse.jdt.core/model/org/eclipse/jdt/core/IJavaElementDelta.java
org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/JavaElementDelta.java
(23) Do we need these new deltas at all ? Who would be the listeners to
these &quot;index attached&quot; and &quot;index detached&quot; deltas and what do we think
they will do with these ? 


I still need to review the following:

org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathChange.java
org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java

org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java
org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/Index.java

org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/PatternSearchJob.java
org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java
org.eclipse.jdt.core.tests.model/src/org/eclipse/jdt/core/tests/model/JavaIndexTests.java

(a) I am still trying to wrap my hands around this functionality and don&apos;t
have a full picture yet. After I finish with the remaining 7 files, I may
be in a better position (the caveat still being there that I am not familiar
with this area of JDT/Core)

(b) I think without delay, we should work towards validating the performance
objectives - Can you work with the requesting project so that you can gather
some numbers on their application so we know where we stand.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2031337</commentid>
    <comment_count>25</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-11-24 05:21:57 -0500</bug_when>
    <thetext>(In reply to comment #24)
&gt; (b) I think without delay, we should work towards validating the performance
&gt; objectives - Can you work with the requesting project so that you can gather
&gt; some numbers on their application so we know where we stand.
Grant, is it possible for you to use this patch and see it works and the performance is good?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2031364</commentid>
    <comment_count>26</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-24 06:17:03 -0500</bug_when>
    <thetext>(In reply to comment #25)
&gt; (In reply to comment #24)
&gt; &gt; (b) I think without delay, we should work towards validating the performance
&gt; &gt; objectives - Can you work with the requesting project so that you can gather
&gt; &gt; some numbers on their application so we know where we stand.
&gt; Grant, is it possible for you to use this patch and see it works and the
&gt; performance is good?

Please ask for any help you may need, Grant, Thanks for your help with this
exercise.

Independently, Satyam and I will put together some benchmarking scenarios
to see what the performance numbers look like. In particular, the current
implementation supports multiple packaging/shipping/distribution models.
While that may offer convenience to consumers of this capability, it is
not clear that the performance characteristics would be appealing across
the solutions: For example, we can support a zip file of index files, but
does it make sense from a performance point of view which after all is the
raison_d&apos;tre for this exercise, or are we better off generating the indexes
in the usual way. So, before we go any further, we need some data collected.
Stay tuned.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2031895</commentid>
    <comment_count>27</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-25 07:23:57 -0500</bug_when>
    <thetext>Here is the next batch of line level review comments:

org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/Index.java
Looks ok.

org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/DeltaProcessor.java

(24) Third diff in this file reads:

URL indexLocation = ((ClasspathEntry)entries[j]).getLibraryIndexLocation();
if (indexLocation != null) { // force reindexing, this could be faster rather than maintaining the list
	this.manager.indexManager.indexLibrary(entryPath, project.getProject(), ((ClasspathEntry)entries[j]).getLibraryIndexLocation());
}

Eliminate the latter call to getLibraryIndexLocation by reusing the result of the earlier call.

(25) 5th diff - Remove extra white spaces.

org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathChange.java

(26) Second diff marked &quot;TODO SATYAM: Shouldn&apos;t the check be opposite?&quot;
I agree this existing code looks suspicious. Please work with Jay to
understand this issue and raise a separate defects as needed.

(27) It is better to extract a local for the expression
(ClasspathEntry)newResolvedClasspath[i]) to avoid repeared array indexing
and dynamic casts.

org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/PatternSearchJob.java
(28) Fix white space: length =paths.length; should be length = paths.length;

org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/index/DiskIndex.java
(29) org.eclipse.jdt.internal.core.index.DiskIndex.readHeaderInfo(InputStream)
Line 802 changed from 
	if (size &gt; fileLength) {
to Line 808 after the patch which reads:
	if (length != -1 &amp;&amp; this.numberOfChunks &gt; length) {

This certainly looks like a bug. (should have been (size &gt; length))

org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/indexing/IndexManager.java
(30) Line 258 reads: 

    if (currentIndexState != REBUILDING_STATE || currentIndexState != REUSE_STATE) { // rebuild index if existing file is corrupt, unless the index is already being rebuilt

This looks wrong, as one or the other constituent conditions will always be true
Should this be:

    if (currentIndexState != REBUILDING_STATE &amp;&amp; currentIndexState != REUSE_STATE) { // rebuild index if existing file is corrupt, unless the index is already being rebuilt

(31) In org.eclipse.jdt.internal.core.search.indexing.IndexManager.removeIndexPath(IPath)
a call to indexFile.exists() seems to have been deleted. Is this inadvertant or intentional ?

(32) The last change in org.eclipse.jdt.internal.core.search.indexing.IndexManager.removeIndexPath(IPath)
looks structurally different from the version prior to patch - is this intentional ?

(33) org.eclipse.jdt.internal.core.search.indexing.IndexManager.scheduleDocumentIndexing(SearchDocument, IPath, IndexLocation, SearchParticipant)
Fold the two lines:

Index index;
index = getIndex(this.containerPath, indexLocation, true, /*reuse index file*/ true /*create if none*/);

into one line as before.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2031896</commentid>
    <comment_count>28</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-25 07:26:13 -0500</bug_when>
    <thetext>I have only one file JavaIndexTests.java which has all the new tests
for this feature left. After I finish with that early next week, I&apos;ll
summarize my overall views/observations.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2031900</commentid>
    <comment_count>29</comment_count>
    <who name="Deepak Azad">deepakazad</who>
    <bug_when>2011-11-25 07:35:18 -0500</bug_when>
    <thetext>(In reply to comment #27)
&gt; (25) 5th diff - Remove extra white spaces.
&gt; 
&gt; org.eclipse.jdt.core/model/org/eclipse/jdt/internal/core/ClasspathChange.java
&gt; (33)
&gt; org.eclipse.jdt.internal.core.search.indexing.IndexManager.scheduleDocumentIndexing(SearchDocument,
&gt; IPath, IndexLocation, SearchParticipant)
&gt; Fold the two lines:
&gt; 
&gt; Index index;
&gt; index = getIndex(this.containerPath, indexLocation, true, /*reuse index file*/
&gt; true /*create if none*/);
&gt; 
&gt; into one line as before.

Don&apos;t you guys use common formatter settings and have Save Actions enabled to auto format edited lines? Just saying...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2032036</commentid>
    <comment_count>30</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-11-25 11:41:58 -0500</bug_when>
    <thetext>Srikanth, 
Thanks for your detailed review. I agree with many of the comments. 
(In reply to comment #23)
&gt; (9) Is the field JAR_SEPARATOR really needed ?
It is not required in this path, but I think it is better to keep.


&gt; (12) There is a mix of System.err.println and System.out.println - 
&gt; is this intentional ?
 What should be the right thing to do? Should error&apos;s go in System.err and messages go in System.out? Should everything go in System.out?


&gt; (13) Messages.CommandLineProcessing: arguments are passed in the wrong order.
Actually this is correct except the order is confusing. I have fixed this though. 


&gt; (18) org.eclipse.jdt.core.IPackageFragmentRoot.getIndexPath() is declared to
&gt; throw JME, while
&gt; org.eclipse.jdt.internal.core.PackageFragmentRoot.getIndexPath()
&gt; deliberately drops the exception. Is this intentional ?
Not intentional, changed at one place but forgot the other place. 

&gt; (20) getLibraryIndexLocation: Can this silently swallow malformed urls ?
This is internal function and it better swallow. Will try to add some verbose. 

&gt; (23) Do we need these new deltas at all ? Who would be the listeners to
&gt; these &quot;index attached&quot; and &quot;index detached&quot; deltas and what do we think
&gt; they will do with these ? 
We probably don&apos;t need the deltas. Removing them as of now. Will add when we feel necessary. 

&gt; 
&gt; (31) In
&gt; org.eclipse.jdt.internal.core.search.indexing.IndexManager.removeIndexPath(IPath)
&gt; a call to indexFile.exists() seems to have been deleted. Is this inadvertant or
&gt; intentional ?
Yes it is intentional, because exists() is costly for the one in jar. and probably not necessary too. 

&gt; 
&gt; (32) The last change in
&gt; org.eclipse.jdt.internal.core.search.indexing.IndexManager.removeIndexPath(IPath)
&gt; looks structurally different from the version prior to patch - is this
&gt; intentional ?
Yes, the earlier code is not correct and hence.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2032039</commentid>
    <comment_count>31</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-11-25 11:45:18 -0500</bug_when>
    <thetext>(In reply to comment #26)
&gt; Independently, Satyam and I will put together some benchmarking scenarios
&gt; to see what the performance numbers look like. In particular, the current
&gt; implementation supports multiple packaging/shipping/distribution models.
&gt; While that may offer convenience to consumers of this capability, it is
&gt; not clear that the performance characteristics would be appealing across
&gt; the solutions: For example, we can support a zip file of index files, but
&gt; does it make sense from a performance point of view which after all is the
&gt; raison_d&apos;tre for this exercise, or are we better off generating the indexes
&gt; in the usual way. So, before we go any further, we need some data collected.
&gt; Stay tuned.
I have tried some tests which seem to tell that there is no performance impact. I still need to run some more tests to confirm that.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2032206</commentid>
    <comment_count>32</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-25 18:36:20 -0500</bug_when>
    <thetext>(In reply to comment #30)

&gt; &gt; (12) There is a mix of System.err.println and System.out.println - 
&gt; &gt; is this intentional ?
&gt;  What should be the right thing to do? Should error&apos;s go in System.err and
&gt; messages go in System.out? Should everything go in System.out?

Any reasoned approach (may be the current one already is) as opposed to 
inadvertent mixed usage is fine.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2032207</commentid>
    <comment_count>33</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-25 18:42:53 -0500</bug_when>
    <thetext>(In reply to comment #31)

[...]

&gt; I have tried some tests which seem to tell that there is no performance impact.
&gt; I still need to run some more tests to confirm that.

While initial experiments show that there is no search performance
degradation while using a jar of index files, just to convince
ourselves we are not violating some laws of thermodynamics or laws
against time travel and such, we will work with the requesting
project to get some voluminous jars and devise some searches that
would use index data from the beginning, middle and end of the zipped
stream to gauge the best case, average case and worst case times and
compare the times against the search done against a plain vanilla index
file.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2032210</commentid>
    <comment_count>34</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-25 18:53:29 -0500</bug_when>
    <thetext>Deepak, I presume some high level operations in the UI such as refactoring,
result in multiple searches being performed for a single high level operation.

Can you suggest some suitable operation that would result in a stream of
searches being done against a binary package fragment root, so that it
can be used as a benchmarking scenario ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2032213</commentid>
    <comment_count>35</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-25 19:22:40 -0500</bug_when>
    <thetext>(In reply to comment #5)

&gt; So the &quot;index_location&quot; should either support specifying the location relative
&gt; (eg relative to the plugin root, or relative to the JAR being indexed; Javadocs
&gt; would need to specify what it is relative to) or some sort of variable
&gt; substitution mechanism is needed.

Satyam, was this part addressed in the patch ? The javadoc isn&apos;t for sure and
I don&apos;t recall whether the implementation supports relative location specification.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2032216</commentid>
    <comment_count>36</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-25 19:43:34 -0500</bug_when>
    <thetext>(In reply to comment #31)

&gt; I have tried some tests which seem to tell that there is no performance impact.
&gt; I still need to run some more tests to confirm that.

I was under the assumption that jar file automatically implies compressed data,
turns out this is not true. So in these experiments, was there compression involved ? In our experiments, let us make sure we include both the compressed
and uncompressed archives.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2032432</commentid>
    <comment_count>37</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-27 23:14:41 -0500</bug_when>
    <thetext>The current plan is to complete the review, testing and performance
characterizations over the next two weeks and release this for the
first integration build past M4. 

Changing target milestone accordingly.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2032437</commentid>
    <comment_count>38</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-27 23:59:14 -0500</bug_when>
    <thetext>Comments on JavaIndexTests:

(34) Comment above testDeleteIndexedFile() is not clear about what it
is supposed to test.
(35) testNonExistentIndex() : In these kind of scenarios, what should
be our strategy ? should we issue a warning/info message that the index
file referenced by the class path entry is missing ? Should we log this ?
Currently we are silently recovering - is this what we want ? 
(36) Fix comment above testDeleteProject()
(37) In this file and in all files in general, complete TODO items.

That completes the line level review.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2032447</commentid>
    <comment_count>39</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-28 01:44:47 -0500</bug_when>
    <thetext>Overall, I didn&apos;t find any major issues as such, here are some observations:

(1) We should make very careful performance characterizations for the case
where the index file appears as a compressed entity in a jar file to make sure
that search performance is not degraded. We should devise experiments against
large, real life jars (Grant is helping here - Thanks) that &quot;touch&quot; various
parts of the jar to make assessments of average and worst case measurements.

(2) The experiments should also involve high level operations that translate
into a stream of consults against the compressed index file and preferably
touch different parts of the index file.

(3) It appears the model where the index files appear as entries in a 
folder would be the best case win-win situation from a indexing and searching
point of view. But supporting only this would mean we don&apos;t enable some
natural use cases such as index files being packaged inside the source jar
or the binary jar itself. I would like to hear what the stake holders think
about supporting such a folder only model. (Of course this becomes a moot
point if experiments show there is no major degradation)

(4) The code change is fairly complex with the meat of the implementation
interspersed with &quot;supporting changes&quot; which resulted from some types being
refactored (IPath -&gt; IndexLocation, FileInputStream -&gt; InputStream). These
supporting changes are so pervasive that the signal to noise ratio is adversely
impacted and it is difficult to form a clear opinion about the correctness
and completeness about the implementation.

(5) It appears much of the implementation complexity arises from supporting
index files inside jars. If we do go ahead with the full scope of what has
been prototyped, I would recommend splitting the patch into core + supporting
changes + tests so that just the core set of changes can be reviewed quickly
in another pass.

(6) Should the class path validation step validate the existence of the
index file and issue info/warning if something is amiss.

(7) What about the cases where the index file generation/version information
is different from the one supported by JDT/Core ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2033135</commentid>
    <comment_count>40</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-11-29 06:20:43 -0500</bug_when>
    <thetext>(In reply to comment #35)
&gt; (In reply to comment #5)
&gt; 
&gt; &gt; So the &quot;index_location&quot; should either support specifying the location relative
&gt; &gt; (eg relative to the plugin root, or relative to the JAR being indexed; Javadocs
&gt; &gt; would need to specify what it is relative to) or some sort of variable
&gt; &gt; substitution mechanism is needed.
&gt; 
&gt; Satyam, was this part addressed in the patch ? The javadoc isn&apos;t for sure and
&gt; I don&apos;t recall whether the implementation supports relative location
&gt; specification.
As it supports the platform url specification, relative to plugin root and  relative to project will be supported, but not relative to an external jar.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2033652</commentid>
    <comment_count>41</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-29 21:45:23 -0500</bug_when>
    <thetext>(In reply to comment #39)

&gt; (3) It appears the model where the index files appear as entries in a 
&gt; folder would be the best case win-win situation from a indexing and searching
&gt; point of view. But supporting only this would mean we don&apos;t enable some
&gt; natural use cases such as index files being packaged inside the source jar
&gt; or the binary jar itself. I would like to hear what the stake holders think
&gt; about supporting such a folder only model. (Of course this becomes a moot
&gt; point if experiments show there is no major degradation)

[...]

&gt; (5) It appears much of the implementation complexity arises from supporting
&gt; index files inside jars.

[...]

In informal chat with the requesting project (represented by Grant), it emerged
that for their project, they would only be shipping index files as folder
entries i.e not inside jars.

Grant, for posterity&apos;s sake, please confirm/record here your project&apos;s preferences
and the rationale.

Dani, Markus, Curtis (even as we wait for performance data), any strong
feelings , for/against jars with compressed index files as constituents ?

We need to finalize on this by this week preferably.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2033677</commentid>
    <comment_count>42</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-11-30 01:06:28 -0500</bug_when>
    <thetext>(In reply to comment #33)
&gt; While initial experiments show that there is no search performance
&gt; degradation while using a jar of index files, just to convince
&gt; ourselves we are not violating some laws of thermodynamics or laws
&gt; against time travel and such, we will work with the requesting
&gt; project to get some voluminous jars and devise some searches that
&gt; would use index data from the beginning, middle and end of the zipped
&gt; stream to gauge the best case, average case and worst case times and
&gt; compare the times against the search done against a plain vanilla index
&gt; file.
I have run the tests with some big jars and could not see any degradation or improvement by using the jar for index files. While trying to understand the rationale behind this, I found that the compressed jars will need lesser IO and hence reading could be faster. Well, I could not see a performance benefit either :(. However, this explains that there should not be a loss in performance.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2033678</commentid>
    <comment_count>43</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-11-30 01:08:00 -0500</bug_when>
    <thetext>As we think we can keep the performance issue at bay, I could see one more point to consider the decision. 
 Shipping Indexes in jar could be easier and could take lesser space. For eg: An index file for a big jar takes around 12MB, when compressed in a jar takes only 5MB. This probably is not an issue as generally the whole product will be zipped.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2033684</commentid>
    <comment_count>44</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-30 01:40:09 -0500</bug_when>
    <thetext>(In reply to comment #42)
&gt; (In reply to comment #33)
&gt; &gt; While initial experiments show that there is no search performance
&gt; &gt; degradation while using a jar of index files, just to convince
&gt; &gt; ourselves we are not violating some laws of thermodynamics or laws
&gt; &gt; against time travel and such, we will work with the requesting
&gt; &gt; project to get some voluminous jars and devise some searches that
&gt; &gt; would use index data from the beginning, middle and end of the zipped
&gt; &gt; stream to gauge the best case, average case and worst case times and
&gt; &gt; compare the times against the search done against a plain vanilla index
&gt; &gt; file.
&gt; I have run the tests with some big jars and could not see any degradation or
&gt; improvement by using the jar for index files. While trying to understand the
&gt; rationale behind this, I found that the compressed jars will need lesser IO and
&gt; hence reading could be faster. Well, I could not see a performance benefit
&gt; either :(. However, this explains that there should not be a loss in
&gt; performance.

There seems to be quite a bit of anecdotal evidence if you go by various
forums, community discussion boards etc to suggest that compressed jars need
not imply performance degradation and based on the CPU, I/O and other
configuration parameters may actually translate into performance improvement.
See the thread http://dev.eclipse.org/mhonarc/lists/platform-core-dev/msg00691.html for some historic discussion on this topic in eclipse&apos;
very own mailing lists. Will dig up the references cited there and see what
comes up.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2033761</commentid>
    <comment_count>45</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2011-11-30 04:39:46 -0500</bug_when>
    <thetext>&gt; Dani, Markus, Curtis (even as we wait for performance data), any strong
&gt; feelings , for/against jars with compressed index files as constituents ?

I think we should support to ship it as archive. If it&apos;s easier for us to process a folder, we can still extract it to a folder on first access.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2033799</commentid>
    <comment_count>46</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-30 06:21:17 -0500</bug_when>
    <thetext>(In reply to comment #44)
&gt; (In reply to comment #42)
&gt; &gt; (In reply to comment #33)

[...]

&gt; &gt; hence reading could be faster. Well, I could not see a performance benefit
&gt; &gt; either :(. However, this explains that there should not be a loss in
&gt; &gt; performance.

[...]

&gt; very own mailing lists. Will dig up the references cited there and see what
&gt; comes up.

I dug up my copy of &quot;Java Performance Tuning&quot; by Jack Shirazi- there isn&apos;t a
whole lot more than what we have discussed here: basically improvements result
from the need for several open/close operations being obviated.

Also the point Satyam made earlier about volume of I/O being reduced due to
compression also helps some cases based on configuration.

In summary, our experiments so far show that compressed indexes inside jars
can be viably supported.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2033879</commentid>
    <comment_count>47</comment_count>
    <who name="Grant Taylor">gdtaylor</who>
    <bug_when>2011-11-30 09:15:39 -0500</bug_when>
    <thetext>&gt;&gt;Grant, for posterity&apos;s sake, please confirm/record here your project&apos;s preferences and the rationale.

Our product primarily wants to use this feature for our server target classpath container.  The jars for this container come from the a different team than the Eclipse tooling.  We have two cases as well: the server target classpath container may point to a real local server, or &quot;stubs&quot; that represent the APIs of a server.  In both cases, we don&apos;t want to change the actual jars.  For the stubs, the reason is mainly organizational.  A different team creates these and they are not responsible for things like tooling performance.  For a stand-alone server, packing indexes in the Jars would cause every server install to be larger, even if it&apos;s not being pointed to by our tooling.

Hence, our usage of this feature will be to pre-create the indexes for the known targets (stubs, server v1.0, server, v1.1, etc) and add register the index files with the classpath container.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2033902</commentid>
    <comment_count>48</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-11-30 09:38:17 -0500</bug_when>
    <thetext>(In reply to comment #47)
&gt; &gt;&gt;Grant, for posterity&apos;s sake, please confirm/record here your project&apos;s preferences and the rationale.
&gt; 
&gt; Our product primarily wants to use this feature for our server target classpath
&gt; container.  The jars for this container come from the a different team than the
&gt; Eclipse tooling.  We have two cases as well: the server target classpath
&gt; container may point to a real local server, or &quot;stubs&quot; that represent the APIs
&gt; of a server.  In both cases, we don&apos;t want to change the actual jars.  For the
&gt; stubs, the reason is mainly organizational.  A different team creates these and
&gt; they are not responsible for things like tooling performance.  For a
&gt; stand-alone server, packing indexes in the Jars would cause every server
&gt; install to be larger, even if it&apos;s not being pointed to by our tooling.
&gt; 
&gt; Hence, our usage of this feature will be to pre-create the indexes for the
&gt; known targets (stubs, server v1.0, server, v1.1, etc) and add register the
&gt; index files with the classpath container.
Grant, Thanks for your reply. I think there is a slight misunderstanding. To make sure we are on in the same page, we don&apos;t mean the index should go in to the actual jar, but we do mean that the indexes could be packaged into any jar, may be a special jar which could just include a group of indexes.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2033911</commentid>
    <comment_count>49</comment_count>
    <who name="Grant Taylor">gdtaylor</who>
    <bug_when>2011-11-30 09:50:26 -0500</bug_when>
    <thetext>Ok, I understand.  So my comment, obviously, was that we don&apos;t want the indexes packaged with the jars that contain the indexes classes.

As for flat files vs jars for separately packaged indexes, I would say that ideally we&apos;d package the flat files in a jar&apos;d plugin.  I&apos;m not sure if this would be supported.  If not, I don&apos;t think it&apos;s a big deal for us to ship a new, unjar&apos;d plugin that only contains the index files (jar&apos;d or flat).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2035016</commentid>
    <comment_count>50</comment_count>
      <attachid>207847</attachid>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-12-02 10:11:08 -0500</bug_when>
    <thetext>Created attachment 207847
Patch with core changes (without index in jar support)

Srikanth, Here is the first part of the patch. This patch is without the support for the index in a jar.
  - Incorporated much of the review components
  - Removed the getIndexPath() from IPackageFragmentRoot. Basically there is no API as of now. I will incorporate it anybody wants it.
  - This patch doesn&apos;t validate the class path as such. Filed bug 365446 to take care of this part.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2035462</commentid>
    <comment_count>51</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-04 23:40:27 -0500</bug_when>
    <thetext>(In reply to comment #13)
&gt; (In reply to comment #11)
&gt; &gt; (In reply to comment #10)
&gt; &gt; I still have to improve in the Javadocs and comments. Jay, please review.
&gt; 
&gt; All stake holders, you are welcome for an early test drive even as this patch
&gt; is being reviewed and tested from our side. Let us know of any issues asap,
&gt; TIA.

We have confirmation from the requesting team that they have tested the patch
in both the indexes-in-a-folder-mode and compressed-indexes-in-a-jar mode
and that performance improvements are inline with expectations.

So this feature looks ready for release for next week&apos;s integration build
after M4 is out of the way.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2037500</commentid>
    <comment_count>52</comment_count>
      <attachid>208084</attachid>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-12-07 23:47:08 -0500</bug_when>
    <thetext>Created attachment 208084
Patch for supporting the index file in a jar

Here is the second part of the jar which has support for the index file to be in the jar.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2037689</commentid>
    <comment_count>53</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-08 08:26:35 -0500</bug_when>
    <thetext>(In reply to comment #50)
&gt; Created attachment 207847 [details]
&gt; Patch with core changes (without index in jar support)
&gt; 
&gt; Srikanth, Here is the first part of the patch. This patch is without the
&gt; support for the index in a jar.
&gt;   - Incorporated much of the review components
&gt;   - Removed the getIndexPath() from IPackageFragmentRoot. Basically there is no
&gt; API as of now. I will incorporate it anybody wants it.
&gt;   - This patch doesn&apos;t validate the class path as such. Filed bug 365446 to
&gt; take care of this part.

Satyam, thanks a lot for breaking down the patches - it made the job of
reviewing these core set of changes a lot easier.

The changes look good.

One comment: Could you restore your first cut of changes to
org.eclipse.jdt.internal.core.ClasspathChange.requestIndexing() from
the https://bugs.eclipse.org/bugs/attachment.cgi?id=207155 rather
than go with the revised version you have in this patch.

Your first cut changes to this method are much more readable
and provable to a reviewer&apos;s satisfaction than this latest
version.

(Remember to get rid of the TODO of course.)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2038175</commentid>
    <comment_count>54</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-08 22:51:12 -0500</bug_when>
    <thetext>(In reply to comment #51)
&gt; (In reply to comment #13)
&gt; &gt; (In reply to comment #11)
&gt; &gt; &gt; (In reply to comment #10)
&gt; &gt; &gt; I still have to improve in the Javadocs and comments. Jay, please review.
&gt; &gt; 
&gt; &gt; All stake holders, you are welcome for an early test drive even as this patch
&gt; &gt; is being reviewed and tested from our side. Let us know of any issues asap,
&gt; &gt; TIA.
&gt; 
&gt; We have confirmation from the requesting team that they have tested the patch
&gt; in both the indexes-in-a-folder-mode and compressed-indexes-in-a-jar mode
&gt; and that performance improvements are inline with expectations.
&gt; 
&gt; So this feature looks ready for release for next week&apos;s integration build
&gt; after M4 is out of the way.

Satyam, we should ask the requesting project to not tear down any setup they 
have invested in to validate this, as we will ask for a revalidation after it
released and an integration build becomes available.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2038176</commentid>
    <comment_count>55</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-08 22:57:22 -0500</bug_when>
    <thetext>(In reply to comment #53)

&gt; The changes look good.

A further editorial comment that we should not piggy back fixes for unconnected
issues discovered during implementation.

The current patch has 3-4 such fixes. It is terrific that these issues are being
discovered, but let us keep the separate concerns separate in future to simplify
the review process as well future exercise in software archaeology.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2038388</commentid>
    <comment_count>56</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-09 08:17:15 -0500</bug_when>
    <thetext>(In reply to comment #52)
&gt; Created attachment 208084 [details]
&gt; Patch for supporting the index file in a jar
&gt; 
&gt; Here is the second part of the jar which has support for the index file to be
&gt; in the jar.

Thanks, this patch looks good. After incorporating the comment about 
requestIndexing (see comment#53) and retesting, let us target to release
it early next week.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2039243</commentid>
    <comment_count>57</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-12-12 07:29:21 -0500</bug_when>
    <thetext>Released on HEAD through commit 47da1e1f50b1360a7b560d74dfe1c60303fec552</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2049333</commentid>
    <comment_count>58</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2012-01-12 04:04:38 -0500</bug_when>
    <thetext>Do we have some example JARs and indices somewhere? If not, please create some and attach them here so that the UI can be tested.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2049334</commentid>
    <comment_count>59</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2012-01-12 04:05:30 -0500</bug_when>
    <thetext>(In reply to comment #58)
&gt; Do we have some example JARs and indices somewhere? If not, please create some
&gt; and attach them here so that the UI can be tested.

Sorry, this was meant for bug 364287.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2055863</commentid>
    <comment_count>60</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-01-25 08:37:44 -0500</bug_when>
    <thetext>Verified for 3.8M5 using build I20120122-2000</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2058514</commentid>
    <comment_count>61</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-31 05:39:17 -0500</bug_when>
    <thetext>Grant et al, this feature has been released in 3.8 M5 available
at http://download.eclipse.org/eclipse/downloads/drops/S-3.8M5-201201251800/index.php.

Thanks for testing this from an end user standpoint. Please raise
fresh defects for any issues found. Thanks.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>205241</attachid>
            <date>2011-10-14 23:18:00 -0400</date>
            <delta_ts>2011-11-21 05:59:17 -0500</delta_ts>
            <desc>First cut</desc>
            <filename>patch.txt</filename>
            <type>text/plain</type>
            <size>48926</size>
            <attacher name="Satyam Kandula">satyam.kandula</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9tb2RlbC9KYXZhU2VhcmNoU2NvcGVUZXN0cy5qYXZhIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rl
c3RzL21vZGVsL0phdmFTZWFyY2hTY29wZVRlc3RzLmphdmEKaW5kZXggZGViNzBmZC4uNTJhZjMx
NSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21vZGVsL0phdmFTZWFyY2hTY29wZVRlc3RzLmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9j
b3JlL3Rlc3RzL21vZGVsL0phdmFTZWFyY2hTY29wZVRlc3RzLmphdmEKQEAgLTEsNSArMSw1IEBA
CiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDA4IElC
TSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDExIElC
TSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBw
cm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxh
YmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAg
KiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBh
dApAQCAtMTAyNSw3ICsxMDI1LDcgQEAKIAogCQkvLyBJbmRleCB0aGUgb3V0cHV0IGxvY2F0aW9u
IGFzIGl0IGlzIGEgbGlicmFyeSBmb3IgdGhlIHByb2plY3QKIAkJSW5kZXhNYW5hZ2VyIGluZGV4
TWFuYWdlciA9IEphdmFNb2RlbE1hbmFnZXIuZ2V0SW5kZXhNYW5hZ2VyKCk7Ci0JCWluZGV4TWFu
YWdlci5pbmRleExpYnJhcnkobmV3IFBhdGgoIi9QMS9iaW4iKSwgcHJvamVjdC5nZXRQcm9qZWN0
KCkpOworCQlpbmRleE1hbmFnZXIuaW5kZXhMaWJyYXJ5KG5ldyBQYXRoKCIvUDEvYmluIiksIHBy
b2plY3QuZ2V0UHJvamVjdCgpLCBudWxsKTsKIAkJd2FpdFVudGlsSW5kZXhlc1JlYWR5KCk7CiAK
IAkJLy8gU2VhcmNoIGZvciBhbGwgdHlwZXMKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL01FVEEtSU5GL01BTklGRVNULk1GIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvTUVUQS1JTkYv
TUFOSUZFU1QuTUYKaW5kZXggYmIzYzBhZi4uMzU0YzY0OCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvTUVUQS1JTkYvTUFOSUZFU1QuTUYKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvTUVUQS1JTkYvTUFOSUZFU1QuTUYKQEAgLTE3LDYgKzE3LDcgQEAKICBvcmcuZWNsaXBzZS5q
ZHQuY29yZS5qZG9tLAogIG9yZy5lY2xpcHNlLmpkdC5jb3JlLnNlYXJjaCwKICBvcmcuZWNsaXBz
ZS5qZHQuY29yZS51dGlsLAorIG9yZy5lY2xpcHNlLmpkdC5jb3JlLmluZGV4LAogIG9yZy5lY2xp
cHNlLmpkdC5pbnRlcm5hbC5jb2RlYXNzaXN0O3gtaW50ZXJuYWw6PXRydWUsCiAgb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvZGVhc3Npc3QuY29tcGxldGU7eC1pbnRlcm5hbDo9dHJ1ZSwKICBv
cmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29kZWFzc2lzdC5pbXBsO3gtaW50ZXJuYWw6PXRydWUs
CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9hbnRhZGFwdGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9hbnRhZGFwdGVyL21lc3NhZ2VzLnByb3BlcnRpZXMgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9hbnRhZGFwdGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9hbnRhZGFwdGVy
L21lc3NhZ2VzLnByb3BlcnRpZXMKaW5kZXggZGY2MTY1Ni4uOWNiOWJlMiAxMDA2NDQKLS0tIGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvYW50YWRhcHRlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
YW50YWRhcHRlci9tZXNzYWdlcy5wcm9wZXJ0aWVzCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2FudGFkYXB0ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2FudGFkYXB0ZXIvbWVzc2FnZXMu
cHJvcGVydGllcwpAQCAtMSw1ICsxLDUgQEAKICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKLSMgQ29w
eXJpZ2h0IChjKSAyMDAwLCAyMDA2IElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorIyBDb3B5
cmlnaHQgKGMpIDIwMDAsIDIwMTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAjIEFsbCBy
aWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlh
bHMKICMgYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQ
dWJsaWMgTGljZW5zZSB2MS4wCiAjIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9u
LCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC0xOSwzICsxOSw3IEBACiBjaGVja0RlYnVnQXR0cmli
dXRlcy5wcm9wZXJ0eS5hcmd1bWVudC5jYW5ub3QuYmUubnVsbD1UaGUgcHJvcGVydHkgYXJndW1l
bnQgY2Fubm90IGJlIG51bGwKIGNoZWNrRGVidWdBdHRyaWJ1dGVzLmlvZXhjZXB0aW9uLm9jY3Vy
ZWQ9SU9FeGNlcHRpb24gb2NjdXJyZWQgd2hpbGUgcmVhZGluZyAKIGNoZWNrRGVidWdBdHRyaWJ1
dGVzLmZpbGUuYXJndW1lbnQubXVzdC5iZS5hLmNsYXNzZmlsZS5vci5hLmphcmZpbGU9VGhlIGZp
bGUgYXJndW1lbnQgbXVzdCBiZSBhIC5jbGFzcyBvciBhIC5qYXIgZmlsZQorCitidWlsZEphcklu
ZGV4LmphckZpbGUuY2Fubm90LmJlLm51bGw9VGhlIGphciBmaWxlIGFyZ3VtZW50IGNhbm5vdCBi
ZSBudWxsCitidWlsZEphckluZGV4LmluZGV4RmlsZS5jYW5ub3QuYmUubnVsbD1UaGUgaW5kZXgg
ZmlsZSBhcmd1bWVudCBjYW5ub3QgYmUgbnVsbAorYnVpbGRKYXJJbmRleC5pb2V4Y2VwdGlvbi5v
Y2N1cmVkPUlPRXhjZXB0aW9uIC0gezB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9idWlsZC5wcm9wZXJ0aWVzIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvYnVpbGQucHJvcGVydGll
cwppbmRleCBmZjUyMGY5Li44ZTNmNjc4IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9idWlsZC5wcm9wZXJ0aWVzCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2J1aWxkLnByb3Bl
cnRpZXMKQEAgLTEsNSArMSw1IEBACiAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCi0jIENvcHlyaWdo
dCAoYykgMjAwMCwgMjAxMCBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyMgQ29weXJpZ2h0
IChjKSAyMDAwLCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogIyBBbGwgcmlnaHRz
IHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAj
IGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGlj
IExpY2Vuc2UgdjEuMAogIyB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5k
IGlzIGF2YWlsYWJsZSBhdApAQCAtMjQsNyArMjQsOCBAQAogICAgICAgICAgICAgICAgICAgIG9y
Zy5lY2xpcHNlLmpkdC5jb3JlLmpkb20uKixcCiAgICAgICAgICAgICAgICAgICAgb3JnLmVjbGlw
c2UuamR0LmNvcmUuZG9tLiosXAogICAgICAgICAgICAgICAgICAgIG9yZy5lY2xpcHNlLmpkdC5j
b3JlLmRvbS5yZXdyaXRlLiosXAotICAgICAgICAgICAgICAgICAgIG9yZy5lY2xpcHNlLmpkdC5j
b3JlLnNlYXJjaC4qCisgICAgICAgICAgICAgICAgICAgb3JnLmVjbGlwc2UuamR0LmNvcmUuc2Vh
cmNoLiosXAorICAgICAgICAgICAgICAgICAgIG9yZy5lY2xpcHNlLmpkdC5jb3JlLmluZGV4LioK
IHNvdXJjZS4uID0gICBiYXRjaC8sXAogCSAgICAgICAgIGNvZGVhc3Npc3QvLFwKIAkgICAgICAg
ICBjb21waWxlci8sXApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3Jn
L2VjbGlwc2UvamR0L2NvcmUvSUNsYXNzcGF0aEF0dHJpYnV0ZS5qYXZhIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2NvcmUvSUNsYXNzcGF0aEF0dHJpYnV0ZS5q
YXZhCmluZGV4IGQ5MGFiMTUuLjIyMGYzOTcgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9jb3JlL0lDbGFzc3BhdGhBdHRyaWJ1dGUuamF2YQor
KysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvY29yZS9JQ2xh
c3NwYXRoQXR0cmlidXRlLmphdmEKQEAgLTEsNSArMSw1IEBACiAvKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKgotICogQ29weXJpZ2h0IChjKSAyMDA1LCAyMDEwIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3Ro
ZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDA1LCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3Ro
ZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21w
YW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBv
ZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0
aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdApAQCAtNTgsNiArNTgsMTYgQEAK
IAkgKiBAc2luY2UgMy4xCiAJICovCiAJU3RyaW5nIEpBVkFET0NfTE9DQVRJT05fQVRUUklCVVRF
X05BTUUgPSAiamF2YWRvY19sb2NhdGlvbiI7IC8vJE5PTi1OTFMtMSQKKwkKKwkvKioKKwkgKiBD
b25zdGFudCBmb3IgdGhlIG5hbWUgb2YgdGhlIGluZGV4IGxvY2F0aW9uIGF0dHJpYnV0ZS4KKwkg
KiAKKwkgKiA8cD5UaGUgdmFsdWUgZm9yIHRoaXMgYXR0cmlidXRlIGhhcyB0byBiZSB0aGUgc3Ry
aW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgVVJMLgorCSAqIEl0IHNob3VsZCBwb2ludCB0byBhbiBl
eGlzdGluZyBpbmRleCBmaWxlIGluIGEgZm9sZGVyIG9yIGEgamFyLjwvcD4KKwkgKiAKKwkgKiBA
c2luY2UgMy44CisJICovCisJU3RyaW5nIElOREVYX0xPQ0FUSU9OX0FUVFJJQlVURV9OQU1FID0g
ImluZGV4X2xvY2F0aW9uIjsgLy8kTk9OLU5MUy0xJAogCiAJLyoqCiAJICogQ29uc3RhbnQgZm9y
IHRoZSBuYW1lIG9mIHRoZSBvcHRpb25hbCBhdHRyaWJ1dGUuIFRoZSBwb3NzaWJsZSB2YWx1ZXMK
ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9j
b3JlL0lKYXZhRWxlbWVudERlbHRhLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9v
cmcvZWNsaXBzZS9qZHQvY29yZS9JSmF2YUVsZW1lbnREZWx0YS5qYXZhCmluZGV4IGJjMTdiMDku
LmI1MmM1ZWYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xp
cHNlL2pkdC9jb3JlL0lKYXZhRWxlbWVudERlbHRhLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2NvcmUvSUphdmFFbGVtZW50RGVsdGEuamF2YQpA
QCAtNTcsNiArNTcsMTIgQEAKICAqIDxsaT57QGxpbmsgI0ZfU09VUkNFREVUQUNIRUR9IC0gVGhl
IHNvdXJjZSBhdHRhY2htZW50IHBhdGggb3IgdGhlIHNvdXJjZSBhdHRhY2htZW50IHJvb3QgcGF0
aAogICogb2YgYSBjbGFzc3BhdGggZW50cnkgY29ycmVzcG9uZGluZyB0byB0aGUgZWxlbWVudCB3
YXMgcmVtb3ZlZC4gVGhpcyBmbGFnIGlzIG9ubHkgdmFsaWQgaWYgdGhlIGVsZW1lbnQgaXMgYW4K
ICAqIHtAbGluayBJUGFja2FnZUZyYWdtZW50Um9vdH0uPC9saT4KKyAqIDxsaT57QGxpbmsgI0Zf
SU5ERVhBVFRBQ0hFRH0gLSBUaGUgaW5kZXggcGF0aCBvciB0aGUgaW5kZXggcm9vdCBwYXRoCisg
KiBvZiBhIGNsYXNzcGF0aCBlbnRyeSBjb3JyZXNwb25kaW5nIHRvIHRoZSBlbGVtZW50IHdhcyBh
ZGRlZC4gVGhpcyBmbGFnIGlzIG9ubHkgdmFsaWQgaWYgdGhlIGVsZW1lbnQgaXMgYW4KKyAqIHtA
bGluayBJUGFja2FnZUZyYWdtZW50Um9vdH0uPC9saT4KKyAqIDxsaT57QGxpbmsgI0ZfSU5ERVhE
RVRBQ0hFRH0gLSBUaGUgaW5kZXggcGF0aCBvciB0aGUgaW5kZXggcm9vdCBwYXRoCisgKiBvZiBh
IGNsYXNzcGF0aCBlbnRyeSBjb3JyZXNwb25kaW5nIHRvIHRoZSBlbGVtZW50IHdhcyByZW1vdmVk
LiBUaGlzIGZsYWcgaXMgb25seSB2YWxpZCBpZiB0aGUgZWxlbWVudCBpcyBhbgorICoge0BsaW5r
IElQYWNrYWdlRnJhZ21lbnRSb290fS48L2xpPgogICogPGxpPntAbGluayAjRl9TVVBFUl9UWVBF
U30gLSBPbmUgb2YgdGhlIHN1cGVydHlwZXMgb2YgYW4ge0BsaW5rIElUeXBlfSBoYXMgY2hhbmdl
ZDwvbGk+LgogICogPC91bD4KICAqIDwvbGk+CkBAIC0zMTIsNiArMzE4LDI2IEBACiAJICogQHNp
bmNlIDMuNAogCSAqLwogCXB1YmxpYyBpbnQgRl9BTk5PVEFUSU9OUyA9IDB4NDAwMDAwOworCQor
CS8qKgorCSAqIFRPRE8gU0FUWUFNOiBXZSBwcm9iYWJseSBkb24ndCBuZWVkIHRoaXMgZGVsdGEu
LgorCSAqIAorCSAqIENoYW5nZSBmbGFnIGluZGljYXRpbmcgdGhhdCB0aGUgaW5kZXggZmlsZSBv
ZiBhIGNsYXNzcGF0aCBlbnRyeQorCSAqIGNvcnJlc3BvbmRpbmcgdG8gdGhlIGVsZW1lbnQgd2Fz
IGFkZGVkLiBUaGlzIGZsYWcgaXMgb25seSB2YWxpZCBpZiB0aGUgZWxlbWVudCBpcyBhbgorCSAq
IHtAbGluayBJUGFja2FnZUZyYWdtZW50Um9vdH0uCisJICogCisJICogQHNpbmNlIDMuOAorCSAq
LworCXB1YmxpYyBpbnQgRl9JTkRFWEFUVEFDSEVEID0gMHg4MDAwMDA7CisJCisJLyoqCisJICog
Q2hhbmdlIGZsYWcgaW5kaWNhdGluZyB0aGF0IHRoZSBpbmRleCBmaWxlIG9mIGEgY2xhc3NwYXRo
IGVudHJ5CisJICogY29ycmVzcG9uZGluZyB0byB0aGUgZWxlbWVudCB3YXMgcmVtb3ZlZC4gVGhp
cyBmbGFnIGlzIG9ubHkgdmFsaWQgaWYgdGhlIGVsZW1lbnQgaXMgYW4KKwkgKiB7QGxpbmsgSVBh
Y2thZ2VGcmFnbWVudFJvb3R9LgorCSAqIAorCSAqIEBzaW5jZSAzLjgKKwkgKi8KKwlwdWJsaWMg
aW50IEZfSU5ERVhERVRBQ0hFRCA9IDB4MTAwMDAwMDsKIAogCS8qKgogCSAqIFJldHVybnMgZGVs
dGFzIGZvciB0aGUgY2hpbGRyZW4gdGhhdCBoYXZlIGJlZW4gYWRkZWQuCmRpZmYgLS1naXQgYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvY29yZS9JUGFja2FnZUZy
YWdtZW50Um9vdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2Uv
amR0L2NvcmUvSVBhY2thZ2VGcmFnbWVudFJvb3QuamF2YQppbmRleCBjMWVkNTg4Li40MjFhZTRi
IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQv
Y29yZS9JUGFja2FnZUZyYWdtZW50Um9vdC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L21vZGVsL29yZy9lY2xpcHNlL2pkdC9jb3JlL0lQYWNrYWdlRnJhZ21lbnRSb290LmphdmEKQEAg
LTEsNSArMSw1IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAy
MDAwLCAyMDEwIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAy
MDAwLCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNl
cnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJl
IG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGlj
ZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlz
IGF2YWlsYWJsZSBhdApAQCAtMTgsNiArMTgsNyBAQAogICoqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiov
CiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5jb3JlOwogCitpbXBvcnQgamF2YS5uZXQuVVJMOwog
aW1wb3J0IG9yZy5lY2xpcHNlLmNvcmUucnVudGltZS5JUGF0aDsKIGltcG9ydCBvcmcuZWNsaXBz
ZS5jb3JlLnJ1bnRpbWUuSVByb2dyZXNzTW9uaXRvcjsKIApAQCAtMjQzLDYgKzI0NCwxOCBAQAog
CSAqLwogCXZvaWQgZGVsZXRlKGludCB1cGRhdGVSZXNvdXJjZUZsYWdzLCBpbnQgdXBkYXRlTW9k
ZWxGbGFncywgSVByb2dyZXNzTW9uaXRvciBtb25pdG9yKSB0aHJvd3MgSmF2YU1vZGVsRXhjZXB0
aW9uOwogCS8qKgorCSAqIFJldHVybnMgdGhlIFVSTCB0byB0aGUgaW5kZXggZmlsZSBhdHRhY2hl
ZCB0byB0aGlzIHBhY2thZ2UgZnJhZ21lbnQgcm9vdCdzIGJpbmFyeSBhcmNoaXZlLgorCSAqCisJ
ICogQHJldHVybiB0aGUgVVJMIHRvIHRoZSBjb3JyZXNwb25kaW5nIGluZGV4IGZpbGUsCisJICog
ICBvciA8Y29kZT5udWxsPC9jb2RlPiBpZiB0aGlzIHBhY2thZ2UgZnJhZ21lbnQgcm9vdCdzIGJp
bmFyeSBhcmNoaXZlCisJICogICBoYXMgbm8gY29ycmVzcG9uZGluZyBpbmRleCBmaWxlLCBvciBp
ZiB0aGlzIHBhY2thZ2UgZnJhZ21lbnQgcm9vdAorCSAqICAgaXMgbm90IGEgYmluYXJ5IGFyY2hp
dmUKKwkgKiBAZXhjZXB0aW9uIEphdmFNb2RlbEV4Y2VwdGlvbiBpZiB0aGlzIG9wZXJhdGlvbiBm
YWlscworCSAqIAorCSAqIEBzaW5jZSAzLjgKKwkgKi8KKwlVUkwgZ2V0SW5kZXhQYXRoKCkgdGhy
b3dzIEphdmFNb2RlbEV4Y2VwdGlvbjsKKwkvKioKIAkgKiBSZXR1cm5zIHRoaXMgcGFja2FnZSBm
cmFnbWVudCByb290J3Mga2luZCBlbmNvZGVkIGFzIGFuIGludGVnZXIuCiAJICogQSBwYWNrYWdl
IGZyYWdtZW50IHJvb3QgY2FuIGNvbnRhaW4gc291cmNlIGZpbGVzIChpLmUuIGZpbGVzIHdpdGgg
b25lCiAJICogb2YgdGhlIHtAbGluayBKYXZhQ29yZSNnZXRKYXZhTGlrZUV4dGVuc2lvbnMoKSBK
YXZhLWxpa2UgZXh0ZW5zaW9uc30sCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9t
b2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9DbGFzc3BhdGhDaGFuZ2UuamF2YSBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3Jl
L0NsYXNzcGF0aENoYW5nZS5qYXZhCmluZGV4IGI5NmNkNDQuLmRmOGZiZmEgMTAwNjQ0Ci0tLSBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3Jl
L0NsYXNzcGF0aENoYW5nZS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0NsYXNzcGF0aENoYW5nZS5qYXZhCkBAIC0xMCw2
ICsxMCw3IEBACiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KIHBhY2thZ2Ugb3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvcmU7CiAKK2ltcG9ydCBqYXZhLm5ldC5VUkw7CiBpbXBvcnQgamF2YS51
dGlsLkFycmF5TGlzdDsKIGltcG9ydCBqYXZhLnV0aWwuSGFzaE1hcDsKIGltcG9ydCBqYXZhLnV0
aWwuSGFzaFNldDsKQEAgLTM2MiwxMiArMzYzLDE1IEBACiAJCQkJfQogCiAJCQkJLy8gY2hlY2sg
c291cmNlIGF0dGFjaG1lbnQKKwkJCQkvLyBUT0RPIFNBVFlBTTogVW5kZXJzdGFuZCB0aGlzCiAJ
CQkJSVBhdGggbmV3U291cmNlUGF0aCA9IG5ld1Jlc29sdmVkQ2xhc3NwYXRoW2luZGV4XS5nZXRT
b3VyY2VBdHRhY2htZW50UGF0aCgpOwogCQkJCWludCBzb3VyY2VBdHRhY2htZW50RmxhZ3MgPSBn
ZXRTb3VyY2VBdHRhY2htZW50RGVsdGFGbGFnKHRoaXMub2xkUmVzb2x2ZWRDbGFzc3BhdGhbaV0u
Z2V0U291cmNlQXR0YWNobWVudFBhdGgoKSwgbmV3U291cmNlUGF0aCk7CiAJCQkJSVBhdGggb2xk
Um9vdFBhdGggPSB0aGlzLm9sZFJlc29sdmVkQ2xhc3NwYXRoW2ldLmdldFNvdXJjZUF0dGFjaG1l
bnRSb290UGF0aCgpOwogCQkJCUlQYXRoIG5ld1Jvb3RQYXRoID0gbmV3UmVzb2x2ZWRDbGFzc3Bh
dGhbaW5kZXhdLmdldFNvdXJjZUF0dGFjaG1lbnRSb290UGF0aCgpOwogCQkJCWludCBzb3VyY2VB
dHRhY2htZW50Um9vdEZsYWdzID0gZ2V0U291cmNlQXR0YWNobWVudERlbHRhRmxhZyhvbGRSb290
UGF0aCwgbmV3Um9vdFBhdGgpOwotCQkJCWludCBmbGFncyA9IHNvdXJjZUF0dGFjaG1lbnRGbGFn
cyB8IHNvdXJjZUF0dGFjaG1lbnRSb290RmxhZ3M7CisJCQkJVVJMIG5ld0luZGV4UGF0aCA9ICgo
Q2xhc3NwYXRoRW50cnkpbmV3UmVzb2x2ZWRDbGFzc3BhdGhbaW5kZXhdKS5nZXRMaWJyYXJ5SW5k
ZXhMb2NhdGlvbigpOworCQkJCWludCBpbmRleEZsYWdzID0gZ2V0SW5kZXhEZWx0YUZsYWcoKChD
bGFzc3BhdGhFbnRyeSl0aGlzLm9sZFJlc29sdmVkQ2xhc3NwYXRoW2ldKS5nZXRMaWJyYXJ5SW5k
ZXhMb2NhdGlvbigpLCBuZXdJbmRleFBhdGgpOworCQkJCWludCBmbGFncyA9IHNvdXJjZUF0dGFj
aG1lbnRGbGFncyB8IHNvdXJjZUF0dGFjaG1lbnRSb290RmxhZ3MgfCBpbmRleEZsYWdzOwogCQkJ
CWlmIChmbGFncyAhPSAwKSB7CiAJCQkJCWFkZENsYXNzcGF0aERlbHRhcyhkZWx0YSwgdGhpcy5w
cm9qZWN0LmNvbXB1dGVQYWNrYWdlRnJhZ21lbnRSb290cyh0aGlzLm9sZFJlc29sdmVkQ2xhc3Nw
YXRoW2ldKSwgZmxhZ3MpOwogCQkJCX0gZWxzZSB7CkBAIC00MzIsNiArNDM2LDI1IEBACiAJCX0K
IAogCQlyZXR1cm4gcmVzdWx0OworCX0KKworCS8qCisJICogVE9ETyBTQVRZQU06IFB1dCBhIGNv
bW1lbnQKKwkgKi8KKwlwcml2YXRlIGludCBnZXRJbmRleERlbHRhRmxhZyhVUkwgb2xkUGF0aCwg
VVJMIG5ld1BhdGgpIHsKKwkJaWYgKG9sZFBhdGggPT0gbnVsbCkgeworCQkJaWYgKG5ld1BhdGgg
IT0gbnVsbCkgeworCQkJCXJldHVybiBJSmF2YUVsZW1lbnREZWx0YS5GX0lOREVYQVRUQUNIRUQ7
CisJCQl9IGVsc2UgeworCQkJCXJldHVybiAwOworCQkJfQorCQl9IGVsc2UgaWYgKG5ld1BhdGgg
PT0gbnVsbCkgeworCQkJcmV0dXJuIElKYXZhRWxlbWVudERlbHRhLkZfSU5ERVhERVRBQ0hFRDsK
KwkJfSBlbHNlIGlmICghb2xkUGF0aC5lcXVhbHMobmV3UGF0aCkpIHsKKwkJCXJldHVybiBJSmF2
YUVsZW1lbnREZWx0YS5GX0lOREVYQVRUQUNIRUQgfCBJSmF2YUVsZW1lbnREZWx0YS5GX0lOREVY
REVUQUNIRUQ7CisJCX0gZWxzZSB7CisJCQlyZXR1cm4gMDsKKwkJfQogCX0KIAogCS8qCkBAIC01
MTEsNyArNTM0LDcgQEAKIAogCQlmb3IgKGludCBpID0gMDsgaSA8IG5ld0xlbmd0aDsgaSsrKSB7
CiAJCQlpbnQgaW5kZXggPSBjbGFzc3BhdGhDb250YWlucyh0aGlzLm9sZFJlc29sdmVkQ2xhc3Nw
YXRoLCBuZXdSZXNvbHZlZENsYXNzcGF0aFtpXSk7Ci0JCQlpZiAoaW5kZXggPT0gLTEpIHsKKwkJ
CWlmIChpbmRleCA9PSAtMSB8fCBuZXdSZXNvbHZlZENsYXNzcGF0aFtpXS5nZXRFbnRyeUtpbmQo
KSA9PSBJQ2xhc3NwYXRoRW50cnkuQ1BFX0xJQlJBUlkpIHsKIAkJCQkvLyByZW1vdGUgcHJvamVj
dHMgYXJlIG5vdCBpbmRleGVkIGluIHRoaXMgcHJvamVjdAogCQkJCWlmIChuZXdSZXNvbHZlZENs
YXNzcGF0aFtpXS5nZXRFbnRyeUtpbmQoKSA9PSBJQ2xhc3NwYXRoRW50cnkuQ1BFX1BST0pFQ1Qp
ewogCQkJCQljb250aW51ZTsKQEAgLTUyNCwxNCArNTQ3LDIzIEBACiAJCQkJCQlib29sZWFuIHBh
dGhIYXNDaGFuZ2VkID0gdHJ1ZTsKIAkJCQkJCUlQYXRoIG5ld1BhdGggPSBuZXdSZXNvbHZlZENs
YXNzcGF0aFtpXS5nZXRQYXRoKCk7CiAJCQkJCQlmb3IgKGludCBqID0gMDsgaiA8IG9sZExlbmd0
aDsgaisrKSB7CisJCQkJCQkJLy9UT0RPIFNBVFlBTTogSXNuJ3QgaW5kZXggPT0gaj8KIAkJCQkJ
CQlJQ2xhc3NwYXRoRW50cnkgb2xkRW50cnkgPSB0aGlzLm9sZFJlc29sdmVkQ2xhc3NwYXRoW2pd
OwogCQkJCQkJCWlmIChvbGRFbnRyeS5nZXRQYXRoKCkuZXF1YWxzKG5ld1BhdGgpKSB7Ci0JCQkJ
CQkJCXBhdGhIYXNDaGFuZ2VkID0gZmFsc2U7CisJCQkJCQkJCVVSTCBvbGR1cmwgPSAoKENsYXNz
cGF0aEVudHJ5KW9sZEVudHJ5KS5nZXRMaWJyYXJ5SW5kZXhMb2NhdGlvbigpOworCQkJCQkJCQlV
UkwgbmV3dXJsID0gKChDbGFzc3BhdGhFbnRyeSluZXdSZXNvbHZlZENsYXNzcGF0aFtpXSkuZ2V0
TGlicmFyeUluZGV4TG9jYXRpb24oKTsKKwkJCQkJCQkJaWYgKG9sZHVybCA9PSBudWxsICYmIG5l
d3VybCA9PSBudWxsKSB7CisJCQkJCQkJCQlwYXRoSGFzQ2hhbmdlZCA9IGZhbHNlOworCQkJCQkJ
CQl9IGVsc2UgaWYgKG9sZHVybCAhPSBudWxsICYmIG5ld3VybCAhPSBudWxsKSB7CisJCQkJCQkJ
CQlwYXRoSGFzQ2hhbmdlZCA9ICEobmV3dXJsLmVxdWFscyhvbGR1cmwpKTsKKwkJCQkJCQkJfSBl
bHNlIGlmIChvbGR1cmwgIT0gbnVsbCkgeworCQkJCQkJCQkJaW5kZXhNYW5hZ2VyLnJlbW92ZUlu
ZGV4KG5ld1BhdGgpOworCQkJCQkJCQl9CiAJCQkJCQkJCWJyZWFrOwogCQkJCQkJCX0KIAkJCQkJ
CX0KIAkJCQkJCWlmIChwYXRoSGFzQ2hhbmdlZCkgewotCQkJCQkJCWluZGV4TWFuYWdlci5pbmRl
eExpYnJhcnkobmV3UGF0aCwgdGhpcy5wcm9qZWN0LmdldFByb2plY3QoKSk7CisJCQkJCQkJaW5k
ZXhNYW5hZ2VyLmluZGV4TGlicmFyeShuZXdQYXRoLCB0aGlzLnByb2plY3QuZ2V0UHJvamVjdCgp
LCgoQ2xhc3NwYXRoRW50cnkpbmV3UmVzb2x2ZWRDbGFzc3BhdGhbaV0pLmdldExpYnJhcnlJbmRl
eExvY2F0aW9uKCkpOwogCQkJCQkJfQogCQkJCQkJYnJlYWs7CiAJCQkJCWNhc2UgSUNsYXNzcGF0
aEVudHJ5LkNQRV9TT1VSQ0U6CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2Rl
bC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9DbGFzc3BhdGhFbnRyeS5qYXZhIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvQ2xh
c3NwYXRoRW50cnkuamF2YQppbmRleCBkODA4NmZmLi41NjdlYzRhIDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9DbGFz
c3BhdGhFbnRyeS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb3JlL0NsYXNzcGF0aEVudHJ5LmphdmEKQEAgLTE2LDYgKzE2LDgg
QEAKIGltcG9ydCBqYXZhLmlvLklucHV0U3RyZWFtOwogaW1wb3J0IGphdmEuaW8uT3V0cHV0U3Ry
ZWFtV3JpdGVyOwogaW1wb3J0IGphdmEuaW8uVW5zdXBwb3J0ZWRFbmNvZGluZ0V4Y2VwdGlvbjsK
K2ltcG9ydCBqYXZhLm5ldC5NYWxmb3JtZWRVUkxFeGNlcHRpb247CitpbXBvcnQgamF2YS5uZXQu
VVJMOwogaW1wb3J0IGphdmEudXRpbC5BcnJheUxpc3Q7CiBpbXBvcnQgamF2YS51dGlsLkhhc2hN
YXA7CiBpbXBvcnQgamF2YS51dGlsLkhhc2hTZXQ7CkBAIC0yMTY0LDQgKzIxNjYsMzEgQEAKIAkJ
fQogCQlyZXR1cm4gSmF2YU1vZGVsU3RhdHVzLlZFUklGSUVEX09LOwogCX0KKwkKKwkvKgorCSAq
IFRoaXMgZnVuY3Rpb24gY29tcHV0ZXMgdGhlIFVSTCBvZiB0aGUgaW5kZXggbG9jYXRpb24gZm9y
IHRoaXMgY2xhc3NwYXRoIGVudHJ5LgorCSAqIEl0IHJldHVybnMgbnVsbCBpZiB0aGUgVVJMIGlz
IGludmFsaWQuCisJICovCisJcHVibGljIFVSTCBnZXRMaWJyYXJ5SW5kZXhMb2NhdGlvbigpIHsK
KwkJc3dpdGNoKGdldEVudHJ5S2luZCgpKSB7CisJCQljYXNlIElDbGFzc3BhdGhFbnRyeS5DUEVf
TElCUkFSWSA6CisJCQljYXNlIElDbGFzc3BhdGhFbnRyeS5DUEVfVkFSSUFCTEUgOgorCQkJCWJy
ZWFrOworCQkJZGVmYXVsdCA6CisJCQkJcmV0dXJuIG51bGw7CisJCX0KKworCQlmb3IgKGludCBp
PSAwOyBpIDwgdGhpcy5leHRyYUF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHsKKwkJCUlDbGFzc3Bh
dGhBdHRyaWJ1dGUgYXR0cmliPSB0aGlzLmV4dHJhQXR0cmlidXRlc1tpXTsKKwkJCWlmIChJQ2xh
c3NwYXRoQXR0cmlidXRlLklOREVYX0xPQ0FUSU9OX0FUVFJJQlVURV9OQU1FLmVxdWFscyhhdHRy
aWIuZ2V0TmFtZSgpKSkgeworCQkJCVN0cmluZyB2YWx1ZSA9IGF0dHJpYi5nZXRWYWx1ZSgpOwor
CQkJCXRyeSB7CisJCQkJCXJldHVybiBuZXcgVVJMKHZhbHVlKTsKKwkJCQl9IGNhdGNoIChNYWxm
b3JtZWRVUkxFeGNlcHRpb24gZSkgeworCQkJCQlyZXR1cm4gbnVsbDsKKwkJCQl9CisJCQl9CisJ
CX0KKwkJcmV0dXJuIG51bGw7CisJfQkKIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0RlbHRhUHJvY2Vzc2luZ1N0
YXRlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29yZS9EZWx0YVByb2Nlc3NpbmdTdGF0ZS5qYXZhCmluZGV4IDZmOTQzODYuLmY5M2I5
OTIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb3JlL0RlbHRhUHJvY2Vzc2luZ1N0YXRlLmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvRGVsdGFQcm9j
ZXNzaW5nU3RhdGUuamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
Ci0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMDkgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMu
CisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMu
CiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlp
bmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRo
ZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMg
ZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC0xOCw2ICsxOCw3IEBACiBpbXBv
cnQgamF2YS5pby5GaWxlSW5wdXRTdHJlYW07CiBpbXBvcnQgamF2YS5pby5GaWxlT3V0cHV0U3Ry
ZWFtOwogaW1wb3J0IGphdmEuaW8uSU9FeGNlcHRpb247CitpbXBvcnQgamF2YS5uZXQuVVJMOwog
aW1wb3J0IGphdmEudXRpbC4qOwogCiBpbXBvcnQgb3JnLmVjbGlwc2UuY29yZS5yZXNvdXJjZXMu
KjsKQEAgLTc1LDYgKzc2LDkgQEAKIAkvKiBBIHRhYmxlIGZyb20gSVBhdGggKGEgc291cmNlIGF0
dGFjaG1lbnQgcGF0aCBmcm9tIGEgY2xhc3NwYXRoIGVudHJ5KSB0byBJUGF0aCAoYSByb290IHBh
dGgpICovCiAJcHVibGljIEhhc2hNYXAgc291cmNlQXR0YWNobWVudHMgPSBuZXcgSGFzaE1hcCgp
OwogCisJLyogVE9ETyBTQVRZQU06IElzIHRoaXMgbmVjZXNzYXJ5PyovCisJcHVibGljIEhhc2hN
YXAgaW5kZXhNYXAgPSBuZXcgSGFzaE1hcCgpOworCQogCS8qIEEgdGFibGUgZnJvbSBJSmF2YVBy
b2plY3QgdG8gSUphdmFQcm9qZWN0W10gKHRoZSBsaXN0IG9mIGRpcmVjdCBkZXBlbmRlbnQgb2Yg
dGhlIGtleSkgKi8KIAlwdWJsaWMgSGFzaE1hcCBwcm9qZWN0RGVwZW5kZW5jaWVzID0gbmV3IEhh
c2hNYXAoKTsKIApAQCAtMjYyLDYgKzI2Niw3IEBACiAJCQkJdGhpcy5vdGhlclJvb3RzID0gcm9v
dEluZm9zWzFdOwogCQkJCXRoaXMuc291cmNlQXR0YWNobWVudHMgPSByb290SW5mb3NbMl07CiAJ
CQkJdGhpcy5wcm9qZWN0RGVwZW5kZW5jaWVzID0gcm9vdEluZm9zWzNdOworCQkJCXRoaXMuaW5k
ZXhNYXAgPSByb290SW5mb3NbNF07CiAJCQkJdGhpcy5yb290c0FyZVN0YWxlID0gZmFsc2U7CiAJ
CQl9CiAJCX0KQEAgLTI3NCw2ICsyNzksNyBAQAogCQkJdGhpcy5vdGhlclJvb3RzID0gcm9vdElu
Zm9zWzFdOwogCQkJdGhpcy5zb3VyY2VBdHRhY2htZW50cyA9IHJvb3RJbmZvc1syXTsKIAkJCXRo
aXMucHJvamVjdERlcGVuZGVuY2llcyA9IHJvb3RJbmZvc1szXTsKKwkJCXRoaXMuaW5kZXhNYXAg
PSByb290SW5mb3NbNF07CiAJCQl0aGlzLnJvb3RzQXJlU3RhbGUgPSBmYWxzZTsKIAkJfQogCX0K
QEAgLTI4Myw2ICsyODksNyBAQAogCQlIYXNoTWFwIG5ld090aGVyUm9vdHMgPSBuZXcgSGFzaE1h
cCgpOwogCQlIYXNoTWFwIG5ld1NvdXJjZUF0dGFjaG1lbnRzID0gbmV3IEhhc2hNYXAoKTsKIAkJ
SGFzaE1hcCBuZXdQcm9qZWN0RGVwZW5kZW5jaWVzID0gbmV3IEhhc2hNYXAoKTsKKwkJSGFzaE1h
cCBuZXdJbmRleGVzID0gbmV3IEhhc2hNYXAoKTsKIAogCQlJSmF2YU1vZGVsIG1vZGVsID0gSmF2
YU1vZGVsTWFuYWdlci5nZXRKYXZhTW9kZWxNYW5hZ2VyKCkuZ2V0SmF2YU1vZGVsKCk7CiAJCUlK
YXZhUHJvamVjdFtdIHByb2plY3RzOwpAQCAtMzU0LDkgKzM2MSwxNSBAQAogCQkJCWlmIChzb3Vy
Y2VBdHRhY2htZW50UGF0aCAhPSBudWxsKSB7CiAJCQkJCW5ld1NvdXJjZUF0dGFjaG1lbnRzLnB1
dChzb3VyY2VBdHRhY2htZW50UGF0aCwgcGF0aCk7CiAJCQkJfQorCQkJCisJCQkJLy9UT0RPIFNB
VFlBTTogRG8gd2UgbmVlZCBzb21ldGhpbmcgbGlrZSB0aGlzPworCQkJCVVSTCB1cmwgPSAoKENs
YXNzcGF0aEVudHJ5KWVudHJ5KS5nZXRMaWJyYXJ5SW5kZXhMb2NhdGlvbigpOworCQkJCWlmICh1
cmwgIT0gbnVsbCkgeworCQkJCQluZXdJbmRleGVzLnB1dCh1cmwsIHBhdGgpOworCQkJCX0KIAkJ
CX0KIAkJfQotCQlyZXR1cm4gbmV3IEhhc2hNYXBbXSB7bmV3Um9vdHMsIG5ld090aGVyUm9vdHMs
IG5ld1NvdXJjZUF0dGFjaG1lbnRzLCBuZXdQcm9qZWN0RGVwZW5kZW5jaWVzfTsKKwkJcmV0dXJu
IG5ldyBIYXNoTWFwW10ge25ld1Jvb3RzLCBuZXdPdGhlclJvb3RzLCBuZXdTb3VyY2VBdHRhY2ht
ZW50cywgbmV3UHJvamVjdERlcGVuZGVuY2llcywgbmV3SW5kZXhlc307CiAJfQogCiAJcHVibGlj
IHN5bmNocm9uaXplZCBDbGFzc3BhdGhWYWxpZGF0aW9uW10gcmVtb3ZlQ2xhc3NwYXRoVmFsaWRh
dGlvbnMoKSB7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29yZS9EZWx0YVByb2Nlc3Nvci5qYXZhIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvRGVsdGFQcm9jZXNz
b3IuamF2YQppbmRleCBmN2EwYzFjLi4yYzY1MjAwIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9EZWx0YVByb2Nlc3Nv
ci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb3JlL0RlbHRhUHJvY2Vzc29yLmphdmEKQEAgLTU5MCw2ICs1OTAsMzggQEAKIAkJ
CX0KIAkJfQogCX0KKwlwcml2YXRlIHZvaWQgY2hlY2tJbmRleENoYW5nZShJUmVzb3VyY2VEZWx0
YSBkZWx0YSwgSVJlc291cmNlIHJlcykgeworCQlJUGF0aCByb290UGF0aCA9IChJUGF0aCl0aGlz
LnN0YXRlLmluZGV4TWFwLmdldChleHRlcm5hbFBhdGgocmVzKSk7CisJCWlmIChyb290UGF0aCAh
PSBudWxsKSB7CisJCQlSb290SW5mbyByb290SW5mbyA9IHJvb3RJbmZvKHJvb3RQYXRoLCBkZWx0
YS5nZXRLaW5kKCkpOworCQkJaWYgKHJvb3RJbmZvICE9IG51bGwpIHsKKwkJCQlJSmF2YVByb2pl
Y3QgcHJvamVjdE9mUm9vdCA9IHJvb3RJbmZvLnByb2plY3Q7CisJCQkJSVBhY2thZ2VGcmFnbWVu
dFJvb3Qgcm9vdCA9IG51bGw7CisJCQkJdHJ5IHsKKwkJCQkJLy8gY2xvc2UgdGhlIHJvb3Qgc28g
dGhhdCBzb3VyY2UgYXR0YWNobWVudCBjYWNoZSBpcyBmbHVzaGVkCisJCQkJCXJvb3QgPSBwcm9q
ZWN0T2ZSb290LmZpbmRQYWNrYWdlRnJhZ21lbnRSb290KHJvb3RQYXRoKTsKKwkJCQkJaWYgKHJv
b3QgIT0gbnVsbCkgeworCQkJCQkJcm9vdC5jbG9zZSgpOworCQkJCQl9CisJCQkJfSBjYXRjaCAo
SmF2YU1vZGVsRXhjZXB0aW9uIGUpIHsKKwkJCQkJLy8gcm9vdCBkb2Vzbid0IGV4aXN0OiBpZ25v
cmUKKwkJCQl9CisJCQkJaWYgKHJvb3QgPT0gbnVsbCkgcmV0dXJuOworCQkJCXN3aXRjaCAoZGVs
dGEuZ2V0S2luZCgpKSB7CisJCQkJCWNhc2UgSVJlc291cmNlRGVsdGEuQURERUQ6CisJCQkJCQlj
dXJyZW50RGVsdGEoKS5pbmRleEF0dGFjaGVkKHJvb3QpOworCQkJCQkJYnJlYWs7CisJCQkJCWNh
c2UgSVJlc291cmNlRGVsdGEuQ0hBTkdFRDoKKwkJCQkJCWN1cnJlbnREZWx0YSgpLmluZGV4RGV0
YWNoZWQocm9vdCk7CisJCQkJCQljdXJyZW50RGVsdGEoKS5pbmRleEF0dGFjaGVkKHJvb3QpOwor
CQkJCQkJYnJlYWs7CisJCQkJCWNhc2UgSVJlc291cmNlRGVsdGEuUkVNT1ZFRDoKKwkJCQkJCWN1
cnJlbnREZWx0YSgpLmluZGV4RGV0YWNoZWQocm9vdCk7CisJCQkJCQlicmVhazsKKwkJCQl9CisJ
CQl9CisJCX0KKwl9CiAJLyoKIAkgKiBDbG9zZXMgdGhlIGdpdmVuIGVsZW1lbnQsIHdoaWNoIHJl
bW92ZXMgaXQgZnJvbSB0aGUgY2FjaGUgb2Ygb3BlbiBlbGVtZW50cy4KIAkgKi8KQEAgLTk5Niw3
ICsxMDI4LDcgQEAKIAkJCQkJCQkJCS8vIGZpcnN0IHJlbW92ZSB0aGUgaW5kZXggc28gdGhhdCBp
dCBpcyBmb3JjZWQgdG8gYmUgcmUtaW5kZXhlZAogCQkJCQkJCQkJdGhpcy5tYW5hZ2VyLmluZGV4
TWFuYWdlci5yZW1vdmVJbmRleChlbnRyeVBhdGgpOwogCQkJCQkJCQkJLy8gdGhlbiBpbmRleCB0
aGUgamFyCi0JCQkJCQkJCQl0aGlzLm1hbmFnZXIuaW5kZXhNYW5hZ2VyLmluZGV4TGlicmFyeShl
bnRyeVBhdGgsIHByb2plY3QuZ2V0UHJvamVjdCgpKTsKKwkJCQkJCQkJCXRoaXMubWFuYWdlci5p
bmRleE1hbmFnZXIuaW5kZXhMaWJyYXJ5KGVudHJ5UGF0aCwgcHJvamVjdC5nZXRQcm9qZWN0KCks
ICgoQ2xhc3NwYXRoRW50cnkpZW50cmllc1tqXSkuZ2V0TGlicmFyeUluZGV4TG9jYXRpb24oKSk7
CiAJCQkJCQkJCX0gZWxzZSB7CiAJCQkJCQkJCQlleHRlcm5hbEFyY2hpdmVzU3RhdHVzLnB1dChl
bnRyeVBhdGgsIEVYVEVSTkFMX0pBUl9VTkNIQU5HRUQpOwogCQkJCQkJCQl9CkBAIC0xMDA4LDcg
KzEwNDAsNyBAQAogCQkJCQkJCQkJdGhpcy5zdGF0ZS5nZXRFeHRlcm5hbExpYlRpbWVTdGFtcHMo
KS5wdXQoZW50cnlQYXRoLCBuZXcgTG9uZyhuZXdUaW1lU3RhbXApKTsKIAkJCQkJCQkJCS8vIGlu
ZGV4IHRoZSBuZXcgamFyCiAJCQkJCQkJCQl0aGlzLm1hbmFnZXIuaW5kZXhNYW5hZ2VyLnJlbW92
ZUluZGV4KGVudHJ5UGF0aCk7Ci0JCQkJCQkJCQl0aGlzLm1hbmFnZXIuaW5kZXhNYW5hZ2VyLmlu
ZGV4TGlicmFyeShlbnRyeVBhdGgsIHByb2plY3QuZ2V0UHJvamVjdCgpKTsKKwkJCQkJCQkJCXRo
aXMubWFuYWdlci5pbmRleE1hbmFnZXIuaW5kZXhMaWJyYXJ5KGVudHJ5UGF0aCwgcHJvamVjdC5n
ZXRQcm9qZWN0KCksICgoQ2xhc3NwYXRoRW50cnkpZW50cmllc1tqXSkuZ2V0TGlicmFyeUluZGV4
TG9jYXRpb24oKSk7CiAJCQkJCQkJCX0KIAkJCQkJCQl9CiAJCQkJCQl9IGVsc2UgeyAvLyBpbnRl
cm5hbCBKQVIKQEAgLTIyMzksNiArMjI3MSw3IEBACiAKIAkJCQkvLyBjaGVjayBzb3VyY2UgYXR0
YWNobWVudCBjaGFuZ2UKIAkJCQljaGVja1NvdXJjZUF0dGFjaG1lbnRDaGFuZ2UoY2hpbGQsIGNo
aWxkUmVzKTsKKwkJCQljaGVja0luZGV4Q2hhbmdlKGNoaWxkLCBjaGlsZFJlcyk7CiAKIAkJCQkv
LyBmaW5kIG91dCB3aGV0aGVyIHRoZSBjaGlsZCBpcyBhIHBhY2thZ2UgZnJhZ21lbnQgcm9vdCBv
ZiB0aGUgY3VycmVudCBwcm9qZWN0CiAJCQkJSVBhdGggY2hpbGRQYXRoID0gZXh0ZXJuYWxQYXRo
KGNoaWxkUmVzKTsKQEAgLTI2MjgsMTMgKzI2NjEsMTMgQEAKIAkJCQkJc3dpdGNoIChkZWx0YS5n
ZXRLaW5kKCkpIHsKIAkJCQkJCWNhc2UgSVJlc291cmNlRGVsdGEuQURERUQ6CiAJCQkJCQkJLy8g
aW5kZXggdGhlIG5ldyBqYXIKLQkJCQkJCQlpbmRleE1hbmFnZXIuaW5kZXhMaWJyYXJ5KGphclBh
dGgsIHJvb3QuZ2V0SmF2YVByb2plY3QoKS5nZXRQcm9qZWN0KCkpOworCQkJCQkJCWluZGV4TWFu
YWdlci5pbmRleExpYnJhcnkoamFyUGF0aCwgcm9vdC5nZXRKYXZhUHJvamVjdCgpLmdldFByb2pl
Y3QoKSwgcm9vdC5nZXRJbmRleFBhdGgoKSApOwogCQkJCQkJCWJyZWFrOwogCQkJCQkJY2FzZSBJ
UmVzb3VyY2VEZWx0YS5DSEFOR0VEOgogCQkJCQkJCS8vIGZpcnN0IHJlbW92ZSB0aGUgaW5kZXgg
c28gdGhhdCBpdCBpcyBmb3JjZWQgdG8gYmUgcmUtaW5kZXhlZAogCQkJCQkJCWluZGV4TWFuYWdl
ci5yZW1vdmVJbmRleChqYXJQYXRoKTsKIAkJCQkJCQkvLyB0aGVuIGluZGV4IHRoZSBqYXIKLQkJ
CQkJCQlpbmRleE1hbmFnZXIuaW5kZXhMaWJyYXJ5KGphclBhdGgsIHJvb3QuZ2V0SmF2YVByb2pl
Y3QoKS5nZXRQcm9qZWN0KCkpOworCQkJCQkJCWluZGV4TWFuYWdlci5pbmRleExpYnJhcnkoamFy
UGF0aCwgcm9vdC5nZXRKYXZhUHJvamVjdCgpLmdldFByb2plY3QoKSwgcm9vdC5nZXRJbmRleFBh
dGgoKSk7CiAJCQkJCQkJYnJlYWs7CiAJCQkJCQljYXNlIElSZXNvdXJjZURlbHRhLlJFTU9WRUQ6
CiAJCQkJCQkJLy8gdGhlIGphciB3YXMgcGh5c2ljYWxseSByZW1vdmVkOiByZW1vdmUgdGhlIGlu
ZGV4CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29yZS9KYXZhRWxlbWVudERlbHRhLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9KYXZhRWxlbWVudERlbHRh
LmphdmEKaW5kZXggZWUwZDcxNS4uZTU1Yzk1MSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvSmF2YUVsZW1lbnREZWx0
YS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb3JlL0phdmFFbGVtZW50RGVsdGEuamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTAgSUJNIENvcnBv
cmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTEgSUJNIENvcnBv
cmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0g
YW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5k
ZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNo
IGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC01
NjksNiArNTY5LDI5IEBACiAJZGV0YWNoZWREZWx0YS5jaGFuZ2VkKEZfU09VUkNFREVUQUNIRUQp
OwogCWluc2VydERlbHRhVHJlZShlbGVtZW50LCBkZXRhY2hlZERlbHRhKTsKIH0KKworLyoqCisg
KiBDcmVhdGVzIHRoZSBuZXN0ZWQgZGVsdGFzIHJlc3VsdGluZyBmcm9tIGEgY2hhbmdlIG9wZXJh
dGlvbi4KKyAqIENvbnZlbmllbmNlIG1ldGhvZCBmb3IgY3JlYXRpbmcgY2hhbmdlIGRlbHRhcy4K
KyAqIFRoZSBjb25zdHJ1Y3RvciBzaG91bGQgYmUgdXNlZCB0byBjcmVhdGUgdGhlIHJvb3QgZGVs
dGEKKyAqIGFuZCB0aGVuIGEgY2hhbmdlIG9wZXJhdGlvbiBzaG91bGQgY2FsbCB0aGlzIG1ldGhv
ZC4KKyAqLworcHVibGljIHZvaWQgaW5kZXhBdHRhY2hlZChJSmF2YUVsZW1lbnQgZWxlbWVudCkg
eworCUphdmFFbGVtZW50RGVsdGEgYXR0YWNoZWREZWx0YSA9IG5ldyBKYXZhRWxlbWVudERlbHRh
KGVsZW1lbnQpOworCWF0dGFjaGVkRGVsdGEuY2hhbmdlZChGX0lOREVYQVRUQUNIRUQpOworCWlu
c2VydERlbHRhVHJlZShlbGVtZW50LCBhdHRhY2hlZERlbHRhKTsKK30KKy8qKgorICogQ3JlYXRl
cyB0aGUgbmVzdGVkIGRlbHRhcyByZXN1bHRpbmcgZnJvbSBhIGNoYW5nZSBvcGVyYXRpb24uCisg
KiBDb252ZW5pZW5jZSBtZXRob2QgZm9yIGNyZWF0aW5nIGNoYW5nZSBkZWx0YXMuCisgKiBUaGUg
Y29uc3RydWN0b3Igc2hvdWxkIGJlIHVzZWQgdG8gY3JlYXRlIHRoZSByb290IGRlbHRhCisgKiBh
bmQgdGhlbiBhIGNoYW5nZSBvcGVyYXRpb24gc2hvdWxkIGNhbGwgdGhpcyBtZXRob2QuCisgKi8K
K3B1YmxpYyB2b2lkIGluZGV4RGV0YWNoZWQoSUphdmFFbGVtZW50IGVsZW1lbnQpIHsKKwlKYXZh
RWxlbWVudERlbHRhIGRldGFjaGVkRGVsdGEgPSBuZXcgSmF2YUVsZW1lbnREZWx0YShlbGVtZW50
KTsKKwlkZXRhY2hlZERlbHRhLmNoYW5nZWQoRl9JTkRFWERFVEFDSEVEKTsKKwlpbnNlcnREZWx0
YVRyZWUoZWxlbWVudCwgZGV0YWNoZWREZWx0YSk7Cit9CiAvKioKICAqIFJldHVybnMgYSBzdHJp
bmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBkZWx0YSdzCiAgKiBzdHJ1Y3R1cmUgc3VpdGFibGUg
Zm9yIGRlYnVnIHB1cnBvc2VzLgpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9k
ZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvSmF2YU1vZGVsTWFuYWdlci5qYXZhIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUv
SmF2YU1vZGVsTWFuYWdlci5qYXZhCmluZGV4IGNkZWFkNDAuLjZiN2ViNzcgMTAwNjQ0Ci0tLSBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3Jl
L0phdmFNb2RlbE1hbmFnZXIuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9KYXZhTW9kZWxNYW5hZ2VyLmphdmEKQEAgLTE4
MCw2ICsxODAsOCBAQAogCSAqIE1hcCBmcm9tIGEgcGFja2FnZSBmcmFnbWVudCByb290J3MgcGF0
aCB0byBhIHNvdXJjZSBhdHRhY2htZW50IHByb3BlcnR5IChzb3VyY2UgcGF0aCArIEFUVEFDSE1F
TlRfUFJPUEVSVFlfREVMSU1JVEVSICsgc291cmNlIHJvb3QgcGF0aCkKIAkgKi8KIAlwdWJsaWMg
TWFwIHJvb3RQYXRoVG9BdHRhY2htZW50cyA9IG5ldyBIYXNodGFibGUoKTsKKwkvL1RPRE8gU0FU
WUFNOiBJcyB0aGlzIG5lY2Vzc2FyeQorCXB1YmxpYyBNYXAgcm9vdFBhdGhUb0luZGV4ZXMgPSBu
ZXcgSGFzaHRhYmxlKCk7CiAKIAlwdWJsaWMgZmluYWwgc3RhdGljIFN0cmluZyBDUF9WQVJJQUJM
RV9QUkVGRVJFTkNFU19QUkVGSVggPSBKYXZhQ29yZS5QTFVHSU5fSUQrIi5jbGFzc3BhdGhWYXJp
YWJsZS4iOyAvLyROT04tTkxTLTEkCiAJcHVibGljIGZpbmFsIHN0YXRpYyBTdHJpbmcgQ1BfQ09O
VEFJTkVSX1BSRUZFUkVOQ0VTX1BSRUZJWCA9IEphdmFDb3JlLlBMVUdJTl9JRCsiLmNsYXNzcGF0
aENvbnRhaW5lci4iOyAvLyROT04tTkxTLTEkCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9QYWNrYWdlRnJhZ21lbnRS
b290LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29yZS9QYWNrYWdlRnJhZ21lbnRSb290LmphdmEKaW5kZXggOWZiNTljNi4uNmFhMzFi
ZCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvcmUvUGFja2FnZUZyYWdtZW50Um9vdC5qYXZhCisrKyBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL1BhY2thZ2VGcmFn
bWVudFJvb3QuamF2YQpAQCAtMTAsNiArMTAsNyBAQAogICoqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiov
CiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlOwogCitpbXBvcnQgamF2YS5u
ZXQuVVJMOwogaW1wb3J0IGphdmEudXRpbC5BcnJheUxpc3Q7CiBpbXBvcnQgamF2YS51dGlsLkVu
dW1lcmF0aW9uOwogaW1wb3J0IGphdmEudXRpbC5NYXA7CkBAIC04MDcsNCArODA4LDE5IEBACiAJ
fQogfQogCitwdWJsaWMgVVJMIGdldEluZGV4UGF0aCgpIHsKKwl0cnkgeworCQlpZiAoZ2V0S2lu
ZCgpICE9IEtfQklOQVJZKSByZXR1cm4gbnVsbDsKKworCQlJQ2xhc3NwYXRoRW50cnkgZW50cnkg
PSAoKEphdmFQcm9qZWN0KSBnZXRQYXJlbnQoKSkuZ2V0Q2xhc3NwYXRoRW50cnlGb3IoZ2V0UGF0
aCgpKTsKKwkJVVJMIGluZGV4UGF0aDsKKwkJaWYgKGVudHJ5ICE9IG51bGwgJiYgKGluZGV4UGF0
aCA9ICgoQ2xhc3NwYXRoRW50cnkpZW50cnkpLmdldExpYnJhcnlJbmRleExvY2F0aW9uKCkpICE9
IG51bGwpCisJCQlyZXR1cm4gaW5kZXhQYXRoOworCQorCX0gY2F0Y2ggKEphdmFNb2RlbEV4Y2Vw
dGlvbiBlKSB7CisJCS8vIGlnbm9yZSBleGNlcHRpb24KKwl9CisJcmV0dXJuIG51bGw7Cit9CisK
IH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL3BsdWdpbi54bWwgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS9wbHVnaW4ueG1sCmluZGV4IDM3ODQyNTYuLjVkNjk3ODggMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL3BsdWdpbi54bWwKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvcGx1Z2luLnhtbApAQCAtMSw3ICsxLDcgQEAKIDw/eG1sIHZlcnNpb249IjEuMCIgZW5j
b2Rpbmc9IlVURi04Ij8+CiA8P2VjbGlwc2UgdmVyc2lvbj0iMy4wIj8+CiA8IS0tCi0gICAgQ29w
eXJpZ2h0IChjKSAyMDA0LCAyMDEwIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICAgIENv
cHlyaWdodCAoYykgMjAwNCwgMjAxMSBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAgICBB
bGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0
ZXJpYWxzCiAgICAgYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNs
aXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgICAgd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0
cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKQEAgLTE1OCw2ICsxNTgsMTEgQEAKIAkJY2xh
c3M9Im9yZy5lY2xpcHNlLmpkdC5jb3JlLkNoZWNrRGVidWdBdHRyaWJ1dGVzIgogCQlsaWJyYXJ5
PSJqZHRDb21waWxlckFkYXB0ZXIuamFyIj4KIAk8L2FudFRhc2s+CisJPGFudFRhc2sKKwkJbmFt
ZT0iZWNsaXBzZS5idWlsZEphckluZGV4IgorCQljbGFzcz0ib3JnLmVjbGlwc2UuamR0LmNvcmUu
QnVpbGRKYXJJbmRleCIKKwkJbGlicmFyeT0iamR0Q29tcGlsZXJBZGFwdGVyLmphciI+CisJPC9h
bnRUYXNrPgogPC9leHRlbnNpb24+CiAgICAgICAKIDwhLS0gPT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT0gLS0+CkBAIC0xOTYsNiArMjAxLDE3IEBACiA8L2V4dGVuc2lvbj4KIAogPCEtLSA9PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PSAtLT4KKzwhLS0gRXh0ZW5zaW9uOiBKYXZhIEdlbmVyYXRl
IEluZGV4ZXIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgLS0+Cis8IS0tID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IC0tPgorPGV4dGVuc2lvbgor
ICAgICAgaWQ9IkphdmFJbmRleGVyIgorICAgICAgcG9pbnQ9Im9yZy5lY2xpcHNlLmNvcmUucnVu
dGltZS5hcHBsaWNhdGlvbnMiPgorICAgCQk8YXBwbGljYXRpb24+CisgICAgICAJCTxydW4gY2xh
c3M9Im9yZy5lY2xpcHNlLmpkdC5jb3JlLmluZGV4LkphdmFJbmRleGVyQXBwbGljYXRpb24iIC8+
CisgICAJCTwvYXBwbGljYXRpb24+Cis8L2V4dGVuc2lvbj4KKworPCEtLSA9PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PSAtLT4KIDwhLS0gRXh0ZW5zaW9uOiBKYXZhIENvbnRlbnQgVHlwZXMgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0+CiA8
IS0tID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IC0tPgogPGV4dGVuc2lvbiBwb2ludD0ib3Jn
LmVjbGlwc2UuY29yZS5jb250ZW50dHlwZS5jb250ZW50VHlwZXMiPgpkaWZmIC0tZ2l0IGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9jb3JlL2luZGV4L0phdmFJ
bmRleGVyLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0
L2NvcmUvaW5kZXgvSmF2YUluZGV4ZXIuamF2YQpuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAw
MDAwMDAwLi4zYjdlZjBmCi0tLSAvZGV2L251bGwKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
c2VhcmNoL29yZy9lY2xpcHNlL2pkdC9jb3JlL2luZGV4L0phdmFJbmRleGVyLmphdmEKQEAgLTAs
MCArMSwzMiBAQAorLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCisgKiBDb3B5cmlnaHQgKGMpIDIw
MTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuDQorICogQWxsIHJpZ2h0cyByZXNlcnZlZC4g
VGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscw0KKyAqIGFyZSBtYWRl
IGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2Ug
djEuMA0KKyAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZh
aWxhYmxlIGF0DQorICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwN
CisgKg0KKyAqIENvbnRyaWJ1dG9yczoNCisgKiAgICAgSUJNIENvcnBvcmF0aW9uIC0gaW5pdGlh
bCBBUEkgYW5kIGltcGxlbWVudGF0aW9uDQorICoqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovDQorcGFj
a2FnZSBvcmcuZWNsaXBzZS5qZHQuY29yZS5pbmRleDsNCisNCitpbXBvcnQgamF2YS5pby5JT0V4
Y2VwdGlvbjsNCitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvcmUuc2VhcmNoLmlu
ZGV4aW5nLkRlZmF1bHRKYXZhSW5kZXhlcjsNCisNCisvKioNCisgKiBUT0RPIFNBVFlBTTogV3Jp
dGUgYSBwcm9wZXIgamF2YWRvYw0KKyAqIEBzaW5jZSAzLjgNCisgKi8NCitwdWJsaWMgY2xhc3Mg
SmF2YUluZGV4ZXIgew0KKw0KKwkvKioNCisJICogVE9ETyBTQVRZQU06IFdyaXRlIGEgamF2YWRv
Yw0KKwkgKiBAcGFyYW0gcGF0aFRvSmFyDQorCSAqIEBwYXJhbSBwYXRoVG9JbmRleEZpbGUNCisJ
ICogQHRocm93cyBJT0V4Y2VwdGlvbg0KKwkgKi8NCisJcHVibGljIHN0YXRpYyB2b2lkIGdlbmVy
YXRlSW5kZXhGb3JKYXIoU3RyaW5nIHBhdGhUb0phciwgU3RyaW5nIHBhdGhUb0luZGV4RmlsZSkg
dGhyb3dzIElPRXhjZXB0aW9uIHsNCisJCW5ldyBEZWZhdWx0SmF2YUluZGV4ZXIoKS5nZW5lcmF0
ZUluZGV4Rm9ySmFyKHBhdGhUb0phciwgcGF0aFRvSW5kZXhGaWxlKTsNCisJfQ0KKw0KK30NCmRp
ZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2Nv
cmUvaW5kZXgvSmF2YUluZGV4ZXJBcHBsaWNhdGlvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9jb3JlL2luZGV4L0phdmFJbmRleGVyQXBwbGljYXRp
b24uamF2YQpuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwLi40YjViOTMxCi0tLSAv
ZGV2L251bGwKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pk
dC9jb3JlL2luZGV4L0phdmFJbmRleGVyQXBwbGljYXRpb24uamF2YQpAQCAtMCwwICsxLDE1NCBA
QAorLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioNCisgKiAgQ29weXJpZ2h0IChjKSAyMDExIElCTSBD
b3Jwb3JhdGlvbiBhbmQgb3RoZXJzLg0KKyAqICBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHBy
b2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzDQorICogIGFyZSBtYWRlIGF2YWls
YWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMA0K
KyAqICB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJs
ZSBhdA0KKyAqICBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbA0KKyAq
IA0KKyAqICBDb250cmlidXRvcnM6DQorICogICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwg
QVBJIGFuZCBpbXBsZW1lbnRhdGlvbg0KKyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KK3BhY2th
Z2Ugb3JnLmVjbGlwc2UuamR0LmNvcmUuaW5kZXg7DQorDQoraW1wb3J0IGphdmEuaW8uRmlsZTsN
CitpbXBvcnQgamF2YS5pby5JT0V4Y2VwdGlvbjsNCitpbXBvcnQgamF2YS50ZXh0Lk1lc3NhZ2VG
b3JtYXQ7DQoraW1wb3J0IGphdmEudXRpbC5BcnJheUxpc3Q7DQorDQoraW1wb3J0IG9yZy5lY2xp
cHNlLmVxdWlub3guYXBwLklBcHBsaWNhdGlvbjsNCitpbXBvcnQgb3JnLmVjbGlwc2UuZXF1aW5v
eC5hcHAuSUFwcGxpY2F0aW9uQ29udGV4dDsNCitpbXBvcnQgb3JnLmVjbGlwc2Uub3NnaS51dGls
Lk5MUzsNCisNCisvKioNCisgKiBJbXBsZW1lbnRzIGFuIEVjbGlwc2UgQXBwbGljYXRpb24gZm9y
IG9yZy5lY2xpcHNlLmpkdC5jb3JlLkphdmFJbmRleGVyLg0KKyAqIA0KKyAqIFRPRE8gU0FUWUFN
OiBJbXByb3ZlIHRoZSBqYXZhZG9jIHRvIGluY2x1ZGUgdGhlIGFyZ3VtZW50cy4NCisgKiA8cD4N
CisgKiBPbiBNYWNPUywgd2hlbiBpbnZva2VkIHVzaW5nIHRoZSBFY2xpcHNlIGV4ZWN1dGFibGUs
IHRoZSAidXNlci5kaXIiIHByb3BlcnR5IGlzIHNldCB0byB0aGUgZm9sZGVyIGluIHdoaWNoIHRo
ZQ0KKyAqIGVjbGlwc2UuaW5pIGZpbGUgaXMgbG9jYXRlZC4gVGhpcyBtYWtlcyBpdCBoYXJkZXIg
dG8gdXNlIHJlbGF0aXZlIHBhdGhzIHRvIHBvaW50IHRvIHRoZSBmaWxlcyB0byBiZSBmb3JtYXR0
ZWQgb3IgdGhlDQorICogY29uZmlndXJhdGlvbiBmaWxlIHRvIHVzZSB0byBzZXQgdGhlIGNvZGUg
Zm9ybWF0dGVyJ3Mgb3B0aW9ucy4NCisgKiA8L3A+DQorICogDQorICogDQorICogQHNpbmNlIDMu
OA0KKyAqIEBub2luc3RhbnRpYXRlIFRoaXMgY2xhc3MgaXMgbm90IGludGVuZGVkIHRvIGJlIGlu
c3RhbnRpYXRlZCBieSBjbGllbnRzLg0KKyAqIEBub2V4dGVuZCBUaGlzIGNsYXNzIGlzIG5vdCBp
bnRlbmRlZCB0byBiZSBzdWJjbGFzc2VkIGJ5IGNsaWVudHMuDQorICovDQorcHVibGljIGNsYXNz
IEphdmFJbmRleGVyQXBwbGljYXRpb24gaW1wbGVtZW50cyBJQXBwbGljYXRpb24gew0KKw0KKwlw
cml2YXRlIGZpbmFsIHN0YXRpYyBjbGFzcyBNZXNzYWdlcyBleHRlbmRzIE5MUyB7DQorCQlwcml2
YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcgTUVTU0FHRVNfTkFNRSA9ICJvcmcuZWNsaXBzZS5qZHQu
Y29yZS5pbmRleC5tZXNzYWdlcyI7Ly8kTk9OLU5MUy0xJA0KKw0KKwkJcHVibGljIHN0YXRpYyBT
dHJpbmcgQ29tbWFuZExpbmVQcm9jZXNzaW5nOw0KKwkJcHVibGljIHN0YXRpYyBTdHJpbmcgQ29t
bWFuZExpbmVVc2FnZTsNCisJCXB1YmxpYyBzdGF0aWMgU3RyaW5nIENvbW1hbmRMaW5lT25seU91
dHB1dEVycm9yOw0KKwkJcHVibGljIHN0YXRpYyBTdHJpbmcgQ29tbWFuZExpbmVPbmx5T25lSmFy
RXJyb3I7DQorCQlwdWJsaWMgc3RhdGljIFN0cmluZyBDb21tYW5kTGluZUphck5vdFNwZWNpZmll
ZDsNCisJCXB1YmxpYyBzdGF0aWMgU3RyaW5nIENvbW1hbmRMaW5lSW5kZXhGaWxlTm90U3BlY2lm
aWVkOw0KKwkJcHVibGljIHN0YXRpYyBTdHJpbmcgQ2F1Z2h0RXhjZXB0aW9uOw0KKwkJcHVibGlj
IHN0YXRpYyBTdHJpbmcgQ29tbWFuZExpbmVKYXJGaWxlTm90RXhpc3Q7DQorDQorCQlzdGF0aWMg
ew0KKwkJCU5MUy5pbml0aWFsaXplTWVzc2FnZXMoTUVTU0FHRVNfTkFNRSwgTWVzc2FnZXMuY2xh
c3MpOw0KKwkJfQ0KKw0KKwkJcHVibGljIHN0YXRpYyBTdHJpbmcgYmluZChTdHJpbmcgbWVzc2Fn
ZSkgew0KKwkJCXJldHVybiBiaW5kKG1lc3NhZ2UsIG51bGwpOw0KKwkJfQ0KKw0KKwkJcHVibGlj
IHN0YXRpYyBTdHJpbmcgYmluZChTdHJpbmcgbWVzc2FnZSwgT2JqZWN0IGJpbmRpbmcpIHsNCisJ
CQlyZXR1cm4gYmluZChtZXNzYWdlLCBuZXcgT2JqZWN0W10geyBiaW5kaW5nIH0pOw0KKwkJfQ0K
Kw0KKwkJcHVibGljIHN0YXRpYyBTdHJpbmcgYmluZChTdHJpbmcgbWVzc2FnZSwgT2JqZWN0IGJp
bmRpbmcxLCBPYmplY3QgYmluZGluZzIpIHsNCisJCQlyZXR1cm4gYmluZChtZXNzYWdlLCBuZXcg
T2JqZWN0W10geyBiaW5kaW5nMSwgYmluZGluZzIgfSk7DQorCQl9DQorDQorCQlwdWJsaWMgc3Rh
dGljIFN0cmluZyBiaW5kKFN0cmluZyBtZXNzYWdlLCBPYmplY3RbXSBiaW5kaW5ncykgew0KKwkJ
CXJldHVybiBNZXNzYWdlRm9ybWF0LmZvcm1hdChtZXNzYWdlLCBiaW5kaW5ncyk7DQorCQl9DQor
CX0NCisNCisJcHJpdmF0ZSBTdHJpbmcgamFyVG9JbmRleDsNCisJcHJpdmF0ZSBTdHJpbmcgaW5k
ZXhGaWxlOw0KKwlwcml2YXRlIGJvb2xlYW4gdmVyYm9zZSA9IGZhbHNlOw0KKwlwcml2YXRlIHN0
YXRpYyBmaW5hbCBTdHJpbmcgUERFX0xBVU5DSCA9ICItcGRlbGF1bmNoIjsgLy8kTk9OLU5MUy0x
JA0KKwlwcml2YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcgQVJHX0hFTFAgPSAiLWhlbHAiOyAvLyRO
T04tTkxTLTEkDQorCXByaXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZyBBUkdfVkVSQk9TRSA9ICIt
dmVyYm9zZSI7IC8vJE5PTi1OTFMtMSQNCisJcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIEFS
R19PVVRQVVQgPSAiLW91dHB1dCI7IC8vJE5PTi1OTFMtMSQNCisNCisJcHJpdmF0ZSB2b2lkIGRp
c3BsYXlIZWxwKCkgew0KKwkJU3lzdGVtLm91dC5wcmludGxuKE1lc3NhZ2VzLmJpbmQoTWVzc2Fn
ZXMuQ29tbWFuZExpbmVVc2FnZSkpOw0KKwl9DQorDQorCXByaXZhdGUgdm9pZCBkaXNwbGF5RXJy
b3IoU3RyaW5nIG1lc3NhZ2UpIHsNCisJCVN5c3RlbS5lcnIucHJpbnRsbihtZXNzYWdlKTsNCisJ
CVN5c3RlbS5vdXQucHJpbnRsbigpOw0KKwkJZGlzcGxheUhlbHAoKTsNCisJfQ0KKw0KKwlwcml2
YXRlIGJvb2xlYW4gcHJvY2Vzc0NvbW1hbmRMaW5lKFN0cmluZ1tdIGFyZ3NBcnJheSkgew0KKwkJ
QXJyYXlMaXN0IGFyZ3MgPSBuZXcgQXJyYXlMaXN0KCk7DQorCQlmb3IgKGludCBpID0gMCwgbWF4
ID0gYXJnc0FycmF5Lmxlbmd0aDsgaSA8IG1heDsgaSsrKSB7DQorCQkJYXJncy5hZGQoYXJnc0Fy
cmF5W2ldKTsNCisJCX0NCisJCWludCBpbmRleCA9IDA7DQorCQlmaW5hbCBpbnQgYXJnQ291bnQg
PSBhcmdzQXJyYXkubGVuZ3RoOw0KKw0KKwkJbG9vcDogd2hpbGUgKGluZGV4IDwgYXJnQ291bnQp
IHsNCisJCQlTdHJpbmcgY3VycmVudEFyZyA9IGFyZ3NBcnJheVtpbmRleCsrXTsNCisJCQlpZiAo
UERFX0xBVU5DSC5lcXVhbHMoY3VycmVudEFyZykpIHsNCisJCQkJY29udGludWUgbG9vcDsNCisJ
CQl9IGVsc2UgaWYgKEFSR19IRUxQLmVxdWFscyhjdXJyZW50QXJnKSkgew0KKwkJCQlkaXNwbGF5
SGVscCgpOw0KKwkJCQlyZXR1cm4gZmFsc2U7DQorCQkJfSBlbHNlIGlmIChBUkdfVkVSQk9TRS5l
cXVhbHMoY3VycmVudEFyZykpIHsNCisJCQkJdGhpcy52ZXJib3NlID0gdHJ1ZTsNCisJCQkJY29u
dGludWUgbG9vcDsNCisJCQl9IGVsc2UgaWYgKEFSR19PVVRQVVQuZXF1YWxzKGN1cnJlbnRBcmcp
KSB7DQorCQkJCWlmICh0aGlzLmluZGV4RmlsZSAhPSBudWxsIHx8IGluZGV4ID09IGFyZ0NvdW50
KSB7DQorCQkJCQlkaXNwbGF5RXJyb3IoTWVzc2FnZXMuYmluZChNZXNzYWdlcy5Db21tYW5kTGlu
ZU9ubHlPdXRwdXRFcnJvcikpOw0KKwkJCQkJcmV0dXJuIGZhbHNlOw0KKwkJCQl9DQorCQkJCXRo
aXMuaW5kZXhGaWxlID0gYXJnc0FycmF5W2luZGV4KytdOw0KKwkJCX0gZWxzZSB7DQorCQkJCWlm
ICh0aGlzLmphclRvSW5kZXggIT0gbnVsbCkgew0KKwkJCQkJZGlzcGxheUVycm9yKE1lc3NhZ2Vz
LmJpbmQoTWVzc2FnZXMuQ29tbWFuZExpbmVPbmx5T25lSmFyRXJyb3IpKTsNCisJCQkJCXJldHVy
biBmYWxzZTsNCisJCQkJfQ0KKwkJCQl0aGlzLmphclRvSW5kZXggPSBjdXJyZW50QXJnOw0KKwkJ
CX0NCisJCX0NCisJCXJldHVybiB0cnVlOw0KKwl9DQorDQorCXB1YmxpYyBPYmplY3Qgc3RhcnQo
SUFwcGxpY2F0aW9uQ29udGV4dCBjb250ZXh0KSB0aHJvd3MgRXhjZXB0aW9uIHsNCisJCWJvb2xl
YW4gZXhlY3V0ZSA9IHByb2Nlc3NDb21tYW5kTGluZSgoU3RyaW5nW10pIGNvbnRleHQuZ2V0QXJn
dW1lbnRzKCkuZ2V0KElBcHBsaWNhdGlvbkNvbnRleHQuQVBQTElDQVRJT05fQVJHUykpOw0KKwkJ
aWYgKGV4ZWN1dGUpIHsNCisJCQlpZiAodGhpcy5qYXJUb0luZGV4ICE9IG51bGwgJiYgdGhpcy5p
bmRleEZpbGUgIT0gbnVsbCkgew0KKwkJCQlGaWxlIGYgPSBuZXcgRmlsZSh0aGlzLmphclRvSW5k
ZXgpOw0KKwkJCQlpZiAoIWYuZXhpc3RzKCkpIHsNCisJCQkJCVN5c3RlbS5vdXQucHJpbnRsbihN
ZXNzYWdlcy5iaW5kKE1lc3NhZ2VzLkNvbW1hbmRMaW5lSmFyRmlsZU5vdEV4aXN0LCB0aGlzLmph
clRvSW5kZXgpKTsNCisJCQkJfQ0KKwkJCQlpZiAodGhpcy52ZXJib3NlKSB7DQorCQkJCQlTeXN0
ZW0ub3V0LnByaW50bG4oTWVzc2FnZXMuYmluZChNZXNzYWdlcy5Db21tYW5kTGluZVByb2Nlc3Np
bmcsIHRoaXMuamFyVG9JbmRleCwgdGhpcy5pbmRleEZpbGUpKTsNCisJCQkJfQ0KKwkJCQl0cnkg
ew0KKwkJCQkJSmF2YUluZGV4ZXIuZ2VuZXJhdGVJbmRleEZvckphcih0aGlzLmphclRvSW5kZXgs
IHRoaXMuaW5kZXhGaWxlKTsNCisJCQkJfSBjYXRjaCAoSU9FeGNlcHRpb24gZSkgew0KKwkJCQkJ
U3lzdGVtLm91dC5wcmludGxuKE1lc3NhZ2VzLmJpbmQoTWVzc2FnZXMuQ2F1Z2h0RXhjZXB0aW9u
LCAiSU9FeGNlcHRpb24iLCBlLmdldExvY2FsaXplZE1lc3NhZ2UoKSkpOyAvLyROT04tTkxTLTEk
DQorCQkJCX0NCisJCQl9IGVsc2UgaWYgKHRoaXMuamFyVG9JbmRleCA9PSBudWxsKSB7DQorCQkJ
CVN5c3RlbS5vdXQucHJpbnRsbihNZXNzYWdlcy5iaW5kKE1lc3NhZ2VzLkNvbW1hbmRMaW5lSmFy
Tm90U3BlY2lmaWVkKSk7DQorCQkJfSBlbHNlIGlmICh0aGlzLmluZGV4RmlsZSA9PSBudWxsKSB7
DQorCQkJCVN5c3RlbS5vdXQucHJpbnRsbihNZXNzYWdlcy5iaW5kKE1lc3NhZ2VzLkNvbW1hbmRM
aW5lSW5kZXhGaWxlTm90U3BlY2lmaWVkKSk7DQorCQkJfQ0KKwkJfQ0KKwkJcmV0dXJuIElBcHBs
aWNhdGlvbi5FWElUX09LOw0KKwl9DQorDQorCXB1YmxpYyB2b2lkIHN0b3AoKSB7DQorCQkvLyBk
byBub3RoaW5nDQorCX0NCisNCit9DQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
c2VhcmNoL29yZy9lY2xpcHNlL2pkdC9jb3JlL2luZGV4L21lc3NhZ2VzLnByb3BlcnRpZXMgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2NvcmUvaW5kZXgvbWVz
c2FnZXMucHJvcGVydGllcwpuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwLi43MDRi
MjlmCi0tLSAvZGV2L251bGwKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL2luZGV4L21lc3NhZ2VzLnByb3BlcnRpZXMKQEAgLTAsMCArMSwyOCBA
QAorIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIworIyBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMDYgSUJN
IENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisjIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJv
Z3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKKyMgYXJlIG1hZGUgYXZhaWxhYmxl
IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCisjIHdo
aWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0Cisj
IGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCisjCisjIENvbnRyaWJ1
dG9yczoKKyMgICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRh
dGlvbgorIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIworQ29tbWFuZExpbmVVc2FnZT1Vc2FnZTogZWNs
aXBzZSAtYXBwbGljYXRpb24gb3JnLmVjbGlwc2UuamR0LmNvcmUuSmF2YUNvZGVHZW5lcmF0ZUlu
ZGV4IFsgT1BUSU9OUyBdIC1vdXRwdXQgPGluZGV4RmlsZT4gPGphcmZpbGU+XG5cCitcblwKK1wg
ICAtb3V0cHV0IDxpbmRleEZpbGU+IFRoZSBpbmRleCBmaWxlIHRvIGJlIGdlbmVyYXRlZC5cblwK
K1wKK1wgICA8amFyZmlsZT4gICBKYXIgZmlsZSBmb3Igd2hpY2ggaW5kZXggbmVlZHMgdG8gYmUg
Z2VuZXJhdGVkLlxuXAorXAorXG5cCitcIE9QVElPTlM6XG5cCitcblwKK1wgICAtaGVscCAgICAg
ICAgICAgICAgICBEaXNwbGF5IHRoaXMgbWVzc2FnZS5cblwKK1wgICAtdmVyYm9zZSAgICAgICAg
ICAgICBCZSB2ZXJib3NlIGFib3V0IHRoZSBqb2IuCitDb21tYW5kTGluZVByb2Nlc3Npbmc9R2Vu
ZXJhdGluZyBpbmRleCB7MX0gZm9yIHRoZSBqYXIgezB9LgorQ29tbWFuZExpbmVPbmx5T3V0cHV0
RXJyb3I9T25seSBvbmUgb3V0cHV0IG5lZWQgdG8gYmUgc3BlY2lmaWVkLgorQ29tbWFuZExpbmVP
bmx5T25lSmFyRXJyb3I9T25seSBvbmUgamFyIGZpbGUgbmVlZCB0byBiZSBzcGVjaWZpZWQuCitD
b21tYW5kTGluZUphck5vdFNwZWNpZmllZD1ObyBqYXIgZmlsZSBpcyBzcGVjaWZpZWQuCitDb21t
YW5kTGluZUluZGV4RmlsZU5vdFNwZWNpZmllZD1ObyBpbmRleCBmaWxlIGlzIHNwZWNpZmllZC4K
K0NhdWdodEV4Y2VwdGlvbj1FeGNlcHRpb24gezB9IC0gezF9LgorQ29tbWFuZExpbmVKYXJGaWxl
Tm90RXhpc3Q9ezB9IGRvZXMgbm90IGV4aXN0LgpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9pbmRleGlu
Zy9BZGRKYXJGaWxlVG9JbmRleC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9pbmRleGluZy9BZGRKYXJGaWxlVG9J
bmRleC5qYXZhCmluZGV4IDE2ODkwNGYuLmQ2ZmE1ZWQgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gvaW5k
ZXhpbmcvQWRkSmFyRmlsZVRvSW5kZXguamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9z
ZWFyY2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNoL2luZGV4aW5nL0FkZEph
ckZpbGVUb0luZGV4LmphdmEKQEAgLTEsNSArMSw1IEBACiAvKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KgotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEwIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJz
LgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJz
LgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55
aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0
aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlz
IGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdApAQCAtMTMsNiArMTMsNyBAQAogaW1w
b3J0IGphdmEuaW8uRmlsZTsKIGltcG9ydCBqYXZhLmlvLklPRXhjZXB0aW9uOwogaW1wb3J0IGph
dmEubmV0LlVSSTsKK2ltcG9ydCBqYXZhLm5ldC5VUkw7CiBpbXBvcnQgamF2YS51dGlsLkVudW1l
cmF0aW9uOwogaW1wb3J0IGphdmEudXRpbC56aXAuWmlwRW50cnk7CiBpbXBvcnQgamF2YS51dGls
LnppcC5aaXBGaWxlOwpAQCAtNDIsMTQgKzQzLDE3IEBACiAJcHJpdmF0ZSBzdGF0aWMgZmluYWwg
Y2hhciBKQVJfU0VQQVJBVE9SID0gSUphdmFTZWFyY2hTY29wZS5KQVJfRklMRV9FTlRSWV9TRVBB
UkFUT1IuY2hhckF0KDApOwogCUlGaWxlIHJlc291cmNlOwogCVNjYW5uZXIgc2Nhbm5lcjsKKwlw
cml2YXRlIFVSTCBpbmRleEZpbGU7CiAKLQlwdWJsaWMgQWRkSmFyRmlsZVRvSW5kZXgoSUZpbGUg
cmVzb3VyY2UsIEluZGV4TWFuYWdlciBtYW5hZ2VyKSB7CisJcHVibGljIEFkZEphckZpbGVUb0lu
ZGV4KElGaWxlIHJlc291cmNlLCBVUkwgaW5kZXhGaWxlLCBJbmRleE1hbmFnZXIgbWFuYWdlcikg
ewogCQlzdXBlcihyZXNvdXJjZS5nZXRGdWxsUGF0aCgpLCBtYW5hZ2VyKTsKIAkJdGhpcy5yZXNv
dXJjZSA9IHJlc291cmNlOworCQl0aGlzLmluZGV4RmlsZSA9IGluZGV4RmlsZTsKIAl9Ci0JcHVi
bGljIEFkZEphckZpbGVUb0luZGV4KElQYXRoIGphclBhdGgsIEluZGV4TWFuYWdlciBtYW5hZ2Vy
KSB7CisJcHVibGljIEFkZEphckZpbGVUb0luZGV4KElQYXRoIGphclBhdGgsIFVSTCBpbmRleEZp
bGUsIEluZGV4TWFuYWdlciBtYW5hZ2VyKSB7CiAJCS8vIGV4dGVybmFsIEpBUiBzY2VuYXJpbyAt
IG5vIHJlc291cmNlCiAJCXN1cGVyKGphclBhdGgsIG1hbmFnZXIpOworCQl0aGlzLmluZGV4Rmls
ZSA9IGluZGV4RmlsZTsKIAl9CiAJcHVibGljIGJvb2xlYW4gZXF1YWxzKE9iamVjdCBvKSB7CiAJ
CWlmIChvIGluc3RhbmNlb2YgQWRkSmFyRmlsZVRvSW5kZXgpIHsKQEAgLTcxLDYgKzc1LDEyIEBA
CiAKIAkJaWYgKHRoaXMuaXNDYW5jZWxsZWQgfHwgcHJvZ3Jlc3NNb25pdG9yICE9IG51bGwgJiYg
cHJvZ3Jlc3NNb25pdG9yLmlzQ2FuY2VsZWQoKSkgcmV0dXJuIHRydWU7CiAKKwkJaWYgKHRoaXMu
aW5kZXhGaWxlICE9IG51bGwpIHsKKwkJCS8vVE9ETyBTQVRZQU06IE5lZWQgdG8gdGFrZSBjYXJl
IGlmIHRoZSBpbmRleEZpbGUgaXMgaW4gYSBqYXIuCisJCQlib29sZWFuIGFkZGVkID0gdGhpcy5t
YW5hZ2VyLmFkZEluZGV4KHRoaXMuY29udGFpbmVyUGF0aCwgbmV3IFBhdGgodGhpcy5pbmRleEZp
bGUuZ2V0RmlsZSgpKSk7CisJCQlpZiAoYWRkZWQpIHJldHVybiB0cnVlOwkKKwkJfQorCiAJCXRy
eSB7CiAJCQkvLyBpZiBpbmRleCBpcyBhbHJlYWR5IGNhY2hlZCwgdGhlbiBkbyBub3QgcGVyZm9y
bSBhbnkgY2hlY2sKIAkJCS8vIE1VU1QgcmVzZXQgdGhlIEluZGV4TWFuYWdlciBpZiBhIGphciBm
aWxlIGlzIGNoYW5nZWQKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gvaW5kZXhpbmcvSW5kZXhBbGxQcm9q
ZWN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvcmUvc2VhcmNoL2luZGV4aW5nL0luZGV4QWxsUHJvamVjdC5qYXZhCmluZGV4IDQz
MTM2MjEuLmU2ODIzMGIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gvaW5kZXhpbmcvSW5kZXhBbGxQcm9q
ZWN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9pbmRleGluZy9JbmRleEFsbFByb2plY3QuamF2YQpAQCAt
MSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIw
MDAsIDIwMDkgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIw
MDAsIDIwMTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2Vy
dmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUg
bWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNl
bnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMg
YXZhaWxhYmxlIGF0CkBAIC03Nyw3ICs3Nyw3IEBACiAJCQkJCWlmIChlbnRyeS5nZXRFbnRyeUtp
bmQoKSA9PSBJQ2xhc3NwYXRoRW50cnkuQ1BFX0xJQlJBUlkgJiYgZW50cnkuZ2V0UGF0aCgpLmVx
dWFscyhwcm9qZWN0UGF0aCkpIHsKIAkJCQkJCS8vIHRoZSBwcm9qZWN0IGlzIGFsc28gYSBsaWJy
YXJ5IGZvbGRlciAoc2VlIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNn
aT9pZD04OTgxNSkKIAkJCQkJCS8vIGVuc3VyZSBhIGpvYiBleGlzdHMgdG8gaW5kZXggaXQgYXMg
YSBiaW5hcnkgZm9sZGVyCi0JCQkJCQl0aGlzLm1hbmFnZXIuaW5kZXhMaWJyYXJ5KHByb2plY3RQ
YXRoLCB0aGlzLnByb2plY3QpOworCQkJCQkJdGhpcy5tYW5hZ2VyLmluZGV4TGlicmFyeShwcm9q
ZWN0UGF0aCwgdGhpcy5wcm9qZWN0LCAoKENsYXNzcGF0aEVudHJ5KWVudHJ5KS5nZXRMaWJyYXJ5
SW5kZXhMb2NhdGlvbigpKTsKIAkJCQkJCXJldHVybiB0cnVlOwogCQkJCQl9CiAJCQkJfQpkaWZm
IC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb3JlL3NlYXJjaC9pbmRleGluZy9JbmRleE1hbmFnZXIuamF2YSBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gvaW5k
ZXhpbmcvSW5kZXhNYW5hZ2VyLmphdmEKaW5kZXggZjA4YzI0OS4uOTBkODRlMCAxMDA2NDQKLS0t
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b3JlL3NlYXJjaC9pbmRleGluZy9JbmRleE1hbmFnZXIuamF2YQorKysgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNoL2luZGV4
aW5nL0luZGV4TWFuYWdlci5qYXZhCkBAIC0xLDUgKzEsNSBAQAogLyoqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMCBJQk0gQ29ycG9yYXRpb24gYW5kIG90
aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMSBJQk0gQ29ycG9yYXRpb24gYW5kIG90
aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29t
cGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMg
b2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMg
dGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKQEAgLTExLDYgKzExLDcgQEAK
IHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvcmUuc2VhcmNoLmluZGV4aW5nOwog
CiBpbXBvcnQgamF2YS5pby4qOworaW1wb3J0IGphdmEubmV0LlVSTDsKIGltcG9ydCBqYXZhLnV0
aWwuKjsKIGltcG9ydCBqYXZhLnV0aWwuemlwLkNSQzMyOwogCkBAIC01MywxMiArNTQsMTQgQEAK
IAkvLyBrZXkgPSBpbmRleExvY2F0aW9uIHBhdGgsIHZhbHVlID0gaW5kZXggc3RhdGUgaW50ZWdl
cgogCXByaXZhdGUgU2ltcGxlTG9va3VwVGFibGUgaW5kZXhTdGF0ZXMgPSBudWxsOwogCXByaXZh
dGUgRmlsZSBzYXZlZEluZGV4TmFtZXNGaWxlID0gbmV3IEZpbGUoZ2V0U2F2ZWRJbmRleGVzRGly
ZWN0b3J5KCksICJzYXZlZEluZGV4TmFtZXMudHh0Iik7IC8vJE5PTi1OTFMtMSQKKwlwcml2YXRl
IEZpbGUgaW5kZXhOYW1lc01hcEZpbGUgPSBuZXcgRmlsZShnZXRTYXZlZEluZGV4ZXNEaXJlY3Rv
cnkoKSwgImluZGV4TmFtZXNNYXAudHh0Iik7IC8vJE5PTi1OTFMtMSQKIAlwcml2YXRlIEZpbGUg
cGFydGljaXBhbnRJbmRleE5hbWVzRmlsZSA9IG5ldyBGaWxlKGdldFNhdmVkSW5kZXhlc0RpcmVj
dG9yeSgpLCAicGFydGljaXBhbnRzSW5kZXhOYW1lcy50eHQiKTsgLy8kTk9OLU5MUy0xJAogCXBy
aXZhdGUgYm9vbGVhbiBqYXZhTGlrZU5hbWVzQ2hhbmdlZCA9IHRydWU7CiAJcHVibGljIHN0YXRp
YyBmaW5hbCBJbnRlZ2VyIFNBVkVEX1NUQVRFID0gbmV3IEludGVnZXIoMCk7CiAJcHVibGljIHN0
YXRpYyBmaW5hbCBJbnRlZ2VyIFVQREFUSU5HX1NUQVRFID0gbmV3IEludGVnZXIoMSk7CiAJcHVi
bGljIHN0YXRpYyBmaW5hbCBJbnRlZ2VyIFVOS05PV05fU1RBVEUgPSBuZXcgSW50ZWdlcigyKTsK
IAlwdWJsaWMgc3RhdGljIGZpbmFsIEludGVnZXIgUkVCVUlMRElOR19TVEFURSA9IG5ldyBJbnRl
Z2VyKDMpOworCXB1YmxpYyBzdGF0aWMgZmluYWwgSW50ZWdlciBSRVVTRV9TVEFURSA9IG5ldyBJ
bnRlZ2VyKDQpOwogCQogCS8vIHNlYXJjaCBwYXJ0aWNpcGFudHMgd2hvIHJlZ2lzdGVyIGluZGV4
ZXMgd2l0aCB0aGUgaW5kZXggbWFuYWdlcgogCXByaXZhdGUgU2ltcGxlTG9va3VwVGFibGUgcGFy
dGljaXBhbnRzQ29udGFpbmVycyA9IG51bGw7CkBAIC0yNTUsNiArMjU4LDE1IEBACiAJCQkJCXJl
dHVybiBpbmRleDsKIAkJCQl9IGNhdGNoIChJT0V4Y2VwdGlvbiBlKSB7CiAJCQkJCS8vIGZhaWxl
ZCB0byByZWFkIHRoZSBleGlzdGluZyBmaWxlIG9yIGl0cyBubyBsb25nZXIgY29tcGF0aWJsZQor
CQkJCQlpZiAoY3VycmVudEluZGV4U3RhdGUgPT0gUkVVU0VfU1RBVEUpIHsKKwkJCQkJCS8vIHN1
cHBvc2VkIHRvIGJlIGluIHJldXNlIHN0YXRlIGJ1dCBlcnJvciBpbiB0aGUgaW5kZXggZmlsZSwg
c28gcmVpbmRleC4KKwkJCQkJCWlmIChWRVJCT1NFKQorCQkJCQkJCVV0aWwudmVyYm9zZSgiLT4g
Y2Fubm90IHJldXNlIGdpdmVuIGluZGV4OiAiK2luZGV4TG9jYXRpb25TdHJpbmcrIiBwYXRoOiAi
K2NvbnRhaW5lclBhdGhTdHJpbmcpOyAvLyROT04tTkxTLTEkIC8vJE5PTi1OTFMtMiQKKwkJCQkJ
CXRoaXMuaW5kZXhMb2NhdGlvbnMucHV0KGNvbnRhaW5lclBhdGgsIG51bGwpOworCQkJCQkJaW5k
ZXhMb2NhdGlvbiA9IGNvbXB1dGVJbmRleExvY2F0aW9uKGNvbnRhaW5lclBhdGgpOworCQkJCQkJ
cmVidWlsZEluZGV4KGluZGV4TG9jYXRpb24sIGNvbnRhaW5lclBhdGgpOworCQkJCQkJcmV0dXJu
IG51bGw7CisJCQkJCX0KIAkJCQkJaWYgKGN1cnJlbnRJbmRleFN0YXRlICE9IFJFQlVJTERJTkdf
U1RBVEUpIHsgLy8gcmVidWlsZCBpbmRleCBpZiBleGlzdGluZyBmaWxlIGlzIGNvcnJ1cHQsIHVu
bGVzcyB0aGUgaW5kZXggaXMgYWxyZWFkeSBiZWluZyByZWJ1aWx0CiAJCQkJCQlpZiAoVkVSQk9T
RSkKIAkJCQkJCQlVdGlsLnZlcmJvc2UoIi0+IGNhbm5vdCByZXVzZSBleGlzdGluZyBpbmRleDog
IitpbmRleExvY2F0aW9uU3RyaW5nKyIgcGF0aDogIitjb250YWluZXJQYXRoU3RyaW5nKTsgLy8k
Tk9OLU5MUy0xJCAvLyROT04tTkxTLTIkCkBAIC0yNjgsNiArMjgwLDcgQEAKIAkJCQlyZWJ1aWxk
SW5kZXgoaW5kZXhMb2NhdGlvbiwgY29udGFpbmVyUGF0aCk7CiAJCQkJcmV0dXJuIG51bGw7CiAJ
CQl9CisJCQkvL1RPRE8gU0FUWUFNOiBzaG91bGQgZG8gc29tZXRoaW5nIGlmIGluIHJldXNlIHN0
YXRlCiAJCX0KIAkJLy8gaW5kZXggd2Fzbid0IGZvdW5kIG9uIGRpc2ssIGNvbnNpZGVyIGNyZWF0
aW5nIGFuIGVtcHR5IG5ldyBvbmUKIAkJaWYgKGNyZWF0ZUlmTWlzc2luZykgewpAQCAtMzE1LDcg
KzMyOCw3IEBACiAJCQlJUGF0aCBjb250YWluZXJQYXRoID0gKElQYXRoKSB0aGlzLmluZGV4TG9j
YXRpb25zLmtleUZvclZhbHVlKGluZGV4TG9jYXRpb24pOwogCQkJaWYgKGNvbnRhaW5lclBhdGgg
IT0gbnVsbCkgey8vIHNhbml0eSBjaGVjawogCQkJCWluZGV4ID0gZ2V0SW5kZXgoY29udGFpbmVy
UGF0aCwgaW5kZXhMb2NhdGlvbiwgdHJ1ZSAvKnJldXNlIGluZGV4IGZpbGUqLywgZmFsc2UgLypk
byBub3QgY3JlYXRlIGlmIG5vbmUqLyk7Ci0JCQkJaWYgKGluZGV4ICE9IG51bGwgJiYgdGhpcy5q
YXZhTGlrZU5hbWVzQ2hhbmdlZCAmJiAhaW5kZXguaXNJbmRleEZvckphcigpKSB7CisJCQkJaWYg
KGluZGV4ICE9IG51bGwgJiYgdGhpcy5qYXZhTGlrZU5hbWVzQ2hhbmdlZCAmJiAhaW5kZXguaXNJ
bmRleEZvckphcigpKSB7IC8vVE9ETyBTQVRZQU06IHNob3VsZG4ndCBkZWxldGUgdGhlIHByZS1p
bmRleCBmaWxlcwogCQkJCQkvLyBXaGVuIGEgY2hhbmdlIGluIGphdmEgbGlrZSBuYW1lcyBleHRl
bnNpb24gaGFzIGJlZW4gZGV0ZWN0ZWQsIGFsbAogCQkJCQkvLyBub24gamFyIGZpbGVzIGluZGV4
ZXMgKGkuZS4gY29udGFpbmluZyBzb3VyY2VzKSBuZWVkIHRvIGJlIHJlYnVpbHQuCiAJCQkJCS8v
IHNlZSBidWcgaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTI4
NjM3OQpAQCAtMzg3LDYgKzQwMCw3IEBACiAJCXRoaXMuamF2YUxpa2VOYW1lc0NoYW5nZWQgPSBm
YWxzZTsKIAkJZGVsZXRlSW5kZXhGaWxlcygpOwogCX0KKwlyZWFkSW5kZXhNYXAoaW5kZXhlc0Rp
cmVjdG9yeVBhdGgudG9PU1N0cmluZygpKTsKIAlyZXR1cm4gdGhpcy5pbmRleFN0YXRlczsKIH0K
IHByaXZhdGUgSVBhdGggZ2V0UGFydGljaXBhbnRzQ29udGFpbmVyKElQYXRoIGluZGV4TG9jYXRp
b24pIHsKQEAgLTQ3NCw3ICs0ODgsNyBAQAogCQlmb3IgKGludCBpID0gMDsgaSA8IGVudHJpZXMu
bGVuZ3RoOyBpKyspIHsKIAkJCUlDbGFzc3BhdGhFbnRyeSBlbnRyeT0gZW50cmllc1tpXTsKIAkJ
CWlmIChlbnRyeS5nZXRFbnRyeUtpbmQoKSA9PSBJQ2xhc3NwYXRoRW50cnkuQ1BFX0xJQlJBUlkp
Ci0JCQkJaW5kZXhMaWJyYXJ5KGVudHJ5LmdldFBhdGgoKSwgcHJvamVjdCk7CisJCQkJaW5kZXhM
aWJyYXJ5KGVudHJ5LmdldFBhdGgoKSwgcHJvamVjdCwgKChDbGFzc3BhdGhFbnRyeSllbnRyeSku
Z2V0TGlicmFyeUluZGV4TG9jYXRpb24oKSk7CiAJCX0KIAl9IGNhdGNoKEphdmFNb2RlbEV4Y2Vw
dGlvbiBlKXsgLy8gY2Fubm90IHJldHJpZXZlIGNsYXNzcGF0aCBpbmZvCiAJfQpAQCAtNDg4LDE2
ICs1MDIsMTUgQEAKICAqIFRyaWdnZXIgYWRkaXRpb24gb2YgYSBsaWJyYXJ5IHRvIGFuIGluZGV4
CiAgKiBOb3RlOiB0aGUgYWN0dWFsIG9wZXJhdGlvbiBpcyBwZXJmb3JtZWQgaW4gYmFja2dyb3Vu
ZAogICovCi1wdWJsaWMgdm9pZCBpbmRleExpYnJhcnkoSVBhdGggcGF0aCwgSVByb2plY3QgcmVx
dWVzdGluZ1Byb2plY3QpIHsKK3B1YmxpYyB2b2lkIGluZGV4TGlicmFyeShJUGF0aCBwYXRoLCBJ
UHJvamVjdCByZXF1ZXN0aW5nUHJvamVjdCwgVVJMIGluZGV4RmlsZSkgewogCS8vIHJlcXVlc3Rp
bmdQcm9qZWN0IGlzIG5vIGxvbmdlciB1c2VkIHRvIGNhbmNlbCBqb2JzIGJ1dCBsZWF2ZSBpdCBo
ZXJlIGp1c3QgaW4gY2FzZQogCWlmIChKYXZhQ29yZS5nZXRQbHVnaW4oKSA9PSBudWxsKSByZXR1
cm47Ci0KLQlPYmplY3QgdGFyZ2V0ID0gSmF2YU1vZGVsLmdldFRhcmdldChwYXRoLCB0cnVlKTsK
IAlJbmRleFJlcXVlc3QgcmVxdWVzdCA9IG51bGw7CisJT2JqZWN0IHRhcmdldCA9IEphdmFNb2Rl
bC5nZXRUYXJnZXQocGF0aCwgdHJ1ZSk7CiAJaWYgKHRhcmdldCBpbnN0YW5jZW9mIElGaWxlKSB7
Ci0JCXJlcXVlc3QgPSBuZXcgQWRkSmFyRmlsZVRvSW5kZXgoKElGaWxlKSB0YXJnZXQsIHRoaXMp
OworCQlyZXF1ZXN0ID0gbmV3IEFkZEphckZpbGVUb0luZGV4KChJRmlsZSkgdGFyZ2V0LCBpbmRl
eEZpbGUsIHRoaXMpOwogCX0gZWxzZSBpZiAodGFyZ2V0IGluc3RhbmNlb2YgRmlsZSkgewotCQly
ZXF1ZXN0ID0gbmV3IEFkZEphckZpbGVUb0luZGV4KHBhdGgsIHRoaXMpOworCQlyZXF1ZXN0ID0g
bmV3IEFkZEphckZpbGVUb0luZGV4KHBhdGgsIGluZGV4RmlsZSwgdGhpcyk7CiAJfSBlbHNlIGlm
ICh0YXJnZXQgaW5zdGFuY2VvZiBJQ29udGFpbmVyKSB7CiAJCXJlcXVlc3QgPSBuZXcgSW5kZXhC
aW5hcnlGb2xkZXIoKElDb250YWluZXIpIHRhcmdldCwgdGhpcyk7CiAJfSBlbHNlIHsKQEAgLTUw
OCw2ICs1MjEsMTkgQEAKIAlpZiAoIWlzSm9iV2FpdGluZyhyZXF1ZXN0KSkKIAkJcmVxdWVzdChy
ZXF1ZXN0KTsKIH0KKworc3luY2hyb25pemVkIGJvb2xlYW4gYWRkSW5kZXgoSVBhdGggY29udGFp
bmVyUGF0aCwgSVBhdGggaW5kZXhGaWxlKSB7CisJdGhpcy5pbmRleFN0YXRlcy5wdXQoaW5kZXhG
aWxlLCBSRVVTRV9TVEFURSk7CisJdGhpcy5pbmRleExvY2F0aW9ucy5wdXQoY29udGFpbmVyUGF0
aCwgaW5kZXhGaWxlKTsKKwlJbmRleCBpbmRleCA9IGdldEluZGV4KGNvbnRhaW5lclBhdGgsIGlu
ZGV4RmlsZSwgdHJ1ZSwgZmFsc2UpOworCWlmIChpbmRleCA9PSBudWxsKSB7CisJCXRoaXMuaW5k
ZXhMb2NhdGlvbnMucHV0KGNvbnRhaW5lclBhdGgsIG51bGwpOworCQlyZXR1cm4gZmFsc2U7CisJ
fQorCXdyaXRlSW5kZXhNYXBGaWxlKCk7CisJcmV0dXJuIHRydWU7Cit9CisKIC8qKgogICogSW5k
ZXggdGhlIGNvbnRlbnQgb2YgdGhlIGdpdmVuIHNvdXJjZSBmb2xkZXIuCiAgKi8KQEAgLTU4NCw5
ICs2MTAsOSBAQAogCX0gZWxzZSBpZiAodGFyZ2V0IGluc3RhbmNlb2YgSUZvbGRlcikgewogCQly
ZXF1ZXN0ID0gbmV3IEluZGV4QmluYXJ5Rm9sZGVyKChJRm9sZGVyKSB0YXJnZXQsIHRoaXMpOwog
CX0gZWxzZSBpZiAodGFyZ2V0IGluc3RhbmNlb2YgSUZpbGUpIHsKLQkJcmVxdWVzdCA9IG5ldyBB
ZGRKYXJGaWxlVG9JbmRleCgoSUZpbGUpIHRhcmdldCwgdGhpcyk7CisJCXJlcXVlc3QgPSBuZXcg
QWRkSmFyRmlsZVRvSW5kZXgoKElGaWxlKSB0YXJnZXQsIG51bGwsIHRoaXMpOwogCX0gZWxzZSBp
ZiAodGFyZ2V0IGluc3RhbmNlb2YgRmlsZSkgewotCQlyZXF1ZXN0ID0gbmV3IEFkZEphckZpbGVU
b0luZGV4KGNvbnRhaW5lclBhdGgsIHRoaXMpOworCQlyZXF1ZXN0ID0gbmV3IEFkZEphckZpbGVU
b0luZGV4KGNvbnRhaW5lclBhdGgsIG51bGwsIHRoaXMpOwogCX0KIAlpZiAocmVxdWVzdCAhPSBu
dWxsKQogCQlyZXF1ZXN0KHJlcXVlc3QpOwpAQCAtNjQzLDcgKzY2OSw5IEBACiAJfQogCWlmIChp
bmRleEZpbGUgPT0gbnVsbCkKIAkJaW5kZXhGaWxlID0gbmV3IEZpbGUoaW5kZXhMb2NhdGlvbi50
b09TU3RyaW5nKCkpOyAvLyBpbmRleCBpcyBub3QgY2FjaGVkIHlldCwgYnV0IHN0aWxsIHdhbnQg
dG8gZGVsZXRlIHRoZSBmaWxlCi0JaWYgKGluZGV4RmlsZS5leGlzdHMoKSkgeworCWlmICh0aGlz
LmluZGV4U3RhdGVzLmdldChpbmRleExvY2F0aW9uKSA9PSBSRVVTRV9TVEFURSkgeworCQl0aGlz
LmluZGV4TG9jYXRpb25zLnB1dChjb250YWluZXJQYXRoLCBudWxsKTsKKwl9IGVsc2UgaWYgKGlu
ZGV4RmlsZS5leGlzdHMoKSkgewogCQlpZiAoREVCVUcpCiAJCQlVdGlsLnZlcmJvc2UoInJlbW92
aW5nIGluZGV4IGZpbGUgIiArIGluZGV4RmlsZSk7IC8vJE5PTi1OTFMtMSQKIAkJaW5kZXhGaWxl
LmRlbGV0ZSgpOwpAQCAtNjczLDcgKzcwMSw3IEBACiAJCQkJbG9jYXRpb25zID0gbmV3IElQYXRo
W21heF07CiAJCQlsb2NhdGlvbnNbY291bnQrK10gPSBpbmRleExvY2F0aW9uOwogCQkJRmlsZSBp
bmRleEZpbGUgPSBpbmRleC5nZXRJbmRleEZpbGUoKTsKLQkJCWlmIChpbmRleEZpbGUuZXhpc3Rz
KCkpIHsKKwkJCWlmIChpbmRleEZpbGUuZXhpc3RzKCkgJiYgdGhpcy5pbmRleFN0YXRlcy5nZXQo
aW5kZXhMb2NhdGlvbikgIT0gUkVVU0VfU1RBVEUpIHsKIAkJCQlpZiAoREVCVUcpCiAJCQkJCVV0
aWwudmVyYm9zZSgicmVtb3ZpbmcgaW5kZXggZmlsZSAiICsgaW5kZXhGaWxlKTsgLy8kTk9OLU5M
Uy0xJAogCQkJCWluZGV4RmlsZS5kZWxldGUoKTsKQEAgLTg5NCw2ICs5MjIsMzIgQEAKIAl9CiAJ
cmV0dXJuIG51bGw7CiB9CisKK3ByaXZhdGUgY2hhcltdW10gcmVhZEluZGV4TWFwKFN0cmluZyBk
aXJPU1N0cmluZykgeworCXRyeSB7CisJCWNoYXJbXSBpbmRleE1hcHMgPSBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIudXRpbC5VdGlsLmdldEZpbGVDaGFyQ29udGVudCh0aGlzLmlu
ZGV4TmFtZXNNYXBGaWxlLCBudWxsKTsKKwkJaWYgKGluZGV4TWFwcy5sZW5ndGggPiAwKSB7CisJ
CQljaGFyW11bXSBuYW1lcyA9IENoYXJPcGVyYXRpb24uc3BsaXRPbignXG4nLCBpbmRleE1hcHMp
OworCQkJaWYgKG5hbWVzLmxlbmd0aCA+PSAzKSB7CisJCQkJLy8gRmlyc3QgbGluZSBpcyBEaXNr
SW5kZXggc2lnbmF0dXJlICsgc2F2ZWQgcGx1Z2luIHdvcmtpbmcgbG9jYXRpb24gKHNlZSB3cml0
ZVNhdmVkSW5kZXhOYW1lc0ZpbGUoKSkKKwkJCQlTdHJpbmcgc2F2ZWRTaWduYXR1cmUgPSBEaXNr
SW5kZXguU0lHTkFUVVJFICsgIisiICsgZGlyT1NTdHJpbmc7IC8vJE5PTi1OTFMtMSQgLy9UT0RP
IFNBVFlBTSBTaG91bGQgZGlyT1NTdHJpbmcgbmVlZCB0byBiZSBzdG9yZWQKKwkJCQlpZiAoc2F2
ZWRTaWduYXR1cmUuZXF1YWxzKG5ldyBTdHJpbmcobmFtZXNbMF0pKSkgeworCQkJCQlmb3IgKGlu
dCBpID0gMSwgbCA9IG5hbWVzLmxlbmd0aC0xIDsgaSA8IGwgOyBpKz0yKSB7CisJCQkJCQlJUGF0
aCBpbmRleFBhdGggPSBuZXcgUGF0aChuZXcgU3RyaW5nKG5hbWVzW2ldKSk7CisJCQkJCQl0aGlz
LmluZGV4TG9jYXRpb25zLnB1dChuZXcgUGF0aChuZXcgU3RyaW5nKG5hbWVzW2krMV0pKSwgaW5k
ZXhQYXRoICk7CisJCQkJCQl0aGlzLmluZGV4U3RhdGVzLnB1dChpbmRleFBhdGgsIFJFVVNFX1NU
QVRFKTsKKwkJCQkJCS8vVE9ETyBTQVRZQU06IElzIHRoaXMgZ29vZCBlbm91Z2gKKwkJCQkJfQor
CQkJCX0KKwkJCQkJCisJCQl9CisJCX0KKwl9IGNhdGNoIChJT0V4Y2VwdGlvbiBpZ25vcmVkKSB7
CisJCWlmIChWRVJCT1NFKQorCQkJVXRpbC52ZXJib3NlKCJGYWlsZWQgdG8gcmVhZCBzYXZlZCBp
bmRleCBmaWxlIG5hbWVzIik7IC8vJE5PTi1OTFMtMSQKKwl9CisJcmV0dXJuIG51bGw7Cit9CiBw
cml2YXRlIHZvaWQgcmVhZFBhcnRpY2lwYW50c0luZGV4TmFtZXNGaWxlKCkgewogCVNpbXBsZUxv
b2t1cFRhYmxlIGNvbnRhaW5lcnMgPSBuZXcgU2ltcGxlTG9va3VwVGFibGUoMyk7CiAJdHJ5IHsK
QEAgLTk0Nyw2ICsxMDAxLDcgQEAKIAl9CiAKIAl3cml0ZVNhdmVkSW5kZXhOYW1lc0ZpbGUoKTsK
Kwl3cml0ZUluZGV4TWFwRmlsZSgpOwogCiAJaWYgKFZFUkJPU0UpIHsKIAkJaWYgKGluZGV4U3Rh
dGUgPT0gbnVsbCkgewpAQCAtMTA2NSw0ICsxMTIwLDQwIEBACiAJCX0KIAl9CiB9CisKK3ByaXZh
dGUgdm9pZCB3cml0ZUluZGV4TWFwRmlsZSgpIHsKKwlCdWZmZXJlZFdyaXRlciB3cml0ZXIgPSBu
dWxsOworCXRyeSB7CisJCXdyaXRlciA9IG5ldyBCdWZmZXJlZFdyaXRlcihuZXcgRmlsZVdyaXRl
cih0aGlzLmluZGV4TmFtZXNNYXBGaWxlKSk7CisJCXdyaXRlci53cml0ZShEaXNrSW5kZXguU0lH
TkFUVVJFKTsKKwkJd3JpdGVyLndyaXRlKCcrJyk7CisJCXdyaXRlci53cml0ZShnZXRKYXZhUGx1
Z2luV29ya2luZ0xvY2F0aW9uKCkudG9PU1N0cmluZygpKTsKKwkJd3JpdGVyLndyaXRlKCdcbicp
OworCQlPYmplY3RbXSBrZXlzID0gdGhpcy5pbmRleFN0YXRlcy5rZXlUYWJsZTsKKwkJT2JqZWN0
W10gc3RhdGVzID0gdGhpcy5pbmRleFN0YXRlcy52YWx1ZVRhYmxlOworCQlmb3IgKGludCBpID0g
MCwgbCA9IHN0YXRlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKKwkJCUlQYXRoIGtleSA9IChJUGF0
aCkga2V5c1tpXTsKKwkJCWlmIChrZXkgIT0gbnVsbCAmJiAha2V5LmlzRW1wdHkoKSAmJiBzdGF0
ZXNbaV0gPT0gUkVVU0VfU1RBVEUpIHsKKwkJCQlJUGF0aCB2YWx1ZSA9IChJUGF0aCl0aGlzLmlu
ZGV4TG9jYXRpb25zLmtleUZvclZhbHVlKGtleSk7CisJCQkJaWYgKHZhbHVlICE9IG51bGwpIHsK
KwkJCQkJd3JpdGVyLndyaXRlKGtleS50b09TU3RyaW5nKCkpOworCQkJCQl3cml0ZXIud3JpdGUo
J1xuJyk7CisJCQkJCXdyaXRlci53cml0ZSh2YWx1ZS50b09TU3RyaW5nKCkpOworCQkJCQl3cml0
ZXIud3JpdGUoJ1xuJyk7CisJCQkJfQorCQkJfQorCQl9CisJfSBjYXRjaCAoSU9FeGNlcHRpb24g
aWdub3JlZCkgeworCQlpZiAoVkVSQk9TRSkKKwkJCVV0aWwudmVyYm9zZSgiRmFpbGVkIHRvIHdy
aXRlIHNhdmVkIGluZGV4IGZpbGUgbmFtZXMiLCBTeXN0ZW0uZXJyKTsgLy8kTk9OLU5MUy0xJAor
CX0gZmluYWxseSB7CisJCWlmICh3cml0ZXIgIT0gbnVsbCkgeworCQkJdHJ5IHsKKwkJCQl3cml0
ZXIuY2xvc2UoKTsKKwkJCX0gY2F0Y2ggKElPRXhjZXB0aW9uIGUpIHsKKwkJCQkvLyBpZ25vcmUK
KwkJCX0KKwkJfQorCX0KK30KIH0=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>207155</attachid>
            <date>2011-11-17 11:37:00 -0500</date>
            <delta_ts>2011-12-02 10:11:08 -0500</delta_ts>
            <desc>Proposed patch</desc>
            <filename>patch.txt</filename>
            <type>text/plain</type>
            <size>131162</size>
            <attacher name="Satyam Kandula">satyam.kandula</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy91dGlsL1V0aWwuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy91dGlsL1V0
aWwuamF2YQppbmRleCA4YjQxNzEyLi44YzI1OTk0IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvdXRp
bC9VdGlsLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3Jj
L29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL3V0aWwvVXRpbC5qYXZhCkBAIC0xMzQ4LDYgKzEz
NDgsMjcgQEAKICAgICAgICAgfQogICAgIH0KIH0KK3B1YmxpYyBzdGF0aWMgdm9pZCB6aXBGaWxl
cyhGaWxlW10gZmlsZXMsIFN0cmluZyB6aXBQYXRoKSB0aHJvd3MgSU9FeGNlcHRpb24geworCUZp
bGUgemlwRmlsZSA9IG5ldyBGaWxlKHppcFBhdGgpOworICAgIGlmICh6aXBGaWxlLmV4aXN0cygp
KSB7CisgICAgCWlmICghZGVsZXRlKHppcEZpbGUpKQorICAgICAgICAJdGhyb3cgbmV3IElPRXhj
ZXB0aW9uKCJDb3VsZCBub3QgZGVsZXRlICIgKyB6aXBQYXRoKTsKKyAgICAJIC8vIGVuc3VyZSB0
aGUgbmV3IHppcCBmaWxlIGhhcyBhIGRpZmZlcmVudCB0aW1lc3RhbXAgdGhhbiB0aGUgcHJldmlv
dXMgb25lCisgICAgCWludCB0aW1lVG9XYWl0ID0gMTAwMDsgLy8gc29tZSBwbGF0Zm9ybSAobGlr
ZSBMaW51eCkgaGF2ZSBhIDFzIGdyYW51bGFyaXR5KQorICAgICAgICB3YWl0QXRMZWFzdCh0aW1l
VG9XYWl0KTsKKyAgICB9IGVsc2UgeworICAgIAl6aXBGaWxlLmdldFBhcmVudEZpbGUoKS5ta2Rp
cnMoKTsKKyAgICB9CisJWmlwT3V0cHV0U3RyZWFtIHppcCA9IG5ldyBaaXBPdXRwdXRTdHJlYW0o
bmV3IEZpbGVPdXRwdXRTdHJlYW0oemlwRmlsZSkpOworCWZvciAoaW50IGkgPSAwLCBsZW5ndGgg
PSBmaWxlcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgeworICAgICAgICBGaWxlIGZpbGUgPSBm
aWxlc1tpXTsKKyAgICAgICAgWmlwRW50cnkgZW50cnkgPSBuZXcgWmlwRW50cnkoZmlsZS5nZXRO
YW1lKCkpOworICAgICAgICB6aXAucHV0TmV4dEVudHJ5KGVudHJ5KTsKKyAgICAgICAgemlwLndy
aXRlKG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci51dGlsLlV0aWwuZ2V0RmlsZUJ5
dGVDb250ZW50KGZpbGUpKTsKKyAgICAgICAgemlwLmNsb3NlRW50cnkoKTsKKyAgICB9CisJemlw
LmNsb3NlKCk7Cit9CiAvKioKICAqIFJldHVybnMgdGhlIGNvbXBpbGF0aW9uIGVycm9ycyAvIHdh
cm5pbmdzIGZvciB0aGUgZ2l2ZW4gQ29tcGlsYXRpb25SZXN1bHQuCiAgKgpkaWZmIC0tZ2l0IGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L3Rlc3RzL21vZGVsL0phdmFJbmRleFRlc3RzLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50
ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvbW9kZWwvSmF2YUluZGV4
VGVzdHMuamF2YQpuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwLi5jYTFkN2FmCi0t
LSAvZGV2L251bGwKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21vZGVsL0phdmFJbmRleFRlc3RzLmphdmEKQEAgLTAs
MCArMSw3NzUgQEAKKy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCisgKiBDb3B5cmlnaHQgKGMpIDIw
MTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBU
aGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCisgKiBhcmUgbWFkZSBh
dmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYx
LjAKKyAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxh
YmxlIGF0CisgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbAorICoK
KyAqIENvbnRyaWJ1dG9yczoKKyAqICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBh
bmQgaW1wbGVtZW50YXRpb24KKyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLworcGFja2FnZSBvcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbDsKKworaW1wb3J0IGphdmEuaW8uRmlsZTsKK2lt
cG9ydCBqYXZhLmlvLklPRXhjZXB0aW9uOworaW1wb3J0IGphdmEubmV0LlVSTDsKKworaW1wb3J0
IGp1bml0LmZyYW1ld29yay5UZXN0OworCitpbXBvcnQgb3JnLmVjbGlwc2UuY29yZS5yZXNvdXJj
ZXMuSVByb2plY3Q7CitpbXBvcnQgb3JnLmVjbGlwc2UuY29yZS5ydW50aW1lLkNvcmVFeGNlcHRp
b247CitpbXBvcnQgb3JnLmVjbGlwc2UuY29yZS5ydW50aW1lLklQYXRoOworaW1wb3J0IG9yZy5l
Y2xpcHNlLmNvcmUucnVudGltZS5QYXRoOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLklD
bGFzc3BhdGhBdHRyaWJ1dGU7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuSUNsYXNzcGF0
aEVudHJ5OworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLklKYXZhRWxlbWVudDsKK2ltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuY29yZS5JSmF2YVByb2plY3Q7CitpbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmNvcmUuSmF2YUNvcmU7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuaW5kZXguKjsK
K2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5zZWFyY2guU2VhcmNoRW5naW5lOworaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLnV0aWwuVXRpbDsKK2ltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29yZS5KYXZhTW9kZWxNYW5hZ2VyOworCitwdWJsaWMgY2xhc3MgSmF2
YUluZGV4VGVzdHMgZXh0ZW5kcyBBYnN0cmFjdEphdmFTZWFyY2hUZXN0cyAgeworCisJc3RhdGlj
IHsKKwkJLy8gVEVTVFNfTkFNRVMgPSBuZXcgU3RyaW5nW10geyJ0ZXN0TXVsdGlwbGVQcm9qZWN0
cyJ9OworCX0KKwlwdWJsaWMgSmF2YUluZGV4VGVzdHMoU3RyaW5nIG5hbWUpIHsKKwkJc3VwZXIo
bmFtZSk7CisJfQorCisJcHVibGljIHN0YXRpYyBUZXN0IHN1aXRlKCkgeworCQlyZXR1cm4gYnVp
bGRNb2RlbFRlc3RTdWl0ZShKYXZhSW5kZXhUZXN0cy5jbGFzcyk7CisJfQorCS8vIFRlc3QgdGhh
dCB0aGUgaW5kZXggZmlsZSBpcyByZWFsbHkgZ2VuZXJhdGVkLgorCXB1YmxpYyB2b2lkIHRlc3RH
ZW5lcmF0ZUluZGV4KCkgdGhyb3dzIElPRXhjZXB0aW9uIHsKKwkJU3RyaW5nIGluZGV4RmlsZVBh
dGggPSBnZXRFeHRlcm5hbFJlc291cmNlUGF0aCgiVGVzdC5pbmRleCIpOworCQlTdHJpbmcgamFy
RmlsZVBhdGggPSBnZXRFeHRlcm5hbFJlc291cmNlUGF0aCgiVGVzdC5qYXIiKTsKKwkJdHJ5IHsK
KwkJCWNyZWF0ZUphcihuZXcgU3RyaW5nW10geworCQkJCQkicGtnL1Rlc3QuamF2YSIsCisJCQkJ
CSJwYWNrYWdlIHBrZztcbiIgKworCQkJCQkicHVibGljIGNsYXNzIFRlc3Qge1xuIiArCisJCQkJ
CSIgIHByb3RlY3RlZCBUZXN0KGludCBpKSB7fVxuIiArCisJCQkJCSJ9In0sIGphckZpbGVQYXRo
KTsKKwkJCQorCQkJSmF2YUluZGV4ZXIuZ2VuZXJhdGVJbmRleEZvckphcihqYXJGaWxlUGF0aCwg
aW5kZXhGaWxlUGF0aCk7CisJCQlhc3NlcnRUcnVlKG5ldyBGaWxlKGluZGV4RmlsZVBhdGgpLmV4
aXN0cygpKTsKKwkJfSBmaW5hbGx5IHsKKwkJCW5ldyBGaWxlKGluZGV4RmlsZVBhdGgpLmRlbGV0
ZSgpOworCQkJbmV3IEZpbGUoamFyRmlsZVBhdGgpLmRlbGV0ZSgpOworCQl9CisJfQorCQorCS8v
IFRlc3QgdGhhdCB0aGUgaW5kZXggZmlsZSBhbmQgdGhlIGphciBpbiBoZWxkIGFmdGVyIHRoZSBp
bmRleCBpcyBjcmVhdGVkCisJcHVibGljIHZvaWQgdGVzdERlbGV0ZUluZGV4ZWRGaWxlKCkgewor
CQlTdHJpbmcgaW5kZXhGaWxlUGF0aCA9IGdldEV4dGVybmFsUmVzb3VyY2VQYXRoKCJUZXN0Lmlu
ZGV4Iik7CisJCVN0cmluZyBqYXJGaWxlUGF0aCA9IGdldEV4dGVybmFsUmVzb3VyY2VQYXRoKCJU
ZXN0LmphciIpOworCQl0cnkgeworCQkJY3JlYXRlSmFyKG5ldyBTdHJpbmdbXSB7CisJCQkJCSJw
a2cvVGVzdC5qYXZhIiwKKwkJCQkJInBhY2thZ2UgcGtnO1xuIiArCisJCQkJCSJwdWJsaWMgY2xh
c3MgVGVzdCB7XG4iICsKKwkJCQkJIiAgcHJvdGVjdGVkIFRlc3QoaW50IGkpIHt9XG4iICsKKwkJ
CQkJIn0ifSwgamFyRmlsZVBhdGgpOworCQkJSmF2YUluZGV4ZXIuZ2VuZXJhdGVJbmRleEZvckph
cihqYXJGaWxlUGF0aCwgaW5kZXhGaWxlUGF0aCk7CisJCQlhc3NlcnRUcnVlKCJDb3VsZCBub3Qg
ZGVsZXRlIHRoZSBpbmRleCBmaWxlIiwgbmV3IEZpbGUoaW5kZXhGaWxlUGF0aCkuZGVsZXRlKCkp
OworCQkJYXNzZXJ0VHJ1ZSgiQ291bGQgbm90IGRlbGV0ZSB0aGUgamFyIGZpbGUiLCBuZXcgRmls
ZShqYXJGaWxlUGF0aCkuZGVsZXRlKCkpOworCQl9IGNhdGNoIChJT0V4Y2VwdGlvbiBlKSB7CisJ
CQlhc3NlcnRGYWxzZSgiVGVzdCBmYWlsZWQiLCB0cnVlKTsKKwkJfQorCX0KKwkKKwkvLyBUZXN0
IHRoYXQgc2VhcmNoIHdvcmtzIGZpbmUgd2l0aCB0aGUgaW5kZXggZmlsZQorCXB1YmxpYyB2b2lk
IHRlc3RVc2VJbmRleCgpIHRocm93cyBDb3JlRXhjZXB0aW9uLCBJT0V4Y2VwdGlvbiB7CisJCVN0
cmluZyBpbmRleEZpbGVQYXRoID0gZ2V0RXh0ZXJuYWxSZXNvdXJjZVBhdGgoIlRlc3QuaW5kZXgi
KTsKKwkJU3RyaW5nIGphckZpbGVQYXRoID0gZ2V0RXh0ZXJuYWxSZXNvdXJjZVBhdGgoIlRlc3Qu
amFyIik7CisJCXRyeSB7CisJCQljcmVhdGVKYXIobmV3IFN0cmluZ1tdIHsKKwkJCQkJInBrZy9U
ZXN0LmphdmEiLAorCQkJCQkicGFja2FnZSBwa2c7XG4iICsKKwkJCQkJInB1YmxpYyBjbGFzcyBU
ZXN0IHtcbiIgKworCQkJCQkiICBwcm90ZWN0ZWQgVGVzdChpbnQgaSkge31cbiIgKworCQkJCQki
fSJ9LCBqYXJGaWxlUGF0aCk7CisJCQlKYXZhSW5kZXhlci5nZW5lcmF0ZUluZGV4Rm9ySmFyKGph
ckZpbGVQYXRoLCBpbmRleEZpbGVQYXRoKTsKKwkJCWxvbmcgbW9kaWZpZWQgPSBuZXcgRmlsZShp
bmRleEZpbGVQYXRoKS5sYXN0TW9kaWZpZWQoKTsKKwkJCQorCQkJSUphdmFQcm9qZWN0IHAgPSBj
cmVhdGVKYXZhUHJvamVjdCgiUCIpOworCQkJUGF0aCBsaWJQYXRoID0gbmV3IFBhdGgoamFyRmls
ZVBhdGgpOworCQkJSUNsYXNzcGF0aEF0dHJpYnV0ZSBhdHRyaWJ1dGUgPSBKYXZhQ29yZS5uZXdD
bGFzc3BhdGhBdHRyaWJ1dGUoSUNsYXNzcGF0aEF0dHJpYnV0ZS5JTkRFWF9MT0NBVElPTl9BVFRS
SUJVVEVfTkFNRSwgImZpbGU6Ly8vIitpbmRleEZpbGVQYXRoKTsKKwkJCUlDbGFzc3BhdGhFbnRy
eSBlbnRyeSA9IEphdmFDb3JlLm5ld0xpYnJhcnlFbnRyeShsaWJQYXRoLCBudWxsLCBudWxsLCBu
dWxsLCBuZXcgSUNsYXNzcGF0aEF0dHJpYnV0ZVtde2F0dHJpYnV0ZX0sIGZhbHNlKTsKKwkJCXNl
dENsYXNzcGF0aChwLCBuZXcgSUNsYXNzcGF0aEVudHJ5W10ge2VudHJ5fSk7CisJCQkKKwkJCXdh
aXRVbnRpbEluZGV4ZXNSZWFkeSgpOworCQkJCisJCQkvLyBUZXN0IHRoYXQgc3BlY2lmaWVkIGlu
ZGV4IGZpbGUgaXMgcmVhbGx5IHVzZWQKKwkJCWphdmEuaW8uRmlsZSBpbmRleEZpbGUgPSBKYXZh
TW9kZWxNYW5hZ2VyLmdldEluZGV4TWFuYWdlcigpLmdldEluZGV4KGxpYlBhdGgsIGZhbHNlLCBm
YWxzZSkuZ2V0SW5kZXhGaWxlKCk7CisJCQlhc3NlcnRFcXVhbHMoIlNwZWNpZmllZCBpbmRleCBm
aWxlIGlzIG5vdCBiZWluZyB1c2VkIiwgaW5kZXhGaWxlUGF0aCxpbmRleEZpbGUudG9TdHJpbmco
KSk7CisJCQkKKwkJCS8vIFRlc3QgdGhhdCBzZWFyY2ggd29ya3MgcHJvcGVybHkgCisJCQlzZWFy
Y2goIlRlc3QiLCBUWVBFLCBERUNMQVJBVElPTlMsIEVYQUNUX1JVTEUsIFNlYXJjaEVuZ2luZS5j
cmVhdGVKYXZhU2VhcmNoU2NvcGUobmV3IElKYXZhRWxlbWVudFtde3B9KSk7CisJCQlhc3NlcnRT
ZWFyY2hSZXN1bHRzKGdldEV4dGVybmFsUGF0aCgpICsgIlRlc3QuamFyIHBrZy5UZXN0Iik7CisJ
CQkKKwkJCS8vIEVuc3VyZSB0aGF0IHRoZSBpbmRleCBmaWxlIGlzIG5vdCBtb2RpZmllZAorCQkJ
YXNzZXJ0RXF1YWxzKG1vZGlmaWVkLCBuZXcgRmlsZShpbmRleEZpbGVQYXRoKS5sYXN0TW9kaWZp
ZWQoKSk7CisJCX0gZmluYWxseSB7CisJCQlkZWxldGVQcm9qZWN0KCJQIik7CisJCQluZXcgRmls
ZShpbmRleEZpbGVQYXRoKS5kZWxldGUoKTsKKwkJCW5ldyBGaWxlKGphckZpbGVQYXRoKS5kZWxl
dGUoKTsKKwkJfQorCX0KKwkKKwkvLyBUZXN0IHRoYXQgdGhlIHNhbWUgaW5kZXggZmlsZSBpcyB1
c2VkIGV2ZW4gYWZ0ZXIgcmVzdGFydGluZworCXB1YmxpYyB2b2lkIHRlc3RVc2VJbmRleEFmdGVy
UmVzdGFydCgpIHRocm93cyBJT0V4Y2VwdGlvbiwgQ29yZUV4Y2VwdGlvbiB7CisJCVN0cmluZyBp
bmRleEZpbGVQYXRoID0gZ2V0RXh0ZXJuYWxSZXNvdXJjZVBhdGgoIlRlc3QuaW5kZXgiKTsKKwkJ
U3RyaW5nIGphckZpbGVQYXRoID0gZ2V0RXh0ZXJuYWxSZXNvdXJjZVBhdGgoIlRlc3QuamFyIik7
CisJCXRyeSB7CisJCQljcmVhdGVKYXIobmV3IFN0cmluZ1tdIHsKKwkJCQkJInBrZy9UZXN0Lmph
dmEiLAorCQkJCQkicGFja2FnZSBwa2c7XG4iICsKKwkJCQkJInB1YmxpYyBjbGFzcyBUZXN0IHtc
biIgKworCQkJCQkiICBwcm90ZWN0ZWQgVGVzdChpbnQgaSkge31cbiIgKworCQkJCQkifSJ9LCBq
YXJGaWxlUGF0aCk7CisJCQlKYXZhSW5kZXhlci5nZW5lcmF0ZUluZGV4Rm9ySmFyKGphckZpbGVQ
YXRoLCBpbmRleEZpbGVQYXRoKTsKKwkJCWxvbmcgbW9kaWZpZWQgPSBuZXcgRmlsZShpbmRleEZp
bGVQYXRoKS5sYXN0TW9kaWZpZWQoKTsKKwkJCUlKYXZhUHJvamVjdCBwID0gY3JlYXRlSmF2YVBy
b2plY3QoIlAiKTsKKwkJCVBhdGggbGliUGF0aCA9IG5ldyBQYXRoKGphckZpbGVQYXRoKTsKKwkJ
CUlDbGFzc3BhdGhBdHRyaWJ1dGUgYXR0cmlidXRlID0gSmF2YUNvcmUubmV3Q2xhc3NwYXRoQXR0
cmlidXRlKElDbGFzc3BhdGhBdHRyaWJ1dGUuSU5ERVhfTE9DQVRJT05fQVRUUklCVVRFX05BTUUs
ICJmaWxlOi8vLyIraW5kZXhGaWxlUGF0aCk7CisJCQlJQ2xhc3NwYXRoRW50cnkgZW50cnkgPSBK
YXZhQ29yZS5uZXdMaWJyYXJ5RW50cnkobGliUGF0aCwgbnVsbCwgbnVsbCwgbnVsbCwgbmV3IElD
bGFzc3BhdGhBdHRyaWJ1dGVbXXthdHRyaWJ1dGV9LCBmYWxzZSk7CisJCQlzZXRDbGFzc3BhdGgo
cCwgbmV3IElDbGFzc3BhdGhFbnRyeVtdIHtlbnRyeX0pOworCQkJd2FpdFVudGlsSW5kZXhlc1Jl
YWR5KCk7CisJCQkKKwkJCXNlYXJjaCgiVGVzdCIsIFRZUEUsIERFQ0xBUkFUSU9OUywgRVhBQ1Rf
UlVMRSwgU2VhcmNoRW5naW5lLmNyZWF0ZUphdmFTZWFyY2hTY29wZShuZXcgSUphdmFFbGVtZW50
W117cH0pKTsKKwkJCWFzc2VydFNlYXJjaFJlc3VsdHMoZ2V0RXh0ZXJuYWxQYXRoKCkgKyAiVGVz
dC5qYXIgcGtnLlRlc3QiKTsKKwkJCQorCQkJc2ltdWxhdGVFeGl0UmVzdGFydCgpOworCQkJZ2V0
SmF2YU1vZGVsKCkucmVmcmVzaEV4dGVybmFsQXJjaGl2ZXMobnVsbCwgbnVsbCk7CisJCQl3YWl0
VW50aWxJbmRleGVzUmVhZHkoKTsKKwkJCQorCQkJdGhpcy5yZXN1bHRDb2xsZWN0b3IgPSBuZXcg
SmF2YVNlYXJjaFJlc3VsdENvbGxlY3RvcigpOworCQkJc2VhcmNoKCJUZXN0IiwgVFlQRSwgREVD
TEFSQVRJT05TLCBFWEFDVF9SVUxFLCBTZWFyY2hFbmdpbmUuY3JlYXRlSmF2YVNlYXJjaFNjb3Bl
KG5ldyBJSmF2YUVsZW1lbnRbXXtwfSkpOworCQkJYXNzZXJ0U2VhcmNoUmVzdWx0cyhnZXRFeHRl
cm5hbFBhdGgoKSArICJUZXN0LmphciBwa2cuVGVzdCIpOworCQkJCisJCQlqYXZhLmlvLkZpbGUg
aW5kZXhGaWxlID0gSmF2YU1vZGVsTWFuYWdlci5nZXRJbmRleE1hbmFnZXIoKS5nZXRJbmRleChs
aWJQYXRoLCBmYWxzZSwgZmFsc2UpLmdldEluZGV4RmlsZSgpOworCQkJYXNzZXJ0RXF1YWxzKGlu
ZGV4RmlsZVBhdGgsaW5kZXhGaWxlLnRvU3RyaW5nKCkpOworCQkJLy8gRW5zdXJlIHRoYXQgdGhl
IGZpbGUgaXMgbm90IG1vZGlmaWVkCisJCQlhc3NlcnRFcXVhbHMobW9kaWZpZWQsIG5ldyBGaWxl
KGluZGV4RmlsZVBhdGgpLmxhc3RNb2RpZmllZCgpKTsKKwkJfSBmaW5hbGx5IHsKKwkJCWRlbGV0
ZVByb2plY3QoIlAiKTsKKwkJCW5ldyBGaWxlKGluZGV4RmlsZVBhdGgpLmRlbGV0ZSgpOworCQkJ
bmV3IEZpbGUoamFyRmlsZVBhdGgpLmRlbGV0ZSgpOworCQl9CisJfQorCQorCS8vIFRlc3QgdGhh
dCB0aGUgc2FtZSBpbmRleCBmaWxlIGlzIHVzZWQgZXZlbiBhZnRlciByZXN0YXJ0aW5nCisJcHVi
bGljIHZvaWQgdGVzdFVzZUluZGV4SW50ZXJuYWxKYXJBZnRlclJlc3RhcnQoKSB0aHJvd3MgSU9F
eGNlcHRpb24sIENvcmVFeGNlcHRpb24geworCQlTdHJpbmcgaW5kZXhGaWxlUGF0aCA9IGdldEV4
dGVybmFsUmVzb3VyY2VQYXRoKCJUZXN0LmluZGV4Iik7CisJCVN0cmluZyBqYXJGaWxlUGF0aCA9
ICIvUC9UZXN0LmphciI7CisJCXRyeSB7CisJCQlJSmF2YVByb2plY3QgcCA9IGNyZWF0ZUphdmFQ
cm9qZWN0KCJQIik7CisJCQljcmVhdGVKYXIobmV3IFN0cmluZ1tdIHsKKwkJCQkJInBrZy9UZXN0
LmphdmEiLAorCQkJCQkicGFja2FnZSBwa2c7XG4iICsKKwkJCQkJInB1YmxpYyBjbGFzcyBUZXN0
IHtcbiIgKworCQkJCQkiICBwcm90ZWN0ZWQgVGVzdChpbnQgaSkge31cbiIgKworCQkJCQkifSJ9
LCBqYXJGaWxlUGF0aCk7CisJCQlKYXZhSW5kZXhlci5nZW5lcmF0ZUluZGV4Rm9ySmFyKGphckZp
bGVQYXRoLCBpbmRleEZpbGVQYXRoKTsKKwkJCWxvbmcgbW9kaWZpZWQgPSBuZXcgRmlsZShpbmRl
eEZpbGVQYXRoKS5sYXN0TW9kaWZpZWQoKTsKKwkJCUlQYXRoIGxpYlBhdGggPSBuZXcgUGF0aChq
YXJGaWxlUGF0aCk7CisJCQlJQ2xhc3NwYXRoQXR0cmlidXRlIGF0dHJpYnV0ZSA9IEphdmFDb3Jl
Lm5ld0NsYXNzcGF0aEF0dHJpYnV0ZShJQ2xhc3NwYXRoQXR0cmlidXRlLklOREVYX0xPQ0FUSU9O
X0FUVFJJQlVURV9OQU1FLCAiZmlsZTovLy8iK2luZGV4RmlsZVBhdGgpOworCQkJSUNsYXNzcGF0
aEVudHJ5IGVudHJ5ID0gSmF2YUNvcmUubmV3TGlicmFyeUVudHJ5KGxpYlBhdGgsIG51bGwsIG51
bGwsIG51bGwsIG5ldyBJQ2xhc3NwYXRoQXR0cmlidXRlW117YXR0cmlidXRlfSwgZmFsc2UpOwor
CQkJc2V0Q2xhc3NwYXRoKHAsIG5ldyBJQ2xhc3NwYXRoRW50cnlbXSB7ZW50cnl9KTsKKwkJCXdh
aXRVbnRpbEluZGV4ZXNSZWFkeSgpOworCQkJCisJCQlzZWFyY2goIlRlc3QiLCBUWVBFLCBERUNM
QVJBVElPTlMsIEVYQUNUX1JVTEUsIFNlYXJjaEVuZ2luZS5jcmVhdGVKYXZhU2VhcmNoU2NvcGUo
bmV3IElKYXZhRWxlbWVudFtde3B9KSk7CisJCQlhc3NlcnRTZWFyY2hSZXN1bHRzKCJcXFBcXFRl
c3QuamFyIHBrZy5UZXN0Iik7CisJCQkKKwkJCXNpbXVsYXRlRXhpdFJlc3RhcnQoKTsKKwkJCWdl
dEphdmFNb2RlbCgpLnJlZnJlc2hFeHRlcm5hbEFyY2hpdmVzKG51bGwsIG51bGwpOworCQkJd2Fp
dFVudGlsSW5kZXhlc1JlYWR5KCk7CisJCQkKKwkJCXRoaXMucmVzdWx0Q29sbGVjdG9yID0gbmV3
IEphdmFTZWFyY2hSZXN1bHRDb2xsZWN0b3IoKTsKKwkJCXNlYXJjaCgiVGVzdCIsIFRZUEUsIERF
Q0xBUkFUSU9OUywgRVhBQ1RfUlVMRSwgU2VhcmNoRW5naW5lLmNyZWF0ZUphdmFTZWFyY2hTY29w
ZShuZXcgSUphdmFFbGVtZW50W117cH0pKTsKKwkJCWFzc2VydFNlYXJjaFJlc3VsdHMoIlxcUFxc
VGVzdC5qYXIgcGtnLlRlc3QiKTsKKwkJCQorCQkJamF2YS5pby5GaWxlIGluZGV4RmlsZSA9IEph
dmFNb2RlbE1hbmFnZXIuZ2V0SW5kZXhNYW5hZ2VyKCkuZ2V0SW5kZXgobGliUGF0aCwgZmFsc2Us
IGZhbHNlKS5nZXRJbmRleEZpbGUoKTsKKwkJCWFzc2VydEVxdWFscyhpbmRleEZpbGVQYXRoLGlu
ZGV4RmlsZS50b1N0cmluZygpKTsKKwkJCS8vIEVuc3VyZSB0aGF0IHRoZSBmaWxlIGlzIG5vdCBt
b2RpZmllZAorCQkJYXNzZXJ0RXF1YWxzKG1vZGlmaWVkLCBuZXcgRmlsZShpbmRleEZpbGVQYXRo
KS5sYXN0TW9kaWZpZWQoKSk7CisJCX0gZmluYWxseSB7CisJCQlkZWxldGVQcm9qZWN0KCJQIik7
CisJCQluZXcgRmlsZShpbmRleEZpbGVQYXRoKS5kZWxldGUoKTsKKwkJfQorCX0KKwkKKwkvLyBU
ZXN0IHRoYXQgYSBqYXIgZmlsZSB0aGF0IGdldHMgbW9kaWZpZWQgYWZ0ZXIgdGhlIGluZGV4IGlz
IGNyZWF0ZWQgZG9lc24ndCByZXR1cm4gbmV3IGNoYW5nZXMuIAorCS8vIFRoaXMgYmVoYXZpb3Ig
bWlnaHQgaGF2ZSB0byBiZSBtb2RpZmllZCBidXQuLiAKKwlwdWJsaWMgdm9pZCB0ZXN0TW9kaWZ5
SmFyQWZ0ZXJJbmRleCgpIHRocm93cyBDb3JlRXhjZXB0aW9uLCBJT0V4Y2VwdGlvbiB7CisJCVN0
cmluZyBpbmRleEZpbGVQYXRoID0gZ2V0RXh0ZXJuYWxSZXNvdXJjZVBhdGgoIlRlc3QuaW5kZXgi
KTsKKwkJU3RyaW5nIGphckZpbGVQYXRoID0gZ2V0RXh0ZXJuYWxSZXNvdXJjZVBhdGgoIlRlc3Qu
amFyIik7CisJCXRyeSB7CisJCQljcmVhdGVKYXIobmV3IFN0cmluZ1tdIHsKKwkJCQkJInBrZy9U
ZXN0LmphdmEiLAorCQkJCQkicGFja2FnZSBwa2c7XG4iICsKKwkJCQkJInB1YmxpYyBjbGFzcyBU
ZXN0IHtcbiIgKworCQkJCQkiICBwcm90ZWN0ZWQgVGVzdChpbnQgaSkge31cbiIgKworCQkJCQki
fSJ9LCBqYXJGaWxlUGF0aCk7CisJCQlKYXZhSW5kZXhlci5nZW5lcmF0ZUluZGV4Rm9ySmFyKGph
ckZpbGVQYXRoLCBpbmRleEZpbGVQYXRoKTsKKwkJCWNyZWF0ZUphcihuZXcgU3RyaW5nW10gewor
CQkJCQkicGtnL1Rlc3QuamF2YSIsCisJCQkJCSJwYWNrYWdlIHBrZztcbiIgKworCQkJCQkicHVi
bGljIGNsYXNzIFRlc3Qge1xuIiArCisJCQkJCSIgIHByb3RlY3RlZCBUZXN0KGludCBpKSB7fVxu
IiArCisJCQkJCSJ9IiwgCisJCQkJCSJwa2cvTmV3VGVzdC5qYXZhIiwKKwkJCQkJInBhY2thZ2Ug
cGtnO1xuIiArCisJCQkJCSJwdWJsaWMgY2xhc3MgTmV3VGVzdCB7XG4iICsKKwkJCQkJIiAgcHJv
dGVjdGVkIE5ld1Rlc3QoaW50IGkpIHt9XG4iICsKKwkJCQkJIn0ifSwgamFyRmlsZVBhdGgpOwor
CQkJSUphdmFQcm9qZWN0IHAgPSBjcmVhdGVKYXZhUHJvamVjdCgiUCIpOworCQkJUGF0aCBsaWJQ
YXRoID0gbmV3IFBhdGgoamFyRmlsZVBhdGgpOworCQkJSUNsYXNzcGF0aEF0dHJpYnV0ZSBhdHRy
aWJ1dGUgPSBKYXZhQ29yZS5uZXdDbGFzc3BhdGhBdHRyaWJ1dGUoSUNsYXNzcGF0aEF0dHJpYnV0
ZS5JTkRFWF9MT0NBVElPTl9BVFRSSUJVVEVfTkFNRSwgImZpbGU6Ly8vIitpbmRleEZpbGVQYXRo
KTsKKwkJCUlDbGFzc3BhdGhFbnRyeSBlbnRyeSA9IEphdmFDb3JlLm5ld0xpYnJhcnlFbnRyeShs
aWJQYXRoLCBudWxsLCBudWxsLCBudWxsLCBuZXcgSUNsYXNzcGF0aEF0dHJpYnV0ZVtde2F0dHJp
YnV0ZX0sIGZhbHNlKTsKKwkJCXNldENsYXNzcGF0aChwLCBuZXcgSUNsYXNzcGF0aEVudHJ5W10g
e2VudHJ5fSk7CisJCQl3YWl0VW50aWxJbmRleGVzUmVhZHkoKTsKKwkJCXNlYXJjaCgiTmV3VGVz
dCIsIFRZUEUsIERFQ0xBUkFUSU9OUywgRVhBQ1RfUlVMRSwgU2VhcmNoRW5naW5lLmNyZWF0ZUph
dmFTZWFyY2hTY29wZShuZXcgSUphdmFFbGVtZW50W117cH0pKTsKKwkJCWFzc2VydFNlYXJjaFJl
c3VsdHMoIiIpOworCQl9IGZpbmFsbHkgeworCQkJZGVsZXRlUHJvamVjdCgiUCIpOworCQkJbmV3
IEZpbGUoaW5kZXhGaWxlUGF0aCkuZGVsZXRlKCk7CisJCQluZXcgRmlsZShqYXJGaWxlUGF0aCku
ZGVsZXRlKCk7CisJCX0KKwl9CisKKwkvLyB0ZXN0IGEgbm9uLWV4aXN0ZW50IGluZGV4CisJcHVi
bGljIHZvaWQgdGVzdE5vbkV4aXN0ZW50SW5kZXgoKSB0aHJvd3MgQ29yZUV4Y2VwdGlvbiwgSU9F
eGNlcHRpb24geworCQlTdHJpbmcgaW5kZXhGaWxlUGF0aCA9IGdldEV4dGVybmFsUmVzb3VyY2VQ
YXRoKCJUZXN0LmluZGV4Iik7CisJCVN0cmluZyBqYXJGaWxlUGF0aCA9IGdldEV4dGVybmFsUmVz
b3VyY2VQYXRoKCJUZXN0LmphciIpOworCQl0cnkgeworCQkJY3JlYXRlSmFyKG5ldyBTdHJpbmdb
XSB7CisJCQkJCSJwa2cvVGVzdC5qYXZhIiwKKwkJCQkJInBhY2thZ2UgcGtnO1xuIiArCisJCQkJ
CSJwdWJsaWMgY2xhc3MgVGVzdCB7XG4iICsKKwkJCQkJIiAgcHJvdGVjdGVkIFRlc3QoaW50IGkp
IHt9XG4iICsKKwkJCQkJIn0ifSwgamFyRmlsZVBhdGgpOworCQkJSUphdmFQcm9qZWN0IHAgPSBj
cmVhdGVKYXZhUHJvamVjdCgiUCIpOworCQkJUGF0aCBsaWJQYXRoID0gbmV3IFBhdGgoamFyRmls
ZVBhdGgpOworCQkJbmV3IEZpbGUoaW5kZXhGaWxlUGF0aCkuZGVsZXRlKCk7CisJCQlJQ2xhc3Nw
YXRoQXR0cmlidXRlIGF0dHJpYnV0ZSA9IEphdmFDb3JlLm5ld0NsYXNzcGF0aEF0dHJpYnV0ZShJ
Q2xhc3NwYXRoQXR0cmlidXRlLklOREVYX0xPQ0FUSU9OX0FUVFJJQlVURV9OQU1FLCAiZmlsZTov
Ly8iK2luZGV4RmlsZVBhdGgpOworCQkJSUNsYXNzcGF0aEVudHJ5IGVudHJ5ID0gSmF2YUNvcmUu
bmV3TGlicmFyeUVudHJ5KGxpYlBhdGgsIG51bGwsIG51bGwsIG51bGwsIG5ldyBJQ2xhc3NwYXRo
QXR0cmlidXRlW117YXR0cmlidXRlfSwgZmFsc2UpOworCQkJc2V0Q2xhc3NwYXRoKHAsIG5ldyBJ
Q2xhc3NwYXRoRW50cnlbXSB7ZW50cnl9KTsKKwkJCXdhaXRVbnRpbEluZGV4ZXNSZWFkeSgpOwor
CQkJc2VhcmNoKCJUZXN0IiwgVFlQRSwgREVDTEFSQVRJT05TLCBFWEFDVF9SVUxFLCBTZWFyY2hF
bmdpbmUuY3JlYXRlSmF2YVNlYXJjaFNjb3BlKG5ldyBJSmF2YUVsZW1lbnRbXXtwfSkpOworCQkJ
YXNzZXJ0U2VhcmNoUmVzdWx0cyhnZXRFeHRlcm5hbFBhdGgoKSArICJUZXN0LmphciBwa2cuVGVz
dCIpOworCQkJCisJCX0gZmluYWxseSB7CisJCQlkZWxldGVQcm9qZWN0KCJQIik7CisJCQluZXcg
RmlsZShpbmRleEZpbGVQYXRoKS5kZWxldGUoKTsKKwkJCW5ldyBGaWxlKGphckZpbGVQYXRoKS5k
ZWxldGUoKTsKKwkJfQorCX0KKwkKKwkvLyB0ZXN0IGEgbm9uLWV4aXN0ZW50IGluZGV4CisJcHVi
bGljIHZvaWQgdGVzdE5vbkV4aXN0ZW50SW5kZXhSZXN0YXJ0KCkgdGhyb3dzIENvcmVFeGNlcHRp
b24sIElPRXhjZXB0aW9uIHsKKwkJU3RyaW5nIGluZGV4RmlsZVBhdGggPSBnZXRFeHRlcm5hbFJl
c291cmNlUGF0aCgiVGVzdC5pbmRleCIpOworCQlTdHJpbmcgamFyRmlsZVBhdGggPSBnZXRFeHRl
cm5hbFJlc291cmNlUGF0aCgiVGVzdC5qYXIiKTsKKwkJdHJ5IHsKKwkJCWNyZWF0ZUphcihuZXcg
U3RyaW5nW10geworCQkJCQkicGtnL1Rlc3QuamF2YSIsCisJCQkJCSJwYWNrYWdlIHBrZztcbiIg
KworCQkJCQkicHVibGljIGNsYXNzIFRlc3Qge1xuIiArCisJCQkJCSIgIHByb3RlY3RlZCBUZXN0
KGludCBpKSB7fVxuIiArCisJCQkJCSJ9In0sIGphckZpbGVQYXRoKTsKKwkJCQorCQkJbmV3IEZp
bGUoaW5kZXhGaWxlUGF0aCkuZGVsZXRlKCk7CisJCQkKKwkJCUlKYXZhUHJvamVjdCBwID0gY3Jl
YXRlSmF2YVByb2plY3QoIlAiKTsKKwkJCVBhdGggbGliUGF0aCA9IG5ldyBQYXRoKGphckZpbGVQ
YXRoKTsKKwkJCUlDbGFzc3BhdGhBdHRyaWJ1dGUgYXR0cmlidXRlID0gSmF2YUNvcmUubmV3Q2xh
c3NwYXRoQXR0cmlidXRlKElDbGFzc3BhdGhBdHRyaWJ1dGUuSU5ERVhfTE9DQVRJT05fQVRUUklC
VVRFX05BTUUsICJmaWxlOi8vLyIraW5kZXhGaWxlUGF0aCk7CisJCQlJQ2xhc3NwYXRoRW50cnkg
ZW50cnkgPSBKYXZhQ29yZS5uZXdMaWJyYXJ5RW50cnkobGliUGF0aCwgbnVsbCwgbnVsbCwgbnVs
bCwgbmV3IElDbGFzc3BhdGhBdHRyaWJ1dGVbXXthdHRyaWJ1dGV9LCBmYWxzZSk7CisJCQlzZXRD
bGFzc3BhdGgocCwgbmV3IElDbGFzc3BhdGhFbnRyeVtdIHtlbnRyeX0pOworCQkJd2FpdFVudGls
SW5kZXhlc1JlYWR5KCk7CisJCQkKKwkJCXNlYXJjaCgiVGVzdCIsIFRZUEUsIERFQ0xBUkFUSU9O
UywgRVhBQ1RfUlVMRSwgU2VhcmNoRW5naW5lLmNyZWF0ZUphdmFTZWFyY2hTY29wZShuZXcgSUph
dmFFbGVtZW50W117cH0pKTsKKwkJCWFzc2VydFNlYXJjaFJlc3VsdHMoZ2V0RXh0ZXJuYWxQYXRo
KCkgKyAiVGVzdC5qYXIgcGtnLlRlc3QiKTsKKwkJCQorCQkJamF2YS5pby5GaWxlIGluZGV4Rmls
ZSA9IEphdmFNb2RlbE1hbmFnZXIuZ2V0SW5kZXhNYW5hZ2VyKCkuZ2V0SW5kZXgobGliUGF0aCwg
ZmFsc2UsIGZhbHNlKS5nZXRJbmRleEZpbGUoKTsKKwkJCWxvbmcgbW9kaWZpZWQgPSBpbmRleEZp
bGUubGFzdE1vZGlmaWVkKCk7CisJCQlhc3NlcnRFcXVhbHMobW9kaWZpZWQsIGluZGV4RmlsZS5s
YXN0TW9kaWZpZWQoKSk7CisJCQkKKwkJCXNpbXVsYXRlRXhpdFJlc3RhcnQoKTsKKwkJCWdldEph
dmFNb2RlbCgpLnJlZnJlc2hFeHRlcm5hbEFyY2hpdmVzKG51bGwsbnVsbCk7CisJCQl3YWl0VW50
aWxJbmRleGVzUmVhZHkoKTsKKwkJCQorCQkJdGhpcy5yZXN1bHRDb2xsZWN0b3IgPSBuZXcgSmF2
YVNlYXJjaFJlc3VsdENvbGxlY3RvcigpOworCQkJc2VhcmNoKCJUZXN0IiwgVFlQRSwgREVDTEFS
QVRJT05TLCBFWEFDVF9SVUxFLCBTZWFyY2hFbmdpbmUuY3JlYXRlSmF2YVNlYXJjaFNjb3BlKG5l
dyBJSmF2YUVsZW1lbnRbXXtwfSkpOworCQkJYXNzZXJ0U2VhcmNoUmVzdWx0cyhnZXRFeHRlcm5h
bFBhdGgoKSArICJUZXN0LmphciBwa2cuVGVzdCIpOworCQkJCisJCQlpbmRleEZpbGUgPSBKYXZh
TW9kZWxNYW5hZ2VyLmdldEluZGV4TWFuYWdlcigpLmdldEluZGV4KGxpYlBhdGgsIGZhbHNlLCBm
YWxzZSkuZ2V0SW5kZXhGaWxlKCk7CisJCQlhc3NlcnRFcXVhbHMoIkluZGV4IEZpbGUgc2hvdWxk
IG5vdCBoYXZlIGdvdCBtb2RpZmllZCIsbW9kaWZpZWQsIGluZGV4RmlsZS5sYXN0TW9kaWZpZWQo
KSk7CisJCX0gZmluYWxseSB7CisJCQlkZWxldGVQcm9qZWN0KCJQIik7CisJCQluZXcgRmlsZShp
bmRleEZpbGVQYXRoKS5kZWxldGUoKTsKKwkJCW5ldyBGaWxlKGphckZpbGVQYXRoKS5kZWxldGUo
KTsKKwkJfQorCX0KKwkKKwkvLyB0ZXN0IHRoYXQgaWYgdGhlIGluZGV4IGlzIG5vdCBleGlzdGVu
dCBhZnRlciByZXN0YXJ0LCBpdCBzaG91bGQgYnVpbGQgdXAgYSBuZXcgaW5kZXgKKwlwdWJsaWMg
dm9pZCB0ZXN0Tm9uRXhpc3RlbnRJbmRleEFmdGVyUmVzdGFydCgpIHRocm93cyBDb3JlRXhjZXB0
aW9uLCBJT0V4Y2VwdGlvbiB7CisJCVN0cmluZyBpbmRleEZpbGVQYXRoID0gZ2V0RXh0ZXJuYWxS
ZXNvdXJjZVBhdGgoIlRlc3QuaW5kZXgiKTsKKwkJU3RyaW5nIGphckZpbGVQYXRoID0gZ2V0RXh0
ZXJuYWxSZXNvdXJjZVBhdGgoIlRlc3QuamFyIik7CisJCXRyeSB7CisJCQljcmVhdGVKYXIobmV3
IFN0cmluZ1tdIHsKKwkJCQkJInBrZy9UZXN0LmphdmEiLAorCQkJCQkicGFja2FnZSBwa2c7XG4i
ICsgCisJCQkJCSJwdWJsaWMgY2xhc3MgVGVzdCB7XG4iICsKKwkJCQkJInByb3RlY3RlZCBUZXN0
KGludCBpKSB7fVxuIiArICJ9IiAKKwkJCQkJfSxqYXJGaWxlUGF0aCk7CisJCQlKYXZhSW5kZXhl
ci5nZW5lcmF0ZUluZGV4Rm9ySmFyKGphckZpbGVQYXRoLCBpbmRleEZpbGVQYXRoKTsKKwkJCQor
CQkJSUphdmFQcm9qZWN0IHAgPSBjcmVhdGVKYXZhUHJvamVjdCgiUCIpOworCQkJUGF0aCBsaWJQ
YXRoID0gbmV3IFBhdGgoamFyRmlsZVBhdGgpOworCQkJSUNsYXNzcGF0aEF0dHJpYnV0ZSBhdHRy
aWJ1dGUgPSBKYXZhQ29yZS5uZXdDbGFzc3BhdGhBdHRyaWJ1dGUoSUNsYXNzcGF0aEF0dHJpYnV0
ZS5JTkRFWF9MT0NBVElPTl9BVFRSSUJVVEVfTkFNRSwgImZpbGU6Ly8vIitpbmRleEZpbGVQYXRo
KTsKKwkJCUlDbGFzc3BhdGhFbnRyeSBlbnRyeSA9IEphdmFDb3JlLm5ld0xpYnJhcnlFbnRyeShs
aWJQYXRoLCBudWxsLCBudWxsLCBudWxsLCBuZXcgSUNsYXNzcGF0aEF0dHJpYnV0ZVtde2F0dHJp
YnV0ZX0sIGZhbHNlKTsKKwkJCXNldENsYXNzcGF0aChwLCBuZXcgSUNsYXNzcGF0aEVudHJ5W10g
e2VudHJ5fSk7CisJCQl3YWl0VW50aWxJbmRleGVzUmVhZHkoKTsKKwkJCQorCQkJc2VhcmNoKCJU
ZXN0IiwgVFlQRSwgREVDTEFSQVRJT05TLCBFWEFDVF9SVUxFLCBTZWFyY2hFbmdpbmUuY3JlYXRl
SmF2YVNlYXJjaFNjb3BlKG5ldyBJSmF2YUVsZW1lbnRbXXtwfSkpOworCQkJYXNzZXJ0U2VhcmNo
UmVzdWx0cyhnZXRFeHRlcm5hbFBhdGgoKSArICJUZXN0LmphciBwa2cuVGVzdCIpOworCQkJCisJ
CQlzaW11bGF0ZUV4aXRSZXN0YXJ0KCk7CisJCQlGaWxlIGluZGV4RmlsZSA9IG5ldyBGaWxlKGlu
ZGV4RmlsZVBhdGgpOworCQkJaW5kZXhGaWxlLmRlbGV0ZSgpOworCQkJYXNzZXJ0VHJ1ZSghaW5k
ZXhGaWxlLmV4aXN0cygpKTsKKwkJCWdldEphdmFNb2RlbCgpLnJlZnJlc2hFeHRlcm5hbEFyY2hp
dmVzKG51bGwsbnVsbCk7CisJCQl3YWl0VW50aWxJbmRleGVzUmVhZHkoKTsKKwkJCQorCQkJdGhp
cy5yZXN1bHRDb2xsZWN0b3IgPSBuZXcgSmF2YVNlYXJjaFJlc3VsdENvbGxlY3RvcigpOworCQkJ
c2VhcmNoKCJUZXN0IiwgVFlQRSwgREVDTEFSQVRJT05TLCBFWEFDVF9SVUxFLCBTZWFyY2hFbmdp
bmUuY3JlYXRlSmF2YVNlYXJjaFNjb3BlKG5ldyBJSmF2YUVsZW1lbnRbXXtwfSkpOworCQkJYXNz
ZXJ0U2VhcmNoUmVzdWx0cyhnZXRFeHRlcm5hbFBhdGgoKSArICJUZXN0LmphciBwa2cuVGVzdCIp
OworCQkJCisJCX0gZmluYWxseSB7CisJCQlkZWxldGVQcm9qZWN0KCJQIik7CisJCQluZXcgRmls
ZShpbmRleEZpbGVQYXRoKS5kZWxldGUoKTsKKwkJCW5ldyBGaWxlKGphckZpbGVQYXRoKS5kZWxl
dGUoKTsKKwkJfQorCX0KKwkKKwkvLyB0ZXN0IGEgbm9uLWV4aXN0ZW50IGluZGV4IHdoaWNoIGJl
Y29tZXMgZXhpc3RlbnQgYWZ0ZXIgcmVzdGFydAorCXB1YmxpYyB2b2lkIHRlc3RFeGlzdGVudElu
ZGV4QWZ0ZXJSZXN0YXJ0KCkgdGhyb3dzIENvcmVFeGNlcHRpb24sIElPRXhjZXB0aW9uIHsKKwkJ
U3RyaW5nIGluZGV4RmlsZVBhdGggPSBnZXRFeHRlcm5hbFJlc291cmNlUGF0aCgiVGVzdC5pbmRl
eCIpOworCQlTdHJpbmcgamFyRmlsZVBhdGggPSBnZXRFeHRlcm5hbFJlc291cmNlUGF0aCgiVGVz
dC5qYXIiKTsKKwkJdHJ5IHsKKwkJCWNyZWF0ZUphcihuZXcgU3RyaW5nW10geworCQkJCQkicGtn
L1Rlc3QuamF2YSIsCisJCQkJCSJwYWNrYWdlIHBrZztcbiIgKworCQkJCQkicHVibGljIGNsYXNz
IFRlc3Qge1xuIiArCisJCQkJCSIgIHByb3RlY3RlZCBUZXN0KGludCBpKSB7fVxuIiArCisJCQkJ
CSJ9In0sIGphckZpbGVQYXRoKTsKKwkJCQorCQkJRmlsZSBpbmRleEZpbGUgPSBuZXcgRmlsZShp
bmRleEZpbGVQYXRoKTsKKwkJCWluZGV4RmlsZS5kZWxldGUoKTsKKwkJCWFzc2VydFRydWUoIWlu
ZGV4RmlsZS5leGlzdHMoKSk7CisJCQkKKwkJCUlKYXZhUHJvamVjdCBwID0gY3JlYXRlSmF2YVBy
b2plY3QoIlAiKTsKKwkJCVBhdGggbGliUGF0aCA9IG5ldyBQYXRoKGphckZpbGVQYXRoKTsKKwkJ
CUlDbGFzc3BhdGhBdHRyaWJ1dGUgYXR0cmlidXRlID0gSmF2YUNvcmUubmV3Q2xhc3NwYXRoQXR0
cmlidXRlKElDbGFzc3BhdGhBdHRyaWJ1dGUuSU5ERVhfTE9DQVRJT05fQVRUUklCVVRFX05BTUUs
ICJmaWxlOi8vLyIraW5kZXhGaWxlUGF0aCk7CisJCQlJQ2xhc3NwYXRoRW50cnkgZW50cnkgPSBK
YXZhQ29yZS5uZXdMaWJyYXJ5RW50cnkobGliUGF0aCwgbnVsbCwgbnVsbCwgbnVsbCwgbmV3IElD
bGFzc3BhdGhBdHRyaWJ1dGVbXXthdHRyaWJ1dGV9LCBmYWxzZSk7CisJCQlzZXRDbGFzc3BhdGgo
cCwgbmV3IElDbGFzc3BhdGhFbnRyeVtdIHtlbnRyeX0pOworCQkJd2FpdFVudGlsSW5kZXhlc1Jl
YWR5KCk7CisJCQkKKwkJCXNlYXJjaCgiVGVzdCIsIFRZUEUsIERFQ0xBUkFUSU9OUywgRVhBQ1Rf
UlVMRSwgU2VhcmNoRW5naW5lLmNyZWF0ZUphdmFTZWFyY2hTY29wZShuZXcgSUphdmFFbGVtZW50
W117cH0pKTsKKwkJCWFzc2VydFNlYXJjaFJlc3VsdHMoZ2V0RXh0ZXJuYWxQYXRoKCkgKyAiVGVz
dC5qYXIgcGtnLlRlc3QiKTsKKwkJCQorCQkJSmF2YUluZGV4ZXIuZ2VuZXJhdGVJbmRleEZvckph
cihqYXJGaWxlUGF0aCwgaW5kZXhGaWxlUGF0aCk7CisJCQlzaW11bGF0ZUV4aXRSZXN0YXJ0KCk7
CisJCQlnZXRKYXZhTW9kZWwoKS5yZWZyZXNoRXh0ZXJuYWxBcmNoaXZlcyhudWxsLG51bGwpOwor
CQkJd2FpdFVudGlsSW5kZXhlc1JlYWR5KCk7CisJCQkKKwkJCXRoaXMucmVzdWx0Q29sbGVjdG9y
ID0gbmV3IEphdmFTZWFyY2hSZXN1bHRDb2xsZWN0b3IoKTsKKwkJCXNlYXJjaCgiVGVzdCIsIFRZ
UEUsIERFQ0xBUkFUSU9OUywgRVhBQ1RfUlVMRSwgU2VhcmNoRW5naW5lLmNyZWF0ZUphdmFTZWFy
Y2hTY29wZShuZXcgSUphdmFFbGVtZW50W117cH0pKTsKKwkJCWFzc2VydFNlYXJjaFJlc3VsdHMo
Z2V0RXh0ZXJuYWxQYXRoKCkgKyAiVGVzdC5qYXIgcGtnLlRlc3QiKTsKKwkJCQorCQkJaW5kZXhG
aWxlID0gSmF2YU1vZGVsTWFuYWdlci5nZXRJbmRleE1hbmFnZXIoKS5nZXRJbmRleChsaWJQYXRo
LCBmYWxzZSwgZmFsc2UpLmdldEluZGV4RmlsZSgpOworCQkJYXNzZXJ0RXF1YWxzKGluZGV4Rmls
ZVBhdGgsaW5kZXhGaWxlLnRvU3RyaW5nKCkpOworCQl9IGZpbmFsbHkgeworCQkJZGVsZXRlUHJv
amVjdCgiUCIpOworCQkJbmV3IEZpbGUoaW5kZXhGaWxlUGF0aCkuZGVsZXRlKCk7CisJCQluZXcg
RmlsZShqYXJGaWxlUGF0aCkuZGVsZXRlKCk7CisJCX0KKwl9CisJCisJLy8gVGVzdCB0aGF0IHRo
ZSBpbmRleCBmaWxlIGlzIG5vdCBkZWxldGVzIHdoZW4gdGhlIHByb2plY3QgaXMgZGVsZXRlZAor
CXB1YmxpYyB2b2lkIHRlc3REZWxldGVQcm9qZWN0KCkgdGhyb3dzIENvcmVFeGNlcHRpb24sIElP
RXhjZXB0aW9uIHsKKwkJU3RyaW5nIGluZGV4RmlsZVBhdGggPSBnZXRFeHRlcm5hbFJlc291cmNl
UGF0aCgiVGVzdC5pbmRleCIpOworCQlTdHJpbmcgamFyRmlsZVBhdGggPSBnZXRFeHRlcm5hbFJl
c291cmNlUGF0aCgiVGVzdC5qYXIiKTsKKwkJdHJ5IHsKKwkJCWNyZWF0ZUphcihuZXcgU3RyaW5n
W10geworCQkJCQkicGtnL1Rlc3QuamF2YSIsCisJCQkJCSJwYWNrYWdlIHBrZztcbiIgKworCQkJ
CQkicHVibGljIGNsYXNzIFRlc3Qge1xuIiArCisJCQkJCSIgIHByb3RlY3RlZCBUZXN0KGludCBp
KSB7fVxuIiArCisJCQkJCSJ9In0sIGphckZpbGVQYXRoKTsKKwkJCUphdmFJbmRleGVyLmdlbmVy
YXRlSW5kZXhGb3JKYXIoamFyRmlsZVBhdGgsIGluZGV4RmlsZVBhdGgpOworCQkJSUphdmFQcm9q
ZWN0IHAgPSBjcmVhdGVKYXZhUHJvamVjdCgiUCIpOworCQkJY3JlYXRlRXh0ZXJuYWxGb2xkZXIo
ImV4dGVybmFsTGliIik7CisJCQlQYXRoIGxpYlBhdGggPSBuZXcgUGF0aChqYXJGaWxlUGF0aCk7
CisJCQlJQ2xhc3NwYXRoQXR0cmlidXRlIGF0dHJpYnV0ZSA9IEphdmFDb3JlLm5ld0NsYXNzcGF0
aEF0dHJpYnV0ZShJQ2xhc3NwYXRoQXR0cmlidXRlLklOREVYX0xPQ0FUSU9OX0FUVFJJQlVURV9O
QU1FLCAiZmlsZTovLy8iK2luZGV4RmlsZVBhdGgpOworCQkJSUNsYXNzcGF0aEVudHJ5IGVudHJ5
ID0gSmF2YUNvcmUubmV3TGlicmFyeUVudHJ5KGxpYlBhdGgsIG51bGwsIG51bGwsIG51bGwsIG5l
dyBJQ2xhc3NwYXRoQXR0cmlidXRlW117YXR0cmlidXRlfSwgZmFsc2UpOworCQkJc2V0Q2xhc3Nw
YXRoKHAsIG5ldyBJQ2xhc3NwYXRoRW50cnlbXSB7ZW50cnl9KTsKKwkJCXdhaXRVbnRpbEluZGV4
ZXNSZWFkeSgpOworCQkJZGVsZXRlUHJvamVjdCgiUCIpOworCQkJRmlsZSBmID0gbmV3IEZpbGUo
aW5kZXhGaWxlUGF0aCk7CisJCQlhc3NlcnRUcnVlKGYuZXhpc3RzKCkpOworCQl9IGZpbmFsbHkg
eworCQkJbmV3IEZpbGUoaW5kZXhGaWxlUGF0aCkuZGVsZXRlKCk7CisJCQluZXcgRmlsZShqYXJG
aWxlUGF0aCkuZGVsZXRlKCk7CisJCX0KKwl9CisJCisJLy8gVGVzdCB0aGF0IGl0IHdvcmtzIGlm
IHRoZSBpbmRleCBmaWxlIGlzIGluIHRoZSBqYXIgZmlsZQorCXB1YmxpYyB2b2lkIHRlc3RJbmRl
eEluSmFyKCkgdGhyb3dzIElPRXhjZXB0aW9uLCBDb3JlRXhjZXB0aW9uIHsKKwkJU3RyaW5nIGlu
ZGV4RmlsZVBhdGggPSBnZXRFeHRlcm5hbFJlc291cmNlUGF0aCgiVGVzdC5pbmRleCIpOworCQlT
dHJpbmcgamFyRmlsZVBhdGggPSBnZXRFeHRlcm5hbFJlc291cmNlUGF0aCgiVGVzdC5qYXIiKTsK
KwkJU3RyaW5nIGluZGV4WmlwUGF0aCA9ICBnZXRFeHRlcm5hbFJlc291cmNlUGF0aCgiVGVzdElu
ZGV4LnppcCIpOworCQl0cnkgeworCQkJY3JlYXRlSmFyKG5ldyBTdHJpbmdbXSB7CisJCQkJCSJw
a2cvVGVzdC5qYXZhIiwKKwkJCQkJInBhY2thZ2UgcGtnO1xuIiArCisJCQkJCSJwdWJsaWMgY2xh
c3MgVGVzdCB7XG4iICsKKwkJCQkJIiAgcHJvdGVjdGVkIFRlc3QoaW50IGkpIHt9XG4iICsKKwkJ
CQkJIn0ifSwgamFyRmlsZVBhdGgpOworCQkJCisJCQlKYXZhSW5kZXhlci5nZW5lcmF0ZUluZGV4
Rm9ySmFyKGphckZpbGVQYXRoLCBpbmRleEZpbGVQYXRoKTsKKwkJCVV0aWwuemlwRmlsZXMobmV3
IEZpbGVbXXtuZXcgRmlsZShpbmRleEZpbGVQYXRoKX0sIGluZGV4WmlwUGF0aCk7CisJCQkKKwkJ
CUlKYXZhUHJvamVjdCBwID0gY3JlYXRlSmF2YVByb2plY3QoIlAiKTsKKwkJCVBhdGggbGliUGF0
aCA9IG5ldyBQYXRoKGphckZpbGVQYXRoKTsKKwkJCVN0cmluZyB1cmwgPSAiamFyOmZpbGU6LyIr
aW5kZXhaaXBQYXRoKyIhL1Rlc3QuaW5kZXgiOworCQkJSUNsYXNzcGF0aEF0dHJpYnV0ZSBhdHRy
aWJ1dGUgPSBKYXZhQ29yZS5uZXdDbGFzc3BhdGhBdHRyaWJ1dGUoSUNsYXNzcGF0aEF0dHJpYnV0
ZS5JTkRFWF9MT0NBVElPTl9BVFRSSUJVVEVfTkFNRSwgdXJsKTsKKwkJCUlDbGFzc3BhdGhFbnRy
eSBlbnRyeSA9IEphdmFDb3JlLm5ld0xpYnJhcnlFbnRyeShsaWJQYXRoLCBudWxsLCBudWxsLCBu
dWxsLCBuZXcgSUNsYXNzcGF0aEF0dHJpYnV0ZVtde2F0dHJpYnV0ZX0sIGZhbHNlKTsKKwkJCXNl
dENsYXNzcGF0aChwLCBuZXcgSUNsYXNzcGF0aEVudHJ5W10ge2VudHJ5fSk7CisJCQl3YWl0VW50
aWxJbmRleGVzUmVhZHkoKTsKKwkJCQorCQkJYXNzZXJ0RXF1YWxzKHVybCxKYXZhTW9kZWxNYW5h
Z2VyLmdldEluZGV4TWFuYWdlcigpLmdldEluZGV4KGxpYlBhdGgsIGZhbHNlLCBmYWxzZSkuZ2V0
SW5kZXhMb2NhdGlvbigpLmdldFVybCgpLnRvU3RyaW5nKCkpOworCQkJCisJCQlzZWFyY2goIlRl
c3QiLCBUWVBFLCBERUNMQVJBVElPTlMsIEVYQUNUX1JVTEUsIFNlYXJjaEVuZ2luZS5jcmVhdGVK
YXZhU2VhcmNoU2NvcGUobmV3IElKYXZhRWxlbWVudFtde3B9KSk7CisJCQlhc3NlcnRTZWFyY2hS
ZXN1bHRzKGdldEV4dGVybmFsUGF0aCgpICsgIlRlc3QuamFyIHBrZy5UZXN0Iik7CisJCQkKKwkJ
CXNpbXVsYXRlRXhpdFJlc3RhcnQoKTsKKwkJCWdldEphdmFNb2RlbCgpLnJlZnJlc2hFeHRlcm5h
bEFyY2hpdmVzKG51bGwsbnVsbCk7CisJCQl3YWl0VW50aWxJbmRleGVzUmVhZHkoKTsKKwkJCQor
CQkJdGhpcy5yZXN1bHRDb2xsZWN0b3IgPSBuZXcgSmF2YVNlYXJjaFJlc3VsdENvbGxlY3Rvcigp
OworCQkJYXNzZXJ0RXF1YWxzKHVybCxKYXZhTW9kZWxNYW5hZ2VyLmdldEluZGV4TWFuYWdlcigp
LmdldEluZGV4KGxpYlBhdGgsIGZhbHNlLCBmYWxzZSkuZ2V0SW5kZXhMb2NhdGlvbigpLmdldFVy
bCgpLnRvU3RyaW5nKCkpOworCQkJc2VhcmNoKCJUZXN0IiwgVFlQRSwgREVDTEFSQVRJT05TLCBF
WEFDVF9SVUxFLCBTZWFyY2hFbmdpbmUuY3JlYXRlSmF2YVNlYXJjaFNjb3BlKG5ldyBJSmF2YUVs
ZW1lbnRbXXtwfSkpOworCQkJYXNzZXJ0U2VhcmNoUmVzdWx0cyhnZXRFeHRlcm5hbFBhdGgoKSAr
ICJUZXN0LmphciBwa2cuVGVzdCIpOworCQl9IGZpbmFsbHkgeworCQkJZGVsZXRlUHJvamVjdCgi
UCIpOworCQkJbmV3IEZpbGUoaW5kZXhaaXBQYXRoKS5kZWxldGUoKTsKKwkJCW5ldyBGaWxlKGph
ckZpbGVQYXRoKS5kZWxldGUoKTsKKwkJfQorCX0KKwkKKwkvLyBUZXN0IGluZGV4IGZpbGUgaW4g
cGxhdGZvcm0KKwlwdWJsaWMgdm9pZCB0ZXN0UGxhdGZvcm1JbmRleEZpbGUoKSB0aHJvd3MgQ29y
ZUV4Y2VwdGlvbiwgSU9FeGNlcHRpb24geworCQlTdHJpbmcgaW5kZXhGaWxlUGF0aCA9IG51bGw7
CisJCVN0cmluZyBqYXJGaWxlUGF0aCA9IGdldEV4dGVybmFsUmVzb3VyY2VQYXRoKCJUZXN0Lmph
ciIpOworCQlTdHJpbmcgaW5kZXhVcmwgPSAicGxhdGZvcm06L3Jlc291cmNlL1AvVGVzdC5pbmRl
eCI7CisJCXRyeSB7CisJCQljcmVhdGVKYXIobmV3IFN0cmluZ1tdIHsKKwkJCQkJInBrZy9UZXN0
LmphdmEiLAorCQkJCQkicGFja2FnZSBwa2c7XG4iICsKKwkJCQkJInB1YmxpYyBjbGFzcyBUZXN0
IHtcbiIgKworCQkJCQkiICBwcm90ZWN0ZWQgVGVzdChpbnQgaSkge31cbiIgKworCQkJCQkifSJ9
LCBqYXJGaWxlUGF0aCk7CisJCQkKKwkJCUlKYXZhUHJvamVjdCBwID0gY3JlYXRlSmF2YVByb2pl
Y3QoIlAiKTsKKwkJCWluZGV4RmlsZVBhdGggPSBwLmdldFByb2plY3QoKS5nZXRMb2NhdGlvbigp
LmFwcGVuZCgiVGVzdC5pbmRleCIpLnRvRmlsZSgpLmdldEFic29sdXRlUGF0aCgpOworCQkJSmF2
YUluZGV4ZXIuZ2VuZXJhdGVJbmRleEZvckphcihqYXJGaWxlUGF0aCwgaW5kZXhGaWxlUGF0aCk7
CisJCQlsb25nIG1vZGlmaWVkID0gbmV3IEZpbGUoaW5kZXhGaWxlUGF0aCkubGFzdE1vZGlmaWVk
KCk7CisJCQkKKwkJCVBhdGggbGliUGF0aCA9IG5ldyBQYXRoKGphckZpbGVQYXRoKTsKKwkJCUlD
bGFzc3BhdGhBdHRyaWJ1dGUgYXR0cmlidXRlID0gSmF2YUNvcmUubmV3Q2xhc3NwYXRoQXR0cmli
dXRlKElDbGFzc3BhdGhBdHRyaWJ1dGUuSU5ERVhfTE9DQVRJT05fQVRUUklCVVRFX05BTUUsIGlu
ZGV4VXJsKTsKKwkJCUlDbGFzc3BhdGhFbnRyeSBlbnRyeSA9IEphdmFDb3JlLm5ld0xpYnJhcnlF
bnRyeShsaWJQYXRoLCBudWxsLCBudWxsLCBudWxsLCBuZXcgSUNsYXNzcGF0aEF0dHJpYnV0ZVtd
e2F0dHJpYnV0ZX0sIGZhbHNlKTsKKwkJCXNldENsYXNzcGF0aChwLCBuZXcgSUNsYXNzcGF0aEVu
dHJ5W10ge2VudHJ5fSk7CisJCQl3YWl0VW50aWxJbmRleGVzUmVhZHkoKTsKKwkJCQorCQkJc2Vh
cmNoKCJUZXN0IiwgVFlQRSwgREVDTEFSQVRJT05TLCBFWEFDVF9SVUxFLCBTZWFyY2hFbmdpbmUu
Y3JlYXRlSmF2YVNlYXJjaFNjb3BlKG5ldyBJSmF2YUVsZW1lbnRbXXtwfSkpOworCQkJYXNzZXJ0
U2VhcmNoUmVzdWx0cyhnZXRFeHRlcm5hbFBhdGgoKSArICJUZXN0LmphciBwa2cuVGVzdCIpOwor
CQkJCisJCQlVUkwgdXJsID0gSmF2YU1vZGVsTWFuYWdlci5nZXRJbmRleE1hbmFnZXIoKS5nZXRJ
bmRleChsaWJQYXRoLCBmYWxzZSwgZmFsc2UpLmdldEluZGV4TG9jYXRpb24oKS5nZXRVcmwoKTsK
KwkJCWFzc2VydEVxdWFscyhpbmRleFVybCwgdXJsLnRvU3RyaW5nKCkpOworCQkJCisJCQlzaW11
bGF0ZUV4aXRSZXN0YXJ0KCk7CisJCQlnZXRKYXZhTW9kZWwoKS5yZWZyZXNoRXh0ZXJuYWxBcmNo
aXZlcyhudWxsLG51bGwpOworCQkJd2FpdFVudGlsSW5kZXhlc1JlYWR5KCk7CisJCQkKKwkJCXRo
aXMucmVzdWx0Q29sbGVjdG9yID0gbmV3IEphdmFTZWFyY2hSZXN1bHRDb2xsZWN0b3IoKTsKKwkJ
CXNlYXJjaCgiVGVzdCIsIFRZUEUsIERFQ0xBUkFUSU9OUywgRVhBQ1RfUlVMRSwgU2VhcmNoRW5n
aW5lLmNyZWF0ZUphdmFTZWFyY2hTY29wZShuZXcgSUphdmFFbGVtZW50W117cH0pKTsKKwkJCWFz
c2VydFNlYXJjaFJlc3VsdHMoZ2V0RXh0ZXJuYWxQYXRoKCkgKyAiVGVzdC5qYXIgcGtnLlRlc3Qi
KTsKKwkJCQorCQkJdXJsID0gSmF2YU1vZGVsTWFuYWdlci5nZXRJbmRleE1hbmFnZXIoKS5nZXRJ
bmRleChsaWJQYXRoLCBmYWxzZSwgZmFsc2UpLmdldEluZGV4TG9jYXRpb24oKS5nZXRVcmwoKTsK
KwkJCWFzc2VydEVxdWFscyhpbmRleFVybCwgdXJsLnRvU3RyaW5nKCkpOworCisJCQlhc3NlcnRF
cXVhbHMobW9kaWZpZWQsIG5ldyBGaWxlKGluZGV4RmlsZVBhdGgpLmxhc3RNb2RpZmllZCgpKTsK
KwkJfSBmaW5hbGx5IHsKKwkJCWRlbGV0ZVByb2plY3QoIlAiKTsKKwkJCWlmIChpbmRleEZpbGVQ
YXRoICE9IG51bGwpIG5ldyBGaWxlKGluZGV4RmlsZVBhdGgpLmRlbGV0ZSgpOworCQkJbmV3IEZp
bGUoamFyRmlsZVBhdGgpLmRlbGV0ZSgpOworCQl9CisJfQorCQorCS8vIFRlc3QgaW5kZXggZmls
ZSBpbiBwbGF0Zm9ybQorCXB1YmxpYyB2b2lkIHRlc3RQbGF0Zm9ybUphckluZGV4RmlsZSgpIHRo
cm93cyBDb3JlRXhjZXB0aW9uLCBJT0V4Y2VwdGlvbiB7CisJCVN0cmluZyBpbmRleEZpbGVQYXRo
ID0gbnVsbDsKKwkJU3RyaW5nIGphckZpbGVQYXRoID0gZ2V0RXh0ZXJuYWxSZXNvdXJjZVBhdGgo
IlRlc3QuamFyIik7CisJCVN0cmluZyBpbmRleFVybCA9ICJwbGF0Zm9ybTovcmVzb3VyY2UvRm9y
SW5kZXgvVGVzdC5pbmRleC56aXAhL1Rlc3QuaW5kZXgiOworCQl0cnkgeworCQkJY3JlYXRlSmFy
KG5ldyBTdHJpbmdbXSB7CisJCQkJCSJwa2cvVGVzdC5qYXZhIiwKKwkJCQkJInBhY2thZ2UgcGtn
O1xuIiArCisJCQkJCSJwdWJsaWMgY2xhc3MgVGVzdCB7XG4iICsKKwkJCQkJIiAgcHJvdGVjdGVk
IFRlc3QoaW50IGkpIHt9XG4iICsKKwkJCQkJIn0ifSwgamFyRmlsZVBhdGgpOworCQkJCisJCQlJ
UHJvamVjdCBpbmRleFByb2ogPSBjcmVhdGVQcm9qZWN0KCJGb3JJbmRleCIpOworCQkJaW5kZXhG
aWxlUGF0aCA9IGluZGV4UHJvai5nZXRQcm9qZWN0KCkuZ2V0TG9jYXRpb24oKS5hcHBlbmQoIlRl
c3QuaW5kZXgiKS50b0ZpbGUoKS5nZXRBYnNvbHV0ZVBhdGgoKTsKKwkJCUphdmFJbmRleGVyLmdl
bmVyYXRlSW5kZXhGb3JKYXIoamFyRmlsZVBhdGgsIGluZGV4RmlsZVBhdGgpOworCQkJVXRpbC56
aXBGaWxlcyhuZXcgRmlsZVtde25ldyBGaWxlKGluZGV4RmlsZVBhdGgpfSwgaW5kZXhGaWxlUGF0
aCsiLnppcCIpOworCQkJCisJCQlJSmF2YVByb2plY3QgcCA9IGNyZWF0ZUphdmFQcm9qZWN0KCJQ
Iik7CisJCQlQYXRoIGxpYlBhdGggPSBuZXcgUGF0aChqYXJGaWxlUGF0aCk7CisJCQlJQ2xhc3Nw
YXRoQXR0cmlidXRlIGF0dHJpYnV0ZSA9IEphdmFDb3JlLm5ld0NsYXNzcGF0aEF0dHJpYnV0ZShJ
Q2xhc3NwYXRoQXR0cmlidXRlLklOREVYX0xPQ0FUSU9OX0FUVFJJQlVURV9OQU1FLCBpbmRleFVy
bCk7CisJCQlJQ2xhc3NwYXRoRW50cnkgZW50cnkgPSBKYXZhQ29yZS5uZXdMaWJyYXJ5RW50cnko
bGliUGF0aCwgbnVsbCwgbnVsbCwgbnVsbCwgbmV3IElDbGFzc3BhdGhBdHRyaWJ1dGVbXXthdHRy
aWJ1dGV9LCBmYWxzZSk7CisJCQlzZXRDbGFzc3BhdGgocCwgbmV3IElDbGFzc3BhdGhFbnRyeVtd
IHtlbnRyeX0pOworCQkJd2FpdFVudGlsSW5kZXhlc1JlYWR5KCk7CisJCQkKKwkJCXNlYXJjaCgi
VGVzdCIsIFRZUEUsIERFQ0xBUkFUSU9OUywgRVhBQ1RfUlVMRSwgU2VhcmNoRW5naW5lLmNyZWF0
ZUphdmFTZWFyY2hTY29wZShuZXcgSUphdmFFbGVtZW50W117cH0pKTsKKwkJCWFzc2VydFNlYXJj
aFJlc3VsdHMoZ2V0RXh0ZXJuYWxQYXRoKCkgKyAiVGVzdC5qYXIgcGtnLlRlc3QiKTsKKwkJCQor
CQkJVVJMIHVybCA9IEphdmFNb2RlbE1hbmFnZXIuZ2V0SW5kZXhNYW5hZ2VyKCkuZ2V0SW5kZXgo
bGliUGF0aCwgZmFsc2UsIGZhbHNlKS5nZXRJbmRleExvY2F0aW9uKCkuZ2V0VXJsKCk7CisJCQlh
c3NlcnRFcXVhbHMoaW5kZXhVcmwsIHVybC50b1N0cmluZygpKTsKKwkJCQorCQkJc2ltdWxhdGVF
eGl0UmVzdGFydCgpOworCQkJZ2V0SmF2YU1vZGVsKCkucmVmcmVzaEV4dGVybmFsQXJjaGl2ZXMo
bnVsbCxudWxsKTsKKwkJCXdhaXRVbnRpbEluZGV4ZXNSZWFkeSgpOworCQkJCisJCQl0aGlzLnJl
c3VsdENvbGxlY3RvciA9IG5ldyBKYXZhU2VhcmNoUmVzdWx0Q29sbGVjdG9yKCk7CisJCQlzZWFy
Y2goIlRlc3QiLCBUWVBFLCBERUNMQVJBVElPTlMsIEVYQUNUX1JVTEUsIFNlYXJjaEVuZ2luZS5j
cmVhdGVKYXZhU2VhcmNoU2NvcGUobmV3IElKYXZhRWxlbWVudFtde3B9KSk7CisJCQlhc3NlcnRT
ZWFyY2hSZXN1bHRzKGdldEV4dGVybmFsUGF0aCgpICsgIlRlc3QuamFyIHBrZy5UZXN0Iik7CisJ
CQkKKwkJCXVybCA9IEphdmFNb2RlbE1hbmFnZXIuZ2V0SW5kZXhNYW5hZ2VyKCkuZ2V0SW5kZXgo
bGliUGF0aCwgZmFsc2UsIGZhbHNlKS5nZXRJbmRleExvY2F0aW9uKCkuZ2V0VXJsKCk7CisJCQlh
c3NlcnRFcXVhbHMoaW5kZXhVcmwsIHVybC50b1N0cmluZygpKTsKKwkJfSBmaW5hbGx5IHsKKwkJ
CWRlbGV0ZVByb2plY3QoIlAiKTsKKwkJCWlmIChpbmRleEZpbGVQYXRoICE9IG51bGwpIHsKKwkJ
CQluZXcgRmlsZShpbmRleEZpbGVQYXRoKS5kZWxldGUoKTsKKwkJCQluZXcgRmlsZShpbmRleEZp
bGVQYXRoKyIuemlwIikuZGVsZXRlKCk7CisJCQl9CisJCQluZXcgRmlsZShqYXJGaWxlUGF0aCku
ZGVsZXRlKCk7CisJCQlkZWxldGVQcm9qZWN0KCJGb3JJbmRleCIpOworCQl9CisJfQorCQorCXB1
YmxpYyB2b2lkIHRlc3RFZGl0Q2xhc3NwYXRoKCkgdGhyb3dzIENvcmVFeGNlcHRpb24sIElPRXhj
ZXB0aW9uIHsKKwkJU3RyaW5nIGluZGV4RmlsZVBhdGggPSBnZXRFeHRlcm5hbFJlc291cmNlUGF0
aCgiVGVzdC5pbmRleCIpOworCQlTdHJpbmcgamFyRmlsZVBhdGggPSBnZXRFeHRlcm5hbFJlc291
cmNlUGF0aCgiVGVzdC5qYXIiKTsKKwkJdHJ5IHsKKwkJCWNyZWF0ZUphcihuZXcgU3RyaW5nW10g
eworCQkJCQkicGtnL1Rlc3QuamF2YSIsCisJCQkJCSJwYWNrYWdlIHBrZztcbiIgKworCQkJCQki
cHVibGljIGNsYXNzIFRlc3Qge1xuIiArCisJCQkJCSIgIHByb3RlY3RlZCBUZXN0KGludCBpKSB7
fVxuIiArCisJCQkJCSJ9In0sIGphckZpbGVQYXRoKTsKKwkJCUphdmFJbmRleGVyLmdlbmVyYXRl
SW5kZXhGb3JKYXIoamFyRmlsZVBhdGgsIGluZGV4RmlsZVBhdGgpOworCQkJRmlsZSBmID0gbmV3
IEZpbGUoaW5kZXhGaWxlUGF0aCk7CisJCQlsb25nIG1vZGlmaWVkID0gZi5sYXN0TW9kaWZpZWQo
KTsKKwkJCUlKYXZhUHJvamVjdCBwID0gdGhpcy5jcmVhdGVKYXZhUHJvamVjdCgiUCIsIG5ldyBT
dHJpbmdbXSB7fSwgImJpbiIpOworCisJCQlTdHJpbmcgY29udGVudCA9IG5ldyBTdHJpbmcoCisJ
CQkJCSI8P3htbCB2ZXJzaW9uPVwiMS4wXCIgZW5jb2Rpbmc9XCJVVEYtOFwiPz5cbiIKKwkJCQkJ
KyAiPGNsYXNzcGF0aD5cbiIKKwkJCQkJKyAiPGNsYXNzcGF0aGVudHJ5IGtpbmQ9XCJzcmNcIiBw
YXRoPVwic3JjIGFcIi8+XG4iCisJCQkJCSsgIjxjbGFzc3BhdGhlbnRyeSBraW5kPVwic3JjXCIg
cGF0aD1cInNyYyB4XCIvPlxuIgorCQkJCQkrICI8Y2xhc3NwYXRoZW50cnkga2luZD1cImxpYlwi
IHBhdGg9XCIiCisJCQkJCSsgZ2V0RXh0ZXJuYWxKQ0xQYXRoKCkKKwkJCQkJKyAiXCIvPlxuIgor
CQkJCQkrICI8Y2xhc3NwYXRoZW50cnkga2luZD1cImxpYlwiIHBhdGg9XCIiCisJCQkJCSsgamFy
RmlsZVBhdGgKKwkJCQkJKyAiXCI+IgorCQkJCQkrICI8YXR0cmlidXRlcz5cbiIgCisJCQkJCSsg
Igk8YXR0cmlidXRlIG5hbWU9XCJpbmRleF9sb2NhdGlvblwiIHZhbHVlPVwiZmlsZTovLy8iCisJ
CQkJCSsgaW5kZXhGaWxlUGF0aAorCQkJCQkrIlwiLz5cbiIgCisJCQkJCSsgIjwvYXR0cmlidXRl
cz5cbiIKKwkJCQkJKyAiPC9jbGFzc3BhdGhlbnRyeT5cbiIKKwkJCQkJKyAiPGNsYXNzcGF0aGVu
dHJ5IGtpbmQ9XCJvdXRwdXRcIiBwYXRoPVwiYmluXCIvPlxuIgorCQkJCQkrICI8L2NsYXNzcGF0
aD5cbiIpOworCisJCQllZGl0RmlsZSgiL1AvLmNsYXNzcGF0aCIsIGNvbnRlbnQpOworCQkJcC5v
cGVuKG51bGwpOworCQkJd2FpdFVudGlsSW5kZXhlc1JlYWR5KCk7CisJCQlzZWFyY2goIlRlc3Qi
LCBUWVBFLCBERUNMQVJBVElPTlMsIEVYQUNUX1JVTEUsIFNlYXJjaEVuZ2luZS5jcmVhdGVKYXZh
U2VhcmNoU2NvcGUobmV3IElKYXZhRWxlbWVudFtde3B9KSk7CisJCQlhc3NlcnRTZWFyY2hSZXN1
bHRzKGdldEV4dGVybmFsUGF0aCgpICsgIlRlc3QuamFyIHBrZy5UZXN0Iik7CisJCQlqYXZhLmlv
LkZpbGUgaW5kZXhGaWxlID0gSmF2YU1vZGVsTWFuYWdlci5nZXRJbmRleE1hbmFnZXIoKS5nZXRJ
bmRleChuZXcgUGF0aChqYXJGaWxlUGF0aCksIGZhbHNlLCBmYWxzZSkuZ2V0SW5kZXhGaWxlKCk7
CisJCQlhc3NlcnRFcXVhbHMoaW5kZXhGaWxlUGF0aCxpbmRleEZpbGUudG9TdHJpbmcoKSk7CisJ
CQlmID0gbmV3IEZpbGUoaW5kZXhGaWxlUGF0aCk7CisJCQlhc3NlcnRFcXVhbHMobW9kaWZpZWQs
IGYubGFzdE1vZGlmaWVkKCkpOworCQl9IGZpbmFsbHkgeworCQkJZGVsZXRlUHJvamVjdCgiUCIp
OworCQkJbmV3IEZpbGUoaW5kZXhGaWxlUGF0aCkuZGVsZXRlKCk7CisJCQluZXcgRmlsZShqYXJG
aWxlUGF0aCkuZGVsZXRlKCk7CisJCX0KKwl9CisJCisJLy8gVGVzdCBjaGFuZ2luZyB0aGUgY2xh
c3NwYXRoCQorCXB1YmxpYyB2b2lkIHRlc3RDaGFuZ2VDbGFzc3BhdGgoKSB0aHJvd3MgQ29yZUV4
Y2VwdGlvbiwgSU9FeGNlcHRpb24geworCQlTdHJpbmcgaW5kZXhGaWxlUGF0aCA9IGdldEV4dGVy
bmFsUmVzb3VyY2VQYXRoKCJUZXN0LmluZGV4Iik7CisJCVN0cmluZyBqYXJGaWxlUGF0aCA9IGdl
dEV4dGVybmFsUmVzb3VyY2VQYXRoKCJUZXN0LmphciIpOworCQl0cnkgeworCQkJY3JlYXRlSmFy
KG5ldyBTdHJpbmdbXSB7CisJCQkJCSJwa2cvVGVzdC5qYXZhIiwKKwkJCQkJInBhY2thZ2UgcGtn
O1xuIiArCisJCQkJCSJwdWJsaWMgY2xhc3MgVGVzdCB7XG4iICsKKwkJCQkJIiAgcHJvdGVjdGVk
IFRlc3QoaW50IGkpIHt9XG4iICsKKwkJCQkJIn0ifSwgamFyRmlsZVBhdGgpOworCQkJSmF2YUlu
ZGV4ZXIuZ2VuZXJhdGVJbmRleEZvckphcihqYXJGaWxlUGF0aCwgaW5kZXhGaWxlUGF0aCk7CisJ
CQljcmVhdGVKYXIobmV3IFN0cmluZ1tdIHsKKwkJCQkJInBrZy9UZXN0LmphdmEiLAorCQkJCQki
cGFja2FnZSBwa2c7XG4iICsKKwkJCQkJInB1YmxpYyBjbGFzcyBUZXN0IHtcbiIgKworCQkJCQki
ICBwcm90ZWN0ZWQgVGVzdChpbnQgaSkge31cbiIgKworCQkJCQkifSIsIAorCQkJCQkicGtnL05l
d1Rlc3QuamF2YSIsCisJCQkJCSJwYWNrYWdlIHBrZztcbiIgKworCQkJCQkicHVibGljIGNsYXNz
IE5ld1Rlc3Qge1xuIiArCisJCQkJCSIgIHByb3RlY3RlZCBOZXdUZXN0KGludCBpKSB7fVxuIiAr
CisJCQkJCSJ9In0sIGphckZpbGVQYXRoKTsKKwkJCUlKYXZhUHJvamVjdCBwID0gY3JlYXRlSmF2
YVByb2plY3QoIlAiKTsKKwkJCVBhdGggbGliUGF0aCA9IG5ldyBQYXRoKGphckZpbGVQYXRoKTsK
KwkJCQorCQkJSUNsYXNzcGF0aEVudHJ5IGVudHJ5ID0gSmF2YUNvcmUubmV3TGlicmFyeUVudHJ5
KGxpYlBhdGgsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIGZhbHNlKTsKKwkJCXNldENsYXNzcGF0
aChwLCBuZXcgSUNsYXNzcGF0aEVudHJ5W10ge2VudHJ5fSk7CisJCQl3YWl0VW50aWxJbmRleGVz
UmVhZHkoKTsKKwkJCXNlYXJjaCgiTmV3VGVzdCIsIFRZUEUsIERFQ0xBUkFUSU9OUywgRVhBQ1Rf
UlVMRSwgU2VhcmNoRW5naW5lLmNyZWF0ZUphdmFTZWFyY2hTY29wZShuZXcgSUphdmFFbGVtZW50
W117cH0pKTsKKwkJCWFzc2VydFNlYXJjaFJlc3VsdHMoZ2V0RXh0ZXJuYWxQYXRoKCkgKyAiVGVz
dC5qYXIgcGtnLk5ld1Rlc3QiKTsKKwkJCQorCQkJSUNsYXNzcGF0aEF0dHJpYnV0ZSBhdHRyaWJ1
dGUgPSBKYXZhQ29yZS5uZXdDbGFzc3BhdGhBdHRyaWJ1dGUoSUNsYXNzcGF0aEF0dHJpYnV0ZS5J
TkRFWF9MT0NBVElPTl9BVFRSSUJVVEVfTkFNRSwgImZpbGU6Ly8vIitpbmRleEZpbGVQYXRoKTsK
KwkJCWVudHJ5ID0gSmF2YUNvcmUubmV3TGlicmFyeUVudHJ5KGxpYlBhdGgsIG51bGwsIG51bGws
IG51bGwsIG5ldyBJQ2xhc3NwYXRoQXR0cmlidXRlW117YXR0cmlidXRlfSwgZmFsc2UpOworCQkJ
c2V0Q2xhc3NwYXRoKHAsIG5ldyBJQ2xhc3NwYXRoRW50cnlbXSB7ZW50cnl9KTsKKwkJCXdhaXRV
bnRpbEluZGV4ZXNSZWFkeSgpOworCQkJdGhpcy5yZXN1bHRDb2xsZWN0b3IgPSBuZXcgSmF2YVNl
YXJjaFJlc3VsdENvbGxlY3RvcigpOworCQkJc2VhcmNoKCJOZXdUZXN0IiwgVFlQRSwgREVDTEFS
QVRJT05TLCBFWEFDVF9SVUxFLCBTZWFyY2hFbmdpbmUuY3JlYXRlSmF2YVNlYXJjaFNjb3BlKG5l
dyBJSmF2YUVsZW1lbnRbXXtwfSkpOworCQkJYXNzZXJ0U2VhcmNoUmVzdWx0cygiIik7CisJCQkK
KwkJCWVudHJ5ID0gSmF2YUNvcmUubmV3TGlicmFyeUVudHJ5KGxpYlBhdGgsIG51bGwsIG51bGws
IG51bGwsIG51bGwsIGZhbHNlKTsKKwkJCXNldENsYXNzcGF0aChwLCBuZXcgSUNsYXNzcGF0aEVu
dHJ5W10ge2VudHJ5fSk7CisJCQl3YWl0VW50aWxJbmRleGVzUmVhZHkoKTsKKwkJCXRoaXMucmVz
dWx0Q29sbGVjdG9yID0gbmV3IEphdmFTZWFyY2hSZXN1bHRDb2xsZWN0b3IoKTsKKwkJCXNlYXJj
aCgiTmV3VGVzdCIsIFRZUEUsIERFQ0xBUkFUSU9OUywgRVhBQ1RfUlVMRSwgU2VhcmNoRW5naW5l
LmNyZWF0ZUphdmFTZWFyY2hTY29wZShuZXcgSUphdmFFbGVtZW50W117cH0pKTsKKwkJCWFzc2Vy
dFNlYXJjaFJlc3VsdHMoZ2V0RXh0ZXJuYWxQYXRoKCkgKyAiVGVzdC5qYXIgcGtnLk5ld1Rlc3Qi
KTsKKwkJCQorCQkJCisJCX0gZmluYWxseSB7CisJCQlkZWxldGVQcm9qZWN0KCJQIik7CisJCQlu
ZXcgRmlsZShpbmRleEZpbGVQYXRoKS5kZWxldGUoKTsKKwkJCW5ldyBGaWxlKGphckZpbGVQYXRo
KS5kZWxldGUoKTsKKwkJfQorCX0KKwkKKwkvLyBUZXN0IGNoYW5naW5nIHRoZSBjbGFzc3BhdGgJ
CisJcHVibGljIHZvaWQgdGVzdENoYW5nZUNsYXNzcGF0aEZvckludGVybmFsSmFyKCkgdGhyb3dz
IENvcmVFeGNlcHRpb24sIElPRXhjZXB0aW9uIHsKKwkJU3RyaW5nIGluZGV4RmlsZVBhdGggPSBn
ZXRFeHRlcm5hbFJlc291cmNlUGF0aCgiVGVzdC5pbmRleCIpOworCQlTdHJpbmcgamFyRmlsZVBh
dGggPSAiL1AvVGVzdC5qYXIiOworCQl0cnkgeworCQkJSUphdmFQcm9qZWN0IHAgPSBjcmVhdGVK
YXZhUHJvamVjdCgiUCIpOworCQkJY3JlYXRlSmFyKG5ldyBTdHJpbmdbXSB7CisJCQkJCSJwa2cv
VGVzdC5qYXZhIiwKKwkJCQkJInBhY2thZ2UgcGtnO1xuIiArCisJCQkJCSJwdWJsaWMgY2xhc3Mg
VGVzdCB7XG4iICsKKwkJCQkJIiAgcHJvdGVjdGVkIFRlc3QoaW50IGkpIHt9XG4iICsKKwkJCQkJ
In0ifSwgamFyRmlsZVBhdGgpOworCQkJSmF2YUluZGV4ZXIuZ2VuZXJhdGVJbmRleEZvckphcihq
YXJGaWxlUGF0aCwgaW5kZXhGaWxlUGF0aCk7CisJCQljcmVhdGVKYXIobmV3IFN0cmluZ1tdIHsK
KwkJCQkJInBrZy9UZXN0LmphdmEiLAorCQkJCQkicGFja2FnZSBwa2c7XG4iICsKKwkJCQkJInB1
YmxpYyBjbGFzcyBUZXN0IHtcbiIgKworCQkJCQkiICBwcm90ZWN0ZWQgVGVzdChpbnQgaSkge31c
biIgKworCQkJCQkifSIsIAorCQkJCQkicGtnL05ld1Rlc3QuamF2YSIsCisJCQkJCSJwYWNrYWdl
IHBrZztcbiIgKworCQkJCQkicHVibGljIGNsYXNzIE5ld1Rlc3Qge1xuIiArCisJCQkJCSIgIHBy
b3RlY3RlZCBOZXdUZXN0KGludCBpKSB7fVxuIiArCisJCQkJCSJ9In0sIGphckZpbGVQYXRoKTsK
KwkJCVBhdGggbGliUGF0aCA9IG5ldyBQYXRoKGphckZpbGVQYXRoKTsKKwkJCQorCQkJSUNsYXNz
cGF0aEVudHJ5IGVudHJ5ID0gSmF2YUNvcmUubmV3TGlicmFyeUVudHJ5KGxpYlBhdGgsIG51bGws
IG51bGwsIG51bGwsIG51bGwsIGZhbHNlKTsKKwkJCXNldENsYXNzcGF0aChwLCBuZXcgSUNsYXNz
cGF0aEVudHJ5W10ge2VudHJ5fSk7CisJCQl3YWl0VW50aWxJbmRleGVzUmVhZHkoKTsKKwkJCXNl
YXJjaCgiTmV3VGVzdCIsIFRZUEUsIERFQ0xBUkFUSU9OUywgRVhBQ1RfUlVMRSwgU2VhcmNoRW5n
aW5lLmNyZWF0ZUphdmFTZWFyY2hTY29wZShuZXcgSUphdmFFbGVtZW50W117cH0pKTsKKwkJCWFz
c2VydFNlYXJjaFJlc3VsdHMoIlxcUFxcVGVzdC5qYXIgcGtnLk5ld1Rlc3QiKTsKKwkJCQorCQkJ
SUNsYXNzcGF0aEF0dHJpYnV0ZSBhdHRyaWJ1dGUgPSBKYXZhQ29yZS5uZXdDbGFzc3BhdGhBdHRy
aWJ1dGUoSUNsYXNzcGF0aEF0dHJpYnV0ZS5JTkRFWF9MT0NBVElPTl9BVFRSSUJVVEVfTkFNRSwg
ImZpbGU6Ly8vIitpbmRleEZpbGVQYXRoKTsKKwkJCWVudHJ5ID0gSmF2YUNvcmUubmV3TGlicmFy
eUVudHJ5KGxpYlBhdGgsIG51bGwsIG51bGwsIG51bGwsIG5ldyBJQ2xhc3NwYXRoQXR0cmlidXRl
W117YXR0cmlidXRlfSwgZmFsc2UpOworCQkJc2V0Q2xhc3NwYXRoKHAsIG5ldyBJQ2xhc3NwYXRo
RW50cnlbXSB7ZW50cnl9KTsKKwkJCXdhaXRVbnRpbEluZGV4ZXNSZWFkeSgpOworCQkJdGhpcy5y
ZXN1bHRDb2xsZWN0b3IgPSBuZXcgSmF2YVNlYXJjaFJlc3VsdENvbGxlY3RvcigpOworCQkJc2Vh
cmNoKCJOZXdUZXN0IiwgVFlQRSwgREVDTEFSQVRJT05TLCBFWEFDVF9SVUxFLCBTZWFyY2hFbmdp
bmUuY3JlYXRlSmF2YVNlYXJjaFNjb3BlKG5ldyBJSmF2YUVsZW1lbnRbXXtwfSkpOworCQkJYXNz
ZXJ0U2VhcmNoUmVzdWx0cygiIik7CisJCQkKKwkJCWVudHJ5ID0gSmF2YUNvcmUubmV3TGlicmFy
eUVudHJ5KGxpYlBhdGgsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIGZhbHNlKTsKKwkJCXNldENs
YXNzcGF0aChwLCBuZXcgSUNsYXNzcGF0aEVudHJ5W10ge2VudHJ5fSk7CisJCQl3YWl0VW50aWxJ
bmRleGVzUmVhZHkoKTsKKwkJCXRoaXMucmVzdWx0Q29sbGVjdG9yID0gbmV3IEphdmFTZWFyY2hS
ZXN1bHRDb2xsZWN0b3IoKTsKKwkJCXNlYXJjaCgiTmV3VGVzdCIsIFRZUEUsIERFQ0xBUkFUSU9O
UywgRVhBQ1RfUlVMRSwgU2VhcmNoRW5naW5lLmNyZWF0ZUphdmFTZWFyY2hTY29wZShuZXcgSUph
dmFFbGVtZW50W117cH0pKTsKKwkJCWFzc2VydFNlYXJjaFJlc3VsdHMoIlxcUFxcVGVzdC5qYXIg
cGtnLk5ld1Rlc3QiKTsKKwkJCQorCQkJCisJCX0gZmluYWxseSB7CisJCQlkZWxldGVQcm9qZWN0
KCJQIik7CisJCQluZXcgRmlsZShpbmRleEZpbGVQYXRoKS5kZWxldGUoKTsKKwkJfQorCX0KKwkJ
CisJcHVibGljIHZvaWQgdGVzdE11bHRpcGxlUHJvamVjdHMoKSB0aHJvd3MgQ29yZUV4Y2VwdGlv
biwgSU9FeGNlcHRpb24geworCQlTdHJpbmcgaW5kZXhGaWxlUGF0aCA9IGdldEV4dGVybmFsUmVz
b3VyY2VQYXRoKCJUZXN0LmluZGV4Iik7CisJCVN0cmluZyBqYXJGaWxlUGF0aCA9IGdldEV4dGVy
bmFsUmVzb3VyY2VQYXRoKCJUZXN0LmphciIpOworCQl0cnkgeworCQkJY3JlYXRlSmFyKG5ldyBT
dHJpbmdbXSB7CisJCQkJCSJwa2cvVGVzdC5qYXZhIiwKKwkJCQkJInBhY2thZ2UgcGtnO1xuIiAr
CisJCQkJCSJwdWJsaWMgY2xhc3MgVGVzdCB7XG4iICsKKwkJCQkJIiAgcHJvdGVjdGVkIFRlc3Qo
aW50IGkpIHt9XG4iICsKKwkJCQkJIn0ifSwgamFyRmlsZVBhdGgpOworCQkJSmF2YUluZGV4ZXIu
Z2VuZXJhdGVJbmRleEZvckphcihqYXJGaWxlUGF0aCwgaW5kZXhGaWxlUGF0aCk7CisJCQkKKwkJ
CUlKYXZhUHJvamVjdCBwMSA9IGNyZWF0ZUphdmFQcm9qZWN0KCJQMSIpOworCQkJUGF0aCBsaWJQ
YXRoID0gbmV3IFBhdGgoamFyRmlsZVBhdGgpOworCQkJSUNsYXNzcGF0aEVudHJ5IGVudHJ5ID0g
SmF2YUNvcmUubmV3TGlicmFyeUVudHJ5KGxpYlBhdGgsIG51bGwsIG51bGwsIG51bGwsIG51bGws
IGZhbHNlKTsKKwkJCXNldENsYXNzcGF0aChwMSwgbmV3IElDbGFzc3BhdGhFbnRyeVtdIHtlbnRy
eX0pOworCQkJd2FpdFVudGlsSW5kZXhlc1JlYWR5KCk7CisJCQkKKwkJCUlKYXZhUHJvamVjdCBw
MiA9IGNyZWF0ZUphdmFQcm9qZWN0KCJQMiIpOworCQkJSUNsYXNzcGF0aEF0dHJpYnV0ZSBhdHRy
aWJ1dGUgPSBKYXZhQ29yZS5uZXdDbGFzc3BhdGhBdHRyaWJ1dGUoSUNsYXNzcGF0aEF0dHJpYnV0
ZS5JTkRFWF9MT0NBVElPTl9BVFRSSUJVVEVfTkFNRSwgImZpbGU6Ly8vIitpbmRleEZpbGVQYXRo
KTsKKwkJCWVudHJ5ID0gSmF2YUNvcmUubmV3TGlicmFyeUVudHJ5KGxpYlBhdGgsIG51bGwsIG51
bGwsIG51bGwsIG5ldyBJQ2xhc3NwYXRoQXR0cmlidXRlW117YXR0cmlidXRlfSwgZmFsc2UpOwor
CQkJc2V0Q2xhc3NwYXRoKHAyLCBuZXcgSUNsYXNzcGF0aEVudHJ5W10ge2VudHJ5fSk7CisJCQl3
YWl0VW50aWxJbmRleGVzUmVhZHkoKTsKKwkJCQorCQkJc2VhcmNoKCJUZXN0IiwgVFlQRSwgREVD
TEFSQVRJT05TLCBFWEFDVF9SVUxFLCBTZWFyY2hFbmdpbmUuY3JlYXRlSmF2YVNlYXJjaFNjb3Bl
KG5ldyBJSmF2YUVsZW1lbnRbXXtwMX0pKTsKKwkJCWFzc2VydFNlYXJjaFJlc3VsdHMoZ2V0RXh0
ZXJuYWxQYXRoKCkgKyAiVGVzdC5qYXIgcGtnLlRlc3QiKTsKKwkJCQorCQkJRmlsZSBpbmRleEZp
bGUgPSBKYXZhTW9kZWxNYW5hZ2VyLmdldEluZGV4TWFuYWdlcigpLmdldEluZGV4KGxpYlBhdGgs
IGZhbHNlLCBmYWxzZSkuZ2V0SW5kZXhGaWxlKCk7CisJCQlhc3NlcnRFcXVhbHMoaW5kZXhGaWxl
UGF0aCxpbmRleEZpbGUudG9TdHJpbmcoKSk7CisJCQkKKwkJfSBmaW5hbGx5IHsKKwkJCWRlbGV0
ZVByb2plY3QoIlAxIik7CisJCQlkZWxldGVQcm9qZWN0KCJQMiIpOworCQkJbmV3IEZpbGUoaW5k
ZXhGaWxlUGF0aCkuZGVsZXRlKCk7CisJCQluZXcgRmlsZShqYXJGaWxlUGF0aCkuZGVsZXRlKCk7
CisJCX0KKwl9CisJCisJLy8gVE9ETyBTQVRZQU06IEFkZCB0ZXN0IGZvciBjb250YWluZXJzCit9
CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2Vj
bGlwc2UvamR0L2NvcmUvdGVzdHMvbW9kZWwvSmF2YVNlYXJjaFNjb3BlVGVzdHMuamF2YSBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90
ZXN0cy9tb2RlbC9KYXZhU2VhcmNoU2NvcGVUZXN0cy5qYXZhCmluZGV4IGRlYjcwZmQuLjUyYWYz
MTUgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9tb2RlbC9KYXZhU2VhcmNoU2NvcGVUZXN0cy5qYXZhCisr
KyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQv
Y29yZS90ZXN0cy9tb2RlbC9KYXZhU2VhcmNoU2NvcGVUZXN0cy5qYXZhCkBAIC0xLDUgKzEsNSBA
QAogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAwOCBJ
Qk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMSBJ
Qk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMg
cHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWls
YWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAog
ICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUg
YXQKQEAgLTEwMjUsNyArMTAyNSw3IEBACiAKIAkJLy8gSW5kZXggdGhlIG91dHB1dCBsb2NhdGlv
biBhcyBpdCBpcyBhIGxpYnJhcnkgZm9yIHRoZSBwcm9qZWN0CiAJCUluZGV4TWFuYWdlciBpbmRl
eE1hbmFnZXIgPSBKYXZhTW9kZWxNYW5hZ2VyLmdldEluZGV4TWFuYWdlcigpOwotCQlpbmRleE1h
bmFnZXIuaW5kZXhMaWJyYXJ5KG5ldyBQYXRoKCIvUDEvYmluIiksIHByb2plY3QuZ2V0UHJvamVj
dCgpKTsKKwkJaW5kZXhNYW5hZ2VyLmluZGV4TGlicmFyeShuZXcgUGF0aCgiL1AxL2JpbiIpLCBw
cm9qZWN0LmdldFByb2plY3QoKSwgbnVsbCk7CiAJCXdhaXRVbnRpbEluZGV4ZXNSZWFkeSgpOwog
CiAJCS8vIFNlYXJjaCBmb3IgYWxsIHR5cGVzCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvbW9kZWwvUnVu
SmF2YVNlYXJjaFRlc3RzLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvbW9kZWwvUnVuSmF2YVNlYXJjaFRlc3RzLmph
dmEKaW5kZXggODkxN2MyOS4uMmQ3ZDg2NCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21vZGVsL1J1bkph
dmFTZWFyY2hUZXN0cy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVs
L3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9tb2RlbC9SdW5KYXZhU2VhcmNoVGVzdHMu
amF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmln
aHQgKGMpIDIwMDAsIDIwMDkgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmln
aHQgKGMpIDIwMDAsIDIwMTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmln
aHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxz
CiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1
YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9u
LCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC02Miw2ICs2Miw3IEBACiAJCWFsbENsYXNzZXMuYWRk
KFNlYXJjaFRlc3RzLmNsYXNzKTsKIAkJYWxsQ2xhc3Nlcy5hZGQoSmF2YVNlYXJjaFNjb3BlVGVz
dHMuY2xhc3MpOwogCQlhbGxDbGFzc2VzLmFkZChNYXRjaGluZ1JlZ2lvbnNUZXN0LmNsYXNzKTsK
KwkJYWxsQ2xhc3Nlcy5hZGQoSmF2YUluZGV4VGVzdHMuY2xhc3MpOwogCiAJCS8vIFJlc2V0IGZv
cmdvdHRlbiBzdWJzZXRzIG9mIHRlc3RzCiAJCVRlc3RDYXNlLlRFU1RTX1BSRUZJWCA9IG51bGw7
CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9NRVRBLUlORi9NQU5JRkVTVC5NRiBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL01FVEEtSU5GL01BTklGRVNULk1GCmluZGV4IGJiM2MwYWYu
LjM1NGM2NDggMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL01FVEEtSU5GL01BTklG
RVNULk1GCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL01FVEEtSU5GL01BTklGRVNULk1GCkBA
IC0xNyw2ICsxNyw3IEBACiAgb3JnLmVjbGlwc2UuamR0LmNvcmUuamRvbSwKICBvcmcuZWNsaXBz
ZS5qZHQuY29yZS5zZWFyY2gsCiAgb3JnLmVjbGlwc2UuamR0LmNvcmUudXRpbCwKKyBvcmcuZWNs
aXBzZS5qZHQuY29yZS5pbmRleCwKICBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29kZWFzc2lz
dDt4LWludGVybmFsOj10cnVlLAogIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb2RlYXNzaXN0
LmNvbXBsZXRlO3gtaW50ZXJuYWw6PXRydWUsCiAgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNv
ZGVhc3Npc3QuaW1wbDt4LWludGVybmFsOj10cnVlLApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvYW50YWRhcHRlci9vcmcvZWNsaXBzZS9qZHQvY29yZS9CdWlsZEphckluZGV4Lmph
dmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9hbnRhZGFwdGVyL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L0J1aWxkSmFySW5kZXguamF2YQpuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwLi4w
ZmFjN2YzCi0tLSAvZGV2L251bGwKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvYW50YWRhcHRl
ci9vcmcvZWNsaXBzZS9qZHQvY29yZS9CdWlsZEphckluZGV4LmphdmEKQEAgLTAsMCArMSw2MyBA
QAorLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioNCisgKiBDb3B5cmlnaHQgKGMpIDIwMTEgSUJNIENv
cnBvcmF0aW9uIGFuZCBvdGhlcnMuDQorICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9n
cmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscw0KKyAqIGFyZSBtYWRlIGF2YWlsYWJs
ZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMA0KKyAq
IHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0
DQorICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwNCisgKg0KKyAq
IENvbnRyaWJ1dG9yczoNCisgKiAgICAgSUJNIENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5k
IGltcGxlbWVudGF0aW9uDQorICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovDQorcGFja2FnZSBvcmcu
ZWNsaXBzZS5qZHQuY29yZTsNCisNCitpbXBvcnQgamF2YS5pby5JT0V4Y2VwdGlvbjsNCisNCitp
bXBvcnQgb3JnLmFwYWNoZS50b29scy5hbnQuQnVpbGRFeGNlcHRpb247DQoraW1wb3J0IG9yZy5h
cGFjaGUudG9vbHMuYW50LlRhc2s7DQoraW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmluZGV4
LkphdmFJbmRleGVyOw0KK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuYW50YWRhcHRl
ci5BbnRBZGFwdGVyTWVzc2FnZXM7DQorDQorLyoqDQorICogPHA+DQorICogQW4gQW50IHRhc2sg
dG8gZ2VuZXJhdGUgdGhlIGluZGV4IGZpbGUgZm9yIHRoZSBnaXZlbiBqYXIgcGF0aC4NCisgKiA8
L3A+DQorICogPHA+DQorICogPGNvZGU+Jmx0O2VjbGlwc2UuYnVpbGRKYXJJbmRleCBqYXJQYXRo
PSJUZXN0LmphciIgaW5kZXhQYXRoPSJUZXN0LmluZGV4Ii8mZ3Q7PC9jb2RlPg0KKyAqIDwvcD4N
CisgKiA8cD4NCisgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBBbnQgY2hlY2sgb3V0IHRoZSB3
ZWJzaXRlIGF0IGh0dHA6Ly9qYWthcnRhLmFwYWNoZS5vcmcvYW50LyAuDQorICogPC9wPg0KKyAq
IA0KKyAqIFRoaXMgaXMgbm90IGludGVuZGVkIHRvIGJlIHN1YmNsYXNzZWQgYnkgdXNlcnMuDQor
ICogDQorICogQHNpbmNlIDMuOA0KKyAqLw0KK3B1YmxpYyBjbGFzcyBCdWlsZEphckluZGV4IGV4
dGVuZHMgVGFzayB7DQorDQorCXByaXZhdGUgU3RyaW5nIGphclBhdGg7DQorCXByaXZhdGUgU3Ry
aW5nIGluZGV4UGF0aDsNCisNCisJcHVibGljIHZvaWQgZXhlY3V0ZSgpIHRocm93cyBCdWlsZEV4
Y2VwdGlvbiB7DQorCQlpZiAodGhpcy5qYXJQYXRoID09IG51bGwpIHsNCisJCQl0aHJvdyBuZXcg
QnVpbGRFeGNlcHRpb24oQW50QWRhcHRlck1lc3NhZ2VzLmdldFN0cmluZygiYnVpbGRKYXJJbmRl
eC5qYXJGaWxlLmNhbm5vdC5iZS5udWxsIikpOyAvLyROT04tTkxTLTEkDQorCQl9DQorCQlpZiAo
dGhpcy5pbmRleFBhdGggPT0gbnVsbCkgew0KKwkJCXRocm93IG5ldyBCdWlsZEV4Y2VwdGlvbihB
bnRBZGFwdGVyTWVzc2FnZXMuZ2V0U3RyaW5nKCJidWlsZEphckluZGV4LmluZGV4RmlsZS5jYW5u
b3QuYmUubnVsbCIpKTsgLy8kTk9OLU5MUy0xJA0KKwkJfQ0KKw0KKwkJdHJ5IHsNCisJCQlKYXZh
SW5kZXhlci5nZW5lcmF0ZUluZGV4Rm9ySmFyKHRoaXMuamFyUGF0aCwgdGhpcy5pbmRleFBhdGgp
Ow0KKwkJfSBjYXRjaCAoSU9FeGNlcHRpb24gZSkgew0KKwkJCXRocm93IG5ldyBCdWlsZEV4Y2Vw
dGlvbihBbnRBZGFwdGVyTWVzc2FnZXMuZ2V0U3RyaW5nKCJidWlsZEphckluZGV4LmlvZXhjZXB0
aW9uLm9jY3VyZWQiLCBlLmdldExvY2FsaXplZE1lc3NhZ2UoKSkpOyAvLyROT04tTkxTLTEkDQor
CQl9DQorCQlzZXRQcm9qZWN0KGdldFByb2plY3QoKSk7DQorCX0NCisNCisJcHVibGljIHZvaWQg
c2V0SmFyUGF0aChTdHJpbmcgcGF0aCkgew0KKwkJdGhpcy5qYXJQYXRoID0gcGF0aDsNCisJfQ0K
Kw0KKwlwdWJsaWMgdm9pZCBzZXRJbmRleFBhdGgoU3RyaW5nIHBhdGgpIHsNCisJCXRoaXMuaW5k
ZXhQYXRoID0gcGF0aDsNCisJfQ0KK30NCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9hbnRhZGFwdGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9hbnRhZGFwdGVyL21lc3NhZ2Vz
LnByb3BlcnRpZXMgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9hbnRhZGFwdGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9hbnRhZGFwdGVyL21lc3NhZ2VzLnByb3BlcnRpZXMKaW5kZXggZGY2MTY1
Ni4uOWNiOWJlMiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvYW50YWRhcHRlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvYW50YWRhcHRlci9tZXNzYWdlcy5wcm9wZXJ0aWVzCisr
KyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2FudGFkYXB0ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2FudGFkYXB0ZXIvbWVzc2FnZXMucHJvcGVydGllcwpAQCAtMSw1ICsxLDUgQEAKICMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMKLSMgQ29weXJpZ2h0IChjKSAyMDAwLCAyMDA2IElCTSBDb3Jwb3Jh
dGlvbiBhbmQgb3RoZXJzLgorIyBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTEgSUJNIENvcnBvcmF0
aW9uIGFuZCBvdGhlcnMuCiAjIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQg
dGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICMgYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRo
ZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAjIHdoaWNoIGFjY29t
cGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC0xOSwzICsx
OSw3IEBACiBjaGVja0RlYnVnQXR0cmlidXRlcy5wcm9wZXJ0eS5hcmd1bWVudC5jYW5ub3QuYmUu
bnVsbD1UaGUgcHJvcGVydHkgYXJndW1lbnQgY2Fubm90IGJlIG51bGwKIGNoZWNrRGVidWdBdHRy
aWJ1dGVzLmlvZXhjZXB0aW9uLm9jY3VyZWQ9SU9FeGNlcHRpb24gb2NjdXJyZWQgd2hpbGUgcmVh
ZGluZyAKIGNoZWNrRGVidWdBdHRyaWJ1dGVzLmZpbGUuYXJndW1lbnQubXVzdC5iZS5hLmNsYXNz
ZmlsZS5vci5hLmphcmZpbGU9VGhlIGZpbGUgYXJndW1lbnQgbXVzdCBiZSBhIC5jbGFzcyBvciBh
IC5qYXIgZmlsZQorCitidWlsZEphckluZGV4LmphckZpbGUuY2Fubm90LmJlLm51bGw9VGhlIGph
ciBmaWxlIGFyZ3VtZW50IGNhbm5vdCBiZSBudWxsCitidWlsZEphckluZGV4LmluZGV4RmlsZS5j
YW5ub3QuYmUubnVsbD1UaGUgaW5kZXggZmlsZSBhcmd1bWVudCBjYW5ub3QgYmUgbnVsbAorYnVp
bGRKYXJJbmRleC5pb2V4Y2VwdGlvbi5vY2N1cmVkPUlPRXhjZXB0aW9uIC0gezB9CmRpZmYgLS1n
aXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9idWlsZC5wcm9wZXJ0aWVzIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvYnVpbGQucHJvcGVydGllcwppbmRleCBmZjUyMGY5Li44ZTNmNjc4IDEwMDY0NAot
LS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9idWlsZC5wcm9wZXJ0aWVzCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2J1aWxkLnByb3BlcnRpZXMKQEAgLTEsNSArMSw1IEBACiAjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjCi0jIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMCBJQk0gQ29ycG9yYXRpb24g
YW5kIG90aGVycy4KKyMgQ29weXJpZ2h0IChjKSAyMDAwLCAyMDExIElCTSBDb3Jwb3JhdGlvbiBh
bmQgb3RoZXJzLgogIyBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBh
Y2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAjIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVy
bXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogIyB3aGljaCBhY2NvbXBhbmll
cyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdApAQCAtMjQsNyArMjQsOCBA
QAogICAgICAgICAgICAgICAgICAgIG9yZy5lY2xpcHNlLmpkdC5jb3JlLmpkb20uKixcCiAgICAg
ICAgICAgICAgICAgICAgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLiosXAogICAgICAgICAgICAg
ICAgICAgIG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5yZXdyaXRlLiosXAotICAgICAgICAgICAg
ICAgICAgIG9yZy5lY2xpcHNlLmpkdC5jb3JlLnNlYXJjaC4qCisgICAgICAgICAgICAgICAgICAg
b3JnLmVjbGlwc2UuamR0LmNvcmUuc2VhcmNoLiosXAorICAgICAgICAgICAgICAgICAgIG9yZy5l
Y2xpcHNlLmpkdC5jb3JlLmluZGV4LioKIHNvdXJjZS4uID0gICBiYXRjaC8sXAogCSAgICAgICAg
IGNvZGVhc3Npc3QvLFwKIAkgICAgICAgICBjb21waWxlci8sXApkaWZmIC0tZ2l0IGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2NvcmUvSUNsYXNzcGF0aEF0dHJp
YnV0ZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2Nv
cmUvSUNsYXNzcGF0aEF0dHJpYnV0ZS5qYXZhCmluZGV4IGQ5MGFiMTUuLjUxZWZmYWYgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9jb3JlL0lD
bGFzc3BhdGhBdHRyaWJ1dGUuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9v
cmcvZWNsaXBzZS9qZHQvY29yZS9JQ2xhc3NwYXRoQXR0cmlidXRlLmphdmEKQEAgLTEsNSArMSw1
IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDA1LCAyMDEw
IElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDA1LCAyMDEx
IElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhp
cyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZh
aWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4w
CiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJs
ZSBhdApAQCAtNTgsNiArNTgsMTYgQEAKIAkgKiBAc2luY2UgMy4xCiAJICovCiAJU3RyaW5nIEpB
VkFET0NfTE9DQVRJT05fQVRUUklCVVRFX05BTUUgPSAiamF2YWRvY19sb2NhdGlvbiI7IC8vJE5P
Ti1OTFMtMSQKKwkKKwkvKioKKwkgKiBDb25zdGFudCBmb3IgdGhlIG5hbWUgb2YgdGhlIGluZGV4
IGxvY2F0aW9uIGF0dHJpYnV0ZS4KKwkgKiAKKwkgKiA8cD5UaGUgdmFsdWUgZm9yIHRoaXMgYXR0
cmlidXRlIGhhcyB0byBiZSB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgVVJMLgorCSAq
IEl0IHNob3VsZCBwb2ludCB0byBhbiBleGlzdGluZyBpbmRleCBmaWxlIGluIGEgZm9sZGVyIG9y
IGEgamFyLiBUaGUgVVJMIGFsc28gc3VwcG9ydHMgdGhlIHBsYXRmb3JtIHByb3RvY29sLjwvcD4K
KwkgKiAKKwkgKiBAc2luY2UgMy44CisJICovCisJU3RyaW5nIElOREVYX0xPQ0FUSU9OX0FUVFJJ
QlVURV9OQU1FID0gImluZGV4X2xvY2F0aW9uIjsgLy8kTk9OLU5MUy0xJAogCiAJLyoqCiAJICog
Q29uc3RhbnQgZm9yIHRoZSBuYW1lIG9mIHRoZSBvcHRpb25hbCBhdHRyaWJ1dGUuIFRoZSBwb3Nz
aWJsZSB2YWx1ZXMKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL0lKYXZhRWxlbWVudERlbHRhLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvY29yZS9JSmF2YUVsZW1lbnREZWx0YS5qYXZhCmlu
ZGV4IGJjMTdiMDkuLmI1MmM1ZWYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21v
ZGVsL29yZy9lY2xpcHNlL2pkdC9jb3JlL0lKYXZhRWxlbWVudERlbHRhLmphdmEKKysrIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2NvcmUvSUphdmFFbGVtZW50
RGVsdGEuamF2YQpAQCAtNTcsNiArNTcsMTIgQEAKICAqIDxsaT57QGxpbmsgI0ZfU09VUkNFREVU
QUNIRUR9IC0gVGhlIHNvdXJjZSBhdHRhY2htZW50IHBhdGggb3IgdGhlIHNvdXJjZSBhdHRhY2ht
ZW50IHJvb3QgcGF0aAogICogb2YgYSBjbGFzc3BhdGggZW50cnkgY29ycmVzcG9uZGluZyB0byB0
aGUgZWxlbWVudCB3YXMgcmVtb3ZlZC4gVGhpcyBmbGFnIGlzIG9ubHkgdmFsaWQgaWYgdGhlIGVs
ZW1lbnQgaXMgYW4KICAqIHtAbGluayBJUGFja2FnZUZyYWdtZW50Um9vdH0uPC9saT4KKyAqIDxs
aT57QGxpbmsgI0ZfSU5ERVhBVFRBQ0hFRH0gLSBUaGUgaW5kZXggcGF0aCBvciB0aGUgaW5kZXgg
cm9vdCBwYXRoCisgKiBvZiBhIGNsYXNzcGF0aCBlbnRyeSBjb3JyZXNwb25kaW5nIHRvIHRoZSBl
bGVtZW50IHdhcyBhZGRlZC4gVGhpcyBmbGFnIGlzIG9ubHkgdmFsaWQgaWYgdGhlIGVsZW1lbnQg
aXMgYW4KKyAqIHtAbGluayBJUGFja2FnZUZyYWdtZW50Um9vdH0uPC9saT4KKyAqIDxsaT57QGxp
bmsgI0ZfSU5ERVhERVRBQ0hFRH0gLSBUaGUgaW5kZXggcGF0aCBvciB0aGUgaW5kZXggcm9vdCBw
YXRoCisgKiBvZiBhIGNsYXNzcGF0aCBlbnRyeSBjb3JyZXNwb25kaW5nIHRvIHRoZSBlbGVtZW50
IHdhcyByZW1vdmVkLiBUaGlzIGZsYWcgaXMgb25seSB2YWxpZCBpZiB0aGUgZWxlbWVudCBpcyBh
bgorICoge0BsaW5rIElQYWNrYWdlRnJhZ21lbnRSb290fS48L2xpPgogICogPGxpPntAbGluayAj
Rl9TVVBFUl9UWVBFU30gLSBPbmUgb2YgdGhlIHN1cGVydHlwZXMgb2YgYW4ge0BsaW5rIElUeXBl
fSBoYXMgY2hhbmdlZDwvbGk+LgogICogPC91bD4KICAqIDwvbGk+CkBAIC0zMTIsNiArMzE4LDI2
IEBACiAJICogQHNpbmNlIDMuNAogCSAqLwogCXB1YmxpYyBpbnQgRl9BTk5PVEFUSU9OUyA9IDB4
NDAwMDAwOworCQorCS8qKgorCSAqIFRPRE8gU0FUWUFNOiBXZSBwcm9iYWJseSBkb24ndCBuZWVk
IHRoaXMgZGVsdGEuLgorCSAqIAorCSAqIENoYW5nZSBmbGFnIGluZGljYXRpbmcgdGhhdCB0aGUg
aW5kZXggZmlsZSBvZiBhIGNsYXNzcGF0aCBlbnRyeQorCSAqIGNvcnJlc3BvbmRpbmcgdG8gdGhl
IGVsZW1lbnQgd2FzIGFkZGVkLiBUaGlzIGZsYWcgaXMgb25seSB2YWxpZCBpZiB0aGUgZWxlbWVu
dCBpcyBhbgorCSAqIHtAbGluayBJUGFja2FnZUZyYWdtZW50Um9vdH0uCisJICogCisJICogQHNp
bmNlIDMuOAorCSAqLworCXB1YmxpYyBpbnQgRl9JTkRFWEFUVEFDSEVEID0gMHg4MDAwMDA7CisJ
CisJLyoqCisJICogQ2hhbmdlIGZsYWcgaW5kaWNhdGluZyB0aGF0IHRoZSBpbmRleCBmaWxlIG9m
IGEgY2xhc3NwYXRoIGVudHJ5CisJICogY29ycmVzcG9uZGluZyB0byB0aGUgZWxlbWVudCB3YXMg
cmVtb3ZlZC4gVGhpcyBmbGFnIGlzIG9ubHkgdmFsaWQgaWYgdGhlIGVsZW1lbnQgaXMgYW4KKwkg
KiB7QGxpbmsgSVBhY2thZ2VGcmFnbWVudFJvb3R9LgorCSAqIAorCSAqIEBzaW5jZSAzLjgKKwkg
Ki8KKwlwdWJsaWMgaW50IEZfSU5ERVhERVRBQ0hFRCA9IDB4MTAwMDAwMDsKIAogCS8qKgogCSAq
IFJldHVybnMgZGVsdGFzIGZvciB0aGUgY2hpbGRyZW4gdGhhdCBoYXZlIGJlZW4gYWRkZWQuCmRp
ZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvY29y
ZS9JUGFja2FnZUZyYWdtZW50Um9vdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwv
b3JnL2VjbGlwc2UvamR0L2NvcmUvSVBhY2thZ2VGcmFnbWVudFJvb3QuamF2YQppbmRleCBjMWVk
NTg4Li40MjFhZTRiIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcv
ZWNsaXBzZS9qZHQvY29yZS9JUGFja2FnZUZyYWdtZW50Um9vdC5qYXZhCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9jb3JlL0lQYWNrYWdlRnJhZ21lbnRS
b290LmphdmEKQEAgLTEsNSArMSw1IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29w
eXJpZ2h0IChjKSAyMDAwLCAyMDEwIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29w
eXJpZ2h0IChjKSAyMDAwLCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxs
IHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVy
aWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBz
ZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1
dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdApAQCAtMTgsNiArMTgsNyBAQAogICoqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKiovCiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5jb3JlOwogCitpbXBvcnQgamF2
YS5uZXQuVVJMOwogaW1wb3J0IG9yZy5lY2xpcHNlLmNvcmUucnVudGltZS5JUGF0aDsKIGltcG9y
dCBvcmcuZWNsaXBzZS5jb3JlLnJ1bnRpbWUuSVByb2dyZXNzTW9uaXRvcjsKIApAQCAtMjQzLDYg
KzI0NCwxOCBAQAogCSAqLwogCXZvaWQgZGVsZXRlKGludCB1cGRhdGVSZXNvdXJjZUZsYWdzLCBp
bnQgdXBkYXRlTW9kZWxGbGFncywgSVByb2dyZXNzTW9uaXRvciBtb25pdG9yKSB0aHJvd3MgSmF2
YU1vZGVsRXhjZXB0aW9uOwogCS8qKgorCSAqIFJldHVybnMgdGhlIFVSTCB0byB0aGUgaW5kZXgg
ZmlsZSBhdHRhY2hlZCB0byB0aGlzIHBhY2thZ2UgZnJhZ21lbnQgcm9vdCdzIGJpbmFyeSBhcmNo
aXZlLgorCSAqCisJICogQHJldHVybiB0aGUgVVJMIHRvIHRoZSBjb3JyZXNwb25kaW5nIGluZGV4
IGZpbGUsCisJICogICBvciA8Y29kZT5udWxsPC9jb2RlPiBpZiB0aGlzIHBhY2thZ2UgZnJhZ21l
bnQgcm9vdCdzIGJpbmFyeSBhcmNoaXZlCisJICogICBoYXMgbm8gY29ycmVzcG9uZGluZyBpbmRl
eCBmaWxlLCBvciBpZiB0aGlzIHBhY2thZ2UgZnJhZ21lbnQgcm9vdAorCSAqICAgaXMgbm90IGEg
YmluYXJ5IGFyY2hpdmUKKwkgKiBAZXhjZXB0aW9uIEphdmFNb2RlbEV4Y2VwdGlvbiBpZiB0aGlz
IG9wZXJhdGlvbiBmYWlscworCSAqIAorCSAqIEBzaW5jZSAzLjgKKwkgKi8KKwlVUkwgZ2V0SW5k
ZXhQYXRoKCkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbjsKKwkvKioKIAkgKiBSZXR1cm5zIHRo
aXMgcGFja2FnZSBmcmFnbWVudCByb290J3Mga2luZCBlbmNvZGVkIGFzIGFuIGludGVnZXIuCiAJ
ICogQSBwYWNrYWdlIGZyYWdtZW50IHJvb3QgY2FuIGNvbnRhaW4gc291cmNlIGZpbGVzIChpLmUu
IGZpbGVzIHdpdGggb25lCiAJICogb2YgdGhlIHtAbGluayBKYXZhQ29yZSNnZXRKYXZhTGlrZUV4
dGVuc2lvbnMoKSBKYXZhLWxpa2UgZXh0ZW5zaW9uc30sCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9DbGFzc3BhdGhD
aGFuZ2UuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb3JlL0NsYXNzcGF0aENoYW5nZS5qYXZhCmluZGV4IGI5NmNkNDQuLjVkNWUzYmQg
MTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb3JlL0NsYXNzcGF0aENoYW5nZS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0NsYXNzcGF0aENoYW5nZS5q
YXZhCkBAIC0xMCw2ICsxMCw3IEBACiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KIHBhY2thZ2Ug
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvcmU7CiAKK2ltcG9ydCBqYXZhLm5ldC5VUkw7CiBp
bXBvcnQgamF2YS51dGlsLkFycmF5TGlzdDsKIGltcG9ydCBqYXZhLnV0aWwuSGFzaE1hcDsKIGlt
cG9ydCBqYXZhLnV0aWwuSGFzaFNldDsKQEAgLTMzNSw2ICszMzYsNyBAQAogCQkJCQkJCWJvb2xl
YW4gZm91bmQgPSBmYWxzZTsKIAkJCQkJCQlmb3IgKGludCBqID0gMDsgaiA8IGFjY3VtdWxhdGVk
Um9vdHMuc2l6ZSgpOyBqKyspIHsKIAkJCQkJCQkJSVBhY2thZ2VGcmFnbWVudFJvb3Qgcm9vdCA9
IChJUGFja2FnZUZyYWdtZW50Um9vdCkgYWNjdW11bGF0ZWRSb290cy5lbGVtZW50QXQoaik7CisJ
CQkJCQkJCS8vIFRPRE8gU0FUWUFNOiBTaG91bGRuJ3QgdGhlIGNoZWNrIGJlIG9wcG9zaXRlPwog
CQkJCQkJCQlpZiAoIXJvb3QuZ2V0UGF0aCgpLmVxdWFscyhvbGRSb290LmdldFBhdGgoKSkpIHsK
IAkJCQkJCQkJCWZvdW5kID0gdHJ1ZTsKIAkJCQkJCQkJCWJyZWFrOwpAQCAtNTExLDcgKzUxMyw3
IEBACiAKIAkJZm9yIChpbnQgaSA9IDA7IGkgPCBuZXdMZW5ndGg7IGkrKykgewogCQkJaW50IGlu
ZGV4ID0gY2xhc3NwYXRoQ29udGFpbnModGhpcy5vbGRSZXNvbHZlZENsYXNzcGF0aCwgbmV3UmVz
b2x2ZWRDbGFzc3BhdGhbaV0pOwotCQkJaWYgKGluZGV4ID09IC0xKSB7CisJCQlpZiAoaW5kZXgg
PT0gLTEgfHwgbmV3UmVzb2x2ZWRDbGFzc3BhdGhbaV0uZ2V0RW50cnlLaW5kKCkgPT0gSUNsYXNz
cGF0aEVudHJ5LkNQRV9MSUJSQVJZKSB7CiAJCQkJLy8gcmVtb3RlIHByb2plY3RzIGFyZSBub3Qg
aW5kZXhlZCBpbiB0aGlzIHByb2plY3QKIAkJCQlpZiAobmV3UmVzb2x2ZWRDbGFzc3BhdGhbaV0u
Z2V0RW50cnlLaW5kKCkgPT0gSUNsYXNzcGF0aEVudHJ5LkNQRV9QUk9KRUNUKXsKIAkJCQkJY29u
dGludWU7CkBAIC01MjQsMTQgKzUyNiwyMyBAQAogCQkJCQkJYm9vbGVhbiBwYXRoSGFzQ2hhbmdl
ZCA9IHRydWU7CiAJCQkJCQlJUGF0aCBuZXdQYXRoID0gbmV3UmVzb2x2ZWRDbGFzc3BhdGhbaV0u
Z2V0UGF0aCgpOwogCQkJCQkJZm9yIChpbnQgaiA9IDA7IGogPCBvbGRMZW5ndGg7IGorKykgewor
CQkJCQkJCS8vVE9ETyBTQVRZQU06IElzbid0IGluZGV4ID09IGo/CiAJCQkJCQkJSUNsYXNzcGF0
aEVudHJ5IG9sZEVudHJ5ID0gdGhpcy5vbGRSZXNvbHZlZENsYXNzcGF0aFtqXTsKIAkJCQkJCQlp
ZiAob2xkRW50cnkuZ2V0UGF0aCgpLmVxdWFscyhuZXdQYXRoKSkgewotCQkJCQkJCQlwYXRoSGFz
Q2hhbmdlZCA9IGZhbHNlOworCQkJCQkJCQlVUkwgb2xkdXJsID0gKChDbGFzc3BhdGhFbnRyeSlv
bGRFbnRyeSkuZ2V0TGlicmFyeUluZGV4TG9jYXRpb24oKTsKKwkJCQkJCQkJVVJMIG5ld3VybCA9
ICgoQ2xhc3NwYXRoRW50cnkpbmV3UmVzb2x2ZWRDbGFzc3BhdGhbaV0pLmdldExpYnJhcnlJbmRl
eExvY2F0aW9uKCk7CisJCQkJCQkJCWlmIChvbGR1cmwgPT0gbnVsbCAmJiBuZXd1cmwgPT0gbnVs
bCkgeworCQkJCQkJCQkJcGF0aEhhc0NoYW5nZWQgPSBmYWxzZTsKKwkJCQkJCQkJfSBlbHNlIGlm
IChvbGR1cmwgIT0gbnVsbCAmJiBuZXd1cmwgIT0gbnVsbCkgeworCQkJCQkJCQkJcGF0aEhhc0No
YW5nZWQgPSAhKG5ld3VybC5lcXVhbHMob2xkdXJsKSk7CisJCQkJCQkJCX0gZWxzZSBpZiAob2xk
dXJsICE9IG51bGwpIHsKKwkJCQkJCQkJCWluZGV4TWFuYWdlci5yZW1vdmVJbmRleChuZXdQYXRo
KTsKKwkJCQkJCQkJfQogCQkJCQkJCQlicmVhazsKIAkJCQkJCQl9CiAJCQkJCQl9CiAJCQkJCQlp
ZiAocGF0aEhhc0NoYW5nZWQpIHsKLQkJCQkJCQlpbmRleE1hbmFnZXIuaW5kZXhMaWJyYXJ5KG5l
d1BhdGgsIHRoaXMucHJvamVjdC5nZXRQcm9qZWN0KCkpOworCQkJCQkJCWluZGV4TWFuYWdlci5p
bmRleExpYnJhcnkobmV3UGF0aCwgdGhpcy5wcm9qZWN0LmdldFByb2plY3QoKSwoKENsYXNzcGF0
aEVudHJ5KW5ld1Jlc29sdmVkQ2xhc3NwYXRoW2ldKS5nZXRMaWJyYXJ5SW5kZXhMb2NhdGlvbigp
KTsKIAkJCQkJCX0KIAkJCQkJCWJyZWFrOwogCQkJCQljYXNlIElDbGFzc3BhdGhFbnRyeS5DUEVf
U09VUkNFOgpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvcmUvQ2xhc3NwYXRoRW50cnkuamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0NsYXNzcGF0aEVudHJ5
LmphdmEKaW5kZXggNTY1NjMyMy4uNWZhZjE5NyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvQ2xhc3NwYXRoRW50cnku
amF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29yZS9DbGFzc3BhdGhFbnRyeS5qYXZhCkBAIC0xNyw2ICsxNyw4IEBACiBpbXBvcnQg
amF2YS5pby5JbnB1dFN0cmVhbTsKIGltcG9ydCBqYXZhLmlvLk91dHB1dFN0cmVhbVdyaXRlcjsK
IGltcG9ydCBqYXZhLmlvLlVuc3VwcG9ydGVkRW5jb2RpbmdFeGNlcHRpb247CitpbXBvcnQgamF2
YS5uZXQuTWFsZm9ybWVkVVJMRXhjZXB0aW9uOworaW1wb3J0IGphdmEubmV0LlVSTDsKIGltcG9y
dCBqYXZhLnV0aWwuQXJyYXlMaXN0OwogaW1wb3J0IGphdmEudXRpbC5IYXNoTWFwOwogaW1wb3J0
IGphdmEudXRpbC5IYXNoU2V0OwpAQCAtMTUyNCw2ICsxNTI2LDMzIEBACiAKIAkJcmV0dXJuIEph
dmFDb3JlLmdldFJlc29sdmVkQ2xhc3NwYXRoRW50cnkodGhpcyk7CiAJfQorCQorCS8qKgorCSAq
IFRoaXMgZnVuY3Rpb24gY29tcHV0ZXMgdGhlIFVSTCBvZiB0aGUgaW5kZXggbG9jYXRpb24gZm9y
IHRoaXMgY2xhc3NwYXRoIGVudHJ5LiBJdCByZXR1cm5zIG51bGwgaWYgdGhlIFVSTCBpcworCSAq
IGludmFsaWQuCisJICovCisJcHVibGljIFVSTCBnZXRMaWJyYXJ5SW5kZXhMb2NhdGlvbigpIHsK
KwkJc3dpdGNoKGdldEVudHJ5S2luZCgpKSB7CisJCQljYXNlIElDbGFzc3BhdGhFbnRyeS5DUEVf
TElCUkFSWSA6CisJCQljYXNlIElDbGFzc3BhdGhFbnRyeS5DUEVfVkFSSUFCTEUgOgorCQkJCWJy
ZWFrOworCQkJZGVmYXVsdCA6CisJCQkJcmV0dXJuIG51bGw7CisJCX0KKworCQlmb3IgKGludCBp
PSAwOyBpIDwgdGhpcy5leHRyYUF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHsKKwkJCUlDbGFzc3Bh
dGhBdHRyaWJ1dGUgYXR0cmliPSB0aGlzLmV4dHJhQXR0cmlidXRlc1tpXTsKKwkJCWlmIChJQ2xh
c3NwYXRoQXR0cmlidXRlLklOREVYX0xPQ0FUSU9OX0FUVFJJQlVURV9OQU1FLmVxdWFscyhhdHRy
aWIuZ2V0TmFtZSgpKSkgeworCQkJCVN0cmluZyB2YWx1ZSA9IGF0dHJpYi5nZXRWYWx1ZSgpOwor
CQkJCXRyeSB7CisJCQkJCXJldHVybiBuZXcgVVJMKHZhbHVlKTsKKwkJCQl9IGNhdGNoIChNYWxm
b3JtZWRVUkxFeGNlcHRpb24gZSkgeworCQkJCQlyZXR1cm4gbnVsbDsKKwkJCQl9CisJCQl9CisJ
CX0KKwkJcmV0dXJuIG51bGw7CisJfQkKIAogCS8qKgogCSAqIFZhbGlkYXRlIGEgZ2l2ZW4gY2xh
c3NwYXRoIGFuZCBvdXRwdXQgbG9jYXRpb24gZm9yIGEgcHJvamVjdCwgdXNpbmcgdGhlIGZvbGxv
d2luZyBydWxlczoKQEAgLTIxOTEsNSArMjIyMCw1IEBACiAJCQl9CiAJCX0KIAkJcmV0dXJuIEph
dmFNb2RlbFN0YXR1cy5WRVJJRklFRF9PSzsKLQl9CisJfQkKIH0KZGlmZiAtLWdpdCBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0RlbHRh
UHJvY2Vzc29yLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29yZS9EZWx0YVByb2Nlc3Nvci5qYXZhCmluZGV4IDEyNmZjYzkuLjRlZjZl
MGIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb3JlL0RlbHRhUHJvY2Vzc29yLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvRGVsdGFQcm9jZXNzb3Iu
amF2YQpAQCAtMTMsNiArMTMsNyBAQAogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwu
Y29yZTsKIAogaW1wb3J0IGphdmEuaW8uRmlsZTsKK2ltcG9ydCBqYXZhLm5ldC5VUkw7CiBpbXBv
cnQgamF2YS51dGlsLio7CiAKIGltcG9ydCBvcmcuZWNsaXBzZS5jb3JlLnJlc291cmNlcy5JQ29u
dGFpbmVyOwpAQCAtOTk3LDggKzk5OCwxMiBAQAogCQkJCQkJCQkJLy8gZmlyc3QgcmVtb3ZlIHRo
ZSBpbmRleCBzbyB0aGF0IGl0IGlzIGZvcmNlZCB0byBiZSByZS1pbmRleGVkCiAJCQkJCQkJCQl0
aGlzLm1hbmFnZXIuaW5kZXhNYW5hZ2VyLnJlbW92ZUluZGV4KGVudHJ5UGF0aCk7CiAJCQkJCQkJ
CQkvLyB0aGVuIGluZGV4IHRoZSBqYXIKLQkJCQkJCQkJCXRoaXMubWFuYWdlci5pbmRleE1hbmFn
ZXIuaW5kZXhMaWJyYXJ5KGVudHJ5UGF0aCwgcHJvamVjdC5nZXRQcm9qZWN0KCkpOworCQkJCQkJ
CQkJdGhpcy5tYW5hZ2VyLmluZGV4TWFuYWdlci5pbmRleExpYnJhcnkoZW50cnlQYXRoLCBwcm9q
ZWN0LmdldFByb2plY3QoKSwgKChDbGFzc3BhdGhFbnRyeSllbnRyaWVzW2pdKS5nZXRMaWJyYXJ5
SW5kZXhMb2NhdGlvbigpKTsKIAkJCQkJCQkJfSBlbHNlIHsKKwkJCQkJCQkJCVVSTCBpbmRleExv
Y2F0aW9uID0gKChDbGFzc3BhdGhFbnRyeSllbnRyaWVzW2pdKS5nZXRMaWJyYXJ5SW5kZXhMb2Nh
dGlvbigpOworCQkJCQkJCQkJaWYgKGluZGV4TG9jYXRpb24gIT0gbnVsbCkgeyAvLyBmb3JjZSBy
ZWluZGV4aW5nLCB0aGlzIGNvdWxkIGJlIGZhc3RlciByYXRoZXIgdGhhbiBtYWludGFpbmluZyB0
aGUgbGlzdAorCQkJCQkJCQkJCXRoaXMubWFuYWdlci5pbmRleE1hbmFnZXIuaW5kZXhMaWJyYXJ5
KGVudHJ5UGF0aCwgcHJvamVjdC5nZXRQcm9qZWN0KCksICgoQ2xhc3NwYXRoRW50cnkpZW50cmll
c1tqXSkuZ2V0TGlicmFyeUluZGV4TG9jYXRpb24oKSk7CisJCQkJCQkJCQl9CiAJCQkJCQkJCQll
eHRlcm5hbEFyY2hpdmVzU3RhdHVzLnB1dChlbnRyeVBhdGgsIEVYVEVSTkFMX0pBUl9VTkNIQU5H
RUQpOwogCQkJCQkJCQl9CiAJCQkJCQkJfSBlbHNlIHsKQEAgLTEwMDksNyArMTAxNCw3IEBACiAJ
CQkJCQkJCQl0aGlzLnN0YXRlLmdldEV4dGVybmFsTGliVGltZVN0YW1wcygpLnB1dChlbnRyeVBh
dGgsIG5ldyBMb25nKG5ld1RpbWVTdGFtcCkpOwogCQkJCQkJCQkJLy8gaW5kZXggdGhlIG5ldyBq
YXIKIAkJCQkJCQkJCXRoaXMubWFuYWdlci5pbmRleE1hbmFnZXIucmVtb3ZlSW5kZXgoZW50cnlQ
YXRoKTsKLQkJCQkJCQkJCXRoaXMubWFuYWdlci5pbmRleE1hbmFnZXIuaW5kZXhMaWJyYXJ5KGVu
dHJ5UGF0aCwgcHJvamVjdC5nZXRQcm9qZWN0KCkpOworCQkJCQkJCQkJdGhpcy5tYW5hZ2VyLmlu
ZGV4TWFuYWdlci5pbmRleExpYnJhcnkoZW50cnlQYXRoLCBwcm9qZWN0LmdldFByb2plY3QoKSwg
KChDbGFzc3BhdGhFbnRyeSllbnRyaWVzW2pdKS5nZXRMaWJyYXJ5SW5kZXhMb2NhdGlvbigpKTsK
IAkJCQkJCQkJfQogCQkJCQkJCX0KIAkJCQkJCX0gZWxzZSB7IC8vIGludGVybmFsIEpBUgpAQCAt
MjYyOSwxMyArMjYzNCwxMyBAQAogCQkJCQlzd2l0Y2ggKGRlbHRhLmdldEtpbmQoKSkgewogCQkJ
CQkJY2FzZSBJUmVzb3VyY2VEZWx0YS5BRERFRDoKIAkJCQkJCQkvLyBpbmRleCB0aGUgbmV3IGph
cgotCQkJCQkJCWluZGV4TWFuYWdlci5pbmRleExpYnJhcnkoamFyUGF0aCwgcm9vdC5nZXRKYXZh
UHJvamVjdCgpLmdldFByb2plY3QoKSk7CisJCQkJCQkJaW5kZXhNYW5hZ2VyLmluZGV4TGlicmFy
eShqYXJQYXRoLCByb290LmdldEphdmFQcm9qZWN0KCkuZ2V0UHJvamVjdCgpLCByb290LmdldElu
ZGV4UGF0aCgpICk7CiAJCQkJCQkJYnJlYWs7CiAJCQkJCQljYXNlIElSZXNvdXJjZURlbHRhLkNI
QU5HRUQ6CiAJCQkJCQkJLy8gZmlyc3QgcmVtb3ZlIHRoZSBpbmRleCBzbyB0aGF0IGl0IGlzIGZv
cmNlZCB0byBiZSByZS1pbmRleGVkCiAJCQkJCQkJaW5kZXhNYW5hZ2VyLnJlbW92ZUluZGV4KGph
clBhdGgpOwogCQkJCQkJCS8vIHRoZW4gaW5kZXggdGhlIGphcgotCQkJCQkJCWluZGV4TWFuYWdl
ci5pbmRleExpYnJhcnkoamFyUGF0aCwgcm9vdC5nZXRKYXZhUHJvamVjdCgpLmdldFByb2plY3Qo
KSk7CisJCQkJCQkJaW5kZXhNYW5hZ2VyLmluZGV4TGlicmFyeShqYXJQYXRoLCByb290LmdldEph
dmFQcm9qZWN0KCkuZ2V0UHJvamVjdCgpLCByb290LmdldEluZGV4UGF0aCgpKTsKIAkJCQkJCQli
cmVhazsKIAkJCQkJCWNhc2UgSVJlc291cmNlRGVsdGEuUkVNT1ZFRDoKIAkJCQkJCQkvLyB0aGUg
amFyIHdhcyBwaHlzaWNhbGx5IHJlbW92ZWQ6IHJlbW92ZSB0aGUgaW5kZXgKZGlmZiAtLWdpdCBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3Jl
L0phdmFFbGVtZW50RGVsdGEuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0phdmFFbGVtZW50RGVsdGEuamF2YQppbmRleCBlZTBk
NzE1Li5lNTVjOTUxIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9KYXZhRWxlbWVudERlbHRhLmphdmEKKysrIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvSmF2
YUVsZW1lbnREZWx0YS5qYXZhCkBAIC0xLDUgKzEsNSBAQAogLyoqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMCBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVy
cy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMSBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVy
cy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFu
eWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2Yg
dGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhp
cyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKQEAgLTU2OSw2ICs1NjksMjkgQEAK
IAlkZXRhY2hlZERlbHRhLmNoYW5nZWQoRl9TT1VSQ0VERVRBQ0hFRCk7CiAJaW5zZXJ0RGVsdGFU
cmVlKGVsZW1lbnQsIGRldGFjaGVkRGVsdGEpOwogfQorCisvKioKKyAqIENyZWF0ZXMgdGhlIG5l
c3RlZCBkZWx0YXMgcmVzdWx0aW5nIGZyb20gYSBjaGFuZ2Ugb3BlcmF0aW9uLgorICogQ29udmVu
aWVuY2UgbWV0aG9kIGZvciBjcmVhdGluZyBjaGFuZ2UgZGVsdGFzLgorICogVGhlIGNvbnN0cnVj
dG9yIHNob3VsZCBiZSB1c2VkIHRvIGNyZWF0ZSB0aGUgcm9vdCBkZWx0YQorICogYW5kIHRoZW4g
YSBjaGFuZ2Ugb3BlcmF0aW9uIHNob3VsZCBjYWxsIHRoaXMgbWV0aG9kLgorICovCitwdWJsaWMg
dm9pZCBpbmRleEF0dGFjaGVkKElKYXZhRWxlbWVudCBlbGVtZW50KSB7CisJSmF2YUVsZW1lbnRE
ZWx0YSBhdHRhY2hlZERlbHRhID0gbmV3IEphdmFFbGVtZW50RGVsdGEoZWxlbWVudCk7CisJYXR0
YWNoZWREZWx0YS5jaGFuZ2VkKEZfSU5ERVhBVFRBQ0hFRCk7CisJaW5zZXJ0RGVsdGFUcmVlKGVs
ZW1lbnQsIGF0dGFjaGVkRGVsdGEpOworfQorLyoqCisgKiBDcmVhdGVzIHRoZSBuZXN0ZWQgZGVs
dGFzIHJlc3VsdGluZyBmcm9tIGEgY2hhbmdlIG9wZXJhdGlvbi4KKyAqIENvbnZlbmllbmNlIG1l
dGhvZCBmb3IgY3JlYXRpbmcgY2hhbmdlIGRlbHRhcy4KKyAqIFRoZSBjb25zdHJ1Y3RvciBzaG91
bGQgYmUgdXNlZCB0byBjcmVhdGUgdGhlIHJvb3QgZGVsdGEKKyAqIGFuZCB0aGVuIGEgY2hhbmdl
IG9wZXJhdGlvbiBzaG91bGQgY2FsbCB0aGlzIG1ldGhvZC4KKyAqLworcHVibGljIHZvaWQgaW5k
ZXhEZXRhY2hlZChJSmF2YUVsZW1lbnQgZWxlbWVudCkgeworCUphdmFFbGVtZW50RGVsdGEgZGV0
YWNoZWREZWx0YSA9IG5ldyBKYXZhRWxlbWVudERlbHRhKGVsZW1lbnQpOworCWRldGFjaGVkRGVs
dGEuY2hhbmdlZChGX0lOREVYREVUQUNIRUQpOworCWluc2VydERlbHRhVHJlZShlbGVtZW50LCBk
ZXRhY2hlZERlbHRhKTsKK30KIC8qKgogICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRhdGlv
biBvZiB0aGlzIGRlbHRhJ3MKICAqIHN0cnVjdHVyZSBzdWl0YWJsZSBmb3IgZGVidWcgcHVycG9z
ZXMuCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29yZS9QYWNrYWdlRnJhZ21lbnRSb290LmphdmEgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9QYWNrYWdlRnJhZ21l
bnRSb290LmphdmEKaW5kZXggOWZiNTljNi4uYTY0MGQ2YSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvUGFja2FnZUZy
YWdtZW50Um9vdC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb3JlL1BhY2thZ2VGcmFnbWVudFJvb3QuamF2YQpAQCAtMSw1ICsx
LDUgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIw
MTAgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIw
MTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBU
aGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBh
dmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYx
LjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxh
YmxlIGF0CkBAIC0xMCw2ICsxMCw3IEBACiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KIHBhY2th
Z2Ugb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvcmU7CiAKK2ltcG9ydCBqYXZhLm5ldC5VUkw7
CiBpbXBvcnQgamF2YS51dGlsLkFycmF5TGlzdDsKIGltcG9ydCBqYXZhLnV0aWwuRW51bWVyYXRp
b247CiBpbXBvcnQgamF2YS51dGlsLk1hcDsKQEAgLTgwNyw0ICs4MDgsMTYgQEAKIAl9CiB9CiAK
K3B1YmxpYyBVUkwgZ2V0SW5kZXhQYXRoKCkgeworCXRyeSB7CisJCWlmIChnZXRLaW5kKCkgIT0g
S19CSU5BUlkpIHJldHVybiBudWxsOworCisJCUlDbGFzc3BhdGhFbnRyeSBlbnRyeSA9ICgoSmF2
YVByb2plY3QpIGdldFBhcmVudCgpKS5nZXRDbGFzc3BhdGhFbnRyeUZvcihnZXRQYXRoKCkpOwor
CQlpZiAoZW50cnkgIT0gbnVsbCkgcmV0dXJuICgoQ2xhc3NwYXRoRW50cnkpZW50cnkpLmdldExp
YnJhcnlJbmRleExvY2F0aW9uKCk7CQorCX0gY2F0Y2ggKEphdmFNb2RlbEV4Y2VwdGlvbiBlKSB7
CisJCS8vIGlnbm9yZSBleGNlcHRpb24KKwl9CisJcmV0dXJuIG51bGw7Cit9CisKIH0KZGlmZiAt
LWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL3BsdWdpbi54bWwgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9wbHVnaW4ueG1sCmluZGV4IDM3ODQyNTYuLjVkNjk3ODggMTAwNjQ0Ci0tLSBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL3BsdWdpbi54bWwKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvcGx1
Z2luLnhtbApAQCAtMSw3ICsxLDcgQEAKIDw/eG1sIHZlcnNpb249IjEuMCIgZW5jb2Rpbmc9IlVU
Ri04Ij8+CiA8P2VjbGlwc2UgdmVyc2lvbj0iMy4wIj8+CiA8IS0tCi0gICAgQ29weXJpZ2h0IChj
KSAyMDA0LCAyMDEwIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICAgIENvcHlyaWdodCAo
YykgMjAwNCwgMjAxMSBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAgICBBbGwgcmlnaHRz
IHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAg
ICAgYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJs
aWMgTGljZW5zZSB2MS4wCiAgICAgd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24s
IGFuZCBpcyBhdmFpbGFibGUgYXQKQEAgLTE1OCw2ICsxNTgsMTEgQEAKIAkJY2xhc3M9Im9yZy5l
Y2xpcHNlLmpkdC5jb3JlLkNoZWNrRGVidWdBdHRyaWJ1dGVzIgogCQlsaWJyYXJ5PSJqZHRDb21w
aWxlckFkYXB0ZXIuamFyIj4KIAk8L2FudFRhc2s+CisJPGFudFRhc2sKKwkJbmFtZT0iZWNsaXBz
ZS5idWlsZEphckluZGV4IgorCQljbGFzcz0ib3JnLmVjbGlwc2UuamR0LmNvcmUuQnVpbGRKYXJJ
bmRleCIKKwkJbGlicmFyeT0iamR0Q29tcGlsZXJBZGFwdGVyLmphciI+CisJPC9hbnRUYXNrPgog
PC9leHRlbnNpb24+CiAgICAgICAKIDwhLS0gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gLS0+
CkBAIC0xOTYsNiArMjAxLDE3IEBACiA8L2V4dGVuc2lvbj4KIAogPCEtLSA9PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PSAtLT4KKzwhLS0gRXh0ZW5zaW9uOiBKYXZhIEdlbmVyYXRlIEluZGV4ZXIg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0+Cis8
IS0tID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09IC0tPgorPGV4dGVuc2lvbgorICAgICAgaWQ9
IkphdmFJbmRleGVyIgorICAgICAgcG9pbnQ9Im9yZy5lY2xpcHNlLmNvcmUucnVudGltZS5hcHBs
aWNhdGlvbnMiPgorICAgCQk8YXBwbGljYXRpb24+CisgICAgICAJCTxydW4gY2xhc3M9Im9yZy5l
Y2xpcHNlLmpkdC5jb3JlLmluZGV4LkphdmFJbmRleGVyQXBwbGljYXRpb24iIC8+CisgICAJCTwv
YXBwbGljYXRpb24+Cis8L2V4dGVuc2lvbj4KKworPCEtLSA9PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PSAtLT4KIDwhLS0gRXh0ZW5zaW9uOiBKYXZhIENvbnRlbnQgVHlwZXMgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLS0+CiA8IS0tID09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09IC0tPgogPGV4dGVuc2lvbiBwb2ludD0ib3JnLmVjbGlwc2Uu
Y29yZS5jb250ZW50dHlwZS5jb250ZW50VHlwZXMiPgpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9jb3JlL2luZGV4L0phdmFJbmRleGVyLmph
dmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2NvcmUvaW5k
ZXgvSmF2YUluZGV4ZXIuamF2YQpuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwLi4z
YjdlZjBmCi0tLSAvZGV2L251bGwKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL2luZGV4L0phdmFJbmRleGVyLmphdmEKQEAgLTAsMCArMSwzMiBA
QAorLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioNCisgKiBDb3B5cmlnaHQgKGMpIDIwMTEgSUJNIENv
cnBvcmF0aW9uIGFuZCBvdGhlcnMuDQorICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9n
cmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscw0KKyAqIGFyZSBtYWRlIGF2YWlsYWJs
ZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMA0KKyAq
IHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0
DQorICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwNCisgKg0KKyAq
IENvbnRyaWJ1dG9yczoNCisgKiAgICAgSUJNIENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5k
IGltcGxlbWVudGF0aW9uDQorICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovDQorcGFja2FnZSBvcmcu
ZWNsaXBzZS5qZHQuY29yZS5pbmRleDsNCisNCitpbXBvcnQgamF2YS5pby5JT0V4Y2VwdGlvbjsN
CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvcmUuc2VhcmNoLmluZGV4aW5nLkRl
ZmF1bHRKYXZhSW5kZXhlcjsNCisNCisvKioNCisgKiBUT0RPIFNBVFlBTTogV3JpdGUgYSBwcm9w
ZXIgamF2YWRvYw0KKyAqIEBzaW5jZSAzLjgNCisgKi8NCitwdWJsaWMgY2xhc3MgSmF2YUluZGV4
ZXIgew0KKw0KKwkvKioNCisJICogVE9ETyBTQVRZQU06IFdyaXRlIGEgamF2YWRvYw0KKwkgKiBA
cGFyYW0gcGF0aFRvSmFyDQorCSAqIEBwYXJhbSBwYXRoVG9JbmRleEZpbGUNCisJICogQHRocm93
cyBJT0V4Y2VwdGlvbg0KKwkgKi8NCisJcHVibGljIHN0YXRpYyB2b2lkIGdlbmVyYXRlSW5kZXhG
b3JKYXIoU3RyaW5nIHBhdGhUb0phciwgU3RyaW5nIHBhdGhUb0luZGV4RmlsZSkgdGhyb3dzIElP
RXhjZXB0aW9uIHsNCisJCW5ldyBEZWZhdWx0SmF2YUluZGV4ZXIoKS5nZW5lcmF0ZUluZGV4Rm9y
SmFyKHBhdGhUb0phciwgcGF0aFRvSW5kZXhGaWxlKTsNCisJfQ0KKw0KK30NCmRpZmYgLS1naXQg
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2NvcmUvaW5kZXgv
SmF2YUluZGV4ZXJBcHBsaWNhdGlvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNo
L29yZy9lY2xpcHNlL2pkdC9jb3JlL2luZGV4L0phdmFJbmRleGVyQXBwbGljYXRpb24uamF2YQpu
ZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwLi40YjViOTMxCi0tLSAvZGV2L251bGwK
KysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9jb3JlL2lu
ZGV4L0phdmFJbmRleGVyQXBwbGljYXRpb24uamF2YQpAQCAtMCwwICsxLDE1NCBAQAorLyoqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioNCisgKiAgQ29weXJpZ2h0IChjKSAyMDExIElCTSBDb3Jwb3JhdGlv
biBhbmQgb3RoZXJzLg0KKyAqICBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5k
IHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzDQorICogIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRl
ciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMA0KKyAqICB3aGlj
aCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdA0KKyAq
ICBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbA0KKyAqIA0KKyAqICBD
b250cmlidXRvcnM6DQorICogICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJIGFuZCBp
bXBsZW1lbnRhdGlvbg0KKyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KK3BhY2thZ2Ugb3JnLmVj
bGlwc2UuamR0LmNvcmUuaW5kZXg7DQorDQoraW1wb3J0IGphdmEuaW8uRmlsZTsNCitpbXBvcnQg
amF2YS5pby5JT0V4Y2VwdGlvbjsNCitpbXBvcnQgamF2YS50ZXh0Lk1lc3NhZ2VGb3JtYXQ7DQor
aW1wb3J0IGphdmEudXRpbC5BcnJheUxpc3Q7DQorDQoraW1wb3J0IG9yZy5lY2xpcHNlLmVxdWlu
b3guYXBwLklBcHBsaWNhdGlvbjsNCitpbXBvcnQgb3JnLmVjbGlwc2UuZXF1aW5veC5hcHAuSUFw
cGxpY2F0aW9uQ29udGV4dDsNCitpbXBvcnQgb3JnLmVjbGlwc2Uub3NnaS51dGlsLk5MUzsNCisN
CisvKioNCisgKiBJbXBsZW1lbnRzIGFuIEVjbGlwc2UgQXBwbGljYXRpb24gZm9yIG9yZy5lY2xp
cHNlLmpkdC5jb3JlLkphdmFJbmRleGVyLg0KKyAqIA0KKyAqIFRPRE8gU0FUWUFNOiBJbXByb3Zl
IHRoZSBqYXZhZG9jIHRvIGluY2x1ZGUgdGhlIGFyZ3VtZW50cy4NCisgKiA8cD4NCisgKiBPbiBN
YWNPUywgd2hlbiBpbnZva2VkIHVzaW5nIHRoZSBFY2xpcHNlIGV4ZWN1dGFibGUsIHRoZSAidXNl
ci5kaXIiIHByb3BlcnR5IGlzIHNldCB0byB0aGUgZm9sZGVyIGluIHdoaWNoIHRoZQ0KKyAqIGVj
bGlwc2UuaW5pIGZpbGUgaXMgbG9jYXRlZC4gVGhpcyBtYWtlcyBpdCBoYXJkZXIgdG8gdXNlIHJl
bGF0aXZlIHBhdGhzIHRvIHBvaW50IHRvIHRoZSBmaWxlcyB0byBiZSBmb3JtYXR0ZWQgb3IgdGhl
DQorICogY29uZmlndXJhdGlvbiBmaWxlIHRvIHVzZSB0byBzZXQgdGhlIGNvZGUgZm9ybWF0dGVy
J3Mgb3B0aW9ucy4NCisgKiA8L3A+DQorICogDQorICogDQorICogQHNpbmNlIDMuOA0KKyAqIEBu
b2luc3RhbnRpYXRlIFRoaXMgY2xhc3MgaXMgbm90IGludGVuZGVkIHRvIGJlIGluc3RhbnRpYXRl
ZCBieSBjbGllbnRzLg0KKyAqIEBub2V4dGVuZCBUaGlzIGNsYXNzIGlzIG5vdCBpbnRlbmRlZCB0
byBiZSBzdWJjbGFzc2VkIGJ5IGNsaWVudHMuDQorICovDQorcHVibGljIGNsYXNzIEphdmFJbmRl
eGVyQXBwbGljYXRpb24gaW1wbGVtZW50cyBJQXBwbGljYXRpb24gew0KKw0KKwlwcml2YXRlIGZp
bmFsIHN0YXRpYyBjbGFzcyBNZXNzYWdlcyBleHRlbmRzIE5MUyB7DQorCQlwcml2YXRlIHN0YXRp
YyBmaW5hbCBTdHJpbmcgTUVTU0FHRVNfTkFNRSA9ICJvcmcuZWNsaXBzZS5qZHQuY29yZS5pbmRl
eC5tZXNzYWdlcyI7Ly8kTk9OLU5MUy0xJA0KKw0KKwkJcHVibGljIHN0YXRpYyBTdHJpbmcgQ29t
bWFuZExpbmVQcm9jZXNzaW5nOw0KKwkJcHVibGljIHN0YXRpYyBTdHJpbmcgQ29tbWFuZExpbmVV
c2FnZTsNCisJCXB1YmxpYyBzdGF0aWMgU3RyaW5nIENvbW1hbmRMaW5lT25seU91dHB1dEVycm9y
Ow0KKwkJcHVibGljIHN0YXRpYyBTdHJpbmcgQ29tbWFuZExpbmVPbmx5T25lSmFyRXJyb3I7DQor
CQlwdWJsaWMgc3RhdGljIFN0cmluZyBDb21tYW5kTGluZUphck5vdFNwZWNpZmllZDsNCisJCXB1
YmxpYyBzdGF0aWMgU3RyaW5nIENvbW1hbmRMaW5lSW5kZXhGaWxlTm90U3BlY2lmaWVkOw0KKwkJ
cHVibGljIHN0YXRpYyBTdHJpbmcgQ2F1Z2h0RXhjZXB0aW9uOw0KKwkJcHVibGljIHN0YXRpYyBT
dHJpbmcgQ29tbWFuZExpbmVKYXJGaWxlTm90RXhpc3Q7DQorDQorCQlzdGF0aWMgew0KKwkJCU5M
Uy5pbml0aWFsaXplTWVzc2FnZXMoTUVTU0FHRVNfTkFNRSwgTWVzc2FnZXMuY2xhc3MpOw0KKwkJ
fQ0KKw0KKwkJcHVibGljIHN0YXRpYyBTdHJpbmcgYmluZChTdHJpbmcgbWVzc2FnZSkgew0KKwkJ
CXJldHVybiBiaW5kKG1lc3NhZ2UsIG51bGwpOw0KKwkJfQ0KKw0KKwkJcHVibGljIHN0YXRpYyBT
dHJpbmcgYmluZChTdHJpbmcgbWVzc2FnZSwgT2JqZWN0IGJpbmRpbmcpIHsNCisJCQlyZXR1cm4g
YmluZChtZXNzYWdlLCBuZXcgT2JqZWN0W10geyBiaW5kaW5nIH0pOw0KKwkJfQ0KKw0KKwkJcHVi
bGljIHN0YXRpYyBTdHJpbmcgYmluZChTdHJpbmcgbWVzc2FnZSwgT2JqZWN0IGJpbmRpbmcxLCBP
YmplY3QgYmluZGluZzIpIHsNCisJCQlyZXR1cm4gYmluZChtZXNzYWdlLCBuZXcgT2JqZWN0W10g
eyBiaW5kaW5nMSwgYmluZGluZzIgfSk7DQorCQl9DQorDQorCQlwdWJsaWMgc3RhdGljIFN0cmlu
ZyBiaW5kKFN0cmluZyBtZXNzYWdlLCBPYmplY3RbXSBiaW5kaW5ncykgew0KKwkJCXJldHVybiBN
ZXNzYWdlRm9ybWF0LmZvcm1hdChtZXNzYWdlLCBiaW5kaW5ncyk7DQorCQl9DQorCX0NCisNCisJ
cHJpdmF0ZSBTdHJpbmcgamFyVG9JbmRleDsNCisJcHJpdmF0ZSBTdHJpbmcgaW5kZXhGaWxlOw0K
Kwlwcml2YXRlIGJvb2xlYW4gdmVyYm9zZSA9IGZhbHNlOw0KKwlwcml2YXRlIHN0YXRpYyBmaW5h
bCBTdHJpbmcgUERFX0xBVU5DSCA9ICItcGRlbGF1bmNoIjsgLy8kTk9OLU5MUy0xJA0KKwlwcml2
YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcgQVJHX0hFTFAgPSAiLWhlbHAiOyAvLyROT04tTkxTLTEk
DQorCXByaXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZyBBUkdfVkVSQk9TRSA9ICItdmVyYm9zZSI7
IC8vJE5PTi1OTFMtMSQNCisJcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIEFSR19PVVRQVVQg
PSAiLW91dHB1dCI7IC8vJE5PTi1OTFMtMSQNCisNCisJcHJpdmF0ZSB2b2lkIGRpc3BsYXlIZWxw
KCkgew0KKwkJU3lzdGVtLm91dC5wcmludGxuKE1lc3NhZ2VzLmJpbmQoTWVzc2FnZXMuQ29tbWFu
ZExpbmVVc2FnZSkpOw0KKwl9DQorDQorCXByaXZhdGUgdm9pZCBkaXNwbGF5RXJyb3IoU3RyaW5n
IG1lc3NhZ2UpIHsNCisJCVN5c3RlbS5lcnIucHJpbnRsbihtZXNzYWdlKTsNCisJCVN5c3RlbS5v
dXQucHJpbnRsbigpOw0KKwkJZGlzcGxheUhlbHAoKTsNCisJfQ0KKw0KKwlwcml2YXRlIGJvb2xl
YW4gcHJvY2Vzc0NvbW1hbmRMaW5lKFN0cmluZ1tdIGFyZ3NBcnJheSkgew0KKwkJQXJyYXlMaXN0
IGFyZ3MgPSBuZXcgQXJyYXlMaXN0KCk7DQorCQlmb3IgKGludCBpID0gMCwgbWF4ID0gYXJnc0Fy
cmF5Lmxlbmd0aDsgaSA8IG1heDsgaSsrKSB7DQorCQkJYXJncy5hZGQoYXJnc0FycmF5W2ldKTsN
CisJCX0NCisJCWludCBpbmRleCA9IDA7DQorCQlmaW5hbCBpbnQgYXJnQ291bnQgPSBhcmdzQXJy
YXkubGVuZ3RoOw0KKw0KKwkJbG9vcDogd2hpbGUgKGluZGV4IDwgYXJnQ291bnQpIHsNCisJCQlT
dHJpbmcgY3VycmVudEFyZyA9IGFyZ3NBcnJheVtpbmRleCsrXTsNCisJCQlpZiAoUERFX0xBVU5D
SC5lcXVhbHMoY3VycmVudEFyZykpIHsNCisJCQkJY29udGludWUgbG9vcDsNCisJCQl9IGVsc2Ug
aWYgKEFSR19IRUxQLmVxdWFscyhjdXJyZW50QXJnKSkgew0KKwkJCQlkaXNwbGF5SGVscCgpOw0K
KwkJCQlyZXR1cm4gZmFsc2U7DQorCQkJfSBlbHNlIGlmIChBUkdfVkVSQk9TRS5lcXVhbHMoY3Vy
cmVudEFyZykpIHsNCisJCQkJdGhpcy52ZXJib3NlID0gdHJ1ZTsNCisJCQkJY29udGludWUgbG9v
cDsNCisJCQl9IGVsc2UgaWYgKEFSR19PVVRQVVQuZXF1YWxzKGN1cnJlbnRBcmcpKSB7DQorCQkJ
CWlmICh0aGlzLmluZGV4RmlsZSAhPSBudWxsIHx8IGluZGV4ID09IGFyZ0NvdW50KSB7DQorCQkJ
CQlkaXNwbGF5RXJyb3IoTWVzc2FnZXMuYmluZChNZXNzYWdlcy5Db21tYW5kTGluZU9ubHlPdXRw
dXRFcnJvcikpOw0KKwkJCQkJcmV0dXJuIGZhbHNlOw0KKwkJCQl9DQorCQkJCXRoaXMuaW5kZXhG
aWxlID0gYXJnc0FycmF5W2luZGV4KytdOw0KKwkJCX0gZWxzZSB7DQorCQkJCWlmICh0aGlzLmph
clRvSW5kZXggIT0gbnVsbCkgew0KKwkJCQkJZGlzcGxheUVycm9yKE1lc3NhZ2VzLmJpbmQoTWVz
c2FnZXMuQ29tbWFuZExpbmVPbmx5T25lSmFyRXJyb3IpKTsNCisJCQkJCXJldHVybiBmYWxzZTsN
CisJCQkJfQ0KKwkJCQl0aGlzLmphclRvSW5kZXggPSBjdXJyZW50QXJnOw0KKwkJCX0NCisJCX0N
CisJCXJldHVybiB0cnVlOw0KKwl9DQorDQorCXB1YmxpYyBPYmplY3Qgc3RhcnQoSUFwcGxpY2F0
aW9uQ29udGV4dCBjb250ZXh0KSB0aHJvd3MgRXhjZXB0aW9uIHsNCisJCWJvb2xlYW4gZXhlY3V0
ZSA9IHByb2Nlc3NDb21tYW5kTGluZSgoU3RyaW5nW10pIGNvbnRleHQuZ2V0QXJndW1lbnRzKCku
Z2V0KElBcHBsaWNhdGlvbkNvbnRleHQuQVBQTElDQVRJT05fQVJHUykpOw0KKwkJaWYgKGV4ZWN1
dGUpIHsNCisJCQlpZiAodGhpcy5qYXJUb0luZGV4ICE9IG51bGwgJiYgdGhpcy5pbmRleEZpbGUg
IT0gbnVsbCkgew0KKwkJCQlGaWxlIGYgPSBuZXcgRmlsZSh0aGlzLmphclRvSW5kZXgpOw0KKwkJ
CQlpZiAoIWYuZXhpc3RzKCkpIHsNCisJCQkJCVN5c3RlbS5vdXQucHJpbnRsbihNZXNzYWdlcy5i
aW5kKE1lc3NhZ2VzLkNvbW1hbmRMaW5lSmFyRmlsZU5vdEV4aXN0LCB0aGlzLmphclRvSW5kZXgp
KTsNCisJCQkJfQ0KKwkJCQlpZiAodGhpcy52ZXJib3NlKSB7DQorCQkJCQlTeXN0ZW0ub3V0LnBy
aW50bG4oTWVzc2FnZXMuYmluZChNZXNzYWdlcy5Db21tYW5kTGluZVByb2Nlc3NpbmcsIHRoaXMu
amFyVG9JbmRleCwgdGhpcy5pbmRleEZpbGUpKTsNCisJCQkJfQ0KKwkJCQl0cnkgew0KKwkJCQkJ
SmF2YUluZGV4ZXIuZ2VuZXJhdGVJbmRleEZvckphcih0aGlzLmphclRvSW5kZXgsIHRoaXMuaW5k
ZXhGaWxlKTsNCisJCQkJfSBjYXRjaCAoSU9FeGNlcHRpb24gZSkgew0KKwkJCQkJU3lzdGVtLm91
dC5wcmludGxuKE1lc3NhZ2VzLmJpbmQoTWVzc2FnZXMuQ2F1Z2h0RXhjZXB0aW9uLCAiSU9FeGNl
cHRpb24iLCBlLmdldExvY2FsaXplZE1lc3NhZ2UoKSkpOyAvLyROT04tTkxTLTEkDQorCQkJCX0N
CisJCQl9IGVsc2UgaWYgKHRoaXMuamFyVG9JbmRleCA9PSBudWxsKSB7DQorCQkJCVN5c3RlbS5v
dXQucHJpbnRsbihNZXNzYWdlcy5iaW5kKE1lc3NhZ2VzLkNvbW1hbmRMaW5lSmFyTm90U3BlY2lm
aWVkKSk7DQorCQkJfSBlbHNlIGlmICh0aGlzLmluZGV4RmlsZSA9PSBudWxsKSB7DQorCQkJCVN5
c3RlbS5vdXQucHJpbnRsbihNZXNzYWdlcy5iaW5kKE1lc3NhZ2VzLkNvbW1hbmRMaW5lSW5kZXhG
aWxlTm90U3BlY2lmaWVkKSk7DQorCQkJfQ0KKwkJfQ0KKwkJcmV0dXJuIElBcHBsaWNhdGlvbi5F
WElUX09LOw0KKwl9DQorDQorCXB1YmxpYyB2b2lkIHN0b3AoKSB7DQorCQkvLyBkbyBub3RoaW5n
DQorCX0NCisNCit9DQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL2luZGV4L21lc3NhZ2VzLnByb3BlcnRpZXMgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2NvcmUvaW5kZXgvbWVzc2FnZXMucHJv
cGVydGllcwpuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwLi43MDRiMjlmCi0tLSAv
ZGV2L251bGwKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pk
dC9jb3JlL2luZGV4L21lc3NhZ2VzLnByb3BlcnRpZXMKQEAgLTAsMCArMSwyOCBAQAorIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIworIyBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMDYgSUJNIENvcnBvcmF0
aW9uIGFuZCBvdGhlcnMuCisjIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQg
dGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKKyMgYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRo
ZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCisjIHdoaWNoIGFjY29t
cGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CisjIGh0dHA6Ly93
d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCisjCisjIENvbnRyaWJ1dG9yczoKKyMg
ICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgorIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIworQ29tbWFuZExpbmVVc2FnZT1Vc2FnZTogZWNsaXBzZSAtYXBw
bGljYXRpb24gb3JnLmVjbGlwc2UuamR0LmNvcmUuSmF2YUNvZGVHZW5lcmF0ZUluZGV4IFsgT1BU
SU9OUyBdIC1vdXRwdXQgPGluZGV4RmlsZT4gPGphcmZpbGU+XG5cCitcblwKK1wgICAtb3V0cHV0
IDxpbmRleEZpbGU+IFRoZSBpbmRleCBmaWxlIHRvIGJlIGdlbmVyYXRlZC5cblwKK1wKK1wgICA8
amFyZmlsZT4gICBKYXIgZmlsZSBmb3Igd2hpY2ggaW5kZXggbmVlZHMgdG8gYmUgZ2VuZXJhdGVk
LlxuXAorXAorXG5cCitcIE9QVElPTlM6XG5cCitcblwKK1wgICAtaGVscCAgICAgICAgICAgICAg
ICBEaXNwbGF5IHRoaXMgbWVzc2FnZS5cblwKK1wgICAtdmVyYm9zZSAgICAgICAgICAgICBCZSB2
ZXJib3NlIGFib3V0IHRoZSBqb2IuCitDb21tYW5kTGluZVByb2Nlc3Npbmc9R2VuZXJhdGluZyBp
bmRleCB7MX0gZm9yIHRoZSBqYXIgezB9LgorQ29tbWFuZExpbmVPbmx5T3V0cHV0RXJyb3I9T25s
eSBvbmUgb3V0cHV0IG5lZWQgdG8gYmUgc3BlY2lmaWVkLgorQ29tbWFuZExpbmVPbmx5T25lSmFy
RXJyb3I9T25seSBvbmUgamFyIGZpbGUgbmVlZCB0byBiZSBzcGVjaWZpZWQuCitDb21tYW5kTGlu
ZUphck5vdFNwZWNpZmllZD1ObyBqYXIgZmlsZSBpcyBzcGVjaWZpZWQuCitDb21tYW5kTGluZUlu
ZGV4RmlsZU5vdFNwZWNpZmllZD1ObyBpbmRleCBmaWxlIGlzIHNwZWNpZmllZC4KK0NhdWdodEV4
Y2VwdGlvbj1FeGNlcHRpb24gezB9IC0gezF9LgorQ29tbWFuZExpbmVKYXJGaWxlTm90RXhpc3Q9
ezB9IGRvZXMgbm90IGV4aXN0LgpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2Vh
cmNoL29yZy9lY2xpcHNlL2pkdC9jb3JlL3NlYXJjaC9TZWFyY2hQYXJ0aWNpcGFudC5qYXZhIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9jb3JlL3NlYXJjaC9T
ZWFyY2hQYXJ0aWNpcGFudC5qYXZhCmluZGV4IDRlM2Y2YzQuLjc2MTYzM2UgMTAwNjQ0Ci0tLSBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvY29yZS9zZWFyY2gv
U2VhcmNoUGFydGljaXBhbnQuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gv
b3JnL2VjbGlwc2UvamR0L2NvcmUvc2VhcmNoL1NlYXJjaFBhcnRpY2lwYW50LmphdmEKQEAgLTE0
LDYgKzE0LDggQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5jb3JlLnJ1bnRpbWUuKjsKIGltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS5KYXZhTW9kZWw7CiBpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvcmUuSmF2YU1vZGVsTWFuYWdlcjsKK2ltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29yZS5pbmRleC5GbGF0RmlsZUluZGV4OworaW1wb3J0IG9yZy5lY2xp
cHNlLmpkdC5pbnRlcm5hbC5jb3JlLmluZGV4LkluZGV4TG9jYXRpb247CiBpbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmludGVybmFsLmNvcmUuc2VhcmNoLmluZGV4aW5nLkluZGV4TWFuYWdlcjsKIAog
LyoqCkBAIC0xOTIsOSArMTk0LDkgQEAKIAkgKiA8L3A+CiAJICoKIAkgKiBAcGFyYW0gZG9jdW1l
bnQgdGhlIGRvY3VtZW50IHRvIGluZGV4Ci0JICogQHBhcmFtIGluZGV4TG9jYXRpb24gdGhlIGxv
Y2F0aW9uIG9uIHRoZSBmaWxlIHN5c3RlbSBvZiB0aGUgaW5kZXgKKwkgKiBAcGFyYW0gaW5kZXhQ
YXRoIHRoZSBsb2NhdGlvbiBvbiB0aGUgZmlsZSBzeXN0ZW0gb2YgdGhlIGluZGV4CiAJICovCi0J
cHVibGljIGZpbmFsIHZvaWQgc2NoZWR1bGVEb2N1bWVudEluZGV4aW5nKFNlYXJjaERvY3VtZW50
IGRvY3VtZW50LCBJUGF0aCBpbmRleExvY2F0aW9uKSB7CisJcHVibGljIGZpbmFsIHZvaWQgc2No
ZWR1bGVEb2N1bWVudEluZGV4aW5nKFNlYXJjaERvY3VtZW50IGRvY3VtZW50LCBJUGF0aCBpbmRl
eFBhdGgpIHsKIAkJSVBhdGggZG9jdW1lbnRQYXRoID0gbmV3IFBhdGgoZG9jdW1lbnQuZ2V0UGF0
aCgpKTsKIAkJT2JqZWN0IGZpbGUgPSBKYXZhTW9kZWwuZ2V0VGFyZ2V0KGRvY3VtZW50UGF0aCwg
dHJ1ZSk7CiAJCUlQYXRoIGNvbnRhaW5lclBhdGggPSBkb2N1bWVudFBhdGg7CkBAIC0yMDUsMTEg
KzIwNywxMyBAQAogCQl9CiAJCUluZGV4TWFuYWdlciBtYW5hZ2VyID0gSmF2YU1vZGVsTWFuYWdl
ci5nZXRJbmRleE1hbmFnZXIoKTsKIAkJLy8gVE9ETyAoZnJlZGVyaWMpIHNob3VsZCBub3QgaGF2
ZSB0byBjcmVhdGUgaW5kZXggbWFudWFsbHksIHNob3VsZCBleHBvc2UgQVBJIHRoYXQgcmVjcmVh
dGVzIGluZGV4IGluc3RlYWQKKwkJSW5kZXhMb2NhdGlvbiBpbmRleExvY2F0aW9uOworCQlpbmRl
eExvY2F0aW9uID0gbmV3IEZsYXRGaWxlSW5kZXgoaW5kZXhQYXRoLnRvRmlsZSgpKTsKIAkJbWFu
YWdlci5lbnN1cmVJbmRleEV4aXN0cyhpbmRleExvY2F0aW9uLCBjb250YWluZXJQYXRoKTsKIAkJ
bWFuYWdlci5zY2hlZHVsZURvY3VtZW50SW5kZXhpbmcoZG9jdW1lbnQsIGNvbnRhaW5lclBhdGgs
IGluZGV4TG9jYXRpb24sIHRoaXMpOwotCQlpZiAoIWluZGV4TG9jYXRpb24uZXF1YWxzKHRoaXMu
bGFzdEluZGV4TG9jYXRpb24pKSB7Ci0JCQltYW5hZ2VyLnVwZGF0ZVBhcnRpY2lwYW50KGluZGV4
TG9jYXRpb24sIGNvbnRhaW5lclBhdGgpOwotCQkJdGhpcy5sYXN0SW5kZXhMb2NhdGlvbiA9IGlu
ZGV4TG9jYXRpb247CisJCWlmICghaW5kZXhQYXRoLmVxdWFscyh0aGlzLmxhc3RJbmRleExvY2F0
aW9uKSkgeworCQkJbWFuYWdlci51cGRhdGVQYXJ0aWNpcGFudChpbmRleFBhdGgsIGNvbnRhaW5l
clBhdGgpOworCQkJdGhpcy5sYXN0SW5kZXhMb2NhdGlvbiA9IGluZGV4UGF0aDsKIAkJfQogCX0K
IApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb3JlL2luZGV4L0Rpc2tJbmRleC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL2luZGV4L0Rpc2tJbmRleC5q
YXZhCmluZGV4IDc2NDQwMzYuLmUzOTNjMTcgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9pbmRleC9EaXNrSW5kZXgu
amF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvcmUvaW5kZXgvRGlza0luZGV4LmphdmEKQEAgLTIzLDcgKzIzLDcgQEAKIAogcHVi
bGljIGNsYXNzIERpc2tJbmRleCB7CiAKLUZpbGUgaW5kZXhGaWxlOworSW5kZXhMb2NhdGlvbiBp
bmRleEZpbGU7CiAKIHByaXZhdGUgaW50IGhlYWRlckluZm9PZmZzZXQ7CiBwcml2YXRlIGludCBu
dW1iZXJPZkNodW5rczsKQEAgLTgyLDEyICs4Miw3IEBACiB9CiAKIAotRGlza0luZGV4KFN0cmlu
ZyBmaWxlTmFtZSkgewotCWlmIChmaWxlTmFtZSA9PSBudWxsKQotCQl0aHJvdyBuZXcgamF2YS5s
YW5nLklsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbigpOwotCXRoaXMuaW5kZXhGaWxlID0gbmV3IEZp
bGUoZmlsZU5hbWUpOwotCi0JLy8gY2xlYXIgY2FjaGVkIGl0ZW1zCitEaXNrSW5kZXgoKSB7CiAJ
dGhpcy5oZWFkZXJJbmZvT2Zmc2V0ID0gLTE7CiAJdGhpcy5udW1iZXJPZkNodW5rcyA9IC0xOwog
CXRoaXMuc2l6ZU9mTGFzdENodW5rID0gLTE7CkBAIC05OSw2ICs5NCwxMyBAQAogCXRoaXMuY2Fj
aGVkQ2F0ZWdvcnlOYW1lID0gbnVsbDsKIAl0aGlzLmNhdGVnb3J5T2Zmc2V0cyA9IG51bGw7CiAJ
dGhpcy5jYXRlZ29yeUVuZHMgPSBudWxsOworfQorRGlza0luZGV4KEluZGV4TG9jYXRpb24gbG9j
YXRpb24pIHRocm93cyBJT0V4Y2VwdGlvbiB7CisJdGhpcygpOworCWlmIChsb2NhdGlvbiA9PSBu
dWxsKSB7CisJCXRocm93IG5ldyBJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24oKTsKKwl9CisJdGhp
cy5pbmRleEZpbGUgPSBsb2NhdGlvbjsKIH0KIFNpbXBsZVNldCBhZGREb2N1bWVudE5hbWVzKFN0
cmluZyBzdWJzdHJpbmcsIE1lbW9yeUluZGV4IG1lbW9yeUluZGV4KSB0aHJvd3MgSU9FeGNlcHRp
b24gewogCS8vIG11c3Qgc2tpcCBvdmVyIGRvY3VtZW50cyB3aGljaCBoYXZlIGJlZW4gYWRkZWQv
Y2hhbmdlZC9kZWxldGVkIGluIHRoZSBtZW1vcnkgaW5kZXgKQEAgLTIzMCw3ICsyMzIsNyBAQAog
cHJpdmF0ZSB2b2lkIGNhY2hlRG9jdW1lbnROYW1lcygpIHRocm93cyBJT0V4Y2VwdGlvbiB7CiAJ
Ly8gd2lsbCBuZWVkIGFsbCBkb2N1bWVudCBuYW1lcyBzbyBnZXQgdGhlbSBub3cKIAl0aGlzLmNh
Y2hlZENodW5rcyA9IG5ldyBTdHJpbmdbdGhpcy5udW1iZXJPZkNodW5rc11bXTsKLQlGaWxlSW5w
dXRTdHJlYW0gc3RyZWFtID0gbmV3IEZpbGVJbnB1dFN0cmVhbSh0aGlzLmluZGV4RmlsZSk7CisJ
SW5wdXRTdHJlYW0gc3RyZWFtID0gdGhpcy5pbmRleEZpbGUuZ2V0SW5wdXRTdHJlYW0oKTsKIAl0
cnkgewogCQlpZiAodGhpcy5udW1iZXJPZkNodW5rcyA+IDUpIEJVRkZFUl9SRUFEX1NJWkUgPDw9
IDE7CiAJCWludCBvZmZzZXQgPSB0aGlzLmNodW5rT2Zmc2V0c1swXTsKQEAgLTM3Miw3ICszNzQs
NyBAQAogdm9pZCBpbml0aWFsaXplKGJvb2xlYW4gcmV1c2VFeGlzdGluZ0ZpbGUpIHRocm93cyBJ
T0V4Y2VwdGlvbiB7CiAJaWYgKHRoaXMuaW5kZXhGaWxlLmV4aXN0cygpKSB7CiAJCWlmIChyZXVz
ZUV4aXN0aW5nRmlsZSkgewotCQkJRmlsZUlucHV0U3RyZWFtIHN0cmVhbSA9IG5ldyBGaWxlSW5w
dXRTdHJlYW0odGhpcy5pbmRleEZpbGUpOworCQkJSW5wdXRTdHJlYW0gc3RyZWFtID0gdGhpcy5p
bmRleEZpbGUuZ2V0SW5wdXRTdHJlYW0oKTsKIAkJCXRoaXMuc3RyZWFtQnVmZmVyID0gbmV3IGJ5
dGVbQlVGRkVSX1JFQURfU0laRV07CiAJCQl0aGlzLmJ1ZmZlckluZGV4ID0gMDsKIAkJCXRoaXMu
YnVmZmVyRW5kID0gc3RyZWFtLnJlYWQodGhpcy5zdHJlYW1CdWZmZXIsIDAsIDEyOCk7CkBAIC00
MDAsNyArNDAyLDcgQEAKIAkJfQogCX0KIAlpZiAodGhpcy5pbmRleEZpbGUuY3JlYXRlTmV3Rmls
ZSgpKSB7Ci0JCUZpbGVPdXRwdXRTdHJlYW0gc3RyZWFtID0gbmV3IEZpbGVPdXRwdXRTdHJlYW0o
dGhpcy5pbmRleEZpbGUsIGZhbHNlKTsKKwkJRmlsZU91dHB1dFN0cmVhbSBzdHJlYW0gPSBuZXcg
RmlsZU91dHB1dFN0cmVhbSh0aGlzLmluZGV4RmlsZS5nZXRJbmRleEZpbGUoKSwgZmFsc2UpOwog
CQl0cnkgewogCQkJdGhpcy5zdHJlYW1CdWZmZXIgPSBuZXcgYnl0ZVtCVUZGRVJfUkVBRF9TSVpF
XTsKIAkJCXRoaXMuYnVmZmVySW5kZXggPSAwOwpAQCAtNTAwLDYgKzUwMiw5IEBACiBEaXNrSW5k
ZXggbWVyZ2VXaXRoKE1lbW9yeUluZGV4IG1lbW9yeUluZGV4KSB0aHJvd3MgSU9FeGNlcHRpb24g
ewogIAkvLyBhc3N1bWUgd3JpdGUgbG9jayBpcyBoZWxkCiAJLy8gY29tcHV0ZSAmIHdyaXRlIG91
dCBuZXcgZG9jTmFtZXMKKwlpZiAodGhpcy5pbmRleEZpbGUgPT0gbnVsbCkgeworCQl0aHJvdyBu
ZXcgSU9FeGNlcHRpb24oIlByZS1idWlsdCBpbmRleCBmaWxlIG5vdCB3cml0ZWFibGUiKTsgIC8v
JE5PTi1OTFMtMSQKKwl9CiAJU3RyaW5nW10gZG9jTmFtZXMgPSByZWFkQWxsRG9jdW1lbnROYW1l
cygpOwogCWludCBwcmV2aW91c0xlbmd0aCA9IGRvY05hbWVzLmxlbmd0aDsKIAlpbnRbXSBwb3Np
dGlvbnMgPSBuZXcgaW50W3ByZXZpb3VzTGVuZ3RoXTsgLy8ga2VlcHMgdHJhY2sgb2YgdGhlIHBv
c2l0aW9uIG9mIGVhY2ggZG9jdW1lbnQgaW4gdGhlIG5ldyBzb3J0ZWQgZG9jTmFtZXMKQEAgLTUw
OSwxNSArNTE0LDE2IEBACiAJCWlmIChwcmV2aW91c0xlbmd0aCA9PSAwKSByZXR1cm4gdGhpczsg
Ly8gbm90aGluZyB0byBkby4uLiBtZW1vcnkgaW5kZXggY29udGFpbmVkIGRlbGV0ZWQgZG9jdW1l
bnRzIHRoYXQgaGFkIG5ldmVyIGJlZW4gc2F2ZWQKIAogCQkvLyBpbmRleCBpcyBub3cgZW1wdHkg
c2luY2UgYWxsIHRoZSBzYXZlZCBkb2N1bWVudHMgd2VyZSByZW1vdmVkCi0JCURpc2tJbmRleCBu
ZXdEaXNrSW5kZXggPSBuZXcgRGlza0luZGV4KHRoaXMuaW5kZXhGaWxlLmdldFBhdGgoKSk7CisJ
CURpc2tJbmRleCBuZXdEaXNrSW5kZXggPSBuZXcgRGlza0luZGV4KHRoaXMuaW5kZXhGaWxlKTsK
IAkJbmV3RGlza0luZGV4LmluaXRpYWxpemUoZmFsc2UpOwogCQlyZXR1cm4gbmV3RGlza0luZGV4
OwogCX0KLQotCURpc2tJbmRleCBuZXdEaXNrSW5kZXggPSBuZXcgRGlza0luZGV4KHRoaXMuaW5k
ZXhGaWxlLmdldFBhdGgoKSArICIudG1wIik7IC8vJE5PTi1OTFMtMSQKKwlGaWxlIG9sZEluZGV4
RmlsZSA9IHRoaXMuaW5kZXhGaWxlLmdldEluZGV4RmlsZSgpOworCURpc2tJbmRleCBuZXdEaXNr
SW5kZXggPSBuZXcgRGlza0luZGV4KG5ldyBGbGF0RmlsZUluZGV4KG5ldyBGaWxlKG9sZEluZGV4
RmlsZS5nZXRQYXRoKCkgKyAiLnRtcCIpKSk7IC8vJE5PTi1OTFMtMSQKKwlGaWxlIG5ld0luZGV4
RmlsZSA9IG5ld0Rpc2tJbmRleC5pbmRleEZpbGUuZ2V0SW5kZXhGaWxlKCk7CiAJdHJ5IHsKLQkJ
bmV3RGlza0luZGV4LmluaXRpYWxpemVGcm9tKHRoaXMsIG5ld0Rpc2tJbmRleC5pbmRleEZpbGUp
OwotCQlGaWxlT3V0cHV0U3RyZWFtIHN0cmVhbSA9IG5ldyBGaWxlT3V0cHV0U3RyZWFtKG5ld0Rp
c2tJbmRleC5pbmRleEZpbGUsIGZhbHNlKTsKKwkJbmV3RGlza0luZGV4LmluaXRpYWxpemVGcm9t
KHRoaXMsIG5ld0luZGV4RmlsZSk7CisJCUZpbGVPdXRwdXRTdHJlYW0gc3RyZWFtID0gbmV3IEZp
bGVPdXRwdXRTdHJlYW0obmV3SW5kZXhGaWxlLCBmYWxzZSk7CiAJCWludCBvZmZzZXRUb0hlYWRl
ciA9IC0xOwogCQl0cnkgewogCQkJbmV3RGlza0luZGV4LndyaXRlQWxsRG9jdW1lbnROYW1lcyhk
b2NOYW1lcywgc3RyZWFtKTsKQEAgLTU0OSwxOCArNTU1LDE4IEBACiAJCW5ld0Rpc2tJbmRleC53
cml0ZU9mZnNldFRvSGVhZGVyKG9mZnNldFRvSGVhZGVyKTsKIAogCQkvLyByZW5hbWUgZmlsZSBi
eSBkZWxldGluZyBwcmV2aW91cyBpbmRleCBmaWxlICYgcmVuYW1pbmcgdGVtcCBvbmUKLQkJaWYg
KHRoaXMuaW5kZXhGaWxlLmV4aXN0cygpICYmICF0aGlzLmluZGV4RmlsZS5kZWxldGUoKSkgewor
CQlpZiAob2xkSW5kZXhGaWxlLmV4aXN0cygpICYmICFvbGRJbmRleEZpbGUuZGVsZXRlKCkpIHsK
IAkJCWlmIChERUJVRykKIAkJCQlTeXN0ZW0ub3V0LnByaW50bG4oIm1lcmdlV2l0aCAtIEZhaWxl
ZCB0byBkZWxldGUgIiArIHRoaXMuaW5kZXhGaWxlKTsgLy8kTk9OLU5MUy0xJAogCQkJdGhyb3cg
bmV3IElPRXhjZXB0aW9uKCJGYWlsZWQgdG8gZGVsZXRlIGluZGV4IGZpbGUgIiArIHRoaXMuaW5k
ZXhGaWxlKTsgLy8kTk9OLU5MUy0xJAogCQl9Ci0JCWlmICghbmV3RGlza0luZGV4LmluZGV4Rmls
ZS5yZW5hbWVUbyh0aGlzLmluZGV4RmlsZSkpIHsKKwkJaWYgKCFuZXdJbmRleEZpbGUucmVuYW1l
VG8ob2xkSW5kZXhGaWxlKSkgewogCQkJaWYgKERFQlVHKQogCQkJCVN5c3RlbS5vdXQucHJpbnRs
bigibWVyZ2VXaXRoIC0gRmFpbGVkIHRvIHJlbmFtZSAiICsgdGhpcy5pbmRleEZpbGUpOyAvLyRO
T04tTkxTLTEkCiAJCQl0aHJvdyBuZXcgSU9FeGNlcHRpb24oIkZhaWxlZCB0byByZW5hbWUgaW5k
ZXggZmlsZSAiICsgdGhpcy5pbmRleEZpbGUpOyAvLyROT04tTkxTLTEkCiAJCX0KIAl9IGNhdGNo
IChJT0V4Y2VwdGlvbiBlKSB7Ci0JCWlmIChuZXdEaXNrSW5kZXguaW5kZXhGaWxlLmV4aXN0cygp
ICYmICFuZXdEaXNrSW5kZXguaW5kZXhGaWxlLmRlbGV0ZSgpKQorCQlpZiAobmV3SW5kZXhGaWxl
LmV4aXN0cygpICYmICFuZXdJbmRleEZpbGUuZGVsZXRlKCkpCiAJCQlpZiAoREVCVUcpCiAJCQkJ
U3lzdGVtLm91dC5wcmludGxuKCJtZXJnZVdpdGggLSBGYWlsZWQgdG8gZGVsZXRlIHRlbXAgaW5k
ZXggIiArIG5ld0Rpc2tJbmRleC5pbmRleEZpbGUpOyAvLyROT04tTkxTLTEkCiAJCXRocm93IGU7
CkBAIC01NzMsNyArNTc5LDcgQEAKIAlpZiAodGhpcy5udW1iZXJPZkNodW5rcyA8PSAwKQogCQly
ZXR1cm4gQ2hhck9wZXJhdGlvbi5OT19TVFJJTkdTOwogCi0JRmlsZUlucHV0U3RyZWFtIHN0cmVh
bSA9IG5ldyBGaWxlSW5wdXRTdHJlYW0odGhpcy5pbmRleEZpbGUpOworCUlucHV0U3RyZWFtIHN0
cmVhbSA9IHRoaXMuaW5kZXhGaWxlLmdldElucHV0U3RyZWFtKCk7CiAJdHJ5IHsKIAkJaW50IG9m
ZnNldCA9IHRoaXMuY2h1bmtPZmZzZXRzWzBdOwogCQlzdHJlYW0uc2tpcChvZmZzZXQpOwpAQCAt
NjEyLDcgKzYxOCw3IEBACiAJCX0KIAl9CiAKLQlGaWxlSW5wdXRTdHJlYW0gc3RyZWFtID0gbmV3
IEZpbGVJbnB1dFN0cmVhbSh0aGlzLmluZGV4RmlsZSk7CisJSW5wdXRTdHJlYW0gc3RyZWFtID0g
dGhpcy5pbmRleEZpbGUuZ2V0SW5wdXRTdHJlYW0oKTsKIAlIYXNodGFibGVPZk9iamVjdCBjYXRl
Z29yeVRhYmxlID0gbnVsbDsKIAljaGFyW11bXSBtYXRjaGluZ1dvcmRzID0gbnVsbDsKIAlpbnQg
Y291bnQgPSAwOwpAQCAtNjc4LDcgKzY4NCw3IEBACiAJfQogCiAJaWYgKG1hdGNoaW5nV29yZHMg
IT0gbnVsbCAmJiBjb3VudCA+IDApIHsKLQkJc3RyZWFtID0gbmV3IEZpbGVJbnB1dFN0cmVhbSh0
aGlzLmluZGV4RmlsZSk7CisJCXN0cmVhbSA9IHRoaXMuaW5kZXhGaWxlLmdldElucHV0U3RyZWFt
KCk7CiAJCXRyeSB7CiAJCQlzdHJlYW0uc2tpcChmaXJzdE9mZnNldCk7CiAJCQl0aGlzLmJ1ZmZl
ckluZGV4ID0gMDsKQEAgLTY5Niw3ICs3MDIsNyBAQAogCXRoaXMuc3RyZWFtQnVmZmVyID0gbnVs
bDsKIAlyZXR1cm4gY2F0ZWdvcnlUYWJsZTsKIH0KLXByaXZhdGUgdm9pZCByZWFkQ2h1bmsoU3Ry
aW5nW10gZG9jTmFtZXMsIEZpbGVJbnB1dFN0cmVhbSBzdHJlYW0sIGludCBpbmRleCwgaW50IHNp
emUpIHRocm93cyBJT0V4Y2VwdGlvbiB7Citwcml2YXRlIHZvaWQgcmVhZENodW5rKFN0cmluZ1td
IGRvY05hbWVzLCBJbnB1dFN0cmVhbSBzdHJlYW0sIGludCBpbmRleCwgaW50IHNpemUpIHRocm93
cyBJT0V4Y2VwdGlvbiB7CiAJU3RyaW5nIGN1cnJlbnQgPSBuZXcgU3RyaW5nKHJlYWRTdHJlYW1D
aGFycyhzdHJlYW0pKTsKIAlkb2NOYW1lc1tpbmRleCsrXSA9IGN1cnJlbnQ7CiAJZm9yIChpbnQg
aSA9IDE7IGkgPCBzaXplOyBpKyspIHsKQEAgLTczNCw3ICs3NDAsNyBAQAogCQkJdGhyb3cgbmV3
IElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbigpOwogCQl0aGlzLnN0cmVhbUJ1ZmZlciA9IG5ldyBi
eXRlW251bWJlck9mQnl0ZXNdOwogCQl0aGlzLmJ1ZmZlckluZGV4ID0gMDsKLQkJRmlsZUlucHV0
U3RyZWFtIGZpbGUgPSBuZXcgRmlsZUlucHV0U3RyZWFtKHRoaXMuaW5kZXhGaWxlKTsKKwkJSW5w
dXRTdHJlYW0gZmlsZSA9IHRoaXMuaW5kZXhGaWxlLmdldElucHV0U3RyZWFtKCk7CiAJCXRyeSB7
CiAJCQlmaWxlLnNraXAoc3RhcnQpOwogCQkJaWYgKGZpbGUucmVhZCh0aGlzLnN0cmVhbUJ1ZmZl
ciwgMCwgbnVtYmVyT2ZCeXRlcykgIT0gbnVtYmVyT2ZCeXRlcykKQEAgLTc2Myw3ICs3NjksNyBA
QAogCWlmIChhcnJheU9mZnNldCBpbnN0YW5jZW9mIGludFtdKQogCQlyZXR1cm4gKGludFtdKSBh
cnJheU9mZnNldDsKIAotCUZpbGVJbnB1dFN0cmVhbSBzdHJlYW0gPSBuZXcgRmlsZUlucHV0U3Ry
ZWFtKHRoaXMuaW5kZXhGaWxlKTsKKwlJbnB1dFN0cmVhbSBzdHJlYW0gPSB0aGlzLmluZGV4Rmls
ZS5nZXRJbnB1dFN0cmVhbSgpOwogCXRyeSB7CiAJCWludCBvZmZzZXQgPSAoKEludGVnZXIpIGFy
cmF5T2Zmc2V0KS5pbnRWYWx1ZSgpOwogCQlzdHJlYW0uc2tpcChvZmZzZXQpOwpAQCAtNzc2LDE1
ICs3ODIsMTUgQEAKIAkJdGhpcy5zdHJlYW1CdWZmZXIgPSBudWxsOwogCX0KIH0KLXByaXZhdGUg
dm9pZCByZWFkSGVhZGVySW5mbyhGaWxlSW5wdXRTdHJlYW0gc3RyZWFtKSB0aHJvd3MgSU9FeGNl
cHRpb24geworcHJpdmF0ZSB2b2lkIHJlYWRIZWFkZXJJbmZvKElucHV0U3RyZWFtIHN0cmVhbSkg
dGhyb3dzIElPRXhjZXB0aW9uIHsKIAogCS8vIG11c3QgYmUgc2FtZSBvcmRlciBhcyB3cml0ZUhl
YWRlckluZm8oKQogCXRoaXMubnVtYmVyT2ZDaHVua3MgPSByZWFkU3RyZWFtSW50KHN0cmVhbSk7
CiAJdGhpcy5zaXplT2ZMYXN0Q2h1bmsgPSB0aGlzLnN0cmVhbUJ1ZmZlclt0aGlzLmJ1ZmZlcklu
ZGV4KytdICYgMHhGRjsKIAl0aGlzLmRvY3VtZW50UmVmZXJlbmNlU2l6ZSA9IHRoaXMuc3RyZWFt
QnVmZmVyW3RoaXMuYnVmZmVySW5kZXgrK10gJiAweEZGOwogCXRoaXMuc2VwYXJhdG9yID0gKGNo
YXIpICh0aGlzLnN0cmVhbUJ1ZmZlclt0aGlzLmJ1ZmZlckluZGV4KytdICYgMHhGRik7Ci0JbG9u
ZyBmaWxlTGVuZ3RoID0gdGhpcy5pbmRleEZpbGUubGVuZ3RoKCk7Ci0JaWYgKHRoaXMubnVtYmVy
T2ZDaHVua3MgPiBmaWxlTGVuZ3RoICkgeworCWxvbmcgbGVuZ3RoID0gdGhpcy5pbmRleEZpbGUu
bGVuZ3RoKCk7CisJaWYgKGxlbmd0aCAhPSAtMSAmJiB0aGlzLm51bWJlck9mQ2h1bmtzID4gbGVu
Z3RoKSB7CiAJCS8vIG5vdCBhbiBhY2N1cmF0ZSBjaGVjaywgYnV0IGdvb2QgZW5vdWdoIGh0dHBz
Oi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNTA2MTIKIAkJaWYgKERF
QlVHKQogCQkJU3lzdGVtLm91dC5wcmludGxuKCJJbmRleCBmaWxlIGlzIGNvcnJ1cHRlZCAiICsg
dGhpcy5pbmRleEZpbGUpOyAvLyROT04tTkxTLTEkCkBAIC03OTksNyArODA1LDcgQEAKIAlpbnQg
c2l6ZSA9IHJlYWRTdHJlYW1JbnQoc3RyZWFtKTsKIAl0aGlzLmNhdGVnb3J5T2Zmc2V0cyA9IG5l
dyBIYXNodGFibGVPZkludFZhbHVlcyhzaXplKTsKIAl0aGlzLmNhdGVnb3J5RW5kcyA9IG5ldyBI
YXNodGFibGVPZkludFZhbHVlcyhzaXplKTsKLQlpZiAoc2l6ZSA+IGZpbGVMZW5ndGgpIHsKKwlp
ZiAobGVuZ3RoICE9IC0xICYmIHRoaXMubnVtYmVyT2ZDaHVua3MgPiBsZW5ndGgpIHsKIAkJLy8g
IG5vdCBhbiBhY2N1cmF0ZSBjaGVjaywgYnV0IGdvb2QgZW5vdWdoICBodHRwczovL2J1Z3MuZWNs
aXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzUwNjEyCiAJCWlmIChERUJVRykKIAkJCVN5
c3RlbS5vdXQucHJpbnRsbigiSW5kZXggZmlsZSBpcyBjb3JydXB0ZWQgIiArIHRoaXMuaW5kZXhG
aWxlKTsgLy8kTk9OLU5MUy0xJApAQCAtODQwLDcgKzg0Niw3IEBACiAJCX0KIAl9CiB9Ci1wcml2
YXRlIHZvaWQgcmVhZFN0cmVhbUJ1ZmZlcihGaWxlSW5wdXRTdHJlYW0gc3RyZWFtKSB0aHJvd3Mg
SU9FeGNlcHRpb24geworcHJpdmF0ZSB2b2lkIHJlYWRTdHJlYW1CdWZmZXIoSW5wdXRTdHJlYW0g
c3RyZWFtKSB0aHJvd3MgSU9FeGNlcHRpb24gewogCS8vIGlmIHdlJ3JlIGFib3V0IHRvIHJlYWQg
YSBrbm93biBhbW91bnQgYXQgdGhlIGVuZCBvZiB0aGUgZXhpc3RpbmcgYnVmZmVyLCBidXQgaXQg
ZG9lcyBub3QgY29tcGxldGVseSBmaXQKIAkvLyBzbyB3ZSBuZWVkIHRvIHNoaWZ0IHRoZSByZW1h
aW5pbmcgYnl0ZXMgdG8gYmUgcmVhZCwgYW5kIGZpbGwgdGhlIGJ1ZmZlciBmcm9tIHRoZSBzdHJl
YW0KIAlpZiAodGhpcy5idWZmZXJFbmQgPCB0aGlzLnN0cmVhbUJ1ZmZlci5sZW5ndGgpCkBAIC04
NzIsNyArODc4LDcgQEAKICAqIEBleGNlcHRpb24gIFVURkRhdGFGb3JtYXRFeGNlcHRpb24gIGlm
IHRoZSBieXRlcyBkbyBub3QgcmVwcmVzZW50IGEKICAqICAgICAgICAgICAgICAgdmFsaWQgVVRG
LTggZW5jb2Rpbmcgb2YgYSBVbmljb2RlIHN0cmluZy4KICAqLwotcHJpdmF0ZSBjaGFyW10gcmVh
ZFN0cmVhbUNoYXJzKEZpbGVJbnB1dFN0cmVhbSBzdHJlYW0pIHRocm93cyBJT0V4Y2VwdGlvbiB7
Citwcml2YXRlIGNoYXJbXSByZWFkU3RyZWFtQ2hhcnMoSW5wdXRTdHJlYW0gc3RyZWFtKSB0aHJv
d3MgSU9FeGNlcHRpb24gewogCS8vIHJlYWQgY2hhcnMgYXJyYXkgbGVuZ3RoCiAJaWYgKHN0cmVh
bSAhPSBudWxsICYmIHRoaXMuYnVmZmVySW5kZXggKyAyID49IHRoaXMuYnVmZmVyRW5kKQogCQly
ZWFkU3RyZWFtQnVmZmVyKHN0cmVhbSk7CkBAIC05MzEsNyArOTM3LDcgQEAKIAl9CiAJcmV0dXJu
IHdvcmQ7CiB9Ci1wcml2YXRlIGludFtdIHJlYWRTdHJlYW1Eb2N1bWVudEFycmF5KEZpbGVJbnB1
dFN0cmVhbSBzdHJlYW0sIGludCBhcnJheVNpemUpIHRocm93cyBJT0V4Y2VwdGlvbiB7Citwcml2
YXRlIGludFtdIHJlYWRTdHJlYW1Eb2N1bWVudEFycmF5KElucHV0U3RyZWFtIHN0cmVhbSwgaW50
IGFycmF5U2l6ZSkgdGhyb3dzIElPRXhjZXB0aW9uIHsKIAlpbnRbXSBpbmRleGVzID0gbmV3IGlu
dFthcnJheVNpemVdOwogCWlmIChhcnJheVNpemUgPT0gMCkgcmV0dXJuIGluZGV4ZXM7CiAKQEAg
LTk3Miw3ICs5NzgsNyBAQAogCX0KIAlyZXR1cm4gaW5kZXhlczsKIH0KLXByaXZhdGUgaW50IHJl
YWRTdHJlYW1JbnQoRmlsZUlucHV0U3RyZWFtIHN0cmVhbSkgdGhyb3dzIElPRXhjZXB0aW9uIHsK
K3ByaXZhdGUgaW50IHJlYWRTdHJlYW1JbnQoSW5wdXRTdHJlYW0gc3RyZWFtKSB0aHJvd3MgSU9F
eGNlcHRpb24gewogCWlmICh0aGlzLmJ1ZmZlckluZGV4ICsgNCA+PSB0aGlzLmJ1ZmZlckVuZCkg
ewogCQlyZWFkU3RyZWFtQnVmZmVyKHN0cmVhbSk7CiAJfQpAQCAtMTE4Miw3ICsxMTg4LDcgQEAK
IH0KIHByaXZhdGUgdm9pZCB3cml0ZU9mZnNldFRvSGVhZGVyKGludCBvZmZzZXRUb0hlYWRlcikg
dGhyb3dzIElPRXhjZXB0aW9uIHsKIAlpZiAob2Zmc2V0VG9IZWFkZXIgPiAwKSB7Ci0JCVJhbmRv
bUFjY2Vzc0ZpbGUgZmlsZSA9IG5ldyBSYW5kb21BY2Nlc3NGaWxlKHRoaXMuaW5kZXhGaWxlLCAi
cnciKTsgLy8kTk9OLU5MUy0xJAorCQlSYW5kb21BY2Nlc3NGaWxlIGZpbGUgPSBuZXcgUmFuZG9t
QWNjZXNzRmlsZSh0aGlzLmluZGV4RmlsZS5nZXRJbmRleEZpbGUoKSwgInJ3Iik7IC8vJE5PTi1O
TFMtMSQKIAkJdHJ5IHsKIAkJCWZpbGUuc2Vlayh0aGlzLmhlYWRlckluZm9PZmZzZXQpOyAvLyBv
ZmZzZXQgdG8gcG9zaXRpb24gaW4gaGVhZGVyCiAJCQlmaWxlLndyaXRlSW50KG9mZnNldFRvSGVh
ZGVyKTsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29yZS9pbmRleC9GbGF0RmlsZUluZGV4LmphdmEgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvaW5kZXgvRmxh
dEZpbGVJbmRleC5qYXZhCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAuLjg3MjMx
YjQKLS0tIC9kZXYvbnVsbAorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvcmUvaW5kZXgvRmxhdEZpbGVJbmRleC5qYXZhCkBAIC0wLDAg
KzEsODIgQEAKKy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCisgKiBDb3B5cmlnaHQgKGMpIDIwMTEg
SUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlz
IHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCisgKiBhcmUgbWFkZSBhdmFp
bGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAK
KyAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxl
IGF0CisgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbAorICoKKyAq
IENvbnRyaWJ1dG9yczoKKyAqICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBhbmQg
aW1wbGVtZW50YXRpb24KKyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLworcGFja2FnZSBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29yZS5pbmRleDsKKworaW1wb3J0IGphdmEuaW8uRmlsZTsKK2lt
cG9ydCBqYXZhLmlvLkZpbGVJbnB1dFN0cmVhbTsKK2ltcG9ydCBqYXZhLmlvLklPRXhjZXB0aW9u
OworaW1wb3J0IGphdmEuaW8uSW5wdXRTdHJlYW07CitpbXBvcnQgamF2YS5uZXQuVVJMOworCitw
dWJsaWMgY2xhc3MgRmxhdEZpbGVJbmRleCBleHRlbmRzIEluZGV4TG9jYXRpb24geworCUZpbGUg
aW5kZXhGaWxlOworCisJcHVibGljIEZsYXRGaWxlSW5kZXgoRmlsZSBmaWxlKSB7CisJCXN1cGVy
KGZpbGUpOworCQl0aGlzLmluZGV4RmlsZSA9IGZpbGU7CisJfQorCisJcHVibGljIEZsYXRGaWxl
SW5kZXgoVVJMIHVybCwgRmlsZSBmaWxlKSB7CisJCXN1cGVyKHVybCk7CisJCXRoaXMuaW5kZXhG
aWxlID0gZmlsZTsKKwl9CisKKwlwdWJsaWMgYm9vbGVhbiBjcmVhdGVOZXdGaWxlKCkgdGhyb3dz
IElPRXhjZXB0aW9uIHsKKwkJcmV0dXJuIHRoaXMuaW5kZXhGaWxlLmNyZWF0ZU5ld0ZpbGUoKTsK
Kwl9CisKKwlwdWJsaWMgYm9vbGVhbiBkZWxldGUoKSB7CisJCXJldHVybiB0aGlzLmluZGV4Rmls
ZS5kZWxldGUoKTsKKwl9CisKKwlwdWJsaWMgYm9vbGVhbiBlcXVhbHMoT2JqZWN0IG90aGVyKSB7
CisJCWlmICghKG90aGVyIGluc3RhbmNlb2YgRmxhdEZpbGVJbmRleCkpIHJldHVybiBmYWxzZTsK
KwkJcmV0dXJuIHRoaXMuaW5kZXhGaWxlLmVxdWFscygoKEZsYXRGaWxlSW5kZXgpIG90aGVyKS5p
bmRleEZpbGUpOworCX0KKworCXB1YmxpYyBib29sZWFuIGV4aXN0cygpIHsKKwkJcmV0dXJuIHRo
aXMuaW5kZXhGaWxlLmV4aXN0cygpOworCX0KKworCXB1YmxpYyBTdHJpbmcgZmlsZU5hbWUoKSB7
CisJCXJldHVybiB0aGlzLmluZGV4RmlsZS5nZXROYW1lKCk7CisJfQorCQorCXB1YmxpYyBGaWxl
IGdldEluZGV4RmlsZSgpIHsKKwkJcmV0dXJuIHRoaXMuaW5kZXhGaWxlOworCX0KKworCUlucHV0
U3RyZWFtIGdldElucHV0U3RyZWFtKCkgdGhyb3dzIElPRXhjZXB0aW9uIHsKKwkJcmV0dXJuIG5l
dyBGaWxlSW5wdXRTdHJlYW0odGhpcy5pbmRleEZpbGUpOworCX0KKworCXB1YmxpYyBTdHJpbmcg
Z2V0RmlsZVBhdGgoKSB7CisJCXRyeSB7CisJCQlyZXR1cm4gdGhpcy5pbmRleEZpbGUuZ2V0Q2Fu
b25pY2FsUGF0aCgpOworCQl9IGNhdGNoIChJT0V4Y2VwdGlvbiBlKSB7CisJCQkvLyBpZ25vcmUK
KwkJfQorCQlyZXR1cm4gbnVsbDsKKwl9CisKKwlwdWJsaWMgaW50IGhhc2hDb2RlKCkgeworCQly
ZXR1cm4gdGhpcy5pbmRleEZpbGUuaGFzaENvZGUoKTsKKwl9CisKKwlwdWJsaWMgbG9uZyBsYXN0
TW9kaWZpZWQoKSB7CisJCXJldHVybiB0aGlzLmluZGV4RmlsZS5sYXN0TW9kaWZpZWQoKTsKKwl9
CisKKwlwdWJsaWMgbG9uZyBsZW5ndGgoKSB7CisJCXJldHVybiB0aGlzLmluZGV4RmlsZS5sZW5n
dGgoKTsKKwl9CisKK30KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9pbmRleC9JbmRleC5qYXZhIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL2luZGV4L0lu
ZGV4LmphdmEKaW5kZXggM2QzMjYwNy4uZmUxNzFkOSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL2luZGV4L0luZGV4
LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb3JlL2luZGV4L0luZGV4LmphdmEKQEAgLTEsNSArMSw1IEBACiAvKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDA5IElCTSBDb3Jwb3JhdGlv
biBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDExIElCTSBDb3Jwb3JhdGlv
biBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0
aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRo
ZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2Nv
bXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdApAQCAtODgsMTIg
Kzg4LDEyIEBACiB9CiAKIAotcHVibGljIEluZGV4KFN0cmluZyBmaWxlTmFtZSwgU3RyaW5nIGNv
bnRhaW5lclBhdGgsIGJvb2xlYW4gcmV1c2VFeGlzdGluZ0ZpbGUpIHRocm93cyBJT0V4Y2VwdGlv
biB7CitwdWJsaWMgSW5kZXgoSW5kZXhMb2NhdGlvbiBsb2NhdGlvbiwgU3RyaW5nIGNvbnRhaW5l
clBhdGgsIGJvb2xlYW4gcmV1c2VFeGlzdGluZ0ZpbGUpIHRocm93cyBJT0V4Y2VwdGlvbiB7CiAJ
dGhpcy5jb250YWluZXJQYXRoID0gY29udGFpbmVyUGF0aDsKIAl0aGlzLm1vbml0b3IgPSBuZXcg
UmVhZFdyaXRlTW9uaXRvcigpOwogCiAJdGhpcy5tZW1vcnlJbmRleCA9IG5ldyBNZW1vcnlJbmRl
eCgpOwotCXRoaXMuZGlza0luZGV4ID0gbmV3IERpc2tJbmRleChmaWxlTmFtZSk7CisJdGhpcy5k
aXNrSW5kZXggPSBuZXcgRGlza0luZGV4KGxvY2F0aW9uKTsKIAl0aGlzLmRpc2tJbmRleC5pbml0
aWFsaXplKHJldXNlRXhpc3RpbmdGaWxlKTsKIAlpZiAocmV1c2VFeGlzdGluZ0ZpbGUpIHRoaXMu
c2VwYXJhdG9yID0gdGhpcy5kaXNrSW5kZXguc2VwYXJhdG9yOwogfQpAQCAtMTA5LDggKzEwOSwx
NCBAQAogCX0KIAlyZXR1cm4gZG9jdW1lbnRQYXRoLnN1YnN0cmluZyhpbmRleCArIDEpOwogfQot
cHVibGljIEZpbGUgZ2V0SW5kZXhGaWxlKCkgeworcHVibGljIEluZGV4TG9jYXRpb24gZ2V0SW5k
ZXhMb2NhdGlvbigpIHsKIAlyZXR1cm4gdGhpcy5kaXNrSW5kZXggPT0gbnVsbCA/IG51bGwgOiB0
aGlzLmRpc2tJbmRleC5pbmRleEZpbGU7Cit9CitwdWJsaWMgRmlsZSBnZXRJbmRleEZpbGUoKSB7
CisJcmV0dXJuIHRoaXMuZGlza0luZGV4ID09IG51bGwgPyBudWxsIDogdGhpcy5kaXNrSW5kZXgu
aW5kZXhGaWxlLmdldEluZGV4RmlsZSgpOworfQorcHVibGljIGxvbmcgZ2V0SW5kZXhMYXN0TW9k
aWZpZWQoKSB7CisJcmV0dXJuIHRoaXMuZGlza0luZGV4ID09IG51bGw/IC0xIDogdGhpcy5kaXNr
SW5kZXguaW5kZXhGaWxlLmxhc3RNb2RpZmllZCgpOwogfQogcHVibGljIGJvb2xlYW4gaGFzQ2hh
bmdlZCgpIHsKIAlyZXR1cm4gdGhpcy5tZW1vcnlJbmRleC5oYXNDaGFuZ2VkKCk7CkBAIC0xODAs
NyArMTg2LDcgQEAKICAqLwogcHVibGljIHZvaWQgcmVzZXQoKSB0aHJvd3MgSU9FeGNlcHRpb24g
ewogCXRoaXMubWVtb3J5SW5kZXggPSBuZXcgTWVtb3J5SW5kZXgoKTsKLQl0aGlzLmRpc2tJbmRl
eCA9IG5ldyBEaXNrSW5kZXgodGhpcy5kaXNrSW5kZXguaW5kZXhGaWxlLmdldENhbm9uaWNhbFBh
dGgoKSk7CisJdGhpcy5kaXNrSW5kZXggPSBuZXcgRGlza0luZGV4KHRoaXMuZGlza0luZGV4Lmlu
ZGV4RmlsZSk7CiAJdGhpcy5kaXNrSW5kZXguaW5pdGlhbGl6ZShmYWxzZS8qZG8gbm90IHJldXNl
IHRoZSBpbmRleCBmaWxlKi8pOwogfQogcHVibGljIHZvaWQgc2F2ZSgpIHRocm93cyBJT0V4Y2Vw
dGlvbiB7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvcmUvaW5kZXgvSW5kZXhMb2NhdGlvbi5qYXZhIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL2luZGV4L0lu
ZGV4TG9jYXRpb24uamF2YQpuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwLi4zYzgy
MmRlCi0tLSAvZGV2L251bGwKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL2luZGV4L0luZGV4TG9jYXRpb24uamF2YQpAQCAtMCww
ICsxLDk5IEBACisvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgorICogQ29weXJpZ2h0IChjKSAyMDEx
IElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhp
cyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscworICogYXJlIG1hZGUgYXZh
aWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4w
CisgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJs
ZSBhdAorICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKKyAqCisg
KiBDb250cmlidXRvcnM6CisgKiAgICAgSUJNIENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5k
IGltcGxlbWVudGF0aW9uCisgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KK3BhY2thZ2Ugb3JnLmVj
bGlwc2UuamR0LmludGVybmFsLmNvcmUuaW5kZXg7CisKK2ltcG9ydCBqYXZhLmlvLkZpbGU7Citp
bXBvcnQgamF2YS5pby5JT0V4Y2VwdGlvbjsKK2ltcG9ydCBqYXZhLmlvLklucHV0U3RyZWFtOwor
CitpbXBvcnQgamF2YS5uZXQuTWFsZm9ybWVkVVJMRXhjZXB0aW9uOworaW1wb3J0IGphdmEubmV0
LlVSTDsKKworaW1wb3J0IG9yZy5lY2xpcHNlLmNvcmUucnVudGltZS5GaWxlTG9jYXRvcjsKKwor
LyoqCisgKiBUT0RPIFNBVFlBTTogV3JpdGUgYSBjb21tZW50IGFib3V0IHRoaXMgZmlsZQorICog
CisgKi8KK3B1YmxpYyBhYnN0cmFjdCBjbGFzcyBJbmRleExvY2F0aW9uIHsKKwlwcml2YXRlIGZp
bmFsIFVSTCB1cmw7CisJcHJpdmF0ZSBib29sZWFuIHBhcnRpY2lwYW50SW5kZXg7CisKKwlwdWJs
aWMgSW5kZXhMb2NhdGlvbihGaWxlIGZpbGUpIHsKKwkJVVJMIHRlbXBVcmwgPSBudWxsOworCQl0
cnkgeworCQkJdGVtcFVybCA9IGZpbGUudG9VUkkoKS50b1VSTCgpOworCQl9IGNhdGNoIChNYWxm
b3JtZWRVUkxFeGNlcHRpb24gZSkgeworCQkJLy8gc2hvdWxkIG5vdCBoYXBwZW4KKwkJfQorCQl0
aGlzLnVybCA9IHRlbXBVcmw7CisJfQorCQorCXB1YmxpYyBzdGF0aWMgSW5kZXhMb2NhdGlvbiBj
cmVhdGVJbmRleExvY2F0aW9uKFVSTCB1cmwpIHsKKwkJVVJMIGxvY2FsVXJsOworCQl0cnkgewor
CQkJbG9jYWxVcmwgPSBGaWxlTG9jYXRvci5yZXNvbHZlKHVybCk7CisJCX0gY2F0Y2ggKElPRXhj
ZXB0aW9uIGUpIHsKKwkJCXJldHVybiBudWxsOworCQl9CisJCWlmIChsb2NhbFVybC5nZXRQcm90
b2NvbCgpLmVxdWFscygiZmlsZSIpKSB7IC8vJE5PTi1OTFMtMSQKKwkJCXJldHVybiBuZXcgRmxh
dEZpbGVJbmRleCh1cmwsIG5ldyBGaWxlKGxvY2FsVXJsLmdldFBhdGgoKSkpOworCQl9CisJCXJl
dHVybiBuZXcgSmFyRW50cnlJbmRleCh1cmwsIGxvY2FsVXJsKTsKKwl9CisJCisJcHVibGljIElu
ZGV4TG9jYXRpb24oVVJMIHVybCkgeworCQl0aGlzLnVybCA9IHVybDsKKwl9CisKKwlwdWJsaWMg
YWJzdHJhY3QgYm9vbGVhbiBjcmVhdGVOZXdGaWxlKCkgdGhyb3dzIElPRXhjZXB0aW9uOworCisJ
cHVibGljIHZvaWQgY2xvc2UoKSB7CisJCS8vIGRlZmF1bHQgbm90aGluZyB0byBkbworCX0KKwor
CXB1YmxpYyBhYnN0cmFjdCBib29sZWFuIGRlbGV0ZSgpOworCisJcHVibGljIGFic3RyYWN0IGJv
b2xlYW4gZXhpc3RzKCk7CisJCisJcHVibGljIGFic3RyYWN0IFN0cmluZyBmaWxlTmFtZSgpOwor
CisJcHVibGljIGFic3RyYWN0IEZpbGUgZ2V0SW5kZXhGaWxlKCk7CisKKwlhYnN0cmFjdCBJbnB1
dFN0cmVhbSBnZXRJbnB1dFN0cmVhbSgpIHRocm93cyBJT0V4Y2VwdGlvbjsKKworCXB1YmxpYyBh
YnN0cmFjdCBTdHJpbmcgZ2V0RmlsZVBhdGgoKTsKKworCXB1YmxpYyBVUkwgZ2V0VXJsKCkgewor
CQlyZXR1cm4gdGhpcy51cmw7CisJfQorCisJcHVibGljIGludCBoYXNoQ29kZSgpIHsKKwkJcmV0
dXJuIHRoaXMudXJsLmhhc2hDb2RlKCk7CisJfQorCisJcHVibGljIGJvb2xlYW4gaXNQYXJ0aWNp
cGFudEluZGV4KCkgeworCQlyZXR1cm4gdGhpcy5wYXJ0aWNpcGFudEluZGV4OworCX0KKworCXB1
YmxpYyB2b2lkIHNldFBhcnRpY2lwYW50SW5kZXgoKSB7CisJCXRoaXMucGFydGljaXBhbnRJbmRl
eCA9IHRydWU7CisJfQorCisJcHVibGljIGFic3RyYWN0IGxvbmcgbGFzdE1vZGlmaWVkKCk7CisK
KwlwdWJsaWMgYWJzdHJhY3QgbG9uZyBsZW5ndGgoKTsKKworCXB1YmxpYyBTdHJpbmcgdG9TdHJp
bmcoKSB7CisJCXJldHVybiB0aGlzLnVybC50b1N0cmluZygpOworCX0KKworfQpkaWZmIC0tZ2l0
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b3JlL2luZGV4L0phckVudHJ5SW5kZXguamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJj
aC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9pbmRleC9KYXJFbnRyeUluZGV4LmphdmEK
bmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMC4uMTdmZjhlYQotLS0gL2Rldi9udWxs
CisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29yZS9pbmRleC9KYXJFbnRyeUluZGV4LmphdmEKQEAgLTAsMCArMSwxMDEgQEAKKy8qKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqCisgKiBDb3B5cmlnaHQgKGMpIDIwMTEgSUJNIENvcnBvcmF0aW9u
IGFuZCBvdGhlcnMuCisgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRo
ZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCisgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhl
IHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKKyAqIHdoaWNoIGFjY29t
cGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CisgKiBodHRwOi8v
d3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbAorICoKKyAqIENvbnRyaWJ1dG9yczoK
KyAqICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24K
KyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqLworcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJu
YWwuY29yZS5pbmRleDsKKworaW1wb3J0IGphdmEuaW8uRmlsZTsKK2ltcG9ydCBqYXZhLmlvLklP
RXhjZXB0aW9uOworaW1wb3J0IGphdmEuaW8uSW5wdXRTdHJlYW07CitpbXBvcnQgamF2YS5uZXQu
SmFyVVJMQ29ubmVjdGlvbjsKK2ltcG9ydCBqYXZhLm5ldC5VUkw7CitpbXBvcnQgamF2YS51dGls
Lmphci5KYXJFbnRyeTsKK2ltcG9ydCBqYXZhLnV0aWwuamFyLkphckZpbGU7CisKK3B1YmxpYyBj
bGFzcyBKYXJFbnRyeUluZGV4IGV4dGVuZHMgSW5kZXhMb2NhdGlvbiB7CisJcHJpdmF0ZSBKYXJG
aWxlIGphckZpbGUgPSBudWxsOworCXByaXZhdGUgSmFyRW50cnkgamFyRW50cnkgPSBudWxsOwor
CXByaXZhdGUgVVJMIGxvY2FsVXJsOworCisJcHVibGljIEphckVudHJ5SW5kZXgoVVJMIHVybCwg
VVJMIGxvY2FsVXJsMikgeworCQlzdXBlcih1cmwpOworCQl0aGlzLmxvY2FsVXJsID0gbG9jYWxV
cmwyOworCX0KKworCXB1YmxpYyBib29sZWFuIGNyZWF0ZU5ld0ZpbGUoKSB0aHJvd3MgSU9FeGNl
cHRpb24geworCQlyZXR1cm4gZmFsc2U7CisJfQorCisJcHVibGljIHZvaWQgY2xvc2UoKSB7CisJ
CWlmICh0aGlzLmphckZpbGUgIT0gbnVsbCkgeworCQkJdHJ5IHsKKwkJCQl0aGlzLmphckZpbGUu
Y2xvc2UoKTsKKwkJCX0gY2F0Y2ggKElPRXhjZXB0aW9uIGUpIHsKKwkJCQkvLyBpZ25vcmUKKwkJ
CX0KKwkJCXRoaXMuamFyRmlsZSA9IG51bGw7CisJCX0KKwl9CisKKwlwdWJsaWMgYm9vbGVhbiBk
ZWxldGUoKSB7CisJCXJldHVybiBmYWxzZTsKKwl9CisKKwlwdWJsaWMgYm9vbGVhbiBlcXVhbHMo
T2JqZWN0IG90aGVyKSB7CisJCWlmICghKG90aGVyIGluc3RhbmNlb2YgSmFyRW50cnlJbmRleCkp
IHJldHVybiBmYWxzZTsKKwkJcmV0dXJuIHRoaXMubG9jYWxVcmwuZXF1YWxzKCgoSmFyRW50cnlJ
bmRleCkgb3RoZXIpLmxvY2FsVXJsKTsKKwl9CisKKwlwdWJsaWMgYm9vbGVhbiBleGlzdHMoKSB7
CisJCXRyeSB7CisJCQlpZiAodGhpcy5qYXJGaWxlID09IG51bGwpIHsKKwkJCQlKYXJVUkxDb25u
ZWN0aW9uIGNvbm5lY3Rpb24gPSAoSmFyVVJMQ29ubmVjdGlvbikgdGhpcy5sb2NhbFVybC5vcGVu
Q29ubmVjdGlvbigpOworCQkJCUphckZpbGUgZmlsZSA9IGNvbm5lY3Rpb24uZ2V0SmFyRmlsZSgp
OworCQkJCWlmIChmaWxlID09IG51bGwpCisJCQkJCXJldHVybiBmYWxzZTsKKwkJCQlmaWxlLmNs
b3NlKCk7CisJCQl9CisJCX0gY2F0Y2ggKElPRXhjZXB0aW9uIGUpIHsKKwkJCXJldHVybiBmYWxz
ZTsKKwkJfQorCQlyZXR1cm4gdHJ1ZTsKKwl9CisKKwlwdWJsaWMgU3RyaW5nIGZpbGVOYW1lKCkg
eworCQlyZXR1cm4gbnVsbDsKKwl9CisKKwlwdWJsaWMgRmlsZSBnZXRJbmRleEZpbGUoKSB7CisJ
CXJldHVybiBudWxsOworCX0KKworCUlucHV0U3RyZWFtIGdldElucHV0U3RyZWFtKCkgdGhyb3dz
IElPRXhjZXB0aW9uIHsKKwkJaWYgKHRoaXMuamFyRmlsZSA9PSBudWxsKSB7CisJCQlKYXJVUkxD
b25uZWN0aW9uIGNvbm5lY3Rpb24gPSAoSmFyVVJMQ29ubmVjdGlvbikgdGhpcy5sb2NhbFVybC5v
cGVuQ29ubmVjdGlvbigpOworCQkJdGhpcy5qYXJGaWxlID0gY29ubmVjdGlvbi5nZXRKYXJGaWxl
KCk7CisJCQl0aGlzLmphckVudHJ5ID0gY29ubmVjdGlvbi5nZXRKYXJFbnRyeSgpOworCQl9CisJ
CWlmICh0aGlzLmphckZpbGUgPT0gbnVsbCB8fCB0aGlzLmphckVudHJ5ID09IG51bGwpCisJCQly
ZXR1cm4gbnVsbDsKKwkJcmV0dXJuIHRoaXMuamFyRmlsZS5nZXRJbnB1dFN0cmVhbSh0aGlzLmph
ckVudHJ5KTsKKwl9CisKKwlwdWJsaWMgU3RyaW5nIGdldEZpbGVQYXRoKCkgeworCQlyZXR1cm4g
bnVsbDsKKwl9CisKKwlwdWJsaWMgbG9uZyBsYXN0TW9kaWZpZWQoKSB7CisJCXJldHVybiAtMTsK
Kwl9CisKKwlwdWJsaWMgbG9uZyBsZW5ndGgoKSB7CisJCXJldHVybiAtMTsKKwl9CisKK30KZGlm
ZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29yZS9zZWFyY2gvSW5kZXhTZWxlY3Rvci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9JbmRleFNlbGVj
dG9yLmphdmEKaW5kZXggNGU1ODRmMi4uMjA5OTBjOSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9JbmRl
eFNlbGVjdG9yLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9JbmRleFNlbGVjdG9yLmphdmEKQEAgLTI3LDYg
KzI3LDcgQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS5KYXZhUHJvamVj
dDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS5idWlsZGVyLlJlZmVyZW5j
ZUNvbGxlY3Rpb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvcmUuYnVpbGRl
ci5TdGF0ZTsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS5pbmRleC5JbmRl
eExvY2F0aW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLnNlYXJjaC5p
bmRleGluZy5JbmRleE1hbmFnZXI7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNv
cmUuc2VhcmNoLm1hdGNoaW5nLk1hdGNoTG9jYXRvcjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29yZS5zZWFyY2gubWF0Y2hpbmcuTWV0aG9kUGF0dGVybjsKQEAgLTM4LDcgKzM5
LDcgQEAKIHB1YmxpYyBjbGFzcyBJbmRleFNlbGVjdG9yIHsKIAlJSmF2YVNlYXJjaFNjb3BlIHNl
YXJjaFNjb3BlOwogCVNlYXJjaFBhdHRlcm4gcGF0dGVybjsKLQlJUGF0aFtdIGluZGV4TG9jYXRp
b25zOyAvLyBjYWNoZSBvZiB0aGUga2V5cyBmb3IgbG9va2luZyBpbmRleCB1cAorCUluZGV4TG9j
YXRpb25bXSBpbmRleExvY2F0aW9uczsgLy8gY2FjaGUgb2YgdGhlIGtleXMgZm9yIGxvb2tpbmcg
aW5kZXggdXAKIAogcHVibGljIEluZGV4U2VsZWN0b3IoCiAJCUlKYXZhU2VhcmNoU2NvcGUgc2Vh
cmNoU2NvcGUsCkBAIC0yNjcsMTAgKzI2OCwxMCBAQAogCX0KIAogCWxvY2F0aW9ucy5yZW1vdmUo
bnVsbCk7IC8vIEVuc3VyZSBubyBudWxscwotCXRoaXMuaW5kZXhMb2NhdGlvbnMgPSAoSVBhdGhb
XSkgbG9jYXRpb25zLnRvQXJyYXkobmV3IElQYXRoW2xvY2F0aW9ucy5zaXplKCldKTsKKwl0aGlz
LmluZGV4TG9jYXRpb25zID0gKEluZGV4TG9jYXRpb25bXSkgbG9jYXRpb25zLnRvQXJyYXkobmV3
IEluZGV4TG9jYXRpb25bbG9jYXRpb25zLnNpemUoKV0pOwogfQogCi1wdWJsaWMgSVBhdGhbXSBn
ZXRJbmRleExvY2F0aW9ucygpIHsKK3B1YmxpYyBJbmRleExvY2F0aW9uW10gZ2V0SW5kZXhMb2Nh
dGlvbnMoKSB7CiAJaWYgKHRoaXMuaW5kZXhMb2NhdGlvbnMgPT0gbnVsbCkgewogCQlpbml0aWFs
aXplSW5kZXhMb2NhdGlvbnMoKTsKIAl9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNoL0phdmFTZWFyY2hQ
YXJ0aWNpcGFudC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9KYXZhU2VhcmNoUGFydGljaXBhbnQuamF2YQppbmRl
eCAxM2Q2ODIwLi5hZTg1NjhiIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFy
Y2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNoL0phdmFTZWFyY2hQYXJ0aWNp
cGFudC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gvSmF2YVNlYXJjaFBhcnRpY2lwYW50LmphdmEKQEAgLTEw
LDggKzEwLDEwIEBACiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KIHBhY2thZ2Ugb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvcmUuc2VhcmNoOwogCisKIGltcG9ydCBvcmcuZWNsaXBzZS5jb3Jl
LnJ1bnRpbWUuKjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5zZWFyY2guKjsKK2ltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS5pbmRleC5JbmRleExvY2F0aW9uOwogaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLnNlYXJjaC5pbmRleGluZy5CaW5hcnlJ
bmRleGVyOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLnNlYXJjaC5pbmRl
eGluZy5Tb3VyY2VJbmRleGVyOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3Jl
LnNlYXJjaC5tYXRjaGluZy5NYXRjaExvY2F0b3I7CkBAIC05OCw3ICsxMDAsMjAgQEAKIAkgKiBA
c2VlIG9yZy5lY2xpcHNlLmpkdC5jb3JlLnNlYXJjaC5TZWFyY2hQYXJ0aWNpcGFudCNzZWxlY3RJ
bmRleGVzKG9yZy5lY2xpcHNlLmpkdC5jb3JlLnNlYXJjaC5TZWFyY2hRdWVyeSwgb3JnLmVjbGlw
c2UuamR0LmNvcmUuc2VhcmNoLlNlYXJjaENvbnRleHQpCiAJICovCiAJcHVibGljIElQYXRoW10g
c2VsZWN0SW5kZXhlcyhTZWFyY2hQYXR0ZXJuIHBhdHRlcm4sIElKYXZhU2VhcmNoU2NvcGUgc2Nv
cGUpIHsKKwkJSW5kZXhTZWxlY3RvciBzZWxlY3RvciA9IChJbmRleFNlbGVjdG9yKSB0aGlzLmlu
ZGV4U2VsZWN0b3IuZ2V0KCk7CisJCWlmIChzZWxlY3RvciA9PSBudWxsKSB7CisJCQlzZWxlY3Rv
ciA9IG5ldyBJbmRleFNlbGVjdG9yKHNjb3BlLCBwYXR0ZXJuKTsKKwkJCXRoaXMuaW5kZXhTZWxl
Y3Rvci5zZXQoc2VsZWN0b3IpOworCQl9CisJCUluZGV4TG9jYXRpb25bXSB1cmxzID0gc2VsZWN0
b3IuZ2V0SW5kZXhMb2NhdGlvbnMoKTsKKwkJSVBhdGhbXSBwYXRocyA9IG5ldyBJUGF0aFt1cmxz
Lmxlbmd0aF07CisJCWZvciAoaW50IGkgPSAwOyBpIDwgdXJscy5sZW5ndGg7IGkrKykgeworCQkJ
cGF0aHNbaV0gPSBuZXcgUGF0aCh1cmxzW2ldLmdldEluZGV4RmlsZSgpLmdldFBhdGgoKSk7CisJ
CX0KKwkJcmV0dXJuIHBhdGhzOworCX0KIAorCXB1YmxpYyBJbmRleExvY2F0aW9uW10gc2VsZWN0
SW5kZXhVUkxzKFNlYXJjaFBhdHRlcm4gcGF0dGVybiwgSUphdmFTZWFyY2hTY29wZSBzY29wZSkg
ewogCQlJbmRleFNlbGVjdG9yIHNlbGVjdG9yID0gKEluZGV4U2VsZWN0b3IpIHRoaXMuaW5kZXhT
ZWxlY3Rvci5nZXQoKTsKIAkJaWYgKHNlbGVjdG9yID09IG51bGwpIHsKIAkJCXNlbGVjdG9yID0g
bmV3IEluZGV4U2VsZWN0b3Ioc2NvcGUsIHBhdHRlcm4pOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9Q
YXR0ZXJuU2VhcmNoSm9iLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNoL1BhdHRlcm5TZWFyY2hKb2IuamF2YQppbmRl
eCA0NTk3MzBjLi5lZTY2ZjUzIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFy
Y2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNoL1BhdHRlcm5TZWFyY2hKb2Iu
amF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvcmUvc2VhcmNoL1BhdHRlcm5TZWFyY2hKb2IuamF2YQpAQCAtMTcsNyArMTcsOSBA
QAogaW1wb3J0IG9yZy5lY2xpcHNlLmNvcmUucnVudGltZS5PcGVyYXRpb25DYW5jZWxlZEV4Y2Vw
dGlvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5zZWFyY2guKjsKIGltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS5KYXZhTW9kZWxNYW5hZ2VyOworaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLmluZGV4LkZsYXRGaWxlSW5kZXg7CiBpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvcmUuaW5kZXguSW5kZXg7CitpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvcmUuaW5kZXguSW5kZXhMb2NhdGlvbjsKIGltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29yZS5zZWFyY2guaW5kZXhpbmcuUmVhZFdyaXRlTW9uaXRvcjsK
IGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS5zZWFyY2gubWF0Y2hpbmcuTWF0
Y2hMb2NhdG9yOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLnNlYXJjaC5w
cm9jZXNzaW5nLklKb2I7CkBAIC03Niw4ICs3OCwyMCBAQAogfQogcHVibGljIEluZGV4W10gZ2V0
SW5kZXhlcyhJUHJvZ3Jlc3NNb25pdG9yIHByb2dyZXNzTW9uaXRvcikgewogCS8vIGFjcXVpcmUg
dGhlIGluLW1lbW9yeSBpbmRleGVzIG9uIHRoZSBmbHkKLQlJUGF0aFtdIGluZGV4TG9jYXRpb25z
ID0gdGhpcy5wYXJ0aWNpcGFudC5zZWxlY3RJbmRleGVzKHRoaXMucGF0dGVybiwgdGhpcy5zY29w
ZSk7Ci0JaW50IGxlbmd0aCA9IGluZGV4TG9jYXRpb25zLmxlbmd0aDsKKwlJbmRleExvY2F0aW9u
W10gaW5kZXhMb2NhdGlvbnM7CisJaW50IGxlbmd0aDsKKwlpZiAodGhpcy5wYXJ0aWNpcGFudCBp
bnN0YW5jZW9mIEphdmFTZWFyY2hQYXJ0aWNpcGFudCkgeworCQlpbmRleExvY2F0aW9ucyA9ICgo
SmF2YVNlYXJjaFBhcnRpY2lwYW50KXRoaXMucGFydGljaXBhbnQpLnNlbGVjdEluZGV4VVJMcyh0
aGlzLnBhdHRlcm4sIHRoaXMuc2NvcGUpOworCQlsZW5ndGggPSBpbmRleExvY2F0aW9ucy5sZW5n
dGg7CisJfSBlbHNlIHsKKwkJSVBhdGhbXSBwYXRocyA9IHRoaXMucGFydGljaXBhbnQuc2VsZWN0
SW5kZXhlcyh0aGlzLnBhdHRlcm4sIHRoaXMuc2NvcGUpOworCQlsZW5ndGggPXBhdGhzLmxlbmd0
aDsKKwkJaW5kZXhMb2NhdGlvbnMgPSBuZXcgSW5kZXhMb2NhdGlvbltwYXRocy5sZW5ndGhdOwor
CQlmb3IgKGludCBpID0gMDsgaSA8IHBhdGhzLmxlbmd0aDsgaSsrKSB7CisJCQlpbmRleExvY2F0
aW9uc1tpXSA9IG5ldyBGbGF0RmlsZUluZGV4KHBhdGhzW2ldLnRvRmlsZSgpKTsKKwkJCWluZGV4
TG9jYXRpb25zW2ldLnNldFBhcnRpY2lwYW50SW5kZXgoKTsKKwkJfQorCX0KIAlJbmRleFtdIGlu
ZGV4ZXMgPSBKYXZhTW9kZWxNYW5hZ2VyLmdldEluZGV4TWFuYWdlcigpLmdldEluZGV4ZXMoaW5k
ZXhMb2NhdGlvbnMsIHByb2dyZXNzTW9uaXRvcik7CiAJdGhpcy5hcmVJbmRleGVzUmVhZHkgPSBp
bmRleGVzLmxlbmd0aCA9PSBsZW5ndGg7CiAJcmV0dXJuIGluZGV4ZXM7CmRpZmYgLS1naXQgYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUv
c2VhcmNoL2luZGV4aW5nL0FkZEphckZpbGVUb0luZGV4LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNoL2luZGV4aW5n
L0FkZEphckZpbGVUb0luZGV4LmphdmEKaW5kZXggMTY4OTA0Zi4uYzRmODU1MiAxMDA2NDQKLS0t
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b3JlL3NlYXJjaC9pbmRleGluZy9BZGRKYXJGaWxlVG9JbmRleC5qYXZhCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gv
aW5kZXhpbmcvQWRkSmFyRmlsZVRvSW5kZXguamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTAgSUJNIENvcnBvcmF0
aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTEgSUJNIENvcnBvcmF0
aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5k
IHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIg
dGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFj
Y29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC0zNCw2
ICszNCw3IEBACiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLnV0aWwu
VXRpbDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS5KYXZhTW9kZWxNYW5h
Z2VyOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLmluZGV4LkluZGV4Owor
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLmluZGV4LkluZGV4TG9jYXRpb247
CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvcmUuc2VhcmNoLkphdmFTZWFyY2hE
b2N1bWVudDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS5zZWFyY2gucHJv
Y2Vzc2luZy5Kb2JNYW5hZ2VyOwogCkBAIC00MiwxNCArNDMsMTcgQEAKIAlwcml2YXRlIHN0YXRp
YyBmaW5hbCBjaGFyIEpBUl9TRVBBUkFUT1IgPSBJSmF2YVNlYXJjaFNjb3BlLkpBUl9GSUxFX0VO
VFJZX1NFUEFSQVRPUi5jaGFyQXQoMCk7CiAJSUZpbGUgcmVzb3VyY2U7CiAJU2Nhbm5lciBzY2Fu
bmVyOworCXByaXZhdGUgSW5kZXhMb2NhdGlvbiBpbmRleEZpbGVVUkw7CiAKLQlwdWJsaWMgQWRk
SmFyRmlsZVRvSW5kZXgoSUZpbGUgcmVzb3VyY2UsIEluZGV4TWFuYWdlciBtYW5hZ2VyKSB7CisJ
cHVibGljIEFkZEphckZpbGVUb0luZGV4KElGaWxlIHJlc291cmNlLCBJbmRleExvY2F0aW9uIGlu
ZGV4RmlsZSwgSW5kZXhNYW5hZ2VyIG1hbmFnZXIpIHsKIAkJc3VwZXIocmVzb3VyY2UuZ2V0RnVs
bFBhdGgoKSwgbWFuYWdlcik7CiAJCXRoaXMucmVzb3VyY2UgPSByZXNvdXJjZTsKKwkJdGhpcy5p
bmRleEZpbGVVUkwgPSBpbmRleEZpbGU7CiAJfQotCXB1YmxpYyBBZGRKYXJGaWxlVG9JbmRleChJ
UGF0aCBqYXJQYXRoLCBJbmRleE1hbmFnZXIgbWFuYWdlcikgeworCXB1YmxpYyBBZGRKYXJGaWxl
VG9JbmRleChJUGF0aCBqYXJQYXRoLCBJbmRleExvY2F0aW9uIGluZGV4RmlsZSwgSW5kZXhNYW5h
Z2VyIG1hbmFnZXIpIHsKIAkJLy8gZXh0ZXJuYWwgSkFSIHNjZW5hcmlvIC0gbm8gcmVzb3VyY2UK
IAkJc3VwZXIoamFyUGF0aCwgbWFuYWdlcik7CisJCXRoaXMuaW5kZXhGaWxlVVJMID0gaW5kZXhG
aWxlOwogCX0KIAlwdWJsaWMgYm9vbGVhbiBlcXVhbHMoT2JqZWN0IG8pIHsKIAkJaWYgKG8gaW5z
dGFuY2VvZiBBZGRKYXJGaWxlVG9JbmRleCkgewpAQCAtNzAsNiArNzQsMTIgQEAKIAlwdWJsaWMg
Ym9vbGVhbiBleGVjdXRlKElQcm9ncmVzc01vbml0b3IgcHJvZ3Jlc3NNb25pdG9yKSB7CiAKIAkJ
aWYgKHRoaXMuaXNDYW5jZWxsZWQgfHwgcHJvZ3Jlc3NNb25pdG9yICE9IG51bGwgJiYgcHJvZ3Jl
c3NNb25pdG9yLmlzQ2FuY2VsZWQoKSkgcmV0dXJuIHRydWU7CisKKwkJaWYgKHRoaXMuaW5kZXhG
aWxlVVJMICE9IG51bGwpIHsKKwkJCWJvb2xlYW4gYWRkZWQgPSB0aGlzLm1hbmFnZXIuYWRkSW5k
ZXgodGhpcy5jb250YWluZXJQYXRoLCB0aGlzLmluZGV4RmlsZVVSTCk7CisJCQlpZiAoYWRkZWQp
IHJldHVybiB0cnVlOwkKKwkJCXRoaXMuaW5kZXhGaWxlVVJMID0gbnVsbDsKKwkJfQogCiAJCXRy
eSB7CiAJCQkvLyBpZiBpbmRleCBpcyBhbHJlYWR5IGNhY2hlZCwgdGhlbiBkbyBub3QgcGVyZm9y
bSBhbnkgY2hlY2sKQEAgLTE5Miw3ICsyMDIsMTEgQEAKIAkJCQkJcmV0dXJuIGZhbHNlOwogCQkJ
CX0KIAkJCQlpbmRleC5zZXBhcmF0b3IgPSBKQVJfU0VQQVJBVE9SOwotCisJCQkJSVBhdGggaW5k
ZXhQYXRoID0gbnVsbDsKKwkJCQlJbmRleExvY2F0aW9uIGluZGV4TG9jYXRpb247CisJCQkJaWYg
KChpbmRleExvY2F0aW9uID0gaW5kZXguZ2V0SW5kZXhMb2NhdGlvbigpKSAhPSBudWxsKSB7CisJ
CQkJCWluZGV4UGF0aCA9IG5ldyBQYXRoKGluZGV4TG9jYXRpb24uZ2V0RmlsZVBhdGgoKSk7CisJ
CQkJfQogCQkJCWZvciAoRW51bWVyYXRpb24gZSA9IHppcC5lbnRyaWVzKCk7IGUuaGFzTW9yZUVs
ZW1lbnRzKCk7KSB7CiAJCQkJCWlmICh0aGlzLmlzQ2FuY2VsbGVkKSB7CiAJCQkJCQlpZiAoSm9i
TWFuYWdlci5WRVJCT1NFKQpAQCAtMjA4LDcgKzIyMiw3IEBACiAJCQkJCQkvLyBpbmRleCBvbmx5
IGNsYXNzZXMgY29taW5nIGZyb20gdmFsaWQgcGFja2FnZXMgLSBodHRwczovL2J1Z3MuZWNsaXBz
ZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MjkzODYxCiAJCQkJCQlmaW5hbCBieXRlW10gY2xh
c3NGaWxlQnl0ZXMgPSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIudXRpbC5VdGls
LmdldFppcEVudHJ5Qnl0ZUNvbnRlbnQoemUsIHppcCk7CiAJCQkJCQlKYXZhU2VhcmNoRG9jdW1l
bnQgZW50cnlEb2N1bWVudCA9IG5ldyBKYXZhU2VhcmNoRG9jdW1lbnQoemUsIHppcEZpbGVQYXRo
LCBjbGFzc0ZpbGVCeXRlcywgcGFydGljaXBhbnQpOwotCQkJCQkJdGhpcy5tYW5hZ2VyLmluZGV4
RG9jdW1lbnQoZW50cnlEb2N1bWVudCwgcGFydGljaXBhbnQsIGluZGV4LCB0aGlzLmNvbnRhaW5l
clBhdGgpOworCQkJCQkJdGhpcy5tYW5hZ2VyLmluZGV4RG9jdW1lbnQoZW50cnlEb2N1bWVudCwg
cGFydGljaXBhbnQsIGluZGV4LCBpbmRleFBhdGgpOwogCQkJCQl9CiAJCQkJfQogCQkJCXRoaXMu
bWFuYWdlci5zYXZlSW5kZXgoaW5kZXgpOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9pbmRleGluZy9E
ZWZhdWx0SmF2YUluZGV4ZXIuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gvaW5kZXhpbmcvRGVmYXVsdEphdmFJbmRl
eGVyLmphdmEKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMC4uOGRiMTc5NQotLS0g
L2Rldi9udWxsCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gvaW5kZXhpbmcvRGVmYXVsdEphdmFJbmRleGVyLmphdmEK
QEAgLTAsMCArMSw1MSBAQAorcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS5z
ZWFyY2guaW5kZXhpbmc7DQorDQoraW1wb3J0IGphdmEuaW8uRmlsZTsNCitpbXBvcnQgamF2YS5p
by5GaWxlTm90Rm91bmRFeGNlcHRpb247DQoraW1wb3J0IGphdmEuaW8uSU9FeGNlcHRpb247DQor
aW1wb3J0IGphdmEudXRpbC5FbnVtZXJhdGlvbjsNCitpbXBvcnQgamF2YS51dGlsLnppcC5aaXBF
bnRyeTsNCitpbXBvcnQgamF2YS51dGlsLnppcC5aaXBGaWxlOw0KKw0KK2ltcG9ydCBvcmcuZWNs
aXBzZS5jb3JlLnJ1bnRpbWUuUGF0aDsNCitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuc2Vh
cmNoLklKYXZhU2VhcmNoU2NvcGU7DQoraW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLnNlYXJj
aC5TZWFyY2hFbmdpbmU7DQoraW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLnNlYXJjaC5TZWFy
Y2hQYXJ0aWNpcGFudDsNCitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVy
LnV0aWwuVXRpbDsNCitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvcmUuaW5kZXgu
RmxhdEZpbGVJbmRleDsNCitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvcmUuaW5k
ZXguSW5kZXg7DQoraW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLmluZGV4Lklu
ZGV4TG9jYXRpb247DQoraW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLnNlYXJj
aC5KYXZhU2VhcmNoRG9jdW1lbnQ7DQorDQorcHVibGljIGNsYXNzIERlZmF1bHRKYXZhSW5kZXhl
ciB7DQorCXByaXZhdGUgc3RhdGljIGZpbmFsIGNoYXIgSkFSX1NFUEFSQVRPUiA9IElKYXZhU2Vh
cmNoU2NvcGUuSkFSX0ZJTEVfRU5UUllfU0VQQVJBVE9SLmNoYXJBdCgwKTsNCisJDQorCXB1Ymxp
YyB2b2lkIGdlbmVyYXRlSW5kZXhGb3JKYXIoU3RyaW5nIHBhdGhUb0phciwgU3RyaW5nIHBhdGhU
b0luZGV4RmlsZSkgdGhyb3dzIElPRXhjZXB0aW9uIHsNCisJCUZpbGUgZiA9IG5ldyBGaWxlKHBh
dGhUb0phcik7IA0KKwkJaWYgKCFmLmV4aXN0cygpKSB7DQorCQkJdGhyb3cgbmV3IEZpbGVOb3RG
b3VuZEV4Y2VwdGlvbihwYXRoVG9KYXIgKyAibm90IGZvdW5kIik7IC8vJE5PTi1OTFMtMSQNCisJ
CX0NCisJCUluZGV4TG9jYXRpb24gaW5kZXhMb2NhdGlvbiA9IG5ldyBGbGF0RmlsZUluZGV4KG5l
dyBGaWxlKHBhdGhUb0luZGV4RmlsZSkpOw0KKwkJSW5kZXggaW5kZXggPSBuZXcgSW5kZXgoaW5k
ZXhMb2NhdGlvbiwgcGF0aFRvSmFyLCBmYWxzZSAvKnJldXNlIGluZGV4IGZpbGUqLyk7DQorCQlT
ZWFyY2hQYXJ0aWNpcGFudCBwYXJ0aWNpcGFudCA9IFNlYXJjaEVuZ2luZS5nZXREZWZhdWx0U2Vh
cmNoUGFydGljaXBhbnQoKTsNCisJCWluZGV4LnNlcGFyYXRvciA9IEpBUl9TRVBBUkFUT1I7DQor
CQlaaXBGaWxlIHppcCA9IG5ldyBaaXBGaWxlKHBhdGhUb0phcik7DQorCQlmb3IgKEVudW1lcmF0
aW9uIGUgPSB6aXAuZW50cmllcygpOyBlLmhhc01vcmVFbGVtZW50cygpOykgew0KKwkJCS8vIGl0
ZXJhdGUgZWFjaCBlbnRyeSB0byBpbmRleCBpdA0KKwkJCVppcEVudHJ5IHplID0gKFppcEVudHJ5
KSBlLm5leHRFbGVtZW50KCk7DQorCQkJU3RyaW5nIHppcEVudHJ5TmFtZSA9IHplLmdldE5hbWUo
KTsNCisJCQlpZiAoVXRpbC5pc0NsYXNzRmlsZU5hbWUoemlwRW50cnlOYW1lKSkgew0KKwkJCQlm
aW5hbCBieXRlW10gY2xhc3NGaWxlQnl0ZXMgPSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29t
cGlsZXIudXRpbC5VdGlsLmdldFppcEVudHJ5Qnl0ZUNvbnRlbnQoemUsIHppcCk7DQorCQkJCUph
dmFTZWFyY2hEb2N1bWVudCBlbnRyeURvY3VtZW50ID0gbmV3IEphdmFTZWFyY2hEb2N1bWVudCh6
ZSwgbmV3IFBhdGgocGF0aFRvSmFyKSwgY2xhc3NGaWxlQnl0ZXMsIHBhcnRpY2lwYW50KTsNCisJ
CQkJZW50cnlEb2N1bWVudC5zZXRJbmRleChpbmRleCk7DQorCQkJCWlmIChvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIudXRpbC5VdGlsLmlzQ2xhc3NGaWxlTmFtZShlbnRyeURvY3Vt
ZW50LmdldFBhdGgoKSkpIHsNCisJCQkJCW5ldyBCaW5hcnlJbmRleGVyKGVudHJ5RG9jdW1lbnQp
LmluZGV4RG9jdW1lbnQoKTsNCisJCQkJfQ0KKwkJCX0NCisJCX0NCisJCXppcC5jbG9zZSgpOw0K
KwkJaW5kZXguc2F2ZSgpOw0KKwkJcmV0dXJuOw0KKwl9DQorDQorfQ0KZGlmZiAtLWdpdCBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9z
ZWFyY2gvaW5kZXhpbmcvSW5kZXhBbGxQcm9qZWN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNoL2luZGV4aW5nL0lu
ZGV4QWxsUHJvamVjdC5qYXZhCmluZGV4IDQzMTM2MjEuLjk2YWE5MDQgMTAwNjQ0Ci0tLSBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9z
ZWFyY2gvaW5kZXhpbmcvSW5kZXhBbGxQcm9qZWN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9pbmRleGlu
Zy9JbmRleEFsbFByb2plY3QuamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMDkgSUJNIENvcnBvcmF0aW9uIGFuZCBv
dGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTEgSUJNIENvcnBvcmF0aW9uIGFuZCBv
dGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2Nv
bXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1z
IG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVz
IHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC03Nyw3ICs3Nyw3IEBA
CiAJCQkJCWlmIChlbnRyeS5nZXRFbnRyeUtpbmQoKSA9PSBJQ2xhc3NwYXRoRW50cnkuQ1BFX0xJ
QlJBUlkgJiYgZW50cnkuZ2V0UGF0aCgpLmVxdWFscyhwcm9qZWN0UGF0aCkpIHsKIAkJCQkJCS8v
IHRoZSBwcm9qZWN0IGlzIGFsc28gYSBsaWJyYXJ5IGZvbGRlciAoc2VlIGh0dHBzOi8vYnVncy5l
Y2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD04OTgxNSkKIAkJCQkJCS8vIGVuc3VyZSBh
IGpvYiBleGlzdHMgdG8gaW5kZXggaXQgYXMgYSBiaW5hcnkgZm9sZGVyCi0JCQkJCQl0aGlzLm1h
bmFnZXIuaW5kZXhMaWJyYXJ5KHByb2plY3RQYXRoLCB0aGlzLnByb2plY3QpOworCQkJCQkJdGhp
cy5tYW5hZ2VyLmluZGV4TGlicmFyeShwcm9qZWN0UGF0aCwgdGhpcy5wcm9qZWN0LCAoKENsYXNz
cGF0aEVudHJ5KWVudHJ5KS5nZXRMaWJyYXJ5SW5kZXhMb2NhdGlvbigpKTsKIAkJCQkJCXJldHVy
biB0cnVlOwogCQkJCQl9CiAJCQkJfQpAQCAtMTA3LDcgKzEwNyw3IEBACiAJCQkJZm9yIChpbnQg
aSA9IDA7IGkgPCBtYXg7IGkrKykKIAkJCQkJaW5kZXhlZEZpbGVOYW1lcy5wdXQocGF0aHNbaV0s
IERFTEVURUQpOwogCQkJfQotCQkJZmluYWwgbG9uZyBpbmRleExhc3RNb2RpZmllZCA9IG1heCA9
PSAwID8gMEwgOiBpbmRleC5nZXRJbmRleEZpbGUoKS5sYXN0TW9kaWZpZWQoKTsKKwkJCWZpbmFs
IGxvbmcgaW5kZXhMYXN0TW9kaWZpZWQgPSBtYXggPT0gMCA/IDBMIDogaW5kZXguZ2V0SW5kZXhM
YXN0TW9kaWZpZWQoKTsKIAogCQkJSVdvcmtzcGFjZVJvb3Qgcm9vdCA9IHRoaXMucHJvamVjdC5n
ZXRXb3Jrc3BhY2UoKS5nZXRSb290KCk7CiAJCQlmb3IgKGludCBpID0gMDsgaSA8IHNvdXJjZUVu
dHJpZXNOdW1iZXI7IGkrKykgewpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2Vh
cmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9pbmRleGluZy9JbmRleEJp
bmFyeUZvbGRlci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9pbmRleGluZy9JbmRleEJpbmFyeUZvbGRlci5qYXZh
CmluZGV4IDdiYjkwZjkuLmIwNmUwZGYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gvaW5kZXhpbmcvSW5k
ZXhCaW5hcnlGb2xkZXIuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNoL2luZGV4aW5nL0luZGV4QmluYXJ5Rm9s
ZGVyLmphdmEKQEAgLTgwLDcgKzgwLDcgQEAKIAkJCQlmb3IgKGludCBpID0gMDsgaSA8IG1heDsg
aSsrKSB7CiAJCQkJCWluZGV4ZWRGaWxlTmFtZXMucHV0KHBhdGhzW2ldLCBERUxFVEVEKTsKIAkJ
CQl9Ci0JCQkJZmluYWwgbG9uZyBpbmRleExhc3RNb2RpZmllZCA9IGluZGV4LmdldEluZGV4Rmls
ZSgpLmxhc3RNb2RpZmllZCgpOworCQkJCWZpbmFsIGxvbmcgaW5kZXhMYXN0TW9kaWZpZWQgPSBp
bmRleC5nZXRJbmRleExhc3RNb2RpZmllZCgpOwogCQkJCXRoaXMuZm9sZGVyLmFjY2VwdCgKIAkJ
CQkJbmV3IElSZXNvdXJjZVByb3h5VmlzaXRvcigpIHsKIAkJCQkJCXB1YmxpYyBib29sZWFuIHZp
c2l0KElSZXNvdXJjZVByb3h5IHByb3h5KSB0aHJvd3MgQ29yZUV4Y2VwdGlvbiB7CmRpZmYgLS1n
aXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvcmUvc2VhcmNoL2luZGV4aW5nL0luZGV4TWFuYWdlci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9pbmRleGlu
Zy9JbmRleE1hbmFnZXIuamF2YQppbmRleCBmMDhjMjQ5Li42OGI0N2IwIDEwMDY0NAotLS0gYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUv
c2VhcmNoL2luZGV4aW5nL0luZGV4TWFuYWdlci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gvaW5kZXhpbmcv
SW5kZXhNYW5hZ2VyLmphdmEKQEAgLTEsNSArMSw1IEBACiAvKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KgotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEwIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJz
LgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJz
LgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55
aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0
aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlz
IGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdApAQCAtMTEsNiArMTEsNyBAQAogcGFj
a2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS5zZWFyY2guaW5kZXhpbmc7CiAKIGlt
cG9ydCBqYXZhLmlvLio7CitpbXBvcnQgamF2YS5uZXQuVVJMOwogaW1wb3J0IGphdmEudXRpbC4q
OwogaW1wb3J0IGphdmEudXRpbC56aXAuQ1JDMzI7CiAKQEAgLTU5LDYgKzYwLDcgQEAKIAlwdWJs
aWMgc3RhdGljIGZpbmFsIEludGVnZXIgVVBEQVRJTkdfU1RBVEUgPSBuZXcgSW50ZWdlcigxKTsK
IAlwdWJsaWMgc3RhdGljIGZpbmFsIEludGVnZXIgVU5LTk9XTl9TVEFURSA9IG5ldyBJbnRlZ2Vy
KDIpOwogCXB1YmxpYyBzdGF0aWMgZmluYWwgSW50ZWdlciBSRUJVSUxESU5HX1NUQVRFID0gbmV3
IEludGVnZXIoMyk7CisJcHVibGljIHN0YXRpYyBmaW5hbCBJbnRlZ2VyIFJFVVNFX1NUQVRFID0g
bmV3IEludGVnZXIoNCk7CiAJCiAJLy8gc2VhcmNoIHBhcnRpY2lwYW50cyB3aG8gcmVnaXN0ZXIg
aW5kZXhlcyB3aXRoIHRoZSBpbmRleCBtYW5hZ2VyCiAJcHJpdmF0ZSBTaW1wbGVMb29rdXBUYWJs
ZSBwYXJ0aWNpcGFudHNDb250YWluZXJzID0gbnVsbDsKQEAgLTcwLDEwICs3MiwxMCBAQAogCXB1
YmxpYyBzeW5jaHJvbml6ZWQgdm9pZCBhYm91dFRvVXBkYXRlSW5kZXgoSVBhdGggY29udGFpbmVy
UGF0aCwgSW50ZWdlciBuZXdJbmRleFN0YXRlKSB7CiAJLy8gbmV3SW5kZXhTdGF0ZSBpcyBlaXRo
ZXIgVVBEQVRJTkdfU1RBVEUgb3IgUkVCVUlMRElOR19TVEFURQogCS8vIG11c3QgdGFnIHRoZSBp
bmRleCBhcyBpbmNvbnNpc3RlbnQsIGluIGNhc2Ugd2UgZXhpdCBiZWZvcmUgdGhlIHVwZGF0ZSBq
b2IgaXMgc3RhcnRlZAotCUlQYXRoIGluZGV4TG9jYXRpb24gPSBjb21wdXRlSW5kZXhMb2NhdGlv
bihjb250YWluZXJQYXRoKTsKKwlJbmRleExvY2F0aW9uIGluZGV4TG9jYXRpb24gPSBjb21wdXRl
SW5kZXhMb2NhdGlvbihjb250YWluZXJQYXRoKTsKIAlPYmplY3Qgc3RhdGUgPSBnZXRJbmRleFN0
YXRlcygpLmdldChpbmRleExvY2F0aW9uKTsKIAlJbnRlZ2VyIGN1cnJlbnRJbmRleFN0YXRlID0g
c3RhdGUgPT0gbnVsbCA/IFVOS05PV05fU1RBVEUgOiAoSW50ZWdlcikgc3RhdGU7Ci0JaWYgKGN1
cnJlbnRJbmRleFN0YXRlLmVxdWFscyhSRUJVSUxESU5HX1NUQVRFKSkgcmV0dXJuOyAvLyBhbHJl
YWR5IHJlYnVpbGRpbmcgdGhlIGluZGV4CisJaWYgKGN1cnJlbnRJbmRleFN0YXRlLmNvbXBhcmVU
byhSRUJVSUxESU5HX1NUQVRFKSA+PSAwKSByZXR1cm47IC8vIGFscmVhZHkgcmVidWlsZGluZyB0
aGUgaW5kZXgKIAogCWludCBjb21wYXJlID0gbmV3SW5kZXhTdGF0ZS5jb21wYXJlVG8oY3VycmVu
dEluZGV4U3RhdGUpOwogCWlmIChjb21wYXJlID4gMCkgewpAQCAtOTIsNyArOTQsNyBAQAogCWlm
IChKYXZhQ29yZS5nZXRQbHVnaW4oKSA9PSBudWxsKSByZXR1cm47CiAJU2VhcmNoUGFydGljaXBh
bnQgcGFydGljaXBhbnQgPSBTZWFyY2hFbmdpbmUuZ2V0RGVmYXVsdFNlYXJjaFBhcnRpY2lwYW50
KCk7CiAJU2VhcmNoRG9jdW1lbnQgZG9jdW1lbnQgPSBwYXJ0aWNpcGFudC5nZXREb2N1bWVudChy
ZXNvdXJjZS5nZXRGdWxsUGF0aCgpLnRvU3RyaW5nKCkpOwotCUlQYXRoIGluZGV4TG9jYXRpb24g
PSBjb21wdXRlSW5kZXhMb2NhdGlvbihjb250YWluZXJQYXRoKTsKKwlJbmRleExvY2F0aW9uIGlu
ZGV4TG9jYXRpb24gPSBjb21wdXRlSW5kZXhMb2NhdGlvbihjb250YWluZXJQYXRoKTsKIAlzY2hl
ZHVsZURvY3VtZW50SW5kZXhpbmcoZG9jdW1lbnQsIGNvbnRhaW5lclBhdGgsIGluZGV4TG9jYXRp
b24sIHBhcnRpY2lwYW50KTsKIH0KIC8qKgpAQCAtMTA0LDcgKzEwNiw3IEBACiAJU2VhcmNoUGFy
dGljaXBhbnQgcGFydGljaXBhbnQgPSBTZWFyY2hFbmdpbmUuZ2V0RGVmYXVsdFNlYXJjaFBhcnRp
Y2lwYW50KCk7CiAJU2VhcmNoRG9jdW1lbnQgZG9jdW1lbnQgPSBwYXJ0aWNpcGFudC5nZXREb2N1
bWVudChyZXNvdXJjZS5nZXRGdWxsUGF0aCgpLnRvU3RyaW5nKCkpOwogCWRvY3VtZW50LnNldFBh
cnNlcihwYXJzZXIpOwotCUlQYXRoIGluZGV4TG9jYXRpb24gPSBjb21wdXRlSW5kZXhMb2NhdGlv
bihjb250YWluZXJQYXRoKTsKKwlJbmRleExvY2F0aW9uIGluZGV4TG9jYXRpb24gPSBjb21wdXRl
SW5kZXhMb2NhdGlvbihjb250YWluZXJQYXRoKTsKIAlzY2hlZHVsZURvY3VtZW50SW5kZXhpbmco
ZG9jdW1lbnQsIGNvbnRhaW5lclBhdGgsIGluZGV4TG9jYXRpb24sIHBhcnRpY2lwYW50KTsKIH0K
IC8qCkBAIC0xMTYsMTcgKzExOCwxNyBAQAogCVBhdHRlcm5TZWFyY2hKb2Igam9iID0gbmV3IFBh
dHRlcm5TZWFyY2hKb2IobnVsbCwgU2VhcmNoRW5naW5lLmdldERlZmF1bHRTZWFyY2hQYXJ0aWNp
cGFudCgpLCBzY29wZSwgbnVsbCk7CiAJSW5kZXhbXSBzZWxlY3RlZEluZGV4ZXMgPSBqb2IuZ2V0
SW5kZXhlcyhudWxsKTsKIAlmb3IgKGludCBpID0gMCwgbCA9IHNlbGVjdGVkSW5kZXhlcy5sZW5n
dGg7IGkgPCBsOyBpKyspIHsKLQkJU3RyaW5nIHBhdGggPSBzZWxlY3RlZEluZGV4ZXNbaV0uZ2V0
SW5kZXhGaWxlKCkuZ2V0QWJzb2x1dGVQYXRoKCk7Ci0JCWtub3duUGF0aHMuYWRkKHBhdGgpOwor
CQlJbmRleExvY2F0aW9uIEluZGV4TG9jYXRpb24gPSBzZWxlY3RlZEluZGV4ZXNbaV0uZ2V0SW5k
ZXhMb2NhdGlvbigpOworCQlrbm93blBhdGhzLmFkZChJbmRleExvY2F0aW9uKTsKIAl9CiAKIAlp
ZiAodGhpcy5pbmRleFN0YXRlcyAhPSBudWxsKSB7CiAJCU9iamVjdFtdIGtleXMgPSB0aGlzLmlu
ZGV4U3RhdGVzLmtleVRhYmxlOwotCQlJUGF0aFtdIGxvY2F0aW9ucyA9IG5ldyBJUGF0aFt0aGlz
LmluZGV4U3RhdGVzLmVsZW1lbnRTaXplXTsKKwkJSW5kZXhMb2NhdGlvbltdIGxvY2F0aW9ucyA9
IG5ldyBJbmRleExvY2F0aW9uW3RoaXMuaW5kZXhTdGF0ZXMuZWxlbWVudFNpemVdOwogCQlpbnQg
Y291bnQgPSAwOwogCQlmb3IgKGludCBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsr
KSB7Ci0JCQlJUGF0aCBrZXkgPSAoSVBhdGgpIGtleXNbaV07Ci0JCQlpZiAoa2V5ICE9IG51bGwg
JiYgIWtub3duUGF0aHMuaW5jbHVkZXMoa2V5LnRvT1NTdHJpbmcoKSkpCisJCQlJbmRleExvY2F0
aW9uIGtleSA9IChJbmRleExvY2F0aW9uKSBrZXlzW2ldOworCQkJaWYgKGtleSAhPSBudWxsICYm
ICFrbm93blBhdGhzLmluY2x1ZGVzKGtleSkpCiAJCQkJbG9jYXRpb25zW2NvdW50KytdID0ga2V5
OwogCQl9CiAJCWlmIChjb3VudCA+IDApCkBAIC0xMzQsOCArMTM2LDggQEAKIAl9CiAJZGVsZXRl
SW5kZXhGaWxlcyhrbm93blBhdGhzKTsKIH0KLXB1YmxpYyBzeW5jaHJvbml6ZWQgSVBhdGggY29t
cHV0ZUluZGV4TG9jYXRpb24oSVBhdGggY29udGFpbmVyUGF0aCkgewotCUlQYXRoIGluZGV4TG9j
YXRpb24gPSAoSVBhdGgpIHRoaXMuaW5kZXhMb2NhdGlvbnMuZ2V0KGNvbnRhaW5lclBhdGgpOwor
cHVibGljIHN5bmNocm9uaXplZCBJbmRleExvY2F0aW9uIGNvbXB1dGVJbmRleExvY2F0aW9uKElQ
YXRoIGNvbnRhaW5lclBhdGgpIHsKKwlJbmRleExvY2F0aW9uIGluZGV4TG9jYXRpb24gPSAoSW5k
ZXhMb2NhdGlvbikgdGhpcy5pbmRleExvY2F0aW9ucy5nZXQoY29udGFpbmVyUGF0aCk7CiAJaWYg
KGluZGV4TG9jYXRpb24gPT0gbnVsbCkgewogCQlTdHJpbmcgcGF0aFN0cmluZyA9IGNvbnRhaW5l
clBhdGgudG9PU1N0cmluZygpOwogCQlDUkMzMiBjaGVja3N1bUNhbGN1bGF0b3IgPSBuZXcgQ1JD
MzIoKTsKQEAgLTE0NCw3ICsxNDYsNyBAQAogCQlpZiAoVkVSQk9TRSkKIAkJCVV0aWwudmVyYm9z
ZSgiLT4gaW5kZXggbmFtZSBmb3IgIiArIHBhdGhTdHJpbmcgKyAiIGlzICIgKyBmaWxlTmFtZSk7
IC8vJE5PTi1OTFMtMSQgLy8kTk9OLU5MUy0yJAogCQkvLyB0byBzaGFyZSB0aGUgaW5kZXhMb2Nh
dGlvbiBiZXR3ZWVuIHRoZSBpbmRleExvY2F0aW9ucyBhbmQgaW5kZXhTdGF0ZXMgdGFibGVzLCBn
ZXQgdGhlIGtleSBmcm9tIHRoZSBpbmRleFN0YXRlcyB0YWJsZQotCQlpbmRleExvY2F0aW9uID0g
KElQYXRoKSBnZXRJbmRleFN0YXRlcygpLmdldEtleShnZXRKYXZhUGx1Z2luV29ya2luZ0xvY2F0
aW9uKCkuYXBwZW5kKGZpbGVOYW1lKSk7CisJCWluZGV4TG9jYXRpb24gPSAoSW5kZXhMb2NhdGlv
bikgZ2V0SW5kZXhTdGF0ZXMoKS5nZXRLZXkobmV3IEZsYXRGaWxlSW5kZXgobmV3IEZpbGUoZ2V0
U2F2ZWRJbmRleGVzRGlyZWN0b3J5KCksIGZpbGVOYW1lKSkpOwogCQl0aGlzLmluZGV4TG9jYXRp
b25zLnB1dChjb250YWluZXJQYXRoLCBpbmRleExvY2F0aW9uKTsKIAl9CiAJcmV0dXJuIGluZGV4
TG9jYXRpb247CkBAIC0xNjEsNyArMTYzLDcgQEAKIAogCWZvciAoaW50IGkgPSAwLCBsID0gaW5k
ZXhlc0ZpbGVzLmxlbmd0aDsgaSA8IGw7IGkrKykgewogCQlTdHJpbmcgZmlsZU5hbWUgPSBpbmRl
eGVzRmlsZXNbaV0uZ2V0QWJzb2x1dGVQYXRoKCk7Ci0JCWlmIChwYXRoc1RvS2VlcCAhPSBudWxs
ICYmIHBhdGhzVG9LZWVwLmluY2x1ZGVzKGZpbGVOYW1lKSkgY29udGludWU7CisJCWlmIChwYXRo
c1RvS2VlcCAhPSBudWxsICYmIHBhdGhzVG9LZWVwLmluY2x1ZGVzKG5ldyBGbGF0RmlsZUluZGV4
KGluZGV4ZXNGaWxlc1tpXSkpKSBjb250aW51ZTsKIAkJU3RyaW5nIHN1ZmZpeCA9ICIuaW5kZXgi
OyAvLyROT04tTkxTLTEkCiAJCWlmIChmaWxlTmFtZS5yZWdpb25NYXRjaGVzKHRydWUsIGZpbGVO
YW1lLmxlbmd0aCgpIC0gc3VmZml4Lmxlbmd0aCgpLCBzdWZmaXgsIDAsIHN1ZmZpeC5sZW5ndGgo
KSkpIHsKIAkJCWlmIChWRVJCT1NFIHx8IERFQlVHKQpAQCAtMTczLDcgKzE3NSw3IEBACiAvKgog
ICogQ3JlYXRlcyBhbiBlbXB0eSBpbmRleCBhdCB0aGUgZ2l2ZW4gbG9jYXRpb24sIGZvciB0aGUg
Z2l2ZW4gY29udGFpbmVyIHBhdGgsIGlmIG5vbmUgZXhpc3QuCiAgKi8KLXB1YmxpYyBzeW5jaHJv
bml6ZWQgdm9pZCBlbnN1cmVJbmRleEV4aXN0cyhJUGF0aCBpbmRleExvY2F0aW9uLCBJUGF0aCBj
b250YWluZXJQYXRoKSB7CitwdWJsaWMgc3luY2hyb25pemVkIHZvaWQgZW5zdXJlSW5kZXhFeGlz
dHMoSW5kZXhMb2NhdGlvbiBpbmRleExvY2F0aW9uLCBJUGF0aCBjb250YWluZXJQYXRoKSB7CiAJ
U2ltcGxlTG9va3VwVGFibGUgc3RhdGVzID0gZ2V0SW5kZXhTdGF0ZXMoKTsKIAlPYmplY3Qgc3Rh
dGUgPSBzdGF0ZXMuZ2V0KGluZGV4TG9jYXRpb24pOwogCWlmIChzdGF0ZSA9PSBudWxsKSB7CkBA
IC0yMDcsNyArMjA5LDcgQEAKICAqIEBwYXJhbSBpbmRleExvY2F0aW9uIFRoZSBwYXRoIG9mIHRo
ZSBpbmRleCBmaWxlCiAgKiBAcmV0dXJuIFRoZSBjb3JyZXNwb25kaW5nIGluZGV4IG9yIDxjb2Rl
Pm51bGw8L2NvZGU+IGlmIG5vdCBmb3VuZAogICovCi1wdWJsaWMgc3luY2hyb25pemVkIEluZGV4
IGdldEluZGV4KElQYXRoIGluZGV4TG9jYXRpb24pIHsKK3B1YmxpYyBzeW5jaHJvbml6ZWQgSW5k
ZXggZ2V0SW5kZXgoSW5kZXhMb2NhdGlvbiBpbmRleExvY2F0aW9uKSB7CiAJcmV0dXJuIChJbmRl
eCkgdGhpcy5pbmRleGVzLmdldChpbmRleExvY2F0aW9uKTsgLy8gaXMgbnVsbCBpZiB1bmtub3du
LCBjYWxsIGlmIHRoZSBjb250YWluZXJQYXRoIG11c3QgYmUgY29tcHV0ZWQKIH0KIC8qKgpAQCAt
MjE5LDcgKzIyMSw3IEBACiAgKiBXYXJuaW5nOiBEb2VzIG5vdCBjaGVjayB3aGV0aGVyIGluZGV4
IGlzIGNvbnNpc3RlbnQgKG5vdCBiZWluZyB1c2VkKQogICovCiBwdWJsaWMgc3luY2hyb25pemVk
IEluZGV4IGdldEluZGV4KElQYXRoIGNvbnRhaW5lclBhdGgsIGJvb2xlYW4gcmV1c2VFeGlzdGlu
Z0ZpbGUsIGJvb2xlYW4gY3JlYXRlSWZNaXNzaW5nKSB7Ci0JSVBhdGggaW5kZXhMb2NhdGlvbiA9
IGNvbXB1dGVJbmRleExvY2F0aW9uKGNvbnRhaW5lclBhdGgpOworCUluZGV4TG9jYXRpb24gaW5k
ZXhMb2NhdGlvbiA9IGNvbXB1dGVJbmRleExvY2F0aW9uKGNvbnRhaW5lclBhdGgpOwogCXJldHVy
biBnZXRJbmRleChjb250YWluZXJQYXRoLCBpbmRleExvY2F0aW9uLCByZXVzZUV4aXN0aW5nRmls
ZSwgY3JlYXRlSWZNaXNzaW5nKTsKIH0KIC8qKgpAQCAtMjMwLDcgKzIzMiw3IEBACiAgKgogICog
V2FybmluZzogRG9lcyBub3QgY2hlY2sgd2hldGhlciBpbmRleCBpcyBjb25zaXN0ZW50IChub3Qg
YmVpbmcgdXNlZCkKICAqLwotcHVibGljIHN5bmNocm9uaXplZCBJbmRleCBnZXRJbmRleChJUGF0
aCBjb250YWluZXJQYXRoLCBJUGF0aCBpbmRleExvY2F0aW9uLCBib29sZWFuIHJldXNlRXhpc3Rp
bmdGaWxlLCBib29sZWFuIGNyZWF0ZUlmTWlzc2luZykgeworcHVibGljIHN5bmNocm9uaXplZCBJ
bmRleCBnZXRJbmRleChJUGF0aCBjb250YWluZXJQYXRoLCBJbmRleExvY2F0aW9uIGluZGV4TG9j
YXRpb24sIGJvb2xlYW4gcmV1c2VFeGlzdGluZ0ZpbGUsIGJvb2xlYW4gY3JlYXRlSWZNaXNzaW5n
KSB7CiAJLy8gUGF0aCBpcyBhbHJlYWR5IGNhbm9uaWNhbCBwZXIgY29uc3RydWN0aW9uCiAJSW5k
ZXggaW5kZXggPSBnZXRJbmRleChpbmRleExvY2F0aW9uKTsKIAlpZiAoaW5kZXggPT0gbnVsbCkg
ewpAQCAtMjQ1LDE5ICsyNDcsMTcgQEAKIAogCQkvLyBpbmRleCBpc24ndCBjYWNoZWQsIGNvbnNp
ZGVyIHJldXNpbmcgYW4gZXhpc3RpbmcgaW5kZXggZmlsZQogCQlTdHJpbmcgY29udGFpbmVyUGF0
aFN0cmluZyA9IGNvbnRhaW5lclBhdGguZ2V0RGV2aWNlKCkgPT0gbnVsbCA/IGNvbnRhaW5lclBh
dGgudG9TdHJpbmcoKSA6IGNvbnRhaW5lclBhdGgudG9PU1N0cmluZygpOwotCQlTdHJpbmcgaW5k
ZXhMb2NhdGlvblN0cmluZyA9IGluZGV4TG9jYXRpb24udG9PU1N0cmluZygpOwogCQlpZiAocmV1
c2VFeGlzdGluZ0ZpbGUpIHsKLQkJCUZpbGUgaW5kZXhGaWxlID0gbmV3IEZpbGUoaW5kZXhMb2Nh
dGlvblN0cmluZyk7Ci0JCQlpZiAoaW5kZXhGaWxlLmV4aXN0cygpKSB7IC8vIGNoZWNrIGJlZm9y
ZSBjcmVhdGluZyBpbmRleCBzbyBhcyB0byBhdm9pZCBjcmVhdGluZyBhIG5ldyBlbXB0eSBpbmRl
eCBpZiBmaWxlIGlzIG1pc3NpbmcKKwkJCWlmIChpbmRleExvY2F0aW9uLmV4aXN0cygpKSB7IC8v
IGNoZWNrIGJlZm9yZSBjcmVhdGluZyBpbmRleCBzbyBhcyB0byBhdm9pZCBjcmVhdGluZyBhIG5l
dyBlbXB0eSBpbmRleCBpZiBmaWxlIGlzIG1pc3NpbmcKIAkJCQl0cnkgewotCQkJCQlpbmRleCA9
IG5ldyBJbmRleChpbmRleExvY2F0aW9uU3RyaW5nLCBjb250YWluZXJQYXRoU3RyaW5nLCB0cnVl
IC8qcmV1c2UgaW5kZXggZmlsZSovKTsKKwkJCQkJaW5kZXggPSBuZXcgSW5kZXgoaW5kZXhMb2Nh
dGlvbiwgY29udGFpbmVyUGF0aFN0cmluZywgdHJ1ZSAvKnJldXNlIGluZGV4IGZpbGUqLyk7CiAJ
CQkJCXRoaXMuaW5kZXhlcy5wdXQoaW5kZXhMb2NhdGlvbiwgaW5kZXgpOwogCQkJCQlyZXR1cm4g
aW5kZXg7CiAJCQkJfSBjYXRjaCAoSU9FeGNlcHRpb24gZSkgewogCQkJCQkvLyBmYWlsZWQgdG8g
cmVhZCB0aGUgZXhpc3RpbmcgZmlsZSBvciBpdHMgbm8gbG9uZ2VyIGNvbXBhdGlibGUKLQkJCQkJ
aWYgKGN1cnJlbnRJbmRleFN0YXRlICE9IFJFQlVJTERJTkdfU1RBVEUpIHsgLy8gcmVidWlsZCBp
bmRleCBpZiBleGlzdGluZyBmaWxlIGlzIGNvcnJ1cHQsIHVubGVzcyB0aGUgaW5kZXggaXMgYWxy
ZWFkeSBiZWluZyByZWJ1aWx0CisJCQkJCWlmIChjdXJyZW50SW5kZXhTdGF0ZSAhPSBSRUJVSUxE
SU5HX1NUQVRFIHx8IGN1cnJlbnRJbmRleFN0YXRlICE9IFJFVVNFX1NUQVRFKSB7IC8vIHJlYnVp
bGQgaW5kZXggaWYgZXhpc3RpbmcgZmlsZSBpcyBjb3JydXB0LCB1bmxlc3MgdGhlIGluZGV4IGlz
IGFscmVhZHkgYmVpbmcgcmVidWlsdAogCQkJCQkJaWYgKFZFUkJPU0UpCi0JCQkJCQkJVXRpbC52
ZXJib3NlKCItPiBjYW5ub3QgcmV1c2UgZXhpc3RpbmcgaW5kZXg6ICIraW5kZXhMb2NhdGlvblN0
cmluZysiIHBhdGg6ICIrY29udGFpbmVyUGF0aFN0cmluZyk7IC8vJE5PTi1OTFMtMSQgLy8kTk9O
LU5MUy0yJAorCQkJCQkJCVV0aWwudmVyYm9zZSgiLT4gY2Fubm90IHJldXNlIGV4aXN0aW5nIGlu
ZGV4OiAiK2luZGV4TG9jYXRpb24rIiBwYXRoOiAiK2NvbnRhaW5lclBhdGhTdHJpbmcpOyAvLyRO
T04tTkxTLTEkIC8vJE5PTi1OTFMtMiQKIAkJCQkJCXJlYnVpbGRJbmRleChpbmRleExvY2F0aW9u
LCBjb250YWluZXJQYXRoKTsKIAkJCQkJCXJldHVybiBudWxsOwogCQkJCQl9CkBAIC0yNjgsMTgg
KzI2OCwyNyBAQAogCQkJCXJlYnVpbGRJbmRleChpbmRleExvY2F0aW9uLCBjb250YWluZXJQYXRo
KTsKIAkJCQlyZXR1cm4gbnVsbDsKIAkJCX0KKwkJCWlmIChjdXJyZW50SW5kZXhTdGF0ZSA9PSBS
RVVTRV9TVEFURSkgeworCQkJCS8vIHN1cHBvc2VkIHRvIGJlIGluIHJldXNlIHN0YXRlIGJ1dCBl
cnJvciBpbiB0aGUgaW5kZXggZmlsZSwgc28gcmVpbmRleC4KKwkJCQlpZiAoVkVSQk9TRSkKKwkJ
CQkJVXRpbC52ZXJib3NlKCItPiBjYW5ub3QgcmV1c2UgZ2l2ZW4gaW5kZXg6ICIraW5kZXhMb2Nh
dGlvbisiIHBhdGg6ICIrY29udGFpbmVyUGF0aFN0cmluZyk7IC8vJE5PTi1OTFMtMSQgLy8kTk9O
LU5MUy0yJAorCQkJCXRoaXMuaW5kZXhMb2NhdGlvbnMucHV0KGNvbnRhaW5lclBhdGgsIG51bGwp
OworCQkJCWluZGV4TG9jYXRpb24gPSBjb21wdXRlSW5kZXhMb2NhdGlvbihjb250YWluZXJQYXRo
KTsKKwkJCQlyZWJ1aWxkSW5kZXgoaW5kZXhMb2NhdGlvbiwgY29udGFpbmVyUGF0aCk7CisJCQkJ
cmV0dXJuIG51bGw7CisJCQl9CiAJCX0KIAkJLy8gaW5kZXggd2Fzbid0IGZvdW5kIG9uIGRpc2ss
IGNvbnNpZGVyIGNyZWF0aW5nIGFuIGVtcHR5IG5ldyBvbmUKIAkJaWYgKGNyZWF0ZUlmTWlzc2lu
ZykgewogCQkJdHJ5IHsKIAkJCQlpZiAoVkVSQk9TRSkKLQkJCQkJVXRpbC52ZXJib3NlKCItPiBj
cmVhdGUgZW1wdHkgaW5kZXg6ICIraW5kZXhMb2NhdGlvblN0cmluZysiIHBhdGg6ICIrY29udGFp
bmVyUGF0aFN0cmluZyk7IC8vJE5PTi1OTFMtMSQgLy8kTk9OLU5MUy0yJAotCQkJCWluZGV4ID0g
bmV3IEluZGV4KGluZGV4TG9jYXRpb25TdHJpbmcsIGNvbnRhaW5lclBhdGhTdHJpbmcsIGZhbHNl
IC8qZG8gbm90IHJldXNlIGluZGV4IGZpbGUqLyk7CisJCQkJCVV0aWwudmVyYm9zZSgiLT4gY3Jl
YXRlIGVtcHR5IGluZGV4OiAiK2luZGV4TG9jYXRpb24rIiBwYXRoOiAiK2NvbnRhaW5lclBhdGhT
dHJpbmcpOyAvLyROT04tTkxTLTEkIC8vJE5PTi1OTFMtMiQKKwkJCQlpbmRleCA9IG5ldyBJbmRl
eChpbmRleExvY2F0aW9uLCBjb250YWluZXJQYXRoU3RyaW5nLCBmYWxzZSAvKmRvIG5vdCByZXVz
ZSBpbmRleCBmaWxlKi8pOwogCQkJCXRoaXMuaW5kZXhlcy5wdXQoaW5kZXhMb2NhdGlvbiwgaW5k
ZXgpOwogCQkJCXJldHVybiBpbmRleDsKIAkJCX0gY2F0Y2ggKElPRXhjZXB0aW9uIGUpIHsKIAkJ
CQlpZiAoVkVSQk9TRSkKLQkJCQkJVXRpbC52ZXJib3NlKCItPiB1bmFibGUgdG8gY3JlYXRlIGVt
cHR5IGluZGV4OiAiK2luZGV4TG9jYXRpb25TdHJpbmcrIiBwYXRoOiAiK2NvbnRhaW5lclBhdGhT
dHJpbmcpOyAvLyROT04tTkxTLTEkIC8vJE5PTi1OTFMtMiQKKwkJCQkJVXRpbC52ZXJib3NlKCIt
PiB1bmFibGUgdG8gY3JlYXRlIGVtcHR5IGluZGV4OiAiK2luZGV4TG9jYXRpb24rIiBwYXRoOiAi
K2NvbnRhaW5lclBhdGhTdHJpbmcpOyAvLyROT04tTkxTLTEkIC8vJE5PTi1OTFMtMiQKIAkJCQkv
LyBUaGUgZmlsZSBjb3VsZCBub3QgYmUgY3JlYXRlZC4gUG9zc2libGUgcmVhc29uOiB0aGUgcHJv
amVjdCBoYXMgYmVlbiBkZWxldGVkLgogCQkJCXJldHVybiBudWxsOwogCQkJfQpAQCAtMjk1LDcg
KzMwNCw3IEBACiAgKiBAcGFyYW0gbG9jYXRpb25zIFRoZSBsaXN0IG9mIG9mIHRoZSBpbmRleCBm
aWxlcyBwYXRoCiAgKiBAcmV0dXJuIFRoZSBjb3JyZXNwb25kaW5nIGluZGV4ZXMgbGlzdC4KICAq
LwotcHVibGljIEluZGV4W10gZ2V0SW5kZXhlcyhJUGF0aFtdIGxvY2F0aW9ucywgSVByb2dyZXNz
TW9uaXRvciBwcm9ncmVzc01vbml0b3IpIHsKK3B1YmxpYyBJbmRleFtdIGdldEluZGV4ZXMoSW5k
ZXhMb2NhdGlvbltdIGxvY2F0aW9ucywgSVByb2dyZXNzTW9uaXRvciBwcm9ncmVzc01vbml0b3Ip
IHsKIAkvLyBhY3F1aXJlIHRoZSBpbi1tZW1vcnkgaW5kZXhlcyBvbiB0aGUgZmx5CiAJaW50IGxl
bmd0aCA9IGxvY2F0aW9ucy5sZW5ndGg7CiAJSW5kZXhbXSBsb2NhdGVkSW5kZXhlcyA9IG5ldyBJ
bmRleFtsZW5ndGhdOwpAQCAtMzA4LDcgKzMxNyw3IEBACiAJCQl0aHJvdyBuZXcgT3BlcmF0aW9u
Q2FuY2VsZWRFeGNlcHRpb24oKTsKIAkJfQogCQkvLyBtYXkgdHJpZ2dlciBzb21lIGluZGV4IHJl
Y3JlYXRpb24gd29yawotCQlJUGF0aCBpbmRleExvY2F0aW9uID0gbG9jYXRpb25zW2ldOworCQlJ
bmRleExvY2F0aW9uIGluZGV4TG9jYXRpb24gPSBsb2NhdGlvbnNbaV07CiAJCUluZGV4IGluZGV4
ID0gZ2V0SW5kZXgoaW5kZXhMb2NhdGlvbik7CiAJCWlmIChpbmRleCA9PSBudWxsKSB7CiAJCQkv
LyBvbmx5IG5lZWQgY29udGFpbmVyUGF0aCBpZiB0aGUgaW5kZXggbXVzdCBiZSBidWlsdApAQCAt
MzMwLDE4ICszMzksMTYgQEAKIAkJCQkJaW5kZXggPSBudWxsOwogCQkJCX0KIAkJCX0gZWxzZSB7
Ci0JCQkJaWYgKCFnZXRKYXZhUGx1Z2luV29ya2luZ0xvY2F0aW9uKCkuaXNQcmVmaXhPZihpbmRl
eExvY2F0aW9uKSkgeyAvLyB0aGUgaW5kZXggYmVsb25ncyB0byBub24tamR0IHNlYXJjaCBwYXJ0
aWNpcGFudAotCQkJCQlpZiAoaW5kZXhMb2NhdGlvbi50b0ZpbGUoKS5leGlzdHMoKSkgeyAKLQkJ
CQkJCXRyeSB7Ci0JCQkJCQkJSVBhdGggY29udGFpbmVyID0gZ2V0UGFydGljaXBhbnRzQ29udGFp
bmVyKGluZGV4TG9jYXRpb24pOwotCQkJCQkJCWlmIChjb250YWluZXIgIT0gbnVsbCkgewotCQkJ
CQkJCQlpbmRleCA9IG5ldyBJbmRleChpbmRleExvY2F0aW9uLnRvT1NTdHJpbmcoKSwgY29udGFp
bmVyLnRvT1NTdHJpbmcoKSwgdHJ1ZSAvKnJldXNlIGluZGV4IGZpbGUqLyk7Ci0JCQkJCQkJCXRo
aXMuaW5kZXhlcy5wdXQoaW5kZXhMb2NhdGlvbiwgaW5kZXgpOwotCQkJCQkJCX0KLQkJCQkJCX0g
Y2F0Y2ggKElPRXhjZXB0aW9uIGUpIHsKLQkJCQkJCQkvLyBpZ25vcmUKKwkJCQlpZiAoaW5kZXhM
b2NhdGlvbi5pc1BhcnRpY2lwYW50SW5kZXgoKSAmJiBpbmRleExvY2F0aW9uLmV4aXN0cygpKSB7
IC8vIHRoZSBpbmRleCBiZWxvbmdzIHRvIG5vbi1qZHQgc2VhcmNoIHBhcnRpY2lwYW50CisJCQkJ
CXRyeSB7CisJCQkJCQlJUGF0aCBjb250YWluZXIgPSBnZXRQYXJ0aWNpcGFudHNDb250YWluZXIo
aW5kZXhMb2NhdGlvbik7CisJCQkJCQlpZiAoY29udGFpbmVyICE9IG51bGwpIHsKKwkJCQkJCQlp
bmRleCA9IG5ldyBJbmRleChpbmRleExvY2F0aW9uLCBjb250YWluZXIudG9PU1N0cmluZygpLCB0
cnVlIC8qcmV1c2UgaW5kZXggZmlsZSovKTsKKwkJCQkJCQl0aGlzLmluZGV4ZXMucHV0KGluZGV4
TG9jYXRpb24sIGluZGV4KTsKIAkJCQkJCX0KLQkJCQkJfSAKKwkJCQkJfSBjYXRjaCAoSU9FeGNl
cHRpb24gZSkgeworCQkJCQkJLy8gaWdub3JlCisJCQkJCX0KIAkJCQl9CiAJCQl9CiAJCX0KQEAg
LTM1OCw3ICszNjUsNyBAQAogCXJldHVybiBsb2NhdGVkSW5kZXhlczsKIH0KIHB1YmxpYyBzeW5j
aHJvbml6ZWQgSW5kZXggZ2V0SW5kZXhGb3JVcGRhdGUoSVBhdGggY29udGFpbmVyUGF0aCwgYm9v
bGVhbiByZXVzZUV4aXN0aW5nRmlsZSwgYm9vbGVhbiBjcmVhdGVJZk1pc3NpbmcpIHsKLQlJUGF0
aCBpbmRleExvY2F0aW9uID0gY29tcHV0ZUluZGV4TG9jYXRpb24oY29udGFpbmVyUGF0aCk7CisJ
SW5kZXhMb2NhdGlvbiBpbmRleExvY2F0aW9uID0gY29tcHV0ZUluZGV4TG9jYXRpb24oY29udGFp
bmVyUGF0aCk7CiAJaWYgKGdldEluZGV4U3RhdGVzKCkuZ2V0KGluZGV4TG9jYXRpb24pID09IFJF
QlVJTERJTkdfU1RBVEUpCiAJCXJldHVybiBnZXRJbmRleChjb250YWluZXJQYXRoLCBpbmRleExv
Y2F0aW9uLCByZXVzZUV4aXN0aW5nRmlsZSwgY3JlYXRlSWZNaXNzaW5nKTsKIApAQCAtMzY4LDEz
ICszNzUsMTMgQEAKIAlpZiAodGhpcy5pbmRleFN0YXRlcyAhPSBudWxsKSByZXR1cm4gdGhpcy5p
bmRleFN0YXRlczsKIAogCXRoaXMuaW5kZXhTdGF0ZXMgPSBuZXcgU2ltcGxlTG9va3VwVGFibGUo
KTsKLQlJUGF0aCBpbmRleGVzRGlyZWN0b3J5UGF0aCA9IGdldEphdmFQbHVnaW5Xb3JraW5nTG9j
YXRpb24oKTsKLQljaGFyW11bXSBzYXZlZE5hbWVzID0gcmVhZEluZGV4U3RhdGUoaW5kZXhlc0Rp
cmVjdG9yeVBhdGgudG9PU1N0cmluZygpKTsKKwlGaWxlIGluZGV4ZXNEaXJlY3RvcnlQYXRoID0g
Z2V0U2F2ZWRJbmRleGVzRGlyZWN0b3J5KCk7CisJY2hhcltdW10gc2F2ZWROYW1lcyA9IHJlYWRJ
bmRleFN0YXRlKGdldEphdmFQbHVnaW5Xb3JraW5nTG9jYXRpb24oKS50b09TU3RyaW5nKCkpOwog
CWlmIChzYXZlZE5hbWVzICE9IG51bGwpIHsKIAkJZm9yIChpbnQgaSA9IDEsIGwgPSBzYXZlZE5h
bWVzLmxlbmd0aDsgaSA8IGw7IGkrKykgeyAvLyBmaXJzdCBuYW1lIGlzIHNhdmVkIHNpZ25hdHVy
ZSwgc2VlIHJlYWRJbmRleFN0YXRlKCkKIAkJCWNoYXJbXSBzYXZlZE5hbWUgPSBzYXZlZE5hbWVz
W2ldOwogCQkJaWYgKHNhdmVkTmFtZS5sZW5ndGggPiAwKSB7Ci0JCQkJSVBhdGggaW5kZXhMb2Nh
dGlvbiA9IGluZGV4ZXNEaXJlY3RvcnlQYXRoLmFwcGVuZChuZXcgU3RyaW5nKHNhdmVkTmFtZSkp
OyAvLyBzaGFyZXMgaW5kZXhlc0RpcmVjdG9yeVBhdGgncyBzZWdtZW50cworCQkJCUluZGV4TG9j
YXRpb24gaW5kZXhMb2NhdGlvbiA9IG5ldyBGbGF0RmlsZUluZGV4KG5ldyBGaWxlKGluZGV4ZXNE
aXJlY3RvcnlQYXRoLCBTdHJpbmcudmFsdWVPZihzYXZlZE5hbWUpKSk7IC8vIHNoYXJlcyBpbmRl
eGVzRGlyZWN0b3J5UGF0aCdzIHNlZ21lbnRzCiAJCQkJaWYgKFZFUkJPU0UpCiAJCQkJCVV0aWwu
dmVyYm9zZSgiUmVhZGluZyBzYXZlZCBpbmRleCBmaWxlICIgKyBpbmRleExvY2F0aW9uKTsgLy8k
Tk9OLU5MUy0xJAogCQkJCXRoaXMuaW5kZXhTdGF0ZXMucHV0KGluZGV4TG9jYXRpb24sIFNBVkVE
X1NUQVRFKTsKQEAgLTM4OSw3ICszOTYsNyBAQAogCX0KIAlyZXR1cm4gdGhpcy5pbmRleFN0YXRl
czsKIH0KLXByaXZhdGUgSVBhdGggZ2V0UGFydGljaXBhbnRzQ29udGFpbmVyKElQYXRoIGluZGV4
TG9jYXRpb24pIHsKK3ByaXZhdGUgSVBhdGggZ2V0UGFydGljaXBhbnRzQ29udGFpbmVyKEluZGV4
TG9jYXRpb24gaW5kZXhMb2NhdGlvbikgewogCWlmICh0aGlzLnBhcnRpY2lwYW50c0NvbnRhaW5l
cnMgPT0gbnVsbCkgewogCQlyZWFkUGFydGljaXBhbnRzSW5kZXhOYW1lc0ZpbGUoKTsKIAl9CkBA
IC00NzQsNyArNDgxLDcgQEAKIAkJZm9yIChpbnQgaSA9IDA7IGkgPCBlbnRyaWVzLmxlbmd0aDsg
aSsrKSB7CiAJCQlJQ2xhc3NwYXRoRW50cnkgZW50cnk9IGVudHJpZXNbaV07CiAJCQlpZiAoZW50
cnkuZ2V0RW50cnlLaW5kKCkgPT0gSUNsYXNzcGF0aEVudHJ5LkNQRV9MSUJSQVJZKQotCQkJCWlu
ZGV4TGlicmFyeShlbnRyeS5nZXRQYXRoKCksIHByb2plY3QpOworCQkJCWluZGV4TGlicmFyeShl
bnRyeS5nZXRQYXRoKCksIHByb2plY3QsICgoQ2xhc3NwYXRoRW50cnkpZW50cnkpLmdldExpYnJh
cnlJbmRleExvY2F0aW9uKCkpOwogCQl9CiAJfSBjYXRjaChKYXZhTW9kZWxFeGNlcHRpb24gZSl7
IC8vIGNhbm5vdCByZXRyaWV2ZSBjbGFzc3BhdGggaW5mbwogCX0KQEAgLTQ4OCwxNiArNDk1LDE2
IEBACiAgKiBUcmlnZ2VyIGFkZGl0aW9uIG9mIGEgbGlicmFyeSB0byBhbiBpbmRleAogICogTm90
ZTogdGhlIGFjdHVhbCBvcGVyYXRpb24gaXMgcGVyZm9ybWVkIGluIGJhY2tncm91bmQKICAqLwot
cHVibGljIHZvaWQgaW5kZXhMaWJyYXJ5KElQYXRoIHBhdGgsIElQcm9qZWN0IHJlcXVlc3RpbmdQ
cm9qZWN0KSB7CitwdWJsaWMgdm9pZCBpbmRleExpYnJhcnkoSVBhdGggcGF0aCwgSVByb2plY3Qg
cmVxdWVzdGluZ1Byb2plY3QsIFVSTCBpbmRleFVSTCkgewogCS8vIHJlcXVlc3RpbmdQcm9qZWN0
IGlzIG5vIGxvbmdlciB1c2VkIHRvIGNhbmNlbCBqb2JzIGJ1dCBsZWF2ZSBpdCBoZXJlIGp1c3Qg
aW4gY2FzZQorCUluZGV4TG9jYXRpb24gaW5kZXhGaWxlID0gaW5kZXhVUkwgIT0gbnVsbCA/IElu
ZGV4TG9jYXRpb24uY3JlYXRlSW5kZXhMb2NhdGlvbihpbmRleFVSTCk6IG51bGw7CiAJaWYgKEph
dmFDb3JlLmdldFBsdWdpbigpID09IG51bGwpIHJldHVybjsKLQotCU9iamVjdCB0YXJnZXQgPSBK
YXZhTW9kZWwuZ2V0VGFyZ2V0KHBhdGgsIHRydWUpOwogCUluZGV4UmVxdWVzdCByZXF1ZXN0ID0g
bnVsbDsKKwlPYmplY3QgdGFyZ2V0ID0gSmF2YU1vZGVsLmdldFRhcmdldChwYXRoLCB0cnVlKTsK
IAlpZiAodGFyZ2V0IGluc3RhbmNlb2YgSUZpbGUpIHsKLQkJcmVxdWVzdCA9IG5ldyBBZGRKYXJG
aWxlVG9JbmRleCgoSUZpbGUpIHRhcmdldCwgdGhpcyk7CisJCXJlcXVlc3QgPSBuZXcgQWRkSmFy
RmlsZVRvSW5kZXgoKElGaWxlKSB0YXJnZXQsIGluZGV4RmlsZSwgdGhpcyk7CiAJfSBlbHNlIGlm
ICh0YXJnZXQgaW5zdGFuY2VvZiBGaWxlKSB7Ci0JCXJlcXVlc3QgPSBuZXcgQWRkSmFyRmlsZVRv
SW5kZXgocGF0aCwgdGhpcyk7CisJCXJlcXVlc3QgPSBuZXcgQWRkSmFyRmlsZVRvSW5kZXgocGF0
aCwgaW5kZXhGaWxlLCB0aGlzKTsKIAl9IGVsc2UgaWYgKHRhcmdldCBpbnN0YW5jZW9mIElDb250
YWluZXIpIHsKIAkJcmVxdWVzdCA9IG5ldyBJbmRleEJpbmFyeUZvbGRlcigoSUNvbnRhaW5lcikg
dGFyZ2V0LCB0aGlzKTsKIAl9IGVsc2UgewpAQCAtNTA4LDYgKzUxNSwxOSBAQAogCWlmICghaXNK
b2JXYWl0aW5nKHJlcXVlc3QpKQogCQlyZXF1ZXN0KHJlcXVlc3QpOwogfQorCitzeW5jaHJvbml6
ZWQgYm9vbGVhbiBhZGRJbmRleChJUGF0aCBjb250YWluZXJQYXRoLCBJbmRleExvY2F0aW9uIGlu
ZGV4RmlsZSkgeworCXRoaXMuaW5kZXhTdGF0ZXMucHV0KGluZGV4RmlsZSwgUkVVU0VfU1RBVEUp
OworCXRoaXMuaW5kZXhMb2NhdGlvbnMucHV0KGNvbnRhaW5lclBhdGgsIGluZGV4RmlsZSk7CisJ
SW5kZXggaW5kZXggPSBnZXRJbmRleChjb250YWluZXJQYXRoLCBpbmRleEZpbGUsIHRydWUsIGZh
bHNlKTsKKwlpZiAoaW5kZXggPT0gbnVsbCkgeworCQlpbmRleEZpbGUuY2xvc2UoKTsKKwkJdGhp
cy5pbmRleExvY2F0aW9ucy5wdXQoY29udGFpbmVyUGF0aCwgbnVsbCk7CisJCXJldHVybiBmYWxz
ZTsKKwl9CisJcmV0dXJuIHRydWU7Cit9CisKIC8qKgogICogSW5kZXggdGhlIGNvbnRlbnQgb2Yg
dGhlIGdpdmVuIHNvdXJjZSBmb2xkZXIuCiAgKi8KQEAgLTUyMiw3ICs1NDIsNyBAQAogCXJlcXVl
c3QobmV3IEFkZEZvbGRlclRvSW5kZXgoc291cmNlRm9sZGVyLCBwcm9qZWN0LCBpbmNsdXNpb25Q
YXR0ZXJucywgZXhjbHVzaW9uUGF0dGVybnMsIHRoaXMpKTsKIH0KIHB1YmxpYyBzeW5jaHJvbml6
ZWQgdm9pZCBqb2JXYXNDYW5jZWxsZWQoSVBhdGggY29udGFpbmVyUGF0aCkgewotCUlQYXRoIGlu
ZGV4TG9jYXRpb24gPSBjb21wdXRlSW5kZXhMb2NhdGlvbihjb250YWluZXJQYXRoKTsKKwlJbmRl
eExvY2F0aW9uIGluZGV4TG9jYXRpb24gPSBjb21wdXRlSW5kZXhMb2NhdGlvbihjb250YWluZXJQ
YXRoKTsKIAlJbmRleCBpbmRleCA9IGdldEluZGV4KGluZGV4TG9jYXRpb24pOwogCWlmIChpbmRl
eCAhPSBudWxsKSB7CiAJCWluZGV4Lm1vbml0b3IgPSBudWxsOwpAQCAtNTY4LDcgKzU4OCw3IEBA
CiAJfQogCXJldHVybiBudWxsOwogfQotcHJpdmF0ZSB2b2lkIHJlYnVpbGRJbmRleChJUGF0aCBp
bmRleExvY2F0aW9uLCBJUGF0aCBjb250YWluZXJQYXRoKSB7Citwcml2YXRlIHZvaWQgcmVidWls
ZEluZGV4KEluZGV4TG9jYXRpb24gaW5kZXhMb2NhdGlvbiwgSVBhdGggY29udGFpbmVyUGF0aCkg
ewogCU9iamVjdCB0YXJnZXQgPSBKYXZhTW9kZWwuZ2V0VGFyZ2V0KGNvbnRhaW5lclBhdGgsIHRy
dWUpOwogCWlmICh0YXJnZXQgPT0gbnVsbCkgcmV0dXJuOwogCkBAIC01ODQsOSArNjA0LDkgQEAK
IAl9IGVsc2UgaWYgKHRhcmdldCBpbnN0YW5jZW9mIElGb2xkZXIpIHsKIAkJcmVxdWVzdCA9IG5l
dyBJbmRleEJpbmFyeUZvbGRlcigoSUZvbGRlcikgdGFyZ2V0LCB0aGlzKTsKIAl9IGVsc2UgaWYg
KHRhcmdldCBpbnN0YW5jZW9mIElGaWxlKSB7Ci0JCXJlcXVlc3QgPSBuZXcgQWRkSmFyRmlsZVRv
SW5kZXgoKElGaWxlKSB0YXJnZXQsIHRoaXMpOworCQlyZXF1ZXN0ID0gbmV3IEFkZEphckZpbGVU
b0luZGV4KChJRmlsZSkgdGFyZ2V0LCBudWxsLCB0aGlzKTsKIAl9IGVsc2UgaWYgKHRhcmdldCBp
bnN0YW5jZW9mIEZpbGUpIHsKLQkJcmVxdWVzdCA9IG5ldyBBZGRKYXJGaWxlVG9JbmRleChjb250
YWluZXJQYXRoLCB0aGlzKTsKKwkJcmVxdWVzdCA9IG5ldyBBZGRKYXJGaWxlVG9JbmRleChjb250
YWluZXJQYXRoLCBudWxsLCB0aGlzKTsKIAl9CiAJaWYgKHJlcXVlc3QgIT0gbnVsbCkKIAkJcmVx
dWVzdChyZXF1ZXN0KTsKQEAgLTYwMSwxMyArNjIxLDEzIEBACiAJU3RyaW5nIGNvbnRhaW5lclBh
dGhTdHJpbmcgPSBjb250YWluZXJQYXRoLmdldERldmljZSgpID09IG51bGwgPyBjb250YWluZXJQ
YXRoLnRvU3RyaW5nKCkgOiBjb250YWluZXJQYXRoLnRvT1NTdHJpbmcoKTsKIAl0cnkgewogCQkv
LyBQYXRoIGlzIGFscmVhZHkgY2Fub25pY2FsCi0JCUlQYXRoIGluZGV4TG9jYXRpb24gPSBjb21w
dXRlSW5kZXhMb2NhdGlvbihjb250YWluZXJQYXRoKTsKKwkJSW5kZXhMb2NhdGlvbiBpbmRleExv
Y2F0aW9uID0gY29tcHV0ZUluZGV4TG9jYXRpb24oY29udGFpbmVyUGF0aCk7CiAJCUluZGV4IGlu
ZGV4ID0gZ2V0SW5kZXgoaW5kZXhMb2NhdGlvbik7CiAJCVJlYWRXcml0ZU1vbml0b3IgbW9uaXRv
ciA9IGluZGV4ID09IG51bGwgPyBudWxsIDogaW5kZXgubW9uaXRvcjsKIAogCQlpZiAoVkVSQk9T
RSkKIAkJCVV0aWwudmVyYm9zZSgiLT4gcmVjcmVhdGluZyBpbmRleDogIitpbmRleExvY2F0aW9u
KyIgZm9yIHBhdGg6ICIrY29udGFpbmVyUGF0aFN0cmluZyk7IC8vJE5PTi1OTFMtMSQgLy8kTk9O
LU5MUy0yJAotCQlpbmRleCA9IG5ldyBJbmRleChpbmRleExvY2F0aW9uLnRvT1NTdHJpbmcoKSwg
Y29udGFpbmVyUGF0aFN0cmluZywgZmFsc2UgLypkbyBub3QgcmV1c2UgaW5kZXggZmlsZSovKTsK
KwkJaW5kZXggPSBuZXcgSW5kZXgoaW5kZXhMb2NhdGlvbiwgY29udGFpbmVyUGF0aFN0cmluZywg
ZmFsc2UgLypkbyBub3QgcmV1c2UgaW5kZXggZmlsZSovKTsKIAkJdGhpcy5pbmRleGVzLnB1dChp
bmRleExvY2F0aW9uLCBpbmRleCk7CiAJCWluZGV4Lm1vbml0b3IgPSBtb25pdG9yOwogCQlyZXR1
cm4gaW5kZXg7CkBAIC02MzQsNyArNjU0LDcgQEAKIHB1YmxpYyBzeW5jaHJvbml6ZWQgdm9pZCBy
ZW1vdmVJbmRleChJUGF0aCBjb250YWluZXJQYXRoKSB7CiAJaWYgKFZFUkJPU0UgfHwgREVCVUcp
CiAJCVV0aWwudmVyYm9zZSgicmVtb3ZpbmcgaW5kZXggIiArIGNvbnRhaW5lclBhdGgpOyAvLyRO
T04tTkxTLTEkCi0JSVBhdGggaW5kZXhMb2NhdGlvbiA9IGNvbXB1dGVJbmRleExvY2F0aW9uKGNv
bnRhaW5lclBhdGgpOworCUluZGV4TG9jYXRpb24gaW5kZXhMb2NhdGlvbiA9IGNvbXB1dGVJbmRl
eExvY2F0aW9uKGNvbnRhaW5lclBhdGgpOwogCUluZGV4IGluZGV4ID0gZ2V0SW5kZXgoaW5kZXhM
b2NhdGlvbik7CiAJRmlsZSBpbmRleEZpbGUgPSBudWxsOwogCWlmIChpbmRleCAhPSBudWxsKSB7
CkBAIC02NDIsOCArNjYyLDExIEBACiAJCWluZGV4RmlsZSA9IGluZGV4LmdldEluZGV4RmlsZSgp
OwogCX0KIAlpZiAoaW5kZXhGaWxlID09IG51bGwpCi0JCWluZGV4RmlsZSA9IG5ldyBGaWxlKGlu
ZGV4TG9jYXRpb24udG9PU1N0cmluZygpKTsgLy8gaW5kZXggaXMgbm90IGNhY2hlZCB5ZXQsIGJ1
dCBzdGlsbCB3YW50IHRvIGRlbGV0ZSB0aGUgZmlsZQotCWlmIChpbmRleEZpbGUuZXhpc3RzKCkp
IHsKKwkJaW5kZXhGaWxlID0gaW5kZXhMb2NhdGlvbi5nZXRJbmRleEZpbGUoKTsgLy8gaW5kZXgg
aXMgbm90IGNhY2hlZCB5ZXQsIGJ1dCBzdGlsbCB3YW50IHRvIGRlbGV0ZSB0aGUgZmlsZQorCWlm
ICh0aGlzLmluZGV4U3RhdGVzLmdldChpbmRleExvY2F0aW9uKSA9PSBSRVVTRV9TVEFURSkgewor
CQlpbmRleExvY2F0aW9uLmNsb3NlKCk7CisJCXRoaXMuaW5kZXhMb2NhdGlvbnMucHV0KGNvbnRh
aW5lclBhdGgsIG51bGwpOworCX0gZWxzZSBpZiAoaW5kZXhGaWxlICE9IG51bGwgJiYgaW5kZXhG
aWxlLmV4aXN0cygpKSB7CiAJCWlmIChERUJVRykKIAkJCVV0aWwudmVyYm9zZSgicmVtb3Zpbmcg
aW5kZXggZmlsZSAiICsgaW5kZXhGaWxlKTsgLy8kTk9OLU5MUy0xJAogCQlpbmRleEZpbGUuZGVs
ZXRlKCk7CkBAIC02NTksMjQgKzY4MiwyNSBAQAogCQlVdGlsLnZlcmJvc2UoInJlbW92aW5nIGlu
ZGV4IHBhdGggIiArIHBhdGgpOyAvLyROT04tTkxTLTEkCiAJT2JqZWN0W10ga2V5VGFibGUgPSB0
aGlzLmluZGV4ZXMua2V5VGFibGU7CiAJT2JqZWN0W10gdmFsdWVUYWJsZSA9IHRoaXMuaW5kZXhl
cy52YWx1ZVRhYmxlOwotCUlQYXRoW10gbG9jYXRpb25zID0gbnVsbDsKKwlJbmRleExvY2F0aW9u
W10gbG9jYXRpb25zID0gbnVsbDsKIAlpbnQgbWF4ID0gdGhpcy5pbmRleGVzLmVsZW1lbnRTaXpl
OwogCWludCBjb3VudCA9IDA7CiAJZm9yIChpbnQgaSA9IDAsIGwgPSBrZXlUYWJsZS5sZW5ndGg7
IGkgPCBsOyBpKyspIHsKLQkJSVBhdGggaW5kZXhMb2NhdGlvbiA9IChJUGF0aCkga2V5VGFibGVb
aV07CisJCUluZGV4TG9jYXRpb24gaW5kZXhMb2NhdGlvbiA9IChJbmRleExvY2F0aW9uKSBrZXlU
YWJsZVtpXTsKIAkJaWYgKGluZGV4TG9jYXRpb24gPT0gbnVsbCkKIAkJCWNvbnRpbnVlOwotCQlp
ZiAocGF0aC5pc1ByZWZpeE9mKGluZGV4TG9jYXRpb24pKSB7CisJCWlmIChwYXRoLmlzUHJlZml4
T2YobmV3IFBhdGgoaW5kZXhMb2NhdGlvbi5nZXRGaWxlUGF0aCgpKSkpIHsKIAkJCUluZGV4IGlu
ZGV4ID0gKEluZGV4KSB2YWx1ZVRhYmxlW2ldOwogCQkJaW5kZXgubW9uaXRvciA9IG51bGw7CiAJ
CQlpZiAobG9jYXRpb25zID09IG51bGwpCi0JCQkJbG9jYXRpb25zID0gbmV3IElQYXRoW21heF07
CisJCQkJbG9jYXRpb25zID0gbmV3IEluZGV4TG9jYXRpb25bbWF4XTsKIAkJCWxvY2F0aW9uc1tj
b3VudCsrXSA9IGluZGV4TG9jYXRpb247Ci0JCQlGaWxlIGluZGV4RmlsZSA9IGluZGV4LmdldElu
ZGV4RmlsZSgpOwotCQkJaWYgKGluZGV4RmlsZS5leGlzdHMoKSkgeworCQkJaWYgKHRoaXMuaW5k
ZXhTdGF0ZXMuZ2V0KGluZGV4TG9jYXRpb24pID09IFJFVVNFX1NUQVRFKSB7CisJCQkJaW5kZXhM
b2NhdGlvbi5jbG9zZSgpOworCQkJfSBlbHNlIHsKIAkJCQlpZiAoREVCVUcpCi0JCQkJCVV0aWwu
dmVyYm9zZSgicmVtb3ZpbmcgaW5kZXggZmlsZSAiICsgaW5kZXhGaWxlKTsgLy8kTk9OLU5MUy0x
JAotCQkJCWluZGV4RmlsZS5kZWxldGUoKTsKKwkJCQkJVXRpbC52ZXJib3NlKCJyZW1vdmluZyBp
bmRleCBmaWxlICIgKyBpbmRleExvY2F0aW9uKTsgLy8kTk9OLU5MUy0xJAorCQkJCWluZGV4TG9j
YXRpb24uZGVsZXRlKCk7CiAJCQl9CiAJCX0gZWxzZSB7CiAJCQltYXgtLTsKQEAgLTY4Niw5ICs3
MTAsMTUgQEAKIAkJZm9yIChpbnQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKQogCQkJdGhpcy5pbmRl
eGVzLnJlbW92ZUtleShsb2NhdGlvbnNbaV0pOwogCQlyZW1vdmVJbmRleGVzU3RhdGUobG9jYXRp
b25zKTsKLQkJaWYgKHRoaXMucGFydGljaXBhbnRzQ29udGFpbmVycyAhPSBudWxsICYmIHRoaXMu
cGFydGljaXBhbnRzQ29udGFpbmVycy5nZXQocGF0aC50b09TU3RyaW5nKCkpICE9IG51bGwpIHsK
LQkJCXRoaXMucGFydGljaXBhbnRzQ29udGFpbmVycy5yZW1vdmVLZXkocGF0aC50b09TU3RyaW5n
KCkpOwkKLQkJCXdyaXRlUGFydGljaXBhbnRzSW5kZXhOYW1lc0ZpbGUoKTsKKwkJaWYgKHRoaXMu
cGFydGljaXBhbnRzQ29udGFpbmVycyAhPSBudWxsKSB7CisJCQlib29sZWFuIHVwZGF0ZSA9IGZh
bHNlOworCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7CisJCQkJaWYgKHRoaXMu
cGFydGljaXBhbnRzQ29udGFpbmVycy5nZXQobG9jYXRpb25zW2ldKSAhPSBudWxsKSB7CisJCQkJ
CXVwZGF0ZSA9IHRydWU7CisJCQkJCXRoaXMucGFydGljaXBhbnRzQ29udGFpbmVycy5yZW1vdmVL
ZXkobG9jYXRpb25zW2ldKTsKKwkJCQl9CisJCQl9CisJCQlpZiAodXBkYXRlKSB3cml0ZVBhcnRp
Y2lwYW50c0luZGV4TmFtZXNGaWxlKCk7CiAJCX0KIAl9CiB9CkBAIC03NDYsNyArNzc2LDcgQEAK
IAlTdHJpbmcgY29udGFpbmVyUGF0aFN0cmluZyA9IGNvbnRhaW5lclBhdGguZ2V0RGV2aWNlKCkg
PT0gbnVsbCA/IGNvbnRhaW5lclBhdGgudG9TdHJpbmcoKSA6IGNvbnRhaW5lclBhdGgudG9PU1N0
cmluZygpOwogCXRyeSB7CiAJCS8vIFBhdGggaXMgYWxyZWFkeSBjYW5vbmljYWwKLQkJSVBhdGgg
aW5kZXhMb2NhdGlvbiA9IGNvbXB1dGVJbmRleExvY2F0aW9uKGNvbnRhaW5lclBhdGgpOworCQlJ
bmRleExvY2F0aW9uIGluZGV4TG9jYXRpb24gPSBjb21wdXRlSW5kZXhMb2NhdGlvbihjb250YWlu
ZXJQYXRoKTsKIAkJSW5kZXggaW5kZXggPSBnZXRJbmRleChpbmRleExvY2F0aW9uKTsKIAkJaWYg
KFZFUkJPU0UpIHsKIAkJCVV0aWwudmVyYm9zZSgiLT4gcmVzZXRpbmcgaW5kZXg6ICIraW5kZXhM
b2NhdGlvbisiIGZvciBwYXRoOiAiK2NvbnRhaW5lclBhdGhTdHJpbmcpOyAvLyROT04tTkxTLTEk
IC8vJE5PTi1OTFMtMiQKQEAgLTc3MCw3ICs4MDAsNyBAQAogCS8vIG11c3QgaGF2ZSBwZXJtaXNz
aW9uIHRvIHdyaXRlIGZyb20gdGhlIHdyaXRlIG1vbml0b3IKIAlpZiAoaW5kZXguaGFzQ2hhbmdl
ZCgpKSB7CiAJCWlmIChWRVJCT1NFKQotCQkJVXRpbC52ZXJib3NlKCItPiBzYXZpbmcgaW5kZXgg
IiArIGluZGV4LmdldEluZGV4RmlsZSgpKTsgLy8kTk9OLU5MUy0xJAorCQkJVXRpbC52ZXJib3Nl
KCItPiBzYXZpbmcgaW5kZXggIiArIGluZGV4LmdldEluZGV4TG9jYXRpb24oKSk7IC8vJE5PTi1O
TFMtMSQKIAkJaW5kZXguc2F2ZSgpOwogCX0KIAlzeW5jaHJvbml6ZWQgKHRoaXMpIHsKQEAgLTc4
Miw3ICs4MTIsNyBAQAogCQkJCQlpZiAoKChJbmRleFJlcXVlc3QpIGpvYikuY29udGFpbmVyUGF0
aC5lcXVhbHMoY29udGFpbmVyUGF0aCkpIHJldHVybjsKIAkJCX0KIAkJfQotCQlJUGF0aCBpbmRl
eExvY2F0aW9uID0gY29tcHV0ZUluZGV4TG9jYXRpb24oY29udGFpbmVyUGF0aCk7CisJCUluZGV4
TG9jYXRpb24gaW5kZXhMb2NhdGlvbiA9IGNvbXB1dGVJbmRleExvY2F0aW9uKGNvbnRhaW5lclBh
dGgpOwogCQl1cGRhdGVJbmRleFN0YXRlKGluZGV4TG9jYXRpb24sIFNBVkVEX1NUQVRFKTsKIAl9
CiB9CkBAIC04MzcsMjAgKzg2NywyMSBAQAogCX0KIAl0aGlzLm5lZWRUb1NhdmUgPSAhYWxsU2F2
ZWQ7CiB9Ci1wdWJsaWMgdm9pZCBzY2hlZHVsZURvY3VtZW50SW5kZXhpbmcoZmluYWwgU2VhcmNo
RG9jdW1lbnQgc2VhcmNoRG9jdW1lbnQsIElQYXRoIGNvbnRhaW5lciwgZmluYWwgSVBhdGggaW5k
ZXhMb2NhdGlvbiwgZmluYWwgU2VhcmNoUGFydGljaXBhbnQgc2VhcmNoUGFydGljaXBhbnQpIHsK
K3B1YmxpYyB2b2lkIHNjaGVkdWxlRG9jdW1lbnRJbmRleGluZyhmaW5hbCBTZWFyY2hEb2N1bWVu
dCBzZWFyY2hEb2N1bWVudCwgSVBhdGggY29udGFpbmVyLCBmaW5hbCBJbmRleExvY2F0aW9uIGlu
ZGV4TG9jYXRpb24sIGZpbmFsIFNlYXJjaFBhcnRpY2lwYW50IHNlYXJjaFBhcnRpY2lwYW50KSB7
CiAJcmVxdWVzdChuZXcgSW5kZXhSZXF1ZXN0KGNvbnRhaW5lciwgdGhpcykgewogCQlwdWJsaWMg
Ym9vbGVhbiBleGVjdXRlKElQcm9ncmVzc01vbml0b3IgcHJvZ3Jlc3NNb25pdG9yKSB7CiAJCQlp
ZiAodGhpcy5pc0NhbmNlbGxlZCB8fCBwcm9ncmVzc01vbml0b3IgIT0gbnVsbCAmJiBwcm9ncmVz
c01vbml0b3IuaXNDYW5jZWxlZCgpKSByZXR1cm4gdHJ1ZTsKIAogCQkJLyogZW5zdXJlIG5vIGNv
bmN1cnJlbnQgd3JpdGUgYWNjZXNzIHRvIGluZGV4ICovCi0JCQlJbmRleCBpbmRleCA9IGdldElu
ZGV4KHRoaXMuY29udGFpbmVyUGF0aCwgaW5kZXhMb2NhdGlvbiwgdHJ1ZSwgLypyZXVzZSBpbmRl
eCBmaWxlKi8gdHJ1ZSAvKmNyZWF0ZSBpZiBub25lKi8pOworCQkJSW5kZXggaW5kZXg7CisJCQlp
bmRleCA9IGdldEluZGV4KHRoaXMuY29udGFpbmVyUGF0aCwgaW5kZXhMb2NhdGlvbiwgdHJ1ZSwg
LypyZXVzZSBpbmRleCBmaWxlKi8gdHJ1ZSAvKmNyZWF0ZSBpZiBub25lKi8pOwogCQkJaWYgKGlu
ZGV4ID09IG51bGwpIHJldHVybiB0cnVlOwogCQkJUmVhZFdyaXRlTW9uaXRvciBtb25pdG9yID0g
aW5kZXgubW9uaXRvcjsKIAkJCWlmIChtb25pdG9yID09IG51bGwpIHJldHVybiB0cnVlOyAvLyBp
bmRleCBnb3QgZGVsZXRlZCBzaW5jZSBhY3F1aXJlZAogCiAJCQl0cnkgewogCQkJCW1vbml0b3Iu
ZW50ZXJXcml0ZSgpOyAvLyBhc2sgcGVybWlzc2lvbiB0byB3cml0ZQotCQkJCWluZGV4RG9jdW1l
bnQoc2VhcmNoRG9jdW1lbnQsIHNlYXJjaFBhcnRpY2lwYW50LCBpbmRleCwgaW5kZXhMb2NhdGlv
bik7CisJCQkJaW5kZXhEb2N1bWVudChzZWFyY2hEb2N1bWVudCwgc2VhcmNoUGFydGljaXBhbnQs
IGluZGV4LCBuZXcgUGF0aChpbmRleExvY2F0aW9uLmdldEZpbGVQYXRoKCkpKTsKIAkJCX0gZmlu
YWxseSB7CiAJCQkJbW9uaXRvci5leGl0V3JpdGUoKTsgLy8gZnJlZSB3cml0ZSBsb2NrCiAJCQl9
CkBAIC05MDQsNyArOTM1LDkgQEAKIAkJCQkvLyBGaXJzdCBsaW5lIGlzIERpc2tJbmRleCBzaWdu
YXR1cmUgIChzZWUgd3JpdGVQYXJ0aWNpcGFudHNJbmRleE5hbWVzRmlsZSgpKQogCQkJCWlmIChE
aXNrSW5kZXguU0lHTkFUVVJFLmVxdWFscyhuZXcgU3RyaW5nKG5hbWVzWzBdKSkpIHsJCQkJCQog
CQkJCQlmb3IgKGludCBpID0gMSwgbCA9IG5hbWVzLmxlbmd0aC0xIDsgaSA8IGwgOyBpKz0yKSB7
Ci0JCQkJCQljb250YWluZXJzLnB1dChuZXcgUGF0aChuZXcgU3RyaW5nKG5hbWVzW2ldKSksIG5l
dyBQYXRoKG5ldyBTdHJpbmcobmFtZXNbaSsxXSkpKTsKKwkJCQkJCUluZGV4TG9jYXRpb24gaW5k
ZXhMb2NhdGlvbiA9IG5ldyBGbGF0RmlsZUluZGV4KG5ldyBGaWxlKG5ldyBTdHJpbmcobmFtZXNb
aV0pKSk7CisJCQkJCQlpbmRleExvY2F0aW9uLnNldFBhcnRpY2lwYW50SW5kZXgoKTsKKwkJCQkJ
CWNvbnRhaW5lcnMucHV0KGluZGV4TG9jYXRpb24sIG5ldyBQYXRoKG5ldyBTdHJpbmcobmFtZXNb
aSsxXSkpKTsKIAkJCQkJfQogCQkJCX0JCQkJCiAJCQl9CkBAIC05MTYsNyArOTQ5LDcgQEAKIAl0
aGlzLnBhcnRpY2lwYW50c0NvbnRhaW5lcnMgPSBjb250YWluZXJzOwogCXJldHVybjsKIH0KLXBy
aXZhdGUgc3luY2hyb25pemVkIHZvaWQgcmVtb3ZlSW5kZXhlc1N0YXRlKElQYXRoW10gbG9jYXRp
b25zKSB7Citwcml2YXRlIHN5bmNocm9uaXplZCB2b2lkIHJlbW92ZUluZGV4ZXNTdGF0ZShJbmRl
eExvY2F0aW9uW10gbG9jYXRpb25zKSB7CiAJZ2V0SW5kZXhTdGF0ZXMoKTsgLy8gZW5zdXJlIHRo
ZSBzdGF0ZXMgYXJlIGluaXRpYWxpemVkCiAJaW50IGxlbmd0aCA9IGxvY2F0aW9ucy5sZW5ndGg7
CiAJYm9vbGVhbiBjaGFuZ2VkID0gZmFsc2U7CkBAIC05MzMsOCArOTY2LDggQEAKIAogCXdyaXRl
U2F2ZWRJbmRleE5hbWVzRmlsZSgpOwogfQotcHJpdmF0ZSBzeW5jaHJvbml6ZWQgdm9pZCB1cGRh
dGVJbmRleFN0YXRlKElQYXRoIGluZGV4TG9jYXRpb24sIEludGVnZXIgaW5kZXhTdGF0ZSkgewot
CWlmIChpbmRleExvY2F0aW9uLmlzRW1wdHkoKSkKK3ByaXZhdGUgc3luY2hyb25pemVkIHZvaWQg
dXBkYXRlSW5kZXhTdGF0ZShJbmRleExvY2F0aW9uIGluZGV4TG9jYXRpb24sIEludGVnZXIgaW5k
ZXhTdGF0ZSkgeworCWlmIChpbmRleExvY2F0aW9uID09IG51bGwpCiAJCXRocm93IG5ldyBJbGxl
Z2FsQXJndW1lbnRFeGNlcHRpb24oKTsKIAogCWdldEluZGV4U3RhdGVzKCk7IC8vIGVuc3VyZSB0
aGUgc3RhdGVzIGFyZSBpbml0aWFsaXplZApAQCAtOTYyLDEyICs5OTUsMTQgQEAKIAl9CiAKIH0K
LXB1YmxpYyB2b2lkIHVwZGF0ZVBhcnRpY2lwYW50KElQYXRoIGluZGV4TG9jYXRpb24sIElQYXRo
IGNvbnRhaW5lclBhdGgpIHsKK3B1YmxpYyB2b2lkIHVwZGF0ZVBhcnRpY2lwYW50KElQYXRoIGlu
ZGV4UGF0aCwgSVBhdGggY29udGFpbmVyUGF0aCkgewogCWlmICh0aGlzLnBhcnRpY2lwYW50c0Nv
bnRhaW5lcnMgPT0gbnVsbCkgewogCQlyZWFkUGFydGljaXBhbnRzSW5kZXhOYW1lc0ZpbGUoKTsK
LQl9IAorCX0KKwlJbmRleExvY2F0aW9uIGluZGV4TG9jYXRpb24gPSBuZXcgRmxhdEZpbGVJbmRl
eChpbmRleFBhdGgudG9GaWxlKCkpOwogCWlmICh0aGlzLnBhcnRpY2lwYW50c0NvbnRhaW5lcnMu
Z2V0KGluZGV4TG9jYXRpb24pID09IG51bGwpIHsKIAkJdGhpcy5wYXJ0aWNpcGFudHNDb250YWlu
ZXJzLnB1dChpbmRleExvY2F0aW9uLCBjb250YWluZXJQYXRoKTsKKwkJaW5kZXhMb2NhdGlvbi5z
ZXRQYXJ0aWNpcGFudEluZGV4KCk7CiAJCXRoaXMucGFydGljaXBhbnRVcGRhdGVkICA9IHRydWU7
CiAJfQogfQpAQCAtMTAxNCw5ICsxMDQ5LDkgQEAKIAkJT2JqZWN0W10gaW5kZXhGaWxlcyA9IHRo
aXMucGFydGljaXBhbnRzQ29udGFpbmVycy5rZXlUYWJsZTsKIAkJT2JqZWN0W10gY29udGFpbmVy
cyA9IHRoaXMucGFydGljaXBhbnRzQ29udGFpbmVycy52YWx1ZVRhYmxlOwogCQlmb3IgKGludCBp
ID0gMCwgbCA9IGluZGV4RmlsZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7Ci0JCQlJUGF0aCBpbmRl
eEZpbGUgPSAoSVBhdGgpaW5kZXhGaWxlc1tpXTsKKwkJCUluZGV4TG9jYXRpb24gaW5kZXhGaWxl
ID0gKEluZGV4TG9jYXRpb24paW5kZXhGaWxlc1tpXTsKIAkJCWlmIChpbmRleEZpbGUgIT0gbnVs
bCkgewotCQkJCXdyaXRlci53cml0ZShpbmRleEZpbGUudG9PU1N0cmluZygpKTsKKwkJCQl3cml0
ZXIud3JpdGUoaW5kZXhGaWxlLmdldEluZGV4RmlsZSgpLmdldFBhdGgoKSk7CiAJCQkJd3JpdGVy
LndyaXRlKCdcbicpOwogCQkJCXdyaXRlci53cml0ZSgoKElQYXRoKWNvbnRhaW5lcnNbaV0pLnRv
T1NTdHJpbmcoKSk7CiAJCQkJd3JpdGVyLndyaXRlKCdcbicpOwpAQCAtMTA0Niw5ICsxMDgxLDkg
QEAKIAkJT2JqZWN0W10ga2V5cyA9IHRoaXMuaW5kZXhTdGF0ZXMua2V5VGFibGU7CiAJCU9iamVj
dFtdIHN0YXRlcyA9IHRoaXMuaW5kZXhTdGF0ZXMudmFsdWVUYWJsZTsKIAkJZm9yIChpbnQgaSA9
IDAsIGwgPSBzdGF0ZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7Ci0JCQlJUGF0aCBrZXkgPSAoSVBh
dGgpIGtleXNbaV07Ci0JCQlpZiAoa2V5ICE9IG51bGwgJiYgIWtleS5pc0VtcHR5KCkgJiYgc3Rh
dGVzW2ldID09IFNBVkVEX1NUQVRFKSB7Ci0JCQkJd3JpdGVyLndyaXRlKGtleS5sYXN0U2VnbWVu
dCgpKTsKKwkJCUluZGV4TG9jYXRpb24ga2V5ID0gKEluZGV4TG9jYXRpb24pIGtleXNbaV07CisJ
CQlpZiAoa2V5ICE9IG51bGwgJiYgc3RhdGVzW2ldID09IFNBVkVEX1NUQVRFKSB7CisJCQkJd3Jp
dGVyLndyaXRlKGtleS5maWxlTmFtZSgpKTsKIAkJCQl3cml0ZXIud3JpdGUoJ1xuJyk7CiAJCQl9
CiAJCX0=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>207847</attachid>
            <date>2011-12-02 10:11:00 -0500</date>
            <delta_ts>2011-12-02 10:11:08 -0500</delta_ts>
            <desc>Patch with core changes (without index in jar support)</desc>
            <filename>patchpart1.txt</filename>
            <type>text/plain</type>
            <size>76421</size>
            <attacher name="Satyam Kandula">satyam.kandula</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9tb2RlbC9KYXZhSW5kZXhUZXN0cy5qYXZhIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21v
ZGVsL0phdmFJbmRleFRlc3RzLmphdmEKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAw
MC4uYzE1NDc1ZgotLS0gL2Rldi9udWxsCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3Rz
Lm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9tb2RlbC9KYXZhSW5kZXhUZXN0
cy5qYXZhCkBAIC0wLDAgKzEsNzY1IEBACisvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgorICogQ29w
eXJpZ2h0IChjKSAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQWxsIHJpZ2h0
cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwor
ICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJs
aWMgTGljZW5zZSB2MS4wCisgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwg
YW5kIGlzIGF2YWlsYWJsZSBhdAorICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwt
djEwLmh0bWwKKyAqCisgKiBDb250cmlidXRvcnM6CisgKiAgICAgSUJNIENvcnBvcmF0aW9uIC0g
aW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCisgKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8K
K3BhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWw7CisKK2ltcG9ydCBqYXZh
LmlvLkZpbGU7CitpbXBvcnQgamF2YS5pby5JT0V4Y2VwdGlvbjsKKworaW1wb3J0IGp1bml0LmZy
YW1ld29yay5UZXN0OworCitpbXBvcnQgb3JnLmVjbGlwc2UuY29yZS5ydW50aW1lLkNvcmVFeGNl
cHRpb247CitpbXBvcnQgb3JnLmVjbGlwc2UuY29yZS5ydW50aW1lLklQYXRoOworaW1wb3J0IG9y
Zy5lY2xpcHNlLmNvcmUucnVudGltZS5QYXRoOworaW1wb3J0IG9yZy5lY2xpcHNlLmNvcmUucnVu
dGltZS5wcmVmZXJlbmNlcy5JRWNsaXBzZVByZWZlcmVuY2VzOworaW1wb3J0IG9yZy5lY2xpcHNl
LmNvcmUucnVudGltZS5wcmVmZXJlbmNlcy5JbnN0YW5jZVNjb3BlOworaW1wb3J0IG9yZy5lY2xp
cHNlLmpkdC5jb3JlLkNsYXNzcGF0aENvbnRhaW5lckluaXRpYWxpemVyOworaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5jb3JlLklDbGFzc3BhdGhBdHRyaWJ1dGU7CitpbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmNvcmUuSUNsYXNzcGF0aEVudHJ5OworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLklK
YXZhRWxlbWVudDsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5JSmF2YVByb2plY3Q7Citp
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuSmF2YUNvcmU7CitpbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmNvcmUuaW5kZXguKjsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5zZWFyY2guU2Vh
cmNoRW5naW5lOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLkphdmFNb2Rl
bE1hbmFnZXI7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvcmUuVXNlckxpYnJh
cnlDbGFzc3BhdGhDb250YWluZXI7CitpbXBvcnQgb3JnLm9zZ2kuc2VydmljZS5wcmVmcy5CYWNr
aW5nU3RvcmVFeGNlcHRpb247CisKK3B1YmxpYyBjbGFzcyBKYXZhSW5kZXhUZXN0cyBleHRlbmRz
IEFic3RyYWN0SmF2YVNlYXJjaFRlc3RzICB7CisKKwlzdGF0aWMgeworCQkvLyBURVNUU19OQU1F
UyA9IG5ldyBTdHJpbmdbXSB7InRlc3RQbGF0Zm9ybUluZGV4RmlsZSJ9OworCX0KKwlwdWJsaWMg
SmF2YUluZGV4VGVzdHMoU3RyaW5nIG5hbWUpIHsKKwkJc3VwZXIobmFtZSk7CisJfQorCisJcHVi
bGljIHN0YXRpYyBUZXN0IHN1aXRlKCkgeworCQlyZXR1cm4gYnVpbGRNb2RlbFRlc3RTdWl0ZShK
YXZhSW5kZXhUZXN0cy5jbGFzcyk7CisJfQorCS8vIFRlc3QgdGhhdCB0aGUgaW5kZXggZmlsZSBp
cyByZWFsbHkgZ2VuZXJhdGVkLgorCXB1YmxpYyB2b2lkIHRlc3RHZW5lcmF0ZUluZGV4KCkgdGhy
b3dzIElPRXhjZXB0aW9uIHsKKwkJU3RyaW5nIGluZGV4RmlsZVBhdGggPSBnZXRFeHRlcm5hbFJl
c291cmNlUGF0aCgiVGVzdC5pbmRleCIpOworCQlTdHJpbmcgamFyRmlsZVBhdGggPSBnZXRFeHRl
cm5hbFJlc291cmNlUGF0aCgiVGVzdC5qYXIiKTsKKwkJdHJ5IHsKKwkJCWNyZWF0ZUphcihuZXcg
U3RyaW5nW10geworCQkJCQkicGtnL1Rlc3QuamF2YSIsCisJCQkJCSJwYWNrYWdlIHBrZztcbiIg
KworCQkJCQkicHVibGljIGNsYXNzIFRlc3Qge1xuIiArCisJCQkJCSIgIHByb3RlY3RlZCBUZXN0
KGludCBpKSB7fVxuIiArCisJCQkJCSJ9In0sIGphckZpbGVQYXRoKTsKKwkJCQorCQkJSmF2YUlu
ZGV4ZXIuZ2VuZXJhdGVJbmRleEZvckphcihqYXJGaWxlUGF0aCwgaW5kZXhGaWxlUGF0aCk7CisJ
CQlhc3NlcnRUcnVlKG5ldyBGaWxlKGluZGV4RmlsZVBhdGgpLmV4aXN0cygpKTsKKwkJfSBmaW5h
bGx5IHsKKwkJCW5ldyBGaWxlKGluZGV4RmlsZVBhdGgpLmRlbGV0ZSgpOworCQkJbmV3IEZpbGUo
amFyRmlsZVBhdGgpLmRlbGV0ZSgpOworCQl9CisJfQorCQorCS8vIFRlc3QgdGhhdCB0aGUgaW5k
ZXggZmlsZSBhbmQgdGhlIGphciBjYW4gYmUgZGVsZXRlZCBhZnRlciB0aGUgaW5kZXhpbmcgaXMg
ZG9uZQorCS8vIFRoaXMgaXMgdG8gZW5zdXJlIHRoYXQgdGhlIGZpbGVzIGFyZSBjbG9zZWQKKwlw
dWJsaWMgdm9pZCB0ZXN0RGVsZXRlSW5kZXhlZEZpbGUoKSB7CisJCVN0cmluZyBpbmRleEZpbGVQ
YXRoID0gZ2V0RXh0ZXJuYWxSZXNvdXJjZVBhdGgoIlRlc3QuaW5kZXgiKTsKKwkJU3RyaW5nIGph
ckZpbGVQYXRoID0gZ2V0RXh0ZXJuYWxSZXNvdXJjZVBhdGgoIlRlc3QuamFyIik7CisJCXRyeSB7
CisJCQljcmVhdGVKYXIobmV3IFN0cmluZ1tdIHsKKwkJCQkJInBrZy9UZXN0LmphdmEiLAorCQkJ
CQkicGFja2FnZSBwa2c7XG4iICsKKwkJCQkJInB1YmxpYyBjbGFzcyBUZXN0IHtcbiIgKworCQkJ
CQkiICBwcm90ZWN0ZWQgVGVzdChpbnQgaSkge31cbiIgKworCQkJCQkifSJ9LCBqYXJGaWxlUGF0
aCk7CisJCQlKYXZhSW5kZXhlci5nZW5lcmF0ZUluZGV4Rm9ySmFyKGphckZpbGVQYXRoLCBpbmRl
eEZpbGVQYXRoKTsKKwkJCWFzc2VydFRydWUoIkNvdWxkIG5vdCBkZWxldGUgdGhlIGluZGV4IGZp
bGUiLCBuZXcgRmlsZShpbmRleEZpbGVQYXRoKS5kZWxldGUoKSk7CisJCQlhc3NlcnRUcnVlKCJD
b3VsZCBub3QgZGVsZXRlIHRoZSBqYXIgZmlsZSIsIG5ldyBGaWxlKGphckZpbGVQYXRoKS5kZWxl
dGUoKSk7CisJCX0gY2F0Y2ggKElPRXhjZXB0aW9uIGUpIHsKKwkJCWFzc2VydEZhbHNlKCJUZXN0
IGZhaWxlZCIsIHRydWUpOworCQl9CisJfQorCQorCS8vIFRlc3QgdGhhdCBzZWFyY2ggd29ya3Mg
ZmluZSB3aXRoIHRoZSBpbmRleCBmaWxlCisJcHVibGljIHZvaWQgdGVzdFVzZUluZGV4KCkgdGhy
b3dzIENvcmVFeGNlcHRpb24sIElPRXhjZXB0aW9uIHsKKwkJU3RyaW5nIGluZGV4RmlsZVBhdGgg
PSBnZXRFeHRlcm5hbFJlc291cmNlUGF0aCgiVGVzdC5pbmRleCIpOworCQlTdHJpbmcgamFyRmls
ZVBhdGggPSBnZXRFeHRlcm5hbFJlc291cmNlUGF0aCgiVGVzdC5qYXIiKTsKKwkJdHJ5IHsKKwkJ
CWNyZWF0ZUphcihuZXcgU3RyaW5nW10geworCQkJCQkicGtnL1Rlc3QuamF2YSIsCisJCQkJCSJw
YWNrYWdlIHBrZztcbiIgKworCQkJCQkicHVibGljIGNsYXNzIFRlc3Qge1xuIiArCisJCQkJCSIg
IHByb3RlY3RlZCBUZXN0KGludCBpKSB7fVxuIiArCisJCQkJCSJ9In0sIGphckZpbGVQYXRoKTsK
KwkJCUphdmFJbmRleGVyLmdlbmVyYXRlSW5kZXhGb3JKYXIoamFyRmlsZVBhdGgsIGluZGV4Rmls
ZVBhdGgpOworCQkJbG9uZyBtb2RpZmllZCA9IG5ldyBGaWxlKGluZGV4RmlsZVBhdGgpLmxhc3RN
b2RpZmllZCgpOworCQkJCisJCQlJSmF2YVByb2plY3QgcCA9IGNyZWF0ZUphdmFQcm9qZWN0KCJQ
Iik7CisJCQlQYXRoIGxpYlBhdGggPSBuZXcgUGF0aChqYXJGaWxlUGF0aCk7CisJCQlJQ2xhc3Nw
YXRoQXR0cmlidXRlIGF0dHJpYnV0ZSA9IEphdmFDb3JlLm5ld0NsYXNzcGF0aEF0dHJpYnV0ZShJ
Q2xhc3NwYXRoQXR0cmlidXRlLklOREVYX0xPQ0FUSU9OX0FUVFJJQlVURV9OQU1FLCAiZmlsZTov
Ly8iK2luZGV4RmlsZVBhdGgpOworCQkJSUNsYXNzcGF0aEVudHJ5IGVudHJ5ID0gSmF2YUNvcmUu
bmV3TGlicmFyeUVudHJ5KGxpYlBhdGgsIG51bGwsIG51bGwsIG51bGwsIG5ldyBJQ2xhc3NwYXRo
QXR0cmlidXRlW117YXR0cmlidXRlfSwgZmFsc2UpOworCQkJc2V0Q2xhc3NwYXRoKHAsIG5ldyBJ
Q2xhc3NwYXRoRW50cnlbXSB7ZW50cnl9KTsKKwkJCQorCQkJd2FpdFVudGlsSW5kZXhlc1JlYWR5
KCk7CisJCQkKKwkJCS8vIFRlc3QgdGhhdCBzcGVjaWZpZWQgaW5kZXggZmlsZSBpcyByZWFsbHkg
dXNlZAorCQkJamF2YS5pby5GaWxlIGluZGV4RmlsZSA9IEphdmFNb2RlbE1hbmFnZXIuZ2V0SW5k
ZXhNYW5hZ2VyKCkuZ2V0SW5kZXgobGliUGF0aCwgZmFsc2UsIGZhbHNlKS5nZXRJbmRleEZpbGUo
KTsKKwkJCWFzc2VydEVxdWFscygiU3BlY2lmaWVkIGluZGV4IGZpbGUgaXMgbm90IGJlaW5nIHVz
ZWQiLCBpbmRleEZpbGVQYXRoLGluZGV4RmlsZS50b1N0cmluZygpKTsKKwkJCQorCQkJLy8gVGVz
dCB0aGF0IHNlYXJjaCB3b3JrcyBwcm9wZXJseSAKKwkJCXNlYXJjaCgiVGVzdCIsIFRZUEUsIERF
Q0xBUkFUSU9OUywgRVhBQ1RfUlVMRSwgU2VhcmNoRW5naW5lLmNyZWF0ZUphdmFTZWFyY2hTY29w
ZShuZXcgSUphdmFFbGVtZW50W117cH0pKTsKKwkJCWFzc2VydFNlYXJjaFJlc3VsdHMoZ2V0RXh0
ZXJuYWxQYXRoKCkgKyAiVGVzdC5qYXIgcGtnLlRlc3QiKTsKKwkJCQorCQkJLy8gRW5zdXJlIHRo
YXQgdGhlIGluZGV4IGZpbGUgaXMgbm90IG1vZGlmaWVkCisJCQlhc3NlcnRFcXVhbHMobW9kaWZp
ZWQsIG5ldyBGaWxlKGluZGV4RmlsZVBhdGgpLmxhc3RNb2RpZmllZCgpKTsKKwkJfSBmaW5hbGx5
IHsKKwkJCWRlbGV0ZVByb2plY3QoIlAiKTsKKwkJCW5ldyBGaWxlKGluZGV4RmlsZVBhdGgpLmRl
bGV0ZSgpOworCQkJbmV3IEZpbGUoamFyRmlsZVBhdGgpLmRlbGV0ZSgpOworCQl9CisJfQorCQor
CS8vIFRlc3QgdGhhdCB0aGUgc2FtZSBpbmRleCBmaWxlIGlzIHVzZWQgZXZlbiBhZnRlciByZXN0
YXJ0aW5nCisJcHVibGljIHZvaWQgdGVzdFVzZUluZGV4QWZ0ZXJSZXN0YXJ0KCkgdGhyb3dzIElP
RXhjZXB0aW9uLCBDb3JlRXhjZXB0aW9uIHsKKwkJU3RyaW5nIGluZGV4RmlsZVBhdGggPSBnZXRF
eHRlcm5hbFJlc291cmNlUGF0aCgiVGVzdC5pbmRleCIpOworCQlTdHJpbmcgamFyRmlsZVBhdGgg
PSBnZXRFeHRlcm5hbFJlc291cmNlUGF0aCgiVGVzdC5qYXIiKTsKKwkJdHJ5IHsKKwkJCWNyZWF0
ZUphcihuZXcgU3RyaW5nW10geworCQkJCQkicGtnL1Rlc3QuamF2YSIsCisJCQkJCSJwYWNrYWdl
IHBrZztcbiIgKworCQkJCQkicHVibGljIGNsYXNzIFRlc3Qge1xuIiArCisJCQkJCSIgIHByb3Rl
Y3RlZCBUZXN0KGludCBpKSB7fVxuIiArCisJCQkJCSJ9In0sIGphckZpbGVQYXRoKTsKKwkJCUph
dmFJbmRleGVyLmdlbmVyYXRlSW5kZXhGb3JKYXIoamFyRmlsZVBhdGgsIGluZGV4RmlsZVBhdGgp
OworCQkJbG9uZyBtb2RpZmllZCA9IG5ldyBGaWxlKGluZGV4RmlsZVBhdGgpLmxhc3RNb2RpZmll
ZCgpOworCQkJSUphdmFQcm9qZWN0IHAgPSBjcmVhdGVKYXZhUHJvamVjdCgiUCIpOworCQkJUGF0
aCBsaWJQYXRoID0gbmV3IFBhdGgoamFyRmlsZVBhdGgpOworCQkJSUNsYXNzcGF0aEF0dHJpYnV0
ZSBhdHRyaWJ1dGUgPSBKYXZhQ29yZS5uZXdDbGFzc3BhdGhBdHRyaWJ1dGUoSUNsYXNzcGF0aEF0
dHJpYnV0ZS5JTkRFWF9MT0NBVElPTl9BVFRSSUJVVEVfTkFNRSwgImZpbGU6Ly8vIitpbmRleEZp
bGVQYXRoKTsKKwkJCUlDbGFzc3BhdGhFbnRyeSBlbnRyeSA9IEphdmFDb3JlLm5ld0xpYnJhcnlF
bnRyeShsaWJQYXRoLCBudWxsLCBudWxsLCBudWxsLCBuZXcgSUNsYXNzcGF0aEF0dHJpYnV0ZVtd
e2F0dHJpYnV0ZX0sIGZhbHNlKTsKKwkJCXNldENsYXNzcGF0aChwLCBuZXcgSUNsYXNzcGF0aEVu
dHJ5W10ge2VudHJ5fSk7CisJCQl3YWl0VW50aWxJbmRleGVzUmVhZHkoKTsKKwkJCQorCQkJc2Vh
cmNoKCJUZXN0IiwgVFlQRSwgREVDTEFSQVRJT05TLCBFWEFDVF9SVUxFLCBTZWFyY2hFbmdpbmUu
Y3JlYXRlSmF2YVNlYXJjaFNjb3BlKG5ldyBJSmF2YUVsZW1lbnRbXXtwfSkpOworCQkJYXNzZXJ0
U2VhcmNoUmVzdWx0cyhnZXRFeHRlcm5hbFBhdGgoKSArICJUZXN0LmphciBwa2cuVGVzdCIpOwor
CQkJCisJCQlzaW11bGF0ZUV4aXRSZXN0YXJ0KCk7CisJCQlnZXRKYXZhTW9kZWwoKS5yZWZyZXNo
RXh0ZXJuYWxBcmNoaXZlcyhudWxsLCBudWxsKTsKKwkJCXdhaXRVbnRpbEluZGV4ZXNSZWFkeSgp
OworCQkJCisJCQl0aGlzLnJlc3VsdENvbGxlY3RvciA9IG5ldyBKYXZhU2VhcmNoUmVzdWx0Q29s
bGVjdG9yKCk7CisJCQlzZWFyY2goIlRlc3QiLCBUWVBFLCBERUNMQVJBVElPTlMsIEVYQUNUX1JV
TEUsIFNlYXJjaEVuZ2luZS5jcmVhdGVKYXZhU2VhcmNoU2NvcGUobmV3IElKYXZhRWxlbWVudFtd
e3B9KSk7CisJCQlhc3NlcnRTZWFyY2hSZXN1bHRzKGdldEV4dGVybmFsUGF0aCgpICsgIlRlc3Qu
amFyIHBrZy5UZXN0Iik7CisJCQkKKwkJCWphdmEuaW8uRmlsZSBpbmRleEZpbGUgPSBKYXZhTW9k
ZWxNYW5hZ2VyLmdldEluZGV4TWFuYWdlcigpLmdldEluZGV4KGxpYlBhdGgsIGZhbHNlLCBmYWxz
ZSkuZ2V0SW5kZXhGaWxlKCk7CisJCQlhc3NlcnRFcXVhbHMoaW5kZXhGaWxlUGF0aCxpbmRleEZp
bGUudG9TdHJpbmcoKSk7CisJCQkvLyBFbnN1cmUgdGhhdCB0aGUgZmlsZSBpcyBub3QgbW9kaWZp
ZWQKKwkJCWFzc2VydEVxdWFscyhtb2RpZmllZCwgbmV3IEZpbGUoaW5kZXhGaWxlUGF0aCkubGFz
dE1vZGlmaWVkKCkpOworCQl9IGZpbmFsbHkgeworCQkJZGVsZXRlUHJvamVjdCgiUCIpOworCQkJ
bmV3IEZpbGUoaW5kZXhGaWxlUGF0aCkuZGVsZXRlKCk7CisJCQluZXcgRmlsZShqYXJGaWxlUGF0
aCkuZGVsZXRlKCk7CisJCX0KKwl9CisJCisJLy8gVGVzdCB0aGF0IHRoZSBzYW1lIGluZGV4IGZp
bGUgaXMgdXNlZCBldmVuIGFmdGVyIHJlc3RhcnRpbmcKKwlwdWJsaWMgdm9pZCB0ZXN0VXNlSW5k
ZXhJbnRlcm5hbEphckFmdGVyUmVzdGFydCgpIHRocm93cyBJT0V4Y2VwdGlvbiwgQ29yZUV4Y2Vw
dGlvbiB7CisJCVN0cmluZyBpbmRleEZpbGVQYXRoID0gZ2V0RXh0ZXJuYWxSZXNvdXJjZVBhdGgo
IlRlc3QuaW5kZXgiKTsKKwkJU3RyaW5nIGphckZpbGVQYXRoID0gIi9QL1Rlc3QuamFyIjsKKwkJ
dHJ5IHsKKwkJCUlKYXZhUHJvamVjdCBwID0gY3JlYXRlSmF2YVByb2plY3QoIlAiKTsKKwkJCWNy
ZWF0ZUphcihuZXcgU3RyaW5nW10geworCQkJCQkicGtnL1Rlc3QuamF2YSIsCisJCQkJCSJwYWNr
YWdlIHBrZztcbiIgKworCQkJCQkicHVibGljIGNsYXNzIFRlc3Qge1xuIiArCisJCQkJCSIgIHBy
b3RlY3RlZCBUZXN0KGludCBpKSB7fVxuIiArCisJCQkJCSJ9In0sIGphckZpbGVQYXRoKTsKKwkJ
CUphdmFJbmRleGVyLmdlbmVyYXRlSW5kZXhGb3JKYXIoamFyRmlsZVBhdGgsIGluZGV4RmlsZVBh
dGgpOworCQkJbG9uZyBtb2RpZmllZCA9IG5ldyBGaWxlKGluZGV4RmlsZVBhdGgpLmxhc3RNb2Rp
ZmllZCgpOworCQkJSVBhdGggbGliUGF0aCA9IG5ldyBQYXRoKGphckZpbGVQYXRoKTsKKwkJCUlD
bGFzc3BhdGhBdHRyaWJ1dGUgYXR0cmlidXRlID0gSmF2YUNvcmUubmV3Q2xhc3NwYXRoQXR0cmli
dXRlKElDbGFzc3BhdGhBdHRyaWJ1dGUuSU5ERVhfTE9DQVRJT05fQVRUUklCVVRFX05BTUUsICJm
aWxlOi8vLyIraW5kZXhGaWxlUGF0aCk7CisJCQlJQ2xhc3NwYXRoRW50cnkgZW50cnkgPSBKYXZh
Q29yZS5uZXdMaWJyYXJ5RW50cnkobGliUGF0aCwgbnVsbCwgbnVsbCwgbnVsbCwgbmV3IElDbGFz
c3BhdGhBdHRyaWJ1dGVbXXthdHRyaWJ1dGV9LCBmYWxzZSk7CisJCQlzZXRDbGFzc3BhdGgocCwg
bmV3IElDbGFzc3BhdGhFbnRyeVtdIHtlbnRyeX0pOworCQkJd2FpdFVudGlsSW5kZXhlc1JlYWR5
KCk7CisJCQkKKwkJCXNlYXJjaCgiVGVzdCIsIFRZUEUsIERFQ0xBUkFUSU9OUywgRVhBQ1RfUlVM
RSwgU2VhcmNoRW5naW5lLmNyZWF0ZUphdmFTZWFyY2hTY29wZShuZXcgSUphdmFFbGVtZW50W117
cH0pKTsKKwkJCWFzc2VydFNlYXJjaFJlc3VsdHMoIlxcUFxcVGVzdC5qYXIgcGtnLlRlc3QiKTsK
KwkJCQorCQkJc2ltdWxhdGVFeGl0UmVzdGFydCgpOworCQkJZ2V0SmF2YU1vZGVsKCkucmVmcmVz
aEV4dGVybmFsQXJjaGl2ZXMobnVsbCwgbnVsbCk7CisJCQl3YWl0VW50aWxJbmRleGVzUmVhZHko
KTsKKwkJCQorCQkJdGhpcy5yZXN1bHRDb2xsZWN0b3IgPSBuZXcgSmF2YVNlYXJjaFJlc3VsdENv
bGxlY3RvcigpOworCQkJc2VhcmNoKCJUZXN0IiwgVFlQRSwgREVDTEFSQVRJT05TLCBFWEFDVF9S
VUxFLCBTZWFyY2hFbmdpbmUuY3JlYXRlSmF2YVNlYXJjaFNjb3BlKG5ldyBJSmF2YUVsZW1lbnRb
XXtwfSkpOworCQkJYXNzZXJ0U2VhcmNoUmVzdWx0cygiXFxQXFxUZXN0LmphciBwa2cuVGVzdCIp
OworCQkJCisJCQlqYXZhLmlvLkZpbGUgaW5kZXhGaWxlID0gSmF2YU1vZGVsTWFuYWdlci5nZXRJ
bmRleE1hbmFnZXIoKS5nZXRJbmRleChsaWJQYXRoLCBmYWxzZSwgZmFsc2UpLmdldEluZGV4Rmls
ZSgpOworCQkJYXNzZXJ0RXF1YWxzKGluZGV4RmlsZVBhdGgsaW5kZXhGaWxlLnRvU3RyaW5nKCkp
OworCQkJLy8gRW5zdXJlIHRoYXQgdGhlIGZpbGUgaXMgbm90IG1vZGlmaWVkCisJCQlhc3NlcnRF
cXVhbHMobW9kaWZpZWQsIG5ldyBGaWxlKGluZGV4RmlsZVBhdGgpLmxhc3RNb2RpZmllZCgpKTsK
KwkJfSBmaW5hbGx5IHsKKwkJCWRlbGV0ZVByb2plY3QoIlAiKTsKKwkJCW5ldyBGaWxlKGluZGV4
RmlsZVBhdGgpLmRlbGV0ZSgpOworCQl9CisJfQorCQorCS8vIFRlc3QgdGhhdCBhIGphciBmaWxl
IHRoYXQgZ2V0cyBtb2RpZmllZCBhZnRlciB0aGUgaW5kZXggaXMgY3JlYXRlZCBkb2Vzbid0IHJl
dHVybiBuZXcgY2hhbmdlcy4gCisJLy8gVGhpcyBiZWhhdmlvciBtaWdodCBoYXZlIHRvIGJlIG1v
ZGlmaWVkIGJ1dC4uIAorCXB1YmxpYyB2b2lkIHRlc3RNb2RpZnlKYXJBZnRlckluZGV4KCkgdGhy
b3dzIENvcmVFeGNlcHRpb24sIElPRXhjZXB0aW9uIHsKKwkJU3RyaW5nIGluZGV4RmlsZVBhdGgg
PSBnZXRFeHRlcm5hbFJlc291cmNlUGF0aCgiVGVzdC5pbmRleCIpOworCQlTdHJpbmcgamFyRmls
ZVBhdGggPSBnZXRFeHRlcm5hbFJlc291cmNlUGF0aCgiVGVzdC5qYXIiKTsKKwkJdHJ5IHsKKwkJ
CWNyZWF0ZUphcihuZXcgU3RyaW5nW10geworCQkJCQkicGtnL1Rlc3QuamF2YSIsCisJCQkJCSJw
YWNrYWdlIHBrZztcbiIgKworCQkJCQkicHVibGljIGNsYXNzIFRlc3Qge1xuIiArCisJCQkJCSIg
IHByb3RlY3RlZCBUZXN0KGludCBpKSB7fVxuIiArCisJCQkJCSJ9In0sIGphckZpbGVQYXRoKTsK
KwkJCUphdmFJbmRleGVyLmdlbmVyYXRlSW5kZXhGb3JKYXIoamFyRmlsZVBhdGgsIGluZGV4Rmls
ZVBhdGgpOworCQkJY3JlYXRlSmFyKG5ldyBTdHJpbmdbXSB7CisJCQkJCSJwa2cvVGVzdC5qYXZh
IiwKKwkJCQkJInBhY2thZ2UgcGtnO1xuIiArCisJCQkJCSJwdWJsaWMgY2xhc3MgVGVzdCB7XG4i
ICsKKwkJCQkJIiAgcHJvdGVjdGVkIFRlc3QoaW50IGkpIHt9XG4iICsKKwkJCQkJIn0iLCAKKwkJ
CQkJInBrZy9OZXdUZXN0LmphdmEiLAorCQkJCQkicGFja2FnZSBwa2c7XG4iICsKKwkJCQkJInB1
YmxpYyBjbGFzcyBOZXdUZXN0IHtcbiIgKworCQkJCQkiICBwcm90ZWN0ZWQgTmV3VGVzdChpbnQg
aSkge31cbiIgKworCQkJCQkifSJ9LCBqYXJGaWxlUGF0aCk7CisJCQlJSmF2YVByb2plY3QgcCA9
IGNyZWF0ZUphdmFQcm9qZWN0KCJQIik7CisJCQlQYXRoIGxpYlBhdGggPSBuZXcgUGF0aChqYXJG
aWxlUGF0aCk7CisJCQlJQ2xhc3NwYXRoQXR0cmlidXRlIGF0dHJpYnV0ZSA9IEphdmFDb3JlLm5l
d0NsYXNzcGF0aEF0dHJpYnV0ZShJQ2xhc3NwYXRoQXR0cmlidXRlLklOREVYX0xPQ0FUSU9OX0FU
VFJJQlVURV9OQU1FLCAiZmlsZTovLy8iK2luZGV4RmlsZVBhdGgpOworCQkJSUNsYXNzcGF0aEVu
dHJ5IGVudHJ5ID0gSmF2YUNvcmUubmV3TGlicmFyeUVudHJ5KGxpYlBhdGgsIG51bGwsIG51bGws
IG51bGwsIG5ldyBJQ2xhc3NwYXRoQXR0cmlidXRlW117YXR0cmlidXRlfSwgZmFsc2UpOworCQkJ
c2V0Q2xhc3NwYXRoKHAsIG5ldyBJQ2xhc3NwYXRoRW50cnlbXSB7ZW50cnl9KTsKKwkJCXdhaXRV
bnRpbEluZGV4ZXNSZWFkeSgpOworCQkJc2VhcmNoKCJOZXdUZXN0IiwgVFlQRSwgREVDTEFSQVRJ
T05TLCBFWEFDVF9SVUxFLCBTZWFyY2hFbmdpbmUuY3JlYXRlSmF2YVNlYXJjaFNjb3BlKG5ldyBJ
SmF2YUVsZW1lbnRbXXtwfSkpOworCQkJYXNzZXJ0U2VhcmNoUmVzdWx0cygiIik7CisJCX0gZmlu
YWxseSB7CisJCQlkZWxldGVQcm9qZWN0KCJQIik7CisJCQluZXcgRmlsZShpbmRleEZpbGVQYXRo
KS5kZWxldGUoKTsKKwkJCW5ldyBGaWxlKGphckZpbGVQYXRoKS5kZWxldGUoKTsKKwkJfQorCX0K
KworCS8vIHRlc3QgYSBub24tZXhpc3RlbnQgaW5kZXgKKwlwdWJsaWMgdm9pZCB0ZXN0Tm9uRXhp
c3RlbnRJbmRleCgpIHRocm93cyBDb3JlRXhjZXB0aW9uLCBJT0V4Y2VwdGlvbiB7CisJCVN0cmlu
ZyBpbmRleEZpbGVQYXRoID0gZ2V0RXh0ZXJuYWxSZXNvdXJjZVBhdGgoIlRlc3QuaW5kZXgiKTsK
KwkJU3RyaW5nIGphckZpbGVQYXRoID0gZ2V0RXh0ZXJuYWxSZXNvdXJjZVBhdGgoIlRlc3QuamFy
Iik7CisJCXRyeSB7CisJCQljcmVhdGVKYXIobmV3IFN0cmluZ1tdIHsKKwkJCQkJInBrZy9UZXN0
LmphdmEiLAorCQkJCQkicGFja2FnZSBwa2c7XG4iICsKKwkJCQkJInB1YmxpYyBjbGFzcyBUZXN0
IHtcbiIgKworCQkJCQkiICBwcm90ZWN0ZWQgVGVzdChpbnQgaSkge31cbiIgKworCQkJCQkifSJ9
LCBqYXJGaWxlUGF0aCk7CisJCQlJSmF2YVByb2plY3QgcCA9IGNyZWF0ZUphdmFQcm9qZWN0KCJQ
Iik7CisJCQlQYXRoIGxpYlBhdGggPSBuZXcgUGF0aChqYXJGaWxlUGF0aCk7CisJCQluZXcgRmls
ZShpbmRleEZpbGVQYXRoKS5kZWxldGUoKTsKKwkJCUlDbGFzc3BhdGhBdHRyaWJ1dGUgYXR0cmli
dXRlID0gSmF2YUNvcmUubmV3Q2xhc3NwYXRoQXR0cmlidXRlKElDbGFzc3BhdGhBdHRyaWJ1dGUu
SU5ERVhfTE9DQVRJT05fQVRUUklCVVRFX05BTUUsICJmaWxlOi8vLyIraW5kZXhGaWxlUGF0aCk7
CisJCQlJQ2xhc3NwYXRoRW50cnkgZW50cnkgPSBKYXZhQ29yZS5uZXdMaWJyYXJ5RW50cnkobGli
UGF0aCwgbnVsbCwgbnVsbCwgbnVsbCwgbmV3IElDbGFzc3BhdGhBdHRyaWJ1dGVbXXthdHRyaWJ1
dGV9LCBmYWxzZSk7CisJCQlzZXRDbGFzc3BhdGgocCwgbmV3IElDbGFzc3BhdGhFbnRyeVtdIHtl
bnRyeX0pOworCQkJd2FpdFVudGlsSW5kZXhlc1JlYWR5KCk7CisJCQlzZWFyY2goIlRlc3QiLCBU
WVBFLCBERUNMQVJBVElPTlMsIEVYQUNUX1JVTEUsIFNlYXJjaEVuZ2luZS5jcmVhdGVKYXZhU2Vh
cmNoU2NvcGUobmV3IElKYXZhRWxlbWVudFtde3B9KSk7CisJCQlhc3NlcnRTZWFyY2hSZXN1bHRz
KGdldEV4dGVybmFsUGF0aCgpICsgIlRlc3QuamFyIHBrZy5UZXN0Iik7CisJCQkKKwkJfSBmaW5h
bGx5IHsKKwkJCWRlbGV0ZVByb2plY3QoIlAiKTsKKwkJCW5ldyBGaWxlKGluZGV4RmlsZVBhdGgp
LmRlbGV0ZSgpOworCQkJbmV3IEZpbGUoamFyRmlsZVBhdGgpLmRlbGV0ZSgpOworCQl9CisJfQor
CQorCS8vIHRlc3QgYSBub24tZXhpc3RlbnQgaW5kZXgKKwlwdWJsaWMgdm9pZCB0ZXN0Tm9uRXhp
c3RlbnRJbmRleFJlc3RhcnQoKSB0aHJvd3MgQ29yZUV4Y2VwdGlvbiwgSU9FeGNlcHRpb24gewor
CQlTdHJpbmcgaW5kZXhGaWxlUGF0aCA9IGdldEV4dGVybmFsUmVzb3VyY2VQYXRoKCJUZXN0Lmlu
ZGV4Iik7CisJCVN0cmluZyBqYXJGaWxlUGF0aCA9IGdldEV4dGVybmFsUmVzb3VyY2VQYXRoKCJU
ZXN0LmphciIpOworCQl0cnkgeworCQkJY3JlYXRlSmFyKG5ldyBTdHJpbmdbXSB7CisJCQkJCSJw
a2cvVGVzdC5qYXZhIiwKKwkJCQkJInBhY2thZ2UgcGtnO1xuIiArCisJCQkJCSJwdWJsaWMgY2xh
c3MgVGVzdCB7XG4iICsKKwkJCQkJIiAgcHJvdGVjdGVkIFRlc3QoaW50IGkpIHt9XG4iICsKKwkJ
CQkJIn0ifSwgamFyRmlsZVBhdGgpOworCQkJCisJCQluZXcgRmlsZShpbmRleEZpbGVQYXRoKS5k
ZWxldGUoKTsKKwkJCQorCQkJSUphdmFQcm9qZWN0IHAgPSBjcmVhdGVKYXZhUHJvamVjdCgiUCIp
OworCQkJUGF0aCBsaWJQYXRoID0gbmV3IFBhdGgoamFyRmlsZVBhdGgpOworCQkJSUNsYXNzcGF0
aEF0dHJpYnV0ZSBhdHRyaWJ1dGUgPSBKYXZhQ29yZS5uZXdDbGFzc3BhdGhBdHRyaWJ1dGUoSUNs
YXNzcGF0aEF0dHJpYnV0ZS5JTkRFWF9MT0NBVElPTl9BVFRSSUJVVEVfTkFNRSwgImZpbGU6Ly8v
IitpbmRleEZpbGVQYXRoKTsKKwkJCUlDbGFzc3BhdGhFbnRyeSBlbnRyeSA9IEphdmFDb3JlLm5l
d0xpYnJhcnlFbnRyeShsaWJQYXRoLCBudWxsLCBudWxsLCBudWxsLCBuZXcgSUNsYXNzcGF0aEF0
dHJpYnV0ZVtde2F0dHJpYnV0ZX0sIGZhbHNlKTsKKwkJCXNldENsYXNzcGF0aChwLCBuZXcgSUNs
YXNzcGF0aEVudHJ5W10ge2VudHJ5fSk7CisJCQl3YWl0VW50aWxJbmRleGVzUmVhZHkoKTsKKwkJ
CQorCQkJc2VhcmNoKCJUZXN0IiwgVFlQRSwgREVDTEFSQVRJT05TLCBFWEFDVF9SVUxFLCBTZWFy
Y2hFbmdpbmUuY3JlYXRlSmF2YVNlYXJjaFNjb3BlKG5ldyBJSmF2YUVsZW1lbnRbXXtwfSkpOwor
CQkJYXNzZXJ0U2VhcmNoUmVzdWx0cyhnZXRFeHRlcm5hbFBhdGgoKSArICJUZXN0LmphciBwa2cu
VGVzdCIpOworCQkJCisJCQlqYXZhLmlvLkZpbGUgaW5kZXhGaWxlID0gSmF2YU1vZGVsTWFuYWdl
ci5nZXRJbmRleE1hbmFnZXIoKS5nZXRJbmRleChsaWJQYXRoLCBmYWxzZSwgZmFsc2UpLmdldElu
ZGV4RmlsZSgpOworCQkJbG9uZyBtb2RpZmllZCA9IGluZGV4RmlsZS5sYXN0TW9kaWZpZWQoKTsK
KwkJCWFzc2VydEVxdWFscyhtb2RpZmllZCwgaW5kZXhGaWxlLmxhc3RNb2RpZmllZCgpKTsKKwkJ
CQorCQkJc2ltdWxhdGVFeGl0UmVzdGFydCgpOworCQkJZ2V0SmF2YU1vZGVsKCkucmVmcmVzaEV4
dGVybmFsQXJjaGl2ZXMobnVsbCxudWxsKTsKKwkJCXdhaXRVbnRpbEluZGV4ZXNSZWFkeSgpOwor
CQkJCisJCQl0aGlzLnJlc3VsdENvbGxlY3RvciA9IG5ldyBKYXZhU2VhcmNoUmVzdWx0Q29sbGVj
dG9yKCk7CisJCQlzZWFyY2goIlRlc3QiLCBUWVBFLCBERUNMQVJBVElPTlMsIEVYQUNUX1JVTEUs
IFNlYXJjaEVuZ2luZS5jcmVhdGVKYXZhU2VhcmNoU2NvcGUobmV3IElKYXZhRWxlbWVudFtde3B9
KSk7CisJCQlhc3NlcnRTZWFyY2hSZXN1bHRzKGdldEV4dGVybmFsUGF0aCgpICsgIlRlc3QuamFy
IHBrZy5UZXN0Iik7CisJCQkKKwkJCWluZGV4RmlsZSA9IEphdmFNb2RlbE1hbmFnZXIuZ2V0SW5k
ZXhNYW5hZ2VyKCkuZ2V0SW5kZXgobGliUGF0aCwgZmFsc2UsIGZhbHNlKS5nZXRJbmRleEZpbGUo
KTsKKwkJCWFzc2VydEVxdWFscygiSW5kZXggRmlsZSBzaG91bGQgbm90IGhhdmUgZ290IG1vZGlm
aWVkIixtb2RpZmllZCwgaW5kZXhGaWxlLmxhc3RNb2RpZmllZCgpKTsKKwkJfSBmaW5hbGx5IHsK
KwkJCWRlbGV0ZVByb2plY3QoIlAiKTsKKwkJCW5ldyBGaWxlKGluZGV4RmlsZVBhdGgpLmRlbGV0
ZSgpOworCQkJbmV3IEZpbGUoamFyRmlsZVBhdGgpLmRlbGV0ZSgpOworCQl9CisJfQorCQorCS8v
IHRlc3QgdGhhdCBpZiB0aGUgaW5kZXggaXMgbm90IGV4aXN0ZW50IGFmdGVyIHJlc3RhcnQsIGl0
IHNob3VsZCBidWlsZCB1cCBhIG5ldyBpbmRleAorCXB1YmxpYyB2b2lkIHRlc3ROb25FeGlzdGVu
dEluZGV4QWZ0ZXJSZXN0YXJ0KCkgdGhyb3dzIENvcmVFeGNlcHRpb24sIElPRXhjZXB0aW9uIHsK
KwkJU3RyaW5nIGluZGV4RmlsZVBhdGggPSBnZXRFeHRlcm5hbFJlc291cmNlUGF0aCgiVGVzdC5p
bmRleCIpOworCQlTdHJpbmcgamFyRmlsZVBhdGggPSBnZXRFeHRlcm5hbFJlc291cmNlUGF0aCgi
VGVzdC5qYXIiKTsKKwkJdHJ5IHsKKwkJCWNyZWF0ZUphcihuZXcgU3RyaW5nW10geworCQkJCQki
cGtnL1Rlc3QuamF2YSIsCisJCQkJCSJwYWNrYWdlIHBrZztcbiIgKyAKKwkJCQkJInB1YmxpYyBj
bGFzcyBUZXN0IHtcbiIgKworCQkJCQkicHJvdGVjdGVkIFRlc3QoaW50IGkpIHt9XG4iICsgIn0i
IAorCQkJCQl9LGphckZpbGVQYXRoKTsKKwkJCUphdmFJbmRleGVyLmdlbmVyYXRlSW5kZXhGb3JK
YXIoamFyRmlsZVBhdGgsIGluZGV4RmlsZVBhdGgpOworCQkJCisJCQlJSmF2YVByb2plY3QgcCA9
IGNyZWF0ZUphdmFQcm9qZWN0KCJQIik7CisJCQlQYXRoIGxpYlBhdGggPSBuZXcgUGF0aChqYXJG
aWxlUGF0aCk7CisJCQlJQ2xhc3NwYXRoQXR0cmlidXRlIGF0dHJpYnV0ZSA9IEphdmFDb3JlLm5l
d0NsYXNzcGF0aEF0dHJpYnV0ZShJQ2xhc3NwYXRoQXR0cmlidXRlLklOREVYX0xPQ0FUSU9OX0FU
VFJJQlVURV9OQU1FLCAiZmlsZTovLy8iK2luZGV4RmlsZVBhdGgpOworCQkJSUNsYXNzcGF0aEVu
dHJ5IGVudHJ5ID0gSmF2YUNvcmUubmV3TGlicmFyeUVudHJ5KGxpYlBhdGgsIG51bGwsIG51bGws
IG51bGwsIG5ldyBJQ2xhc3NwYXRoQXR0cmlidXRlW117YXR0cmlidXRlfSwgZmFsc2UpOworCQkJ
c2V0Q2xhc3NwYXRoKHAsIG5ldyBJQ2xhc3NwYXRoRW50cnlbXSB7ZW50cnl9KTsKKwkJCXdhaXRV
bnRpbEluZGV4ZXNSZWFkeSgpOworCQkJCisJCQlzZWFyY2goIlRlc3QiLCBUWVBFLCBERUNMQVJB
VElPTlMsIEVYQUNUX1JVTEUsIFNlYXJjaEVuZ2luZS5jcmVhdGVKYXZhU2VhcmNoU2NvcGUobmV3
IElKYXZhRWxlbWVudFtde3B9KSk7CisJCQlhc3NlcnRTZWFyY2hSZXN1bHRzKGdldEV4dGVybmFs
UGF0aCgpICsgIlRlc3QuamFyIHBrZy5UZXN0Iik7CisJCQkKKwkJCXNpbXVsYXRlRXhpdFJlc3Rh
cnQoKTsKKwkJCUZpbGUgaW5kZXhGaWxlID0gbmV3IEZpbGUoaW5kZXhGaWxlUGF0aCk7CisJCQlp
bmRleEZpbGUuZGVsZXRlKCk7CisJCQlhc3NlcnRUcnVlKCFpbmRleEZpbGUuZXhpc3RzKCkpOwor
CQkJZ2V0SmF2YU1vZGVsKCkucmVmcmVzaEV4dGVybmFsQXJjaGl2ZXMobnVsbCxudWxsKTsKKwkJ
CXdhaXRVbnRpbEluZGV4ZXNSZWFkeSgpOworCQkJCisJCQl0aGlzLnJlc3VsdENvbGxlY3RvciA9
IG5ldyBKYXZhU2VhcmNoUmVzdWx0Q29sbGVjdG9yKCk7CisJCQlzZWFyY2goIlRlc3QiLCBUWVBF
LCBERUNMQVJBVElPTlMsIEVYQUNUX1JVTEUsIFNlYXJjaEVuZ2luZS5jcmVhdGVKYXZhU2VhcmNo
U2NvcGUobmV3IElKYXZhRWxlbWVudFtde3B9KSk7CisJCQlhc3NlcnRTZWFyY2hSZXN1bHRzKGdl
dEV4dGVybmFsUGF0aCgpICsgIlRlc3QuamFyIHBrZy5UZXN0Iik7CisJCQkKKwkJfSBmaW5hbGx5
IHsKKwkJCWRlbGV0ZVByb2plY3QoIlAiKTsKKwkJCW5ldyBGaWxlKGluZGV4RmlsZVBhdGgpLmRl
bGV0ZSgpOworCQkJbmV3IEZpbGUoamFyRmlsZVBhdGgpLmRlbGV0ZSgpOworCQl9CisJfQorCQor
CS8vIHRlc3QgYSBub24tZXhpc3RlbnQgaW5kZXggd2hpY2ggYmVjb21lcyBleGlzdGVudCBhZnRl
ciByZXN0YXJ0CisJcHVibGljIHZvaWQgdGVzdEV4aXN0ZW50SW5kZXhBZnRlclJlc3RhcnQoKSB0
aHJvd3MgQ29yZUV4Y2VwdGlvbiwgSU9FeGNlcHRpb24geworCQlTdHJpbmcgaW5kZXhGaWxlUGF0
aCA9IGdldEV4dGVybmFsUmVzb3VyY2VQYXRoKCJUZXN0LmluZGV4Iik7CisJCVN0cmluZyBqYXJG
aWxlUGF0aCA9IGdldEV4dGVybmFsUmVzb3VyY2VQYXRoKCJUZXN0LmphciIpOworCQl0cnkgewor
CQkJY3JlYXRlSmFyKG5ldyBTdHJpbmdbXSB7CisJCQkJCSJwa2cvVGVzdC5qYXZhIiwKKwkJCQkJ
InBhY2thZ2UgcGtnO1xuIiArCisJCQkJCSJwdWJsaWMgY2xhc3MgVGVzdCB7XG4iICsKKwkJCQkJ
IiAgcHJvdGVjdGVkIFRlc3QoaW50IGkpIHt9XG4iICsKKwkJCQkJIn0ifSwgamFyRmlsZVBhdGgp
OworCQkJCisJCQlGaWxlIGluZGV4RmlsZSA9IG5ldyBGaWxlKGluZGV4RmlsZVBhdGgpOworCQkJ
aW5kZXhGaWxlLmRlbGV0ZSgpOworCQkJYXNzZXJ0VHJ1ZSghaW5kZXhGaWxlLmV4aXN0cygpKTsK
KwkJCQorCQkJSUphdmFQcm9qZWN0IHAgPSBjcmVhdGVKYXZhUHJvamVjdCgiUCIpOworCQkJUGF0
aCBsaWJQYXRoID0gbmV3IFBhdGgoamFyRmlsZVBhdGgpOworCQkJSUNsYXNzcGF0aEF0dHJpYnV0
ZSBhdHRyaWJ1dGUgPSBKYXZhQ29yZS5uZXdDbGFzc3BhdGhBdHRyaWJ1dGUoSUNsYXNzcGF0aEF0
dHJpYnV0ZS5JTkRFWF9MT0NBVElPTl9BVFRSSUJVVEVfTkFNRSwgImZpbGU6Ly8vIitpbmRleEZp
bGVQYXRoKTsKKwkJCUlDbGFzc3BhdGhFbnRyeSBlbnRyeSA9IEphdmFDb3JlLm5ld0xpYnJhcnlF
bnRyeShsaWJQYXRoLCBudWxsLCBudWxsLCBudWxsLCBuZXcgSUNsYXNzcGF0aEF0dHJpYnV0ZVtd
e2F0dHJpYnV0ZX0sIGZhbHNlKTsKKwkJCXNldENsYXNzcGF0aChwLCBuZXcgSUNsYXNzcGF0aEVu
dHJ5W10ge2VudHJ5fSk7CisJCQl3YWl0VW50aWxJbmRleGVzUmVhZHkoKTsKKwkJCQorCQkJc2Vh
cmNoKCJUZXN0IiwgVFlQRSwgREVDTEFSQVRJT05TLCBFWEFDVF9SVUxFLCBTZWFyY2hFbmdpbmUu
Y3JlYXRlSmF2YVNlYXJjaFNjb3BlKG5ldyBJSmF2YUVsZW1lbnRbXXtwfSkpOworCQkJYXNzZXJ0
U2VhcmNoUmVzdWx0cyhnZXRFeHRlcm5hbFBhdGgoKSArICJUZXN0LmphciBwa2cuVGVzdCIpOwor
CQkJCisJCQlKYXZhSW5kZXhlci5nZW5lcmF0ZUluZGV4Rm9ySmFyKGphckZpbGVQYXRoLCBpbmRl
eEZpbGVQYXRoKTsKKwkJCXNpbXVsYXRlRXhpdFJlc3RhcnQoKTsKKwkJCWdldEphdmFNb2RlbCgp
LnJlZnJlc2hFeHRlcm5hbEFyY2hpdmVzKG51bGwsbnVsbCk7CisJCQl3YWl0VW50aWxJbmRleGVz
UmVhZHkoKTsKKwkJCQorCQkJdGhpcy5yZXN1bHRDb2xsZWN0b3IgPSBuZXcgSmF2YVNlYXJjaFJl
c3VsdENvbGxlY3RvcigpOworCQkJc2VhcmNoKCJUZXN0IiwgVFlQRSwgREVDTEFSQVRJT05TLCBF
WEFDVF9SVUxFLCBTZWFyY2hFbmdpbmUuY3JlYXRlSmF2YVNlYXJjaFNjb3BlKG5ldyBJSmF2YUVs
ZW1lbnRbXXtwfSkpOworCQkJYXNzZXJ0U2VhcmNoUmVzdWx0cyhnZXRFeHRlcm5hbFBhdGgoKSAr
ICJUZXN0LmphciBwa2cuVGVzdCIpOworCQkJCisJCQlpbmRleEZpbGUgPSBKYXZhTW9kZWxNYW5h
Z2VyLmdldEluZGV4TWFuYWdlcigpLmdldEluZGV4KGxpYlBhdGgsIGZhbHNlLCBmYWxzZSkuZ2V0
SW5kZXhGaWxlKCk7CisJCQlhc3NlcnRFcXVhbHMoaW5kZXhGaWxlUGF0aCxpbmRleEZpbGUudG9T
dHJpbmcoKSk7CisJCX0gZmluYWxseSB7CisJCQlkZWxldGVQcm9qZWN0KCJQIik7CisJCQluZXcg
RmlsZShpbmRleEZpbGVQYXRoKS5kZWxldGUoKTsKKwkJCW5ldyBGaWxlKGphckZpbGVQYXRoKS5k
ZWxldGUoKTsKKwkJfQorCX0KKwkKKwkvLyBUZXN0IHRoYXQgdGhlIGluZGV4IGZpbGUgaXMgbm90
IGRlbGV0ZWQgd2hlbiB0aGUgcHJvamVjdCBpcyBkZWxldGVkCisJcHVibGljIHZvaWQgdGVzdERl
bGV0ZVByb2plY3QoKSB0aHJvd3MgQ29yZUV4Y2VwdGlvbiwgSU9FeGNlcHRpb24geworCQlTdHJp
bmcgaW5kZXhGaWxlUGF0aCA9IGdldEV4dGVybmFsUmVzb3VyY2VQYXRoKCJUZXN0LmluZGV4Iik7
CisJCVN0cmluZyBqYXJGaWxlUGF0aCA9IGdldEV4dGVybmFsUmVzb3VyY2VQYXRoKCJUZXN0Lmph
ciIpOworCQl0cnkgeworCQkJY3JlYXRlSmFyKG5ldyBTdHJpbmdbXSB7CisJCQkJCSJwa2cvVGVz
dC5qYXZhIiwKKwkJCQkJInBhY2thZ2UgcGtnO1xuIiArCisJCQkJCSJwdWJsaWMgY2xhc3MgVGVz
dCB7XG4iICsKKwkJCQkJIiAgcHJvdGVjdGVkIFRlc3QoaW50IGkpIHt9XG4iICsKKwkJCQkJIn0i
fSwgamFyRmlsZVBhdGgpOworCQkJSmF2YUluZGV4ZXIuZ2VuZXJhdGVJbmRleEZvckphcihqYXJG
aWxlUGF0aCwgaW5kZXhGaWxlUGF0aCk7CisJCQlJSmF2YVByb2plY3QgcCA9IGNyZWF0ZUphdmFQ
cm9qZWN0KCJQIik7CisJCQljcmVhdGVFeHRlcm5hbEZvbGRlcigiZXh0ZXJuYWxMaWIiKTsKKwkJ
CVBhdGggbGliUGF0aCA9IG5ldyBQYXRoKGphckZpbGVQYXRoKTsKKwkJCUlDbGFzc3BhdGhBdHRy
aWJ1dGUgYXR0cmlidXRlID0gSmF2YUNvcmUubmV3Q2xhc3NwYXRoQXR0cmlidXRlKElDbGFzc3Bh
dGhBdHRyaWJ1dGUuSU5ERVhfTE9DQVRJT05fQVRUUklCVVRFX05BTUUsICJmaWxlOi8vLyIraW5k
ZXhGaWxlUGF0aCk7CisJCQlJQ2xhc3NwYXRoRW50cnkgZW50cnkgPSBKYXZhQ29yZS5uZXdMaWJy
YXJ5RW50cnkobGliUGF0aCwgbnVsbCwgbnVsbCwgbnVsbCwgbmV3IElDbGFzc3BhdGhBdHRyaWJ1
dGVbXXthdHRyaWJ1dGV9LCBmYWxzZSk7CisJCQlzZXRDbGFzc3BhdGgocCwgbmV3IElDbGFzc3Bh
dGhFbnRyeVtdIHtlbnRyeX0pOworCQkJd2FpdFVudGlsSW5kZXhlc1JlYWR5KCk7CisJCQlkZWxl
dGVQcm9qZWN0KCJQIik7CisJCQlGaWxlIGYgPSBuZXcgRmlsZShpbmRleEZpbGVQYXRoKTsKKwkJ
CWFzc2VydFRydWUoZi5leGlzdHMoKSk7CisJCX0gZmluYWxseSB7CisJCQluZXcgRmlsZShpbmRl
eEZpbGVQYXRoKS5kZWxldGUoKTsKKwkJCW5ldyBGaWxlKGphckZpbGVQYXRoKS5kZWxldGUoKTsK
KwkJfQorCX0KKwkKKworCQorCS8vIFRlc3QgaW5kZXggZmlsZSBpbiBwbGF0Zm9ybQorCXB1Ymxp
YyB2b2lkIHRlc3RQbGF0Zm9ybUluZGV4RmlsZSgpIHRocm93cyBDb3JlRXhjZXB0aW9uLCBJT0V4
Y2VwdGlvbiB7CisJCVN0cmluZyBpbmRleEZpbGVQYXRoID0gbnVsbDsKKwkJU3RyaW5nIGphckZp
bGVQYXRoID0gZ2V0RXh0ZXJuYWxSZXNvdXJjZVBhdGgoIlRlc3QuamFyIik7CisJCVN0cmluZyBp
bmRleFVybCA9ICJwbGF0Zm9ybTovcmVzb3VyY2UvUC9UZXN0LmluZGV4IjsKKwkJdHJ5IHsKKwkJ
CWNyZWF0ZUphcihuZXcgU3RyaW5nW10geworCQkJCQkicGtnL1Rlc3QuamF2YSIsCisJCQkJCSJw
YWNrYWdlIHBrZztcbiIgKworCQkJCQkicHVibGljIGNsYXNzIFRlc3Qge1xuIiArCisJCQkJCSIg
IHByb3RlY3RlZCBUZXN0KGludCBpKSB7fVxuIiArCisJCQkJCSJ9In0sIGphckZpbGVQYXRoKTsK
KwkJCQorCQkJSUphdmFQcm9qZWN0IHAgPSBjcmVhdGVKYXZhUHJvamVjdCgiUCIpOworCQkJaW5k
ZXhGaWxlUGF0aCA9IHAuZ2V0UHJvamVjdCgpLmdldExvY2F0aW9uKCkuYXBwZW5kKCJUZXN0Lmlu
ZGV4IikudG9GaWxlKCkuZ2V0QWJzb2x1dGVQYXRoKCk7CisJCQlKYXZhSW5kZXhlci5nZW5lcmF0
ZUluZGV4Rm9ySmFyKGphckZpbGVQYXRoLCBpbmRleEZpbGVQYXRoKTsKKwkJCWxvbmcgbW9kaWZp
ZWQgPSBuZXcgRmlsZShpbmRleEZpbGVQYXRoKS5sYXN0TW9kaWZpZWQoKTsKKwkJCQorCQkJUGF0
aCBsaWJQYXRoID0gbmV3IFBhdGgoamFyRmlsZVBhdGgpOworCQkJSUNsYXNzcGF0aEF0dHJpYnV0
ZSBhdHRyaWJ1dGUgPSBKYXZhQ29yZS5uZXdDbGFzc3BhdGhBdHRyaWJ1dGUoSUNsYXNzcGF0aEF0
dHJpYnV0ZS5JTkRFWF9MT0NBVElPTl9BVFRSSUJVVEVfTkFNRSwgaW5kZXhVcmwpOworCQkJSUNs
YXNzcGF0aEVudHJ5IGVudHJ5ID0gSmF2YUNvcmUubmV3TGlicmFyeUVudHJ5KGxpYlBhdGgsIG51
bGwsIG51bGwsIG51bGwsIG5ldyBJQ2xhc3NwYXRoQXR0cmlidXRlW117YXR0cmlidXRlfSwgZmFs
c2UpOworCQkJc2V0Q2xhc3NwYXRoKHAsIG5ldyBJQ2xhc3NwYXRoRW50cnlbXSB7ZW50cnl9KTsK
KwkJCXdhaXRVbnRpbEluZGV4ZXNSZWFkeSgpOworCQkJCisJCQlzZWFyY2goIlRlc3QiLCBUWVBF
LCBERUNMQVJBVElPTlMsIEVYQUNUX1JVTEUsIFNlYXJjaEVuZ2luZS5jcmVhdGVKYXZhU2VhcmNo
U2NvcGUobmV3IElKYXZhRWxlbWVudFtde3B9KSk7CisJCQlhc3NlcnRTZWFyY2hSZXN1bHRzKGdl
dEV4dGVybmFsUGF0aCgpICsgIlRlc3QuamFyIHBrZy5UZXN0Iik7CisJCQkKKwkJCVN0cmluZyBp
bmRleEZpbGVOYW1lID0gSmF2YU1vZGVsTWFuYWdlci5nZXRJbmRleE1hbmFnZXIoKS5nZXRJbmRl
eChsaWJQYXRoLCBmYWxzZSwgZmFsc2UpLmdldEluZGV4RmlsZSgpLmdldE5hbWUoKTsKKwkJCWFz
c2VydEVxdWFscyhpbmRleEZpbGVOYW1lLCAiVGVzdC5pbmRleCIpOworCQkJCisJCQlzaW11bGF0
ZUV4aXRSZXN0YXJ0KCk7CisJCQlnZXRKYXZhTW9kZWwoKS5yZWZyZXNoRXh0ZXJuYWxBcmNoaXZl
cyhudWxsLG51bGwpOworCQkJd2FpdFVudGlsSW5kZXhlc1JlYWR5KCk7CisJCQkKKwkJCXRoaXMu
cmVzdWx0Q29sbGVjdG9yID0gbmV3IEphdmFTZWFyY2hSZXN1bHRDb2xsZWN0b3IoKTsKKwkJCXNl
YXJjaCgiVGVzdCIsIFRZUEUsIERFQ0xBUkFUSU9OUywgRVhBQ1RfUlVMRSwgU2VhcmNoRW5naW5l
LmNyZWF0ZUphdmFTZWFyY2hTY29wZShuZXcgSUphdmFFbGVtZW50W117cH0pKTsKKwkJCWFzc2Vy
dFNlYXJjaFJlc3VsdHMoZ2V0RXh0ZXJuYWxQYXRoKCkgKyAiVGVzdC5qYXIgcGtnLlRlc3QiKTsK
KwkJCQorCQkJaW5kZXhGaWxlTmFtZSA9IEphdmFNb2RlbE1hbmFnZXIuZ2V0SW5kZXhNYW5hZ2Vy
KCkuZ2V0SW5kZXgobGliUGF0aCwgZmFsc2UsIGZhbHNlKS5nZXRJbmRleEZpbGUoKS5nZXROYW1l
KCk7CisJCQlhc3NlcnRFcXVhbHMoaW5kZXhGaWxlTmFtZSwgIlRlc3QuaW5kZXgiKTsKKworCQkJ
YXNzZXJ0RXF1YWxzKG1vZGlmaWVkLCBuZXcgRmlsZShpbmRleEZpbGVQYXRoKS5sYXN0TW9kaWZp
ZWQoKSk7CisJCX0gZmluYWxseSB7CisJCQlkZWxldGVQcm9qZWN0KCJQIik7CisJCQlpZiAoaW5k
ZXhGaWxlUGF0aCAhPSBudWxsKSBuZXcgRmlsZShpbmRleEZpbGVQYXRoKS5kZWxldGUoKTsKKwkJ
CW5ldyBGaWxlKGphckZpbGVQYXRoKS5kZWxldGUoKTsKKwkJfQorCX0KKwkKKwkKKwlwdWJsaWMg
dm9pZCB0ZXN0RWRpdENsYXNzcGF0aCgpIHRocm93cyBDb3JlRXhjZXB0aW9uLCBJT0V4Y2VwdGlv
biB7CisJCVN0cmluZyBpbmRleEZpbGVQYXRoID0gZ2V0RXh0ZXJuYWxSZXNvdXJjZVBhdGgoIlRl
c3QuaW5kZXgiKTsKKwkJU3RyaW5nIGphckZpbGVQYXRoID0gZ2V0RXh0ZXJuYWxSZXNvdXJjZVBh
dGgoIlRlc3QuamFyIik7CisJCXRyeSB7CisJCQljcmVhdGVKYXIobmV3IFN0cmluZ1tdIHsKKwkJ
CQkJInBrZy9UZXN0LmphdmEiLAorCQkJCQkicGFja2FnZSBwa2c7XG4iICsKKwkJCQkJInB1Ymxp
YyBjbGFzcyBUZXN0IHtcbiIgKworCQkJCQkiICBwcm90ZWN0ZWQgVGVzdChpbnQgaSkge31cbiIg
KworCQkJCQkifSJ9LCBqYXJGaWxlUGF0aCk7CisJCQlKYXZhSW5kZXhlci5nZW5lcmF0ZUluZGV4
Rm9ySmFyKGphckZpbGVQYXRoLCBpbmRleEZpbGVQYXRoKTsKKwkJCUZpbGUgZiA9IG5ldyBGaWxl
KGluZGV4RmlsZVBhdGgpOworCQkJbG9uZyBtb2RpZmllZCA9IGYubGFzdE1vZGlmaWVkKCk7CisJ
CQlJSmF2YVByb2plY3QgcCA9IHRoaXMuY3JlYXRlSmF2YVByb2plY3QoIlAiLCBuZXcgU3RyaW5n
W10ge30sICJiaW4iKTsKKworCQkJU3RyaW5nIGNvbnRlbnQgPSBuZXcgU3RyaW5nKAorCQkJCQki
PD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+XG4iCisJCQkJCSsgIjxj
bGFzc3BhdGg+XG4iCisJCQkJCSsgIjxjbGFzc3BhdGhlbnRyeSBraW5kPVwic3JjXCIgcGF0aD1c
InNyYyBhXCIvPlxuIgorCQkJCQkrICI8Y2xhc3NwYXRoZW50cnkga2luZD1cInNyY1wiIHBhdGg9
XCJzcmMgeFwiLz5cbiIKKwkJCQkJKyAiPGNsYXNzcGF0aGVudHJ5IGtpbmQ9XCJsaWJcIiBwYXRo
PVwiIgorCQkJCQkrIGdldEV4dGVybmFsSkNMUGF0aCgpCisJCQkJCSsgIlwiLz5cbiIKKwkJCQkJ
KyAiPGNsYXNzcGF0aGVudHJ5IGtpbmQ9XCJsaWJcIiBwYXRoPVwiIgorCQkJCQkrIGphckZpbGVQ
YXRoCisJCQkJCSsgIlwiPiIKKwkJCQkJKyAiPGF0dHJpYnV0ZXM+XG4iIAorCQkJCQkrICIJPGF0
dHJpYnV0ZSBuYW1lPVwiaW5kZXhfbG9jYXRpb25cIiB2YWx1ZT1cImZpbGU6Ly8vIgorCQkJCQkr
IGluZGV4RmlsZVBhdGgKKwkJCQkJKyJcIi8+XG4iIAorCQkJCQkrICI8L2F0dHJpYnV0ZXM+XG4i
CisJCQkJCSsgIjwvY2xhc3NwYXRoZW50cnk+XG4iCisJCQkJCSsgIjxjbGFzc3BhdGhlbnRyeSBr
aW5kPVwib3V0cHV0XCIgcGF0aD1cImJpblwiLz5cbiIKKwkJCQkJKyAiPC9jbGFzc3BhdGg+XG4i
KTsKKworCQkJZWRpdEZpbGUoIi9QLy5jbGFzc3BhdGgiLCBjb250ZW50KTsKKwkJCXAub3Blbihu
dWxsKTsKKwkJCXdhaXRVbnRpbEluZGV4ZXNSZWFkeSgpOworCQkJc2VhcmNoKCJUZXN0IiwgVFlQ
RSwgREVDTEFSQVRJT05TLCBFWEFDVF9SVUxFLCBTZWFyY2hFbmdpbmUuY3JlYXRlSmF2YVNlYXJj
aFNjb3BlKG5ldyBJSmF2YUVsZW1lbnRbXXtwfSkpOworCQkJYXNzZXJ0U2VhcmNoUmVzdWx0cyhn
ZXRFeHRlcm5hbFBhdGgoKSArICJUZXN0LmphciBwa2cuVGVzdCIpOworCQkJamF2YS5pby5GaWxl
IGluZGV4RmlsZSA9IEphdmFNb2RlbE1hbmFnZXIuZ2V0SW5kZXhNYW5hZ2VyKCkuZ2V0SW5kZXgo
bmV3IFBhdGgoamFyRmlsZVBhdGgpLCBmYWxzZSwgZmFsc2UpLmdldEluZGV4RmlsZSgpOworCQkJ
YXNzZXJ0RXF1YWxzKGluZGV4RmlsZVBhdGgsaW5kZXhGaWxlLnRvU3RyaW5nKCkpOworCQkJZiA9
IG5ldyBGaWxlKGluZGV4RmlsZVBhdGgpOworCQkJYXNzZXJ0RXF1YWxzKG1vZGlmaWVkLCBmLmxh
c3RNb2RpZmllZCgpKTsKKwkJfSBmaW5hbGx5IHsKKwkJCWRlbGV0ZVByb2plY3QoIlAiKTsKKwkJ
CW5ldyBGaWxlKGluZGV4RmlsZVBhdGgpLmRlbGV0ZSgpOworCQkJbmV3IEZpbGUoamFyRmlsZVBh
dGgpLmRlbGV0ZSgpOworCQl9CisJfQorCQorCS8vIFRlc3QgY2hhbmdpbmcgdGhlIGNsYXNzcGF0
aAkKKwlwdWJsaWMgdm9pZCB0ZXN0Q2hhbmdlQ2xhc3NwYXRoKCkgdGhyb3dzIENvcmVFeGNlcHRp
b24sIElPRXhjZXB0aW9uIHsKKwkJU3RyaW5nIGluZGV4RmlsZVBhdGggPSBnZXRFeHRlcm5hbFJl
c291cmNlUGF0aCgiVGVzdC5pbmRleCIpOworCQlTdHJpbmcgamFyRmlsZVBhdGggPSBnZXRFeHRl
cm5hbFJlc291cmNlUGF0aCgiVGVzdC5qYXIiKTsKKwkJdHJ5IHsKKwkJCWNyZWF0ZUphcihuZXcg
U3RyaW5nW10geworCQkJCQkicGtnL1Rlc3QuamF2YSIsCisJCQkJCSJwYWNrYWdlIHBrZztcbiIg
KworCQkJCQkicHVibGljIGNsYXNzIFRlc3Qge1xuIiArCisJCQkJCSIgIHByb3RlY3RlZCBUZXN0
KGludCBpKSB7fVxuIiArCisJCQkJCSJ9In0sIGphckZpbGVQYXRoKTsKKwkJCUphdmFJbmRleGVy
LmdlbmVyYXRlSW5kZXhGb3JKYXIoamFyRmlsZVBhdGgsIGluZGV4RmlsZVBhdGgpOworCQkJY3Jl
YXRlSmFyKG5ldyBTdHJpbmdbXSB7CisJCQkJCSJwa2cvVGVzdC5qYXZhIiwKKwkJCQkJInBhY2th
Z2UgcGtnO1xuIiArCisJCQkJCSJwdWJsaWMgY2xhc3MgVGVzdCB7XG4iICsKKwkJCQkJIiAgcHJv
dGVjdGVkIFRlc3QoaW50IGkpIHt9XG4iICsKKwkJCQkJIn0iLCAKKwkJCQkJInBrZy9OZXdUZXN0
LmphdmEiLAorCQkJCQkicGFja2FnZSBwa2c7XG4iICsKKwkJCQkJInB1YmxpYyBjbGFzcyBOZXdU
ZXN0IHtcbiIgKworCQkJCQkiICBwcm90ZWN0ZWQgTmV3VGVzdChpbnQgaSkge31cbiIgKworCQkJ
CQkifSJ9LCBqYXJGaWxlUGF0aCk7CisJCQlJSmF2YVByb2plY3QgcCA9IGNyZWF0ZUphdmFQcm9q
ZWN0KCJQIik7CisJCQlQYXRoIGxpYlBhdGggPSBuZXcgUGF0aChqYXJGaWxlUGF0aCk7CisJCQkK
KwkJCUlDbGFzc3BhdGhFbnRyeSBlbnRyeSA9IEphdmFDb3JlLm5ld0xpYnJhcnlFbnRyeShsaWJQ
YXRoLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBmYWxzZSk7CisJCQlzZXRDbGFzc3BhdGgocCwg
bmV3IElDbGFzc3BhdGhFbnRyeVtdIHtlbnRyeX0pOworCQkJd2FpdFVudGlsSW5kZXhlc1JlYWR5
KCk7CisJCQlzZWFyY2goIk5ld1Rlc3QiLCBUWVBFLCBERUNMQVJBVElPTlMsIEVYQUNUX1JVTEUs
IFNlYXJjaEVuZ2luZS5jcmVhdGVKYXZhU2VhcmNoU2NvcGUobmV3IElKYXZhRWxlbWVudFtde3B9
KSk7CisJCQlhc3NlcnRTZWFyY2hSZXN1bHRzKGdldEV4dGVybmFsUGF0aCgpICsgIlRlc3QuamFy
IHBrZy5OZXdUZXN0Iik7CisJCQkKKwkJCUlDbGFzc3BhdGhBdHRyaWJ1dGUgYXR0cmlidXRlID0g
SmF2YUNvcmUubmV3Q2xhc3NwYXRoQXR0cmlidXRlKElDbGFzc3BhdGhBdHRyaWJ1dGUuSU5ERVhf
TE9DQVRJT05fQVRUUklCVVRFX05BTUUsICJmaWxlOi8vLyIraW5kZXhGaWxlUGF0aCk7CisJCQll
bnRyeSA9IEphdmFDb3JlLm5ld0xpYnJhcnlFbnRyeShsaWJQYXRoLCBudWxsLCBudWxsLCBudWxs
LCBuZXcgSUNsYXNzcGF0aEF0dHJpYnV0ZVtde2F0dHJpYnV0ZX0sIGZhbHNlKTsKKwkJCXNldENs
YXNzcGF0aChwLCBuZXcgSUNsYXNzcGF0aEVudHJ5W10ge2VudHJ5fSk7CisJCQl3YWl0VW50aWxJ
bmRleGVzUmVhZHkoKTsKKwkJCXRoaXMucmVzdWx0Q29sbGVjdG9yID0gbmV3IEphdmFTZWFyY2hS
ZXN1bHRDb2xsZWN0b3IoKTsKKwkJCXNlYXJjaCgiTmV3VGVzdCIsIFRZUEUsIERFQ0xBUkFUSU9O
UywgRVhBQ1RfUlVMRSwgU2VhcmNoRW5naW5lLmNyZWF0ZUphdmFTZWFyY2hTY29wZShuZXcgSUph
dmFFbGVtZW50W117cH0pKTsKKwkJCWFzc2VydFNlYXJjaFJlc3VsdHMoIiIpOworCQkJCisJCQll
bnRyeSA9IEphdmFDb3JlLm5ld0xpYnJhcnlFbnRyeShsaWJQYXRoLCBudWxsLCBudWxsLCBudWxs
LCBudWxsLCBmYWxzZSk7CisJCQlzZXRDbGFzc3BhdGgocCwgbmV3IElDbGFzc3BhdGhFbnRyeVtd
IHtlbnRyeX0pOworCQkJd2FpdFVudGlsSW5kZXhlc1JlYWR5KCk7CisJCQl0aGlzLnJlc3VsdENv
bGxlY3RvciA9IG5ldyBKYXZhU2VhcmNoUmVzdWx0Q29sbGVjdG9yKCk7CisJCQlzZWFyY2goIk5l
d1Rlc3QiLCBUWVBFLCBERUNMQVJBVElPTlMsIEVYQUNUX1JVTEUsIFNlYXJjaEVuZ2luZS5jcmVh
dGVKYXZhU2VhcmNoU2NvcGUobmV3IElKYXZhRWxlbWVudFtde3B9KSk7CisJCQlhc3NlcnRTZWFy
Y2hSZXN1bHRzKGdldEV4dGVybmFsUGF0aCgpICsgIlRlc3QuamFyIHBrZy5OZXdUZXN0Iik7CisJ
CQkKKwkJCQorCQl9IGZpbmFsbHkgeworCQkJZGVsZXRlUHJvamVjdCgiUCIpOworCQkJbmV3IEZp
bGUoaW5kZXhGaWxlUGF0aCkuZGVsZXRlKCk7CisJCQluZXcgRmlsZShqYXJGaWxlUGF0aCkuZGVs
ZXRlKCk7CisJCX0KKwl9CisJCisJLy8gVGVzdCBjaGFuZ2luZyB0aGUgY2xhc3NwYXRoCQorCXB1
YmxpYyB2b2lkIHRlc3RDaGFuZ2VDbGFzc3BhdGhGb3JJbnRlcm5hbEphcigpIHRocm93cyBDb3Jl
RXhjZXB0aW9uLCBJT0V4Y2VwdGlvbiB7CisJCVN0cmluZyBpbmRleEZpbGVQYXRoID0gZ2V0RXh0
ZXJuYWxSZXNvdXJjZVBhdGgoIlRlc3QuaW5kZXgiKTsKKwkJU3RyaW5nIGphckZpbGVQYXRoID0g
Ii9QL1Rlc3QuamFyIjsKKwkJdHJ5IHsKKwkJCUlKYXZhUHJvamVjdCBwID0gY3JlYXRlSmF2YVBy
b2plY3QoIlAiKTsKKwkJCWNyZWF0ZUphcihuZXcgU3RyaW5nW10geworCQkJCQkicGtnL1Rlc3Qu
amF2YSIsCisJCQkJCSJwYWNrYWdlIHBrZztcbiIgKworCQkJCQkicHVibGljIGNsYXNzIFRlc3Qg
e1xuIiArCisJCQkJCSIgIHByb3RlY3RlZCBUZXN0KGludCBpKSB7fVxuIiArCisJCQkJCSJ9In0s
IGphckZpbGVQYXRoKTsKKwkJCUphdmFJbmRleGVyLmdlbmVyYXRlSW5kZXhGb3JKYXIoamFyRmls
ZVBhdGgsIGluZGV4RmlsZVBhdGgpOworCQkJY3JlYXRlSmFyKG5ldyBTdHJpbmdbXSB7CisJCQkJ
CSJwa2cvVGVzdC5qYXZhIiwKKwkJCQkJInBhY2thZ2UgcGtnO1xuIiArCisJCQkJCSJwdWJsaWMg
Y2xhc3MgVGVzdCB7XG4iICsKKwkJCQkJIiAgcHJvdGVjdGVkIFRlc3QoaW50IGkpIHt9XG4iICsK
KwkJCQkJIn0iLCAKKwkJCQkJInBrZy9OZXdUZXN0LmphdmEiLAorCQkJCQkicGFja2FnZSBwa2c7
XG4iICsKKwkJCQkJInB1YmxpYyBjbGFzcyBOZXdUZXN0IHtcbiIgKworCQkJCQkiICBwcm90ZWN0
ZWQgTmV3VGVzdChpbnQgaSkge31cbiIgKworCQkJCQkifSJ9LCBqYXJGaWxlUGF0aCk7CisJCQlQ
YXRoIGxpYlBhdGggPSBuZXcgUGF0aChqYXJGaWxlUGF0aCk7CisJCQkKKwkJCUlDbGFzc3BhdGhF
bnRyeSBlbnRyeSA9IEphdmFDb3JlLm5ld0xpYnJhcnlFbnRyeShsaWJQYXRoLCBudWxsLCBudWxs
LCBudWxsLCBudWxsLCBmYWxzZSk7CisJCQlzZXRDbGFzc3BhdGgocCwgbmV3IElDbGFzc3BhdGhF
bnRyeVtdIHtlbnRyeX0pOworCQkJd2FpdFVudGlsSW5kZXhlc1JlYWR5KCk7CisJCQlzZWFyY2go
Ik5ld1Rlc3QiLCBUWVBFLCBERUNMQVJBVElPTlMsIEVYQUNUX1JVTEUsIFNlYXJjaEVuZ2luZS5j
cmVhdGVKYXZhU2VhcmNoU2NvcGUobmV3IElKYXZhRWxlbWVudFtde3B9KSk7CisJCQlhc3NlcnRT
ZWFyY2hSZXN1bHRzKCJcXFBcXFRlc3QuamFyIHBrZy5OZXdUZXN0Iik7CisJCQkKKwkJCUlDbGFz
c3BhdGhBdHRyaWJ1dGUgYXR0cmlidXRlID0gSmF2YUNvcmUubmV3Q2xhc3NwYXRoQXR0cmlidXRl
KElDbGFzc3BhdGhBdHRyaWJ1dGUuSU5ERVhfTE9DQVRJT05fQVRUUklCVVRFX05BTUUsICJmaWxl
Oi8vLyIraW5kZXhGaWxlUGF0aCk7CisJCQllbnRyeSA9IEphdmFDb3JlLm5ld0xpYnJhcnlFbnRy
eShsaWJQYXRoLCBudWxsLCBudWxsLCBudWxsLCBuZXcgSUNsYXNzcGF0aEF0dHJpYnV0ZVtde2F0
dHJpYnV0ZX0sIGZhbHNlKTsKKwkJCXNldENsYXNzcGF0aChwLCBuZXcgSUNsYXNzcGF0aEVudHJ5
W10ge2VudHJ5fSk7CisJCQl3YWl0VW50aWxJbmRleGVzUmVhZHkoKTsKKwkJCXRoaXMucmVzdWx0
Q29sbGVjdG9yID0gbmV3IEphdmFTZWFyY2hSZXN1bHRDb2xsZWN0b3IoKTsKKwkJCXNlYXJjaCgi
TmV3VGVzdCIsIFRZUEUsIERFQ0xBUkFUSU9OUywgRVhBQ1RfUlVMRSwgU2VhcmNoRW5naW5lLmNy
ZWF0ZUphdmFTZWFyY2hTY29wZShuZXcgSUphdmFFbGVtZW50W117cH0pKTsKKwkJCWFzc2VydFNl
YXJjaFJlc3VsdHMoIiIpOworCQkJCisJCQllbnRyeSA9IEphdmFDb3JlLm5ld0xpYnJhcnlFbnRy
eShsaWJQYXRoLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBmYWxzZSk7CisJCQlzZXRDbGFzc3Bh
dGgocCwgbmV3IElDbGFzc3BhdGhFbnRyeVtdIHtlbnRyeX0pOworCQkJd2FpdFVudGlsSW5kZXhl
c1JlYWR5KCk7CisJCQl0aGlzLnJlc3VsdENvbGxlY3RvciA9IG5ldyBKYXZhU2VhcmNoUmVzdWx0
Q29sbGVjdG9yKCk7CisJCQlzZWFyY2goIk5ld1Rlc3QiLCBUWVBFLCBERUNMQVJBVElPTlMsIEVY
QUNUX1JVTEUsIFNlYXJjaEVuZ2luZS5jcmVhdGVKYXZhU2VhcmNoU2NvcGUobmV3IElKYXZhRWxl
bWVudFtde3B9KSk7CisJCQlhc3NlcnRTZWFyY2hSZXN1bHRzKCJcXFBcXFRlc3QuamFyIHBrZy5O
ZXdUZXN0Iik7CisJCQkKKwkJCQorCQl9IGZpbmFsbHkgeworCQkJZGVsZXRlUHJvamVjdCgiUCIp
OworCQkJbmV3IEZpbGUoaW5kZXhGaWxlUGF0aCkuZGVsZXRlKCk7CisJCX0KKwl9CisJCQorCXB1
YmxpYyB2b2lkIHRlc3RNdWx0aXBsZVByb2plY3RzKCkgdGhyb3dzIENvcmVFeGNlcHRpb24sIElP
RXhjZXB0aW9uIHsKKwkJU3RyaW5nIGluZGV4RmlsZVBhdGggPSBnZXRFeHRlcm5hbFJlc291cmNl
UGF0aCgiVGVzdC5pbmRleCIpOworCQlTdHJpbmcgamFyRmlsZVBhdGggPSBnZXRFeHRlcm5hbFJl
c291cmNlUGF0aCgiVGVzdC5qYXIiKTsKKwkJdHJ5IHsKKwkJCWNyZWF0ZUphcihuZXcgU3RyaW5n
W10geworCQkJCQkicGtnL1Rlc3QuamF2YSIsCisJCQkJCSJwYWNrYWdlIHBrZztcbiIgKworCQkJ
CQkicHVibGljIGNsYXNzIFRlc3Qge1xuIiArCisJCQkJCSIgIHByb3RlY3RlZCBUZXN0KGludCBp
KSB7fVxuIiArCisJCQkJCSJ9In0sIGphckZpbGVQYXRoKTsKKwkJCUphdmFJbmRleGVyLmdlbmVy
YXRlSW5kZXhGb3JKYXIoamFyRmlsZVBhdGgsIGluZGV4RmlsZVBhdGgpOworCQkJCisJCQlJSmF2
YVByb2plY3QgcDEgPSBjcmVhdGVKYXZhUHJvamVjdCgiUDEiKTsKKwkJCVBhdGggbGliUGF0aCA9
IG5ldyBQYXRoKGphckZpbGVQYXRoKTsKKwkJCUlDbGFzc3BhdGhFbnRyeSBlbnRyeSA9IEphdmFD
b3JlLm5ld0xpYnJhcnlFbnRyeShsaWJQYXRoLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBmYWxz
ZSk7CisJCQlzZXRDbGFzc3BhdGgocDEsIG5ldyBJQ2xhc3NwYXRoRW50cnlbXSB7ZW50cnl9KTsK
KwkJCXdhaXRVbnRpbEluZGV4ZXNSZWFkeSgpOworCQkJCisJCQlJSmF2YVByb2plY3QgcDIgPSBj
cmVhdGVKYXZhUHJvamVjdCgiUDIiKTsKKwkJCUlDbGFzc3BhdGhBdHRyaWJ1dGUgYXR0cmlidXRl
ID0gSmF2YUNvcmUubmV3Q2xhc3NwYXRoQXR0cmlidXRlKElDbGFzc3BhdGhBdHRyaWJ1dGUuSU5E
RVhfTE9DQVRJT05fQVRUUklCVVRFX05BTUUsICJmaWxlOi8vLyIraW5kZXhGaWxlUGF0aCk7CisJ
CQllbnRyeSA9IEphdmFDb3JlLm5ld0xpYnJhcnlFbnRyeShsaWJQYXRoLCBudWxsLCBudWxsLCBu
dWxsLCBuZXcgSUNsYXNzcGF0aEF0dHJpYnV0ZVtde2F0dHJpYnV0ZX0sIGZhbHNlKTsKKwkJCXNl
dENsYXNzcGF0aChwMiwgbmV3IElDbGFzc3BhdGhFbnRyeVtdIHtlbnRyeX0pOworCQkJd2FpdFVu
dGlsSW5kZXhlc1JlYWR5KCk7CisJCQkKKwkJCXNlYXJjaCgiVGVzdCIsIFRZUEUsIERFQ0xBUkFU
SU9OUywgRVhBQ1RfUlVMRSwgU2VhcmNoRW5naW5lLmNyZWF0ZUphdmFTZWFyY2hTY29wZShuZXcg
SUphdmFFbGVtZW50W117cDF9KSk7CisJCQlhc3NlcnRTZWFyY2hSZXN1bHRzKGdldEV4dGVybmFs
UGF0aCgpICsgIlRlc3QuamFyIHBrZy5UZXN0Iik7CisJCQkKKwkJCUZpbGUgaW5kZXhGaWxlID0g
SmF2YU1vZGVsTWFuYWdlci5nZXRJbmRleE1hbmFnZXIoKS5nZXRJbmRleChsaWJQYXRoLCBmYWxz
ZSwgZmFsc2UpLmdldEluZGV4RmlsZSgpOworCQkJYXNzZXJ0RXF1YWxzKGluZGV4RmlsZVBhdGgs
aW5kZXhGaWxlLnRvU3RyaW5nKCkpOworCQkJCisJCX0gZmluYWxseSB7CisJCQlkZWxldGVQcm9q
ZWN0KCJQMSIpOworCQkJZGVsZXRlUHJvamVjdCgiUDIiKTsKKwkJCW5ldyBGaWxlKGluZGV4Rmls
ZVBhdGgpLmRlbGV0ZSgpOworCQkJbmV3IEZpbGUoamFyRmlsZVBhdGgpLmRlbGV0ZSgpOworCQl9
CisJfQorCQorCXB1YmxpYyB2b2lkIHNldENvbnRhaW5lclBhdGgoSUphdmFQcm9qZWN0IHAsIElQ
YXRoIGphclBhdGgsIFN0cmluZyBpbmRleExvY2F0aW9uKSB0aHJvd3MgQ29yZUV4Y2VwdGlvbiwg
QmFja2luZ1N0b3JlRXhjZXB0aW9uIHsKKwkJLy8gQ3JlYXRlIG5ldyB1c2VyIGxpYnJhcnkgIlNv
bWVVc2VyTGlicmFyeSIKKwkJQ2xhc3NwYXRoQ29udGFpbmVySW5pdGlhbGl6ZXIgaW5pdGlhbGl6
ZXI9IEphdmFDb3JlLmdldENsYXNzcGF0aENvbnRhaW5lckluaXRpYWxpemVyKEphdmFDb3JlLlVT
RVJfTElCUkFSWV9DT05UQUlORVJfSUQpOworCQlTdHJpbmcgbGlicmFyeU5hbWUgPSAiU29tZVVz
ZXJMaWJyYXJ5IjsKKwkJSVBhdGggY29udGFpbmVyUGF0aCA9IG5ldyBQYXRoKEphdmFDb3JlLlVT
RVJfTElCUkFSWV9DT05UQUlORVJfSUQpOworCQlVc2VyTGlicmFyeUNsYXNzcGF0aENvbnRhaW5l
ciBjb250YWluZXJTdWdnZXN0aW9uID0gbmV3IFVzZXJMaWJyYXJ5Q2xhc3NwYXRoQ29udGFpbmVy
KGxpYnJhcnlOYW1lKTsKKwkJaW5pdGlhbGl6ZXIucmVxdWVzdENsYXNzcGF0aENvbnRhaW5lclVw
ZGF0ZShjb250YWluZXJQYXRoLmFwcGVuZChsaWJyYXJ5TmFtZSksIG51bGwsIGNvbnRhaW5lclN1
Z2dlc3Rpb24pOworCisJCS8vIE1vZGlmeSB1c2VyIGxpYnJhcnkKKwkJSUVjbGlwc2VQcmVmZXJl
bmNlcyBwcmVmZXJlbmNlcyA9IEluc3RhbmNlU2NvcGUuSU5TVEFOQ0UuZ2V0Tm9kZShKYXZhQ29y
ZS5QTFVHSU5fSUQpOworCQlTdHJpbmcgcHJvcGVydHlOYW1lID0gSmF2YU1vZGVsTWFuYWdlci5D
UF9VU0VSTElCUkFSWV9QUkVGRVJFTkNFU19QUkVGSVgrIlNvbWVVc2VyTGlicmFyeSI7CisJCVN0
cmluZ0J1ZmZlciBwcm9wZXJ0eVZhbHVlID0gbmV3IFN0cmluZ0J1ZmZlcigiPD94bWwgdmVyc2lv
bj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+XHJcbjx1c2VybGlicmFyeSBzeXN0ZW1saWJy
YXJ5PVwiZmFsc2VcIiB2ZXJzaW9uPVwiMVwiPlxyXG48YXJjaGl2ZSAiKTsKKwkJLy9TdHJpbmcg
amFyRnVsbFBhdGggPSBnZXRXb3Jrc3BhY2VSb290KCkuZ2V0TG9jYXRpb24oKS5hcHBlbmQoamFy
RmlsZS5nZXRGdWxsUGF0aCgpKS50b1N0cmluZygpOworCQlwcm9wZXJ0eVZhbHVlLmFwcGVuZCgi
IHBhdGg9XCIiICsgamFyUGF0aCArICJcIj5cclxuIik7CisJCXByb3BlcnR5VmFsdWUuYXBwZW5k
KCIgPGF0dHJpYnV0ZXM+XHJcbiIpOworCQlwcm9wZXJ0eVZhbHVlLmFwcGVuZCgiCQk8YXR0cmli
dXRlIG5hbWU9XCJpbmRleF9sb2NhdGlvblwiIHZhbHVlPVwiIik7CisJCXByb3BlcnR5VmFsdWUu
YXBwZW5kKGluZGV4TG9jYXRpb24pOworCQlwcm9wZXJ0eVZhbHVlLmFwcGVuZCgiXCIvPlxyXG48
L2F0dHJpYnV0ZXM+XHJcbiIpOworCQlwcm9wZXJ0eVZhbHVlLmFwcGVuZCgiPC9hcmNoaXZlPlxy
XG4iKTsKKwkJcHJvcGVydHlWYWx1ZS5hcHBlbmQoIjwvdXNlcmxpYnJhcnk+XHJcbiIpOworCQlw
cmVmZXJlbmNlcy5wdXQocHJvcGVydHlOYW1lLCBwcm9wZXJ0eVZhbHVlLnRvU3RyaW5nKCkpOwor
CQlwcmVmZXJlbmNlcy5mbHVzaCgpOworCQkKKwkJSUNsYXNzcGF0aEVudHJ5W10gZW50cmllcyA9
IHAuZ2V0UmF3Q2xhc3NwYXRoKCk7CisJCWludCBsZW5ndGggPSBlbnRyaWVzLmxlbmd0aDsKKwkJ
U3lzdGVtLmFycmF5Y29weShlbnRyaWVzLCAwLCBlbnRyaWVzID0gbmV3IElDbGFzc3BhdGhFbnRy
eVtsZW5ndGgrMV0sIDAsIGxlbmd0aCk7CisJCWVudHJpZXNbbGVuZ3RoXSA9IEphdmFDb3JlLm5l
d0NvbnRhaW5lckVudHJ5KGNvbnRhaW5lclN1Z2dlc3Rpb24uZ2V0UGF0aCgpKTsKKwkJcC5zZXRS
YXdDbGFzc3BhdGgoZW50cmllcywgbnVsbCk7CisKKwl9CisJcHVibGljIHZvaWQgdGVzdFVzZXJM
aWJyYXJ5SW5kZXgoKSB0aHJvd3MgSU9FeGNlcHRpb24sIENvcmVFeGNlcHRpb24sIEJhY2tpbmdT
dG9yZUV4Y2VwdGlvbiB7CisJCVN0cmluZyBpbmRleEZpbGVQYXRoID0gZ2V0RXh0ZXJuYWxSZXNv
dXJjZVBhdGgoIlRlc3QuaW5kZXgiKTsKKwkJU3RyaW5nIGphckZpbGVQYXRoID0gZ2V0RXh0ZXJu
YWxSZXNvdXJjZVBhdGgoIlRlc3QuamFyIik7CisJCXRyeSB7CisJCQljcmVhdGVKYXIobmV3IFN0
cmluZ1tdIHsKKwkJCQkJInBrZy9UZXN0LmphdmEiLAorCQkJCQkicGFja2FnZSBwa2c7XG4iICsK
KwkJCQkJInB1YmxpYyBjbGFzcyBUZXN0IHtcbiIgKworCQkJCQkiICBwcm90ZWN0ZWQgVGVzdChp
bnQgaSkge31cbiIgKworCQkJCQkifSJ9LCBqYXJGaWxlUGF0aCk7CisJCQlKYXZhSW5kZXhlci5n
ZW5lcmF0ZUluZGV4Rm9ySmFyKGphckZpbGVQYXRoLCBpbmRleEZpbGVQYXRoKTsKKwkJCWxvbmcg
bW9kaWZpZWQgPSBuZXcgRmlsZShpbmRleEZpbGVQYXRoKS5sYXN0TW9kaWZpZWQoKTsKKwkJCQor
CQkJSUphdmFQcm9qZWN0IHAgPSBjcmVhdGVKYXZhUHJvamVjdCgiUCIpOworCQkJCisJCQlQYXRo
IGxpYlBhdGggPSBuZXcgUGF0aChqYXJGaWxlUGF0aCk7CisJCQlzZXRDb250YWluZXJQYXRoKHAs
IGxpYlBhdGgsICJmaWxlOi8vLyIraW5kZXhGaWxlUGF0aCk7CisJCQkKKwkJCXdhaXRVbnRpbElu
ZGV4ZXNSZWFkeSgpOworCQkJCisJCQkvLyBUZXN0IHRoYXQgc3BlY2lmaWVkIGluZGV4IGZpbGUg
aXMgcmVhbGx5IHVzZWQKKwkJCWphdmEuaW8uRmlsZSBpbmRleEZpbGUgPSBKYXZhTW9kZWxNYW5h
Z2VyLmdldEluZGV4TWFuYWdlcigpLmdldEluZGV4KGxpYlBhdGgsIGZhbHNlLCBmYWxzZSkuZ2V0
SW5kZXhGaWxlKCk7CisJCQlhc3NlcnRFcXVhbHMoIlNwZWNpZmllZCBpbmRleCBmaWxlIGlzIG5v
dCBiZWluZyB1c2VkIiwgaW5kZXhGaWxlUGF0aCxpbmRleEZpbGUudG9TdHJpbmcoKSk7CisJCQkK
KwkJCS8vIFRlc3QgdGhhdCBzZWFyY2ggd29ya3MgcHJvcGVybHkgCisJCQlzZWFyY2goIlRlc3Qi
LCBUWVBFLCBERUNMQVJBVElPTlMsIEVYQUNUX1JVTEUsIFNlYXJjaEVuZ2luZS5jcmVhdGVKYXZh
U2VhcmNoU2NvcGUobmV3IElKYXZhRWxlbWVudFtde3B9KSk7CisJCQlhc3NlcnRTZWFyY2hSZXN1
bHRzKGdldEV4dGVybmFsUGF0aCgpICsgIlRlc3QuamFyIHBrZy5UZXN0Iik7CisJCQkvLyBFbnN1
cmUgdGhhdCB0aGUgaW5kZXggZmlsZSBpcyBub3QgbW9kaWZpZWQKKwkJCWFzc2VydEVxdWFscyht
b2RpZmllZCwgbmV3IEZpbGUoaW5kZXhGaWxlUGF0aCkubGFzdE1vZGlmaWVkKCkpOworCQkJCisJ
CQlzaW11bGF0ZUV4aXRSZXN0YXJ0KCk7CisJCQlnZXRKYXZhTW9kZWwoKS5yZWZyZXNoRXh0ZXJu
YWxBcmNoaXZlcyhudWxsLG51bGwpOworCQkJd2FpdFVudGlsSW5kZXhlc1JlYWR5KCk7CisJCQkK
KwkJCS8vIFRlc3QgdGhhdCBzcGVjaWZpZWQgaW5kZXggZmlsZSBpcyByZWFsbHkgdXNlZAorCQkJ
aW5kZXhGaWxlID0gSmF2YU1vZGVsTWFuYWdlci5nZXRJbmRleE1hbmFnZXIoKS5nZXRJbmRleChs
aWJQYXRoLCBmYWxzZSwgZmFsc2UpLmdldEluZGV4RmlsZSgpOworCQkJYXNzZXJ0RXF1YWxzKCJT
cGVjaWZpZWQgaW5kZXggZmlsZSBpcyBub3QgYmVpbmcgdXNlZCIsIGluZGV4RmlsZVBhdGgsaW5k
ZXhGaWxlLnRvU3RyaW5nKCkpOworCQkJCisJCQkvLyBUZXN0IHRoYXQgc2VhcmNoIHdvcmtzIHBy
b3Blcmx5CisJCQl0aGlzLnJlc3VsdENvbGxlY3RvciA9IG5ldyBKYXZhU2VhcmNoUmVzdWx0Q29s
bGVjdG9yKCk7CisJCQlzZWFyY2goIlRlc3QiLCBUWVBFLCBERUNMQVJBVElPTlMsIEVYQUNUX1JV
TEUsIFNlYXJjaEVuZ2luZS5jcmVhdGVKYXZhU2VhcmNoU2NvcGUobmV3IElKYXZhRWxlbWVudFtd
e3B9KSk7CisJCQlhc3NlcnRTZWFyY2hSZXN1bHRzKGdldEV4dGVybmFsUGF0aCgpICsgIlRlc3Qu
amFyIHBrZy5UZXN0Iik7CisJCQkvLyBFbnN1cmUgdGhhdCB0aGUgaW5kZXggZmlsZSBpcyBub3Qg
bW9kaWZpZWQKKwkJCWFzc2VydEVxdWFscyhtb2RpZmllZCwgbmV3IEZpbGUoaW5kZXhGaWxlUGF0
aCkubGFzdE1vZGlmaWVkKCkpOworCQl9IGZpbmFsbHkgeworCQkJZGVsZXRlUHJvamVjdCgiUCIp
OworCQkJbmV3IEZpbGUoaW5kZXhGaWxlUGF0aCkuZGVsZXRlKCk7CisJCQluZXcgRmlsZShqYXJG
aWxlUGF0aCkuZGVsZXRlKCk7CisJCX0KKwkJCisJfQorfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21v
ZGVsL0phdmFTZWFyY2hTY29wZVRlc3RzLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0
cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvbW9kZWwvSmF2YVNlYXJjaFNj
b3BlVGVzdHMuamF2YQppbmRleCBkZWI3MGZkLi41MmFmMzE1IDEwMDY0NAotLS0gYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
bW9kZWwvSmF2YVNlYXJjaFNjb3BlVGVzdHMuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvbW9kZWwvSmF2YVNl
YXJjaFNjb3BlVGVzdHMuamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMDggSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhl
cnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhl
cnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBh
bnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9m
IHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRo
aXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC0xMDI1LDcgKzEwMjUsNyBA
QAogCiAJCS8vIEluZGV4IHRoZSBvdXRwdXQgbG9jYXRpb24gYXMgaXQgaXMgYSBsaWJyYXJ5IGZv
ciB0aGUgcHJvamVjdAogCQlJbmRleE1hbmFnZXIgaW5kZXhNYW5hZ2VyID0gSmF2YU1vZGVsTWFu
YWdlci5nZXRJbmRleE1hbmFnZXIoKTsKLQkJaW5kZXhNYW5hZ2VyLmluZGV4TGlicmFyeShuZXcg
UGF0aCgiL1AxL2JpbiIpLCBwcm9qZWN0LmdldFByb2plY3QoKSk7CisJCWluZGV4TWFuYWdlci5p
bmRleExpYnJhcnkobmV3IFBhdGgoIi9QMS9iaW4iKSwgcHJvamVjdC5nZXRQcm9qZWN0KCksIG51
bGwpOwogCQl3YWl0VW50aWxJbmRleGVzUmVhZHkoKTsKIAogCQkvLyBTZWFyY2ggZm9yIGFsbCB0
eXBlcwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21vZGVsL1J1bkphdmFTZWFyY2hUZXN0cy5qYXZhIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L3Rlc3RzL21vZGVsL1J1bkphdmFTZWFyY2hUZXN0cy5qYXZhCmluZGV4IDg5MTdjMjkuLjJkN2Q4
NjQgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9tb2RlbC9SdW5KYXZhU2VhcmNoVGVzdHMuamF2YQorKysg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2Nv
cmUvdGVzdHMvbW9kZWwvUnVuSmF2YVNlYXJjaFRlc3RzLmphdmEKQEAgLTEsNSArMSw1IEBACiAv
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDA5IElCTSBD
b3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDExIElCTSBD
b3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9n
cmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxl
IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3
aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdApA
QCAtNjIsNiArNjIsNyBAQAogCQlhbGxDbGFzc2VzLmFkZChTZWFyY2hUZXN0cy5jbGFzcyk7CiAJ
CWFsbENsYXNzZXMuYWRkKEphdmFTZWFyY2hTY29wZVRlc3RzLmNsYXNzKTsKIAkJYWxsQ2xhc3Nl
cy5hZGQoTWF0Y2hpbmdSZWdpb25zVGVzdC5jbGFzcyk7CisJCWFsbENsYXNzZXMuYWRkKEphdmFJ
bmRleFRlc3RzLmNsYXNzKTsKIAogCQkvLyBSZXNldCBmb3Jnb3R0ZW4gc3Vic2V0cyBvZiB0ZXN0
cwogCQlUZXN0Q2FzZS5URVNUU19QUkVGSVggPSBudWxsOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvTUVUQS1JTkYvTUFOSUZFU1QuTUYgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9N
RVRBLUlORi9NQU5JRkVTVC5NRgppbmRleCAyZGYxZTkwLi4xY2MwN2NhIDEwMDY0NAotLS0gYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9NRVRBLUlORi9NQU5JRkVTVC5NRgorKysgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9NRVRBLUlORi9NQU5JRkVTVC5NRgpAQCAtMTcsNiArMTcsNyBAQAogIG9yZy5l
Y2xpcHNlLmpkdC5jb3JlLmpkb20sCiAgb3JnLmVjbGlwc2UuamR0LmNvcmUuc2VhcmNoLAogIG9y
Zy5lY2xpcHNlLmpkdC5jb3JlLnV0aWwsCisgb3JnLmVjbGlwc2UuamR0LmNvcmUuaW5kZXgsCiAg
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvZGVhc3Npc3Q7eC1pbnRlcm5hbDo9dHJ1ZSwKICBv
cmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29kZWFzc2lzdC5jb21wbGV0ZTt4LWludGVybmFsOj10
cnVlLAogIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb2RlYXNzaXN0LmltcGw7eC1pbnRlcm5h
bDo9dHJ1ZSwKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2FudGFkYXB0ZXIvb3Jn
L2VjbGlwc2UvamR0L2NvcmUvQnVpbGRKYXJJbmRleC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvYW50YWRhcHRlci9vcmcvZWNsaXBzZS9qZHQvY29yZS9CdWlsZEphckluZGV4LmphdmEKbmV3
IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMC4uZGVjM2FhYQotLS0gL2Rldi9udWxsCisr
KyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2FudGFkYXB0ZXIvb3JnL2VjbGlwc2UvamR0L2NvcmUv
QnVpbGRKYXJJbmRleC5qYXZhCkBAIC0wLDAgKzEsNjIgQEAKKy8qKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqDQorICogQ29weXJpZ2h0IChjKSAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLg0K
KyAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWlu
ZyBtYXRlcmlhbHMNCisgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRo
ZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjANCisgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlz
IGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdA0KKyAqIGh0dHA6Ly93d3cuZWNsaXBz
ZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sDQorICoNCisgKiBDb250cmlidXRvcnM6DQorICogICAg
IElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbg0KKyAqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqLw0KK3BhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmNvcmU7DQorDQor
aW1wb3J0IGphdmEuaW8uSU9FeGNlcHRpb247DQorDQoraW1wb3J0IG9yZy5hcGFjaGUudG9vbHMu
YW50LkJ1aWxkRXhjZXB0aW9uOw0KK2ltcG9ydCBvcmcuYXBhY2hlLnRvb2xzLmFudC5UYXNrOw0K
K2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5pbmRleC5KYXZhSW5kZXhlcjsNCitpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmFudGFkYXB0ZXIuQW50QWRhcHRlck1lc3NhZ2VzOw0K
Kw0KKy8qKg0KKyAqIDxwPg0KKyAqIEFuIEFudCB0YXNrIHRvIGdlbmVyYXRlIHRoZSBpbmRleCBm
aWxlIGZvciB0aGUgZ2l2ZW4gamFyIHBhdGguDQorICogPC9wPg0KKyAqIDxwPg0KKyAqIDxjb2Rl
PiZsdDtlY2xpcHNlLmJ1aWxkSmFySW5kZXggamFyUGF0aD0iVGVzdC5qYXIiIGluZGV4UGF0aD0i
VGVzdC5pbmRleCIvJmd0OzwvY29kZT4NCisgKiA8L3A+DQorICogPHA+DQorICogRm9yIG1vcmUg
aW5mb3JtYXRpb24gb24gQW50IGNoZWNrIG91dCB0aGUgd2Vic2l0ZSBhdCBodHRwOi8vamFrYXJ0
YS5hcGFjaGUub3JnL2FudC8gLg0KKyAqIDwvcD4NCisgKiA8cD4NCisgKiBUaGlzIGlzIG5vdCBp
bnRlbmRlZCB0byBiZSBzdWJjbGFzc2VkIGJ5IHVzZXJzLg0KKyAqIDwvcD4NCisgKiBAc2luY2Ug
My44DQorICovDQorcHVibGljIGNsYXNzIEJ1aWxkSmFySW5kZXggZXh0ZW5kcyBUYXNrIHsNCisN
CisJcHJpdmF0ZSBTdHJpbmcgamFyUGF0aDsNCisJcHJpdmF0ZSBTdHJpbmcgaW5kZXhQYXRoOw0K
Kw0KKwlwdWJsaWMgdm9pZCBleGVjdXRlKCkgdGhyb3dzIEJ1aWxkRXhjZXB0aW9uIHsNCisJCWlm
ICh0aGlzLmphclBhdGggPT0gbnVsbCkgew0KKwkJCXRocm93IG5ldyBCdWlsZEV4Y2VwdGlvbihB
bnRBZGFwdGVyTWVzc2FnZXMuZ2V0U3RyaW5nKCJidWlsZEphckluZGV4LmphckZpbGUuY2Fubm90
LmJlLm51bGwiKSk7IC8vJE5PTi1OTFMtMSQNCisJCX0NCisJCWlmICh0aGlzLmluZGV4UGF0aCA9
PSBudWxsKSB7DQorCQkJdGhyb3cgbmV3IEJ1aWxkRXhjZXB0aW9uKEFudEFkYXB0ZXJNZXNzYWdl
cy5nZXRTdHJpbmcoImJ1aWxkSmFySW5kZXguaW5kZXhGaWxlLmNhbm5vdC5iZS5udWxsIikpOyAv
LyROT04tTkxTLTEkDQorCQl9DQorDQorCQl0cnkgew0KKwkJCUphdmFJbmRleGVyLmdlbmVyYXRl
SW5kZXhGb3JKYXIodGhpcy5qYXJQYXRoLCB0aGlzLmluZGV4UGF0aCk7DQorCQl9IGNhdGNoIChJ
T0V4Y2VwdGlvbiBlKSB7DQorCQkJdGhyb3cgbmV3IEJ1aWxkRXhjZXB0aW9uKEFudEFkYXB0ZXJN
ZXNzYWdlcy5nZXRTdHJpbmcoImJ1aWxkSmFySW5kZXguaW9leGNlcHRpb24ub2NjdXJlZCIsIGUu
Z2V0TG9jYWxpemVkTWVzc2FnZSgpKSk7IC8vJE5PTi1OTFMtMSQNCisJCX0NCisJfQ0KKw0KKwlw
dWJsaWMgdm9pZCBzZXRKYXJQYXRoKFN0cmluZyBwYXRoKSB7DQorCQl0aGlzLmphclBhdGggPSBw
YXRoOw0KKwl9DQorDQorCXB1YmxpYyB2b2lkIHNldEluZGV4UGF0aChTdHJpbmcgcGF0aCkgew0K
KwkJdGhpcy5pbmRleFBhdGggPSBwYXRoOw0KKwl9DQorfQ0KZGlmZiAtLWdpdCBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2FudGFkYXB0ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2FudGFkYXB0
ZXIvbWVzc2FnZXMucHJvcGVydGllcyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2FudGFkYXB0ZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2FudGFkYXB0ZXIvbWVzc2FnZXMucHJvcGVydGllcwpp
bmRleCBkZjYxNjU2Li45Y2I5YmUyIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9h
bnRhZGFwdGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9hbnRhZGFwdGVyL21lc3NhZ2VzLnBy
b3BlcnRpZXMKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvYW50YWRhcHRlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvYW50YWRhcHRlci9tZXNzYWdlcy5wcm9wZXJ0aWVzCkBAIC0xLDUgKzEs
NSBAQAogIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwotIyBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMDYg
SUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisjIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMSBJ
Qk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICMgQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBw
cm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogIyBhcmUgbWFkZSBhdmFpbGFi
bGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICMg
d2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQK
QEAgLTE5LDMgKzE5LDcgQEAKIGNoZWNrRGVidWdBdHRyaWJ1dGVzLnByb3BlcnR5LmFyZ3VtZW50
LmNhbm5vdC5iZS5udWxsPVRoZSBwcm9wZXJ0eSBhcmd1bWVudCBjYW5ub3QgYmUgbnVsbAogY2hl
Y2tEZWJ1Z0F0dHJpYnV0ZXMuaW9leGNlcHRpb24ub2NjdXJlZD1JT0V4Y2VwdGlvbiBvY2N1cnJl
ZCB3aGlsZSByZWFkaW5nIAogY2hlY2tEZWJ1Z0F0dHJpYnV0ZXMuZmlsZS5hcmd1bWVudC5tdXN0
LmJlLmEuY2xhc3NmaWxlLm9yLmEuamFyZmlsZT1UaGUgZmlsZSBhcmd1bWVudCBtdXN0IGJlIGEg
LmNsYXNzIG9yIGEgLmphciBmaWxlCisKK2J1aWxkSmFySW5kZXguamFyRmlsZS5jYW5ub3QuYmUu
bnVsbD1UaGUgamFyIGZpbGUgYXJndW1lbnQgY2Fubm90IGJlIG51bGwKK2J1aWxkSmFySW5kZXgu
aW5kZXhGaWxlLmNhbm5vdC5iZS5udWxsPVRoZSBpbmRleCBmaWxlIGFyZ3VtZW50IGNhbm5vdCBi
ZSBudWxsCitidWlsZEphckluZGV4LmlvZXhjZXB0aW9uLm9jY3VyZWQ9SU9FeGNlcHRpb24gLSB7
MH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2J1aWxkLnByb3BlcnRpZXMgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9idWlsZC5wcm9wZXJ0aWVzCmluZGV4IGZmNTIwZjkuLjhlM2Y2
NzggMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2J1aWxkLnByb3BlcnRpZXMKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvYnVpbGQucHJvcGVydGllcwpAQCAtMSw1ICsxLDUgQEAK
ICMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMKLSMgQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEwIElCTSBD
b3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorIyBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTEgSUJNIENv
cnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAjIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3Jh
bSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICMgYXJlIG1hZGUgYXZhaWxhYmxlIHVu
ZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAjIHdoaWNo
IGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC0y
NCw3ICsyNCw4IEBACiAgICAgICAgICAgICAgICAgICAgb3JnLmVjbGlwc2UuamR0LmNvcmUuamRv
bS4qLFwKICAgICAgICAgICAgICAgICAgICBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uKixcCiAg
ICAgICAgICAgICAgICAgICAgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLnJld3JpdGUuKixcCi0g
ICAgICAgICAgICAgICAgICAgb3JnLmVjbGlwc2UuamR0LmNvcmUuc2VhcmNoLioKKyAgICAgICAg
ICAgICAgICAgICBvcmcuZWNsaXBzZS5qZHQuY29yZS5zZWFyY2guKixcCisgICAgICAgICAgICAg
ICAgICAgb3JnLmVjbGlwc2UuamR0LmNvcmUuaW5kZXguKgogc291cmNlLi4gPSAgIGJhdGNoLyxc
CiAJICAgICAgICAgY29kZWFzc2lzdC8sXAogCSAgICAgICAgIGNvbXBpbGVyLyxcCmRpZmYgLS1n
aXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvY29yZS9JQ2xh
c3NwYXRoQXR0cmlidXRlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNs
aXBzZS9qZHQvY29yZS9JQ2xhc3NwYXRoQXR0cmlidXRlLmphdmEKaW5kZXggZDkwYWIxNS4uNjg1
YzFhMyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2Uv
amR0L2NvcmUvSUNsYXNzcGF0aEF0dHJpYnV0ZS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9jb3JlL0lDbGFzc3BhdGhBdHRyaWJ1dGUuamF2YQpA
QCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMp
IDIwMDUsIDIwMTAgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMp
IDIwMDUsIDIwMTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJl
c2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBh
cmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBM
aWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQg
aXMgYXZhaWxhYmxlIGF0CkBAIC01OCw2ICs1OCwxNiBAQAogCSAqIEBzaW5jZSAzLjEKIAkgKi8K
IAlTdHJpbmcgSkFWQURPQ19MT0NBVElPTl9BVFRSSUJVVEVfTkFNRSA9ICJqYXZhZG9jX2xvY2F0
aW9uIjsgLy8kTk9OLU5MUy0xJAorCQorCS8qKgorCSAqIENvbnN0YW50IGZvciB0aGUgbmFtZSBv
ZiB0aGUgaW5kZXggbG9jYXRpb24gYXR0cmlidXRlLgorCSAqIAorCSAqIDxwPlRoZSB2YWx1ZSBm
b3IgdGhpcyBhdHRyaWJ1dGUgaGFzIHRvIGJlIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2Yg
YSBVUkwuCisJICogSXQgc2hvdWxkIHBvaW50IHRvIGFuIGV4aXN0aW5nIGluZGV4IGZpbGUgaW4g
YSBmb2xkZXIgb3IgYSBqYXIuIFRoZSBVUkwgY2FuIGFsc28gYmUgb2YgcGxhdGZvcm0gcHJvdG9j
b2wuPC9wPgorCSAqIAorCSAqIEBzaW5jZSAzLjgKKwkgKi8KKwlTdHJpbmcgSU5ERVhfTE9DQVRJ
T05fQVRUUklCVVRFX05BTUUgPSAiaW5kZXhfbG9jYXRpb24iOyAvLyROT04tTkxTLTEkCiAKIAkv
KioKIAkgKiBDb25zdGFudCBmb3IgdGhlIG5hbWUgb2YgdGhlIG9wdGlvbmFsIGF0dHJpYnV0ZS4g
VGhlIHBvc3NpYmxlIHZhbHVlcwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9k
ZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvQ2xhc3NwYXRoQ2hhbmdlLmphdmEgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9D
bGFzc3BhdGhDaGFuZ2UuamF2YQppbmRleCBiOTZjZDQ0Li5iNGRhNGIzIDEwMDY0NAotLS0gYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9D
bGFzc3BhdGhDaGFuZ2UuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9DbGFzc3BhdGhDaGFuZ2UuamF2YQpAQCAtMTAsNiAr
MTAsNyBAQAogICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpk
dC5pbnRlcm5hbC5jb3JlOwogCitpbXBvcnQgamF2YS5uZXQuVVJMOwogaW1wb3J0IGphdmEudXRp
bC5BcnJheUxpc3Q7CiBpbXBvcnQgamF2YS51dGlsLkhhc2hNYXA7CiBpbXBvcnQgamF2YS51dGls
Lkhhc2hTZXQ7CkBAIC0zMzUsNyArMzM2LDcgQEAKIAkJCQkJCQlib29sZWFuIGZvdW5kID0gZmFs
c2U7CiAJCQkJCQkJZm9yIChpbnQgaiA9IDA7IGogPCBhY2N1bXVsYXRlZFJvb3RzLnNpemUoKTsg
aisrKSB7CiAJCQkJCQkJCUlQYWNrYWdlRnJhZ21lbnRSb290IHJvb3QgPSAoSVBhY2thZ2VGcmFn
bWVudFJvb3QpIGFjY3VtdWxhdGVkUm9vdHMuZWxlbWVudEF0KGopOwotCQkJCQkJCQlpZiAoIXJv
b3QuZ2V0UGF0aCgpLmVxdWFscyhvbGRSb290LmdldFBhdGgoKSkpIHsKKwkJCQkJCQkJaWYgKHJv
b3QuZ2V0UGF0aCgpLmVxdWFscyhvbGRSb290LmdldFBhdGgoKSkpIHsKIAkJCQkJCQkJCWZvdW5k
ID0gdHJ1ZTsKIAkJCQkJCQkJCWJyZWFrOwogCQkJCQkJCQl9CkBAIC01MTEsNyArNTEyLDcgQEAK
IAogCQlmb3IgKGludCBpID0gMDsgaSA8IG5ld0xlbmd0aDsgaSsrKSB7CiAJCQlpbnQgaW5kZXgg
PSBjbGFzc3BhdGhDb250YWlucyh0aGlzLm9sZFJlc29sdmVkQ2xhc3NwYXRoLCBuZXdSZXNvbHZl
ZENsYXNzcGF0aFtpXSk7Ci0JCQlpZiAoaW5kZXggPT0gLTEpIHsKKwkJCWlmIChpbmRleCA9PSAt
MSB8fCBuZXdSZXNvbHZlZENsYXNzcGF0aFtpXS5nZXRFbnRyeUtpbmQoKSA9PSBJQ2xhc3NwYXRo
RW50cnkuQ1BFX0xJQlJBUlkpIHsKIAkJCQkvLyByZW1vdGUgcHJvamVjdHMgYXJlIG5vdCBpbmRl
eGVkIGluIHRoaXMgcHJvamVjdAogCQkJCWlmIChuZXdSZXNvbHZlZENsYXNzcGF0aFtpXS5nZXRF
bnRyeUtpbmQoKSA9PSBJQ2xhc3NwYXRoRW50cnkuQ1BFX1BST0pFQ1QpewogCQkJCQljb250aW51
ZTsKQEAgLTUxOSwxOSArNTIwLDI0IEBACiAKIAkJCQkvLyBSZXF1ZXN0IGluZGV4aW5nCiAJCQkJ
aW50IGVudHJ5S2luZCA9IG5ld1Jlc29sdmVkQ2xhc3NwYXRoW2ldLmdldEVudHJ5S2luZCgpOwor
CQkJCVVSTCBuZXd1cmwgPSAoKENsYXNzcGF0aEVudHJ5KW5ld1Jlc29sdmVkQ2xhc3NwYXRoW2ld
KS5nZXRMaWJyYXJ5SW5kZXhMb2NhdGlvbigpOwogCQkJCXN3aXRjaCAoZW50cnlLaW5kKSB7CiAJ
CQkJCWNhc2UgSUNsYXNzcGF0aEVudHJ5LkNQRV9MSUJSQVJZOgogCQkJCQkJYm9vbGVhbiBwYXRo
SGFzQ2hhbmdlZCA9IHRydWU7CiAJCQkJCQlJUGF0aCBuZXdQYXRoID0gbmV3UmVzb2x2ZWRDbGFz
c3BhdGhbaV0uZ2V0UGF0aCgpOwotCQkJCQkJZm9yIChpbnQgaiA9IDA7IGogPCBvbGRMZW5ndGg7
IGorKykgewotCQkJCQkJCUlDbGFzc3BhdGhFbnRyeSBvbGRFbnRyeSA9IHRoaXMub2xkUmVzb2x2
ZWRDbGFzc3BhdGhbal07Ci0JCQkJCQkJaWYgKG9sZEVudHJ5LmdldFBhdGgoKS5lcXVhbHMobmV3
UGF0aCkpIHsKKwkJCQkJCWlmIChpbmRleCAhPSAtMSkgeworCQkJCQkJCUlDbGFzc3BhdGhFbnRy
eSBvbGRFbnRyeSA9IHRoaXMub2xkUmVzb2x2ZWRDbGFzc3BhdGhbaW5kZXhdOworCQkJCQkJCVVS
TCBvbGR1cmwgPSAoKENsYXNzcGF0aEVudHJ5KW9sZEVudHJ5KS5nZXRMaWJyYXJ5SW5kZXhMb2Nh
dGlvbigpOworCQkJCQkJCWlmIChvbGR1cmwgPT0gbnVsbCAmJiBuZXd1cmwgPT0gbnVsbCkgewog
CQkJCQkJCQlwYXRoSGFzQ2hhbmdlZCA9IGZhbHNlOwotCQkJCQkJCQlicmVhazsKKwkJCQkJCQl9
IGVsc2UgaWYgKG9sZHVybCAhPSBudWxsICYmIG5ld3VybCAhPSBudWxsKSB7CisJCQkJCQkJCXBh
dGhIYXNDaGFuZ2VkID0gIShuZXd1cmwuZXF1YWxzKG9sZHVybCkpOworCQkJCQkJCX0gZWxzZSBp
ZiAob2xkdXJsICE9IG51bGwpIHsKKwkJCQkJCQkJaW5kZXhNYW5hZ2VyLnJlbW92ZUluZGV4KG5l
d1BhdGgpOwogCQkJCQkJCX0KIAkJCQkJCX0KIAkJCQkJCWlmIChwYXRoSGFzQ2hhbmdlZCkgewot
CQkJCQkJCWluZGV4TWFuYWdlci5pbmRleExpYnJhcnkobmV3UGF0aCwgdGhpcy5wcm9qZWN0Lmdl
dFByb2plY3QoKSk7CisJCQkJCQkJaW5kZXhNYW5hZ2VyLmluZGV4TGlicmFyeShuZXdQYXRoLCB0
aGlzLnByb2plY3QuZ2V0UHJvamVjdCgpLCBuZXd1cmwpOwogCQkJCQkJfQogCQkJCQkJYnJlYWs7
CiAJCQkJCWNhc2UgSUNsYXNzcGF0aEVudHJ5LkNQRV9TT1VSQ0U6CmRpZmYgLS1naXQgYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9DbGFz
c3BhdGhFbnRyeS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvcmUvQ2xhc3NwYXRoRW50cnkuamF2YQppbmRleCA1NjU2MzIzLi44MTBh
NmIyIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29yZS9DbGFzc3BhdGhFbnRyeS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0NsYXNzcGF0aEVudHJ5
LmphdmEKQEAgLTE3LDYgKzE3LDggQEAKIGltcG9ydCBqYXZhLmlvLklucHV0U3RyZWFtOwogaW1w
b3J0IGphdmEuaW8uT3V0cHV0U3RyZWFtV3JpdGVyOwogaW1wb3J0IGphdmEuaW8uVW5zdXBwb3J0
ZWRFbmNvZGluZ0V4Y2VwdGlvbjsKK2ltcG9ydCBqYXZhLm5ldC5NYWxmb3JtZWRVUkxFeGNlcHRp
b247CitpbXBvcnQgamF2YS5uZXQuVVJMOwogaW1wb3J0IGphdmEudXRpbC5BcnJheUxpc3Q7CiBp
bXBvcnQgamF2YS51dGlsLkhhc2hNYXA7CiBpbXBvcnQgamF2YS51dGlsLkhhc2hTZXQ7CkBAIC0x
NTI0LDYgKzE1MjYsMzMgQEAKIAogCQlyZXR1cm4gSmF2YUNvcmUuZ2V0UmVzb2x2ZWRDbGFzc3Bh
dGhFbnRyeSh0aGlzKTsKIAl9CisJCisJLyoqCisJICogVGhpcyBmdW5jdGlvbiBjb21wdXRlcyB0
aGUgVVJMIG9mIHRoZSBpbmRleCBsb2NhdGlvbiBmb3IgdGhpcyBjbGFzc3BhdGggZW50cnkuIEl0
IHJldHVybnMgbnVsbCBpZiB0aGUgVVJMIGlzCisJICogaW52YWxpZC4KKwkgKi8KKwlwdWJsaWMg
VVJMIGdldExpYnJhcnlJbmRleExvY2F0aW9uKCkgeworCQlzd2l0Y2goZ2V0RW50cnlLaW5kKCkp
IHsKKwkJCWNhc2UgSUNsYXNzcGF0aEVudHJ5LkNQRV9MSUJSQVJZIDoKKwkJCWNhc2UgSUNsYXNz
cGF0aEVudHJ5LkNQRV9WQVJJQUJMRSA6CisJCQkJYnJlYWs7CisJCQlkZWZhdWx0IDoKKwkJCQly
ZXR1cm4gbnVsbDsKKwkJfQorCQlpZiAodGhpcy5leHRyYUF0dHJpYnV0ZXMgPT0gbnVsbCkgcmV0
dXJuIG51bGw7CisJCWZvciAoaW50IGk9IDA7IGkgPCB0aGlzLmV4dHJhQXR0cmlidXRlcy5sZW5n
dGg7IGkrKykgeworCQkJSUNsYXNzcGF0aEF0dHJpYnV0ZSBhdHRyaWI9IHRoaXMuZXh0cmFBdHRy
aWJ1dGVzW2ldOworCQkJaWYgKElDbGFzc3BhdGhBdHRyaWJ1dGUuSU5ERVhfTE9DQVRJT05fQVRU
UklCVVRFX05BTUUuZXF1YWxzKGF0dHJpYi5nZXROYW1lKCkpKSB7CisJCQkJU3RyaW5nIHZhbHVl
ID0gYXR0cmliLmdldFZhbHVlKCk7CisJCQkJdHJ5IHsKKwkJCQkJcmV0dXJuIG5ldyBVUkwodmFs
dWUpOworCQkJCX0gY2F0Y2ggKE1hbGZvcm1lZFVSTEV4Y2VwdGlvbiBlKSB7CisJCQkJCXJldHVy
biBudWxsOworCQkJCX0KKwkJCX0KKwkJfQorCQlyZXR1cm4gbnVsbDsKKwl9CQogCiAJLyoqCiAJ
ICogVmFsaWRhdGUgYSBnaXZlbiBjbGFzc3BhdGggYW5kIG91dHB1dCBsb2NhdGlvbiBmb3IgYSBw
cm9qZWN0LCB1c2luZyB0aGUgZm9sbG93aW5nIHJ1bGVzOgpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvRGVsdGFQcm9j
ZXNzb3IuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb3JlL0RlbHRhUHJvY2Vzc29yLmphdmEKaW5kZXggMTI2ZmNjOS4uYzM2ZTI4OCAx
MDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvcmUvRGVsdGFQcm9jZXNzb3IuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9EZWx0YVByb2Nlc3Nvci5qYXZh
CkBAIC0xMyw2ICsxMyw3IEBACiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3Jl
OwogCiBpbXBvcnQgamF2YS5pby5GaWxlOworaW1wb3J0IGphdmEubmV0LlVSTDsKIGltcG9ydCBq
YXZhLnV0aWwuKjsKIAogaW1wb3J0IG9yZy5lY2xpcHNlLmNvcmUucmVzb3VyY2VzLklDb250YWlu
ZXI7CkBAIC05OTcsOCArOTk4LDEyIEBACiAJCQkJCQkJCQkvLyBmaXJzdCByZW1vdmUgdGhlIGlu
ZGV4IHNvIHRoYXQgaXQgaXMgZm9yY2VkIHRvIGJlIHJlLWluZGV4ZWQKIAkJCQkJCQkJCXRoaXMu
bWFuYWdlci5pbmRleE1hbmFnZXIucmVtb3ZlSW5kZXgoZW50cnlQYXRoKTsKIAkJCQkJCQkJCS8v
IHRoZW4gaW5kZXggdGhlIGphcgotCQkJCQkJCQkJdGhpcy5tYW5hZ2VyLmluZGV4TWFuYWdlci5p
bmRleExpYnJhcnkoZW50cnlQYXRoLCBwcm9qZWN0LmdldFByb2plY3QoKSk7CisJCQkJCQkJCQl0
aGlzLm1hbmFnZXIuaW5kZXhNYW5hZ2VyLmluZGV4TGlicmFyeShlbnRyeVBhdGgsIHByb2plY3Qu
Z2V0UHJvamVjdCgpLCAoKENsYXNzcGF0aEVudHJ5KWVudHJpZXNbal0pLmdldExpYnJhcnlJbmRl
eExvY2F0aW9uKCkpOwogCQkJCQkJCQl9IGVsc2UgeworCQkJCQkJCQkJVVJMIGluZGV4TG9jYXRp
b24gPSAoKENsYXNzcGF0aEVudHJ5KWVudHJpZXNbal0pLmdldExpYnJhcnlJbmRleExvY2F0aW9u
KCk7CisJCQkJCQkJCQlpZiAoaW5kZXhMb2NhdGlvbiAhPSBudWxsKSB7IC8vIGZvcmNlIHJlaW5k
ZXhpbmcsIHRoaXMgY291bGQgYmUgZmFzdGVyIHJhdGhlciB0aGFuIG1haW50YWluaW5nIHRoZSBs
aXN0CisJCQkJCQkJCQkJdGhpcy5tYW5hZ2VyLmluZGV4TWFuYWdlci5pbmRleExpYnJhcnkoZW50
cnlQYXRoLCBwcm9qZWN0LmdldFByb2plY3QoKSwgaW5kZXhMb2NhdGlvbik7CisJCQkJCQkJCQl9
CiAJCQkJCQkJCQlleHRlcm5hbEFyY2hpdmVzU3RhdHVzLnB1dChlbnRyeVBhdGgsIEVYVEVSTkFM
X0pBUl9VTkNIQU5HRUQpOwogCQkJCQkJCQl9CiAJCQkJCQkJfSBlbHNlIHsKQEAgLTEwMDksNyAr
MTAxNCw3IEBACiAJCQkJCQkJCQl0aGlzLnN0YXRlLmdldEV4dGVybmFsTGliVGltZVN0YW1wcygp
LnB1dChlbnRyeVBhdGgsIG5ldyBMb25nKG5ld1RpbWVTdGFtcCkpOwogCQkJCQkJCQkJLy8gaW5k
ZXggdGhlIG5ldyBqYXIKIAkJCQkJCQkJCXRoaXMubWFuYWdlci5pbmRleE1hbmFnZXIucmVtb3Zl
SW5kZXgoZW50cnlQYXRoKTsKLQkJCQkJCQkJCXRoaXMubWFuYWdlci5pbmRleE1hbmFnZXIuaW5k
ZXhMaWJyYXJ5KGVudHJ5UGF0aCwgcHJvamVjdC5nZXRQcm9qZWN0KCkpOworCQkJCQkJCQkJdGhp
cy5tYW5hZ2VyLmluZGV4TWFuYWdlci5pbmRleExpYnJhcnkoZW50cnlQYXRoLCBwcm9qZWN0Lmdl
dFByb2plY3QoKSwgKChDbGFzc3BhdGhFbnRyeSllbnRyaWVzW2pdKS5nZXRMaWJyYXJ5SW5kZXhM
b2NhdGlvbigpKTsKIAkJCQkJCQkJfQogCQkJCQkJCX0KIAkJCQkJCX0gZWxzZSB7IC8vIGludGVy
bmFsIEpBUgpAQCAtMjYyOSwxMyArMjYzNCwxMyBAQAogCQkJCQlzd2l0Y2ggKGRlbHRhLmdldEtp
bmQoKSkgewogCQkJCQkJY2FzZSBJUmVzb3VyY2VEZWx0YS5BRERFRDoKIAkJCQkJCQkvLyBpbmRl
eCB0aGUgbmV3IGphcgotCQkJCQkJCWluZGV4TWFuYWdlci5pbmRleExpYnJhcnkoamFyUGF0aCwg
cm9vdC5nZXRKYXZhUHJvamVjdCgpLmdldFByb2plY3QoKSk7CisJCQkJCQkJaW5kZXhNYW5hZ2Vy
LmluZGV4TGlicmFyeShqYXJQYXRoLCByb290LmdldEphdmFQcm9qZWN0KCkuZ2V0UHJvamVjdCgp
LCByb290LmdldEluZGV4UGF0aCgpKTsKIAkJCQkJCQlicmVhazsKIAkJCQkJCWNhc2UgSVJlc291
cmNlRGVsdGEuQ0hBTkdFRDoKIAkJCQkJCQkvLyBmaXJzdCByZW1vdmUgdGhlIGluZGV4IHNvIHRo
YXQgaXQgaXMgZm9yY2VkIHRvIGJlIHJlLWluZGV4ZWQKIAkJCQkJCQlpbmRleE1hbmFnZXIucmVt
b3ZlSW5kZXgoamFyUGF0aCk7CiAJCQkJCQkJLy8gdGhlbiBpbmRleCB0aGUgamFyCi0JCQkJCQkJ
aW5kZXhNYW5hZ2VyLmluZGV4TGlicmFyeShqYXJQYXRoLCByb290LmdldEphdmFQcm9qZWN0KCku
Z2V0UHJvamVjdCgpKTsKKwkJCQkJCQlpbmRleE1hbmFnZXIuaW5kZXhMaWJyYXJ5KGphclBhdGgs
IHJvb3QuZ2V0SmF2YVByb2plY3QoKS5nZXRQcm9qZWN0KCksIHJvb3QuZ2V0SW5kZXhQYXRoKCkp
OwogCQkJCQkJCWJyZWFrOwogCQkJCQkJY2FzZSBJUmVzb3VyY2VEZWx0YS5SRU1PVkVEOgogCQkJ
CQkJCS8vIHRoZSBqYXIgd2FzIHBoeXNpY2FsbHkgcmVtb3ZlZDogcmVtb3ZlIHRoZSBpbmRleApk
aWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvcmUvSmFyUGFja2FnZUZyYWdtZW50Um9vdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvSmFyUGFja2FnZUZyYWdt
ZW50Um9vdC5qYXZhCmluZGV4IDViMThjMTkuLjNjZDRkMDcgMTAwNjQ0Ci0tLSBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0phclBhY2th
Z2VGcmFnbWVudFJvb3QuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9KYXJQYWNrYWdlRnJhZ21lbnRSb290LmphdmEKQEAg
LTEwLDYgKzEwLDcgQEAKICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwogcGFja2FnZSBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29yZTsKIAoraW1wb3J0IGphdmEubmV0LlVSTDsKIGltcG9ydCBq
YXZhLnV0aWwuKjsKIGltcG9ydCBqYXZhLnV0aWwuemlwLlppcEVudHJ5OwogaW1wb3J0IGphdmEu
dXRpbC56aXAuWmlwRXhjZXB0aW9uOwpAQCAtMjkyLDQgKzI5MywxNSBAQAogCQkJcmV0dXJuOwog
CQlzdXBlci50b1N0cmluZ0FuY2VzdG9ycyhidWZmZXIpOwogCX0KKworCXB1YmxpYyBVUkwgZ2V0
SW5kZXhQYXRoKCkgeworCQl0cnkgeworCQkJSUNsYXNzcGF0aEVudHJ5IGVudHJ5ID0gKChKYXZh
UHJvamVjdCkgZ2V0UGFyZW50KCkpLmdldENsYXNzcGF0aEVudHJ5Rm9yKGdldFBhdGgoKSk7CisJ
CQlpZiAoZW50cnkgIT0gbnVsbCkgcmV0dXJuICgoQ2xhc3NwYXRoRW50cnkpZW50cnkpLmdldExp
YnJhcnlJbmRleExvY2F0aW9uKCk7CQorCQl9IGNhdGNoIChKYXZhTW9kZWxFeGNlcHRpb24gZSkg
eworCQkJLy8gaWdub3JlIGV4Y2VwdGlvbgorCQl9CisJCXJldHVybiBudWxsOworCX0KKwogfQpk
aWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvcGx1Z2luLnhtbCBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL3BsdWdpbi54bWwKaW5kZXggMzc4NDI1Ni4uNWQ2OTc4OCAxMDA2NDQKLS0tIGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvcGx1Z2luLnhtbAorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9wbHVnaW4ueG1sCkBAIC0xLDcgKzEsNyBAQAogPD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGlu
Zz0iVVRGLTgiPz4KIDw/ZWNsaXBzZSB2ZXJzaW9uPSIzLjAiPz4KIDwhLS0KLSAgICBDb3B5cmln
aHQgKGMpIDIwMDQsIDIwMTAgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgICAgQ29weXJp
Z2h0IChjKSAyMDA0LCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICAgIEFsbCBy
aWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlh
bHMKICAgICBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNl
IFB1YmxpYyBMaWNlbnNlIHYxLjAKICAgICB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1
dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdApAQCAtMTU4LDYgKzE1OCwxMSBAQAogCQljbGFzcz0i
b3JnLmVjbGlwc2UuamR0LmNvcmUuQ2hlY2tEZWJ1Z0F0dHJpYnV0ZXMiCiAJCWxpYnJhcnk9Impk
dENvbXBpbGVyQWRhcHRlci5qYXIiPgogCTwvYW50VGFzaz4KKwk8YW50VGFzaworCQluYW1lPSJl
Y2xpcHNlLmJ1aWxkSmFySW5kZXgiCisJCWNsYXNzPSJvcmcuZWNsaXBzZS5qZHQuY29yZS5CdWls
ZEphckluZGV4IgorCQlsaWJyYXJ5PSJqZHRDb21waWxlckFkYXB0ZXIuamFyIj4KKwk8L2FudFRh
c2s+CiA8L2V4dGVuc2lvbj4KICAgICAgIAogPCEtLSA9PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PSAtLT4KQEAgLTE5Niw2ICsyMDEsMTcgQEAKIDwvZXh0ZW5zaW9uPgogCiA8IS0tID09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09IC0tPgorPCEtLSBFeHRlbnNpb246IEphdmEgR2VuZXJhdGUgSW5k
ZXhlciAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAt
LT4KKzwhLS0gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gLS0+Cis8ZXh0ZW5zaW9uCisgICAg
ICBpZD0iSmF2YUluZGV4ZXIiCisgICAgICBwb2ludD0ib3JnLmVjbGlwc2UuY29yZS5ydW50aW1l
LmFwcGxpY2F0aW9ucyI+CisgICAJCTxhcHBsaWNhdGlvbj4KKyAgICAgIAkJPHJ1biBjbGFzcz0i
b3JnLmVjbGlwc2UuamR0LmNvcmUuaW5kZXguSmF2YUluZGV4ZXJBcHBsaWNhdGlvbiIgLz4KKyAg
IAkJPC9hcHBsaWNhdGlvbj4KKzwvZXh0ZW5zaW9uPgorCis8IS0tID09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09IC0tPgogPCEtLSBFeHRlbnNpb246IEphdmEgQ29udGVudCBUeXBlcyAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAtLT4KIDwhLS0g
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT0gLS0+CiA8ZXh0ZW5zaW9uIHBvaW50PSJvcmcuZWNs
aXBzZS5jb3JlLmNvbnRlbnR0eXBlLmNvbnRlbnRUeXBlcyI+CmRpZmYgLS1naXQgYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2NvcmUvaW5kZXgvSmF2YUluZGV4
ZXIuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvY29y
ZS9pbmRleC9KYXZhSW5kZXhlci5qYXZhCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAw
MDAuLmJhOTQ4NzEKLS0tIC9kZXYvbnVsbAorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFy
Y2gvb3JnL2VjbGlwc2UvamR0L2NvcmUvaW5kZXgvSmF2YUluZGV4ZXIuamF2YQpAQCAtMCwwICsx
LDQyIEBACisvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKyAqIENvcHlyaWdodCAoYykgMjAxMSBJ
Qk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4NCisgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlz
IHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzDQorICogYXJlIG1hZGUgYXZh
aWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4w
DQorICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFi
bGUgYXQNCisgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbA0KKyAq
DQorICogQ29udHJpYnV0b3JzOg0KKyAqICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQ
SSBhbmQgaW1wbGVtZW50YXRpb24NCisgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCitwYWNrYWdl
IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmluZGV4Ow0KKw0KK2ltcG9ydCBqYXZhLmlvLklPRXhjZXB0
aW9uOw0KKw0KK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5zZWFyY2guU2VhcmNoRW5naW5l
Ow0KK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS5zZWFyY2guaW5kZXhpbmcu
RGVmYXVsdEphdmFJbmRleGVyOw0KKw0KKy8qKg0KKyAqIHtAbGluayBKYXZhSW5kZXhlcn0gcHJv
dmlkZXMgZnVuY3Rpb25hbGl0eSB0byBnZW5lcmF0ZSBpbmRleCBmaWxlcyB3aGljaCBjYW4gYmUg
dXNlZCBieSB0aGUgSkRUIHtAbGluayBTZWFyY2hFbmdpbmV9Lg0KKyAqIFRoZSBnZW5lcmF0ZWQg
aW5kZXggZmlsZXMgY2FuIGJlIHVzZWQgYXMgYSBjbGFzc3BhdGggYXR0cmlidXRlIGZvciB0aGUg
cGFydGljdWxhciBjbGFzc3BhdGggZW50cnkuDQorICogDQorICogPHA+IFRoZSBzZWFyY2ggZW5n
aW5lIGluZGV4ZXMgYWxsIHRoZSBlbGVtZW50cyByZWZlcnJlZCBpbiB0aGUgY2xhc3NwYXRoIGVu
dHJpZXMgb2YgdGhlIHByb2plY3QgaW50bw0KKyAqIGluZGV4IGZpbGVzLiBUaGVzZSBpbmRleCBm
aWxlcyBhcmUgdXNlZCB0byBzZWFyY2ggdGhlIGVsZW1lbnRzIGZhc3Rlci4gSW5kZXhpbmcgZm9y
IGJpZ2dlciBqYXJzIGNvdWxkDQorICogdGFrZSBzb21lIHRpbWUuIFRvIGF2b2lkIHRoaXMgdGlt
ZSwgb25lIGNhbiBnZW5lcmF0ZSB0aGUgaW5kZXggZmlsZSBhbmQgc3BlY2lmeSBpdCB3aGVuIHRo
ZSBqYXIgaXMgYWRkZWQNCisgKiB0byB0aGUgY2xhc3NwYXRoIG9mIHRoZSBwcm9qZWN0LiA8L3A+
DQorICoNCisgKiBAc2luY2UgMy44DQorICovDQorcHVibGljIGZpbmFsIGNsYXNzIEphdmFJbmRl
eGVyIHsNCisNCisJLyoqDQorCSAqIEdlbmVyYXRlcyB0aGUgaW5kZXggZmlsZSBmb3IgdGhlIHNw
ZWNpZmllZCBqYXIuDQorCSAqIEBwYXJhbSBwYXRoVG9KYXIgVGhlIGZ1bGwgcGF0aCB0byB0aGUg
amFyIHRoYXQgbmVlZHMgdG8gYmUgaW5kZXhlZA0KKwkgKiBAcGFyYW0gcGF0aFRvSW5kZXhGaWxl
IFRoZSBmdWxsIHBhdGggdG8gdGhlIGluZGV4IGZpbGUgdGhhdCBuZWVkcyB0byBiZSBnZW5lcmF0
ZWQNCisJICogQHRocm93cyBJT0V4Y2VwdGlvbiBpZiB0aGUgamFyIGlzIG5vdCBmb3VuZCBvciBj
b3VsZCBub3Qgd3JpdGUgaW50byB0aGUgaW5kZXggZmlsZQ0KKwkgKiBAc2luY2UgMy44DQorCSAq
Lw0KKwlwdWJsaWMgc3RhdGljIHZvaWQgZ2VuZXJhdGVJbmRleEZvckphcihTdHJpbmcgcGF0aFRv
SmFyLCBTdHJpbmcgcGF0aFRvSW5kZXhGaWxlKSB0aHJvd3MgSU9FeGNlcHRpb24gew0KKwkJbmV3
IERlZmF1bHRKYXZhSW5kZXhlcigpLmdlbmVyYXRlSW5kZXhGb3JKYXIocGF0aFRvSmFyLCBwYXRo
VG9JbmRleEZpbGUpOw0KKwl9DQorDQorfQ0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvY29yZS9pbmRleC9KYXZhSW5kZXhlckFwcGxpY2F0
aW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2Nv
cmUvaW5kZXgvSmF2YUluZGV4ZXJBcHBsaWNhdGlvbi5qYXZhCm5ldyBmaWxlIG1vZGUgMTAwNjQ0
CmluZGV4IDAwMDAwMDAuLjg5NTliZmIKLS0tIC9kZXYvbnVsbAorKysgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2NvcmUvaW5kZXgvSmF2YUluZGV4ZXJBcHBs
aWNhdGlvbi5qYXZhCkBAIC0wLDAgKzEsMTU4IEBACisvKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0K
KyAqICBDb3B5cmlnaHQgKGMpIDIwMTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuDQorICog
IEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBt
YXRlcmlhbHMNCisgKiAgYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUg
RWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wDQorICogIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMg
ZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0DQorICogIGh0dHA6Ly93d3cuZWNsaXBz
ZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sDQorICogDQorICogIENvbnRyaWJ1dG9yczoNCisgKiAg
ICAgSUJNIENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uDQorICoq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKiovDQorcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuY29yZS5pbmRl
eDsNCisNCitpbXBvcnQgamF2YS5pby5GaWxlOw0KK2ltcG9ydCBqYXZhLmlvLklPRXhjZXB0aW9u
Ow0KK2ltcG9ydCBqYXZhLnRleHQuTWVzc2FnZUZvcm1hdDsNCitpbXBvcnQgamF2YS51dGlsLkFy
cmF5TGlzdDsNCisNCitpbXBvcnQgb3JnLmVjbGlwc2UuZXF1aW5veC5hcHAuSUFwcGxpY2F0aW9u
Ow0KK2ltcG9ydCBvcmcuZWNsaXBzZS5lcXVpbm94LmFwcC5JQXBwbGljYXRpb25Db250ZXh0Ow0K
K2ltcG9ydCBvcmcuZWNsaXBzZS5vc2dpLnV0aWwuTkxTOw0KKw0KKy8qKg0KKyAqIEltcGxlbWVu
dHMgYW4gRWNsaXBzZSBBcHBsaWNhdGlvbiBmb3Ige0BsaW5rIG9yZy5lY2xpcHNlLmpkdC5jb3Jl
LmluZGV4LkphdmFJbmRleGVyfS4NCisgKiANCisgKiA8cD4NCisgKiBPbiBNYWNPUywgd2hlbiBp
bnZva2VkIHVzaW5nIHRoZSBFY2xpcHNlIGV4ZWN1dGFibGUsIHRoZSAidXNlci5kaXIiIHByb3Bl
cnR5IGlzIHNldCB0byB0aGUgZm9sZGVyIGluIHdoaWNoIHRoZQ0KKyAqIGVjbGlwc2UuaW5pIGZp
bGUgaXMgbG9jYXRlZC4gVGhpcyBtYWtlcyBpdCBoYXJkZXIgdG8gdXNlIHJlbGF0aXZlIHBhdGhz
IHRvIHBvaW50IHRvIHRoZSBmaWxlcyB0byBiZSBqYXInZCBvciB0bw0KKyAqIHRoZSBpbmRleCBm
aWxlIHRoYXQgaXMgZ2VuZXJhdGVkLg0KKyAqIDwvcD4NCisgKiANCisgKiANCisgKiBAc2luY2Ug
My44DQorICogQG5vaW5zdGFudGlhdGUgVGhpcyBjbGFzcyBpcyBub3QgaW50ZW5kZWQgdG8gYmUg
aW5zdGFudGlhdGVkIGJ5IGNsaWVudHMuDQorICogQG5vZXh0ZW5kIFRoaXMgY2xhc3MgaXMgbm90
IGludGVuZGVkIHRvIGJlIHN1YmNsYXNzZWQgYnkgY2xpZW50cy4NCisgKi8NCitwdWJsaWMgY2xh
c3MgSmF2YUluZGV4ZXJBcHBsaWNhdGlvbiBpbXBsZW1lbnRzIElBcHBsaWNhdGlvbiB7DQorDQor
CXByaXZhdGUgZmluYWwgc3RhdGljIGNsYXNzIE1lc3NhZ2VzIGV4dGVuZHMgTkxTIHsNCisJCXBy
aXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZyBNRVNTQUdFU19OQU1FID0gIm9yZy5lY2xpcHNlLmpk
dC5jb3JlLmluZGV4Lm1lc3NhZ2VzIjsvLyROT04tTkxTLTEkDQorDQorCQlwdWJsaWMgc3RhdGlj
IFN0cmluZyBDb21tYW5kTGluZVByb2Nlc3Npbmc7DQorCQlwdWJsaWMgc3RhdGljIFN0cmluZyBD
b21tYW5kTGluZVVzYWdlOw0KKwkJcHVibGljIHN0YXRpYyBTdHJpbmcgQ29tbWFuZExpbmVPbmx5
T25lT3V0cHV0RXJyb3I7DQorCQlwdWJsaWMgc3RhdGljIFN0cmluZyBDb21tYW5kTGluZU91dHB1
dFRha2VzQXJnczsNCisJCXB1YmxpYyBzdGF0aWMgU3RyaW5nIENvbW1hbmRMaW5lT25seU9uZUph
ckVycm9yOw0KKwkJcHVibGljIHN0YXRpYyBTdHJpbmcgQ29tbWFuZExpbmVKYXJOb3RTcGVjaWZp
ZWQ7DQorCQlwdWJsaWMgc3RhdGljIFN0cmluZyBDb21tYW5kTGluZUluZGV4RmlsZU5vdFNwZWNp
ZmllZDsNCisJCXB1YmxpYyBzdGF0aWMgU3RyaW5nIENhdWdodEV4Y2VwdGlvbjsNCisJCXB1Ymxp
YyBzdGF0aWMgU3RyaW5nIENvbW1hbmRMaW5lSmFyRmlsZU5vdEV4aXN0Ow0KKw0KKwkJc3RhdGlj
IHsNCisJCQlOTFMuaW5pdGlhbGl6ZU1lc3NhZ2VzKE1FU1NBR0VTX05BTUUsIE1lc3NhZ2VzLmNs
YXNzKTsNCisJCX0NCisNCisJCXB1YmxpYyBzdGF0aWMgU3RyaW5nIGJpbmQoU3RyaW5nIG1lc3Nh
Z2UpIHsNCisJCQlyZXR1cm4gYmluZChtZXNzYWdlLCBudWxsKTsNCisJCX0NCisNCisJCXB1Ymxp
YyBzdGF0aWMgU3RyaW5nIGJpbmQoU3RyaW5nIG1lc3NhZ2UsIE9iamVjdCBiaW5kaW5nKSB7DQor
CQkJcmV0dXJuIGJpbmQobWVzc2FnZSwgbmV3IE9iamVjdFtdIHsgYmluZGluZyB9KTsNCisJCX0N
CisNCisJCXB1YmxpYyBzdGF0aWMgU3RyaW5nIGJpbmQoU3RyaW5nIG1lc3NhZ2UsIE9iamVjdCBi
aW5kaW5nMSwgT2JqZWN0IGJpbmRpbmcyKSB7DQorCQkJcmV0dXJuIGJpbmQobWVzc2FnZSwgbmV3
IE9iamVjdFtdIHsgYmluZGluZzEsIGJpbmRpbmcyIH0pOw0KKwkJfQ0KKw0KKwkJcHVibGljIHN0
YXRpYyBTdHJpbmcgYmluZChTdHJpbmcgbWVzc2FnZSwgT2JqZWN0W10gYmluZGluZ3MpIHsNCisJ
CQlyZXR1cm4gTWVzc2FnZUZvcm1hdC5mb3JtYXQobWVzc2FnZSwgYmluZGluZ3MpOw0KKwkJfQ0K
Kwl9DQorDQorCXByaXZhdGUgU3RyaW5nIGphclRvSW5kZXg7DQorCXByaXZhdGUgU3RyaW5nIGlu
ZGV4RmlsZTsNCisJcHJpdmF0ZSBib29sZWFuIHZlcmJvc2UgPSBmYWxzZTsNCisJcHJpdmF0ZSBz
dGF0aWMgZmluYWwgU3RyaW5nIFBERV9MQVVOQ0ggPSAiLXBkZWxhdW5jaCI7IC8vJE5PTi1OTFMt
MSQNCisJcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIEFSR19IRUxQID0gIi1oZWxwIjsgLy8k
Tk9OLU5MUy0xJA0KKwlwcml2YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcgQVJHX1ZFUkJPU0UgPSAi
LXZlcmJvc2UiOyAvLyROT04tTkxTLTEkDQorCXByaXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZyBB
UkdfT1VUUFVUID0gIi1vdXRwdXQiOyAvLyROT04tTkxTLTEkDQorDQorCXByaXZhdGUgdm9pZCBk
aXNwbGF5SGVscCgpIHsNCisJCVN5c3RlbS5vdXQucHJpbnRsbihNZXNzYWdlcy5iaW5kKE1lc3Nh
Z2VzLkNvbW1hbmRMaW5lVXNhZ2UpKTsNCisJfQ0KKw0KKwlwcml2YXRlIHZvaWQgZGlzcGxheUVy
cm9yKFN0cmluZyBtZXNzYWdlKSB7DQorCQlTeXN0ZW0ub3V0LnByaW50bG4obWVzc2FnZSk7DQor
CQlTeXN0ZW0ub3V0LnByaW50bG4oKTsNCisJCWRpc3BsYXlIZWxwKCk7DQorCX0NCisNCisJcHJp
dmF0ZSBib29sZWFuIHByb2Nlc3NDb21tYW5kTGluZShTdHJpbmdbXSBhcmdzQXJyYXkpIHsNCisJ
CUFycmF5TGlzdCBhcmdzID0gbmV3IEFycmF5TGlzdCgpOw0KKwkJZm9yIChpbnQgaSA9IDAsIG1h
eCA9IGFyZ3NBcnJheS5sZW5ndGg7IGkgPCBtYXg7IGkrKykgew0KKwkJCWFyZ3MuYWRkKGFyZ3NB
cnJheVtpXSk7DQorCQl9DQorCQlpbnQgaW5kZXggPSAwOw0KKwkJZmluYWwgaW50IGFyZ0NvdW50
ID0gYXJnc0FycmF5Lmxlbmd0aDsNCisNCisJCWxvb3A6IHdoaWxlIChpbmRleCA8IGFyZ0NvdW50
KSB7DQorCQkJU3RyaW5nIGN1cnJlbnRBcmcgPSBhcmdzQXJyYXlbaW5kZXgrK107DQorCQkJaWYg
KFBERV9MQVVOQ0guZXF1YWxzKGN1cnJlbnRBcmcpKSB7DQorCQkJCWNvbnRpbnVlIGxvb3A7DQor
CQkJfSBlbHNlIGlmIChBUkdfSEVMUC5lcXVhbHMoY3VycmVudEFyZykpIHsNCisJCQkJZGlzcGxh
eUhlbHAoKTsNCisJCQkJcmV0dXJuIGZhbHNlOw0KKwkJCX0gZWxzZSBpZiAoQVJHX1ZFUkJPU0Uu
ZXF1YWxzKGN1cnJlbnRBcmcpKSB7DQorCQkJCXRoaXMudmVyYm9zZSA9IHRydWU7DQorCQkJCWNv
bnRpbnVlIGxvb3A7DQorCQkJfSBlbHNlIGlmIChBUkdfT1VUUFVULmVxdWFscyhjdXJyZW50QXJn
KSkgew0KKwkJCQlpZiAodGhpcy5pbmRleEZpbGUgIT0gbnVsbCkgew0KKwkJCQkJZGlzcGxheUVy
cm9yKE1lc3NhZ2VzLmJpbmQoTWVzc2FnZXMuQ29tbWFuZExpbmVPbmx5T25lT3V0cHV0RXJyb3Ip
KTsNCisJCQkJCXJldHVybiBmYWxzZTsNCisJCQkJfSBlbHNlIGlmIChpbmRleCA9PSBhcmdDb3Vu
dCkgew0KKwkJCQkJZGlzcGxheUVycm9yKE1lc3NhZ2VzLmJpbmQoTWVzc2FnZXMuQ29tbWFuZExp
bmVPdXRwdXRUYWtlc0FyZ3MpKTsNCisJCQkJCXJldHVybiBmYWxzZTsNCisJCQkJfQ0KKwkJCQl0
aGlzLmluZGV4RmlsZSA9IGFyZ3NBcnJheVtpbmRleCsrXTsNCisJCQl9IGVsc2Ugew0KKwkJCQlp
ZiAodGhpcy5qYXJUb0luZGV4ICE9IG51bGwpIHsNCisJCQkJCWRpc3BsYXlFcnJvcihNZXNzYWdl
cy5iaW5kKE1lc3NhZ2VzLkNvbW1hbmRMaW5lT25seU9uZUphckVycm9yKSk7DQorCQkJCQlyZXR1
cm4gZmFsc2U7DQorCQkJCX0NCisJCQkJdGhpcy5qYXJUb0luZGV4ID0gY3VycmVudEFyZzsNCisJ
CQl9DQorCQl9DQorCQlyZXR1cm4gdHJ1ZTsNCisJfQ0KKw0KKwlwdWJsaWMgT2JqZWN0IHN0YXJ0
KElBcHBsaWNhdGlvbkNvbnRleHQgY29udGV4dCkgdGhyb3dzIEV4Y2VwdGlvbiB7DQorCQlib29s
ZWFuIGV4ZWN1dGUgPSBwcm9jZXNzQ29tbWFuZExpbmUoKFN0cmluZ1tdKSBjb250ZXh0LmdldEFy
Z3VtZW50cygpLmdldChJQXBwbGljYXRpb25Db250ZXh0LkFQUExJQ0FUSU9OX0FSR1MpKTsNCisJ
CWlmIChleGVjdXRlKSB7DQorCQkJaWYgKHRoaXMuamFyVG9JbmRleCAhPSBudWxsICYmIHRoaXMu
aW5kZXhGaWxlICE9IG51bGwpIHsNCisJCQkJRmlsZSBmID0gbmV3IEZpbGUodGhpcy5qYXJUb0lu
ZGV4KTsNCisJCQkJaWYgKGYuZXhpc3RzKCkpIHsNCisJCQkJCWlmICh0aGlzLnZlcmJvc2UpIHsN
CisJCQkJCQlTeXN0ZW0ub3V0LnByaW50bG4oTWVzc2FnZXMuYmluZChNZXNzYWdlcy5Db21tYW5k
TGluZVByb2Nlc3NpbmcsIHRoaXMuaW5kZXhGaWxlLCB0aGlzLmphclRvSW5kZXgpKTsNCisJCQkJ
CX0NCisJCQkJCXRyeSB7DQorCQkJCQkJSmF2YUluZGV4ZXIuZ2VuZXJhdGVJbmRleEZvckphcih0
aGlzLmphclRvSW5kZXgsIHRoaXMuaW5kZXhGaWxlKTsNCisJCQkJCX0gY2F0Y2ggKElPRXhjZXB0
aW9uIGUpIHsNCisJCQkJCQlTeXN0ZW0ub3V0LnByaW50bG4oTWVzc2FnZXMuYmluZChNZXNzYWdl
cy5DYXVnaHRFeGNlcHRpb24sICJJT0V4Y2VwdGlvbiIsIGUuZ2V0TG9jYWxpemVkTWVzc2FnZSgp
KSk7IC8vJE5PTi1OTFMtMSQNCisJCQkJCX0NCisJCQkJfSBlbHNlIHsNCisJCQkJCQlTeXN0ZW0u
b3V0LnByaW50bG4oTWVzc2FnZXMuYmluZChNZXNzYWdlcy5Db21tYW5kTGluZUphckZpbGVOb3RF
eGlzdCwgdGhpcy5qYXJUb0luZGV4KSk7DQorCQkJCX0NCisJCQl9IGVsc2UgaWYgKHRoaXMuamFy
VG9JbmRleCA9PSBudWxsKSB7DQorCQkJCVN5c3RlbS5vdXQucHJpbnRsbihNZXNzYWdlcy5iaW5k
KE1lc3NhZ2VzLkNvbW1hbmRMaW5lSmFyTm90U3BlY2lmaWVkKSk7DQorCQkJfSBlbHNlIGlmICh0
aGlzLmluZGV4RmlsZSA9PSBudWxsKSB7DQorCQkJCVN5c3RlbS5vdXQucHJpbnRsbihNZXNzYWdl
cy5iaW5kKE1lc3NhZ2VzLkNvbW1hbmRMaW5lSW5kZXhGaWxlTm90U3BlY2lmaWVkKSk7DQorCQkJ
fQ0KKwkJfQ0KKwkJcmV0dXJuIElBcHBsaWNhdGlvbi5FWElUX09LOw0KKwl9DQorDQorCXB1Ymxp
YyB2b2lkIHN0b3AoKSB7DQorCQkvLyBkbyBub3RoaW5nDQorCX0NCisNCit9DQpkaWZmIC0tZ2l0
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9jb3JlL2luZGV4
L21lc3NhZ2VzLnByb3BlcnRpZXMgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2Vj
bGlwc2UvamR0L2NvcmUvaW5kZXgvbWVzc2FnZXMucHJvcGVydGllcwpuZXcgZmlsZSBtb2RlIDEw
MDY0NAppbmRleCAwMDAwMDAwLi43Yjk2NmJmCi0tLSAvZGV2L251bGwKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9jb3JlL2luZGV4L21lc3NhZ2VzLnBy
b3BlcnRpZXMKQEAgLTAsMCArMSwyOSBAQAorIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIworIyBDb3B5
cmlnaHQgKGMpIDIwMDAsIDIwMDYgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisjIEFsbCBy
aWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlh
bHMKKyMgYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQ
dWJsaWMgTGljZW5zZSB2MS4wCisjIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9u
LCBhbmQgaXMgYXZhaWxhYmxlIGF0CisjIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBs
LXYxMC5odG1sCisjCisjIENvbnRyaWJ1dG9yczoKKyMgICAgIElCTSBDb3Jwb3JhdGlvbiAtIGlu
aXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgorIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIworQ29t
bWFuZExpbmVVc2FnZT1Vc2FnZTogZWNsaXBzZSAtYXBwbGljYXRpb24gb3JnLmVjbGlwc2UuamR0
LmNvcmUuSmF2YUluZGV4ZXJBcHBsaWNhdGlvbiBbIE9QVElPTlMgXSAtb3V0cHV0IDxpbmRleEZp
bGU+IDxqYXJmaWxlPlxuXAorXG5cCitcICAgLW91dHB1dCA8aW5kZXhGaWxlPiBQYXRoIHRvIHRo
ZSBpbmRleCBmaWxlIHRvIGJlIGdlbmVyYXRlZC5cblwKK1wKK1wgICA8amFyZmlsZT4gICBQYXRo
IHRvIHRoZSBqYXIgZm9yIHdoaWNoIGluZGV4IG5lZWRzIHRvIGJlIGdlbmVyYXRlZC5cblwKK1wK
K1xuXAorXCBPUFRJT05TOlxuXAorXG5cCitcICAgLWhlbHAgICAgICAgICAgICAgICAgRGlzcGxh
eSB0aGlzIG1lc3NhZ2UuXG5cCitcICAgLXZlcmJvc2UgICAgICAgICAgICAgQmUgdmVyYm9zZSBh
Ym91dCB0aGUgam9iLgorQ29tbWFuZExpbmVQcm9jZXNzaW5nPUdlbmVyYXRpbmcgaW5kZXggezB9
IGZvciB0aGUgamFyIHsxfS4KK0NvbW1hbmRMaW5lT25seU9uZU91dHB1dEVycm9yPU9ubHkgb25l
IG91dHB1dCBuZWVkcyB0byBiZSBzcGVjaWZpZWQuCitDb21tYW5kTGluZU91dHB1dFRha2VzQXJn
cz0tb3V0cHV0IHNob3VsZCBiZSBmb2xsb3dlZCBieSB0aGUgcGF0aCB0byB0aGUgaW5kZXggZmls
ZS4KK0NvbW1hbmRMaW5lT25seU9uZUphckVycm9yPU9ubHkgb25lIGphciBmaWxlIG5lZWRzIHRv
IGJlIHNwZWNpZmllZC4KK0NvbW1hbmRMaW5lSmFyTm90U3BlY2lmaWVkPU5vIGphciBmaWxlIGlz
IHNwZWNpZmllZC4KK0NvbW1hbmRMaW5lSW5kZXhGaWxlTm90U3BlY2lmaWVkPU5vIGluZGV4IGZp
bGUgaXMgc3BlY2lmaWVkLgorQ2F1Z2h0RXhjZXB0aW9uPUV4Y2VwdGlvbiB7MH0gLSB7MX0uCitD
b21tYW5kTGluZUphckZpbGVOb3RFeGlzdD17MH0gZG9lcyBub3QgZXhpc3QuCmRpZmYgLS1naXQg
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
cmUvc2VhcmNoL2luZGV4aW5nL0FkZEphckZpbGVUb0luZGV4LmphdmEgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNoL2luZGV4
aW5nL0FkZEphckZpbGVUb0luZGV4LmphdmEKaW5kZXggMTY4OTA0Zi4uMmE5OGQwMSAxMDA2NDQK
LS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb3JlL3NlYXJjaC9pbmRleGluZy9BZGRKYXJGaWxlVG9JbmRleC5qYXZhCisrKyBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFy
Y2gvaW5kZXhpbmcvQWRkSmFyRmlsZVRvSW5kZXguamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTAgSUJNIENvcnBv
cmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTEgSUJNIENvcnBv
cmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0g
YW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5k
ZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNo
IGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC00
MiwxNCArNDIsMTcgQEAKIAlwcml2YXRlIHN0YXRpYyBmaW5hbCBjaGFyIEpBUl9TRVBBUkFUT1Ig
PSBJSmF2YVNlYXJjaFNjb3BlLkpBUl9GSUxFX0VOVFJZX1NFUEFSQVRPUi5jaGFyQXQoMCk7CiAJ
SUZpbGUgcmVzb3VyY2U7CiAJU2Nhbm5lciBzY2FubmVyOworCXByaXZhdGUgSVBhdGggaW5kZXhG
aWxlVVJMOwogCi0JcHVibGljIEFkZEphckZpbGVUb0luZGV4KElGaWxlIHJlc291cmNlLCBJbmRl
eE1hbmFnZXIgbWFuYWdlcikgeworCXB1YmxpYyBBZGRKYXJGaWxlVG9JbmRleChJRmlsZSByZXNv
dXJjZSwgSVBhdGggaW5kZXhGaWxlLCBJbmRleE1hbmFnZXIgbWFuYWdlcikgewogCQlzdXBlcihy
ZXNvdXJjZS5nZXRGdWxsUGF0aCgpLCBtYW5hZ2VyKTsKIAkJdGhpcy5yZXNvdXJjZSA9IHJlc291
cmNlOworCQl0aGlzLmluZGV4RmlsZVVSTCA9IGluZGV4RmlsZTsKIAl9Ci0JcHVibGljIEFkZEph
ckZpbGVUb0luZGV4KElQYXRoIGphclBhdGgsIEluZGV4TWFuYWdlciBtYW5hZ2VyKSB7CisJcHVi
bGljIEFkZEphckZpbGVUb0luZGV4KElQYXRoIGphclBhdGgsIElQYXRoIGluZGV4RmlsZSwgSW5k
ZXhNYW5hZ2VyIG1hbmFnZXIpIHsKIAkJLy8gZXh0ZXJuYWwgSkFSIHNjZW5hcmlvIC0gbm8gcmVz
b3VyY2UKIAkJc3VwZXIoamFyUGF0aCwgbWFuYWdlcik7CisJCXRoaXMuaW5kZXhGaWxlVVJMID0g
aW5kZXhGaWxlOwogCX0KIAlwdWJsaWMgYm9vbGVhbiBlcXVhbHMoT2JqZWN0IG8pIHsKIAkJaWYg
KG8gaW5zdGFuY2VvZiBBZGRKYXJGaWxlVG9JbmRleCkgewpAQCAtNzAsNiArNzMsMTIgQEAKIAlw
dWJsaWMgYm9vbGVhbiBleGVjdXRlKElQcm9ncmVzc01vbml0b3IgcHJvZ3Jlc3NNb25pdG9yKSB7
CiAKIAkJaWYgKHRoaXMuaXNDYW5jZWxsZWQgfHwgcHJvZ3Jlc3NNb25pdG9yICE9IG51bGwgJiYg
cHJvZ3Jlc3NNb25pdG9yLmlzQ2FuY2VsZWQoKSkgcmV0dXJuIHRydWU7CisKKwkJaWYgKHRoaXMu
aW5kZXhGaWxlVVJMICE9IG51bGwpIHsKKwkJCWJvb2xlYW4gYWRkZWQgPSB0aGlzLm1hbmFnZXIu
YWRkSW5kZXgodGhpcy5jb250YWluZXJQYXRoLCB0aGlzLmluZGV4RmlsZVVSTCk7CisJCQlpZiAo
YWRkZWQpIHJldHVybiB0cnVlOwkKKwkJCXRoaXMuaW5kZXhGaWxlVVJMID0gbnVsbDsKKwkJfQog
CiAJCXRyeSB7CiAJCQkvLyBpZiBpbmRleCBpcyBhbHJlYWR5IGNhY2hlZCwgdGhlbiBkbyBub3Qg
cGVyZm9ybSBhbnkgY2hlY2sKQEAgLTE5Miw3ICsyMDEsNyBAQAogCQkJCQlyZXR1cm4gZmFsc2U7
CiAJCQkJfQogCQkJCWluZGV4LnNlcGFyYXRvciA9IEpBUl9TRVBBUkFUT1I7Ci0KKwkJCQlJUGF0
aCBpbmRleFBhdGggPSB0aGlzLm1hbmFnZXIuY29tcHV0ZUluZGV4TG9jYXRpb24odGhpcy5jb250
YWluZXJQYXRoKTsKIAkJCQlmb3IgKEVudW1lcmF0aW9uIGUgPSB6aXAuZW50cmllcygpOyBlLmhh
c01vcmVFbGVtZW50cygpOykgewogCQkJCQlpZiAodGhpcy5pc0NhbmNlbGxlZCkgewogCQkJCQkJ
aWYgKEpvYk1hbmFnZXIuVkVSQk9TRSkKQEAgLTIwOCw3ICsyMTcsNyBAQAogCQkJCQkJLy8gaW5k
ZXggb25seSBjbGFzc2VzIGNvbWluZyBmcm9tIHZhbGlkIHBhY2thZ2VzIC0gaHR0cHM6Ly9idWdz
LmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTI5Mzg2MQogCQkJCQkJZmluYWwgYnl0
ZVtdIGNsYXNzRmlsZUJ5dGVzID0gb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLnV0
aWwuVXRpbC5nZXRaaXBFbnRyeUJ5dGVDb250ZW50KHplLCB6aXApOwogCQkJCQkJSmF2YVNlYXJj
aERvY3VtZW50IGVudHJ5RG9jdW1lbnQgPSBuZXcgSmF2YVNlYXJjaERvY3VtZW50KHplLCB6aXBG
aWxlUGF0aCwgY2xhc3NGaWxlQnl0ZXMsIHBhcnRpY2lwYW50KTsKLQkJCQkJCXRoaXMubWFuYWdl
ci5pbmRleERvY3VtZW50KGVudHJ5RG9jdW1lbnQsIHBhcnRpY2lwYW50LCBpbmRleCwgdGhpcy5j
b250YWluZXJQYXRoKTsKKwkJCQkJCXRoaXMubWFuYWdlci5pbmRleERvY3VtZW50KGVudHJ5RG9j
dW1lbnQsIHBhcnRpY2lwYW50LCBpbmRleCwgaW5kZXhQYXRoKTsKIAkJCQkJfQogCQkJCX0KIAkJ
CQl0aGlzLm1hbmFnZXIuc2F2ZUluZGV4KGluZGV4KTsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gvaW5k
ZXhpbmcvRGVmYXVsdEphdmFJbmRleGVyLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFy
Y2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNoL2luZGV4aW5nL0RlZmF1bHRK
YXZhSW5kZXhlci5qYXZhCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAuLjU0YjRm
YTQKLS0tIC9kZXYvbnVsbAorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNoL2luZGV4aW5nL0RlZmF1bHRKYXZhSW5kZXhl
ci5qYXZhCkBAIC0wLDAgKzEsNTggQEAKKy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQorICogQ29w
eXJpZ2h0IChjKSAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLg0KKyAqIEFsbCByaWdo
dHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMN
CisgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1
YmxpYyBMaWNlbnNlIHYxLjANCisgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlv
biwgYW5kIGlzIGF2YWlsYWJsZSBhdA0KKyAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwv
ZXBsLXYxMC5odG1sDQorICoNCisgKiBDb250cmlidXRvcnM6DQorICogICAgIElCTSBDb3Jwb3Jh
dGlvbiAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbg0KKyAqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqLw0KK3BhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvcmUuc2VhcmNoLmlu
ZGV4aW5nOw0KKw0KK2ltcG9ydCBqYXZhLmlvLkZpbGU7DQoraW1wb3J0IGphdmEuaW8uRmlsZU5v
dEZvdW5kRXhjZXB0aW9uOw0KK2ltcG9ydCBqYXZhLmlvLklPRXhjZXB0aW9uOw0KK2ltcG9ydCBq
YXZhLnV0aWwuRW51bWVyYXRpb247DQoraW1wb3J0IGphdmEudXRpbC56aXAuWmlwRW50cnk7DQor
aW1wb3J0IGphdmEudXRpbC56aXAuWmlwRmlsZTsNCisNCitpbXBvcnQgb3JnLmVjbGlwc2UuY29y
ZS5ydW50aW1lLlBhdGg7DQoraW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLnNlYXJjaC5JSmF2
YVNlYXJjaFNjb3BlOw0KK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5zZWFyY2guU2VhcmNo
RW5naW5lOw0KK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5zZWFyY2guU2VhcmNoUGFydGlj
aXBhbnQ7DQoraW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci51dGlsLlV0
aWw7DQoraW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLmluZGV4LkluZGV4Ow0K
K2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS5zZWFyY2guSmF2YVNlYXJjaERv
Y3VtZW50Ow0KKw0KK3B1YmxpYyBjbGFzcyBEZWZhdWx0SmF2YUluZGV4ZXIgew0KKwlwcml2YXRl
IHN0YXRpYyBmaW5hbCBjaGFyIEpBUl9TRVBBUkFUT1IgPSBJSmF2YVNlYXJjaFNjb3BlLkpBUl9G
SUxFX0VOVFJZX1NFUEFSQVRPUi5jaGFyQXQoMCk7DQorCQ0KKwlwdWJsaWMgdm9pZCBnZW5lcmF0
ZUluZGV4Rm9ySmFyKFN0cmluZyBwYXRoVG9KYXIsIFN0cmluZyBwYXRoVG9JbmRleEZpbGUpIHRo
cm93cyBJT0V4Y2VwdGlvbiB7DQorCQlGaWxlIGYgPSBuZXcgRmlsZShwYXRoVG9KYXIpOw0KKwkJ
aWYgKCFmLmV4aXN0cygpKSB7DQorCQkJdGhyb3cgbmV3IEZpbGVOb3RGb3VuZEV4Y2VwdGlvbihw
YXRoVG9KYXIgKyAiIG5vdCBmb3VuZCIpOyAvLyROT04tTkxTLTEkDQorCQl9DQorCQlJbmRleCBp
bmRleCA9IG5ldyBJbmRleChwYXRoVG9JbmRleEZpbGUsIHBhdGhUb0phciwgZmFsc2UgLypyZXVz
ZSBpbmRleCBmaWxlKi8pOw0KKwkJU2VhcmNoUGFydGljaXBhbnQgcGFydGljaXBhbnQgPSBTZWFy
Y2hFbmdpbmUuZ2V0RGVmYXVsdFNlYXJjaFBhcnRpY2lwYW50KCk7DQorCQlpbmRleC5zZXBhcmF0
b3IgPSBKQVJfU0VQQVJBVE9SOw0KKwkJWmlwRmlsZSB6aXAgPSBuZXcgWmlwRmlsZShwYXRoVG9K
YXIpOw0KKwkJdHJ5IHsNCisJCQlmb3IgKEVudW1lcmF0aW9uIGUgPSB6aXAuZW50cmllcygpOyBl
Lmhhc01vcmVFbGVtZW50cygpOykgew0KKwkJCQkvLyBpdGVyYXRlIGVhY2ggZW50cnkgdG8gaW5k
ZXggaXQNCisJCQkJWmlwRW50cnkgemUgPSAoWmlwRW50cnkpIGUubmV4dEVsZW1lbnQoKTsNCisJ
CQkJU3RyaW5nIHppcEVudHJ5TmFtZSA9IHplLmdldE5hbWUoKTsNCisJCQkJaWYgKFV0aWwuaXND
bGFzc0ZpbGVOYW1lKHppcEVudHJ5TmFtZSkpIHsNCisJCQkJCWZpbmFsIGJ5dGVbXSBjbGFzc0Zp
bGVCeXRlcyA9IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci51dGlsLlV0aWwuZ2V0
WmlwRW50cnlCeXRlQ29udGVudCh6ZSwgemlwKTsNCisJCQkJCUphdmFTZWFyY2hEb2N1bWVudCBl
bnRyeURvY3VtZW50ID0gbmV3IEphdmFTZWFyY2hEb2N1bWVudCh6ZSwgbmV3IFBhdGgocGF0aFRv
SmFyKSwgY2xhc3NGaWxlQnl0ZXMsIHBhcnRpY2lwYW50KTsNCisJCQkJCWVudHJ5RG9jdW1lbnQu
c2V0SW5kZXgoaW5kZXgpOw0KKwkJCQkJbmV3IEJpbmFyeUluZGV4ZXIoZW50cnlEb2N1bWVudCku
aW5kZXhEb2N1bWVudCgpOw0KKwkJCQl9DQorCQkJfQ0KKwkJCWluZGV4LnNhdmUoKTsNCisJCX0g
ZmluYWxseSB7DQorCQkJemlwLmNsb3NlKCk7DQorCQl9DQorCQlyZXR1cm47DQorCX0NCit9DQpk
aWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb3JlL3NlYXJjaC9pbmRleGluZy9JbmRleEFsbFByb2plY3QuamF2YSBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFy
Y2gvaW5kZXhpbmcvSW5kZXhBbGxQcm9qZWN0LmphdmEKaW5kZXggNDMxMzYyMS4uZTY4MjMwYiAx
MDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb3JlL3NlYXJjaC9pbmRleGluZy9JbmRleEFsbFByb2plY3QuamF2YQorKysgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUv
c2VhcmNoL2luZGV4aW5nL0luZGV4QWxsUHJvamVjdC5qYXZhCkBAIC0xLDUgKzEsNSBAQAogLyoq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAwOSBJQk0gQ29y
cG9yYXRpb24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMSBJQk0gQ29y
cG9yYXRpb24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3Jh
bSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1
bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hp
Y2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKQEAg
LTc3LDcgKzc3LDcgQEAKIAkJCQkJaWYgKGVudHJ5LmdldEVudHJ5S2luZCgpID09IElDbGFzc3Bh
dGhFbnRyeS5DUEVfTElCUkFSWSAmJiBlbnRyeS5nZXRQYXRoKCkuZXF1YWxzKHByb2plY3RQYXRo
KSkgewogCQkJCQkJLy8gdGhlIHByb2plY3QgaXMgYWxzbyBhIGxpYnJhcnkgZm9sZGVyIChzZWUg
aHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTg5ODE1KQogCQkJ
CQkJLy8gZW5zdXJlIGEgam9iIGV4aXN0cyB0byBpbmRleCBpdCBhcyBhIGJpbmFyeSBmb2xkZXIK
LQkJCQkJCXRoaXMubWFuYWdlci5pbmRleExpYnJhcnkocHJvamVjdFBhdGgsIHRoaXMucHJvamVj
dCk7CisJCQkJCQl0aGlzLm1hbmFnZXIuaW5kZXhMaWJyYXJ5KHByb2plY3RQYXRoLCB0aGlzLnBy
b2plY3QsICgoQ2xhc3NwYXRoRW50cnkpZW50cnkpLmdldExpYnJhcnlJbmRleExvY2F0aW9uKCkp
OwogCQkJCQkJcmV0dXJuIHRydWU7CiAJCQkJCX0KIAkJCQl9CmRpZmYgLS1naXQgYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNo
L2luZGV4aW5nL0luZGV4TWFuYWdlci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNo
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9pbmRleGluZy9JbmRleE1hbmFn
ZXIuamF2YQppbmRleCBmMDhjMjQ5Li4yYWIzNjUzIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNoL2luZGV4
aW5nL0luZGV4TWFuYWdlci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gvaW5kZXhpbmcvSW5kZXhNYW5hZ2Vy
LmphdmEKQEAgLTEsNSArMSw1IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJp
Z2h0IChjKSAyMDAwLCAyMDEwIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJp
Z2h0IChjKSAyMDAwLCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJp
Z2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFs
cwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQ
dWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlv
biwgYW5kIGlzIGF2YWlsYWJsZSBhdApAQCAtMTEsMTAgKzExLDEyIEBACiBwYWNrYWdlIG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLnNlYXJjaC5pbmRleGluZzsKIAogaW1wb3J0IGphdmEu
aW8uKjsKK2ltcG9ydCBqYXZhLm5ldC5VUkw7CiBpbXBvcnQgamF2YS51dGlsLio7CiBpbXBvcnQg
amF2YS51dGlsLnppcC5DUkMzMjsKIAogaW1wb3J0IG9yZy5lY2xpcHNlLmNvcmUucmVzb3VyY2Vz
Lio7CitpbXBvcnQgb3JnLmVjbGlwc2UuY29yZS5ydW50aW1lLkZpbGVMb2NhdG9yOwogaW1wb3J0
IG9yZy5lY2xpcHNlLmNvcmUucnVudGltZS5JUGF0aDsKIGltcG9ydCBvcmcuZWNsaXBzZS5jb3Jl
LnJ1bnRpbWUuSVByb2dyZXNzTW9uaXRvcjsKIGltcG9ydCBvcmcuZWNsaXBzZS5jb3JlLnJ1bnRp
bWUuT3BlcmF0aW9uQ2FuY2VsZWRFeGNlcHRpb247CkBAIC01OSw2ICs2MSw3IEBACiAJcHVibGlj
IHN0YXRpYyBmaW5hbCBJbnRlZ2VyIFVQREFUSU5HX1NUQVRFID0gbmV3IEludGVnZXIoMSk7CiAJ
cHVibGljIHN0YXRpYyBmaW5hbCBJbnRlZ2VyIFVOS05PV05fU1RBVEUgPSBuZXcgSW50ZWdlcigy
KTsKIAlwdWJsaWMgc3RhdGljIGZpbmFsIEludGVnZXIgUkVCVUlMRElOR19TVEFURSA9IG5ldyBJ
bnRlZ2VyKDMpOworCXB1YmxpYyBzdGF0aWMgZmluYWwgSW50ZWdlciBSRVVTRV9TVEFURSA9IG5l
dyBJbnRlZ2VyKDQpOwogCQogCS8vIHNlYXJjaCBwYXJ0aWNpcGFudHMgd2hvIHJlZ2lzdGVyIGlu
ZGV4ZXMgd2l0aCB0aGUgaW5kZXggbWFuYWdlcgogCXByaXZhdGUgU2ltcGxlTG9va3VwVGFibGUg
cGFydGljaXBhbnRzQ29udGFpbmVycyA9IG51bGw7CkBAIC03Myw3ICs3Niw3IEBACiAJSVBhdGgg
aW5kZXhMb2NhdGlvbiA9IGNvbXB1dGVJbmRleExvY2F0aW9uKGNvbnRhaW5lclBhdGgpOwogCU9i
amVjdCBzdGF0ZSA9IGdldEluZGV4U3RhdGVzKCkuZ2V0KGluZGV4TG9jYXRpb24pOwogCUludGVn
ZXIgY3VycmVudEluZGV4U3RhdGUgPSBzdGF0ZSA9PSBudWxsID8gVU5LTk9XTl9TVEFURSA6IChJ
bnRlZ2VyKSBzdGF0ZTsKLQlpZiAoY3VycmVudEluZGV4U3RhdGUuZXF1YWxzKFJFQlVJTERJTkdf
U1RBVEUpKSByZXR1cm47IC8vIGFscmVhZHkgcmVidWlsZGluZyB0aGUgaW5kZXgKKwlpZiAoY3Vy
cmVudEluZGV4U3RhdGUuY29tcGFyZVRvKFJFQlVJTERJTkdfU1RBVEUpID49IDApIHJldHVybjsg
Ly8gYWxyZWFkeSByZWJ1aWxkaW5nIHRoZSBpbmRleAogCiAJaW50IGNvbXBhcmUgPSBuZXdJbmRl
eFN0YXRlLmNvbXBhcmVUbyhjdXJyZW50SW5kZXhTdGF0ZSk7CiAJaWYgKGNvbXBhcmUgPiAwKSB7
CkBAIC0yNTUsNyArMjU4LDcgQEAKIAkJCQkJcmV0dXJuIGluZGV4OwogCQkJCX0gY2F0Y2ggKElP
RXhjZXB0aW9uIGUpIHsKIAkJCQkJLy8gZmFpbGVkIHRvIHJlYWQgdGhlIGV4aXN0aW5nIGZpbGUg
b3IgaXRzIG5vIGxvbmdlciBjb21wYXRpYmxlCi0JCQkJCWlmIChjdXJyZW50SW5kZXhTdGF0ZSAh
PSBSRUJVSUxESU5HX1NUQVRFKSB7IC8vIHJlYnVpbGQgaW5kZXggaWYgZXhpc3RpbmcgZmlsZSBp
cyBjb3JydXB0LCB1bmxlc3MgdGhlIGluZGV4IGlzIGFscmVhZHkgYmVpbmcgcmVidWlsdAorCQkJ
CQlpZiAoY3VycmVudEluZGV4U3RhdGUgIT0gUkVCVUlMRElOR19TVEFURSAmJiBjdXJyZW50SW5k
ZXhTdGF0ZSAhPSBSRVVTRV9TVEFURSkgeyAvLyByZWJ1aWxkIGluZGV4IGlmIGV4aXN0aW5nIGZp
bGUgaXMgY29ycnVwdCwgdW5sZXNzIHRoZSBpbmRleCBpcyBhbHJlYWR5IGJlaW5nIHJlYnVpbHQK
IAkJCQkJCWlmIChWRVJCT1NFKQogCQkJCQkJCVV0aWwudmVyYm9zZSgiLT4gY2Fubm90IHJldXNl
IGV4aXN0aW5nIGluZGV4OiAiK2luZGV4TG9jYXRpb25TdHJpbmcrIiBwYXRoOiAiK2NvbnRhaW5l
clBhdGhTdHJpbmcpOyAvLyROT04tTkxTLTEkIC8vJE5PTi1OTFMtMiQKIAkJCQkJCXJlYnVpbGRJ
bmRleChpbmRleExvY2F0aW9uLCBjb250YWluZXJQYXRoKTsKQEAgLTI2NSw2ICsyNjgsMTUgQEAK
IAkJCQl9CiAJCQl9CiAJCQlpZiAoY3VycmVudEluZGV4U3RhdGUgPT0gU0FWRURfU1RBVEUpIHsg
Ly8gcmVidWlsZCBpbmRleCBpZiBleGlzdGluZyBmaWxlIGlzIG1pc3NpbmcKKwkJCQlyZWJ1aWxk
SW5kZXgoaW5kZXhMb2NhdGlvbiwgY29udGFpbmVyUGF0aCk7CisJCQkJcmV0dXJuIG51bGw7CisJ
CQl9CisJCQlpZiAoY3VycmVudEluZGV4U3RhdGUgPT0gUkVVU0VfU1RBVEUpIHsKKwkJCQkvLyBz
dXBwb3NlZCB0byBiZSBpbiByZXVzZSBzdGF0ZSBidXQgZXJyb3IgaW4gdGhlIGluZGV4IGZpbGUs
IHNvIHJlaW5kZXguCisJCQkJaWYgKFZFUkJPU0UpCisJCQkJCVV0aWwudmVyYm9zZSgiLT4gY2Fu
bm90IHJldXNlIGdpdmVuIGluZGV4OiAiK2luZGV4TG9jYXRpb24rIiBwYXRoOiAiK2NvbnRhaW5l
clBhdGhTdHJpbmcpOyAvLyROT04tTkxTLTEkIC8vJE5PTi1OTFMtMiQKKwkJCQl0aGlzLmluZGV4
TG9jYXRpb25zLnB1dChjb250YWluZXJQYXRoLCBudWxsKTsKKwkJCQlpbmRleExvY2F0aW9uID0g
Y29tcHV0ZUluZGV4TG9jYXRpb24oY29udGFpbmVyUGF0aCk7CiAJCQkJcmVidWlsZEluZGV4KGlu
ZGV4TG9jYXRpb24sIGNvbnRhaW5lclBhdGgpOwogCQkJCXJldHVybiBudWxsOwogCQkJfQpAQCAt
NDc0LDcgKzQ4Niw3IEBACiAJCWZvciAoaW50IGkgPSAwOyBpIDwgZW50cmllcy5sZW5ndGg7IGkr
KykgewogCQkJSUNsYXNzcGF0aEVudHJ5IGVudHJ5PSBlbnRyaWVzW2ldOwogCQkJaWYgKGVudHJ5
LmdldEVudHJ5S2luZCgpID09IElDbGFzc3BhdGhFbnRyeS5DUEVfTElCUkFSWSkKLQkJCQlpbmRl
eExpYnJhcnkoZW50cnkuZ2V0UGF0aCgpLCBwcm9qZWN0KTsKKwkJCQlpbmRleExpYnJhcnkoZW50
cnkuZ2V0UGF0aCgpLCBwcm9qZWN0LCAoKENsYXNzcGF0aEVudHJ5KWVudHJ5KS5nZXRMaWJyYXJ5
SW5kZXhMb2NhdGlvbigpKTsKIAkJfQogCX0gY2F0Y2goSmF2YU1vZGVsRXhjZXB0aW9uIGUpeyAv
LyBjYW5ub3QgcmV0cmlldmUgY2xhc3NwYXRoIGluZm8KIAl9CkBAIC00ODgsMTYgKzUwMCwyNCBA
QAogICogVHJpZ2dlciBhZGRpdGlvbiBvZiBhIGxpYnJhcnkgdG8gYW4gaW5kZXgKICAqIE5vdGU6
IHRoZSBhY3R1YWwgb3BlcmF0aW9uIGlzIHBlcmZvcm1lZCBpbiBiYWNrZ3JvdW5kCiAgKi8KLXB1
YmxpYyB2b2lkIGluZGV4TGlicmFyeShJUGF0aCBwYXRoLCBJUHJvamVjdCByZXF1ZXN0aW5nUHJv
amVjdCkgeworcHVibGljIHZvaWQgaW5kZXhMaWJyYXJ5KElQYXRoIHBhdGgsIElQcm9qZWN0IHJl
cXVlc3RpbmdQcm9qZWN0LCBVUkwgaW5kZXhVUkwpIHsKIAkvLyByZXF1ZXN0aW5nUHJvamVjdCBp
cyBubyBsb25nZXIgdXNlZCB0byBjYW5jZWwgam9icyBidXQgbGVhdmUgaXQgaGVyZSBqdXN0IGlu
IGNhc2UKKwlJUGF0aCBpbmRleEZpbGUgPSBudWxsOyAKKwlpZiAoaW5kZXhVUkwgIT0gbnVsbCkg
IHsKKwkJdHJ5IHsKKwkJCWluZGV4RmlsZSA9IG5ldyBQYXRoKEZpbGVMb2NhdG9yLnJlc29sdmUo
aW5kZXhVUkwpLmdldFBhdGgoKSk7CisJCX0gY2F0Y2ggKElPRXhjZXB0aW9uIGUpIHsKKwkJCWlm
IChWRVJCT1NFKQorCQkJCVV0aWwudmVyYm9zZSgiLT4gY2Fubm90IHJlc29sdmUgdGhlIHVybCA6
ICIrIGluZGV4VVJMICsgIiBzcGVjaWZpZWQgZm9yICIgKyBwYXRoKTsgLy8kTk9OLU5MUy0xJCAv
LyROT04tTkxTLTIkCisJCX0KKwl9CiAJaWYgKEphdmFDb3JlLmdldFBsdWdpbigpID09IG51bGwp
IHJldHVybjsKLQotCU9iamVjdCB0YXJnZXQgPSBKYXZhTW9kZWwuZ2V0VGFyZ2V0KHBhdGgsIHRy
dWUpOwogCUluZGV4UmVxdWVzdCByZXF1ZXN0ID0gbnVsbDsKKwlPYmplY3QgdGFyZ2V0ID0gSmF2
YU1vZGVsLmdldFRhcmdldChwYXRoLCB0cnVlKTsKIAlpZiAodGFyZ2V0IGluc3RhbmNlb2YgSUZp
bGUpIHsKLQkJcmVxdWVzdCA9IG5ldyBBZGRKYXJGaWxlVG9JbmRleCgoSUZpbGUpIHRhcmdldCwg
dGhpcyk7CisJCXJlcXVlc3QgPSBuZXcgQWRkSmFyRmlsZVRvSW5kZXgoKElGaWxlKSB0YXJnZXQs
IGluZGV4RmlsZSwgdGhpcyk7CiAJfSBlbHNlIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBGaWxlKSB7
Ci0JCXJlcXVlc3QgPSBuZXcgQWRkSmFyRmlsZVRvSW5kZXgocGF0aCwgdGhpcyk7CisJCXJlcXVl
c3QgPSBuZXcgQWRkSmFyRmlsZVRvSW5kZXgocGF0aCwgaW5kZXhGaWxlLCB0aGlzKTsKIAl9IGVs
c2UgaWYgKHRhcmdldCBpbnN0YW5jZW9mIElDb250YWluZXIpIHsKIAkJcmVxdWVzdCA9IG5ldyBJ
bmRleEJpbmFyeUZvbGRlcigoSUNvbnRhaW5lcikgdGFyZ2V0LCB0aGlzKTsKIAl9IGVsc2UgewpA
QCAtNTA4LDYgKzUyOCwxOCBAQAogCWlmICghaXNKb2JXYWl0aW5nKHJlcXVlc3QpKQogCQlyZXF1
ZXN0KHJlcXVlc3QpOwogfQorCitzeW5jaHJvbml6ZWQgYm9vbGVhbiBhZGRJbmRleChJUGF0aCBj
b250YWluZXJQYXRoLCBJUGF0aCBpbmRleEZpbGUpIHsKKwl0aGlzLmluZGV4U3RhdGVzLnB1dChp
bmRleEZpbGUsIFJFVVNFX1NUQVRFKTsKKwl0aGlzLmluZGV4TG9jYXRpb25zLnB1dChjb250YWlu
ZXJQYXRoLCBpbmRleEZpbGUpOworCUluZGV4IGluZGV4ID0gZ2V0SW5kZXgoY29udGFpbmVyUGF0
aCwgaW5kZXhGaWxlLCB0cnVlLCBmYWxzZSk7CisJaWYgKGluZGV4ID09IG51bGwpIHsKKwkJdGhp
cy5pbmRleExvY2F0aW9ucy5wdXQoY29udGFpbmVyUGF0aCwgbnVsbCk7CisJCXJldHVybiBmYWxz
ZTsKKwl9CisJcmV0dXJuIHRydWU7Cit9CisKIC8qKgogICogSW5kZXggdGhlIGNvbnRlbnQgb2Yg
dGhlIGdpdmVuIHNvdXJjZSBmb2xkZXIuCiAgKi8KQEAgLTU4NCw5ICs2MTYsOSBAQAogCX0gZWxz
ZSBpZiAodGFyZ2V0IGluc3RhbmNlb2YgSUZvbGRlcikgewogCQlyZXF1ZXN0ID0gbmV3IEluZGV4
QmluYXJ5Rm9sZGVyKChJRm9sZGVyKSB0YXJnZXQsIHRoaXMpOwogCX0gZWxzZSBpZiAodGFyZ2V0
IGluc3RhbmNlb2YgSUZpbGUpIHsKLQkJcmVxdWVzdCA9IG5ldyBBZGRKYXJGaWxlVG9JbmRleCgo
SUZpbGUpIHRhcmdldCwgdGhpcyk7CisJCXJlcXVlc3QgPSBuZXcgQWRkSmFyRmlsZVRvSW5kZXgo
KElGaWxlKSB0YXJnZXQsIG51bGwsIHRoaXMpOwogCX0gZWxzZSBpZiAodGFyZ2V0IGluc3RhbmNl
b2YgRmlsZSkgewotCQlyZXF1ZXN0ID0gbmV3IEFkZEphckZpbGVUb0luZGV4KGNvbnRhaW5lclBh
dGgsIHRoaXMpOworCQlyZXF1ZXN0ID0gbmV3IEFkZEphckZpbGVUb0luZGV4KGNvbnRhaW5lclBh
dGgsIG51bGwsIHRoaXMpOwogCX0KIAlpZiAocmVxdWVzdCAhPSBudWxsKQogCQlyZXF1ZXN0KHJl
cXVlc3QpOwpAQCAtNjQzLDcgKzY3NSw5IEBACiAJfQogCWlmIChpbmRleEZpbGUgPT0gbnVsbCkK
IAkJaW5kZXhGaWxlID0gbmV3IEZpbGUoaW5kZXhMb2NhdGlvbi50b09TU3RyaW5nKCkpOyAvLyBp
bmRleCBpcyBub3QgY2FjaGVkIHlldCwgYnV0IHN0aWxsIHdhbnQgdG8gZGVsZXRlIHRoZSBmaWxl
Ci0JaWYgKGluZGV4RmlsZS5leGlzdHMoKSkgeworCWlmICh0aGlzLmluZGV4U3RhdGVzLmdldChp
bmRleExvY2F0aW9uKSA9PSBSRVVTRV9TVEFURSkgeworCQl0aGlzLmluZGV4TG9jYXRpb25zLnB1
dChjb250YWluZXJQYXRoLCBudWxsKTsKKwl9IGVsc2UgaWYgKGluZGV4RmlsZS5leGlzdHMoKSkg
ewogCQlpZiAoREVCVUcpCiAJCQlVdGlsLnZlcmJvc2UoInJlbW92aW5nIGluZGV4IGZpbGUgIiAr
IGluZGV4RmlsZSk7IC8vJE5PTi1OTFMtMSQKIAkJaW5kZXhGaWxlLmRlbGV0ZSgpOwpAQCAtNjg2
LDkgKzcyMCwxNSBAQAogCQlmb3IgKGludCBpID0gMDsgaSA8IGNvdW50OyBpKyspCiAJCQl0aGlz
LmluZGV4ZXMucmVtb3ZlS2V5KGxvY2F0aW9uc1tpXSk7CiAJCXJlbW92ZUluZGV4ZXNTdGF0ZShs
b2NhdGlvbnMpOwotCQlpZiAodGhpcy5wYXJ0aWNpcGFudHNDb250YWluZXJzICE9IG51bGwgJiYg
dGhpcy5wYXJ0aWNpcGFudHNDb250YWluZXJzLmdldChwYXRoLnRvT1NTdHJpbmcoKSkgIT0gbnVs
bCkgewotCQkJdGhpcy5wYXJ0aWNpcGFudHNDb250YWluZXJzLnJlbW92ZUtleShwYXRoLnRvT1NT
dHJpbmcoKSk7CQotCQkJd3JpdGVQYXJ0aWNpcGFudHNJbmRleE5hbWVzRmlsZSgpOworCQlpZiAo
dGhpcy5wYXJ0aWNpcGFudHNDb250YWluZXJzICE9IG51bGwpIHsKKwkJCWJvb2xlYW4gdXBkYXRl
ID0gZmFsc2U7CisJCQlmb3IgKGludCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHsKKwkJCQlpZiAo
dGhpcy5wYXJ0aWNpcGFudHNDb250YWluZXJzLmdldChsb2NhdGlvbnNbaV0pICE9IG51bGwpIHsK
KwkJCQkJdXBkYXRlID0gdHJ1ZTsKKwkJCQkJdGhpcy5wYXJ0aWNpcGFudHNDb250YWluZXJzLnJl
bW92ZUtleShsb2NhdGlvbnNbaV0pOworCQkJCX0KKwkJCX0KKwkJCWlmICh1cGRhdGUpIHdyaXRl
UGFydGljaXBhbnRzSW5kZXhOYW1lc0ZpbGUoKTsKIAkJfQogCX0KIH0=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>208084</attachid>
            <date>2011-12-07 23:47:00 -0500</date>
            <delta_ts>2011-12-07 23:47:08 -0500</delta_ts>
            <desc>Patch for supporting the index file in a jar</desc>
            <filename>patchpart2.txt</filename>
            <type>text/plain</type>
            <size>70154</size>
            <attacher name="Satyam Kandula">satyam.kandula</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy91dGlsL1V0aWwuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy91dGlsL1V0
aWwuamF2YQppbmRleCA4YjQxNzEyLi43MDQxNWFmIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvdXRp
bC9VdGlsLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3Jj
L29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL3V0aWwvVXRpbC5qYXZhCkBAIC0xMzQ4LDYgKzEz
NDgsMzQgQEAKICAgICAgICAgfQogICAgIH0KIH0KKworLyoqCisgKiBaaXBzIHRoZSBnaXZlbiBm
aWxlcyBpbnRvIHRoZSBnaXZlbiBqYXIuIEFsbCB0aGUgZmlsZXMgYXJlIGtlcHQgYXQgdGhlIHJv
b3Qgb2YgdGhlIHppcC4gCisgKi8KK3B1YmxpYyBzdGF0aWMgdm9pZCB6aXBGaWxlcyhGaWxlW10g
ZmlsZXMsIFN0cmluZyB6aXBQYXRoKSB0aHJvd3MgSU9FeGNlcHRpb24geworCUZpbGUgemlwRmls
ZSA9IG5ldyBGaWxlKHppcFBhdGgpOworCWlmICh6aXBGaWxlLmV4aXN0cygpKSB7CisJCWlmICgh
ZGVsZXRlKHppcEZpbGUpKQorCQkJdGhyb3cgbmV3IElPRXhjZXB0aW9uKCJDb3VsZCBub3QgZGVs
ZXRlICIgKyB6aXBQYXRoKTsKKwkJLy8gZW5zdXJlIHRoZSBuZXcgemlwIGZpbGUgaGFzIGEgZGlm
ZmVyZW50IHRpbWVzdGFtcCB0aGFuIHRoZSBwcmV2aW91cyBvbmUKKwkJaW50IHRpbWVUb1dhaXQg
PSAxMDAwOyAvLyBzb21lIHBsYXRmb3JtIChsaWtlIExpbnV4KSBoYXZlIGEgMXMgZ3JhbnVsYXJp
dHkpCisJCXdhaXRBdExlYXN0KHRpbWVUb1dhaXQpOworCX0gZWxzZSB7CisJCXppcEZpbGUuZ2V0
UGFyZW50RmlsZSgpLm1rZGlycygpOworCX0KKwlaaXBPdXRwdXRTdHJlYW0gemlwID0gbmV3IFpp
cE91dHB1dFN0cmVhbShuZXcgRmlsZU91dHB1dFN0cmVhbSh6aXBGaWxlKSk7CisJdHJ5IHsKKwkJ
Zm9yIChpbnQgaSA9IDAsIGxlbmd0aCA9IGZpbGVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7
CisJCQlGaWxlIGZpbGUgPSBmaWxlc1tpXTsKKwkJCVppcEVudHJ5IGVudHJ5ID0gbmV3IFppcEVu
dHJ5KGZpbGUuZ2V0TmFtZSgpKTsKKwkJCXppcC5wdXROZXh0RW50cnkoZW50cnkpOworCQkJemlw
LndyaXRlKG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci51dGlsLlV0aWwuZ2V0Rmls
ZUJ5dGVDb250ZW50KGZpbGUpKTsKKwkJCXppcC5jbG9zZUVudHJ5KCk7CisJCX0KKwl9IGZpbmFs
bHkgeworCQl6aXAuY2xvc2UoKTsKKwl9Cit9CiAvKioKICAqIFJldHVybnMgdGhlIGNvbXBpbGF0
aW9uIGVycm9ycyAvIHdhcm5pbmdzIGZvciB0aGUgZ2l2ZW4gQ29tcGlsYXRpb25SZXN1bHQuCiAg
KgpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21vZGVsL0phdmFJbmRleFRlc3RzLmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
bW9kZWwvSmF2YUluZGV4VGVzdHMuamF2YQppbmRleCBjMTU0NzVmLi40Y2E5YmRmIDEwMDY0NAot
LS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0
L2NvcmUvdGVzdHMvbW9kZWwvSmF2YUluZGV4VGVzdHMuamF2YQorKysgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvbW9kZWwv
SmF2YUluZGV4VGVzdHMuamF2YQpAQCAtMTIsOSArMTIsMTEgQEAKIAogaW1wb3J0IGphdmEuaW8u
RmlsZTsKIGltcG9ydCBqYXZhLmlvLklPRXhjZXB0aW9uOworaW1wb3J0IGphdmEubmV0LlVSTDsK
IAogaW1wb3J0IGp1bml0LmZyYW1ld29yay5UZXN0OwogCitpbXBvcnQgb3JnLmVjbGlwc2UuY29y
ZS5yZXNvdXJjZXMuSVByb2plY3Q7CiBpbXBvcnQgb3JnLmVjbGlwc2UuY29yZS5ydW50aW1lLkNv
cmVFeGNlcHRpb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuY29yZS5ydW50aW1lLklQYXRoOwogaW1w
b3J0IG9yZy5lY2xpcHNlLmNvcmUucnVudGltZS5QYXRoOwpAQCAtMjgsNiArMzAsNyBAQAogaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLkphdmFDb3JlOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5jb3JlLmluZGV4Lio7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuc2VhcmNoLlNlYXJj
aEVuZ2luZTsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy51dGlsLlV0aWw7CiBp
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvcmUuSmF2YU1vZGVsTWFuYWdlcjsKIGlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS5Vc2VyTGlicmFyeUNsYXNzcGF0aENv
bnRhaW5lcjsKIGltcG9ydCBvcmcub3NnaS5zZXJ2aWNlLnByZWZzLkJhY2tpbmdTdG9yZUV4Y2Vw
dGlvbjsKQEAgLTcwOSw4ICs3MTIsOCBAQAogCQlTeXN0ZW0uYXJyYXljb3B5KGVudHJpZXMsIDAs
IGVudHJpZXMgPSBuZXcgSUNsYXNzcGF0aEVudHJ5W2xlbmd0aCsxXSwgMCwgbGVuZ3RoKTsKIAkJ
ZW50cmllc1tsZW5ndGhdID0gSmF2YUNvcmUubmV3Q29udGFpbmVyRW50cnkoY29udGFpbmVyU3Vn
Z2VzdGlvbi5nZXRQYXRoKCkpOwogCQlwLnNldFJhd0NsYXNzcGF0aChlbnRyaWVzLCBudWxsKTsK
LQogCX0KKwkKIAlwdWJsaWMgdm9pZCB0ZXN0VXNlckxpYnJhcnlJbmRleCgpIHRocm93cyBJT0V4
Y2VwdGlvbiwgQ29yZUV4Y2VwdGlvbiwgQmFja2luZ1N0b3JlRXhjZXB0aW9uIHsKIAkJU3RyaW5n
IGluZGV4RmlsZVBhdGggPSBnZXRFeHRlcm5hbFJlc291cmNlUGF0aCgiVGVzdC5pbmRleCIpOwog
CQlTdHJpbmcgamFyRmlsZVBhdGggPSBnZXRFeHRlcm5hbFJlc291cmNlUGF0aCgiVGVzdC5qYXIi
KTsKQEAgLTc1OSw3ICs3NjIsMTAyIEBACiAJCQlkZWxldGVQcm9qZWN0KCJQIik7CiAJCQluZXcg
RmlsZShpbmRleEZpbGVQYXRoKS5kZWxldGUoKTsKIAkJCW5ldyBGaWxlKGphckZpbGVQYXRoKS5k
ZWxldGUoKTsKKwkJfQkJCisJfQorCQorCS8vIFRlc3QgdGhhdCBpdCB3b3JrcyBpZiB0aGUgaW5k
ZXggZmlsZSBpcyBpbiB0aGUgamFyIGZpbGUKKwlwdWJsaWMgdm9pZCB0ZXN0SW5kZXhJbkphcigp
IHRocm93cyBJT0V4Y2VwdGlvbiwgQ29yZUV4Y2VwdGlvbiB7CisJCVN0cmluZyBpbmRleEZpbGVQ
YXRoID0gZ2V0RXh0ZXJuYWxSZXNvdXJjZVBhdGgoIlRlc3QuaW5kZXgiKTsKKwkJU3RyaW5nIGph
ckZpbGVQYXRoID0gZ2V0RXh0ZXJuYWxSZXNvdXJjZVBhdGgoIlRlc3QuamFyIik7CisJCVN0cmlu
ZyBpbmRleFppcFBhdGggPSAgZ2V0RXh0ZXJuYWxSZXNvdXJjZVBhdGgoIlRlc3RJbmRleC56aXAi
KTsKKwkJdHJ5IHsKKwkJCWNyZWF0ZUphcihuZXcgU3RyaW5nW10geworCQkJCQkicGtnL1Rlc3Qu
amF2YSIsCisJCQkJCSJwYWNrYWdlIHBrZztcbiIgKworCQkJCQkicHVibGljIGNsYXNzIFRlc3Qg
e1xuIiArCisJCQkJCSIgIHByb3RlY3RlZCBUZXN0KGludCBpKSB7fVxuIiArCisJCQkJCSJ9In0s
IGphckZpbGVQYXRoKTsKKwkJCQorCQkJSmF2YUluZGV4ZXIuZ2VuZXJhdGVJbmRleEZvckphcihq
YXJGaWxlUGF0aCwgaW5kZXhGaWxlUGF0aCk7CisJCQlVdGlsLnppcEZpbGVzKG5ldyBGaWxlW117
bmV3IEZpbGUoaW5kZXhGaWxlUGF0aCl9LCBpbmRleFppcFBhdGgpOworCQkJCisJCQlJSmF2YVBy
b2plY3QgcCA9IGNyZWF0ZUphdmFQcm9qZWN0KCJQIik7CisJCQlQYXRoIGxpYlBhdGggPSBuZXcg
UGF0aChqYXJGaWxlUGF0aCk7CisJCQlTdHJpbmcgdXJsID0gImphcjpmaWxlOi8iK2luZGV4Wmlw
UGF0aCsiIS9UZXN0LmluZGV4IjsKKwkJCUlDbGFzc3BhdGhBdHRyaWJ1dGUgYXR0cmlidXRlID0g
SmF2YUNvcmUubmV3Q2xhc3NwYXRoQXR0cmlidXRlKElDbGFzc3BhdGhBdHRyaWJ1dGUuSU5ERVhf
TE9DQVRJT05fQVRUUklCVVRFX05BTUUsIHVybCk7CisJCQlJQ2xhc3NwYXRoRW50cnkgZW50cnkg
PSBKYXZhQ29yZS5uZXdMaWJyYXJ5RW50cnkobGliUGF0aCwgbnVsbCwgbnVsbCwgbnVsbCwgbmV3
IElDbGFzc3BhdGhBdHRyaWJ1dGVbXXthdHRyaWJ1dGV9LCBmYWxzZSk7CisJCQlzZXRDbGFzc3Bh
dGgocCwgbmV3IElDbGFzc3BhdGhFbnRyeVtdIHtlbnRyeX0pOworCQkJd2FpdFVudGlsSW5kZXhl
c1JlYWR5KCk7CisJCQkKKwkJCWFzc2VydEVxdWFscyh1cmwsSmF2YU1vZGVsTWFuYWdlci5nZXRJ
bmRleE1hbmFnZXIoKS5nZXRJbmRleChsaWJQYXRoLCBmYWxzZSwgZmFsc2UpLmdldEluZGV4TG9j
YXRpb24oKS5nZXRVcmwoKS50b1N0cmluZygpKTsKKwkJCQorCQkJc2VhcmNoKCJUZXN0IiwgVFlQ
RSwgREVDTEFSQVRJT05TLCBFWEFDVF9SVUxFLCBTZWFyY2hFbmdpbmUuY3JlYXRlSmF2YVNlYXJj
aFNjb3BlKG5ldyBJSmF2YUVsZW1lbnRbXXtwfSkpOworCQkJYXNzZXJ0U2VhcmNoUmVzdWx0cyhn
ZXRFeHRlcm5hbFBhdGgoKSArICJUZXN0LmphciBwa2cuVGVzdCIpOworCQkJCisJCQlzaW11bGF0
ZUV4aXRSZXN0YXJ0KCk7CisJCQlnZXRKYXZhTW9kZWwoKS5yZWZyZXNoRXh0ZXJuYWxBcmNoaXZl
cyhudWxsLG51bGwpOworCQkJd2FpdFVudGlsSW5kZXhlc1JlYWR5KCk7CisJCQkKKwkJCXRoaXMu
cmVzdWx0Q29sbGVjdG9yID0gbmV3IEphdmFTZWFyY2hSZXN1bHRDb2xsZWN0b3IoKTsKKwkJCWFz
c2VydEVxdWFscyh1cmwsSmF2YU1vZGVsTWFuYWdlci5nZXRJbmRleE1hbmFnZXIoKS5nZXRJbmRl
eChsaWJQYXRoLCBmYWxzZSwgZmFsc2UpLmdldEluZGV4TG9jYXRpb24oKS5nZXRVcmwoKS50b1N0
cmluZygpKTsKKwkJCXNlYXJjaCgiVGVzdCIsIFRZUEUsIERFQ0xBUkFUSU9OUywgRVhBQ1RfUlVM
RSwgU2VhcmNoRW5naW5lLmNyZWF0ZUphdmFTZWFyY2hTY29wZShuZXcgSUphdmFFbGVtZW50W117
cH0pKTsKKwkJCWFzc2VydFNlYXJjaFJlc3VsdHMoZ2V0RXh0ZXJuYWxQYXRoKCkgKyAiVGVzdC5q
YXIgcGtnLlRlc3QiKTsKKwkJfSBmaW5hbGx5IHsKKwkJCWRlbGV0ZVByb2plY3QoIlAiKTsKKwkJ
CW5ldyBGaWxlKGluZGV4WmlwUGF0aCkuZGVsZXRlKCk7CisJCQluZXcgRmlsZShqYXJGaWxlUGF0
aCkuZGVsZXRlKCk7CiAJCX0KLQkJCisJfQorCisJLy8gVGVzdCBpbmRleCBmaWxlIGluIHBsYXRm
b3JtCisJcHVibGljIHZvaWQgdGVzdFBsYXRmb3JtSmFySW5kZXhGaWxlKCkgdGhyb3dzIENvcmVF
eGNlcHRpb24sIElPRXhjZXB0aW9uIHsKKwkJU3RyaW5nIGluZGV4RmlsZVBhdGggPSBudWxsOwor
CQlTdHJpbmcgamFyRmlsZVBhdGggPSBnZXRFeHRlcm5hbFJlc291cmNlUGF0aCgiVGVzdC5qYXIi
KTsKKwkJU3RyaW5nIGluZGV4VXJsID0gInBsYXRmb3JtOi9yZXNvdXJjZS9Gb3JJbmRleC9UZXN0
LmluZGV4LnppcCEvVGVzdC5pbmRleCI7CisJCXRyeSB7CisJCQljcmVhdGVKYXIobmV3IFN0cmlu
Z1tdIHsKKwkJCQkJInBrZy9UZXN0LmphdmEiLAorCQkJCQkicGFja2FnZSBwa2c7XG4iICsKKwkJ
CQkJInB1YmxpYyBjbGFzcyBUZXN0IHtcbiIgKworCQkJCQkiICBwcm90ZWN0ZWQgVGVzdChpbnQg
aSkge31cbiIgKworCQkJCQkifSJ9LCBqYXJGaWxlUGF0aCk7CisJCQkKKwkJCUlQcm9qZWN0IGlu
ZGV4UHJvaiA9IGNyZWF0ZVByb2plY3QoIkZvckluZGV4Iik7CisJCQlpbmRleEZpbGVQYXRoID0g
aW5kZXhQcm9qLmdldFByb2plY3QoKS5nZXRMb2NhdGlvbigpLmFwcGVuZCgiVGVzdC5pbmRleCIp
LnRvRmlsZSgpLmdldEFic29sdXRlUGF0aCgpOworCQkJSmF2YUluZGV4ZXIuZ2VuZXJhdGVJbmRl
eEZvckphcihqYXJGaWxlUGF0aCwgaW5kZXhGaWxlUGF0aCk7CisJCQlVdGlsLnppcEZpbGVzKG5l
dyBGaWxlW117bmV3IEZpbGUoaW5kZXhGaWxlUGF0aCl9LCBpbmRleEZpbGVQYXRoKyIuemlwIik7
CisJCQkKKwkJCUlKYXZhUHJvamVjdCBwID0gY3JlYXRlSmF2YVByb2plY3QoIlAiKTsKKwkJCVBh
dGggbGliUGF0aCA9IG5ldyBQYXRoKGphckZpbGVQYXRoKTsKKwkJCUlDbGFzc3BhdGhBdHRyaWJ1
dGUgYXR0cmlidXRlID0gSmF2YUNvcmUubmV3Q2xhc3NwYXRoQXR0cmlidXRlKElDbGFzc3BhdGhB
dHRyaWJ1dGUuSU5ERVhfTE9DQVRJT05fQVRUUklCVVRFX05BTUUsIGluZGV4VXJsKTsKKwkJCUlD
bGFzc3BhdGhFbnRyeSBlbnRyeSA9IEphdmFDb3JlLm5ld0xpYnJhcnlFbnRyeShsaWJQYXRoLCBu
dWxsLCBudWxsLCBudWxsLCBuZXcgSUNsYXNzcGF0aEF0dHJpYnV0ZVtde2F0dHJpYnV0ZX0sIGZh
bHNlKTsKKwkJCXNldENsYXNzcGF0aChwLCBuZXcgSUNsYXNzcGF0aEVudHJ5W10ge2VudHJ5fSk7
CisJCQl3YWl0VW50aWxJbmRleGVzUmVhZHkoKTsKKwkJCQorCQkJc2VhcmNoKCJUZXN0IiwgVFlQ
RSwgREVDTEFSQVRJT05TLCBFWEFDVF9SVUxFLCBTZWFyY2hFbmdpbmUuY3JlYXRlSmF2YVNlYXJj
aFNjb3BlKG5ldyBJSmF2YUVsZW1lbnRbXXtwfSkpOworCQkJYXNzZXJ0U2VhcmNoUmVzdWx0cyhn
ZXRFeHRlcm5hbFBhdGgoKSArICJUZXN0LmphciBwa2cuVGVzdCIpOworCQkJCisJCQlVUkwgdXJs
ID0gSmF2YU1vZGVsTWFuYWdlci5nZXRJbmRleE1hbmFnZXIoKS5nZXRJbmRleChsaWJQYXRoLCBm
YWxzZSwgZmFsc2UpLmdldEluZGV4TG9jYXRpb24oKS5nZXRVcmwoKTsKKwkJCWFzc2VydEVxdWFs
cyhpbmRleFVybCwgdXJsLnRvU3RyaW5nKCkpOworCQkJCisJCQlzaW11bGF0ZUV4aXRSZXN0YXJ0
KCk7CisJCQlnZXRKYXZhTW9kZWwoKS5yZWZyZXNoRXh0ZXJuYWxBcmNoaXZlcyhudWxsLG51bGwp
OworCQkJd2FpdFVudGlsSW5kZXhlc1JlYWR5KCk7CisJCQkKKwkJCXRoaXMucmVzdWx0Q29sbGVj
dG9yID0gbmV3IEphdmFTZWFyY2hSZXN1bHRDb2xsZWN0b3IoKTsKKwkJCXNlYXJjaCgiVGVzdCIs
IFRZUEUsIERFQ0xBUkFUSU9OUywgRVhBQ1RfUlVMRSwgU2VhcmNoRW5naW5lLmNyZWF0ZUphdmFT
ZWFyY2hTY29wZShuZXcgSUphdmFFbGVtZW50W117cH0pKTsKKwkJCWFzc2VydFNlYXJjaFJlc3Vs
dHMoZ2V0RXh0ZXJuYWxQYXRoKCkgKyAiVGVzdC5qYXIgcGtnLlRlc3QiKTsKKwkJCQorCQkJdXJs
ID0gSmF2YU1vZGVsTWFuYWdlci5nZXRJbmRleE1hbmFnZXIoKS5nZXRJbmRleChsaWJQYXRoLCBm
YWxzZSwgZmFsc2UpLmdldEluZGV4TG9jYXRpb24oKS5nZXRVcmwoKTsKKwkJCWFzc2VydEVxdWFs
cyhpbmRleFVybCwgdXJsLnRvU3RyaW5nKCkpOworCQl9IGZpbmFsbHkgeworCQkJZGVsZXRlUHJv
amVjdCgiUCIpOworCQkJaWYgKGluZGV4RmlsZVBhdGggIT0gbnVsbCkgeworCQkJCW5ldyBGaWxl
KGluZGV4RmlsZVBhdGgpLmRlbGV0ZSgpOworCQkJCW5ldyBGaWxlKGluZGV4RmlsZVBhdGgrIi56
aXAiKS5kZWxldGUoKTsKKwkJCX0KKwkJCW5ldyBGaWxlKGphckZpbGVQYXRoKS5kZWxldGUoKTsK
KwkJCWRlbGV0ZVByb2plY3QoIkZvckluZGV4Iik7CisJCX0KIAl9CiB9CmRpZmYgLS1naXQgYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2NvcmUvc2VhcmNoL1Nl
YXJjaFBhcnRpY2lwYW50LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2Vj
bGlwc2UvamR0L2NvcmUvc2VhcmNoL1NlYXJjaFBhcnRpY2lwYW50LmphdmEKaW5kZXggNGUzZjZj
NC4uMmE4N2I1MiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3NlYXJjaC9TZWFyY2hQYXJ0aWNpcGFudC5qYXZhCisrKyBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvY29yZS9zZWFyY2gvU2VhcmNo
UGFydGljaXBhbnQuamF2YQpAQCAtMTQsNiArMTQsOCBAQAogaW1wb3J0IG9yZy5lY2xpcHNlLmNv
cmUucnVudGltZS4qOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLkphdmFN
b2RlbDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS5KYXZhTW9kZWxNYW5h
Z2VyOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLmluZGV4LkZpbGVJbmRl
eExvY2F0aW9uOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLmluZGV4Lklu
ZGV4TG9jYXRpb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvcmUuc2VhcmNo
LmluZGV4aW5nLkluZGV4TWFuYWdlcjsKIAogLyoqCkBAIC0xOTIsOSArMTk0LDkgQEAKIAkgKiA8
L3A+CiAJICoKIAkgKiBAcGFyYW0gZG9jdW1lbnQgdGhlIGRvY3VtZW50IHRvIGluZGV4Ci0JICog
QHBhcmFtIGluZGV4TG9jYXRpb24gdGhlIGxvY2F0aW9uIG9uIHRoZSBmaWxlIHN5c3RlbSBvZiB0
aGUgaW5kZXgKKwkgKiBAcGFyYW0gaW5kZXhQYXRoIHRoZSBsb2NhdGlvbiBvbiB0aGUgZmlsZSBz
eXN0ZW0gb2YgdGhlIGluZGV4CiAJICovCi0JcHVibGljIGZpbmFsIHZvaWQgc2NoZWR1bGVEb2N1
bWVudEluZGV4aW5nKFNlYXJjaERvY3VtZW50IGRvY3VtZW50LCBJUGF0aCBpbmRleExvY2F0aW9u
KSB7CisJcHVibGljIGZpbmFsIHZvaWQgc2NoZWR1bGVEb2N1bWVudEluZGV4aW5nKFNlYXJjaERv
Y3VtZW50IGRvY3VtZW50LCBJUGF0aCBpbmRleFBhdGgpIHsKIAkJSVBhdGggZG9jdW1lbnRQYXRo
ID0gbmV3IFBhdGgoZG9jdW1lbnQuZ2V0UGF0aCgpKTsKIAkJT2JqZWN0IGZpbGUgPSBKYXZhTW9k
ZWwuZ2V0VGFyZ2V0KGRvY3VtZW50UGF0aCwgdHJ1ZSk7CiAJCUlQYXRoIGNvbnRhaW5lclBhdGgg
PSBkb2N1bWVudFBhdGg7CkBAIC0yMDUsMTEgKzIwNywxMyBAQAogCQl9CiAJCUluZGV4TWFuYWdl
ciBtYW5hZ2VyID0gSmF2YU1vZGVsTWFuYWdlci5nZXRJbmRleE1hbmFnZXIoKTsKIAkJLy8gVE9E
TyAoZnJlZGVyaWMpIHNob3VsZCBub3QgaGF2ZSB0byBjcmVhdGUgaW5kZXggbWFudWFsbHksIHNo
b3VsZCBleHBvc2UgQVBJIHRoYXQgcmVjcmVhdGVzIGluZGV4IGluc3RlYWQKKwkJSW5kZXhMb2Nh
dGlvbiBpbmRleExvY2F0aW9uOworCQlpbmRleExvY2F0aW9uID0gbmV3IEZpbGVJbmRleExvY2F0
aW9uKGluZGV4UGF0aC50b0ZpbGUoKSwgdHJ1ZSk7CiAJCW1hbmFnZXIuZW5zdXJlSW5kZXhFeGlz
dHMoaW5kZXhMb2NhdGlvbiwgY29udGFpbmVyUGF0aCk7CiAJCW1hbmFnZXIuc2NoZWR1bGVEb2N1
bWVudEluZGV4aW5nKGRvY3VtZW50LCBjb250YWluZXJQYXRoLCBpbmRleExvY2F0aW9uLCB0aGlz
KTsKLQkJaWYgKCFpbmRleExvY2F0aW9uLmVxdWFscyh0aGlzLmxhc3RJbmRleExvY2F0aW9uKSkg
ewotCQkJbWFuYWdlci51cGRhdGVQYXJ0aWNpcGFudChpbmRleExvY2F0aW9uLCBjb250YWluZXJQ
YXRoKTsKLQkJCXRoaXMubGFzdEluZGV4TG9jYXRpb24gPSBpbmRleExvY2F0aW9uOworCQlpZiAo
IWluZGV4UGF0aC5lcXVhbHModGhpcy5sYXN0SW5kZXhMb2NhdGlvbikpIHsKKwkJCW1hbmFnZXIu
dXBkYXRlUGFydGljaXBhbnQoaW5kZXhQYXRoLCBjb250YWluZXJQYXRoKTsKKwkJCXRoaXMubGFz
dEluZGV4TG9jYXRpb24gPSBpbmRleFBhdGg7CiAJCX0KIAl9CiAKZGlmZiAtLWdpdCBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9pbmRl
eC9EaXNrSW5kZXguamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29yZS9pbmRleC9EaXNrSW5kZXguamF2YQppbmRleCA3NjQ0MDM2Li5m
NGEzYWZkIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvcmUvaW5kZXgvRGlza0luZGV4LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL2luZGV4L0Rp
c2tJbmRleC5qYXZhCkBAIC0yMyw3ICsyMyw3IEBACiAKIHB1YmxpYyBjbGFzcyBEaXNrSW5kZXgg
ewogCi1GaWxlIGluZGV4RmlsZTsKK0luZGV4TG9jYXRpb24gaW5kZXhMb2NhdGlvbjsKIAogcHJp
dmF0ZSBpbnQgaGVhZGVySW5mb09mZnNldDsKIHByaXZhdGUgaW50IG51bWJlck9mQ2h1bmtzOwpA
QCAtODIsMTIgKzgyLDcgQEAKIH0KIAogCi1EaXNrSW5kZXgoU3RyaW5nIGZpbGVOYW1lKSB7Ci0J
aWYgKGZpbGVOYW1lID09IG51bGwpCi0JCXRocm93IG5ldyBqYXZhLmxhbmcuSWxsZWdhbEFyZ3Vt
ZW50RXhjZXB0aW9uKCk7Ci0JdGhpcy5pbmRleEZpbGUgPSBuZXcgRmlsZShmaWxlTmFtZSk7Ci0K
LQkvLyBjbGVhciBjYWNoZWQgaXRlbXMKK0Rpc2tJbmRleCgpIHsKIAl0aGlzLmhlYWRlckluZm9P
ZmZzZXQgPSAtMTsKIAl0aGlzLm51bWJlck9mQ2h1bmtzID0gLTE7CiAJdGhpcy5zaXplT2ZMYXN0
Q2h1bmsgPSAtMTsKQEAgLTk5LDYgKzk0LDEzIEBACiAJdGhpcy5jYWNoZWRDYXRlZ29yeU5hbWUg
PSBudWxsOwogCXRoaXMuY2F0ZWdvcnlPZmZzZXRzID0gbnVsbDsKIAl0aGlzLmNhdGVnb3J5RW5k
cyA9IG51bGw7Cit9CitEaXNrSW5kZXgoSW5kZXhMb2NhdGlvbiBsb2NhdGlvbikgdGhyb3dzIElP
RXhjZXB0aW9uIHsKKwl0aGlzKCk7CisJaWYgKGxvY2F0aW9uID09IG51bGwpIHsKKwkJdGhyb3cg
bmV3IElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbigpOworCX0KKwl0aGlzLmluZGV4TG9jYXRpb24g
PSBsb2NhdGlvbjsKIH0KIFNpbXBsZVNldCBhZGREb2N1bWVudE5hbWVzKFN0cmluZyBzdWJzdHJp
bmcsIE1lbW9yeUluZGV4IG1lbW9yeUluZGV4KSB0aHJvd3MgSU9FeGNlcHRpb24gewogCS8vIG11
c3Qgc2tpcCBvdmVyIGRvY3VtZW50cyB3aGljaCBoYXZlIGJlZW4gYWRkZWQvY2hhbmdlZC9kZWxl
dGVkIGluIHRoZSBtZW1vcnkgaW5kZXgKQEAgLTIzMCw3ICsyMzIsNyBAQAogcHJpdmF0ZSB2b2lk
IGNhY2hlRG9jdW1lbnROYW1lcygpIHRocm93cyBJT0V4Y2VwdGlvbiB7CiAJLy8gd2lsbCBuZWVk
IGFsbCBkb2N1bWVudCBuYW1lcyBzbyBnZXQgdGhlbSBub3cKIAl0aGlzLmNhY2hlZENodW5rcyA9
IG5ldyBTdHJpbmdbdGhpcy5udW1iZXJPZkNodW5rc11bXTsKLQlGaWxlSW5wdXRTdHJlYW0gc3Ry
ZWFtID0gbmV3IEZpbGVJbnB1dFN0cmVhbSh0aGlzLmluZGV4RmlsZSk7CisJSW5wdXRTdHJlYW0g
c3RyZWFtID0gdGhpcy5pbmRleExvY2F0aW9uLmdldElucHV0U3RyZWFtKCk7CiAJdHJ5IHsKIAkJ
aWYgKHRoaXMubnVtYmVyT2ZDaHVua3MgPiA1KSBCVUZGRVJfUkVBRF9TSVpFIDw8PSAxOwogCQlp
bnQgb2Zmc2V0ID0gdGhpcy5jaHVua09mZnNldHNbMF07CkBAIC0zNzAsOSArMzcyLDkgQEAKIAl9
CiB9CiB2b2lkIGluaXRpYWxpemUoYm9vbGVhbiByZXVzZUV4aXN0aW5nRmlsZSkgdGhyb3dzIElP
RXhjZXB0aW9uIHsKLQlpZiAodGhpcy5pbmRleEZpbGUuZXhpc3RzKCkpIHsKKwlpZiAodGhpcy5p
bmRleExvY2F0aW9uLmV4aXN0cygpKSB7CiAJCWlmIChyZXVzZUV4aXN0aW5nRmlsZSkgewotCQkJ
RmlsZUlucHV0U3RyZWFtIHN0cmVhbSA9IG5ldyBGaWxlSW5wdXRTdHJlYW0odGhpcy5pbmRleEZp
bGUpOworCQkJSW5wdXRTdHJlYW0gc3RyZWFtID0gdGhpcy5pbmRleExvY2F0aW9uLmdldElucHV0
U3RyZWFtKCk7CiAJCQl0aGlzLnN0cmVhbUJ1ZmZlciA9IG5ldyBieXRlW0JVRkZFUl9SRUFEX1NJ
WkVdOwogCQkJdGhpcy5idWZmZXJJbmRleCA9IDA7CiAJCQl0aGlzLmJ1ZmZlckVuZCA9IHN0cmVh
bS5yZWFkKHRoaXMuc3RyZWFtQnVmZmVyLCAwLCAxMjgpOwpAQCAtMzkzLDE0ICszOTUsMTQgQEAK
IAkJCX0KIAkJCXJldHVybjsKIAkJfQotCQlpZiAoIXRoaXMuaW5kZXhGaWxlLmRlbGV0ZSgpKSB7
CisJCWlmICghdGhpcy5pbmRleExvY2F0aW9uLmRlbGV0ZSgpKSB7CiAJCQlpZiAoREVCVUcpCi0J
CQkJU3lzdGVtLm91dC5wcmludGxuKCJpbml0aWFsaXplIC0gRmFpbGVkIHRvIGRlbGV0ZSBpbmRl
eCAiICsgdGhpcy5pbmRleEZpbGUpOyAvLyROT04tTkxTLTEkCi0JCQl0aHJvdyBuZXcgSU9FeGNl
cHRpb24oIkZhaWxlZCB0byBkZWxldGUgaW5kZXggIiArIHRoaXMuaW5kZXhGaWxlKTsgLy8kTk9O
LU5MUy0xJAorCQkJCVN5c3RlbS5vdXQucHJpbnRsbigiaW5pdGlhbGl6ZSAtIEZhaWxlZCB0byBk
ZWxldGUgaW5kZXggIiArIHRoaXMuaW5kZXhMb2NhdGlvbik7IC8vJE5PTi1OTFMtMSQKKwkJCXRo
cm93IG5ldyBJT0V4Y2VwdGlvbigiRmFpbGVkIHRvIGRlbGV0ZSBpbmRleCAiICsgdGhpcy5pbmRl
eExvY2F0aW9uKTsgLy8kTk9OLU5MUy0xJAogCQl9CiAJfQotCWlmICh0aGlzLmluZGV4RmlsZS5j
cmVhdGVOZXdGaWxlKCkpIHsKLQkJRmlsZU91dHB1dFN0cmVhbSBzdHJlYW0gPSBuZXcgRmlsZU91
dHB1dFN0cmVhbSh0aGlzLmluZGV4RmlsZSwgZmFsc2UpOworCWlmICh0aGlzLmluZGV4TG9jYXRp
b24uY3JlYXRlTmV3RmlsZSgpKSB7CisJCUZpbGVPdXRwdXRTdHJlYW0gc3RyZWFtID0gbmV3IEZp
bGVPdXRwdXRTdHJlYW0odGhpcy5pbmRleExvY2F0aW9uLmdldEluZGV4RmlsZSgpLCBmYWxzZSk7
CiAJCXRyeSB7CiAJCQl0aGlzLnN0cmVhbUJ1ZmZlciA9IG5ldyBieXRlW0JVRkZFUl9SRUFEX1NJ
WkVdOwogCQkJdGhpcy5idWZmZXJJbmRleCA9IDA7CkBAIC00MTYsMTggKzQxOCwxOCBAQAogCQl9
CiAJfSBlbHNlIHsKIAkJaWYgKERFQlVHKQotCQkJU3lzdGVtLm91dC5wcmludGxuKCJpbml0aWFs
aXplIC0gRmFpbGVkIHRvIGNyZWF0ZSBuZXcgaW5kZXggIiArIHRoaXMuaW5kZXhGaWxlKTsgLy8k
Tk9OLU5MUy0xJAotCQl0aHJvdyBuZXcgSU9FeGNlcHRpb24oIkZhaWxlZCB0byBjcmVhdGUgbmV3
IGluZGV4ICIgKyB0aGlzLmluZGV4RmlsZSk7IC8vJE5PTi1OTFMtMSQKKwkJCVN5c3RlbS5vdXQu
cHJpbnRsbigiaW5pdGlhbGl6ZSAtIEZhaWxlZCB0byBjcmVhdGUgbmV3IGluZGV4ICIgKyB0aGlz
LmluZGV4TG9jYXRpb24pOyAvLyROT04tTkxTLTEkCisJCXRocm93IG5ldyBJT0V4Y2VwdGlvbigi
RmFpbGVkIHRvIGNyZWF0ZSBuZXcgaW5kZXggIiArIHRoaXMuaW5kZXhMb2NhdGlvbik7IC8vJE5P
Ti1OTFMtMSQKIAl9CiB9CiBwcml2YXRlIHZvaWQgaW5pdGlhbGl6ZUZyb20oRGlza0luZGV4IGRp
c2tJbmRleCwgRmlsZSBuZXdJbmRleEZpbGUpIHRocm93cyBJT0V4Y2VwdGlvbiB7CiAJaWYgKG5l
d0luZGV4RmlsZS5leGlzdHMoKSAmJiAhbmV3SW5kZXhGaWxlLmRlbGV0ZSgpKSB7IC8vIGRlbGV0
ZSB0aGUgdGVtcG9yYXJ5IGluZGV4IGZpbGUKIAkJaWYgKERFQlVHKQotCQkJU3lzdGVtLm91dC5w
cmludGxuKCJpbml0aWFsaXplRnJvbSAtIEZhaWxlZCB0byBkZWxldGUgdGVtcCBpbmRleCAiICsg
dGhpcy5pbmRleEZpbGUpOyAvLyROT04tTkxTLTEkCisJCQlTeXN0ZW0ub3V0LnByaW50bG4oImlu
aXRpYWxpemVGcm9tIC0gRmFpbGVkIHRvIGRlbGV0ZSB0ZW1wIGluZGV4ICIgKyB0aGlzLmluZGV4
TG9jYXRpb24pOyAvLyROT04tTkxTLTEkCiAJfSBlbHNlIGlmICghbmV3SW5kZXhGaWxlLmNyZWF0
ZU5ld0ZpbGUoKSkgewogCQlpZiAoREVCVUcpCi0JCQlTeXN0ZW0ub3V0LnByaW50bG4oImluaXRp
YWxpemVGcm9tIC0gRmFpbGVkIHRvIGNyZWF0ZSB0ZW1wIGluZGV4ICIgKyB0aGlzLmluZGV4Rmls
ZSk7IC8vJE5PTi1OTFMtMSQKLQkJdGhyb3cgbmV3IElPRXhjZXB0aW9uKCJGYWlsZWQgdG8gY3Jl
YXRlIHRlbXAgaW5kZXggIiArIHRoaXMuaW5kZXhGaWxlKTsgLy8kTk9OLU5MUy0xJAorCQkJU3lz
dGVtLm91dC5wcmludGxuKCJpbml0aWFsaXplRnJvbSAtIEZhaWxlZCB0byBjcmVhdGUgdGVtcCBp
bmRleCAiICsgdGhpcy5pbmRleExvY2F0aW9uKTsgLy8kTk9OLU5MUy0xJAorCQl0aHJvdyBuZXcg
SU9FeGNlcHRpb24oIkZhaWxlZCB0byBjcmVhdGUgdGVtcCBpbmRleCAiICsgdGhpcy5pbmRleExv
Y2F0aW9uKTsgLy8kTk9OLU5MUy0xJAogCX0KIAogCWludCBzaXplID0gZGlza0luZGV4LmNhdGVn
b3J5T2Zmc2V0cyA9PSBudWxsID8gOCA6IGRpc2tJbmRleC5jYXRlZ29yeU9mZnNldHMuZWxlbWVu
dFNpemU7CkBAIC01MDAsNiArNTAyLDkgQEAKIERpc2tJbmRleCBtZXJnZVdpdGgoTWVtb3J5SW5k
ZXggbWVtb3J5SW5kZXgpIHRocm93cyBJT0V4Y2VwdGlvbiB7CiAgCS8vIGFzc3VtZSB3cml0ZSBs
b2NrIGlzIGhlbGQKIAkvLyBjb21wdXRlICYgd3JpdGUgb3V0IG5ldyBkb2NOYW1lcworCWlmICh0
aGlzLmluZGV4TG9jYXRpb24gPT0gbnVsbCkgeworCQl0aHJvdyBuZXcgSU9FeGNlcHRpb24oIlBy
ZS1idWlsdCBpbmRleCBmaWxlIG5vdCB3cml0ZWFibGUiKTsgIC8vJE5PTi1OTFMtMSQKKwl9CiAJ
U3RyaW5nW10gZG9jTmFtZXMgPSByZWFkQWxsRG9jdW1lbnROYW1lcygpOwogCWludCBwcmV2aW91
c0xlbmd0aCA9IGRvY05hbWVzLmxlbmd0aDsKIAlpbnRbXSBwb3NpdGlvbnMgPSBuZXcgaW50W3By
ZXZpb3VzTGVuZ3RoXTsgLy8ga2VlcHMgdHJhY2sgb2YgdGhlIHBvc2l0aW9uIG9mIGVhY2ggZG9j
dW1lbnQgaW4gdGhlIG5ldyBzb3J0ZWQgZG9jTmFtZXMKQEAgLTUwOSwxNSArNTE0LDE2IEBACiAJ
CWlmIChwcmV2aW91c0xlbmd0aCA9PSAwKSByZXR1cm4gdGhpczsgLy8gbm90aGluZyB0byBkby4u
LiBtZW1vcnkgaW5kZXggY29udGFpbmVkIGRlbGV0ZWQgZG9jdW1lbnRzIHRoYXQgaGFkIG5ldmVy
IGJlZW4gc2F2ZWQKIAogCQkvLyBpbmRleCBpcyBub3cgZW1wdHkgc2luY2UgYWxsIHRoZSBzYXZl
ZCBkb2N1bWVudHMgd2VyZSByZW1vdmVkCi0JCURpc2tJbmRleCBuZXdEaXNrSW5kZXggPSBuZXcg
RGlza0luZGV4KHRoaXMuaW5kZXhGaWxlLmdldFBhdGgoKSk7CisJCURpc2tJbmRleCBuZXdEaXNr
SW5kZXggPSBuZXcgRGlza0luZGV4KHRoaXMuaW5kZXhMb2NhdGlvbik7CiAJCW5ld0Rpc2tJbmRl
eC5pbml0aWFsaXplKGZhbHNlKTsKIAkJcmV0dXJuIG5ld0Rpc2tJbmRleDsKIAl9Ci0KLQlEaXNr
SW5kZXggbmV3RGlza0luZGV4ID0gbmV3IERpc2tJbmRleCh0aGlzLmluZGV4RmlsZS5nZXRQYXRo
KCkgKyAiLnRtcCIpOyAvLyROT04tTkxTLTEkCisJRmlsZSBvbGRJbmRleEZpbGUgPSB0aGlzLmlu
ZGV4TG9jYXRpb24uZ2V0SW5kZXhGaWxlKCk7CisJRGlza0luZGV4IG5ld0Rpc2tJbmRleCA9IG5l
dyBEaXNrSW5kZXgobmV3IEZpbGVJbmRleExvY2F0aW9uKG5ldyBGaWxlKG9sZEluZGV4RmlsZS5n
ZXRQYXRoKCkgKyAiLnRtcCIpKSk7IC8vJE5PTi1OTFMtMSQKKwlGaWxlIG5ld0luZGV4RmlsZSA9
IG5ld0Rpc2tJbmRleC5pbmRleExvY2F0aW9uLmdldEluZGV4RmlsZSgpOwogCXRyeSB7Ci0JCW5l
d0Rpc2tJbmRleC5pbml0aWFsaXplRnJvbSh0aGlzLCBuZXdEaXNrSW5kZXguaW5kZXhGaWxlKTsK
LQkJRmlsZU91dHB1dFN0cmVhbSBzdHJlYW0gPSBuZXcgRmlsZU91dHB1dFN0cmVhbShuZXdEaXNr
SW5kZXguaW5kZXhGaWxlLCBmYWxzZSk7CisJCW5ld0Rpc2tJbmRleC5pbml0aWFsaXplRnJvbSh0
aGlzLCBuZXdJbmRleEZpbGUpOworCQlGaWxlT3V0cHV0U3RyZWFtIHN0cmVhbSA9IG5ldyBGaWxl
T3V0cHV0U3RyZWFtKG5ld0luZGV4RmlsZSwgZmFsc2UpOwogCQlpbnQgb2Zmc2V0VG9IZWFkZXIg
PSAtMTsKIAkJdHJ5IHsKIAkJCW5ld0Rpc2tJbmRleC53cml0ZUFsbERvY3VtZW50TmFtZXMoZG9j
TmFtZXMsIHN0cmVhbSk7CkBAIC01NDksMzEgKzU1NSwzMSBAQAogCQluZXdEaXNrSW5kZXgud3Jp
dGVPZmZzZXRUb0hlYWRlcihvZmZzZXRUb0hlYWRlcik7CiAKIAkJLy8gcmVuYW1lIGZpbGUgYnkg
ZGVsZXRpbmcgcHJldmlvdXMgaW5kZXggZmlsZSAmIHJlbmFtaW5nIHRlbXAgb25lCi0JCWlmICh0
aGlzLmluZGV4RmlsZS5leGlzdHMoKSAmJiAhdGhpcy5pbmRleEZpbGUuZGVsZXRlKCkpIHsKKwkJ
aWYgKG9sZEluZGV4RmlsZS5leGlzdHMoKSAmJiAhb2xkSW5kZXhGaWxlLmRlbGV0ZSgpKSB7CiAJ
CQlpZiAoREVCVUcpCi0JCQkJU3lzdGVtLm91dC5wcmludGxuKCJtZXJnZVdpdGggLSBGYWlsZWQg
dG8gZGVsZXRlICIgKyB0aGlzLmluZGV4RmlsZSk7IC8vJE5PTi1OTFMtMSQKLQkJCXRocm93IG5l
dyBJT0V4Y2VwdGlvbigiRmFpbGVkIHRvIGRlbGV0ZSBpbmRleCBmaWxlICIgKyB0aGlzLmluZGV4
RmlsZSk7IC8vJE5PTi1OTFMtMSQKKwkJCQlTeXN0ZW0ub3V0LnByaW50bG4oIm1lcmdlV2l0aCAt
IEZhaWxlZCB0byBkZWxldGUgIiArIHRoaXMuaW5kZXhMb2NhdGlvbik7IC8vJE5PTi1OTFMtMSQK
KwkJCXRocm93IG5ldyBJT0V4Y2VwdGlvbigiRmFpbGVkIHRvIGRlbGV0ZSBpbmRleCBmaWxlICIg
KyB0aGlzLmluZGV4TG9jYXRpb24pOyAvLyROT04tTkxTLTEkCiAJCX0KLQkJaWYgKCFuZXdEaXNr
SW5kZXguaW5kZXhGaWxlLnJlbmFtZVRvKHRoaXMuaW5kZXhGaWxlKSkgeworCQlpZiAoIW5ld0lu
ZGV4RmlsZS5yZW5hbWVUbyhvbGRJbmRleEZpbGUpKSB7CiAJCQlpZiAoREVCVUcpCi0JCQkJU3lz
dGVtLm91dC5wcmludGxuKCJtZXJnZVdpdGggLSBGYWlsZWQgdG8gcmVuYW1lICIgKyB0aGlzLmlu
ZGV4RmlsZSk7IC8vJE5PTi1OTFMtMSQKLQkJCXRocm93IG5ldyBJT0V4Y2VwdGlvbigiRmFpbGVk
IHRvIHJlbmFtZSBpbmRleCBmaWxlICIgKyB0aGlzLmluZGV4RmlsZSk7IC8vJE5PTi1OTFMtMSQK
KwkJCQlTeXN0ZW0ub3V0LnByaW50bG4oIm1lcmdlV2l0aCAtIEZhaWxlZCB0byByZW5hbWUgIiAr
IHRoaXMuaW5kZXhMb2NhdGlvbik7IC8vJE5PTi1OTFMtMSQKKwkJCXRocm93IG5ldyBJT0V4Y2Vw
dGlvbigiRmFpbGVkIHRvIHJlbmFtZSBpbmRleCBmaWxlICIgKyB0aGlzLmluZGV4TG9jYXRpb24p
OyAvLyROT04tTkxTLTEkCiAJCX0KIAl9IGNhdGNoIChJT0V4Y2VwdGlvbiBlKSB7Ci0JCWlmIChu
ZXdEaXNrSW5kZXguaW5kZXhGaWxlLmV4aXN0cygpICYmICFuZXdEaXNrSW5kZXguaW5kZXhGaWxl
LmRlbGV0ZSgpKQorCQlpZiAobmV3SW5kZXhGaWxlLmV4aXN0cygpICYmICFuZXdJbmRleEZpbGUu
ZGVsZXRlKCkpCiAJCQlpZiAoREVCVUcpCi0JCQkJU3lzdGVtLm91dC5wcmludGxuKCJtZXJnZVdp
dGggLSBGYWlsZWQgdG8gZGVsZXRlIHRlbXAgaW5kZXggIiArIG5ld0Rpc2tJbmRleC5pbmRleEZp
bGUpOyAvLyROT04tTkxTLTEkCisJCQkJU3lzdGVtLm91dC5wcmludGxuKCJtZXJnZVdpdGggLSBG
YWlsZWQgdG8gZGVsZXRlIHRlbXAgaW5kZXggIiArIG5ld0Rpc2tJbmRleC5pbmRleExvY2F0aW9u
KTsgLy8kTk9OLU5MUy0xJAogCQl0aHJvdyBlOwogCX0KIAotCW5ld0Rpc2tJbmRleC5pbmRleEZp
bGUgPSB0aGlzLmluZGV4RmlsZTsKKwluZXdEaXNrSW5kZXguaW5kZXhMb2NhdGlvbiA9IHRoaXMu
aW5kZXhMb2NhdGlvbjsKIAlyZXR1cm4gbmV3RGlza0luZGV4OwogfQogcHJpdmF0ZSBzeW5jaHJv
bml6ZWQgU3RyaW5nW10gcmVhZEFsbERvY3VtZW50TmFtZXMoKSB0aHJvd3MgSU9FeGNlcHRpb24g
ewogCWlmICh0aGlzLm51bWJlck9mQ2h1bmtzIDw9IDApCiAJCXJldHVybiBDaGFyT3BlcmF0aW9u
Lk5PX1NUUklOR1M7CiAKLQlGaWxlSW5wdXRTdHJlYW0gc3RyZWFtID0gbmV3IEZpbGVJbnB1dFN0
cmVhbSh0aGlzLmluZGV4RmlsZSk7CisJSW5wdXRTdHJlYW0gc3RyZWFtID0gdGhpcy5pbmRleExv
Y2F0aW9uLmdldElucHV0U3RyZWFtKCk7CiAJdHJ5IHsKIAkJaW50IG9mZnNldCA9IHRoaXMuY2h1
bmtPZmZzZXRzWzBdOwogCQlzdHJlYW0uc2tpcChvZmZzZXQpOwpAQCAtNjEyLDcgKzYxOCw3IEBA
CiAJCX0KIAl9CiAKLQlGaWxlSW5wdXRTdHJlYW0gc3RyZWFtID0gbmV3IEZpbGVJbnB1dFN0cmVh
bSh0aGlzLmluZGV4RmlsZSk7CisJSW5wdXRTdHJlYW0gc3RyZWFtID0gdGhpcy5pbmRleExvY2F0
aW9uLmdldElucHV0U3RyZWFtKCk7CiAJSGFzaHRhYmxlT2ZPYmplY3QgY2F0ZWdvcnlUYWJsZSA9
IG51bGw7CiAJY2hhcltdW10gbWF0Y2hpbmdXb3JkcyA9IG51bGw7CiAJaW50IGNvdW50ID0gMDsK
QEAgLTYyNiw3ICs2MzIsNyBAQAogCQl0cnkgewogCQkJaWYgKHNpemUgPCAwKSB7IC8vIERFQlVH
CiAJCQkJU3lzdGVtLmVyci5wcmludGxuKCItLS0tLS0tLS0tLS0tLS0tLS0tLSBERUJVRyAtLS0t
LS0tLS0tLS0tLS0tLS0tLSIpOyAvLyROT04tTkxTLTEkCi0JCQkJU3lzdGVtLmVyci5wcmludGxu
KCJmaWxlID0gIit0aGlzLmluZGV4RmlsZSk7IC8vJE5PTi1OTFMtMSQKKwkJCQlTeXN0ZW0uZXJy
LnByaW50bG4oImZpbGUgPSAiK3RoaXMuaW5kZXhMb2NhdGlvbik7IC8vJE5PTi1OTFMtMSQKIAkJ
CQlTeXN0ZW0uZXJyLnByaW50bG4oIm9mZnNldCA9ICIrb2Zmc2V0KTsgLy8kTk9OLU5MUy0xJAog
CQkJCVN5c3RlbS5lcnIucHJpbnRsbigic2l6ZSA9ICIrc2l6ZSk7IC8vJE5PTi1OTFMtMSQKIAkJ
CQlTeXN0ZW0uZXJyLnByaW50bG4oIi0tLS0tLS0tLS0tLS0tLS0tLS0tICAgRU5EICAgLS0tLS0t
LS0tLS0tLS0tLS0tLS0iKTsgLy8kTk9OLU5MUy0xJApAQCAtNjM2LDcgKzY0Miw3IEBACiAJCQkv
LyBERUJVRwogCQkJb29tLnByaW50U3RhY2tUcmFjZSgpOwogCQkJU3lzdGVtLmVyci5wcmludGxu
KCItLS0tLS0tLS0tLS0tLS0tLS0tLSBERUJVRyAtLS0tLS0tLS0tLS0tLS0tLS0tLSIpOyAvLyRO
T04tTkxTLTEkCi0JCQlTeXN0ZW0uZXJyLnByaW50bG4oImZpbGUgPSAiK3RoaXMuaW5kZXhGaWxl
KTsgLy8kTk9OLU5MUy0xJAorCQkJU3lzdGVtLmVyci5wcmludGxuKCJmaWxlID0gIit0aGlzLmlu
ZGV4TG9jYXRpb24pOyAvLyROT04tTkxTLTEkCiAJCQlTeXN0ZW0uZXJyLnByaW50bG4oIm9mZnNl
dCA9ICIrb2Zmc2V0KTsgLy8kTk9OLU5MUy0xJAogCQkJU3lzdGVtLmVyci5wcmludGxuKCJzaXpl
ID0gIitzaXplKTsgLy8kTk9OLU5MUy0xJAogCQkJU3lzdGVtLmVyci5wcmludGxuKCItLS0tLS0t
LS0tLS0tLS0tLS0tLSAgIEVORCAgIC0tLS0tLS0tLS0tLS0tLS0tLS0tIik7IC8vJE5PTi1OTFMt
MSQKQEAgLTY3OCw3ICs2ODQsNyBAQAogCX0KIAogCWlmIChtYXRjaGluZ1dvcmRzICE9IG51bGwg
JiYgY291bnQgPiAwKSB7Ci0JCXN0cmVhbSA9IG5ldyBGaWxlSW5wdXRTdHJlYW0odGhpcy5pbmRl
eEZpbGUpOworCQlzdHJlYW0gPSB0aGlzLmluZGV4TG9jYXRpb24uZ2V0SW5wdXRTdHJlYW0oKTsK
IAkJdHJ5IHsKIAkJCXN0cmVhbS5za2lwKGZpcnN0T2Zmc2V0KTsKIAkJCXRoaXMuYnVmZmVySW5k
ZXggPSAwOwpAQCAtNjk2LDcgKzcwMiw3IEBACiAJdGhpcy5zdHJlYW1CdWZmZXIgPSBudWxsOwog
CXJldHVybiBjYXRlZ29yeVRhYmxlOwogfQotcHJpdmF0ZSB2b2lkIHJlYWRDaHVuayhTdHJpbmdb
XSBkb2NOYW1lcywgRmlsZUlucHV0U3RyZWFtIHN0cmVhbSwgaW50IGluZGV4LCBpbnQgc2l6ZSkg
dGhyb3dzIElPRXhjZXB0aW9uIHsKK3ByaXZhdGUgdm9pZCByZWFkQ2h1bmsoU3RyaW5nW10gZG9j
TmFtZXMsIElucHV0U3RyZWFtIHN0cmVhbSwgaW50IGluZGV4LCBpbnQgc2l6ZSkgdGhyb3dzIElP
RXhjZXB0aW9uIHsKIAlTdHJpbmcgY3VycmVudCA9IG5ldyBTdHJpbmcocmVhZFN0cmVhbUNoYXJz
KHN0cmVhbSkpOwogCWRvY05hbWVzW2luZGV4KytdID0gY3VycmVudDsKIAlmb3IgKGludCBpID0g
MTsgaSA8IHNpemU7IGkrKykgewpAQCAtNzM0LDcgKzc0MCw3IEBACiAJCQl0aHJvdyBuZXcgSWxs
ZWdhbEFyZ3VtZW50RXhjZXB0aW9uKCk7CiAJCXRoaXMuc3RyZWFtQnVmZmVyID0gbmV3IGJ5dGVb
bnVtYmVyT2ZCeXRlc107CiAJCXRoaXMuYnVmZmVySW5kZXggPSAwOwotCQlGaWxlSW5wdXRTdHJl
YW0gZmlsZSA9IG5ldyBGaWxlSW5wdXRTdHJlYW0odGhpcy5pbmRleEZpbGUpOworCQlJbnB1dFN0
cmVhbSBmaWxlID0gdGhpcy5pbmRleExvY2F0aW9uLmdldElucHV0U3RyZWFtKCk7CiAJCXRyeSB7
CiAJCQlmaWxlLnNraXAoc3RhcnQpOwogCQkJaWYgKGZpbGUucmVhZCh0aGlzLnN0cmVhbUJ1ZmZl
ciwgMCwgbnVtYmVyT2ZCeXRlcykgIT0gbnVtYmVyT2ZCeXRlcykKQEAgLTc2Myw3ICs3NjksNyBA
QAogCWlmIChhcnJheU9mZnNldCBpbnN0YW5jZW9mIGludFtdKQogCQlyZXR1cm4gKGludFtdKSBh
cnJheU9mZnNldDsKIAotCUZpbGVJbnB1dFN0cmVhbSBzdHJlYW0gPSBuZXcgRmlsZUlucHV0U3Ry
ZWFtKHRoaXMuaW5kZXhGaWxlKTsKKwlJbnB1dFN0cmVhbSBzdHJlYW0gPSB0aGlzLmluZGV4TG9j
YXRpb24uZ2V0SW5wdXRTdHJlYW0oKTsKIAl0cnkgewogCQlpbnQgb2Zmc2V0ID0gKChJbnRlZ2Vy
KSBhcnJheU9mZnNldCkuaW50VmFsdWUoKTsKIAkJc3RyZWFtLnNraXAob2Zmc2V0KTsKQEAgLTc3
NiwxOSArNzgyLDE5IEBACiAJCXRoaXMuc3RyZWFtQnVmZmVyID0gbnVsbDsKIAl9CiB9Ci1wcml2
YXRlIHZvaWQgcmVhZEhlYWRlckluZm8oRmlsZUlucHV0U3RyZWFtIHN0cmVhbSkgdGhyb3dzIElP
RXhjZXB0aW9uIHsKK3ByaXZhdGUgdm9pZCByZWFkSGVhZGVySW5mbyhJbnB1dFN0cmVhbSBzdHJl
YW0pIHRocm93cyBJT0V4Y2VwdGlvbiB7CiAKIAkvLyBtdXN0IGJlIHNhbWUgb3JkZXIgYXMgd3Jp
dGVIZWFkZXJJbmZvKCkKIAl0aGlzLm51bWJlck9mQ2h1bmtzID0gcmVhZFN0cmVhbUludChzdHJl
YW0pOwogCXRoaXMuc2l6ZU9mTGFzdENodW5rID0gdGhpcy5zdHJlYW1CdWZmZXJbdGhpcy5idWZm
ZXJJbmRleCsrXSAmIDB4RkY7CiAJdGhpcy5kb2N1bWVudFJlZmVyZW5jZVNpemUgPSB0aGlzLnN0
cmVhbUJ1ZmZlclt0aGlzLmJ1ZmZlckluZGV4KytdICYgMHhGRjsKIAl0aGlzLnNlcGFyYXRvciA9
IChjaGFyKSAodGhpcy5zdHJlYW1CdWZmZXJbdGhpcy5idWZmZXJJbmRleCsrXSAmIDB4RkYpOwot
CWxvbmcgZmlsZUxlbmd0aCA9IHRoaXMuaW5kZXhGaWxlLmxlbmd0aCgpOwotCWlmICh0aGlzLm51
bWJlck9mQ2h1bmtzID4gZmlsZUxlbmd0aCApIHsKKwlsb25nIGxlbmd0aCA9IHRoaXMuaW5kZXhM
b2NhdGlvbi5sZW5ndGgoKTsKKwlpZiAobGVuZ3RoICE9IC0xICYmIHRoaXMubnVtYmVyT2ZDaHVu
a3MgPiBsZW5ndGgpIHsKIAkJLy8gbm90IGFuIGFjY3VyYXRlIGNoZWNrLCBidXQgZ29vZCBlbm91
Z2ggaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM1MDYxMgog
CQlpZiAoREVCVUcpCi0JCQlTeXN0ZW0ub3V0LnByaW50bG4oIkluZGV4IGZpbGUgaXMgY29ycnVw
dGVkICIgKyB0aGlzLmluZGV4RmlsZSk7IC8vJE5PTi1OTFMtMSQKLQkJdGhyb3cgbmV3IElPRXhj
ZXB0aW9uKCJJbmRleCBmaWxlIGlzIGNvcnJ1cHRlZCAiICsgdGhpcy5pbmRleEZpbGUpOyAvLyRO
T04tTkxTLTEkCisJCQlTeXN0ZW0ub3V0LnByaW50bG4oIkluZGV4IGZpbGUgaXMgY29ycnVwdGVk
ICIgKyB0aGlzLmluZGV4TG9jYXRpb24pOyAvLyROT04tTkxTLTEkCisJCXRocm93IG5ldyBJT0V4
Y2VwdGlvbigiSW5kZXggZmlsZSBpcyBjb3JydXB0ZWQgIiArIHRoaXMuaW5kZXhMb2NhdGlvbik7
IC8vJE5PTi1OTFMtMSQKIAl9CiAJdGhpcy5jaHVua09mZnNldHMgPSBuZXcgaW50W3RoaXMubnVt
YmVyT2ZDaHVua3NdOwogCWZvciAoaW50IGkgPSAwOyBpIDwgdGhpcy5udW1iZXJPZkNodW5rczsg
aSsrKQpAQCAtNzk5LDExICs4MDUsMTEgQEAKIAlpbnQgc2l6ZSA9IHJlYWRTdHJlYW1JbnQoc3Ry
ZWFtKTsKIAl0aGlzLmNhdGVnb3J5T2Zmc2V0cyA9IG5ldyBIYXNodGFibGVPZkludFZhbHVlcyhz
aXplKTsKIAl0aGlzLmNhdGVnb3J5RW5kcyA9IG5ldyBIYXNodGFibGVPZkludFZhbHVlcyhzaXpl
KTsKLQlpZiAoc2l6ZSA+IGZpbGVMZW5ndGgpIHsKKwlpZiAobGVuZ3RoICE9IC0xICYmIHNpemUg
PiBsZW5ndGgpIHsKIAkJLy8gIG5vdCBhbiBhY2N1cmF0ZSBjaGVjaywgYnV0IGdvb2QgZW5vdWdo
ICBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzUwNjEyCiAJ
CWlmIChERUJVRykKLQkJCVN5c3RlbS5vdXQucHJpbnRsbigiSW5kZXggZmlsZSBpcyBjb3JydXB0
ZWQgIiArIHRoaXMuaW5kZXhGaWxlKTsgLy8kTk9OLU5MUy0xJAotCQl0aHJvdyBuZXcgSU9FeGNl
cHRpb24oIkluZGV4IGZpbGUgaXMgY29ycnVwdGVkICIgKyB0aGlzLmluZGV4RmlsZSk7IC8vJE5P
Ti1OTFMtMSQKKwkJCVN5c3RlbS5vdXQucHJpbnRsbigiSW5kZXggZmlsZSBpcyBjb3JydXB0ZWQg
IiArIHRoaXMuaW5kZXhMb2NhdGlvbik7IC8vJE5PTi1OTFMtMSQKKwkJdGhyb3cgbmV3IElPRXhj
ZXB0aW9uKCJJbmRleCBmaWxlIGlzIGNvcnJ1cHRlZCAiICsgdGhpcy5pbmRleExvY2F0aW9uKTsg
Ly8kTk9OLU5MUy0xJAogCX0KIAljaGFyW10gcHJldmlvdXNDYXRlZ29yeSA9IG51bGw7CiAJaW50
IG9mZnNldCA9IC0xOwpAQCAtODQwLDExICs4NDYsMTMgQEAKIAkJfQogCX0KIH0KLXByaXZhdGUg
dm9pZCByZWFkU3RyZWFtQnVmZmVyKEZpbGVJbnB1dFN0cmVhbSBzdHJlYW0pIHRocm93cyBJT0V4
Y2VwdGlvbiB7Citwcml2YXRlIHZvaWQgcmVhZFN0cmVhbUJ1ZmZlcihJbnB1dFN0cmVhbSBzdHJl
YW0pIHRocm93cyBJT0V4Y2VwdGlvbiB7CiAJLy8gaWYgd2UncmUgYWJvdXQgdG8gcmVhZCBhIGtu
b3duIGFtb3VudCBhdCB0aGUgZW5kIG9mIHRoZSBleGlzdGluZyBidWZmZXIsIGJ1dCBpdCBkb2Vz
IG5vdCBjb21wbGV0ZWx5IGZpdAogCS8vIHNvIHdlIG5lZWQgdG8gc2hpZnQgdGhlIHJlbWFpbmlu
ZyBieXRlcyB0byBiZSByZWFkLCBhbmQgZmlsbCB0aGUgYnVmZmVyIGZyb20gdGhlIHN0cmVhbQot
CWlmICh0aGlzLmJ1ZmZlckVuZCA8IHRoaXMuc3RyZWFtQnVmZmVyLmxlbmd0aCkKLQkJcmV0dXJu
OyAvLyB3ZSdyZSBhdCB0aGUgZW5kIG9mIHRoZSBzdHJlYW0gLSBub3RoaW5nIGxlZnQgdG8gcmVh
ZAorCWlmICh0aGlzLmJ1ZmZlckVuZCA8IHRoaXMuc3RyZWFtQnVmZmVyLmxlbmd0aCkgeworCQlp
ZiAoc3RyZWFtLmF2YWlsYWJsZSgpID09IDApCisJCQlyZXR1cm47IC8vIHdlJ3JlIGF0IHRoZSBl
bmQgb2YgdGhlIHN0cmVhbSAtIG5vdGhpbmcgbGVmdCB0byByZWFkCisJfQogCiAJaW50IGJ5dGVz
SW5CdWZmZXIgPSB0aGlzLmJ1ZmZlckVuZCAtIHRoaXMuYnVmZmVySW5kZXg7CiAJaWYgKGJ5dGVz
SW5CdWZmZXIgPiAwKQpAQCAtODcyLDcgKzg4MCw3IEBACiAgKiBAZXhjZXB0aW9uICBVVEZEYXRh
Rm9ybWF0RXhjZXB0aW9uICBpZiB0aGUgYnl0ZXMgZG8gbm90IHJlcHJlc2VudCBhCiAgKiAgICAg
ICAgICAgICAgIHZhbGlkIFVURi04IGVuY29kaW5nIG9mIGEgVW5pY29kZSBzdHJpbmcuCiAgKi8K
LXByaXZhdGUgY2hhcltdIHJlYWRTdHJlYW1DaGFycyhGaWxlSW5wdXRTdHJlYW0gc3RyZWFtKSB0
aHJvd3MgSU9FeGNlcHRpb24geworcHJpdmF0ZSBjaGFyW10gcmVhZFN0cmVhbUNoYXJzKElucHV0
U3RyZWFtIHN0cmVhbSkgdGhyb3dzIElPRXhjZXB0aW9uIHsKIAkvLyByZWFkIGNoYXJzIGFycmF5
IGxlbmd0aAogCWlmIChzdHJlYW0gIT0gbnVsbCAmJiB0aGlzLmJ1ZmZlckluZGV4ICsgMiA+PSB0
aGlzLmJ1ZmZlckVuZCkKIAkJcmVhZFN0cmVhbUJ1ZmZlcihzdHJlYW0pOwpAQCAtODg2LDcgKzg5
NCw3IEBACiAJCS8vIGhvdyBtYW55IGNoYXJhY3RlcnMgY2FuIGJlIGRlY29kZWQgd2l0aG91dCBy
ZWZpbGxpbmcgdGhlIGJ1ZmZlcj8KIAkJaW50IGNoYXJzSW5CdWZmZXIgPSBpICsgKCh0aGlzLmJ1
ZmZlckVuZCAtIHRoaXMuYnVmZmVySW5kZXgpIC8gMyk7CiAJCS8vIGFsbCB0aGUgY2hhcmFjdGVy
cyBtdXN0IGFscmVhZHkgYmUgaW4gdGhlIGJ1ZmZlciBpZiB3ZSdyZSBhdCB0aGUgZW5kIG9mIHRo
ZSBzdHJlYW0KLQkJaWYgKGNoYXJzSW5CdWZmZXIgPiBsZW5ndGggfHwgdGhpcy5idWZmZXJFbmQg
IT0gdGhpcy5zdHJlYW1CdWZmZXIubGVuZ3RoIHx8IHN0cmVhbSA9PSBudWxsKQorCQlpZiAoY2hh
cnNJbkJ1ZmZlciA+IGxlbmd0aCB8fCBzdHJlYW0gPT0gbnVsbCAgfHwgKHRoaXMuYnVmZmVyRW5k
ICE9IHRoaXMuc3RyZWFtQnVmZmVyLmxlbmd0aCAmJiBzdHJlYW0uYXZhaWxhYmxlKCkgPT0gMCkp
CiAJCQljaGFyc0luQnVmZmVyID0gbGVuZ3RoOwogCQl3aGlsZSAoaSA8IGNoYXJzSW5CdWZmZXIp
IHsKIAkJCWJ5dGUgYiA9IHRoaXMuc3RyZWFtQnVmZmVyW3RoaXMuYnVmZmVySW5kZXgrK107CkBA
IC05MzEsNyArOTM5LDcgQEAKIAl9CiAJcmV0dXJuIHdvcmQ7CiB9Ci1wcml2YXRlIGludFtdIHJl
YWRTdHJlYW1Eb2N1bWVudEFycmF5KEZpbGVJbnB1dFN0cmVhbSBzdHJlYW0sIGludCBhcnJheVNp
emUpIHRocm93cyBJT0V4Y2VwdGlvbiB7Citwcml2YXRlIGludFtdIHJlYWRTdHJlYW1Eb2N1bWVu
dEFycmF5KElucHV0U3RyZWFtIHN0cmVhbSwgaW50IGFycmF5U2l6ZSkgdGhyb3dzIElPRXhjZXB0
aW9uIHsKIAlpbnRbXSBpbmRleGVzID0gbmV3IGludFthcnJheVNpemVdOwogCWlmIChhcnJheVNp
emUgPT0gMCkgcmV0dXJuIGluZGV4ZXM7CiAKQEAgLTk3Miw3ICs5ODAsNyBAQAogCX0KIAlyZXR1
cm4gaW5kZXhlczsKIH0KLXByaXZhdGUgaW50IHJlYWRTdHJlYW1JbnQoRmlsZUlucHV0U3RyZWFt
IHN0cmVhbSkgdGhyb3dzIElPRXhjZXB0aW9uIHsKK3ByaXZhdGUgaW50IHJlYWRTdHJlYW1JbnQo
SW5wdXRTdHJlYW0gc3RyZWFtKSB0aHJvd3MgSU9FeGNlcHRpb24gewogCWlmICh0aGlzLmJ1ZmZl
ckluZGV4ICsgNCA+PSB0aGlzLmJ1ZmZlckVuZCkgewogCQlyZWFkU3RyZWFtQnVmZmVyKHN0cmVh
bSk7CiAJfQpAQCAtMTE4Miw3ICsxMTkwLDcgQEAKIH0KIHByaXZhdGUgdm9pZCB3cml0ZU9mZnNl
dFRvSGVhZGVyKGludCBvZmZzZXRUb0hlYWRlcikgdGhyb3dzIElPRXhjZXB0aW9uIHsKIAlpZiAo
b2Zmc2V0VG9IZWFkZXIgPiAwKSB7Ci0JCVJhbmRvbUFjY2Vzc0ZpbGUgZmlsZSA9IG5ldyBSYW5k
b21BY2Nlc3NGaWxlKHRoaXMuaW5kZXhGaWxlLCAicnciKTsgLy8kTk9OLU5MUy0xJAorCQlSYW5k
b21BY2Nlc3NGaWxlIGZpbGUgPSBuZXcgUmFuZG9tQWNjZXNzRmlsZSh0aGlzLmluZGV4TG9jYXRp
b24uZ2V0SW5kZXhGaWxlKCksICJydyIpOyAvLyROT04tTkxTLTEkCiAJCXRyeSB7CiAJCQlmaWxl
LnNlZWsodGhpcy5oZWFkZXJJbmZvT2Zmc2V0KTsgLy8gb2Zmc2V0IHRvIHBvc2l0aW9uIGluIGhl
YWRlcgogCQkJZmlsZS53cml0ZUludChvZmZzZXRUb0hlYWRlcik7CmRpZmYgLS1naXQgYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvaW5k
ZXgvRmlsZUluZGV4TG9jYXRpb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9pbmRleC9GaWxlSW5kZXhMb2NhdGlvbi5qYXZh
Cm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAuLjI0Y2Y0ODUKLS0tIC9kZXYvbnVs
bAorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvcmUvaW5kZXgvRmlsZUluZGV4TG9jYXRpb24uamF2YQpAQCAtMCwwICsxLDk4IEBACisv
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKg0KKyAqIENvcHlyaWdodCAoYykgMjAxMSBJQk0gQ29ycG9y
YXRpb24gYW5kIG90aGVycy4NCisgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0g
YW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzDQorICogYXJlIG1hZGUgYXZhaWxhYmxlIHVu
ZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wDQorICogd2hp
Y2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQNCisg
KiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbA0KKyAqDQorICogQ29u
dHJpYnV0b3JzOg0KKyAqICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBhbmQgaW1w
bGVtZW50YXRpb24NCisgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCitwYWNrYWdlIG9yZy5lY2xp
cHNlLmpkdC5pbnRlcm5hbC5jb3JlLmluZGV4Ow0KKw0KK2ltcG9ydCBqYXZhLmlvLkZpbGU7DQor
aW1wb3J0IGphdmEuaW8uRmlsZUlucHV0U3RyZWFtOw0KK2ltcG9ydCBqYXZhLmlvLklPRXhjZXB0
aW9uOw0KK2ltcG9ydCBqYXZhLmlvLklucHV0U3RyZWFtOw0KK2ltcG9ydCBqYXZhLm5ldC5VUkw7
DQorDQoraW1wb3J0IG9yZy5lY2xpcHNlLmNvcmUucnVudGltZS5JUGF0aDsNCitpbXBvcnQgb3Jn
LmVjbGlwc2UuY29yZS5ydW50aW1lLlBhdGg7DQorDQorcHVibGljIGNsYXNzIEZpbGVJbmRleExv
Y2F0aW9uIGV4dGVuZHMgSW5kZXhMb2NhdGlvbiB7DQorCUZpbGUgaW5kZXhGaWxlOw0KKw0KKwlw
dWJsaWMgRmlsZUluZGV4TG9jYXRpb24oRmlsZSBmaWxlKSB7DQorCQlzdXBlcihmaWxlKTsNCisJ
CXRoaXMuaW5kZXhGaWxlID0gZmlsZTsNCisJfQ0KKw0KKwlwdWJsaWMgRmlsZUluZGV4TG9jYXRp
b24oVVJMIHVybCwgRmlsZSBmaWxlKSB7DQorCQlzdXBlcih1cmwpOw0KKwkJdGhpcy5pbmRleEZp
bGUgPSBmaWxlOw0KKwl9DQorDQorCXB1YmxpYyBGaWxlSW5kZXhMb2NhdGlvbihGaWxlIGZpbGUs
IGJvb2xlYW4gcGFydGljaXBhbnRJbmRleCkgew0KKwkJdGhpcyhmaWxlKTsNCisJCXRoaXMucGFy
dGljaXBhbnRJbmRleCA9IHRydWU7DQorCX0NCisNCisJcHVibGljIGJvb2xlYW4gY3JlYXRlTmV3
RmlsZSgpIHRocm93cyBJT0V4Y2VwdGlvbiB7DQorCQlyZXR1cm4gdGhpcy5pbmRleEZpbGUuY3Jl
YXRlTmV3RmlsZSgpOw0KKwl9DQorDQorCXB1YmxpYyBib29sZWFuIGRlbGV0ZSgpIHsNCisJCXJl
dHVybiB0aGlzLmluZGV4RmlsZS5kZWxldGUoKTsNCisJfQ0KKw0KKwlwdWJsaWMgYm9vbGVhbiBl
cXVhbHMoT2JqZWN0IG90aGVyKSB7DQorCQlpZiAoIShvdGhlciBpbnN0YW5jZW9mIEZpbGVJbmRl
eExvY2F0aW9uKSkgcmV0dXJuIGZhbHNlOw0KKwkJcmV0dXJuIHRoaXMuaW5kZXhGaWxlLmVxdWFs
cygoKEZpbGVJbmRleExvY2F0aW9uKSBvdGhlcikuaW5kZXhGaWxlKTsNCisJfQ0KKw0KKwlwdWJs
aWMgYm9vbGVhbiBleGlzdHMoKSB7DQorCQlyZXR1cm4gdGhpcy5pbmRleEZpbGUuZXhpc3RzKCk7
DQorCX0NCisNCisJcHVibGljIFN0cmluZyBmaWxlTmFtZSgpIHsNCisJCXJldHVybiB0aGlzLmlu
ZGV4RmlsZS5nZXROYW1lKCk7DQorCX0NCisJDQorCXB1YmxpYyBGaWxlIGdldEluZGV4RmlsZSgp
IHsNCisJCXJldHVybiB0aGlzLmluZGV4RmlsZTsNCisJfQ0KKw0KKwlJbnB1dFN0cmVhbSBnZXRJ
bnB1dFN0cmVhbSgpIHRocm93cyBJT0V4Y2VwdGlvbiB7DQorCQlyZXR1cm4gbmV3IEZpbGVJbnB1
dFN0cmVhbSh0aGlzLmluZGV4RmlsZSk7DQorCX0NCisNCisJcHVibGljIFN0cmluZyBnZXRDYW5v
bmljYWxGaWxlUGF0aCgpIHsNCisJCXRyeSB7DQorCQkJcmV0dXJuIHRoaXMuaW5kZXhGaWxlLmdl
dENhbm9uaWNhbFBhdGgoKTsNCisJCX0gY2F0Y2ggKElPRXhjZXB0aW9uIGUpIHsNCisJCQkvLyBp
Z25vcmUNCisJCX0NCisJCXJldHVybiBudWxsOw0KKwl9DQorDQorCXB1YmxpYyBpbnQgaGFzaENv
ZGUoKSB7DQorCQlyZXR1cm4gdGhpcy5pbmRleEZpbGUuaGFzaENvZGUoKTsNCisJfQ0KKw0KKwlw
dWJsaWMgbG9uZyBsYXN0TW9kaWZpZWQoKSB7DQorCQlyZXR1cm4gdGhpcy5pbmRleEZpbGUubGFz
dE1vZGlmaWVkKCk7DQorCX0NCisNCisJcHVibGljIGxvbmcgbGVuZ3RoKCkgew0KKwkJcmV0dXJu
IHRoaXMuaW5kZXhGaWxlLmxlbmd0aCgpOw0KKwl9DQorDQorCXB1YmxpYyBib29sZWFuIHN0YXJ0
c1dpdGgoSVBhdGggcGF0aCkgew0KKwkJdHJ5IHsNCisJCQlyZXR1cm4gcGF0aC5pc1ByZWZpeE9m
KG5ldyBQYXRoKHRoaXMuaW5kZXhGaWxlLmdldENhbm9uaWNhbFBhdGgoKSkpOw0KKwkJfSBjYXRj
aCAoSU9FeGNlcHRpb24gZSkgew0KKwkJCXJldHVybiBmYWxzZTsNCisJCX0NCisJfQ0KKw0KK30N
CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvcmUvaW5kZXgvSW5kZXguamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL3Nl
YXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9pbmRleC9JbmRleC5qYXZhCmluZGV4
IDNkMzI2MDcuLjhjYWE3M2MgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJj
aC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9pbmRleC9JbmRleC5qYXZhCisrKyBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9p
bmRleC9JbmRleC5qYXZhCkBAIC0xLDUgKzEsNSBAQAogLyoqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioK
LSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAwOSBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4K
KyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMSBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4K
ICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWlu
ZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhl
IEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBk
aXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKQEAgLTg4LDEyICs4OCwxMiBAQAogfQog
CiAKLXB1YmxpYyBJbmRleChTdHJpbmcgZmlsZU5hbWUsIFN0cmluZyBjb250YWluZXJQYXRoLCBi
b29sZWFuIHJldXNlRXhpc3RpbmdGaWxlKSB0aHJvd3MgSU9FeGNlcHRpb24geworcHVibGljIElu
ZGV4KEluZGV4TG9jYXRpb24gbG9jYXRpb24sIFN0cmluZyBjb250YWluZXJQYXRoLCBib29sZWFu
IHJldXNlRXhpc3RpbmdGaWxlKSB0aHJvd3MgSU9FeGNlcHRpb24gewogCXRoaXMuY29udGFpbmVy
UGF0aCA9IGNvbnRhaW5lclBhdGg7CiAJdGhpcy5tb25pdG9yID0gbmV3IFJlYWRXcml0ZU1vbml0
b3IoKTsKIAogCXRoaXMubWVtb3J5SW5kZXggPSBuZXcgTWVtb3J5SW5kZXgoKTsKLQl0aGlzLmRp
c2tJbmRleCA9IG5ldyBEaXNrSW5kZXgoZmlsZU5hbWUpOworCXRoaXMuZGlza0luZGV4ID0gbmV3
IERpc2tJbmRleChsb2NhdGlvbik7CiAJdGhpcy5kaXNrSW5kZXguaW5pdGlhbGl6ZShyZXVzZUV4
aXN0aW5nRmlsZSk7CiAJaWYgKHJldXNlRXhpc3RpbmdGaWxlKSB0aGlzLnNlcGFyYXRvciA9IHRo
aXMuZGlza0luZGV4LnNlcGFyYXRvcjsKIH0KQEAgLTExMCw3ICsxMTAsMTMgQEAKIAlyZXR1cm4g
ZG9jdW1lbnRQYXRoLnN1YnN0cmluZyhpbmRleCArIDEpOwogfQogcHVibGljIEZpbGUgZ2V0SW5k
ZXhGaWxlKCkgewotCXJldHVybiB0aGlzLmRpc2tJbmRleCA9PSBudWxsID8gbnVsbCA6IHRoaXMu
ZGlza0luZGV4LmluZGV4RmlsZTsKKwlyZXR1cm4gdGhpcy5kaXNrSW5kZXggPT0gbnVsbCA/IG51
bGwgOiB0aGlzLmRpc2tJbmRleC5pbmRleExvY2F0aW9uLmdldEluZGV4RmlsZSgpOworfQorcHVi
bGljIEluZGV4TG9jYXRpb24gZ2V0SW5kZXhMb2NhdGlvbigpIHsKKwlyZXR1cm4gdGhpcy5kaXNr
SW5kZXggPT0gbnVsbCA/IG51bGwgOiB0aGlzLmRpc2tJbmRleC5pbmRleExvY2F0aW9uOworfQor
cHVibGljIGxvbmcgZ2V0SW5kZXhMYXN0TW9kaWZpZWQoKSB7CisJcmV0dXJuIHRoaXMuZGlza0lu
ZGV4ID09IG51bGw/IC0xIDogdGhpcy5kaXNrSW5kZXguaW5kZXhMb2NhdGlvbi5sYXN0TW9kaWZp
ZWQoKTsKIH0KIHB1YmxpYyBib29sZWFuIGhhc0NoYW5nZWQoKSB7CiAJcmV0dXJuIHRoaXMubWVt
b3J5SW5kZXguaGFzQ2hhbmdlZCgpOwpAQCAtMTgwLDcgKzE4Niw3IEBACiAgKi8KIHB1YmxpYyB2
b2lkIHJlc2V0KCkgdGhyb3dzIElPRXhjZXB0aW9uIHsKIAl0aGlzLm1lbW9yeUluZGV4ID0gbmV3
IE1lbW9yeUluZGV4KCk7Ci0JdGhpcy5kaXNrSW5kZXggPSBuZXcgRGlza0luZGV4KHRoaXMuZGlz
a0luZGV4LmluZGV4RmlsZS5nZXRDYW5vbmljYWxQYXRoKCkpOworCXRoaXMuZGlza0luZGV4ID0g
bmV3IERpc2tJbmRleCh0aGlzLmRpc2tJbmRleC5pbmRleExvY2F0aW9uKTsKIAl0aGlzLmRpc2tJ
bmRleC5pbml0aWFsaXplKGZhbHNlLypkbyBub3QgcmV1c2UgdGhlIGluZGV4IGZpbGUqLyk7CiB9
CiBwdWJsaWMgdm9pZCBzYXZlKCkgdGhyb3dzIElPRXhjZXB0aW9uIHsKZGlmZiAtLWdpdCBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9p
bmRleC9JbmRleExvY2F0aW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvaW5kZXgvSW5kZXhMb2NhdGlvbi5qYXZhCm5ldyBm
aWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAuLjNiNDk4MTMKLS0tIC9kZXYvbnVsbAorKysg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
cmUvaW5kZXgvSW5kZXhMb2NhdGlvbi5qYXZhCkBAIC0wLDAgKzEsMTI0IEBACisvKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKg0KKyAqIENvcHlyaWdodCAoYykgMjAxMSBJQk0gQ29ycG9yYXRpb24gYW5k
IG90aGVycy4NCisgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBh
Y2NvbXBhbnlpbmcgbWF0ZXJpYWxzDQorICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0
ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wDQorICogd2hpY2ggYWNjb21w
YW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQNCisgKiBodHRwOi8v
d3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbA0KKyAqDQorICogQ29udHJpYnV0b3Jz
Og0KKyAqICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRp
b24NCisgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCitwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5p
bnRlcm5hbC5jb3JlLmluZGV4Ow0KKw0KK2ltcG9ydCBqYXZhLmlvLkZpbGU7DQoraW1wb3J0IGph
dmEuaW8uSU9FeGNlcHRpb247DQoraW1wb3J0IGphdmEuaW8uSW5wdXRTdHJlYW07DQorDQoraW1w
b3J0IGphdmEubmV0Lk1hbGZvcm1lZFVSTEV4Y2VwdGlvbjsNCitpbXBvcnQgamF2YS5uZXQuVVJM
Ow0KKw0KK2ltcG9ydCBvcmcuZWNsaXBzZS5jb3JlLnJ1bnRpbWUuRmlsZUxvY2F0b3I7DQoraW1w
b3J0IG9yZy5lY2xpcHNlLmNvcmUucnVudGltZS5JUGF0aDsNCisNCisvKioNCisgKiBUaGUgbG9j
YXRpb24gb2YgdGhlIGluZGV4IGZpbGVzIGFyZSByZXByZXNlbnRlZCBhcyB7QGxpbmsgSW5kZXhM
b2NhdGlvbn0NCisgKiANCisgKiBUaGlzIGlzIGFuIGFic3RyYWN0IGNsYXNzIHRvIGFsbG93IGRp
ZmZlcmVudCBpbXBsZW1lbnRhdGlvbiBmb3IgYSBqYXIgZW50cnkgYW5kIGEgZmlsZQ0KKyAqIG9u
IHRoZSBkaXNrLiBTb21lIG9mIHRoZXNlIGZ1bmN0aW9ucyBjb3VsZCBtZWFuIGRpZmZlcmVudCBm
b3IgYSBqYXIgZW50cnkgb3IgYSBmaWxlDQorICogDQorICovDQorcHVibGljIGFic3RyYWN0IGNs
YXNzIEluZGV4TG9jYXRpb24gew0KKwkNCisJcHVibGljIHN0YXRpYyBJbmRleExvY2F0aW9uIGNy
ZWF0ZUluZGV4TG9jYXRpb24oVVJMIHVybCkgew0KKwkJVVJMIGxvY2FsVXJsOw0KKwkJdHJ5IHsN
CisJCQlsb2NhbFVybCA9IEZpbGVMb2NhdG9yLnJlc29sdmUodXJsKTsNCisJCX0gY2F0Y2ggKElP
RXhjZXB0aW9uIGUpIHsNCisJCQlyZXR1cm4gbnVsbDsNCisJCX0NCisJCWlmIChsb2NhbFVybC5n
ZXRQcm90b2NvbCgpLmVxdWFscygiZmlsZSIpKSB7IC8vJE5PTi1OTFMtMSQNCisJCQlyZXR1cm4g
bmV3IEZpbGVJbmRleExvY2F0aW9uKHVybCwgbmV3IEZpbGUobG9jYWxVcmwuZ2V0UGF0aCgpKSk7
DQorCQl9DQorCQlyZXR1cm4gbmV3IEphckluZGV4TG9jYXRpb24odXJsLCBsb2NhbFVybCk7DQor
CX0NCisJDQorCXByaXZhdGUgZmluYWwgVVJMIHVybDsgLy8gdXJsIG9mIHRoZSBnaXZlbiBpbmRl
eCBsb2NhdGlvbg0KKw0KKwkvKioNCisJICogU2V0IHRvIHRydWUgaWYgdGhpcyBpbmRleCBsb2Nh
dGlvbiBpcyBvZiBhbiBpbmRleCBmaWxlIHNwZWNpZmllZA0KKwkgKiBieSBhIHBhcnRpY2lwYW50
IHRocm91Z2ggDQorCSAqIHtAbGluayBvcmcuZWNsaXBzZS5qZHQuY29yZS5zZWFyY2guU2VhcmNo
UGFydGljaXBhbnQjc2NoZWR1bGVEb2N1bWVudEluZGV4aW5nfQ0KKwkgKi8NCisJcHJvdGVjdGVk
IGJvb2xlYW4gcGFydGljaXBhbnRJbmRleDsNCisJDQorCXByb3RlY3RlZCBJbmRleExvY2F0aW9u
KEZpbGUgZmlsZSkgew0KKwkJVVJMIHRlbXBVcmwgPSBudWxsOw0KKwkJdHJ5IHsNCisJCQl0ZW1w
VXJsID0gZmlsZS50b1VSSSgpLnRvVVJMKCk7DQorCQl9IGNhdGNoIChNYWxmb3JtZWRVUkxFeGNl
cHRpb24gZSkgew0KKwkJCS8vIHNob3VsZCBub3QgaGFwcGVuDQorCQl9DQorCQl0aGlzLnVybCA9
IHRlbXBVcmw7DQorCX0NCisJDQorCXB1YmxpYyBJbmRleExvY2F0aW9uKFVSTCB1cmwpIHsNCisJ
CXRoaXMudXJsID0gdXJsOw0KKwl9DQorDQorCS8qKg0KKwkgKiBDbG9zZXMgYW55IG9wZW4gc3Ry
ZWFtcy4NCisJICovDQorCXB1YmxpYyB2b2lkIGNsb3NlKCkgew0KKwkJLy8gZGVmYXVsdCBub3Ro
aW5nIHRvIGRvDQorCX0NCisNCisJLyoqDQorCSAqIENyZWF0ZXMgYSBuZXcgZmlsZSBmb3IgdGhl
IGdpdmVuIGluZGV4IGxvY2F0aW9uDQorCSAqIEByZXR1cm4gdHJ1ZSBpZiB0aGUgZmlsZSBpcyBj
cmVhdGVkDQorCSAqIEB0aHJvd3MgSU9FeGNlcHRpb24NCisJICovDQorCXB1YmxpYyBhYnN0cmFj
dCBib29sZWFuIGNyZWF0ZU5ld0ZpbGUoKSB0aHJvd3MgSU9FeGNlcHRpb247DQorDQorCXB1Ymxp
YyBhYnN0cmFjdCBib29sZWFuIGRlbGV0ZSgpOw0KKw0KKwlwdWJsaWMgYWJzdHJhY3QgYm9vbGVh
biBleGlzdHMoKTsNCisJDQorCXB1YmxpYyBhYnN0cmFjdCBTdHJpbmcgZmlsZU5hbWUoKTsNCisN
CisJLyoqDQorCSAqIEByZXR1cm4gdGhlIGNhbm9uaWNhbCBmaWxlIHBhdGggaWYgdGhlIGxvY2F0
aW9uIGlzIGEgZmlsZSBvciBudWxsIG90aGVyd2lzZQ0KKwkgKi8NCisJcHVibGljIGFic3RyYWN0
IFN0cmluZyBnZXRDYW5vbmljYWxGaWxlUGF0aCgpOw0KKw0KKwlwdWJsaWMgYWJzdHJhY3QgRmls
ZSBnZXRJbmRleEZpbGUoKTsNCisNCisJYWJzdHJhY3QgSW5wdXRTdHJlYW0gZ2V0SW5wdXRTdHJl
YW0oKSB0aHJvd3MgSU9FeGNlcHRpb247DQorDQorCXB1YmxpYyBVUkwgZ2V0VXJsKCkgew0KKwkJ
cmV0dXJuIHRoaXMudXJsOw0KKwl9DQorDQorCXB1YmxpYyBpbnQgaGFzaENvZGUoKSB7DQorCQly
ZXR1cm4gdGhpcy51cmwuaGFzaENvZGUoKTsNCisJfQ0KKw0KKwlwdWJsaWMgYm9vbGVhbiBpc1Bh
cnRpY2lwYW50SW5kZXgoKSB7DQorCQlyZXR1cm4gdGhpcy5wYXJ0aWNpcGFudEluZGV4Ow0KKwl9
DQorDQorCS8qKg0KKwkgKiBAcmV0dXJuIHRoZSBsYXN0IG1vZGlmaWVkIHRpbWUgaWYgdGhlIGxv
Y2F0aW9uIGlzIGEgZmlsZSBvciAtMSBvdGhlcndpc2UNCisJICovDQorCXB1YmxpYyBhYnN0cmFj
dCBsb25nIGxhc3RNb2RpZmllZCgpOw0KKw0KKwkvKioNCisJICogQHJldHVybiB0aGUgbGVuZ3Ro
IG9mIHRoZSBmaWxlIGlmIHRoZSBsb2NhdGlvbiBpcyBhIGZpbGUgb3IgLTEgb3RoZXJ3aXNlDQor
CSAqLw0KKwlwdWJsaWMgYWJzdHJhY3QgbG9uZyBsZW5ndGgoKTsNCisNCisJcHVibGljIGFic3Ry
YWN0IGJvb2xlYW4gc3RhcnRzV2l0aChJUGF0aCBwYXRoKTsNCisNCisJcHVibGljIFN0cmluZyB0
b1N0cmluZygpIHsNCisJCXJldHVybiB0aGlzLnVybC50b1N0cmluZygpOw0KKwl9DQorfQ0KZGlm
ZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29yZS9pbmRleC9KYXJJbmRleExvY2F0aW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvaW5kZXgvSmFySW5kZXhM
b2NhdGlvbi5qYXZhCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAuLjk2YzJkYTQK
LS0tIC9kZXYvbnVsbAorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvcmUvaW5kZXgvSmFySW5kZXhMb2NhdGlvbi5qYXZhCkBAIC0wLDAg
KzEsMTA4IEBACisvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KKyAqIENvcHlyaWdodCAoYykgMjAx
MSBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4NCisgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBU
aGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzDQorICogYXJlIG1hZGUg
YXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2
MS4wDQorICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFp
bGFibGUgYXQNCisgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbA0K
KyAqDQorICogQ29udHJpYnV0b3JzOg0KKyAqICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFs
IEFQSSBhbmQgaW1wbGVtZW50YXRpb24NCisgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCitwYWNr
YWdlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLmluZGV4Ow0KKw0KK2ltcG9ydCBqYXZh
LmlvLkZpbGU7DQoraW1wb3J0IGphdmEuaW8uSU9FeGNlcHRpb247DQoraW1wb3J0IGphdmEuaW8u
SW5wdXRTdHJlYW07DQoraW1wb3J0IGphdmEubmV0LkphclVSTENvbm5lY3Rpb247DQoraW1wb3J0
IGphdmEubmV0LlVSTDsNCitpbXBvcnQgamF2YS51dGlsLmphci5KYXJFbnRyeTsNCitpbXBvcnQg
amF2YS51dGlsLmphci5KYXJGaWxlOw0KKw0KK2ltcG9ydCBvcmcuZWNsaXBzZS5jb3JlLnJ1bnRp
bWUuSVBhdGg7DQoraW1wb3J0IG9yZy5lY2xpcHNlLmNvcmUucnVudGltZS5QYXRoOw0KKw0KK3B1
YmxpYyBjbGFzcyBKYXJJbmRleExvY2F0aW9uIGV4dGVuZHMgSW5kZXhMb2NhdGlvbiB7DQorCXBy
aXZhdGUgSmFyRmlsZSBqYXJGaWxlID0gbnVsbDsNCisJcHJpdmF0ZSBKYXJFbnRyeSBqYXJFbnRy
eSA9IG51bGw7DQorCXByaXZhdGUgVVJMIGxvY2FsVXJsOw0KKw0KKwlwdWJsaWMgSmFySW5kZXhM
b2NhdGlvbihVUkwgdXJsLCBVUkwgbG9jYWxVcmwyKSB7DQorCQlzdXBlcih1cmwpOw0KKwkJdGhp
cy5sb2NhbFVybCA9IGxvY2FsVXJsMjsNCisJfQ0KKw0KKwlwdWJsaWMgYm9vbGVhbiBjcmVhdGVO
ZXdGaWxlKCkgdGhyb3dzIElPRXhjZXB0aW9uIHsNCisJCXJldHVybiBmYWxzZTsNCisJfQ0KKw0K
KwlwdWJsaWMgdm9pZCBjbG9zZSgpIHsNCisJCWlmICh0aGlzLmphckZpbGUgIT0gbnVsbCkgew0K
KwkJCXRyeSB7DQorCQkJCXRoaXMuamFyRmlsZS5jbG9zZSgpOw0KKwkJCX0gY2F0Y2ggKElPRXhj
ZXB0aW9uIGUpIHsNCisJCQkJLy8gaWdub3JlDQorCQkJfQ0KKwkJCXRoaXMuamFyRmlsZSA9IG51
bGw7DQorCQl9DQorCX0NCisNCisJcHVibGljIGJvb2xlYW4gZGVsZXRlKCkgew0KKwkJcmV0dXJu
IGZhbHNlOw0KKwl9DQorDQorCXB1YmxpYyBib29sZWFuIGVxdWFscyhPYmplY3Qgb3RoZXIpIHsN
CisJCWlmICghKG90aGVyIGluc3RhbmNlb2YgSmFySW5kZXhMb2NhdGlvbikpIHJldHVybiBmYWxz
ZTsNCisJCXJldHVybiB0aGlzLmxvY2FsVXJsLmVxdWFscygoKEphckluZGV4TG9jYXRpb24pIG90
aGVyKS5sb2NhbFVybCk7DQorCX0NCisNCisJcHVibGljIGJvb2xlYW4gZXhpc3RzKCkgew0KKwkJ
dHJ5IHsNCisJCQlpZiAodGhpcy5qYXJGaWxlID09IG51bGwpIHsNCisJCQkJSmFyVVJMQ29ubmVj
dGlvbiBjb25uZWN0aW9uID0gKEphclVSTENvbm5lY3Rpb24pIHRoaXMubG9jYWxVcmwub3BlbkNv
bm5lY3Rpb24oKTsNCisJCQkJSmFyRmlsZSBmaWxlID0gY29ubmVjdGlvbi5nZXRKYXJGaWxlKCk7
DQorCQkJCWlmIChmaWxlID09IG51bGwpDQorCQkJCQlyZXR1cm4gZmFsc2U7DQorCQkJCWZpbGUu
Y2xvc2UoKTsNCisJCQl9DQorCQl9IGNhdGNoIChJT0V4Y2VwdGlvbiBlKSB7DQorCQkJcmV0dXJu
IGZhbHNlOw0KKwkJfQ0KKwkJcmV0dXJuIHRydWU7DQorCX0NCisNCisJcHVibGljIFN0cmluZyBm
aWxlTmFtZSgpIHsNCisJCXJldHVybiBudWxsOw0KKwl9DQorDQorCXB1YmxpYyBGaWxlIGdldElu
ZGV4RmlsZSgpIHsNCisJCXJldHVybiBudWxsOw0KKwl9DQorDQorCUlucHV0U3RyZWFtIGdldElu
cHV0U3RyZWFtKCkgdGhyb3dzIElPRXhjZXB0aW9uIHsNCisJCWlmICh0aGlzLmphckZpbGUgPT0g
bnVsbCkgew0KKwkJCUphclVSTENvbm5lY3Rpb24gY29ubmVjdGlvbiA9IChKYXJVUkxDb25uZWN0
aW9uKSB0aGlzLmxvY2FsVXJsLm9wZW5Db25uZWN0aW9uKCk7DQorCQkJdGhpcy5qYXJGaWxlID0g
Y29ubmVjdGlvbi5nZXRKYXJGaWxlKCk7DQorCQkJdGhpcy5qYXJFbnRyeSA9IGNvbm5lY3Rpb24u
Z2V0SmFyRW50cnkoKTsNCisJCX0NCisJCWlmICh0aGlzLmphckZpbGUgPT0gbnVsbCB8fCB0aGlz
LmphckVudHJ5ID09IG51bGwpDQorCQkJcmV0dXJuIG51bGw7DQorCQlyZXR1cm4gdGhpcy5qYXJG
aWxlLmdldElucHV0U3RyZWFtKHRoaXMuamFyRW50cnkpOw0KKwl9DQorDQorCXB1YmxpYyBTdHJp
bmcgZ2V0Q2Fub25pY2FsRmlsZVBhdGgoKSB7DQorCQlyZXR1cm4gbnVsbDsNCisJfQ0KKw0KKwlw
dWJsaWMgbG9uZyBsYXN0TW9kaWZpZWQoKSB7DQorCQlyZXR1cm4gLTE7DQorCX0NCisNCisJcHVi
bGljIGxvbmcgbGVuZ3RoKCkgew0KKwkJcmV0dXJuIC0xOw0KKwl9DQorDQorCXB1YmxpYyBib29s
ZWFuIHN0YXJ0c1dpdGgoSVBhdGggcGF0aCkgew0KKwkJcmV0dXJuIChwYXRoLmlzUHJlZml4T2Yo
bmV3IFBhdGgodGhpcy5sb2NhbFVybC5nZXRQYXRoKCkpKSk7DQorCX0NCisNCit9DQpkaWZmIC0t
Z2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb3JlL3NlYXJjaC9JbmRleFNlbGVjdG9yLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9z
ZWFyY2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNoL0luZGV4U2VsZWN0b3Iu
amF2YQppbmRleCA0ZTU4NGYyLi4yMDk5MGM5IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNoL0luZGV4U2Vs
ZWN0b3IuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvcmUvc2VhcmNoL0luZGV4U2VsZWN0b3IuamF2YQpAQCAtMjcsNiArMjcs
NyBAQAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLkphdmFQcm9qZWN0Owog
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLmJ1aWxkZXIuUmVmZXJlbmNlQ29s
bGVjdGlvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS5idWlsZGVyLlN0
YXRlOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLmluZGV4LkluZGV4TG9j
YXRpb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvcmUuc2VhcmNoLmluZGV4
aW5nLkluZGV4TWFuYWdlcjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS5z
ZWFyY2gubWF0Y2hpbmcuTWF0Y2hMb2NhdG9yOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRl
cm5hbC5jb3JlLnNlYXJjaC5tYXRjaGluZy5NZXRob2RQYXR0ZXJuOwpAQCAtMzgsNyArMzksNyBA
QAogcHVibGljIGNsYXNzIEluZGV4U2VsZWN0b3IgewogCUlKYXZhU2VhcmNoU2NvcGUgc2VhcmNo
U2NvcGU7CiAJU2VhcmNoUGF0dGVybiBwYXR0ZXJuOwotCUlQYXRoW10gaW5kZXhMb2NhdGlvbnM7
IC8vIGNhY2hlIG9mIHRoZSBrZXlzIGZvciBsb29raW5nIGluZGV4IHVwCisJSW5kZXhMb2NhdGlv
bltdIGluZGV4TG9jYXRpb25zOyAvLyBjYWNoZSBvZiB0aGUga2V5cyBmb3IgbG9va2luZyBpbmRl
eCB1cAogCiBwdWJsaWMgSW5kZXhTZWxlY3RvcigKIAkJSUphdmFTZWFyY2hTY29wZSBzZWFyY2hT
Y29wZSwKQEAgLTI2NywxMCArMjY4LDEwIEBACiAJfQogCiAJbG9jYXRpb25zLnJlbW92ZShudWxs
KTsgLy8gRW5zdXJlIG5vIG51bGxzCi0JdGhpcy5pbmRleExvY2F0aW9ucyA9IChJUGF0aFtdKSBs
b2NhdGlvbnMudG9BcnJheShuZXcgSVBhdGhbbG9jYXRpb25zLnNpemUoKV0pOworCXRoaXMuaW5k
ZXhMb2NhdGlvbnMgPSAoSW5kZXhMb2NhdGlvbltdKSBsb2NhdGlvbnMudG9BcnJheShuZXcgSW5k
ZXhMb2NhdGlvbltsb2NhdGlvbnMuc2l6ZSgpXSk7CiB9CiAKLXB1YmxpYyBJUGF0aFtdIGdldElu
ZGV4TG9jYXRpb25zKCkgeworcHVibGljIEluZGV4TG9jYXRpb25bXSBnZXRJbmRleExvY2F0aW9u
cygpIHsKIAlpZiAodGhpcy5pbmRleExvY2F0aW9ucyA9PSBudWxsKSB7CiAJCWluaXRpYWxpemVJ
bmRleExvY2F0aW9ucygpOwogCX0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL3Nl
YXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gvSmF2YVNlYXJjaFBhcnRp
Y2lwYW50LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvcmUvc2VhcmNoL0phdmFTZWFyY2hQYXJ0aWNpcGFudC5qYXZhCmluZGV4IDEz
ZDY4MjAuLmNmOTcwYjMgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gvSmF2YVNlYXJjaFBhcnRpY2lwYW50
LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb3JlL3NlYXJjaC9KYXZhU2VhcmNoUGFydGljaXBhbnQuamF2YQpAQCAtMSw1ICsx
LDUgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIw
MDkgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIw
MTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBU
aGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBh
dmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYx
LjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxh
YmxlIGF0CkBAIC0xMiw2ICsxMiw3IEBACiAKIGltcG9ydCBvcmcuZWNsaXBzZS5jb3JlLnJ1bnRp
bWUuKjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5zZWFyY2guKjsKK2ltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS5pbmRleC5JbmRleExvY2F0aW9uOwogaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLnNlYXJjaC5pbmRleGluZy5CaW5hcnlJbmRleGVy
OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLnNlYXJjaC5pbmRleGluZy5T
b3VyY2VJbmRleGVyOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLnNlYXJj
aC5tYXRjaGluZy5NYXRjaExvY2F0b3I7CkBAIC05OCw3ICs5OSwyMCBAQAogCSAqIEBzZWUgb3Jn
LmVjbGlwc2UuamR0LmNvcmUuc2VhcmNoLlNlYXJjaFBhcnRpY2lwYW50I3NlbGVjdEluZGV4ZXMo
b3JnLmVjbGlwc2UuamR0LmNvcmUuc2VhcmNoLlNlYXJjaFF1ZXJ5LCBvcmcuZWNsaXBzZS5qZHQu
Y29yZS5zZWFyY2guU2VhcmNoQ29udGV4dCkKIAkgKi8KIAlwdWJsaWMgSVBhdGhbXSBzZWxlY3RJ
bmRleGVzKFNlYXJjaFBhdHRlcm4gcGF0dGVybiwgSUphdmFTZWFyY2hTY29wZSBzY29wZSkgewor
CQlJbmRleFNlbGVjdG9yIHNlbGVjdG9yID0gKEluZGV4U2VsZWN0b3IpIHRoaXMuaW5kZXhTZWxl
Y3Rvci5nZXQoKTsKKwkJaWYgKHNlbGVjdG9yID09IG51bGwpIHsKKwkJCXNlbGVjdG9yID0gbmV3
IEluZGV4U2VsZWN0b3Ioc2NvcGUsIHBhdHRlcm4pOworCQkJdGhpcy5pbmRleFNlbGVjdG9yLnNl
dChzZWxlY3Rvcik7CisJCX0KKwkJSW5kZXhMb2NhdGlvbltdIHVybHMgPSBzZWxlY3Rvci5nZXRJ
bmRleExvY2F0aW9ucygpOworCQlJUGF0aFtdIHBhdGhzID0gbmV3IElQYXRoW3VybHMubGVuZ3Ro
XTsKKwkJZm9yIChpbnQgaSA9IDA7IGkgPCB1cmxzLmxlbmd0aDsgaSsrKSB7CisJCQlwYXRoc1tp
XSA9IG5ldyBQYXRoKHVybHNbaV0uZ2V0SW5kZXhGaWxlKCkuZ2V0UGF0aCgpKTsKKwkJfQorCQly
ZXR1cm4gcGF0aHM7CisJfQogCisJcHVibGljIEluZGV4TG9jYXRpb25bXSBzZWxlY3RJbmRleFVS
THMoU2VhcmNoUGF0dGVybiBwYXR0ZXJuLCBJSmF2YVNlYXJjaFNjb3BlIHNjb3BlKSB7CiAJCUlu
ZGV4U2VsZWN0b3Igc2VsZWN0b3IgPSAoSW5kZXhTZWxlY3RvcikgdGhpcy5pbmRleFNlbGVjdG9y
LmdldCgpOwogCQlpZiAoc2VsZWN0b3IgPT0gbnVsbCkgewogCQkJc2VsZWN0b3IgPSBuZXcgSW5k
ZXhTZWxlY3RvcihzY29wZSwgcGF0dGVybik7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNoL1BhdHRlcm5T
ZWFyY2hKb2IuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gvUGF0dGVyblNlYXJjaEpvYi5qYXZhCmluZGV4IDQ1OTcz
MGMuLmM4M2MyZjEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gvUGF0dGVyblNlYXJjaEpvYi5qYXZhCisr
KyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29yZS9zZWFyY2gvUGF0dGVyblNlYXJjaEpvYi5qYXZhCkBAIC0xNyw3ICsxNyw5IEBACiBpbXBv
cnQgb3JnLmVjbGlwc2UuY29yZS5ydW50aW1lLk9wZXJhdGlvbkNhbmNlbGVkRXhjZXB0aW9uOwog
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLnNlYXJjaC4qOwogaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5pbnRlcm5hbC5jb3JlLkphdmFNb2RlbE1hbmFnZXI7CitpbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvcmUuaW5kZXguRmlsZUluZGV4TG9jYXRpb247CiBpbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmludGVybmFsLmNvcmUuaW5kZXguSW5kZXg7CitpbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvcmUuaW5kZXguSW5kZXhMb2NhdGlvbjsKIGltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29yZS5zZWFyY2guaW5kZXhpbmcuUmVhZFdyaXRlTW9uaXRvcjsKIGlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS5zZWFyY2gubWF0Y2hpbmcuTWF0Y2hM
b2NhdG9yOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLnNlYXJjaC5wcm9j
ZXNzaW5nLklKb2I7CkBAIC03Niw4ICs3OCwxOSBAQAogfQogcHVibGljIEluZGV4W10gZ2V0SW5k
ZXhlcyhJUHJvZ3Jlc3NNb25pdG9yIHByb2dyZXNzTW9uaXRvcikgewogCS8vIGFjcXVpcmUgdGhl
IGluLW1lbW9yeSBpbmRleGVzIG9uIHRoZSBmbHkKLQlJUGF0aFtdIGluZGV4TG9jYXRpb25zID0g
dGhpcy5wYXJ0aWNpcGFudC5zZWxlY3RJbmRleGVzKHRoaXMucGF0dGVybiwgdGhpcy5zY29wZSk7
Ci0JaW50IGxlbmd0aCA9IGluZGV4TG9jYXRpb25zLmxlbmd0aDsKKwlJbmRleExvY2F0aW9uW10g
aW5kZXhMb2NhdGlvbnM7CisJaW50IGxlbmd0aDsKKwlpZiAodGhpcy5wYXJ0aWNpcGFudCBpbnN0
YW5jZW9mIEphdmFTZWFyY2hQYXJ0aWNpcGFudCkgeworCQlpbmRleExvY2F0aW9ucyA9ICgoSmF2
YVNlYXJjaFBhcnRpY2lwYW50KXRoaXMucGFydGljaXBhbnQpLnNlbGVjdEluZGV4VVJMcyh0aGlz
LnBhdHRlcm4sIHRoaXMuc2NvcGUpOworCQlsZW5ndGggPSBpbmRleExvY2F0aW9ucy5sZW5ndGg7
CisJfSBlbHNlIHsKKwkJSVBhdGhbXSBwYXRocyA9IHRoaXMucGFydGljaXBhbnQuc2VsZWN0SW5k
ZXhlcyh0aGlzLnBhdHRlcm4sIHRoaXMuc2NvcGUpOworCQlsZW5ndGggPSBwYXRocy5sZW5ndGg7
CisJCWluZGV4TG9jYXRpb25zID0gbmV3IEluZGV4TG9jYXRpb25bcGF0aHMubGVuZ3RoXTsKKwkJ
Zm9yIChpbnQgaSA9IDAsIGxlbiA9IHBhdGhzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CisJCQlp
bmRleExvY2F0aW9uc1tpXSA9IG5ldyBGaWxlSW5kZXhMb2NhdGlvbihwYXRoc1tpXS50b0ZpbGUo
KSwgdHJ1ZSk7CisJCX0KKwl9CiAJSW5kZXhbXSBpbmRleGVzID0gSmF2YU1vZGVsTWFuYWdlci5n
ZXRJbmRleE1hbmFnZXIoKS5nZXRJbmRleGVzKGluZGV4TG9jYXRpb25zLCBwcm9ncmVzc01vbml0
b3IpOwogCXRoaXMuYXJlSW5kZXhlc1JlYWR5ID0gaW5kZXhlcy5sZW5ndGggPT0gbGVuZ3RoOwog
CXJldHVybiBpbmRleGVzOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNo
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9pbmRleGluZy9BZGRKYXJGaWxl
VG9JbmRleC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9pbmRleGluZy9BZGRKYXJGaWxlVG9JbmRleC5qYXZhCmlu
ZGV4IDJhOThkMDEuLjgxMmM0NjIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL3Nl
YXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gvaW5kZXhpbmcvQWRkSmFy
RmlsZVRvSW5kZXguamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNoL2luZGV4aW5nL0FkZEphckZpbGVUb0luZGV4
LmphdmEKQEAgLTM0LDYgKzM0LDcgQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwu
Y29tcGlsZXIudXRpbC5VdGlsOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3Jl
LkphdmFNb2RlbE1hbmFnZXI7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvcmUu
aW5kZXguSW5kZXg7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvcmUuaW5kZXgu
SW5kZXhMb2NhdGlvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS5zZWFy
Y2guSmF2YVNlYXJjaERvY3VtZW50OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b3JlLnNlYXJjaC5wcm9jZXNzaW5nLkpvYk1hbmFnZXI7CiAKQEAgLTQyLDE0ICs0MywxNCBAQAog
CXByaXZhdGUgc3RhdGljIGZpbmFsIGNoYXIgSkFSX1NFUEFSQVRPUiA9IElKYXZhU2VhcmNoU2Nv
cGUuSkFSX0ZJTEVfRU5UUllfU0VQQVJBVE9SLmNoYXJBdCgwKTsKIAlJRmlsZSByZXNvdXJjZTsK
IAlTY2FubmVyIHNjYW5uZXI7Ci0JcHJpdmF0ZSBJUGF0aCBpbmRleEZpbGVVUkw7CisJcHJpdmF0
ZSBJbmRleExvY2F0aW9uIGluZGV4RmlsZVVSTDsKIAotCXB1YmxpYyBBZGRKYXJGaWxlVG9JbmRl
eChJRmlsZSByZXNvdXJjZSwgSVBhdGggaW5kZXhGaWxlLCBJbmRleE1hbmFnZXIgbWFuYWdlcikg
eworCXB1YmxpYyBBZGRKYXJGaWxlVG9JbmRleChJRmlsZSByZXNvdXJjZSwgSW5kZXhMb2NhdGlv
biBpbmRleEZpbGUsIEluZGV4TWFuYWdlciBtYW5hZ2VyKSB7CiAJCXN1cGVyKHJlc291cmNlLmdl
dEZ1bGxQYXRoKCksIG1hbmFnZXIpOwogCQl0aGlzLnJlc291cmNlID0gcmVzb3VyY2U7CiAJCXRo
aXMuaW5kZXhGaWxlVVJMID0gaW5kZXhGaWxlOwogCX0KLQlwdWJsaWMgQWRkSmFyRmlsZVRvSW5k
ZXgoSVBhdGggamFyUGF0aCwgSVBhdGggaW5kZXhGaWxlLCBJbmRleE1hbmFnZXIgbWFuYWdlcikg
eworCXB1YmxpYyBBZGRKYXJGaWxlVG9JbmRleChJUGF0aCBqYXJQYXRoLCBJbmRleExvY2F0aW9u
IGluZGV4RmlsZSwgSW5kZXhNYW5hZ2VyIG1hbmFnZXIpIHsKIAkJLy8gZXh0ZXJuYWwgSkFSIHNj
ZW5hcmlvIC0gbm8gcmVzb3VyY2UKIAkJc3VwZXIoamFyUGF0aCwgbWFuYWdlcik7CiAJCXRoaXMu
aW5kZXhGaWxlVVJMID0gaW5kZXhGaWxlOwpAQCAtMjAxLDcgKzIwMiwxMSBAQAogCQkJCQlyZXR1
cm4gZmFsc2U7CiAJCQkJfQogCQkJCWluZGV4LnNlcGFyYXRvciA9IEpBUl9TRVBBUkFUT1I7Ci0J
CQkJSVBhdGggaW5kZXhQYXRoID0gdGhpcy5tYW5hZ2VyLmNvbXB1dGVJbmRleExvY2F0aW9uKHRo
aXMuY29udGFpbmVyUGF0aCk7CisJCQkJSVBhdGggaW5kZXhQYXRoID0gbnVsbDsKKwkJCQlJbmRl
eExvY2F0aW9uIGluZGV4TG9jYXRpb247CisJCQkJaWYgKChpbmRleExvY2F0aW9uID0gaW5kZXgu
Z2V0SW5kZXhMb2NhdGlvbigpKSAhPSBudWxsKSB7CisJCQkJCWluZGV4UGF0aCA9IG5ldyBQYXRo
KGluZGV4TG9jYXRpb24uZ2V0Q2Fub25pY2FsRmlsZVBhdGgoKSk7CisJCQkJfQogCQkJCWZvciAo
RW51bWVyYXRpb24gZSA9IHppcC5lbnRyaWVzKCk7IGUuaGFzTW9yZUVsZW1lbnRzKCk7KSB7CiAJ
CQkJCWlmICh0aGlzLmlzQ2FuY2VsbGVkKSB7CiAJCQkJCQlpZiAoSm9iTWFuYWdlci5WRVJCT1NF
KQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9pbmRleGluZy9EZWZhdWx0SmF2YUluZGV4ZXIuamF2YSBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29y
ZS9zZWFyY2gvaW5kZXhpbmcvRGVmYXVsdEphdmFJbmRleGVyLmphdmEKaW5kZXggNTRiNGZhNC4u
Y2VmY2IwZiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9pbmRleGluZy9EZWZhdWx0SmF2YUluZGV4ZXIu
amF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvcmUvc2VhcmNoL2luZGV4aW5nL0RlZmF1bHRKYXZhSW5kZXhlci5qYXZhCkBAIC0y
Miw3ICsyMiw5IEBACiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuc2VhcmNoLlNlYXJjaEVu
Z2luZTsNCiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuc2VhcmNoLlNlYXJjaFBhcnRpY2lw
YW50Ow0KIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIudXRpbC5VdGls
Ow0KK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS5pbmRleC5GaWxlSW5kZXhM
b2NhdGlvbjsNCiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvcmUuaW5kZXguSW5k
ZXg7DQoraW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLmluZGV4LkluZGV4TG9j
YXRpb247DQogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLnNlYXJjaC5KYXZh
U2VhcmNoRG9jdW1lbnQ7DQogDQogcHVibGljIGNsYXNzIERlZmF1bHRKYXZhSW5kZXhlciB7DQpA
QCAtMzMsNyArMzUsOCBAQAogCQlpZiAoIWYuZXhpc3RzKCkpIHsNCiAJCQl0aHJvdyBuZXcgRmls
ZU5vdEZvdW5kRXhjZXB0aW9uKHBhdGhUb0phciArICIgbm90IGZvdW5kIik7IC8vJE5PTi1OTFMt
MSQNCiAJCX0NCi0JCUluZGV4IGluZGV4ID0gbmV3IEluZGV4KHBhdGhUb0luZGV4RmlsZSwgcGF0
aFRvSmFyLCBmYWxzZSAvKnJldXNlIGluZGV4IGZpbGUqLyk7DQorCQlJbmRleExvY2F0aW9uIGlu
ZGV4TG9jYXRpb24gPSBuZXcgRmlsZUluZGV4TG9jYXRpb24obmV3IEZpbGUocGF0aFRvSW5kZXhG
aWxlKSk7DQorCQlJbmRleCBpbmRleCA9IG5ldyBJbmRleChpbmRleExvY2F0aW9uLCBwYXRoVG9K
YXIsIGZhbHNlIC8qcmV1c2UgaW5kZXggZmlsZSovKTsNCiAJCVNlYXJjaFBhcnRpY2lwYW50IHBh
cnRpY2lwYW50ID0gU2VhcmNoRW5naW5lLmdldERlZmF1bHRTZWFyY2hQYXJ0aWNpcGFudCgpOw0K
IAkJaW5kZXguc2VwYXJhdG9yID0gSkFSX1NFUEFSQVRPUjsNCiAJCVppcEZpbGUgemlwID0gbmV3
IFppcEZpbGUocGF0aFRvSmFyKTsNCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9z
ZWFyY2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNoL2luZGV4aW5nL0luZGV4
QWxsUHJvamVjdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9pbmRleGluZy9JbmRleEFsbFByb2plY3QuamF2YQpp
bmRleCBlNjgyMzBiLi45NmFhOTA0IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9z
ZWFyY2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNoL2luZGV4aW5nL0luZGV4
QWxsUHJvamVjdC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gvaW5kZXhpbmcvSW5kZXhBbGxQcm9qZWN0Lmph
dmEKQEAgLTEwNyw3ICsxMDcsNyBAQAogCQkJCWZvciAoaW50IGkgPSAwOyBpIDwgbWF4OyBpKysp
CiAJCQkJCWluZGV4ZWRGaWxlTmFtZXMucHV0KHBhdGhzW2ldLCBERUxFVEVEKTsKIAkJCX0KLQkJ
CWZpbmFsIGxvbmcgaW5kZXhMYXN0TW9kaWZpZWQgPSBtYXggPT0gMCA/IDBMIDogaW5kZXguZ2V0
SW5kZXhGaWxlKCkubGFzdE1vZGlmaWVkKCk7CisJCQlmaW5hbCBsb25nIGluZGV4TGFzdE1vZGlm
aWVkID0gbWF4ID09IDAgPyAwTCA6IGluZGV4LmdldEluZGV4TGFzdE1vZGlmaWVkKCk7CiAKIAkJ
CUlXb3Jrc3BhY2VSb290IHJvb3QgPSB0aGlzLnByb2plY3QuZ2V0V29ya3NwYWNlKCkuZ2V0Um9v
dCgpOwogCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBzb3VyY2VFbnRyaWVzTnVtYmVyOyBpKyspIHsK
ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29yZS9zZWFyY2gvaW5kZXhpbmcvSW5kZXhCaW5hcnlGb2xkZXIuamF2YSBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9z
ZWFyY2gvaW5kZXhpbmcvSW5kZXhCaW5hcnlGb2xkZXIuamF2YQppbmRleCA3YmI5MGY5Li5iMDZl
MGRmIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvcmUvc2VhcmNoL2luZGV4aW5nL0luZGV4QmluYXJ5Rm9sZGVyLmphdmEK
KysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb3JlL3NlYXJjaC9pbmRleGluZy9JbmRleEJpbmFyeUZvbGRlci5qYXZhCkBAIC04MCw3ICs4
MCw3IEBACiAJCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBtYXg7IGkrKykgewogCQkJCQlpbmRleGVk
RmlsZU5hbWVzLnB1dChwYXRoc1tpXSwgREVMRVRFRCk7CiAJCQkJfQotCQkJCWZpbmFsIGxvbmcg
aW5kZXhMYXN0TW9kaWZpZWQgPSBpbmRleC5nZXRJbmRleEZpbGUoKS5sYXN0TW9kaWZpZWQoKTsK
KwkJCQlmaW5hbCBsb25nIGluZGV4TGFzdE1vZGlmaWVkID0gaW5kZXguZ2V0SW5kZXhMYXN0TW9k
aWZpZWQoKTsKIAkJCQl0aGlzLmZvbGRlci5hY2NlcHQoCiAJCQkJCW5ldyBJUmVzb3VyY2VQcm94
eVZpc2l0b3IoKSB7CiAJCQkJCQlwdWJsaWMgYm9vbGVhbiB2aXNpdChJUmVzb3VyY2VQcm94eSBw
cm94eSkgdGhyb3dzIENvcmVFeGNlcHRpb24gewpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9pbmRleGlu
Zy9JbmRleE1hbmFnZXIuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gvaW5kZXhpbmcvSW5kZXhNYW5hZ2VyLmphdmEK
aW5kZXggMmFiMzY1My4uNzVmNDQxZiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
c2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9pbmRleGluZy9JbmRl
eE1hbmFnZXIuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNoL2luZGV4aW5nL0luZGV4TWFuYWdlci5qYXZhCkBA
IC0xNiw3ICsxNiw2IEBACiBpbXBvcnQgamF2YS51dGlsLnppcC5DUkMzMjsKIAogaW1wb3J0IG9y
Zy5lY2xpcHNlLmNvcmUucmVzb3VyY2VzLio7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuY29yZS5ydW50
aW1lLkZpbGVMb2NhdG9yOwogaW1wb3J0IG9yZy5lY2xpcHNlLmNvcmUucnVudGltZS5JUGF0aDsK
IGltcG9ydCBvcmcuZWNsaXBzZS5jb3JlLnJ1bnRpbWUuSVByb2dyZXNzTW9uaXRvcjsKIGltcG9y
dCBvcmcuZWNsaXBzZS5jb3JlLnJ1bnRpbWUuT3BlcmF0aW9uQ2FuY2VsZWRFeGNlcHRpb247CkBA
IC03Myw3ICs3Miw3IEBACiAJcHVibGljIHN5bmNocm9uaXplZCB2b2lkIGFib3V0VG9VcGRhdGVJ
bmRleChJUGF0aCBjb250YWluZXJQYXRoLCBJbnRlZ2VyIG5ld0luZGV4U3RhdGUpIHsKIAkvLyBu
ZXdJbmRleFN0YXRlIGlzIGVpdGhlciBVUERBVElOR19TVEFURSBvciBSRUJVSUxESU5HX1NUQVRF
CiAJLy8gbXVzdCB0YWcgdGhlIGluZGV4IGFzIGluY29uc2lzdGVudCwgaW4gY2FzZSB3ZSBleGl0
IGJlZm9yZSB0aGUgdXBkYXRlIGpvYiBpcyBzdGFydGVkCi0JSVBhdGggaW5kZXhMb2NhdGlvbiA9
IGNvbXB1dGVJbmRleExvY2F0aW9uKGNvbnRhaW5lclBhdGgpOworCUluZGV4TG9jYXRpb24gaW5k
ZXhMb2NhdGlvbiA9IGNvbXB1dGVJbmRleExvY2F0aW9uKGNvbnRhaW5lclBhdGgpOwogCU9iamVj
dCBzdGF0ZSA9IGdldEluZGV4U3RhdGVzKCkuZ2V0KGluZGV4TG9jYXRpb24pOwogCUludGVnZXIg
Y3VycmVudEluZGV4U3RhdGUgPSBzdGF0ZSA9PSBudWxsID8gVU5LTk9XTl9TVEFURSA6IChJbnRl
Z2VyKSBzdGF0ZTsKIAlpZiAoY3VycmVudEluZGV4U3RhdGUuY29tcGFyZVRvKFJFQlVJTERJTkdf
U1RBVEUpID49IDApIHJldHVybjsgLy8gYWxyZWFkeSByZWJ1aWxkaW5nIHRoZSBpbmRleApAQCAt
OTUsNyArOTQsNyBAQAogCWlmIChKYXZhQ29yZS5nZXRQbHVnaW4oKSA9PSBudWxsKSByZXR1cm47
CiAJU2VhcmNoUGFydGljaXBhbnQgcGFydGljaXBhbnQgPSBTZWFyY2hFbmdpbmUuZ2V0RGVmYXVs
dFNlYXJjaFBhcnRpY2lwYW50KCk7CiAJU2VhcmNoRG9jdW1lbnQgZG9jdW1lbnQgPSBwYXJ0aWNp
cGFudC5nZXREb2N1bWVudChyZXNvdXJjZS5nZXRGdWxsUGF0aCgpLnRvU3RyaW5nKCkpOwotCUlQ
YXRoIGluZGV4TG9jYXRpb24gPSBjb21wdXRlSW5kZXhMb2NhdGlvbihjb250YWluZXJQYXRoKTsK
KwlJbmRleExvY2F0aW9uIGluZGV4TG9jYXRpb24gPSBjb21wdXRlSW5kZXhMb2NhdGlvbihjb250
YWluZXJQYXRoKTsKIAlzY2hlZHVsZURvY3VtZW50SW5kZXhpbmcoZG9jdW1lbnQsIGNvbnRhaW5l
clBhdGgsIGluZGV4TG9jYXRpb24sIHBhcnRpY2lwYW50KTsKIH0KIC8qKgpAQCAtMTA3LDcgKzEw
Niw3IEBACiAJU2VhcmNoUGFydGljaXBhbnQgcGFydGljaXBhbnQgPSBTZWFyY2hFbmdpbmUuZ2V0
RGVmYXVsdFNlYXJjaFBhcnRpY2lwYW50KCk7CiAJU2VhcmNoRG9jdW1lbnQgZG9jdW1lbnQgPSBw
YXJ0aWNpcGFudC5nZXREb2N1bWVudChyZXNvdXJjZS5nZXRGdWxsUGF0aCgpLnRvU3RyaW5nKCkp
OwogCWRvY3VtZW50LnNldFBhcnNlcihwYXJzZXIpOwotCUlQYXRoIGluZGV4TG9jYXRpb24gPSBj
b21wdXRlSW5kZXhMb2NhdGlvbihjb250YWluZXJQYXRoKTsKKwlJbmRleExvY2F0aW9uIGluZGV4
TG9jYXRpb24gPSBjb21wdXRlSW5kZXhMb2NhdGlvbihjb250YWluZXJQYXRoKTsKIAlzY2hlZHVs
ZURvY3VtZW50SW5kZXhpbmcoZG9jdW1lbnQsIGNvbnRhaW5lclBhdGgsIGluZGV4TG9jYXRpb24s
IHBhcnRpY2lwYW50KTsKIH0KIC8qCkBAIC0xMTksMTcgKzExOCwxNyBAQAogCVBhdHRlcm5TZWFy
Y2hKb2Igam9iID0gbmV3IFBhdHRlcm5TZWFyY2hKb2IobnVsbCwgU2VhcmNoRW5naW5lLmdldERl
ZmF1bHRTZWFyY2hQYXJ0aWNpcGFudCgpLCBzY29wZSwgbnVsbCk7CiAJSW5kZXhbXSBzZWxlY3Rl
ZEluZGV4ZXMgPSBqb2IuZ2V0SW5kZXhlcyhudWxsKTsKIAlmb3IgKGludCBpID0gMCwgbCA9IHNl
bGVjdGVkSW5kZXhlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKLQkJU3RyaW5nIHBhdGggPSBzZWxl
Y3RlZEluZGV4ZXNbaV0uZ2V0SW5kZXhGaWxlKCkuZ2V0QWJzb2x1dGVQYXRoKCk7Ci0JCWtub3du
UGF0aHMuYWRkKHBhdGgpOworCQlJbmRleExvY2F0aW9uIEluZGV4TG9jYXRpb24gPSBzZWxlY3Rl
ZEluZGV4ZXNbaV0uZ2V0SW5kZXhMb2NhdGlvbigpOworCQlrbm93blBhdGhzLmFkZChJbmRleExv
Y2F0aW9uKTsKIAl9CiAKIAlpZiAodGhpcy5pbmRleFN0YXRlcyAhPSBudWxsKSB7CiAJCU9iamVj
dFtdIGtleXMgPSB0aGlzLmluZGV4U3RhdGVzLmtleVRhYmxlOwotCQlJUGF0aFtdIGxvY2F0aW9u
cyA9IG5ldyBJUGF0aFt0aGlzLmluZGV4U3RhdGVzLmVsZW1lbnRTaXplXTsKKwkJSW5kZXhMb2Nh
dGlvbltdIGxvY2F0aW9ucyA9IG5ldyBJbmRleExvY2F0aW9uW3RoaXMuaW5kZXhTdGF0ZXMuZWxl
bWVudFNpemVdOwogCQlpbnQgY291bnQgPSAwOwogCQlmb3IgKGludCBpID0gMCwgbCA9IGtleXMu
bGVuZ3RoOyBpIDwgbDsgaSsrKSB7Ci0JCQlJUGF0aCBrZXkgPSAoSVBhdGgpIGtleXNbaV07Ci0J
CQlpZiAoa2V5ICE9IG51bGwgJiYgIWtub3duUGF0aHMuaW5jbHVkZXMoa2V5LnRvT1NTdHJpbmco
KSkpCisJCQlJbmRleExvY2F0aW9uIGtleSA9IChJbmRleExvY2F0aW9uKSBrZXlzW2ldOworCQkJ
aWYgKGtleSAhPSBudWxsICYmICFrbm93blBhdGhzLmluY2x1ZGVzKGtleSkpCiAJCQkJbG9jYXRp
b25zW2NvdW50KytdID0ga2V5OwogCQl9CiAJCWlmIChjb3VudCA+IDApCkBAIC0xMzcsOCArMTM2
LDggQEAKIAl9CiAJZGVsZXRlSW5kZXhGaWxlcyhrbm93blBhdGhzKTsKIH0KLXB1YmxpYyBzeW5j
aHJvbml6ZWQgSVBhdGggY29tcHV0ZUluZGV4TG9jYXRpb24oSVBhdGggY29udGFpbmVyUGF0aCkg
ewotCUlQYXRoIGluZGV4TG9jYXRpb24gPSAoSVBhdGgpIHRoaXMuaW5kZXhMb2NhdGlvbnMuZ2V0
KGNvbnRhaW5lclBhdGgpOworcHVibGljIHN5bmNocm9uaXplZCBJbmRleExvY2F0aW9uIGNvbXB1
dGVJbmRleExvY2F0aW9uKElQYXRoIGNvbnRhaW5lclBhdGgpIHsKKwlJbmRleExvY2F0aW9uIGlu
ZGV4TG9jYXRpb24gPSAoSW5kZXhMb2NhdGlvbikgdGhpcy5pbmRleExvY2F0aW9ucy5nZXQoY29u
dGFpbmVyUGF0aCk7CiAJaWYgKGluZGV4TG9jYXRpb24gPT0gbnVsbCkgewogCQlTdHJpbmcgcGF0
aFN0cmluZyA9IGNvbnRhaW5lclBhdGgudG9PU1N0cmluZygpOwogCQlDUkMzMiBjaGVja3N1bUNh
bGN1bGF0b3IgPSBuZXcgQ1JDMzIoKTsKQEAgLTE0Nyw3ICsxNDYsNyBAQAogCQlpZiAoVkVSQk9T
RSkKIAkJCVV0aWwudmVyYm9zZSgiLT4gaW5kZXggbmFtZSBmb3IgIiArIHBhdGhTdHJpbmcgKyAi
IGlzICIgKyBmaWxlTmFtZSk7IC8vJE5PTi1OTFMtMSQgLy8kTk9OLU5MUy0yJAogCQkvLyB0byBz
aGFyZSB0aGUgaW5kZXhMb2NhdGlvbiBiZXR3ZWVuIHRoZSBpbmRleExvY2F0aW9ucyBhbmQgaW5k
ZXhTdGF0ZXMgdGFibGVzLCBnZXQgdGhlIGtleSBmcm9tIHRoZSBpbmRleFN0YXRlcyB0YWJsZQot
CQlpbmRleExvY2F0aW9uID0gKElQYXRoKSBnZXRJbmRleFN0YXRlcygpLmdldEtleShnZXRKYXZh
UGx1Z2luV29ya2luZ0xvY2F0aW9uKCkuYXBwZW5kKGZpbGVOYW1lKSk7CisJCWluZGV4TG9jYXRp
b24gPSAoSW5kZXhMb2NhdGlvbikgZ2V0SW5kZXhTdGF0ZXMoKS5nZXRLZXkobmV3IEZpbGVJbmRl
eExvY2F0aW9uKG5ldyBGaWxlKGdldFNhdmVkSW5kZXhlc0RpcmVjdG9yeSgpLCBmaWxlTmFtZSkp
KTsKIAkJdGhpcy5pbmRleExvY2F0aW9ucy5wdXQoY29udGFpbmVyUGF0aCwgaW5kZXhMb2NhdGlv
bik7CiAJfQogCXJldHVybiBpbmRleExvY2F0aW9uOwpAQCAtMTY0LDcgKzE2Myw3IEBACiAKIAlm
b3IgKGludCBpID0gMCwgbCA9IGluZGV4ZXNGaWxlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKIAkJ
U3RyaW5nIGZpbGVOYW1lID0gaW5kZXhlc0ZpbGVzW2ldLmdldEFic29sdXRlUGF0aCgpOwotCQlp
ZiAocGF0aHNUb0tlZXAgIT0gbnVsbCAmJiBwYXRoc1RvS2VlcC5pbmNsdWRlcyhmaWxlTmFtZSkp
IGNvbnRpbnVlOworCQlpZiAocGF0aHNUb0tlZXAgIT0gbnVsbCAmJiBwYXRoc1RvS2VlcC5pbmNs
dWRlcyhuZXcgRmlsZUluZGV4TG9jYXRpb24oaW5kZXhlc0ZpbGVzW2ldKSkpIGNvbnRpbnVlOwog
CQlTdHJpbmcgc3VmZml4ID0gIi5pbmRleCI7IC8vJE5PTi1OTFMtMSQKIAkJaWYgKGZpbGVOYW1l
LnJlZ2lvbk1hdGNoZXModHJ1ZSwgZmlsZU5hbWUubGVuZ3RoKCkgLSBzdWZmaXgubGVuZ3RoKCks
IHN1ZmZpeCwgMCwgc3VmZml4Lmxlbmd0aCgpKSkgewogCQkJaWYgKFZFUkJPU0UgfHwgREVCVUcp
CkBAIC0xNzYsNyArMTc1LDcgQEAKIC8qCiAgKiBDcmVhdGVzIGFuIGVtcHR5IGluZGV4IGF0IHRo
ZSBnaXZlbiBsb2NhdGlvbiwgZm9yIHRoZSBnaXZlbiBjb250YWluZXIgcGF0aCwgaWYgbm9uZSBl
eGlzdC4KICAqLwotcHVibGljIHN5bmNocm9uaXplZCB2b2lkIGVuc3VyZUluZGV4RXhpc3RzKElQ
YXRoIGluZGV4TG9jYXRpb24sIElQYXRoIGNvbnRhaW5lclBhdGgpIHsKK3B1YmxpYyBzeW5jaHJv
bml6ZWQgdm9pZCBlbnN1cmVJbmRleEV4aXN0cyhJbmRleExvY2F0aW9uIGluZGV4TG9jYXRpb24s
IElQYXRoIGNvbnRhaW5lclBhdGgpIHsKIAlTaW1wbGVMb29rdXBUYWJsZSBzdGF0ZXMgPSBnZXRJ
bmRleFN0YXRlcygpOwogCU9iamVjdCBzdGF0ZSA9IHN0YXRlcy5nZXQoaW5kZXhMb2NhdGlvbik7
CiAJaWYgKHN0YXRlID09IG51bGwpIHsKQEAgLTIxMCw3ICsyMDksNyBAQAogICogQHBhcmFtIGlu
ZGV4TG9jYXRpb24gVGhlIHBhdGggb2YgdGhlIGluZGV4IGZpbGUKICAqIEByZXR1cm4gVGhlIGNv
cnJlc3BvbmRpbmcgaW5kZXggb3IgPGNvZGU+bnVsbDwvY29kZT4gaWYgbm90IGZvdW5kCiAgKi8K
LXB1YmxpYyBzeW5jaHJvbml6ZWQgSW5kZXggZ2V0SW5kZXgoSVBhdGggaW5kZXhMb2NhdGlvbikg
eworcHVibGljIHN5bmNocm9uaXplZCBJbmRleCBnZXRJbmRleChJbmRleExvY2F0aW9uIGluZGV4
TG9jYXRpb24pIHsKIAlyZXR1cm4gKEluZGV4KSB0aGlzLmluZGV4ZXMuZ2V0KGluZGV4TG9jYXRp
b24pOyAvLyBpcyBudWxsIGlmIHVua25vd24sIGNhbGwgaWYgdGhlIGNvbnRhaW5lclBhdGggbXVz
dCBiZSBjb21wdXRlZAogfQogLyoqCkBAIC0yMjIsNyArMjIxLDcgQEAKICAqIFdhcm5pbmc6IERv
ZXMgbm90IGNoZWNrIHdoZXRoZXIgaW5kZXggaXMgY29uc2lzdGVudCAobm90IGJlaW5nIHVzZWQp
CiAgKi8KIHB1YmxpYyBzeW5jaHJvbml6ZWQgSW5kZXggZ2V0SW5kZXgoSVBhdGggY29udGFpbmVy
UGF0aCwgYm9vbGVhbiByZXVzZUV4aXN0aW5nRmlsZSwgYm9vbGVhbiBjcmVhdGVJZk1pc3Npbmcp
IHsKLQlJUGF0aCBpbmRleExvY2F0aW9uID0gY29tcHV0ZUluZGV4TG9jYXRpb24oY29udGFpbmVy
UGF0aCk7CisJSW5kZXhMb2NhdGlvbiBpbmRleExvY2F0aW9uID0gY29tcHV0ZUluZGV4TG9jYXRp
b24oY29udGFpbmVyUGF0aCk7CiAJcmV0dXJuIGdldEluZGV4KGNvbnRhaW5lclBhdGgsIGluZGV4
TG9jYXRpb24sIHJldXNlRXhpc3RpbmdGaWxlLCBjcmVhdGVJZk1pc3NpbmcpOwogfQogLyoqCkBA
IC0yMzMsNyArMjMyLDcgQEAKICAqCiAgKiBXYXJuaW5nOiBEb2VzIG5vdCBjaGVjayB3aGV0aGVy
IGluZGV4IGlzIGNvbnNpc3RlbnQgKG5vdCBiZWluZyB1c2VkKQogICovCi1wdWJsaWMgc3luY2hy
b25pemVkIEluZGV4IGdldEluZGV4KElQYXRoIGNvbnRhaW5lclBhdGgsIElQYXRoIGluZGV4TG9j
YXRpb24sIGJvb2xlYW4gcmV1c2VFeGlzdGluZ0ZpbGUsIGJvb2xlYW4gY3JlYXRlSWZNaXNzaW5n
KSB7CitwdWJsaWMgc3luY2hyb25pemVkIEluZGV4IGdldEluZGV4KElQYXRoIGNvbnRhaW5lclBh
dGgsIEluZGV4TG9jYXRpb24gaW5kZXhMb2NhdGlvbiwgYm9vbGVhbiByZXVzZUV4aXN0aW5nRmls
ZSwgYm9vbGVhbiBjcmVhdGVJZk1pc3NpbmcpIHsKIAkvLyBQYXRoIGlzIGFscmVhZHkgY2Fub25p
Y2FsIHBlciBjb25zdHJ1Y3Rpb24KIAlJbmRleCBpbmRleCA9IGdldEluZGV4KGluZGV4TG9jYXRp
b24pOwogCWlmIChpbmRleCA9PSBudWxsKSB7CkBAIC0yNDgsMTkgKzI0NywxNyBAQAogCiAJCS8v
IGluZGV4IGlzbid0IGNhY2hlZCwgY29uc2lkZXIgcmV1c2luZyBhbiBleGlzdGluZyBpbmRleCBm
aWxlCiAJCVN0cmluZyBjb250YWluZXJQYXRoU3RyaW5nID0gY29udGFpbmVyUGF0aC5nZXREZXZp
Y2UoKSA9PSBudWxsID8gY29udGFpbmVyUGF0aC50b1N0cmluZygpIDogY29udGFpbmVyUGF0aC50
b09TU3RyaW5nKCk7Ci0JCVN0cmluZyBpbmRleExvY2F0aW9uU3RyaW5nID0gaW5kZXhMb2NhdGlv
bi50b09TU3RyaW5nKCk7CiAJCWlmIChyZXVzZUV4aXN0aW5nRmlsZSkgewotCQkJRmlsZSBpbmRl
eEZpbGUgPSBuZXcgRmlsZShpbmRleExvY2F0aW9uU3RyaW5nKTsKLQkJCWlmIChpbmRleEZpbGUu
ZXhpc3RzKCkpIHsgLy8gY2hlY2sgYmVmb3JlIGNyZWF0aW5nIGluZGV4IHNvIGFzIHRvIGF2b2lk
IGNyZWF0aW5nIGEgbmV3IGVtcHR5IGluZGV4IGlmIGZpbGUgaXMgbWlzc2luZworCQkJaWYgKGlu
ZGV4TG9jYXRpb24uZXhpc3RzKCkpIHsgLy8gY2hlY2sgYmVmb3JlIGNyZWF0aW5nIGluZGV4IHNv
IGFzIHRvIGF2b2lkIGNyZWF0aW5nIGEgbmV3IGVtcHR5IGluZGV4IGlmIGZpbGUgaXMgbWlzc2lu
ZwogCQkJCXRyeSB7Ci0JCQkJCWluZGV4ID0gbmV3IEluZGV4KGluZGV4TG9jYXRpb25TdHJpbmcs
IGNvbnRhaW5lclBhdGhTdHJpbmcsIHRydWUgLypyZXVzZSBpbmRleCBmaWxlKi8pOworCQkJCQlp
bmRleCA9IG5ldyBJbmRleChpbmRleExvY2F0aW9uLCBjb250YWluZXJQYXRoU3RyaW5nLCB0cnVl
IC8qcmV1c2UgaW5kZXggZmlsZSovKTsKIAkJCQkJdGhpcy5pbmRleGVzLnB1dChpbmRleExvY2F0
aW9uLCBpbmRleCk7CiAJCQkJCXJldHVybiBpbmRleDsKIAkJCQl9IGNhdGNoIChJT0V4Y2VwdGlv
biBlKSB7CiAJCQkJCS8vIGZhaWxlZCB0byByZWFkIHRoZSBleGlzdGluZyBmaWxlIG9yIGl0cyBu
byBsb25nZXIgY29tcGF0aWJsZQogCQkJCQlpZiAoY3VycmVudEluZGV4U3RhdGUgIT0gUkVCVUlM
RElOR19TVEFURSAmJiBjdXJyZW50SW5kZXhTdGF0ZSAhPSBSRVVTRV9TVEFURSkgeyAvLyByZWJ1
aWxkIGluZGV4IGlmIGV4aXN0aW5nIGZpbGUgaXMgY29ycnVwdCwgdW5sZXNzIHRoZSBpbmRleCBp
cyBhbHJlYWR5IGJlaW5nIHJlYnVpbHQKIAkJCQkJCWlmIChWRVJCT1NFKQotCQkJCQkJCVV0aWwu
dmVyYm9zZSgiLT4gY2Fubm90IHJldXNlIGV4aXN0aW5nIGluZGV4OiAiK2luZGV4TG9jYXRpb25T
dHJpbmcrIiBwYXRoOiAiK2NvbnRhaW5lclBhdGhTdHJpbmcpOyAvLyROT04tTkxTLTEkIC8vJE5P
Ti1OTFMtMiQKKwkJCQkJCQlVdGlsLnZlcmJvc2UoIi0+IGNhbm5vdCByZXVzZSBleGlzdGluZyBp
bmRleDogIitpbmRleExvY2F0aW9uKyIgcGF0aDogIitjb250YWluZXJQYXRoU3RyaW5nKTsgLy8k
Tk9OLU5MUy0xJCAvLyROT04tTkxTLTIkCiAJCQkJCQlyZWJ1aWxkSW5kZXgoaW5kZXhMb2NhdGlv
biwgY29udGFpbmVyUGF0aCk7CiAJCQkJCQlyZXR1cm4gbnVsbDsKIAkJCQkJfQpAQCAtMjg1LDEz
ICsyODIsMTMgQEAKIAkJaWYgKGNyZWF0ZUlmTWlzc2luZykgewogCQkJdHJ5IHsKIAkJCQlpZiAo
VkVSQk9TRSkKLQkJCQkJVXRpbC52ZXJib3NlKCItPiBjcmVhdGUgZW1wdHkgaW5kZXg6ICIraW5k
ZXhMb2NhdGlvblN0cmluZysiIHBhdGg6ICIrY29udGFpbmVyUGF0aFN0cmluZyk7IC8vJE5PTi1O
TFMtMSQgLy8kTk9OLU5MUy0yJAotCQkJCWluZGV4ID0gbmV3IEluZGV4KGluZGV4TG9jYXRpb25T
dHJpbmcsIGNvbnRhaW5lclBhdGhTdHJpbmcsIGZhbHNlIC8qZG8gbm90IHJldXNlIGluZGV4IGZp
bGUqLyk7CisJCQkJCVV0aWwudmVyYm9zZSgiLT4gY3JlYXRlIGVtcHR5IGluZGV4OiAiK2luZGV4
TG9jYXRpb24rIiBwYXRoOiAiK2NvbnRhaW5lclBhdGhTdHJpbmcpOyAvLyROT04tTkxTLTEkIC8v
JE5PTi1OTFMtMiQKKwkJCQlpbmRleCA9IG5ldyBJbmRleChpbmRleExvY2F0aW9uLCBjb250YWlu
ZXJQYXRoU3RyaW5nLCBmYWxzZSAvKmRvIG5vdCByZXVzZSBpbmRleCBmaWxlKi8pOwogCQkJCXRo
aXMuaW5kZXhlcy5wdXQoaW5kZXhMb2NhdGlvbiwgaW5kZXgpOwogCQkJCXJldHVybiBpbmRleDsK
IAkJCX0gY2F0Y2ggKElPRXhjZXB0aW9uIGUpIHsKIAkJCQlpZiAoVkVSQk9TRSkKLQkJCQkJVXRp
bC52ZXJib3NlKCItPiB1bmFibGUgdG8gY3JlYXRlIGVtcHR5IGluZGV4OiAiK2luZGV4TG9jYXRp
b25TdHJpbmcrIiBwYXRoOiAiK2NvbnRhaW5lclBhdGhTdHJpbmcpOyAvLyROT04tTkxTLTEkIC8v
JE5PTi1OTFMtMiQKKwkJCQkJVXRpbC52ZXJib3NlKCItPiB1bmFibGUgdG8gY3JlYXRlIGVtcHR5
IGluZGV4OiAiK2luZGV4TG9jYXRpb24rIiBwYXRoOiAiK2NvbnRhaW5lclBhdGhTdHJpbmcpOyAv
LyROT04tTkxTLTEkIC8vJE5PTi1OTFMtMiQKIAkJCQkvLyBUaGUgZmlsZSBjb3VsZCBub3QgYmUg
Y3JlYXRlZC4gUG9zc2libGUgcmVhc29uOiB0aGUgcHJvamVjdCBoYXMgYmVlbiBkZWxldGVkLgog
CQkJCXJldHVybiBudWxsOwogCQkJfQpAQCAtMzA3LDcgKzMwNCw3IEBACiAgKiBAcGFyYW0gbG9j
YXRpb25zIFRoZSBsaXN0IG9mIG9mIHRoZSBpbmRleCBmaWxlcyBwYXRoCiAgKiBAcmV0dXJuIFRo
ZSBjb3JyZXNwb25kaW5nIGluZGV4ZXMgbGlzdC4KICAqLwotcHVibGljIEluZGV4W10gZ2V0SW5k
ZXhlcyhJUGF0aFtdIGxvY2F0aW9ucywgSVByb2dyZXNzTW9uaXRvciBwcm9ncmVzc01vbml0b3Ip
IHsKK3B1YmxpYyBJbmRleFtdIGdldEluZGV4ZXMoSW5kZXhMb2NhdGlvbltdIGxvY2F0aW9ucywg
SVByb2dyZXNzTW9uaXRvciBwcm9ncmVzc01vbml0b3IpIHsKIAkvLyBhY3F1aXJlIHRoZSBpbi1t
ZW1vcnkgaW5kZXhlcyBvbiB0aGUgZmx5CiAJaW50IGxlbmd0aCA9IGxvY2F0aW9ucy5sZW5ndGg7
CiAJSW5kZXhbXSBsb2NhdGVkSW5kZXhlcyA9IG5ldyBJbmRleFtsZW5ndGhdOwpAQCAtMzIwLDcg
KzMxNyw3IEBACiAJCQl0aHJvdyBuZXcgT3BlcmF0aW9uQ2FuY2VsZWRFeGNlcHRpb24oKTsKIAkJ
fQogCQkvLyBtYXkgdHJpZ2dlciBzb21lIGluZGV4IHJlY3JlYXRpb24gd29yawotCQlJUGF0aCBp
bmRleExvY2F0aW9uID0gbG9jYXRpb25zW2ldOworCQlJbmRleExvY2F0aW9uIGluZGV4TG9jYXRp
b24gPSBsb2NhdGlvbnNbaV07CiAJCUluZGV4IGluZGV4ID0gZ2V0SW5kZXgoaW5kZXhMb2NhdGlv
bik7CiAJCWlmIChpbmRleCA9PSBudWxsKSB7CiAJCQkvLyBvbmx5IG5lZWQgY29udGFpbmVyUGF0
aCBpZiB0aGUgaW5kZXggbXVzdCBiZSBidWlsdApAQCAtMzQyLDE4ICszMzksMTYgQEAKIAkJCQkJ
aW5kZXggPSBudWxsOwogCQkJCX0KIAkJCX0gZWxzZSB7Ci0JCQkJaWYgKCFnZXRKYXZhUGx1Z2lu
V29ya2luZ0xvY2F0aW9uKCkuaXNQcmVmaXhPZihpbmRleExvY2F0aW9uKSkgeyAvLyB0aGUgaW5k
ZXggYmVsb25ncyB0byBub24tamR0IHNlYXJjaCBwYXJ0aWNpcGFudAotCQkJCQlpZiAoaW5kZXhM
b2NhdGlvbi50b0ZpbGUoKS5leGlzdHMoKSkgeyAKLQkJCQkJCXRyeSB7Ci0JCQkJCQkJSVBhdGgg
Y29udGFpbmVyID0gZ2V0UGFydGljaXBhbnRzQ29udGFpbmVyKGluZGV4TG9jYXRpb24pOwotCQkJ
CQkJCWlmIChjb250YWluZXIgIT0gbnVsbCkgewotCQkJCQkJCQlpbmRleCA9IG5ldyBJbmRleChp
bmRleExvY2F0aW9uLnRvT1NTdHJpbmcoKSwgY29udGFpbmVyLnRvT1NTdHJpbmcoKSwgdHJ1ZSAv
KnJldXNlIGluZGV4IGZpbGUqLyk7Ci0JCQkJCQkJCXRoaXMuaW5kZXhlcy5wdXQoaW5kZXhMb2Nh
dGlvbiwgaW5kZXgpOwotCQkJCQkJCX0KLQkJCQkJCX0gY2F0Y2ggKElPRXhjZXB0aW9uIGUpIHsK
LQkJCQkJCQkvLyBpZ25vcmUKKwkJCQlpZiAoaW5kZXhMb2NhdGlvbi5pc1BhcnRpY2lwYW50SW5k
ZXgoKSAmJiBpbmRleExvY2F0aW9uLmV4aXN0cygpKSB7IC8vIHRoZSBpbmRleCBiZWxvbmdzIHRv
IG5vbi1qZHQgc2VhcmNoIHBhcnRpY2lwYW50CisJCQkJCXRyeSB7CisJCQkJCQlJUGF0aCBjb250
YWluZXIgPSBnZXRQYXJ0aWNpcGFudHNDb250YWluZXIoaW5kZXhMb2NhdGlvbik7CisJCQkJCQlp
ZiAoY29udGFpbmVyICE9IG51bGwpIHsKKwkJCQkJCQlpbmRleCA9IG5ldyBJbmRleChpbmRleExv
Y2F0aW9uLCBjb250YWluZXIudG9PU1N0cmluZygpLCB0cnVlIC8qcmV1c2UgaW5kZXggZmlsZSov
KTsKKwkJCQkJCQl0aGlzLmluZGV4ZXMucHV0KGluZGV4TG9jYXRpb24sIGluZGV4KTsKIAkJCQkJ
CX0KLQkJCQkJfSAKKwkJCQkJfSBjYXRjaCAoSU9FeGNlcHRpb24gZSkgeworCQkJCQkJLy8gaWdu
b3JlCisJCQkJCX0KIAkJCQl9CiAJCQl9CiAJCX0KQEAgLTM3MCw3ICszNjUsNyBAQAogCXJldHVy
biBsb2NhdGVkSW5kZXhlczsKIH0KIHB1YmxpYyBzeW5jaHJvbml6ZWQgSW5kZXggZ2V0SW5kZXhG
b3JVcGRhdGUoSVBhdGggY29udGFpbmVyUGF0aCwgYm9vbGVhbiByZXVzZUV4aXN0aW5nRmlsZSwg
Ym9vbGVhbiBjcmVhdGVJZk1pc3NpbmcpIHsKLQlJUGF0aCBpbmRleExvY2F0aW9uID0gY29tcHV0
ZUluZGV4TG9jYXRpb24oY29udGFpbmVyUGF0aCk7CisJSW5kZXhMb2NhdGlvbiBpbmRleExvY2F0
aW9uID0gY29tcHV0ZUluZGV4TG9jYXRpb24oY29udGFpbmVyUGF0aCk7CiAJaWYgKGdldEluZGV4
U3RhdGVzKCkuZ2V0KGluZGV4TG9jYXRpb24pID09IFJFQlVJTERJTkdfU1RBVEUpCiAJCXJldHVy
biBnZXRJbmRleChjb250YWluZXJQYXRoLCBpbmRleExvY2F0aW9uLCByZXVzZUV4aXN0aW5nRmls
ZSwgY3JlYXRlSWZNaXNzaW5nKTsKIApAQCAtMzgwLDEzICszNzUsMTMgQEAKIAlpZiAodGhpcy5p
bmRleFN0YXRlcyAhPSBudWxsKSByZXR1cm4gdGhpcy5pbmRleFN0YXRlczsKIAogCXRoaXMuaW5k
ZXhTdGF0ZXMgPSBuZXcgU2ltcGxlTG9va3VwVGFibGUoKTsKLQlJUGF0aCBpbmRleGVzRGlyZWN0
b3J5UGF0aCA9IGdldEphdmFQbHVnaW5Xb3JraW5nTG9jYXRpb24oKTsKLQljaGFyW11bXSBzYXZl
ZE5hbWVzID0gcmVhZEluZGV4U3RhdGUoaW5kZXhlc0RpcmVjdG9yeVBhdGgudG9PU1N0cmluZygp
KTsKKwlGaWxlIGluZGV4ZXNEaXJlY3RvcnlQYXRoID0gZ2V0U2F2ZWRJbmRleGVzRGlyZWN0b3J5
KCk7CisJY2hhcltdW10gc2F2ZWROYW1lcyA9IHJlYWRJbmRleFN0YXRlKGdldEphdmFQbHVnaW5X
b3JraW5nTG9jYXRpb24oKS50b09TU3RyaW5nKCkpOwogCWlmIChzYXZlZE5hbWVzICE9IG51bGwp
IHsKIAkJZm9yIChpbnQgaSA9IDEsIGwgPSBzYXZlZE5hbWVzLmxlbmd0aDsgaSA8IGw7IGkrKykg
eyAvLyBmaXJzdCBuYW1lIGlzIHNhdmVkIHNpZ25hdHVyZSwgc2VlIHJlYWRJbmRleFN0YXRlKCkK
IAkJCWNoYXJbXSBzYXZlZE5hbWUgPSBzYXZlZE5hbWVzW2ldOwogCQkJaWYgKHNhdmVkTmFtZS5s
ZW5ndGggPiAwKSB7Ci0JCQkJSVBhdGggaW5kZXhMb2NhdGlvbiA9IGluZGV4ZXNEaXJlY3RvcnlQ
YXRoLmFwcGVuZChuZXcgU3RyaW5nKHNhdmVkTmFtZSkpOyAvLyBzaGFyZXMgaW5kZXhlc0RpcmVj
dG9yeVBhdGgncyBzZWdtZW50cworCQkJCUluZGV4TG9jYXRpb24gaW5kZXhMb2NhdGlvbiA9IG5l
dyBGaWxlSW5kZXhMb2NhdGlvbihuZXcgRmlsZShpbmRleGVzRGlyZWN0b3J5UGF0aCwgU3RyaW5n
LnZhbHVlT2Yoc2F2ZWROYW1lKSkpOyAvLyBzaGFyZXMgaW5kZXhlc0RpcmVjdG9yeVBhdGgncyBz
ZWdtZW50cwogCQkJCWlmIChWRVJCT1NFKQogCQkJCQlVdGlsLnZlcmJvc2UoIlJlYWRpbmcgc2F2
ZWQgaW5kZXggZmlsZSAiICsgaW5kZXhMb2NhdGlvbik7IC8vJE5PTi1OTFMtMSQKIAkJCQl0aGlz
LmluZGV4U3RhdGVzLnB1dChpbmRleExvY2F0aW9uLCBTQVZFRF9TVEFURSk7CkBAIC00MDEsNyAr
Mzk2LDcgQEAKIAl9CiAJcmV0dXJuIHRoaXMuaW5kZXhTdGF0ZXM7CiB9Ci1wcml2YXRlIElQYXRo
IGdldFBhcnRpY2lwYW50c0NvbnRhaW5lcihJUGF0aCBpbmRleExvY2F0aW9uKSB7Citwcml2YXRl
IElQYXRoIGdldFBhcnRpY2lwYW50c0NvbnRhaW5lcihJbmRleExvY2F0aW9uIGluZGV4TG9jYXRp
b24pIHsKIAlpZiAodGhpcy5wYXJ0aWNpcGFudHNDb250YWluZXJzID09IG51bGwpIHsKIAkJcmVh
ZFBhcnRpY2lwYW50c0luZGV4TmFtZXNGaWxlKCk7CiAJfQpAQCAtNTAyLDE1ICs0OTcsNyBAQAog
ICovCiBwdWJsaWMgdm9pZCBpbmRleExpYnJhcnkoSVBhdGggcGF0aCwgSVByb2plY3QgcmVxdWVz
dGluZ1Byb2plY3QsIFVSTCBpbmRleFVSTCkgewogCS8vIHJlcXVlc3RpbmdQcm9qZWN0IGlzIG5v
IGxvbmdlciB1c2VkIHRvIGNhbmNlbCBqb2JzIGJ1dCBsZWF2ZSBpdCBoZXJlIGp1c3QgaW4gY2Fz
ZQotCUlQYXRoIGluZGV4RmlsZSA9IG51bGw7IAotCWlmIChpbmRleFVSTCAhPSBudWxsKSAgewot
CQl0cnkgewotCQkJaW5kZXhGaWxlID0gbmV3IFBhdGgoRmlsZUxvY2F0b3IucmVzb2x2ZShpbmRl
eFVSTCkuZ2V0UGF0aCgpKTsKLQkJfSBjYXRjaCAoSU9FeGNlcHRpb24gZSkgewotCQkJaWYgKFZF
UkJPU0UpCi0JCQkJVXRpbC52ZXJib3NlKCItPiBjYW5ub3QgcmVzb2x2ZSB0aGUgdXJsIDogIisg
aW5kZXhVUkwgKyAiIHNwZWNpZmllZCBmb3IgIiArIHBhdGgpOyAvLyROT04tTkxTLTEkIC8vJE5P
Ti1OTFMtMiQKLQkJfQotCX0KKwlJbmRleExvY2F0aW9uIGluZGV4RmlsZSA9IGluZGV4VVJMICE9
IG51bGwgPyBJbmRleExvY2F0aW9uLmNyZWF0ZUluZGV4TG9jYXRpb24oaW5kZXhVUkwpOiBudWxs
OwogCWlmIChKYXZhQ29yZS5nZXRQbHVnaW4oKSA9PSBudWxsKSByZXR1cm47CiAJSW5kZXhSZXF1
ZXN0IHJlcXVlc3QgPSBudWxsOwogCU9iamVjdCB0YXJnZXQgPSBKYXZhTW9kZWwuZ2V0VGFyZ2V0
KHBhdGgsIHRydWUpOwpAQCAtNTI5LDExICs1MTYsMTIgQEAKIAkJcmVxdWVzdChyZXF1ZXN0KTsK
IH0KIAotc3luY2hyb25pemVkIGJvb2xlYW4gYWRkSW5kZXgoSVBhdGggY29udGFpbmVyUGF0aCwg
SVBhdGggaW5kZXhGaWxlKSB7CitzeW5jaHJvbml6ZWQgYm9vbGVhbiBhZGRJbmRleChJUGF0aCBj
b250YWluZXJQYXRoLCBJbmRleExvY2F0aW9uIGluZGV4RmlsZSkgewogCXRoaXMuaW5kZXhTdGF0
ZXMucHV0KGluZGV4RmlsZSwgUkVVU0VfU1RBVEUpOwogCXRoaXMuaW5kZXhMb2NhdGlvbnMucHV0
KGNvbnRhaW5lclBhdGgsIGluZGV4RmlsZSk7CiAJSW5kZXggaW5kZXggPSBnZXRJbmRleChjb250
YWluZXJQYXRoLCBpbmRleEZpbGUsIHRydWUsIGZhbHNlKTsKIAlpZiAoaW5kZXggPT0gbnVsbCkg
eworCQlpbmRleEZpbGUuY2xvc2UoKTsKIAkJdGhpcy5pbmRleExvY2F0aW9ucy5wdXQoY29udGFp
bmVyUGF0aCwgbnVsbCk7CiAJCXJldHVybiBmYWxzZTsKIAl9CkBAIC01NTQsNyArNTQyLDcgQEAK
IAlyZXF1ZXN0KG5ldyBBZGRGb2xkZXJUb0luZGV4KHNvdXJjZUZvbGRlciwgcHJvamVjdCwgaW5j
bHVzaW9uUGF0dGVybnMsIGV4Y2x1c2lvblBhdHRlcm5zLCB0aGlzKSk7CiB9CiBwdWJsaWMgc3lu
Y2hyb25pemVkIHZvaWQgam9iV2FzQ2FuY2VsbGVkKElQYXRoIGNvbnRhaW5lclBhdGgpIHsKLQlJ
UGF0aCBpbmRleExvY2F0aW9uID0gY29tcHV0ZUluZGV4TG9jYXRpb24oY29udGFpbmVyUGF0aCk7
CisJSW5kZXhMb2NhdGlvbiBpbmRleExvY2F0aW9uID0gY29tcHV0ZUluZGV4TG9jYXRpb24oY29u
dGFpbmVyUGF0aCk7CiAJSW5kZXggaW5kZXggPSBnZXRJbmRleChpbmRleExvY2F0aW9uKTsKIAlp
ZiAoaW5kZXggIT0gbnVsbCkgewogCQlpbmRleC5tb25pdG9yID0gbnVsbDsKQEAgLTYwMCw3ICs1
ODgsNyBAQAogCX0KIAlyZXR1cm4gbnVsbDsKIH0KLXByaXZhdGUgdm9pZCByZWJ1aWxkSW5kZXgo
SVBhdGggaW5kZXhMb2NhdGlvbiwgSVBhdGggY29udGFpbmVyUGF0aCkgeworcHJpdmF0ZSB2b2lk
IHJlYnVpbGRJbmRleChJbmRleExvY2F0aW9uIGluZGV4TG9jYXRpb24sIElQYXRoIGNvbnRhaW5l
clBhdGgpIHsKIAlPYmplY3QgdGFyZ2V0ID0gSmF2YU1vZGVsLmdldFRhcmdldChjb250YWluZXJQ
YXRoLCB0cnVlKTsKIAlpZiAodGFyZ2V0ID09IG51bGwpIHJldHVybjsKIApAQCAtNjMzLDEzICs2
MjEsMTMgQEAKIAlTdHJpbmcgY29udGFpbmVyUGF0aFN0cmluZyA9IGNvbnRhaW5lclBhdGguZ2V0
RGV2aWNlKCkgPT0gbnVsbCA/IGNvbnRhaW5lclBhdGgudG9TdHJpbmcoKSA6IGNvbnRhaW5lclBh
dGgudG9PU1N0cmluZygpOwogCXRyeSB7CiAJCS8vIFBhdGggaXMgYWxyZWFkeSBjYW5vbmljYWwK
LQkJSVBhdGggaW5kZXhMb2NhdGlvbiA9IGNvbXB1dGVJbmRleExvY2F0aW9uKGNvbnRhaW5lclBh
dGgpOworCQlJbmRleExvY2F0aW9uIGluZGV4TG9jYXRpb24gPSBjb21wdXRlSW5kZXhMb2NhdGlv
bihjb250YWluZXJQYXRoKTsKIAkJSW5kZXggaW5kZXggPSBnZXRJbmRleChpbmRleExvY2F0aW9u
KTsKIAkJUmVhZFdyaXRlTW9uaXRvciBtb25pdG9yID0gaW5kZXggPT0gbnVsbCA/IG51bGwgOiBp
bmRleC5tb25pdG9yOwogCiAJCWlmIChWRVJCT1NFKQogCQkJVXRpbC52ZXJib3NlKCItPiByZWNy
ZWF0aW5nIGluZGV4OiAiK2luZGV4TG9jYXRpb24rIiBmb3IgcGF0aDogIitjb250YWluZXJQYXRo
U3RyaW5nKTsgLy8kTk9OLU5MUy0xJCAvLyROT04tTkxTLTIkCi0JCWluZGV4ID0gbmV3IEluZGV4
KGluZGV4TG9jYXRpb24udG9PU1N0cmluZygpLCBjb250YWluZXJQYXRoU3RyaW5nLCBmYWxzZSAv
KmRvIG5vdCByZXVzZSBpbmRleCBmaWxlKi8pOworCQlpbmRleCA9IG5ldyBJbmRleChpbmRleExv
Y2F0aW9uLCBjb250YWluZXJQYXRoU3RyaW5nLCBmYWxzZSAvKmRvIG5vdCByZXVzZSBpbmRleCBm
aWxlKi8pOwogCQl0aGlzLmluZGV4ZXMucHV0KGluZGV4TG9jYXRpb24sIGluZGV4KTsKIAkJaW5k
ZXgubW9uaXRvciA9IG1vbml0b3I7CiAJCXJldHVybiBpbmRleDsKQEAgLTY2Niw3ICs2NTQsNyBA
QAogcHVibGljIHN5bmNocm9uaXplZCB2b2lkIHJlbW92ZUluZGV4KElQYXRoIGNvbnRhaW5lclBh
dGgpIHsKIAlpZiAoVkVSQk9TRSB8fCBERUJVRykKIAkJVXRpbC52ZXJib3NlKCJyZW1vdmluZyBp
bmRleCAiICsgY29udGFpbmVyUGF0aCk7IC8vJE5PTi1OTFMtMSQKLQlJUGF0aCBpbmRleExvY2F0
aW9uID0gY29tcHV0ZUluZGV4TG9jYXRpb24oY29udGFpbmVyUGF0aCk7CisJSW5kZXhMb2NhdGlv
biBpbmRleExvY2F0aW9uID0gY29tcHV0ZUluZGV4TG9jYXRpb24oY29udGFpbmVyUGF0aCk7CiAJ
SW5kZXggaW5kZXggPSBnZXRJbmRleChpbmRleExvY2F0aW9uKTsKIAlGaWxlIGluZGV4RmlsZSA9
IG51bGw7CiAJaWYgKGluZGV4ICE9IG51bGwpIHsKQEAgLTY3NCwxMCArNjYyLDExIEBACiAJCWlu
ZGV4RmlsZSA9IGluZGV4LmdldEluZGV4RmlsZSgpOwogCX0KIAlpZiAoaW5kZXhGaWxlID09IG51
bGwpCi0JCWluZGV4RmlsZSA9IG5ldyBGaWxlKGluZGV4TG9jYXRpb24udG9PU1N0cmluZygpKTsg
Ly8gaW5kZXggaXMgbm90IGNhY2hlZCB5ZXQsIGJ1dCBzdGlsbCB3YW50IHRvIGRlbGV0ZSB0aGUg
ZmlsZQorCQlpbmRleEZpbGUgPSBpbmRleExvY2F0aW9uLmdldEluZGV4RmlsZSgpOyAvLyBpbmRl
eCBpcyBub3QgY2FjaGVkIHlldCwgYnV0IHN0aWxsIHdhbnQgdG8gZGVsZXRlIHRoZSBmaWxlCiAJ
aWYgKHRoaXMuaW5kZXhTdGF0ZXMuZ2V0KGluZGV4TG9jYXRpb24pID09IFJFVVNFX1NUQVRFKSB7
CisJCWluZGV4TG9jYXRpb24uY2xvc2UoKTsKIAkJdGhpcy5pbmRleExvY2F0aW9ucy5wdXQoY29u
dGFpbmVyUGF0aCwgbnVsbCk7Ci0JfSBlbHNlIGlmIChpbmRleEZpbGUuZXhpc3RzKCkpIHsKKwl9
IGVsc2UgaWYgKGluZGV4RmlsZSAhPSBudWxsICYmIGluZGV4RmlsZS5leGlzdHMoKSkgewogCQlp
ZiAoREVCVUcpCiAJCQlVdGlsLnZlcmJvc2UoInJlbW92aW5nIGluZGV4IGZpbGUgIiArIGluZGV4
RmlsZSk7IC8vJE5PTi1OTFMtMSQKIAkJaW5kZXhGaWxlLmRlbGV0ZSgpOwpAQCAtNjkzLDI0ICs2
ODIsMjUgQEAKIAkJVXRpbC52ZXJib3NlKCJyZW1vdmluZyBpbmRleCBwYXRoICIgKyBwYXRoKTsg
Ly8kTk9OLU5MUy0xJAogCU9iamVjdFtdIGtleVRhYmxlID0gdGhpcy5pbmRleGVzLmtleVRhYmxl
OwogCU9iamVjdFtdIHZhbHVlVGFibGUgPSB0aGlzLmluZGV4ZXMudmFsdWVUYWJsZTsKLQlJUGF0
aFtdIGxvY2F0aW9ucyA9IG51bGw7CisJSW5kZXhMb2NhdGlvbltdIGxvY2F0aW9ucyA9IG51bGw7
CiAJaW50IG1heCA9IHRoaXMuaW5kZXhlcy5lbGVtZW50U2l6ZTsKIAlpbnQgY291bnQgPSAwOwog
CWZvciAoaW50IGkgPSAwLCBsID0ga2V5VGFibGUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7Ci0JCUlQ
YXRoIGluZGV4TG9jYXRpb24gPSAoSVBhdGgpIGtleVRhYmxlW2ldOworCQlJbmRleExvY2F0aW9u
IGluZGV4TG9jYXRpb24gPSAoSW5kZXhMb2NhdGlvbikga2V5VGFibGVbaV07CiAJCWlmIChpbmRl
eExvY2F0aW9uID09IG51bGwpCiAJCQljb250aW51ZTsKLQkJaWYgKHBhdGguaXNQcmVmaXhPZihp
bmRleExvY2F0aW9uKSkgeworCQlpZiAoaW5kZXhMb2NhdGlvbi5zdGFydHNXaXRoKHBhdGgpKSB7
CiAJCQlJbmRleCBpbmRleCA9IChJbmRleCkgdmFsdWVUYWJsZVtpXTsKIAkJCWluZGV4Lm1vbml0
b3IgPSBudWxsOwogCQkJaWYgKGxvY2F0aW9ucyA9PSBudWxsKQotCQkJCWxvY2F0aW9ucyA9IG5l
dyBJUGF0aFttYXhdOworCQkJCWxvY2F0aW9ucyA9IG5ldyBJbmRleExvY2F0aW9uW21heF07CiAJ
CQlsb2NhdGlvbnNbY291bnQrK10gPSBpbmRleExvY2F0aW9uOwotCQkJRmlsZSBpbmRleEZpbGUg
PSBpbmRleC5nZXRJbmRleEZpbGUoKTsKLQkJCWlmIChpbmRleEZpbGUuZXhpc3RzKCkpIHsKKwkJ
CWlmICh0aGlzLmluZGV4U3RhdGVzLmdldChpbmRleExvY2F0aW9uKSA9PSBSRVVTRV9TVEFURSkg
eworCQkJCWluZGV4TG9jYXRpb24uY2xvc2UoKTsKKwkJCX0gZWxzZSB7CiAJCQkJaWYgKERFQlVH
KQotCQkJCQlVdGlsLnZlcmJvc2UoInJlbW92aW5nIGluZGV4IGZpbGUgIiArIGluZGV4RmlsZSk7
IC8vJE5PTi1OTFMtMSQKLQkJCQlpbmRleEZpbGUuZGVsZXRlKCk7CisJCQkJCVV0aWwudmVyYm9z
ZSgicmVtb3ZpbmcgaW5kZXggZmlsZSAiICsgaW5kZXhMb2NhdGlvbik7IC8vJE5PTi1OTFMtMSQK
KwkJCQlpbmRleExvY2F0aW9uLmRlbGV0ZSgpOwogCQkJfQogCQl9IGVsc2UgewogCQkJbWF4LS07
CkBAIC03ODYsNyArNzc2LDcgQEAKIAlTdHJpbmcgY29udGFpbmVyUGF0aFN0cmluZyA9IGNvbnRh
aW5lclBhdGguZ2V0RGV2aWNlKCkgPT0gbnVsbCA/IGNvbnRhaW5lclBhdGgudG9TdHJpbmcoKSA6
IGNvbnRhaW5lclBhdGgudG9PU1N0cmluZygpOwogCXRyeSB7CiAJCS8vIFBhdGggaXMgYWxyZWFk
eSBjYW5vbmljYWwKLQkJSVBhdGggaW5kZXhMb2NhdGlvbiA9IGNvbXB1dGVJbmRleExvY2F0aW9u
KGNvbnRhaW5lclBhdGgpOworCQlJbmRleExvY2F0aW9uIGluZGV4TG9jYXRpb24gPSBjb21wdXRl
SW5kZXhMb2NhdGlvbihjb250YWluZXJQYXRoKTsKIAkJSW5kZXggaW5kZXggPSBnZXRJbmRleChp
bmRleExvY2F0aW9uKTsKIAkJaWYgKFZFUkJPU0UpIHsKIAkJCVV0aWwudmVyYm9zZSgiLT4gcmVz
ZXRpbmcgaW5kZXg6ICIraW5kZXhMb2NhdGlvbisiIGZvciBwYXRoOiAiK2NvbnRhaW5lclBhdGhT
dHJpbmcpOyAvLyROT04tTkxTLTEkIC8vJE5PTi1OTFMtMiQKQEAgLTgxMCw3ICs4MDAsNyBAQAog
CS8vIG11c3QgaGF2ZSBwZXJtaXNzaW9uIHRvIHdyaXRlIGZyb20gdGhlIHdyaXRlIG1vbml0b3IK
IAlpZiAoaW5kZXguaGFzQ2hhbmdlZCgpKSB7CiAJCWlmIChWRVJCT1NFKQotCQkJVXRpbC52ZXJi
b3NlKCItPiBzYXZpbmcgaW5kZXggIiArIGluZGV4LmdldEluZGV4RmlsZSgpKTsgLy8kTk9OLU5M
Uy0xJAorCQkJVXRpbC52ZXJib3NlKCItPiBzYXZpbmcgaW5kZXggIiArIGluZGV4LmdldEluZGV4
TG9jYXRpb24oKSk7IC8vJE5PTi1OTFMtMSQKIAkJaW5kZXguc2F2ZSgpOwogCX0KIAlzeW5jaHJv
bml6ZWQgKHRoaXMpIHsKQEAgLTgyMiw3ICs4MTIsNyBAQAogCQkJCQlpZiAoKChJbmRleFJlcXVl
c3QpIGpvYikuY29udGFpbmVyUGF0aC5lcXVhbHMoY29udGFpbmVyUGF0aCkpIHJldHVybjsKIAkJ
CX0KIAkJfQotCQlJUGF0aCBpbmRleExvY2F0aW9uID0gY29tcHV0ZUluZGV4TG9jYXRpb24oY29u
dGFpbmVyUGF0aCk7CisJCUluZGV4TG9jYXRpb24gaW5kZXhMb2NhdGlvbiA9IGNvbXB1dGVJbmRl
eExvY2F0aW9uKGNvbnRhaW5lclBhdGgpOwogCQl1cGRhdGVJbmRleFN0YXRlKGluZGV4TG9jYXRp
b24sIFNBVkVEX1NUQVRFKTsKIAl9CiB9CkBAIC04NzcsNyArODY3LDcgQEAKIAl9CiAJdGhpcy5u
ZWVkVG9TYXZlID0gIWFsbFNhdmVkOwogfQotcHVibGljIHZvaWQgc2NoZWR1bGVEb2N1bWVudElu
ZGV4aW5nKGZpbmFsIFNlYXJjaERvY3VtZW50IHNlYXJjaERvY3VtZW50LCBJUGF0aCBjb250YWlu
ZXIsIGZpbmFsIElQYXRoIGluZGV4TG9jYXRpb24sIGZpbmFsIFNlYXJjaFBhcnRpY2lwYW50IHNl
YXJjaFBhcnRpY2lwYW50KSB7CitwdWJsaWMgdm9pZCBzY2hlZHVsZURvY3VtZW50SW5kZXhpbmco
ZmluYWwgU2VhcmNoRG9jdW1lbnQgc2VhcmNoRG9jdW1lbnQsIElQYXRoIGNvbnRhaW5lciwgZmlu
YWwgSW5kZXhMb2NhdGlvbiBpbmRleExvY2F0aW9uLCBmaW5hbCBTZWFyY2hQYXJ0aWNpcGFudCBz
ZWFyY2hQYXJ0aWNpcGFudCkgewogCXJlcXVlc3QobmV3IEluZGV4UmVxdWVzdChjb250YWluZXIs
IHRoaXMpIHsKIAkJcHVibGljIGJvb2xlYW4gZXhlY3V0ZShJUHJvZ3Jlc3NNb25pdG9yIHByb2dy
ZXNzTW9uaXRvcikgewogCQkJaWYgKHRoaXMuaXNDYW5jZWxsZWQgfHwgcHJvZ3Jlc3NNb25pdG9y
ICE9IG51bGwgJiYgcHJvZ3Jlc3NNb25pdG9yLmlzQ2FuY2VsZWQoKSkgcmV0dXJuIHRydWU7CkBA
IC04OTAsNyArODgwLDcgQEAKIAogCQkJdHJ5IHsKIAkJCQltb25pdG9yLmVudGVyV3JpdGUoKTsg
Ly8gYXNrIHBlcm1pc3Npb24gdG8gd3JpdGUKLQkJCQlpbmRleERvY3VtZW50KHNlYXJjaERvY3Vt
ZW50LCBzZWFyY2hQYXJ0aWNpcGFudCwgaW5kZXgsIGluZGV4TG9jYXRpb24pOworCQkJCWluZGV4
RG9jdW1lbnQoc2VhcmNoRG9jdW1lbnQsIHNlYXJjaFBhcnRpY2lwYW50LCBpbmRleCwgbmV3IFBh
dGgoaW5kZXhMb2NhdGlvbi5nZXRDYW5vbmljYWxGaWxlUGF0aCgpKSk7CiAJCQl9IGZpbmFsbHkg
ewogCQkJCW1vbml0b3IuZXhpdFdyaXRlKCk7IC8vIGZyZWUgd3JpdGUgbG9jawogCQkJfQpAQCAt
OTQ0LDcgKzkzNCw4IEBACiAJCQkJLy8gRmlyc3QgbGluZSBpcyBEaXNrSW5kZXggc2lnbmF0dXJl
ICAoc2VlIHdyaXRlUGFydGljaXBhbnRzSW5kZXhOYW1lc0ZpbGUoKSkKIAkJCQlpZiAoRGlza0lu
ZGV4LlNJR05BVFVSRS5lcXVhbHMobmV3IFN0cmluZyhuYW1lc1swXSkpKSB7CQkJCQkKIAkJCQkJ
Zm9yIChpbnQgaSA9IDEsIGwgPSBuYW1lcy5sZW5ndGgtMSA7IGkgPCBsIDsgaSs9MikgewotCQkJ
CQkJY29udGFpbmVycy5wdXQobmV3IFBhdGgobmV3IFN0cmluZyhuYW1lc1tpXSkpLCBuZXcgUGF0
aChuZXcgU3RyaW5nKG5hbWVzW2krMV0pKSk7CisJCQkJCQlJbmRleExvY2F0aW9uIGluZGV4TG9j
YXRpb24gPSBuZXcgRmlsZUluZGV4TG9jYXRpb24obmV3IEZpbGUobmV3IFN0cmluZyhuYW1lc1tp
XSkpLCB0cnVlKTsKKwkJCQkJCWNvbnRhaW5lcnMucHV0KGluZGV4TG9jYXRpb24sIG5ldyBQYXRo
KG5ldyBTdHJpbmcobmFtZXNbaSsxXSkpKTsKIAkJCQkJfQogCQkJCX0JCQkJCiAJCQl9CkBAIC05
NTYsNyArOTQ3LDcgQEAKIAl0aGlzLnBhcnRpY2lwYW50c0NvbnRhaW5lcnMgPSBjb250YWluZXJz
OwogCXJldHVybjsKIH0KLXByaXZhdGUgc3luY2hyb25pemVkIHZvaWQgcmVtb3ZlSW5kZXhlc1N0
YXRlKElQYXRoW10gbG9jYXRpb25zKSB7Citwcml2YXRlIHN5bmNocm9uaXplZCB2b2lkIHJlbW92
ZUluZGV4ZXNTdGF0ZShJbmRleExvY2F0aW9uW10gbG9jYXRpb25zKSB7CiAJZ2V0SW5kZXhTdGF0
ZXMoKTsgLy8gZW5zdXJlIHRoZSBzdGF0ZXMgYXJlIGluaXRpYWxpemVkCiAJaW50IGxlbmd0aCA9
IGxvY2F0aW9ucy5sZW5ndGg7CiAJYm9vbGVhbiBjaGFuZ2VkID0gZmFsc2U7CkBAIC05NzMsOCAr
OTY0LDggQEAKIAogCXdyaXRlU2F2ZWRJbmRleE5hbWVzRmlsZSgpOwogfQotcHJpdmF0ZSBzeW5j
aHJvbml6ZWQgdm9pZCB1cGRhdGVJbmRleFN0YXRlKElQYXRoIGluZGV4TG9jYXRpb24sIEludGVn
ZXIgaW5kZXhTdGF0ZSkgewotCWlmIChpbmRleExvY2F0aW9uLmlzRW1wdHkoKSkKK3ByaXZhdGUg
c3luY2hyb25pemVkIHZvaWQgdXBkYXRlSW5kZXhTdGF0ZShJbmRleExvY2F0aW9uIGluZGV4TG9j
YXRpb24sIEludGVnZXIgaW5kZXhTdGF0ZSkgeworCWlmIChpbmRleExvY2F0aW9uID09IG51bGwp
CiAJCXRocm93IG5ldyBJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24oKTsKIAogCWdldEluZGV4U3Rh
dGVzKCk7IC8vIGVuc3VyZSB0aGUgc3RhdGVzIGFyZSBpbml0aWFsaXplZApAQCAtMTAwMiwxMCAr
OTkzLDExIEBACiAJfQogCiB9Ci1wdWJsaWMgdm9pZCB1cGRhdGVQYXJ0aWNpcGFudChJUGF0aCBp
bmRleExvY2F0aW9uLCBJUGF0aCBjb250YWluZXJQYXRoKSB7CitwdWJsaWMgdm9pZCB1cGRhdGVQ
YXJ0aWNpcGFudChJUGF0aCBpbmRleFBhdGgsIElQYXRoIGNvbnRhaW5lclBhdGgpIHsKIAlpZiAo
dGhpcy5wYXJ0aWNpcGFudHNDb250YWluZXJzID09IG51bGwpIHsKIAkJcmVhZFBhcnRpY2lwYW50
c0luZGV4TmFtZXNGaWxlKCk7Ci0JfSAKKwl9CisJSW5kZXhMb2NhdGlvbiBpbmRleExvY2F0aW9u
ID0gbmV3IEZpbGVJbmRleExvY2F0aW9uKGluZGV4UGF0aC50b0ZpbGUoKSwgdHJ1ZSk7CiAJaWYg
KHRoaXMucGFydGljaXBhbnRzQ29udGFpbmVycy5nZXQoaW5kZXhMb2NhdGlvbikgPT0gbnVsbCkg
ewogCQl0aGlzLnBhcnRpY2lwYW50c0NvbnRhaW5lcnMucHV0KGluZGV4TG9jYXRpb24sIGNvbnRh
aW5lclBhdGgpOwogCQl0aGlzLnBhcnRpY2lwYW50VXBkYXRlZCAgPSB0cnVlOwpAQCAtMTA1NCw5
ICsxMDQ2LDkgQEAKIAkJT2JqZWN0W10gaW5kZXhGaWxlcyA9IHRoaXMucGFydGljaXBhbnRzQ29u
dGFpbmVycy5rZXlUYWJsZTsKIAkJT2JqZWN0W10gY29udGFpbmVycyA9IHRoaXMucGFydGljaXBh
bnRzQ29udGFpbmVycy52YWx1ZVRhYmxlOwogCQlmb3IgKGludCBpID0gMCwgbCA9IGluZGV4Rmls
ZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7Ci0JCQlJUGF0aCBpbmRleEZpbGUgPSAoSVBhdGgpaW5k
ZXhGaWxlc1tpXTsKKwkJCUluZGV4TG9jYXRpb24gaW5kZXhGaWxlID0gKEluZGV4TG9jYXRpb24p
aW5kZXhGaWxlc1tpXTsKIAkJCWlmIChpbmRleEZpbGUgIT0gbnVsbCkgewotCQkJCXdyaXRlci53
cml0ZShpbmRleEZpbGUudG9PU1N0cmluZygpKTsKKwkJCQl3cml0ZXIud3JpdGUoaW5kZXhGaWxl
LmdldEluZGV4RmlsZSgpLmdldFBhdGgoKSk7CiAJCQkJd3JpdGVyLndyaXRlKCdcbicpOwogCQkJ
CXdyaXRlci53cml0ZSgoKElQYXRoKWNvbnRhaW5lcnNbaV0pLnRvT1NTdHJpbmcoKSk7CiAJCQkJ
d3JpdGVyLndyaXRlKCdcbicpOwpAQCAtMTA4Niw5ICsxMDc4LDkgQEAKIAkJT2JqZWN0W10ga2V5
cyA9IHRoaXMuaW5kZXhTdGF0ZXMua2V5VGFibGU7CiAJCU9iamVjdFtdIHN0YXRlcyA9IHRoaXMu
aW5kZXhTdGF0ZXMudmFsdWVUYWJsZTsKIAkJZm9yIChpbnQgaSA9IDAsIGwgPSBzdGF0ZXMubGVu
Z3RoOyBpIDwgbDsgaSsrKSB7Ci0JCQlJUGF0aCBrZXkgPSAoSVBhdGgpIGtleXNbaV07Ci0JCQlp
ZiAoa2V5ICE9IG51bGwgJiYgIWtleS5pc0VtcHR5KCkgJiYgc3RhdGVzW2ldID09IFNBVkVEX1NU
QVRFKSB7Ci0JCQkJd3JpdGVyLndyaXRlKGtleS5sYXN0U2VnbWVudCgpKTsKKwkJCUluZGV4TG9j
YXRpb24ga2V5ID0gKEluZGV4TG9jYXRpb24pIGtleXNbaV07CisJCQlpZiAoa2V5ICE9IG51bGwg
JiYgc3RhdGVzW2ldID09IFNBVkVEX1NUQVRFKSB7CisJCQkJd3JpdGVyLndyaXRlKGtleS5maWxl
TmFtZSgpKTsKIAkJCQl3cml0ZXIud3JpdGUoJ1xuJyk7CiAJCQl9CiAJCX0=
</data>

          </attachment>
      

    </bug>

</bugzilla>