<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>429812</bug_id>
          
          <creation_ts>2014-03-06 14:12:00 -0500</creation_ts>
          <short_desc>[1.8][model] Signatures returned by lambda IMethod APIs should be dot-based</short_desc>
          <delta_ts>2014-03-11 05:25:05 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Markus Keller">markus_keller</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>manju656</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2372620</commentid>
    <comment_count>0</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-03-06 14:12:09 -0500</bug_when>
    <thetext>The signatures returned by lambda IMethod APIs should be dot-based. Currently, getReturnType() and getParameterTypes() return slash-based signatures.

This needs to be fixed to make Javadoc hovers on Lambda expressions work (once codeSelect on &quot;-&gt;&quot; returns the lambda method and not the SAM).

Example:

interface I {
	/**
	 * Does it! Really.
	 * @param number the int
	 * @param str the String
	 */
	Object doit(int number, String str);
}

class X {
    I i = (i, s) -&gt; {
        return null;
    };
}

E.g. use the JavaElement view to inspect the local variable &quot;s&quot; and then check its declaring member.

- second parameter type is &quot;Ljava/lang/String;&quot;. Should be &quot;Ljava.lang.String;&quot;.
- return type is &quot;Qjava/lang/Object;&quot;, which is wrong. An unresolved signature (&quot;Q&quot;) cannot be qualified. Should be &quot;Ljava/lang/Object;&quot;
- please also check the other API methods</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372744</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-06 21:21:03 -0500</bug_when>
    <thetext>Jay, thanks for following up - this is targetted for GA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372788</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-07 00:53:40 -0500</bug_when>
    <thetext>Markus, just as information: We don&apos;t have two abstractions one for unresolved
lambda method and another for resolved lambda method as is the case
with say SourceMethod.

Because lambdas are not stored in the model and are fabricated on the fly,
we work with only resolved lambda methods - so a call to unresolved() would
return the same method.

We do maintain for the type an unresolved one and a resolved one - this seems
to be required for type hierarchy to work properly.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372818</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-07 02:03:49 -0500</bug_when>
    <thetext>See org.eclipse.jdt.core.BindingKey.toSignature()

org.eclipse.jdt.core.IMethod.getExceptionTypes()
org.eclipse.jdt.core.IMethod.getParameterTypes()
org.eclipse.jdt.core.IMethod.getReturnType()
org.eclipse.jdt.core.IMethod.getSignature()

would appear to be the APIs affected.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372891</commentid>
    <comment_count>4</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-03-07 05:25:05 -0500</bug_when>
    <thetext>(In reply to Markus Keller from comment #0)
&gt; - second parameter type is &quot;Ljava/lang/String;&quot;. Should be
&gt; &quot;Ljava.lang.String;&quot;.
&gt; - return type is &quot;Qjava/lang/Object;&quot;, which is wrong. An unresolved
&gt; signature (&quot;Q&quot;) cannot be qualified. Should be &quot;Ljava/lang/Object;&quot;
&gt; - please also check the other API methods

Or could it be &quot;QObject&quot;? I am asking because when I inspect the method declaration doit(), I see the second parameter type to be &quot;QString&quot;.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372971</commentid>
    <comment_count>5</comment_count>
      <attachid>240640</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-03-07 07:06:04 -0500</bug_when>
    <thetext>Created attachment 240640
Patch under test

The problem with TypeBinding#signature() was it was coming from a resolved binding, which was prefixing &apos;L&apos; always. I have made changes to use constantPoolName() instead and this brings up expected results in Java element view. Though some unit tests are failing, this is expected and need to be fixed accordingly.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372980</commentid>
    <comment_count>6</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-03-07 07:18:03 -0500</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #5)
&gt; Created attachment 240640 [details]
&gt; Patch under test
&gt; 
&gt; The problem with TypeBinding#signature() was it was coming from a resolved
&gt; binding, which was prefixing &apos;L&apos; always. I have made changes to use
&gt; constantPoolName() instead and this brings up expected results in Java
&gt; element view. Though some unit tests are failing, this is expected and need
&gt; to be fixed accordingly.

Couple of additional points:

1. TypeBinding#signature() internally uses constantPoolName()
2. The other scenario where we create Lambda method from memento should be taken care of with this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373096</commentid>
    <comment_count>7</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-03-07 11:11:25 -0500</bug_when>
    <thetext>Note that Signature&apos;s Javadoc has examples that contradict the solution from comment 5:

&quot;Ljava.lang.String;&quot; denotes java.lang.String in compiled code 
&quot;QString;&quot; denotes String in source code 
&quot;Qjava.lang.String;&quot; denotes java.lang.String in source code 

Since there&apos;s no source code for these type references, I would not expect unresolved (&quot;Q&quot;) types here. But &quot;QObject;&quot; would still be better than &quot;Qjava/lang/Object;&quot;.

(In reply to Markus Keller from comment #0)
&gt; An unresolved signature (&quot;Q&quot;) cannot be qualified.
Scrap that. A Q-signature can be qualified, which means it was qualified in source.

The first parameter of type &quot;int&quot; is now &quot;QI;&quot;. Should be just &quot;I&quot;.

And for for lambda methods with parameterized parameter types, Signature#getParameterCount() throws an IAE with this patch.
To reproduce, e.g. search for references to &quot;arg&quot; here:

    Function&lt;List&lt;String&gt;, List&lt;String&gt;&gt; sup = (arg) -&gt; {
        return new ArrayList&lt;&gt;(arg);
    };

I don&apos;t fully understand why this happens, but I believe it&apos;s because
    CharOperation.replace(name, &apos;/&apos;, &apos;.&apos;);
modifies the char[] that stores the TypeBinding&apos;s constantPoolName (should make a copy).

java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.Signature.getParameterCount(Signature.java:1610)
	at org.eclipse.jdt.core.Signature.getParameterTypes(Signature.java:1656)
	at org.eclipse.jdt.core.Signature.getParameterTypes(Signature.java:1694)
	at org.eclipse.jdt.internal.ui.viewsupport.JavaElementLabelComposer.appendMethodLabel(JavaElementLabelComposer.java:398)
...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373115</commentid>
    <comment_count>8</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-03-07 11:44:03 -0500</bug_when>
    <thetext>(In reply to Markus Keller from comment #7)
&gt; Note that Signature&apos;s Javadoc has examples that contradict the solution from
&gt; comment 5:
&gt; 
&gt; &quot;Ljava.lang.String;&quot; denotes java.lang.String in compiled code 
&gt; &quot;QString;&quot; denotes String in source code 
&gt; &quot;Qjava.lang.String;&quot; denotes java.lang.String in source code 

That sounds like trouble. We are constructing the signature from bindings and I am not sure if we can find whether the used names were qualified. What happens in the case where the argument type is not explicitly stated?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373140</commentid>
    <comment_count>9</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-03-07 12:16:08 -0500</bug_when>
    <thetext>Okay, I think I will proceed with this as the requirement: For all non primitive types, the signatures will be of the format &quot;Qjava.lang.String;&quot; and of course, for int it should be just &quot;I&quot;.

Also, I think TypeBinding#readableName() can be useful too.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373145</commentid>
    <comment_count>10</comment_count>
      <attachid>240663</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-03-07 12:27:59 -0500</bug_when>
    <thetext>Created attachment 240663
Updated patch

Patch updated with what has been discussed so far. Still under test. And tests to be updated.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373213</commentid>
    <comment_count>11</comment_count>
      <attachid>240669</attachid>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-03-07 14:17:20 -0500</bug_when>
    <thetext>Created attachment 240669
Patch 3

(In reply to Jayaprakash Arthanareeswaran from comment #8)
&gt; That sounds like trouble. We are constructing the signature from bindings
&gt; and I am not sure if we can find whether the used names were qualified. What
&gt; happens in the case where the argument type is not explicitly stated?

That&apos;s exactly why I&apos;d prefer resolved signatures (starting with &quot;L&quot;).

The new CharOperation.deepCopy is unnecessary. You can just use clone() on the char[]. But in this case, you best use CharOperation.replaceOnCopy.

The many-args LambdaMethod.make(..) method must pass a signature to info.setReturnType(..). Clients expect a &quot;name&quot; there, not a signature.

And LambdaMethod needs to override getSignature().</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373582</commentid>
    <comment_count>12</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-03-10 01:06:14 -0400</bug_when>
    <thetext>(In reply to Markus Keller from comment #11)
&gt; Created attachment 240669 [details]
&gt; Patch 3
...
&gt; The many-args LambdaMethod.make(..) method must pass a signature to
&gt; info.setReturnType(..). Clients expect a &quot;name&quot; there, not a signature.

This is what forced me to override getReturnType() in LambdaMethod(). But I failed to recognize that SourceMethodInfo#getReturnTypeName() can be used by clients.

I don&apos;t know how to view the result of LambdaMethod#getSignature() on Java element view, but looking at code, it looks like will produce the same result as the one it is overriding - SourceMethod#getSignature(). Is it because you want to reuse the signature and not want to convert the return type name into signature again?

Also we should be prepared to expect that for the same &quot;String&quot;, depending on where it occurs, the signature could either be &quot;QString;&quot; or &quot;Ljava.lang.String;&quot;

Apart the above, the patch looks good.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373737</commentid>
    <comment_count>13</comment_count>
      <attachid>240714</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-03-10 08:15:53 -0400</bug_when>
    <thetext>Created attachment 240714
Same patch + updated tests

All but 2 failing tests have been updated to go with the new signature format involving lambdas.

Wanted to draw your attention to the failing tests. These tests have type parameter as lambda argument such as the following case:

   private static &lt;I, R&gt; Function&lt;I, R&gt; castingIdentity() {
	return i -&gt; (R) i;
   }
  
This code is in JavaSearchBugs8Tests.testBug400905_0017().

Earlier the return type signature was &quot;java.lang.Object&quot; which has become &quot;R&quot; now. This looks okay to me. If you think otherwise, please let me know so I can look into this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373862</commentid>
    <comment_count>14</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-10 11:04:24 -0400</bug_when>
    <thetext>I glanced through the changes and they look good. Jay, please proceed to
release.

Thanks Markus &amp; Jay.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373889</commentid>
    <comment_count>15</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-03-10 11:32:20 -0400</bug_when>
    <thetext>Released via:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=6bbe71e24e5d5d76445f30e5351f63286e328fac</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2374030</commentid>
    <comment_count>16</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-03-10 15:41:14 -0400</bug_when>
    <thetext>(In reply to Markus Keller from comment #11)
&gt; The many-args LambdaMethod.make(..) method must pass a signature to
&gt; info.setReturnType(..). Clients expect a &quot;name&quot; there, not a signature.

&quot;... must *not* pass a signature ...&quot; of course (as done in the patch).


(In reply to Jayaprakash Arthanareeswaran from comment #12)
&gt; I don&apos;t know how to view the result of LambdaMethod#getSignature() on Java
&gt; element view,

codeSelect currently (bug 429814) doesn&apos;t return the lambda method, but it does return a local variable that is a lambda parameter.

=&gt; My path to get the lambda method in the JavaElement view is to select the parameter (&quot;i&quot; in comment 13) and then set the input from that element. The PARENT or DECLARING MEMBER is the lmabda method. The signature is visible in the IMethod section in the Properties view (e.g. open it via context menu). Note that E4 has a bug that doesn&apos;t correctly initialize the Properties view, so you have to select the element again in order to see its properties.

&gt; ... but looking at code, it looks like will produce the same
&gt; result as the one it is overriding - SourceMethod#getSignature(). Is it
&gt; because you want to reuse the signature and not want to convert the return
&gt; type name into signature again?

Yes, and there&apos;s a subtle difference: SourceMethod#getSignature() always returns an unresolved return type. With &quot;this.returnTypeString&quot;, we keep the resolved type. It would be odd to have resolved parameterTypes but unresolved return type.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2374032</commentid>
    <comment_count>17</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-03-10 15:47:26 -0400</bug_when>
    <thetext>We should actually use TypeBinding#genericTypeSignature() here. That also correctly writes type variables as &quot;TU;&quot; instead of the wrong &quot;LU;&quot;.

Example:

import java.util.List;
interface Getter&lt;E&gt; {
    E get(List&lt;E&gt; list, int i);
}
public class X&lt;U&gt; {
	public void foo(List&lt;U&gt; l) {
		Getter&lt;U&gt; g= (x, i) -&gt; x.get(i);
	} 
}

Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=30b874e8717a53ccaa75e8a5f368d88b909a5d14</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2374115</commentid>
    <comment_count>18</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-10 23:13:18 -0400</bug_when>
    <thetext>(In reply to Markus Keller from comment #17)

&gt; Fixed with
&gt; http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
&gt; ?id=30b874e8717a53ccaa75e8a5f368d88b909a5d14

Markus, this commit is missing on BETA_JAVA8, link above leads to bad commit
reference page, thanks for checking.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2374116</commentid>
    <comment_count>19</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-10 23:15:18 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #18)
&gt; (In reply to Markus Keller from comment #17)
&gt; 
&gt; &gt; Fixed with
&gt; &gt; http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
&gt; &gt; ?id=30b874e8717a53ccaa75e8a5f368d88b909a5d14
&gt; 
&gt; Markus, this commit is missing on BETA_JAVA8, link above leads to bad commit
&gt; reference page, thanks for checking.

Jay, if the commit from Markus does not include a test, please grab the example
from his comment and include, TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2374118</commentid>
    <comment_count>20</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-03-11 00:09:06 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #19)
&gt; Jay, if the commit from Markus does not include a test, please grab the
&gt; example
&gt; from his comment and include, TIA.

I don&apos;t see the commit either.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2374207</commentid>
    <comment_count>21</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-03-11 05:25:05 -0400</bug_when>
    <thetext>Sorry, had a non-FF conflict. Here&apos;s the fix and test case for comment 17: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=8c9e1c8b4d0dd342090e4cf1131f504c44c1f1d9</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>240640</attachid>
            <date>2014-03-07 07:06:00 -0500</date>
            <delta_ts>2014-03-07 12:27:59 -0500</delta_ts>
            <desc>Patch under test</desc>
            <filename>Bug-429812.patch</filename>
            <type>text/plain</type>
            <size>1783</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMAojUCBvcmcuZWNsaXBzZS5qZHQuY29yZQpk
aWZmIC0tZ2l0IG1vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0xhbWJkYU1ldGhv
ZC5qYXZhIG1vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0xhbWJkYU1ldGhvZC5q
YXZhCmluZGV4IGQyNWE0NTYuLjIxYzEwNWIgMTAwNjQ0Ci0tLSBtb2RlbC9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29yZS9MYW1iZGFNZXRob2QuamF2YQorKysgbW9kZWwvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvcmUvTGFtYmRhTWV0aG9kLmphdmEKQEAgLTI0LDQgKzI0LDUgQEAKIGlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkFyZ3VtZW50OwogaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuQmluZGluZzsKK2lt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlR5cGVCaW5kaW5n
OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLnV0aWwuVXRpbDsKIApAQCAt
NDgsOSArNDksOSBAQAogCQlTdHJpbmcgW10gcGFyYW1ldGVyVHlwZXMgPSBuZXcgU3RyaW5nW2xl
bmd0aCA9IGxhbWJkYUV4cHJlc3Npb24uZGVzY3JpcHRvci5wYXJhbWV0ZXJzLmxlbmd0aF07CiAJ
CWZvciAoaW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspCi0JCQlwYXJhbWV0ZXJUeXBlc1tpXSA9
IG1hbmFnZXIuaW50ZXJuKG5ldyBTdHJpbmcobGFtYmRhRXhwcmVzc2lvbi5kZXNjcmlwdG9yLnBh
cmFtZXRlcnNbaV0uc2lnbmF0dXJlKCkpKTsKKwkJCXBhcmFtZXRlclR5cGVzW2ldID0gZ2V0VHlw
ZVNpZ25hdHVyZShtYW5hZ2VyLCBsYW1iZGFFeHByZXNzaW9uLmRlc2NyaXB0b3IucGFyYW1ldGVy
c1tpXSk7CiAJCVN0cmluZyBbXSBwYXJhbWV0ZXJOYW1lcyA9IG5ldyBTdHJpbmdbbGVuZ3RoXTsK
IAkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykKIAkJCXBhcmFtZXRlck5hbWVzW2ld
ID0gbWFuYWdlci5pbnRlcm4obmV3IFN0cmluZyhsYW1iZGFFeHByZXNzaW9uLmFyZ3VtZW50c1tp
XS5uYW1lKSk7Ci0JCVN0cmluZyByZXR1cm5UeXBlID0gbWFuYWdlci5pbnRlcm4obmV3IFN0cmlu
ZyhTaWduYXR1cmUudG9DaGFyQXJyYXkobGFtYmRhRXhwcmVzc2lvbi5kZXNjcmlwdG9yLnJldHVy
blR5cGUuc2lnbmF0dXJlKCkpKSk7CisJCVN0cmluZyByZXR1cm5UeXBlID0gZ2V0VHlwZVNpZ25h
dHVyZShtYW5hZ2VyLCBsYW1iZGFFeHByZXNzaW9uLmRlc2NyaXB0b3IucmV0dXJuVHlwZSk7CiAJ
CVN0cmluZyBzZWxlY3RvciA9IG1hbmFnZXIuaW50ZXJuKG5ldyBTdHJpbmcobGFtYmRhRXhwcmVz
c2lvbi5kZXNjcmlwdG9yLnNlbGVjdG9yKSk7CiAJCVN0cmluZyBrZXkgPSBuZXcgU3RyaW5nKGxh
bWJkYUV4cHJlc3Npb24uZGVzY3JpcHRvci5jb21wdXRlVW5pcXVlS2V5KCkpOwpAQCAtOTUsNCAr
OTYsMTAgQEAKIAl9CiAKKwlwdWJsaWMgc3RhdGljIFN0cmluZyBnZXRUeXBlU2lnbmF0dXJlKEph
dmFNb2RlbE1hbmFnZXIgbWFuYWdlciwgVHlwZUJpbmRpbmcgdHlwZSkgeworCQljaGFyW10gbmFt
ZSA9IHR5cGUuY29uc3RhbnRQb29sTmFtZSgpOworCQlDaGFyT3BlcmF0aW9uLnJlcGxhY2UobmFt
ZSwgJy8nLCAnLicpOworCQlyZXR1cm4gbWFuYWdlci5pbnRlcm4oU2lnbmF0dXJlLmNyZWF0ZVR5
cGVTaWduYXR1cmUobmFtZSwgZmFsc2UpKTsKKwl9CisKIAkvKioKIAkgKiBAc2VlIElNZXRob2Qj
aXNMYW1iZGFNZXRob2QoKQ==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>240663</attachid>
            <date>2014-03-07 12:27:00 -0500</date>
            <delta_ts>2014-03-07 14:17:20 -0500</delta_ts>
            <desc>Updated patch</desc>
            <filename>Bug-429812.patch</filename>
            <type>text/plain</type>
            <size>3511</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMAojUCBvcmcuZWNsaXBzZS5qZHQuY29yZQpk
aWZmIC0tZ2l0IGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9jb3JlL2NvbXBpbGVyL0NoYXJPcGVy
YXRpb24uamF2YSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvY29yZS9jb21waWxlci9DaGFyT3Bl
cmF0aW9uLmphdmEKaW5kZXggNzI0MzdmNC4uOTliNjM5ZiAxMDA2NDQKLS0tIGNvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL2NvbXBpbGVyL0NoYXJPcGVyYXRpb24uamF2YQorKysgY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2NvcmUvY29tcGlsZXIvQ2hhck9wZXJhdGlvbi5qYXZhCkBAIC0x
LDkgKzEsMTMgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIw
MDAsIDIwMTMgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIw
MDAsIDIwMTQgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2Vy
dmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUg
bWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNl
bnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMg
YXZhaWxhYmxlIGF0CiAgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRt
bAotICogCisgKgorICogVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBhbiBlYXJseS1kcmFm
dCBzcGVjaWZpY2F0aW9uIGRldmVsb3BlZCB1bmRlciB0aGUgSmF2YQorICogQ29tbXVuaXR5IFBy
b2Nlc3MgKEpDUCkgYW5kIGlzIG1hZGUgYXZhaWxhYmxlIGZvciB0ZXN0aW5nIGFuZCBldmFsdWF0
aW9uIHB1cnBvc2VzCisgKiBvbmx5LiBUaGUgY29kZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGFu
eSBzcGVjaWZpY2F0aW9uIG9mIHRoZSBKQ1AuCisgKgogICogQ29udHJpYnV0b3JzOgogICogICAg
IElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgpAQCAtMTQ3
MSw0ICsxNDc1LDE5IEBACiAKIC8qKgorICogQW5zd2VycyBhIGRlZXAgY29weSBvZiB0aGUgdG9D
b3B5IGFycmF5LgorICoKKyAqIEBwYXJhbSB0b0NvcHkgdGhlIGFycmF5IHRvIGNvcHkKKyAqIEBy
ZXR1cm4gYSBkZWVwIGNvcHkgb2YgdGhlIHRvQ29weSBhcnJheS4KKyAqLworcHVibGljIHN0YXRp
YyBmaW5hbCBjaGFyW10gZGVlcENvcHkoY2hhcltdIHRvQ29weSkgeworCWludCB0b0NvcHlMZW5n
dGggPSB0b0NvcHkubGVuZ3RoOworCWNoYXJbXSByZXN1bHQgPSBuZXcgY2hhclt0b0NvcHlMZW5n
dGhdOworCWZvciAoaW50IGkgPSAwOyBpIDwgdG9Db3B5TGVuZ3RoOyBpKyspIHsKKwkJcmVzdWx0
W2ldID0gdG9Db3B5W2ldOworCX0KKwlyZXR1cm4gcmVzdWx0OworfQorCisvKioKICAqIFJldHVy
biB0cnVlIGlmIGFycmF5IGVuZHMgd2l0aCB0aGUgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBjb250
YWluZWQgaW4gdG9CZUZvdW5kLAogICogb3RoZXJ3aXNlIGZhbHNlLgpkaWZmIC0tZ2l0IG1vZGVs
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0xhbWJkYU1ldGhvZC5qYXZhIG1vZGVsL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0xhbWJkYU1ldGhvZC5qYXZhCmluZGV4IGM1YmQz
YmEuLmY2MzE1NDIgMTAwNjQ0Ci0tLSBtb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29y
ZS9MYW1iZGFNZXRob2QuamF2YQorKysgbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
cmUvTGFtYmRhTWV0aG9kLmphdmEKQEAgLTI0LDQgKzI0LDUgQEAKIGltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkFyZ3VtZW50OwogaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuQmluZGluZzsKK2ltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlR5cGVCaW5kaW5nOwogaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLnV0aWwuVXRpbDsKIApAQCAtNDgsOSArNDksOSBAQAog
CQlTdHJpbmcgW10gcGFyYW1ldGVyVHlwZXMgPSBuZXcgU3RyaW5nW2xlbmd0aCA9IGxhbWJkYUV4
cHJlc3Npb24uZGVzY3JpcHRvci5wYXJhbWV0ZXJzLmxlbmd0aF07CiAJCWZvciAoaW50IGkgPSAw
OyBpIDwgbGVuZ3RoOyBpKyspCi0JCQlwYXJhbWV0ZXJUeXBlc1tpXSA9IG1hbmFnZXIuaW50ZXJu
KG5ldyBTdHJpbmcobGFtYmRhRXhwcmVzc2lvbi5kZXNjcmlwdG9yLnBhcmFtZXRlcnNbaV0uc2ln
bmF0dXJlKCkpKTsKKwkJCXBhcmFtZXRlclR5cGVzW2ldID0gZ2V0VHlwZVNpZ25hdHVyZShtYW5h
Z2VyLCBsYW1iZGFFeHByZXNzaW9uLmRlc2NyaXB0b3IucGFyYW1ldGVyc1tpXSk7CiAJCVN0cmlu
ZyBbXSBwYXJhbWV0ZXJOYW1lcyA9IG5ldyBTdHJpbmdbbGVuZ3RoXTsKIAkJZm9yIChpbnQgaSA9
IDA7IGkgPCBsZW5ndGg7IGkrKykKIAkJCXBhcmFtZXRlck5hbWVzW2ldID0gbWFuYWdlci5pbnRl
cm4obmV3IFN0cmluZyhsYW1iZGFFeHByZXNzaW9uLmFyZ3VtZW50c1tpXS5uYW1lKSk7Ci0JCVN0
cmluZyByZXR1cm5UeXBlID0gbWFuYWdlci5pbnRlcm4obmV3IFN0cmluZyhTaWduYXR1cmUudG9D
aGFyQXJyYXkobGFtYmRhRXhwcmVzc2lvbi5kZXNjcmlwdG9yLnJldHVyblR5cGUuc2lnbmF0dXJl
KCkpKSk7CisJCVN0cmluZyByZXR1cm5UeXBlID0gZ2V0VHlwZVNpZ25hdHVyZShtYW5hZ2VyLCBs
YW1iZGFFeHByZXNzaW9uLmRlc2NyaXB0b3IucmV0dXJuVHlwZSk7CiAJCVN0cmluZyBzZWxlY3Rv
ciA9IG1hbmFnZXIuaW50ZXJuKG5ldyBTdHJpbmcobGFtYmRhRXhwcmVzc2lvbi5kZXNjcmlwdG9y
LnNlbGVjdG9yKSk7CiAJCVN0cmluZyBrZXkgPSBuZXcgU3RyaW5nKGxhbWJkYUV4cHJlc3Npb24u
ZGVzY3JpcHRvci5jb21wdXRlVW5pcXVlS2V5KCkpOwpAQCAtOTUsNCArOTYsMTYgQEAKIAl9CiAK
KwlwdWJsaWMgc3RhdGljIFN0cmluZyBnZXRUeXBlU2lnbmF0dXJlKEphdmFNb2RlbE1hbmFnZXIg
bWFuYWdlciwgVHlwZUJpbmRpbmcgdHlwZSkgeworCQljaGFyW10gbmFtZSA9IENoYXJPcGVyYXRp
b24uZGVlcENvcHkodHlwZS5yZWFkYWJsZU5hbWUoKSk7CisJCUNoYXJPcGVyYXRpb24ucmVwbGFj
ZShuYW1lLCAnLycsICcuJyk7CisJCXJldHVybiBtYW5hZ2VyLmludGVybihTaWduYXR1cmUuY3Jl
YXRlVHlwZVNpZ25hdHVyZShuYW1lLCBmYWxzZSkpOworCX0KKworCS8qKgorCSAqIEBzZWUgSU1l
dGhvZAorCSAqLworCXB1YmxpYyBTdHJpbmcgZ2V0UmV0dXJuVHlwZSgpIHRocm93cyBKYXZhTW9k
ZWxFeGNlcHRpb24geworCQlyZXR1cm4gdGhpcy5yZXR1cm5UeXBlU3RyaW5nOworCX0KIAkvKioK
IAkgKiBAc2VlIElNZXRob2QjaXNMYW1iZGFNZXRob2QoKQ==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>240669</attachid>
            <date>2014-03-07 14:17:00 -0500</date>
            <delta_ts>2014-03-10 08:15:53 -0400</delta_ts>
            <desc>Patch 3</desc>
            <filename>eclipse.jdt.core.patch</filename>
            <type>text/plain</type>
            <size>4209</size>
            <attacher name="Markus Keller">markus_keller</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMAojUCBvcmcuZWNsaXBzZS5qZHQuY29yZQpk
aWZmIC0tZ2l0IG1vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0xhbWJkYU1ldGhv
ZC5qYXZhIG1vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0xhbWJkYU1ldGhvZC5q
YXZhCmluZGV4IGM1YmQzYmEuLjg0MGFhNDQgMTAwNjQ0Ci0tLSBtb2RlbC9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29yZS9MYW1iZGFNZXRob2QuamF2YQorKysgbW9kZWwvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvcmUvTGFtYmRhTWV0aG9kLmphdmEKQEAgLTIzLDYgKzIzLDcgQEAKIGlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5DaGFyT3BlcmF0aW9uOwogaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuQXJndW1lbnQ7CiBpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5CaW5kaW5nOworaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuVHlwZUJpbmRpbmc7CiBp
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvcmUudXRpbC5VdGlsOwogCiBwdWJsaWMg
Y2xhc3MgTGFtYmRhTWV0aG9kIGV4dGVuZHMgU291cmNlTWV0aG9kIHsKQEAgLTQ3LDExICs0OCwx
MSBAQAogCQlKYXZhTW9kZWxNYW5hZ2VyIG1hbmFnZXIgPSBKYXZhTW9kZWxNYW5hZ2VyLmdldEph
dmFNb2RlbE1hbmFnZXIoKTsKIAkJU3RyaW5nIFtdIHBhcmFtZXRlclR5cGVzID0gbmV3IFN0cmlu
Z1tsZW5ndGggPSBsYW1iZGFFeHByZXNzaW9uLmRlc2NyaXB0b3IucGFyYW1ldGVycy5sZW5ndGhd
OwogCQlmb3IgKGludCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKQotCQkJcGFyYW1ldGVyVHlwZXNb
aV0gPSBtYW5hZ2VyLmludGVybihuZXcgU3RyaW5nKGxhbWJkYUV4cHJlc3Npb24uZGVzY3JpcHRv
ci5wYXJhbWV0ZXJzW2ldLnNpZ25hdHVyZSgpKSk7CisJCQlwYXJhbWV0ZXJUeXBlc1tpXSA9IGdl
dFR5cGVTaWduYXR1cmUobWFuYWdlciwgbGFtYmRhRXhwcmVzc2lvbi5kZXNjcmlwdG9yLnBhcmFt
ZXRlcnNbaV0pOwogCQlTdHJpbmcgW10gcGFyYW1ldGVyTmFtZXMgPSBuZXcgU3RyaW5nW2xlbmd0
aF07CiAJCWZvciAoaW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspCiAJCQlwYXJhbWV0ZXJOYW1l
c1tpXSA9IG1hbmFnZXIuaW50ZXJuKG5ldyBTdHJpbmcobGFtYmRhRXhwcmVzc2lvbi5hcmd1bWVu
dHNbaV0ubmFtZSkpOwotCQlTdHJpbmcgcmV0dXJuVHlwZSA9IG1hbmFnZXIuaW50ZXJuKG5ldyBT
dHJpbmcoU2lnbmF0dXJlLnRvQ2hhckFycmF5KGxhbWJkYUV4cHJlc3Npb24uZGVzY3JpcHRvci5y
ZXR1cm5UeXBlLnNpZ25hdHVyZSgpKSkpOworCQlTdHJpbmcgcmV0dXJuVHlwZSA9IGdldFR5cGVT
aWduYXR1cmUobWFuYWdlciwgbGFtYmRhRXhwcmVzc2lvbi5kZXNjcmlwdG9yLnJldHVyblR5cGUp
OwogCQlTdHJpbmcgc2VsZWN0b3IgPSBtYW5hZ2VyLmludGVybihuZXcgU3RyaW5nKGxhbWJkYUV4
cHJlc3Npb24uZGVzY3JpcHRvci5zZWxlY3RvcikpOwogCQlTdHJpbmcga2V5ID0gbmV3IFN0cmlu
ZyhsYW1iZGFFeHByZXNzaW9uLmRlc2NyaXB0b3IuY29tcHV0ZVVuaXF1ZUtleSgpKTsKIAkJTGFt
YmRhTWV0aG9kIGxhbWJkYU1ldGhvZCA9IG1ha2UocGFyZW50LCBzZWxlY3Rvciwga2V5LCBsYW1i
ZGFFeHByZXNzaW9uLnNvdXJjZVN0YXJ0LCBsYW1iZGFFeHByZXNzaW9uLnNvdXJjZUVuZCwgbGFt
YmRhRXhwcmVzc2lvbi5hcnJvd1Bvc2l0aW9uLCBwYXJhbWV0ZXJUeXBlcywgcGFyYW1ldGVyTmFt
ZXMsIHJldHVyblR5cGUpOwpAQCAtODgsMTIgKzg5LDMwIEBACiAJCWZvciAoaW50IGkgPSAwOyBp
IDwgbGVuZ3RoOyBpKyspCiAJCQlhcmd1bWVudE5hbWVzW2ldID0gbWFuYWdlci5pbnRlcm4ocGFy
YW1ldGVyTmFtZXNbaV0udG9DaGFyQXJyYXkoKSk7CiAJCWluZm8uc2V0QXJndW1lbnROYW1lcyhh
cmd1bWVudE5hbWVzKTsKLQkJaW5mby5zZXRSZXR1cm5UeXBlKG1hbmFnZXIuaW50ZXJuKHJldHVy
blR5cGUudG9DaGFyQXJyYXkoKSkpOworCQlpbmZvLnNldFJldHVyblR5cGUobWFuYWdlci5pbnRl
cm4oU2lnbmF0dXJlLnRvQ2hhckFycmF5KHJldHVyblR5cGUudG9DaGFyQXJyYXkoKSkpKTsKIAkJ
aW5mby5zZXRFeGNlcHRpb25UeXBlTmFtZXMoQ2hhck9wZXJhdGlvbi5OT19DSEFSX0NIQVIpOwog
CQlpbmZvLmFyZ3VtZW50cyA9IG51bGw7IC8vIHdpbGwgYmUgdXBkYXRlZCBzaG9ydGx5LCBwYXJl
bnQgaGFzIHRvIGNvbWUgaW50byBleGlzdGVuY2UgZmlyc3QuCiAJCXJldHVybiBuZXcgTGFtYmRh
TWV0aG9kKHBhcmVudCwgc2VsZWN0b3IsIGtleSwgc291cmNlU3RhcnQsIHBhcmFtZXRlclR5cGVz
LCBwYXJhbWV0ZXJOYW1lcywgcmV0dXJuVHlwZSwgaW5mbyk7CiAJfQogCisJcHVibGljIHN0YXRp
YyBTdHJpbmcgZ2V0VHlwZVNpZ25hdHVyZShKYXZhTW9kZWxNYW5hZ2VyIG1hbmFnZXIsIFR5cGVC
aW5kaW5nIHR5cGUpIHsKKwkJY2hhcltdIG5hbWUgPSB0eXBlLnJlYWRhYmxlTmFtZSgpOworCQlu
YW1lID0gQ2hhck9wZXJhdGlvbi5yZXBsYWNlT25Db3B5KG5hbWUsICcvJywgJy4nKTsKKwkJcmV0
dXJuIG1hbmFnZXIuaW50ZXJuKFNpZ25hdHVyZS5jcmVhdGVUeXBlU2lnbmF0dXJlKG5hbWUsIHRy
dWUpKTsKKwl9CisKKwkvKioKKwkgKiBAc2VlIElNZXRob2QKKwkgKi8KKwlwdWJsaWMgU3RyaW5n
IGdldFJldHVyblR5cGUoKSB0aHJvd3MgSmF2YU1vZGVsRXhjZXB0aW9uIHsKKwkJcmV0dXJuIHRo
aXMucmV0dXJuVHlwZVN0cmluZzsKKwl9CisJLyoqCisJICogQHNlZSBJTWV0aG9kCisJICovCisJ
cHVibGljIFN0cmluZyBnZXRTaWduYXR1cmUoKSB0aHJvd3MgSmF2YU1vZGVsRXhjZXB0aW9uIHsK
KwkJcmV0dXJuIFNpZ25hdHVyZS5jcmVhdGVNZXRob2RTaWduYXR1cmUodGhpcy5wYXJhbWV0ZXJU
eXBlcywgdGhpcy5yZXR1cm5UeXBlU3RyaW5nKTsKKwl9CiAJLyoqCiAJICogQHNlZSBJTWV0aG9k
I2lzTGFtYmRhTWV0aG9kKCkKIAkgKi8KZGlmZiAtLWdpdCBtb2RlbC9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29yZS9TZWxlY3Rpb25SZXF1ZXN0b3IuamF2YSBtb2RlbC9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29yZS9TZWxlY3Rpb25SZXF1ZXN0b3IuamF2YQppbmRleCBkZTM5NjZjLi4x
NTA5YTU4IDEwMDY0NAotLS0gbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvU2Vs
ZWN0aW9uUmVxdWVzdG9yLmphdmEKKysrIG1vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b3JlL1NlbGVjdGlvblJlcXVlc3Rvci5qYXZhCkBAIC0xLDUgKzEsNSBAQAogLyoqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRpb24g
YW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxNCBJQk0gQ29ycG9yYXRpb24g
YW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhl
IGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUg
dGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21w
YW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKQEAgLTQ2NSw3ICs0
NjUsNyBAQAogCQkJCWxvY2FsLmRlY2xhcmF0aW9uU291cmNlRW5kLAogCQkJCWxvY2FsLnNvdXJj
ZVN0YXJ0LAogCQkJCWxvY2FsLnNvdXJjZUVuZCwKLQkJCQlsb2NhbC50eXBlID09IG51bGwgPyBT
aWduYXR1cmUuY3JlYXRlVHlwZVNpZ25hdHVyZShiaW5kaW5nLnR5cGUucmVhZGFibGVOYW1lKCks
IGZhbHNlKSA6IFV0aWwudHlwZVNpZ25hdHVyZShsb2NhbC50eXBlKSwKKwkJCQlsb2NhbC50eXBl
ID09IG51bGwgPyBTaWduYXR1cmUuY3JlYXRlVHlwZVNpZ25hdHVyZShiaW5kaW5nLnR5cGUucmVh
ZGFibGVOYW1lKCksIHRydWUpIDogVXRpbC50eXBlU2lnbmF0dXJlKGxvY2FsLnR5cGUpLAogCQkJ
CWxvY2FsLmFubm90YXRpb25zLAogCQkJCWxvY2FsLm1vZGlmaWVycywKIAkJCQlsb2NhbC5nZXRL
aW5kKCkgPT0gQWJzdHJhY3RWYXJpYWJsZURlY2xhcmF0aW9uLlBBUkFNRVRFUik7
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>240714</attachid>
            <date>2014-03-10 08:15:00 -0400</date>
            <delta_ts>2014-03-10 08:15:53 -0400</delta_ts>
            <desc>Same patch + updated tests</desc>
            <filename>Bug-429812.patch</filename>
            <type>text/plain</type>
            <size>11946</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMAojUCBvcmcuZWNsaXBzZS5qZHQuY29yZS50
ZXN0cy5tb2RlbApkaWZmIC0tZ2l0IHNyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9tb2Rl
bC9KYXZhU2VhcmNoQnVnczhUZXN0cy5qYXZhIHNyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0
cy9tb2RlbC9KYXZhU2VhcmNoQnVnczhUZXN0cy5qYXZhCmluZGV4IDgwMDM5NzAuLmE2NTQyN2Mg
MTAwNjQ0Ci0tLSBzcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvbW9kZWwvSmF2YVNlYXJj
aEJ1Z3M4VGVzdHMuamF2YQorKysgc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21vZGVs
L0phdmFTZWFyY2hCdWdzOFRlc3RzLmphdmEKQEAgLTI0NjMsNyArMjQ2Myw3IEBACiAJYXNzZXJ0
U2VhcmNoUmVzdWx0cygKIAkJCSJzcmMvYjQwMDkwNS9JLmphdmEgYm9vbGVhbiBiNDAwOTA1Lkku
Zm9vKFkpIFtmb29dIEVYQUNUX01BVENIXG4iICsgCi0JCQkic3JjL2I0MDA5MDUvWC5qYXZhIGJv
b2xlYW4gdm9pZCBiNDAwOTA1LlgubWFpbihTdHJpbmdbXSk6TGFtYmRhKEkpLmZvbyhiNDAwOTA1
L1kpIFt5LT5dIEVYQUNUX01BVENIXG4iICsgCi0JCQkic3JjL2I0MDA5MDUvWC5qYXZhIGJvb2xl
YW4gdm9pZCBiNDAwOTA1LlgubWFpbihTdHJpbmdbXSk6TGFtYmRhKEkpLmZvbyhiNDAwOTA1L1kp
IFt5IC0+XSBFWEFDVF9NQVRDSFxuIiArIAotCQkJInNyYy9iNDAwOTA1L1guamF2YSBib29sZWFu
IHZvaWQgYjQwMDkwNS5YLm1haW4oU3RyaW5nW10pOkxhbWJkYShJKS5mb28oYjQwMDkwNS9ZKSBb
eSAgLT5dIEVYQUNUX01BVENIIgorCQkJInNyYy9iNDAwOTA1L1guamF2YSBib29sZWFuIHZvaWQg
YjQwMDkwNS5YLm1haW4oU3RyaW5nW10pOkxhbWJkYShJKS5mb28oYjQwMDkwNS5ZKSBbeS0+XSBF
WEFDVF9NQVRDSFxuIiArIAorCQkJInNyYy9iNDAwOTA1L1guamF2YSBib29sZWFuIHZvaWQgYjQw
MDkwNS5YLm1haW4oU3RyaW5nW10pOkxhbWJkYShJKS5mb28oYjQwMDkwNS5ZKSBbeSAtPl0gRVhB
Q1RfTUFUQ0hcbiIgKyAKKwkJCSJzcmMvYjQwMDkwNS9YLmphdmEgYm9vbGVhbiB2b2lkIGI0MDA5
MDUuWC5tYWluKFN0cmluZ1tdKTpMYW1iZGEoSSkuZm9vKGI0MDA5MDUuWSkgW3kgIC0+XSBFWEFD
VF9NQVRDSCIKIAkpOwkKIH0KQEAgLTI1MDAsOCArMjUwMCw4IEBACiAJYXNzZXJ0U2VhcmNoUmVz
dWx0cygKIAkJCQkJInNyYy9iNDAwOTA1L0kuamF2YSBUIGI0MDA5MDUuSS5mb28oKSBbZm9vXSBF
WEFDVF9NQVRDSFxuIiArIAotCQkJCQkic3JjL2I0MDA5MDUvWC5qYXZhIGI0MDA5MDUvWSB2b2lk
IGI0MDA5MDUuWC5tYWluKFN0cmluZ1tdKTpMYW1iZGEoSSkuZm9vKCkgWygpIC8qIGZvbyAqLyAt
Pl0gRVhBQ1RfTUFUQ0hcbiIgKyAKLQkJCQkJInNyYy9iNDAwOTA1L1guamF2YSBiNDAwOTA1L1kg
dm9pZCBiNDAwOTA1LlgubWFpbihTdHJpbmdbXSk6TGFtYmRhKEkpLmZvbygpIFsoKSAvKiB0cnVl
ICovLT5dIEVYQUNUX01BVENIXG4iICsgCi0JCQkJCSJzcmMvYjQwMDkwNS9YLmphdmEgYjQwMDkw
NS9ZIHZvaWQgYjQwMDkwNS5YLm1haW4oU3RyaW5nW10pOkxhbWJkYShJKS5mb28oKSBbKCkgLyog
ZmFsc2UgKi8gLT5dIEVYQUNUX01BVENIXG4iICsgCi0JCQkJCSJzcmMvYjQwMDkwNS9YLmphdmEg
amF2YS9sYW5nL09iamVjdCB2b2lkIGI0MDA5MDUuWC5tYWluKFN0cmluZ1tdKTpMYW1iZGEoSSku
Zm9vKCkgWygpIC8qIGNhc3QgKi8gLT5dIEVYQUNUX01BVENIIgorCQkJCQkic3JjL2I0MDA5MDUv
WC5qYXZhIGI0MDA5MDUuWSB2b2lkIGI0MDA5MDUuWC5tYWluKFN0cmluZ1tdKTpMYW1iZGEoSSku
Zm9vKCkgWygpIC8qIGZvbyAqLyAtPl0gRVhBQ1RfTUFUQ0hcbiIgKyAKKwkJCQkJInNyYy9iNDAw
OTA1L1guamF2YSBiNDAwOTA1Llkgdm9pZCBiNDAwOTA1LlgubWFpbihTdHJpbmdbXSk6TGFtYmRh
KEkpLmZvbygpIFsoKSAvKiB0cnVlICovLT5dIEVYQUNUX01BVENIXG4iICsgCisJCQkJCSJzcmMv
YjQwMDkwNS9YLmphdmEgYjQwMDkwNS5ZIHZvaWQgYjQwMDkwNS5YLm1haW4oU3RyaW5nW10pOkxh
bWJkYShJKS5mb28oKSBbKCkgLyogZmFsc2UgKi8gLT5dIEVYQUNUX01BVENIXG4iICsgCisJCQkJ
CSJzcmMvYjQwMDkwNS9YLmphdmEgamF2YS5sYW5nLk9iamVjdCB2b2lkIGI0MDA5MDUuWC5tYWlu
KFN0cmluZ1tdKTpMYW1iZGEoSSkuZm9vKCkgWygpIC8qIGNhc3QgKi8gLT5dIEVYQUNUX01BVENI
IgogCSk7CQogfQpAQCAtMjUzNiw1ICsyNTM2LDUgQEAKIAlzZWFyY2gobWV0aG9kLCBERUNMQVJB
VElPTlMsIEVYQUNUX1JVTEUpOwogCWFzc2VydFNlYXJjaFJlc3VsdHMoCi0JCQkJCSJzcmMvYjQw
MDkwNS9YLmphdmEgdm9pZCBiNDAwOTA1L1kgdm9pZCBiNDAwOTA1LlgubWFpbihTdHJpbmdbXSk6
TGFtYmRhKEkpLmZvbygpOkxhbWJkYShZKS5iYXIoKSBbKCkgLyogYmFyICovIC0+XSBFWEFDVF9N
QVRDSFxuIiArIAorCQkJCQkic3JjL2I0MDA5MDUvWC5qYXZhIHZvaWQgYjQwMDkwNS5ZIHZvaWQg
YjQwMDkwNS5YLm1haW4oU3RyaW5nW10pOkxhbWJkYShJKS5mb28oKTpMYW1iZGEoWSkuYmFyKCkg
WygpIC8qIGJhciAqLyAtPl0gRVhBQ1RfTUFUQ0hcbiIgKyAKIAkJCQkJInNyYy9iNDAwOTA1L1ku
amF2YSB2b2lkIGI0MDA5MDUuWS5iYXIoKSBbYmFyXSBFWEFDVF9NQVRDSCIKIAkpOwkKQEAgLTMy
MDAsNSArMzIwMCw1IEBACiAJCXNlYXJjaChtZXRob2QsIERFQ0xBUkFUSU9OU3xJR05PUkVfREVD
TEFSSU5HX1RZUEV8SUdOT1JFX1JFVFVSTl9UWVBFLCBTZWFyY2hQYXR0ZXJuLlJfQ0FTRV9TRU5T
SVRJVkUgfCBTZWFyY2hQYXR0ZXJuLlJfRVJBU1VSRV9NQVRDSCwgU2VhcmNoRW5naW5lLmNyZWF0
ZUhpZXJhcmNoeVNjb3BlKHR5cGUpLCB0aGlzLnJlc3VsdENvbGxlY3Rvcik7CiAJCWFzc2VydFNl
YXJjaFJlc3VsdHMoInNyYy9GdW5jdGlvbi5qYXZhIFIgRnVuY3Rpb24uYXBwbHkoVCkgW2FwcGx5
XSBFWEFDVF9NQVRDSFxuIiArIAotCQkJCSJzcmMvWS5qYXZhIGphdmEvbGFuZy9PYmplY3QgRnVu
Y3Rpb248SSxSPiBDb2xsZWN0b3JzLmNhc3RpbmdJZGVudGl0eSgpOkxhbWJkYShGdW5jdGlvbiku
YXBwbHkoamF2YS9sYW5nL09iamVjdCkgW2kgLT5dIEVYQUNUX01BVENIIik7CisJCQkJInNyYy9Z
LmphdmEgamF2YS5sYW5nLk9iamVjdCBGdW5jdGlvbjxJLFI+IENvbGxlY3RvcnMuY2FzdGluZ0lk
ZW50aXR5KCk6TGFtYmRhKEZ1bmN0aW9uKS5hcHBseShqYXZhLmxhbmcuT2JqZWN0KSBbaSAtPl0g
RVhBQ1RfTUFUQ0giKTsKIAl9CiAJZmluYWxseSB7CkBAIC0zMjI4LDUgKzMyMjgsNSBAQAogCQlz
ZWFyY2gobWV0aG9kLCBERUNMQVJBVElPTlN8SUdOT1JFX0RFQ0xBUklOR19UWVBFfElHTk9SRV9S
RVRVUk5fVFlQRSwgU2VhcmNoUGF0dGVybi5SX0NBU0VfU0VOU0lUSVZFIHwgU2VhcmNoUGF0dGVy
bi5SX0VSQVNVUkVfTUFUQ0gsIFNlYXJjaEVuZ2luZS5jcmVhdGVIaWVyYXJjaHlTY29wZSh0eXBl
KSwgdGhpcy5yZXN1bHRDb2xsZWN0b3IpOwogCQlhc3NlcnRTZWFyY2hSZXN1bHRzKCJzcmMvRnVu
Y3Rpb24uamF2YSBSIEZ1bmN0aW9uLmFwcGx5KFQpIFthcHBseV0gRVhBQ1RfTUFUQ0hcbiIgKyAK
LQkJCQkic3JjL1kuamF2YSBqYXZhL2xhbmcvU3RyaW5nIEZ1bmN0aW9uPFN0cmluZyxTdHJpbmc+
IENvbGxlY3RvcnMuY2FzdGluZ0lkZW50aXR5KCk6TGFtYmRhKEZ1bmN0aW9uKS5hcHBseShqYXZh
L2xhbmcvU3RyaW5nKSBbaSAtPl0gRVhBQ1RfTUFUQ0giKTsKKwkJCQkic3JjL1kuamF2YSBqYXZh
LmxhbmcuU3RyaW5nIEZ1bmN0aW9uPFN0cmluZyxTdHJpbmc+IENvbGxlY3RvcnMuY2FzdGluZ0lk
ZW50aXR5KCk6TGFtYmRhKEZ1bmN0aW9uKS5hcHBseShqYXZhLmxhbmcuU3RyaW5nKSBbaSAtPl0g
RVhBQ1RfTUFUQ0giKTsKIAl9CiAJZmluYWxseSB7CkBAIC0zMzAyLDUgKzMzMDIsNSBAQAogCQlz
ZWFyY2gobWV0aG9kLCBERUNMQVJBVElPTlN8SUdOT1JFX0RFQ0xBUklOR19UWVBFfElHTk9SRV9S
RVRVUk5fVFlQRSwgU2VhcmNoUGF0dGVybi5SX0NBU0VfU0VOU0lUSVZFIHwgU2VhcmNoUGF0dGVy
bi5SX0VSQVNVUkVfTUFUQ0gsIFNlYXJjaEVuZ2luZS5jcmVhdGVIaWVyYXJjaHlTY29wZSh0eXBl
KSwgdGhpcy5yZXN1bHRDb2xsZWN0b3IpOwogCQlhc3NlcnRTZWFyY2hSZXN1bHRzKCJzcmMvcDQw
MDkwNS9GdW5jdGlvbi5qYXZhIFIgcDQwMDkwNS5GdW5jdGlvbi5hcHBseShUKSBbYXBwbHldIEVY
QUNUX01BVENIXG4iICsgCi0JCQkJInNyYy9wNDAwOTA1L0NvbGxlY3RvcnMuamF2YSBqYXZhL2xh
bmcvT2JqZWN0IEZ1bmN0aW9uPEksUj4gcDQwMDkwNS5Db2xsZWN0b3JzLmNhc3RpbmdJZGVudGl0
eSgpOkxhbWJkYShGdW5jdGlvbikuYXBwbHkoamF2YS9sYW5nL09iamVjdCkgW2kgLT5dIEVYQUNU
X01BVENIIik7CisJCQkJInNyYy9wNDAwOTA1L0NvbGxlY3RvcnMuamF2YSBqYXZhLmxhbmcuT2Jq
ZWN0IEZ1bmN0aW9uPEksUj4gcDQwMDkwNS5Db2xsZWN0b3JzLmNhc3RpbmdJZGVudGl0eSgpOkxh
bWJkYShGdW5jdGlvbikuYXBwbHkoamF2YS5sYW5nLk9iamVjdCkgW2kgLT5dIEVYQUNUX01BVENI
Iik7CiAJfSBmaW5hbGx5IHsgCiAJCWRlbGV0ZUZvbGRlcihwYXRoKTsKZGlmZiAtLWdpdCBzcmMv
b3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvbW9kZWwvUmVzb2x2ZVRlc3RzMTguamF2YSBzcmMv
b3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvbW9kZWwvUmVzb2x2ZVRlc3RzMTguamF2YQppbmRl
eCA5YzkxYzI5Li5iZDc4Mjk5IDEwMDY0NAotLS0gc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rl
c3RzL21vZGVsL1Jlc29sdmVUZXN0czE4LmphdmEKKysrIHNyYy9vcmcvZWNsaXBzZS9qZHQvY29y
ZS90ZXN0cy9tb2RlbC9SZXNvbHZlVGVzdHMxOC5qYXZhCkBAIC0xNDU1LDUgKzE0NTUsNSBAQAog
CWFzc2VydEVsZW1lbnRzRXF1YWwoCiAJCSJVbmV4cGVjdGVkIGVsZW1lbnRzIiwKLQkJImZpcnN0
IFtpbiBmb28oWCwgamF2YS9sYW5nL09iamVjdCkgW2luIExhbWJkYShJKSBbaW4gaSBbaW4gWCBb
aW4gW1dvcmtpbmcgY29weV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2
ZV1dXV1dXV1dIiwKKwkJImZpcnN0IFtpbiBmb28oWCwgamF2YS5sYW5nLk9iamVjdCkgW2luIExh
bWJkYShJKSBbaW4gaSBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0gWC5qYXZhIFtpbiA8ZGVmYXVs
dD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXV1dIiwKIAkJZWxlbWVudHMKIAkpOwpAQCAtMTQ3
OCw1ICsxNDc4LDUgQEAKIAlhc3NlcnRFbGVtZW50c0VxdWFsKAogCQkiVW5leHBlY3RlZCBlbGVt
ZW50cyIsCi0JCSJzZWNvbmQgW2luIGZvbyhYLCBqYXZhL2xhbmcvT2JqZWN0KSBbaW4gTGFtYmRh
KEkpIFtpbiBpIFtpbiBYIFtpbiBbV29ya2luZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBb
aW4gc3JjIFtpbiBSZXNvbHZlXV1dXV1dXV0iLAorCQkic2Vjb25kIFtpbiBmb28oWCwgamF2YS5s
YW5nLk9iamVjdCkgW2luIExhbWJkYShJKSBbaW4gaSBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0g
WC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXV1dIiwKIAkJZWxl
bWVudHMKIAkpOwpAQCAtMTU5NCw1ICsxNTk0LDUgQEAKIAlhc3NlcnRFbGVtZW50c0VxdWFsKAog
CQkiVW5leHBlY3RlZCBlbGVtZW50cyIsCi0JCSJxIFtpbiBmb28oamF2YS9sYW5nL1N0cmluZywg
aW50KSBbaW4gTGFtYmRhKEspIFtpbiBmb28oamF2YS9sYW5nL1N0cmluZywgamF2YS9sYW5nL1N0
cmluZykgW2luIExhbWJkYShKKSBbaW4gZm9vKGphdmEvbGFuZy9TdHJpbmcsIGphdmEvbGFuZy9T
dHJpbmcpIFtpbiBMYW1iZGEoSSkgW2luIG1haW4oU3RyaW5nW10pIFtpbiBYIFtpbiBbV29ya2lu
ZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1dXV1dXV1d
XV1dIiwKKwkJInEgW2luIGZvbyhqYXZhLmxhbmcuU3RyaW5nLCBpbnQpIFtpbiBMYW1iZGEoSykg
W2luIGZvbyhqYXZhLmxhbmcuU3RyaW5nLCBqYXZhLmxhbmcuU3RyaW5nKSBbaW4gTGFtYmRhKEop
IFtpbiBmb28oamF2YS5sYW5nLlN0cmluZywgamF2YS5sYW5nLlN0cmluZykgW2luIExhbWJkYShJ
KSBbaW4gbWFpbihTdHJpbmdbXSkgW2luIFggW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4g
PGRlZmF1bHQ+IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV1dXV1dXV0iLAogCQllbGVtZW50cwog
CSk7CkBAIC0xNjI5LDUgKzE2MjksNSBAQAogCWFzc2VydEVsZW1lbnRzRXF1YWwoCiAJCSJVbmV4
cGVjdGVkIGVsZW1lbnRzIiwKLQkJInggW2luIGZvbyhqYXZhL2xhbmcvU3RyaW5nLCBqYXZhL2xh
bmcvSW50ZWdlcikgW2luIExhbWJkYShJKSBbaW4gbWFpbihTdHJpbmdbXSkgW2luIFggW2luIFtX
b3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2luIFJlc29sdmVdXV1d
XV1dXSIsCisJCSJ4IFtpbiBmb28oamF2YS5sYW5nLlN0cmluZywgamF2YS5sYW5nLkludGVnZXIp
IFtpbiBMYW1iZGEoSSkgW2luIG1haW4oU3RyaW5nW10pIFtpbiBYIFtpbiBbV29ya2luZyBjb3B5
XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1dXV1dXV0iLAogCQll
bGVtZW50cwogCSk7CkBAIC0xNzg4LDUgKzE3ODgsNSBAQAogCWFzc2VydEVsZW1lbnRzRXF1YWwo
CiAJCSJVbmV4cGVjdGVkIGVsZW1lbnRzIiwKLQkJInYxIFtpbiBhcHBseShqYXZhL2xhbmcvU3Ry
aW5nKSBbaW4gTGFtYmRhKEZ1bmN0aW9uKSBbaW4gcHJvY2Vzc0phcihQYXRoKSBbaW4gSW5zaXN0
ZW50Q2FwdHVyZSBbaW4gW1dvcmtpbmcgY29weV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNy
YyBbaW4gUmVzb2x2ZV1dXV1dXV1dIiwKKwkJInYxIFtpbiBhcHBseShqYXZhLmxhbmcuU3RyaW5n
KSBbaW4gTGFtYmRhKEZ1bmN0aW9uKSBbaW4gcHJvY2Vzc0phcihQYXRoKSBbaW4gSW5zaXN0ZW50
Q2FwdHVyZSBbaW4gW1dvcmtpbmcgY29weV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBb
aW4gUmVzb2x2ZV1dXV1dXV1dIiwKIAkJZWxlbWVudHMsCiAJCXRydWUKQEAgLTE4NTMsNSArMTg1
Myw1IEBACiAJYXNzZXJ0RWxlbWVudHNFcXVhbCgKIAkJIlVuZXhwZWN0ZWQgZWxlbWVudHMiLAot
CQkidjIgW2luIGFwcGx5KGphdmEvbGFuZy9TdHJpbmcpIFtpbiBMYW1iZGEoRnVuY3Rpb24pIFtp
biBwcm9jZXNzSmFyKFBhdGgpIFtpbiBJbnNpc3RlbnRDYXB0dXJlIFtpbiBbV29ya2luZyBjb3B5
XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1dXV1dXV0iLAorCQki
djIgW2luIGFwcGx5KD8gZXh0ZW5kcyBqYXZhLmxhbmcuU3RyaW5nKSBbaW4gTGFtYmRhKEZ1bmN0
aW9uKSBbaW4gcHJvY2Vzc0phcihQYXRoKSBbaW4gSW5zaXN0ZW50Q2FwdHVyZSBbaW4gW1dvcmtp
bmcgY29weV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXV1d
IiwKIAkJZWxlbWVudHMsCiAJCXRydWUKQEAgLTE5MTgsNSArMTkxOCw1IEBACiAJYXNzZXJ0RWxl
bWVudHNFcXVhbCgKIAkJIlVuZXhwZWN0ZWQgZWxlbWVudHMiLAotCQkiczEgW2luIGFjY2VwdChq
YXZhL2xhbmcvU3RyaW5nKSBbaW4gTGFtYmRhKENvbnN1bWVyKSBbaW4gd2l0aFdpbGRjYXJkKFN0
cmVhbTw/IGV4dGVuZHMgU3RyaW5nPikgW2luIEluc2lzdGVudENhcHR1cmUgW2luIFtXb3JraW5n
IGNvcHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV1dXSIs
CisJCSJzMSBbaW4gYWNjZXB0KD8gZXh0ZW5kcyBqYXZhLmxhbmcuU3RyaW5nKSBbaW4gTGFtYmRh
KENvbnN1bWVyKSBbaW4gd2l0aFdpbGRjYXJkKFN0cmVhbTw/IGV4dGVuZHMgU3RyaW5nPikgW2lu
IEluc2lzdGVudENhcHR1cmUgW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1bHQ+
IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV1dXSIsCiAJCWVsZW1lbnRzLAogCQl0cnVlCkBAIC0x
OTgzLDUgKzE5ODMsNSBAQAogCWFzc2VydEVsZW1lbnRzRXF1YWwoCiAJCSJVbmV4cGVjdGVkIGVs
ZW1lbnRzIiwKLQkJInMyIFtpbiBhY2NlcHQoamF2YS9sYW5nL1N0cmluZykgW2luIExhbWJkYShD
b25zdW1lcikgW2luIHdpdGhvdXRXaWxkY2FyZChTdHJlYW08U3RyaW5nPikgW2luIEluc2lzdGVu
dENhcHR1cmUgW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMg
W2luIFJlc29sdmVdXV1dXV1dXSIsCisJCSJzMiBbaW4gYWNjZXB0KGphdmEubGFuZy5TdHJpbmcp
IFtpbiBMYW1iZGEoQ29uc3VtZXIpIFtpbiB3aXRob3V0V2lsZGNhcmQoU3RyZWFtPFN0cmluZz4p
IFtpbiBJbnNpc3RlbnRDYXB0dXJlIFtpbiBbV29ya2luZyBjb3B5XSBYLmphdmEgW2luIDxkZWZh
dWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1dXV1dXV0iLAogCQllbGVtZW50cywKIAkJdHJ1ZQoj
UCBvcmcuZWNsaXBzZS5qZHQuY29yZQpkaWZmIC0tZ2l0IG1vZGVsL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb3JlL0xhbWJkYU1ldGhvZC5qYXZhIG1vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb3JlL0xhbWJkYU1ldGhvZC5qYXZhCmluZGV4IGM1YmQzYmEuLjg0MGFhNDQgMTAwNjQ0
Ci0tLSBtb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9MYW1iZGFNZXRob2QuamF2
YQorKysgbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvTGFtYmRhTWV0aG9kLmph
dmEKQEAgLTI0LDQgKzI0LDUgQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29t
cGlsZXIuYXN0LkFyZ3VtZW50OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21w
aWxlci5sb29rdXAuQmluZGluZzsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29t
cGlsZXIubG9va3VwLlR5cGVCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5h
bC5jb3JlLnV0aWwuVXRpbDsKIApAQCAtNDgsOSArNDksOSBAQAogCQlTdHJpbmcgW10gcGFyYW1l
dGVyVHlwZXMgPSBuZXcgU3RyaW5nW2xlbmd0aCA9IGxhbWJkYUV4cHJlc3Npb24uZGVzY3JpcHRv
ci5wYXJhbWV0ZXJzLmxlbmd0aF07CiAJCWZvciAoaW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKysp
Ci0JCQlwYXJhbWV0ZXJUeXBlc1tpXSA9IG1hbmFnZXIuaW50ZXJuKG5ldyBTdHJpbmcobGFtYmRh
RXhwcmVzc2lvbi5kZXNjcmlwdG9yLnBhcmFtZXRlcnNbaV0uc2lnbmF0dXJlKCkpKTsKKwkJCXBh
cmFtZXRlclR5cGVzW2ldID0gZ2V0VHlwZVNpZ25hdHVyZShtYW5hZ2VyLCBsYW1iZGFFeHByZXNz
aW9uLmRlc2NyaXB0b3IucGFyYW1ldGVyc1tpXSk7CiAJCVN0cmluZyBbXSBwYXJhbWV0ZXJOYW1l
cyA9IG5ldyBTdHJpbmdbbGVuZ3RoXTsKIAkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkr
KykKIAkJCXBhcmFtZXRlck5hbWVzW2ldID0gbWFuYWdlci5pbnRlcm4obmV3IFN0cmluZyhsYW1i
ZGFFeHByZXNzaW9uLmFyZ3VtZW50c1tpXS5uYW1lKSk7Ci0JCVN0cmluZyByZXR1cm5UeXBlID0g
bWFuYWdlci5pbnRlcm4obmV3IFN0cmluZyhTaWduYXR1cmUudG9DaGFyQXJyYXkobGFtYmRhRXhw
cmVzc2lvbi5kZXNjcmlwdG9yLnJldHVyblR5cGUuc2lnbmF0dXJlKCkpKSk7CisJCVN0cmluZyBy
ZXR1cm5UeXBlID0gZ2V0VHlwZVNpZ25hdHVyZShtYW5hZ2VyLCBsYW1iZGFFeHByZXNzaW9uLmRl
c2NyaXB0b3IucmV0dXJuVHlwZSk7CiAJCVN0cmluZyBzZWxlY3RvciA9IG1hbmFnZXIuaW50ZXJu
KG5ldyBTdHJpbmcobGFtYmRhRXhwcmVzc2lvbi5kZXNjcmlwdG9yLnNlbGVjdG9yKSk7CiAJCVN0
cmluZyBrZXkgPSBuZXcgU3RyaW5nKGxhbWJkYUV4cHJlc3Npb24uZGVzY3JpcHRvci5jb21wdXRl
VW5pcXVlS2V5KCkpOwpAQCAtODksNSArOTAsNSBAQAogCQkJYXJndW1lbnROYW1lc1tpXSA9IG1h
bmFnZXIuaW50ZXJuKHBhcmFtZXRlck5hbWVzW2ldLnRvQ2hhckFycmF5KCkpOwogCQlpbmZvLnNl
dEFyZ3VtZW50TmFtZXMoYXJndW1lbnROYW1lcyk7Ci0JCWluZm8uc2V0UmV0dXJuVHlwZShtYW5h
Z2VyLmludGVybihyZXR1cm5UeXBlLnRvQ2hhckFycmF5KCkpKTsKKwkJaW5mby5zZXRSZXR1cm5U
eXBlKG1hbmFnZXIuaW50ZXJuKFNpZ25hdHVyZS50b0NoYXJBcnJheShyZXR1cm5UeXBlLnRvQ2hh
ckFycmF5KCkpKSk7CiAJCWluZm8uc2V0RXhjZXB0aW9uVHlwZU5hbWVzKENoYXJPcGVyYXRpb24u
Tk9fQ0hBUl9DSEFSKTsKIAkJaW5mby5hcmd1bWVudHMgPSBudWxsOyAvLyB3aWxsIGJlIHVwZGF0
ZWQgc2hvcnRseSwgcGFyZW50IGhhcyB0byBjb21lIGludG8gZXhpc3RlbmNlIGZpcnN0LgpAQCAt
OTUsNCArOTYsMjIgQEAKIAl9CiAKKwlwdWJsaWMgc3RhdGljIFN0cmluZyBnZXRUeXBlU2lnbmF0
dXJlKEphdmFNb2RlbE1hbmFnZXIgbWFuYWdlciwgVHlwZUJpbmRpbmcgdHlwZSkgeworCQljaGFy
W10gbmFtZSA9IHR5cGUucmVhZGFibGVOYW1lKCk7CisJCW5hbWUgPSBDaGFyT3BlcmF0aW9uLnJl
cGxhY2VPbkNvcHkobmFtZSwgJy8nLCAnLicpOworCQlyZXR1cm4gbWFuYWdlci5pbnRlcm4oU2ln
bmF0dXJlLmNyZWF0ZVR5cGVTaWduYXR1cmUobmFtZSwgdHJ1ZSkpOworCX0KKworCS8qKgorCSAq
IEBzZWUgSU1ldGhvZAorCSAqLworCXB1YmxpYyBTdHJpbmcgZ2V0UmV0dXJuVHlwZSgpIHRocm93
cyBKYXZhTW9kZWxFeGNlcHRpb24geworCQlyZXR1cm4gdGhpcy5yZXR1cm5UeXBlU3RyaW5nOwor
CX0KKwkvKioKKwkgKiBAc2VlIElNZXRob2QKKwkgKi8KKwlwdWJsaWMgU3RyaW5nIGdldFNpZ25h
dHVyZSgpIHRocm93cyBKYXZhTW9kZWxFeGNlcHRpb24geworCQlyZXR1cm4gU2lnbmF0dXJlLmNy
ZWF0ZU1ldGhvZFNpZ25hdHVyZSh0aGlzLnBhcmFtZXRlclR5cGVzLCB0aGlzLnJldHVyblR5cGVT
dHJpbmcpOworCX0KIAkvKioKIAkgKiBAc2VlIElNZXRob2QjaXNMYW1iZGFNZXRob2QoKQpkaWZm
IC0tZ2l0IG1vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL1NlbGVjdGlvblJlcXVl
c3Rvci5qYXZhIG1vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL1NlbGVjdGlvblJl
cXVlc3Rvci5qYXZhCmluZGV4IGRlMzk2NmMuLjE1MDlhNTggMTAwNjQ0Ci0tLSBtb2RlbC9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9TZWxlY3Rpb25SZXF1ZXN0b3IuamF2YQorKysgbW9k
ZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvU2VsZWN0aW9uUmVxdWVzdG9yLmphdmEK
QEAgLTEsNCArMSw0IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChj
KSAyMDAwLCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChj
KSAyMDAwLCAyMDE0IElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyBy
ZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICog
YXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMg
TGljZW5zZSB2MS4wCkBAIC00NjYsNSArNDY2LDUgQEAKIAkJCQlsb2NhbC5zb3VyY2VTdGFydCwK
IAkJCQlsb2NhbC5zb3VyY2VFbmQsCi0JCQkJbG9jYWwudHlwZSA9PSBudWxsID8gU2lnbmF0dXJl
LmNyZWF0ZVR5cGVTaWduYXR1cmUoYmluZGluZy50eXBlLnJlYWRhYmxlTmFtZSgpLCBmYWxzZSkg
OiBVdGlsLnR5cGVTaWduYXR1cmUobG9jYWwudHlwZSksCisJCQkJbG9jYWwudHlwZSA9PSBudWxs
ID8gU2lnbmF0dXJlLmNyZWF0ZVR5cGVTaWduYXR1cmUoYmluZGluZy50eXBlLnJlYWRhYmxlTmFt
ZSgpLCB0cnVlKSA6IFV0aWwudHlwZVNpZ25hdHVyZShsb2NhbC50eXBlKSwKIAkJCQlsb2NhbC5h
bm5vdGF0aW9ucywKIAkJCQlsb2NhbC5tb2RpZmllcnMs
</data>

          </attachment>
      

    </bug>

</bugzilla>