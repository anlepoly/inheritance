<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>438471</bug_id>
          
          <creation_ts>2014-06-29 00:07:00 -0400</creation_ts>
          <short_desc>[1.8][compiler] Java 1.8 functional interface rejected if it extends an interface which overrides another interface&apos;s method</short_desc>
          <delta_ts>2015-01-20 09:28:29 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.4.2</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Nicholas Hinds">hindsn</reporter>
          <assigned_to name="Sasikanth Bharadwaj">saammana</assigned_to>
          <cc>jarthana</cc>
    
    <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="63139"
          type_id="1"
          status="+"
          setter="srikanth_sankaran"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2421882</commentid>
    <comment_count>0</comment_count>
    <who name="Nicholas Hinds">hindsn</who>
    <bug_when>2014-06-29 00:07:47 -0400</bug_when>
    <thetext>When a functional interface extends another interface which overrides a method in a parent interface, eclipse tags the functional interface with an error &quot;Invalid &apos;@FunctionalInterface&apos; annotation; Bar is not a functional interface&quot;

Ran into this with an interface which extended BaseStream (which redefines the close() method from AutoCloseable without providing an implementation).

Simple code which reproduces the issue:

// &quot;Invalid &apos;@FunctionalInterface&apos; annotation; Bar is not a functional interface&quot;
@FunctionalInterface
public interface Bar extends Overridden {
	void foo();

	@Override
	default void close() {
	}
}

interface Overridden extends AutoCloseable {
	// Works without this overridden method
	@Override
	void close();
}

Removing the overridden close() method from the interface &apos;Overridden&apos; makes &apos;Bar&apos; compile correctly.

This code compiles correctly with javac.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2421883</commentid>
    <comment_count>1</comment_count>
    <who name="Nicholas Hinds">hindsn</who>
    <bug_when>2014-06-29 00:11:11 -0400</bug_when>
    <thetext>This is similar to bugs #430310 and #423467, but not fixed by either of those changes.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2425419</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-07-08 05:32:02 -0400</bug_when>
    <thetext>See also my implementation proposal in bug 438962.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2436104</commentid>
    <comment_count>3</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-08-06 03:31:35 -0400</bug_when>
    <thetext>My contribution for this defect fix complies with http://www.eclipse.org/legal/CoO.php</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2436124</commentid>
    <comment_count>4</comment_count>
      <attachid>245754</attachid>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-08-06 04:14:43 -0400</bug_when>
    <thetext>Created attachment 245754
Proposed fix and test</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2436127</commentid>
    <comment_count>5</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-08-06 04:26:09 -0400</bug_when>
    <thetext>Overridden methods in interfaces are excluded only when an abstract method is rendered default by an inheriting interface. That&apos;s why both the close() methods show up in the inherited contracts of Bar, but only one is excluded. Hence we end up with two abstract methods in Bar - foo() and close() from overridden. Patch changes this behavior - overridden methods are always excluded and default methods themselves are excluded from the interface contracts.

All tests pass, Srikanth, please review</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2440290</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-08-19 02:40:48 -0400</bug_when>
    <thetext>(In reply to Sasikanth Bharadwaj from comment #5)

&gt; All tests pass, Srikanth, please review

Something wrong with the new test - it passes without the fix. Please take
a look, TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2440295</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-08-19 03:10:27 -0400</bug_when>
    <thetext>Fixed test to include the @FunctionalInterface annotation and (b) adjusted
the copyright to be proper (2013, 2014) and released for M2 here: 
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=0f759b07c6429afc1f52aea8d8fb2a9dd22f7a92

Jay, we should include this for SR2 I think - do you agree ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2440862</commentid>
    <comment_count>8</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-08-19 10:23:54 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #7)
&gt; Jay, we should include this for SR2 I think - do you agree ?

Sure, I suppose this is too complicated and not sufficiently tested for SR1?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2452827</commentid>
    <comment_count>9</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-09-16 21:56:08 -0400</bug_when>
    <thetext>Verified for Mars 4.5M2 using I20140915-2000 build.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2473920</commentid>
    <comment_count>10</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-10-30 03:01:56 -0400</bug_when>
    <thetext>+1 for back porting, reopening.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2477658</commentid>
    <comment_count>11</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-11-06 03:09:22 -0500</bug_when>
    <thetext>Released in R4_4_maintenance via commit(s):

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=R4_4_maintenance&amp;id=cbe578fc2328aac4b0fdcc0301407bae48adcde5</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2507855</commentid>
    <comment_count>12</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-01-20 09:28:29 -0500</bug_when>
    <thetext>Verified for 4.4.2 RC1 with build M20150114-1500</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>245754</attachid>
            <date>2014-08-06 04:14:00 -0400</date>
            <delta_ts>2014-08-06 04:14:43 -0400</delta_ts>
            <desc>Proposed fix and test</desc>
            <filename>Fix-and-test-for-bug-438471.patch</filename>
            <type>text/plain</type>
            <size>3420</size>
            <attacher name="Sasikanth Bharadwaj">saammana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0ludGVyZmFjZU1ldGhv
ZHNUZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3Jn
L2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9JbnRlcmZhY2VNZXRo
b2RzVGVzdC5qYXZhCmluZGV4IGU4NzdlODQuLmI1MDc3MWYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0
cy9jb21waWxlci9yZWdyZXNzaW9uL0ludGVyZmFjZU1ldGhvZHNUZXN0LmphdmEKKysrIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vSW50ZXJmYWNlTWV0aG9kc1Rlc3QuamF2YQpAQCAt
MSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIw
MTMgR0sgU29mdHdhcmUgQUcsIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJp
Z2h0IChjKSAyMDE0IEdLIFNvZnR3YXJlIEFHLCBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4K
ICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWlu
ZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhl
IEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBk
aXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKQEAgLTI1MDIsNCArMjUwMiwyNSBAQAog
CQkJfSwKIAkJCSIiKTsKIAl9CisJLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hv
d19idWcuY2dpP2lkPTQzODQ3MSwgSmF2YSAxLjggZnVuY3Rpb25hbCBpbnRlcmZhY2UgcmVqZWN0
ZWQgaWYgaXQgZXh0ZW5kcyBhbiBpbnRlcmZhY2Ugd2hpY2ggb3ZlcnJpZGVzIGFub3RoZXIgaW50
ZXJmYWNlJ3MgbWV0aG9kCisJcHVibGljIHZvaWQgdGVzdDQzODQ3MSgpIHRocm93cyBFeGNlcHRp
b24geworCQl0aGlzLnJ1bkNvbmZvcm1UZXN0KAorCQkJbmV3IFN0cmluZ1tdIHsKKwkJCQkiQmFy
LmphdmEiLAorCQkJCSJwdWJsaWMgaW50ZXJmYWNlIEJhciBleHRlbmRzIE92ZXJyaWRkZW4ge1xu
IiArIAorCQkJCQkiCXZvaWQgZm9vKCk7XG4iICsgCisJCQkJCSIJQE92ZXJyaWRlXG4iICsgCisJ
CQkJCSIJZGVmYXVsdCB2b2lkIGNsb3NlKCkge1xuIiArIAorCQkJCQkiCQlTeXN0ZW0ub3V0LnBy
aW50bG4oXCJiYXJcIik7XG4iICsgCisJCQkJCSIJfVxuIiArIAorCQkJCQkifVxuIiArIAorCQkJ
CQkiXG4iICsgCisJCQkJCSJpbnRlcmZhY2UgT3ZlcnJpZGRlbiBleHRlbmRzIEF1dG9DbG9zZWFi
bGUge1xuIiArIAorCQkJCQkiCS8vIFdvcmtzIHdpdGhvdXQgdGhpcyBvdmVycmlkZGVuIG1ldGhv
ZFxuIiArIAorCQkJCQkiCUBPdmVycmlkZVxuIiArIAorCQkJCQkiCXZvaWQgY2xvc2UoKTtcbiIg
KyAKKwkJCQkJIn0iCisJCQl9LAorCQkJIiIpOworCX0KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9s
b29rdXAvUmVmZXJlbmNlQmluZGluZy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9SZWZlcmVuY2VCaW5k
aW5nLmphdmEKaW5kZXggYTdlNDJjNS4uYjg3YTQyMSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1
cC9SZWZlcmVuY2VCaW5kaW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9SZWZlcmVuY2VCaW5k
aW5nLmphdmEKQEAgLTE5MDMsMTkgKzE5MDMsMTggQEAKIAkJCWNvbnRpbnVlOwogCQlpZiAoIW1l
dGhvZC5pc1ZhbGlkQmluZGluZygpKSAKIAkJCXRocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRp
b24oIk5vdCBhIGZ1bmN0aW9uYWwgaW50ZXJmYWNlIik7IC8vJE5PTi1OTFMtMSQKLQkJaWYgKG1l
dGhvZC5pc0RlZmF1bHRNZXRob2QoKSkgewotCQkJZm9yIChpbnQgaiA9IDA7IGogPCBjb250cmFj
dHNDb3VudDsgaisrKSB7Ci0JCQkJaWYgKGNvbnRyYWN0c1tqXSA9PSBudWxsKQotCQkJCQljb250
aW51ZTsKLQkJCQlpZiAoTWV0aG9kVmVyaWZpZXIuZG9lc01ldGhvZE92ZXJyaWRlKG1ldGhvZCwg
Y29udHJhY3RzW2pdLCBzY29wZS5lbnZpcm9ubWVudCgpKSkgewotCQkJCQljb250cmFjdHNDb3Vu
dC0tOwotCQkJCQkvLyBhYnN0cmFjdCBtZXRob2QgZnJvbSBzdXBlciB0eXBlIHJlbmRlcmVkIGRl
ZmF1bHQgYnkgcHJlc2VudCBpbnRlcmZhY2UgPT0+IGNvbnRyYWN0c1tqXSA9IG51bGw7Ci0JCQkJ
CWlmIChqIDwgY29udHJhY3RzQ291bnQpCi0JCQkJCQlTeXN0ZW0uYXJyYXljb3B5KGNvbnRyYWN0
cywgaisxLCBjb250cmFjdHMsIGosIGNvbnRyYWN0c0NvdW50IC0gaik7Ci0JCQkJfQorCQlmb3Ig
KGludCBqID0gMDsgaiA8IGNvbnRyYWN0c0NvdW50OyBqKyspIHsKKwkJCWlmIChjb250cmFjdHNb
al0gPT0gbnVsbCkKKwkJCQljb250aW51ZTsKKwkJCWlmIChNZXRob2RWZXJpZmllci5kb2VzTWV0
aG9kT3ZlcnJpZGUobWV0aG9kLCBjb250cmFjdHNbal0sIHNjb3BlLmVudmlyb25tZW50KCkpKSB7
CisJCQkJY29udHJhY3RzQ291bnQtLTsKKwkJCQkvLyBhYnN0cmFjdCBtZXRob2QgZnJvbSBzdXBl
ciB0eXBlIG92ZXJyaWRkZW4gYnkgcHJlc2VudCBpbnRlcmZhY2UgPT0+IGNvbnRyYWN0c1tqXSA9
IG51bGw7CisJCQkJaWYgKGogPCBjb250cmFjdHNDb3VudCkKKwkJCQkJU3lzdGVtLmFycmF5Y29w
eShjb250cmFjdHMsIGorMSwgY29udHJhY3RzLCBqLCBjb250cmFjdHNDb3VudCAtIGopOwogCQkJ
fQotCQkJY29udGludWU7IC8vIHNraXAgZGVmYXVsdCBtZXRob2QgaXRzZWxmCiAJCX0KKwkJaWYg
KG1ldGhvZC5pc0RlZmF1bHRNZXRob2QoKSkKKwkJCWNvbnRpbnVlOyAvLyBza2lwIGRlZmF1bHQg
bWV0aG9kIGl0c2VsZgogCQlpZiAoY29udHJhY3RzQ291bnQgPT0gY29udHJhY3RzTGVuZ3RoKSB7
CiAJCQlTeXN0ZW0uYXJyYXljb3B5KGNvbnRyYWN0cywgMCwgY29udHJhY3RzID0gbmV3IE1ldGhv
ZEJpbmRpbmdbY29udHJhY3RzTGVuZ3RoICs9IDE2XSwgMCwgY29udHJhY3RzQ291bnQpOwogCQl9
</data>

          </attachment>
      

    </bug>

</bugzilla>