<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>340691</bug_id>
          
          <creation_ts>2011-03-22 13:22:00 -0400</creation_ts>
          <short_desc>Syntax error leads to ClassCastException in ASTConverter</short_desc>
          <delta_ts>2011-04-25 04:45:53 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.7</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>3.7 M7</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Markus Keller">markus_keller</reporter>
          <assigned_to name="Ayushman Jain">amj87.iitr</assigned_to>
          <cc>Olivier_Thomann</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1902335</commentid>
    <comment_count>0</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2011-03-22 13:22:15 -0400</bug_when>
    <thetext>HEAD

Have this CU with syntax errors:

package xy;
public class Try {
    public static void main(String[] args) {
        synchronized
        new Thread() {
            public void run() {
            }
        }.start();
        
        for (int i= 0; i &lt; 10; i++) {
            System.out.println(&quot;batch &quot; + i);
            for (int j= 0; j &lt; 1000*1000*1000; j++) {
                new Integer(1);
            }
        }
    }
}


The ASTParser doesn&apos;t really like this:

Error
Tue Mar 22 18:19:44 CET 2011
Error in JDT Core during AST creation

java.lang.ClassCastException: org.eclipse.jdt.core.dom.EnumDeclaration cannot be cast to org.eclipse.jdt.core.dom.TypeDeclaration
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2430)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:532)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2636)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1218)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:289)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1201)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:801)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:470)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:127)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1902491</commentid>
    <comment_count>1</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-03-22 22:09:50 -0400</bug_when>
    <thetext>The synchronized leads to an empty enum type that looks like this:
synchronized enum $missing$ {
  $missing$() {
    super();
  }
  &lt;clinit&gt;() {
  }
}
So it blows up. I am investigating.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1902691</commentid>
    <comment_count>2</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-03-23 09:57:27 -0400</bug_when>
    <thetext>At this stage, the best we can do is to prevent the exception. The recovery is doing a poor job at getting a tree for the method body in this case.
So we can tag some nodes as MALFORMED.
The resulting tree is not really usable for refactoring as the only statement recovered in this method body is the synchronized keyword. Everything else is ignored after the syntax error.

What AST would you expect in this case ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1902924</commentid>
    <comment_count>3</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2011-03-23 15:49:29 -0400</bug_when>
    <thetext>Simplified example:

public class Try {
    public static void main(String[] args) {
        synchronized
        new Object();
    }
}


(In reply to comment #2)
&gt; What AST would you expect in this case ?

Ideally one where just the bad keyword is removed or recovered (similar to when I use &apos;void&apos; or &apos;synchronizedXXX&apos; instead). If that&apos;s too much work, an empty body (MALFORMED Block with no statements) is also fine.

Note that synchronized is not the only keyword causing trouble here.
public protected private static final strictfp etc. have the same problem.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1908798</commentid>
    <comment_count>4</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-04-05 09:33:13 -0400</bug_when>
    <thetext>Ayushman, please try to see if there is a better way to recover from the synchronized modifier alone.
If it possible to prevent the CCE, but we should see if there is a better way to recover first.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1912504</commentid>
    <comment_count>5</comment_count>
      <attachid>193087</attachid>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-04-12 15:37:46 -0400</bug_when>
    <thetext>Created attachment 193087
proposed fix

This happens in the recovery because scope trial succeeds for the rule EnumHeaderName ::= Modifiersopt &apos;enum&apos; Identifier (since &apos;synchronized&apos;, &apos;private&apos;, &apos;strictfp&apos; etc are all modifiers), which is more permissive than it should be. Yet, there&apos;s no other option as well. 

The attached patch just makes sure that if the recovery, specifically the statements recovery finds a recovered enum declaration, it does not add it as a child to the recovered elements. The normal recovery will still find enums when they&apos;re declared in the usual correct manner.

Olivier, what do you think about this approach? I&apos;ll add test cases if you approve.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1912510</commentid>
    <comment_count>6</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-04-12 15:46:23 -0400</bug_when>
    <thetext>I like the approach. I think it would even be better if this rule is not considered at all for the recovery as the suggestion for the syntax error is misleading. I am not sure if this is really doable.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1912513</commentid>
    <comment_count>7</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-04-12 15:51:52 -0400</bug_when>
    <thetext>(In reply to comment #6)
&gt; I like the approach. I think it would even be better if this rule is not
&gt; considered at all for the recovery as the suggestion for the syntax error is
&gt; misleading. I am not sure if this is really doable.

I did try to think about that, but its not really doable. Recovery has 1:1 mapping to the grammar, and unless we can rewrite the rule EnumHeaderName ::= Modifiersopt &apos;enum&apos; Identifier to make it more strict and allow only the valid modifiers, we can&apos;t achieve any change in the recovery. That, ofcourse, won&apos;t be a very clean way. I have not been able to find any explanation though, as to why EnumHeaderName is chosen over ClassHeaderName. Looks like a random choice to me.

Anyway, with the above patch all tests.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1912797</commentid>
    <comment_count>8</comment_count>
      <attachid>193140</attachid>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-04-13 05:54:00 -0400</bug_when>
    <thetext>Created attachment 193140
proposed fix + tests

Same patch with tests added.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1912951</commentid>
    <comment_count>9</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-04-13 10:03:44 -0400</bug_when>
    <thetext>+1</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1913056</commentid>
    <comment_count>10</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-04-13 12:11:58 -0400</bug_when>
    <thetext>Released in HEAD for 3.7M7</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1918297</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-04-25 04:45:53 -0400</bug_when>
    <thetext>Verified for 3.7 M7 using build I20110421-1800</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>193087</attachid>
            <date>2011-04-12 15:37:00 -0400</date>
            <delta_ts>2011-04-13 05:54:00 -0400</delta_ts>
            <desc>proposed fix</desc>
            <filename>patch340691.txt</filename>
            <type>text/plain</type>
            <size>951</size>
            <attacher name="Ayushman Jain">amj87.iitr</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMA0KI1Agb3JnLmVjbGlwc2UuamR0LmNvcmUN
CkluZGV4OiBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcGFyc2Vy
L1BhcnNlci5qYXZhDQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09DQpSQ1MgZmlsZTogL2N2c3Jvb3QvZWNsaXBzZS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvcGFyc2VyL1BhcnNlci5qYXZhLHYNCnJldHJpZXZpbmcgcmV2aXNpb24gMS40MjUNCmRpZmYg
LXUgLXIxLjQyNSBQYXJzZXIuamF2YQ0KLS0tIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9wYXJzZXIvUGFyc2VyLmphdmEJNiBBcHIgMjAxMSAyMjoyNjowMyAtMDAw
MAkxLjQyNQ0KKysrIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9w
YXJzZXIvUGFyc2VyLmphdmEJMTIgQXByIDIwMTEgMTk6MDk6MTkgLTAwMDANCkBAIC0xMDE2LDYg
KzEwMTYsMTAgQEANCiAJCX0NCiAJCWlmIChub2RlIGluc3RhbmNlb2YgVHlwZURlY2xhcmF0aW9u
KXsNCiAJCQlUeXBlRGVjbGFyYXRpb24gdHlwZSA9IChUeXBlRGVjbGFyYXRpb24pIG5vZGU7DQor
CQkJaWYgKCh0eXBlLm1vZGlmaWVycyAmIENsYXNzRmlsZUNvbnN0YW50cy5BY2NFbnVtKSAhPSAw
KSB7DQorCQkJCS8vIGRvIG5vdCBhbGxvdyBlbnVtcyB0byBiZSBidWlsZCBhcyByZWNvdmVyeSB0
eXBlcw0KKwkJCQljb250aW51ZTsNCisJCQl9DQogCQkJaWYgKHR5cGUuZGVjbGFyYXRpb25Tb3Vy
Y2VFbmQgPT0gMCl7DQogCQkJCWVsZW1lbnQgPSBlbGVtZW50LmFkZCh0eXBlLCAwKTsNCiAJCQkJ
dGhpcy5sYXN0Q2hlY2tQb2ludCA9IHR5cGUuYm9keVN0YXJ0Ow0K
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>193140</attachid>
            <date>2011-04-13 05:54:00 -0400</date>
            <delta_ts>2011-04-13 05:54:00 -0400</delta_ts>
            <desc>proposed fix + tests</desc>
            <filename>patch340691.txt</filename>
            <type>text/plain</type>
            <size>7683</size>
            <attacher name="Ayushman Jain">amj87.iitr</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMA0KI1Agb3JnLmVjbGlwc2UuamR0LmNvcmUN
CkluZGV4OiBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcGFyc2Vy
L1BhcnNlci5qYXZhDQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09DQpSQ1MgZmlsZTogL2N2c3Jvb3QvZWNsaXBzZS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvcGFyc2VyL1BhcnNlci5qYXZhLHYNCnJldHJpZXZpbmcgcmV2aXNpb24gMS40MjUNCmRpZmYg
LXUgLXIxLjQyNSBQYXJzZXIuamF2YQ0KLS0tIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9wYXJzZXIvUGFyc2VyLmphdmEJNiBBcHIgMjAxMSAyMjoyNjowMyAtMDAw
MAkxLjQyNQ0KKysrIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9w
YXJzZXIvUGFyc2VyLmphdmEJMTMgQXByIDIwMTEgMDk6MzU6MjMgLTAwMDANCkBAIC0xMDE2LDYg
KzEwMTYsMTEgQEANCiAJCX0NCiAJCWlmIChub2RlIGluc3RhbmNlb2YgVHlwZURlY2xhcmF0aW9u
KXsNCiAJCQlUeXBlRGVjbGFyYXRpb24gdHlwZSA9IChUeXBlRGVjbGFyYXRpb24pIG5vZGU7DQor
CQkJaWYgKCh0eXBlLm1vZGlmaWVycyAmIENsYXNzRmlsZUNvbnN0YW50cy5BY2NFbnVtKSAhPSAw
KSB7DQorCQkJCS8vIGRvIG5vdCBhbGxvdyBlbnVtcyB0byBiZSBidWlsZCBhcyByZWNvdmVyeSB0
eXBlcw0KKwkJCQkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/
aWQ9MzQwNjkxDQorCQkJCWNvbnRpbnVlOw0KKwkJCX0NCiAJCQlpZiAodHlwZS5kZWNsYXJhdGlv
blNvdXJjZUVuZCA9PSAwKXsNCiAJCQkJZWxlbWVudCA9IGVsZW1lbnQuYWRkKHR5cGUsIDApOw0K
IAkJCQl0aGlzLmxhc3RDaGVja1BvaW50ID0gdHlwZS5ib2R5U3RhcnQ7DQojUCBvcmcuZWNsaXBz
ZS5qZHQuY29yZS50ZXN0cy5jb21waWxlcg0KSW5kZXg6IHNyYy9vcmcvZWNsaXBzZS9qZHQvY29y
ZS90ZXN0cy9jb21waWxlci9wYXJzZXIvRGlldFJlY292ZXJ5VGVzdC5qYXZhDQo9PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
DQpSQ1MgZmlsZTogL2N2c3Jvb3QvZWNsaXBzZS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5j
b21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcGFyc2VyL0Rp
ZXRSZWNvdmVyeVRlc3QuamF2YSx2DQpyZXRyaWV2aW5nIHJldmlzaW9uIDEuNjMNCmRpZmYgLXUg
LXIxLjYzIERpZXRSZWNvdmVyeVRlc3QuamF2YQ0KLS0tIHNyYy9vcmcvZWNsaXBzZS9qZHQvY29y
ZS90ZXN0cy9jb21waWxlci9wYXJzZXIvRGlldFJlY292ZXJ5VGVzdC5qYXZhCTIyIEFwciAyMDEw
IDA0OjM5OjAxIC0wMDAwCTEuNjMNCisrKyBzcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
Y29tcGlsZXIvcGFyc2VyL0RpZXRSZWNvdmVyeVRlc3QuamF2YQkxMyBBcHIgMjAxMSAwOTozNToy
OSAtMDAwMA0KQEAgLTEsNSArMSw1IEBADQogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCi0gKiBD
b3B5cmlnaHQgKGMpIDIwMDAsIDIwMTAgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuDQorICog
Q29weXJpZ2h0IChjKSAyMDAwLCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLg0KICAq
IEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBt
YXRlcmlhbHMNCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBF
Y2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjANCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRp
c3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdA0KQEAgLTc2MTksMTkgKzc2MTksMTIgQEAN
CiAJCQkifVxuIjsNCiAJfSBlbHNlIHsNCiAJCWV4cGVjdGVkRGlldFBsdXNCb2R5UGx1c1N0YXRl
bWVudHNSZWNvdmVyeVVuaXRUb1N0cmluZyA9DQotCQkJInB1YmxpYyBjbGFzcyBUZXN0IHtcbiIg
Kw0KLQkJCSIgIHB1YmxpYyBUZXN0KCkge1xuIiArDQotCQkJIiAgICBzdXBlcigpO1xuIiArDQot
CQkJIiAgfVxuIiArDQotCQkJIiAgdm9pZCBhTWV0aG9kKCkge1xuIiArDQotCQkJIiAgICBwdWJs
aWMgc3RhdGljIEBtMSgpIGVudW0gJG1pc3NpbmckIHtcbiIgKw0KLQkJCSIgICAgICBwdWJsaWMg
JG1pc3NpbmckKCkge1xuIiArDQotCQkJIiAgICAgICAgc3VwZXIoKTtcbiIgKw0KLQkJCSIgICAg
ICB9XG4iICsNCi0JCQkiICAgICAgPGNsaW5pdD4oKSB7XG4iICsNCi0JCQkiICAgICAgfVxuIiAr
DQotCQkJIiAgICB9XG4iICsNCi0JCQkiICB9XG4iICsNCisJCQkicHVibGljIGNsYXNzIFRlc3Qg
e1xuIiArIA0KKwkJCSIgIHB1YmxpYyBUZXN0KCkge1xuIiArIA0KKwkJCSIgICAgc3VwZXIoKTtc
biIgKyANCisJCQkiICB9XG4iICsgDQorCQkJIiAgdm9pZCBhTWV0aG9kKCkge1xuIiArIA0KKwkJ
CSIgIH1cbiIgKyANCiAJCQkifVxuIjsNCiAJfQ0KIA0KSW5kZXg6IHNyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9wYXJzZXIvU3RhdGVtZW50UmVjb3ZlcnlUZXN0XzFfNS5q
YXZhDQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09DQpSQ1MgZmlsZTogL2N2c3Jvb3QvZWNsaXBzZS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29t
cGlsZXIvcGFyc2VyL1N0YXRlbWVudFJlY292ZXJ5VGVzdF8xXzUuamF2YSx2DQpyZXRyaWV2aW5n
IHJldmlzaW9uIDEuNw0KZGlmZiAtdSAtcjEuNyBTdGF0ZW1lbnRSZWNvdmVyeVRlc3RfMV81Lmph
dmENCi0tLSBzcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcGFyc2VyL1N0
YXRlbWVudFJlY292ZXJ5VGVzdF8xXzUuamF2YQkyNyBKdW4gMjAwOCAxNjowNDo0NiAtMDAwMAkx
LjcNCisrKyBzcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcGFyc2VyL1N0
YXRlbWVudFJlY292ZXJ5VGVzdF8xXzUuamF2YQkxMyBBcHIgMjAxMSAwOTozNToyOSAtMDAwMA0K
QEAgLTEsNSArMSw1IEBADQogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCi0gKiBDb3B5cmlnaHQg
KGMpIDIwMDAsIDIwMDggSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuDQorICogQ29weXJpZ2h0
IChjKSAyMDAwLCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLg0KICAqIEFsbCByaWdo
dHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMN
CiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1
YmxpYyBMaWNlbnNlIHYxLjANCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlv
biwgYW5kIGlzIGF2YWlsYWJsZSBhdA0KQEAgLTcyOCw0ICs3MjgsNjUgQEANCiAJCWV4cGVjdGVk
RnVsbFdpdGhTdGF0ZW1lbnRSZWNvdmVyeVVuaXRUb1N0cmluZywNCiAJCXRlc3ROYW1lKTsNCiB9
DQorLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM0MDY5
MQ0KKy8vIFZlcmlmeSB0aGF0IHdlIGRvbid0IGdldCBhIHJlY292ZXJlZCBlbnVtIGRlY2xhcmF0
aW9uIHdoZW4gdGhlIGVycm9yIHRva2VuIGlzIGFmdGVyIGFuDQorLy8gaW5jb3JyZWN0bHkgdXNl
ZCBtb2RpZmllcg0KK3B1YmxpYyB2b2lkIHRlc3QwMDA4KCkgew0KKwlTdHJpbmcgcyA9DQorCQki
cHVibGljIGNsYXNzIFRyeSB7XG4iICsgDQorCQkiXG4iICsgDQorCQkiICAgIHZvaWQgbSgpIHtc
biIgKyANCisJCSJcbiIgKyANCisJCSIgICAgICAgIHN5bmNocm9uaXplZCBuZXcgT2JqZWN0KCk7
XG4iICsgDQorCQkiXG4iICsgDQorCQkiICAgIH1cbiIgKw0KKwkJIn1cbiIgKyANCisJCSJcbiI7
DQorDQorCVN0cmluZyBleHBlY3RlZERpZXRVbml0VG9TdHJpbmcgPQ0KKwkJCSJwdWJsaWMgY2xh
c3MgVHJ5IHtcbiIgKyANCisJCQkiICBwdWJsaWMgVHJ5KCkge1xuIiArIA0KKwkJCSIgIH1cbiIg
KyANCisJCQkiICB2b2lkIG0oKSB7XG4iICsgDQorCQkJIiAgfVxuIiArIA0KKwkJCSJ9XG4iOw0K
Kw0KKwkJU3RyaW5nIGV4cGVjdGVkRGlldFdpdGhTdGF0ZW1lbnRSZWNvdmVyeVVuaXRUb1N0cmlu
ZyA9DQorCQkJZXhwZWN0ZWREaWV0VW5pdFRvU3RyaW5nOw0KKw0KKwkJU3RyaW5nIGV4cGVjdGVk
RGlldFBsdXNCb2R5VW5pdFRvU3RyaW5nID0NCisJCQkJInB1YmxpYyBjbGFzcyBUcnkge1xuIiAr
IA0KKwkJCQkiICBwdWJsaWMgVHJ5KCkge1xuIiArIA0KKwkJCQkiICAgIHN1cGVyKCk7XG4iICsg
DQorCQkJCSIgIH1cbiIgKyANCisJCQkJIiAgdm9pZCBtKCkge1xuIiArIA0KKwkJCQkiICB9XG4i
ICsgDQorCQkJCSJ9XG4iOw0KKw0KKwkJU3RyaW5nIGV4cGVjdGVkRGlldFBsdXNCb2R5V2l0aFN0
YXRlbWVudFJlY292ZXJ5VW5pdFRvU3RyaW5nID0NCisJCQkJInB1YmxpYyBjbGFzcyBUcnkge1xu
IiArIA0KKwkJCQkiICBwdWJsaWMgVHJ5KCkge1xuIiArIA0KKwkJCQkiICAgIHN1cGVyKCk7XG4i
ICsgDQorCQkJCSIgIH1cbiIgKyANCisJCQkJIiAgdm9pZCBtKCkge1xuIiArIA0KKwkJCQkiICB9
XG4iICsgDQorCQkJCSJ9XG4iOw0KKw0KKwkJU3RyaW5nIGV4cGVjdGVkRnVsbFVuaXRUb1N0cmlu
ZyA9DQorCQkJZXhwZWN0ZWREaWV0VW5pdFRvU3RyaW5nOw0KKw0KKwkJU3RyaW5nIGV4cGVjdGVk
RnVsbFdpdGhTdGF0ZW1lbnRSZWNvdmVyeVVuaXRUb1N0cmluZyA9DQorCQkJZXhwZWN0ZWRGdWxs
VW5pdFRvU3RyaW5nOw0KKw0KKwlTdHJpbmcgdGVzdE5hbWUgPSAidGVzdCI7DQorCWNoZWNrUGFy
c2UoDQorCQkJcy50b0NoYXJBcnJheSgpLA0KKwkJCWV4cGVjdGVkRGlldFVuaXRUb1N0cmluZywN
CisJCQlleHBlY3RlZERpZXRXaXRoU3RhdGVtZW50UmVjb3ZlcnlVbml0VG9TdHJpbmcsDQorCQkJ
ZXhwZWN0ZWREaWV0UGx1c0JvZHlVbml0VG9TdHJpbmcsDQorCQkJZXhwZWN0ZWREaWV0UGx1c0Jv
ZHlXaXRoU3RhdGVtZW50UmVjb3ZlcnlVbml0VG9TdHJpbmcsDQorCQkJZXhwZWN0ZWRGdWxsVW5p
dFRvU3RyaW5nLA0KKwkJCWV4cGVjdGVkRnVsbFdpdGhTdGF0ZW1lbnRSZWNvdmVyeVVuaXRUb1N0
cmluZywNCisJCQl0ZXN0TmFtZSk7DQorfQ0KIH0NCiNQIG9yZy5lY2xpcHNlLmpkdC5jb3JlLnRl
c3RzLm1vZGVsDQpJbmRleDogc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2RvbS9BU1RD
b252ZXJ0ZXJSZWNvdmVyeVRlc3QuamF2YQ0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KUkNTIGZpbGU6IC9jdnNyb290
L2VjbGlwc2Uvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNl
L2pkdC9jb3JlL3Rlc3RzL2RvbS9BU1RDb252ZXJ0ZXJSZWNvdmVyeVRlc3QuamF2YSx2DQpyZXRy
aWV2aW5nIHJldmlzaW9uIDEuMTcNCmRpZmYgLXUgLXIxLjE3IEFTVENvbnZlcnRlclJlY292ZXJ5
VGVzdC5qYXZhDQotLS0gc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2RvbS9BU1RDb252
ZXJ0ZXJSZWNvdmVyeVRlc3QuamF2YQkxNSBOb3YgMjAxMCAxOToyMTo0MCAtMDAwMAkxLjE3DQor
Kysgc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2RvbS9BU1RDb252ZXJ0ZXJSZWNvdmVy
eVRlc3QuamF2YQkxMyBBcHIgMjAxMSAwOTozNTozNSAtMDAwMA0KQEAgLTEsNSArMSw1IEBADQog
LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioNCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDYsIDIwMTAgSUJN
IENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuDQorICogQ29weXJpZ2h0IChjKSAyMDA2LCAyMDExIElC
TSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLg0KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMg
cHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMNCiAgKiBhcmUgbWFkZSBhdmFp
bGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAN
CiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJs
ZSBhdA0KQEAgLTEwNzcsNCArMTA3NywzNCBAQA0KIAkJY2hlY2tTb3VyY2VSYW5nZShhbm9ueW1v
dXNDbGFzc0RlY2xhcmF0aW9uLCAibmV3IE9iamVjdCgpIHtoYXNofSIsIHNvdXJjZSk7IC8vJE5P
Ti1OTFMtMSQNCiAJCWNoZWNrU291cmNlUmFuZ2UoYXNzaWdubWVudCwgImZpZWxkPSBuZXcgT2Jq
ZWN0KCkge2hhc2h9Iiwgc291cmNlKTsgLy8kTk9OLU5MUy0xJA0KIAl9DQorCQ0KKwkJLy8gaHR0
cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM0MDY5MQ0KKwkJcHVi
bGljIHZvaWQgdGVzdDAwMjEoKSB0aHJvd3MgSmF2YU1vZGVsRXhjZXB0aW9uIHsNCisJCQl0aGlz
LndvcmtpbmdDb3BpZXMgPSBuZXcgSUNvbXBpbGF0aW9uVW5pdFsxXTsNCisJCQl0aGlzLndvcmtp
bmdDb3BpZXNbMF0gPSBnZXRXb3JraW5nQ29weSgNCisJCQkJIi9Db252ZXJ0ZXIvc3JjL3Rlc3Qv
WC5qYXZhIiwNCisJCQkJInBhY2thZ2UgdGVzdDtcbiIrDQorCQkJCSJwdWJsaWMgY2xhc3MgWCB7
XG4iKw0KKwkJCQkiCXZvaWQgZm9vKCkge1xuIiArIA0KKwkJCQkiCQlzeW5jaHJvbml6ZWQgbmV3
IE9iamVjdCgpO1xuIiArIA0KKwkJCQkiCX1cbiIgKyANCisJCQkJIn1cbiIpOw0KKwkJCUFTVE5v
ZGUgcmVzdWx0ID0gcnVuQ29udmVyc2lvbihBU1QuSkxTMywgdGhpcy53b3JraW5nQ29waWVzWzBd
LCB0cnVlLCB0cnVlKTsNCisNCisJCQlhc3NlcnRBU1ROb2RlRXF1YWxzKA0KKwkJCQkicGFja2Fn
ZSB0ZXN0O1xuIiArIA0KKwkJCQkicHVibGljIGNsYXNzIFgge1xuIiArIA0KKwkJCQkiICB2b2lk
IGZvbygpe1xuIiArIA0KKwkJCQkiICB9XG4iICsgDQorCQkJCSJ9XG4iLA0KKwkJCQlyZXN1bHQp
Ow0KKw0KKwkJCUFTVE5vZGUgbm9kZSA9IGdldEFTVE5vZGUoKENvbXBpbGF0aW9uVW5pdCkgcmVz
dWx0LCAwLCAwKTsNCisJCQlhc3NlcnROb3ROdWxsKG5vZGUpOw0KKwkJCWFzc2VydFRydWUoIk5v
dCBhIG1ldGhvZCBkZWNsYXJhdGlvbiIsIG5vZGUuZ2V0Tm9kZVR5cGUoKSA9PSBBU1ROb2RlLk1F
VEhPRF9ERUNMQVJBVElPTik7IC8vJE5PTi1OTFMtMSQNCisJCQlNZXRob2REZWNsYXJhdGlvbiBt
ZXRob2REZWNsYXJhdGlvbiA9IChNZXRob2REZWNsYXJhdGlvbikgbm9kZTsNCisJCQlCbG9jayBi
bG9jayA9IG1ldGhvZERlY2xhcmF0aW9uLmdldEJvZHkoKTsNCisJCQlMaXN0IHN0YXRlbWVudHMg
PSBibG9jay5zdGF0ZW1lbnRzKCk7DQorCQkJYXNzZXJ0RXF1YWxzKCJ3cm9uZyBzaXplIiwgMCwg
c3RhdGVtZW50cy5zaXplKCkpOyAvLyROT04tTkxTLTEkDQorCQl9DQogfQ0K
</data>

          </attachment>
      

    </bug>

</bugzilla>