<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>428795</bug_id>
          
          <creation_ts>2014-02-21 14:36:00 -0500</creation_ts>
          <short_desc>[1.8]Internal compiler error: java.lang.NullPointerException at org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode(MessageSend.java:123)</short_desc>
          <delta_ts>2014-03-07 07:31:46 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows NT</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Christian Ullenboom">ullenboom</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>manpalat</cc>
    
    <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2367012</commentid>
    <comment_count>0</comment_count>
    <who name="Christian Ullenboom">ullenboom</who>
    <bug_when>2014-02-21 14:36:43 -0500</bug_when>
    <thetext>I am getting an

Internal compiler error: java.lang.NullPointerException at org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode(MessageSend.java:123)

with this code:

import java.net.NetworkInterface;
import java.util.Optional;

public class Tutego
{
  public static void main( String[] args )
  {
    Optional.ofNullable( NetworkInterface.getByIndex( 2 ) ).ifPresent( ni -&gt; {
      Optional.ofNullable( ni.getDisplayName() ).ifPresent( name -&gt;
        System.out.println( name.get().toUpperCase() )
      );
    } );
  }
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2367135</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-21 20:29:28 -0500</bug_when>
    <thetext>Reproduced, will take a look, Thanks Christian.

Note: this problems shows up only when there is a resolution error, i.e this
code does not compile with javac also.

NPE should not occur in any event.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2367160</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-21 23:55:26 -0500</bug_when>
    <thetext>Thanks Christian - this is a very good issue to have been discovered and
fixed now.

Fix and tests here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=6041a9141290a5f24fe2eae74d79755d86c6b388

Basically, during lambda shape analysis, we were not propagating an error
encountered in an inner/nested lambda to the outer/enclosing lambda. Now
we do.

Stephan, I created a new problem severity category: InternalError that is
not suppressed even in silent error handling mode. (For the current issue
this is not emitted since the issue is adequately resolved by propagating
resolution errors to any enclosing lambdas, but this is a good safety net
to have since we have a clean recovery option.

Two questions:

(1) Should GenericInferenceError also be an InternalError ?
(2) Why did you comment out lines 706-713 in LE ? (just after the call
to analyzeShape() - this is for code assist only - was it interfering
/causing problems some how ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2367201</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-22 08:16:52 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #2)
&gt; (2) Why did you comment out lines 706-713 in LE ? (just after the call
&gt; to analyzeShape() - this is for code assist only - was it interfering
&gt; /causing problems some how ?

The comment should explain, but it&apos;s obfuscated by a typo =:-0
Should be:
// FIXME: we don&apos;t yet have the sam, ...

You can find more background in bug 425156 comment 2. HTH.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2367202</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-22 08:23:39 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #3)
&gt; (In reply to Srikanth Sankaran from comment #2)
&gt; &gt; (2) Why did you comment out lines 706-713 in LE ? (just after the call
&gt; &gt; to analyzeShape() - this is for code assist only - was it interfering
&gt; &gt; /causing problems some how ?
&gt; 
&gt; The comment should explain, but it&apos;s obfuscated by a typo =:-0
&gt; Should be:
&gt; // FIXME: we don&apos;t yet have the sam, ...
&gt; 
&gt; You can find more background in bug 425156 comment 2. HTH.

I suspect there is some misunderstanding here:

if (copy == null) {
    if (this.assistNode) {
	analyzeShape();
        /* commented out block of code */
    }

copy == null -&gt; should never happen for anybody other than code completion.
Basically the completion site most likely has a syntax error and copy() will
return null in that case because parseExpression() is not hooked into statement
level recovery - (even if it is I don&apos;t expect it to serve much purpose.)

this.assistNode --&gt; true only if the lambda was built by an assist parser.
analyzeShape() --&gt; as the comment indicates performs simple minded analysis 
for code assist. target type is not required for any of these steps ...

Did I miss something ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2367204</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-22 08:39:54 -0500</bug_when>
    <thetext>I&apos;m not arguing against what you say.

Commenting out happened just to make the code compile again.

Originally, at the top of the method we had:

final MethodBinding sam = left.getSingleAbstractMethod(this.enclosingScope, true);

This line I had to move down some paragraphs. Afterwards the identifier &apos;sam&apos; was no longer resolved in the code section for code assist. Please feel free to re-instate any code you need for code assist.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2367205</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-22 08:44:04 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #5)
&gt; I&apos;m not arguing against what you say.
&gt; 
&gt; Commenting out happened just to make the code compile again.

I see, I completely overlooked that point. OK, we can leave it as is and see 
what needs to be done if/when we see some problems. Sorry for the SIGINT.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2367223</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-22 11:56:44 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #2)
&gt; (1) Should GenericInferenceError also be an InternalError ?

Very good idea.
Question: 
Most of these are errors and I see good reason to make them
  ProblemSeverities.Error|ProblemSeverities.InternalError
One occurrence, however, is defined as a Warning. Does it make sense to say:
  ProblemSeverities.Warning|ProblemSeverities.InternalError
?

BTW, it&apos;s the one from mSMB that says Warning, since we&apos;re recovering.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2367305</commentid>
    <comment_count>8</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-23 10:30:45 -0500</bug_when>
    <thetext>I added the InternalError flag to all IProblem.GenericInferenceError via commit http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=7a140644bb864b33a5703af3dc19c84a2bcb243d</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372856</commentid>
    <comment_count>9</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-03-07 04:32:43 -0500</bug_when>
    <thetext>Verified as working for Eclipse + Java 8 RC2 using Kepler SR2 +   
Eclipse Java Development Tools Patch for Java 8 Support (BETA) 
1.0.0.v20140306-1935.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>