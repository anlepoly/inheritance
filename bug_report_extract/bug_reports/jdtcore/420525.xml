<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>420525</bug_id>
          
          <creation_ts>2013-10-28 12:46:00 -0400</creation_ts>
          <short_desc>[1.8] [compiler] Incorrect error &quot;The type Integer does not define sum(Object, Object) that is applicable here&quot;</short_desc>
          <delta_ts>2014-01-30 06:45:54 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3.1</version>
          <rep_platform>Macintosh</rep_platform>
          <op_sys>Mac OS X</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>424053</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Paul Furbacher">pfurbacher</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>jarthana</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2324045</commentid>
    <comment_count>0</comment_count>
    <who name="Paul Furbacher">pfurbacher</who>
    <bug_when>2013-10-28 12:46:13 -0400</bug_when>
    <thetext>I suspect this problem is related to type inference which is currently being worked on by the JDT team. Please see the attached .java file for the entire source.

Specifically, the following compiles from the command line, but &quot;Integer::sum&quot; is flagged as an error, whose description is &quot;The type Integer does not define sum(Object, Object) that is applicable here&quot;.

code: 

		CompletableFuture.allOf(futures.toArray(new CompletableFuture&lt;?&gt;[]{})).thenApplyAsync( (Void v) -&gt; {
			Integer finalResult = futures.stream().map( (CompletableFuture&lt;Integer&gt; f) -&gt; {
				try {
					return f.get();
				} catch (InterruptedException | ExecutionException e) {
					return 0;
				}
			}).reduce(0, Integer::sum);

(This is not my code. I am exploring the code from this blog post: http://blog.maxant.co.uk/pebble/2013/10/13/1381695720000.html. The git repository for this code is: https://github.com/maxant/share.git.  See the source in &quot;blog20131013_asyncJava8TrySuccessFailure/src/maxant/ch/async/blackboxtests/TestThreeCompletableFutureJava8.java&quot;.)


-- Configuration Details --
Product: Spring Tool Suite 3.4.0.201310051614-RELEASE (org.springsource.sts.ide)
Installed Features:
 org.eclipse.jdt 3.9.1.v20130911-1000
 
$ java -version
java version &quot;1.8.0-ea&quot;
Java(TM) SE Runtime Environment (build 1.8.0-ea-b112)
Java HotSpot(TM) 64-Bit Server VM (build 25.0-b54, mixed mode)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2324046</commentid>
    <comment_count>1</comment_count>
      <attachid>236964</attachid>
    <who name="Paul Furbacher">pfurbacher</who>
    <bug_when>2013-10-28 12:48:54 -0400</bug_when>
    <thetext>Created attachment 236964
source code referred to in bug report</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2324203</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-28 23:36:48 -0400</bug_when>
    <thetext>Thanks, this will be looked at as part of the hooking up the new type inference engine.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2341992</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-12-15 08:09:34 -0500</bug_when>
    <thetext>Very likely same issue as https://bugs.eclipse.org/bugs/show_bug.cgi?id=423504</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2341995</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-15 09:09:34 -0500</bug_when>
    <thetext>I&apos;ll start with some simpler examples in bug 423504 and then come back here.

(In reply to Paul Furbacher from comment #0)
&gt; (This is not my code. I am exploring the code from this blog post:
&gt; http://blog.maxant.co.uk/pebble/2013/10/13/1381695720000.html. The git
&gt; repository for this code is: https://github.com/maxant/share.git.  See the
&gt; source in
&gt; &quot;blog20131013_asyncJava8TrySuccessFailure/src/maxant/ch/async/blackboxtests/
&gt; TestThreeCompletableFutureJava8.java&quot;.)

Please give my regards to Ant K. :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2342043</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-15 14:23:35 -0500</bug_when>
    <thetext>Earlier today I got 3 bogus errors on this example. After fixing bug 423504 I&apos;m down to 1 error. Currently says:

The method thenApplyAsync(Function&lt;? super Void,? extends U&gt;) in the type CompletableFuture&lt;Void&gt; is not applicable for the arguments (Function&lt;Void,? extends U&gt;)

Investigating.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2342066</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-15 19:16:31 -0500</bug_when>
    <thetext>More work on this issue showed problems in repeated resolve attempts when bouncing up and down, problems in detecting when inference is finished, and in finalizing the inferred result back into all relevant AST nodes.

I have a patch in my workspace that touches the following pieces:
- ASTNode.resolvePolyExpressionArguments()
- remove the tiny interface PolyExpression and implementations of its methods
- new LambdaExpression.internalResolveTentatively() based on copy()
- InferenceContext18, ConstraintExpressionFormula

The idea is to pull into one locations what currently is spread over two disparate locations:

1 in ASTNode.resolvePolyExpressionArguments() we update argument expressions
  after inference has determined target type for those

2 in InferenceContext18.rebindInnerPolies() we push down inference results
  into poly expressions for which a nested inference was triggered directly
  from this inference.

It seems that (1) is not a very good strategy. I&apos;m working on registering all relevant expressions with the InferenceContext18 so that after each round of inference all affected expressions can be updated immediately, with no need to trigger another round of method lookup (as resolvePolyExpressionArguments() did).

Unfortunately, this is not in a sharable state right now. I hope to finish and clean this tomorrow evening. I expect also positive impact on bug 424071.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2342166</commentid>
    <comment_count>7</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-12-16 04:11:15 -0500</bug_when>
    <thetext>The new code that is pushed via bug 423504 is causing an NPE for the following case:

interface I&lt;T&gt; {
    T bold(T t);
}

class Main {  
    public String foo(String x) { return &quot;&lt;b&gt;&quot; + x + &quot;&lt;/b&gt;&quot;; }
    String bar() {
        I&lt;? extends String&gt; i = this::foo;
        return i.bold(&quot;1&quot;);
    }  
}

The problem is in ParameterizedTypeBinding#getSingleAbstractMethod()

On first glance, looks like we always create an array of length 2+ but end up leaving one null since (in this case) typeParameters[i].firstBound is null.

Stephan, please let me know if you would like a separate bug for this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2342572</commentid>
    <comment_count>8</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-16 22:01:01 -0500</bug_when>
    <thetext>Thanks, I&apos;m seeing the same (or similar) problem while working on bug 424167.

We have an ill-formed WildcardBinding &quot;? super null&quot; which introduces the null into resolving. This in turn is caused by working from a not-finished state of the inference context. Before closing the other bug I will come back here and check these examples, too.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2344761</commentid>
    <comment_count>9</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-23 18:31:01 -0500</bug_when>
    <thetext>On top of the patch for bug 424167 the NPE reported in comment 7 has been fixed via https://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=a6d23e686845a8f3a37751a7b350298fb34c87e5

This still leaves the main issue from comment 0 unresolved, though. See disabled GenericsRegressionTest_1_8._testBug420525().</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2356533</commentid>
    <comment_count>10</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-30 06:41:52 -0500</bug_when>
    <thetext>LambdaExpression.resultExpressions() was looking in the wrong place, as I didn&apos;t realize that the field .resultExpressions is only populated in the original, not a lambda *copy*. As a result we never included return expressions of block lambdas into the inference &lt;blush/&gt;.

The fix will reveal one problem that was previously masked by this omission, I&apos;ve filed bug 426984 to track that.

Since I&apos;m not sure, why LE.returnsExpression(..) is implemented the way it is, I&apos;m leaving that as it is and only in LE.getResolvedCopyForInferenceTargeting(..) I move the collected expression over to the copy.

Fix released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=54bf5326ab985536456783d83e145375b5dc7f04</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2356534</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-30 06:45:54 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #10)

&gt; Since I&apos;m not sure, why LE.returnsExpression(..) is implemented the way it
&gt; is, I&apos;m leaving that as it is and only in
&gt; LE.getResolvedCopyForInferenceTargeting(..) I move the collected expression
&gt; over to the copy.

Purely for part F, result expressions are meaningful only for explicitly
typed lambdas: To do the S is more specific analysis. So it made sense to
tie this with &quot;shape analysis complete&quot; and store it in just the original.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>236964</attachid>
            <date>2013-10-28 12:48:00 -0400</date>
            <delta_ts>2013-10-28 12:48:54 -0400</delta_ts>
            <desc>source code referred to in bug report</desc>
            <filename>TestThreeCompletableFutureJava8.java</filename>
            <type>application/octet-stream</type>
            <size>2994</size>
            <attacher name="Paul Furbacher">pfurbacher</attacher>
            
              <data encoding="base64">LyoKICogICBDb3B5cmlnaHQgMjAxMyBBbnQgS3V0c2NoZXJhCiAqICAgCiAqICAgTGljZW5zZWQg
dW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlICJMaWNlbnNlIik7CiAq
ICAgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRo
ZSBMaWNlbnNlLgogKiAgIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdAog
KgogKiAgICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKICoK
ICogICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdy
aXRpbmcsIHNvZnR3YXJlCiAqICAgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlz
dHJpYnV0ZWQgb24gYW4gIkFTIElTIiBCQVNJUywKICogICBXSVRIT1VUIFdBUlJBTlRJRVMgT1Ig
Q09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KICogICBT
ZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlz
c2lvbnMgYW5kCiAqICAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuCiAqLwpwYWNrYWdl
IGNoLm1heGFudC5hc3luYy5ibGFja2JveHRlc3RzOwoKaW1wb3J0IGphdmEudXRpbC5BcnJheUxp
c3Q7CmltcG9ydCBqYXZhLnV0aWwuTGlzdDsKaW1wb3J0IGphdmEudXRpbC5SYW5kb207CmltcG9y
dCBqYXZhLnV0aWwuY29uY3VycmVudC5Db21wbGV0YWJsZUZ1dHVyZTsKaW1wb3J0IGphdmEudXRp
bC5jb25jdXJyZW50LkNvdW50RG93bkxhdGNoOwppbXBvcnQgamF2YS51dGlsLmNvbmN1cnJlbnQu
RXhlY3V0aW9uRXhjZXB0aW9uOwoKcHVibGljIGNsYXNzIFRlc3RUaHJlZUNvbXBsZXRhYmxlRnV0
dXJlSmF2YTggewoKCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHRocm93
cyBJbnRlcnJ1cHRlZEV4Y2VwdGlvbiB7CgkJZmluYWwgUmFuZG9tIHJhbmRvbSA9IG5ldyBSYW5k
b20oKTsKCQlpbnQgbnVtVGFza3MgPSAxMDsKCQkKCQlmaW5hbCBDb3VudERvd25MYXRjaCBsYXRj
aCA9IG5ldyBDb3VudERvd25MYXRjaCgxKTsKCQkKCQlmaW5hbCBMaXN0PENvbXBsZXRhYmxlRnV0
dXJlPEludGVnZXI+PiBmdXR1cmVzID0gbmV3IEFycmF5TGlzdDw+KCk7CgkJCgkJZm9yKGludCBp
ID0gMDsgaSA8IG51bVRhc2tzOyBpKyspewoJCQlmaW5hbCBpbnQgaiA9IGk7CgkJCWxvZygiYWRk
aW5nIGZ1dHVyZSAiICsgaSk7CgoJCQkvLyBQQVJUIDEKCQkJLy9zdGFydCBzb21lIHdvcmsgYXN5
bmMgLyBpbiB0aGUgZnV0dXJlCgkJCUNvbXBsZXRhYmxlRnV0dXJlPFN0cmluZz4gZiA9IENvbXBs
ZXRhYmxlRnV0dXJlLnN1cHBseUFzeW5jKCAoKSAtPiB7CgkJCQlzbGVlcChyYW5kb20ubmV4dElu
dCgxMDAwKSk7CgkJCQlpZihqIDwgNSl7CgkJCQkJbG9nKCJ3b3JraW5nIHN1Y2Nlc3MiKTsKCQkJ
CQlyZXR1cm4gIjIwIjsKCQkJCX1lbHNlewoJCQkJCWxvZygid29ya2luZyBmYWlsdXJlIik7CgkJ
CQkJdGhyb3cgbmV3IFJ1bnRpbWVFeGNlcHRpb24oKTsKCQkJCX0KCQkJfSk7CgoJCQkvLyBQQVJU
IDIKCQkJLy9yZWdpc3RlciBhIGNhbGxiYWNrLCB0byBiZSBjYWxsZWQgd2hlbiB0aGUgd29yayBp
cyBkb25lCgkJCWxvZygiYWRkaW5nIG1hcHBpbmcgY2FsbGJhY2sgdG8gZnV0dXJlIik7CgkJCWZp
bmFsIENvbXBsZXRhYmxlRnV0dXJlPEludGVnZXI+IGYyID0gZi5leGNlcHRpb25hbGx5KCAoVGhy
b3dhYmxlIHQpIC0+IHsKCQkJCWxvZygicmVjb3ZlcmluZyIpOwoJCQkJcmV0dXJuICItMTAiOwoJ
CQl9KS50aGVuQXBwbHlBc3luYyggKFN0cmluZyBzdHJpbmdOdW1iZXIpIC0+IHsKCQkJCWxvZygi
bWFwcGluZyAnIiArIHN0cmluZ051bWJlciArICInIHRvIGludCIpOwoJCQkJcmV0dXJuIEludGVn
ZXIucGFyc2VJbnQoc3RyaW5nTnVtYmVyKTsKCQkJfSk7CgkJCQoJCQlmdXR1cmVzLmFkZChmMik7
CgkJfQoKCQkvLyBQQVJUIDMKCQlsb2coInJlZ2lzdGVyaW5nIGNhbGxiYWNrIGZvciBmaW5hbCBy
ZXN1bHQiKTsKCQlDb21wbGV0YWJsZUZ1dHVyZS5hbGxPZihmdXR1cmVzLnRvQXJyYXkobmV3IENv
bXBsZXRhYmxlRnV0dXJlPD8+W117fSkpLnRoZW5BcHBseUFzeW5jKCAoVm9pZCB2KSAtPiB7CgkJ
CUludGVnZXIgZmluYWxSZXN1bHQgPSBmdXR1cmVzLnN0cmVhbSgpLm1hcCggKENvbXBsZXRhYmxl
RnV0dXJlPEludGVnZXI+IGYpIC0+IHsKCQkJCXRyeSB7CgkJCQkJcmV0dXJuIGYuZ2V0KCk7CgkJ
CQl9IGNhdGNoIChJbnRlcnJ1cHRlZEV4Y2VwdGlvbiB8IEV4ZWN1dGlvbkV4Y2VwdGlvbiBlKSB7
CgkJCQkJcmV0dXJuIDA7CgkJCQl9CgkJCX0pLnJlZHVjZSgwLCBJbnRlZ2VyOjpzdW0pOwoJCQkK
CQkJbG9nKCJmaW5hbCByZXN1bHQgaXMgIiArIGZpbmFsUmVzdWx0KTsKCQkJaWYoZmluYWxSZXN1
bHQgIT0gNTApewoJCQkJdGhyb3cgbmV3IFJ1bnRpbWVFeGNlcHRpb24oIkZBSUxFRCIpOwoJCQl9
ZWxzZXsKCQkJCWxvZygiU1VDQ0VTUyIpOwoJCQl9CgkJCQoJCQlsYXRjaC5jb3VudERvd24oKTsg
Ly9jb3ogd2UgYXJlIG5vdyByZWFkeSB0byBmaW5pc2gKCQkJcmV0dXJuIG51bGw7CgkJfSk7CgkJ
U3lzdGVtLm91dC5wcmludGxuKCJDb21wbGV0ZWQgc3VibWl0dGluZyBhbGwgdGFza3Mgb24gdGhy
ZWFkICIgKyBUaHJlYWQuY3VycmVudFRocmVhZCgpLmdldElkKCkpOwoKCQlsYXRjaC5hd2FpdCgp
OwoJfQoKCXByb3RlY3RlZCBzdGF0aWMgdm9pZCBzbGVlcChpbnQgbWlsbGlzKSB7CgkJdHJ5IHsK
CQkJVGhyZWFkLnNsZWVwKG1pbGxpcyk7CgkJfSBjYXRjaCAoSW50ZXJydXB0ZWRFeGNlcHRpb24g
ZSkgewoJCX0KCX0KCglwcml2YXRlIHN0YXRpYyB2b2lkIGxvZyhTdHJpbmcgbXNnKXsKCQlTeXN0
ZW0ub3V0LnByaW50bG4oIlRocmVhZC0iICsgVGhyZWFkLmN1cnJlbnRUaHJlYWQoKS5nZXRJZCgp
ICsgIiBzYXlzOiAiICsgbXNnKTsKCX0KCn0KCgoK
</data>

          </attachment>
      

    </bug>

</bugzilla>