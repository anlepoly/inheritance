<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>427478</bug_id>
          
          <creation_ts>2014-02-05 10:26:00 -0500</creation_ts>
          <short_desc>[1.8][compiler] Wrong &quot;Duplicate default methods&quot; error on AbstractDoubleSpliterator</short_desc>
          <delta_ts>2014-02-21 05:26:14 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>critical</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>427787</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Markus Keller">markus_keller</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>jarthana</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2359149</commentid>
    <comment_count>0</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-02-05 10:26:12 -0500</bug_when>
    <thetext>When trying to compile rt.jar of Java 8 with ecj, I&apos;m getting a compile error in java.util.Spliterators.AbstractDoubleSpliterator. I&apos;ve extracted the problem into a self-contained example below.

I think the compile error is wrong because interface OfDouble already overrides the method Spliterator#forEachRemaining(Consumer&lt;? super T&gt;) with a concrete variant OfDouble#forEachRemaining(Consumer&lt;? super Double&gt;), so the former method should not be considered any more when AbstractDoubleSpliterator is compiled.

=====================================================================
package split2;

import java.util.function.Consumer;
import java.util.function.DoubleConsumer;

public interface Spliterator&lt;T&gt; {
    
    default void forEachRemaining(Consumer&lt;? super T&gt; action) {
    }
    
    public interface OfPrimitive&lt;T, T_CONS, T_SPLITR extends OfPrimitive&lt;T, T_CONS, T_SPLITR&gt;&gt;
            extends Spliterator&lt;T&gt; {
        // overloads Spliterator#forEachRemaining(Consumer&lt;? super T&gt;)
        default void forEachRemaining(T_CONS action) {
        }
    }
    
    public interface OfDouble extends OfPrimitive&lt;Double, DoubleConsumer, OfDouble&gt; {
        @Override // the method from Spliterator
        default void forEachRemaining(Consumer&lt;? super Double&gt; action) {
        }
        
        @Override // the method from OfPrimitive
        default void forEachRemaining(DoubleConsumer action) {
        }
    }
}

class Spliterators {
    /* Error on class: Duplicate default methods named forEachRemaining with
     * the parameters (Consumer&lt;? super Double&gt;) and (Consumer&lt;? super T&gt;) are
     * inherited from the types Spliterator.OfDouble and Spliterator&lt;Double&gt;
     */
    public abstract static class AbstractDoubleSpliterator implements Spliterator.OfDouble {

        /* Implementation that prevents the compile error: */
//        @Override // the method from Spliterator
//        public void forEachRemaining(Consumer&lt;? super Double&gt; action) {
//        }
    }
}
=====================================================================</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2359151</commentid>
    <comment_count>1</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-02-05 10:30:57 -0500</bug_when>
    <thetext>I&apos;m not blocked by this bug.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2361913</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-11 19:32:09 -0500</bug_when>
    <thetext>Disabled tests released here. Stephan, I heard from Jay that he is seeing in
quite a few files in the effort to build JRE8 using ECJ. Thanks for taking a
look.

in MV15.checkInheritedMethods, indices appear misaligned at first sight.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2361914</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-11 19:33:03 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #2)
&gt; Disabled tests released here.

Here: org.eclipse.jdt.core.tests.compiler.regression.InterfaceMethodsTest._test427478()</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2362035</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-12 04:51:18 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #2)

&gt; in MV15.checkInheritedMethods, indices appear misaligned at first sight.

checkInheritedMethods(MethodBinding[] methods, int length, boolean[] isOverridden, boolean[] isInherited)

isOverridden and isInherited - indices seem to relative to original array of
inherited methods.

methods [] - a subset of matching methods collected into a fresh array. Indices
will not always match.

One possible solution is to identically aligned arrays that contain null
entries which need to be skipped over.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2362658</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-13 00:14:25 -0500</bug_when>
    <thetext>Now therefore, thus sayeth the Lord: The path of the righteous code is beset on
all sides by the misalignment of the arrays and the tyranny of incorrect index 
variables. Blessed is the method, who in the name of correctness and good practice, shepherds the contracts through the valley of verification, for he is 
truly his correctness&apos;s keeper and the finder of lost inheritance.

:)

Fix and tests released here: 

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=c9c353b1f3633c7934ab02e6b5f4d6f7b6d921d9</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2366635</commentid>
    <comment_count>6</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-02-21 05:26:14 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #5)
&gt; Now therefore, thus sayeth the Lord: The path of the righteous code is beset
&gt; on
&gt; all sides by the misalignment of the arrays and the tyranny of incorrect
&gt; index 
&gt; variables. Blessed is the method, who in the name of correctness and good
&gt; practice, shepherds the contracts through the valley of verification, for he
&gt; is 
&gt; truly his correctness&apos;s keeper and the finder of lost inheritance.

:-)

Verified for Java 8 RC1 using Kepler SR2 +  
Eclipse Java Development Tools Patch for Java 8 Support (BETA)   
1.0.0.v20140220-2054</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>