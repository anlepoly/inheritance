<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>383780</bug_id>
          
          <creation_ts>2012-06-28 07:54:00 -0400</creation_ts>
          <short_desc>[compiler] Eclipse 4.2 creates ambiguous varargs method error in 1.6 compliance mode (does not mimic JDK bug)</short_desc>
          <delta_ts>2013-11-17 20:05:01 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>3.8.1</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Missing name Mising name">nhb_web</reporter>
          <assigned_to name="Ayushman Jain">amj87.iitr</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>andrew.eisenberg</cc>
    
    <cc>daniel_megert</cc>
    
    <cc>jarthana</cc>
    
    <cc>jgrimm</cc>
    
    <cc>k.electron</cc>
    
    <cc>marko.pukari</cc>
    
    <cc>markus_keller</cc>
    
    <cc>michael.f.obrien</cc>
    
    <cc>opldupuy</cc>
    
    <cc>pquiring</cc>
    
    <cc>samuel.wicky</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
    
    <cc>tomasz.zarna</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="52483"
          type_id="1"
          status="+"
          setter="srikanth_sankaran"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2130328</commentid>
    <comment_count>0</comment_count>
    <who name="Missing name Mising name">nhb_web</who>
    <bug_when>2012-06-28 07:54:55 -0400</bug_when>
    <thetext>Build Identifier: Build id: I20120608-1400

The following code works in java 1.6 and Eclipse 3.7, but fails to compile in Eclipse 4.2 with compiler level set to 1.6 and autoboxing to error:

The method test(int[]) is ambiguous for the type VarargPrimitiveTest

import java.util.Arrays;

public class VarargPrimitiveTest {

    public static void test(int... a) {
        System.out.println(Arrays.toString(a));
    }

    public static &lt;T&gt; void test(Object... a) {
        System.out.println(Arrays.toString(a));
    }

    public static void main(String[] args) {
        test(1);
    }
}


Reproducible: Always</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2130340</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-06-28 08:07:43 -0400</bug_when>
    <thetext>See that this is a bug in JDK5 and JDK6 which has since been corrected
in JDK7 and JDK8 (8b39).

The observed behavior is the correct behavior and the code needs to be
adjusted suitably.

*** This bug has been marked as a duplicate of bug 346038 ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2130676</commentid>
    <comment_count>2</comment_count>
    <who name="Missing name Mising name">nhb_web</who>
    <bug_when>2012-06-28 15:06:32 -0400</bug_when>
    <thetext>&gt; See that this is a bug in JDK5 and JDK6 which has since been corrected
&gt; in JDK7 and JDK8 (8b39).
&gt; The observed behavior is the correct behavior and the code needs to be
&gt; adjusted suitably

While rejecting this code may be correct behaviour for JDK7, rejecting it in 1.6 compiler mode causes a maintenance hell: There is a lot of code out there in a lot of revisions that depends on this behaviour of overloading primitive and object varargs method.

The same is true for annotation not seeing value arrays anymore. The quick fix even generates duplicated value() methods.

It is reasonable to fix the affected code in recent versions targeted at Java 7. But not being able to use Eclipse 4.2 to fix bugs in old code, is a major drawback.

When Java introduced new keywords (assert, enum), Eclipse did not require old code to be changed.

Yes, I just checked, that javac 7 does reject primitive/object overloading in varargs even in 1.6 mode. This is no real problem because a JDK6 is required anyway for the classpath. But having to keep two versions of Eclipse around is a great hassle.


This is not a duplicate of bug 346038 which requested consistent behaviour with Java 7. This is about breaking existing Java 6 code in compiler level 1.6.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2130776</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-06-28 23:18:21 -0400</bug_when>
    <thetext>(In reply to comment #2)
&gt; &gt; See that this is a bug in JDK5 and JDK6 which has since been corrected
&gt; &gt; in JDK7 and JDK8 (8b39).
&gt; &gt; The observed behavior is the correct behavior and the code needs to be
&gt; &gt; adjusted suitably
&gt; 
&gt; While rejecting this code may be correct behaviour for JDK7, rejecting it in
&gt; 1.6 compiler mode causes a maintenance hell: There is a lot of code out there
&gt; in a lot of revisions that depends on this behaviour of overloading primitive
&gt; and object varargs method.

Dj vu all over again. I thought we had decided to make these future
errors warnings, but my fault. Ayush, do you have the time to work on 
this - converting this into a warning for 1.6- modes ? We should not 
silently accept this code in 1.6 modes.
 
&gt; The same is true for annotation not seeing value arrays anymore. The quick fix
&gt; even generates duplicated value() methods.

Please open a separate bug with a test case. TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2130782</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-06-29 00:48:08 -0400</bug_when>
    <thetext>I don&apos;t believe the compliance level setting in JDT was ever intended
to be used to request a mode where ECJ will behave in a bug compatible
manner relative to javac: Instead it was supposed to be used in situations
where the spec (not the reference implementation) got clarified (got changed)
across Java SE releases.

That said, we are having trouble convincing users that this stand is
neither pedantic nor rigid. Build breakages are bad and on occasions
in the past it has led to shrill protests even though ECJ&apos;s behavior was
in the right.

JDT/Core is planning to adopt a policy that 

    &quot;Unless it is a blatant/glaring bug that clearly violates the spec&quot;,

    - &quot;Relaxing behavior changes&quot; (i.e where code was originally not 
compiling with a certain version of reference compiler and now compiles
with a reference compiler of the subsequent release stream) will be
implemented across compliance levels and that

    - &quot;Tightening behavior changes&quot; (i.e where code was originally  
compiling with a certain version of reference compiler and now does 
NOT compile with a reference compiler of the subsequent release stream) will
be implemented across matching compliance levels and that this will be warned
against in earlier compliance levels.

Thoughts/objections ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2130818</commentid>
    <comment_count>5</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2012-06-29 03:12:31 -0400</bug_when>
    <thetext>(In reply to comment #4)
&gt; Thoughts/objections ?

I agree that this bug needs to be fixed.

Relaxing can be confusing. Assume the user has his code without errors in Eclipse and then uses &apos;javac&apos; (e.g. via Ant script) to do the final build. He will have a very hard time to understand why &apos;javac&apos; fails. We had similar issues with Javadoc checking inside Eclipse where we were smart and fixed real problems for/in all versions, but in the end we ended up with Javadoc errors in our official build. The only thing that really worked was to mimic even the bugs in &apos;javadoc&apos;.


&quot;Tightening behavior change&quot;
If I understood your suggestion correctly, you don&apos;t plan to change the behavior but instead still accept the code and issue a warning. This is fine as long as there is an option to change this to &apos;Ignore&apos; (or &apos;Error&apos;).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2131509</commentid>
    <comment_count>6</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-07-02 02:44:54 -0400</bug_when>
    <thetext>(In reply to comment #5)
&gt; &quot;Tightening behavior change&quot;
&gt; If I understood your suggestion correctly, you don&apos;t plan to change the
&gt; behavior but instead still accept the code and issue a warning. This is fine as
&gt; long as there is an option to change this to &apos;Ignore&apos; (or &apos;Error&apos;).

Dani, As of today there are a couple of problems such as &quot;Method ... has the same erasure ... as another method in type ..&quot; and &quot;Duplicate method&quot; that are only warnings in 1.6 but errors in 1.7. These, along with the problem for this bug report can be controlled by an option right at the Java compiler compliance preference page. Something like

Warn on code that does not compile with higher compliance settings [enabled/disabled]

This will be enabled by default. Is this acceptable?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2131511</commentid>
    <comment_count>7</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-07-02 02:45:48 -0400</bug_when>
    <thetext>(In reply to comment #6)
&gt; Dani, As of today there are a couple of problems such as &quot;Method ... has the
&gt; same erasure ... as another method in type ..&quot; and &quot;Duplicate method&quot; that are
&gt; only warnings in 1.6 but errors in 1.7.

(For specific code patterns such as that reported here, I meant)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2131516</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-07-02 02:55:09 -0400</bug_when>
    <thetext>(In reply to comment #6)
&gt; (In reply to comment #5)
&gt; &gt; &quot;Tightening behavior change&quot;
&gt; &gt; If I understood your suggestion correctly, you don&apos;t plan to change the
&gt; &gt; behavior but instead still accept the code and issue a warning. This is fine as
&gt; &gt; long as there is an option to change this to &apos;Ignore&apos; (or &apos;Error&apos;).
&gt; 
&gt; Dani, As of today there are a couple of problems such as &quot;Method ... has the
&gt; same erasure ... as another method in type ..&quot; and &quot;Duplicate method&quot; that are
&gt; only warnings in 1.6 but errors in 1.7. These, along with the problem for this
&gt; bug report can be controlled by an option right at the Java compiler compliance
&gt; preference page. Something like
&gt; 
&gt; Warn on code that does not compile with higher compliance settings
&gt; [enabled/disabled]

I was thinking about this and it looks to me that things could quickly
get out of hand - There are places where the distance between place where
we discriminate and behave differently and the place where we report the
the error report could be quite vast and at the reporting site we would
have lost context that we should warn.

The only maintainable solution looks to be just implement the new behavior
in the new modes and let that become an error/warning in the new modes with
the other compliance levels behaving unchanged.

Yes, we made it a warning in older compliance levels in the two cases
you cite, but I don&apos;t think we can generalize that.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2131521</commentid>
    <comment_count>9</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2012-07-02 03:09:55 -0400</bug_when>
    <thetext>(In reply to comment #8)
&gt; The only maintainable solution looks to be just implement the new behavior
&gt; in the new modes and let that become an error/warning in the new modes with
&gt; the other compliance levels behaving unchanged.

What do you mean with &quot;new modes&quot;?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2131523</commentid>
    <comment_count>10</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2012-07-02 03:14:47 -0400</bug_when>
    <thetext>(In reply to comment #6)
&gt; Warn on code that does not compile with higher compliance settings
&gt; [enabled/disabled]
&gt; 
&gt; This will be enabled by default. Is this acceptable?

I would use a more neutral wording:

&quot;Tolerate code that compiled with a previous version of the compiler&quot;.

This would be &apos;false&apos; by default i.e. in our case/bug we can issue an error like we currently do. This is important to be aligned with &apos;javac&apos; which also issues the error. In other/future cases we might issue a warning (depending on what &apos;javac&apos; does by default.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2131538</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-07-02 04:08:17 -0400</bug_when>
    <thetext>(In reply to comment #9)
&gt; (In reply to comment #8)
&gt; &gt; The only maintainable solution looks to be just implement the new behavior
&gt; &gt; in the new modes and let that become an error/warning in the new modes with
&gt; &gt; the other compliance levels behaving unchanged.
&gt; 
&gt; What do you mean with &quot;new modes&quot;?

If we are reacting to javac changing its behavior as of JDK version x,
the suggestion is not to change existing behavior for x-1, x-2 ...
but to change only for x, x+1 ...

The other proposal that is being considered is to make it a warning in
x-1, x-2, x-3 etc - but I am not sure this is workable in the cases where
the error reporting is far removed from the place where the behavior change
is being made.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2131539</commentid>
    <comment_count>12</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2012-07-02 04:19:11 -0400</bug_when>
    <thetext>Out of the box we should report an *error*. Only when the user changes some option, it will either be ignored (I&apos;m fine with that) or reported as warning.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2131541</commentid>
    <comment_count>13</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2012-07-02 04:20:44 -0400</bug_when>
    <thetext>(In reply to comment #12)
&gt; Out of the box we should report an *error*. Only when the user changes some
&gt; option, it will either be ignored (I&apos;m fine with that) or reported as 
&gt; warning.

Alternatively, the user can choose to use the &quot;broken&quot; compiler from 3.7 or use javac &lt;= 1.7.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2131542</commentid>
    <comment_count>14</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-07-02 04:25:11 -0400</bug_when>
    <thetext>(In reply to comment #8)
&gt; Yes, we made it a warning in older compliance levels in the two cases
&gt; you cite, but I don&apos;t think we can generalize that.
Yeah, i realized that after writing this comment.

&gt; (In reply to comment #6)
&gt; &quot;Tolerate code that compiled with a previous version of the compiler&quot;.
&gt; 
&gt; This would be &apos;false&apos; by default i.e. in our case/bug we can issue an error
&gt; like we currently do. This is important to be aligned with &apos;javac&apos; which also
&gt; issues the error. In other/future cases we might issue a warning (depending on
&gt; what &apos;javac&apos; does by default.
I think we can use this setting to tolerate such cases for &lt;1.7, however we will do so without giving a warning. We can include the cases mentioned in comment 6 to be also controlled by this setting, even though in those cases we are able to give a warning.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2131545</commentid>
    <comment_count>15</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-07-02 04:41:38 -0400</bug_when>
    <thetext>(In reply to comment #12)
&gt; Out of the box we should report an *error*. Only when the user changes some
&gt; option, it will either be ignored (I&apos;m fine with that) or reported as warning.

(In reply to comment #14)

&gt; I think we can use this setting to tolerate such cases for &lt;1.7, however we
&gt; will do so without giving a warning. We can include the cases mentioned in
&gt; comment 6 to be also controlled by this setting, even though in those cases we
&gt; are able to give a warning.

Let us make haste slowly:

We can choose between alternate behaviors using a source level check.

Not sure that we can choose between error/warning/ignore using source
level check because behavior change and error reporting could be arbitrarily
far removed: i.e ambiguous method invocation is a general error situation,
and may arise in situations nothing to do with primitive types and/or varargs.
We can turn the error into warning in the general situation, only when
we encounter the scenario of the current problem. But at the reporting time,
we are stripped of some context and it could be impossible to discern
the scenario.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2131546</commentid>
    <comment_count>16</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-07-02 04:43:08 -0400</bug_when>
    <thetext>(In reply to comment #15)

&gt; We can turn the error into warning in the general situation, only when

Sorry, should read: We CANNOT turn the error into warning in the ...

&gt; we encounter the scenario of the current problem. But at the reporting time,
&gt; we are stripped of some context and it could be impossible to discern
&gt; the scenario.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2131551</commentid>
    <comment_count>17</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2012-07-02 04:57:05 -0400</bug_when>
    <thetext>(In reply to comment #15)
&gt; We can choose between alternate behaviors using a source level check.

That would be wrong because it&apos;s not a question of source compatibility: javac 1.7 also reports an error if source is set to 1.6. We can interpret &quot;compliance&quot; as corresponding to the javac version (as long as the defaults aren&apos;t changed). In this case we can add the already mentioned BOOLEAN option:
    &quot;Tolerate code that compiled with a previous version of the compiler&quot;.
All it would do is restore the wrong behavior. If you are saying you can detect and do this, then we can close this bug as WONTFIX.

I would also not spend too much time to dig out old cases and bind them with this new option.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2131552</commentid>
    <comment_count>18</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2012-07-02 04:58:18 -0400</bug_when>
    <thetext>(In reply to comment #17)
&gt; If you are saying you can detect and do this, then we can close this bug as 
&gt; WONTFIX.
It should read: &quot;you *can&apos;t* detect&quot;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2131558</commentid>
    <comment_count>19</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-07-02 05:06:43 -0400</bug_when>
    <thetext>(In reply to comment #17)
&gt; (In reply to comment #15)
&gt; &gt; We can choose between alternate behaviors using a source level check.
&gt; 
&gt; That would be wrong because it&apos;s not a question of source compatibility: javac
&gt; 1.7 also reports an error if source is set to 1.6. We can interpret
&gt; &quot;compliance&quot; as corresponding to the javac version 

Sorry, compliance is what I meant., NOT source level. It is a case of fingers
typing something the brain didn&apos;t intend.

(In reply to comment #17)

&gt; All it would do is restore the wrong behavior. If you are saying you can detect
&gt; and do this, then we can close this bug as WONTFIX.

I think you meant &quot;If you are saying you cannot detect&quot; ...

Perhaps your fingers are typing something your brain didn&apos;t intend :)

&gt; I would also not spend too much time to dig out old cases and bind them with
&gt; this new option.

Agreed.

Returning to the issue, error reporting happens happens at the narrow end
of the funnel. We can reach the narrow end by taking different courses
at the wider mouth side of the funnel. Unless we are extremely careful,
we would end up ignoring or turning into warnings errors which we absolutely
should not.

Ayush, let me know if your investigation shows otherwise.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2131560</commentid>
    <comment_count>20</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2012-07-02 05:11:22 -0400</bug_when>
    <thetext>(In reply to comment #19)
&gt; I think you meant &quot;If you are saying you cannot detect&quot; ...
See comment 18.
 
&gt; Perhaps your fingers are typing something your brain didn&apos;t intend :)
Yes, they sometimes do ;-)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2131585</commentid>
    <comment_count>21</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-07-02 06:04:59 -0400</bug_when>
    <thetext>(In reply to comment #19)
&gt; Returning to the issue, error reporting happens happens at the narrow end
&gt; of the funnel. We can reach the narrow end by taking different courses
&gt; at the wider mouth side of the funnel. Unless we are extremely careful,
&gt; we would end up ignoring or turning into warnings errors which we absolutely
&gt; should not.
Ok I did some archeology and found that the &apos;tightening&apos; observed in this bug is actually due to the &apos;intended relaxing&apos; of similar varargs constructs in bug 346038. That basically means that in this case, the behaviour change has ripple effects starting at the wide end of the funnel, and any compliance specific change put there will also reverse the effect of bug 346038 for compliances &lt; 1.7

For cases mentioned in comment 6, we were lucky to find and report the problem at the same place, but not so much in the current case.
Should be WONTFIX for this. Even if we can somehow find a way in this case, there will be a bunch of others where we cant do anything, so the new setting will be a bad precedent and raise user&apos;s expectations for us to be bug compatible with javac. I do understand though that this is inconvenient for users. :(</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2131587</commentid>
    <comment_count>22</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2012-07-02 06:12:45 -0400</bug_when>
    <thetext>(In reply to comment #21)
&gt; Should be WONTFIX for this. Even if we can somehow find a way in this case,
&gt; there will be a bunch of others where we cant do anything, so the new setting
&gt; will be a bad precedent and raise user&apos;s expectations for us to be bug
&gt; compatible with javac. I do understand though that this is inconvenient for
&gt; users. :(

How about this compromise: we document this in the readme and add a system property where the old behavior can be restored for this particular case. Checking this at the right location(s) should be easy.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2131920</commentid>
    <comment_count>23</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-07-02 23:59:05 -0400</bug_when>
    <thetext>(In reply to comment #22)

&gt; How about this compromise: we document this in the readme and add a system
&gt; property where the old behavior can be restored for this particular case.
&gt; Checking this at the right location(s) should be easy.

Sounds good to me. I would also not rewire old fixes - we will use this system
property for the current bug and future ones only.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2131929</commentid>
    <comment_count>24</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2012-07-03 02:07:38 -0400</bug_when>
    <thetext>(In reply to comment #23)
&gt; (In reply to comment #22)
&gt; 
&gt; &gt; How about this compromise: we document this in the readme and add a system
&gt; &gt; property where the old behavior can be restored for this particular case.
&gt; &gt; Checking this at the right location(s) should be easy.
&gt; 
&gt; Sounds good to me. I would also not rewire old fixes - we will use this system
&gt; property for the current bug and future ones only.

I would use the property just for this single instance to make it clear. We can add new properties in the future for different cases, if really needed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2132287</commentid>
    <comment_count>25</comment_count>
      <attachid>218230</attachid>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-07-03 12:24:06 -0400</bug_when>
    <thetext>Created attachment 218230
proposed fix v1.0 + regression tests

This patch introduces a new setting org.eclipse.jdt.core.compiler.problem.tolerateEarlierCompiledVarargsCode = [enabled/disabled]

When turned on in compliances 1.5 and 1.6, it reverses the effect of fix for bug 346038 and bug 346039. Thus, it lets the code in comment 0 to be compiled in those compliances, and the code in the 2 bugs mentioned to raise errors, thus restoring the compiler behaviour pre-Juno for these kind of varargs cases. For compliance &gt;= 1.7, this setting does not have any effect.
A batch compiler option -warn:tolerateVarargsCode is introduced as well.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2132415</commentid>
    <comment_count>26</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-07-03 18:46:49 -0400</bug_when>
    <thetext>(In reply to comment #25)
&gt; Created attachment 218230 [details]
&gt; proposed fix v1.0 + regression tests
&gt; 
&gt; This patch introduces a new setting
&gt; org.eclipse.jdt.core.compiler.problem.tolerateEarlierCompiledVarargsCode =
&gt; [enabled/disabled]
&gt; 

I think the recommendation is to use a system property (environment variable)
and not a full blown option. That should also cut down on the boiler plate
code a whole lot.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2132464</commentid>
    <comment_count>27</comment_count>
      <attachid>218240</attachid>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-07-04 01:26:55 -0400</bug_when>
    <thetext>Created attachment 218240
proposed fix v2.0 + regression tests

This patch uses a system property instead of a setting.
This can be set in the eclipse.ini file as
-vmargs
-DtolerateVarargsCodeThatCompiledEarlier=true</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2132465</commentid>
    <comment_count>28</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-07-04 01:27:49 -0400</bug_when>
    <thetext>Dani, where should this option be documented? In the incompatibilities.htm in the isv doc?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2132466</commentid>
    <comment_count>29</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-07-04 01:28:09 -0400</bug_when>
    <thetext>Srikanth, can you review for 3.8.1 inclusion? TIA!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2132519</commentid>
    <comment_count>30</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2012-07-04 04:06:39 -0400</bug_when>
    <thetext>(In reply to comment #28)
&gt; Dani, where should this option be documented? In the incompatibilities.htm in
&gt; the isv doc?

I would add it to the migration FAQ since it is not really an incompatibility.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2132580</commentid>
    <comment_count>31</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2012-07-04 05:46:05 -0400</bug_when>
    <thetext>I find the current bug summary confusing:
Eclipse 4.2 fails to compile valid Java 6 code in Java 6 compatibility mode)

Is the following correct?
[compiler] Eclipse 4.2 creates ambiguous varargs invocation error in 1.6 compliance mode (does not mimic JDK bug)

I would also change &quot;tolerateVarargsCodeThatCompiledEarlier&quot; to &quot;tolerateIllegalAmbiguousVarargsInvocation&quot; to clarify the situation and to make it clear that this is a hack (also for someone who finds this setting in a build script, etc.).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2133012</commentid>
    <comment_count>32</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-07-05 00:10:43 -0400</bug_when>
    <thetext>(In reply to comment #31)

&gt; I would also change &quot;tolerateVarargsCodeThatCompiledEarlier&quot; to
&gt; &quot;tolerateIllegalAmbiguousVarargsInvocation&quot; to clarify the situation and to
&gt; make it clear that this is a hack (also for someone who finds this setting in a
&gt; build script, etc.).

This suggestion looks good. I&apos;ll study the patch in a bit more detail,
but at the outset a couple of comments:

    - Triggers an NLS tag warning, should be fixed.
    - We should hoist the system property consultation into a class initializer
      block, rather than doing it in multiple places. The compiler option check
      can stay where it is.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2133071</commentid>
    <comment_count>33</comment_count>
      <attachid>218319</attachid>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-07-05 04:11:58 -0400</bug_when>
    <thetext>Created attachment 218319
proposed fix v2.1 + regression tests

CHanged the name as Markus suggested and moved the setting of the property to CompilerOptions, so that a boolean flag is set in the options map that can be consulted from anywhere else later.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2133072</commentid>
    <comment_count>34</comment_count>
      <attachid>218320</attachid>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-07-05 04:17:16 -0400</bug_when>
    <thetext>Created attachment 218320
patch for migration FAQ

This needs to go only in R3_8_maintenance</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2133506</commentid>
    <comment_count>35</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-07-06 02:21:00 -0400</bug_when>
    <thetext>Some more comments:

(1) Are these 5 lines 

		if (tolerateIllegalAmbiguousVarargs != null &amp;&amp; tolerateIllegalAmbiguousVarargs.equalsIgnoreCase(&quot;true&quot;)) { //$NON-NLS-1$
			this.tolerateIllegalAmbiguousVarargsInvocation = true;
		} else {
			this.tolerateIllegalAmbiguousVarargsInvocation = false;
		}

written better as a single line:

this.tolerateIllegalAmbiguousVarargsInvocation = tolerateIllegalAmbiguousVarargs != null &amp;&amp; tolerateIllegalAmbiguousVarargs.equalsIgnoreCase(&quot;true&quot;);

(2) Is this:

		CompilerOptions options = this.compilerOptions();
		if (options.complianceLevel &lt; ClassFileConstants.JDK1_7 &amp;&amp; options.tolerateIllegalAmbiguousVarargsInvocation)
			tiebreakingVarargsMethods = false;

better written as:

    if (tiebreakingVarargsMethods) {
		CompilerOptions options = this.compilerOptions();
		if (options.complianceLevel &lt; ClassFileConstants.JDK1_7 &amp;&amp; options.tolerateIllegalAmbiguousVarargsInvocation)
			tiebreakingVarargsMethods = false;
    }

The common case scenario is for tiebreakingVarargsMethods to already be 
false.

(3) I would swap the checks in:

options.complianceLevel &lt; ClassFileConstants.JDK1_7 &amp;&amp; options.tolerateIllegalAmbiguousVarargsInvocation

However, these are micro-issues that can be left in unless we are making
changes on account of (4) below:

(4) This patch does not seem to roll back the entire effect of the
commit 85f48e0f08275e1f81e9995073d5c4f69bfd0707. Is this intentional ?
I haven&apos;t determined what is the effect of the behavior left in yet:

(a) The original fix seems to have deleted this code block:

			if (oneParamsLength &gt; twoParamsLength) {
				// special case when autoboxing makes (int, int...) better than (Object...) but not (int...) or (Integer, int...)
				if (((ArrayBinding) twoParams[twoParamsLength - 1]).elementsType().id != TypeIds.T_JavaLangObject)
					return false;
			}
Is the behaviour deleted something that would have to be tolerated under
the system property ? What is the effect of it staying deleted and not
resurrected ?

(b) Calls to org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(MethodBinding, TypeBinding[], boolean) from the tail end of
org.eclipse.jdt.internal.compiler.lookup.Scope.isAcceptableMethod(MethodBinding, MethodBinding) continue to pass true for the tiebreak parameter and that
results in different side effects inside that method - can these be all left
in and what is the effect of leaving it in ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2133508</commentid>
    <comment_count>36</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-07-06 02:33:20 -0400</bug_when>
    <thetext>(0) tolerateIllegalAmbiguousVarargsInvocation doesn&apos;t have to be an
instance variable at all and can be initialized in a static block.
That would allow us to check it as CompilerOptions.tolerateIllegalAmbiguousVarargsInvocation  eliminating
the overhead walking the scope stack all the way to top to retrieve
options.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2134104</commentid>
    <comment_count>37</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-07-09 02:04:01 -0400</bug_when>
    <thetext>*** Bug 384562 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2137829</commentid>
    <comment_count>38</comment_count>
      <attachid>218798</attachid>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-07-17 07:58:19 -0400</bug_when>
    <thetext>Created attachment 218798
proposed fix v2.2 + regression tests

Yup, (4) and (5) were indeed unintended omissions. Fixed both and added tests test070b_tolerate and test071_tolerate respectively. Also fixed all other points. I hadn&apos;t bothered about (0) earlier because we were anyway looking up the compiler options to get the compliance so I didn&apos;t see any incremental advantage in directly referencing the new option.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2143810</commentid>
    <comment_count>39</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-08-01 04:06:00 -0400</bug_when>
    <thetext>*** Bug 386361 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2143813</commentid>
    <comment_count>40</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-08-01 04:12:34 -0400</bug_when>
    <thetext>*** Bug 382469 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2143815</commentid>
    <comment_count>41</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-08-01 04:25:11 -0400</bug_when>
    <thetext>Sorry for the delay in reviewing this. I expect to complete this well
in time for RC1.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2143816</commentid>
    <comment_count>42</comment_count>
      <attachid>219412</attachid>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-08-01 04:25:40 -0400</bug_when>
    <thetext>Created attachment 219412
proposed fix v2.2 + more regression tests

Added tests from duplicate bugs</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2145136</commentid>
    <comment_count>43</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-08-06 05:02:18 -0400</bug_when>
    <thetext>(In reply to comment #38)

&gt; other points. I hadn&apos;t bothered about (0) earlier because we were anyway
&gt; looking up the compiler options to get the compliance so I didn&apos;t see any
&gt; incremental advantage in directly referencing the new option.

Nevertheless, it does not make sense to initialize this variable over
and over. The initializer block where this is assigned is better tagged
as a static block.

Sorry for the delay, patch looks good. Please release for 4.3 M1.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2145408</commentid>
    <comment_count>44</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-08-07 01:19:33 -0400</bug_when>
    <thetext>(In reply to comment #43)
&gt; (In reply to comment #38)
&gt; 
&gt; &gt; other points. I hadn&apos;t bothered about (0) earlier because we were anyway
&gt; &gt; looking up the compiler options to get the compliance so I didn&apos;t see any
&gt; &gt; incremental advantage in directly referencing the new option.
&gt; 
&gt; Nevertheless, it does not make sense to initialize this variable over
&gt; and over. The initializer block where this is assigned is better tagged
&gt; as a static block.
&gt; 
&gt; Sorry for the delay, patch looks good. Please release for 4.3 M1.

Also for 3.8.1 please.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2145414</commentid>
    <comment_count>45</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-08-07 01:50:27 -0400</bug_when>
    <thetext>Released in master via commit 6b3cf19570292f4957aecb9401f641fdbfac5985.
Released doc update via http://git.eclipse.org/c/platform/eclipse.platform.common.git/commit/?id=e56f4baea829e08b968447d2709266d5b72de374</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2145416</commentid>
    <comment_count>46</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-08-07 02:01:14 -0400</bug_when>
    <thetext>Backported to 3.8.1 via commit 2b9357559972763914866304cd1f0268492229d2</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2145444</commentid>
    <comment_count>47</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2012-08-07 03:25:42 -0400</bug_when>
    <thetext>The FAQ has CHKPII errors and the copyright date is not correct:

GIT\ECLIPSE.PLATFORM.COMMON\BUNDLES\ORG.ECLIPSE.JDT.DOC.ISV\PORTING\3.8\
  FAQ.HTML                                           HTML-40     801   Either &apos;&lt;T&apos; is an unsupported tag or replace &apos;&lt;&apos; with &apos;&amp;lt;&apos;.  Line: 27         
                                                                 824   Found &apos;&lt;&apos; in text which should be replaced with &apos;&amp;lt;&apos; symbol.  Line: 40        


Please fix in both branches.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2145473</commentid>
    <comment_count>48</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-08-07 04:29:16 -0400</bug_when>
    <thetext>(In reply to comment #47)
&gt; [..]

Sorry i forgot to run the validator before releasing. Fixed now</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2145865</commentid>
    <comment_count>49</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-08-08 01:36:36 -0400</bug_when>
    <thetext>Verified for 4.3 M1 using Build id: I20120807-2000</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2145888</commentid>
    <comment_count>50</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-08-08 03:39:49 -0400</bug_when>
    <thetext>(In reply to comment #3)

&gt; &gt; The same is true for annotation not seeing value arrays anymore. The quick fix
&gt; &gt; even generates duplicated value() methods.
&gt; 
&gt; Please open a separate bug with a test case. TIA.

Hello, without a test case, we cannot work on this. Please raise a separate
defect with a small test case. TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2147697</commentid>
    <comment_count>51</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-08-14 05:09:24 -0400</bug_when>
    <thetext>Verified for 3.8.1 using Build id: M20120809-1000</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2154132</commentid>
    <comment_count>52</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-08-30 04:26:53 -0400</bug_when>
    <thetext>*** Bug 388358 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2203574</commentid>
    <comment_count>53</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2013-01-16 07:02:25 -0500</bug_when>
    <thetext>The fix was missing in &apos;R4_2_maintenance&apos;. Cherry-picked with http://git.eclipse.org/c/platform/eclipse.platform.common.git/commit/?id=fcb6b9f4449034be93fe4a53d75826bae6f6b75e</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2203576</commentid>
    <comment_count>54</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2013-01-16 07:03:01 -0500</bug_when>
    <thetext>(In reply to comment #53)
&gt; The fix was missing in &apos;R4_2_maintenance&apos;. Cherry-picked with
&gt; http://git.eclipse.org/c/platform/eclipse.platform.common.git/commit/
&gt; ?id=fcb6b9f4449034be93fe4a53d75826bae6f6b75e

Just the FAQ entry was missing.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2211337</commentid>
    <comment_count>55</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-01 22:13:12 -0500</bug_when>
    <thetext>*** Bug 399687 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2305771</commentid>
    <comment_count>56</comment_count>
    <who name="olivier dupuy">opldupuy</who>
    <bug_when>2013-09-12 06:59:08 -0400</bug_when>
    <thetext>I was retesting this issue in Kepler (4.3).

It is fixed BUT you need this line in your eclipse.ini.
-DtolerateIllegalAmbiguousVarargsInvocation=true

The behavior does not come by default.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2331074</commentid>
    <comment_count>57</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-11-17 20:05:01 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #1)
&gt; See that this is a bug in JDK5 and JDK6 which has since been corrected
&gt; in JDK7 and JDK8 (8b39).
&gt; 
&gt; The observed behavior is the correct behavior and the code needs to be
&gt; adjusted suitably.


For the test case in comment#0:

JDK5 and JDK6 compile it.
JDK7 rejects it.
JDK8 will reverse course again and accept it.

JLS8 is also being amended to say:

// --
The previous &quot;applicable variable arity method&quot; terminology incorrectly 
hinted that, if a variable-arity method is applicable in any phase, it is 
applicable in and only in Phase 3. This overlooks the fact that variable 
arity methods can act as fixed-arity methods in Phases 1 and 2. What is 
relevant is the kinds of adaptations actually used to determine 
applicability, not the kinds of adaptations allowed by the method 
declaration.
//--

I plan to align not only Java 8 behavior, but across all compliance levels
without requiring any system properties.

See https://bugs.eclipse.org/bugs/show_bug.cgi?id=421922</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>218230</attachid>
            <date>2012-07-03 12:24:00 -0400</date>
            <delta_ts>2012-07-04 01:26:55 -0400</delta_ts>
            <desc>proposed fix v1.0 + regression tests</desc>
            <filename>Fixed-bug-383780-Eclipse-42-fails-to-compile-valid-J.patch</filename>
            <type>text/plain</type>
            <size>25952</size>
            <attacher name="Ayushman Jain">amj87.iitr</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0JhdGNoQ29tcGlsZXJU
ZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2Vj
bGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9CYXRjaENvbXBpbGVyVGVz
dC5qYXZhCmluZGV4IDk3MWIwM2UuLjZkYzZjMzQgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21w
aWxlci9yZWdyZXNzaW9uL0JhdGNoQ29tcGlsZXJUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Nv
bXBpbGVyL3JlZ3Jlc3Npb24vQmF0Y2hDb21waWxlclRlc3QuamF2YQpAQCAtODEsNyArODEsNyBA
QAogCQkJIn1cbiI7CiAKIAlzdGF0aWMgewotLy8JCVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1td
IHsgInRlc3QzMTVfd2Fybl9vcHRpb25zX2EiIH07CisvLwkJVEVTVFNfTkFNRVMgPSBuZXcgU3Ry
aW5nW10geyAidGVzdDMzMF93YXJuX29wdGlvbnMiIH07CiAvLwkJVEVTVFNfTlVNQkVSUyA9IG5l
dyBpbnRbXSB7IDMwNiB9OwogLy8JCVRFU1RTX1JBTkdFID0gbmV3IGludFtdIHsgMjk4LCAtMSB9
OwogCX0KQEAgLTE3NDAsOSArMTc0MCw5IEBACiAgICAgICAgICIgICAgICBubHMgICAgICAgICAg
ICAgICAgICBzdHJpbmcgbGl0ZXJhbCBsYWNraW5nIG5vbi1ubHMgdGFnIC8vJE5PTi1OTFMtPG4+
JFxuIiArIAogICAgICAgICAiICAgICAgbm9FZmZlY3RBc3NpZ24gICAgICsgYXNzaWdubWVudCB3
aXRob3V0IGVmZmVjdFxuIiArIAogICAgICAgICAiICAgICAgbnVsbCAgICAgICAgICAgICAgICAg
cG90ZW50aWFsIG1pc3Npbmcgb3IgcmVkdW5kYW50IG51bGwgY2hlY2tcbiIgKyAKLSAgICAgICAg
IiAgICAgIG51bGxBbm5vdCg8YW5ub3QuIG5hbWVzIHNlcGFyYXRlZCBieSB8PikgKyBhbm5vdGF0
aW9uIGJhc2VkIG51bGwgYW5hbHlzaXMsXG4iICsKLSAgICAgICAgIiAgICAgICAgICAgICAgICAg
ICAgICAgICAgIG51bGxhYmxlfG5vbm51bGx8bm9ubnVsbGJ5ZGVmYXVsdCBhbm5vdGF0aW9uIHR5
cGVzXG4iICsKLSAgICAgICAgIiAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbmFsbHkg
c3BlY2lmaWVkIHVzaW5nIGZ1bGx5IHF1YWxpZmllZCBuYW1lc1xuIiArCisgICAgICAgICIgICAg
ICBudWxsQW5ub3QoPGFubm90LiBuYW1lcyBzZXBhcmF0ZWQgYnkgfD4pICsgYW5ub3RhdGlvbiBi
YXNlZCBudWxsIGFuYWx5c2lzLFxuIiArIAorICAgICAgICAiICAgICAgICAgICAgICAgICAgICAg
ICAgICAgbnVsbGFibGV8bm9ubnVsbHxub25udWxsYnlkZWZhdWx0IGFubm90YXRpb24gdHlwZXNc
biIgKyAKKyAgICAgICAgIiAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbmFsbHkgc3Bl
Y2lmaWVkIHVzaW5nIGZ1bGx5IHF1YWxpZmllZCBuYW1lc1xuIiArIAogICAgICAgICAiICAgICAg
bnVsbERlcmVmZXJlbmNlICAgICsgbWlzc2luZyBudWxsIGNoZWNrXG4iICsgCiAgICAgICAgICIg
ICAgICBvdmVyLWFubiAgICAgICAgICAgICBtaXNzaW5nIEBPdmVycmlkZSBhbm5vdGF0aW9uIChz
dXBlcmNsYXNzKVxuIiArIAogICAgICAgICAiICAgICAgcGFyYW1Bc3NpZ24gICAgICAgICAgYXNz
aWdubWVudCB0byBhIHBhcmFtZXRlclxuIiArIApAQCAtMTc1OCwxMiArMTc1OCwxNCBAQAogICAg
ICAgICAiICAgICAgc3VwZXIgICAgICAgICAgICAgICAgb3ZlcnJpZGluZyBhIG1ldGhvZCB3aXRo
b3V0IG1ha2luZyBhIHN1cGVyIGludm9jYXRpb25cbiIgKyAKICAgICAgICAgIiAgICAgIHN1cHBy
ZXNzICAgICAgICAgICArIGVuYWJsZSBAU3VwcHJlc3NXYXJuaW5nc1xuIiArIAogICAgICAgICAi
ICAgICAgICAgICAgICAgICAgICAgICAgICAgV2hlbiB1c2VkIHdpdGggLWVycjosIGl0IGNhbiBh
bHNvIHNpbGVudCBvcHRpb25hbFxuIiArIAotICAgICAgICAiICAgICAgICAgICAgICAgICAgICAg
ICAgICAgZXJyb3JzIGFuZCB3YXJuaW5nc1xuIiArCisgICAgICAgICIgICAgICAgICAgICAgICAg
ICAgICAgICAgICBlcnJvcnMgYW5kIHdhcm5pbmdzXG4iICsgCiAgICAgICAgICIgICAgICBzd2l0
Y2hEZWZhdWx0ICAgICAgKyBzd2l0Y2ggc3RhdGVtZW50IGxhY2tpbmcgYSBkZWZhdWx0IGNhc2Vc
biIgKyAKICAgICAgICAgIiAgICAgIHN5bmNPdmVycmlkZSAgICAgICAgIG1pc3Npbmcgc3luY2hy
b25pemVkIGluIHN5bmNoci4gbWV0aG9kIG92ZXJyaWRlXG4iICsgCiAgICAgICAgICIgICAgICBz
eW50aGV0aWNBY2Nlc3MgICAgICBzeW50aGV0aWMgYWNjZXNzIGZvciBpbm5lcmNsYXNzXG4iICsg
CiAgICAgICAgICIgICAgICB0YXNrcyg8dGFncyBzZXBhcmF0ZWQgYnkgfD4pIHRhc2tzIGlkZW50
aWZpZWQgYnkgdGFncyBpbnNpZGUgY29tbWVudHNcbiIgKyAKICAgICAgICAgIiAgICAgIHR5cGVI
aWRpbmcgICAgICAgICArIHR5cGUgcGFyYW1ldGVyIGhpZGluZyBhbm90aGVyIHR5cGVcbiIgKyAK
KyAgICAgICAgIiAgICAgIHRvbGVyYXRlVmFyYXJnc0NvZGUgKyB0b2xlcmF0ZSB2YXJhcmdzIGNv
ZGUgdGhhdCB3YXMgYWNjZXB0ZWQgYnkgXG4iICsgCisgICAgICAgICIJCQkJCQkJIGVhcmxpZXIg
Y29tcGlsZXIgdmVyc2lvbnMgaW4gY29tcGxpYW5jZTwxLjdcbiIgKyAKICAgICAgICAgIiAgICAg
IHVuYXZvaWRhYmxlR2VuZXJpY1Byb2JsZW1zICsgaWdub3JlIHVuYXZvaWRhYmxlIHR5cGUgc2Fm
ZXR5IHByb2JsZW1zXG4iICsgCiAgICAgICAgICIgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgIGR1ZSB0byByYXcgQVBJc1xuIiArIAogICAgICAgICAiICAgICAgdW5jaGVja2VkICAg
ICAgICAgICsgdW5jaGVja2VkIHR5cGUgb3BlcmF0aW9uXG4iICsgCkBAIC0xNzgyLDcgKzE3ODQs
NyBAQAogICAgICAgICAiICAgICAgdW51c2VkVHlwZUFyZ3MgICAgICsgdW51c2VkIHR5cGUgYXJn
dW1lbnRzIGZvciBtZXRob2QgYW5kIGNvbnN0cnVjdG9yXG4iICsgCiAgICAgICAgICIgICAgICB1
c2VsZXNzVHlwZUNoZWNrICAgICB1bm5lY2Vzc2FyeSBjYXN0L2luc3RhbmNlb2Ygb3BlcmF0aW9u
XG4iICsgCiAgICAgICAgICIgICAgICB2YXJhcmdzQ2FzdCAgICAgICAgKyB2YXJhcmdzIGFyZ3Vt
ZW50IG5lZWQgZXhwbGljaXQgY2FzdFxuIiArIAotICAgICAgICAiICAgICAgd2FybmluZ1Rva2Vu
ICAgICAgICsgdW5zdXBwb3J0ZWQgb3IgdW5uZWNlc3NhcnkgQFN1cHByZXNzV2FybmluZ3NcbiIg
KworICAgICAgICAiICAgICAgd2FybmluZ1Rva2VuICAgICAgICsgdW5zdXBwb3J0ZWQgb3IgdW5u
ZWNlc3NhcnkgQFN1cHByZXNzV2FybmluZ3NcbiIgKyAKICAgICAgICAgIlxuIjsKIAlTdHJpbmcg
ZXhwYW5kZWRFeHBlY3RlZE91dHB1dCA9CiAJCU1lc3NhZ2VGb3JtYXQuZm9ybWF0KGV4cGVjdGVk
T3V0cHV0LCBuZXcgU3RyaW5nW10gewpAQCAtMTg4OCw5ICsxODkwLDkgQEAKIAkJCSIJCTxvcHRp
b24ga2V5PVwib3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIucHJvYmxlbS5pbnZhbGlkSmF2
YWRvY1RhZ3NWaXNpYmlsaXR5XCIgdmFsdWU9XCJwdWJsaWNcIi8+XG4iICsgCiAJCQkiCQk8b3B0
aW9uIGtleT1cIm9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLnByb2JsZW0ubG9jYWxWYXJp
YWJsZUhpZGluZ1wiIHZhbHVlPVwiaWdub3JlXCIvPlxuIiArIAogCQkJIgkJPG9wdGlvbiBrZXk9
XCJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5wcm9ibGVtLm1ldGhvZFdpdGhDb25zdHJ1
Y3Rvck5hbWVcIiB2YWx1ZT1cIndhcm5pbmdcIi8+XG4iICsgCi0JCQkiCQk8b3B0aW9uIGtleT1c
Im9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLnByb2JsZW0ubWlzc2luZ0RlZmF1bHRDYXNl
XCIgdmFsdWU9XCJpZ25vcmVcIi8+XG4iICsKLQkJCSIJCTxvcHRpb24ga2V5PVwib3JnLmVjbGlw
c2UuamR0LmNvcmUuY29tcGlsZXIucHJvYmxlbS5taXNzaW5nRGVwcmVjYXRlZEFubm90YXRpb25c
IiB2YWx1ZT1cImlnbm9yZVwiLz5cbiIgKwotCQkJIgkJPG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBz
ZS5qZHQuY29yZS5jb21waWxlci5wcm9ibGVtLm1pc3NpbmdFbnVtQ2FzZURlc3BpdGVEZWZhdWx0
XCIgdmFsdWU9XCJkaXNhYmxlZFwiLz5cbiIgKworCQkJIgkJPG9wdGlvbiBrZXk9XCJvcmcuZWNs
aXBzZS5qZHQuY29yZS5jb21waWxlci5wcm9ibGVtLm1pc3NpbmdEZWZhdWx0Q2FzZVwiIHZhbHVl
PVwiaWdub3JlXCIvPlxuIiArIAorCQkJIgkJPG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBzZS5qZHQu
Y29yZS5jb21waWxlci5wcm9ibGVtLm1pc3NpbmdEZXByZWNhdGVkQW5ub3RhdGlvblwiIHZhbHVl
PVwiaWdub3JlXCIvPlxuIiArIAorCQkJIgkJPG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBzZS5qZHQu
Y29yZS5jb21waWxlci5wcm9ibGVtLm1pc3NpbmdFbnVtQ2FzZURlc3BpdGVEZWZhdWx0XCIgdmFs
dWU9XCJkaXNhYmxlZFwiLz5cbiIgKyAKIAkJCSIJCTxvcHRpb24ga2V5PVwib3JnLmVjbGlwc2Uu
amR0LmNvcmUuY29tcGlsZXIucHJvYmxlbS5taXNzaW5nSGFzaENvZGVNZXRob2RcIiB2YWx1ZT1c
Imlnbm9yZVwiLz5cbiIgKyAKIAkJCSIJCTxvcHRpb24ga2V5PVwib3JnLmVjbGlwc2UuamR0LmNv
cmUuY29tcGlsZXIucHJvYmxlbS5taXNzaW5nSmF2YWRvY0NvbW1lbnRzXCIgdmFsdWU9XCJpZ25v
cmVcIi8+XG4iICsgCiAJCQkiCQk8b3B0aW9uIGtleT1cIm9yZy5lY2xpcHNlLmpkdC5jb3JlLmNv
bXBpbGVyLnByb2JsZW0ubWlzc2luZ0phdmFkb2NDb21tZW50c092ZXJyaWRpbmdcIiB2YWx1ZT1c
ImRpc2FibGVkXCIvPlxuIiArIApAQCAtMTkzMCw2ICsxOTMyLDcgQEAKIAkJCSIJCTxvcHRpb24g
a2V5PVwib3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIucHJvYmxlbS5zdXBwcmVzc1dhcm5p
bmdzXCIgdmFsdWU9XCJlbmFibGVkXCIvPlxuIiArIAogCQkJIgkJPG9wdGlvbiBrZXk9XCJvcmcu
ZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5wcm9ibGVtLnN5bnRoZXRpY0FjY2Vzc0VtdWxhdGlv
blwiIHZhbHVlPVwiaWdub3JlXCIvPlxuIiArIAogCQkJIgkJPG9wdGlvbiBrZXk9XCJvcmcuZWNs
aXBzZS5qZHQuY29yZS5jb21waWxlci5wcm9ibGVtLnRhc2tzXCIgdmFsdWU9XCJ3YXJuaW5nXCIv
PlxuIiArIAorCQkJIgkJPG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxl
ci5wcm9ibGVtLnRvbGVyYXRlRWFybGllckNvbXBpbGVkVmFyYXJnc0NvZGVcIiB2YWx1ZT1cImRp
c2FibGVkXCIvPlxuIiArIAogCQkJIgkJPG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBzZS5qZHQuY29y
ZS5jb21waWxlci5wcm9ibGVtLnR5cGVQYXJhbWV0ZXJIaWRpbmdcIiB2YWx1ZT1cIndhcm5pbmdc
Ii8+XG4iICsgCiAJCQkiCQk8b3B0aW9uIGtleT1cIm9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBp
bGVyLnByb2JsZW0udW5hdm9pZGFibGVHZW5lcmljVHlwZVByb2JsZW1zXCIgdmFsdWU9XCJlbmFi
bGVkXCIvPlxuIiArIAogCQkJIgkJPG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBzZS5qZHQuY29yZS5j
b21waWxlci5wcm9ibGVtLnVuY2hlY2tlZFR5cGVPcGVyYXRpb25cIiB2YWx1ZT1cIndhcm5pbmdc
Ii8+XG4iICsgCkBAIC0xMzE3OCw0ICsxMzE4MSw1OSBAQAogCQkJIjEgcHJvYmxlbSAoMSB3YXJu
aW5nKSIsCiAJCQl0cnVlKTsKIH0KKworLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mv
c2hvd19idWcuY2dpP2lkPTM3NDYwNQorLy8gLXdhcm4gb3B0aW9uIDp0b2xlcmF0ZVZhcmFyZ3ND
b2RlCitwdWJsaWMgdm9pZCB0ZXN0MzMwX3dhcm5fb3B0aW9ucygpIHsKKwl0aGlzLnJ1bkNvbmZv
cm1UZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJCSJwL1guamF2YSIsCisJCQkJInBhY2thZ2Ug
cDtcbiIgKworCQkJCSJpbXBvcnQgamF2YS51dGlsLkFycmF5cztcbiIgKworCQkJCSJwdWJsaWMg
Y2xhc3MgWCB7XG4iICsKKwkJCQkiICAgIHB1YmxpYyBzdGF0aWMgdm9pZCB0ZXN0KGludC4uLiBh
KSB7XG4iICsKKwkJCQkiIAkJU3lzdGVtLm91dC5wcmludGxuKEFycmF5cy50b1N0cmluZyhhKSk7
fVxuIiArCisJCQkJIiAgICBwdWJsaWMgc3RhdGljIDxUPiB2b2lkIHRlc3QoT2JqZWN0Li4uIGEp
IHtcbiIgKworCQkJCSIJCSBTeXN0ZW0ub3V0LnByaW50bG4oQXJyYXlzLnRvU3RyaW5nKGEpKTt9
XG4iICsKKwkJCQkiICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtc
biIgKworCQkJCSIgICAgICAgICAgICB0ZXN0KDEpO1xuIiArCisJCQkJIiAgICAgfVxuIiArCisJ
CQkJIn1cbiIKKwkJfSwKKwkJIlwiIiArIE9VVFBVVF9ESVIgKyAgRmlsZS5zZXBhcmF0b3IgKyAi
cCIgKyBGaWxlLnNlcGFyYXRvciArICJYLmphdmFcIiIKKwkJKyAiIC1zb3VyY2VwYXRoIFwiIiAr
IE9VVFBVVF9ESVIgKyAiXCIiCisJCSsgIiAtMS41IgorCQkrICIgLXdhcm46K3RvbGVyYXRlVmFy
YXJnc0NvZGUgLXByb2M6bm9uZSAtZCBcIiIgKyBPVVRQVVRfRElSICsgIlwiIiwKKwkJIiIsCisJ
CSIiLAorCQl0cnVlKTsKKwl0aGlzLnJ1bk5lZ2F0aXZlVGVzdCgKKwkJCW5ldyBTdHJpbmdbXSB7
CisJCQkJCSJwL1guamF2YSIsCisJCQkJCSJwYWNrYWdlIHA7XG4iICsKKwkJCQkJImltcG9ydCBq
YXZhLnV0aWwuQXJyYXlzO1xuIiArCisJCQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCQkJ
IiAgICBwdWJsaWMgc3RhdGljIHZvaWQgdGVzdChpbnQuLi4gYSkge1xuIiArCisJCQkJCSIgCQlT
eXN0ZW0ub3V0LnByaW50bG4oQXJyYXlzLnRvU3RyaW5nKGEpKTt9XG4iICsKKwkJCQkJIiAgICBw
dWJsaWMgc3RhdGljIDxUPiB2b2lkIHRlc3QoT2JqZWN0Li4uIGEpIHtcbiIgKworCQkJCQkiCQkg
U3lzdGVtLm91dC5wcmludGxuKEFycmF5cy50b1N0cmluZyhhKSk7fVxuIiArCisJCQkJCSIgICAg
cHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuIiArCisJCQkJCSIgICAg
ICAgICAgICB0ZXN0KDEpO1xuIiArCisJCQkJCSIgICAgIH1cbiIgKworCQkJCQkifVxuIgorCQkJ
fSwKKwkJCSJcIiIgKyBPVVRQVVRfRElSICsgIEZpbGUuc2VwYXJhdG9yICsgInAiICsgRmlsZS5z
ZXBhcmF0b3IgKyAiWC5qYXZhXCIiCisJCQkrICIgLXNvdXJjZXBhdGggXCIiICsgT1VUUFVUX0RJ
UiArICJcIiIKKwkJCSsgIiAtMS43IgorCQkJKyAiIC13YXJuOit0b2xlcmF0ZVZhcmFyZ3NDb2Rl
IC1wcm9jOm5vbmUgLWQgXCIiICsgT1VUUFVUX0RJUiArICJcIiIsCisJCQkiIiwKKwkJCSItLS0t
LS0tLS0tXG4iICsgCisJCQkiMS4gRVJST1IgaW4gLS0tT1VUUFVUX0RJUl9QTEFDRUhPTERFUi0t
LS9wL1guamF2YSAoYXQgbGluZSA5KVxuIiArIAorCQkJIgl0ZXN0KDEpO1xuIiArIAorCQkJIgle
Xl5eXG4iICsgCisJCQkiVGhlIG1ldGhvZCB0ZXN0KGludFtdKSBpcyBhbWJpZ3VvdXMgZm9yIHRo
ZSB0eXBlIFhcbiIgKyAKKwkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkiMSBwcm9ibGVtICgxIGVy
cm9yKSIsCisJCQl0cnVlKTsKK30KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
LnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9y
ZWdyZXNzaW9uL1ZhcmFyZ3NUZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5j
b21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lv
bi9WYXJhcmdzVGVzdC5qYXZhCmluZGV4IDUzNjcyM2IuLmU0ZTI3YzAgMTAwNjQ0Ci0tLSBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29y
ZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1ZhcmFyZ3NUZXN0LmphdmEKKysrIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rl
c3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vVmFyYXJnc1Rlc3QuamF2YQpAQCAtMSw1ICsxLDUgQEAK
IC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDUsIDIwMTEgSUJN
IENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDUsIDIwMTIgSUJN
IENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHBy
b2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFi
bGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAq
IHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0
CkBAIC03OTgsNiArNzk4LDUxIEBACiAJCQkiLS0tLS0tLS0tLVxuIgogCQkpOwogCX0KKwkKKwkv
LyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzgzNzgwCisJ
cHVibGljIHZvaWQgdGVzdDAxNV90b2xlcmF0ZSgpIHRocm93cyBFeGNlcHRpb24geworCQlpZiAo
dGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV81KSByZXR1cm47
CisJCU1hcCBvcHRpb25zID0gZ2V0Q29tcGlsZXJPcHRpb25zKCk7CisJCW9wdGlvbnMucHV0KENv
bXBpbGVyT3B0aW9ucy5PUFRJT05fVG9sZXJhdGVWYXJhcmdzQ29kZVRoYXRDb21waWxlZCwgQ29t
cGlsZXJPcHRpb25zLkVOQUJMRUQpOworCQlpZiAodGhpcy5jb21wbGlhbmNlTGV2ZWwgPj0gQ2xh
c3NGaWxlQ29uc3RhbnRzLkpESzFfNykgeworCQl0aGlzLnJ1bk5lZ2F0aXZlVGVzdCgKKwkJCQlu
ZXcgU3RyaW5nW10geworCQkJCQkJIlguamF2YSIsCisJCQkJCQkicHVibGljIGNsYXNzIFgge1xu
IiArCisJCQkJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIHMpIHtcbiIgKwor
CQkJCQkJIgkJWS5jb3VudChuZXcgaW50WzBdKTtcbiIgKyAvLyBmb3Igc29tZSByZWFzb24gdGhp
cyBpcyBub3QgYW1iaWd1b3VzCisJCQkJCQkiCX1cbiIgKworCQkJCQkJIn1cbiIgKworCQkJCQkJ
ImNsYXNzIFkge1xuIiArCisJCQkJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBjb3VudChpbnRbXSBh
cnJheSwgaW50IC4uLiB2YWx1ZXMpIHsgU3lzdGVtLm91dC5wcmludCgxKTsgfVxuIiArCisJCQkJ
CQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBjb3VudChpbnRbXSBhcnJheSwgaW50W10gLi4uIHZhbHVl
cykgeyBTeXN0ZW0ub3V0LnByaW50KDIpOyB9XG4iICsKKwkJCQkJCSJ9XG4iLAorCQkJfSwKKwkJ
CSItLS0tLS0tLS0tXG4iICsgCisJCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDMpXG4i
ICsgCisJCQkiCVkuY291bnQobmV3IGludFswXSk7XG4iICsgCisJCQkiCSAgXl5eXl5cbiIgKyAK
KwkJCSJUaGUgbWV0aG9kIGNvdW50KGludFtdLCBpbnRbXSkgaXMgYW1iaWd1b3VzIGZvciB0aGUg
dHlwZSBZXG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIiwKKwkJCW51bGwsIHRydWUsIG9wdGlvbnMp
OworCQl9IGVsc2UgeworCQkJdGhpcy5ydW5Db25mb3JtVGVzdCgKKwkJCQluZXcgU3RyaW5nW10g
eworCQkJCQkJIlguamF2YSIsCisJCQkJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkJCQki
CXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIHMpIHtcbiIgKworCQkJCQkJIgkJWS5j
b3VudChuZXcgaW50WzBdKTtcbiIgKyAvLyBmb3Igc29tZSByZWFzb24gdGhpcyBpcyBub3QgYW1i
aWd1b3VzCisJCQkJCQkiCX1cbiIgKworCQkJCQkJIn1cbiIgKworCQkJCQkJImNsYXNzIFkge1xu
IiArCisJCQkJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBjb3VudChpbnRbXSBhcnJheSwgaW50IC4u
LiB2YWx1ZXMpIHsgU3lzdGVtLm91dC5wcmludCgxKTsgfVxuIiArCisJCQkJCQkiCXB1YmxpYyBz
dGF0aWMgdm9pZCBjb3VudChpbnRbXSBhcnJheSwgaW50W10gLi4uIHZhbHVlcykgeyBTeXN0ZW0u
b3V0LnByaW50KDIpOyB9XG4iICsKKwkJCQkJCSJ9XG4iLAorCQkJfSwKKwkJCSIxIiwgCisJCQlu
dWxsLCB0cnVlLCBudWxsLCBvcHRpb25zLCBudWxsKTsKKwkJfQorCX0KIAogCXB1YmxpYyB2b2lk
IHRlc3QwMTYoKSB7IC8vIGNoZWNrIGJlaGF2aW91ciBvZiBTY29wZS5tb3N0U3BlY2lmaWNNZXRo
b2RCaW5kaW5nKCkKIAkJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoIC8vIGJ1dCB0aGlzIGNhbGwgaXMg
YW1iaWd1b3VzCkBAIC0xMjM1LDcgKzEyODAsNyBAQAogCQkJfSwKIAkJCSIxIik7CiAJfQotCS8v
aHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTEwMjYzMQorIAkv
LyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MTAyNjMxCiAJ
cHVibGljIHZvaWQgdGVzdDAzMygpIHsKIAkJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCiAJCQluZXcg
U3RyaW5nW10gewpAQCAtMTMwMSw2ICsxMzQ2LDU3IEBACiAJCQkiVGhlIG1ldGhvZCBjKGJvb2xl
YW4sIGJvb2xlYW4sIE9iamVjdFtdKSBpcyBhbWJpZ3VvdXMgZm9yIHRoZSB0eXBlIFhcbiIgKwog
CQkJIi0tLS0tLS0tLS1cbiIKIAkJKTsKKwl9CisJLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3Jn
L2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM4Mzc4MAorCXB1YmxpYyB2b2lkIHRlc3QwMzNfdG9sZXJh
dGUoKSB7CisJCWlmICh0aGlzLmNvbXBsaWFuY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5K
REsxXzUpIHJldHVybjsKKwkJTWFwIG9wdGlvbnMgPSBnZXRDb21waWxlck9wdGlvbnMoKTsKKwkJ
b3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9Ub2xlcmF0ZVZhcmFyZ3NDb2RlVGhh
dENvbXBpbGVkLCBDb21waWxlck9wdGlvbnMuRU5BQkxFRCk7CisJCWlmICh0aGlzLmNvbXBsaWFu
Y2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV83KSB7CisJCXRoaXMucnVuTmVnYXRp
dmVUZXN0KAorCQkJbmV3IFN0cmluZ1tdIHsKKwkJCQkiWC5qYXZhIiwKKwkJCQkicHVibGljIGNs
YXNzIFgge1xuIiArCisJCQkJIgl2b2lkIGEoYm9vbGVhbiBiLCBPYmplY3QuLi4gbykge1N5c3Rl
bS5vdXQucHJpbnQoMSk7fVxuIiArCisJCQkJIgl2b2lkIGEoT2JqZWN0Li4uIG8pIHtTeXN0ZW0u
b3V0LnByaW50KDIpO31cbiIgKworCQkJCSIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5n
W10gYXJncykge1xuIiArCisJCQkJIgkJWCB4ID0gbmV3IFgoKTtcbiIgKworCQkJCSIJCXguYSh0
cnVlKTtcbiIgKworCQkJCSIJCXguYSh0cnVlLCBcImZvb2JhclwiKTtcbiIgKworCQkJCSIJCXgu
YShcImZvb1wiLCBcImJhclwiKTtcbiIgKworCQkJCSIJfVxuIiArCisJCQkJIn1cbiIsCisJCQl9
LAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUg
NilcbiIgKyAKKwkJCSIJeC5hKHRydWUpO1xuIiArIAorCQkJIgkgIF5cbiIgKyAKKwkJCSJUaGUg
bWV0aG9kIGEoYm9vbGVhbiwgT2JqZWN0W10pIGlzIGFtYmlndW91cyBmb3IgdGhlIHR5cGUgWFxu
IiArIAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCSIyLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxp
bmUgNylcbiIgKyAKKwkJCSIJeC5hKHRydWUsIFwiZm9vYmFyXCIpO1xuIiArIAorCQkJIgkgIF5c
biIgKyAKKwkJCSJUaGUgbWV0aG9kIGEoYm9vbGVhbiwgT2JqZWN0W10pIGlzIGFtYmlndW91cyBm
b3IgdGhlIHR5cGUgWFxuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIsCisJCQludWxsLCB0cnVlLCBv
cHRpb25zKTsKKwkJfSBlbHNlIHsKKwkJCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCQkJCW5ldyBT
dHJpbmdbXSB7CisJCQkJCQkiWC5qYXZhIiwKKwkJCQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsK
KwkJCQkJCSIJdm9pZCBhKGJvb2xlYW4gYiwgT2JqZWN0Li4uIG8pIHtTeXN0ZW0ub3V0LnByaW50
KDEpO31cbiIgKworCQkJCQkJIgl2b2lkIGEoT2JqZWN0Li4uIG8pIHtTeXN0ZW0ub3V0LnByaW50
KDIpO31cbiIgKworCQkJCQkJIglwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdz
KSB7XG4iICsKKwkJCQkJCSIJCVggeCA9IG5ldyBYKCk7XG4iICsKKwkJCQkJCSIJCXguYSh0cnVl
KTtcbiIgKworCQkJCQkJIgkJeC5hKHRydWUsIFwiZm9vYmFyXCIpO1xuIiArCisJCQkJCQkiCQl4
LmEoXCJmb29cIiwgXCJiYXJcIik7XG4iICsKKwkJCQkJCSIJfVxuIiArCisJCQkJCQkifVxuIiwK
KwkJCQkJfSwKKwkJCQkJIjExMiIsCisJCQkJCW51bGwsIHRydWUsIG51bGwsIG9wdGlvbnMsIG51
bGwpOworCQl9CiAJfQogCS8vaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcu
Y2dpP2lkPTEwNjEwNgogCXB1YmxpYyB2b2lkIHRlc3QwMzQoKSB7CkBAIC0yODE4LDYgKzI5MTQs
OTggQEAKIAkJCX0sCiAJCQkiRG9uZSIpOwogCX0KKwkKKwkvLyBodHRwczovL2J1Z3MuZWNsaXBz
ZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzgzNzgwCisJcHVibGljIHZvaWQgdGVzdDA3MF90
b2xlcmF0ZSgpIHRocm93cyBFeGNlcHRpb24geworCQlpZiAodGhpcy5jb21wbGlhbmNlTGV2ZWwg
PCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV81KSByZXR1cm47CisJCU1hcCBvcHRpb25zID0gZ2V0
Q29tcGlsZXJPcHRpb25zKCk7CisJCW9wdGlvbnMucHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJT05f
VG9sZXJhdGVWYXJhcmdzQ29kZVRoYXRDb21waWxlZCwgQ29tcGlsZXJPcHRpb25zLkVOQUJMRUQp
OworCQlpZiAodGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV83
KSB7CisJCXRoaXMucnVuTmVnYXRpdmVUZXN0KAorCQkJbmV3IFN0cmluZ1tdIHsKKwkJCQkiWC5q
YXZhIiwKKwkJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkJIiAgICAgICAgcHVibGljIHN0
YXRpYyB2b2lkIGZvbyhpbnQgLi4uaSkge31cbiIgKworCQkJCSIgICAgICAgIHB1YmxpYyBzdGF0
aWMgdm9pZCBmb28oZG91YmxlLi4uZCkge31cbiIgKworCQkJCSIgICAgICAgIHB1YmxpYyBzdGF0
aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKworCQkJCSIgICAgICAgICAgICBmb28o
MSwgMiwgMyk7XG4iICsKKwkJCQkiICAgICAgICAgICAgU3lzdGVtLm91dC5wcmludGxuIChcIkRv
bmVcIik7XG4iICsKKwkJCQkiICAgICAgICB9XG4iICsKKwkJCQkifVxuIgorCQkJfSwKKwkJCSIt
LS0tLS0tLS0tXG4iICsgCisJCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDUpXG4iICsg
CisJCQkiCWZvbygxLCAyLCAzKTtcbiIgKyAKKwkJCSIJXl5eXG4iICsgCisJCQkiVGhlIG1ldGhv
ZCBmb28oaW50W10pIGlzIGFtYmlndW91cyBmb3IgdGhlIHR5cGUgWFxuIiArIAorCQkJIi0tLS0t
LS0tLS1cbiIsIAorCQkJbnVsbCwgdHJ1ZSwgb3B0aW9ucyk7CisJCX0gZWxzZSB7CisJCQl0aGlz
LnJ1bkNvbmZvcm1UZXN0KAorCQkJCQluZXcgU3RyaW5nW10geworCQkJCQkJIlguamF2YSIsCisJ
CQkJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkJCQkiICAgICAgICBwdWJsaWMgc3RhdGlj
IHZvaWQgZm9vKGludCAuLi5pKSB7fVxuIiArCisJCQkJCQkiICAgICAgICBwdWJsaWMgc3RhdGlj
IHZvaWQgZm9vKGRvdWJsZS4uLmQpIHt9XG4iICsKKwkJCQkJCSIgICAgICAgIHB1YmxpYyBzdGF0
aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKworCQkJCQkJIiAgICAgICAgICAgIGZv
bygxLCAyLCAzKTtcbiIgKworCQkJCQkJIiAgICAgICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbiAo
XCJEb25lXCIpO1xuIiArCisJCQkJCQkiICAgICAgICB9XG4iICsKKwkJCQkJCSJ9XG4iCisJCQkJ
CX0sCisJCQkJCSJEb25lIiwgCisJCQkJCW51bGwsIHRydWUsIG51bGwsIG9wdGlvbnMsIG51bGwp
OworCQl9CisJCQorCX0KKwkKKwkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93
X2J1Zy5jZ2k/aWQ9MzgzNzgwCisJcHVibGljIHZvaWQgdGVzdDA3MF90b2xlcmF0ZTIoKSB0aHJv
d3MgRXhjZXB0aW9uIHsKKwkJaWYgKHRoaXMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29u
c3RhbnRzLkpESzFfNSkgcmV0dXJuOworCQlNYXAgb3B0aW9ucyA9IGdldENvbXBpbGVyT3B0aW9u
cygpOworCQlvcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1RvbGVyYXRlVmFyYXJn
c0NvZGVUaGF0Q29tcGlsZWQsIENvbXBpbGVyT3B0aW9ucy5FTkFCTEVEKTsKKwkJaWYgKHRoaXMu
Y29tcGxpYW5jZUxldmVsID49IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzcpIHsKKwkJdGhpcy5y
dW5OZWdhdGl2ZVRlc3QoCisJCQluZXcgU3RyaW5nW10geworCQkJCSJYLmphdmEiLAorCQkJCSJp
bXBvcnQgamF2YS51dGlsLkFycmF5cztcbiIgKworCQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsK
KwkJCQkiICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgdGVzdChpbnQuLi4gYSkge1xuIiArCisJ
CQkJIgkJCVN5c3RlbS5vdXQucHJpbnRsbihBcnJheXMudG9TdHJpbmcoYSkpO1xufVxuIiArCisJ
CQkJIiAgICAgICAgcHVibGljIHN0YXRpYyA8VD4gdm9pZCB0ZXN0KE9iamVjdC4uLiBhKSB7XG4i
ICsKKwkJCQkiCQkJU3lzdGVtLm91dC5wcmludGxuKEFycmF5cy50b1N0cmluZyhhKSk7XG59XG4i
ICsKKwkJCQkiICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7
XG4iICsKKwkJCQkiICAgICAgICAgICAgdGVzdCgxKTtcbiIgKworCQkJCSIgICAgICAgIH1cbiIg
KworCQkJCSJ9XG4iCisJCQl9LAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCSIxLiBFUlJPUiBp
biBYLmphdmEgKGF0IGxpbmUgMTApXG4iICsgCisJCQkiCXRlc3QoMSk7XG4iICsgCisJCQkiCV5e
Xl5cbiIgKyAKKwkJCSJUaGUgbWV0aG9kIHRlc3QoaW50W10pIGlzIGFtYmlndW91cyBmb3IgdGhl
IHR5cGUgWFxuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIsIAorCQkJbnVsbCwgdHJ1ZSwgb3B0aW9u
cyk7CisJCX0gZWxzZSB7CisJCQl0aGlzLnJ1bkNvbmZvcm1UZXN0KAorCQkJCQluZXcgU3RyaW5n
W10geworCQkJCQkJCSJYLmphdmEiLAorCQkJCQkJCSJpbXBvcnQgamF2YS51dGlsLkFycmF5cztc
biIgKworCQkJCQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCQkJCQkiICAgICAgICBwdWJs
aWMgc3RhdGljIHZvaWQgdGVzdChpbnQuLi4gYSkge1xuIiArCisJCQkJCQkJIgkJCVN5c3RlbS5v
dXQucHJpbnRsbihBcnJheXMudG9TdHJpbmcoYSkpO1xufVxuIiArCisJCQkJCQkJIiAgICAgICAg
cHVibGljIHN0YXRpYyA8VD4gdm9pZCB0ZXN0KE9iamVjdC4uLiBhKSB7XG4iICsKKwkJCQkJCQki
CQkJU3lzdGVtLm91dC5wcmludGxuKEFycmF5cy50b1N0cmluZyhhKSk7XG59XG4iICsKKwkJCQkJ
CQkiICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsK
KwkJCQkJCQkiICAgICAgICAgICAgdGVzdCgxKTtcbiIgKworCQkJCQkJCSIgICAgICAgIH1cbiIg
KworCQkJCQkJCSJ9XG4iCisJCQkJCX0sCisJCQkJCSJbMV0iLCAKKwkJCQkJbnVsbCwgdHJ1ZSwg
bnVsbCwgb3B0aW9ucywgbnVsbCk7CisJCX0KKwkJCisJfQogCS8vIGh0dHBzOi8vYnVncy5lY2xp
cHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNDYwMzgKIAlwdWJsaWMgdm9pZCB0ZXN0MDcw
YSgpIHRocm93cyBFeGNlcHRpb24gewogCQlpZiAodGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFz
c0ZpbGVDb25zdGFudHMuSkRLMV81KSByZXR1cm47CkBAIC0yODM1LDYgKzMwMjMsNDkgQEAKIAkJ
CX0sCiAJCQkiRG9uZSIpOwogCX0KKwkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9z
aG93X2J1Zy5jZ2k/aWQ9MzgzNzgwCisJcHVibGljIHZvaWQgdGVzdDA3MGFfdG9sZXJhdGUoKSB0
aHJvd3MgRXhjZXB0aW9uIHsKKwkJaWYgKHRoaXMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxl
Q29uc3RhbnRzLkpESzFfNSkgcmV0dXJuOworCQlNYXAgb3B0aW9ucyA9IGdldENvbXBpbGVyT3B0
aW9ucygpOworCQlvcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1RvbGVyYXRlVmFy
YXJnc0NvZGVUaGF0Q29tcGlsZWQsIENvbXBpbGVyT3B0aW9ucy5FTkFCTEVEKTsKKwkJaWYgKHRo
aXMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNykgeworCQl0aGlz
LnJ1bk5lZ2F0aXZlVGVzdCgKKwkJCW5ldyBTdHJpbmdbXSB7CisJCQkJIlguamF2YSIsCisJCQkJ
InB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJCSIgICAgICAgIHB1YmxpYyBzdGF0aWMgPFQ+IHZv
aWQgZm9vKGludCAuLi5pKSB7fVxuIiArCisJCQkJIiAgICAgICAgcHVibGljIHN0YXRpYyA8VD4g
dm9pZCBmb28oZG91YmxlLi4uZCkge31cbiIgKworCQkJCSIgICAgICAgIHB1YmxpYyBzdGF0aWMg
dm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKworCQkJCSIgICAgICAgICAgICBmb28oMSwg
MiwgMyk7XG4iICsKKwkJCQkiICAgICAgICAgICAgU3lzdGVtLm91dC5wcmludGxuIChcIkRvbmVc
Iik7XG4iICsKKwkJCQkiICAgICAgICB9XG4iICsKKwkJCQkifVxuIgorCQkJfSwKKwkJCSItLS0t
LS0tLS0tXG4iICsgCisJCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDUpXG4iICsgCisJ
CQkiCWZvbygxLCAyLCAzKTtcbiIgKyAKKwkJCSIJXl5eXG4iICsgCisJCQkiVGhlIG1ldGhvZCBm
b28oaW50W10pIGlzIGFtYmlndW91cyBmb3IgdGhlIHR5cGUgWFxuIiArIAorCQkJIi0tLS0tLS0t
LS1cbiIsIAorCQkJbnVsbCwgdHJ1ZSwgb3B0aW9ucyk7CisJCX0gZWxzZSB7CisJCQl0aGlzLnJ1
bkNvbmZvcm1UZXN0KAorCQkJCQluZXcgU3RyaW5nW10geworCQkJCQkJIlguamF2YSIsCisJCQkJ
CQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkJCQkiICAgICAgICBwdWJsaWMgc3RhdGljIDxU
PiB2b2lkIGZvbyhpbnQgLi4uaSkge31cbiIgKworCQkJCQkJIiAgICAgICAgcHVibGljIHN0YXRp
YyA8VD4gdm9pZCBmb28oZG91YmxlLi4uZCkge31cbiIgKworCQkJCQkJIiAgICAgICAgcHVibGlj
IHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuIiArCisJCQkJCQkiICAgICAgICAg
ICAgZm9vKDEsIDIsIDMpO1xuIiArCisJCQkJCQkiICAgICAgICAgICAgU3lzdGVtLm91dC5wcmlu
dGxuIChcIkRvbmVcIik7XG4iICsKKwkJCQkJCSIgICAgICAgIH1cbiIgKworCQkJCQkJIn1cbiIK
KwkJCQkJfSwKKwkJCQkJIkRvbmUiLCAKKwkJCQkJbnVsbCwgdHJ1ZSwgbnVsbCwgb3B0aW9ucywg
bnVsbCk7CisJCX0KKwkJCisJfQogCS8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3No
b3dfYnVnLmNnaT9pZD0zNDYwMzgKIAlwdWJsaWMgdm9pZCB0ZXN0MDcwYigpIHRocm93cyBFeGNl
cHRpb24gewogCQlpZiAodGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMu
SkRLMV81KSByZXR1cm47CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9iYXRjaC9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYmF0Y2gvTWFpbi5qYXZhIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvYmF0Y2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Jh
dGNoL01haW4uamF2YQppbmRleCA4ZmI1Y2UxLi43NjRkNjI0IDEwMDY0NAotLS0gYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9iYXRjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYmF0
Y2gvTWFpbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2JhdGNoL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9iYXRjaC9NYWluLmphdmEKQEAgLTM2MzMsNiArMzYzMywx
MSBAQAogCQkJfSBlbHNlIGlmICh0b2tlbi5lcXVhbHMoInR5cGVIaWRpbmciKSkgeyAvLyROT04t
TkxTLTEkCiAJCQkJc2V0U2V2ZXJpdHkoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9SZXBvcnRUeXBl
UGFyYW1ldGVySGlkaW5nLCBzZXZlcml0eSwgaXNFbmFibGluZyk7CiAJCQkJcmV0dXJuOworCQkJ
fSBlbHNlIGlmICh0b2tlbi5lcXVhbHMoInRvbGVyYXRlVmFyYXJnc0NvZGUiKSkgeyAvLyROT04t
TkxTLTEkCisJCQkJdGhpcy5vcHRpb25zLnB1dCgKKwkJCQkJCUNvbXBpbGVyT3B0aW9ucy5PUFRJ
T05fVG9sZXJhdGVWYXJhcmdzQ29kZVRoYXRDb21waWxlZCwKKwkJCQkJCWlzRW5hYmxpbmcgPyBD
b21waWxlck9wdGlvbnMuRU5BQkxFRCA6IENvbXBpbGVyT3B0aW9ucy5ESVNBQkxFRCk7CisJCQkJ
cmV0dXJuOwogCQkJfQogCQkJYnJlYWs7CiAJCWNhc2UgJ3UnIDoKZGlmZiAtLWdpdCBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2JhdGNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9i
YXRjaC9tZXNzYWdlcy5wcm9wZXJ0aWVzIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvYmF0Y2gvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2JhdGNoL21lc3NhZ2VzLnByb3BlcnRpZXMK
aW5kZXggMDdlN2M1NS4uMGM1NzZjMSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
YmF0Y2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2JhdGNoL21lc3NhZ2VzLnBy
b3BlcnRpZXMKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvYmF0Y2gvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2JhdGNoL21lc3NhZ2VzLnByb3BlcnRpZXMKQEAgLTM0Niw2ICsz
NDYsOCBAQAogXCAgICAgIHN5bnRoZXRpY0FjY2VzcyAgICAgIHN5bnRoZXRpYyBhY2Nlc3MgZm9y
IGlubmVyY2xhc3NcblwKIFwgICAgICB0YXNrcyg8dGFncyBzZXBhcmF0ZWQgYnkgfD4pIHRhc2tz
IGlkZW50aWZpZWQgYnkgdGFncyBpbnNpZGUgY29tbWVudHNcblwKIFwgICAgICB0eXBlSGlkaW5n
ICAgICAgICAgKyB0eXBlIHBhcmFtZXRlciBoaWRpbmcgYW5vdGhlciB0eXBlXG5cCitcICAgICAg
dG9sZXJhdGVWYXJhcmdzQ29kZSArIHRvbGVyYXRlIHZhcmFyZ3MgY29kZSB0aGF0IHdhcyBhY2Nl
cHRlZCBieSBcblwKK1wJCQkJCQkJIGVhcmxpZXIgY29tcGlsZXIgdmVyc2lvbnMgaW4gY29tcGxp
YW5jZTwxLjdcblwKIFwgICAgICB1bmF2b2lkYWJsZUdlbmVyaWNQcm9ibGVtcyArIGlnbm9yZSB1
bmF2b2lkYWJsZSB0eXBlIHNhZmV0eSBwcm9ibGVtc1xuXAogXCAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgZHVlIHRvIHJhdyBBUElzXG5cCiBcICAgICAgdW5jaGVja2VkICAgICAg
ICAgICsgdW5jaGVja2VkIHR5cGUgb3BlcmF0aW9uXG5cCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvaW1w
bC9Db21waWxlck9wdGlvbnMuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9pbXBsL0NvbXBpbGVyT3B0aW9ucy5qYXZh
CmluZGV4IDFhMmI3NWYuLjZkNmQ3ODEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9pbXBsL0NvbXBpbGVy
T3B0aW9ucy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9pbXBsL0NvbXBpbGVyT3B0aW9ucy5qYXZhCkBAIC0x
NjEsNiArMTYxLDggQEAKIAlzdGF0aWMgZmluYWwgY2hhcltdW10gREVGQVVMVF9OT05OVUxMX0FO
Tk9UQVRJT05fTkFNRSA9IENoYXJPcGVyYXRpb24uc3BsaXRPbignLicsICJvcmcuZWNsaXBzZS5q
ZHQuYW5ub3RhdGlvbi5Ob25OdWxsIi50b0NoYXJBcnJheSgpKTsgLy8kTk9OLU5MUy0xJAogCXN0
YXRpYyBmaW5hbCBjaGFyW11bXSBERUZBVUxUX05PTk5VTExCWURFRkFVTFRfQU5OT1RBVElPTl9O
QU1FID0gQ2hhck9wZXJhdGlvbi5zcGxpdE9uKCcuJywgIm9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0
aW9uLk5vbk51bGxCeURlZmF1bHQiLnRvQ2hhckFycmF5KCkpOyAvLyROT04tTkxTLTEkCiAJcHVi
bGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgT1BUSU9OX1JlcG9ydE1pc3NpbmdOb25OdWxsQnlEZWZh
dWx0QW5ub3RhdGlvbiA9ICJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5hbm5vdGF0aW9u
Lm1pc3NpbmdOb25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbiI7ICAvLyROT04tTkxTLTEkCisJLy8g
aHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM4Mzc4MAorCXB1
YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIE9QVElPTl9Ub2xlcmF0ZVZhcmFyZ3NDb2RlVGhhdENv
bXBpbGVkID0gIm9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLnByb2JsZW0udG9sZXJhdGVF
YXJsaWVyQ29tcGlsZWRWYXJhcmdzQ29kZSI7IC8vJE5PTi1OTFMtMSQKIAkvKioKIAkgKiBQb3Nz
aWJsZSB2YWx1ZXMgZm9yIGNvbmZpZ3VyYWJsZSBvcHRpb25zCiAJICovCkBAIC00MTQsNiArNDE2
LDggQEAKIAlwdWJsaWMgYm9vbGVhbiBhbmFseXNlUmVzb3VyY2VMZWFrczsKIAkvKiogU2hvdWxk
IG1pc3NpbmcgZW51bSBjYXNlcyBiZSByZXBvcnRlZCBldmVuIGlmIGEgZGVmYXVsdCBjYXNlIGV4
aXN0cyBpbiB0aGUgc2FtZSBzd2l0Y2g/ICovCiAJcHVibGljIGJvb2xlYW4gcmVwb3J0TWlzc2lu
Z0VudW1DYXNlRGVzcGl0ZURlZmF1bHQ7CisJLyoqIFNob3VsZCB0aGUgdmFyYXJncyBjb2RlIHRo
YXQgY29tcGlsZWQgd2l0aCBlYXJsaWVyIGNvbXBpbGVyIHZlcnNpb25zIGJlIHRvbGVyYXRlZCBi
eSB0aGlzIGNvbXBpbGVyPyAqLworCXB1YmxpYyBib29sZWFuIHRvbGVyYXRlVmFyYXJnc0NvZGVU
aGF0Q29tcGlsZWRFYXJsaWVyOwogCiAJLy8ga2VlcCBpbiBzeW5jIHdpdGggd2FybmluZ1Rva2Vu
VG9JcnJpdGFudCBhbmQgd2FybmluZ1Rva2VuRnJvbUlycml0YW50CiAJcHVibGljIGZpbmFsIHN0
YXRpYyBTdHJpbmdbXSB3YXJuaW5nVG9rZW5zID0gewpAQCAtMTA5Niw2ICsxMTAwLDcgQEAKIAkJ
b3B0aW9uc01hcC5wdXQoT1BUSU9OX05vbk51bGxBbm5vdGF0aW9uTmFtZSwgU3RyaW5nLnZhbHVl
T2YoQ2hhck9wZXJhdGlvbi5jb25jYXRXaXRoKHRoaXMubm9uTnVsbEFubm90YXRpb25OYW1lLCAn
LicpKSk7CiAJCW9wdGlvbnNNYXAucHV0KE9QVElPTl9Ob25OdWxsQnlEZWZhdWx0QW5ub3RhdGlv
bk5hbWUsIFN0cmluZy52YWx1ZU9mKENoYXJPcGVyYXRpb24uY29uY2F0V2l0aCh0aGlzLm5vbk51
bGxCeURlZmF1bHRBbm5vdGF0aW9uTmFtZSwgJy4nKSkpOwogCQlvcHRpb25zTWFwLnB1dChPUFRJ
T05fUmVwb3J0TWlzc2luZ05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uLCBnZXRTZXZlcml0eVN0
cmluZyhNaXNzaW5nTm9uTnVsbEJ5RGVmYXVsdEFubm90YXRpb24pKTsKKwkJb3B0aW9uc01hcC5w
dXQoT1BUSU9OX1RvbGVyYXRlVmFyYXJnc0NvZGVUaGF0Q29tcGlsZWQsIHRoaXMudG9sZXJhdGVW
YXJhcmdzQ29kZVRoYXRDb21waWxlZEVhcmxpZXIgPyBFTkFCTEVEIDogRElTQUJMRUQpOwogCQly
ZXR1cm4gb3B0aW9uc01hcDsKIAl9CiAKQEAgLTEyNTgsNiArMTI2Myw4IEBACiAJCXRoaXMuYW5h
bHlzZVJlc291cmNlTGVha3MgPSB0cnVlOwogCiAJCXRoaXMucmVwb3J0TWlzc2luZ0VudW1DYXNl
RGVzcGl0ZURlZmF1bHQgPSBmYWxzZTsKKwkJCisJCXRoaXMudG9sZXJhdGVWYXJhcmdzQ29kZVRo
YXRDb21waWxlZEVhcmxpZXIgPSBmYWxzZTsKIAl9CiAKIAlwdWJsaWMgdm9pZCBzZXQoTWFwIG9w
dGlvbnNNYXApIHsKQEAgLTE2OTYsNiArMTcwMywxMyBAQAogCQkJCXRoaXMuc3RvcmVBbm5vdGF0
aW9ucyA9IGZhbHNlOwogCQkJfQogCQl9CisJCWlmICgob3B0aW9uVmFsdWUgPSBvcHRpb25zTWFw
LmdldChPUFRJT05fVG9sZXJhdGVWYXJhcmdzQ29kZVRoYXRDb21waWxlZCkpICE9IG51bGwpIHsK
KwkJCWlmIChFTkFCTEVELmVxdWFscyhvcHRpb25WYWx1ZSkpIHsKKwkJCQl0aGlzLnRvbGVyYXRl
VmFyYXJnc0NvZGVUaGF0Q29tcGlsZWRFYXJsaWVyID0gdHJ1ZTsKKwkJCX0gZWxzZSBpZiAoRElT
QUJMRUQuZXF1YWxzKG9wdGlvblZhbHVlKSkgeworCQkJCXRoaXMudG9sZXJhdGVWYXJhcmdzQ29k
ZVRoYXRDb21waWxlZEVhcmxpZXIgPSBmYWxzZTsKKwkJCX0KKwkJfQogCX0KIAlwdWJsaWMgU3Ry
aW5nIHRvU3RyaW5nKCkgewogCQlTdHJpbmdCdWZmZXIgYnVmID0gbmV3IFN0cmluZ0J1ZmZlcigi
Q29tcGlsZXJPcHRpb25zOiIpOyAvLyROT04tTkxTLTEkCkBAIC0xODAyLDYgKzE4MTYsNyBAQAog
CQlidWYuYXBwZW5kKCJcblx0LSByZXNvdXJjZSBpcyBub3QgY2xvc2VkOiAiKS5hcHBlbmQoZ2V0
U2V2ZXJpdHlTdHJpbmcoVW5jbG9zZWRDbG9zZWFibGUpKTsgLy8kTk9OLU5MUy0xJAogCQlidWYu
YXBwZW5kKCJcblx0LSByZXNvdXJjZSBtYXkgbm90IGJlIGNsb3NlZDogIikuYXBwZW5kKGdldFNl
dmVyaXR5U3RyaW5nKFBvdGVudGlhbGx5VW5jbG9zZWRDbG9zZWFibGUpKTsgLy8kTk9OLU5MUy0x
JAogCQlidWYuYXBwZW5kKCJcblx0LSByZXNvdXJjZSBzaG91bGQgYmUgaGFuZGxlZCBieSB0cnkt
d2l0aC1yZXNvdXJjZXM6ICIpLmFwcGVuZChnZXRTZXZlcml0eVN0cmluZyhFeHBsaWNpdGx5Q2xv
c2VkQXV0b0Nsb3NlYWJsZSkpOyAvLyROT04tTkxTLTEkCisJCWJ1Zi5hcHBlbmQoIlxuXHQtIGNv
ZGUgdGhhdCBjb21waWxlZCB3aXRoIGVhcmxpZXIgY29tcGlsZXIgdmVyc2lvbnMgc2hvdWxkIGJl
IHRvbGVyYXRlZCBpbiB0aGlzIHZlcnNpb24gdG9vIDogIikuYXBwZW5kKHRoaXMudG9sZXJhdGVW
YXJhcmdzQ29kZVRoYXRDb21waWxlZEVhcmxpZXIgPyBFTkFCTEVEIDogRElTQUJMRUQpOyAvLyRO
T04tTkxTLTEkCiAJCXJldHVybiBidWYudG9TdHJpbmcoKTsKIAl9CiAJCmRpZmYgLS1naXQgYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvbG9va3VwL1Njb3BlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEKaW5kZXgg
MjVmZWUwOS4uMDhiNDY2MiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhCisr
KyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTEgSUJNIENvcnBvcmF0aW9u
IGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTIgSUJNIENvcnBvcmF0aW9u
IGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRo
ZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhl
IHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29t
cGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC01ODIsNiAr
NTgyLDkgQEAKIAkJfQogCiAJCWludCBjb21wYXRpYmlsaXR5TGV2ZWw7CisJCUNvbXBpbGVyT3B0
aW9ucyBvcHRpb25zID0gdGhpcy5jb21waWxlck9wdGlvbnMoKTsKKwkJaWYgKG9wdGlvbnMuY29t
cGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNyAmJiBvcHRpb25zLnRvbGVy
YXRlVmFyYXJnc0NvZGVUaGF0Q29tcGlsZWRFYXJsaWVyKQorCQkJdGllYnJlYWtpbmdWYXJhcmdz
TWV0aG9kcyA9IGZhbHNlOwogCQlpZiAoKGNvbXBhdGliaWxpdHlMZXZlbCA9IHBhcmFtZXRlckNv
bXBhdGliaWxpdHlMZXZlbChtZXRob2QsIGFyZ3VtZW50cywgdGllYnJlYWtpbmdWYXJhcmdzTWV0
aG9kcykpID4gTk9UX0NPTVBBVElCTEUpIHsKIAkJCWlmIChjb21wYXRpYmlsaXR5TGV2ZWwgPT0g
VkFSQVJHU19DT01QQVRJQkxFKSB7CiAJCQkJVHlwZUJpbmRpbmcgdmFyYXJnc0VsZW1lbnRUeXBl
ID0gbWV0aG9kLnBhcmFtZXRlcnNbbWV0aG9kLnBhcmFtZXRlcnMubGVuZ3RoIC0gMV0ubGVhZkNv
bXBvbmVudFR5cGUoKTsKQEAgLTMwMjksOCArMzAzMiwxNCBAQAogCQkJCQlpZiAoaSA9PSBvbmVQ
YXJhbXNMZW5ndGggLSAxICYmIG9uZS5pc1ZhcmFyZ3MoKSAmJiB0d28uaXNWYXJhcmdzKCkpIHsK
IAkJCQkJCVR5cGVCaW5kaW5nIG9UeXBlID0gKChBcnJheUJpbmRpbmcpIG9uZVBhcmFtKS5lbGVt
ZW50c1R5cGUoKTsKIAkJCQkJCVR5cGVCaW5kaW5nIGVUeXBlID0gKChBcnJheUJpbmRpbmcpIHR3
b1BhcmFtKS5lbGVtZW50c1R5cGUoKTsKLQkJCQkJCWlmIChvVHlwZSA9PSBlVHlwZSB8fCBvVHlw
ZS5pc0NvbXBhdGlibGVXaXRoKGVUeXBlKSkKLQkJCQkJCQlyZXR1cm4gdHJ1ZTsgLy8gc3BlY2lh
bCBjYXNlIHRvIGNob29zZSBiZXR3ZWVuIDIgdmFyYXJncyBtZXRob2RzIHdoZW4gdGhlIGxhc3Qg
YXJnIGlzIE9iamVjdFtdCisJCQkJCQlDb21waWxlck9wdGlvbnMgb3B0aW9ucyA9IHRoaXMuY29t
cGlsZXJPcHRpb25zKCk7CisJCQkJCQlpZiAob3B0aW9ucy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFz
c0ZpbGVDb25zdGFudHMuSkRLMV83ICYmIG9wdGlvbnMudG9sZXJhdGVWYXJhcmdzQ29kZVRoYXRD
b21waWxlZEVhcmxpZXIpIHsKKwkJCQkJCQlpZiAob25lUGFyYW0gPT0gZVR5cGUgfHwgb25lUGFy
YW0uaXNDb21wYXRpYmxlV2l0aChlVHlwZSkpCisJCQkJCQkJCXJldHVybiB0cnVlOyAvLyBzcGVj
aWFsIGNhc2UgdG8gY2hvb3NlIGJldHdlZW4gMiB2YXJhcmdzIG1ldGhvZHMgd2hlbiB0aGUgbGFz
dCBhcmcgaXMgT2JqZWN0W10KKwkJCQkJCX0gZWxzZSB7CisJCQkJCQkJaWYgKG9UeXBlID09IGVU
eXBlIHx8IG9UeXBlLmlzQ29tcGF0aWJsZVdpdGgoZVR5cGUpKQorCQkJCQkJCQlyZXR1cm4gdHJ1
ZTsgLy8gc3BlY2lhbCBjYXNlIHRvIGNob29zZSBiZXR3ZWVuIDIgdmFyYXJncyBtZXRob2RzIHdo
ZW4gdGhlIGxhc3QgYXJnIGlzIE9iamVjdFtdCisJCQkJCQl9CiAJCQkJCX0KIAkJCQkJcmV0dXJu
IGZhbHNlOwogCQkJCX0KQEAgLTQwOTIsNyArNDEwMSw4IEBACiAJCS8vIG9ubHkgY2FsbGVkIGlm
IGVudi5vcHRpb25zLnNvdXJjZUxldmVsID49IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzUKIAkJ
aWYgKGFyZy5pc0NvbXBhdGlibGVXaXRoKHBhcmFtKSkKIAkJCXJldHVybiBDT01QQVRJQkxFOwot
CQlpZiAodGllQnJlYWtpbmdWYXJhcmdzTWV0aG9kcykgeworCQlDb21waWxlck9wdGlvbnMgb3B0
aW9ucyA9IHRoaXMuY29tcGlsZXJPcHRpb25zKCk7CisJCWlmICh0aWVCcmVha2luZ1ZhcmFyZ3NN
ZXRob2RzICYmIChvcHRpb25zLmNvbXBsaWFuY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMu
SkRLMV83IHx8ICFvcHRpb25zLnRvbGVyYXRlVmFyYXJnc0NvZGVUaGF0Q29tcGlsZWRFYXJsaWVy
KSkgewogCQkJLyogMTUuMTIuMi41IENob29zaW5nIHRoZSBNb3N0IFNwZWNpZmljIE1ldGhvZCwg
Li4uIE9uZSB2YXJpYWJsZSBhcml0eSBtZW1iZXIgbWV0aG9kIG5hbWVkIG0gaXMgbW9yZSBzcGVj
aWZpYyB0aGFuCiAJCQkgICBhbm90aGVyIHZhcmlhYmxlIGFyaXR5IG1lbWJlciBtZXRob2Qgb2Yg
dGhlIHNhbWUgbmFtZSBpZiBlaXRoZXIgLi4uIE9ubHkgc3VidHlwZXMgcmVsYXRpb25zaGlwIHNo
b3VsZCBiZSB1c2VkLgogCQkJICAgQWN0dWFsbHkgdGhpcyBpcyB0cnVlIGV2ZW4gZm9yIGZpeGVk
IGFyaXR5IG1ldGhvZHMsIGJ1dCBpbiBwcmFjdGljZSBpcyBub3QgYW4gaXNzdWUgc2luY2Ugd2Ug
cnVuIHRoZSBhbGdvcml0aG0=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>218240</attachid>
            <date>2012-07-04 01:26:00 -0400</date>
            <delta_ts>2012-07-05 04:11:58 -0400</delta_ts>
            <desc>proposed fix v2.0 + regression tests</desc>
            <filename>Fixed-bug-383780-Eclipse-42-fails-to-compile-valid-J_2.patch</filename>
            <type>text/plain</type>
            <size>14219</size>
            <attacher name="Ayushman Jain">amj87.iitr</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1ZhcmFyZ3NUZXN0Lmph
dmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2Uv
amR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9WYXJhcmdzVGVzdC5qYXZhCmluZGV4
IDUzNjcyM2IuLjFiYmE0OTEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3Rz
LmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNz
aW9uL1ZhcmFyZ3NUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29t
cGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24v
VmFyYXJnc1Rlc3QuamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
Ci0gKiBDb3B5cmlnaHQgKGMpIDIwMDUsIDIwMTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMu
CisgKiBDb3B5cmlnaHQgKGMpIDIwMDUsIDIwMTIgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMu
CiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlp
bmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRo
ZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMg
ZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC03OTgsNiArNzk4LDU1IEBACiAJ
CQkiLS0tLS0tLS0tLVxuIgogCQkpOwogCX0KKwkKKwkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5v
cmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzgzNzgwCisJcHVibGljIHZvaWQgdGVzdDAxNV90b2xl
cmF0ZSgpIHRocm93cyBFeGNlcHRpb24geworCQlpZiAodGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBD
bGFzc0ZpbGVDb25zdGFudHMuSkRLMV81KSByZXR1cm47CisJCU1hcCBvcHRpb25zID0gZ2V0Q29t
cGlsZXJPcHRpb25zKCk7CisJCXRyeSB7CisJCQlTeXN0ZW0uc2V0UHJvcGVydHkoInRvbGVyYXRl
VmFyYXJnc0NvZGVUaGF0Q29tcGlsZWRFYXJsaWVyIiwgInRydWUiKTsKKwkJCWlmICh0aGlzLmNv
bXBsaWFuY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV83KSB7CisJCQl0aGlzLnJ1
bk5lZ2F0aXZlVGVzdCgKKwkJCQkJbmV3IFN0cmluZ1tdIHsKKwkJCQkJCQkiWC5qYXZhIiwKKwkJ
CQkJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkJCQkJIglwdWJsaWMgc3RhdGljIHZvaWQg
bWFpbihTdHJpbmdbXSBzKSB7XG4iICsKKwkJCQkJCQkiCQlZLmNvdW50KG5ldyBpbnRbMF0pO1xu
IiArIC8vIGZvciBzb21lIHJlYXNvbiB0aGlzIGlzIG5vdCBhbWJpZ3VvdXMKKwkJCQkJCQkiCX1c
biIgKworCQkJCQkJCSJ9XG4iICsKKwkJCQkJCQkiY2xhc3MgWSB7XG4iICsKKwkJCQkJCQkiCXB1
YmxpYyBzdGF0aWMgdm9pZCBjb3VudChpbnRbXSBhcnJheSwgaW50IC4uLiB2YWx1ZXMpIHsgU3lz
dGVtLm91dC5wcmludCgxKTsgfVxuIiArCisJCQkJCQkJIglwdWJsaWMgc3RhdGljIHZvaWQgY291
bnQoaW50W10gYXJyYXksIGludFtdIC4uLiB2YWx1ZXMpIHsgU3lzdGVtLm91dC5wcmludCgyKTsg
fVxuIiArCisJCQkJCQkJIn1cbiIsCisJCQkJfSwKKwkJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJ
CSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMylcbiIgKyAKKwkJCQkiCVkuY291bnQobmV3
IGludFswXSk7XG4iICsgCisJCQkJIgkgIF5eXl5eXG4iICsgCisJCQkJIlRoZSBtZXRob2QgY291
bnQoaW50W10sIGludFtdKSBpcyBhbWJpZ3VvdXMgZm9yIHRoZSB0eXBlIFlcbiIgKyAKKwkJCQki
LS0tLS0tLS0tLVxuIiwKKwkJCQludWxsLCB0cnVlLCBvcHRpb25zKTsKKwkJCX0gZWxzZSB7CisJ
CQkJdGhpcy5ydW5Db25mb3JtVGVzdCgKKwkJCQkJbmV3IFN0cmluZ1tdIHsKKwkJCQkJCQkiWC5q
YXZhIiwKKwkJCQkJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkJCQkJIglwdWJsaWMgc3Rh
dGljIHZvaWQgbWFpbihTdHJpbmdbXSBzKSB7XG4iICsKKwkJCQkJCQkiCQlZLmNvdW50KG5ldyBp
bnRbMF0pO1xuIiArIC8vIGZvciBzb21lIHJlYXNvbiB0aGlzIGlzIG5vdCBhbWJpZ3VvdXMKKwkJ
CQkJCQkiCX1cbiIgKworCQkJCQkJCSJ9XG4iICsKKwkJCQkJCQkiY2xhc3MgWSB7XG4iICsKKwkJ
CQkJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBjb3VudChpbnRbXSBhcnJheSwgaW50IC4uLiB2YWx1
ZXMpIHsgU3lzdGVtLm91dC5wcmludCgxKTsgfVxuIiArCisJCQkJCQkJIglwdWJsaWMgc3RhdGlj
IHZvaWQgY291bnQoaW50W10gYXJyYXksIGludFtdIC4uLiB2YWx1ZXMpIHsgU3lzdGVtLm91dC5w
cmludCgyKTsgfVxuIiArCisJCQkJCQkJIn1cbiIsCisJCQkJfSwKKwkJCQkiMSIsIAorCQkJCW51
bGwsIHRydWUsIG51bGwsIG9wdGlvbnMsIG51bGwpOworCQkJfQorCQl9IGZpbmFsbHkgeworCQkJ
U3lzdGVtLnNldFByb3BlcnR5KCJ0b2xlcmF0ZVZhcmFyZ3NDb2RlVGhhdENvbXBpbGVkRWFybGll
ciIsICJmYWxzZSIpOworCQl9CisJfQogCiAJcHVibGljIHZvaWQgdGVzdDAxNigpIHsgLy8gY2hl
Y2sgYmVoYXZpb3VyIG9mIFNjb3BlLm1vc3RTcGVjaWZpY01ldGhvZEJpbmRpbmcoKQogCQl0aGlz
LnJ1bk5lZ2F0aXZlVGVzdCggLy8gYnV0IHRoaXMgY2FsbCBpcyBhbWJpZ3VvdXMKQEAgLTEyMzUs
NyArMTI4NCw3IEBACiAJCQl9LAogCQkJIjEiKTsKIAl9Ci0JLy9odHRwczovL2J1Z3MuZWNsaXBz
ZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MTAyNjMxCisgCS8vIGh0dHBzOi8vYnVncy5lY2xp
cHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0xMDI2MzEKIAlwdWJsaWMgdm9pZCB0ZXN0MDMz
KCkgewogCQl0aGlzLnJ1bk5lZ2F0aXZlVGVzdCgKIAkJCW5ldyBTdHJpbmdbXSB7CkBAIC0xMzAx
LDYgKzEzNTAsNjEgQEAKIAkJCSJUaGUgbWV0aG9kIGMoYm9vbGVhbiwgYm9vbGVhbiwgT2JqZWN0
W10pIGlzIGFtYmlndW91cyBmb3IgdGhlIHR5cGUgWFxuIiArCiAJCQkiLS0tLS0tLS0tLVxuIgog
CQkpOworCX0KKwkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/
aWQ9MzgzNzgwCisJcHVibGljIHZvaWQgdGVzdDAzM190b2xlcmF0ZSgpIHsKKwkJaWYgKHRoaXMu
Y29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNSkgcmV0dXJuOworCQlN
YXAgb3B0aW9ucyA9IGdldENvbXBpbGVyT3B0aW9ucygpOworCQl0cnkgeworCQkJU3lzdGVtLnNl
dFByb3BlcnR5KCJ0b2xlcmF0ZVZhcmFyZ3NDb2RlVGhhdENvbXBpbGVkRWFybGllciIsICJ0cnVl
Iik7CisJCQlpZiAodGhpcy5jb21wbGlhbmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpE
SzFfNykgeworCQkJCXRoaXMucnVuTmVnYXRpdmVUZXN0KAorCQkJCQluZXcgU3RyaW5nW10gewor
CQkJCQkJIlguamF2YSIsCisJCQkJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkJCQkiCXZv
aWQgYShib29sZWFuIGIsIE9iamVjdC4uLiBvKSB7U3lzdGVtLm91dC5wcmludCgxKTt9XG4iICsK
KwkJCQkJCSIJdm9pZCBhKE9iamVjdC4uLiBvKSB7U3lzdGVtLm91dC5wcmludCgyKTt9XG4iICsK
KwkJCQkJCSIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuIiArCisJ
CQkJCQkiCQlYIHggPSBuZXcgWCgpO1xuIiArCisJCQkJCQkiCQl4LmEodHJ1ZSk7XG4iICsKKwkJ
CQkJCSIJCXguYSh0cnVlLCBcImZvb2JhclwiKTtcbiIgKworCQkJCQkJIgkJeC5hKFwiZm9vXCIs
IFwiYmFyXCIpO1xuIiArCisJCQkJCQkiCX1cbiIgKworCQkJCQkJIn1cbiIsCisJCQkJCX0sCisJ
CQkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUg
NilcbiIgKyAKKwkJCQkJIgl4LmEodHJ1ZSk7XG4iICsgCisJCQkJCSIJICBeXG4iICsgCisJCQkJ
CSJUaGUgbWV0aG9kIGEoYm9vbGVhbiwgT2JqZWN0W10pIGlzIGFtYmlndW91cyBmb3IgdGhlIHR5
cGUgWFxuIiArIAorCQkJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJCQkiMi4gRVJST1IgaW4gWC5q
YXZhIChhdCBsaW5lIDcpXG4iICsgCisJCQkJCSIJeC5hKHRydWUsIFwiZm9vYmFyXCIpO1xuIiAr
IAorCQkJCQkiCSAgXlxuIiArIAorCQkJCQkiVGhlIG1ldGhvZCBhKGJvb2xlYW4sIE9iamVjdFtd
KSBpcyBhbWJpZ3VvdXMgZm9yIHRoZSB0eXBlIFhcbiIgKyAKKwkJCQkJIi0tLS0tLS0tLS1cbiIs
CisJCQkJCW51bGwsIHRydWUsIG9wdGlvbnMpOworCQkJfSBlbHNlIHsKKwkJCQl0aGlzLnJ1bkNv
bmZvcm1UZXN0KAorCQkJCQkJbmV3IFN0cmluZ1tdIHsKKwkJCQkJCQkiWC5qYXZhIiwKKwkJCQkJ
CQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkJCQkJIgl2b2lkIGEoYm9vbGVhbiBiLCBPYmpl
Y3QuLi4gbykge1N5c3RlbS5vdXQucHJpbnQoMSk7fVxuIiArCisJCQkJCQkJIgl2b2lkIGEoT2Jq
ZWN0Li4uIG8pIHtTeXN0ZW0ub3V0LnByaW50KDIpO31cbiIgKworCQkJCQkJCSIJcHVibGljIHN0
YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuIiArCisJCQkJCQkJIgkJWCB4ID0gbmV3
IFgoKTtcbiIgKworCQkJCQkJCSIJCXguYSh0cnVlKTtcbiIgKworCQkJCQkJCSIJCXguYSh0cnVl
LCBcImZvb2JhclwiKTtcbiIgKworCQkJCQkJCSIJCXguYShcImZvb1wiLCBcImJhclwiKTtcbiIg
KworCQkJCQkJCSIJfVxuIiArCisJCQkJCQkJIn1cbiIsCisJCQkJCQl9LAorCQkJCQkJIjExMiIs
CisJCQkJCQludWxsLCB0cnVlLCBudWxsLCBvcHRpb25zLCBudWxsKTsKKwkJCX0KKwkJfSBmaW5h
bGx5IHsKKwkJCVN5c3RlbS5zZXRQcm9wZXJ0eSgidG9sZXJhdGVWYXJhcmdzQ29kZVRoYXRDb21w
aWxlZEVhcmxpZXIiLCAiZmFsc2UiKTsKKwkJfQogCX0KIAkvL2h0dHBzOi8vYnVncy5lY2xpcHNl
Lm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0xMDYxMDYKIAlwdWJsaWMgdm9pZCB0ZXN0MDM0KCkg
ewpAQCAtMjgxOCw2ICsyOTIyLDEwNiBAQAogCQkJfSwKIAkJCSJEb25lIik7CiAJfQorCQorCS8v
IGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zODM3ODAKKwlw
dWJsaWMgdm9pZCB0ZXN0MDcwX3RvbGVyYXRlKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCWlmICh0
aGlzLmNvbXBsaWFuY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzUpIHJldHVybjsK
KwkJTWFwIG9wdGlvbnMgPSBnZXRDb21waWxlck9wdGlvbnMoKTsKKwkJdHJ5IHsKKwkJCVN5c3Rl
bS5zZXRQcm9wZXJ0eSgidG9sZXJhdGVWYXJhcmdzQ29kZVRoYXRDb21waWxlZEVhcmxpZXIiLCAi
dHJ1ZSIpOworCQkJaWYgKHRoaXMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRz
LkpESzFfNykgeworCQkJCXRoaXMucnVuTmVnYXRpdmVUZXN0KAorCQkJCQluZXcgU3RyaW5nW10g
eworCQkJCQkJIlguamF2YSIsCisJCQkJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkJCQki
ICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgZm9vKGludCAuLi5pKSB7fVxuIiArCisJCQkJCQki
ICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgZm9vKGRvdWJsZS4uLmQpIHt9XG4iICsKKwkJCQkJ
CSIgICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKwor
CQkJCQkJIiAgICAgICAgICAgIGZvbygxLCAyLCAzKTtcbiIgKworCQkJCQkJIiAgICAgICAgICAg
IFN5c3RlbS5vdXQucHJpbnRsbiAoXCJEb25lXCIpO1xuIiArCisJCQkJCQkiICAgICAgICB9XG4i
ICsKKwkJCQkJCSJ9XG4iCisJCQkJCX0sCisJCQkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkJCSIx
LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNSlcbiIgKyAKKwkJCQkJIglmb28oMSwgMiwgMyk7
XG4iICsgCisJCQkJCSIJXl5eXG4iICsgCisJCQkJCSJUaGUgbWV0aG9kIGZvbyhpbnRbXSkgaXMg
YW1iaWd1b3VzIGZvciB0aGUgdHlwZSBYXG4iICsgCisJCQkJCSItLS0tLS0tLS0tXG4iLCAKKwkJ
CQkJbnVsbCwgdHJ1ZSwgb3B0aW9ucyk7CisJCQl9IGVsc2UgeworCQkJCXRoaXMucnVuQ29uZm9y
bVRlc3QoCisJCQkJCQluZXcgU3RyaW5nW10geworCQkJCQkJCSJYLmphdmEiLAorCQkJCQkJCSJw
dWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCQkJCQkiICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQg
Zm9vKGludCAuLi5pKSB7fVxuIiArCisJCQkJCQkJIiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lk
IGZvbyhkb3VibGUuLi5kKSB7fVxuIiArCisJCQkJCQkJIiAgICAgICAgcHVibGljIHN0YXRpYyB2
b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuIiArCisJCQkJCQkJIiAgICAgICAgICAgIGZvbygx
LCAyLCAzKTtcbiIgKworCQkJCQkJCSIgICAgICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4gKFwi
RG9uZVwiKTtcbiIgKworCQkJCQkJCSIgICAgICAgIH1cbiIgKworCQkJCQkJCSJ9XG4iCisJCQkJ
CQl9LAorCQkJCQkJIkRvbmUiLCAKKwkJCQkJCW51bGwsIHRydWUsIG51bGwsIG9wdGlvbnMsIG51
bGwpOworCQkJfQorCQl9IGZpbmFsbHkgeworCQkJU3lzdGVtLnNldFByb3BlcnR5KCJ0b2xlcmF0
ZVZhcmFyZ3NDb2RlVGhhdENvbXBpbGVkRWFybGllciIsICJmYWxzZSIpOworCQl9CisJCQorCX0K
KwkKKwkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9Mzgz
NzgwCisJcHVibGljIHZvaWQgdGVzdDA3MF90b2xlcmF0ZTIoKSB0aHJvd3MgRXhjZXB0aW9uIHsK
KwkJaWYgKHRoaXMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNSkg
cmV0dXJuOworCQlNYXAgb3B0aW9ucyA9IGdldENvbXBpbGVyT3B0aW9ucygpOworCQl0cnkgewor
CQkJU3lzdGVtLnNldFByb3BlcnR5KCJ0b2xlcmF0ZVZhcmFyZ3NDb2RlVGhhdENvbXBpbGVkRWFy
bGllciIsICJ0cnVlIik7CisJCQlpZiAodGhpcy5jb21wbGlhbmNlTGV2ZWwgPj0gQ2xhc3NGaWxl
Q29uc3RhbnRzLkpESzFfNykgeworCQkJCXRoaXMucnVuTmVnYXRpdmVUZXN0KAorCQkJCQluZXcg
U3RyaW5nW10geworCQkJCQkJIlguamF2YSIsCisJCQkJCQkiaW1wb3J0IGphdmEudXRpbC5BcnJh
eXM7XG4iICsKKwkJCQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCQkJCSIgICAgICAgIHB1
YmxpYyBzdGF0aWMgdm9pZCB0ZXN0KGludC4uLiBhKSB7XG4iICsKKwkJCQkJCSIJCQlTeXN0ZW0u
b3V0LnByaW50bG4oQXJyYXlzLnRvU3RyaW5nKGEpKTtcbn1cbiIgKworCQkJCQkJIiAgICAgICAg
cHVibGljIHN0YXRpYyA8VD4gdm9pZCB0ZXN0KE9iamVjdC4uLiBhKSB7XG4iICsKKwkJCQkJCSIJ
CQlTeXN0ZW0ub3V0LnByaW50bG4oQXJyYXlzLnRvU3RyaW5nKGEpKTtcbn1cbiIgKworCQkJCQkJ
IiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuIiArCisJ
CQkJCQkiICAgICAgICAgICAgdGVzdCgxKTtcbiIgKworCQkJCQkJIiAgICAgICAgfVxuIiArCisJ
CQkJCQkifVxuIgorCQkJCQl9LAorCQkJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJCQkiMS4gRVJS
T1IgaW4gWC5qYXZhIChhdCBsaW5lIDEwKVxuIiArIAorCQkJCQkiCXRlc3QoMSk7XG4iICsgCisJ
CQkJCSIJXl5eXlxuIiArIAorCQkJCQkiVGhlIG1ldGhvZCB0ZXN0KGludFtdKSBpcyBhbWJpZ3Vv
dXMgZm9yIHRoZSB0eXBlIFhcbiIgKyAKKwkJCQkJIi0tLS0tLS0tLS1cbiIsIAorCQkJCQludWxs
LCB0cnVlLCBvcHRpb25zKTsKKwkJCX0gZWxzZSB7CisJCQkJdGhpcy5ydW5Db25mb3JtVGVzdCgK
KwkJCQkJCW5ldyBTdHJpbmdbXSB7CisJCQkJCQkJCSJYLmphdmEiLAorCQkJCQkJCQkiaW1wb3J0
IGphdmEudXRpbC5BcnJheXM7XG4iICsKKwkJCQkJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKwor
CQkJCQkJCQkiICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgdGVzdChpbnQuLi4gYSkge1xuIiAr
CisJCQkJCQkJCSIJCQlTeXN0ZW0ub3V0LnByaW50bG4oQXJyYXlzLnRvU3RyaW5nKGEpKTtcbn1c
biIgKworCQkJCQkJCQkiICAgICAgICBwdWJsaWMgc3RhdGljIDxUPiB2b2lkIHRlc3QoT2JqZWN0
Li4uIGEpIHtcbiIgKworCQkJCQkJCQkiCQkJU3lzdGVtLm91dC5wcmludGxuKEFycmF5cy50b1N0
cmluZyhhKSk7XG59XG4iICsKKwkJCQkJCQkJIiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIG1h
aW4oU3RyaW5nW10gYXJncykge1xuIiArCisJCQkJCQkJCSIgICAgICAgICAgICB0ZXN0KDEpO1xu
IiArCisJCQkJCQkJCSIgICAgICAgIH1cbiIgKworCQkJCQkJCQkifVxuIgorCQkJCQkJfSwKKwkJ
CQkJCSJbMV0iLCAKKwkJCQkJCW51bGwsIHRydWUsIG51bGwsIG9wdGlvbnMsIG51bGwpOworCQkJ
fQorCQl9IGZpbmFsbHkgeworCQkJU3lzdGVtLnNldFByb3BlcnR5KCJ0b2xlcmF0ZVZhcmFyZ3ND
b2RlVGhhdENvbXBpbGVkRWFybGllciIsICJmYWxzZSIpOworCQl9CisJCQorCX0KIAkvLyBodHRw
czovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzQ2MDM4CiAJcHVibGlj
IHZvaWQgdGVzdDA3MGEoKSB0aHJvd3MgRXhjZXB0aW9uIHsKIAkJaWYgKHRoaXMuY29tcGxpYW5j
ZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNSkgcmV0dXJuOwpAQCAtMjgzNSw2ICsz
MDM5LDUyIEBACiAJCQl9LAogCQkJIkRvbmUiKTsKIAl9CisJLy8gaHR0cHM6Ly9idWdzLmVjbGlw
c2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM4Mzc4MAorCXB1YmxpYyB2b2lkIHRlc3QwNzBh
X3RvbGVyYXRlKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCWlmICh0aGlzLmNvbXBsaWFuY2VMZXZl
bCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzUpIHJldHVybjsKKwkJTWFwIG9wdGlvbnMgPSBn
ZXRDb21waWxlck9wdGlvbnMoKTsKKwkJdHJ5IHsKKwkJCVN5c3RlbS5zZXRQcm9wZXJ0eSgidG9s
ZXJhdGVWYXJhcmdzQ29kZVRoYXRDb21waWxlZEVhcmxpZXIiLCAidHJ1ZSIpOworCQkJaWYgKHRo
aXMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNykgeworCQkJCXRo
aXMucnVuTmVnYXRpdmVUZXN0KAorCQkJCQluZXcgU3RyaW5nW10geworCQkJCQkJIlguamF2YSIs
CisJCQkJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkJCQkiICAgICAgICBwdWJsaWMgc3Rh
dGljIDxUPiB2b2lkIGZvbyhpbnQgLi4uaSkge31cbiIgKworCQkJCQkJIiAgICAgICAgcHVibGlj
IHN0YXRpYyA8VD4gdm9pZCBmb28oZG91YmxlLi4uZCkge31cbiIgKworCQkJCQkJIiAgICAgICAg
cHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuIiArCisJCQkJCQkiICAg
ICAgICAgICAgZm9vKDEsIDIsIDMpO1xuIiArCisJCQkJCQkiICAgICAgICAgICAgU3lzdGVtLm91
dC5wcmludGxuIChcIkRvbmVcIik7XG4iICsKKwkJCQkJCSIgICAgICAgIH1cbiIgKworCQkJCQkJ
In1cbiIKKwkJCQkJfSwKKwkJCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCQkJIjEuIEVSUk9SIGlu
IFguamF2YSAoYXQgbGluZSA1KVxuIiArIAorCQkJCQkiCWZvbygxLCAyLCAzKTtcbiIgKyAKKwkJ
CQkJIgleXl5cbiIgKyAKKwkJCQkJIlRoZSBtZXRob2QgZm9vKGludFtdKSBpcyBhbWJpZ3VvdXMg
Zm9yIHRoZSB0eXBlIFhcbiIgKyAKKwkJCQkJIi0tLS0tLS0tLS1cbiIsIAorCQkJCQludWxsLCB0
cnVlLCBvcHRpb25zKTsKKwkJCX0gZWxzZSB7CisJCQkJdGhpcy5ydW5Db25mb3JtVGVzdCgKKwkJ
CQkJCW5ldyBTdHJpbmdbXSB7CisJCQkJCQkJIlguamF2YSIsCisJCQkJCQkJInB1YmxpYyBjbGFz
cyBYIHtcbiIgKworCQkJCQkJCSIgICAgICAgIHB1YmxpYyBzdGF0aWMgPFQ+IHZvaWQgZm9vKGlu
dCAuLi5pKSB7fVxuIiArCisJCQkJCQkJIiAgICAgICAgcHVibGljIHN0YXRpYyA8VD4gdm9pZCBm
b28oZG91YmxlLi4uZCkge31cbiIgKworCQkJCQkJCSIgICAgICAgIHB1YmxpYyBzdGF0aWMgdm9p
ZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKworCQkJCQkJCSIgICAgICAgICAgICBmb28oMSwg
MiwgMyk7XG4iICsKKwkJCQkJCQkiICAgICAgICAgICAgU3lzdGVtLm91dC5wcmludGxuIChcIkRv
bmVcIik7XG4iICsKKwkJCQkJCQkiICAgICAgICB9XG4iICsKKwkJCQkJCQkifVxuIgorCQkJCQkJ
fSwKKwkJCQkJCSJEb25lIiwgCisJCQkJCQludWxsLCB0cnVlLCBudWxsLCBvcHRpb25zLCBudWxs
KTsKKwkJCX0KKwkJfSBmaW5hbGx5IHsKKwkJCVN5c3RlbS5zZXRQcm9wZXJ0eSgidG9sZXJhdGVW
YXJhcmdzQ29kZVRoYXRDb21waWxlZEVhcmxpZXIiLCAiZmFsc2UiKTsKKwkJfQorCX0KIAkvLyBo
dHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzQ2MDM4CiAJcHVi
bGljIHZvaWQgdGVzdDA3MGIoKSB0aHJvd3MgRXhjZXB0aW9uIHsKIAkJaWYgKHRoaXMuY29tcGxp
YW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNSkgcmV0dXJuOwpkaWZmIC0tZ2l0
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhCmlu
ZGV4IDI1ZmVlMDkuLjFjYTIxNmUgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2
YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEKQEAgLTEsNSArMSw1IEBACiAvKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDExIElCTSBDb3Jwb3Jh
dGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEyIElCTSBDb3Jwb3Jh
dGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFu
ZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVy
IHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBh
Y2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdApAQCAtNTgy
LDYgKzU4MiwxMCBAQAogCQl9CiAKIAkJaW50IGNvbXBhdGliaWxpdHlMZXZlbDsKKwkJQ29tcGls
ZXJPcHRpb25zIG9wdGlvbnMgPSB0aGlzLmNvbXBpbGVyT3B0aW9ucygpOworCQlTdHJpbmcgdG9s
ZXJhdGVWYXJhcmdzQ29kZSA9IFN5c3RlbS5nZXRQcm9wZXJ0eSgidG9sZXJhdGVWYXJhcmdzQ29k
ZVRoYXRDb21waWxlZEVhcmxpZXIiKTsgLy8kTk9OLU5MUy0xJAorCQlpZiAob3B0aW9ucy5jb21w
bGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV83ICYmIHRvbGVyYXRlVmFyYXJn
c0NvZGUgIT0gbnVsbCAmJiB0b2xlcmF0ZVZhcmFyZ3NDb2RlLmVxdWFsc0lnbm9yZUNhc2UoInRy
dWUiKSkgLy8kTk9OLU5MUy0xJAorCQkJdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcyA9IGZhbHNl
OwogCQlpZiAoKGNvbXBhdGliaWxpdHlMZXZlbCA9IHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZl
bChtZXRob2QsIGFyZ3VtZW50cywgdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcykpID4gTk9UX0NP
TVBBVElCTEUpIHsKIAkJCWlmIChjb21wYXRpYmlsaXR5TGV2ZWwgPT0gVkFSQVJHU19DT01QQVRJ
QkxFKSB7CiAJCQkJVHlwZUJpbmRpbmcgdmFyYXJnc0VsZW1lbnRUeXBlID0gbWV0aG9kLnBhcmFt
ZXRlcnNbbWV0aG9kLnBhcmFtZXRlcnMubGVuZ3RoIC0gMV0ubGVhZkNvbXBvbmVudFR5cGUoKTsK
QEAgLTMwMjksOCArMzAzMywxNSBAQAogCQkJCQlpZiAoaSA9PSBvbmVQYXJhbXNMZW5ndGggLSAx
ICYmIG9uZS5pc1ZhcmFyZ3MoKSAmJiB0d28uaXNWYXJhcmdzKCkpIHsKIAkJCQkJCVR5cGVCaW5k
aW5nIG9UeXBlID0gKChBcnJheUJpbmRpbmcpIG9uZVBhcmFtKS5lbGVtZW50c1R5cGUoKTsKIAkJ
CQkJCVR5cGVCaW5kaW5nIGVUeXBlID0gKChBcnJheUJpbmRpbmcpIHR3b1BhcmFtKS5lbGVtZW50
c1R5cGUoKTsKLQkJCQkJCWlmIChvVHlwZSA9PSBlVHlwZSB8fCBvVHlwZS5pc0NvbXBhdGlibGVX
aXRoKGVUeXBlKSkKLQkJCQkJCQlyZXR1cm4gdHJ1ZTsgLy8gc3BlY2lhbCBjYXNlIHRvIGNob29z
ZSBiZXR3ZWVuIDIgdmFyYXJncyBtZXRob2RzIHdoZW4gdGhlIGxhc3QgYXJnIGlzIE9iamVjdFtd
CisJCQkJCQlDb21waWxlck9wdGlvbnMgb3B0aW9ucyA9IHRoaXMuY29tcGlsZXJPcHRpb25zKCk7
CisJCQkJCQlTdHJpbmcgdG9sZXJhdGVWYXJhcmdzQ29kZSA9IFN5c3RlbS5nZXRQcm9wZXJ0eSgi
dG9sZXJhdGVWYXJhcmdzQ29kZVRoYXRDb21waWxlZEVhcmxpZXIiKTsgLy8kTk9OLU5MUy0xJAor
CQkJCQkJaWYgKG9wdGlvbnMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpE
SzFfNyAmJiB0b2xlcmF0ZVZhcmFyZ3NDb2RlICE9IG51bGwgJiYgdG9sZXJhdGVWYXJhcmdzQ29k
ZS5lcXVhbHNJZ25vcmVDYXNlKCJ0cnVlIikpIHsvLyROT04tTkxTLTEkCisJCQkJCQkJaWYgKG9u
ZVBhcmFtID09IGVUeXBlIHx8IG9uZVBhcmFtLmlzQ29tcGF0aWJsZVdpdGgoZVR5cGUpKQorCQkJ
CQkJCQlyZXR1cm4gdHJ1ZTsgLy8gc3BlY2lhbCBjYXNlIHRvIGNob29zZSBiZXR3ZWVuIDIgdmFy
YXJncyBtZXRob2RzIHdoZW4gdGhlIGxhc3QgYXJnIGlzIE9iamVjdFtdCisJCQkJCQl9IGVsc2Ug
eworCQkJCQkJCWlmIChvVHlwZSA9PSBlVHlwZSB8fCBvVHlwZS5pc0NvbXBhdGlibGVXaXRoKGVU
eXBlKSkKKwkJCQkJCQkJcmV0dXJuIHRydWU7IC8vIHNwZWNpYWwgY2FzZSB0byBjaG9vc2UgYmV0
d2VlbiAyIHZhcmFyZ3MgbWV0aG9kcyB3aGVuIHRoZSBsYXN0IGFyZyBpcyBPYmplY3RbXQorCQkJ
CQkJfQogCQkJCQl9CiAJCQkJCXJldHVybiBmYWxzZTsKIAkJCQl9CkBAIC00MDkyLDcgKzQxMDMs
MTIgQEAKIAkJLy8gb25seSBjYWxsZWQgaWYgZW52Lm9wdGlvbnMuc291cmNlTGV2ZWwgPj0gQ2xh
c3NGaWxlQ29uc3RhbnRzLkpESzFfNQogCQlpZiAoYXJnLmlzQ29tcGF0aWJsZVdpdGgocGFyYW0p
KQogCQkJcmV0dXJuIENPTVBBVElCTEU7Ci0JCWlmICh0aWVCcmVha2luZ1ZhcmFyZ3NNZXRob2Rz
KSB7CisJCUNvbXBpbGVyT3B0aW9ucyBvcHRpb25zID0gdGhpcy5jb21waWxlck9wdGlvbnMoKTsK
KwkJU3RyaW5nIHRvbGVyYXRlVmFyYXJnc0NvZGUgPSBTeXN0ZW0uZ2V0UHJvcGVydHkoInRvbGVy
YXRlVmFyYXJnc0NvZGVUaGF0Q29tcGlsZWRFYXJsaWVyIik7IC8vJE5PTi1OTFMtMSQKKwkJYm9v
bGVhbiBpc1RvbGVyYXRlVmFyYXJnc1NldCA9IGZhbHNlOworCQlpZiAodG9sZXJhdGVWYXJhcmdz
Q29kZSAhPSBudWxsICYmIHRvbGVyYXRlVmFyYXJnc0NvZGUuZXF1YWxzSWdub3JlQ2FzZSgidHJ1
ZSIpKSAvLyROT04tTkxTLTEkCisJCQlpc1RvbGVyYXRlVmFyYXJnc1NldCA9IHRydWU7CisJCWlm
ICh0aWVCcmVha2luZ1ZhcmFyZ3NNZXRob2RzICYmIChvcHRpb25zLmNvbXBsaWFuY2VMZXZlbCA+
PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV83IHx8ICFpc1RvbGVyYXRlVmFyYXJnc1NldCkpIHsg
Ly8kTk9OLU5MUy0xJAogCQkJLyogMTUuMTIuMi41IENob29zaW5nIHRoZSBNb3N0IFNwZWNpZmlj
IE1ldGhvZCwgLi4uIE9uZSB2YXJpYWJsZSBhcml0eSBtZW1iZXIgbWV0aG9kIG5hbWVkIG0gaXMg
bW9yZSBzcGVjaWZpYyB0aGFuCiAJCQkgICBhbm90aGVyIHZhcmlhYmxlIGFyaXR5IG1lbWJlciBt
ZXRob2Qgb2YgdGhlIHNhbWUgbmFtZSBpZiBlaXRoZXIgLi4uIE9ubHkgc3VidHlwZXMgcmVsYXRp
b25zaGlwIHNob3VsZCBiZSB1c2VkLgogCQkJICAgQWN0dWFsbHkgdGhpcyBpcyB0cnVlIGV2ZW4g
Zm9yIGZpeGVkIGFyaXR5IG1ldGhvZHMsIGJ1dCBpbiBwcmFjdGljZSBpcyBub3QgYW4gaXNzdWUg
c2luY2Ugd2UgcnVuIHRoZSBhbGdvcml0aG0=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>218319</attachid>
            <date>2012-07-05 04:11:00 -0400</date>
            <delta_ts>2012-07-17 07:58:19 -0400</delta_ts>
            <desc>proposed fix v2.1 + regression tests</desc>
            <filename>Fixed-bug-383780-Eclipse-42-fails-to-compile-valid-J_2.patch</filename>
            <type>text/plain</type>
            <size>15402</size>
            <attacher name="Ayushman Jain">amj87.iitr</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1ZhcmFyZ3NUZXN0Lmph
dmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2Uv
amR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9WYXJhcmdzVGVzdC5qYXZhCmluZGV4
IDUzNjcyM2IuLjcwZGQzMDggMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3Rz
LmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNz
aW9uL1ZhcmFyZ3NUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29t
cGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24v
VmFyYXJnc1Rlc3QuamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
Ci0gKiBDb3B5cmlnaHQgKGMpIDIwMDUsIDIwMTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMu
CisgKiBDb3B5cmlnaHQgKGMpIDIwMDUsIDIwMTIgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMu
CiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlp
bmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRo
ZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMg
ZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC0zMyw3ICszMyw3IEBACiAJLy8g
U3RhdGljIGluaXRpYWxpemVyIHRvIHNwZWNpZnkgdGVzdHMgc3Vic2V0IHVzaW5nIFRFU1RTXyog
c3RhdGljIHZhcmlhYmxlcwogCS8vIEFsbCBzcGVjaWZpZWQgdGVzdHMgd2hpY2ggZG9lcyBub3Qg
YmVsb25nIHRvIHRoZSBjbGFzcyBhcmUgc2tpcHBlZC4uLgogCXN0YXRpYyB7Ci0vLwkJVEVTVFNf
TkFNRVMgPSBuZXcgU3RyaW5nW10geyAidGVzdDAwMCIgfTsKKy8vCQlURVNUU19OQU1FUyA9IG5l
dyBTdHJpbmdbXSB7ICJ0ZXN0MDMzIiB9OwogLy8JCVRFU1RTX05VTUJFUlMgPSBuZXcgaW50W10g
eyA2MSB9OwogLy8JCVRFU1RTX1JBTkdFID0gbmV3IGludFtdIHsgMTEsIC0xIH07CiAJfQpAQCAt
Nzk4LDYgKzc5OCw1NSBAQAogCQkJIi0tLS0tLS0tLS1cbiIKIAkJKTsKIAl9CisJCisJLy8gaHR0
cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM4Mzc4MAorCXB1Ymxp
YyB2b2lkIHRlc3QwMTVfdG9sZXJhdGUoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJaWYgKHRoaXMu
Y29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNSkgcmV0dXJuOworCQlN
YXAgb3B0aW9ucyA9IGdldENvbXBpbGVyT3B0aW9ucygpOworCQl0cnkgeworCQkJU3lzdGVtLnNl
dFByb3BlcnR5KCJ0b2xlcmF0ZUlsbGVnYWxBbWJpZ3VvdXNWYXJhcmdzSW52b2NhdGlvbiIsICJ0
cnVlIik7CisJCQlpZiAodGhpcy5jb21wbGlhbmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRz
LkpESzFfNykgeworCQkJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCQkJCW5ldyBTdHJpbmdbXSB7
CisJCQkJCQkJIlguamF2YSIsCisJCQkJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJCQkJ
CSIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gcykge1xuIiArCisJCQkJCQkJIgkJ
WS5jb3VudChuZXcgaW50WzBdKTtcbiIgKyAvLyBmb3Igc29tZSByZWFzb24gdGhpcyBpcyBub3Qg
YW1iaWd1b3VzCisJCQkJCQkJIgl9XG4iICsKKwkJCQkJCQkifVxuIiArCisJCQkJCQkJImNsYXNz
IFkge1xuIiArCisJCQkJCQkJIglwdWJsaWMgc3RhdGljIHZvaWQgY291bnQoaW50W10gYXJyYXks
IGludCAuLi4gdmFsdWVzKSB7IFN5c3RlbS5vdXQucHJpbnQoMSk7IH1cbiIgKworCQkJCQkJCSIJ
cHVibGljIHN0YXRpYyB2b2lkIGNvdW50KGludFtdIGFycmF5LCBpbnRbXSAuLi4gdmFsdWVzKSB7
IFN5c3RlbS5vdXQucHJpbnQoMik7IH1cbiIgKworCQkJCQkJCSJ9XG4iLAorCQkJCX0sCisJCQkJ
Ii0tLS0tLS0tLS1cbiIgKyAKKwkJCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDMpXG4i
ICsgCisJCQkJIglZLmNvdW50KG5ldyBpbnRbMF0pO1xuIiArIAorCQkJCSIJICBeXl5eXlxuIiAr
IAorCQkJCSJUaGUgbWV0aG9kIGNvdW50KGludFtdLCBpbnRbXSkgaXMgYW1iaWd1b3VzIGZvciB0
aGUgdHlwZSBZXG4iICsgCisJCQkJIi0tLS0tLS0tLS1cbiIsCisJCQkJbnVsbCwgdHJ1ZSwgb3B0
aW9ucyk7CisJCQl9IGVsc2UgeworCQkJCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCQkJCW5ldyBT
dHJpbmdbXSB7CisJCQkJCQkJIlguamF2YSIsCisJCQkJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIg
KworCQkJCQkJCSIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gcykge1xuIiArCisJ
CQkJCQkJIgkJWS5jb3VudChuZXcgaW50WzBdKTtcbiIgKyAvLyBmb3Igc29tZSByZWFzb24gdGhp
cyBpcyBub3QgYW1iaWd1b3VzCisJCQkJCQkJIgl9XG4iICsKKwkJCQkJCQkifVxuIiArCisJCQkJ
CQkJImNsYXNzIFkge1xuIiArCisJCQkJCQkJIglwdWJsaWMgc3RhdGljIHZvaWQgY291bnQoaW50
W10gYXJyYXksIGludCAuLi4gdmFsdWVzKSB7IFN5c3RlbS5vdXQucHJpbnQoMSk7IH1cbiIgKwor
CQkJCQkJCSIJcHVibGljIHN0YXRpYyB2b2lkIGNvdW50KGludFtdIGFycmF5LCBpbnRbXSAuLi4g
dmFsdWVzKSB7IFN5c3RlbS5vdXQucHJpbnQoMik7IH1cbiIgKworCQkJCQkJCSJ9XG4iLAorCQkJ
CX0sCisJCQkJIjEiLCAKKwkJCQludWxsLCB0cnVlLCBudWxsLCBvcHRpb25zLCBudWxsKTsKKwkJ
CX0KKwkJfSBmaW5hbGx5IHsKKwkJCVN5c3RlbS5zZXRQcm9wZXJ0eSgidG9sZXJhdGVJbGxlZ2Fs
QW1iaWd1b3VzVmFyYXJnc0ludm9jYXRpb24iLCAiZmFsc2UiKTsKKwkJfQorCX0KIAogCXB1Ymxp
YyB2b2lkIHRlc3QwMTYoKSB7IC8vIGNoZWNrIGJlaGF2aW91ciBvZiBTY29wZS5tb3N0U3BlY2lm
aWNNZXRob2RCaW5kaW5nKCkKIAkJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoIC8vIGJ1dCB0aGlzIGNh
bGwgaXMgYW1iaWd1b3VzCkBAIC0xMjM1LDcgKzEyODQsNyBAQAogCQkJfSwKIAkJCSIxIik7CiAJ
fQotCS8vaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTEwMjYz
MQorIAkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MTAy
NjMxCiAJcHVibGljIHZvaWQgdGVzdDAzMygpIHsKIAkJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCiAJ
CQluZXcgU3RyaW5nW10gewpAQCAtMTMwMSw2ICsxMzUwLDYxIEBACiAJCQkiVGhlIG1ldGhvZCBj
KGJvb2xlYW4sIGJvb2xlYW4sIE9iamVjdFtdKSBpcyBhbWJpZ3VvdXMgZm9yIHRoZSB0eXBlIFhc
biIgKwogCQkJIi0tLS0tLS0tLS1cbiIKIAkJKTsKKwl9CisJLy8gaHR0cHM6Ly9idWdzLmVjbGlw
c2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM4Mzc4MAorCXB1YmxpYyB2b2lkIHRlc3QwMzNf
dG9sZXJhdGUoKSB7CisJCWlmICh0aGlzLmNvbXBsaWFuY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0
YW50cy5KREsxXzUpIHJldHVybjsKKwkJTWFwIG9wdGlvbnMgPSBnZXRDb21waWxlck9wdGlvbnMo
KTsKKwkJdHJ5IHsKKwkJCVN5c3RlbS5zZXRQcm9wZXJ0eSgidG9sZXJhdGVJbGxlZ2FsQW1iaWd1
b3VzVmFyYXJnc0ludm9jYXRpb24iLCAidHJ1ZSIpOworCQkJaWYgKHRoaXMuY29tcGxpYW5jZUxl
dmVsID49IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzcpIHsKKwkJCQl0aGlzLnJ1bk5lZ2F0aXZl
VGVzdCgKKwkJCQkJbmV3IFN0cmluZ1tdIHsKKwkJCQkJCSJYLmphdmEiLAorCQkJCQkJInB1Ymxp
YyBjbGFzcyBYIHtcbiIgKworCQkJCQkJIgl2b2lkIGEoYm9vbGVhbiBiLCBPYmplY3QuLi4gbykg
e1N5c3RlbS5vdXQucHJpbnQoMSk7fVxuIiArCisJCQkJCQkiCXZvaWQgYShPYmplY3QuLi4gbykg
e1N5c3RlbS5vdXQucHJpbnQoMik7fVxuIiArCisJCQkJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBt
YWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKworCQkJCQkJIgkJWCB4ID0gbmV3IFgoKTtcbiIgKwor
CQkJCQkJIgkJeC5hKHRydWUpO1xuIiArCisJCQkJCQkiCQl4LmEodHJ1ZSwgXCJmb29iYXJcIik7
XG4iICsKKwkJCQkJCSIJCXguYShcImZvb1wiLCBcImJhclwiKTtcbiIgKworCQkJCQkJIgl9XG4i
ICsKKwkJCQkJCSJ9XG4iLAorCQkJCQl9LAorCQkJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJCQki
MS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDYpXG4iICsgCisJCQkJCSIJeC5hKHRydWUpO1xu
IiArIAorCQkJCQkiCSAgXlxuIiArIAorCQkJCQkiVGhlIG1ldGhvZCBhKGJvb2xlYW4sIE9iamVj
dFtdKSBpcyBhbWJpZ3VvdXMgZm9yIHRoZSB0eXBlIFhcbiIgKyAKKwkJCQkJIi0tLS0tLS0tLS1c
biIgKyAKKwkJCQkJIjIuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA3KVxuIiArIAorCQkJCQki
CXguYSh0cnVlLCBcImZvb2JhclwiKTtcbiIgKyAKKwkJCQkJIgkgIF5cbiIgKyAKKwkJCQkJIlRo
ZSBtZXRob2QgYShib29sZWFuLCBPYmplY3RbXSkgaXMgYW1iaWd1b3VzIGZvciB0aGUgdHlwZSBY
XG4iICsgCisJCQkJCSItLS0tLS0tLS0tXG4iLAorCQkJCQludWxsLCB0cnVlLCBvcHRpb25zKTsK
KwkJCX0gZWxzZSB7CisJCQkJdGhpcy5ydW5Db25mb3JtVGVzdCgKKwkJCQkJCW5ldyBTdHJpbmdb
XSB7CisJCQkJCQkJIlguamF2YSIsCisJCQkJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJ
CQkJCSIJdm9pZCBhKGJvb2xlYW4gYiwgT2JqZWN0Li4uIG8pIHtTeXN0ZW0ub3V0LnByaW50KDEp
O31cbiIgKworCQkJCQkJCSIJdm9pZCBhKE9iamVjdC4uLiBvKSB7U3lzdGVtLm91dC5wcmludCgy
KTt9XG4iICsKKwkJCQkJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3Mp
IHtcbiIgKworCQkJCQkJCSIJCVggeCA9IG5ldyBYKCk7XG4iICsKKwkJCQkJCQkiCQl4LmEodHJ1
ZSk7XG4iICsKKwkJCQkJCQkiCQl4LmEodHJ1ZSwgXCJmb29iYXJcIik7XG4iICsKKwkJCQkJCQki
CQl4LmEoXCJmb29cIiwgXCJiYXJcIik7XG4iICsKKwkJCQkJCQkiCX1cbiIgKworCQkJCQkJCSJ9
XG4iLAorCQkJCQkJfSwKKwkJCQkJCSIxMTIiLAorCQkJCQkJbnVsbCwgdHJ1ZSwgbnVsbCwgb3B0
aW9ucywgbnVsbCk7CisJCQl9CisJCX0gZmluYWxseSB7CisJCQlTeXN0ZW0uc2V0UHJvcGVydHko
InRvbGVyYXRlSWxsZWdhbEFtYmlndW91c1ZhcmFyZ3NJbnZvY2F0aW9uIiwgImZhbHNlIik7CisJ
CX0KIAl9CiAJLy9odHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9
MTA2MTA2CiAJcHVibGljIHZvaWQgdGVzdDAzNCgpIHsKQEAgLTI4MTgsNiArMjkyMiwxMDYgQEAK
IAkJCX0sCiAJCQkiRG9uZSIpOwogCX0KKwkKKwkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcv
YnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzgzNzgwCisJcHVibGljIHZvaWQgdGVzdDA3MF90b2xlcmF0
ZSgpIHRocm93cyBFeGNlcHRpb24geworCQlpZiAodGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFz
c0ZpbGVDb25zdGFudHMuSkRLMV81KSByZXR1cm47CisJCU1hcCBvcHRpb25zID0gZ2V0Q29tcGls
ZXJPcHRpb25zKCk7CisJCXRyeSB7CisJCQlTeXN0ZW0uc2V0UHJvcGVydHkoInRvbGVyYXRlSWxs
ZWdhbEFtYmlndW91c1ZhcmFyZ3NJbnZvY2F0aW9uIiwgInRydWUiKTsKKwkJCWlmICh0aGlzLmNv
bXBsaWFuY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzcpIHsKKwkJCQl0aGlzLnJ1
bk5lZ2F0aXZlVGVzdCgKKwkJCQkJbmV3IFN0cmluZ1tdIHsKKwkJCQkJCSJYLmphdmEiLAorCQkJ
CQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJCQkJIiAgICAgICAgcHVibGljIHN0YXRpYyB2
b2lkIGZvbyhpbnQgLi4uaSkge31cbiIgKworCQkJCQkJIiAgICAgICAgcHVibGljIHN0YXRpYyB2
b2lkIGZvbyhkb3VibGUuLi5kKSB7fVxuIiArCisJCQkJCQkiICAgICAgICBwdWJsaWMgc3RhdGlj
IHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsKKwkJCQkJCSIgICAgICAgICAgICBmb28o
MSwgMiwgMyk7XG4iICsKKwkJCQkJCSIgICAgICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4gKFwi
RG9uZVwiKTtcbiIgKworCQkJCQkJIiAgICAgICAgfVxuIiArCisJCQkJCQkifVxuIgorCQkJCQl9
LAorCQkJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBs
aW5lIDUpXG4iICsgCisJCQkJCSIJZm9vKDEsIDIsIDMpO1xuIiArIAorCQkJCQkiCV5eXlxuIiAr
IAorCQkJCQkiVGhlIG1ldGhvZCBmb28oaW50W10pIGlzIGFtYmlndW91cyBmb3IgdGhlIHR5cGUg
WFxuIiArIAorCQkJCQkiLS0tLS0tLS0tLVxuIiwgCisJCQkJCW51bGwsIHRydWUsIG9wdGlvbnMp
OworCQkJfSBlbHNlIHsKKwkJCQl0aGlzLnJ1bkNvbmZvcm1UZXN0KAorCQkJCQkJbmV3IFN0cmlu
Z1tdIHsKKwkJCQkJCQkiWC5qYXZhIiwKKwkJCQkJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJ
CQkJCQkJIiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIGZvbyhpbnQgLi4uaSkge31cbiIgKwor
CQkJCQkJCSIgICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBmb28oZG91YmxlLi4uZCkge31cbiIg
KworCQkJCQkJCSIgICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3Mp
IHtcbiIgKworCQkJCQkJCSIgICAgICAgICAgICBmb28oMSwgMiwgMyk7XG4iICsKKwkJCQkJCQki
ICAgICAgICAgICAgU3lzdGVtLm91dC5wcmludGxuIChcIkRvbmVcIik7XG4iICsKKwkJCQkJCQki
ICAgICAgICB9XG4iICsKKwkJCQkJCQkifVxuIgorCQkJCQkJfSwKKwkJCQkJCSJEb25lIiwgCisJ
CQkJCQludWxsLCB0cnVlLCBudWxsLCBvcHRpb25zLCBudWxsKTsKKwkJCX0KKwkJfSBmaW5hbGx5
IHsKKwkJCVN5c3RlbS5zZXRQcm9wZXJ0eSgidG9sZXJhdGVJbGxlZ2FsQW1iaWd1b3VzVmFyYXJn
c0ludm9jYXRpb24iLCAiZmFsc2UiKTsKKwkJfQorCQkKKwl9CisJCisJLy8gaHR0cHM6Ly9idWdz
LmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM4Mzc4MAorCXB1YmxpYyB2b2lkIHRl
c3QwNzBfdG9sZXJhdGUyKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCWlmICh0aGlzLmNvbXBsaWFu
Y2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzUpIHJldHVybjsKKwkJTWFwIG9wdGlv
bnMgPSBnZXRDb21waWxlck9wdGlvbnMoKTsKKwkJdHJ5IHsKKwkJCVN5c3RlbS5zZXRQcm9wZXJ0
eSgidG9sZXJhdGVJbGxlZ2FsQW1iaWd1b3VzVmFyYXJnc0ludm9jYXRpb24iLCAidHJ1ZSIpOwor
CQkJaWYgKHRoaXMuY29tcGxpYW5jZUxldmVsID49IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzcp
IHsKKwkJCQl0aGlzLnJ1bk5lZ2F0aXZlVGVzdCgKKwkJCQkJbmV3IFN0cmluZ1tdIHsKKwkJCQkJ
CSJYLmphdmEiLAorCQkJCQkJImltcG9ydCBqYXZhLnV0aWwuQXJyYXlzO1xuIiArCisJCQkJCQki
cHVibGljIGNsYXNzIFgge1xuIiArCisJCQkJCQkiICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQg
dGVzdChpbnQuLi4gYSkge1xuIiArCisJCQkJCQkiCQkJU3lzdGVtLm91dC5wcmludGxuKEFycmF5
cy50b1N0cmluZyhhKSk7XG59XG4iICsKKwkJCQkJCSIgICAgICAgIHB1YmxpYyBzdGF0aWMgPFQ+
IHZvaWQgdGVzdChPYmplY3QuLi4gYSkge1xuIiArCisJCQkJCQkiCQkJU3lzdGVtLm91dC5wcmlu
dGxuKEFycmF5cy50b1N0cmluZyhhKSk7XG59XG4iICsKKwkJCQkJCSIgICAgICAgIHB1YmxpYyBz
dGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKworCQkJCQkJIiAgICAgICAgICAg
IHRlc3QoMSk7XG4iICsKKwkJCQkJCSIgICAgICAgIH1cbiIgKworCQkJCQkJIn1cbiIKKwkJCQkJ
fSwKKwkJCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCQkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQg
bGluZSAxMClcbiIgKyAKKwkJCQkJIgl0ZXN0KDEpO1xuIiArIAorCQkJCQkiCV5eXl5cbiIgKyAK
KwkJCQkJIlRoZSBtZXRob2QgdGVzdChpbnRbXSkgaXMgYW1iaWd1b3VzIGZvciB0aGUgdHlwZSBY
XG4iICsgCisJCQkJCSItLS0tLS0tLS0tXG4iLCAKKwkJCQkJbnVsbCwgdHJ1ZSwgb3B0aW9ucyk7
CisJCQl9IGVsc2UgeworCQkJCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCQkJCQluZXcgU3RyaW5n
W10geworCQkJCQkJCQkiWC5qYXZhIiwKKwkJCQkJCQkJImltcG9ydCBqYXZhLnV0aWwuQXJyYXlz
O1xuIiArCisJCQkJCQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCQkJCQkJIiAgICAgICAg
cHVibGljIHN0YXRpYyB2b2lkIHRlc3QoaW50Li4uIGEpIHtcbiIgKworCQkJCQkJCQkiCQkJU3lz
dGVtLm91dC5wcmludGxuKEFycmF5cy50b1N0cmluZyhhKSk7XG59XG4iICsKKwkJCQkJCQkJIiAg
ICAgICAgcHVibGljIHN0YXRpYyA8VD4gdm9pZCB0ZXN0KE9iamVjdC4uLiBhKSB7XG4iICsKKwkJ
CQkJCQkJIgkJCVN5c3RlbS5vdXQucHJpbnRsbihBcnJheXMudG9TdHJpbmcoYSkpO1xufVxuIiAr
CisJCQkJCQkJCSIgICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3Mp
IHtcbiIgKworCQkJCQkJCQkiICAgICAgICAgICAgdGVzdCgxKTtcbiIgKworCQkJCQkJCQkiICAg
ICAgICB9XG4iICsKKwkJCQkJCQkJIn1cbiIKKwkJCQkJCX0sCisJCQkJCQkiWzFdIiwgCisJCQkJ
CQludWxsLCB0cnVlLCBudWxsLCBvcHRpb25zLCBudWxsKTsKKwkJCX0KKwkJfSBmaW5hbGx5IHsK
KwkJCVN5c3RlbS5zZXRQcm9wZXJ0eSgidG9sZXJhdGVJbGxlZ2FsQW1iaWd1b3VzVmFyYXJnc0lu
dm9jYXRpb24iLCAiZmFsc2UiKTsKKwkJfQorCQkKKwl9CiAJLy8gaHR0cHM6Ly9idWdzLmVjbGlw
c2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM0NjAzOAogCXB1YmxpYyB2b2lkIHRlc3QwNzBh
KCkgdGhyb3dzIEV4Y2VwdGlvbiB7CiAJCWlmICh0aGlzLmNvbXBsaWFuY2VMZXZlbCA8IENsYXNz
RmlsZUNvbnN0YW50cy5KREsxXzUpIHJldHVybjsKQEAgLTI4MzUsNiArMzAzOSw1MiBAQAogCQkJ
fSwKIAkJCSJEb25lIik7CiAJfQorCS8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3No
b3dfYnVnLmNnaT9pZD0zODM3ODAKKwlwdWJsaWMgdm9pZCB0ZXN0MDcwYV90b2xlcmF0ZSgpIHRo
cm93cyBFeGNlcHRpb24geworCQlpZiAodGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVD
b25zdGFudHMuSkRLMV81KSByZXR1cm47CisJCU1hcCBvcHRpb25zID0gZ2V0Q29tcGlsZXJPcHRp
b25zKCk7CisJCXRyeSB7CisJCQlTeXN0ZW0uc2V0UHJvcGVydHkoInRvbGVyYXRlSWxsZWdhbEFt
YmlndW91c1ZhcmFyZ3NJbnZvY2F0aW9uIiwgInRydWUiKTsKKwkJCWlmICh0aGlzLmNvbXBsaWFu
Y2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzcpIHsKKwkJCQl0aGlzLnJ1bk5lZ2F0
aXZlVGVzdCgKKwkJCQkJbmV3IFN0cmluZ1tdIHsKKwkJCQkJCSJYLmphdmEiLAorCQkJCQkJInB1
YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJCQkJIiAgICAgICAgcHVibGljIHN0YXRpYyA8VD4gdm9p
ZCBmb28oaW50IC4uLmkpIHt9XG4iICsKKwkJCQkJCSIgICAgICAgIHB1YmxpYyBzdGF0aWMgPFQ+
IHZvaWQgZm9vKGRvdWJsZS4uLmQpIHt9XG4iICsKKwkJCQkJCSIgICAgICAgIHB1YmxpYyBzdGF0
aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKworCQkJCQkJIiAgICAgICAgICAgIGZv
bygxLCAyLCAzKTtcbiIgKworCQkJCQkJIiAgICAgICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbiAo
XCJEb25lXCIpO1xuIiArCisJCQkJCQkiICAgICAgICB9XG4iICsKKwkJCQkJCSJ9XG4iCisJCQkJ
CX0sCisJCQkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0
IGxpbmUgNSlcbiIgKyAKKwkJCQkJIglmb28oMSwgMiwgMyk7XG4iICsgCisJCQkJCSIJXl5eXG4i
ICsgCisJCQkJCSJUaGUgbWV0aG9kIGZvbyhpbnRbXSkgaXMgYW1iaWd1b3VzIGZvciB0aGUgdHlw
ZSBYXG4iICsgCisJCQkJCSItLS0tLS0tLS0tXG4iLCAKKwkJCQkJbnVsbCwgdHJ1ZSwgb3B0aW9u
cyk7CisJCQl9IGVsc2UgeworCQkJCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCQkJCQluZXcgU3Ry
aW5nW10geworCQkJCQkJCSJYLmphdmEiLAorCQkJCQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsK
KwkJCQkJCQkiICAgICAgICBwdWJsaWMgc3RhdGljIDxUPiB2b2lkIGZvbyhpbnQgLi4uaSkge31c
biIgKworCQkJCQkJCSIgICAgICAgIHB1YmxpYyBzdGF0aWMgPFQ+IHZvaWQgZm9vKGRvdWJsZS4u
LmQpIHt9XG4iICsKKwkJCQkJCQkiICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJp
bmdbXSBhcmdzKSB7XG4iICsKKwkJCQkJCQkiICAgICAgICAgICAgZm9vKDEsIDIsIDMpO1xuIiAr
CisJCQkJCQkJIiAgICAgICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbiAoXCJEb25lXCIpO1xuIiAr
CisJCQkJCQkJIiAgICAgICAgfVxuIiArCisJCQkJCQkJIn1cbiIKKwkJCQkJCX0sCisJCQkJCQki
RG9uZSIsIAorCQkJCQkJbnVsbCwgdHJ1ZSwgbnVsbCwgb3B0aW9ucywgbnVsbCk7CisJCQl9CisJ
CX0gZmluYWxseSB7CisJCQlTeXN0ZW0uc2V0UHJvcGVydHkoInRvbGVyYXRlSWxsZWdhbEFtYmln
dW91c1ZhcmFyZ3NJbnZvY2F0aW9uIiwgImZhbHNlIik7CisJCX0KKwl9CiAJLy8gaHR0cHM6Ly9i
dWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM0NjAzOAogCXB1YmxpYyB2b2lk
IHRlc3QwNzBiKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CiAJCWlmICh0aGlzLmNvbXBsaWFuY2VMZXZl
bCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzUpIHJldHVybjsKZGlmZiAtLWdpdCBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9pbXBsL0NvbXBpbGVyT3B0aW9ucy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2ltcGwvQ29tcGlsZXJPcHRpb25z
LmphdmEKaW5kZXggMWEyYjc1Zi4uNWZkYTAyNSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2ltcGwvQ29t
cGlsZXJPcHRpb25zLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2ltcGwvQ29tcGlsZXJPcHRpb25zLmphdmEK
QEAgLTQxNCw2ICs0MTQsMTkgQEAKIAlwdWJsaWMgYm9vbGVhbiBhbmFseXNlUmVzb3VyY2VMZWFr
czsKIAkvKiogU2hvdWxkIG1pc3NpbmcgZW51bSBjYXNlcyBiZSByZXBvcnRlZCBldmVuIGlmIGEg
ZGVmYXVsdCBjYXNlIGV4aXN0cyBpbiB0aGUgc2FtZSBzd2l0Y2g/ICovCiAJcHVibGljIGJvb2xl
YW4gcmVwb3J0TWlzc2luZ0VudW1DYXNlRGVzcGl0ZURlZmF1bHQ7CisJCisJLyoqIFNob3VsZCB0
aGUgY29tcGlsZXIgdG9sZXJhdGUgaWxsZWdhbCBhbWJpZ3VvdXMgdmFyYXJncyBpbnZvY2F0aW9u
IGluIGNvbXBsaWFuY2UgPCAxLjcgCisJICogdG8gYmUgYnVnIGNvbXBhdGlibGUgd2l0aCBqYXZh
Yz8gKGJ1ZyAzODM3ODApICovCisJcHVibGljIGJvb2xlYW4gdG9sZXJhdGVJbGxlZ2FsQW1iaWd1
b3VzVmFyYXJnc0ludm9jYXRpb247CisJCisJeworCQlTdHJpbmcgdG9sZXJhdGVJbGxlZ2FsQW1i
aWd1b3VzVmFyYXJncyA9IFN5c3RlbS5nZXRQcm9wZXJ0eSgidG9sZXJhdGVJbGxlZ2FsQW1iaWd1
b3VzVmFyYXJnc0ludm9jYXRpb24iKTsgLy8kTk9OLU5MUy0xJAorCQlpZiAodG9sZXJhdGVJbGxl
Z2FsQW1iaWd1b3VzVmFyYXJncyAhPSBudWxsICYmIHRvbGVyYXRlSWxsZWdhbEFtYmlndW91c1Zh
cmFyZ3MuZXF1YWxzSWdub3JlQ2FzZSgidHJ1ZSIpKSB7IC8vJE5PTi1OTFMtMSQKKwkJCXRoaXMu
dG9sZXJhdGVJbGxlZ2FsQW1iaWd1b3VzVmFyYXJnc0ludm9jYXRpb24gPSB0cnVlOworCQl9IGVs
c2UgeworCQkJdGhpcy50b2xlcmF0ZUlsbGVnYWxBbWJpZ3VvdXNWYXJhcmdzSW52b2NhdGlvbiA9
IGZhbHNlOworCQl9CisJfQogCiAJLy8ga2VlcCBpbiBzeW5jIHdpdGggd2FybmluZ1Rva2VuVG9J
cnJpdGFudCBhbmQgd2FybmluZ1Rva2VuRnJvbUlycml0YW50CiAJcHVibGljIGZpbmFsIHN0YXRp
YyBTdHJpbmdbXSB3YXJuaW5nVG9rZW5zID0gewpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9T
Y29wZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhCmluZGV4IDI1ZmVlMDkuLmE2Yjhj
MDAgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YQorKysgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9v
a3VwL1Njb3BlLmphdmEKQEAgLTEsNSArMSw1IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgot
ICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgor
ICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEyIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgog
ICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5n
IG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUg
RWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRp
c3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdApAQCAtNTgyLDYgKzU4Miw5IEBACiAJCX0K
IAogCQlpbnQgY29tcGF0aWJpbGl0eUxldmVsOworCQlDb21waWxlck9wdGlvbnMgb3B0aW9ucyA9
IHRoaXMuY29tcGlsZXJPcHRpb25zKCk7CisJCWlmIChvcHRpb25zLmNvbXBsaWFuY2VMZXZlbCA8
IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzcgJiYgb3B0aW9ucy50b2xlcmF0ZUlsbGVnYWxBbWJp
Z3VvdXNWYXJhcmdzSW52b2NhdGlvbikKKwkJCXRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMgPSBm
YWxzZTsKIAkJaWYgKChjb21wYXRpYmlsaXR5TGV2ZWwgPSBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5
TGV2ZWwobWV0aG9kLCBhcmd1bWVudHMsIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMpKSA+IE5P
VF9DT01QQVRJQkxFKSB7CiAJCQlpZiAoY29tcGF0aWJpbGl0eUxldmVsID09IFZBUkFSR1NfQ09N
UEFUSUJMRSkgewogCQkJCVR5cGVCaW5kaW5nIHZhcmFyZ3NFbGVtZW50VHlwZSA9IG1ldGhvZC5w
YXJhbWV0ZXJzW21ldGhvZC5wYXJhbWV0ZXJzLmxlbmd0aCAtIDFdLmxlYWZDb21wb25lbnRUeXBl
KCk7CkBAIC0zMDI5LDggKzMwMzIsMTQgQEAKIAkJCQkJaWYgKGkgPT0gb25lUGFyYW1zTGVuZ3Ro
IC0gMSAmJiBvbmUuaXNWYXJhcmdzKCkgJiYgdHdvLmlzVmFyYXJncygpKSB7CiAJCQkJCQlUeXBl
QmluZGluZyBvVHlwZSA9ICgoQXJyYXlCaW5kaW5nKSBvbmVQYXJhbSkuZWxlbWVudHNUeXBlKCk7
CiAJCQkJCQlUeXBlQmluZGluZyBlVHlwZSA9ICgoQXJyYXlCaW5kaW5nKSB0d29QYXJhbSkuZWxl
bWVudHNUeXBlKCk7Ci0JCQkJCQlpZiAob1R5cGUgPT0gZVR5cGUgfHwgb1R5cGUuaXNDb21wYXRp
YmxlV2l0aChlVHlwZSkpCi0JCQkJCQkJcmV0dXJuIHRydWU7IC8vIHNwZWNpYWwgY2FzZSB0byBj
aG9vc2UgYmV0d2VlbiAyIHZhcmFyZ3MgbWV0aG9kcyB3aGVuIHRoZSBsYXN0IGFyZyBpcyBPYmpl
Y3RbXQorCQkJCQkJQ29tcGlsZXJPcHRpb25zIG9wdGlvbnMgPSB0aGlzLmNvbXBpbGVyT3B0aW9u
cygpOworCQkJCQkJaWYgKG9wdGlvbnMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3Rh
bnRzLkpESzFfNyAmJiBvcHRpb25zLnRvbGVyYXRlSWxsZWdhbEFtYmlndW91c1ZhcmFyZ3NJbnZv
Y2F0aW9uKSB7CisJCQkJCQkJaWYgKG9uZVBhcmFtID09IGVUeXBlIHx8IG9uZVBhcmFtLmlzQ29t
cGF0aWJsZVdpdGgoZVR5cGUpKQorCQkJCQkJCQlyZXR1cm4gdHJ1ZTsgLy8gc3BlY2lhbCBjYXNl
IHRvIGNob29zZSBiZXR3ZWVuIDIgdmFyYXJncyBtZXRob2RzIHdoZW4gdGhlIGxhc3QgYXJnIGlz
IE9iamVjdFtdCisJCQkJCQl9IGVsc2UgeworCQkJCQkJCWlmIChvVHlwZSA9PSBlVHlwZSB8fCBv
VHlwZS5pc0NvbXBhdGlibGVXaXRoKGVUeXBlKSkKKwkJCQkJCQkJcmV0dXJuIHRydWU7IC8vIHNw
ZWNpYWwgY2FzZSB0byBjaG9vc2UgYmV0d2VlbiAyIHZhcmFyZ3MgbWV0aG9kcyB3aGVuIHRoZSBs
YXN0IGFyZyBpcyBPYmplY3RbXQorCQkJCQkJfQogCQkJCQl9CiAJCQkJCXJldHVybiBmYWxzZTsK
IAkJCQl9CkBAIC00MDkyLDcgKzQxMDEsOCBAQAogCQkvLyBvbmx5IGNhbGxlZCBpZiBlbnYub3B0
aW9ucy5zb3VyY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV81CiAJCWlmIChhcmcu
aXNDb21wYXRpYmxlV2l0aChwYXJhbSkpCiAJCQlyZXR1cm4gQ09NUEFUSUJMRTsKLQkJaWYgKHRp
ZUJyZWFraW5nVmFyYXJnc01ldGhvZHMpIHsKKwkJQ29tcGlsZXJPcHRpb25zIG9wdGlvbnMgPSB0
aGlzLmNvbXBpbGVyT3B0aW9ucygpOworCQlpZiAodGllQnJlYWtpbmdWYXJhcmdzTWV0aG9kcyAm
JiAob3B0aW9ucy5jb21wbGlhbmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNyB8
fCAhb3B0aW9ucy50b2xlcmF0ZUlsbGVnYWxBbWJpZ3VvdXNWYXJhcmdzSW52b2NhdGlvbikpIHsK
IAkJCS8qIDE1LjEyLjIuNSBDaG9vc2luZyB0aGUgTW9zdCBTcGVjaWZpYyBNZXRob2QsIC4uLiBP
bmUgdmFyaWFibGUgYXJpdHkgbWVtYmVyIG1ldGhvZCBuYW1lZCBtIGlzIG1vcmUgc3BlY2lmaWMg
dGhhbgogCQkJICAgYW5vdGhlciB2YXJpYWJsZSBhcml0eSBtZW1iZXIgbWV0aG9kIG9mIHRoZSBz
YW1lIG5hbWUgaWYgZWl0aGVyIC4uLiBPbmx5IHN1YnR5cGVzIHJlbGF0aW9uc2hpcCBzaG91bGQg
YmUgdXNlZC4KIAkJCSAgIEFjdHVhbGx5IHRoaXMgaXMgdHJ1ZSBldmVuIGZvciBmaXhlZCBhcml0
eSBtZXRob2RzLCBidXQgaW4gcHJhY3RpY2UgaXMgbm90IGFuIGlzc3VlIHNpbmNlIHdlIHJ1biB0
aGUgYWxnb3JpdGht
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>218320</attachid>
            <date>2012-07-05 04:17:00 -0400</date>
            <delta_ts>2012-07-05 04:17:16 -0400</delta_ts>
            <desc>patch for migration FAQ</desc>
            <filename>Fixed-bug-383780-compiler-Eclipse-42-creates-ambiguo-doc.patch</filename>
            <type>text/plain</type>
            <size>2493</size>
            <attacher name="Ayushman Jain">amj87.iitr</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL2J1bmRsZXMvb3JnLmVjbGlwc2UuamR0LmRvYy5pc3YvcG9ydGluZy8zLjgv
ZmFxLmh0bWwgYi9idW5kbGVzL29yZy5lY2xpcHNlLmpkdC5kb2MuaXN2L3BvcnRpbmcvMy44L2Zh
cS5odG1sCmluZGV4IDUzNTVkODguLjg4ODE0OTIgMTAwNjQ0Ci0tLSBhL2J1bmRsZXMvb3JnLmVj
bGlwc2UuamR0LmRvYy5pc3YvcG9ydGluZy8zLjgvZmFxLmh0bWwKKysrIGIvYnVuZGxlcy9vcmcu
ZWNsaXBzZS5qZHQuZG9jLmlzdi9wb3J0aW5nLzMuOC9mYXEuaHRtbApAQCAtMTMsMTAgKzEzLDUy
IEBACiA8aDE+RWNsaXBzZSAzLjggUGx1Zy1pbiBNaWdyYXRpb24gRkFRPC9oMT4KIAogPG9sPgot
CTxsaT5Ob25lPC9saT4KLTwhLS0KLQk8bGk+PGEgaHJlZj0iI2FuY2hvcjEiPldoeSAuLi4gPzwv
YT48L2xpPgotLS0+CisJPGxpPjxhIGhyZWY9IiNpbGxlZ2FsQW1iaWd1b3VzVmFyYXJncyI+V2h5
IGRvZXMgbXkgdmFyYXJncyBjb2RlIHdoaWNoIHdhcyBsZWdhbCBpbiAzLjcgYW5kIGVhcmxpZXIg
bm8gbG9uZ2VyIGNvbXBpbGUgd2l0aCAzLjggKEp1bm8pPzwvYT48L2xpPgorPC9vbD4KKzxoMj48
YSBuYW1lPSJpbGxlZ2FsQW1iaWd1b3VzVmFyYXJncyI+V2h5IGRvZXMgbXkgdmFyYXJncyBjb2Rl
IHdoaWNoIHdhcyBsZWdhbCBpbiAzLjcgYW5kIGVhcmxpZXIgbm8gbG9uZ2VyIGNvbXBpbGUgd2l0
aCAzLjggKEp1bm8pPzwvYT48L2gyPgorPHA+CitKREsgNiBhbmQgYmVsb3cgaGFkIGEgYnVnIGJl
Y2F1c2Ugb2Ygd2hpY2ggdGhlIGZvbGxvd2luZyBjb2RlIHdhcyBjb25zaWRlcmVkIGxlZ2FsOjwv
cD4KKzxwcmU+CitwdWJsaWMgY2xhc3MgVmFyYXJnUHJpbWl0aXZlVGVzdCB7CisgICAgcHVibGlj
IHN0YXRpYyB2b2lkIHRlc3QoaW50Li4uIGEpIHsKKyAgICAgICAgU3lzdGVtLm91dC5wcmludGxu
KEFycmF5cy50b1N0cmluZyhhKSk7CisgICAgfQorCisgICAgcHVibGljIHN0YXRpYyA8VD4gdm9p
ZCB0ZXN0KE9iamVjdC4uLiBhKSB7CisgICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihBcnJheXMu
dG9TdHJpbmcoYSkpOworICAgIH0KKworICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmlu
Z1tdIGFyZ3MpIHsKKyAgICAgICAgdGVzdCgxKTsKKyAgICB9Cit9Cis8L3ByZT4KKzxwPkhvd2V2
ZXIsIHRoaXMgYnVnIHdhcyBmaXhlZCBpbiBKREsgNyBhbmQgdGhlIGFib3ZlIGNvZGUgbm93IHJl
cG9ydHMgYW4gYW1iaWd1b3VzIGludm9jYXRpb24gZXJyb3IgYXQgdGhlIGNhbGwgc2l0ZSBmb3Ig
dGVzdCguLikuCitUaGlzIHdhcyB0aGVyZWJ5IGZpeGVkIGZvciBFY2xpcHNlIEp1bm8gdmlhIGJ1
ZyA8YSBocmVmPSJodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9
MzQ2MDM4Ij4zNDYwMzg8L2E+IGFjcm9zcyBhbGwKK2NvbXBsaWFuY2UgbGV2ZWxzLiBUaGlzIGlz
IHdoeSB0aGUgYWJvdmUgY29kZSB3aWxsIG5vIGxvbmdlciBjb21waWxlIHdpdGggSnVuby48L3A+
CisKKzxwPklmIHlvdSBzdGlsbCB3YW50IHRoZSBhYm92ZSBjb2RlIHRvIGNvbXBpbGUgaW4gY29t
cGxpYW5jZSA8IDEuNywgdG8gbWltaWMgSkRLIDYgb3IgYmVsb3csIHlvdSBjYW4gdXNlIHRoZQor
c3lzdGVtIHByb3BlcnR5IDxiPnRvbGVyYXRlSWxsZWdhbEFtYmlndW91c1ZhcmFyZ3NJbnZvY2F0
aW9uPC9iPiB0byBmb3JjZSBFY2xpcHNlIHRvIHRvbGVyYXRlIHRoZSBhbWJpZ3VvdXMgdmFyYXJn
cyBjYXNlcworc3VjaCBhcyBhYm92ZS4gVGhpcyBwcm9wZXJ0eSBjYW4gYmUgc2V0IGluIHRoZSBl
Y2xpcHNlLmluaSBmaWxlIGFmdGVyIHRoZSAtdm1hcmdzIHNldHRpbmcgYXMgc2hvd24gYmVsb3c6
PC9wPgorPHByZT4KKy4uLgorLXZtYXJncworLUR0b2xlcmF0ZUlsbGVnYWxBbWJpZ3VvdXNWYXJh
cmdzSW52b2NhdGlvbj10cnVlCisuLi4KKzwvcHJlPgorPHA+Tm90ZSB0aGF0IHdpdGggdGhpcyBz
ZXR0aW5nLCBFY2xpcHNlIEp1bm8gZG9lcyBub3Qgb25seSBtaW1pYyBKREsgNiBhbmQgYmVsb3cg
aW4gbGV0dGluZyB0aGUgYWJvdmUgY29kZSBjb21waWxlLCBidXQgYWxzbworbWltaWNzIEpESyA2
IGFuZCBiZWxvdyBpbiByYWlzaW5nIGFuIGVycm9yIGluIGNhc2VzIHN1Y2ggYXMgYmVsb3csIGV2
ZW4gdGhvdWdoIHRoZXkncmUgbGVnYWwgaW4gYm90aCBKREsgNyBhbmQgaW4gRWNsaXBzZSBKdW5v
IHdoZW4KK3RoZSB0b2xlcmF0ZUlsbGVnYWxBbWJpZ3VvdXNWYXJhcmdzSW52b2NhdGlvbiBpcyBk
aXNhYmxlZDo8L3A+Cis8cHJlPgorY2xhc3MgVGVzdCB7CisgICAgICAgIHB1YmxpYyBzdGF0aWMg
dm9pZCBmb28oaW50IC4uLmkpIHt9CisgICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBmb28oZG91
YmxlLi4uZCkge30KKworICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBh
cmdzKSB7CisgICAgICAgICAgICBmb28oMSwgMiwgMyk7ICAgICAvLyBmb28gZmxhZ2dlZCBhbWJp
Z3VvdXMKKyAgICAgICAgfQorfQorPC9wcmU+CiA8L29sPgogCiA8IS0t
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>218798</attachid>
            <date>2012-07-17 07:58:00 -0400</date>
            <delta_ts>2012-08-01 04:25:40 -0400</delta_ts>
            <desc>proposed fix v2.2 + regression tests</desc>
            <filename>master--fixed-Bug-383780--compiler-Eclipse-42-create.patch</filename>
            <type>text/plain</type>
            <size>21274</size>
            <attacher name="Ayushman Jain">amj87.iitr</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1ZhcmFyZ3NUZXN0Lmph
dmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2Uv
amR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9WYXJhcmdzVGVzdC5qYXZhCmluZGV4
IDUzNjcyM2IuLmE2NmJlNzcgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3Rz
LmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNz
aW9uL1ZhcmFyZ3NUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29t
cGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24v
VmFyYXJnc1Rlc3QuamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
Ci0gKiBDb3B5cmlnaHQgKGMpIDIwMDUsIDIwMTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMu
CisgKiBDb3B5cmlnaHQgKGMpIDIwMDUsIDIwMTIgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMu
CiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlp
bmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRo
ZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMg
ZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC0zMyw3ICszMyw3IEBACiAJLy8g
U3RhdGljIGluaXRpYWxpemVyIHRvIHNwZWNpZnkgdGVzdHMgc3Vic2V0IHVzaW5nIFRFU1RTXyog
c3RhdGljIHZhcmlhYmxlcwogCS8vIEFsbCBzcGVjaWZpZWQgdGVzdHMgd2hpY2ggZG9lcyBub3Qg
YmVsb25nIHRvIHRoZSBjbGFzcyBhcmUgc2tpcHBlZC4uLgogCXN0YXRpYyB7Ci0vLwkJVEVTVFNf
TkFNRVMgPSBuZXcgU3RyaW5nW10geyAidGVzdDAwMCIgfTsKKy8vCQlURVNUU19OQU1FUyA9IG5l
dyBTdHJpbmdbXSB7ICJ0ZXN0MDcwYiIgfTsKIC8vCQlURVNUU19OVU1CRVJTID0gbmV3IGludFtd
IHsgNjEgfTsKIC8vCQlURVNUU19SQU5HRSA9IG5ldyBpbnRbXSB7IDExLCAtMSB9OwogCX0KQEAg
LTc5OCw2ICs3OTgsNTUgQEAKIAkJCSItLS0tLS0tLS0tXG4iCiAJCSk7CiAJfQorCQorCS8vIGh0
dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zODM3ODAKKwlwdWJs
aWMgdm9pZCB0ZXN0MDE1X3RvbGVyYXRlKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCWlmICh0aGlz
LmNvbXBsaWFuY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzUpIHJldHVybjsKKwkJ
TWFwIG9wdGlvbnMgPSBnZXRDb21waWxlck9wdGlvbnMoKTsKKwkJdHJ5IHsKKwkJCVN5c3RlbS5z
ZXRQcm9wZXJ0eSgidG9sZXJhdGVJbGxlZ2FsQW1iaWd1b3VzVmFyYXJnc0ludm9jYXRpb24iLCAi
dHJ1ZSIpOworCQkJaWYgKHRoaXMuY29tcGxpYW5jZUxldmVsID49IENsYXNzRmlsZUNvbnN0YW50
cy5KREsxXzcpIHsKKwkJCXRoaXMucnVuTmVnYXRpdmVUZXN0KAorCQkJCQluZXcgU3RyaW5nW10g
eworCQkJCQkJCSJYLmphdmEiLAorCQkJCQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCQkJ
CQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIHMpIHtcbiIgKworCQkJCQkJCSIJ
CVkuY291bnQobmV3IGludFswXSk7XG4iICsgLy8gZm9yIHNvbWUgcmVhc29uIHRoaXMgaXMgbm90
IGFtYmlndW91cworCQkJCQkJCSIJfVxuIiArCisJCQkJCQkJIn1cbiIgKworCQkJCQkJCSJjbGFz
cyBZIHtcbiIgKworCQkJCQkJCSIJcHVibGljIHN0YXRpYyB2b2lkIGNvdW50KGludFtdIGFycmF5
LCBpbnQgLi4uIHZhbHVlcykgeyBTeXN0ZW0ub3V0LnByaW50KDEpOyB9XG4iICsKKwkJCQkJCQki
CXB1YmxpYyBzdGF0aWMgdm9pZCBjb3VudChpbnRbXSBhcnJheSwgaW50W10gLi4uIHZhbHVlcykg
eyBTeXN0ZW0ub3V0LnByaW50KDIpOyB9XG4iICsKKwkJCQkJCQkifVxuIiwKKwkJCQl9LAorCQkJ
CSItLS0tLS0tLS0tXG4iICsgCisJCQkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAzKVxu
IiArIAorCQkJCSIJWS5jb3VudChuZXcgaW50WzBdKTtcbiIgKyAKKwkJCQkiCSAgXl5eXl5cbiIg
KyAKKwkJCQkiVGhlIG1ldGhvZCBjb3VudChpbnRbXSwgaW50W10pIGlzIGFtYmlndW91cyBmb3Ig
dGhlIHR5cGUgWVxuIiArIAorCQkJCSItLS0tLS0tLS0tXG4iLAorCQkJCW51bGwsIHRydWUsIG9w
dGlvbnMpOworCQkJfSBlbHNlIHsKKwkJCQl0aGlzLnJ1bkNvbmZvcm1UZXN0KAorCQkJCQluZXcg
U3RyaW5nW10geworCQkJCQkJCSJYLmphdmEiLAorCQkJCQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4i
ICsKKwkJCQkJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIHMpIHtcbiIgKwor
CQkJCQkJCSIJCVkuY291bnQobmV3IGludFswXSk7XG4iICsgLy8gZm9yIHNvbWUgcmVhc29uIHRo
aXMgaXMgbm90IGFtYmlndW91cworCQkJCQkJCSIJfVxuIiArCisJCQkJCQkJIn1cbiIgKworCQkJ
CQkJCSJjbGFzcyBZIHtcbiIgKworCQkJCQkJCSIJcHVibGljIHN0YXRpYyB2b2lkIGNvdW50KGlu
dFtdIGFycmF5LCBpbnQgLi4uIHZhbHVlcykgeyBTeXN0ZW0ub3V0LnByaW50KDEpOyB9XG4iICsK
KwkJCQkJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBjb3VudChpbnRbXSBhcnJheSwgaW50W10gLi4u
IHZhbHVlcykgeyBTeXN0ZW0ub3V0LnByaW50KDIpOyB9XG4iICsKKwkJCQkJCQkifVxuIiwKKwkJ
CQl9LAorCQkJCSIxIiwgCisJCQkJbnVsbCwgdHJ1ZSwgbnVsbCwgb3B0aW9ucywgbnVsbCk7CisJ
CQl9CisJCX0gZmluYWxseSB7CisJCQlTeXN0ZW0uc2V0UHJvcGVydHkoInRvbGVyYXRlSWxsZWdh
bEFtYmlndW91c1ZhcmFyZ3NJbnZvY2F0aW9uIiwgImZhbHNlIik7CisJCX0KKwl9CiAKIAlwdWJs
aWMgdm9pZCB0ZXN0MDE2KCkgeyAvLyBjaGVjayBiZWhhdmlvdXIgb2YgU2NvcGUubW9zdFNwZWNp
ZmljTWV0aG9kQmluZGluZygpCiAJCXRoaXMucnVuTmVnYXRpdmVUZXN0KCAvLyBidXQgdGhpcyBj
YWxsIGlzIGFtYmlndW91cwpAQCAtMTIzNSw3ICsxMjg0LDcgQEAKIAkJCX0sCiAJCQkiMSIpOwog
CX0KLQkvL2h0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0xMDI2
MzEKKyAJLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTEw
MjYzMQogCXB1YmxpYyB2b2lkIHRlc3QwMzMoKSB7CiAJCXRoaXMucnVuTmVnYXRpdmVUZXN0KAog
CQkJbmV3IFN0cmluZ1tdIHsKQEAgLTEzMDEsNiArMTM1MCw2MSBAQAogCQkJIlRoZSBtZXRob2Qg
Yyhib29sZWFuLCBib29sZWFuLCBPYmplY3RbXSkgaXMgYW1iaWd1b3VzIGZvciB0aGUgdHlwZSBY
XG4iICsKIAkJCSItLS0tLS0tLS0tXG4iCiAJCSk7CisJfQorCS8vIGh0dHBzOi8vYnVncy5lY2xp
cHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zODM3ODAKKwlwdWJsaWMgdm9pZCB0ZXN0MDMz
X3RvbGVyYXRlKCkgeworCQlpZiAodGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25z
dGFudHMuSkRLMV81KSByZXR1cm47CisJCU1hcCBvcHRpb25zID0gZ2V0Q29tcGlsZXJPcHRpb25z
KCk7CisJCXRyeSB7CisJCQlTeXN0ZW0uc2V0UHJvcGVydHkoInRvbGVyYXRlSWxsZWdhbEFtYmln
dW91c1ZhcmFyZ3NJbnZvY2F0aW9uIiwgInRydWUiKTsKKwkJCWlmICh0aGlzLmNvbXBsaWFuY2VM
ZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV83KSB7CisJCQkJdGhpcy5ydW5OZWdhdGl2
ZVRlc3QoCisJCQkJCW5ldyBTdHJpbmdbXSB7CisJCQkJCQkiWC5qYXZhIiwKKwkJCQkJCSJwdWJs
aWMgY2xhc3MgWCB7XG4iICsKKwkJCQkJCSIJdm9pZCBhKGJvb2xlYW4gYiwgT2JqZWN0Li4uIG8p
IHtTeXN0ZW0ub3V0LnByaW50KDEpO31cbiIgKworCQkJCQkJIgl2b2lkIGEoT2JqZWN0Li4uIG8p
IHtTeXN0ZW0ub3V0LnByaW50KDIpO31cbiIgKworCQkJCQkJIglwdWJsaWMgc3RhdGljIHZvaWQg
bWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsKKwkJCQkJCSIJCVggeCA9IG5ldyBYKCk7XG4iICsK
KwkJCQkJCSIJCXguYSh0cnVlKTtcbiIgKworCQkJCQkJIgkJeC5hKHRydWUsIFwiZm9vYmFyXCIp
O1xuIiArCisJCQkJCQkiCQl4LmEoXCJmb29cIiwgXCJiYXJcIik7XG4iICsKKwkJCQkJCSIJfVxu
IiArCisJCQkJCQkifVxuIiwKKwkJCQkJfSwKKwkJCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCQkJ
IjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA2KVxuIiArIAorCQkJCQkiCXguYSh0cnVlKTtc
biIgKyAKKwkJCQkJIgkgIF5cbiIgKyAKKwkJCQkJIlRoZSBtZXRob2QgYShib29sZWFuLCBPYmpl
Y3RbXSkgaXMgYW1iaWd1b3VzIGZvciB0aGUgdHlwZSBYXG4iICsgCisJCQkJCSItLS0tLS0tLS0t
XG4iICsgCisJCQkJCSIyLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNylcbiIgKyAKKwkJCQkJ
Igl4LmEodHJ1ZSwgXCJmb29iYXJcIik7XG4iICsgCisJCQkJCSIJICBeXG4iICsgCisJCQkJCSJU
aGUgbWV0aG9kIGEoYm9vbGVhbiwgT2JqZWN0W10pIGlzIGFtYmlndW91cyBmb3IgdGhlIHR5cGUg
WFxuIiArIAorCQkJCQkiLS0tLS0tLS0tLVxuIiwKKwkJCQkJbnVsbCwgdHJ1ZSwgb3B0aW9ucyk7
CisJCQl9IGVsc2UgeworCQkJCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCQkJCQluZXcgU3RyaW5n
W10geworCQkJCQkJCSJYLmphdmEiLAorCQkJCQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJ
CQkJCQkiCXZvaWQgYShib29sZWFuIGIsIE9iamVjdC4uLiBvKSB7U3lzdGVtLm91dC5wcmludCgx
KTt9XG4iICsKKwkJCQkJCQkiCXZvaWQgYShPYmplY3QuLi4gbykge1N5c3RlbS5vdXQucHJpbnQo
Mik7fVxuIiArCisJCQkJCQkJIglwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdz
KSB7XG4iICsKKwkJCQkJCQkiCQlYIHggPSBuZXcgWCgpO1xuIiArCisJCQkJCQkJIgkJeC5hKHRy
dWUpO1xuIiArCisJCQkJCQkJIgkJeC5hKHRydWUsIFwiZm9vYmFyXCIpO1xuIiArCisJCQkJCQkJ
IgkJeC5hKFwiZm9vXCIsIFwiYmFyXCIpO1xuIiArCisJCQkJCQkJIgl9XG4iICsKKwkJCQkJCQki
fVxuIiwKKwkJCQkJCX0sCisJCQkJCQkiMTEyIiwKKwkJCQkJCW51bGwsIHRydWUsIG51bGwsIG9w
dGlvbnMsIG51bGwpOworCQkJfQorCQl9IGZpbmFsbHkgeworCQkJU3lzdGVtLnNldFByb3BlcnR5
KCJ0b2xlcmF0ZUlsbGVnYWxBbWJpZ3VvdXNWYXJhcmdzSW52b2NhdGlvbiIsICJmYWxzZSIpOwor
CQl9CiAJfQogCS8vaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lk
PTEwNjEwNgogCXB1YmxpYyB2b2lkIHRlc3QwMzQoKSB7CkBAIC0yODE4LDYgKzI5MjIsMTA2IEBA
CiAJCQl9LAogCQkJIkRvbmUiKTsKIAl9CisJCisJLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3Jn
L2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM4Mzc4MAorCXB1YmxpYyB2b2lkIHRlc3QwNzBfdG9sZXJh
dGUoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJaWYgKHRoaXMuY29tcGxpYW5jZUxldmVsIDwgQ2xh
c3NGaWxlQ29uc3RhbnRzLkpESzFfNSkgcmV0dXJuOworCQlNYXAgb3B0aW9ucyA9IGdldENvbXBp
bGVyT3B0aW9ucygpOworCQl0cnkgeworCQkJU3lzdGVtLnNldFByb3BlcnR5KCJ0b2xlcmF0ZUls
bGVnYWxBbWJpZ3VvdXNWYXJhcmdzSW52b2NhdGlvbiIsICJ0cnVlIik7CisJCQlpZiAodGhpcy5j
b21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV83KSB7CisJCQkJdGhpcy5y
dW5OZWdhdGl2ZVRlc3QoCisJCQkJCW5ldyBTdHJpbmdbXSB7CisJCQkJCQkiWC5qYXZhIiwKKwkJ
CQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCQkJCSIgICAgICAgIHB1YmxpYyBzdGF0aWMg
dm9pZCBmb28oaW50IC4uLmkpIHt9XG4iICsKKwkJCQkJCSIgICAgICAgIHB1YmxpYyBzdGF0aWMg
dm9pZCBmb28oZG91YmxlLi4uZCkge31cbiIgKworCQkJCQkJIiAgICAgICAgcHVibGljIHN0YXRp
YyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuIiArCisJCQkJCQkiICAgICAgICAgICAgZm9v
KDEsIDIsIDMpO1xuIiArCisJCQkJCQkiICAgICAgICAgICAgU3lzdGVtLm91dC5wcmludGxuIChc
IkRvbmVcIik7XG4iICsKKwkJCQkJCSIgICAgICAgIH1cbiIgKworCQkJCQkJIn1cbiIKKwkJCQkJ
fSwKKwkJCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCQkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQg
bGluZSA1KVxuIiArIAorCQkJCQkiCWZvbygxLCAyLCAzKTtcbiIgKyAKKwkJCQkJIgleXl5cbiIg
KyAKKwkJCQkJIlRoZSBtZXRob2QgZm9vKGludFtdKSBpcyBhbWJpZ3VvdXMgZm9yIHRoZSB0eXBl
IFhcbiIgKyAKKwkJCQkJIi0tLS0tLS0tLS1cbiIsIAorCQkJCQludWxsLCB0cnVlLCBvcHRpb25z
KTsKKwkJCX0gZWxzZSB7CisJCQkJdGhpcy5ydW5Db25mb3JtVGVzdCgKKwkJCQkJCW5ldyBTdHJp
bmdbXSB7CisJCQkJCQkJIlguamF2YSIsCisJCQkJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKwor
CQkJCQkJCSIgICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBmb28oaW50IC4uLmkpIHt9XG4iICsK
KwkJCQkJCQkiICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgZm9vKGRvdWJsZS4uLmQpIHt9XG4i
ICsKKwkJCQkJCQkiICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdz
KSB7XG4iICsKKwkJCQkJCQkiICAgICAgICAgICAgZm9vKDEsIDIsIDMpO1xuIiArCisJCQkJCQkJ
IiAgICAgICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbiAoXCJEb25lXCIpO1xuIiArCisJCQkJCQkJ
IiAgICAgICAgfVxuIiArCisJCQkJCQkJIn1cbiIKKwkJCQkJCX0sCisJCQkJCQkiRG9uZSIsIAor
CQkJCQkJbnVsbCwgdHJ1ZSwgbnVsbCwgb3B0aW9ucywgbnVsbCk7CisJCQl9CisJCX0gZmluYWxs
eSB7CisJCQlTeXN0ZW0uc2V0UHJvcGVydHkoInRvbGVyYXRlSWxsZWdhbEFtYmlndW91c1ZhcmFy
Z3NJbnZvY2F0aW9uIiwgImZhbHNlIik7CisJCX0KKwkJCisJfQorCQorCS8vIGh0dHBzOi8vYnVn
cy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zODM3ODAKKwlwdWJsaWMgdm9pZCB0
ZXN0MDcwX3RvbGVyYXRlMigpIHRocm93cyBFeGNlcHRpb24geworCQlpZiAodGhpcy5jb21wbGlh
bmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV81KSByZXR1cm47CisJCU1hcCBvcHRp
b25zID0gZ2V0Q29tcGlsZXJPcHRpb25zKCk7CisJCXRyeSB7CisJCQlTeXN0ZW0uc2V0UHJvcGVy
dHkoInRvbGVyYXRlSWxsZWdhbEFtYmlndW91c1ZhcmFyZ3NJbnZvY2F0aW9uIiwgInRydWUiKTsK
KwkJCWlmICh0aGlzLmNvbXBsaWFuY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV83
KSB7CisJCQkJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCQkJCW5ldyBTdHJpbmdbXSB7CisJCQkJ
CQkiWC5qYXZhIiwKKwkJCQkJCSJpbXBvcnQgamF2YS51dGlsLkFycmF5cztcbiIgKworCQkJCQkJ
InB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJCQkJIiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lk
IHRlc3QoaW50Li4uIGEpIHtcbiIgKworCQkJCQkJIgkJCVN5c3RlbS5vdXQucHJpbnRsbihBcnJh
eXMudG9TdHJpbmcoYSkpO1xufVxuIiArCisJCQkJCQkiICAgICAgICBwdWJsaWMgc3RhdGljIDxU
PiB2b2lkIHRlc3QoT2JqZWN0Li4uIGEpIHtcbiIgKworCQkJCQkJIgkJCVN5c3RlbS5vdXQucHJp
bnRsbihBcnJheXMudG9TdHJpbmcoYSkpO1xufVxuIiArCisJCQkJCQkiICAgICAgICBwdWJsaWMg
c3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsKKwkJCQkJCSIgICAgICAgICAg
ICB0ZXN0KDEpO1xuIiArCisJCQkJCQkiICAgICAgICB9XG4iICsKKwkJCQkJCSJ9XG4iCisJCQkJ
CX0sCisJCQkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0
IGxpbmUgMTApXG4iICsgCisJCQkJCSIJdGVzdCgxKTtcbiIgKyAKKwkJCQkJIgleXl5eXG4iICsg
CisJCQkJCSJUaGUgbWV0aG9kIHRlc3QoaW50W10pIGlzIGFtYmlndW91cyBmb3IgdGhlIHR5cGUg
WFxuIiArIAorCQkJCQkiLS0tLS0tLS0tLVxuIiwgCisJCQkJCW51bGwsIHRydWUsIG9wdGlvbnMp
OworCQkJfSBlbHNlIHsKKwkJCQl0aGlzLnJ1bkNvbmZvcm1UZXN0KAorCQkJCQkJbmV3IFN0cmlu
Z1tdIHsKKwkJCQkJCQkJIlguamF2YSIsCisJCQkJCQkJCSJpbXBvcnQgamF2YS51dGlsLkFycmF5
cztcbiIgKworCQkJCQkJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkJCQkJCSIgICAgICAg
IHB1YmxpYyBzdGF0aWMgdm9pZCB0ZXN0KGludC4uLiBhKSB7XG4iICsKKwkJCQkJCQkJIgkJCVN5
c3RlbS5vdXQucHJpbnRsbihBcnJheXMudG9TdHJpbmcoYSkpO1xufVxuIiArCisJCQkJCQkJCSIg
ICAgICAgIHB1YmxpYyBzdGF0aWMgPFQ+IHZvaWQgdGVzdChPYmplY3QuLi4gYSkge1xuIiArCisJ
CQkJCQkJCSIJCQlTeXN0ZW0ub3V0LnByaW50bG4oQXJyYXlzLnRvU3RyaW5nKGEpKTtcbn1cbiIg
KworCQkJCQkJCQkiICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdz
KSB7XG4iICsKKwkJCQkJCQkJIiAgICAgICAgICAgIHRlc3QoMSk7XG4iICsKKwkJCQkJCQkJIiAg
ICAgICAgfVxuIiArCisJCQkJCQkJCSJ9XG4iCisJCQkJCQl9LAorCQkJCQkJIlsxXSIsIAorCQkJ
CQkJbnVsbCwgdHJ1ZSwgbnVsbCwgb3B0aW9ucywgbnVsbCk7CisJCQl9CisJCX0gZmluYWxseSB7
CisJCQlTeXN0ZW0uc2V0UHJvcGVydHkoInRvbGVyYXRlSWxsZWdhbEFtYmlndW91c1ZhcmFyZ3NJ
bnZvY2F0aW9uIiwgImZhbHNlIik7CisJCX0KKwkJCisJfQogCS8vIGh0dHBzOi8vYnVncy5lY2xp
cHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNDYwMzgKIAlwdWJsaWMgdm9pZCB0ZXN0MDcw
YSgpIHRocm93cyBFeGNlcHRpb24gewogCQlpZiAodGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFz
c0ZpbGVDb25zdGFudHMuSkRLMV81KSByZXR1cm47CkBAIC0yODM1LDYgKzMwMzksNTIgQEAKIAkJ
CX0sCiAJCQkiRG9uZSIpOwogCX0KKwkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9z
aG93X2J1Zy5jZ2k/aWQ9MzgzNzgwCisJcHVibGljIHZvaWQgdGVzdDA3MGFfdG9sZXJhdGUoKSB0
aHJvd3MgRXhjZXB0aW9uIHsKKwkJaWYgKHRoaXMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxl
Q29uc3RhbnRzLkpESzFfNSkgcmV0dXJuOworCQlNYXAgb3B0aW9ucyA9IGdldENvbXBpbGVyT3B0
aW9ucygpOworCQl0cnkgeworCQkJU3lzdGVtLnNldFByb3BlcnR5KCJ0b2xlcmF0ZUlsbGVnYWxB
bWJpZ3VvdXNWYXJhcmdzSW52b2NhdGlvbiIsICJ0cnVlIik7CisJCQlpZiAodGhpcy5jb21wbGlh
bmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV83KSB7CisJCQkJdGhpcy5ydW5OZWdh
dGl2ZVRlc3QoCisJCQkJCW5ldyBTdHJpbmdbXSB7CisJCQkJCQkiWC5qYXZhIiwKKwkJCQkJCSJw
dWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCQkJCSIgICAgICAgIHB1YmxpYyBzdGF0aWMgPFQ+IHZv
aWQgZm9vKGludCAuLi5pKSB7fVxuIiArCisJCQkJCQkiICAgICAgICBwdWJsaWMgc3RhdGljIDxU
PiB2b2lkIGZvbyhkb3VibGUuLi5kKSB7fVxuIiArCisJCQkJCQkiICAgICAgICBwdWJsaWMgc3Rh
dGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsKKwkJCQkJCSIgICAgICAgICAgICBm
b28oMSwgMiwgMyk7XG4iICsKKwkJCQkJCSIgICAgICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4g
KFwiRG9uZVwiKTtcbiIgKworCQkJCQkJIiAgICAgICAgfVxuIiArCisJCQkJCQkifVxuIgorCQkJ
CQl9LAorCQkJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJCQkiMS4gRVJST1IgaW4gWC5qYXZhIChh
dCBsaW5lIDUpXG4iICsgCisJCQkJCSIJZm9vKDEsIDIsIDMpO1xuIiArIAorCQkJCQkiCV5eXlxu
IiArIAorCQkJCQkiVGhlIG1ldGhvZCBmb28oaW50W10pIGlzIGFtYmlndW91cyBmb3IgdGhlIHR5
cGUgWFxuIiArIAorCQkJCQkiLS0tLS0tLS0tLVxuIiwgCisJCQkJCW51bGwsIHRydWUsIG9wdGlv
bnMpOworCQkJfSBlbHNlIHsKKwkJCQl0aGlzLnJ1bkNvbmZvcm1UZXN0KAorCQkJCQkJbmV3IFN0
cmluZ1tdIHsKKwkJCQkJCQkiWC5qYXZhIiwKKwkJCQkJCQkicHVibGljIGNsYXNzIFgge1xuIiAr
CisJCQkJCQkJIiAgICAgICAgcHVibGljIHN0YXRpYyA8VD4gdm9pZCBmb28oaW50IC4uLmkpIHt9
XG4iICsKKwkJCQkJCQkiICAgICAgICBwdWJsaWMgc3RhdGljIDxUPiB2b2lkIGZvbyhkb3VibGUu
Li5kKSB7fVxuIiArCisJCQkJCQkJIiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3Ry
aW5nW10gYXJncykge1xuIiArCisJCQkJCQkJIiAgICAgICAgICAgIGZvbygxLCAyLCAzKTtcbiIg
KworCQkJCQkJCSIgICAgICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4gKFwiRG9uZVwiKTtcbiIg
KworCQkJCQkJCSIgICAgICAgIH1cbiIgKworCQkJCQkJCSJ9XG4iCisJCQkJCQl9LAorCQkJCQkJ
IkRvbmUiLCAKKwkJCQkJCW51bGwsIHRydWUsIG51bGwsIG9wdGlvbnMsIG51bGwpOworCQkJfQor
CQl9IGZpbmFsbHkgeworCQkJU3lzdGVtLnNldFByb3BlcnR5KCJ0b2xlcmF0ZUlsbGVnYWxBbWJp
Z3VvdXNWYXJhcmdzSW52b2NhdGlvbiIsICJmYWxzZSIpOworCQl9CisJfQogCS8vIGh0dHBzOi8v
YnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNDYwMzgKIAlwdWJsaWMgdm9p
ZCB0ZXN0MDcwYigpIHRocm93cyBFeGNlcHRpb24gewogCQlpZiAodGhpcy5jb21wbGlhbmNlTGV2
ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV81KSByZXR1cm47CkBAIC0yODUxLDYgKzMxMDEs
NDEgQEAKIAkJCX0sCiAJCQkiIik7CiAJfQorCQorCS8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9y
Zy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zODM3ODAKKwlwdWJsaWMgdm9pZCB0ZXN0MDcwYl90b2xl
cmF0ZSgpIHRocm93cyBFeGNlcHRpb24geworCQlpZiAodGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBD
bGFzc0ZpbGVDb25zdGFudHMuSkRLMV81KSByZXR1cm47CisJCVN0cmluZ1tdIHNyYyA9IG5ldyBT
dHJpbmdbXSB7CisJCQkJIlguamF2YSIsCisJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJ
CSIgICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBmb28oaW50IC4uLmkpIHt9XG4iICsKKwkJCQki
ICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgZm9vKGRvdWJsZSBkMSwgZG91YmxlLi4uZCkge31c
biIgKworCQkJCSIgICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3Mp
IHtcbiIgKworCQkJCSIgICAgICAgICAgICBmb28oMSwgMiwgMyk7ICAgICAvLyBmb28gTk9UIGZs
YWdnZWQgYW1iaWd1b3VzXG4iICsKKwkJCQkiICAgICAgICB9XG4iICsKKwkJCQkifVxuIiAKKwkJ
CX07CisJCXRyeSB7CisJCQlTeXN0ZW0uc2V0UHJvcGVydHkoInRvbGVyYXRlSWxsZWdhbEFtYmln
dW91c1ZhcmFyZ3NJbnZvY2F0aW9uIiwgInRydWUiKTsKKwkJCWlmICh0aGlzLmNvbXBsaWFuY2VM
ZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV83KSB7CisJCQkJdGhpcy5ydW5Db25mb3Jt
VGVzdCgKKwkJCQkJc3JjLAorCQkJCQkiIik7CisJCQl9IGVsc2UgeworCQkJCXRoaXMucnVuTmVn
YXRpdmVUZXN0KAorCQkJCQkJc3JjLAorCQkJCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCQkJCSIx
LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNSlcbiIgKyAKKwkJCQkJCSIJZm9vKDEsIDIsIDMp
OyAgICAgLy8gZm9vIE5PVCBmbGFnZ2VkIGFtYmlndW91c1xuIiArIAorCQkJCQkJIgleXl5cbiIg
KyAKKwkJCQkJCSJUaGUgbWV0aG9kIGZvbyhpbnRbXSkgaXMgYW1iaWd1b3VzIGZvciB0aGUgdHlw
ZSBYXG4iICsgCisJCQkJCQkiLS0tLS0tLS0tLVxuIik7CisJCQl9CisJCX0gZmluYWxseSB7CisJ
CQlTeXN0ZW0uc2V0UHJvcGVydHkoInRvbGVyYXRlSWxsZWdhbEFtYmlndW91c1ZhcmFyZ3NJbnZv
Y2F0aW9uIiwgImZhbHNlIik7CisJCX0KKwl9CisJCiAJLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uu
b3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM0NjAzOAogCXB1YmxpYyB2b2lkIHRlc3QwNzBjKCkg
eyAvLyBjaGVjayBiZWhhdmlvdXIgb2YgU2NvcGUubW9zdFNwZWNpZmljTWV0aG9kQmluZGluZygp
CiAJCXRoaXMucnVuTmVnYXRpdmVUZXN0KApAQCAtMjkzNSw2ICszMjIwLDQ4IEBACiAJCQl9LAog
CQkJIjEiKTsKIAl9CisJLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcu
Y2dpP2lkPTM4Mzc4MAorCXB1YmxpYyB2b2lkIHRlc3QwNzFfdG9sZXJhdGUoKSB0aHJvd3MgRXhj
ZXB0aW9uIHsKKwkJaWYgKHRoaXMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRz
LkpESzFfNSkgcmV0dXJuOworCQlTdHJpbmdbXSBzcmMgPSAKKwkJCW5ldyBTdHJpbmdbXSB7CisJ
CQkJIlguamF2YSIsCisJCQkJInB1YmxpYyBjbGFzcyBYIGltcGxlbWVudHMgSUNsYXNze1xuIiAr
CisJCQkJIiAgICBYKElDbGFzcyBjLCBYIHQsIElUeXBlLi4uIGFyZ3MpIHtcbiIgKworCQkJCSIJ
ICAgICBTeXN0ZW0ub3V0LnByaW50bG4gKFwiMVwiKTtcbiIgKworCQkJCSIgICAgfVxuIiArCisJ
CQkJIiAgICBYKElDbGFzcyBjLCBJVHlwZS4uLiBhcmdzKSB7XG4iICsKKwkJCQkiCSAgICBTeXN0
ZW0ub3V0LnByaW50bG4gKFwiMlwiKTtcbiIgKworCQkJCSIgICAgfVxuIiArCisJCQkJIiAgICBw
dWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmcgYXJnc1tdKSB7XG4iICsKKwkJCQkiICAgICAg
ICBJQ2xhc3MgYyA9IG51bGw7XG4iICsKKwkJCQkiICAgICAgICBYIHQgPSBudWxsO1xuIiArCisJ
CQkJIiAgICAgICAgWCB0MiA9IG5ldyBYKGMsIHQpOyAgICAgLy8gaW5jb3JyZWN0bHkgZmxhZ2dl
ZCBhbWJpZ3VvdXNcbiIgKworCQkJCSIgICAgfVxuIiArCisJCQkJIn1cbiIgKworCQkJCSJpbnRl
cmZhY2UgSVR5cGV7fVxuIiArCisJCQkJImludGVyZmFjZSBJQ2xhc3MgZXh0ZW5kcyBJVHlwZXt9
XG4iCisJCQl9OworCQl0cnkgeworCQkJU3lzdGVtLnNldFByb3BlcnR5KCJ0b2xlcmF0ZUlsbGVn
YWxBbWJpZ3VvdXNWYXJhcmdzSW52b2NhdGlvbiIsICJ0cnVlIik7CisJCQlpZiAodGhpcy5jb21w
bGlhbmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNykgeworCQkJCXRoaXMucnVu
Q29uZm9ybVRlc3QoCisJCQkJCXNyYywKKwkJCQkJIjEiKTsKKwkJCX0gZWxzZSB7CisJCQkJdGhp
cy5ydW5OZWdhdGl2ZVRlc3QoCisJCQkJCQlzcmMsCisJCQkJCQkiLS0tLS0tLS0tLVxuIiArIAor
CQkJCQkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMSlcbiIgKyAKKwkJCQkJCSIJWCB0
MiA9IG5ldyBYKGMsIHQpOyAgICAgLy8gaW5jb3JyZWN0bHkgZmxhZ2dlZCBhbWJpZ3VvdXNcbiIg
KyAKKwkJCQkJCSIJICAgICAgIF5eXl5eXl5eXl5eXG4iICsgCisJCQkJCQkiVGhlIGNvbnN0cnVj
dG9yIFgoSUNsYXNzLCBYLCBJVHlwZVtdKSBpcyBhbWJpZ3VvdXNcbiIgKyAKKwkJCQkJCSItLS0t
LS0tLS0tXG4iKTsKKwkJCX0KKwkJfSBmaW5hbGx5IHsKKwkJCVN5c3RlbS5zZXRQcm9wZXJ0eSgi
dG9sZXJhdGVJbGxlZ2FsQW1iaWd1b3VzVmFyYXJnc0ludm9jYXRpb24iLCAiZmFsc2UiKTsKKwkJ
fQorCX0KIAkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9
MzY0NjcyCiAJcHVibGljIHZvaWQgdGVzdDA3MigpIHsKIAkJdGhpcy5ydW5Db25mb3JtVGVzdCgK
ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9pbXBsL0NvbXBpbGVyT3B0aW9ucy5qYXZhIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2lt
cGwvQ29tcGlsZXJPcHRpb25zLmphdmEKaW5kZXggMWEyYjc1Zi4uYmE0YTMyZSAxMDA2NDQKLS0t
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2ltcGwvQ29tcGlsZXJPcHRpb25zLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2ltcGwvQ29t
cGlsZXJPcHRpb25zLmphdmEKQEAgLTQxNCw2ICs0MTQsMTUgQEAKIAlwdWJsaWMgYm9vbGVhbiBh
bmFseXNlUmVzb3VyY2VMZWFrczsKIAkvKiogU2hvdWxkIG1pc3NpbmcgZW51bSBjYXNlcyBiZSBy
ZXBvcnRlZCBldmVuIGlmIGEgZGVmYXVsdCBjYXNlIGV4aXN0cyBpbiB0aGUgc2FtZSBzd2l0Y2g/
ICovCiAJcHVibGljIGJvb2xlYW4gcmVwb3J0TWlzc2luZ0VudW1DYXNlRGVzcGl0ZURlZmF1bHQ7
CisJCisJLyoqIFNob3VsZCB0aGUgY29tcGlsZXIgdG9sZXJhdGUgaWxsZWdhbCBhbWJpZ3VvdXMg
dmFyYXJncyBpbnZvY2F0aW9uIGluIGNvbXBsaWFuY2UgPCAxLjcgCisJICogdG8gYmUgYnVnIGNv
bXBhdGlibGUgd2l0aCBqYXZhYz8gKGJ1ZyAzODM3ODApICovCisJcHVibGljIHN0YXRpYyBib29s
ZWFuIHRvbGVyYXRlSWxsZWdhbEFtYmlndW91c1ZhcmFyZ3NJbnZvY2F0aW9uOworCQorCXsKKwkJ
U3RyaW5nIHRvbGVyYXRlSWxsZWdhbEFtYmlndW91c1ZhcmFyZ3MgPSBTeXN0ZW0uZ2V0UHJvcGVy
dHkoInRvbGVyYXRlSWxsZWdhbEFtYmlndW91c1ZhcmFyZ3NJbnZvY2F0aW9uIik7IC8vJE5PTi1O
TFMtMSQKKwkJdG9sZXJhdGVJbGxlZ2FsQW1iaWd1b3VzVmFyYXJnc0ludm9jYXRpb24gPSB0b2xl
cmF0ZUlsbGVnYWxBbWJpZ3VvdXNWYXJhcmdzICE9IG51bGwgJiYgdG9sZXJhdGVJbGxlZ2FsQW1i
aWd1b3VzVmFyYXJncy5lcXVhbHNJZ25vcmVDYXNlKCJ0cnVlIik7IC8vJE5PTi1OTFMtMSQKKwl9
CiAKIAkvLyBrZWVwIGluIHN5bmMgd2l0aCB3YXJuaW5nVG9rZW5Ub0lycml0YW50IGFuZCB3YXJu
aW5nVG9rZW5Gcm9tSXJyaXRhbnQKIAlwdWJsaWMgZmluYWwgc3RhdGljIFN0cmluZ1tdIHdhcm5p
bmdUb2tlbnMgPSB7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvbG9va3VwL1Njb3BlLmphdmEKaW5kZXggMjVmZWUwOS4uZjE3MDdhOCAxMDA2NDQKLS0tIGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YQpA
QCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMp
IDIwMDAsIDIwMTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMp
IDIwMDAsIDIwMTIgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJl
c2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBh
cmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBM
aWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQg
aXMgYXZhaWxhYmxlIGF0CkBAIC01NTIsOSArNTUyLDkgQEAKIAkJaWYgKGFyZ0xlbmd0aCAhPSBw
YXJhbUxlbmd0aCkKIAkJCWlmICghaXNWYXJBcmdzIHx8IGFyZ0xlbmd0aCA8IHBhcmFtTGVuZ3Ro
IC0gMSkKIAkJCQlyZXR1cm4gbnVsbDsgLy8gaW5jb21wYXRpYmxlCi0KKwkJQ29tcGlsZXJPcHRp
b25zIGNvbXBpbGVyT3B0aW9ucyA9IHRoaXMuY29tcGlsZXJPcHRpb25zKCk7CiAJCS8vIGh0dHBz
Oi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zMzA0MzUsIGluZmVyZW5j
ZSBzaG91bGQga2ljayBpbiBvbmx5IGF0IHNvdXJjZSAxLjUrCi0JCWlmICh0eXBlVmFyaWFibGVz
ICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMgJiYgY29tcGlsZXJPcHRpb25zKCkuc291cmNl
TGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNSkgeyAvLyBnZW5lcmljIG1ldGhvZAor
CQlpZiAodHlwZVZhcmlhYmxlcyAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTICYmIGNvbXBp
bGVyT3B0aW9ucy5zb3VyY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV81KSB7IC8v
IGdlbmVyaWMgbWV0aG9kCiAJCQlUeXBlQmluZGluZ1tdIG5ld0FyZ3MgPSBudWxsOwogCQkJZm9y
IChpbnQgaSA9IDA7IGkgPCBhcmdMZW5ndGg7IGkrKykgewogCQkJCVR5cGVCaW5kaW5nIHBhcmFt
ID0gaSA8IHBhcmFtTGVuZ3RoID8gcGFyYW1ldGVyc1tpXSA6IHBhcmFtZXRlcnNbcGFyYW1MZW5n
dGggLSAxXTsKQEAgLTU3MSw3ICs1NzEsNyBAQAogCQkJbWV0aG9kID0gUGFyYW1ldGVyaXplZEdl
bmVyaWNNZXRob2RCaW5kaW5nLmNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhvZCwgYXJndW1l
bnRzLCB0aGlzLCBpbnZvY2F0aW9uU2l0ZSk7CiAJCQlpZiAobWV0aG9kID09IG51bGwpIHJldHVy
biBudWxsOyAvLyBpbmNvbXBhdGlibGUKIAkJCWlmICghbWV0aG9kLmlzVmFsaWRCaW5kaW5nKCkp
IHJldHVybiBtZXRob2Q7IC8vIGJvdW5kIGNoZWNrIGlzc3VlIGlzIHRha2luZyBwcmVjZWRlbmNl
Ci0JCX0gZWxzZSBpZiAoZ2VuZXJpY1R5cGVBcmd1bWVudHMgIT0gbnVsbCAmJiBjb21waWxlck9w
dGlvbnMoKS5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV83KSB7CisJ
CX0gZWxzZSBpZiAoZ2VuZXJpY1R5cGVBcmd1bWVudHMgIT0gbnVsbCAmJiBjb21waWxlck9wdGlv
bnMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNykgewogCQkJaWYg
KG1ldGhvZCBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgewog
CQkJCWlmICghKChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIG1ldGhvZCkud2Fz
SW5mZXJyZWQpCiAJCQkJCS8vIGF0dGVtcHQgdG8gaW52b2tlIGdlbmVyaWMgbWV0aG9kIG9mIHJh
dyB0eXBlIHdpdGggdHlwZSBoaW50cyA8U3RyaW5nPmZvbygpCkBAIC01ODIsNiArNTgyLDEwIEBA
CiAJCX0KIAogCQlpbnQgY29tcGF0aWJpbGl0eUxldmVsOworCQlpZiAodGllYnJlYWtpbmdWYXJh
cmdzTWV0aG9kcykgeworCQkJaWYgKENvbXBpbGVyT3B0aW9ucy50b2xlcmF0ZUlsbGVnYWxBbWJp
Z3VvdXNWYXJhcmdzSW52b2NhdGlvbiAmJiBjb21waWxlck9wdGlvbnMuY29tcGxpYW5jZUxldmVs
IDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNykKKwkJCQl0aWVicmVha2luZ1ZhcmFyZ3NNZXRo
b2RzID0gZmFsc2U7CisJCX0KIAkJaWYgKChjb21wYXRpYmlsaXR5TGV2ZWwgPSBwYXJhbWV0ZXJD
b21wYXRpYmlsaXR5TGV2ZWwobWV0aG9kLCBhcmd1bWVudHMsIHRpZWJyZWFraW5nVmFyYXJnc01l
dGhvZHMpKSA+IE5PVF9DT01QQVRJQkxFKSB7CiAJCQlpZiAoY29tcGF0aWJpbGl0eUxldmVsID09
IFZBUkFSR1NfQ09NUEFUSUJMRSkgewogCQkJCVR5cGVCaW5kaW5nIHZhcmFyZ3NFbGVtZW50VHlw
ZSA9IG1ldGhvZC5wYXJhbWV0ZXJzW21ldGhvZC5wYXJhbWV0ZXJzLmxlbmd0aCAtIDFdLmxlYWZD
b21wb25lbnRUeXBlKCk7CkBAIC0zMDI5LDggKzMwMzMsMTMgQEAKIAkJCQkJaWYgKGkgPT0gb25l
UGFyYW1zTGVuZ3RoIC0gMSAmJiBvbmUuaXNWYXJhcmdzKCkgJiYgdHdvLmlzVmFyYXJncygpKSB7
CiAJCQkJCQlUeXBlQmluZGluZyBvVHlwZSA9ICgoQXJyYXlCaW5kaW5nKSBvbmVQYXJhbSkuZWxl
bWVudHNUeXBlKCk7CiAJCQkJCQlUeXBlQmluZGluZyBlVHlwZSA9ICgoQXJyYXlCaW5kaW5nKSB0
d29QYXJhbSkuZWxlbWVudHNUeXBlKCk7Ci0JCQkJCQlpZiAob1R5cGUgPT0gZVR5cGUgfHwgb1R5
cGUuaXNDb21wYXRpYmxlV2l0aChlVHlwZSkpCi0JCQkJCQkJcmV0dXJuIHRydWU7IC8vIHNwZWNp
YWwgY2FzZSB0byBjaG9vc2UgYmV0d2VlbiAyIHZhcmFyZ3MgbWV0aG9kcyB3aGVuIHRoZSBsYXN0
IGFyZyBpcyBPYmplY3RbXQorCQkJCQkJaWYgKENvbXBpbGVyT3B0aW9ucy50b2xlcmF0ZUlsbGVn
YWxBbWJpZ3VvdXNWYXJhcmdzSW52b2NhdGlvbiAmJiB0aGlzLmNvbXBpbGVyT3B0aW9ucygpLmNv
bXBsaWFuY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzcpIHsKKwkJCQkJCQlpZiAo
b25lUGFyYW0gPT0gZVR5cGUgfHwgb25lUGFyYW0uaXNDb21wYXRpYmxlV2l0aChlVHlwZSkpCisJ
CQkJCQkJCXJldHVybiB0cnVlOyAvLyBzcGVjaWFsIGNhc2UgdG8gY2hvb3NlIGJldHdlZW4gMiB2
YXJhcmdzIG1ldGhvZHMgd2hlbiB0aGUgbGFzdCBhcmcgaXMgT2JqZWN0W10KKwkJCQkJCX0gZWxz
ZSB7CisJCQkJCQkJaWYgKG9UeXBlID09IGVUeXBlIHx8IG9UeXBlLmlzQ29tcGF0aWJsZVdpdGgo
ZVR5cGUpKQorCQkJCQkJCQlyZXR1cm4gdHJ1ZTsgLy8gc3BlY2lhbCBjYXNlIHRvIGNob29zZSBi
ZXR3ZWVuIDIgdmFyYXJncyBtZXRob2RzIHdoZW4gdGhlIGxhc3QgYXJnIGlzIE9iamVjdFtdCisJ
CQkJCQl9CiAJCQkJCX0KIAkJCQkJcmV0dXJuIGZhbHNlOwogCQkJCX0KQEAgLTMwMzksNiArMzA0
OCwxMiBAQAogCQl9CiAKIAkJaWYgKG9uZS5pc1ZhcmFyZ3MoKSAmJiB0d28uaXNWYXJhcmdzKCkp
IHsKKwkJCWlmIChDb21waWxlck9wdGlvbnMudG9sZXJhdGVJbGxlZ2FsQW1iaWd1b3VzVmFyYXJn
c0ludm9jYXRpb24gJiYgdGhpcy5jb21waWxlck9wdGlvbnMoKS5jb21wbGlhbmNlTGV2ZWwgPCBD
bGFzc0ZpbGVDb25zdGFudHMuSkRLMV83ICYmIAorCQkJCQlvbmVQYXJhbXNMZW5ndGggPiB0d29Q
YXJhbXNMZW5ndGgpIHsKKwkJCQkvLyBzcGVjaWFsIGNhc2Ugd2hlbiBhdXRvYm94aW5nIG1ha2Vz
IChpbnQsIGludC4uLikgYmV0dGVyIHRoYW4gKE9iamVjdC4uLikgYnV0IG5vdCAoaW50Li4uKSBv
ciAoSW50ZWdlciwgaW50Li4uKQorCQkJCWlmICgoKEFycmF5QmluZGluZykgdHdvUGFyYW1zW3R3
b1BhcmFtc0xlbmd0aCAtIDFdKS5lbGVtZW50c1R5cGUoKS5pZCAhPSBUeXBlSWRzLlRfSmF2YUxh
bmdPYmplY3QpCisJCQkJCXJldHVybiBmYWxzZTsKKwkJCX0KIAkJCS8vIGNoZWNrIHRoYXQgZWFj
aCBwYXJhbWV0ZXIgYmVmb3JlIHRoZSB2YXJhcmcgcGFyYW1ldGVycyBhcmUgY29tcGF0aWJsZSAo
bm8gYXV0b2JveGluZyBhbGxvd2VkIGhlcmUpCiAJCQlmb3IgKGludCBpID0gKG9uZVBhcmFtc0xl
bmd0aCA+IHR3b1BhcmFtc0xlbmd0aCA/IHR3b1BhcmFtc0xlbmd0aCA6IG9uZVBhcmFtc0xlbmd0
aCkgLSAyOyBpID49IDA7IGktLSkKIAkJCQlpZiAob25lUGFyYW1zW2ldICE9IHR3b1BhcmFtc1tp
XSAmJiAhb25lUGFyYW1zW2ldLmlzQ29tcGF0aWJsZVdpdGgodHdvUGFyYW1zW2ldKSkKQEAgLTQw
MjMsNyArNDAzOCw4IEBACiAJCWludCBwYXJhbUxlbmd0aCA9IHBhcmFtZXRlcnMubGVuZ3RoOwog
CQlpbnQgYXJnTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsKIAotCQlpZiAoY29tcGlsZXJPcHRp
b25zKCkuc291cmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV81KSB7CisJCUNvbXBp
bGVyT3B0aW9ucyBjb21waWxlck9wdGlvbnMgPSBjb21waWxlck9wdGlvbnMoKTsKKwkJaWYgKGNv
bXBpbGVyT3B0aW9ucy5zb3VyY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzUpIHsK
IAkJCWlmIChwYXJhbUxlbmd0aCAhPSBhcmdMZW5ndGgpCiAJCQkJcmV0dXJuIE5PVF9DT01QQVRJ
QkxFOwogCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBhcmdMZW5ndGg7IGkrKykgewpAQCAtNDAzNSw3
ICs0MDUxLDExIEBACiAJCQl9CiAJCQlyZXR1cm4gQ09NUEFUSUJMRTsKIAkJfQotCisJICAgIGlm
ICh0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzKSB7CisJICAgICAgICBpZiAoQ29tcGlsZXJPcHRp
b25zLnRvbGVyYXRlSWxsZWdhbEFtYmlndW91c1ZhcmFyZ3NJbnZvY2F0aW9uICYmIGNvbXBpbGVy
T3B0aW9ucy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV83KSB7CisJ
ICAgICAgICAgICAgdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcyA9IGZhbHNlOworCSAgICAgICAg
fQorCSAgICB9CiAJCWludCBsZXZlbCA9IENPTVBBVElCTEU7IC8vIG5vIGF1dG9ib3hpbmcgb3Ig
dmFyYXJncyBzdXBwb3J0IG5lZWRlZAogCQlpbnQgbGFzdEluZGV4ID0gYXJnTGVuZ3RoOwogCQlM
b29rdXBFbnZpcm9ubWVudCBlbnYgPSBlbnZpcm9ubWVudCgpOwpAQCAtNDA5Miw3ICs0MTEyLDcg
QEAKIAkJLy8gb25seSBjYWxsZWQgaWYgZW52Lm9wdGlvbnMuc291cmNlTGV2ZWwgPj0gQ2xhc3NG
aWxlQ29uc3RhbnRzLkpESzFfNQogCQlpZiAoYXJnLmlzQ29tcGF0aWJsZVdpdGgocGFyYW0pKQog
CQkJcmV0dXJuIENPTVBBVElCTEU7Ci0JCWlmICh0aWVCcmVha2luZ1ZhcmFyZ3NNZXRob2RzKSB7
CisJCWlmICh0aWVCcmVha2luZ1ZhcmFyZ3NNZXRob2RzICYmICh0aGlzLmNvbXBpbGVyT3B0aW9u
cygpLmNvbXBsaWFuY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV83IHx8ICFDb21w
aWxlck9wdGlvbnMudG9sZXJhdGVJbGxlZ2FsQW1iaWd1b3VzVmFyYXJnc0ludm9jYXRpb24pKSB7
CiAJCQkvKiAxNS4xMi4yLjUgQ2hvb3NpbmcgdGhlIE1vc3QgU3BlY2lmaWMgTWV0aG9kLCAuLi4g
T25lIHZhcmlhYmxlIGFyaXR5IG1lbWJlciBtZXRob2QgbmFtZWQgbSBpcyBtb3JlIHNwZWNpZmlj
IHRoYW4KIAkJCSAgIGFub3RoZXIgdmFyaWFibGUgYXJpdHkgbWVtYmVyIG1ldGhvZCBvZiB0aGUg
c2FtZSBuYW1lIGlmIGVpdGhlciAuLi4gT25seSBzdWJ0eXBlcyByZWxhdGlvbnNoaXAgc2hvdWxk
IGJlIHVzZWQuCiAJCQkgICBBY3R1YWxseSB0aGlzIGlzIHRydWUgZXZlbiBmb3IgZml4ZWQgYXJp
dHkgbWV0aG9kcywgYnV0IGluIHByYWN0aWNlIGlzIG5vdCBhbiBpc3N1ZSBzaW5jZSB3ZSBydW4g
dGhlIGFsZ29yaXRobQ==
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>219412</attachid>
            <date>2012-08-01 04:25:00 -0400</date>
            <delta_ts>2012-08-01 04:25:40 -0400</delta_ts>
            <desc>proposed fix v2.2 + more regression tests</desc>
            <filename>varargs.patch</filename>
            <type>text/plain</type>
            <size>23749</size>
            <attacher name="Ayushman Jain">amj87.iitr</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1ZhcmFyZ3NUZXN0Lmph
dmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2Uv
amR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9WYXJhcmdzVGVzdC5qYXZhCmluZGV4
IDUzNjcyM2IuLmUyNzUyZDAgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3Rz
LmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNz
aW9uL1ZhcmFyZ3NUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29t
cGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24v
VmFyYXJnc1Rlc3QuamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
Ci0gKiBDb3B5cmlnaHQgKGMpIDIwMDUsIDIwMTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMu
CisgKiBDb3B5cmlnaHQgKGMpIDIwMDUsIDIwMTIgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMu
CiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlp
bmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRo
ZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMg
ZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC0zMyw3ICszMyw3IEBACiAJLy8g
U3RhdGljIGluaXRpYWxpemVyIHRvIHNwZWNpZnkgdGVzdHMgc3Vic2V0IHVzaW5nIFRFU1RTXyog
c3RhdGljIHZhcmlhYmxlcwogCS8vIEFsbCBzcGVjaWZpZWQgdGVzdHMgd2hpY2ggZG9lcyBub3Qg
YmVsb25nIHRvIHRoZSBjbGFzcyBhcmUgc2tpcHBlZC4uLgogCXN0YXRpYyB7Ci0vLwkJVEVTVFNf
TkFNRVMgPSBuZXcgU3RyaW5nW10geyAidGVzdDAwMCIgfTsKKy8vCQlURVNUU19OQU1FUyA9IG5l
dyBTdHJpbmdbXSB7ICJ0ZXN0MDcwYiIgfTsKIC8vCQlURVNUU19OVU1CRVJTID0gbmV3IGludFtd
IHsgNjEgfTsKIC8vCQlURVNUU19SQU5HRSA9IG5ldyBpbnRbXSB7IDExLCAtMSB9OwogCX0KQEAg
LTc5OCw2ICs3OTgsNTUgQEAKIAkJCSItLS0tLS0tLS0tXG4iCiAJCSk7CiAJfQorCQorCS8vIGh0
dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zODM3ODAKKwlwdWJs
aWMgdm9pZCB0ZXN0MDE1X3RvbGVyYXRlKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCWlmICh0aGlz
LmNvbXBsaWFuY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzUpIHJldHVybjsKKwkJ
TWFwIG9wdGlvbnMgPSBnZXRDb21waWxlck9wdGlvbnMoKTsKKwkJdHJ5IHsKKwkJCVN5c3RlbS5z
ZXRQcm9wZXJ0eSgidG9sZXJhdGVJbGxlZ2FsQW1iaWd1b3VzVmFyYXJnc0ludm9jYXRpb24iLCAi
dHJ1ZSIpOworCQkJaWYgKHRoaXMuY29tcGxpYW5jZUxldmVsID49IENsYXNzRmlsZUNvbnN0YW50
cy5KREsxXzcpIHsKKwkJCXRoaXMucnVuTmVnYXRpdmVUZXN0KAorCQkJCQluZXcgU3RyaW5nW10g
eworCQkJCQkJCSJYLmphdmEiLAorCQkJCQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCQkJ
CQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIHMpIHtcbiIgKworCQkJCQkJCSIJ
CVkuY291bnQobmV3IGludFswXSk7XG4iICsgLy8gZm9yIHNvbWUgcmVhc29uIHRoaXMgaXMgbm90
IGFtYmlndW91cworCQkJCQkJCSIJfVxuIiArCisJCQkJCQkJIn1cbiIgKworCQkJCQkJCSJjbGFz
cyBZIHtcbiIgKworCQkJCQkJCSIJcHVibGljIHN0YXRpYyB2b2lkIGNvdW50KGludFtdIGFycmF5
LCBpbnQgLi4uIHZhbHVlcykgeyBTeXN0ZW0ub3V0LnByaW50KDEpOyB9XG4iICsKKwkJCQkJCQki
CXB1YmxpYyBzdGF0aWMgdm9pZCBjb3VudChpbnRbXSBhcnJheSwgaW50W10gLi4uIHZhbHVlcykg
eyBTeXN0ZW0ub3V0LnByaW50KDIpOyB9XG4iICsKKwkJCQkJCQkifVxuIiwKKwkJCQl9LAorCQkJ
CSItLS0tLS0tLS0tXG4iICsgCisJCQkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAzKVxu
IiArIAorCQkJCSIJWS5jb3VudChuZXcgaW50WzBdKTtcbiIgKyAKKwkJCQkiCSAgXl5eXl5cbiIg
KyAKKwkJCQkiVGhlIG1ldGhvZCBjb3VudChpbnRbXSwgaW50W10pIGlzIGFtYmlndW91cyBmb3Ig
dGhlIHR5cGUgWVxuIiArIAorCQkJCSItLS0tLS0tLS0tXG4iLAorCQkJCW51bGwsIHRydWUsIG9w
dGlvbnMpOworCQkJfSBlbHNlIHsKKwkJCQl0aGlzLnJ1bkNvbmZvcm1UZXN0KAorCQkJCQluZXcg
U3RyaW5nW10geworCQkJCQkJCSJYLmphdmEiLAorCQkJCQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4i
ICsKKwkJCQkJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIHMpIHtcbiIgKwor
CQkJCQkJCSIJCVkuY291bnQobmV3IGludFswXSk7XG4iICsgLy8gZm9yIHNvbWUgcmVhc29uIHRo
aXMgaXMgbm90IGFtYmlndW91cworCQkJCQkJCSIJfVxuIiArCisJCQkJCQkJIn1cbiIgKworCQkJ
CQkJCSJjbGFzcyBZIHtcbiIgKworCQkJCQkJCSIJcHVibGljIHN0YXRpYyB2b2lkIGNvdW50KGlu
dFtdIGFycmF5LCBpbnQgLi4uIHZhbHVlcykgeyBTeXN0ZW0ub3V0LnByaW50KDEpOyB9XG4iICsK
KwkJCQkJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBjb3VudChpbnRbXSBhcnJheSwgaW50W10gLi4u
IHZhbHVlcykgeyBTeXN0ZW0ub3V0LnByaW50KDIpOyB9XG4iICsKKwkJCQkJCQkifVxuIiwKKwkJ
CQl9LAorCQkJCSIxIiwgCisJCQkJbnVsbCwgdHJ1ZSwgbnVsbCwgb3B0aW9ucywgbnVsbCk7CisJ
CQl9CisJCX0gZmluYWxseSB7CisJCQlTeXN0ZW0uc2V0UHJvcGVydHkoInRvbGVyYXRlSWxsZWdh
bEFtYmlndW91c1ZhcmFyZ3NJbnZvY2F0aW9uIiwgImZhbHNlIik7CisJCX0KKwl9CiAKIAlwdWJs
aWMgdm9pZCB0ZXN0MDE2KCkgeyAvLyBjaGVjayBiZWhhdmlvdXIgb2YgU2NvcGUubW9zdFNwZWNp
ZmljTWV0aG9kQmluZGluZygpCiAJCXRoaXMucnVuTmVnYXRpdmVUZXN0KCAvLyBidXQgdGhpcyBj
YWxsIGlzIGFtYmlndW91cwpAQCAtMTIzNSw3ICsxMjg0LDcgQEAKIAkJCX0sCiAJCQkiMSIpOwog
CX0KLQkvL2h0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0xMDI2
MzEKKyAJLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTEw
MjYzMQogCXB1YmxpYyB2b2lkIHRlc3QwMzMoKSB7CiAJCXRoaXMucnVuTmVnYXRpdmVUZXN0KAog
CQkJbmV3IFN0cmluZ1tdIHsKQEAgLTEzMDEsNiArMTM1MCw2MSBAQAogCQkJIlRoZSBtZXRob2Qg
Yyhib29sZWFuLCBib29sZWFuLCBPYmplY3RbXSkgaXMgYW1iaWd1b3VzIGZvciB0aGUgdHlwZSBY
XG4iICsKIAkJCSItLS0tLS0tLS0tXG4iCiAJCSk7CisJfQorCS8vIGh0dHBzOi8vYnVncy5lY2xp
cHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zODM3ODAKKwlwdWJsaWMgdm9pZCB0ZXN0MDMz
X3RvbGVyYXRlKCkgeworCQlpZiAodGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25z
dGFudHMuSkRLMV81KSByZXR1cm47CisJCU1hcCBvcHRpb25zID0gZ2V0Q29tcGlsZXJPcHRpb25z
KCk7CisJCXRyeSB7CisJCQlTeXN0ZW0uc2V0UHJvcGVydHkoInRvbGVyYXRlSWxsZWdhbEFtYmln
dW91c1ZhcmFyZ3NJbnZvY2F0aW9uIiwgInRydWUiKTsKKwkJCWlmICh0aGlzLmNvbXBsaWFuY2VM
ZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV83KSB7CisJCQkJdGhpcy5ydW5OZWdhdGl2
ZVRlc3QoCisJCQkJCW5ldyBTdHJpbmdbXSB7CisJCQkJCQkiWC5qYXZhIiwKKwkJCQkJCSJwdWJs
aWMgY2xhc3MgWCB7XG4iICsKKwkJCQkJCSIJdm9pZCBhKGJvb2xlYW4gYiwgT2JqZWN0Li4uIG8p
IHtTeXN0ZW0ub3V0LnByaW50KDEpO31cbiIgKworCQkJCQkJIgl2b2lkIGEoT2JqZWN0Li4uIG8p
IHtTeXN0ZW0ub3V0LnByaW50KDIpO31cbiIgKworCQkJCQkJIglwdWJsaWMgc3RhdGljIHZvaWQg
bWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsKKwkJCQkJCSIJCVggeCA9IG5ldyBYKCk7XG4iICsK
KwkJCQkJCSIJCXguYSh0cnVlKTtcbiIgKworCQkJCQkJIgkJeC5hKHRydWUsIFwiZm9vYmFyXCIp
O1xuIiArCisJCQkJCQkiCQl4LmEoXCJmb29cIiwgXCJiYXJcIik7XG4iICsKKwkJCQkJCSIJfVxu
IiArCisJCQkJCQkifVxuIiwKKwkJCQkJfSwKKwkJCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCQkJ
IjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA2KVxuIiArIAorCQkJCQkiCXguYSh0cnVlKTtc
biIgKyAKKwkJCQkJIgkgIF5cbiIgKyAKKwkJCQkJIlRoZSBtZXRob2QgYShib29sZWFuLCBPYmpl
Y3RbXSkgaXMgYW1iaWd1b3VzIGZvciB0aGUgdHlwZSBYXG4iICsgCisJCQkJCSItLS0tLS0tLS0t
XG4iICsgCisJCQkJCSIyLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNylcbiIgKyAKKwkJCQkJ
Igl4LmEodHJ1ZSwgXCJmb29iYXJcIik7XG4iICsgCisJCQkJCSIJICBeXG4iICsgCisJCQkJCSJU
aGUgbWV0aG9kIGEoYm9vbGVhbiwgT2JqZWN0W10pIGlzIGFtYmlndW91cyBmb3IgdGhlIHR5cGUg
WFxuIiArIAorCQkJCQkiLS0tLS0tLS0tLVxuIiwKKwkJCQkJbnVsbCwgdHJ1ZSwgb3B0aW9ucyk7
CisJCQl9IGVsc2UgeworCQkJCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCQkJCQluZXcgU3RyaW5n
W10geworCQkJCQkJCSJYLmphdmEiLAorCQkJCQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJ
CQkJCQkiCXZvaWQgYShib29sZWFuIGIsIE9iamVjdC4uLiBvKSB7U3lzdGVtLm91dC5wcmludCgx
KTt9XG4iICsKKwkJCQkJCQkiCXZvaWQgYShPYmplY3QuLi4gbykge1N5c3RlbS5vdXQucHJpbnQo
Mik7fVxuIiArCisJCQkJCQkJIglwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdz
KSB7XG4iICsKKwkJCQkJCQkiCQlYIHggPSBuZXcgWCgpO1xuIiArCisJCQkJCQkJIgkJeC5hKHRy
dWUpO1xuIiArCisJCQkJCQkJIgkJeC5hKHRydWUsIFwiZm9vYmFyXCIpO1xuIiArCisJCQkJCQkJ
IgkJeC5hKFwiZm9vXCIsIFwiYmFyXCIpO1xuIiArCisJCQkJCQkJIgl9XG4iICsKKwkJCQkJCQki
fVxuIiwKKwkJCQkJCX0sCisJCQkJCQkiMTEyIiwKKwkJCQkJCW51bGwsIHRydWUsIG51bGwsIG9w
dGlvbnMsIG51bGwpOworCQkJfQorCQl9IGZpbmFsbHkgeworCQkJU3lzdGVtLnNldFByb3BlcnR5
KCJ0b2xlcmF0ZUlsbGVnYWxBbWJpZ3VvdXNWYXJhcmdzSW52b2NhdGlvbiIsICJmYWxzZSIpOwor
CQl9CiAJfQogCS8vaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lk
PTEwNjEwNgogCXB1YmxpYyB2b2lkIHRlc3QwMzQoKSB7CkBAIC0yODE4LDYgKzI5MjIsMTA2IEBA
CiAJCQl9LAogCQkJIkRvbmUiKTsKIAl9CisJCisJLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3Jn
L2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM4Mzc4MAorCXB1YmxpYyB2b2lkIHRlc3QwNzBfdG9sZXJh
dGUoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJaWYgKHRoaXMuY29tcGxpYW5jZUxldmVsIDwgQ2xh
c3NGaWxlQ29uc3RhbnRzLkpESzFfNSkgcmV0dXJuOworCQlNYXAgb3B0aW9ucyA9IGdldENvbXBp
bGVyT3B0aW9ucygpOworCQl0cnkgeworCQkJU3lzdGVtLnNldFByb3BlcnR5KCJ0b2xlcmF0ZUls
bGVnYWxBbWJpZ3VvdXNWYXJhcmdzSW52b2NhdGlvbiIsICJ0cnVlIik7CisJCQlpZiAodGhpcy5j
b21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV83KSB7CisJCQkJdGhpcy5y
dW5OZWdhdGl2ZVRlc3QoCisJCQkJCW5ldyBTdHJpbmdbXSB7CisJCQkJCQkiWC5qYXZhIiwKKwkJ
CQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCQkJCSIgICAgICAgIHB1YmxpYyBzdGF0aWMg
dm9pZCBmb28oaW50IC4uLmkpIHt9XG4iICsKKwkJCQkJCSIgICAgICAgIHB1YmxpYyBzdGF0aWMg
dm9pZCBmb28oZG91YmxlLi4uZCkge31cbiIgKworCQkJCQkJIiAgICAgICAgcHVibGljIHN0YXRp
YyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuIiArCisJCQkJCQkiICAgICAgICAgICAgZm9v
KDEsIDIsIDMpO1xuIiArCisJCQkJCQkiICAgICAgICAgICAgU3lzdGVtLm91dC5wcmludGxuIChc
IkRvbmVcIik7XG4iICsKKwkJCQkJCSIgICAgICAgIH1cbiIgKworCQkJCQkJIn1cbiIKKwkJCQkJ
fSwKKwkJCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCQkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQg
bGluZSA1KVxuIiArIAorCQkJCQkiCWZvbygxLCAyLCAzKTtcbiIgKyAKKwkJCQkJIgleXl5cbiIg
KyAKKwkJCQkJIlRoZSBtZXRob2QgZm9vKGludFtdKSBpcyBhbWJpZ3VvdXMgZm9yIHRoZSB0eXBl
IFhcbiIgKyAKKwkJCQkJIi0tLS0tLS0tLS1cbiIsIAorCQkJCQludWxsLCB0cnVlLCBvcHRpb25z
KTsKKwkJCX0gZWxzZSB7CisJCQkJdGhpcy5ydW5Db25mb3JtVGVzdCgKKwkJCQkJCW5ldyBTdHJp
bmdbXSB7CisJCQkJCQkJIlguamF2YSIsCisJCQkJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKwor
CQkJCQkJCSIgICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBmb28oaW50IC4uLmkpIHt9XG4iICsK
KwkJCQkJCQkiICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgZm9vKGRvdWJsZS4uLmQpIHt9XG4i
ICsKKwkJCQkJCQkiICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdz
KSB7XG4iICsKKwkJCQkJCQkiICAgICAgICAgICAgZm9vKDEsIDIsIDMpO1xuIiArCisJCQkJCQkJ
IiAgICAgICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbiAoXCJEb25lXCIpO1xuIiArCisJCQkJCQkJ
IiAgICAgICAgfVxuIiArCisJCQkJCQkJIn1cbiIKKwkJCQkJCX0sCisJCQkJCQkiRG9uZSIsIAor
CQkJCQkJbnVsbCwgdHJ1ZSwgbnVsbCwgb3B0aW9ucywgbnVsbCk7CisJCQl9CisJCX0gZmluYWxs
eSB7CisJCQlTeXN0ZW0uc2V0UHJvcGVydHkoInRvbGVyYXRlSWxsZWdhbEFtYmlndW91c1ZhcmFy
Z3NJbnZvY2F0aW9uIiwgImZhbHNlIik7CisJCX0KKwkJCisJfQorCQorCS8vIGh0dHBzOi8vYnVn
cy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zODM3ODAKKwlwdWJsaWMgdm9pZCB0
ZXN0MDcwX3RvbGVyYXRlMigpIHRocm93cyBFeGNlcHRpb24geworCQlpZiAodGhpcy5jb21wbGlh
bmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV81KSByZXR1cm47CisJCU1hcCBvcHRp
b25zID0gZ2V0Q29tcGlsZXJPcHRpb25zKCk7CisJCXRyeSB7CisJCQlTeXN0ZW0uc2V0UHJvcGVy
dHkoInRvbGVyYXRlSWxsZWdhbEFtYmlndW91c1ZhcmFyZ3NJbnZvY2F0aW9uIiwgInRydWUiKTsK
KwkJCWlmICh0aGlzLmNvbXBsaWFuY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV83
KSB7CisJCQkJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCQkJCW5ldyBTdHJpbmdbXSB7CisJCQkJ
CQkiWC5qYXZhIiwKKwkJCQkJCSJpbXBvcnQgamF2YS51dGlsLkFycmF5cztcbiIgKworCQkJCQkJ
InB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJCQkJIiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lk
IHRlc3QoaW50Li4uIGEpIHtcbiIgKworCQkJCQkJIgkJCVN5c3RlbS5vdXQucHJpbnRsbihBcnJh
eXMudG9TdHJpbmcoYSkpO1xufVxuIiArCisJCQkJCQkiICAgICAgICBwdWJsaWMgc3RhdGljIDxU
PiB2b2lkIHRlc3QoT2JqZWN0Li4uIGEpIHtcbiIgKworCQkJCQkJIgkJCVN5c3RlbS5vdXQucHJp
bnRsbihBcnJheXMudG9TdHJpbmcoYSkpO1xufVxuIiArCisJCQkJCQkiICAgICAgICBwdWJsaWMg
c3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsKKwkJCQkJCSIgICAgICAgICAg
ICB0ZXN0KDEpO1xuIiArCisJCQkJCQkiICAgICAgICB9XG4iICsKKwkJCQkJCSJ9XG4iCisJCQkJ
CX0sCisJCQkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0
IGxpbmUgMTApXG4iICsgCisJCQkJCSIJdGVzdCgxKTtcbiIgKyAKKwkJCQkJIgleXl5eXG4iICsg
CisJCQkJCSJUaGUgbWV0aG9kIHRlc3QoaW50W10pIGlzIGFtYmlndW91cyBmb3IgdGhlIHR5cGUg
WFxuIiArIAorCQkJCQkiLS0tLS0tLS0tLVxuIiwgCisJCQkJCW51bGwsIHRydWUsIG9wdGlvbnMp
OworCQkJfSBlbHNlIHsKKwkJCQl0aGlzLnJ1bkNvbmZvcm1UZXN0KAorCQkJCQkJbmV3IFN0cmlu
Z1tdIHsKKwkJCQkJCQkJIlguamF2YSIsCisJCQkJCQkJCSJpbXBvcnQgamF2YS51dGlsLkFycmF5
cztcbiIgKworCQkJCQkJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkJCQkJCSIgICAgICAg
IHB1YmxpYyBzdGF0aWMgdm9pZCB0ZXN0KGludC4uLiBhKSB7XG4iICsKKwkJCQkJCQkJIgkJCVN5
c3RlbS5vdXQucHJpbnRsbihBcnJheXMudG9TdHJpbmcoYSkpO1xufVxuIiArCisJCQkJCQkJCSIg
ICAgICAgIHB1YmxpYyBzdGF0aWMgPFQ+IHZvaWQgdGVzdChPYmplY3QuLi4gYSkge1xuIiArCisJ
CQkJCQkJCSIJCQlTeXN0ZW0ub3V0LnByaW50bG4oQXJyYXlzLnRvU3RyaW5nKGEpKTtcbn1cbiIg
KworCQkJCQkJCQkiICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdz
KSB7XG4iICsKKwkJCQkJCQkJIiAgICAgICAgICAgIHRlc3QoMSk7XG4iICsKKwkJCQkJCQkJIiAg
ICAgICAgfVxuIiArCisJCQkJCQkJCSJ9XG4iCisJCQkJCQl9LAorCQkJCQkJIlsxXSIsIAorCQkJ
CQkJbnVsbCwgdHJ1ZSwgbnVsbCwgb3B0aW9ucywgbnVsbCk7CisJCQl9CisJCX0gZmluYWxseSB7
CisJCQlTeXN0ZW0uc2V0UHJvcGVydHkoInRvbGVyYXRlSWxsZWdhbEFtYmlndW91c1ZhcmFyZ3NJ
bnZvY2F0aW9uIiwgImZhbHNlIik7CisJCX0KKwkJCisJfQogCS8vIGh0dHBzOi8vYnVncy5lY2xp
cHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNDYwMzgKIAlwdWJsaWMgdm9pZCB0ZXN0MDcw
YSgpIHRocm93cyBFeGNlcHRpb24gewogCQlpZiAodGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFz
c0ZpbGVDb25zdGFudHMuSkRLMV81KSByZXR1cm47CkBAIC0yODM1LDYgKzMwMzksNTIgQEAKIAkJ
CX0sCiAJCQkiRG9uZSIpOwogCX0KKwkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9z
aG93X2J1Zy5jZ2k/aWQ9MzgzNzgwCisJcHVibGljIHZvaWQgdGVzdDA3MGFfdG9sZXJhdGUoKSB0
aHJvd3MgRXhjZXB0aW9uIHsKKwkJaWYgKHRoaXMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxl
Q29uc3RhbnRzLkpESzFfNSkgcmV0dXJuOworCQlNYXAgb3B0aW9ucyA9IGdldENvbXBpbGVyT3B0
aW9ucygpOworCQl0cnkgeworCQkJU3lzdGVtLnNldFByb3BlcnR5KCJ0b2xlcmF0ZUlsbGVnYWxB
bWJpZ3VvdXNWYXJhcmdzSW52b2NhdGlvbiIsICJ0cnVlIik7CisJCQlpZiAodGhpcy5jb21wbGlh
bmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV83KSB7CisJCQkJdGhpcy5ydW5OZWdh
dGl2ZVRlc3QoCisJCQkJCW5ldyBTdHJpbmdbXSB7CisJCQkJCQkiWC5qYXZhIiwKKwkJCQkJCSJw
dWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCQkJCSIgICAgICAgIHB1YmxpYyBzdGF0aWMgPFQ+IHZv
aWQgZm9vKGludCAuLi5pKSB7fVxuIiArCisJCQkJCQkiICAgICAgICBwdWJsaWMgc3RhdGljIDxU
PiB2b2lkIGZvbyhkb3VibGUuLi5kKSB7fVxuIiArCisJCQkJCQkiICAgICAgICBwdWJsaWMgc3Rh
dGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsKKwkJCQkJCSIgICAgICAgICAgICBm
b28oMSwgMiwgMyk7XG4iICsKKwkJCQkJCSIgICAgICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4g
KFwiRG9uZVwiKTtcbiIgKworCQkJCQkJIiAgICAgICAgfVxuIiArCisJCQkJCQkifVxuIgorCQkJ
CQl9LAorCQkJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJCQkiMS4gRVJST1IgaW4gWC5qYXZhIChh
dCBsaW5lIDUpXG4iICsgCisJCQkJCSIJZm9vKDEsIDIsIDMpO1xuIiArIAorCQkJCQkiCV5eXlxu
IiArIAorCQkJCQkiVGhlIG1ldGhvZCBmb28oaW50W10pIGlzIGFtYmlndW91cyBmb3IgdGhlIHR5
cGUgWFxuIiArIAorCQkJCQkiLS0tLS0tLS0tLVxuIiwgCisJCQkJCW51bGwsIHRydWUsIG9wdGlv
bnMpOworCQkJfSBlbHNlIHsKKwkJCQl0aGlzLnJ1bkNvbmZvcm1UZXN0KAorCQkJCQkJbmV3IFN0
cmluZ1tdIHsKKwkJCQkJCQkiWC5qYXZhIiwKKwkJCQkJCQkicHVibGljIGNsYXNzIFgge1xuIiAr
CisJCQkJCQkJIiAgICAgICAgcHVibGljIHN0YXRpYyA8VD4gdm9pZCBmb28oaW50IC4uLmkpIHt9
XG4iICsKKwkJCQkJCQkiICAgICAgICBwdWJsaWMgc3RhdGljIDxUPiB2b2lkIGZvbyhkb3VibGUu
Li5kKSB7fVxuIiArCisJCQkJCQkJIiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3Ry
aW5nW10gYXJncykge1xuIiArCisJCQkJCQkJIiAgICAgICAgICAgIGZvbygxLCAyLCAzKTtcbiIg
KworCQkJCQkJCSIgICAgICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4gKFwiRG9uZVwiKTtcbiIg
KworCQkJCQkJCSIgICAgICAgIH1cbiIgKworCQkJCQkJCSJ9XG4iCisJCQkJCQl9LAorCQkJCQkJ
IkRvbmUiLCAKKwkJCQkJCW51bGwsIHRydWUsIG51bGwsIG9wdGlvbnMsIG51bGwpOworCQkJfQor
CQl9IGZpbmFsbHkgeworCQkJU3lzdGVtLnNldFByb3BlcnR5KCJ0b2xlcmF0ZUlsbGVnYWxBbWJp
Z3VvdXNWYXJhcmdzSW52b2NhdGlvbiIsICJmYWxzZSIpOworCQl9CisJfQogCS8vIGh0dHBzOi8v
YnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNDYwMzgKIAlwdWJsaWMgdm9p
ZCB0ZXN0MDcwYigpIHRocm93cyBFeGNlcHRpb24gewogCQlpZiAodGhpcy5jb21wbGlhbmNlTGV2
ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV81KSByZXR1cm47CkBAIC0yODUxLDYgKzMxMDEs
NDEgQEAKIAkJCX0sCiAJCQkiIik7CiAJfQorCQorCS8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9y
Zy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zODM3ODAKKwlwdWJsaWMgdm9pZCB0ZXN0MDcwYl90b2xl
cmF0ZSgpIHRocm93cyBFeGNlcHRpb24geworCQlpZiAodGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBD
bGFzc0ZpbGVDb25zdGFudHMuSkRLMV81KSByZXR1cm47CisJCVN0cmluZ1tdIHNyYyA9IG5ldyBT
dHJpbmdbXSB7CisJCQkJIlguamF2YSIsCisJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJ
CSIgICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBmb28oaW50IC4uLmkpIHt9XG4iICsKKwkJCQki
ICAgICAgICBwdWJsaWMgc3RhdGljIHZvaWQgZm9vKGRvdWJsZSBkMSwgZG91YmxlLi4uZCkge31c
biIgKworCQkJCSIgICAgICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3Mp
IHtcbiIgKworCQkJCSIgICAgICAgICAgICBmb28oMSwgMiwgMyk7ICAgICAvLyBmb28gTk9UIGZs
YWdnZWQgYW1iaWd1b3VzXG4iICsKKwkJCQkiICAgICAgICB9XG4iICsKKwkJCQkifVxuIiAKKwkJ
CX07CisJCXRyeSB7CisJCQlTeXN0ZW0uc2V0UHJvcGVydHkoInRvbGVyYXRlSWxsZWdhbEFtYmln
dW91c1ZhcmFyZ3NJbnZvY2F0aW9uIiwgInRydWUiKTsKKwkJCWlmICh0aGlzLmNvbXBsaWFuY2VM
ZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV83KSB7CisJCQkJdGhpcy5ydW5Db25mb3Jt
VGVzdCgKKwkJCQkJc3JjLAorCQkJCQkiIik7CisJCQl9IGVsc2UgeworCQkJCXRoaXMucnVuTmVn
YXRpdmVUZXN0KAorCQkJCQkJc3JjLAorCQkJCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCQkJCSIx
LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNSlcbiIgKyAKKwkJCQkJCSIJZm9vKDEsIDIsIDMp
OyAgICAgLy8gZm9vIE5PVCBmbGFnZ2VkIGFtYmlndW91c1xuIiArIAorCQkJCQkJIgleXl5cbiIg
KyAKKwkJCQkJCSJUaGUgbWV0aG9kIGZvbyhpbnRbXSkgaXMgYW1iaWd1b3VzIGZvciB0aGUgdHlw
ZSBYXG4iICsgCisJCQkJCQkiLS0tLS0tLS0tLVxuIik7CisJCQl9CisJCX0gZmluYWxseSB7CisJ
CQlTeXN0ZW0uc2V0UHJvcGVydHkoInRvbGVyYXRlSWxsZWdhbEFtYmlndW91c1ZhcmFyZ3NJbnZv
Y2F0aW9uIiwgImZhbHNlIik7CisJCX0KKwl9CisJCiAJLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uu
b3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM0NjAzOAogCXB1YmxpYyB2b2lkIHRlc3QwNzBjKCkg
eyAvLyBjaGVjayBiZWhhdmlvdXIgb2YgU2NvcGUubW9zdFNwZWNpZmljTWV0aG9kQmluZGluZygp
CiAJCXRoaXMucnVuTmVnYXRpdmVUZXN0KApAQCAtMjkzNSw2ICszMjIwLDQ4IEBACiAJCQl9LAog
CQkJIjEiKTsKIAl9CisJLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcu
Y2dpP2lkPTM4Mzc4MAorCXB1YmxpYyB2b2lkIHRlc3QwNzFfdG9sZXJhdGUoKSB0aHJvd3MgRXhj
ZXB0aW9uIHsKKwkJaWYgKHRoaXMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRz
LkpESzFfNSkgcmV0dXJuOworCQlTdHJpbmdbXSBzcmMgPSAKKwkJCW5ldyBTdHJpbmdbXSB7CisJ
CQkJIlguamF2YSIsCisJCQkJInB1YmxpYyBjbGFzcyBYIGltcGxlbWVudHMgSUNsYXNze1xuIiAr
CisJCQkJIiAgICBYKElDbGFzcyBjLCBYIHQsIElUeXBlLi4uIGFyZ3MpIHtcbiIgKworCQkJCSIJ
ICAgICBTeXN0ZW0ub3V0LnByaW50bG4gKFwiMVwiKTtcbiIgKworCQkJCSIgICAgfVxuIiArCisJ
CQkJIiAgICBYKElDbGFzcyBjLCBJVHlwZS4uLiBhcmdzKSB7XG4iICsKKwkJCQkiCSAgICBTeXN0
ZW0ub3V0LnByaW50bG4gKFwiMlwiKTtcbiIgKworCQkJCSIgICAgfVxuIiArCisJCQkJIiAgICBw
dWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmcgYXJnc1tdKSB7XG4iICsKKwkJCQkiICAgICAg
ICBJQ2xhc3MgYyA9IG51bGw7XG4iICsKKwkJCQkiICAgICAgICBYIHQgPSBudWxsO1xuIiArCisJ
CQkJIiAgICAgICAgWCB0MiA9IG5ldyBYKGMsIHQpOyAgICAgLy8gaW5jb3JyZWN0bHkgZmxhZ2dl
ZCBhbWJpZ3VvdXNcbiIgKworCQkJCSIgICAgfVxuIiArCisJCQkJIn1cbiIgKworCQkJCSJpbnRl
cmZhY2UgSVR5cGV7fVxuIiArCisJCQkJImludGVyZmFjZSBJQ2xhc3MgZXh0ZW5kcyBJVHlwZXt9
XG4iCisJCQl9OworCQl0cnkgeworCQkJU3lzdGVtLnNldFByb3BlcnR5KCJ0b2xlcmF0ZUlsbGVn
YWxBbWJpZ3VvdXNWYXJhcmdzSW52b2NhdGlvbiIsICJ0cnVlIik7CisJCQlpZiAodGhpcy5jb21w
bGlhbmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNykgeworCQkJCXRoaXMucnVu
Q29uZm9ybVRlc3QoCisJCQkJCXNyYywKKwkJCQkJIjEiKTsKKwkJCX0gZWxzZSB7CisJCQkJdGhp
cy5ydW5OZWdhdGl2ZVRlc3QoCisJCQkJCQlzcmMsCisJCQkJCQkiLS0tLS0tLS0tLVxuIiArIAor
CQkJCQkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMSlcbiIgKyAKKwkJCQkJCSIJWCB0
MiA9IG5ldyBYKGMsIHQpOyAgICAgLy8gaW5jb3JyZWN0bHkgZmxhZ2dlZCBhbWJpZ3VvdXNcbiIg
KyAKKwkJCQkJCSIJICAgICAgIF5eXl5eXl5eXl5eXG4iICsgCisJCQkJCQkiVGhlIGNvbnN0cnVj
dG9yIFgoSUNsYXNzLCBYLCBJVHlwZVtdKSBpcyBhbWJpZ3VvdXNcbiIgKyAKKwkJCQkJCSItLS0t
LS0tLS0tXG4iKTsKKwkJCX0KKwkJfSBmaW5hbGx5IHsKKwkJCVN5c3RlbS5zZXRQcm9wZXJ0eSgi
dG9sZXJhdGVJbGxlZ2FsQW1iaWd1b3VzVmFyYXJnc0ludm9jYXRpb24iLCAiZmFsc2UiKTsKKwkJ
fQorCX0KIAkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9
MzY0NjcyCiAJcHVibGljIHZvaWQgdGVzdDA3MigpIHsKIAkJdGhpcy5ydW5Db25mb3JtVGVzdCgK
QEAgLTMwMTAsNCArMzMzNyw4NyBAQAogCQkJIlRoZSBjb25zdHJ1Y3RvciBCKEEuLi4pIG9mIHR5
cGUgQiBpcyBub3QgYXBwbGljYWJsZSBhcyB0aGUgZm9ybWFsIHZhcmFyZ3MgZWxlbWVudCB0eXBl
IEEgaXMgbm90IGFjY2Vzc2libGUgaGVyZVxuIiArIAogCQkJIi0tLS0tLS0tLS1cbiIpOwogCX0K
KwkKKwkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9Mzgy
NDY5CisJcHVibGljIHZvaWQgdGVzdEJ1ZzM4MjQ2OSgpIHRocm93cyBFeGNlcHRpb24geworCQlp
ZiAodGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV81KSByZXR1
cm47CisJCVN0cmluZ1tdIHNyYyA9IAorCQkJbmV3IFN0cmluZ1tdIHsKKwkJCQkiWC5qYXZhIiwK
KwkJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkJIiAgICBwcml2YXRlIHN0YXRpYyB2b2lk
IGJhcihPYmplY3QuLi4gb2Jqcykge1xuIiArCisJCQkJIgkgICAgIFN5c3RlbS5vdXQucHJpbnRs
biAoXCIxXCIpO1xuIiArCisJCQkJIiAgICB9XG4iICsKKwkJCQkiICAgIHByaXZhdGUgc3RhdGlj
IHZvaWQgYmFyKGludCBpbnRWYWx1ZSwgT2JqZWN0Li4uIG9ianMpIHtcbiIgKworCQkJCSIJICAg
ICBTeXN0ZW0ub3V0LnByaW50bG4gKFwiMlwiKTtcbiIgKworCQkJCSIgICAgfVxuIiArCisJCQkJ
IiAgICBwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmcgYXJnc1tdKSB7XG4iICsKKwkJCQki
ICAgICAgICBiYXIoNSk7XG4iICsKKwkJCQkiICAgIH1cbiIgKworCQkJCSJ9XG4iCisJCQl9Owor
CQl0cnkgeworCQkJU3lzdGVtLnNldFByb3BlcnR5KCJ0b2xlcmF0ZUlsbGVnYWxBbWJpZ3VvdXNW
YXJhcmdzSW52b2NhdGlvbiIsICJ0cnVlIik7CisJCQlpZiAodGhpcy5jb21wbGlhbmNlTGV2ZWwg
PCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV83KSB7CisJCQkJdGhpcy5ydW5Db25mb3JtVGVzdCgK
KwkJCQkJc3JjLAorCQkJCQkiMiIpOworCQkJfSBlbHNlIHsKKwkJCQl0aGlzLnJ1bk5lZ2F0aXZl
VGVzdCgKKwkJCQkJCXNyYywKKwkJCQkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkJCQkiMS4gV0FS
TklORyBpbiBYLmphdmEgKGF0IGxpbmUgNSlcbiIgKyAKKwkJCQkJCSIJcHJpdmF0ZSBzdGF0aWMg
dm9pZCBiYXIoaW50IGludFZhbHVlLCBPYmplY3QuLi4gb2Jqcykge1xuIiArIAorCQkJCQkJIgkg
ICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiAr
IAorCQkJCQkJIlRoZSBtZXRob2QgYmFyKGludCwgT2JqZWN0Li4uKSBmcm9tIHRoZSB0eXBlIFgg
aXMgbmV2ZXIgdXNlZCBsb2NhbGx5XG4iICsgCisJCQkJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJ
CQkJIjIuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA5KVxuIiArIAorCQkJCQkJIgliYXIoNSk7
XG4iICsgCisJCQkJCQkiCV5eXlxuIiArIAorCQkJCQkJIlRoZSBtZXRob2QgYmFyKE9iamVjdFtd
KSBpcyBhbWJpZ3VvdXMgZm9yIHRoZSB0eXBlIFhcbiIgKyAKKwkJCQkJCSItLS0tLS0tLS0tXG4i
KTsKKwkJCX0KKwkJfSBmaW5hbGx5IHsKKwkJCVN5c3RlbS5zZXRQcm9wZXJ0eSgidG9sZXJhdGVJ
bGxlZ2FsQW1iaWd1b3VzVmFyYXJnc0ludm9jYXRpb24iLCAiZmFsc2UiKTsKKwkJfQorCX0KKwkK
KwkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9Mzg2MzYx
CisJcHVibGljIHZvaWQgdGVzdEJ1ZzM4NjM2MSgpIHRocm93cyBFeGNlcHRpb24geworCQlpZiAo
dGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV81KSByZXR1cm47
CisJCVN0cmluZ1tdIHNyYyA9IAorCQkJbmV3IFN0cmluZ1tdIHsKKwkJCQkiWC5qYXZhIiwKKwkJ
CQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkJIiAgICBwdWJsaWMgc3RhdGljIHZvaWQgdGVz
dChpbnQgaSwgT2JqZWN0Li4uIG9iamVjdHMpIHtcbiIgKworCQkJCSIJICAgICBTeXN0ZW0ub3V0
LnByaW50bG4gKFwiMVwiKTtcbiIgKworCQkJCSIgICAgfVxuIiArCisJCQkJIiAgICBwdWJsaWMg
c3RhdGljIHZvaWQgdGVzdChPYmplY3QuLi4gb2JqZWN0cykge1xuIiArCisJCQkJIgkgICAgIFN5
c3RlbS5vdXQucHJpbnRsbiAoXCIyXCIpO1xuIiArCisJCQkJIiAgICB9XG4iICsKKwkJCQkiICAg
IHB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZyBhcmdzW10pIHtcbiIgKworCQkJCSIgICAg
ICAgIHRlc3QoMSxcInRlc3RcIik7XG4iICsKKwkJCQkiICAgIH1cbiIgKworCQkJCSJ9XG4iCisJ
CQl9OworCQl0cnkgeworCQkJU3lzdGVtLnNldFByb3BlcnR5KCJ0b2xlcmF0ZUlsbGVnYWxBbWJp
Z3VvdXNWYXJhcmdzSW52b2NhdGlvbiIsICJ0cnVlIik7CisJCQlpZiAodGhpcy5jb21wbGlhbmNl
TGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV83KSB7CisJCQkJdGhpcy5ydW5Db25mb3Jt
VGVzdCgKKwkJCQkJc3JjLAorCQkJCQkiMSIpOworCQkJfSBlbHNlIHsKKwkJCQl0aGlzLnJ1bk5l
Z2F0aXZlVGVzdCgKKwkJCQkJCXNyYywKKwkJCQkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkJCQki
MS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDkpXG4iICsgCisJCQkJCQkiCXRlc3QoMSxcInRl
c3RcIik7XG4iICsgCisJCQkJCQkiCV5eXl5cbiIgKyAKKwkJCQkJCSJUaGUgbWV0aG9kIHRlc3Qo
aW50LCBPYmplY3RbXSkgaXMgYW1iaWd1b3VzIGZvciB0aGUgdHlwZSBYXG4iICsgCisJCQkJCQki
LS0tLS0tLS0tLVxuIik7CisJCQl9CisJCX0gZmluYWxseSB7CisJCQlTeXN0ZW0uc2V0UHJvcGVy
dHkoInRvbGVyYXRlSWxsZWdhbEFtYmlndW91c1ZhcmFyZ3NJbnZvY2F0aW9uIiwgImZhbHNlIik7
CisJCX0KKwl9CiB9ClwgTm8gbmV3bGluZSBhdCBlbmQgb2YgZmlsZQpkaWZmIC0tZ2l0IGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2ltcGwvQ29tcGlsZXJPcHRpb25zLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvaW1wbC9Db21waWxlck9wdGlv
bnMuamF2YQppbmRleCAxYTJiNzVmLi5iYTRhMzJlIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvaW1wbC9D
b21waWxlck9wdGlvbnMuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvaW1wbC9Db21waWxlck9wdGlvbnMuamF2
YQpAQCAtNDE0LDYgKzQxNCwxNSBAQAogCXB1YmxpYyBib29sZWFuIGFuYWx5c2VSZXNvdXJjZUxl
YWtzOwogCS8qKiBTaG91bGQgbWlzc2luZyBlbnVtIGNhc2VzIGJlIHJlcG9ydGVkIGV2ZW4gaWYg
YSBkZWZhdWx0IGNhc2UgZXhpc3RzIGluIHRoZSBzYW1lIHN3aXRjaD8gKi8KIAlwdWJsaWMgYm9v
bGVhbiByZXBvcnRNaXNzaW5nRW51bUNhc2VEZXNwaXRlRGVmYXVsdDsKKwkKKwkvKiogU2hvdWxk
IHRoZSBjb21waWxlciB0b2xlcmF0ZSBpbGxlZ2FsIGFtYmlndW91cyB2YXJhcmdzIGludm9jYXRp
b24gaW4gY29tcGxpYW5jZSA8IDEuNyAKKwkgKiB0byBiZSBidWcgY29tcGF0aWJsZSB3aXRoIGph
dmFjPyAoYnVnIDM4Mzc4MCkgKi8KKwlwdWJsaWMgc3RhdGljIGJvb2xlYW4gdG9sZXJhdGVJbGxl
Z2FsQW1iaWd1b3VzVmFyYXJnc0ludm9jYXRpb247CisJCisJeworCQlTdHJpbmcgdG9sZXJhdGVJ
bGxlZ2FsQW1iaWd1b3VzVmFyYXJncyA9IFN5c3RlbS5nZXRQcm9wZXJ0eSgidG9sZXJhdGVJbGxl
Z2FsQW1iaWd1b3VzVmFyYXJnc0ludm9jYXRpb24iKTsgLy8kTk9OLU5MUy0xJAorCQl0b2xlcmF0
ZUlsbGVnYWxBbWJpZ3VvdXNWYXJhcmdzSW52b2NhdGlvbiA9IHRvbGVyYXRlSWxsZWdhbEFtYmln
dW91c1ZhcmFyZ3MgIT0gbnVsbCAmJiB0b2xlcmF0ZUlsbGVnYWxBbWJpZ3VvdXNWYXJhcmdzLmVx
dWFsc0lnbm9yZUNhc2UoInRydWUiKTsgLy8kTk9OLU5MUy0xJAorCX0KIAogCS8vIGtlZXAgaW4g
c3luYyB3aXRoIHdhcm5pbmdUb2tlblRvSXJyaXRhbnQgYW5kIHdhcm5pbmdUb2tlbkZyb21JcnJp
dGFudAogCXB1YmxpYyBmaW5hbCBzdGF0aWMgU3RyaW5nW10gd2FybmluZ1Rva2VucyA9IHsKZGlm
ZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUu
amF2YQppbmRleCA4NDM3MWI1Li5mYWJiZjk3IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Nj
b3BlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhCkBAIC01NTIsOSArNTUyLDkg
QEAKIAkJaWYgKGFyZ0xlbmd0aCAhPSBwYXJhbUxlbmd0aCkKIAkJCWlmICghaXNWYXJBcmdzIHx8
IGFyZ0xlbmd0aCA8IHBhcmFtTGVuZ3RoIC0gMSkKIAkJCQlyZXR1cm4gbnVsbDsgLy8gaW5jb21w
YXRpYmxlCi0KKwkJQ29tcGlsZXJPcHRpb25zIGNvbXBpbGVyT3B0aW9ucyA9IHRoaXMuY29tcGls
ZXJPcHRpb25zKCk7CiAJCS8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVn
LmNnaT9pZD0zMzA0MzUsIGluZmVyZW5jZSBzaG91bGQga2ljayBpbiBvbmx5IGF0IHNvdXJjZSAx
LjUrCi0JCWlmICh0eXBlVmFyaWFibGVzICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMgJiYg
Y29tcGlsZXJPcHRpb25zKCkuc291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFf
NSkgeyAvLyBnZW5lcmljIG1ldGhvZAorCQlpZiAodHlwZVZhcmlhYmxlcyAhPSBCaW5kaW5nLk5P
X1RZUEVfVkFSSUFCTEVTICYmIGNvbXBpbGVyT3B0aW9ucy5zb3VyY2VMZXZlbCA+PSBDbGFzc0Zp
bGVDb25zdGFudHMuSkRLMV81KSB7IC8vIGdlbmVyaWMgbWV0aG9kCiAJCQlUeXBlQmluZGluZ1td
IG5ld0FyZ3MgPSBudWxsOwogCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBhcmdMZW5ndGg7IGkrKykg
ewogCQkJCVR5cGVCaW5kaW5nIHBhcmFtID0gaSA8IHBhcmFtTGVuZ3RoID8gcGFyYW1ldGVyc1tp
XSA6IHBhcmFtZXRlcnNbcGFyYW1MZW5ndGggLSAxXTsKQEAgLTU3MSw3ICs1NzEsNyBAQAogCQkJ
bWV0aG9kID0gUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nLmNvbXB1dGVDb21wYXRp
YmxlTWV0aG9kKG1ldGhvZCwgYXJndW1lbnRzLCB0aGlzLCBpbnZvY2F0aW9uU2l0ZSk7CiAJCQlp
ZiAobWV0aG9kID09IG51bGwpIHJldHVybiBudWxsOyAvLyBpbmNvbXBhdGlibGUKIAkJCWlmICgh
bWV0aG9kLmlzVmFsaWRCaW5kaW5nKCkpIHJldHVybiBtZXRob2Q7IC8vIGJvdW5kIGNoZWNrIGlz
c3VlIGlzIHRha2luZyBwcmVjZWRlbmNlCi0JCX0gZWxzZSBpZiAoZ2VuZXJpY1R5cGVBcmd1bWVu
dHMgIT0gbnVsbCAmJiBjb21waWxlck9wdGlvbnMoKS5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0Zp
bGVDb25zdGFudHMuSkRLMV83KSB7CisJCX0gZWxzZSBpZiAoZ2VuZXJpY1R5cGVBcmd1bWVudHMg
IT0gbnVsbCAmJiBjb21waWxlck9wdGlvbnMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29u
c3RhbnRzLkpESzFfNykgewogCQkJaWYgKG1ldGhvZCBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRH
ZW5lcmljTWV0aG9kQmluZGluZykgewogCQkJCWlmICghKChQYXJhbWV0ZXJpemVkR2VuZXJpY01l
dGhvZEJpbmRpbmcpIG1ldGhvZCkud2FzSW5mZXJyZWQpCiAJCQkJCS8vIGF0dGVtcHQgdG8gaW52
b2tlIGdlbmVyaWMgbWV0aG9kIG9mIHJhdyB0eXBlIHdpdGggdHlwZSBoaW50cyA8U3RyaW5nPmZv
bygpCkBAIC01ODIsNiArNTgyLDEwIEBACiAJCX0KIAogCQlpbnQgY29tcGF0aWJpbGl0eUxldmVs
OworCQlpZiAodGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcykgeworCQkJaWYgKENvbXBpbGVyT3B0
aW9ucy50b2xlcmF0ZUlsbGVnYWxBbWJpZ3VvdXNWYXJhcmdzSW52b2NhdGlvbiAmJiBjb21waWxl
ck9wdGlvbnMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNykKKwkJ
CQl0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzID0gZmFsc2U7CisJCX0KIAkJaWYgKChjb21wYXRp
YmlsaXR5TGV2ZWwgPSBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwobWV0aG9kLCBhcmd1bWVu
dHMsIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMpKSA+IE5PVF9DT01QQVRJQkxFKSB7CiAJCQlp
ZiAoY29tcGF0aWJpbGl0eUxldmVsID09IFZBUkFSR1NfQ09NUEFUSUJMRSkgewogCQkJCVR5cGVC
aW5kaW5nIHZhcmFyZ3NFbGVtZW50VHlwZSA9IG1ldGhvZC5wYXJhbWV0ZXJzW21ldGhvZC5wYXJh
bWV0ZXJzLmxlbmd0aCAtIDFdLmxlYWZDb21wb25lbnRUeXBlKCk7CkBAIC0zMDMzLDggKzMwMzcs
MTMgQEAKIAkJCQkJaWYgKGkgPT0gb25lUGFyYW1zTGVuZ3RoIC0gMSAmJiBvbmUuaXNWYXJhcmdz
KCkgJiYgdHdvLmlzVmFyYXJncygpKSB7CiAJCQkJCQlUeXBlQmluZGluZyBvVHlwZSA9ICgoQXJy
YXlCaW5kaW5nKSBvbmVQYXJhbSkuZWxlbWVudHNUeXBlKCk7CiAJCQkJCQlUeXBlQmluZGluZyBl
VHlwZSA9ICgoQXJyYXlCaW5kaW5nKSB0d29QYXJhbSkuZWxlbWVudHNUeXBlKCk7Ci0JCQkJCQlp
ZiAob1R5cGUgPT0gZVR5cGUgfHwgb1R5cGUuaXNDb21wYXRpYmxlV2l0aChlVHlwZSkpCi0JCQkJ
CQkJcmV0dXJuIHRydWU7IC8vIHNwZWNpYWwgY2FzZSB0byBjaG9vc2UgYmV0d2VlbiAyIHZhcmFy
Z3MgbWV0aG9kcyB3aGVuIHRoZSBsYXN0IGFyZyBpcyBPYmplY3RbXQorCQkJCQkJaWYgKENvbXBp
bGVyT3B0aW9ucy50b2xlcmF0ZUlsbGVnYWxBbWJpZ3VvdXNWYXJhcmdzSW52b2NhdGlvbiAmJiB0
aGlzLmNvbXBpbGVyT3B0aW9ucygpLmNvbXBsaWFuY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50
cy5KREsxXzcpIHsKKwkJCQkJCQlpZiAob25lUGFyYW0gPT0gZVR5cGUgfHwgb25lUGFyYW0uaXND
b21wYXRpYmxlV2l0aChlVHlwZSkpCisJCQkJCQkJCXJldHVybiB0cnVlOyAvLyBzcGVjaWFsIGNh
c2UgdG8gY2hvb3NlIGJldHdlZW4gMiB2YXJhcmdzIG1ldGhvZHMgd2hlbiB0aGUgbGFzdCBhcmcg
aXMgT2JqZWN0W10KKwkJCQkJCX0gZWxzZSB7CisJCQkJCQkJaWYgKG9UeXBlID09IGVUeXBlIHx8
IG9UeXBlLmlzQ29tcGF0aWJsZVdpdGgoZVR5cGUpKQorCQkJCQkJCQlyZXR1cm4gdHJ1ZTsgLy8g
c3BlY2lhbCBjYXNlIHRvIGNob29zZSBiZXR3ZWVuIDIgdmFyYXJncyBtZXRob2RzIHdoZW4gdGhl
IGxhc3QgYXJnIGlzIE9iamVjdFtdCisJCQkJCQl9CiAJCQkJCX0KIAkJCQkJcmV0dXJuIGZhbHNl
OwogCQkJCX0KQEAgLTMwNDMsNiArMzA1MiwxMiBAQAogCQl9CiAKIAkJaWYgKG9uZS5pc1ZhcmFy
Z3MoKSAmJiB0d28uaXNWYXJhcmdzKCkpIHsKKwkJCWlmIChDb21waWxlck9wdGlvbnMudG9sZXJh
dGVJbGxlZ2FsQW1iaWd1b3VzVmFyYXJnc0ludm9jYXRpb24gJiYgdGhpcy5jb21waWxlck9wdGlv
bnMoKS5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV83ICYmIAorCQkJ
CQlvbmVQYXJhbXNMZW5ndGggPiB0d29QYXJhbXNMZW5ndGgpIHsKKwkJCQkvLyBzcGVjaWFsIGNh
c2Ugd2hlbiBhdXRvYm94aW5nIG1ha2VzIChpbnQsIGludC4uLikgYmV0dGVyIHRoYW4gKE9iamVj
dC4uLikgYnV0IG5vdCAoaW50Li4uKSBvciAoSW50ZWdlciwgaW50Li4uKQorCQkJCWlmICgoKEFy
cmF5QmluZGluZykgdHdvUGFyYW1zW3R3b1BhcmFtc0xlbmd0aCAtIDFdKS5lbGVtZW50c1R5cGUo
KS5pZCAhPSBUeXBlSWRzLlRfSmF2YUxhbmdPYmplY3QpCisJCQkJCXJldHVybiBmYWxzZTsKKwkJ
CX0KIAkJCS8vIGNoZWNrIHRoYXQgZWFjaCBwYXJhbWV0ZXIgYmVmb3JlIHRoZSB2YXJhcmcgcGFy
YW1ldGVycyBhcmUgY29tcGF0aWJsZSAobm8gYXV0b2JveGluZyBhbGxvd2VkIGhlcmUpCiAJCQlm
b3IgKGludCBpID0gKG9uZVBhcmFtc0xlbmd0aCA+IHR3b1BhcmFtc0xlbmd0aCA/IHR3b1BhcmFt
c0xlbmd0aCA6IG9uZVBhcmFtc0xlbmd0aCkgLSAyOyBpID49IDA7IGktLSkKIAkJCQlpZiAob25l
UGFyYW1zW2ldICE9IHR3b1BhcmFtc1tpXSAmJiAhb25lUGFyYW1zW2ldLmlzQ29tcGF0aWJsZVdp
dGgodHdvUGFyYW1zW2ldKSkKQEAgLTQwMjcsNyArNDA0Miw4IEBACiAJCWludCBwYXJhbUxlbmd0
aCA9IHBhcmFtZXRlcnMubGVuZ3RoOwogCQlpbnQgYXJnTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0
aDsKIAotCQlpZiAoY29tcGlsZXJPcHRpb25zKCkuc291cmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25z
dGFudHMuSkRLMV81KSB7CisJCUNvbXBpbGVyT3B0aW9ucyBjb21waWxlck9wdGlvbnMgPSBjb21w
aWxlck9wdGlvbnMoKTsKKwkJaWYgKGNvbXBpbGVyT3B0aW9ucy5zb3VyY2VMZXZlbCA8IENsYXNz
RmlsZUNvbnN0YW50cy5KREsxXzUpIHsKIAkJCWlmIChwYXJhbUxlbmd0aCAhPSBhcmdMZW5ndGgp
CiAJCQkJcmV0dXJuIE5PVF9DT01QQVRJQkxFOwogCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBhcmdM
ZW5ndGg7IGkrKykgewpAQCAtNDAzOSw3ICs0MDU1LDExIEBACiAJCQl9CiAJCQlyZXR1cm4gQ09N
UEFUSUJMRTsKIAkJfQotCisJICAgIGlmICh0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzKSB7CisJ
ICAgICAgICBpZiAoQ29tcGlsZXJPcHRpb25zLnRvbGVyYXRlSWxsZWdhbEFtYmlndW91c1ZhcmFy
Z3NJbnZvY2F0aW9uICYmIGNvbXBpbGVyT3B0aW9ucy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0Zp
bGVDb25zdGFudHMuSkRLMV83KSB7CisJICAgICAgICAgICAgdGllYnJlYWtpbmdWYXJhcmdzTWV0
aG9kcyA9IGZhbHNlOworCSAgICAgICAgfQorCSAgICB9CiAJCWludCBsZXZlbCA9IENPTVBBVElC
TEU7IC8vIG5vIGF1dG9ib3hpbmcgb3IgdmFyYXJncyBzdXBwb3J0IG5lZWRlZAogCQlpbnQgbGFz
dEluZGV4ID0gYXJnTGVuZ3RoOwogCQlMb29rdXBFbnZpcm9ubWVudCBlbnYgPSBlbnZpcm9ubWVu
dCgpOwpAQCAtNDA5Niw3ICs0MTE2LDcgQEAKIAkJLy8gb25seSBjYWxsZWQgaWYgZW52Lm9wdGlv
bnMuc291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNQogCQlpZiAoYXJnLmlz
Q29tcGF0aWJsZVdpdGgocGFyYW0pKQogCQkJcmV0dXJuIENPTVBBVElCTEU7Ci0JCWlmICh0aWVC
cmVha2luZ1ZhcmFyZ3NNZXRob2RzKSB7CisJCWlmICh0aWVCcmVha2luZ1ZhcmFyZ3NNZXRob2Rz
ICYmICh0aGlzLmNvbXBpbGVyT3B0aW9ucygpLmNvbXBsaWFuY2VMZXZlbCA+PSBDbGFzc0ZpbGVD
b25zdGFudHMuSkRLMV83IHx8ICFDb21waWxlck9wdGlvbnMudG9sZXJhdGVJbGxlZ2FsQW1iaWd1
b3VzVmFyYXJnc0ludm9jYXRpb24pKSB7CiAJCQkvKiAxNS4xMi4yLjUgQ2hvb3NpbmcgdGhlIE1v
c3QgU3BlY2lmaWMgTWV0aG9kLCAuLi4gT25lIHZhcmlhYmxlIGFyaXR5IG1lbWJlciBtZXRob2Qg
bmFtZWQgbSBpcyBtb3JlIHNwZWNpZmljIHRoYW4KIAkJCSAgIGFub3RoZXIgdmFyaWFibGUgYXJp
dHkgbWVtYmVyIG1ldGhvZCBvZiB0aGUgc2FtZSBuYW1lIGlmIGVpdGhlciAuLi4gT25seSBzdWJ0
eXBlcyByZWxhdGlvbnNoaXAgc2hvdWxkIGJlIHVzZWQuCiAJCQkgICBBY3R1YWxseSB0aGlzIGlz
IHRydWUgZXZlbiBmb3IgZml4ZWQgYXJpdHkgbWV0aG9kcywgYnV0IGluIHByYWN0aWNlIGlzIG5v
dCBhbiBpc3N1ZSBzaW5jZSB3ZSBydW4gdGhlIGFsZ29yaXRobQ==
</data>

          </attachment>
      

    </bug>

</bugzilla>