<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>442245</bug_id>
          
          <creation_ts>2014-08-21 06:59:00 -0400</creation_ts>
          <short_desc>[1.8][compiler?] These source files lead eclipse to hang (even just on copy/paste)</short_desc>
          <delta_ts>2014-10-28 05:17:10 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Mac OS X</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.5 M3</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Daniel Dietrich">daniel.dietrich</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>jarthana</cc>
    
    <cc>lukas.eder</cc>
    
    <cc>manpalat</cc>
    
    <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2441777</commentid>
    <comment_count>0</comment_count>
      <attachid>246188</attachid>
    <who name="Daniel Dietrich">daniel.dietrich</who>
    <bug_when>2014-08-21 06:59:05 -0400</bug_when>
    <thetext>Created attachment 246188
Source files which cause the problem

These two files lead eclipse to hang when building the workspace.
Even if automatic build is turned off and a portion of text is copied to the clipboard within the java editor, eclipse hangs.

Project setup:
- please create a new Java project, source level: java 8
- copy the attached files to src/test

Thanks for your help,

Daniel</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2441780</commentid>
    <comment_count>1</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-08-21 07:16:15 -0400</bug_when>
    <thetext>Bug is reproducible. The workspace freezes and compilation never finishes.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2441787</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-08-21 07:27:35 -0400</bug_when>
    <thetext>I see an interesting stack, when it freezes:

at java.util.HashMap.getEntry(HashMap.java:465)
at java.util.HashMap.containsKey(HashMap.java:449)
at java.util.HashSet.contains(HashSet.java:201)
at org.eclipse.jdt.internal.compiler.lookup.BoundSet.incorporate(BoundSet.java:443)
at org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.solve(InferenceContext18.java:851)
at org.eclipse.jdt.internal.compiler.lookup.ParameterizedGenericMethodBinding.computeCompatibleMethod(ParameterizedGenericMethodBinding.java:118)
at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:739)
at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:695)

Shankha, could you please check, if any of the top methods incorporate, solve ... ever finish (being called over and over again), or if a single invocation runs into non-termination.
TIA</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2441845</commentid>
    <comment_count>3</comment_count>
      <attachid>246199</attachid>
    <who name="Daniel Dietrich">daniel.dietrich</who>
    <bug_when>2014-08-21 08:38:43 -0400</bug_when>
    <thetext>Created attachment 246199
Fixed the source, so that it should compile with javac8 in general. Eclipse still hangs.

I know that the first attachment reproduces the bug but I made a copy &amp; paste mistake of my original code which I fix with this attachment for the sake of completeness.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2441849</commentid>
    <comment_count>4</comment_count>
    <who name="Daniel Dietrich">daniel.dietrich</who>
    <bug_when>2014-08-21 08:41:36 -0400</bug_when>
    <thetext>Please note that the code (attachment 2) compiles fine, if the

static &lt;T, E1, ..., En&gt; Pattern&lt;Tuple2&lt;E1, ..., En&gt;&gt; of(Decomposition&lt;T, Tuple_n&lt;E1, ..., En&gt;&gt; decomposition, E1 e1, ..., En en) // for 1 &lt;= n &lt;= 13

methods of class Pattern are removed.

For each method 1 &lt;= n &lt;= 13 subsequentially added, the compiler gets exponentially slower.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2441862</commentid>
    <comment_count>5</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-08-21 08:59:39 -0400</bug_when>
    <thetext>I will report the findings as asked in Comment 2. 

In reply to Daniel Dietrich from comment #4)
&gt; For each method 1 &lt;= n &lt;= 13 subsequentially added, the compiler gets
&gt; exponentially slower.

Will also check if Bug 434326 solution helps.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2441954</commentid>
    <comment_count>6</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-08-21 10:32:02 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #2)
&gt; Shankha, could you please check, if any of the top methods incorporate,
&gt; solve ... ever finish (being called over and over again), or if a single
&gt; invocation runs into non-termination.

The functions solve and incorporate do finish.

The solution to Bug 434326 (Comment 62 Bug 434326) did not help.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2442015</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-08-21 12:07:02 -0400</bug_when>
    <thetext>(In reply to shankha banerjee from comment #6)
&gt; (In reply to Stephan Herrmann from comment #2)
&gt; &gt; Shankha, could you please check, if any of the top methods incorporate,
&gt; &gt; solve ... ever finish (being called over and over again), or if a single
&gt; &gt; invocation runs into non-termination.
&gt; 
&gt; The functions solve and incorporate do finish.

I&apos;m surprised.

I hope you&apos;ll find the level in the stack that fails to make progress ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2449020</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-09 01:59:16 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #2)

&gt; Shankha, could you please check, if any of the top methods incorporate,
&gt; solve ... ever finish (being called over and over again), or if a single
&gt; invocation runs into non-termination.

incorporate() seems to make progress, but is hampered by boundsCount coming
out as 1058 in this nested loop:

for (int i = 0; i &lt; boundsCount; i++) {
				TypeBound boundI = bounds[i];
				for (int j = i+1; j &lt; boundsCount; j++) {
					TypeBound boundJ = bounds[j];
					if (this.incorporatedBounds.contains(boundI) &amp;&amp; this.incorporatedBounds.contains(boundJ))
						continue;

Stephan, assigning to you to explore what is possible.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2452300</commentid>
    <comment_count>9</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-09-16 07:29:24 -0400</bug_when>
    <thetext>What&apos;s the diagnosis, so far? Is it just *very* expensive due to an unexpected high number of type bounds? Or are we infinitely creating new bounds?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2452362</commentid>
    <comment_count>10</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-16 08:44:54 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #9)
&gt; What&apos;s the diagnosis, so far? Is it just *very* expensive due to an
&gt; unexpected high number of type bounds? Or are we infinitely creating new
&gt; bounds?

Sorry, I didn&apos;t analyze it that closely. Recording impressions, I thought it
was the former, while Shankha thought it was the latter due to the triple
nested nature of the loop.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2452444</commentid>
    <comment_count>11</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-09-16 09:03:51 -0400</bug_when>
    <thetext>For the case:

public static &lt;T1 ... T10&gt; Tuple10&lt;T1 ... T10&gt; of(T1 t1, ...  T10 t10) {
    return new Tuple10&lt;&gt;(t1 ... t10)
}

we are creating new bounds. 

---
We enter the for loop:

BoundSet.java#incorporate(InferenceContext18 context)
Line No: 439 

for (int i = 0; i &lt; boundsCount; i++) {
TypeBound boundI = bounds[i];
for (int j = i+1; j &lt; boundsCount; j++) {

We add a few ConstraintTypeFormula. 

We exit from these two loops and enter the 

while loop at 

Line: 511. 
while (captIter.hasNext()) {


After the while loop finishes we go back to the outer do while loop 
and the whole cycle again repeats.

---</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2452450</commentid>
    <comment_count>12</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-09-16 09:11:34 -0400</bug_when>
    <thetext>(In reply to shankha banerjee from comment #11)
&gt; 
&gt; After the while loop finishes we go back to the outer do while loop 
&gt; and the whole cycle again repeats.
&gt; 
&gt; ---

Thanks, I get an idea of which league we&apos;re playing in:
Incorporation doesn&apos;t reach a fix point.

Doesn&apos;t sound like an easy win for M2.

Reminds me of the section in JLS 18.3 that starts by saying:
&quot;The assertion that incorporation reaches a fixed point oversimplifies the matter slightly. ...&quot; 
:)

OTOH, we might just be failing to recognize redundant additions to the BoundSet.

I&apos;ll take a look for M3.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454572</commentid>
    <comment_count>13</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-21 13:28:47 -0400</bug_when>
    <thetext>Daniel, two questions: what are your expectations here ? I have an experimental
patch that compile this code in 25 seconds. What is the time taken by javac ?
Can the test case be added to eclipse suites ? By posting here in bugzilla, you
are implicitly agreeing to it, but just want to make sure.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454644</commentid>
    <comment_count>14</comment_count>
    <who name="Daniel Dietrich">daniel.dietrich</who>
    <bug_when>2014-09-22 04:00:37 -0400</bug_when>
    <thetext>Hi Srikanth,

thank you. Please feel free to add the test case to the eclipse suites, you may erase the comments and change the code if necessary!

When I read &apos;25 sec&apos; my first impression was, that this takes too long. I&apos;m able to test the compile duration with javac later this day and will come back to you.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454713</commentid>
    <comment_count>15</comment_count>
    <who name="Daniel Dietrich">daniel.dietrich</who>
    <bug_when>2014-09-22 07:06:37 -0400</bug_when>
    <thetext>Srikanth, on my MacBook Pro (Early 2011) it takes less than a second to compile the example (2nd attachment) with javac.

Currently the code does not compile using eclipse, so having a patch that solves this problem is great - even if it takes half a minute to compile two files. A short/mid term goal should be to make the compiler more efficient. Having Java 8 &amp; Lambdas, sooner or later someone else might create parameterized functions with 1 to n parameters.

What do you think?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454721</commentid>
    <comment_count>16</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-22 07:37:46 -0400</bug_when>
    <thetext>(In reply to Daniel Dietrich from comment #15)

&gt; Currently the code does not compile using eclipse, so having a patch that
&gt; solves this problem is great - even if it takes half a minute to compile two
&gt; files. A short/mid term goal should be to make the compiler more efficient.
&gt; Having Java 8 &amp; Lambdas, sooner or later someone else might create
&gt; parameterized functions with 1 to n parameters.
&gt; 
&gt; What do you think?

Sounds good. Presently, we are chasing some very hot correctness issues and
spec clarity issues that require higher priority. So I&apos;ll try to get a fix in
within a week to go from hang -&gt; finish, but not so great situation and then
after the other critical issues are resolved, we can boost the priority of this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2455030</commentid>
    <comment_count>17</comment_count>
    <who name="Daniel Dietrich">daniel.dietrich</who>
    <bug_when>2014-09-22 16:43:21 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #16)
&gt; Sounds good. Presently, we are chasing some very hot correctness issues and
&gt; spec clarity issues that require higher priority. So I&apos;ll try to get a fix in
&gt; within a week to go from hang -&gt; finish, but not so great situation and then
&gt; after the other critical issues are resolved, we can boost the priority of
&gt; this.

Thank you, that&apos;s great! :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2455410</commentid>
    <comment_count>18</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-23 13:02:59 -0400</bug_when>
    <thetext>In this commit: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=c98606727e89fdf50e483c7870bb4651b90d6014

I released the first batch of performance improvements. Now we compile these
files in &lt; 20 seconds. 

Stephan, please glance through the patch at your convenience.

I had to disable NTAT.testNullTypeInference3c for now. This is the sole
failing test and I don&apos;t yet understand how null analysis hooks into G and
why this change that I have reviewed over and over should have a bearing on
that test - 

Q: should TypeBound.equals and hashCode be using nullHints ?

Key ideas:

1. Basically I took the hint in the code &quot;// TODO here and below: better checking
if constraint really added to the boundset (optimization)?&quot; and implemented
support for it.

2. Ironically the device used to speed up was backfiring - Looks like 
j.l.HashSet is too heavy for the purposes of incorporatedBounds tracking - 
I now implement this as a boolean array.

3. Dozens of mini and micro optimizations.

I&apos;ll now try to attack the problem from by cutting down the input size.

Will follow up with a another patch shortly.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2455477</commentid>
    <comment_count>19</comment_count>
      <attachid>247313</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-23 15:07:12 -0400</bug_when>
    <thetext>Created attachment 247313
More experiments

This actually degrades, but may be when I get time I&apos;ll explore further.

What this does is to transform the complexity from O(N ** 2) to O(2MN)
where M is the size of new bounds added and N is set of all bounds.
Assuming we generate fewer and fewer new bounds in each round it would be
a win, but ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2455490</commentid>
    <comment_count>20</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-23 15:33:13 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #19)
&gt; Created attachment 247313 [details]
&gt; More experiments
&gt; 
&gt; This actually degrades, but may be when I get time I&apos;ll explore further.
&gt; 
&gt; What this does is to transform the complexity from O(N ** 2) to O(2MN)
&gt; where M is the size of new bounds added and N is set of all bounds.
&gt; Assuming we generate fewer and fewer new bounds in each round it would be
&gt; a win, but ...

This idea is somewhat similar to the generational garbage collector - we sweep
the type bounds into two sets one with all of them and one with only the new
bounds. The new set must be compared with the all-set while the all-set needs
to be compared with just the new set.

I haven&apos;t fully internalized the rules for incorporation - it appears to be
order sensitive - some earlier failed experiments seem to indicate so (maintain
a flat array in parallel to the three sets representation)

I am out of time for this task, Stephan I&apos;ll assign it back to you, so you can
investigate at your convenience.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2456267</commentid>
    <comment_count>21</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-25 08:54:35 -0400</bug_when>
    <thetext>Stephan, despite assigning to you, I took the liberty of working on this, hope
you don&apos;t mind.

Commit http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=cbb80b4c969d064367ed598ba99f074660c726c6:

    - Follows up on the generational incorporation idea alluded to in
comment#20. Now the incorporation time itself is close to the theoretical/intrinsic
complexity of the algorithm.

   - By maintaining a simple four line cache of most recently reduced formulas
and looking for duplicate generation cuts down the reduction of a 
quarter million (!) constraint formulas on the subject test case.

   - Likewise by maintaining a 4 line cache of recently added bounds, we reduce
the load on Set.add to tell us if there are duplicates.

    - Backs out some silly micro optimizations in TypeBound.hashCode and equals
method that got checked in inadvertently.

Please look through at leisure. Setting comparator to ignoring white spaces would simplify matters.

Two follow ups and one curious observation:

    - The time taken to compile the test case now is ~17 seconds on my machine.
Still not where we want to be, but I am resolving this defect because we already
have bug 430404 that is where all further action is going to be. We need to
look at cutting down the problem size as opposed to speeding up processing of
the input set. The generate a bound set that has &gt; 8000 elements in size and
this is a very demanding algorithm asking for pairwise comparison, which 
results in reduction which results in incorporation which results in reduction
which results in incorporation ... until quiescent state is reached. I&apos;ll grab
the set of bounds and attach it to the other bug.

   - In addition to NTAT.testNullTypeInference3c I have also had to disable
GRT._testBug430686, which for bug 430686 seems to have received some special
treatment. I&apos;ll open a bug to track these failures and close them within a
week.

Now for the curious observation part:

During prototyping the generational incorporator, at at least on two or three
occasions, I had versions that would compile the program within a second or
less. Turned out my still evolving code had some bugs which caused some pairwise
comparisons to be skipped (which showed up failures in our test suite), but
the program itself compiled.

May be we should just solve the darn bound set without bothering to fully
incorporate it and if that fails, do the full job ;-)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472814</commentid>
    <comment_count>22</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-10-28 05:17:10 -0400</bug_when>
    <thetext>Verified for 4.5 M3 using I20141027-2000 build</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>246188</attachid>
            <date>2014-08-21 06:59:00 -0400</date>
            <delta_ts>2014-08-21 06:59:05 -0400</delta_ts>
            <desc>Source files which cause the problem</desc>
            <filename>src.zip</filename>
            <type>application/zip</type>
            <size>3734</size>
            <attacher name="Daniel Dietrich">daniel.dietrich</attacher>
            
              <data encoding="base64">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
AAAEFAAAAFBLBQYAAAAABAAEAE4BAAAyDQAAAAA=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>246199</attachid>
            <date>2014-08-21 08:38:00 -0400</date>
            <delta_ts>2014-08-21 08:38:43 -0400</delta_ts>
            <desc>Fixed the source, so that it should compile with javac8 in general. Eclipse still hangs.</desc>
            <filename>src.zip</filename>
            <type>application/zip</type>
            <size>3702</size>
            <attacher name="Daniel Dietrich">daniel.dietrich</attacher>
            
              <data encoding="base64">UEsDBAoAAAAAAHhkFUUAAAAAAAAAAAAAAAAEABwAc3JjL1VUCQADhMv1U6bn9VN1eAsAAQT2AQAA
BBQAAABQSwMECgAAAAAAz2UVRQAAAAAAAAAAAAAAAAkAHABzcmMvdGVzdC9VVAkAAwbO9VOm5/VT
dXgLAAEE9gEAAAQUAAAAUEsDBBQAAAAIAEx0FUXB9lGnHQMAAPcSAAAVABwAc3JjL3Rlc3QvUGF0
dGVybi5qYXZhVVQJAANQ5/VTeuf1U3V4CwABBPYBAAAEFAAAALVX226bQBB9Nl8xj0mEgsF3BUWK
mrxUlVpFUZ8sIYwnCS0FBOuqUZV/78xCfVlzWbCDtHh3z8yZmTO2tWtdXQE9Fiw9egA8XnlesSgm
OxBKG34MKB0ZpBcZlTS04G3Ps7Ygr6VNsQL47P/288iPXySNRzAZe0sJLnlVLJZeudyC1lJyShOA
T0n6loUvrwKcoT2Gez8OMYL7EEUWBq/MbXlsLPP3rOXu7Vnb+f+1zLbY5my/hAHGOa5hE68xA/GK
cJf6AX2UiAnfMcvDJAbnekixLIPgn/4LgsBc3BhG+CtNMiFX10+bNMK8+LipRewGaNiANfk5Ddio
Hmtwa/Aa10OTemhaD83qoXk9tCD1080qCgMIY4HZsx8gfPMFTWP3EfCPwHidg7S9hb+GMVglSYR+
DGF+l6bk568ivPi6+oGBgOSS6AaP4BPydriZC19QEPfJhCPabbxbSJ4v7jFIKNs8FPSNkfa3sN7f
Y4Y0S0Qi3lK8pKQGgwzFJosh3kTRjTF4P4z3YO9CFN10aas61j6uBH2wAe2DcCXpNREptqXEBJDL
ZVVKNBwlLccttxtS27OpSo8hQKdHlia71WZKY6RkO3L3oIaMFbvKrCnZgUycjQBHPfM32bWxBhpj
pY6xq8CyFs6oup4K+4ZOlAWxIeD4hLpMdm+tjcZEqW/iVpi01Fjjo10n2wNOTizXZAqtkmlMlbKn
FSVIs5bSG/y6ls9ugNMzqGAyjbYSNGaKGrOaqqRpiyItvp1VkT92FoYJAGdn0sdkqk4a0ZgrOs0b
apXmLVpp+J+sF/MAzs8om8l0naWjsVDkW7SUL11aJNTk0JdR6rf3ezyUkekAF2dW02TKXoqyzVA9
rww1NCkcW8TtxKQhsdT2+C+vUmJJSxTDD9DalLz9BefX0SnR1tWq8G6TvjPdR+kv+WnS5zCr1QhT
kp/YDX6pJ2Tb6aRhQdHWl36cTc2RXak9D2g2RwaiSd/DvF6XTBnhHK3il3pHsEfdtS142pp2ArHW
DeQsnZMRaXLKfUazhaYMo/Rxd6M/vlNXXe23N/cnEAXVu/EPUEsDBBQAAAAIACZ0FUUdUNWN1wgA
ACpTAAAUABwAc3JjL3Rlc3QvVHVwbGVzLmphdmFVVAkAAwfn9VMI5/VTdXgLAAEE9gEAAAQUAAAA
7Vzdc6S4EX+2/4qOH648F26MEEIo3o9s7d7Dpa72qrJOnlxFYRvbbNjBYfBebXL7v6clxAwzfGNg
vY6nDINa3a1uof61YCSf/Pgj4OcEzj38AHiy5HlZIbvYVoLmkZ9D0IKyEk/IpNVgQZI972RTKcuK
JysB/M3/7K8jf3Wj1HhYjczeuao8l6WscO7p4qby5FzpVCwAb+O7L0l4c5uCZRIb3vmrMIjgXRik
SXh5K3WfeJJZ2e+dnG/P3snmOi8razOytPbX8DJYrYMruF9dBQmktwG8ufMv8UvXGPDPIFmH8Qqs
pYltnRxi9b/8mwDSYJ2eHh6Gn+7iJIWP6OsyjJcfgiT0o/A//kUUnO5U3qdhtPzt4mNwma4ratZp
Eviflm/jKEKOOGng+aC+sO27+4sovITrcOVHcBn56zWc3d9FwRr+e3h4cJeEn/000KTjBRIPDtLb
JP4dVsHv8Ga9DpIUPfs5SeLkOONaKi3LmyB9738KUObPcAThGlZxCuEqDbCXriCN4SLA4jr1V2mI
TVwtjxanhwdfZaOZSViV4pdSakJ8rVtPgvQ+WWnyMtNwic1UCr84e5VxEnmFOs4g3VEjvdAMr47T
OiXEgDNLa7I2RamOQKpKkFrVei2pF1mwvkk5HlQ3QHdIe41IIqS0ui26acuQPG3t4WHrNu0Subpd
WQepXd28vdO8Ifm6mIAH02awyqpGUyQLpKzaIlayyJC8Xa3Cw9GWObXVXayTnJA61UY6lUYakr+P
oXhwbSxvZOlkMNp5oGyWMpDyatN5remGlOlrPh6udsFtZatxQxle7nrthhSF1K32xm30xpByQzzC
Q2ivRCfWfc+US7WDatczqQFSUe2gaHXQkLJDncSDmDnemt0FNv4qR9uCqNJfpQlVmDXgbnby3FAa
HuS+PJG8D0hPKewI1QUd4aS5J5ROvCA1XUK6d4mh1Dy8X+QpT6PEGiI6TQ8p5XhRk8KJ1bOrDKVr
pP6Sp3xqQOhg+Yl7TrWCFzUzE0KHdKGhFOb9qKeiuiNxAhuubrAkv8LrL8fZtHi5XEKcTZB3LMnm
u7IHDpbYFTlLRvjk3x3H8NMrwPPLl7C6j6IFvIYjeXEEf4F4mcZZe8cLLXKZzbGPt3Pt5cc4XEmW
IwPkn/peHC2qx0Fpvm0CTtWj4FOwSjXFgOKDgJqO73dCpiWKZUcoXv2g8Y9f3sFL+MnlhDHuME5t
QpkjuO3+elqrRpvxy/sPZ2/ev/0ZFWxunymn1wW5nKh6+KuqqZqzbyfnijG/F3kLp7nwX3/7HCRJ
eBVsFeGDAvhJmH7ZkzWbhPSY2N6sHVH9dLIdMYuNrtyvbAwBDpWrvwfrOPrcbHqX+6oePCa4tabJ
bOG6LneI6QhhUVvf2uLz3Bl4pEjNLNo+BOGjXLheegQ1pkPuBmkSuojjKPBXEPz73o/WOj4h1hrC
ax1t0gRNy9WmyX0gNR98hSBa42PidSEy4Y8/4E9YzAdXfK3dWuxpucZWd9RktYXBTl68foXt+yn6
f7yhLCA+LerRz9tL7YfuMkMJ4sUia6Kl92799e3b+Gp/POW6ZfWx1jXS6N5o6zJKtw+14w9VhB7h
2pQT1yHcdYlNSdVQJWqs7lMt8KzSCLYqnruLQ1np0QRLEqwhg7tRaObBbfUf3NaL1wbsj29N7DvE
4YcfqnmsnMcaMwwM0PpGC4WCxi7hsPsKZvSQwIig1DJNYgqXC0zOwuwbEftUCh4txQmtf3XUHi6a
QCWBDomfRqGZ44f2jx+qQqUcQlt63yhSvAcHHWKphZPmnHTsqMODjh95Ba1doq/8MnKC+RNlLqMc
kxIhnFj4NU4E7lNt8OxSXNqtr1YHhKcm2JJgD4nXRqGZ49XuH692HpflkN2pegxR28Jp55z2FPGN
hz1NjBc0d4nz6rf9o8e6Sx1mCtsxbYrPS8zh1kjZtjrW96kMPFZCANb1F40xgEATmCSwIcjQKDQz
MrD+yMAK4V8Gh/3a7wsfWjhZzsmmQhI82HRoUtDeBVHqf6UbfwbBLNeigjiccdtkWCLu/LCyT3XA
c0pg4/T8gXISzNEERxKcISDUKDQzCDn9QcjZhZkyDlUwPFUoauF0ck5nStDCw5kWuAotdAGv5l/t
RwcwRxBKHYfZFmdCWIQw+ljwa5/KweMlVOOdUc0oLmGYB9w0gUsCH4J2jUIzox3vj3a8BGZlwKvm
eca8Fk6ec/Kp0REPPj1CFlrpgpLtC4PGf11LuGMTTpjpMEFxnvfIgXKf6oLnluDT7QufRnHp1DdC
UU1wJcEdAquNQjPDqtsfVt0qyCwjay3bM7h2B9cWTjfndOeAYTzceaC40FIXOO62onGCH5UZd5lt
ynmrZTNGXPsbvNR7OCjvUwV4ogTVYiBUG8W1oI8FsTVBSIIYAuGNQjNDuOgP4aIGm8so3sT5DORT
AHkLp8g5xVyQj4eYD/YLrXVa2dZjiffoCYALQSzXdk2XWsIRpnCdp4P/JS9MdMMsL+QzH5YYjN1F
8482Q+SGmcqyxhWgtQsVG6XmXqloDliqaNZng3LqaON+Th/fNn20cKo18FnXm3OmGgPyBmfLN8Um
OyWdvntqRs881BbUcTH1CG6a3CbUeUJPHnWZp0SX7lUsLScjZSRjd/PS95SaclJmbOMK+dps9ajW
1Q9ZWE8a809FwmoXeM5Z30/OauPd3qZRt090SjbyNPJGi97tdsp0gzZITvCmjTOLWIKY1OGUO8Lh
/7/prkRHB0l5fwqxxk6Dxu4O1e88H+YkZS4ZtDmnWWruFDlgew6x2jJeRZbsJPOcKJ9momzj3dwo
MvpmrG7JTZ4m2LfVv/FO6XX4VvpSjpU+PDDNWqbFhUy0nBFmUZvz5zRbSrMlOrpIytveSOW+t1HS
r7H7bw6eXh7OScpgMmjfX7PU3Kl5wM4/Qjuk2Yrs3FXsOUE/J+g23s2tIpPs8eyYT+Vpov2gAyyo
SOvy/wkm1/6l/pckWeItANPpvtk18HPxscy626ul6pLnp8rAr4f/A1BLAQIeAwoAAAAAAHhkFUUA
AAAAAAAAAAAAAAAEABgAAAAAAAAAEADtQQAAAABzcmMvVVQFAAOEy/VTdXgLAAEE9gEAAAQUAAAA
UEsBAh4DCgAAAAAAz2UVRQAAAAAAAAAAAAAAAAkAGAAAAAAAAAAQAO1BPgAAAHNyYy90ZXN0L1VU
BQADBs71U3V4CwABBPYBAAAEFAAAAFBLAQIeAxQAAAAIAEx0FUXB9lGnHQMAAPcSAAAVABgAAAAA
AAEAAACkgYEAAABzcmMvdGVzdC9QYXR0ZXJuLmphdmFVVAUAA1Dn9VN1eAsAAQT2AQAABBQAAABQ
SwECHgMUAAAACAAmdBVFHVDVjdcIAAAqUwAAFAAYAAAAAAABAAAApIHtAwAAc3JjL3Rlc3QvVHVw
bGVzLmphdmFVVAUAAwfn9VN1eAsAAQT2AQAABBQAAABQSwUGAAAAAAQABABOAQAAEg0AAAAA
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>247313</attachid>
            <date>2014-09-23 15:07:00 -0400</date>
            <delta_ts>2014-09-23 15:07:12 -0400</delta_ts>
            <desc>More experiments</desc>
            <filename>Patch.patch</filename>
            <type>text/plain</type>
            <size>12317</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3RfMV84LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmlj
c1JlZ3Jlc3Npb25UZXN0XzFfOC5qYXZhCmluZGV4IDlmM2E5NTYuLjEzOTdjMTkgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3Rf
MV84LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdy
ZXNzaW9uVGVzdF8xXzguamF2YQpAQCAtMjEsNyArMjEsNyBAQAogcHVibGljIGNsYXNzIEdlbmVy
aWNzUmVncmVzc2lvblRlc3RfMV84IGV4dGVuZHMgQWJzdHJhY3RSZWdyZXNzaW9uVGVzdCB7CiAK
IHN0YXRpYyB7Ci0vLwlURVNUU19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7ICJ0ZXN0QnVnNDM0NDgz
IiB9OworCVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1tdIHsgInRlc3RCdWc0NDIyNDUiIH07CiAv
LwlURVNUU19OVU1CRVJTID0gbmV3IGludFtdIHsgNDAsIDQxLCA0MywgNDUsIDYzLCA2NCB9Owog
Ly8JVEVTVFNfUkFOR0UgPSBuZXcgaW50W10geyAxMSwgLTEgfTsKIH0KZGlmZiAtLWdpdCBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9sb29rdXAvQm91bmRTZXQuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQm91bmRTZXQuamF2YQpp
bmRleCA3YTkyNThmLi4xOGY4YWViIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0JvdW5kU2V0
LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Cb3VuZFNldC5qYXZhCkBAIC00MSw3ICs0MSw2IEBA
CiAJCVNldDxUeXBlQm91bmQ+IHN1YkJvdW5kczsKIAkJVHlwZUJpbmRpbmcJaW5zdGFudGlhdGlv
bjsKIAkJTWFwPEluZmVyZW5jZVZhcmlhYmxlLFR5cGVCb3VuZD4gaW52ZXJzZUJvdW5kczsgLy8g
ZnJvbSByaWdodCBpbmZlcmVuY2UgdmFyaWFibGUgdG8gYm91bmQKLQkJCiAJCXB1YmxpYyBUaHJl
ZVNldHMoKSB7CiAJCQkvLyBlbXB0eSwgdGhlIHNldHMgYXJlIGxhemlseSBpbml0aWFsaXplZAog
CQl9CkBAIC0xNDAsMzEgKzEzOSw4NyBAQAogCQkJcmV0dXJuIGZhbHNlOwogCQl9CiAJCS8qKiBU
b3RhbCBudW1iZXIgb2YgdHlwZSBib3VuZHMgaW4gdGhpcyBjb250YWluZXIuICovCi0JCXB1Ymxp
YyBpbnQgc2l6ZSgpIHsKKwkJcHVibGljIGludCBzaXplKGJvb2xlYW4gbmV3T25seSkgewogCQkJ
aW50IHNpemUgPSAwOwotCQkJaWYgKHRoaXMuc3VwZXJCb3VuZHMgIT0gbnVsbCkKLQkJCQlzaXpl
ICs9IHRoaXMuc3VwZXJCb3VuZHMuc2l6ZSgpOwotCQkJaWYgKHRoaXMuc2FtZUJvdW5kcyAhPSBu
dWxsKQotCQkJCXNpemUgKz0gdGhpcy5zYW1lQm91bmRzLnNpemUoKTsKLQkJCWlmICh0aGlzLnN1
YkJvdW5kcyAhPSBudWxsKQotCQkJCXNpemUgKz0gdGhpcy5zdWJCb3VuZHMuc2l6ZSgpOwotCQkJ
cmV0dXJuIHNpemU7Ci0JCX0KLQkJcHVibGljIGludCBmbGF0dGVuSW50byhUeXBlQm91bmRbXSBj
b2xsZWN0ZWQsIGludCBpZHgpIHsKKwkJCVR5cGVCb3VuZCBbXSBlbXB0eSA9IG5ldyBUeXBlQm91
bmRbMF07CiAJCQlpZiAodGhpcy5zdXBlckJvdW5kcyAhPSBudWxsKSB7Ci0JCQkJaW50IGxlbiA9
IHRoaXMuc3VwZXJCb3VuZHMuc2l6ZSgpOwotCQkJCVN5c3RlbS5hcnJheWNvcHkodGhpcy5zdXBl
ckJvdW5kcy50b0FycmF5KCksIDAsIGNvbGxlY3RlZCwgaWR4LCBsZW4pOwotCQkJCWlkeCArPSBs
ZW47CisJCQkJaWYgKG5ld09ubHkpIHsKKwkJCQkJVHlwZUJvdW5kW10gYXJyYXkgPSB0aGlzLnN1
cGVyQm91bmRzLnRvQXJyYXkoZW1wdHkpOworCQkJCQlmb3IgKGludCBpID0gMCwgbGVuZ3RoID0g
YXJyYXkubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKKwkJCQkJCWlmIChhcnJheVtpXS5pc05l
dykgc2l6ZSsrOworCQkJCQl9CisJCQkJfSBlbHNlIHsKKwkJCQkJc2l6ZSArPSB0aGlzLnN1cGVy
Qm91bmRzLnNpemUoKTsKKwkJCQl9CiAJCQl9CiAJCQlpZiAodGhpcy5zYW1lQm91bmRzICE9IG51
bGwpIHsKLQkJCQlpbnQgbGVuID0gdGhpcy5zYW1lQm91bmRzLnNpemUoKTsKLQkJCQlTeXN0ZW0u
YXJyYXljb3B5KHRoaXMuc2FtZUJvdW5kcy50b0FycmF5KCksIDAsIGNvbGxlY3RlZCwgaWR4LCBs
ZW4pOwotCQkJCWlkeCArPSBsZW47CisJCQkJaWYgKG5ld09ubHkpIHsKKwkJCQkJVHlwZUJvdW5k
W10gYXJyYXkgPSB0aGlzLnNhbWVCb3VuZHMudG9BcnJheShlbXB0eSk7CisJCQkJCWZvciAoaW50
IGkgPSAwLCBsZW5ndGggPSBhcnJheS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgeworCQkJCQkJ
aWYgKGFycmF5W2ldLmlzTmV3KSBzaXplKys7CisJCQkJCX0KKwkJCQl9IGVsc2UgeworCQkJCQlz
aXplICs9IHRoaXMuc2FtZUJvdW5kcy5zaXplKCk7CisJCQkJfQogCQkJfQogCQkJaWYgKHRoaXMu
c3ViQm91bmRzICE9IG51bGwpIHsKLQkJCQlpbnQgbGVuID0gdGhpcy5zdWJCb3VuZHMuc2l6ZSgp
OwotCQkJCVN5c3RlbS5hcnJheWNvcHkodGhpcy5zdWJCb3VuZHMudG9BcnJheSgpLCAwLCBjb2xs
ZWN0ZWQsIGlkeCwgbGVuKTsKLQkJCQlpZHggKz0gbGVuOworCQkJCWlmIChuZXdPbmx5KSB7CisJ
CQkJCVR5cGVCb3VuZFtdIGFycmF5ID0gdGhpcy5zdWJCb3VuZHMudG9BcnJheShlbXB0eSk7CisJ
CQkJCWZvciAoaW50IGkgPSAwLCBsZW5ndGggPSBhcnJheS5sZW5ndGg7IGkgPCBsZW5ndGg7IGkr
KykgeworCQkJCQkJaWYgKGFycmF5W2ldLmlzTmV3KSBzaXplKys7CisJCQkJCX0KKwkJCQl9IGVs
c2UgeworCQkJCQlzaXplICs9IHRoaXMuc3ViQm91bmRzLnNpemUoKTsKKwkJCQl9CisJCQl9CisJ
CQlyZXR1cm4gc2l6ZTsKKwkJfQorCQlwdWJsaWMgaW50IGZsYXR0ZW5JbnRvKFR5cGVCb3VuZFtd
IGNvbGxlY3RlZCwgaW50IGlkeCwgYm9vbGVhbiBuZXdPbmx5KSB7CisJCQlUeXBlQm91bmQgW10g
ZW1wdHkgPSBuZXcgVHlwZUJvdW5kWzBdOworCQkJaWYgKHRoaXMuc3VwZXJCb3VuZHMgIT0gbnVs
bCkgeworCQkJCWlmIChuZXdPbmx5KSB7CisJCQkJCVR5cGVCb3VuZFtdIGFycmF5ID0gdGhpcy5z
dXBlckJvdW5kcy50b0FycmF5KGVtcHR5KTsKKwkJCQkJZm9yIChpbnQgaSA9IDAsIGxlbmd0aCA9
IGFycmF5Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7CisJCQkJCQlpZiAoYXJyYXlbaV0uaXNO
ZXcpIHsgCisJCQkJCQkJY29sbGVjdGVkW2lkeCsrXSA9IGFycmF5W2ldOworCQkJCQkJCWFycmF5
W2ldLmlzTmV3ID0gZmFsc2U7CisJCQkJCQl9CisJCQkJCX0KKwkJCQl9IGVsc2UgeworCQkJCQlp
bnQgbGVuID0gdGhpcy5zdXBlckJvdW5kcy5zaXplKCk7CisJCQkJCVN5c3RlbS5hcnJheWNvcHko
dGhpcy5zdXBlckJvdW5kcy50b0FycmF5KCksIDAsIGNvbGxlY3RlZCwgaWR4LCBsZW4pOworCQkJ
CQlpZHggKz0gbGVuOworCQkJCX0KKwkJCX0KKwkJCWlmICh0aGlzLnNhbWVCb3VuZHMgIT0gbnVs
bCkgeworCQkJCWlmIChuZXdPbmx5KSB7CisJCQkJCVR5cGVCb3VuZFtdIGFycmF5ID0gdGhpcy5z
YW1lQm91bmRzLnRvQXJyYXkoZW1wdHkpOworCQkJCQlmb3IgKGludCBpID0gMCwgbGVuZ3RoID0g
YXJyYXkubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKKwkJCQkJCWlmIChhcnJheVtpXS5pc05l
dykgeyAKKwkJCQkJCQljb2xsZWN0ZWRbaWR4KytdID0gYXJyYXlbaV07CisJCQkJCQkJYXJyYXlb
aV0uaXNOZXcgPSBmYWxzZTsKKwkJCQkJCX0KKwkJCQkJfQorCQkJCX0gZWxzZSB7CisJCQkJCWlu
dCBsZW4gPSB0aGlzLnNhbWVCb3VuZHMuc2l6ZSgpOworCQkJCQlTeXN0ZW0uYXJyYXljb3B5KHRo
aXMuc2FtZUJvdW5kcy50b0FycmF5KCksIDAsIGNvbGxlY3RlZCwgaWR4LCBsZW4pOworCQkJCQlp
ZHggKz0gbGVuOworCQkJCX0KKwkJCX0KKwkJCWlmICh0aGlzLnN1YkJvdW5kcyAhPSBudWxsKSB7
CisJCQkJaWYgKG5ld09ubHkpIHsKKwkJCQkJVHlwZUJvdW5kW10gYXJyYXkgPSB0aGlzLnN1YkJv
dW5kcy50b0FycmF5KGVtcHR5KTsKKwkJCQkJZm9yIChpbnQgaSA9IDAsIGxlbmd0aCA9IGFycmF5
Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7CisJCQkJCQlpZiAoYXJyYXlbaV0uaXNOZXcpIHsg
CisJCQkJCQkJY29sbGVjdGVkW2lkeCsrXSA9IGFycmF5W2ldOworCQkJCQkJCWFycmF5W2ldLmlz
TmV3ID0gZmFsc2U7CisJCQkJCQl9CisJCQkJCX0KKwkJCQl9IGVsc2UgeworCQkJCQlpbnQgbGVu
ID0gdGhpcy5zdWJCb3VuZHMuc2l6ZSgpOworCQkJCQlTeXN0ZW0uYXJyYXljb3B5KHRoaXMuc3Vi
Qm91bmRzLnRvQXJyYXkoKSwgMCwgY29sbGVjdGVkLCBpZHgsIGxlbik7CisJCQkJCWlkeCArPSBs
ZW47CisJCQkJfQogCQkJfQogCQkJcmV0dXJuIGlkeDsKIAkJfQpAQCAtMzAyLDEwICszNTcsNyBA
QAogCS8qKiAxOC4xLjMgYnVsbGV0IDU6IHRocm93cyDOsSAqLwogCVNldDxJbmZlcmVuY2VWYXJp
YWJsZT4gaW5UaHJvd3MgPSBuZXcgSGFzaFNldDxJbmZlcmVuY2VWYXJpYWJsZT4oKTsKIAotCS8v
IGF2b2lkIGF0dGVtcHRzIHRvIGluY29ycG9yYXRlIHRoZSBzYW1lIHBhaXIgb2YgdHlwZSBib3Vu
ZHMgbW9yZSB0aGFuIG9uY2U6Ci0JcHJpdmF0ZSBib29sZWFuIFtdIGluY29ycG9yYXRlZEJvdW5k
cyA9IG5ldyBib29sZWFuWzE2XTsKIAlwcml2YXRlIGJvb2xlYW4gaXNJbmNvcnBvcmF0ZWQgPSB0
cnVlOwotCXByaXZhdGUgaW50IGlkID0gMDsKIAkKIAlwdWJsaWMgQm91bmRTZXQoKSB7fQogCQpA
QCAtMzI0LDE4ICszNzYsMjEgQEAKIAkJfQogCX0KIAotCS8qKiBBbnN3ZXIgYSBmbGF0IHJlcHJl
c2VudGF0aW9uIG9mIHRoaXMgQm91bmRTZXQuICovCi0JcHVibGljIFR5cGVCb3VuZFtdIGZsYXR0
ZW4oKSB7CisJLyoqIEFuc3dlciBhIGZsYXQgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBCb3VuZFNl
dC4gV2hlbiByZXF1ZXN0ZWQgcmV0dXJuIGp1c3QgdGhlIGJvdW5kcyBvZiB0aG9zZSB2YXJpYWJs
ZSB0aGF0IGhhdmUgYmVlbiBjaGFuZ2VkIHNpbmNlIHRoZSBsYXN0IGZsYXR0ZW5pbmcgb3BlcmF0
aW9uLiAqLworCXB1YmxpYyBUeXBlQm91bmRbXSBmbGF0dGVuKGJvb2xlYW4gbmV3T25seSkgewog
CQlpbnQgc2l6ZSA9IDA7CiAJCUl0ZXJhdG9yPFRocmVlU2V0cz4gb3V0ZXJJdCA9IHRoaXMuYm91
bmRzUGVyVmFyaWFibGUudmFsdWVzKCkuaXRlcmF0b3IoKTsKLQkJd2hpbGUgKG91dGVySXQuaGFz
TmV4dCgpKQotCQkJc2l6ZSArPSBvdXRlckl0Lm5leHQoKS5zaXplKCk7CisJCXdoaWxlIChvdXRl
ckl0Lmhhc05leHQoKSkgeworCQkJc2l6ZSArPSBvdXRlckl0Lm5leHQoKS5zaXplKG5ld09ubHkp
OworCQl9CiAJCVR5cGVCb3VuZFtdIGNvbGxlY3RlZCA9IG5ldyBUeXBlQm91bmRbc2l6ZV07CiAJ
CWlmIChzaXplID09IDApIHJldHVybiBjb2xsZWN0ZWQ7CiAJCW91dGVySXQgPSB0aGlzLmJvdW5k
c1BlclZhcmlhYmxlLnZhbHVlcygpLml0ZXJhdG9yKCk7CiAJCWludCBpZHggPSAwOwotCQl3aGls
ZSAob3V0ZXJJdC5oYXNOZXh0KCkpCi0JCQlpZHggPSBvdXRlckl0Lm5leHQoKS5mbGF0dGVuSW50
byhjb2xsZWN0ZWQsIGlkeCk7CisJCXdoaWxlIChvdXRlckl0Lmhhc05leHQoKSkgeworCQkJaWR4
ID0gb3V0ZXJJdC5uZXh0KCkuZmxhdHRlbkludG8oY29sbGVjdGVkLCBpZHgsIG5ld09ubHkpOwor
CQkJCisJCX0KIAkJcmV0dXJuIGNvbGxlY3RlZDsKIAl9CiAKQEAgLTM1MywxOSArNDA4LDIxIEBA
CiAJCWNvcHkuaW5UaHJvd3MuYWRkQWxsKHRoaXMuaW5UaHJvd3MpOwogCQljb3B5LmNhcHR1cmVz
LnB1dEFsbCh0aGlzLmNhcHR1cmVzKTsKIAkJY29weS5pc0luY29ycG9yYXRlZCA9IHRoaXMuaXNJ
bmNvcnBvcmF0ZWQ7Ci0JCVN5c3RlbS5hcnJheWNvcHkodGhpcy5pbmNvcnBvcmF0ZWRCb3VuZHMs
IDAsIGNvcHkuaW5jb3Jwb3JhdGVkQm91bmRzID0gbmV3IGJvb2xlYW5bdGhpcy5pbmNvcnBvcmF0
ZWRCb3VuZHMubGVuZ3RoXSwgMCwgdGhpcy5pbmNvcnBvcmF0ZWRCb3VuZHMubGVuZ3RoKTsKLQkJ
Y29weS5pZCA9IHRoaXMuaWQ7CiAJCXJldHVybiBjb3B5OwogCX0KIAogCXB1YmxpYyB2b2lkIGFk
ZEJvdW5kKFR5cGVCb3VuZCBib3VuZCwgTG9va3VwRW52aXJvbm1lbnQgZW52aXJvbm1lbnQpIHsK
KwkJaWYgKGJvdW5kLnJlbGF0aW9uID09IFJlZHVjdGlvblJlc3VsdC5TVUJUWVBFICYmIGJvdW5k
LnJpZ2h0LmlkID09IFR5cGVJZHMuVF9KYXZhTGFuZ09iamVjdCkKKwkJCXJldHVybjsKKwkJaWYg
KGJvdW5kLmxlZnQgPT0gYm91bmQucmlnaHQpIC8vJElERU5USVRZLUNPTVBBUklTT04kCisJCQly
ZXR1cm47CiAJCUluZmVyZW5jZVZhcmlhYmxlIHZhcmlhYmxlID0gYm91bmQubGVmdC5wcm90b3R5
cGUoKTsKIAkJVGhyZWVTZXRzIHRocmVlID0gdGhpcy5ib3VuZHNQZXJWYXJpYWJsZS5nZXQodmFy
aWFibGUpOwogCQlpZiAodGhyZWUgPT0gbnVsbCkKIAkJCXRoaXMuYm91bmRzUGVyVmFyaWFibGUu
cHV0KHZhcmlhYmxlLCAodGhyZWUgPSBuZXcgVGhyZWVTZXRzKCkpKTsKIAkJaWYgKHRocmVlLmFk
ZEJvdW5kKGJvdW5kKSkgewogCQkJdGhpcy5pc0luY29ycG9yYXRlZCA9IGZhbHNlOwotCQkJYm91
bmQuaWQgPSB0aGlzLmlkKys7CisJCQlib3VuZC5pc05ldyA9IHRydWU7CiAJCQkvLyBjaGVjayBp
ZiB0aGlzIG1ha2VzIHRoZSBpbmZlcmVuY2UgdmFyaWFibGUgaW5zdGFudGlhdGVkOgogCQkJVHlw
ZUJpbmRpbmcgdHlwZUJpbmRpbmcgPSBib3VuZC5yaWdodDsKIAkJCWlmIChib3VuZC5yZWxhdGlv
biA9PSBSZWR1Y3Rpb25SZXN1bHQuU0FNRSAmJiB0eXBlQmluZGluZy5pc1Byb3BlclR5cGUodHJ1
ZSkpCkBAIC00MjIsNiArNDc5LDMxIEBACiAJCXJldHVybiBudW07CiAJfQogCisJYm9vbGVhbiBp
bmNvcnBvcmF0ZShJbmZlcmVuY2VDb250ZXh0MTggY29udGV4dCkgdGhyb3dzIEluZmVyZW5jZUZh
aWx1cmVFeGNlcHRpb24geworCQkKKwkJaWYgKHRoaXMuaXNJbmNvcnBvcmF0ZWQpCisJCQlyZXR1
cm4gdHJ1ZTsKKwkJCisJCWRvIHsKKwkJCXRoaXMuaXNJbmNvcnBvcmF0ZWQgPSB0cnVlOworCQkJ
Ly8gVXNlIGEgZmxhdHRlbmVkIGNvcHkgdG8gYWxsb3dzIHVzIHRvIGluc2VydCBtb3JlIGJvdW5k
cyBkdXJpbmcgdGhlIHByb2Nlc3Mgd2l0aG91dCBkaXN0dXJiaW5nIHRoZSBjdXJyZW50IHJvdW5k
IG9mIGluY29ycG9yYXRpb246CisJCQkKKwkJCVR5cGVCb3VuZCBbXSBhbGwgPSBmbGF0dGVuKGZh
bHNlKTsKKwkJCVR5cGVCb3VuZCBbXSBtdXRhbnRzID0gZmxhdHRlbih0cnVlKTsKKwkJCisvLwkJ
CVN5c3RlbS5vdXQucHJpbnRsbigiU2l6ZSBvZiBhbGwgPSAiICsgYWxsLmxlbmd0aCk7IC8vJE5P
Ti1OTFMtMSQKKy8vCQkJU3lzdGVtLm91dC5wcmludGxuKCJTaXplIG9mIG11dGFudHMgPSAiICsg
bXV0YW50cy5sZW5ndGgpOyAvLyROT04tTkxTLTEkCisJCQkKKwkJCWlmICghaW5jb3Jwb3JhdGUo
Y29udGV4dCwgYWxsLCBtdXRhbnRzKSkKKwkJCQlyZXR1cm4gZmFsc2U7CisJCQkKKwkJCWlmICgh
aW5jb3Jwb3JhdGUoY29udGV4dCwgbXV0YW50cywgYWxsKSkKKwkJCQlyZXR1cm4gZmFsc2U7CisJ
CQorCQl9IHdoaWxlICghdGhpcy5pc0luY29ycG9yYXRlZCk7CisJCQorCQlyZXR1cm4gdHJ1ZTsK
Kwl9CiAJLyoqCiAJICogPGI+SkxTIDE4LjM6PC9iPiBUcnkgdG8gaW5mZXIgbmV3IGNvbnN0cmFp
bnRzIGZyb20gcGFpcnMgb2YgZXhpc3RpbmcgdHlwZSBib3VuZHMuCiAJICogRWFjaCBuZXcgY29u
c3RyYWludCBpcyBmaXJzdCByZWR1Y2VkIGFuZCBjaGVja2VkIGZvciBUUlVFIG9yIEZBTFNFLCB3
aGljaCB3aWxsCkBAIC00MzAsMjUgKzUxMiwxNyBAQAogCSAqIEByZXR1cm4gZmFsc2UgaWYgYW55
IGNvbnN0cmFpbnQgcmVzb2x2ZWQgdG8gZmFsc2UsIHRydWUgb3RoZXJ3aXNlICAKIAkgKiBAdGhy
b3dzIEluZmVyZW5jZUZhaWx1cmVFeGNlcHRpb24gYSBjb21waWxlIGVycm9yIGhhcyBiZWVuIGRl
dGVjdGVkIGR1cmluZyBpbmZlcmVuY2UKIAkgKi8KLQlib29sZWFuIGluY29ycG9yYXRlKEluZmVy
ZW5jZUNvbnRleHQxOCBjb250ZXh0KSB0aHJvd3MgSW5mZXJlbmNlRmFpbHVyZUV4Y2VwdGlvbiB7
Ci0JCWlmICh0aGlzLmlzSW5jb3Jwb3JhdGVkKQotCQkJcmV0dXJuIHRydWU7CisJYm9vbGVhbiBp
bmNvcnBvcmF0ZShJbmZlcmVuY2VDb250ZXh0MTggY29udGV4dCwgVHlwZUJvdW5kIFtdIGZpcnN0
LCBUeXBlQm91bmRbXSBuZXh0KSB0aHJvd3MgSW5mZXJlbmNlRmFpbHVyZUV4Y2VwdGlvbiB7CiAJ
CWJvb2xlYW4gYW5hbHl6ZU51bGwgPSBjb250ZXh0LmVudmlyb25tZW50Lmdsb2JhbE9wdGlvbnMu
aXNBbm5vdGF0aW9uQmFzZWROdWxsQW5hbHlzaXNFbmFibGVkOwogCQlkbyB7Ci0JCQl0aGlzLmlz
SW5jb3Jwb3JhdGVkID0gdHJ1ZTsKLQkJCS8vIHVzaW5nIGEgZmxhdHRlbmVkIGNvcHkgYWxzbyBh
bGxvd3MgdXMgdG8gaW5zZXJ0IG1vcmUgYm91bmRzIGR1cmluZyB0aGUgcHJvY2VzcwotCQkJLy8g
d2l0aG91dCBkaXN0dXJiaW5nIHRoZSBjdXJyZW50IHJvdW5kIG9mIGluY29ycG9yYXRpb246Ci0J
CQlUeXBlQm91bmRbXSBib3VuZHMgPSBmbGF0dGVuKCk7Ci0JCQlpbnQgYm91bmRzQ291bnQgPSBi
b3VuZHMubGVuZ3RoOwotCQkJaWYgKGJvdW5kc0NvdW50IDwgMikKLQkJCQlyZXR1cm4gdHJ1ZTsK
KwkJCWludCBmaXJzdEJvdW5kc0NvdW50ID0gZmlyc3QubGVuZ3RoOworCQkJaW50IG5leHRib3Vu
ZHNDb3VudCA9IG5leHQubGVuZ3RoOwogCQkJLy8gY2hlY2sgZWFjaCBwYWlyOgotCQkJZm9yIChp
bnQgaSA9IDA7IGkgPCBib3VuZHNDb3VudDsgaSsrKSB7Ci0JCQkJVHlwZUJvdW5kIGJvdW5kSSA9
IGJvdW5kc1tpXTsKLQkJCQlmaW5hbCBib29sZWFuIHNldEhhc0kgPSBib3VuZEkuaWQgPCB0aGlz
LmluY29ycG9yYXRlZEJvdW5kcy5sZW5ndGggJiYgdGhpcy5pbmNvcnBvcmF0ZWRCb3VuZHNbYm91
bmRJLmlkXSA9PSB0cnVlOwotCQkJCWZvciAoaW50IGogPSBpKzE7IGogPCBib3VuZHNDb3VudDsg
aisrKSB7Ci0JCQkJCVR5cGVCb3VuZCBib3VuZEogPSBib3VuZHNbal07Ci0JCQkJCWlmIChzZXRI
YXNJICYmIGJvdW5kSi5pZCA8IHRoaXMuaW5jb3Jwb3JhdGVkQm91bmRzLmxlbmd0aCAmJiB0aGlz
LmluY29ycG9yYXRlZEJvdW5kc1tib3VuZEouaWRdID09IHRydWUpCisJCQlmb3IgKGludCBpID0g
MDsgaSA8IGZpcnN0Qm91bmRzQ291bnQ7IGkrKykgeworCQkJCVR5cGVCb3VuZCBib3VuZEkgPSBm
aXJzdFtpXTsKKwkJCQlmb3IgKGludCBqID0gMDsgaiA8IG5leHRib3VuZHNDb3VudDsgaisrKSB7
CisJCQkJCVR5cGVCb3VuZCBib3VuZEogPSBuZXh0W2pdOworCQkJCQlpZiAoYm91bmRJID09IGJv
dW5kSikKIAkJCQkJCWNvbnRpbnVlOwogCQkJCQlDb25zdHJhaW50VHlwZUZvcm11bGEgbmV3Q29u
c3RyYWludCA9IG51bGw7CiAJCQkJCWJvb2xlYW4gZGVyaXZlVHlwZUFyZ3VtZW50Q29uc3RyYWlu
dHMgPSBmYWxzZTsKQEAgLTUwOSwxMiArNTgzLDYgQEAKIAkJCQkJCQkJcmV0dXJuIGZhbHNlOwog
CQkJCQkJfQogCQkJCQl9Ci0JCQkJfQotCQkJCWlmICghc2V0SGFzSSkgewotCQkJCQlpbnQgbGVu
Z3RoID0gdGhpcy5pbmNvcnBvcmF0ZWRCb3VuZHMubGVuZ3RoOwotCQkJCQlpZiAoYm91bmRJLmlk
ID49IGxlbmd0aCkKLQkJCQkJCVN5c3RlbS5hcnJheWNvcHkodGhpcy5pbmNvcnBvcmF0ZWRCb3Vu
ZHMsIDAsIHRoaXMuaW5jb3Jwb3JhdGVkQm91bmRzID0gbmV3IGJvb2xlYW5bYm91bmRJLmlkICog
Ml0sIDAsIGxlbmd0aCk7Ci0JCQkJCXRoaXMuaW5jb3Jwb3JhdGVkQm91bmRzW2JvdW5kSS5pZF0g
PSB0cnVlOwogCQkJCX0KIAkJCX0KIAkJCS8qIFRPRE86IGFyZSB3ZSBzdXJlIHRoaXMgd2lsbCBh
bHdheXMgdGVybWluYXRlPyBDZi4gZS5nLiAoRGlzY3Vzc2lvbiBpbiAxOC4zKToKQEAgLTYxMSw3
ICs2NzksNyBAQAogCQkJCX0KIAkJCX0KIAkJCXRoaXMuY2FwdHVyZXMuY2xlYXIoKTsKLQkJfSB3
aGlsZSAoIXRoaXMuaXNJbmNvcnBvcmF0ZWQpOworCQl9IHdoaWxlIChmYWxzZSk7CiAJCXJldHVy
biB0cnVlOwogCX0KIApAQCAtODgwLDcgKzk0OCw3IEBACiAJLy8gZGVidWdnaW5nOgogCXB1Ymxp
YyBTdHJpbmcgdG9TdHJpbmcoKSB7CiAJCVN0cmluZ0J1ZmZlciBidWYgPSBuZXcgU3RyaW5nQnVm
ZmVyKCJUeXBlIEJvdW5kczpcbiIpOyAvLyROT04tTkxTLTEkCi0JCVR5cGVCb3VuZFtdIGZsYXR0
ZW5lZCA9IGZsYXR0ZW4oKTsKKwkJVHlwZUJvdW5kW10gZmxhdHRlbmVkID0gZmxhdHRlbihmYWxz
ZSk7CiAJCWZvciAoaW50IGkgPSAwOyBpIDwgZmxhdHRlbmVkLmxlbmd0aDsgaSsrKSB7CiAJCQli
dWYuYXBwZW5kKCdcdCcpLmFwcGVuZChmbGF0dGVuZWRbaV0udG9TdHJpbmcoKSkuYXBwZW5kKCdc
bicpOwogCQl9CkBAIC05MDgsNiArOTc2LDggQEAKIAkJaWYgKHRhcmdldFR5cGUuaXNCYXNlVHlw
ZSgpKSByZXR1cm4gZmFsc2U7CiAJCWlmIChJbmZlcmVuY2VDb250ZXh0MTgucGFyYW1ldGVyaXpl
ZFdpdGhXaWxkY2FyZCh0YXJnZXRUeXBlKSAhPSBudWxsKSByZXR1cm4gZmFsc2U7CiAJCVRocmVl
U2V0cyB0cyA9IHRoaXMuYm91bmRzUGVyVmFyaWFibGUuZ2V0KGFscGhhLnByb3RvdHlwZSgpKTsK
KwkJaWYgKHRzID09IG51bGwpCisJCQlyZXR1cm4gZmFsc2U7CiAJCWlmICh0cy5zYW1lQm91bmRz
ICE9IG51bGwpIHsKIAkJCUl0ZXJhdG9yPFR5cGVCb3VuZD4gYm91bmRzID0gdHMuc2FtZUJvdW5k
cy5pdGVyYXRvcigpOwogCQkJd2hpbGUgKGJvdW5kcy5oYXNOZXh0KCkpIHsKQEAgLTk0OSw2ICsx
MDE5LDggQEAKIAkJaWYgKCF0YXJnZXRUeXBlLmlzUGFyYW1ldGVyaXplZFR5cGUoKSkgcmV0dXJu
IGZhbHNlOwogCQlUeXBlQmluZGluZyBnID0gdGFyZ2V0VHlwZS5vcmlnaW5hbCgpOwogCQlUaHJl
ZVNldHMgdHMgPSB0aGlzLmJvdW5kc1BlclZhcmlhYmxlLmdldChhbHBoYS5wcm90b3R5cGUoKSk7
CisJCWlmICh0cyA9PSBudWxsKQorCQkJcmV0dXJuIGZhbHNlOwogCQlJdGVyYXRvcjxUeXBlQm91
bmQ+IGJvdW5kSXRlcmF0b3I7CiAJCWlmICh0cy5zYW1lQm91bmRzICE9IG51bGwpIHsKIAkJCWJv
dW5kSXRlcmF0b3IgPSB0cy5zYW1lQm91bmRzLml0ZXJhdG9yKCk7CmRpZmYgLS1naXQgYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvbG9va3VwL1R5cGVCb3VuZC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9UeXBlQm91bmQuamF2YQpp
bmRleCBiMDg1NGYzLi4zYThmN2I3IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1R5cGVCb3Vu
ZC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvVHlwZUJvdW5kLmphdmEKQEAgLTI2LDEwICsyNiwx
MCBAQAogCS8vIGhlcmUgd2UgYWNjdW11bGF0ZSBudWxsIHRhZ0JpdHMgZnJvbSBhbnkgdHlwZXMg
dGhhdCBoYXZlIGJlZW4gcmVsYXRlZCB0byB0aGlzIHR5cGUgYm91bmQgZHVyaW5nIGluY29ycG9y
YXRpb246CiAJbG9uZyBudWxsSGludHM7CiAJCi0JaW50IGlkOyAvLyBhc3NpZ25lZCBieSB0aGUg
Qm91bmRTZXQgb2Ygd2hpY2ggdGhpcyBpcyBhbiBlbGVtZW50LgotCiAJcHJpdmF0ZSBib29sZWFu
IGhhdmVIYXNoQ29kZSA9IGZhbHNlOwogCXByaXZhdGUgaW50IGhhc2hDb2RlOworCisJcHVibGlj
IGJvb2xlYW4gaXNOZXc7CiAJCiAJc3RhdGljIFR5cGVCb3VuZCBjcmVhdGVCb3VuZE9yRGVwZW5k
ZW5jeShJbmZlcmVuY2VTdWJzdGl0dXRpb24gdGhldGEsIFR5cGVCaW5kaW5nIHR5cGUsIEluZmVy
ZW5jZVZhcmlhYmxlIHZhcmlhYmxlKSB7CiAgICAgICAgIC8vIFBhcnQgb2YgSkxTOCBzZWN0IDE4
LjEuMzo=
</data>

          </attachment>
      

    </bug>

</bugzilla>