<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>383608</bug_id>
          
          <creation_ts>2012-06-27 03:18:00 -0400</creation_ts>
          <short_desc>[1.8][compiler] Test failures need to be investigated</short_desc>
          <delta_ts>2015-04-19 23:50:06 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>NEW</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>4.6</target_milestone>
          <dependson>381121</dependson>
    
    <dependson>383596</dependson>
    
    <dependson>383600</dependson>
    
    <dependson>399452</dependson>
    
    <dependson>403705</dependson>
    
    <dependson>410402</dependson>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Manoj Palat Away Until May 11 2015">manpalat</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>anchakrk</cc>
    
    <cc>jarthana</cc>
    
    <cc>jesper</cc>
    
    <cc>shankhba</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2129542</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-06-27 03:18:13 -0400</bug_when>
    <thetext>BETA_JAVA8:

Commit http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=9cee1a1ab489dcab686c4840c5cbf41450bb5e75 has disabled
the lists of tests below on a temporary basis. These failures need
to be investigated. 

At a first glance, all looks well - the &quot;failures&quot; are due to syntax error
recovery taking a different repair path. This was always grammar sensitive
and the recent changes due to JSR308 have been extensive. In most of the scenarios, we are likely to simply remaster the test, i.e after validating
that the new diagnostics are correct, simply make the new actual output the 
expected output.

Here is one example of a failure: The test expects

&quot;ERROR in test\X.java (at line 33)\n
	public String foo(java.util.Vector ) {\n
	                            ^^^^^^\n
Syntax error on token &quot;Vector&quot;, VariableDeclaratorId expected after this token&quot;

as the diagnostic, while the actual message is:

 ERROR in test\X.java (at line 33)\n
	public String foo(java.util.Vector ) {\n
	                            ^^^^^^\n
Syntax error, insert &quot;VariableDeclaratorId&quot; to complete FormalParameterList

// ----------------------

NegativeTypeAnnotationTest._test031()
NegativeTypeAnnotationTest._test032()
NegativeTypeAnnotationTest._test033()


NegativeTest._test126()
NegativeTest._test045()

JavadocTestMixed._test033()

GenericTypeTest._test0068()
GenericTypeTest._test0083()
GenericTypeTest._test1097()
GenericTypeTest._test1403()
GenericTypeTest._test0080()
GenericTypeTest._test0932()


AnnotationTest._testBug366003b()
AnnotationTest._testBug366003c()
AnnotationTest._testBug366003d()
AnnotationTest._testBug366003()

LambdaExpressionsNegativeTest._test004()
LambdaExpressionsNegativeTest._test006()

DietRecoveryTest._test77()
DietRecoveryTest._test99()
DietRecoveryTest._test75()
DietRecoveryTest._test32()
DietRecoveryTest._test124()

SyntaxErrorTest._test03()
SyntaxErrorTest._test06()

ParserTest._test003()
ParserTest._test006()
ParserTest._test011()

ComplianceDiagnoseTest._test0029()
ComplianceDiagnoseTest._test0041()
ComplianceDiagnoseTest._test0040()
ComplianceDiagnoseTest._test0032()
ComplianceDiagnoseTest._test0038()

ASTConverterTestAST3_2._test0642()
ASTConverterTestAST3_2._test0652()
ASTConverterTestAST3_2._test0658()

ASTConverterRecoveryTest._test0014()

ASTConverterTestAST4_2._test0642()
ASTConverterTestAST4_2._test0652()
ASTConverterTestAST4_2._test0658()


Work on this should be started only after bug 383600, bug 383596 and
bug 381121 are closed since these require grammar changes and could
cause further ripples.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2129618</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-06-27 05:27:13 -0400</bug_when>
    <thetext>These commits by David Audel may help. Parts of these fixes may already
have been released (e.g java.g changes) and parts may not have been (tests).

(1) http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=JSR_308&amp;id=593d178cfd4000ccacf0da2cf21f07f18d813468

(2) http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=JSR_308&amp;id=1c79c3bc7315340e05be1209e9e7d824c9142fe5

(3) http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=JSR_308&amp;id=6b4939c6b2212c7b561914f9af8d41014920a1c8

(4) http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=JSR_308&amp;id=38e974f4d4a6e725f6e1f13ce21c7ddcadaadcf4

Once all the grammar changes are done, if the failure modes match
what David fixed, then we should simply borrow the changes to the tests
he had made.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2131063</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-06-29 10:15:14 -0400</bug_when>
    <thetext>// Updated list as of today post the fix for bug 383600 
// (1 more than earlier list : ComplianceDiagnoseTest._test0030())

NegativeTypeAnnotationTest._test031()
NegativeTypeAnnotationTest._test032()
NegativeTypeAnnotationTest._test033()


NegativeTest._test126()
NegativeTest._test045()

JavadocTestMixed._test033()

GenericTypeTest._test0068()
GenericTypeTest._test0083()
GenericTypeTest._test1097()
GenericTypeTest._test1403()
GenericTypeTest._test0080()
GenericTypeTest._test0932()


AnnotationTest._testBug366003b()
AnnotationTest._testBug366003c()
AnnotationTest._testBug366003d()
AnnotationTest._testBug366003()

LambdaExpressionsNegativeTest._test004()
LambdaExpressionsNegativeTest._test006()

DietRecoveryTest._test77()
DietRecoveryTest._test99()
DietRecoveryTest._test75()
DietRecoveryTest._test32()
DietRecoveryTest._test124()

SyntaxErrorTest._test03()
SyntaxErrorTest._test06()

ParserTest._test003()
ParserTest._test006()
ParserTest._test011()

ComplianceDiagnoseTest._test0029()
ComplianceDiagnoseTest._test0041()
ComplianceDiagnoseTest._test0040()
ComplianceDiagnoseTest._test0032()
ComplianceDiagnoseTest._test0038()
ComplianceDiagnoseTest._test0030()

ASTConverterTestAST3_2._test0642()
ASTConverterTestAST3_2._test0652()
ASTConverterTestAST3_2._test0658()

ASTConverterRecoveryTest._test0014()

ASTConverterTestAST4_2._test0642()
ASTConverterTestAST4_2._test0652()
ASTConverterTestAST4_2._test0658()</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2136977</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-07-15 08:02:06 -0400</bug_when>
    <thetext>// Updated list as of today

NegativeTest._test126()
NegativeTest._test045()

JavadocTestMixed._test033()

GenericTypeTest._test0068()
GenericTypeTest._test0083()
GenericTypeTest._test1097()
GenericTypeTest._test1403()
GenericTypeTest._test0080()
GenericTypeTest._test0932()


AnnotationTest._testBug366003b()
AnnotationTest._testBug366003c()
AnnotationTest._testBug366003d()
AnnotationTest._testBug366003()

DietRecoveryTest._test77()
DietRecoveryTest._test99()
DietRecoveryTest._test75()
DietRecoveryTest._test32()
DietRecoveryTest._test124()

SyntaxErrorTest._test03()
SyntaxErrorTest._test06()

ParserTest._test003()
ParserTest._test006()
ParserTest._test011()

ComplianceDiagnoseTest._test0029()
ComplianceDiagnoseTest._test0041()
ComplianceDiagnoseTest._test0040()
ComplianceDiagnoseTest._test0032()
ComplianceDiagnoseTest._test0038()
ComplianceDiagnoseTest._test0030()

ASTConverterTestAST3_2._test0642()
ASTConverterTestAST3_2._test0652()
ASTConverterTestAST3_2._test0658()

ASTConverterRecoveryTest._test0014()

ASTConverterTestAST4_2._test0642()
ASTConverterTestAST4_2._test0652()
ASTConverterTestAST4_2._test0658()</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2138956</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-07-19 08:28:11 -0400</bug_when>
    <thetext>// Updated list as of today

NegativeTest._test126()
NegativeTest._test045()


JavadocTestMixed._test033()

GenericTypeTest._test0068()
GenericTypeTest._test0083()
GenericTypeTest._test1097()
GenericTypeTest._test1403()
GenericTypeTest._test0080()
GenericTypeTest._test0932()


AnnotationTest._testBug366003b()
AnnotationTest._testBug366003c()
AnnotationTest._testBug366003d()
AnnotationTest._testBug366003()

DietRecoveryTest._test77()
DietRecoveryTest._test99()
DietRecoveryTest._test75()
DietRecoveryTest._test32()
DietRecoveryTest._test124()

SyntaxErrorTest._test03()
SyntaxErrorTest._test06()

ParserTest._test003()
ParserTest._test006()
ParserTest._test011()

ComplianceDiagnoseTest._test0029()
ComplianceDiagnoseTest._test0041()
ComplianceDiagnoseTest._test0040()
ComplianceDiagnoseTest._test0032()
ComplianceDiagnoseTest._test0038()
ComplianceDiagnoseTest._test0030()

ASTConverterTestAST3_2._test0642()
ASTConverterTestAST3_2._test0652()
ASTConverterTestAST3_2._test0658()

ASTConverterRecoveryTest._test0014()

ASTConverterTestAST4_2._test0642()
ASTConverterTestAST4_2._test0652()
ASTConverterTestAST4_2._test0658()

ASTConverterBugsTestJLS3._testBug130778q()
ASTConverterBugsTestJLS4._testBug130778q()</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2156592</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-09-05 18:56:48 -0400</bug_when>
    <thetext>org.eclipse.jdt.core.tests.compiler.regression.DefaultMethodsTest.testModifiers1() still has an extra injected bug in order to avoid class file validation.

Execution using lambda-8-b50 JRE would give this bogus error:
java.lang.ClassFormatError: Method foo2 in class I has illegal modifiers: 0x21

This happens even when compiling that interface with javac from lambda-8-b50.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2166032</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-10-01 04:59:28 -0400</bug_when>
    <thetext>// Updated list of disabled tests as of today

NegativeTest._test126()
NegativeTest._test045()

JavadocTestMixed._test033()

GenericTypeTest._test0068()
GenericTypeTest._test0083()
GenericTypeTest._test1097()
GenericTypeTest._test0080()
GenericTypeTest._test0932()

GenericDietRecoveryTest._test0019()

DietRecoveryTest._test32()
DietRecoveryTest._test110
DietRecoveryTest._test124()

SyntaxErrorTest._test03()
SyntaxErrorTest._test06()

ParserTest._test011()

ComplianceDiagnoseTest._test0032()
ComplianceDiagnoseTest._test0030()

ASTConverterTestAST3_2._test0642()
ASTConverterTestAST3_2._test0652()
ASTConverterTestAST3_2._test0658()

ASTConverterRecoveryTest._test0014()

ASTConverterTestAST4_2._test0642()
ASTConverterTestAST4_2._test0652()
ASTConverterTestAST4_2._test0658()</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2166033</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-10-01 05:00:37 -0400</bug_when>
    <thetext>(In reply to comment #5)

&gt; This happens even when compiling that interface with javac from lambda-8-b50.

Stephan, please upgrade to 8b56 so we are all on the same page. TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2167091</commentid>
    <comment_count>8</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-10-02 20:34:45 -0400</bug_when>
    <thetext>(In reply to comment #7)
&gt; (In reply to comment #5)
&gt; 
&gt; &gt; This happens even when compiling that interface with javac from lambda-8-b50.
&gt; 
&gt; Stephan, please upgrade to 8b56 so we are all on the same page. TIA.

The same still happens with lambda-8-b56, but note its the VM that fails to accept what appears to be legal byte code. 
Maybe the VM depends on an explicit flag for default methods, but neither have I seen a specification for that flag nor does javac produce it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2168100</commentid>
    <comment_count>9</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-10-04 15:31:08 -0400</bug_when>
    <thetext>(In reply to comment #8)
&gt; (In reply to comment #7)
&gt; &gt; (In reply to comment #5)
&gt; &gt; 
&gt; &gt; &gt; This happens even when compiling that interface with javac from lambda-8-b50.
&gt; &gt; 
&gt; &gt; Stephan, please upgrade to 8b56 so we are all on the same page. TIA.
&gt; 
&gt; The same still happens with lambda-8-b56, but note its the VM that fails to
&gt; accept what appears to be legal byte code. 
&gt; Maybe the VM depends on an explicit flag for default methods, but neither
&gt; have I seen a specification for that flag nor does javac produce it.

I received confirmation that the VM simply hasn&apos;t been modified for this, to be fixed soon, see http://mail.openjdk.java.net/pipermail/lambda-dev/2012-October/006082.html</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2168502</commentid>
    <comment_count>10</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-10-05 10:05:51 -0400</bug_when>
    <thetext>// Updated list of disabled tests as of today

NegativeTest._test126()
NegativeTest._test045()

JavadocTestMixed._test033()

GenericTypeTest._test0068()
GenericTypeTest._test0083()
GenericTypeTest._test1097()
GenericTypeTest._test0080()
GenericTypeTest._test0932()

GenericDietRecoveryTest._test0019()

DietRecoveryTest._test32()
DietRecoveryTest._test110
DietRecoveryTest._test124()

SyntaxErrorTest._test03()
SyntaxErrorTest._test06()

ParserTest._test011()

ComplianceDiagnoseTest._test0032()
ComplianceDiagnoseTest._test0030()

ASTConverterTestAST3_2._test0642()
ASTConverterTestAST3_2._test0652()
ASTConverterTestAST3_2._test0658()

ASTConverterRecoveryTest._test0014()

ASTConverterTestAST4_2._test0642()
ASTConverterTestAST4_2._test0652()
ASTConverterTestAST4_2._test0658()

NegativeTypeAnnotationTest._test0390882()
NegativeTypeAnnotationTest._test0390882a()
NegativeTypeAnnotationTest._test0390882b()</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2168942</commentid>
    <comment_count>11</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-10-08 00:48:46 -0400</bug_when>
    <thetext>// Updated list of disabled tests as of today after resurrecting few:

NegativeTest._test126()
NegativeTest._test045()

JavadocTestMixed._test033()

GenericTypeTest._test0068()
GenericTypeTest._test0083()
GenericTypeTest._test1097()
GenericTypeTest._test0080()
GenericTypeTest._test0932()

GenericDietRecoveryTest._test0019()

DietRecoveryTest._test32()
DietRecoveryTest._test110
DietRecoveryTest._test124()

SyntaxErrorTest._test03()
SyntaxErrorTest._test06()

ParserTest._test011()

ComplianceDiagnoseTest._test0032()
ComplianceDiagnoseTest._test0030()

ASTConverterTestAST3_2._test0642()
ASTConverterTestAST3_2._test0652()
ASTConverterTestAST3_2._test0658()

ASTConverterRecoveryTest._test0014()

ASTConverterTestAST4_2._test0642()
ASTConverterTestAST4_2._test0652()
ASTConverterTestAST4_2._test0658()</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2171412</commentid>
    <comment_count>12</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-10-13 03:04:18 -0400</bug_when>
    <thetext>// Updated list of disabled tests as of today after resurrecting few:

NegativeTest._test045()

JavadocTestMixed._test033()

GenericTypeTest._test0068()
GenericTypeTest._test0083()
GenericTypeTest._test1097()
GenericTypeTest._test0080()
GenericTypeTest._test0932()

GenericDietRecoveryTest._test0019()

DietRecoveryTest._test32()
DietRecoveryTest._test110
DietRecoveryTest._test124()

ParserTest._test011()

ComplianceDiagnoseTest._test0032()
ComplianceDiagnoseTest._test0030()

ASTConverterTestAST3_2._test0642()
ASTConverterTestAST3_2._test0652()
ASTConverterTestAST3_2._test0658()

ASTConverterRecoveryTest._test0014()

ASTConverterTestAST4_2._test0642()
ASTConverterTestAST4_2._test0652()
ASTConverterTestAST4_2._test0658()</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2209103</commentid>
    <comment_count>13</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-01-29 04:15:01 -0500</bug_when>
    <thetext>// Updated list of disabled tests as of today after resurrecting few:

NegativeTest._test045()

JavadocTestMixed._test033()

GenericTypeTest._test0068()
GenericTypeTest._test0083()
GenericTypeTest._test1097()
GenericTypeTest._test0080()
GenericTypeTest._test0932()

GenericDietRecoveryTest._test0019()

DietRecoveryTest._test32()
DietRecoveryTest._test110
DietRecoveryTest._test124()

ParserTest._test011()

ComplianceDiagnoseTest._test0032()
ComplianceDiagnoseTest._test0030()

ASTConverterTestAST3_2._test0642()
ASTConverterTestAST3_2._test0652()
ASTConverterTestAST3_2._test0658()

ASTConverterRecoveryTest._test0014()

ASTConverterTestAST4_2._test0642()
ASTConverterTestAST4_2._test0652()
ASTConverterTestAST4_2._test0658()

// As part of running against b73, we disabled the following:

org.eclipse.jdt.core.tests.compiler.regression.ForeachStatementTest._test023()
org.eclipse.jdt.core.tests.compiler.regression.ForeachStatementTest._test034()
org.eclipse.jdt.core.tests.compiler.regression.ForeachStatementTest._test035()
org.eclipse.jdt.core.tests.compiler.regression.ForeachStatementTest._test036()
org.eclipse.jdt.core.tests.compiler.regression.ForeachStatementTest._test039()
org.eclipse.jdt.core.tests.compiler.regression.ForeachStatementTest._test040()

org.eclipse.jdt.core.tests.compiler.regression.MethodVerifyTest._test091()
org.eclipse.jdt.core.tests.compiler.regression.MethodVerifyTest._test092()
org.eclipse.jdt.core.tests.compiler.regression.MethodVerifyTest._test093()
org.eclipse.jdt.core.tests.compiler.regression.MethodVerifyTest._test331446()
org.eclipse.jdt.core.tests.compiler.regression.MethodVerifyTest._test331446a()
org.eclipse.jdt.core.tests.compiler.regression.MethodVerifyTest._test203()
org.eclipse.jdt.core.tests.compiler.regression.MethodVerifyTest._test026b()

org.eclipse.jdt.core.tests.compiler.regression.AmbiguousMethodTest._test009()

org.eclipse.jdt.core.tests.compiler.regression.GenericTypeTest._test0635()
org.eclipse.jdt.core.tests.compiler.regression.GenericTypeTest._test0146()
org.eclipse.jdt.core.tests.compiler.regression.GenericTypeTest._test0779()
org.eclipse.jdt.core.tests.compiler.regression.GenericTypeTest._test0809()
org.eclipse.jdt.core.tests.compiler.regression.GenericTypeTest._test0204()
org.eclipse.jdt.core.tests.compiler.regression.GenericTypeTest._test0868()
org.eclipse.jdt.core.tests.compiler.regression.GenericTypeTest._test1030()
org.eclipse.jdt.core.tests.compiler.regression.GenericTypeTest._test1035()
org.eclipse.jdt.core.tests.compiler.regression.GenericTypeTest._test0443()
org.eclipse.jdt.core.tests.compiler.regression.GenericTypeTest._test1444()
org.eclipse.jdt.core.tests.compiler.regression.GenericTypeTest._test0298()
org.eclipse.jdt.core.tests.compiler.regression.GenericTypeTest._test0361()
org.eclipse.jdt.core.tests.compiler.regression.GenericTypeTest._test0379()

Manoj, this latter list needs to be cleaned up asap. Also start with b74.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2209104</commentid>
    <comment_count>14</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-01-29 04:16:28 -0500</bug_when>
    <thetext>All, please move to b73/b74 lambda JRE. You should see 0 failures as of now.
Manoj is testing with b74 and once that is green, we will settle with that
for a few weeks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2209184</commentid>
    <comment_count>15</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-01-29 07:12:25 -0500</bug_when>
    <thetext>(In reply to comment #14)
&gt; All, please move to b73/b74 lambda JRE. You should see 0 failures as of now.

Sigh. Spoke too soon. There are a bunch more tests that are failing. Manoj,
please prepare a patch disabling the list of tests that are failing and also
provided an updated version of disabled tests - TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2209239</commentid>
    <comment_count>16</comment_count>
      <attachid>226261</attachid>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2013-01-29 09:25:02 -0500</bug_when>
    <thetext>Created attachment 226261
Proposed Patch for the listed failures

Following tests that were failing [part of the original failure] are disabled by the above patch.

org.eclipse.jdt.core.tests.compiler.regression.LookupTest._test075()
org.eclipse.jdt.core.tests.compiler.regression.InnerEmulationTest._test173()
org.eclipse.jdt.core.tests.compiler.regression.InnerEmulationTest._test174()
org.eclipse.jdt.core.tests.compiler.regression.StackMapAttributeTest._test018()
org.eclipse.jdt.core.tests.compiler.regression.DefaultMethodsTest._testModifiers5(</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2209324</commentid>
    <comment_count>17</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-01-29 11:31:49 -0500</bug_when>
    <thetext>Now all tests should be green with b73/b74:

Disabled tests that need to be worked on:

// Updated list of disabled tests as of today after resurrecting few:

NegativeTest._test045()

JavadocTestMixed._test033()

GenericTypeTest._test0068()
GenericTypeTest._test0083()
GenericTypeTest._test1097()
GenericTypeTest._test0080()
GenericTypeTest._test0932()

GenericDietRecoveryTest._test0019()

DietRecoveryTest._test32()
DietRecoveryTest._test110
DietRecoveryTest._test124()

ParserTest._test011()

ComplianceDiagnoseTest._test0032()
ComplianceDiagnoseTest._test0030()

ASTConverterTestAST3_2._test0642()
ASTConverterTestAST3_2._test0652()
ASTConverterTestAST3_2._test0658()

ASTConverterRecoveryTest._test0014()

ASTConverterTestAST4_2._test0642()
ASTConverterTestAST4_2._test0652()
ASTConverterTestAST4_2._test0658()

// As part of running against b73, we disabled the following:

org.eclipse.jdt.core.tests.compiler.regression.ForeachStatementTest._test023()
org.eclipse.jdt.core.tests.compiler.regression.ForeachStatementTest._test034()
org.eclipse.jdt.core.tests.compiler.regression.ForeachStatementTest._test035()
org.eclipse.jdt.core.tests.compiler.regression.ForeachStatementTest._test036()
org.eclipse.jdt.core.tests.compiler.regression.ForeachStatementTest._test039()
org.eclipse.jdt.core.tests.compiler.regression.ForeachStatementTest._test040()

org.eclipse.jdt.core.tests.compiler.regression.MethodVerifyTest._test091()
org.eclipse.jdt.core.tests.compiler.regression.MethodVerifyTest._test092()
org.eclipse.jdt.core.tests.compiler.regression.MethodVerifyTest._test093()
org.eclipse.jdt.core.tests.compiler.regression.MethodVerifyTest._test331446()
org.eclipse.jdt.core.tests.compiler.regression.MethodVerifyTest._test331446a()
org.eclipse.jdt.core.tests.compiler.regression.MethodVerifyTest._test203()
org.eclipse.jdt.core.tests.compiler.regression.MethodVerifyTest._test026b()

org.eclipse.jdt.core.tests.compiler.regression.AmbiguousMethodTest._test009()

org.eclipse.jdt.core.tests.compiler.regression.GenericTypeTest._test0635()
org.eclipse.jdt.core.tests.compiler.regression.GenericTypeTest._test0146()
org.eclipse.jdt.core.tests.compiler.regression.GenericTypeTest._test0779()
org.eclipse.jdt.core.tests.compiler.regression.GenericTypeTest._test0809()
org.eclipse.jdt.core.tests.compiler.regression.GenericTypeTest._test0204()
org.eclipse.jdt.core.tests.compiler.regression.GenericTypeTest._test0868()
org.eclipse.jdt.core.tests.compiler.regression.GenericTypeTest._test1030()
org.eclipse.jdt.core.tests.compiler.regression.GenericTypeTest._test1035()
org.eclipse.jdt.core.tests.compiler.regression.GenericTypeTest._test0443()
org.eclipse.jdt.core.tests.compiler.regression.GenericTypeTest._test1444()
org.eclipse.jdt.core.tests.compiler.regression.GenericTypeTest._test0298()
org.eclipse.jdt.core.tests.compiler.regression.GenericTypeTest._test0361()
org.eclipse.jdt.core.tests.compiler.regression.GenericTypeTest._test0379()

org.eclipse.jdt.core.tests.compiler.regression.LookupTest._test075()
org.eclipse.jdt.core.tests.compiler.regression.InnerEmulationTest._test173()
org.eclipse.jdt.core.tests.compiler.regression.InnerEmulationTest._test174()
org.eclipse.jdt.core.tests.compiler.regression.StackMapAttributeTest._test018()
org.eclipse.jdt.core.tests.compiler.regression.DefaultMethodsTest._testModifiers5</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2209743</commentid>
    <comment_count>18</comment_count>
      <attachid>226309</attachid>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-01-30 05:35:02 -0500</bug_when>
    <thetext>Created attachment 226309
Actual test fixes, addressing changes in the underlying Lambda libraries.

This patch fixes a lot of test failures, as the code was using a number of older project Lambda APIs which have changed, and are presently out of the main JDK8 build.

I haven&apos;t tried all the commented-out tests, but these will address a good chunk.

The details for Stream aren&apos;t up-to-date with current project Lambda yet, but the libraries aren&apos;t final yet anyway.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2209764</commentid>
    <comment_count>19</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-01-30 06:46:09 -0500</bug_when>
    <thetext>(In reply to comment #18)
&gt; Created attachment 226309 [details]

&gt; The details for Stream aren&apos;t up-to-date with current project Lambda yet,
&gt; but the libraries aren&apos;t final yet anyway.

I suspect you had some work in progress you had lying around that you wanted
to share and didn&apos;t actually spend cycles on this recently since Manoj has been
assigned to work on bug 399452 - Manoj, see if you can leverage Jesper&apos;s
work or use it to confirm your own fixes.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2209780</commentid>
    <comment_count>20</comment_count>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-01-30 07:31:28 -0500</bug_when>
    <thetext>(In reply to comment #19)
&gt; I suspect you had some work in progress you had lying around that you wanted
&gt; to share and didn&apos;t actually spend cycles on this recently since Manoj has
&gt; been
&gt; assigned to work on bug 399452.

Yep, I&apos;d come across those failures earlier and wanted to test with as many test cases as possible. 
Didn&apos;t mean to duplicate work...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2211054</commentid>
    <comment_count>21</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-01 07:42:24 -0500</bug_when>
    <thetext>Failing tests not attached and tracked at other bugs as of today:

NegativeTest._test045()

JavadocTestMixed._test033()

GenericTypeTest._test0068()
GenericTypeTest._test0083()
GenericTypeTest._test1097()
GenericTypeTest._test0080()
GenericTypeTest._test0932()

GenericDietRecoveryTest._test0019()

DietRecoveryTest._test32()
DietRecoveryTest._test110
DietRecoveryTest._test124()

ParserTest._test011()

ComplianceDiagnoseTest._test0032()
ComplianceDiagnoseTest._test0030()

ASTConverterTestAST3_2._test0642()
ASTConverterTestAST3_2._test0652()
ASTConverterTestAST3_2._test0658()

ASTConverterRecoveryTest._test0014()

ASTConverterTestAST4_2._test0642()
ASTConverterTestAST4_2._test0652()
ASTConverterTestAST4_2._test0658()</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2271663</commentid>
    <comment_count>22</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2013-06-12 03:54:23 -0400</bug_when>
    <thetext>Request all to move to b92 as this would be the next stable version for which jdt core tests would be run. A bug 410402 has the patch for addressing the failures which would be committed to BETA_JAVA8 branch in a day or two.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2304673</commentid>
    <comment_count>23</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-09-10 02:42:40 -0400</bug_when>
    <thetext>Failing tests not attached and tracked at other bugs as of today:

NegativeTest._test045()

JavadocTestMixed._test033()

GenericTypeTest._test0068()
GenericTypeTest._test0083()
GenericTypeTest._test1097()
GenericTypeTest._test0080()
GenericTypeTest._test0932()

GenericDietRecoveryTest._test0019()

DietRecoveryTest._test32()
DietRecoveryTest._test110
DietRecoveryTest._test124()

ParserTest._test011()

ComplianceDiagnoseTest._test0032()
ComplianceDiagnoseTest._test0030()

ASTConverterTestAST3_2._test0642()
ASTConverterTestAST3_2._test0652()
ASTConverterTestAST3_2._test0658()

ASTConverterRecoveryTest._test0014()

ASTConverterTestAST4_2._test0642()
ASTConverterTestAST4_2._test0652()
ASTConverterTestAST4_2._test0658()

CompletionWithMissingTypesTests_1_5._test0010() (416884)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2321423</commentid>
    <comment_count>24</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-21 22:32:51 -0400</bug_when>
    <thetext>Failing tests as of today:

NegativeTest._test045()

JavadocTestMixed._test033()

GenericTypeTest._test0068()
GenericTypeTest._test0083()
GenericTypeTest._test1097()
GenericTypeTest._test0080()
GenericTypeTest._test0932()

GenericDietRecoveryTest._test0019()

DietRecoveryTest._test32()
DietRecoveryTest._test110
DietRecoveryTest._test124()

ParserTest._test011()

ComplianceDiagnoseTest._test0032()
ComplianceDiagnoseTest._test0030()

ASTConverterTestAST3_2._test0642()
ASTConverterTestAST3_2._test0652()
ASTConverterTestAST3_2._test0658()

ASTConverterRecoveryTest._test0014()

ASTConverterTestAST4_2._test0642()
ASTConverterTestAST4_2._test0652()
ASTConverterTestAST4_2._test0658()

CompletionWithMissingTypesTests_1_5._test0010() (416884)

org.eclipse.jdt.core.tests.dom.ASTConverter15JLS8Test._test0276 (bug 419971)
ASTConverter15JLS4Test._test0276 (bug 419971)
ASTConverter15Test._test0276 (bug 419971)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2343693</commentid>
    <comment_count>25</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2013-12-19 04:09:35 -0500</bug_when>
    <thetext>org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/GenericTypeTest.java

test1146 - 1.7 Failed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2343994</commentid>
    <comment_count>26</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-19 13:11:05 -0500</bug_when>
    <thetext>(In reply to shankha banerjee from comment #25)
&gt; org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/
&gt; regression/GenericTypeTest.java
&gt; 
&gt; test1146 - 1.7 Failed.

Fixed as of bug 424053 comment 11 (yes, test1146 is the correct number :) )</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2545354</commentid>
    <comment_count>27</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2015-04-13 00:14:01 -0400</bug_when>
    <thetext>Latest List and specific bugs to track these:
JavadocTestMixed._test033() and ParserTest._test011() by bug 464468


GenericTypeTest._test0068(),GenericTypeTest._test0083(),GenericTypeTest._test1097(),GenericTypeTest._test0080() and GenericTypeTest._test0932() tracked by bug 464469

GenericDietRecoveryTest._test0019() passing and enabled via commit http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=b89cad8de7807e4ff0375dd01e42e7a766053716

DietRecoveryTest._test32(), DietRecoveryTest._test110 and DietRecoveryTest._test124() are tracked by bug 464470


ComplianceDiagnoseTest._test0032() and ComplianceDiagnoseTest._test0030() are tracked by bug 464471

This bug will track the following:

ASTConverterTestAST3_2._test0642()
ASTConverterTestAST3_2._test0652()
ASTConverterTestAST3_2._test0658()
ASTConverterRecoveryTest._test0014()
ASTConverterTestAST4_2._test0642()
ASTConverterTestAST4_2._test0652()
ASTConverterTestAST4_2._test0658()</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>226261</attachid>
            <date>2013-01-29 09:25:00 -0500</date>
            <delta_ts>2013-01-29 09:25:02 -0500</delta_ts>
            <desc>Proposed Patch for the listed failures</desc>
            <filename>b74-failure.patch</filename>
            <type>text/plain</type>
            <size>4819</size>
            <attacher name="Manoj Palat Away Until May 11 2015">manpalat</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0RlZmF1bHRNZXRob2Rz
VGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vRGVmYXVsdE1ldGhvZHNU
ZXN0LmphdmEKaW5kZXggMGRlZmE1ZS4uOGNmZjY1NCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Nv
bXBpbGVyL3JlZ3Jlc3Npb24vRGVmYXVsdE1ldGhvZHNUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3Rz
L2NvbXBpbGVyL3JlZ3Jlc3Npb24vRGVmYXVsdE1ldGhvZHNUZXN0LmphdmEKQEAgLTEsNSArMSw1
IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDEyIEdLIFNv
ZnR3YXJlIEFHIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMTMgR0sgU29mdHdhcmUg
QUcsIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4g
VGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUg
YXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2
MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWls
YWJsZSBhdApAQCAtMTk4LDcgKzE5OCw3IEBACiAKIAkvLyBjbGFzcyBpbXBsZW1lbnRzIGludGVy
ZmFjZSB3aXRoIGRlZmF1bHQgbWV0aG9kLiAKIAkvLyAtIG5vIG5lZWQgdG8gaW1wbGVtZW50IHRo
aXMgaW50ZXJmYWNlIG1ldGhvZCBhcyBpdCBpcyBub3QgYWJzdHJhY3QKLQlwdWJsaWMgdm9pZCB0
ZXN0TW9kaWZpZXJzNSgpIHsKKwlwdWJsaWMgdm9pZCBfdGVzdE1vZGlmaWVyczUoKSB7CiAJCXJ1
bkNvbmZvcm1UZXN0KAogCQkJbmV3IFN0cmluZ1tdIHsKIAkJCQkiQy5qYXZhIiwKZGlmZiAtLWdp
dCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0lubmVyRW11bGF0aW9uVGVzdC5qYXZh
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pk
dC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vSW5uZXJFbXVsYXRpb25UZXN0LmphdmEK
aW5kZXggODVkM2NkZC4uMTViMzgzZSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUu
dGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3Jl
Z3Jlc3Npb24vSW5uZXJFbXVsYXRpb25UZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vSW5uZXJFbXVsYXRpb25UZXN0LmphdmEKQEAgLTEsNSArMSw1IEBACiAvKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDA2LCAyMDEyIElCTSBDb3Jw
b3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDA2LCAyMDEzIElCTSBDb3Jw
b3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFt
IGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVu
ZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGlj
aCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdApAQCAt
Njg0NCw3ICs2ODQ0LDcgQEAKIAkpOwogfQogLy9odHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVn
cy9zaG93X2J1Zy5jZ2k/aWQ9MzA4MjQ1Ci1wdWJsaWMgdm9pZCB0ZXN0MTczKCkgdGhyb3dzIEV4
Y2VwdGlvbiB7CitwdWJsaWMgdm9pZCBfdGVzdDE3MygpIHRocm93cyBFeGNlcHRpb24gewogCXRo
aXMucnVuQ29uZm9ybVRlc3QoCiAJCW5ldyBTdHJpbmdbXSB7CiAJCQkiWC5qYXZhIiwvLz09PT09
PT09PT09PT09PT09PT09PT09CkBAIC02ODY5LDcgKzY4NjksNyBAQAogCQkiU1VDQ0VTUyIpOwog
fQogLy9odHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzA4MjQ1
Ci1wdWJsaWMgdm9pZCB0ZXN0MTc0KCkgdGhyb3dzIEV4Y2VwdGlvbiB7CitwdWJsaWMgdm9pZCBf
dGVzdDE3NCgpIHRocm93cyBFeGNlcHRpb24gewogCXRoaXMucnVuQ29uZm9ybVRlc3QoCiAJCW5l
dyBTdHJpbmdbXSB7CiAJCQkiWC5qYXZhIiwvLz09PT09PT09PT09PT09PT09PT09PT09CmRpZmYg
LS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlw
c2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9Mb29rdXBUZXN0LmphdmEgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2Nv
cmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9Mb29rdXBUZXN0LmphdmEKaW5kZXggNTM2MjNj
OS4uYjVmMTI3MyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGls
ZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTG9v
a3VwVGVzdC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3Ny
Yy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0xvb2t1cFRl
c3QuamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5
cmlnaHQgKGMpIDIwMDAsIDIwMTIgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5
cmlnaHQgKGMpIDIwMDAsIDIwMTMgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwg
cmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJp
YWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNl
IFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0
aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC0yNTQyLDcgKzI1NDIsNyBAQAogCX0KIH0KIC8v
aHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTE1MDc1OAotcHVi
bGljIHZvaWQgdGVzdDA3NSgpIHsKK3B1YmxpYyB2b2lkIF90ZXN0MDc1KCkgewogCXRoaXMucnVu
Q29uZm9ybVRlc3QoCiAJCQluZXcgU3RyaW5nW10gewogCQkJCSJwYWNrYWdlMS9UZXN0LmphdmEi
LC8vPT09PT09PT09PT09PT09PT09PQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUu
dGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3Jl
Z3Jlc3Npb24vU3RhY2tNYXBBdHRyaWJ1dGVUZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIv
cmVncmVzc2lvbi9TdGFja01hcEF0dHJpYnV0ZVRlc3QuamF2YQppbmRleCA0ZTA0ODkwLi4zMTM2
ZDVhIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMv
b3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9TdGFja01hcEF0
dHJpYnV0ZVRlc3QuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxl
ci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9TdGFj
a01hcEF0dHJpYnV0ZVRlc3QuamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDYsIDIwMTIgSUJNIENvcnBvcmF0aW9uIGFuZCBv
dGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDYsIDIwMTMgSUJNIENvcnBvcmF0aW9uIGFuZCBv
dGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2Nv
bXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1z
IG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVz
IHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC0xNzU0LDcgKzE3NTQs
NyBAQAogCQl9CiAJfQogCi0JcHVibGljIHZvaWQgdGVzdDAxOCgpIHsKKwlwdWJsaWMgdm9pZCBf
dGVzdDAxOCgpIHsKIAkJdGhpcy5ydW5Db25mb3JtVGVzdCgKICAgICAgICAgICAgIG5ldyBTdHJp
bmdbXSB7CiAgICAgICAgICAgICAJCSJYLmphdmEiLA==
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>226309</attachid>
            <date>2013-01-30 05:35:00 -0500</date>
            <delta_ts>2013-01-30 05:35:02 -0500</delta_ts>
            <desc>Actual test fixes, addressing changes in the underlying Lambda libraries.</desc>
            <filename>file_383608.txt</filename>
            <type>text/plain</type>
            <size>19530</size>
            <attacher name="Jesper Moller">jesper</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMA0KI1Agb3JnLmVjbGlwc2UuamR0LmNvcmUu
dGVzdHMuY29tcGlsZXINCmRpZmYgLS1naXQgc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3Rz
L2NvbXBpbGVyL3JlZ3Jlc3Npb24vQWJzdHJhY3RSZWdyZXNzaW9uVGVzdC5qYXZhIHNyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0Fic3RyYWN0UmVncmVz
c2lvblRlc3QuamF2YQ0KaW5kZXggYTIwNGJjNC4uNGU5ODI4NyAxMDA2NDQNCi0tLSBzcmMvb3Jn
L2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9BYnN0cmFjdFJlZ3Jl
c3Npb25UZXN0LmphdmENCisrKyBzcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGls
ZXIvcmVncmVzc2lvbi9BYnN0cmFjdFJlZ3Jlc3Npb25UZXN0LmphdmENCkBAIC05OSwxMiArOTks
MTIgQEANCiAJCQkJIglwdWJsaWMgamF2YS51dGlsLkNvbXBhcmF0b3IgY29tcG9zZShqYXZhLnV0
aWwuQ29tcGFyYXRvciBvdGhlcikgeyByZXR1cm4gbnVsbDsgfVxuIiArDQogCQkJCSIJcHVibGlj
IGphdmEudXRpbC5Db21wYXJhdG9yIHJldmVyc2UoKSB7IHJldHVybiBudWxsOyB9XG4iOw0KIAkJ
CUNPTExFQ1RJT05fSU1QTF9KUkU4ID0gDQotCQkJCSIJcHVibGljIGJvb2xlYW4gcmV0YWluQWxs
KGphdmEudXRpbC5mdW5jdGlvbnMuUHJlZGljYXRlPD8gc3VwZXIgKj4gZmlsdGVyKSB7IHJldHVy
biBmYWxzZTsgfVxuIiArDQotCQkJCSIJcHVibGljIGJvb2xlYW4gcmVtb3ZlQWxsKGphdmEudXRp
bC5mdW5jdGlvbnMuUHJlZGljYXRlPD8gc3VwZXIgKj4gZmlsdGVyKSB7IHJldHVybiBmYWxzZTsg
fVxuIiArDQorCQkJCSIJcHVibGljIGJvb2xlYW4gcmV0YWluQWxsKGphdmEudXRpbC5mdW5jdGlv
bi5QcmVkaWNhdGU8PyBzdXBlciAqPiBmaWx0ZXIpIHsgcmV0dXJuIGZhbHNlOyB9XG4iICsNCisJ
CQkJIglwdWJsaWMgYm9vbGVhbiByZW1vdmVBbGwoamF2YS51dGlsLmZ1bmN0aW9uLlByZWRpY2F0
ZTw/IHN1cGVyICo+IGZpbHRlcikgeyByZXR1cm4gZmFsc2U7IH1cbiIgKw0KIAkJCQkiCXB1Ymxp
YyB2b2lkIGFkZEFsbChJdGVyYWJsZTw/IGV4dGVuZHMgKj4gc291cmNlKSB7IH1cbiI7DQogCQkJ
Q09MTEVDVElPTl9SQVdfSU1QTF9KUkU4ID0gDQotCQkJCSIJcHVibGljIEBTdXBwcmVzc1dhcm5p
bmdzKFwicmF3dHlwZXNcIikgYm9vbGVhbiByZXRhaW5BbGwoamF2YS51dGlsLmZ1bmN0aW9ucy5Q
cmVkaWNhdGUgZmlsdGVyKSB7IHJldHVybiBmYWxzZTsgfVxuIiArDQotCQkJCSIJcHVibGljIEBT
dXBwcmVzc1dhcm5pbmdzKFwicmF3dHlwZXNcIikgYm9vbGVhbiByZW1vdmVBbGwoamF2YS51dGls
LmZ1bmN0aW9ucy5QcmVkaWNhdGUgZmlsdGVyKSB7IHJldHVybiBmYWxzZTsgfVxuIiArDQorCQkJ
CSIJcHVibGljIEBTdXBwcmVzc1dhcm5pbmdzKFwicmF3dHlwZXNcIikgYm9vbGVhbiByZXRhaW5B
bGwoamF2YS51dGlsLmZ1bmN0aW9uLlByZWRpY2F0ZSBmaWx0ZXIpIHsgcmV0dXJuIGZhbHNlOyB9
XG4iICsNCisJCQkJIglwdWJsaWMgQFN1cHByZXNzV2FybmluZ3MoXCJyYXd0eXBlc1wiKSBib29s
ZWFuIHJlbW92ZUFsbChqYXZhLnV0aWwuZnVuY3Rpb24uUHJlZGljYXRlIGZpbHRlcikgeyByZXR1
cm4gZmFsc2U7IH1cbiIgKw0KIAkJCQkiCXB1YmxpYyBAU3VwcHJlc3NXYXJuaW5ncyhcInJhd3R5
cGVzXCIpIHZvaWQgYWRkQWxsKEl0ZXJhYmxlIHNvdXJjZSkgeyB9XG4iOw0KIAkJCUxJU1RfSU1Q
TF9KUkU4ID0vLyByZXBsYWNlICcqJyB3aXRoIHlvdXIgY29uY3JldGUgdHlwZSBhcmd1bWVudA0K
IAkJCQkiCXB1YmxpYyB2b2lkIHNvcnQoamF2YS51dGlsLkNvbXBhcmF0b3I8PyBzdXBlciAqPiBj
b21wYXJhdG9yKSB7fVxuIiArDQpAQCAtMTEzLDc5ICsxMTMsMTEgQEANCiAJCQkJIglwdWJsaWMg
QFN1cHByZXNzV2FybmluZ3MoXCJyYXd0eXBlc1wiKSB2b2lkIHNvcnQoamF2YS51dGlsLkNvbXBh
cmF0b3IgY29tcGFyYXRvcikge31cbiIgKw0KIAkJCQkiCXB1YmxpYyBAU3VwcHJlc3NXYXJuaW5n
cyhcInJhd3R5cGVzXCIpIHZvaWQgcGFyYWxsZWxTb3J0KGphdmEudXRpbC5Db21wYXJhdG9yIGNv
bXBhcmF0b3IpIHt9XG4iOwkNCiAJCQlJVEVSQUJMRV9JTVBMX0pSRTggPSAvLyByZXBsYWNlICcq
JyB3aXRoIHlvdXIgY29uY3JldGUgdHlwZSBhcmd1bWVudA0KLQkJCQkiCXB1YmxpYyBib29sZWFu
IGlzRW1wdHkoKSB7IHJldHVybiBmYWxzZTsgfVxuIiArDQotCQkJCSIJcHVibGljIGxvbmcgY291
bnQoKSB7IHJldHVybiAwTDsgfVxuIiArDQotCQkJCSIJcHVibGljICogZ2V0T25seSgpIHsgcmV0
dXJuIG51bGw7IH1cbiIgKw0KLQkJCQkiCXB1YmxpYyAqIGdldEZpcnN0KCkgeyByZXR1cm4gbnVs
bDsgfVxuIiArDQotCQkJCSIJcHVibGljICogZ2V0QW55KCkgeyByZXR1cm4gbnVsbDsgfVxuIiAr
DQotCQkJCSIJcHVibGljICogcmVkdWNlKCogYmFzZSwgamF2YS51dGlsLmZ1bmN0aW9ucy5CaW5h
cnlPcGVyYXRvcjwqPiByZWR1Y2VyKSB7IHJldHVybiBudWxsOyB9XG4iICsNCi0JCQkJIglwdWJs
aWMgPEEgZXh0ZW5kcyBqYXZhLnV0aWwuRmlsbGFibGU8PyBzdXBlciAqPj4gQSAgaW50byhBIHRh
cmdldCkgeyByZXR1cm4gbnVsbDsgfVxuIiArDQotCQkJCSIJcHVibGljIHZvaWQgZm9yRWFjaChq
YXZhLnV0aWwuZnVuY3Rpb25zLkJsb2NrPD8gc3VwZXIgKj4gYmxvY2spIHt9XG4iICsNCi0JCQkJ
IglwdWJsaWMgSXRlcmFibGU8Kj4gc29ydGVkKGphdmEudXRpbC5Db21wYXJhdG9yPD8gc3VwZXIg
Kj4gY29tcGFyYXRvcikgeyByZXR1cm4gbnVsbDsgfVxuIiArDQotCQkJCSIJcHVibGljIGJvb2xl
YW4gYW55TWF0Y2goamF2YS51dGlsLmZ1bmN0aW9ucy5QcmVkaWNhdGU8PyBzdXBlciAqPiBmaWx0
ZXIpIHsgcmV0dXJuIGZhbHNlOyB9XG4iICsNCi0JCQkJIglwdWJsaWMgYm9vbGVhbiBhbGxNYXRj
aChqYXZhLnV0aWwuZnVuY3Rpb25zLlByZWRpY2F0ZTw/IHN1cGVyICo+IGZpbHRlcikgeyByZXR1
cm4gZmFsc2U7IH1cbiIgKw0KLQkJCQkiCXB1YmxpYyBib29sZWFuIG5vbmVNYXRjaChqYXZhLnV0
aWwuZnVuY3Rpb25zLlByZWRpY2F0ZTw/IHN1cGVyICo+IGZpbHRlcikgeyByZXR1cm4gZmFsc2U7
IH1cbiIgKw0KLQkJCQkiCXB1YmxpYyBJdGVyYWJsZTwqPiBjdW11bGF0ZShqYXZhLnV0aWwuZnVu
Y3Rpb25zLkJpbmFyeU9wZXJhdG9yPCo+IG9wKSB7IHJldHVybiBudWxsOyB9XG4iICsNCi0JCQkJ
IglwdWJsaWMgPFU+IE1hcFN0cmVhbTwqLFU+IG1hcHBlZChqYXZhLnV0aWwuZnVuY3Rpb25zLk1h
cHBlcjw/IHN1cGVyICosID8gZXh0ZW5kcyBVPiBtYXBwZXIpIHsgcmV0dXJuIG51bGw7IH1cbiIg
Kw0KLQkJCQkiCXB1YmxpYyBJdGVyYWJsZTwqPiBmaWx0ZXIoamF2YS51dGlsLmZ1bmN0aW9ucy5Q
cmVkaWNhdGU8PyBzdXBlciAqPiBwcmVkaWNhdGUpIHsgcmV0dXJuIG51bGw7IH1cbiIgKw0KLQkJ
CQkiCXB1YmxpYyA8VT4gSXRlcmFibGU8VT4gbWFwKGphdmEudXRpbC5mdW5jdGlvbnMuTWFwcGVy
PD8gc3VwZXIgKiwgPyBleHRlbmRzIFU+IG1hcHBlcikgeyByZXR1cm4gbnVsbDsgfVxuIiArDQot
CQkJCSIJcHVibGljIGRvdWJsZSBtYXBSZWR1Y2UoamF2YS51dGlsLmZ1bmN0aW9ucy5Eb3VibGVN
YXBwZXI8PyBzdXBlciAqPiBtYXBwZXIsIGRvdWJsZSBiYXNlLCBqYXZhLnV0aWwuZnVuY3Rpb25z
LkRvdWJsZUJpbmFyeU9wZXJhdG9yIHJlZHVjZXIpIHsgcmV0dXJuIDA7IH1cbiIgKw0KLQkJCQki
CXB1YmxpYyBsb25nIG1hcFJlZHVjZShqYXZhLnV0aWwuZnVuY3Rpb25zLkxvbmdNYXBwZXI8PyBz
dXBlciAqPiBtYXBwZXIsIGxvbmcgYmFzZSwgamF2YS51dGlsLmZ1bmN0aW9ucy5Mb25nQmluYXJ5
T3BlcmF0b3IgcmVkdWNlcikgeyByZXR1cm4gMDsgfVxuIiArDQotCQkJCSIJcHVibGljIGludCBt
YXBSZWR1Y2UoamF2YS51dGlsLmZ1bmN0aW9ucy5JbnRNYXBwZXI8PyBzdXBlciAqPiBtYXBwZXIs
IGludCBiYXNlLCBqYXZhLnV0aWwuZnVuY3Rpb25zLkludEJpbmFyeU9wZXJhdG9yIHJlZHVjZXIp
IHsgcmV0dXJuIDA7IH1cbiIgKw0KLQkJCQkiCXB1YmxpYyA8VT4gVSBtYXBSZWR1Y2UoamF2YS51
dGlsLmZ1bmN0aW9ucy5NYXBwZXI8PyBzdXBlciAqLCA/IGV4dGVuZHMgVT4gbWFwcGVyLCBVIGJh
c2UsIGphdmEudXRpbC5mdW5jdGlvbnMuQmluYXJ5T3BlcmF0b3I8VT4gcmVkdWNlcikgeyByZXR1
cm4gbnVsbDsgfVxuIiArDQotCQkJCSIJcHVibGljIDxVPiBJdGVyYWJsZTxVPiBmbGF0TWFwKGph
dmEudXRpbC5mdW5jdGlvbnMuTWFwcGVyPD8gc3VwZXIgKiwgPyBleHRlbmRzIEl0ZXJhYmxlPFU+
PiBtYXBwZXIpIHsgcmV0dXJuIG51bGw7IH1cbiIgKw0KLQkJCQkiCXB1YmxpYyA8VT4gTWFwU3Ry
ZWFtPFUsIEl0ZXJhYmxlPCo+PiBncm91cEJ5KGphdmEudXRpbC5mdW5jdGlvbnMuTWFwcGVyPD8g
c3VwZXIgKiwgPyBleHRlbmRzIFU+IG1hcHBlcikgeyByZXR1cm4gbnVsbDsgfVxuIiArDQotCQkJ
CSIJcHVibGljIDxVPiBNYXBTdHJlYW08VSwgSXRlcmFibGU8Kj4+IGdyb3VwQnlNdWx0aShqYXZh
LnV0aWwuZnVuY3Rpb25zLk1hcHBlcjw/IHN1cGVyICosID8gZXh0ZW5kcyBJdGVyYWJsZTxVPj4g
bWFwcGVyKSB7IHJldHVybiBudWxsOyB9XG4iICsNCi0JCQkJIglwdWJsaWMgSXRlcmFibGU8Kj4g
dW5pcXVlRWxlbWVudHMoKSB7IHJldHVybiBudWxsOyB9XG4iOw0KKwkJCQkiCXB1YmxpYyB2b2lk
IGZvckVhY2goamF2YS51dGlsLmZ1bmN0aW9uLkJsb2NrPD8gc3VwZXIgKj4gYmxvY2spIHt9XG4i
Ow0KIAkJCUlURVJBQkxFX1JBV19JTVBMX0pSRTggPQ0KLQkJCQkiCXB1YmxpYyBib29sZWFuIGlz
RW1wdHkoKSB7IHJldHVybiBmYWxzZTsgfVxuIiArDQotCQkJCSIJcHVibGljIGxvbmcgY291bnQo
KSB7IHJldHVybiAwTDsgfVxuIiArDQotCQkJCSIJcHVibGljIEBTdXBwcmVzc1dhcm5pbmdzKFwi
cmF3dHlwZXNcIikgT2JqZWN0IGdldE9ubHkoKSB7IHJldHVybiBudWxsOyB9XG4iICsNCi0JCQkJ
IglwdWJsaWMgQFN1cHByZXNzV2FybmluZ3MoXCJyYXd0eXBlc1wiKSBPYmplY3QgZ2V0Rmlyc3Qo
KSB7IHJldHVybiBudWxsOyB9XG4iICsNCi0JCQkJIglwdWJsaWMgQFN1cHByZXNzV2FybmluZ3Mo
XCJyYXd0eXBlc1wiKSBPYmplY3QgZ2V0QW55KCkgeyByZXR1cm4gbnVsbDsgfVxuIiArDQotCQkJ
CSIJcHVibGljIEBTdXBwcmVzc1dhcm5pbmdzKFwicmF3dHlwZXNcIikgT2JqZWN0IHJlZHVjZShP
YmplY3QgYmFzZSwgamF2YS51dGlsLmZ1bmN0aW9ucy5CaW5hcnlPcGVyYXRvciByZWR1Y2VyKSB7
IHJldHVybiBudWxsOyB9XG4iICsNCi0JCQkJIglwdWJsaWMgQFN1cHByZXNzV2FybmluZ3MoXCJy
YXd0eXBlc1wiKSBqYXZhLnV0aWwuRmlsbGFibGUgaW50byhqYXZhLnV0aWwuRmlsbGFibGUgdGFy
Z2V0KSB7IHJldHVybiBudWxsOyB9XG4iICsNCi0JCQkJIglwdWJsaWMgQFN1cHByZXNzV2Fybmlu
Z3MoXCJyYXd0eXBlc1wiKSB2b2lkIGZvckVhY2goamF2YS51dGlsLmZ1bmN0aW9ucy5CbG9jayBi
bG9jaykge31cbiIgKw0KLQkJCQkiCXB1YmxpYyBAU3VwcHJlc3NXYXJuaW5ncyhcInJhd3R5cGVz
XCIpIEl0ZXJhYmxlIHNvcnRlZChqYXZhLnV0aWwuQ29tcGFyYXRvciBjb21wYXJhdG9yKSB7IHJl
dHVybiBudWxsOyB9XG4iICsNCi0JCQkJIglwdWJsaWMgQFN1cHByZXNzV2FybmluZ3MoXCJyYXd0
eXBlc1wiKSBib29sZWFuIGFueU1hdGNoKGphdmEudXRpbC5mdW5jdGlvbnMuUHJlZGljYXRlIGZp
bHRlcikgeyByZXR1cm4gZmFsc2U7IH1cbiIgKw0KLQkJCQkiCXB1YmxpYyBAU3VwcHJlc3NXYXJu
aW5ncyhcInJhd3R5cGVzXCIpIGJvb2xlYW4gYWxsTWF0Y2goamF2YS51dGlsLmZ1bmN0aW9ucy5Q
cmVkaWNhdGUgZmlsdGVyKSB7IHJldHVybiBmYWxzZTsgfVxuIiArDQotCQkJCSIJcHVibGljIEBT
dXBwcmVzc1dhcm5pbmdzKFwicmF3dHlwZXNcIikgYm9vbGVhbiBub25lTWF0Y2goamF2YS51dGls
LmZ1bmN0aW9ucy5QcmVkaWNhdGUgZmlsdGVyKSB7IHJldHVybiBmYWxzZTsgfVxuIiArDQotCQkJ
CSIJcHVibGljIEBTdXBwcmVzc1dhcm5pbmdzKFwicmF3dHlwZXNcIikgSXRlcmFibGUgY3VtdWxh
dGUoamF2YS51dGlsLmZ1bmN0aW9ucy5CaW5hcnlPcGVyYXRvciBvcCkgeyByZXR1cm4gbnVsbDsg
fVxuIiArDQotCQkJCSIJcHVibGljIEBTdXBwcmVzc1dhcm5pbmdzKFwicmF3dHlwZXNcIikgTWFw
U3RyZWFtIG1hcHBlZChqYXZhLnV0aWwuZnVuY3Rpb25zLk1hcHBlciBtYXBwZXIpIHsgcmV0dXJu
IG51bGw7IH1cbiIgKw0KLQkJCQkiCXB1YmxpYyBAU3VwcHJlc3NXYXJuaW5ncyhcInJhd3R5cGVz
XCIpIEl0ZXJhYmxlIGZpbHRlcihqYXZhLnV0aWwuZnVuY3Rpb25zLlByZWRpY2F0ZSBwcmVkaWNh
dGUpIHsgcmV0dXJuIG51bGw7IH1cbiIgKw0KLQkJCQkiCXB1YmxpYyBAU3VwcHJlc3NXYXJuaW5n
cyhcInJhd3R5cGVzXCIpIEl0ZXJhYmxlIG1hcChqYXZhLnV0aWwuZnVuY3Rpb25zLk1hcHBlciBt
YXBwZXIpIHsgcmV0dXJuIG51bGw7IH1cbiIgKw0KLQkJCQkiCXB1YmxpYyBAU3VwcHJlc3NXYXJu
aW5ncyhcInJhd3R5cGVzXCIpIGRvdWJsZSBtYXBSZWR1Y2UoamF2YS51dGlsLmZ1bmN0aW9ucy5E
b3VibGVNYXBwZXIgbWFwcGVyLCBkb3VibGUgYmFzZSwgamF2YS51dGlsLmZ1bmN0aW9ucy5Eb3Vi
bGVCaW5hcnlPcGVyYXRvciByZWR1Y2VyKSB7IHJldHVybiAwOyB9XG4iICsNCi0JCQkJIglwdWJs
aWMgQFN1cHByZXNzV2FybmluZ3MoXCJyYXd0eXBlc1wiKSBsb25nIG1hcFJlZHVjZShqYXZhLnV0
aWwuZnVuY3Rpb25zLkxvbmdNYXBwZXIgbWFwcGVyLCBsb25nIGJhc2UsIGphdmEudXRpbC5mdW5j
dGlvbnMuTG9uZ0JpbmFyeU9wZXJhdG9yIHJlZHVjZXIpIHsgcmV0dXJuIDA7IH1cbiIgKw0KLQkJ
CQkiCXB1YmxpYyBAU3VwcHJlc3NXYXJuaW5ncyhcInJhd3R5cGVzXCIpIGludCBtYXBSZWR1Y2Uo
amF2YS51dGlsLmZ1bmN0aW9ucy5JbnRNYXBwZXIgbWFwcGVyLCBpbnQgYmFzZSwgamF2YS51dGls
LmZ1bmN0aW9ucy5JbnRCaW5hcnlPcGVyYXRvciByZWR1Y2VyKSB7IHJldHVybiAwOyB9XG4iICsN
Ci0JCQkJIglwdWJsaWMgQFN1cHByZXNzV2FybmluZ3MoXCJyYXd0eXBlc1wiKSBPYmplY3QgbWFw
UmVkdWNlKGphdmEudXRpbC5mdW5jdGlvbnMuTWFwcGVyIG1hcHBlciwgT2JqZWN0IGJhc2UsIGph
dmEudXRpbC5mdW5jdGlvbnMuQmluYXJ5T3BlcmF0b3IgcmVkdWNlcikgeyByZXR1cm4gbnVsbDsg
fVxuIiArDQotCQkJCSIJcHVibGljIEBTdXBwcmVzc1dhcm5pbmdzKFwicmF3dHlwZXNcIikgSXRl
cmFibGUgZmxhdE1hcChqYXZhLnV0aWwuZnVuY3Rpb25zLk1hcHBlciBtYXBwZXIpIHsgcmV0dXJu
IG51bGw7IH1cbiIgKw0KLQkJCQkiCXB1YmxpYyBAU3VwcHJlc3NXYXJuaW5ncyhcInJhd3R5cGVz
XCIpIE1hcFN0cmVhbSBncm91cEJ5KGphdmEudXRpbC5mdW5jdGlvbnMuTWFwcGVyIG1hcHBlcikg
eyByZXR1cm4gbnVsbDsgfVxuIiArDQotCQkJCSIJcHVibGljIEBTdXBwcmVzc1dhcm5pbmdzKFwi
cmF3dHlwZXNcIikgTWFwU3RyZWFtIGdyb3VwQnlNdWx0aShqYXZhLnV0aWwuZnVuY3Rpb25zLk1h
cHBlciBtYXBwZXIpIHsgcmV0dXJuIG51bGw7IH1cbiIgKw0KLQkJCQkiCXB1YmxpYyBAU3VwcHJl
c3NXYXJuaW5ncyhcInJhd3R5cGVzXCIpIEl0ZXJhYmxlIHVuaXF1ZUVsZW1lbnRzKCkgeyByZXR1
cm4gbnVsbDsgfVxuIjsNCisJCQkJIglwdWJsaWMgQFN1cHByZXNzV2FybmluZ3MoXCJyYXd0eXBl
c1wiKSB2b2lkIGZvckVhY2goamF2YS51dGlsLmZ1bmN0aW9uLkJsb2NrIGJsb2NrKSB7fVxuIjsN
CiAJCQlJVEVSQUJMRV9SQVdfV0lUSE9VVF9JU19FTVBUWV9JTVBMX0pSRTggPQ0KLQkJCQkiCXB1
YmxpYyBsb25nIGNvdW50KCkgeyByZXR1cm4gMEw7IH1cbiIgKw0KLQkJCQkiCXB1YmxpYyBAU3Vw
cHJlc3NXYXJuaW5ncyhcInJhd3R5cGVzXCIpIE9iamVjdCBnZXRPbmx5KCkgeyByZXR1cm4gbnVs
bDsgfVxuIiArDQotCQkJCSIJcHVibGljIEBTdXBwcmVzc1dhcm5pbmdzKFwicmF3dHlwZXNcIikg
T2JqZWN0IGdldEZpcnN0KCkgeyByZXR1cm4gbnVsbDsgfVxuIiArDQotCQkJCSIJcHVibGljIEBT
dXBwcmVzc1dhcm5pbmdzKFwicmF3dHlwZXNcIikgT2JqZWN0IGdldEFueSgpIHsgcmV0dXJuIG51
bGw7IH1cbiIgKw0KLQkJCQkiCXB1YmxpYyBAU3VwcHJlc3NXYXJuaW5ncyhcInJhd3R5cGVzXCIp
IE9iamVjdCByZWR1Y2UoT2JqZWN0IGJhc2UsIGphdmEudXRpbC5mdW5jdGlvbnMuQmluYXJ5T3Bl
cmF0b3IgcmVkdWNlcikgeyByZXR1cm4gbnVsbDsgfVxuIiArDQotCQkJCSIJcHVibGljIEBTdXBw
cmVzc1dhcm5pbmdzKFwicmF3dHlwZXNcIikgamF2YS51dGlsLkZpbGxhYmxlIGludG8oamF2YS51
dGlsLkZpbGxhYmxlIHRhcmdldCkgeyByZXR1cm4gbnVsbDsgfVxuIiArDQotCQkJCSIJcHVibGlj
IEBTdXBwcmVzc1dhcm5pbmdzKFwicmF3dHlwZXNcIikgdm9pZCBmb3JFYWNoKGphdmEudXRpbC5m
dW5jdGlvbnMuQmxvY2sgYmxvY2spIHt9XG4iICsNCi0JCQkJIglwdWJsaWMgQFN1cHByZXNzV2Fy
bmluZ3MoXCJyYXd0eXBlc1wiKSBJdGVyYWJsZSBzb3J0ZWQoamF2YS51dGlsLkNvbXBhcmF0b3Ig
Y29tcGFyYXRvcikgeyByZXR1cm4gbnVsbDsgfVxuIiArDQotCQkJCSIJcHVibGljIEBTdXBwcmVz
c1dhcm5pbmdzKFwicmF3dHlwZXNcIikgYm9vbGVhbiBhbnlNYXRjaChqYXZhLnV0aWwuZnVuY3Rp
b25zLlByZWRpY2F0ZSBmaWx0ZXIpIHsgcmV0dXJuIGZhbHNlOyB9XG4iICsNCi0JCQkJIglwdWJs
aWMgQFN1cHByZXNzV2FybmluZ3MoXCJyYXd0eXBlc1wiKSBib29sZWFuIGFsbE1hdGNoKGphdmEu
dXRpbC5mdW5jdGlvbnMuUHJlZGljYXRlIGZpbHRlcikgeyByZXR1cm4gZmFsc2U7IH1cbiIgKw0K
LQkJCQkiCXB1YmxpYyBAU3VwcHJlc3NXYXJuaW5ncyhcInJhd3R5cGVzXCIpIGJvb2xlYW4gbm9u
ZU1hdGNoKGphdmEudXRpbC5mdW5jdGlvbnMuUHJlZGljYXRlIGZpbHRlcikgeyByZXR1cm4gZmFs
c2U7IH1cbiIgKw0KLQkJCQkiCXB1YmxpYyBAU3VwcHJlc3NXYXJuaW5ncyhcInJhd3R5cGVzXCIp
IEl0ZXJhYmxlIGN1bXVsYXRlKGphdmEudXRpbC5mdW5jdGlvbnMuQmluYXJ5T3BlcmF0b3Igb3Ap
IHsgcmV0dXJuIG51bGw7IH1cbiIgKw0KLQkJCQkiCXB1YmxpYyBAU3VwcHJlc3NXYXJuaW5ncyhc
InJhd3R5cGVzXCIpIE1hcFN0cmVhbSBtYXBwZWQoamF2YS51dGlsLmZ1bmN0aW9ucy5NYXBwZXIg
bWFwcGVyKSB7IHJldHVybiBudWxsOyB9XG4iICsNCi0JCQkJIglwdWJsaWMgQFN1cHByZXNzV2Fy
bmluZ3MoXCJyYXd0eXBlc1wiKSBJdGVyYWJsZSBmaWx0ZXIoamF2YS51dGlsLmZ1bmN0aW9ucy5Q
cmVkaWNhdGUgcHJlZGljYXRlKSB7IHJldHVybiBudWxsOyB9XG4iICsNCi0JCQkJIglwdWJsaWMg
QFN1cHByZXNzV2FybmluZ3MoXCJyYXd0eXBlc1wiKSBJdGVyYWJsZSBtYXAoamF2YS51dGlsLmZ1
bmN0aW9ucy5NYXBwZXIgbWFwcGVyKSB7IHJldHVybiBudWxsOyB9XG4iICsNCi0JCQkJIglwdWJs
aWMgQFN1cHByZXNzV2FybmluZ3MoXCJyYXd0eXBlc1wiKSBkb3VibGUgbWFwUmVkdWNlKGphdmEu
dXRpbC5mdW5jdGlvbnMuRG91YmxlTWFwcGVyIG1hcHBlciwgZG91YmxlIGJhc2UsIGphdmEudXRp
bC5mdW5jdGlvbnMuRG91YmxlQmluYXJ5T3BlcmF0b3IgcmVkdWNlcikgeyByZXR1cm4gMDsgfVxu
IiArDQotCQkJCSIJcHVibGljIEBTdXBwcmVzc1dhcm5pbmdzKFwicmF3dHlwZXNcIikgbG9uZyBt
YXBSZWR1Y2UoamF2YS51dGlsLmZ1bmN0aW9ucy5Mb25nTWFwcGVyIG1hcHBlciwgbG9uZyBiYXNl
LCBqYXZhLnV0aWwuZnVuY3Rpb25zLkxvbmdCaW5hcnlPcGVyYXRvciByZWR1Y2VyKSB7IHJldHVy
biAwOyB9XG4iICsNCi0JCQkJIglwdWJsaWMgQFN1cHByZXNzV2FybmluZ3MoXCJyYXd0eXBlc1wi
KSBpbnQgbWFwUmVkdWNlKGphdmEudXRpbC5mdW5jdGlvbnMuSW50TWFwcGVyIG1hcHBlciwgaW50
IGJhc2UsIGphdmEudXRpbC5mdW5jdGlvbnMuSW50QmluYXJ5T3BlcmF0b3IgcmVkdWNlcikgeyBy
ZXR1cm4gMDsgfVxuIiArDQotCQkJCSIJcHVibGljIEBTdXBwcmVzc1dhcm5pbmdzKFwicmF3dHlw
ZXNcIikgT2JqZWN0IG1hcFJlZHVjZShqYXZhLnV0aWwuZnVuY3Rpb25zLk1hcHBlciBtYXBwZXIs
IE9iamVjdCBiYXNlLCBqYXZhLnV0aWwuZnVuY3Rpb25zLkJpbmFyeU9wZXJhdG9yIHJlZHVjZXIp
IHsgcmV0dXJuIG51bGw7IH1cbiIgKw0KLQkJCQkiCXB1YmxpYyBAU3VwcHJlc3NXYXJuaW5ncyhc
InJhd3R5cGVzXCIpIEl0ZXJhYmxlIGZsYXRNYXAoamF2YS51dGlsLmZ1bmN0aW9ucy5NYXBwZXIg
bWFwcGVyKSB7IHJldHVybiBudWxsOyB9XG4iICsNCi0JCQkJIglwdWJsaWMgQFN1cHByZXNzV2Fy
bmluZ3MoXCJyYXd0eXBlc1wiKSBNYXBTdHJlYW0gZ3JvdXBCeShqYXZhLnV0aWwuZnVuY3Rpb25z
Lk1hcHBlciBtYXBwZXIpIHsgcmV0dXJuIG51bGw7IH1cbiIgKw0KLQkJCQkiCXB1YmxpYyBAU3Vw
cHJlc3NXYXJuaW5ncyhcInJhd3R5cGVzXCIpIE1hcFN0cmVhbSBncm91cEJ5TXVsdGkoamF2YS51
dGlsLmZ1bmN0aW9ucy5NYXBwZXIgbWFwcGVyKSB7IHJldHVybiBudWxsOyB9XG4iICsNCi0JCQkJ
IglwdWJsaWMgQFN1cHByZXNzV2FybmluZ3MoXCJyYXd0eXBlc1wiKSBJdGVyYWJsZSB1bmlxdWVF
bGVtZW50cygpIHsgcmV0dXJuIG51bGw7IH1cbiI7DQorCQkJCSIJcHVibGljIEBTdXBwcmVzc1dh
cm5pbmdzKFwicmF3dHlwZXNcIikgdm9pZCBmb3JFYWNoKGphdmEudXRpbC5mdW5jdGlvbi5CbG9j
ayBibG9jaykge31cbiI7DQogCQkJTUFQX0lNUExfSlJFOCA9IC8vICchJyBzdGFuZHMgZm9yICdL
LFYnLCAnKicgZm9yICdLJw0KIAkJCQkiCXB1YmxpYyBJdGVyYWJsZTxCaVZhbHVlPCE+PiBhc0l0
ZXJhYmxlKCkgeyByZXR1cm4gbnVsbDsgfVxuIiArDQogCQkJCSIJcHVibGljIEl0ZXJhYmxlPCo+
IGlucHV0cygpIHsgcmV0dXJuIG51bGw7IH1cbiI7DQpAQCAtMTk3LDQzICsxMjksNDMgQEANCiAJ
CQlNQVBfU1RSRUFNX0lNUExfSlJFOCA9IC8vICcqJyBzdGFuZHMgZm9yICdLJywgJyUnIGZvciAn
VicNCiAJCQkJIglwdWJsaWMgQmlWYWx1ZTwqLCU+IGdldE9ubHkoKSB7IHJldHVybiBudWxsOyB9
XG4iICsNCiAJCQkJIglwdWJsaWMgPEEgZXh0ZW5kcyBNYXA8PyBzdXBlciAqLCA/IHN1cGVyICU+
PiBBICBpbnRvKEEgZGVzdGluYXRpb24pIHsgcmV0dXJuIG51bGw7IH1cbiIgKw0KLQkJCQkiCXB1
YmxpYyB2b2lkIGZvckVhY2goamF2YS51dGlsLmZ1bmN0aW9ucy5CaUJsb2NrPD8gc3VwZXIgKiwg
PyBzdXBlciAlPiBibG9jaykge31cbiIgKw0KKwkJCQkiCXB1YmxpYyB2b2lkIGZvckVhY2goamF2
YS51dGlsLmZ1bmN0aW9uLkJpQmxvY2s8PyBzdXBlciAqLCA/IHN1cGVyICU+IGJsb2NrKSB7fVxu
IiArDQogCQkJCSIJcHVibGljIE1hcFN0cmVhbTwqLCBJdGVyYWJsZTwlPj4gYXNNdWx0aVN0cmVh
bSgpIHsgcmV0dXJuIG51bGw7IH1cbiIgKw0KLQkJCQkiCXB1YmxpYyA8Vz4gTWFwU3RyZWFtPCos
IEl0ZXJhYmxlPFc+PiBtYXBWYWx1ZXNNdWx0aShmaW5hbCBqYXZhLnV0aWwuZnVuY3Rpb25zLkJp
TWFwcGVyPD8gc3VwZXIgKiwgPyBzdXBlciAlLCBJdGVyYWJsZTxXPj4gbWFwcGVyKSB7IHJldHVy
biBudWxsOyB9XG4iICsNCisJCQkJIglwdWJsaWMgPFc+IE1hcFN0cmVhbTwqLCBJdGVyYWJsZTxX
Pj4gbWFwVmFsdWVzTXVsdGkoZmluYWwgamF2YS51dGlsLmZ1bmN0aW9uLkJpTWFwcGVyPD8gc3Vw
ZXIgKiwgPyBzdXBlciAlLCBJdGVyYWJsZTxXPj4gbWFwcGVyKSB7IHJldHVybiBudWxsOyB9XG4i
ICsNCiAJCQkJIglwdWJsaWMgTWFwU3RyZWFtPCosJT4gc29ydGVkKGphdmEudXRpbC5Db21wYXJh
dG9yPD8gc3VwZXIgKj4gY29tcGFyYXRvcikgeyByZXR1cm4gbnVsbDsgfVxuIiArDQotCQkJCSIJ
cHVibGljIGJvb2xlYW4gYW55TWF0Y2goamF2YS51dGlsLmZ1bmN0aW9ucy5CaVByZWRpY2F0ZTw/
IHN1cGVyICosID8gc3VwZXIgJT4gcHJlZGljYXRlKSB7IHJldHVybiBmYWxzZTsgfVxuIiArDQot
CQkJCSIJcHVibGljIGJvb2xlYW4gYWxsTWF0Y2goamF2YS51dGlsLmZ1bmN0aW9ucy5CaVByZWRp
Y2F0ZTw/IHN1cGVyICosID8gc3VwZXIgJT4gcHJlZGljYXRlKSB7IHJldHVybiBmYWxzZTsgfVxu
IiArDQotCQkJCSIJcHVibGljIGJvb2xlYW4gbm9uZU1hdGNoKGphdmEudXRpbC5mdW5jdGlvbnMu
QmlQcmVkaWNhdGU8PyBzdXBlciAqLCA/IHN1cGVyICU+IHByZWRpY2F0ZSkgeyByZXR1cm4gZmFs
c2U7IH1cbiIgKw0KKwkJCQkiCXB1YmxpYyBib29sZWFuIGFueU1hdGNoKGphdmEudXRpbC5mdW5j
dGlvbi5CaVByZWRpY2F0ZTw/IHN1cGVyICosID8gc3VwZXIgJT4gcHJlZGljYXRlKSB7IHJldHVy
biBmYWxzZTsgfVxuIiArDQorCQkJCSIJcHVibGljIGJvb2xlYW4gYWxsTWF0Y2goamF2YS51dGls
LmZ1bmN0aW9uLkJpUHJlZGljYXRlPD8gc3VwZXIgKiwgPyBzdXBlciAlPiBwcmVkaWNhdGUpIHsg
cmV0dXJuIGZhbHNlOyB9XG4iICsNCisJCQkJIglwdWJsaWMgYm9vbGVhbiBub25lTWF0Y2goamF2
YS51dGlsLmZ1bmN0aW9uLkJpUHJlZGljYXRlPD8gc3VwZXIgKiwgPyBzdXBlciAlPiBwcmVkaWNh
dGUpIHsgcmV0dXJuIGZhbHNlOyB9XG4iICsNCiAJCQkJIglwdWJsaWMgTWFwU3RyZWFtPCosJT4g
bWVyZ2UoTWFwU3RyZWFtPCosJT4gb3RoZXIpIHsgcmV0dXJuIG51bGw7IH1cbiIgKw0KLQkJCQki
CXB1YmxpYyBNYXBTdHJlYW08KiwlPiBmaWx0ZXIoZmluYWwgamF2YS51dGlsLmZ1bmN0aW9ucy5C
aVByZWRpY2F0ZTw/IHN1cGVyICosID8gc3VwZXIgJT4gcHJlZGljYXRlKSB7IHJldHVybiBudWxs
OyB9XG4iICsNCisJCQkJIglwdWJsaWMgTWFwU3RyZWFtPCosJT4gZmlsdGVyKGZpbmFsIGphdmEu
dXRpbC5mdW5jdGlvbi5CaVByZWRpY2F0ZTw/IHN1cGVyICosID8gc3VwZXIgJT4gcHJlZGljYXRl
KSB7IHJldHVybiBudWxsOyB9XG4iICsNCiAJCQkJIglwdWJsaWMgTWFwU3RyZWFtPCUsKj4gc3dh
cCgpIHsgcmV0dXJuIG51bGw7IH1cbiIgKw0KIAkJCQkiCXB1YmxpYyBCaVZhbHVlPCosJT4gZ2V0
QW55KCkgeyByZXR1cm4gbnVsbDsgfVxuIiArDQotCQkJCSIJcHVibGljIE1hcFN0cmVhbTwqLCU+
IGZpbHRlcktleXMoZmluYWwgamF2YS51dGlsLmZ1bmN0aW9ucy5QcmVkaWNhdGU8Kj4gZmlsdGVy
KSB7IHJldHVybiBudWxsOyB9XG4iICsNCi0JCQkJIglwdWJsaWMgTWFwU3RyZWFtPCosJT4gZmls
dGVyVmFsdWVzKGZpbmFsIGphdmEudXRpbC5mdW5jdGlvbnMuUHJlZGljYXRlPCU+IGZpbHRlcikg
eyByZXR1cm4gbnVsbDsgfVxuIiArDQotCQkJCSIJcHVibGljIDxBIGV4dGVuZHMgTWFwPD8gc3Vw
ZXIgKiwgQz4sQyBleHRlbmRzIENvbGxlY3Rpb248PyBzdXBlciAlPj4gQSBpbnRvTXVsdGkoQSBk
ZXN0aW5hdGlvbiwgamF2YS51dGlsLmZ1bmN0aW9ucy5GYWN0b3J5PEM+IGZhY3RvcnkpIHsgcmV0
dXJuIG51bGw7IH1cbiIgKw0KLQkJCQkiCXB1YmxpYyA8Vz4gTWFwU3RyZWFtPCosVz4gbWFwVmFs
dWVzKGZpbmFsIGphdmEudXRpbC5mdW5jdGlvbnMuTWFwcGVyPCUsVz4gbWFwcGVyKSB7IHJldHVy
biBudWxsOyB9XG4iICsNCisJCQkJIglwdWJsaWMgTWFwU3RyZWFtPCosJT4gZmlsdGVyS2V5cyhm
aW5hbCBqYXZhLnV0aWwuZnVuY3Rpb24uUHJlZGljYXRlPCo+IGZpbHRlcikgeyByZXR1cm4gbnVs
bDsgfVxuIiArDQorCQkJCSIJcHVibGljIE1hcFN0cmVhbTwqLCU+IGZpbHRlclZhbHVlcyhmaW5h
bCBqYXZhLnV0aWwuZnVuY3Rpb24uUHJlZGljYXRlPCU+IGZpbHRlcikgeyByZXR1cm4gbnVsbDsg
fVxuIiArDQorCQkJCSIJcHVibGljIDxBIGV4dGVuZHMgTWFwPD8gc3VwZXIgKiwgQz4sQyBleHRl
bmRzIENvbGxlY3Rpb248PyBzdXBlciAlPj4gQSBpbnRvTXVsdGkoQSBkZXN0aW5hdGlvbiwgamF2
YS51dGlsLmZ1bmN0aW9uLkZhY3Rvcnk8Qz4gZmFjdG9yeSkgeyByZXR1cm4gbnVsbDsgfVxuIiAr
DQorCQkJCSIJcHVibGljIDxXPiBNYXBTdHJlYW08KixXPiBtYXBWYWx1ZXMoZmluYWwgamF2YS51
dGlsLmZ1bmN0aW9uLk1hcHBlcjwlLFc+IG1hcHBlcikgeyByZXR1cm4gbnVsbDsgfVxuIiArDQog
CQkJCSIJcHVibGljIEJpVmFsdWU8KiwlPiBnZXRGaXJzdCgpIHsgcmV0dXJuIG51bGw7IH1cbiIg
Kw0KLQkJCQkiCXB1YmxpYyA8Vz4gTWFwU3RyZWFtPCosIFc+IG1hcChmaW5hbCBqYXZhLnV0aWwu
ZnVuY3Rpb25zLkJpTWFwcGVyPCosICUsIFc+IG1hcHBlcikgeyByZXR1cm4gbnVsbDsgfVxuIjsN
CisJCQkJIglwdWJsaWMgPFc+IE1hcFN0cmVhbTwqLCBXPiBtYXAoZmluYWwgamF2YS51dGlsLmZ1
bmN0aW9uLkJpTWFwcGVyPCosICUsIFc+IG1hcHBlcikgeyByZXR1cm4gbnVsbDsgfVxuIjsNCiAJ
CQlNQVBfU1RSRUFNX1JBV19JTVBMX0pSRTggPQ0KIAkJCQkiCXB1YmxpYyBCaVZhbHVlIGdldE9u
bHkoKSB7IHJldHVybiBudWxsOyB9XG4iICsNCiAJCQkJIglwdWJsaWMgTWFwIGludG8oTWFwIGRl
c3RpbmF0aW9uKSB7IHJldHVybiBudWxsOyB9XG4iICsNCi0JCQkJIglwdWJsaWMgdm9pZCBmb3JF
YWNoKGphdmEudXRpbC5mdW5jdGlvbnMuQmlCbG9jayBibG9jaykge31cbiIgKw0KKwkJCQkiCXB1
YmxpYyB2b2lkIGZvckVhY2goamF2YS51dGlsLmZ1bmN0aW9uLkJpQmxvY2sgYmxvY2spIHt9XG4i
ICsNCiAJCQkJIglwdWJsaWMgTWFwU3RyZWFtIGFzTXVsdGlTdHJlYW0oKSB7IHJldHVybiBudWxs
OyB9XG4iICsNCi0JCQkJIglwdWJsaWMgTWFwU3RyZWFtIG1hcFZhbHVlc011bHRpKGZpbmFsIGph
dmEudXRpbC5mdW5jdGlvbnMuQmlNYXBwZXIgbWFwcGVyKSB7IHJldHVybiBudWxsOyB9XG4iICsN
CisJCQkJIglwdWJsaWMgTWFwU3RyZWFtIG1hcFZhbHVlc011bHRpKGZpbmFsIGphdmEudXRpbC5m
dW5jdGlvbi5CaU1hcHBlciBtYXBwZXIpIHsgcmV0dXJuIG51bGw7IH1cbiIgKw0KIAkJCQkiCXB1
YmxpYyBNYXBTdHJlYW0gc29ydGVkKGphdmEudXRpbC5Db21wYXJhdG9yIGNvbXBhcmF0b3IpIHsg
cmV0dXJuIG51bGw7IH1cbiIgKw0KLQkJCQkiCXB1YmxpYyBib29sZWFuIGFueU1hdGNoKGphdmEu
dXRpbC5mdW5jdGlvbnMuQmlQcmVkaWNhdGUgcHJlZGljYXRlKSB7IHJldHVybiBmYWxzZTsgfVxu
IiArDQotCQkJCSIJcHVibGljIGJvb2xlYW4gYWxsTWF0Y2goamF2YS51dGlsLmZ1bmN0aW9ucy5C
aVByZWRpY2F0ZSBwcmVkaWNhdGUpIHsgcmV0dXJuIGZhbHNlOyB9XG4iICsNCi0JCQkJIglwdWJs
aWMgYm9vbGVhbiBub25lTWF0Y2goamF2YS51dGlsLmZ1bmN0aW9ucy5CaVByZWRpY2F0ZSBwcmVk
aWNhdGUpIHsgcmV0dXJuIGZhbHNlOyB9XG4iICsNCisJCQkJIglwdWJsaWMgYm9vbGVhbiBhbnlN
YXRjaChqYXZhLnV0aWwuZnVuY3Rpb24uQmlQcmVkaWNhdGUgcHJlZGljYXRlKSB7IHJldHVybiBm
YWxzZTsgfVxuIiArDQorCQkJCSIJcHVibGljIGJvb2xlYW4gYWxsTWF0Y2goamF2YS51dGlsLmZ1
bmN0aW9uLkJpUHJlZGljYXRlIHByZWRpY2F0ZSkgeyByZXR1cm4gZmFsc2U7IH1cbiIgKw0KKwkJ
CQkiCXB1YmxpYyBib29sZWFuIG5vbmVNYXRjaChqYXZhLnV0aWwuZnVuY3Rpb24uQmlQcmVkaWNh
dGUgcHJlZGljYXRlKSB7IHJldHVybiBmYWxzZTsgfVxuIiArDQogCQkJCSIJcHVibGljIE1hcFN0
cmVhbSBtZXJnZShNYXBTdHJlYW0gb3RoZXIpIHsgcmV0dXJuIG51bGw7IH1cbiIgKw0KLQkJCQki
CXB1YmxpYyBNYXBTdHJlYW0gZmlsdGVyKGZpbmFsIGphdmEudXRpbC5mdW5jdGlvbnMuQmlQcmVk
aWNhdGUgcHJlZGljYXRlKSB7IHJldHVybiBudWxsOyB9XG4iICsNCisJCQkJIglwdWJsaWMgTWFw
U3RyZWFtIGZpbHRlcihmaW5hbCBqYXZhLnV0aWwuZnVuY3Rpb24uQmlQcmVkaWNhdGUgcHJlZGlj
YXRlKSB7IHJldHVybiBudWxsOyB9XG4iICsNCiAJCQkJIglwdWJsaWMgTWFwU3RyZWFtIHN3YXAo
KSB7IHJldHVybiBudWxsOyB9XG4iICsNCiAJCQkJIglwdWJsaWMgQmlWYWx1ZSBnZXRBbnkoKSB7
IHJldHVybiBudWxsOyB9XG4iICsNCi0JCQkJIglwdWJsaWMgTWFwU3RyZWFtIGZpbHRlcktleXMo
ZmluYWwgamF2YS51dGlsLmZ1bmN0aW9ucy5QcmVkaWNhdGUgZmlsdGVyKSB7IHJldHVybiBudWxs
OyB9XG4iICsNCi0JCQkJIglwdWJsaWMgTWFwU3RyZWFtIGZpbHRlclZhbHVlcyhmaW5hbCBqYXZh
LnV0aWwuZnVuY3Rpb25zLlByZWRpY2F0ZSBmaWx0ZXIpIHsgcmV0dXJuIG51bGw7IH1cbiIgKw0K
LQkJCQkiCXB1YmxpYyBNYXAgaW50b011bHRpKE1hcCBkZXN0aW5hdGlvbiwgamF2YS51dGlsLmZ1
bmN0aW9ucy5GYWN0b3J5IGZhY3RvcnkpIHsgcmV0dXJuIG51bGw7IH1cbiIgKw0KLQkJCQkiCXB1
YmxpYyBNYXBTdHJlYW0gbWFwVmFsdWVzKGZpbmFsIGphdmEudXRpbC5mdW5jdGlvbnMuTWFwcGVy
IG1hcHBlcikgeyByZXR1cm4gbnVsbDsgfVxuIiArDQorCQkJCSIJcHVibGljIE1hcFN0cmVhbSBm
aWx0ZXJLZXlzKGZpbmFsIGphdmEudXRpbC5mdW5jdGlvbi5QcmVkaWNhdGUgZmlsdGVyKSB7IHJl
dHVybiBudWxsOyB9XG4iICsNCisJCQkJIglwdWJsaWMgTWFwU3RyZWFtIGZpbHRlclZhbHVlcyhm
aW5hbCBqYXZhLnV0aWwuZnVuY3Rpb24uUHJlZGljYXRlIGZpbHRlcikgeyByZXR1cm4gbnVsbDsg
fVxuIiArDQorCQkJCSIJcHVibGljIE1hcCBpbnRvTXVsdGkoTWFwIGRlc3RpbmF0aW9uLCBqYXZh
LnV0aWwuZnVuY3Rpb24uRmFjdG9yeSBmYWN0b3J5KSB7IHJldHVybiBudWxsOyB9XG4iICsNCisJ
CQkJIglwdWJsaWMgTWFwU3RyZWFtIG1hcFZhbHVlcyhmaW5hbCBqYXZhLnV0aWwuZnVuY3Rpb24u
TWFwcGVyIG1hcHBlcikgeyByZXR1cm4gbnVsbDsgfVxuIiArDQogCQkJCSIJcHVibGljIEJpVmFs
dWUgZ2V0Rmlyc3QoKSB7IHJldHVybiBudWxsOyB9XG4iICsNCi0JCQkJIglwdWJsaWMgTWFwU3Ry
ZWFtIG1hcChmaW5hbCBqYXZhLnV0aWwuZnVuY3Rpb25zLkJpTWFwcGVyIG1hcHBlcikgeyByZXR1
cm4gbnVsbDsgfVxuIjsNCisJCQkJIglwdWJsaWMgTWFwU3RyZWFtIG1hcChmaW5hbCBqYXZhLnV0
aWwuZnVuY3Rpb24uQmlNYXBwZXIgbWFwcGVyKSB7IHJldHVybiBudWxsOyB9XG4iOw0KIAkJfSBl
bHNlIHsNCiAJCQlDT01QQVJBVE9SX0lNUExfSlJFOCA9ICIiOwkJCQ0KIAkJCUNPTVBBUkFUT1Jf
UkFXX0lNUExfSlJFOCA9ICIiOw0KZGlmZiAtLWdpdCBzcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9Gb3JlYWNoU3RhdGVtZW50VGVzdC5qYXZhIHNyYy9v
cmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0ZvcmVhY2hTdGF0
ZW1lbnRUZXN0LmphdmENCmluZGV4IGM5YzhlYjEuLmUwMTg4YjMgMTAwNjQ0DQotLS0gc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vRm9yZWFjaFN0YXRl
bWVudFRlc3QuamF2YQ0KKysrIHNyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxl
ci9yZWdyZXNzaW9uL0ZvcmVhY2hTdGF0ZW1lbnRUZXN0LmphdmENCkBAIC0xMDg5LDcgKzEwODks
NyBAQA0KIC8qDQogICogVHlwZSBtaXNtYXRjaCwgdXNpbmcgbm9uIHBhcmFtZXRlcml6ZWQgY29s
bGVjdGlvbiB0eXBlIChpbmRpcmVjdGx5IGltcGxlbWVudGluZyBwYXJhbWV0ZXJpemVkIHR5cGUp
DQogICovDQotcHVibGljIHZvaWQgX3Rlc3QwMjMoKSB7DQorcHVibGljIHZvaWQgdGVzdDAyMygp
IHsNCiAJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoDQogCQkJbmV3IFN0cmluZ1tdIHsNCiAJCQkJIlgu
amF2YSIsDQpAQCAtMTU5NSw3ICsxNTk1LDcgQEANCiAJCSIiKTsNCiB9DQogLy9odHRwczovL2J1
Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MTA4NzgzIC0gdmFyaWF0aW9uDQot
cHVibGljIHZvaWQgX3Rlc3QwMzQoKSB0aHJvd3MgRXhjZXB0aW9uIHsNCitwdWJsaWMgdm9pZCB0
ZXN0MDM0KCkgdGhyb3dzIEV4Y2VwdGlvbiB7DQogCXRoaXMucnVuQ29uZm9ybVRlc3QoDQogCQlu
ZXcgU3RyaW5nW10gew0KIAkJCSJYLmphdmEiLA0KQEAgLTE2OTAsNyArMTY5MCw3IEBADQogCX0N
CiB9DQogLy9odHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MTA4
NzgzIC0gdmFyaWF0aW9uDQotcHVibGljIHZvaWQgX3Rlc3QwMzUoKSB0aHJvd3MgRXhjZXB0aW9u
IHsNCitwdWJsaWMgdm9pZCB0ZXN0MDM1KCkgdGhyb3dzIEV4Y2VwdGlvbiB7DQogCXRoaXMucnVu
Q29uZm9ybVRlc3QoDQogCQluZXcgU3RyaW5nW10gew0KIAkJCSJYLmphdmEiLA0KQEAgLTE3ODcs
NyArMTc4Nyw3IEBADQogCX0NCiB9DQogLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mv
c2hvd19idWcuY2dpP2lkPTEwODc4Mw0KLXB1YmxpYyB2b2lkIF90ZXN0MDM2KCkgdGhyb3dzIEV4
Y2VwdGlvbiB7DQorcHVibGljIHZvaWQgdGVzdDAzNigpIHRocm93cyBFeGNlcHRpb24gew0KIAl0
aGlzLnJ1bkNvbmZvcm1UZXN0KA0KIAkJbmV3IFN0cmluZ1tdIHsNCiAJCQkiWC5qYXZhIiwNCkBA
IC0xOTkwLDcgKzE5OTAsNyBAQA0KIAl9DQogfQ0KIC8vaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3Jn
L2J1Z3Mvc2hvd19idWcuY2dpP2lkPTE1MDA3NA0KLXB1YmxpYyB2b2lkIF90ZXN0MDM5KCkgdGhy
b3dzIEV4Y2VwdGlvbiB7DQorcHVibGljIHZvaWQgdGVzdDAzOSgpIHRocm93cyBFeGNlcHRpb24g
ew0KIAl0aGlzLnJ1bkNvbmZvcm1UZXN0KA0KIAkJbmV3IFN0cmluZ1tdIHsNCiAJCQkiWC5qYXZh
IiwNCkBAIC0yMDIzLDYgKzIwMjMsNyBAQA0KIAkJCSIJCQkJU3lzdGVtLm91dC5wcmludGxuKFwi
cmVtb3ZlXCIpO1xuIiArDQogCQkJIgkJCQl0aGlzLml0ZXJhdG9yLnJlbW92ZSgpO1xuIiArDQog
CQkJIgkJCX1cbiIgKw0KKwkJCUlURVJBVE9SX0lNUExfSlJFOC5yZXBsYWNlQWxsKCJcXCoiLCAi
VCIpICsNCiAJCQkiCQl9XG4iICsNCiAJCQkiCQlcbiIgKw0KIAkJCSIgICAgICAgIHN0YXRpYyBT
ZXQ8T2JqZWN0PiBpbml0Rm9yRWFjaCgpICAgICAgICB7XG4iICsNCkBAIC0yMDgzLDcgKzIwODQs
NyBAQA0KIAl9DQogfQ0KIC8vaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcu
Y2dpP2lkPTE1MDA3NA0KLXB1YmxpYyB2b2lkIF90ZXN0MDQwKCkgdGhyb3dzIEV4Y2VwdGlvbiB7
DQorcHVibGljIHZvaWQgdGVzdDA0MCgpIHRocm93cyBFeGNlcHRpb24gew0KIAlNYXAgb3B0aW9u
cyA9IGdldENvbXBpbGVyT3B0aW9ucygpOw0KIAlvcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMu
T1BUSU9OX1ByZXNlcnZlVW51c2VkTG9jYWwsIENvbXBpbGVyT3B0aW9ucy5QUkVTRVJWRSk7DQog
DQpAQCAtMjExOSw2ICsyMTIwLDcgQEANCiAJCQkiCQkJCVN5c3RlbS5vdXQucHJpbnRsbihcInJl
bW92ZVwiKTtcbiIgKw0KIAkJCSIJCQkJdGhpcy5pdGVyYXRvci5yZW1vdmUoKTtcbiIgKw0KIAkJ
CSIJCQl9XG4iICsNCisJCQlJVEVSQVRPUl9JTVBMX0pSRTgucmVwbGFjZUFsbCgiXFwqIiwgIlQi
KSArDQogCQkJIgkJfVxuIiArDQogCQkJIgkJXG4iICsNCiAJCQkiICAgICAgICBzdGF0aWMgU2V0
PE9iamVjdD4gaW5pdEZvckVhY2goKSAgICAgICAge1xuIiAr
</data>

          </attachment>
      

    </bug>

</bugzilla>