<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>336544</bug_id>
          
          <creation_ts>2011-02-07 12:37:00 -0500</creation_ts>
          <short_desc>[regression][compiler] Source flagged as dead code incorrectly.</short_desc>
          <delta_ts>2011-09-14 11:08:37 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.6</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows XP</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>blocker</bug_severity>
          <target_milestone>3.6.2</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Harry Tongelidis">harry.tongelidis</reporter>
          <assigned_to name="Ayushman Jain">amj87.iitr</assigned_to>
          <cc>cgold</cc>
    
    <cc>daniel_megert</cc>
    
    <cc>david_williams</cc>
    
    <cc>jarthana</cc>
    
    <cc>martin.oberhuber</cc>
    
    <cc>Mike_Wilson</cc>
    
    <cc>niels</cc>
    
    <cc>Olivier_Thomann</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      <flag name="pmc_approved"
          id="39136"
          type_id="2"
          status="+"
          setter="daniel_megert"
    />
    <flag name="review"
          id="39141"
          type_id="1"
          status="+"
          setter="srikanth_sankaran"
    />
    <flag name="review"
          id="39142"
          type_id="1"
          status="+"
          setter="Olivier_Thomann"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1879357</commentid>
    <comment_count>0</comment_count>
    <who name="Harry Tongelidis">harry.tongelidis</who>
    <bug_when>2011-02-07 12:37:34 -0500</bug_when>
    <thetext>Build Identifier: Helios Service Release 1, Build id: 20100917-0705

Compile the source below in &apos;Helios Service Release 1&apos;. The if statement never gets executed. When looking at the byte code you could see that the if statement was eliminated.


public class Main {

	public static void main( String ...strings )
	{
		Integer i1 = null;
		Integer i2 = (i1 = getInt()) == null ? null : i1;

		if( i2 != null )
		{
			/* this never gets executed in eclipse 3.6.1
			 * its flagged as dead code
			 * the if statement does not exist in the byte code compiled with 3.6.1
			 * it is present in 3.5 byte code and does get executed 
			 */
			System.out.println(&quot;Shut down nuclear reactors now!!&quot;); 
		}
	}

	private static Integer getInt() {
		return new Integer(0);
	}
}

Reproducible: Always

Steps to Reproduce:
1. Compile code
2. Run code
3. Ensure the airplane you will be flying in on you next trip does not use any code compiled with the JDT compiler.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1879363</commentid>
    <comment_count>1</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-02-07 12:43:35 -0500</bug_when>
    <thetext>Reproduced with HEAD.
Ayushman, please investigate.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1879364</commentid>
    <comment_count>2</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-02-07 12:45:17 -0500</bug_when>
    <thetext>Replacing the two lines with:
		Integer i1 = getInt();
		Integer i2 = i1 == null ? null : i1;
makes the code work again.

The problem comes from assignment inside the condition of a conditional expression.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1879371</commentid>
    <comment_count>3</comment_count>
      <attachid>188459</attachid>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-02-07 12:56:34 -0500</bug_when>
    <thetext>Created attachment 188459
Add regression tests

Add two regression tests.
One with assignment inside the condition expression condition and one with the assignment inside the local declaration.
The second one already works. I still want to add it to make sure both cases are covered.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1879374</commentid>
    <comment_count>4</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-02-07 12:58:41 -0500</bug_when>
    <thetext>This is a regression over 3.5.2. So this needs a fix for Indigo.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1879407</commentid>
    <comment_count>5</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-02-07 13:57:11 -0500</bug_when>
    <thetext>This looks like a nasty manifestation of bug 324178, which doesn&apos;t have an easy fix.

Will need to investigate further.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1879415</commentid>
    <comment_count>6</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-02-07 14:15:05 -0500</bug_when>
    <thetext>(In reply to comment #5)
&gt; This looks like a nasty manifestation of bug 324178, which doesn&apos;t have an easy fix.
I don&apos;t think this is exactly the same issue. In this case, the problem comes from the fact that the null info of the local declaration is retrieved before the initialization of the local is done.
Let me know if I missed something.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1879418</commentid>
    <comment_count>7</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-02-07 14:23:37 -0500</bug_when>
    <thetext>(In reply to comment #6)
&gt; (In reply to comment #5)
&gt; &gt; This looks like a nasty manifestation of bug 324178, which doesn&apos;t have an easy fix.
&gt; I don&apos;t think this is exactly the same issue. In this case, the problem comes
&gt; from the fact that the null info of the local declaration is retrieved before
&gt; the initialization of the local is done.
&gt; Let me know if I missed something.

The problem in this case that when we call the nullStatus() method from LocalDeclaration.analyseCode while trying to analyse the declaration of i2, we havent yet initialized the condition of the conditional expression. That means, we havent really analysed i1 = getInt() yet, and at this stage we&apos;re still considering the old value of i1 ie. null. So null status from both branches of the conditional expression comes out to be null.

The analysis of the condition is done together with the analysis of the whole conditional expression after the nullStatus is calculated. This is done in 
this.initialization.analyseCode(currentScope, flowContext, flowInfo)	.unconditionalInits();

on line 76 of LocalDeclaration.analyseCode()

We should thus make sure that the condition of the conditional expression gets analysed before we calculate the null status. I&apos;m testing a possible fix.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1879422</commentid>
    <comment_count>8</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-02-07 14:30:09 -0500</bug_when>
    <thetext>It tried to move the nullStatus call after the analysis of the initialization and it seems to fix this issue.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1879592</commentid>
    <comment_count>9</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-02-08 00:27:49 -0500</bug_when>
    <thetext>(In reply to comment #8)
&gt; It tried to move the nullStatus call after the analysis of the initialization
&gt; and it seems to fix this issue.

Yeah, thats exactly what I was running the test suite on before going to sleep last night. Woke up to find all tests green. :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1879600</commentid>
    <comment_count>10</comment_count>
      <attachid>188496</attachid>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-02-08 00:52:44 -0500</bug_when>
    <thetext>Created attachment 188496
proposed fix v1.0 + regression tests

This patch fixes both the case when ConditionalExpression is used in LocalDeclaration as well as Assignment by making sure nullStatus is calculated only after analysis of the initialization is done</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1879602</commentid>
    <comment_count>11</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-02-08 01:00:28 -0500</bug_when>
    <thetext>Released in HEAD for 3.7M6.

The fix should be available in tomorrow&apos;s I build.
Harry, hope you have a pleasant flight aboard JDT airways. ;)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1879715</commentid>
    <comment_count>12</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2011-02-08 06:58:51 -0500</bug_when>
    <thetext>(In reply to comment #5)
&gt; This looks like a nasty manifestation of bug 324178, which doesn&apos;t have an 
&gt; easy fix.
Bug 324178 is not present in 3.6.x, so it can&apos;t be a manifestation of that one.


The bug is pretty bad and from a bird&apos;s eye view the fix looks good. Suggest to fix for 3.6.2 but final word is with Srikanth and Olivier.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1879737</commentid>
    <comment_count>13</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-02-08 08:02:34 -0500</bug_when>
    <thetext>Ayush, I would have liked to see some post-mortem in terms of
when exactly this bug got introduced and in what context.
Please share your findings here.

I&apos;ll study the patch and experiment with the fix a bit.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1879739</commentid>
    <comment_count>14</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-02-08 08:04:47 -0500</bug_when>
    <thetext>Since the runtime behavior is impacted, I vote for a 3.6.2 inclusion.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1879769</commentid>
    <comment_count>15</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-02-08 08:46:36 -0500</bug_when>
    <thetext>(In reply to comment #13)
&gt; Ayush, I would have liked to see some post-mortem in terms of
&gt; when exactly this bug got introduced and in what context.
&gt; Please share your findings here.

The first thing to note is that the behaviour was wrong even prior to 3.6. The only difference is that we reported the redundant null check warning but did not report the dead code, and hence did not optimize it out. 
The fix for bug 302446 improved deadcode detection because of which we started reporting deadcode at all places where we should according to our analysis. Due to this, what was a simple redundant null check warning in 3.5 turned into a null check warning + dead code warning. 
Now dead code warning is given via org.eclipse.jdt.internal.compiler.ast.Statement.complainIfUnreachable(FlowInfo, BlockScope, int), which sets the ASTNode.IsReachable bit on the statement. (the then block in this case). Thus, during code generation we dont generate code for this statement.

Bottomline is, the problem itself had been there all along, but due to improved deadcode detection, has manifested itself in an ugly way.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1879773</commentid>
    <comment_count>16</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-02-08 08:49:44 -0500</bug_when>
    <thetext>(In reply to comment #15)

&gt;which &quot;sets&quot; the ASTNode.IsReachable bit on the statement.

i meant RESET!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1879823</commentid>
    <comment_count>17</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-02-08 09:48:14 -0500</bug_when>
    <thetext>(In reply to comment #13)

&gt; I&apos;ll study the patch and experiment with the fix a bit.

It looks good to me. I second the decision to back port this
to 3.6.2.

Ayush, please prepare a 3.6.2 patch. We need to run all the
tests on the branch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1879862</commentid>
    <comment_count>18</comment_count>
      <attachid>188524</attachid>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-02-08 10:25:15 -0500</bug_when>
    <thetext>Created attachment 188524
path for 3.6.2

Srikanth, please give this patch a final once over and i&apos;ll release it. Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1879886</commentid>
    <comment_count>19</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-02-08 10:45:41 -0500</bug_when>
    <thetext>Released in R3_6_maintenance for 3.6.2.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1880022</commentid>
    <comment_count>20</comment_count>
    <who name="Mike Wilson">Mike_Wilson</who>
    <bug_when>2011-02-08 12:24:17 -0500</bug_when>
    <thetext>+1 for backporting to 3.6.2</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1880838</commentid>
    <comment_count>21</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2011-02-10 01:44:18 -0500</bug_when>
    <thetext>
I&apos;m wondering if anyone already knows and can net this out for me. We in WTP were using R36_RC4 base builder that included the &quot;old&quot; compiler (jdt.core) versioned 3.6.0.v_A58. 

The newest base builder (in branch) tagged with r36x_v20110209 contains the compiler (jdt.core) of version 3.6.2.v_A76_R36x. 

So, a) sounds like other fixes besides fixing this regression are in the difference from v_A58 and v_A76_R36x. From what I can tell, from bugzilla query, there&apos;s 14 fixes targeted to 3.6.1 or 3.6.2. Any reasons some of these are really important to &quot;pick up&quot; or &quot;risky to pick up&quot; (for us in WTP). The bugzilla query will be ugly, but if pastes correctly, would be 

https://bugs.eclipse.org/bugs/buglist.cgi?query_format=advanced;short_desc=compiler;bug_status=RESOLVED;bug_status=VERIFIED;bug_status=CLOSED;short_desc_type=allwordssubstr;target_milestone=3.6.1;target_milestone=3.6.2;product=JDT;classification=Eclipse

More importantly, b) was the &quot;regression&apos; even in the compiler even in version v_A58? That is, was v_A58 essentially correct, and safe to stick with? 

I ask, because in WTP, I tried the new compiler (via the new base builder) and the p2 comparator found 7 classes changed, as I am tracking in bug 336780. So, I&apos;m just trying to figure out (easily) if it is better to stick with old compiler (and avoid (small) risk of changed byte codes), or better to get current. My _guess_ is the changes in our bytes codes would not be especially significant (probably just dead code left out) ... but thought I&apos;d ask here if anyone had an educated opinion? (rather than just me guessing :)  

Much thanks,</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1880856</commentid>
    <comment_count>22</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2011-02-10 02:38:46 -0500</bug_when>
    <thetext>&gt; More importantly, b) was the &quot;regression&apos; even in the compiler even in version
&gt; v_A58? That is, was v_A58 essentially correct, and safe to stick with? 
The bug was in 3.6 already. You would only be safe if you know for sure that you don&apos;t have the code pattern from comment 0 in your code.

&gt; I ask, because in WTP, I tried the new compiler (via the new base builder) and
&gt; the p2 comparator found 7 classes changed, as I am tracking in bug 336780. So,
&gt; I&apos;m just trying to figure out (easily) if it is better to stick with old
&gt; compiler (and avoid (small) risk of changed byte codes), or better to get
&gt; current.
Use the new one. It also fixes three other bugs that caused wrong byte code to be generated among which bug 320414 is serious.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1880920</commentid>
    <comment_count>23</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2011-02-10 04:44:50 -0500</bug_when>
    <thetext>Verified for 3.6.2 using build M20110209-1607.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1882663</commentid>
    <comment_count>24</comment_count>
    <who name="Martin Oberhuber">martin.oberhuber</who>
    <bug_when>2011-02-13 04:24:39 -0500</bug_when>
    <thetext>We are also updating to the new compiler / basebuilder in the TM project (tracked by bug 337045). Since we haven&apos;t been using the comparator in the TM project so far, I cannot tell if I need to re-tag any bundles. I would really appreciate somebody to help out and check the previous build against the new one - also to verify bytecode correctness.

For details see bug 337045 comment 2.

Note that I found the new basebuilder to potentially have an issue with computing the feature qualifier of including features (multiple nesting). This might be a regression. Tracked by bug 337053.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1882677</commentid>
    <comment_count>25</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-02-13 08:46:15 -0500</bug_when>
    <thetext>(In reply to comment #24)
&gt; We are also updating to the new compiler / basebuilder in the TM project
&gt; (tracked by bug 337045). Since we haven&apos;t been using the comparator in the TM
&gt; project so far, I cannot tell if I need to re-tag any bundles. I would really
&gt; appreciate somebody to help out and check the previous build against the new
&gt; one - also to verify bytecode correctness.
I&apos;ll check the two repos that you provided in the other bug report.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1883309</commentid>
    <comment_count>26</comment_count>
    <who name="Martin Oberhuber">martin.oberhuber</who>
    <bug_when>2011-02-14 15:58:04 -0500</bug_when>
    <thetext>(In reply to comment #25)
&gt; I&apos;ll check the two repos that you provided in the other bug report.

Thanks Olivier. I&apos;ll wait with declaring TM 3.2.2rc4 until I get your feedback.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1883338</commentid>
    <comment_count>27</comment_count>
    <who name="Harry Tongelidis">harry.tongelidis</who>
    <bug_when>2011-02-14 17:03:00 -0500</bug_when>
    <thetext>Thanks for fixing this so quick. 

It was a pretty nasty bug to find because the code in question was machine generated and buried in 500k LOC.

Luckily I don&apos;t know any human that would write code like that.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1883399</commentid>
    <comment_count>28</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-02-14 22:22:57 -0500</bug_when>
    <thetext>Martin, it will take some time to verify everything. I&apos;ll try to finish it tomorrow.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1884179</commentid>
    <comment_count>29</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-02-16 09:12:48 -0500</bug_when>
    <thetext>(In reply to comment #26)
&gt; Thanks Olivier. I&apos;ll wait with declaring TM 3.2.2rc4 until I get your feedback.
Martin, the source code for the DataStore class is different. The bytecodes for this file is therefore different.
Everything else looks the same.

I don&apos;t know if this is expected.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1884183</commentid>
    <comment_count>30</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-02-16 09:15:35 -0500</bug_when>
    <thetext>(In reply to comment #29)
&gt; (In reply to comment #26)
&gt; &gt; Thanks Olivier. I&apos;ll wait with declaring TM 3.2.2rc4 until I get your feedback.
&gt; Martin, the source code for the DataStore class is different. The bytecodes 
I am referring to the class:
org/eclipse/dstore/core/model/DataStore.class --- in org.eclipse.dstore.core....jar

I also need to check two other classes in details.
org/eclipse/rse/services/clientserver/archiveutils/SystemTarHandler.class
org/eclipse/rse/services/clientserver/archiveutils/SystemZipHandler.class

Results will follow shortly.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1884196</commentid>
    <comment_count>31</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-02-16 09:35:46 -0500</bug_when>
    <thetext>(In reply to comment #30)
&gt; I also need to check two other classes in details.
&gt; org/eclipse/rse/services/clientserver/archiveutils/SystemTarHandler.class
&gt; org/eclipse/rse/services/clientserver/archiveutils/SystemZipHandler.class
&gt; Results will follow shortly.
I don&apos;t see anything wrong with the changes in these two files. There is a removed null check, but I don&apos;t see how the variable can be null at this location.
Don&apos;t you have a redundant null check warning in these two files ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1884675</commentid>
    <comment_count>32</comment_count>
    <who name="Martin Oberhuber">martin.oberhuber</who>
    <bug_when>2011-02-17 00:54:51 -0500</bug_when>
    <thetext>Thanks for checking, Olivier!

In fact the change in the DataStore class is expected, it is our one and only change between TM 3.2.2RC2 and TM 3.2.2RC4. Sorry for not mentioning this expected diff (on the other hand it&apos;s a good sanity check for the checks, to see you have found this diff :)

The o.e.dstore.core bundle has been re-tagged for the expected change:
  http://dev.eclipse.org/mhonarc/lists/tm-cvs-commit/msg00142.html
  http://dev.eclipse.org/mhonarc/lists/tm-cvs-commit/msg00147.html

For SystemTarHandler and SystemZipHandler it looks like I _should_ usually also re-tag o.e.rse.services which includes clientserver.jar -- since the Comparator would show a diff. On the other hand, the change is trivial so I might also just go and rename the existing M-build you checked into RC4, and avoid disruption to the Helios SR2 train, correct?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1884834</commentid>
    <comment_count>33</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-02-17 08:23:35 -0500</bug_when>
    <thetext>(In reply to comment #32)
&gt; For SystemTarHandler and SystemZipHandler it looks like I _should_ usually also
&gt; re-tag o.e.rse.services which includes clientserver.jar -- since the Comparator
&gt; would show a diff. On the other hand, the change is trivial so I might also
&gt; just go and rename the existing M-build you checked into RC4, and avoid
&gt; disruption to the Helios SR2 train, correct?
yes, both versions are correct. So only the DataStore has to be retagged as it contains an expected change.
o.e.rse.services could be tagged for Indigo.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>188459</attachid>
            <date>2011-02-07 12:56:00 -0500</date>
            <delta_ts>2011-02-07 12:56:34 -0500</delta_ts>
            <desc>Add regression tests</desc>
            <filename>patch_336544.txt</filename>
            <type>text/plain</type>
            <size>2247</size>
            <attacher name="Olivier Thomann">Olivier_Thomann</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMA0KI1Agb3JnLmVjbGlwc2UuamR0LmNvcmUu
dGVzdHMuY29tcGlsZXINCkluZGV4OiBzcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29t
cGlsZXIvcmVncmVzc2lvbi9OdWxsUmVmZXJlbmNlVGVzdC5qYXZhDQo9PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQpSQ1Mg
ZmlsZTogL2N2c3Jvb3QvZWNsaXBzZS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxl
ci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OdWxs
UmVmZXJlbmNlVGVzdC5qYXZhLHYNCnJldHJpZXZpbmcgcmV2aXNpb24gMS4xMDkNCmRpZmYgLXUg
LXIxLjEwOSBOdWxsUmVmZXJlbmNlVGVzdC5qYXZhDQotLS0gc3JjL29yZy9lY2xpcHNlL2pkdC9j
b3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbFJlZmVyZW5jZVRlc3QuamF2YQkxOSBK
YW4gMjAxMSAwNToyOTo1NyAtMDAwMAkxLjEwOQ0KKysrIHNyYy9vcmcvZWNsaXBzZS9qZHQvY29y
ZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxSZWZlcmVuY2VUZXN0LmphdmEJNyBGZWIg
MjAxMSAxNzo1MzowMyAtMDAwMA0KQEAgLTM2LDcgKzM2LDcgQEANCiAvLyBPbmx5IHRoZSBoaWdo
ZXN0IGNvbXBsaWFuY2UgbGV2ZWwgaXMgcnVuOyBhZGQgdGhlIFZNIGFyZ3VtZW50DQogLy8gLURj
b21wbGlhbmNlPTEuNCAoZm9yIGV4YW1wbGUpIHRvIGxvd2VyIGl0IGlmIG5lZWRlZA0KIHN0YXRp
YyB7DQotLy8JCVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1tdIHsgInRlc3RCdWczMjUyMjkiIH07
DQorLy8JCVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1tdIHsgInRlc3RCdWczMzY1NDRfMiIgfTsN
CiAvLwkJVEVTVFNfTlVNQkVSUyA9IG5ldyBpbnRbXSB7IDU2MSB9Ow0KIC8vCQlURVNUU19SQU5H
RSA9IG5ldyBpbnRbXSB7IDEsIDIwNDkgfTsNCiB9DQpAQCAtMTM4MzIsNCArMTM4MzIsNDYgQEAN
CiAJCQkifSJ9LA0KIAkJIiIpOw0KIH0NCitwdWJsaWMgdm9pZCB0ZXN0QnVnMzM2NTQ0KCkgew0K
Kwl0aGlzLnJ1bkNvbmZvcm1UZXN0KA0KKwkJbmV3IFN0cmluZ1tdIHsNCisJCQkiWC5qYXZhIiwN
CisJCQkicHVibGljIGNsYXNzIFgge1xuIiArIA0KKwkJCSIJcHVibGljIHN0YXRpYyB2b2lkIG1h
aW4oU3RyaW5nW10gYXJncykge1xuIiArIA0KKwkJCSIJCUludGVnZXIgaTEgPSBnZXRJbnQoKTtc
biIgKyANCisJCQkiCQlJbnRlZ2VyIGkyID0gaTEgPT0gbnVsbCA/IG51bGwgOiBpMTtcbiIgKyAN
CisJCQkiCQlpZiAoaTIgIT0gbnVsbCkge1xuIiArIA0KKwkJCSIJCQlTeXN0ZW0ub3V0LnByaW50
bG4oXCJTVUNDRVNTXCIpO1xuIiArIA0KKwkJCSIJCQlyZXR1cm47XG4iICsgDQorCQkJIgkJfVxu
IiArIA0KKwkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihcIkZBSUxVUkVcIik7XG4iICsgDQorCQkJ
Igl9XG4iICsNCisJCQkiCXByaXZhdGUgc3RhdGljIEludGVnZXIgZ2V0SW50KCkge1xuIiArIA0K
KwkJCSIJCXJldHVybiBuZXcgSW50ZWdlcigwKTtcbiIgKyANCisJCQkiCX1cbiIgKyANCisJCQki
fSINCisJCX0sDQorCQkiU1VDQ0VTUyIpOw0KK30NCitwdWJsaWMgdm9pZCB0ZXN0QnVnMzM2NTQ0
XzIoKSB7DQorCXRoaXMucnVuQ29uZm9ybVRlc3QoDQorCQluZXcgU3RyaW5nW10gew0KKwkJCSJY
LmphdmEiLA0KKwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsgDQorCQkJIglwdWJsaWMgc3RhdGlj
IHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsgDQorCQkJIgkJSW50ZWdlciBpMSA9IG51
bGw7XG4iICsgDQorCQkJIgkJSW50ZWdlciBpMiA9IChpMSA9IGdldEludCgpKSA9PSBudWxsID8g
bnVsbCA6IGkxO1xuIiArIA0KKwkJCSIJCWlmIChpMiAhPSBudWxsKSB7XG4iICsgDQorCQkJIgkJ
CVN5c3RlbS5vdXQucHJpbnRsbihcIlNVQ0NFU1NcIik7XG4iICsgDQorCQkJIgkJCXJldHVybjtc
biIgKyANCisJCQkiCQl9XG4iICsgDQorCQkJIgkJU3lzdGVtLm91dC5wcmludGxuKFwiRkFJTFVS
RVwiKTtcbiIgKyANCisJCQkiCX1cbiIgKw0KKwkJCSIJcHJpdmF0ZSBzdGF0aWMgSW50ZWdlciBn
ZXRJbnQoKSB7XG4iICsgDQorCQkJIgkJcmV0dXJuIG5ldyBJbnRlZ2VyKDApO1xuIiArIA0KKwkJ
CSIJfVxuIiArIA0KKwkJCSJ9Ig0KKwkJfSwNCisJCSJTVUNDRVNTIik7DQorfQ0KIH0NClwgTm8g
bmV3bGluZSBhdCBlbmQgb2YgZmlsZQ0K
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>188496</attachid>
            <date>2011-02-08 00:52:00 -0500</date>
            <delta_ts>2011-02-08 00:52:44 -0500</delta_ts>
            <desc>proposed fix v1.0 + regression tests</desc>
            <filename>patch336544.txt</filename>
            <type>text/plain</type>
            <size>5229</size>
            <attacher name="Ayushman Jain">amj87.iitr</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMA0KI1Agb3JnLmVjbGlwc2UuamR0LmNvcmUN
CkluZGV4OiBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Fz
c2lnbm1lbnQuamF2YQ0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PQ0KUkNTIGZpbGU6IC9jdnNyb290L2VjbGlwc2Uvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9Bc3NpZ25tZW50LmphdmEsdg0KcmV0cmlldmluZyByZXZpc2lvbiAxLjk1DQpkaWZm
IC11IC1yMS45NSBBc3NpZ25tZW50LmphdmENCi0tLSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L0Fzc2lnbm1lbnQuamF2YQkyMiBKYW4gMjAxMSAyMzozOToy
NSAtMDAwMAkxLjk1DQorKysgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9Bc3NpZ25tZW50LmphdmEJOCBGZWIgMjAxMSAwNTo0NzoxMCAtMDAwMA0KQEAgLTQ0
LDYgKzQ0LDkgQEANCiAJaWYgKCh0aGlzLmV4cHJlc3Npb24uaW1wbGljaXRDb252ZXJzaW9uICYg
VHlwZUlkcy5VTkJPWElORykgIT0gMCkgew0KIAkJdGhpcy5leHByZXNzaW9uLmNoZWNrTlBFKGN1
cnJlbnRTY29wZSwgZmxvd0NvbnRleHQsIGZsb3dJbmZvKTsNCiAJfQ0KKwlmbG93SW5mbyA9ICgo
UmVmZXJlbmNlKSB0aGlzLmxocykNCisJCS5hbmFseXNlQXNzaWdubWVudChjdXJyZW50U2NvcGUs
IGZsb3dDb250ZXh0LCBmbG93SW5mbywgdGhpcywgZmFsc2UpDQorCQkudW5jb25kaXRpb25hbElu
aXRzKCk7DQogCWludCBudWxsU3RhdHVzID0gdGhpcy5leHByZXNzaW9uLm51bGxTdGF0dXMoZmxv
d0luZm8pOw0KIAlpZiAobG9jYWwgIT0gbnVsbCAmJiAobG9jYWwudHlwZS50YWdCaXRzICYgVGFn
Qml0cy5Jc0Jhc2VUeXBlKSA9PSAwKSB7DQogCQlpZiAobnVsbFN0YXR1cyA9PSBGbG93SW5mby5O
VUxMKSB7DQpAQCAtNTEsOSArNTQsNiBAQA0KIAkJCQlGbG93Q29udGV4dC5DQU5fT05MWV9OVUxM
IHwgRmxvd0NvbnRleHQuSU5fQVNTSUdOTUVOVCwgZmxvd0luZm8pOw0KIAkJfQ0KIAl9DQotCWZs
b3dJbmZvID0gKChSZWZlcmVuY2UpIHRoaXMubGhzKQ0KLQkJLmFuYWx5c2VBc3NpZ25tZW50KGN1
cnJlbnRTY29wZSwgZmxvd0NvbnRleHQsIGZsb3dJbmZvLCB0aGlzLCBmYWxzZSkNCi0JCS51bmNv
bmRpdGlvbmFsSW5pdHMoKTsNCiAJbnVsbFN0YXR1cyA9IGNoZWNrQWdhaW5zdE51bGxBbm5vdGF0
aW9uKGN1cnJlbnRTY29wZSwgbG9jYWwsIG51bGxTdGF0dXMpOw0KIAlpZiAobG9jYWwgIT0gbnVs
bCAmJiAobG9jYWwudHlwZS50YWdCaXRzICYgVGFnQml0cy5Jc0Jhc2VUeXBlKSA9PSAwKSB7DQog
CQlmbG93SW5mby5tYXJrTnVsbFN0YXR1cyhsb2NhbCwgbnVsbFN0YXR1cyk7DQpJbmRleDogY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Mb2NhbERlY2xhcmF0
aW9uLmphdmENCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT0NClJDUyBmaWxlOiAvY3Zzcm9vdC9lY2xpcHNlL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvTG9jYWxEZWNsYXJhdGlvbi5qYXZhLHYNCnJldHJpZXZpbmcgcmV2aXNpb24gMS43OA0KZGlm
ZiAtdSAtcjEuNzggTG9jYWxEZWNsYXJhdGlvbi5qYXZhDQotLS0gY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Mb2NhbERlY2xhcmF0aW9uLmphdmEJMjIgSmFu
IDIwMTEgMjM6Mzk6MjUgLTAwMDAJMS43OA0KKysrIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9hc3QvTG9jYWxEZWNsYXJhdGlvbi5qYXZhCTggRmViIDIwMTEgMDU6
NDc6MTAgLTAwMDANCkBAIC03MSwxMSArNzEsMTIgQEANCiAJaWYgKCh0aGlzLmluaXRpYWxpemF0
aW9uLmltcGxpY2l0Q29udmVyc2lvbiAmIFR5cGVJZHMuVU5CT1hJTkcpICE9IDApIHsNCiAJCXRo
aXMuaW5pdGlhbGl6YXRpb24uY2hlY2tOUEUoY3VycmVudFNjb3BlLCBmbG93Q29udGV4dCwgZmxv
d0luZm8pOw0KIAl9DQotCWludCBudWxsU3RhdHVzID0gdGhpcy5pbml0aWFsaXphdGlvbi5udWxs
U3RhdHVzKGZsb3dJbmZvKTsNCisJDQogCWZsb3dJbmZvID0NCiAJCXRoaXMuaW5pdGlhbGl6YXRp
b24NCiAJCQkuYW5hbHlzZUNvZGUoY3VycmVudFNjb3BlLCBmbG93Q29udGV4dCwgZmxvd0luZm8p
DQogCQkJLnVuY29uZGl0aW9uYWxJbml0cygpOw0KKwlpbnQgbnVsbFN0YXR1cyA9IHRoaXMuaW5p
dGlhbGl6YXRpb24ubnVsbFN0YXR1cyhmbG93SW5mbyk7DQogCWlmICghZmxvd0luZm8uaXNEZWZp
bml0ZWx5QXNzaWduZWQodGhpcy5iaW5kaW5nKSl7Ly8gZm9yIGxvY2FsIHZhcmlhYmxlIGRlYnVn
IGF0dHJpYnV0ZXMNCiAJCXRoaXMuYml0cyB8PSBGaXJzdEFzc2lnbm1lbnRUb0xvY2FsOw0KIAl9
IGVsc2Ugew0KI1Agb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXINCkluZGV4OiBz
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OdWxsUmVm
ZXJlbmNlVGVzdC5qYXZhDQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09DQpSQ1MgZmlsZTogL2N2c3Jvb3QvZWNsaXBzZS9v
cmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2Nv
cmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OdWxsUmVmZXJlbmNlVGVzdC5qYXZhLHYNCnJl
dHJpZXZpbmcgcmV2aXNpb24gMS4xMTANCmRpZmYgLXUgLXIxLjExMCBOdWxsUmVmZXJlbmNlVGVz
dC5qYXZhDQotLS0gc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jl
c3Npb24vTnVsbFJlZmVyZW5jZVRlc3QuamF2YQk3IEZlYiAyMDExIDE2OjE4OjAzIC0wMDAwCTEu
MTEwDQorKysgc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Np
b24vTnVsbFJlZmVyZW5jZVRlc3QuamF2YQk4IEZlYiAyMDExIDA1OjQ3OjEyIC0wMDAwDQpAQCAt
MTM4NzcsNCArMTM4NzcsNzQgQEANCiAJCQljb21waWxlck9wdGlvbnMpOw0KIAl9DQogfQ0KKw0K
Ky8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zMzY1NDQN
CitwdWJsaWMgdm9pZCB0ZXN0QnVnMzM2NTQ0KCkgew0KKwl0aGlzLnJ1bkNvbmZvcm1UZXN0KA0K
KwkJbmV3IFN0cmluZ1tdIHsNCisJCQkiWC5qYXZhIiwNCisJCQkicHVibGljIGNsYXNzIFgge1xu
IiArIA0KKwkJCSIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuIiAr
IA0KKwkJCSIJCUludGVnZXIgaTEgPSBnZXRJbnQoKTtcbiIgKyANCisJCQkiCQlJbnRlZ2VyIGky
ID0gaTEgPT0gbnVsbCA/IG51bGwgOiBpMTtcbiIgKyANCisJCQkiCQlpZiAoaTIgIT0gbnVsbCkg
e1xuIiArIA0KKwkJCSIJCQlTeXN0ZW0ub3V0LnByaW50bG4oXCJTVUNDRVNTXCIpO1xuIiArIA0K
KwkJCSIJCQlyZXR1cm47XG4iICsgDQorCQkJIgkJfVxuIiArIA0KKwkJCSIJCVN5c3RlbS5vdXQu
cHJpbnRsbihcIkZBSUxVUkVcIik7XG4iICsgDQorCQkJIgl9XG4iICsNCisJCQkiCXByaXZhdGUg
c3RhdGljIEludGVnZXIgZ2V0SW50KCkge1xuIiArIA0KKwkJCSIJCXJldHVybiBuZXcgSW50ZWdl
cigwKTtcbiIgKyANCisJCQkiCX1cbiIgKyANCisJCQkifSINCisJCX0sDQorCQkiU1VDQ0VTUyIp
Ow0KK30NCisNCisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/
aWQ9MzM2NTQ0DQorcHVibGljIHZvaWQgdGVzdEJ1ZzMzNjU0NF8yKCkgew0KKwl0aGlzLnJ1bkNv
bmZvcm1UZXN0KA0KKwkJbmV3IFN0cmluZ1tdIHsNCisJCQkiWC5qYXZhIiwNCisJCQkicHVibGlj
IGNsYXNzIFgge1xuIiArIA0KKwkJCSIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10g
YXJncykge1xuIiArIA0KKwkJCSIJCUludGVnZXIgaTEgPSBudWxsO1xuIiArIA0KKwkJCSIJCUlu
dGVnZXIgaTIgPSAoaTEgPSBnZXRJbnQoKSkgPT0gbnVsbCA/IG51bGwgOiBpMTtcbiIgKyANCisJ
CQkiCQlpZiAoaTIgIT0gbnVsbCkge1xuIiArIA0KKwkJCSIJCQlTeXN0ZW0ub3V0LnByaW50bG4o
XCJTVUNDRVNTXCIpO1xuIiArIA0KKwkJCSIJCQlyZXR1cm47XG4iICsgDQorCQkJIgkJfVxuIiAr
IA0KKwkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihcIkZBSUxVUkVcIik7XG4iICsgDQorCQkJIgl9
XG4iICsNCisJCQkiCXByaXZhdGUgc3RhdGljIEludGVnZXIgZ2V0SW50KCkge1xuIiArIA0KKwkJ
CSIJCXJldHVybiBuZXcgSW50ZWdlcigwKTtcbiIgKyANCisJCQkiCX1cbiIgKyANCisJCQkifSIN
CisJCX0sDQorCQkiU1VDQ0VTUyIpOw0KK30NCisNCisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5v
cmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzM2NTQ0DQorcHVibGljIHZvaWQgdGVzdEJ1ZzMzNjU0
NF8zKCkgew0KKwl0aGlzLnJ1bkNvbmZvcm1UZXN0KA0KKwkJbmV3IFN0cmluZ1tdIHsNCisJCQki
WC5qYXZhIiwNCisJCQkicHVibGljIGNsYXNzIFgge1xuIiArIA0KKwkJCSIJcHVibGljIHN0YXRp
YyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuIiArIA0KKwkJCSIJCUludGVnZXIgaTEgPSBu
dWxsO1xuIiArIA0KKwkJCSIJCUludGVnZXIgaTI7XG4iICsNCisJCQkiCQlpMiA9IChpMSA9IGdl
dEludCgpKSA9PSBudWxsID8gbnVsbCA6IGkxO1xuIiArIA0KKwkJCSIJCWlmIChpMiAhPSBudWxs
KSB7XG4iICsgDQorCQkJIgkJCVN5c3RlbS5vdXQucHJpbnRsbihcIlNVQ0NFU1NcIik7XG4iICsg
DQorCQkJIgkJCXJldHVybjtcbiIgKyANCisJCQkiCQl9XG4iICsgDQorCQkJIgkJU3lzdGVtLm91
dC5wcmludGxuKFwiRkFJTFVSRVwiKTtcbiIgKyANCisJCQkiCX1cbiIgKw0KKwkJCSIJcHJpdmF0
ZSBzdGF0aWMgSW50ZWdlciBnZXRJbnQoKSB7XG4iICsgDQorCQkJIgkJcmV0dXJuIG5ldyBJbnRl
Z2VyKDApO1xuIiArIA0KKwkJCSIJfVxuIiArIA0KKwkJCSJ9Ig0KKwkJfSwNCisJCSJTVUNDRVNT
Iik7DQorfQ0KIH0NClwgTm8gbmV3bGluZSBhdCBlbmQgb2YgZmlsZQ0K
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>188524</attachid>
            <date>2011-02-08 10:25:00 -0500</date>
            <delta_ts>2011-02-08 10:25:15 -0500</delta_ts>
            <desc>path for 3.6.2</desc>
            <filename>patch336544-362.txt</filename>
            <type>text/plain</type>
            <size>5959</size>
            <attacher name="Ayushman Jain">amj87.iitr</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMA0KI1Agb3JnLmVjbGlwc2UuamR0LmNvcmUN
CkluZGV4OiBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Fz
c2lnbm1lbnQuamF2YQ0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PQ0KUkNTIGZpbGU6IC9jdnNyb290L2VjbGlwc2Uvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9Bc3NpZ25tZW50LmphdmEsdg0KcmV0cmlldmluZyByZXZpc2lvbiAxLjg4DQpkaWZm
IC11IC1yMS44OCBBc3NpZ25tZW50LmphdmENCi0tLSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L0Fzc2lnbm1lbnQuamF2YQk3IE1hciAyMDA5IDAwOjU4OjU3
IC0wMDAwCTEuODgNCisrKyBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvYXN0L0Fzc2lnbm1lbnQuamF2YQk4IEZlYiAyMDExIDE1OjIyOjU5IC0wMDAwDQpAQCAtMSw1
ICsxLDUgQEANCiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KLSAqIENvcHlyaWdodCAoYykgMjAw
MCwgMjAwOSBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4NCisgKiBDb3B5cmlnaHQgKGMpIDIw
MDAsIDIwMTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuDQogICogQWxsIHJpZ2h0cyByZXNl
cnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscw0KICAqIGFy
ZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExp
Y2Vuc2UgdjEuMA0KICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQg
aXMgYXZhaWxhYmxlIGF0DQpAQCAtMzcsNiArMzcsOSBAQA0KIC8vIGEgZmllbGQgcmVmZXJlbmNl
LCBhIGJsYW5rIGZpbmFsIGZpZWxkIHJlZmVyZW5jZSwgYSBmaWVsZCBvZiBhbiBlbmNsb3Npbmcg
aW5zdGFuY2Ugb3INCiAvLyBqdXN0IGEgbG9jYWwgdmFyaWFibGUuDQogCUxvY2FsVmFyaWFibGVC
aW5kaW5nIGxvY2FsID0gdGhpcy5saHMubG9jYWxWYXJpYWJsZUJpbmRpbmcoKTsNCisJZmxvd0lu
Zm8gPSAoKFJlZmVyZW5jZSkgdGhpcy5saHMpDQorCQkuYW5hbHlzZUFzc2lnbm1lbnQoY3VycmVu
dFNjb3BlLCBmbG93Q29udGV4dCwgZmxvd0luZm8sIHRoaXMsIGZhbHNlKQ0KKwkJLnVuY29uZGl0
aW9uYWxJbml0cygpOw0KIAlpbnQgbnVsbFN0YXR1cyA9IHRoaXMuZXhwcmVzc2lvbi5udWxsU3Rh
dHVzKGZsb3dJbmZvKTsNCiAJaWYgKGxvY2FsICE9IG51bGwgJiYgKGxvY2FsLnR5cGUudGFnQml0
cyAmIFRhZ0JpdHMuSXNCYXNlVHlwZSkgPT0gMCkgew0KIAkJaWYgKG51bGxTdGF0dXMgPT0gRmxv
d0luZm8uTlVMTCkgew0KQEAgLTQ0LDkgKzQ3LDYgQEANCiAJCQkJRmxvd0NvbnRleHQuQ0FOX09O
TFlfTlVMTCB8IEZsb3dDb250ZXh0LklOX0FTU0lHTk1FTlQsIGZsb3dJbmZvKTsNCiAJCX0NCiAJ
fQ0KLQlmbG93SW5mbyA9ICgoUmVmZXJlbmNlKSB0aGlzLmxocykNCi0JCS5hbmFseXNlQXNzaWdu
bWVudChjdXJyZW50U2NvcGUsIGZsb3dDb250ZXh0LCBmbG93SW5mbywgdGhpcywgZmFsc2UpDQot
CQkudW5jb25kaXRpb25hbEluaXRzKCk7DQogCWlmIChsb2NhbCAhPSBudWxsICYmIChsb2NhbC50
eXBlLnRhZ0JpdHMgJiBUYWdCaXRzLklzQmFzZVR5cGUpID09IDApIHsNCiAJCXN3aXRjaChudWxs
U3RhdHVzKSB7DQogCQkJY2FzZSBGbG93SW5mby5OVUxMIDoNCkluZGV4OiBjb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0xvY2FsRGVjbGFyYXRpb24uamF2YQ0K
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PQ0KUkNTIGZpbGU6IC9jdnNyb290L2VjbGlwc2Uvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Mb2NhbERl
Y2xhcmF0aW9uLmphdmEsdg0KcmV0cmlldmluZyByZXZpc2lvbiAxLjcxDQpkaWZmIC11IC1yMS43
MSBMb2NhbERlY2xhcmF0aW9uLmphdmENCi0tLSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYXN0L0xvY2FsRGVjbGFyYXRpb24uamF2YQkyMyBPY3QgMjAwOSAxNTox
NToyNiAtMDAwMAkxLjcxDQorKysgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FzdC9Mb2NhbERlY2xhcmF0aW9uLmphdmEJOCBGZWIgMjAxMSAxNToyMjo1OSAtMDAw
MA0KQEAgLTEsNSArMSw1IEBADQogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCi0gKiBDb3B5cmln
aHQgKGMpIDIwMDAsIDIwMDkgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuDQorICogQ29weXJp
Z2h0IChjKSAyMDAwLCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLg0KICAqIEFsbCBy
aWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlh
bHMNCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNl
IFB1YmxpYyBMaWNlbnNlIHYxLjANCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1
dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdA0KQEAgLTQwLDExICs0MCwxMSBAQA0KIAlpZiAodGhp
cy5pbml0aWFsaXphdGlvbiA9PSBudWxsKSB7DQogCQlyZXR1cm4gZmxvd0luZm87DQogCX0NCi0J
aW50IG51bGxTdGF0dXMgPSB0aGlzLmluaXRpYWxpemF0aW9uLm51bGxTdGF0dXMoZmxvd0luZm8p
Ow0KIAlmbG93SW5mbyA9DQogCQl0aGlzLmluaXRpYWxpemF0aW9uDQogCQkJLmFuYWx5c2VDb2Rl
KGN1cnJlbnRTY29wZSwgZmxvd0NvbnRleHQsIGZsb3dJbmZvKQ0KIAkJCS51bmNvbmRpdGlvbmFs
SW5pdHMoKTsNCisJaW50IG51bGxTdGF0dXMgPSB0aGlzLmluaXRpYWxpemF0aW9uLm51bGxTdGF0
dXMoZmxvd0luZm8pOw0KIAlpZiAoIWZsb3dJbmZvLmlzRGVmaW5pdGVseUFzc2lnbmVkKHRoaXMu
YmluZGluZykpey8vIGZvciBsb2NhbCB2YXJpYWJsZSBkZWJ1ZyBhdHRyaWJ1dGVzDQogCQl0aGlz
LmJpdHMgfD0gRmlyc3RBc3NpZ25tZW50VG9Mb2NhbDsNCiAJfSBlbHNlIHsNCiNQIG9yZy5lY2xp
cHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyDQpJbmRleDogc3JjL29yZy9lY2xpcHNlL2pkdC9j
b3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbFJlZmVyZW5jZVRlc3QuamF2YQ0KPT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PQ0KUkNTIGZpbGU6IC9jdnNyb290L2VjbGlwc2Uvb3JnLmVjbGlwc2UuamR0LmNvcmUu
dGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3Jl
Z3Jlc3Npb24vTnVsbFJlZmVyZW5jZVRlc3QuamF2YSx2DQpyZXRyaWV2aW5nIHJldmlzaW9uIDEu
OTUuMi4zDQpkaWZmIC11IC1yMS45NS4yLjMgTnVsbFJlZmVyZW5jZVRlc3QuamF2YQ0KLS0tIHNy
Yy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxSZWZl
cmVuY2VUZXN0LmphdmEJMTggRGVjIDIwMTAgMjI6Mjc6MDkgLTAwMDAJMS45NS4yLjMNCisrKyBz
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OdWxsUmVm
ZXJlbmNlVGVzdC5qYXZhCTggRmViIDIwMTEgMTU6MjM6MTYgLTAwMDANCkBAIC0xMjc5Niw0ICsx
Mjc5Niw3NCBAQA0KIAkJIkRvbmVcbiIgKyANCiAJCSItMSIpOw0KIH0NCisNCisvLyBodHRwczov
L2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzM2NTQ0DQorcHVibGljIHZv
aWQgdGVzdEJ1ZzMzNjU0NCgpIHsNCisJdGhpcy5ydW5Db25mb3JtVGVzdCgNCisJCW5ldyBTdHJp
bmdbXSB7DQorCQkJIlguamF2YSIsDQorCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKyANCisJCQki
CXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKyANCisJCQkiCQlJ
bnRlZ2VyIGkxID0gZ2V0SW50KCk7XG4iICsgDQorCQkJIgkJSW50ZWdlciBpMiA9IGkxID09IG51
bGwgPyBudWxsIDogaTE7XG4iICsgDQorCQkJIgkJaWYgKGkyICE9IG51bGwpIHtcbiIgKyANCisJ
CQkiCQkJU3lzdGVtLm91dC5wcmludGxuKFwiU1VDQ0VTU1wiKTtcbiIgKyANCisJCQkiCQkJcmV0
dXJuO1xuIiArIA0KKwkJCSIJCX1cbiIgKyANCisJCQkiCQlTeXN0ZW0ub3V0LnByaW50bG4oXCJG
QUlMVVJFXCIpO1xuIiArIA0KKwkJCSIJfVxuIiArDQorCQkJIglwcml2YXRlIHN0YXRpYyBJbnRl
Z2VyIGdldEludCgpIHtcbiIgKyANCisJCQkiCQlyZXR1cm4gbmV3IEludGVnZXIoMCk7XG4iICsg
DQorCQkJIgl9XG4iICsgDQorCQkJIn0iDQorCQl9LA0KKwkJIlNVQ0NFU1MiKTsNCit9DQorDQor
Ly8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTMzNjU0NA0K
K3B1YmxpYyB2b2lkIHRlc3RCdWczMzY1NDRfMigpIHsNCisJdGhpcy5ydW5Db25mb3JtVGVzdCgN
CisJCW5ldyBTdHJpbmdbXSB7DQorCQkJIlguamF2YSIsDQorCQkJInB1YmxpYyBjbGFzcyBYIHtc
biIgKyANCisJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIg
KyANCisJCQkiCQlJbnRlZ2VyIGkxID0gbnVsbDtcbiIgKyANCisJCQkiCQlJbnRlZ2VyIGkyID0g
KGkxID0gZ2V0SW50KCkpID09IG51bGwgPyBudWxsIDogaTE7XG4iICsgDQorCQkJIgkJaWYgKGky
ICE9IG51bGwpIHtcbiIgKyANCisJCQkiCQkJU3lzdGVtLm91dC5wcmludGxuKFwiU1VDQ0VTU1wi
KTtcbiIgKyANCisJCQkiCQkJcmV0dXJuO1xuIiArIA0KKwkJCSIJCX1cbiIgKyANCisJCQkiCQlT
eXN0ZW0ub3V0LnByaW50bG4oXCJGQUlMVVJFXCIpO1xuIiArIA0KKwkJCSIJfVxuIiArDQorCQkJ
Iglwcml2YXRlIHN0YXRpYyBJbnRlZ2VyIGdldEludCgpIHtcbiIgKyANCisJCQkiCQlyZXR1cm4g
bmV3IEludGVnZXIoMCk7XG4iICsgDQorCQkJIgl9XG4iICsgDQorCQkJIn0iDQorCQl9LA0KKwkJ
IlNVQ0NFU1MiKTsNCit9DQorDQorLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hv
d19idWcuY2dpP2lkPTMzNjU0NA0KK3B1YmxpYyB2b2lkIHRlc3RCdWczMzY1NDRfMygpIHsNCisJ
dGhpcy5ydW5Db25mb3JtVGVzdCgNCisJCW5ldyBTdHJpbmdbXSB7DQorCQkJIlguamF2YSIsDQor
CQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKyANCisJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWlu
KFN0cmluZ1tdIGFyZ3MpIHtcbiIgKyANCisJCQkiCQlJbnRlZ2VyIGkxID0gbnVsbDtcbiIgKyAN
CisJCQkiCQlJbnRlZ2VyIGkyO1xuIiArDQorCQkJIgkJaTIgPSAoaTEgPSBnZXRJbnQoKSkgPT0g
bnVsbCA/IG51bGwgOiBpMTtcbiIgKyANCisJCQkiCQlpZiAoaTIgIT0gbnVsbCkge1xuIiArIA0K
KwkJCSIJCQlTeXN0ZW0ub3V0LnByaW50bG4oXCJTVUNDRVNTXCIpO1xuIiArIA0KKwkJCSIJCQly
ZXR1cm47XG4iICsgDQorCQkJIgkJfVxuIiArIA0KKwkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihc
IkZBSUxVUkVcIik7XG4iICsgDQorCQkJIgl9XG4iICsNCisJCQkiCXByaXZhdGUgc3RhdGljIElu
dGVnZXIgZ2V0SW50KCkge1xuIiArIA0KKwkJCSIJCXJldHVybiBuZXcgSW50ZWdlcigwKTtcbiIg
KyANCisJCQkiCX1cbiIgKyANCisJCQkifSINCisJCX0sDQorCQkiU1VDQ0VTUyIpOw0KK30NCiB9
DQpcIE5vIG5ld2xpbmUgYXQgZW5kIG9mIGZpbGUNCg==
</data>

          </attachment>
      

    </bug>

</bugzilla>