<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>429641</bug_id>
          
          <creation_ts>2014-03-05 04:23:00 -0500</creation_ts>
          <short_desc>IMethod should expose isLambdaMethod() public API</short_desc>
          <delta_ts>2014-03-06 22:24:43 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>427082</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Sarika Sinha">sarika.sinha</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>markus_keller</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="61819"
          type_id="1"
          status="+"
          setter="srikanth_sankaran"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2371655</commentid>
    <comment_count>0</comment_count>
    <who name="Sarika Sinha">sarika.sinha</who>
    <bug_when>2014-03-05 04:23:26 -0500</bug_when>
    <thetext>IMethod should expose a public API like isLambda() to know if a method is of the LambdaMethod</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2371818</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-05 09:01:07 -0500</bug_when>
    <thetext>Markus, any comments ? On the API name or otherwise ? TIA</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2371862</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-05 09:54:53 -0500</bug_when>
    <thetext>Sarika, could you please first outline what is it that you are trying to
accomplish so we know what is the right thing to do.

For one thing, I am not sure if you are asking the method implementing the
lambda to be tagged somehow or the method the implementation logically stands
for in the metafactory produced implementation.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372125</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-05 18:48:14 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #2)
&gt; Sarika, could you please first outline what is it that you are trying to
&gt; accomplish so we know what is the right thing to do.
&gt; 
&gt; For one thing, I am not sure if you are asking the method implementing the
&gt; lambda to be tagged somehow or the method the implementation logically stands
&gt; for in the metafactory produced implementation.

OK, Sorry for the confusion - I now realize you are talking about IMethod and 
not IMethodBinding - 

And looking at the patch https://bugs.eclipse.org/bugs/attachment.cgi?id=240532
clarifies your intent that you really don&apos;t want to instanceof check using an 
internal class and want to use a public API.

I am fine with providing this - So state reverts to comment#1. Looking at
the existing name isMainMethod, I think we should go with isLambdaMethod.

Jay, thanks for taking it forward.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372228</commentid>
    <comment_count>4</comment_count>
      <attachid>240576</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-03-06 01:36:28 -0500</bug_when>
    <thetext>Created attachment 240576
Patch + Test

In terms of code, this is a straight forward fix. But the javadoc needs to be looked at to see if it&apos;s sufficient.

Srikanth, please review.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372275</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-06 04:02:06 -0500</bug_when>
    <thetext>
    - Hooked up JavaElement8Tests to RunOnlyJava8Tests
    - Adjusted copy right, javadoc 
    - added a negative test FWIW and

released here: 
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=51188bd37f57bbe24812245e05132d032104a2b6

Thanks Jay.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372754</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-06 22:24:43 -0500</bug_when>
    <thetext>Verified by code inspection at Java 8 RC2 time.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>240576</attachid>
            <date>2014-03-06 01:36:00 -0500</date>
            <delta_ts>2014-03-06 01:36:28 -0500</delta_ts>
            <desc>Patch + Test</desc>
            <filename>Bug-429641.patch</filename>
            <type>text/plain</type>
            <size>4434</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMAojUCBvcmcuZWNsaXBzZS5qZHQuY29yZS50
ZXN0cy5tb2RlbApkaWZmIC0tZ2l0IHNyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9tb2Rl
bC9KYXZhRWxlbWVudDhUZXN0cy5qYXZhIHNyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9t
b2RlbC9KYXZhRWxlbWVudDhUZXN0cy5qYXZhCmluZGV4IDY1YjVhYWYuLjgwNTRjZjYgMTAwNjQ0
Ci0tLSBzcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvbW9kZWwvSmF2YUVsZW1lbnQ4VGVz
dHMuamF2YQorKysgc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21vZGVsL0phdmFFbGVt
ZW50OFRlc3RzLmphdmEKQEAgLTE5LDQgKzE5LDUgQEAKIAogaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5jb3JlLklDb21waWxhdGlvblVuaXQ7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuSUph
dmFFbGVtZW50OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLklKYXZhUHJvamVjdDsKIGlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5JTWV0aG9kOwpAQCAtNDEsNCArNDIsNSBAQAogCQlz
dWl0ZS5hZGRUZXN0KG5ldyBKYXZhRWxlbWVudDhUZXN0cygidGVzdEJ1ZzQyODE3OCIpKTsKIAkJ
c3VpdGUuYWRkVGVzdChuZXcgSmF2YUVsZW1lbnQ4VGVzdHMoInRlc3RCdWc0MjgxNzhhIikpOwor
CQlzdWl0ZS5hZGRUZXN0KG5ldyBKYXZhRWxlbWVudDhUZXN0cygidGVzdEJ1ZzQyOTY0MSIpKTsK
IAkJcmV0dXJuIHN1aXRlOwogCX0KQEAgLTg5LDMgKzkxLDMwIEBACiAJCX0KIAl9CisJcHVibGlj
IHZvaWQgdGVzdEJ1ZzQyOTY0MSgpIHRocm93cyBFeGNlcHRpb24geworCQl0cnkgeworCQkJSUph
dmFQcm9qZWN0IHByb2plY3QgPSBjcmVhdGVKYXZhUHJvamVjdCgiQnVnNDI5NjQxIiwgbmV3IFN0
cmluZ1tdIHsic3JjIn0sIG5ldyBTdHJpbmdbXSB7IkpDTDE4X0xJQiJ9LCAiYmluIiwgIjEuOCIp
OworCQkJcHJvamVjdC5vcGVuKG51bGwpOworCQkJU3RyaW5nIGZpbGVDb250ZW50ID0gICJwYWNr
YWdlIHA7XG4iICsKKwkJCQkJICJwdWJsaWMgaW50ZXJmYWNlIFRlc3Qge1xuIiArCisJCQkJCSAi
CXN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuIiArCisJCQkJCSAiCQlJIGkgPSAo
eCkgLT4ge307XG4iICsKKwkJCQkJICIJfVxuIiArCisJCQkJCSAifVxuIiArIAorCQkJCQkgImlu
dGVyZmFjZSBJIHtcbiIgKyAKKwkJCQkJICIgIHB1YmxpYyB2b2lkIGZvbyhpbnQgeCk7XG4iICsK
KwkJCQkJICJ9IjsKKwkJCWNyZWF0ZUZvbGRlcigiL0J1ZzQyOTY0MS9zcmMvcCIpOworCQkJY3Jl
YXRlRmlsZSgJIi9CdWc0Mjk2NDEvc3JjL3AvVGVzdC5qYXZhIiwJZmlsZUNvbnRlbnQpOworCQkJ
SUNvbXBpbGF0aW9uVW5pdCB1bml0ID0gZ2V0Q29tcGlsYXRpb25Vbml0KCIvQnVnNDI5NjQxL3Ny
Yy9wL1Rlc3QuamF2YSIpOworCQkJaW50IHN0YXJ0ID0gZmlsZUNvbnRlbnQuaW5kZXhPZigieCkg
LT4iKTsKKwkJCUlKYXZhRWxlbWVudFtdIGVsZW1lbnRzID0gdW5pdC5jb2RlU2VsZWN0KHN0YXJ0
LCAxKTsKKwkJCWFzc2VydEVxdWFscygiSW5jb3JyZWN0IG5vIG9mIGVsZW1lbnRzIiwgMSwgZWxl
bWVudHMubGVuZ3RoKTsKKwkJCWFzc2VydEVxdWFscygiSW5jb3JyZWN0IGVsZW1lbnQgdHlwZSIs
IElKYXZhRWxlbWVudC5MT0NBTF9WQVJJQUJMRSwgZWxlbWVudHNbMF0uZ2V0RWxlbWVudFR5cGUo
KSk7CisJCQlJTWV0aG9kIG1ldGhvZCA9IChJTWV0aG9kKSBlbGVtZW50c1swXS5nZXRQYXJlbnQo
KTsKKwkJCWFzc2VydFRydWUoIlNob3VsZCBiZSBhIGxhbWJkYSBtZXRob2QiLCBtZXRob2QuaXNM
YW1iZGFNZXRob2QoKSk7CisJCX0KKwkJZmluYWxseSB7CisJCQlkZWxldGVQcm9qZWN0KCJCdWc0
Mjk2NDEiKTsKKwkJfQorCX0KIH0KI1Agb3JnLmVjbGlwc2UuamR0LmNvcmUKZGlmZiAtLWdpdCBt
b2RlbC9vcmcvZWNsaXBzZS9qZHQvY29yZS9JTWV0aG9kLmphdmEgbW9kZWwvb3JnL2VjbGlwc2Uv
amR0L2NvcmUvSU1ldGhvZC5qYXZhCmluZGV4IGZiNDY5NzMuLmE1ODQzZWMgMTAwNjQ0Ci0tLSBt
b2RlbC9vcmcvZWNsaXBzZS9qZHQvY29yZS9JTWV0aG9kLmphdmEKKysrIG1vZGVsL29yZy9lY2xp
cHNlL2pkdC9jb3JlL0lNZXRob2QuamF2YQpAQCAtMTMsNSArMTMsNiBAQAogCiAvKioKLSAqIFJl
cHJlc2VudHMgYSBtZXRob2QgKG9yIGNvbnN0cnVjdG9yKSBkZWNsYXJlZCBpbiBhIHR5cGUuCisg
KiBSZXByZXNlbnRzIGEgbWV0aG9kIChvciBjb25zdHJ1Y3RvcikgZGVjbGFyZWQgaW4gYSB0eXBl
IG9yIGRlcml2ZWQKKyAqIGZyb20gYSBsYW1iZGEgZXhwcmVzc2lvbi4KICAqCiAgKiBAbm9pbXBs
ZW1lbnQgVGhpcyBpbnRlcmZhY2UgaXMgbm90IGludGVuZGVkIHRvIGJlIGltcGxlbWVudGVkIGJ5
IGNsaWVudHMuCkBAIC0yNTksNCArMjYwLDEzIEBACiAgKi8KIGJvb2xlYW4gaXNNYWluTWV0aG9k
KCkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbjsKKworLyoqCisgKiBSZXR1cm5zIHdoZXRoZXIg
dGhpcyBtZXRob2QgaXMgZGVyaXZlZCBmcm9tIGEgbGFtYmRhIGV4cHJlc3Npb24uCisgKgorICog
QHNpbmNlIDMuOSBCRVRBX0pBVkE4CisgKiBAcmV0dXJuIHRydWUgaWYgdGhpcyBtZXRob2QgaXMg
YSBsYW1iZGEgZXhwcmVzc2lvbiwgZmFsc2Ugb3RoZXJ3aXNlLgorICovCitib29sZWFuIGlzTGFt
YmRhTWV0aG9kKCk7CisKIC8qKgogICogUmV0dXJucyB3aGV0aGVyIHRoaXMgbWV0aG9kIHJlcHJl
c2VudHMgYSByZXNvbHZlZCBtZXRob2QuCmRpZmYgLS1naXQgbW9kZWwvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvcmUvQmluYXJ5TWV0aG9kLmphdmEgbW9kZWwvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvcmUvQmluYXJ5TWV0aG9kLmphdmEKaW5kZXggYjEyODA4Ny4uMTNiYmUyZCAxMDA2
NDQKLS0tIG1vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0JpbmFyeU1ldGhvZC5q
YXZhCisrKyBtb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9CaW5hcnlNZXRob2Qu
amF2YQpAQCAtNTc3LDQgKzU3NywxMCBAQAogCXJldHVybiB0aGlzLmlzTWFpbk1ldGhvZCh0aGlz
KTsKIH0KKy8qCisgKiBAc2VlIElNZXRob2QjaXNMYW1iZGFNZXRob2QoKQorICovCitwdWJsaWMg
Ym9vbGVhbiBpc0xhbWJkYU1ldGhvZCgpIHsKKwlyZXR1cm4gZmFsc2U7Cit9CiAvKiAobm9uLUph
dmFkb2MpCiAgKiBAc2VlIG9yZy5lY2xpcHNlLmpkdC5jb3JlLklNZXRob2QjaXNSZXNvbHZlZCgp
CmRpZmYgLS1naXQgbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvTGFtYmRhTWV0
aG9kLmphdmEgbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvTGFtYmRhTWV0aG9k
LmphdmEKaW5kZXggOTY4NGJhNi4uZDI1YTQ1NiAxMDA2NDQKLS0tIG1vZGVsL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb3JlL0xhbWJkYU1ldGhvZC5qYXZhCisrKyBtb2RlbC9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29yZS9MYW1iZGFNZXRob2QuamF2YQpAQCAtMTgsNCArMTgsNSBAQAog
aW1wb3J0IG9yZy5lY2xpcHNlLmNvcmUucnVudGltZS5JUHJvZ3Jlc3NNb25pdG9yOwogaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5jb3JlLklMb2NhbFZhcmlhYmxlOworaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5jb3JlLklNZXRob2Q7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuSmF2YU1vZGVs
RXhjZXB0aW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLlNpZ25hdHVyZTsKQEAgLTk0
LDQgKzk1LDEwIEBACiAJfQogCisJLyoqCisJICogQHNlZSBJTWV0aG9kI2lzTGFtYmRhTWV0aG9k
KCkKKwkgKi8KKwlwdWJsaWMgYm9vbGVhbiBpc0xhbWJkYU1ldGhvZCgpIHsKKwkJcmV0dXJuIHRy
dWU7CisJfQogCXByb3RlY3RlZCB2b2lkIGNsb3NpbmcoT2JqZWN0IGluZm8pIHsKIAkJLy8gbm90
aGluZyB0byBkby4KZGlmZiAtLWdpdCBtb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29y
ZS9Tb3VyY2VNZXRob2QuamF2YSBtb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9T
b3VyY2VNZXRob2QuamF2YQppbmRleCAwMDAyNmFiLi4xZTk2YWYyIDEwMDY0NAotLS0gbW9kZWwv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvU291cmNlTWV0aG9kLmphdmEKKysrIG1vZGVs
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL1NvdXJjZU1ldGhvZC5qYXZhCkBAIC0yMjMs
NCArMjIzLDEwIEBACiAJcmV0dXJuIHRoaXMuaXNNYWluTWV0aG9kKHRoaXMpOwogfQorLyoqCisg
KiBAc2VlIElNZXRob2QjaXNMYW1iZGFNZXRob2QoKQorICovCitwdWJsaWMgYm9vbGVhbiBpc0xh
bWJkYU1ldGhvZCgpIHsKKwlyZXR1cm4gZmFsc2U7Cit9CiAvKiAobm9uLUphdmFkb2MpCiAgKiBA
c2VlIG9yZy5lY2xpcHNlLmpkdC5jb3JlLklNZXRob2QjaXNSZXNvbHZlZCgp
</data>

          </attachment>
      

    </bug>

</bugzilla>