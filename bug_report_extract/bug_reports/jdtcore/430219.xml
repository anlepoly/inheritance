<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>430219</bug_id>
          
          <creation_ts>2014-03-12 14:06:00 -0400</creation_ts>
          <short_desc>[1.8][compiler][null] NPE: Null Annotation on Parameter Type</short_desc>
          <delta_ts>2014-03-12 22:33:54 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="shankha banerjee">shankhba</reporter>
          <assigned_to name="shankha banerjee">shankhba</assigned_to>
          <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="61879"
          type_id="1"
          status="+"
          setter="stephan.herrmann"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2375093</commentid>
    <comment_count>0</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-03-12 14:06:52 -0400</bug_when>
    <thetext>import org.eclipse.jdt.annotation.NonNullByDefault;

@NonNullByDefault
public class X {
	void foo(int @NonNull [] x) {}
}

Null Pointer Exception. Stack Trace.

LookupEnvironment.createAnnotatedType(TypeBinding, AnnotationBinding[]) line: 976	
	MethodBinding.fillInDefaultNonNullness18(AbstractMethodDeclaration, LookupEnvironment) line: 524	
	ImplicitNullAnnotationVerifier.checkImplicitNullAnnotations(MethodBinding, AbstractMethodDeclaration, boolean, Scope) line: 155	
	SourceTypeBinding.createArgumentBindings(MethodBinding, CompilerOptions) line: 2004	
	SourceTypeBinding.resolveTypesFor(MethodBinding) line: 1971	
	SourceTypeBinding.methods() line: 1465	
	SourceTypeBinding.faultInTypesForFieldsAndMethods() line: 853	
	CompilationUnitScope.faultInTypes() line: 424	
	AbstractRegressionTest$26(Compiler).process(CompilationUnitDeclaration, int) line: 764	
	AbstractRegressionTest$26.process(CompilationUnitDeclaration, int) line: 2601	
	AbstractRegressionTest$26(Compiler).compile(ICompilationUnit[]) line: 471	
	NullAnnotationTest(AbstractRegressionTest).runTest(boolean, String[], String[], String[], Map, boolean, ICompilerRequestor, boolean, String, String[], boolean, String[], String, String, ASTVisitor, AbstractRegressionTest$JavacTestOptions) line: 2610	
	NullAnnotationTest(AbstractRegressionTest).runTest(boolean, String[], String[], Map, boolean, ICompilerRequestor, boolean, String, boolean, String[], String, String, AbstractRegressionTest$JavacTestOptions) line: 2429	
	NullAnnotationTest(AbstractRegressionTest).runNegativeTest(String[], String, String[], boolean) line: 2126	
	NullAnnotationTest(AbstractNullAnnotationTest).runNegativeTestWithLibs(String[], String) line: 114	
	NullAnnotationTest.testNullNPETest() line: 7013	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 62	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 483	
	NullAnnotationTest(TestCase).runTest() line: 176	
	NullAnnotationTest(TestCase).runBare() line: 141	
	TestResult$1.protect() line: 122	
	TestResult.runProtected(Test, Protectable) line: 142	
	TestResult.run(TestCase) line: 125	
	NullAnnotationTest(TestCase).run(TestResult) line: 129	
	RegressionTestSetup(TestSuite).runTest(Test, TestResult) line: 255	
	RegressionTestSetup(TestSuite).run(TestResult) line: 250	
	RegressionTestSetup(CompilerTestSetup).run(TestResult) line: 55	
	TestSuite.runTest(Test, TestResult) line: 255	
	TestSuite.run(TestResult) line: 250	
	JUnit3TestReference.run(TestExecution) line: 131	
	TestExecution.run(ITestReference[]) line: 38	
	RemotePluginTestRunner(RemoteTestRunner).runTests(String[], String, TestExecution) line: 467	
	RemotePluginTestRunner(RemoteTestRunner).runTests(TestExecution) line: 683	
	RemotePluginTestRunner(RemoteTestRunner).run() line: 390	
	RemotePluginTestRunner.main(String[]) line: 62	
	CoreTestApplication.run(Object) line: 23	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 62	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 483	
	EclipseAppContainer.callMethodWithException(Object, String, Class[], Object[]) line: 587	
	EclipseAppHandle.run(Object) line: 198	
	EclipseAppLauncher.runApplication(Object) line: 110	
	EclipseAppLauncher.start(Object) line: 79	
	EclipseStarter.run(Object) line: 354	
	EclipseStarter.run(String[], Runnable) line: 181	
	NativeMethodAccessorImpl.invoke0(Method, Object, Object[]) line: not available [native method]	
	NativeMethodAccessorImpl.invoke(Object, Object[]) line: 62	
	DelegatingMethodAccessorImpl.invoke(Object, Object[]) line: 43	
	Method.invoke(Object, Object...) line: 483	
	Main.invokeFramework(String[], URL[]) line: 636	
	Main.basicRun(String[]) line: 591	
	Main.run(String[]) line: 1450	
	Main.main(String[]) line: 1426 

------------------------------------------------------------------
I will put up the fix in a few minutes.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375094</commentid>
    <comment_count>1</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-03-12 14:08:20 -0400</bug_when>
    <thetext>Fails with SR2.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375095</commentid>
    <comment_count>2</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-03-12 14:11:37 -0400</bug_when>
    <thetext>(In reply to shankha banerjee from comment #1)
&gt; Fails with SR2.

Fails with SR2 + Java8.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375097</commentid>
    <comment_count>3</comment_count>
      <attachid>240826</attachid>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-03-12 14:13:15 -0400</bug_when>
    <thetext>Created attachment 240826
Patch

The list array containing all the annotations associated with a array
type is delimited (denoting dimensions) by null entries.

We throw a NPE while trying to de refeence one of the NULL entries.

The patch carries forward the null entries.

All Test Results are green.

I will play around with arrays and null annotations 
a little more and see if there are any other issues.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375132</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-12 15:33:32 -0400</bug_when>
    <thetext>Stephan, just an alert that I am seeing two AnnotationBindings for NonNull
one with a proper annotation type and another with a MTB - and effectively 
no filtering happening there, the NPE fix is good.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375133</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-12 15:35:00 -0400</bug_when>
    <thetext>If this comes in soon (a day or two) we can have this for GA - since this
happens under option check.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375214</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-12 19:28:21 -0400</bug_when>
    <thetext>Seeing the MissingTypeBinding explains the duplication: the explicit annotation in source code was not resolved and hence not recognized as the NonNull annotation. OTOH, the annotation we add from the default is always resolved, since using a FQN.

The same NPE can be triggered like this:

//---
import org.eclipse.jdt.annotation.NonNullByDefault;
import java.lang.annotation.*;
@Target(ElementType.TYPE_USE) @interface Marker{}
@NonNullByDefault
public class X {
       void foo(int @Marker[] x) {}
}
//---

which demonstrates the necessary ingredients:

- any annotation on the outermost dimension
- apply @NonNull as per the default

Searching further basically the same situation can be created by
//---
import java.lang.annotation.*;
@Target(ElementType.TYPE_USE) @interface Marker1 {}
@Target(ElementType.TYPE_USE) @interface Marker2 {}
public class C {
  &lt;@Marker1 T&gt;T m2(T arg) {
    return arg;
  }
  void test2(C c) {
    String[] s = c.&lt;String @Marker1 []&gt;m2(null);
  }
}
//---

from which I see in LE.createAnnotatedType:
oldies[0] = @Marker2
oldies[1] = null

newbies[0] = @Marker1

merged to
newbies[0] = @Marker1
newbies[1] = @Marker2
newbies[2] = null

creates this type: String @Marker1 @Marker2 []

From this I conclude that the null in the array of annotations has system and maybe shouldn&apos;t be removed, at least not at this particular code position.

The null array element is created via this line in ATS.getAnnotatedType():

annotatedType = getArrayType(arrayBinding.leafComponentType, arrayBinding.dimensions, flattenedAnnotations(annotations));

Comment of flattenedAnnotations mentions &quot;There is a final null always.&quot;
So, yep, the null element is intentional =&gt; let&apos;s not remove it!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375219</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-12 19:43:46 -0400</bug_when>
    <thetext>After that analysis, going back to the patch I see that it does exactly the right thing, great, so we agree :)

I just cleaned up newlines in the test, added another one and released 

BETA_JAVA8 : http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=5e60820b64ef6517f212bad731ec82ee0e19c44d

BETA_JAVA8_LUNA: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8_LUNA&amp;id=36b688c7927454020434d559d15c8536a0c1af14

Thanks, Shankha!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375241</commentid>
    <comment_count>8</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-03-12 22:30:09 -0400</bug_when>
    <thetext>I had initially tested with 
if(newbies[i] == null) {
  //filtered[count++] = null;
  continue;
}

We don&apos;t let the null entries through to filtered.
None of the tests failed.

I will see if I can come up with a test case which can expose this scenario.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375242</commentid>
    <comment_count>9</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-03-12 22:31:30 -0400</bug_when>
    <thetext>(In reply to shankha banerjee from comment #8)
&gt; I had initially tested with 
&gt; if(newbies[i] == null) {
&gt;   //filtered[count++] = null;
&gt;   continue;
&gt; }
&gt; 
&gt; We don&apos;t let the null entries through to filtered.
&gt; None of the tests failed.
&gt; 
&gt; I will see if I can come up with a test case which can expose this scenario.

Or if the delimiters (null entries) can be removed earlier.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375243</commentid>
    <comment_count>10</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-12 22:32:08 -0400</bug_when>
    <thetext>(In reply to shankha banerjee from comment #9)
&gt; (In reply to shankha banerjee from comment #8)
&gt; &gt; I had initially tested with 
&gt; &gt; if(newbies[i] == null) {
&gt; &gt;   //filtered[count++] = null;
&gt; &gt;   continue;
&gt; &gt; }
&gt; &gt; 
&gt; &gt; We don&apos;t let the null entries through to filtered.
&gt; &gt; None of the tests failed.


But we must. So the fix is correct.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375244</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-12 22:33:54 -0400</bug_when>
    <thetext>(In reply to shankha banerjee from comment #9)

&gt; &gt; I will see if I can come up with a test case which can expose this scenario.
&gt; 
&gt; Or if the delimiters (null entries) can be removed earlier.

I am not sure I understand the motivation behind this exercise. The fix is
correct, null entries should not be removed.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>240826</attachid>
            <date>2014-03-12 14:13:00 -0400</date>
            <delta_ts>2014-03-12 14:13:15 -0400</delta_ts>
            <desc>Patch</desc>
            <filename>patch.patch</filename>
            <type>text/plain</type>
            <size>2568</size>
            <attacher name="shankha banerjee">shankhba</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxUeXBlQW5ub3Rh
dGlvblRlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9v
cmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxUeXBlQW5u
b3RhdGlvblRlc3QuamF2YQppbmRleCAyMTNjYmFiLi4zNmJkNzE1IDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OdWxsVHlwZUFubm90YXRpb25UZXN0LmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pk
dC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbFR5cGVBbm5vdGF0aW9uVGVzdC5q
YXZhCkBAIC0xMSw2ICsxMSw3IEBACiAgKgogICogQ29udHJpYnV0b3JzOgogICogICAgIFN0ZXBo
YW4gSGVycm1hbm4gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24KKyAqICAgICBJQk0g
Q29ycG9yYXRpb24KICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwogcGFja2FnZSBvcmcuZWNsaXBz
ZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci5yZWdyZXNzaW9uOwogCkBAIC00MzQ2LDQgKzQzNDcs
MjEgQEAgcHVibGljIHZvaWQgdGVzdEJ1ZzQyOTQwMygpIHsKIAkJIk51bGwgdHlwZSBtaXNtYXRj
aCAodHlwZSBhbm5vdGF0aW9ucyk6IHJlcXVpcmVkIFwnTGlzdDxATm9uTnVsbCBQZXJzb24+XCcg
YnV0IHRoaXMgZXhwcmVzc2lvbiBoYXMgdHlwZSBcJ0FycmF5TGlzdDxATnVsbGFibGUgUGVyc29u
PlwnLCBjb3JyZXNwb25kaW5nIHN1cGVydHlwZSBpcyBcJ0xpc3Q8QE51bGxhYmxlIFBlcnNvbj5c
J1xuIiArIAogCQkiLS0tLS0tLS0tLVxuIik7CiB9CitwdWJsaWMgdm9pZCB0ZXN0QnVnNDMwMjE5
KCkgeworICAgIHJ1bk5lZ2F0aXZlVGVzdFdpdGhMaWJzKAorICAgICAgICBuZXcgU3RyaW5nW10g
eworICAgICAgICAgICAgIlguamF2YSIsCisgICAgICAgICAgICAiaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5hbm5vdGF0aW9uLk5vbk51bGxCeURlZmF1bHQ7XG4iICsKKyAgICAgICAgICAgICJATm9u
TnVsbEJ5RGVmYXVsdFxuIiArCisgICAgICAgICAgICAicHVibGljIGNsYXNzIFggeyIgKworICAg
ICAgICAgICAgIiAgICAgICB2b2lkIGZvbyhpbnQgQE5vbk51bGwgW10geCkge30gIiArCisgICAg
ICAgICAgICAifSIKKyAgICAgICAgfSwKKyAgICAgICAgIi0tLS0tLS0tLS1cbiIgKworCSAgICIx
LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMylcbiIgKworCQkiCXB1YmxpYyBjbGFzcyBYIHsg
ICAgICAgdm9pZCBmb28oaW50IEBOb25OdWxsIFtdIHgpIHt9IH1cbiIgKworICAgICAgICAiCSAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXG4iICsKKwkgICAiTm9u
TnVsbCBjYW5ub3QgYmUgcmVzb2x2ZWQgdG8gYSB0eXBlXG4iICsKKwkgICAiLS0tLS0tLS0tLVxu
Iik7Cit9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0xvb2t1cEVudmlyb25tZW50Lmph
dmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvbG9va3VwL0xvb2t1cEVudmlyb25tZW50LmphdmEKaW5kZXggNmZmNWUyOC4u
MDIyMjdiMCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Mb29rdXBFbnZpcm9ubWVudC5qYXZh
CisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9sb29rdXAvTG9va3VwRW52aXJvbm1lbnQuamF2YQpAQCAtOTcyLDYgKzk3
MiwxMCBAQCBwdWJsaWMgVHlwZUJpbmRpbmcgY3JlYXRlQW5ub3RhdGVkVHlwZShUeXBlQmluZGlu
ZyB0eXBlLCBBbm5vdGF0aW9uQmluZGluZ1tdIG5ldwogCQlBbm5vdGF0aW9uQmluZGluZ1tdIGZp
bHRlcmVkID0gbmV3IEFubm90YXRpb25CaW5kaW5nW25ld2JpZXMubGVuZ3RoXTsKIAkJaW50IGNv
dW50ID0gMDsKIAkJZm9yIChpbnQgaSA9IDA7IGkgPCBuZXdiaWVzLmxlbmd0aDsgaSsrKSB7CisJ
CQlpZiAobmV3Ymllc1tpXSA9PSBudWxsKSB7CisJCQkJZmlsdGVyZWRbY291bnQrK10gPSBudWxs
OworCQkJCWNvbnRpbnVlOworCQkJfQogCQkJbG9uZyB0YWdCaXRzID0gMDsKIAkJCXN3aXRjaCAo
bmV3Ymllc1tpXS50eXBlLmlkKSB7CiAJCQkJY2FzZSBUeXBlSWRzLlRfQ29uZmlndXJlZEFubm90
YXRpb25Ob25OdWxsICA6IHRhZ0JpdHMgPSBUYWdCaXRzLkFubm90YXRpb25Ob25OdWxsOyBicmVh
azsK
</data>
<flag name="review"
          id="61878"
          type_id="6"
          status="?"
          setter="shankhba"
    />
          </attachment>
      

    </bug>

</bugzilla>