<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>427483</bug_id>
          
          <creation_ts>2014-02-05 11:35:00 -0500</creation_ts>
          <short_desc>[Java 8] Variables in lambdas sometimes can&apos;t be resolved</short_desc>
          <delta_ts>2014-02-21 04:51:44 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3.1</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Marco Trudel">marco</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>jarthana</cc>
    
    <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2359176</commentid>
    <comment_count>0</comment_count>
    <who name="Marco Trudel">marco</who>
    <bug_when>2014-02-05 11:35:06 -0500</bug_when>
    <thetext>With the most recent Java 8 support, Eclipse reports the error as given in the snippet:

new TreeSet&lt;&gt;((String qn1, String qn2) -&gt; {
   boolean b = true;
   System.out.println(b); // ok
   if(b) { } // Eclipse says: b cannot be resolved or is not a field
   return qn1.compareTo(qn2);
});</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2359197</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-05 12:16:55 -0500</bug_when>
    <thetext>Strange indeed.

If I plug in explicit type argument in place of the diamond problem vanishes.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2359207</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-05 12:40:09 -0500</bug_when>
    <thetext>Stephan, the lambda&apos;s eventual resolution seems to be happening one too
many times: 

First time from: 

LambdaExpression(FunctionalExpression).checkAgainstFinalTargetType(TypeBinding) line: 176	
InferenceContext18.acceptPendingPolyArguments(BoundSet, TypeBinding[], boolean) line: 1200	
InferenceContext18.rebindInnerPolies(BoundSet, TypeBinding[]) line: 1149	
InferenceContext18.rebindInnerPolies(MethodBinding, InvocationSite) line: 1134	
InferenceContext18.inferInvocationType(Invocation, TypeBinding[], ParameterizedGenericMethodBinding) line: 543	
MethodScope(Scope).inferInvocationType(InvocationSite, MethodBinding, TypeBinding[]) line: 5049	
MethodScope(Scope).getStaticFactory(ReferenceBinding, ReferenceBinding, TypeBinding[], Invocation) line: 4962	
AllocationExpression.inferElidedTypes(ReferenceBinding, ReferenceBinding, TypeBinding[], BlockScope) line: 572	
AllocationExpression.resolvePart2(AllocationExpression$ResolutionState) line: 492	
AllocationExpression.resolveType(BlockScope) line: 482	
AllocationExpression(Expression).resolve(BlockScope) line: 1018	
MethodDeclaration(AbstractMethodDeclaration).resolveStatements() line: 621	
MethodDeclaration.resolveStatements() line: 303	
MethodDeclaration(AbstractMethodDeclaration).resolve(ClassScope) line: 532	


and subsequently from:

LambdaExpression(FunctionalExpression).checkAgainstFinalTargetType(TypeBinding) line: 176	
ASTNode.resolvePolyExpressionArguments(Invocation, MethodBinding, TypeBinding[]) line: 730	
MethodScope(Scope).inferInvocationType(InvocationSite, MethodBinding, TypeBinding[]) line: 5052	
MethodScope(Scope).getConstructor0(ReferenceBinding, TypeBinding[], InvocationSite) line: 2451	
MethodScope(Scope).getConstructor(ReferenceBinding, TypeBinding[], InvocationSite) line: 2390	
AllocationExpression(Statement).findConstructorBinding(BlockScope, Invocation, ReferenceBinding, TypeBinding[]) line: 340	
AllocationExpression.resolvePart2(AllocationExpression$ResolutionState) line: 506	
AllocationExpression.resolveType(BlockScope) line: 482	
AllocationExpression(Expression).resolve(BlockScope) line: 1018	
MethodDeclaration(AbstractMethodDeclaration).resolveStatements() line: 621	
MethodDeclaration.resolveStatements() line: 303	
MethodDeclaration(AbstractMethodDeclaration).resolve(ClassScope) line: 532	


I though we had a very similar issue recently. Perhaps that fix was
MessageSend specific ? If so we need to make sure other invocation forms
are similarly handled. Thanks for taking a look.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2359208</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-05 12:43:31 -0500</bug_when>
    <thetext>This looks very similar to https://bugs.eclipse.org/bugs/show_bug.cgi?id=424710#c1
We should also include a test for ECC and QAE. Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2359224</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-05 13:08:17 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #3)
&gt; This looks very similar to
&gt; https://bugs.eclipse.org/bugs/show_bug.cgi?id=424710#c1
&gt; We should also include a test for ECC and QAE. Thanks.

If I add 

    if (this.resolvedType != null)
        return this.resolvedType

the problem vanishes. 

In ASTNode.resolvePolyExpressionArguments

	if (argument.isPolyExpression()) {
					// poly expressions in an invocation context may need to be resolved now:
					if (infCtx != null &amp;&amp; infCtx.stepCompleted == InferenceContext18.BINDINGS_UPDATED)
						updatedArgumentType = argument.resolvedType; // in this case argument was already resolved via InferenceContext18.acceptPendingPolyArguments()
					else
						updatedArgumentType = argument.checkAgainstFinalTargetType(parameterType);

infCtx comes out as null.

We should also take out all the unresolve() calls as soon as reasonably
possible. 

Recently, I implemented support for method/constructor references targetting
varargs method by transforming the method reference into a synthesized
implicit lambda. I needed bits and pieces of virgin AST for this and this
was achieved by: 

final Parser parser = new Parser(this.enclosingScope.problemReporter(), false);
		final char[] source = this.compilationResult.getCompilationUnit().getContents();
		ReferenceExpression copy =  (ReferenceExpression) parser.parseExpression(source, this.sourceStart, this.sourceEnd - this.sourceStart + 1, 
										this.enclosingScope.referenceCompilationUnit(), false /* record line separators */);
		
This should work for any expression actually.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2359393</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-05 18:32:44 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #4)
&gt; We should also take out all the unresolve() calls as soon as reasonably
&gt; possible. 

Yes, please :) I copied your hint over to bug 426996</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2359420</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-05 21:15:46 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #4)
&gt; infCtx comes out as null.

Yep, that&apos;s the culprit. We registered an inference context but against a _slightly_ different method: the synthetic static factory for the diamond invocation. Later when we use the real constructor we fail to retrieve this inference context.

I invented a little new subclass of MethodBinding: SyntheticFactoryMethodBinding, which remembers the original constructor it represents.

Now, when we register an inference context for a given PGMB, where the underlying original is a SyntheticFactoryMethodBinding, we can register the inference context also for the real constructor updated with matching type arguments.

Effect: we correctly find the inference context, see it has state BINDINGS_UPDATED, and quit from resolvePolyExpressionArguments() thus avoiding duplicate work.

Released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=c0648c986bd8f9b4b5c031105639a6f9119992bf</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2366603</commentid>
    <comment_count>7</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-02-21 04:51:20 -0500</bug_when>
    <thetext>The code does not compile and throws up a error 
&quot;Eclipse says: b cannot be resolved or is not a field&quot; as specified in Comment 0
with older builds.

Compiles without any issues with 
Eclipse + Java 8 RC1 Eclipse Kepler 4.3.2(RC4) Build id: M20140212-0800 +  
Eclipse Java Development Tools Patch for Java 8 Support (BETA)	
1.0.0.v20140220-2054.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2366604</commentid>
    <comment_count>8</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-02-21 04:51:44 -0500</bug_when>
    <thetext>Verified as working for Eclipse + Java 8 RC1 Eclipse Kepler 4.3.2(RC4) Build id: M20140212-0800 +  
Eclipse Java Development Tools Patch for Java 8 Support (BETA)	
1.0.0.v20140220-2054.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>