<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>365992</bug_id>
          
          <creation_ts>2011-12-08 04:19:00 -0500</creation_ts>
          <short_desc>[builder] [null] Change of nullness for a parameter doesn&apos;t trigger a build for the files that call the method</short_desc>
          <delta_ts>2012-01-23 02:04:40 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>3.8 M5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Satyam Kandula">satyam.kandula</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>loskutov</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="47458"
          type_id="1"
          status="+"
          setter="amj87.iitr"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2037555</commentid>
    <comment_count>0</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-12-08 04:19:24 -0500</bug_when>
    <thetext>Consider two classes
#######
public class Test1 {
	public void foo() {
		new Test2().bar(null);
	}
}
#######
import org.eclipse.jdt.annotation.NonNull;
public class Test2 {
	public void bar(@NonNull String str) {}		
}
#####
With &apos;Build Automatically&apos; turned on, change in the nullness of the parameter &apos;str&apos; in bar() should rebuild Test1. This is not happening now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2037556</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-08 04:23:21 -0500</bug_when>
    <thetext>Good catch Satyam. See that it works alright for null annotation change
on the method return type. (otherwise changes in @Deprecated wouldn&apos;t
trigger an incremental build.)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2037727</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-08 09:09:56 -0500</bug_when>
    <thetext>Me thinks this could be an omission in 
org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader.hasStructuralMethodChanges(MethodInfo, MethodInfo)

(not handling parameter annotations when comparing methods).

Does this sound like the right spot to dive into?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2037772</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-08 10:02:21 -0500</bug_when>
    <thetext>(In reply to comment #2)
&gt; Me thinks this could be an omission in 
&gt; org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader.hasStructuralMethodChanges(MethodInfo,
&gt; MethodInfo)
&gt; 
&gt; (not handling parameter annotations when comparing methods).
&gt; 
&gt; Does this sound like the right spot to dive into?

Yes, I believe you are on the right track.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2037776</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-08 10:04:09 -0500</bug_when>
    <thetext>See also https://bugs.eclipse.org/bugs/show_bug.cgi?id=149768</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2038878</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-09 19:41:07 -0500</bug_when>
    <thetext>(In reply to comment #4)
&gt; See also https://bugs.eclipse.org/bugs/show_bug.cgi?id=149768

Thanks for the pointer. Specifically an example how this kind of issue
can best be tested comes very handy.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2039082</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-11 21:24:12 -0500</bug_when>
    <thetext>*** Bug 366341 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2039083</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-11 21:26:32 -0500</bug_when>
    <thetext>Per bug# 366341 comment #0, adding annotations to return type doesn&apos;t
trigger incremental build. This was supposed to already work.

Stephan, please remember to check and add junits for this scenario too,
TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2040074</commentid>
    <comment_count>8</comment_count>
      <attachid>208319</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-13 11:05:09 -0500</bug_when>
    <thetext>Created attachment 208319
test &amp; fix

The test checks adding/removing/changing a null annotation
on a method parameter and on the method itself (return type).

As expected a small addition in
ClassFileReader.hasStructuralMethodChanges(MethodInfo, MethodInfo)
suffices to trigger the desired rebuild.

The patch also contains a rename requested in bug 365387 comment 15
(in item (21)). I hope the new name is clearer
(the proposed name getTotalParameterCount wouldn&apos;t fit for the 
implementation in MethodInfo, which constantly returns 0).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2040398</commentid>
    <comment_count>9</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-13 20:29:45 -0500</bug_when>
    <thetext>(In reply to comment #8)

&gt; The patch also contains a rename requested in bug 365387 comment 15
&gt; (in item (21)). I hope the new name is clearer
&gt; (the proposed name getTotalParameterCount wouldn&apos;t fit for the 
&gt; implementation in MethodInfo, which constantly returns 0).

It is better, still not totally apt, but I think we can settle for your
choice. Ayush, please review, TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2043269</commentid>
    <comment_count>10</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-12-21 01:36:09 -0500</bug_when>
    <thetext>Patch looks good. Change in defaults also causes incremental build which is good.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2043851</commentid>
    <comment_count>11</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-22 07:04:40 -0500</bug_when>
    <thetext>Released for 3.8 M5 via commit d2fd0a411735601d08912dc407d669f4cabc6555</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2054208</commentid>
    <comment_count>12</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-23 02:04:40 -0500</bug_when>
    <thetext>Verified for 3.8 M5 using build id: I20120122-2000</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>208319</attachid>
            <date>2011-12-13 11:05:00 -0500</date>
            <delta_ts>2011-12-13 11:05:09 -0500</delta_ts>
            <desc>test &amp; fix</desc>
            <filename>Bug_365992.patch</filename>
            <type>text/plain</type>
            <size>12066</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmJ1aWxkZXIvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2J1aWxkZXIvQW5ub3RhdGlvbkRlcGVuZGVuY3lUZXN0cy5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuYnVpbGRlci9zcmMvb3JnL2VjbGlwc2Uv
amR0L2NvcmUvdGVzdHMvYnVpbGRlci9Bbm5vdGF0aW9uRGVwZW5kZW5jeVRlc3RzLmphdmEKaW5k
ZXggMzhmMGE5OS4uNTg5N2EwNyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVz
dHMuYnVpbGRlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvYnVpbGRlci9Bbm5vdGF0
aW9uRGVwZW5kZW5jeVRlc3RzLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMu
YnVpbGRlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvYnVpbGRlci9Bbm5vdGF0aW9u
RGVwZW5kZW5jeVRlc3RzLmphdmEKQEAgLTExLDEwICsxMSwyMCBAQAogICoqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKiovCiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmJ1aWxkZXI7CiAK
K2ltcG9ydCBqYXZhLmlvLkZpbGU7CitpbXBvcnQgamF2YS5pby5JT0V4Y2VwdGlvbjsKKwogaW1w
b3J0IGp1bml0LmZyYW1ld29yay5UZXN0OwogCiBpbXBvcnQgb3JnLmVjbGlwc2UuY29yZS5yZXNv
dXJjZXMuSU1hcmtlcjsKK2ltcG9ydCBvcmcuZWNsaXBzZS5jb3JlLnJ1bnRpbWUuRmlsZUxvY2F0
b3I7CiBpbXBvcnQgb3JnLmVjbGlwc2UuY29yZS5ydW50aW1lLklQYXRoOworaW1wb3J0IG9yZy5l
Y2xpcHNlLmNvcmUucnVudGltZS5QYXRoOworaW1wb3J0IG9yZy5lY2xpcHNlLmNvcmUucnVudGlt
ZS5QbGF0Zm9ybTsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5JQ2xhc3NwYXRoRW50cnk7
CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuSUphdmFQcm9qZWN0OworaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5jb3JlLkphdmFDb3JlOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLkph
dmFNb2RlbEV4Y2VwdGlvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5D
YXRlZ29yaXplZFByb2JsZW07CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMudXRp
bC5VdGlsOwogCkBAIC0xMjcsNiArMTM3LDIwIEBACiAJCWVudi5hZGRDbGFzcyh0aGlzLnNyY1Jv
b3QsICJwMSIsICJBbm5vQ2xhc3MiLCBhbm5vQ29kZSk7CiAJfQogCQorCXZvaWQgc2V0dXBQcm9q
ZWN0Rm9yTnVsbEFubm90YXRpb25zKCkgdGhyb3dzIElPRXhjZXB0aW9uLCBKYXZhTW9kZWxFeGNl
cHRpb24geworCQkvLyBhZGQgdGhlIG9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uIGxpYnJhcnkg
KGJpbi8gZm9sZGVyIG9yIGphcikgdG8gdGhlIHByb2plY3Q6CisJCUZpbGUgYnVuZGxlRmlsZSA9
IEZpbGVMb2NhdG9yLmdldEJ1bmRsZUZpbGUoUGxhdGZvcm0uZ2V0QnVuZGxlKCJvcmcuZWNsaXBz
ZS5qZHQuYW5ub3RhdGlvbiIpKTsKKwkJU3RyaW5nIGFubm90YXRpb25zTGliID0gYnVuZGxlRmls
ZS5pc0RpcmVjdG9yeSgpID8gYnVuZGxlRmlsZS5nZXRQYXRoKCkrIi9iaW4iIDogYnVuZGxlRmls
ZS5nZXRQYXRoKCk7CisJCUlKYXZhUHJvamVjdCBqYXZhUHJvamVjdCA9IGVudi5nZXRKYXZhUHJv
amVjdCh0aGlzLnByb2plY3RQYXRoKTsKKwkJSUNsYXNzcGF0aEVudHJ5W10gcmF3Q2xhc3NwYXRo
ID0gamF2YVByb2plY3QuZ2V0UmF3Q2xhc3NwYXRoKCk7CisJCWludCBsZW4gPSByYXdDbGFzc3Bh
dGgubGVuZ3RoOworCQlTeXN0ZW0uYXJyYXljb3B5KHJhd0NsYXNzcGF0aCwgMCwgcmF3Q2xhc3Nw
YXRoID0gbmV3IElDbGFzc3BhdGhFbnRyeVtsZW4rMV0sIDAsIGxlbik7CisJCXJhd0NsYXNzcGF0
aFtsZW5dID0gSmF2YUNvcmUubmV3TGlicmFyeUVudHJ5KG5ldyBQYXRoKGFubm90YXRpb25zTGli
KSwgbnVsbCwgbnVsbCk7CisJCWphdmFQcm9qZWN0LnNldFJhd0NsYXNzcGF0aChyYXdDbGFzc3Bh
dGgsIG51bGwpOworCisJCWphdmFQcm9qZWN0LnNldE9wdGlvbihKYXZhQ29yZS5DT01QSUxFUl9B
Tk5PVEFUSU9OX05VTExfQU5BTFlTSVMsIEphdmFDb3JlLkVOQUJMRUQpOworCX0KKwogCS8qKgog
CSAqIFRoaXMgdGVzdCBtYWtlcyBzdXJlIHRoYXQgY2hhbmdpbmcgYW4gYW5ub3RhdGlvbiBvbiB0
eXBlIEEgY2F1c2VzIHR5cGUgQgogCSAqIHRvIGJlIHJlY29tcGlsZWQsIGlmIEIgcmVmZXJlbmNl
cyBBLiAgU2VlIGh0dHA6Ly9idWdzLmVjbGlwc2Uub3JnLzE0OTc2OApAQCAtMTM3MSw0ICsxMzk1
LDExNSBAQAogCQkvLyB2ZXJpZnkgdGhhdCBCIHdhcyByZWNvbXBpbGVkCiAJCWV4cGVjdGluZ1Vu
aXF1ZUNvbXBpbGVkQ2xhc3NlcyhuZXcgU3RyaW5nW10geyAicDEuQSIsICJwMS5CIiB9KTsKIAl9
CisKKwkvLyBCdWcgMzY1OTkyIC0gW2J1aWxkZXJdIFtudWxsXSBDaGFuZ2Ugb2YgbnVsbG5lc3Mg
Zm9yIGEgcGFyYW1ldGVyIGRvZXNuJ3QgdHJpZ2dlciBhIGJ1aWxkIGZvciB0aGUgZmlsZXMgdGhh
dCBjYWxsIHRoZSBtZXRob2QKKwlwdWJsaWMgdm9pZCB0ZXN0UGFyYW1ldGVyQW5ub3RhdGlvbkRl
cGVuZGVuY3kwMSgpIHRocm93cyBKYXZhTW9kZWxFeGNlcHRpb24sIElPRXhjZXB0aW9uIHsKKwkJ
Ly8gcHJlcGFyZSB0aGUgcHJvamVjdDoKKwkJc2V0dXBQcm9qZWN0Rm9yTnVsbEFubm90YXRpb25z
KCk7CisKKwkJU3RyaW5nIHRlc3QxQ29kZSA9ICJwYWNrYWdlIHAxO1xuIgkrCisJCQkicHVibGlj
IGNsYXNzIFRlc3QxIHtcbiIgKworCQkJIiAgICBwdWJsaWMgdm9pZCBmb28oKSB7XG4iICsKKwkJ
CSIgICAgICAgIG5ldyBUZXN0MigpLmJhcihudWxsKTtcbiIgKworCQkJIiAgICB9XG4iICsKKwkJ
CSJ9IjsKKwkJU3RyaW5nIHRlc3QyQ29kZSA9ICJwYWNrYWdlIHAxO1xuIiArCisJCQkicHVibGlj
IGNsYXNzIFRlc3QyIHtcbiIgKworCQkJIiAgICBwdWJsaWMgdm9pZCBiYXIoU3RyaW5nIHN0cikg
e31cbiIgKworCQkJIn0iOworCisJCUlQYXRoIHRlc3QxUGF0aCA9IGVudi5hZGRDbGFzcyggdGhp
cy5zcmNSb290LCAicDEiLCAiVGVzdDEiLCB0ZXN0MUNvZGUgKTsKKwkJZW52LmFkZENsYXNzKCB0
aGlzLnNyY1Jvb3QsICJwMSIsICJUZXN0MiIsIHRlc3QyQ29kZSApOworCisJCWZ1bGxCdWlsZCgg
dGhpcy5wcm9qZWN0UGF0aCApOworCQlleHBlY3RpbmdOb1Byb2JsZW1zKCk7CisKKwkJLy8gZWRp
dCBUZXN0MiB0byBhZGQgQE5vbk51bGwgYW5ub3RhdGlvbiAoY2hhbmdlcyBudW1iZXIgb2YgYW5u
b3RhdGlvbnMpCisJCVN0cmluZyB0ZXN0MkNvZGVCID0gInBhY2thZ2UgcDE7XG4iICsKKwkJCSJp
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTm9uTnVsbDtcbiIgKworCQkJInB1Ymxp
YyBjbGFzcyBUZXN0MiB7XG4iICsKKwkJCSIgICAgcHVibGljIHZvaWQgYmFyKEBOb25OdWxsIFN0
cmluZyBzdHIpIHt9XG4iICsKKwkJCSJ9IjsKKwkJZW52LmFkZENsYXNzKCB0aGlzLnNyY1Jvb3Qs
ICJwMSIsICJUZXN0MiIsIHRlc3QyQ29kZUIgKTsKKwkJaW5jcmVtZW50YWxCdWlsZCggdGhpcy5w
cm9qZWN0UGF0aCApOworCQlleHBlY3RpbmdQcm9ibGVtc0Zvcih0ZXN0MVBhdGgsIAorCQkJCSJQ
cm9ibGVtIDogVHlwZSBtaXNtYXRjaDogcmVxdWlyZWQgXCdATm9uTnVsbCBTdHJpbmdcJyBidXQg
dGhlIHByb3ZpZGVkIHZhbHVlIGlzIG51bGwgWyByZXNvdXJjZSA6IDwvUHJvamVjdC9zcmMvcDEv
VGVzdDEuamF2YT4gcmFuZ2UgOiA8ODEsODU+IGNhdGVnb3J5IDogPDkwPiBzZXZlcml0eSA6IDwy
Pl0iKTsKKworCQkvLyB2ZXJpZnkgdGhhdCBUZXN0MSB3YXMgcmVjb21waWxlZAorCQlleHBlY3Rp
bmdVbmlxdWVDb21waWxlZENsYXNzZXMobmV3IFN0cmluZ1tdIHsgInAxLlRlc3QxIiwgInAxLlRl
c3QyIiB9KTsKKworCQkvLyBmaXggZXJyb3IgYnkgY2hhbmdpbmcgdG8gQE51bGxhYmxlIChjaGFu
Z2UgaXMgb25seSBpbiBhbiBhbm5vdGF0aW9uIG5hbWUpCisJCVN0cmluZyB0ZXN0MkNvZGVDID0g
InBhY2thZ2UgcDE7XG4iICsKKwkJCSJpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24u
TnVsbGFibGU7XG4iICsKKwkJCSJwdWJsaWMgY2xhc3MgVGVzdDIge1xuIiArCisJCQkiICAgIHB1
YmxpYyB2b2lkIGJhcihATnVsbGFibGUgU3RyaW5nIHN0cikge31cbiIgKworCQkJIn0iOworCQll
bnYuYWRkQ2xhc3MoIHRoaXMuc3JjUm9vdCwgInAxIiwgIlRlc3QyIiwgdGVzdDJDb2RlQyApOwor
CQlpbmNyZW1lbnRhbEJ1aWxkKCB0aGlzLnByb2plY3RQYXRoICk7CisJCWV4cGVjdGluZ05vUHJv
YmxlbXMoKTsKKworCQkvLyB2ZXJpZnkgdGhhdCBUZXN0MSB3YXMgcmVjb21waWxlZAorCQlleHBl
Y3RpbmdVbmlxdWVDb21waWxlZENsYXNzZXMobmV3IFN0cmluZ1tdIHsgInAxLlRlc3QxIiwgInAx
LlRlc3QyIiB9KTsKKwl9CisKKwkvLyBCdWcgMzY1OTkyIC0gW2J1aWxkZXJdIFtudWxsXSBDaGFu
Z2Ugb2YgbnVsbG5lc3MgZm9yIGEgcGFyYW1ldGVyIGRvZXNuJ3QgdHJpZ2dlciBhIGJ1aWxkIGZv
ciB0aGUgZmlsZXMgdGhhdCBjYWxsIHRoZSBtZXRob2QKKwkvLyBCdWcgMzY2MzQxIC0gSW5jcmVt
ZW50YWwgY29tcGlsZXIgZmFpbHMgdG8gZGV0ZWN0IHJpZ2h0IHNjb3BlIGZvciBhbm5vdGF0aW9u
IHJlbGF0ZWQgY29kZSBjaGFuZ2VzCisJcHVibGljIHZvaWQgdGVzdFJldHVybkFubm90YXRpb25E
ZXBlbmRlbmN5MDEoKSB0aHJvd3MgSmF2YU1vZGVsRXhjZXB0aW9uLCBJT0V4Y2VwdGlvbiB7CisJ
CS8vIHByZXBhcmUgdGhlIHByb2plY3Q6CisJCXNldHVwUHJvamVjdEZvck51bGxBbm5vdGF0aW9u
cygpOworCisJCVN0cmluZyB0ZXN0MUNvZGUgPSAicGFja2FnZSBwMTtcbiIgKworCQkJImltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuYW5ub3RhdGlvbi5Ob25OdWxsO1xuIiArCisJCQkicHVibGljIGNs
YXNzIFRlc3QxIHtcbiIgKworCQkJIiAgICBwdWJsaWMgQE5vbk51bGwgT2JqZWN0IGZvbygpIHtc
biIgKworCQkJIiAgICAgICAgcmV0dXJuIG5ldyBUZXN0MigpLmJhcigpO1xuIiArCisJCQkiICAg
IH1cbiIgKworCQkJIn0iOworCQlTdHJpbmcgdGVzdDJDb2RlID0gInBhY2thZ2UgcDE7XG4iICsK
KwkJCSJpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTm9uTnVsbDtcbiIgKworCQkJ
InB1YmxpYyBjbGFzcyBUZXN0MiB7XG4iICsKKwkJCSIgICAgcHVibGljIEBOb25OdWxsIE9iamVj
dCBiYXIoKSB7IHJldHVybiB0aGlzOyB9XG4iICsKKwkJCSJ9IjsKKworCQlJUGF0aCB0ZXN0MVBh
dGggPSBlbnYuYWRkQ2xhc3MoIHRoaXMuc3JjUm9vdCwgInAxIiwgIlRlc3QxIiwgdGVzdDFDb2Rl
ICk7CisJCWVudi5hZGRDbGFzcyggdGhpcy5zcmNSb290LCAicDEiLCAiVGVzdDIiLCB0ZXN0MkNv
ZGUgKTsKKworCQlmdWxsQnVpbGQoIHRoaXMucHJvamVjdFBhdGggKTsKKwkJZXhwZWN0aW5nTm9Q
cm9ibGVtcygpOworCisJCS8vIGVkaXQgVGVzdDIgdG8gcmVwbGFjZSBhbm5vdGF0aW9uCisJCVN0
cmluZyB0ZXN0MkNvZGVCID0gInBhY2thZ2UgcDE7XG4iICsKKwkJCSJpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmFubm90YXRpb24uTnVsbGFibGU7XG4iICsKKwkJCSJwdWJsaWMgY2xhc3MgVGVzdDIg
e1xuIiArCisJCQkiICAgIHB1YmxpYyBATnVsbGFibGUgT2JqZWN0IGJhcigpIHsgcmV0dXJuIG51
bGw7IH1cbiIgKworCQkJIn0iOworCQllbnYuYWRkQ2xhc3MoIHRoaXMuc3JjUm9vdCwgInAxIiwg
IlRlc3QyIiwgdGVzdDJDb2RlQiApOworCQlpbmNyZW1lbnRhbEJ1aWxkKCB0aGlzLnByb2plY3RQ
YXRoICk7CisJCWV4cGVjdGluZ1Byb2JsZW1zRm9yKHRlc3QxUGF0aCwgCisJCQkiUHJvYmxlbSA6
IFR5cGUgbWlzbWF0Y2g6IHJlcXVpcmVkIFwnQE5vbk51bGwgT2JqZWN0XCcgYnV0IHRoZSBwcm92
aWRlZCB2YWx1ZSBjYW4gYmUgbnVsbCBbIHJlc291cmNlIDogPC9Qcm9qZWN0L3NyYy9wMS9UZXN0
MS5qYXZhPiByYW5nZSA6IDwxMjYsMTQzPiBjYXRlZ29yeSA6IDw5MD4gc2V2ZXJpdHkgOiA8Mj5d
Iik7CisKKwkJLy8gdmVyaWZ5IHRoYXQgVGVzdDEgd2FzIHJlY29tcGlsZWQKKwkJZXhwZWN0aW5n
VW5pcXVlQ29tcGlsZWRDbGFzc2VzKG5ldyBTdHJpbmdbXSB7ICJwMS5UZXN0MSIsICJwMS5UZXN0
MiIgfSk7CisKKwkJLy8gcmVtb3ZlIGFubm90YXRpb24sIGVycm9yIGNoYW5nZXMgZnJvbSBjYW4g
YmUgbnVsbCB0byB1bmtub3duIG51bGxuZXNzCisJCVN0cmluZyB0ZXN0MkNvZGVDID0gInBhY2th
Z2UgcDE7XG4iICsKKwkJCSJwdWJsaWMgY2xhc3MgVGVzdDIge1xuIiArCisJCQkiICAgIHB1Ymxp
YyBPYmplY3QgYmFyKCkgeyByZXR1cm4gbnVsbDsgfVxuIiArCisJCQkifSI7CisJCWVudi5hZGRD
bGFzcyggdGhpcy5zcmNSb290LCAicDEiLCAiVGVzdDIiLCB0ZXN0MkNvZGVDICk7CisJCWluY3Jl
bWVudGFsQnVpbGQoIHRoaXMucHJvamVjdFBhdGggKTsKKwkJZXhwZWN0aW5nUHJvYmxlbXNGb3Io
dGVzdDFQYXRoLCAKKwkJCSJQcm9ibGVtIDogUG90ZW50aWFsIHR5cGUgbWlzbWF0Y2g6IHJlcXVp
cmVkIFwnQE5vbk51bGwgT2JqZWN0XCcgYnV0IG51bGxuZXNzIG9mIHRoZSBwcm92aWRlZCB2YWx1
ZSBpcyB1bmtub3duIFsgcmVzb3VyY2UgOiA8L1Byb2plY3Qvc3JjL3AxL1Rlc3QxLmphdmE+IHJh
bmdlIDogPDEyNiwxNDM+IGNhdGVnb3J5IDogPDkwPiBzZXZlcml0eSA6IDwxPl0iKTsKKworCQkv
LyB2ZXJpZnkgdGhhdCBUZXN0MSB3YXMgcmVjb21waWxlZAorCQlleHBlY3RpbmdVbmlxdWVDb21w
aWxlZENsYXNzZXMobmV3IFN0cmluZ1tdIHsgInAxLlRlc3QxIiwgInAxLlRlc3QyIiB9KTsKKwor
CQkvLyBiYWNrIHRvIGluaXRpYWwgT0sgdmVyc2lvbiAocmUtYWRkIEBOb25OdWxsIGFubm90YXRp
b24pCisJCWVudi5hZGRDbGFzcyggdGhpcy5zcmNSb290LCAicDEiLCAiVGVzdDIiLCB0ZXN0MkNv
ZGUgKTsKKwkJaW5jcmVtZW50YWxCdWlsZCggdGhpcy5wcm9qZWN0UGF0aCApOworCQlleHBlY3Rp
bmdOb1Byb2JsZW1zKCk7CisKKwkJLy8gdmVyaWZ5IHRoYXQgVGVzdDEgd2FzIHJlY29tcGlsZWQK
KwkJZXhwZWN0aW5nVW5pcXVlQ29tcGlsZWRDbGFzc2VzKG5ldyBTdHJpbmdbXSB7ICJwMS5UZXN0
MSIsICJwMS5UZXN0MiIgfSk7CisJfQogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2NsYXNzZm10L0Ns
YXNzRmlsZVJlYWRlci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2NsYXNzZm10L0NsYXNzRmlsZVJlYWRlci5qYXZh
CmluZGV4IDhmZWM0Y2IuLmY0NWU5NDIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9jbGFzc2ZtdC9DbGFz
c0ZpbGVSZWFkZXIuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvY2xhc3NmbXQvQ2xhc3NGaWxlUmVhZGVyLmph
dmEKQEAgLTEwNzAsNiArMTA3MCwxNiBAQAogCQlyZXR1cm4gdHJ1ZTsKIAlpZiAoaGFzU3RydWN0
dXJhbEFubm90YXRpb25DaGFuZ2VzKGN1cnJlbnRNZXRob2RJbmZvLmdldEFubm90YXRpb25zKCks
IG90aGVyTWV0aG9kSW5mby5nZXRBbm5vdGF0aW9ucygpKSkKIAkJcmV0dXJuIHRydWU7CisJLy8g
cGFyYW1ldGVyIGFubm90YXRpb25zOgorCWludCBjdXJyZW50QW5ub3RhdGVkUGFyYW1zQ291bnQg
PSBjdXJyZW50TWV0aG9kSW5mby5nZXRBbm5vdGF0ZWRQYXJhbWV0ZXJzQ291bnQoKTsKKwlpbnQg
b3RoZXJBbm5vdGF0ZWRQYXJhbXNDb3VudCA9IG90aGVyTWV0aG9kSW5mby5nZXRBbm5vdGF0ZWRQ
YXJhbWV0ZXJzQ291bnQoKTsKKwlpZiAoY3VycmVudEFubm90YXRlZFBhcmFtc0NvdW50ICE9IG90
aGVyQW5ub3RhdGVkUGFyYW1zQ291bnQpCisJCXJldHVybiB0cnVlOworCWZvciAoaW50IGk9MDsg
aTxjdXJyZW50QW5ub3RhdGVkUGFyYW1zQ291bnQ7IGkrKykgeworCQlpZiAoaGFzU3RydWN0dXJh
bEFubm90YXRpb25DaGFuZ2VzKGN1cnJlbnRNZXRob2RJbmZvLmdldFBhcmFtZXRlckFubm90YXRp
b25zKGkpLCBvdGhlck1ldGhvZEluZm8uZ2V0UGFyYW1ldGVyQW5ub3RhdGlvbnMoaSkpKQorCQkJ
cmV0dXJuIHRydWU7CisJfQorCiAJaWYgKCFDaGFyT3BlcmF0aW9uLmVxdWFscyhjdXJyZW50TWV0
aG9kSW5mby5nZXRTZWxlY3RvcigpLCBvdGhlck1ldGhvZEluZm8uZ2V0U2VsZWN0b3IoKSkpCiAJ
CXJldHVybiB0cnVlOwogCWlmICghQ2hhck9wZXJhdGlvbi5lcXVhbHMoY3VycmVudE1ldGhvZElu
Zm8uZ2V0TWV0aG9kRGVzY3JpcHRvcigpLCBvdGhlck1ldGhvZEluZm8uZ2V0TWV0aG9kRGVzY3Jp
cHRvcigpKSkKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9jbGFzc2ZtdC9NZXRob2RJbmZvLmphdmEgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvY2xhc3NmbXQvTWV0aG9kSW5mby5qYXZhCmluZGV4IDNjZDYyYjAuLjg4ZDYwYWMgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9jbGFzc2ZtdC9NZXRob2RJbmZvLmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Ns
YXNzZm10L01ldGhvZEluZm8uamF2YQpAQCAtMjcxLDcgKzI3MSw3IEBACiBwdWJsaWMgSUJpbmFy
eUFubm90YXRpb25bXSBnZXRQYXJhbWV0ZXJBbm5vdGF0aW9ucyhpbnQgaW5kZXgpIHsKIAlyZXR1
cm4gbnVsbDsKIH0KLXB1YmxpYyBpbnQgZ2V0TnVtUGFyYW1ldGVyQW5ub3RhdGlvbnMoKSB7Citw
dWJsaWMgaW50IGdldEFubm90YXRlZFBhcmFtZXRlcnNDb3VudCgpIHsKIAlyZXR1cm4gMDsKIH0K
IC8qKgpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2NsYXNzZm10L01ldGhvZEluZm9XaXRoUGFyYW1ldGVy
QW5ub3RhdGlvbnMuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9jbGFzc2ZtdC9NZXRob2RJbmZvV2l0aFBhcmFtZXRl
ckFubm90YXRpb25zLmphdmEKaW5kZXggMmFhZDlmOC4uOGYzMWIzZSAxMDA2NDQKLS0tIGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2NsYXNzZm10L01ldGhvZEluZm9XaXRoUGFyYW1ldGVyQW5ub3RhdGlvbnMuamF2YQorKysg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvY2xhc3NmbXQvTWV0aG9kSW5mb1dpdGhQYXJhbWV0ZXJBbm5vdGF0aW9ucy5qYXZh
CkBAIC0zNyw3ICszNyw3IEBACiBwdWJsaWMgSUJpbmFyeUFubm90YXRpb25bXSBnZXRQYXJhbWV0
ZXJBbm5vdGF0aW9ucyhpbnQgaW5kZXgpIHsKIAlyZXR1cm4gdGhpcy5wYXJhbWV0ZXJBbm5vdGF0
aW9uc1tpbmRleF07CiB9Ci1wdWJsaWMgaW50IGdldE51bVBhcmFtZXRlckFubm90YXRpb25zKCkg
eworcHVibGljIGludCBnZXRBbm5vdGF0ZWRQYXJhbWV0ZXJzQ291bnQoKSB7CiAJcmV0dXJuIHRo
aXMucGFyYW1ldGVyQW5ub3RhdGlvbnMgPT0gbnVsbCA/IDAgOiB0aGlzLnBhcmFtZXRlckFubm90
YXRpb25zLmxlbmd0aDsKIH0KIHByb3RlY3RlZCB2b2lkIGluaXRpYWxpemUoKSB7CmRpZmYgLS1n
aXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvZW52L0lCaW5hcnlNZXRob2QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9lbnYvSUJpbmFyeU1l
dGhvZC5qYXZhCmluZGV4IDY4YjYzZjYuLjE3N2FlMjQgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9lbnYv
SUJpbmFyeU1ldGhvZC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9lbnYvSUJpbmFyeU1ldGhvZC5qYXZhCkBA
IC03MSw3ICs3MSw3IEBACiAgKiB1c2luZyB7QGxpbmsgI2dldFBhcmFtZXRlckFubm90YXRpb25z
KGludCl9LgogICogQHJldHVybiBvbmUgYmV5b25kIHRoZSBoaWdoZXN0IGxlZ2FsIGFyZ3VtZW50
IHRvIHtAbGluayAjZ2V0UGFyYW1ldGVyQW5ub3RhdGlvbnMoaW50KX0uCiAgKi8KLWludCBnZXRO
dW1QYXJhbWV0ZXJBbm5vdGF0aW9ucygpOworaW50IGdldEFubm90YXRlZFBhcmFtZXRlcnNDb3Vu
dCgpOwogCiAvKioKICAqIEFuc3dlciB0aGUgbmFtZSBvZiB0aGUgbWV0aG9kLgpkaWZmIC0tZ2l0
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2xvb2t1cC9CaW5hcnlUeXBlQmluZGluZy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9C
aW5hcnlUeXBlQmluZGluZy5qYXZhCmluZGV4IDRhMWJhZDQuLjhhNzFiNGEgMTAwNjQ0Ci0tLSBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9sb29rdXAvQmluYXJ5VHlwZUJpbmRpbmcuamF2YQorKysgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3Vw
L0JpbmFyeVR5cGVCaW5kaW5nLmphdmEKQEAgLTExODEsNyArMTE4MSw3IEBACiAJLy8gcGFyYW1l
dGVyczoKIAlUeXBlQmluZGluZ1tdIHBhcmFtZXRlcnMgPSBtZXRob2RCaW5kaW5nLnBhcmFtZXRl
cnM7CiAJaW50IG51bVZpc2libGVQYXJhbXMgPSBwYXJhbWV0ZXJzLmxlbmd0aDsKLQlpbnQgbnVt
UGFyYW1Bbm5vdGF0aW9ucyA9IG1ldGhvZC5nZXROdW1QYXJhbWV0ZXJBbm5vdGF0aW9ucygpOwor
CWludCBudW1QYXJhbUFubm90YXRpb25zID0gbWV0aG9kLmdldEFubm90YXRlZFBhcmFtZXRlcnND
b3VudCgpOwogCWlmIChudW1QYXJhbUFubm90YXRpb25zID4gMCkgewogCQlpbnQgc3RhcnRJbmRl
eCA9IG51bVBhcmFtQW5ub3RhdGlvbnMgLSBudW1WaXNpYmxlUGFyYW1zOwogCQlmb3IgKGludCBq
ID0gMDsgaiA8IG51bVZpc2libGVQYXJhbXM7IGorKykgewpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvZXZhbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvZXZhbC9Db2RlU25pcHBl
dFNrZWxldG9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9ldmFsL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9ldmFsL0NvZGVTbmlwcGV0U2tlbGV0b24uamF2YQppbmRleCBlMTQ2NTIwLi5m
MDA5MGIxIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9ldmFsL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9ldmFsL0NvZGVTbmlwcGV0U2tlbGV0b24uamF2YQorKysgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS9ldmFsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9ldmFsL0NvZGVTbmlw
cGV0U2tlbGV0b24uamF2YQpAQCAtNjUsNyArNjUsNyBAQAogCQlwdWJsaWMgSUJpbmFyeUFubm90
YXRpb25bXSBnZXRQYXJhbWV0ZXJBbm5vdGF0aW9ucyhpbnQgaW5kZXgpIHsKIAkJCXJldHVybiBu
dWxsOwogCQl9Ci0JCXB1YmxpYyBpbnQgZ2V0TnVtUGFyYW1ldGVyQW5ub3RhdGlvbnMoKSB7CisJ
CXB1YmxpYyBpbnQgZ2V0QW5ub3RhdGVkUGFyYW1ldGVyc0NvdW50KCkgewogCQkJcmV0dXJuIDA7
CiAJCX0KIAkJcHVibGljIGNoYXJbXSBnZXRTZWxlY3RvcigpIHsK
</data>

          </attachment>
      

    </bug>

</bugzilla>