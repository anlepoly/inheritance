<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>392671</bug_id>
          
          <creation_ts>2012-10-23 12:38:00 -0400</creation_ts>
          <short_desc>[1.8][recovery] NPE with a method with explicit this and a following incomplete parameter</short_desc>
          <delta_ts>2013-03-21 07:25:15 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Jay Arthanareeswaran">jarthana</reporter>
          <assigned_to name="Jesper Moller">jesper</assigned_to>
          <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2175194</commentid>
    <comment_count>0</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-10-23 12:38:06 -0400</bug_when>
    <thetext>Code recovery has problem with the following code:

class X {
         public void foobar(X this, int, int k) {} // NPE!
}

But the NPE is thrown only when the first regular parameter is incomplete. For e.g. the following code throws no NPE.

         public void foobar(X this, int i, int , int ,) // No NPE 

This is the root cause of the exception:
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.parser.RecoveredMethod.updateFromParserState(RecoveredMethod.java:511)
	at org.eclipse.jdt.internal.compiler.parser.Parser.updateRecoveryState(Parser.java:12061)
	at org.eclipse.jdt.internal.compiler.parser.Parser.resumeOnSyntaxError(Parser.java:11976)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:10639)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:10970)
	at org.eclipse.jdt.internal.compiler.parser.Parser.parse(Parser.java:10927)
	at org.eclipse.jdt.internal.compiler.parser.Parser.dietParse(Parser.java:9359)
	at org.eclipse.jdt.internal.compiler.Compiler.internalBeginToCompile(Compiler.java:718)
	at org.eclipse.jdt.internal.compiler.Compiler.beginToCompile(Compiler.java:383)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:1133)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:685)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1186)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2222413</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-27 02:31:25 -0500</bug_when>
    <thetext>Jesper, this is readily fixable - In RecoveredMethod.java, the &quot;protection&quot;
put in place for bugs 15142 fails to offer any real protection because the
argument is mutated into the receiver and so arguments is null.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2234771</commentid>
    <comment_count>2</comment_count>
      <attachid>228827</attachid>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-03-21 05:54:39 -0400</bug_when>
    <thetext>Created attachment 228827
Fix and test

Add comment 0 as a test, as well as a &quot;if it&apos;s not an argument, it must be a receiver&quot;-protection.

I&apos;m not sure why the syntax error is reported twice, though.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2234816</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-21 07:25:15 -0400</bug_when>
    <thetext>Fix looks good. I added the JCP disclaimer to RecoveredMethod.java and used
the fix. The test belongs more in NegativeTypeAnnotationsTests and I moved it
there. The double reporting does not happen when the test is in this file and
is perhaps due to some error handling policy differences between the two suites.

The present error recovery is not so good, but that is a different topic
that we can address later.

Fix and tests released here:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=4d25f5ead9ec8b7cb8b7982110fb9ccd9a9e64fc</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>228827</attachid>
            <date>2013-03-21 05:54:00 -0400</date>
            <delta_ts>2013-03-21 05:54:39 -0400</delta_ts>
            <desc>Fix and test</desc>
            <filename>clipboard.txt</filename>
            <type>text/plain</type>
            <size>4335</size>
            <attacher name="Jesper Moller">jesper</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9wYXJzZXIvVHlwZUFubm90YXRpb25TeW50
YXhUZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3Jn
L2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcGFyc2VyL1R5cGVBbm5vdGF0aW9uU3lu
dGF4VGVzdC5qYXZhCmluZGV4IDE3ODJjMWMuLjA1ODIwZjggMTAwNjQ0Ci0tLSBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0
cy9jb21waWxlci9wYXJzZXIvVHlwZUFubm90YXRpb25TeW50YXhUZXN0LmphdmEKKysrIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L3Rlc3RzL2NvbXBpbGVyL3BhcnNlci9UeXBlQW5ub3RhdGlvblN5bnRheFRlc3QuamF2YQpAQCAt
MTEsNiArMTEsNyBAQAogICoNCiAgKiBDb250cmlidXRvcnM6DQogICogICAgIElCTSBDb3Jwb3Jh
dGlvbiAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbg0KKyAqICAgICBKZXNwZXIgUyBN
b2xsZXIgLSB0ZXN0IGZvciBidWcgMzkyNjcxDQogICoqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovDQog
cGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci5wYXJzZXI7DQogDQpA
QCAtMzgzNCw0ICszODM1LDM5IEBAIHB1YmxpYyB2b2lkIHRlc3QwMTM4KCkgdGhyb3dzIElPRXhj
ZXB0aW9uIHsKIAkJCSJ9XG4iOw0KIAljaGVja1BhcnNlKENIRUNLX1BBUlNFUiwgc291cmNlLnRv
Q2hhckFycmF5KCksIG51bGwsICJ0ZXN0MDEzNyIsIGV4cGVjdGVkVW5pdFRvU3RyaW5nKTsNCiB9
DQorDQorLy9UbyB0ZXN0IFBhcnNlci5jb25zdW1lQ2FzdEV4cHJlc3Npb25XaXRoR2VuZXJpY3NB
cnJheSgpIHdpdGggVHlwZSBBbm5vdGF0aW9ucw0KK3B1YmxpYyB2b2lkIHRlc3QwMTQwKCkgdGhy
b3dzIElPRXhjZXB0aW9uIHsNCisJU3RyaW5nIHNvdXJjZSA9DQorCQkJImNsYXNzIFgge1xuIiAr
IA0KKwkJCQkJIiAgICAgICAgIHB1YmxpYyB2b2lkIGZvb2JhcihYIHRoaXMsIGludCwgaW50IGsp
IHt9IC8vIE5QRSFcbiIgKyANCisJCQkJCSJ9XG4iOyANCisJU3RyaW5nIGV4cGVjdGVkVW5pdFRv
U3RyaW5nID0NCisJCQkiY2xhc3MgWCB7XG4iICsgDQorCQkJIiAgWCgpIHtcbiIgKyANCisJCQki
ICAgIHN1cGVyKCk7XG4iICsgDQorCQkJIiAgfVxuIiArIA0KKwkJCSIgIHB1YmxpYyB2b2lkIGZv
b2JhcihYIHRoaXMpIHtcbiIgKyANCisJCQkiICB9XG4iICsgDQorCQkJIn1cbiI7IA0KKwljaGVj
a1BhcnNlKENIRUNLX1BBUlNFUiwgc291cmNlLnRvQ2hhckFycmF5KCksDQorCQkiLS0tLS0tLS0t
LVxuIiArIA0KKwkJIjEuIEVSUk9SIGluIHRlc3QwMTQwIChhdCBsaW5lIDIpXG4iICsgDQorCQki
CXB1YmxpYyB2b2lkIGZvb2JhcihYIHRoaXMsIGludCwgaW50IGspIHt9IC8vIE5QRSFcbiIgKyAN
CisJCSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgXl5eXG4iICsgDQorCQkiU3ludGF4IGVy
cm9yLCBpbnNlcnQgXCIuLi4gVmFyaWFibGVEZWNsYXJhdG9ySWRcIiB0byBjb21wbGV0ZSBGb3Jt
YWxQYXJhbWV0ZXJcbiIgKyANCisJCSItLS0tLS0tLS0tXG4iICsgDQorCQkiMi4gRVJST1IgaW4g
dGVzdDAxNDAgKGF0IGxpbmUgMilcbiIgKyANCisJCSIJcHVibGljIHZvaWQgZm9vYmFyKFggdGhp
cywgaW50LCBpbnQgaykge30gLy8gTlBFIVxuIiArIA0KKwkJIgkgICAgICAgICAgICAgICAgICAg
ICAgICAgICBeXl5cbiIgKyANCisJCSJTeW50YXggZXJyb3IsIGluc2VydCBcIi4uLiBWYXJpYWJs
ZURlY2xhcmF0b3JJZFwiIHRvIGNvbXBsZXRlIEZvcm1hbFBhcmFtZXRlclxuIiArIA0KKwkJIi0t
LS0tLS0tLS1cbiIgKyANCisJCSIzLiBFUlJPUiBpbiB0ZXN0MDE0MCAoYXQgbGluZSAzKVxuIiAr
IA0KKwkJIgl9XG4iICsgDQorCQkiCV5cbiIgKyANCisJCSJTeW50YXggZXJyb3Igb24gdG9rZW4g
XCJ9XCIsIGRlbGV0ZSB0aGlzIHRva2VuXG4iICsgDQorCQkiLS0tLS0tLS0tLVxuIiArIA0KKwkJ
IiIsDQorCQkidGVzdDAxNDAiLCBleHBlY3RlZFVuaXRUb1N0cmluZyk7DQorfQ0KIH0NCmRpZmYg
LS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvcGFyc2VyL1JlY292ZXJlZE1ldGhvZC5qYXZhIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3BhcnNl
ci9SZWNvdmVyZWRNZXRob2QuamF2YQppbmRleCAzYmY3NzU5Li5kYjk4YjRmIDEwMDY0NAotLS0g
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvcGFyc2VyL1JlY292ZXJlZE1ldGhvZC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wYXJzZXIv
UmVjb3ZlcmVkTWV0aG9kLmphdmEKQEAgLTEsNSArMSw1IEBACiAvKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKgotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDA5IElCTSBDb3Jwb3JhdGlvbiBhbmQgb3Ro
ZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3Ro
ZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21w
YW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBv
ZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0
aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdApAQCAtNyw2ICs3LDggQEAKICAq
CiAgKiBDb250cmlidXRvcnM6CiAgKiAgICAgSUJNIENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkg
YW5kIGltcGxlbWVudGF0aW9uCisgKiAgICAgSmVzcGVyIFMgTW9sbGVyIC0gQnVnIDM5MjY3MQor
ICogICAgICAgICAgTlBFIHdpdGggYSBtZXRob2Qgd2l0aCBleHBsaWNpdCB0aGlzIGFuZCBhIGZv
bGxvd2luZyBpbmNvbXBsZXRlIHBhcmFtZXRlcgogICoqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCiBw
YWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5wYXJzZXI7CiAKQEAgLTUw
OCw3ICs1MTAsMTEgQEAgcHVibGljIHZvaWQgdXBkYXRlRnJvbVBhcnNlclN0YXRlKCl7CiAJCQkJ
CQlwYXJzZXIuY29uc3VtZU1ldGhvZEhlYWRlclJpZ2h0UGFyZW4oKTsKIAkJCQkJCS8qIGZpeC11
cCBwb3NpdGlvbnMsIGdpdmVuIHRoZXkgd2VyZSB1cGRhdGVkIGFnYWluc3QgclBhcmVuUG9zLCB3
aGljaCBkaWQgbm90IGdldCBzZXQgKi8KIAkJCQkJCWlmIChwYXJzZXIuY3VycmVudEVsZW1lbnQg
PT0gdGhpcyl7IC8vIHBhcmFtZXRlciBhZGRpdGlvbiBtaWdodCBoYXZlIGFkZGVkIGFuIGF3YWl0
aW5nIChubyByZXR1cm4gdHlwZSkgbWV0aG9kIC0gc2VlIDFGVlhRWjQgKi8KLQkJCQkJCQl0aGlz
Lm1ldGhvZERlY2xhcmF0aW9uLnNvdXJjZUVuZCA9IHRoaXMubWV0aG9kRGVjbGFyYXRpb24uYXJn
dW1lbnRzW3RoaXMubWV0aG9kRGVjbGFyYXRpb24uYXJndW1lbnRzLmxlbmd0aC0xXS5zb3VyY2VF
bmQ7CisJCQkJCQkJaWYgKHRoaXMubWV0aG9kRGVjbGFyYXRpb24uYXJndW1lbnRzICE9IG51bGwp
IHsKKwkJCQkJCQkJdGhpcy5tZXRob2REZWNsYXJhdGlvbi5zb3VyY2VFbmQgPSB0aGlzLm1ldGhv
ZERlY2xhcmF0aW9uLmFyZ3VtZW50c1t0aGlzLm1ldGhvZERlY2xhcmF0aW9uLmFyZ3VtZW50cy5s
ZW5ndGgtMV0uc291cmNlRW5kOworCQkJCQkJCX0gZWxzZSB7CisJCQkJCQkJCXRoaXMubWV0aG9k
RGVjbGFyYXRpb24uc291cmNlRW5kID0gdGhpcy5tZXRob2REZWNsYXJhdGlvbi5yZWNlaXZlci5z
b3VyY2VFbmQ7CisJCQkJCQkJfQogCQkJCQkJCXRoaXMubWV0aG9kRGVjbGFyYXRpb24uYm9keVN0
YXJ0ID0gdGhpcy5tZXRob2REZWNsYXJhdGlvbi5zb3VyY2VFbmQrMTsKIAkJCQkJCQlwYXJzZXIu
bGFzdENoZWNrUG9pbnQgPSB0aGlzLm1ldGhvZERlY2xhcmF0aW9uLmJvZHlTdGFydDsKIAkJCQkJ
CX0K
</data>

          </attachment>
      

    </bug>

</bugzilla>