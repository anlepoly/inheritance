<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>427196</bug_id>
          
          <creation_ts>2014-02-01 13:05:00 -0500</creation_ts>
          <short_desc>[1.8][compiler] Compiler error for method reference to overloaded method</short_desc>
          <delta_ts>2014-02-24 18:52:00 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>427059</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Kirk Loretz">kirk_loretz</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>anchakrk</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2357536</commentid>
    <comment_count>0</comment_count>
    <who name="Kirk Loretz">kirk_loretz</who>
    <bug_when>2014-02-01 13:05:30 -0500</bug_when>
    <thetext>Eclipse Java Development Tools Patch for Java 8 Support (BETA) 1.0.0.v20140201-0104_BETA_JAVA8

----------

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.function.Function;

public class MainTest {
    public static &lt;T&gt; List&lt;T&gt; copyOf (Collection&lt;T&gt; c) {
        return new ArrayList&lt;&gt;(c);
    }
    
    public static &lt;T&gt; List&lt;T&gt; copyOf (Iterable&lt;T&gt; c) {
        return new ArrayList&lt;&gt;();
    }
    
    public static void main (String[] args) {
        Function&lt;Collection&lt;String&gt;, List&lt;String&gt;&gt; function1 = c -&gt; MainTest.copyOf(c); //OK
        Function&lt;Collection&lt;String&gt;, List&lt;String&gt;&gt; function2 = MainTest::copyOf;        //error
    }
}

----------

This code was working in the JDT patch from a few days ago, but when I updated today, it&apos;s not working. For the method reference assigned to function2, Eclipse gives the following error: &quot;The type MainTest does not define copyOf(Collection&lt;String&gt;) that is applicable here&quot;. However, the equivalent lambda expression for function1 is OK.

If I remove the copyOf(Iterable) method, or remove the generic &lt;T&gt; and use &lt;String&gt;, it compiles fine. Also, the same error appears regardless of whether the methods are static or not.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2357558</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-01 17:02:13 -0500</bug_when>
    <thetext>Thanks for the report.

The change in behavior was caused by fixing bug 423505.

When resolving the invocation MainTest.copyOf(c) we recognize this method:
  copyOf(Collection&lt;java.lang.String&gt;) 
as more specific. This happens using the new inference from bug 423505.

However, when resolving the method reference MainTest::copyOf 
we currently fail to apply the new inference, which results in traditional
comparison between Collection&lt;T&gt; and Iterable&lt;T&gt;, which does not result in
disambiguation, because the two type variables T and T are incommensurable.
On the premise that traditional comparison be used, it seems correct to
detect ambiguity between both variants of &quot;copyOf&quot;, which results in failure
to resolve the method reference.

However, at a closer look we should treat the method reference as if it
were a method invocation, 15.28.1 says:

&quot;... the reference is treated as if it were an invocation with argument expressions of types P1..Pn&quot;

If I synthesize fake argument expressions with the given types the same
inference happens as for the regular invocation, and the given example
compiles fine as before.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2358269</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-03 19:05:40 -0500</bug_when>
    <thetext>Fix according to prev. comment released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=e4335f612db86aa6e739c4af37c0425a42aadb90</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2367924</commentid>
    <comment_count>3</comment_count>
    <who name="ANIRBAN CHAKRABORTY">anchakrk</who>
    <bug_when>2014-02-24 18:52:00 -0500</bug_when>
    <thetext>Verified as working for Eclipse + Java 8 RC1 using Kepler SR1 + Eclipse Java Development Tools Patch for Java 8 Support (BETA) 1.0.0.v20140220-2054</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>