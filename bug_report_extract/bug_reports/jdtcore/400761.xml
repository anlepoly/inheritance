<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>400761</bug_id>
          
          <creation_ts>2013-02-14 02:13:00 -0500</creation_ts>
          <short_desc>[compiler][null] null may be return as boolean without a diagnostic</short_desc>
          <delta_ts>2014-06-03 11:47:42 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows Vista</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.3 M6</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Ed Willink">ed</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>jan.hoppe</cc>
    
    <cc>markus_keller</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2216576</commentid>
    <comment_count>0</comment_count>
    <who name="Ed Willink">ed</who>
    <bug_when>2013-02-14 02:13:55 -0500</bug_when>
    <thetext>M5: The following
	
	boolean badFunction(int i) {
		return i &gt; 0 ? true : null;
	}

gives no diagnostic. Whereas

	
	boolean badFunction(int i) {
		return null;
	}

gives a cannot convert null to boolean.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2216586</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-14 02:41:03 -0500</bug_when>
    <thetext>Please consult JLS7 15.25. There are a complex set of rule governing the
type of the conditional expression. I believe this is a well formed program - 
but I didn&apos;t verify just now. See that this code compiles fine with javac 
too.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2216588</commentid>
    <comment_count>2</comment_count>
    <who name="Ed Willink">ed</who>
    <bug_when>2013-02-14 02:47:05 -0500</bug_when>
    <thetext>I&apos;m not complaining about the validity of the Java compilation.

Given the new Bye-Bye NPE enthusiasm, I would expect to see a potential NPE warning.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2216590</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-14 02:50:58 -0500</bug_when>
    <thetext>(In reply to comment #2)
&gt; I&apos;m not complaining about the validity of the Java compilation.
&gt; 
&gt; Given the new Bye-Bye NPE enthusiasm, I would expect to see a potential NPE
&gt; warning.

I see. Thanks. I&apos;ll assign this to Stephan so he can follow up. It is not new
enthusiasm for him. One would think it is his life&apos;s mission :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2216881</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-02-14 10:44:48 -0500</bug_when>
    <thetext>After recent changes in this field this should now be easy to fix.
Thanks for reporting.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2218238</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-02-18 13:04:14 -0500</bug_when>
    <thetext>As expected implementation of this diagnostic is now straight-forward.

So, what should be the message here? I currently have:

  Potential null pointer access: This expression of type Boolean may be null but requires auto-unboxing


Also for some existing diagnostics I&apos;d now like to emphasize the unboxing part to help understanding.
Consider this:

  Integer i = b ? Integer.MIN_VALUE : null;
  if (i == 1) foo();

Currently we say:

  Potential null pointer access: The variable i may be null at this location

but I&apos;d think users would be better helped by the above kind of message, i.e.:

  Potential null pointer access: This expression of type Integer may be null but requires auto-unboxing

Note that the highlight range still points to &quot;i&quot;, so saying &quot;variable i&quot; carries little information.

OIOW, I&apos;m proposing to drop information about the kind of expression (variable, message send ...) in favor of uniformly mentioning the unboxing.
Alternatively, we could maintain the existing style and only change the prefix, e.g.:

  Potential null pointer access by auto-unboxing: The variable i may be null at this location
  
Which would then multiply to the different kinds of message suffixes.

Anybody want to share their preference?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2218243</commentid>
    <comment_count>6</comment_count>
    <who name="Ed Willink">ed</who>
    <bug_when>2013-02-18 13:19:17 -0500</bug_when>
    <thetext>(In reply to comment #5)
&gt;   Potential null pointer access by auto-unboxing: The variable i may be null
&gt; at this location

I prefer this because I thing it will group better when you see a whole host of errors alphabetically sorted in the Problem View. In this context &quot;i&quot; is not redundant.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2218250</commentid>
    <comment_count>7</comment_count>
      <attachid>227212</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-02-18 13:37:31 -0500</bug_when>
    <thetext>Created attachment 227212
patch under test

(In reply to comment #6)
&gt; (In reply to comment #5)
&gt; &gt;   Potential null pointer access by auto-unboxing: The variable i may be null
&gt; &gt; at this location
&gt; 
&gt; I prefer this because I thing it will group better when you see a whole host of
&gt; errors alphabetically sorted in the Problem View. In this context &quot;i&quot; is not
&gt; redundant.

Good point to mention the Problems View.

Anyway, since we already have a host of tests checking the unboxing situation, I&apos;m uploading my patch under test for further illustration.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2229777</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-12 12:55:18 -0400</bug_when>
    <thetext>(In reply to comment #5)
&gt;   Potential null pointer access by auto-unboxing: The variable i may be null
&gt; at this location

Sounds good to me.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2229861</commentid>
    <comment_count>9</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-03-12 13:44:46 -0400</bug_when>
    <thetext>The &quot;Potential null pointer access: This expression of type Boolean may be null but requires auto-unboxing&quot; from the patch sounds good to me.

But note that there are more cases with missing problems in that area:

	boolean badFunction3(int i) {
		//expected an &quot;unnecessary cast&quot; and a potential null problem:
		return i &gt; 0 ? true : (Boolean) null;
	}
	boolean badFunction4(int i) {
		if (i &gt; 0)
			return true;
		else
			// wrong &quot;unnecessary cast&quot;, expected a null problem:
			return (Boolean) null;
	}
	boolean badFunction5(int i) {
		// expected a potential null problem:
		return i &gt; 0 ? true : getBoolean();
	}
	boolean badFunction6(int i) {
		if (i &gt; 0)
			return true;
		else
			return getBoolean();
	}
	
	private @Nullable Boolean getBoolean() {
		return null;
	}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2230182</commentid>
    <comment_count>10</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-03-13 04:41:02 -0400</bug_when>
    <thetext>(In reply to comment #9)
&gt; The &quot;Potential null pointer access: This expression of type Boolean may be null
&gt; but requires auto-unboxing&quot; from the patch sounds good to me.
&gt; 
&gt; But note that there are more cases with missing problems in that area:

Thanks!

I included some of these in my solution, and filed bug 403147 for completeness in these regards.

Tests are green, patch has been released for 4.3 M6 via commit 42a66623ce2a3ec71a2f28506ffd67d2c8d2cf8c.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2412154</commentid>
    <comment_count>11</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-06-03 11:47:42 -0400</bug_when>
    <thetext>*** Bug 364326 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>227212</attachid>
            <date>2013-02-18 13:37:00 -0500</date>
            <delta_ts>2013-02-18 13:37:31 -0500</delta_ts>
            <desc>patch under test</desc>
            <filename>clipboard.txt</filename>
            <type>text/plain</type>
            <size>23733</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxSZWZlcmVuY2VU
ZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2Vj
bGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OdWxsUmVmZXJlbmNlVGVz
dC5qYXZhCmluZGV4IDYyNDVlNTcuLjFhMTJkZTUgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21w
aWxlci9yZWdyZXNzaW9uL051bGxSZWZlcmVuY2VUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Nv
bXBpbGVyL3JlZ3Jlc3Npb24vTnVsbFJlZmVyZW5jZVRlc3QuamF2YQpAQCAtMSw1ICsxLDUgQEAK
IC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDUsIDIwMTIgSUJN
IENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDUsIDIwMTMgSUJN
IENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHBy
b2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFi
bGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAq
IHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0
CkBAIC0yNyw2ICsyNyw3IEBACiAgKgkJCQkJCQlidWcgMzc2MjYzIC0gQm9ndXMgIlBvdGVudGlh
bCBudWxsIHBvaW50ZXIgYWNjZXNzIiB3YXJuaW5nCiAgKgkJCQkJCQlidWcgMzMxNjQ5IC0gW2Nv
bXBpbGVyXVtudWxsXSBjb25zaWRlciBudWxsIGFubm90YXRpb25zIGZvciBmaWVsZHMKICAqCQkJ
CQkJCWJ1ZyAzODI3ODkgLSBbY29tcGlsZXJdW251bGxdIHdhcm4gd2hlbiBzeW50YWN0aWNhbGx5
LW5vbm51bGwgZXhwcmVzc2lvbiBpcyBjb21wYXJlZCBhZ2FpbnN0IG51bGwKKyAqCQkJCQkJCWJ1
ZyA0MDA3NjEgLSBbY29tcGlsZXJdW251bGxdIG51bGwgbWF5IGJlIHJldHVybiBhcyBib29sZWFu
IHdpdGhvdXQgYSBkaWFnbm9zdGljCiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KIHBhY2thZ2Ug
b3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIucmVncmVzc2lvbjsKIApAQCAtNTUs
NyArNTYsNyBAQAogLy8gT25seSB0aGUgaGlnaGVzdCBjb21wbGlhbmNlIGxldmVsIGlzIHJ1bjsg
YWRkIHRoZSBWTSBhcmd1bWVudAogLy8gLURjb21wbGlhbmNlPTEuNCAoZm9yIGV4YW1wbGUpIHRv
IGxvd2VyIGl0IGlmIG5lZWRlZAogc3RhdGljIHsKLS8vCQlURVNUU19OQU1FUyA9IG5ldyBTdHJp
bmdbXSB7ICJ0ZXN0QnVnMzQ1MzA1XzE0IiB9OworLy8JCVRFU1RTX05BTUVTID0gbmV3IFN0cmlu
Z1tdIHsgInRlc3QwMDM3X2NvbmRpdGlvbmFsX2V4cHJlc3Npb24iIH07CiAvLwkJVEVTVFNfTkFN
RVMgPSBuZXcgU3RyaW5nW10geyAidGVzdDA1MTVfdHJ5X2ZpbmFsbHkiIH07CiAvLwkJVEVTVFNf
TkFNRVMgPSBuZXcgU3RyaW5nW10geyAidGVzdEJ1ZzM3NjI2MyIgfTsKIC8vCQlURVNUU19OVU1C
RVJTID0gbmV3IGludFtdIHsgNTYxIH07CkBAIC04ODYsNiArODg3LDUxIEBACiAJICAgIEphdmFj
VGVzdE9wdGlvbnMuRXhjdXNlLkVjbGlwc2VXYXJuaW5nQ29uZmlndXJlZEFzRXJyb3IpOwogfQog
CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvNDAwNzYxOiBbY29tcGlsZXJdW251bGxdIG51
bGwgbWF5IGJlIHJldHVybiBhcyBib29sZWFuIHdpdGhvdXQgYSBkaWFnbm9zdGljCitwdWJsaWMg
dm9pZCB0ZXN0MDAzN19jb25kaXRpb25hbF9leHByZXNzaW9uXzEoKSB7CisJcnVuTmVnYXRpdmVU
ZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJIlguamF2YSIsCisJCQkicHVibGljIGNsYXNzIFgg
e1xuIiArCisJCQkiCWJvb2xlYW4gYmFkRnVuY3Rpb24oaW50IGkpIHtcbiIgKyAKKwkJCSIJCXJl
dHVybiBpID4gMCA/IHRydWUgOiBudWxsO1xuIiArIAorCQkJIgl9XG4iICsKKwkJCSJ9XG4ifSwK
KwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAzKVxu
IiArIAorCQkiCXJldHVybiBpID4gMCA/IHRydWUgOiBudWxsO1xuIiArIAorCQkiCSAgICAgICBe
Xl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCSJQb3RlbnRpYWwgbnVsbCBwb2ludGVyIGFjY2Vz
czogVGhpcyBleHByZXNzaW9uIG9mIHR5cGUgQm9vbGVhbiBtYXkgYmUgbnVsbCBidXQgcmVxdWly
ZXMgYXV0by11bmJveGluZ1xuIiArIAorCQkiLS0tLS0tLS0tLVxuIiwKKwkgICAgSmF2YWNUZXN0
T3B0aW9ucy5FeGN1c2UuRWNsaXBzZVdhcm5pbmdDb25maWd1cmVkQXNFcnJvcik7Cit9CisvLyBo
dHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvNDAwNzYxOiBbY29tcGlsZXJdW251bGxdIG51bGwgbWF5
IGJlIHJldHVybiBhcyBib29sZWFuIHdpdGhvdXQgYSBkaWFnbm9zdGljCitwdWJsaWMgdm9pZCB0
ZXN0MDAzN19jb25kaXRpb25hbF9leHByZXNzaW9uXzIoKSB7CisJTWFwIG9wdGlvbnMgPSBnZXRD
b21waWxlck9wdGlvbnMoKTsKKwlvcHRpb25zLnB1dChKYXZhQ29yZS5DT01QSUxFUl9QQl9TVVBQ
UkVTU19PUFRJT05BTF9FUlJPUlMsIEphdmFDb3JlLkVOQUJMRUQpOworCXJ1bk5lZ2F0aXZlVGVz
dCgKKwkJdHJ1ZSwKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJYLmphdmEiLAorCQkJInB1YmxpYyBj
bGFzcyBYIHtcbiIgKworCQkJIglpbnQgYmFkRnVuY3Rpb24oaW50IGkpIHtcbiIgKworCQkJIgkJ
cmV0dXJuIGkgPiAwID8gbnVsbCA6IEludGVnZXIuTUlOX1ZBTFVFO1xuIiArCisJCQkiCX1cbiIg
KworCQkJIglAU3VwcHJlc3NXYXJuaW5ncyhcIm51bGxcIilcbiIgKworCQkJIglpbnQgc2lsZW50
KGludCBpKSB7XG4iICsKKwkJCSIJCXJldHVybiBpID4gMCA/IG51bGwgOiBJbnRlZ2VyLk1JTl9W
QUxVRTtcbiIgKworCQkJIgl9XG4iICsKKwkJCSJ9XG4ifSwKKwkJbnVsbCwKKwkJb3B0aW9ucywK
KwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAzKVxu
IiArIAorCQkiCXJldHVybiBpID4gMCA/IG51bGwgOiBJbnRlZ2VyLk1JTl9WQUxVRTtcbiIgKyAK
KwkJIgkgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5cbiIgKyAKKwkJIlBv
dGVudGlhbCBudWxsIHBvaW50ZXIgYWNjZXNzOiBUaGlzIGV4cHJlc3Npb24gb2YgdHlwZSBJbnRl
Z2VyIG1heSBiZSBudWxsIGJ1dCByZXF1aXJlcyBhdXRvLXVuYm94aW5nXG4iICsgCisJCSItLS0t
LS0tLS0tXG4iLAorCSAgICBKYXZhY1Rlc3RPcHRpb25zLkV4Y3VzZS5FY2xpcHNlV2FybmluZ0Nv
bmZpZ3VyZWRBc0Vycm9yKTsKK30KIC8vIG51bGwgYW5hbHlzaXMgLS0gYXV0b2JveGluZwogcHVi
bGljIHZvaWQgdGVzdDAwNDBfYXV0b2JveGluZ19jb21wb3VuZF9hc3NpZ25tZW50KCkgewogCWlm
ICh0aGlzLmNvbXBsaWFuY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV81KSB7CkBA
IC05MDIsNyArOTQ4LDcgQEAKIAkJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNClcbiIg
KwogCQkJIglpICs9IDE7XG4iICsKIAkJCSIJXlxuIiArCi0JCQkiTnVsbCBwb2ludGVyIGFjY2Vz
czogVGhlIHZhcmlhYmxlIGkgY2FuIG9ubHkgYmUgbnVsbCBhdCB0aGlzIGxvY2F0aW9uXG4iICsK
KwkJCSJOdWxsIHBvaW50ZXIgYWNjZXNzOiBUaGlzIGV4cHJlc3Npb24gb2YgdHlwZSBJbnRlZ2Vy
IGlzIG51bGwgYnV0IHJlcXVpcmVzIGF1dG8tdW5ib3hpbmdcbiIgKwogCQkJIi0tLS0tLS0tLS1c
biIsCiAJCSAgICBKYXZhY1Rlc3RPcHRpb25zLkV4Y3VzZS5FY2xpcHNlV2FybmluZ0NvbmZpZ3Vy
ZWRBc0Vycm9yKTsKIAl9CkBAIC05MjUsNyArOTcxLDcgQEAKIAkJCSIxLiBFUlJPUiBpbiBYLmph
dmEgKGF0IGxpbmUgNClcbiIgKwogCQkJIglpKys7XG4iICsKIAkJCSIJXlxuIiArCi0JCQkiTnVs
bCBwb2ludGVyIGFjY2VzczogVGhlIHZhcmlhYmxlIGkgY2FuIG9ubHkgYmUgbnVsbCBhdCB0aGlz
IGxvY2F0aW9uXG4iICsKKwkJCSJOdWxsIHBvaW50ZXIgYWNjZXNzOiBUaGlzIGV4cHJlc3Npb24g
b2YgdHlwZSBJbnRlZ2VyIGlzIG51bGwgYnV0IHJlcXVpcmVzIGF1dG8tdW5ib3hpbmdcbiIgKwog
CQkJIi0tLS0tLS0tLS1cbiIsCiAJCSAgICBKYXZhY1Rlc3RPcHRpb25zLkV4Y3VzZS5FY2xpcHNl
V2FybmluZ0NvbmZpZ3VyZWRBc0Vycm9yKTsKIAl9CkBAIC05NzQsNyArMTAyMCw3IEBACiAJCQki
MS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDQpXG4iICsKIAkJCSIJU3lzdGVtLm91dC5wcmlu
dGxuKGkgKyA0KTtcbiIgKwogCQkJIgkgICAgICAgICAgICAgICAgICAgXlxuIiArCi0JCQkiTnVs
bCBwb2ludGVyIGFjY2VzczogVGhlIHZhcmlhYmxlIGkgY2FuIG9ubHkgYmUgbnVsbCBhdCB0aGlz
IGxvY2F0aW9uXG4iICsKKwkJCSJOdWxsIHBvaW50ZXIgYWNjZXNzOiBUaGlzIGV4cHJlc3Npb24g
b2YgdHlwZSBJbnRlZ2VyIGlzIG51bGwgYnV0IHJlcXVpcmVzIGF1dG8tdW5ib3hpbmdcbiIgKwog
CQkJIi0tLS0tLS0tLS1cbiIsCiAJCSAgICBKYXZhY1Rlc3RPcHRpb25zLkV4Y3VzZS5FY2xpcHNl
V2FybmluZ0NvbmZpZ3VyZWRBc0Vycm9yKTsKIAl9CkBAIC0xMTYyMiwxMiArMTE2NjgsMTIgQEAK
IAkJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNClcbiIgKyAKIAkJCSIJaWYoZjEgPT0g
MSlcbiIgKyAKIAkJCSIJICAgXl5cbiIgKyAKLQkJCSJOdWxsIHBvaW50ZXIgYWNjZXNzOiBUaGUg
dmFyaWFibGUgZjEgY2FuIG9ubHkgYmUgbnVsbCBhdCB0aGlzIGxvY2F0aW9uXG4iICsgCisJCQki
TnVsbCBwb2ludGVyIGFjY2VzczogVGhpcyBleHByZXNzaW9uIG9mIHR5cGUgSW50ZWdlciBpcyBu
dWxsIGJ1dCByZXF1aXJlcyBhdXRvLXVuYm94aW5nXG4iICsKIAkJCSItLS0tLS0tLS0tXG4iICsg
CiAJCQkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDcpXG4iICsgCiAJCQkiCWludCBhYmMg
PSAoZjIgIT0gMSk/IDEgOiAwO1xuIiArIAogCQkJIgkgICAgICAgICAgIF5eXG4iICsgCi0JCQki
TnVsbCBwb2ludGVyIGFjY2VzczogVGhlIHZhcmlhYmxlIGYyIGNhbiBvbmx5IGJlIG51bGwgYXQg
dGhpcyBsb2NhdGlvblxuIiArIAorCQkJIk51bGwgcG9pbnRlciBhY2Nlc3M6IFRoaXMgZXhwcmVz
c2lvbiBvZiB0eXBlIEludGVnZXIgaXMgbnVsbCBidXQgcmVxdWlyZXMgYXV0by11bmJveGluZ1xu
IiArCiAJCQkiLS0tLS0tLS0tLVxuIiArIAogCQkJIjMuIEVSUk9SIGluIFguamF2YSAoYXQgbGlu
ZSA5KVxuIiArIAogCQkJIglpZihmMyA9PSBudWxsKVxuIiArIApAQCAtMTE2NjgsMTIgKzExNzE0
LDEyIEBACiAJCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDQpXG4iICsKIAkJCSIJaWYo
aTEgPT0gMSlcbiIgKwogCQkJIgkgICBeXlxuIiArCi0JCQkiTnVsbCBwb2ludGVyIGFjY2Vzczog
VGhlIHZhcmlhYmxlIGkxIGNhbiBvbmx5IGJlIG51bGwgYXQgdGhpcyBsb2NhdGlvblxuIiArCisJ
CQkiTnVsbCBwb2ludGVyIGFjY2VzczogVGhpcyBleHByZXNzaW9uIG9mIHR5cGUgSW50ZWdlciBp
cyBudWxsIGJ1dCByZXF1aXJlcyBhdXRvLXVuYm94aW5nXG4iICsKIAkJCSItLS0tLS0tLS0tXG4i
ICsKIAkJCSIyLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNylcbiIgKwogCQkJIglpZihpMSA9
PSAwKSB7fVxuIiArCiAJCQkiCSAgIF5eXG4iICsKLQkJCSJQb3RlbnRpYWwgbnVsbCBwb2ludGVy
IGFjY2VzczogVGhlIHZhcmlhYmxlIGkxIG1heSBiZSBudWxsIGF0IHRoaXMgbG9jYXRpb25cbiIg
KworCQkJIlBvdGVudGlhbCBudWxsIHBvaW50ZXIgYWNjZXNzOiBUaGlzIGV4cHJlc3Npb24gb2Yg
dHlwZSBJbnRlZ2VyIG1heSBiZSBudWxsIGJ1dCByZXF1aXJlcyBhdXRvLXVuYm94aW5nXG4iICsK
IAkJCSItLS0tLS0tLS0tXG4iKTsKIAl9CiB9CkBAIC0xMTcxMSwxMiArMTE3NTcsMTIgQEAKIAkJ
CSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNylcbiIgKyAKIAkJCSIJaWYoZjEgPT0gMSlc
biIgKyAKIAkJCSIJICAgXl5cbiIgKyAKLQkJCSJOdWxsIHBvaW50ZXIgYWNjZXNzOiBUaGUgdmFy
aWFibGUgZjEgY2FuIG9ubHkgYmUgbnVsbCBhdCB0aGlzIGxvY2F0aW9uXG4iICsgCisJCQkiTnVs
bCBwb2ludGVyIGFjY2VzczogVGhpcyBleHByZXNzaW9uIG9mIHR5cGUgSW50ZWdlciBpcyBudWxs
IGJ1dCByZXF1aXJlcyBhdXRvLXVuYm94aW5nXG4iICsKIAkJCSItLS0tLS0tLS0tXG4iICsgCiAJ
CQkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDEwKVxuIiArIAogCQkJIglpbnQgYWJjID0g
KGYyICE9IDEpPyAxIDogMDtcbiIgKyAKIAkJCSIJICAgICAgICAgICBeXlxuIiArIAotCQkJIk51
bGwgcG9pbnRlciBhY2Nlc3M6IFRoZSB2YXJpYWJsZSBmMiBjYW4gb25seSBiZSBudWxsIGF0IHRo
aXMgbG9jYXRpb25cbiIgKyAKKwkJCSJOdWxsIHBvaW50ZXIgYWNjZXNzOiBUaGlzIGV4cHJlc3Np
b24gb2YgdHlwZSBJbnRlZ2VyIGlzIG51bGwgYnV0IHJlcXVpcmVzIGF1dG8tdW5ib3hpbmdcbiIg
KwogCQkJIi0tLS0tLS0tLS1cbiIgKyAKIAkJCSIzLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUg
MTIpXG4iICsgCiAJCQkiCWlmKGYzID09IG51bGwpXG4iICsgCkBAIC0xMTczNiwxMiArMTE3ODIs
MTIgQEAKIAkJCSI2LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTcpXG4iICsgCiAJCQkiCWlm
KGEgPT0gMSkge31cbiIgKyAKIAkJCSIJICAgXlxuIiArIAotCQkJIk51bGwgcG9pbnRlciBhY2Nl
c3M6IFRoZSB2YXJpYWJsZSBhIGNhbiBvbmx5IGJlIG51bGwgYXQgdGhpcyBsb2NhdGlvblxuIiAr
IAorCQkJIk51bGwgcG9pbnRlciBhY2Nlc3M6IFRoaXMgZXhwcmVzc2lvbiBvZiB0eXBlIEludGVn
ZXIgaXMgbnVsbCBidXQgcmVxdWlyZXMgYXV0by11bmJveGluZ1xuIiArIAogCQkJIi0tLS0tLS0t
LS1cbiIgKyAKIAkJCSI3LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTgpXG4iICsgCiAJCQki
CWlmKG91dGVyMiA9PSAxKSB7fVxuIiArIAogCQkJIgkgICBeXl5eXl5cbiIgKyAKLQkJCSJQb3Rl
bnRpYWwgbnVsbCBwb2ludGVyIGFjY2VzczogVGhlIHZhcmlhYmxlIG91dGVyMiBtYXkgYmUgbnVs
bCBhdCB0aGlzIGxvY2F0aW9uXG4iICsgCisJCQkiUG90ZW50aWFsIG51bGwgcG9pbnRlciBhY2Nl
c3M6IFRoaXMgZXhwcmVzc2lvbiBvZiB0eXBlIEludGVnZXIgbWF5IGJlIG51bGwgYnV0IHJlcXVp
cmVzIGF1dG8tdW5ib3hpbmdcbiIgKyAKIAkJCSItLS0tLS0tLS0tXG4iKTsKIAl9CiB9CkBAIC0x
MTc3OSwxMiArMTE4MjUsMTIgQEAKIAkJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgOClc
biIgKyAKIAkJCSIJaWYoZjEgPT0gMSlcbiIgKyAKIAkJCSIJICAgXl5cbiIgKyAKLQkJCSJOdWxs
IHBvaW50ZXIgYWNjZXNzOiBUaGUgdmFyaWFibGUgZjEgY2FuIG9ubHkgYmUgbnVsbCBhdCB0aGlz
IGxvY2F0aW9uXG4iICsgCisJCQkiTnVsbCBwb2ludGVyIGFjY2VzczogVGhpcyBleHByZXNzaW9u
IG9mIHR5cGUgSW50ZWdlciBpcyBudWxsIGJ1dCByZXF1aXJlcyBhdXRvLXVuYm94aW5nXG4iICsK
IAkJCSItLS0tLS0tLS0tXG4iICsgCiAJCQkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDEx
KVxuIiArIAogCQkJIglpbnQgYWJjID0gKGYyICE9IDEpPyAxIDogMDtcbiIgKyAKIAkJCSIJICAg
ICAgICAgICBeXlxuIiArIAotCQkJIk51bGwgcG9pbnRlciBhY2Nlc3M6IFRoZSB2YXJpYWJsZSBm
MiBjYW4gb25seSBiZSBudWxsIGF0IHRoaXMgbG9jYXRpb25cbiIgKyAKKwkJCSJOdWxsIHBvaW50
ZXIgYWNjZXNzOiBUaGlzIGV4cHJlc3Npb24gb2YgdHlwZSBJbnRlZ2VyIGlzIG51bGwgYnV0IHJl
cXVpcmVzIGF1dG8tdW5ib3hpbmdcbiIgKwogCQkJIi0tLS0tLS0tLS1cbiIgKyAKIAkJCSIzLiBF
UlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTMpXG4iICsgCiAJCQkiCWlmKGYzID09IG51bGwpXG4i
ICsgCkBAIC0xMTgwNCwxMiArMTE4NTAsMTIgQEAKIAkJCSI2LiBFUlJPUiBpbiBYLmphdmEgKGF0
IGxpbmUgMTgpXG4iICsgCiAJCQkiCWlmKG91dGVyID09IDEpIHt9XG4iICsgCiAJCQkiCSAgIF5e
Xl5eXG4iICsgCi0JCQkiTnVsbCBwb2ludGVyIGFjY2VzczogVGhlIHZhcmlhYmxlIG91dGVyIGNh
biBvbmx5IGJlIG51bGwgYXQgdGhpcyBsb2NhdGlvblxuIiArIAorCQkJIk51bGwgcG9pbnRlciBh
Y2Nlc3M6IFRoaXMgZXhwcmVzc2lvbiBvZiB0eXBlIEludGVnZXIgaXMgbnVsbCBidXQgcmVxdWly
ZXMgYXV0by11bmJveGluZ1xuIiArCiAJCQkiLS0tLS0tLS0tLVxuIiArIAogCQkJIjcuIEVSUk9S
IGluIFguamF2YSAoYXQgbGluZSAxOSlcbiIgKyAKIAkJCSIJaWYocGFyYW0gPT0gMSkge31cbiIg
KyAKIAkJCSIJICAgXl5eXl5cbiIgKyAKLQkJCSJQb3RlbnRpYWwgbnVsbCBwb2ludGVyIGFjY2Vz
czogVGhlIHZhcmlhYmxlIHBhcmFtIG1heSBiZSBudWxsIGF0IHRoaXMgbG9jYXRpb25cbiIgKyAK
KwkJCSJQb3RlbnRpYWwgbnVsbCBwb2ludGVyIGFjY2VzczogVGhpcyBleHByZXNzaW9uIG9mIHR5
cGUgSW50ZWdlciBtYXkgYmUgbnVsbCBidXQgcmVxdWlyZXMgYXV0by11bmJveGluZ1xuIiArCiAJ
CQkiLS0tLS0tLS0tLVxuIik7CiAJfQogfQpAQCAtMTIxNjIsNyArMTIyMDgsNyBAQAogCQkJIjEu
IEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA0KVxuIiArIAogCQkJIglpbnQgaiA9IGk7XG4iICsg
CiAJCQkiCSAgICAgICAgXlxuIiArIAotCQkJIk51bGwgcG9pbnRlciBhY2Nlc3M6IFRoZSB2YXJp
YWJsZSBpIGNhbiBvbmx5IGJlIG51bGwgYXQgdGhpcyBsb2NhdGlvblxuIiArIAorCQkJIk51bGwg
cG9pbnRlciBhY2Nlc3M6IFRoaXMgZXhwcmVzc2lvbiBvZiB0eXBlIEludGVnZXIgaXMgbnVsbCBi
dXQgcmVxdWlyZXMgYXV0by11bmJveGluZ1xuIiArIAogCQkJIi0tLS0tLS0tLS1cbiIsCiAJCSAg
ICBKYXZhY1Rlc3RPcHRpb25zLkV4Y3VzZS5FY2xpcHNlV2FybmluZ0NvbmZpZ3VyZWRBc0Vycm9y
KTsKIH0KQEAgLTEyMTg2LDcgKzEyMjMyLDcgQEAKIAkJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0
IGxpbmUgNSlcbiIgKyAKIAkJCSIJaiA9IGk7XG4iICsgCiAJCQkiCSAgICBeXG4iICsgCi0JCQki
UG90ZW50aWFsIG51bGwgcG9pbnRlciBhY2Nlc3M6IFRoZSB2YXJpYWJsZSBpIG1heSBiZSBudWxs
IGF0IHRoaXMgbG9jYXRpb25cbiIgKyAKKwkJCSJQb3RlbnRpYWwgbnVsbCBwb2ludGVyIGFjY2Vz
czogVGhpcyBleHByZXNzaW9uIG9mIHR5cGUgSW50ZWdlciBtYXkgYmUgbnVsbCBidXQgcmVxdWly
ZXMgYXV0by11bmJveGluZ1xuIiArIAogCQkJIi0tLS0tLS0tLS1cbiIsCiAJCSAgICBKYXZhY1Rl
c3RPcHRpb25zLkV4Y3VzZS5FY2xpcHNlV2FybmluZ0NvbmZpZ3VyZWRBc0Vycm9yKTsKIH0KQEAg
LTEyMjEwLDcgKzEyMjU2LDcgQEAKIAkJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNClc
biIgKyAKIAkJCSIJYmFyKGJvKTtcbiIgKyAKIAkJCSIJICAgIF5eXG4iICsgCi0JCQkiTnVsbCBw
b2ludGVyIGFjY2VzczogVGhlIHZhcmlhYmxlIGJvIGNhbiBvbmx5IGJlIG51bGwgYXQgdGhpcyBs
b2NhdGlvblxuIiArIAorCQkJIk51bGwgcG9pbnRlciBhY2Nlc3M6IFRoaXMgZXhwcmVzc2lvbiBv
ZiB0eXBlIEJvb2xlYW4gaXMgbnVsbCBidXQgcmVxdWlyZXMgYXV0by11bmJveGluZ1xuIiArIAog
CQkJIi0tLS0tLS0tLS1cbiIsCiAJCSAgICBKYXZhY1Rlc3RPcHRpb25zLkV4Y3VzZS5FY2xpcHNl
V2FybmluZ0NvbmZpZ3VyZWRBc0Vycm9yKTsKIH0KQEAgLTEyMjgzLDcyICsxMjMyOSw3MiBAQAog
CQkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA0KVxuIiArIAogCQkJIglzdXBlcihiMiA9
PSBudWxsLCBiMik7XG4iICsgCiAJCQkiCSAgICAgICAgICAgICAgICAgIF5eXG4iICsgCi0JCQki
UG90ZW50aWFsIG51bGwgcG9pbnRlciBhY2Nlc3M6IFRoZSB2YXJpYWJsZSBiMiBtYXkgYmUgbnVs
bCBhdCB0aGlzIGxvY2F0aW9uXG4iICsgCisJCQkiUG90ZW50aWFsIG51bGwgcG9pbnRlciBhY2Nl
c3M6IFRoaXMgZXhwcmVzc2lvbiBvZiB0eXBlIEJvb2xlYW4gbWF5IGJlIG51bGwgYnV0IHJlcXVp
cmVzIGF1dG8tdW5ib3hpbmdcbiIgKyAKIAkJCSItLS0tLS0tLS0tXG4iICsgCiAJCQkiMi4gRVJS
T1IgaW4gWC5qYXZhIChhdCBsaW5lIDEyKVxuIiArIAogCQkJIglYIHggPSBuZXcgWChiMSwgbnVs
bCk7XG4iICsgCiAJCQkiCSAgICAgICAgICAgIF5eXG4iICsgCi0JCQkiTnVsbCBwb2ludGVyIGFj
Y2VzczogVGhlIHZhcmlhYmxlIGIxIGNhbiBvbmx5IGJlIG51bGwgYXQgdGhpcyBsb2NhdGlvblxu
IiArIAorCQkJIk51bGwgcG9pbnRlciBhY2Nlc3M6IFRoaXMgZXhwcmVzc2lvbiBvZiB0eXBlIEJv
b2xlYW4gaXMgbnVsbCBidXQgcmVxdWlyZXMgYXV0by11bmJveGluZ1xuIiArIAogCQkJIi0tLS0t
LS0tLS1cbiIgKyAKIAkJCSIzLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTQpXG4iICsgCiAJ
CQkiCWJvb2xlYW4gZG9udGNhcmUgPSBiMiAmJiBpbkI7XG4iICsgCiAJCQkiCSAgICAgICAgICAg
ICAgICAgICBeXlxuIiArIAotCQkJIk51bGwgcG9pbnRlciBhY2Nlc3M6IFRoZSB2YXJpYWJsZSBi
MiBjYW4gb25seSBiZSBudWxsIGF0IHRoaXMgbG9jYXRpb25cbiIgKyAKKwkJCSJOdWxsIHBvaW50
ZXIgYWNjZXNzOiBUaGlzIGV4cHJlc3Npb24gb2YgdHlwZSBCb29sZWFuIGlzIG51bGwgYnV0IHJl
cXVpcmVzIGF1dG8tdW5ib3hpbmdcbiIgKyAKIAkJCSItLS0tLS0tLS0tXG4iICsgCiAJCQkiNC4g
RVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDE2KVxuIiArIAogCQkJIglkb250Y2FyZSA9IGluQiB8
fCBiMztcbiIgKyAKIAkJCSIJICAgICAgICAgICAgICAgICAgXl5cbiIgKyAKLQkJCSJOdWxsIHBv
aW50ZXIgYWNjZXNzOiBUaGUgdmFyaWFibGUgYjMgY2FuIG9ubHkgYmUgbnVsbCBhdCB0aGlzIGxv
Y2F0aW9uXG4iICsgCisJCQkiTnVsbCBwb2ludGVyIGFjY2VzczogVGhpcyBleHByZXNzaW9uIG9m
IHR5cGUgQm9vbGVhbiBpcyBudWxsIGJ1dCByZXF1aXJlcyBhdXRvLXVuYm94aW5nXG4iICsgCiAJ
CQkiLS0tLS0tLS0tLVxuIiArIAogCQkJIjUuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxOClc
biIgKyAKIAkJCSIJY2hhcltdIGNzID0gbmV3IGNoYXJbZGltc107XG4iICsgCiAJCQkiCSAgICAg
ICAgICAgICAgICAgICAgIF5eXl5cbiIgKyAKLQkJCSJOdWxsIHBvaW50ZXIgYWNjZXNzOiBUaGUg
dmFyaWFibGUgZGltcyBjYW4gb25seSBiZSBudWxsIGF0IHRoaXMgbG9jYXRpb25cbiIgKyAKKwkJ
CSJOdWxsIHBvaW50ZXIgYWNjZXNzOiBUaGlzIGV4cHJlc3Npb24gb2YgdHlwZSBJbnRlZ2VyIGlz
IG51bGwgYnV0IHJlcXVpcmVzIGF1dG8tdW5ib3hpbmdcbiIgKyAKIAkJCSItLS0tLS0tLS0tXG4i
ICsgCiAJCQkiNi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDIyKVxuIiArIAogCQkJIglmb3Ig
KGludCBpPTA7YjQ7IGkrKyk7XG4iICsgCiAJCQkiCSAgICAgICAgICAgICBeXlxuIiArIAotCQkJ
Ik51bGwgcG9pbnRlciBhY2Nlc3M6IFRoZSB2YXJpYWJsZSBiNCBjYW4gb25seSBiZSBudWxsIGF0
IHRoaXMgbG9jYXRpb25cbiIgKyAKKwkJCSJOdWxsIHBvaW50ZXIgYWNjZXNzOiBUaGlzIGV4cHJl
c3Npb24gb2YgdHlwZSBCb29sZWFuIGlzIG51bGwgYnV0IHJlcXVpcmVzIGF1dG8tdW5ib3hpbmdc
biIgKyAKIAkJCSItLS0tLS0tLS0tXG4iICsgCiAJCQkiNy4gRVJST1IgaW4gWC5qYXZhIChhdCBs
aW5lIDIzKVxuIiArIAogCQkJIgl9IHdoaWxlIChiNSk7XG4iICsgCiAJCQkiCSAgICAgICAgIF5e
XG4iICsgCi0JCQkiTnVsbCBwb2ludGVyIGFjY2VzczogVGhlIHZhcmlhYmxlIGI1IGNhbiBvbmx5
IGJlIG51bGwgYXQgdGhpcyBsb2NhdGlvblxuIiArIAorCQkJIk51bGwgcG9pbnRlciBhY2Nlc3M6
IFRoaXMgZXhwcmVzc2lvbiBvZiB0eXBlIEJvb2xlYW4gaXMgbnVsbCBidXQgcmVxdWlyZXMgYXV0
by11bmJveGluZ1xuIiArIAogCQkJIi0tLS0tLS0tLS1cbiIgKyAKIAkJCSI4LiBFUlJPUiBpbiBY
LmphdmEgKGF0IGxpbmUgMjUpXG4iICsgCiAJCQkiCWlmIChiNikgeyB9XG4iICsgCiAJCQkiCSAg
ICBeXlxuIiArIAotCQkJIk51bGwgcG9pbnRlciBhY2Nlc3M6IFRoZSB2YXJpYWJsZSBiNiBjYW4g
b25seSBiZSBudWxsIGF0IHRoaXMgbG9jYXRpb25cbiIgKyAKKwkJCSJOdWxsIHBvaW50ZXIgYWNj
ZXNzOiBUaGlzIGV4cHJlc3Npb24gb2YgdHlwZSBCb29sZWFuIGlzIG51bGwgYnV0IHJlcXVpcmVz
IGF1dG8tdW5ib3hpbmdcbiIgKyAKIAkJCSItLS0tLS0tLS0tXG4iICsgCiAJCQkiOS4gRVJST1Ig
aW4gWC5qYXZhIChhdCBsaW5lIDI3KVxuIiArIAogCQkJIglaIHogPSB0aGlzLm5ldyBaKGI3KTtc
biIgKyAKIAkJCSIJICAgICAgICAgICAgICAgICBeXlxuIiArIAotCQkJIk51bGwgcG9pbnRlciBh
Y2Nlc3M6IFRoZSB2YXJpYWJsZSBiNyBjYW4gb25seSBiZSBudWxsIGF0IHRoaXMgbG9jYXRpb25c
biIgKyAKKwkJCSJOdWxsIHBvaW50ZXIgYWNjZXNzOiBUaGlzIGV4cHJlc3Npb24gb2YgdHlwZSBC
b29sZWFuIGlzIG51bGwgYnV0IHJlcXVpcmVzIGF1dG8tdW5ib3hpbmdcbiIgKyAKIAkJCSItLS0t
LS0tLS0tXG4iICsgCiAJCQkiMTAuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAyOSlcbiIgKyAK
IAkJCSIJc3dpdGNoKHNlbCkge1xuIiArIAogCQkJIgkgICAgICAgXl5eXG4iICsgCi0JCQkiTnVs
bCBwb2ludGVyIGFjY2VzczogVGhlIHZhcmlhYmxlIHNlbCBjYW4gb25seSBiZSBudWxsIGF0IHRo
aXMgbG9jYXRpb25cbiIgKyAKKwkJCSJOdWxsIHBvaW50ZXIgYWNjZXNzOiBUaGlzIGV4cHJlc3Np
b24gb2YgdHlwZSBJbnRlZ2VyIGlzIG51bGwgYnV0IHJlcXVpcmVzIGF1dG8tdW5ib3hpbmdcbiIg
KyAKIAkJCSItLS0tLS0tLS0tXG4iICsgCiAJCQkiMTEuIEVSUk9SIGluIFguamF2YSAoYXQgbGlu
ZSAzNClcbiIgKyAKIAkJCSIJd2hpbGUgKGI4KSB7fVxuIiArIAogCQkJIgkgICAgICAgXl5cbiIg
KyAKLQkJCSJOdWxsIHBvaW50ZXIgYWNjZXNzOiBUaGUgdmFyaWFibGUgYjggY2FuIG9ubHkgYmUg
bnVsbCBhdCB0aGlzIGxvY2F0aW9uXG4iICsgCisJCQkiTnVsbCBwb2ludGVyIGFjY2VzczogVGhp
cyBleHByZXNzaW9uIG9mIHR5cGUgQm9vbGVhbiBpcyBudWxsIGJ1dCByZXF1aXJlcyBhdXRvLXVu
Ym94aW5nXG4iICsgCiAJCQkiLS0tLS0tLS0tLVxuIiArIAogCQkJIjEyLiBFUlJPUiBpbiBYLmph
dmEgKGF0IGxpbmUgMzYpXG4iICsgCiAJCQkiCWRvbnRjYXJlID0gKGJvb2xlYW4pYjk7XG4iICsg
CiAJCQkiCSAgICAgICAgICAgICAgICAgICAgXl5cbiIgKyAKLQkJCSJOdWxsIHBvaW50ZXIgYWNj
ZXNzOiBUaGUgdmFyaWFibGUgYjkgY2FuIG9ubHkgYmUgbnVsbCBhdCB0aGlzIGxvY2F0aW9uXG4i
ICsgCisJCQkiTnVsbCBwb2ludGVyIGFjY2VzczogVGhpcyBleHByZXNzaW9uIG9mIHR5cGUgQm9v
bGVhbiBpcyBudWxsIGJ1dCByZXF1aXJlcyBhdXRvLXVuYm94aW5nXG4iICsgCiAJCQkiLS0tLS0t
LS0tLVxuIiArIAogCQkJIjEzLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMzgpXG4iICsgCiAJ
CQkiCWFzc2VydCBiMTAgOiBcInNob3VsZG5cJ3QgaGFwcGVuLCBidXQgd2lsbFwiO1xuIiArIAog
CQkJIgkgICAgICAgXl5eXG4iICsgCi0JCQkiTnVsbCBwb2ludGVyIGFjY2VzczogVGhlIHZhcmlh
YmxlIGIxMCBjYW4gb25seSBiZSBudWxsIGF0IHRoaXMgbG9jYXRpb25cbiIgKyAKKwkJCSJOdWxs
IHBvaW50ZXIgYWNjZXNzOiBUaGlzIGV4cHJlc3Npb24gb2YgdHlwZSBCb29sZWFuIGlzIG51bGwg
YnV0IHJlcXVpcmVzIGF1dG8tdW5ib3hpbmdcbiIgKyAKIAkJCSItLS0tLS0tLS0tXG4iICsgCiAJ
CQkiMTQuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA0MClcbiIgKyAKIAkJCSIJcmV0dXJuIGIx
MTtcbiIgKyAKIAkJCSIJICAgICAgIF5eXlxuIiArIAotCQkJIk51bGwgcG9pbnRlciBhY2Nlc3M6
IFRoZSB2YXJpYWJsZSBiMTEgY2FuIG9ubHkgYmUgbnVsbCBhdCB0aGlzIGxvY2F0aW9uXG4iICsg
CisJCQkiTnVsbCBwb2ludGVyIGFjY2VzczogVGhpcyBleHByZXNzaW9uIG9mIHR5cGUgQm9vbGVh
biBpcyBudWxsIGJ1dCByZXF1aXJlcyBhdXRvLXVuYm94aW5nXG4iICsgCiAJCQkiLS0tLS0tLS0t
LVxuIiwKIAkJICAgIEphdmFjVGVzdE9wdGlvbnMuRXhjdXNlLkVjbGlwc2VXYXJuaW5nQ29uZmln
dXJlZEFzRXJyb3IpOwogfQpAQCAtMTI0MTEsMTcgKzEyNDU3LDE3IEBACiAJCQkiMS4gRVJST1Ig
aW4gWC5qYXZhIChhdCBsaW5lIDEyKVxuIiArIAogCQkJIgl9IHdoaWxlIChiMik7XG4iICsgCiAJ
CQkiCSAgICAgICAgIF5eXG4iICsgCi0JCQkiUG90ZW50aWFsIG51bGwgcG9pbnRlciBhY2Nlc3M6
IFRoZSB2YXJpYWJsZSBiMiBtYXkgYmUgbnVsbCBhdCB0aGlzIGxvY2F0aW9uXG4iICsgCisJCQki
UG90ZW50aWFsIG51bGwgcG9pbnRlciBhY2Nlc3M6IFRoaXMgZXhwcmVzc2lvbiBvZiB0eXBlIEJv
b2xlYW4gbWF5IGJlIG51bGwgYnV0IHJlcXVpcmVzIGF1dG8tdW5ib3hpbmdcbiIgKyAKIAkJCSIt
LS0tLS0tLS0tXG4iICsgCiAJCQkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDE1KVxuIiAr
IAogCQkJIgl9IHdoaWxlIChiMyk7XG4iICsgCiAJCQkiCSAgICAgICAgIF5eXG4iICsgCi0JCQki
TnVsbCBwb2ludGVyIGFjY2VzczogVGhlIHZhcmlhYmxlIGIzIGNhbiBvbmx5IGJlIG51bGwgYXQg
dGhpcyBsb2NhdGlvblxuIiArIAorCQkJIk51bGwgcG9pbnRlciBhY2Nlc3M6IFRoaXMgZXhwcmVz
c2lvbiBvZiB0eXBlIEJvb2xlYW4gaXMgbnVsbCBidXQgcmVxdWlyZXMgYXV0by11bmJveGluZ1xu
IiArIAogCQkJIi0tLS0tLS0tLS1cbiIgKyAKIAkJCSIzLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxp
bmUgNDIpXG4iICsgCiAJCQkiCX0gd2hpbGUgKGI3KTtcbiIgKyAKIAkJCSIJICAgICAgICAgXl5c
biIgKyAKLQkJCSJQb3RlbnRpYWwgbnVsbCBwb2ludGVyIGFjY2VzczogVGhlIHZhcmlhYmxlIGI3
IG1heSBiZSBudWxsIGF0IHRoaXMgbG9jYXRpb25cbiIgKyAKKwkJCSJQb3RlbnRpYWwgbnVsbCBw
b2ludGVyIGFjY2VzczogVGhpcyBleHByZXNzaW9uIG9mIHR5cGUgQm9vbGVhbiBtYXkgYmUgbnVs
bCBidXQgcmVxdWlyZXMgYXV0by11bmJveGluZ1xuIiArIAogCQkJIi0tLS0tLS0tLS1cbiIsCiAJ
CQludWxsLypjbGFzc0xpYnJhcmllcyovLAogCQkJdHJ1ZS8qc2hvdWxkRmx1c2hPdXRwdXREaXJl
Y3RvcnkqLywKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL2NvbXBpbGVyL0lQcm9ibGVtLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvY29yZS9jb21waWxlci9JUHJvYmxlbS5qYXZh
CmluZGV4IGE5ZGE1ZGIuLjQ1YmU4NjcgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9jb3JlL2NvbXBpbGVyL0lQcm9ibGVtLmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2NvcmUvY29t
cGlsZXIvSVByb2JsZW0uamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTIgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhl
cnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTMgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhl
cnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBh
bnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9m
IHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRo
aXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC0xNjAsNiArMTYwLDggQEAK
ICAqCQkJCQkJCQkJQ29uZmxpY3RpbmdOdWxsQW5ub3RhdGlvbnMKICAqCQkJCQkJCQkJQ29uZmxp
Y3RpbmdJbmhlcml0ZWROdWxsQW5ub3RhdGlvbnMKICAqCQkJCQkJCQkJVW5zYWZlRWxlbWVudFR5
cGVDb252ZXJzaW9uCisgKgkJCQkJCQkJCVBvdGVudGlhbE51bGxVbmJveGluZworICoJCQkJCQkJ
CQlOdWxsVW5ib3hpbmcKICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwogcGFja2FnZSBvcmcuZWNs
aXBzZS5qZHQuY29yZS5jb21waWxlcjsKIApAQCAtOTAwLDYgKzkwMiwxMCBAQAogCWludCBSZWR1
bmRhbnROdWxsQ2hlY2tPbk5vbk51bGxMb2NhbFZhcmlhYmxlID0gSW50ZXJuYWwgKyA0NTc7CiAJ
LyoqIEBzaW5jZSAzLjMgKi8KIAlpbnQgTm9uTnVsbExvY2FsVmFyaWFibGVDb21wYXJpc29uWWll
bGRzRmFsc2UgPSBJbnRlcm5hbCArIDQ1ODsKKwkvKiogQHNpbmNlIDMuOSAqLworCWludCBQb3Rl
bnRpYWxOdWxsVW5ib3hpbmcgPSBJbnRlcm5hbCArIDQ1OTsKKwkvKiogQHNpbmNlIDMuOSAqLwor
CWludCBOdWxsVW5ib3hpbmcgPSBJbnRlcm5hbCArIDQ2MTsKIAogCS8vIGJsb2NrCiAJLyoqIEBz
aW5jZSAzLjAgKi8KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQ29uZGl0aW9uYWxFeHByZXNzaW9u
LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYXN0L0NvbmRpdGlvbmFsRXhwcmVzc2lvbi5qYXZhCmluZGV4IDhhNThh
MTAuLjY1ZjQzNmIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQ29uZGl0aW9uYWxFeHByZXNzaW9u
LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Db25kaXRpb25hbEV4cHJlc3Npb24uamF2YQpAQCAtMSw1
ICsxLDUgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAs
IDIwMTIgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAs
IDIwMTMgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVk
LiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFk
ZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNl
IHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZh
aWxhYmxlIGF0CkBAIC0xNSw2ICsxNSw3IEBACiAgKiAgICAgCQkJCQkJYnVnIDM0OTMyNiAtIFsx
LjddIG5ldyB3YXJuaW5nIGZvciBtaXNzaW5nIHRyeS13aXRoLXJlc291cmNlcwogICoJCQkJCQkJ
YnVnIDM0NTMwNSAtIFtjb21waWxlcl1bbnVsbF0gQ29tcGlsZXIgbWlzaWRlbnRpZmllcyBhIGNh
c2Ugb2YgInZhcmlhYmxlIGNhbiBvbmx5IGJlIG51bGwiCiAgKgkJCQkJCQlidWcgMzgzMzY4IC0g
W2NvbXBpbGVyXVtudWxsXSBzeW50YWN0aWMgbnVsbCBhbmFseXNpcyBmb3IgZmllbGQgcmVmZXJl
bmNlcworICoJCQkJCQkJYnVnIDQwMDc2MSAtIFtjb21waWxlcl1bbnVsbF0gbnVsbCBtYXkgYmUg
cmV0dXJuIGFzIGJvb2xlYW4gd2l0aG91dCBhIGRpYWdub3N0aWMKICAqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqLwogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0Owog
CkBAIC0xNjYsNiArMTY3LDE1IEBACiAJCXJldHVybiBtZXJnZWRJbmZvOwogCX0KIAorCXB1Ymxp
YyBib29sZWFuIGNoZWNrTlBFKEJsb2NrU2NvcGUgc2NvcGUsIEZsb3dDb250ZXh0IGZsb3dDb250
ZXh0LCBGbG93SW5mbyBmbG93SW5mbykgeworCQlpZiAoKHRoaXMuaW1wbGljaXRDb252ZXJzaW9u
ICYgVHlwZUlkcy5VTkJPWElORykgIT0gMCkgeworCQkJaWYgKCh0aGlzLm51bGxTdGF0dXMgJiBG
bG93SW5mby5QT1RFTlRJQUxMWV9OVUxMKSAhPSAwKSB7CisJCQkJc2NvcGUucHJvYmxlbVJlcG9y
dGVyKCkucG90ZW50aWFsTnVsbFVuYm94aW5nKHRoaXMsIHRoaXMucmVzb2x2ZWRUeXBlKTsKKwkJ
CX0KKwkJfQorCQlyZXR1cm4gdHJ1ZTsgLy8gYWxsIGNoZWNraW5nIGRvbmUKKwl9CisKIAlwcml2
YXRlIHZvaWQgY29tcHV0ZU51bGxTdGF0dXMoaW50IGlmVHJ1ZU51bGxTdGF0dXMsIEZsb3dJbmZv
IHRydWVCcmFuY2hJbmZvLCBGbG93SW5mbyBmYWxzZUJyYW5jaEluZm8sIEZsb3dDb250ZXh0IGZs
b3dDb250ZXh0KSB7CiAJCS8vIGdpdmVuIHRoYXQgdGhlIGNvbmRpdGlvbiBjYW5ub3QgYmUgb3B0
aW1pemVkIHRvIGEgY29uc3RhbnQgCiAJCS8vIHdlIG5vdyBtZXJnZSB0aGUgbnVsbFN0YXR1cyBm
cm9tIGJvdGggYnJhbmNoZXM6CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9Qcm9ibGVtUmVw
b3J0ZXIuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL1Byb2JsZW1SZXBvcnRlci5qYXZhCmluZGV4IGI0
YTYyYTUuLjk1Y2Y0MmQgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL1Byb2JsZW1SZXBvcnRl
ci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL1Byb2JsZW1SZXBvcnRlci5qYXZhCkBAIC0yNSw2
ICsyNSw3IEBACiAgKgkJCQkJCQkJYnVnIDMzMTY0OSAtIFtjb21waWxlcl1bbnVsbF0gY29uc2lk
ZXIgbnVsbCBhbm5vdGF0aW9ucyBmb3IgZmllbGRzCiAgKgkJCQkJCQkJYnVnIDM4Mjc4OSAtIFtj
b21waWxlcl1bbnVsbF0gd2FybiB3aGVuIHN5bnRhY3RpY2FsbHktbm9ubnVsbCBleHByZXNzaW9u
IGlzIGNvbXBhcmVkIGFnYWluc3QgbnVsbAogICoJCQkJCQkJCWJ1ZyAzNzY1OTAgLSBQcml2YXRl
IGZpZWxkcyB3aXRoIEBJbmplY3QgYXJlIGlnbm9yZWQgYnkgdW51c2VkIGZpZWxkIHZhbGlkYXRp
b24KKyAqCQkJCQkJCQlidWcgNDAwNzYxIC0gW2NvbXBpbGVyXVtudWxsXSBudWxsIG1heSBiZSBy
ZXR1cm4gYXMgYm9vbGVhbiB3aXRob3V0IGEgZGlhZ25vc3RpYwogICoqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKiovCiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5wcm9ibGVt
OwogCkBAIC0zMDYsMTAgKzMwNywxMiBAQAogCiAJCWNhc2UgSVByb2JsZW0uTnVsbExvY2FsVmFy
aWFibGVSZWZlcmVuY2U6CiAJCWNhc2UgSVByb2JsZW0uTnVsbGFibGVGaWVsZFJlZmVyZW5jZToK
KwkJY2FzZSBJUHJvYmxlbS5OdWxsVW5ib3hpbmc6CiAJCQlyZXR1cm4gQ29tcGlsZXJPcHRpb25z
Lk51bGxSZWZlcmVuY2U7CiAKIAkJY2FzZSBJUHJvYmxlbS5Qb3RlbnRpYWxOdWxsTG9jYWxWYXJp
YWJsZVJlZmVyZW5jZToKIAkJY2FzZSBJUHJvYmxlbS5Qb3RlbnRpYWxOdWxsTWVzc2FnZVNlbmRS
ZWZlcmVuY2U6CisJCWNhc2UgSVByb2JsZW0uUG90ZW50aWFsTnVsbFVuYm94aW5nOgogCQkJcmV0
dXJuIENvbXBpbGVyT3B0aW9ucy5Qb3RlbnRpYWxOdWxsUmVmZXJlbmNlOwogCiAJCWNhc2UgSVBy
b2JsZW0uUmVkdW5kYW50TG9jYWxWYXJpYWJsZU51bGxBc3NpZ25tZW50OgpAQCAtNTI3Nyw2ICs1
MjgwLDEwIEBACiB9CiAKIHB1YmxpYyB2b2lkIGxvY2FsVmFyaWFibGVOdWxsUmVmZXJlbmNlKExv
Y2FsVmFyaWFibGVCaW5kaW5nIGxvY2FsLCBBU1ROb2RlIGxvY2F0aW9uKSB7CisJaWYgKGxvY2F0
aW9uIGluc3RhbmNlb2YgRXhwcmVzc2lvbiAmJiAoKChFeHByZXNzaW9uKWxvY2F0aW9uKS5pbXBs
aWNpdENvbnZlcnNpb24gJiBUeXBlSWRzLlVOQk9YSU5HKSAhPSAwKSB7CisJCW51bGxVbmJveGlu
Zyhsb2NhdGlvbiwgbG9jYWwudHlwZSk7CisJCXJldHVybjsKKwl9CiAJaW50IHNldmVyaXR5ID0g
Y29tcHV0ZVNldmVyaXR5KElQcm9ibGVtLk51bGxMb2NhbFZhcmlhYmxlUmVmZXJlbmNlKTsKIAlp
ZiAoc2V2ZXJpdHkgPT0gUHJvYmxlbVNldmVyaXRpZXMuSWdub3JlKSByZXR1cm47CiAJU3RyaW5n
W10gYXJndW1lbnRzID0gbmV3IFN0cmluZ1tdIHtuZXcgU3RyaW5nKGxvY2FsLm5hbWUpICB9OwpA
QCAtNTI5MCw2ICs1Mjk3LDEwIEBACiB9CiAKIHB1YmxpYyB2b2lkIGxvY2FsVmFyaWFibGVQb3Rl
bnRpYWxOdWxsUmVmZXJlbmNlKExvY2FsVmFyaWFibGVCaW5kaW5nIGxvY2FsLCBBU1ROb2RlIGxv
Y2F0aW9uKSB7CisJaWYgKGxvY2F0aW9uIGluc3RhbmNlb2YgRXhwcmVzc2lvbiAmJiAoKChFeHBy
ZXNzaW9uKWxvY2F0aW9uKS5pbXBsaWNpdENvbnZlcnNpb24gJiBUeXBlSWRzLlVOQk9YSU5HKSAh
PSAwKSB7CisJCXBvdGVudGlhbE51bGxVbmJveGluZyhsb2NhdGlvbiwgbG9jYWwudHlwZSk7CisJ
CXJldHVybjsKKwl9CiAJaW50IHNldmVyaXR5ID0gY29tcHV0ZVNldmVyaXR5KElQcm9ibGVtLlBv
dGVudGlhbE51bGxMb2NhbFZhcmlhYmxlUmVmZXJlbmNlKTsKIAlpZiAoc2V2ZXJpdHkgPT0gUHJv
YmxlbVNldmVyaXRpZXMuSWdub3JlKSByZXR1cm47CiAJU3RyaW5nW10gYXJndW1lbnRzID0gbmV3
IFN0cmluZ1tdIHtuZXcgU3RyaW5nKGxvY2FsLm5hbWUpfTsKQEAgLTUzMDEsNyArNTMxMiwxNiBA
QAogCQlub2RlU291cmNlU3RhcnQobG9jYWwsIGxvY2F0aW9uKSwKIAkJbm9kZVNvdXJjZUVuZChs
b2NhbCwgbG9jYXRpb24pKTsKIH0KLQorcHVibGljIHZvaWQgcG90ZW50aWFsTnVsbFVuYm94aW5n
KEFTVE5vZGUgZXhwcmVzc2lvbiwgVHlwZUJpbmRpbmcgYm94VHlwZSkgeworCVN0cmluZ1tdIGFy
Z3VtZW50cyA9IG5ldyBTdHJpbmdbXSB7IFN0cmluZy52YWx1ZU9mKGJveFR5cGUucmVhZGFibGVO
YW1lKCkpIH07CisJU3RyaW5nW10gYXJndW1lbnRzU2hvcnQgPSBuZXcgU3RyaW5nW10geyBTdHJp
bmcudmFsdWVPZihib3hUeXBlLnNob3J0UmVhZGFibGVOYW1lKCkpIH07CisJdGhpcy5oYW5kbGUo
SVByb2JsZW0uUG90ZW50aWFsTnVsbFVuYm94aW5nLCBhcmd1bWVudHMsIGFyZ3VtZW50c1Nob3J0
LCBleHByZXNzaW9uLnNvdXJjZVN0YXJ0LCBleHByZXNzaW9uLnNvdXJjZUVuZCk7Cit9CitwdWJs
aWMgdm9pZCBudWxsVW5ib3hpbmcoQVNUTm9kZSBleHByZXNzaW9uLCBUeXBlQmluZGluZyBib3hU
eXBlKSB7CisJU3RyaW5nW10gYXJndW1lbnRzID0gbmV3IFN0cmluZ1tdIHsgU3RyaW5nLnZhbHVl
T2YoYm94VHlwZS5yZWFkYWJsZU5hbWUoKSkgfTsKKwlTdHJpbmdbXSBhcmd1bWVudHNTaG9ydCA9
IG5ldyBTdHJpbmdbXSB7IFN0cmluZy52YWx1ZU9mKGJveFR5cGUuc2hvcnRSZWFkYWJsZU5hbWUo
KSkgfTsKKwl0aGlzLmhhbmRsZShJUHJvYmxlbS5OdWxsVW5ib3hpbmcsIGFyZ3VtZW50cywgYXJn
dW1lbnRzU2hvcnQsIGV4cHJlc3Npb24uc291cmNlU3RhcnQsIGV4cHJlc3Npb24uc291cmNlRW5k
KTsKK30KIHB1YmxpYyB2b2lkIG51bGxhYmxlRmllbGREZXJlZmVyZW5jZShWYXJpYWJsZUJpbmRp
bmcgdmFyaWFibGUsIGxvbmcgcG9zaXRpb24pIHsKIAlTdHJpbmdbXSBhcmd1bWVudHMgPSBuZXcg
U3RyaW5nW10ge25ldyBTdHJpbmcodmFyaWFibGUubmFtZSl9OwogCWNoYXJbXVtdIG51bGxhYmxl
TmFtZSA9IHRoaXMub3B0aW9ucy5udWxsYWJsZUFubm90YXRpb25OYW1lOwpkaWZmIC0tZ2l0IGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL3Byb2JsZW0vbWVzc2FnZXMucHJvcGVydGllcyBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL21lc3Nh
Z2VzLnByb3BlcnRpZXMKaW5kZXggZDk1ZjkwMC4uYTczNTMwMiAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L3Byb2JsZW0vbWVzc2FnZXMucHJvcGVydGllcworKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9tZXNzYWdl
cy5wcm9wZXJ0aWVzCkBAIC0yMSw2ICsyMSw3IEBACiAjCQkJCQkJCWJ1ZyAzOTM3MTkgLSBbY29t
cGlsZXJdIGluY29uc2lzdGVudCB3YXJuaW5ncyBvbiBpdGVyYXRpb24gdmFyaWFibGVzCiAjCQkJ
CQkJCWJ1ZyAzMzE2NDkgLSBbY29tcGlsZXJdW251bGxdIGNvbnNpZGVyIG51bGwgYW5ub3RhdGlv
bnMgZm9yIGZpZWxkcwogIwkJCQkJCQlidWcgMzgyNzg5IC0gW2NvbXBpbGVyXVtudWxsXSB3YXJu
IHdoZW4gc3ludGFjdGljYWxseS1ub25udWxsIGV4cHJlc3Npb24gaXMgY29tcGFyZWQgYWdhaW5z
dCBudWxsCisjCQkJCQkJCWJ1ZyA0MDA3NjEgLSBbY29tcGlsZXJdW251bGxdIG51bGwgbWF5IGJl
IHJldHVybiBhcyBib29sZWFuIHdpdGhvdXQgYSBkaWFnbm9zdGljCiAjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjCiAwID0gezB9CiAxID0gc3VwZXIgY2Fubm90IGJlIHVzZWQgaW4gamF2YS5sYW5nLk9i
amVjdApAQCAtNDA0LDcgKzQwNSw4IEBACiA0NTYgPSBpbnN0YW5jZW9mIGFsd2F5cyB5aWVsZHMg
ZmFsc2U6IFRoZSB2YXJpYWJsZSB7MH0gY2FuIG9ubHkgYmUgbnVsbCBhdCB0aGlzIGxvY2F0aW9u
CiA0NTcgPSBSZWR1bmRhbnQgbnVsbCBjaGVjazogVGhlIHZhcmlhYmxlIHswfSBjYW5ub3QgYmUg
bnVsbCBhdCB0aGlzIGxvY2F0aW9uCiA0NTggPSBOdWxsIGNvbXBhcmlzb24gYWx3YXlzIHlpZWxk
cyBmYWxzZTogVGhlIHZhcmlhYmxlIHswfSBjYW5ub3QgYmUgbnVsbCBhdCB0aGlzIGxvY2F0aW9u
Ci0KKzQ1OSA9IFBvdGVudGlhbCBudWxsIHBvaW50ZXIgYWNjZXNzOiBUaGlzIGV4cHJlc3Npb24g
b2YgdHlwZSB7MH0gbWF5IGJlIG51bGwgYnV0IHJlcXVpcmVzIGF1dG8tdW5ib3hpbmcKKzQ2MSA9
IE51bGwgcG9pbnRlciBhY2Nlc3M6IFRoaXMgZXhwcmVzc2lvbiBvZiB0eXBlIHswfSBpcyBudWxs
IGJ1dCByZXF1aXJlcyBhdXRvLXVuYm94aW5nCiA0NjAgPSBFbXB0eSBibG9jayBzaG91bGQgYmUg
ZG9jdW1lbnRlZAogCiAjIyMgRE9D
</data>

          </attachment>
      

    </bug>

</bugzilla>