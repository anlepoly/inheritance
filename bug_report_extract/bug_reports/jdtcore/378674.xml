<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>378674</bug_id>
          
          <creation_ts>2012-05-07 10:26:00 -0400</creation_ts>
          <short_desc>&quot;The method can be declared as static&quot; is wrong</short_desc>
          <delta_ts>2013-05-02 02:41:47 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          <see_also>https://bugs.eclipse.org/bugs/show_bug.cgi?id=376550</see_also>
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>4.3 M7</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Stephan Praetsch">Stephan.Praetsch</reporter>
          <assigned_to name="Jesper Moller">jesper</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>anchakrk</cc>
    
    <cc>jarthana</cc>
    
    <cc>moradan228</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
    
    <cc>troy</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="55942"
          type_id="1"
          status="+"
          setter="srikanth_sankaran"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2103705</commentid>
    <comment_count>0</comment_count>
    <who name="Stephan Praetsch">Stephan.Praetsch</who>
    <bug_when>2012-05-07 10:26:12 -0400</bug_when>
    <thetext>Build Identifier: M20120208-0800

public class Test&lt;T&gt; {

    @SuppressWarnings({ &quot;unchecked&quot;, &quot;rawtypes&quot; })
    public static void main(String[] args) {
        new Test().method(null);
    }

    private static class SubClass&lt;A&gt; {

    }

    private void method(SubClass&lt;T&gt; s) {
        System.out.println(s);
    }

}

According to Eclipse 

&quot;The method method(Test.SubClass&lt;T&gt;) from the type Test&lt;T&gt; can be declared as static	Test.java&quot;

But it cannot because 

&quot;Cannot make a static reference to the non-static type T&quot;

Reproducible: Always

Steps to Reproduce:
See Details for test code.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2104225</commentid>
    <comment_count>1</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-05-08 01:56:14 -0400</bug_when>
    <thetext>These also need to be fixed: (Currently they are reported as &quot;can be static&quot;)

class X{
   public final &lt;E1&gt; Collection&lt;E1&gt; go() {  // can be static
		return null; 
   }
}

class X&lt;E&gt;{
   public final &lt;E1&gt; Collection&lt;E&gt; go() {  // cannot be static
		return null; 
   }
}

class X&lt;E&gt;{
   public final &lt;E1&gt; Collection go() {  // cannot be static
		return new ArrayList&lt;E&gt;{}; 
   }
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2109550</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-05-17 12:40:42 -0400</bug_when>
    <thetext>A similar test case (from bug 376550 comment 9) (with &quot;final&quot; added here):

public class X&lt;T&gt; {
	public final void foo() {
		java.util.List&lt;T&gt; k;
	}
}

It reports &quot;The method foo() from the type X&lt;T&gt; can be declared as static&quot; but adding &quot;static&quot; yields of course:
&quot;Cannot make a static reference to the non-static type T&quot;.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2114986</commentid>
    <comment_count>3</comment_count>
    <who name="Ivan Sopov">moradan228</who>
    <bug_when>2012-05-28 11:10:25 -0400</bug_when>
    <thetext>Another false-positive for the same warning:

public class Test {
	//false positive of method can be declared static
	private void bar() {
		foo(Test.this);
	}

	private static void foo(Test test) {
		System.out.println(test.getClass().getName());
	}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2222398</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-27 01:35:54 -0500</bug_when>
    <thetext>Jesper, please take a look, TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2225588</commentid>
    <comment_count>5</comment_count>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-03-04 09:10:39 -0500</bug_when>
    <thetext>(In reply to comment #0)
&gt; private void method(SubClass&lt;T&gt; s) {
&gt; System.out.println(s);
&gt; }
&gt; 

Also nested/deeper type uses go undetected: 

private void method(SubClass&lt;Collection&lt;T&gt;&gt; s) {
 System.out.println(s);
}

and 

private Collection&lt;T&gt; method() {
 return null;
}

A can of worms -- I&apos;ll go fishing.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2225947</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-03-04 18:13:07 -0500</bug_when>
    <thetext>Once this work is done (in master?) you might be interested in bug 401989 :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2225981</commentid>
    <comment_count>7</comment_count>
      <attachid>227911</attachid>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-03-04 20:00:47 -0500</bug_when>
    <thetext>Created attachment 227911
Tests to implement changes against

These are the tests matching the various code snippets found in this report, one more for each comment.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2225983</commentid>
    <comment_count>8</comment_count>
      <attachid>227912</attachid>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-03-04 20:32:13 -0500</bug_when>
    <thetext>Created attachment 227912
Patch for reducing false positives for potential static-ness

I had to resort to a polymorphic analysis function on the TypeBinding-hierarchy, otherwise we&apos;d drown in ASTVisitors or instanceof-checks.

I think it&apos;s more clear this way, comments appreciated.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2225984</commentid>
    <comment_count>9</comment_count>
      <attachid>227913</attachid>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-03-04 20:41:59 -0500</bug_when>
    <thetext>Created attachment 227913
Dang, patch had a regression for enums, fixed now</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2226087</commentid>
    <comment_count>10</comment_count>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-03-05 04:54:21 -0500</bug_when>
    <thetext>The current checks also leave out wildcard types:

public class Test&lt;T&gt; {

    @SuppressWarnings({ &quot;rawtypes&quot; })
    public static void main(String[] args) {
        new Test().method();
    }

    private java.util.Collection&lt;? extends T&gt; method() {
        return null;
    }
}

Must extend patch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2226088</commentid>
    <comment_count>11</comment_count>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-03-05 04:55:48 -0500</bug_when>
    <thetext>And another one, if the method has type parameters which are bounded by the declaring class&apos;s type parameters, that also prevents staticness:

public class Test&lt;T&gt; {

    @SuppressWarnings({ &quot;rawtypes&quot; })
    public static void main(String[] args) {
        new Test().method1();
        new Test().method2();
    }

   private &lt;TT extends T&gt; TT method1() { 
		return null;
	}

   private &lt;TT extends Object &amp; Comparable&lt;? super T&gt;&gt; TT method2() { 
		return null;
	}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2226096</commentid>
    <comment_count>12</comment_count>
      <attachid>227922</attachid>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-03-05 05:09:21 -0500</bug_when>
    <thetext>Created attachment 227922
New tests, also covering comment 10 and 11</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2226111</commentid>
    <comment_count>13</comment_count>
      <attachid>227925</attachid>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-03-05 05:43:12 -0500</bug_when>
    <thetext>Created attachment 227925
Patch for most of the bugs</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2226113</commentid>
    <comment_count>14</comment_count>
      <attachid>227926</attachid>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-03-05 05:45:44 -0500</bug_when>
    <thetext>Created attachment 227926
Patch for the most recently discovered problems.

I had to add an anti-mutually-recursive-loop-check for certain kinds of tricky declarations, such as:

public &lt;A extends J&lt;A, D&gt;, D extends J&lt;A, D&gt;&gt; A method(A arg) { return null; }

seen in org.eclipse.jdt.core.tests.compiler.regression.AmbiguousMethodTest.test077()</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2226115</commentid>
    <comment_count>15</comment_count>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-03-05 05:48:35 -0500</bug_when>
    <thetext>Oops, wrong use of the review flag -- requesting review, I guess from Stefan Herrmann - or Srikanth?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2226156</commentid>
    <comment_count>16</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-05 07:37:44 -0500</bug_when>
    <thetext>It may be too late to rewire a lot of existing code and the new ones too,
but I wonder if TypeBindingVisitor would have been useful.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2226157</commentid>
    <comment_count>17</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-05 07:38:05 -0500</bug_when>
    <thetext>I can review this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2226173</commentid>
    <comment_count>18</comment_count>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-03-05 08:15:45 -0500</bug_when>
    <thetext>(In reply to comment #16)
&gt; It may be too late to rewire a lot of existing code and the new ones too,
&gt; but I wonder if TypeBindingVisitor would have been useful.

It would have been - I felt really bad when I added the SimpleSet to the method signature :-(

However, the type bindings are effectively a graph, not a tree, so the normal approach would not work. I don&apos;t know exactly how the other type reference iterations are implemented, so I don&apos;t know if it&apos;s a good idea.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2226501</commentid>
    <comment_count>19</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-03-05 18:13:19 -0500</bug_when>
    <thetext>Just a quick note that just today I was facing a similar problem of needing
to traverse type bindings without hitting a StackOverflow.

For the new inference this is needed for questions like: does a given type
contain any inference variable / a particular inference variable?

I quickly helped myself using a flag &quot;inRecursiveFunction&quot; which
seems to be needed only in TypeVariableBinding and WildcardBinding.
(Why do these two have no common super class?)
I feel this to be leaner than the &quot;SimpleSet seen&quot; approach.

It would be great if we could find a general solution that serves several
such queries.

BTW, I couldn&apos;t see how the TypeBindingVisitor would avoid the recursion?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2226829</commentid>
    <comment_count>20</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-06 11:16:06 -0500</bug_when>
    <thetext>(In reply to comment #18)

&gt; However, the type bindings are effectively a graph, not a tree, so the
&gt; normal approach would not work. I don&apos;t know exactly how the other type
&gt; reference iterations are implemented, so I don&apos;t know if it&apos;s a good idea.

Can you give me an example of a case that would be hard to handle ?

&gt; It would be great if we could find a general solution that serves several
&gt; such queries.
&gt; 
&gt; BTW, I couldn&apos;t see how the TypeBindingVisitor would avoid the recursion?

Can you give me an example of what you have in mind ?

I need to go back and check the code - I recall the design intent being that
a client would request the visitor not to &quot;descend into&quot; the nodes already
&quot;touched&quot; in the traversal.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2226922</commentid>
    <comment_count>21</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-06 12:58:55 -0500</bug_when>
    <thetext>(1) I did enough of a prototype based using TypeBindingVisitor to satisfy
myself that it could work: 

A new method in MethodDeclaration could look like this:

	private boolean refersToAlienTypeVariable(TypeBinding type) {
		if (type == null || !type.isValidBinding())
			return false;
		class AlienTypeVariableFoundException extends RuntimeException {
			private static final long serialVersionUID = 1L;
		}
		try {
		TypeBindingVisitor visitor = new TypeBindingVisitor() {
			SimpleSet visitedVariables;
			public boolean visit(TypeVariableBinding typeVariable) {
				if (this.visitedVariables != null &amp;&amp; this.visitedVariables.includes(typeVariable))
					return false; // do not revisit.
				if (typeVariable.declaringElement != MethodDeclaration.this.binding)
					throw new AlienTypeVariableFoundException();
				if (this.visitedVariables == null)
					this.visitedVariables = new SimpleSet();
				this.visitedVariables.add(typeVariable);
				return true;
			}
			
		};
		visitor.visit(visitor, type);
		} catch (AlienTypeVariableFoundException e) {
			return true;
		}
		return false;
	}

I think this would help avoid reinventing additional infrastructure.

// ----------------------------

(2) That said, I think the past and present approach to this feature has
been along the lines of &quot;let us fix problems as we find them.&quot; That is not
good. Rather than looking at a collection of point fixes, we need to come
up with a new approach to solving the problem in a wholesome way: a new
approach that may not need either the new infrastructure or even the TypeBindingVisitor.

For example, 

Even after the patch proposed we will miss several cases:

public class X&lt;P extends Exception&gt; {
	final &lt;T&gt; void foo(T x) throws P {
		Object o = (P) null;
		new Outer().new Inner&lt;P&gt;();
		class Local {
			P p;
		}
		
	}
}

class Outer {
	class Inner&lt;Q&gt; {}
}

if you turn foo into a static method, we will report 4 different new causes
why foo cannot be static. That shows the need for a radically different
approach than the past &amp; present strategies.

------------------

I think the right fix for this problem is in Scope/BlockScope&apos;s:
Every place a Problem*Binding gets generated with NonStaticReferenceInStaticContext as the problem reason should
tag the method as &quot;cannot be static&quot;

Please try this approach and see if that helps. Could you also split
the above case into 4 individual test cases ? TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2226937</commentid>
    <comment_count>22</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-06 13:12:57 -0500</bug_when>
    <thetext>(In reply to comment #21)
&gt; 
&gt; Please try this approach and see if that helps. Could you also split
&gt; the above case into 4 individual test cases ? TIA.

If this works (fairly certain it would) we should clean up various locations 
where this analysis is implemented that would be rendered redundant by the 
new fix. 

Also checking whether this analysis is turned on before clearing the
flag would/could avoid needless performance penalty.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2227038</commentid>
    <comment_count>23</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-06 15:44:32 -0500</bug_when>
    <thetext>(In reply to comment #6)
&gt; Once this work is done (in master?)

At this point, we want to freeze/minimize activity on master to critical/serious/blocker/regressions. But this feature is broken enough to
warrant an exception.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2227842</commentid>
    <comment_count>24</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-07 22:19:25 -0500</bug_when>
    <thetext>(In reply to comment #19)

&gt; I quickly helped myself using a flag &quot;inRecursiveFunction&quot; which
&gt; seems to be needed only in TypeVariableBinding and WildcardBinding.
&gt; (Why do these two have no common super class?)

A captured wildcard is a type variable binding and indeed is modeled
that way.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2227962</commentid>
    <comment_count>25</comment_count>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-03-08 06:56:23 -0500</bug_when>
    <thetext>I&apos;m changing the fix according to comment 21 , expecting to done Monday, I agree it&apos;s a better approach. 
Could you commit the test cases -- commented out -- first?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2228046</commentid>
    <comment_count>26</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-08 08:56:50 -0500</bug_when>
    <thetext>(In reply to comment #25)
&gt; I&apos;m changing the fix according to comment 21 , expecting to done Monday, I
&gt; agree it&apos;s a better approach. 
&gt; Could you commit the test cases -- commented out -- first?

Sure, here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=91cab663afb499abc33d6e434c4eaeb82aebffd5 (includes new tests from
comment#21)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2228359</commentid>
    <comment_count>27</comment_count>
      <attachid>228162</attachid>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-03-08 18:11:00 -0500</bug_when>
    <thetext>Created attachment 228162
Much simpler fix for these</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2228360</commentid>
    <comment_count>28</comment_count>
      <attachid>228163</attachid>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-03-08 18:12:14 -0500</bug_when>
    <thetext>Created attachment 228163
Enabled tests</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2228400</commentid>
    <comment_count>29</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-08 22:53:28 -0500</bug_when>
    <thetext>I made two changes and released the fix and tests here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=316ebf3c8778d533770eaa12593a9b983e065138

(1) Changed the comment in MethodDeclaration to: 

this.bits |= ASTNode.CanBeStatic; // Start with this assumption, will course correct during resolve.

from being

this.bits |= ASTNode.CanBeStatic; // Since this can be reset BEFORE the resolve phase, set it now

(2) Scope.java: Fixed accidental deletion of Stephan&apos;s contribution details
in copyright.

Before resolving, a few things need cleanup/attention:

(1) Whenever a method undergoes change, let us also look at any overrides
and update them. In this case org.eclipse.jdt.internal.eval.CodeSnippetThisReference.checkAccess(MethodScope)
needs update. I agree it is not material in this instance, but it is a 
good practice. Please check for other similar changes.

(2) A good bit of *old* code can be deleted since they are rendered
redundant by the new fix. For example LocalDeclaration.analyzeCode
lines 53-88 - are they needed anymore ? Also FieldReference.analyze*,
part/all of it may be rendered redundant ? It would be a good idea to
look at all call sites of resetDeclaringClassMethodStaticFlag and
resetEnclosingMethodStaticFlag.

(3) It would also be a good idea to centralize all/most CanBeStatic 
clearing in Scope. Please look for other uses of NonStaticReferenceInStaticContext in Scope &amp; BlockScope. Presently
this clearing happens haphazardly and all over the place in the
pre-existing code. There is opportunity to significantly reduce code
clutter.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2228448</commentid>
    <comment_count>30</comment_count>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-03-09 06:17:43 -0500</bug_when>
    <thetext>(In reply to comment #29)
&gt; (2) Scope.java: Fixed accidental deletion of Stephan&apos;s contribution details
&gt; in copyright.

Oops.

&gt; Before resolving, a few things need cleanup/attention:
&gt; 
&gt; (1) Whenever a method undergoes change, let us also look at any overrides
&gt; and update them. In this case
&gt; org.eclipse.jdt.internal.eval.CodeSnippetThisReference.checkAccess(MethodScope)
&gt; needs update. I agree it is not material in this instance, but it is a
&gt; good practice. Please check for other similar changes.

Will do.

&gt; (2) A good bit of *old* code can be deleted since they are rendered
&gt; redundant by the new fix. For example LocalDeclaration.analyzeCode
&gt; lines 53-88 - are they needed anymore ?

Don&apos;t think they are, no tests complain about their removal.

&gt; Also FieldReference.analyze*,
&gt; part/all of it may be rendered redundant ? It would be a good idea to
&gt; look at all call sites of resetDeclaringClassMethodStaticFlag and
&gt; resetEnclosingMethodStaticFlag.

I have done, but not all of them correspond to a matching &quot;error-if-static&quot; error reporting, like the one used in my previous patch.
Especially the area around ThisReference is tricky, since it is used in different ways (explicitly, implicitly, and implicitly, but actually static). For instance, I tried removing the &apos;reset&apos; in MessageSend line 128 since it appears to duplicate the one in ThisReference, line 139, but I&apos;m not yet confident enough that the test cases will cover this.

&gt; (3) It would also be a good idea to centralize all/most CanBeStatic
&gt; clearing in Scope. Please look for other uses of
&gt; NonStaticReferenceInStaticContext in Scope &amp; BlockScope. Presently
&gt; this clearing happens haphazardly and all over the place in the
&gt; pre-existing code. There is opportunity to significantly reduce code
&gt; clutter.

I don&apos;t think that can be done 100%, as stated above, but I will investigate further.
In general, I&apos;ve found more code duplication throughout JDT Core than I would usually allow -- let&apos;s slash some.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2228512</commentid>
    <comment_count>31</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-09 14:45:42 -0500</bug_when>
    <thetext>*** Bug 370785 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2229261</commentid>
    <comment_count>32</comment_count>
      <attachid>228234</attachid>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-03-11 20:12:05 -0400</bug_when>
    <thetext>Created attachment 228234
Clean up of some of the scattered tests for non-staticability

These are the cleanups which I can verify at this point. I&apos;ve been through all the &quot;cannot be static&quot;-problem reports, and put the CanBeStatic-reset-calls there where possible.

I was not able to centralize it all, though, without adding some ugly instanceof-checks in Scope and friends. I think we can resolve this one now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2229262</commentid>
    <comment_count>33</comment_count>
      <attachid>228235</attachid>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-03-11 20:18:29 -0400</bug_when>
    <thetext>Created attachment 228235
Improved formatting of patch

Applies cleanly against current master</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2229271</commentid>
    <comment_count>34</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-11 22:19:13 -0400</bug_when>
    <thetext>(In reply to comment #32)
&gt; Created attachment 228234 [details]
&gt; Clean up of some of the scattered tests for non-staticability


I released this via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=fd61d3d365e4129ad38d13ee5d665ea318749efb

Before closing, I would still like to understand

(a) Why there are so many calls to resetDeclaringClassMethodStaticFlag all 
over the place (12) - This indicates that this logic is still not centralized.

(b) Why there are so few calls to resetEnclosingMethodStaticFlag than one
would expect: For example, why isn&apos;t there any resetting in BlockScope
at the points where NonStaticReferenceInStaticContext is cited as the
problem reason. Likewise, there are a couple more places in Scope where
I would expec to see resetting.

[Copyright mentions: &quot;bug 382721 - [1.8][compiler] Effectively final 
variables needs special treatment&quot; - Fixed.]

Jesper, can you take a look at (a) and (b) ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2229273</commentid>
    <comment_count>35</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-11 22:22:13 -0400</bug_when>
    <thetext>(In reply to comment #34)
&gt; (In reply to comment #32)
&gt; &gt; Created attachment 228234 [details]
&gt; &gt; Clean up of some of the scattered tests for non-staticability
&gt; 
&gt; 
&gt; I released this via
&gt; http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
&gt; ?id=fd61d3d365e4129ad38d13ee5d665ea318749efb
&gt; 
&gt; Before closing, I would still like to understand
&gt; 
&gt; (a) Why there are so many calls to resetDeclaringClassMethodStaticFlag all 
&gt; over the place (12) - This indicates that this logic is still not
&gt; centralized.

Is it possible to identify tests which prove why each of these
is necessary ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2229278</commentid>
    <comment_count>36</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-11 22:28:05 -0400</bug_when>
    <thetext>(In reply to comment #35)

&gt; Is it possible to identify tests which prove why each of these
&gt; is necessary ?

Also can you dig up tests that show why the two types of reset operations
corresponding to the two reset methods is necessary ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2229281</commentid>
    <comment_count>37</comment_count>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-03-11 22:58:49 -0400</bug_when>
    <thetext>(In reply to comment #34)

(34a) Most of these are from the fix of bug 318682. They do not appear to have matching test cases, all of then but it may be covered by regression.

(In reply to comment #35)

&gt; Is it possible to identify tests which prove why each of these
&gt; is necessary ?

It is possible, but quite time consuming.

&gt; Also can you dig up tests that show why the two types of reset operations
&gt; corresponding to the two reset methods is necessary ?

resetEnclosingMethodStaticFlag is to flag that the method in question directly or indirectly refers to &apos;this&apos;, or other.

resetDeclaringClassMethodStaticFlag indicates reliance on non-static context all the way from &apos;this&apos; scope up to the declaringClass of whatever is referred to.

(34b) I forget which case it was, but there were subtle cases where the static-ness of the method didn&apos;t matter, such as member classes referring to non-static members of the enclosing class. That&apos;s a &apos;static context&apos;, but not inside a method. Trouble, for me at least, is that the Scope hierarchy is so heavily (over)loaded with functionality which is hard to tell apart, so it&apos;s hard to judge the expected context from the methods alone. For me anyway!

I would also prefer perfect symmetry between the static-tests and the CanBeStatic flag, and I will give it another pass.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2229286</commentid>
    <comment_count>38</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-12 00:11:52 -0400</bug_when>
    <thetext>(In reply to comment #37)
&gt; (In reply to comment #34)
&gt; 
&gt; (34a) Most of these are from the fix of bug 318682. They do not appear to
&gt; have matching test cases, all of then but it may be covered by regression.
&gt; 
&gt; (In reply to comment #35)
&gt; 
&gt; &gt; Is it possible to identify tests which prove why each of these
&gt; &gt; is necessary ?
&gt; 
&gt; It is possible, but quite time consuming.

This bug is not tagged for M6, so we can take the time. One way to make
progress is to plant breakpoints at the code locations in question and
run them through the whole test suite. When they trigger, extract a test 
scenario and ask the question &quot;Is the flag already cleared by the new 
implementation&quot; ?

Better yet, we can even change the code to check the flag at locations we 
suspect are redundant to see if it is already reset. When we see some
location where the flag is not reset, then that piece of code is not
redundant - but then we can ask the question how could the new implementation
handle that in a centralized manner rather than in an ad-hoc all over
the place fashion.

&gt; I would also prefer perfect symmetry between the static-tests and the
&gt; CanBeStatic flag, and I will give it another pass.

This is a noble goal to strive for, let us go for it :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2230967</commentid>
    <comment_count>39</comment_count>
      <attachid>228390</attachid>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-03-13 19:43:03 -0400</bug_when>
    <thetext>Created attachment 228390
Final patch

Ok, it&apos;s done now. No more excuses, just a bit of explanation. Srikanth was absolutely right in pushing for this -- this patch removes 9 redundant resetXxx calls, and adds one, and an analysis of why the rest are there.

The final story on the bit CanBeStatic: It is
 1) set in the MethodDeclaration&apos;s ctor, and
 2) selectively cleared just around where the opposite check (non-static access to anything in static context) is made -- this is primarily in Scope (and subclasses), but also in e.g. ThisReference and friends. 
 3) The only exception to this is inAllocationExpression and friends, where the corresponding check doesn&apos;t happen until code generation (and we want to warning to show before that)
 4) Finally, CanBeStatic is as also affected by MethodDeclaration specific checks, and
 5) At the end of MethodDeclaration.analyseCode, and the bit is not cleared, then the method could actually be static, the problem (&quot;this method could be static&quot;) is emitted.
 
 It feels a bit awkward to add &quot;Contribution by&quot; header comment entries for files where I&apos;ve only removed code, or added comment, I leave that up to you.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2231042</commentid>
    <comment_count>40</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-14 03:29:05 -0400</bug_when>
    <thetext>(In reply to comment #39)
&gt; Created attachment 228390 [details]
&gt; Final patch

Patch looks good. This is a significant cleanup of the original implementation.
Thanks Jesper. I&apos;ll release it just after M6 is declared done.

&gt;  It feels a bit awkward to add &quot;Contribution by&quot; header comment entries for
&gt; files where I&apos;ve only removed code, or added comment, I leave that up to you.

Less is more, so deleting code is an important contribution too.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2231324</commentid>
    <comment_count>41</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-14 10:20:08 -0400</bug_when>
    <thetext>Parts of this fix have already been released in M6, rest will go into
early M7.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2232360</commentid>
    <comment_count>42</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-15 20:31:42 -0400</bug_when>
    <thetext>Fix and tests released for 4.3 M7 via: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=0e5525e75974b87507b4096f39e2bf9ccadfbfad</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2250912</commentid>
    <comment_count>43</comment_count>
    <who name="ANIRBAN CHAKRABORTY">anchakrk</who>
    <bug_when>2013-05-01 01:26:25 -0400</bug_when>
    <thetext>Verified for build SDK-I20130428-2000</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>227911</attachid>
            <date>2013-03-04 20:00:00 -0500</date>
            <delta_ts>2013-03-05 05:07:29 -0500</delta_ts>
            <desc>Tests to implement changes against</desc>
            <filename>clipboard.txt</filename>
            <type>text/plain</type>
            <size>8090</size>
            <attacher name="Jesper Moller">jesper</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMAojUCBvcmcuZWNsaXBzZS5qZHQuY29yZS50
ZXN0cy5jb21waWxlcgpkaWZmIC0tZ2l0IHNyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9j
b21waWxlci9yZWdyZXNzaW9uL0Fic3RyYWN0UmVncmVzc2lvblRlc3QuamF2YSBzcmMvb3JnL2Vj
bGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9BYnN0cmFjdFJlZ3Jlc3Np
b25UZXN0LmphdmEKaW5kZXggYzg4ZWI0Yy4uMGVkMjIzMCAxMDA2NDQKLS0tIHNyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0Fic3RyYWN0UmVncmVzc2lv
blRlc3QuamF2YQorKysgc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3Jl
Z3Jlc3Npb24vQWJzdHJhY3RSZWdyZXNzaW9uVGVzdC5qYXZhCkBAIC0xLDUgKzEsNSBAQAogLyoq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMSBJQk0gQ29y
cG9yYXRpb24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMyBJQk0gQ29y
cG9yYXRpb24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3Jh
bSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1
bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hp
Y2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKQEAg
LTgsNiArOCw3IEBACiAgKiBDb250cmlidXRvcnM6CiAgKiAgICAgSUJNIENvcnBvcmF0aW9uIC0g
aW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCiAgKiAgICAgU3RlcGhhbiBIZXJybWFubiAt
IENvbnRyaWJ1dGlvbiBmb3IgYnVnIDMzNTA5MyAtIFtjb21waWxlcl1bbnVsbF0gbWluaW1hbCBo
b29rIGZvciBmdXR1cmUgbnVsbCBhbm5vdGF0aW9uIHN1cHBvcnQKKyAqICAgICBKZXNwZXIgUyBN
b2xsZXIgLSBDb250cmlidXRpb25zIGZvciBidWcgMzc4Njc0IC0gIlRoZSBtZXRob2QgY2FuIGJl
IGRlY2xhcmVkIGFzIHN0YXRpYyIgaXMgd3JvbmcKICAqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwog
cGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci5yZWdyZXNzaW9uOwog
CkBAIC0xMTkzLDYgKzExOTQsMjggQEAKIAkJCS8vIGphdmFjIG9wdGlvbnMKIAkJCUphdmFjVGVz
dE9wdGlvbnMuREVGQVVMVCAvKiBkZWZhdWx0IGphdmFjIHRlc3Qgb3B0aW9ucyAqLyk7CiAJfQor
CXByb3RlY3RlZCB2b2lkIHJ1bkNvbmZvcm1UZXN0KFN0cmluZ1tdIHRlc3RGaWxlcywgTWFwIGN1
c3RvbU9wdGlvbnMpIHsKKwkJcnVuVGVzdCgKKwkJCS8vIHRlc3QgZGlyZWN0b3J5IHByZXBhcmF0
aW9uCisJCQl0cnVlIC8qIGZsdXNoIG91dHB1dCBkaXJlY3RvcnkgKi8sCisJCQl0ZXN0RmlsZXMg
LyogdGVzdCBmaWxlcyAqLywKKwkJCS8vIGNvbXBpbGVyIG9wdGlvbnMKKwkJCW51bGwgLyogbm8g
Y2xhc3MgbGlicmFyaWVzICovLAorCQkJY3VzdG9tT3B0aW9ucyAvKiBubyBjdXN0b20gb3B0aW9u
cyAqLywKKwkJCWZhbHNlIC8qIGRvIG5vdCBwZXJmb3JtIHN0YXRlbWVudHMgcmVjb3ZlcnkgKi8s
CisJCQludWxsIC8qIG5vIGN1c3RvbSByZXF1ZXN0b3IgKi8sCisJCQkvLyBjb21waWxlciByZXN1
bHRzCisJCQlmYWxzZSAvKiBleHBlY3Rpbmcgbm8gY29tcGlsZXIgZXJyb3JzICovLAorCQkJbnVs
bCAvKiBkbyBub3QgY2hlY2sgY29tcGlsZXIgbG9nICovLAorCQkJLy8gcnVudGltZSBvcHRpb25z
CisJCQlmYWxzZSAvKiBkbyBub3QgZm9yY2UgZXhlY3V0aW9uICovLAorCQkJbnVsbCAvKiBubyB2
bSBhcmd1bWVudHMgKi8sCisJCQkvLyBydW50aW1lIHJlc3VsdHMKKwkJCW51bGwgLyogZXhwZWN0
ZWQgb3V0cHV0IHN0cmluZyAqLywKKwkJCW51bGwgLyogZG8gbm90IGNoZWNrIGVycm9yIHN0cmlu
ZyAqLywKKwkJCS8vIGphdmFjIG9wdGlvbnMKKwkJCUphdmFjVGVzdE9wdGlvbnMuREVGQVVMVCAv
KiBkZWZhdWx0IGphdmFjIHRlc3Qgb3B0aW9ucyAqLyk7CisJfQogCXByb3RlY3RlZCB2b2lkIHJ1
bkNvbmZvcm1UZXN0KAogCQkJU3RyaW5nW10gdGVzdEZpbGVzLAogCQkJU3RyaW5nW10gZGVwZW5k
YW50RmlsZXMsCmRpZmYgLS1naXQgc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBp
bGVyL3JlZ3Jlc3Npb24vUHJvYmxlbVR5cGVBbmRNZXRob2RUZXN0LmphdmEgc3JjL29yZy9lY2xp
cHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vUHJvYmxlbVR5cGVBbmRNZXRo
b2RUZXN0LmphdmEKaW5kZXggOTE2MmFhNi4uNWIxMWNkMyAxMDA2NDQKLS0tIHNyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1Byb2JsZW1UeXBlQW5kTWV0
aG9kVGVzdC5qYXZhCisrKyBzcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIv
cmVncmVzc2lvbi9Qcm9ibGVtVHlwZUFuZE1ldGhvZFRlc3QuamF2YQpAQCAtMSw1ICsxLDUgQEAK
IC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTIgSUJN
IENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTMgSUJN
IENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHBy
b2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFi
bGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAq
IHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0
CkBAIC0xMSw2ICsxMSw4IEBACiAgKgkJCQkJCQkJYnVnIDMyODI4MSAtIHZpc2liaWxpdHkgbGVh
a3Mgbm90IGRldGVjdGVkIHdoZW4gYW5hbHl6aW5nIHVudXNlZCBmaWVsZCBpbiBwcml2YXRlIGNs
YXNzCiAgKgkJCQkJCQkJYnVnIDM3OTc4NCAtIFtjb21waWxlcl0gIk1ldGhvZCBjYW4gYmUgc3Rh
dGljIiBpcyBub3QgZ2V0dGluZyByZXBvcnRlZAogICoJCQkJCQkJCWJ1ZyAzNzk4MzQgLSBXcm9u
ZyAibWV0aG9kIGNhbiBiZSBzdGF0aWMiIGluIHByZXNlbmNlIG9mIHF1YWxpZmllZCBzdXBlciBh
bmQgZGlmZmVyZW50IHN0YXRpY25lc3Mgb2YgbmVzdGVkIHN1cGVyIGNsYXNzLgorICogICAgIEpl
c3BlciBTIE1vbGxlciA8amVzcGVyQHNlbHNrYWJldC5vcmc+IC0gQ29udHJpYnV0aW9ucyBmb3IK
KyAqCQkJCQkJCQlidWcgMzc4Njc0IC0gIlRoZSBtZXRob2QgY2FuIGJlIGRlY2xhcmVkIGFzIHN0
YXRpYyIgaXMgd3JvbmcKICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwogcGFja2FnZSBvcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci5yZWdyZXNzaW9uOwogCkBAIC04MTQ1LDQgKzgx
NDcsMTQ5IEBACiAJCWNvbXBpbGVyT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9S
ZXBvcnRSYXdUeXBlUmVmZXJlbmNlLCBvbGRPcHRpb24pOwogCX0KIH0KKy8vaHR0cHM6Ly9idWdz
LmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM3ODY3NAorLy9DYW4gYmUgc3RhdGlj
IHdhcm5pbmcgc2hvd24gaW4gdGhlIHdyb25nIHBsYWNlcworcHJpdmF0ZSB2b2lkIHJ1blN0YXRp
Y1dhcm5pbmdDb25mb3JtVGVzdChTdHJpbmcgZmlsZU5hbWUsIFN0cmluZyBib2R5KSB7CisJaWYg
KHRoaXMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNSkKKwkJcmV0
dXJuOworCU1hcCBjb21waWxlck9wdGlvbnMgPSBnZXRDb21waWxlck9wdGlvbnMoKTsKKwljb21w
aWxlck9wdGlvbnMucHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJT05fUmVwb3J0TWV0aG9kQ2FuQmVT
dGF0aWMsIENvbXBpbGVyT3B0aW9ucy5FUlJPUik7CisJY29tcGlsZXJPcHRpb25zLnB1dChDb21w
aWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydE1ldGhvZENhbkJlUG90ZW50aWFsbHlTdGF0aWMsIENv
bXBpbGVyT3B0aW9ucy5FUlJPUik7CisJdGhpcy5ydW5Db25mb3JtVGVzdCgKKwkJbmV3IFN0cmlu
Z1tdIHsKKwkJCWZpbGVOYW1lLCAKKwkJCWJvZHkKKwkJfSwKKwkJY29tcGlsZXJPcHRpb25zIC8q
IGN1c3RvbSBvcHRpb25zICovCisJKTsKK30KKy8vaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1
Z3Mvc2hvd19idWcuY2dpP2lkPTM3ODY3NAorLy9DYW4gYmUgc3RhdGljIHdhcm5pbmcgc2hvd24g
aW4gdGhlIHdyb25nIHBsYWNlcywgaS5lLiBpZiB0aGUgdHlwZSBwYXJhbWV0ZXIgaXMgdXNlZCBp
biB0aGUgc2lnbmF0dXJlCitwdWJsaWMgdm9pZCB0ZXN0Mzc4Njc0X2NvbW1lbnQwKCkgeworCXJ1
blN0YXRpY1dhcm5pbmdDb25mb3JtVGVzdCgKKwkJIlRlc3QuamF2YSIsIAorCQkicHVibGljIGNs
YXNzIFRlc3Q8VD4ge1xuIiArIAorCQkiXG4iICsgCisJCSIgICAgQFN1cHByZXNzV2FybmluZ3Mo
eyBcInVuY2hlY2tlZFwiLCBcInJhd3R5cGVzXCIgfSlcbiIgKyAKKwkJIiAgICBwdWJsaWMgc3Rh
dGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsgCisJCSIgICAgICAgIG5ldyBUZXN0
KCkubWV0aG9kKG51bGwpO1xuIiArIAorCQkiICAgIH1cbiIgKyAKKwkJIlxuIiArIAorCQkiICAg
IHByaXZhdGUgc3RhdGljIGNsYXNzIFN1YkNsYXNzPEE+IHtcbiIgKyAKKwkJIlxuIiArIAorCQki
ICAgIH1cbiIgKyAKKwkJIlxuIiArIAorCQkiICAgIHByaXZhdGUgdm9pZCBtZXRob2QoU3ViQ2xh
c3M8VD4gcykge1xuIiArIAorCQkiICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4ocyk7XG4iICsg
CisJCSIgICAgfVxuIiArIAorCQkiXG4iICsgCisJCSJ9XG4iICsgCisJCSIiCisJKTsKK30KKy8v
aHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM3ODY3NAorLy9D
YW4gYmUgc3RhdGljIHdhcm5pbmcgc2hvd24gaW4gdGhlIHdyb25nIHBsYWNlcworcHVibGljIHZv
aWQgdGVzdDM3ODY3NF9jb21tZW50MWIoKSB7CisJcnVuU3RhdGljV2FybmluZ0NvbmZvcm1UZXN0
KAorCQkiWC5qYXZhIiwgCisJCSJpbXBvcnQgamF2YS51dGlsLkNvbGxlY3Rpb247XG4iICsKKwkJ
ImNsYXNzIFg8RT57XG4iICsgCisJCSIgICBwdWJsaWMgZmluYWwgPEUxPiBDb2xsZWN0aW9uPEU+
IGdvKCkgeyAgLy8gY2Fubm90IGJlIHN0YXRpY1xuIiArIAorCQkiCQlyZXR1cm4gbnVsbDsgXG4i
ICsgCisJCSIgICB9XG4iICsgCisJCSJ9XG4iICsgCisJCSIiCisJKTsKK30KKy8vaHR0cHM6Ly9i
dWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM3ODY3NAorLy9DYW4gYmUgc3Rh
dGljIHdhcm5pbmcgc2hvd24gaW4gdGhlIHdyb25nIHBsYWNlcworcHVibGljIHZvaWQgdGVzdDM3
ODY3NF9jb21tZW50MWMoKSB7CisJcnVuU3RhdGljV2FybmluZ0NvbmZvcm1UZXN0KAorCQkiWC5q
YXZhIiwgCisJCSJpbXBvcnQgamF2YS51dGlsLkNvbGxlY3Rpb247XG4iICsKKwkJImltcG9ydCBq
YXZhLnV0aWwuQXJyYXlMaXN0O1xuIiArCisJCSIJY2xhc3MgWDxFPntcbiIgKyAKKwkJIiAgIHB1
YmxpYyBmaW5hbCA8RTE+IENvbGxlY3Rpb248Pz4gZ28oKSB7ICAvLyBjYW5ub3QgYmUgc3RhdGlj
XG4iICsgCisJCSIJCXJldHVybiBuZXcgQXJyYXlMaXN0PEU+KCk7IFxuIiArIAorCQkiICAgfVxu
IiArIAorCQkifVxuIiArIAorCQkiIgorCSk7Cit9CisvL2h0dHBzOi8vYnVncy5lY2xpcHNlLm9y
Zy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNzg2NzQKKy8vQ2FuIGJlIHN0YXRpYyB3YXJuaW5nIHNo
b3duIGluIHRoZSB3cm9uZyBwbGFjZXMKK3B1YmxpYyB2b2lkIHRlc3QzNzg2NzRfY29tbWVudDIo
KSB7CisJcnVuU3RhdGljV2FybmluZ0NvbmZvcm1UZXN0KAorCQkiWC5qYXZhIiwgCisJCSJwdWJs
aWMgY2xhc3MgWDxUPiB7XG4iICsgCisJCSIJcHVibGljIGZpbmFsIHZvaWQgZm9vKCkge1xuIiAr
IAorCQkiCQlqYXZhLnV0aWwuTGlzdDxUPiBrO1xuIiArIAorCQkiCX1cbiIgKyAKKwkJIn1cbiIg
KyAKKwkJIiIKKwkpOworfQorLy9odHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1
Zy5jZ2k/aWQ9Mzc4Njc0CisvL0NhbiBiZSBzdGF0aWMgd2FybmluZyBzaG93biBpbiB0aGUgd3Jv
bmcgcGxhY2VzCitwdWJsaWMgdm9pZCB0ZXN0Mzc4Njc0X2NvbW1lbnQzKCkgeworCXJ1blN0YXRp
Y1dhcm5pbmdDb25mb3JtVGVzdCgKKwkJIlRlc3QuamF2YSIsIAorCQkicHVibGljIGNsYXNzIFRl
c3Qge1xuIiArIAorCQkiCS8vZmFsc2UgcG9zaXRpdmUgb2YgbWV0aG9kIGNhbiBiZSBkZWNsYXJl
ZCBzdGF0aWNcbiIgKyAKKwkJIgl2b2lkIGJhcigpIHtcbiIgKyAKKwkJIgkJZm9vKFRlc3QudGhp
cyk7XG4iICsgCisJCSIJfVxuIiArIAorCQkiXG4iICsgCisJCSIJcHJpdmF0ZSBzdGF0aWMgdm9p
ZCBmb28oVGVzdCB0ZXN0KSB7XG4iICsgCisJCSIJCVN5c3RlbS5vdXQucHJpbnRsbih0ZXN0Lmdl
dENsYXNzKCkuZ2V0TmFtZSgpKTtcbiIgKyAKKwkJIgl9XG4iICsgCisJCSJ9XG4iICsgCisJCSIi
CisJKTsKK30KKy8vaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lk
PTM3ODY3NAorLy9DYW4gYmUgc3RhdGljIHdhcm5pbmcgc2hvd24gaW4gdGhlIHdyb25nIHBsYWNl
cworcHVibGljIHZvaWQgdGVzdDM3ODY3NF9jb21tZW50NWEoKSB7CisJcnVuU3RhdGljV2Fybmlu
Z0NvbmZvcm1UZXN0KAorCQkiVGVzdC5qYXZhIiwgCisJCSJwdWJsaWMgY2xhc3MgVGVzdDxUPiB7
XG4iICsgCisJCSJcbiIgKyAKKwkJIiAgICBAU3VwcHJlc3NXYXJuaW5ncyh7IFwidW5jaGVja2Vk
XCIsIFwicmF3dHlwZXNcIiB9KVxuIiArIAorCQkiICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBtYWlu
KFN0cmluZ1tdIGFyZ3MpIHtcbiIgKyAKKwkJIiAgICAgICAgbmV3IFRlc3QoKS5tZXRob2QyKG51
bGwpO1xuIiArIAorCQkiICAgIH1cbiIgKyAKKwkJIlxuIiArIAorCQkiICAgIHByaXZhdGUgc3Rh
dGljIGNsYXNzIFN1YkNsYXNzPEE+IHtcbiIgKyAKKwkJIlxuIiArIAorCQkiICAgIH1cbiIgKyAK
KwkJIlxuIiArIAorCQkiICAgIHByaXZhdGUgdm9pZCBtZXRob2QyKFN1YkNsYXNzPGphdmEudXRp
bC5MaXN0PFQ+PiBzKSB7XG4iICsgCisJCSIgICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihzKTtc
biIgKyAKKwkJIiAgICB9XG4iICsgCisJCSJcbiIgKyAKKwkJIn1cbiIgKyAKKwkJIiIKKwkpOwor
fQorLy9odHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9Mzc4Njc0
CisvL0NhbiBiZSBzdGF0aWMgd2FybmluZyBzaG93biBpbiB0aGUgd3JvbmcgcGxhY2VzLCBpLmUu
IGlmIHRoZSB0eXBlIHBhcmFtZXRlciBpcyB1c2VkIGluIHRoZSBzaWduYXR1cmUKK3B1YmxpYyB2
b2lkIHRlc3QzNzg2NzRfY29tbWVudDViKCkgeworCXJ1blN0YXRpY1dhcm5pbmdDb25mb3JtVGVz
dCgKKwkJIlRlc3QuamF2YSIsIAorCQkicHVibGljIGNsYXNzIFRlc3Q8VD4ge1xuIiArIAorCQki
XG4iICsgCisJCSIgICAgQFN1cHByZXNzV2FybmluZ3MoeyBcInVuY2hlY2tlZFwiLCBcInJhd3R5
cGVzXCIgfSlcbiIgKyAKKwkJIiAgICBwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBh
cmdzKSB7XG4iICsgCisJCSIgICAgICAgIG5ldyBUZXN0KCkubWV0aG9kKCk7XG4iICsgCisJCSIg
ICAgfVxuIiArIAorCQkiXG4iICsgCisJCSIgICAgcHJpdmF0ZSBqYXZhLnV0aWwuQ29sbGVjdGlv
bjxUPiBtZXRob2QoKSB7XG4iICsgCisJCSIgICAgICAgIHJldHVybiBudWxsO1xuIiArIAorCQki
ICAgIH1cbiIgKyAKKwkJIlxuIiArIAorCQkifVxuIiArIAorCQkiIgorCSk7Cit9CisKIH0=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>227912</attachid>
            <date>2013-03-04 20:32:00 -0500</date>
            <delta_ts>2013-03-04 20:40:44 -0500</delta_ts>
            <desc>Patch for reducing false positives for potential static-ness</desc>
            <filename>clipboard.txt</filename>
            <type>text/plain</type>
            <size>13064</size>
            <attacher name="Jesper Moller">jesper</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMA0KI1Agb3JnLmVjbGlwc2UuamR0LmNvcmUN
CmRpZmYgLS1naXQgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fz
dC9BbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YQ0KaW5kZXggODRhMGQ2
NC4uYzVhNTE5NCAxMDA2NDQNCi0tLSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvYXN0L0FsbG9jYXRpb25FeHByZXNzaW9uLmphdmENCisrKyBjb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FsbG9jYXRpb25FeHByZXNzaW9uLmph
dmENCkBAIC0xLDQgKzEsNCBAQA0KIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQotICogQ29weXJp
Z2h0IChjKSAyMDAwLCAyMDEyIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLg0KKyAqIENvcHly
aWdodCAoYykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4NCiAgKiBBbGwg
cmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJp
YWxzDQogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBz
ZSBQdWJsaWMgTGljZW5zZSB2MS4wDQpAQCAtMTgsNCArMTgsNiBAQA0KICAqCQkJCQkJCWJ1ZyAz
NDUzMDUgLSBbY29tcGlsZXJdW251bGxdIENvbXBpbGVyIG1pc2lkZW50aWZpZXMgYSBjYXNlIG9m
ICJ2YXJpYWJsZSBjYW4gb25seSBiZSBudWxsIg0KICAqCQkJCQkJCWJ1ZyAzODg5OTYgLSBbY29t
cGlsZXJdW3Jlc291cmNlXSBJbmNvcnJlY3QgJ3BvdGVudGlhbCByZXNvdXJjZSBsZWFrJw0KKyAq
ICAgICBKZXNwZXIgUyBNb2xsZXIgPGplc3BlckBzZWxza2FiZXQub3JnPiAtIENvbnRyaWJ1dGlv
bnMgZm9yDQorICoJCQkJCQkJCWJ1ZyAzNzg2NzQgLSAiVGhlIG1ldGhvZCBjYW4gYmUgZGVjbGFy
ZWQgYXMgc3RhdGljIiBpcyB3cm9uZw0KICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KIHBhY2th
Z2Ugb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdDsNCkBAIC00OSw0ICs1MSw2
IEBADQogCWNoZWNrQ2FwdHVyZWRMb2NhbEluaXRpYWxpemF0aW9uSWZOZWNlc3NhcnkoKFJlZmVy
ZW5jZUJpbmRpbmcpdGhpcy5iaW5kaW5nLmRlY2xhcmluZ0NsYXNzLmVyYXN1cmUoKSwgY3VycmVu
dFNjb3BlLCBmbG93SW5mbyk7DQogDQorCWlmICh0aGlzLnR5cGUucmVzb2x2ZWRUeXBlLmlzRGVw
ZW5kZW50T25UeXBlUGFyYW1ldGVyc0Zyb20oY3VycmVudFNjb3BlLnJlZmVyZW5jZVR5cGUoKS5i
aW5kaW5nKSkNCisJCWN1cnJlbnRTY29wZS5yZXNldEVuY2xvc2luZ01ldGhvZFN0YXRpY0ZsYWco
KTsNCiAJLy8gcHJvY2VzcyBhcmd1bWVudHMNCiAJaWYgKHRoaXMuYXJndW1lbnRzICE9IG51bGwp
IHsNCmRpZmYgLS1naXQgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FzdC9Mb2NhbERlY2xhcmF0aW9uLmphdmEgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2FzdC9Mb2NhbERlY2xhcmF0aW9uLmphdmENCmluZGV4IDk4OGJjNWMuLjRk
NzI4ZGIgMTAwNjQ0DQotLS0gY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9Mb2NhbERlY2xhcmF0aW9uLmphdmENCisrKyBjb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0xvY2FsRGVjbGFyYXRpb24uamF2YQ0KQEAgLTEsNCAr
MSw0IEBADQogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAs
IDIwMTIgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuDQorICogQ29weXJpZ2h0IChjKSAyMDAw
LCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLg0KICAqIEFsbCByaWdodHMgcmVzZXJ2
ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMNCiAgKiBhcmUg
bWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNl
bnNlIHYxLjANCkBAIC0yMSw0ICsyMSw2IEBADQogICoJCQkJCQkJYnVnIDM5NTAwMiAtIFNlbGYg
Ym91bmQgZ2VuZXJpYyBjbGFzcyBkb2Vzbid0IHJlc29sdmUgYm91bmRzIHByb3Blcmx5IGZvciB3
aWxkY2FyZHMgZm9yIGNlcnRhaW4gcGFyYW1ldHJpc2F0aW9uLg0KICAqCQkJCQkJCWJ1ZyAzODMz
NjggLSBbY29tcGlsZXJdW251bGxdIHN5bnRhY3RpYyBudWxsIGFuYWx5c2lzIGZvciBmaWVsZCBy
ZWZlcmVuY2VzDQorICogICAgIEplc3BlciBTIE1vbGxlciA8amVzcGVyQHNlbHNrYWJldC5vcmc+
IC0gQ29udHJpYnV0aW9ucyBmb3INCisgKgkJCQkJCQkJYnVnIDM3ODY3NCAtICJUaGUgbWV0aG9k
IGNhbiBiZSBkZWNsYXJlZCBhcyBzdGF0aWMiIGlzIHdyb25nDQogICoqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKiovDQogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0Ow0K
QEAgLTUxLDQgKzUzLDYgQEANCiAJCXRoaXMuYml0cyB8PSBBU1ROb2RlLklzTG9jYWxEZWNsYXJh
dGlvblJlYWNoYWJsZTsgLy8gb25seSBzZXQgaWYgYWN0dWFsbHkgcmVhY2hlZA0KIAl9DQorCWlm
ICh0aGlzLnR5cGUucmVzb2x2ZWRUeXBlLmlzRGVwZW5kZW50T25UeXBlUGFyYW1ldGVyc0Zyb20o
Y3VycmVudFNjb3BlLm1ldGhvZFNjb3BlKCkucmVmZXJlbmNlVHlwZSgpLmJpbmRpbmcpKQ0KKwkJ
Y3VycmVudFNjb3BlLnJlc2V0RW5jbG9zaW5nTWV0aG9kU3RhdGljRmxhZygpOw0KIAlpZiAodGhp
cy5iaW5kaW5nICE9IG51bGwgJiYgdGhpcy50eXBlLnJlc29sdmVkVHlwZSBpbnN0YW5jZW9mIFR5
cGVWYXJpYWJsZUJpbmRpbmcpIHsNCiAJCVR5cGVWYXJpYWJsZUJpbmRpbmcgdHlwZVZhcmlhYmxl
QmluZGluZyA9IChUeXBlVmFyaWFibGVCaW5kaW5nKSB0aGlzLnR5cGUucmVzb2x2ZWRUeXBlOw0K
ZGlmZiAtLWdpdCBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0
L01ldGhvZERlY2xhcmF0aW9uLmphdmEgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FzdC9NZXRob2REZWNsYXJhdGlvbi5qYXZhDQppbmRleCBjMTIxYzIyLi41ODI0
YzYxIDEwMDY0NA0KLS0tIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hc3QvTWV0aG9kRGVjbGFyYXRpb24uamF2YQ0KKysrIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvTWV0aG9kRGVjbGFyYXRpb24uamF2YQ0KQEAgLTEsNCAr
MSw0IEBADQogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAs
IDIwMTIgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuDQorICogQ29weXJpZ2h0IChjKSAyMDAw
LCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLg0KICAqIEFsbCByaWdodHMgcmVzZXJ2
ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMNCiAgKiBhcmUg
bWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNl
bnNlIHYxLjANCkBAIC0xNCw0ICsxNCw2IEBADQogICoJCQkJCQkJCWJ1ZyAzNjg1NDYgLSBbY29t
cGlsZXJdW3Jlc291cmNlXSBBdm9pZCByZW1haW5pbmcgZmFsc2UgcG9zaXRpdmVzIGZvdW5kIHdo
ZW4gY29tcGlsaW5nIHRoZSBFY2xpcHNlIFNESw0KICAqCQkJCQkJCQlidWcgMzgzMzY4IC0gW2Nv
bXBpbGVyXVtudWxsXSBzeW50YWN0aWMgbnVsbCBhbmFseXNpcyBmb3IgZmllbGQgcmVmZXJlbmNl
cw0KKyAqICAgICBKZXNwZXIgUyBNb2xsZXIgPGplc3BlckBzZWxza2FiZXQub3JnPiAtIENvbnRy
aWJ1dGlvbnMgZm9yDQorICoJCQkJCQkJCWJ1ZyAzNzg2NzQgLSAiVGhlIG1ldGhvZCBjYW4gYmUg
ZGVjbGFyZWQgYXMgc3RhdGljIiBpcyB3cm9uZw0KICAqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0K
IHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdDsNCkBAIC0yNSw1
ICsyNyw0IEBADQogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5mbG93
LkZsb3dJbmZvOw0KIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuaW1w
bC5Db21waWxlck9wdGlvbnM7DQotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21w
aWxlci5sb29rdXAuQmluZGluZzsNCiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNv
bXBpbGVyLmxvb2t1cC5DbGFzc1Njb3BlOw0KIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJu
YWwuY29tcGlsZXIubG9va3VwLkV4dHJhQ29tcGlsZXJNb2RpZmllcnM7DQpAQCAtMTAyLDExICsx
MDMsMjkgQEANCiAJCQkJCS8vIGlmIHRoaXMgbWV0aG9kIHVzZXMgYSB0eXBlIHBhcmFtZXRlciBk
ZWNsYXJlZCBieSB0aGUgZGVjbGFyaW5nIGNsYXNzLA0KIAkJCQkJLy8gaXQgY2FuJ3QgYmUgc3Rh
dGljLiBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzE4Njgy
DQotCQkJCQlpZiAodGhpcy5hcmd1bWVudHNbaV0uYmluZGluZyAhPSBudWxsICYmICh0aGlzLmFy
Z3VtZW50c1tpXS5iaW5kaW5nLnR5cGUgaW5zdGFuY2VvZiBUeXBlVmFyaWFibGVCaW5kaW5nKSkg
ew0KLQkJCQkJCUJpbmRpbmcgZGVjbGFyaW5nRWxlbWVudCA9ICgoVHlwZVZhcmlhYmxlQmluZGlu
Zyl0aGlzLmFyZ3VtZW50c1tpXS5iaW5kaW5nLnR5cGUpLmRlY2xhcmluZ0VsZW1lbnQ7DQotCQkJ
CQkJaWYgKHRoaXMuYmluZGluZyAhPSBudWxsICYmIHRoaXMuYmluZGluZy5kZWNsYXJpbmdDbGFz
cyA9PSBkZWNsYXJpbmdFbGVtZW50KQ0KLQkJCQkJCQl0aGlzLmJpdHMgJj0gfkFTVE5vZGUuQ2Fu
QmVTdGF0aWM7DQotCQkJCQl9DQorCQkJCQlpZiAodGhpcy5hcmd1bWVudHNbaV0uYmluZGluZyAh
PSBudWxsICYmIHRoaXMuYXJndW1lbnRzW2ldLmJpbmRpbmcudHlwZS5pc0RlcGVuZGVudE9uVHlw
ZVBhcmFtZXRlcnNGcm9tKHRoaXMuYmluZGluZy5kZWNsYXJpbmdDbGFzcykpIA0KKwkJCQkJCXRo
aXMuYml0cyAmPSB+QVNUTm9kZS5DYW5CZVN0YXRpYzsNCiAJCQkJfQ0KIAkJCX0NCisJCQlpZiAo
dGhpcy5iaW5kaW5nLnJldHVyblR5cGUuaXNEZXBlbmRlbnRPblR5cGVQYXJhbWV0ZXJzRnJvbSh0
aGlzLmJpbmRpbmcuZGVjbGFyaW5nQ2xhc3MpKQ0KKwkJCQl0aGlzLmJpdHMgJj0gfkFTVE5vZGUu
Q2FuQmVTdGF0aWM7DQorLy8JCQkJCSE9IG51bGwgJiYgKHRoaXMuYXJndW1lbnRzW2ldLmJpbmRp
bmcudHlwZSBpbnN0YW5jZW9mIFR5cGVWYXJpYWJsZUJpbmRpbmcpKSB7DQorLy8JCQkJCQlCaW5k
aW5nIGRlY2xhcmluZ0VsZW1lbnQgPSAoKFR5cGVWYXJpYWJsZUJpbmRpbmcpdGhpcy5hcmd1bWVu
dHNbaV0uYmluZGluZy50eXBlKS5kZWNsYXJpbmdFbGVtZW50Ow0KKy8vCQkJCQkJaWYgKHRoaXMu
YmluZGluZyAhPSBudWxsICYmIHRoaXMuYmluZGluZy5kZWNsYXJpbmdDbGFzcyA9PSBkZWNsYXJp
bmdFbGVtZW50KQ0KKy8vCQkJCQkJCXRoaXMuYml0cyAmPSB+QVNUTm9kZS5DYW5CZVN0YXRpYzsN
CisvLwkJCQkJfSBlbHNlIGlmICh0aGlzLmFyZ3VtZW50c1tpXS5iaW5kaW5nICE9IG51bGwgJiYg
KHRoaXMuYXJndW1lbnRzW2ldLmJpbmRpbmcudHlwZSBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRU
eXBlQmluZGluZykpIHsNCisvLwkJCQkJCS8vIG9yLCBpZiB0aGlzIGlmIHRoaXMgbWV0aG9kIHVz
ZXMgYSBwYXJhbWV0ZXJpemVkIHR5cGUsIHRoZW4gDQorLy8JCQkJCQkvLyBpdCBjYW4ndCBiZSBz
dGF0aWMuIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNzg2
NzQNCisvLwkJCQkJCVBhcmFtZXRlcml6ZWRUeXBlQmluZGluZyBwYXJhbWV0ZXJpemVkVHlwZUJp
bmRpbmcgPSAoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nKXRoaXMuYXJndW1lbnRzW2ldLmJpbmRp
bmcudHlwZTsNCisvLwkJCQkJCWludCBhcmd1bWVudHNMZW5ndGggPSBwYXJhbWV0ZXJpemVkVHlw
ZUJpbmRpbmcuYXJndW1lbnRzICE9IG51bGwgPyBwYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcuYXJn
dW1lbnRzLmxlbmd0aCA6IDA7DQorLy8JCQkJCQlmb3IgKGludCBqID0gMDsgaiA8IGFyZ3VtZW50
c0xlbmd0aDsgaisrKSB7DQorLy8JCQkJCQkJVHlwZUJpbmRpbmcgYXJndW1lbnRCaW5kaW5nID0g
cGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nLmFyZ3VtZW50c1tqXTsNCisvLwkJCQkJCQlpZiAoYXJn
dW1lbnRCaW5kaW5nIGluc3RhbmNlb2YgVHlwZVZhcmlhYmxlQmluZGluZykgew0KKy8vCQkJCQkJ
CQlpZiAodGhpcy5iaW5kaW5nICE9IG51bGwgJiYgdGhpcy5iaW5kaW5nLmRlY2xhcmluZ0NsYXNz
ID09ICgoVHlwZVZhcmlhYmxlQmluZGluZylhcmd1bWVudEJpbmRpbmcpLmRlY2xhcmluZ0VsZW1l
bnQpDQorLy8JCQkJCQkJCQl0aGlzLmJpdHMgJj0gfkFTVE5vZGUuQ2FuQmVTdGF0aWM7DQorLy8J
CQkJCQkJfQ0KKy8vCQkJCQkJfQ0KKy8vCQkJCQl9DQorLy8JCQkJfQ0KKy8vCQkJfQ0KIAkJCWlm
ICh0aGlzLmJpbmRpbmcuZGVjbGFyaW5nQ2xhc3MgaW5zdGFuY2VvZiBNZW1iZXJUeXBlQmluZGlu
ZyAmJiAhdGhpcy5iaW5kaW5nLmRlY2xhcmluZ0NsYXNzLmlzU3RhdGljKCkpIHsNCiAJCQkJLy8g
bWV0aG9kIG9mIGEgbm9uLXN0YXRpYyBtZW1iZXIgdHlwZSBjYW4ndCBiZSBzdGF0aWMuDQpkaWZm
IC0tZ2l0IGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUXVh
bGlmaWVkVGhpc1JlZmVyZW5jZS5qYXZhIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hc3QvUXVhbGlmaWVkVGhpc1JlZmVyZW5jZS5qYXZhDQppbmRleCAxMGU5NjRj
Li5iZDRlN2YzIDEwMDY0NA0KLS0tIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hc3QvUXVhbGlmaWVkVGhpc1JlZmVyZW5jZS5qYXZhDQorKysgY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9RdWFsaWZpZWRUaGlzUmVmZXJlbmNl
LmphdmENCkBAIC0xLDQgKzEsNCBAQA0KIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQotICogQ29w
eXJpZ2h0IChjKSAyMDAwLCAyMDA4IElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLg0KKyAqIENv
cHlyaWdodCAoYykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4NCiAgKiBB
bGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0
ZXJpYWxzDQogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNs
aXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wDQpAQCAtOCw0ICs4LDYgQEANCiAgKiBDb250cmlidXRv
cnM6DQogICogICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRh
dGlvbg0KKyAqICAgICBKZXNwZXIgUyBNb2xsZXIgPGplc3BlckBzZWxza2FiZXQub3JnPiAtIENv
bnRyaWJ1dGlvbnMgZm9yDQorICoJCQkJCQkJYnVnIDM3ODY3NCAtICJUaGUgbWV0aG9kIGNhbiBi
ZSBkZWNsYXJlZCBhcyBzdGF0aWMiIGlzIHdyb25nDQogICoqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiov
DQogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0Ow0KQEAgLTM0
LDQgKzM2LDUgQEANCiAJCUZsb3dJbmZvIGZsb3dJbmZvKSB7DQogDQorCQljdXJyZW50U2NvcGUu
cmVzZXRFbmNsb3NpbmdNZXRob2RTdGF0aWNGbGFnKCk7IC8vIEFueSB0aGlzIHJlZmVyZW5jZSB3
b3VsZCBwcmVjbHVkZSB0aGlzDQogCQlyZXR1cm4gZmxvd0luZm87DQogCX0NCkBAIC00Myw1ICs0
Niw1IEBADQogCQlib29sZWFuIHZhbHVlUmVxdWlyZWQpIHsNCiANCi0JCXJldHVybiBmbG93SW5m
bzsNCisJCXJldHVybiBhbmFseXNlQ29kZShjdXJyZW50U2NvcGUsIGZsb3dDb250ZXh0LCBmbG93
SW5mbyk7DQogCX0NCiANCmRpZmYgLS1naXQgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9QYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcuamF2YSBjb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1BhcmFtZXRlcml6ZWRU
eXBlQmluZGluZy5qYXZhDQppbmRleCBkODg3ZDZkLi45NTVjMzZkIDEwMDY0NA0KLS0tIGNvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUGFyYW1ldGVyaXpl
ZFR5cGVCaW5kaW5nLmphdmENCisrKyBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvbG9va3VwL1BhcmFtZXRlcml6ZWRUeXBlQmluZGluZy5qYXZhDQpAQCAtMSw0ICsx
LDQgQEANCiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KLSAqIENvcHlyaWdodCAoYykgMjAwNSwg
MjAxMiBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4NCisgKiBDb3B5cmlnaHQgKGMpIDIwMDUs
IDIwMTMgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuDQogICogQWxsIHJpZ2h0cyByZXNlcnZl
ZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscw0KICAqIGFyZSBt
YWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vu
c2UgdjEuMA0KQEAgLTExLDQgKzExLDYgQEANCiAgKgkJCQkJCQkJYnVnIDM0OTMyNiAtIFsxLjdd
IG5ldyB3YXJuaW5nIGZvciBtaXNzaW5nIHRyeS13aXRoLXJlc291cmNlcw0KICAqCQkJCQkJCQli
dWcgMzk1MDAyIC0gU2VsZiBib3VuZCBnZW5lcmljIGNsYXNzIGRvZXNuJ3QgcmVzb2x2ZSBib3Vu
ZHMgcHJvcGVybHkgZm9yIHdpbGRjYXJkcyBmb3IgY2VydGFpbiBwYXJhbWV0cmlzYXRpb24uDQor
ICogICAgIEplc3BlciBTIE1vbGxlciA8amVzcGVyQHNlbHNrYWJldC5vcmc+IC0gQ29udHJpYnV0
aW9ucyBmb3INCisgKgkJCQkJCQkJYnVnIDM3ODY3NCAtICJUaGUgbWV0aG9kIGNhbiBiZSBkZWNs
YXJlZCBhcyBzdGF0aWMiIGlzIHdyb25nDQogICoqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovDQogcGFj
a2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwOw0KQEAgLTExMzQs
MyArMTEzNiwxMiBAQA0KIAkJcmV0dXJuIHRoaXMuZmllbGRzOw0KIAl9DQorCQ0KKwlwdWJsaWMg
Ym9vbGVhbiBpc0RlcGVuZGVudE9uVHlwZVBhcmFtZXRlcnNGcm9tKFJlZmVyZW5jZUJpbmRpbmcg
ZGVjbGFyaW5nQ2xhc3MpIHsNCisJCWlmICh0aGlzLmFyZ3VtZW50cyAhPSBudWxsKSB7DQorCQkJ
Zm9yIChpbnQgaSA9IDAsIGwgPSB0aGlzLmFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsOyBpKyspIHsN
CisJCQkJaWYgKHRoaXMuYXJndW1lbnRzW2ldLmlzRGVwZW5kZW50T25UeXBlUGFyYW1ldGVyc0Zy
b20oZGVjbGFyaW5nQ2xhc3MpKSByZXR1cm4gdHJ1ZTsNCisJCQl9DQorCQl9DQorCQlyZXR1cm4g
ZmFsc2U7DQorCX0NCiB9DQpkaWZmIC0tZ2l0IGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9sb29rdXAvVHlwZUJpbmRpbmcuamF2YSBjb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1R5cGVCaW5kaW5nLmphdmENCmluZGV4IDk5
M2NhYTEuLmJiNTA2ZGEgMTAwNjQ0DQotLS0gY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9UeXBlQmluZGluZy5qYXZhDQorKysgY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9UeXBlQmluZGluZy5qYXZhDQpAQCAt
MSw0ICsxLDQgQEANCiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KLSAqIENvcHlyaWdodCAoYykg
MjAwMCwgMjAxMSBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4NCisgKiBDb3B5cmlnaHQgKGMp
IDIwMDAsIDIwMTMgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuDQogICogQWxsIHJpZ2h0cyBy
ZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscw0KICAq
IGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGlj
IExpY2Vuc2UgdjEuMA0KQEAgLTExLDQgKzExLDYgQEANCiAgKgkJCQkJCQkJYnVnIDMxNzA0NiAt
IEV4Y2VwdGlvbiBkdXJpbmcgZGVidWdnaW5nIHdoZW4gaG92ZXIgbW91c2Ugb3ZlciBhIGZpZWxk
DQogICoJCQkJCQkJCWJ1ZyAzOTUwMDIgLSBTZWxmIGJvdW5kIGdlbmVyaWMgY2xhc3MgZG9lc24n
dCByZXNvbHZlIGJvdW5kcyBwcm9wZXJseSBmb3Igd2lsZGNhcmRzIGZvciBjZXJ0YWluIHBhcmFt
ZXRyaXNhdGlvbi4NCisgKiAgICAgSmVzcGVyIFMgTW9sbGVyIDxqZXNwZXJAc2Vsc2thYmV0Lm9y
Zz4gLSBDb250cmlidXRpb25zIGZvcg0KKyAqCQkJCQkJCQlidWcgMzc4Njc0IC0gIlRoZSBtZXRo
b2QgY2FuIGJlIGRlY2xhcmVkIGFzIHN0YXRpYyIgaXMgd3JvbmcNCiAgKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKi8NCiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29r
dXA7DQpAQCAtMTIxOCwzICsxMjIwLDEyIEBADQogCXJldHVybiBCaW5kaW5nLk5PX1RZUEVfVkFS
SUFCTEVTOw0KIH0NCisNCisvKioNCisgKiBTZWFyY2ggZm9yIHVzZXMgb2YgdHlwZXMgcmVsYXRl
ZCBkaXJlY3RseSB0byBkZWNsYXJpbmdDbGFzcy4NCisgKiBAcGFyYW0gZGVjbGFyaW5nQ2xhc3Mg
DQorICogQHJldHVybiB3aGV0aGVyIHRoaXMgdHlwZSBiaW5kaW5nIGlzIHJlbGF0ZWQNCisgKi8N
CitwdWJsaWMgYm9vbGVhbiBpc0RlcGVuZGVudE9uVHlwZVBhcmFtZXRlcnNGcm9tKFJlZmVyZW5j
ZUJpbmRpbmcgZGVjbGFyaW5nQ2xhc3MpIHsNCisJcmV0dXJuIGZhbHNlOw0KK30NCiB9DQpkaWZm
IC0tZ2l0IGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAv
VHlwZVZhcmlhYmxlQmluZGluZy5qYXZhIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9sb29rdXAvVHlwZVZhcmlhYmxlQmluZGluZy5qYXZhDQppbmRleCBhY2I3M2Yw
Li42YmNkMjMyIDEwMDY0NA0KLS0tIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9sb29rdXAvVHlwZVZhcmlhYmxlQmluZGluZy5qYXZhDQorKysgY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9UeXBlVmFyaWFibGVCaW5kaW5n
LmphdmENCkBAIC0xLDQgKzEsNCBAQA0KIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQotICogQ29w
eXJpZ2h0IChjKSAyMDAwLCAyMDEyIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLg0KKyAqIENv
cHlyaWdodCAoYykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4NCiAgKiBB
bGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0
ZXJpYWxzDQogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNs
aXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wDQpAQCAtMTQsNCArMTQsNiBAQA0KICAqCQkJCQkJCQli
dWcgMzU4OTAzIC0gRmlsdGVyIHByYWN0aWNhbGx5IHVuaW1wb3J0YW50IHJlc291cmNlIGxlYWsg
d2FybmluZ3MNCiAgKgkJCQkJCQkJYnVnIDM5NTAwMiAtIFNlbGYgYm91bmQgZ2VuZXJpYyBjbGFz
cyBkb2Vzbid0IHJlc29sdmUgYm91bmRzIHByb3Blcmx5IGZvciB3aWxkY2FyZHMgZm9yIGNlcnRh
aW4gcGFyYW1ldHJpc2F0aW9uLg0KKyAqICAgICBKZXNwZXIgUyBNb2xsZXIgPGplc3BlckBzZWxz
a2FiZXQub3JnPiAtIENvbnRyaWJ1dGlvbnMgZm9yDQorICoJCQkJCQkJCWJ1ZyAzNzg2NzQgLSAi
VGhlIG1ldGhvZCBjYW4gYmUgZGVjbGFyZWQgYXMgc3RhdGljIiBpcyB3cm9uZw0KICAqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqLw0KIHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBp
bGVyLmxvb2t1cDsNCkBAIC01MTMsMyArNTE1LDggQEANCiAJCXJldHVybiB0aGlzLnN1cGVyY2xh
c3M7IC8vIGphdmEvbGFuZy9PYmplY3QNCiAJfQ0KKwkNCisJcHVibGljIGJvb2xlYW4gaXNEZXBl
bmRlbnRPblR5cGVQYXJhbWV0ZXJzRnJvbShSZWZlcmVuY2VCaW5kaW5nIGRlY2xhcmluZ0NsYXNz
KSB7DQorCQlyZXR1cm4gdGhpcy5kZWNsYXJpbmdFbGVtZW50ID09IGRlY2xhcmluZ0NsYXNzOyAN
CisJfQ0KKw0KIH0=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>227913</attachid>
            <date>2013-03-04 20:41:00 -0500</date>
            <delta_ts>2013-03-05 05:07:30 -0500</delta_ts>
            <desc>Dang, patch had a regression for enums, fixed now</desc>
            <filename>clipboard.txt</filename>
            <type>text/plain</type>
            <size>12862</size>
            <attacher name="Jesper Moller">jesper</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMAojUCBvcmcuZWNsaXBzZS5qZHQuY29yZQpk
aWZmIC0tZ2l0IGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3Qv
QWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXN0L0FsbG9jYXRpb25FeHByZXNzaW9uLmphdmEKaW5kZXggODRhMGQ2NC4u
MzY4ODM5MyAxMDA2NDQKLS0tIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YQorKysgY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCkBA
IC0xLDQgKzEsNCBAQAogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykg
MjAwMCwgMjAxMiBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykg
MjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVz
ZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFy
ZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExp
Y2Vuc2UgdjEuMApAQCAtMTgsNCArMTgsNiBAQAogICoJCQkJCQkJYnVnIDM0NTMwNSAtIFtjb21w
aWxlcl1bbnVsbF0gQ29tcGlsZXIgbWlzaWRlbnRpZmllcyBhIGNhc2Ugb2YgInZhcmlhYmxlIGNh
biBvbmx5IGJlIG51bGwiCiAgKgkJCQkJCQlidWcgMzg4OTk2IC0gW2NvbXBpbGVyXVtyZXNvdXJj
ZV0gSW5jb3JyZWN0ICdwb3RlbnRpYWwgcmVzb3VyY2UgbGVhaycKKyAqICAgICBKZXNwZXIgUyBN
b2xsZXIgPGplc3BlckBzZWxza2FiZXQub3JnPiAtIENvbnRyaWJ1dGlvbnMgZm9yCisgKgkJCQkJ
CQkJYnVnIDM3ODY3NCAtICJUaGUgbWV0aG9kIGNhbiBiZSBkZWNsYXJlZCBhcyBzdGF0aWMiIGlz
IHdyb25nCiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KIHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0
LmludGVybmFsLmNvbXBpbGVyLmFzdDsKQEAgLTQ5LDQgKzUxLDYgQEAKIAljaGVja0NhcHR1cmVk
TG9jYWxJbml0aWFsaXphdGlvbklmTmVjZXNzYXJ5KChSZWZlcmVuY2VCaW5kaW5nKXRoaXMuYmlu
ZGluZy5kZWNsYXJpbmdDbGFzcy5lcmFzdXJlKCksIGN1cnJlbnRTY29wZSwgZmxvd0luZm8pOwog
CisJaWYgKHRoaXMudHlwZSAhPSBudWxsICYmIHRoaXMudHlwZS5yZXNvbHZlZFR5cGUuaXNEZXBl
bmRlbnRPblR5cGVQYXJhbWV0ZXJzRnJvbShjdXJyZW50U2NvcGUucmVmZXJlbmNlVHlwZSgpLmJp
bmRpbmcpKQorCQljdXJyZW50U2NvcGUucmVzZXRFbmNsb3NpbmdNZXRob2RTdGF0aWNGbGFnKCk7
CiAJLy8gcHJvY2VzcyBhcmd1bWVudHMKIAlpZiAodGhpcy5hcmd1bWVudHMgIT0gbnVsbCkgewpk
aWZmIC0tZ2l0IGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3Qv
TG9jYWxEZWNsYXJhdGlvbi5qYXZhIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hc3QvTG9jYWxEZWNsYXJhdGlvbi5qYXZhCmluZGV4IDk4OGJjNWMuLjRkNzI4ZGIg
MTAwNjQ0Ci0tLSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0
L0xvY2FsRGVjbGFyYXRpb24uamF2YQorKysgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2FzdC9Mb2NhbERlY2xhcmF0aW9uLmphdmEKQEAgLTEsNCArMSw0IEBACiAv
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEyIElCTSBD
b3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEzIElCTSBD
b3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9n
cmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxl
IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCkBAIC0y
MSw0ICsyMSw2IEBACiAgKgkJCQkJCQlidWcgMzk1MDAyIC0gU2VsZiBib3VuZCBnZW5lcmljIGNs
YXNzIGRvZXNuJ3QgcmVzb2x2ZSBib3VuZHMgcHJvcGVybHkgZm9yIHdpbGRjYXJkcyBmb3IgY2Vy
dGFpbiBwYXJhbWV0cmlzYXRpb24uCiAgKgkJCQkJCQlidWcgMzgzMzY4IC0gW2NvbXBpbGVyXVtu
dWxsXSBzeW50YWN0aWMgbnVsbCBhbmFseXNpcyBmb3IgZmllbGQgcmVmZXJlbmNlcworICogICAg
IEplc3BlciBTIE1vbGxlciA8amVzcGVyQHNlbHNrYWJldC5vcmc+IC0gQ29udHJpYnV0aW9ucyBm
b3IKKyAqCQkJCQkJCQlidWcgMzc4Njc0IC0gIlRoZSBtZXRob2QgY2FuIGJlIGRlY2xhcmVkIGFz
IHN0YXRpYyIgaXMgd3JvbmcKICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwogcGFja2FnZSBvcmcu
ZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0OwpAQCAtNTEsNCArNTMsNiBAQAogCQl0
aGlzLmJpdHMgfD0gQVNUTm9kZS5Jc0xvY2FsRGVjbGFyYXRpb25SZWFjaGFibGU7IC8vIG9ubHkg
c2V0IGlmIGFjdHVhbGx5IHJlYWNoZWQKIAl9CisJaWYgKHRoaXMudHlwZS5yZXNvbHZlZFR5cGUu
aXNEZXBlbmRlbnRPblR5cGVQYXJhbWV0ZXJzRnJvbShjdXJyZW50U2NvcGUubWV0aG9kU2NvcGUo
KS5yZWZlcmVuY2VUeXBlKCkuYmluZGluZykpCisJCWN1cnJlbnRTY29wZS5yZXNldEVuY2xvc2lu
Z01ldGhvZFN0YXRpY0ZsYWcoKTsKIAlpZiAodGhpcy5iaW5kaW5nICE9IG51bGwgJiYgdGhpcy50
eXBlLnJlc29sdmVkVHlwZSBpbnN0YW5jZW9mIFR5cGVWYXJpYWJsZUJpbmRpbmcpIHsKIAkJVHlw
ZVZhcmlhYmxlQmluZGluZyB0eXBlVmFyaWFibGVCaW5kaW5nID0gKFR5cGVWYXJpYWJsZUJpbmRp
bmcpIHRoaXMudHlwZS5yZXNvbHZlZFR5cGU7CmRpZmYgLS1naXQgY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9NZXRob2REZWNsYXJhdGlvbi5qYXZhIGNvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTWV0aG9kRGVjbGFyYXRp
b24uamF2YQppbmRleCBjMTIxYzIyLi41ODI0YzYxIDEwMDY0NAotLS0gY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9NZXRob2REZWNsYXJhdGlvbi5qYXZhCisr
KyBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L01ldGhvZERl
Y2xhcmF0aW9uLmphdmEKQEAgLTEsNCArMSw0IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgot
ICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEyIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgor
ICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgog
ICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5n
IG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUg
RWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCkBAIC0xNCw0ICsxNCw2IEBACiAgKgkJCQkJCQkJ
YnVnIDM2ODU0NiAtIFtjb21waWxlcl1bcmVzb3VyY2VdIEF2b2lkIHJlbWFpbmluZyBmYWxzZSBw
b3NpdGl2ZXMgZm91bmQgd2hlbiBjb21waWxpbmcgdGhlIEVjbGlwc2UgU0RLCiAgKgkJCQkJCQkJ
YnVnIDM4MzM2OCAtIFtjb21waWxlcl1bbnVsbF0gc3ludGFjdGljIG51bGwgYW5hbHlzaXMgZm9y
IGZpZWxkIHJlZmVyZW5jZXMKKyAqICAgICBKZXNwZXIgUyBNb2xsZXIgPGplc3BlckBzZWxza2Fi
ZXQub3JnPiAtIENvbnRyaWJ1dGlvbnMgZm9yCisgKgkJCQkJCQkJYnVnIDM3ODY3NCAtICJUaGUg
bWV0aG9kIGNhbiBiZSBkZWNsYXJlZCBhcyBzdGF0aWMiIGlzIHdyb25nCiAgKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKi8KIHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFz
dDsKQEAgLTI1LDUgKzI3LDQgQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29t
cGlsZXIuZmxvdy5GbG93SW5mbzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29t
cGlsZXIuaW1wbC5Db21waWxlck9wdGlvbnM7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVy
bmFsLmNvbXBpbGVyLmxvb2t1cC5CaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRl
cm5hbC5jb21waWxlci5sb29rdXAuQ2xhc3NTY29wZTsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkV4dHJhQ29tcGlsZXJNb2RpZmllcnM7CkBAIC0xMDIs
MTEgKzEwMywyOSBAQAogCQkJCQkvLyBpZiB0aGlzIG1ldGhvZCB1c2VzIGEgdHlwZSBwYXJhbWV0
ZXIgZGVjbGFyZWQgYnkgdGhlIGRlY2xhcmluZyBjbGFzcywKIAkJCQkJLy8gaXQgY2FuJ3QgYmUg
c3RhdGljLiBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzE4
NjgyCi0JCQkJCWlmICh0aGlzLmFyZ3VtZW50c1tpXS5iaW5kaW5nICE9IG51bGwgJiYgKHRoaXMu
YXJndW1lbnRzW2ldLmJpbmRpbmcudHlwZSBpbnN0YW5jZW9mIFR5cGVWYXJpYWJsZUJpbmRpbmcp
KSB7Ci0JCQkJCQlCaW5kaW5nIGRlY2xhcmluZ0VsZW1lbnQgPSAoKFR5cGVWYXJpYWJsZUJpbmRp
bmcpdGhpcy5hcmd1bWVudHNbaV0uYmluZGluZy50eXBlKS5kZWNsYXJpbmdFbGVtZW50OwotCQkJ
CQkJaWYgKHRoaXMuYmluZGluZyAhPSBudWxsICYmIHRoaXMuYmluZGluZy5kZWNsYXJpbmdDbGFz
cyA9PSBkZWNsYXJpbmdFbGVtZW50KQotCQkJCQkJCXRoaXMuYml0cyAmPSB+QVNUTm9kZS5DYW5C
ZVN0YXRpYzsKLQkJCQkJfQorCQkJCQlpZiAodGhpcy5hcmd1bWVudHNbaV0uYmluZGluZyAhPSBu
dWxsICYmIHRoaXMuYXJndW1lbnRzW2ldLmJpbmRpbmcudHlwZS5pc0RlcGVuZGVudE9uVHlwZVBh
cmFtZXRlcnNGcm9tKHRoaXMuYmluZGluZy5kZWNsYXJpbmdDbGFzcykpIAorCQkJCQkJdGhpcy5i
aXRzICY9IH5BU1ROb2RlLkNhbkJlU3RhdGljOwogCQkJCX0KIAkJCX0KKwkJCWlmICh0aGlzLmJp
bmRpbmcucmV0dXJuVHlwZS5pc0RlcGVuZGVudE9uVHlwZVBhcmFtZXRlcnNGcm9tKHRoaXMuYmlu
ZGluZy5kZWNsYXJpbmdDbGFzcykpCisJCQkJdGhpcy5iaXRzICY9IH5BU1ROb2RlLkNhbkJlU3Rh
dGljOworLy8JCQkJCSE9IG51bGwgJiYgKHRoaXMuYXJndW1lbnRzW2ldLmJpbmRpbmcudHlwZSBp
bnN0YW5jZW9mIFR5cGVWYXJpYWJsZUJpbmRpbmcpKSB7CisvLwkJCQkJCUJpbmRpbmcgZGVjbGFy
aW5nRWxlbWVudCA9ICgoVHlwZVZhcmlhYmxlQmluZGluZyl0aGlzLmFyZ3VtZW50c1tpXS5iaW5k
aW5nLnR5cGUpLmRlY2xhcmluZ0VsZW1lbnQ7CisvLwkJCQkJCWlmICh0aGlzLmJpbmRpbmcgIT0g
bnVsbCAmJiB0aGlzLmJpbmRpbmcuZGVjbGFyaW5nQ2xhc3MgPT0gZGVjbGFyaW5nRWxlbWVudCkK
Ky8vCQkJCQkJCXRoaXMuYml0cyAmPSB+QVNUTm9kZS5DYW5CZVN0YXRpYzsKKy8vCQkJCQl9IGVs
c2UgaWYgKHRoaXMuYXJndW1lbnRzW2ldLmJpbmRpbmcgIT0gbnVsbCAmJiAodGhpcy5hcmd1bWVu
dHNbaV0uYmluZGluZy50eXBlIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nKSkg
eworLy8JCQkJCQkvLyBvciwgaWYgdGhpcyBpZiB0aGlzIG1ldGhvZCB1c2VzIGEgcGFyYW1ldGVy
aXplZCB0eXBlLCB0aGVuIAorLy8JCQkJCQkvLyBpdCBjYW4ndCBiZSBzdGF0aWMuIGh0dHBzOi8v
YnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNzg2NzQKKy8vCQkJCQkJUGFy
YW1ldGVyaXplZFR5cGVCaW5kaW5nIHBhcmFtZXRlcml6ZWRUeXBlQmluZGluZyA9IChQYXJhbWV0
ZXJpemVkVHlwZUJpbmRpbmcpdGhpcy5hcmd1bWVudHNbaV0uYmluZGluZy50eXBlOworLy8JCQkJ
CQlpbnQgYXJndW1lbnRzTGVuZ3RoID0gcGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nLmFyZ3VtZW50
cyAhPSBudWxsID8gcGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nLmFyZ3VtZW50cy5sZW5ndGggOiAw
OworLy8JCQkJCQlmb3IgKGludCBqID0gMDsgaiA8IGFyZ3VtZW50c0xlbmd0aDsgaisrKSB7Cisv
LwkJCQkJCQlUeXBlQmluZGluZyBhcmd1bWVudEJpbmRpbmcgPSBwYXJhbWV0ZXJpemVkVHlwZUJp
bmRpbmcuYXJndW1lbnRzW2pdOworLy8JCQkJCQkJaWYgKGFyZ3VtZW50QmluZGluZyBpbnN0YW5j
ZW9mIFR5cGVWYXJpYWJsZUJpbmRpbmcpIHsKKy8vCQkJCQkJCQlpZiAodGhpcy5iaW5kaW5nICE9
IG51bGwgJiYgdGhpcy5iaW5kaW5nLmRlY2xhcmluZ0NsYXNzID09ICgoVHlwZVZhcmlhYmxlQmlu
ZGluZylhcmd1bWVudEJpbmRpbmcpLmRlY2xhcmluZ0VsZW1lbnQpCisvLwkJCQkJCQkJCXRoaXMu
Yml0cyAmPSB+QVNUTm9kZS5DYW5CZVN0YXRpYzsKKy8vCQkJCQkJCX0KKy8vCQkJCQkJfQorLy8J
CQkJCX0KKy8vCQkJCX0KKy8vCQkJfQogCQkJaWYgKHRoaXMuYmluZGluZy5kZWNsYXJpbmdDbGFz
cyBpbnN0YW5jZW9mIE1lbWJlclR5cGVCaW5kaW5nICYmICF0aGlzLmJpbmRpbmcuZGVjbGFyaW5n
Q2xhc3MuaXNTdGF0aWMoKSkgewogCQkJCS8vIG1ldGhvZCBvZiBhIG5vbi1zdGF0aWMgbWVtYmVy
IHR5cGUgY2FuJ3QgYmUgc3RhdGljLgpkaWZmIC0tZ2l0IGNvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvUXVhbGlmaWVkVGhpc1JlZmVyZW5jZS5qYXZhIGNvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUXVhbGlmaWVkVGhpc1Jl
ZmVyZW5jZS5qYXZhCmluZGV4IDEwZTk2NGMuLmJkNGU3ZjMgMTAwNjQ0Ci0tLSBjb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1F1YWxpZmllZFRoaXNSZWZlcmVu
Y2UuamF2YQorKysgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fz
dC9RdWFsaWZpZWRUaGlzUmVmZXJlbmNlLmphdmEKQEAgLTEsNCArMSw0IEBACiAvKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDA4IElCTSBDb3Jwb3JhdGlv
biBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEzIElCTSBDb3Jwb3JhdGlv
biBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0
aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRo
ZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCkBAIC04LDQgKzgsNiBA
QAogICogQ29udHJpYnV0b3JzOgogICogICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJ
IGFuZCBpbXBsZW1lbnRhdGlvbgorICogICAgIEplc3BlciBTIE1vbGxlciA8amVzcGVyQHNlbHNr
YWJldC5vcmc+IC0gQ29udHJpYnV0aW9ucyBmb3IKKyAqCQkJCQkJCWJ1ZyAzNzg2NzQgLSAiVGhl
IG1ldGhvZCBjYW4gYmUgZGVjbGFyZWQgYXMgc3RhdGljIiBpcyB3cm9uZwogICoqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKiovCiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5h
c3Q7CkBAIC0zNCw0ICszNiw1IEBACiAJCUZsb3dJbmZvIGZsb3dJbmZvKSB7CiAKKwkJY3VycmVu
dFNjb3BlLnJlc2V0RW5jbG9zaW5nTWV0aG9kU3RhdGljRmxhZygpOyAvLyBBbnkgdGhpcyByZWZl
cmVuY2Ugd291bGQgcHJlY2x1ZGUgdGhpcwogCQlyZXR1cm4gZmxvd0luZm87CiAJfQpAQCAtNDMs
NSArNDYsNSBAQAogCQlib29sZWFuIHZhbHVlUmVxdWlyZWQpIHsKIAotCQlyZXR1cm4gZmxvd0lu
Zm87CisJCXJldHVybiBhbmFseXNlQ29kZShjdXJyZW50U2NvcGUsIGZsb3dDb250ZXh0LCBmbG93
SW5mbyk7CiAJfQogCmRpZmYgLS1naXQgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2xvb2t1cC9QYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcuamF2YSBjb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1BhcmFtZXRlcml6ZWRUeXBl
QmluZGluZy5qYXZhCmluZGV4IGQ4ODdkNmQuLjk1NWMzNmQgMTAwNjQ0Ci0tLSBjb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1BhcmFtZXRlcml6ZWRUeXBl
QmluZGluZy5qYXZhCisrKyBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvbG9va3VwL1BhcmFtZXRlcml6ZWRUeXBlQmluZGluZy5qYXZhCkBAIC0xLDQgKzEsNCBAQAog
LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwNSwgMjAxMiBJQk0g
Q29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwNSwgMjAxMyBJQk0g
Q29ycG9yYXRpb24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJv
Z3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJs
ZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMApAQCAt
MTEsNCArMTEsNiBAQAogICoJCQkJCQkJCWJ1ZyAzNDkzMjYgLSBbMS43XSBuZXcgd2FybmluZyBm
b3IgbWlzc2luZyB0cnktd2l0aC1yZXNvdXJjZXMKICAqCQkJCQkJCQlidWcgMzk1MDAyIC0gU2Vs
ZiBib3VuZCBnZW5lcmljIGNsYXNzIGRvZXNuJ3QgcmVzb2x2ZSBib3VuZHMgcHJvcGVybHkgZm9y
IHdpbGRjYXJkcyBmb3IgY2VydGFpbiBwYXJhbWV0cmlzYXRpb24uCisgKiAgICAgSmVzcGVyIFMg
TW9sbGVyIDxqZXNwZXJAc2Vsc2thYmV0Lm9yZz4gLSBDb250cmlidXRpb25zIGZvcgorICoJCQkJ
CQkJCWJ1ZyAzNzg2NzQgLSAiVGhlIG1ldGhvZCBjYW4gYmUgZGVjbGFyZWQgYXMgc3RhdGljIiBp
cyB3cm9uZwogICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpk
dC5pbnRlcm5hbC5jb21waWxlci5sb29rdXA7CkBAIC0xMTM0LDMgKzExMzYsMTIgQEAKIAkJcmV0
dXJuIHRoaXMuZmllbGRzOwogCX0KKwkKKwlwdWJsaWMgYm9vbGVhbiBpc0RlcGVuZGVudE9uVHlw
ZVBhcmFtZXRlcnNGcm9tKFJlZmVyZW5jZUJpbmRpbmcgZGVjbGFyaW5nQ2xhc3MpIHsKKwkJaWYg
KHRoaXMuYXJndW1lbnRzICE9IG51bGwpIHsKKwkJCWZvciAoaW50IGkgPSAwLCBsID0gdGhpcy5h
cmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7CisJCQkJaWYgKHRoaXMuYXJndW1lbnRzW2ld
LmlzRGVwZW5kZW50T25UeXBlUGFyYW1ldGVyc0Zyb20oZGVjbGFyaW5nQ2xhc3MpKSByZXR1cm4g
dHJ1ZTsKKwkJCX0KKwkJfQorCQlyZXR1cm4gZmFsc2U7CisJfQogfQpkaWZmIC0tZ2l0IGNvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvVHlwZUJpbmRpbmcu
amF2YSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1R5
cGVCaW5kaW5nLmphdmEKaW5kZXggOTkzY2FhMS4uYmI1MDZkYSAxMDA2NDQKLS0tIGNvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvVHlwZUJpbmRpbmcuamF2
YQorKysgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9U
eXBlQmluZGluZy5qYXZhCkBAIC0xLDQgKzEsNCBAQAogLyoqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioK
LSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMSBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4K
KyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4K
ICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWlu
ZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhl
IEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMApAQCAtMTEsNCArMTEsNiBAQAogICoJCQkJCQkJ
CWJ1ZyAzMTcwNDYgLSBFeGNlcHRpb24gZHVyaW5nIGRlYnVnZ2luZyB3aGVuIGhvdmVyIG1vdXNl
IG92ZXIgYSBmaWVsZAogICoJCQkJCQkJCWJ1ZyAzOTUwMDIgLSBTZWxmIGJvdW5kIGdlbmVyaWMg
Y2xhc3MgZG9lc24ndCByZXNvbHZlIGJvdW5kcyBwcm9wZXJseSBmb3Igd2lsZGNhcmRzIGZvciBj
ZXJ0YWluIHBhcmFtZXRyaXNhdGlvbi4KKyAqICAgICBKZXNwZXIgUyBNb2xsZXIgPGplc3BlckBz
ZWxza2FiZXQub3JnPiAtIENvbnRyaWJ1dGlvbnMgZm9yCisgKgkJCQkJCQkJYnVnIDM3ODY3NCAt
ICJUaGUgbWV0aG9kIGNhbiBiZSBkZWNsYXJlZCBhcyBzdGF0aWMiIGlzIHdyb25nCiAgKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKi8KIHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBp
bGVyLmxvb2t1cDsKQEAgLTEyMTgsMyArMTIyMCwxMiBAQAogCXJldHVybiBCaW5kaW5nLk5PX1RZ
UEVfVkFSSUFCTEVTOwogfQorCisvKioKKyAqIFNlYXJjaCBmb3IgdXNlcyBvZiB0eXBlcyByZWxh
dGVkIGRpcmVjdGx5IHRvIGRlY2xhcmluZ0NsYXNzLgorICogQHBhcmFtIGRlY2xhcmluZ0NsYXNz
IAorICogQHJldHVybiB3aGV0aGVyIHRoaXMgdHlwZSBiaW5kaW5nIGlzIHJlbGF0ZWQKKyAqLwor
cHVibGljIGJvb2xlYW4gaXNEZXBlbmRlbnRPblR5cGVQYXJhbWV0ZXJzRnJvbShSZWZlcmVuY2VC
aW5kaW5nIGRlY2xhcmluZ0NsYXNzKSB7CisJcmV0dXJuIGZhbHNlOworfQogfQpkaWZmIC0tZ2l0
IGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvVHlwZVZh
cmlhYmxlQmluZGluZy5qYXZhIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9sb29rdXAvVHlwZVZhcmlhYmxlQmluZGluZy5qYXZhCmluZGV4IGFjYjczZjAuLjZiY2Qy
MzIgMTAwNjQ0Ci0tLSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
bG9va3VwL1R5cGVWYXJpYWJsZUJpbmRpbmcuamF2YQorKysgY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9UeXBlVmFyaWFibGVCaW5kaW5nLmphdmEKQEAg
LTEsNCArMSw0IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAy
MDAwLCAyMDEyIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAy
MDAwLCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNl
cnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJl
IG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGlj
ZW5zZSB2MS4wCkBAIC0xNCw0ICsxNCw2IEBACiAgKgkJCQkJCQkJYnVnIDM1ODkwMyAtIEZpbHRl
ciBwcmFjdGljYWxseSB1bmltcG9ydGFudCByZXNvdXJjZSBsZWFrIHdhcm5pbmdzCiAgKgkJCQkJ
CQkJYnVnIDM5NTAwMiAtIFNlbGYgYm91bmQgZ2VuZXJpYyBjbGFzcyBkb2Vzbid0IHJlc29sdmUg
Ym91bmRzIHByb3Blcmx5IGZvciB3aWxkY2FyZHMgZm9yIGNlcnRhaW4gcGFyYW1ldHJpc2F0aW9u
LgorICogICAgIEplc3BlciBTIE1vbGxlciA8amVzcGVyQHNlbHNrYWJldC5vcmc+IC0gQ29udHJp
YnV0aW9ucyBmb3IKKyAqCQkJCQkJCQlidWcgMzc4Njc0IC0gIlRoZSBtZXRob2QgY2FuIGJlIGRl
Y2xhcmVkIGFzIHN0YXRpYyIgaXMgd3JvbmcKICAqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwogcGFj
a2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwOwpAQCAtNTEzLDMg
KzUxNSw4IEBACiAJCXJldHVybiB0aGlzLnN1cGVyY2xhc3M7IC8vIGphdmEvbGFuZy9PYmplY3QK
IAl9CisJCisJcHVibGljIGJvb2xlYW4gaXNEZXBlbmRlbnRPblR5cGVQYXJhbWV0ZXJzRnJvbShS
ZWZlcmVuY2VCaW5kaW5nIGRlY2xhcmluZ0NsYXNzKSB7CisJCXJldHVybiB0aGlzLmRlY2xhcmlu
Z0VsZW1lbnQgPT0gZGVjbGFyaW5nQ2xhc3M7IAorCX0KKwogfQ==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>227922</attachid>
            <date>2013-03-05 05:09:00 -0500</date>
            <delta_ts>2013-03-08 18:10:31 -0500</delta_ts>
            <desc>New tests, also covering comment 10 and 11</desc>
            <filename>clipboard.txt</filename>
            <type>text/plain</type>
            <size>8785</size>
            <attacher name="Jesper Moller">jesper</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMA0KI1Agb3JnLmVjbGlwc2UuamR0LmNvcmUu
dGVzdHMuY29tcGlsZXINCmRpZmYgLS1naXQgc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3Rz
L2NvbXBpbGVyL3JlZ3Jlc3Npb24vQWJzdHJhY3RSZWdyZXNzaW9uVGVzdC5qYXZhIHNyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0Fic3RyYWN0UmVncmVz
c2lvblRlc3QuamF2YQ0KaW5kZXggYzg4ZWI0Yy4uMGVkMjIzMCAxMDA2NDQNCi0tLSBzcmMvb3Jn
L2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9BYnN0cmFjdFJlZ3Jl
c3Npb25UZXN0LmphdmENCisrKyBzcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGls
ZXIvcmVncmVzc2lvbi9BYnN0cmFjdFJlZ3Jlc3Npb25UZXN0LmphdmENCkBAIC0xLDQgKzEsNCBA
QA0KIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqDQotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEx
IElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLg0KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAx
MyBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4NCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBU
aGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzDQogICogYXJlIG1hZGUg
YXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2
MS4wDQpAQCAtOSw0ICs5LDUgQEANCiAgKiAgICAgSUJNIENvcnBvcmF0aW9uIC0gaW5pdGlhbCBB
UEkgYW5kIGltcGxlbWVudGF0aW9uDQogICogICAgIFN0ZXBoYW4gSGVycm1hbm4gLSBDb250cmli
dXRpb24gZm9yIGJ1ZyAzMzUwOTMgLSBbY29tcGlsZXJdW251bGxdIG1pbmltYWwgaG9vayBmb3Ig
ZnV0dXJlIG51bGwgYW5ub3RhdGlvbiBzdXBwb3J0DQorICogICAgIEplc3BlciBTIE1vbGxlciAt
IENvbnRyaWJ1dGlvbnMgZm9yIGJ1ZyAzNzg2NzQgLSAiVGhlIG1ldGhvZCBjYW4gYmUgZGVjbGFy
ZWQgYXMgc3RhdGljIiBpcyB3cm9uZw0KICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KIHBhY2th
Z2Ugb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIucmVncmVzc2lvbjsNCkBAIC0x
MTk0LDQgKzExOTUsMjYgQEANCiAJCQlKYXZhY1Rlc3RPcHRpb25zLkRFRkFVTFQgLyogZGVmYXVs
dCBqYXZhYyB0ZXN0IG9wdGlvbnMgKi8pOw0KIAl9DQorCXByb3RlY3RlZCB2b2lkIHJ1bkNvbmZv
cm1UZXN0KFN0cmluZ1tdIHRlc3RGaWxlcywgTWFwIGN1c3RvbU9wdGlvbnMpIHsNCisJCXJ1blRl
c3QoDQorCQkJLy8gdGVzdCBkaXJlY3RvcnkgcHJlcGFyYXRpb24NCisJCQl0cnVlIC8qIGZsdXNo
IG91dHB1dCBkaXJlY3RvcnkgKi8sDQorCQkJdGVzdEZpbGVzIC8qIHRlc3QgZmlsZXMgKi8sDQor
CQkJLy8gY29tcGlsZXIgb3B0aW9ucw0KKwkJCW51bGwgLyogbm8gY2xhc3MgbGlicmFyaWVzICov
LA0KKwkJCWN1c3RvbU9wdGlvbnMgLyogbm8gY3VzdG9tIG9wdGlvbnMgKi8sDQorCQkJZmFsc2Ug
LyogZG8gbm90IHBlcmZvcm0gc3RhdGVtZW50cyByZWNvdmVyeSAqLywNCisJCQludWxsIC8qIG5v
IGN1c3RvbSByZXF1ZXN0b3IgKi8sDQorCQkJLy8gY29tcGlsZXIgcmVzdWx0cw0KKwkJCWZhbHNl
IC8qIGV4cGVjdGluZyBubyBjb21waWxlciBlcnJvcnMgKi8sDQorCQkJbnVsbCAvKiBkbyBub3Qg
Y2hlY2sgY29tcGlsZXIgbG9nICovLA0KKwkJCS8vIHJ1bnRpbWUgb3B0aW9ucw0KKwkJCWZhbHNl
IC8qIGRvIG5vdCBmb3JjZSBleGVjdXRpb24gKi8sDQorCQkJbnVsbCAvKiBubyB2bSBhcmd1bWVu
dHMgKi8sDQorCQkJLy8gcnVudGltZSByZXN1bHRzDQorCQkJbnVsbCAvKiBleHBlY3RlZCBvdXRw
dXQgc3RyaW5nICovLA0KKwkJCW51bGwgLyogZG8gbm90IGNoZWNrIGVycm9yIHN0cmluZyAqLywN
CisJCQkvLyBqYXZhYyBvcHRpb25zDQorCQkJSmF2YWNUZXN0T3B0aW9ucy5ERUZBVUxUIC8qIGRl
ZmF1bHQgamF2YWMgdGVzdCBvcHRpb25zICovKTsNCisJfQ0KIAlwcm90ZWN0ZWQgdm9pZCBydW5D
b25mb3JtVGVzdCgNCiAJCQlTdHJpbmdbXSB0ZXN0RmlsZXMsDQpkaWZmIC0tZ2l0IHNyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1Byb2JsZW1UeXBlQW5k
TWV0aG9kVGVzdC5qYXZhIHNyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9y
ZWdyZXNzaW9uL1Byb2JsZW1UeXBlQW5kTWV0aG9kVGVzdC5qYXZhDQppbmRleCA5MTYyYWE2Li41
ZDUwYzAxIDEwMDY0NA0KLS0tIHNyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxl
ci9yZWdyZXNzaW9uL1Byb2JsZW1UeXBlQW5kTWV0aG9kVGVzdC5qYXZhDQorKysgc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vUHJvYmxlbVR5cGVBbmRN
ZXRob2RUZXN0LmphdmENCkBAIC0xLDQgKzEsNCBAQA0KIC8qKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
DQotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEyIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJz
Lg0KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVy
cy4NCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBh
bnlpbmcgbWF0ZXJpYWxzDQogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBv
ZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wDQpAQCAtMTIsNCArMTIsNiBAQA0KICAq
CQkJCQkJCQlidWcgMzc5Nzg0IC0gW2NvbXBpbGVyXSAiTWV0aG9kIGNhbiBiZSBzdGF0aWMiIGlz
IG5vdCBnZXR0aW5nIHJlcG9ydGVkDQogICoJCQkJCQkJCWJ1ZyAzNzk4MzQgLSBXcm9uZyAibWV0
aG9kIGNhbiBiZSBzdGF0aWMiIGluIHByZXNlbmNlIG9mIHF1YWxpZmllZCBzdXBlciBhbmQgZGlm
ZmVyZW50IHN0YXRpY25lc3Mgb2YgbmVzdGVkIHN1cGVyIGNsYXNzLg0KKyAqICAgICBKZXNwZXIg
UyBNb2xsZXIgPGplc3BlckBzZWxza2FiZXQub3JnPiAtIENvbnRyaWJ1dGlvbnMgZm9yDQorICoJ
CQkJCQkJCWJ1ZyAzNzg2NzQgLSAiVGhlIG1ldGhvZCBjYW4gYmUgZGVjbGFyZWQgYXMgc3RhdGlj
IiBpcyB3cm9uZw0KICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KIHBhY2thZ2Ugb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIucmVncmVzc2lvbjsNCkBAIC04MTQ2LDMgKzgxNDgs
MTgzIEBADQogCX0NCiB9DQorcHJpdmF0ZSB2b2lkIHJ1blN0YXRpY1dhcm5pbmdDb25mb3JtVGVz
dChTdHJpbmcgZmlsZU5hbWUsIFN0cmluZyBib2R5KSB7DQorCWlmICh0aGlzLmNvbXBsaWFuY2VM
ZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzUpDQorCQlyZXR1cm47DQorCU1hcCBjb21w
aWxlck9wdGlvbnMgPSBnZXRDb21waWxlck9wdGlvbnMoKTsNCisJY29tcGlsZXJPcHRpb25zLnB1
dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydE1ldGhvZENhbkJlU3RhdGljLCBDb21waWxl
ck9wdGlvbnMuRVJST1IpOw0KKwljb21waWxlck9wdGlvbnMucHV0KENvbXBpbGVyT3B0aW9ucy5P
UFRJT05fUmVwb3J0TWV0aG9kQ2FuQmVQb3RlbnRpYWxseVN0YXRpYywgQ29tcGlsZXJPcHRpb25z
LkVSUk9SKTsNCisJdGhpcy5ydW5Db25mb3JtVGVzdCgNCisJCW5ldyBTdHJpbmdbXSB7DQorCQkJ
ZmlsZU5hbWUsIA0KKwkJCWJvZHkNCisJCX0sDQorCQljb21waWxlck9wdGlvbnMgLyogY3VzdG9t
IG9wdGlvbnMgKi8NCisJKTsNCit9DQorLy9odHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9z
aG93X2J1Zy5jZ2k/aWQ9Mzc4Njc0DQorLy9DYW4gYmUgc3RhdGljIHdhcm5pbmcgc2hvd24gaW4g
dGhlIHdyb25nIHBsYWNlcywgaS5lLiBpZiB0aGUgdHlwZSBwYXJhbWV0ZXIgaXMgdXNlZCBpbiB0
aGUgc2lnbmF0dXJlDQorcHVibGljIHZvaWQgdGVzdDM3ODY3NF9jb21tZW50MCgpIHsNCisJcnVu
U3RhdGljV2FybmluZ0NvbmZvcm1UZXN0KA0KKwkJIlRlc3QuamF2YSIsIA0KKwkJInB1YmxpYyBj
bGFzcyBUZXN0PFQ+IHtcbiIgKyANCisJCSJcbiIgKyANCisJCSIgICAgQFN1cHByZXNzV2Fybmlu
Z3MoeyBcInVuY2hlY2tlZFwiLCBcInJhd3R5cGVzXCIgfSlcbiIgKyANCisJCSIgICAgcHVibGlj
IHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuIiArIA0KKwkJIiAgICAgICAgbmV3
IFRlc3QoKS5tZXRob2QobnVsbCk7XG4iICsgDQorCQkiICAgIH1cbiIgKyANCisJCSJcbiIgKyAN
CisJCSIgICAgcHJpdmF0ZSBzdGF0aWMgY2xhc3MgU3ViQ2xhc3M8QT4ge1xuIiArIA0KKwkJIlxu
IiArIA0KKwkJIiAgICB9XG4iICsgDQorCQkiXG4iICsgDQorCQkiICAgIHByaXZhdGUgdm9pZCBt
ZXRob2QoU3ViQ2xhc3M8VD4gcykge1xuIiArIA0KKwkJIiAgICAgICAgU3lzdGVtLm91dC5wcmlu
dGxuKHMpO1xuIiArIA0KKwkJIiAgICB9XG4iICsgDQorCQkiXG4iICsgDQorCQkifVxuIiArIA0K
KwkJIiINCisJKTsNCit9DQorLy9odHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1
Zy5jZ2k/aWQ9Mzc4Njc0DQorcHVibGljIHZvaWQgdGVzdDM3ODY3NF9jb21tZW50MWIoKSB7DQor
CXJ1blN0YXRpY1dhcm5pbmdDb25mb3JtVGVzdCgNCisJCSJYLmphdmEiLCANCisJCSJpbXBvcnQg
amF2YS51dGlsLkNvbGxlY3Rpb247XG4iICsNCisJCSJjbGFzcyBYPEU+e1xuIiArIA0KKwkJIiAg
IHB1YmxpYyBmaW5hbCA8RTE+IENvbGxlY3Rpb248RT4gZ28oKSB7ICAvLyBjYW5ub3QgYmUgc3Rh
dGljXG4iICsgDQorCQkiCQlyZXR1cm4gbnVsbDsgXG4iICsgDQorCQkiICAgfVxuIiArIA0KKwkJ
In1cbiIgKyANCisJCSIiDQorCSk7DQorfQ0KKy8vaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1
Z3Mvc2hvd19idWcuY2dpP2lkPTM3ODY3NA0KKy8vQ2FuIGJlIHN0YXRpYyB3YXJuaW5nIHNob3du
IGluIHRoZSB3cm9uZyBwbGFjZXMNCitwdWJsaWMgdm9pZCB0ZXN0Mzc4Njc0X2NvbW1lbnQxYygp
IHsNCisJcnVuU3RhdGljV2FybmluZ0NvbmZvcm1UZXN0KA0KKwkJIlguamF2YSIsIA0KKwkJImlt
cG9ydCBqYXZhLnV0aWwuQ29sbGVjdGlvbjtcbiIgKw0KKwkJImltcG9ydCBqYXZhLnV0aWwuQXJy
YXlMaXN0O1xuIiArDQorCQkiCWNsYXNzIFg8RT57XG4iICsgDQorCQkiICAgcHVibGljIGZpbmFs
IDxFMT4gQ29sbGVjdGlvbjw/PiBnbygpIHsgIC8vIGNhbm5vdCBiZSBzdGF0aWNcbiIgKyANCisJ
CSIJCXJldHVybiBuZXcgQXJyYXlMaXN0PEU+KCk7IFxuIiArIA0KKwkJIiAgIH1cbiIgKyANCisJ
CSJ9XG4iICsgDQorCQkiIg0KKwkpOw0KK30NCisvL2h0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9i
dWdzL3Nob3dfYnVnLmNnaT9pZD0zNzg2NzQNCisvL0NhbiBiZSBzdGF0aWMgd2FybmluZyBzaG93
biBpbiB0aGUgd3JvbmcgcGxhY2VzDQorcHVibGljIHZvaWQgdGVzdDM3ODY3NF9jb21tZW50Migp
IHsNCisJcnVuU3RhdGljV2FybmluZ0NvbmZvcm1UZXN0KA0KKwkJIlguamF2YSIsIA0KKwkJInB1
YmxpYyBjbGFzcyBYPFQ+IHtcbiIgKyANCisJCSIJcHVibGljIGZpbmFsIHZvaWQgZm9vKCkge1xu
IiArIA0KKwkJIgkJamF2YS51dGlsLkxpc3Q8VD4gaztcbiIgKyANCisJCSIJfVxuIiArIA0KKwkJ
In1cbiIgKyANCisJCSIiDQorCSk7DQorfQ0KKy8vaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1
Z3Mvc2hvd19idWcuY2dpP2lkPTM3ODY3NA0KK3B1YmxpYyB2b2lkIHRlc3QzNzg2NzRfY29tbWVu
dDMoKSB7DQorCXJ1blN0YXRpY1dhcm5pbmdDb25mb3JtVGVzdCgNCisJCSJUZXN0LmphdmEiLCAN
CisJCSJwdWJsaWMgY2xhc3MgVGVzdCB7XG4iICsgDQorCQkiCS8vZmFsc2UgcG9zaXRpdmUgb2Yg
bWV0aG9kIGNhbiBiZSBkZWNsYXJlZCBzdGF0aWNcbiIgKyANCisJCSIJdm9pZCBiYXIoKSB7XG4i
ICsgDQorCQkiCQlmb28oVGVzdC50aGlzKTtcbiIgKyANCisJCSIJfVxuIiArIA0KKwkJIlxuIiAr
IA0KKwkJIglwcml2YXRlIHN0YXRpYyB2b2lkIGZvbyhUZXN0IHRlc3QpIHtcbiIgKyANCisJCSIJ
CVN5c3RlbS5vdXQucHJpbnRsbih0ZXN0LmdldENsYXNzKCkuZ2V0TmFtZSgpKTtcbiIgKyANCisJ
CSIJfVxuIiArIA0KKwkJIn1cbiIgKyANCisJCSIiDQorCSk7DQorfQ0KKy8vaHR0cHM6Ly9idWdz
LmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM3ODY3NA0KKy8vQ2FuIGJlIHN0YXRp
YyB3YXJuaW5nIHNob3duIGluIHRoZSB3cm9uZyBwbGFjZXMNCitwdWJsaWMgdm9pZCB0ZXN0Mzc4
Njc0X2NvbW1lbnQ1YSgpIHsNCisJcnVuU3RhdGljV2FybmluZ0NvbmZvcm1UZXN0KA0KKwkJIlRl
c3QuamF2YSIsIA0KKwkJInB1YmxpYyBjbGFzcyBUZXN0PFQ+IHtcbiIgKyANCisJCSJcbiIgKyAN
CisJCSIgICAgQFN1cHByZXNzV2FybmluZ3MoeyBcInVuY2hlY2tlZFwiLCBcInJhd3R5cGVzXCIg
fSlcbiIgKyANCisJCSIgICAgcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykg
e1xuIiArIA0KKwkJIiAgICAgICAgbmV3IFRlc3QoKS5tZXRob2QyKG51bGwpO1xuIiArIA0KKwkJ
IiAgICB9XG4iICsgDQorCQkiXG4iICsgDQorCQkiICAgIHByaXZhdGUgc3RhdGljIGNsYXNzIFN1
YkNsYXNzPEE+IHtcbiIgKyANCisJCSJcbiIgKyANCisJCSIgICAgfVxuIiArIA0KKwkJIlxuIiAr
IA0KKwkJIiAgICBwcml2YXRlIHZvaWQgbWV0aG9kMihTdWJDbGFzczxqYXZhLnV0aWwuTGlzdDxU
Pj4gcykge1xuIiArIA0KKwkJIiAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKHMpO1xuIiArIA0K
KwkJIiAgICB9XG4iICsgDQorCQkiXG4iICsgDQorCQkifVxuIiArIA0KKwkJIiINCisJKTsNCit9
DQorLy9odHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9Mzc4Njc0
DQorcHVibGljIHZvaWQgdGVzdDM3ODY3NF9jb21tZW50NWIoKSB7DQorCXJ1blN0YXRpY1dhcm5p
bmdDb25mb3JtVGVzdCgNCisJCSJUZXN0LmphdmEiLCANCisJCSJwdWJsaWMgY2xhc3MgVGVzdDxU
PiB7XG4iICsgDQorCQkiXG4iICsgDQorCQkiICAgIEBTdXBwcmVzc1dhcm5pbmdzKHsgXCJ1bmNo
ZWNrZWRcIiwgXCJyYXd0eXBlc1wiIH0pXG4iICsgDQorCQkiICAgIHB1YmxpYyBzdGF0aWMgdm9p
ZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKyANCisJCSIgICAgICAgIG5ldyBUZXN0KCkubWV0
aG9kKCk7XG4iICsgDQorCQkiICAgIH1cbiIgKyANCisJCSJcbiIgKyANCisJCSIgICAgcHJpdmF0
ZSBqYXZhLnV0aWwuQ29sbGVjdGlvbjxUPiBtZXRob2QoKSB7XG4iICsgDQorCQkiICAgICAgICBy
ZXR1cm4gbnVsbDtcbiIgKyANCisJCSIgICAgfVxuIiArIA0KKwkJIlxuIiArIA0KKwkJIn1cbiIg
KyANCisJCSIiDQorCSk7DQorfQ0KKy8vaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hv
d19idWcuY2dpP2lkPTM3ODY3NA0KK3B1YmxpYyB2b2lkIHRlc3QzNzg2NzRfY29tbWVudDkoKSB7
DQorCXJ1blN0YXRpY1dhcm5pbmdDb25mb3JtVGVzdCgNCisJCSJUZXN0LmphdmEiLCANCisJCSJw
dWJsaWMgY2xhc3MgVGVzdDxUPiB7XG4iICsgDQorCQkiXG4iICsgDQorCQkiICAgIEBTdXBwcmVz
c1dhcm5pbmdzKHsgXCJyYXd0eXBlc1wiIH0pXG4iICsgDQorCQkiICAgIHB1YmxpYyBzdGF0aWMg
dm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKyANCisJCSIgICAgICAgIG5ldyBUZXN0KCku
bWV0aG9kKCk7XG4iICsgDQorCQkiICAgIH1cbiIgKyANCisJCSJcbiIgKyANCisJCSIgICAgcHJp
dmF0ZSBqYXZhLnV0aWwuQ29sbGVjdGlvbjw/IGV4dGVuZHMgVD4gbWV0aG9kKCkge1xuIiArIA0K
KwkJIiAgICAgICAgcmV0dXJuIG51bGw7XG4iICsgDQorCQkiICAgIH1cbiIgKyANCisJCSJ9XG4i
ICsgDQorCQkiIg0KKwkpOw0KK30NCisvL2h0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3No
b3dfYnVnLmNnaT9pZD0zNzg2NzQNCitwdWJsaWMgdm9pZCB0ZXN0Mzc4Njc0X2NvbW1lbnQxMSgp
IHsNCisJcnVuU3RhdGljV2FybmluZ0NvbmZvcm1UZXN0KA0KKwkJIlRlc3QuamF2YSIsIA0KKwkJ
InB1YmxpYyBjbGFzcyBUZXN0PFQ+IHtcbiIgKyANCisJCSJcbiIgKyANCisJCSIgICAgQFN1cHBy
ZXNzV2FybmluZ3MoeyBcInJhd3R5cGVzXCIgfSlcbiIgKyANCisJCSIgICAgcHVibGljIHN0YXRp
YyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuIiArIA0KKwkJIiAgICAgICAgbmV3IFRlc3Qo
KS5tZXRob2QxKCk7XG4iICsgDQorCQkiICAgICAgICBuZXcgVGVzdCgpLm1ldGhvZDIoKTtcbiIg
KyANCisJCSIgICAgfVxuIiArIA0KKwkJIlxuIiArIA0KKwkJIiAgIHByaXZhdGUgPFRUIGV4dGVu
ZHMgVD4gVFQgbWV0aG9kMSgpIHsgXG4iICsgDQorCQkiCQlyZXR1cm4gbnVsbDtcbiIgKyANCisJ
CSIJfVxuIiArIA0KKwkJIlxuIiArIA0KKwkJIiAgIHByaXZhdGUgPFRUIGV4dGVuZHMgT2JqZWN0
ICYgQ29tcGFyYWJsZTw/IHN1cGVyIFQ+PiBUVCBtZXRob2QyKCkgeyBcbiIgKyANCisJCSIJCXJl
dHVybiBudWxsO1xuIiArIA0KKwkJIgl9XG4iICsgDQorCQkifVxuIiArIA0KKwkJIiINCisJKTsN
Cit9DQogfQ==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>227925</attachid>
            <date>2013-03-05 05:43:00 -0500</date>
            <delta_ts>2013-03-08 18:11:08 -0500</delta_ts>
            <desc>Patch for most of the bugs</desc>
            <filename>clipboard.txt</filename>
            <type>text/plain</type>
            <size>12291</size>
            <attacher name="Jesper Moller">jesper</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMA0KI1Agb3JnLmVjbGlwc2UuamR0LmNvcmUN
CmRpZmYgLS1naXQgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fz
dC9BbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YQ0KaW5kZXggODRhMGQ2
NC4uYWRmOTA1MSAxMDA2NDQNCi0tLSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvYXN0L0FsbG9jYXRpb25FeHByZXNzaW9uLmphdmENCisrKyBjb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FsbG9jYXRpb25FeHByZXNzaW9uLmph
dmENCkBAIC0xLDQgKzEsNCBAQA0KIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQotICogQ29weXJp
Z2h0IChjKSAyMDAwLCAyMDEyIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLg0KKyAqIENvcHly
aWdodCAoYykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4NCiAgKiBBbGwg
cmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJp
YWxzDQogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBz
ZSBQdWJsaWMgTGljZW5zZSB2MS4wDQpAQCAtMTgsNCArMTgsNiBAQA0KICAqCQkJCQkJCWJ1ZyAz
NDUzMDUgLSBbY29tcGlsZXJdW251bGxdIENvbXBpbGVyIG1pc2lkZW50aWZpZXMgYSBjYXNlIG9m
ICJ2YXJpYWJsZSBjYW4gb25seSBiZSBudWxsIg0KICAqCQkJCQkJCWJ1ZyAzODg5OTYgLSBbY29t
cGlsZXJdW3Jlc291cmNlXSBJbmNvcnJlY3QgJ3BvdGVudGlhbCByZXNvdXJjZSBsZWFrJw0KKyAq
ICAgICBKZXNwZXIgUyBNb2xsZXIgPGplc3BlckBzZWxza2FiZXQub3JnPiAtIENvbnRyaWJ1dGlv
bnMgZm9yDQorICoJCQkJCQkJCWJ1ZyAzNzg2NzQgLSAiVGhlIG1ldGhvZCBjYW4gYmUgZGVjbGFy
ZWQgYXMgc3RhdGljIiBpcyB3cm9uZw0KICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KIHBhY2th
Z2Ugb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdDsNCkBAIC0zMCw0ICszMiw1
IEBADQogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5wcm9ibGVtLlBy
b2JsZW1SZXBvcnRlcjsNCiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVy
LnByb2JsZW0uUHJvYmxlbVNldmVyaXRpZXM7DQoraW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRl
cm5hbC5jb21waWxlci51dGlsLlNpbXBsZVNldDsNCiANCiBwdWJsaWMgY2xhc3MgQWxsb2NhdGlv
bkV4cHJlc3Npb24gZXh0ZW5kcyBFeHByZXNzaW9uIGltcGxlbWVudHMgSW52b2NhdGlvblNpdGUg
ew0KQEAgLTQ5LDQgKzUyLDYgQEANCiAJY2hlY2tDYXB0dXJlZExvY2FsSW5pdGlhbGl6YXRpb25J
Zk5lY2Vzc2FyeSgoUmVmZXJlbmNlQmluZGluZyl0aGlzLmJpbmRpbmcuZGVjbGFyaW5nQ2xhc3Mu
ZXJhc3VyZSgpLCBjdXJyZW50U2NvcGUsIGZsb3dJbmZvKTsNCiANCisJaWYgKHRoaXMudHlwZSAh
PSBudWxsICYmIHRoaXMudHlwZS5yZXNvbHZlZFR5cGUuaXNEZXBlbmRlbnRPblR5cGVQYXJhbWV0
ZXJzRnJvbShjdXJyZW50U2NvcGUucmVmZXJlbmNlVHlwZSgpLmJpbmRpbmcsIG5ldyBTaW1wbGVT
ZXQoKSkpDQorCQljdXJyZW50U2NvcGUucmVzZXRFbmNsb3NpbmdNZXRob2RTdGF0aWNGbGFnKCk7
DQogCS8vIHByb2Nlc3MgYXJndW1lbnRzDQogCWlmICh0aGlzLmFyZ3VtZW50cyAhPSBudWxsKSB7
DQpkaWZmIC0tZ2l0IGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvTG9jYWxEZWNsYXJhdGlvbi5qYXZhIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hc3QvTG9jYWxEZWNsYXJhdGlvbi5qYXZhDQppbmRleCA5ODhiYzVjLi5mMDk1
ZGEwIDEwMDY0NA0KLS0tIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hc3QvTG9jYWxEZWNsYXJhdGlvbi5qYXZhDQorKysgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Mb2NhbERlY2xhcmF0aW9uLmphdmENCkBAIC0xLDQgKzEs
NCBAQA0KIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQotICogQ29weXJpZ2h0IChjKSAyMDAwLCAy
MDEyIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLg0KKyAqIENvcHlyaWdodCAoYykgMjAwMCwg
MjAxMyBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4NCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVk
LiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzDQogICogYXJlIG1h
ZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5z
ZSB2MS4wDQpAQCAtMjEsNCArMjEsNiBAQA0KICAqCQkJCQkJCWJ1ZyAzOTUwMDIgLSBTZWxmIGJv
dW5kIGdlbmVyaWMgY2xhc3MgZG9lc24ndCByZXNvbHZlIGJvdW5kcyBwcm9wZXJseSBmb3Igd2ls
ZGNhcmRzIGZvciBjZXJ0YWluIHBhcmFtZXRyaXNhdGlvbi4NCiAgKgkJCQkJCQlidWcgMzgzMzY4
IC0gW2NvbXBpbGVyXVtudWxsXSBzeW50YWN0aWMgbnVsbCBhbmFseXNpcyBmb3IgZmllbGQgcmVm
ZXJlbmNlcw0KKyAqICAgICBKZXNwZXIgUyBNb2xsZXIgPGplc3BlckBzZWxza2FiZXQub3JnPiAt
IENvbnRyaWJ1dGlvbnMgZm9yDQorICoJCQkJCQkJCWJ1ZyAzNzg2NzQgLSAiVGhlIG1ldGhvZCBj
YW4gYmUgZGVjbGFyZWQgYXMgc3RhdGljIiBpcyB3cm9uZw0KICAqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqLw0KIHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdDsNCkBA
IC0zMCw0ICszMiw1IEBADQogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxl
ci5mbG93Lio7DQogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29r
dXAuKjsNCitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLnV0aWwuU2lt
cGxlU2V0Ow0KIA0KIHB1YmxpYyBjbGFzcyBMb2NhbERlY2xhcmF0aW9uIGV4dGVuZHMgQWJzdHJh
Y3RWYXJpYWJsZURlY2xhcmF0aW9uIHsNCkBAIC01MSw0ICs1NCw2IEBADQogCQl0aGlzLmJpdHMg
fD0gQVNUTm9kZS5Jc0xvY2FsRGVjbGFyYXRpb25SZWFjaGFibGU7IC8vIG9ubHkgc2V0IGlmIGFj
dHVhbGx5IHJlYWNoZWQNCiAJfQ0KKwlpZiAodGhpcy50eXBlLnJlc29sdmVkVHlwZS5pc0RlcGVu
ZGVudE9uVHlwZVBhcmFtZXRlcnNGcm9tKGN1cnJlbnRTY29wZS5tZXRob2RTY29wZSgpLnJlZmVy
ZW5jZVR5cGUoKS5iaW5kaW5nLCBuZXcgU2ltcGxlU2V0KDApKSkNCisJCWN1cnJlbnRTY29wZS5y
ZXNldEVuY2xvc2luZ01ldGhvZFN0YXRpY0ZsYWcoKTsNCiAJaWYgKHRoaXMuYmluZGluZyAhPSBu
dWxsICYmIHRoaXMudHlwZS5yZXNvbHZlZFR5cGUgaW5zdGFuY2VvZiBUeXBlVmFyaWFibGVCaW5k
aW5nKSB7DQogCQlUeXBlVmFyaWFibGVCaW5kaW5nIHR5cGVWYXJpYWJsZUJpbmRpbmcgPSAoVHlw
ZVZhcmlhYmxlQmluZGluZykgdGhpcy50eXBlLnJlc29sdmVkVHlwZTsNCmRpZmYgLS1naXQgY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9NZXRob2REZWNsYXJh
dGlvbi5qYXZhIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3Qv
TWV0aG9kRGVjbGFyYXRpb24uamF2YQ0KaW5kZXggYzEyMWMyMi4uYzY2MzUwNyAxMDA2NDQNCi0t
LSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L01ldGhvZERl
Y2xhcmF0aW9uLmphdmENCisrKyBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvYXN0L01ldGhvZERlY2xhcmF0aW9uLmphdmENCkBAIC0xLDQgKzEsNCBAQA0KIC8qKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqDQotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEyIElCTSBDb3Jw
b3JhdGlvbiBhbmQgb3RoZXJzLg0KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMyBJQk0gQ29y
cG9yYXRpb24gYW5kIG90aGVycy4NCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dy
YW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzDQogICogYXJlIG1hZGUgYXZhaWxhYmxl
IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wDQpAQCAt
MTQsNCArMTQsNiBAQA0KICAqCQkJCQkJCQlidWcgMzY4NTQ2IC0gW2NvbXBpbGVyXVtyZXNvdXJj
ZV0gQXZvaWQgcmVtYWluaW5nIGZhbHNlIHBvc2l0aXZlcyBmb3VuZCB3aGVuIGNvbXBpbGluZyB0
aGUgRWNsaXBzZSBTREsNCiAgKgkJCQkJCQkJYnVnIDM4MzM2OCAtIFtjb21waWxlcl1bbnVsbF0g
c3ludGFjdGljIG51bGwgYW5hbHlzaXMgZm9yIGZpZWxkIHJlZmVyZW5jZXMNCisgKiAgICAgSmVz
cGVyIFMgTW9sbGVyIDxqZXNwZXJAc2Vsc2thYmV0Lm9yZz4gLSBDb250cmlidXRpb25zIGZvcg0K
KyAqCQkJCQkJCQlidWcgMzc4Njc0IC0gIlRoZSBtZXRob2QgY2FuIGJlIGRlY2xhcmVkIGFzIHN0
YXRpYyIgaXMgd3JvbmcNCiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCiBwYWNrYWdlIG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3Q7DQpAQCAtMjUsNSArMjcsNCBAQA0KIGlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuZmxvdy5GbG93SW5mbzsNCiBp
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmltcGwuQ29tcGlsZXJPcHRp
b25zOw0KLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkJp
bmRpbmc7DQogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAu
Q2xhc3NTY29wZTsNCiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxv
b2t1cC5FeHRyYUNvbXBpbGVyTW9kaWZpZXJzOw0KQEAgLTM3LDQgKzM4LDUgQEANCiBpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLnByb2JsZW0uQWJvcnRNZXRob2Q7DQog
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5wcm9ibGVtLlByb2JsZW1T
ZXZlcml0aWVzOw0KK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIudXRp
bC5TaW1wbGVTZXQ7DQogDQogcHVibGljIGNsYXNzIE1ldGhvZERlY2xhcmF0aW9uIGV4dGVuZHMg
QWJzdHJhY3RNZXRob2REZWNsYXJhdGlvbiB7DQpAQCAtNzYsNCArNzgsNSBAQA0KIAkJCQlyZXR1
cm47DQogCQkJDQorCQkJU2ltcGxlU2V0IHNlZW4gPSBuZXcgU2ltcGxlU2V0KDApOw0KIAkJCS8v
IGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zODU3ODANCiAJ
CQlpZiAodGhpcy50eXBlUGFyYW1ldGVycyAhPSBudWxsICYmDQpAQCAtODQsNCArODcsNyBAQA0K
IAkJCQkJCXRoaXMuc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkudW51c2VkVHlwZVBhcmFtZXRlcih0
eXBlUGFyYW1ldGVyKTsJCQkJCQkNCiAJCQkJCX0NCisJCQkJCS8vIENoZWNrIGlmIHRoZSB0eXBl
IHBhcmFtZXRlcnMgdGhlbXNlbHZlcyBkZXBlbmQgb24gdGhlIHBhcmFtZXRlcnMgb2YgdGhlIGRl
Y2xhcmluZyBjbGFzcw0KKwkJCQkJaWYgKHR5cGVQYXJhbWV0ZXIuYmluZGluZy5pc0RlcGVuZGVu
dE9uVHlwZVBhcmFtZXRlcnNGcm9tKHRoaXMuYmluZGluZy5kZWNsYXJpbmdDbGFzcywgc2Vlbikp
IA0KKwkJCQkJCXRoaXMuYml0cyAmPSB+QVNUTm9kZS5DYW5CZVN0YXRpYzsNCiAJCQkJfQ0KIAkJ
CX0NCkBAIC0xMDIsMTEgKzEwOCwxMCBAQA0KIAkJCQkJLy8gaWYgdGhpcyBtZXRob2QgdXNlcyBh
IHR5cGUgcGFyYW1ldGVyIGRlY2xhcmVkIGJ5IHRoZSBkZWNsYXJpbmcgY2xhc3MsDQogCQkJCQkv
LyBpdCBjYW4ndCBiZSBzdGF0aWMuIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3df
YnVnLmNnaT9pZD0zMTg2ODINCi0JCQkJCWlmICh0aGlzLmFyZ3VtZW50c1tpXS5iaW5kaW5nICE9
IG51bGwgJiYgKHRoaXMuYXJndW1lbnRzW2ldLmJpbmRpbmcudHlwZSBpbnN0YW5jZW9mIFR5cGVW
YXJpYWJsZUJpbmRpbmcpKSB7DQotCQkJCQkJQmluZGluZyBkZWNsYXJpbmdFbGVtZW50ID0gKChU
eXBlVmFyaWFibGVCaW5kaW5nKXRoaXMuYXJndW1lbnRzW2ldLmJpbmRpbmcudHlwZSkuZGVjbGFy
aW5nRWxlbWVudDsNCi0JCQkJCQlpZiAodGhpcy5iaW5kaW5nICE9IG51bGwgJiYgdGhpcy5iaW5k
aW5nLmRlY2xhcmluZ0NsYXNzID09IGRlY2xhcmluZ0VsZW1lbnQpDQotCQkJCQkJCXRoaXMuYml0
cyAmPSB+QVNUTm9kZS5DYW5CZVN0YXRpYzsNCi0JCQkJCX0NCisJCQkJCWlmICh0aGlzLmFyZ3Vt
ZW50c1tpXS5iaW5kaW5nICE9IG51bGwgJiYgdGhpcy5hcmd1bWVudHNbaV0uYmluZGluZy50eXBl
LmlzRGVwZW5kZW50T25UeXBlUGFyYW1ldGVyc0Zyb20odGhpcy5iaW5kaW5nLmRlY2xhcmluZ0Ns
YXNzLCBzZWVuKSkgDQorCQkJCQkJdGhpcy5iaXRzICY9IH5BU1ROb2RlLkNhbkJlU3RhdGljOw0K
IAkJCQl9DQogCQkJfQ0KKwkJCWlmICh0aGlzLmJpbmRpbmcucmV0dXJuVHlwZS5pc0RlcGVuZGVu
dE9uVHlwZVBhcmFtZXRlcnNGcm9tKHRoaXMuYmluZGluZy5kZWNsYXJpbmdDbGFzcywgc2Vlbikp
DQorCQkJCXRoaXMuYml0cyAmPSB+QVNUTm9kZS5DYW5CZVN0YXRpYzsNCiAJCQlpZiAodGhpcy5i
aW5kaW5nLmRlY2xhcmluZ0NsYXNzIGluc3RhbmNlb2YgTWVtYmVyVHlwZUJpbmRpbmcgJiYgIXRo
aXMuYmluZGluZy5kZWNsYXJpbmdDbGFzcy5pc1N0YXRpYygpKSB7DQogCQkJCS8vIG1ldGhvZCBv
ZiBhIG5vbi1zdGF0aWMgbWVtYmVyIHR5cGUgY2FuJ3QgYmUgc3RhdGljLg0KZGlmZiAtLWdpdCBj
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1F1YWxpZmllZFRo
aXNSZWZlcmVuY2UuamF2YSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvYXN0L1F1YWxpZmllZFRoaXNSZWZlcmVuY2UuamF2YQ0KaW5kZXggMTBlOTY0Yy4uYmQ0ZTdm
MyAxMDA2NDQNCi0tLSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
YXN0L1F1YWxpZmllZFRoaXNSZWZlcmVuY2UuamF2YQ0KKysrIGNvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUXVhbGlmaWVkVGhpc1JlZmVyZW5jZS5qYXZhDQpA
QCAtMSw0ICsxLDQgQEANCiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KLSAqIENvcHlyaWdodCAo
YykgMjAwMCwgMjAwOCBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4NCisgKiBDb3B5cmlnaHQg
KGMpIDIwMDAsIDIwMTMgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuDQogICogQWxsIHJpZ2h0
cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscw0K
ICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVi
bGljIExpY2Vuc2UgdjEuMA0KQEAgLTgsNCArOCw2IEBADQogICogQ29udHJpYnV0b3JzOg0KICAq
ICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24NCisg
KiAgICAgSmVzcGVyIFMgTW9sbGVyIDxqZXNwZXJAc2Vsc2thYmV0Lm9yZz4gLSBDb250cmlidXRp
b25zIGZvcg0KKyAqCQkJCQkJCWJ1ZyAzNzg2NzQgLSAiVGhlIG1ldGhvZCBjYW4gYmUgZGVjbGFy
ZWQgYXMgc3RhdGljIiBpcyB3cm9uZw0KICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KIHBhY2th
Z2Ugb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdDsNCkBAIC0zNCw0ICszNiw1
IEBADQogCQlGbG93SW5mbyBmbG93SW5mbykgew0KIA0KKwkJY3VycmVudFNjb3BlLnJlc2V0RW5j
bG9zaW5nTWV0aG9kU3RhdGljRmxhZygpOyAvLyBBbnkgdGhpcyByZWZlcmVuY2Ugd291bGQgcHJl
Y2x1ZGUgdGhpcw0KIAkJcmV0dXJuIGZsb3dJbmZvOw0KIAl9DQpAQCAtNDMsNSArNDYsNSBAQA0K
IAkJYm9vbGVhbiB2YWx1ZVJlcXVpcmVkKSB7DQogDQotCQlyZXR1cm4gZmxvd0luZm87DQorCQly
ZXR1cm4gYW5hbHlzZUNvZGUoY3VycmVudFNjb3BlLCBmbG93Q29udGV4dCwgZmxvd0luZm8pOw0K
IAl9DQogDQpkaWZmIC0tZ2l0IGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9sb29rdXAvUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nLmphdmEgY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9QYXJhbWV0ZXJpemVkVHlwZUJpbmRp
bmcuamF2YQ0KaW5kZXggZDg4N2Q2ZC4uN2IyNzJjMiAxMDA2NDQNCi0tLSBjb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1BhcmFtZXRlcml6ZWRUeXBlQmlu
ZGluZy5qYXZhDQorKysgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2xvb2t1cC9QYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcuamF2YQ0KQEAgLTEsNCArMSw0IEBADQog
LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioNCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDUsIDIwMTIgSUJN
IENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuDQorICogQ29weXJpZ2h0IChjKSAyMDA1LCAyMDEzIElC
TSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLg0KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMg
cHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMNCiAgKiBhcmUgbWFkZSBhdmFp
bGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAN
CkBAIC0xMSw0ICsxMSw2IEBADQogICoJCQkJCQkJCWJ1ZyAzNDkzMjYgLSBbMS43XSBuZXcgd2Fy
bmluZyBmb3IgbWlzc2luZyB0cnktd2l0aC1yZXNvdXJjZXMNCiAgKgkJCQkJCQkJYnVnIDM5NTAw
MiAtIFNlbGYgYm91bmQgZ2VuZXJpYyBjbGFzcyBkb2Vzbid0IHJlc29sdmUgYm91bmRzIHByb3Bl
cmx5IGZvciB3aWxkY2FyZHMgZm9yIGNlcnRhaW4gcGFyYW1ldHJpc2F0aW9uLg0KKyAqICAgICBK
ZXNwZXIgUyBNb2xsZXIgPGplc3BlckBzZWxza2FiZXQub3JnPiAtIENvbnRyaWJ1dGlvbnMgZm9y
DQorICoJCQkJCQkJCWJ1ZyAzNzg2NzQgLSAiVGhlIG1ldGhvZCBjYW4gYmUgZGVjbGFyZWQgYXMg
c3RhdGljIiBpcyB3cm9uZw0KICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KIHBhY2thZ2Ugb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cDsNCkBAIC0xOSw0ICsyMSw1IEBA
DQogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuVHlwZVJlZmVy
ZW5jZTsNCiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5XaWxk
Y2FyZDsNCitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLnV0aWwuU2lt
cGxlU2V0Ow0KIA0KIC8qKg0KQEAgLTExMzQsMyArMTEzNywxNCBAQA0KIAkJcmV0dXJuIHRoaXMu
ZmllbGRzOw0KIAl9DQorCQ0KKwlwdWJsaWMgYm9vbGVhbiBpc0RlcGVuZGVudE9uVHlwZVBhcmFt
ZXRlcnNGcm9tKFJlZmVyZW5jZUJpbmRpbmcgZGVjbGFyaW5nQ2xhc3MsIFNpbXBsZVNldCBzZWVu
KSB7DQorCQlpZiAoc2Vlbi5pbmNsdWRlcyh0aGlzKSkgcmV0dXJuIGZhbHNlOw0KKwkJc2Vlbi5h
ZGQodGhpcyk7DQorCQlpZiAodGhpcy5hcmd1bWVudHMgIT0gbnVsbCkgew0KKwkJCWZvciAoaW50
IGkgPSAwLCBsID0gdGhpcy5hcmd1bWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7DQorCQkJCWlm
ICh0aGlzLmFyZ3VtZW50c1tpXS5pc0RlcGVuZGVudE9uVHlwZVBhcmFtZXRlcnNGcm9tKGRlY2xh
cmluZ0NsYXNzLCBzZWVuKSkgcmV0dXJuIHRydWU7DQorCQkJfQ0KKwkJfQ0KKwkJcmV0dXJuIGZh
bHNlOw0KKwl9DQogfQ0KZGlmZiAtLWdpdCBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvbG9va3VwL1R5cGVCaW5kaW5nLmphdmEgY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9UeXBlQmluZGluZy5qYXZhDQppbmRleCA5OTNj
YWExLi4yZWExYzExIDEwMDY0NA0KLS0tIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9sb29rdXAvVHlwZUJpbmRpbmcuamF2YQ0KKysrIGNvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvVHlwZUJpbmRpbmcuamF2YQ0KQEAgLTEs
NCArMSw0IEBADQogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCi0gKiBDb3B5cmlnaHQgKGMpIDIw
MDAsIDIwMTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuDQorICogQ29weXJpZ2h0IChjKSAy
MDAwLCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLg0KICAqIEFsbCByaWdodHMgcmVz
ZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMNCiAgKiBh
cmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBM
aWNlbnNlIHYxLjANCkBAIC0xMSw0ICsxMSw2IEBADQogICoJCQkJCQkJCWJ1ZyAzMTcwNDYgLSBF
eGNlcHRpb24gZHVyaW5nIGRlYnVnZ2luZyB3aGVuIGhvdmVyIG1vdXNlIG92ZXIgYSBmaWVsZA0K
ICAqCQkJCQkJCQlidWcgMzk1MDAyIC0gU2VsZiBib3VuZCBnZW5lcmljIGNsYXNzIGRvZXNuJ3Qg
cmVzb2x2ZSBib3VuZHMgcHJvcGVybHkgZm9yIHdpbGRjYXJkcyBmb3IgY2VydGFpbiBwYXJhbWV0
cmlzYXRpb24uDQorICogICAgIEplc3BlciBTIE1vbGxlciA8amVzcGVyQHNlbHNrYWJldC5vcmc+
IC0gQ29udHJpYnV0aW9ucyBmb3INCisgKgkJCQkJCQkJYnVnIDM3ODY3NCAtICJUaGUgbWV0aG9k
IGNhbiBiZSBkZWNsYXJlZCBhcyBzdGF0aWMiIGlzIHdyb25nDQogICoqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKiovDQogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3Vw
Ow0KQEAgLTE4LDQgKzIwLDUgQEANCiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGls
ZXIuQ2hhck9wZXJhdGlvbjsNCiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBp
bGVyLmFzdC5XaWxkY2FyZDsNCitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBp
bGVyLnV0aWwuU2ltcGxlU2V0Ow0KIA0KIC8qDQpAQCAtMTIxOCwzICsxMjIxLDEyIEBADQogCXJl
dHVybiBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTOw0KIH0NCisNCisvKioNCisgKiBTZWFyY2gg
Zm9yIHVzZXMgb2YgdHlwZXMgcmVsYXRlZCBkaXJlY3RseSB0byBkZWNsYXJpbmdDbGFzcy4NCisg
KiBAcGFyYW0gZGVjbGFyaW5nQ2xhc3MgDQorICogQHJldHVybiB3aGV0aGVyIHRoaXMgdHlwZSBi
aW5kaW5nIGlzIHJlbGF0ZWQNCisgKi8NCitwdWJsaWMgYm9vbGVhbiBpc0RlcGVuZGVudE9uVHlw
ZVBhcmFtZXRlcnNGcm9tKFJlZmVyZW5jZUJpbmRpbmcgZGVjbGFyaW5nQ2xhc3MsIFNpbXBsZVNl
dCBzZWVuKSB7DQorCXJldHVybiBmYWxzZTsNCit9DQogfQ0K
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>227926</attachid>
            <date>2013-03-05 05:45:00 -0500</date>
            <delta_ts>2013-03-08 18:10:40 -0500</delta_ts>
            <desc>Patch for the most recently discovered problems.</desc>
            <filename>clipboard.txt</filename>
            <type>text/plain</type>
            <size>4269</size>
            <attacher name="Jesper Moller">jesper</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMA0KI1Agb3JnLmVjbGlwc2UuamR0LmNvcmUN
CmRpZmYgLS1naXQgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xv
b2t1cC9UeXBlVmFyaWFibGVCaW5kaW5nLmphdmEgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2xvb2t1cC9UeXBlVmFyaWFibGVCaW5kaW5nLmphdmENCmluZGV4IGFj
YjczZjAuLjZlODhlOWMgMTAwNjQ0DQotLS0gY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9UeXBlVmFyaWFibGVCaW5kaW5nLmphdmENCisrKyBjb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1R5cGVWYXJpYWJsZUJp
bmRpbmcuamF2YQ0KQEAgLTEsNCArMSw0IEBADQogLyoqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCi0g
KiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTIgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuDQor
ICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLg0K
ICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWlu
ZyBtYXRlcmlhbHMNCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRo
ZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjANCkBAIC0xNCw0ICsxNCw2IEBADQogICoJCQkJ
CQkJCWJ1ZyAzNTg5MDMgLSBGaWx0ZXIgcHJhY3RpY2FsbHkgdW5pbXBvcnRhbnQgcmVzb3VyY2Ug
bGVhayB3YXJuaW5ncw0KICAqCQkJCQkJCQlidWcgMzk1MDAyIC0gU2VsZiBib3VuZCBnZW5lcmlj
IGNsYXNzIGRvZXNuJ3QgcmVzb2x2ZSBib3VuZHMgcHJvcGVybHkgZm9yIHdpbGRjYXJkcyBmb3Ig
Y2VydGFpbiBwYXJhbWV0cmlzYXRpb24uDQorICogICAgIEplc3BlciBTIE1vbGxlciA8amVzcGVy
QHNlbHNrYWJldC5vcmc+IC0gQ29udHJpYnV0aW9ucyBmb3INCisgKgkJCQkJCQkJYnVnIDM3ODY3
NCAtICJUaGUgbWV0aG9kIGNhbiBiZSBkZWNsYXJlZCBhcyBzdGF0aWMiIGlzIHdyb25nDQogICoq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKiovDQogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwu
Y29tcGlsZXIubG9va3VwOw0KQEAgLTIwLDQgKzIyLDUgQEANCiBpbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5XaWxkY2FyZDsNCiBpbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvbXBpbGVyLmNsYXNzZm10LkNsYXNzRmlsZUNvbnN0YW50czsNCitpbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLnV0aWwuU2ltcGxlU2V0Ow0KIA0K
IC8qKg0KQEAgLTUxMywzICs1MTYsMTYgQEANCiAJCXJldHVybiB0aGlzLnN1cGVyY2xhc3M7IC8v
IGphdmEvbGFuZy9PYmplY3QNCiAJfQ0KKwkNCisJcHVibGljIGJvb2xlYW4gaXNEZXBlbmRlbnRP
blR5cGVQYXJhbWV0ZXJzRnJvbShSZWZlcmVuY2VCaW5kaW5nIGRlY2xhcmluZ0NsYXNzLCBTaW1w
bGVTZXQgc2Vlbikgew0KKwkJaWYgKHNlZW4uaW5jbHVkZXModGhpcykpIHJldHVybiBmYWxzZTsN
CisJCXNlZW4uYWRkKHRoaXMpOw0KKwkJaWYgKHRoaXMuZGVjbGFyaW5nRWxlbWVudCA9PSBkZWNs
YXJpbmdDbGFzcykgcmV0dXJuIHRydWU7DQorCQlpZiAodGhpcy5maXJzdEJvdW5kICE9IG51bGwg
JiYgdGhpcy5maXJzdEJvdW5kICE9IHRoaXMgJiYgdGhpcy5maXJzdEJvdW5kLmlzRGVwZW5kZW50
T25UeXBlUGFyYW1ldGVyc0Zyb20oZGVjbGFyaW5nQ2xhc3MsIHNlZW4pKSByZXR1cm4gdHJ1ZTsN
CisJCVR5cGVCaW5kaW5nW10gb3RoZXJzID0gdGhpcy5vdGhlclVwcGVyQm91bmRzKCk7DQorCQlm
b3IgKGludCBpID0gMDsgaSA8IG90aGVycy5sZW5ndGg7IGkrKykgew0KKwkJCWlmIChvdGhlcnNb
aV0uaXNEZXBlbmRlbnRPblR5cGVQYXJhbWV0ZXJzRnJvbShkZWNsYXJpbmdDbGFzcywgc2Vlbikp
IHJldHVybiB0cnVlOw0KKwkJfQ0KKwkJcmV0dXJuIGZhbHNlOw0KKwl9DQorDQogfQ0KZGlmZiAt
LWdpdCBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1dp
bGRjYXJkQmluZGluZy5qYXZhIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9sb29rdXAvV2lsZGNhcmRCaW5kaW5nLmphdmENCmluZGV4IDkzZGZmZTEuLjcyMTk4MmMg
MTAwNjQ0DQotLS0gY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xv
b2t1cC9XaWxkY2FyZEJpbmRpbmcuamF2YQ0KKysrIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9sb29rdXAvV2lsZGNhcmRCaW5kaW5nLmphdmENCkBAIC0xLDQgKzEs
NCBAQA0KIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQotICogQ29weXJpZ2h0IChjKSAyMDA1LCAy
MDEyIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLg0KKyAqIENvcHlyaWdodCAoYykgMjAwNSwg
MjAxMyBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4NCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVk
LiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzDQogICogYXJlIG1h
ZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5z
ZSB2MS4wDQpAQCAtMTIsNCArMTIsNiBAQA0KICAqICAgICAJCQkJCQkJYnVnIDM1OTM2MiAtIEZV
UCBvZiBidWcgMzQ5MzI2OiBSZXNvdXJjZSBsZWFrIG9uIG5vbi1DbG9zZWFibGUgcmVzb3VyY2UN
CiAgKgkJCQkJCQkJYnVnIDM1ODkwMyAtIEZpbHRlciBwcmFjdGljYWxseSB1bmltcG9ydGFudCBy
ZXNvdXJjZSBsZWFrIHdhcm5pbmdzDQorICogICAgIEplc3BlciBTIE1vbGxlciA8amVzcGVyQHNl
bHNrYWJldC5vcmc+IC0gQ29udHJpYnV0aW9ucyBmb3INCisgKgkJCQkJCQkJYnVnIDM3ODY3NCAt
ICJUaGUgbWV0aG9kIGNhbiBiZSBkZWNsYXJlZCBhcyBzdGF0aWMiIGlzIHdyb25nDQogICoqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKiovDQogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29t
cGlsZXIubG9va3VwOw0KQEAgLTIwLDQgKzIyLDUgQEANCiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmludGVybmFsLmNvbXBpbGVyLmFzdC5XaWxkY2FyZDsNCiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmludGVybmFsLmNvbXBpbGVyLmNsYXNzZm10LkNsYXNzRmlsZUNvbnN0YW50czsNCitpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLnV0aWwuU2ltcGxlU2V0Ow0KIA0KIC8q
DQpAQCAtNzA2LDMgKzcwOSwxNyBAQA0KIAkJcmV0dXJuIHRoaXMudHlwZVZhcmlhYmxlOw0KIAl9
DQorCQ0KKwlwdWJsaWMgYm9vbGVhbiBpc0RlcGVuZGVudE9uVHlwZVBhcmFtZXRlcnNGcm9tKFJl
ZmVyZW5jZUJpbmRpbmcgZGVjbGFyaW5nQ2xhc3MsIFNpbXBsZVNldCBzZWVuKSB7DQorCQlpZiAo
c2Vlbi5pbmNsdWRlcyh0aGlzKSkgcmV0dXJuIGZhbHNlOw0KKwkJc2Vlbi5hZGQodGhpcyk7DQor
CQlpZiAodGhpcy50eXBlVmFyaWFibGUgIT0gbnVsbCkgew0KKwkJCWlmICh0aGlzLnR5cGVWYXJp
YWJsZS5pc0RlcGVuZGVudE9uVHlwZVBhcmFtZXRlcnNGcm9tKGRlY2xhcmluZ0NsYXNzLCBzZWVu
ICkpIHJldHVybiB0cnVlOw0KKwkJfQ0KKwkJaWYgKHRoaXMuYm91bmQgIT0gbnVsbCAmJiB0aGlz
LmJvdW5kLmlzRGVwZW5kZW50T25UeXBlUGFyYW1ldGVyc0Zyb20oZGVjbGFyaW5nQ2xhc3MsIHNl
ZW4pKSByZXR1cm4gdHJ1ZTsNCisJCWludCBhZGRpdGlvbmFsQm91bmRzID0gdGhpcy5vdGhlckJv
dW5kcyAhPSBudWxsID8gdGhpcy5vdGhlckJvdW5kcy5sZW5ndGggOiAwOw0KKwkJZm9yIChpbnQg
aSA9IDA7IGkgPCBhZGRpdGlvbmFsQm91bmRzOyBpKyspIHsNCisJCQlpZiAodGhpcy5vdGhlckJv
dW5kc1tpXS5pc0RlcGVuZGVudE9uVHlwZVBhcmFtZXRlcnNGcm9tKGRlY2xhcmluZ0NsYXNzLCBz
ZWVuKSkgcmV0dXJuIHRydWU7DQorCQl9DQorCQlyZXR1cm4gZmFsc2U7DQorCX0NCiB9
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>228162</attachid>
            <date>2013-03-08 18:11:00 -0500</date>
            <delta_ts>2013-03-09 19:23:50 -0500</delta_ts>
            <desc>Much simpler fix for these</desc>
            <filename>clipboard.txt</filename>
            <type>text/plain</type>
            <size>6484</size>
            <attacher name="Jesper Moller">jesper</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMAojUCBvcmcuZWNsaXBzZS5qZHQuY29yZQpk
aWZmIC0tZ2l0IGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3Qv
TWV0aG9kRGVjbGFyYXRpb24uamF2YSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvYXN0L01ldGhvZERlY2xhcmF0aW9uLmphdmEKaW5kZXggYzEyMWMyMi4uOWM2ZDI0
ZCAxMDA2NDQKLS0tIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvTWV0aG9kRGVjbGFyYXRpb24uamF2YQorKysgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2FzdC9NZXRob2REZWNsYXJhdGlvbi5qYXZhCkBAIC0xLDUgKzEsNSBA
QAogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMiBJ
Qk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMyBJ
Qk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMg
cHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWls
YWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAog
ICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUg
YXQKQEAgLTEzLDYgKzEzLDggQEAKICAqCQkJCQkJCQlidWcgMzY1NTE5IC0gZWRpdG9yaWFsIGNs
ZWFudXAgYWZ0ZXIgYnVnIDE4NjM0MiBhbmQgYnVnIDM2NTM4NwogICoJCQkJCQkJCWJ1ZyAzNjg1
NDYgLSBbY29tcGlsZXJdW3Jlc291cmNlXSBBdm9pZCByZW1haW5pbmcgZmFsc2UgcG9zaXRpdmVz
IGZvdW5kIHdoZW4gY29tcGlsaW5nIHRoZSBFY2xpcHNlIFNESwogICoJCQkJCQkJCWJ1ZyAzODMz
NjggLSBbY29tcGlsZXJdW251bGxdIHN5bnRhY3RpYyBudWxsIGFuYWx5c2lzIGZvciBmaWVsZCBy
ZWZlcmVuY2VzCisgKiAgICAgSmVzcGVyIFMgTW9sbGVyIDxqZXNwZXJAc2Vsc2thYmV0Lm9yZz4g
LSBDb250cmlidXRpb25zIGZvcgorICoJCQkJCQkJCWJ1ZyAzNzg2NzQgLSAiVGhlIG1ldGhvZCBj
YW4gYmUgZGVjbGFyZWQgYXMgc3RhdGljIiBpcyB3cm9uZwogICoqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KiovCiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3Q7CiAKQEAg
LTI0LDcgKzI2LDYgQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
Zmxvdy5GbG93Q29udGV4dDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIuZmxvdy5GbG93SW5mbzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIuaW1wbC5Db21waWxlck9wdGlvbnM7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFs
LmNvbXBpbGVyLmxvb2t1cC5CaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5h
bC5jb21waWxlci5sb29rdXAuQ2xhc3NTY29wZTsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50
ZXJuYWwuY29tcGlsZXIubG9va3VwLkV4dHJhQ29tcGlsZXJNb2RpZmllcnM7CiBpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5Mb2NhbFR5cGVCaW5kaW5nOwpA
QCAtNDcsNiArNDgsNyBAQAogCSAqLwogCXB1YmxpYyBNZXRob2REZWNsYXJhdGlvbihDb21waWxh
dGlvblJlc3VsdCBjb21waWxhdGlvblJlc3VsdCkgewogCQlzdXBlcihjb21waWxhdGlvblJlc3Vs
dCk7CisJCXRoaXMuYml0cyB8PSBBU1ROb2RlLkNhbkJlU3RhdGljOyAvLyBTaW5jZSB0aGlzIGNh
biBiZSByZXNldCBCRUZPUkUgdGhlIHJlc29sdmUgcGhhc2UsIHNldCBpdCBub3cKIAl9CiAKIAlw
dWJsaWMgdm9pZCBhbmFseXNlQ29kZShDbGFzc1Njb3BlIGNsYXNzU2NvcGUsIEZsb3dDb250ZXh0
IGZsb3dDb250ZXh0LCBGbG93SW5mbyBmbG93SW5mbykgewpAQCAtOTcsMTcgKzk5LDYgQEAKIAkJ
CS8vIG51bGxpdHkgYW5kIG1hcmsgYXMgYXNzaWduZWQKIAkJCWFuYWx5c2VBcmd1bWVudHMoZmxv
d0luZm8pOwogCi0JCQlpZiAodGhpcy5hcmd1bWVudHMgIT0gbnVsbCkgewotCQkJCWZvciAoaW50
IGkgPSAwLCBjb3VudCA9IHRoaXMuYXJndW1lbnRzLmxlbmd0aDsgaSA8IGNvdW50OyBpKyspIHsK
LQkJCQkJLy8gaWYgdGhpcyBtZXRob2QgdXNlcyBhIHR5cGUgcGFyYW1ldGVyIGRlY2xhcmVkIGJ5
IHRoZSBkZWNsYXJpbmcgY2xhc3MsCi0JCQkJCS8vIGl0IGNhbid0IGJlIHN0YXRpYy4gaHR0cHM6
Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTMxODY4MgotCQkJCQlpZiAo
dGhpcy5hcmd1bWVudHNbaV0uYmluZGluZyAhPSBudWxsICYmICh0aGlzLmFyZ3VtZW50c1tpXS5i
aW5kaW5nLnR5cGUgaW5zdGFuY2VvZiBUeXBlVmFyaWFibGVCaW5kaW5nKSkgewotCQkJCQkJQmlu
ZGluZyBkZWNsYXJpbmdFbGVtZW50ID0gKChUeXBlVmFyaWFibGVCaW5kaW5nKXRoaXMuYXJndW1l
bnRzW2ldLmJpbmRpbmcudHlwZSkuZGVjbGFyaW5nRWxlbWVudDsKLQkJCQkJCWlmICh0aGlzLmJp
bmRpbmcgIT0gbnVsbCAmJiB0aGlzLmJpbmRpbmcuZGVjbGFyaW5nQ2xhc3MgPT0gZGVjbGFyaW5n
RWxlbWVudCkKLQkJCQkJCQl0aGlzLmJpdHMgJj0gfkFTVE5vZGUuQ2FuQmVTdGF0aWM7Ci0JCQkJ
CX0KLQkJCQl9Ci0JCQl9CiAJCQlpZiAodGhpcy5iaW5kaW5nLmRlY2xhcmluZ0NsYXNzIGluc3Rh
bmNlb2YgTWVtYmVyVHlwZUJpbmRpbmcgJiYgIXRoaXMuYmluZGluZy5kZWNsYXJpbmdDbGFzcy5p
c1N0YXRpYygpKSB7CiAJCQkJLy8gbWV0aG9kIG9mIGEgbm9uLXN0YXRpYyBtZW1iZXIgdHlwZSBj
YW4ndCBiZSBzdGF0aWMuCiAJCQkJdGhpcy5iaXRzICY9IH5BU1ROb2RlLkNhbkJlU3RhdGljOwpA
QCAtMjY1LDkgKzI1Niw5IEBACiAJCQkJCS8vIHRoZSBtZXRob2QgSEFTIGEgYm9keSAtLT4gYWJz
dHJhY3QgbmF0aXZlIG1vZGlmaWVycyBhcmUgZm9yYmlkZW4KIAkJCQkJaWYgKCgodGhpcy5tb2Rp
ZmllcnMgJiBDbGFzc0ZpbGVDb25zdGFudHMuQWNjTmF0aXZlKSAhPSAwKSB8fCAoKHRoaXMubW9k
aWZpZXJzICYgQ2xhc3NGaWxlQ29uc3RhbnRzLkFjY0Fic3RyYWN0KSAhPSAwKSkKIAkJCQkJCXRo
aXMuc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkubWV0aG9kTmVlZGluZ05vQm9keSh0aGlzKTsKLQkJ
CQkJZWxzZSBpZiAodGhpcy5iaW5kaW5nICE9IG51bGwgJiYgIXRoaXMuYmluZGluZy5pc1N0YXRp
YygpICYmICEodGhpcy5iaW5kaW5nLmRlY2xhcmluZ0NsYXNzIGluc3RhbmNlb2YgTG9jYWxUeXBl
QmluZGluZykgJiYgIXJldHVybnNVbmRlY2xUeXBlVmFyKSB7Ci0JCQkJCQkvLyBOb3QgYSBtZXRo
b2Qgb2YgbG9jYWwgdHlwZSAtIGNhbiBiZSBzdGF0aWMKLQkJCQkJCXRoaXMuYml0cyB8PSBBU1RO
b2RlLkNhbkJlU3RhdGljOworCQkJCQllbHNlIGlmICh0aGlzLmJpbmRpbmcgPT0gbnVsbCB8fCB0
aGlzLmJpbmRpbmcuaXNTdGF0aWMoKSB8fCAodGhpcy5iaW5kaW5nLmRlY2xhcmluZ0NsYXNzIGlu
c3RhbmNlb2YgTG9jYWxUeXBlQmluZGluZykgfHwgcmV0dXJuc1VuZGVjbFR5cGVWYXIpIHsKKwkJ
CQkJCS8vIENhbm5vdCBiZSBzdGF0aWMgZm9yIG9uZSBvZiB0aGUgcmVhc29ucyBzdGF0ZWQgYWJv
dmUKKwkJCQkJCXRoaXMuYml0cyAmPSB+QVNUTm9kZS5DYW5CZVN0YXRpYzsKIAkJCQkJfQogCQkJ
CX0KIAkJfQpkaWZmIC0tZ2l0IGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9hc3QvVGhpc1JlZmVyZW5jZS5qYXZhIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hc3QvVGhpc1JlZmVyZW5jZS5qYXZhCmluZGV4IDAxNDVhZDMuLmZjMDVk
YzQgMTAwNjQ0Ci0tLSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
YXN0L1RoaXNSZWZlcmVuY2UuamF2YQorKysgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2FzdC9UaGlzUmVmZXJlbmNlLmphdmEKQEAgLTU2LDYgKzU2LDcgQEAKIAkJ
CW1ldGhvZFNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmVycm9yVGhpc1N1cGVySW5TdGF0aWModGhp
cyk7CiAJCQlyZXR1cm4gZmFsc2U7CiAJCX0KKwkJbWV0aG9kU2NvcGUucmVzZXRFbmNsb3NpbmdN
ZXRob2RTdGF0aWNGbGFnKCk7CiAJCXJldHVybiB0cnVlOwogCX0KIApkaWZmIC0tZ2l0IGNvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YSBj
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmph
dmEKaW5kZXggY2RmYmE1OS4uYWNjNjQ5MCAxMDA2NDQKLS0tIGNvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YQorKysgY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhCkBAIC0xMSw3
ICsxMSw4IEBACiAgKgkgCQkJCQkJCWJ1ZyAxODYzNDIgLSBbY29tcGlsZXJdW251bGxdIFVzaW5n
IGFubm90YXRpb25zIGZvciBudWxsIGNoZWNraW5nCiAgKgkJCQkJCQkJYnVnIDM4NzYxMiAtIFVu
cmVhY2hhYmxlIGNhdGNoIGJsb2NrLi4uZXhjZXB0aW9uIGlzIG5ldmVyIHRocm93biBmcm9tIHRo
ZSB0cnkKICAqCQkJCQkJCQlidWcgMzk1MDAyIC0gU2VsZiBib3VuZCBnZW5lcmljIGNsYXNzIGRv
ZXNuJ3QgcmVzb2x2ZSBib3VuZHMgcHJvcGVybHkgZm9yIHdpbGRjYXJkcyBmb3IgY2VydGFpbiBw
YXJhbWV0cmlzYXRpb24uCi0gKgkJCQkJCQkJYnVnIDQwMTQ1NiAtIENvZGUgY29tcGlsZXMgZnJv
bSBqYXZhYy9pbnRlbGxpaiwgYnV0IGZhaWxzIGZyb20gZWNsaXBzZQorICogICAgIEplc3BlciBT
IE1vbGxlciAtIENvbnRyaWJ1dGlvbnMgZm9yCisgKgkJCQkJCQkJYnVnIDM4MjcyMSAtIFsxLjhd
W2NvbXBpbGVyXSBFZmZlY3RpdmVseSBmaW5hbCB2YXJpYWJsZXMgbmVlZHMgc3BlY2lhbCB0cmVh
dG1lbnQKICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIubG9va3VwOwogCkBAIC0yNjEzLDYgKzI2MTQsNyBAQAogCSovCiAJ
ZmluYWwgQmluZGluZyBnZXRUeXBlT3JQYWNrYWdlKGNoYXJbXSBuYW1lLCBpbnQgbWFzaywgYm9v
bGVhbiBuZWVkUmVzb2x2ZSkgewogCQlTY29wZSBzY29wZSA9IHRoaXM7CisJCU1ldGhvZFNjb3Bl
IG1ldGhvZFNjb3BlID0gbnVsbDsKIAkJUmVmZXJlbmNlQmluZGluZyBmb3VuZFR5cGUgPSBudWxs
OwogCQlib29sZWFuIGluc2lkZVN0YXRpY0NvbnRleHQgPSBmYWxzZTsKIAkJYm9vbGVhbiBpbnNp
ZGVUeXBlQW5ub3RhdGlvbiA9IGZhbHNlOwpAQCAtMjYyNSw3ICsyNjI3LDcgQEAKIAkJCWRvbmUg
OiB3aGlsZSAodHJ1ZSkgeyAvLyBkb25lIHdoZW4gYSBDT01QSUxBVElPTl9VTklUX1NDT1BFIGlz
IGZvdW5kCiAJCQkJc3dpdGNoIChzY29wZS5raW5kKSB7CiAJCQkJCWNhc2UgTUVUSE9EX1NDT1BF
IDoKLQkJCQkJCU1ldGhvZFNjb3BlIG1ldGhvZFNjb3BlID0gKE1ldGhvZFNjb3BlKSBzY29wZTsK
KwkJCQkJCW1ldGhvZFNjb3BlID0gKE1ldGhvZFNjb3BlKSBzY29wZTsKIAkJCQkJCUFic3RyYWN0
TWV0aG9kRGVjbGFyYXRpb24gbWV0aG9kRGVjbCA9IG1ldGhvZFNjb3BlLnJlZmVyZW5jZU1ldGhv
ZCgpOwogCQkJCQkJaWYgKG1ldGhvZERlY2wgIT0gbnVsbCkgewogCQkJCQkJCWlmIChtZXRob2RE
ZWNsLmJpbmRpbmcgIT0gbnVsbCkgewpAQCAtMjY5OSw2ICsyNzAxLDggQEAKIAkJCQkJCWlmICh0
eXBlVmFyaWFibGUgIT0gbnVsbCkgewogCQkJCQkJCWlmIChpbnNpZGVTdGF0aWNDb250ZXh0KSAv
LyBkbyBub3QgY29uc2lkZXIgdGhpcyB0eXBlIG1vZGlmaWVyczogYWNjZXNzIGlzIGxlZ2l0ZSB3
aXRoaW4gc2FtZSB0eXBlCiAJCQkJCQkJCXJldHVybiBuZXcgUHJvYmxlbVJlZmVyZW5jZUJpbmRp
bmcobmV3IGNoYXJbXVtde25hbWV9LCB0eXBlVmFyaWFibGUsIFByb2JsZW1SZWFzb25zLk5vblN0
YXRpY1JlZmVyZW5jZUluU3RhdGljQ29udGV4dCk7CisJCQkJCQkJZWxzZSBpZiAobWV0aG9kU2Nv
cGUgIT0gbnVsbCkKKwkJCQkJCQkJbWV0aG9kU2NvcGUucmVzZXRFbmNsb3NpbmdNZXRob2RTdGF0
aWNGbGFnKCk7CiAJCQkJCQkJcmV0dXJuIHR5cGVWYXJpYWJsZTsKIAkJCQkJCX0KIAkJCQkJCWlu
c2lkZVN0YXRpY0NvbnRleHQgfD0gc291cmNlVHlwZS5pc1N0YXRpYygpOw==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>228163</attachid>
            <date>2013-03-08 18:12:00 -0500</date>
            <delta_ts>2013-03-09 19:23:58 -0500</delta_ts>
            <desc>Enabled tests</desc>
            <filename>clipboard.txt</filename>
            <type>text/plain</type>
            <size>3905</size>
            <attacher name="Jesper Moller">jesper</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMAojUCBvcmcuZWNsaXBzZS5qZHQuY29yZS50
ZXN0cy5jb21waWxlcgpkaWZmIC0tZ2l0IHNyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9j
b21waWxlci9yZWdyZXNzaW9uL1Byb2JsZW1UeXBlQW5kTWV0aG9kVGVzdC5qYXZhIHNyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1Byb2JsZW1UeXBlQW5k
TWV0aG9kVGVzdC5qYXZhCmluZGV4IGEwNTNkYTcuLjVlZjFiMzYgMTAwNjQ0Ci0tLSBzcmMvb3Jn
L2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9Qcm9ibGVtVHlwZUFu
ZE1ldGhvZFRlc3QuamF2YQorKysgc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBp
bGVyL3JlZ3Jlc3Npb24vUHJvYmxlbVR5cGVBbmRNZXRob2RUZXN0LmphdmEKQEAgLTgxNjMsNyAr
ODE2Myw3IEBACiB9CiAvL2h0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNn
aT9pZD0zNzg2NzQKIC8vQ2FuIGJlIHN0YXRpYyB3YXJuaW5nIHNob3duIGluIHRoZSB3cm9uZyBw
bGFjZXMsIGkuZS4gaWYgdGhlIHR5cGUgcGFyYW1ldGVyIGlzIHVzZWQgaW4gdGhlIHNpZ25hdHVy
ZQotcHVibGljIHZvaWQgX3Rlc3QzNzg2NzRfY29tbWVudDAoKSB7CitwdWJsaWMgdm9pZCB0ZXN0
Mzc4Njc0X2NvbW1lbnQwKCkgewogCXJ1blN0YXRpY1dhcm5pbmdDb25mb3JtVGVzdCgKIAkJIlRl
c3QuamF2YSIsIAogCQkicHVibGljIGNsYXNzIFRlc3Q8VD4ge1xuIiArIApAQCAtODE4Niw3ICs4
MTg2LDcgQEAKIAkpOwogfQogLy9odHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1
Zy5jZ2k/aWQ9Mzc4Njc0Ci1wdWJsaWMgdm9pZCBfdGVzdDM3ODY3NF9jb21tZW50MWIoKSB7Citw
dWJsaWMgdm9pZCB0ZXN0Mzc4Njc0X2NvbW1lbnQxYigpIHsKIAlydW5TdGF0aWNXYXJuaW5nQ29u
Zm9ybVRlc3QoCiAJCSJYLmphdmEiLCAKIAkJImltcG9ydCBqYXZhLnV0aWwuQ29sbGVjdGlvbjtc
biIgKwpAQCAtODIwMCw3ICs4MjAwLDcgQEAKIH0KIC8vaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3Jn
L2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM3ODY3NAogLy9DYW4gYmUgc3RhdGljIHdhcm5pbmcgc2hv
d24gaW4gdGhlIHdyb25nIHBsYWNlcwotcHVibGljIHZvaWQgX3Rlc3QzNzg2NzRfY29tbWVudDFj
KCkgeworcHVibGljIHZvaWQgdGVzdDM3ODY3NF9jb21tZW50MWMoKSB7CiAJcnVuU3RhdGljV2Fy
bmluZ0NvbmZvcm1UZXN0KAogCQkiWC5qYXZhIiwgCiAJCSJpbXBvcnQgamF2YS51dGlsLkNvbGxl
Y3Rpb247XG4iICsKQEAgLTgyMTUsNyArODIxNSw3IEBACiB9CiAvL2h0dHBzOi8vYnVncy5lY2xp
cHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNzg2NzQKIC8vQ2FuIGJlIHN0YXRpYyB3YXJu
aW5nIHNob3duIGluIHRoZSB3cm9uZyBwbGFjZXMKLXB1YmxpYyB2b2lkIF90ZXN0Mzc4Njc0X2Nv
bW1lbnQyKCkgeworcHVibGljIHZvaWQgdGVzdDM3ODY3NF9jb21tZW50MigpIHsKIAlydW5TdGF0
aWNXYXJuaW5nQ29uZm9ybVRlc3QoCiAJCSJYLmphdmEiLCAKIAkJInB1YmxpYyBjbGFzcyBYPFQ+
IHtcbiIgKyAKQEAgLTgyMjcsNyArODIyNyw3IEBACiAJKTsKIH0KIC8vaHR0cHM6Ly9idWdzLmVj
bGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM3ODY3NAotcHVibGljIHZvaWQgX3Rlc3Qz
Nzg2NzRfY29tbWVudDMoKSB7CitwdWJsaWMgdm9pZCB0ZXN0Mzc4Njc0X2NvbW1lbnQzKCkgewog
CXJ1blN0YXRpY1dhcm5pbmdDb25mb3JtVGVzdCgKIAkJIlRlc3QuamF2YSIsIAogCQkicHVibGlj
IGNsYXNzIFRlc3Qge1xuIiArIApAQCAtODI0NSw3ICs4MjQ1LDcgQEAKIH0KIC8vaHR0cHM6Ly9i
dWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM3ODY3NAogLy9DYW4gYmUgc3Rh
dGljIHdhcm5pbmcgc2hvd24gaW4gdGhlIHdyb25nIHBsYWNlcwotcHVibGljIHZvaWQgX3Rlc3Qz
Nzg2NzRfY29tbWVudDVhKCkgeworcHVibGljIHZvaWQgdGVzdDM3ODY3NF9jb21tZW50NWEoKSB7
CiAJcnVuU3RhdGljV2FybmluZ0NvbmZvcm1UZXN0KAogCQkiVGVzdC5qYXZhIiwgCiAJCSJwdWJs
aWMgY2xhc3MgVGVzdDxUPiB7XG4iICsgCkBAIC04MjY4LDcgKzgyNjgsNyBAQAogCSk7CiB9CiAv
L2h0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNzg2NzQKLXB1
YmxpYyB2b2lkIF90ZXN0Mzc4Njc0X2NvbW1lbnQ1YigpIHsKK3B1YmxpYyB2b2lkIHRlc3QzNzg2
NzRfY29tbWVudDViKCkgewogCXJ1blN0YXRpY1dhcm5pbmdDb25mb3JtVGVzdCgKIAkJIlRlc3Qu
amF2YSIsIAogCQkicHVibGljIGNsYXNzIFRlc3Q8VD4ge1xuIiArIApAQCAtODI4Nyw3ICs4Mjg3
LDcgQEAKIAkpOwogfQogLy9odHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5j
Z2k/aWQ9Mzc4Njc0Ci1wdWJsaWMgdm9pZCBfdGVzdDM3ODY3NF9jb21tZW50OSgpIHsKK3B1Ymxp
YyB2b2lkIHRlc3QzNzg2NzRfY29tbWVudDkoKSB7CiAJcnVuU3RhdGljV2FybmluZ0NvbmZvcm1U
ZXN0KAogCQkiVGVzdC5qYXZhIiwgCiAJCSJwdWJsaWMgY2xhc3MgVGVzdDxUPiB7XG4iICsgCkBA
IC04MzA1LDcgKzgzMDUsNyBAQAogCSk7CiB9CiAvL2h0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9i
dWdzL3Nob3dfYnVnLmNnaT9pZD0zNzg2NzQKLXB1YmxpYyB2b2lkIF90ZXN0Mzc4Njc0X2NvbW1l
bnQxMSgpIHsKK3B1YmxpYyB2b2lkIHRlc3QzNzg2NzRfY29tbWVudDExKCkgewogCXJ1blN0YXRp
Y1dhcm5pbmdDb25mb3JtVGVzdCgKIAkJIlRlc3QuamF2YSIsIAogCQkicHVibGljIGNsYXNzIFRl
c3Q8VD4ge1xuIiArIApAQCAtODMyOCw3ICs4MzI4LDcgQEAKIAkpOwogfQogLy9odHRwczovL2J1
Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9Mzc4Njc0Ci1wdWJsaWMgdm9pZCBf
dGVzdDM3ODY3NF9jb21tZW50MjFhKCkgeworcHVibGljIHZvaWQgdGVzdDM3ODY3NF9jb21tZW50
MjFhKCkgewogCXJ1blN0YXRpY1dhcm5pbmdDb25mb3JtVGVzdCgKIAkJIlguamF2YSIsIAogCQki
cHVibGljIGNsYXNzIFg8UCBleHRlbmRzIEV4Y2VwdGlvbj4ge1xuIiArCkBAIC04MzM5LDcgKzgz
MzksNyBAQAogCSk7CiB9CiAvL2h0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVn
LmNnaT9pZD0zNzg2NzQKLXB1YmxpYyB2b2lkIF90ZXN0Mzc4Njc0X2NvbW1lbnQyMWIoKSB7Citw
dWJsaWMgdm9pZCB0ZXN0Mzc4Njc0X2NvbW1lbnQyMWIoKSB7CiAJcnVuU3RhdGljV2FybmluZ0Nv
bmZvcm1UZXN0KAogCQkiWC5qYXZhIiwgCiAJCSJwdWJsaWMgY2xhc3MgWDxQIGV4dGVuZHMgRXhj
ZXB0aW9uPiB7XG4iICsKQEAgLTgzNDksNyArODM0OSw3IEBACiAJCSJ9XG4iCiAJKTsKIH0vL2h0
dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNzg2NzQKLXB1Ymxp
YyB2b2lkIF90ZXN0Mzc4Njc0X2NvbW1lbnQyMWMoKSB7CitwdWJsaWMgdm9pZCB0ZXN0Mzc4Njc0
X2NvbW1lbnQyMWMoKSB7CiAJcnVuU3RhdGljV2FybmluZ0NvbmZvcm1UZXN0KAogCQkiWC5qYXZh
IiwgCiAJCSJwdWJsaWMgY2xhc3MgWDxQIGV4dGVuZHMgRXhjZXB0aW9uPiB7XG4iICsKQEAgLTgz
NjIsNyArODM2Miw3IEBACiAJCSJ9XG4iCiAJKTsKIH0vL2h0dHBzOi8vYnVncy5lY2xpcHNlLm9y
Zy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNzg2NzQKLXB1YmxpYyB2b2lkIF90ZXN0Mzc4Njc0X2Nv
bW1lbnQyMWQoKSB7CitwdWJsaWMgdm9pZCB0ZXN0Mzc4Njc0X2NvbW1lbnQyMWQoKSB7CiAJcnVu
U3RhdGljV2FybmluZ0NvbmZvcm1UZXN0KAogCQkiWC5qYXZhIiwgCiAJCSJwdWJsaWMgY2xhc3Mg
WDxQIGV4dGVuZHMgRXhjZXB0aW9uPiB7XG4iICs=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>228234</attachid>
            <date>2013-03-11 20:12:00 -0400</date>
            <delta_ts>2013-03-11 20:17:44 -0400</delta_ts>
            <desc>Clean up of some of the scattered tests for non-staticability</desc>
            <filename>clipboard.txt</filename>
            <type>text/plain</type>
            <size>15386</size>
            <attacher name="Jesper Moller">jesper</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMAojUCBvcmcuZWNsaXBzZS5qZHQuY29yZQpk
aWZmIC0tZ2l0IGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3Qv
RmllbGRSZWZlcmVuY2UuamF2YSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvYXN0L0ZpZWxkUmVmZXJlbmNlLmphdmEKaW5kZXggZmEwNGJiZi4uOWY1YjEzOSAxMDA2
NDQKLS0tIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRmll
bGRSZWZlcmVuY2UuamF2YQorKysgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FzdC9GaWVsZFJlZmVyZW5jZS5qYXZhCkBAIC0xLDUgKzEsNSBAQAogLyoqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMiBJQk0gQ29ycG9yYXRp
b24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRp
b24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQg
dGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0
aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNj
b21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKQEAgLTExLDYg
KzExLDggQEAKICAqCQkJCQkJCQlidWcgMTg1NjgyIC0gSW5jcmVtZW50L2RlY3JlbWVudCBvcGVy
YXRvcnMgbWFyayBsb2NhbCB2YXJpYWJsZXMgYXMgcmVhZAogICoJCQkJCQkJCWJ1ZyAzMzE2NDkg
LSBbY29tcGlsZXJdW251bGxdIGNvbnNpZGVyIG51bGwgYW5ub3RhdGlvbnMgZm9yIGZpZWxkcwog
ICoJCQkJCQkJCWJ1ZyAzODMzNjggLSBbY29tcGlsZXJdW251bGxdIHN5bnRhY3RpYyBudWxsIGFu
YWx5c2lzIGZvciBmaWVsZCByZWZlcmVuY2VzCisgKiAgICAgSmVzcGVyIFMgTW9sbGVyIC0gQ29u
dHJpYnV0aW9ucyBmb3IKKyAqCQkJCQkJCQlidWcgMzgyNzIxIC0gWzEuOF1bY29tcGlsZXJdIEVm
ZmVjdGl2ZWx5IGZpbmFsIHZhcmlhYmxlcyBuZWVkcyBzcGVjaWFsIHRyZWF0bWVudAogICoqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKiovCiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21w
aWxlci5hc3Q7CiAKQEAgLTE0NywxMiArMTQ5LDYgQEAKIAkJLy8gaHR0cHM6Ly9idWdzLmVjbGlw
c2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTMxODY4MgogCQlpZiAodGhpcy5yZWNlaXZlci5p
c1RoaXMoKSkgewogCQkJY3VycmVudFNjb3BlLnJlc2V0RGVjbGFyaW5nQ2xhc3NNZXRob2RTdGF0
aWNGbGFnKHRoaXMuYmluZGluZy5kZWNsYXJpbmdDbGFzcyk7Ci0JCX0KLQl9IGVsc2UgaWYgKHRo
aXMucmVjZWl2ZXIuaXNUaGlzKCkpIHsKLQkJaWYgKCh0aGlzLnJlY2VpdmVyLmJpdHMgJiBBU1RO
b2RlLklzSW1wbGljaXRUaGlzKSA9PSAwKSB7Ci0JCQkvLyBleHBsaWNpdCB0aGlzIHJlY2VpdmVy
LCBub3QgYWxsb3dlZCBpbiBzdGF0aWMgY29udGV4dAotCQkJLy8gaHR0cHM6Ly9idWdzLmVjbGlw
c2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTMxODY4MgotCQkJY3VycmVudFNjb3BlLnJlc2V0
RW5jbG9zaW5nTWV0aG9kU3RhdGljRmxhZygpOwogCQl9CiAJfQogCmRpZmYgLS1naXQgY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Mb2NhbERlY2xhcmF0aW9u
LmphdmEgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Mb2Nh
bERlY2xhcmF0aW9uLmphdmEKaW5kZXggOTg4YmM1Yy4uZmE1ODE1MSAxMDA2NDQKLS0tIGNvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTG9jYWxEZWNsYXJhdGlv
bi5qYXZhCisrKyBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0
L0xvY2FsRGVjbGFyYXRpb24uamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTIgSUJNIENvcnBvcmF0aW9uIGFuZCBv
dGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTMgSUJNIENvcnBvcmF0aW9uIGFuZCBv
dGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2Nv
bXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1z
IG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVz
IHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC0yMCw2ICsyMCw4IEBA
CiAgKgkJCQkJCQlidWcgMzk0NzY4IC0gW2NvbXBpbGVyXVtyZXNvdXJjZV0gSW5jb3JyZWN0IHJl
c291cmNlIGxlYWsgd2FybmluZyB3aGVuIGNyZWF0aW5nIHN0cmVhbSBpbiBjb25kaXRpb25hbAog
ICoJCQkJCQkJYnVnIDM5NTAwMiAtIFNlbGYgYm91bmQgZ2VuZXJpYyBjbGFzcyBkb2Vzbid0IHJl
c29sdmUgYm91bmRzIHByb3Blcmx5IGZvciB3aWxkY2FyZHMgZm9yIGNlcnRhaW4gcGFyYW1ldHJp
c2F0aW9uLgogICoJCQkJCQkJYnVnIDM4MzM2OCAtIFtjb21waWxlcl1bbnVsbF0gc3ludGFjdGlj
IG51bGwgYW5hbHlzaXMgZm9yIGZpZWxkIHJlZmVyZW5jZXMKKyAqICAgICBKZXNwZXIgUyBNb2xs
ZXIgLSBDb250cmlidXRpb25zIGZvcgorICoJCQkJCQkJYnVnIDM4MjcyMSAtIFsxLjhdW2NvbXBp
bGVyXSBFZmZlY3RpdmVseSBmaW5hbCB2YXJpYWJsZXMgbmVlZHMgc3BlY2lhbCB0cmVhdG1lbnQK
ICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqLwogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJu
YWwuY29tcGlsZXIuYXN0OwogCkBAIC00OSw0MiArNTEsNiBAQAogCS8vIHJlY29yZCB2YXJpYWJs
ZSBpbml0aWFsaXphdGlvbiBpZiBhbnkKIAlpZiAoKGZsb3dJbmZvLnRhZ0JpdHMgJiBGbG93SW5m
by5VTlJFQUNIQUJMRV9PUl9ERUFEKSA9PSAwKSB7CiAJCXRoaXMuYml0cyB8PSBBU1ROb2RlLklz
TG9jYWxEZWNsYXJhdGlvblJlYWNoYWJsZTsgLy8gb25seSBzZXQgaWYgYWN0dWFsbHkgcmVhY2hl
ZAotCX0KLQlpZiAodGhpcy5iaW5kaW5nICE9IG51bGwgJiYgdGhpcy50eXBlLnJlc29sdmVkVHlw
ZSBpbnN0YW5jZW9mIFR5cGVWYXJpYWJsZUJpbmRpbmcpIHsKLQkJVHlwZVZhcmlhYmxlQmluZGlu
ZyB0eXBlVmFyaWFibGVCaW5kaW5nID0gKFR5cGVWYXJpYWJsZUJpbmRpbmcpIHRoaXMudHlwZS5y
ZXNvbHZlZFR5cGU7Ci0JCU1ldGhvZFNjb3BlIG1ldGhvZFNjb3BlPSB0aGlzLmJpbmRpbmcuZGVj
bGFyaW5nU2NvcGUubWV0aG9kU2NvcGUoKTsKLQkJaWYgKG1ldGhvZFNjb3BlICE9IG51bGwgJiYg
bWV0aG9kU2NvcGUucmVmZXJlbmNlQ29udGV4dCBpbnN0YW5jZW9mIFR5cGVEZWNsYXJhdGlvbikg
ewotCQkJLy8gaW5pdGlhbGl6YXRpb24gc2NvcGUKLQkJCW1ldGhvZFNjb3BlID0gbWV0aG9kU2Nv
cGUuZW5jbG9zaW5nTWV0aG9kU2NvcGUoKTsKLQkJfQotCQlBYnN0cmFjdE1ldGhvZERlY2xhcmF0
aW9uIG1ldGhvZERlY2xhcmF0aW9uID0gKG1ldGhvZFNjb3BlICE9IG51bGwpID8gbWV0aG9kU2Nv
cGUucmVmZXJlbmNlTWV0aG9kKCkgOiBudWxsOwotCQlpZiAobWV0aG9kRGVjbGFyYXRpb24gIT0g
bnVsbCAmJiBtZXRob2REZWNsYXJhdGlvbi5iaW5kaW5nICE9IG51bGwpIHsKLQkJCVR5cGVWYXJp
YWJsZUJpbmRpbmdbXSB0eXBlVmFyaWFibGVzID0gbWV0aG9kRGVjbGFyYXRpb24uYmluZGluZy50
eXBlVmFyaWFibGVzKCk7Ci0JCQlpZiAodHlwZVZhcmlhYmxlcyA9PSBudWxsKSB0eXBlVmFyaWFi
bGVzID0gQmluZGluZy5OT19UWVBFX1ZBUklBQkxFUzsKLQkJCWlmICh0eXBlVmFyaWFibGVzID09
IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMpIHsKLQkJCQkvLyBNZXRob2QgZGVjbGFyZXMgbm8g
dHlwZSB2YXJpYWJsZXMuCi0JCQkJaWYgKHR5cGVWYXJpYWJsZUJpbmRpbmcgIT0gbnVsbCAmJiB0
eXBlVmFyaWFibGVCaW5kaW5nLmRlY2xhcmluZ0VsZW1lbnQgaW5zdGFuY2VvZiBUeXBlQmluZGlu
ZykKLQkJCQkJY3VycmVudFNjb3BlLnJlc2V0RGVjbGFyaW5nQ2xhc3NNZXRob2RTdGF0aWNGbGFn
KChUeXBlQmluZGluZykgdHlwZVZhcmlhYmxlQmluZGluZy5kZWNsYXJpbmdFbGVtZW50KTsKLQkJ
CQllbHNlCi0JCQkJCWN1cnJlbnRTY29wZS5yZXNldEVuY2xvc2luZ01ldGhvZFN0YXRpY0ZsYWco
KTsKLQkJCX0gZWxzZSB7Ci0JCQkJLy8gdG8gY2hlY2sgd2hldGhlciB0aGUgcmVzb2x2ZWQgdHlw
ZSBmb3IgdGhpcyBpcyBkZWNsYXJlZCBieSBlbmNsb3NpbmcgbWV0aG9kIGFzIGEgdHlwZSB2YXJp
YWJsZQotCQkJCWJvb2xlYW4gdXNlc0VuY2xvc2luZ1R5cGVWYXIgPSBmYWxzZTsgCi0JCQkJZm9y
IChpbnQgaSA9IDA7IGkgPCB0eXBlVmFyaWFibGVzLmxlbmd0aCA7IGkgKyspIHsKLQkJCQkJaWYg
KHR5cGVWYXJpYWJsZXNbaV0gPT0gdGhpcy50eXBlLnJlc29sdmVkVHlwZSl7Ci0JCQkJCQl1c2Vz
RW5jbG9zaW5nVHlwZVZhciA9IHRydWU7Ci0JCQkJCQlicmVhazsKLQkJCQkJfQotCQkJCX0KLQkJ
CQlpZiAoIXVzZXNFbmNsb3NpbmdUeXBlVmFyKSB7Ci0JCQkJCS8vIHVzZXMgYSB0eXBlIHZhcmlh
YmxlIG5vdCBkZWNsYXJlZCBieSBlbmNsb3NpbmcgbWV0aG9kCi0JCQkJCWlmICh0eXBlVmFyaWFi
bGVCaW5kaW5nICE9IG51bGwgJiYgdHlwZVZhcmlhYmxlQmluZGluZy5kZWNsYXJpbmdFbGVtZW50
IGluc3RhbmNlb2YgVHlwZUJpbmRpbmcpCi0JCQkJCQljdXJyZW50U2NvcGUucmVzZXREZWNsYXJp
bmdDbGFzc01ldGhvZFN0YXRpY0ZsYWcoKFR5cGVCaW5kaW5nKSB0eXBlVmFyaWFibGVCaW5kaW5n
LmRlY2xhcmluZ0VsZW1lbnQpOwotCQkJCQllbHNlCi0JCQkJCQljdXJyZW50U2NvcGUucmVzZXRF
bmNsb3NpbmdNZXRob2RTdGF0aWNGbGFnKCk7Ci0JCQkJfQotCQkJfQotCQl9CiAJfQogCWlmICh0
aGlzLmluaXRpYWxpemF0aW9uID09IG51bGwpIHsKIAkJcmV0dXJuIGZsb3dJbmZvOwpkaWZmIC0t
Z2l0IGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTWVzc2Fn
ZVNlbmQuamF2YSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0
L01lc3NhZ2VTZW5kLmphdmEKaW5kZXggYTZlNmJkYi4uYmY4OTY4OSAxMDA2NDQKLS0tIGNvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTWVzc2FnZVNlbmQuamF2
YQorKysgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9NZXNz
YWdlU2VuZC5qYXZhCkBAIC0yNCw2ICsyNCw4IEBACiAgKgkJCQkJCQkJYnVnIDMzMTY0OSAtIFtj
b21waWxlcl1bbnVsbF0gY29uc2lkZXIgbnVsbCBhbm5vdGF0aW9ucyBmb3IgZmllbGRzCiAgKgkJ
CQkJCQkJYnVnIDM4MzM2OCAtIFtjb21waWxlcl1bbnVsbF0gc3ludGFjdGljIG51bGwgYW5hbHlz
aXMgZm9yIGZpZWxkIHJlZmVyZW5jZXMKICAqCQkJCQkJCQlidWcgMzgyMDY5IC0gW251bGxdIE1h
a2UgdGhlIG51bGwgYW5hbHlzaXMgY29uc2lkZXIgSlVuaXQncyBhc3NlcnROb3ROdWxsIHNpbWls
YXJseSB0byBhc3NlcnRpb25zCisgKiAgICAgSmVzcGVyIFMgTW9sbGVyIC0gQ29udHJpYnV0aW9u
cyBmb3IKKyAqCQkJCQkJCQlidWcgMzgyNzIxIC0gWzEuOF1bY29tcGlsZXJdIEVmZmVjdGl2ZWx5
IGZpbmFsIHZhcmlhYmxlcyBuZWVkcyBzcGVjaWFsIHRyZWF0bWVudAogICoqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKiovCiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3Q7
CiAKQEAgLTEyMSwxMSArMTIzLDYgQEAKIAkJaWYgKHRoaXMucmVjZWl2ZXIuaXNUaGlzKCkgfHwg
dGhpcy5yZWNlaXZlci5pc1N1cGVyKCkpIHsKIAkJCS8vIGFjY2Vzc2luZyBub24tc3RhdGljIG1l
dGhvZCB3aXRob3V0IGFuIG9iamVjdAogCQkJY3VycmVudFNjb3BlLnJlc2V0RGVjbGFyaW5nQ2xh
c3NNZXRob2RTdGF0aWNGbGFnKHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlKTsKLQkJfQotCX0gZWxz
ZSBpZiAodGhpcy5yZWNlaXZlci5pc1RoaXMoKSkgewotCQlpZiAoKHRoaXMucmVjZWl2ZXIuYml0
cyAmIEFTVE5vZGUuSXNJbXBsaWNpdFRoaXMpID09IDApIHsKLQkJCS8vIGV4cGxpY2l0IHRoaXMg
cmVjZWl2ZXIsIG5vdCBhbGxvd2VkIGluIHN0YXRpYyBjb250ZXh0Ci0JCQljdXJyZW50U2NvcGUu
cmVzZXRFbmNsb3NpbmdNZXRob2RTdGF0aWNGbGFnKCk7CiAJCX0KIAl9CiAKZGlmZiAtLWdpdCBj
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L01ldGhvZERlY2xh
cmF0aW9uLmphdmEgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fz
dC9NZXRob2REZWNsYXJhdGlvbi5qYXZhCmluZGV4IDVjNjExMjUuLjM2NzViNDYgMTAwNjQ0Ci0t
LSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L01ldGhvZERl
Y2xhcmF0aW9uLmphdmEKKysrIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9hc3QvTWV0aG9kRGVjbGFyYXRpb24uamF2YQpAQCAtNDgsNyArNDgsNyBAQAogCSAqLwog
CXB1YmxpYyBNZXRob2REZWNsYXJhdGlvbihDb21waWxhdGlvblJlc3VsdCBjb21waWxhdGlvblJl
c3VsdCkgewogCQlzdXBlcihjb21waWxhdGlvblJlc3VsdCk7Ci0JCXRoaXMuYml0cyB8PSBBU1RO
b2RlLkNhbkJlU3RhdGljOyAvLyBTdGFydCB3aXRoIHRoaXMgYXNzdW1wdGlvbiwgd2lsbCBjb3Vy
c2UgY29ycmVjdCBkdXJpbmcgcmVzb2x2ZS4KKwkJdGhpcy5iaXRzIHw9IEFTVE5vZGUuQ2FuQmVT
dGF0aWM7IC8vIFN0YXJ0IHdpdGggdGhpcyBhc3N1bXB0aW9uLCB3aWxsIGNvdXJzZSBjb3JyZWN0
IGR1cmluZyByZXNvbHZlIGFuZCBhbmFseXNlQ29kZS4KIAl9CiAKIAlwdWJsaWMgdm9pZCBhbmFs
eXNlQ29kZShDbGFzc1Njb3BlIGNsYXNzU2NvcGUsIEZsb3dDb250ZXh0IGZsb3dDb250ZXh0LCBG
bG93SW5mbyBmbG93SW5mbykgewpAQCAtMjUzLDcgKzI1Myw3IEBACiAJCQkJCQlpZiAoKHRoaXMu
bW9kaWZpZXJzICYgQ2xhc3NGaWxlQ29uc3RhbnRzLkFjY0Fic3RyYWN0KSA9PSAwKQogCQkJCQkJ
CXRoaXMuc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkubWV0aG9kTmVlZEJvZHkodGhpcyk7CiAJCQkJ
fSBlbHNlIHsKLQkJCQkJLy8gdGhlIG1ldGhvZCBIQVMgYSBib2R5IC0tPiBhYnN0cmFjdCBuYXRp
dmUgbW9kaWZpZXJzIGFyZSBmb3JiaWRlbgorCQkJCQkvLyB0aGUgbWV0aG9kIEhBUyBhIGJvZHkg
LS0+IGFic3RyYWN0IG5hdGl2ZSBtb2RpZmllcnMgYXJlIGZvcmJpZGRlbgogCQkJCQlpZiAoKCh0
aGlzLm1vZGlmaWVycyAmIENsYXNzRmlsZUNvbnN0YW50cy5BY2NOYXRpdmUpICE9IDApIHx8ICgo
dGhpcy5tb2RpZmllcnMgJiBDbGFzc0ZpbGVDb25zdGFudHMuQWNjQWJzdHJhY3QpICE9IDApKQog
CQkJCQkJdGhpcy5zY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5tZXRob2ROZWVkaW5nTm9Cb2R5KHRo
aXMpOwogCQkJCQllbHNlIGlmICh0aGlzLmJpbmRpbmcgPT0gbnVsbCB8fCB0aGlzLmJpbmRpbmcu
aXNTdGF0aWMoKSB8fCAodGhpcy5iaW5kaW5nLmRlY2xhcmluZ0NsYXNzIGluc3RhbmNlb2YgTG9j
YWxUeXBlQmluZGluZykgfHwgcmV0dXJuc1VuZGVjbFR5cGVWYXIpIHsKZGlmZiAtLWdpdCBjb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1N1cGVyUmVmZXJlbmNl
LmphdmEgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9TdXBl
clJlZmVyZW5jZS5qYXZhCmluZGV4IDU0NDRkMmEuLjdlZGI5OWYgMTAwNjQ0Ci0tLSBjb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1N1cGVyUmVmZXJlbmNlLmph
dmEKKysrIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvU3Vw
ZXJSZWZlcmVuY2UuamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
Ci0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTAgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMu
CisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTMgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMu
CiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlp
bmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRo
ZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMg
ZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC03LDEyICs3LDEyIEBACiAgKgog
ICogQ29udHJpYnV0b3JzOgogICogICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJIGFu
ZCBpbXBsZW1lbnRhdGlvbgorICogICAgIEplc3BlciBTIE1vbGxlciAtIENvbnRyaWJ1dGlvbnMg
Zm9yCisgKgkJCQkJCQkJYnVnIDM4MjcyMSAtIFsxLjhdW2NvbXBpbGVyXSBFZmZlY3RpdmVseSBm
aW5hbCB2YXJpYWJsZXMgbmVlZHMgc3BlY2lhbCB0cmVhdG1lbnQKICAqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqLwogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0Owog
CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLkFTVFZpc2l0b3I7Ci1p
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmZsb3cuRmxvd0NvbnRleHQ7
Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmZsb3cuRmxvd0luZm87
CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmltcGwuQ29uc3RhbnQ7
CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5CbG9ja1Nj
b3BlOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUmVm
ZXJlbmNlQmluZGluZzsKQEAgLTY3LDEwICs2Nyw1IEBACiAJcHVibGljIHZvaWQgdHJhdmVyc2Uo
QVNUVmlzaXRvciB2aXNpdG9yLCBCbG9ja1Njb3BlIGJsb2NrU2NvcGUpIHsKIAkJdmlzaXRvci52
aXNpdCh0aGlzLCBibG9ja1Njb3BlKTsKIAkJdmlzaXRvci5lbmRWaXNpdCh0aGlzLCBibG9ja1Nj
b3BlKTsKLQl9Ci0JCi0JcHVibGljIEZsb3dJbmZvIGFuYWx5c2VDb2RlKEJsb2NrU2NvcGUgY3Vy
cmVudFNjb3BlLCBGbG93Q29udGV4dCBmbG93Q29udGV4dCwgRmxvd0luZm8gZmxvd0luZm8sIGJv
b2xlYW4gdmFsdWVSZXF1aXJlZCkgewotCQljdXJyZW50U2NvcGUucmVzZXRFbmNsb3NpbmdNZXRo
b2RTdGF0aWNGbGFnKCk7Ci0JCXJldHVybiBhbmFseXNlQ29kZShjdXJyZW50U2NvcGUsIGZsb3dD
b250ZXh0LCBmbG93SW5mbyk7CiAJfQogfQpkaWZmIC0tZ2l0IGNvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvVGhpc1JlZmVyZW5jZS5qYXZhIGNvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvVGhpc1JlZmVyZW5jZS5qYXZhCmlu
ZGV4IGZjMDVkYzQuLmNmYTM4M2IgMTAwNjQ0Ci0tLSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L1RoaXNSZWZlcmVuY2UuamF2YQorKysgY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9UaGlzUmVmZXJlbmNlLmphdmEKQEAg
LTEsNSArMSw1IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAy
MDAwLCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAy
MDAwLCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNl
cnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJl
IG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGlj
ZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlz
IGF2YWlsYWJsZSBhdApAQCAtMTAsNiArMTAsOCBAQAogICogICAgIFN0ZXBoYW4gSGVycm1hbm4g
LSBDb250cmlidXRpb24gZm9yCiAgKgkJCQkJCQkJYnVnIDMzMTY0OSAtIFtjb21waWxlcl1bbnVs
bF0gY29uc2lkZXIgbnVsbCBhbm5vdGF0aW9ucyBmb3IgZmllbGRzCiAgKgkJCQkJCQkJYnVnIDM4
MzM2OCAtIFtjb21waWxlcl1bbnVsbF0gc3ludGFjdGljIG51bGwgYW5hbHlzaXMgZm9yIGZpZWxk
IHJlZmVyZW5jZXMKKyAqICAgICBKZXNwZXIgUyBNb2xsZXIgLSBDb250cmlidXRpb25zIGZvcgor
ICoJCQkJCQkJCWJ1ZyAzODI3MjEgLSBbMS44XVtjb21waWxlcl0gRWZmZWN0aXZlbHkgZmluYWwg
dmFyaWFibGVzIG5lZWRzIHNwZWNpYWwgdHJlYXRtZW50CiAgKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
Ki8KIHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdDsKIApAQCAt
MTMwLDE0ICsxMzIsNSBAQAogCiAJCXZpc2l0b3IudmlzaXQodGhpcywgYmxvY2tTY29wZSk7CiAJ
CXZpc2l0b3IuZW5kVmlzaXQodGhpcywgYmxvY2tTY29wZSk7Ci0JfQotCi0JcHVibGljIEZsb3dJ
bmZvIGFuYWx5c2VDb2RlKEJsb2NrU2NvcGUgY3VycmVudFNjb3BlLCBGbG93Q29udGV4dCBmbG93
Q29udGV4dCwgRmxvd0luZm8gZmxvd0luZm8pIHsKLQkJaWYgKCFpc0ltcGxpY2l0VGhpcygpKSB7
Ci0JCQkvLyBleHBsaWNpdCB0aGlzIHJlZmVyZW5jZSwgbm90IGFsbG93ZWQgaW4gc3RhdGljIGNv
bnRleHQKLQkJCS8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9p
ZD0zMzU3ODAKLQkJCWN1cnJlbnRTY29wZS5yZXNldEVuY2xvc2luZ01ldGhvZFN0YXRpY0ZsYWco
KTsKLQkJfQotCQlyZXR1cm4gc3VwZXIuYW5hbHlzZUNvZGUoY3VycmVudFNjb3BlLCBmbG93Q29u
dGV4dCwgZmxvd0luZm8pOwogCX0KIH0KZGlmZiAtLWdpdCBjb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEgY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhCmluZGV4IDE4ZmFmMzIu
LmZiZDFiYjAgMTAwNjQ0Ci0tLSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvbG9va3VwL1Njb3BlLmphdmEKKysrIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YQpAQCAtMTcxMiwxMyArMTcxMiwxNCBAQAog
CQkJCVByb2JsZW1GaWVsZEJpbmRpbmcgZm91bmRJbnNpZGVQcm9ibGVtID0gbnVsbDsKIAkJCQkv
LyBpbnNpZGUgQ29uc3RydWN0b3IgY2FsbCBvciBpbnNpZGUgc3RhdGljIGNvbnRleHQKIAkJCQlT
Y29wZSBzY29wZSA9IHRoaXM7CisJCQkJTWV0aG9kU2NvcGUgbWV0aG9kU2NvcGUgPSBudWxsOwog
CQkJCWludCBkZXB0aCA9IDA7CiAJCQkJaW50IGZvdW5kRGVwdGggPSAwOwogCQkJCVJlZmVyZW5j
ZUJpbmRpbmcgZm91bmRBY3R1YWxSZWNlaXZlclR5cGUgPSBudWxsOwogCQkJCWRvbmUgOiB3aGls
ZSAodHJ1ZSkgeyAvLyBkb25lIHdoZW4gYSBDT01QSUxBVElPTl9VTklUX1NDT1BFIGlzIGZvdW5k
CiAJCQkJCXN3aXRjaCAoc2NvcGUua2luZCkgewogCQkJCQkJY2FzZSBNRVRIT0RfU0NPUEUgOgot
CQkJCQkJCU1ldGhvZFNjb3BlIG1ldGhvZFNjb3BlID0gKE1ldGhvZFNjb3BlKSBzY29wZTsKKwkJ
CQkJCQltZXRob2RTY29wZSA9IChNZXRob2RTY29wZSkgc2NvcGU7CiAJCQkJCQkJaW5zaWRlU3Rh
dGljQ29udGV4dCB8PSBtZXRob2RTY29wZS5pc1N0YXRpYzsKIAkJCQkJCQlpbnNpZGVDb25zdHJ1
Y3RvckNhbGwgfD0gbWV0aG9kU2NvcGUuaXNDb25zdHJ1Y3RvckNhbGw7CiAJCQkJCQkJaW5zaWRl
VHlwZUFubm90YXRpb24gPSBtZXRob2RTY29wZS5pbnNpZGVUeXBlQW5ub3RhdGlvbjsKQEAgLTE3
NzcsNiArMTc3OCw4IEBACiAJCQkJCQkJCQkJCQkJCWZpZWxkQmluZGluZy5kZWNsYXJpbmdDbGFz
cywKIAkJCQkJCQkJCQkJCQkJbmFtZSwKIAkJCQkJCQkJCQkJCQkJUHJvYmxlbVJlYXNvbnMuTm9u
U3RhdGljUmVmZXJlbmNlSW5TdGF0aWNDb250ZXh0KTsKKwkJCQkJCQkJCQkJfSBlbHNlIGlmICht
ZXRob2RTY29wZSAhPSBudWxsKSB7CisJCQkJCQkJCQkJCQltZXRob2RTY29wZS5yZXNldEVuY2xv
c2luZ01ldGhvZFN0YXRpY0ZsYWcoKTsKIAkJCQkJCQkJCQkJfQogCQkJCQkJCQkJCX0KIAkJCQkJ
CQkJCQlpZiAocmVjZWl2ZXJUeXBlID09IGZpZWxkQmluZGluZy5kZWNsYXJpbmdDbGFzcyB8fCBj
b21waWxlck9wdGlvbnMoKS5jb21wbGlhbmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpE
SzFfNCkgewpAQCAtMjA3OCw2ICsyMDgxLDcgQEAKIAkJTWV0aG9kQmluZGluZyBmb3VuZFByb2Js
ZW0gPSBudWxsOwogCQlib29sZWFuIGZvdW5kUHJvYmxlbVZpc2libGUgPSBmYWxzZTsKIAkJU2Nv
cGUgc2NvcGUgPSB0aGlzOworCQlNZXRob2RTY29wZSBtZXRob2RTY29wZSA9IG51bGw7CiAJCWlu
dCBkZXB0aCA9IDA7CiAJCS8vIGluIDEuNCBtb2RlIChpbmhlcml0ZWQgdmlzaWJsZSBzaGFkb3dz
IGVuY2xvc2luZykKIAkJQ29tcGlsZXJPcHRpb25zIG9wdGlvbnM7CkBAIC0yMDg2LDcgKzIwOTAs
NyBAQAogCQlkb25lIDogd2hpbGUgKHRydWUpIHsgLy8gZG9uZSB3aGVuIGEgQ09NUElMQVRJT05f
VU5JVF9TQ09QRSBpcyBmb3VuZAogCQkJc3dpdGNoIChzY29wZS5raW5kKSB7CiAJCQkJY2FzZSBN
RVRIT0RfU0NPUEUgOgotCQkJCQlNZXRob2RTY29wZSBtZXRob2RTY29wZSA9IChNZXRob2RTY29w
ZSkgc2NvcGU7CisJCQkJCW1ldGhvZFNjb3BlID0gKE1ldGhvZFNjb3BlKSBzY29wZTsKIAkJCQkJ
aW5zaWRlU3RhdGljQ29udGV4dCB8PSBtZXRob2RTY29wZS5pc1N0YXRpYzsKIAkJCQkJaW5zaWRl
Q29uc3RydWN0b3JDYWxsIHw9IG1ldGhvZFNjb3BlLmlzQ29uc3RydWN0b3JDYWxsOwogCQkJCQlp
bnNpZGVUeXBlQW5ub3RhdGlvbiA9IG1ldGhvZFNjb3BlLmluc2lkZVR5cGVBbm5vdGF0aW9uOwpA
QCAtMjExMyw2ICsyMTE3LDggQEAKIAkJCQkJCQkJCQkJaW5zaWRlQ29uc3RydWN0b3JDYWxsCiAJ
CQkJCQkJCQkJCQk/IFByb2JsZW1SZWFzb25zLk5vblN0YXRpY1JlZmVyZW5jZUluQ29uc3RydWN0
b3JJbnZvY2F0aW9uCiAJCQkJCQkJCQkJCQk6IFByb2JsZW1SZWFzb25zLk5vblN0YXRpY1JlZmVy
ZW5jZUluU3RhdGljQ29udGV4dCk7CisJCQkJCQkJCQl9IGVsc2UgaWYgKCFtZXRob2RCaW5kaW5n
LmlzU3RhdGljKCkgJiYgbWV0aG9kU2NvcGUgIT0gbnVsbCkgeworCQkJCQkJCQkJCW1ldGhvZFNj
b3BlLnJlc2V0RGVjbGFyaW5nQ2xhc3NNZXRob2RTdGF0aWNGbGFnKHJlY2VpdmVyVHlwZSk7CiAJ
CQkJCQkJCQl9CiAJCQkJCQkJCQlpZiAoaW5oZXJpdGVkSGFzUHJlY2VkZW5jZQogCQkJCQkJCQkJ
CQl8fCByZWNlaXZlclR5cGUgPT0gbWV0aG9kQmluZGluZy5kZWNsYXJpbmdDbGFzcwpkaWZmIC0t
Z2l0IGV2YWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2V2YWwvQ29kZVNuaXBwZXRUaGlzUmVm
ZXJlbmNlLmphdmEgZXZhbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvZXZhbC9Db2RlU25pcHBl
dFRoaXNSZWZlcmVuY2UuamF2YQppbmRleCBiZjA0ZTRkLi4xNzhkY2ZkIDEwMDY0NAotLS0gZXZh
bC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvZXZhbC9Db2RlU25pcHBldFRoaXNSZWZlcmVuY2Uu
amF2YQorKysgZXZhbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvZXZhbC9Db2RlU25pcHBldFRo
aXNSZWZlcmVuY2UuamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
Ci0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMDkgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMu
CisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTMgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMu
CiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlp
bmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRo
ZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMg
ZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC03LDYgKzcsOCBAQAogICoKICAq
IENvbnRyaWJ1dG9yczoKICAqICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBhbmQg
aW1wbGVtZW50YXRpb24KKyAqICAgICBKZXNwZXIgUyBNb2xsZXIgLSBDb250cmlidXRpb25zIGZv
cgorICoJCQkJCQkJCWJ1ZyAzODI3MjEgLSBbMS44XVtjb21waWxlcl0gRWZmZWN0aXZlbHkgZmlu
YWwgdmFyaWFibGVzIG5lZWRzIHNwZWNpYWwgdHJlYXRtZW50CiAgKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKi8KIHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmV2YWw7CiAKQEAgLTU0LDYg
KzU2LDcgQEAKIAkJCW1ldGhvZFNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmVycm9yVGhpc1N1cGVy
SW5TdGF0aWModGhpcyk7CiAJCQlyZXR1cm4gZmFsc2U7CiAJCX0KKwkJbWV0aG9kU2NvcGUucmVz
ZXRFbmNsb3NpbmdNZXRob2RTdGF0aWNGbGFnKCk7CiAJCXJldHVybiB0cnVlOwogCX0KIAk=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>228235</attachid>
            <date>2013-03-11 20:18:00 -0400</date>
            <delta_ts>2013-03-13 19:45:07 -0400</delta_ts>
            <desc>Improved formatting of patch</desc>
            <filename>clipboard.txt</filename>
            <type>text/plain</type>
            <size>11258</size>
            <attacher name="Jesper Moller">jesper</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMAojUCBvcmcuZWNsaXBzZS5qZHQuY29yZQpk
aWZmIC0tZ2l0IGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3Qv
RmllbGRSZWZlcmVuY2UuamF2YSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvYXN0L0ZpZWxkUmVmZXJlbmNlLmphdmEKaW5kZXggZmEwNGJiZi4uOWY1YjEzOSAxMDA2
NDQKLS0tIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRmll
bGRSZWZlcmVuY2UuamF2YQorKysgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FzdC9GaWVsZFJlZmVyZW5jZS5qYXZhCkBAIC0xLDMgKzEsMyBAQAogLyoqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMiBJQk0gQ29ycG9yYXRp
b24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRp
b24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQg
dGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKQEAgLTEzLDIgKzEzLDQgQEAKICAqCQkJCQkJCQli
dWcgMzgzMzY4IC0gW2NvbXBpbGVyXVtudWxsXSBzeW50YWN0aWMgbnVsbCBhbmFseXNpcyBmb3Ig
ZmllbGQgcmVmZXJlbmNlcworICogICAgIEplc3BlciBTIE1vbGxlciAtIENvbnRyaWJ1dGlvbnMg
Zm9yCisgKgkJCQkJCQkJYnVnIDM4MjcyMSAtIFsxLjhdW2NvbXBpbGVyXSBFZmZlY3RpdmVseSBm
aW5hbCB2YXJpYWJsZXMgbmVlZHMgc3BlY2lhbCB0cmVhdG1lbnQKICAqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqLwpAQCAtMTQ5LDggKzE1MSwyIEBACiAJCQljdXJyZW50U2NvcGUucmVzZXREZWNsYXJp
bmdDbGFzc01ldGhvZFN0YXRpY0ZsYWcodGhpcy5iaW5kaW5nLmRlY2xhcmluZ0NsYXNzKTsKLQkJ
fQotCX0gZWxzZSBpZiAodGhpcy5yZWNlaXZlci5pc1RoaXMoKSkgewotCQlpZiAoKHRoaXMucmVj
ZWl2ZXIuYml0cyAmIEFTVE5vZGUuSXNJbXBsaWNpdFRoaXMpID09IDApIHsKLQkJCS8vIGV4cGxp
Y2l0IHRoaXMgcmVjZWl2ZXIsIG5vdCBhbGxvd2VkIGluIHN0YXRpYyBjb250ZXh0Ci0JCQkvLyBo
dHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzE4NjgyCi0JCQlj
dXJyZW50U2NvcGUucmVzZXRFbmNsb3NpbmdNZXRob2RTdGF0aWNGbGFnKCk7CiAJCX0KZGlmZiAt
LWdpdCBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0xvY2Fs
RGVjbGFyYXRpb24uamF2YSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvYXN0L0xvY2FsRGVjbGFyYXRpb24uamF2YQppbmRleCA5ODhiYzVjLi5mYTU4MTUxIDEwMDY0
NAotLS0gY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Mb2Nh
bERlY2xhcmF0aW9uLmphdmEKKysrIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hc3QvTG9jYWxEZWNsYXJhdGlvbi5qYXZhCkBAIC0xLDMgKzEsMyBAQAogLyoqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMiBJQk0gQ29ycG9y
YXRpb24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMyBJQk0gQ29ycG9y
YXRpb24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBh
bmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKQEAgLTIyLDIgKzIyLDQgQEAKICAqCQkJCQkJ
CWJ1ZyAzODMzNjggLSBbY29tcGlsZXJdW251bGxdIHN5bnRhY3RpYyBudWxsIGFuYWx5c2lzIGZv
ciBmaWVsZCByZWZlcmVuY2VzCisgKiAgICAgSmVzcGVyIFMgTW9sbGVyIC0gQ29udHJpYnV0aW9u
cyBmb3IKKyAqCQkJCQkJCWJ1ZyAzODI3MjEgLSBbMS44XVtjb21waWxlcl0gRWZmZWN0aXZlbHkg
ZmluYWwgdmFyaWFibGVzIG5lZWRzIHNwZWNpYWwgdHJlYXRtZW50CiAgKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKi8KQEAgLTUxLDM4ICs1MywyIEBACiAJCXRoaXMuYml0cyB8PSBBU1ROb2RlLklzTG9j
YWxEZWNsYXJhdGlvblJlYWNoYWJsZTsgLy8gb25seSBzZXQgaWYgYWN0dWFsbHkgcmVhY2hlZAot
CX0KLQlpZiAodGhpcy5iaW5kaW5nICE9IG51bGwgJiYgdGhpcy50eXBlLnJlc29sdmVkVHlwZSBp
bnN0YW5jZW9mIFR5cGVWYXJpYWJsZUJpbmRpbmcpIHsKLQkJVHlwZVZhcmlhYmxlQmluZGluZyB0
eXBlVmFyaWFibGVCaW5kaW5nID0gKFR5cGVWYXJpYWJsZUJpbmRpbmcpIHRoaXMudHlwZS5yZXNv
bHZlZFR5cGU7Ci0JCU1ldGhvZFNjb3BlIG1ldGhvZFNjb3BlPSB0aGlzLmJpbmRpbmcuZGVjbGFy
aW5nU2NvcGUubWV0aG9kU2NvcGUoKTsKLQkJaWYgKG1ldGhvZFNjb3BlICE9IG51bGwgJiYgbWV0
aG9kU2NvcGUucmVmZXJlbmNlQ29udGV4dCBpbnN0YW5jZW9mIFR5cGVEZWNsYXJhdGlvbikgewot
CQkJLy8gaW5pdGlhbGl6YXRpb24gc2NvcGUKLQkJCW1ldGhvZFNjb3BlID0gbWV0aG9kU2NvcGUu
ZW5jbG9zaW5nTWV0aG9kU2NvcGUoKTsKLQkJfQotCQlBYnN0cmFjdE1ldGhvZERlY2xhcmF0aW9u
IG1ldGhvZERlY2xhcmF0aW9uID0gKG1ldGhvZFNjb3BlICE9IG51bGwpID8gbWV0aG9kU2NvcGUu
cmVmZXJlbmNlTWV0aG9kKCkgOiBudWxsOwotCQlpZiAobWV0aG9kRGVjbGFyYXRpb24gIT0gbnVs
bCAmJiBtZXRob2REZWNsYXJhdGlvbi5iaW5kaW5nICE9IG51bGwpIHsKLQkJCVR5cGVWYXJpYWJs
ZUJpbmRpbmdbXSB0eXBlVmFyaWFibGVzID0gbWV0aG9kRGVjbGFyYXRpb24uYmluZGluZy50eXBl
VmFyaWFibGVzKCk7Ci0JCQlpZiAodHlwZVZhcmlhYmxlcyA9PSBudWxsKSB0eXBlVmFyaWFibGVz
ID0gQmluZGluZy5OT19UWVBFX1ZBUklBQkxFUzsKLQkJCWlmICh0eXBlVmFyaWFibGVzID09IEJp
bmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMpIHsKLQkJCQkvLyBNZXRob2QgZGVjbGFyZXMgbm8gdHlw
ZSB2YXJpYWJsZXMuCi0JCQkJaWYgKHR5cGVWYXJpYWJsZUJpbmRpbmcgIT0gbnVsbCAmJiB0eXBl
VmFyaWFibGVCaW5kaW5nLmRlY2xhcmluZ0VsZW1lbnQgaW5zdGFuY2VvZiBUeXBlQmluZGluZykK
LQkJCQkJY3VycmVudFNjb3BlLnJlc2V0RGVjbGFyaW5nQ2xhc3NNZXRob2RTdGF0aWNGbGFnKChU
eXBlQmluZGluZykgdHlwZVZhcmlhYmxlQmluZGluZy5kZWNsYXJpbmdFbGVtZW50KTsKLQkJCQll
bHNlCi0JCQkJCWN1cnJlbnRTY29wZS5yZXNldEVuY2xvc2luZ01ldGhvZFN0YXRpY0ZsYWcoKTsK
LQkJCX0gZWxzZSB7Ci0JCQkJLy8gdG8gY2hlY2sgd2hldGhlciB0aGUgcmVzb2x2ZWQgdHlwZSBm
b3IgdGhpcyBpcyBkZWNsYXJlZCBieSBlbmNsb3NpbmcgbWV0aG9kIGFzIGEgdHlwZSB2YXJpYWJs
ZQotCQkJCWJvb2xlYW4gdXNlc0VuY2xvc2luZ1R5cGVWYXIgPSBmYWxzZTsgCi0JCQkJZm9yIChp
bnQgaSA9IDA7IGkgPCB0eXBlVmFyaWFibGVzLmxlbmd0aCA7IGkgKyspIHsKLQkJCQkJaWYgKHR5
cGVWYXJpYWJsZXNbaV0gPT0gdGhpcy50eXBlLnJlc29sdmVkVHlwZSl7Ci0JCQkJCQl1c2VzRW5j
bG9zaW5nVHlwZVZhciA9IHRydWU7Ci0JCQkJCQlicmVhazsKLQkJCQkJfQotCQkJCX0KLQkJCQlp
ZiAoIXVzZXNFbmNsb3NpbmdUeXBlVmFyKSB7Ci0JCQkJCS8vIHVzZXMgYSB0eXBlIHZhcmlhYmxl
IG5vdCBkZWNsYXJlZCBieSBlbmNsb3NpbmcgbWV0aG9kCi0JCQkJCWlmICh0eXBlVmFyaWFibGVC
aW5kaW5nICE9IG51bGwgJiYgdHlwZVZhcmlhYmxlQmluZGluZy5kZWNsYXJpbmdFbGVtZW50IGlu
c3RhbmNlb2YgVHlwZUJpbmRpbmcpCi0JCQkJCQljdXJyZW50U2NvcGUucmVzZXREZWNsYXJpbmdD
bGFzc01ldGhvZFN0YXRpY0ZsYWcoKFR5cGVCaW5kaW5nKSB0eXBlVmFyaWFibGVCaW5kaW5nLmRl
Y2xhcmluZ0VsZW1lbnQpOwotCQkJCQllbHNlCi0JCQkJCQljdXJyZW50U2NvcGUucmVzZXRFbmNs
b3NpbmdNZXRob2RTdGF0aWNGbGFnKCk7Ci0JCQkJfQotCQkJfQotCQl9CiAJfQpkaWZmIC0tZ2l0
IGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTWVzc2FnZVNl
bmQuamF2YSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L01l
c3NhZ2VTZW5kLmphdmEKaW5kZXggYTZlNmJkYi4uYmY4OTY4OSAxMDA2NDQKLS0tIGNvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTWVzc2FnZVNlbmQuamF2YQor
KysgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9NZXNzYWdl
U2VuZC5qYXZhCkBAIC0yNiwyICsyNiw0IEBACiAgKgkJCQkJCQkJYnVnIDM4MjA2OSAtIFtudWxs
XSBNYWtlIHRoZSBudWxsIGFuYWx5c2lzIGNvbnNpZGVyIEpVbml0J3MgYXNzZXJ0Tm90TnVsbCBz
aW1pbGFybHkgdG8gYXNzZXJ0aW9ucworICogICAgIEplc3BlciBTIE1vbGxlciAtIENvbnRyaWJ1
dGlvbnMgZm9yCisgKgkJCQkJCQkJYnVnIDM4MjcyMSAtIFsxLjhdW2NvbXBpbGVyXSBFZmZlY3Rp
dmVseSBmaW5hbCB2YXJpYWJsZXMgbmVlZHMgc3BlY2lhbCB0cmVhdG1lbnQKICAqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqLwpAQCAtMTIzLDcgKzEyNSwyIEBACiAJCQljdXJyZW50U2NvcGUucmVzZXRE
ZWNsYXJpbmdDbGFzc01ldGhvZFN0YXRpY0ZsYWcodGhpcy5hY3R1YWxSZWNlaXZlclR5cGUpOwot
CQl9Ci0JfSBlbHNlIGlmICh0aGlzLnJlY2VpdmVyLmlzVGhpcygpKSB7Ci0JCWlmICgodGhpcy5y
ZWNlaXZlci5iaXRzICYgQVNUTm9kZS5Jc0ltcGxpY2l0VGhpcykgPT0gMCkgewotCQkJLy8gZXhw
bGljaXQgdGhpcyByZWNlaXZlciwgbm90IGFsbG93ZWQgaW4gc3RhdGljIGNvbnRleHQKLQkJCWN1
cnJlbnRTY29wZS5yZXNldEVuY2xvc2luZ01ldGhvZFN0YXRpY0ZsYWcoKTsKIAkJfQpkaWZmIC0t
Z2l0IGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTWV0aG9k
RGVjbGFyYXRpb24uamF2YSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvYXN0L01ldGhvZERlY2xhcmF0aW9uLmphdmEKaW5kZXggNWM2MTEyNS4uMzY3NWI0NiAxMDA2
NDQKLS0tIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTWV0
aG9kRGVjbGFyYXRpb24uamF2YQorKysgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FzdC9NZXRob2REZWNsYXJhdGlvbi5qYXZhCkBAIC01MCwzICs1MCwzIEBACiAJ
CXN1cGVyKGNvbXBpbGF0aW9uUmVzdWx0KTsKLQkJdGhpcy5iaXRzIHw9IEFTVE5vZGUuQ2FuQmVT
dGF0aWM7IC8vIFN0YXJ0IHdpdGggdGhpcyBhc3N1bXB0aW9uLCB3aWxsIGNvdXJzZSBjb3JyZWN0
IGR1cmluZyByZXNvbHZlLgorCQl0aGlzLmJpdHMgfD0gQVNUTm9kZS5DYW5CZVN0YXRpYzsgLy8g
U3RhcnQgd2l0aCB0aGlzIGFzc3VtcHRpb24sIHdpbGwgY291cnNlIGNvcnJlY3QgZHVyaW5nIHJl
c29sdmUgYW5kIGFuYWx5c2VDb2RlLgogCX0KQEAgLTI1NSwzICsyNTUsMyBAQAogCQkJCX0gZWxz
ZSB7Ci0JCQkJCS8vIHRoZSBtZXRob2QgSEFTIGEgYm9keSAtLT4gYWJzdHJhY3QgbmF0aXZlIG1v
ZGlmaWVycyBhcmUgZm9yYmlkZW4KKwkJCQkJLy8gdGhlIG1ldGhvZCBIQVMgYSBib2R5IC0tPiBh
YnN0cmFjdCBuYXRpdmUgbW9kaWZpZXJzIGFyZSBmb3JiaWRkZW4KIAkJCQkJaWYgKCgodGhpcy5t
b2RpZmllcnMgJiBDbGFzc0ZpbGVDb25zdGFudHMuQWNjTmF0aXZlKSAhPSAwKSB8fCAoKHRoaXMu
bW9kaWZpZXJzICYgQ2xhc3NGaWxlQ29uc3RhbnRzLkFjY0Fic3RyYWN0KSAhPSAwKSkKZGlmZiAt
LWdpdCBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1N1cGVy
UmVmZXJlbmNlLmphdmEgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FzdC9TdXBlclJlZmVyZW5jZS5qYXZhCmluZGV4IDU0NDRkMmEuLjdlZGI5OWYgMTAwNjQ0Ci0t
LSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1N1cGVyUmVm
ZXJlbmNlLmphdmEKKysrIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hc3QvU3VwZXJSZWZlcmVuY2UuamF2YQpAQCAtMSwzICsxLDMgQEAKIC8qKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTAgSUJNIENvcnBvcmF0aW9uIGFu
ZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTMgSUJNIENvcnBvcmF0aW9uIGFu
ZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBh
Y2NvbXBhbnlpbmcgbWF0ZXJpYWxzCkBAIC05LDIgKzksNCBAQAogICogICAgIElCTSBDb3Jwb3Jh
dGlvbiAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgorICogICAgIEplc3BlciBTIE1v
bGxlciAtIENvbnRyaWJ1dGlvbnMgZm9yCisgKgkJCQkJCQkJYnVnIDM4MjcyMSAtIFsxLjhdW2Nv
bXBpbGVyXSBFZmZlY3RpdmVseSBmaW5hbCB2YXJpYWJsZXMgbmVlZHMgc3BlY2lhbCB0cmVhdG1l
bnQKICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqLwpAQCAtMTMsNCArMTUsMiBAQAogaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5BU1RWaXNpdG9yOwotaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5mbG93LkZsb3dDb250ZXh0OwotaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5mbG93LkZsb3dJbmZvOwogaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5pbXBsLkNvbnN0YW50OwpAQCAtNjksNyAr
NjksMiBAQAogCQl2aXNpdG9yLmVuZFZpc2l0KHRoaXMsIGJsb2NrU2NvcGUpOwotCX0KLQkKLQlw
dWJsaWMgRmxvd0luZm8gYW5hbHlzZUNvZGUoQmxvY2tTY29wZSBjdXJyZW50U2NvcGUsIEZsb3dD
b250ZXh0IGZsb3dDb250ZXh0LCBGbG93SW5mbyBmbG93SW5mbywgYm9vbGVhbiB2YWx1ZVJlcXVp
cmVkKSB7Ci0JCWN1cnJlbnRTY29wZS5yZXNldEVuY2xvc2luZ01ldGhvZFN0YXRpY0ZsYWcoKTsK
LQkJcmV0dXJuIGFuYWx5c2VDb2RlKGN1cnJlbnRTY29wZSwgZmxvd0NvbnRleHQsIGZsb3dJbmZv
KTsKIAl9CmRpZmYgLS1naXQgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9UaGlzUmVmZXJlbmNlLmphdmEgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2FzdC9UaGlzUmVmZXJlbmNlLmphdmEKaW5kZXggZmMwNWRjNC4uY2ZhMzgz
YiAxMDA2NDQKLS0tIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvVGhpc1JlZmVyZW5jZS5qYXZhCisrKyBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXN0L1RoaXNSZWZlcmVuY2UuamF2YQpAQCAtMSwzICsxLDMgQEAKIC8qKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTEgSUJNIENvcnBv
cmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTMgSUJNIENvcnBv
cmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0g
YW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCkBAIC0xMiwyICsxMiw0IEBACiAgKgkJCQkJ
CQkJYnVnIDM4MzM2OCAtIFtjb21waWxlcl1bbnVsbF0gc3ludGFjdGljIG51bGwgYW5hbHlzaXMg
Zm9yIGZpZWxkIHJlZmVyZW5jZXMKKyAqICAgICBKZXNwZXIgUyBNb2xsZXIgLSBDb250cmlidXRp
b25zIGZvcgorICoJCQkJCQkJCWJ1ZyAzODI3MjEgLSBbMS44XVtjb21waWxlcl0gRWZmZWN0aXZl
bHkgZmluYWwgdmFyaWFibGVzIG5lZWRzIHNwZWNpYWwgdHJlYXRtZW50CiAgKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKi8KQEAgLTEzMiwxMSArMTM0LDIgQEAKIAkJdmlzaXRvci5lbmRWaXNpdCh0aGlz
LCBibG9ja1Njb3BlKTsKLQl9Ci0KLQlwdWJsaWMgRmxvd0luZm8gYW5hbHlzZUNvZGUoQmxvY2tT
Y29wZSBjdXJyZW50U2NvcGUsIEZsb3dDb250ZXh0IGZsb3dDb250ZXh0LCBGbG93SW5mbyBmbG93
SW5mbykgewotCQlpZiAoIWlzSW1wbGljaXRUaGlzKCkpIHsKLQkJCS8vIGV4cGxpY2l0IHRoaXMg
cmVmZXJlbmNlLCBub3QgYWxsb3dlZCBpbiBzdGF0aWMgY29udGV4dAotCQkJLy8gaHR0cHM6Ly9i
dWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTMzNTc4MAotCQkJY3VycmVudFNj
b3BlLnJlc2V0RW5jbG9zaW5nTWV0aG9kU3RhdGljRmxhZygpOwotCQl9Ci0JCXJldHVybiBzdXBl
ci5hbmFseXNlQ29kZShjdXJyZW50U2NvcGUsIGZsb3dDb250ZXh0LCBmbG93SW5mbyk7CiAJfQpk
aWZmIC0tZ2l0IGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29r
dXAvU2NvcGUuamF2YSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
bG9va3VwL1Njb3BlLmphdmEKaW5kZXggMThmYWYzMi4uZmJkMWJiMCAxMDA2NDQKLS0tIGNvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YQor
KysgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29w
ZS5qYXZhCkBAIC0xNzE0LDIgKzE3MTQsMyBAQAogCQkJCVNjb3BlIHNjb3BlID0gdGhpczsKKwkJ
CQlNZXRob2RTY29wZSBtZXRob2RTY29wZSA9IG51bGw7CiAJCQkJaW50IGRlcHRoID0gMDsKQEAg
LTE3MjAsMyArMTcyMSwzIEBACiAJCQkJCQljYXNlIE1FVEhPRF9TQ09QRSA6Ci0JCQkJCQkJTWV0
aG9kU2NvcGUgbWV0aG9kU2NvcGUgPSAoTWV0aG9kU2NvcGUpIHNjb3BlOworCQkJCQkJCW1ldGhv
ZFNjb3BlID0gKE1ldGhvZFNjb3BlKSBzY29wZTsKIAkJCQkJCQlpbnNpZGVTdGF0aWNDb250ZXh0
IHw9IG1ldGhvZFNjb3BlLmlzU3RhdGljOwpAQCAtMTc3OSwyICsxNzgwLDQgQEAKIAkJCQkJCQkJ
CQkJCQkJUHJvYmxlbVJlYXNvbnMuTm9uU3RhdGljUmVmZXJlbmNlSW5TdGF0aWNDb250ZXh0KTsK
KwkJCQkJCQkJCQkJfSBlbHNlIGlmIChtZXRob2RTY29wZSAhPSBudWxsKSB7CisJCQkJCQkJCQkJ
CQltZXRob2RTY29wZS5yZXNldEVuY2xvc2luZ01ldGhvZFN0YXRpY0ZsYWcoKTsKIAkJCQkJCQkJ
CQkJfQpAQCAtMjA4MCwyICsyMDgzLDMgQEAKIAkJU2NvcGUgc2NvcGUgPSB0aGlzOworCQlNZXRo
b2RTY29wZSBtZXRob2RTY29wZSA9IG51bGw7CiAJCWludCBkZXB0aCA9IDA7CkBAIC0yMDg4LDMg
KzIwOTIsMyBAQAogCQkJCWNhc2UgTUVUSE9EX1NDT1BFIDoKLQkJCQkJTWV0aG9kU2NvcGUgbWV0
aG9kU2NvcGUgPSAoTWV0aG9kU2NvcGUpIHNjb3BlOworCQkJCQltZXRob2RTY29wZSA9IChNZXRo
b2RTY29wZSkgc2NvcGU7CiAJCQkJCWluc2lkZVN0YXRpY0NvbnRleHQgfD0gbWV0aG9kU2NvcGUu
aXNTdGF0aWM7CkBAIC0yMTE1LDIgKzIxMTksNCBAQAogCQkJCQkJCQkJCQkJOiBQcm9ibGVtUmVh
c29ucy5Ob25TdGF0aWNSZWZlcmVuY2VJblN0YXRpY0NvbnRleHQpOworCQkJCQkJCQkJfSBlbHNl
IGlmICghbWV0aG9kQmluZGluZy5pc1N0YXRpYygpICYmIG1ldGhvZFNjb3BlICE9IG51bGwpIHsK
KwkJCQkJCQkJCQltZXRob2RTY29wZS5yZXNldERlY2xhcmluZ0NsYXNzTWV0aG9kU3RhdGljRmxh
ZyhyZWNlaXZlclR5cGUpOwogCQkJCQkJCQkJfQpkaWZmIC0tZ2l0IGV2YWwvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2V2YWwvQ29kZVNuaXBwZXRUaGlzUmVmZXJlbmNlLmphdmEgZXZhbC9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvZXZhbC9Db2RlU25pcHBldFRoaXNSZWZlcmVuY2UuamF2YQpp
bmRleCBiZjA0ZTRkLi4xNzhkY2ZkIDEwMDY0NAotLS0gZXZhbC9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvZXZhbC9Db2RlU25pcHBldFRoaXNSZWZlcmVuY2UuamF2YQorKysgZXZhbC9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvZXZhbC9Db2RlU25pcHBldFRoaXNSZWZlcmVuY2UuamF2YQpAQCAt
MSwzICsxLDMgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIw
MDAsIDIwMDkgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIw
MDAsIDIwMTMgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2Vy
dmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCkBAIC05LDIg
KzksNCBAQAogICogICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1l
bnRhdGlvbgorICogICAgIEplc3BlciBTIE1vbGxlciAtIENvbnRyaWJ1dGlvbnMgZm9yCisgKgkJ
CQkJCQkJYnVnIDM4MjcyMSAtIFsxLjhdW2NvbXBpbGVyXSBFZmZlY3RpdmVseSBmaW5hbCB2YXJp
YWJsZXMgbmVlZHMgc3BlY2lhbCB0cmVhdG1lbnQKICAqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwpA
QCAtNTYsMiArNTgsMyBAQAogCQl9CisJCW1ldGhvZFNjb3BlLnJlc2V0RW5jbG9zaW5nTWV0aG9k
U3RhdGljRmxhZygpOwogCQlyZXR1cm4gdHJ1ZTs=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>228390</attachid>
            <date>2013-03-13 19:43:00 -0400</date>
            <delta_ts>2013-03-13 19:43:03 -0400</delta_ts>
            <desc>Final patch</desc>
            <filename>clipboard.txt</filename>
            <type>text/plain</type>
            <size>13052</size>
            <attacher name="Jesper Moller">jesper</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMAojUCBvcmcuZWNsaXBzZS5qZHQuY29yZQpk
aWZmIC0tZ2l0IGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3Qv
QWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXN0L0FsbG9jYXRpb25FeHByZXNzaW9uLmphdmEKaW5kZXggODRhMGQ2NC4u
NWM2MGE1OSAxMDA2NDQKLS0tIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YQorKysgY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCkBA
IC0xLDQgKzEsNCBAQAogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykg
MjAwMCwgMjAxMiBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykg
MjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVz
ZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFy
ZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExp
Y2Vuc2UgdjEuMApAQCAtMTgsNCArMTgsNiBAQAogICoJCQkJCQkJYnVnIDM0NTMwNSAtIFtjb21w
aWxlcl1bbnVsbF0gQ29tcGlsZXIgbWlzaWRlbnRpZmllcyBhIGNhc2Ugb2YgInZhcmlhYmxlIGNh
biBvbmx5IGJlIG51bGwiCiAgKgkJCQkJCQlidWcgMzg4OTk2IC0gW2NvbXBpbGVyXVtyZXNvdXJj
ZV0gSW5jb3JyZWN0ICdwb3RlbnRpYWwgcmVzb3VyY2UgbGVhaycKKyAqICAgICBKZXNwZXIgUyBN
b2xsZXIgPGplc3BlckBzZWxza2FiZXQub3JnPiAtIENvbnRyaWJ1dGlvbnMgZm9yCisgKgkJCQkJ
CQlidWcgMzc4Njc0IC0gIlRoZSBtZXRob2QgY2FuIGJlIGRlY2xhcmVkIGFzIHN0YXRpYyIgaXMg
d3JvbmcKICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIuYXN0OwpAQCAtOTQsNCArOTYsNiBAQAogCQkvLyBodHRwczovL2J1
Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzM1ODQ1CiAJCWN1cnJlbnRTY29w
ZS5yZXNldERlY2xhcmluZ0NsYXNzTWV0aG9kU3RhdGljRmxhZyh0aGlzLmJpbmRpbmcuZGVjbGFy
aW5nQ2xhc3MuZW5jbG9zaW5nVHlwZSgpKTsKKwkJLy8gUmV2aWV3ZWQgZm9yIGh0dHBzOi8vYnVn
cy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNzg2NzQgOgorCQkvLyBUaGUgY29y
cmVzcG9uZGluZyBwcm9ibGVtICh3aGVuIGNhbGxlZCBmcm9tIHN0YXRpYykgaXMgbm90IHByb2R1
Y2VkIHVudGlsIGR1cmluZyBjb2RlIGdlbmVyYXRpb24KIAl9CiAJbWFuYWdlRW5jbG9zaW5nSW5z
dGFuY2VBY2Nlc3NJZk5lY2Vzc2FyeShjdXJyZW50U2NvcGUsIGZsb3dJbmZvKTsKZGlmZiAtLWdp
dCBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0ZpZWxkUmVm
ZXJlbmNlLmphdmEgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fz
dC9GaWVsZFJlZmVyZW5jZS5qYXZhCmluZGV4IGIzNTYzMjcuLjQ0NmM4ZjAgMTAwNjQ0Ci0tLSBj
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0ZpZWxkUmVmZXJl
bmNlLmphdmEKKysrIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvRmllbGRSZWZlcmVuY2UuamF2YQpAQCAtMTI0LDE1ICsxMjQsNCBAQAogCQl9CQkKIAl9Ci0J
Ly8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTMxODY4Mgot
CWlmICghdGhpcy5iaW5kaW5nLmlzU3RhdGljKCkpIHsKLQkJaWYgKHRoaXMucmVjZWl2ZXIuaXNU
aGlzKCkpIHsKLQkJCWN1cnJlbnRTY29wZS5yZXNldERlY2xhcmluZ0NsYXNzTWV0aG9kU3RhdGlj
RmxhZyh0aGlzLmJpbmRpbmcuZGVjbGFyaW5nQ2xhc3MpOwotCQl9Ci0JfSBlbHNlIGlmICh0aGlz
LnJlY2VpdmVyLmlzVGhpcygpKSB7Ci0JCWlmICgodGhpcy5yZWNlaXZlci5iaXRzICYgQVNUTm9k
ZS5Jc0ltcGxpY2l0VGhpcykgPT0gMCkgewotCQkJLy8gZXhwbGljaXQgdGhpcywgbm90IGFsbG93
ZWQgaW4gc3RhdGljIGNvbnRleHQKLQkJCWN1cnJlbnRTY29wZS5yZXNldERlY2xhcmluZ0NsYXNz
TWV0aG9kU3RhdGljRmxhZyh0aGlzLmJpbmRpbmcuZGVjbGFyaW5nQ2xhc3MpOwotCQl9Ci0JfQog
CXJldHVybiBmbG93SW5mbzsKIH0KQEAgLTE0Nyw4ICsxMzYsNCBAQAogCWlmIChub25TdGF0aWMp
IHsKIAkJdGhpcy5yZWNlaXZlci5jaGVja05QRShjdXJyZW50U2NvcGUsIGZsb3dDb250ZXh0LCBm
bG93SW5mbyk7Ci0JCS8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNn
aT9pZD0zMTg2ODIKLQkJaWYgKHRoaXMucmVjZWl2ZXIuaXNUaGlzKCkpIHsKLQkJCWN1cnJlbnRT
Y29wZS5yZXNldERlY2xhcmluZ0NsYXNzTWV0aG9kU3RhdGljRmxhZyh0aGlzLmJpbmRpbmcuZGVj
bGFyaW5nQ2xhc3MpOwotCQl9CiAJfQogCmRpZmYgLS1naXQgY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9NZXNzYWdlU2VuZC5qYXZhIGNvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTWVzc2FnZVNlbmQuamF2YQppbmRleCBl
Y2NkZGY0Li41NWFiMjFiIDEwMDY0NAotLS0gY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2FzdC9NZXNzYWdlU2VuZC5qYXZhCisrKyBjb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L01lc3NhZ2VTZW5kLmphdmEKQEAgLTEyMCw5ICsx
MjAsNCBAQAogCWlmIChub25TdGF0aWMpIHsKIAkJdGhpcy5yZWNlaXZlci5jaGVja05QRShjdXJy
ZW50U2NvcGUsIGZsb3dDb250ZXh0LCBmbG93SW5mbyk7Ci0JCS8vIGh0dHBzOi8vYnVncy5lY2xp
cHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zMTg2ODIKLQkJaWYgKHRoaXMucmVjZWl2ZXIu
aXNUaGlzKCkgfHwgdGhpcy5yZWNlaXZlci5pc1N1cGVyKCkpIHsKLQkJCS8vIGFjY2Vzc2luZyBu
b24tc3RhdGljIG1ldGhvZCB3aXRob3V0IGFuIG9iamVjdAotCQkJY3VycmVudFNjb3BlLnJlc2V0
RGVjbGFyaW5nQ2xhc3NNZXRob2RTdGF0aWNGbGFnKHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlKTsK
LQkJfQogCX0KIApkaWZmIC0tZ2l0IGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hc3QvUXVhbGlmaWVkQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YSBjb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1F1YWxpZmllZEFsbG9jYXRpb25F
eHByZXNzaW9uLmphdmEKaW5kZXggNDYyNjg4ZC4uMTc4ZDgzOCAxMDA2NDQKLS0tIGNvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUXVhbGlmaWVkQWxsb2NhdGlv
bkV4cHJlc3Npb24uamF2YQorKysgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FzdC9RdWFsaWZpZWRBbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCkBAIC0xLDQgKzEs
NCBAQAogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAx
MiBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAx
MyBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRo
aXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2
YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEu
MApAQCAtMTcsNSArMTcsNyBAQAogICoJCQkJCQkJCWJ1ZyAzODg5OTYgLSBbY29tcGlsZXJdW3Jl
c291cmNlXSBJbmNvcnJlY3QgJ3BvdGVudGlhbCByZXNvdXJjZSBsZWFrJwogICoJCQkJCQkJCWJ1
ZyAzOTU5NzcgLSBbY29tcGlsZXJdW3Jlc291cmNlXSBSZXNvdXJjZSBsZWFrIHdhcm5pbmcgYmVo
YXZpb3IgcG9zc2libHkgaW5jb3JyZWN0IGZvciBhbm9ueW1vdXMgaW5uZXIgY2xhc3MKLSAqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqLworICogICAgIEplc3BlciBTIE1vbGxlciA8amVzcGVyQHNlbHNr
YWJldC5vcmc+IC0gQ29udHJpYnV0aW9ucyBmb3IKKyAqCQkJCQkJCQlidWcgMzc4Njc0IC0gIlRo
ZSBtZXRob2QgY2FuIGJlIGRlY2xhcmVkIGFzIHN0YXRpYyIgaXMgd3JvbmcKKyAqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKiovCiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5h
c3Q7CiAKQEAgLTc0LDQgKzc2LDYgQEAKIAkJCQkJLy8gY3JlYXRpbmcgYW4gYW5vbnltb3VzIHR5
cGUgb2YgYSBub24tc3RhdGljIG1lbWJlciB0eXBlIHdpdGhvdXQgYW4gZW5jbG9zaW5nIGluc3Rh
bmNlIG9mIHBhcmVudCB0eXBlCiAJCQkJCWN1cnJlbnRTY29wZS5yZXNldERlY2xhcmluZ0NsYXNz
TWV0aG9kU3RhdGljRmxhZyhzdXBlcmNsYXNzLmVuY2xvc2luZ1R5cGUoKSk7CisJCQkJCS8vIFJl
dmlld2VkIGZvciBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9
Mzc4Njc0IDoKKwkJCQkJLy8gVGhlIGNvcnJlc3BvbmRpbmcgcHJvYmxlbSAod2hlbiBjYWxsZWQg
ZnJvbSBzdGF0aWMpIGlzIG5vdCBwcm9kdWNlZCB1bnRpbCBkdXJpbmcgY29kZSBnZW5lcmF0aW9u
CiAJCQkJfQogCQkJfQpkaWZmIC0tZ2l0IGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hc3QvUXVhbGlmaWVkTmFtZVJlZmVyZW5jZS5qYXZhIGNvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUXVhbGlmaWVkTmFtZVJlZmVyZW5jZS5q
YXZhCmluZGV4IDYwYWE5N2YuLjEzYThjMWQgMTAwNjQ0Ci0tLSBjb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1F1YWxpZmllZE5hbWVSZWZlcmVuY2UuamF2YQor
KysgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9RdWFsaWZp
ZWROYW1lUmVmZXJlbmNlLmphdmEKQEAgLTEsNCArMSw0IEBACiAvKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKgotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEyIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3Ro
ZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3Ro
ZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21w
YW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBv
ZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCkBAIC0xNiw0ICsxNiw2IEBACiAgKgkJ
CQkJCQkJYnVnIDMzMTY0OSAtIFtjb21waWxlcl1bbnVsbF0gY29uc2lkZXIgbnVsbCBhbm5vdGF0
aW9ucyBmb3IgZmllbGRzCiAgKgkJCQkJCQkJYnVnIDM4MzM2OCAtIFtjb21waWxlcl1bbnVsbF0g
c3ludGFjdGljIG51bGwgYW5hbHlzaXMgZm9yIGZpZWxkIHJlZmVyZW5jZXMKKyAqICAgICBKZXNw
ZXIgUyBNb2xsZXIgPGplc3BlckBzZWxza2FiZXQub3JnPiAtIENvbnRyaWJ1dGlvbnMgZm9yCisg
KgkJCQkJCQkJYnVnIDM3ODY3NCAtICJUaGUgbWV0aG9kIGNhbiBiZSBkZWNsYXJlZCBhcyBzdGF0
aWMiIGlzIHdyb25nCiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KIHBhY2thZ2Ugb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdDsKQEAgLTg4LDcgKzkwLDQgQEAKIAkJCQkJY3Vy
cmVudFNjb3BlLnByb2JsZW1SZXBvcnRlcigpLnVuaW5pdGlhbGl6ZWRCbGFua0ZpbmFsRmllbGQo
bGFzdEZpZWxkQmluZGluZywgdGhpcyk7CiAJCQkJfQotCQkJfQotCQkJaWYgKCFsYXN0RmllbGRC
aW5kaW5nLmlzU3RhdGljKCkpIHsKLQkJCQljdXJyZW50U2NvcGUucmVzZXREZWNsYXJpbmdDbGFz
c01ldGhvZFN0YXRpY0ZsYWcobGFzdEZpZWxkQmluZGluZy5kZWNsYXJpbmdDbGFzcyk7CiAJCQl9
CiAJCQlicmVhazsKQEAgLTE5OCw3ICsxOTcsNCBAQAogCQkJCQl9CiAJCQkJfQotCQkJfQotCQkJ
aWYgKCFmaWVsZEJpbmRpbmcuaXNTdGF0aWMoKSkgewotCQkJCWN1cnJlbnRTY29wZS5yZXNldERl
Y2xhcmluZ0NsYXNzTWV0aG9kU3RhdGljRmxhZyhmaWVsZEJpbmRpbmcuZGVjbGFyaW5nQ2xhc3Mp
OwogCQkJfQogCQkJYnJlYWs7CmRpZmYgLS1naXQgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2FzdC9RdWFsaWZpZWRUaGlzUmVmZXJlbmNlLmphdmEgY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9RdWFsaWZpZWRUaGlzUmVmZXJl
bmNlLmphdmEKaW5kZXggMTBlOTY0Yy4uNjg3MjI1ZiAxMDA2NDQKLS0tIGNvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUXVhbGlmaWVkVGhpc1JlZmVyZW5jZS5q
YXZhCisrKyBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1F1
YWxpZmllZFRoaXNSZWZlcmVuY2UuamF2YQpAQCAtMSw0ICsxLDQgQEAKIC8qKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMDggSUJNIENvcnBvcmF0aW9uIGFu
ZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTMgSUJNIENvcnBvcmF0aW9uIGFu
ZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBh
Y2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRl
cm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKQEAgLTgsNCArOCw2IEBACiAg
KiBDb250cmlidXRvcnM6CiAgKiAgICAgSUJNIENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5k
IGltcGxlbWVudGF0aW9uCisgKiAgICAgSmVzcGVyIFMgTW9sbGVyIDxqZXNwZXJAc2Vsc2thYmV0
Lm9yZz4gLSBDb250cmlidXRpb25zIGZvcgorICoJCQkJCQkJCWJ1ZyAzNzg2NzQgLSAiVGhlIG1l
dGhvZCBjYW4gYmUgZGVjbGFyZWQgYXMgc3RhdGljIiBpcyB3cm9uZwogICoqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKiovCiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3Q7
CkBAIC0xMDMsNCArMTA1LDcgQEAKIAkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLm5vU3VjaEVu
Y2xvc2luZ0luc3RhbmNlKHR5cGUsIHRoaXMsIGZhbHNlKTsKIAkJCXJldHVybiB0aGlzLnJlc29s
dmVkVHlwZTsKKwkJfSBlbHNlIHsKKwkJCS8vIE1hcmsgYWxsIG1ldGhvZHMgYmV0d2VlbiBoZXJl
IGFuZCB0aGUgZGVjbGFyZWQgdHlwZSBhcyBub3Qgc3RhdGljCisJCQlzY29wZS5yZXNldERlY2xh
cmluZ0NsYXNzTWV0aG9kU3RhdGljRmxhZyh0aGlzLmN1cnJlbnRDb21wYXRpYmxlVHlwZSk7CiAJ
CX0KIApkaWZmIC0tZ2l0IGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hc3QvU2luZ2xlTmFtZVJlZmVyZW5jZS5qYXZhIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9hc3QvU2luZ2xlTmFtZVJlZmVyZW5jZS5qYXZhCmluZGV4IDQxMWYx
NGIuLjY1ZGUxMzYgMTAwNjQ0Ci0tLSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvYXN0L1NpbmdsZU5hbWVSZWZlcmVuY2UuamF2YQorKysgY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9TaW5nbGVOYW1lUmVmZXJlbmNlLmphdmEK
QEAgLTEsNCArMSw0IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChj
KSAyMDAwLCAyMDEyIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChj
KSAyMDAwLCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyBy
ZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICog
YXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMg
TGljZW5zZSB2MS4wCkBAIC0xMyw0ICsxMyw2IEBACiAgKgkJCQkJCQkJYnVnIDMzMTY0OSAtIFtj
b21waWxlcl1bbnVsbF0gY29uc2lkZXIgbnVsbCBhbm5vdGF0aW9ucyBmb3IgZmllbGRzCiAgKgkJ
CQkJCQkJYnVnIDM4MzM2OCAtIFtjb21waWxlcl1bbnVsbF0gc3ludGFjdGljIG51bGwgYW5hbHlz
aXMgZm9yIGZpZWxkIHJlZmVyZW5jZXMKKyAqICAgICBKZXNwZXIgUyBNb2xsZXIgPGplc3BlckBz
ZWxza2FiZXQub3JnPiAtIENvbnRyaWJ1dGlvbnMgZm9yCisgKgkJCQkJCQkJYnVnIDM3ODY3NCAt
ICJUaGUgbWV0aG9kIGNhbiBiZSBkZWNsYXJlZCBhcyBzdGF0aWMiIGlzIHdyb25nCiAgKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKi8KIHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBp
bGVyLmFzdDsKQEAgLTc1LDggKzc3LDQgQEAKIAkJCQkJfQogCQkJCX0KLQkJCQlpZiAoIWZpZWxk
QmluZGluZy5pc1N0YXRpYygpKSB7Ci0JCQkJCS8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9i
dWdzL3Nob3dfYnVnLmNnaT9pZD0zMTg2ODIKLQkJCQkJY3VycmVudFNjb3BlLnJlc2V0RGVjbGFy
aW5nQ2xhc3NNZXRob2RTdGF0aWNGbGFnKGZpZWxkQmluZGluZy5kZWNsYXJpbmdDbGFzcyk7Ci0J
CQkJfQogCQkJCW1hbmFnZVN5bnRoZXRpY0FjY2Vzc0lmTmVjZXNzYXJ5KGN1cnJlbnRTY29wZSwg
Zmxvd0luZm8sIHRydWUgLypyZWFkLWFjY2VzcyovKTsKIAkJCQlicmVhazsKQEAgLTEyNSw4ICsx
MjMsNCBAQAogCQkJCS8vIHJlY29yZCBhc3NpZ25tZW50IGZvciBkZXRlY3RpbmcgdW5pbml0aWFs
aXplZCBub24tbnVsbCBmaWVsZHM6CiAJCQkJZmxvd0luZm8ubWFya0FzRGVmaW5pdGVseUFzc2ln
bmVkKGZpZWxkQmluZGluZyk7Ci0JCQl9Ci0JCQlpZiAoIWZpZWxkQmluZGluZy5pc1N0YXRpYygp
KSB7Ci0JCQkJLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lk
PTMxODY4MgotCQkJCWN1cnJlbnRTY29wZS5yZXNldERlY2xhcmluZ0NsYXNzTWV0aG9kU3RhdGlj
RmxhZyhmaWVsZEJpbmRpbmcuZGVjbGFyaW5nQ2xhc3MpOwogCQkJfQogCQkJYnJlYWs7CkBAIC0x
NzgsOCArMTcyLDQgQEAKIAkJCQkJY3VycmVudFNjb3BlLnByb2JsZW1SZXBvcnRlcigpLnVuaW5p
dGlhbGl6ZWRCbGFua0ZpbmFsRmllbGQoZmllbGRCaW5kaW5nLCB0aGlzKTsKIAkJCQl9Ci0JCQl9
Ci0JCQlpZiAoIWZpZWxkQmluZGluZy5pc1N0YXRpYygpKSB7Ci0JCQkJLy8gaHR0cHM6Ly9idWdz
LmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTMxODY4MgotCQkJCWN1cnJlbnRTY29w
ZS5yZXNldERlY2xhcmluZ0NsYXNzTWV0aG9kU3RhdGljRmxhZyhmaWVsZEJpbmRpbmcuZGVjbGFy
aW5nQ2xhc3MpOwogCQkJfQogCQkJYnJlYWs7CmRpZmYgLS1naXQgY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9CbG9ja1Njb3BlLmphdmEgY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9CbG9ja1Njb3BlLmphdmEK
aW5kZXggNDBiZGI4ZS4uOTUwYTJkNCAxMDA2NDQKLS0tIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQmxvY2tTY29wZS5qYXZhCisrKyBjb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0Jsb2NrU2NvcGUuamF2YQpA
QCAtMSw0ICsxLDQgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMp
IDIwMDAsIDIwMTIgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMp
IDIwMDAsIDIwMTMgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJl
c2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBh
cmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBM
aWNlbnNlIHYxLjAKQEAgLTE3LDQgKzE3LDYgQEAKICAqCQkJCQkJCQlidWcgMzc5Nzg0IC0gW2Nv
bXBpbGVyXSAiTWV0aG9kIGNhbiBiZSBzdGF0aWMiIGlzIG5vdCBnZXR0aW5nIHJlcG9ydGVkCiAg
KgkJCQkJCQkJYnVnIDM5NDc2OCAtIFtjb21waWxlcl1bcmVzb3VyY2VdIEluY29ycmVjdCByZXNv
dXJjZSBsZWFrIHdhcm5pbmcgd2hlbiBjcmVhdGluZyBzdHJlYW0gaW4gY29uZGl0aW9uYWwKKyAq
ICAgICBKZXNwZXIgUyBNb2xsZXIgPGplc3BlckBzZWxza2FiZXQub3JnPiAtIENvbnRyaWJ1dGlv
bnMgZm9yCisgKgkJCQkJCQkJYnVnIDM3ODY3NCAtICJUaGUgbWV0aG9kIGNhbiBiZSBkZWNsYXJl
ZCBhcyBzdGF0aWMiIGlzIHdyb25nCiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KIHBhY2thZ2Ug
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cDsKQEAgLTU1MSw0ICs1NTMs
NiBAQAogCQkJCUNoYXJPcGVyYXRpb24uY29uY2F0V2l0aChDaGFyT3BlcmF0aW9uLnN1YmFycmF5
KGNvbXBvdW5kTmFtZSwgMCwgY3VycmVudEluZGV4KSwgJy4nKSwKIAkJCQlQcm9ibGVtUmVhc29u
cy5Ob25TdGF0aWNSZWZlcmVuY2VJblN0YXRpY0NvbnRleHQpOworCQkvLyBTaW5jZSBhIHF1YWxp
ZmllZCByZWZlcmVuY2UgbXVzdCBiZSBmb3IgYSBzdGF0aWMgbWVtYmVyLCBpdCB3b24ndCBhZmZl
Y3Qgc3RhdGljLW5lc3Mgb2YgdGhlIGVuY2xvc2luZyBtZXRob2QsIAorCQkvLyBzbyB3ZSBkb24n
dCBoYXZlIHRvIGNhbGwgcmVzZXRFbmNsb3NpbmdNZXRob2RTdGF0aWNGbGFnKCkgaW4gdGhpcyBj
YXNlCiAJCXJldHVybiBiaW5kaW5nOwogCX0KZGlmZiAtLWdpdCBldmFsL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9ldmFsL0NvZGVTbmlwcGV0U2NvcGUuamF2YSBldmFsL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9ldmFsL0NvZGVTbmlwcGV0U2NvcGUuamF2YQppbmRleCA0ZWM4ZTNlLi45ZDk2
NjQ1IDEwMDY0NAotLS0gZXZhbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvZXZhbC9Db2RlU25p
cHBldFNjb3BlLmphdmEKKysrIGV2YWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2V2YWwvQ29k
ZVNuaXBwZXRTY29wZS5qYXZhCkBAIC0xLDQgKzEsNCBAQAogLyoqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMCBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVy
cy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVy
cy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFu
eWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2Yg
dGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMApAQCAtOCw0ICs4LDYgQEAKICAqIENvbnRy
aWJ1dG9yczoKICAqICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVt
ZW50YXRpb24KKyAqICAgICBKZXNwZXIgUyBNb2xsZXIgPGplc3BlckBzZWxza2FiZXQub3JnPiAt
IENvbnRyaWJ1dGlvbnMgZm9yCisgKgkJCQkJCQkJYnVnIDM3ODY3NCAtICJUaGUgbWV0aG9kIGNh
biBiZSBkZWNsYXJlZCBhcyBzdGF0aWMiIGlzIHdyb25nCiAgKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
Ki8KIHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmV2YWw7CkBAIC01MDQsNCArNTA2
LDYgQEAKIAkJCQkJUHJvYmxlbVJlYXNvbnMuTm9uU3RhdGljUmVmZXJlbmNlSW5TdGF0aWNDb250
ZXh0KTsKIAkJfQorCQkvLyBTaW5jZSBhIHF1YWxpZmllZCByZWZlcmVuY2UgbXVzdCBiZSBmb3Ig
YSBzdGF0aWMgbWVtYmVyLCBpdCB3b24ndCBhZmZlY3Qgc3RhdGljLW5lc3Mgb2YgdGhlIGVuY2xv
c2luZyBtZXRob2QsIAorCQkvLyBzbyB3ZSBkb24ndCBoYXZlIHRvIGNhbGwgcmVzZXRFbmNsb3Np
bmdNZXRob2RTdGF0aWNGbGFnKCkgaW4gdGhpcyBjYXNlCiAJCXJldHVybiBiaW5kaW5nOwogCX0=
</data>

          </attachment>
      

    </bug>

</bugzilla>