<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>448709</bug_id>
          
          <creation_ts>2014-10-24 09:26:00 -0400</creation_ts>
          <short_desc>[1.8][null] ensure we don&apos;t infer types that violate null constraints on a type parameter&apos;s bound</short_desc>
          <delta_ts>2015-04-29 05:28:22 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          <see_also>https://git.eclipse.org/r/43881</see_also>
    
    <see_also>https://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=07de476492c87dc4eb8797084ffe99575b2b9c74</see_also>
    
    <see_also>https://git.eclipse.org/r/46520</see_also>
    
    <see_also>https://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=542bc03686c1982d51c01449da7cc4df74fbe14e</see_also>
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.5 M7</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Stephan Herrmann">stephan.herrmann</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>jarthana</cc>
    
    <cc>manpalat</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2471249</commentid>
    <comment_count>0</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-24 09:26:43 -0400</bug_when>
    <thetext>Follow-up from bug 445099:

Since we don&apos;t have effective code in TypeVariableBinding.boundCheck() that validates an inferred type against null constraints on a type parameter&apos;s bound, we should probably ensure that ThreeSets.setInstantiation() never produces such conflict - by inspecting the type bounds, too.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2494263</commentid>
    <comment_count>1</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2014-12-09 00:56:48 -0500</bug_when>
    <thetext>Stephan: Is this still targetted for 4.5M4?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2494461</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-12-09 06:56:06 -0500</bug_when>
    <thetext>Sorry, let&apos;s not rush it, changing target to M5.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2501709</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-01-03 19:44:35 -0500</bug_when>
    <thetext>I should check if https://www.eclipse.org/forums/index.php?t=msg&amp;th=899545&amp;goto=1544707&amp;#msg_1544707 relates to this issue.

My guess is we are inferring a type Function&lt;@NonNull ? super @Nullable String, something&gt; without detecting that this is nonsense.

Mh, it&apos;s not the direct &quot;contradictory null annotations&quot;(?) but also not precisely a conflict with a bound declared at the type parameter, well ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2511625</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-01-28 14:38:06 -0500</bug_when>
    <thetext>Ran out of time for M5.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2531449</commentid>
    <comment_count>5</comment_count>
    <who name="Eclipse Genie">genie</who>
    <bug_when>2015-03-14 20:03:30 -0400</bug_when>
    <thetext>New Gerrit change created: https://git.eclipse.org/r/43881</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2531452</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-03-14 20:17:15 -0400</bug_when>
    <thetext>(In reply to Eclipse Genie from comment #5)
&gt; New Gerrit change created: https://git.eclipse.org/r/43881

This patch ensures detection of the root problem for comment 3: we are indeed inferring a special kind of contradictory type. The patch ensures consistency, so that the same root cause is reported for these arguments
- Function instance
- method reference
- lambda expression

The originally reported error is now only an unavoidable secondary error. For method references I succeeded in suppressing this secondary error. However, for lambda expressions secondary errors would be quite hard to suppress, because they can occur anywhere within the lambda body.

In the test I softened the relevant errors to warning to test that the program is still runnable, because from a pure Java p.o.v. inference succeeds, even if the result has contradictory null annotations.


This change isn&apos;t exactly the extra safety requested in this bug. We should in fact distinguish:
- conflicts at a single location (i.e., the same type variable should be @NonNull and @Nullable)
- conflicts between a wildcard/typevariable and one of its bounds

It&apos;s the latter category that&apos;s handled by the patch (and can&apos;t be detected in ThreeSets.setInstantiation() as it arises only when computing the method substitute).

Regarding the former case we already have worked hard to give priority to null constraints from the type parameter. I&apos;ll give that issue one final pass over ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2531454</commentid>
    <comment_count>7</comment_count>
    <who name="Eclipse Genie">genie</who>
    <bug_when>2015-03-14 21:18:45 -0400</bug_when>
    <thetext>Gerrit change https://git.eclipse.org/r/43881 was merged to [master].
Commit: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=07de476492c87dc4eb8797084ffe99575b2b9c74</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2551847</commentid>
    <comment_count>8</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-04-26 12:42:07 -0400</bug_when>
    <thetext>I inspected all paths leading into TypeVariableBinding.boundCheck(Substitution, TypeBinding, Scope) to find out, if all bound-argument incompatibilities are reported.

PSTR.checkBounds(Scope)
 - later calls checkNullConstraints 
   -...-&gt; NullAnnotationMatching.analyse(...,BOUND_CHECK)
PQTR.checkBounds(ReferenceBinding,Scope,int)
 - same as above

The same also holds for:
PSTR.internalResolveType(Scope,ReferenceBinding,boolean,int)
PQTR.internalResolveType(Scope,boolean,int)

PGMB.boundCheck18(Scope,TypeBinding[])
 - happens inside type inference
 - indirectly triggered by
   - MessageSend.findMethodBinding()
   - AllocationExpression(Statement).findConstructorBinding()
 - checking is performed via
   - MessageSend.resolveType -&gt; TypeReference.checkNullConstraints(...)
 - check MISSING for AllocationExpression!

PGMB.computeCompatibleMethod()
 - call to checkBounds() code not reached in 1.8

PTB.getSingleAbstractMethod()
 - checkNullConstraints might be missing here, too.

----

Next I&apos;ll try to create failing tests for
 - (Qualified)AllocationExpression
 - LambdaExpression
 - ReferenceExpression</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2551872</commentid>
    <comment_count>9</comment_count>
    <who name="Eclipse Genie">genie</who>
    <bug_when>2015-04-26 15:41:40 -0400</bug_when>
    <thetext>New Gerrit change created: https://git.eclipse.org/r/46520</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2551876</commentid>
    <comment_count>10</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-04-26 16:39:58 -0400</bug_when>
    <thetext>(In reply to Eclipse Genie from comment #9)
&gt; New Gerrit change created: https://git.eclipse.org/r/46520

This takes care of mismatches between explicit type parameters in an allocation against declared bounds (no inference involved).

Directly similar problems cannot be constructed for lambdas and reference expressions: instead of explicit type arguments we would need to mention the parameterized expected type, which in itself would be detected as violating its bounds.

For other situations of inference-incurred bound problems I&apos;ve filed bug 465507 (targetting 4.6 since we need a new IProblem).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2551889</commentid>
    <comment_count>11</comment_count>
    <who name="Eclipse Genie">genie</who>
    <bug_when>2015-04-26 18:43:12 -0400</bug_when>
    <thetext>Gerrit change https://git.eclipse.org/r/46520 was merged to [master].
Commit: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=542bc03686c1982d51c01449da7cc4df74fbe14e</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2551890</commentid>
    <comment_count>12</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-04-26 18:45:00 -0400</bug_when>
    <thetext>(In reply to Eclipse Genie from comment #11)
&gt; Gerrit change https://git.eclipse.org/r/46520 was merged to [master].
&gt; Commit:
&gt; http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
&gt; ?id=542bc03686c1982d51c01449da7cc4df74fbe14e

Direct bound checks for AllocationExpression &amp; QualifiedAllocationExpression.

That&apos;s all I can do for 4.5, next round: bug 465507.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2553642</commentid>
    <comment_count>13</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-04-29 05:28:22 -0400</bug_when>
    <thetext>Verified for 4.5 M7 by code inspection.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>