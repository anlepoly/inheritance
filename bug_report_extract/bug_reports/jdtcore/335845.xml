<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>335845</bug_id>
          
          <creation_ts>2011-01-31 08:54:00 -0500</creation_ts>
          <short_desc>[compiler] compiler wrongly suggests to add a static qualifier to a method</short_desc>
          <delta_ts>2011-03-07 11:13:06 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.7</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>3.7 M6</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Philippe Coucaud">phil_fj12</reporter>
          <assigned_to name="Ayushman Jain">amj87.iitr</assigned_to>
          <cc>Olivier_Thomann</cc>
    
    <cc>satyam.kandula</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="38945"
          type_id="1"
          status="+"
          setter="satyam.kandula"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1875536</commentid>
    <comment_count>0</comment_count>
    <who name="Philippe Coucaud">phil_fj12</who>
    <bug_when>2011-01-31 08:54:15 -0500</bug_when>
    <thetext>Build Identifier: I20110127-2034 (3.7M5)

public class Test {
   private class Bar {}

   private void foo() {
      new Bar();
   }
}

compiler emits a warning (or an error depending on the compiler settings):
The method foo() from the type Test can be declared as static

However, adding a static qualifier produces a compiler error because no enclosing instance of type Test is accessible.

Reproducible: Always

Steps to Reproduce:
Might be related to bug 335780 (although it is about a potential match and not a definitive one like this one).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1876246</commentid>
    <comment_count>1</comment_count>
      <attachid>188036</attachid>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-02-01 07:07:31 -0500</bug_when>
    <thetext>Created attachment 188036
proposed fix v1.0 + regression tests

Allocation of a (non-static) member typewithout an enclosing instance of a parent type is done via AllocationExpression, while with an enclosing instance is done via QualifiedAllocationExpression. This patch adds a check in AllocationExpression#analyseCode(..) to reset the static flag for a method if an allocation expression is encountered for a non-static member type.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1876321</commentid>
    <comment_count>2</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-02-01 09:18:57 -0500</bug_when>
    <thetext>All tests pass. Satyam, please review. Thanks!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1877005</commentid>
    <comment_count>3</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-02-02 08:26:15 -0500</bug_when>
    <thetext>Ayush, The following test fails with the patch.
public class SuperTest {
 class Bar {}
}

public class Test extends SuperTest{
   private void foo() {
      new Bar();
   }
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1877052</commentid>
    <comment_count>4</comment_count>
      <attachid>188147</attachid>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-02-02 09:50:39 -0500</bug_when>
    <thetext>Created attachment 188147
proposed fix v1.1 + regression tests

Here&apos;s the updated fix. I was using the wrong bits - ASTNode.IsMemberType bits, whereas I should&apos;ve used TagBits.IsMemberType, since i&apos;m checking the binding bits and not the AST node bits.

Added another test to take care of this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1877564</commentid>
    <comment_count>5</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-02-03 01:56:47 -0500</bug_when>
    <thetext>+1. The patch looks good for me.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1877727</commentid>
    <comment_count>6</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-02-03 08:31:46 -0500</bug_when>
    <thetext>Released in HEAD for 3.7M6</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1894295</commentid>
    <comment_count>7</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-03-07 11:13:06 -0500</bug_when>
    <thetext>Verified for 3.7M6.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>188036</attachid>
            <date>2011-02-01 07:07:00 -0500</date>
            <delta_ts>2011-02-02 09:50:39 -0500</delta_ts>
            <desc>proposed fix v1.0 + regression tests</desc>
            <filename>patch335845.txt</filename>
            <type>text/plain</type>
            <size>11186</size>
            <attacher name="Ayushman Jain">amj87.iitr</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMA0KI1Agb3JnLmVjbGlwc2UuamR0LmNvcmUN
CkluZGV4OiBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Fs
bG9jYXRpb25FeHByZXNzaW9uLmphdmENCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NClJDUyBmaWxlOiAvY3Zzcm9vdC9l
Y2xpcHNlL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YSx2DQpyZXRyaWV2aW5n
IHJldmlzaW9uIDEuODQNCmRpZmYgLXUgLXIxLjg0IEFsbG9jYXRpb25FeHByZXNzaW9uLmphdmEN
Ci0tLSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FsbG9j
YXRpb25FeHByZXNzaW9uLmphdmEJMTIgQXVnIDIwMTAgMTY6NTg6MjggLTAwMDAJMS44NA0KKysr
IGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWxsb2NhdGlv
bkV4cHJlc3Npb24uamF2YQkxIEZlYiAyMDExIDEyOjAwOjUxIC0wMDAwDQpAQCAtMSw1ICsxLDUg
QEANCiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAx
MCBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4NCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIw
MTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuDQogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4g
VGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscw0KICAqIGFyZSBtYWRl
IGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2Ug
djEuMA0KICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZh
aWxhYmxlIGF0DQpAQCAtNjAsNiArNjAsMTEgQEANCiAJCQlmbG93SW5mby51bmNvbmRpdGlvbmFs
Q29weSgpLA0KIAkJCWN1cnJlbnRTY29wZSk7DQogCX0NCisJaWYgKCh0aGlzLmJpbmRpbmcuZGVj
bGFyaW5nQ2xhc3MudGFnQml0cyAmIEFTVE5vZGUuSXNNZW1iZXJUeXBlKSAhPSAwICYmICF0aGlz
LmJpbmRpbmcuZGVjbGFyaW5nQ2xhc3MuaXNTdGF0aWMoKSkgew0KKwkJLy8gYWxsb2NhdGluZyBh
IG5vbi1zdGF0aWMgbWVtYmVyIHR5cGUgd2l0aG91dCBhbiBlbmNsb3NpbmcgaW5zdGFuY2Ugb2Yg
cGFyZW50IHR5cGUNCisJCS8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVn
LmNnaT9pZD0zMzU4NDUNCisJCWN1cnJlbnRTY29wZS5yZXNldEVuY2xvc2luZ01ldGhvZFN0YXRp
Y0ZsYWcoKTsNCisJfQ0KIAltYW5hZ2VFbmNsb3NpbmdJbnN0YW5jZUFjY2Vzc0lmTmVjZXNzYXJ5
KGN1cnJlbnRTY29wZSwgZmxvd0luZm8pOw0KIAltYW5hZ2VTeW50aGV0aWNBY2Nlc3NJZk5lY2Vz
c2FyeShjdXJyZW50U2NvcGUsIGZsb3dJbmZvKTsNCiANCiNQIG9yZy5lY2xpcHNlLmpkdC5jb3Jl
LnRlc3RzLmNvbXBpbGVyDQpJbmRleDogc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Nv
bXBpbGVyL3JlZ3Jlc3Npb24vUHJvYmxlbVR5cGVBbmRNZXRob2RUZXN0LmphdmENCj09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT0NClJDUyBmaWxlOiAvY3Zzcm9vdC9lY2xpcHNlL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3Rz
LmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNz
aW9uL1Byb2JsZW1UeXBlQW5kTWV0aG9kVGVzdC5qYXZhLHYNCnJldHJpZXZpbmcgcmV2aXNpb24g
MS40MA0KZGlmZiAtdSAtcjEuNDAgUHJvYmxlbVR5cGVBbmRNZXRob2RUZXN0LmphdmENCi0tLSBz
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9Qcm9ibGVt
VHlwZUFuZE1ldGhvZFRlc3QuamF2YQkxNCBKYW4gMjAxMSAxNTozNDoxNSAtMDAwMAkxLjQwDQor
Kysgc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vUHJv
YmxlbVR5cGVBbmRNZXRob2RUZXN0LmphdmEJMSBGZWIgMjAxMSAxMjowMDo1NCAtMDAwMA0KQEAg
LTY2MzMsNCArNjYzMywyMDEgQEANCiAJCWNvbXBpbGVyT3B0aW9ucyAvKiBjdXN0b20gb3B0aW9u
cyAqLw0KIAkpOw0KIH0NCisNCisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93
X2J1Zy5jZ2k/aWQ9MzM1ODQ1DQorLy8gSWYgbWV0aG9kIGFsbG9jYXRlcyBhbiBpbm5lciBub24t
c3RhdGljIHR5cGUgd2l0aG91dCBhbiBlbmNsb3Npbmcgb2JqZWN0LCBtZXRob2QgY2FuJ3QgYmUg
c3RhdGljDQorcHVibGljIHZvaWQgdGVzdEJ1ZzMzNTg0NWEoKSB7DQorCU1hcCBjb21waWxlck9w
dGlvbnMgPSBnZXRDb21waWxlck9wdGlvbnMoKTsNCisJY29tcGlsZXJPcHRpb25zLnB1dChDb21w
aWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydE1ldGhvZENhbkJlU3RhdGljLCBDb21waWxlck9wdGlv
bnMuRVJST1IpOw0KKwljb21waWxlck9wdGlvbnMucHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJT05f
UmVwb3J0TWV0aG9kQ2FuQmVQb3RlbnRpYWxseVN0YXRpYywgQ29tcGlsZXJPcHRpb25zLkVSUk9S
KTsNCisJY29tcGlsZXJPcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydE5v
blN0YXRpY0FjY2Vzc1RvU3RhdGljLCBDb21waWxlck9wdGlvbnMuSUdOT1JFKTsNCisJY29tcGls
ZXJPcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydFVudXNlZExvY2FsLCBD
b21waWxlck9wdGlvbnMuSUdOT1JFKTsNCisJY29tcGlsZXJPcHRpb25zLnB1dChDb21waWxlck9w
dGlvbnMuT1BUSU9OX1JlcG9ydFVudXNlZE9iamVjdEFsbG9jYXRpb24sIENvbXBpbGVyT3B0aW9u
cy5JR05PUkUpOw0KKwljb21waWxlck9wdGlvbnMucHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJT05f
UmVwb3J0VW51c2VkUHJpdmF0ZU1lbWJlciwgQ29tcGlsZXJPcHRpb25zLklHTk9SRSk7DQorCWNv
bXBpbGVyT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9SZXBvcnRTeW50aGV0aWNB
Y2Nlc3NFbXVsYXRpb24sIENvbXBpbGVyT3B0aW9ucy5JR05PUkUpOw0KKwl0aGlzLnJ1bk5lZ2F0
aXZlVGVzdCgNCisJCW5ldyBTdHJpbmdbXSB7DQorCQkJCSJYLmphdmEiLCANCisJCQkJInB1Ymxp
YyBjbGFzcyBYIHtcbiIgKw0KKwkJCQkiCXByaXZhdGUgY2xhc3MgQmFyIHtcbiIgKw0KKwkJCQki
CQlpbnQgYSA9IDE7XG4iICsNCisJCQkJIgl9XG4iICsgDQorCQkJCSIJcHJpdmF0ZSB2b2lkIGZv
bygpIHtcbiIgKyAJLy8gZG9uJ3Qgd2Fybg0KKwkJCQkiCQluZXcgQmFyKCk7XG4iICsNCisJCQkJ
Igl9XG4iICsgDQorCQkJCSJ9Ig0KKwkJfSwNCisJCSIiLA0KKwkJbnVsbCAvKiBubyBleHRyYSBj
bGFzcyBsaWJyYXJpZXMgKi8sDQorCQl0cnVlIC8qIGZsdXNoIG91dHB1dCBkaXJlY3RvcnkgKi8s
DQorCQljb21waWxlck9wdGlvbnMgLyogY3VzdG9tIG9wdGlvbnMgKi8NCisJKTsNCit9DQorDQor
Ly8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTMzNTg0NQ0K
Ky8vIElmIG1ldGhvZCBhbGxvY2F0ZXMgYW4gaW5uZXIgbm9uLXN0YXRpYyB0eXBlIHdpdGhvdXQg
YW4gZW5jbG9zaW5nIG9iamVjdCwgbWV0aG9kIGNhbid0IGJlIHN0YXRpYw0KK3B1YmxpYyB2b2lk
IHRlc3RCdWczMzU4NDViKCkgew0KKwlNYXAgY29tcGlsZXJPcHRpb25zID0gZ2V0Q29tcGlsZXJP
cHRpb25zKCk7DQorCWNvbXBpbGVyT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9S
ZXBvcnRNZXRob2RDYW5CZVN0YXRpYywgQ29tcGlsZXJPcHRpb25zLkVSUk9SKTsNCisJY29tcGls
ZXJPcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydE1ldGhvZENhbkJlUG90
ZW50aWFsbHlTdGF0aWMsIENvbXBpbGVyT3B0aW9ucy5FUlJPUik7DQorCWNvbXBpbGVyT3B0aW9u
cy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9SZXBvcnROb25TdGF0aWNBY2Nlc3NUb1N0YXRp
YywgQ29tcGlsZXJPcHRpb25zLklHTk9SRSk7DQorCWNvbXBpbGVyT3B0aW9ucy5wdXQoQ29tcGls
ZXJPcHRpb25zLk9QVElPTl9SZXBvcnRVbnVzZWRMb2NhbCwgQ29tcGlsZXJPcHRpb25zLklHTk9S
RSk7DQorCWNvbXBpbGVyT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9SZXBvcnRV
bnVzZWRPYmplY3RBbGxvY2F0aW9uLCBDb21waWxlck9wdGlvbnMuSUdOT1JFKTsNCisJY29tcGls
ZXJPcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydFVudXNlZFByaXZhdGVN
ZW1iZXIsIENvbXBpbGVyT3B0aW9ucy5JR05PUkUpOw0KKwljb21waWxlck9wdGlvbnMucHV0KENv
bXBpbGVyT3B0aW9ucy5PUFRJT05fUmVwb3J0U3ludGhldGljQWNjZXNzRW11bGF0aW9uLCBDb21w
aWxlck9wdGlvbnMuSUdOT1JFKTsNCisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoDQorCQluZXcgU3Ry
aW5nW10gew0KKwkJCQkiWC5qYXZhIiwgDQorCQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsNCisJ
CQkJIglwcml2YXRlIGNsYXNzIEJhciB7XG4iICsNCisJCQkJIgkJaW50IGEgPSAxO1xuIiArDQor
CQkJCSIJfVxuIiArIA0KKwkJCQkiCXByaXZhdGUgdm9pZCBmb28oKSB7XG4iICsgCS8vIGRvbid0
IHdhcm4NCisJCQkJIgkJaW50IHggPSBuZXcgQmFyKCkuYTtcbiIgKw0KKwkJCQkiCX1cbiIgKyAN
CisJCQkJIn0iDQorCQl9LA0KKwkJIiIsDQorCQludWxsIC8qIG5vIGV4dHJhIGNsYXNzIGxpYnJh
cmllcyAqLywNCisJCXRydWUgLyogZmx1c2ggb3V0cHV0IGRpcmVjdG9yeSAqLywNCisJCWNvbXBp
bGVyT3B0aW9ucyAvKiBjdXN0b20gb3B0aW9ucyAqLw0KKwkpOw0KK30NCisNCisvLyBodHRwczov
L2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzM1ODQ1DQorLy8gSWYgbWV0
aG9kIGFsbG9jYXRlcyBhbiBpbm5lciBzdGF0aWMgdHlwZSB3aXRob3V0IGFuIGVuY2xvc2luZyBv
YmplY3QsIG1ldGhvZCBjYW4gYmUgc3RhdGljDQorcHVibGljIHZvaWQgdGVzdEJ1ZzMzNTg0NWMo
KSB7DQorCU1hcCBjb21waWxlck9wdGlvbnMgPSBnZXRDb21waWxlck9wdGlvbnMoKTsNCisJY29t
cGlsZXJPcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydE1ldGhvZENhbkJl
U3RhdGljLCBDb21waWxlck9wdGlvbnMuRVJST1IpOw0KKwljb21waWxlck9wdGlvbnMucHV0KENv
bXBpbGVyT3B0aW9ucy5PUFRJT05fUmVwb3J0TWV0aG9kQ2FuQmVQb3RlbnRpYWxseVN0YXRpYywg
Q29tcGlsZXJPcHRpb25zLkVSUk9SKTsNCisJY29tcGlsZXJPcHRpb25zLnB1dChDb21waWxlck9w
dGlvbnMuT1BUSU9OX1JlcG9ydE5vblN0YXRpY0FjY2Vzc1RvU3RhdGljLCBDb21waWxlck9wdGlv
bnMuSUdOT1JFKTsNCisJY29tcGlsZXJPcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9O
X1JlcG9ydFVudXNlZExvY2FsLCBDb21waWxlck9wdGlvbnMuSUdOT1JFKTsNCisJY29tcGlsZXJP
cHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydFVudXNlZE9iamVjdEFsbG9j
YXRpb24sIENvbXBpbGVyT3B0aW9ucy5JR05PUkUpOw0KKwljb21waWxlck9wdGlvbnMucHV0KENv
bXBpbGVyT3B0aW9ucy5PUFRJT05fUmVwb3J0VW51c2VkUHJpdmF0ZU1lbWJlciwgQ29tcGlsZXJP
cHRpb25zLklHTk9SRSk7DQorCWNvbXBpbGVyT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9Q
VElPTl9SZXBvcnRTeW50aGV0aWNBY2Nlc3NFbXVsYXRpb24sIENvbXBpbGVyT3B0aW9ucy5JR05P
UkUpOw0KKwl0aGlzLnJ1bk5lZ2F0aXZlVGVzdCgNCisJCW5ldyBTdHJpbmdbXSB7DQorCQkJCSJY
LmphdmEiLCANCisJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKw0KKwkJCQkiCXByaXZhdGUgc3Rh
dGljIGNsYXNzIEJhciB7XG4iICsNCisJCQkJIgkJaW50IGEgPSAxO1xuIiArDQorCQkJCSIJfVxu
IiArIA0KKwkJCQkiCXByaXZhdGUgdm9pZCBmb28oKSB7XG4iICsgCS8vIHdhcm4gc2luY2UgQmFy
IGlzIHN0YXRpYw0KKwkJCQkiCQluZXcgQmFyKCk7XG4iICsNCisJCQkJIgkJaW50IHggPSBuZXcg
QmFyKCkuYTsiICsNCisJCQkJIgl9XG4iICsgDQorCQkJCSJ9Ig0KKwkJfSwNCisJCSItLS0tLS0t
LS0tXG4iICsgDQorCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDUpXG4iICsgDQorCQki
CXByaXZhdGUgdm9pZCBmb28oKSB7XG4iICsgDQorCQkiCSAgICAgICAgICAgICBeXl5eXlxuIiAr
IA0KKwkJIlRoZSBtZXRob2QgZm9vKCkgZnJvbSB0aGUgdHlwZSBYIGNhbiBiZSBkZWNsYXJlZCBh
cyBzdGF0aWNcbiIgKyANCisJCSItLS0tLS0tLS0tXG4iLA0KKwkJbnVsbCAvKiBubyBleHRyYSBj
bGFzcyBsaWJyYXJpZXMgKi8sDQorCQl0cnVlIC8qIGZsdXNoIG91dHB1dCBkaXJlY3RvcnkgKi8s
DQorCQljb21waWxlck9wdGlvbnMgLyogY3VzdG9tIG9wdGlvbnMgKi8NCisJKTsNCit9DQorDQor
Ly8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTMzNTg0NQ0K
Ky8vIElmIG1ldGhvZCBhbGxvY2F0ZXMgYW4gaW5uZXIgbm9uLXN0YXRpYyB0eXBlIHdpdGhvdXQg
YW4gZW5jbG9zaW5nIG9iamVjdCwgbWV0aG9kIGNhbid0IGJlIHN0YXRpYw0KK3B1YmxpYyB2b2lk
IHRlc3RCdWczMzU4NDVkKCkgew0KKwlNYXAgY29tcGlsZXJPcHRpb25zID0gZ2V0Q29tcGlsZXJP
cHRpb25zKCk7DQorCWNvbXBpbGVyT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9S
ZXBvcnRNZXRob2RDYW5CZVN0YXRpYywgQ29tcGlsZXJPcHRpb25zLkVSUk9SKTsNCisJY29tcGls
ZXJPcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydE1ldGhvZENhbkJlUG90
ZW50aWFsbHlTdGF0aWMsIENvbXBpbGVyT3B0aW9ucy5FUlJPUik7DQorCWNvbXBpbGVyT3B0aW9u
cy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9SZXBvcnROb25TdGF0aWNBY2Nlc3NUb1N0YXRp
YywgQ29tcGlsZXJPcHRpb25zLklHTk9SRSk7DQorCWNvbXBpbGVyT3B0aW9ucy5wdXQoQ29tcGls
ZXJPcHRpb25zLk9QVElPTl9SZXBvcnRVbnVzZWRMb2NhbCwgQ29tcGlsZXJPcHRpb25zLklHTk9S
RSk7DQorCWNvbXBpbGVyT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9SZXBvcnRV
bnVzZWRPYmplY3RBbGxvY2F0aW9uLCBDb21waWxlck9wdGlvbnMuSUdOT1JFKTsNCisJY29tcGls
ZXJPcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydFVudXNlZFByaXZhdGVN
ZW1iZXIsIENvbXBpbGVyT3B0aW9ucy5JR05PUkUpOw0KKwljb21waWxlck9wdGlvbnMucHV0KENv
bXBpbGVyT3B0aW9ucy5PUFRJT05fUmVwb3J0U3ludGhldGljQWNjZXNzRW11bGF0aW9uLCBDb21w
aWxlck9wdGlvbnMuSUdOT1JFKTsNCisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoDQorCQluZXcgU3Ry
aW5nW10gew0KKwkJCQkiWC5qYXZhIiwgDQorCQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsNCisJ
CQkJIglwcml2YXRlIGNsYXNzIEJhciB7XG4iICsNCisJCQkJIgkJY2xhc3MgQmFyMnt9XG4iICsN
CisJCQkJIgl9XG4iICsgDQorCQkJCSIJcHJpdmF0ZSB2b2lkIGZvbygpIHtcbiIgKyAJLy8gZG9u
J3Qgd2Fybg0KKwkJCQkiCQluZXcgQmFyKCkubmV3IEJhcjIoKTtcbiIgKw0KKwkJCQkiCX1cbiIg
KyANCisJCQkJIn0iDQorCQl9LA0KKwkJIiIsDQorCQludWxsIC8qIG5vIGV4dHJhIGNsYXNzIGxp
YnJhcmllcyAqLywNCisJCXRydWUgLyogZmx1c2ggb3V0cHV0IGRpcmVjdG9yeSAqLywNCisJCWNv
bXBpbGVyT3B0aW9ucyAvKiBjdXN0b20gb3B0aW9ucyAqLw0KKwkpOw0KK30NCisNCisvLyBodHRw
czovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzM1ODQ1DQorLy8gSWYg
bWV0aG9kIGFsbG9jYXRlcyBhbiBpbm5lciBzdGF0aWMgdHlwZSB3aXRob3V0IGFuIGVuY2xvc2lu
ZyBvYmplY3QsIG1ldGhvZCBjYW4gYmUgc3RhdGljDQorcHVibGljIHZvaWQgdGVzdEJ1ZzMzNTg0
NWUoKSB7DQorCU1hcCBjb21waWxlck9wdGlvbnMgPSBnZXRDb21waWxlck9wdGlvbnMoKTsNCisJ
Y29tcGlsZXJPcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydE1ldGhvZENh
bkJlU3RhdGljLCBDb21waWxlck9wdGlvbnMuRVJST1IpOw0KKwljb21waWxlck9wdGlvbnMucHV0
KENvbXBpbGVyT3B0aW9ucy5PUFRJT05fUmVwb3J0TWV0aG9kQ2FuQmVQb3RlbnRpYWxseVN0YXRp
YywgQ29tcGlsZXJPcHRpb25zLkVSUk9SKTsNCisJY29tcGlsZXJPcHRpb25zLnB1dChDb21waWxl
ck9wdGlvbnMuT1BUSU9OX1JlcG9ydE5vblN0YXRpY0FjY2Vzc1RvU3RhdGljLCBDb21waWxlck9w
dGlvbnMuSUdOT1JFKTsNCisJY29tcGlsZXJPcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BU
SU9OX1JlcG9ydFVudXNlZExvY2FsLCBDb21waWxlck9wdGlvbnMuSUdOT1JFKTsNCisJY29tcGls
ZXJPcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydFVudXNlZE9iamVjdEFs
bG9jYXRpb24sIENvbXBpbGVyT3B0aW9ucy5JR05PUkUpOw0KKwljb21waWxlck9wdGlvbnMucHV0
KENvbXBpbGVyT3B0aW9ucy5PUFRJT05fUmVwb3J0VW51c2VkUHJpdmF0ZU1lbWJlciwgQ29tcGls
ZXJPcHRpb25zLklHTk9SRSk7DQorCWNvbXBpbGVyT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25z
Lk9QVElPTl9SZXBvcnRTeW50aGV0aWNBY2Nlc3NFbXVsYXRpb24sIENvbXBpbGVyT3B0aW9ucy5J
R05PUkUpOw0KKwl0aGlzLnJ1bk5lZ2F0aXZlVGVzdCgNCisJCW5ldyBTdHJpbmdbXSB7DQorCQkJ
CSJYLmphdmEiLCANCisJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKw0KKwkJCQkiCXByaXZhdGUg
Y2xhc3MgQmFyIHtcbiIgKw0KKwkJCQkiCQlpbnQgYSA9IDE7XG4iICsNCisJCQkJIgl9XG4iICsg
DQorCQkJCSIJcHJpdmF0ZSB2b2lkIGZvbygpIHtcbiIgKyAJLy8gd2FybiBzaW5jZSBCYXIgaXMg
YWxsb2NhdGVkIHZpYSBUZXN0IG9iamVjdA0KKwkJCQkiCQluZXcgWCgpLm5ldyBCYXIoKTtcbiIg
Kw0KKwkJCQkiCX1cbiIgKyANCisJCQkJIn0iDQorCQl9LA0KKwkJIi0tLS0tLS0tLS1cbiIgKyAN
CisJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNSlcbiIgKyANCisJCSIJcHJpdmF0ZSB2
b2lkIGZvbygpIHtcbiIgKyANCisJCSIJICAgICAgICAgICAgIF5eXl5eXG4iICsgDQorCQkiVGhl
IG1ldGhvZCBmb28oKSBmcm9tIHRoZSB0eXBlIFggY2FuIGJlIGRlY2xhcmVkIGFzIHN0YXRpY1xu
IiArIA0KKwkJIi0tLS0tLS0tLS1cbiIsDQorCQludWxsIC8qIG5vIGV4dHJhIGNsYXNzIGxpYnJh
cmllcyAqLywNCisJCXRydWUgLyogZmx1c2ggb3V0cHV0IGRpcmVjdG9yeSAqLywNCisJCWNvbXBp
bGVyT3B0aW9ucyAvKiBjdXN0b20gb3B0aW9ucyAqLw0KKwkpOw0KK30NCisNCisvLyBodHRwczov
L2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzM1ODQ1DQorLy8gSWYgbWV0
aG9kIGFsbG9jYXRlcyBhbiBpbm5lciBzdGF0aWMgdHlwZSB3aXRob3V0IGFuIGVuY2xvc2luZyBv
YmplY3QsIG1ldGhvZCBjYW4gYmUgc3RhdGljDQorcHVibGljIHZvaWQgdGVzdEJ1ZzMzNTg0NWYo
KSB7DQorCU1hcCBjb21waWxlck9wdGlvbnMgPSBnZXRDb21waWxlck9wdGlvbnMoKTsNCisJY29t
cGlsZXJPcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydE1ldGhvZENhbkJl
U3RhdGljLCBDb21waWxlck9wdGlvbnMuRVJST1IpOw0KKwljb21waWxlck9wdGlvbnMucHV0KENv
bXBpbGVyT3B0aW9ucy5PUFRJT05fUmVwb3J0TWV0aG9kQ2FuQmVQb3RlbnRpYWxseVN0YXRpYywg
Q29tcGlsZXJPcHRpb25zLkVSUk9SKTsNCisJY29tcGlsZXJPcHRpb25zLnB1dChDb21waWxlck9w
dGlvbnMuT1BUSU9OX1JlcG9ydE5vblN0YXRpY0FjY2Vzc1RvU3RhdGljLCBDb21waWxlck9wdGlv
bnMuSUdOT1JFKTsNCisJY29tcGlsZXJPcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9O
X1JlcG9ydFVudXNlZExvY2FsLCBDb21waWxlck9wdGlvbnMuSUdOT1JFKTsNCisJY29tcGlsZXJP
cHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydFVudXNlZE9iamVjdEFsbG9j
YXRpb24sIENvbXBpbGVyT3B0aW9ucy5JR05PUkUpOw0KKwljb21waWxlck9wdGlvbnMucHV0KENv
bXBpbGVyT3B0aW9ucy5PUFRJT05fUmVwb3J0VW51c2VkUHJpdmF0ZU1lbWJlciwgQ29tcGlsZXJP
cHRpb25zLklHTk9SRSk7DQorCWNvbXBpbGVyT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9Q
VElPTl9SZXBvcnRTeW50aGV0aWNBY2Nlc3NFbXVsYXRpb24sIENvbXBpbGVyT3B0aW9ucy5JR05P
UkUpOw0KKwl0aGlzLnJ1bk5lZ2F0aXZlVGVzdCgNCisJCW5ldyBTdHJpbmdbXSB7DQorCQkJCSJY
LmphdmEiLCANCisJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKw0KKwkJCQkiCXByaXZhdGUgY2xh
c3MgQmFyIHtcbiIgKw0KKwkJCQkiCQlpbnQgYSA9IDE7XG4iICsNCisJCQkJIgl9XG4iICsgDQor
CQkJCSIJcHJpdmF0ZSB2b2lkIGZvbygpIHtcbiIgKyAJLy8gd2FybiBzaW5jZSBCYXIgaXMgYWxs
b2NhdGVkIHZpYSBUZXN0IG9iamVjdA0KKwkJCQkiCQlYIHggPSBuZXcgWCgpOyIgKw0KKwkJCQki
CQl4Lm5ldyBCYXIoKS5hID0gMjtcbiIgKw0KKwkJCQkiCX1cbiIgKyANCisJCQkJIn0iDQorCQl9
LA0KKwkJIi0tLS0tLS0tLS1cbiIgKyANCisJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUg
NSlcbiIgKyANCisJCSIJcHJpdmF0ZSB2b2lkIGZvbygpIHtcbiIgKyANCisJCSIJICAgICAgICAg
ICAgIF5eXl5eXG4iICsgDQorCQkiVGhlIG1ldGhvZCBmb28oKSBmcm9tIHRoZSB0eXBlIFggY2Fu
IGJlIGRlY2xhcmVkIGFzIHN0YXRpY1xuIiArIA0KKwkJIi0tLS0tLS0tLS1cbiIsDQorCQludWxs
IC8qIG5vIGV4dHJhIGNsYXNzIGxpYnJhcmllcyAqLywNCisJCXRydWUgLyogZmx1c2ggb3V0cHV0
IGRpcmVjdG9yeSAqLywNCisJCWNvbXBpbGVyT3B0aW9ucyAvKiBjdXN0b20gb3B0aW9ucyAqLw0K
KwkpOw0KK30NCiB9DQo=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>188147</attachid>
            <date>2011-02-02 09:50:00 -0500</date>
            <delta_ts>2011-02-02 09:50:39 -0500</delta_ts>
            <desc>proposed fix v1.1 + regression tests</desc>
            <filename>patch335845.txt</filename>
            <type>text/plain</type>
            <size>13050</size>
            <attacher name="Ayushman Jain">amj87.iitr</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMA0KI1Agb3JnLmVjbGlwc2UuamR0LmNvcmUN
CkluZGV4OiBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Fs
bG9jYXRpb25FeHByZXNzaW9uLmphdmENCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NClJDUyBmaWxlOiAvY3Zzcm9vdC9l
Y2xpcHNlL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YSx2DQpyZXRyaWV2aW5n
IHJldmlzaW9uIDEuODQNCmRpZmYgLXUgLXIxLjg0IEFsbG9jYXRpb25FeHByZXNzaW9uLmphdmEN
Ci0tLSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FsbG9j
YXRpb25FeHByZXNzaW9uLmphdmEJMTIgQXVnIDIwMTAgMTY6NTg6MjggLTAwMDAJMS44NA0KKysr
IGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWxsb2NhdGlv
bkV4cHJlc3Npb24uamF2YQkyIEZlYiAyMDExIDE0OjQ4OjIwIC0wMDAwDQpAQCAtMSw1ICsxLDUg
QEANCiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKg0KLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAx
MCBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4NCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIw
MTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuDQogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4g
VGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscw0KICAqIGFyZSBtYWRl
IGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2Ug
djEuMA0KICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZh
aWxhYmxlIGF0DQpAQCAtNjAsNiArNjAsMTEgQEANCiAJCQlmbG93SW5mby51bmNvbmRpdGlvbmFs
Q29weSgpLA0KIAkJCWN1cnJlbnRTY29wZSk7DQogCX0NCisJaWYgKHRoaXMuYmluZGluZy5kZWNs
YXJpbmdDbGFzcy5pc01lbWJlclR5cGUoKSAmJiAhdGhpcy5iaW5kaW5nLmRlY2xhcmluZ0NsYXNz
LmlzU3RhdGljKCkpIHsNCisJCS8vIGFsbG9jYXRpbmcgYSBub24tc3RhdGljIG1lbWJlciB0eXBl
IHdpdGhvdXQgYW4gZW5jbG9zaW5nIGluc3RhbmNlIG9mIHBhcmVudCB0eXBlDQorCQkvLyBodHRw
czovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzM1ODQ1DQorCQljdXJy
ZW50U2NvcGUucmVzZXRFbmNsb3NpbmdNZXRob2RTdGF0aWNGbGFnKCk7DQorCX0NCiAJbWFuYWdl
RW5jbG9zaW5nSW5zdGFuY2VBY2Nlc3NJZk5lY2Vzc2FyeShjdXJyZW50U2NvcGUsIGZsb3dJbmZv
KTsNCiAJbWFuYWdlU3ludGhldGljQWNjZXNzSWZOZWNlc3NhcnkoY3VycmVudFNjb3BlLCBmbG93
SW5mbyk7DQogDQojUCBvcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlcg0KSW5kZXg6
IHNyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1Byb2Js
ZW1UeXBlQW5kTWV0aG9kVGVzdC5qYXZhDQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQpSQ1MgZmlsZTogL2N2c3Jvb3Qv
ZWNsaXBzZS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlw
c2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9Qcm9ibGVtVHlwZUFuZE1ldGhv
ZFRlc3QuamF2YSx2DQpyZXRyaWV2aW5nIHJldmlzaW9uIDEuNDANCmRpZmYgLXUgLXIxLjQwIFBy
b2JsZW1UeXBlQW5kTWV0aG9kVGVzdC5qYXZhDQotLS0gc3JjL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vUHJvYmxlbVR5cGVBbmRNZXRob2RUZXN0LmphdmEJ
MTQgSmFuIDIwMTEgMTU6MzQ6MTUgLTAwMDAJMS40MA0KKysrIHNyYy9vcmcvZWNsaXBzZS9qZHQv
Y29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1Byb2JsZW1UeXBlQW5kTWV0aG9kVGVzdC5q
YXZhCTIgRmViIDIwMTEgMTQ6NDg6MjMgLTAwMDANCkBAIC0zMCw3ICszMCw3IEBADQogLy8gU3Rh
dGljIGluaXRpYWxpemVyIHRvIHNwZWNpZnkgdGVzdHMgc3Vic2V0IHVzaW5nIFRFU1RTXyogc3Rh
dGljIHZhcmlhYmxlcw0KIC8vIEFsbCBzcGVjaWZpZWQgdGVzdHMgd2hpY2ggZG9lcyBub3QgYmVs
b25nIHRvIHRoZSBjbGFzcyBhcmUgc2tpcHBlZC4uLg0KIHN0YXRpYyB7DQotLy8JCVRFU1RTX05B
TUVTID0gbmV3IFN0cmluZ1tdIHsgInRlc3QxMjMiIH07DQorLy8JCVRFU1RTX05BTUVTID0gbmV3
IFN0cmluZ1tdIHsgInRlc3RCdWczMzU4NDVnIiB9Ow0KIC8vCQlURVNUU19OVU1CRVJTID0gbmV3
IGludFtdIHsgMTEzIH07DQogLy8JCVRFU1RTX1JBTkdFID0gbmV3IGludFtdIHsgMTA4LCAtMSB9
Ow0KIH0NCkBAIC02NjMzLDQgKzY2MzMsMjM5IEBADQogCQljb21waWxlck9wdGlvbnMgLyogY3Vz
dG9tIG9wdGlvbnMgKi8NCiAJKTsNCiB9DQorDQorLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3Jn
L2J1Z3Mvc2hvd19idWcuY2dpP2lkPTMzNTg0NQ0KKy8vIElmIG1ldGhvZCBhbGxvY2F0ZXMgYW4g
aW5uZXIgbm9uLXN0YXRpYyB0eXBlIHdpdGhvdXQgYW4gZW5jbG9zaW5nIG9iamVjdCwgbWV0aG9k
IGNhbid0IGJlIHN0YXRpYw0KK3B1YmxpYyB2b2lkIHRlc3RCdWczMzU4NDVhKCkgew0KKwlNYXAg
Y29tcGlsZXJPcHRpb25zID0gZ2V0Q29tcGlsZXJPcHRpb25zKCk7DQorCWNvbXBpbGVyT3B0aW9u
cy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9SZXBvcnRNZXRob2RDYW5CZVN0YXRpYywgQ29t
cGlsZXJPcHRpb25zLkVSUk9SKTsNCisJY29tcGlsZXJPcHRpb25zLnB1dChDb21waWxlck9wdGlv
bnMuT1BUSU9OX1JlcG9ydE1ldGhvZENhbkJlUG90ZW50aWFsbHlTdGF0aWMsIENvbXBpbGVyT3B0
aW9ucy5FUlJPUik7DQorCWNvbXBpbGVyT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElP
Tl9SZXBvcnROb25TdGF0aWNBY2Nlc3NUb1N0YXRpYywgQ29tcGlsZXJPcHRpb25zLklHTk9SRSk7
DQorCWNvbXBpbGVyT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9SZXBvcnRVbnVz
ZWRMb2NhbCwgQ29tcGlsZXJPcHRpb25zLklHTk9SRSk7DQorCWNvbXBpbGVyT3B0aW9ucy5wdXQo
Q29tcGlsZXJPcHRpb25zLk9QVElPTl9SZXBvcnRVbnVzZWRPYmplY3RBbGxvY2F0aW9uLCBDb21w
aWxlck9wdGlvbnMuSUdOT1JFKTsNCisJY29tcGlsZXJPcHRpb25zLnB1dChDb21waWxlck9wdGlv
bnMuT1BUSU9OX1JlcG9ydFVudXNlZFByaXZhdGVNZW1iZXIsIENvbXBpbGVyT3B0aW9ucy5JR05P
UkUpOw0KKwljb21waWxlck9wdGlvbnMucHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJT05fUmVwb3J0
U3ludGhldGljQWNjZXNzRW11bGF0aW9uLCBDb21waWxlck9wdGlvbnMuSUdOT1JFKTsNCisJdGhp
cy5ydW5OZWdhdGl2ZVRlc3QoDQorCQluZXcgU3RyaW5nW10gew0KKwkJCQkiWC5qYXZhIiwgDQor
CQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsNCisJCQkJIglwcml2YXRlIGNsYXNzIEJhciB7XG4i
ICsNCisJCQkJIgkJaW50IGEgPSAxO1xuIiArDQorCQkJCSIJfVxuIiArIA0KKwkJCQkiCXByaXZh
dGUgdm9pZCBmb28oKSB7XG4iICsgCS8vIGRvbid0IHdhcm4NCisJCQkJIgkJbmV3IEJhcigpO1xu
IiArDQorCQkJCSIJfVxuIiArIA0KKwkJCQkifSINCisJCX0sDQorCQkiIiwNCisJCW51bGwgLyog
bm8gZXh0cmEgY2xhc3MgbGlicmFyaWVzICovLA0KKwkJdHJ1ZSAvKiBmbHVzaCBvdXRwdXQgZGly
ZWN0b3J5ICovLA0KKwkJY29tcGlsZXJPcHRpb25zIC8qIGN1c3RvbSBvcHRpb25zICovDQorCSk7
DQorfQ0KKw0KKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9p
ZD0zMzU4NDUNCisvLyBJZiBtZXRob2QgYWxsb2NhdGVzIGFuIGlubmVyIG5vbi1zdGF0aWMgdHlw
ZSB3aXRob3V0IGFuIGVuY2xvc2luZyBvYmplY3QsIG1ldGhvZCBjYW4ndCBiZSBzdGF0aWMNCitw
dWJsaWMgdm9pZCB0ZXN0QnVnMzM1ODQ1YigpIHsNCisJTWFwIGNvbXBpbGVyT3B0aW9ucyA9IGdl
dENvbXBpbGVyT3B0aW9ucygpOw0KKwljb21waWxlck9wdGlvbnMucHV0KENvbXBpbGVyT3B0aW9u
cy5PUFRJT05fUmVwb3J0TWV0aG9kQ2FuQmVTdGF0aWMsIENvbXBpbGVyT3B0aW9ucy5FUlJPUik7
DQorCWNvbXBpbGVyT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9SZXBvcnRNZXRo
b2RDYW5CZVBvdGVudGlhbGx5U3RhdGljLCBDb21waWxlck9wdGlvbnMuRVJST1IpOw0KKwljb21w
aWxlck9wdGlvbnMucHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJT05fUmVwb3J0Tm9uU3RhdGljQWNj
ZXNzVG9TdGF0aWMsIENvbXBpbGVyT3B0aW9ucy5JR05PUkUpOw0KKwljb21waWxlck9wdGlvbnMu
cHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJT05fUmVwb3J0VW51c2VkTG9jYWwsIENvbXBpbGVyT3B0
aW9ucy5JR05PUkUpOw0KKwljb21waWxlck9wdGlvbnMucHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJ
T05fUmVwb3J0VW51c2VkT2JqZWN0QWxsb2NhdGlvbiwgQ29tcGlsZXJPcHRpb25zLklHTk9SRSk7
DQorCWNvbXBpbGVyT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9SZXBvcnRVbnVz
ZWRQcml2YXRlTWVtYmVyLCBDb21waWxlck9wdGlvbnMuSUdOT1JFKTsNCisJY29tcGlsZXJPcHRp
b25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydFN5bnRoZXRpY0FjY2Vzc0VtdWxh
dGlvbiwgQ29tcGlsZXJPcHRpb25zLklHTk9SRSk7DQorCXRoaXMucnVuTmVnYXRpdmVUZXN0KA0K
KwkJbmV3IFN0cmluZ1tdIHsNCisJCQkJIlguamF2YSIsIA0KKwkJCQkicHVibGljIGNsYXNzIFgg
e1xuIiArDQorCQkJCSIJcHJpdmF0ZSBjbGFzcyBCYXIge1xuIiArDQorCQkJCSIJCWludCBhID0g
MTtcbiIgKw0KKwkJCQkiCX1cbiIgKyANCisJCQkJIglwcml2YXRlIHZvaWQgZm9vKCkge1xuIiAr
IAkvLyBkb24ndCB3YXJuDQorCQkJCSIJCWludCB4ID0gbmV3IEJhcigpLmE7XG4iICsNCisJCQkJ
Igl9XG4iICsgDQorCQkJCSJ9Ig0KKwkJfSwNCisJCSIiLA0KKwkJbnVsbCAvKiBubyBleHRyYSBj
bGFzcyBsaWJyYXJpZXMgKi8sDQorCQl0cnVlIC8qIGZsdXNoIG91dHB1dCBkaXJlY3RvcnkgKi8s
DQorCQljb21waWxlck9wdGlvbnMgLyogY3VzdG9tIG9wdGlvbnMgKi8NCisJKTsNCit9DQorDQor
Ly8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTMzNTg0NQ0K
Ky8vIElmIG1ldGhvZCBhbGxvY2F0ZXMgYW4gaW5uZXIgc3RhdGljIHR5cGUgd2l0aG91dCBhbiBl
bmNsb3Npbmcgb2JqZWN0LCBtZXRob2QgY2FuIGJlIHN0YXRpYw0KK3B1YmxpYyB2b2lkIHRlc3RC
dWczMzU4NDVjKCkgew0KKwlNYXAgY29tcGlsZXJPcHRpb25zID0gZ2V0Q29tcGlsZXJPcHRpb25z
KCk7DQorCWNvbXBpbGVyT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9SZXBvcnRN
ZXRob2RDYW5CZVN0YXRpYywgQ29tcGlsZXJPcHRpb25zLkVSUk9SKTsNCisJY29tcGlsZXJPcHRp
b25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydE1ldGhvZENhbkJlUG90ZW50aWFs
bHlTdGF0aWMsIENvbXBpbGVyT3B0aW9ucy5FUlJPUik7DQorCWNvbXBpbGVyT3B0aW9ucy5wdXQo
Q29tcGlsZXJPcHRpb25zLk9QVElPTl9SZXBvcnROb25TdGF0aWNBY2Nlc3NUb1N0YXRpYywgQ29t
cGlsZXJPcHRpb25zLklHTk9SRSk7DQorCWNvbXBpbGVyT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRp
b25zLk9QVElPTl9SZXBvcnRVbnVzZWRMb2NhbCwgQ29tcGlsZXJPcHRpb25zLklHTk9SRSk7DQor
CWNvbXBpbGVyT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9SZXBvcnRVbnVzZWRP
YmplY3RBbGxvY2F0aW9uLCBDb21waWxlck9wdGlvbnMuSUdOT1JFKTsNCisJY29tcGlsZXJPcHRp
b25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydFVudXNlZFByaXZhdGVNZW1iZXIs
IENvbXBpbGVyT3B0aW9ucy5JR05PUkUpOw0KKwljb21waWxlck9wdGlvbnMucHV0KENvbXBpbGVy
T3B0aW9ucy5PUFRJT05fUmVwb3J0U3ludGhldGljQWNjZXNzRW11bGF0aW9uLCBDb21waWxlck9w
dGlvbnMuSUdOT1JFKTsNCisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoDQorCQluZXcgU3RyaW5nW10g
ew0KKwkJCQkiWC5qYXZhIiwgDQorCQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsNCisJCQkJIglw
cml2YXRlIHN0YXRpYyBjbGFzcyBCYXIge1xuIiArDQorCQkJCSIJCWludCBhID0gMTtcbiIgKw0K
KwkJCQkiCX1cbiIgKyANCisJCQkJIglwcml2YXRlIHZvaWQgZm9vKCkge1xuIiArIAkvLyB3YXJu
IHNpbmNlIEJhciBpcyBzdGF0aWMNCisJCQkJIgkJbmV3IEJhcigpO1xuIiArDQorCQkJCSIJCWlu
dCB4ID0gbmV3IEJhcigpLmE7IiArDQorCQkJCSIJfVxuIiArIA0KKwkJCQkifSINCisJCX0sDQor
CQkiLS0tLS0tLS0tLVxuIiArIA0KKwkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA1KVxu
IiArIA0KKwkJIglwcml2YXRlIHZvaWQgZm9vKCkge1xuIiArIA0KKwkJIgkgICAgICAgICAgICAg
Xl5eXl5cbiIgKyANCisJCSJUaGUgbWV0aG9kIGZvbygpIGZyb20gdGhlIHR5cGUgWCBjYW4gYmUg
ZGVjbGFyZWQgYXMgc3RhdGljXG4iICsgDQorCQkiLS0tLS0tLS0tLVxuIiwNCisJCW51bGwgLyog
bm8gZXh0cmEgY2xhc3MgbGlicmFyaWVzICovLA0KKwkJdHJ1ZSAvKiBmbHVzaCBvdXRwdXQgZGly
ZWN0b3J5ICovLA0KKwkJY29tcGlsZXJPcHRpb25zIC8qIGN1c3RvbSBvcHRpb25zICovDQorCSk7
DQorfQ0KKw0KKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9p
ZD0zMzU4NDUNCisvLyBJZiBtZXRob2QgYWxsb2NhdGVzIGFuIGlubmVyIG5vbi1zdGF0aWMgdHlw
ZSB3aXRob3V0IGFuIGVuY2xvc2luZyBvYmplY3QsIG1ldGhvZCBjYW4ndCBiZSBzdGF0aWMNCitw
dWJsaWMgdm9pZCB0ZXN0QnVnMzM1ODQ1ZCgpIHsNCisJTWFwIGNvbXBpbGVyT3B0aW9ucyA9IGdl
dENvbXBpbGVyT3B0aW9ucygpOw0KKwljb21waWxlck9wdGlvbnMucHV0KENvbXBpbGVyT3B0aW9u
cy5PUFRJT05fUmVwb3J0TWV0aG9kQ2FuQmVTdGF0aWMsIENvbXBpbGVyT3B0aW9ucy5FUlJPUik7
DQorCWNvbXBpbGVyT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9SZXBvcnRNZXRo
b2RDYW5CZVBvdGVudGlhbGx5U3RhdGljLCBDb21waWxlck9wdGlvbnMuRVJST1IpOw0KKwljb21w
aWxlck9wdGlvbnMucHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJT05fUmVwb3J0Tm9uU3RhdGljQWNj
ZXNzVG9TdGF0aWMsIENvbXBpbGVyT3B0aW9ucy5JR05PUkUpOw0KKwljb21waWxlck9wdGlvbnMu
cHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJT05fUmVwb3J0VW51c2VkTG9jYWwsIENvbXBpbGVyT3B0
aW9ucy5JR05PUkUpOw0KKwljb21waWxlck9wdGlvbnMucHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJ
T05fUmVwb3J0VW51c2VkT2JqZWN0QWxsb2NhdGlvbiwgQ29tcGlsZXJPcHRpb25zLklHTk9SRSk7
DQorCWNvbXBpbGVyT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9SZXBvcnRVbnVz
ZWRQcml2YXRlTWVtYmVyLCBDb21waWxlck9wdGlvbnMuSUdOT1JFKTsNCisJY29tcGlsZXJPcHRp
b25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydFN5bnRoZXRpY0FjY2Vzc0VtdWxh
dGlvbiwgQ29tcGlsZXJPcHRpb25zLklHTk9SRSk7DQorCXRoaXMucnVuTmVnYXRpdmVUZXN0KA0K
KwkJbmV3IFN0cmluZ1tdIHsNCisJCQkJIlguamF2YSIsIA0KKwkJCQkicHVibGljIGNsYXNzIFgg
e1xuIiArDQorCQkJCSIJcHJpdmF0ZSBjbGFzcyBCYXIge1xuIiArDQorCQkJCSIJCWNsYXNzIEJh
cjJ7fVxuIiArDQorCQkJCSIJfVxuIiArIA0KKwkJCQkiCXByaXZhdGUgdm9pZCBmb28oKSB7XG4i
ICsgCS8vIGRvbid0IHdhcm4NCisJCQkJIgkJbmV3IEJhcigpLm5ldyBCYXIyKCk7XG4iICsNCisJ
CQkJIgl9XG4iICsgDQorCQkJCSJ9Ig0KKwkJfSwNCisJCSIiLA0KKwkJbnVsbCAvKiBubyBleHRy
YSBjbGFzcyBsaWJyYXJpZXMgKi8sDQorCQl0cnVlIC8qIGZsdXNoIG91dHB1dCBkaXJlY3Rvcnkg
Ki8sDQorCQljb21waWxlck9wdGlvbnMgLyogY3VzdG9tIG9wdGlvbnMgKi8NCisJKTsNCit9DQor
DQorLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTMzNTg0
NQ0KKy8vIElmIG1ldGhvZCBhbGxvY2F0ZXMgYW4gaW5uZXIgc3RhdGljIHR5cGUgd2l0aG91dCBh
biBlbmNsb3Npbmcgb2JqZWN0LCBtZXRob2QgY2FuIGJlIHN0YXRpYw0KK3B1YmxpYyB2b2lkIHRl
c3RCdWczMzU4NDVlKCkgew0KKwlNYXAgY29tcGlsZXJPcHRpb25zID0gZ2V0Q29tcGlsZXJPcHRp
b25zKCk7DQorCWNvbXBpbGVyT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9SZXBv
cnRNZXRob2RDYW5CZVN0YXRpYywgQ29tcGlsZXJPcHRpb25zLkVSUk9SKTsNCisJY29tcGlsZXJP
cHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydE1ldGhvZENhbkJlUG90ZW50
aWFsbHlTdGF0aWMsIENvbXBpbGVyT3B0aW9ucy5FUlJPUik7DQorCWNvbXBpbGVyT3B0aW9ucy5w
dXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9SZXBvcnROb25TdGF0aWNBY2Nlc3NUb1N0YXRpYywg
Q29tcGlsZXJPcHRpb25zLklHTk9SRSk7DQorCWNvbXBpbGVyT3B0aW9ucy5wdXQoQ29tcGlsZXJP
cHRpb25zLk9QVElPTl9SZXBvcnRVbnVzZWRMb2NhbCwgQ29tcGlsZXJPcHRpb25zLklHTk9SRSk7
DQorCWNvbXBpbGVyT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9SZXBvcnRVbnVz
ZWRPYmplY3RBbGxvY2F0aW9uLCBDb21waWxlck9wdGlvbnMuSUdOT1JFKTsNCisJY29tcGlsZXJP
cHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydFVudXNlZFByaXZhdGVNZW1i
ZXIsIENvbXBpbGVyT3B0aW9ucy5JR05PUkUpOw0KKwljb21waWxlck9wdGlvbnMucHV0KENvbXBp
bGVyT3B0aW9ucy5PUFRJT05fUmVwb3J0U3ludGhldGljQWNjZXNzRW11bGF0aW9uLCBDb21waWxl
ck9wdGlvbnMuSUdOT1JFKTsNCisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoDQorCQluZXcgU3RyaW5n
W10gew0KKwkJCQkiWC5qYXZhIiwgDQorCQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsNCisJCQkJ
Iglwcml2YXRlIGNsYXNzIEJhciB7XG4iICsNCisJCQkJIgkJaW50IGEgPSAxO1xuIiArDQorCQkJ
CSIJfVxuIiArIA0KKwkJCQkiCXByaXZhdGUgdm9pZCBmb28oKSB7XG4iICsgCS8vIHdhcm4gc2lu
Y2UgQmFyIGlzIGFsbG9jYXRlZCB2aWEgVGVzdCBvYmplY3QNCisJCQkJIgkJbmV3IFgoKS5uZXcg
QmFyKCk7XG4iICsNCisJCQkJIgl9XG4iICsgDQorCQkJCSJ9Ig0KKwkJfSwNCisJCSItLS0tLS0t
LS0tXG4iICsgDQorCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDUpXG4iICsgDQorCQki
CXByaXZhdGUgdm9pZCBmb28oKSB7XG4iICsgDQorCQkiCSAgICAgICAgICAgICBeXl5eXlxuIiAr
IA0KKwkJIlRoZSBtZXRob2QgZm9vKCkgZnJvbSB0aGUgdHlwZSBYIGNhbiBiZSBkZWNsYXJlZCBh
cyBzdGF0aWNcbiIgKyANCisJCSItLS0tLS0tLS0tXG4iLA0KKwkJbnVsbCAvKiBubyBleHRyYSBj
bGFzcyBsaWJyYXJpZXMgKi8sDQorCQl0cnVlIC8qIGZsdXNoIG91dHB1dCBkaXJlY3RvcnkgKi8s
DQorCQljb21waWxlck9wdGlvbnMgLyogY3VzdG9tIG9wdGlvbnMgKi8NCisJKTsNCit9DQorDQor
Ly8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTMzNTg0NQ0K
Ky8vIElmIG1ldGhvZCBhbGxvY2F0ZXMgYW4gaW5uZXIgc3RhdGljIHR5cGUgd2l0aG91dCBhbiBl
bmNsb3Npbmcgb2JqZWN0LCBtZXRob2QgY2FuIGJlIHN0YXRpYw0KK3B1YmxpYyB2b2lkIHRlc3RC
dWczMzU4NDVmKCkgew0KKwlNYXAgY29tcGlsZXJPcHRpb25zID0gZ2V0Q29tcGlsZXJPcHRpb25z
KCk7DQorCWNvbXBpbGVyT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9SZXBvcnRN
ZXRob2RDYW5CZVN0YXRpYywgQ29tcGlsZXJPcHRpb25zLkVSUk9SKTsNCisJY29tcGlsZXJPcHRp
b25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydE1ldGhvZENhbkJlUG90ZW50aWFs
bHlTdGF0aWMsIENvbXBpbGVyT3B0aW9ucy5FUlJPUik7DQorCWNvbXBpbGVyT3B0aW9ucy5wdXQo
Q29tcGlsZXJPcHRpb25zLk9QVElPTl9SZXBvcnROb25TdGF0aWNBY2Nlc3NUb1N0YXRpYywgQ29t
cGlsZXJPcHRpb25zLklHTk9SRSk7DQorCWNvbXBpbGVyT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRp
b25zLk9QVElPTl9SZXBvcnRVbnVzZWRMb2NhbCwgQ29tcGlsZXJPcHRpb25zLklHTk9SRSk7DQor
CWNvbXBpbGVyT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9SZXBvcnRVbnVzZWRP
YmplY3RBbGxvY2F0aW9uLCBDb21waWxlck9wdGlvbnMuSUdOT1JFKTsNCisJY29tcGlsZXJPcHRp
b25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydFVudXNlZFByaXZhdGVNZW1iZXIs
IENvbXBpbGVyT3B0aW9ucy5JR05PUkUpOw0KKwljb21waWxlck9wdGlvbnMucHV0KENvbXBpbGVy
T3B0aW9ucy5PUFRJT05fUmVwb3J0U3ludGhldGljQWNjZXNzRW11bGF0aW9uLCBDb21waWxlck9w
dGlvbnMuSUdOT1JFKTsNCisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoDQorCQluZXcgU3RyaW5nW10g
ew0KKwkJCQkiWC5qYXZhIiwgDQorCQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsNCisJCQkJIglw
cml2YXRlIGNsYXNzIEJhciB7XG4iICsNCisJCQkJIgkJaW50IGEgPSAxO1xuIiArDQorCQkJCSIJ
fVxuIiArIA0KKwkJCQkiCXByaXZhdGUgdm9pZCBmb28oKSB7XG4iICsgCS8vIHdhcm4gc2luY2Ug
QmFyIGlzIGFsbG9jYXRlZCB2aWEgVGVzdCBvYmplY3QNCisJCQkJIgkJWCB4ID0gbmV3IFgoKTsi
ICsNCisJCQkJIgkJeC5uZXcgQmFyKCkuYSA9IDI7XG4iICsNCisJCQkJIgl9XG4iICsgDQorCQkJ
CSJ9Ig0KKwkJfSwNCisJCSItLS0tLS0tLS0tXG4iICsgDQorCQkiMS4gRVJST1IgaW4gWC5qYXZh
IChhdCBsaW5lIDUpXG4iICsgDQorCQkiCXByaXZhdGUgdm9pZCBmb28oKSB7XG4iICsgDQorCQki
CSAgICAgICAgICAgICBeXl5eXlxuIiArIA0KKwkJIlRoZSBtZXRob2QgZm9vKCkgZnJvbSB0aGUg
dHlwZSBYIGNhbiBiZSBkZWNsYXJlZCBhcyBzdGF0aWNcbiIgKyANCisJCSItLS0tLS0tLS0tXG4i
LA0KKwkJbnVsbCAvKiBubyBleHRyYSBjbGFzcyBsaWJyYXJpZXMgKi8sDQorCQl0cnVlIC8qIGZs
dXNoIG91dHB1dCBkaXJlY3RvcnkgKi8sDQorCQljb21waWxlck9wdGlvbnMgLyogY3VzdG9tIG9w
dGlvbnMgKi8NCisJKTsNCit9DQorDQorLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mv
c2hvd19idWcuY2dpP2lkPTMzNTg0NQ0KKy8vIElmIG1ldGhvZCBhbGxvY2F0ZXMgYW4gaW5uZXIg
c3RhdGljIHR5cGUgd2l0aG91dCBhbiBlbmNsb3Npbmcgb2JqZWN0LCBtZXRob2QgY2FuIGJlIHN0
YXRpYw0KK3B1YmxpYyB2b2lkIHRlc3RCdWczMzU4NDVnKCkgew0KKwlNYXAgY29tcGlsZXJPcHRp
b25zID0gZ2V0Q29tcGlsZXJPcHRpb25zKCk7DQorCWNvbXBpbGVyT3B0aW9ucy5wdXQoQ29tcGls
ZXJPcHRpb25zLk9QVElPTl9SZXBvcnRNZXRob2RDYW5CZVN0YXRpYywgQ29tcGlsZXJPcHRpb25z
LkVSUk9SKTsNCisJY29tcGlsZXJPcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1Jl
cG9ydE1ldGhvZENhbkJlUG90ZW50aWFsbHlTdGF0aWMsIENvbXBpbGVyT3B0aW9ucy5FUlJPUik7
DQorCWNvbXBpbGVyT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9SZXBvcnROb25T
dGF0aWNBY2Nlc3NUb1N0YXRpYywgQ29tcGlsZXJPcHRpb25zLklHTk9SRSk7DQorCWNvbXBpbGVy
T3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9SZXBvcnRVbnVzZWRMb2NhbCwgQ29t
cGlsZXJPcHRpb25zLklHTk9SRSk7DQorCWNvbXBpbGVyT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRp
b25zLk9QVElPTl9SZXBvcnRVbnVzZWRPYmplY3RBbGxvY2F0aW9uLCBDb21waWxlck9wdGlvbnMu
SUdOT1JFKTsNCisJY29tcGlsZXJPcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1Jl
cG9ydFVudXNlZFByaXZhdGVNZW1iZXIsIENvbXBpbGVyT3B0aW9ucy5JR05PUkUpOw0KKwljb21w
aWxlck9wdGlvbnMucHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJT05fUmVwb3J0U3ludGhldGljQWNj
ZXNzRW11bGF0aW9uLCBDb21waWxlck9wdGlvbnMuSUdOT1JFKTsNCisJdGhpcy5ydW5Db25mb3Jt
VGVzdCgNCisJCW5ldyBTdHJpbmdbXSB7DQorCQkJCSJwL1guamF2YSIsIA0KKwkJCQkicGFja2Fn
ZSBwO1xuIiArDQorCQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsNCisJCQkJIgljbGFzcyBCYXIg
e1xuIiArDQorCQkJCSIJfVxuIiArDQorCQkJCSJ9Ig0KKwkJfQ0KKwkpOw0KKwl0aGlzLnJ1bk5l
Z2F0aXZlVGVzdCgNCisJCW5ldyBTdHJpbmdbXSB7DQorCQkJCSJwL1kuamF2YSIsDQorCQkJCSJw
YWNrYWdlIHA7XG4iICsNCisJCQkJInB1YmxpYyBjbGFzcyBZIGV4dGVuZHMgWCB7XG4iICsNCisJ
CQkJIglwcml2YXRlIHZvaWQgZm9vKCkge1xuIiArIAkvLyB3YXJuIHNpbmNlIEJhciBpcyBhbGxv
Y2F0ZWQgdmlhIFRlc3Qgb2JqZWN0DQorCQkJCSIJCW5ldyBCYXIoKTtcbiIgKw0KKwkJCQkiCX1c
biIgKyANCisJCQkJIn0iDQorCQl9LA0KKwkJIiIsDQorCQludWxsIC8qIG5vIGV4dHJhIGNsYXNz
IGxpYnJhcmllcyAqLywNCisJCWZhbHNlIC8qIGZsdXNoIG91dHB1dCBkaXJlY3RvcnkgKi8sDQor
CQljb21waWxlck9wdGlvbnMgLyogY3VzdG9tIG9wdGlvbnMgKi8NCisJKTsNCit9DQogfQ0K
</data>

          </attachment>
      

    </bug>

</bugzilla>