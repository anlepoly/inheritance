<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>429430</bug_id>
          
          <creation_ts>2014-03-03 03:23:00 -0500</creation_ts>
          <short_desc>[1.8] Lambdas and method reference infer wrong exception type with generics (RuntimeException instead of IOException)</short_desc>
          <delta_ts>2014-11-08 13:24:43 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.5 M3</target_milestone>
          <dependson>423429</dependson>
          <blocked>432110</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Tim W">timw.at.work</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>jarthana</cc>
    
    <cc>saammana</cc>
    
    <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="61849"
          type_id="1"
          status="+"
          setter="srikanth_sankaran"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2370329</commentid>
    <comment_count>0</comment_count>
    <who name="Tim W">timw.at.work</who>
    <bug_when>2014-03-03 03:23:33 -0500</bug_when>
    <thetext>See below for code. It compiles in JDK 8 build 129 but fails to compile in JDT with the error message &quot;Unhandled exception type IOException&quot;.
Based on the quick-fix suggestions, JDT seems to have inferred X as RuntimeException.

CAVEAT: I do not know if the &quot;broken&quot; lines adhere to the spec, so it&apos;s possible the JDK is in error.

java version &quot;1.8.0&quot;
Java(TM) SE Runtime Environment (build 1.8.0-b129)
Java HotSpot(TM) Server VM (build 25.0-b69, mixed mode)


Eclipse version:
Version: Kepler Service Release 2
Build id: 20140224-0627

Eclipse Java Development Tools Patch for Java 8 Support (BETA)
1.0.0.v20140302-1952
org.eclipse.jdt.java8patch.feature.group

Include jdt.annotation 2.0 support in patch feature.
1.0.0.v20140220-1916
org.eclipse.jdt.a2.java8patch.feature.group

Eclipse Plug-in Development Environment Patch for Java 8 Support (BETA)
1.0.0.v20140228-2041
org.eclipse.pde.java8patch.feature.group


import java.io.*;
public class Main {
  public static interface Closer&lt;T, X extends Exception&gt; {
    void closeIt(T it) throws X;
  }

  public static &lt;T, X extends Exception&gt; void close( Closer&lt;T, X&gt; closer, T it ) throws X {
    closer.closeIt(it);
  }

  public static void main(String[] args) throws IOException {
    InputStream in = null;
    close( x -&gt; x.close(), in ); // eclipse: NO, javac: YES
    close( InputStream::close, in ); // eclipse: NO, javac: YES
    close( (Closer&lt;InputStream, IOException&gt;)InputStream::close, in ); // eclipse: YES, javac: YES
    // JDT reports: &quot;Unhandled exception type IOException&quot; in &quot;NO&quot; cases
  }
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2370634</commentid>
    <comment_count>1</comment_count>
    <who name="Tim W">timw.at.work</who>
    <bug_when>2014-03-03 11:24:47 -0500</bug_when>
    <thetext>I took out the reference to instance methods in the summary, since the same issue affects method-references to static methods as well as plain lambdas.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2370767</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-03 14:35:42 -0500</bug_when>
    <thetext>(In reply to Tim W from comment #1)
&gt; I took out the reference to instance methods in the summary, since the same
&gt; issue affects method-references to static methods as well as plain lambdas.

On HEAD I see only one error, on the method reference, not on the lambda.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2370822</commentid>
    <comment_count>3</comment_count>
    <who name="Tim W">timw.at.work</who>
    <bug_when>2014-03-03 16:14:16 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #2)
&gt; (In reply to Tim W from comment #1)
&gt; &gt; I took out the reference to instance methods in the summary, since the same
&gt; &gt; issue affects method-references to static methods as well as plain lambdas.
&gt; 
&gt; On HEAD I see only one error, on the method reference, not on the lambda.

That may be another bug.
Comment out the error-reporting line, then another one pops up.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2370847</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-03 16:49:24 -0500</bug_when>
    <thetext>I&apos;ll take a look now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2370856</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-03 17:03:42 -0500</bug_when>
    <thetext>(In reply to Tim W from comment #3)
&gt; (In reply to Srikanth Sankaran from comment #2)
&gt; &gt; (In reply to Tim W from comment #1)
&gt; &gt; &gt; I took out the reference to instance methods in the summary, since the same
&gt; &gt; &gt; issue affects method-references to static methods as well as plain lambdas.
&gt; &gt; 
&gt; &gt; On HEAD I see only one error, on the method reference, not on the lambda.
&gt; 
&gt; That may be another bug.
&gt; Comment out the error-reporting line, then another one pops up.

Interesting, but explainable: the error on the method reference is reported during resolve, reporting marks the enclosing method declaration as ignoreFurtherInvestigation, and analyseCode will never happen (which *would* then report the error against the Lambda).

We *might* want to defer exception checking of RE also to analyseCode, but for now I&apos;m leaving that bit untouched.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2370868</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-03 17:25:46 -0500</bug_when>
    <thetext>The lambda case will have to be pulled out of BETA_JAVA8: we need the analysis of exceptions thrown by the lambda expression as early as during type inference (resolve). Typically, thrown exceptions are analysed during analyseCode. I think we discussed this earlier, and deferred it, right?

I&apos;m looking at the RE case now. That one should be fixable.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2370885</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-03 18:14:05 -0500</bug_when>
    <thetext>The case of method references has been fixed and released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=4799df0aa03882b02b43b98e11b31219d0b62a24

Thanks for the test case, actually! 
It seems like the typist writing that code was pretty drowsy %)


The case of lambdas is much trickier and will have to wait until the next round.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2370900</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-03 19:02:14 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #6)
&gt; The lambda case will have to be pulled out of BETA_JAVA8: we need the
&gt; analysis of exceptions thrown by the lambda expression as early as during
&gt; type inference (resolve). Typically, thrown exceptions are analysed during
&gt; analyseCode. I think we discussed this earlier, and deferred it, right?

Stephan, if the throws information is available, is it a straightforward/automatic
fix ?  We had this infrastructure in place already and I can restore it from the 
earlier commit easily.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2370903</commentid>
    <comment_count>9</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-03 19:06:19 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #8)
&gt; (In reply to Stephan Herrmann from comment #6)
&gt; &gt; The lambda case will have to be pulled out of BETA_JAVA8: we need the
&gt; &gt; analysis of exceptions thrown by the lambda expression as early as during
&gt; &gt; type inference (resolve). Typically, thrown exceptions are analysed during
&gt; &gt; analyseCode. I think we discussed this earlier, and deferred it, right?
&gt; 
&gt; Stephan, if the throws information is available, is it a
&gt; straightforward/automatic fix ? 

Should be the same as we already have for RE, so: yep, straightforward :)

&gt; We had this infrastructure in place already and I can restore it from
&gt; the earlier commit easily.

That sounds cool. I remembered this to be a thorny issue.
I&apos;ll be happy to try what you dig out, if *that* part is straightforward</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2370906</commentid>
    <comment_count>10</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-03 19:17:16 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #9)
&gt; (In reply to Srikanth Sankaran from comment #8)
&gt; &gt; (In reply to Stephan Herrmann from comment #6)
&gt; &gt; &gt; The lambda case will have to be pulled out of BETA_JAVA8: we need the
&gt; &gt; &gt; analysis of exceptions thrown by the lambda expression as early as during
&gt; &gt; &gt; type inference (resolve). Typically, thrown exceptions are analysed during
&gt; &gt; &gt; analyseCode. I think we discussed this earlier, and deferred it, right?
&gt; &gt; 
&gt; &gt; Stephan, if the throws information is available, is it a
&gt; &gt; straightforward/automatic fix ? 
&gt; 
&gt; Should be the same as we already have for RE, so: yep, straightforward :)
&gt; 
&gt; &gt; We had this infrastructure in place already and I can restore it from
&gt; &gt; the earlier commit easily.
&gt; 
&gt; That sounds cool. I remembered this to be a thorny issue.
&gt; I&apos;ll be happy to try what you dig out, if *that* part is straightforward

Yes, it is/was. OK, I&apos;ll take this up later today.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372123</commentid>
    <comment_count>11</comment_count>
      <attachid>240567</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-05 18:39:55 -0500</bug_when>
    <thetext>Created attachment 240567
Patch restoring tracking of throws.

Stephan, this is what I could resurrect from the past. The past requirement
was simply to see if there was an explicit throw from the body. This can be
modified to track the thrown exception by adding the bindings to the map.

I do not know if this suffices the requirements to fix this bug.

In particular, I did not think deeply about:

    - whether it is the explicitly thrown exception that matter or the list
from throws declaration (which should be available from lambda&apos;s binding) or
both.

   - In the case of nested lambdas should there be some bubbling up or not.

    - What is required for method references - here the information should all
be in the binding.

If this is a straightforward/safe fix, please propose a patch. Otherwise,
we will take it up post GA. Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372142</commentid>
    <comment_count>12</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-05 20:15:10 -0500</bug_when>
    <thetext>Thanks, I think this will enable me to create a little patch, that will partially and conservatively improve the situation for now.

For a full solution I&apos;m afraid we will need s.t. like full flow analysis.

RE is already fine, BTW.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372602</commentid>
    <comment_count>13</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-06 13:32:54 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #12)
&gt; Thanks, I think this will enable me to create a little patch, that will
&gt; partially and conservatively improve the situation for now.

Thanks, tentatively pulling back to GA, if solution looks complex, will
reset back to 4.4</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373406</commentid>
    <comment_count>14</comment_count>
      <attachid>240689</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-08 15:41:20 -0500</bug_when>
    <thetext>Created attachment 240689
patch for lambda exception inference

This patch allows us to correctly infer the exceptions of a generic function type. Exceptions are recorded from
- ThrowsStatement
- MessageSend
- AllocationExpression
(I believe ECC is not relevant inside a lambda).

This fixes an obvious gap in the inference implementation and thus is relevant for GA. Full tests still need to be run.

Please find included one disabled test (_testBug429430b) that demonstrates the inherent limitation of this approach: we do not detect that one of the two thrown exceptions is actually caught -&gt; Inference sees a conflict where indeed there is none. Ergo: information from resolve is not sufficient, what we need is more like a full exception *analysis* :(
Still the current patch is much better than nothing.

Note that javac accepts the example from testBug429430b. I didn&apos;t try if they do full flow analysis or use some heuristics as a short cut.

testBug429430c includes a type annotation on the exception type, which is mildly relevant because I&apos;m using a Set&lt;TypeBinding&gt;, which indeed includes distinct specimen for un/annotated types. But inference incorporates these constraints away as desired.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373409</commentid>
    <comment_count>15</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-08 15:48:07 -0500</bug_when>
    <thetext>Srikanth, please have a look at the latest patch.

I&apos;ll report here once I&apos;ve run all tests (want to tackle one more bug before I start that).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373465</commentid>
    <comment_count>16</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-09 06:23:05 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #15)
&gt; Srikanth, please have a look at the latest patch.
&gt; 

Patch looks good, Please release after tests are green, Jay can pull and verify.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373466</commentid>
    <comment_count>17</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-09 06:23:39 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #16)
&gt; (In reply to Stephan Herrmann from comment #15)
&gt; &gt; Srikanth, please have a look at the latest patch.
&gt; &gt; 
&gt; 
&gt; Patch looks good, Please release after tests are green, Jay can pull and
&gt; verify.

Once released, let us leave it open but targetting 4.4</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373506</commentid>
    <comment_count>18</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-09 10:20:13 -0400</bug_when>
    <thetext>Patch has been released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=b1cdfe3ee438c0a38b27b1a4134346d549384d6a

Retargetting 4.4 for a refined solution considering flow analysis.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373535</commentid>
    <comment_count>19</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-09 16:12:42 -0400</bug_when>
    <thetext>During testing of other stuff I noticed a blatant null-bug:

LE.getResolvedCopyForInferenceTargeting() returns &quot;a resolved copy of &apos;this&apos; or null if significant errors where encountered&quot;

That null is not checked for!!

OK to release a null guard without formal process?

I don&apos;t know yet, what properties of the other stuff I was testing made the bug surface ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373537</commentid>
    <comment_count>20</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-09 16:23:17 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #19)
&gt; I don&apos;t know yet, what properties of the other stuff I was testing made the
&gt; bug surface ...

The answer is: pure chance: GRT_1_8.testBug427164 throws NPE if from two constraints in an unordered set, the ConstraintExceptionFormula is picked first.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373538</commentid>
    <comment_count>21</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-09 16:32:04 -0400</bug_when>
    <thetext>I released the NPE guard via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=bd573a503eae22a78c7fa84b2935b94de171918d</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373560</commentid>
    <comment_count>22</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-09 20:05:25 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #21)
&gt; I released the NPE guard via
&gt; http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
&gt; ?h=BETA_JAVA8&amp;id=bd573a503eae22a78c7fa84b2935b94de171918d

Thanks, looks good.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373580</commentid>
    <comment_count>23</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-03-10 00:49:53 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #18)
&gt; Patch has been released via
&gt; http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
&gt; ?h=BETA_JAVA8&amp;id=b1cdfe3ee438c0a38b27b1a4134346d549384d6a

Changes look good to me and my testing also went well.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2374099</commentid>
    <comment_count>24</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-10 19:36:33 -0400</bug_when>
    <thetext>If we strictly let inference fail due to exception constraints (see bug 429969 comment 14), GRT_1_8.testBug420525 would actually fail - despite the fact that both exceptions are actually caught in the lambda.

Currently, this is (illegally) absorbed by &quot;repairing&quot; inference failure, presumably in IC18.getReturnProblemMethodIfNeeded().

When revisiting this bug, we should also reconsider the patch from 429969.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2374101</commentid>
    <comment_count>25</comment_count>
      <attachid>240734</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-10 19:45:34 -0400</bug_when>
    <thetext>Created attachment 240734
WIP on stricter failing with better reporting

This is work in progress spawned off from bug 429969 comment 14.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2374354</commentid>
    <comment_count>26</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-11 09:35:52 -0400</bug_when>
    <thetext>Stephan, looking at the disabled test: org.eclipse.jdt.core.tests.compiler.regression.GenericsRegressionTest_1_8._testBug429430b()

I have a question: Does the lambda&apos;s target type influence the type of exceptions
thrown from the body of lambda at all ? I can&apos;t think of a way it can - just
checking. If it doesn&apos;t the fix for that disabled bug is trivial and actually
would clean up quite a bit of code.

I&apos;ll work on an experimental patch as I wait for your answer.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2374391</commentid>
    <comment_count>27</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-11 10:09:49 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #26)
&gt; Stephan, looking at the disabled test:
&gt; org.eclipse.jdt.core.tests.compiler.regression.GenericsRegressionTest_1_8.
&gt; _testBug429430b()
&gt; 
&gt; I have a question: Does the lambda&apos;s target type influence the type of
&gt; exceptions
&gt; thrown from the body of lambda at all ? I can&apos;t think of a way it can - just
&gt; checking.

I think it does: how do we resolve &quot;x.close()&quot;? It needs the target type to determine the type of x, to determine the method close, to find which exceptions it throws.
 
I don&apos;t think we can really avoid a per-target-type phase of analyseCode of the lambda body. Once we have that, inference should find all the right solutions, I&apos;m sure.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2374393</commentid>
    <comment_count>28</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-11 10:14:39 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #27)

&gt; I think it does: how do we resolve &quot;x.close()&quot;? It needs the target type to
&gt; determine the type of x, to determine the method close, to find which
&gt; exceptions it throws.

Grrrr. Sorry, sleep deprived. Don&apos;t know what I was thinking when I asked.

Anyway, like that answer, saved me a couple of hours and some heart burn at
the end :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2382151</commentid>
    <comment_count>29</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-29 13:31:33 -0400</bug_when>
    <thetext>Srikanth, seeing this one targeted for M7: how do we proceed?

IIRC we need lambda copies *analysed* during resolve, right?
Are you planning to work in that area (integrated into shape analysis)? 
In that case feel free to take this bug :)

If you don&apos;t have the time just leave it as is and I&apos;ll try to cram it into M7, just not right now...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2389193</commentid>
    <comment_count>30</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-04-15 08:25:46 -0400</bug_when>
    <thetext>I can look at this later this week.

Srikanth, do you have any ready advice for this ahead-of-time codeAnalyse()?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2389529</commentid>
    <comment_count>31</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-04-16 02:23:08 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #30)
&gt; I can look at this later this week.
&gt; 
&gt; Srikanth, do you have any ready advice for this ahead-of-time codeAnalyse()?

I do, in a day or two, I&apos;ll write up my thoughts on this topic - I propose to
propose some signification internal API changes - you can implement as much
of it as you want now leaving the rest for a different work item.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2391664</commentid>
    <comment_count>32</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-04-23 01:03:00 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #31)
&gt; I do, in a day or two, I&apos;ll write up my thoughts on this topic - I propose to
&gt; propose some signification internal API changes - you can implement as much
&gt; of it as you want now leaving the rest for a different work item.

Is there still an open item here? Can this bug be closed?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2391665</commentid>
    <comment_count>33</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-04-23 01:04:58 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #32)

&gt; Is there still an open item here? Can this bug be closed?

No, this is very much open.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2394330</commentid>
    <comment_count>34</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-04-28 17:41:15 -0400</bug_when>
    <thetext>Srikanth, are we moving this out of M7?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2394390</commentid>
    <comment_count>35</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-04-29 02:01:23 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #34)
&gt; Srikanth, are we moving this out of M7?

I am sorry I didn&apos;t get to share my notes earlier - If the comments are
coming in a bit too late, please move this to 4.4

Here is what I have in mind: 

basically, there are a bunch of methods we have:

LE.isCompatibleWith
LE.getResolvedCopyForInferenceTargeting
FE.checkAgainstFinalTargetType


RE.isCompatibleWith
RE.internalResolveTentatively
RE.findCompileTimeMethodTargeting

that do varied amounts of common processing.

I would like us to settle down into two core APIs:

resolveType
resolveTypeExpecting

with some thin wrappers around them (isCompatibleWith et al)

I would like the routine resolveTypeExpecting to be augmented with an 
extra parameter that indicates whether it is a tentative resolution or 
an eventual resolution.

For LE and RE, these methods should return

a new TypeBinding say FunctionTypeBinding which would answer all parts of
the descriptor of a function type.

LambdaExpression.getTypeBinding().LambdaTypeBinding is a starting point
for the FunctionTypeBinding, but needs much more work.

We should also build in capabilities for caching against target type so
we don&apos;t re-resolve over and over.

While the above is long term plan, you can pick and choose elements that
make sense for now (including nothing)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2394489</commentid>
    <comment_count>36</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-04-29 04:49:07 -0400</bug_when>
    <thetext>The proposed refactorings basically affect the existing code for resolving.
What connection do you see towards including *analyseCode* into the resolve?
(Reminder: in this bug we need the full flow analysis results of exceptions
thrown by the lambda)

Is it the caching per target type that should help to avoid duplicate work not only in resolveType but also in analyseCode?

Looking at UnconditionalFlowInfo.fakeInitializedFlowInfo() and its use during shape analysis, I get the impression we cannot do a definite flow analysis ahead of time, because we are lacking a real flow info from the enclosing method.

Would this perhaps imply we also need to invent a new kind of FlowContext, that records requirements in terms of accessed local variables that need to be checked later for being effectively final and assigned-before-use?

Or should we always do a full final analyseCode in the end, no matter how much of this has already been done ahead of time?

Let me know if you already have some thoughts in these directions up your sleeve. If this is unploughed territory this bug certainly won&apos;t make it into M7 :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2394512</commentid>
    <comment_count>37</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-04-29 05:04:01 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #36)

&gt; Let me know if you already have some thoughts in these directions up your
&gt; sleeve. If this is unploughed territory this bug certainly won&apos;t make it
&gt; into M7 :)

I think that is a fair characterization. Adjusting the target accordingly to
4.4 for now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2399943</commentid>
    <comment_count>38</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-11 14:44:12 -0400</bug_when>
    <thetext>Deferring after consultation with Srikanth.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2429912</commentid>
    <comment_count>39</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-07-21 13:37:39 -0400</bug_when>
    <thetext>Srikanth, due to the relation to bug 432110 (which I already passed back to you), I&apos;d like to resign from this bug, too.

I&apos;ll be happy to continue the discussion, though (if desired).

Reminder: I see the main issue here in doing the ahead-of-time analyseCode() for lambdas.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2435425</commentid>
    <comment_count>40</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-08-05 01:52:19 -0400</bug_when>
    <thetext>Retargetting to M2, as I don&apos;t expect to finish work on these before this week&apos;s build(s)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2449680</commentid>
    <comment_count>41</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-10 06:10:22 -0400</bug_when>
    <thetext>This will have to wait for https://bugs.eclipse.org/bugs/show_bug.cgi?id=423429
and https://bugs.eclipse.org/bugs/show_bug.cgi?id=424290 which are expected in
early M3.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2449681</commentid>
    <comment_count>42</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-10 06:11:12 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #39)

&gt; Reminder: I see the main issue here in doing the ahead-of-time analyseCode()
&gt; for lambdas.

We are implementing an altogether different phase for shape analysis, Stay
tuned.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2451447</commentid>
    <comment_count>43</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-14 12:46:53 -0400</bug_when>
    <thetext>Sasi, the proof of the pudding as far as the new shape analysis goes is this
bug being fixed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2462488</commentid>
    <comment_count>44</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-09 14:32:08 -0400</bug_when>
    <thetext>The set of patches at https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444
compile the code from comment#0</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2463200</commentid>
    <comment_count>45</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-10 20:37:58 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #44)
&gt; The set of patches at https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444
&gt; compile the code from comment#0

While that is so, that mechanism ignores any try statements enclosing method
calls altogether. So if the exception was caught, we will still claim it is
thrown by the lambda. So the existing solution is not enough for more complex
cases.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2467642</commentid>
    <comment_count>46</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-19 00:22:28 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #45)
&gt; (In reply to Srikanth Sankaran from comment #44)
&gt; &gt; The set of patches at https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444
&gt; &gt; compile the code from comment#0
&gt; 
&gt; While that is so, that mechanism ignores any try statements enclosing method
&gt; calls altogether. So if the exception was caught, we will still claim it is
&gt; thrown by the lambda. So the existing solution is not enough for more complex
&gt; cases.

I&apos;ll take over the present one and raise a follow up for handling try/catch
blocks and assign it to Sasi.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472077</commentid>
    <comment_count>47</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-26 21:03:14 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #44)
&gt; The set of patches at https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444
&gt; compile the code from comment#0

Actually I think it has been working for a long time since perhaps commit
b1cdfe3ee438c0a38b27b1a4134346d549384d6a by Stephan (I didn&apos;t verify that 
though I did verify that it compiles fine on master.)

So the reported problem is fixed - a variant that wraps the calls in try-catch
blocks (GenericsRegressionTest_1_8._testBug429430b()) still fails. This is
in plan to be followed up in bug 424290. I&apos;ll add a note there and close this
one.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472899</commentid>
    <comment_count>48</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-10-28 09:37:58 -0400</bug_when>
    <thetext>Verified for 4.5 M3 using  I20141027-2000 build.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2479420</commentid>
    <comment_count>49</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-08 13:24:43 -0500</bug_when>
    <thetext>For the record, I implemented support for precise exception inference 
on behalf of https://bugs.eclipse.org/bugs/show_bug.cgi?id=424290 and 
released the changes with enabled tests here: 

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=48a78bfcb529886e24e5f62b1bc56f7d3678e46a</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>240567</attachid>
            <date>2014-03-05 18:39:00 -0500</date>
            <delta_ts>2014-03-08 15:41:20 -0500</delta_ts>
            <desc>Patch restoring tracking of throws.</desc>
            <filename>throws.patch</filename>
            <type>text/plain</type>
            <size>2146</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fz
dC9MYW1iZGFFeHByZXNzaW9uLmphdmEKaW5kZXggMDM0OTdiNi4uNmYxYzA4MiAxMDA2NDQKLS0t
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FzdC9MYW1iZGFFeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9MYW1i
ZGFFeHByZXNzaW9uLmphdmEKQEAgLTEwNDYsNiArMTA0NiwxMiBAQAogCQl9CiAJfQogCQorCXB1
YmxpYyB2b2lkIHRocm93c0V4Y2VwdGlvbihUeXBlQmluZGluZyBleGNlcHRpb25UeXBlKSB7CisJ
CWlmICh0aGlzLmV4cHJlc3Npb25Db250ZXh0ICE9IElOVk9DQVRJT05fQ09OVEVYVCkKKwkJCXJl
dHVybjsKKy8vCQl0aGlzLm9yaWdpbmFsLnRocm93c0V4Y2VwdGlvbiA9IHRydWU7CisJfQorCQog
CXB1YmxpYyB2b2lkIGdlbmVyYXRlQ29kZShDbGFzc1Njb3BlIGNsYXNzU2NvcGUsIENsYXNzRmls
ZSBjbGFzc0ZpbGUpIHsKIAkJaW50IHByb2JsZW1SZXNldFBDID0gMDsKIAkJY2xhc3NGaWxlLmNv
ZGVTdHJlYW0ud2lkZU1vZGUgPSBmYWxzZTsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvVGhyb3dT
dGF0ZW1lbnQuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvVGhyb3dTdGF0ZW1lbnQuamF2YQppbmRleCBlYTQ1
YzRlLi4wMmNmMTg5IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1Rocm93U3RhdGVtZW50LmphdmEK
KysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2FzdC9UaHJvd1N0YXRlbWVudC5qYXZhCkBAIC0yNCw2ICsyNCw3IEBACiBp
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmZsb3cuRmxvd0NvbnRleHQ7
CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmZsb3cuRmxvd0luZm87
CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5CbG9ja1Nj
b3BlOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuTWV0
aG9kU2NvcGU7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1
cC5UeXBlQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
bG9va3VwLlR5cGVJZHM7CiAKQEAgLTcxLDYgKzcyLDExIEBACiAKIHB1YmxpYyB2b2lkIHJlc29s
dmUoQmxvY2tTY29wZSBzY29wZSkgewogCXRoaXMuZXhjZXB0aW9uVHlwZSA9IHRoaXMuZXhjZXB0
aW9uLnJlc29sdmVUeXBlKHNjb3BlKTsKKwlNZXRob2RTY29wZSBtZXRob2RTY29wZSA9IHNjb3Bl
Lm1ldGhvZFNjb3BlKCk7CisJTGFtYmRhRXhwcmVzc2lvbiBsYW1iZGEgPSBtZXRob2RTY29wZS5y
ZWZlcmVuY2VDb250ZXh0IGluc3RhbmNlb2YgTGFtYmRhRXhwcmVzc2lvbiA/IChMYW1iZGFFeHBy
ZXNzaW9uKSBtZXRob2RTY29wZS5yZWZlcmVuY2VDb250ZXh0IDogbnVsbDsKKwlpZiAobGFtYmRh
ICE9IG51bGwpIHsKKwkJbGFtYmRhLnRocm93c0V4Y2VwdGlvbih0aGlzLmV4Y2VwdGlvblR5cGUp
OworCX0KIAlpZiAodGhpcy5leGNlcHRpb25UeXBlICE9IG51bGwgJiYgdGhpcy5leGNlcHRpb25U
eXBlLmlzVmFsaWRCaW5kaW5nKCkpIHsKIAkJaWYgKHRoaXMuZXhjZXB0aW9uVHlwZSA9PSBUeXBl
QmluZGluZy5OVUxMKSB7CiAJCQlpZiAoc2NvcGUuY29tcGlsZXJPcHRpb25zKCkuY29tcGxpYW5j
ZUxldmVsIDw9IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzMpew==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>240689</attachid>
            <date>2014-03-08 15:41:00 -0500</date>
            <delta_ts>2014-03-10 19:45:34 -0400</delta_ts>
            <desc>patch for lambda exception inference</desc>
            <filename>Bug-429430--18-Lambdas-and-method-reference-infer-wr.patch</filename>
            <type>text/plain</type>
            <size>15462</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3RfMV84LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmlj
c1JlZ3Jlc3Npb25UZXN0XzFfOC5qYXZhCmluZGV4IGEyMGRlMjMuLmE4YmM4MzcgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3Rf
MV84LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdy
ZXNzaW9uVGVzdF8xXzguamF2YQpAQCAtMTcsNiArMTcsNyBAQAogaW1wb3J0IGphdmEudXRpbC5N
YXA7CiAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5KYXZhQ29yZTsKK2ltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuaW1wbC5Db21waWxlck9wdGlvbnM7CiAKIGlt
cG9ydCBqdW5pdC5mcmFtZXdvcmsuVGVzdDsKIApAQCAtMjU4Nyw2ICsyNTg4LDcgQEAKIAkJIlRo
ZSBtZXRob2QgY29weU9mKENvbGxlY3Rpb248VD4pIGZyb20gdGhlIHR5cGUgTW9yZUNvbGxlY3Rv
cnMuSW1tdXRhYmxlTGlzdDxUPiBpcyBuZXZlciB1c2VkIGxvY2FsbHlcbiIgKyAKIAkJIi0tLS0t
LS0tLS1cbiIpOwogfQorLy8gYWxsIGV4Y2VwdGlvbnMgY2FuIGJlIGluZmVycmVkIHRvIG1hdGNo
CiBwdWJsaWMgdm9pZCB0ZXN0QnVnNDI5NDMwKCkgewogCXJ1bkNvbmZvcm1UZXN0KAogCQluZXcg
U3RyaW5nW10gewpAQCAtMjYwMywxNCArMjYwNSwxMDUgQEAKIAkJCSJcbiIgKyAKIAkJCSIgIHB1
YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHRocm93cyBJT0V4Y2VwdGlvbiB7
XG4iICsgCiAJCQkiICAgIElucHV0U3RyZWFtIGluID0gbmV3IEJ5dGVBcnJheUlucHV0U3RyZWFt
KFwiaGVsbG9cIi5nZXRCeXRlcygpKTtcbiIgKyAKLS8vIEZJWE1FCi0vLwkJCSIgICAgY2xvc2Uo
IHggLT4geC5jbG9zZSgpLCBpbiApOyAvLyBlY2xpcHNlOiBOTywgamF2YWM6IFlFU1xuIiArIAot
CQkJIiAgICBjbG9zZSggSW5wdXRTdHJlYW06OmNsb3NlLCBpbiApOyAvLyBlY2xpcHNlOiBOTywg
amF2YWM6IFlFU1xuIiArIAotCQkJIiAgICBjbG9zZSggKENsb3NlcjxJbnB1dFN0cmVhbSwgSU9F
eGNlcHRpb24+KUlucHV0U3RyZWFtOjpjbG9zZSwgaW4gKTsgLy8gZWNsaXBzZTogWUVTLCBqYXZh
YzogWUVTXG4iICsgCisJCQkiICAgIGNsb3NlKCB4IC0+IHguY2xvc2UoKSwgaW4gKTtcbiIgKwor
CQkJIiAgICBjbG9zZSggSW5wdXRTdHJlYW06OmNsb3NlLCBpbiApO1xuIiArIAorCQkJIiAgICBj
bG9zZSggKENsb3NlcjxJbnB1dFN0cmVhbSwgSU9FeGNlcHRpb24+KUlucHV0U3RyZWFtOjpjbG9z
ZSwgaW4gKTtcbiIgKyAKIAkJCSIgIH1cbiIgKwogCQkJIn1cbiIKIAkJfSk7CiB9CisvLyBpbmNv
bXBhdGlibGUgZXhjZXB0aW9ucyBwcmV2ZW50IHN1aXRhYmxlIGluZmVyZW5jZSBvZiBleGNlcHRp
b24gdHlwZQorcHVibGljIHZvaWQgdGVzdEJ1ZzQyOTQzMGEoKSB7CisJcnVuTmVnYXRpdmVUZXN0
KAorCQluZXcgU3RyaW5nW10geworCQkJIk1haW4uamF2YSIsCisJCQkiaW1wb3J0IGphdmEuaW8u
KjtcbiIgKworCQkJIkBTdXBwcmVzc1dhcm5pbmdzKFwic2VyaWFsXCIpIGNsYXNzIEVtcHR5U3Ry
ZWFtIGV4dGVuZHMgRXhjZXB0aW9uIHt9XG4iICsgCisJCQkicHVibGljIGNsYXNzIE1haW4ge1xu
IiArIAorCQkJIiAgcHVibGljIHN0YXRpYyBpbnRlcmZhY2UgQ2xvc2VyPFQsIFggZXh0ZW5kcyBF
eGNlcHRpb24+IHtcbiIgKyAKKwkJCSIgICAgdm9pZCBjbG9zZUl0KFQgaXQpIHRocm93cyBYO1xu
IiArIAorCQkJIiAgfVxuIiArIAorCQkJIlxuIiArIAorCQkJIiAgcHVibGljIHN0YXRpYyA8VCwg
WCBleHRlbmRzIEV4Y2VwdGlvbj4gdm9pZCBjbG9zZSggQ2xvc2VyPFQsIFg+IGNsb3NlciwgVCBp
dCApIHRocm93cyBYIHtcbiIgKyAKKwkJCSIgICAgY2xvc2VyLmNsb3NlSXQoaXQpO1xuIiArIAor
CQkJIiAgfVxuIiArIAorCQkJIlxuIiArIAorCQkJIiAgcHVibGljIHN0YXRpYyB2b2lkIG1haW4o
U3RyaW5nW10gYXJncykgdGhyb3dzIElPRXhjZXB0aW9uLCBFbXB0eVN0cmVhbSB7XG4iICsgCisJ
CQkiICAgIElucHV0U3RyZWFtIGluID0gbmV3IEJ5dGVBcnJheUlucHV0U3RyZWFtKFwiaGVsbG9c
Ii5nZXRCeXRlcygpKTtcbiIgKyAKKwkJCSIgICAgY2xvc2UoIHggLT4gIHsgaWYgKGluLmF2YWls
YWJsZSgpID09IDApIHRocm93IG5ldyBFbXB0eVN0cmVhbSgpOyB4LmNsb3NlKCk7IH0sIGluICk7
XG4iICsgCisJCQkiICB9XG4iICsKKwkJCSJ9XG4iCisJCX0sCisJCSItLS0tLS0tLS0tXG4iICsg
CisJCSIxLiBFUlJPUiBpbiBNYWluLmphdmEgKGF0IGxpbmUgMTQpXG4iICsgCisJCSIJY2xvc2Uo
IHggLT4gIHsgaWYgKGluLmF2YWlsYWJsZSgpID09IDApIHRocm93IG5ldyBFbXB0eVN0cmVhbSgp
OyB4LmNsb3NlKCk7IH0sIGluICk7XG4iICsgCisJCSIJXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5cbiIgKyAKKwkJIlVuaGFuZGxlZCBleGNlcHRpb24gdHlwZSBFeGNlcHRpb25cbiIgKyAKKwkJ
Ii0tLS0tLS0tLS1cbiIpOworfQorLy8gb25lIG9mIHR3byBpbmNvbXBhdGlibGUgZXhjZXB0aW9u
cyBpcyBjYXVnaHQKKy8vIEZJWE1FOiBzaG91bGQgYmUgcG9zc2libGUgdG8gaW5mZXIgWCB0byBF
bXB0eVN0cmVhbQorcHVibGljIHZvaWQgX3Rlc3RCdWc0Mjk0MzBiKCkgeworCXJ1bkNvbmZvcm1U
ZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJIk1haW4uamF2YSIsCisJCQkiaW1wb3J0IGphdmEu
aW8uKjtcbiIgKworCQkJIkBTdXBwcmVzc1dhcm5pbmdzKFwic2VyaWFsXCIpIGNsYXNzIEVtcHR5
U3RyZWFtIGV4dGVuZHMgRXhjZXB0aW9uIHt9XG4iICsgCisJCQkicHVibGljIGNsYXNzIE1haW4g
e1xuIiArIAorCQkJIiAgcHVibGljIHN0YXRpYyBpbnRlcmZhY2UgQ2xvc2VyPFQsIFggZXh0ZW5k
cyBFeGNlcHRpb24+IHtcbiIgKyAKKwkJCSIgICAgdm9pZCBjbG9zZUl0KFQgaXQpIHRocm93cyBY
O1xuIiArIAorCQkJIiAgfVxuIiArIAorCQkJIlxuIiArIAorCQkJIiAgcHVibGljIHN0YXRpYyA8
VCwgWCBleHRlbmRzIEV4Y2VwdGlvbj4gdm9pZCBjbG9zZSggQ2xvc2VyPFQsIFg+IGNsb3Nlciwg
VCBpdCApIHRocm93cyBYIHtcbiIgKyAKKwkJCSIgICAgY2xvc2VyLmNsb3NlSXQoaXQpO1xuIiAr
IAorCQkJIiAgfVxuIiArIAorCQkJIlxuIiArIAorCQkJIiAgcHVibGljIHN0YXRpYyB2b2lkIG1h
aW4oU3RyaW5nW10gYXJncykgdGhyb3dzIEVtcHR5U3RyZWFtIHtcbiIgKyAKKwkJCSIgICAgSW5w
dXRTdHJlYW0gaW4gPSBuZXcgQnl0ZUFycmF5SW5wdXRTdHJlYW0oXCJoZWxsb1wiLmdldEJ5dGVz
KCkpO1xuIiArIAorCQkJIiAgICBjbG9zZSggeCAtPiAge1xuIiArIAorCQkJIgkJCXRyeSB7XG4i
ICsgCisJCQkiCQkJCXguY2xvc2UoKTtcbiIgKyAKKwkJCSIJCQl9IGNhdGNoIChJT0V4Y2VwdGlv
biBpb2V4KSB7IHRocm93IG5ldyBFbXB0eVN0cmVhbSgpOyB9IFxuIiArIAorCQkJIgkJfSwiICsK
KwkJCSIJCWluKTtcbiIgKyAKKwkJCSIgIH1cbiIgKworCQkJIn1cbiIKKwkJfSk7Cit9CisvLyBl
bnN1cmUgdHlwZSBhbm5vdGF0aW9uIG9uIGV4Y2VwdGlvbiBkb2Vzbid0IGNvbmZ1c2UgdGhlIGlu
ZmVyZW5jZQorcHVibGljIHZvaWQgdGVzdEJ1ZzQyOTQzMGMoKSB7CisJTWFwIG9wdGlvbnMgPSBn
ZXRDb21waWxlck9wdGlvbnMoKTsKKwlvcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9O
X1N0b3JlX0Fubm90YXRpb25zLCBDb21waWxlck9wdGlvbnMuRU5BQkxFRCk7CisJcnVuQ29uZm9y
bVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiTWFpbi5qYXZhIiwKKwkJCSJpbXBvcnQgamF2
YS5pby4qO1xuIiArCisJCQkiaW1wb3J0IGphdmEubGFuZy5hbm5vdGF0aW9uLio7XG4iICsKKwkJ
CSJAVGFyZ2V0KEVsZW1lbnRUeXBlLlRZUEVfVVNFKSBAaW50ZXJmYWNlIFNldmVyZSB7fVxuIiAr
IAorCQkJInB1YmxpYyBjbGFzcyBNYWluIHtcbiIgKyAKKwkJCSIgIHB1YmxpYyBzdGF0aWMgaW50
ZXJmYWNlIENsb3NlcjxULCBYIGV4dGVuZHMgRXhjZXB0aW9uPiB7XG4iICsgCisJCQkiICAgIHZv
aWQgY2xvc2VJdChUIGl0KSB0aHJvd3MgWDtcbiIgKyAKKwkJCSIgIH1cbiIgKyAKKwkJCSJcbiIg
KyAKKwkJCSIgIHB1YmxpYyBzdGF0aWMgPFQsIFggZXh0ZW5kcyBFeGNlcHRpb24+IHZvaWQgY2xv
c2UoIENsb3NlcjxULCBYPiBjbG9zZXIsIFQgaXQgKSB0aHJvd3MgWCB7XG4iICsgCisJCQkiICAg
IGNsb3Nlci5jbG9zZUl0KGl0KTtcbiIgKyAKKwkJCSIgIH1cbiIgKyAKKwkJCSJcbiIgKworCQkJ
IiAgc3RhdGljIEBTZXZlcmUgSU9FeGNlcHRpb24gZ2V0RXhjZXB0aW9uKCkgeyByZXR1cm4gbmV3
IElPRXhjZXB0aW9uKFwic2V2ZXJlXCIpOyB9XG4iICsgCisJCQkiICBwdWJsaWMgc3RhdGljIHZv
aWQgbWFpbihTdHJpbmdbXSBhcmdzKSB0aHJvd3MgSU9FeGNlcHRpb24ge1xuIiArIAorCQkJIiAg
ICBJbnB1dFN0cmVhbSBpbiA9IG5ldyBCeXRlQXJyYXlJbnB1dFN0cmVhbShcImhlbGxvXCIuZ2V0
Qnl0ZXMoKSk7XG4iICsgCisJCQkiICAgIGNsb3NlKCB4IC0+IHtcbiIgKworCQkJIgkJCWlmIChp
bi5hdmFpbGFibGUoKSA+IDApXG4iICsKKwkJCSIJCQkJeC5jbG9zZSgpO1xuIiArCisJCQkiCQkJ
ZWxzZVxuIiArCisJCQkiCQkJCXRocm93IGdldEV4Y2VwdGlvbigpO1xuIiArCisJCQkiCQl9LFxu
IiArCisJCQkiCQlpbik7XG4iICsgCisJCQkiICB9XG4iICsKKwkJCSJ9XG4iCisJCX0sCisJCW9w
dGlvbnMpOworfQogcHVibGljIHZvaWQgdGVzdEJ1ZzQyOTQ5MCgpIHsKIAlydW5Db25mb3JtVGVz
dCgKIAkJbmV3IFN0cmluZ1tdIHsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWxsb2NhdGlvbkV4
cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YQppbmRl
eCA0ZDliYmNmLi45NTMzN2FkIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FsbG9jYXRpb25FeHBy
ZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCkBA
IC0zOSw2ICszOSw3IEBACiAgKgkJCQkJCQlCdWcgNDI2OTk2IC0gWzEuOF1baW5mZXJlbmNlXSB0
cnkgdG8gYXZvaWQgbWV0aG9kIEV4cHJlc3Npb24udW5yZXNvbHZlKCk/IAogICoJCQkJCQkJQnVn
IDQyODM1MiAtIFsxLjhdW2NvbXBpbGVyXSBSZXNvbHV0aW9uIGVycm9ycyBkb24ndCBhbHdheXMg
c3VyZmFjZQogICoJCQkJCQkJQnVnIDQyOTIwMyAtIFsxLjhdW2NvbXBpbGVyXSBOUEUgaW4gQWxs
b2NhdGlvbkV4cHJlc3Npb24uYmluZGluZworICoJCQkJCQkJQnVnIDQyOTQzMCAtIFsxLjhdIExh
bWJkYXMgYW5kIG1ldGhvZCByZWZlcmVuY2UgaW5mZXIgd3JvbmcgZXhjZXB0aW9uIHR5cGUgd2l0
aCBnZW5lcmljcyAoUnVudGltZUV4Y2VwdGlvbiBpbnN0ZWFkIG9mIElPRXhjZXB0aW9uKQogICog
ICAgIEplc3BlciBTIE1vbGxlciA8amVzcGVyQHNlbHNrYWJldC5vcmc+IC0gQ29udHJpYnV0aW9u
cyBmb3IKICAqCQkJCQkJCWJ1ZyAzNzg2NzQgLSAiVGhlIG1ldGhvZCBjYW4gYmUgZGVjbGFyZWQg
YXMgc3RhdGljIiBpcyB3cm9uZwogICogICAgIEFuZHkgQ2xlbWVudCAoR29QaXZvdGFsLCBJbmMp
IGFjbGVtZW50QGdvcGl2b3RhbC5jb20gLSBDb250cmlidXRpb25zIGZvcgpAQCAtNTU1LDYgKzU1
Niw3IEBACiAJCW5ldyBJbXBsaWNpdE51bGxBbm5vdGF0aW9uVmVyaWZpZXIoc3RhdGUuc2NvcGUu
ZW52aXJvbm1lbnQoKSwgY29tcGlsZXJPcHRpb25zLmluaGVyaXROdWxsQW5ub3RhdGlvbnMpCiAJ
CQkJLmNoZWNrSW1wbGljaXROdWxsQW5ub3RhdGlvbnModGhpcy5iaW5kaW5nLCBudWxsLypzcmNN
ZXRob2QqLywgZmFsc2UsIHN0YXRlLnNjb3BlKTsKIAl9CisJcmVjb3JkRXhjZXB0aW9uc0ZvckVu
Y2xvc2luZ0xhbWJkYShzdGF0ZS5zY29wZSwgdGhpcy5iaW5kaW5nLnRocm93bkV4Y2VwdGlvbnMp
OwogCXJldHVybiBhbGxvY2F0aW9uVHlwZTsKIH0KIApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9M
YW1iZGFFeHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0xhbWJkYUV4cHJlc3Npb24uamF2YQpp
bmRleCA2ZTE0ZGJiLi41MGMyMTZkIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0xhbWJkYUV4cHJl
c3Npb24uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0xhbWJkYUV4cHJlc3Npb24uamF2YQpAQCAtMzMs
NiArMzMsNyBAQAogICoJCQkJCQkJQnVnIDQyODI5NCAtIFsxLjhdW2NvbXBpbGVyXSBUeXBlIG1p
c21hdGNoOiBjYW5ub3QgY29udmVydCBmcm9tIExpc3Q8T2JqZWN0PiB0byBDb2xsZWN0aW9uPE9i
amVjdFtdPgogICoJCQkJCQkJQnVnIDQyODc4NiAtIFsxLjhdW2NvbXBpbGVyXSBJbmZlcmVuY2Ug
bmVlZHMgdG8gY29tcHV0ZSB0aGUgImdyb3VuZCB0YXJnZXQgdHlwZSIgd2hlbiByZWR1Y2luZyBh
IGxhbWJkYSBjb21wYXRpYmlsaXR5IGNvbnN0cmFpbnQKICAqCQkJCQkJCUJ1ZyA0Mjg5ODAgLSBb
MS44XVtudWxsXSBzaW1wbGUgZXhwcmVzc2lvbiBhcyBsYW1iZGEgYm9keSBkb2Vzbid0IGxldmVy
YWdlIG51bGwgYW5ub3RhdGlvbiBvbiBhcmd1bWVudAorICoJCQkJCQkJQnVnIDQyOTQzMCAtIFsx
LjhdIExhbWJkYXMgYW5kIG1ldGhvZCByZWZlcmVuY2UgaW5mZXIgd3JvbmcgZXhjZXB0aW9uIHR5
cGUgd2l0aCBnZW5lcmljcyAoUnVudGltZUV4Y2VwdGlvbiBpbnN0ZWFkIG9mIElPRXhjZXB0aW9u
KQogICogICAgIEFuZHkgQ2xlbWVudCAoR29QaXZvdGFsLCBJbmMpIGFjbGVtZW50QGdvcGl2b3Rh
bC5jb20gLSBDb250cmlidXRpb25zIGZvcgogICogICAgICAgICAgICAgICAgICAgICAgICAgIEJ1
ZyA0MDUxMDQgLSBbMS44XVtjb21waWxlcl1bY29kZWdlbl0gSW1wbGVtZW50IHN1cHBvcnQgZm9y
IHNlcmlhbGl6ZWFibGUgbGFtYmRhcwogICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCkBAIC00MCw2
ICs0MSw4IEBACiAKIGltcG9ydCBzdGF0aWMgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBp
bGVyLmFzdC5FeHByZXNzaW9uQ29udGV4dC5JTlZPQ0FUSU9OX0NPTlRFWFQ7CiAKK2ltcG9ydCBq
YXZhLnV0aWwuQ29sbGVjdGlvbnM7CitpbXBvcnQgamF2YS51dGlsLkhhc2hTZXQ7CiBpbXBvcnQg
amF2YS51dGlsLkxpbmtlZEhhc2hTZXQ7CiBpbXBvcnQgamF2YS51dGlsLlNldDsKIApAQCAtMTEz
LDYgKzExNiw3IEBACiAJcHJpdmF0ZSBib29sZWFuIGhhc0lnbm9yZWRNYW5kYXRvcnlFcnJvcnMg
PSBmYWxzZTsKIAlwcml2YXRlIFJlZmVyZW5jZUJpbmRpbmcgY2xhc3NUeXBlOwogCXB1YmxpYyBp
bnQgb3JkaW5hbDsKKwlwcml2YXRlIFNldCB0aHJvd25FeGNlcHRpb25zOwogCXByaXZhdGUgc3Rh
dGljIGZpbmFsIFN5bnRoZXRpY0FyZ3VtZW50QmluZGluZyBbXSBOT19TWU5USEVUSUNfQVJHVU1F
TlRTID0gbmV3IFN5bnRoZXRpY0FyZ3VtZW50QmluZGluZ1swXTsKIAlwcml2YXRlIHN0YXRpYyBm
aW5hbCBCbG9jayBOT19CT0RZID0gbmV3IEJsb2NrKDAsIHRydWUpOwogCkBAIC0xMDQ5LDYgKzEw
NTMsMjAgQEAKIAkJfQogCX0KIAkKKwlwdWJsaWMgdm9pZCB0aHJvd3NFeGNlcHRpb24oVHlwZUJp
bmRpbmcgZXhjZXB0aW9uVHlwZSkgeworCQlpZiAodGhpcy5leHByZXNzaW9uQ29udGV4dCAhPSBJ
TlZPQ0FUSU9OX0NPTlRFWFQpCisJCQlyZXR1cm47CisJCWlmICh0aGlzLnRocm93bkV4Y2VwdGlv
bnMgPT0gbnVsbCkKKwkJCXRoaXMudGhyb3duRXhjZXB0aW9ucyA9IG5ldyBIYXNoU2V0PFR5cGVC
aW5kaW5nPigpOworCQl0aGlzLnRocm93bkV4Y2VwdGlvbnMuYWRkKGV4Y2VwdGlvblR5cGUpOwor
CX0KKworCXB1YmxpYyBTZXQ8VHlwZUJpbmRpbmc+IGdldFRocm93bkV4Y2VwdGlvbnMoKSB7CisJ
CWlmICh0aGlzLnRocm93bkV4Y2VwdGlvbnMgPT0gbnVsbCkKKwkJCXJldHVybiBDb2xsZWN0aW9u
cy5lbXB0eVNldCgpOworCQlyZXR1cm4gdGhpcy50aHJvd25FeGNlcHRpb25zOworCX0KKwogCXB1
YmxpYyB2b2lkIGdlbmVyYXRlQ29kZShDbGFzc1Njb3BlIGNsYXNzU2NvcGUsIENsYXNzRmlsZSBj
bGFzc0ZpbGUpIHsKIAkJaW50IHByb2JsZW1SZXNldFBDID0gMDsKIAkJY2xhc3NGaWxlLmNvZGVT
dHJlYW0ud2lkZU1vZGUgPSBmYWxzZTsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTWVzc2FnZVNl
bmQuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9hc3QvTWVzc2FnZVNlbmQuamF2YQppbmRleCBjNDhmMjgwLi4xNTA3
MTMwIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L01lc3NhZ2VTZW5kLmphdmEKKysrIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FzdC9NZXNzYWdlU2VuZC5qYXZhCkBAIC01MCw2ICs1MCw3IEBACiAgKgkJCQkJCQkJQnVnIDQy
NzQzOCAtIFsxLjhdW2NvbXBpbGVyXSBOUEUgYXQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNv
bXBpbGVyLmFzdC5Db25kaXRpb25hbEV4cHJlc3Npb24uZ2VuZXJhdGVDb2RlKENvbmRpdGlvbmFs
RXhwcmVzc2lvbi5qYXZhOjI4MCkKICAqCQkJCQkJCQlCdWcgNDI2OTk2IC0gWzEuOF1baW5mZXJl
bmNlXSB0cnkgdG8gYXZvaWQgbWV0aG9kIEV4cHJlc3Npb24udW5yZXNvbHZlKCk/IAogICoJCQkJ
CQkJCUJ1ZyA0MjgzNTIgLSBbMS44XVtjb21waWxlcl0gUmVzb2x1dGlvbiBlcnJvcnMgZG9uJ3Qg
YWx3YXlzIHN1cmZhY2UKKyAqCQkJCQkJCQlCdWcgNDI5NDMwIC0gWzEuOF0gTGFtYmRhcyBhbmQg
bWV0aG9kIHJlZmVyZW5jZSBpbmZlciB3cm9uZyBleGNlcHRpb24gdHlwZSB3aXRoIGdlbmVyaWNz
IChSdW50aW1lRXhjZXB0aW9uIGluc3RlYWQgb2YgSU9FeGNlcHRpb24pCiAgKiAgICAgSmVzcGVy
IFMgTW9sbGVyIC0gQ29udHJpYnV0aW9ucyBmb3IKICAqCQkJCQkJCQlCdWcgMzc4Njc0IC0gIlRo
ZSBtZXRob2QgY2FuIGJlIGRlY2xhcmVkIGFzIHN0YXRpYyIgaXMgd3JvbmcKICAqICAgICAgICBB
bmR5IENsZW1lbnQgKEdvUGl2b3RhbCwgSW5jKSBhY2xlbWVudEBnb3Bpdm90YWwuY29tIC0gQ29u
dHJpYnV0aW9ucyBmb3IKQEAgLTg1Myw2ICs4NTQsNyBAQAogCWlmICh0aGlzLnR5cGVBcmd1bWVu
dHMgIT0gbnVsbCAmJiB0aGlzLmJpbmRpbmcub3JpZ2luYWwoKS50eXBlVmFyaWFibGVzID09IEJp
bmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMpIHsKIAkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkudW5u
ZWNlc3NhcnlUeXBlQXJndW1lbnRzRm9yTWV0aG9kSW52b2NhdGlvbih0aGlzLmJpbmRpbmcsIHRo
aXMuZ2VuZXJpY1R5cGVBcmd1bWVudHMsIHRoaXMudHlwZUFyZ3VtZW50cyk7CiAJfQorCXJlY29y
ZEV4Y2VwdGlvbnNGb3JFbmNsb3NpbmdMYW1iZGEoc2NvcGUsIHRoaXMuYmluZGluZy50aHJvd25F
eGNlcHRpb25zKTsKIAlyZXR1cm4gKHRoaXMucmVzb2x2ZWRUeXBlLnRhZ0JpdHMgJiBUYWdCaXRz
Lkhhc01pc3NpbmdUeXBlKSA9PSAwCiAJCQkJPyB0aGlzLnJlc29sdmVkVHlwZQogCQkJCTogbnVs
bDsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvU3RhdGVtZW50LmphdmEgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1N0
YXRlbWVudC5qYXZhCmluZGV4IGRjYzgzNDkuLjlmM2EyZGEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvU3RhdGVtZW50LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9TdGF0ZW1lbnQuamF2YQpAQCAtMzIs
NiArMzIsNyBAQAogICoJCQkJCQkJCUJ1ZyA0MjQ0MTUgLSBbMS44XVtjb21waWxlcl0gRXZlbnR1
YWwgcmVzb2x1dGlvbiBvZiBSZWZlcmVuY2VFeHByZXNzaW9uIGlzIG5vdCBzZWVuIHRvIGJlIGhh
cHBlbmluZy4KICAqCQkJCQkJCQlCdWcgNDE4NTM3IC0gWzEuOF1bbnVsbF0gRml4IG51bGwgdHlw
ZSBhbm5vdGF0aW9uIGFuYWx5c2lzIGZvciBwb2x5IGNvbmRpdGlvbmFsIGV4cHJlc3Npb25zCiAg
KgkJCQkJCQkJQnVnIDQyODM1MiAtIFsxLjhdW2NvbXBpbGVyXSBSZXNvbHV0aW9uIGVycm9ycyBk
b24ndCBhbHdheXMgc3VyZmFjZQorICoJCQkJCQkJCUJ1ZyA0Mjk0MzAgLSBbMS44XSBMYW1iZGFz
IGFuZCBtZXRob2QgcmVmZXJlbmNlIGluZmVyIHdyb25nIGV4Y2VwdGlvbiB0eXBlIHdpdGggZ2Vu
ZXJpY3MgKFJ1bnRpbWVFeGNlcHRpb24gaW5zdGVhZCBvZiBJT0V4Y2VwdGlvbikKICAqICAgICAg
ICBBbmR5IENsZW1lbnQgLSBDb250cmlidXRpb25zIGZvcgogICogICAgICAgICAgICAgICAgICAg
ICAgICAgIEJ1ZyAzODM2MjQgLSBbMS44XVtjb21waWxlcl0gUmV2aXZlIGNvZGUgZ2VuZXJhdGlv
biBzdXBwb3J0IGZvciB0eXBlIGFubm90YXRpb25zIChmcm9tIE9saXZpZXIncyB3b3JrKQogICog
ICAgICAgICAgICAgICAgICAgICAgICAgIEJ1ZyA0MDkyNTAgLSBbMS44XVtjb21waWxlcl0gVmFy
aW91cyBsb29zZSBlbmRzIGluIDMwOCBjb2RlIGdlbmVyYXRpb24KQEAgLTM2Niw0ICszNjcsMTYg
QEAKIAlyZXNvbHZlUG9seUV4cHJlc3Npb25Bcmd1bWVudHMoc2l0ZSwgY3RvckJpbmRpbmcsIGFy
Z3VtZW50VHlwZXMsIHNjb3BlKTsKIAlyZXR1cm4gY3RvckJpbmRpbmc7CiB9CisvKioKKyAqIElm
IGFuIGV4Y2VwdGlvbi10aHJvd2luZyBzdGF0ZW1lbnQgaXMgcmVzb2x2ZWQgd2l0aGluIHRoZSBz
Y29wZSBvZiBhIGxhbWJkYSwgcmVjb3JkIHRoZSBleGNlcHRpb24gdHlwZShzKS4KKyAqIEl0IGlz
IGxpa2VseSB3cm9uZyB0byBkbyB0aGlzIGR1cmluZyByZXNvbHZlLCBzaG91bGQgcHJvYmFibHkg
dXNlIHByZWNpc2UgZmxvdyBpbmZvcm1hdGlvbi4KKyAqLworcHJvdGVjdGVkIHZvaWQgcmVjb3Jk
RXhjZXB0aW9uc0ZvckVuY2xvc2luZ0xhbWJkYShCbG9ja1Njb3BlIHNjb3BlLCBUeXBlQmluZGlu
Zy4uLiB0aHJvd25FeGNlcHRpb25zKSB7CisJTWV0aG9kU2NvcGUgbWV0aG9kU2NvcGUgPSBzY29w
ZS5tZXRob2RTY29wZSgpOworCWlmIChtZXRob2RTY29wZSAhPSBudWxsICYmIG1ldGhvZFNjb3Bl
LnJlZmVyZW5jZUNvbnRleHQgaW5zdGFuY2VvZiBMYW1iZGFFeHByZXNzaW9uKSB7CisJCUxhbWJk
YUV4cHJlc3Npb24gbGFtYmRhID0gKExhbWJkYUV4cHJlc3Npb24pIG1ldGhvZFNjb3BlLnJlZmVy
ZW5jZUNvbnRleHQ7CisJCWZvciAoaW50IGkgPSAwOyBpIDwgdGhyb3duRXhjZXB0aW9ucy5sZW5n
dGg7IGkrKykKKwkJCWxhbWJkYS50aHJvd3NFeGNlcHRpb24odGhyb3duRXhjZXB0aW9uc1tpXSk7
CisJfQorfQogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9UaHJvd1N0YXRlbWVudC5qYXZhIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FzdC9UaHJvd1N0YXRlbWVudC5qYXZhCmluZGV4IGVhNDVjNGUuLjNlM2VjMjIgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9hc3QvVGhyb3dTdGF0ZW1lbnQuamF2YQorKysgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0
L1Rocm93U3RhdGVtZW50LmphdmEKQEAgLTEsNSArMSw1IEBACiAvKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKgotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3Ro
ZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDE0IElCTSBDb3Jwb3JhdGlvbiBhbmQgb3Ro
ZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21w
YW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBv
ZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0
aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdApAQCAtMTUsNiArMTUsNyBAQAog
ICoJCQkJCQkJCWJ1ZyAzNTkzMzQgLSBBbmFseXNpcyBmb3IgcmVzb3VyY2UgbGVhayB3YXJuaW5n
cyBkb2VzIG5vdCBjb25zaWRlciBleGNlcHRpb25zIGFzIG1ldGhvZCBleGl0IHBvaW50cwogICoJ
CQkJCQkJCWJ1ZyAzNjg1NDYgLSBbY29tcGlsZXJdW3Jlc291cmNlXSBBdm9pZCByZW1haW5pbmcg
ZmFsc2UgcG9zaXRpdmVzIGZvdW5kIHdoZW4gY29tcGlsaW5nIHRoZSBFY2xpcHNlIFNESwogICoJ
CQkJCQkJCWJ1ZyAzNDUzMDUgLSBbY29tcGlsZXJdW251bGxdIENvbXBpbGVyIG1pc2lkZW50aWZp
ZXMgYSBjYXNlIG9mICJ2YXJpYWJsZSBjYW4gb25seSBiZSBudWxsIgorICoJCQkJCQkJCUJ1ZyA0
Mjk0MzAgLSBbMS44XSBMYW1iZGFzIGFuZCBtZXRob2QgcmVmZXJlbmNlIGluZmVyIHdyb25nIGV4
Y2VwdGlvbiB0eXBlIHdpdGggZ2VuZXJpY3MgKFJ1bnRpbWVFeGNlcHRpb24gaW5zdGVhZCBvZiBJ
T0V4Y2VwdGlvbikKICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwogcGFja2FnZSBvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0OwogCkBAIC03MSw2ICs3Miw3IEBACiAKIHB1Ymxp
YyB2b2lkIHJlc29sdmUoQmxvY2tTY29wZSBzY29wZSkgewogCXRoaXMuZXhjZXB0aW9uVHlwZSA9
IHRoaXMuZXhjZXB0aW9uLnJlc29sdmVUeXBlKHNjb3BlKTsKKwlyZWNvcmRFeGNlcHRpb25zRm9y
RW5jbG9zaW5nTGFtYmRhKHNjb3BlLCB0aGlzLmV4Y2VwdGlvblR5cGUpOwogCWlmICh0aGlzLmV4
Y2VwdGlvblR5cGUgIT0gbnVsbCAmJiB0aGlzLmV4Y2VwdGlvblR5cGUuaXNWYWxpZEJpbmRpbmco
KSkgewogCQlpZiAodGhpcy5leGNlcHRpb25UeXBlID09IFR5cGVCaW5kaW5nLk5VTEwpIHsKIAkJ
CWlmIChzY29wZS5jb21waWxlck9wdGlvbnMoKS5jb21wbGlhbmNlTGV2ZWwgPD0gQ2xhc3NGaWxl
Q29uc3RhbnRzLkpESzFfMyl7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRF
eGNlcHRpb25Gb3JtdWxhLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRFeGNlcHRpb25G
b3JtdWxhLmphdmEKaW5kZXggZjE1OTBkNy4uM2U5NmYwOSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xv
b2t1cC9Db25zdHJhaW50RXhjZXB0aW9uRm9ybXVsYS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAv
Q29uc3RyYWludEV4Y2VwdGlvbkZvcm11bGEuamF2YQpAQCAtNzYsOSArNzYsOSBAQAogCQkJCWVb
bisrXSA9IChJbmZlcmVuY2VWYXJpYWJsZSkgdGhyb3duW2ldOyAvLyB0aHJvd25baV0gaXMgbm90
IGEgcHJvcGVyIHR5cGUsIHNpbmNlIGl0J3MgYW4gZXhjZXB0aW9uIGl0IG11c3QgYmUgYW4gaW5m
ZXJlbmNlVmFyaWFibGUsIHJpZ2h0PwogCQlUeXBlQmluZGluZ1tdIGVQcmltZSA9IG51bGw7CiAJ
CWlmICh0aGlzLmxlZnQgaW5zdGFuY2VvZiBMYW1iZGFFeHByZXNzaW9uKSB7Ci0vLyBUT0RPIGZp
bmQgZXhjZXB0aW9ucyB0aHJvd24gYnkgdGhlIGxhbWJkYSdzIGJvZHksIHNlZSAxOC4yLjUgYnVs
bGV0IDUKLS8vCQkJCSgoTGFtYmRhRXhwcmVzc2lvbil0aGlzLmxlZnQpLgotLy8JCQkJSW5mZXJl
bmNlQ29udGV4dDE4Lm1pc3NpbmdJbXBsZW1lbnRhdGlvbigiTllJIik7CisJCQlMYW1iZGFFeHBy
ZXNzaW9uIGxhbWJkYSA9ICgoTGFtYmRhRXhwcmVzc2lvbikgdGhpcy5sZWZ0KS5nZXRSZXNvbHZl
ZENvcHlGb3JJbmZlcmVuY2VUYXJnZXRpbmcodGhpcy5yaWdodCk7CisJCQlTZXQ8VHlwZUJpbmRp
bmc+IGVQcmltZVNldCA9IGxhbWJkYS5nZXRUaHJvd25FeGNlcHRpb25zKCk7CisJCQllUHJpbWUg
PSBlUHJpbWVTZXQudG9BcnJheShuZXcgVHlwZUJpbmRpbmdbZVByaW1lU2V0LnNpemUoKV0pOwog
CQl9IGVsc2UgewogCQkJUmVmZXJlbmNlRXhwcmVzc2lvbiByZWZlcmVuY2VFeHByZXNzaW9uID0g
KFJlZmVyZW5jZUV4cHJlc3Npb24pdGhpcy5sZWZ0OwogCQkJTWV0aG9kQmluZGluZyBtZXRob2Qg
PSByZWZlcmVuY2VFeHByZXNzaW9uLmZpbmRDb21waWxlVGltZU1ldGhvZFRhcmdldGluZyh0aGlz
LnJpZ2h0LCBzY29wZSk7
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>240734</attachid>
            <date>2014-03-10 19:45:00 -0400</date>
            <delta_ts>2014-03-10 19:45:34 -0400</delta_ts>
            <desc>WIP on stricter failing with better reporting</desc>
            <filename>Bug-429969--18compiler-Possible-RuntimeException-in-.patch</filename>
            <type>text/plain</type>
            <size>16414</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRh
RXhwcmVzc2lvbnNUZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxl
ci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OZWdh
dGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCmluZGV4IDdlNzBlNDIuLjFkYmQwOTEgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRhRXhw
cmVzc2lvbnNUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGls
ZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVn
YXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YQpAQCAtODkyOCwxNSArODkyOCwxNCBAQAog
CQkJCSJ9XG4iCiAJCQl9LAogCQkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJCSIxLiBXQVJOSU5HIGlu
IFguamF2YSAoYXQgbGluZSAyKVxuIiArIAotCQkJIglpbXBvcnQgamF2YS51dGlsLk9wdGlvbmFs
O1xuIiArIAotCQkJIgkgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCi0JCQkiVGhlIGlt
cG9ydCBqYXZhLnV0aWwuT3B0aW9uYWwgaXMgbmV2ZXIgdXNlZFxuIiArIAotCQkJIi0tLS0tLS0t
LS1cbiIgKyAKLQkJCSIyLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNylcbiIgKyAKLQkJCSIJ
cmVxdWlyZShzMSAhPSBudWxsIHx8IHMyICE9IG51bGwsIFwiYm90aCBzdHJpbmdzIGFyZSBudWxs
XCIpO1xuIiArIAotCQkJIgleXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCi0JCQkiVW5oYW5kbGVkIGV4Y2VwdGlvbiB0eXBlIElP
RXhjZXB0aW9uXG4iICsgCisJCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDUpXG4iICsg
CisJCQkiCWZpbmFsIFN0cmluZyBzID0gQXJyYXlzLmFzTGlzdChcImRvbmVcIikuc3RyZWFtKCku
cmVkdWNlKG51bGwsIChzMSxzMikgLT4ge1xuIiArIAorCQkJIiAgICAgICAgICAgICAgICAvLyBU
SEUgRk9MTE9XSU5HIExJTkUgQ0FVU0VTIFRIRSBQUk9CTEVNXG4iICsgCisJCQkiICAgICAgICAg
ICAgICAgIHJlcXVpcmUoczEgIT0gbnVsbCB8fCBzMiAhPSBudWxsLCBcImJvdGggc3RyaW5ncyBh
cmUgbnVsbFwiKTtcbiIgKyAKKwkJCSIgICAgICAgICAgICAgICAgICAgIHJldHVybiAoczEgIT0g
bnVsbCkgPyBzMSA6IHMyO1xuIiArIAorCQkJIiAgICAgICAgICAgIH0sIChzMSxzMikgLT4gKHMx
ICE9IG51bGwpID8gczEgOiBzMik7XG4iICsgCisJCQkiCSAgICAgICAgICAgICAgICAgXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5c
biIgKyAKKwkJCSJDb3VsZCBub3QgaW5mZXIgdHlwZSBhcmd1bWVudHMgZm9yIHRoaXMgaW52b2Nh
dGlvbjogdW5oYW5kbGVkIGV4Y2VwdGlvbiB0eXBlIElPRXhjZXB0aW9uXG4iICsgCiAJCQkiLS0t
LS0tLS0tLVxuIik7CiB9CiAvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1
Zy5jZ2k/aWQ9NDI5OTY5LCBbMS44XVtjb21waWxlcl0gUG9zc2libGUgUnVudGltZUV4Y2VwdGlv
biBpbiBMYW1iZGEgdGFuZ2xlcyBFQ0oKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9jb3JlL2NvbXBpbGVyL0lQcm9ibGVtLmphdmEgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvY29yZS9jb21waWxl
ci9JUHJvYmxlbS5qYXZhCmluZGV4IDVmMmQ5YjMuLmUyODc0MzMgMTAwNjQ0Ci0tLSBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9jb3JlL2NvbXBpbGVyL0lQ
cm9ibGVtLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2NvcmUvY29tcGlsZXIvSVByb2JsZW0uamF2YQpAQCAtMTgyMSw0ICsxODIxLDYgQEAK
IAkKIAkvKiogQHNpbmNlIDMuOSBCRVRBX0pBVkE4ICovCiAJaW50IExhbWJkYVNoYXBlQ29tcHV0
YXRpb25FcnJvciA9IDExMDE7CisJLyoqIEBzaW5jZSAzLjkgQkVUQV9KQVZBOCAqLworCWludCBJ
bmZlcmVuY2VGYWlsZWRVbmhhbmRsZWRFeGNlcHRpb24gPTExMDI7CiB9CmRpZmYgLS1naXQgYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvYXN0L1N0YXRlbWVudC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9TdGF0ZW1lbnQuamF2YQppbmRl
eCA5ZjNhMmRhLi4zNjQxNjQ4IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1N0YXRlbWVudC5qYXZh
CisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hc3QvU3RhdGVtZW50LmphdmEKQEAgLTM3Niw3ICszNzYsOCBAQAogCWlm
IChtZXRob2RTY29wZSAhPSBudWxsICYmIG1ldGhvZFNjb3BlLnJlZmVyZW5jZUNvbnRleHQgaW5z
dGFuY2VvZiBMYW1iZGFFeHByZXNzaW9uKSB7CiAJCUxhbWJkYUV4cHJlc3Npb24gbGFtYmRhID0g
KExhbWJkYUV4cHJlc3Npb24pIG1ldGhvZFNjb3BlLnJlZmVyZW5jZUNvbnRleHQ7CiAJCWZvciAo
aW50IGkgPSAwOyBpIDwgdGhyb3duRXhjZXB0aW9ucy5sZW5ndGg7IGkrKykKLQkJCWxhbWJkYS50
aHJvd3NFeGNlcHRpb24odGhyb3duRXhjZXB0aW9uc1tpXSk7CisJCQlpZiAoIXRocm93bkV4Y2Vw
dGlvbnNbaV0uaXNVbmNoZWNrZWRFeGNlcHRpb24oZmFsc2UpKQorCQkJCWxhbWJkYS50aHJvd3NF
eGNlcHRpb24odGhyb3duRXhjZXB0aW9uc1tpXSk7CiAJfQogfQogfQpkaWZmIC0tZ2l0IGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2xvb2t1cC9Db25zdHJhaW50RXhjZXB0aW9uRm9ybXVsYS5qYXZhIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1
cC9Db25zdHJhaW50RXhjZXB0aW9uRm9ybXVsYS5qYXZhCmluZGV4IGZjMmNmZTIuLjMzZTAzNDIg
MTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3RyYWludEV4Y2VwdGlvbkZvcm11bGEuamF2
YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRFeGNlcHRpb25Gb3JtdWxhLmphdmEKQEAg
LTQxLDcgKzQxLDcgQEAKIAkJdGhpcy5yZWxhdGlvbiA9IEVYQ0VQVElPTlNfQ09OVEFJTkVEOwog
CX0KIAkKLQlwdWJsaWMgT2JqZWN0IHJlZHVjZShJbmZlcmVuY2VDb250ZXh0MTggaW5mZXJlbmNl
Q29udGV4dCkgeworCXB1YmxpYyBPYmplY3QgcmVkdWNlKEluZmVyZW5jZUNvbnRleHQxOCBpbmZl
cmVuY2VDb250ZXh0KSB0aHJvd3MgSW5mZXJlbmNlRmFpbHVyZUV4Y2VwdGlvbiB7CiAJCS8vIEpM
UyAxOC4yLjUKIAkJU2NvcGUgc2NvcGUgPSBpbmZlcmVuY2VDb250ZXh0LnNjb3BlOwogCQlpZiAo
IXRoaXMucmlnaHQuaXNGdW5jdGlvbmFsSW50ZXJmYWNlKHNjb3BlKSkKQEAgLTc0LDEzICs3NCw2
IEBACiAJCWZvciAoaW50IGkgPSAwOyBpIDwgdGhyb3duLmxlbmd0aDsgaSsrKQogCQkJaWYgKCF0
aHJvd25baV0uaXNQcm9wZXJUeXBlKHRydWUpKQogCQkJCWVbbisrXSA9IChJbmZlcmVuY2VWYXJp
YWJsZSkgdGhyb3duW2ldOyAvLyB0aHJvd25baV0gaXMgbm90IGEgcHJvcGVyIHR5cGUsIHNpbmNl
IGl0J3MgYW4gZXhjZXB0aW9uIGl0IG11c3QgYmUgYW4gaW5mZXJlbmNlVmFyaWFibGUsIHJpZ2h0
PwotCQkKLQkJLyogSWYgdGhyb3cgc3BlY2lmaWNhdGlvbiBkb2VzIG5vdCBlbmNvZGUgYW55IHR5
cGUgcGFyYW1ldGVycywgdGhlcmUgYXJlIG5vIGNvbnN0cmFpbnRzIHRvIGJlIGdsZWFuZWQvZ2F0
aGVyZWQgZnJvbSB0aGUgdGhyb3cgc2l0ZXMuCi0JCSAgIFNlZSBhbHNvIHRoYXQgdGhyb3duIGV4
Y2VwdGlvbnMgYXJlIG5vdCBhbGxvd2VkIHRvIGluZmx1ZW5jZSBjb21wYXRpYmlsaXR5IGFuZCBv
dmVybG9hZCByZXNvbHV0aW9uLgotCQkqLwotCQlpZiAobiA9PSAwKQotCQkJcmV0dXJuIFRSVUU7
Ci0JCQogCQlUeXBlQmluZGluZ1tdIGVQcmltZSA9IG51bGw7CiAJCWlmICh0aGlzLmxlZnQgaW5z
dGFuY2VvZiBMYW1iZGFFeHByZXNzaW9uKSB7CiAJCQlMYW1iZGFFeHByZXNzaW9uIGxhbWJkYSA9
ICgoTGFtYmRhRXhwcmVzc2lvbikgdGhpcy5sZWZ0KS5nZXRSZXNvbHZlZENvcHlGb3JJbmZlcmVu
Y2VUYXJnZXRpbmcodGhpcy5yaWdodCk7CkBAIC05NSwyMSArODgsMjkgQEAKIAkJCQllUHJpbWUg
PSBtZXRob2QudGhyb3duRXhjZXB0aW9uczsKIAkJfQogCQlpZiAoZVByaW1lID09IG51bGwpCi0J
CQlyZXR1cm4gVFJVRTsKKwkJCXJldHVybiBUUlVFOyAvLyBUT0RPIGlzIGl0IGEgYnVnIGlmIHdl
IGFjdHVhbGx5IGdldCBoZXJlPwogCQlpbnQgbSA9IGVQcmltZS5sZW5ndGg7Ci0JCUxpc3Q8Q29u
c3RyYWludEZvcm11bGE+IHJlc3VsdCA9IG5ldyBBcnJheUxpc3Q8Q29uc3RyYWludEZvcm11bGE+
KCk7Ci0JCWFjdHVhbDogZm9yIChpbnQgaSA9IDA7IGkgPCBtOyBpKyspIHsKLQkJCWlmIChlUHJp
bWVbaV0uaXNVbmNoZWNrZWRFeGNlcHRpb24oZmFsc2UpKQotCQkJCWNvbnRpbnVlOwotCQkJZm9y
IChpbnQgaiA9IDA7IGogPCB0aHJvd24ubGVuZ3RoOyBqKyspCi0JCQkJaWYgKHRocm93bltqXS5p
c1Byb3BlclR5cGUodHJ1ZSkgJiYgZVByaW1lW2ldLmlzQ29tcGF0aWJsZVdpdGgodGhyb3duW2pd
KSkKLQkJCQkJY29udGludWUgYWN0dWFsOworCQlpZiAobiA9PSAwKSB7CisJCQlhY3R1YWw6IGZv
ciAoaW50IGkgPSAwOyBpIDwgbTsgaSsrKSB7CisJCQkJZm9yIChpbnQgaiA9IDA7IGogPCB0aHJv
d24ubGVuZ3RoOyBqKyspCisJCQkJCWlmIChlUHJpbWVbaV0uaXNDb21wYXRpYmxlV2l0aCh0aHJv
d25bal0pKQorCQkJCQkJY29udGludWUgYWN0dWFsOworCQkJCXRocm93IG5ldyBJbmZlcmVuY2VG
YWlsdXJlRXhjZXB0aW9uKGVQcmltZVtpXSwgdGhpcyk7CisJCQl9CisJCQlyZXR1cm4gVFJVRTsK
KwkJfSBlbHNlIHsKKwkJCUxpc3Q8Q29uc3RyYWludEZvcm11bGE+IHJlc3VsdCA9IG5ldyBBcnJh
eUxpc3Q8Q29uc3RyYWludEZvcm11bGE+KCk7CisJCQlhY3R1YWw6IGZvciAoaW50IGkgPSAwOyBp
IDwgbTsgaSsrKSB7CisJCQkJZm9yIChpbnQgaiA9IDA7IGogPCB0aHJvd24ubGVuZ3RoOyBqKysp
CisJCQkJCWlmICh0aHJvd25bal0uaXNQcm9wZXJUeXBlKHRydWUpICYmIGVQcmltZVtpXS5pc0Nv
bXBhdGlibGVXaXRoKHRocm93bltqXSkpCisJCQkJCQljb250aW51ZSBhY3R1YWw7CisJCQkJZm9y
IChpbnQgaiA9IDA7IGogPCBuOyBqKyspCisJCQkJCXJlc3VsdC5hZGQoQ29uc3RyYWludFR5cGVG
b3JtdWxhLmNyZWF0ZShlUHJpbWVbaV0sIGVbal0sIFNVQlRZUEUpKTsKKwkJCX0JCQkJCiAJCQlm
b3IgKGludCBqID0gMDsgaiA8IG47IGorKykKLQkJCQlyZXN1bHQuYWRkKENvbnN0cmFpbnRUeXBl
Rm9ybXVsYS5jcmVhdGUoZVByaW1lW2ldLCBlW2pdLCBTVUJUWVBFKSk7Ci0JCX0JCQkJCi0JCWZv
ciAoaW50IGogPSAwOyBqIDwgbjsgaisrKQotCQkJaW5mZXJlbmNlQ29udGV4dC5jdXJyZW50Qm91
bmRzLmluVGhyb3dzLmFkZChlW2pdKTsKLQkJcmV0dXJuIHJlc3VsdC50b0FycmF5KG5ldyBDb25z
dHJhaW50Rm9ybXVsYVtyZXN1bHQuc2l6ZSgpXSk7CisJCQkJaW5mZXJlbmNlQ29udGV4dC5jdXJy
ZW50Qm91bmRzLmluVGhyb3dzLmFkZChlW2pdKTsKKwkJCXJldHVybiByZXN1bHQudG9BcnJheShu
ZXcgQ29uc3RyYWludEZvcm11bGFbcmVzdWx0LnNpemUoKV0pOworCQl9CiAJfQogCiAJQ29sbGVj
dGlvbjxJbmZlcmVuY2VWYXJpYWJsZT4gaW5wdXRWYXJpYWJsZXMoZmluYWwgSW5mZXJlbmNlQ29u
dGV4dDE4IGNvbnRleHQpIHsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvSW5mZXJlbmNlQ29u
dGV4dDE4LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVyZW5jZUNvbnRleHQxOC5qYXZhCmluZGV4
IDc2ZGM3ZTQuLjdjYzJkNGYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvSW5mZXJlbmNlQ29u
dGV4dDE4LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9JbmZlcmVuY2VDb250ZXh0MTguamF2YQpA
QCAtMTU1LDcgKzE1NSw3IEBACiAJLy8gLS0tIE1haW4gU3RhdGUgb2YgdGhlIEluZmVyZW5jZTog
LS0tCiAKIAkvKiogdGhlIGludm9jYXRpb24gYmVpbmcgaW5mZXJyZWQgKGZvciAxOC41LjEgYW5k
IDE4LjUuMikgKi8KLQlJbnZvY2F0aW9uU2l0ZSBjdXJyZW50SW52b2NhdGlvbjsKKwlwdWJsaWMg
SW52b2NhdGlvblNpdGUgY3VycmVudEludm9jYXRpb247CiAJLyoqIGFyZ3VtZW50cyBvZiAjY3Vy
cmVudEludm9jYXRpb24sIGlmIGFueSAqLwogCUV4cHJlc3Npb25bXSBpbnZvY2F0aW9uQXJndW1l
bnRzOwogCQpAQCAtMTk3LDYgKzE5Nyw3IEBACiAJLyoqIExpbmsgdG8gYW4gb3V0ZXIgaW5mZXJl
bmNlIGNvbnRleHQsIHVzZWQgZm9yIGJ1bmRsZWQgZXJyb3IgcmVwb3J0aW5nLiAqLwogCXB1Ymxp
YyBJbmZlcmVuY2VDb250ZXh0MTggb3V0ZXJDb250ZXh0OwogCXByaXZhdGUgQXJyYXlMaXN0PE1l
dGhvZEJpbmRpbmc+IHByb2JsZW1NZXRob2RzOworCXB1YmxpYyBJbmZlcmVuY2VGYWlsdXJlRXhj
ZXB0aW9uIGZhaWx1cmU7CiAKIAlTY29wZSBzY29wZTsKIAlMb29rdXBFbnZpcm9ubWVudCBlbnZp
cm9ubWVudDsKQEAgLTQzOCw2ICs0MzksOSBAQAogCQkJLy8gd2UncmUgZG9uZSwgc3RhcnQgcmVw
b3J0aW5nOgogCQkJcmVwb3J0VW5jaGVja2VkQ29udmVyc2lvbnMoc29sdXRpb24pOwogCQkJcmV0
dXJuIHRoaXMuY3VycmVudEJvdW5kcyA9IHNvbHV0aW9uOyAvLyB0aGlzIGlzIGZpbmFsLCBrZWVw
IHRoZSByZXN1bHQ6CisJCX0gY2F0Y2ggKEluZmVyZW5jZUZhaWx1cmVFeGNlcHRpb24gaWZlKSB7
CisJCQl0aGlzLmZhaWx1cmUgPSBpZmU7CisJCQl0aHJvdyBpZmU7CiAJCX0gZmluYWxseSB7CiAJ
CQl0aGlzLnN0ZXBDb21wbGV0ZWQgPSBUWVBFX0lORkVSUkVEOwogCQl9CkBAIC01MjMsNyArNTI3
LDcgQEAKIAkJCQl0cnkgewogCQkJCQlyZXN1bHQgPSBpbmZlckludm9jYXRpb25UeXBlKHRoaXMu
Y3VycmVudEJvdW5kcywgdGFyZ2V0VHlwZSwgaW52b2NhdGlvbiwgb3JpZ2luYWwpOwogCQkJCX0g
Y2F0Y2ggKEluZmVyZW5jZUZhaWx1cmVFeGNlcHRpb24gZSkgewotCQkJCQkvLyBubyBzb2x1dGlv
biwgYnV0IGRvIG1vcmUgY2hlY2tzIGJlbG93CisJCQkJCXJldHVybiBuZXcgUHJvYmxlbU1ldGhv
ZEJpbmRpbmcobWV0aG9kLCBtZXRob2Quc2VsZWN0b3IsIGFyZ3VtZW50VHlwZXMsIHRoaXMpOwog
CQkJCX0KIAkJCX0KIAkJCWlmIChyZXN1bHQgIT0gbnVsbCkgewpAQCAtODM5LDEyICs4NDMsMTcg
QEAKIAkgKiBAdGhyb3dzIEluZmVyZW5jZUZhaWx1cmVFeGNlcHRpb24gYSBjb21waWxlIGVycm9y
IGhhcyBiZWVuIGRldGVjdGVkIGR1cmluZyBpbmZlcmVuY2UKIAkgKi8KIAlwdWJsaWMgLypATnVs
bGFibGUqLyBCb3VuZFNldCBzb2x2ZSgpIHRocm93cyBJbmZlcmVuY2VGYWlsdXJlRXhjZXB0aW9u
IHsKLQkJaWYgKCFyZWR1Y2UoKSkKLQkJCXJldHVybiBudWxsOwotCQlpZiAoIXRoaXMuY3VycmVu
dEJvdW5kcy5pbmNvcnBvcmF0ZSh0aGlzKSkKLQkJCXJldHVybiBudWxsOwotCi0JCXJldHVybiBy
ZXNvbHZlKHRoaXMuaW5mZXJlbmNlVmFyaWFibGVzKTsKKwkJdHJ5IHsKKwkJCWlmICghcmVkdWNl
KCkpCisJCQkJcmV0dXJuIG51bGw7CisJCQlpZiAoIXRoaXMuY3VycmVudEJvdW5kcy5pbmNvcnBv
cmF0ZSh0aGlzKSkKKwkJCQlyZXR1cm4gbnVsbDsKKwkKKwkJCXJldHVybiByZXNvbHZlKHRoaXMu
aW5mZXJlbmNlVmFyaWFibGVzKTsKKwkJfSBjYXRjaCAoSW5mZXJlbmNlRmFpbHVyZUV4Y2VwdGlv
biBpZmUpIHsKKwkJCXRoaXMuZmFpbHVyZSA9IGlmZTsKKwkJCXRocm93IGlmZTsKKwkJfQogCX0K
IAkKIAlwdWJsaWMgLypATnVsbGFibGUqLyBCb3VuZFNldCBzb2x2ZShJbmZlcmVuY2VWYXJpYWJs
ZVtdIHRvUmVzb2x2ZSkgdGhyb3dzIEluZmVyZW5jZUZhaWx1cmVFeGNlcHRpb24gewpkaWZmIC0t
Z2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9JbmZlcmVuY2VGYWlsdXJlRXhjZXB0aW9uLmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvbG9va3VwL0luZmVyZW5jZUZhaWx1cmVFeGNlcHRpb24uamF2YQppbmRleCAyZGFlNTJkLi42
YTM5NmMyIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVyZW5jZUZhaWx1cmVFeGNlcHRp
b24uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVyZW5jZUZhaWx1cmVFeGNlcHRpb24uamF2
YQpAQCAtMTksMTIgKzE5LDIzIEBACiAgKi8KIHB1YmxpYyBjbGFzcyBJbmZlcmVuY2VGYWlsdXJl
RXhjZXB0aW9uIGV4dGVuZHMgRXhjZXB0aW9uIHsKIAorCXB1YmxpYyBlbnVtIEZhaWx1cmVSZWFz
b24geyBJTlRFUk5BTCwgVU5IQU5ETEVEX0VYQ0VQVElPTiB9CisKIAlwcml2YXRlIHN0YXRpYyBm
aW5hbCBsb25nIHNlcmlhbFZlcnNpb25VSUQgPSAxTDsKKwlwdWJsaWMgZmluYWwgVHlwZUJpbmRp
bmcgZXhjZXB0aW9uVHlwZTsKKwlwdWJsaWMgZmluYWwgRmFpbHVyZVJlYXNvbiByZWFzb247CiAK
IAkvLyBUT0RPKHN0ZXBoYW4pOyBhZGQgbW9yZSBkZXRhaWxzIHNvIHRoYXQgUHJvYmxlbVJlcG9y
dGVkIGNhbiBldmVudHVhbGx5IG1hbnVmYWN0dXJlIGFuIGFwcHJvcHJpYXRlIG1lc3NhZ2UKIAkK
IAlwdWJsaWMgSW5mZXJlbmNlRmFpbHVyZUV4Y2VwdGlvbihTdHJpbmcgbWVzc2FnZSkgewogCQlz
dXBlcihtZXNzYWdlKTsKKwkJdGhpcy5leGNlcHRpb25UeXBlID0gbnVsbDsKKwkJdGhpcy5yZWFz
b24gPSBGYWlsdXJlUmVhc29uLklOVEVSTkFMOworCX0KKworCXB1YmxpYyBJbmZlcmVuY2VGYWls
dXJlRXhjZXB0aW9uKFR5cGVCaW5kaW5nIGV4Y2VwdGlvblR5cGUsIENvbnN0cmFpbnRFeGNlcHRp
b25Gb3JtdWxhIGNvbnN0cmFpbnRFeGNlcHRpb25Gb3JtdWxhKSB7CisJCXRoaXMuZXhjZXB0aW9u
VHlwZSA9IGV4Y2VwdGlvblR5cGU7CisJCXRoaXMucmVhc29uID0gRmFpbHVyZVJlYXNvbi5VTkhB
TkRMRURfRVhDRVBUSU9OOwogCX0KIAkKIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUGFy
YW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1BhcmFt
ZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5qYXZhCmluZGV4IGVlZjkzYWIuLmI4ZTkxYjIg
MTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5k
aW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9QYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJp
bmRpbmcuamF2YQpAQCAtMTc4LDggKzE3OCw3IEBACiAJCQkJCXJldHVybiBudWxsOwogCQkJCX0g
Y2F0Y2ggKEluZmVyZW5jZUZhaWx1cmVFeGNlcHRpb24gZSkgewogCQkJCQkvLyBGSVhNRSBzdG9w
LWdhcCBtZWFzdXJlCi0JCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmdlbmVyaWNJbmZlcmVu
Y2VFcnJvcihlLmdldE1lc3NhZ2UoKSwgaW52b2NhdGlvblNpdGUpOwotCQkJCQlyZXR1cm4gbnVs
bDsKKwkJCQkJcmV0dXJuIG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZyhvcmlnaW5hbE1ldGhvZCwg
b3JpZ2luYWxNZXRob2Quc2VsZWN0b3IsIGFyZ3VtZW50cywgaW5mQ3R4MTgpOwogCQkJCX0KIAkJ
CX0gZWxzZSB7CiAvLyA9PT09IDEuOCA9PT09CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1By
b2JsZW1NZXRob2RCaW5kaW5nLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Byb2JsZW1NZXRob2RCaW5k
aW5nLmphdmEKaW5kZXggYWE2MTA1NS4uNTdjZjU4MCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1
cC9Qcm9ibGVtTWV0aG9kQmluZGluZy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUHJvYmxlbU1l
dGhvZEJpbmRpbmcuamF2YQpAQCAtNDAsNiArNDAsMTAgQEAKIAl0aGlzLmNsb3Nlc3RNYXRjaCA9
IGNsb3Nlc3RNYXRjaDsKIAlpZiAoY2xvc2VzdE1hdGNoICE9IG51bGwgJiYgcHJvYmxlbVJlYXNv
biAhPSBQcm9ibGVtUmVhc29ucy5BbWJpZ3VvdXMpIHRoaXMuZGVjbGFyaW5nQ2xhc3MgPSBjbG9z
ZXN0TWF0Y2guZGVjbGFyaW5nQ2xhc3M7CiB9CitwdWJsaWMgUHJvYmxlbU1ldGhvZEJpbmRpbmco
TWV0aG9kQmluZGluZyBjbG9zZXN0TWF0Y2gsIGNoYXJbXSBzZWxlY3RvciwgVHlwZUJpbmRpbmdb
XSBhcmd1bWVudFR5cGVzLCBJbmZlcmVuY2VDb250ZXh0MTggaW5mZXJlbmNlQ29udGV4dDE4KSB7
CisJdGhpcyhjbG9zZXN0TWF0Y2gsIHNlbGVjdG9yLCBhcmd1bWVudFR5cGVzLCBQcm9ibGVtUmVh
c29ucy5JbmZlcmVuY2VGYWlsdXJlKTsKKwl0aGlzLmluZmVyZW5jZUNvbnRleHQgPSBpbmZlcmVu
Y2VDb250ZXh0MTg7Cit9CiAvKiBBUEkKICogQW5zd2VyIHRoZSBwcm9ibGVtIGlkIGFzc29jaWF0
ZWQgd2l0aCB0aGUgcmVjZWl2ZXIuCiAqIE5vRXJyb3IgaWYgdGhlIHJlY2VpdmVyIGlzIGEgdmFs
aWQgYmluZGluZy4KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUHJvYmxlbVJlYXNvbnMuamF2
YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9sb29rdXAvUHJvYmxlbVJlYXNvbnMuamF2YQppbmRleCBiOTZjZWRkLi5hYmQ4
YzI4IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Byb2JsZW1SZWFzb25zLmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2xvb2t1cC9Qcm9ibGVtUmVhc29ucy5qYXZhCkBAIC00Nyw0ICs0Nyw1IEBACiAJZmlu
YWwgaW50IFBhcmFtZXRlcml6ZWRNZXRob2RFeHBlY3RlZFR5cGVQcm9ibGVtID0gMjM7CiAJZmlu
YWwgaW50IEFwcGxpY2FibGVNZXRob2RPdmVycmlkZGVuQnlJbmFwcGxpY2FibGUgPSAyNDsKIAlm
aW5hbCBpbnQgQ29udHJhZGljdG9yeU51bGxBbm5vdGF0aW9ucyA9IDI1OworCWZpbmFsIGludCBJ
bmZlcmVuY2VGYWlsdXJlID0gMjY7CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9Qcm9i
bGVtUmVwb3J0ZXIuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL1Byb2JsZW1SZXBvcnRlci5qYXZhCmlu
ZGV4IGE4MjdlZGQuLmExOWI1MjUgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL1Byb2JsZW1S
ZXBvcnRlci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL1Byb2JsZW1SZXBvcnRlci5qYXZhCkBA
IC0xNDksNiArMTQ5LDcgQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIubG9va3VwLkV4dHJhQ29tcGlsZXJNb2RpZmllcnM7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5GaWVsZEJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5JbmZlcmVuY2VDb250ZXh0MTg7CitpbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5JbmZlcmVuY2VGYWls
dXJlRXhjZXB0aW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5s
b29rdXAuSW52b2NhdGlvblNpdGU7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNv
bXBpbGVyLmxvb2t1cC5Mb2NhbFZhcmlhYmxlQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkxvb2t1cEVudmlyb25tZW50OwpAQCAtMzcwMCw2
ICszNzAxLDEzIEBACiAJCQkJc3RhdGVtZW50LnNvdXJjZVN0YXJ0LAogCQkJCXN0YXRlbWVudC5z
b3VyY2VFbmQpOwogCQkJcmV0dXJuOworCQljYXNlIFByb2JsZW1SZWFzb25zLkluZmVyZW5jZUZh
aWx1cmU6CisJCQlwcm9ibGVtQ29uc3RydWN0b3IgPSAoUHJvYmxlbU1ldGhvZEJpbmRpbmcpIHRh
cmdldENvbnN0cnVjdG9yOworCQkJaWYgKHByb2JsZW1Db25zdHJ1Y3Rvci5pbmZlcmVuY2VDb250
ZXh0ICE9IG51bGwpIHsKKwkJCQlpbmZlcmVuY2VGYWlsZWRFcnJvcihwcm9ibGVtQ29uc3RydWN0
b3IuaW5mZXJlbmNlQ29udGV4dCk7CisJCQkJcmV0dXJuOworCQkJfQorCQkJLy8kRkFMTC1USFJP
VUdIJAogCQljYXNlIFByb2JsZW1SZWFzb25zLk5vRXJyb3IgOiAvLyAwCiAJCWRlZmF1bHQgOgog
CQkJbmVlZEltcGxlbWVudGF0aW9uKHN0YXRlbWVudCk7IC8vIHdhbnQgdG8gZmFpbCB0byBzZWUg
d2h5IHdlIHdlcmUgaGVyZS4uLgpAQCAtNDI3OSw2ICs0Mjg3LDEzIEBACiAJCQlwcm9ibGVtTWV0
aG9kID0gKFByb2JsZW1NZXRob2RCaW5kaW5nKSBtZXRob2Q7CiAJCQljb250cmFkaWN0b3J5TnVs
bEFubm90YXRpb25zSW5mZXJyZWQocHJvYmxlbU1ldGhvZC5jbG9zZXN0TWF0Y2gsIChBU1ROb2Rl
KW1lc3NhZ2VTZW5kKTsKIAkJCXJldHVybjsKKwkJY2FzZSBQcm9ibGVtUmVhc29ucy5JbmZlcmVu
Y2VGYWlsdXJlOgorCQkJcHJvYmxlbU1ldGhvZCA9IChQcm9ibGVtTWV0aG9kQmluZGluZykgbWV0
aG9kOworCQkJaWYgKHByb2JsZW1NZXRob2QuaW5mZXJlbmNlQ29udGV4dCAhPSBudWxsKSB7CisJ
CQkJaW5mZXJlbmNlRmFpbGVkRXJyb3IocHJvYmxlbU1ldGhvZC5pbmZlcmVuY2VDb250ZXh0KTsK
KwkJCQlyZXR1cm47CisJCQl9CisJCQkvLyRGQUxMLVRIUk9VR0gkCiAJCWNhc2UgUHJvYmxlbVJl
YXNvbnMuTm9FcnJvciA6IC8vIDAKIAkJZGVmYXVsdCA6CiAJCQluZWVkSW1wbGVtZW50YXRpb24o
bWVzc2FnZVNlbmQpOyAvLyB3YW50IHRvIGZhaWwgdG8gc2VlIHdoeSB3ZSB3ZXJlIGhlcmUuLi4K
QEAgLTEwMDM0LDYgKzEwMDQ5LDI1IEBACiAJfQogCXRoaXMuaGFuZGxlKElQcm9ibGVtLkdlbmVy
aWNJbmZlcmVuY2VFcnJvciwgYXJncywgYXJncywgc2V2ZXJpdHl8UHJvYmxlbVNldmVyaXRpZXMu
SW50ZXJuYWxFcnJvciwgc3RhcnQsIGVuZCk7CQogfQorcHVibGljIHZvaWQgaW5mZXJlbmNlRmFp
bGVkRXJyb3IoSW5mZXJlbmNlQ29udGV4dDE4IGNvbnRleHQpIHsKKwlJbnZvY2F0aW9uU2l0ZSBp
bnZvY2F0aW9uID0gY29udGV4dC5jdXJyZW50SW52b2NhdGlvbjsKKwlJbmZlcmVuY2VGYWlsdXJl
RXhjZXB0aW9uIGlmZSA9IGNvbnRleHQuZmFpbHVyZTsKKwlTdHJpbmcgbWVzc2FnZSA9ICJVbmtu
b3duIGluZmVyZW5jZSBmYWlsdXJlIjsgLy8kTk9OLU5MUy0xJAorCWlmIChpZmUgIT0gbnVsbCkg
eworCQlzd2l0Y2ggKGlmZS5yZWFzb24pIHsKKwkJCWNhc2UgSU5URVJOQUwgOgorCQkJCW1lc3Nh
Z2UgPSBpZmUuZ2V0TWVzc2FnZSgpOworCQkJCWJyZWFrOworCQkJY2FzZSBVTkhBTkRMRURfRVhD
RVBUSU9OIDoKKwkJCQlTdHJpbmdbXSBhcmdzID0gbmV3IFN0cmluZ1tdIHsgbmV3IFN0cmluZyhp
ZmUuZXhjZXB0aW9uVHlwZS5yZWFkYWJsZU5hbWUoKSkgfTsKKwkJCQlTdHJpbmdbXSBzaG9ydEFy
Z3MgPSBuZXcgU3RyaW5nW10geyBuZXcgU3RyaW5nKGlmZS5leGNlcHRpb25UeXBlLnNob3J0UmVh
ZGFibGVOYW1lKCkpIH07CisJCQkJdGhpcy5oYW5kbGUoSVByb2JsZW0uSW5mZXJlbmNlRmFpbGVk
VW5oYW5kbGVkRXhjZXB0aW9uLCBhcmdzLCBzaG9ydEFyZ3MsIGludm9jYXRpb24uc291cmNlU3Rh
cnQoKSwgaW52b2NhdGlvbi5zb3VyY2VFbmQoKSk7CisJCQkJcmV0dXJuOworCQl9CisJfQorCS8v
IGZhbGxiYWNrIHRvIGdlbmVyaWMgcmVwb3J0aW5nOgorCWdlbmVyaWNJbmZlcmVuY2VFcnJvciht
ZXNzYWdlLCBpbnZvY2F0aW9uKTsKK30KIHB1YmxpYyB2b2lkIHVuaW50ZXJuZWRJZGVudGl0eUNv
bXBhcmlzb24oRXF1YWxFeHByZXNzaW9uIGV4cHIsIFR5cGVCaW5kaW5nIGxocywgVHlwZUJpbmRp
bmcgcmhzLCBDb21waWxhdGlvblVuaXREZWNsYXJhdGlvbiB1bml0KSB7CiAJCiAJY2hhciBbXSBs
aHNOYW1lID0gbGhzLnNvdXJjZU5hbWUoKTsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL21l
c3NhZ2VzLnByb3BlcnRpZXMgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9tZXNzYWdlcy5wcm9wZXJ0aWVzCmlu
ZGV4IGI5MzgyYzAuLjdhNDljODEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL21lc3NhZ2Vz
LnByb3BlcnRpZXMKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vbWVzc2FnZXMucHJvcGVydGllcwpAQCAt
ODQxLDYgKzg0MSw3IEBACiAKIDExMDAgPSBQcm9ibGVtIGRldGVjdGVkIGR1cmluZyB0eXBlIGlu
ZmVyZW5jZTogezB9CiAxMTAxID0gKFJlY292ZXJlZCkgSW50ZXJuYWwgaW5jb25zaXN0ZW5jeSBk
ZXRlY3RlZCBkdXJpbmcgbGFtYmRhIHNoYXBlIGFuYWx5c2lzCisxMTAyID0gQ291bGQgbm90IGlu
ZmVyIHR5cGUgYXJndW1lbnRzIGZvciB0aGlzIGludm9jYXRpb246IHVuaGFuZGxlZCBleGNlcHRp
b24gdHlwZSB7MH0KIAogIyMjIEVMQUJPUkFUSU9OUwogIyMgQWNjZXNzIHJlc3RyaWN0aW9ucw==
</data>

          </attachment>
      

    </bug>

</bugzilla>