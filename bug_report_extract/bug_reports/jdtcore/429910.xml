<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>429910</bug_id>
          
          <creation_ts>2014-03-07 15:31:00 -0500</creation_ts>
          <short_desc>[1.8][model] Superinterfaces of lambda element&apos;s IType are missing type arguments</short_desc>
          <delta_ts>2014-03-11 15:48:17 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Markus Keller">markus_keller</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2373240</commentid>
    <comment_count>0</comment_count>
      <attachid>240672</attachid>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-03-07 15:31:55 -0500</bug_when>
    <thetext>Created attachment 240672
Patch 1

Superinterfaces of lambda element&apos;s IType are missing type arguments. The effect of this is that method override computations in JDT UI fail (e.g. in Ctrl+T and to render Javadocs for the lambda IMethod).

Example:

    Function&lt;List&lt;String&gt;, List&lt;String&gt;&gt; sup = (arg) -&gt; {
        return new ArrayList&lt;&gt;(arg);
    };

    Function&lt;List&lt;String&gt;, List&lt;String&gt;&gt; suppe =
                new Function&lt;List&lt;String&gt;, List&lt;String&gt;&gt;() {
        @Override
        public List&lt;String&gt; apply(List&lt;String&gt; arg) {
            return new ArrayList&lt;&gt;(arg);
        }
    };

IType#getSuperInterfaceTypeSignatures() on the IType for the lambda returns &quot;QFunction;&quot;. This signature is missing type arguments.

The corresponding anonymous type always returns the supertype via IType#getSuperclassTypeSignature(). Here, it returns the correctly parameterized signature &quot;QFunction&lt;QList&lt;QString;&gt;;QList&lt;QString;&gt;;&gt;;&quot;.

For the lambda IType, resolved supertypes would be also be better than unresolved ones.

The attached patch fixes this, but I don&apos;t really understand the difference between the LambdaExpression and ResolvedLambdaExpression types.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373297</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-07 20:10:14 -0500</bug_when>
    <thetext>Jay, please follow up, thanks, we want this for the GA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373299</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-07 20:21:34 -0500</bug_when>
    <thetext>(In reply to Markus Keller from comment #0)
&gt; Created attachment 240672 [details]
&gt; Patch 1

Thanks Markus.

&gt; The attached patch fixes this, but I don&apos;t really understand the difference
&gt; between the LambdaExpression and ResolvedLambdaExpression types.

I don&apos;t either !

This appeared to be required for certain hierarchy operations/tests and
is a simply modeled after ResolvedSourceType.

I had tried to not do this class on account of the fact that LE&apos;s at the 
time of construction are always resolved (i.e have all the information 
from resolution) and so one abstraction should be enough - but had trouble
earlier - but saw some issues.

However having RLE class may have only somehow masked those problems and
the real fix could have been the specialized equals method that ignores
working copy owner.

OK, I&apos;ll remove this class and test. If tests are green and also any UI tests
that have been written so far are green, we can remove this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373304</commentid>
    <comment_count>3</comment_count>
      <attachid>240677</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-07 21:02:20 -0500</bug_when>
    <thetext>Created attachment 240677
Patch to eliminate ResolvedLambdaExpression

(In reply to Srikanth Sankaran from comment #2)

&gt; OK, I&apos;ll remove this class and test. If tests are green and also any UI tests
&gt; that have been written so far are green, we can remove this.

RunAllJava8Tests and RunAllModelTests are green even after I remove ResolvedLambdaExpression abstraction.

Jay, please work with Noopur to make sure any new UI tests are also not affected
and get rid of this abstraction. TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373305</commentid>
    <comment_count>4</comment_count>
      <attachid>240677</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-07 21:08:42 -0500</bug_when>
    <thetext>Comment on attachment 240677
Patch to eliminate ResolvedLambdaExpression

We still would have to override getKey() in LE otherwise we may always
return the unresolved key - looking into it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373306</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-07 21:20:33 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #2)
&gt; (In reply to Markus Keller from comment #0)
&gt; &gt; Created attachment 240672 [details]
&gt; &gt; Patch 1
&gt; 
&gt; Thanks Markus.
&gt; 
&gt; &gt; The attached patch fixes this, but I don&apos;t really understand the difference
&gt; &gt; between the LambdaExpression and ResolvedLambdaExpression types.
&gt; 
&gt; I don&apos;t either !

&gt; OK, I&apos;ll remove this class and test. If tests are green and also any UI tests
&gt; that have been written so far are green, we can remove this.

I think it is better to leave this in as is for now. Though removing this
does not seem to affect JDT/core tests, I tested before adding equivalent
getKey() method in LE.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373307</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-07 22:57:32 -0500</bug_when>
    <thetext>There is also a further problem that org.eclipse.jdt.internal.compiler.ast.LambdaExpression.getTypeBinding().LambdaTypeBinding.computeUniqueKey() returns the functional interface type&apos;s key. It is too
late to fix this unless it impacts something.

Markus see org.eclipse.jdt.internal.core.JavaElement.resolved(Binding) and
org.eclipse.jdt.internal.core.JavaElement.unresolved() - These are not APIs
but used all over the place from API implementations, most notably from
implementations of org.eclipse.jdt.core.dom.IBinding.getJavaElement()

Also, ATM, org.eclipse.jdt.core.dom.LambdaExpression does not allow asking for getJavaElement()

Notwithstanding the documentation of these observations, I suggest we only
make those changes that are requested from UI side for now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373356</commentid>
    <comment_count>7</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-03-08 08:19:25 -0500</bug_when>
    <thetext>AFAIK, the resolved/unresolved versions of ITypes exist because IParent#getChildren() and similar Java element tree queries only return unresolved elements. For Java 1.5, codeSelect and the type hierarchy were enhanced to return ITypes with resolved type arguments.

I don&apos;t think we should deal with unresolved lambdas anywhere. But I only have an API client view and don&apos;t know all the JDT Core internals.

(In reply to Srikanth Sankaran from comment #5)
&gt; I think it is better to leave this in as is for now.

OK for me.

(In reply to Srikanth Sankaran from comment #6)
&gt; Also, ATM, org.eclipse.jdt.core.dom.LambdaExpression does not allow asking
&gt; for getJavaElement()

Yup, bug 429813 (IMethodBinding#getJavaElement() returns null).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373596</commentid>
    <comment_count>8</comment_count>
      <attachid>240704</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-03-10 03:24:26 -0400</bug_when>
    <thetext>Created attachment 240704
Patch with new test

Same as the previous patch from Markus with a new unit test.

Patch looks good to me. Srikanth, I am planning to release this in a bit. Let me know if you would like to review before releasing.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373622</commentid>
    <comment_count>9</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-10 04:49:35 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #8)

&gt; Patch looks good to me. Srikanth, I am planning to release this in a bit.
&gt; Let me know if you would like to review before releasing.

I looked through, looks fine, Could you just insert a space before = (3 places)
and release please ? Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373696</commentid>
    <comment_count>10</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-03-10 06:46:57 -0400</bug_when>
    <thetext>Thanks for the patch, Markus. Released the fix with test here:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=fce949b99d272770d0ef99d0fd14291b59c28cff</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2374595</commentid>
    <comment_count>11</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-03-11 15:48:17 -0400</bug_when>
    <thetext>(From bug 429812 comment #17)
&gt; We should actually use TypeBinding#genericTypeSignature() here.

This also needs to be applied for this bug. The lesson learned is that you can&apos;t convert Binding#readableName() to a resolved signature without information loss. For unresolved signatures, writing &quot;QT;&quot; for a reference to a type variable T is fine. For a resolved signature, &quot;LT;&quot; is wrong. It needs to be &quot;TT;&quot;.

Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=c5d3e87bb720e91660c058962146e02390cfc415 and also in BETA_JAVA8 branch.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>240672</attachid>
            <date>2014-03-07 15:31:00 -0500</date>
            <delta_ts>2014-03-10 03:24:26 -0400</delta_ts>
            <desc>Patch 1</desc>
            <filename>eclipse.jdt.core.patch</filename>
            <type>text/plain</type>
            <size>1986</size>
            <attacher name="Markus Keller">markus_keller</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMAojUCBvcmcuZWNsaXBzZS5qZHQuY29yZQpk
aWZmIC0tZ2l0IG1vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0xhbWJkYUV4cHJl
c3Npb24uamF2YSBtb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9MYW1iZGFFeHBy
ZXNzaW9uLmphdmEKaW5kZXggMzY3YmNkZS4uNjI5OThkMiAxMDA2NDQKLS0tIG1vZGVsL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0xhbWJkYUV4cHJlc3Npb24uamF2YQorKysgbW9kZWwv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvTGFtYmRhRXhwcmVzc2lvbi5qYXZhCkBAIC0x
OSw3ICsxOSw5IEBACiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuSUxvY2FsVmFyaWFibGU7
CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuSU1ldGhvZDsKIGltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuY29yZS5KYXZhTW9kZWxFeGNlcHRpb247CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNv
cmUuU2lnbmF0dXJlOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLldvcmtpbmdDb3B5T3du
ZXI7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuQ2hhck9wZXJhdGlvbjsK
IGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkJpbmRpbmc7
CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvcmUudXRpbC5NZW1lbnRvVG9rZW5p
emVyOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLnV0aWwuVXRpbDsKQEAg
LTQyLDcgKzQ0LDcgQEAKIAkJdGhpcy5zb3VyY2VTdGFydCA9IGxhbWJkYUV4cHJlc3Npb24uc291
cmNlU3RhcnQ7CiAJCXRoaXMuc291cmNlRW5kID0gbGFtYmRhRXhwcmVzc2lvbi5zb3VyY2VFbmQ7
CiAJCXRoaXMuYXJyb3dQb3NpdGlvbiA9IGxhbWJkYUV4cHJlc3Npb24uYXJyb3dQb3NpdGlvbjsK
LQkJdGhpcy5pbnRlcnBoYXNlID0gbmV3IFN0cmluZyhsYW1iZGFFeHByZXNzaW9uLmRlc2NyaXB0
b3IuZGVjbGFyaW5nQ2xhc3Muc291cmNlTmFtZSgpKTsKKwkJdGhpcy5pbnRlcnBoYXNlID0gbmV3
IFN0cmluZyhsYW1iZGFFeHByZXNzaW9uLmRlc2NyaXB0b3IuZGVjbGFyaW5nQ2xhc3MucmVhZGFi
bGVOYW1lKCkpOwogCQl0aGlzLmVsZW1lbnRJbmZvID0gbWFrZVR5cGVFbGVtZW50SW5mbyh0aGlz
LCB0aGlzLmludGVycGhhc2UsIHRoaXMuc291cmNlU3RhcnQsIHRoaXMuc291cmNlRW5kLCB0aGlz
LmFycm93UG9zaXRpb24pOyAKIAkJdGhpcy5sYW1iZGFNZXRob2QgPSBMYW1iZGFNZXRob2QubWFr
ZSh0aGlzLCBsYW1iZGFFeHByZXNzaW9uKTsKIAkJdGhpcy5lbGVtZW50SW5mby5jaGlsZHJlbiA9
IG5ldyBJSmF2YUVsZW1lbnRbXSB7IHRoaXMubGFtYmRhTWV0aG9kIH07CkBAIC0xOTUsNCArMTk3
LDE3IEBACiAJcHVibGljIElNZXRob2QgZ2V0TWV0aG9kKCkgewogCQlyZXR1cm4gdGhpcy5sYW1i
ZGFNZXRob2Q7CiAJfQorCisJcHVibGljIFN0cmluZ1tdIGdldFN1cGVySW50ZXJmYWNlVHlwZVNp
Z25hdHVyZXMoKSB0aHJvd3MgSmF2YU1vZGVsRXhjZXB0aW9uIHsKKwkJU291cmNlVHlwZUVsZW1l
bnRJbmZvIGluZm8gPSAoU291cmNlVHlwZUVsZW1lbnRJbmZvKSBnZXRFbGVtZW50SW5mbygpOwor
CQljaGFyW11bXSBuYW1lcz0gaW5mby5nZXRJbnRlcmZhY2VOYW1lcygpOworCQlpZiAobmFtZXMg
PT0gbnVsbCkgeworCQkJcmV0dXJuIENoYXJPcGVyYXRpb24uTk9fU1RSSU5HUzsKKwkJfQorCQlT
dHJpbmdbXSBzdHJpbmdzPSBuZXcgU3RyaW5nW25hbWVzLmxlbmd0aF07CisJCWZvciAoaW50IGk9
IDA7IGkgPCBuYW1lcy5sZW5ndGg7IGkrKykgeworCQkJc3RyaW5nc1tpXT0gbmV3IFN0cmluZyhT
aWduYXR1cmUuY3JlYXRlVHlwZVNpZ25hdHVyZShuYW1lc1tpXSwgdHJ1ZSkpOworCQl9CisJCXJl
dHVybiBzdHJpbmdzOworCX0KIH0KXCBObyBuZXdsaW5lIGF0IGVuZCBvZiBmaWxl
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>240677</attachid>
            <date>2014-03-07 21:02:00 -0500</date>
            <delta_ts>2014-03-07 21:08:42 -0500</delta_ts>
            <desc>Patch to eliminate ResolvedLambdaExpression</desc>
            <filename>EliminateRLE.patch</filename>
            <type>text/plain</type>
            <size>3379</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb3JlL0xhbWJkYUV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0xhbWJkYUV4cHJlc3Npb24uamF2
YQppbmRleCAzNjdiY2RlLi4xMTM2YzYyIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9MYW1iZGFFeHByZXNzaW9uLmph
dmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvcmUvTGFtYmRhRXhwcmVzc2lvbi5qYXZhCkBAIC0xODgsOCArMTg4LDcgQEAKIAl9CiAJ
CiAJcHVibGljIEphdmFFbGVtZW50IHJlc29sdmVkKEJpbmRpbmcgYmluZGluZykgewotCQlSZXNv
bHZlZExhbWJkYUV4cHJlc3Npb24gcmVzb2x2ZWRIYW5kbGUgPSBuZXcgUmVzb2x2ZWRMYW1iZGFF
eHByZXNzaW9uKHRoaXMucGFyZW50LCB0aGlzLCBuZXcgU3RyaW5nKGJpbmRpbmcuY29tcHV0ZVVu
aXF1ZUtleSgpKSk7Ci0JCXJldHVybiByZXNvbHZlZEhhbmRsZTsKKwkJcmV0dXJuIHRoaXM7CiAJ
fQogCiAJcHVibGljIElNZXRob2QgZ2V0TWV0aG9kKCkgewpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvUmVzb2x2ZWRM
YW1iZGFFeHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29yZS9SZXNvbHZlZExhbWJkYUV4cHJlc3Npb24uamF2YQpkZWxl
dGVkIGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMTEzNDVjYi4uMDAwMDAwMAotLS0gYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9SZXNvbHZl
ZExhbWJkYUV4cHJlc3Npb24uamF2YQorKysgL2Rldi9udWxsCkBAIC0xLDY4ICswLDAgQEAKLS8q
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMTQgSUJNIENvcnBvcmF0
aW9uIGFuZCBvdGhlcnMuCi0gKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5k
IHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCi0gKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIg
dGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKLSAqIHdoaWNoIGFj
Y29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0Ci0gKiBodHRw
Oi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbAotICoKLSAqIFRoaXMgaXMgYW4g
aW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQgc3BlY2lmaWNhdGlvbiBkZXZlbG9wZWQg
dW5kZXIgdGhlIEphdmEKLSAqIENvbW11bml0eSBQcm9jZXNzIChKQ1ApIGFuZCBpcyBtYWRlIGF2
YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiBwdXJwb3NlcwotICogb25seS4gVGhl
IGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkgc3BlY2lmaWNhdGlvbiBvZiB0aGUgSkNQ
LgotICoKLSAqIENvbnRyaWJ1dG9yczoKLSAqICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFs
IEFQSSBhbmQgaW1wbGVtZW50YXRpb24KLSAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwotcGFja2Fn
ZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZTsKLQotaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5jb3JlLkphdmFNb2RlbEV4Y2VwdGlvbjsKLQotcHVibGljIGNsYXNzIFJlc29sdmVkTGFtYmRh
RXhwcmVzc2lvbiBleHRlbmRzIExhbWJkYUV4cHJlc3Npb24gewotCi0JcHJpdmF0ZSBTdHJpbmcg
dW5pcXVlS2V5OwotCUxhbWJkYUV4cHJlc3Npb24gdW5yZXNvbHZlZDsKLQotCXB1YmxpYyBSZXNv
bHZlZExhbWJkYUV4cHJlc3Npb24oSmF2YUVsZW1lbnQgcGFyZW50LCBMYW1iZGFFeHByZXNzaW9u
IHVucmVzb2x2ZWQsIFN0cmluZyB1bmlxdWVLZXkpIHsKLQkJc3VwZXIocGFyZW50LCB1bnJlc29s
dmVkLm5hbWUsIHVucmVzb2x2ZWQuaW50ZXJwaGFzZSwgdW5yZXNvbHZlZC5zb3VyY2VTdGFydCwg
dW5yZXNvbHZlZC5zb3VyY2VFbmQsIHVucmVzb2x2ZWQuYXJyb3dQb3NpdGlvbiwgdW5yZXNvbHZl
ZC5sYW1iZGFNZXRob2QpOwotCQl0aGlzLnVuaXF1ZUtleSA9IHVuaXF1ZUtleTsKLQkJdGhpcy51
bnJlc29sdmVkID0gdW5yZXNvbHZlZDsKLQl9Ci0KLQlwdWJsaWMgU3RyaW5nIGdldEZ1bGx5UXVh
bGlmaWVkUGFyYW1ldGVyaXplZE5hbWUoKSB0aHJvd3MgSmF2YU1vZGVsRXhjZXB0aW9uIHsKLQkJ
cmV0dXJuIGdldEZ1bGx5UXVhbGlmaWVkUGFyYW1ldGVyaXplZE5hbWUoZ2V0RnVsbHlRdWFsaWZp
ZWROYW1lKCcuJyksIHRoaXMudW5pcXVlS2V5KTsKLQl9Ci0KLQkvKiAobm9uLUphdmFkb2MpCi0J
ICogQHNlZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS5Tb3VyY2VUeXBlI2dldEtleSgp
Ci0JICovCi0JcHVibGljIFN0cmluZyBnZXRLZXkoKSB7Ci0JCXJldHVybiB0aGlzLnVuaXF1ZUtl
eTsKLQl9Ci0KLQlAT3ZlcnJpZGUKLQlwdWJsaWMgYm9vbGVhbiBlcXVhbHMoT2JqZWN0IG8pIHsK
LQkJcmV0dXJuIHRoaXMudW5yZXNvbHZlZC5lcXVhbHMobyk7Ci0JfQotCQotCS8qIChub24tSmF2
YWRvYykKLQkgKiBAc2VlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLlNvdXJjZVR5cGUj
aXNSZXNvbHZlZCgpCi0JICovCi0JcHVibGljIGJvb2xlYW4gaXNSZXNvbHZlZCgpIHsKLQkJcmV0
dXJuIHRydWU7Ci0JfQotCi0JLyoqCi0JICogQHByaXZhdGUgRGVidWdnaW5nIHB1cnBvc2VzCi0J
ICovCi0JcHJvdGVjdGVkIHZvaWQgdG9TdHJpbmdJbmZvKGludCB0YWIsIFN0cmluZ0J1ZmZlciBi
dWZmZXIsIE9iamVjdCBpbmZvLCBib29sZWFuIHNob3dSZXNvbHZlZEluZm8pIHsKLQkJc3VwZXIu
dG9TdHJpbmdJbmZvKHRhYiwgYnVmZmVyLCBpbmZvLCBzaG93UmVzb2x2ZWRJbmZvKTsKLQkJaWYg
KHNob3dSZXNvbHZlZEluZm8pIHsKLQkJCWJ1ZmZlci5hcHBlbmQoIiB7a2V5PSIpOyAvLyROT04t
TkxTLTEkCi0JCQlidWZmZXIuYXBwZW5kKHRoaXMuZ2V0S2V5KCkpOwotCQkJYnVmZmVyLmFwcGVu
ZCgifSIpOyAvLyROT04tTkxTLTEkCi0JCX0KLQl9Ci0KLQlwdWJsaWMgSmF2YUVsZW1lbnQgdW5y
ZXNvbHZlZCgpIHsKLQkJcmV0dXJuIHRoaXMudW5yZXNvbHZlZDsKLQl9Ci19ClwgTm8gbmV3bGlu
ZSBhdCBlbmQgb2YgZmlsZQ==
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>240704</attachid>
            <date>2014-03-10 03:24:00 -0400</date>
            <delta_ts>2014-03-10 03:24:26 -0400</delta_ts>
            <desc>Patch with new test</desc>
            <filename>Bug-429910.patch</filename>
            <type>text/plain</type>
            <size>4090</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMAojUCBvcmcuZWNsaXBzZS5qZHQuY29yZS50
ZXN0cy5tb2RlbApkaWZmIC0tZ2l0IHNyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9tb2Rl
bC9KYXZhRWxlbWVudDhUZXN0cy5qYXZhIHNyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9t
b2RlbC9KYXZhRWxlbWVudDhUZXN0cy5qYXZhCmluZGV4IDEyODU5MGIuLjFjNmU0YTQgMTAwNjQ0
Ci0tLSBzcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvbW9kZWwvSmF2YUVsZW1lbnQ4VGVz
dHMuamF2YQorKysgc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21vZGVsL0phdmFFbGVt
ZW50OFRlc3RzLmphdmEKQEAgLTI2LDQgKzI2LDUgQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
Y29yZS5JVHlwZUhpZXJhcmNoeTsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5KYXZhQ29y
ZTsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS5MYW1iZGFFeHByZXNzaW9u
OwogCiBwdWJsaWMgY2xhc3MgSmF2YUVsZW1lbnQ4VGVzdHMgZXh0ZW5kcyBBYnN0cmFjdEphdmFN
b2RlbFRlc3RzIHsgCkBAIC00OSw0ICs1MCw1IEBACiAJCXN1aXRlLmFkZFRlc3QobmV3IEphdmFF
bGVtZW50OFRlc3RzKCJ0ZXN0NDI5OTQ4YSIpKTsKIAkJc3VpdGUuYWRkVGVzdChuZXcgSmF2YUVs
ZW1lbnQ4VGVzdHMoInRlc3Q0Mjk5NjYiKSk7CisJCXN1aXRlLmFkZFRlc3QobmV3IEphdmFFbGVt
ZW50OFRlc3RzKCJ0ZXN0QnVnNDI5OTEwIikpOwogCQlyZXR1cm4gc3VpdGU7CiAJfQpAQCAtMjg0
LDMgKzI4NiwzNyBAQAogCQl9CiAJfQorCS8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdz
L3Nob3dfYnVnLmNnaT9pZD00Mjk5MTAKKwlwdWJsaWMgdm9pZCB0ZXN0QnVnNDI5OTEwKCkgdGhy
b3dzIEV4Y2VwdGlvbiB7CisJCXRyeSB7CisJCQlJSmF2YVByb2plY3QgcHJvamVjdCA9IGNyZWF0
ZUphdmFQcm9qZWN0KCJCdWc0Mjk5MTAiLCBuZXcgU3RyaW5nW10geyJzcmMifSwgbmV3IFN0cmlu
Z1tdIHsiSkNMMThfTElCIn0sICJiaW4iLCAiMS44Iik7CisJCQlwcm9qZWN0Lm9wZW4obnVsbCk7
CisJCQlTdHJpbmcgZmlsZUNvbnRlbnQgPSAgInBhY2thZ2UgcDtcbiIgKworCQkJCQkgImltcG9y
dCBqYXZhLnV0aWwuTGlzdDtcbiIgKworCQkJCQkgInB1YmxpYyBpbnRlcmZhY2UgVGVzdCB7XG4i
ICsKKwkJCQkJICIJc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsKKwkJCQkJ
ICIJCUk8U3RyaW5nPiBpID0gKHgpIC0+IHt9O1xuIiArCisJCQkJCSAiCX1cbiIgKworCQkJCQkg
In1cbiIgKyAKKwkJCQkJICJpbnRlcmZhY2UgSTxUPiB7XG4iICsgCisJCQkJCSAiICBwdWJsaWMg
dm9pZCBmb28oTGlzdDxUPiB4KTtcbiIgKworCQkJCQkgIn0iOworCQkJY3JlYXRlRm9sZGVyKCIv
QnVnNDI5OTEwL3NyYy9wIik7CisJCQljcmVhdGVGaWxlKAkiL0J1ZzQyOTkxMC9zcmMvcC9UZXN0
LmphdmEiLAlmaWxlQ29udGVudCk7CisJCQlJQ29tcGlsYXRpb25Vbml0IHVuaXQgPSBnZXRDb21w
aWxhdGlvblVuaXQoIi9CdWc0Mjk5MTAvc3JjL3AvVGVzdC5qYXZhIik7CisJCQlpbnQgc3RhcnQg
PSBmaWxlQ29udGVudC5pbmRleE9mKCJ4KSAtPiIpOworCQkJSUphdmFFbGVtZW50W10gZWxlbWVu
dHMgPSB1bml0LmNvZGVTZWxlY3Qoc3RhcnQsIDEpOworCQkJYXNzZXJ0RXF1YWxzKCJJbmNvcnJl
Y3Qgbm8gb2YgZWxlbWVudHMiLCAxLCBlbGVtZW50cy5sZW5ndGgpOworCQkJYXNzZXJ0RXF1YWxz
KCJJbmNvcnJlY3QgZWxlbWVudCB0eXBlIiwgSUphdmFFbGVtZW50LkxPQ0FMX1ZBUklBQkxFLCBl
bGVtZW50c1swXS5nZXRFbGVtZW50VHlwZSgpKTsKKwkJCUlNZXRob2QgbWV0aG9kID0gKElNZXRo
b2QpIGVsZW1lbnRzWzBdLmdldFBhcmVudCgpOworCQkJYXNzZXJ0VHJ1ZSgiU2hvdWxkIGJlIGEg
bGFtYmRhIG1ldGhvZCIsbWV0aG9kLmlzTGFtYmRhTWV0aG9kKCkpOworCQkJSUphdmFFbGVtZW50
IHBhcmVudCA9IG1ldGhvZC5nZXRQYXJlbnQoKTsKKwkJCWFzc2VydFRydWUoIlNob3VsZCBiZSBh
IGxhbWJkYSBleHByZXNzaW9uIiwgKHBhcmVudCBpbnN0YW5jZW9mIExhbWJkYUV4cHJlc3Npb24p
KTsKKwkJCUxhbWJkYUV4cHJlc3Npb24gbGFtYmRhID0gKExhbWJkYUV4cHJlc3Npb24pIHBhcmVu
dDsKKwkJCVN0cmluZyBzaWdzID0gbGFtYmRhLmdldFN1cGVySW50ZXJmYWNlVHlwZVNpZ25hdHVy
ZXMoKVswXTsKKwkJCWFzc2VydEVxdWFscygiSW5jb3JyZWN0IHN1cGVyIGludGVyZmFjZSBzaWdu
YXR1cmUiLCAiTHAuSTxMamF2YS5sYW5nLlN0cmluZzs+OyIsIHNpZ3MpOworCQl9CisJCWZpbmFs
bHkgeworCQkJZGVsZXRlUHJvamVjdCgiQnVnNDI5OTEwIik7CisJCX0KKwl9CiB9CiNQIG9yZy5l
Y2xpcHNlLmpkdC5jb3JlCmRpZmYgLS1naXQgbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvcmUvTGFtYmRhRXhwcmVzc2lvbi5qYXZhIG1vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb3JlL0xhbWJkYUV4cHJlc3Npb24uamF2YQppbmRleCAzNjdiY2RlLi42Mjk5OGQyIDEwMDY0
NAotLS0gbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvTGFtYmRhRXhwcmVzc2lv
bi5qYXZhCisrKyBtb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9MYW1iZGFFeHBy
ZXNzaW9uLmphdmEKQEAgLTIwLDUgKzIwLDcgQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29y
ZS5JTWV0aG9kOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLkphdmFNb2RlbEV4Y2VwdGlv
bjsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5TaWduYXR1cmU7CiBpbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmNvcmUuV29ya2luZ0NvcHlPd25lcjsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
Y29yZS5jb21waWxlci5DaGFyT3BlcmF0aW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRl
cm5hbC5jb21waWxlci5sb29rdXAuQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50
ZXJuYWwuY29yZS51dGlsLk1lbWVudG9Ub2tlbml6ZXI7CkBAIC00Myw1ICs0NSw1IEBACiAJCXRo
aXMuc291cmNlRW5kID0gbGFtYmRhRXhwcmVzc2lvbi5zb3VyY2VFbmQ7CiAJCXRoaXMuYXJyb3dQ
b3NpdGlvbiA9IGxhbWJkYUV4cHJlc3Npb24uYXJyb3dQb3NpdGlvbjsKLQkJdGhpcy5pbnRlcnBo
YXNlID0gbmV3IFN0cmluZyhsYW1iZGFFeHByZXNzaW9uLmRlc2NyaXB0b3IuZGVjbGFyaW5nQ2xh
c3Muc291cmNlTmFtZSgpKTsKKwkJdGhpcy5pbnRlcnBoYXNlID0gbmV3IFN0cmluZyhsYW1iZGFF
eHByZXNzaW9uLmRlc2NyaXB0b3IuZGVjbGFyaW5nQ2xhc3MucmVhZGFibGVOYW1lKCkpOwogCQl0
aGlzLmVsZW1lbnRJbmZvID0gbWFrZVR5cGVFbGVtZW50SW5mbyh0aGlzLCB0aGlzLmludGVycGhh
c2UsIHRoaXMuc291cmNlU3RhcnQsIHRoaXMuc291cmNlRW5kLCB0aGlzLmFycm93UG9zaXRpb24p
OyAKIAkJdGhpcy5sYW1iZGFNZXRob2QgPSBMYW1iZGFNZXRob2QubWFrZSh0aGlzLCBsYW1iZGFF
eHByZXNzaW9uKTsKQEAgLTE5NiwzICsxOTgsMTYgQEAKIAkJcmV0dXJuIHRoaXMubGFtYmRhTWV0
aG9kOwogCX0KKworCXB1YmxpYyBTdHJpbmdbXSBnZXRTdXBlckludGVyZmFjZVR5cGVTaWduYXR1
cmVzKCkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbiB7CisJCVNvdXJjZVR5cGVFbGVtZW50SW5m
byBpbmZvID0gKFNvdXJjZVR5cGVFbGVtZW50SW5mbykgZ2V0RWxlbWVudEluZm8oKTsKKwkJY2hh
cltdW10gbmFtZXM9IGluZm8uZ2V0SW50ZXJmYWNlTmFtZXMoKTsKKwkJaWYgKG5hbWVzID09IG51
bGwpIHsKKwkJCXJldHVybiBDaGFyT3BlcmF0aW9uLk5PX1NUUklOR1M7CisJCX0KKwkJU3RyaW5n
W10gc3RyaW5ncz0gbmV3IFN0cmluZ1tuYW1lcy5sZW5ndGhdOworCQlmb3IgKGludCBpPSAwOyBp
IDwgbmFtZXMubGVuZ3RoOyBpKyspIHsKKwkJCXN0cmluZ3NbaV09IG5ldyBTdHJpbmcoU2lnbmF0
dXJlLmNyZWF0ZVR5cGVTaWduYXR1cmUobmFtZXNbaV0sIHRydWUpKTsKKwkJfQorCQlyZXR1cm4g
c3RyaW5nczsKKwl9CiB9ClwgTm8gbmV3bGluZSBhdCBlbmQgb2YgZmlsZQ==
</data>

          </attachment>
      

    </bug>

</bugzilla>