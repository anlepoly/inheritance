<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>372319</bug_id>
          
          <creation_ts>2012-02-23 07:23:00 -0500</creation_ts>
          <short_desc>Unexpected &apos;The local variable i may not have been initialized&apos; compile error</short_desc>
          <delta_ts>2012-04-30 07:24:39 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>3.8 M7</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Dani Megert">daniel_megert</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>akurtakov</cc>
    
    <cc>amj87.iitr</cc>
    
    <cc>ccc</cc>
    
    <cc>david_williams</cc>
    
    <cc>deepakazad</cc>
    
    <cc>jarthana</cc>
    
    <cc>john_arthorne</cc>
    
    <cc>kim.moir</cc>
    
    <cc>krzysztof.daniel</cc>
    
    <cc>markus_keller</cc>
    
    <cc>ob1.eclipse</cc>
    
    <cc>Olivier_Thomann</cc>
    
    <cc>pwebster</cc>
    
    <cc>remy.suen</cc>
    
    <cc>satyam.kandula</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
    
    <cc>szymon.ptaszkiewicz</cc>
    
    <cc>tjwatson</cc>
    
    <cc>webmaster</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="49218"
          type_id="1"
          status="+"
          setter="srikanth_sankaran"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2069895</commentid>
    <comment_count>0</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2012-02-23 07:23:09 -0500</bug_when>
    <thetext>JDT Core plug-in version: 3.8 M5 (org.eclipse.jdt.core_3.8.1.v20120125-1544).

The compiler reports an error in N20120222-2000 which is not expected:

http://download.eclipse.org/eclipse/downloads/drops/N20120222-2000/compilelogs/plugins/org.eclipse.ui.tests.harness_1.2.0.N20120222-2000/@dot.html

This is the code which caused the unexpected error.

	public static void pressKeyCodeCombination(Display display, int[] keyCodes,
			boolean runEventQueue) {
		for (int i = 0; i &lt; keyCodes.length; i++)
			keyCodeDown(display, keyCodes[i], runEventQueue);
		for (int i = keyCodes.length - 1; i &gt;= 0; i--)
			keyCodeUp(display, keyCodes[i], runEventQueue);
	}

For used compiler options and other details, see:
http://download.eclipse.org/eclipse/downloads/drops/N20120222-2000/compilelogs/plugins/org.eclipse.ui.tests.harness_1.2.0.N20120222-2000/@dot.xml


I tried to reproduce it with 3.8 M5 and N20120222-2000, but no &quot;luck&quot;. What worries me, is that no error was reported on the same source for previous N-builds.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2069916</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-02-23 07:53:09 -0500</bug_when>
    <thetext>Worrisome, indeed.

When I first saw this I couldn&apos;t find which version JDT/Core was used, so...

&gt; JDT Core plug-in version: 3.8 M5 (org.eclipse.jdt.core_3.8.1.v20120125-1544).

... that would be 3.8M5.
But using that I have no &quot;luck&quot; either.

Even using the exact preferences from http://git.eclipse.org/c/platform/eclipse.platform.ui.git/plain/tests/org.eclipse.ui.tests.harness/.settings/org.eclipse.jdt.core.prefs didn&apos;t help.

&quot;hardware failure&quot; ;-/</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2073836</commentid>
    <comment_count>2</comment_count>
    <who name="Carl Anderson">ccc</who>
    <bug_when>2012-03-01 13:56:02 -0500</bug_when>
    <thetext>We&apos;re seeing the same sorts of issues with the WTP build, along with some CodeCannotBeReached &quot;errors&quot;.  In every instance, it is a false positive, and does not repeat in the next build.

Some examples (which will be deleted in a few days):

http://build.eclipse.org/webtools/committers/wtp4x-R3.4.0-I/20120301032607/I-3.4.0-20120301032607/testcompilelogs/plugins/org.eclipse.wtp.releng.tools_1.2.1.v201103080400/wtpRelengTools.jar.bin.html

1. ERROR: UninitializedLocalVariable

The local variable amountRead may not have been initialized

ResultsSummaryGenerator.java :

580 : while (amountRead != -1);

The lines of code in question begin with:

int amountRead = -1;

And:

http://build.eclipse.org/webtools/committers/wtp4x-R3.4.0-I/20120301163247/I-3.4.0-20120301163247/compilelogs/plugins/org.eclipse.wst.validation_1.2.400.v201202090400/@dot.html

1. ERROR: CodeCannotBeReached

Unreachable code

ValidationConfiguration.java :

95 : return buffer.toString(); 

That is a very short method, with that line being the only return, no throws, and only a simple for loop before it.

We were using Eclipse 3.8 M4, and are now using Eclipse 3.8 I20120228-0800, but we still encounter these random issues.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2073979</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-01 16:51:00 -0500</bug_when>
    <thetext>Random compiler errors that disappear on the next build without relevant source changes are very irritating. I haven&apos;t seen anything like that.

If there is non-determinism, that would likely hint at a concurrency issue.

The relevant information is stored in instances of UnconditionalFlowInfo. Normally, these instances are short lived and never stored in any fields, so visibility across threads is unlikely.
An exception got recently introduced: bug 359334 introduced the field BlockScope.finallyInfo, which means that this one flow info is now visible for the life time of a BlockScope, which in turn is tied to the life time of an AbstractMethodDeclaration.
Ergo, should an AbstractMethodDeclaration ever be shared across threads this could possibly affect this one flow info, too. But if we get so far, concurrency related havoc on flow info still seems much more unlikely than on any other object inside the compiler.

I have no idea, how the same AST would be accessed concurrently. Can this ever be triggered?

Other potential sources for semi-non-determinism:
- memory addresses contributing to hashCode?
  I don&apos;t see any hashtables in the neighborhood of flow analysis,
  so this isn&apos;t a very hot track either.
- JIT??

That kind of issue has been observed with 3.8 M4, M5 and the most recent integration build, where the most recent symptom is (related but) slightly different.

Maybe we should also collect data on which JVM the bug was observed...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2074078</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-01 21:42:15 -0500</bug_when>
    <thetext>Satyam, could you study this in detail and identify some scenarios/evolve
some hypotheses in conjunction with Stephan ? This is very worrisome.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2074079</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-01 21:54:18 -0500</bug_when>
    <thetext>The first instance of the problem seems to have been
with N20120110-2000, where there were some bogus unreachable
code diagnostics from 


http://git.eclipse.org/c/equinox/rt.equinox.p2.git/tree/bundles/org.eclipse.equinox.p2.repository.tools/src/org/eclipse/equinox/p2/internal/repository/comparator/java/Disassembler.java</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2074083</commentid>
    <comment_count>6</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-03-01 22:35:15 -0500</bug_when>
    <thetext>(In reply to comment #3)
It is interesting to see that the spurious errors in both WTP and SDK are similar.

Stephan, nice explanation of the possible cause of errors. Here are some of my comments on this. 

- Concurrency related problems.
 I believe only the compiler component is used in both the cases, and if so there could be hardly any concurrency issues. I will need to confirm this. 

- Hashtable 
  I don&apos;t understand this.

- JIT:
  This does seem to fit. As the errors are happening probably at the same place in WTP and SDK, this is likely possible. 

Kim, Can you confirm if the build would have used Java 7 in N20120110-2000 and N20120222-2000? Do we know the versions in this case? 
Carl, Can you confirm if your build uses Java 7 and if so, which version.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2074091</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-02 00:20:34 -0500</bug_when>
    <thetext>(In reply to comment #6)

&gt; Kim, Can you confirm if the build would have used Java 7 in N20120110-2000 and
&gt; N20120222-2000? Do we know the versions in this case? 
&gt; Carl, Can you confirm if your build uses Java 7 and if so, which version.

Just curious - why are you zeroing in on JVM7 ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2074116</commentid>
    <comment_count>8</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2012-03-02 01:49:43 -0500</bug_when>
    <thetext>WTP (and, I think platform) do use &quot;parallelCompilation&quot; so think it could be a thread-related problem. In one of our build.properties files, we have (complete with original comments :):

# Properties introduced in 3.5 M3 (PDE base builder R35_M2). See
# http://aniefer.blogspot.com/2008/10/sorting-bundles-and-parallel.html

flattenDependencies=true
parallelCompilation=true

We (WTP) don&apos;t use VM7 to run the compiler ... we do use an IBM VM ... I&apos;d have to dig to figure out which if 5 or 6 (I think 6) and which version ... but, my money&apos;s on the concurrency :) FYI we do use the 32 bit VM even though running on the Eclipse Foundation&apos;s 64 bit hardware, in case that&apos;d matter.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2074118</commentid>
    <comment_count>9</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-03-02 01:55:28 -0500</bug_when>
    <thetext>Thanks David, this atleast rules out JIT problems in Java7. Will try to see if see there could be some issues with parallel compilation.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2074123</commentid>
    <comment_count>10</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-02 02:03:57 -0500</bug_when>
    <thetext>Thanks David, if you happen to remember any recent (last 3-4 months) 
build environment or test  environment changes, let us know.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2074130</commentid>
    <comment_count>11</comment_count>
      <attachid>211937</attachid>
    <who name="David Williams">david_williams</who>
    <bug_when>2012-03-02 02:18:33 -0500</bug_when>
    <thetext>Created attachment 211937
example of parallel compilation file

This file would not literally have been from the build that had a failure (we don&apos;t keep them around) but assume would be identical to it. One odd failure we saw was in 

org.eclipse.wtp.releng.tools

(line 21)

But, the file shows threadsPerProcessor=&apos;3&apos; (we don&apos;t change the default) but fairly large number of parallel groups.) 

I add this file just as a concrete illustration ... doubt its of any practical value in reproducing or tracking down. 

I don&apos;t recall any changes to hardware or environment, but Carl might remember better than I ... I&apos;m just commenting since I&apos;m up late; to take advantage of time zone differences :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2074297</commentid>
    <comment_count>12</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-02 08:16:24 -0500</bug_when>
    <thetext>(In reply to comment #6)
&gt; - Hashtable 
&gt;   I don&apos;t understand this.

The semi-non-deterministic behavior could potentially be caused, e.g., by iterating over a hashtable, in which case the memory addresses of contained objects could - via hashCode() - influence the order of elements. 
Just a theory.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2074301</commentid>
    <comment_count>13</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-02 08:17:46 -0500</bug_when>
    <thetext>(In reply to comment #12)
&gt; The semi-non-deterministic behavior

I guess &quot;quasi-non-deterministic&quot; is the term I was searching for :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2074313</commentid>
    <comment_count>14</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-02 08:32:17 -0500</bug_when>
    <thetext>Following up on the concurrency hypothesis:

- isn&apos;t each Compiler instance uniquely connected to one ProcessTaskManager?
  =&gt; Is there any chance for any instances (of any relevant type) to be shared
  among several concurrent ProcessTaskManagers??

- is there any static field in the entire compiler that could leak relevant
  state to another thread?

From the top of my head I&apos;d answer &quot;no&quot; to both questions. But if concurrency were the culprit, we&apos;d need to find at least one &quot;yes&quot;, hmm...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2074765</commentid>
    <comment_count>15</comment_count>
      <attachid>212011</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-02 18:45:50 -0500</bug_when>
    <thetext>Created attachment 212011
Cleanup for field finallyInfo

The field BlockScope.finallyInfo mentioned in comment 3 could indeed use some cleanup. The patch simply nulls the field when it is no longer needed.

Should concurrent access to any FlowInfo be involved in this bug, then the patch could indeed help to confine those objects to a very short life cycle.

Still we don&apos;t have any specific theory, how this could happen.

On another track, since we observe an inconsistency/data loss between
  flowInfo.markAsDefinitelyAssigned(localBinding);
and
  flowInfo.isDefinitelyAssigned(localBinding)
also any confusion of localBinding (or its .id) could cause this kind of havoc.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2074931</commentid>
    <comment_count>16</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2012-03-03 16:04:52 -0500</bug_when>
    <thetext>(In reply to comment #15)

&gt; Still we don&apos;t have any specific theory, how this could happen.

I&apos;m not exactly sure what you mean by this (&quot;no theory&quot;), and have not looked at the complete code (just the patch snippet), but, I&apos;m wondering ... if you are saying multiple threads can read/write this field, if it might be a case where the &quot;volatile&quot; keyword is needed. I&apos;ve heard conflicting things about &quot;volatile&quot;, that&apos;s its usually not required, usually doesn&apos;t do what you think it would, and usually just slows things down ... but ... it does seem required in some threading issues? 

http://www.javamex.com/tutorials/synchronization_volatile.shtml

I myself know just enough about threading to be dangerous (to quote John D. :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2075124</commentid>
    <comment_count>17</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-03-05 05:27:58 -0500</bug_when>
    <thetext>(In reply to comment #12)
&gt; (In reply to comment #6)
&gt; &gt; - Hashtable 
&gt; &gt;   I don&apos;t understand this.
&gt; 
&gt; The semi-non-deterministic behavior could potentially be caused, e.g., by
&gt; iterating over a hashtable, in which case the memory addresses of contained
&gt; objects could - via hashCode() - influence the order of elements. 
&gt; Just a theory.
Thanks for the info.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2075128</commentid>
    <comment_count>18</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-03-05 05:32:43 -0500</bug_when>
    <thetext>(In reply to comment #15)
&gt; Created attachment 212011 [details]
&gt; Cleanup for field finallyInfo.
I doubt if this could help, but the changes look good.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2075163</commentid>
    <comment_count>19</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-05 06:39:12 -0500</bug_when>
    <thetext>(In reply to comment #16)
&gt; (In reply to comment #15)
&gt; 
&gt; &gt; Still we don&apos;t have any specific theory, how this could happen.
&gt; 
&gt; I&apos;m not exactly sure what you mean by this (&quot;no theory&quot;), and have not looked
&gt; at the complete code (just the patch snippet), but, I&apos;m wondering ... if you
&gt; are saying multiple threads can read/write this field,

I meant to say: I have no idea how *any* objects in the neighborhood of the problem could ever be shared among threads. But *even if* so, any FlowInfo instances are among the most short-lived and never-stored (with this single exception) objects.

&gt; if it might be a case where the &quot;volatile&quot; keyword is needed. 

Well, I recently had one of those &quot;impossible bugs&quot; where synchronization looked complete - until you read about the Java memory model. But that&apos;s a different story: you know about concurrency, you have protected your code via &quot;synchronized&quot; and still field access gives funny results.

In this bug we have to find the trick how sharing objects across thread could become possible in the first place. If we don&apos;t find that we have no chance of understanding the problem as a concurrency issue.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2075231</commentid>
    <comment_count>20</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2012-03-05 08:45:04 -0500</bug_when>
    <thetext>(In reply to comment #8)
&gt; # Properties introduced in 3.5 M3 (PDE base builder R35_M2). See
&gt; # http://aniefer.blogspot.com/2008/10/sorting-bundles-and-parallel.html
&gt; 
&gt; flattenDependencies=true
&gt; parallelCompilation=true
In order to track it down, it would be good to know if this is a new issue in the compiler or if this is an old issue that can now be visible because of these new settings during the compilation.

Would it be possible to patch the build infrastructure to use an old compiler with these settings ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2075810</commentid>
    <comment_count>21</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-06 07:13:15 -0500</bug_when>
    <thetext>(In reply to comment #18)
&gt; (In reply to comment #15)
&gt; &gt; Created attachment 212011 [details]
&gt; &gt; Cleanup for field finallyInfo.
&gt; I doubt if this could help, but the changes look good.

I agree. If anything, making this field thread local would have been
a more &quot;appropriate&quot; fix.

Kim, we are going to need some help on this from you - could you pin
down the exact build environment compiler version used to build
N20120222-2000 and N20120110-2000.

Likewise David and Carl, we need the exact version of the build
environment compiler using which these problems were observed.

Until we pin that down the picture could be confusing, but here
is some analysis: 

In the disassembler case, we can make some assertions regarding
some intermediate steps that &quot;must have happened&quot;:

Here is the concerned client code:

	switch (c) {
	    case &apos;\b&apos; :
		buffer.append(&quot;\\b&quot;); // &lt;&lt;----ALL is well here 
		break;  // &lt;&lt;&lt;&lt; Unreachable code 

Here is an extract of the relevant code from
SwitchStatement#AnalyseCode:

for (int i = 0, max = this.statements.length; i &lt; max; i++) {
    Statement statement = this.statements[i];
 
    ...
    ...

    if ((complaintLevel = statement.complainIfUnreachable(caseInits, this.scope, complaintLevel, true)) &lt; Statement.COMPLAINED_UNREACHABLE) {
	caseInits = statement.analyseCode(this.scope, switchContext, caseInits);
	...
        ...
    }
}

The only way we would have reported a &quot;Unreachable code&quot; error at
the &quot;break;&quot; statement is if the analyseCode invocation on the
message send marked its return flowinfo value as UNREACHABLE.

Now MessageSend#analyzeCode returns its argument flowInfo (which
is known not to be UNREACHABLE as otherwise we would have complained
on the message send itself), after possibly modifying itself at 4
places.

(1) flowInfo = this.receiver.analyseCode(currentScope, flowContext, flowInfo, nonStatic).unconditionalInits();

(2) flowInfo = flowInfo.mergedWith(assertInfo.nullInfoLessUnconditionalCopy()).
addInitializationsFrom(assertWhenTrueInfo.discardInitializationInfo()); 

(3) flowInfo = this.arguments[i].analyseCode(currentScope, flowContext, flowInfo).unconditionalInits();

(4) flowInfo = FakedTrackingVariable.markPassedToOutside(currentScope, argument, flowInfo, false);

Of these 4 modifications to the input flowInfo, (1) and (3) are
very old and can be discounted. Likewise (2) was introduced very recently
well after the problems were observed.

So it would appear the smoking gun points to (4).

While I say this &quot;must have happened&quot;, looking at HEAD as well as looking
at some past revisions of concerned files, it is unclear to me how &quot;this
which must have happend could have happened&quot;. 

Hence it is absolutely imperative we reconstruct the build environment
compiler as a source project and then ask questions about how it
could have come to pass that flowinfo at a certain point described
it as being unreachable while analyzing a message send.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2075849</commentid>
    <comment_count>22</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-06 08:02:32 -0500</bug_when>
    <thetext>(In reply to comment #21)

&gt; Of these 4 modifications to the input flowInfo, (1) and (3) are
&gt; very old and can be discounted. Likewise (2) was introduced very recently
&gt; well after the problems were observed.
&gt; 
&gt; So it would appear the smoking gun points to (4).

A more open line of inquiry would be to just eliminate (2) and ask
how (1) or (3) or (4) could have resulted in an unreachable status
for the break statement and what non-deterministic agent could have
caused it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2075933</commentid>
    <comment_count>23</comment_count>
    <who name="Carl Anderson">ccc</who>
    <bug_when>2012-03-06 09:58:22 -0500</bug_when>
    <thetext>The uninitialized local variable was built with Eclipse 3.8 M4.

The unreachable code error was built with Eclipse 3.8 I20120228-0800.

Is that specific enough?  Or do you need specific plugin versions or something else?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2076004</commentid>
    <comment_count>24</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-06 10:59:29 -0500</bug_when>
    <thetext>(In reply to comment #23)

&gt; Is that specific enough?  Or do you need specific plugin versions or something
&gt; else?

Thanks, this is good enough - sorry I see that you have already provided
this in comment#2.

Would it be possible to attach 

ResultsSummaryGenerator.java
ValidationConfiguration.java

here ? TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2076138</commentid>
    <comment_count>25</comment_count>
      <attachid>212154</attachid>
    <who name="Carl Anderson">ccc</who>
    <bug_when>2012-03-06 14:05:05 -0500</bug_when>
    <thetext>Created attachment 212154
ResultsSummaryGenerator</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2076146</commentid>
    <comment_count>26</comment_count>
      <attachid>212156</attachid>
    <who name="Carl Anderson">ccc</who>
    <bug_when>2012-03-06 14:14:00 -0500</bug_when>
    <thetext>Created attachment 212156
ValidationConfiguration</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2076289</commentid>
    <comment_count>27</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-06 19:55:19 -0500</bug_when>
    <thetext>(In reply to comment #26)
&gt; Created attachment 212156 [details]
&gt; ValidationConfiguration


Thanks. Very very interestingly, we have the same buffer.append
method call here as in the disassembler case - so all preliminary
analysis done in comment#21 should hold true:

Here is the method:

public static String getEnabledElementsAsString(ValidatorMetaData[] elements) {
	StringBuffer buffer = new StringBuffer();
	for (ValidatorMetaData vmd : elements) {
		buffer.append(vmd.getValidatorUniqueName());
		buffer.append(ConfigurationConstants.ELEMENT_SEPARATOR);
	}
	return buffer.toString(); // &lt;&lt;&lt;---- UNREACHABLE CODE ERROR HERE
}

Carl, one more question: what is the type of ConfigurationConstants.ELEMENT_SEPARATOR ? (in the disassembler case the
argument to append call was a string literal)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2076322</commentid>
    <comment_count>28</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-07 00:16:04 -0500</bug_when>
    <thetext>(In reply to comment #21)

&gt; Now MessageSend#analyzeCode returns its argument flowInfo (which
&gt; is known not to be UNREACHABLE as otherwise we would have complained
&gt; on the message send itself), after possibly modifying itself at 4
&gt; places.

That ignores the places where the object is address exposed, so we
need to look at all places where the argument flowinfo was passed
around. Still this looks like a promising line of inquiry to me.

Consider that before the invocation of MessageSend.analyzeCode,
things were just fine and were broken just after ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2076331</commentid>
    <comment_count>29</comment_count>
    <who name="Carl Anderson">ccc</who>
    <bug_when>2012-03-07 00:48:00 -0500</bug_when>
    <thetext>(In reply to comment #27)

&gt; Carl, one more question: what is the type of
&gt; ConfigurationConstants.ELEMENT_SEPARATOR ? (in the disassembler case the
&gt; argument to append call was a string literal)

public interface ConfigurationConstants {
String ELEMENT_SEPARATOR = &quot;;&quot;; //$NON-NLS-1$</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2076371</commentid>
    <comment_count>30</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-07 03:14:35 -0500</bug_when>
    <thetext>(In reply to comment #28)

&gt; Consider that before the invocation of MessageSend.analyzeCode,
&gt; things were just fine and were broken just after ...

I stepped through the code trying to imagine what could go wrong and
drew a blank. This one is going to be a tough nut to crack. Even as
we consider various approaches, we should also look into whether we
want to instrument the compiler to gather some data - the unreachable
code problem looks way more amenable than the uninitialized variable
problem.

Given something goes wrong in MessageSend.analyzeCode, we can check
after every use of flowinfo (13 of them) to see if it has been polluted
already (is DEAD_END) and if so log/print a message.

What other data would we want ? 

We need to carefully think about it - we have limited to enable this,
and have it running before we will have to remove it for M7 or so.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2077076</commentid>
    <comment_count>31</comment_count>
    <who name="Krzysztof Daniel">krzysztof.daniel</who>
    <bug_when>2012-03-08 02:27:48 -0500</bug_when>
    <thetext>*** Bug 372944 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2077082</commentid>
    <comment_count>32</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-03-08 02:49:46 -0500</bug_when>
    <thetext>(In reply to comment #31)
&gt; *** Bug 372944 has been marked as a duplicate of this bug. ***
Umm.. one more unitialized bug again coming from a for loop. While Srikanth is exploring instrumentation from the &apos;dead code&apos; view, I will explore instrumentation from this point of view.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2077124</commentid>
    <comment_count>33</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-08 04:43:58 -0500</bug_when>
    <thetext>@Override
	public String toString() {
		StringBuffer buf= new StringBuffer();
		for (int i= 0; i &lt; fParts.length; i++) {
			buf.append(fParts[i].length());
			buf.append(&apos;,&apos;);
			buf.append(fParts[i]);
		}
		return buf.toString();
	}


is the concerned method from bug 372944. 

So here too, we have StringBuffer and append call, Just after the append call
sonmething has gone wrong !!!!!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2077166</commentid>
    <comment_count>34</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-03-08 05:55:54 -0500</bug_when>
    <thetext>(In reply to comment #33)
&gt;[..]
&gt; So here too, we have StringBuffer and append call, Just after the append call
&gt; sonmething has gone wrong !!!!!

The point (4) in comment 21 looks closer to the culprit now, since StringBuffer is a resource, I guess.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2077187</commentid>
    <comment_count>35</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-08 06:50:57 -0500</bug_when>
    <thetext>(In reply to comment #34)
&gt; (In reply to comment #33)
&gt; &gt;[..]
&gt; &gt; So here too, we have StringBuffer and append call, Just after the append call
&gt; &gt; sonmething has gone wrong !!!!!
&gt; 
&gt; The point (4) in comment 21 looks closer to the culprit now, since StringBuffer
&gt; is a resource, I guess.

Actually it is not a resource and also (4) from comment#21 gets short
circuited internally for the most part for some of the failing cases.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2077203</commentid>
    <comment_count>36</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-08 08:01:57 -0500</bug_when>
    <thetext>(In reply to comment #33)
&gt; @Override
&gt;     public String toString() {
&gt;         StringBuffer buf= new StringBuffer();
&gt;         for (int i= 0; i &lt; fParts.length; i++) {
&gt;             buf.append(fParts[i].length());
&gt;             buf.append(&apos;,&apos;);
&gt;             buf.append(fParts[i]);

Since we don&apos;t complain about the use of i in buf.append(fParts[i])
it tells us that the flowinfo was kosher at the time of the call to

flowInfo = this.arguments[i].analyseCode(currentScope, flowContext, flowInfo).unconditionalInits();

in  MessageSend.analyzeCode.

Either this call &quot;corrupted&quot; it after it made of the kosher data and
thereby polluting the flowinfo lhs variable or some subsequent use
of flowinfo in MessageSend.analyzeCode did it.

Subsequent uses:

(1) flowInfo = FakedTrackingVariable.markPassedToOutside(currentScope, this.arguments[i], flowInfo, false);

I cannot see how this can cause a problem as most of the code is
short circuited and is effective only for single name references
or allocation expressions - fParts[i] is neither.

(2) analyseArguments(currentScope, flowContext, flowInfo, this.binding, this.arguments);

This should have a bearing only if the method parameters are annotated
with null annotations - the method is from JRE and is not annotated.

(3) manageSyntheticAccessIfNecessary(currentScope, flowInfo);

Again, I cannot see how this can have any bearing.


On another note: both this test case and the one from Results
SummaryGenerator exhibit another interesting commonality: the
last line of the loop contains a reference which we don&apos;t
complain about, but we complain about loop terminating check
references. Perhaps there is something wrong in the code that
merges flow data - though what would explain the non-determinism
is beyond comprehension at the moment.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2077205</commentid>
    <comment_count>37</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-08 08:04:59 -0500</bug_when>
    <thetext>(In reply to comment #36)

&gt; On another note: both this test case and the one from Results
&gt; SummaryGenerator exhibit another interesting commonality: the
&gt; last line of the loop contains a reference which we don&apos;t
&gt; complain about, but we complain about loop terminating check
&gt; references. Perhaps there is something wrong in the code that
&gt; merges flow data - though what would explain the non-determinism
&gt; is beyond comprehension at the moment.

i.e in

int amountRead = -1;
do {
    int amountRequested = Math.max(stream.available(), DEFAULT_READING_SIZE);
    if (contentsLength + amountRequested &gt; contents.length) {
	System.arraycopy(contents, 0, contents = new byte[contentsLength + amountRequested], 0, contentsLength);
    }

    amountRead = stream.read(contents, contentsLength, amountRequested);

    if (amountRead &gt; 0) {
        // remember length of contents
	contentsLength += amountRead;
    }
} while (amountRead != -1);

we don&apos;t complain about the last use of amountRead inside the loop,
but we complain about the use inside the while check.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2077305</commentid>
    <comment_count>38</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-08 10:55:57 -0500</bug_when>
    <thetext>(In reply to comment #8)
&gt; WTP (and, I think platform) do use &quot;parallelCompilation&quot; so think it could be a
&gt; thread-related problem. In one of our build.properties files, we have (complete
&gt; with original comments :):
&gt; 
&gt; # Properties introduced in 3.5 M3 (PDE base builder R35_M2). See
&gt; # http://aniefer.blogspot.com/2008/10/sorting-bundles-and-parallel.html
&gt; 
&gt; flattenDependencies=true
&gt; parallelCompilation=true
&gt; 

Does somebody know what exactly these setting do ? My naive understanding
is that these flags enable ANT to launch parallel builds, if so there are
multiple instances of the compiler running on separate VMs ? This would
not raise the sort of spurious data modification problems we are seeing ?

&gt; but, my
&gt; money&apos;s on the concurrency :) 

So is mine - only we are stumped at the moment trying to come up with
a scenario where the data would have an unanticipated agent modifying it.

Continuing to investigate ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2077617</commentid>
    <comment_count>39</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-08 18:59:41 -0500</bug_when>
    <thetext>Sorry, I don&apos;t have much time to investigate these days, but my gut feeling says: if concurrency succeeds to creep into the compiler the bug patterns could be much more diverse than what we are seeing. The internal code is not designed for thread safety so every single object in the compiler is vulnerable as soon as some of these are shared between threads. Why only hit on the flowInfo?

I&apos;d like to put some money on JIT.

We don&apos;t have much info in this category, only that David reported an IBM JVM 5 or 6. Doesn&apos;t sound like sufficient data to rule out a JIT bug.

A JIT bug would fit the pattern that perhaps a specific method (some flowInfo manipulation) is affected - iff JIT-optimized. Perhaps some project who observes the bug &quot;frequently&quot; could disable JIT for the JVM running the compiler for a while?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2077618</commentid>
    <comment_count>40</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-08 19:22:02 -0500</bug_when>
    <thetext>(In reply to comment #39)
&gt; Sorry, I don&apos;t have much time to investigate these days, but my gut feeling
&gt; says: if concurrency succeeds to creep into the compiler the bug patterns could
&gt; be much more diverse than what we are seeing. The internal code is not designed
&gt; for thread safety so every single object in the compiler is vulnerable as soon
&gt; as some of these are shared between threads. Why only hit on the flowInfo?

Indeed, none of the methods in LookupEnvironment is synchronized or otherwise
written to ensure for serial access. AND for the record, we have a single thread
running compiler processing tasks, so these data structures that are getting
stomped on are not being accessed in a concurrent fashion at all.

&gt; A JIT bug would fit the pattern that perhaps a specific method (some flowInfo
&gt; manipulation) is affected - iff JIT-optimized. Perhaps some project who
&gt; observes the bug &quot;frequently&quot; could disable JIT for the JVM running the
&gt; compiler for a while?

What would this show ? Absence of sighting is not going to be good enough ?
Alternately, is there a way to force the VM to always jit optimize a class
or set of classes ? That way we can force the bug to manifest ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2077621</commentid>
    <comment_count>41</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-08 19:29:10 -0500</bug_when>
    <thetext>(In reply to comment #8)

&gt; We (WTP) don&apos;t use VM7 to run the compiler ... we do use an IBM VM ... I&apos;d have
&gt; to dig to figure out which if 5 or 6 (I think 6) and which version ... but, my
&gt; money&apos;s on the concurrency :) FYI we do use the 32 bit VM even though running
&gt; on the Eclipse Foundation&apos;s 64 bit hardware, in case that&apos;d matter.

David, could you please dig up this information for us ? The exact version
of the VM + some deployment history (most recent change) would help.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2077622</commentid>
    <comment_count>42</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-08 19:30:10 -0500</bug_when>
    <thetext>Kim, likewise, could you post here the exact version of the VM used to
run the builds (not the tests) and its deployment date ? TIA,</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2077623</commentid>
    <comment_count>43</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-08 19:33:37 -0500</bug_when>
    <thetext>(In reply to comment #39)

&gt; A JIT bug would fit the pattern that perhaps a specific method (some flowInfo
&gt; manipulation) is affected - iff JIT-optimized. 

I guess there are multiple (at least more than one) translations involved
here too - translate and optimize based on how hot the code is - need to check
with the VM documentation.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2077631</commentid>
    <comment_count>44</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2012-03-08 20:24:26 -0500</bug_when>
    <thetext>A strategy to trigger a JIT bug could be to compile a file that already failed once over and over again. JITting is usually triggered by heavy usage of a method.

For an Oracle VM, you could run with -XX:+PrintCompilation to see the JITting:
http://www.oracle.com/technetwork/java/javase/tech/vmoptions-jsp-140102.html</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2077646</commentid>
    <comment_count>45</comment_count>
    <who name="Carl Anderson">ccc</who>
    <bug_when>2012-03-08 21:50:18 -0500</bug_when>
    <thetext>(In reply to comment #41)
&gt; (In reply to comment #8)
&gt; 
&gt; &gt; We (WTP) don&apos;t use VM7 to run the compiler ... we do use an IBM VM ... I&apos;d have
&gt; &gt; to dig to figure out which if 5 or 6 (I think 6) and which version ... but, my
&gt; &gt; money&apos;s on the concurrency :) FYI we do use the 32 bit VM even though running
&gt; &gt; on the Eclipse Foundation&apos;s 64 bit hardware, in case that&apos;d matter.
&gt; 
&gt; David, could you please dig up this information for us ? The exact version
&gt; of the VM + some deployment history (most recent change) would help.

I&apos;m not David, but I am the WTP Build guy, and I can answer this question- the Java that we use can be found at /shared/webtools/apps/ibm-java2-i386-50-SR12FP5 and the -fullversion reports:
java full version &quot;J2RE 1.5.0 IBM Linux build pxi32devifx-20110627 (SR12 FP5 )&quot;

(Note that the BREE for the plugins containing both of these files is 1.5)
We updated our Java levels on 2011-08-13</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2077651</commentid>
    <comment_count>46</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2012-03-08 22:19:17 -0500</bug_when>
    <thetext>(In reply to comment #38)
&gt; (In reply to comment #8)
&gt; &gt; WTP (and, I think platform) do use &quot;parallelCompilation&quot; so think it could be a
&gt; &gt; thread-related problem. In one of our build.properties files, we have (complete
&gt; &gt; with original comments :):
&gt; &gt; 
&gt; &gt; # Properties introduced in 3.5 M3 (PDE base builder R35_M2). See
&gt; &gt; # http://aniefer.blogspot.com/2008/10/sorting-bundles-and-parallel.html
&gt; &gt; 
&gt; &gt; flattenDependencies=true
&gt; &gt; parallelCompilation=true
&gt; &gt; 
&gt; 
&gt; Does somebody know what exactly these setting do ? My naive understanding
&gt; is that these flags enable ANT to launch parallel builds, if so there are
&gt; multiple instances of the compiler running on separate VMs ? This would
&gt; not raise the sort of spurious data modification problems we are seeing ?
&gt; 

No, not separate VM&apos;s, at least from Ant&apos;s point of view. Same VM. I think they control how PDE created the compile.&lt;featurename&gt; like I attached to comment 11. And ... now that I actually read about the &apos;parallel&apos; ant task ... 
http://ant.apache.org/manual/Tasks/parallel.html
it makes it sound like &quot;compiling&quot; is not something that should be parallelized?!! 

But, depends a little on the &quot;build.jar&quot; target. It might launch a separate VM, but doubt it ... compiling would take forever then! 

Maybe we&apos;ve just &quot;been lucky&quot; all these years, until some recent changes broke what little thread safety you had?  Even if separate instances of the &quot;Compiler class&quot; are created to compile each file (which would be my guess), from some snippets of your code, it sounds like you use some class (static) variables or methods? Such as in comment 21, you have 

flowInfo = FakedTrackingVariable.markPassedToOutside(currentScope,
argument, flowInfo, false);

Is FakedTrackingVariable.markPassedToOutside a static method? Sounds like it, from naming convention. If so, even multiple instances of compiler class (in same VM) would interfere with each other. That woudln&apos;t happen to be your first use of static methods, would it?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2077659</commentid>
    <comment_count>47</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2012-03-08 22:50:14 -0500</bug_when>
    <thetext>For what its worth, I&apos;ve skim read the &quot;build.jar&quot; PDE task and it doesn&apos;t appear to create a new VM, at least in no obvious way. Appears to just (eventually) call the build.xml file it creates for each bundle ... which compiles the source of that bundle, with an ant task similar to 

                &lt;!-- compile the source code --&gt;
                &lt;javac destdir=&quot;${build.result.folder}/@dot&quot; failonerror=&quot;${javacFailOnError}&quot; verbose=&quot;${javacVerbose}&quot; debug=&quot;${javacDebugInfo}&quot; includeAntRuntime=&quot;no&quot; bootclasspath=&quot;${bundleBootClasspath}&quot; source=&quot;${bundleJavacSource}&quot; target=&quot;${bundleJavacTarget}&quot; errorProperty=&quot;compilation.error.occured&quot;          &gt;
                        &lt;compilerarg line=&quot;${compilerArg}&quot; compiler=&quot;${build.compiler}&quot;/&gt;
                        &lt;classpath refid=&quot;@dot.classpath&quot; /&gt;
                        &lt;src path=&quot;src-catalog/&quot;                        /&gt;
                        &lt;src path=&quot;src-contentmodel/&quot;                   /&gt;
                        &lt;src path=&quot;src-validation/&quot;                     /&gt;
                        &lt;src path=&quot;src/&quot;                        /&gt;
                        &lt;src path=&quot;src-emfModelSynch/&quot;                  /&gt;
                        &lt;src path=&quot;src-search/&quot;                 /&gt;
                        &lt;compilerarg value=&quot;@${basedir}/javaCompiler...args&quot; compiler=&quot;org.eclipse.jdt.core.JDTCompilerAdapter&quot;                 /&gt;
                        &lt;compilerarg line=&quot;-log &amp;apos;${build.result.folder}/@dot${logExtension}&amp;apos;&quot; compiler=&quot;org.eclipse.jdt.core.JDTCompilerAdapter&quot;                      /&gt;
                &lt;/javac&gt;

(this happens to be for our xml.core bundle ... not one that&apos;s had any problems) ... I paste it in here to show how it all (sort of) comes down to 

compiler=&quot;org.eclipse.jdt.core.JDTCompilerAdapter&quot;

figured you might have first hand knowledge of that class? :) 
I assume it creates an _instance_ of the compiler? to use for that source? 

So, pretty sure we have multiple instances of the compiler class, each running in its own thread. So, not sure &quot;instances&quot; have to be thread safe ... but ... if this is your first use of static methods, such as FakedTrackingVariable.markPassedToOutside, then that might explain everything? 

I&apos;m obviously just making guesses based on names starting with capital letter. 

If you have always done that sort of thing ... maybe we have just been lucky for years?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2077666</commentid>
    <comment_count>48</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-03-08 23:10:40 -0500</bug_when>
    <thetext>(In reply to comment #47)
Thanks David for the build command. JDTCompilerAdapter is the entry point into ecj instead of using javac. The attribute fork is not set and hence it means the compilation is happening in the same process and hence there could be parallel threads.

FakedTrackingVariable.markPassedToOutside is a static method but doesn&apos;t cause any sharing of any data. They are no static,non-final fields.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2077684</commentid>
    <comment_count>49</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-09 00:08:39 -0500</bug_when>
    <thetext>(In reply to comment #44)
&gt; A strategy to trigger a JIT bug could be to compile a file that already failed
&gt; once over and over again. JITting is usually triggered by heavy usage of a
&gt; method.

Good point.

Very conveniently for us, the utility class
org.eclipse.jdt.launching/launching/org/eclipse/jdt/internal/launching/CompositeId.java referenced in https://bugs.eclipse.org/bugs/show_bug.cgi?id=372944 can be compiled all by itself with no dependencies etc.

Satyam, could you create a test based on this file where we would repeatedly
compile this file a few thousand times and see if anything shows up ?

We need to use the identical VM used by  bug 372944, I have asked for it
there.

With a bit of effort, we can isolate a smaller case for Disassembler.java 
too.

Satyam, could you look into this ? Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2077790</commentid>
    <comment_count>50</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-03-09 05:21:38 -0500</bug_when>
    <thetext>(In reply to comment #49)
&gt; Satyam, could you create a test based on this file where we would repeatedly
&gt; compile this file a few thousand times and see if anything shows up ?

This could be a better idea. I am trying to setup the complete build and having problems. I will try out this. Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2077965</commentid>
    <comment_count>51</comment_count>
    <who name="Eclipse Webmaster">webmaster</who>
    <bug_when>2012-03-09 10:28:26 -0500</bug_when>
    <thetext>Just to answer a question David asked:

There haven&apos;t been any hardware changes to build.eclipse.org since the original PPC box failed and was replaced.  

-M.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2077998</commentid>
    <comment_count>52</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-03-09 11:07:12 -0500</bug_when>
    <thetext>Hi David/Carl,  Can you please let us know the jvm options that you think the
build uses? Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2078019</commentid>
    <comment_count>53</comment_count>
    <who name="Kim Moir">kim.moir</who>
    <bug_when>2012-03-09 11:29:32 -0500</bug_when>
    <thetext>The 3.8 build doesn&apos;t actually run on Hudson.  It still runs on IBM hardware.  We are working on getting that running on foundation hardware.

The bootstrap script that actually starts the build is org.eclipse.releng.eclipsebuilder\bootstrap.sh in /cvsroot/eclipse

You can see that there are many JDKs that we use in the build to compile.  The these are the execution environments we use

linuxJdkArchive=jdks/jdk-1_5_0_22-fcs-bin-b03-linux-i586-09_oct_2009.zip
linuxJdkArchive14=jdks/jdk-1_4_2_14-fcs-bin-b05-linux-i586-14_mar_2007.zip
linuxJdkArchive16=jdks/1.6/jdk-6u17-fcs-bin-b04-linux-i586-11_oct_2009.zip
linuxppcJdkArchive=jdks/IBMJava2-SDK-1.4.2-10.0.ppc.tgz
linuxppcJdkArchive15=jdks/ibm-java2-sdk-5.0-6.0-linux-ppc.tgz
windowsJreArchive=jdks/jdk-1_4_2_16-fcs-bin-b05-windows-i586-16_sep_2007.zip
windows15JdkArchive=jdks/jdk-1_5_0_22-fcs-bin-b03-windows-i586-09_oct_2009.zip
windows16JdkArchive=jdks/1.6/jdk-6u17-fcs-bin-b04-windows-i586-11_oct_2009.zip
windows10FoundationArchive=jdks/weme-win-x86-foundation10_6.1.0.20060317-111429.zip
windows11FoundationArchive=jdks/weme-win-x86-ppro11_6.1.1.20061110-161633.zip

The bootclass paths are as follows

bootclasspath=&quot;$builderDir/jdk/win32/jdk1.4.2_16/jre/lib/rt.jar:$builderDir/jdk/win32/jdk1.4.2_16/jre/lib/jsse.jar:$builderDir/jdk/win32/jdk1.4.2_16/jre/lib/jce.jar&quot;
bootclasspath_15=&quot;$builderDir/jdk/win32_15/jdk1.5.0_22/jre/lib/rt.jar:$builderDir/jdk/win32_15/jdk1.5.0_22/jre/lib/jsse.jar:$builderDir/jdk/win32_15/jdk1.5.0_22/jre/lib/jce.jar&quot;
bootclasspath_16=&quot;$builderDir/jdk/win32_16/jdk6_17/jre/lib/rt.jar:$builderDir/jdk/win32_16/jdk6_17/jre/lib/jsse.jar:$builderDir/jdk/win32_16/jdk6_17/jre/lib/jce.jar&quot;
bootclasspath_foundation=&quot;$builderDir/jdk/win32_foundation/lib/jclFoundation10/classes.zip&quot;
bootclasspath_foundation11=&quot;$builderDir/jdk/win32_foundation11/lib/jclFoundation11/classes.zip&quot;


The  build itself is actually invoked with this VM
jdk/linux16/jdk6_17/jre/bin/java

And the execution environments are as follows when the build is invoked, see J2SE-1.5= for example

$builderDir/jdk/linux16/jdk6_17/jre/bin/java -Xmx500m -Declipse.p2.MD5Check=false -Dorg.eclipse.update.jarprocessor.pack200=$builderDir/jdk/linux/jdk1.5.0_22/bin -jar ../org.eclipse.releng.basebuilder/plugins/org.eclipse.equinox.launcher.jar -Dosgi.os=linux -Dosgi.ws=gtk -Dosgi.arch=ppc -application org.eclipse.ant.core.antRunner -Declipse.p2.MD5Check=false&quot; -q -buildfile buildAll.xml $mail $testBuild $compareMaps -DmapVersionTag=$mapVersionTag -DpostingDirectory=$postingDirectory -Dbootclasspath=$bootclasspath -DbuildType=$buildType -D$buildType=true -DbuildId=$buildId -Dbuildid=$buildId -DbuildLabel=$buildLabel -Dtimestamp=$timestamp -DmapCvsRoot=:ext:kmoir@dev.eclipse.org:/cvsroot/eclipse $skipPerf $skipTest $skipPack $tagMaps -DJ2SE-1.5=$bootclasspath_15 -DJ2SE-1.4=$bootclasspath -DCDC-1.0/Foundation-1.0=$bootclasspath_foundation -DCDC-1.1/Foundation-1.1=$bootclasspath_foundation11 -DOSGi/Minimum-1.2=$bootclasspath_foundation11  -DJavaSE-1.6=$bootclasspath_16 -DlogExtension=.xml $javadoc $updateSite $sign $repoCache -DgenerateFeatureVersionSuffix=true -Djava15home=$builderDir/jdk/linux/jdk1.5.0_22/jre -listener org.eclipse.releng.build.listeners.EclipseBuildListener&quot;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2078258</commentid>
    <comment_count>54</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-03-09 21:44:47 -0500</bug_when>
    <thetext>Kim, thank you for the info.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2078397</commentid>
    <comment_count>55</comment_count>
      <attachid>212432</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-11 12:11:41 -0400</bug_when>
    <thetext>Created attachment 212432
static non-final fields in jdt.core

(In reply to comment #48)
&gt; FakedTrackingVariable.markPassedToOutside is a static method but doesn&apos;t cause
&gt; any sharing of any data. They are no static,non-final fields.

This is correct for the immediate context of FakedTrackingVariable.

Out of curiosity I assembled a list of all static non-final fields in JDT/Core (attached, fields from &quot;Messages&quot; classes are omitted). None of these fields looked suspicious to me in terms of this bug, most are not part of the compiler actually. The closest I could see is UnconditionalFlowInfo.CoverageTestId. However, all access to this field is actually dead code (protected by the constant COVERAGE_TEST_FLAG).

On a lazy day we may want to check some of these, and make them final wherever possible.

Given the design of a single processing thread and also given the lack of static non-final fields in the vicinity of the bug, we don&apos;t have a theory how concurrency could possibly affect the compiler, right?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2078399</commentid>
    <comment_count>56</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-11 12:25:30 -0400</bug_when>
    <thetext>To follow up on the hypothesis of a JIT bug, I started thinking what kind of code change could possibly produce the observed behavior. I was flabbergasted by finding two almost identical methods in class Disassembler: escapeString and decodeStringValue, where the *second* occurrence triggered the bug, not the first.

If JIT is the culprit, a translation must have happened right while compiling this class (Disassembler.java). Or the minimal difference between both methods must have contributed to the bug. Either way there&apos;re really some odds at work!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2078460</commentid>
    <comment_count>57</comment_count>
    <who name="Deepak Azad">deepakazad</who>
    <bug_when>2012-03-11 23:14:24 -0400</bug_when>
    <thetext>http://dev.eclipse.org/mhonarc/lists/platform-releng-dev/msg19736.html

In I20120311-2000 there is a compile error in o.e.jdt.ui, but everything is fine in my workspaces (I checked in two distinct workspaces on 2 different machines). Also I do not see anything that has changed in this area for the last couple of days. 

Is this another instance of this bug, something else?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2078470</commentid>
    <comment_count>58</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-12 01:28:30 -0400</bug_when>
    <thetext>(In reply to comment #57)
&gt; http://dev.eclipse.org/mhonarc/lists/platform-releng-dev/msg19736.html

[...]

&gt; Is this another instance of this bug, something else?

For the record, this was a problem in build input and not another
instance of this problem.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2079085</commentid>
    <comment_count>59</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-12 18:37:49 -0400</bug_when>
    <thetext>For completeness I followed the Hashtable track:

The compiler contains a few locations that may iterate over a Set or a Map, in which case the order may be quasi non-deterministic.

E.g.:
- CompilationResult.getClassFiles() converts a map to an array.
- StackMapFrameCodeStream.getExceptionMarkers() iterates over a set - but then sorts the result.

However, both these seem to be way too late in the process for influencing the flow analysis.

Here&apos;s another one closer to the site of crime:
- FakedTrackingVariable.pickVarForReporting(Set, BlockScope, boolean)
Here we pick the first element from a Set. 
The method was added on 2012-01-15, i.e., later than N20120110-2000 when the bug was observed for the first time. Additionally, even this method is called too late (at the end of analyzing a block, or *after* reporting unreachable) for influencing the analysis towards this bug, I should say.

I scanned all Sets/Maps I could find in the compiler, but none locked like a hot track to me. =&gt; Still looking for a root cause of the observed non-determinism.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2079268</commentid>
    <comment_count>60</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-13 05:18:32 -0400</bug_when>
    <thetext>Bug 372944 comment 11 mentions that the error occurred as a flood of errors actually, which could be seen as an indication towards a JIT bug.

Shouldn&apos;t we ask people affected by this bug to add &quot;-proceedOnError&quot; to their compiler command lines to check if this will produce the same kind of flood?

Is there also an ant setting controlling whether compilation should stop after the first error?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2079283</commentid>
    <comment_count>61</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-13 05:43:16 -0400</bug_when>
    <thetext>(In reply to comment #60)

&gt; Shouldn&apos;t we ask people affected by this bug to add &quot;-proceedOnError&quot; to their
&gt; compiler command lines to check if this will produce the same kind of flood?

Satyam, please check the options used for SDK build to see what is the
setting for this ? We would expect it to be not in effect. Turning it on
to see if we see a flood of errors would help.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2079300</commentid>
    <comment_count>62</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-13 06:11:28 -0400</bug_when>
    <thetext>While attempting to reproduce locally against a Oracle VM, we should
try both the -server mode and -client mode. Some optimizations kick in
only in server mode and so some bugs show up only in server mode: e.g
http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5091921.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2079788</commentid>
    <comment_count>63</comment_count>
    <who name="Carl Anderson">ccc</who>
    <bug_when>2012-03-13 14:10:06 -0400</bug_when>
    <thetext>WTP just got hit with this in another build.  In the past, it was one error.  This time, it was 111,862 errors- it appears that we got into this state at the beginning, and that carried through to many, many compiles, across plugins and features.  I see:
UninitializedLocalVariable
UninitializedBlankFinalField
for the vast majority of these errors, and then other errors for files/plugins that build on top of these.  This is still using I20120228-0800 to build.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2079853</commentid>
    <comment_count>64</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-13 15:36:36 -0400</bug_when>
    <thetext>(In reply to comment #63)
&gt; WTP just got hit with this in another build.  In the past, it was one error. 
&gt; This time, it was 111,862 errors- it appears that we got into this state at the
&gt; beginning, and that carried through to many, many compiles, across plugins and
&gt; features.  I see:
&gt; UninitializedLocalVariable
&gt; UninitializedBlankFinalField
&gt; for the vast majority of these errors, and then other errors for files/plugins
&gt; that build on top of these.  This is still using I20120228-0800 to build.

This perfectly matches the observation from bug 372944 comment 11.

A JIT bug could nicely explain this: once a given method is badly &quot;optimized&quot;, it will consistently reproduce the same bug over and over.

Could you please check bug 372944 comment 12 for requests for additional info that might possibly help us? Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2079868</commentid>
    <comment_count>65</comment_count>
    <who name="Carl Anderson">ccc</who>
    <bug_when>2012-03-13 15:48:26 -0400</bug_when>
    <thetext>&gt; 
&gt; This perfectly matches the observation from bug 372944 comment 11.
&gt; 
&gt; A JIT bug could nicely explain this: once a given method is badly &quot;optimized&quot;,
&gt; it will consistently reproduce the same bug over and over.
&gt; 
&gt; Could you please check bug 372944 comment 12 for requests for additional info
&gt; that might possibly help us? Thanks.

Comment #45 has the JVM information that we are still using.  This is an IBM JVM, so I have not set the flags in question.  And our builds occur on the build.eclipse.org machine - I don&apos;t have its hardware specifications readily available, but Denis Roy could probably fill in the details.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2079893</commentid>
    <comment_count>66</comment_count>
    <who name="Eclipse Webmaster">webmaster</who>
    <bug_when>2012-03-13 16:17:08 -0400</bug_when>
    <thetext>Build.eclipse.org:

2 Intel Xeon e5540 Quad-core @ 2.53GHz
24 GB RAM
2 Internal HDD
2 Gigabit NICs

If you want something more specific I&apos;ll have to go digging.

-M.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2079895</commentid>
    <comment_count>67</comment_count>
    <who name="Carl Anderson">ccc</who>
    <bug_when>2012-03-13 16:19:00 -0400</bug_when>
    <thetext>Interesting- the next build only had one UninitializedLocalVariable.  The line
is different from others being evaluated here:
for (int i=0; i &lt; files.length; i++) {
It says that the i++ is the uninitialized local variable.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2079911</commentid>
    <comment_count>68</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-03-13 16:29:54 -0400</bug_when>
    <thetext>Stumbled across this to diagnose JIT failures - http://publib.boulder.ibm.com/infocenter/javasdk/v5r0/topic/com.ibm.java.doc.diagnostics.50/diag/tools/jitpd.html</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2079953</commentid>
    <comment_count>69</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-13 17:21:46 -0400</bug_when>
    <thetext>Satyam, have you collected a list of bug patterns in this field?

So far I can see:

(a) static final field with initializer: uninitialized blank final field

(b) increment in an old-style for loop: uninitialized local

(c) accessing any local var / arg, perhaps only after a throw/return
  (see bug 372944 comment 18): uninitialized local

(d) return or break statement: unreachable code
  (not sure what is the distinguishing feature in these cases..)

Can we match these patterns against VMs or anything?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2080090</commentid>
    <comment_count>70</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-14 02:46:05 -0400</bug_when>
    <thetext>(In reply to comment #69)
&gt; Satyam, have you collected a list of bug patterns in this field?

Just a quick note to inform stake holders that we are busy shipping
M6 this week. Once that is off the plate, this bug will be #1 priority
item for us and we should see faster progress on it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2080119</commentid>
    <comment_count>71</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-14 03:57:53 -0400</bug_when>
    <thetext>http://publib.boulder.ibm.com/infocenter/javasdk/v5r0/index.jsp?topic=%2Fcom.ibm.java.doc.diagnostics.50%2Fdiag%2Ftools%2Fjitpd.html

It would help if experimental builds of WTP could be undertaken
with ecj run on an IBM VM invoked as 

java -Xjit:verbose,optLevel=scorching 

and another time with:

java -Xjit:verbose,optLevel=noOpt

If this a translator/optimizer problem, we would expect the scorching setting
to make the failures deterministic and the noOpt setting to make the
failures go away.

Thanks for any help you are able to offer with this exercise.
We will also undertake similar experiments locally once M6 is cooked
and out of the door.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2080120</commentid>
    <comment_count>72</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-14 03:59:37 -0400</bug_when>
    <thetext>(In reply to comment #71)

&gt; java -Xjit:verbose,optLevel=noOpt

I don&apos;t know if the noOpt setting is the same as the -Xint option
documented here: http://publib.boulder.ibm.com/infocenter/javasdk/v5r0/index.jsp?topic=%2Fcom.ibm.java.doc.diagnostics.50%2Fdiag%2Ftools%2Fjitpd.html

In any case, the scorching setting is more important.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2080122</commentid>
    <comment_count>73</comment_count>
      <attachid>212620</attachid>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-03-14 04:02:33 -0400</bug_when>
    <thetext>Created attachment 212620
Table of the problems

Hi Stephan, Here is the table of the problems we have been seeing.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2081098</commentid>
    <comment_count>74</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2012-03-15 07:56:59 -0400</bug_when>
    <thetext>The fact that this problem occurs on IBM and Oracle VMs doesn&apos;t really speak for a JIT bug. AFAIK, the JIT compilers of these VMs are completely separate implementations, so it&apos;s unlikely that they share the same bug.

I think you should have another look at hashCode()/equals() implementations in lookup environments (flow analysis, bindings, ...). A possible scenario that could lead to the observed effects:
- a hashCode() implementation is not completely deterministic (e.g. depends on Object#hashCode())
- an equals() implementation is buggy
- the equals() is only used for HashMap/Set lookups
=&gt; Now, in rare cases where the (hashCode() % mapSize) collide, objects end up in the same bucket and can be confused. If equals() is not often used outside of HashMaps, this can go undetected for a long time.

A way to make this more likely to occur is to make hashCode() return a constant. That is legal but will kill performance by turning all O(1) operations into O(n).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2081147</commentid>
    <comment_count>75</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-15 09:30:26 -0400</bug_when>
    <thetext>(In reply to comment #74)
&gt; The fact that this problem occurs on IBM and Oracle VMs doesn&apos;t really speak
&gt; for a JIT bug. AFAIK, the JIT compilers of these VMs are completely separate
&gt; implementations, so it&apos;s unlikely that they share the same bug.

I agree that it calls for too much of a co-incidence for a very similar bug
to show up in two VMs, but stranger things have been known to happen. But
while we continue on this line of inquiry, we will not close our minds to
other parallel tracks that we can explore.

Both on this bug and its &quot;duplicate&quot; we have asked for some specific 
experiments to be done which we feel will decisively rule out the 
JIT angle if that is indeed not the culprit.

&gt; I think you should have another look at hashCode()/equals() implementations in
&gt; lookup environments (flow analysis, bindings, ...). A possible scenario that
&gt; could lead to the observed effects:

Stephan/Ayush, does this ring a bell as far as the flow analysis code
that underwent changes foe 3.8 are concerned ?

In my debugging exercises, I found the window at which the flip from
good to bad happens to be extremely narrow and the object that gets
corrupted all of a sudden is simply being passed around to various
methods (i.e is not stored and retrieved) - Nevertheless, what you
outline is a worthy hypothesis to check out.

It would also be a worthwhile exercise to turn off resource leaks analysis
and see if the problem still shows up (assuming that all significant code
chunks have been protected by an option-check). (3.8 changed the flow analysis
in two major ways : (a) null annotations support which is default off and
(b) leaks analysis which is default on) - I would wait for the jit
thesis to be disproved first though. We do have the catch that not sighting
the problem is proof of the problem being fixed - given how sporadic it
is proving to be.

The other point is we also need to explain the flood of error messages
that we get in some of the reports - These spurious problems are
reported across several different files, several different methods.
If the flow info data for a method gets corrupted when we are analyzing
well inside a method, I would not expect cascading errors in completely 
different methods or files: This particular behavior would nicely be
explained by a JIT bug - once some heavily used method got badly
optimized, most/many/all subsequent uses of the method  could trigger
an additional instance of the problem.

All that said, the skepticism you express is healthy and justified.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2081151</commentid>
    <comment_count>76</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-15 09:32:34 -0400</bug_when>
    <thetext>(In reply to comment #75)

&gt; thesis to be disproved first though. We do have the catch that not sighting
&gt; the problem is proof of the problem being fixed - given how sporadic it
&gt; is proving to be.

Obviously I meant: &quot;not sighting the problem is NOT proof of the problem
being fixed&quot;.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2081170</commentid>
    <comment_count>77</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-15 09:57:17 -0400</bug_when>
    <thetext>I totally agree with comment 74 and comment 75.

(In reply to comment #75)
&gt; &gt; I think you should have another look at hashCode()/equals() implementations in
&gt; &gt; lookup environments (flow analysis, bindings, ...). A possible scenario that
&gt; &gt; could lead to the observed effects:

This is a very good point.
 
&gt; Stephan/Ayush, does this ring a bell as far as the flow analysis code
&gt; that underwent changes foe 3.8 are concerned ?

No hashCode() implementations have been added lately. A Map and a Set have been introduced for the resource leak analysis, but both are only used for reporting a problem after it has been detected. This is not a good match for the observed behavior, but it must be investigated anyway...

&gt; It would also be a worthwhile exercise to turn off resource leaks analysis
&gt; and see if the problem still shows up (assuming that all significant code
&gt; chunks have been protected by an option-check).

I&apos;d be much relieved to *know* that this part is innocent. Unfortunately, as you say, we can never prove absence of this error.

I guess we&apos;re at the point where &quot;likeliness&quot; isn&apos;t a useful hint any more.
Unfortunately, for my part a systematic investigation of some 200
occurrences of Set/Map and implementations of hashCode() inside the compiler will have to wait till after EclipseCon.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2081172</commentid>
    <comment_count>78</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-15 10:01:44 -0400</bug_when>
    <thetext>BTW: while torturing WTP&apos;s JVM in an Object Teams build I got this in the JIT log:

....
+ (no-opt) java/util/IdentityHashMap.access$200(Ljava/util/IdentityHashMap;)I @ AF7C1F10-AF7C1F2E
+ (no-opt) java/util/IdentityHashMap$IdentityHashMapIterator.hasNext()Z @ AF7C1F50-AF7C200E
+ (no-opt) java/util/IdentityHashMap$KeyIterator.next()Ljava/lang/Object; @ AF7C2030-AF7C209C
+ (no-opt) java/util/IdentityHashMap$IdentityHashMapIterator.nextIndex()I @ AF7C20B0-AF7C21F3
+ (no-opt) java/util/IdentityHashMap.access$600(Ljava/lang/Object;)Ljava/lang/Object; @ AF7C2210-AF7C2237
+ (no-opt) java/util/IdentityHashMap.unmaskNull(Ljava/lang/Object;)Ljava/lang/Object; @ AF7C2250-AF7C2294
+ (no-opt) java/util/logging/LogManager.reset()V @ AF7C22B0-AF7C2508
+ (no-opt) java/util/logging/LogManager.getLoggerNames()Ljava/util/Enumeration; @ AF7C2530-AF7C2594
+ (no-opt) java/util/logging/LogManager.resetLogger(Ljava/lang/String;)V @ AF7C25B0-AF7C2753
+ (no-opt) java/util/logging/Logger.getHandlers()[Ljava/util/logging/Handler; @ AF7C2770-AF7C27EC
+ (no-opt) java/util/IdentityHashMap$KeySet.iterator()Ljava/util/Iterator; @ AF7C2810-AF7C289B
+ (no-opt) java/util/IdentityHashMap$KeyIterator.&lt;init&gt;(Ljava/util/IdentityHashMap;Ljava/util/Identi
tyHashMap$1;)V @ AF7C28B0-AF7C28DE
+ (no-opt) java/util/IdentityHashMap$KeyIterator.&lt;init&gt;(Ljava/util/IdentityHashMap;)V @ AF7C28F0-AF7C2928
+ (no-opt) java/util/IdentityHashMap$IdentityHashMapIterator.&lt;init&gt;(Ljava/util/IdentityHashMap;Ljava/util/IdentityHashMap$1;)V @ AF7C2950-AF7C297E
! java/util/IdentityHashMap$IdentityHashMapIterator.&lt;init&gt;(Ljava/util/IdentityHashMap;)V Error code=FFFFFFFF

This happened with -Xjit:verbose,vlog=ibmjvm.log,count=1,optLevel=noOpt and disappeared with -Xint.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2081188</commentid>
    <comment_count>79</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-15 10:22:25 -0400</bug_when>
    <thetext>Satyam, please attach the test projects, ant scripts etc you are
experimenting with here - This will allow Stephan to critique
them as well play around with them.

(Let us err on the side of over-communicating/documenting side 
rather than on the under-communicating side)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2081198</commentid>
    <comment_count>80</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-15 10:28:46 -0400</bug_when>
    <thetext>(In reply to comment #78)
&gt; BTW: while torturing WTP&apos;s JVM in an Object Teams build I got this in the JIT
&gt; log:

[...]

&gt; java/util/IdentityHashMap$IdentityHashMapIterator.&lt;init&gt;(Ljava/util/IdentityHashMap;)V
&gt; Error code=FFFFFFFF

What exactly is this showing, Stephan ?

&gt; This happened with -Xjit:verbose,vlog=ibmjvm.log,count=1,optLevel=noOpt and
&gt; disappeared with -Xint.

This shows noOpt != Xint (see comment#72).

(In reply to comment #77)

[...]

&gt; &gt; It would also be a worthwhile exercise to turn off resource leaks analysis
&gt; &gt; and see if the problem still shows up (assuming that all significant code
&gt; &gt; chunks have been protected by an option-check).
&gt; 
&gt; I&apos;d be much relieved to *know* that this part is innocent. Unfortunately, as
&gt; you say, we can never prove absence of this error.

There is one outcome that could clarify matters - if resource analysis
is turned off and the problem still shows up, we will know the problem
is certainly elsewhere (assuming all code is protected).

We can ask for this experiment to be done after the current set of
requests have been attended to.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2081243</commentid>
    <comment_count>81</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-15 11:11:56 -0400</bug_when>
    <thetext>(In reply to comment #80)
&gt; &gt; java/util/IdentityHashMap$IdentityHashMapIterator.&lt;init&gt;(Ljava/util/IdentityHashMap;)V
&gt; &gt; Error code=FFFFFFFF
&gt; 
&gt; What exactly is this showing, Stephan ?

I haven&apos;t the slightest.
Except that JIT wasn&apos;t happy (and code failed to run - a class could not be loaded).
 
&gt; &gt; This happened with -Xjit:verbose,vlog=ibmjvm.log,count=1,optLevel=noOpt and
&gt; &gt; disappeared with -Xint.

Using a slightly less drastic setting (count=9) only moved the error to:

! java/util/logging/Logger.getHandlers()[Ljava/util/logging/Handler; Error code=FFFFFFFF</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2081245</commentid>
    <comment_count>82</comment_count>
      <attachid>212729</attachid>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-03-15 11:13:01 -0400</bug_when>
    <thetext>Created attachment 212729
Test project being used to reproduce the problem

Here is the project that I am trying to run on some linux machines to reproduce. The build.cmd is the command line that I am running to reproduce the problem. Note that the vm the build.cmd has is the previous VM. Now, I am running with the b147 Sun JDK7. 

Please let me know if you want to get some more code added.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2081264</commentid>
    <comment_count>83</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-15 11:28:56 -0400</bug_when>
    <thetext>(In reply to comment #82)

&gt; Please let me know if you want to get some more code added.

We may have to use full source files as opposed to skeleton versions.
Eliminating fields from a class shifts the local slot id I think.
Likewise, there could be other side effects if we try to work with
simpler cases to begin with.

Can we start with the offending source files in their entirety and
pull in one by one their dependencies to form the minimal buy
complete file set ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2081269</commentid>
    <comment_count>84</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-03-15 11:35:11 -0400</bug_when>
    <thetext>(In reply to comment #83)
I agree. As of now CompositeId.java is in full but not the other files. Sure, I will try to add that stuff. Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2081456</commentid>
    <comment_count>85</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-15 15:14:11 -0400</bug_when>
    <thetext>Wow, this VM (ibm-java2-i386-50-SR12FP5) is a fragile beast, playing a bit more with its jit option I frequently see the VM die like this:

     [java] +0x48c99
     [java] +0x1ec60
     [java] /opt/public/webtools/apps/ibm-java2-i386-50-SR12FP5/jre/bin/libj9jit23.so(+0x1612fb
     [java] +0x1612fb
     [java] +0x161222
     [java] +0x16117c
     [java] +0x161033
     [java] +0x160f3c
     [java] +0x13f0f4
     [java] +0x13e638
     [java] +0x13e0e8
     [java] +0x86384
     [java] +0x861a2
     [java] +0x4b554
     [java] +0x4b1c7
     [java] +0x1e50a
     [java] +0x4a996
     [java] +0x49a2b
     [java] +0x1e50a
     [java] +0x4980e
     [java] +0x3365
     [java] +0x67b9
     [java] clone+0x5e
     [java] Unhandled exception
     [java] Type=Segmentation error vmState=0x000507ff
     [java] J9Generic_Signal_Number=00000004 Signal_Number=0000000b Error_Value=00000000 Signal_Code=00000001
     [java] Handler1=F74EACFE Handler2=F74ABB69 InaccessibleAddress=00000014
     [java] EDI=BCBA2740 ESI=BCBA25EC EAX=00000000 EBX=BCBA2740
     [java] ECX=BC5DA128 EDX=BCBA25EC
     [java] EIP=F70D4B9F ES=002B DS=002B ESP=BCC88920
     [java] EFlags=00210246 CS=0023 SS=002B EBP=BCC88968
     [java] Module=/opt/public/webtools/apps/ibm-java2-i386-50-SR12FP5/jre/bin/libj9jit23.so
     [java] Module_base_address=F6F73000
     [java] 
     [java] Method_being_compiled=org/eclipse/jdt/internal/compiler/lookup/BlockScope.getBinding([[CILorg/eclipse/jdt/internal/compiler/lookup/InvocationSite;Z)Lorg/eclipse/jdt/internal/compiler/lookup/Binding;
     [java] Target=2_30_20110623_85457_lHdSMr (Linux 2.6.32.45-0.3-default)



It&apos;ll be hard to force JITing in the desired way if the VM simply responds with segv.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2081569</commentid>
    <comment_count>86</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-15 20:49:09 -0400</bug_when>
    <thetext>(In reply to comment #85)

&gt; It&apos;ll be hard to force JITing in the desired way if the VM simply responds with
&gt; segv.

Just so, we are on the same page, could you show the full command line 
and settings ? I assume you are using the scorching mode in a blanket
fashion ? 

The documentation from comment#68, has some information on how to set
optlevel for specific methods IIRC - so we should be able to opt out
of the minefields - though it could get cumbersome.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2081827</commentid>
    <comment_count>87</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-16 10:17:33 -0400</bug_when>
    <thetext>(In reply to comment #74)

[...]

&gt; I think you should have another look at hashCode()/equals() implementations in
&gt; lookup environments (flow analysis, bindings, ...). A possible scenario that
&gt; could lead to the observed effects:

I investigated this trail some more and here are some observations:

Test set up:

    - Start with I20120228-0800 build.
    - Import JDT/Core as a source project.
    - Create a Java application launch configuration with
      org.eclipse.jdt.internal.compiler.batch.Main as the main class
      and -source 6.0 c:\CompositeId.java as arguments.
      [Need to check what source level I should actually be using]

Between CompilationUnitDeclaration.analyseCode() and
CompilationUnitDeclaration.generateCode() (i.e the window in which the
problem surfaces) I had a breakpoint in all equals methods + Object&apos;s and
I had a breakpoint in all hashCode methods without Object&apos;s - I couldn&apos;t 
plant a method entry breakpoint in the native method Object.hashCode for
some reason, but since Object.equals had a breakpoint, we should be good.

I could see equals &amp; hashCode called in the following
call stacks only.

UnresolvedReferenceBinding(ReferenceBinding).hashCode() line: 873	
SimpleLookupTable.get(Object) line: 68	
LookupEnvironment.updateCaches(UnresolvedReferenceBinding, ReferenceBinding) line: 1501	
UnresolvedReferenceBinding.setResolvedType(ReferenceBinding, LookupEnvironment) line: 84	
LookupEnvironment.createBinaryTypeFrom(IBinaryType, PackageBinding, boolean, AccessRestriction) line: 686	
LookupEnvironment.createBinaryTypeFrom(IBinaryType, PackageBinding, AccessRestriction) line: 676	
Compiler.accept(IBinaryType, PackageBinding, AccessRestriction) line: 298	
LookupEnvironment.askForType(char[][]) line: 127	
UnresolvedReferenceBinding.resolve(LookupEnvironment, boolean) line: 54	
BinaryTypeBinding.resolveType(TypeBinding, LookupEnvironment, boolean) line: 131	
BinaryTypeBinding.superInterfaces() line: 1329	
BinaryTypeBinding.hasTypeBit(int) line: 998	
ParameterizedTypeBinding.hasTypeBit(int) line: 636	
FakedTrackingVariable.isAnyCloseable(TypeBinding) line: 502	
LocalDeclaration.analyseCode(BlockScope, FlowContext, FlowInfo) line: 82	
MethodDeclaration.analyseCode(ClassScope, FlowContext, FlowInfo) line: 110	
TypeDeclaration.internalAnalyseCode(FlowContext, FlowInfo) line: 710	
TypeDeclaration.analyseCode(CompilationUnitScope) line: 255	
CompilationUnitDeclaration.analyseCode() line: 111	
Compiler.process(CompilationUnitDeclaration, int) line: 776	
ProcessTaskManager.run() line: 137	
Thread.run() line: 736	

BinaryTypeBinding(Object).equals(Object) line: 58	
SimpleLookupTable.get(Object) line: 71	
LookupEnvironment.updateCaches(UnresolvedReferenceBinding, ReferenceBinding) line: 1501	
UnresolvedReferenceBinding.setResolvedType(ReferenceBinding, LookupEnvironment) line: 84	
LookupEnvironment.createBinaryTypeFrom(IBinaryType, PackageBinding, boolean, AccessRestriction) line: 686	
LookupEnvironment.createBinaryTypeFrom(IBinaryType, PackageBinding, AccessRestriction) line: 676	
Compiler.accept(IBinaryType, PackageBinding, AccessRestriction) line: 298	
LookupEnvironment.askForType(char[][]) line: 127	
UnresolvedReferenceBinding.resolve(LookupEnvironment, boolean) line: 54	
BinaryTypeBinding.resolveType(TypeBinding, LookupEnvironment, boolean) line: 131	
BinaryTypeBinding.superInterfaces() line: 1329	
BinaryTypeBinding.hasTypeBit(int) line: 998	
ParameterizedTypeBinding.hasTypeBit(int) line: 636	
FakedTrackingVariable.isAnyCloseable(TypeBinding) line: 502	
LocalDeclaration.analyseCode(BlockScope, FlowContext, FlowInfo) line: 82	
MethodDeclaration.analyseCode(ClassScope, FlowContext, FlowInfo) line: 110	
TypeDeclaration.internalAnalyseCode(FlowContext, FlowInfo) line: 710	
TypeDeclaration.analyseCode(CompilationUnitScope) line: 255	
CompilationUnitDeclaration.analyseCode() line: 111	
Compiler.process(CompilationUnitDeclaration, int) line: 776	
ProcessTaskManager.run() line: 137	
Thread.run() line: 736	

UnresolvedReferenceBinding(ReferenceBinding).hashCode() line: 873	
SimpleLookupTable.get(Object) line: 68	
LookupEnvironment.updateCaches(UnresolvedReferenceBinding, ReferenceBinding) line: 1501	
UnresolvedReferenceBinding.setResolvedType(ReferenceBinding, LookupEnvironment) line: 84	
LookupEnvironment.createBinaryTypeFrom(IBinaryType, PackageBinding, boolean, AccessRestriction) line: 686	
LookupEnvironment.createBinaryTypeFrom(IBinaryType, PackageBinding, AccessRestriction) line: 676	
Compiler.accept(IBinaryType, PackageBinding, AccessRestriction) line: 298	
LookupEnvironment.askForType(char[][]) line: 127	
UnresolvedReferenceBinding.resolve(LookupEnvironment, boolean) line: 54	
BinaryTypeBinding.resolveType(TypeBinding, LookupEnvironment, boolean) line: 131	
BinaryTypeBinding.superclass() line: 1303	
BinaryTypeBinding(ReferenceBinding).isUncheckedException(boolean) line: 1264	
LoopingFlowContext(FlowContext).checkExceptionHandlers(TypeBinding[], ASTNode, FlowInfo, BlockScope) line: 328	
MessageSend.analyseCode(BlockScope, FlowContext, FlowInfo) line: 117	
MessageSend(Expression).analyseCode(BlockScope, FlowContext, FlowInfo, boolean) line: 227	
MessageSend.analyseCode(BlockScope, FlowContext, FlowInfo) line: 68	
LocalDeclaration.analyseCode(BlockScope, FlowContext, FlowInfo) line: 92	
Block.analyseCode(BlockScope, FlowContext, FlowInfo) line: 39	
WhileStatement.analyseCode(BlockScope, FlowContext, FlowInfo) line: 119	
MethodDeclaration.analyseCode(ClassScope, FlowContext, FlowInfo) line: 110	
TypeDeclaration.internalAnalyseCode(FlowContext, FlowInfo) line: 710	
TypeDeclaration.analyseCode(CompilationUnitScope) line: 255	
CompilationUnitDeclaration.analyseCode() line: 111	
Compiler.process(CompilationUnitDeclaration, int) line: 776	
ProcessTaskManager.run() line: 137	
Thread.run() line: 736	

UnresolvedReferenceBinding(Object).equals(Object) line: 58	
SimpleLookupTable.get(Object) line: 71	
LookupEnvironment.updateCaches(UnresolvedReferenceBinding, ReferenceBinding) line: 1519	
UnresolvedReferenceBinding.setResolvedType(ReferenceBinding, LookupEnvironment) line: 84	
LookupEnvironment.createBinaryTypeFrom(IBinaryType, PackageBinding, boolean, AccessRestriction) line: 686	
LookupEnvironment.createBinaryTypeFrom(IBinaryType, PackageBinding, AccessRestriction) line: 676	
Compiler.accept(IBinaryType, PackageBinding, AccessRestriction) line: 298	
LookupEnvironment.askForType(char[][]) line: 127	
UnresolvedReferenceBinding.resolve(LookupEnvironment, boolean) line: 54	
BinaryTypeBinding.resolveType(TypeBinding, LookupEnvironment, boolean) line: 131	
BinaryTypeBinding.superclass() line: 1303	
BinaryTypeBinding(ReferenceBinding).isUncheckedException(boolean) line: 1264	
LoopingFlowContext(FlowContext).checkExceptionHandlers(TypeBinding[], ASTNode, FlowInfo, BlockScope) line: 328	
MessageSend.analyseCode(BlockScope, FlowContext, FlowInfo) line: 117	
MessageSend(Expression).analyseCode(BlockScope, FlowContext, FlowInfo, boolean) line: 227	
MessageSend.analyseCode(BlockScope, FlowContext, FlowInfo) line: 68	
LocalDeclaration.analyseCode(BlockScope, FlowContext, FlowInfo) line: 92	
Block.analyseCode(BlockScope, FlowContext, FlowInfo) line: 39	
WhileStatement.analyseCode(BlockScope, FlowContext, FlowInfo) line: 119	
MethodDeclaration.analyseCode(ClassScope, FlowContext, FlowInfo) line: 110	
TypeDeclaration.internalAnalyseCode(FlowContext, FlowInfo) line: 710	
TypeDeclaration.analyseCode(CompilationUnitScope) line: 255	
CompilationUnitDeclaration.analyseCode() line: 111	
Compiler.process(CompilationUnitDeclaration, int) line: 776	
ProcessTaskManager.run() line: 137	
Thread.run() line: 736	




Nothing stands out at a first glance - but a few observations/questions:

(1) So if the hashCode/equals hypothesis from comment#74 were to hold 
true, then the data structure concerned has to be the SimpleLookupTables
maintained by LookupEnvironment and updated at LookupEnvironment.updateCaches

(2) The comments in LookupEnvironment.updateCaches say

// hashCode is based on compoundName so this works - cannot be raw since type of parameterized type

this is blatantly not so - see ReferenceBinding.hashCode() - though
I don&apos;t see this contributing to a problem.

(3) Short circuiting leak analysis on option: This is not fully effective.
In several places, there is code of the form:

boolean shouldAnalyseResource = this.binding != null 
			&amp;&amp; flowInfo.reachMode() == FlowInfo.REACHABLE
			&amp;&amp; FakedTrackingVariable.isAnyCloseable(this.initialization.resolvedType)
			&amp;&amp; currentScope.compilerOptions().analyseResourceLeaks;

isAnyCloseable call executes a lot of code potentially, walks the
type hierarchy and causes various updates to LE etc.

(4) A bunch of types override equals without overriding hashCode,
but nothing obviously amiss:

BinaryField, BinaryType, CompilationUnit 	
ExternalJavaProject , ImportContainer 
ImportDeclaration , JarIndexLocation 	
JavaModel, SourceRefElement 
SourceType  	
StackMapFrameCodeStream$ExceptionMarker</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2081943</commentid>
    <comment_count>88</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2012-03-16 12:37:05 -0400</bug_when>
    <thetext>hashCode/equals of JavaElement and subtypes look OK to me. Only PackageFragmentRoot#equals(Object) is a bit hard to understand, since it just does an &quot;instanceof PackageFragmentRoot&quot; check and then proceeds even if o is of a subtype of PackageFragmentRoot. But I think it&apos;s safe, since only resource==null could yield a conflict, but this can only happen in subtypes, and both subtypes override equals(..).

For bindings, ArrayBinding#hashCode() and WildcardBinding#hashCode() look problematic, since their #swapUnresolved(..) methods change the hashCode() during the lifetime of the object in some cases. However, I don&apos;t know enough about the call sequences there to judge whether that&apos;s relevant.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2082057</commentid>
    <comment_count>89</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-16 15:00:27 -0400</bug_when>
    <thetext>(In reply to comment #87)

&gt; (1) So if the hashCode/equals hypothesis from comment#74 were to hold 
&gt; true, then the data structure concerned has to be the SimpleLookupTables
&gt; maintained by LookupEnvironment and updated at LookupEnvironment.updateCaches

Not so. The above is true as far as Object&apos;s method overrides are
concerned, but we have some other hashCode and equals methods that
differ in signature such as CharOperation.hashCode(char[]) that are
references in custom hash tables that need to be studied too.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2082216</commentid>
    <comment_count>90</comment_count>
      <attachid>212822</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-17 04:07:51 -0400</bug_when>
    <thetext>Created attachment 212822
Patch for force hashCode methods to return 0

(In reply to comment #74)

&gt; A way to make this more likely to occur is to make hashCode() return a
&gt; constant. That is legal but will kill performance by turning all O(1)
&gt; operations into O(n).

This patch forces all hashCode methods to return 0. I ran the JDT/Core tests
with it - it triggered a bunch of &quot;failures&quot; where basically the order of
expected messages and actual messages differ to different discovery order
resulting from hashCode collision - None of these is a real issue.

No flow analysis related anomaly was triggered - However the test suite
is really made of numerous independent small tests and is not a good data
point for the type of exercise at hand.

We would like the SDK built with a compiler that has these changes.
Kim/David, how can we help you and make it easy for you to carry out
this experiment for us ? Some alternatives:

(1) Releng can apply this patch, build a compiler and use that to
build SDK on an experimental basis (not the official builds)

(2) We can release this change into master, wait for a nightly
build to happen and then rollback the changes - Releng can then
use the night build bits to build the SDK.

(3) We can build ecj.jar for you with this changes and hand over
the batch compiler that you can run and report back

(4) Any other alternatives ? 

Please let us know what would work best for you -</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2082222</commentid>
    <comment_count>91</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-17 07:44:40 -0400</bug_when>
    <thetext>(In reply to comment #90)
&gt; No flow analysis related anomaly was triggered - However the test suite
&gt; is really made of numerous independent small tests and is not a good data
&gt; point for the type of exercise at hand.
&gt; 
&gt; We would like the SDK built with a compiler that has these changes.
&gt; ...

Why bother releng with this exercise? With constant hashCode() aren&apos;t we now looking for a deterministic, platform independent variant of the bug?

Anyway, I applied the patch and compiled a SDK-like set of projects in a runtime workbench. None of our suspects were sighted.

Am I missing anything?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2082224</commentid>
    <comment_count>92</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-17 08:42:40 -0400</bug_when>
    <thetext>(In reply to comment #91)

&gt; Why bother releng with this exercise? With constant hashCode() aren&apos;t we now
&gt; looking for a deterministic, platform independent variant of the bug?

Yes, but there could still be some pattern in the SDK code base that 
triggers it. Every one of the reports have come from eclipse SDK builds,
plain vanilla or with additional functionality.
 
&gt; Anyway, I applied the patch and compiled a SDK-like set of projects in a
&gt; runtime workbench. None of our suspects were sighted.

I don&apos;t know what is in this SDK-line set of projects - Given two sightings
were from vanilla SDK builds, if we undertake one full build with the 
constant hash code compiler, it would allow us to validate some theories.
(I realize that even a full good build does not necessarily rule out the
hashCode/equals problem hypothesis - the constant hashCode only makes it
much more likely for the bug to show up - does not make it a certainty)

I agree such requests are burdensome on another project - but we have had
no success in the past recreating a full SDK build locally.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2082398</commentid>
    <comment_count>93</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-03-19 01:58:13 -0400</bug_when>
    <thetext>(In reply to comment #82)
I also tried building the full plugin org.eclipse.equinox.p2.updatesite (Errors popped up in this plugin bug 372944 comment 11 ) for around 100,000 times without any luck in reproducing the problem.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2082502</commentid>
    <comment_count>94</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-19 08:10:19 -0400</bug_when>
    <thetext>
We have found a concurrency bug in the resource leak analysis functionality
that explains most of the problems we have been seeing. Or to put it 
conservatively,  at least one major cause for all the weird error messages
has been uncovered and whether there are similar other bugs is something 
to be investigated.

Looking at the code for FakedTrackingVariable.getNullStatusAggressively
there is a chunk that looks like this:

private int getNullStatusAggressively(LocalVariableBinding local, FlowInfo flowInfo) {
		int reachMode = flowInfo.reachMode();
		int status = 0;
		try {
			// unreachable flowInfo is too shy in reporting null-issues, temporarily forget reachability:
			if (reachMode != FlowInfo.REACHABLE)
				flowInfo.tagBits &amp;= ~FlowInfo.UNREACHABLE;
			status = flowInfo.nullStatus(local);
		} finally {
			// reset
			flowInfo.tagBits |= reachMode;
		}

If the flowInfo parameter happens to refer to the static object 
FlowInfo.DEAD_END, then in the window of time between when we 
&quot;temporarily forget reachability&quot; and when we &quot;reset&quot; it in the
finally block, other threads would observe the static object 
FlowInfo.DEAD_END in a bad state.

org.eclipse.jdt.core.tests.compiler.regression.ResourceLeakTests.test056e()
is one test that shows that the parameter could refer to the static
object DEAD_END.

By initializing the static object DEAD_END incorrectly, i.e instead of

//---- right stuff 
	public static final UnconditionalFlowInfo DEAD_END; 
	static {
		DEAD_END = new UnconditionalFlowInfo();
		DEAD_END.tagBits = UNREACHABLE;
	}

if we now deliberately initialize 

// ---- deliberate incorrect initialization
	public static final UnconditionalFlowInfo DEAD_END; 
	static {
		DEAD_END = new UnconditionalFlowInfo();
		DEAD_END.tagBits = REACHABLE;  // WRONG INIT !!!
	} 

we are able to force most of the problems to manifest themselves.

Satyam will shortly document specific cases for each of the
four classes of bogus errors we have seen - (1) unreachable code,
(2) uninitialized local (3) Blank final already initialized
(4) Blank final not initialized.

For this to bug to manifest, there should be parallel compiles 
going on in the same VM. JDT/Core by itself does not parallellize 
compiles, but when this happens under control of ANT or other such
build manager tools, the concurrency issue could act up. (see 
comment#8 and comment#46). Otherwise there are no observers for 
the bad data. This explains why most users are not hitting this 
bug and why all the reports have come from build masters/releng 
czars.

This code was originally introduced via commit 1bf30b93f1c2f17c02d0cecfa43e877f00d01800 on 2011-09-29 and then
got refactored into its present place - From a timeline perspective
this spans the entire window - from the very first bug referred to
in comment#5 all the way to the most recent incident reports.

Satyam, please document how to reproduce each of the wrong
class of diagnostics -- TIA.

Stephan, please prepare a patch - it would be great if we could
deliver it for this week&apos;s I build -- TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2082540</commentid>
    <comment_count>95</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-19 09:27:54 -0400</bug_when>
    <thetext>(In reply to comment #94)

&gt; Stephan, please prepare a patch - it would be great if we could
&gt; deliver it for this week&apos;s I build -- TIA.

While we are at it, could we also make sure that all leak analysis
code is under the option check - I noticed quite a few places
around the use of FakedTrackingVariable.isAnyCloseable that cause
non-trivial amount of code to be executed checking whether an
object is a closeable only to subsequently check the option.
e.g : analyseCode in LocalDeclaration and AllocationExpression.

(Such meticulous guarding will help if and when we want to disable
an optional feature to see if a certain problem goes away and to
provide an escape hatch thus.)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2082564</commentid>
    <comment_count>96</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-19 09:48:36 -0400</bug_when>
    <thetext>(In reply to comment #55)
&gt; Created attachment 212432 [details]
&gt; static non-final fields in jdt.core

&gt; Out of curiosity I assembled a list of all static non-final fields in JDT/Core
&gt; (attached, fields from &quot;Messages&quot; classes are omitted). None of these fields
&gt; looked suspicious to me in terms of this bug, most are not part of the compiler

Satyam had closely scrutinized this whole list - the catch turns out to be
that FlowInfo.DEAD_END **is** a static final field. It is the referent that
is getting corrupted and not the reference and since there is no way to
specify in Java that an object is immutable, there is no compiler offered
guarantee - that also complicated analysis and it easily slipped through the
cracks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2082583</commentid>
    <comment_count>97</comment_count>
    <who name="Thomas Watson">tjwatson</who>
    <bug_when>2012-03-19 10:21:46 -0400</bug_when>
    <thetext>bug374651 shows another case of unexpected compilation errors.  In this case there are several static final String constants that it thinks may not have been initialized in this class:

http://git.eclipse.org/c/equinox/rt.equinox.p2.git/tree/bundles/org.eclipse.equinox.p2.reconciler.dropins/src/org/eclipse/equinox/internal/p2/reconciler/dropins/Activator.java</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2082596</commentid>
    <comment_count>98</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-03-19 10:36:17 -0400</bug_when>
    <thetext>(In reply to comment #94)
- All bugs except the &apos;Unreachable code&apos; bugs could be reproduced with this
change that Srikanth mentioned. 
######
&gt; By initializing the static object DEAD_END incorrectly, i.e instead of
&gt; 
&gt; //---- right stuff 
&gt;     public static final UnconditionalFlowInfo DEAD_END; 
&gt;     static {
&gt;         DEAD_END = new UnconditionalFlowInfo();
&gt;         DEAD_END.tagBits = UNREACHABLE;
&gt;     }
&gt; 
&gt; if we now deliberately initialize 
&gt; 
&gt; // ---- deliberate incorrect initialization
&gt;     public static final UnconditionalFlowInfo DEAD_END; 
&gt;     static {
&gt;         DEAD_END = new UnconditionalFlowInfo();
&gt;         DEAD_END.tagBits = REACHABLE;  // WRONG INIT !!!
&gt;     } 
&gt; 
#######
- &apos;Unreachable code&apos; in the switch-case block could be reproduced using the
following mechanism. 
   i) Debug the compilation of &apos;Disassembler.java&apos; case through the debugger.
  ii) Stop at SwitchStatement.java:90 (caseInits =
caseInits.mergedWith(flowInfo.unconditionalInits());)
 iii) Change the value of caseInits.tagBits to 0
  iv) Stop at SwitchStatement.java:105 for the break statement
   v) Change back the value of caseInits.tagBits to 3
  This will help to reproduce the case in comment 5.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2082644</commentid>
    <comment_count>99</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-19 11:34:29 -0400</bug_when>
    <thetext>*** Bug 374651 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2082664</commentid>
    <comment_count>100</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-19 12:09:51 -0400</bug_when>
    <thetext>I looked at all locations modifying

org.eclipse.jdt.internal.compiler.flow.FlowInfo.tagBits
org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo.definiteInits
org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo.potentialInits.

The former drives the Unreachable code message, while the latter two drive
the (a) Uninitialized local (b) Blank final not initialized (c) Blank final
already initialized diagnostics. (well (a), (b) and (c) for the first 64
cobined fields + locals, but most of the cases we have been hitting have
been tiny methods really).

The only post 3.7 modifier of org.eclipse.jdt.internal.compiler.flow.FlowInfo.tagBits is
FakedTrackingVariable.getNullStatusAggressively.

The only post 3.7 modifiers of 
org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo.definiteInits
org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo.potentialInits.

are

org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo.addInfoFrom(FlowInfo, boolean)
org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo.resetAssignmentInfo(int)

Ayush, please review these two methods to the extent they change these
fields to make sure all is well. Should resetAssignmentInfo method be 
also be discarding nullness information ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2082736</commentid>
    <comment_count>101</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-19 13:52:40 -0400</bug_when>
    <thetext>(In reply to comment #94)
&gt; We have found a concurrency bug in the resource leak analysis functionality
&gt; that explains most of the problems we have been seeing.

Srikanth, congratulations for this truly great catch!!
And a big sorry for putting in the bug in the first place.
 
&gt; Stephan, please prepare a patch - it would be great if we could
&gt; deliver it for this week&apos;s I build -- TIA.

I&apos;ll pick up work on this in an hour or so ...

(In reply to comment #96)
&gt; Satyam had closely scrutinized this whole list - the catch turns out to be
&gt; that FlowInfo.DEAD_END **is** a static final field. It is the referent that
&gt; is getting corrupted and not the reference and since there is no way to
&gt; specify in Java that an object is immutable, there is no compiler offered
&gt; guarantee - that also complicated analysis and it easily slipped through the
&gt; cracks.

Very true. When I saw your analysis I started to think of how to simulate immutable objects in Java.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2082786</commentid>
    <comment_count>102</comment_count>
      <attachid>212874</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-19 15:25:22 -0400</bug_when>
    <thetext>Created attachment 212874
proposed fix

Here&apos;s the tiny proposed fix for this big bug.

If flowInfo == DEAD_END the whole code section has no effect, because the DEAD_END has no null information.

I little &quot;if (flowInfo != FlowInfo.DEAD_END)&quot; seems to be all it takes.

I&apos;m currently running the tests. 
Next I will dig through the previous comments, 
and try to construct a meaningful test.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2082810</commentid>
    <comment_count>103</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-19 16:07:55 -0400</bug_when>
    <thetext>(In reply to comment #100)
&gt; I looked at all locations modifying
&gt; 
&gt; org.eclipse.jdt.internal.compiler.flow.FlowInfo.tagBits
&gt;
&gt; [...]
&gt; 
&gt; The only post 3.7 modifier of
&gt; org.eclipse.jdt.internal.compiler.flow.FlowInfo.tagBits is
&gt; FakedTrackingVariable.getNullStatusAggressively.

Most modifiers of tagBits closely follow the pattern to exit early if (this == DEAD_END) or ((this.tagBits &amp; UNREACHABLE_OR_DEAD) != 0). I found only one exception: UFI.unconditionalFieldLessCopy() has no such checks, which looks inconsistent to me.

Secondly, in class NullInfoRegistry the check &quot;if (this != DEAD_END)&quot; is ridiculous actually, DEAD_END is of type UnconditionalFlowInfo, *not* NullInfoRegistry :)

I don&apos;t think either of these causes harm in the sense of this bug, maybe just wasting a few CPU cycles.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2082813</commentid>
    <comment_count>104</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-19 16:13:47 -0400</bug_when>
    <thetext>(In reply to comment #102)
&gt; Created attachment 212874 [details]
&gt; proposed fix
&gt; 
&gt; Here&apos;s the tiny proposed fix for this big bug.
&gt; [...]
&gt; I&apos;m currently running the tests. 

RunJdtCoreTests answered: PASS</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2082821</commentid>
    <comment_count>105</comment_count>
    <who name="Kim Moir">kim.moir</who>
    <bug_when>2012-03-19 16:33:12 -0400</bug_when>
    <thetext>I&apos;ve also  reverted the compiler for tonight&apos;s build to the one from M5.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2082839</commentid>
    <comment_count>106</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-19 17:05:40 -0400</bug_when>
    <thetext>(In reply to comment #105)
&gt; I&apos;ve also  reverted the compiler for tonight&apos;s build to the one from M5.

I&apos;m afraid for safely avoiding this bug you&apos;d have to go all the way back to M2. Not sure if that will trigger other issues (e.g., warnings suppressed in the code which aren&apos;t even raised -&gt; spurious compile warnings re unused @SuppressWarnings - or code relying on some recent bug fixes?).

In order to upgrade to a compiler *with* this fix, we need a successful I-Build first? Or would it make sense to &quot;sneak in&quot; a hand-made ecj with this fix?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2082861</commentid>
    <comment_count>107</comment_count>
      <attachid>212880</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-19 17:55:10 -0400</bug_when>
    <thetext>Created attachment 212880
improved fix

(In reply to comment #95)
&gt; While we are at it, could we also make sure that all leak analysis
&gt; code is under the option check - I noticed quite a few places
&gt; around the use of FakedTrackingVariable.isAnyCloseable that cause
&gt; non-trivial amount of code to be executed checking whether an
&gt; object is a closeable only to subsequently check the option.
&gt; e.g : analyseCode in LocalDeclaration and AllocationExpression.
&gt; 
&gt; (Such meticulous guarding will help if and when we want to disable
&gt; an optional feature to see if a certain problem goes away and to
&gt; provide an escape hatch thus.)

In bug 370639 I ensured, that with resource analysis disabled no single instance of FakedTrackingVariable would ever be created.
As you correctly note, the static method isAnyCloseable was not fully covered by checks. I fixed this by simply swapping the order of checks in three locations. With these changes I ran all JDT/Core tests with resource analysis disabled by default and with breakpoints in all ctors and static methods of FakedTrackingVariable. Only one of these breakpoints was ever triggered: FTV.cleanupAfterAssignment(). In this case adding another check looks like overkill to me.

Also the actual fix has been changed to a simple early exit to improve readability.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2082891</commentid>
    <comment_count>108</comment_count>
      <attachid>212884</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-19 19:29:30 -0400</bug_when>
    <thetext>Created attachment 212884
same patch with a regression test

This patch includes a regression test that triggers one instance of the actual bug in its concurrency-based version. In order to increase the probability I added a guarded sleep(5) into the critical section. With this delay and with disabling the fix the bug seems to show deterministically on my machine. I even saw it once without the delay, but for a good regression test this didn&apos;t look reliable to me.

Let me know if s.o. sees an issue in this kind of test harness in the code:
    if (TEST_372319) { // see https://bugs.eclipse.org/372319
	try {
	    Thread.sleep(5); // increase probability of concurrency bug
	} catch (InterruptedException e) { /* nop */ }
    }</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2082892</commentid>
    <comment_count>109</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-19 19:34:15 -0400</bug_when>
    <thetext>(In reply to comment #106)
&gt; (In reply to comment #105)
&gt; &gt; I&apos;ve also  reverted the compiler for tonight&apos;s build to the one from M5.
&gt; 
&gt; I&apos;m afraid for safely avoiding this bug you&apos;d have to go all the way back to
&gt; M2. 

Stephan, could you dig up the command line switch used to disable
the resource analysis and document it here ? It can be a workaround
until a fix is released and makes it way into the build environment.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2082896</commentid>
    <comment_count>110</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-19 19:42:37 -0400</bug_when>
    <thetext>(In reply to comment #109)
&gt; (In reply to comment #106)
&gt; &gt; (In reply to comment #105)
&gt; &gt; &gt; I&apos;ve also  reverted the compiler for tonight&apos;s build to the one from M5.
&gt; &gt; 
&gt; &gt; I&apos;m afraid for safely avoiding this bug you&apos;d have to go all the way back to
&gt; &gt; M2. 
&gt; 
&gt; Stephan, could you dig up the command line switch used to disable
&gt; the resource analysis and document it here ?

Just say:
  -warn:-resource

&gt; It can be a workaround
&gt; until a fix is released and makes it way into the build environment.

I was going to release the current version of the fix after another run of all tests, to be sure it&apos;s included in the next build. Any objections?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2082901</commentid>
    <comment_count>111</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-19 20:16:08 -0400</bug_when>
    <thetext>I have released the fix via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=8654e35d625c39f9786ab81699fccb6057b0bc72

Please let me know if more should be done.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2082907</commentid>
    <comment_count>112</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-19 20:19:37 -0400</bug_when>
    <thetext>(In reply to comment #110)

&gt; &gt; It can be a workaround
&gt; &gt; until a fix is released and makes it way into the build environment.
&gt; 
&gt; I was going to release the current version of the fix after another run of all
&gt; tests, to be sure it&apos;s included in the next build. Any objections?

I looked through the changes and they look good. Yes, please release them
so they get included for I build today.

Question: New test uses buildUniqueComplianceTestSuite 1.6, but 
TestAll adds it since 1.5 - Is this an issue ? (No idea)

I ran the test a few times on Windoze - it passed with the fix
and failed without consistently, so we seem to be good.

(In reply to comment #108)

&gt; Let me know if s.o. sees an issue in this kind of test harness in the code:

We have precedence of such &quot;testability improvement&quot; code in JDT/Core.
So I don&apos;t see an issue - See the aptly named
org.eclipse.jdt.internal.core.JavaModelManager.doNotUse() :)

Thanks a lot for the quick turn around on the patch Stephan.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2082908</commentid>
    <comment_count>113</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-19 20:22:07 -0400</bug_when>
    <thetext>(In reply to comment #111)
&gt; I have released the fix via
&gt; http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=8654e35d625c39f9786ab81699fccb6057b0bc72

This patch looks good.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2082910</commentid>
    <comment_count>114</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-19 20:29:28 -0400</bug_when>
    <thetext>(In reply to comment #112)

&gt; I looked through the changes and they look good. Yes, please release them
&gt; so they get included for I build today.

Jay, FYI.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2082916</commentid>
    <comment_count>115</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-19 20:42:09 -0400</bug_when>
    <thetext>(In reply to comment #112)
&gt; Question: New test uses buildUniqueComplianceTestSuite 1.6, but 
&gt; TestAll adds it since 1.5 - Is this an issue ? (No idea)

Oops, I mostly copied stuff from BatchCompilerTests and only experimented with switching to 1.6 once. But at a closer look the two locations you mention seem to be independent: when run from TestAll it gets invoked for all levels &gt;= 1.5 and when run as a single test in the IDE only 1.6 is picked. Looks actually OK to me.

&gt; Thanks a lot for the quick turn around on the patch Stephan.

Don&apos;t mention. I owe you a big beer or two for this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2083212</commentid>
    <comment_count>116</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-03-20 11:20:40 -0400</bug_when>
    <thetext>(In reply to comment #100)
&gt; The only post 3.7 modifiers of 
&gt; org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo.definiteInits
&gt; org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo.potentialInits.
&gt; 
&gt; are
&gt; 
&gt; org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo.addInfoFrom(FlowInfo,
&gt; boolean)
&gt; org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo.resetAssignmentInfo(int)
&gt; 
&gt; Ayush, please review these two methods to the extent they change these
&gt; fields to make sure all is well. Should resetAssignmentInfo method be 
&gt; also be discarding nullness information ?
All looks ok here. The resetAssignmentInfo discards the info corresponding to a loop counter after the loop, so yes both nullness info and inits info can be discarded for that particular variable.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2083217</commentid>
    <comment_count>117</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-20 11:28:26 -0400</bug_when>
    <thetext>(In reply to comment #116)

&gt; All looks ok here. The resetAssignmentInfo discards the info corresponding to a
&gt; loop counter after the loop, so yes both nullness info and inits info can be
&gt; discarded for that particular variable.

OK. So that it doesn&apos;t discard the nullness info today - could this lead
to some trouble somehow ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2083618</commentid>
    <comment_count>118</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-03-21 02:08:16 -0400</bug_when>
    <thetext>(In reply to comment #117)
&gt; OK. So that it doesn&apos;t discard the nullness info today - could this lead
&gt; to some trouble somehow ?

No, it won&apos;t, since no other local is assigned the same id.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2091791</commentid>
    <comment_count>119</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2012-04-11 00:32:57 -0400</bug_when>
    <thetext>We are starting to get &quot;good builds&quot; on our build.eclipse.org 4.2 primary builds. 

I expect us to have our first &quot;public&quot; build this week (in next few days) ... that is, one we feel comfortable putting on downloads.eclipse.org, even though unit tests won&apos;t be running yet. 

I&apos;ve opened a &quot;releng&quot; bug to update the compiler in the base builder we are using, but want to wait until after that &quot;first&quot; new I-build. 

Can one of you JDT core members comment in bug 376450 when you think &quot;yes, the compiler from the I-build xyz is ready for I-build production use&quot;?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2091793</commentid>
    <comment_count>120</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-04-11 00:40:03 -0400</bug_when>
    <thetext>(In reply to comment #119)
&gt; Can one of you JDT core members comment in bug 376450 when you think &quot;yes, the
&gt; compiler from the I-build xyz is ready for I-build production use&quot;?
Sure David.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2100389</commentid>
    <comment_count>121</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-04-30 07:24:39 -0400</bug_when>
    <thetext>The builds didn&apos;t show up these errors for a while. Hence marking this verified.
Verified for 3.8M7.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>211937</attachid>
            <date>2012-03-02 02:18:00 -0500</date>
            <delta_ts>2012-03-02 02:18:33 -0500</delta_ts>
            <desc>example of parallel compilation file</desc>
            <filename>compile.org.eclipse.wst.tests.feature.xml</filename>
            <type>text/xml</type>
            <size>9509</size>
            <attacher name="David Williams">david_williams</attacher>
            
              <data encoding="base64">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHByb2plY3QgbmFtZT0iQ29t
cGlsZSBvcmcuZWNsaXBzZS53c3QudGVzdHMuZmVhdHVyZSIgZGVmYXVsdD0ibWFpbiI+Cgk8dGFy
Z2V0IG5hbWU9Im1haW4iPgoJCTxwYXJhbGxlbCB0aHJlYWRzUGVyUHJvY2Vzc29yPSczJz4KCQkJ
PGFudCBhbnRmaWxlPSJidWlsZC54bWwiIGRpcj0iLi4vLi4vLi4vLi4vLi4vb3B0L3B1YmxpYy93
ZWJ0b29scy9wcm9qZWN0cy93dHA0eC1SMy40LjAtSS93b3JrZGlyL3BsdWdpbnMvb3JnLmVjbGlw
c2Uud3RwLnJlbGVuZy5maXh1cHMiIHRhcmdldD0iYnVpbGQuamFycyIvPgoJCQk8YW50IGFudGZp
bGU9ImJ1aWxkLnhtbCIgZGlyPSIuLi8uLi8uLi8uLi8uLi9vcHQvcHVibGljL3dlYnRvb2xzL3By
b2plY3RzL3d0cDR4LVIzLjQuMC1JL3dvcmtkaXIvcGx1Z2lucy9vcmcudzNjLnhxdHMudGVzdHN1
aXRlIiB0YXJnZXQ9ImJ1aWxkLmphcnMiLz4KCQkJPGFudCBhbnRmaWxlPSJidWlsZC54bWwiIGRp
cj0iLi4vLi4vLi4vLi4vLi4vb3B0L3B1YmxpYy93ZWJ0b29scy9wcm9qZWN0cy93dHA0eC1SMy40
LjAtSS93b3JrZGlyL3BsdWdpbnMvb3JnLmVjbGlwc2Uud3N0LmpzZHQuY29yZS50ZXN0cy5jb21w
aWxlciIgdGFyZ2V0PSJidWlsZC5qYXJzIi8+CgkJPC9wYXJhbGxlbD4KCQk8cGFyYWxsZWwgdGhy
ZWFkc1BlclByb2Nlc3Nvcj0nMyc+CgkJCTxhbnQgYW50ZmlsZT0iYnVpbGQueG1sIiBkaXI9Ii4u
Ly4uLy4uLy4uLy4uL29wdC9wdWJsaWMvd2VidG9vbHMvcHJvamVjdHMvd3RwNHgtUjMuNC4wLUkv
d29ya2Rpci9wbHVnaW5zL29yZy5lY2xpcHNlLndzdC5qc2R0LmNvcmUudGVzdHMubW9kZWwiIHRh
cmdldD0iYnVpbGQuamFycyIvPgoJCQk8YW50IGFudGZpbGU9ImJ1aWxkLnhtbCIgZGlyPSIuLi8u
Li8uLi8uLi8uLi9vcHQvcHVibGljL3dlYnRvb2xzL3Byb2plY3RzL3d0cDR4LVIzLjQuMC1JL3dv
cmtkaXIvcGx1Z2lucy9vcmcuZWNsaXBzZS53c3QuY29tbW9uLnVyaXJlc29sdmVyLnRlc3RzIiB0
YXJnZXQ9ImJ1aWxkLmphcnMiLz4KCQkJPGFudCBhbnRmaWxlPSJidWlsZC54bWwiIGRpcj0iLi4v
Li4vLi4vLi4vLi4vb3B0L3B1YmxpYy93ZWJ0b29scy9wcm9qZWN0cy93dHA0eC1SMy40LjAtSS93
b3JrZGlyL3BsdWdpbnMvb3JnLmVjbGlwc2Uud3N0LmNvbW1vbi5zbmlwcGV0cy50ZXN0cyIgdGFy
Z2V0PSJidWlsZC5qYXJzIi8+CgkJCTxhbnQgYW50ZmlsZT0iYnVpbGQueG1sIiBkaXI9Ii4uLy4u
Ly4uLy4uLy4uL29wdC9wdWJsaWMvd2VidG9vbHMvcHJvamVjdHMvd3RwNHgtUjMuNC4wLUkvd29y
a2Rpci9wbHVnaW5zL29yZy5lY2xpcHNlLndzdC5zc2UuY29yZS50ZXN0cyIgdGFyZ2V0PSJidWls
ZC5qYXJzIi8+CgkJCTxhbnQgYW50ZmlsZT0iYnVpbGQueG1sIiBkaXI9Ii4uLy4uLy4uLy4uLy4u
L29wdC9wdWJsaWMvd2VidG9vbHMvcHJvamVjdHMvd3RwNHgtUjMuNC4wLUkvd29ya2Rpci9wbHVn
aW5zL29yZy5lY2xpcHNlLndzdC5pbnRlcm5ldC5tb25pdG9yLmNvcmUudGVzdHMiIHRhcmdldD0i
YnVpbGQuamFycyIvPgoJCQk8YW50IGFudGZpbGU9ImJ1aWxkLnhtbCIgZGlyPSIuLi8uLi8uLi8u
Li8uLi9vcHQvcHVibGljL3dlYnRvb2xzL3Byb2plY3RzL3d0cDR4LVIzLjQuMC1JL3dvcmtkaXIv
cGx1Z2lucy9vcmcuZWNsaXBzZS53c3QuY29tbW9uLnRlc3RzLmNvbGxlY3RvciIgdGFyZ2V0PSJi
dWlsZC5qYXJzIi8+CgkJCTxhbnQgYW50ZmlsZT0iYnVpbGQueG1sIiBkaXI9Ii4uLy4uLy4uLy4u
Ly4uL29wdC9wdWJsaWMvd2VidG9vbHMvcHJvamVjdHMvd3RwNHgtUjMuNC4wLUkvd29ya2Rpci9w
bHVnaW5zL29yZy5lY2xpcHNlLndzdC5zZXJ2ZXIuY29yZS50ZXN0cyIgdGFyZ2V0PSJidWlsZC5q
YXJzIi8+CgkJCTxhbnQgYW50ZmlsZT0iYnVpbGQueG1sIiBkaXI9Ii4uLy4uLy4uLy4uLy4uL29w
dC9wdWJsaWMvd2VidG9vbHMvcHJvamVjdHMvd3RwNHgtUjMuNC4wLUkvd29ya2Rpci9wbHVnaW5z
L29yZy5lY2xpcHNlLndzdC5qc2R0LnVpLnRlc3RzIiB0YXJnZXQ9ImJ1aWxkLmphcnMiLz4KCQkJ
PGFudCBhbnRmaWxlPSJidWlsZC54bWwiIGRpcj0iLi4vLi4vLi4vLi4vLi4vb3B0L3B1YmxpYy93
ZWJ0b29scy9wcm9qZWN0cy93dHA0eC1SMy40LjAtSS93b3JrZGlyL3BsdWdpbnMvb3JnLmVjbGlw
c2Uud3N0LmpzZHQuZGVidWcuY29yZS50ZXN0cyIgdGFyZ2V0PSJidWlsZC5qYXJzIi8+CgkJCTxh
bnQgYW50ZmlsZT0iYnVpbGQueG1sIiBkaXI9Ii4uLy4uLy4uLy4uLy4uL29wdC9wdWJsaWMvd2Vi
dG9vbHMvcHJvamVjdHMvd3RwNHgtUjMuNC4wLUkvd29ya2Rpci9wbHVnaW5zL29yZy5lY2xpcHNl
LndzdC54c2wuZXhzbHQuY29yZS50ZXN0cyIgdGFyZ2V0PSJidWlsZC5qYXJzIi8+CgkJCTxhbnQg
YW50ZmlsZT0iYnVpbGQueG1sIiBkaXI9Ii4uLy4uLy4uLy4uLy4uL29wdC9wdWJsaWMvd2VidG9v
bHMvcHJvamVjdHMvd3RwNHgtUjMuNC4wLUkvd29ya2Rpci9wbHVnaW5zL29yZy5lY2xpcHNlLndz
dC5jb21tb24udGVzdHMudmFsaWRhdGlvbi5ndWFyZCIgdGFyZ2V0PSJidWlsZC5qYXJzIi8+CgkJ
CTxhbnQgYW50ZmlsZT0iYnVpbGQueG1sIiBkaXI9Ii4uLy4uLy4uLy4uLy4uL29wdC9wdWJsaWMv
d2VidG9vbHMvcHJvamVjdHMvd3RwNHgtUjMuNC4wLUkvd29ya2Rpci9wbHVnaW5zL29yZy5lY2xp
cHNlLnd0cC5yZWxlbmcudG9vbHMiIHRhcmdldD0iYnVpbGQuamFycyIvPgoJCQk8YW50IGFudGZp
bGU9ImJ1aWxkLnhtbCIgZGlyPSIuLi8uLi8uLi8uLi8uLi9vcHQvcHVibGljL3dlYnRvb2xzL3By
b2plY3RzL3d0cDR4LVIzLjQuMC1JL3dvcmtkaXIvcGx1Z2lucy9vcmcuZWNsaXBzZS53c3QuY29t
bW9uLnByb2plY3QuZmFjZXQuY29yZS50ZXN0cyIgdGFyZ2V0PSJidWlsZC5qYXJzIi8+CgkJCTxh
bnQgYW50ZmlsZT0iYnVpbGQueG1sIiBkaXI9Ii4uLy4uLy4uLy4uLy4uL29wdC9wdWJsaWMvd2Vi
dG9vbHMvcHJvamVjdHMvd3RwNHgtUjMuNC4wLUkvd29ya2Rpci9wbHVnaW5zL29yZy5lY2xpcHNl
LndzdC5zc2UudWkudGVzdHMiIHRhcmdldD0iYnVpbGQuamFycyIvPgoJCTwvcGFyYWxsZWw+CgkJ
PHBhcmFsbGVsIHRocmVhZHNQZXJQcm9jZXNzb3I9JzMnPgoJCQk8YW50IGFudGZpbGU9ImJ1aWxk
LnhtbCIgZGlyPSIuLi8uLi8uLi8uLi8uLi9vcHQvcHVibGljL3dlYnRvb2xzL3Byb2plY3RzL3d0
cDR4LVIzLjQuMC1JL3dvcmtkaXIvcGx1Z2lucy9vcmcuZWNsaXBzZS53c3QuY29tbW9uLnRlc3Rz
IiB0YXJnZXQ9ImJ1aWxkLmphcnMiLz4KCQk8L3BhcmFsbGVsPgoJCTxwYXJhbGxlbCB0aHJlYWRz
UGVyUHJvY2Vzc29yPSczJz4KCQkJPGFudCBhbnRmaWxlPSJidWlsZC54bWwiIGRpcj0iLi4vLi4v
Li4vLi4vLi4vb3B0L3B1YmxpYy93ZWJ0b29scy9wcm9qZWN0cy93dHA0eC1SMy40LjAtSS93b3Jr
ZGlyL3BsdWdpbnMvb3JnLmVjbGlwc2Uud3N0LmNvbW1vbi50ZXN0cy51aSIgdGFyZ2V0PSJidWls
ZC5qYXJzIi8+CgkJCTxhbnQgYW50ZmlsZT0iYnVpbGQueG1sIiBkaXI9Ii4uLy4uLy4uLy4uLy4u
L29wdC9wdWJsaWMvd2VidG9vbHMvcHJvamVjdHMvd3RwNHgtUjMuNC4wLUkvd29ya2Rpci9wbHVn
aW5zL29yZy5lY2xpcHNlLndzdC5jb21tb24ucHJvamVjdC5mYWNldC51aS50ZXN0cyIgdGFyZ2V0
PSJidWlsZC5qYXJzIi8+CgkJCTxhbnQgYW50ZmlsZT0iYnVpbGQueG1sIiBkaXI9Ii4uLy4uLy4u
Ly4uLy4uL29wdC9wdWJsaWMvd2VidG9vbHMvcHJvamVjdHMvd3RwNHgtUjMuNC4wLUkvd29ya2Rp
ci9wbHVnaW5zL29yZy5lY2xpcHNlLndzdC5zZXJ2ZXIudWkudGVzdHMiIHRhcmdldD0iYnVpbGQu
amFycyIvPgoJCQk8YW50IGFudGZpbGU9ImJ1aWxkLnhtbCIgZGlyPSIuLi8uLi8uLi8uLi8uLi9v
cHQvcHVibGljL3dlYnRvb2xzL3Byb2plY3RzL3d0cDR4LVIzLjQuMC1JL3dvcmtkaXIvcGx1Z2lu
cy9vcmcuZWNsaXBzZS53c3QuY29tbW9uLnRlc3RzLnZhbGlkYXRpb24iIHRhcmdldD0iYnVpbGQu
amFycyIvPgoJCQk8YW50IGFudGZpbGU9ImJ1aWxkLnhtbCIgZGlyPSIuLi8uLi8uLi8uLi8uLi9v
cHQvcHVibGljL3dlYnRvb2xzL3Byb2plY3RzL3d0cDR4LVIzLjQuMC1JL3dvcmtkaXIvcGx1Z2lu
cy9vcmcuZWNsaXBzZS53dHAucmVsZW5nLnZlcnNpb25jaGVja2VyIiB0YXJnZXQ9ImJ1aWxkLmph
cnMiLz4KCQk8L3BhcmFsbGVsPgoJCTxwYXJhbGxlbCB0aHJlYWRzUGVyUHJvY2Vzc29yPSczJz4K
CQkJPGFudCBhbnRmaWxlPSJidWlsZC54bWwiIGRpcj0iLi4vLi4vLi4vLi4vLi4vb3B0L3B1Ymxp
Yy93ZWJ0b29scy9wcm9qZWN0cy93dHA0eC1SMy40LjAtSS93b3JrZGlyL3BsdWdpbnMvb3JnLmVj
bGlwc2Uud3RwLnJlbGVuZy50ZXN0cyIgdGFyZ2V0PSJidWlsZC5qYXJzIi8+CgkJCTxhbnQgYW50
ZmlsZT0iYnVpbGQueG1sIiBkaXI9Ii4uLy4uLy4uLy4uLy4uL29wdC9wdWJsaWMvd2VidG9vbHMv
cHJvamVjdHMvd3RwNHgtUjMuNC4wLUkvd29ya2Rpci9wbHVnaW5zL29yZy5lY2xpcHNlLndzdC5p
bnRlcm5ldC5jYWNoZS50ZXN0cyIgdGFyZ2V0PSJidWlsZC5qYXJzIi8+CgkJCTxhbnQgYW50Zmls
ZT0iYnVpbGQueG1sIiBkaXI9Ii4uLy4uLy4uLy4uLy4uL29wdC9wdWJsaWMvd2VidG9vbHMvcHJv
amVjdHMvd3RwNHgtUjMuNC4wLUkvd29ya2Rpci9wbHVnaW5zL29yZy5lY2xpcHNlLndzdC5pbnRl
cm5ldC5tb25pdG9yLnVpLnRlc3RzIiB0YXJnZXQ9ImJ1aWxkLmphcnMiLz4KCQkJPGFudCBhbnRm
aWxlPSJidWlsZC54bWwiIGRpcj0iLi4vLi4vLi4vLi4vLi4vb3B0L3B1YmxpYy93ZWJ0b29scy9w
cm9qZWN0cy93dHA0eC1SMy40LjAtSS93b3JrZGlyL3BsdWdpbnMvb3JnLmVjbGlwc2Uud3N0Lmpz
ZHQuZGVidWcucmhpbm8udGVzdHMiIHRhcmdldD0iYnVpbGQuamFycyIvPgoJCQk8YW50IGFudGZp
bGU9ImJ1aWxkLnhtbCIgZGlyPSIuLi8uLi8uLi8uLi8uLi9vcHQvcHVibGljL3dlYnRvb2xzL3By
b2plY3RzL3d0cDR4LVIzLjQuMC1JL3dvcmtkaXIvcGx1Z2lucy9vcmcuZWNsaXBzZS53c3QueG1s
LnhwYXRoMi5wcm9jZXNzb3IudGVzdHMiIHRhcmdldD0iYnVpbGQuamFycyIvPgoJCQk8YW50IGFu
dGZpbGU9ImJ1aWxkLnhtbCIgZGlyPSIuLi8uLi8uLi8uLi8uLi9vcHQvcHVibGljL3dlYnRvb2xz
L3Byb2plY3RzL3d0cDR4LVIzLjQuMC1JL3dvcmtkaXIvcGx1Z2lucy9vcmcuZWNsaXBzZS53c3Qu
Y3NzLmNvcmUudGVzdHMiIHRhcmdldD0iYnVpbGQuamFycyIvPgoJCQk8YW50IGFudGZpbGU9ImJ1
aWxkLnhtbCIgZGlyPSIuLi8uLi8uLi8uLi8uLi9vcHQvcHVibGljL3dlYnRvb2xzL3Byb2plY3Rz
L3d0cDR4LVIzLjQuMC1JL3dvcmtkaXIvcGx1Z2lucy9vcmcuZWNsaXBzZS53c3QueG1sLnRlc3Rz
LmVuY29kaW5nIiB0YXJnZXQ9ImJ1aWxkLmphcnMiLz4KCQk8L3BhcmFsbGVsPgoJCTxwYXJhbGxl
bCB0aHJlYWRzUGVyUHJvY2Vzc29yPSczJz4KCQkJPGFudCBhbnRmaWxlPSJidWlsZC54bWwiIGRp
cj0iLi4vLi4vLi4vLi4vLi4vb3B0L3B1YmxpYy93ZWJ0b29scy9wcm9qZWN0cy93dHA0eC1SMy40
LjAtSS93b3JrZGlyL3BsdWdpbnMvb3JnLmVjbGlwc2Uud3N0LmNzcy50ZXN0cy5lbmNvZGluZyIg
dGFyZ2V0PSJidWlsZC5qYXJzIi8+CgkJCTxhbnQgYW50ZmlsZT0iYnVpbGQueG1sIiBkaXI9Ii4u
Ly4uLy4uLy4uLy4uL29wdC9wdWJsaWMvd2VidG9vbHMvcHJvamVjdHMvd3RwNHgtUjMuNC4wLUkv
d29ya2Rpci9wbHVnaW5zL29yZy5lY2xpcHNlLndzdC54bWwudWkudGVzdHMiIHRhcmdldD0iYnVp
bGQuamFycyIvPgoJCQk8YW50IGFudGZpbGU9ImJ1aWxkLnhtbCIgZGlyPSIuLi8uLi8uLi8uLi8u
Li9vcHQvcHVibGljL3dlYnRvb2xzL3Byb2plY3RzL3d0cDR4LVIzLjQuMC1JL3dvcmtkaXIvcGx1
Z2lucy9vcmcuZWNsaXBzZS53c3QuaHRtbC5jb3JlLnRlc3RzIiB0YXJnZXQ9ImJ1aWxkLmphcnMi
Lz4KCQkJPGFudCBhbnRmaWxlPSJidWlsZC54bWwiIGRpcj0iLi4vLi4vLi4vLi4vLi4vb3B0L3B1
YmxpYy93ZWJ0b29scy9wcm9qZWN0cy93dHA0eC1SMy40LjAtSS93b3JrZGlyL3BsdWdpbnMvb3Jn
LmVjbGlwc2Uud3N0LnhtbC5jb3JlLnRlc3RzIiB0YXJnZXQ9ImJ1aWxkLmphcnMiLz4KCQkJPGFu
dCBhbnRmaWxlPSJidWlsZC54bWwiIGRpcj0iLi4vLi4vLi4vLi4vLi4vb3B0L3B1YmxpYy93ZWJ0
b29scy9wcm9qZWN0cy93dHA0eC1SMy40LjAtSS93b3JrZGlyL3BsdWdpbnMvb3JnLmVjbGlwc2Uu
d3N0LnhzZC52YWxpZGF0aW9uLnRlc3RzIiB0YXJnZXQ9ImJ1aWxkLmphcnMiLz4KCQkJPGFudCBh
bnRmaWxlPSJidWlsZC54bWwiIGRpcj0iLi4vLi4vLi4vLi4vLi4vb3B0L3B1YmxpYy93ZWJ0b29s
cy9wcm9qZWN0cy93dHA0eC1SMy40LjAtSS93b3JrZGlyL3BsdWdpbnMvb3JnLmVjbGlwc2Uud3N0
LnhzZC5jb3JlLnRlc3RzIiB0YXJnZXQ9ImJ1aWxkLmphcnMiLz4KCQkJPGFudCBhbnRmaWxlPSJi
dWlsZC54bWwiIGRpcj0iLi4vLi4vLi4vLi4vLi4vb3B0L3B1YmxpYy93ZWJ0b29scy9wcm9qZWN0
cy93dHA0eC1SMy40LjAtSS93b3JrZGlyL3BsdWdpbnMvb3JnLmVjbGlwc2Uud3N0LmpzZHQud2Vi
LmNvcmUudGVzdHMiIHRhcmdldD0iYnVpbGQuamFycyIvPgoJCQk8YW50IGFudGZpbGU9ImJ1aWxk
LnhtbCIgZGlyPSIuLi8uLi8uLi8uLi8uLi9vcHQvcHVibGljL3dlYnRvb2xzL3Byb2plY3RzL3d0
cDR4LVIzLjQuMC1JL3dvcmtkaXIvcGx1Z2lucy9vcmcuZWNsaXBzZS53c3QueG1sLnZhbGlkYXRp
b24udGVzdHMiIHRhcmdldD0iYnVpbGQuamFycyIvPgoJCQk8YW50IGFudGZpbGU9ImJ1aWxkLnht
bCIgZGlyPSIuLi8uLi8uLi8uLi8uLi9vcHQvcHVibGljL3dlYnRvb2xzL3Byb2plY3RzL3d0cDR4
LVIzLjQuMC1JL3dvcmtkaXIvcGx1Z2lucy9vcmcuZWNsaXBzZS53c3QuZHRkLmNvcmUudGVzdHMi
IHRhcmdldD0iYnVpbGQuamFycyIvPgoJCQk8YW50IGFudGZpbGU9ImJ1aWxkLnhtbCIgZGlyPSIu
Li8uLi8uLi8uLi8uLi9vcHQvcHVibGljL3dlYnRvb2xzL3Byb2plY3RzL3d0cDR4LVIzLjQuMC1J
L3dvcmtkaXIvcGx1Z2lucy9vcmcuZWNsaXBzZS53c3QuaHRtbC50ZXN0cy5lbmNvZGluZyIgdGFy
Z2V0PSJidWlsZC5qYXJzIi8+CgkJCTxhbnQgYW50ZmlsZT0iYnVpbGQueG1sIiBkaXI9Ii4uLy4u
Ly4uLy4uLy4uL29wdC9wdWJsaWMvd2VidG9vbHMvcHJvamVjdHMvd3RwNHgtUjMuNC4wLUkvd29y
a2Rpci9wbHVnaW5zL29yZy5lY2xpcHNlLndzdC54c2QudWkudGVzdHMiIHRhcmdldD0iYnVpbGQu
amFycyIvPgoJCQk8YW50IGFudGZpbGU9ImJ1aWxkLnhtbCIgZGlyPSIuLi8uLi8uLi8uLi8uLi9v
cHQvcHVibGljL3dlYnRvb2xzL3Byb2plY3RzL3d0cDR4LVIzLjQuMC1JL3dvcmtkaXIvcGx1Z2lu
cy9vcmcuZWNsaXBzZS53c3QuZHRkLnVpLnRlc3RzIiB0YXJnZXQ9ImJ1aWxkLmphcnMiLz4KCQkJ
PGFudCBhbnRmaWxlPSJidWlsZC54bWwiIGRpcj0iLi4vLi4vLi4vLi4vLi4vb3B0L3B1YmxpYy93
ZWJ0b29scy9wcm9qZWN0cy93dHA0eC1SMy40LjAtSS93b3JrZGlyL3BsdWdpbnMvb3JnLmVjbGlw
c2Uud3N0LmNzcy51aS50ZXN0cyIgdGFyZ2V0PSJidWlsZC5qYXJzIi8+CgkJCTxhbnQgYW50Zmls
ZT0iYnVpbGQueG1sIiBkaXI9Ii4uLy4uLy4uLy4uLy4uL29wdC9wdWJsaWMvd2VidG9vbHMvcHJv
amVjdHMvd3RwNHgtUjMuNC4wLUkvd29ya2Rpci9wbHVnaW5zL29yZy5lY2xpcHNlLndzdC5odG1s
LnVpLnRlc3RzIiB0YXJnZXQ9ImJ1aWxkLmphcnMiLz4KCQkJPGFudCBhbnRmaWxlPSJidWlsZC54
bWwiIGRpcj0iLi4vLi4vLi4vLi4vLi4vb3B0L3B1YmxpYy93ZWJ0b29scy9wcm9qZWN0cy93dHA0
eC1SMy40LjAtSS93b3JrZGlyL3BsdWdpbnMvb3JnLmVjbGlwc2Uud3N0LmpzZHQud2ViLnVpLnRl
c3RzIiB0YXJnZXQ9ImJ1aWxkLmphcnMiLz4KCQkJPGFudCBhbnRmaWxlPSJidWlsZC54bWwiIGRp
cj0iLi4vLi4vLi4vLi4vLi4vb3B0L3B1YmxpYy93ZWJ0b29scy9wcm9qZWN0cy93dHA0eC1SMy40
LjAtSS93b3JrZGlyL3BsdWdpbnMvb3JnLmVjbGlwc2Uud3N0LnhtbC5jYXRhbG9nLnRlc3RzIiB0
YXJnZXQ9ImJ1aWxkLmphcnMiLz4KCQkJPGFudCBhbnRmaWxlPSJidWlsZC54bWwiIGRpcj0iLi4v
Li4vLi4vLi4vLi4vb3B0L3B1YmxpYy93ZWJ0b29scy9wcm9qZWN0cy93dHA0eC1SMy40LjAtSS93
b3JrZGlyL3BsdWdpbnMvb3JnLmVjbGlwc2Uud3N0LnhtbC54cGF0aC5jb3JlLnRlc3RzIiB0YXJn
ZXQ9ImJ1aWxkLmphcnMiLz4KCQkJPGFudCBhbnRmaWxlPSJidWlsZC54bWwiIGRpcj0iLi4vLi4v
Li4vLi4vLi4vb3B0L3B1YmxpYy93ZWJ0b29scy9wcm9qZWN0cy93dHA0eC1SMy40LjAtSS93b3Jr
ZGlyL3BsdWdpbnMvb3JnLmVjbGlwc2Uud3N0LnhtbC54cGF0aC51aS50ZXN0cyIgdGFyZ2V0PSJi
dWlsZC5qYXJzIi8+CgkJCTxhbnQgYW50ZmlsZT0iYnVpbGQueG1sIiBkaXI9Ii4uLy4uLy4uLy4u
Ly4uL29wdC9wdWJsaWMvd2VidG9vbHMvcHJvamVjdHMvd3RwNHgtUjMuNC4wLUkvd29ya2Rpci9w
bHVnaW5zL29yZy5lY2xpcHNlLndzdC54c2wuY29yZS50ZXN0cyIgdGFyZ2V0PSJidWlsZC5qYXJz
Ii8+CgkJCTxhbnQgYW50ZmlsZT0iYnVpbGQueG1sIiBkaXI9Ii4uLy4uLy4uLy4uLy4uL29wdC9w
dWJsaWMvd2VidG9vbHMvcHJvamVjdHMvd3RwNHgtUjMuNC4wLUkvd29ya2Rpci9wbHVnaW5zL29y
Zy5lY2xpcHNlLndzdC54c2wudWkudGVzdHMiIHRhcmdldD0iYnVpbGQuamFycyIvPgoJCTwvcGFy
YWxsZWw+CgkJPHBhcmFsbGVsIHRocmVhZHNQZXJQcm9jZXNzb3I9JzMnPgoJCQk8YW50IGFudGZp
bGU9ImJ1aWxkLnhtbCIgZGlyPSIuLi8uLi8uLi8uLi8uLi9vcHQvcHVibGljL3dlYnRvb2xzL3By
b2plY3RzL3d0cDR4LVIzLjQuMC1JL3dvcmtkaXIvcGx1Z2lucy9vcmcuZWNsaXBzZS53c3QueHNs
LmV4c2x0LnVpLnRlc3RzIiB0YXJnZXQ9ImJ1aWxkLmphcnMiLz4KCQkJPGFudCBhbnRmaWxlPSJi
dWlsZC54bWwiIGRpcj0iLi4vLi4vLi4vLi4vLi4vb3B0L3B1YmxpYy93ZWJ0b29scy9wcm9qZWN0
cy93dHA0eC1SMy40LjAtSS93b3JrZGlyL3BsdWdpbnMvb3JnLmVjbGlwc2Uud3N0LnhzbC5sYXVu
Y2hpbmcudGVzdHMiIHRhcmdldD0iYnVpbGQuamFycyIvPgoJCQk8YW50IGFudGZpbGU9ImJ1aWxk
LnhtbCIgZGlyPSIuLi8uLi8uLi8uLi8uLi9vcHQvcHVibGljL3dlYnRvb2xzL3Byb2plY3RzL3d0
cDR4LVIzLjQuMC1JL3dvcmtkaXIvcGx1Z2lucy9vcmcuZWNsaXBzZS53c3QueHNsLmpheHAuZGVi
dWcudGVzdCIgdGFyZ2V0PSJidWlsZC5qYXJzIi8+CgkJPC9wYXJhbGxlbD4KCQk8cGFyYWxsZWwg
dGhyZWFkc1BlclByb2Nlc3Nvcj0nMyc+CgkJCTxhbnQgYW50ZmlsZT0iYnVpbGQueG1sIiBkaXI9
Ii4uLy4uLy4uLy4uLy4uL29wdC9wdWJsaWMvd2VidG9vbHMvcHJvamVjdHMvd3RwNHgtUjMuNC4w
LUkvd29ya2Rpci9wbHVnaW5zL29yZy5lY2xpcHNlLndzdC54c2wudGVzdHMiIHRhcmdldD0iYnVp
bGQuamFycyIvPgoJCTwvcGFyYWxsZWw+Cgk8L3RhcmdldD4KPC9wcm9qZWN0Pgo=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>212011</attachid>
            <date>2012-03-02 18:45:00 -0500</date>
            <delta_ts>2012-03-02 18:45:50 -0500</delta_ts>
            <desc>Cleanup for field finallyInfo</desc>
            <filename>Bug_372319_finallyInfo_cleanup.patch</filename>
            <type>text/plain</type>
            <size>1330</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvVHJ5U3RhdGVtZW50LmphdmEgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1Ry
eVN0YXRlbWVudC5qYXZhCmluZGV4IDA1MzQ5NzAuLjhkMDkyOTQgMTAwNjQ0Ci0tLSBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hc3QvVHJ5U3RhdGVtZW50LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9UcnlTdGF0ZW1lbnQuamF2
YQpAQCAtMjk4LDYgKzI5OCw4IEBAIHB1YmxpYyBGbG93SW5mbyBhbmFseXNlQ29kZShCbG9ja1Nj
b3BlIGN1cnJlbnRTY29wZSwgRmxvd0NvbnRleHQgZmxvd0NvbnRleHQsIEZsCiAJCQl0cnlJbmZv
ID0gdGhpcy50cnlCbG9jay5hbmFseXNlQ29kZShjdXJyZW50U2NvcGUsIGhhbmRsaW5nQ29udGV4
dCwgZmxvd0luZm8uY29weSgpKTsKIAkJCWlmICgodHJ5SW5mby50YWdCaXRzICYgRmxvd0luZm8u
VU5SRUFDSEFCTEVfT1JfREVBRCkgIT0gMCkKIAkJCQl0aGlzLmJpdHMgfD0gQVNUTm9kZS5Jc1Ry
eUJsb2NrRXhpdGluZzsKKwkJCS8vIHJlc2V0OgorCQkJdGhpcy50cnlCbG9jay5zY29wZS5maW5h
bGx5SW5mbyA9IG51bGw7CiAJCX0KIAkJaWYgKHJlc291cmNlc0xlbmd0aCA+IDApIHsKIAkJCXRo
aXMucG9zdFRyeUluaXRTdGF0ZUluZGV4ID0gY3VycmVudFNjb3BlLm1ldGhvZFNjb3BlKCkucmVj
b3JkSW5pdGlhbGl6YXRpb25TdGF0ZXModHJ5SW5mbyk7CkBAIC0zNTYsNiArMzU4LDggQEAgcHVi
bGljIEZsb3dJbmZvIGFuYWx5c2VDb2RlKEJsb2NrU2NvcGUgY3VycmVudFNjb3BlLCBGbG93Q29u
dGV4dCBmbG93Q29udGV4dCwgRmwKIAkJCQl0aGlzLmNhdGNoRXhpdEluaXRTdGF0ZUluZGV4ZXNb
aV0gPSBjdXJyZW50U2NvcGUubWV0aG9kU2NvcGUoKS5yZWNvcmRJbml0aWFsaXphdGlvblN0YXRl
cyhjYXRjaEluZm8pOwogCQkJCXRoaXMuY2F0Y2hFeGl0c1tpXSA9CiAJCQkJCShjYXRjaEluZm8u
dGFnQml0cyAmIEZsb3dJbmZvLlVOUkVBQ0hBQkxFX09SX0RFQUQpICE9IDA7CisJCQkJLy8gcmVz
ZXQ6CisJCQkJdGhpcy5jYXRjaEJsb2Nrc1tpXS5zY29wZS5maW5hbGx5SW5mbyA9IG51bGw7CiAJ
CQkJdHJ5SW5mbyA9IHRyeUluZm8ubWVyZ2VkV2l0aChjYXRjaEluZm8udW5jb25kaXRpb25hbElu
aXRzKCkpOwogCQkJfQogCQl9Cg==
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>212154</attachid>
            <date>2012-03-06 14:05:00 -0500</date>
            <delta_ts>2012-03-06 14:13:41 -0500</delta_ts>
            <desc>ResultsSummaryGenerator</desc>
            <filename>ResultsSummaryGenerator.java</filename>
            <type>text/plain</type>
            <size>38843</size>
            <attacher name="Carl Anderson">ccc</attacher>
            
              <data encoding="base64">cGFja2FnZSBvcmcuZWNsaXBzZS53dHAucmVsZW5nLnRvb2xzOw0KDQppbXBvcnQgamF2YS5pby5C
dWZmZXJlZFJlYWRlcjsNCmltcG9ydCBqYXZhLmlvLkZpbGU7DQppbXBvcnQgamF2YS5pby5GaWxl
SW5wdXRTdHJlYW07DQppbXBvcnQgamF2YS5pby5GaWxlTm90Rm91bmRFeGNlcHRpb247DQppbXBv
cnQgamF2YS5pby5GaWxlUmVhZGVyOw0KaW1wb3J0IGphdmEuaW8uRmlsZVdyaXRlcjsNCmltcG9y
dCBqYXZhLmlvLklPRXhjZXB0aW9uOw0KaW1wb3J0IGphdmEuaW8uSW5wdXRTdHJlYW07DQppbXBv
cnQgamF2YS5pby5Xcml0ZXI7DQppbXBvcnQgamF2YS51dGlsLkFycmF5czsNCmltcG9ydCBqYXZh
LnV0aWwuU3RyaW5nVG9rZW5pemVyOw0KaW1wb3J0IGphdmEudXRpbC5WZWN0b3I7DQoNCmltcG9y
dCBqYXZheC54bWwucGFyc2Vycy5Eb2N1bWVudEJ1aWxkZXI7DQppbXBvcnQgamF2YXgueG1sLnBh
cnNlcnMuRG9jdW1lbnRCdWlsZGVyRmFjdG9yeTsNCmltcG9ydCBqYXZheC54bWwucGFyc2Vycy5G
YWN0b3J5Q29uZmlndXJhdGlvbkVycm9yOw0KaW1wb3J0IGphdmF4LnhtbC5wYXJzZXJzLlBhcnNl
ckNvbmZpZ3VyYXRpb25FeGNlcHRpb247DQppbXBvcnQgamF2YXgueG1sLnRyYW5zZm9ybS5PdXRw
dXRLZXlzOw0KaW1wb3J0IGphdmF4LnhtbC50cmFuc2Zvcm0uU291cmNlOw0KaW1wb3J0IGphdmF4
LnhtbC50cmFuc2Zvcm0uVHJhbnNmb3JtZXI7DQppbXBvcnQgamF2YXgueG1sLnRyYW5zZm9ybS5U
cmFuc2Zvcm1lckV4Y2VwdGlvbjsNCmltcG9ydCBqYXZheC54bWwudHJhbnNmb3JtLlRyYW5zZm9y
bWVyRmFjdG9yeTsNCmltcG9ydCBqYXZheC54bWwudHJhbnNmb3JtLlRyYW5zZm9ybWVyRmFjdG9y
eUNvbmZpZ3VyYXRpb25FcnJvcjsNCmltcG9ydCBqYXZheC54bWwudHJhbnNmb3JtLmRvbS5ET01T
b3VyY2U7DQppbXBvcnQgamF2YXgueG1sLnRyYW5zZm9ybS5zdHJlYW0uU3RyZWFtUmVzdWx0Ow0K
DQppbXBvcnQgb3JnLmFwYWNoZS50b29scy5hbnQuQnVpbGRFeGNlcHRpb247DQppbXBvcnQgb3Jn
LmFwYWNoZS50b29scy5hbnQuUHJvamVjdDsNCmltcG9ydCBvcmcuYXBhY2hlLnRvb2xzLmFudC5U
YXNrOw0KaW1wb3J0IG9yZy53M2MuZG9tLkRvY3VtZW50Ow0KaW1wb3J0IG9yZy53M2MuZG9tLkVs
ZW1lbnQ7DQppbXBvcnQgb3JnLnczYy5kb20uTmFtZWROb2RlTWFwOw0KaW1wb3J0IG9yZy53M2Mu
ZG9tLk5vZGU7DQppbXBvcnQgb3JnLnczYy5kb20uTm9kZUxpc3Q7DQppbXBvcnQgb3JnLnczYy5k
b20uVGV4dDsNCmltcG9ydCBvcmcueG1sLnNheC5JbnB1dFNvdXJjZTsNCmltcG9ydCBvcmcueG1s
LnNheC5TQVhFeGNlcHRpb247DQoNCi8qKg0KICogVGhpcyBjbGFzcyB3YXMgb3JpZ2luYWwgYmFz
ZWQgb24gVGVzdFJlc3VsdHNHZW5lcmF0b3IuamF2YSBmcm9tIHRoZQ0KICogb3JnLmVjbGlscHNl
LmJ1aWxkLnRvb2xzIHByb2plY3QgaW4gdGhlIGJhc2VidWlsZGVyLg0KICogDQogKi8NCnB1Ymxp
YyBjbGFzcyBSZXN1bHRzU3VtbWFyeUdlbmVyYXRvciBleHRlbmRzIFRhc2sgew0KDQoJcHJpdmF0
ZSBzdGF0aWMgZmluYWwgU3RyaW5nIFdBUk5JTkdfU0VWRVJJVFkgPSAiV0FSTklORyI7DQoJcHJp
dmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIEVSUk9SX1NFVkVSSVRZID0gIkVSUk9SIjsNCglwcml2
YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcgRm9yYmlkZGVuUmVmZXJlbmNlSUQgPSAiRm9yYmlkZGVu
UmVmZXJlbmNlIjsNCglwcml2YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcgRGlzY291cmFnZWRSZWZl
cmVuY2VJRCA9ICJEaXNjb3VyYWdlZFJlZmVyZW5jZSI7DQoNCglwcml2YXRlIHN0YXRpYyBmaW5h
bCBpbnQgREVGQVVMVF9SRUFESU5HX1NJWkUgPSA4MTkyOw0KCXByaXZhdGUgU3RyaW5nIEVPTCA9
IFN5c3RlbS5nZXRQcm9wZXJ0eSgibGluZS5zZXBhcmF0b3IiKTsNCg0KCXByaXZhdGUgc3RhdGlj
IGZpbmFsIFN0cmluZyBURVNUX1NVSVRFX0VMRU1FTlRfTkFNRSA9ICJ0ZXN0c3VpdGUiOw0KCXBy
aXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZyB0ZXN0UmVzdWx0c1Rva2VuID0gIiV0ZXN0cmVzdWx0
cyUiOw0KCXByaXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZyBjb21waWxlTG9nc1Rva2VuID0gIiVj
b21waWxlbG9ncyUiOw0KCXB1YmxpYyBWZWN0b3IgZHJvcFRva2VuczsNCglwdWJsaWMgVmVjdG9y
IHBsYXRmb3JtU3BlY3M7DQoJcHVibGljIFZlY3RvciBkaWZmZXJlbnRQbGF0Zm9ybXM7DQoJcHVi
bGljIFN0cmluZyB0ZXN0UmVzdWx0c1dpdGhQcm9ibGVtcyA9IEVPTDsNCg0KCXByaXZhdGUgRG9j
dW1lbnRCdWlsZGVyIHBhcnNlciA9IG51bGw7DQoJcHVibGljIFN0cmluZyB0ZXN0UmVzdWx0c1Rl
bXBsYXRlU3RyaW5nID0gIiI7DQoJcHVibGljIFN0cmluZyBkcm9wVGVtcGxhdGVTdHJpbmcgPSAi
IjsNCg0KCXB1YmxpYyBWZWN0b3IgcGxhdGZvcm1EZXNjcmlwdGlvbjsNCglwdWJsaWMgVmVjdG9y
IHBsYXRmb3JtVGVtcGxhdGVTdHJpbmc7DQoJcHVibGljIFZlY3RvciBwbGF0Zm9ybURyb3BGaWxl
TmFtZTsNCg0KCS8vIFN0YXR1cyBvZiB0ZXN0cyByZXN1bHRzIChwZW5kaW5nLCBzdWNjZXNzZnVs
LCBmYWlsZWQpLCB1c2VkIHRvIHNwZWNpZnkNCgkvLyB0aGUgY29sb3INCgkvLyBvZiB0aGUgdGVz
dCBSZXN1bHRzIGxpbmsgb24gdGhlIGJ1aWxkIHBhZ2VzIChzdGFuZGFyZCwgZ3JlZW4sIHJlZCks
DQoJLy8gb25jZSBmYWlsdXJlcw0KCS8vIGFyZSBlbmNvdW50ZXJlZCwgdGhpcyBpcyBzZXQgdG8g
ZmFpbGVkDQoJLy8gcHJvdGVjdGVkIFN0cmluZyB0ZXN0UmVzdWx0c1N0YXR1cyA9ICJzdWNjZXNz
ZnVsIjsNCgkvLyBhc3N1bWUgdGVzdHMgcmFuLiBJZiBubyBodG1sIGZpbGVzIGFyZSBmb3VuZCwg
dGhpcyBpcyBzZXQgdG8gZmFsc2UNCglwcml2YXRlIGJvb2xlYW4gdGVzdHNSYW4gPSB0cnVlOw0K
DQoJLy8gUGFyYW1ldGVycw0KCS8vIGJ1aWxkIHJ1bnMgSlVuaXQgYXV0b21hdGVkIHRlc3RzDQoJ
cHJpdmF0ZSBib29sZWFuIGlzQnVpbGRUZXN0ZWQ7DQoNCgkvLyBidWlsZFR5cGUsIEksIE4NCglw
dWJsaWMgU3RyaW5nIGJ1aWxkVHlwZTsNCg0KCS8vIENvbW1hIHNlcGFyYXRlZCBsaXN0IG9mIGRy
b3AgdG9rZW5zDQoJcHVibGljIFN0cmluZyBkcm9wVG9rZW5MaXN0Ow0KDQoJLy8gVG9rZW4gaW4g
cGxhdGZvcm0ucGhwLnRlbXBsYXRlIHRvIGJlIHJlcGxhY2VkIGJ5IHRoZSBkZXNpcmVkIHBsYXRm
b3JtDQoJLy8gSUQNCglwdWJsaWMgU3RyaW5nIHBsYXRmb3JtSWRlbnRpZmllclRva2VuOw0KDQoJ
Ly8gTG9jYXRpb24gb2YgdGhlIHhtbCBmaWxlcw0KCXB1YmxpYyBTdHJpbmcgeG1sRGlyZWN0b3J5
TmFtZTsNCg0KCS8vIExvY2F0aW9uIG9mIHRoZSBodG1sIGZpbGVzDQoJcHVibGljIFN0cmluZyBo
dG1sRGlyZWN0b3J5TmFtZTsNCg0KCS8vIExvY2F0aW9uIG9mIHRoZSByZXN1bHRpbmcgaW5kZXgu
cGhwIGZpbGUuDQoJcHVibGljIFN0cmluZyBkcm9wRGlyZWN0b3J5TmFtZTsNCg0KCS8vIExvY2F0
aW9uIGFuZCBuYW1lIG9mIHRoZSB0ZW1wbGF0ZSBpbmRleC5waHAgZmlsZS4NCglwdWJsaWMgU3Ry
aW5nIHRlc3RSZXN1bHRzVGVtcGxhdGVGaWxlTmFtZTsNCg0KCS8vIFBsYXRmb3JtIHNwZWNpZmlj
IHRlbXBsYXRlIGFuZCBvdXRwdXQgbGlzdCAoY29sb24gc2VwYXJhdGVkKSBpbiB0aGUNCgkvLyBm
b2xsb3dpbmcgZm9ybWF0Og0KCS8vIDxkZXNjcmlwdG9yLCBpZS4gT1MgbmFtZT4scGF0aCB0byB0
ZW1wbGF0ZSBmaWxlLCBwYXRoIHRvIG91dHB1dCBmaWxlDQoJLy8gcHVibGljIFN0cmluZyBwbGF0
Zm9ybVNwZWNpZmljVGVtcGxhdGVMaXN0ID0gIiI7DQoNCgkvLyBOYW1lIG9mIHRoZSBnZW5lcmF0
ZWQgaW5kZXggcGhwIGZpbGUuDQoJcHVibGljIFN0cmluZyB0ZXN0UmVzdWx0c0h0bWxGaWxlTmFt
ZTsNCg0KCS8vIE5hbWUgb2YgdGhlIGdlbmVyYXRlZCBkcm9wIGluZGV4IHBocCBmaWxlOw0KCXB1
YmxpYyBTdHJpbmcgZHJvcEh0bWxGaWxlTmFtZTsNCg0KCS8vIEFyYml0cmFyeSBwYXRoIHVzZWQg
aW4gdGhlIGluZGV4LnBocCBwYWdlIHRvIGhyZWYgdGhlDQoJLy8gZ2VuZXJhdGVkIC5odG1sIGZp
bGVzLg0KCXB1YmxpYyBTdHJpbmcgaHJlZlRlc3RSZXN1bHRzVGFyZ2V0UGF0aDsNCg0KCS8vIEFy
aXRyYXJ5IHBhdGggdXNlZCBpbiB0aGUgaW5kZXgucGhwIHBhZ2UgdG8gcmVmZXJlbmNlIHRoZSBj
b21waWxlTG9ncw0KCXB1YmxpYyBTdHJpbmcgaHJlZkNvbXBpbGVMb2dzVGFyZ2V0UGF0aDsNCg0K
CS8vIExvY2F0aW9uIG9mIGNvbXBpbGUgbG9ncyBiYXNlIGRpcmVjdG9yeQ0KCXB1YmxpYyBTdHJp
bmcgY29tcGlsZUxvZ3NEaXJlY3RvcnlOYW1lOw0KDQoJLy8gTG9jYXRpb24gYW5kIG5hbWUgb2Yg
dGVzdCBtYW5pZmVzdCBmaWxlDQoJcHVibGljIFN0cmluZyB0ZXN0TWFuaWZlc3RGaWxlTmFtZTsN
Cg0KCXByaXZhdGUgRnVsbEphck5hbWVQYXJzZXIgbmFtZVBhcnNlciA9IG5ldyBGdWxsSmFyTmFt
ZVBhcnNlcigpOw0KDQoJcHJpdmF0ZSBzdGF0aWMgY2xhc3MgVW5pdFRlc3RSZXN1bHRzIHsNCgkJ
cHJpdmF0ZSBpbnQgZXJyb3JzID0gLTk5Ow0KCQlwcml2YXRlIGludCBmYWlsdXJlcyA9IC05OTsN
CgkJcHJpdmF0ZSBpbnQgdG90YWxUZXN0cyA9IC05OTsNCgkJcHJpdmF0ZSBmbG9hdCB0aW1lID0g
LTk5Ow0KCQkNCgkJaW50IGdldEVycm9ycygpIHsNCgkJCXJldHVybiBlcnJvcnM7DQoJCX0NCg0K
CQl2b2lkIHNldEVycm9ycyhpbnQgZXJyb3JzKSB7DQoJCQl0aGlzLmVycm9ycyA9IGVycm9yczsN
CgkJfQ0KDQoJCWludCBnZXRGYWlsdXJlcygpIHsNCgkJCXJldHVybiBmYWlsdXJlczsNCgkJfQ0K
DQoJCXZvaWQgc2V0RmFpbHVyZXMoaW50IGZhaWx1cmVzKSB7DQoJCQl0aGlzLmZhaWx1cmVzID0g
ZmFpbHVyZXM7DQoJCX0NCg0KCQlpbnQgZ2V0VG90YWxUZXN0cygpIHsNCgkJCXJldHVybiB0b3Rh
bFRlc3RzOw0KCQl9DQoNCgkJdm9pZCBzZXRUb3RhbFRlc3RzKGludCB0b3RhbFRlc3RzKSB7DQoJ
CQl0aGlzLnRvdGFsVGVzdHMgPSB0b3RhbFRlc3RzOw0KCQl9DQoNCgkJcHVibGljIGZsb2F0IGdl
dFRpbWUoKSB7DQoJCQlyZXR1cm4gdGltZTsNCgkJfQ0KDQoJCXB1YmxpYyB2b2lkIHNldFRpbWUo
ZmxvYXQgdGltZSkgew0KCQkJdGhpcy50aW1lID0gdGltZTsNCgkJfQ0KDQoJfQ0KDQoJcHVibGlj
IHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykgew0KCQlSZXN1bHRzU3VtbWFyeUdlbmVy
YXRvciB0ZXN0ID0gbmV3IFJlc3VsdHNTdW1tYXJ5R2VuZXJhdG9yKCk7DQoJCXRlc3Quc2V0RHJv
cFRva2VuTGlzdCgiJXNkayUsJXRlc3RzJSwlZXhhbXBsZSUsJXJjcHJ1bnRpbWUlLCVyY3BzZGsl
LCVpY3ViYXNlJSwlcnVudGltZSUsJXBsYXRmb3Jtc2RrJSwlamR0JSwlamR0c2RrJSwlcGRlJSwl
cGRlc2RrJSwlY3ZzJSwlY3Zzc2RrJSwldGVhbWV4dHJhcyUsJXN3dCUsJXJlbGVuZ3Rvb2xzJSIp
Ow0KCQl0ZXN0LnNldFBsYXRmb3JtSWRlbnRpZmllclRva2VuKCIlcGxhdGZvcm0lIik7DQoJCXRl
c3QuZ2V0RHJvcFRva2Vuc0Zyb21MaXN0KHRlc3QuZHJvcFRva2VuTGlzdCk7DQoJCXRlc3Quc2V0
SXNCdWlsZFRlc3RlZCh0cnVlKTsNCgkJdGVzdC5zZXRYbWxEaXJlY3RvcnlOYW1lKCJDOlxcanVu
a1xcdGVzdHJlc3VsdHNcXHhtbCIpOw0KCQl0ZXN0LnNldEh0bWxEaXJlY3RvcnlOYW1lKCJDOlxc
anVua1xcdGVzdHJlc3VsdHMiKTsNCgkJdGVzdC5zZXREcm9wRGlyZWN0b3J5TmFtZSgiQzpcXGp1
bmsiKTsNCgkJdGVzdC5zZXRUZXN0UmVzdWx0c1RlbXBsYXRlRmlsZU5hbWUoIkM6XFxqdW5rXFx0
ZW1wbGF0ZUZpbGVzXFx0ZXN0UmVzdWx0cy5waHAudGVtcGxhdGUiKTsNCgkJLy8gdGVzdC5zZXRQ
bGF0Zm9ybVNwZWNpZmljVGVtcGxhdGVMaXN0KCJXaW5kb3dzLEM6XFxqdW5rXFx0ZW1wbGF0ZUZp
bGVzXFxwbGF0Zm9ybS5waHAudGVtcGxhdGUsd2luUGxhdGZvcm0ucGhwO0xpbnV4LEM6XFxqdW5r
XFx0ZW1wbGF0ZUZpbGVzXFxwbGF0Zm9ybS5waHAudGVtcGxhdGUsbGluUGxhdGZvcm0ucGhwO1Nv
bGFyaXMsQzpcXGp1bmtcXHRlbXBsYXRlRmlsZXNcXHBsYXRmb3JtLnBocC50ZW1wbGF0ZSxzb2xQ
bGF0Zm9ybS5waHA7QUlYLEM6XFxqdW5rXFx0ZW1wbGF0ZUZpbGVzXFxwbGF0Zm9ybS5waHAudGVt
cGxhdGUsYWl4UGxhdGZvcm0ucGhwO01hY2ludG9zaCxDOlxcanVua1xcdGVtcGxhdGVGaWxlc1xc
cGxhdGZvcm0ucGhwLnRlbXBsYXRlLG1hY1BsYXRmb3JtLnBocDtTb3VyY2UNCgkJLy8gQnVpbGQs
QzpcXGp1bmtcXHRlbXBsYXRlRmlsZXNcXHNvdXJjZUJ1aWxkcy5waHAudGVtcGxhdGUsc291cmNl
QnVpbGRzLnBocCIpOw0KCQl0ZXN0LnNldFRlc3RSZXN1bHRzSHRtbEZpbGVOYW1lKCJ0ZXN0UmVz
dWx0cy5waHAiKTsNCgkJLy8gdGVzdC5zZXREcm9wSHRtbEZpbGVOYW1lKCJpbmRleC5waHAiKTsN
CgkJdGVzdC5zZXREcm9wSHRtbEZpbGVOYW1lKCJpbmRleC5odG1sIik7DQoNCgkJdGVzdC5zZXRI
cmVmVGVzdFJlc3VsdHNUYXJnZXRQYXRoKCJ0ZXN0cmVzdWx0cyIpOw0KCQl0ZXN0LnNldENvbXBp
bGVMb2dzRGlyZWN0b3J5TmFtZSgiQzpcXGp1bmtcXGNvbXBpbGVsb2dzXFxwbHVnaW5zIik7DQoJ
CXRlc3Quc2V0SHJlZkNvbXBpbGVMb2dzVGFyZ2V0UGF0aCgiY29tcGlsZWxvZ3MiKTsNCgkJdGVz
dC5zZXRUZXN0TWFuaWZlc3RGaWxlTmFtZSgiQzpcXGp1bmtcXHRlc3RNYW5pZmVzdC54bWwiKTsN
CgkJdGVzdC5leGVjdXRlKCk7DQoJfQ0KDQoJcHVibGljIHZvaWQgZXhlY3V0ZSgpIHsNCg0KCQl0
cnkgew0KCQkJZ2V0RHJvcFRva2Vuc0Zyb21MaXN0KGRyb3BUb2tlbkxpc3QpOw0KCQkJdGVzdFJl
c3VsdHNUZW1wbGF0ZVN0cmluZyA9IHJlYWRGaWxlKHRlc3RSZXN1bHRzVGVtcGxhdGVGaWxlTmFt
ZSk7DQoJCQkvLyBkcm9wVGVtcGxhdGVTdHJpbmcgPSByZWFkRmlsZShkcm9wVGVtcGxhdGVGaWxl
TmFtZSk7DQoNCgkJCS8vIFNwZWNpZmljIHRvIHRoZSBwbGF0Zm9ybSBidWlsZC1wYWdlDQoJCQkv
Kg0KCQkJICogaWYgKHBsYXRmb3JtU3BlY2lmaWNUZW1wbGF0ZUxpc3QgIT0gIiIpIHsgU3RyaW5n
IGRlc2NyaXB0aW9uLA0KCQkJICogcGxhdGZvcm1UZW1wbGF0ZUZpbGUsIHBsYXRmb3JtRHJvcEZp
bGU7IC8vIFJldHJpZXZlIHRoZQ0KCQkJICogZGlmZmVyZW50IHBsYXRmb3JtcyBhbmQgdGhlaXIg
aW5mbw0KCQkJICogZ2V0RGlmZmVyZW50UGxhdGZvcm1zRnJvbUxpc3QocGxhdGZvcm1TcGVjaWZp
Y1RlbXBsYXRlTGlzdCk7IC8vDQoJCQkgKiBQYXJzZXMgdGhlIHBsYXRmb3JtIGluZm8gYW5kIHJl
dHJpZXZlcyB0aGUgcGxhdGZvcm0gbmFtZSwgLy8NCgkJCSAqIHRlbXBsYXRlIGZpbGUsIGFuZCBk
cm9wIGZpbGUgZm9yIChpbnQgaSA9IDA7IGkgPA0KCQkJICogZGlmZmVyZW50UGxhdGZvcm1zLnNp
emUoKTsgaSsrKSB7DQoJCQkgKiBnZXRQbGF0Zm9ybVNwZWNzRnJvbUxpc3QoZGlmZmVyZW50UGxh
dGZvcm1zLmdldChpKS50b1N0cmluZygpKTsNCgkJCSAqIGRlc2NyaXB0aW9uID0gcGxhdGZvcm1T
cGVjcy5nZXQoMCkudG9TdHJpbmcoKTsNCgkJCSAqIHBsYXRmb3JtVGVtcGxhdGVGaWxlID0gcGxh
dGZvcm1TcGVjcy5nZXQoMSkudG9TdHJpbmcoKTsNCgkJCSAqIHBsYXRmb3JtRHJvcEZpbGUgPSBw
bGF0Zm9ybVNwZWNzLmdldCgyKS50b1N0cmluZygpOw0KCQkJICogcGxhdGZvcm1EZXNjcmlwdGlv
bi5hZGQoZGVzY3JpcHRpb24pOw0KCQkJICogcGxhdGZvcm1UZW1wbGF0ZVN0cmluZy5hZGQocmVh
ZEZpbGUocGxhdGZvcm1UZW1wbGF0ZUZpbGUpKTsNCgkJCSAqIHBsYXRmb3JtRHJvcEZpbGVOYW1l
LmFkZChwbGF0Zm9ybURyb3BGaWxlKTsgfSB9DQoJCQkgKi8NCg0KCQkJU3lzdGVtLm91dC5wcmlu
dGxuKCJCZWdpbjogR2VuZXJhdGluZyB0ZXN0IHJlc3VsdHMgaW5kZXggcGFnZSIpOw0KCQkJU3lz
dGVtLm91dC5wcmludGxuKCJQYXJzaW5nIFhNTCBmaWxlcyIpOw0KCQkJcGFyc2VVbml0VGVzdFht
bCgpOw0KCQkJU3lzdGVtLm91dC5wcmludGxuKCJQYXJzaW5nIGNvbXBpbGUgbG9ncyIpOw0KCQkJ
cGFyc2VDb21waWxlTG9ncygpOw0KCQkJU3lzdGVtLm91dC5wcmludGxuKCJFbmQ6IEdlbmVyYXRp
bmcgdGVzdCByZXN1bHRzIGluZGV4IHBhZ2UiKTsNCgkJCXdyaXRlVGVzdFJlc3VsdHNGaWxlKCk7
DQoJCQkvLyBGb3IgdGhlIHBsYXRmb3JtIGJ1aWxkLXBhZ2UsIHdyaXRlIHBsYXRmb3JtIGZpbGVz
LCBpbiBhZGRpdGlvbg0KCQkJLy8gdG8NCgkJCS8vIHRoZSBpbmRleCBmaWxlDQoJCQkvLyBpZiAo
cGxhdGZvcm1TcGVjaWZpY1RlbXBsYXRlTGlzdCAhPSAiIikgew0KCQkJLy8gd3JpdGVEcm9wRmls
ZXMoKTsNCgkJCS8vIH0NCgkJCS8vIGVsc2Ugew0KCQkJLy8gfQ0KCQl9DQoJCWNhdGNoIChFeGNl
cHRpb24gZSkgew0KCQkJdGhyb3cgbmV3IEJ1aWxkRXhjZXB0aW9uKGUpOw0KCQl9DQoJfQ0KDQoJ
cHJpdmF0ZSB2b2lkIHBhcnNlQ29tcGlsZUxvZ3MoKSB0aHJvd3MgVHJhbnNmb3JtZXJGYWN0b3J5
Q29uZmlndXJhdGlvbkVycm9yLCBJT0V4Y2VwdGlvbiwgVHJhbnNmb3JtZXJFeGNlcHRpb24gew0K
CQl0b3RhbEVycm9ycyA9IDA7DQoJCXRvdGFsQWNjZXNzID0gMDsNCgkJdG90YWxXYXJuaW5ncyA9
IDA7DQoJCXJvd0NvdW50ID0gMDsNCgkJdG90YWxkaXNjb3VyYWdlZEFjY2Vzc1dhcm5pbmdDb3Vu
dCA9IDA7DQoJCXRvdGFsZm9yYmlkZGVuQWNjZXNzV2FybmluZ0NvdW50ID0gMDsNCg0KCQlTdHJp
bmdCdWZmZXIgcmVwbGFjZVN0cmluZyA9IG5ldyBTdHJpbmdCdWZmZXIoKTsNCgkJcHJvY2Vzc0Nv
bXBpbGVMb2dzRGlyZWN0b3J5KGNvbXBpbGVMb2dzRGlyZWN0b3J5TmFtZSwgcmVwbGFjZVN0cmlu
Zyk7DQoNCgkJd3JpdGVGb3JtYXR0ZWRUb3RhbHMocmVwbGFjZVN0cmluZyk7DQoJCXdyaXRlQ29t
cGlsZVN1bW1hcnlUb3RhbHNBc1hNTChjb21waWxlTG9nc0RpcmVjdG9yeU5hbWUpOw0KDQoJCWlm
IChyZXBsYWNlU3RyaW5nLmxlbmd0aCgpID09IDApIHsNCgkJCXJlcGxhY2VTdHJpbmcuYXBwZW5k
KCJOb25lIik7DQoJCX0NCg0KCQl0ZXN0UmVzdWx0c1RlbXBsYXRlU3RyaW5nID0gcmVwbGFjZSh0
ZXN0UmVzdWx0c1RlbXBsYXRlU3RyaW5nLCBjb21waWxlTG9nc1Rva2VuLCBTdHJpbmcudmFsdWVP
ZihyZXBsYWNlU3RyaW5nKSk7DQoNCgl9DQoNCgkvKioNCgkgKiBAcGFyYW0gbWFpblN1bW1hcnlO
YW1lDQoJICogQHRocm93cyBUcmFuc2Zvcm1lckV4Y2VwdGlvbg0KCSAqIEB0aHJvd3MgSU9FeGNl
cHRpb24NCgkgKiBAdGhyb3dzIFRyYW5zZm9ybWVyRmFjdG9yeUNvbmZpZ3VyYXRpb25FcnJvcg0K
CSAqLw0KCXByaXZhdGUgdm9pZCB3cml0ZUNvbXBpbGVTdW1tYXJ5VG90YWxzQXNYTUwoU3RyaW5n
IG1haW5TdW1tYXJ5TmFtZSkgdGhyb3dzIFRyYW5zZm9ybWVyRmFjdG9yeUNvbmZpZ3VyYXRpb25F
cnJvciwgSU9FeGNlcHRpb24sIFRyYW5zZm9ybWVyRXhjZXB0aW9uIHsNCgkJU3RyaW5nIG91dHB1
dEZpbGVOYW1lID0gbWFpblN1bW1hcnlOYW1lICsgIlN1bW1hcnkiICsgIi54bWwiOw0KCQkvLyBk
ZWJ1Zw0KCQkvLyBTeXN0ZW0ub3V0LnByaW50bG4oImRyb3BEaXJlY3RvcnlOYW1lOiAiICsgZHJv
cERpcmVjdG9yeU5hbWUpOw0KCQkvLyBTeXN0ZW0ub3V0LnByaW50bG4oIm91dHB1dEZpbGVOYW1l
OiAiICsgb3V0cHV0RmlsZU5hbWUpOw0KCQkvLyBGaWxlIGZpbGVEaXIgPSBuZXcgRmlsZShkcm9w
RGlyZWN0b3J5TmFtZSk7DQoJCUZpbGUgZmlsZSA9IG5ldyBGaWxlKG91dHB1dEZpbGVOYW1lKTsN
CgkJZmlsZS5jcmVhdGVOZXdGaWxlKCk7DQoJCU5vZGUgcm9vdE5vZGUgPSBjcmVhdGVOZXdET00o
ImNvbXBpbGVTdW1tYXJ5Iik7DQoJCWFkZFN1bW1hcnlOb2RlVG8ocm9vdE5vZGUsICJ0b3RhbEJ1
bmRsZXMiLCByb3dDb3VudCk7DQoJCWFkZFN1bW1hcnlOb2RlVG8ocm9vdE5vZGUsICJ0b3RhbEVy
cm9ycyIsIHRvdGFsRXJyb3JzKTsNCgkJYWRkU3VtbWFyeU5vZGVUbyhyb290Tm9kZSwgInRvdGFs
V2FybmluZ3MiLCB0b3RhbFdhcm5pbmdzKTsNCgkJYWRkU3VtbWFyeU5vZGVUbyhyb290Tm9kZSwg
InRvdGFsQWNjZXNzIiwgdG90YWxBY2Nlc3MpOw0KCQlhZGRTdW1tYXJ5Tm9kZVRvKHJvb3ROb2Rl
LCAidG90YWxkaXNjb3VyYWdlZEFjY2Vzc1dhcm5pbmdDb3VudCIsIHRvdGFsZGlzY291cmFnZWRB
Y2Nlc3NXYXJuaW5nQ291bnQpOw0KCQlhZGRTdW1tYXJ5Tm9kZVRvKHJvb3ROb2RlLCAidG90YWxm
b3JiaWRkZW5BY2Nlc3NXYXJuaW5nQ291bnQiLCB0b3RhbGZvcmJpZGRlbkFjY2Vzc1dhcm5pbmdD
b3VudCk7DQoJCXNlcmlhbGl6ZShyb290Tm9kZSwgZmlsZSk7DQoNCgl9DQoNCglwcml2YXRlIHZv
aWQgc2VyaWFsaXplKE5vZGUgcm9vdE5vZGUsIEZpbGUgb3V0cHV0RmlsZSkgdGhyb3dzIFRyYW5z
Zm9ybWVyRmFjdG9yeUNvbmZpZ3VyYXRpb25FcnJvciwgSU9FeGNlcHRpb24sIFRyYW5zZm9ybWVy
RXhjZXB0aW9uIHsNCgkJLy8gSkFYUCB0cmFuc2Zvcm1hdGlvbg0KCQlEb2N1bWVudCBzb3VyY2VE
b2N1bWVudCA9IHJvb3ROb2RlLmdldE93bmVyRG9jdW1lbnQoKTsNCgkJU291cmNlIGRvbVNvdXJj
ZSA9IG5ldyBET01Tb3VyY2Uoc291cmNlRG9jdW1lbnQpOw0KCQlUcmFuc2Zvcm1lciBzZXJpYWxp
emVyID0gVHJhbnNmb3JtZXJGYWN0b3J5Lm5ld0luc3RhbmNlKCkubmV3VHJhbnNmb3JtZXIoKTsN
CgkJdHJ5IHsNCgkJCXNlcmlhbGl6ZXIuc2V0T3V0cHV0UHJvcGVydHkoT3V0cHV0S2V5cy5JTkRF
TlQsICJ5ZXMiKTsgLy8kTk9OLU5MUy0xJA0KCQkJc2VyaWFsaXplci5zZXRPdXRwdXRQcm9wZXJ0
eSgie2h0dHA6Ly94bWwuYXBhY2hlLm9yZy94c2x0fWluZGVudC1hbW91bnQiLCAiNCIpOyAvLyRO
T04tTkxTLTEkIC8vJE5PTi1OTFMtMiQNCgkJfQ0KCQljYXRjaCAoSWxsZWdhbEFyZ3VtZW50RXhj
ZXB0aW9uIGUpIHsNCgkJCS8vIHVuc3VwcG9ydGVkIHByb3BlcnRpZXMsIHNvIHdlJ2xsIGp1c3Qg
aWdub3JlDQoJCX0NCgkJV3JpdGVyIG91dHB1dFdyaXRlciA9IG51bGw7DQoJCXRyeSB7DQoJCQlv
dXRwdXRXcml0ZXIgPSBuZXcgRmlsZVdyaXRlcihvdXRwdXRGaWxlKTsNCgkJCXNlcmlhbGl6ZXIu
dHJhbnNmb3JtKGRvbVNvdXJjZSwgbmV3IFN0cmVhbVJlc3VsdChvdXRwdXRXcml0ZXIpKTsNCgkJ
fQ0KCQlmaW5hbGx5IHsNCgkJCWlmIChvdXRwdXRXcml0ZXIgIT0gbnVsbCkgew0KCQkJCW91dHB1
dFdyaXRlci5jbG9zZSgpOw0KCQkJfQ0KCQl9DQoJfQ0KDQoJLyoqDQoJICogPHN1bW1hcnlJdGVt
PiA8bmFtZT5zb21lTmFtZTwvbmFtZT4gPHZhbHVlPjg8L3ZhbHVlPiA8L3N1bW1hcnlJdGVtPg0K
CSAqIA0KCSAqIEBwYXJhbSBkb20NCgkgKi8NCglwcml2YXRlIHZvaWQgYWRkU3VtbWFyeU5vZGVU
byhOb2RlIHJvb3ROb2RlLCBTdHJpbmcgaXRlbU5hbWUsIGludCBpbnRkYXRhKSB7DQoJCURvY3Vt
ZW50IGRvbSA9IHJvb3ROb2RlLmdldE93bmVyRG9jdW1lbnQoKTsNCgkJRWxlbWVudCBzdW1tYXJ5
RWxlbWVudCA9IGRvbS5jcmVhdGVFbGVtZW50KCJzdW1tYXJ5SXRlbSIpOw0KDQoJCUVsZW1lbnQg
bmFtZUVsZW1lbnQgPSBkb20uY3JlYXRlRWxlbWVudCgibmFtZSIpOw0KCQlFbGVtZW50IHZhbHVl
RWxlbWVudCA9IGRvbS5jcmVhdGVFbGVtZW50KCJ2YWx1ZSIpOw0KDQoJCXN1bW1hcnlFbGVtZW50
LmFwcGVuZENoaWxkKG5hbWVFbGVtZW50KTsNCgkJc3VtbWFyeUVsZW1lbnQuYXBwZW5kQ2hpbGQo
dmFsdWVFbGVtZW50KTsNCg0KCQlUZXh0IG5hbWUgPSBkb20uY3JlYXRlVGV4dE5vZGUoaXRlbU5h
bWUpOw0KCQlUZXh0IHZhbHVlID0gZG9tLmNyZWF0ZVRleHROb2RlKFN0cmluZy52YWx1ZU9mKGlu
dGRhdGEpKTsNCgkJbmFtZUVsZW1lbnQuYXBwZW5kQ2hpbGQobmFtZSk7DQoJCXZhbHVlRWxlbWVu
dC5hcHBlbmRDaGlsZCh2YWx1ZSk7DQoNCgkJcm9vdE5vZGUuYXBwZW5kQ2hpbGQoc3VtbWFyeUVs
ZW1lbnQpOw0KCX0NCgkNCglwcml2YXRlIHZvaWQgYWRkU3VtbWFyeU5vZGVUbyhOb2RlIHJvb3RO
b2RlLCBTdHJpbmcgaXRlbU5hbWUsIGZsb2F0IGZsb2F0ZGF0YSkgew0KCQlEb2N1bWVudCBkb20g
PSByb290Tm9kZS5nZXRPd25lckRvY3VtZW50KCk7DQoJCUVsZW1lbnQgc3VtbWFyeUVsZW1lbnQg
PSBkb20uY3JlYXRlRWxlbWVudCgic3VtbWFyeUl0ZW0iKTsNCg0KCQlFbGVtZW50IG5hbWVFbGVt
ZW50ID0gZG9tLmNyZWF0ZUVsZW1lbnQoIm5hbWUiKTsNCgkJRWxlbWVudCB2YWx1ZUVsZW1lbnQg
PSBkb20uY3JlYXRlRWxlbWVudCgidmFsdWUiKTsNCg0KCQlzdW1tYXJ5RWxlbWVudC5hcHBlbmRD
aGlsZChuYW1lRWxlbWVudCk7DQoJCXN1bW1hcnlFbGVtZW50LmFwcGVuZENoaWxkKHZhbHVlRWxl
bWVudCk7DQoNCgkJVGV4dCBuYW1lID0gZG9tLmNyZWF0ZVRleHROb2RlKGl0ZW1OYW1lKTsNCgkJ
VGV4dCB2YWx1ZSA9IGRvbS5jcmVhdGVUZXh0Tm9kZShTdHJpbmcudmFsdWVPZihmbG9hdGRhdGEp
KTsNCgkJbmFtZUVsZW1lbnQuYXBwZW5kQ2hpbGQobmFtZSk7DQoJCXZhbHVlRWxlbWVudC5hcHBl
bmRDaGlsZCh2YWx1ZSk7DQoNCgkJcm9vdE5vZGUuYXBwZW5kQ2hpbGQoc3VtbWFyeUVsZW1lbnQp
Ow0KCX0NCg0KCXByaXZhdGUgTm9kZSBjcmVhdGVOZXdET00oU3RyaW5nIHJvb3RFbGVtZW50TmFt
ZSkgew0KCQlEb2N1bWVudCBkb2N1bWVudCA9IG51bGw7DQoJCU5vZGUgcm9vdE5vZGUgPSBudWxs
Ow0KCQl0cnkgew0KCQkJZG9jdW1lbnQgPSBEb2N1bWVudEJ1aWxkZXJGYWN0b3J5Lm5ld0luc3Rh
bmNlKCkubmV3RG9jdW1lbnRCdWlsZGVyKCkubmV3RG9jdW1lbnQoKTsNCgkJfQ0KCQljYXRjaCAo
UGFyc2VyQ29uZmlndXJhdGlvbkV4Y2VwdGlvbiBlKSB7DQoJCQlsb2coImV4Y2VwdGlvbiBjcmVh
dGluZyBkb2N1bWVudDogIiArIGUuZ2V0TWVzc2FnZSgpKTsgLy8kTk9OLU5MUy0xJA0KCQl9DQoJ
CWNhdGNoIChGYWN0b3J5Q29uZmlndXJhdGlvbkVycm9yIGUpIHsNCgkJCWxvZygiZXhjZXB0aW9u
IGNyZWF0aW5nIGRvY3VtZW50OiAiICsgZS5nZXRNZXNzYWdlKCkpOyAvLyROT04tTkxTLTEkDQoJ
CX0NCgkJaWYgKGRvY3VtZW50ICE9IG51bGwpIHsNCgkJCXJvb3ROb2RlID0gZG9jdW1lbnQuYXBw
ZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChyb290RWxlbWVudE5hbWUpKTsNCgkJfQ0K
CQlyZXR1cm4gcm9vdE5vZGU7DQoJfQ0KDQoJcHJpdmF0ZSB2b2lkIHByb2Nlc3NDb21waWxlTG9n
c0RpcmVjdG9yeShTdHJpbmcgZGlyZWN0b3J5TmFtZSwgU3RyaW5nQnVmZmVyIGJ1ZmZlcikgew0K
CQlpZiAoYnVmZmVyID09IG51bGwpIHsNCgkJCXRocm93IG5ldyBSdW50aW1lRXhjZXB0aW9uKCJ3
cml0ZSBidWZmZXIgY2FuIG5vdCBiZSBudWxsIik7DQoJCX0NCgkJRmlsZSBzb3VyY2VEaXJlY3Rv
cnkgPSBuZXcgRmlsZShkaXJlY3RvcnlOYW1lKTsNCg0KCQlpZiAoc291cmNlRGlyZWN0b3J5LmV4
aXN0cygpKSB7DQoJCQlpZiAoc291cmNlRGlyZWN0b3J5LmlzRmlsZSgpKSB7DQoJCQkJaWYgKHNv
dXJjZURpcmVjdG9yeS5nZXROYW1lKCkuZW5kc1dpdGgoIi5sb2ciKSkNCgkJCQkJcmVhZENvbXBp
bGVMb2coc291cmNlRGlyZWN0b3J5LmdldEFic29sdXRlUGF0aCgpLCBidWZmZXIpOw0KCQkJCWlm
IChzb3VyY2VEaXJlY3RvcnkuZ2V0TmFtZSgpLmVuZHNXaXRoKCIueG1sIikpDQoJCQkJCXBhcnNl
Q29tcGlsZUxvZyhzb3VyY2VEaXJlY3RvcnkuZ2V0QWJzb2x1dGVQYXRoKCksIGJ1ZmZlcik7DQoJ
CQl9DQoJCQlpZiAoc291cmNlRGlyZWN0b3J5LmlzRGlyZWN0b3J5KCkpIHsNCgkJCQlGaWxlW10g
bG9nRmlsZXMgPSBzb3VyY2VEaXJlY3RvcnkubGlzdEZpbGVzKCk7DQoJCQkJQXJyYXlzLnNvcnQo
bG9nRmlsZXMpOw0KCQkJCWZvciAoaW50IGogPSAwOyBqIDwgbG9nRmlsZXMubGVuZ3RoOyBqKysp
IHsNCgkJCQkJcHJvY2Vzc0NvbXBpbGVMb2dzRGlyZWN0b3J5KGxvZ0ZpbGVzW2pdLmdldEFic29s
dXRlUGF0aCgpLCBidWZmZXIpOw0KCQkJCX0NCgkJCX0NCgkJfQ0KCQllbHNlIHsNCgkJCWlmIChk
aXJlY3RvcnlOYW1lLmxlbmd0aCgpID4gMCkgew0KCQkJCWxvZygiRGlyZWN0b3J5IGRpZCBub3Qg
ZXhpc3Q6ICIgKyBkaXJlY3RvcnlOYW1lKTsNCgkJCX0NCgkJfQ0KDQoJfQ0KDQoJLyoqDQoJICog
DQoJICovDQoJcHJpdmF0ZSB2b2lkIHdyaXRlRm9ybWF0dGVkVG90YWxzKFN0cmluZ0J1ZmZlciBi
dWZmZXIpIHsNCg0KCQlpZiAoYnVmZmVyID09IG51bGwpIHsNCgkJCXRocm93IG5ldyBSdW50aW1l
RXhjZXB0aW9uKCJ3cml0ZSBidWZmZXIgY2FuIG5vdCBiZSBudWxsIik7DQoJCX0NCg0KCQlTdHJp
bmcgcm93dHlwZSA9ICJub3JtYWx0YWJsZSI7DQoJCWlmICh0b3RhbEVycm9ycyA+IDApIHsNCgkJ
CXJvd3R5cGUgPSAiZXJyb3J0YWJsZSI7DQoJCX0NCgkJZWxzZSBpZiAodG90YWxXYXJuaW5ncyA+
IDApIHsNCgkJCXJvd3R5cGUgPSAid2FybmluZ3RhYmxlIjsNCgkJCWlmICh0b3RhbFdhcm5pbmdz
ID4gMjAwKSB7DQoJCQkJcm93dHlwZSA9ICJleHRyYVdhcm5pbmdUYWJsZSI7DQoJCQl9DQoJCX0N
CgkJLy8NCgkJLy8gU3lzdGVtLm91dC5wcmludGxuKCJ0b3RhbEVycm9yczogIiArIHRvdGFsRXJy
b3JzKTsgLy8gLA0KCQkvLyBsb2coInRvdGFsRXJyb3JzOiAiICsgdG90YWxFcnJvcnMsIFByb2pl
Y3QuTVNHX0lORk8pOw0KDQoJCWJ1ZmZlci5hcHBlbmQoIjx0ciBDTEFTUz1cIiIgKyByb3d0eXBl
ICsgIiAiICsgImJvbGQiICsgIlwiPiIgKyBFT0wpLmFwcGVuZCgiPHRkPiIgKyAiVE9UQUxTICAo
IiArIHJvd0NvdW50ICsgIikiICsgIjwvdGQ+IikuYXBwZW5kKCI8dGQgQ0xBU1M9XCJudW1lcmlj
XCI+IiArIHRvdGFsRXJyb3JzICsgIjwvdGQ+IikuYXBwZW5kKCI8dGQgQ0xBU1M9XCJudW1lcmlj
XCI+IiArIHRvdGFsV2FybmluZ3MgKyAiPC90ZD4iKS5hcHBlbmQoIjx0ZCBDTEFTUz1cIm51bWVy
aWNcIj4iICsgdG90YWxmb3JiaWRkZW5BY2Nlc3NXYXJuaW5nQ291bnQgKyAiPC90ZD4iKS5hcHBl
bmQoIjx0ZCBDTEFTUz1cIm51bWVyaWNcIj4iICsgdG90YWxkaXNjb3VyYWdlZEFjY2Vzc1dhcm5p
bmdDb3VudCArICI8L3RkPiIpLmFwcGVuZChFT0wgKyAiPC90cj4iICsgRU9MKTsNCg0KCX0NCg0K
CXByaXZhdGUgdm9pZCByZWFkQ29tcGlsZUxvZyhTdHJpbmcgbG9nLCBTdHJpbmdCdWZmZXIgYnVm
ZmVyKSB7DQoJCVN0cmluZyBmaWxlQ29udGVudHMgPSByZWFkRmlsZShsb2cpOw0KDQoJCWludCBl
cnJvckNvdW50ID0gY291bnRDb21waWxlRXJyb3JzKGZpbGVDb250ZW50cyk7DQoJCWludCB3YXJu
aW5nQ291bnQgPSBjb3VudENvbXBpbGVXYXJuaW5ncyhmaWxlQ29udGVudHMpOw0KCQlpbnQgZm9y
YmlkZGVuV2FybmluZ0NvdW50ID0gY291bnRGb3JiaWRkZW5XYXJuaW5ncyhmaWxlQ29udGVudHMp
Ow0KCQlpbnQgZGlzY291cmFnZWRXYXJuaW5nQ291bnQgPSBjb3VudERpc2NvdXJhZ2VkV2Fybmlu
Z3MoZmlsZUNvbnRlbnRzKTsNCgkJLy8gdXNlIHdpbGRjYXJkIGluIHBsYWNlIG9mIHZlcnNpb24g
bnVtYmVyIG9uIGRpcmVjdG9yeSBuYW1lcw0KCQlTdHJpbmcgbG9nTmFtZSA9IGxvZy5zdWJzdHJp
bmcoZ2V0Q29tcGlsZUxvZ3NEaXJlY3RvcnlOYW1lKCkubGVuZ3RoKCkgKyAxKTsNCgkJU3RyaW5n
QnVmZmVyIHN0cmluZ0J1ZmZlciA9IG5ldyBTdHJpbmdCdWZmZXIobG9nTmFtZSk7DQoJCXN0cmlu
Z0J1ZmZlci5yZXBsYWNlKGxvZ05hbWUuaW5kZXhPZigiXyIpICsgMSwgbG9nTmFtZS5pbmRleE9m
KEZpbGUuc2VwYXJhdG9yLCBsb2dOYW1lLmluZGV4T2YoIl8iKSArIDEpLCAiKiIpOw0KCQlsb2dO
YW1lID0gbmV3IFN0cmluZyhzdHJpbmdCdWZmZXIpOw0KCQlmb3JtYXRDb21waWxlRXJyb3JSb3co
bG9nLCBlcnJvckNvdW50LCB3YXJuaW5nQ291bnQsIGZvcmJpZGRlbldhcm5pbmdDb3VudCwgZGlz
Y291cmFnZWRXYXJuaW5nQ291bnQsIGJ1ZmZlcik7DQoJfQ0KDQoJcHJpdmF0ZSB2b2lkIHBhcnNl
Q29tcGlsZUxvZyhTdHJpbmcgbG9nLCBTdHJpbmdCdWZmZXIgc3RyaW5nQnVmZmVyKSB7DQoJCWlu
dCBlcnJvckNvdW50ID0gMDsNCgkJaW50IHdhcm5pbmdDb3VudCA9IDA7DQoJCWludCBmb3JiaWRk
ZW5XYXJuaW5nQ291bnQgPSAwOw0KCQlpbnQgZGlzY291cmFnZWRXYXJuaW5nQ291bnQgPSAwOw0K
DQoJCUZpbGUgZmlsZSA9IG5ldyBGaWxlKGxvZyk7DQoJCURvY3VtZW50IGFEb2N1bWVudCA9IG51
bGw7DQoJCUJ1ZmZlcmVkUmVhZGVyIHJlYWRlciA9IG51bGw7DQoJCXRyeSB7DQoJCQlyZWFkZXIg
PSBuZXcgQnVmZmVyZWRSZWFkZXIobmV3IEZpbGVSZWFkZXIoZmlsZSkpOw0KCQkJSW5wdXRTb3Vy
Y2UgaW5wdXRTb3VyY2UgPSBuZXcgSW5wdXRTb3VyY2UocmVhZGVyKTsNCgkJCURvY3VtZW50QnVp
bGRlckZhY3RvcnkgZmFjdG9yeSA9IERvY3VtZW50QnVpbGRlckZhY3RvcnkubmV3SW5zdGFuY2Uo
KTsNCgkJCURvY3VtZW50QnVpbGRlciBidWlsZGVyID0gZmFjdG9yeS5uZXdEb2N1bWVudEJ1aWxk
ZXIoKTsNCgkJCWFEb2N1bWVudCA9IGJ1aWxkZXIucGFyc2UoaW5wdXRTb3VyY2UpOw0KCQl9DQoJ
CWNhdGNoIChTQVhFeGNlcHRpb24gZSkgew0KCQkJZS5wcmludFN0YWNrVHJhY2UoKTsNCgkJfQ0K
CQljYXRjaCAoSU9FeGNlcHRpb24gZSkgew0KCQkJZS5wcmludFN0YWNrVHJhY2UoKTsNCgkJfQ0K
CQljYXRjaCAoUGFyc2VyQ29uZmlndXJhdGlvbkV4Y2VwdGlvbiBlKSB7DQoJCQllLnByaW50U3Rh
Y2tUcmFjZSgpOw0KCQl9DQoJCWZpbmFsbHkgew0KCQkJaWYgKHJlYWRlciAhPSBudWxsKSB7DQoJ
CQkJdHJ5IHsNCgkJCQkJcmVhZGVyLmNsb3NlKCk7DQoJCQkJfQ0KCQkJCWNhdGNoIChJT0V4Y2Vw
dGlvbiBlKSB7DQoJCQkJCS8vIGlnbm9yZQ0KCQkJCX0NCgkJCX0NCgkJfQ0KDQoJCWlmIChhRG9j
dW1lbnQgPT0gbnVsbCkgew0KCQkJbG9nKCJjb3VsZCBub3QgcGFyc2UgeG1sIGluIGxvZyBmaWxl
OiAiICsgbG9nLCBQcm9qZWN0Lk1TR19FUlIpOw0KCQkJcmV0dXJuOw0KCQl9DQoNCgkJLy8gR2V0
IHN1bW1hcnkgb2YgcHJvYmxlbXMuDQoJCS8vIEJ5IEFQSSwgbm9kZUxpc3Qgc2hvdWxkIG5ldmVy
IGJlIG51bGwuDQoJCU5vZGVMaXN0IG5vZGVMaXN0ID0gYURvY3VtZW50LmdldEVsZW1lbnRzQnlU
YWdOYW1lKCJwcm9ibGVtIik7DQoNCgkJaW50IGxlbmd0aCA9IG5vZGVMaXN0LmdldExlbmd0aCgp
Ow0KCQlmb3IgKGludCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7DQoJCQlOb2RlIHByb2JsZW1O
b2RlID0gbm9kZUxpc3QuaXRlbShpKTsNCgkJCU5hbWVkTm9kZU1hcCBhTmFtZWROb2RlTWFwID0g
cHJvYmxlbU5vZGUuZ2V0QXR0cmlidXRlcygpOw0KCQkJTm9kZSBzZXZlcml0eU5vZGUgPSBhTmFt
ZWROb2RlTWFwLmdldE5hbWVkSXRlbSgic2V2ZXJpdHkiKTsNCgkJCU5vZGUgaWROb2RlID0gYU5h
bWVkTm9kZU1hcC5nZXROYW1lZEl0ZW0oImlkIik7DQoJCQlpZiAoc2V2ZXJpdHlOb2RlICE9IG51
bGwpIHsNCgkJCQlTdHJpbmcgc2V2ZXJpdHlOb2RlVmFsdWUgPSBzZXZlcml0eU5vZGUuZ2V0Tm9k
ZVZhbHVlKCk7DQoJCQkJaWYgKFdBUk5JTkdfU0VWRVJJVFkuZXF1YWxzKHNldmVyaXR5Tm9kZVZh
bHVlKSkgew0KCQkJCQkvLyB0aGlzIGlzIGEgd2FybmluZw0KCQkJCQkvLyBuZWVkIHRvIGNoZWNr
IHRoZSBpZA0KCQkJCQlTdHJpbmcgbm9kZVZhbHVlID0gaWROb2RlLmdldE5vZGVWYWx1ZSgpOw0K
CQkJCQlpZiAoRm9yYmlkZGVuUmVmZXJlbmNlSUQuZXF1YWxzKG5vZGVWYWx1ZSkpIHsNCgkJCQkJ
CWZvcmJpZGRlbldhcm5pbmdDb3VudCsrOw0KCQkJCQl9DQoJCQkJCWVsc2UgaWYgKERpc2NvdXJh
Z2VkUmVmZXJlbmNlSUQuZXF1YWxzKG5vZGVWYWx1ZSkpIHsNCgkJCQkJCWRpc2NvdXJhZ2VkV2Fy
bmluZ0NvdW50Kys7DQoJCQkJCX0NCgkJCQkJZWxzZSB7DQoJCQkJCQl3YXJuaW5nQ291bnQrKzsN
CgkJCQkJfQ0KCQkJCX0NCgkJCQllbHNlIGlmIChFUlJPUl9TRVZFUklUWS5lcXVhbHMoc2V2ZXJp
dHlOb2RlVmFsdWUpKSB7DQoJCQkJCS8vIHRoaXMgaXMgYW4gZXJyb3INCgkJCQkJZXJyb3JDb3Vu
dCsrOw0KCQkJCX0NCgkJCX0NCgkJfQ0KDQoJCS8vIHVzZSB3aWxkY2FyZCBpbiBwbGFjZSBvZiB2
ZXJzaW9uIG51bWJlciBvbiBkaXJlY3RvcnkgbmFtZXMNCgkJLy8gU3lzdGVtLm91dC5wcmludGxu
KGxvZyArICIvbiIpOw0KCQlTdHJpbmcgbG9nTmFtZSA9IGxvZy5zdWJzdHJpbmcoZ2V0Q29tcGls
ZUxvZ3NEaXJlY3RvcnlOYW1lKCkubGVuZ3RoKCkgKyAxKTsNCgkJU3RyaW5nQnVmZmVyIGJ1ZmZl
ciA9IG5ldyBTdHJpbmdCdWZmZXIobG9nTmFtZSk7DQoJCWJ1ZmZlci5yZXBsYWNlKGxvZ05hbWUu
aW5kZXhPZigiXyIpICsgMSwgbG9nTmFtZS5pbmRleE9mKEZpbGUuc2VwYXJhdG9yLCBsb2dOYW1l
LmluZGV4T2YoIl8iKSArIDEpLCAiKiIpOw0KCQlsb2dOYW1lID0gbmV3IFN0cmluZyhidWZmZXIp
Ow0KDQoJCWZvcm1hdENvbXBpbGVFcnJvclJvdyhsb2cucmVwbGFjZUFsbCgiLnhtbCQiLCAiLmh0
bWwiKSwgZXJyb3JDb3VudCwgd2FybmluZ0NvdW50LCBmb3JiaWRkZW5XYXJuaW5nQ291bnQsIGRp
c2NvdXJhZ2VkV2FybmluZ0NvdW50LCBzdHJpbmdCdWZmZXIpOw0KCX0NCg0KCXByaXZhdGUgc3Rh
dGljIGJ5dGVbXSBnZXRGaWxlQnl0ZUNvbnRlbnQoU3RyaW5nIGZpbGVOYW1lKSB0aHJvd3MgSU9F
eGNlcHRpb24gew0KCQlJbnB1dFN0cmVhbSBzdHJlYW0gPSBudWxsOw0KCQl0cnkgew0KCQkJRmls
ZSBmaWxlID0gbmV3IEZpbGUoZmlsZU5hbWUpOw0KCQkJc3RyZWFtID0gbmV3IEZpbGVJbnB1dFN0
cmVhbShmaWxlKTsNCgkJCXJldHVybiBnZXRJbnB1dFN0cmVhbUFzQnl0ZUFycmF5KHN0cmVhbSwg
KGludCkgZmlsZS5sZW5ndGgoKSk7DQoJCX0NCgkJZmluYWxseSB7DQoJCQlpZiAoc3RyZWFtICE9
IG51bGwpIHsNCgkJCQl0cnkgew0KCQkJCQlzdHJlYW0uY2xvc2UoKTsNCgkJCQl9DQoJCQkJY2F0
Y2ggKElPRXhjZXB0aW9uIGUpIHsNCgkJCQkJLy8gaWdub3JlDQoJCQkJfQ0KCQkJfQ0KCQl9DQoJ
fQ0KDQoJLyoqDQoJICogUmV0dXJucyB0aGUgZ2l2ZW4gaW5wdXQgc3RyZWFtJ3MgY29udGVudHMg
YXMgYSBieXRlIGFycmF5LiBJZiBhIGxlbmd0aA0KCSAqIGlzIHNwZWNpZmllZCAoaWUuIGlmIGxl
bmd0aCAhPSAtMSksIG9ubHkgbGVuZ3RoIGJ5dGVzIGFyZSByZXR1cm5lZC4NCgkgKiBPdGhlcndp
c2UgYWxsIGJ5dGVzIGluIHRoZSBzdHJlYW0gYXJlIHJldHVybmVkLiBOb3RlIHRoaXMgZG9lc24n
dCBjbG9zZQ0KCSAqIHRoZSBzdHJlYW0uDQoJICogDQoJICogQHRocm93cyBJT0V4Y2VwdGlvbg0K
CSAqICAgICAgICAgICAgIGlmIGEgcHJvYmxlbSBvY2N1cmVkIHJlYWRpbmcgdGhlIHN0cmVhbS4N
CgkgKi8NCglwcml2YXRlIHN0YXRpYyBieXRlW10gZ2V0SW5wdXRTdHJlYW1Bc0J5dGVBcnJheShJ
bnB1dFN0cmVhbSBzdHJlYW0sIGludCBsZW5ndGgpIHRocm93cyBJT0V4Y2VwdGlvbiB7DQoJCWJ5
dGVbXSBjb250ZW50czsNCgkJaWYgKGxlbmd0aCA9PSAtMSkgew0KCQkJY29udGVudHMgPSBuZXcg
Ynl0ZVswXTsNCgkJCWludCBjb250ZW50c0xlbmd0aCA9IDA7DQoJCQlpbnQgYW1vdW50UmVhZCA9
IC0xOw0KCQkJZG8gew0KCQkJCWludCBhbW91bnRSZXF1ZXN0ZWQgPSBNYXRoLm1heChzdHJlYW0u
YXZhaWxhYmxlKCksIERFRkFVTFRfUkVBRElOR19TSVpFKTsgLy8gcmVhZA0KCQkJCS8vIGF0DQoJ
CQkJLy8gbGVhc3QNCgkJCQkvLyA4Sw0KDQoJCQkJLy8gcmVzaXplIGNvbnRlbnRzIGlmIG5lZWRl
ZA0KCQkJCWlmIChjb250ZW50c0xlbmd0aCArIGFtb3VudFJlcXVlc3RlZCA+IGNvbnRlbnRzLmxl
bmd0aCkgew0KCQkJCQlTeXN0ZW0uYXJyYXljb3B5KGNvbnRlbnRzLCAwLCBjb250ZW50cyA9IG5l
dyBieXRlW2NvbnRlbnRzTGVuZ3RoICsgYW1vdW50UmVxdWVzdGVkXSwgMCwgY29udGVudHNMZW5n
dGgpOw0KCQkJCX0NCg0KCQkJCS8vIHJlYWQgYXMgbWFueSBieXRlcyBhcyBwb3NzaWJsZQ0KCQkJ
CWFtb3VudFJlYWQgPSBzdHJlYW0ucmVhZChjb250ZW50cywgY29udGVudHNMZW5ndGgsIGFtb3Vu
dFJlcXVlc3RlZCk7DQoNCgkJCQlpZiAoYW1vdW50UmVhZCA+IDApIHsNCgkJCQkJLy8gcmVtZW1i
ZXIgbGVuZ3RoIG9mIGNvbnRlbnRzDQoJCQkJCWNvbnRlbnRzTGVuZ3RoICs9IGFtb3VudFJlYWQ7
DQoJCQkJfQ0KCQkJfQ0KCQkJd2hpbGUgKGFtb3VudFJlYWQgIT0gLTEpOw0KDQoJCQkvLyByZXNp
emUgY29udGVudHMgaWYgbmVjZXNzYXJ5DQoJCQlpZiAoY29udGVudHNMZW5ndGggPCBjb250ZW50
cy5sZW5ndGgpIHsNCgkJCQlTeXN0ZW0uYXJyYXljb3B5KGNvbnRlbnRzLCAwLCBjb250ZW50cyA9
IG5ldyBieXRlW2NvbnRlbnRzTGVuZ3RoXSwgMCwgY29udGVudHNMZW5ndGgpOw0KCQkJfQ0KCQl9
DQoJCWVsc2Ugew0KCQkJY29udGVudHMgPSBuZXcgYnl0ZVtsZW5ndGhdOw0KCQkJaW50IGxlbiA9
IDA7DQoJCQlpbnQgcmVhZFNpemUgPSAwOw0KCQkJd2hpbGUgKChyZWFkU2l6ZSAhPSAtMSkgJiYg
KGxlbiAhPSBsZW5ndGgpKSB7DQoJCQkJLy8gU2VlIFBSIDFGTVM4OVUNCgkJCQkvLyBXZSByZWNv
cmQgZmlyc3QgdGhlIHJlYWQgc2l6ZS4gSW4gdGhpcyBjYXNlIGxlbiBpcyB0aGUNCgkJCQkvLyBh
Y3R1YWwgcmVhZCBzaXplLg0KCQkJCWxlbiArPSByZWFkU2l6ZTsNCgkJCQlyZWFkU2l6ZSA9IHN0
cmVhbS5yZWFkKGNvbnRlbnRzLCBsZW4sIGxlbmd0aCAtIGxlbik7DQoJCQl9DQoJCX0NCg0KCQly
ZXR1cm4gY29udGVudHM7DQoJfQ0KDQoJcHVibGljIFN0cmluZyByZWFkRmlsZShTdHJpbmcgZmls
ZU5hbWUpIHsNCgkJYnl0ZVtdIGFCeXRlQXJyYXkgPSBudWxsOw0KCQl0cnkgew0KCQkJYUJ5dGVB
cnJheSA9IGdldEZpbGVCeXRlQ29udGVudChmaWxlTmFtZSk7DQoJCX0NCgkJY2F0Y2ggKElPRXhj
ZXB0aW9uIGUpIHsNCgkJCWUucHJpbnRTdGFja1RyYWNlKCk7DQoJCX0NCgkJaWYgKGFCeXRlQXJy
YXkgPT0gbnVsbCkgew0KCQkJcmV0dXJuICIiOw0KCQl9DQoJCXJldHVybiBuZXcgU3RyaW5nKGFC
eXRlQXJyYXkpOw0KCX0NCg0KCXByaXZhdGUgaW50IGNvdW50Q29tcGlsZUVycm9ycyhTdHJpbmcg
YVN0cmluZykgew0KCQlyZXR1cm4gZXh0cmFjdE51bWJlcihhU3RyaW5nLCAiZXJyb3IiKTsNCgl9
DQoNCglwcml2YXRlIGludCBjb3VudENvbXBpbGVXYXJuaW5ncyhTdHJpbmcgYVN0cmluZykgew0K
CQlyZXR1cm4gZXh0cmFjdE51bWJlcihhU3RyaW5nLCAid2FybmluZyIpOw0KCX0NCg0KCXByaXZh
dGUgaW50IGNvdW50Rm9yYmlkZGVuV2FybmluZ3MoU3RyaW5nIGFTdHJpbmcpIHsNCgkJcmV0dXJu
IGV4dHJhY3ROdW1iZXIoYVN0cmluZywgIkFjY2VzcyByZXN0cmljdGlvbjoiKTsNCgl9DQoNCglw
cml2YXRlIGludCBjb3VudERpc2NvdXJhZ2VkV2FybmluZ3MoU3RyaW5nIGFTdHJpbmcpIHsNCgkJ
cmV0dXJuIGV4dHJhY3ROdW1iZXIoYVN0cmluZywgIkRpc2NvdXJhZ2VkIGFjY2VzczoiKTsNCgl9
DQoNCglwcml2YXRlIGludCBleHRyYWN0TnVtYmVyKFN0cmluZyBhU3RyaW5nLCBTdHJpbmcgZW5k
VG9rZW4pIHsNCgkJaW50IGVuZEluZGV4ID0gYVN0cmluZy5sYXN0SW5kZXhPZihlbmRUb2tlbik7
DQoJCWlmIChlbmRJbmRleCA9PSAtMSkgew0KCQkJcmV0dXJuIDA7DQoJCX0NCg0KCQlpbnQgc3Rh
cnRJbmRleCA9IGVuZEluZGV4Ow0KCQl3aGlsZSAoc3RhcnRJbmRleCA+PSAwICYmIGFTdHJpbmcu
Y2hhckF0KHN0YXJ0SW5kZXgpICE9ICcoJyAmJiBhU3RyaW5nLmNoYXJBdChzdGFydEluZGV4KSAh
PSAnLCcpIHsNCgkJCXN0YXJ0SW5kZXgtLTsNCgkJfQ0KDQoJCVN0cmluZyBjb3VudCA9IGFTdHJp
bmcuc3Vic3RyaW5nKHN0YXJ0SW5kZXggKyAxLCBlbmRJbmRleCkudHJpbSgpOw0KCQl0cnkgew0K
CQkJcmV0dXJuIEludGVnZXIucGFyc2VJbnQoY291bnQpOw0KCQl9DQoJCWNhdGNoIChOdW1iZXJG
b3JtYXRFeGNlcHRpb24gZSkgew0KCQkJcmV0dXJuIDA7DQoJCX0NCg0KCX0NCg0KCXB1YmxpYyBi
b29sZWFuIGluY2x1ZGVBbGw7DQoJcHJpdmF0ZSBpbnQgdG90YWxFcnJvcnM7DQoJcHJpdmF0ZSBp
bnQgdG90YWxBY2Nlc3M7DQoJcHJpdmF0ZSBpbnQgdG90YWxXYXJuaW5nczsNCglwcml2YXRlIGlu
dCByb3dDb3VudDsNCglwcml2YXRlIGludCB0b3RhbGRpc2NvdXJhZ2VkQWNjZXNzV2FybmluZ0Nv
dW50Ow0KCXByaXZhdGUgaW50IHRvdGFsZm9yYmlkZGVuQWNjZXNzV2FybmluZ0NvdW50Ow0KDQoJ
cHJpdmF0ZSB2b2lkIHBhcnNlVW5pdFRlc3RYbWwoKSB0aHJvd3MgSU9FeGNlcHRpb24sIFRyYW5z
Zm9ybWVyRmFjdG9yeUNvbmZpZ3VyYXRpb25FcnJvciwgVHJhbnNmb3JtZXJFeGNlcHRpb24gew0K
DQoJCUZpbGUgc291cmNlRGlyZWN0b3J5ID0gbmV3IEZpbGUoeG1sRGlyZWN0b3J5TmFtZSk7DQoN
CgkJaWYgKHNvdXJjZURpcmVjdG9yeS5leGlzdHMoKSkgew0KDQoJCQlpbnQgZ3JhbmRUb3RhbEVy
cm9ycyA9IDA7DQoJCQlpbnQgZ3JhbmRUb3RhbFRlc3RzID0gMDsNCgkJCWZsb2F0IGdyYW5kVG90
YWxUaW1lID0gMDsNCg0KCQkJU3RyaW5nIHJlcGxhY2VTdHJpbmcgPSAiIjsNCg0KCQkJRmlsZVtd
IHhtbEZpbGVOYW1lcyA9IHNvdXJjZURpcmVjdG9yeS5saXN0RmlsZXMoKTsNCgkJCUFycmF5cy5z
b3J0KHhtbEZpbGVOYW1lcyk7DQoNCgkJCWZvciAoaW50IGkgPSAwOyBpIDwgeG1sRmlsZU5hbWVz
Lmxlbmd0aDsgaSsrKSB7DQoJCQkJaWYgKHhtbEZpbGVOYW1lc1tpXS5nZXRQYXRoKCkuZW5kc1dp
dGgoIi54bWwiKSkgew0KCQkJCQlTdHJpbmcgZnVsbE5hbWUgPSB4bWxGaWxlTmFtZXNbaV0uZ2V0
UGF0aCgpOw0KCQkJCQlVbml0VGVzdFJlc3VsdHMgdW5pdFRlc3RSZXN1bHRzID0gY291bnRFcnJv
cnMoZnVsbE5hbWUpOw0KCQkJCQlpbnQgZXJyb3JDb3VudCA9IHVuaXRUZXN0UmVzdWx0cy5nZXRF
cnJvcnMoKSArIHVuaXRUZXN0UmVzdWx0cy5nZXRGYWlsdXJlcygpOw0KCQkJCQlpZiAoZXJyb3JD
b3VudCAhPSAwKSB7DQoJCQkJCQlTdHJpbmcgdGVzdE5hbWUgPSB4bWxGaWxlTmFtZXNbaV0uZ2V0
TmFtZSgpLnN1YnN0cmluZygwLCB4bWxGaWxlTmFtZXNbaV0uZ2V0TmFtZSgpLmxlbmd0aCgpIC0g
NCk7DQoJCQkJCQl0ZXN0UmVzdWx0c1dpdGhQcm9ibGVtcyA9IHRlc3RSZXN1bHRzV2l0aFByb2Js
ZW1zLmNvbmNhdChFT0wgKyB0ZXN0TmFtZSk7DQoJCQkJCX0NCg0KCQkJCQlTdHJpbmcgdG1wID0g
Zm9ybWF0VGVzdFJvdyh4bWxGaWxlTmFtZXNbaV0uZ2V0UGF0aCgpLCBlcnJvckNvdW50LCB1bml0
VGVzdFJlc3VsdHMuZ2V0VG90YWxUZXN0cygpLCB1bml0VGVzdFJlc3VsdHMuZ2V0VGltZSgpKTsN
CgkJCQkJcmVwbGFjZVN0cmluZyA9IHJlcGxhY2VTdHJpbmcgKyB0bXA7DQoNCgkJCQkJaWYgKGVy
cm9yQ291bnQgPiAwKSB7DQoJCQkJCQlncmFuZFRvdGFsRXJyb3JzID0gZ3JhbmRUb3RhbEVycm9y
cyArIGVycm9yQ291bnQ7DQoJCQkJCX0NCgkJCQkJZWxzZSBpZiAoZXJyb3JDb3VudCA8IDApIHsN
CgkJCQkJCWdyYW5kVG90YWxFcnJvcnMgPSBncmFuZFRvdGFsRXJyb3JzICsgMTsNCgkJCQkJfQ0K
DQoJCQkJCWlmICh1bml0VGVzdFJlc3VsdHMuZ2V0VG90YWxUZXN0cygpID4gMCkgew0KCQkJCQkJ
Z3JhbmRUb3RhbFRlc3RzID0gZ3JhbmRUb3RhbFRlc3RzICsgdW5pdFRlc3RSZXN1bHRzLmdldFRv
dGFsVGVzdHMoKTsNCgkJCQkJfQ0KCQkJCQkNCgkJCQkJaWYgKHVuaXRUZXN0UmVzdWx0cy5nZXRU
aW1lKCkgPiAwKSB7DQoJCQkJCQlncmFuZFRvdGFsVGltZSA9IGdyYW5kVG90YWxUaW1lICsgdW5p
dFRlc3RSZXN1bHRzLmdldFRpbWUoKTsNCgkJCQkJfQ0KDQoJCQkJfQ0KCQkJfQ0KDQoJCQlTdHJp
bmcgdG1wID0gZm9ybWF0VGVzdFJvdygiVE9UQUxTIiwgZ3JhbmRUb3RhbEVycm9ycywgZ3JhbmRU
b3RhbFRlc3RzLCBncmFuZFRvdGFsVGltZSk7DQoJCQlyZXBsYWNlU3RyaW5nID0gcmVwbGFjZVN0
cmluZyArIHRtcDsNCg0KCQkJdGVzdFJlc3VsdHNUZW1wbGF0ZVN0cmluZyA9IHJlcGxhY2UodGVz
dFJlc3VsdHNUZW1wbGF0ZVN0cmluZywgdGVzdFJlc3VsdHNUb2tlbiwgcmVwbGFjZVN0cmluZyk7
DQoJCQl0ZXN0c1JhbiA9IHRydWU7DQoNCgkJCXdyaXRlVW5pdFRlc3RTdW1tYXJ5KGRyb3BEaXJl
Y3RvcnlOYW1lLCBncmFuZFRvdGFsRXJyb3JzLCBncmFuZFRvdGFsVGVzdHMsIGdyYW5kVG90YWxU
aW1lKTsNCg0KCQl9DQoJCWVsc2Ugew0KCQkJdGVzdHNSYW4gPSBmYWxzZTsNCgkJCVN5c3RlbS5v
dXQucHJpbnRsbigiVGVzdCByZXN1bHRzIG5vdCBmb3VuZCBpbiAiICsgc291cmNlRGlyZWN0b3J5
LmdldEFic29sdXRlUGF0aCgpKTsNCgkJfQ0KDQoJfQ0KDQoJLyoqDQoJICogQHBhcmFtIGdyYW5k
VG90YWxFcnJvcnMNCgkgKiBAcGFyYW0gZ3JhbmRUb3RhbFRlc3RzDQoJICogQHRocm93cyBJT0V4
Y2VwdGlvbg0KCSAqIEB0aHJvd3MgVHJhbnNmb3JtZXJFeGNlcHRpb24NCgkgKiBAdGhyb3dzIFRy
YW5zZm9ybWVyRmFjdG9yeUNvbmZpZ3VyYXRpb25FcnJvcg0KCSAqLw0KCXByaXZhdGUgdm9pZCB3
cml0ZVVuaXRUZXN0U3VtbWFyeShTdHJpbmcgZmlsZW5hbWUsIGludCBncmFuZFRvdGFsRXJyb3Jz
LCBpbnQgZ3JhbmRUb3RhbFRlc3RzLCBmbG9hdCBncmFuZFRvdGFsVGltZSkgdGhyb3dzIElPRXhj
ZXB0aW9uLCBUcmFuc2Zvcm1lckZhY3RvcnlDb25maWd1cmF0aW9uRXJyb3IsIFRyYW5zZm9ybWVy
RXhjZXB0aW9uIHsNCgkJU3RyaW5nIG91dHB1dEZpbGVOYW1lID0gZmlsZW5hbWUgKyAiL3VuaXRU
ZXN0c1N1bW1hcnkiICsgIi54bWwiOw0KCQlTeXN0ZW0ub3V0LnByaW50bG4oInVuaXRUZXN0c1N1
bW1hcnk6ICIgKyBvdXRwdXRGaWxlTmFtZSk7DQoJCUZpbGUgZmlsZSA9IG5ldyBGaWxlKG91dHB1
dEZpbGVOYW1lKTsNCgkJZmlsZS5jcmVhdGVOZXdGaWxlKCk7DQoJCU5vZGUgcm9vdE5vZGUgPSBj
cmVhdGVOZXdET00oInVuaXRUZXN0c1N1bW1hcnkiKTsNCgkJYWRkU3VtbWFyeU5vZGVUbyhyb290
Tm9kZSwgImdyYW5kVG90YWxFcnJvcnMiLCBncmFuZFRvdGFsRXJyb3JzKTsNCgkJYWRkU3VtbWFy
eU5vZGVUbyhyb290Tm9kZSwgImdyYW5kVG90YWxUZXN0cyIsIGdyYW5kVG90YWxUZXN0cyk7DQoJ
CWFkZFN1bW1hcnlOb2RlVG8ocm9vdE5vZGUsICJncmFuZFRvdGFsVGltZXMiLCBncmFuZFRvdGFs
VGltZSk7DQoJCXNlcmlhbGl6ZShyb290Tm9kZSwgZmlsZSk7DQoJfQ0KDQoJcHJpdmF0ZSBTdHJp
bmcgcmVwbGFjZShTdHJpbmcgc291cmNlLCBTdHJpbmcgb3JpZ2luYWwsIFN0cmluZyByZXBsYWNl
bWVudCkgew0KDQoJCWludCByZXBsYWNlSW5kZXggPSBzb3VyY2UuaW5kZXhPZihvcmlnaW5hbCk7
DQoJCWlmIChyZXBsYWNlSW5kZXggPiAtMSkgew0KCQkJU3RyaW5nIHJlc3VsdFN0cmluZyA9IHNv
dXJjZS5zdWJzdHJpbmcoMCwgcmVwbGFjZUluZGV4KTsNCgkJCXJlc3VsdFN0cmluZyA9IHJlc3Vs
dFN0cmluZyArIHJlcGxhY2VtZW50Ow0KCQkJcmVzdWx0U3RyaW5nID0gcmVzdWx0U3RyaW5nICsg
c291cmNlLnN1YnN0cmluZyhyZXBsYWNlSW5kZXggKyBvcmlnaW5hbC5sZW5ndGgoKSk7DQoJCQly
ZXR1cm4gcmVzdWx0U3RyaW5nOw0KCQl9DQoJCWVsc2Ugew0KCQkJU3lzdGVtLm91dC5wcmludGxu
KCJDb3VsZCBub3QgZmluZCB0b2tlbjogIiArIG9yaWdpbmFsKTsNCgkJCXJldHVybiBzb3VyY2U7
DQoJCX0NCg0KCX0NCg0KCXByaXZhdGUgdm9pZCB3cml0ZVRlc3RSZXN1bHRzRmlsZSgpIHsNCg0K
CQlTdHJpbmcgb3V0cHV0RmlsZU5hbWUgPSBkcm9wRGlyZWN0b3J5TmFtZSArIEZpbGUuc2VwYXJh
dG9yICsgdGVzdFJlc3VsdHNIdG1sRmlsZU5hbWU7DQoJCXdyaXRlRmlsZShvdXRwdXRGaWxlTmFt
ZSwgdGVzdFJlc3VsdHNUZW1wbGF0ZVN0cmluZyk7DQoJfQ0KDQoJcHJpdmF0ZSB2b2lkIHdyaXRl
RmlsZShTdHJpbmcgb3V0cHV0RmlsZU5hbWUsIFN0cmluZyBjb250ZW50cykgew0KCQlGaWxlV3Jp
dGVyIG91dHB1dFdyaXRlciA9IG51bGw7DQoJCXRyeSB7DQoJCQlvdXRwdXRXcml0ZXIgPSBuZXcg
RmlsZVdyaXRlcihvdXRwdXRGaWxlTmFtZSk7DQoJCQlvdXRwdXRXcml0ZXIud3JpdGUoY29udGVu
dHMpOw0KCQl9DQoJCWNhdGNoIChGaWxlTm90Rm91bmRFeGNlcHRpb24gZSkgew0KCQkJU3lzdGVt
Lm91dC5wcmludGxuKCJGaWxlIG5vdCBmb3VuZCBleGNlcHRpb24gd3JpdGluZzogIiArIG91dHB1
dEZpbGVOYW1lKTsNCgkJfQ0KCQljYXRjaCAoSU9FeGNlcHRpb24gZSkgew0KCQkJU3lzdGVtLm91
dC5wcmludGxuKCJJT0V4Y2VwdGlvbiB3cml0aW5nOiAiICsgb3V0cHV0RmlsZU5hbWUpOw0KCQl9
DQoJCWZpbmFsbHkgew0KCQkJaWYgKG91dHB1dFdyaXRlciAhPSBudWxsKSB7DQoJCQkJdHJ5IHsN
CgkJCQkJb3V0cHV0V3JpdGVyLmNsb3NlKCk7DQoJCQkJfQ0KCQkJCWNhdGNoIChJT0V4Y2VwdGlv
biBlKSB7DQoJCQkJCVN5c3RlbS5vdXQucHJpbnRsbigiSU9FeGNlcHRpb24gY2xvc2luZzogIiAr
IG91dHB1dEZpbGVOYW1lKTsNCgkJCQl9DQoJCQl9DQoJCX0NCgl9DQoNCglwdWJsaWMgdm9pZCBz
ZXRUZXN0UmVzdWx0c0h0bWxGaWxlTmFtZShTdHJpbmcgYVN0cmluZykgew0KCQl0ZXN0UmVzdWx0
c0h0bWxGaWxlTmFtZSA9IGFTdHJpbmc7DQoJfQ0KDQoJcHVibGljIFN0cmluZyBnZXRUZXN0UmVz
dWx0c0h0bWxGaWxlTmFtZSgpIHsNCgkJcmV0dXJuIHRlc3RSZXN1bHRzSHRtbEZpbGVOYW1lOw0K
CX0NCg0KCXB1YmxpYyB2b2lkIHNldFRlc3RSZXN1bHRzVGVtcGxhdGVGaWxlTmFtZShTdHJpbmcg
YVN0cmluZykgew0KCQl0ZXN0UmVzdWx0c1RlbXBsYXRlRmlsZU5hbWUgPSBhU3RyaW5nOw0KCX0N
Cg0KCXB1YmxpYyBTdHJpbmcgZ2V0VGVzdFJlc3VsdHNUZW1wbGF0ZUZpbGVOYW1lKCkgew0KCQly
ZXR1cm4gdGVzdFJlc3VsdHNUZW1wbGF0ZUZpbGVOYW1lOw0KCX0NCg0KCXB1YmxpYyB2b2lkIHNl
dFhtbERpcmVjdG9yeU5hbWUoU3RyaW5nIGFTdHJpbmcpIHsNCgkJeG1sRGlyZWN0b3J5TmFtZSA9
IGFTdHJpbmc7DQoJfQ0KDQoJcHVibGljIFN0cmluZyBnZXRYbWxEaXJlY3RvcnlOYW1lKCkgew0K
CQlyZXR1cm4geG1sRGlyZWN0b3J5TmFtZTsNCgl9DQoNCglwdWJsaWMgdm9pZCBzZXRIdG1sRGly
ZWN0b3J5TmFtZShTdHJpbmcgYVN0cmluZykgew0KCQlodG1sRGlyZWN0b3J5TmFtZSA9IGFTdHJp
bmc7DQoJfQ0KDQoJcHVibGljIFN0cmluZyBnZXRIdG1sRGlyZWN0b3J5TmFtZSgpIHsNCgkJcmV0
dXJuIGh0bWxEaXJlY3RvcnlOYW1lOw0KCX0NCg0KCXB1YmxpYyB2b2lkIHNldERyb3BEaXJlY3Rv
cnlOYW1lKFN0cmluZyBhU3RyaW5nKSB7DQoJCWRyb3BEaXJlY3RvcnlOYW1lID0gYVN0cmluZzsN
Cgl9DQoNCglwdWJsaWMgU3RyaW5nIGdldERyb3BEaXJlY3RvcnlOYW1lKCkgew0KCQlyZXR1cm4g
ZHJvcERpcmVjdG9yeU5hbWU7DQoJfQ0KDQoJcHJpdmF0ZSB2b2lkIGZvcm1hdENvbXBpbGVFcnJv
clJvdyhTdHJpbmcgZmlsZU5hbWUsIGludCBlcnJvckNvdW50LCBpbnQgd2FybmluZ0NvdW50LCBp
bnQgZm9yYmlkZGVuQWNjZXNzV2FybmluZ0NvdW50LCBpbnQgZGlzY291cmFnZWRBY2Nlc3NXYXJu
aW5nQ291bnQsIFN0cmluZ0J1ZmZlciBidWZmZXIpIHsNCg0KCQlpbnQgYWNjZXNzUnVsZVdhcm5p
bmdDb3VudCA9IGZvcmJpZGRlbkFjY2Vzc1dhcm5pbmdDb3VudCArIGRpc2NvdXJhZ2VkQWNjZXNz
V2FybmluZ0NvdW50Ow0KCQl0b3RhbEVycm9ycyA9IHRvdGFsRXJyb3JzICsgZXJyb3JDb3VudDsN
CgkJdG90YWxBY2Nlc3MgPSB0b3RhbEFjY2VzcyArIGFjY2Vzc1J1bGVXYXJuaW5nQ291bnQ7DQoJ
CXRvdGFsV2FybmluZ3MgPSB0b3RhbFdhcm5pbmdzICsgd2FybmluZ0NvdW50Ow0KCQl0b3RhbGZv
cmJpZGRlbkFjY2Vzc1dhcm5pbmdDb3VudCA9IHRvdGFsZm9yYmlkZGVuQWNjZXNzV2FybmluZ0Nv
dW50ICsgZm9yYmlkZGVuQWNjZXNzV2FybmluZ0NvdW50Ow0KCQl0b3RhbGRpc2NvdXJhZ2VkQWNj
ZXNzV2FybmluZ0NvdW50ID0gdG90YWxkaXNjb3VyYWdlZEFjY2Vzc1dhcm5pbmdDb3VudCArIGRp
c2NvdXJhZ2VkQWNjZXNzV2FybmluZ0NvdW50Ow0KCQlyb3dDb3VudCA9IHJvd0NvdW50ICsgMTsN
Cg0KCQlpZiAoIWlzSW5jbHVkZUFsbCgpKSB7DQoJCQlpZiAoZXJyb3JDb3VudCA9PSAwICYmIHdh
cm5pbmdDb3VudCA9PSAwICYmIGFjY2Vzc1J1bGVXYXJuaW5nQ291bnQgPT0gMCkgew0KCQkJCXJl
dHVybjsNCgkJCX0NCgkJfQ0KDQoJCWludCBwb3MgPSBmaWxlTmFtZS5pbmRleE9mKGdldEhyZWZD
b21waWxlTG9nc1RhcmdldFBhdGgoKSk7DQoNCgkJU3RyaW5nIHNob3J0TmFtZSA9IGZpbGVOYW1l
LnN1YnN0cmluZyhwb3MgKyBnZXRIcmVmQ29tcGlsZUxvZ3NUYXJnZXRQYXRoKCkubGVuZ3RoKCkp
Ow0KCQlTdHJpbmcgZGlzcGxheU5hbWUgPSBzaG9ydE5hbWU7DQoNCgkJU3RyaW5nIHN0cmlwU3Ry
aW5nID0gIi9wbHVnaW5zLyI7DQoJCXBvcyA9IGRpc3BsYXlOYW1lLmluZGV4T2Yoc3RyaXBTdHJp
bmcpOw0KCQlpZiAocG9zICE9IC0xKSB7DQoJCQlkaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lLnN1
YnN0cmluZyhwb3MgKyBzdHJpcFN0cmluZy5sZW5ndGgoKSk7DQoJCX0NCg0KCQkvLyB3ZSBhc3N1
bWUgdGhlcmUncyBhbHdheXMgYSBzbGFzaCBwcmVjZWVkaW5nIGZpbGVuYW1lDQoJCXBvcyA9IGRp
c3BsYXlOYW1lLmxhc3RJbmRleE9mKCcvJyk7DQoJCWlmIChwb3MgIT0gLTEpIHsNCgkJCWRpc3Bs
YXlOYW1lID0gZGlzcGxheU5hbWUuc3Vic3RyaW5nKDAsIHBvcyk7DQoJCX0NCg0KCQkvLyBpZiB0
aGVyZSdzIGFueSByZW1haW5pbmcgc2xhc2hlcyAuLi4gaXQgaXMgb25lIG9yIG1vcmUNCgkJLy8g
c3ViZGlyZWN0b3JpZXMgb2Ygd2hlcmUgamFycyBhcmUsIHNvIHdlIG5lZWQgdG8NCgkJLy8gc2F2
ZSBiZWZvcmUgd2Ugc3RyaXAgb2ZmIHZlcnNpb24gbnVtYmVycw0KCQlTdHJpbmcgcmVtYWluaW5n
ID0gbnVsbDsNCgkJcG9zID0gZGlzcGxheU5hbWUuaW5kZXhPZignLycpOw0KCQlpZiAocG9zICE9
IC0xKSB7DQoJCQlyZW1haW5pbmcgPSBkaXNwbGF5TmFtZS5zdWJzdHJpbmcocG9zKTsNCgkJCWRp
c3BsYXlOYW1lID0gZGlzcGxheU5hbWUuc3Vic3RyaW5nKDAsIHBvcyk7DQoJCX0NCgkJZGlzcGxh
eU5hbWUgPSBzdHJpcE9mZlZlcnNpb25OdW1iZXIoZGlzcGxheU5hbWUpOw0KCQlpZiAocmVtYWlu
aW5nICE9IG51bGwpIHsNCgkJCWRpc3BsYXlOYW1lID0gZGlzcGxheU5hbWUgKyByZW1haW5pbmc7
DQoJCX0NCg0KCQlTdHJpbmcgcm93dHlwZSA9ICJub3JtYWx0YWJsZSI7DQoJCWlmIChlcnJvckNv
dW50ID4gMCB8fCBmb3JiaWRkZW5BY2Nlc3NXYXJuaW5nQ291bnQgPiAwKSB7DQoJCQlyb3d0eXBl
ID0gImVycm9ydGFibGUiOw0KCQl9DQoJCWVsc2UgaWYgKHdhcm5pbmdDb3VudCA+IDAgfHwgZGlz
Y291cmFnZWRBY2Nlc3NXYXJuaW5nQ291bnQgPiAwKSB7DQoJCQlyb3d0eXBlID0gIndhcm5pbmd0
YWJsZSI7DQoJCQlpZiAod2FybmluZ0NvdW50ID4gMTUgfHwgZGlzY291cmFnZWRBY2Nlc3NXYXJu
aW5nQ291bnQgPiAwKSB7DQoJCQkJcm93dHlwZSA9ICJleHRyYVdhcm5pbmdUYWJsZSI7DQoJCQl9
DQoJCX0NCg0KCQlidWZmZXIuYXBwZW5kKCI8dHIgQ0xBU1M9XCIiICsgcm93dHlwZSArICJcIj4i
ICsgRU9MKS5hcHBlbmQoIjx0ZD4iICsgRU9MKS5hcHBlbmQoIjxhIGhyZWY9XCIiKS5hcHBlbmQo
Z2V0SHJlZkNvbXBpbGVMb2dzVGFyZ2V0UGF0aCgpKS5hcHBlbmQoc2hvcnROYW1lKS5hcHBlbmQo
IlwiIHR5cGU9J3RleHQvcGxhaW4nID4iKS5hcHBlbmQoZGlzcGxheU5hbWUpLmFwcGVuZCgiPC9h
PjwvdGQ+IikuYXBwZW5kKEVPTCkNCg0KCQkuYXBwZW5kKCI8dGQgQ0xBU1M9XCJudW1lcmljXCI+
IikuYXBwZW5kKCI8YSBocmVmPVwiIikuYXBwZW5kKGdldEhyZWZDb21waWxlTG9nc1RhcmdldFBh
dGgoKSkuYXBwZW5kKHNob3J0TmFtZSkuYXBwZW5kKCIjRVJST1JTIikuYXBwZW5kKCJcIiB0eXBl
PSd0ZXh0L3BsYWluJyA+IikuYXBwZW5kKGVycm9yQ291bnQpLmFwcGVuZCgiPC9hPjwvdGQ+Iiku
YXBwZW5kKEVPTCkNCg0KCQkuYXBwZW5kKCI8dGQgQ0xBU1M9XCJudW1lcmljXCI+IikuYXBwZW5k
KCI8YSBocmVmPVwiIikuYXBwZW5kKGdldEhyZWZDb21waWxlTG9nc1RhcmdldFBhdGgoKSkuYXBw
ZW5kKHNob3J0TmFtZSkuYXBwZW5kKCIjT1RIRVJfV0FSTklOR1MiKS5hcHBlbmQoIlwiIHR5cGU9
J3RleHQvcGxhaW4nID4iKS5hcHBlbmQod2FybmluZ0NvdW50KS5hcHBlbmQoIjwvYT48L3RkPiIp
DQoNCgkJLmFwcGVuZCgiPHRkIENMQVNTPVwibnVtZXJpY1wiPiIpLmFwcGVuZCgiPGEgaHJlZj1c
IiIpLmFwcGVuZChnZXRIcmVmQ29tcGlsZUxvZ3NUYXJnZXRQYXRoKCkpLmFwcGVuZChzaG9ydE5h
bWUpLmFwcGVuZCgiI0FDQ0VTU1JVTEVTX1dBUk5JTkdTIikuYXBwZW5kKCJcIiB0eXBlPSd0ZXh0
L3BsYWluJyA+IikuYXBwZW5kKGZvcmJpZGRlbkFjY2Vzc1dhcm5pbmdDb3VudCkuYXBwZW5kKCI8
L2E+PC90ZD4iKS5hcHBlbmQoRU9MKQ0KDQoJCS5hcHBlbmQoIjx0ZCBDTEFTUz1cIm51bWVyaWNc
Ij4iKS5hcHBlbmQoIjxhIGhyZWY9XCIiKS5hcHBlbmQoZ2V0SHJlZkNvbXBpbGVMb2dzVGFyZ2V0
UGF0aCgpKS5hcHBlbmQoc2hvcnROYW1lKS5hcHBlbmQoIiNBQ0NFU1NSVUxFU19XQVJOSU5HUyIp
LmFwcGVuZCgiXCIgdHlwZT0ndGV4dC9wbGFpbicgPiIpLmFwcGVuZChkaXNjb3VyYWdlZEFjY2Vz
c1dhcm5pbmdDb3VudCkuYXBwZW5kKCI8L2E+PC90ZD4iKS5hcHBlbmQoRU9MKQ0KDQoJCS5hcHBl
bmQoRU9MICsgIjwvdHI+IiArIEVPTCk7DQoJfQ0KDQoJLyoqDQoJICogQHBhcmFtIGRpc3BsYXlO
YW1lDQoJICogQHJldHVybg0KCSAqLw0KCXByaXZhdGUgU3RyaW5nIHN0cmlwT2ZmVmVyc2lvbk51
bWJlcihTdHJpbmcgZGlzcGxheU5hbWUpIHsNCgkJU3RyaW5nIHJlc3VsdCA9IGRpc3BsYXlOYW1l
Ow0KCQluYW1lUGFyc2VyLnBhcnNlKHJlc3VsdCk7DQoJCXJlc3VsdCA9IG5hbWVQYXJzZXIuZ2V0
UHJvamVjdFN0cmluZygpOw0KDQoJCS8vIGRlYnVnIGFuZCB0ZXN0DQoJCS8vIFN5c3RlbS5vdXQu
cHJpbnRsbigicHJvamVjdDogIiArIHJlc3VsdCArICIgdmVyc2lvbjogIiArDQoJCS8vIG5hbWVQ
YXJzZXIuZ2V0VmVyc2lvblN0cmluZygpKTsNCgkJcmV0dXJuIHJlc3VsdDsNCgl9DQoNCglwcml2
YXRlIFN0cmluZyBmb3JtYXRUZXN0Um93KFN0cmluZyBmaWxlTmFtZSwgaW50IGVycm9yQ291bnQs
IGludCB0b3RhbFRlc3RzLCBmbG9hdCB0b3RhbFRpbWVzKSB7DQoNCgkJLy8gcmVwbGFjZSAueG1s
IHdpdGggLmh0bWwNCg0KCQlTdHJpbmcgYVN0cmluZyA9ICIiOw0KDQoJCWlmIChmaWxlTmFtZS5l
bmRzV2l0aCgiLnhtbCIpKSB7DQoNCgkJCWludCBiZWdpbiA9IGZpbGVOYW1lLmxhc3RJbmRleE9m
KEZpbGUuc2VwYXJhdG9yQ2hhcik7DQoJCQlpbnQgZW5kID0gZmlsZU5hbWUubGFzdEluZGV4T2Yo
Ii54bWwiKTsNCg0KCQkJU3RyaW5nIHNob3J0TmFtZSA9IGZpbGVOYW1lLnN1YnN0cmluZyhiZWdp
biArIDEsIGVuZCk7DQoJCQlTdHJpbmcgZGlzcGxheU5hbWUgPSBzaG9ydE5hbWU7DQoNCgkJCVN0
cmluZyByb3d0eXBlID0gIm5vcm1hbHRhYmxlIjsNCgkJCWlmIChlcnJvckNvdW50ID4gMCB8fCBl
cnJvckNvdW50IDwgMCkgew0KCQkJCXJvd3R5cGUgPSAiZXJyb3J0YWJsZSI7DQoJCQl9DQoJCQll
bHNlIGlmICh0b3RhbFRlc3RzIDwgMykgew0KCQkJCXJvd3R5cGUgPSAid2FybmluZ3RhYmxlIjsN
CgkJCQlpZiAodG90YWxUZXN0cyA9PSAwKSB7DQoJCQkJCXJvd3R5cGUgPSAiZXh0cmFXYXJuaW5n
VGFibGUiOw0KCQkJCX0NCgkJCX0NCg0KCQkJYVN0cmluZyA9IGFTdHJpbmcgKyAiPHRyIENMQVNT
PVwiIiArIHJvd3R5cGUgKyAiXCI+IiArIEVPTDsNCg0KCQkJaWYgKGVycm9yQ291bnQgPCAwKSB7
DQoJCQkJYVN0cmluZyA9IGFTdHJpbmcgKyAiPHRkPiIgKyBkaXNwbGF5TmFtZSArICI8L3RkPiIg
KyBFT0w7DQoJCQkJYVN0cmluZyA9IGFTdHJpbmcgKyAiPHRkIENMQVNTPVwiIiArICJudW1lcmlj
IiArICJcIj4iICsgIkRORiIgKyAiPC90ZD4iICsgRU9MOw0KCQkJCWFTdHJpbmcgPSBhU3RyaW5n
ICsgIjx0ZCBDTEFTUz1cIiIgKyAibnVtZXJpYyIgKyAiXCI+IiArICIwIiArICIgPC90ZD4iICsg
RU9MOw0KCQkJfQ0KCQkJZWxzZSB7DQoJCQkJYVN0cmluZyA9IGFTdHJpbmcgKyAiPHRkPiIgKyAi
PGEgaHJlZj0iICsgIlwiIiArIGhyZWZUZXN0UmVzdWx0c1RhcmdldFBhdGggKyAiLyIgKyBzaG9y
dE5hbWUgKyAiLmh0bWwiICsgIlwiPiIgKyBkaXNwbGF5TmFtZSArICI8L2E+IiArICI8L3RkPiIg
KyBFT0w7DQoJCQkJYVN0cmluZyA9IGFTdHJpbmcgKyAiPHRkIENMQVNTPVwiIiArICJudW1lcmlj
IiArICJcIj4iICsgU3RyaW5nLnZhbHVlT2YoZXJyb3JDb3VudCkgKyAiPC90ZD4iICsgRU9MOw0K
CQkJCWFTdHJpbmcgPSBhU3RyaW5nICsgIjx0ZCBDTEFTUz1cIiIgKyAibnVtZXJpYyIgKyAiXCI+
IiArIFN0cmluZy52YWx1ZU9mKHRvdGFsVGVzdHMpICsgIjwvdGQ+IiArIEVPTDsNCgkJCX0NCg0K
DQoJCQlhU3RyaW5nID0gYVN0cmluZyArICI8dGQgQ0xBU1M9XCIiICsgIm51bWVyaWMiICsgIlwi
PiIgKyBTdHJpbmcudmFsdWVPZih0b3RhbFRpbWVzKSArICI8L3RkPiIgKyBFT0w7DQoNCgkJCWFT
dHJpbmcgPSBhU3RyaW5nICsgIjwvdHI+IiArIEVPTDsNCgkJfQ0KDQoJCWVsc2Ugew0KCQkJLy8g
bm90IHJlYWxseSBmaWxlIG5hbWUgKGJ1dCAiVE9UQUxTIikNCgkJCVN0cmluZyBkaXNwbGF5TmFt
ZSA9IGZpbGVOYW1lOw0KCQkJU3RyaW5nIHJvd3R5cGUgPSAiYm9sZCI7DQoJCQlpZiAoZXJyb3JD
b3VudCA+IDApIHsNCgkJCQlyb3d0eXBlID0gImVycm9ydGFibGUiICsgIiAiICsgcm93dHlwZTsN
CgkJCX0NCgkJCWFTdHJpbmcgPSBhU3RyaW5nICsgIjx0ciBDTEFTUz1cIiIgKyByb3d0eXBlICsg
IlwiPiIgKyBFT0w7DQoJCQlhU3RyaW5nID0gYVN0cmluZyArICI8dGQ+IiArIGRpc3BsYXlOYW1l
ICsgIjwvdGQ+IiArIEVPTDsNCgkJCWFTdHJpbmcgPSBhU3RyaW5nICsgIjx0ZCBDTEFTUz1cIiIg
KyAibnVtZXJpYyIgKyAiXCI+IiArIFN0cmluZy52YWx1ZU9mKGVycm9yQ291bnQpICsgIjwvdGQ+
IiArIEVPTDsNCgkJCWFTdHJpbmcgPSBhU3RyaW5nICsgIjx0ZCBDTEFTUz1cIiIgKyAibnVtZXJp
YyIgKyAiXCI+IiArIFN0cmluZy52YWx1ZU9mKHRvdGFsVGVzdHMpICsgIjwvdGQ+IiArIEVPTDsN
Cg0KCQkJYVN0cmluZyA9IGFTdHJpbmcgKyAiPHRkIENMQVNTPVwiIiArICJudW1lcmljIiArICJc
Ij4iICsgU3RyaW5nLnZhbHVlT2YodG90YWxUaW1lcykgKyAiPC90ZD4iICsgRU9MOw0KDQoJCX0N
Cg0KCQlyZXR1cm4gYVN0cmluZzsNCg0KCX0NCg0KCXByaXZhdGUgVW5pdFRlc3RSZXN1bHRzIGNv
dW50RXJyb3JzKFN0cmluZyBmaWxlTmFtZSkgew0KCQlVbml0VGVzdFJlc3VsdHMgcmVzdWx0ID0g
bmV3IFVuaXRUZXN0UmVzdWx0cygpOw0KDQoJCWlmIChuZXcgRmlsZShmaWxlTmFtZSkubGVuZ3Ro
KCkgPT0gMCkNCgkJCXJldHVybiByZXN1bHQ7DQoNCgkJaW50IGVycm9yQ291bnQgPSAwOw0KCQlp
bnQgZmFpbHVyZUNvdW50ID0gMDsNCgkJaW50IHRvdGFsVGVzdHMgPSAwOw0KCQlmbG9hdCB0aW1l
ID0gMDsNCgkJdHJ5IHsNCgkJCURvY3VtZW50QnVpbGRlckZhY3RvcnkgZG9jQnVpbGRlckZhY3Rv
cnkgPSBEb2N1bWVudEJ1aWxkZXJGYWN0b3J5Lm5ld0luc3RhbmNlKCk7DQoJCQlwYXJzZXIgPSBk
b2NCdWlsZGVyRmFjdG9yeS5uZXdEb2N1bWVudEJ1aWxkZXIoKTsNCg0KCQkJRG9jdW1lbnQgZG9j
dW1lbnQgPSBwYXJzZXIucGFyc2UoZmlsZU5hbWUpOw0KCQkJTm9kZUxpc3QgZWxlbWVudHMgPSBk
b2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShURVNUX1NVSVRFX0VMRU1FTlRfTkFNRSk7DQoN
CgkJCWludCBlbGVtZW50Q291bnQgPSBlbGVtZW50cy5nZXRMZW5ndGgoKTsNCgkJCWlmIChlbGVt
ZW50Q291bnQgPT0gMCkNCgkJCQlyZXR1cm4gcmVzdWx0Ow0KCQkJZm9yIChpbnQgaSA9IDA7IGkg
PCBlbGVtZW50Q291bnQ7IGkrKykgew0KCQkJCUVsZW1lbnQgZWxlbWVudCA9IChFbGVtZW50KSBl
bGVtZW50cy5pdGVtKGkpOw0KCQkJCU5hbWVkTm9kZU1hcCBhdHRyaWJ1dGVzID0gZWxlbWVudC5n
ZXRBdHRyaWJ1dGVzKCk7DQoJCQkJTm9kZSBhTm9kZSA9IGF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVt
KCJlcnJvcnMiKTsNCgkJCQllcnJvckNvdW50ID0gZXJyb3JDb3VudCArIEludGVnZXIucGFyc2VJ
bnQoYU5vZGUuZ2V0Tm9kZVZhbHVlKCkpOw0KCQkJCWFOb2RlID0gYXR0cmlidXRlcy5nZXROYW1l
ZEl0ZW0oImZhaWx1cmVzIik7DQoJCQkJZXJyb3JDb3VudCA9IGVycm9yQ291bnQgKyBJbnRlZ2Vy
LnBhcnNlSW50KGFOb2RlLmdldE5vZGVWYWx1ZSgpKTsNCg0KCQkJCWFOb2RlID0gYXR0cmlidXRl
cy5nZXROYW1lZEl0ZW0oInRlc3RzIik7DQoJCQkJdG90YWxUZXN0cyA9IHRvdGFsVGVzdHMgKyBJ
bnRlZ2VyLnBhcnNlSW50KGFOb2RlLmdldE5vZGVWYWx1ZSgpKTsNCgkJCQkNCgkJCQlhTm9kZSA9
IGF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCJ0aW1lIik7DQoJCQkJdGltZSA9IEZsb2F0LnBhcnNl
RmxvYXQoYU5vZGUuZ2V0Tm9kZVZhbHVlKCkpOw0KCQkJfQ0KDQoJCQlyZXN1bHQuc2V0RXJyb3Jz
KGVycm9yQ291bnQpOw0KCQkJcmVzdWx0LnNldEZhaWx1cmVzKGZhaWx1cmVDb3VudCk7DQoJCQly
ZXN1bHQuc2V0VG90YWxUZXN0cyh0b3RhbFRlc3RzKTsNCgkJCXJlc3VsdC5zZXRUaW1lKHRpbWUp
Ow0KCQl9DQoJCWNhdGNoIChJT0V4Y2VwdGlvbiBlKSB7DQoJCQlTeXN0ZW0ub3V0LnByaW50bG4o
IklPRXhjZXB0aW9uOiAiICsgZmlsZU5hbWUpOw0KCQkJLy8gZS5wcmludFN0YWNrVHJhY2UoKTsN
CgkJCXJldHVybiByZXN1bHQ7DQoJCX0NCgkJY2F0Y2ggKFNBWEV4Y2VwdGlvbiBlKSB7DQoJCQlT
eXN0ZW0ub3V0LnByaW50bG4oIlNBWEV4Y2VwdGlvbjogIiArIGZpbGVOYW1lKTsNCgkJCS8vIGUu
cHJpbnRTdGFja1RyYWNlKCk7DQoJCQlyZXR1cm4gcmVzdWx0Ow0KCQl9DQoJCWNhdGNoIChQYXJz
ZXJDb25maWd1cmF0aW9uRXhjZXB0aW9uIGUpIHsNCgkJCWUucHJpbnRTdGFja1RyYWNlKCk7DQoJ
CX0NCgkJcmV0dXJuIHJlc3VsdDsNCgl9DQoNCgkvKioNCgkgKiBHZXRzIHRoZSBocmVmVGVzdFJl
c3VsdHNUYXJnZXRQYXRoLg0KCSAqIA0KCSAqIEByZXR1cm4gUmV0dXJucyBhIFN0cmluZw0KCSAq
Lw0KCXB1YmxpYyBTdHJpbmcgZ2V0SHJlZlRlc3RSZXN1bHRzVGFyZ2V0UGF0aCgpIHsNCgkJcmV0
dXJuIGhyZWZUZXN0UmVzdWx0c1RhcmdldFBhdGg7DQoJfQ0KDQoJLyoqDQoJICogU2V0cyB0aGUg
aHJlZlRlc3RSZXN1bHRzVGFyZ2V0UGF0aC4NCgkgKiANCgkgKiBAcGFyYW0gaHJlZlRlc3RSZXN1
bHRzVGFyZ2V0UGF0aA0KCSAqICAgICAgICAgICAgVGhlIGhyZWZUZXN0UmVzdWx0c1RhcmdldFBh
dGggdG8gc2V0DQoJICovDQoJcHVibGljIHZvaWQgc2V0SHJlZlRlc3RSZXN1bHRzVGFyZ2V0UGF0
aChTdHJpbmcgaHRtbFRhcmdldFBhdGgpIHsNCgkJdGhpcy5ocmVmVGVzdFJlc3VsdHNUYXJnZXRQ
YXRoID0gaHRtbFRhcmdldFBhdGg7DQoJfQ0KDQoJLyoqDQoJICogR2V0cyB0aGUgY29tcGlsZUxv
Z3NEaXJlY3RvcnlOYW1lLg0KCSAqIA0KCSAqIEByZXR1cm4gUmV0dXJucyBhIFN0cmluZw0KCSAq
Lw0KCXB1YmxpYyBTdHJpbmcgZ2V0Q29tcGlsZUxvZ3NEaXJlY3RvcnlOYW1lKCkgew0KCQlyZXR1
cm4gY29tcGlsZUxvZ3NEaXJlY3RvcnlOYW1lOw0KCX0NCg0KCS8qKg0KCSAqIFNldHMgdGhlIGNv
bXBpbGVMb2dzRGlyZWN0b3J5TmFtZS4NCgkgKiANCgkgKiBAcGFyYW0gY29tcGlsZUxvZ3NEaXJl
Y3RvcnlOYW1lDQoJICogICAgICAgICAgICBUaGUgY29tcGlsZUxvZ3NEaXJlY3RvcnlOYW1lIHRv
IHNldA0KCSAqLw0KCXB1YmxpYyB2b2lkIHNldENvbXBpbGVMb2dzRGlyZWN0b3J5TmFtZShTdHJp
bmcgY29tcGlsZUxvZ3NEaXJlY3RvcnlOYW1lKSB7DQoJCXRoaXMuY29tcGlsZUxvZ3NEaXJlY3Rv
cnlOYW1lID0gY29tcGlsZUxvZ3NEaXJlY3RvcnlOYW1lOw0KCX0NCg0KCS8qKg0KCSAqIEdldHMg
dGhlIGhyZWZDb21waWxlTG9nc1RhcmdldFBhdGguDQoJICogDQoJICogQHJldHVybiBSZXR1cm5z
IGEgU3RyaW5nDQoJICovDQoJcHVibGljIFN0cmluZyBnZXRIcmVmQ29tcGlsZUxvZ3NUYXJnZXRQ
YXRoKCkgew0KCQlyZXR1cm4gaHJlZkNvbXBpbGVMb2dzVGFyZ2V0UGF0aDsNCgl9DQoNCgkvKioN
CgkgKiBTZXRzIHRoZSBocmVmQ29tcGlsZUxvZ3NUYXJnZXRQYXRoLg0KCSAqIA0KCSAqIEBwYXJh
bSBocmVmQ29tcGlsZUxvZ3NUYXJnZXRQYXRoDQoJICogICAgICAgICAgICBUaGUgaHJlZkNvbXBp
bGVMb2dzVGFyZ2V0UGF0aCB0byBzZXQNCgkgKi8NCglwdWJsaWMgdm9pZCBzZXRIcmVmQ29tcGls
ZUxvZ3NUYXJnZXRQYXRoKFN0cmluZyBocmVmQ29tcGlsZUxvZ3NUYXJnZXRQYXRoKSB7DQoJCXRo
aXMuaHJlZkNvbXBpbGVMb2dzVGFyZ2V0UGF0aCA9IGhyZWZDb21waWxlTG9nc1RhcmdldFBhdGg7
DQoJfQ0KDQoJLyoqDQoJICogR2V0cyB0aGUgdGVzdE1hbmlmZXN0RmlsZU5hbWUuDQoJICogDQoJ
ICogQHJldHVybiBSZXR1cm5zIGEgU3RyaW5nDQoJICovDQoJcHVibGljIFN0cmluZyBnZXRUZXN0
TWFuaWZlc3RGaWxlTmFtZSgpIHsNCgkJcmV0dXJuIHRlc3RNYW5pZmVzdEZpbGVOYW1lOw0KCX0N
Cg0KCS8qKg0KCSAqIFNldHMgdGhlIHRlc3RNYW5pZmVzdEZpbGVOYW1lLg0KCSAqIA0KCSAqIEBw
YXJhbSB0ZXN0TWFuaWZlc3RGaWxlTmFtZQ0KCSAqICAgICAgICAgICAgVGhlIHRlc3RNYW5pZmVz
dEZpbGVOYW1lIHRvIHNldA0KCSAqLw0KCXB1YmxpYyB2b2lkIHNldFRlc3RNYW5pZmVzdEZpbGVO
YW1lKFN0cmluZyB0ZXN0TWFuaWZlc3RGaWxlTmFtZSkgew0KCQl0aGlzLnRlc3RNYW5pZmVzdEZp
bGVOYW1lID0gdGVzdE1hbmlmZXN0RmlsZU5hbWU7DQoJfQ0KDQoJLyoqDQoJICogR2V0cyB0aGUg
ZHJvcEh0bWxGaWxlTmFtZS4NCgkgKiANCgkgKiBAcmV0dXJuIFJldHVybnMgYSBTdHJpbmcNCgkg
Ki8NCglwdWJsaWMgU3RyaW5nIGdldERyb3BIdG1sRmlsZU5hbWUoKSB7DQoJCXJldHVybiBkcm9w
SHRtbEZpbGVOYW1lOw0KCX0NCg0KCS8qKg0KCSAqIFNldHMgdGhlIGRyb3BIdG1sRmlsZU5hbWUu
DQoJICogDQoJICogQHBhcmFtIGRyb3BIdG1sRmlsZU5hbWUNCgkgKiAgICAgICAgICAgIFRoZSBk
cm9wSHRtbEZpbGVOYW1lIHRvIHNldA0KCSAqLw0KCXB1YmxpYyB2b2lkIHNldERyb3BIdG1sRmls
ZU5hbWUoU3RyaW5nIGRyb3BIdG1sRmlsZU5hbWUpIHsNCgkJdGhpcy5kcm9wSHRtbEZpbGVOYW1l
ID0gZHJvcEh0bWxGaWxlTmFtZTsNCgl9DQoNCglwcml2YXRlIHZvaWQgZ2V0RHJvcFRva2Vuc0Zy
b21MaXN0KFN0cmluZyBsaXN0KSB7DQoJCVN0cmluZ1Rva2VuaXplciB0b2tlbml6ZXIgPSBuZXcg
U3RyaW5nVG9rZW5pemVyKGxpc3QsICIsIik7DQoJCWRyb3BUb2tlbnMgPSBuZXcgVmVjdG9yKCk7
DQoNCgkJd2hpbGUgKHRva2VuaXplci5oYXNNb3JlVG9rZW5zKCkpIHsNCgkJCWRyb3BUb2tlbnMu
YWRkKHRva2VuaXplci5uZXh0VG9rZW4oKSk7DQoJCX0NCgl9DQoNCglwdWJsaWMgU3RyaW5nIGdl
dERyb3BUb2tlbkxpc3QoKSB7DQoJCXJldHVybiBkcm9wVG9rZW5MaXN0Ow0KCX0NCg0KCXB1Ymxp
YyB2b2lkIHNldERyb3BUb2tlbkxpc3QoU3RyaW5nIGRyb3BUb2tlbkxpc3QpIHsNCgkJdGhpcy5k
cm9wVG9rZW5MaXN0ID0gZHJvcFRva2VuTGlzdDsNCgl9DQoNCglwdWJsaWMgYm9vbGVhbiBpc0J1
aWxkVGVzdGVkKCkgew0KCQlyZXR1cm4gaXNCdWlsZFRlc3RlZDsNCgl9DQoNCglwdWJsaWMgdm9p
ZCBzZXRJc0J1aWxkVGVzdGVkKGJvb2xlYW4gaXNCdWlsZFRlc3RlZCkgew0KCQl0aGlzLmlzQnVp
bGRUZXN0ZWQgPSBpc0J1aWxkVGVzdGVkOw0KCX0NCg0KCS8qKg0KCSAqIEByZXR1cm4NCgkgKi8N
CglwdWJsaWMgYm9vbGVhbiB0ZXN0c1JhbigpIHsNCgkJcmV0dXJuIHRlc3RzUmFuOw0KCX0NCg0K
CS8qKg0KCSAqIEBwYXJhbSBiDQoJICovDQoJcHVibGljIHZvaWQgc2V0VGVzdHNSYW4oYm9vbGVh
biBiKSB7DQoJCXRlc3RzUmFuID0gYjsNCgl9DQoNCgkvKioNCgkgKiBAcmV0dXJuDQoJICovDQoJ
cHVibGljIFZlY3RvciBnZXREcm9wVG9rZW5zKCkgew0KCQlyZXR1cm4gZHJvcFRva2VuczsNCgl9
DQoNCgkvKioNCgkgKiBAcGFyYW0gdmVjdG9yDQoJICovDQoJcHVibGljIHZvaWQgc2V0RHJvcFRv
a2VucyhWZWN0b3IgdmVjdG9yKSB7DQoJCWRyb3BUb2tlbnMgPSB2ZWN0b3I7DQoJfQ0KDQoJLyoq
DQoJICogQHJldHVybg0KCSAqLw0KCXB1YmxpYyBTdHJpbmcgZ2V0VGVzdFJlc3VsdHNXaXRoUHJv
YmxlbXMoKSB7DQoJCXJldHVybiB0ZXN0UmVzdWx0c1dpdGhQcm9ibGVtczsNCgl9DQoNCgkvKioN
CgkgKiBAcGFyYW0gc3RyaW5nDQoJICovDQoJcHVibGljIHZvaWQgc2V0VGVzdFJlc3VsdHNXaXRo
UHJvYmxlbXMoU3RyaW5nIHN0cmluZykgew0KCQl0ZXN0UmVzdWx0c1dpdGhQcm9ibGVtcyA9IHN0
cmluZzsNCgl9DQoNCglwdWJsaWMgU3RyaW5nIGdldEJ1aWxkVHlwZSgpIHsNCgkJcmV0dXJuIGJ1
aWxkVHlwZTsNCgl9DQoNCglwdWJsaWMgdm9pZCBzZXRCdWlsZFR5cGUoU3RyaW5nIGJ1aWxkVHlw
ZSkgew0KCQl0aGlzLmJ1aWxkVHlwZSA9IGJ1aWxkVHlwZTsNCgl9DQoNCglwdWJsaWMgdm9pZCBz
ZXRQbGF0Zm9ybUlkZW50aWZpZXJUb2tlbihTdHJpbmcgcGxhdGZvcm1JZGVudGlmaWVyVG9rZW4p
IHsNCgkJdGhpcy5wbGF0Zm9ybUlkZW50aWZpZXJUb2tlbiA9IHBsYXRmb3JtSWRlbnRpZmllclRv
a2VuOw0KCX0NCg0KCXB1YmxpYyBTdHJpbmcgZ2V0UGxhdGZvcm1JZGVudGlmaWVyVG9rZW4oKSB7
DQoJCXJldHVybiBwbGF0Zm9ybUlkZW50aWZpZXJUb2tlbjsNCgl9DQoNCglwdWJsaWMgYm9vbGVh
biBpc0luY2x1ZGVBbGwoKSB7DQoJCXJldHVybiBpbmNsdWRlQWxsOw0KCX0NCg0KCXB1YmxpYyB2
b2lkIHNldEluY2x1ZGVBbGwoYm9vbGVhbiBpbmNsdWRlQWxsKSB7DQoJCXRoaXMuaW5jbHVkZUFs
bCA9IGluY2x1ZGVBbGw7DQoJfQ0KDQp9DQo=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>212156</attachid>
            <date>2012-03-06 14:14:00 -0500</date>
            <delta_ts>2012-03-06 14:26:41 -0500</delta_ts>
            <desc>ValidationConfiguration</desc>
            <filename>ValidationConfiguration.java</filename>
            <type>text/plain</type>
            <size>41133</size>
            <attacher name="Carl Anderson">ccc</attacher>
            
              <data encoding="base64">LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioNCiAqIENvcHlyaWdodCAoYykgMjAwMSwgMjAwOSBJQk0g
Q29ycG9yYXRpb24gYW5kIG90aGVycy4NCiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJv
Z3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMNCiAqIGFyZSBtYWRlIGF2YWlsYWJs
ZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMA0KICog
d2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQN
CiAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sDQogKg0KICogQ29u
dHJpYnV0b3JzOg0KICogSUJNIENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVu
dGF0aW9uDQogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8NCnBhY2thZ2Ugb3JnLmVjbGlwc2Uud3N0
LnZhbGlkYXRpb24uaW50ZXJuYWw7DQoNCmltcG9ydCBqYXZhLmxhbmcucmVmbGVjdC5JbnZvY2F0
aW9uVGFyZ2V0RXhjZXB0aW9uOw0KaW1wb3J0IGphdmEudXRpbC5Db2xsZWN0aW9uOw0KaW1wb3J0
IGphdmEudXRpbC5IYXNoTWFwOw0KaW1wb3J0IGphdmEudXRpbC5IYXNoU2V0Ow0KaW1wb3J0IGph
dmEudXRpbC5MaW5rZWRMaXN0Ow0KaW1wb3J0IGphdmEudXRpbC5MaXN0Ow0KaW1wb3J0IGphdmEu
dXRpbC5NYXA7DQppbXBvcnQgamF2YS51dGlsLlNldDsNCmltcG9ydCBqYXZhLnV0aWwuU3RyaW5n
VG9rZW5pemVyOw0KDQppbXBvcnQgb3JnLmVjbGlwc2UuY29yZS5yZXNvdXJjZXMuSU1hcmtlcjsN
CmltcG9ydCBvcmcuZWNsaXBzZS5jb3JlLnJlc291cmNlcy5JUmVzb3VyY2U7DQppbXBvcnQgb3Jn
LmVjbGlwc2UuY29yZS5yZXNvdXJjZXMuSVdvcmtzcGFjZVJvb3Q7DQppbXBvcnQgb3JnLmVjbGlw
c2UuY29yZS5yZXNvdXJjZXMuUmVzb3VyY2VzUGx1Z2luOw0KaW1wb3J0IG9yZy5lY2xpcHNlLmNv
cmUucnVudGltZS5Db3JlRXhjZXB0aW9uOw0KaW1wb3J0IG9yZy5lY2xpcHNlLmNvcmUucnVudGlt
ZS5QcmVmZXJlbmNlczsNCmltcG9ydCBvcmcuZWNsaXBzZS5jb3JlLnJ1bnRpbWUuUHJlZmVyZW5j
ZXMuSVByb3BlcnR5Q2hhbmdlTGlzdGVuZXI7DQppbXBvcnQgb3JnLmVjbGlwc2UuY29yZS5ydW50
aW1lLlByZWZlcmVuY2VzLlByb3BlcnR5Q2hhbmdlRXZlbnQ7DQppbXBvcnQgb3JnLmVjbGlwc2Uu
d3N0LnZhbGlkYXRpb24uaW50ZXJuYWwuZGVsZWdhdGVzLlZhbGlkYXRvckRlbGVnYXRlRGVzY3Jp
cHRvcjsNCmltcG9ydCBvcmcuZWNsaXBzZS53c3QudmFsaWRhdGlvbi5pbnRlcm5hbC5kZWxlZ2F0
ZXMuVmFsaWRhdG9yRGVsZWdhdGVzUmVnaXN0cnk7DQppbXBvcnQgb3JnLmVjbGlwc2Uud3N0LnZh
bGlkYXRpb24uaW50ZXJuYWwucGx1Z2luLlZhbGlkYXRpb25QbHVnaW47DQppbXBvcnQgb3JnLm9z
Z2kuc2VydmljZS5wcmVmcy5CYWNraW5nU3RvcmVFeGNlcHRpb247DQoNCi8qKg0KICogVGhpcyBj
bGFzcyByZXByZXNlbnRzIHRoZSB1c2VyJ3MgcHJlZmVyZW5jZSBvciBwcm9qZWN0IHNldHRpbmdz
Lg0KICogDQogKiBUaGlzIGNsYXNzIGlzIHBvcHVsYXRlZCBmcm9tIHRoZSBtdWx0aXBsZSBwZXJz
aXN0ZW50IHByb3BlcnRpZXMsIGFuZCBpcyBrZXB0IGFzIGEgc2Vzc2lvbg0KICogcHJvcGVydHkg
d2hpbGUgdGhlIHJlc291cmNlIGlzIG9wZW4uDQogKi8NCnB1YmxpYyBhYnN0cmFjdCBjbGFzcyBW
YWxpZGF0aW9uQ29uZmlndXJhdGlvbiBpbXBsZW1lbnRzIElQcm9wZXJ0eUNoYW5nZUxpc3RlbmVy
IHsNCglwcml2YXRlIGZpbmFsIElSZXNvdXJjZSAJX3Jlc291cmNlOw0KCXByaXZhdGUgYm9vbGVh
biAJZGlzYWJsZUFsbFZhbGlkYXRpb24gPSBnZXREaXNhYmxlQWxsVmFsaWRhdGlvbigpOw0KCXBy
aXZhdGUgU3RyaW5nIAkJX3ZlcnNpb247DQoJDQoJLyoqDQoJICogTWFwIG9mIGFsbCB2YWxpZGF0
b3JzIGNvbmZpZ3VyZWQgb24gdGhlIHByb2plY3Qgb3IgaW5zdGFsbGVkIGdsb2JhbGx5LiBUaGUg
dmFsdWUgb2YgdHJ1ZQ0KCSAqIG1lYW5zIHRoYXQgdGhlIFZNRCBpcyBlbmFibGVkLCBhbmQgYSB2
YWx1ZSBvZiBmYWxzZSBtZWFucyB0aGF0IHRoZSBWTUQgaXMgZGlzYWJsZWQuDQoJICovDQoJcHJp
dmF0ZSBNYXA8VmFsaWRhdG9yTWV0YURhdGEsIEJvb2xlYW4+CQlfdmFsaWRhdG9ycyA9IG5ldyBI
YXNoTWFwPFZhbGlkYXRvck1ldGFEYXRhLCBCb29sZWFuPigpOw0KCXByb3RlY3RlZCBNYXA8VmFs
aWRhdG9yTWV0YURhdGEsIEJvb2xlYW4+IAltYW51YWxWYWxpZGF0b3JzOw0KCXByb3RlY3RlZCBN
YXA8VmFsaWRhdG9yTWV0YURhdGEsIEJvb2xlYW4+IAlidWlsZFZhbGlkYXRvcnM7DQoJDQoJcHJv
dGVjdGVkIHN0YXRpYyBmaW5hbCBTdHJpbmcgVXNlclByZWZlcmVuY2UgPSAiVVNFUl9QUkVGRVJF
TkNFIjsgLy8kTk9OLU5MUy0xJA0KCXByb3RlY3RlZCBzdGF0aWMgZmluYWwgU3RyaW5nIFVzZXJC
dWlsZFByZWZlcmVuY2UgPSAiVVNFUl9CVUlMRF9QUkVGRVJFTkNFIjsgLy8kTk9OLU5MUy0xJA0K
CXByb3RlY3RlZCBzdGF0aWMgZmluYWwgU3RyaW5nIFVzZXJNYW51YWxQcmVmZXJlbmNlID0gIlVT
RVJfTUFOVUFMX1BSRUZFUkVOQ0UiOyAvLyROT04tTkxTLTEkDQoJcHJvdGVjdGVkIHN0YXRpYyBm
aW5hbCBTdHJpbmcgRGVsZWdhdGVzUHJlZmVyZW5jZSA9ICJERUxFR0FURVNfUFJFRkVSRU5DRSI7
IC8vJE5PTi1OTFMtMSQNCgkNCgkvLyBHUksgLSBJIGFtIGtlZXBpbmcgdGhlc2UgImNvbnN0YW50
cyIgaW4gdGhlIG9mZiBjaGFuY2UgdGhhdCB0aGV5IHdlcmUgdXNlZCBzb21ld2hlcmUgb3V0c2lk
ZSB0aGUgZnJhbWV3b3JrDQoJcHJvdGVjdGVkIFN0cmluZyBVU0VSX1BSRUZFUkVOQ0UgCQk9IFVz
ZXJQcmVmZXJlbmNlOw0KCXByb3RlY3RlZCBTdHJpbmcgVVNFUl9NQU5VQUxfUFJFRkVSRU5DRSA9
IFVzZXJNYW51YWxQcmVmZXJlbmNlOw0KCXByb3RlY3RlZCBTdHJpbmcgVVNFUl9CVUlMRF9QUkVG
RVJFTkNFIAk9IFVzZXJCdWlsZFByZWZlcmVuY2U7DQoJcHJvdGVjdGVkIFN0cmluZyBERUxFR0FU
RVNfUFJFRkVSRU5DRSAJPSBEZWxlZ2F0ZXNQcmVmZXJlbmNlOw0KCQ0KCS8qKg0KCSAqIFRoZSBr
ZXkgaXMgdGhlIHRhcmdldCBpZCwgdGhhdCBpcyB0aGUgaWQgb2YgdGhlIHBsYWNlIGhvbGRlciB2
YWxpZGF0b3IuIFRoZSB2YWx1ZSBpcyB0aGUgaWQgDQoJICogb2YgdGhlIHJlYWwgdmFsaWRhdG9y
LiANCgkgKi8NCglwcml2YXRlIE1hcDxTdHJpbmcsIFN0cmluZz4gX2RlbGVnYXRlc0J5VGFyZ2V0
ID0gbmV3IEhhc2hNYXA8U3RyaW5nLCBTdHJpbmc+KCk7DQoJDQoJcHJpdmF0ZSBzdGF0aWMgZmlu
YWwgU3RyaW5nIERlZmF1bHRWYWx1ZSA9ICJkZWZhdWx0X3ZhbHVlIjsgLy8kTk9OLU5MUy0xJA0K
DQoJcHVibGljIHN0YXRpYyBTdHJpbmcgZ2V0RW5hYmxlZEVsZW1lbnRzQXNTdHJpbmcoU2V0PFZh
bGlkYXRvck1ldGFEYXRhPiBlbGVtZW50cykgew0KCQlpZiAoZWxlbWVudHMgPT0gbnVsbClyZXR1
cm4gbnVsbDsNCg0KCQlTdHJpbmdCdWZmZXIgYnVmZmVyID0gbmV3IFN0cmluZ0J1ZmZlcigpOw0K
CQlmb3IgKFZhbGlkYXRvck1ldGFEYXRhIHZtZCA6IGVsZW1lbnRzKSB7DQoJCQlidWZmZXIuYXBw
ZW5kKHZtZC5nZXRWYWxpZGF0b3JVbmlxdWVOYW1lKCkpOw0KCQkJYnVmZmVyLmFwcGVuZChDb25m
aWd1cmF0aW9uQ29uc3RhbnRzLkVMRU1FTlRfU0VQQVJBVE9SKTsNCgkJfQ0KCQlyZXR1cm4gYnVm
ZmVyLnRvU3RyaW5nKCk7DQoJfQ0KDQoJcHJpdmF0ZSBib29sZWFuIGdldERpc2FibGVBbGxWYWxp
ZGF0aW9uKCkgew0KCQlyZXR1cm4gZmFsc2U7DQoJfQ0KDQoJcHVibGljIHN0YXRpYyBTdHJpbmcg
Z2V0RW5hYmxlZEVsZW1lbnRzQXNTdHJpbmcoVmFsaWRhdG9yTWV0YURhdGFbXSBlbGVtZW50cykg
ew0KCQlTdHJpbmdCdWZmZXIgYnVmZmVyID0gbmV3IFN0cmluZ0J1ZmZlcigpOw0KCQlmb3IgKFZh
bGlkYXRvck1ldGFEYXRhIHZtZCA6IGVsZW1lbnRzKSB7DQoJCQlidWZmZXIuYXBwZW5kKHZtZC5n
ZXRWYWxpZGF0b3JVbmlxdWVOYW1lKCkpOw0KCQkJYnVmZmVyLmFwcGVuZChDb25maWd1cmF0aW9u
Q29uc3RhbnRzLkVMRU1FTlRfU0VQQVJBVE9SKTsNCgkJfQ0KCQlyZXR1cm4gYnVmZmVyLnRvU3Ry
aW5nKCk7DQoJfQ0KDQoJcHVibGljIHN0YXRpYyBTZXQ8VmFsaWRhdG9yTWV0YURhdGE+IGdldFN0
cmluZ0FzRW5hYmxlZEVsZW1lbnRzKFN0cmluZyBlbGVtZW50cykgew0KCQlpZiAoZWxlbWVudHMg
PT0gbnVsbClyZXR1cm4gbnVsbDsNCg0KCQlTZXQ8VmFsaWRhdG9yTWV0YURhdGE+IHJlc3VsdCA9
IG5ldyBIYXNoU2V0PFZhbGlkYXRvck1ldGFEYXRhPigpOw0KCQlTdHJpbmdUb2tlbml6ZXIgdG9r
ZW5pemVyID0gbmV3IFN0cmluZ1Rva2VuaXplcihlbGVtZW50cywgQ29uZmlndXJhdGlvbkNvbnN0
YW50cy5FTEVNRU5UX1NFUEFSQVRPUik7DQoJCXdoaWxlICh0b2tlbml6ZXIuaGFzTW9yZVRva2Vu
cygpKSB7DQoJCQlTdHJpbmcgZWxlbSA9IHRva2VuaXplci5uZXh0VG9rZW4oKTsNCgkJCVZhbGlk
YXRvck1ldGFEYXRhIHZtZCA9IFZhbGlkYXRpb25SZWdpc3RyeVJlYWRlci5nZXRSZWFkZXIoKS5n
ZXRWYWxpZGF0b3JNZXRhRGF0YShlbGVtKTsNCgkJCWlmICh2bWQgIT0gbnVsbClyZXN1bHQuYWRk
KHZtZCk7DQoJCX0NCgkJcmV0dXJuIHJlc3VsdDsNCgl9DQoNCglwdWJsaWMgc3RhdGljIFZhbGlk
YXRvck1ldGFEYXRhW10gZ2V0U3RyaW5nQXNFbmFibGVkRWxlbWVudHNBcnJheShTdHJpbmcgZWxl
bWVudHMpIHsNCgkJaWYgKGVsZW1lbnRzID09IG51bGwpcmV0dXJuIG51bGw7DQoNCgkJU3RyaW5n
VG9rZW5pemVyIHRva2VuaXplciA9IG5ldyBTdHJpbmdUb2tlbml6ZXIoZWxlbWVudHMsIENvbmZp
Z3VyYXRpb25Db25zdGFudHMuRUxFTUVOVF9TRVBBUkFUT1IpOw0KCQlWYWxpZGF0b3JNZXRhRGF0
YVtdIHJlc3VsdCA9IG5ldyBWYWxpZGF0b3JNZXRhRGF0YVt0b2tlbml6ZXIuY291bnRUb2tlbnMo
KV07DQoJCWludCBjb3VudCA9IDA7DQoJCXdoaWxlICh0b2tlbml6ZXIuaGFzTW9yZVRva2Vucygp
KSB7DQoJCQlTdHJpbmcgZWxlbSA9IHRva2VuaXplci5uZXh0VG9rZW4oKTsNCgkJCVZhbGlkYXRv
ck1ldGFEYXRhIHZtZCA9IFZhbGlkYXRpb25SZWdpc3RyeVJlYWRlci5nZXRSZWFkZXIoKS5nZXRW
YWxpZGF0b3JNZXRhRGF0YShlbGVtKTsNCgkJCWlmICh2bWQgIT0gbnVsbClyZXN1bHRbY291bnQr
K10gPSB2bWQ7DQoJCX0NCg0KCQlpZiAoY291bnQgIT0gcmVzdWx0Lmxlbmd0aCkgew0KCQkJVmFs
aWRhdG9yTWV0YURhdGFbXSB0cmltUmVzdWx0ID0gbmV3IFZhbGlkYXRvck1ldGFEYXRhW2NvdW50
XTsNCgkJCVN5c3RlbS5hcnJheWNvcHkocmVzdWx0LCAwLCB0cmltUmVzdWx0LCAwLCBjb3VudCk7
DQoJCQlyZXR1cm4gdHJpbVJlc3VsdDsNCgkJfQ0KDQoJCXJldHVybiByZXN1bHQ7DQoJfQ0KCQ0K
CS8qKg0KCSAqIEFuc3dlciB0aGUgdmFsaWRhdG9ycw0KCSAqIEByZXR1cm4NCgkgKi8NCglwdWJs
aWMgc3RhdGljIFNldDxTdHJpbmc+IGdldFZhbGlkYXRvcklkc01hbnVhbCgpew0KCQlQcmVmZXJl
bmNlc1dyYXBwZXIgcHJlZnMgPSBQcmVmZXJlbmNlc1dyYXBwZXIuZ2V0UHJlZmVyZW5jZXMobnVs
bCwgbnVsbCk7DQoJCVN0cmluZyBjb25maWcgPSBwcmVmcy5nZXQoVXNlck1hbnVhbFByZWZlcmVu
Y2UsIG51bGwpOw0KCQlyZXR1cm4gZ2V0VmFsaWRhdG9ySWRzKGNvbmZpZyk7DQoJfQ0KCQ0KCXB1
YmxpYyBzdGF0aWMgU2V0PFN0cmluZz4gZ2V0VmFsaWRhdG9ySWRzQnVpbGQoKXsNCgkJUHJlZmVy
ZW5jZXNXcmFwcGVyIHByZWZzID0gUHJlZmVyZW5jZXNXcmFwcGVyLmdldFByZWZlcmVuY2VzKG51
bGwsIG51bGwpOw0KCQlTdHJpbmcgY29uZmlnID0gcHJlZnMuZ2V0KFVzZXJCdWlsZFByZWZlcmVu
Y2UsIG51bGwpOw0KCQlyZXR1cm4gZ2V0VmFsaWRhdG9ySWRzKGNvbmZpZyk7DQoJfQ0KCQ0KCXBy
aXZhdGUgc3RhdGljIFNldDxTdHJpbmc+IGdldFZhbGlkYXRvcklkcyhTdHJpbmcgZWxlbWVudHMp
ew0KCQlTZXQ8U3RyaW5nPiBzZXQgPSBuZXcgSGFzaFNldDxTdHJpbmc+KDUwKTsNCgkJaWYgKGVs
ZW1lbnRzICE9IG51bGwpew0KCQkJU3RyaW5nVG9rZW5pemVyIHRva2VuaXplciA9IG5ldyBTdHJp
bmdUb2tlbml6ZXIoZWxlbWVudHMsIENvbmZpZ3VyYXRpb25Db25zdGFudHMuRUxFTUVOVF9TRVBB
UkFUT1IpOw0KCQkJd2hpbGUgKHRva2VuaXplci5oYXNNb3JlVG9rZW5zKCkpc2V0LmFkZCh0b2tl
bml6ZXIubmV4dFRva2VuKCkpOw0KCQl9DQoJCXJldHVybiBzZXQ7DQoJfQ0KDQoJcHVibGljIHN0
YXRpYyBJV29ya3NwYWNlUm9vdCBnZXRSb290KCkgew0KCQlyZXR1cm4gUmVzb3VyY2VzUGx1Z2lu
LmdldFdvcmtzcGFjZSgpLmdldFJvb3QoKTsNCgl9DQoJDQoJcHJvdGVjdGVkIFZhbGlkYXRpb25D
b25maWd1cmF0aW9uKElSZXNvdXJjZSByZXNvdXJjZSl7DQoJCV9yZXNvdXJjZSA9IHJlc291cmNl
Ow0KCX0NCg0KCXByb3RlY3RlZCBWYWxpZGF0aW9uQ29uZmlndXJhdGlvbihJUmVzb3VyY2UgcmVz
b3VyY2UsIFZhbGlkYXRvck1ldGFEYXRhW10gdmFsaWRhdG9ycykgdGhyb3dzIEludm9jYXRpb25U
YXJnZXRFeGNlcHRpb24gew0KCQlpZiAocmVzb3VyY2UgPT0gbnVsbCkgew0KCQkJdGhyb3cgbmV3
IEludm9jYXRpb25UYXJnZXRFeGNlcHRpb24obnVsbCwgUmVzb3VyY2VIYW5kbGVyLmdldEV4dGVy
bmFsaXplZE1lc3NhZ2UoUmVzb3VyY2VDb25zdGFudHMuVkJGX0VYQ19OVUxMQ1JFQVRFKSk7DQoJ
CX0NCg0KCQlfcmVzb3VyY2UgPSByZXNvdXJjZTsNCgkJc2V0VmFsaWRhdG9ycyh2YWxpZGF0b3Jz
KTsNCgl9DQoJDQoJcHVibGljIGJvb2xlYW4gaXNEaXNhYmxlQWxsVmFsaWRhdGlvbigpIHRocm93
cyBJbnZvY2F0aW9uVGFyZ2V0RXhjZXB0aW9uIHsNCgkJcmV0dXJuIGRpc2FibGVBbGxWYWxpZGF0
aW9uOw0KCX0NCg0KCXB1YmxpYyB2b2lkIHNldERpc2FibGVBbGxWYWxpZGF0aW9uKGJvb2xlYW4g
YWxsVmFsaWRhdGlvbikgew0KCQlkaXNhYmxlQWxsVmFsaWRhdGlvbiA9IGFsbFZhbGlkYXRpb247
DQoJfQ0KDQoJcHVibGljIFZhbGlkYXRvck1ldGFEYXRhW10gZ2V0RW5hYmxlZFZhbGlkYXRvcnMo
KSB0aHJvd3MgSW52b2NhdGlvblRhcmdldEV4Y2VwdGlvbiB7DQoJCXJldHVybiBnZXRWYWxpZGF0
b3JzKHRydWUpOw0KCX0NCgkNCgkvKioNCgkgKiBJZiAiaW5jcmVtZW50YWwiIGlzIHRydWUsIHJl
dHVybiB0aGUgZW5hYmxlZCBpbmNyZW1lbnRhbCB2YWxpZGF0b3JzLiBJZiAiaW5jcmVtZW50YWwi
IGlzDQoJICogZmFsc2UsIHJldHVybiB0aGUgZW5hYmxlZCBub24taW5jcmVtZW50YWwgdmFsaWRh
dG9ycy4NCgkgKi8NCglwdWJsaWMgVmFsaWRhdG9yTWV0YURhdGFbXSBnZXRFbmFibGVkSW5jcmVt
ZW50YWxWYWxpZGF0b3JzKGJvb2xlYW4gaW5jcmVtZW50YWwpIHRocm93cyBJbnZvY2F0aW9uVGFy
Z2V0RXhjZXB0aW9uIHsNCgkJcmV0dXJuIGdldEVuYWJsZWRGdWxsQnVpbGRWYWxpZGF0b3JzKCFp
bmNyZW1lbnRhbCk7DQoJfQ0KDQoJLyoqDQoJICogSWYgImZ1bGxCdWlsZCIgaXMgdHJ1ZSwgcmV0
dXJuIHRoZSBlbmFibGVkIHZhbGlkYXRvcnMgdGhhdCBzdXBwb3J0IGZ1bGwgYnVpbGRzLiBJZg0K
CSAqICJmdWxsQnVpbGQiIGlzIGZhbHNlLCByZXR1cm4gdGhlIGVuYWJsZWQgdmFsaWRhdG9ycyB0
aGF0IGRvIG5vdCBzdXBwb3J0IGZ1bGwgYnVpbGRzLg0KCSAqLw0KCXB1YmxpYyBWYWxpZGF0b3JN
ZXRhRGF0YVtdIGdldEVuYWJsZWRGdWxsQnVpbGRWYWxpZGF0b3JzKGJvb2xlYW4gZnVsbEJ1aWxk
KSB0aHJvd3MgSW52b2NhdGlvblRhcmdldEV4Y2VwdGlvbiB7DQoJCXJldHVybiBnZXRFbmFibGVk
RnVsbEJ1aWxkVmFsaWRhdG9ycyhmdWxsQnVpbGQsIGZhbHNlKTsNCgl9DQoNCglwdWJsaWMgVmFs
aWRhdG9yTWV0YURhdGFbXSBnZXRFbmFibGVkRnVsbEJ1aWxkVmFsaWRhdG9ycyhib29sZWFuIGZ1
bGxCdWlsZCwgYm9vbGVhbiBvbmx5UmVmZXJlbmNlZCkgdGhyb3dzIEludm9jYXRpb25UYXJnZXRF
eGNlcHRpb24gew0KDQoJCWludCBjb3VudCA9IDA7DQoJCVZhbGlkYXRvck1ldGFEYXRhW10gcmVz
dWx0ID0gbnVsbDsNCgkJIA0KCQlpZiggIWlzRGlzYWJsZUFsbFZhbGlkYXRpb24oKSApew0KCQkJ
U2V0PFZhbGlkYXRvck1ldGFEYXRhPiBzZXQgPSBnZXRCdWlsZEVuYWJsZWRWYWxpZGF0b3JzTWFw
KCkua2V5U2V0KCk7DQoJCQlWYWxpZGF0b3JNZXRhRGF0YVtdIHRlbXAgPSBuZXcgVmFsaWRhdG9y
TWV0YURhdGFbc2V0LnNpemUoKV07DQoJCQlmb3IgKFZhbGlkYXRvck1ldGFEYXRhIHZtZCA6IHNl
dCkgew0KCQkJCUJvb2xlYW4gYnZhbHVlID0gZ2V0QnVpbGRFbmFibGVkVmFsaWRhdG9yc01hcCgp
LmdldCh2bWQpOw0KCQkJCWlmIChidmFsdWUpIHsNCgkJCQkJLy8gSWYgdGhlIHZhbGlkYXRvciBp
cyBlbmFibGVkDQoJCQkJCWlmICh2bWQgPT0gbnVsbCljb250aW51ZTsNCgkJCQkJaWYgKCB2bWQu
aXNCdWlsZFZhbGlkYXRpb24oKSApIHsNCgkJCQkJCWlmICghb25seVJlZmVyZW5jZWQgfHwgdm1k
LmlzRGVwZW5kZW50VmFsaWRhdG9yKCkpDQoJCQkJCQkJdGVtcFtjb3VudCsrXSA9IHZtZDsNCgkJ
CQkJfQ0KCQkJCX0NCgkJCX0NCgkJCXJlc3VsdCA9IG5ldyBWYWxpZGF0b3JNZXRhRGF0YVtjb3Vu
dF07DQoJCQlTeXN0ZW0uYXJyYXljb3B5KHRlbXAsIDAsIHJlc3VsdCwgMCwgY291bnQpOw0KCQl9
DQoJCWVsc2Ugew0KCQkJIHJlc3VsdCA9IG5ldyBWYWxpZGF0b3JNZXRhRGF0YVswXTsNCgkJfQ0K
CQlyZXR1cm4gcmVzdWx0Ow0KCX0NCg0KCXB1YmxpYyB2b2lkIHNldEVuYWJsZWRWYWxpZGF0b3Jz
KFZhbGlkYXRvck1ldGFEYXRhW10gdm1kcykgew0KCQkvLyBGaXJzdCwgImRpc2FibGUiIGFsbCB2
YWxpZGF0b3JzDQoJCU1hcDxWYWxpZGF0b3JNZXRhRGF0YSwgQm9vbGVhbj4gYWxsID0gZ2V0VmFs
aWRhdG9yTWV0YURhdGEoKTsNCgkJZm9yIChWYWxpZGF0b3JNZXRhRGF0YSB2bWQgOiBhbGwua2V5
U2V0KCkpIHsNCgkJCWFsbC5wdXQodm1kLCBCb29sZWFuLkZBTFNFKTsNCgkJfQ0KDQoJCS8vIFRo
ZW4gZW5hYmxlIG9ubHkgdGhlIHZhbGlkYXRvcnMgaW4gdGhlIGFycmF5DQoJCWlmICgodm1kcyA9
PSBudWxsKSB8fCAodm1kcy5sZW5ndGggPT0gMCkpcmV0dXJuOw0KCQkNCgkJZm9yIChWYWxpZGF0
b3JNZXRhRGF0YSB2bWQgOiB2bWRzKSB7DQoJCQlhbGwucHV0KHZtZCwgQm9vbGVhbi5UUlVFKTsN
CgkJfQ0KCX0NCgkNCglwdWJsaWMgdm9pZCBzZXRFbmFibGVkTWFudWFsVmFsaWRhdG9ycyhWYWxp
ZGF0b3JNZXRhRGF0YVtdIHZtZHMpIHRocm93cyBJbnZvY2F0aW9uVGFyZ2V0RXhjZXB0aW9uIHsN
CgkJU2V0PFZhbGlkYXRvck1ldGFEYXRhPiBtYW51YWxFbmFibGVkVk1EcyA9IG5ldyBIYXNoU2V0
PFZhbGlkYXRvck1ldGFEYXRhPih2bWRzLmxlbmd0aCk7DQoJCWZvciAoVmFsaWRhdG9yTWV0YURh
dGEgdm1kIDogdm1kcyltYW51YWxFbmFibGVkVk1Ecy5hZGQodm1kKTsNCgkJDQoJCWZvcihWYWxp
ZGF0b3JNZXRhRGF0YSBkYXRhIDogZ2V0VmFsaWRhdG9ycygpKSB7DQoJCQlpZihtYW51YWxFbmFi
bGVkVk1Ecy5jb250YWlucyhkYXRhKSkNCgkJCQlnZXRNYW51YWxFbmFibGVkVmFsaWRhdG9yc01h
cCgpLnB1dChkYXRhLCBCb29sZWFuLlRSVUUpOw0KCQkJZWxzZQ0KCQkJCWdldE1hbnVhbEVuYWJs
ZWRWYWxpZGF0b3JzTWFwKCkucHV0KGRhdGEsIEJvb2xlYW4uRkFMU0UpOwkJCQ0KCQl9DQoJfQ0K
CQ0KCS8qKg0KCSAqIFVwZGF0ZSB0aGUgbGlzdCBvZiB2YWxpZGF0b3JzIHRoYXQgaGF2ZSBiZWVu
IGVuYWJsZWQgZm9yIG1hbnVhbCB2YWxpZGF0aW9uLg0KCSAqIA0KCSAqIEBwYXJhbSB2bWRzIHRo
ZSB2YWxpZGF0b3JzIHRoYXQgYXJlIGVuYWJsZWQgZm9yIG1hbnVhbCB2YWxpZGF0aW9uLg0KCSAq
IEB0aHJvd3MgSW52b2NhdGlvblRhcmdldEV4Y2VwdGlvbg0KCSAqLw0KCXB1YmxpYyB2b2lkIHNl
dEVuYWJsZWRNYW51YWxWYWxpZGF0b3JzKFNldDxWYWxpZGF0b3JNZXRhRGF0YT4gdm1kcykgdGhy
b3dzIEludm9jYXRpb25UYXJnZXRFeGNlcHRpb24gew0KCQlmb3IoVmFsaWRhdG9yTWV0YURhdGEg
ZGF0YSA6IGdldFZhbGlkYXRvcnMoKSkgew0KCQkJaWYodm1kcy5jb250YWlucyhkYXRhKSlnZXRN
YW51YWxFbmFibGVkVmFsaWRhdG9yc01hcCgpLnB1dChkYXRhLCBCb29sZWFuLlRSVUUpOw0KCQkJ
ZWxzZSBnZXRNYW51YWxFbmFibGVkVmFsaWRhdG9yc01hcCgpLnB1dChkYXRhLCBCb29sZWFuLkZB
TFNFKTsJCQkNCgkJfQ0KCX0NCgkNCglwdWJsaWMgdm9pZCBzZXRFbmFibGVkQnVpbGRWYWxpZGF0
b3JzKFZhbGlkYXRvck1ldGFEYXRhW10gdm1kcykgdGhyb3dzIEludm9jYXRpb25UYXJnZXRFeGNl
cHRpb24gew0KCQlTZXQ8VmFsaWRhdG9yTWV0YURhdGE+IGJ1aWxkRW5hYmxlZFZNRHMgPSBuZXcg
SGFzaFNldDxWYWxpZGF0b3JNZXRhRGF0YT4odm1kcy5sZW5ndGgpOw0KCQlmb3IgKFZhbGlkYXRv
ck1ldGFEYXRhIHZtZCA6IHZtZHMpYnVpbGRFbmFibGVkVk1Ecy5hZGQodm1kKTsNCgkJZm9yKFZh
bGlkYXRvck1ldGFEYXRhIGRhdGEgOiBnZXRWYWxpZGF0b3JzKCkpIHsNCgkJCWlmKGJ1aWxkRW5h
YmxlZFZNRHMuY29udGFpbnMoZGF0YSkpDQoJCQkJZ2V0QnVpbGRFbmFibGVkVmFsaWRhdG9yc01h
cCgpLnB1dChkYXRhLCBCb29sZWFuLlRSVUUpOw0KCQkJZWxzZQ0KCQkJCWdldEJ1aWxkRW5hYmxl
ZFZhbGlkYXRvcnNNYXAoKS5wdXQoZGF0YSwgQm9vbGVhbi5GQUxTRSk7CQkJDQoJCX0NCgl9DQoJ
DQoJLyoqDQoJICogVXBkYXRlIHRoZSBsaXN0IG9mIHZhbGlkYXRvcnMgdGhhdCBoYXZlIGJlZW4g
ZW5hYmxlZCBmb3IgYnVpbGQgdmFsaWRhdGlvbi4NCgkgKiANCgkgKiBAcGFyYW0gdm1kcyB0aGUg
dmFsaWRhdG9ycyB0aGF0IGFyZSBlbmFibGVkIGZvciBidWlsZCB2YWxpZGF0aW9uLg0KCSAqIEB0
aHJvd3MgSW52b2NhdGlvblRhcmdldEV4Y2VwdGlvbg0KCSAqLw0KCXB1YmxpYyB2b2lkIHNldEVu
YWJsZWRCdWlsZFZhbGlkYXRvcnMoU2V0PFZhbGlkYXRvck1ldGFEYXRhPiB2bWRzKSB0aHJvd3Mg
SW52b2NhdGlvblRhcmdldEV4Y2VwdGlvbiB7DQoJCWZvcihWYWxpZGF0b3JNZXRhRGF0YSBkYXRh
IDogZ2V0VmFsaWRhdG9ycygpKSB7DQoJCQlpZih2bWRzLmNvbnRhaW5zKGRhdGEpKWdldEJ1aWxk
RW5hYmxlZFZhbGlkYXRvcnNNYXAoKS5wdXQoZGF0YSwgQm9vbGVhbi5UUlVFKTsNCgkJCWVsc2Ug
Z2V0QnVpbGRFbmFibGVkVmFsaWRhdG9yc01hcCgpLnB1dChkYXRhLCBCb29sZWFuLkZBTFNFKTsJ
CQkNCgkJfQ0KCX0NCg0KCXByaXZhdGUgTWFwPFZhbGlkYXRvck1ldGFEYXRhLCBCb29sZWFuPiBn
ZXRWYWxpZGF0b3JNZXRhRGF0YSgpIHsNCgkJcmV0dXJuIF92YWxpZGF0b3JzOw0KCX0NCgkNCg0K
CXB1YmxpYyBWYWxpZGF0b3JNZXRhRGF0YVtdIGdldERpc2FibGVkVmFsaWRhdG9ycygpIHRocm93
cyBJbnZvY2F0aW9uVGFyZ2V0RXhjZXB0aW9uIHsNCgkJcmV0dXJuIGdldFZhbGlkYXRvcnMoZmFs
c2UpOw0KCX0NCg0KCS8qKg0KCSAqIFJldHVybiBhbiBhcnJheSBvZiBWYWxpZGF0b3JNZXRhRGF0
YSAtIGlmIHZhbHVlIGlzIGZhbHNlLCByZXR1cm4gdGhlIGRpc2FibGVkIHZhbGlkYXRvcnM7IGlm
DQoJICogdmFsdWUgaXMgdHJ1ZSwgcmV0dXJuIHRoZSBlbmFibGVkIHZhbGlkYXRvcnMuDQoJICov
DQoJcHJpdmF0ZSBWYWxpZGF0b3JNZXRhRGF0YVtdIGdldFZhbGlkYXRvcnMoYm9vbGVhbiB2YWx1
ZSkgdGhyb3dzIEludm9jYXRpb25UYXJnZXRFeGNlcHRpb24gew0KCQlWYWxpZGF0b3JNZXRhRGF0
YVtdIHRlbXAgPSBuZXcgVmFsaWRhdG9yTWV0YURhdGFbbnVtYmVyT2ZWYWxpZGF0b3JzKCldOw0K
CQlpbnQgY291bnQgPSAwOw0KCQlmb3IgKFZhbGlkYXRvck1ldGFEYXRhIHZtZCA6IGdldFZhbGlk
YXRvck1ldGFEYXRhKCkua2V5U2V0KCkpIHsNCgkJCUJvb2xlYW4gYnZhbHVlID0gZ2V0VmFsaWRh
dG9yTWV0YURhdGEoKS5nZXQodm1kKTsNCgkJCWlmIChidmFsdWUuYm9vbGVhblZhbHVlKCkgPT0g
dmFsdWUpIHsNCgkJCQl0ZW1wW2NvdW50KytdID0gdm1kOw0KCQkJfQ0KCQl9DQoNCgkJVmFsaWRh
dG9yTWV0YURhdGFbXSByZXN1bHQgPSBuZXcgVmFsaWRhdG9yTWV0YURhdGFbY291bnRdOw0KCQlT
eXN0ZW0uYXJyYXljb3B5KHRlbXAsIDAsIHJlc3VsdCwgMCwgY291bnQpOw0KCQlyZXR1cm4gcmVz
dWx0Ow0KCX0NCgkNCglwdWJsaWMgVmFsaWRhdG9yTWV0YURhdGFbXSBnZXRNYW51YWxFbmFibGVk
VmFsaWRhdG9ycygpIHRocm93cyBJbnZvY2F0aW9uVGFyZ2V0RXhjZXB0aW9uIHsNCgkJTWFwPFZh
bGlkYXRvck1ldGFEYXRhLCBCb29sZWFuPiBtYXAgPSBnZXRNYW51YWxFbmFibGVkVmFsaWRhdG9y
c01hcCgpOw0KCQlpZiAoIW1hcC5pc0VtcHR5KCkpIHsNCgkJCUxpc3Q8VmFsaWRhdG9yTWV0YURh
dGE+IGxpc3QgPSBuZXcgTGlua2VkTGlzdDxWYWxpZGF0b3JNZXRhRGF0YT4oKTsNCgkJCWZvciAo
TWFwLkVudHJ5PFZhbGlkYXRvck1ldGFEYXRhLCBCb29sZWFuPiBtZSA6IG1hcC5lbnRyeVNldCgp
KSB7DQoJCQkJQm9vbGVhbiBvYmogPSBtZS5nZXRWYWx1ZSgpOw0KCQkJCWlmIChvYmogIT0gbnVs
bCAmJiBvYmopbGlzdC5hZGQobWUuZ2V0S2V5KCkpOw0KCQkJfQ0KCQkJcmV0dXJuIChWYWxpZGF0
b3JNZXRhRGF0YVtdKSBsaXN0LnRvQXJyYXkobmV3IFZhbGlkYXRvck1ldGFEYXRhW2xpc3Quc2l6
ZSgpXSk7DQoJCX0NCgkJcmV0dXJuIGdldEVuYWJsZWRWYWxpZGF0b3JzKCk7DQoJfQkNCgkNCglw
dWJsaWMgIFZhbGlkYXRvck1ldGFEYXRhW10gZ2V0QnVpbGRFbmFibGVkVmFsaWRhdG9ycygpIHRo
cm93cyBJbnZvY2F0aW9uVGFyZ2V0RXhjZXB0aW9uIHsNCgkJTWFwPFZhbGlkYXRvck1ldGFEYXRh
LCBCb29sZWFuPiBtYXAgPSBnZXRCdWlsZEVuYWJsZWRWYWxpZGF0b3JzTWFwKCk7DQoJCUxpc3Q8
VmFsaWRhdG9yTWV0YURhdGE+IGxpc3QgPSBuZXcgTGlua2VkTGlzdDxWYWxpZGF0b3JNZXRhRGF0
YT4oKTsNCgkJaWYgKCFtYXAuaXNFbXB0eSgpKSB7DQoJCQlmb3IgKE1hcC5FbnRyeTxWYWxpZGF0
b3JNZXRhRGF0YSwgQm9vbGVhbj4gbWUgOiBtYXAuZW50cnlTZXQoKSkgew0KCQkJCUJvb2xlYW4g
b2JqID0gbWUuZ2V0VmFsdWUoKTsNCgkJCQlpZiAob2JqICE9IG51bGwgJiYgb2JqKWxpc3QuYWRk
KG1lLmdldEtleSgpKTsNCgkJCX0NCgkJCXJldHVybiAoVmFsaWRhdG9yTWV0YURhdGFbXSkgbGlz
dC50b0FycmF5KG5ldyBWYWxpZGF0b3JNZXRhRGF0YVtsaXN0LnNpemUoKV0pOw0KCQl9DQoJCXJl
dHVybiBnZXRFbmFibGVkVmFsaWRhdG9ycygpOw0KCX0NCgkNCgkvKioNCgkgKiBBbnN3ZXIgdGhl
IG1hcCBvZiB0aGUgdmFsaWRhdG9ycyB0aGF0IGhhdmUgYmVlbiBlbmFibGVkIGZvciBidWlsZCB2
YWxpZGF0aW9uLCANCgkgKiBjcmVhdGluZyBpdCBpZiBuZWNlc3NhcnkuDQoJICovDQoJcHJvdGVj
dGVkICBNYXA8VmFsaWRhdG9yTWV0YURhdGEsIEJvb2xlYW4+IGdldEJ1aWxkRW5hYmxlZFZhbGlk
YXRvcnNNYXAoKSB7DQoJCWlmKGJ1aWxkVmFsaWRhdG9ycyA9PSBudWxsKWJ1aWxkVmFsaWRhdG9y
cyA9IG5ldyBIYXNoTWFwPFZhbGlkYXRvck1ldGFEYXRhLCBCb29sZWFuPigpOw0KCQlyZXR1cm4g
YnVpbGRWYWxpZGF0b3JzOw0KCX0JDQoJDQoJLyoqDQoJICogQW5zd2VyIHRoZSBtYXAgb2YgdGhl
IHZhbGlkYXRvcnMgdGhhdCBoYXZlIGJlZW4gZW5hYmxlZCBmb3IgbWFudWFsIHZhbGlkYXRpb24s
IA0KCSAqIGNyZWF0aW5nIGl0IGlmIG5lY2Vzc2FyeS4NCgkgKi8NCglwcm90ZWN0ZWQgIE1hcDxW
YWxpZGF0b3JNZXRhRGF0YSwgQm9vbGVhbj4gZ2V0TWFudWFsRW5hYmxlZFZhbGlkYXRvcnNNYXAo
KSB7DQoJCWlmKG1hbnVhbFZhbGlkYXRvcnMgPT0gbnVsbCltYW51YWxWYWxpZGF0b3JzID0gbmV3
IEhhc2hNYXA8VmFsaWRhdG9yTWV0YURhdGEsIEJvb2xlYW4+KCk7DQoJCXJldHVybiBtYW51YWxW
YWxpZGF0b3JzOw0KCX0JDQoNCgkvKioNCgkgKiBSZXR1cm4gYWxsIGluY3JlbWVudGFsIHZhbGlk
YXRvcnMgZm9yIHRoaXMgcHJlZmVyZW5jZTsgZWl0aGVyIGV2ZXJ5IGluc3RhbGxlZCB2YWxpZGF0
b3INCgkgKiAoZ2xvYmFsKSBvciBldmVyeSB2YWxpZGF0b3IgY29uZmlndXJlZCBvbiB0aGUgcHJv
amVjdCAocHJvamVjdCkuDQoJICovDQoJcHVibGljIFZhbGlkYXRvck1ldGFEYXRhW10gZ2V0SW5j
cmVtZW50YWxWYWxpZGF0b3JzKCkgdGhyb3dzIEludm9jYXRpb25UYXJnZXRFeGNlcHRpb24gew0K
CQlWYWxpZGF0b3JNZXRhRGF0YVtdIHRlbXAgPSBuZXcgVmFsaWRhdG9yTWV0YURhdGFbbnVtYmVy
T2ZWYWxpZGF0b3JzKCldOw0KCQlpbnQgY291bnQgPSAwOw0KCQlmb3IgKFZhbGlkYXRvck1ldGFE
YXRhIHZtZCA6IGdldFZhbGlkYXRvck1ldGFEYXRhKCkua2V5U2V0KCkpIHsNCgkJCUJvb2xlYW4g
YnZhbHVlID0gZ2V0VmFsaWRhdG9yTWV0YURhdGEoKS5nZXQodm1kKTsNCgkJCWlmIChidmFsdWUg
JiYgdm1kLmlzSW5jcmVtZW50YWwoKSl0ZW1wW2NvdW50KytdID0gdm1kOw0KCQl9DQoNCgkJVmFs
aWRhdG9yTWV0YURhdGFbXSByZXN1bHQgPSBuZXcgVmFsaWRhdG9yTWV0YURhdGFbY291bnRdOw0K
CQlTeXN0ZW0uYXJyYXljb3B5KHRlbXAsIDAsIHJlc3VsdCwgMCwgY291bnQpOw0KCQlyZXR1cm4g
cmVzdWx0Ow0KCX0NCg0KCS8qKg0KCSAqIFJldHVybiBhbGwgdmFsaWRhdG9ycyBmb3IgdGhpcyBw
cmVmZXJlbmNlOyBlaXRoZXIgZXZlcnkgaW5zdGFsbGVkIHZhbGlkYXRvciAoZ2xvYmFsKSBvciBl
dmVyeQ0KCSAqIHZhbGlkYXRvciBjb25maWd1cmVkIG9uIHRoZSBwcm9qZWN0IChwcm9qZWN0KS4N
CgkgKi8NCglwdWJsaWMgVmFsaWRhdG9yTWV0YURhdGFbXSBnZXRWYWxpZGF0b3JzKCkgdGhyb3dz
IEludm9jYXRpb25UYXJnZXRFeGNlcHRpb24gew0KCQlyZXR1cm4gY29udmVydFRvQXJyYXkoX3Zh
bGlkYXRvcnMua2V5U2V0KCkpOw0KCX0NCgkNCglwdWJsaWMgdm9pZCBzZXRWYWxpZGF0b3JzKFZh
bGlkYXRvck1ldGFEYXRhW10gdm1kcykgew0KCQlfdmFsaWRhdG9ycy5jbGVhcigpOw0KCQlmb3Ig
KFZhbGlkYXRvck1ldGFEYXRhIHZtZCA6IHZtZHMpIHsNCgkJCWlmICh2bWQgPT0gbnVsbCljb250
aW51ZTsNCgkJCV92YWxpZGF0b3JzLnB1dCh2bWQsICh2bWQuaXNFbmFibGVkQnlEZWZhdWx0KCkg
PyBCb29sZWFuLlRSVUUgOiBCb29sZWFuLkZBTFNFKSk7DQoJCX0NCgl9DQoJDQogIHB1YmxpYyB2
b2lkIHNldERlZmF1bHREZWxlZ2F0ZXMoVmFsaWRhdG9yTWV0YURhdGFbXSB2bWRzKSB0aHJvd3Mg
SW52b2NhdGlvblRhcmdldEV4Y2VwdGlvbiB7DQogICAgX2RlbGVnYXRlc0J5VGFyZ2V0LmNsZWFy
KCk7DQogICAgZm9yIChWYWxpZGF0b3JNZXRhRGF0YSB2bWQgOiB2bWRzKSB7DQogICAgICBpZiAo
dm1kID09IG51bGwpY29udGludWU7DQogICAgICANCiAgICAgIFN0cmluZyB0YXJnZXRJRCA9IHZt
ZC5nZXRWYWxpZGF0b3JVbmlxdWVOYW1lKCk7DQogICAgICBTdHJpbmcgZGVsZWdhdGVJRCA9IFZh
bGlkYXRvckRlbGVnYXRlc1JlZ2lzdHJ5LmdldEluc3RhbmNlKCkuZ2V0RGVmYXVsdERlbGVnYXRl
KHRhcmdldElEKTsNCiAgICAgIGlmIChkZWxlZ2F0ZUlEID09IG51bGwpY29udGludWU7DQogICAg
ICBfZGVsZWdhdGVzQnlUYXJnZXQucHV0KHRhcmdldElELCBWYWxpZGF0b3JEZWxlZ2F0ZXNSZWdp
c3RyeS5nZXRJbnN0YW5jZSgpLmdldERlZmF1bHREZWxlZ2F0ZSh0YXJnZXRJRCkpOw0KICAgIH0N
CiAgfQ0KDQoJLyoqDQoJICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIGNvbmZpZ3VyZWQgdmFsaWRh
dG9ycyBvbiB0aGUgZ2l2ZW4gcHJvamVjdCBvciBpbnN0YWxsZWQgdmFsaWRhdG9ycyBpbg0KCSAq
IHRoZSB3b3Jrc3BhY2UuDQoJICovDQoJcHVibGljIGludCBudW1iZXJPZlZhbGlkYXRvcnMoKSB0
aHJvd3MgSW52b2NhdGlvblRhcmdldEV4Y2VwdGlvbiB7DQoJCXJldHVybiBfdmFsaWRhdG9ycy5z
aXplKCk7DQoJfQ0KDQoJcHVibGljIGludCBudW1iZXJPZkVuYWJsZWRJbmNyZW1lbnRhbFZhbGlk
YXRvcnMoKSB0aHJvd3MgSW52b2NhdGlvblRhcmdldEV4Y2VwdGlvbiB7DQoJCXJldHVybiBudW1i
ZXJPZkluY3JlbWVudGFsVmFsaWRhdG9ycyhnZXRFbmFibGVkVmFsaWRhdG9ycygpKTsNCgl9DQoN
CglwdWJsaWMgaW50IG51bWJlck9mSW5jcmVtZW50YWxWYWxpZGF0b3JzKCkgdGhyb3dzIEludm9j
YXRpb25UYXJnZXRFeGNlcHRpb24gew0KCQlyZXR1cm4gbnVtYmVyT2ZJbmNyZW1lbnRhbFZhbGlk
YXRvcnMoZ2V0VmFsaWRhdG9ycygpKTsNCgl9DQoNCglwcml2YXRlIHN0YXRpYyBpbnQgbnVtYmVy
T2ZJbmNyZW1lbnRhbFZhbGlkYXRvcnMoVmFsaWRhdG9yTWV0YURhdGFbXSB2bWRzKSB7DQoJCWlu
dCBjb3VudCA9IDA7DQoJCWZvciAoVmFsaWRhdG9yTWV0YURhdGEgdm1kIDogdm1kcykgew0KCQkJ
aWYgKHZtZC5pc0luY3JlbWVudGFsKCkpY291bnQrKzsNCgkJfQ0KCQlyZXR1cm4gY291bnQ7DQoJ
fQ0KDQoJLyoqDQoJICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIGVuYWJsZWQgdmFsaWRhdG9ycyBv
biB0aGUgcHJvamVjdCBvciB3b3Jrc3BhY2UuDQoJICovDQoJcHVibGljIGludCBudW1iZXJPZkVu
YWJsZWRWYWxpZGF0b3JzKCkgdGhyb3dzIEludm9jYXRpb25UYXJnZXRFeGNlcHRpb24gew0KCQly
ZXR1cm4gZ2V0RW5hYmxlZFZhbGlkYXRvcnMoKS5sZW5ndGg7DQoJfQ0KDQoJLyoqDQoJICogUmV0
dXJucyB0aGUgbnVtYmVyIG9mIGRpc2FibGVkIHZhbGlkYXRvcnMgb24gdGhlIHByb2plY3Qgb3Ig
d29ya3NwYWNlLg0KCSAqLw0KCXB1YmxpYyBpbnQgbnVtYmVyT2ZEaXNhYmxlZFZhbGlkYXRvcnMo
KSB0aHJvd3MgSW52b2NhdGlvblRhcmdldEV4Y2VwdGlvbiB7DQoJCXJldHVybiBnZXREaXNhYmxl
ZFZhbGlkYXRvcnMoKS5sZW5ndGg7DQoJfQ0KDQoJLyoqDQoJICogVGhlIHZhbHVlIHJldHVybmVk
IGZyb20gdGhpcyBtZXRob2QgaXMgZ3VhcmFudGVlZCB0byBiZSBub24tbnVsbC4NCgkgKi8NCglw
dWJsaWMgZmluYWwgU3RyaW5nIGdldFZlcnNpb24oKSB0aHJvd3MgSW52b2NhdGlvblRhcmdldEV4
Y2VwdGlvbiB7DQoJCWlmIChfdmVyc2lvbiA9PSBudWxsKWxvYWRWZXJzaW9uKCk7DQoJCXJldHVy
biBfdmVyc2lvbjsNCgl9DQoNCglwcml2YXRlIHZvaWQgc2V0VmVyc2lvbihTdHJpbmcgdmVyc2lv
bikgew0KCQlfdmVyc2lvbiA9IHZlcnNpb247DQoJfQ0KDQoJLyoqDQoJICogVGhpcyBwcmVmZXJl
bmNlIGhhcyBiZWVuIG1pZ3JhdGVkOyBjaGFuZ2UgdGhlIHZlcnNpb24gdG8gdGhlIGN1cnJlbnQg
dmVyc2lvbi4NCgkgKiBAZGVwcmVjYXRlZCBkZWFkIGNvZGUuDQoJICovDQoJcHVibGljIHZvaWQg
bWFya1ZlcnNpb25DdXJyZW50KCkgew0KCQkvLyBUaGUgdmVyc2lvbiBzaG91bGQgbm90IGJlIG1h
cmtlZCBjdXJyZW50IHVudGlsIHRoZSBtaWdyYXRpb24gaXMgY29tcGxldGUNCgkJLy8gKGkuZS4s
IFZhbGlkYXRpb25NaWdyYXRvciBoYXMgYmVlbiBpbnZva2VkLikgTWlncmF0aW5nIHRoZSB1c2Vy
J3MgY29uZmlndXJhdGlvbg0KCQkvLyBpcyBvbmx5IHRoZSBmaXJzdCBzdGVwIG9mIHRoZSBtaWdy
YXRpb24uDQoJCXNldFZlcnNpb24oQ29uZmlndXJhdGlvbkNvbnN0YW50cy5DVVJSRU5UX1ZFUlNJ
T04pOw0KCX0NCg0KCXB1YmxpYyBib29sZWFuIGlzVmVyc2lvbkN1cnJlbnQoKSB0aHJvd3MgSW52
b2NhdGlvblRhcmdldEV4Y2VwdGlvbiB7DQoJCXJldHVybiBnZXRWZXJzaW9uKCkuZXF1YWxzKENv
bmZpZ3VyYXRpb25Db25zdGFudHMuQ1VSUkVOVF9WRVJTSU9OKTsNCgl9DQoNCgkvLyBJUmVzb3Vy
Y2UgY291bGQgYmUgYW4gSVByb2plY3Qgb3IgYW4gSVdvcmtzcGFjZVJvb3QNCglwdWJsaWMgSVJl
c291cmNlIGdldFJlc291cmNlKCkgew0KCQlyZXR1cm4gX3Jlc291cmNlOw0KCX0NCg0KCS8qKg0K
CSAqIFJldHVybiB0cnVlIGlmIHRoZSB2YWxpZGF0b3IgaXMgZW5hYmxlZCBvbiB0aGlzIHByZWZl
cmVuY2UuDQoJICovDQoJcHVibGljIGJvb2xlYW4gaXNFbmFibGVkKFN0cmluZyB2YWxpZGF0b3JD
bGFzc05hbWUpIHRocm93cyBJbnZvY2F0aW9uVGFyZ2V0RXhjZXB0aW9uIHsNCgkJaWYgKHZhbGlk
YXRvckNsYXNzTmFtZSA9PSBudWxsKSB7DQoJCQlyZXR1cm4gZmFsc2U7DQoJCX0NCg0KCQlWYWxp
ZGF0b3JNZXRhRGF0YSB2bWQgPSBWYWxpZGF0aW9uUmVnaXN0cnlSZWFkZXIuZ2V0UmVhZGVyKCku
Z2V0VmFsaWRhdG9yTWV0YURhdGEodmFsaWRhdG9yQ2xhc3NOYW1lKTsNCgkJcmV0dXJuIGlzRW5h
YmxlZCh2bWQpOw0KCX0NCg0KCS8qKg0KCSAqIFJldHVybiB0cnVlIGlmIHRoZSB2YWxpZGF0b3Ig
aXMgZW5hYmxlZCBvbiB0aGlzIHByZWZlcmVuY2UuDQoJICovDQoJcHVibGljIGJvb2xlYW4gaXNF
bmFibGVkKFZhbGlkYXRvck1ldGFEYXRhIHZtZCkgdGhyb3dzIEludm9jYXRpb25UYXJnZXRFeGNl
cHRpb24gew0KCQlpZiAodm1kID09IG51bGwpcmV0dXJuIGZhbHNlOw0KDQoJCUJvb2xlYW4gdmFs
dWUgPSBnZXRWYWxpZGF0b3JNZXRhRGF0YSgpLmdldCh2bWQpOw0KCQlpZiAodmFsdWUgPT0gbnVs
bClyZXR1cm4gZmFsc2U7DQoNCgkJcmV0dXJuIHZhbHVlLmJvb2xlYW5WYWx1ZSgpOw0KCX0NCg0K
CS8qKg0KCSAqIE9uY2UgYWxsIG9mIHRoZSBmaWVsZHMgaGF2ZSBiZWVuIHVwZGF0ZWQgb24gdGhp
cyBWYWxpZGF0aW9uQ29uZmlndXJhdGlvbiBpbnN0YW5jZSwgdGhpcw0KCSAqIHByZWZlcmVuY2Ug
c2hvdWxkIGJlIHN0b3JlZCBiYWNrIG9uIHRoZSBJUmVzb3VyY2UgZm9yIGxhdGVyIHVzZS4gVGhp
cyBtZXRob2QgbXVzdCBiZSBjYWxsZWQNCgkgKiBtYW51YWxseSBieSB0aGUgdmFsaWRhdGlvbiBm
cmFtZXdvcmsgb25jZSB0aGUgZmllbGRzIG9mIHRoaXMgdHlwZSBoYXZlIGJlZW4gdXBkYXRlZC4N
CgkgKi8NCglwdWJsaWMgZmluYWwgdm9pZCBwYXNzaXZhdGUoKSB0aHJvd3MgSW52b2NhdGlvblRh
cmdldEV4Y2VwdGlvbiB7DQoJCXRyeSB7DQoJCQlpZiAoZ2V0UmVzb3VyY2UoKSA9PSBudWxsKSB7
DQoJCQkJdGhyb3cgbmV3IEludm9jYXRpb25UYXJnZXRFeGNlcHRpb24obnVsbCwgUmVzb3VyY2VI
YW5kbGVyLmdldEV4dGVybmFsaXplZE1lc3NhZ2UoUmVzb3VyY2VDb25zdGFudHMuVkJGX0VYQ19O
VUxMU0FWRSkpOw0KCQkJfQ0KCQkJZ2V0UmVzb3VyY2UoKS5zZXRTZXNzaW9uUHJvcGVydHkoQ29u
ZmlndXJhdGlvbkNvbnN0YW50cy5VU0VSX1BSRUZFUkVOQ0UsIHRoaXMpOw0KCQl9IGNhdGNoIChD
b3JlRXhjZXB0aW9uIGV4Yykgew0KCQkJdGhyb3cgbmV3IEludm9jYXRpb25UYXJnZXRFeGNlcHRp
b24oZXhjLCBSZXNvdXJjZUhhbmRsZXIuZ2V0RXh0ZXJuYWxpemVkTWVzc2FnZShSZXNvdXJjZUNv
bnN0YW50cy5WQkZfRVhDX1NBVkUsIG5ldyBTdHJpbmdbXXtnZXRSZXNvdXJjZSgpLmdldE5hbWUo
KX0pKTsNCgkJfQ0KCX0NCg0KCS8qKg0KCSAqIFJlc2V0IHRoZSB2YWx1ZXMgdG8gdGhlIGRlZmF1
bHQgdmFsdWVzLg0KCSAqLw0KCXB1YmxpYyBhYnN0cmFjdCB2b2lkIHJlc2V0VG9EZWZhdWx0KCkg
dGhyb3dzIEludm9jYXRpb25UYXJnZXRFeGNlcHRpb247DQoNCglwcm90ZWN0ZWQgQm9vbGVhbiBj
b252ZXJ0VG9Cb29sZWFuKGJvb2xlYW4gdmFsdWUpIHsNCgkJcmV0dXJuICh2YWx1ZSA9PSB0cnVl
ID8gQm9vbGVhbi5UUlVFIDogQm9vbGVhbi5GQUxTRSk7DQoJfQ0KDQoJcHJvdGVjdGVkIEludGVn
ZXIgY29udmVydFRvSW50ZWdlcihpbnQgdmFsdWUpIHsNCgkJcmV0dXJuIG5ldyBJbnRlZ2VyKHZh
bHVlKTsNCgl9DQoNCglwcm90ZWN0ZWQgYm9vbGVhbiBjb252ZXJ0VG9Cb29sZWFuKFN0cmluZyB2
YWx1ZSkgew0KCQlCb29sZWFuIGIgPSBCb29sZWFuLnZhbHVlT2YodmFsdWUpOw0KCQlyZXR1cm4g
Yi5ib29sZWFuVmFsdWUoKTsNCgl9DQoNCglwcm90ZWN0ZWQgaW50IGNvbnZlcnRUb0ludChTdHJp
bmcgdmFsdWUpIHsNCgkJSW50ZWdlciB0ID0gSW50ZWdlci52YWx1ZU9mKHZhbHVlKTsNCgkJcmV0
dXJuIHQuaW50VmFsdWUoKTsNCgl9DQoNCglwdWJsaWMgc3RhdGljIFZhbGlkYXRvck1ldGFEYXRh
W10gY29udmVydFRvQXJyYXkoQ29sbGVjdGlvbjxWYWxpZGF0b3JNZXRhRGF0YT4gYykgew0KCQlp
bnQgbGVuZ3RoID0gKGMgPT0gbnVsbCkgPyAwIDogYy5zaXplKCk7DQoJCVZhbGlkYXRvck1ldGFE
YXRhW10gcmVzdWx0ID0gbmV3IFZhbGlkYXRvck1ldGFEYXRhW2xlbmd0aF07DQoJCWlmIChsZW5n
dGggPT0gMClyZXR1cm4gcmVzdWx0Ow0KDQoJCWludCBjb3VudCA9IDA7DQoJCWZvciAoVmFsaWRh
dG9yTWV0YURhdGEgdm1kIDogYylyZXN1bHRbY291bnQrK10gPSB2bWQ7DQoNCgkJcmV0dXJuIHJl
c3VsdDsNCgl9DQoNCglwdWJsaWMgc3RhdGljIFZhbGlkYXRvck1ldGFEYXRhW10gY29udmVydFRv
QXJyYXkoT2JqZWN0W10gYykgew0KCQlpbnQgbGVuZ3RoID0gKGMgPT0gbnVsbCkgPyAwIDogYy5s
ZW5ndGg7DQoJCVZhbGlkYXRvck1ldGFEYXRhW10gcmVzdWx0ID0gbmV3IFZhbGlkYXRvck1ldGFE
YXRhW2xlbmd0aF07DQoJCWlmIChsZW5ndGggPT0gMClyZXR1cm4gcmVzdWx0Ow0KDQoJCVN5c3Rl
bS5hcnJheWNvcHkoYywgMCwgcmVzdWx0LCAwLCBsZW5ndGgpOw0KCQlyZXR1cm4gcmVzdWx0Ow0K
CX0NCgkNCgkvKioNCgkgKiBTYXZlIHRoZSB2YWx1ZXMgb2YgdGhlc2UgZmllbGRzIGJlZm9yZSB0
aGUgcHJvamVjdCBvciB3b3Jrc3BhY2UgaXMgY2xvc2VkLg0KCSAqLw0KCXB1YmxpYyB2b2lkIHN0
b3JlKCkgdGhyb3dzIEludm9jYXRpb25UYXJnZXRFeGNlcHRpb24gew0KCQlzdG9yZShudWxsKTsN
Cgl9DQoNCgkvKioNCgkgKiBTYXZlIHRoZSB2YWx1ZXMgb2YgdGhlc2UgZmllbGRzIGJlZm9yZSB0
aGUgcHJvamVjdCBvciB3b3Jrc3BhY2UgaXMgY2xvc2VkLg0KCSAqLw0KCXB1YmxpYyB2b2lkIHN0
b3JlKEJvb2xlYW4gcGVyc2lzdCkgdGhyb3dzIEludm9jYXRpb25UYXJnZXRFeGNlcHRpb24gew0K
CQlQcmVmZXJlbmNlc1dyYXBwZXIgcHJlZiA9IFByZWZlcmVuY2VzV3JhcHBlci5nZXRQcmVmZXJl
bmNlcyhudWxsLCBwZXJzaXN0KTsNCgkJcHJlZi5wdXQoVmFsaWRhdGlvbkNvbmZpZ3VyYXRpb24u
VXNlclByZWZlcmVuY2UsIHNlcmlhbGl6ZSgpKTsNCgkJcHJlZi5wdXQoVmFsaWRhdGlvbkNvbmZp
Z3VyYXRpb24uVXNlck1hbnVhbFByZWZlcmVuY2UsIHNlcmlhbGl6ZU1hbnVhbFNldHRpbmcoKSk7
DQoJCXByZWYucHV0KFZhbGlkYXRpb25Db25maWd1cmF0aW9uLlVzZXJCdWlsZFByZWZlcmVuY2Us
IHNlcmlhbGl6ZUJ1aWxkU2V0dGluZygpKTsNCgkJcHJlZi5wdXQoVmFsaWRhdGlvbkNvbmZpZ3Vy
YXRpb24uRGVsZWdhdGVzUHJlZmVyZW5jZSwgc2VyaWFsaXplRGVsZWdhdGVzU2V0dGluZygpKTsN
CgkJdHJ5IHsNCgkJCXByZWYuZmx1c2goKTsNCgkJfQ0KCQljYXRjaCAoQmFja2luZ1N0b3JlRXhj
ZXB0aW9uIGUpew0KCQkJdGhyb3cgbmV3IEludm9jYXRpb25UYXJnZXRFeGNlcHRpb24oZSk7DQoJ
CX0NCgl9DQoNCgkvKioNCgkgKiBMb2FkIGFuZCBzdG9yZSB0aGUgdmVyc2lvbiBudW1iZXIsIGJ1
dCBub3RoaW5nIGVsc2UuIFRoZSB2ZXJzaW9uIGlzbid0IGEgcHJlZmVyZW5jZSwgYnV0IGl0J3MN
CgkgKiBzdG9yZWQgYW5kIGxvYWRlZCBhcyBpZiBpdCBpcy4gQmVjYXVzZSB0aGUgbG9hZCBtZWNo
YW5pc20gaXMgZGlmZmVyZW50IGJldHdlZW4gYW4gSVByb2plY3QNCgkgKiBhbmQgdGhlIElXb3Jr
c3BhY2VSb290LCBrZWVwIHRoZSBsb2FkIG1lY2hhbmlzbSBpbnNpZGUgdGhlIFZhbGlkYXRpb25D
b25maWd1cmF0aW9uDQoJICogaW1wbGVtZW50YXRpb24sIGJ1dCBpbml0aWFsaXplIG9ubHkgdGhl
IG1pbmltdW0gYXQgZmlyc3QuIEFmdGVyIHRoZSBwcm9qZWN0IGhhcyBiZWVuDQoJICogbWlncmF0
ZWQsIGxvYWQgdGhlIG90aGVyIGZpZWxkcyAobG9hZGluZyB0aGUgb3RoZXIgZmllbGRzIGJlZm9y
ZSB0aGUgbWlncmF0aW9uIG1heSBvdmVyd3JpdGUNCgkgKiB0aGUgdmFsdWVzIG9mIHRob3NlIGZp
ZWxkcykuDQoJICovDQoJcHJvdGVjdGVkIGZpbmFsIHZvaWQgbG9hZFZlcnNpb24oKSB0aHJvd3Mg
SW52b2NhdGlvblRhcmdldEV4Y2VwdGlvbiB7DQoJCWlmIChnZXRSZXNvdXJjZSgpID09IG51bGwp
IHsNCgkJCXRocm93IG5ldyBJbnZvY2F0aW9uVGFyZ2V0RXhjZXB0aW9uKG51bGwsIFJlc291cmNl
SGFuZGxlci5nZXRFeHRlcm5hbGl6ZWRNZXNzYWdlKFJlc291cmNlQ29uc3RhbnRzLlZCRl9FWENf
TlVMTFJFVFJJRVZFKSk7DQoJCX0NCg0KCQlJTWFya2VyW10gbWFya2VyID0gZ2V0TWFya2VyKCk7
DQoJCVN0cmluZyB2ZXJzaW9uID0gbnVsbDsNCgkJaWYgKG1hcmtlciA9PSBudWxsKSB7DQoJCQkv
LyBlaXRoZXIgYSBuZXcgd29ya3NwYWNlIG9yIGFscmVhZHkgbWlncmF0ZWQ7IHByb2NlZWQgYXMg
bm9ybWFsDQoJCQl2ZXJzaW9uID0gbG9hZFZlcnNpb24oZ2V0UmVzb3VyY2UoKSk7DQoJCX0gZWxz
ZSB7DQoJCQkvLyBtaWdyYXRlDQoJCQl2ZXJzaW9uID0gbG9hZFZlcnNpb24obWFya2VyKTsNCgkJ
fQ0KCQlzZXRWZXJzaW9uKHZlcnNpb24pOw0KCX0NCg0KCXByb3RlY3RlZCBmaW5hbCBTdHJpbmcg
bG9hZFZlcnNpb24oSU1hcmtlcltdIG1hcmtlcikgdGhyb3dzIEludm9jYXRpb25UYXJnZXRFeGNl
cHRpb24gew0KCQlTdHJpbmcgdmVyc2lvbiA9IChTdHJpbmcpIGdldFZhbHVlKG1hcmtlclswXSwg
Q29uZmlndXJhdGlvbkNvbnN0YW50cy5WRVJTSU9OKTsNCgkJaWYgKHZlcnNpb24gPT0gbnVsbCkJ
cmV0dXJuIENvbmZpZ3VyYXRpb25Db25zdGFudHMuVkVSU0lPTjRfMDM7DQoNCgkJcmV0dXJuIHZl
cnNpb247DQoJfQ0KDQoJcHJvdGVjdGVkIGZpbmFsIFN0cmluZyBsb2FkVmVyc2lvbihJUmVzb3Vy
Y2UgcmVzb3VyY2UpIHRocm93cyBJbnZvY2F0aW9uVGFyZ2V0RXhjZXB0aW9uIHsNCgkJdHJ5IHsN
CgkJCS8vIFRoaXMgbWV0aG9kIHdpbGwgYmUgY2FsbGVkIGluIG9uZSBvZiB0d28gc2l0dWF0aW9u
czoNCgkJCS8vICAgIDEuIFRoaXMgaXMgYSBuZXcgd29ya3NwYWNlIGFuZCBubyBwcmVmZXJlbmNl
cyBleGlzdC4NCgkJCS8vICAgIDIuIFRoaXMgaXMgYSBtaWdyYXRlZCB3b3Jrc3BhY2UgYW5kIHRo
ZSBvbGQgcHJlZmVyZW5jZXMgaGF2ZSBhbHJlYWR5IGJlZW4gY3JlYXRlZCBhcw0KCQkJLy8gcGVy
c2lzdGVudCBwcm9wZXJ0aWVzLg0KCQkJU3RyaW5nIHN0b3JlZENvbmZpZ3VyYXRpb24gPSByZXNv
dXJjZS5nZXRQZXJzaXN0ZW50UHJvcGVydHkoQ29uZmlndXJhdGlvbkNvbnN0YW50cy5VU0VSX1BS
RUZFUkVOQ0UpOw0KCQkJU3RyaW5nIHZlcnNpb24gPSBudWxsOw0KCQkJaWYgKHN0b3JlZENvbmZp
Z3VyYXRpb24gPT0gbnVsbCkgew0KCQkJCXZlcnNpb24gPSBnZXRWZXJzaW9uRGVmYXVsdCgpOw0K
CQkJfSBlbHNlIHsNCgkJCQlpbnQgdmVyc2lvbkluZGV4ID0gc3RvcmVkQ29uZmlndXJhdGlvbi5p
bmRleE9mKENvbmZpZ3VyYXRpb25Db25zdGFudHMuVkVSU0lPTik7DQoJCQkJaWYgKHZlcnNpb25J
bmRleCAhPSAtMSkNCgkJCQkJdmVyc2lvbiA9IHN0b3JlZENvbmZpZ3VyYXRpb24uc3Vic3RyaW5n
KHZlcnNpb25JbmRleCArIENvbmZpZ3VyYXRpb25Db25zdGFudHMuVkVSU0lPTi5sZW5ndGgoKSk7
DQoJCQl9DQoNCgkJCWlmICh2ZXJzaW9uID09IG51bGwpIHsNCgkJCQlyZXR1cm4gZ2V0VmVyc2lv
bkRlZmF1bHQoKTsNCgkJCX0NCg0KCQkJcmV0dXJuIHZlcnNpb247DQoJCX0gY2F0Y2ggKENvcmVF
eGNlcHRpb24gZXhjKSB7DQoJCQl0aHJvdyBuZXcgSW52b2NhdGlvblRhcmdldEV4Y2VwdGlvbihl
eGMsIFJlc291cmNlSGFuZGxlci5nZXRFeHRlcm5hbGl6ZWRNZXNzYWdlKFJlc291cmNlQ29uc3Rh
bnRzLlZCRl9FWENfUkVUUklFVkUsIG5ldyBTdHJpbmdbXXtnZXRSZXNvdXJjZSgpLmdldE5hbWUo
KX0pKTsNCgkJfQ0KCX0NCg0KCS8qKg0KCSAqIExvYWQgdGhlIHZhbHVlcyBvZiB0aGVzZSBmaWVs
ZHMgd2hlbiB0aGUgcHJvamVjdCBvciB3b3Jrc3BhY2UgaXMgb3BlbmVkLg0KCSAqLw0KCXByb3Rl
Y3RlZCBmaW5hbCB2b2lkIGxvYWQoKSB0aHJvd3MgSW52b2NhdGlvblRhcmdldEV4Y2VwdGlvbiB7
DQoJCXRyeSB7DQoJCQlpZiAoZ2V0UmVzb3VyY2UoKSA9PSBudWxsKSB7DQoJCQkJdGhyb3cgbmV3
IEludm9jYXRpb25UYXJnZXRFeGNlcHRpb24obnVsbCwgUmVzb3VyY2VIYW5kbGVyLmdldEV4dGVy
bmFsaXplZE1lc3NhZ2UoUmVzb3VyY2VDb25zdGFudHMuVkJGX0VYQ19OVUxMUkVUUklFVkUpKTsN
CgkJCX0NCg0KCQkJSU1hcmtlcltdIG1hcmtlciA9IGdldE1hcmtlcigpOw0KCQkJaWYgKG1hcmtl
ciA9PSBudWxsKSB7DQoJCQkJLy8gZWl0aGVyIGEgbmV3IHdvcmtzcGFjZSBvciBhbHJlYWR5IG1p
Z3JhdGVkOyBwcm9jZWVkIGFzIG5vcm1hbA0KCQkJCWxvYWRQcmVmZXJlbmNlKCk7DQoJCQl9IGVs
c2Ugew0KCQkJCS8vIG1pZ3JhdGUNCgkJCQlsb2FkKG1hcmtlcik7DQoJCQl9DQoJCX0gY2F0Y2gg
KEludm9jYXRpb25UYXJnZXRFeGNlcHRpb24gZXhjKSB7DQoJCQl0aHJvdyBleGM7DQoJCX0gY2F0
Y2ggKEV4Y2VwdGlvbiBleGMpIHsNCgkJCVN0cmluZyByZXNvdXJjZU5hbWUgPSAoZ2V0UmVzb3Vy
Y2UoKSA9PSBudWxsKSA/ICJudWxsIiA6IGdldFJlc291cmNlKCkuZ2V0TmFtZSgpOyAvLyROT04t
TkxTLTEkDQoJCQl0aHJvdyBuZXcgSW52b2NhdGlvblRhcmdldEV4Y2VwdGlvbihleGMsIFJlc291
cmNlSGFuZGxlci5nZXRFeHRlcm5hbGl6ZWRNZXNzYWdlKFJlc291cmNlQ29uc3RhbnRzLlZCRl9F
WENfUkVUUklFVkUsIG5ldyBTdHJpbmdbXXtyZXNvdXJjZU5hbWV9KSk7DQoJCX0NCgl9DQoNCgkv
KioNCgkgKiBSZXR1cm4gdGhlIElNYXJrZXIgdGhhdCB1c2VkIHRvIHN0b3JlIHRoZSBwcmVmZXJl
bmNlIGluZm9ybWF0aW9uLCBpZiB0aGUgbWFya2VyIGV4aXN0cy4gKElmDQoJICogaXQgZG9lc24n
dCBleGlzdCwgdGhlbiBpdCdzIGFscmVhZHkgYmVlbiBtaWdyYXRlZC4pDQoJICovDQoJcHJvdGVj
dGVkIGFic3RyYWN0IElNYXJrZXJbXSBnZXRNYXJrZXIoKTsNCg0KCXByb3RlY3RlZCBhYnN0cmFj
dCB2b2lkIGxvYWQoSU1hcmtlcltdIG1hcmtlcikgdGhyb3dzIEludm9jYXRpb25UYXJnZXRFeGNl
cHRpb247DQoNCglwcm90ZWN0ZWQgT2JqZWN0IGdldFZhbHVlKElNYXJrZXIgbWFya2VyLCBTdHJp
bmcgYXR0cmliTmFtZSkgew0KCQlpZiAobWFya2VyID09IG51bGwpcmV0dXJuIG51bGw7DQoNCgkJ
dHJ5IHsNCgkJCXJldHVybiBtYXJrZXIuZ2V0QXR0cmlidXRlKGF0dHJpYk5hbWUpOw0KCQl9IGNh
dGNoIChDb3JlRXhjZXB0aW9uIGUpIHsNCgkJCVZhbGlkYXRpb25QbHVnaW4uZ2V0UGx1Z2luKCku
aGFuZGxlRXhjZXB0aW9uKGUpOw0KCQkJcmV0dXJuIG51bGw7DQoJCX0NCgl9DQoNCglwcm90ZWN0
ZWQgYm9vbGVhbiBnZXRWYWx1ZShJTWFya2VyIG1hcmtlciwgU3RyaW5nIGF0dHJpYk5hbWUsIGJv
b2xlYW4gZGVmYXVsdFZhbHVlKSB7DQoJCUJvb2xlYW4gYm9vbCA9IChCb29sZWFuKSBnZXRWYWx1
ZShtYXJrZXIsIGF0dHJpYk5hbWUpOw0KCQlpZiAoYm9vbCA9PSBudWxsKXJldHVybiBkZWZhdWx0
VmFsdWU7DQoNCgkJcmV0dXJuIGJvb2wuYm9vbGVhblZhbHVlKCk7DQoJfQ0KDQoJcHJvdGVjdGVk
IGludCBnZXRWYWx1ZShJTWFya2VyIG1hcmtlciwgU3RyaW5nIGF0dHJpYk5hbWUsIGludCBkZWZh
dWx0VmFsdWUpIHsNCgkJSW50ZWdlciBpbnRlZ2VyID0gKEludGVnZXIpIGdldFZhbHVlKG1hcmtl
ciwgYXR0cmliTmFtZSk7DQoJCWlmIChpbnRlZ2VyID09IG51bGwpcmV0dXJuIGRlZmF1bHRWYWx1
ZTsNCg0KCQlyZXR1cm4gaW50ZWdlci5pbnRWYWx1ZSgpOw0KCX0NCg0KCXByb3RlY3RlZCBTdHJp
bmcgZ2V0VmFsdWUoSU1hcmtlciBtYXJrZXIsIFN0cmluZyBhdHRyaWJOYW1lLCBTdHJpbmcgZGVm
YXVsdFZhbHVlKSB7DQoJCVN0cmluZyBzdHJpbmcgPSAoU3RyaW5nKSBnZXRWYWx1ZShtYXJrZXIs
IGF0dHJpYk5hbWUpOw0KCQlpZiAoc3RyaW5nID09IG51bGwpcmV0dXJuIGRlZmF1bHRWYWx1ZTsN
Cg0KCQlyZXR1cm4gc3RyaW5nOw0KCX0NCg0KCXByb3RlY3RlZCB2b2lkIGxvYWRQcmVmZXJlbmNl
KCkgdGhyb3dzIEludm9jYXRpb25UYXJnZXRFeGNlcHRpb24gew0KCQkvLyBUaGlzIG1ldGhvZCB3
aWxsIGJlIGNhbGxlZCBpbiBvbmUgb2YgdHdvIHNpdHVhdGlvbnM6DQoJCS8vIDEuIFRoaXMgaXMg
YSBuZXcgd29ya3NwYWNlIGFuZCBubyBwcmVmZXJlbmNlcyBleGlzdC4NCgkJLy8gMi4gVGhpcyBp
cyBhIG1pZ3JhdGVkIHdvcmtzcGFjZSBhbmQgdGhlIG9sZCBwcmVmZXJlbmNlcyBoYXZlIGFscmVh
ZHkgYmVlbiBjcmVhdGVkIGFzDQoJCS8vIHBlcnNpc3RlbnQgcHJvcGVydGllcy4NCgkJUHJlZmVy
ZW5jZXNXcmFwcGVyIHByZWZzID0gUHJlZmVyZW5jZXNXcmFwcGVyLmdldFByZWZlcmVuY2VzKG51
bGwsIG51bGwpOw0KCQlkZXNlcmlhbGl6ZUFsbFByZWZzKHByZWZzKTsNCgl9DQoNCgkvKioNCgkg
KiBAcGFyYW0gcHJlZnMNCgkgKiBAdGhyb3dzIEludm9jYXRpb25UYXJnZXRFeGNlcHRpb24NCgkg
Ki8NCglwcml2YXRlIHZvaWQgZGVzZXJpYWxpemVBbGxQcmVmcyhQcmVmZXJlbmNlc1dyYXBwZXIg
cHJlZnMpIHRocm93cyBJbnZvY2F0aW9uVGFyZ2V0RXhjZXB0aW9uIHsNCgkJU3RyaW5nIHN0b3Jl
ZENvbmZpZyA9IHByZWZzLmdldChWYWxpZGF0aW9uQ29uZmlndXJhdGlvbi5Vc2VyUHJlZmVyZW5j
ZSwgbnVsbCk7DQoJCWRlc2VyaWFsaXplKHN0b3JlZENvbmZpZyk7DQoJCVN0cmluZyBzdG9yZWRN
YW51YWxDb25maWcgPSBwcmVmcy5nZXQoVmFsaWRhdGlvbkNvbmZpZ3VyYXRpb24uVXNlck1hbnVh
bFByZWZlcmVuY2UsIG51bGwpOw0KCQlkZXNlcmlhbGl6ZU1hbnVhbChzdG9yZWRNYW51YWxDb25m
aWcpOw0KCQlTdHJpbmcgc3RvcmVkQnVpbGRDb25maWcgPSBwcmVmcy5nZXQoVmFsaWRhdGlvbkNv
bmZpZ3VyYXRpb24uVXNlckJ1aWxkUHJlZmVyZW5jZSwgbnVsbCk7DQoJCWRlc2VyaWFsaXplQnVp
bGQoc3RvcmVkQnVpbGRDb25maWcpOw0KCQlTdHJpbmcgc3RvcmVkRGVsZWdhdGVzQ29uZmlndXJh
dGlvbiA9IHByZWZzLmdldChWYWxpZGF0aW9uQ29uZmlndXJhdGlvbi5EZWxlZ2F0ZXNQcmVmZXJl
bmNlLCBudWxsKTsNCgkJZGVzZXJpYWxpemVEZWxlZ2F0ZXMoc3RvcmVkRGVsZWdhdGVzQ29uZmln
dXJhdGlvbik7DQoJfQ0KCQ0KCXB1YmxpYyB2b2lkIHByb3BlcnR5Q2hhbmdlKFByb3BlcnR5Q2hh
bmdlRXZlbnQgZXZlbnQpIHsNCgkJUHJlZmVyZW5jZXMgcHJlZnMgPSAoUHJlZmVyZW5jZXMpIGV2
ZW50LmdldFNvdXJjZSgpOw0KCQlpZiAocHJlZnMgIT0gbnVsbCAmJiAhZXZlbnQuZ2V0T2xkVmFs
dWUoKS5lcXVhbHMoZXZlbnQuZ2V0TmV3VmFsdWUoKSkpIHsNCgkJCXRyeSB7DQoJCQkJZGVzZXJp
YWxpemVBbGxQcmVmcyhldmVudCk7DQoJCQkJcGFzc2l2YXRlKCk7DQoJCQkgfSBjYXRjaCAoSW52
b2NhdGlvblRhcmdldEV4Y2VwdGlvbiBlKSB7DQoJCQkJIFZhbGlkYXRpb25QbHVnaW4uZ2V0UGx1
Z2luKCkuaGFuZGxlRXhjZXB0aW9uKGUpOw0KCQkJfQ0KCQl9DQoJfQ0KDQoJcHJpdmF0ZSB2b2lk
IGRlc2VyaWFsaXplQWxsUHJlZnMoUHJvcGVydHlDaGFuZ2VFdmVudCBldmVudCkgdGhyb3dzIElu
dm9jYXRpb25UYXJnZXRFeGNlcHRpb24gew0KCQlTdHJpbmcgc3RvcmVkQ29uZmlnID0gKFN0cmlu
ZylldmVudC5nZXROZXdWYWx1ZSgpOw0KCQlpZiggZXZlbnQuZ2V0UHJvcGVydHkoKS5lcXVhbHMo
VmFsaWRhdGlvbkNvbmZpZ3VyYXRpb24uVXNlclByZWZlcmVuY2UpICl7DQoJCQlkZXNlcmlhbGl6
ZShzdG9yZWRDb25maWcpOw0KCQl9ZWxzZSBpZihldmVudC5nZXRQcm9wZXJ0eSgpLmVxdWFscyhW
YWxpZGF0aW9uQ29uZmlndXJhdGlvbi5Vc2VyTWFudWFsUHJlZmVyZW5jZSkpew0KCQkJZGVzZXJp
YWxpemVNYW51YWwoc3RvcmVkQ29uZmlnKTsNCgkJfWVsc2UgaWYoZXZlbnQuZ2V0UHJvcGVydHko
KS5lcXVhbHMoVmFsaWRhdGlvbkNvbmZpZ3VyYXRpb24uVXNlckJ1aWxkUHJlZmVyZW5jZSkpew0K
CQkJZGVzZXJpYWxpemVCdWlsZChzdG9yZWRDb25maWcpOw0KCQl9ZWxzZSBpZihldmVudC5nZXRQ
cm9wZXJ0eSgpLmVxdWFscyhWYWxpZGF0aW9uQ29uZmlndXJhdGlvbi5EZWxlZ2F0ZXNQcmVmZXJl
bmNlKSl7DQoJCQlkZXNlcmlhbGl6ZURlbGVnYXRlcyhzdG9yZWRDb25maWcpOw0KCQl9DQoJfQ0K
CQ0KCQ0KCXByb3RlY3RlZCB2b2lkIGRlc2VyaWFsaXplQnVpbGQoU3RyaW5nIHN0b3JlZENvbmZp
Z3VyYXRpb24pIHRocm93cyBJbnZvY2F0aW9uVGFyZ2V0RXhjZXB0aW9uIHsNCgkJaWYgKHN0b3Jl
ZENvbmZpZ3VyYXRpb24gPT0gbnVsbCB8fCBzdG9yZWRDb25maWd1cmF0aW9uLmxlbmd0aCgpID09
IDAgfHwgc3RvcmVkQ29uZmlndXJhdGlvbi5lcXVhbHMoRGVmYXVsdFZhbHVlKSkgew0KCQkJLy8g
QXNzdW1lIHRoYXQgdGhlIGNvbmZpZ3VyYXRpb24gaGFzIG5ldmVyIGJlZW4gc2V0IChuZXcgd29y
a3NwYWNlKS4NCgkJCXJlc2V0VG9EZWZhdWx0KCk7DQoJCQlyZXR1cm47DQoJCX0NCgkJaW50IGJ1
aWxkVmFsaWRhdGlvbkluZGV4ID0gc3RvcmVkQ29uZmlndXJhdGlvbi5pbmRleE9mKENvbmZpZ3Vy
YXRpb25Db25zdGFudHMuRU5BQkxFRF9CVUlMRF9WQUxJREFUT1JTKTsNCg0KCQlTdHJpbmcgbWFu
dWFsVmFsaWRhdGlvbiA9IHN0b3JlZENvbmZpZ3VyYXRpb24uc3Vic3RyaW5nKGJ1aWxkVmFsaWRh
dGlvbkluZGV4ICsgQ29uZmlndXJhdGlvbkNvbnN0YW50cy5FTkFCTEVEX0JVSUxEX1ZBTElEQVRP
UlMubGVuZ3RoKCksc3RvcmVkQ29uZmlndXJhdGlvbi5sZW5ndGgoKSk7DQoJCXNldEVuYWJsZWRC
dWlsZFZhbGlkYXRvcnMoZ2V0U3RyaW5nQXNFbmFibGVkRWxlbWVudHNBcnJheShtYW51YWxWYWxp
ZGF0aW9uKSk7DQoJfQ0KDQoJcHJvdGVjdGVkIHZvaWQgZGVzZXJpYWxpemVNYW51YWwoU3RyaW5n
IHN0b3JlZENvbmZpZ3VyYXRpb24pIHRocm93cyBJbnZvY2F0aW9uVGFyZ2V0RXhjZXB0aW9uIHsN
CgkJaWYgKHN0b3JlZENvbmZpZ3VyYXRpb24gPT0gbnVsbCB8fCBzdG9yZWRDb25maWd1cmF0aW9u
Lmxlbmd0aCgpID09IDAgfHwgc3RvcmVkQ29uZmlndXJhdGlvbi5lcXVhbHMoRGVmYXVsdFZhbHVl
KSkgew0KCQkJLy8gQXNzdW1lIHRoYXQgdGhlIGNvbmZpZ3VyYXRpb24gaGFzIG5ldmVyIGJlZW4g
c2V0IChuZXcgd29ya3NwYWNlKS4NCgkJCXJlc2V0VG9EZWZhdWx0KCk7DQoJCQlyZXR1cm47DQoJ
CX0NCgkJaW50IG1hbnVhbFZhbGlkYXRpb25JbmRleCA9IHN0b3JlZENvbmZpZ3VyYXRpb24uaW5k
ZXhPZihDb25maWd1cmF0aW9uQ29uc3RhbnRzLkVOQUJMRURfTUFOVUFMX1ZBTElEQVRPUlMpOw0K
DQoJCVN0cmluZyBtYW51YWxWYWxpZGF0aW9uID0gc3RvcmVkQ29uZmlndXJhdGlvbi5zdWJzdHJp
bmcobWFudWFsVmFsaWRhdGlvbkluZGV4ICsgQ29uZmlndXJhdGlvbkNvbnN0YW50cy5FTkFCTEVE
X01BTlVBTF9WQUxJREFUT1JTLmxlbmd0aCgpLHN0b3JlZENvbmZpZ3VyYXRpb24ubGVuZ3RoKCkp
Ow0KCQlzZXRFbmFibGVkTWFudWFsVmFsaWRhdG9ycyhnZXRTdHJpbmdBc0VuYWJsZWRFbGVtZW50
c0FycmF5KG1hbnVhbFZhbGlkYXRpb24pKTsNCgl9DQoNCglwcm90ZWN0ZWQgdm9pZCBkZXNlcmlh
bGl6ZURlbGVnYXRlcyhTdHJpbmcgc3RvcmVkQ29uZmlndXJhdGlvbikgdGhyb3dzIEludm9jYXRp
b25UYXJnZXRFeGNlcHRpb24gew0KDQogICAgaWYgKHN0b3JlZENvbmZpZ3VyYXRpb24gPT0gbnVs
bCB8fCBzdG9yZWRDb25maWd1cmF0aW9uLmxlbmd0aCgpID09IDAgfHwgc3RvcmVkQ29uZmlndXJh
dGlvbi5lcXVhbHMoRGVmYXVsdFZhbHVlKSkgew0KCSAgICAvLyBBc3N1bWUgdGhhdCB0aGUgY29u
ZmlndXJhdGlvbiBoYXMgbmV2ZXIgYmVlbiBzZXQgKG5ldyB3b3Jrc3BhY2UpLg0KCSAgICByZXNl
dFRvRGVmYXVsdCgpOw0KCSAgICByZXR1cm47DQoJICB9DQoNCgkgIGludCBkZWxlZ2F0ZXNJbmRl
eCA9IHN0b3JlZENvbmZpZ3VyYXRpb24uaW5kZXhPZihDb25maWd1cmF0aW9uQ29uc3RhbnRzLkRF
TEVHQVRFX1ZBTElEQVRPUlMpOw0KDQoJICBTdHJpbmcgZGVsZWdhdGVzID0gc3RvcmVkQ29uZmln
dXJhdGlvbi5zdWJzdHJpbmcoZGVsZWdhdGVzSW5kZXggKyBDb25maWd1cmF0aW9uQ29uc3RhbnRz
LkRFTEVHQVRFX1ZBTElEQVRPUlMubGVuZ3RoKCksc3RvcmVkQ29uZmlndXJhdGlvbi5sZW5ndGgo
KSk7DQoNCgkgIGlmIChkZWxlZ2F0ZXMgPT0gbnVsbCkgew0KCSAgICByZXR1cm47DQoJICB9DQoN
CgkgIFN0cmluZ1Rva2VuaXplciB0b2tlbml6ZXIgPSBuZXcgU3RyaW5nVG9rZW5pemVyKGRlbGVn
YXRlcywgQ29uZmlndXJhdGlvbkNvbnN0YW50cy5FTEVNRU5UX1NFUEFSQVRPUik7DQoJICB3aGls
ZSAodG9rZW5pemVyLmhhc01vcmVUb2tlbnMoKSkgew0KCSAgICBTdHJpbmcgZGVsZWdhdGVDb25m
aWd1cmF0aW9uID0gdG9rZW5pemVyLm5leHRUb2tlbigpOw0KCSAgICBpbnQgc2VwYXJhdG9ySW5k
ZXggPSBkZWxlZ2F0ZUNvbmZpZ3VyYXRpb24uaW5kZXhPZihDb25maWd1cmF0aW9uQ29uc3RhbnRz
LkRFTEVHQVRFU19TRVBBUkFUT1IpOw0KCSAgICBTdHJpbmcgdGFyZ2V0SUQgPSBkZWxlZ2F0ZUNv
bmZpZ3VyYXRpb24uc3Vic3RyaW5nKDAsIHNlcGFyYXRvckluZGV4KTsNCgkgICAgU3RyaW5nIGRl
bGVnYXRlSUQgPSBkZWxlZ2F0ZUNvbmZpZ3VyYXRpb24uc3Vic3RyaW5nKHNlcGFyYXRvckluZGV4
ICsgMSk7DQogICAgICBfZGVsZWdhdGVzQnlUYXJnZXQucHV0KHRhcmdldElELCBkZWxlZ2F0ZUlE
KTsNCgkgIH0NCgl9DQoNCglwcm90ZWN0ZWQgdm9pZCBjb3B5VG8oVmFsaWRhdGlvbkNvbmZpZ3Vy
YXRpb24gdXApIHRocm93cyBJbnZvY2F0aW9uVGFyZ2V0RXhjZXB0aW9uIHsNCgkJdXAuc2V0VmVy
c2lvbihnZXRWZXJzaW9uKCkpOw0KCQl1cC5zZXRWYWxpZGF0b3JzKGdldFZhbGlkYXRvcnMoKSk7
DQoJCXVwLnNldERpc2FibGVBbGxWYWxpZGF0aW9uKGlzRGlzYWJsZUFsbFZhbGlkYXRpb24oKSk7
DQoJCXVwLnNldEVuYWJsZWRWYWxpZGF0b3JzKGdldEVuYWJsZWRWYWxpZGF0b3JzKCkpOw0KCQl1
cC5zZXRFbmFibGVkTWFudWFsVmFsaWRhdG9ycyhnZXRNYW51YWxFbmFibGVkVmFsaWRhdG9ycygp
KTsNCgkJdXAuc2V0RW5hYmxlZEJ1aWxkVmFsaWRhdG9ycyhnZXRCdWlsZEVuYWJsZWRWYWxpZGF0
b3JzKCkpOw0KICAgIHVwLnNldERlbGVnYXRpbmdWYWxpZGF0b3JzKGdldERlbGVnYXRpbmdWYWxp
ZGF0b3JzKCkpOw0KCX0NCg0KCS8qKg0KCSAqIFRoZSBrZXkgaXMgdGhlIGlkIG9mIHRoZSBwbGFj
ZSBob2xkZXIgdmFsaWRhdG9yLCBhbmQgdGhlIHZhbHVlIGlzIHRoZSBpZCBvZiB2YWxpZGF0b3IN
CgkgKiB0aGF0IHdpbGwgcGVyZm9ybSB0aGUgdmFsaWRhdGlvbi4gDQoJICovDQoJcHVibGljIE1h
cDxTdHJpbmcsIFN0cmluZz4gZ2V0RGVsZWdhdGluZ1ZhbGlkYXRvcnMoKSB0aHJvd3MgSW52b2Nh
dGlvblRhcmdldEV4Y2VwdGlvbiB7DQoJCXJldHVybiBfZGVsZWdhdGVzQnlUYXJnZXQ7DQoJfQ0K
DQoJcHVibGljIHZvaWQgc2V0RGVsZWdhdGluZ1ZhbGlkYXRvcnMoTWFwPFN0cmluZywgU3RyaW5n
PiBzb3VyY2UpDQoJew0KCQkvLyBJdCBpcyBzYWZlIHRvIGNvcHkgdGhpcyBtYXAgYXMgaXQgY29u
dGFpbnMgb25seSBpbW11dGFibGUgc3RyaW5ncy4NCgkJX2RlbGVnYXRlc0J5VGFyZ2V0LnB1dEFs
bChzb3VyY2UpOw0KCX0NCg0KICAvKioNCgkgKiBSZXR1cm4gdHJ1ZSBpZiB0aGUgZW5hYmxlZCB2
YWxpZGF0b3JzIGhhdmUgbm90IGNoYW5nZWQgc2luY2UgdGhpcyBWYWxpZGF0aW9uQ29uZmlndXJh
dGlvbiB3YXMNCgkgKiBjb25zdHJ1Y3RlZCwgZmFsc2Ugb3RoZXJ3aXNlLiAoVGhpcyBtZXRob2Qg
aXMgbmVlZGVkIGZvciB0aGUgUHJvcGVydGllcyBhbmQgUHJlZmVyZW5jZSBwYWdlczsNCgkgKiBp
ZiB0aGUgbGlzdCBvZiB2YWxpZGF0b3JzIGhhc24ndCBjaGFuZ2VkLCB0aGVuIHRoZXJlIGlzIG5v
IG5lZWQgdG8gdXBkYXRlIHRoZSB0YXNrIGxpc3Q7DQoJICogdXBkYXRpbmcgdGhlIHRhc2sgbGlz
dCBpcyBhIGNvc3RseSBvcGVyYXRpb24uKQ0KCSAqLw0KCXByb3RlY3RlZCBib29sZWFuIGhhc0Vu
YWJsZWRWYWxpZGF0b3JzQ2hhbmdlZChWYWxpZGF0b3JNZXRhRGF0YVtdIG9sZEVuYWJsZWRWbWQp
IHRocm93cyBJbnZvY2F0aW9uVGFyZ2V0RXhjZXB0aW9uIHsNCgkJLy8gRmlyc3QgY2hlY2sgdGhl
IG9idmlvdXM6IGlzIGV2ZXJ5IGVuYWJsZWQgdmFsaWRhdG9yIHN0aWxsIGVuYWJsZWQsIGFuZCBp
cw0KCQkvLyB0aGUgbnVtYmVyIG9mIGVuYWJsZWQgdmFsaWRhdG9ycyB0aGUgc2FtZSBhcyBpdCB3
YXMgYmVmb3JlPyBJZiBub3QsIHJldHVybiB0cnVlLg0KCQlpZiAob2xkRW5hYmxlZFZtZCA9PSBu
dWxsKSB7DQoJCQkvLyBTb21ldGhpbmcncyBnb25lIHdyb25nLi4uDQoJCQlyZXR1cm4gdHJ1ZTsN
CgkJfQ0KDQoJCWZvciAoaW50IGkgPSAwOyBpIDwgb2xkRW5hYmxlZFZtZC5sZW5ndGg7IGkrKykg
ew0KCQkJVmFsaWRhdG9yTWV0YURhdGEgdm1kID0gb2xkRW5hYmxlZFZtZFtpXTsNCgkJCWlmICgh
aXNFbmFibGVkKHZtZCkpIHsNCgkJCQlyZXR1cm4gdHJ1ZTsNCgkJCX0NCgkJfQ0KDQoJCS8vIEV2
ZXJ5dGhpbmcgdGhhdCB3YXMgZW5hYmxlZCBpcyBzdGlsbCBlbmFibGVkOyBoYXZlIGFueSBhZGRp
dGlvbmFsDQoJCS8vIHZhbGlkYXRvcnMgYmVlbiBlbmFibGVkPw0KCQlpZiAobnVtYmVyT2ZFbmFi
bGVkVmFsaWRhdG9ycygpICE9IG9sZEVuYWJsZWRWbWQubGVuZ3RoKSB7DQoJCQlyZXR1cm4gdHJ1
ZTsNCgkJfQ0KDQoJCXJldHVybiBmYWxzZTsNCgl9DQogIA0KICAvKioNCiAgICogRGV0ZXJtaW5l
cyBpZiB0aGVyZSBoYXMgYmVlbiBhIGNoYW5nZSBpbiB0aGUgbGlzdCBvZiBkZWxlZ2F0ZSB2YWxp
ZGF0b3JzLg0KICAgKiBAcGFyYW0gb2xkRGVsZWdhdGVzIGEgTWFwIHdpdGggdGhlIG9sZCBkZWxl
Z2F0ZXMgSUQgYnkgdGFyZ2V0IElELg0KICAgKiBAcmV0dXJuIHRydWUgaWYgdGhlcmUgaGFzIGJl
ZW4gYSBjaGFuZ2UsIGZhbHNlIG90aGVyd2lzZS4NCiAgICogQHRocm93cyBJbnZvY2F0aW9uVGFy
Z2V0RXhjZXB0aW9uDQogICAqLw0KICBwcm90ZWN0ZWQgYm9vbGVhbiBoYXZlRGVsZWdhdGVzQ2hh
bmdlZChNYXA8U3RyaW5nLCBTdHJpbmc+IG9sZERlbGVnYXRlcykgdGhyb3dzIEludm9jYXRpb25U
YXJnZXRFeGNlcHRpb24gew0KICAgIA0KICAgIGlmIChvbGREZWxlZ2F0ZXMgPT0gbnVsbClyZXR1
cm4gdHJ1ZTsNCiAgICANCiAgICBmb3IgKFN0cmluZyB0YXJnZXRJRCA6IG9sZERlbGVnYXRlcy5r
ZXlTZXQoKSkgew0KICAgICAgU3RyaW5nIG9sZERlbGVnYXRlSUQgPSBvbGREZWxlZ2F0ZXMuZ2V0
KHRhcmdldElEKTsNCiAgICAgIFN0cmluZyBuZXdEZWxlZ2F0ZUlEID0gX2RlbGVnYXRlc0J5VGFy
Z2V0LmdldCh0YXJnZXRJRCk7DQogICAgICANCiAgICAgIGlmIChvbGREZWxlZ2F0ZUlEID09IG51
bGwgfHwgbmV3RGVsZWdhdGVJRCA9PSBudWxsKXJldHVybiB0cnVlOw0KICAgICAgICANCiAgICAg
IGlmICghbmV3RGVsZWdhdGVJRC5lcXVhbHMob2xkRGVsZWdhdGVJRCkpcmV0dXJuIHRydWU7DQog
ICAgfQ0KICAgIA0KICAgIGlmIChvbGREZWxlZ2F0ZXMuc2l6ZSgpICE9IF9kZWxlZ2F0ZXNCeVRh
cmdldC5zaXplKCkpcmV0dXJuIHRydWU7DQogICAgDQogICAgcmV0dXJuIGZhbHNlOw0KICB9DQoN
Cglwcm90ZWN0ZWQgU3RyaW5nIHNlcmlhbGl6ZSgpIHRocm93cyBJbnZvY2F0aW9uVGFyZ2V0RXhj
ZXB0aW9uIHsNCgkJU3RyaW5nQnVmZmVyIGJ1ZmZlciA9IG5ldyBTdHJpbmdCdWZmZXIoKTsNCgkJ
YnVmZmVyLmFwcGVuZChDb25maWd1cmF0aW9uQ29uc3RhbnRzLkRJU0FCTEVfQUxMX1ZBTElEQVRJ
T05fU0VUVElORyk7DQoJCWJ1ZmZlci5hcHBlbmQoU3RyaW5nLnZhbHVlT2YoaXNEaXNhYmxlQWxs
VmFsaWRhdGlvbigpKSk7DQoJCWJ1ZmZlci5hcHBlbmQoQ29uZmlndXJhdGlvbkNvbnN0YW50cy5W
RVJTSU9OKTsNCgkJYnVmZmVyLmFwcGVuZChnZXRWZXJzaW9uKCkpOw0KCQlyZXR1cm4gYnVmZmVy
LnRvU3RyaW5nKCk7DQoJfQ0KCQ0KCXByb3RlY3RlZCBTdHJpbmcgc2VyaWFsaXplTWFudWFsU2V0
dGluZygpIHRocm93cyBJbnZvY2F0aW9uVGFyZ2V0RXhjZXB0aW9uIHsNCgkJU3RyaW5nQnVmZmVy
IGJ1ZmZlciA9IG5ldyBTdHJpbmdCdWZmZXIoKTsNCgkJYnVmZmVyLmFwcGVuZChDb25maWd1cmF0
aW9uQ29uc3RhbnRzLkVOQUJMRURfTUFOVUFMX1ZBTElEQVRPUlMpOw0KCQlidWZmZXIuYXBwZW5k
KGdldEVuYWJsZWRFbGVtZW50c0FzU3RyaW5nKGdldE1hbnVhbEVuYWJsZWRWYWxpZGF0b3JzKCkp
KTsNCgkJcmV0dXJuIGJ1ZmZlci50b1N0cmluZygpOw0KCX0NCgkNCglwcm90ZWN0ZWQgU3RyaW5n
IHNlcmlhbGl6ZUJ1aWxkU2V0dGluZygpIHRocm93cyBJbnZvY2F0aW9uVGFyZ2V0RXhjZXB0aW9u
IHsNCgkJU3RyaW5nQnVmZmVyIGJ1ZmZlciA9IG5ldyBTdHJpbmdCdWZmZXIoKTsNCgkJYnVmZmVy
LmFwcGVuZChDb25maWd1cmF0aW9uQ29uc3RhbnRzLkVOQUJMRURfQlVJTERfVkFMSURBVE9SUyk7
DQoJCWJ1ZmZlci5hcHBlbmQoZ2V0RW5hYmxlZEVsZW1lbnRzQXNTdHJpbmcoZ2V0QnVpbGRFbmFi
bGVkVmFsaWRhdG9ycygpKSk7DQoJCXJldHVybiBidWZmZXIudG9TdHJpbmcoKTsNCgl9DQoNCiAg
cHJvdGVjdGVkIFN0cmluZyBzZXJpYWxpemVEZWxlZ2F0ZXNTZXR0aW5nKCkgdGhyb3dzIEludm9j
YXRpb25UYXJnZXRFeGNlcHRpb24gew0KICAgIFN0cmluZ0J1ZmZlciBidWZmZXIgPSBuZXcgU3Ry
aW5nQnVmZmVyKCk7DQogICAgYnVmZmVyLmFwcGVuZChDb25maWd1cmF0aW9uQ29uc3RhbnRzLkRF
TEVHQVRFX1ZBTElEQVRPUlMpOw0KICAgIGJ1ZmZlci5hcHBlbmQoZ2V0RGVsZWdhdGVzQXNTdHJp
bmcoZ2V0VmFsaWRhdG9yTWV0YURhdGEoKSkpOw0KICAgIHJldHVybiBidWZmZXIudG9TdHJpbmco
KTsNCiAgfQ0KDQogIC8qKg0KICAgKiBQcm92aWRlcyBhIFN0cmluZyB3aGljaCBjb250YWlucyBw
YWlycyBvZiB0YXJnZXRJRD1kZWxlZ2F0ZUlEIHNlcGFyYXRlZCBieSBhIHNlbWljb2xvbi4NCiAg
ICogQHBhcmFtIHZhbGlkYXRvck1ldGFEYXRhIGEgTWFwIHdpdGggdGhlIGN1cnJlbnRseSBjb25m
aWd1cmVkIHZhbGlkYXRvcnMuDQogICAqIEByZXR1cm4gYSBTdHJpbmcuDQogICAqLw0KICBwcml2
YXRlIFN0cmluZyBnZXREZWxlZ2F0ZXNBc1N0cmluZyhNYXA8VmFsaWRhdG9yTWV0YURhdGEsIEJv
b2xlYW4+IHZhbGlkYXRvck1ldGFEYXRhKSB7DQogICAgDQogICAgU3RyaW5nQnVmZmVyIGJ1ZmZl
ciA9IG5ldyBTdHJpbmdCdWZmZXIoKTsNCiAgICBmb3IgKFZhbGlkYXRvck1ldGFEYXRhIHZtZCA6
IHZhbGlkYXRvck1ldGFEYXRhLmtleVNldCgpKSB7ICAgIA0KICAgICAgU3RyaW5nIHRhcmdldElE
ID0gdm1kLmdldFZhbGlkYXRvclVuaXF1ZU5hbWUoKTsNCiAgICAgIFN0cmluZyBkZWxlZ2F0ZUlE
ID0gZ2V0RGVsZWdhdGVVbmlxdWVOYW1lKHZtZCk7DQogICAgICANCiAgICAgIGlmIChkZWxlZ2F0
ZUlEID09IG51bGwpY29udGludWU7DQoNCiAgICAgIC8vIFdyaXRlIG91dCBwYWlycyB0YXJnZXRJ
RD1kZWxlZ2F0ZUlEDQoNCiAgICAgIGJ1ZmZlci5hcHBlbmQodGFyZ2V0SUQpOw0KICAgICAgYnVm
ZmVyLmFwcGVuZChDb25maWd1cmF0aW9uQ29uc3RhbnRzLkRFTEVHQVRFU19TRVBBUkFUT1IpOw0K
ICAgICAgYnVmZmVyLmFwcGVuZChkZWxlZ2F0ZUlEKTsNCiAgICAgIGJ1ZmZlci5hcHBlbmQoQ29u
ZmlndXJhdGlvbkNvbnN0YW50cy5FTEVNRU5UX1NFUEFSQVRPUik7DQogICAgfQ0KICAgIA0KICAg
IHJldHVybiBidWZmZXIudG9TdHJpbmcoKTsNCiAgfQ0KICANCiAgLyoqDQogICAqIFByb3ZpZGVz
IHRoZSBkZWxlZ2F0ZSdzIElEIG9mIHRoZSB2YWxpZGF0b3IgZGVsZWdhdGUgY29uZmlndXJlZCBp
biB0aGlzIGNvbmZpZ3VyYXRpb24gZm9yIA0KICAgKiBhIGdpdmVuIGRlbGVnYXRpbmcgdmFsaWRh
dG9yLiBUaGF0IGlzIGFuc3dlciB0aGUgaWQgb2YgdmFsaWRhdG9yIHRoYXQgaXMgZ29pbmcgdG8g
ZG8gdGhlIHJlYWwgd29yay4NCiAgICogDQogICAqIEBwYXJhbSB2bWQgdGhlIGRlbGVnYXRpbmcg
dmFsaWRhdG9yJ3MgbWV0YSBkYXRhLiBNdXN0IG5vdCBiZSBudWxsLg0KICAgKiBAcmV0dXJuIGEg
U3RyaW5nIHdpdGggdGhlIGlkIG9mIHRoZSB2YWxpZGF0b3IgZGVsZWdhdGUsIG51bGwgaWYgdGhl
cmUgaXNuJ3Qgb25lLg0KICAgKi8NCiAgcHVibGljIFN0cmluZyBnZXREZWxlZ2F0ZVVuaXF1ZU5h
bWUoVmFsaWRhdG9yTWV0YURhdGEgdm1kKSB7DQogICAgU3RyaW5nIHRhcmdldElEID0gdm1kLmdl
dFZhbGlkYXRvclVuaXF1ZU5hbWUoKTsgICAgDQogICAgcmV0dXJuIF9kZWxlZ2F0ZXNCeVRhcmdl
dC5nZXQodGFyZ2V0SUQpOw0KICB9DQogIA0KICAvKioNCiAgICogUHJvdmlkZXMgdGhlIGRlbGVn
YXRlJ3MgSUQgb2YgdGhlIHZhbGlkYXRvciBkZWxlZ2F0ZSBjb25maWd1cmVkIGluIHRoaXMgY29u
ZmlndXJhdGlvbiBmb3IgDQogICAqIGEgZ2l2ZW4gZGVsZWdhdGluZyB2YWxpZGF0b3IuIFRoYXQg
aXMgYW5zd2VyIHRoZSBpZCBvZiB2YWxpZGF0b3IgdGhhdCBpcyBnb2luZyB0byBkbyB0aGUgcmVh
bCB3b3JrLg0KICAgKiANCiAgICogQHBhcmFtIHRhcmdldElkIHRoZSBpZCBvZiB0aGUgdGFyZ2V0
IChvciBwbGFjZSBob2xkZXIpIHZhbGlkYXRvci4gTXVzdCBub3QgYmUgbnVsbC4NCiAgICogQHJl
dHVybiBhIFN0cmluZyB3aXRoIHRoZSBpZCBvZiB0aGUgdmFsaWRhdG9yIGRlbGVnYXRlLCBudWxs
IGlmIHRoZXJlIGlzbid0IG9uZS4NCiAgICovDQogIHB1YmxpYyBTdHJpbmcgZ2V0RGVsZWdhdGVG
b3JUYXJnZXQoU3RyaW5nIHRhcmdldElkKXsNCgkgIHJldHVybiBfZGVsZWdhdGVzQnlUYXJnZXQu
Z2V0KHRhcmdldElkKTsNCiAgfQ0KDQogIC8qKg0KICAgKiBTZXRzIHRoZSBkZWxlZ2F0ZSdzIElE
IG9mIHRoZSB2YWxpZGF0b3IgZGVsZWdhdGUgdG8gYmUgdXNlZCBpbiB0aGlzIGNvbmZpZ3VyYXRp
b24gZm9yIHRoZQ0KICAgKiBnaXZlbiBkZWxlZ2F0aW5nIHZhbGlkYXRvci4NCiAgICogDQogICAq
IEBwYXJhbSB2bWQgdGhlIGRlbGVnYXRpbmcgdmFsaWRhdG9yJ3MgbWV0YWRhdGEuIE11c3Qgbm90
IGJlIG51bGwuDQogICAqIEBwYXJhbSBkZWxlZ2F0ZUlEIGEgU3RyaW5nIHdpdGggdGhlIHVuaXF1
ZSBuYW1lIChJRCkgb2YgdGhlIHZhbGlkYXRvciBkZWxlZ2F0ZS4gTXVzdCBub3QgYmUgbnVsbC4N
CiAgICovDQogIHB1YmxpYyB2b2lkIHNldERlbGVnYXRlVW5pcXVlTmFtZShWYWxpZGF0b3JNZXRh
RGF0YSB2bWQsIFN0cmluZyBkZWxlZ2F0ZUlEKSB7DQogICAgU3RyaW5nIHRhcmdldElEID0gdm1k
LmdldFZhbGlkYXRvclVuaXF1ZU5hbWUoKTsgICAgDQogICAgX2RlbGVnYXRlc0J5VGFyZ2V0LnB1
dCh0YXJnZXRJRCwgZGVsZWdhdGVJRCk7DQogIH0NCg0KICAvKioNCgkgKiBEZXNlcmlhbGl6ZSBl
dmVyeXRoaW5nIGV4Y2VwdCB0aGUgdmVyc2lvbiBudW1iZXI7IHRoZSB2ZXJzaW9uIGlzIGRlc2Vy
aWFsaXplZCBmaXJzdCwgaW4gdGhlDQoJICogbG9hZFZlcnNpb24oKSBtZXRob2QuDQoJICovDQoJ
cHJvdGVjdGVkIHZvaWQgZGVzZXJpYWxpemUoU3RyaW5nIHN0b3JlZENvbmZpZ3VyYXRpb24pIHRo
cm93cyBJbnZvY2F0aW9uVGFyZ2V0RXhjZXB0aW9uIHsNCgkJaWYgKHN0b3JlZENvbmZpZ3VyYXRp
b24gPT0gbnVsbCB8fCBzdG9yZWRDb25maWd1cmF0aW9uLmxlbmd0aCgpID09IDAgfHwgc3RvcmVk
Q29uZmlndXJhdGlvbi5lcXVhbHMoRGVmYXVsdFZhbHVlKSkgew0KCQkJLy8gQXNzdW1lIHRoYXQg
dGhlIGNvbmZpZ3VyYXRpb24gaGFzIG5ldmVyIGJlZW4gc2V0IChuZXcgd29ya3NwYWNlKS4NCgkJ
CXJlc2V0VG9EZWZhdWx0KCk7DQoJCQlyZXR1cm47DQoJCX0NCgkJaW50IGRpc2FibGVBbGxWYWxp
ZGF0aW9uSW5kZXggPSBzdG9yZWRDb25maWd1cmF0aW9uLmluZGV4T2YoQ29uZmlndXJhdGlvbkNv
bnN0YW50cy5ESVNBQkxFX0FMTF9WQUxJREFUSU9OX1NFVFRJTkcpOw0KCQlpbnQgdmVyc2lvbklu
ZGV4ID0gc3RvcmVkQ29uZmlndXJhdGlvbi5pbmRleE9mKENvbmZpZ3VyYXRpb25Db25zdGFudHMu
VkVSU0lPTik7DQoJCWlmKGRpc2FibGVBbGxWYWxpZGF0aW9uSW5kZXggIT0gLTEpIHsNCgkJCQlT
dHJpbmcgZGlzYWJsZUFsbFZhbGlkYXRpb24gPSBzdG9yZWRDb25maWd1cmF0aW9uLnN1YnN0cmlu
ZyhkaXNhYmxlQWxsVmFsaWRhdGlvbkluZGV4ICsgQ29uZmlndXJhdGlvbkNvbnN0YW50cy5ESVNB
QkxFX0FMTF9WQUxJREFUSU9OX1NFVFRJTkcubGVuZ3RoKCksdmVyc2lvbkluZGV4KTsNCgkJCQlz
ZXREaXNhYmxlQWxsVmFsaWRhdGlvbihCb29sZWFuLnZhbHVlT2YoZGlzYWJsZUFsbFZhbGlkYXRp
b24pLmJvb2xlYW5WYWx1ZSgpKTsNCgkJfSBlbHNlIHsNCgkJCQlzZXREaXNhYmxlQWxsVmFsaWRh
dGlvbihmYWxzZSk7DQoJCX0NCgkJDQoJfQ0KDQoJcHVibGljIHN0YXRpYyBib29sZWFuIGdldERp
c2FibGVWYWxpZGF0aW9uRGVmYXVsdCgpIHsNCgkJcmV0dXJuIENvbmZpZ3VyYXRpb25Db25zdGFu
dHMuREVGQVVMVF9ESVNBQkxFX1ZBTElEQVRJT05fU0VUVElORzsNCgl9DQoNCglwdWJsaWMgc3Rh
dGljIFZhbGlkYXRvck1ldGFEYXRhW10gZ2V0RW5hYmxlZFZhbGlkYXRvcnNEZWZhdWx0KCkgew0K
CQlyZXR1cm4gQ29uZmlndXJhdGlvbkNvbnN0YW50cy5ERUZBVUxUX0VOQUJMRURfVkFMSURBVE9S
UzsNCgl9DQoNCglwdWJsaWMgc3RhdGljIGludCBnZXRNYXhpbXVtTnVtYmVyT2ZNZXNzYWdlc0Rl
ZmF1bHQoKSB7DQoJCXJldHVybiBDb25maWd1cmF0aW9uQ29uc3RhbnRzLkRFRkFVTFRfTUFYTlVN
TUVTU0FHRVM7DQoJfQ0KDQoJcHVibGljIHN0YXRpYyBTdHJpbmcgZ2V0VmVyc2lvbkRlZmF1bHQo
KSB7DQoJCS8vIElmIHRoZSB2ZXJzaW9uIGNhbid0IGJlIHJldHJpZXZlZCwgYXNzdW1lIHRoYXQg
aXQncyBhIG5ldyB3b3Jrc3BhY2UuIChBIG51bGwgdmVyc2lvbg0KCQkvLyBjb3VsZCBhbHNvIG1l
YW4gYSA0LjAzIHdvcmtzcGFjZSwgYnV0IHRoYXQncyB0YWtlbiBjYXJlIG9mIGluIHRoZSBsb2Fk
KElNYXJrZXJbXSkNCgkJLy8gbWV0aG9kLikNCgkJcmV0dXJuIENvbmZpZ3VyYXRpb25Db25zdGFu
dHMuQ1VSUkVOVF9WRVJTSU9OOw0KCX0NCgkNCglwdWJsaWMgYm9vbGVhbiBpc01hbnVhbEVuYWJs
ZWQoVmFsaWRhdG9yTWV0YURhdGEgdm1kKSB7DQoJCWlmICh2bWQgPT0gbnVsbClyZXR1cm4gZmFs
c2U7DQoJCUJvb2xlYW4gdmFsdWUgPSBnZXRNYW51YWxFbmFibGVkVmFsaWRhdG9yc01hcCgpLmdl
dCh2bWQpOw0KCQlpZiAodmFsdWUgPT0gbnVsbClyZXR1cm4gZmFsc2U7DQoJCXJldHVybiB2YWx1
ZTsNCgl9DQoNCglwdWJsaWMgYm9vbGVhbiBpc0J1aWxkRW5hYmxlZChWYWxpZGF0b3JNZXRhRGF0
YSB2bWQpIHsNCgkJaWYgKHZtZCA9PSBudWxsKXJldHVybiBmYWxzZTsNCgkJQm9vbGVhbiB2YWx1
ZSA9IGdldEJ1aWxkRW5hYmxlZFZhbGlkYXRvcnNNYXAoKS5nZXQodm1kKTsNCgkJaWYgKHZhbHVl
ID09IG51bGwpcmV0dXJuIGZhbHNlOw0KCQlyZXR1cm4gdmFsdWU7DQoJfQ0KCQ0KCXB1YmxpYyBp
bnQgbnVtYmVyT2ZNYW51YWxFbmFibGVkVmFsaWRhdG9ycygpIHRocm93cyBJbnZvY2F0aW9uVGFy
Z2V0RXhjZXB0aW9uIHsNCgkJcmV0dXJuIGdldE1hbnVhbEVuYWJsZWRWYWxpZGF0b3JzKCkubGVu
Z3RoOw0KCX0NCgkNCglwdWJsaWMgdm9pZCBlbmFibGVTaW5nbGVWYWxpZGF0b3IoVmFsaWRhdG9y
TWV0YURhdGEgIHZtZCl7DQoJCWdldFZhbGlkYXRvck1ldGFEYXRhKCkucHV0KHZtZCwgQm9vbGVh
bi5UUlVFKTsNCgl9DQoJDQoJDQoJcHVibGljIHZvaWQgZGlzYWJsZVNpbmdsZVZhbGlkYXRvcihW
YWxpZGF0b3JNZXRhRGF0YSAgdm1kKXsNCgkJZ2V0VmFsaWRhdG9yTWV0YURhdGEoKS5wdXQodm1k
LCBCb29sZWFuLkZBTFNFKTsNCgl9DQoJDQoJcHVibGljIHZvaWQgZW5hYmxlU2luZ2xlTWFudWFs
VmFsaWRhdG9yKFZhbGlkYXRvck1ldGFEYXRhICB2bWQpew0KCQlnZXRNYW51YWxFbmFibGVkVmFs
aWRhdG9yc01hcCgpLnB1dCh2bWQsIEJvb2xlYW4uVFJVRSk7DQoJfQ0KCQ0KCQ0KCXB1YmxpYyB2
b2lkIGRpc2FibGVTaW5nbGVNYW51YWxWYWxpZGF0b3IoVmFsaWRhdG9yTWV0YURhdGEgIHZtZCl7
DQoJCWdldE1hbnVhbEVuYWJsZWRWYWxpZGF0b3JzTWFwKCkucHV0KHZtZCwgQm9vbGVhbi5GQUxT
RSk7DQoJfQ0KDQoJDQoJcHVibGljIHZvaWQgZW5hYmxlU2luZ2xlQnVpbGRWYWxpZGF0b3IoVmFs
aWRhdG9yTWV0YURhdGEgIHZtZCl7DQoJCWdldEJ1aWxkRW5hYmxlZFZhbGlkYXRvcnNNYXAoKS5w
dXQodm1kLCBCb29sZWFuLlRSVUUpOw0KCX0NCgkNCgkNCglwdWJsaWMgdm9pZCBkaXNhYmxlU2lu
Z2xlQnVpbGRWYWxpZGF0b3IoVmFsaWRhdG9yTWV0YURhdGEgIHZtZCl7DQoJCWdldEJ1aWxkRW5h
YmxlZFZhbGlkYXRvcnNNYXAoKS5wdXQodm1kLCBCb29sZWFuLkZBTFNFKTsNCgl9DQoJDQogIC8q
Kg0KICAgKiBQcm92aWRlcyB0aGUgZGVsZWdhdGUgdmFsaWRhdG9yIGRlc2NyaXB0b3Igb2YgdGhl
IHZhbGlkYXRvciBkZWxlZ2F0ZSBjb25maWd1cmVkIA0KICAgKiBmb3IgdGhlIGdpdmVuIGRlbGVn
YXRpbmcgdmFsaWRhdG9yIGluIHRoZSBjb250ZXh0IG9mIHRoaXMgY29uZmlndXJhdGlvbi4gDQog
ICAqIEBwYXJhbSB2bWQgdGhlIGRlbGVnYXRpbmcgdmFsaWRhdG9yJ3MgbWV0YSBkYXRhLiBNdXN0
IG5vdCBiZSBudWxsLg0KICAgKiBAcmV0dXJuIGEgVmFsaWRhdG9yRGVsZWdhdGVEZXNjcmlwdG9y
IGZvciB0aGUgZ2l2ZW4gZGVsZWdhdGluZyB2YWxpZGF0b3IuDQogICAqLw0KICBwdWJsaWMgVmFs
aWRhdG9yRGVsZWdhdGVEZXNjcmlwdG9yIGdldERlbGVnYXRlRGVzY3JpcHRvcihWYWxpZGF0b3JN
ZXRhRGF0YSB2bWQpICB0aHJvd3MgSW52b2NhdGlvblRhcmdldEV4Y2VwdGlvbiB7DQogICAgU3Ry
aW5nIHRhcmdldElEID0gdm1kLmdldFZhbGlkYXRvclVuaXF1ZU5hbWUoKTsNCiAgICBTdHJpbmcg
ZGVsZWdhdGVJRCA9IGdldERlbGVnYXRlVW5pcXVlTmFtZSh2bWQpOw0KICANCiAgICBWYWxpZGF0
b3JEZWxlZ2F0ZURlc2NyaXB0b3IgZGVzY3JpcHRvciA9IFZhbGlkYXRvckRlbGVnYXRlc1JlZ2lz
dHJ5LmdldEluc3RhbmNlKCkuZ2V0RGVzY3JpcHRvcih0YXJnZXRJRCwgZGVsZWdhdGVJRCk7IA0K
ICAgIHJldHVybiBkZXNjcmlwdG9yOyAgICANCiAgfQ0KfQ0K
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>212432</attachid>
            <date>2012-03-11 12:11:00 -0400</date>
            <delta_ts>2012-03-11 12:11:41 -0400</delta_ts>
            <desc>static non-final fields in jdt.core</desc>
            <filename>static-fields-sorted.txt</filename>
            <type>text/plain</type>
            <size>4708</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">TUFYX0FUX09OQ0UJCQlBYnN0cmFjdEltYWdlQnVpbGRlci5qYXZhCkVtcHR5VmFsdWVBcnJheQkJ
CUFubm90YXRpb25JbmZvLmphdmEKUkVTT1VSQ0VfQlVORExFCQkJQW50QWRhcHRlck1lc3NhZ2Vz
LmphdmEKVkVSQk9TRQkJCQlCYXNpY1NlYXJjaEVuZ2luZS5qYXZhCkRFRkFVTFRfQlVGRkVSX01B
TkFHRVIJCUJ1ZmZlck1hbmFnZXIuamF2YQpWRVJCT1NFCQkJCUJ1ZmZlck1hbmFnZXIuamF2YQpG
aXhlZEVycm9yQ291bnQJCQlCdWlsZE5vdGlmaWVyLmphdmEKRml4ZWRXYXJuaW5nQ291bnQJCUJ1
aWxkTm90aWZpZXIuamF2YQpOZXdFcnJvckNvdW50CQkJQnVpbGROb3RpZmllci5qYXZhCk5ld1dh
cm5pbmdDb3VudAkJCUJ1aWxkTm90aWZpZXIuamF2YQpQYWNrYWdlQ2FjaGUJCQlDbGFzc3BhdGhK
YXIuamF2YQpFTlVNX0NPTlNUQU5UU19USFJFU0hPTEQJQ2xpbml0LmphdmEKSW1wbGljaXRUaGlz
CQkJQ29kZVN0cmVhbS5qYXZhCm5vRXhjZXB0aW9uSGFuZGxlcnMJCUNvZGVTdHJlYW0uamF2YQpu
b0xhYmVscwkJCUNvZGVTdHJlYW0uamF2YQpub0xvY2FscwkJCUNvZGVTdHJlYW0uamF2YQpub1Zp
c2libGVMb2NhbHMJCQlDb2RlU3RyZWFtLmphdmEKZGVmYXVsdEFyaXR5TWF4U3RhcnRpbmdWYWx1
ZQlDb21iaW5lZEJpbmFyeUV4cHJlc3Npb24uamF2YQpERUJVRwkJCQlDb21waWxlci5qYXZhCkRl
YnVnUmVxdWVzdG9yCQkJQ29tcGlsZXIuamF2YQpERUJVRwkJCQlDb21wbGV0aW9uRW5naW5lLmph
dmEKRmFrZUludm9jYXRpb25TaXRlCQlDb21wbGV0aW9uRW5naW5lLmphdmEKUEVSRgkJCQlDb21w
bGV0aW9uRW5naW5lLmphdmEKREVDT0RFX1NJR05BVFVSRQkJQ29tcGxldGlvblJlcXVlc3Rvcldy
YXBwZXIuamF2YQpJTklUSUFMX1NJWkUJCQlDb21wb3VuZE5hbWVWZWN0b3IuamF2YQpERUNMX0NB
VEVHT1JJRVMJCQlDb25zdHJ1Y3RvclBhdHRlcm4uamF2YQpSRUZfQU5EX0RFQ0xfQ0FURUdPUklF
UwkJQ29uc3RydWN0b3JQYXR0ZXJuLmphdmEKUkVGX0NBVEVHT1JJRVMJCQlDb25zdHJ1Y3RvclBh
dHRlcm4uamF2YQpERUJVRwkJCQlEZWZhdWx0Q29kZUZvcm1hdHRlci5qYXZhClBST0JJTkdfU0NB
Tk5FUgkJCURlZmF1bHRDb2RlRm9ybWF0dGVyLmphdmEKREVGQVVMVF9MT0NBTEVfVEVNUExBVEVT
CURlZmF1bHRQcm9ibGVtRmFjdG9yeS5qYXZhCkRFQlVHCQkJCURlbHRhUHJvY2Vzc29yLmphdmEK
UEVSRgkJCQlEZWx0YVByb2Nlc3Nvci5qYXZhClZFUkJPU0UJCQkJRGVsdGFQcm9jZXNzb3IuamF2
YQpCVUZGRVJfUkVBRF9TSVpFCQlEaXNrSW5kZXguamF2YQpERUJVRwkJCQlEaXNrSW5kZXguamF2
YQpDT0RFX1NOSVBQRVRfQ09VTlRFUgkJRXZhbHVhdGlvbkNvbnRleHQuamF2YQpWQVJfQ0xBU1Nf
Q09VTlRFUgkJRXZhbHVhdGlvbkNvbnRleHQuamF2YQpNQU5BR0VSCQkJCUV4dGVybmFsRm9sZGVy
c01hbmFnZXIuamF2YQpERUNMX0NBVEVHT1JJRVMJCQlGaWVsZFBhdHRlcm4uamF2YQpSRUZfQU5E
X0RFQ0xfQ0FURUdPUklFUwkJRmllbGRQYXR0ZXJuLmphdmEKUkVGX0NBVEVHT1JJRVMJCQlGaWVs
ZFBhdHRlcm4uamF2YQpDT01QSUxBVElPTl9VTklUCQlJRE9NTm9kZS5qYXZhCkZJRUxECQkJCUlE
T01Ob2RlLmphdmEKSU1QT1JUCQkJCUlET01Ob2RlLmphdmEKSU5JVElBTElaRVIJCQlJRE9NTm9k
ZS5qYXZhCk1FVEhPRAkJCQlJRE9NTm9kZS5qYXZhClBBQ0tBR0UJCQkJSURPTU5vZGUuamF2YQpU
WVBFCQkJCUlET01Ob2RlLmphdmEKTWF4Q29tcGlsZUxvb3AJCQlJbmNyZW1lbnRhbEltYWdlQnVp
bGRlci5qYXZhCkRFQlVHCQkJCUluZGV4TWFuYWdlci5qYXZhCk5PX0FUVEFDSEVEX1NPVVJDRQkJ
SW50ZXJuYWxDb21wbGV0aW9uUHJvcG9zYWwuamF2YQpFbXB0eU5vZGVNYXAJCQlJbnRlcm5hbEV4
dGVuZGVkQ29tcGxldGlvbkNvbnRleHQuamF2YQpidWlsdFByb2plY3RzCQkJSmF2YUJ1aWxkZXIu
amF2YQpERUJVRwkJCQlKYXZhQnVpbGRlci5qYXZhClNIT1dfU1RBVFMJCQlKYXZhQnVpbGRlci5q
YXZhCkpBVkFfQ09SRV9QTFVHSU4JCUphdmFDb3JlLmphdmEKUFJFRklYX0xFTkdUSAkJCUphdmFD
b3JlUHJlZmVyZW5jZU1vZGlmeUxpc3RlbmVyLmphdmEKRU1QVFlfREVMVEEJCQlKYXZhRWxlbWVu
dERlbHRhLmphdmEKTk9fTk9OX0pBVkFfUkVTT1VSQ0VTCQlKYXZhRWxlbWVudEluZm8uamF2YQpW
RVJCT1NFCQkJCUphdmFNb2RlbENhY2hlLmphdmEKZXhpc3RpbmdFeHRlcm5hbENvbmZpcm1lZEZp
bGVzCUphdmFNb2RlbC5qYXZhCmV4aXN0aW5nRXh0ZXJuYWxGaWxlcwkJSmF2YU1vZGVsLmphdmEK
Q1BfUkVTT0xWRV9WRVJCT1NFX0FEVkFOQ0VECUphdmFNb2RlbE1hbmFnZXIuamF2YQpDUF9SRVNP
TFZFX1ZFUkJPU0VfRkFJTFVSRQlKYXZhTW9kZWxNYW5hZ2VyLmphdmEKQ1BfUkVTT0xWRV9WRVJC
T1NFCQlKYXZhTW9kZWxNYW5hZ2VyLmphdmEKTUFOQUdFUgkJCQlKYXZhTW9kZWxNYW5hZ2VyLmph
dmEKUEVSRl9DT05UQUlORVJfSU5JVElBTElaRVIJSmF2YU1vZGVsTWFuYWdlci5qYXZhClBFUkZf
VkFSSUFCTEVfSU5JVElBTElaRVIJSmF2YU1vZGVsTWFuYWdlci5qYXZhClZFUkJPU0UJCQkJSmF2
YU1vZGVsTWFuYWdlci5qYXZhClpJUF9BQ0NFU1NfVkVSQk9TRQkJSmF2YU1vZGVsTWFuYWdlci5q
YXZhClBPU1RfQUNUSU9OX1ZFUkJPU0UJCUphdmFNb2RlbE9wZXJhdGlvbi5qYXZhCkNQX1JFU09M
VVRJT05fQlBfTElTVEVORVJTCUphdmFQcm9qZWN0LmphdmEKY29tcGlsZXJDbGFzcwkJCUpEVENv
bXBpbGVyQWRhcHRlci5qYXZhClZFUkJPU0UJCQkJSm9iTWFuYWdlci5qYXZhCkNhY2hlCQkJCU1h
aW4uamF2YQpFUkFTVVJFX01BVENICQkJTWF0Y2hpbmdOb2RlU2V0LmphdmEKRVhBQ1RfTUFUQ0gJ
CQlNYXRjaGluZ05vZGVTZXQuamF2YQpQT1RFTlRJQUxfTUFUQ0gJCQlNYXRjaGluZ05vZGVTZXQu
amF2YQpERUNMX0NBVEVHT1JJRVMJCQlNZXRob2RQYXR0ZXJuLmphdmEKUkVGX0FORF9ERUNMX0NB
VEVHT1JJRVMJCU1ldGhvZFBhdHRlcm4uamF2YQpSRUZfQ0FURUdPUklFUwkJCU1ldGhvZFBhdHRl
cm4uamF2YQpDQVRFR09SSUVTCQkJTXVsdGlUeXBlRGVjbGFyYXRpb25QYXR0ZXJuLmphdmEKVkVS
Qk9TRQkJCQlOYW1lTG9va3VwLmphdmEKSU5JVElBTF9TSVpFCQkJT2JqZWN0VmVjdG9yLmphdmEK
T3BlcmF0b3JTaWduYXR1cmVzCQlPcGVyYXRvckV4cHJlc3Npb24uamF2YQpDQVRFR09SSUVTCQkJ
UGFja2FnZVJlZmVyZW5jZVBhdHRlcm4uamF2YQphc2IJCQkJUGFyc2VyLmphdmEKYXNyCQkJCVBh
cnNlci5qYXZhCmJhc2VfYWN0aW9uCQkJUGFyc2VyLmphdmEKY2hlY2tfdGFibGUJCQlQYXJzZXIu
amF2YQppbl9zeW1iCQkJCVBhcnNlci5qYXZhCmxocwkJCQlQYXJzZXIuamF2YQpuYW1lCQkJCVBh
cnNlci5qYXZhCm5hc2IJCQkJUGFyc2VyLmphdmEKbmFzcgkJCQlQYXJzZXIuamF2YQpub25fdGVy
bWluYWxfaW5kZXgJCVBhcnNlci5qYXZhCnJlYWRhYmxlTmFtZQkJCVBhcnNlci5qYXZhCnJlY292
ZXJ5X3RlbXBsYXRlc19pbmRleAlQYXJzZXIuamF2YQpyZWNvdmVyeV90ZW1wbGF0ZXMJCVBhcnNl
ci5qYXZhCnJldmVyc2VfaW5kZXgJCQlQYXJzZXIuamF2YQpyaHMJCQkJUGFyc2VyLmphdmEKcnVs
ZXNfY29tcGxpYW5jZQkJUGFyc2VyLmphdmEKc2NvcGVfbGEJCQlQYXJzZXIuamF2YQpzY29wZV9s
aHMJCQlQYXJzZXIuamF2YQpzY29wZV9wcmVmaXgJCQlQYXJzZXIuamF2YQpzY29wZV9yaHMJCQlQ
YXJzZXIuamF2YQpzY29wZV9zdGF0ZQkJCVBhcnNlci5qYXZhCnNjb3BlX3N0YXRlX3NldAkJCVBh
cnNlci5qYXZhCnNjb3BlX3N1ZmZpeAkJCVBhcnNlci5qYXZhCnN0YXRlbWVudHNfcmVjb3Zlcnlf
ZmlsdGVyCVBhcnNlci5qYXZhCnRlcm1fYWN0aW9uCQkJUGFyc2VyLmphdmEKdGVybV9jaGVjawkJ
CVBhcnNlci5qYXZhCnRlcm1pbmFsX2luZGV4CQkJUGFyc2VyLmphdmEKVkVSQk9TRV9SRUNPVkVS
WQkJUGFyc2VyLmphdmEKZmFjdG9yaWVzCQkJUHJvYmxlbUZhY3RvcnkuamF2YQpQRVJGCQkJCVJl
Y29uY2lsZVdvcmtpbmdDb3B5T3BlcmF0aW9uLmphdmEKSW50ZXJuZWRRdWFsaWZpZWROYW1lcwkJ
UmVmZXJlbmNlQ29sbGVjdGlvbi5qYXZhCkludGVybmVkU2ltcGxlTmFtZXMJCVJlZmVyZW5jZUNv
bGxlY3Rpb24uamF2YQpUYWJsZXM3CQkJCVNjYW5uZXJIZWxwZXIuamF2YQpUYWJsZXMJCQkJU2Nh
bm5lckhlbHBlci5qYXZhCkNPTU1FTlRfSU5ERU5UQVRJT05TCQlTY3JpYmUuamF2YQpERUJVRwkJ
CQlTZWxlY3Rpb25FbmdpbmUuamF2YQpQRVJGCQkJCVNlbGVjdGlvbkVuZ2luZS5qYXZhCklOSVRJ
QUxfU0laRQkJCVNpbXBsZU5hbWVWZWN0b3IuamF2YQpWRVJCT1NFCQkJCVNvdXJjZU1hcHBlci5q
YXZhCk1heFN0cnVjdHVyYWxseUNoYW5nZWRUeXBlcwlTdGF0ZS5qYXZhCkNBVEVHT1JJRVMJCQlT
dXBlclR5cGVSZWZlcmVuY2VQYXR0ZXJuLmphdmEKTk9fUkVTT1VSQ0VTCQkJVHJ5U3RhdGVtZW50
LmphdmEKQ0FURUdPUklFUwkJCVR5cGVEZWNsYXJhdGlvblBhdHRlcm4uamF2YQppbnRlcm5lZFBh
Y2thZ2VOYW1lcwkJVHlwZURlY2xhcmF0aW9uUGF0dGVybi5qYXZhCkRFQlVHCQkJCVR5cGVIaWVy
YXJjaHkuamF2YQpJTklUSUFMX1NJWkUJCQlUeXBlVmVjdG9yLmphdmEKQ292ZXJhZ2VUZXN0SWQJ
CQlVbmNvbmRpdGlvbmFsRmxvd0luZm8uamF2YQpmZ1JlcGVhdGVkTWVzc2FnZXMJCVV0aWwuamF2
YQpKQVZBX0xJS0VfRVhURU5TSU9OUwkJVXRpbC5qYXZhCg==
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>212620</attachid>
            <date>2012-03-14 04:02:00 -0400</date>
            <delta_ts>2012-03-14 04:02:33 -0400</delta_ts>
            <desc>Table of the problems</desc>
            <filename>errormatrix.xls</filename>
            <type>application/octet-stream</type>
            <size>10240</size>
            <attacher name="Satyam Kandula">satyam.kandula</attacher>
            
              <data encoding="base64">0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAOwADAP7/CQAGAAAAAAAAAAAAAAABAAAAEQAAAAAAAAAA
EAAADwAAAAEAAAD+////AAAAAAAAAAD/////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////9
/////////wMAAAAEAAAABQAAAAYAAAAHAAAACAAAAAkAAAAKAAAACwAAAAwAAAANAAAADgAAAP7/
///+/////v///xIAAAD+////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////1IA
bwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAWAAUA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
/v///wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD///////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAD+////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////wAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP7///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA////////
////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/v///wAAAAAAAAAACQgQ
AAAGBQC7DcwHAAAAAAYAAADhAAIAsATBAAIAAADiAAAAXABwAAQAAENhbGMgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCAAIAsARhAQIAAADAAQAAPQEGAAEA
AgADAJwAAgAOAK8BAgAAALwBAgAAAD0AEgAAAAAAAEAAIDgAAAAAAAEAWAJAAAIAAACNAAIAAAAi
AAIAAAAOAAIAAQC3AQIAAADaAAIAAAAxABoAyAAAAP9/kAEAAAACAAAFAUEAcgBpAGEAbAAxABoA
yAAAAP9/kAEAAAAAAAAFAUEAcgBpAGEAbAAxABoAyAAAAP9/kAEAAAAAAAAFAUEAcgBpAGEAbAAx
ABoAyAAAAP9/kAEAAAAAAAAFAUEAcgBpAGEAbAAxABoAyAAAAP9/vAIAAAACAAAFAUEAcgBpAGEA
bAAxABoAyAAAAAwAkAEAAAACAAAFAUEAcgBpAGEAbAAxAHAByAAAAP9/kAEAAAACAACwAUMAdQBt
AGIAZQByAGwAYQBuAGQAOwBDAHUAbQBiAGUAcgBsAGEAbgBkACAAQQBNAFQAOwBDAG8AdQByAGkA
ZQByACAATgBlAHcAOwBMAGkAYgBlAHIAYQB0AGkAbwBuACAATQBvAG4AbwA7AE4AaQBtAGIAdQBz
ACAATQBvAG4AbwAgAEwAOwBEAGUAagBhAFYAdQAgAFMAYQBuAHMAIABNAG8AbgBvADsAQgBpAHQA
cwB0AHIAZQBhAG0AIABWAGUAcgBhACAAUwBhAG4AcwAgAE0AbwBuAG8AOwBDAG8AdQByAGkAZQBy
ADsATAB1AGMAaQBkAGEAIABTAGEAbgBzACAAVAB5AHAAZQB3AHIAaQB0AGUAcgA7AEwAdQBjAGkA
ZABhACAAVAB5AHAAZQB3AHIAaQB0AGUAcgA7AE0AbwBuAGEAYwBvADsATQBvAG4AbwBzAHAAYQBj
AGUAZAAxAAIByAAAAP9/kAEAAAACAAB5AUMAdQBtAGIAZQByAGwAYQBuAGQAOwBDAG8AdQByAGkA
ZQByACAATgBlAHcAOwBCAGkAdABzAHQAcgBlAGEAbQAgAFYAZQByAGEAIABTAGEAbgBzACAATQBv
AG4AbwA7AEMAbwB1AHIAaQBlAHIAOwBMAHUAYwBpAGQAYQAgAFMAYQBuAHMAIABUAHkAcABlAHcA
cgBpAHQAZQByADsATAB1AGMAaQBkAGEAIABUAHkAcABlAHcAcgBpAHQAZQByADsATQBvAG4AYQBj
AG8AOwBNAG8AbgBvAHMAcABhAGMAZQBkADsAVABhAGgAbwBtAGEAMQAaAMgAAAAIAJABAAAAAgAA
BQFBAHIAaQBhAGwAHgQMAKQABwAAR0VORVJBTOAAFAAAAKQA9f8gAAAAAAAAAAAAAADAIOAAFAAB
AAAA9f8gAAD0AAAAAAAAAADAIOAAFAABAAAA9f8gAAD0AAAAAAAAAADAIOAAFAACAAAA9f8gAAD0
AAAAAAAAAADAIOAAFAACAAAA9f8gAAD0AAAAAAAAAADAIOAAFAAAAAAA9f8gAAD0AAAAAAAAAADA
IOAAFAAAAAAA9f8gAAD0AAAAAAAAAADAIOAAFAAAAAAA9f8gAAD0AAAAAAAAAADAIOAAFAAAAAAA
9f8gAAD0AAAAAAAAAADAIOAAFAAAAAAA9f8gAAD0AAAAAAAAAADAIOAAFAAAAAAA9f8gAAD0AAAA
AAAAAADAIOAAFAAAAAAA9f8gAAD0AAAAAAAAAADAIOAAFAAAAAAA9f8gAAD0AAAAAAAAAADAIOAA
FAAAAAAA9f8gAAD0AAAAAAAAAADAIOAAFAAAAAAA9f8gAAD0AAAAAAAAAADAIOAAFAAAAKQAAQAg
AAAAAAAAAAAAAADAIOAAFAABACsA9f8gAADwAAAAAAAAAADAIOAAFAABACkA9f8gAADwAAAAAAAA
AADAIOAAFAABACwA9f8gAADwAAAAAAAAAADAIOAAFAABACoA9f8gAADwAAAAAAAAAADAIOAAFAAB
AAkA9f8gAADwAAAAAAAAAADAIOAAFAAAAKQAAQAgAAAIAAAAAAAAAADAIOAAFAAFAKQAAQAgAAAI
AAAAAAAAAADAIOAAFAAAAKQAAQAoAAAYAAAAAAAAAADAIOAAFAAGAKQAAQAgAAAIAAAAAAAAAADA
IOAAFAAHAKQAAQAoAAAYAAAAAAAAAADAIOAAFAAHAKQAAQAgAAAIAAAAAAAAAADAIOAAFAAIAKQA
AQAoAAAYAAAAAAAAAADAIOAAFAAJAKQAAQAgAAAIAAAAAAAAAADAIJMCBAAAgAD/kwIEABCAA/+T
AgQAEYAG/5MCBAASgAT/kwIEABOAB/+TAgQAFIAF/2ABAgABAIUADgCLDAAAAAAGAFNoZWV0MYUA
DgAYFQAAAAAGAFNoZWV0MoUADgDRFgAAAAAGAFNoZWV0M4wABAABAAEA6wBqAA8AAPBiAAAAAAAG
8CgAAAABDAAABAAAAAMAAAADAAAAAQAAAAEAAAACAAAAAQAAAAMAAAABAAAAMwAL8BIAAAC/AAgA
CACBAQkAAAjAAUAAAAhAAB7xEAAAAA0AAAgMAAAIFwAACPcAABD8AIEELwAAACIAAAAHAABQUk9C
TEVNCAAASkRUL0NPUkUDAABKVk0KAABKVk0gT1BUSU9OCQAARklMRSBOQU1FBQAAQlVJTEQKAABF
eHRyYSBpbmZvNwAAVW5yZWFjaGFibGUgQ29kZSBlcnJvciBhdCB0aGUgZW5kIG9mIHRoZSBjYXNl
IHN0YXRlbWVudAMAAE00IAwAAFN1biBqZGsgNiAxNwgAAC1YbXg1MDBtywAARGlzYXNzZW1ibGVy
LmphdmE6IGh0dHA6Ly9naXQuZWNsaXBzZS5vcmcvYy9lcXVpbm94L3J0LmVxdWlub3gucDIuZ2l0
L3RyZWUvYnVuZGxlcy9vcmcuZWNsaXBzZS5lcXVpbm94LnAyLnJlcG9zaXRvcnkudG9vbHMvc3Jj
L29yZy9lY2xpcHNlL2VxdWlub3gvcDIvaW50ZXJuYWwvcmVwb3NpdG9yeS9jb21wYXJhdG9yL2ph
dmEvRGlzYXNzZW1ibGVyLmphdmEJAABTREsgYnVpbGQlAABMaW51eCBPUzogSGFwcGVuZWQgb24g
TjIwMTIwMTEwLTIwMDAgLgAAVW5yZWFjaGFibGUgQ29kZSBlcnJvciBhdCB0aGUgcmV0dXJuIHN0
YXRlbWVudA8AAEkyMDEyMDIyOC0wODAwIA0AAElibSA1IFNSMTJGUDVAAABWYWxpZGF0aW9uQ29u
ZmlndXJhdGlvbi5qYXZhOjk1OiA5NSA6IHJldHVybiBidWZmZXIudG9TdHJpbmcoKTsgCQAAV1RQ
IGJ1aWxkGgAASGFwcGVuZWQgb24gMjAxMjAzMDExNjMyNDcvAABVbml0aWFsaXplZCBsb2NhbCB2
YXJpYWJsZSAgZm9yIGkrKyBvZiB0aGUgbG9vcBgAAE01OiAzLjguMS52MjAxMjAxMjUtMTU0ND8A
AFNXVEV2ZW50SGVscGVyLmphdmE6IChpIGluIHRoZSAgaSsrIGluIGEgbG9vcCBpcyB1bmluaXRp
YWxpemVkKSQAAExpbnV4IE9TOiBIYXBwZW5lZCBvbiBOMjAxMjAyMjItMjAwMDUAAFVuaXRpYWxp
emVkIGxvY2FsIHZhcmlhYmxlIGZvciB0aGUgc3RhdGVtZW50IGluIHdoaWxlPAAAUmVzdWx0c1N1
bW1hcnlHZW5lcmF0b3IuamF2YSA6IDU4MCAod2hpbGUgYW1vdW50UmVhZCAhPSAtMSk7GgAASGFw
cGVuZWQgb24gMjAxMjAzMDEwMzI2MDcPAAB2MjAxMjAyMjgtMDUxNCAbAABPcGVuIEpESyAxLjcu
MF9iMTQ3LWljZWR0ZWE4AABDb21wb3NpdGVJZC5qYXZhIChpIGluIHRoZSBpKysgaW4gYSBsb29w
IGlzIHVuaXRpYWxpemVkKQwAAEZlZG9yYSBidWlsZBUAAEhhcHBlbmVkIG9uIDFzdCBNYXJjaCQA
AHN0YXRpYyBmaW5hbCBmaWVsZCB3aXRoIGluaXRpYWxpemVyIA8AAEkyMDEyMDMwNi0wODAwIP8A
CgAiAAAIAAAMAAAACgAAAAkIEAAABhAAuw3MBwAAAAAGAAAADAACAGQADwACAAEAEQACAAAAEAAI
APyp8dJNYlA/XwACAAEAgAAIAAAAAAAAAAAAJQIEAAAA9QCBAAIAwQQqAAIAAAArAAIAAACCAAIA
AQAUAAcABAAAJkMmQRUADAAJAAAmQ1BhZ2UgJlCDAAIAAACEAAIAAAAmAAgAMzMzMzMz6T8nAAgA
MzMzMzMz6T8oAAgAMzMzMzMz6T8pAAgAMzMzMzMz6T+hACIAAQBkAAEAAQABAIIALAEsAeqTPumT
Prk/6pM+6ZM+uT8BAFUAAgALAH0ADAAAAAAAVRYVAAAAAAB9AAwAAQABAOIYFQAAAAAAfQAMAAIA
AgA3EBUAAAAAAH0ADAADAAMAgRMVAAAAAAB9AAwABAAEAI0iFQAAAAAAfQAMAAUABQC/DxUAAAAA
AH0ADAAGAAYAJxkVAAAAAAB9AAwABwAAAR4MFQAAAAAAAAIOAAAAAAAIAAAAAAAHAAAACAIQAAAA
AAAHAGgBAAAAAEABDwAIAhAAAQAAAAcAxgIAAAAAAAEPAAgCEAACAAAABwDhAQAAAAAAAQ8ACAIQ
AAMAAAAHAOEBAAAAAAABDwAIAhAABAAAAAcA+gEAAAAAAAEPAAgCEAAFAAAABwDGAgAAAAAAAQ8A
CAIQAAYAAAAGAOEBAAAAAAABDwAIAhAABwAAAAYAxgIAAAAAAAEPAP0ACgAAAAAAFgAAAAAA/QAK
AAAAAQAWAAEAAAD9AAoAAAACABYAAgAAAP0ACgAAAAMAFgADAAAA/QAKAAAABAAWAAQAAAD9AAoA
AAAFABYABQAAAP0ACgAAAAYAFgAGAAAA/QAKAAEAAAAXAAcAAAD9AAoAAQABABUACAAAAP0ACgAB
AAIAFQAJAAAA/QAKAAEAAwAVAAoAAAD9AAoAAQAEABgACwAAAP0ACgABAAUAFQAMAAAA/QAKAAEA
BgAXAA0AAAD9AAoAAgAAABcADgAAAP0ACgACAAEAGQAPAAAA/QAKAAIAAgAVABAAAAD9AAoAAgAE
ABcAEQAAAP0ACgACAAUAFQASAAAA/QAKAAIABgAVABMAAAD9AAoAAwAAABcAFAAAAP0ACgADAAEA
FQAVAAAA/QAKAAMAAgAVAAkAAAD9AAoAAwADABUACgAAAP0ACgADAAQAFwAWAAAA/QAKAAMABQAV
AAwAAAD9AAoAAwAGABUAFwAAAP0ACgAEAAAAFwAYAAAA/QAKAAQAAQAaAA8AAAD9AAoABAACABUA
EAAAAP0ACgAEAAQAGwAZAAAA/QAKAAQABQAVABIAAAD9AAoABAAGABUAGgAAAP0ACgAFAAAAFwAU
AAAA/QAKAAUAAQAbABsAAAD9AAoABQACABcAHAAAAP0ACgAFAAQAFwAdAAAA/QAKAAUABQAVAB4A
AAD9AAoABQAGABUAHwAAAP0ACgAGAAAAFwAgAAAA/QAKAAYAAQAVAA8AAAD9AAoABgACABwAEAAA
AP0ACgAGAAUAFQASAAAA/QAKAAcAAAAXACAAAAD9AAoABwABABcAIQAAAP0ACgAHAAIAFwAcAAAA
/QAKAAcABQAVAB4AAADsAFAADwAC8EgAAAAQAAjwCAAAAAEAAAAABAAADwAD8DAAAAAPAATwKAAA
AAEACfAQAAAAAAAAAAAAAAAAAAAAAAAAAAIACvAIAAAAAAQAAAUAAAA+AhIAtgYAAAAAQAAAAAAA
AAAAAAAAHQAPAAMHAAQAAAABAAcABwAEBGcIFwBnCAAAAAAAAAAAAAACAAH/////AAAAALgBQgMB
AAEABAAEANDJ6nn5us4RjIIAqgBLqQsCAAAAFwAAAMwAAABEAGkAcwBhAHMAcwBlAG0AYgBsAGUA
cgAuAGoAYQB2AGEAOgAgAGgAdAB0AHAAOgAvAC8AZwBpAHQALgBlAGMAbABpAHAAcwBlAC4AbwBy
AGcALwBjAC8AZQBxAHUAaQBuAG8AeAAvAHIAdAAuAGUAcQB1AGkAbgBvAHgALgBwADIALgBnAGkA
dAAvAHQAcgBlAGUALwBiAHUAbgBkAGwAZQBzAC8AbwByAGcALgBlAGMAbABpAHAAcwBlAC4AZQBx
AHUAaQBuAG8AeAAuAHAAMgAuAHIAZQBwAG8AcwBpAHQAbwByAHkALgB0AG8AbwBsAHMALwBzAHIA
YwAvAG8AcgBnAC8AZQBjAGwAaQBwAHMAZQAvAGUAcQB1AGkAbgBvAHgALwBwADIALwBpAG4AdABl
AHIAbgBhAGwALwByAGUAcABvAHMAaQB0AG8AcgB5AC8AYwBvAG0AcABhAHIAYQB0AG8AcgAvAGoA
YQB2AGEALwBEAGkAcwBhAHMAcwBlAG0AYgBsAGUAcgAuAGoAYQB2AGEAAADgyep5+brOEYyCAKoA
S6kLcgEAAGgAdAB0AHAAOgAvAC8AZwBpAHQALgBlAGMAbABpAHAAcwBlAC4AbwByAGcALwBjAC8A
ZQBxAHUAaQBuAG8AeAAvAHIAdAAuAGUAcQB1AGkAbgBvAHgALgBwADIALgBnAGkAdAAvAHQAcgBl
AGUALwBiAHUAbgBkAGwAZQBzAC8AbwByAGcALgBlAGMAbABpAHAAcwBlAC4AZQBxAHUAaQBuAG8A
eAAuAHAAMgAuAHIAZQBwAG8AcwBpAHQAbwByAHkALgB0AG8AbwBsAHMALwBzAHIAYwAvAG8AcgBn
AC8AZQBjAGwAaQBwAHMAZQAvAGUAcQB1AGkAbgBvAHgALwBwADIALwBpAG4AdABlAHIAbgBhAGwA
LwByAGUAcABvAHMAaQB0AG8AcgB5AC8AYwBvAG0AcABhAHIAYQB0AG8AcgAvAGoAYQB2AGEALwBE
AGkAcwBhAHMAcwBlAG0AYgBsAGUAcgAuAGoAYQB2AGEAAAAKAAAACQgQAAAGEAC7DcwHAAAAAAYA
AAAMAAIAZAAPAAIAAQARAAIAAAAQAAgA/Knx0k1iUD9fAAIAAQCAAAgAAAAAAAAAAAAlAgQAAAD/
AIEAAgDBBCoAAgAAACsAAgAAAIIAAgABABQABwAEAAAmQyZBFQAMAAkAACZDUGFnZSAmUIMAAgAA
AIQAAgAAACYACAAzMzMzMzPpPycACAAzMzMzMzPpPygACAAzMzMzMzPpPykACAAzMzMzMzPpP6EA
IgABAGQAAAABAAEAAgAsASwB6pM+6ZM+uT/qkz7pkz65PwEAVQACAAsAfQAMAAAAAAEeDBUAAAAA
AAACDgAAAAAAAQAAAAAAAAAAAAgCEAAAAAAAAAABAQAAAAAAAQ8A7ABQAA8AAvBIAAAAIAAI8AgA
AAABAAAAAAgAAA8AA/AwAAAADwAE8CgAAAABAAnwEAAAAAAAAAAAAAAAAAAAAAAAAAACAArwCAAA
AAAIAAAFAAAAPgISALYAAAAAAEAAAAAAAAAAAAAAAB0ADwADAAAAAAAAAQAAAAAAAABnCBcAZwgA
AAAAAAAAAAAAAgAB/////wAAAAAKAAAACQgQAAAGEAC7DcwHAAAAAAYAAAAMAAIAZAAPAAIAAQAR
AAIAAAAQAAgA/Knx0k1iUD9fAAIAAQCAAAgAAAAAAAAAAAAlAgQAAAD/AIEAAgDBBCoAAgAAACsA
AgAAAIIAAgABABQABwAEAAAmQyZBFQAMAAkAACZDUGFnZSAmUIMAAgAAAIQAAgAAACYACAAzMzMz
MzPpPycACAAzMzMzMzPpPygACAAzMzMzMzPpPykACAAzMzMzMzPpP6EAIgABAGQAAAABAAEAAgAs
ASwB6pM+6ZM+uT/qkz7pkz65PwEAVQACAAsAfQAMAAAAAAEeDBUAAAAAAAACDgAAAAAAAQAAAAAA
AAAAAAgCEAAAAAAAAAABAQAAAAAAAQ8A7ABQAA8AAvBIAAAAMAAI8AgAAAABAAAAAAwAAA8AA/Aw
AAAADwAE8CgAAAABAAnwEAAAAAAAAAAAAAAAAAAAAAAAAAACAArwCAAAAAAMAAAFAAAAPgISALYA
AAAAAEAAAAAAAAAAAAAAAB0ADwADAAAAAAAAAQAAAAAAAABnCBcAZwgAAAAAAAAAAAAAAgAB////
/wAAAAAKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAA/v////7///8EAAAA
BQAAAP7///8HAAAA/v//////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////wEA/v8DCgAA/////xAIAgAA
AAAAwAAAAAAAAEYbAAAATWljcm9zb2Z0IEV4Y2VsIDk3LVRhYmVsbGUABgAAAEJpZmY4AAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAA
AgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAP7/AAABAAIAAAAAAAAAAAAAAAAAAAAAAAEAAADghZ/y+U9oEKuRCAArJ7PZMAAAAHwAAAAG
AAAAAQAAADgAAAAJAAAAQAAAAAoAAABMAAAACwAAAFgAAAAMAAAAZAAAAA0AAABwAAAAAgAAAOn9
AAAeAAAAAgAAADQAAABAAAAAgFqLdxMAAABAAAAAAJ+gkgAAAABAAAAAgJ+uPGn+zAFAAAAAAJ9Q
brgBzQEAAAAAAAAAAAAAAAAAAAAAAAAAAP7/AAABAAIAAAAAAAAAAAAAAAAAAAAAAAIAAAAC1c3V
nC4bEJOXCAArLPmuRAAAAAXVzdWcLhsQk5cIACss+a5cAAAAGAAAAAEAAAABAAAAEAAAAAIAAADp
/QAAGAAAAAEAAAABAAAAEAAAAAIAAADp/QAAAAAAAAAAAAAAAAAAUgBvAG8AdAAgAEUAbgB0AHIA
eQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABYABQD/////////
/wEAAAAQCAIAAAAAAMAAAAAAAABGAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAIAAAAAAABXAG8A
cgBrAGIAbwBvAGsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAEgACAAIAAAAEAAAA/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAIA
AACKGAAAAAAAAAEAQwBvAG0AcABPAGIAagAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAASAAIAAwAAAP//////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAEkAAAAAAAAAAQBPAGwAZQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAgD///////////////8AAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAFAAAAAAAAAAFAFMAdQBtAG0AYQByAHkASQBu
AGYAbwByAG0AYQB0AGkAbwBuAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKAACAP////8FAAAA
/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAACsAAAAAAAAAAUARABv
AGMAdQBtAGUAbgB0AFMAdQBtAG0AYQByAHkASQBuAGYAbwByAG0AYQB0AGkAbwBuAAAAAAAAAAAA
AAA4AAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABgAA
AHQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAD///////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAD+////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP///////////////wAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP7///8AAAAAAAAAAA==
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>212729</attachid>
            <date>2012-03-15 11:13:00 -0400</date>
            <delta_ts>2012-03-15 11:13:01 -0400</delta_ts>
            <desc>Test project being used to reproduce the problem</desc>
            <filename>TestCompiler.zip</filename>
            <type>application/octet-stream</type>
            <size>6931</size>
            <attacher name="Satyam Kandula">satyam.kandula</attacher>
            
              <data encoding="base64">UEsDBAoAAAAAAEleb0AAAAAAAAAAAAAAAAANAAAAVGVzdENvbXBpbGVyL1BLAwQUAAAACAA7TmpA
bfrPKrcAAAAtAQAAFwAAAFRlc3RDb21waWxlci8uY2xhc3NwYXRofY9LC8IwEITPCv6HkrtbvYiH
VhGpoKCCVq8Sk6VG46bkIfbf+0YR9DYzfMvOJP3zUUcntE4ZSlkbWixCEkYqKlK2ykfNLuv3GvVE
aO5cyf3uampvh+RtFR0UyZQ5K1h0Cx8y/k0KQy/S2AJQaFU6hL30oHkgsbt+h8ki2wzns3wwnmWL
+JtT5NES1yBxGwoI6nmJFpaek+RWrqd5VWI84Se+zJpt6PyrZIIvg3+12iq6w0n8ufsCUEsDBBQA
AAAIADtOakBg+szqvwAAAIQBAAAVAAAAVGVzdENvbXBpbGVyLy5wcm9qZWN0dVBLDsIgFFxr4h0a
9hbduaDtQuMFrAdAeGloyidAG48vUKrWxN2befNmBkjzlEMxgXVCqwodywMqQDHNheoqdG+v+xNq
6t2WGKt7YP4CjllhfFAHdkMUlVC34PxZSyMGsAQnKu6YlhKUrwlepshmI5cAXqHHKAZ+M8AiyjD4
Sqp4YnKctl0JbBDGQdlzXzJtw0Anmg6+K4QLarsxZruM8Zog+DclM0uNEOlHC1k9g/8N5n0skHTJ
7mPwfu76F19QSwMECgAAAAAAcllvQAAAAAAAAAAAAAAAABcAAABUZXN0Q29tcGlsZXIvLnNldHRp
bmdzL1BLAwQUAAAACAD4XG9AMMPcY6QEAADKGQAAMQAAAFRlc3RDb21waWxlci8uc2V0dGluZ3Mv
b3JnLmVjbGlwc2UuamR0LmNvcmUucHJlZnOtWEtz2zgMvu/M/hXP9NKbD7bjbL3T2pk625xpEpLY
UKTKhxPtr19AkmXH3UkFupeM7RAfCODDiyCNbgLMGg8FeLASwuwIPmhn5x/+/MP5cgbDke8qzqTz
gH/qRhvwM2GtiyLi2Zl11iZj5tcCF0e2zm7xCB/00CooRDJxAvqyvevP8tXocFKjdBAHA4qDgQAk
8+4VhzNcWCtMG3SYfC3pFJRgZ9oabeHv4JdtBPpxDpYFEIUvIT4YEQvn6/mH2cepksmmAOqzk8LM
kVoB/PGXZtMHowVScIomBYdUzsjAbaoP4OeoFryIv1QzCNLVvgmvu6DxZINLXsK9Zgg23qGe+iK0
+9SA39gIvhBo8YvwVttyMk5Al8aNAht1odF68N75ydIpuoN7RX1zXVo8MlWQfkCf2bLXTNFlXlyB
UCuiIlsOaSQ7z90gurF3wxfobzE1pf4H66kCu8NS6bXCy5xxv0CsnOIj6yCRV6IE9fVUirmWQt3E
do/8ghrDw4wt2FTnEgpeMXOljqZdGYeJv0CCdZ+67OLdoxDGxMq7VFYrEfjSUZhdQwESZk02sCOB
5hv1qYsqV7lGpQ/Cixowr5cuWcUNYQdh2iXWp+etiyuqiRARYIsVmP7DBnT+oBXG9cwqVmirTngl
oqy6S3H1aytNUlgt0alh0/XoBbehXWERxsYW7t67etEVwiwoqmVR47ctFYYKvMbsHSvykMZ8a/uI
wRrTaf+i0W1MEmmrNJaSSHms5ULiRBaYEG+aWxaT6876Jx2rlbMh+iSj81vkNdchtQ7hTXlcjB2Q
e6Ue6ZMIFZXuIT5ZGEPZhlvv8jPOvfNXDNoQHagc93omTmBXivZITozoMJfnhWDfWoll1ep/Qe3O
hM/yo3XrokCOYvahYNdsmJeyjhxDPWMfaaBAmh3zzMPpff2KLseiQqb1cJ/RNI/TCdMsLCzZzZeE
9w3IjQ2pKNAy9ApVqVycb9qZgTOceu3GkeRByGccJ4Z9KK+eNadmdhFpnk8bh5L4CQuZpulCmKVz
BoS9ATHSlCLM9k24bgC5wd0jjmn/we5Ew0/u4OPFy2PbQDYBPSgcOISNfY8dS9stMKsKsOUz7TgB
kFtxmOzH5V1Bxi18mSjk3I52xqS1SY9rExelcX7IhJWwS3g4R69vt7cCZqEE8tPF4Nh37G5iYs81
4WJq+AoSNJYDLgNCamhnD2/GaP6IdYJ56rUHbu8LrY0VjNas62RyenVE2l25luuQZMXRaUW3/4sW
fi2Jyw/9f9l2JezDmFWgCGTX0PtBRpqmG6sNppOTXS6CWtPe2E/3XJBKWIW2DzF+dM+QYYkFCrDw
7dqwF74LafJnTsFK9kfC4QH3PtUlXdbM3b943eFBgcXqESetF5xLJDQZlH0Xa/1Ka/74dWH7Ax0F
2Ex8R8+mX7bunMQllHhysUD+RjVvn1HYRabHxlkS6zCfeN0jpTgA+xnr8n2TNS/0grvDd5qeDS1q
2fwYi9pt0r87ziMwRXbcftC3iwMukkJOf15/B/fMGFwcpMefc1G9PuJa+gW6N+QsFtxS+45olC/D
aSzaAhZ0ESYzuX+J7p/L/wNQSwMEFAAAAAgAuKRvQG0awxaJAAAAwQAAABYAAABUZXN0Q29tcGls
ZXIvYnVpbGQuY21kZY07DsIwEER7TuEL2EtAgjPQUtGhtbMkm/intRPg9pCIVFTzRpoP9CkQjAXr
GwM8k4xAznMuVIAPx81sqvQcFPx3hnZszMns780ZBiGwHGHAGZXGnD07rJyiStKZ35DBWI1LssJ1
ipFEaTuxbx/sSa10Ma/gl0eUrihdSOYldXMp5K9YrK7ffQBQSwMEFAAAAAgAF15vQDis1JeMAwAA
0QkAABYAAABUZXN0Q29tcGlsZXIvYnVpbGQueG1stVVNbxs3EL0byH+YEj4Z3t06AYKgkGy4qdsm
SNOgddBjQHFHEm0uuSC5shXD/71Dclf7IctJDxV0WJIz783HG3J2cV8p2KB10ug5O8t/ZIBamFLq
1Zx9vv41e8Muzmc/ZBn8c/nXx3cff/sJroSStUPgjTfZCjVa7rGEpVSYvziC0e9Sb6EitKUU3BOF
gzupFCwQDJHeWek96j2vawNSC9WURAKNQwuuRhFAYNFIVQYqWKPFU3CyqtUWhEUKAoxG8gS/RnC8
wiluKS0Kb+yWovDraFZbI9A5SpccnbeNCGHC7AJTljnXPicOY/3F+RSPu4ixlNZ5KpsnYK5LwPtg
Ho/6cPmKS51Dlp3PiPOG4oAFd0ghzVnOoMQlb5Sfs+jBQFP4c/ZJIdmwljg41mj9lrg20hpdEeec
0YIVnQl1ameVMK7efnj36e+rL7//+ccVgw1XDW0Wa1Nhceu43/KquDP2tmgTdoV8+apbsILinZI/
A5vnRfrvwF69qV6/7OEOgJW4aFYKN6h2UM40VuCpkhrd6YZbd9DZc7tCv3M8y18fNE2gB0w5SUKW
XdFzobhzYZMN+h6tUGGoPCiTRE1Nk/qsRyqCUbdI0bX8Uks/gqtuSQAQRTDCiIfC1NtuELCq/Zbs
3JwtuaJSgje920SZs6A4R6zRwlkxNYhGeJ9GLIV2clKc5Dd8w0cxpHxauGFsRQhul3BK8smUBVVT
j3IuqX40q/tJH8ApsUZdug5qiMuV6r2n5nGSMtcs2nlzp2mnXXZAaeCmKIOzIcRhttjakVvHM8w9
FFhAlDsJ1zbIoNf+nB0/9KvHcOR8X6ZOCnQj2UZ7GZhaLSRdB//0Rb4pvrCVvh73REK6gKDUpJC9
ru/0DxaXT87FSKxFTO1bnXTCyjrNzM+hSEAdhK64cLeWItLR1a4F0g0qXXeaw2eHy0aR7sNWTfcp
iUisuV6hy8eVJ4RnGjaIIU5Y954JU9UkdAs3dNsEGh5mXC76Z4MNxjhr77Ssc2N7o9tO6PFDeEMI
yHK7zWlrvxWjeT1+GN6tj0WtmhW9Tbv+k9iMXeXdA3VT+lwYi1/C+NpJUwZTGjca/VXWUVffFRe1
2aPVIbSenAjftjlflrwmgz3i/zepmMR/UFrboU5J6fGfdn2soGebO3lUokfe47SPy1Pp5O9/uZ7U
bpwbdUSEkeimd3I5jZNt/V4c0YuTUjs/+hdQSwMEFAAAAAgAUFFvQJVrozc+AQAAvAwAABcAAABU
ZXN0Q29tcGlsZXIvYnVpbGRJLnhtbO2X3WrDIBTHr1PoO7hzb7N+wRimvdsTbA/gjC0Oo5LYscef
ibaEJaulLLvSEMjx/M7xJP8DGrL/qiT65HUjtCpguXgExBXTpVDHAt5eX/AT7Hfz2XxGTK0/OLNI
0YoXECxAJT/Qk7QFhAfo6IxYWh/5mT77HN2wWhjbrdYz2qgsI1RZ5O6DkC7o/SRkuXD1AfLJChBK
WMyZFKbhmOnKOLCG/BLMqJQXWGptloBaL3IjAf8GkNw7Wl0GvRDYeCcMVljFSkjAHwNZVMlVTMnx
/OuQ//cKEjEdEZd1fZ+sm2gJiZiOiMu6uU/WbbSERExH/JC122AHym6vKzu+SnfCurYVJGAioCdp
mHjAGMUvD/vhMzw73Q1XZYNGRy/ghvx4N9Zfvvb+q109pDPJqYL8Zr6bGj/VDz4VycOPh7O+AVBL
AwQKAAAAAAByWW9AAAAAAAAAAAAAAAAAEQAAAFRlc3RDb21waWxlci9zcmMvUEsDBAoAAAAAAHJZ
b0AAAAAAAAAAAAAAAAAVAAAAVGVzdENvbXBpbGVyL3NyYy9wa2cvUEsDBBQAAAAIAAheb0ARmAzn
3gEAAIcEAAAlAAAAVGVzdENvbXBpbGVyL3NyYy9wa2cvQ29tcG9zaXRlSWQuamF2YY1TTW/bMAw9
24D/A2+R48JNz62LdT0FGNABw3YpclBi2VXrL0h0um7of59k0h9BCnQ3i3zvkXykO3l4kaWC7qW8
jsIo1HXXGoRneZRpj7pK74yRb9+0xSF9uV5HIazhp0tpfINDJa2FojWg85WFWuYK2gLqvkLdVQp+
oNFNaT3nMgq7fl/pA5PuW1fKalTbHP5GYdAZfZQ4Uh53UHyXBq0rG/gsURckMQE7j4sHkYBIGcU8
9/2Eb1HiqQwUpq1JihXdKPTBkpMDNxS+JfEMGvUKZ0kR+6qBbhAObV3LbZOr39mkmWr/fijE6mJF
yNcn7YwSMxhuYcOlB5lKNSU+ZbBtUJXKpEdZ9copTJK231saYHOxKBrHrhj+8mhuKuABff+Llmb+
TE6ullLJVUJdsM5gQCrzXPgvDo56nyqfav2fS36NwbRxo6y7MN5yiu2wBeH3wRBKWP3Hjb4jBaOw
N82wtOUVkVS8OJUvD0dljM7VfDbsG7Z8KLween3ti0IZ2PcFncQyysb7H0T4XeoMNteg4YavOyUr
XChJxp07oVR2nWpyQaBHvWOciNm0BWay6EPiwj02wKPmQc5/EZ61VEgdD6dErbHCKO4zu3MBz3Js
D7pv+wbFR+xxcGK//wNQSwMEFAAAAAgAO05qQJO2rKViAAAAZgAAADAAAABUZXN0Q29tcGlsZXIv
c3JjL3BrZy9Db25maWd1cmF0aW9uQ29uc3RhbnRzLmphdmErSEzOTkxPVSjITrfm5eLlKihNyslM
VsjMK0ktSktMTlVwzs9Ly0wvLUosyczPA3KKSxLzSooVqkGKOZMzEouiYxVcfVx9Xf1C4oNdAxyD
HEP8gxRsFarVrdRrwUbW8nIBAFBLAwQUAAAACAA7TmpAY0WKQwMBAACSAgAAHgAAAFRlc3RDb21w
aWxlci9zcmMvcGtnL1Rlc3QuamF2YbWQP0/DMBDF50TKd7gxVRMKc6ASapkYIqQyVR3s+EhNXNvy
n6AK8d1xSCg0oiCGnmyddD6/39PTpGpIjaCbukjiJNaeCl5BJYi1sELr4DWJIxjG1hEXWqs4A23Q
2nvcLxTDhdpRLsObkmlJn7FywLjVguwz4NKtN9D0izbr1L4VVUogkWC8vGtRugePHic9dKgnZSAN
KsDhBi6L0K4PchcCZe22YTidTkbSw85Svcj04Obz45pvshG0OMUcwSCHq87FvHeT5yfAj/pf2Lcu
/kgb3hKHR0l/6f2QLfDstxCj2QxW5bKEW+9UXqNEE+QZ7NBtFQsYT7utcP/kfwR5ZgfhvANQSwME
FAAAAAgAXVtvQMY48YHkAwAAyAoAADEAAABUZXN0Q29tcGlsZXIvc3JjL3BrZy9WYWxpZGF0aW9u
Q29uZmlndXJhdGlvbi5qYXZh5VVhT+NGEP1sJP7DCJ3UcAIH+u1IOSmAe0IlOZQQvlTVaWOPkz3W
Xnd3nQhV/Pe+XTuBhHBqe/etEQqxve/NzJs34+77H/vZ36P3dKmrRyNnc0ed9JB+Pjk5PfLfH+j6
YoCHptJGOKlLEmVG2s3Z2DgA+0pRAFoybNksOIvpbi4tVUbPjCgCAgASaaqLSpSPspxRIRwbKZQN
JMIw7mQ4sxBSialiqsuMTcDhYGFJ5+EiSZWsLNNtPVUypRuZconLxWl8EpiWc5nO16EkW6CQSyat
M3Ja+xKOQka4+RxMuACeO1eddbvL5TLmJk6szayreCZUlyt1vDg9ieeuUP50K1vZ8Gpjz8Kdbb2O
SZbSoVLq3143kYtKccGlCwc86Md+uvt7lUgfxIypepj19vf29xBSG0dfUXEMDVQ8EFVvx+0xu3C+
27oi9DFVwvrmVr6/pbOhDzVa/ZPvMedsuEyZtPEd/8qpI8vOocmtQ7aZvDV0VSs4IKPc6CIQFrVy
EsJQBWuhW4jk+XDl0MV1zx64ciTQOwSxttVvdfDRtx8Ung/J6togL4DwsAy5eGka44gpDCGQa5PT
vVAyC/1AR3M5q9vu0V/7exH+giARIkE4b0UB1y8aDDpPaQtCQQD58CspoIosrcN5PJspPcWvRz8g
7PE1B1+bmhv2gkXp9RUukNwPrnz6XHqTZo0G4hmXY3z4DQwMH0BxIEbdETJyyAhpoIZf7lfJD9iJ
K+HEEV1orcD1kaJClLVQ6yO29+/g01qqbBO9QWC981PKZYmpGGN+sA8m8NPts5nO6WAyTkZfbkfJ
r8koGV4mBz3qdt8NPw+Phzfj49N3/4jxwmeyg/Zicn1z9b3kg6DSDvZBfzjp33wP/RX7nePYbrJf
JTfJp/5dMv42t/drlz6NfsPywcopMDRceVr4A4Y5gFsRFJN8AG8G0+g8p3QufJiVkTBLCOznHCnq
gpdzf6lrZ2XWTFiO5c5LbR42ylkJtNk9iqLzrR733oS90o/Odwr+NsN2f6mNvuWHnQS7RPb4HT3p
bS0HP9UPUE42O9IJM2NHEpMbVG1vy2z1MquUgOJzrfyrbr1OXm6HZ0gToQUaFuolYDXkvp5mv7Wu
amtCGkmzRJLm1WP7tnnUwcp/Pc0fidtzh2EDRjKnzuoWnZ9TWSt1aNjVpgy/w1sjihrOizqHQDRt
/uEwL+nlk86hFy7KsRs7r0LTosjobDt+1JDFosIqzzo4E6OmNXhSyj9rHsKPncOGfAuwsdUvV/6P
0epBMrz7Mk5u+6P+3edRA37yX211LY/TrV7hxNN/kvpVrb//sV3n/0jAp78BUEsDBBQAAAAIADtO
akBlV1S9gwAAAJ4AAAArAAAAVGVzdENvbXBpbGVyL3NyYy9wa2cvVmFsaWRhdG9yTWV0YURhdGEu
amF2YT3OMQ7CMAyF4TmVegePMKAegAmpK3QBFtTBTaw0apqExJ4q7k4zwPKmT3p/Qr2gJUiLPbdN
2ySZvNOgPZYCT/TOIMd8JcYeGWGrRv3QjPk1giX+w0dwb6EbrnQ4VqxU18F96Ae4CMeTpUAZmQys
xHM0UFimqjKx5ABBvN8z1Kfe7PMFUEsBAhQACgAAAAAASV5vQAAAAAAAAAAAAAAAAA0AAAAAAAAA
AAAQAAAAAAAAAFRlc3RDb21waWxlci9QSwECFAAUAAAACAA7TmpAbfrPKrcAAAAtAQAAFwAAAAAA
AAABACAAAAArAAAAVGVzdENvbXBpbGVyLy5jbGFzc3BhdGhQSwECFAAUAAAACAA7TmpAYPrM6r8A
AACEAQAAFQAAAAAAAAABACAAAAAXAQAAVGVzdENvbXBpbGVyLy5wcm9qZWN0UEsBAhQACgAAAAAA
cllvQAAAAAAAAAAAAAAAABcAAAAAAAAAAAAQAAAACQIAAFRlc3RDb21waWxlci8uc2V0dGluZ3Mv
UEsBAhQAFAAAAAgA+FxvQDDD3GOkBAAAyhkAADEAAAAAAAAAAQAgAAAAPgIAAFRlc3RDb21waWxl
ci8uc2V0dGluZ3Mvb3JnLmVjbGlwc2UuamR0LmNvcmUucHJlZnNQSwECFAAUAAAACAC4pG9AbRrD
FokAAADBAAAAFgAAAAAAAAABACAAAAAxBwAAVGVzdENvbXBpbGVyL2J1aWxkLmNtZFBLAQIUABQA
AAAIABdeb0A4rNSXjAMAANEJAAAWAAAAAAAAAAEAIAAAAO4HAABUZXN0Q29tcGlsZXIvYnVpbGQu
eG1sUEsBAhQAFAAAAAgAUFFvQJVrozc+AQAAvAwAABcAAAAAAAAAAQAgAAAArgsAAFRlc3RDb21w
aWxlci9idWlsZEkueG1sUEsBAhQACgAAAAAAcllvQAAAAAAAAAAAAAAAABEAAAAAAAAAAAAQAAAA
IQ0AAFRlc3RDb21waWxlci9zcmMvUEsBAhQACgAAAAAAcllvQAAAAAAAAAAAAAAAABUAAAAAAAAA
AAAQAAAAUA0AAFRlc3RDb21waWxlci9zcmMvcGtnL1BLAQIUABQAAAAIAAheb0ARmAzn3gEAAIcE
AAAlAAAAAAAAAAEAIAAAAIMNAABUZXN0Q29tcGlsZXIvc3JjL3BrZy9Db21wb3NpdGVJZC5qYXZh
UEsBAhQAFAAAAAgAO05qQJO2rKViAAAAZgAAADAAAAAAAAAAAQAgAAAApA8AAFRlc3RDb21waWxl
ci9zcmMvcGtnL0NvbmZpZ3VyYXRpb25Db25zdGFudHMuamF2YVBLAQIUABQAAAAIADtOakBjRYpD
AwEAAJICAAAeAAAAAAAAAAEAIAAAAFQQAABUZXN0Q29tcGlsZXIvc3JjL3BrZy9UZXN0LmphdmFQ
SwECFAAUAAAACABdW29AxjjxgeQDAADICgAAMQAAAAAAAAABACAAAACTEQAAVGVzdENvbXBpbGVy
L3NyYy9wa2cvVmFsaWRhdGlvbkNvbmZpZ3VyYXRpb24uamF2YVBLAQIUABQAAAAIADtOakBlV1S9
gwAAAJ4AAAArAAAAAAAAAAEAIAAAAMYVAABUZXN0Q29tcGlsZXIvc3JjL3BrZy9WYWxpZGF0b3JN
ZXRhRGF0YS5qYXZhUEsFBgAAAAAPAA8AawQAAJIWAAAAAA==
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>212822</attachid>
            <date>2012-03-17 04:07:00 -0400</date>
            <delta_ts>2012-03-17 04:07:51 -0400</delta_ts>
            <desc>Patch for force hashCode methods to return 0</desc>
            <filename>patch2.txt</filename>
            <type>text/plain</type>
            <size>40420</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb21waWxlci50b29sL3NyYy9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvdG9vbC9FY2xpcHNlRmlsZU9iamVjdC5qYXZhIGIvb3Jn
LmVjbGlwc2UuamR0LmNvbXBpbGVyLnRvb2wvc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci90b29sL0VjbGlwc2VGaWxlT2JqZWN0LmphdmEKaW5kZXggZDNmMzI2ZS4uN2I4NDU4
NiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLnRvb2wvc3JjL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci90b29sL0VjbGlwc2VGaWxlT2JqZWN0LmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLnRvb2wvc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci90b29sL0VjbGlwc2VGaWxlT2JqZWN0LmphdmEKQEAgLTE1Niw2ICsxNTYs
OSBAQAogICAgIAogCUBPdmVycmlkZQogCXB1YmxpYyBpbnQgaGFzaENvZGUoKSB7CisJCWlmICh0
cnVlKSB7CisJCQlyZXR1cm4gMDsKKwkJfQogCQlyZXR1cm4gdGhpcy5mLmhhc2hDb2RlKCk7CiAJ
fQogCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9iYXRjaC9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvYmF0Y2gvQ2xhc3NwYXRoTG9jYXRpb24uamF2YSBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2JhdGNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9i
YXRjaC9DbGFzc3BhdGhMb2NhdGlvbi5qYXZhCmluZGV4IGYwYzVjMDcuLjY3Y2JiODMgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2JhdGNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9iYXRjaC9DbGFzc3BhdGhMb2NhdGlvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2JhdGNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9iYXRjaC9D
bGFzc3BhdGhMb2NhdGlvbi5qYXZhCkBAIC03Miw2ICs3Miw5IEBACiAJCXJldHVybiBTT1VSQ0Ug
fCBCSU5BUlk7CiAJfQogCXB1YmxpYyBpbnQgaGFzaENvZGUoKSB7CisJCWlmICh0cnVlKSB7CisJ
CQlyZXR1cm4gMDsKKwkJfQogCQlmaW5hbCBpbnQgcHJpbWUgPSAzMTsKIAkJaW50IHJlc3VsdCA9
IDE7CiAJCXJlc3VsdCA9IHByaW1lICogcmVzdWx0ICsgdGhpcy5nZXRNb2RlKCk7CmRpZmYgLS1n
aXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvY29yZS9j
b21waWxlci9DaGFyT3BlcmF0aW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvY29yZS9jb21waWxlci9DaGFyT3BlcmF0aW9uLmphdmEKaW5kZXgg
NmE4YjRkYS4uNDc3NDcwYyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2NvcmUvY29tcGlsZXIvQ2hhck9wZXJhdGlvbi5qYXZhCisrKyBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9jb3JlL2NvbXBp
bGVyL0NoYXJPcGVyYXRpb24uamF2YQpAQCAtMTk1Niw2ICsxOTU2LDkgQEAKICAqIEB0aHJvd3Mg
TnVsbFBvaW50ZXJFeGNlcHRpb24gaWYgYXJyYXkgaXMgbnVsbAogICovCiBwdWJsaWMgc3RhdGlj
IGZpbmFsIGludCBoYXNoQ29kZShjaGFyW10gYXJyYXkpIHsKKwlpZiAodHJ1ZSkgeworCQlyZXR1
cm4gMDsKKwl9CiAJaW50IGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsKIAlpbnQgaGFzaCA9IGxlbmd0
aCA9PSAwID8gMzEgOiBhcnJheVswXTsKIAlpZiAobGVuZ3RoIDwgOCkgewpkaWZmIC0tZ2l0IGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2NsYXNzZm10L0Fubm90YXRpb25JbmZvLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvY2xhc3NmbXQvQW5u
b3RhdGlvbkluZm8uamF2YQppbmRleCBkODFlYzFjLi43YzQxZWY2IDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvY2xhc3NmbXQvQW5ub3RhdGlvbkluZm8uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvY2xhc3NmbXQvQW5u
b3RhdGlvbkluZm8uamF2YQpAQCAtMzkzLDYgKzM5Myw5IEBACiAJcmV0dXJuIGJ1ZmZlci50b1N0
cmluZygpOwogfQogcHVibGljIGludCBoYXNoQ29kZSgpIHsKKwlpZiAodHJ1ZSkgeworCQlyZXR1
cm4gMDsKKwl9CiAJZmluYWwgaW50IHByaW1lID0gMzE7CiAJaW50IHJlc3VsdCA9IDE7CiAJcmVz
dWx0ID0gcHJpbWUgKiByZXN1bHQgKyBVdGlsLmhhc2hDb2RlKHRoaXMucGFpcnMpOwpkaWZmIC0t
Z2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2NsYXNzZm10L0VsZW1lbnRWYWx1ZVBhaXJJbmZvLmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
Y2xhc3NmbXQvRWxlbWVudFZhbHVlUGFpckluZm8uamF2YQppbmRleCA1YTQwYzBkLi5mYWIwMTky
IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvY2xhc3NmbXQvRWxlbWVudFZhbHVlUGFpckluZm8uamF2YQor
KysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvY2xhc3NmbXQvRWxlbWVudFZhbHVlUGFpckluZm8uamF2YQpAQCAtNTEsNiAr
NTEsOSBAQAogCXJldHVybiBidWZmZXIudG9TdHJpbmcoKTsKIH0KIHB1YmxpYyBpbnQgaGFzaENv
ZGUoKSB7CisJaWYgKHRydWUpIHsKKwkJcmV0dXJuIDA7CisJfQogCWZpbmFsIGludCBwcmltZSA9
IDMxOwogCWludCByZXN1bHQgPSAxOwogCXJlc3VsdCA9IHByaW1lICogcmVzdWx0ICsgQ2hhck9w
ZXJhdGlvbi5oYXNoQ29kZSh0aGlzLm5hbWUpOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2NsYXNzZm10
L0ZpZWxkSW5mby5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2NsYXNzZm10L0ZpZWxkSW5mby5qYXZhCmluZGV4IDhl
YWVhMDkuLjRkNTE1ZTQgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9jbGFzc2ZtdC9GaWVsZEluZm8uamF2
YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvY2xhc3NmbXQvRmllbGRJbmZvLmphdmEKQEAgLTg1LDYgKzg1LDkgQEAK
IAlyZXR1cm4gQ2hhck9wZXJhdGlvbi5lcXVhbHMoZ2V0TmFtZSgpLCAoKEZpZWxkSW5mbykgbyku
Z2V0TmFtZSgpKTsKIH0KIHB1YmxpYyBpbnQgaGFzaENvZGUoKSB7CisJaWYgKHRydWUpIHsKKwkJ
cmV0dXJuIDA7CisJfQogCXJldHVybiBDaGFyT3BlcmF0aW9uLmhhc2hDb2RlKGdldE5hbWUoKSk7
CiB9CiAvKioKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9jbGFzc2ZtdC9NZXRob2RJbmZvLmphdmEgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvY2xhc3NmbXQvTWV0aG9kSW5mby5qYXZhCmluZGV4IDg4ZDYwYWMuLmE3MjFlMjMgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9jbGFzc2ZtdC9NZXRob2RJbmZvLmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Ns
YXNzZm10L01ldGhvZEluZm8uamF2YQpAQCAtMTkzLDYgKzE5Myw5IEBACiAJCQkmJiBDaGFyT3Bl
cmF0aW9uLmVxdWFscyhnZXRNZXRob2REZXNjcmlwdG9yKCksIG90aGVyTWV0aG9kLmdldE1ldGhv
ZERlc2NyaXB0b3IoKSk7CiB9CiBwdWJsaWMgaW50IGhhc2hDb2RlKCkgeworCWlmICh0cnVlKSB7
CisJCXJldHVybiAwOworCX0KIAlyZXR1cm4gQ2hhck9wZXJhdGlvbi5oYXNoQ29kZShnZXRTZWxl
Y3RvcigpKSArIENoYXJPcGVyYXRpb24uaGFzaENvZGUoZ2V0TWV0aG9kRGVzY3JpcHRvcigpKTsK
IH0KIC8qKgpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2NvZGVnZW4vT2JqZWN0Q2FjaGUuamF2YSBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9jb2RlZ2VuL09iamVjdENhY2hlLmphdmEKaW5kZXggMGMxOGY2Ny4uZmJiYmJhNCAxMDA2
NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2NvZGVnZW4vT2JqZWN0Q2FjaGUuamF2YQorKysgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvY29k
ZWdlbi9PYmplY3RDYWNoZS5qYXZhCkBAIC04NCw2ICs4NCw5IEBACiAgKiBAcmV0dXJuIGludAog
ICovCiBwdWJsaWMgaW50IGhhc2hDb2RlKE9iamVjdCBrZXkpIHsKKwlpZiAodHJ1ZSkgeworCQly
ZXR1cm4gMDsKKwl9CiAJcmV0dXJuIChrZXkuaGFzaENvZGUoKSAmIDB4N0ZGRkZGRkYpICUgdGhp
cy5rZXlUYWJsZS5sZW5ndGg7CiB9CiAvKioKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9jb2RlZ2VuL1N0
YWNrTWFwRnJhbWVDb2RlU3RyZWFtLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvY29kZWdlbi9TdGFja01hcEZyYW1l
Q29kZVN0cmVhbS5qYXZhCmluZGV4IGU2MWNkZTMuLmUxZTAwODMgMTAwNjQ0Ci0tLSBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9jb2RlZ2VuL1N0YWNrTWFwRnJhbWVDb2RlU3RyZWFtLmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2NvZGVn
ZW4vU3RhY2tNYXBGcmFtZUNvZGVTdHJlYW0uamF2YQpAQCAtNTMsNiArNTMsOSBAQAogCQkJcmV0
dXJuIGZhbHNlOwogCQl9CiAJCXB1YmxpYyBpbnQgaGFzaENvZGUoKSB7CisJCQlpZiAodHJ1ZSkg
eworCQkJCXJldHVybiAwOworCQkJfQogCQkJcmV0dXJuIHRoaXMucGMgKyB0aGlzLmNvbnN0YW50
UG9vbE5hbWUuaGFzaENvZGUoKTsKIAkJfQogCQlwdWJsaWMgU3RyaW5nIHRvU3RyaW5nKCkgewpk
aWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2NvZGVnZW4vVmVyaWZpY2F0aW9uVHlwZUluZm8uamF2YSBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9jb2RlZ2VuL1ZlcmlmaWNhdGlvblR5cGVJbmZvLmphdmEKaW5kZXggMTQ5ZmY2MS4uYWMy
NmM3MiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2NvZGVnZW4vVmVyaWZpY2F0aW9uVHlwZUluZm8uamF2
YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvY29kZWdlbi9WZXJpZmljYXRpb25UeXBlSW5mby5qYXZhCkBAIC0xODgs
NiArMTg4LDkgQEAKIAlyZXR1cm4gZmFsc2U7CiB9CiBwdWJsaWMgaW50IGhhc2hDb2RlKCkgewor
CWlmICh0cnVlKSB7CisJCXJldHVybiAwOworCX0KIAlyZXR1cm4gdGhpcy50YWcgKyB0aGlzLmlk
ICsgdGhpcy5jb25zdGFudFBvb2xOYW1lLmxlbmd0aCArIHRoaXMub2Zmc2V0OwogfQogcHVibGlj
IGNoYXJbXSBjb25zdGFudFBvb2xOYW1lKCkgewpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Vudi9BY2Nl
c3NSdWxlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvZW52L0FjY2Vzc1J1bGUuamF2YQppbmRleCA2MjdlZTE1Li40
Y2NlMmI1IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvZW52L0FjY2Vzc1J1bGUuamF2YQorKysgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvZW52L0FjY2Vzc1J1bGUuamF2YQpAQCAtMzAsNiArMzAsOSBAQAogCX0KIAogCXB1YmxpYyBp
bnQgaGFzaENvZGUoKSB7CisJCWlmICh0cnVlKSB7CisJCQlyZXR1cm4gMDsKKwkJfQogCQlyZXR1
cm4gdGhpcy5wcm9ibGVtSWQgKiAxNyArIENoYXJPcGVyYXRpb24uaGFzaENvZGUodGhpcy5wYXR0
ZXJuKTsKIAl9CiAKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9lbnYvQWNjZXNzUnVsZVNldC5qYXZhIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2Vudi9BY2Nlc3NSdWxlU2V0LmphdmEKaW5kZXggZjljMjliZi4uMjAyMmViZCAxMDA2
NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2Vudi9BY2Nlc3NSdWxlU2V0LmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Vudi9B
Y2Nlc3NSdWxlU2V0LmphdmEKQEAgLTg3LDYgKzg3LDkgQEAKIH0KIAogcHVibGljIGludCBoYXNo
Q29kZSgpIHsKKwlpZiAodHJ1ZSkgeworCQlyZXR1cm4gMDsKKwl9CiAJZmluYWwgaW50IHByaW1l
ID0gMzE7CiAJaW50IHJlc3VsdCA9IDE7CiAJcmVzdWx0ID0gcHJpbWUgKiByZXN1bHQgKyBoYXNo
Q29kZSh0aGlzLmFjY2Vzc1J1bGVzKTsKQEAgLTk2LDYgKzk5LDkgQEAKIH0KIAogcHJpdmF0ZSBp
bnQgaGFzaENvZGUoQWNjZXNzUnVsZVtdIHJ1bGVzKSB7CisJaWYgKHRydWUpIHsKKwkJcmV0dXJu
IDA7CisJfQogCWZpbmFsIGludCBwcmltZSA9IDMxOwogCWlmIChydWxlcyA9PSBudWxsKQogCQly
ZXR1cm4gMDsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9lbnYvQ2xhc3NTaWduYXR1cmUuamF2YSBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9lbnYvQ2xhc3NTaWduYXR1cmUuamF2YQppbmRleCBmM2U0Njg1Li5iNTI0OGUxIDEwMDY0
NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvZW52L0NsYXNzU2lnbmF0dXJlLmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Vudi9D
bGFzc1NpZ25hdHVyZS5qYXZhCkBAIC00Miw2ICs0Miw5IEBACiB9CiAKIHB1YmxpYyBpbnQgaGFz
aENvZGUoKSB7CisJaWYgKHRydWUpIHsKKwkJcmV0dXJuIDA7CisJfQogCWZpbmFsIGludCBwcmlt
ZSA9IDMxOwogCWludCByZXN1bHQgPSAxOwogCXJlc3VsdCA9IHByaW1lICogcmVzdWx0ICsgQ2hh
ck9wZXJhdGlvbi5oYXNoQ29kZSh0aGlzLmNsYXNzTmFtZSk7CmRpZmYgLS1naXQgYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
ZW52L0VudW1Db25zdGFudFNpZ25hdHVyZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Vudi9FbnVtQ29uc3RhbnRT
aWduYXR1cmUuamF2YQppbmRleCA0MzdkZjk0Li45NDk4MjFkIDEwMDY0NAotLS0gYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
ZW52L0VudW1Db25zdGFudFNpZ25hdHVyZS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9lbnYvRW51bUNvbnN0
YW50U2lnbmF0dXJlLmphdmEKQEAgLTUxLDYgKzUxLDkgQEAKIH0KIAogcHVibGljIGludCBoYXNo
Q29kZSgpIHsKKwlpZiAodHJ1ZSkgeworCQlyZXR1cm4gMDsKKwl9CiAJZmluYWwgaW50IHByaW1l
ID0gMzE7CiAJaW50IHJlc3VsdCA9IDE7CiAJcmVzdWx0ID0gcHJpbWUgKiByZXN1bHQgKyBDaGFy
T3BlcmF0aW9uLmhhc2hDb2RlKHRoaXMuY29uc3ROYW1lKTsKZGlmZiAtLWdpdCBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9p
bXBsL0Jvb2xlYW5Db25zdGFudC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2ltcGwvQm9vbGVhbkNvbnN0YW50Lmph
dmEKaW5kZXggYWI4ZDYzMi4uZTdkMGMxMyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2ltcGwvQm9vbGVh
bkNvbnN0YW50LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2ltcGwvQm9vbGVhbkNvbnN0YW50LmphdmEKQEAg
LTQzLDYgKzQzLDkgQEAKIAl9CiAKIAlwdWJsaWMgaW50IGhhc2hDb2RlKCkgeworCQlpZiAodHJ1
ZSkgeworCQkJcmV0dXJuIDA7CisJCX0KIAkJcmV0dXJuIHRoaXMudmFsdWUgPyAxMjMxIDogMTIz
NzsKIAl9CiAKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9pbXBsL0J5dGVDb25zdGFudC5qYXZhIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2ltcGwvQnl0ZUNvbnN0YW50LmphdmEKaW5kZXggZjU2Mzk2Mi4uNjdlNDQ1MCAxMDA2NDQK
LS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2ltcGwvQnl0ZUNvbnN0YW50LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2ltcGwvQnl0
ZUNvbnN0YW50LmphdmEKQEAgLTY0LDYgKzY0LDkgQEAKIAl9CiAKIAlwdWJsaWMgaW50IGhhc2hD
b2RlKCkgeworCQlpZiAodHJ1ZSkgeworCQkJcmV0dXJuIDA7CisJCX0KIAkJcmV0dXJuIHRoaXMu
dmFsdWU7CiAJfQogCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvaW1wbC9DaGFyQ29uc3RhbnQuamF2YSBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9pbXBsL0NoYXJDb25zdGFudC5qYXZhCmluZGV4IDZmNzQwZDYuLjg3NjIwMGUgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9pbXBsL0NoYXJDb25zdGFudC5qYXZhCisrKyBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9pbXBs
L0NoYXJDb25zdGFudC5qYXZhCkBAIC02NCw2ICs2NCw5IEBACiAJfQogCiAJcHVibGljIGludCBo
YXNoQ29kZSgpIHsKKwkJaWYgKHRydWUpIHsKKwkJCXJldHVybiAwOworCQl9CiAJCXJldHVybiB0
aGlzLnZhbHVlOwogCX0KIApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2ltcGwvRG91YmxlQ29uc3RhbnQu
amF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9pbXBsL0RvdWJsZUNvbnN0YW50LmphdmEKaW5kZXggZWY4NDFjYi4uNTZm
Y2FiMyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2ltcGwvRG91YmxlQ29uc3RhbnQuamF2YQorKysgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvaW1wbC9Eb3VibGVDb25zdGFudC5qYXZhCkBAIC02NSw2ICs2NSw5IEBACiAJfQogCiAJ
cHVibGljIGludCBoYXNoQ29kZSgpIHsKKwkJaWYgKHRydWUpIHsKKwkJCXJldHVybiAwOworCQl9
CiAJCWxvbmcgdGVtcCA9IERvdWJsZS5kb3VibGVUb0xvbmdCaXRzKHRoaXMudmFsdWUpOwogCQly
ZXR1cm4gKGludCkgKHRlbXAgXiAodGVtcCA+Pj4gMzIpKTsKIAl9CmRpZmYgLS1naXQgYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvaW1wbC9GbG9hdENvbnN0YW50LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvaW1wbC9GbG9hdENvbnN0YW50Lmph
dmEKaW5kZXggNDFjZWQyZC4uZGRiZWYyYSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2ltcGwvRmxvYXRD
b25zdGFudC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9pbXBsL0Zsb2F0Q29uc3RhbnQuamF2YQpAQCAtNjMs
NiArNjMsOSBAQAogCX0KIAogCXB1YmxpYyBpbnQgaGFzaENvZGUoKSB7CisJCWlmICh0cnVlKSB7
CisJCQlyZXR1cm4gMDsKKwkJfQogCQlyZXR1cm4gRmxvYXQuZmxvYXRUb0ludEJpdHModGhpcy52
YWx1ZSk7CiAJfQogCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvaW1wbC9JbnRDb25zdGFudC5qYXZhIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2ltcGwvSW50Q29uc3RhbnQuamF2YQppbmRleCAwMWZiMDRhLi41ZTU1YmVlIDEwMDY0
NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvaW1wbC9JbnRDb25zdGFudC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9pbXBsL0lu
dENvbnN0YW50LmphdmEKQEAgLTk5LDYgKzk5LDkgQEAKIAl9CiAKIAlwdWJsaWMgaW50IGhhc2hD
b2RlKCkgeworCQlpZiAodHJ1ZSkgeworCQkJcmV0dXJuIDA7CisJCX0KIAkJcmV0dXJuIHRoaXMu
dmFsdWU7CiAJfQogCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvaW1wbC9Mb25nQ29uc3RhbnQuamF2YSBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9pbXBsL0xvbmdDb25zdGFudC5qYXZhCmluZGV4IDk5ZjlmOGUuLmMxYWFlYWYgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9pbXBsL0xvbmdDb25zdGFudC5qYXZhCisrKyBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9pbXBs
L0xvbmdDb25zdGFudC5qYXZhCkBAIC03Myw2ICs3Myw5IEBACiB9CiAKIHB1YmxpYyBpbnQgaGFz
aENvZGUoKSB7CisJaWYgKHRydWUpIHsKKwkJcmV0dXJuIDA7CisJfQogCXJldHVybiAoaW50KSAo
dGhpcy52YWx1ZSBeICh0aGlzLnZhbHVlID4+PiAzMikpOwogfQogCmRpZmYgLS1naXQgYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvaW1wbC9TaG9ydENvbnN0YW50LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvaW1wbC9TaG9ydENvbnN0YW50Lmph
dmEKaW5kZXggNmYxMDdhZS4uZDNlZTA3YSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2ltcGwvU2hvcnRD
b25zdGFudC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9pbXBsL1Nob3J0Q29uc3RhbnQuamF2YQpAQCAtNjUs
NiArNjUsOSBAQAogCX0KIAogCXB1YmxpYyBpbnQgaGFzaENvZGUoKSB7CisJCWlmICh0cnVlKSB7
CisJCQlyZXR1cm4gMDsKKwkJfQogCQlyZXR1cm4gdGhpcy52YWx1ZTsKIAl9CiAKZGlmZiAtLWdp
dCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9pbXBsL1N0cmluZ0NvbnN0YW50LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvaW1wbC9TdHJpbmdD
b25zdGFudC5qYXZhCmluZGV4IDM3ZDQ5M2YuLjBmNGU3MzAgMTAwNjQ0Ci0tLSBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9p
bXBsL1N0cmluZ0NvbnN0YW50LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2ltcGwvU3RyaW5nQ29uc3RhbnQu
amF2YQpAQCAtNDEsNiArNDEsOSBAQAogCX0KIAogCXB1YmxpYyBpbnQgaGFzaENvZGUoKSB7CisJ
CWlmICh0cnVlKSB7CisJCQlyZXR1cm4gMDsKKwkJfQogCQlmaW5hbCBpbnQgcHJpbWUgPSAzMTsK
IAkJaW50IHJlc3VsdCA9IDE7CiAJCXJlc3VsdCA9IHByaW1lICogcmVzdWx0ICsgKCh0aGlzLnZh
bHVlID09IG51bGwpID8gMCA6IHRoaXMudmFsdWUuaGFzaENvZGUoKSk7CmRpZmYgLS1naXQgYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvbG9va3VwL0FycmF5QmluZGluZy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9BcnJheUJpbmRp
bmcuamF2YQppbmRleCA2YmJiYzk0Li4yN2VhMTcyIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3Vw
L0FycmF5QmluZGluZy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQXJyYXlCaW5kaW5nLmphdmEK
QEAgLTE1OSw2ICsxNTksOSBAQAogfQogCiBwdWJsaWMgaW50IGhhc2hDb2RlKCkgeworCWlmICh0
cnVlKSB7CisJCXJldHVybiAwOworCX0KIAlyZXR1cm4gdGhpcy5sZWFmQ29tcG9uZW50VHlwZSA9
PSBudWxsID8gc3VwZXIuaGFzaENvZGUoKSA6IHRoaXMubGVhZkNvbXBvbmVudFR5cGUuaGFzaENv
ZGUoKTsKIH0KIApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9SZWZlcmVuY2VCaW5kaW5nLmph
dmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvbG9va3VwL1JlZmVyZW5jZUJpbmRpbmcuamF2YQppbmRleCAxMjU0MjYwLi43
ODgwOWI4IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1JlZmVyZW5jZUJpbmRpbmcuamF2YQor
KysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvbG9va3VwL1JlZmVyZW5jZUJpbmRpbmcuamF2YQpAQCAtOTAzLDYgKzkwMyw5
IEBACiB9CiAKIHB1YmxpYyBpbnQgaGFzaENvZGUoKSB7CisJaWYgKHRydWUpIHsKKwkJcmV0dXJu
IDA7CisJfQogCS8vIGVuc3VyZSBSZWZlcmVuY2VCaW5kaW5ncyBoYXNoIHRvIHRoZSBzYW1lIHBv
c2lpdG9uIGFzIFVucmVzb2x2ZWRSZWZlcmVuY2VCaW5kaW5ncyBzbyB0aGV5IGNhbiBiZSByZXBs
YWNlZCB3aXRob3V0IHJlaGFzaGluZwogCS8vIEFMTCBSZWZlcmVuY2VCaW5kaW5ncyBhcmUgdW5p
cXVlIHdoZW4gY3JlYXRlZCBzbyBlcXVhbHMoKSBpcyB0aGUgc2FtZSBhcyA9PQogCXJldHVybiAo
dGhpcy5jb21wb3VuZE5hbWUgPT0gbnVsbCB8fCB0aGlzLmNvbXBvdW5kTmFtZS5sZW5ndGggPT0g
MCkKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvV2lsZGNhcmRCaW5kaW5nLmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvbG9va3VwL1dpbGRjYXJkQmluZGluZy5qYXZhCmluZGV4IDkzZGZmZTEuLjA2ZDhhNTIgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9sb29rdXAvV2lsZGNhcmRCaW5kaW5nLmphdmEKKysrIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2xvb2t1cC9XaWxkY2FyZEJpbmRpbmcuamF2YQpAQCAtNDIyLDYgKzQyMiw5IEBACiAgICAgfQog
CiAJcHVibGljIGludCBoYXNoQ29kZSgpIHsKKwkJaWYgKHRydWUpIHsKKwkJCXJldHVybiAwOwor
CQl9CiAJCXJldHVybiB0aGlzLmdlbmVyaWNUeXBlLmhhc2hDb2RlKCk7CiAJfQogCmRpZmYgLS1n
aXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvdXRpbC9VdGlsLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvdXRpbC9VdGlsLmphdmEKaW5kZXgg
NzYyNTc2NS4uMjkxNmY5MCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3V0aWwvVXRpbC5qYXZhCisrKyBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci91dGlsL1V0aWwuamF2YQpAQCAtNjk4LDYgKzY5OCw5IEBACiAJCX0KIAl9CiAJcHVi
bGljIHN0YXRpYyBpbnQgaGFzaENvZGUoT2JqZWN0W10gYXJyYXkpIHsKKwkJaWYgKHRydWUpIHsK
KwkJCXJldHVybiAwOworCQl9CiAJCWludCBwcmltZSA9IDMxOwogCQlpZiAoYXJyYXkgPT0gbnVs
bCkgewogCQkJcmV0dXJuIDA7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20v
b3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FTVE5vZGUuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vQVNUTm9kZS5qYXZhCmluZGV4IGVhZDhl
MDguLmJhOGE3ODQgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNs
aXBzZS9qZHQvY29yZS9kb20vQVNUTm9kZS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vQVNUTm9kZS5qYXZhCkBAIC0yMzYzLDYgKzIz
NjMsOSBAQAogCSAqIEBzZWUgamF2YS5sYW5nLk9iamVjdCNoYXNoQ29kZSgpCiAJICovCiAJcHVi
bGljIGZpbmFsIGludCBoYXNoQ29kZSgpIHsKKwkJaWYgKHRydWUpIHsKKwkJCXJldHVybiAwOwor
CQl9CiAJCXJldHVybiBzdXBlci5oYXNoQ29kZSgpOwogCX0KIApkaWZmIC0tZ2l0IGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL2RvbS9yZXdy
aXRlL1Jld3JpdGVFdmVudFN0b3JlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvZG9tL3Jld3JpdGUvUmV3cml0ZUV2ZW50U3RvcmUu
amF2YQppbmRleCA2NTgwNWJhLi4yYmQxOTExIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvZG9tL3Jld3JpdGUvUmV3cml0
ZUV2ZW50U3RvcmUuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvcmUvZG9tL3Jld3JpdGUvUmV3cml0ZUV2ZW50U3RvcmUuamF2YQpA
QCAtNTMsNiArNTMsOSBAQAogCQl9CiAKIAkJcHVibGljIGludCBoYXNoQ29kZSgpIHsKKwkJCWlm
ICh0cnVlKSB7CisJCQkJcmV0dXJuIDA7CisJCQl9CiAJCQlyZXR1cm4gZ2V0UGFyZW50KCkuaGFz
aENvZGUoKSArIGdldFByb3BlcnR5KCkuaGFzaENvZGUoKTsKIAkJfQogCmRpZmYgLS1naXQgYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvY29yZS9Tb3VyY2VSYW5n
ZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2NvcmUv
U291cmNlUmFuZ2UuamF2YQppbmRleCAwOTQ5MTZkLi5hODVhMDE0IDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvY29yZS9Tb3VyY2VSYW5nZS5q
YXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L1NvdXJjZVJhbmdlLmphdmEKQEAgLTczLDYgKzczLDkgQEAKIAkgKiBAc2VlIE9iamVjdCNoYXNo
Q29kZSgpCiAJICovCiAJcHVibGljIGludCBoYXNoQ29kZSgpIHsKKwkJaWYgKHRydWUpIHsKKwkJ
CXJldHVybiAwOworCQl9CiAJCXJldHVybiB0aGlzLmxlbmd0aCBeIHRoaXMub2Zmc2V0OwogCX0K
IApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvcmUvQW5ub3RhdGlvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9k
ZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvQW5ub3RhdGlvbi5qYXZhCmluZGV4IDI2
MDE4NDguLjVkOTRmM2YgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0Fubm90YXRpb24uamF2YQorKysgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9Bbm5vdGF0
aW9uLmphdmEKQEAgLTEyNiw2ICsxMjYsOSBAQAogCX0KIAogCXB1YmxpYyBpbnQgaGFzaENvZGUo
KSB7CisJCWlmICh0cnVlKSB7CisJCQlyZXR1cm4gMDsKKwkJfQogCQlmaW5hbCBpbnQgcHJpbWUg
PSAzMTsKIAkJaW50IHJlc3VsdCA9IHN1cGVyLmhhc2hDb2RlKCk7CiAJCXJlc3VsdCA9IHByaW1l
ICogcmVzdWx0ICsgKCh0aGlzLm1lbWJlclZhbHVlUGFpck5hbWUgPT0gbnVsbCkgPyAwIDogdGhp
cy5tZW1iZXJWYWx1ZVBhaXJOYW1lLmhhc2hDb2RlKCkpOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvQmluYXJ5TWV0
aG9kLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29yZS9CaW5hcnlNZXRob2QuamF2YQppbmRleCBjOGExZmE4Li4zOTc4MTJlIDEwMDY0
NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29yZS9CaW5hcnlNZXRob2QuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2Rl
bC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9CaW5hcnlNZXRob2QuamF2YQpAQCAtNTE5
LDYgKzUxOSw5IEBACiAgKiBAc2VlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLkphdmFF
bGVtZW50I2hhc2hDb2RlKCkKICAqLwogcHVibGljIGludCBoYXNoQ29kZSgpIHsKKwlpZiAodHJ1
ZSkgeworCQlyZXR1cm4gMDsKKwl9CiAgICBpbnQgaGFzaCA9IHN1cGVyLmhhc2hDb2RlKCk7CiAJ
Zm9yIChpbnQgaSA9IDAsIGxlbmd0aCA9IHRoaXMucGFyYW1ldGVyVHlwZXMubGVuZ3RoOyBpIDwg
bGVuZ3RoOyBpKyspIHsKIAkgICAgaGFzaCA9IFV0aWwuY29tYmluZUhhc2hDb2RlcyhoYXNoLCBn
ZXRFcmFzZWRQYXJhbWV0ZXJUeXBlKGkpLmhhc2hDb2RlKCkpOwpkaWZmIC0tZ2l0IGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvQnVmZmVy
RmFjdG9yeVdyYXBwZXIuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb3JlL0J1ZmZlckZhY3RvcnlXcmFwcGVyLmphdmEKaW5kZXggMjU2
Njk2Zi4uYjU1NzAzOCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvQnVmZmVyRmFjdG9yeVdyYXBwZXIuamF2YQorKysg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29y
ZS9CdWZmZXJGYWN0b3J5V3JhcHBlci5qYXZhCkBAIC00Niw2ICs0Niw5IEBACiAJCXJldHVybiB0
aGlzLmZhY3RvcnkuZXF1YWxzKG90aGVyLmZhY3RvcnkpOwogCX0KIAlwdWJsaWMgaW50IGhhc2hD
b2RlKCkgeworCQlpZiAodHJ1ZSkgeworCQkJcmV0dXJuIDA7CisJCX0KIAkJaWYgKHRoaXMuZmFj
dG9yeSA9PSBudWxsKSByZXR1cm4gMDsKIAkJcmV0dXJuIHRoaXMuZmFjdG9yeS5oYXNoQ29kZSgp
OwogCX0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb3JlL0NsYXNzRmlsZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
bW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvQ2xhc3NGaWxlLmphdmEKaW5kZXgg
MDgzMjQyYS4uZjkwYzQ3ZiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvQ2xhc3NGaWxlLmphdmEKKysrIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvQ2xhc3NG
aWxlLmphdmEKQEAgLTU4NSw2ICs1ODUsOSBAQAogCXJldHVybiB0cnVlOwogfQogcHVibGljIGlu
dCBoYXNoQ29kZSgpIHsKKwlpZiAodHJ1ZSkgeworCQlyZXR1cm4gMDsKKwl9CiAJcmV0dXJuIFV0
aWwuY29tYmluZUhhc2hDb2Rlcyh0aGlzLm5hbWUuaGFzaENvZGUoKSwgdGhpcy5wYXJlbnQuaGFz
aENvZGUoKSk7CiB9CiAvKioKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVs
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0NsYXNzcGF0aEF0dHJpYnV0ZS5qYXZhIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUv
Q2xhc3NwYXRoQXR0cmlidXRlLmphdmEKaW5kZXggYjFmMWIzNi4uMzliNDI2MCAxMDA2NDQKLS0t
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
cmUvQ2xhc3NwYXRoQXR0cmlidXRlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9k
ZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvQ2xhc3NwYXRoQXR0cmlidXRlLmphdmEK
QEAgLTM4LDYgKzM4LDkgQEAKICAgICB9CiAKICAgICBwdWJsaWMgaW50IGhhc2hDb2RlKCkgewor
CQlpZiAodHJ1ZSkgeworCQkJcmV0dXJuIDA7CisJCX0KICAgICAgCXJldHVybiBVdGlsLmNvbWJp
bmVIYXNoQ29kZXModGhpcy5uYW1lLmhhc2hDb2RlKCksIHRoaXMudmFsdWUuaGFzaENvZGUoKSk7
CiAgICAgfQogCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29yZS9DbGFzc3BhdGhDaGFuZ2UuamF2YSBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0NsYXNzcGF0aENo
YW5nZS5qYXZhCmluZGV4IDdhNDYxZGYuLjEyY2Y3OGYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0NsYXNzcGF0aENo
YW5nZS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb3JlL0NsYXNzcGF0aENoYW5nZS5qYXZhCkBAIC00NTcsNiArNDU3LDkgQEAK
IAl9CiAKIAlwdWJsaWMgaW50IGhhc2hDb2RlKCkgeworCQlpZiAodHJ1ZSkgeworCQkJcmV0dXJu
IDA7CisJCX0KIAkJcmV0dXJuIHRoaXMucHJvamVjdC5oYXNoQ29kZSgpOwogCX0KIApkaWZmIC0t
Z2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvcmUvQ2xhc3NwYXRoRW50cnkuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0NsYXNzcGF0aEVudHJ5LmphdmEKaW5kZXggOGJh
ZWY2My4uM2MzYmY2NyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvQ2xhc3NwYXRoRW50cnkuamF2YQorKysgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9DbGFz
c3BhdGhFbnRyeS5qYXZhCkBAIC0xMjUyLDYgKzEyNTIsOSBAQAogCSAqIFJldHVybnMgdGhlIGhh
c2ggY29kZSBmb3IgdGhpcyBjbGFzc3BhdGggZW50cnkKIAkgKi8KIAlwdWJsaWMgaW50IGhhc2hD
b2RlKCkgeworCQlpZiAodHJ1ZSkgeworCQkJcmV0dXJuIDA7CisJCX0KIAkJcmV0dXJuIHRoaXMu
cGF0aC5oYXNoQ29kZSgpOwogCX0KIApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
bW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvRXh0ZXJuYWxQYWNrYWdlRnJhZ21l
bnRSb290LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29yZS9FeHRlcm5hbFBhY2thZ2VGcmFnbWVudFJvb3QuamF2YQppbmRleCA4NDcx
ZjAzLi42ZmZhYTQ2IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9FeHRlcm5hbFBhY2thZ2VGcmFnbWVudFJvb3QuamF2
YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29yZS9FeHRlcm5hbFBhY2thZ2VGcmFnbWVudFJvb3QuamF2YQpAQCAtOTYsNiArOTYsOSBA
QAogCQlyZXR1cm4gbnVsbDsKIAl9CiAJcHVibGljIGludCBoYXNoQ29kZSgpIHsKKwkJaWYgKHRy
dWUpIHsKKwkJCXJldHVybiAwOworCQl9CiAJCXJldHVybiB0aGlzLmV4dGVybmFsUGF0aC5oYXNo
Q29kZSgpOwogCX0KIAkvKioKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVs
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0luaXRpYWxpemVyLmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9Jbml0aWFs
aXplci5qYXZhCmluZGV4IDM0NmJiMDYuLjcwNTQxNTkgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0luaXRpYWxpemVy
LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvcmUvSW5pdGlhbGl6ZXIuamF2YQpAQCAtNTgsNiArNTgsOSBAQAogCXJldHVybiBK
YXZhRWxlbWVudC5KRU1fSU5JVElBTElaRVI7CiB9CiBwdWJsaWMgaW50IGhhc2hDb2RlKCkgewor
CWlmICh0cnVlKSB7CisJCXJldHVybiAwOworCX0KIAlyZXR1cm4gVXRpbC5jb21iaW5lSGFzaENv
ZGVzKHRoaXMucGFyZW50Lmhhc2hDb2RlKCksIHRoaXMub2NjdXJyZW5jZUNvdW50KTsKIH0KIC8q
KgpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvcmUvSmFyRW50cnlSZXNvdXJjZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvSmFyRW50cnlSZXNvdXJjZS5q
YXZhCmluZGV4IDU3YTI3NzUuLmU0OGRhNDYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0phckVudHJ5UmVzb3VyY2Uu
amF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29yZS9KYXJFbnRyeVJlc291cmNlLmphdmEKQEAgLTg1LDYgKzg1LDkgQEAKIAl9CiAK
IAlwdWJsaWMgaW50IGhhc2hDb2RlKCkgeworCQlpZiAodHJ1ZSkgeworCQkJcmV0dXJuIDA7CisJ
CX0KIAkJcmV0dXJuIFV0aWwuY29tYmluZUhhc2hDb2Rlcyh0aGlzLnNpbXBsZU5hbWUuaGFzaENv
ZGUoKSwgdGhpcy5wYXJlbnQuaGFzaENvZGUoKSk7CiAJfQogCmRpZmYgLS1naXQgYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9KYXJQYWNr
YWdlRnJhZ21lbnRSb290LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29yZS9KYXJQYWNrYWdlRnJhZ21lbnRSb290LmphdmEKaW5kZXgg
M2NkNGQwNy4uZWZkYmQzMyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvSmFyUGFja2FnZUZyYWdtZW50Um9vdC5qYXZh
CisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb3JlL0phclBhY2thZ2VGcmFnbWVudFJvb3QuamF2YQpAQCAtMjA5LDYgKzIwOSw5IEBACiAJ
CX0KIAl9CiAJcHVibGljIGludCBoYXNoQ29kZSgpIHsKKwkJaWYgKHRydWUpIHsKKwkJCXJldHVy
biAwOworCQl9CiAJCXJldHVybiB0aGlzLmphclBhdGguaGFzaENvZGUoKTsKIAl9CiAJcHJpdmF0
ZSB2b2lkIGluaXRSYXdQYWNrYWdlSW5mbyhIYXNodGFibGVPZkFycmF5VG9PYmplY3QgcmF3UGFj
a2FnZUluZm8sIFN0cmluZyBlbnRyeU5hbWUsIGJvb2xlYW4gaXNEaXJlY3RvcnksIFN0cmluZyBz
b3VyY2VMZXZlbCwgU3RyaW5nIGNvbXBsaWFuY2UpIHsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0phdmFFbGVtZW50
LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29yZS9KYXZhRWxlbWVudC5qYXZhCmluZGV4IGRlOWE5ZDAuLmFmZDZhOTYgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b3JlL0phdmFFbGVtZW50LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvSmF2YUVsZW1lbnQuamF2YQpAQCAtNDY3LDYgKzQ2
Nyw5IEBACiAJICogb3ZlcnJpZGUgdGhpcyBtZXRob2QuCiAJICovCiAJcHVibGljIGludCBoYXNo
Q29kZSgpIHsKKwkJaWYgKHRydWUpIHsKKwkJCXJldHVybiAwOworCQl9CiAJCWlmICh0aGlzLnBh
cmVudCA9PSBudWxsKSByZXR1cm4gc3VwZXIuaGFzaENvZGUoKTsKIAkJcmV0dXJuIFV0aWwuY29t
YmluZUhhc2hDb2RlcyhnZXRFbGVtZW50TmFtZSgpLmhhc2hDb2RlKCksIHRoaXMucGFyZW50Lmhh
c2hDb2RlKCkpOwogCX0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0phdmFQcm9qZWN0LmphdmEgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9KYXZhUHJvamVj
dC5qYXZhCmluZGV4IGM3OGM2OTcuLjc2YTgwZTcgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0phdmFQcm9qZWN0Lmph
dmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvcmUvSmF2YVByb2plY3QuamF2YQpAQCAtMjExNCw2ICsyMTE0LDkgQEAKIAl9CiAKIAlw
dWJsaWMgaW50IGhhc2hDb2RlKCkgeworCQlpZiAodHJ1ZSkgeworCQkJcmV0dXJuIDA7CisJCX0K
IAkJcmV0dXJuIHRoaXMucHJvamVjdC5oYXNoQ29kZSgpOwogCX0KIAkKZGlmZiAtLWdpdCBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0xv
Y2FsVmFyaWFibGUuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb3JlL0xvY2FsVmFyaWFibGUuamF2YQppbmRleCBjYzhiYjU4Li4xNTIw
N2IxIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29yZS9Mb2NhbFZhcmlhYmxlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvTG9jYWxWYXJpYWJsZS5q
YXZhCkBAIC00MTQsNiArNDE0LDkgQEAKIAl9CiAKIAlwdWJsaWMgaW50IGhhc2hDb2RlKCkgewor
CQlpZiAodHJ1ZSkgeworCQkJcmV0dXJuIDA7CisJCX0KIAkJcmV0dXJuIFV0aWwuY29tYmluZUhh
c2hDb2Rlcyh0aGlzLnBhcmVudC5oYXNoQ29kZSgpLCB0aGlzLm5hbWVTdGFydCk7CiAJfQogCQpk
aWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvcmUvTWVtYmVyVmFsdWVQYWlyLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9t
b2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9NZW1iZXJWYWx1ZVBhaXIuamF2YQpp
bmRleCAzZThmYzIwLi4zMDgwNjU1IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9t
b2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9NZW1iZXJWYWx1ZVBhaXIuamF2YQor
KysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29yZS9NZW1iZXJWYWx1ZVBhaXIuamF2YQpAQCAtNTUsNiArNTUsOSBAQAogCX0KIAogCXB1Ymxp
YyBpbnQgaGFzaENvZGUoKSB7CisJCWlmICh0cnVlKSB7CisJCQlyZXR1cm4gMDsKKwkJfQogCQlm
aW5hbCBpbnQgcHJpbWUgPSAzMTsKIAkJaW50IHJlc3VsdCA9IDE7CiAJCXJlc3VsdCA9IHByaW1l
ICogcmVzdWx0ICsgKCh0aGlzLm1lbWJlck5hbWUgPT0gbnVsbCkgPyAwIDogdGhpcy5tZW1iZXJO
YW1lLmhhc2hDb2RlKCkpOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvTm9uSmF2YVJlc291cmNlLmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9Ob25K
YXZhUmVzb3VyY2UuamF2YQppbmRleCA3YzlhM2IwLi4xYjY0NDI5IDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9Ob25K
YXZhUmVzb3VyY2UuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29yZS9Ob25KYXZhUmVzb3VyY2UuamF2YQpAQCAtMTA1LDYgKzEw
NSw5IEBACiAJfQogCiAJcHVibGljIGludCBoYXNoQ29kZSgpIHsKKwkJaWYgKHRydWUpIHsKKwkJ
CXJldHVybiAwOworCQl9CiAJCXJldHVybiBVdGlsLmNvbWJpbmVIYXNoQ29kZXModGhpcy5yZXNv
dXJjZS5oYXNoQ29kZSgpLCB0aGlzLnBhcmVudC5oYXNoQ29kZSgpKTsKIAl9CiAKZGlmZiAtLWdp
dCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b3JlL1BhY2thZ2VGcmFnbWVudC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvUGFja2FnZUZyYWdtZW50LmphdmEKaW5kZXggMzVm
YjM0Yi4uZWY1NGY5YiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvUGFja2FnZUZyYWdtZW50LmphdmEKKysrIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvUGFj
a2FnZUZyYWdtZW50LmphdmEKQEAgLTM1Nyw2ICszNTcsOSBAQAogCX0KIH0KIHB1YmxpYyBpbnQg
aGFzaENvZGUoKSB7CisJaWYgKHRydWUpIHsKKwkJcmV0dXJuIDA7CisJfQogCWludCBoYXNoID0g
dGhpcy5wYXJlbnQuaGFzaENvZGUoKTsKIAlmb3IgKGludCBpID0gMCwgbGVuZ3RoID0gdGhpcy5u
YW1lcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykKIAkJaGFzaCA9IFV0aWwuY29tYmluZUhhc2hD
b2Rlcyh0aGlzLm5hbWVzW2ldLmhhc2hDb2RlKCksIGhhc2gpOwpkaWZmIC0tZ2l0IGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvUGFja2Fn
ZUZyYWdtZW50Um9vdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvcmUvUGFja2FnZUZyYWdtZW50Um9vdC5qYXZhCmluZGV4IDgxN2Zj
OWIuLjNkMWJkMTYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL1BhY2thZ2VGcmFnbWVudFJvb3QuamF2YQorKysgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9Q
YWNrYWdlRnJhZ21lbnRSb290LmphdmEKQEAgLTcwOCw2ICs3MDgsOSBAQAogfQogCiBwdWJsaWMg
aW50IGhhc2hDb2RlKCkgeworCWlmICh0cnVlKSB7CisJCXJldHVybiAwOworCX0KIAlyZXR1cm4g
cmVzb3VyY2UoKS5oYXNoQ29kZSgpOwogfQogCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9Tb3VyY2VNYXBwZXIuamF2
YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b3JlL1NvdXJjZU1hcHBlci5qYXZhCmluZGV4IDhjMTQ2MjAuLjY2MmQ2M2MgMTAwNjQ0Ci0tLSBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3Jl
L1NvdXJjZU1hcHBlci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL1NvdXJjZU1hcHBlci5qYXZhCkBAIC0xMDIsNiArMTAy
LDkgQEAKIAkJfQogCiAJCXB1YmxpYyBpbnQgaGFzaENvZGUoKSB7CisJCQlpZiAodHJ1ZSkgewor
CQkJCXJldHVybiAwOworCQkJfQogCQkJZmluYWwgaW50IHByaW1lID0gMzE7CiAJCQlpbnQgcmVz
dWx0ID0gMTsKIAkJCXJlc3VsdCA9IHByaW1lICogcmVzdWx0ICsgKCh0aGlzLm5hbWUgPT0gbnVs
bCkgPyAwIDogdGhpcy5uYW1lLmhhc2hDb2RlKCkpOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvU291cmNlTWV0aG9k
LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29yZS9Tb3VyY2VNZXRob2QuamF2YQppbmRleCAwMDAyNmFiLi5mZTAyNGFhIDEwMDY0NAot
LS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29yZS9Tb3VyY2VNZXRob2QuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9Tb3VyY2VNZXRob2QuamF2YQpAQCAtMTk5LDYg
KzE5OSw5IEBACiAgKiBAc2VlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLkphdmFFbGVt
ZW50I2hhc2hDb2RlKCkKICAqLwogcHVibGljIGludCBoYXNoQ29kZSgpIHsKKwlpZiAodHJ1ZSkg
eworCQlyZXR1cm4gMDsKKwl9CiAgICBpbnQgaGFzaCA9IHN1cGVyLmhhc2hDb2RlKCk7CiAJZm9y
IChpbnQgaSA9IDAsIGxlbmd0aCA9IHRoaXMucGFyYW1ldGVyVHlwZXMubGVuZ3RoOyBpIDwgbGVu
Z3RoOyBpKyspIHsKIAkgICAgaGFzaCA9IFV0aWwuY29tYmluZUhhc2hDb2RlcyhoYXNoLCB0aGlz
LnBhcmFtZXRlclR5cGVzW2ldLmhhc2hDb2RlKCkpOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvVXNlckxpYnJhcnku
amF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb3JlL1VzZXJMaWJyYXJ5LmphdmEKaW5kZXggYmQ5NGE1Zi4uNzEzZTZhOCAxMDA2NDQKLS0t
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
cmUvVXNlckxpYnJhcnkuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9Vc2VyTGlicmFyeS5qYXZhCkBAIC04OSw2ICs4OSw5
IEBACiAJICogQHNlZSBqYXZhLmxhbmcuT2JqZWN0I2hhc2hDb2RlKCkKIAkgKi8KIAlwdWJsaWMg
aW50IGhhc2hDb2RlKCkgeworCQlpZiAodHJ1ZSkgeworCQkJcmV0dXJuIDA7CisJCX0KIAkJaW50
IGhhc2hDb2RlPSAwOwogCQlpZiAodGhpcy5pc1N5c3RlbUxpYnJhcnkpIHsKIAkJCWhhc2hDb2Rl
Kys7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29yZS9idWlsZGVyL0NsYXNzcGF0aERpcmVjdG9yeS5qYXZhIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvYnVpbGRl
ci9DbGFzc3BhdGhEaXJlY3RvcnkuamF2YQppbmRleCA2M2M4ZGU3Li4wMTljYzk3IDEwMDY0NAot
LS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29yZS9idWlsZGVyL0NsYXNzcGF0aERpcmVjdG9yeS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL2J1aWxkZXIvQ2xhc3Nw
YXRoRGlyZWN0b3J5LmphdmEKQEAgLTExOSw2ICsxMTksOSBAQAogfQogCiBwdWJsaWMgaW50IGhh
c2hDb2RlKCkgeworCWlmICh0cnVlKSB7CisJCXJldHVybiAwOworCX0KIAlyZXR1cm4gdGhpcy5i
aW5hcnlGb2xkZXIgPT0gbnVsbCA/IHN1cGVyLmhhc2hDb2RlKCkgOiB0aGlzLmJpbmFyeUZvbGRl
ci5oYXNoQ29kZSgpOwogfQogCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2Rl
bC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9idWlsZGVyL0NsYXNzcGF0aEphci5qYXZh
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
cmUvYnVpbGRlci9DbGFzc3BhdGhKYXIuamF2YQppbmRleCAzMjY4YjRjLi4xNmJjOTYyIDEwMDY0
NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29yZS9idWlsZGVyL0NsYXNzcGF0aEphci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL2J1aWxkZXIvQ2xhc3NwYXRo
SmFyLmphdmEKQEAgLTE2NCw2ICsxNjQsOSBAQAogfQogCiBwdWJsaWMgaW50IGhhc2hDb2RlKCkg
eworCWlmICh0cnVlKSB7CisJCXJldHVybiAwOworCX0KIAlyZXR1cm4gdGhpcy56aXBGaWxlbmFt
ZSA9PSBudWxsID8gc3VwZXIuaGFzaENvZGUoKSA6IHRoaXMuemlwRmlsZW5hbWUuaGFzaENvZGUo
KTsKIH0KIApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvcmUvYnVpbGRlci9Tb3VyY2VGaWxlLmphdmEgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9idWlsZGVyL1Nv
dXJjZUZpbGUuamF2YQppbmRleCA0YTViMDRkLi43MThkNTQ3IDEwMDY0NAotLS0gYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9idWlsZGVy
L1NvdXJjZUZpbGUuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29yZS9idWlsZGVyL1NvdXJjZUZpbGUuamF2YQpAQCAtMTAxLDYg
KzEwMSw5IEBACiAJcmV0dXJuIENoYXJPcGVyYXRpb24uc3BsaXRPbignLycsIHR5cGVOYW1lLCAw
LCBsYXN0SW5kZXgpOwogfQogcHVibGljIGludCBoYXNoQ29kZSgpIHsKKwlpZiAodHJ1ZSkgewor
CQlyZXR1cm4gMDsKKwl9CiAJcmV0dXJuIHRoaXMuaW5pdGlhbFR5cGVOYW1lLmhhc2hDb2RlKCk7
CiB9CiBwdWJsaWMgYm9vbGVhbiBpZ25vcmVPcHRpb25hbFByb2JsZW1zKCkgewpkaWZmIC0tZ2l0
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
cmUvdXRpbC9IYXNoU2V0T2ZBcnJheS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvdXRpbC9IYXNoU2V0T2ZBcnJheS5qYXZhCmlu
ZGV4IDljMjQ5MDUuLjhkODRiMTEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21v
ZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3V0aWwvSGFzaFNldE9mQXJyYXkuamF2
YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29yZS91dGlsL0hhc2hTZXRPZkFycmF5LmphdmEKQEAgLTYzLDEwICs2MywxNiBAQAogCX0K
IAogCXByaXZhdGUgaW50IGhhc2hDb2RlKE9iamVjdFtdIGVsZW1lbnQpIHsKKwkJaWYgKHRydWUp
IHsKKwkJCXJldHVybiAwOworCQl9CiAJCXJldHVybiBoYXNoQ29kZShlbGVtZW50LCBlbGVtZW50
Lmxlbmd0aCk7CiAJfQogCiAJcHJpdmF0ZSBpbnQgaGFzaENvZGUoT2JqZWN0W10gZWxlbWVudCwg
aW50IGxlbmd0aCkgeworCQlpZiAodHJ1ZSkgeworCQkJcmV0dXJuIDA7CisJCX0KIAkJaW50IGhh
c2ggPSAwOwogCQlmb3IgKGludCBpID0gbGVuZ3RoLTE7IGkgPj0gMDsgaS0tKQogCQkJaGFzaCA9
IFV0aWwuY29tYmluZUhhc2hDb2RlcyhoYXNoLCBlbGVtZW50W2ldLmhhc2hDb2RlKCkpOwpkaWZm
IC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvcmUvdXRpbC9IYXNoU2V0T2ZDaGFyQXJyYXlBcnJheS5qYXZhIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvdXRpbC9IYXNoU2V0
T2ZDaGFyQXJyYXlBcnJheS5qYXZhCmluZGV4IGY1ZTVjOGIuLjFhOTI3MDEgMTAwNjQ0Ci0tLSBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3Jl
L3V0aWwvSGFzaFNldE9mQ2hhckFycmF5QXJyYXkuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS91dGlsL0hhc2hTZXRPZkNo
YXJBcnJheUFycmF5LmphdmEKQEAgLTY1LDEwICs2NSwxNiBAQAogCX0KIAogCXByaXZhdGUgaW50
IGhhc2hDb2RlKGNoYXJbXVtdIGVsZW1lbnQpIHsKKwkJaWYgKHRydWUpIHsKKwkJCXJldHVybiAw
OworCQl9CiAJCXJldHVybiBoYXNoQ29kZShlbGVtZW50LCBlbGVtZW50Lmxlbmd0aCk7CiAJfQog
CiAJcHJpdmF0ZSBpbnQgaGFzaENvZGUoY2hhcltdW10gZWxlbWVudCwgaW50IGxlbmd0aCkgewor
CQlpZiAodHJ1ZSkgeworCQkJcmV0dXJuIDA7CisJCX0KIAkJaW50IGhhc2ggPSAwOwogCQlmb3Ig
KGludCBpID0gbGVuZ3RoLTE7IGkgPj0gMDsgaS0tKQogCQkJaGFzaCA9IFV0aWwuY29tYmluZUhh
c2hDb2RlcyhoYXNoLCBDaGFyT3BlcmF0aW9uLmhhc2hDb2RlKGVsZW1lbnRbaV0pKTsKZGlmZiAt
LWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb3JlL3V0aWwvSGFzaHRhYmxlT2ZBcnJheVRvT2JqZWN0LmphdmEgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS91dGlsL0hhc2h0YWJs
ZU9mQXJyYXlUb09iamVjdC5qYXZhCmluZGV4IDFmODIyZDQuLjY2NDRmMzIgMTAwNjQ0Ci0tLSBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3Jl
L3V0aWwvSGFzaHRhYmxlT2ZBcnJheVRvT2JqZWN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvdXRpbC9IYXNodGFibGVP
ZkFycmF5VG9PYmplY3QuamF2YQpAQCAtMTEyLDEwICsxMTIsMTYgQEAKIAl9CiAKIAlwcml2YXRl
IGludCBoYXNoQ29kZShPYmplY3RbXSBlbGVtZW50KSB7CisJCWlmICh0cnVlKSB7CisJCQlyZXR1
cm4gMDsKKwkJfQogCQlyZXR1cm4gaGFzaENvZGUoZWxlbWVudCwgZWxlbWVudC5sZW5ndGgpOwog
CX0KIAogCXByaXZhdGUgaW50IGhhc2hDb2RlKE9iamVjdFtdIGVsZW1lbnQsIGludCBsZW5ndGgp
IHsKKwkJaWYgKHRydWUpIHsKKwkJCXJldHVybiAwOworCQl9CiAJCWludCBoYXNoID0gMDsKIAkJ
Zm9yIChpbnQgaSA9IGxlbmd0aC0xOyBpID49IDA7IGktLSkKIAkJCWhhc2ggPSBVdGlsLmNvbWJp
bmVIYXNoQ29kZXMoaGFzaCwgZWxlbWVudFtpXS5oYXNoQ29kZSgpKTsKZGlmZiAtLWdpdCBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3V0
aWwvV2Vha0hhc2hTZXQuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb3JlL3V0aWwvV2Vha0hhc2hTZXQuamF2YQppbmRleCA3ZDBjODg1
Li5jMWE0YjE2IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29yZS91dGlsL1dlYWtIYXNoU2V0LmphdmEKKysrIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvdXRpbC9X
ZWFrSGFzaFNldC5qYXZhCkBAIC0zMSw2ICszMSw5IEBACiAJCQlyZXR1cm4gcmVmZXJlbnQuZXF1
YWxzKG90aGVyKTsKIAkJfQogCQlwdWJsaWMgaW50IGhhc2hDb2RlKCkgeworCQkJaWYgKHRydWUp
IHsKKwkJCQlyZXR1cm4gMDsKKwkJCX0KIAkJCXJldHVybiB0aGlzLmhhc2hDb2RlOwogCQl9CiAJ
CXB1YmxpYyBTdHJpbmcgdG9TdHJpbmcoKSB7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS91dGlsL1dlYWtIYXNoU2V0
T2ZDaGFyQXJyYXkuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb3JlL3V0aWwvV2Vha0hhc2hTZXRPZkNoYXJBcnJheS5qYXZhCmluZGV4
IDZjZGQ1MzAuLjYxZmQ3NzggMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVs
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3V0aWwvV2Vha0hhc2hTZXRPZkNoYXJBcnJh
eS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb3JlL3V0aWwvV2Vha0hhc2hTZXRPZkNoYXJBcnJheS5qYXZhCkBAIC0zMyw2ICsz
Myw5IEBACiAJCQlyZXR1cm4gQ2hhck9wZXJhdGlvbi5lcXVhbHMocmVmZXJlbnQsIG90aGVyKTsK
IAkJfQogCQlwdWJsaWMgaW50IGhhc2hDb2RlKCkgeworCQkJaWYgKHRydWUpIHsKKwkJCQlyZXR1
cm4gMDsKKwkJCX0KIAkJCXJldHVybiB0aGlzLmhhc2hDb2RlOwogCQl9CiAJCXB1YmxpYyBTdHJp
bmcgdG9TdHJpbmcoKSB7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvaW5kZXgvRmlsZUluZGV4TG9jYXRpb24uamF2
YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29yZS9pbmRleC9GaWxlSW5kZXhMb2NhdGlvbi5qYXZhCmluZGV4IDY3ZmM5YWUuLmRmMGI4NTcg
MTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29yZS9pbmRleC9GaWxlSW5kZXhMb2NhdGlvbi5qYXZhCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9pbmRleC9G
aWxlSW5kZXhMb2NhdGlvbi5qYXZhCkBAIC03Niw2ICs3Niw5IEBACiAJfQogCiAJcHVibGljIGlu
dCBoYXNoQ29kZSgpIHsKKwkJaWYgKHRydWUpIHsKKwkJCXJldHVybiAwOworCQl9CiAJCXJldHVy
biB0aGlzLmluZGV4RmlsZS5oYXNoQ29kZSgpOwogCX0KIApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL2luZGV4L0lu
ZGV4TG9jYXRpb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29yZS9pbmRleC9JbmRleExvY2F0aW9uLmphdmEKaW5kZXggZDQxMGY3
Mi4uNzExZDhiNSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL2luZGV4L0luZGV4TG9jYXRpb24uamF2YQorKysgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUv
aW5kZXgvSW5kZXhMb2NhdGlvbi5qYXZhCkBAIC05OSw2ICs5OSw5IEBACiAJfQogCiAJcHVibGlj
IGludCBoYXNoQ29kZSgpIHsKKwkJaWYgKHRydWUpIHsKKwkJCXJldHVybiAwOworCQl9CiAJCXJl
dHVybiB0aGlzLnVybC5oYXNoQ29kZSgpOwogCX0KIApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9KYXZh
U2VhcmNoVHlwZU5hbWVNYXRjaC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9KYXZhU2VhcmNoVHlwZU5hbWVNYXRj
aC5qYXZhCmluZGV4IDExMGUwZTEuLjJiZTcyMjEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gvSmF2YVNl
YXJjaFR5cGVOYW1lTWF0Y2guamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNoL0phdmFTZWFyY2hUeXBlTmFtZU1h
dGNoLmphdmEKQEAgLTc3LDYgKzc3LDkgQEAKICAqIEBzZWUgamF2YS5sYW5nLk9iamVjdCNoYXNo
Q29kZSgpCiAgKi8KIHB1YmxpYyBpbnQgaGFzaENvZGUoKSB7CisJaWYgKHRydWUpIHsKKwkJcmV0
dXJuIDA7CisJfQogCWlmICh0aGlzLnR5cGUgPT0gbnVsbCkgcmV0dXJuIHRoaXMubW9kaWZpZXJz
OwogCXJldHVybiB0aGlzLnR5cGUuaGFzaENvZGUoKTsKIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gv
SmF2YVdvcmtzcGFjZVNjb3BlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNoL0phdmFXb3Jrc3BhY2VTY29wZS5qYXZh
CmluZGV4IGYxNmRmMGEuLjliMDE3NjcgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gvSmF2YVdvcmtzcGFj
ZVNjb3BlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9KYXZhV29ya3NwYWNlU2NvcGUuamF2YQpAQCAtMTI4
LDYgKzEyOCw5IEBACiB9CiAKIHB1YmxpYyBpbnQgaGFzaENvZGUoKSB7CisJaWYgKHRydWUpIHsK
KwkJcmV0dXJuIDA7CisJfQogCXJldHVybiBKYXZhV29ya3NwYWNlU2NvcGUuY2xhc3MuaGFzaENv
ZGUoKTsKIH0KIApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9pbmRleGluZy9BZGRKYXJGaWxlVG9JbmRl
eC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb3JlL3NlYXJjaC9pbmRleGluZy9BZGRKYXJGaWxlVG9JbmRleC5qYXZhCmluZGV4IDgx
MmM0NjIuLmVkNmFkMzQgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gvaW5kZXhpbmcvQWRkSmFyRmlsZVRv
SW5kZXguamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvcmUvc2VhcmNoL2luZGV4aW5nL0FkZEphckZpbGVUb0luZGV4LmphdmEK
QEAgLTY1LDYgKzY1LDkgQEAKIAkJcmV0dXJuIGZhbHNlOwogCX0KIAlwdWJsaWMgaW50IGhhc2hD
b2RlKCkgeworCQlpZiAodHJ1ZSkgeworCQkJcmV0dXJuIDA7CisJCX0KIAkJaWYgKHRoaXMucmVz
b3VyY2UgIT0gbnVsbCkKIAkJCXJldHVybiB0aGlzLnJlc291cmNlLmhhc2hDb2RlKCk7CiAJCWlm
ICh0aGlzLmNvbnRhaW5lclBhdGggIT0gbnVsbCkKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gvaW5kZXhp
bmcvSW5kZXhBbGxQcm9qZWN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNoL2luZGV4aW5nL0luZGV4QWxsUHJvamVj
dC5qYXZhCmluZGV4IDk2YWE5MDQuLmU2YTg3NDkgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gvaW5kZXhp
bmcvSW5kZXhBbGxQcm9qZWN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNo
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9pbmRleGluZy9JbmRleEFsbFBy
b2plY3QuamF2YQpAQCAtMjQxLDYgKzI0MSw5IEBACiAJCXJldHVybiB0cnVlOwogCX0KIAlwdWJs
aWMgaW50IGhhc2hDb2RlKCkgeworCQlpZiAodHJ1ZSkgeworCQkJcmV0dXJuIDA7CisJCX0KIAkJ
cmV0dXJuIHRoaXMucHJvamVjdC5oYXNoQ29kZSgpOwogCX0KIAlwcm90ZWN0ZWQgSW50ZWdlciB1
cGRhdGVkSW5kZXhTdGF0ZSgpIHsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL3Nl
YXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gvaW5kZXhpbmcvSW5kZXhC
aW5hcnlGb2xkZXIuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gvaW5kZXhpbmcvSW5kZXhCaW5hcnlGb2xkZXIuamF2
YQppbmRleCBiMDZlMGRmLi5hOGI0MGFjIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNoL2luZGV4aW5nL0lu
ZGV4QmluYXJ5Rm9sZGVyLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9pbmRleGluZy9JbmRleEJpbmFyeUZv
bGRlci5qYXZhCkBAIC0xNDgsNiArMTQ4LDkgQEAKIAkJcmV0dXJuIHRydWU7CiAJfQogCXB1Ymxp
YyBpbnQgaGFzaENvZGUoKSB7CisJCWlmICh0cnVlKSB7CisJCQlyZXR1cm4gMDsKKwkJfQogCQly
ZXR1cm4gdGhpcy5mb2xkZXIuaGFzaENvZGUoKTsKIAl9CiAJcHJvdGVjdGVkIEludGVnZXIgdXBk
YXRlZEluZGV4U3RhdGUoKSB7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFy
Y2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNoL21hdGNoaW5nL0NsYXNzcGF0
aFNvdXJjZURpcmVjdG9yeS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9tYXRjaGluZy9DbGFzc3BhdGhTb3VyY2VE
aXJlY3RvcnkuamF2YQppbmRleCA5ZmQzNGM2Li4wMTc0ODVhIDEwMDY0NAotLS0gYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNo
L21hdGNoaW5nL0NsYXNzcGF0aFNvdXJjZURpcmVjdG9yeS5qYXZhCisrKyBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gvbWF0
Y2hpbmcvQ2xhc3NwYXRoU291cmNlRGlyZWN0b3J5LmphdmEKQEAgLTk2LDYgKzk2LDkgQEAKIH0K
IAogcHVibGljIGludCBoYXNoQ29kZSgpIHsKKwlpZiAodHJ1ZSkgeworCQlyZXR1cm4gMDsKKwl9
CiAJcmV0dXJuIHRoaXMuc291cmNlRm9sZGVyID09IG51bGwgPyBzdXBlci5oYXNoQ29kZSgpIDog
dGhpcy5zb3VyY2VGb2xkZXIuaGFzaENvZGUoKTsKIH0KIApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9t
YXRjaGluZy9Qb3NzaWJsZU1hdGNoLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNoL21hdGNoaW5nL1Bvc3NpYmxlTWF0
Y2guamF2YQppbmRleCAyYTk2N2M0Li5lY2I5ZTM5IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNoL21hdGNo
aW5nL1Bvc3NpYmxlTWF0Y2guamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNoL21hdGNoaW5nL1Bvc3NpYmxlTWF0
Y2guamF2YQpAQCAtMTQ3LDYgKzE0Nyw5IEBACiAJcmV0dXJuIHRoaXMuc2ltaWxhck1hdGNoICE9
IG51bGwgJiYgdGhpcy5zb3VyY2UgPT0gTk9fU09VUkNFX0ZJTEU7CiB9CiBwdWJsaWMgaW50IGhh
c2hDb2RlKCkgeworCWlmICh0cnVlKSB7CisJCXJldHVybiAwOworCX0KIAlpZiAodGhpcy5jb21w
b3VuZE5hbWUgPT0gbnVsbCkgcmV0dXJuIHN1cGVyLmhhc2hDb2RlKCk7CiAKIAlpbnQgaGFzaENv
ZGUgPSAwOw==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>212874</attachid>
            <date>2012-03-19 15:25:00 -0400</date>
            <delta_ts>2012-03-19 17:55:10 -0400</delta_ts>
            <desc>proposed fix</desc>
            <filename>Bug_372319.patch</filename>
            <type>text/plain</type>
            <size>1428</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvRmFrZWRUcmFja2luZ1ZhcmlhYmxlLmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvYXN0L0Zha2VkVHJhY2tpbmdWYXJpYWJsZS5qYXZhCmluZGV4IDRhYzZjMmYuLjQwNGYwNjUg
MTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvRmFrZWRUcmFja2luZ1ZhcmlhYmxlLmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FzdC9GYWtlZFRyYWNraW5nVmFyaWFibGUuamF2YQpAQCAtNTI5LDE1ICs1MjksMTcg
QEAKIAkgKi8KIAlwcml2YXRlIGludCBnZXROdWxsU3RhdHVzQWdncmVzc2l2ZWx5KExvY2FsVmFy
aWFibGVCaW5kaW5nIGxvY2FsLCBGbG93SW5mbyBmbG93SW5mbykgewogCQlpbnQgcmVhY2hNb2Rl
ID0gZmxvd0luZm8ucmVhY2hNb2RlKCk7Ci0JCWludCBzdGF0dXMgPSAwOwotCQl0cnkgewotCQkJ
Ly8gdW5yZWFjaGFibGUgZmxvd0luZm8gaXMgdG9vIHNoeSBpbiByZXBvcnRpbmcgbnVsbC1pc3N1
ZXMsIHRlbXBvcmFyaWx5IGZvcmdldCByZWFjaGFiaWxpdHk6Ci0JCQlpZiAocmVhY2hNb2RlICE9
IEZsb3dJbmZvLlJFQUNIQUJMRSkKLQkJCQlmbG93SW5mby50YWdCaXRzICY9IH5GbG93SW5mby5V
TlJFQUNIQUJMRTsKLQkJCXN0YXR1cyA9IGZsb3dJbmZvLm51bGxTdGF0dXMobG9jYWwpOwotCQl9
IGZpbmFsbHkgewotCQkJLy8gcmVzZXQKLQkJCWZsb3dJbmZvLnRhZ0JpdHMgfD0gcmVhY2hNb2Rl
OworCQlpbnQgc3RhdHVzID0gRmxvd0luZm8uVU5LTk9XTjsKKwkJaWYgKGZsb3dJbmZvICE9IEZs
b3dJbmZvLkRFQURfRU5EKSB7CisJCQl0cnkgeworCQkJCS8vIHVucmVhY2hhYmxlIGZsb3dJbmZv
IGlzIHRvbyBzaHkgaW4gcmVwb3J0aW5nIG51bGwtaXNzdWVzLCB0ZW1wb3JhcmlseSBmb3JnZXQg
cmVhY2hhYmlsaXR5OgorCQkJCWlmIChyZWFjaE1vZGUgIT0gRmxvd0luZm8uUkVBQ0hBQkxFKQor
CQkJCQlmbG93SW5mby50YWdCaXRzICY9IH5GbG93SW5mby5VTlJFQUNIQUJMRTsKKwkJCQlzdGF0
dXMgPSBmbG93SW5mby5udWxsU3RhdHVzKGxvY2FsKTsKKwkJCX0gZmluYWxseSB7CisJCQkJLy8g
cmVzZXQKKwkJCQlmbG93SW5mby50YWdCaXRzIHw9IHJlYWNoTW9kZTsKKwkJCX0KIAkJfQogCQkv
LyBhdCB0aGlzIHBvaW50IHNvbWUgY29tYmluYXRpb25zIGFyZSBub3QgdXNlZnVsIHNvIGZsYXR0
ZW4gdG8gYSBzaW5nbGUgYml0OgogCQlpZiAoKHN0YXR1cyAmIEZsb3dJbmZvLk5VTEwpICE9IDAp
IHsK
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>212880</attachid>
            <date>2012-03-19 17:55:00 -0400</date>
            <delta_ts>2012-03-19 19:29:30 -0400</delta_ts>
            <desc>improved fix</desc>
            <filename>Bug_372319_v2.patch</filename>
            <type>text/plain</type>
            <size>3675</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YSBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YQppbmRleCBlZDk4ZDIwLi5kNzljNzQ3IDEw
MDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L0FsbG9jYXRpb25FeHByZXNzaW9uLmphdmEKKysrIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9BbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCkBAIC04NCw3ICs4NCw3IEBACiAJfQog
CiAJLy8gYWZ0ZXIgaGF2aW5nIGFuYWx5c2VkIGV4Y2VwdGlvbnMgYWJvdmUgc3RhcnQgdHJhY2tp
bmcgbmV3bHkgYWxsb2NhdGVkIHJlc291cmNlOgotCWlmIChGYWtlZFRyYWNraW5nVmFyaWFibGUu
aXNBbnlDbG9zZWFibGUodGhpcy5yZXNvbHZlZFR5cGUpICYmIGN1cnJlbnRTY29wZS5jb21waWxl
ck9wdGlvbnMoKS5hbmFseXNlUmVzb3VyY2VMZWFrcykKKwlpZiAoY3VycmVudFNjb3BlLmNvbXBp
bGVyT3B0aW9ucygpLmFuYWx5c2VSZXNvdXJjZUxlYWtzICYmIEZha2VkVHJhY2tpbmdWYXJpYWJs
ZS5pc0FueUNsb3NlYWJsZSh0aGlzLnJlc29sdmVkVHlwZSkpCiAJCUZha2VkVHJhY2tpbmdWYXJp
YWJsZS5hbmFseXNlQ2xvc2VhYmxlQWxsb2NhdGlvbihjdXJyZW50U2NvcGUsIGZsb3dJbmZvLCB0
aGlzKTsKIAogCWlmICh0aGlzLmJpbmRpbmcuZGVjbGFyaW5nQ2xhc3MuaXNNZW1iZXJUeXBlKCkg
JiYgIXRoaXMuYmluZGluZy5kZWNsYXJpbmdDbGFzcy5pc1N0YXRpYygpKSB7CmRpZmYgLS1naXQg
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvYXN0L0Zha2VkVHJhY2tpbmdWYXJpYWJsZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9GYWtl
ZFRyYWNraW5nVmFyaWFibGUuamF2YQppbmRleCA0YWM2YzJmLi44ODE2NGZkIDEwMDY0NAotLS0g
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvYXN0L0Zha2VkVHJhY2tpbmdWYXJpYWJsZS5qYXZhCisrKyBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3Qv
RmFrZWRUcmFja2luZ1ZhcmlhYmxlLmphdmEKQEAgLTUyOCw2ICs1MjgsOSBAQAogCSAqIEByZXR1
cm4gb25lIG9mIHRoZSBjb25zdGFudHMgRmxvd0luZm8ue05VTEwsUE9URU5USUFMTFlfTlVMTCxQ
T1RFTlRJQUxMWV9OT05fTlVMTCxOT05fTlVMTH0uCiAJICovCiAJcHJpdmF0ZSBpbnQgZ2V0TnVs
bFN0YXR1c0FnZ3Jlc3NpdmVseShMb2NhbFZhcmlhYmxlQmluZGluZyBsb2NhbCwgRmxvd0luZm8g
Zmxvd0luZm8pIHsKKwkJaWYgKGZsb3dJbmZvID09IEZsb3dJbmZvLkRFQURfRU5EKSB7CisJCQly
ZXR1cm4gRmxvd0luZm8uVU5LTk9XTjsKKwkJfQogCQlpbnQgcmVhY2hNb2RlID0gZmxvd0luZm8u
cmVhY2hNb2RlKCk7CiAJCWludCBzdGF0dXMgPSAwOwogCQl0cnkgewpkaWZmIC0tZ2l0IGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9Mb2NhbERlY2xhcmF0aW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0xvY2FsRGVjbGFyYXRp
b24uamF2YQppbmRleCBiMmE5YjMwLi4zOTE2ZDZjIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0xv
Y2FsRGVjbGFyYXRpb24uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0xvY2FsRGVjbGFyYXRpb24uamF2
YQpAQCAtODAsOCArODAsOCBAQAogCUZsb3dJbmZvIHByZUluaXRJbmZvID0gbnVsbDsKIAlib29s
ZWFuIHNob3VsZEFuYWx5c2VSZXNvdXJjZSA9IHRoaXMuYmluZGluZyAhPSBudWxsIAogCQkJJiYg
Zmxvd0luZm8ucmVhY2hNb2RlKCkgPT0gRmxvd0luZm8uUkVBQ0hBQkxFCi0JCQkmJiBGYWtlZFRy
YWNraW5nVmFyaWFibGUuaXNBbnlDbG9zZWFibGUodGhpcy5pbml0aWFsaXphdGlvbi5yZXNvbHZl
ZFR5cGUpCi0JCQkmJiBjdXJyZW50U2NvcGUuY29tcGlsZXJPcHRpb25zKCkuYW5hbHlzZVJlc291
cmNlTGVha3M7CisJCQkmJiBjdXJyZW50U2NvcGUuY29tcGlsZXJPcHRpb25zKCkuYW5hbHlzZVJl
c291cmNlTGVha3MKKwkJCSYmIEZha2VkVHJhY2tpbmdWYXJpYWJsZS5pc0FueUNsb3NlYWJsZSh0
aGlzLmluaXRpYWxpemF0aW9uLnJlc29sdmVkVHlwZSk7CiAJaWYgKHNob3VsZEFuYWx5c2VSZXNv
dXJjZSkgewogCQlwcmVJbml0SW5mbyA9IGZsb3dJbmZvLnVuY29uZGl0aW9uYWxDb3B5KCk7CiAJ
CS8vIGFuYWx5c2lzIG9mIHJlc291cmNlIGxlYWtzIG5lZWRzIGFkZGl0aW9uYWwgY29udGV4dCB3
aGlsZSBhbmFseXppbmcgdGhlIFJIUzoKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUXVhbGlmaWVk
QWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUXVhbGlmaWVkQWxsb2NhdGlv
bkV4cHJlc3Npb24uamF2YQppbmRleCA2NGM1MGI0Li5jYTEwYWRiIDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvYXN0L1F1YWxpZmllZEFsbG9jYXRpb25FeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fz
dC9RdWFsaWZpZWRBbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCkBAIC0xMTYsNyArMTE2LDcgQEAK
IAkJfQogCiAJCS8vIGFmdGVyIGhhdmluZyBhbmFseXNlZCBleGNlcHRpb25zIGFib3ZlIHN0YXJ0
IHRyYWNraW5nIG5ld2x5IGFsbG9jYXRlZCByZXNvdXJjZToKLQkJaWYgKEZha2VkVHJhY2tpbmdW
YXJpYWJsZS5pc0FueUNsb3NlYWJsZSh0aGlzLnJlc29sdmVkVHlwZSkgJiYgY3VycmVudFNjb3Bl
LmNvbXBpbGVyT3B0aW9ucygpLmFuYWx5c2VSZXNvdXJjZUxlYWtzKSB7CisJCWlmIChjdXJyZW50
U2NvcGUuY29tcGlsZXJPcHRpb25zKCkuYW5hbHlzZVJlc291cmNlTGVha3MgJiYgRmFrZWRUcmFj
a2luZ1ZhcmlhYmxlLmlzQW55Q2xvc2VhYmxlKHRoaXMucmVzb2x2ZWRUeXBlKSkgewogCQkJRmFr
ZWRUcmFja2luZ1ZhcmlhYmxlLmFuYWx5c2VDbG9zZWFibGVBbGxvY2F0aW9uKGN1cnJlbnRTY29w
ZSwgZmxvd0luZm8sIHRoaXMpOwogCQl9CiAK
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>212884</attachid>
            <date>2012-03-19 19:29:00 -0400</date>
            <delta_ts>2012-03-19 19:29:30 -0400</delta_ts>
            <desc>same patch with a regression test</desc>
            <filename>Bug_372319_v3.patch</filename>
            <type>text/plain</type>
            <size>13750</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0NvbmN1cnJlbnRCYXRj
aENvbXBpbGVyVGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIv
c3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vQ29uY3Vy
cmVudEJhdGNoQ29tcGlsZXJUZXN0LmphdmEKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAw
MDAwMC4uZmZmODVlMQotLS0gL2Rldi9udWxsCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRl
c3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdy
ZXNzaW9uL0NvbmN1cnJlbnRCYXRjaENvbXBpbGVyVGVzdC5qYXZhCkBAIC0wLDAgKzEsMjA1IEBA
CisvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKgorICogQ29weXJpZ2h0IChjKSAyMDExLCAyMDEyIEdL
IFNvZnR3YXJlIEFHIGFuZCBvdGhlcnMuCisgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHBy
b2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCisgKiBhcmUgbWFkZSBhdmFpbGFi
bGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKKyAq
IHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0
CisgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbAorICoKKyAqIENv
bnRyaWJ1dG9yczoKKyAqICAgICBTdGVwaGFuIEhlcnJtYW5uIC0gaW5pdGlhbCBBUEkgYW5kIGlt
cGxlbWVudGF0aW9uCisgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KK3BhY2thZ2Ugb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIucmVncmVzc2lvbjsKKworaW1wb3J0IGphdmEuaW8u
RmlsZTsKK2ltcG9ydCBqYXZhLmlvLlByaW50V3JpdGVyOworaW1wb3J0IGphdmEudXRpbC5NYXA7
CisKK2ltcG9ydCBqdW5pdC5mcmFtZXdvcmsuVGVzdDsKKworaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5pbnRlcm5hbC5jb21waWxlci5hc3QuRmFrZWRUcmFja2luZ1ZhcmlhYmxlOworaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5jbGFzc2ZtdC5DbGFzc0ZpbGVDb25zdGFu
dHM7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmltcGwuQ29tcGls
ZXJPcHRpb25zOworCitwdWJsaWMgY2xhc3MgQ29uY3VycmVudEJhdGNoQ29tcGlsZXJUZXN0IGV4
dGVuZHMgQmF0Y2hDb21waWxlclRlc3QgeworCQorCXB1YmxpYyBzdGF0aWMgVGVzdCBzdWl0ZSgp
IHsKKwkJcmV0dXJuIGJ1aWxkVW5pcXVlQ29tcGxpYW5jZVRlc3RTdWl0ZSh0ZXN0Q2xhc3MoKSwg
Q2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNik7CisJfQorCXB1YmxpYyBzdGF0aWMgQ2xhc3MgdGVz
dENsYXNzKCkgeworCQlyZXR1cm4gQ29uY3VycmVudEJhdGNoQ29tcGlsZXJUZXN0LmNsYXNzOwor
CX0KKwlwdWJsaWMgQ29uY3VycmVudEJhdGNoQ29tcGlsZXJUZXN0KFN0cmluZyBuYW1lKSB7CisJ
CXN1cGVyKG5hbWUpOworCX0KKworCVRocmVhZCBydW5uZXIxOworCVRocmVhZCBydW5uZXIyOwor
CisJc3RhdGljIGludCBDT1VOVCA9IDEwMDsKKwkKKwkvKiBJbnZva2UgdGhlIGNvbXBpbGVyIENP
VU5UIHRpbWVzIHRvIGluY3JlYXNlIGJ1ZyBwcm9iYWJpbGlsdHkuICovCisJcHJvdGVjdGVkIGJv
b2xlYW4gaW52b2tlQ29tcGlsZXIoUHJpbnRXcml0ZXIgb3V0LCBQcmludFdyaXRlciBlcnIsIE9i
amVjdCBleHRyYUFyZ3VtZW50cywgVGVzdENvbXBpbGF0aW9uUHJvZ3Jlc3MgY29tcGlsYXRpb25Q
cm9ncmVzcykgeworCQlib29sZWFuIHN1Y2Nlc3MgPSB0cnVlOworCQlmb3IgKGludCBqPTA7IGo8
Q09VTlQ7IGorKykgeworCQkJc3VjY2VzcyAmPSBzdXBlci5pbnZva2VDb21waWxlcihvdXQsIGVy
ciwgZXh0cmFBcmd1bWVudHMsIGNvbXBpbGF0aW9uUHJvZ3Jlc3MpOworCQl9CisJCXJldHVybiBz
dWNjZXNzOworCX0KKwkKKwkvKiBEaXNhbWJpZ3VhdGUgZmlsZSBuYW1lcyBmb3IgY29uY3VycmVu
dCB0ZXN0cyBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuICovCisJcHJvdGVjdGVkIFN0cmluZyB0ZXN0
TmFtZSgpIHsKKwkJVGhyZWFkIGN1cnJlbnQgPSBUaHJlYWQuY3VycmVudFRocmVhZCgpOworCQlT
dHJpbmcgYmFzZU5hbWUgPSBzdXBlci50ZXN0TmFtZSgpOworCQlpZiAoY3VycmVudCA9PSB0aGlz
LnJ1bm5lcjEpCisJCQlyZXR1cm4gYmFzZU5hbWUrIi1UaHJlYWQxIjsKKwkJaWYgKGN1cnJlbnQg
PT0gdGhpcy5ydW5uZXIyKQorCQkJcmV0dXJuIGJhc2VOYW1lKyItVGhyZWFkMiI7CisJCXJldHVy
biBiYXNlTmFtZTsKKwl9CisJCisJcHVibGljIHZvaWQgdGVzdEJ1ZzM3MjMxOSgpIHRocm93cyBU
aHJvd2FibGUgeworCQl0cnkgeworCQkJRmFrZWRUcmFja2luZ1ZhcmlhYmxlLlRFU1RfMzcyMzE5
ID0gdHJ1ZTsKKwkKKwkJCS8vIGV4cGVjdGVkIGVycm9yIG91dHB1dCBmb3IgcnVubmVyMiB0aW1l
cyBDT1VOVDoKKwkJCWZpbmFsIFN0cmluZ0J1ZmZlciBlcnJvck91dHB1dCA9IG5ldyBTdHJpbmdC
dWZmZXIoKTsKKwkJCWZvciAoaW50IGo9MDsgajxDT1VOVDsgaisrKQorCQkJCWVycm9yT3V0cHV0
LmFwcGVuZCgiLS0tLS0tLS0tLVxuIiArCisJCQkJCQkiMS4gRVJST1IgaW4gLS0tT1VUUFVUX0RJ
Ul9QTEFDRUhPTERFUi0tLS90ZXN0MDEvWC5qYXZhIChhdCBsaW5lIDEyKVxuIiArCisJCQkJCQki
CUZpbGVSZWFkZXIgcmVhZGVyID0gZ2V0UmVhZGVyKFwic29tZWZpbGVcIik7XG4iICsKKwkJCQkJ
CSIJICAgICAgICAgICBeXl5eXl5cbiIgKworCQkJCQkJIlBvdGVudGlhbCByZXNvdXJjZSBsZWFr
OiBcJ3JlYWRlclwnIG1heSBub3QgYmUgY2xvc2VkXG4iICsKKwkJCQkJCSItLS0tLS0tLS0tXG4i
ICsKKwkJCQkJCSIxIHByb2JsZW0gKDEgZXJyb3IpIik7CisJCisJCQkvLyBjb2xsZWN0IGV4Y2Vw
dGlvbnMgaW5kaWNhdGluZyBhIGZhaWx1cmU6CisJCQlmaW5hbCBUaHJvd2FibGVbXSB0aHJvd24g
PSBuZXcgVGhyb3dhYmxlWzJdOworCQkJCisJCQl0aGlzLnJ1bm5lcjEgPSBuZXcgVGhyZWFkKG5l
dyBSdW5uYWJsZSgpIHsKKwkJCQkJcHVibGljIHZvaWQgcnVuKCkgeworCQkJCQkJdHJ5IHsKKwkJ
CQkJCQlydW5Db25mb3JtVGVzdChuZXcgU3RyaW5nW10geworCQkJCQkJCQkib3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2xhdW5jaGluZy9Db21wb3NpdGVJZC5qYXZhIiwKKwkJCQkJCQkJIi8qKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqXG4iICsgCisJCQkJCQkJCSIgKiBDb3B5cmlnaHQgKGMpIDIwMDAs
IDIwMTIgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuXG4iICsgCisJCQkJCQkJCSIgKiBBbGwg
cmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJp
YWxzXG4iICsgCisJCQkJCQkJCSIgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1z
IG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjBcbiIgKyAKKwkJCQkJCQkJIiAqIHdo
aWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0XG4i
ICsgCisJCQkJCQkJCSIgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRt
bFxuIiArIAorCQkJCQkJCQkiICogXG4iICsgCisJCQkJCQkJCSIgKiBDb250cmlidXRvcnM6XG4i
ICsgCisJCQkJCQkJCSIgKiAgICAgSUJNIENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGlt
cGxlbWVudGF0aW9uXG4iICsgCisJCQkJCQkJCSIgKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiIg
KyAKKwkJCQkJCQkJInBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmxhdW5jaGluZztc
biIgKyAKKwkJCQkJCQkJIlxuIiArIAorCQkJCQkJCQkiaW1wb3J0IGphdmEudXRpbC5BcnJheUxp
c3Q7XG4iICsgCisJCQkJCQkJCSJcbiIgKyAKKwkJCQkJCQkJIi8qKlxuIiArIAorCQkJCQkJCQki
ICogVXRpbGl0eSBjbGFzcyBmb3IgaWQncyBtYWRlIG9mIG11bHRpcGxlIFN0cmluZ3NcbiIgKyAK
KwkJCQkJCQkJIiAqL1xuIiArIAorCQkJCQkJCQkicHVibGljIGNsYXNzIENvbXBvc2l0ZUlkIHtc
biIgKyAKKwkJCQkJCQkJIglwcml2YXRlIFN0cmluZ1tdIGZQYXJ0cztcbiIgKyAKKwkJCQkJCQkJ
IglcbiIgKyAKKwkJCQkJCQkJIglwdWJsaWMgQ29tcG9zaXRlSWQoU3RyaW5nW10gcGFydHMpIHtc
biIgKyAKKwkJCQkJCQkJIgkJZlBhcnRzPSBwYXJ0cztcbiIgKyAKKwkJCQkJCQkJIgl9XG4iICsg
CisJCQkJCQkJCSIJXG4iICsgCisJCQkJCQkJCSIJcHVibGljIHN0YXRpYyBDb21wb3NpdGVJZCBm
cm9tU3RyaW5nKFN0cmluZyBpZFN0cmluZykge1xuIiArIAorCQkJCQkJCQkiCQlBcnJheUxpc3Q8
U3RyaW5nPiBwYXJ0cz0gbmV3IEFycmF5TGlzdDxTdHJpbmc+KCk7XG4iICsgCisJCQkJCQkJCSIJ
CWludCBjb21tYUluZGV4PSBpZFN0cmluZy5pbmRleE9mKCcsJyk7XG4iICsgCisJCQkJCQkJCSIJ
CXdoaWxlIChjb21tYUluZGV4ID4gMCkge1xuIiArIAorCQkJCQkJCQkiCQkJaW50IGxlbmd0aD0g
SW50ZWdlci52YWx1ZU9mKGlkU3RyaW5nLnN1YnN0cmluZygwLCBjb21tYUluZGV4KSkuaW50VmFs
dWUoKTtcbiIgKyAKKwkJCQkJCQkJIgkJCVN0cmluZyBwYXJ0PSBpZFN0cmluZy5zdWJzdHJpbmco
Y29tbWFJbmRleCsxLCBjb21tYUluZGV4KzErbGVuZ3RoKTtcbiIgKyAKKwkJCQkJCQkJIgkJCXBh
cnRzLmFkZChwYXJ0KTtcbiIgKyAKKwkJCQkJCQkJIgkJCWlkU3RyaW5nPSBpZFN0cmluZy5zdWJz
dHJpbmcoY29tbWFJbmRleCsxK2xlbmd0aCk7XG4iICsgCisJCQkJCQkJCSIJCQljb21tYUluZGV4
PSBpZFN0cmluZy5pbmRleE9mKCcsJyk7XG4iICsgCisJCQkJCQkJCSIJCX1cbiIgKyAKKwkJCQkJ
CQkJIgkJU3RyaW5nW10gcmVzdWx0PSBwYXJ0cy50b0FycmF5KG5ldyBTdHJpbmdbcGFydHMuc2l6
ZSgpXSk7XG4iICsgCisJCQkJCQkJCSIJCXJldHVybiBuZXcgQ29tcG9zaXRlSWQocmVzdWx0KTtc
biIgKyAKKwkJCQkJCQkJIgl9XG4iICsgCisJCQkJCQkJCSIJXG4iICsgCisJCQkJCQkJCSIJQE92
ZXJyaWRlXG4iICsgCisJCQkJCQkJCSIJcHVibGljIFN0cmluZyB0b1N0cmluZygpIHtcbiIgKyAK
KwkJCQkJCQkJIgkJU3RyaW5nQnVmZmVyIGJ1Zj0gbmV3IFN0cmluZ0J1ZmZlcigpO1xuIiArCisJ
CQkJCQkJCSIJCWZvciAoaW50IGk9IDA7IGkgPCBmUGFydHMubGVuZ3RoOyBpKyspIHtcbiIgKyAK
KwkJCQkJCQkJIgkJCWJ1Zi5hcHBlbmQoZlBhcnRzW2ldLmxlbmd0aCgpKTtcbiIgKyAKKwkJCQkJ
CQkJIgkJCWJ1Zi5hcHBlbmQoJywnKTtcbiIgKyAKKwkJCQkJCQkJIgkJCWJ1Zi5hcHBlbmQoZlBh
cnRzW2ldKTtcbiIgKyAKKwkJCQkJCQkJIgkJfVxuIiArIAorCQkJCQkJCQkiCQlyZXR1cm4gYnVm
LnRvU3RyaW5nKCk7XG4iICsgCisJCQkJCQkJCSIJfVxuIiArIAorCQkJCQkJCQkiCVxuIiArIAor
CQkJCQkJCQkiCXB1YmxpYyBTdHJpbmcgZ2V0KGludCBpbmRleCkge1xuIiArIAorCQkJCQkJCQki
CQlyZXR1cm4gZlBhcnRzW2luZGV4XTtcbiIgKyAKKwkJCQkJCQkJIgl9XG4iICsgCisJCQkJCQkJ
CSIJXG4iICsgCisJCQkJCQkJCSIJcHVibGljIGludCBnZXRQYXJ0Q291bnQoKSB7XG4iICsgCisJ
CQkJCQkJCSIJCXJldHVybiBmUGFydHMubGVuZ3RoO1xuIiArIAorCQkJCQkJCQkiCX1cbiIgKyAK
KwkJCQkJCQkJIn1cbiIgKyAKKwkJCQkJCQkJIiIKKwkJCQkJCQl9LAorCQkJCQkgICAgICAgICJc
IiIgKyBPVVRQVVRfRElSICsgIEZpbGUuc2VwYXJhdG9yICsgIm9yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9sYXVuY2hpbmcvQ29tcG9zaXRlSWQuamF2YVwiIgorCQkJCSAgICAgICAgICAgICsgIiAt
MS41IC1nIC1wcmVzZXJ2ZUFsbExvY2FscyIKKwkJCQkgICAgICAgICAgICArICIgLXByb2NlZWRP
bkVycm9yIC1kIFwiIiArIE9VVFBVVF9ESVIgKyAiXCIiLAorCQkJCQkJCSIiLAorCQkJCQkJCSIi
LAorCQkJCQkJCWZhbHNlKTsKKwkJCQkJCX0gY2F0Y2ggKFRocm93YWJsZSB0KSB7CisJCQkJCQkJ
dGhyb3duWzBdID0gdDsKKwkJCQkJCX0KKwkJCQkJfQorCQkJfSk7CisJCQl0aGlzLnJ1bm5lcjIg
PSBuZXcgVGhyZWFkKG5ldyBSdW5uYWJsZSgpIHsKKwkJCQlwdWJsaWMgdm9pZCBydW4oKSB7CisJ
CQkJCXRyeSB7CisJCQkJCQkvLyBmcm9tIFJlc291cmNlTGVha1Rlc3RzLnRlc3QwNTZlKCk6CisJ
CQkJCQlNYXAgb3B0aW9ucyA9IGdldENvbXBpbGVyT3B0aW9ucygpOworCQkJCQkJb3B0aW9ucy5w
dXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9SZXBvcnRVbmNsb3NlZENsb3NlYWJsZSwgQ29tcGls
ZXJPcHRpb25zLkVSUk9SKTsKKwkJCQkJCW9wdGlvbnMucHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJ
T05fUmVwb3J0UG90ZW50aWFsbHlVbmNsb3NlZENsb3NlYWJsZSwgQ29tcGlsZXJPcHRpb25zLkVS
Uk9SKTsKKwkJCQkJCXJ1bk5lZ2F0aXZlVGVzdCgKKwkJCQkJCQluZXcgU3RyaW5nW10geworCQkJ
CQkJCQkidGVzdDAxL1guamF2YSIsCisJCQkJCQkJCSJwYWNrYWdlIHRlc3QwMTtcbiIgKworCQkJ
CQkJCQkiaW1wb3J0IGphdmEuaW8uRmlsZTtcbiIgKworCQkJCQkJCQkiaW1wb3J0IGphdmEuaW8u
RmlsZVJlYWRlcjtcbiIgKworCQkJCQkJCQkiaW1wb3J0IGphdmEuaW8uSU9FeGNlcHRpb247XG4i
ICsKKwkJCQkJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJCQkJCQkiICAgIEZpbGVSZWFk
ZXIgZ2V0UmVhZGVyKFN0cmluZyBmaWxlbmFtZSkgdGhyb3dzIElPRXhjZXB0aW9uIHtcbiIgKwor
CQkJCQkJCQkiICAgICAgICBGaWxlIGZpbGUgPSBuZXcgRmlsZShcInNvbWVmaWxlXCIpO1xuIiAr
CisJCQkJCQkJCSIgICAgICAgIEZpbGVSZWFkZXIgZmlsZVJlYWRlciA9IG5ldyBGaWxlUmVhZGVy
KGZpbGUpO1xuIiArCisJCQkJCQkJCSIgICAgICAgIHJldHVybiBmaWxlUmVhZGVyO1xuIiArIAkJ
Ly8gZG9uJ3QgY29tcGxhaW4gaGVyZSwgcGFzcyByZXNwb25zaWJpbGl0eSB0byBjYWxsZXIKKwkJ
CQkJCQkJIiAgICB9XG4iICsKKwkJCQkJCQkJIiAgICB2b2lkIGZvbygpIHRocm93cyBJT0V4Y2Vw
dGlvbiB7XG4iICsKKwkJCQkJCQkJIiAgICAgICAgRmlsZVJlYWRlciByZWFkZXIgPSBnZXRSZWFk
ZXIoXCJzb21lZmlsZVwiKTtcbiIgKworCQkJCQkJCQkiICAgICAgICBjaGFyW10gaW4gPSBuZXcg
Y2hhcls1MF07XG4iICsKKwkJCQkJCQkJIiAgICAgICAgcmVhZGVyLnJlYWQoaW4pO1xuIiArCisJ
CQkJCQkJCSIgICAgfVxuIiArCisJCQkJCQkJCSIgICAgcHVibGljIHN0YXRpYyB2b2lkIG1haW4o
U3RyaW5nW10gYXJncykgdGhyb3dzIElPRXhjZXB0aW9uIHtcbiIgKworCQkJCQkJCQkiICAgICAg
ICBuZXcgWCgpLmZvbygpO1xuIiArCisJCQkJCQkJCSIgICAgfVxuIiArCisJCQkJCQkJCSJ9XG4i
CisJCQkJCQkJfSwKKwkJCQkJICAgICAgICAiXCIiICsgT1VUUFVUX0RJUiArICBGaWxlLnNlcGFy
YXRvciArICJ0ZXN0MDEvWC5qYXZhXCIiCisJCQkJICAgICAgICAgICAgKyAiIC0xLjUgLWcgLXBy
ZXNlcnZlQWxsTG9jYWxzIC1lcnI6K3Jlc291cmNlIgorCQkJCSAgICAgICAgICAgICsgIiAtcHJv
Y2VlZE9uRXJyb3IgLWQgXCIiICsgT1VUUFVUX0RJUiArICJcIiIsCisJCQkJICAgICAgICAgICAg
IiIsCisJCQkJCQkJZXJyb3JPdXRwdXQudG9TdHJpbmcoKSwKKwkJCQkJCQlmYWxzZSk7CisJCQkJ
CX0gY2F0Y2ggKFRocm93YWJsZSB0KSB7CisJCQkJCQl0aHJvd25bMV0gPSB0OworCQkJCQl9CisJ
CQkJfQorCQkJfSk7CisJCisJCQl0aGlzLnJ1bm5lcjIuc3RhcnQoKTsKKwkJCXRoaXMucnVubmVy
MS5zdGFydCgpOworCQkJdGhpcy5ydW5uZXIxLmpvaW4oKTsKKwkJCXRoaXMucnVubmVyMi5qb2lu
KCk7CisJCQlpZiAodGhyb3duWzBdICE9IG51bGwpIHRocm93IHRocm93blswXTsKKwkJCWlmICh0
aHJvd25bMV0gIT0gbnVsbCkgdGhyb3cgdGhyb3duWzFdOworCQl9IGZpbmFsbHkgeworCQkJRmFr
ZWRUcmFja2luZ1ZhcmlhYmxlLlRFU1RfMzcyMzE5ID0gZmFsc2U7CisJCX0KKwl9Cit9CmRpZmYg
LS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlw
c2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9UZXN0QWxsLmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9UZXN0QWxsLmphdmEKaW5kZXggYjA4NWIwMi4uZGRh
NTkxNSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3Jj
L29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vVGVzdEFsbC5q
YXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1Rlc3RBbGwuamF2YQpAQCAt
OTYsNiArOTYsNyBAQAogCXNpbmNlXzFfNS5hZGQoSW50ZXJuYWxIZXhGbG9hdFRlc3QuY2xhc3Mp
OwogCXNpbmNlXzFfNS5hZGQoSmF2YWRvY1Rlc3RfMV81LmNsYXNzKTsKIAlzaW5jZV8xXzUuYWRk
KEJhdGNoQ29tcGlsZXJUZXN0LmNsYXNzKTsKKwlzaW5jZV8xXzUuYWRkKENvbmN1cnJlbnRCYXRj
aENvbXBpbGVyVGVzdC5jbGFzcyk7CiAJc2luY2VfMV81LmFkZChFeHRlcm5hbGl6ZVN0cmluZ0xp
dGVyYWxzMTVUZXN0LmNsYXNzKTsKIAlzaW5jZV8xXzUuYWRkKERlcHJlY2F0ZWQxNVRlc3QuY2xh
c3MpOwogCXNpbmNlXzFfNS5hZGQoSW5uZXJFbXVsYXRpb25UZXN0XzFfNS5jbGFzcyk7CmRpZmYg
LS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYXN0L0FsbG9jYXRpb25FeHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0
L0FsbG9jYXRpb25FeHByZXNzaW9uLmphdmEKaW5kZXggZWQ5OGQyMC4uZDc5Yzc0NyAxMDA2NDQK
LS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2FzdC9BbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YQpAQCAtODQsNyArODQsNyBAQAogCX0KIAogCS8v
IGFmdGVyIGhhdmluZyBhbmFseXNlZCBleGNlcHRpb25zIGFib3ZlIHN0YXJ0IHRyYWNraW5nIG5l
d2x5IGFsbG9jYXRlZCByZXNvdXJjZToKLQlpZiAoRmFrZWRUcmFja2luZ1ZhcmlhYmxlLmlzQW55
Q2xvc2VhYmxlKHRoaXMucmVzb2x2ZWRUeXBlKSAmJiBjdXJyZW50U2NvcGUuY29tcGlsZXJPcHRp
b25zKCkuYW5hbHlzZVJlc291cmNlTGVha3MpCisJaWYgKGN1cnJlbnRTY29wZS5jb21waWxlck9w
dGlvbnMoKS5hbmFseXNlUmVzb3VyY2VMZWFrcyAmJiBGYWtlZFRyYWNraW5nVmFyaWFibGUuaXNB
bnlDbG9zZWFibGUodGhpcy5yZXNvbHZlZFR5cGUpKQogCQlGYWtlZFRyYWNraW5nVmFyaWFibGUu
YW5hbHlzZUNsb3NlYWJsZUFsbG9jYXRpb24oY3VycmVudFNjb3BlLCBmbG93SW5mbywgdGhpcyk7
CiAKIAlpZiAodGhpcy5iaW5kaW5nLmRlY2xhcmluZ0NsYXNzLmlzTWVtYmVyVHlwZSgpICYmICF0
aGlzLmJpbmRpbmcuZGVjbGFyaW5nQ2xhc3MuaXNTdGF0aWMoKSkgewpkaWZmIC0tZ2l0IGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9GYWtlZFRyYWNraW5nVmFyaWFibGUuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRmFrZWRUcmFj
a2luZ1ZhcmlhYmxlLmphdmEKaW5kZXggNGFjNmMyZi4uMTAyZmQwMSAxMDA2NDQKLS0tIGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9GYWtlZFRyYWNraW5nVmFyaWFibGUuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Zha2Vk
VHJhY2tpbmdWYXJpYWJsZS5qYXZhCkBAIC02MCw2ICs2MCw4IEBACiAJcHJpdmF0ZSBzdGF0aWMg
ZmluYWwgaW50IFJFUE9SVEVEX1BPVEVOVElBTF9MRUFLID0gMzI7CiAJLy8gYSBsb2NhdGlvbiBp
bmRlcGVuZGVudCBkZWZpbml0aXZlIHByb2JsZW0gaGFzIGJlZW4gcmVwb3J0ZWQgYWdhaW5zdCB0
aGlzIHJlc291cmNlOgogCXByaXZhdGUgc3RhdGljIGZpbmFsIGludCBSRVBPUlRFRF9ERUZJTklU
SVZFX0xFQUsgPSA2NDsKKwkKKwlwdWJsaWMgc3RhdGljIGJvb2xlYW4gVEVTVF8zNzIzMTkgPSBm
YWxzZTsgLy8gc2VlIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy8zNzIzMTkKIAogCS8qKgogCSAq
IEJpdHNldCBvZiB7QGxpbmsgI0NMT1NFX1NFRU59LCB7QGxpbmsgI1NIQVJFRF9XSVRIX09VVFNJ
REV9LCB7QGxpbmsgI09XTkVEX0JZX09VVFNJREV9LCB7QGxpbmsgI0NMT1NFRF9JTl9ORVNURURf
TUVUSE9EfSwge0BsaW5rICNSRVBPUlRFRF9FWFBMSUNJVF9DTE9TRX0sIHtAbGluayAjUkVQT1JU
RURfUE9URU5USUFMX0xFQUt9IGFuZCB7QGxpbmsgI1JFUE9SVEVEX0RFRklOSVRJVkVfTEVBS30u
CkBAIC01MjgsNiArNTMwLDkgQEAKIAkgKiBAcmV0dXJuIG9uZSBvZiB0aGUgY29uc3RhbnRzIEZs
b3dJbmZvLntOVUxMLFBPVEVOVElBTExZX05VTEwsUE9URU5USUFMTFlfTk9OX05VTEwsTk9OX05V
TEx9LgogCSAqLwogCXByaXZhdGUgaW50IGdldE51bGxTdGF0dXNBZ2dyZXNzaXZlbHkoTG9jYWxW
YXJpYWJsZUJpbmRpbmcgbG9jYWwsIEZsb3dJbmZvIGZsb3dJbmZvKSB7CisJCWlmIChmbG93SW5m
byA9PSBGbG93SW5mby5ERUFEX0VORCkgeworCQkJcmV0dXJuIEZsb3dJbmZvLlVOS05PV047CisJ
CX0KIAkJaW50IHJlYWNoTW9kZSA9IGZsb3dJbmZvLnJlYWNoTW9kZSgpOwogCQlpbnQgc3RhdHVz
ID0gMDsKIAkJdHJ5IHsKQEAgLTUzNSw2ICs1NDAsMTEgQEAKIAkJCWlmIChyZWFjaE1vZGUgIT0g
Rmxvd0luZm8uUkVBQ0hBQkxFKQogCQkJCWZsb3dJbmZvLnRhZ0JpdHMgJj0gfkZsb3dJbmZvLlVO
UkVBQ0hBQkxFOwogCQkJc3RhdHVzID0gZmxvd0luZm8ubnVsbFN0YXR1cyhsb2NhbCk7CisJCQlp
ZiAoVEVTVF8zNzIzMTkpIHsgLy8gc2VlIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy8zNzIzMTkK
KwkJCQl0cnkgeworCQkJCQlUaHJlYWQuc2xlZXAoNSk7IC8vIGluY3JlYXNlIHByb2JhYmlsaXR5
IG9mIGNvbmN1cnJlbmN5IGJ1ZworCQkJCX0gY2F0Y2ggKEludGVycnVwdGVkRXhjZXB0aW9uIGUp
IHsgLyogbm9wICovIH0KKwkJCX0KIAkJfSBmaW5hbGx5IHsKIAkJCS8vIHJlc2V0CiAJCQlmbG93
SW5mby50YWdCaXRzIHw9IHJlYWNoTW9kZTsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTG9jYWxE
ZWNsYXJhdGlvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Mb2NhbERlY2xhcmF0aW9uLmphdmEKaW5kZXgg
YjJhOWIzMC4uMzkxNmQ2YyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Mb2NhbERlY2xhcmF0aW9u
LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Mb2NhbERlY2xhcmF0aW9uLmphdmEKQEAgLTgwLDggKzgw
LDggQEAKIAlGbG93SW5mbyBwcmVJbml0SW5mbyA9IG51bGw7CiAJYm9vbGVhbiBzaG91bGRBbmFs
eXNlUmVzb3VyY2UgPSB0aGlzLmJpbmRpbmcgIT0gbnVsbCAKIAkJCSYmIGZsb3dJbmZvLnJlYWNo
TW9kZSgpID09IEZsb3dJbmZvLlJFQUNIQUJMRQotCQkJJiYgRmFrZWRUcmFja2luZ1ZhcmlhYmxl
LmlzQW55Q2xvc2VhYmxlKHRoaXMuaW5pdGlhbGl6YXRpb24ucmVzb2x2ZWRUeXBlKQotCQkJJiYg
Y3VycmVudFNjb3BlLmNvbXBpbGVyT3B0aW9ucygpLmFuYWx5c2VSZXNvdXJjZUxlYWtzOworCQkJ
JiYgY3VycmVudFNjb3BlLmNvbXBpbGVyT3B0aW9ucygpLmFuYWx5c2VSZXNvdXJjZUxlYWtzCisJ
CQkmJiBGYWtlZFRyYWNraW5nVmFyaWFibGUuaXNBbnlDbG9zZWFibGUodGhpcy5pbml0aWFsaXph
dGlvbi5yZXNvbHZlZFR5cGUpOwogCWlmIChzaG91bGRBbmFseXNlUmVzb3VyY2UpIHsKIAkJcHJl
SW5pdEluZm8gPSBmbG93SW5mby51bmNvbmRpdGlvbmFsQ29weSgpOwogCQkvLyBhbmFseXNpcyBv
ZiByZXNvdXJjZSBsZWFrcyBuZWVkcyBhZGRpdGlvbmFsIGNvbnRleHQgd2hpbGUgYW5hbHl6aW5n
IHRoZSBSSFM6CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1F1YWxpZmllZEFsbG9jYXRpb25FeHBy
ZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1F1YWxpZmllZEFsbG9jYXRpb25FeHByZXNzaW9uLmph
dmEKaW5kZXggNjRjNTBiNC4uY2ExMGFkYiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9RdWFsaWZp
ZWRBbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUXVhbGlmaWVkQWxs
b2NhdGlvbkV4cHJlc3Npb24uamF2YQpAQCAtMTE2LDcgKzExNiw3IEBACiAJCX0KIAogCQkvLyBh
ZnRlciBoYXZpbmcgYW5hbHlzZWQgZXhjZXB0aW9ucyBhYm92ZSBzdGFydCB0cmFja2luZyBuZXds
eSBhbGxvY2F0ZWQgcmVzb3VyY2U6Ci0JCWlmIChGYWtlZFRyYWNraW5nVmFyaWFibGUuaXNBbnlD
bG9zZWFibGUodGhpcy5yZXNvbHZlZFR5cGUpICYmIGN1cnJlbnRTY29wZS5jb21waWxlck9wdGlv
bnMoKS5hbmFseXNlUmVzb3VyY2VMZWFrcykgeworCQlpZiAoY3VycmVudFNjb3BlLmNvbXBpbGVy
T3B0aW9ucygpLmFuYWx5c2VSZXNvdXJjZUxlYWtzICYmIEZha2VkVHJhY2tpbmdWYXJpYWJsZS5p
c0FueUNsb3NlYWJsZSh0aGlzLnJlc29sdmVkVHlwZSkpIHsKIAkJCUZha2VkVHJhY2tpbmdWYXJp
YWJsZS5hbmFseXNlQ2xvc2VhYmxlQWxsb2NhdGlvbihjdXJyZW50U2NvcGUsIGZsb3dJbmZvLCB0
aGlzKTsKIAkJfQogCg==
</data>

          </attachment>
      

    </bug>

</bugzilla>