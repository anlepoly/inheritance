<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>436486</bug_id>
          
          <creation_ts>2014-06-03 12:09:00 -0400</creation_ts>
          <short_desc>AnnotationDiscoveryVisitor.resolveAnnotations causes unhappy processing order</short_desc>
          <delta_ts>2015-04-07 13:47:39 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>APT</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          <see_also>https://git.eclipse.org/c/tracecompass/org.eclipse.tracecompass.git/commit/?id=19f1930ea17b91e8f237ab287c69837ed25827df</see_also>
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.5 M5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Stephan Herrmann">stephan.herrmann</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>jarthana</cc>
    
    <cc>marc-andre.laperle</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2412183</commentid>
    <comment_count>0</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-06-03 12:09:18 -0400</bug_when>
    <thetext>From bug 421601 comment 6:

It seems that the following call stack is disturbing evaluation of null annotations:

        at org.eclipse.jdt.internal.compiler.ast.ASTNode.resolveAnnotations(ASTNode.java:776)  
        at org.eclipse.jdt.internal.compiler.ast.ASTNode.resolveAnnotations(ASTNode.java:767)  
        at org.eclipse.jdt.internal.compiler.apt.dispatch.AnnotationDiscoveryVisitor.resolveAnnotations(AnnotationDiscoveryVisitor.java:233)                                                  
        at org.eclipse.jdt.internal.compiler.apt.dispatch.AnnotationDiscoveryVisitor.visit(AnnotationDiscoveryVisitor.java:217)                                                               
        at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse(TypeDeclaration.java:1338)                                                                                          
        at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse(CompilationUnitDeclaration.java:745)                                                                     
        at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse(CompilationUnitDeclaration.java:706)                                                                     
        at org.eclipse.jdt.internal.compiler.apt.dispatch.RoundEnvImpl.&lt;init&gt;(RoundEnvImpl.java:58)                                                                                           
        at org.eclipse.jdt.internal.compiler.apt.dispatch.BaseAnnotationProcessorManager.processAnnotations(BaseAnnotationProcessorManager.java:148)                                          
        at org.eclipse.jdt.internal.compiler.Compiler.processAnnotations(Compiler.java:818)    
        at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:434)               
        at org.eclipse.jdt.internal.compiler.batch.Main.performCompilation(Main.java:4129)     
        at org.eclipse.jdt.internal.compiler.batch.Main.compile(Main.java:1694)                
        at org.eclipse.jdt.internal.compiler.batch.Main.main(Main.java:1405)                   

Normally in the compiler, ASTNode.resolveAnnotations would be invoked from STB.getAnnotationTagBits() and during this call we would also invoke STB.evaluateNullAnnotations().

With APT in the loop, however, ASTNode.resolveAnnotations sets TagBits.AnnotationResolved and whenever STB.getAnnotationTagBits() is called, we do nothing, so STB.evaluateNullAnnotations() is never invoked.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2412190</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-06-03 12:17:19 -0400</bug_when>
    <thetext>Bug 436486 comment 9 has a test project - but fails to reproduce as of yet ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2443303</commentid>
    <comment_count>2</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-08-26 01:43:34 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #1)
&gt; Bug 436486 comment 9 has a test project - but fails to reproduce as of yet
&gt; ...

Correction - it is bug 421601 comment 9.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2496851</commentid>
    <comment_count>3</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-12-14 23:31:35 -0500</bug_when>
    <thetext>*** Bug 453474 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2497244</commentid>
    <comment_count>4</comment_count>
      <attachid>249442</attachid>
    <who name="Marc-Andre Laperle">marc-andre.laperle</who>
    <bug_when>2014-12-15 13:46:33 -0500</bug_when>
    <thetext>Created attachment 249442
Test java source file</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2497245</commentid>
    <comment_count>5</comment_count>
    <who name="Marc-Andre Laperle">marc-andre.laperle</who>
    <bug_when>2014-12-15 13:47:54 -0500</bug_when>
    <thetext>(Copied from bug 453474)

I have managed to reproduce the bug on the command line.

Using this command produces the expected warning for the attached source file:

java -cp &quot;org.eclipse.jdt.annotation-1.1.0.v20140129-1625.jar:org.eclipse.jdt.core_3.11.0.v20141209-1931.jar&quot; org.eclipse.jdt.internal.compiler.batch.Main Test.java -1.7 -warn:+nullAnnot,+nullUncheckedConversion
...
Null type safety: The expression of type &apos;Integer&apos; needs unchecked conversion to conform to &apos;@NonNull Integer&apos;

But when I add the org.eclipse.jdt.compiler.apt plugin to the classpath (which is the case when using Tycho), it doesn&apos;t generate a warning.

java -cp &quot;org.eclipse.jdt.compiler.apt_1.1.100.v20141106-0532.jar:org.eclipse.jdt.annotation-1.1.0.v20140129-1625.jar:org.eclipse.jdt.core_3.11.0.v20141209-1931.jar&quot; org.eclipse.jdt.internal.compiler.batch.Main Test.java -1.7 -warn:+nullAnnot,+nullUncheckedConversion</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2497361</commentid>
    <comment_count>6</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-12-16 01:12:57 -0500</bug_when>
    <thetext>Stephan, at the moment I can think of two ways we can address this:

1. Introduce a new bit to mark that a type has not been null-analyzed. This appears to be innocuous cost being just an extra bit (!), but who knows what&apos;s lurking here.

2. In the compilation process, run annotation process after compilation units have been processed by the compiler. Again, don&apos;t yet know what the implications are.

Stephan, what do you think?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2497838</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-12-16 17:53:34 -0500</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #6)
&gt; Stephan, at the moment I can think of two ways we can address this:
&gt; 
&gt; 1. Introduce a new bit to mark that a type has not been null-analyzed. This
&gt; appears to be innocuous cost being just an extra bit (!), but who knows
&gt; what&apos;s lurking here.
&gt; 
&gt; 2. In the compilation process, run annotation process after compilation
&gt; units have been processed by the compiler. Again, don&apos;t yet know what the
&gt; implications are.
&gt; 
&gt; Stephan, what do you think?

Have you seen the proposed change in https://git.eclipse.org/r/#/c/38086/ ?

It looks quite simple to me.

We could achieve the same effect by pushing the call evaluateNullAnnotations() into ASTNode.resolveAnnotations(BlockScope, Annotation[], Binding), which looks even cleaner to me. The relevant tests seem to be happy with that change.

Makes sense? 

I was pondering whether doing more in this situation could be dangerous - trying to resolve/evaluate things before we&apos;re ready for this (see bug 444024 comment 10 for a problem in that category).

Is my understanding correct, that processAnnotations() always happens after beginToCompile() (which includes completeTypeBindings())? If so, we should be safe - see that bug 444024 was about internal ordering *within* the completeTypeBindings() phase.

This is basically just thinking aloud, at face value I don&apos;t see much risk.

Jay, could you think of an easy way to generally enable apt during our normal compiler tests - just to give us additional evidence of non-interference?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2497877</commentid>
    <comment_count>8</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-12-16 23:23:29 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #7)
&gt; Have you seen the proposed change in https://git.eclipse.org/r/#/c/38086/ ?

As a matter of fact, I had missed that. Yes, the fix looks simple. I guess we can even remove the ASTNode.resolveAnnotations(...) call in the AnnotationDiscoveryVisitor, if we want to go with this. But as you said, pulling evaluateNullAnnotations() into resolveAnnotations indeed looks cleaner.
 
I agree with your other points as well.

&gt; Jay, could you think of an easy way to generally enable apt during our
&gt; normal compiler tests - just to give us additional evidence of
&gt; non-interference?

I will see what it takes. I guess it should not take much time.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2498989</commentid>
    <comment_count>9</comment_count>
      <attachid>249543</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-12-19 03:35:13 -0500</bug_when>
    <thetext>Created attachment 249543
Fix + Test

Patch suggested by Marc + regression test utilizing the new framework provisions (bug 455427, comment #7)

Stephan, you suggestion about moving evaluateNullAnnotations into resolveAnnotations sounds good, though might involve some moving things around etc. Feel free to make those changes and release. I will be lot more comfortable with you doing that as I have no idea what&apos;s inside evaluateNullAnnotations() method :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2499198</commentid>
    <comment_count>10</comment_count>
    <who name="Marc-Andre Laperle">marc-andre.laperle</who>
    <bug_when>2014-12-19 10:09:20 -0500</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #9)
&gt; Created attachment 249543 [details]
&gt; Fix + Test
&gt; 
&gt; Patch suggested by Marc + regression test utilizing the new framework
&gt; provisions (bug 455427, comment #7)

Do all tests pass with this? The patch I pushed on Gerrit had test failures reported from Hudson.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2499293</commentid>
    <comment_count>11</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-12-19 12:07:16 -0500</bug_when>
    <thetext>(In reply to Marc-Andre Laperle from comment #10)
&gt; Do all tests pass with this? The patch I pushed on Gerrit had test failures
&gt; reported from Hudson.

I only ran the compiler regression tests at 1.8 and they all passed. Let&apos;s find out what happens:   https://git.eclipse.org/r/38583</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2499435</commentid>
    <comment_count>12</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-12-19 19:46:02 -0500</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #9)
&gt; Stephan, you suggestion about moving evaluateNullAnnotations into
&gt; resolveAnnotations sounds good, though might involve some moving things
&gt; around etc. Feel free to make those changes and release.

I can do that, sure. I should be able to get to this like on Monday.

&gt; I will be lot more
&gt; comfortable with you doing that as I have no idea what&apos;s inside
&gt; evaluateNullAnnotations() method :)

This method _should_ be really simple: just evaluate the default nullness that applies at the current scope.
Made difficult mainly by:
- where do we find the responsible annotation (here? outer type? package?)?
- are we in 1.7- or 1.8 mode (different @NNBD, with more or less details). 
- reporting redundant or missing @NNBD (if configured)
Just trying to shed some light ...

Actually, the change I experimented with was a two-liner.

Nevermind, I&apos;ll do it ... :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2500181</commentid>
    <comment_count>13</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-12-23 04:27:29 -0500</bug_when>
    <thetext>Released for 4.5 M5 via commit 29f4739da22539e75a2d7ec3c39641dd2a5bf473

Clients needing to resolveAnnotations() no longer need to call getAnnotationTagBits() just for the sake of its side effects (hence no changes required in AnnotationDiscoveryVisitor).

OTOH, in TypeDeclaration.resolve() we had calls to both methods, of which the first was completely redundant - removed that code block.

I also added another test from comment 4.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2500317</commentid>
    <comment_count>14</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-12-23 11:32:02 -0500</bug_when>
    <thetext>I missed to test this patch against the test from  Bug 437414, result: 
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.evaluateNullAnnotations(SourceTypeBinding.java:2015)
	at org.eclipse.jdt.internal.compiler.ast.ASTNode.resolveAnnotations(ASTNode.java:698)
	at org.eclipse.jdt.internal.compiler.apt.dispatch.AnnotationDiscoveryVisitor.resolveAnnotations(AnnotationDiscoveryVisitor.java:233)
	at org.eclipse.jdt.internal.compiler.apt.dispatch.AnnotationDiscoveryVisitor.visit(AnnotationDiscoveryVisitor.java:217)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse(TypeDeclaration.java:1331)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse(CompilationUnitDeclaration.java:748)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.traverse(CompilationUnitDeclaration.java:709)
	at org.eclipse.jdt.internal.compiler.apt.dispatch.RoundEnvImpl.&lt;init&gt;(RoundEnvImpl.java:59)
	at org.eclipse.jdt.internal.compiler.apt.dispatch.BaseAnnotationProcessorManager.processAnnotations(BaseAnnotationProcessorManager.java:148)
	at org.eclipse.jdt.internal.apt.pluggable.core.dispatch.IdeAnnotationProcessorManager.processAnnotations(IdeAnnotationProcessorManager.java:134)
	at org.eclipse.jdt.internal.compiler.Compiler.processAnnotations(Compiler.java:836)
	at org.eclipse.jdt.internal.compiler.Compiler.processCompiledUnits(Compiler.java:543)
	at org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:453)
	
I&apos;ll add the necessary protection via this bug.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2500347</commentid>
    <comment_count>15</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-12-23 13:39:51 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #14)
&gt; I&apos;ll add the necessary protection via this bug.

Protection temporarily released via commit dbdde44f24ace4ee47bccce2cfe484eeeb8013f3

Discussion to be continued in bug 437414.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2504053</commentid>
    <comment_count>16</comment_count>
    <who name="Marc-Andre Laperle">marc-andre.laperle</who>
    <bug_when>2015-01-09 16:45:25 -0500</bug_when>
    <thetext>I tested the nightly build (N20150108-2000) and it fixes the problem both in my small test project (bug 453474) and my real environment. Thank you! Is there any chance that this fix will be applied to Luna SR2? (and I assume the fix for bug 437414 would also need to be applied as well)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2504263</commentid>
    <comment_count>17</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-01-12 00:17:42 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #15)
&gt; (In reply to Stephan Herrmann from comment #14)
&gt; &gt; I&apos;ll add the necessary protection via this bug.
&gt; 
&gt; Protection temporarily released via commit
&gt; dbdde44f24ace4ee47bccce2cfe484eeeb8013f3
&gt; 
&gt; Discussion to be continued in bug 437414.

For cross reference, this was reverted via 

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=4b2447f980b1f004d5d76b9cf416fd4398082a5b

Also marking as verified as Marc has acknowledged.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2511159</commentid>
    <comment_count>18</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2015-01-28 03:21:47 -0500</bug_when>
    <thetext>Verified for 4.5 M5 using I20150127-0900 build</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2543014</commentid>
    <comment_count>19</comment_count>
    <who name="Eclipse Genie">genie</who>
    <bug_when>2015-04-07 11:31:34 -0400</bug_when>
    <thetext>New Gerrit change created: https://git.eclipse.org/r/45393</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2543019</commentid>
    <comment_count>20</comment_count>
    <who name="Marc-Andre Laperle">marc-andre.laperle</who>
    <bug_when>2015-04-07 11:34:01 -0400</bug_when>
    <thetext>(In reply to Eclipse Genie from comment #19)
&gt; New Gerrit change created: https://git.eclipse.org/r/45393

Please ignore, this is a workaround in our code base.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2543073</commentid>
    <comment_count>21</comment_count>
    <who name="Eclipse Genie">genie</who>
    <bug_when>2015-04-07 13:47:39 -0400</bug_when>
    <thetext>Gerrit change https://git.eclipse.org/r/45393 was merged to [master].
Commit: http://git.eclipse.org/c/tracecompass/org.eclipse.tracecompass.git/commit/?id=19f1930ea17b91e8f237ab287c69837ed25827df</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>249442</attachid>
            <date>2014-12-15 13:46:00 -0500</date>
            <delta_ts>2014-12-15 13:46:33 -0500</delta_ts>
            <desc>Test java source file</desc>
            <filename>Test.java</filename>
            <type>text/x-java</type>
            <size>223</size>
            <attacher name="Marc-Andre Laperle">marc-andre.laperle</attacher>
            
              <data encoding="base64">cGFja2FnZSB0ZXN0TnVsbEFubm90YXRpb25zOwoKaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5hbm5v
dGF0aW9uLk5vbk51bGxCeURlZmF1bHQ7CgpATm9uTnVsbEJ5RGVmYXVsdApwdWJsaWMgY2xhc3Mg
VGVzdCB7CgoJcHVibGljIHN0YXRpYyBmaW5hbCBUZXN0IHQgPSBuZXcgVGVzdChJbnRlZ2VyLnZh
bHVlT2YoMCkpOwoKCXB1YmxpYyBUZXN0KEludGVnZXIgaW50ZWdlcikgewoJCQoJfQp9Cg==
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>249543</attachid>
            <date>2014-12-19 03:35:00 -0500</date>
            <delta_ts>2014-12-19 03:35:13 -0500</delta_ts>
            <desc>Fix + Test</desc>
            <filename>Bug-436486.patch</filename>
            <type>text/plain</type>
            <size>2167</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMAojUCBvcmcuZWNsaXBzZS5qZHQuY29tcGls
ZXIuYXB0CmRpZmYgLS1naXQgc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
cHQvZGlzcGF0Y2gvQW5ub3RhdGlvbkRpc2NvdmVyeVZpc2l0b3IuamF2YSBzcmMvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9kaXNwYXRjaC9Bbm5vdGF0aW9uRGlzY292ZXJ5
VmlzaXRvci5qYXZhCmluZGV4IGRmZjg1OTYuLjgxOTY5MDYgMTAwNjQ0Ci0tLSBzcmMvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9kaXNwYXRjaC9Bbm5vdGF0aW9uRGlzY292
ZXJ5VmlzaXRvci5qYXZhCisrKyBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FwdC9kaXNwYXRjaC9Bbm5vdGF0aW9uRGlzY292ZXJ5VmlzaXRvci5qYXZhCkBAIC0xOCw1ICsx
OCw0IEBACiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFwdC5tb2Rl
bC5GYWN0b3J5OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hcHQu
dXRpbC5NYW55VG9NYW55OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxl
ci5hc3QuQVNUTm9kZTsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
YXN0LkFic3RyYWN0TWV0aG9kRGVjbGFyYXRpb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0Lmlu
dGVybmFsLmNvbXBpbGVyLmFzdC5Bbm5vdGF0aW9uOwpAQCAtMjMxLDUgKzIzMCw1IEBACiAJCWJv
b2xlYW4gb2xkID0gc2NvcGUuaW5zaWRlVHlwZUFubm90YXRpb247CiAJCXNjb3BlLmluc2lkZVR5
cGVBbm5vdGF0aW9uID0gdHJ1ZTsKLQkJQVNUTm9kZS5yZXNvbHZlQW5ub3RhdGlvbnMoc2NvcGUs
IGFubm90YXRpb25zLCBjdXJyZW50QmluZGluZyk7CisJCWN1cnJlbnRCaW5kaW5nLmdldEFubm90
YXRpb25UYWdCaXRzKCk7CiAJCXNjb3BlLmluc2lkZVR5cGVBbm5vdGF0aW9uID0gb2xkOwogCQlF
bGVtZW50SW1wbCBlbGVtZW50ID0gKEVsZW1lbnRJbXBsKSBfZmFjdG9yeS5uZXdFbGVtZW50KGN1
cnJlbnRCaW5kaW5nKTsKI1Agb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIKZGlm
ZiAtLWdpdCBzcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lv
bi9OdWxsQW5ub3RhdGlvblRlc3QuamF2YSBzcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
Y29tcGlsZXIvcmVncmVzc2lvbi9OdWxsQW5ub3RhdGlvblRlc3QuamF2YQppbmRleCA5OTEzOWFk
Li5jZmIxZjdjIDEwMDY0NAotLS0gc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBp
bGVyL3JlZ3Jlc3Npb24vTnVsbEFubm90YXRpb25UZXN0LmphdmEKKysrIHNyYy9vcmcvZWNsaXBz
ZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxBbm5vdGF0aW9uVGVzdC5q
YXZhCkBAIC03OTEwLDMgKzc5MTAsMjQgQEAKIAkJIi0tLS0tLS0tLS1cbiIpOwogfQorLy8gaHR0
cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQzNjQ4NgorcHVibGlj
IHZvaWQgdGVzdF9udWxsX3dpdGhfYXB0KCkgeworCWJvb2xlYW4gYXB0ID0gdGhpcy5lbmFibGVB
UFQ7CisJdGhpcy5lbmFibGVBUFQgPSB0cnVlOworCU1hcCBjdXN0b21PcHRpb25zID0gZ2V0Q29t
cGlsZXJPcHRpb25zKCk7CisJY3VzdG9tT3B0aW9ucy5wdXQoSmF2YUNvcmUuQ09NUElMRVJfUEJf
TUlTU0lOR19OT05OVUxMX0JZX0RFRkFVTFRfQU5OT1RBVElPTiwgSmF2YUNvcmUuV0FSTklORyk7
CisJY3VzdG9tT3B0aW9ucy5wdXQoSmF2YUNvcmUuQ09NUElMRVJfUEJfVU5VU0VEX1dBUk5JTkdf
VE9LRU4sIEphdmFDb3JlLkVSUk9SKTsKKwlydW5Db25mb3JtVGVzdFdpdGhMaWJzKAorCQluZXcg
U3RyaW5nW10geworCQkJIk51bGxXYXJuLmphdmEiLAorCQkJIkBTdXBwcmVzc1dhcm5pbmdzKFwi
bnVsbFwiKVxuIiArIAorCQkJInB1YmxpYyBjbGFzcyBOdWxsV2FybiB7XG4iICsgCisJCQkiXG4i
ICsgCisJCQkiICAgIC8vIFNvbWUgY29kZVxuIiArIAorCQkJIlxuIiArIAorCQkJIn1cbiIKKwkJ
fSwKKwkJY3VzdG9tT3B0aW9ucywKKwkJIiIpOworCXRoaXMuZW5hYmxlQVBUID0gYXB0OworfQog
fQ==
</data>

          </attachment>
      

    </bug>

</bugzilla>