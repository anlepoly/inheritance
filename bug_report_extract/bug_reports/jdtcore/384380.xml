<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>384380</bug_id>
          
          <creation_ts>2012-07-05 11:28:00 -0400</creation_ts>
          <short_desc>[compiler][null] False positive on a  Potential null pointer access  after a continue</short_desc>
          <delta_ts>2013-04-30 07:34:29 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.2</version>
          <rep_platform>PC</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.3 M7</target_milestone>
          
          <blocked>386665</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Nicolas Something">pathogenyx</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>jarthana</cc>
    
    <cc>manpalat</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2133308</commentid>
    <comment_count>0</comment_count>
    <who name="Nicolas Something">pathogenyx</who>
    <bug_when>2012-07-05 11:28:44 -0400</bug_when>
    <thetext>Build Identifier: &quot;Version: Juno Release Build id: 20120614-1722&quot; &quot;Version: Indigo Service Release 2 Build id: 20120216-1857&quot;

In specific conditions, in a loop, there&apos;s a false positive &quot;Potential null pointer access&quot; on a variable, even after the variable had been excluded by a &quot;continue&quot; when null, and that variable is &apos;final&apos;.

	for (final Container c : list)
	{
		if(c == null)
			continue; 
	
		// here a specific try catch + for block 
	
		c.property += 1; // &quot;Potential null pointer access: The variable c may be null at this location&quot;
	}

While it could be classified as a &quot;non-blocking&quot; bug in Indigo, when enabling the bright new Juno&apos;s Null analysis features, Eclipse advises you to set the &quot;Potential null pointer access&quot; as Errors, thus making such false positives blocking compilation. It can be set back on Warning but you looses the advantages of a strict checking.


Reproducible: Always

Steps to Reproduce:
See the test case file I&apos;ll join</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2133311</commentid>
    <comment_count>1</comment_count>
      <attachid>218343</attachid>
    <who name="Nicolas Something">pathogenyx</who>
    <bug_when>2012-07-05 11:30:26 -0400</bug_when>
    <thetext>Created attachment 218343
Test case illustrating the bug</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2133464</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-07-05 17:58:05 -0400</bug_when>
    <thetext>Thanks for the test.

Interestingly this works OK with 3.6.1 but fails with 3.6.2.

I&apos;ll take a look.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2133471</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-07-05 18:20:08 -0400</bug_when>
    <thetext>This bug got introduced by the fix for bug 332637 (3.7 and 3.6.2)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2133881</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-07-06 15:58:54 -0400</bug_when>
    <thetext>I wanted to add that until we fix this bug, this is an example where

  @SuppressWarnings(&quot;null&quot;) /*see https://bugs.eclipse.org/384380*/
  Container c

makes sense - in conjunction with 

  [x] Suppress optional errors with &apos;@SuppressWarnings&apos;

Not beautiful, but better than having to globally turn off/down analysis.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2143960</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-08-01 11:18:54 -0400</bug_when>
    <thetext>To be investigated once the fix in bug 383690 is released.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2144364</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-08-02 10:26:57 -0400</bug_when>
    <thetext>(In reply to comment #5)
&gt; To be investigated once the fix in bug 383690 is released.

I meant to say bug 345305, but the issue is only mildly related, the fix for bug 345305 doesn&apos;t seem to help.

In this bug I see:

(1) initially the state for &apos;c&apos; is correctly 1010 (def.nn)

(2) in ForStatement.analyseCode() the following statement merges this 1010 with 0000 to 0010:

    loopbackFlowInfo.mergedWith(actionInfo.unconditionalCopy());

(3) immediately after, the loopbackFlowInfo is merged again inside ExceptionHandlingFlowContext.recordHandlingException(), again with 0000.

If operations (2) &amp; (3) would keep the 1010 state the bug would not occur.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2144370</commentid>
    <comment_count>7</comment_count>
      <attachid>219487</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-08-02 10:36:32 -0400</bug_when>
    <thetext>Created attachment 219487
experimental patch

This patch illustrates how the correct behavior for this test could be forced, but it causes many regressions in other tests...

Investigation to be continued at a later point in time.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2246447</commentid>
    <comment_count>8</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-04-21 08:01:46 -0400</bug_when>
    <thetext>The problem was actually caused before the location modified in attachment 219487:
Bug 332637 assumed that the initsOnException are precise, which they are not when the try itself is nested inside a loop.
This means that the fix in bug 332637 is actually incomplete, for which I&apos;ve filed bug 406160 to follow-up.

For the current issue it helps if we just distinguish the cases of immediate vs. deferred checking.
In the latter case we fall back to the approach before bug 332637, which brings back the upstream null info.
This part must be revisited once we have a fix for bug 406160, but for Kepler this is the best compromise I can see.

In preparation for the fix I crafted a separate commit containing only a few refactorings, no semantic changes.
We have two big, mostly redundant code blocks inside TryStatement.analyseCode() which were a pain regarding double maintenance
by which we&apos;ve been hit several times before. The refactorings are a start at reducing this redundancy.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2246448</commentid>
    <comment_count>9</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-04-21 08:05:53 -0400</bug_when>
    <thetext>Released for 4.3 M7 via these commits:
- refactoring commit 2afe0ff8ea6baebe3984eac1cae395cec750c15a
- test &amp; fix commit 39dfb84707f2e819cbc1bd0e286b8bf17da8d99c</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2250237</commentid>
    <comment_count>10</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2013-04-30 03:06:14 -0400</bug_when>
    <thetext>Verify for 4.3M7 Build id: I20130428-2000</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2250240</commentid>
    <comment_count>11</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2013-04-30 03:07:57 -0400</bug_when>
    <thetext>(In reply to comment #10) 
Verified for 4.3 M7 Build id: I20130428-2000</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>218343</attachid>
            <date>2012-07-05 11:30:00 -0400</date>
            <delta_ts>2012-07-05 11:32:02 -0400</delta_ts>
            <desc>Test case illustrating the bug</desc>
            <filename>Test.java</filename>
            <type>text/plain</type>
            <size>1117</size>
            <attacher name="Nicolas Something">pathogenyx</attacher>
            
              <data encoding="base64">cHVibGljIGNsYXNzIFRlc3Qgew0KDQoJcHVibGljIHN0YXRpYyBjbGFzcyBDb250YWluZXJ7DQoJ
CXB1YmxpYyBpbnQgcHJvcGVydHk7DQoJfQ0KDQoJcHVibGljIHN0YXRpYyBjbGFzcyBDdXN0b21F
eGNlcHRpb24gZXh0ZW5kcyBFeGNlcHRpb24gew0KCQlwcml2YXRlIHN0YXRpYyBmaW5hbCBsb25n
CSBzZXJpYWxWZXJzaW9uVUlECT0gMUw7DQoJfQ0KDQoJcHVibGljIHN0YXRpYyB2b2lkIGFub3Ro
ZXJNZXRob2QoKSB0aHJvd3MgQ3VzdG9tRXhjZXB0aW9uIHsNCgkJLy8gYWN0dWFsbHkgdGhyb3dp
bmcgb3Igbm90IHRoZSBleGNlcHRpb24gaXMgaXJyZWxldmFudCBoZXJlDQoJfQ0KDQoJcHVibGlj
IHN0YXRpYyB2b2lkIG1ldGhvZChmaW5hbCBqYXZhLnV0aWwuTGlzdDxDb250YWluZXI+IGxpc3Qp
IHsNCg0KCQlmb3IgKGZpbmFsIENvbnRhaW5lciBjIDogbGlzdCkNCgkJew0KCQkJaWYoYyA9PSBu
dWxsKQ0KCQkJCWNvbnRpbnVlOyAvLyByZXR1cm4gb3IgYnJlYWssIGFyZSBmaW5lIHRob3VnaA0K
DQoJCQkvLyB3aXRob3V0IHRoaXMgdHJ5LWNhdGNoK2ZvcitleGNlcHRpb24gYmxvY2sgaXQgZG9l
cyBub3QgZmFpbHMNCgkJCXRyeSB7DQoJCQkJZm9yKGludCBpID0gMDsgaSA8IDEwIDsgaSsrKSAv
LyBuZWVkcyBhIGxvb3AgaGVyZSAoYSAnd2hpbGUnIG9yIGEgJ2ZvcicpIHRvIGZhaWwNCgkJCQkJ
YW5vdGhlck1ldGhvZCgpOyAvLyB0aHJvd2luZyBkaXJlY3RseSBDdXN0b21FeGNlcHRpb24gbWFr
ZSBpdCBmYWlscyB0b28NCgkJCX0gY2F0Y2ggKGZpbmFsIEN1c3RvbUV4Y2VwdGlvbiBlKSB7DQoJ
CQkJLy8gSWYgImphdmEubGFuZy5FeGNlcHRpb24iIGlzIGNhdWdodCB0aGVyZSdzIG5vIHByb2Js
ZW0NCg0KCQkJCVN5c3RlbS5lcnIucHJpbnRsbigiW0Vycm9yXSIpOwkvLyBPcHRpb25hbCwgaXQg
ZmFpbHMgZXZlbiBpZiBjYXRjaCBpcyBlbXB0eQ0KCQkJCS8vIHdpdGggYSByZXR1cm4gaGVyZSBp
dCB3b3VsZCBub3QgZmFpbCB0aG91Z2gNCgkJCX0NCg0KCQkJYy5wcm9wZXJ0eSArPSAxOyAvLyAi
UG90ZW50aWFsIG51bGwgcG9pbnRlciBhY2Nlc3M6IFRoZSB2YXJpYWJsZSBjIG1heSBiZSBudWxs
IGF0IHRoaXMgbG9jYXRpb24iDQoJCX0NCg0KCX0NCn0NCg==
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>219487</attachid>
            <date>2012-08-02 10:36:00 -0400</date>
            <delta_ts>2012-08-02 10:36:32 -0400</delta_ts>
            <desc>experimental patch</desc>
            <filename>Bug384380_exp1.patch</filename>
            <type>text/plain</type>
            <size>4389</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxSZWZlcmVuY2VU
ZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2Vj
bGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OdWxsUmVmZXJlbmNlVGVz
dC5qYXZhCmluZGV4IGZkMzA1NDMuLmZlOWQ3YWUgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21w
aWxlci9yZWdyZXNzaW9uL051bGxSZWZlcmVuY2VUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Nv
bXBpbGVyL3JlZ3Jlc3Npb24vTnVsbFJlZmVyZW5jZVRlc3QuamF2YQpAQCAtNTEsNyArNTEsNyBA
QAogLy8gLURjb21wbGlhbmNlPTEuNCAoZm9yIGV4YW1wbGUpIHRvIGxvd2VyIGl0IGlmIG5lZWRl
ZAogc3RhdGljIHsKIC8vCQlURVNUU19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7ICJ0ZXN0QnVnMzQ1
MzA1XzE0IiB9OwotLy8JCVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1tdIHsgInRlc3QwNTE1X3Ry
eV9maW5hbGx5IiB9OworLy8JCVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1tdIHsgInRlc3RCdWcz
ODQzODAiIH07CiAvLwkJVEVTVFNfTlVNQkVSUyA9IG5ldyBpbnRbXSB7IDU2MSB9OwogLy8JCVRF
U1RTX1JBTkdFID0gbmV3IGludFtdIHsgMSwgMjA0OSB9OwogfQpAQCAtMTYwMjEsNCArMTYwMjEs
MzggQEAKIAkJIlBvdGVudGlhbCBudWxsIHBvaW50ZXIgYWNjZXNzOiBUaGUgdmFyaWFibGUgcyBt
YXkgYmUgbnVsbCBhdCB0aGlzIGxvY2F0aW9uXG4iICsgCiAJCSItLS0tLS0tLS0tXG4iKTsKIH0K
K3B1YmxpYyB2b2lkIHRlc3RCdWczODQzODAoKSB7CisJaWYgKHRoaXMuY29tcGxpYW5jZUxldmVs
IDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNSkgcmV0dXJuOworCXJ1bkNvbmZvcm1UZXN0KAor
CQluZXcgU3RyaW5nW10geworCQkJIlguamF2YSIsCisJCQkicHVibGljIGNsYXNzIFgge1xuIiAr
CisJCQkiCXB1YmxpYyBzdGF0aWMgY2xhc3MgQ29udGFpbmVye1xuIiArCisJCQkiCQlwdWJsaWMg
aW50IHByb3BlcnR5O1xuIiArCisJCQkiCX1cbiIgKworCQkJIlxuIiArCisJCQkiCXB1YmxpYyBz
dGF0aWMgY2xhc3MgQ3VzdG9tRXhjZXB0aW9uIGV4dGVuZHMgRXhjZXB0aW9uIHtcbiIgKworCQkJ
IgkJcHJpdmF0ZSBzdGF0aWMgZmluYWwgbG9uZwkgc2VyaWFsVmVyc2lvblVJRAk9IDFMO1xuIiAr
CisJCQkiCX1cbiIgKworCQkJIlxuIiArCisJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBhbm90aGVy
TWV0aG9kKCkgdGhyb3dzIEN1c3RvbUV4Y2VwdGlvbiB7XG4iICsKKwkJCSIJCS8vIGFjdHVhbGx5
IHRocm93aW5nIG9yIG5vdCB0aGUgZXhjZXB0aW9uIGlzIGlycmVsZXZhbnQgaGVyZVxuIiArCisJ
CQkiCX1cbiIgKworCQkJIlxuIiArCisJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBtZXRob2QoZmlu
YWwgamF2YS51dGlsLkxpc3Q8Q29udGFpbmVyPiBsaXN0KSB7XG4iICsKKwkJCSIJCWZvciAoZmlu
YWwgQ29udGFpbmVyIGMgOiBsaXN0KSB7XG4iICsKKwkJCSIJCQlpZihjID09IG51bGwpXG4iICsK
KwkJCSIJCQkJY29udGludWU7XG4iICsKKwkJCSIJCQl0cnkge1xuIiArCisJCQkiCQkJCWZvcihp
bnQgaSA9IDA7IGkgPCAxMCA7IGkrKylcbiIgKworCQkJIgkJCQkJYW5vdGhlck1ldGhvZCgpOyAv
LyB0aHJvd2luZyBkaXJlY3RseSBDdXN0b21FeGNlcHRpb24gbWFrZSBpdCBmYWlscyB0b29cbiIg
KworCQkJIgkJCX0gY2F0Y2ggKGZpbmFsIEN1c3RvbUV4Y2VwdGlvbiBlKSB7XG4iICsKKwkJCSIJ
CQkJU3lzdGVtLmVyci5wcmludGxuKFwiW0Vycm9yXVwiKTsJLy8gT3B0aW9uYWwsIGl0IGZhaWxz
IGV2ZW4gaWYgY2F0Y2ggaXMgZW1wdHlcbiIgKworCQkJIgkJCX1cbiIgKworCQkJIgkJCWMucHJv
cGVydHkgKz0gMTsgLy8gQm9ndXMgXCJQb3RlbnRpYWwgbnVsbCBwb2ludGVyIGFjY2VzczogVGhl
IHZhcmlhYmxlIGMgbWF5IGJlIG51bGwgYXQgdGhpcyBsb2NhdGlvblwiXG4iICsKKwkJCSIJCX1c
biIgKworCQkJIgl9XG4iICsKKwkJCSJ9XG4iCisJCX0pOworfQogfQpkaWZmIC0tZ2l0IGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9Gb3JTdGF0ZW1lbnQuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRm9yU3RhdGVtZW50LmphdmEK
aW5kZXggMDY1YWJiNi4uNzM4YzVjNyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Gb3JTdGF0ZW1l
bnQuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0ZvclN0YXRlbWVudC5qYXZhCkBAIC0yMDMsNyArMjAz
LDcgQEAKIAkJaWYgKGxvb3BpbmdDb250ZXh0Lmhhc0VzY2FwaW5nRXhjZXB0aW9ucygpKSB7IC8v
IGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zMjE5MjYKIAkJ
CUZsb3dJbmZvIGxvb3BiYWNrRmxvd0luZm8gPSBmbG93SW5mby5jb3B5KCk7CiAJCQlpZiAodGhp
cy5jb250aW51ZUxhYmVsICE9IG51bGwpIHsgIC8vIHdlIGRvIGdldCB0byB0aGUgYm90dG9tIAot
CQkJCWxvb3BiYWNrRmxvd0luZm8ubWVyZ2VkV2l0aChhY3Rpb25JbmZvLnVuY29uZGl0aW9uYWxD
b3B5KCkpOworCQkJCWxvb3BiYWNrRmxvd0luZm8uYWRkTnVsbEluZm9Gcm9tKGFjdGlvbkluZm8p
OwogCQkJfQogCQkJbG9vcGluZ0NvbnRleHQuc2ltdWxhdGVUaHJvd0FmdGVyTG9vcEJhY2sobG9v
cGJhY2tGbG93SW5mbyk7CiAJCX0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9mbG93L0V4Y2VwdGlvbkhh
bmRsaW5nRmxvd0NvbnRleHQuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9mbG93L0V4Y2VwdGlvbkhhbmRsaW5nRmxv
d0NvbnRleHQuamF2YQppbmRleCA5MjM4MjRmLi4wZTVkMzVlIDEwMDY0NAotLS0gYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
Zmxvdy9FeGNlcHRpb25IYW5kbGluZ0Zsb3dDb250ZXh0LmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Zsb3cv
RXhjZXB0aW9uSGFuZGxpbmdGbG93Q29udGV4dC5qYXZhCkBAIC0yNzgsMTAgKzI3OCwxNCBAQAog
CQlDYXRjaFBhcmFtZXRlckJpbmRpbmcgY2F0Y2hQYXJhbWV0ZXIgPSAoQ2F0Y2hQYXJhbWV0ZXJC
aW5kaW5nKSB0aGlzLmNhdGNoQXJndW1lbnRzW2NhdGNoQmxvY2tdLmJpbmRpbmc7CiAJCWNhdGNo
UGFyYW1ldGVyLnNldFByZWNpc2VUeXBlKGNhdWdodEV4Y2VwdGlvbik7CiAJfQotCXRoaXMuaW5p
dHNPbkV4Y2VwdGlvbnNbY2F0Y2hCbG9ja10gPQotCQkodGhpcy5pbml0c09uRXhjZXB0aW9uc1tj
YXRjaEJsb2NrXS50YWdCaXRzICYgRmxvd0luZm8uVU5SRUFDSEFCTEUpID09IDAgPwotCQkJdGhp
cy5pbml0c09uRXhjZXB0aW9uc1tjYXRjaEJsb2NrXS5tZXJnZWRXaXRoKGZsb3dJbmZvKToKLQkJ
CWZsb3dJbmZvLnVuY29uZGl0aW9uYWxDb3B5KCk7CisJaW50IGV4Y1RhZ0JpdHMgPSB0aGlzLmlu
aXRzT25FeGNlcHRpb25zW2NhdGNoQmxvY2tdLnRhZ0JpdHM7CisJaWYgKChleGNUYWdCaXRzICYg
Rmxvd0luZm8uVU5SRUFDSEFCTEUpID09IDApIHsKKwkJdGhpcy5pbml0c09uRXhjZXB0aW9uc1tj
YXRjaEJsb2NrXSA9IHRoaXMuaW5pdHNPbkV4Y2VwdGlvbnNbY2F0Y2hCbG9ja10ubWVyZ2VkV2l0
aChmbG93SW5mbyk7CisJCWlmICgoZXhjVGFnQml0cyAmIEZsb3dJbmZvLk5VTExfRkxBR19NQVNL
KSA9PSAwKQorCQkJdGhpcy5pbml0c09uRXhjZXB0aW9uc1tjYXRjaEJsb2NrXS5hZGROdWxsSW5m
b0Zyb20oZmxvd0luZm8pOworCX0gZWxzZSB7CisJCXRoaXMuaW5pdHNPbkV4Y2VwdGlvbnNbY2F0
Y2hCbG9ja10gPSBmbG93SW5mby51bmNvbmRpdGlvbmFsQ29weSgpOworCX0KIH0KIAogcHVibGlj
IHZvaWQgcmVjb3JkUmV0dXJuRnJvbShVbmNvbmRpdGlvbmFsRmxvd0luZm8gZmxvd0luZm8pIHsK
</data>

          </attachment>
      

    </bug>

</bugzilla>