<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>427218</bug_id>
          
          <creation_ts>2014-02-02 10:06:00 -0500</creation_ts>
          <short_desc>[1.8][compiler] Verify error varargs + inference</short_desc>
          <delta_ts>2014-02-21 04:30:42 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>427059</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>manpalat</cc>
    
    <cc>marco</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2357633</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-02 10:06:22 -0500</bug_when>
    <thetext>See https://bugs.eclipse.org/bugs/show_bug.cgi?id=427207#c8 for
a snippet and crash info.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2357644</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-02 10:44:54 -0500</bug_when>
    <thetext>I suspect that traditional codeGen does not recognize a varargs invocation as determined by new type inference.

I&apos;ll follow up.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2357645</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-02 10:47:50 -0500</bug_when>
    <thetext>Here is a junit: 

// https://bugs.eclipse.org/bugs/show_bug.cgi?id=427218, [1.8][compiler] Verify error varargs + inference 
public void test427218() {
	runConformTest(
		new String[] {
			&quot;X.java&quot;,
			&quot;public class X {\n&quot; +
			&quot;   public static void main(String[] args) {\n&quot; +
			&quot;      match(getLast(\&quot;a\&quot;), null);\n&quot; +
			&quot;   }\n&quot; +
			&quot;   public static &lt;T&gt; T getLast(T... array) { return null; } // same with T[]\n&quot; +
			&quot;   public static void match(boolean b, Object foo) { }\n&quot; +
			&quot;   public static &lt;A&gt; void match(Object o, A foo) { }\n&quot; +
			&quot;}\n&quot;,
		},
		&quot;&quot;);
}

I see that in Statement.generateArguments this.binding comes out to
be ProblemMethodBinding with ProblemReason = 23.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2358630</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-04 11:24:04 -0500</bug_when>
    <thetext>One some paths when we do deferred final resolution of an inner invocation we could produce a ProblemMethodBinding without reporting an error. This immedidate problem is fixed via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=ee49c8f1081c02bdb311590036980191aff6a2f1

This reveals the underlying root cause in this bug: during overload resolution we get a solution for the inner getLast() with T=Boolean (from checking aginst match(boolean,Object)).
This solution sticks to the invocation, so we fail to resolve this inner against the updated target type from checking against match(Object,A), where A=Object.

Currently, inference contexts are stored per Invocation x PGMB. I was expecting that we need to pull the targetType into this dependency. This test confirms that theory.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2361553</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-11 08:55:04 -0500</bug_when>
    <thetext>Fixing this is much easier than I expected: The conflict was created simply by a left-over value in MessageSend.expectedType, which was set during an attempted inner inference in Scope.compatibilityLevel18FromInner(). Simply resetting to null after failure of inner inference resolves this bug :)

Released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=ad89a8e304d1a820b297ef629644715238bac0b6</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2366581</commentid>
    <comment_count>5</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2014-02-21 04:30:42 -0500</bug_when>
    <thetext>Verified as working for Eclipse + Java 8 RC1 using Kepler SR2(RC4) +   
Eclipse Java Development Tools Patch for Java 8 Support (BETA)   
1.0.0.v20140220-2054</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>