<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>402993</bug_id>
          
          <creation_ts>2013-03-12 03:57:00 -0400</creation_ts>
          <short_desc>[null] Follow up of bug 401088: Missing warning about redundant null check</short_desc>
          <delta_ts>2013-04-30 07:35:40 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.3 M7</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>jarthana</cc>
    
    <cc>manpalat</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2229323</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-12 03:57:06 -0400</bug_when>
    <thetext>Why would we not issue warnings on the two lines called out ??

// ---
public class NPEonCast {

	private static void occasionallyThrowException() throws Exception {
		if ((System.currentTimeMillis() &amp; 1L) != 0L)
			throw new Exception();
	}

	private static void open() throws Exception {
		occasionallyThrowException();
	}

	private static void close() throws Exception {
		occasionallyThrowException();
	}

	public static void main(String s[]) {
		Exception exc = null;
		if (exc == null)
			;
		try {
			open();
			// do more things
		}
		catch (Exception e) {
			if (exc == null) // no warning here ??
				;
		}
		finally {
			try {
				close();
			}
			catch (Exception e) {
				if (exc == null) // No warning here ??
					exc = e;
			}
		}
	}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2229570</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-03-12 10:05:01 -0400</bug_when>
    <thetext>I&apos;ll take a fresh look for M7, thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2243337</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-04-13 03:33:17 -0400</bug_when>
    <thetext>The fix reconciles concepts introduced in bug 345305 and bug 401088:

Bug 345305 introduced FlowContext.markFinallyNullStatus(), mergeFinallyNullInfo(), conditionalLevel in order to feed null info (not def.assign) into the catch &amp; finally blocks.

Bug 401088 made sure this information is shared in nested try-finally structures.

Unfortunately, real sharing of initsOnFinally caused undesired side effects. 
To fix this I replaced sharing of flowInfos with some new wiring of floxContexts using a new field outerTryContext.
markFinallyNullStatus now delegates to the outerTryContext if set. 
To accommodate the new field outerTryContext and its evaluation a new class TryFlowContext has been fitted into the hierarchy above FinallyFlowContext and InsideSubRoutineFlowContext.

I also had to fine tune when methods mergeFinallyNullInfo / markFinallyNullInfo would be effective:
- don&apos;t record any initsOnFinally during analysis of the finally block itself (would otherwise appear to affect the catch blocks)
- while analyzing catch blocks consider the null info as conditionally affecting the finally block</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2250261</commentid>
    <comment_count>3</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2013-04-30 04:12:14 -0400</bug_when>
    <thetext>Verified for 4.3 M7 build id: I20130428-2000</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>