<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>426764</bug_id>
          
          <creation_ts>2014-01-28 03:14:00 -0500</creation_ts>
          <short_desc>[1.8] Presence of conditional expression as method argument confuses compiler</short_desc>
          <delta_ts>2014-01-30 10:13:58 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>424053</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Jay Arthanareeswaran">jarthana</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2355244</commentid>
    <comment_count>0</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-01-28 03:14:14 -0500</bug_when>
    <thetext>This code gets rejected by ECJ:

interface I {}
class C1 implements I {}
class C2 implements I {}
public class X  {
    &lt;T &gt; void foo(T p1, I p2) {}
    &lt;T extends I&gt; void foo(T p1, I p2) {}
    void bar() {
        foo(true ? new C1(): new C2(), false ? new C2(): new C1()); // Rejected
        foo(new C1(), false ? new C2(): new C1()); // Rejected too
    }
}

Note that both C1 and C2 (which are part of the conditional expression) are types of I, which means we can pick a valid method in both cases.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2355246</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-28 03:18:15 -0500</bug_when>
    <thetext>Thanks for following up.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2356326</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-29 17:03:16 -0500</bug_when>
    <thetext>Three parts to the solution:

ConstraintExpressionFormula.reduce() should not give up if left.resolvedType is null: for poly expressions we can still get a good answer from left.isCompatibleWith(..)

Fix implementations of Expression.isCompatibleWith(..): root version in Expression *should* do the obvious (delegate to TypeBinding.isCompatibleWith(..)), and I already complained about the override in AllocationExpression wrt its use of actualType() - removing it we seem to be better off.

I always wondered about the order of loops in the 1.8-part of Scope.mostSpecificMethodBinding(..). Now I saw that we were accumulating more &apos;moreSpecific&apos; methods than we had methods =&gt; AIOOBE. This was caused by having the loop over argumentTypes as the outer most loop, where it should be the inner most loop, I guess.

Test &amp; fix released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=5da4e2969d847b90ef5747fa353d6487a9be6c2a</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2356348</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-29 19:29:13 -0500</bug_when>
    <thetext>Thanks Stephan.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2356350</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-29 19:30:01 -0500</bug_when>
    <thetext>*** Bug 426766 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2356511</commentid>
    <comment_count>5</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-01-30 06:00:35 -0500</bug_when>
    <thetext>The fix may have caused a regression, this code no longer compiles but gives error message The method method(java.lang.Class, java.lang.String) in the type Snippet is not applicable for the arguments (java.lang.Class, java.lang.String)

public class Snippet {
  private static final String PLACEHOLDER_MEMORY = new String();

  static void newInstance(Class type, long init) {
    method(type, init == 0 ? new String() : PLACEHOLDER_MEMORY); //line with error
  }

  private static void method(Class type, String str) {}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2356658</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-30 10:13:58 -0500</bug_when>
    <thetext>(In reply to Timo Kinnunen from comment #5)
&gt; The fix may have caused a regression,

Not (directly) connected to this bug. To be continued in bug 426998 instead.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>