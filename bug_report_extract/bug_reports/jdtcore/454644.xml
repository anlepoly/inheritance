<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>454644</bug_id>
          
          <creation_ts>2014-12-09 15:22:00 -0500</creation_ts>
          <short_desc>Compiler fails to infer proper return type for noneOf() and copyOf() in EnumSet</short_desc>
          <delta_ts>2015-01-27 20:04:22 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4.1</version>
          <rep_platform>Macintosh</rep_platform>
          <op_sys>Mac OS X</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>INVALID</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>4.5 M5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Sam Brannen">sam</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>jarthana</cc>
    
    <cc>manpalat</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2494838</commentid>
    <comment_count>0</comment_count>
      <attachid>249298</attachid>
    <who name="Sam Brannen">sam</who>
    <bug_when>2014-12-09 15:22:47 -0500</bug_when>
    <thetext>Created attachment 249298
demonstrates compiler bug regarding EnumSet and casting

The Eclipse Java 1.8 compiler displays the following error for use of the EnumSet.copyOf() and EnumSet.noneOf() methods in the CollectionFactory class which can be found in the attached example project:

Type mismatch: cannot convert from EnumSet&lt;Enum&lt;Enum&lt;E&gt;&gt;&gt; to Collection&lt;E&gt;

Note, however, that the code in question compiles fine from the command line using OpenJDK 1.8.0_40-ea-b11 as well as within IntelliJ IDEA.

Adding superfluous casts (see commented out code in CollectionFactory) allows the code to compile within Eclipse. However, Eclipse then warns about about &quot;rawtypes&quot;, but content assist does not provide an option to add &quot;rawtypes&quot; to the @SuppressWarnings declaration.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2494839</commentid>
    <comment_count>1</comment_count>
    <who name="Sam Brannen">sam</who>
    <bug_when>2014-12-09 15:24:46 -0500</bug_when>
    <thetext>Please note this bug has been verified on the latest build for Mac OS: eclipse-SDK-M20141205-1400-macosx-cocoa-x86_64.tar.gz</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2494854</commentid>
    <comment_count>2</comment_count>
      <attachid>249299</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-12-09 16:09:36 -0500</bug_when>
    <thetext>Created attachment 249299
changes to avoid raw types

I doubt that this is correct Java 8 code.

Note, that javac is known to have bugs affecting the interaction between type inference and raw types. Your example is likely to be accepted simply due to a bug in javac.

To support my claim, I&apos;m attaching a patch that captures how avoiding raw types and using suitable type bounds lets ecj correctly infer types as desired (without additional casts).

We may still discuss, whether this is sufficient evidence or not, but note that the referee in this game is JLS, not javac.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2494857</commentid>
    <comment_count>3</comment_count>
      <attachid>249300</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-12-09 16:25:36 -0500</bug_when>
    <thetext>Created attachment 249300
augmented version demonstrating the type error

This evidence is even stronger: this version of the example, augmented by a little main, is still accepted by javac with no error, yet at runtime it throws ClassCastException in a location that doesn&apos;t even have an explicit cast.

This proves that the program is not type safe. If javac still believes so, that&apos;s a bug.

If you combine this main with the corrected version from my previous attachment, ecj informs you:
1. ERROR in EnumSet_casts/src/example/CollectionFactory.java (at line 67)
        Collection&lt;Integer&gt; ints = createApproximateCollection(es, 3);
                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Type mismatch: cannot convert from Collection&lt;Enum&lt;Enum&lt;E&gt;&gt;&gt; to Collection&lt;Integer&gt;


You should be grateful that ecj tells you about the type error :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2495897</commentid>
    <comment_count>4</comment_count>
    <who name="Sam Brannen">sam</who>
    <bug_when>2014-12-11 10:33:30 -0500</bug_when>
    <thetext>Hi Stephan,

Thanks for looking into this in such detail.

Based on your analysis, I agree that the initial code in question is in fact not type-safe and therefore, as you pointed out, &quot;incorrect&quot;. It&apos;s a shame that both javac and IntelliJ consider that code valid.

For the time being, we are leaving the cast in place. It is possible that something could go wrong at run-time, but that is rather unlikely since the CollectionFactory class is primarily only used internally within the framework. In any case, we are looking into a type-safe solution for the future.

In summary, you may close this as &quot;not an issue&quot;.

Regards,

Sam</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2495901</commentid>
    <comment_count>5</comment_count>
    <who name="Sam Brannen">sam</who>
    <bug_when>2014-12-11 10:41:20 -0500</bug_when>
    <thetext>&gt; You should be grateful that ecj tells you about the type error :)

Yes, indeed... I am. ;)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2495908</commentid>
    <comment_count>6</comment_count>
    <who name="Sam Brannen">sam</who>
    <bug_when>2014-12-11 10:48:43 -0500</bug_when>
    <thetext>&gt; To support my claim, I&apos;m attaching a patch that captures how avoiding raw 
&gt; types and using suitable type bounds lets ecj correctly infer types as 
&gt; desired (without additional casts).

For the record, we are not able to switch from &lt;E&gt; to &lt;E extends Enum&lt;E&gt;&gt; in the method signatures since these methods create collections for any element type (e.g., simple types or enums).

Because of that requirement and the fact that one cannot (to my knowledge) create a method signature that would support both simple types and enums with generics simultaneously, I imagine we will have to revert to using raw types entirely (or something like Collection&lt;Object&gt; instead of Collection&lt;E&gt; as the return type).

Or would you advise something different?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2496057</commentid>
    <comment_count>7</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-12-11 16:31:11 -0500</bug_when>
    <thetext>(In reply to comment #6)
&gt; Or would you advise something different?

The question wasn&apos;t addressed to me, but I might as well throw my 2 cents in. Here&apos;s how I would have written the first version:

	public static &lt;E&gt; Collection&lt;E&gt; createApproximateCollection2(Collection&lt;E&gt; collection, int capacity) {
		if(collection instanceof LinkedList) {
			return new LinkedList&lt;&gt;();
		}
		if(collection instanceof List) {
			return new ArrayList&lt;&gt;(capacity);
		}
		if(collection instanceof EnumSet) {
			EnumSet&lt;?&gt; enumSet = (EnumSet&lt;?&gt;) collection;
			@SuppressWarnings(&quot;unchecked&quot;)
			Collection&lt;E&gt; clone = (Collection&lt;E&gt;) enumSet.clone();
			return clone;
		}
		if(collection instanceof SortedSet) {
			return new TreeSet&lt;&gt;(((SortedSet&lt;E&gt;) collection).comparator());
		}
		return new LinkedHashSet&lt;&gt;(capacity);
	}

This version is type-safe thanks to the generic type being present in the arguments and the return value both. 

The compiler can&apos;t prove the type-safety, so the unchecked cast is needed. From this version it&apos;s pretty clear why the unchecked cast has to be there, son&apos;t you think?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2496735</commentid>
    <comment_count>8</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-12-13 11:28:43 -0500</bug_when>
    <thetext>I&apos;m adding the original example as a regression test. In 1.7- we accept the example. I didn&apos;t follow up to see whether that&apos;s a problem in JLS 7 or if we simply copied a bug from javac. I&apos;m not inclined to changing this old behavior.

In 1.8, however, type inference of the call EnumSet.copyOf((EnumSet) collection) fails at the following constraint:

	E &lt;: java.lang.Enum&lt;E#0&gt;

(This happens during invocation type inference - after invocation applicability inference answered TRUE.)

This corresponds to the change in comment 2: in it&apos;s unmodified version the program doesn&apos;t provide sufficient type information to assert that E is indeed a subtype of Enum&lt;E#0&gt; (E#0 being an inference variable); a type bound &quot;E extends Enum&lt;E&gt;&quot; would indeed be needed to assert the necessary constraint above.


Test released via commit df9e156f4fc8e7c9ba600ff3791d21d593d64696</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2496737</commentid>
    <comment_count>9</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-12-13 11:37:35 -0500</bug_when>
    <thetext>(In reply to Sam Brannen from comment #6)
&gt; Or would you advise something different?

I guess this depends on how much type information you are able to add to the signature. Timo&apos;s advice looks good, provided you don&apos;t rely on the totally unspecific parameter &quot;Object&quot;. If you need the method to turn dust (&quot;Object&quot;) into gold (&quot;Collection&lt;E&gt;&quot;, with E chosen by the caller!) than you will have to cheat - and hope. If you can impose some more constraints on the caller then type checking will be of more help.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2511060</commentid>
    <comment_count>10</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2015-01-27 20:04:22 -0500</bug_when>
    <thetext>Verified for Eclipse Mars 4.5 M5 Build id: I20150126-2000</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>249298</attachid>
            <date>2014-12-09 15:22:00 -0500</date>
            <delta_ts>2014-12-09 15:22:47 -0500</delta_ts>
            <desc>demonstrates compiler bug regarding EnumSet and casting</desc>
            <filename>EnumSet_casts.zip</filename>
            <type>application/zip</type>
            <size>2097</size>
            <attacher name="Sam Brannen">sam</attacher>
            
              <data encoding="base64">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
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>249299</attachid>
            <date>2014-12-09 16:09:00 -0500</date>
            <delta_ts>2014-12-09 16:09:36 -0500</delta_ts>
            <desc>changes to avoid raw types</desc>
            <filename>CollectionFactory.diff</filename>
            <type>text/plain</type>
            <size>1743</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">LS0tIHNyYy1vcmlnL2V4YW1wbGUvQ29sbGVjdGlvbkZhY3RvcnkuamF2YQkyMDE0LTEyLTA5IDIx
OjA2OjIwLjAwMDAwMDAwMCArMDEwMAorKysgc3JjL2V4YW1wbGUvQ29sbGVjdGlvbkZhY3Rvcnku
amF2YQkyMDE0LTEyLTA5IDIxOjQ0OjM4LjkyNjA3NDIyMiArMDEwMApAQCAtNDAsNyArNDAsNyBA
QAogcHVibGljIGFic3RyYWN0IGNsYXNzIENvbGxlY3Rpb25GYWN0b3J5IHsKIAogCUBTdXBwcmVz
c1dhcm5pbmdzKHsgInVuY2hlY2tlZCIsICJjYXN0IiB9KQotCXB1YmxpYyBzdGF0aWMgPEU+IENv
bGxlY3Rpb248RT4gY3JlYXRlQXBwcm94aW1hdGVDb2xsZWN0aW9uKE9iamVjdCBjb2xsZWN0aW9u
LCBpbnQgY2FwYWNpdHkpIHsKKwlwdWJsaWMgc3RhdGljIDxFIGV4dGVuZHMgRW51bTxFPj4gQ29s
bGVjdGlvbjxFPiBjcmVhdGVBcHByb3hpbWF0ZUNvbGxlY3Rpb24oT2JqZWN0IGNvbGxlY3Rpb24s
IGludCBjYXBhY2l0eSkgewogCQlpZiAoY29sbGVjdGlvbiBpbnN0YW5jZW9mIExpbmtlZExpc3Qp
IHsKIAkJCXJldHVybiBuZXcgTGlua2VkTGlzdDxFPigpOwogCQl9CkBAIC01Miw3ICs1Miw3IEBA
CiAJCQkvLyByZXR1cm4gKENvbGxlY3Rpb248RT4pIEVudW1TZXQuY29weU9mKChFbnVtU2V0KSBj
b2xsZWN0aW9uKTsKIAogCQkJLy8gT3JpZ2luYWwgY29kZSB3aGljaCBjb21waWxlcyB1c2luZyBP
cGVuSkRLIDEuOC4wXzQwLWVhLWIxMSBhbmQgSW50ZWxsaUogSURFQQotCQkJcmV0dXJuIEVudW1T
ZXQuY29weU9mKChFbnVtU2V0KSBjb2xsZWN0aW9uKTsKKwkJCXJldHVybiBFbnVtU2V0LmNvcHlP
ZigoRW51bVNldDxFPikgY29sbGVjdGlvbik7CiAJCX0KIAkJZWxzZSBpZiAoY29sbGVjdGlvbiBp
bnN0YW5jZW9mIFNvcnRlZFNldCkgewogCQkJcmV0dXJuIG5ldyBUcmVlU2V0PEU+KCgoU29ydGVk
U2V0PEU+KSBjb2xsZWN0aW9uKS5jb21wYXJhdG9yKCkpOwpAQCAtNjIsNyArNjIsNyBAQAogCQl9
CiAJfQogCi0JcHVibGljIHN0YXRpYyA8RT4gQ29sbGVjdGlvbjxFPiBjcmVhdGVDb2xsZWN0aW9u
KENsYXNzPD8+IGNvbGxlY3Rpb25DbGFzcywgQ2xhc3M8Pz4gZWxlbWVudFR5cGUsIGludCBjYXBh
Y2l0eSkgeworCXB1YmxpYyBzdGF0aWMgPEUgZXh0ZW5kcyBFbnVtPEU+PiBDb2xsZWN0aW9uPEU+
IGNyZWF0ZUNvbGxlY3Rpb24oQ2xhc3M8Pz4gY29sbGVjdGlvbkNsYXNzLCBDbGFzczw/PiBlbGVt
ZW50VHlwZSwgaW50IGNhcGFjaXR5KSB7CiAJCWlmIChjb2xsZWN0aW9uQ2xhc3MuaXNJbnRlcmZh
Y2UoKSkgewogCQkJaWYgKFNldC5jbGFzcy5lcXVhbHMoY29sbGVjdGlvbkNsYXNzKSB8fCBDb2xs
ZWN0aW9uLmNsYXNzLmVxdWFscyhjb2xsZWN0aW9uQ2xhc3MpKSB7CiAJCQkJcmV0dXJuIG5ldyBM
aW5rZWRIYXNoU2V0PEU+KGNhcGFjaXR5KTsKQEAgLTg0LDcgKzg0LDcgQEAKIAkJCS8vIHJldHVy
biAoQ29sbGVjdGlvbjxFPikgRW51bVNldC5ub25lT2YoKENsYXNzKSBlbGVtZW50VHlwZSk7CiAK
IAkJCS8vIE9yaWdpbmFsIGNvZGUgd2hpY2ggY29tcGlsZXMgdXNpbmcgT3BlbkpESyAxLjguMF80
MC1lYS1iMTEgYW5kIEludGVsbGlKIElERUEKLQkJCXJldHVybiBFbnVtU2V0Lm5vbmVPZigoQ2xh
c3MpIGVsZW1lbnRUeXBlKTsKKwkJCXJldHVybiBFbnVtU2V0Lm5vbmVPZigoQ2xhc3M8RT4pIGVs
ZW1lbnRUeXBlKTsKIAkJfQogCQllbHNlIHsKIAkJCWlmICghQ29sbGVjdGlvbi5jbGFzcy5pc0Fz
c2lnbmFibGVGcm9tKGNvbGxlY3Rpb25DbGFzcykpIHsK
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>249300</attachid>
            <date>2014-12-09 16:25:00 -0500</date>
            <delta_ts>2014-12-09 16:25:36 -0500</delta_ts>
            <desc>augmented version demonstrating the type error</desc>
            <filename>CollectionFactory.java</filename>
            <type>text/plain</type>
            <size>2317</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">LyoKICogQ29weXJpZ2h0IDIwMDItMjAxNCB0aGUgb3JpZ2luYWwgYXV0aG9yIG9yIGF1dGhvcnMu
CiAqCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRo
ZSAiTGljZW5zZSIpOwogKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21w
bGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuCiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUg
TGljZW5zZSBhdAogKgogKiAgICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNF
TlNFLTIuMAogKgogKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVk
IHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNl
IGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiAqIFdJVEhPVVQgV0FSUkFOVElF
UyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgog
KiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVy
bWlzc2lvbnMgYW5kCiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgogKi8KCnBhY2th
Z2UgZXhhbXBsZTsKCmltcG9ydCBqYXZhLnV0aWwuQXJyYXlMaXN0OwppbXBvcnQgamF2YS51dGls
LkNvbGxlY3Rpb247CmltcG9ydCBqYXZhLnV0aWwuRW51bVNldDsKaW1wb3J0IGphdmEudXRpbC5M
aW5rZWRIYXNoU2V0OwppbXBvcnQgamF2YS51dGlsLkxpbmtlZExpc3Q7CmltcG9ydCBqYXZhLnV0
aWwuTGlzdDsKaW1wb3J0IGphdmEudXRpbC5OYXZpZ2FibGVTZXQ7CmltcG9ydCBqYXZhLnV0aWwu
U2V0OwppbXBvcnQgamF2YS51dGlsLlNvcnRlZFNldDsKaW1wb3J0IGphdmEudXRpbC5UcmVlU2V0
OwoKLyoqCiAqIFRoZSBjb2RlIGluIHRoaXMgY2xhc3MgaXMgdGFrZW4gZGlyZWN0bHkgZnJvbSB0
aGUgU3ByaW5nIEZyYW1ld29yayBmb3IgdGhlIHB1cnBvc2UKICogb2YgcmVwcm9kdWNpbmcgYSBi
dWcuCiAqIDxwPgogKiBTcGVjaWZpY2FsbHksIHRoZSBjb2RlIGNvbWVzIGZyb20ge0Bjb2RlIG9y
Zy5zcHJpbmdmcmFtZXdvcmsuY29yZS5Db2xsZWN0aW9uRmFjdG9yeX0uCiAqCiAqIEBhdXRob3Ig
SnVlcmdlbiBIb2VsbGVyCiAqIEBhdXRob3IgQXJqZW4gUG91dHNtYQogKiBAYXV0aG9yIFNhbSBC
cmFubmVuCiAqLwpwdWJsaWMgYWJzdHJhY3QgY2xhc3MgQ29sbGVjdGlvbkZhY3RvcnkgewoKCUBT
dXBwcmVzc1dhcm5pbmdzKHsgInVuY2hlY2tlZCIsICJjYXN0IiB9KQoJcHVibGljIHN0YXRpYyA8
RT4gQ29sbGVjdGlvbjxFPiBjcmVhdGVBcHByb3hpbWF0ZUNvbGxlY3Rpb24oT2JqZWN0IGNvbGxl
Y3Rpb24sIGludCBjYXBhY2l0eSkgewoJCWlmIChjb2xsZWN0aW9uIGluc3RhbmNlb2YgTGlua2Vk
TGlzdCkgewoJCQlyZXR1cm4gbmV3IExpbmtlZExpc3Q8RT4oKTsKCQl9CgkJZWxzZSBpZiAoY29s
bGVjdGlvbiBpbnN0YW5jZW9mIExpc3QpIHsKCQkJcmV0dXJuIG5ldyBBcnJheUxpc3Q8RT4oY2Fw
YWNpdHkpOwoJCX0KCQllbHNlIGlmIChjb2xsZWN0aW9uIGluc3RhbmNlb2YgRW51bVNldCkgewoJ
CQkvLyBzdXBlcmZsdW91cyBjYXN0IG5lY2Vzc2FyeSBmb3IgYnVnIGluIEVjbGlwc2UgNC40LjEu
CgkJCS8vIHJldHVybiAoQ29sbGVjdGlvbjxFPikgRW51bVNldC5jb3B5T2YoKEVudW1TZXQpIGNv
bGxlY3Rpb24pOwoKCQkJLy8gT3JpZ2luYWwgY29kZSB3aGljaCBjb21waWxlcyB1c2luZyBPcGVu
SkRLIDEuOC4wXzQwLWVhLWIxMSBhbmQgSW50ZWxsaUogSURFQQoJCQlyZXR1cm4gRW51bVNldC5j
b3B5T2YoKEVudW1TZXQpIGNvbGxlY3Rpb24pOwoJCX0KCQllbHNlIGlmIChjb2xsZWN0aW9uIGlu
c3RhbmNlb2YgU29ydGVkU2V0KSB7CgkJCXJldHVybiBuZXcgVHJlZVNldDxFPigoKFNvcnRlZFNl
dDxFPikgY29sbGVjdGlvbikuY29tcGFyYXRvcigpKTsKCQl9CgkJZWxzZSB7CgkJCXJldHVybiBu
ZXcgTGlua2VkSGFzaFNldDxFPihjYXBhY2l0eSk7CgkJfQoJfQoKCXB1YmxpYyBzdGF0aWMgdm9p
ZCBtYWluKFN0cmluZy4uLiBhcmdzKSB7CiAgICAgIEVudW1TZXQ8amF2YS5sYW5nLmFubm90YXRp
b24uRWxlbWVudFR5cGU+IGVzID0gRW51bVNldC5vZihqYXZhLmxhbmcuYW5ub3RhdGlvbi5FbGVt
ZW50VHlwZS5UWVBFKTsKICAgICAgQ29sbGVjdGlvbjxJbnRlZ2VyPiBpbnRzID0gY3JlYXRlQXBw
cm94aW1hdGVDb2xsZWN0aW9uKGVzLCAzKTsKICAgICAgU3lzdGVtLm91dC5wcmludGxuKGludHMu
aXRlcmF0b3IoKS5uZXh0KCkuaW50VmFsdWUoKSk7Cgl9Cgp9Cg==
</data>

          </attachment>
      

    </bug>

</bugzilla>