<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>442614</bug_id>
          
          <creation_ts>2014-08-26 12:58:00 -0400</creation_ts>
          <short_desc>Extract, merge, and fix string and char literal escaping</short_desc>
          <delta_ts>2014-09-17 05:19:30 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.5</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.5 M2</target_milestone>
          
          <blocked>441790</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Markus Keller">markus_keller</reporter>
          <assigned_to name="Markus Keller">markus_keller</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>jarthana</cc>
    
    <cc>markus_keller</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2443708</commentid>
    <comment_count>0</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-08-26 12:58:44 -0400</bug_when>
    <thetext>Required for bug 441790.

jdt.core has several implementation of string and char literal escaping. They should be combined into one and bugs should be fixed.

org.eclipse.jdt.core.dom.StringLiteral#setLiteralValue(String) and
org.eclipse.jdt.internal.core.util.Disassembler#escapeChar(StringBuffer, char) 
both escape \0 to \7 wrongly when they are followed by more octal numbers. E.g. &quot;\0041&quot; is the char sequence { &apos;\4&apos;, &apos;1&apos; }, but such a sequence is currently escaped to &quot;\41&quot;, which is equivalent to &quot;!&quot;.

I don&apos;t see a reason why we should only escape \0 to \7 and not all chars below 0x20. We can&apos;t know how these chars were represented in source, but it makes sense to escape them all, so that the user knows what&apos;s going on and doesn&apos;t run into trouble with tools that don&apos;t properly display these characters. As JLS8 3.10.6 says, Unicode escapes are usually preferred.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2443709</commentid>
    <comment_count>1</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-08-26 13:00:40 -0400</bug_when>
    <thetext>Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=8622e99cc18e0c0ae6c600de97be8d909f3d7ad6</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2444006</commentid>
    <comment_count>2</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2014-08-27 04:02:28 -0400</bug_when>
    <thetext>This lets JavaElementLabelsTest.testMethodLabelAnnotatedParameters fail:

http://download.eclipse.org/eclipse/downloads/drops4/N20140826-2000/testresults/html/org.eclipse.jdt.ui.tests_linux.gtk.x86_64_8.0.html

Expected: ch=&apos;\0&apos;
Actual:   ch=&apos;\u0000&apos;


Content not as expected: is org.test.Annotations.foo2(@Ann(value=&quot;&quot;, cl=Annotations.class, ints={1, 2, -19}, ch=&apos;\u0000&apos;, sh=32767, r=@Retention(value=RetentionPolicy.SOURCE)) String) Differs at pos 86: ch=&apos;\^u0000&apos; expected: org.test.Annotations.foo2(@Ann(value=&quot;&quot;, cl=Annotations.class, ints={1, 2, -19}, ch=&apos;\0&apos;, sh=32767, r=@Retention(value=RetentionPolicy.SOURCE)) String) expected:&lt;...s={1, 2, -19}, ch=&apos;\[]0&apos;, sh=32767, r=@Ret...&gt; but was:&lt;...s={1, 2, -19}, ch=&apos;\[u000]0&apos;, sh=32767, r=@Ret...&gt;

org.junit.ComparisonFailure: Content not as expected: is
org.test.Annotations.foo2(@Ann(value=&quot;&quot;, cl=Annotations.class, ints={1, 2, -19}, ch=&apos;\u0000&apos;, sh=32767, r=@Retention(value=RetentionPolicy.SOURCE)) String)
Differs at pos 86: ch=&apos;\^u0000&apos;
expected:
org.test.Annotations.foo2(@Ann(value=&quot;&quot;, cl=Annotations.class, ints={1, 2, -19}, ch=&apos;\0&apos;, sh=32767, r=@Retention(value=RetentionPolicy.SOURCE)) String) expected:&lt;...s={1, 2, -19}, ch=&apos;\[]0&apos;, sh=32767, r=@Ret...&gt; but was:&lt;...s={1, 2, -19}, ch=&apos;\[u000]0&apos;, sh=32767, r=@Ret...&gt;
at org.eclipse.jdt.testplugin.StringAsserts.assertEqualString(StringAsserts.java:70)
at org.eclipse.jdt.ui.tests.core.CoreTests.assertEqualString(CoreTests.java:76)
at org.eclipse.jdt.ui.tests.core.JavaElementLabelsTest.testMethodLabelAnnotatedParameters(JavaElementLabelsTest.java:661)
...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2444191</commentid>
    <comment_count>3</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-08-27 07:47:45 -0400</bug_when>
    <thetext>(In reply to Dani Megert from comment #2)
&gt; This lets JavaElementLabelsTest.testMethodLabelAnnotatedParameters fail:

That&apos;s OK. There are multiple ways to represent ((char) 0). Both results are equally valid. Fixed the test with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=53dc20ac826083c380275df1cd16ef001de22c28</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2452951</commentid>
    <comment_count>4</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-09-17 05:19:30 -0400</bug_when>
    <thetext>Verified for 4.5 M2 by code inspection.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>