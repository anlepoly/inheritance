<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>433178</bug_id>
          
          <creation_ts>2014-04-22 05:12:00 -0400</creation_ts>
          <short_desc>[1.8] [content assist] should propose keyword &apos;new&apos; after &apos;Type::&apos; (CreationReference)</short_desc>
          <delta_ts>2014-09-17 05:57:48 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.5 M2</target_milestone>
          
          <blocked>443710</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Markus Keller">markus_keller</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>jarthana</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2391172</commentid>
    <comment_count>0</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-04-22 05:12:36 -0400</bug_when>
    <thetext>Content Assist should propose keyword &apos;new&apos; after &apos;Type::&apos;, e.g. here:

        IntFunction&lt;Integer&gt; s= Integer::new;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2428644</commentid>
    <comment_count>1</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-07-17 04:04:52 -0400</bug_when>
    <thetext>I will take a look.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2448841</commentid>
    <comment_count>2</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-09-08 11:50:08 -0400</bug_when>
    <thetext>Markus, I know it will be nice to put &apos;new&apos; up at the top. As is, the relevance for constructor is not enough to push it ahead of other methods. Let me know if you are particular.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2448892</commentid>
    <comment_count>3</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-09-08 13:35:13 -0400</bug_when>
    <thetext>I don&apos;t think the &apos;new&apos; keyword need higher priority than method reference proposals.

Relevance of the proposals should be based on the context (expected return type or functional interface type).

	void foo(Integer arg) {
		String s1= arg.toString();
		String s2= Integer.toString(1);
		IntFunction&lt;Integer&gt; s= Integer::new;
		IntFunction&lt;String&gt; ts= Integer::toString;
	}		

After the &apos;.&apos;, proposals that return a String are preferred. Likewise, after the &apos;::&apos;, I would eventually expect &apos;new&apos; and one of the &apos;to*String&apos; on top. These relevances can also be fixed in a separate bug.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2449006</commentid>
    <comment_count>4</comment_count>
      <attachid>246851</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-09-08 23:42:08 -0400</bug_when>
    <thetext>Created attachment 246851
Proposed fix

Patch with new tests. Keyword appears but not first on the list, just like other places. Test suite is being run.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2449019</commentid>
    <comment_count>5</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-09-09 01:57:29 -0400</bug_when>
    <thetext>Released the fix in master:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=0ad6b9e33c03e5463ae4fe81e673c265a7449d87</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2449038</commentid>
    <comment_count>6</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-09-09 03:04:07 -0400</bug_when>
    <thetext>Should have mentioned, when the keyword &apos;new&apos; is selected, the editor is not updated.Something to be done on the UI side?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2449785</commentid>
    <comment_count>7</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-09-10 10:02:53 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #6)
&gt; Should have mentioned, when the keyword &apos;new&apos; is selected, the editor is not
&gt; updated.Something to be done on the UI side?

No, the problem is that the CompletionProposal from jdt.core has a wrong offset: getTokenStart() and getReplaceStart() return the start of the ExpressionMethodReference node. They have to return the start of the &quot;new&quot; keyword.

(In reply to Markus Keller from comment #3)
&gt; Relevance of the proposals should be based on the context
Filed bug 443710.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2449882</commentid>
    <comment_count>8</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-09-10 12:16:12 -0400</bug_when>
    <thetext>(In reply to Markus Keller from comment #7)
&gt; No, the problem is that the CompletionProposal from jdt.core has a wrong
&gt; offset: getTokenStart() and getReplaceStart() return the start of the
&gt; ExpressionMethodReference node. They have to return the start of the &quot;new&quot;
&gt; keyword.

Thanks for the hint, Markus. Fixed it here:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=0c73d6ebd04d59bccbac504edd38212dfb2b8d63</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2450861</commentid>
    <comment_count>9</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-09-12 08:05:59 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #8)
Looks good. Filed bug 443932 for a similar problem with method reference completions.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2452256</commentid>
    <comment_count>10</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-09-16 06:19:59 -0400</bug_when>
    <thetext>Verified fixed for 4.5 M2 using I20140915-2000 build</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>246851</attachid>
            <date>2014-09-08 23:42:00 -0400</date>
            <delta_ts>2014-09-08 23:42:08 -0400</delta_ts>
            <desc>Proposed fix</desc>
            <filename>Fixed-Bug-433178.patch</filename>
            <type>text/plain</type>
            <size>4095</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMAojUCBvcmcuZWNsaXBzZS5qZHQuY29yZS50
ZXN0cy5tb2RlbApkaWZmIC0tZ2l0IHNyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9tb2Rl
bC9Db21wbGV0aW9uVGVzdHMxOC5qYXZhIHNyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9t
b2RlbC9Db21wbGV0aW9uVGVzdHMxOC5qYXZhCmluZGV4IGNkMzBkZTUuLjVhNTQ4MzggMTAwNjQ0
Ci0tLSBzcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvbW9kZWwvQ29tcGxldGlvblRlc3Rz
MTguamF2YQorKysgc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21vZGVsL0NvbXBsZXRp
b25UZXN0czE4LmphdmEKQEAgLTIwLDQgKzIwLDUgQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
Y29yZS5KYXZhTW9kZWxFeGNlcHRpb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZXZh
bC5JRXZhbHVhdGlvbkNvbnRleHQ7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNv
ZGVhc3Npc3QuUmVsZXZhbmNlQ29uc3RhbnRzOwogCiBwdWJsaWMgY2xhc3MgQ29tcGxldGlvblRl
c3RzMTggZXh0ZW5kcyBBYnN0cmFjdEphdmFNb2RlbENvbXBsZXRpb25UZXN0cyB7CkBAIC0xNTY1
LDMgKzE1NjYsNTkgQEAKIAkJCXJlcXVlc3Rvci5nZXRSZXN1bHRzKCkpOwogfQorLy9odHRwczov
L2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDMzMTc4CitwdWJsaWMgdm9p
ZCB0ZXN0NDMzMTc4KCkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbiB7CisJdGhpcy53b3JraW5n
Q29waWVzID0gbmV3IElDb21waWxhdGlvblVuaXRbMV07CisJdGhpcy53b3JraW5nQ29waWVzWzBd
ID0gZ2V0V29ya2luZ0NvcHkoCisJCQkiL0NvbXBsZXRpb24vc3JjL1guamF2YSIsCisJCQkiaW50
ZXJmYWNlIEkge1xuIiArCisJCQkiICAgIFN0cmluZyBmb28oU3RyaW5nIHgpO1xuIiArCisJCQki
fVxuIiArCisJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkiICAgIHB1YmxpYyAgU3RyaW5n
IGxvbmdNZXRob2ROYW1lKFN0cmluZyB4KSB7XG4iICsKKwkJCSIgICAgICAgIHJldHVybiBudWxs
O1xuIiArCisJCQkiICAgIH1cbiIgKworCQkJIiAgICB2b2lkIGZvbygpIHtcbiIgKworCQkJIiAg
ICAJWCB4ID0gbmV3IFgoKTtcbiIgKworCQkJIiAgICAJSSBpID0geDo6bmVcbiIgKworCQkJIiAg
ICAgICBTeXN0ZW0ub3V0LnByaW50bG4oKTtcbiIgKworCQkJIiAgICB9XG4iICsKKwkJCSJ9XG4i
KTsKKworCUNvbXBsZXRpb25UZXN0c1JlcXVlc3RvcjIgcmVxdWVzdG9yID0gbmV3IENvbXBsZXRp
b25UZXN0c1JlcXVlc3RvcjIodHJ1ZSwgdHJ1ZSwgdHJ1ZSwgZmFsc2UpOworCXJlcXVlc3Rvci5h
bGxvd0FsbFJlcXVpcmVkUHJvcG9zYWxzKCk7CisJU3RyaW5nIHN0ciA9IHRoaXMud29ya2luZ0Nv
cGllc1swXS5nZXRTb3VyY2UoKTsKKwlTdHJpbmcgY29tcGxldGVCZWhpbmQgPSAibmUiOworCWlu
dCBjdXJzb3JMb2NhdGlvbiA9IHN0ci5sYXN0SW5kZXhPZihjb21wbGV0ZUJlaGluZCkgKyBjb21w
bGV0ZUJlaGluZC5sZW5ndGgoKTsKKwl0aGlzLndvcmtpbmdDb3BpZXNbMF0uY29kZUNvbXBsZXRl
KGN1cnNvckxvY2F0aW9uLCByZXF1ZXN0b3IsIHRoaXMud2NPd25lcik7CisJYXNzZXJ0UmVzdWx0
cygibmV3W0tFWVdPUkRde25ldywgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbmV3LCBudWxsLCBb
MTgwLCAxODVdLCAiICsgCisJCQkJCQkJCQkJCShSZWxldmFuY2VDb25zdGFudHMuUl9ERUZBVUxU
ICsgUmVsZXZhbmNlQ29uc3RhbnRzLlJfUkVTT0xWRUQgKyBSZWxldmFuY2VDb25zdGFudHMuUl9J
TlRFUkVTVElORyArIFJlbGV2YW5jZUNvbnN0YW50cy5SX05PTl9SRVNUUklDVEVECisJCQkJCQkJ
CQkJCSsgUmVsZXZhbmNlQ29uc3RhbnRzLlJfQ0FTRSArIFJlbGV2YW5jZUNvbnN0YW50cy5SX0NP
TlNUUlVDVE9SKSArICJ9IiwgcmVxdWVzdG9yLmdldFJlc3VsdHMoKSk7Cit9CisvL2h0dHBzOi8v
YnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00MzMxNzgKK3B1YmxpYyB2b2lk
IHRlc3Q0MzMxNzhhKCkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbiB7CisJdGhpcy53b3JraW5n
Q29waWVzID0gbmV3IElDb21waWxhdGlvblVuaXRbMV07CisJdGhpcy53b3JraW5nQ29waWVzWzBd
ID0gZ2V0V29ya2luZ0NvcHkoCisJCQkiL0NvbXBsZXRpb24vc3JjL1guamF2YSIsCisJCQkiaW50
ZXJmYWNlIEkge1xuIiArCisJCQkiICAgIFN0cmluZyBmb28oU3RyaW5nIHgpO1xuIiArCisJCQki
fVxuIiArCisJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkiICAgIHB1YmxpYyAgU3RyaW5n
IGxvbmdNZXRob2ROYW1lKFN0cmluZyB4KSB7XG4iICsKKwkJCSIgICAgICAgIHJldHVybiBudWxs
O1xuIiArCisJCQkiICAgIH1cbiIgKworCQkJIiAgICB2b2lkIGZvbygpIHtcbiIgKworCQkJIiAg
ICAJWCB4ID0gbmV3IFgoKTtcbiIgKworCQkJIiAgICAJSSBpID0gSTo6bmVcbiIgKworCQkJIiAg
ICAgICBTeXN0ZW0ub3V0LnByaW50bG4oKTtcbiIgKworCQkJIiAgICB9XG4iICsKKwkJCSJ9XG4i
KTsKKworCUNvbXBsZXRpb25UZXN0c1JlcXVlc3RvcjIgcmVxdWVzdG9yID0gbmV3IENvbXBsZXRp
b25UZXN0c1JlcXVlc3RvcjIodHJ1ZSwgdHJ1ZSwgdHJ1ZSwgZmFsc2UpOworCXJlcXVlc3Rvci5h
bGxvd0FsbFJlcXVpcmVkUHJvcG9zYWxzKCk7CisJU3RyaW5nIHN0ciA9IHRoaXMud29ya2luZ0Nv
cGllc1swXS5nZXRTb3VyY2UoKTsKKwlTdHJpbmcgY29tcGxldGVCZWhpbmQgPSAibmUiOworCWlu
dCBjdXJzb3JMb2NhdGlvbiA9IHN0ci5sYXN0SW5kZXhPZihjb21wbGV0ZUJlaGluZCkgKyBjb21w
bGV0ZUJlaGluZC5sZW5ndGgoKTsKKwl0aGlzLndvcmtpbmdDb3BpZXNbMF0uY29kZUNvbXBsZXRl
KGN1cnNvckxvY2F0aW9uLCByZXF1ZXN0b3IsIHRoaXMud2NPd25lcik7CisJYXNzZXJ0UmVzdWx0
cygiIiwgcmVxdWVzdG9yLmdldFJlc3VsdHMoKSk7Cit9CiB9CiNQIG9yZy5lY2xpcHNlLmpkdC5j
b3JlCmRpZmYgLS1naXQgY29kZWFzc2lzdC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29kZWFz
c2lzdC9Db21wbGV0aW9uRW5naW5lLmphdmEgY29kZWFzc2lzdC9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29kZWFzc2lzdC9Db21wbGV0aW9uRW5naW5lLmphdmEKaW5kZXggZmFmOGVkNC4uZWY4
MjhmOSAxMDA2NDQKLS0tIGNvZGVhc3Npc3Qvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvZGVh
c3Npc3QvQ29tcGxldGlvbkVuZ2luZS5qYXZhCisrKyBjb2RlYXNzaXN0L29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb2RlYXNzaXN0L0NvbXBsZXRpb25FbmdpbmUuamF2YQpAQCAtMjgwNCw0ICsy
ODA0LDggQEAKIAkJCVR5cGVCaW5kaW5nIHJlY2VpdmVyVHlwZSA9IChUeXBlQmluZGluZykgcXVh
bGlmaWVkQmluZGluZzsKIAkJCWlmIChyZWNlaXZlclR5cGUgIT0gbnVsbCAmJiByZWNlaXZlclR5
cGUgaW5zdGFuY2VvZiBSZWZlcmVuY2VCaW5kaW5nKSB7CisJCQkJaWYgKCEocmVjZWl2ZXJUeXBl
LmlzSW50ZXJmYWNlKCkgfHwgdGhpcy5yZXF1ZXN0b3IuaXNJZ25vcmVkKENvbXBsZXRpb25Qcm9w
b3NhbC5LRVlXT1JEKSkpIHsKKwkJCQkJdGhpcy5hc3Npc3ROb2RlSXNDb25zdHJ1Y3RvciA9IHRy
dWU7CisJCQkJCWZpbmRLZXl3b3Jkcyh0aGlzLmNvbXBsZXRpb25Ub2tlbiwgbmV3IGNoYXJbXVtd
IHsgS2V5d29yZHMuTkVXIH0sIGZhbHNlLCBmYWxzZSk7CisJCQkJfQogCQkJCWZpbmRNZXRob2Rz
KAogCQkJCQkJdGhpcy5jb21wbGV0aW9uVG9rZW4sCkBAIC04MTgyLDQgKzgxODYsNyBAQAogCQkJ
CQlyZWxldmFuY2UgKz0gY29tcHV0ZVJlbGV2YW5jZUZvclF1YWxpZmljYXRpb24oZmFsc2UpOwog
CQkJCX0KKwkJCQlpZiAoQ2hhck9wZXJhdGlvbi5lcXVhbHMoY2hvaWNlc1tpXSwgS2V5d29yZHMu
TkVXKSkgeworCQkJCQlyZWxldmFuY2UgKz0gY29tcHV0ZVJlbGV2YW5jZUZvckNvbnN0cnVjdG9y
KCk7CisJCQkJfQogCQkJCXRoaXMubm9Qcm9wb3NhbCA9IGZhbHNlOwogCQkJCWlmKCF0aGlzLnJl
cXVlc3Rvci5pc0lnbm9yZWQoQ29tcGxldGlvblByb3Bvc2FsLktFWVdPUkQpKSB7
</data>

          </attachment>
      

    </bug>

</bugzilla>