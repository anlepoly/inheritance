<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>435805</bug_id>
          
          <creation_ts>2014-05-26 11:37:00 -0400</creation_ts>
          <short_desc>[1.8][compiler][null] Java 8 compiler does not recognize declaration style null annotations</short_desc>
          <delta_ts>2015-03-10 17:18:42 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3.2</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          <see_also>https://bugs.eclipse.org/bugs/show_bug.cgi?id=415179</see_also>
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.5 M4</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Frits Jalvingh">jal</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>andrewbass</cc>
    
    <cc>cbartolo</cc>
    
    <cc>daniel_megert</cc>
    
    <cc>jarthana</cc>
    
    <cc>loskutov</cc>
    
    <cc>manpalat</cc>
    
    <cc>shankhba</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2407235</commentid>
    <comment_count>0</comment_count>
    <who name="Frits Jalvingh">jal</who>
    <bug_when>2014-05-26 11:37:24 -0400</bug_when>
    <thetext>Using Eclipse Kepler with the Java 8 update.
Project uses Java 8 as language level and old-style annotations. This is a Java 7 project that used the nullness annotations extensively and that is being upgraded to Java 8.

The following code:
package to.etc.saram;

import javax.annotation.*;

public class TestNulls {
	public void testCase(@Nullable String theValue) {
		int len = theValue.length();					// Is nullable, so should report error here.
	}
}
fails to report any error or warning on the dereference of theValue which can be null there.

The annotations are defined as java &lt; 8 declaration style annotations (the JSR305 ones):
package javax.annotation;

import java.lang.annotation.*;

@Documented
@Retention(RetentionPolicy.CLASS)
@Target({ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER, ElementType.LOCAL_VARIABLE})
public @interface Nullable {
	// marker annotation with no members
}

When the above code is compiled with a JavaSE-1.7 on the project build path then the code reports an error properly. Switching the JDK to JavaSE-1.8 (and thereby also switching compliance level) makes the error disappear.

I know that these should be migrated to type use annotations, but that cannot &quot;just be done&quot; in a project that already uses the declaration style annotations a lot. As far as I can see moving from declaration style to type style annotations is a rather big effort:
- the annotation&apos;s &quot;location&quot; needs to change wrt Java 8 rules. This leads to a lot of source code changes that all need to be tested.
- There seems to be a rather big incompatibility with mixing old and new style annotations inside a workspace, so that @Nonnull definitions done in a java 7 project cause errors in a dependent project which moved to java 8 (xxx does not constrain that parameter). Similar seems to be the effect that things annotated as @Nonnull in a java 7 project are not recognized as @Nonnull in a Java 8 project that uses them.

Just switching to java 8 and updating the annotations to type_use for that project causes quite some problems: more than around 1000 in my not too big project. And having this bug means moving up to Java 8 is an all-or-nothing effort unless we completely disable the nullity annotations?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2407263</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-26 12:05:19 -0400</bug_when>
    <thetext>A quick question to get investigation started:

Are you sure that &quot;your&quot; annotations have a proper @Target declaration as shown in comment 0?
I remember from other bugs that (some variant of) the findbugs annotations (misleadingly labeled &quot;JSR 305&quot;) don&apos;t define a proper @Target.


OTOH, I&apos;m aware that exactly this mix of versions (Java 8 and nullness declaration annotations) is not well supported as of now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2407614</commentid>
    <comment_count>2</comment_count>
      <attachid>243525</attachid>
    <who name="Frits Jalvingh">jal</who>
    <bug_when>2014-05-27 06:21:48 -0400</bug_when>
    <thetext>Created attachment 243525
Test workspace that exhibits the problem

Yes, they are defined like that. I added a small demo project to show it. You can show the problem easily: just switch the JDK from 1.7 (where the error shows correctly) to 1.8, and the error disappears. I used the latest Luna for this as the Kepler Java 8 compiler has too much trouble with the annotations.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2407618</commentid>
    <comment_count>3</comment_count>
    <who name="Frits Jalvingh">jal</who>
    <bug_when>2014-05-27 06:27:37 -0400</bug_when>
    <thetext>The &quot;not working together&quot; of the old and new style declarations seems to make it impossible for people that used the pre-8 annotations extensively to use Java 8 with Luna, I think. This is because the only way to get stuff right seems to be that all projects using nullity annotations must be either java 7 or 8, no mix is possible.
It seems like it should be possible to fix this? By somehow moving the java 7 style into the java 8 type?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2407620</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-27 06:32:23 -0400</bug_when>
    <thetext>Let&apos;s consider this for 4.4.1.

For Luna we simply didn&apos;t have the time to pay special attention to all combinations of version.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472057</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-26 19:12:26 -0400</bug_when>
    <thetext>running out of time for M3</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2475180</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-11-01 21:21:51 -0400</bug_when>
    <thetext>I have a fix under test.

In many locations in the compiler we simply checked the source level, and from that we concluded whether declaration annotations or type annotations are used. In the setting of comment 0 this obviously creates wrong results.

All these locations now use a new query LookupEnvironment.usesNullTypeAnnotations() that inspects the bindings of the configured null annotations and checks their metaTagBits.

Unfortunately, a naive strategy of loading / resolving null annotations from here easily leads to cyclic resolution, resulting in NPE in getFields() or similar breakage. Since I observed this only for BinaryTypeBinding the solution is to avoid calling the new query from BTB. Indeed all the scanXForNullAnnotation methods checked the kind of annotation for no real necessity. So remastering those methods to rely on the annotations they find rather than switching strategies per sourceLevel solves that part.

I&apos;m still wondering, what to do, if (a) a configured null annotation type is not found and (b) if nonnull and nullable are of different kinds. Should be worth an error, I guess - but we don&apos;t seem to have a good source location to report this error against, hmmm...

Awaiting hudson&apos;s answer at https://git.eclipse.org/r/35775</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2475315</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-11-02 11:59:57 -0500</bug_when>
    <thetext>After more cleanup to cope with various mixed settings, test &amp; fix have been released for 4.5 M4 via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=7530e9811f8e0b012d59fd23237f75cdb4977fd6</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2486615</commentid>
    <comment_count>8</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-11-20 12:13:33 -0500</bug_when>
    <thetext>*** Bug 445708 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2494309</commentid>
    <comment_count>9</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-12-09 03:39:05 -0500</bug_when>
    <thetext>Verified for 4.5 M4 with build I20141208-0800</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2505053</commentid>
    <comment_count>10</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-01-13 11:18:48 -0500</bug_when>
    <thetext>@Jay: would this be a candidate for 4.4.2?

In 4.4.1 we wrongly assume that null annotations in a 1.8 project are always type annotations. When more projects are migrating to 1.8, but still use declaration style null annotations they will be hit by this.

The change is kind of cross cutting but it doesn&apos;t seem to depend on anything only in Mars.

Since back porting should be accompanied with a real code review, I&apos;m not pushing this, just asking.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2505105</commentid>
    <comment_count>11</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2015-01-13 12:27:30 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #10)
&gt; @Jay: would this be a candidate for 4.4.2?
&gt; 
&gt; In 4.4.1 we wrongly assume that null annotations in a 1.8 project are always
&gt; type annotations. When more projects are migrating to 1.8, but still use
&gt; declaration style null annotations they will be hit by this.
&gt; 
&gt; The change is kind of cross cutting but it doesn&apos;t seem to depend on
&gt; anything only in Mars.
&gt; 
&gt; Since back porting should be accompanied with a real code review, I&apos;m not
&gt; pushing this, just asking.

The change looks too big for me, given it&apos;s not a critical issue.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2518531</commentid>
    <comment_count>12</comment_count>
    <who name="Andrew &apos;&apos;Bass&apos;&apos; Shcheglov">andrewbass</who>
    <bug_when>2015-02-13 06:38:19 -0500</bug_when>
    <thetext>*** Bug 459563 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2529044</commentid>
    <comment_count>13</comment_count>
    <who name="Andrey Loskutov">loskutov</who>
    <bug_when>2015-03-09 14:52:39 -0400</bug_when>
    <thetext>With 4.5 M5 (4.5.0.I20150224-0800) I see compiler errors on &quot;innocent&quot; code in &quot;legacy&quot; FindBugs annotations package edu.umd.cs.findbugs.annotations.

Source: https://code.google.com/p/findbugs/source/browse/#git%2Ffindbugs%2Fsrc%2Fjava%2Fedu%2Fumd%2Fcs%2Ffindbugs%2Fannotations

Classes with errors:

CheckForNull.java
NonNull.java
Nullable.java
PossiblyNull.java
ReturnValuesAreNonnullByDefault.java
UnknownNullness.java

Error is same for all: &quot;The nullness annotation &apos;Nonnull&apos; is not applicable at this location&quot;

Example code (https://code.google.com/p/findbugs/source/browse/findbugs/src/java/edu/umd/cs/findbugs/annotations/NonNull.java):

--------------
package edu.umd.cs.findbugs.annotations;

import java.lang.annotation.Documented;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

import javax.annotation.meta.TypeQualifierNickname;
import javax.annotation.meta.When;

@Documented
@Target({ ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER, ElementType.LOCAL_VARIABLE })
@Retention(RetentionPolicy.CLASS)
@javax.annotation.Nonnull(when = When.ALWAYS) // &lt;--- error here !!!
@TypeQualifierNickname
@Deprecated
public @interface NonNull {
}

--------------

Should I create new bug for it or reopen this one?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2529155</commentid>
    <comment_count>14</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-03-09 18:34:47 -0400</bug_when>
    <thetext>Hi Andrey,

Hm, before we take further action, can you tell me, what kind of annotation is your version of javax.annotation.Nonnull? What does it&apos;s @Target say? Does it include ElementType.TYPE?

As you report here in this bug, should I assume you are compiling at source level 1.8?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2529157</commentid>
    <comment_count>15</comment_count>
    <who name="Andrey Loskutov">loskutov</who>
    <bug_when>2015-03-09 18:38:54 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #14)
&gt; Hi Andrey,
&gt; 
&gt; Hm, before we take further action, can you tell me, what kind of annotation
&gt; is your version of javax.annotation.Nonnull? What does it&apos;s @Target say?
&gt; Does it include ElementType.TYPE?

Target is not defined, means it can be anything except type parameter.

Nonnull annotation is coming from jsr305.jar:
-----------
package javax.annotation;

import java.lang.annotation.Documented;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;

import javax.annotation.meta.TypeQualifier;
import javax.annotation.meta.TypeQualifierValidator;
import javax.annotation.meta.When;

@Documented
@TypeQualifier
@Retention(RetentionPolicy.RUNTIME)
public @interface Nonnull {
    When when() default When.ALWAYS;

    static class Checker implements TypeQualifierValidator&lt;Nonnull&gt; {

        public When forConstantValue(Nonnull qualifierqualifierArgument,
                Object value) {
            if (value == null)
                return When.NEVER;
            return When.ALWAYS;
        }
    }
}
--------
&gt; As you report here in this bug, should I assume you are compiling at source
&gt; level 1.8?

Yep.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2529161</commentid>
    <comment_count>16</comment_count>
    <who name="Andrey Loskutov">loskutov</who>
    <bug_when>2015-03-09 18:46:18 -0400</bug_when>
    <thetext>(In reply to Andrey Loskutov from comment #15)
&gt; &gt; As you report here in this bug, should I assume you are compiling at source
&gt; &gt; level 1.8?
&gt; 
&gt; Yep.

Sorry, No! I&apos;m compiling with 1.7 but my &quot;real&quot; project JDK is 1.8.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2529166</commentid>
    <comment_count>17</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-03-09 19:04:29 -0400</bug_when>
    <thetext>(In reply to Andrey Loskutov from comment #15)
&gt; (In reply to Stephan Herrmann from comment #14)
&gt; &gt; Hm, before we take further action, can you tell me, what kind of annotation
&gt; &gt; is your version of javax.annotation.Nonnull? What does it&apos;s @Target say?
&gt; &gt; Does it include ElementType.TYPE?
&gt; 
&gt; Target is not defined,

&lt;sigh&gt;

&gt; means it can be anything except type parameter.

Oh, I have to admit, that the very last sentence of JLS 8 9.6.4.1 has indeed escaped my attention so far. My bad.
 
&gt; Nonnull annotation is coming from jsr305.jar:

Did I ever ask you, who&apos;s the author of that? Probably several times already :)

&gt; --------
&gt; &gt; As you report here in this bug, should I assume you are compiling at source
&gt; &gt; level 1.8?
&gt; 
&gt; Yep.

(In reply to Andrey Loskutov from comment #16)
&gt; (In reply to Andrey Loskutov from comment #15)
&gt; &gt; &gt; As you report here in this bug, should I assume you are compiling at source
&gt; &gt; &gt; level 1.8?
&gt; &gt; 
&gt; &gt; Yep.
&gt; 
&gt; Sorry, No! I&apos;m compiling with 1.7 but my &quot;real&quot; project JDK is 1.8.

Now you got me confused. &quot;With&quot; 1.7, but &quot;real&quot;ly 1.8, so which one defines the source level? I understood you are actually compiling *with* 4.5M5 (of ECJ :) ).

Anyway, yes, please file a new bug to request that @Target-less annotations should be recognized as Java SE 7 annotations.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2529676</commentid>
    <comment_count>18</comment_count>
    <who name="Andrey Loskutov">loskutov</who>
    <bug_when>2015-03-10 17:18:42 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #17)
&gt; Anyway, yes, please file a new bug to request that @Target-less annotations
&gt; should be recognized as Java SE 7 annotations.

Bug 461878. The error is reported for both 1.7/1.8 level.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>243525</attachid>
            <date>2014-05-27 06:21:00 -0400</date>
            <delta_ts>2014-05-27 06:21:48 -0400</delta_ts>
            <desc>Test workspace that exhibits the problem</desc>
            <filename>lunatest.tgz</filename>
            <type>application/x-compressed-tar</type>
            <size>3840</size>
            <attacher name="Frits Jalvingh">jal</attacher>
            
              <data encoding="base64">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
oECBAgUKFChQkMD/ARtiSK4AoAAA
</data>

          </attachment>
      

    </bug>

</bugzilla>