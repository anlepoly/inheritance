<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>425743</bug_id>
          
          <creation_ts>2014-01-15 07:33:00 -0500</creation_ts>
          <short_desc>[1.8][api] CompilationUnit#findDeclaringNode(IBinding binding) returns null for type inferred lambda parameter</short_desc>
          <delta_ts>2014-02-24 19:03:54 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3.1</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Noopur Gupta">noopur_gupta</reporter>
          <assigned_to name="Manoj Palat Away Until May 11 2015">manpalat</assigned_to>
          <cc>anchakrk</cc>
    
    <cc>daniel_megert</cc>
    
    <cc>markus_keller</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="61494"
          type_id="1"
          status="+"
          setter="srikanth_sankaran"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2349909</commentid>
    <comment_count>0</comment_count>
    <who name="Noopur Gupta">noopur_gupta</who>
    <bug_when>2014-01-15 07:33:08 -0500</bug_when>
    <thetext>Place the following code after the call to unit.reconcile(..) in org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy#reconcile(ICompilationUnit, boolean):

AbstractTypeDeclaration test= (AbstractTypeDeclaration) ast.types().get(0);
FieldDeclaration fi= (FieldDeclaration) test.bodyDeclarations().get(0);
VariableDeclarationFragment vdf= (VariableDeclarationFragment) fi.fragments().get(0);
LambdaExpression lambda= (LambdaExpression) vdf.getInitializer();
VariableDeclaration param= (VariableDeclaration) lambda.parameters().get(0);
if (param instanceof SingleVariableDeclaration) {
	IBinding binding= ((SingleVariableDeclaration) param).getName().resolveBinding();
	System.out.println(ast.findDeclaringNode(binding));
} else {
	IBinding binding= ((VariableDeclarationFragment) param).getName().resolveBinding();
	System.out.println(ast.findDeclaringNode(binding));
}

------------------------------------------------------
Edit the following example code to invoke the reconciler and check the Console view for the result:

public class C1 {
	FI fi= (x2) -&gt; x2;
}

@FunctionalInterface
interface FI {
	int foo(int n);
}

------------------------------------------------------
#findDeclaringNode returns &quot;null&quot; when there is no type specified at the lambda parameter.

If we modify the lambda expression to include the parameter type, #findDeclaringNode returns the correct AST node:

        FI fi= (int x2) -&gt; x2;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2357998</commentid>
    <comment_count>1</comment_count>
      <attachid>239576</attachid>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2014-02-03 10:14:17 -0500</bug_when>
    <thetext>Created attachment 239576
Proposed Patch

bindingsmaps was missed for type elided lambda parameter. added.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2358087</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-03 12:01:30 -0500</bug_when>
    <thetext>Fix looks good.

Test refers to the wrong bug in javadoc. (Fixed)
I think it is better to assert for node kind than just that node != null (Fixed)

Released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=b399cc14c85cc6279d3fbdd38ff116c9655dc352

Thanks Manoj.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2367929</commentid>
    <comment_count>3</comment_count>
    <who name="ANIRBAN CHAKRABORTY">anchakrk</who>
    <bug_when>2014-02-24 19:03:54 -0500</bug_when>
    <thetext>Verified as working for Eclipse + Java 8 RC1 using Kepler SR1 + Eclipse Java Development Tools Patch for Java 8 Support (BETA) 1.0.0.v20140220-2054</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>239576</attachid>
            <date>2014-02-03 10:14:00 -0500</date>
            <delta_ts>2014-02-03 10:14:17 -0500</delta_ts>
            <desc>Proposed Patch</desc>
            <filename>Fix-for-Bug-425743-18api-CompilationUnitfindDeclarin.patch</filename>
            <type>text/plain</type>
            <size>2468</size>
            <attacher name="Manoj Palat Away Until May 11 2015">manpalat</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9kb20vQVNUQ29udmVydGVyMThUZXN0LmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
ZG9tL0FTVENvbnZlcnRlcjE4VGVzdC5qYXZhCmluZGV4IDgxMTMyYzIuLjAwYTJkZTUgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9kb20vQVNUQ29udmVydGVyMThUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Rv
bS9BU1RDb252ZXJ0ZXIxOFRlc3QuamF2YQpAQCAtMzk5Nyw0ICszOTk3LDI4IEBACiAJCVZhcmlh
YmxlRGVjbGFyYXRpb24gdmFyaWFibGVEZWNsYXJhdGlvbiA9IChWYXJpYWJsZURlY2xhcmF0aW9u
KSBsYW1iZGFFeHByZXNzaW9uLnBhcmFtZXRlcnMoKS5nZXQoMCk7CiAJCWNoZWNrU291cmNlUmFu
Z2UodmFyaWFibGVEZWNsYXJhdGlvbiwgImludCB4IiwgY29udGVudHMpOwogCX0KKwkvKgorCSAq
IGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00MTY1NjAsIFsx
LjhdIEluY29ycmVjdCBzb3VyY2UgcmFuZ2UgZm9yIGxhbWJkYSBleHByZXNzaW9uJ3MgcGFyYW1l
dGVyIGFmdGVyIHJlY29uY2lsaWF0aW9uCisJICovCisJcHVibGljIHZvaWQgdGVzdEJ1ZzQyNTc0
MygpIHRocm93cyBKYXZhTW9kZWxFeGNlcHRpb24geworCQlTdHJpbmcgY29udGVudHMgPQorCQkJ
CSJwdWJsaWMgY2xhc3MgWHtcbiIgKworCQkJCSIgICAgRkkgZmkgPSAoeDIpIC0+IHgyO1xuIiAr
CisJCQkJIn1cbiIgKworCQkJCSJpbnRlcmZhY2UgRkkge1xuIiArCisJCQkJIiAgICBpbnQgZm9v
KGludCBuKTtcbiIgKworCQkJCSJ9XG4iOworCQl0aGlzLndvcmtpbmdDb3B5ID0gZ2V0V29ya2lu
Z0NvcHkoIi9Db252ZXJ0ZXIxOC9zcmMvWC5qYXZhIiwgdHJ1ZS8qcmVzb2x2ZSovKTsKKwkJQVNU
Tm9kZSBub2RlID0gYnVpbGRBU1QoY29udGVudHMsIHRoaXMud29ya2luZ0NvcHksIHRydWUpOwor
CQlhc3NlcnRFcXVhbHMoIk5vdCBhIGNvbXBpbGF0aW9uIHVuaXQiLCBBU1ROb2RlLkNPTVBJTEFU
SU9OX1VOSVQsIG5vZGUuZ2V0Tm9kZVR5cGUoKSk7CisJCUNvbXBpbGF0aW9uVW5pdCBjb21waWxh
dGlvblVuaXQgPSAoQ29tcGlsYXRpb25Vbml0KSBub2RlOworCQlub2RlID0gZ2V0QVNUTm9kZShj
b21waWxhdGlvblVuaXQsIDApOworCQlGaWVsZERlY2xhcmF0aW9uIGZpID0gKChUeXBlRGVjbGFy
YXRpb24pIG5vZGUpLmdldEZpZWxkcygpWzBdOworCQlWYXJpYWJsZURlY2xhcmF0aW9uRnJhZ21l
bnQgdmRmID0gKFZhcmlhYmxlRGVjbGFyYXRpb25GcmFnbWVudCkgZmkuZnJhZ21lbnRzKCkuZ2V0
KDApOworCQlMYW1iZGFFeHByZXNzaW9uIGxhbWJkYSA9IChMYW1iZGFFeHByZXNzaW9uKSB2ZGYu
Z2V0SW5pdGlhbGl6ZXIoKTsKKwkJVmFyaWFibGVEZWNsYXJhdGlvbiBwYXJhbSA9IChWYXJpYWJs
ZURlY2xhcmF0aW9uKSBsYW1iZGEucGFyYW1ldGVycygpLmdldCgwKTsKKwkJSUJpbmRpbmcgYmlu
ZGluZyA9IHBhcmFtLmdldE5hbWUoKS5yZXNvbHZlQmluZGluZygpOworCQlBU1ROb2RlIGFzdE5v
ZGUgPSBjb21waWxhdGlvblVuaXQuZmluZERlY2xhcmluZ05vZGUoYmluZGluZyk7CisJCWFzc2Vy
dE5vdE51bGwoYXN0Tm9kZSk7CisJfQogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1RDb252ZXJ0ZXIuamF2YSBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vQVNUQ29udmVydGVy
LmphdmEKaW5kZXggZjE2OTJlNi4uODg4ZTVmZCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1RDb252ZXJ0ZXIuamF2YQorKysg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FTVENv
bnZlcnRlci5qYXZhCkBAIC0yMjMwLDYgKzIyMzAsNyBAQAogCQkJCQlpZiAodGhpcy5yZXNvbHZl
QmluZGluZ3MpIHsKIAkJCQkJCXJlY29yZE5vZGVzKHNpbXBsZU5hbWUsIGFyZ3VtZW50KTsKIAkJ
CQkJCXJlY29yZE5vZGVzKHZhcmlhYmxlRGVjbGFyYXRpb25GcmFnbWVudCwgYXJndW1lbnQpOwor
CQkJCQkJdmFyaWFibGVEZWNsYXJhdGlvbkZyYWdtZW50LnJlc29sdmVCaW5kaW5nKCk7CiAJCQkJ
CX0KIAkJCQkJdmFyaWFibGVEZWNsYXJhdGlvbkZyYWdtZW50LnNldE5hbWUoc2ltcGxlTmFtZSk7
CiAJCQkJCXZhcmlhYmxlRGVjbGFyYXRpb25GcmFnbWVudC5zZXRTb3VyY2VSYW5nZShzdGFydCwg
ZW5kIC0gc3RhcnQgKyAxKTs=
</data>

          </attachment>
      

    </bug>

</bugzilla>