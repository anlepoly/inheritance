<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>372076</bug_id>
          
          <creation_ts>2012-02-20 18:48:00 -0500</creation_ts>
          <short_desc>ASTParser.createASTs fails after parsing files with Javadoc comments on enum definitions.</short_desc>
          <delta_ts>2012-12-12 01:39:49 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.3 M4</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="John Von Seggern">vonseg</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>manpalat</cc>
    
    <cc>markus_keller</cc>
    
    <cc>Olivier_Thomann</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2068411</commentid>
    <comment_count>0</comment_count>
    <who name="John Von Seggern">vonseg</who>
    <bug_when>2012-02-20 18:48:30 -0500</bug_when>
    <thetext>Build Identifier: 

I have a standalone program (not an Eclipse plugin) that uses the org.eclipse.jdt.core.dom.ASTParser class.  I am using the classes from these jar files (listed here to identify the relevant version numbers):

    org.eclipse.core.contenttype_3.4.100.v20110423-0524.jar
    org.eclipse.core.jobs_3.5.100.v20110404.jar
    org.eclipse.core.resources_3.7.100.v20110510-0712.jar
    org.eclipse.core.runtime_3.7.0.v20110110.jar
    org.eclipse.equinox.common_3.6.0.v20110523.jar
    org.eclipse.equinox.preferences_3.4.1.R37x_v20110725.jar
    org.eclipse.jdt.core_3.7.1.v_B76_R37x.jar
    org.eclipse.osgi_3.7.1.R37x_v20110808-1106.jar

The ASTParser.createASTs method fails when Javadoc comments appear inside enum definitions.  (I&apos;ve included a test case in the &quot;Steps to Reproduce&quot; section.)

To work around this issue, I changed the &quot;parse&quot; method (the one that has &quot;int start&quot; and &quot;int end&quot; parameters) in the org.eclipse.jdt.internal.compiler.parser.Parser class to set its &quot;javadoc&quot; field to null before it calls any other methods.

I imagine there&apos;s probably a better fix.  My guess is that some other method is supposed to consume javadoc comments for enum constants.  In the long run it might be wise to assert that the parser&apos;s javadoc field is null when this &quot;parse&quot; method is called (unless of course there are cases when it should not be null).

Reproducible: Always

Steps to Reproduce:
1.  Save this definition in a file called &quot;foo.java&quot;:

enum Foo {
    /** */
    FOO
}


2.  Similarly, save this definition in a file called &quot;bar.java&quot;:

package bar;
class Bar {}


3.  Now compile and run this source file:

import org.eclipse.jdt.core.dom.AST;
import org.eclipse.jdt.core.dom.ASTParser;
import org.eclipse.jdt.core.dom.FileASTRequestor;

public final class Main {
    public static void main(String[] args) {
        final ASTParser parser = ASTParser.newParser(AST.JLS4);
        parser.setKind(ASTParser.K_COMPILATION_UNIT);
        parser.createASTs(
            new String[] {&quot;foo.java&quot;, &quot;bar.java&quot;},
            null,
            new String[] {},
            new FileASTRequestor() {},
            null);
    }
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2068419</commentid>
    <comment_count>1</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2012-02-20 20:03:17 -0500</bug_when>
    <thetext>Are you setting the compiler options to 1.5 level at least to compile properly enum types ?
It looks from your example that you are setting the ASTParser using the default values.
Try something like this:
ASTParser parser = ASTParser.newParser(AST.JLS4);
parser.setEnvironment(null, null, null, true);
parser.setResolveBindings(true);
parser.setStatementsRecovery(true);
parser.setBindingsRecovery(true);
Map compilerOptions = getCompilerOptions();
compilerOptions.put(CompilerOptions.OPTION_Compliance, CompilerOptions.VERSION_1_6);
compilerOptions.put(CompilerOptions.OPTION_Source, CompilerOptions.VERSION_1_6);
compilerOptions.put(CompilerOptions.OPTION_TargetPlatform, CompilerOptions.VERSION_1_6);
parser.setCompilerOptions(compilerOptions);
...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2068421</commentid>
    <comment_count>2</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2012-02-20 20:04:32 -0500</bug_when>
    <thetext>It would also be good to know what you are calling a failure. Do you have a stacktrace ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2068674</commentid>
    <comment_count>3</comment_count>
    <who name="John Von Seggern">vonseg</who>
    <bug_when>2012-02-21 10:23:57 -0500</bug_when>
    <thetext>As suggested, setting the appropriate compiler option prevents the exception.  (I&apos;ll close this bug report as &quot;invalid&quot;.)

For the record, here is more background about the exception.  When I run the test case, I get a null reference error in org.eclipse.jdt.internal.core.util.Util, because its &quot;log&quot; method assumes that JavaCore.getPlugin() never returns null.  (Many other callers of the &quot;getPlugin&quot; method check the return value for null.  It might be a good idea to check in that &quot;log&quot; method as well.)  If I look past the null reference error, I see and IllegalArgumentException:

java.lang.IllegalArgumentException
Exception in thread &quot;main&quot; java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convertPackage(ASTConverter.java:2818)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1201)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:1009)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:628)
	at org.eclipse.jdt.core.dom.ASTParser.createASTs(ASTParser.java:988)

The illegal argument exception happens while the ASTParser parses the second file, &quot;bar.java&quot;.  It happens because the org.eclipse.jdt.internal.compiler.parser.Parser still has a reference to the javadoc comment from the previous file.  The parser tries to associate that javadoc comment with the package declaration in &quot;bar.java&quot;, but doing so would create a node with an invalid source range: the node&apos;s start value would be greater than its end value.

As a workaround, I made the Parser nullify its javadoc field at the top of the parse method.  This prevents the parser from associating a javadoc comment from the previously parsed file with the file currently being parsed.  It looked like the kind of thing that might benefit from an assertion in the long run.  I don&apos;t know the inner-workings of this parser, so maybe such an assertion would be inappropriate.  But in this case a comment from one file was sneaking into a totally different file --- the kind of thing you&apos;d think &quot;should never happen&quot;.

Setting the compiler options resolves the whole issues.  But I&apos;m surprised the ASTParser did not raise an exception when it parsed &quot;foo.java&quot;.  If it wasn&apos;t parsing that file as an enum definition, then what was it doing?  (I guess that&apos;s just a rhetorical question.)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2069449</commentid>
    <comment_count>4</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2012-02-22 11:25:02 -0500</bug_when>
    <thetext>I could not reproduce the exception using 3.8 or 3.7 maintenance. So this has been fixed since then.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2180670</commentid>
    <comment_count>5</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2012-11-07 12:57:40 -0500</bug_when>
    <thetext>The IAE is still thrown and hidden by an NPE in master, exactly as described in comment 0 and 3.
This observation in comment 3 is quite worrisome (though I didn&apos;t verify this):
&gt; Parser still has a reference to the javadoc comment from the previous file

I&apos;ve fixed the NPE with http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=32878eed2e3a733dfb338a49d30f499b5049270d

Here&apos;s the IAE in master:

Exception in thread &quot;main&quot; java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.dom.ASTNode.setSourceRange(ASTNode.java:2648)
	at org.eclipse.jdt.core.dom.ASTConverter.convertPackage(ASTConverter.java:2815)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1200)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:291)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.parse(CompilationUnitResolver.java:471)
	at org.eclipse.jdt.core.dom.ASTParser.createASTs(ASTParser.java:990)
	at Main.main(Main.java:10)


This can also be reproduced in Eclipse: Create &quot;foo.java&quot; and &quot;bar.java&quot; in the default package of a 1.4 project. Select the two files. Run &quot;Organize Imports&quot;.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2180812</commentid>
    <comment_count>6</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2012-11-07 17:05:18 -0500</bug_when>
    <thetext>(In reply to comment #5)
&gt; This observation in comment 3 is quite worrisome (though I didn&apos;t verify
&gt; this):
&gt; &gt; Parser still has a reference to the javadoc comment from the previous file
This is actually the problem. The javadoc node is not reset when a new unit is restarted.
I have a simple fix. Running all tests.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2180848</commentid>
    <comment_count>7</comment_count>
      <attachid>223323</attachid>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2012-11-07 19:09:49 -0500</bug_when>
    <thetext>Created attachment 223323
Proposed fix

Resetting the javadoc field in the initialize(..) method and in the endParse(..) method seems to solve the problem.
It might be possible to reset the javadoc field inside the recovery itself, but this seems to be sufficient to solve this issue.

Note that you need a syntax error in the first unit with a javadoc to create the problem.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2180849</commentid>
    <comment_count>8</comment_count>
      <attachid>223324</attachid>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2012-11-07 19:39:56 -0500</bug_when>
    <thetext>Created attachment 223324
Regression test</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2180850</commentid>
    <comment_count>9</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2012-11-07 19:42:16 -0500</bug_when>
    <thetext>Jay, please take a look at the two patches.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2181732</commentid>
    <comment_count>10</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-11-09 05:30:54 -0500</bug_when>
    <thetext>(In reply to comment #9)
&gt; Jay, please take a look at the two patches.

Patch looks good to me and released it via commit:
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=da9462d198d04c44908d3d49f69b725f7fd55c77</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2193413</commentid>
    <comment_count>11</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2012-12-12 01:34:40 -0500</bug_when>
    <thetext>Verified for 4.3 M4 using I20121210-2000 build</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>223323</attachid>
            <date>2012-11-07 19:09:00 -0500</date>
            <delta_ts>2012-11-07 19:09:49 -0500</delta_ts>
            <desc>Proposed fix</desc>
            <filename>patch_372076.txt</filename>
            <type>text/plain</type>
            <size>832</size>
            <attacher name="Olivier Thomann">Olivier_Thomann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9wYXJzZXIvUGFyc2VyLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcGFyc2VyL1Bh
cnNlci5qYXZhCmluZGV4IDkwODg3YzEuLjYzMDMzMjggMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wYXJz
ZXIvUGFyc2VyLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3BhcnNlci9QYXJzZXIuamF2YQpAQCAtODY2OCw2
ICs4NjY4LDcgQEAKIAkJCXRoaXMuc2Nhbm5lci5mb3VuZFRhc2tQb3NpdGlvbnNbaV1bMF0sCiAJ
CQl0aGlzLnNjYW5uZXIuZm91bmRUYXNrUG9zaXRpb25zW2ldWzFdKTsKIAl9CisJdGhpcy5qYXZh
ZG9jID0gbnVsbDsKIAlyZXR1cm4gdGhpcy5jb21waWxhdGlvblVuaXQ7CiB9CiAvKgpAQCAtOTIz
NCw2ICs5MjM1LDcgQEAKIHB1YmxpYyB2b2lkIGluaXRpYWxpemUoYm9vbGVhbiBpbml0aWFsaXpl
TkxTKSB7CiAJLy9wb3NpdGlvbmluZyB0aGUgcGFyc2VyIGZvciBhIG5ldyBjb21waWxhdGlvbiB1
bml0CiAJLy9hdm9pZGluZyBzdGFjayByZWFsbG9jYXRpb24gYW5kIGFsbCB0aGF0Li4uLgorCXRo
aXMuamF2YWRvYyA9IG51bGw7CiAJdGhpcy5hc3RQdHIgPSAtMTsKIAl0aGlzLmFzdExlbmd0aFB0
ciA9IC0xOwogCXRoaXMuZXhwcmVzc2lvblB0ciA9IC0xOw==
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>223324</attachid>
            <date>2012-11-07 19:39:00 -0500</date>
            <delta_ts>2012-11-07 19:39:56 -0500</delta_ts>
            <desc>Regression test</desc>
            <filename>patch_372076_tests.txt</filename>
            <type>text/plain</type>
            <size>2110</size>
            <attacher name="Olivier Thomann">Olivier_Thomann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9kb20vU3RhbmRBbG9uZUFTVFBhcnNlclRlc3QuamF2YSBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQv
Y29yZS90ZXN0cy9kb20vU3RhbmRBbG9uZUFTVFBhcnNlclRlc3QuamF2YQppbmRleCBkZGU2OThl
Li43YTQ0Zjg4IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxl
ci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvZG9tL1N0YW5kQWxvbmVBU1RQYXJzZXJU
ZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2RvbS9TdGFuZEFsb25lQVNUUGFyc2VyVGVzdC5qYXZh
CkBAIC0xNyw2ICsxNyw3IEBACiBpbXBvcnQgamF2YS5pby5Xcml0ZXI7CiBpbXBvcnQgamF2YS51
dGlsLkxpc3Q7CiAKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5KYXZhQ29yZTsKIGltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQVNUOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5j
b3JlLmRvbS5BU1ROb2RlOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5BU1RQYXJz
ZXI7CkBAIC0zNDgsNCArMzQ5LDY0IEBACiAJCQlmaWxlWS5kZWxldGUoKTsKIAkJfQogCX0KKwor
CXB1YmxpYyB2b2lkIHRlc3Q3KCkgdGhyb3dzIElPRXhjZXB0aW9uIHsKKwkJRmlsZSByb290RGly
ID0gbmV3IEZpbGUoU3lzdGVtLmdldFByb3BlcnR5KCJqYXZhLmlvLnRtcGRpciIpKTsKKworCQlT
dHJpbmcgY29udGVudHMgPQorCQkJImVudW0gWCB7XG4iICsgCisJCQkiICAgICAgICAgICAgICAv
KiogKi9cbiIgKyAKKwkJCSIgICAgRk9PXG4iICsgCisJCQkifSI7CisJCQorCQlGaWxlIGZpbGUg
PSBuZXcgRmlsZShyb290RGlyLCAiWC5qYXZhIik7CisJCVdyaXRlciB3cml0ZXIgPSBudWxsOwor
CQl0cnkgeworCQkJd3JpdGVyID0gbmV3IEJ1ZmZlcmVkV3JpdGVyKG5ldyBGaWxlV3JpdGVyKGZp
bGUpKTsKKwkJCXdyaXRlci53cml0ZShjb250ZW50cyk7CisJCX0gZmluYWxseSB7CisJCQlpZiAo
d3JpdGVyICE9IG51bGwpIHsKKwkJCQl0cnkgeworCQkJCQl3cml0ZXIuY2xvc2UoKTsKKwkJCQl9
IGNhdGNoKElPRXhjZXB0aW9uIGUpIHsKKwkJCQkJLy8gaWdub3JlCisJCQkJfQorCQkJfQorCQl9
CisKKwkJU3RyaW5nIGNvbnRlbnRzMiA9CisJCQkicGFja2FnZSBwO1xuIiArIAorCQkJImNsYXNz
IFkge30iOworCQlGaWxlIHBhY2thZ2VEaXIgPSBuZXcgRmlsZShyb290RGlyLCAicCIpOworCQlw
YWNrYWdlRGlyLm1rZGlyKCk7CisJCUZpbGUgZmlsZVkgPSBuZXcgRmlsZShwYWNrYWdlRGlyLCAi
WS5qYXZhIik7CisJCVdyaXRlciB3cml0ZXIyID0gbnVsbDsKKwkJdHJ5IHsKKwkJCXdyaXRlcjIg
PSBuZXcgQnVmZmVyZWRXcml0ZXIobmV3IEZpbGVXcml0ZXIoZmlsZVkpKTsKKwkJCXdyaXRlcjIu
d3JpdGUoY29udGVudHMyKTsKKwkJfSBmaW5hbGx5IHsKKwkJCWlmICh3cml0ZXIyICE9IG51bGwp
IHsKKwkJCQl0cnkgeworCQkJCQl3cml0ZXIyLmNsb3NlKCk7CisJCQkJfSBjYXRjaChJT0V4Y2Vw
dGlvbiBlKSB7CisJCQkJCS8vIGlnbm9yZQorCQkJCX0KKwkJCX0KKwkJfQorCisJCXRyeSB7CisJ
CQlBU1RQYXJzZXIgcGFyc2VyID0gQVNUUGFyc2VyLm5ld1BhcnNlcihBU1QuSkxTNCk7CisJCQlw
YXJzZXIuc2V0S2luZChBU1RQYXJzZXIuS19DT01QSUxBVElPTl9VTklUKTsKKwkJCXBhcnNlci5z
ZXRDb21waWxlck9wdGlvbnMoSmF2YUNvcmUuZ2V0T3B0aW9ucygpKTsKKwkJCXBhcnNlci5jcmVh
dGVBU1RzKAorCQkJCQluZXcgU3RyaW5nW10geyBmaWxlLmdldENhbm9uaWNhbFBhdGgoKSwgZmls
ZVkuZ2V0Q2Fub25pY2FsUGF0aCgpIH0sCisJCQkJCW51bGwsCisJCQkJCW5ldyBTdHJpbmdbXSB7
fSwKKwkJCQkJbmV3IEZpbGVBU1RSZXF1ZXN0b3IoKSB7fSwKKwkJCQkJbnVsbCk7CisJCX0gZmlu
YWxseSB7CisJCQlmaWxlLmRlbGV0ZSgpOworCQkJZmlsZVkuZGVsZXRlKCk7CisJCX0KKwl9CiB9
Cg==
</data>

          </attachment>
      

    </bug>

</bugzilla>