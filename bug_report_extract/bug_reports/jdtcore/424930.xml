<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>424930</bug_id>
          
          <creation_ts>2014-01-06 08:07:00 -0500</creation_ts>
          <short_desc>[1.8][compiler] Regression: &quot;Cannot infer type arguments&quot; error from compiler.</short_desc>
          <delta_ts>2014-01-30 09:23:20 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>424053</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>martin</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2346020</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-06 08:07:11 -0500</bug_when>
    <thetext>// --
import java.util.ArrayDeque;
import java.util.Deque;
import java.util.function.Supplier;

public class X&lt;S, T extends Deque&lt;S&gt;&gt; {
    private final Supplier&lt;T&gt; supplier;

    public X(Supplier&lt;T&gt; supplier) {
        this.supplier = supplier;
    }
    
    public static &lt;S&gt; X&lt;S, Deque&lt;S&gt;&gt; newDefaultMap(int dequeCapacity) {
        return new X&lt;&gt;(() -&gt; new ArrayDeque&lt;&gt;(dequeCapacity));
    }
}

triggers an error: &quot;Cannot infer type arguments for X&lt;&gt;&quot;

This code used to work earlier I believe.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2346021</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-06 08:08:06 -0500</bug_when>
    <thetext>Martin, thanks for the test case, we will take a look.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2346104</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-06 10:18:49 -0500</bug_when>
    <thetext>Perhaps a duplicate of bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=424205</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2356615</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-30 09:23:20 -0500</bug_when>
    <thetext>Three parts to the solution:

In IC18.inferInvocationType(BoundSet..) we call resolve() before all constraints have been incorporated. Hence we inferred some types to Object although better information was already waiting in some existing (but not-incorporated) constraints/bounds. Calling incorporate() before resolve() fixes this.

Next we got an error against variable &apos;dequeCapacity&apos;. Problem was: this SNR was resolved twice, second attempt signalled the bogus error. For now I&apos;ve inserted one more call to unresolve() and raised bug 426996 as a reminder that we&apos;d actually love to get rid of that method.

During experiments I observed an NPE because the inner AE.binding was null - due to compile error, but inference didn&apos;t know about that error (it was ignored because we&apos;re working with a lambda copy) and needed to access that binding. I&apos;m now assuming that a null binding doesn&apos;t require adding new constraints, the root error will be reported later.

Three new tests plus the above fixes released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=5dbd397b4fc5184876eeebb1e1ea9235db66fa0e</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>