<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>435399</bug_id>
          
          <creation_ts>2014-05-21 09:25:00 -0400</creation_ts>
          <short_desc>IllegalStateException in Java Compiler related to Null Analysis and Generics</short_desc>
          <delta_ts>2014-10-28 19:24:56 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Mac OS X</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.4 RC3</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Till Brychcy">register.eclipse</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>awang060843</cc>
    
    <cc>daniel_megert</cc>
    
    <cc>hendy</cc>
    
    <cc>jarthana</cc>
    
    <cc>manpalat</cc>
    
    <cc>markus_keller</cc>
    
    <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="62638"
          type_id="1"
          status="+"
          setter="jarthana"
    />
    <flag name="review"
          id="62640"
          type_id="1"
          status="+"
          setter="manpalat"
    />
    <flag name="review"
          id="62642"
          type_id="1"
          status="+"
          setter="markus_keller"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2404872</commentid>
    <comment_count>0</comment_count>
    <who name="Till Brychcy">register.eclipse</who>
    <bug_when>2014-05-21 09:25:25 -0400</bug_when>
    <thetext>- Reproducing the Bug:
Create a new Project with Java 8, make sure that &quot;Enable Annotation-Based Null Analysis&quot; is enabled and the configured Null Annotations are the new ones with @Target({ TYPE_USE })

- Create a Class Bug1:
package bug;

import org.eclipse.jdt.annotation.Nullable;

public class Bug1 {
    public static &lt;T&gt; void method(@Nullable T value, T defaultValue) {
    }
    public void invoke() {
        method(Integer.valueOf(1), Boolean.TRUE);
    }
}

The following exception happens in Eclipse 4.4RC1 (and eclipse-SDK-I20140520-2000-macosx-cocoa-x86_64.tar.gz, too):

org.eclipse.jdt.internal.compiler.lookup.AnnotatableTypeSystem.getAnnotatedType(AnnotatableTypeSystem.java:271)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404908</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-21 09:54:50 -0400</bug_when>
    <thetext>thanks for the report.
I&apos;ll take a quick look later today.

For now: Do you have a bit more of the stack trace?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404939</commentid>
    <comment_count>2</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-05-21 10:17:41 -0400</bug_when>
    <thetext>Call stack:

at org.eclipse.jdt.internal.compiler.lookup.AnnotatableTypeSystem.getAnnotatedType(AnnotatableTypeSystem.java:271)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createAnnotatedType(LookupEnvironment.java:988)
	at org.eclipse.jdt.internal.compiler.lookup.BoundSet$ThreeSets.combineAndUseNullHints(BoundSet.java:273)
	at org.eclipse.jdt.internal.compiler.lookup.BoundSet.getInstantiation(BoundSet.java:402)
	at org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.getSolutions(InferenceContext18.java:897)
	at org.eclipse.jdt.internal.compiler.lookup.ParameterizedGenericMethodBinding.computeCompatibleMethod(ParameterizedGenericMethodBinding.java:154)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:739)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:695)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1760)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1661)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2612)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.findMethodBinding(MessageSend.java:866)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:698)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1020)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:619)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:299)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:529)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1207)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1320)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:587)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:929)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:974)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:205)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404943</commentid>
    <comment_count>3</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-05-21 10:21:36 -0400</bug_when>
    <thetext>Please see Bug 434607.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2405156</commentid>
    <comment_count>4</comment_count>
    <who name="Till Brychcy">register.eclipse</who>
    <bug_when>2014-05-21 15:17:20 -0400</bug_when>
    <thetext>when the exception happens, the value of type.kind() is 8196=Binding.INTERSECTION_TYPE
type.toString=java.lang.Object&amp;Comparable&lt;?&gt;&amp;java.io.Serializable</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2405160</commentid>
    <comment_count>5</comment_count>
    <who name="Till Brychcy">register.eclipse</who>
    <bug_when>2014-05-21 15:24:49 -0400</bug_when>
    <thetext>The following patch seems to fix the problem:

diff --git a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/AnnotatableTypeSystem.java b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/AnnotatableTypeSystem.java
index fa85a8b..db34837 100644
--- a/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/AnnotatableTypeSystem.java
+++ b/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/AnnotatableTypeSystem.java
@@ -267,6 +267,8 @@
 					enclosingType = annotatedType;
 				}
 				break;
+			case Binding.INTERSECTION_TYPE:
+				return type;
 			default:
 				throw new IllegalStateException();
 		}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2405174</commentid>
    <comment_count>6</comment_count>
    <who name="Till Brychcy">register.eclipse</who>
    <bug_when>2014-05-21 15:51:59 -0400</bug_when>
    <thetext>(probably not as a real fix as it doesn&apos;t propagate the annotations, but at least the compiler doesn&apos;t crash)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2405826</commentid>
    <comment_count>7</comment_count>
      <attachid>243411</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-22 14:38:31 -0400</bug_when>
    <thetext>Created attachment 243411
draft patch

Patch for discussion re possible inclusion in Luna.

It might be as simple as indeed expecting a couple more kinds.

Anyway, post Luna we should seek advice from Srikanth regarding the underlying design.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2405829</commentid>
    <comment_count>8</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-22 14:51:24 -0400</bug_when>
    <thetext>Possible duplicates:

- bug 434607
- bug 435539

For now I only did RunAllJava8Tests against the patch: green.

Tentatively pulling into 4.4, subject to discussion in the team.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2405833</commentid>
    <comment_count>9</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-22 14:54:06 -0400</bug_when>
    <thetext>*** Bug 435539 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2406021</commentid>
    <comment_count>10</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-05-23 00:45:00 -0400</bug_when>
    <thetext>*** Bug 434607 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2407581</commentid>
    <comment_count>11</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2014-05-27 05:26:30 -0400</bug_when>
    <thetext>+1 and as mentioned in comment 7, to be consulted with Srikanth</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2407767</commentid>
    <comment_count>12</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-27 08:52:14 -0400</bug_when>
    <thetext>+1 for the patch</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2408509</commentid>
    <comment_count>13</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-05-27 13:48:34 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #7)
&gt; Created attachment 243411 [details] [diff]
&gt; draft patch

+1. Looks good, solves the issue, yields reasonable DOM AST bindings. I looked for other code locations that would need a similar fix, but didn&apos;t find any.

Released with http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=f52400ac5289985fb63fad2898c4202926c0d38e</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2409335</commentid>
    <comment_count>14</comment_count>
    <who name="Till Brychcy">register.eclipse</who>
    <bug_when>2014-05-28 13:15:45 -0400</bug_when>
    <thetext>thank you for your work.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2411767</commentid>
    <comment_count>15</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2014-06-03 01:43:27 -0400</bug_when>
    <thetext>Verified for Eclipse Luna RC3 Build id: I20140602-2000</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2430489</commentid>
    <comment_count>16</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-07-22 15:32:12 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #7)
&gt; It might be as simple as indeed expecting a couple more kinds.
&gt; 
&gt; Anyway, post Luna we should seek advice from Srikanth regarding the
&gt; underlying design.

Srikanth, do you have a minute to check if this change fits into your original design (and if more changes are needed)? 
Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2431741</commentid>
    <comment_count>17</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-07-24 13:01:38 -0400</bug_when>
    <thetext>Silly of me asking Srikanth for comment and not putting him on Cc

Thanks, Jay, for correcting :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2442904</commentid>
    <comment_count>18</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-08-25 04:36:33 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #16)
&gt; (In reply to Stephan Herrmann from comment #7)
&gt; &gt; It might be as simple as indeed expecting a couple more kinds.
&gt; &gt; 
&gt; &gt; Anyway, post Luna we should seek advice from Srikanth regarding the
&gt; &gt; underlying design.
&gt; 
&gt; Srikanth, do you have a minute to check if this change fits into your
&gt; original design (and if more changes are needed)? 
&gt; Thanks.

Sorry for the delay. The changes should be fine if the clients can cope
with there being multiple references to equally annotated equal underlying
types (that all will share the same TypeBinding.id value)

To see this, replicate the method() call in the sample code and see
what org.eclipse.jdt.internal.compiler.lookup.AnnotatableTypeSystem.getAnnotatedType(TypeBinding, AnnotationBinding[][])

returns for the two intersection types. 

(1) The underlying intersection type (WildcardBinding) object is the same.
(2) Annotations are equal.
(3) but you get two different annotated type bindings (that share id)

Is this OK ? Should be but for wasting memory ? 

The fully correct fix would be to add a case Binding.INTERSECTION_TYPE to
org.eclipse.jdt.internal.compiler.lookup.AnnotatableTypeSystem.getAnnotatedType(TypeBinding, TypeBinding, AnnotationBinding[])

Do you want to take a shot at this ? 

A test for identity of bindings would be along the ;lines of

org.eclipse.jdt.core.tests.dom.TypeBindingTests308.testIntersectionCastType()</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2443342</commentid>
    <comment_count>19</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-08-26 03:06:30 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #18)
&gt; (In reply to Stephan Herrmann from comment #16)
&gt; &gt; (In reply to Stephan Herrmann from comment #7)
&gt; &gt; &gt; It might be as simple as indeed expecting a couple more kinds.
&gt; &gt; &gt; 
&gt; &gt; &gt; Anyway, post Luna we should seek advice from Srikanth regarding the
&gt; &gt; &gt; underlying design.
&gt; &gt; 
&gt; &gt; Srikanth, do you have a minute to check if this change fits into your
&gt; &gt; original design (and if more changes are needed)? 
&gt; &gt; Thanks.
&gt; 
&gt; Sorry for the delay. The changes should be fine if the clients can cope
&gt; with there being multiple references to equally annotated equal underlying
&gt; types (that all will share the same TypeBinding.id value)
&gt; 
&gt; To see this, replicate the method() call in the sample code and see
&gt; what
&gt; org.eclipse.jdt.internal.compiler.lookup.AnnotatableTypeSystem.
&gt; getAnnotatedType(TypeBinding, AnnotationBinding[][])
&gt; 
&gt; returns for the two intersection types. 
&gt; 
&gt; (1) The underlying intersection type (WildcardBinding) object is the same.
&gt; (2) Annotations are equal.
&gt; (3) but you get two different annotated type bindings (that share id)
&gt; 
&gt; Is this OK ? Should be but for wasting memory ? 
&gt; 
&gt; The fully correct fix would be to add a case Binding.INTERSECTION_TYPE to
&gt; org.eclipse.jdt.internal.compiler.lookup.AnnotatableTypeSystem.
&gt; getAnnotatedType(TypeBinding, TypeBinding, AnnotationBinding[])

I went ahead and fixed this in http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=94834929c4a0c0b77e8b90f18eeb6517873b69ab.

I could verify under the debugger that we reissue the annotated intersection
type. I couldn&apos;t easily write a junit to verify this though since these are 
fabricated transient types.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2470816</commentid>
    <comment_count>20</comment_count>
    <who name="Hendy Irawan">hendy</who>
    <bug_when>2014-10-24 00:05:37 -0400</bug_when>
    <thetext>I still got this on 4.4.1 : (rio.dev PC)

eclipse.buildId=4.4.1.M20140925-0400
java.version=1.8.0_05
java.vendor=Oracle Corporation
BootLoader constants: OS=linux, ARCH=x86_64, WS=gtk, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os linux -ws gtk -arch x86_64 -product org.eclipse.epp.package.jee.product

This is a continuation of log file /home/rio/space_spring/.metadata/.bak_0.log
Created Time: 2014-10-23 23:53:13.037

java.lang.IllegalStateException
	at org.eclipse.jdt.internal.compiler.lookup.AnnotatableTypeSystem.getAnnotatedType(AnnotatableTypeSystem.java:269)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createAnnotatedType(LookupEnvironment.java:988)
	at org.eclipse.jdt.internal.compiler.lookup.MethodBinding.fillInDefaultNonNullness18(MethodBinding.java:520)
	at org.eclipse.jdt.internal.compiler.lookup.ImplicitNullAnnotationVerifier.checkImplicitNullAnnotations(ImplicitNullAnnotationVerifier.java:151)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:754)
	at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.resolveType(AllocationExpression.java:428)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:648)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1018)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:619)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:299)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:529)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1207)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1292)
	at org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression.resolveTypeForQualifiedAllocationExpression(QualifiedAllocationExpression.java:539)
	at org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression.resolveType(QualifiedAllocationExpression.java:283)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:648)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1018)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:619)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:299)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:529)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1207)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1317)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:587)
	at org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:771)
	at org.eclipse.jdt.internal.compiler.ProcessTaskManager.run(ProcessTaskManager.java:137)
	at java.lang.Thread.run(Thread.java:745)

It happens for pretty much all projects in our workspace, but curiously it only happens in one PC. Other PCs (similar OS and Eclipse configuration) also have 4.4.1 with the same projects but have no problems, even with Null Annotations turned on.

The workaround &quot;disable null analysis&quot; works, but I&apos;m confused why null analysis throws error on this PC. :(</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2470817</commentid>
    <comment_count>21</comment_count>
    <who name="Hendy Irawan">hendy</who>
    <bug_when>2014-10-24 00:11:31 -0400</bug_when>
    <thetext>BTW I have mixed Java7 and Java8 projects, however only Java8 JDK is configured in Eclipse (which shouldn&apos;t be an issue...)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2470818</commentid>
    <comment_count>22</comment_count>
    <who name="Hendy Irawan">hendy</who>
    <bug_when>2014-10-24 00:21:05 -0400</bug_when>
    <thetext>BTW I also get compiler errors such as in code:

public class JoinedCollectionView&lt;E&gt; implements Collection&lt;E&gt; {

error: 

The type JoinedCollectionView&lt;E&gt; must implement the inherited abstract method Collection&lt;E&gt;.parallelStream()

(note: the project level is using JavaSE-1.7 but the JDK is Oracle JDK 8u20)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2470915</commentid>
    <comment_count>23</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-24 05:00:37 -0400</bug_when>
    <thetext>Early next week, we are backporting a whole bunch of fixes we made to
Mars back on to Luna. It would be good to upgrade to a maintenance build
soon after that and check.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471080</commentid>
    <comment_count>24</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-24 08:44:01 -0400</bug_when>
    <thetext>(In reply to Hendy Irawan from comment #21)
&gt; BTW I have mixed Java7 and Java8 projects, however only Java8 JDK is
&gt; configured in Eclipse (which shouldn&apos;t be an issue...)

Compiling Java7 projects against JRE 8 is strongly discouraged. There&apos;s lots of stuff in a JRE 8, which a Java7 compiler cannot make sense of and should never see.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472965</commentid>
    <comment_count>25</comment_count>
    <who name="Hendy Irawan">hendy</who>
    <bug_when>2014-10-28 11:40:37 -0400</bug_when>
    <thetext>@Stephan : Isn&apos;t it why we have &quot;source level&quot;?

There are projects &amp; libraries with differing source levels: 1.5, 1.6, 1.7, and 1.8. IMHO installing 4 JDKs for building each project with a matching JDK with the source level isn&apos;t very practical. (also JDK5 and JDK6 is no longer supported anyway).

BTW this is just build time / or Eclipse IDE time. (I&apos;m aware that some Java7 apps don&apos;t run well (yet) under JRE 8). In my case there is no issue building the projects using Maven (outside Eclipse).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2473124</commentid>
    <comment_count>26</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-28 19:24:56 -0400</bug_when>
    <thetext>(In reply to Hendy Irawan from comment #25)
&gt; @Stephan : Isn&apos;t it why we have &quot;source level&quot;?

Example where source level 1.7 and JRE 8 get you into a grey area: default methods. How should a compiler configured for 1.7 handle a source file that implements a 1.8 interface containing default methods? At source level 1.7 the compiler by definition doesn&apos;t know about default methods. So?

The other obvious problem: compilation will not detect when you are trying to invoke API from JRE 8, which will not be present when running on JRE 7. OTOH, if you want to run the application on JRE 8 anyway, what&apos;s the use in setting source 1.7?

Note, that installing the JREs for all relevant versions suffices, no need to have the full JDK.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>243411</attachid>
            <date>2014-05-22 14:38:00 -0400</date>
            <delta_ts>2014-05-22 14:38:31 -0400</delta_ts>
            <desc>draft patch</desc>
            <filename>Bug-435399--IllegalStateException-in-Java-Compiler-r.patch</filename>
            <type>text/plain</type>
            <size>2205</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxUeXBlQW5ub3Rh
dGlvblRlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9v
cmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxUeXBlQW5u
b3RhdGlvblRlc3QuamF2YQppbmRleCA2NDQ0ZDZlLi44MzAzZGNlIDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OdWxsVHlwZUFubm90YXRpb25UZXN0LmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pk
dC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbFR5cGVBbm5vdGF0aW9uVGVzdC5q
YXZhCkBAIC01NDIxLDQgKzU0MjEsMjMgQEAKIAkJIk51bGwgY29uc3RyYWludCBtaXNtYXRjaDog
VGhlIHR5cGUgXCdATnVsbGFibGUgQXJyYXlMaXN0PEBOdWxsYWJsZSBMaXN0PFN0cmluZz4+XCcg
aXMgbm90IGEgdmFsaWQgc3Vic3RpdHV0ZSBmb3IgdGhlIHR5cGUgcGFyYW1ldGVyIFwnVCBleHRl
bmRzIEBOdWxsYWJsZSBMaXN0PEBOb25OdWxsIExpc3Q8Uz4+XCdcbiIgKyAKIAkJIi0tLS0tLS0t
LS1cbiIpOwogfQorcHVibGljIHZvaWQgdGVzdEJ1ZzQzNTM5OSgpIHsKKwlydW5Db25mb3JtVGVz
dFdpdGhMaWJzKAorCQluZXcgU3RyaW5nW10geworCQkJImJ1Zy9CdWcxLmphdmEiLAorCQkJInBh
Y2thZ2UgYnVnO1xuIiArIAorCQkJIlxuIiArIAorCQkJImltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
YW5ub3RhdGlvbi5OdWxsYWJsZTtcbiIgKyAKKwkJCSJcbiIgKyAKKwkJCSJwdWJsaWMgY2xhc3Mg
QnVnMSB7XG4iICsgCisJCQkiICAgIHB1YmxpYyBzdGF0aWMgPFQ+IHZvaWQgbWV0aG9kKEBOdWxs
YWJsZSBUIHZhbHVlLCBUIGRlZmF1bHRWYWx1ZSkge1xuIiArIAorCQkJIiAgICB9XG4iICsgCisJ
CQkiICAgIHB1YmxpYyB2b2lkIGludm9rZSgpIHtcbiIgKyAKKwkJCSIgICAgICAgIG1ldGhvZChJ
bnRlZ2VyLnZhbHVlT2YoMSksIEJvb2xlYW4uVFJVRSk7XG4iICsgCisJCQkiICAgIH1cbiIgKyAK
KwkJCSJ9XG4iCisJCX0sCisJCWdldENvbXBpbGVyT3B0aW9ucygpLAorCQkiIik7Cit9CiB9CmRp
ZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0Fubm90YXRhYmxlVHlwZVN5c3RlbS5qYXZhIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2xvb2t1cC9Bbm5vdGF0YWJsZVR5cGVTeXN0ZW0uamF2YQppbmRleCBmYTg1YThiLi4yZGNl
ZTA3IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0Fubm90YXRhYmxlVHlwZVN5c3RlbS5qYXZh
CisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9sb29rdXAvQW5ub3RhdGFibGVUeXBlU3lzdGVtLmphdmEKQEAgLTIyOCw2
ICsyMjgsOCBAQAogCQkJY2FzZSBCaW5kaW5nLlJBV19UWVBFOgogCQkJY2FzZSBCaW5kaW5nLlRZ
UEVfUEFSQU1FVEVSOgogCQkJY2FzZSBCaW5kaW5nLldJTERDQVJEX1RZUEU6CisJCQljYXNlIEJp
bmRpbmcuSU5URVJTRUNUSU9OX1RZUEU6CisJCQljYXNlIEJpbmRpbmcuSU5URVJTRUNUSU9OX0NB
U1RfVFlQRToKIAkJCQkvKiBUYWtpbmcgdGhlIGJpbmRpbmcgb2YgUVRSIGFzIGFuIGV4YW1wbGUs
IHRoZXJlIGNvdWxkIGJlIGRpZmZlcmVudCBhbm5vdGF0YWJsZSBjb21wb25lbnRzLCBidXQgd2Ug
Y29tZSBpbiBhIHdpdGggYSBzaW5nbGUgYmluZGluZywgZS5nOiAKIAkJCQkgICBAVCBaOyAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA9PiBaICBhbm5vdGF0aW9ucyA9
PiBbW0BUXV0KIAkJCQkgICBAVCBZLkBUIFogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgdHlwZSA9PiBaICBhbm5vdGF0aW9ucyA9PiBbW0BUXVtAVF1d
</data>

          </attachment>
      

    </bug>

</bugzilla>