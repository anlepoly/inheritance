<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>366999</bug_id>
          
          <creation_ts>2011-12-17 03:58:00 -0500</creation_ts>
          <short_desc>VerifyError: Inconsistent stackmap frames</short_desc>
          <delta_ts>2012-10-01 17:29:45 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>3.6.2+J7</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="kurt Mising name">kurt2002</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>daniel_megert</cc>
    
    <cc>jarthana</cc>
    
    <cc>kurt2002</cc>
    
    <cc>michael.f.obrien</cc>
    
    <cc>Olivier_Thomann</cc>
    
    <cc>remy.suen</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      <flag name="pmc_approved"
          id="47874"
          type_id="2"
          status="+"
          setter="daniel_megert"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2042099</commentid>
    <comment_count>0</comment_count>
    <who name="kurt Mising name">kurt2002</who>
    <bug_when>2011-12-17 03:58:47 -0500</bug_when>
    <thetext>Build Identifier: Version: 3.8.0 Build id: I20111209-1447


java version &quot;1.7.0_04-ea&quot;
Java(TM) SE Runtime Environment (build 1.7.0_04-ea-b04)
Java HotSpot(TM) Server VM (build 23.0-b06, mixed mode)

in case it matters:
I set my default VM-options in eclipse to: -XX:-UseLoopPredicate

if you comment the sysout-line in finally, or have no nested try-resource it works.

source:

package ecerr;

import java.io.BufferedReader;
import java.io.Closeable;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;

public class VerErr {

  static class C
      implements Closeable {
    @Override
    public void close() throws IOException {
      //
    }
  }

  int run() throws IOException {
    int lcnt = 0;
    try (C c = new C();) {
      try (final BufferedReader br =
          new BufferedReader(new FileReader(new File(&quot;logging.properties&quot;)))) {
        String s;
        while ((s = br.readLine()) != null)
          lcnt++;
        return lcnt;
      }
    } finally {
      System.out.println(&quot;read &quot; + lcnt + &quot; lines&quot;);
    }
  }

  public static void main(final String[] args) throws IOException {
    new VerErr().run();
  }
}


Reproducible: Always

Steps to Reproduce:
1. compile and run the given class in eclipse-ide</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2042100</commentid>
    <comment_count>1</comment_count>
    <who name="kurt Mising name">kurt2002</who>
    <bug_when>2011-12-17 04:01:21 -0500</bug_when>
    <thetext>sorry forgot: it also works with return-type void of run-method</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2042101</commentid>
    <comment_count>2</comment_count>
    <who name="kurt Mising name">kurt2002</who>
    <bug_when>2011-12-17 04:04:49 -0500</bug_when>
    <thetext>looks like I&apos;m not awake today - here is my stacktrace:

Exception in thread &quot;main&quot; java.lang.VerifyError: Inconsistent stackmap frames at branch target 86 in method ecerr.VerErr.run()I at offset 78
	at java.lang.Class.getDeclaredMethods0(Native Method)
	at java.lang.Class.privateGetDeclaredMethods(Class.java:2442)
	at java.lang.Class.getMethod0(Class.java:2685)
	at java.lang.Class.getMethod(Class.java:1620)
	at sun.launcher.LauncherHelper.getMainMethod(LauncherHelper.java:488)
	at sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:480)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2042235</commentid>
    <comment_count>3</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-12-19 00:49:51 -0500</bug_when>
    <thetext>A possible workaround until this bug is fixed. Use -XX:-UseSplitVerifier</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2043966</commentid>
    <comment_count>4</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-12-22 11:07:11 -0500</bug_when>
    <thetext>In this case, the problem comes from the initialization range of the secret return value variable. It is not properly added after the value is stored. I&apos;ll propose a patch shortly.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2043970</commentid>
    <comment_count>5</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-12-22 11:14:27 -0500</bug_when>
    <thetext>I am running tests. If successful, I will post the patch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2044053</commentid>
    <comment_count>6</comment_count>
      <attachid>208747</attachid>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-12-22 13:54:39 -0500</bug_when>
    <thetext>Created attachment 208747
Proposed fix + regression test

All tests are green. More testing might be required though. Srikanth, I let you review it. It makes sense for me to &quot;expose&quot; the local as soon as it is stored. The initialization range looks better with the fix (you need to hack the code to expose synthetic locals).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2044054</commentid>
    <comment_count>7</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-12-22 13:55:50 -0500</bug_when>
    <thetext>If ok, this will need to be backported to 3.7.2 and 3.6.2+ with Java 7.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2045498</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-03 06:58:07 -0500</bug_when>
    <thetext>(In reply to comment #6)

&gt; All tests are green. More testing might be required though. Srikanth, I let you
&gt; review it. It makes sense for me to &quot;expose&quot; the local as soon as it is stored.
&gt; The initialization range looks better with the fix (you need to hack the code
&gt; to expose synthetic locals).

Thanks for the patch Olivier. I agree with the change and the patch
looks good. 

I am still puzzled as to why this would show up only now with TWR. Will
continue to experiment.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2045542</commentid>
    <comment_count>9</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-03 08:24:37 -0500</bug_when>
    <thetext>(In reply to comment #8)

&gt; I am still puzzled as to why this would show up only now with TWR. Will
&gt; continue to experiment.

i.e Given the fix has nothing to do with TWR per se, why is it that we are
encountering this problem only now ?  Is it that the problem could be reproduced
with plain try statements but hasn&apos;t surfaced so far due to the automatic
fall back used by JDK6 ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2045602</commentid>
    <comment_count>10</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2012-01-03 10:18:40 -0500</bug_when>
    <thetext>(In reply to comment #9)
&gt; i.e Given the fix has nothing to do with TWR per se, why is it that we are
&gt; encountering this problem only now ?  Is it that the problem could be
&gt; reproduced
&gt; with plain try statements but hasn&apos;t surfaced so far due to the automatic
&gt; fall back used by JDK6 ?
This is also what I think. The problem can only be reproduced if there is a try/catch/finally with a return statement inside the try block that returns a value.
It should not be too difficult to extract a test case that is not related to the TWR.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2045872</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-03 23:48:39 -0500</bug_when>
    <thetext>Smaller test case:

public class X implements AutoCloseable {
    @Override public void close() {
    }
  static int run()  {
    int i = 0;
    try (X x = new X(); X xx = new X()) {
        return i;
    } finally {
    	i = 0;
    }
  }
  public static void main(final String[] args)  {
      run();
  }
}

Problem disappears if finally block is empty, or if there is a single resource.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2045886</commentid>
    <comment_count>12</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-04 01:16:16 -0500</bug_when>
    <thetext>OK, I know why this problem does not show up with plain try blocks.
As a part of the fix for https://bugs.eclipse.org/bugs/show_bug.cgi?id=169017,
we have some code change in org.eclipse.jdt.internal.compiler.ast.TryStatement.generateSubRoutineInvocation(BlockScope, CodeStream, Object, int, LocalVariableBinding) that &quot;pulls up&quot; the
variable range to make it correct (codeStream.addVariable(secretLocal);)
		
The new code generation for resource closures happens to have been coded
ahead of this pull up, thereby messing up the ranges.

However, I do think that the proposed patch does the more appropriate thing
when it comes to ensuring the ranges are correct, i.e exposing them as soon
as they are initialized is the right approach.

It is also consistent with what we do for other scenarios where we manage secret
synthetics (cf ForeachStatement, SwitchStatement, SynchronizedStatement, 
TryStatement etc)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2045924</commentid>
    <comment_count>13</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-04 03:52:43 -0500</bug_when>
    <thetext>Released fix and tests for 3.8 M5 via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=cc0019928c0ad43743cfd13562c67921889017a2

This is the same fix as provided by Olivier, but I also went ahead and
deleted the second addVariable method call arising from 
TryStatement.generateSubRoutineInvocation that is referred to in comment#12</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2045925</commentid>
    <comment_count>14</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-04 03:54:08 -0500</bug_when>
    <thetext>Ayush, the commit http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=cc0019928c0ad43743cfd13562c67921889017a2 needs to be back ported too.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2047850</commentid>
    <comment_count>15</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-09 10:39:53 -0500</bug_when>
    <thetext>Dani, we need this back ported to 3.7.2 and probably to 
3.7.2+java7 also. It is long standing latent bug that is
triggered by new code generated for TWR. Fix is clean.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2047898</commentid>
    <comment_count>16</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2012-01-09 11:51:09 -0500</bug_when>
    <thetext>(In reply to comment #15)
&gt; Dani, we need this back ported to 3.7.2 and probably to 
&gt; 3.7.2+java7 also.
You mean 3.6.2+Java7, right?

+1 to backport.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2048118</commentid>
    <comment_count>17</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-01-10 00:37:35 -0500</bug_when>
    <thetext>Released in 3.7 maintenance via commit cb25beb53fbe8773b2156963a511ad0ad5ad6862</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2048132</commentid>
    <comment_count>18</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-01-10 01:46:10 -0500</bug_when>
    <thetext>Released in 3.6.2+Java7 branch via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=R3_6_maintenance_Java7&amp;id=bf6d70c82b170588606e6351c5eee3349eb951a1</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2048157</commentid>
    <comment_count>19</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2012-01-10 02:48:18 -0500</bug_when>
    <thetext>(In reply to comment #18)
&gt; Released in 3.6.2+Java7 branch via
&gt; http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=R3_6_maintenance_Java7&amp;id=bf6d70c82b170588606e6351c5eee3349eb951a1

Please not that you still need to do the build input manually (as in contrast to 3.7.2), see bug 364676.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2052658</commentid>
    <comment_count>20</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-01-19 02:48:12 -0500</bug_when>
    <thetext>Verified for 3.7.2 RC2 with build M20120118-0800</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2054839</commentid>
    <comment_count>21</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-01-23 23:47:21 -0500</bug_when>
    <thetext>Verified for 3.8M5 using I20120122-2000</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2061846</commentid>
    <comment_count>22</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-02-07 01:11:55 -0500</bug_when>
    <thetext>(In reply to comment #3)
&gt; A possible workaround until this bug is fixed. Use -XX:-UseSplitVerifier

For posterity&apos;s sakes recording here that this workaround does work
at least as of Sun JVM 7b147. However, it is NOT supposed to work and 
does not with IBM JVM.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>208747</attachid>
            <date>2011-12-22 13:54:00 -0500</date>
            <delta_ts>2012-01-09 00:35:54 -0500</delta_ts>
            <desc>Proposed fix + regression test</desc>
            <filename>patch_366999.txt</filename>
            <type>text/plain</type>
            <size>3771</size>
            <attacher name="Olivier Thomann">Olivier_Thomann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1N0YWNrTWFwQXR0cmli
dXRlVGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vU3RhY2tNYXBBdHRy
aWJ1dGVUZXN0LmphdmEKaW5kZXggZjY1NDNhYS4uM2RlOGEyNSAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rl
c3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vU3RhY2tNYXBBdHRyaWJ1dGVUZXN0LmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9j
b3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vU3RhY2tNYXBBdHRyaWJ1dGVUZXN0LmphdmEK
QEAgLTE5LDYgKzE5LDcgQEAgaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLkphdmFDb3JlOwog
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLlRvb2xGYWN0b3J5OwogaW1wb3J0IG9yZy5lY2xp
cHNlLmpkdC5jb3JlLnRlc3RzLnV0aWwuVXRpbDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29y
ZS51dGlsLkNsYXNzRmlsZUJ5dGVzRGlzYXNzZW1ibGVyOworaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5pbnRlcm5hbC5jb21waWxlci5jbGFzc2ZtdC5DbGFzc0ZpbGVDb25zdGFudHM7CiAKIHB1Ymxp
YyBjbGFzcyBTdGFja01hcEF0dHJpYnV0ZVRlc3QgZXh0ZW5kcyBBYnN0cmFjdFJlZ3Jlc3Npb25U
ZXN0IHsKIAlwdWJsaWMgU3RhY2tNYXBBdHRyaWJ1dGVUZXN0KFN0cmluZyBuYW1lKSB7CkBAIC03
MDg5LDQgKzcwOTAsNDcgQEAgcHVibGljIGNsYXNzIFN0YWNrTWFwQXR0cmlidXRlVGVzdCBleHRl
bmRzIEFic3RyYWN0UmVncmVzc2lvblRlc3QgewogCQkJCX0sCiAJCQkJIiIpOwogCX0KKwkvL2h0
dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNjY5OTkKKwlwdWJs
aWMgdm9pZCB0ZXN0MDU2KCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCWlmICh0aGlzLmNvbXBsaWFu
Y2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzcpIHJldHVybjsKKwkJdGhpcy5ydW5D
b25mb3JtVGVzdCgKKwkJCQluZXcgU3RyaW5nW10geworCQkJCQkiWC5qYXZhIiwKKwkJCQkJImlt
cG9ydCBqYXZhLmlvLkJ1ZmZlcmVkUmVhZGVyO1xuIiArIAorCQkJCQkiaW1wb3J0IGphdmEuaW8u
Q2xvc2VhYmxlO1xuIiArIAorCQkJCQkiaW1wb3J0IGphdmEuaW8uRmlsZTtcbiIgKyAKKwkJCQkJ
ImltcG9ydCBqYXZhLmlvLkZpbGVSZWFkZXI7XG4iICsgCisJCQkJCSJpbXBvcnQgamF2YS5pby5J
T0V4Y2VwdGlvbjtcbiIgKyAKKwkJCQkJIlxuIiArIAorCQkJCQkicHVibGljIGNsYXNzIFgge1xu
IiArIAorCQkJCQkiXG4iICsgCisJCQkJCSIJc3RhdGljIGNsYXNzIEMgaW1wbGVtZW50cyBDbG9z
ZWFibGUge1xuIiArIAorCQkJCQkiCQlAT3ZlcnJpZGVcbiIgKyAKKwkJCQkJIgkJcHVibGljIHZv
aWQgY2xvc2UoKSB0aHJvd3MgSU9FeGNlcHRpb24ge1xuIiArIAorCQkJCQkiCQkJLy9cbiIgKyAK
KwkJCQkJIgkJfVxuIiArIAorCQkJCQkiCX1cbiIgKyAKKwkJCQkJIlxuIiArIAorCQkJCQkiCWlu
dCBydW4oKSB0aHJvd3MgSU9FeGNlcHRpb24ge1xuIiArIAorCQkJCQkiCQlpbnQgbGNudCA9IDA7
XG4iICsgCisJCQkJCSIJCXRyeSAoQyBjID0gbmV3IEMoKTspIHtcbiIgKyAKKwkJCQkJIgkJCXRy
eSAoZmluYWwgQnVmZmVyZWRSZWFkZXIgYnIgPSBuZXcgQnVmZmVyZWRSZWFkZXIobmV3IEZpbGVS
ZWFkZXIoXG4iICsgCisJCQkJCSIJCQkJCW5ldyBGaWxlKFwibG9nZ2luZy5wcm9wZXJ0aWVzXCIp
KSkpIHtcbiIgKyAKKwkJCQkJIgkJCQlTdHJpbmcgcyA9IG51bGw7XG4iICsgCisJCQkJCSIJCQkJ
d2hpbGUgKChzID0gYnIucmVhZExpbmUoKSkgIT0gbnVsbClcbiIgKyAKKwkJCQkJIgkJCQkJbGNu
dCsrO1xuIiArIAorCQkJCQkiCQkJCXJldHVybiBsY250O1xuIiArIAorCQkJCQkiCQkJfVxuIiAr
IAorCQkJCQkiCQl9IGZpbmFsbHkge1xuIiArIAorCQkJCQkiCQkJU3lzdGVtLm91dC5wcmludGxu
KFwicmVhZCBcIiArIGxjbnQgKyBcIiBsaW5lc1wiKTtcbiIgKyAKKwkJCQkJIgkJfVxuIiArIAor
CQkJCQkiCX1cbiIgKyAKKwkJCQkJIlxuIiArIAorCQkJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBt
YWluKGZpbmFsIFN0cmluZ1tdIGFyZ3MpIHRocm93cyBJT0V4Y2VwdGlvbiB7XG4iICsgCisJCQkJ
CSIJCVN5c3RlbS5vdXQucHJpbnRsbihcIlNVQ0NFU1NcIik7XG4iICsgCisJCQkJCSIJfVxuIiAr
IAorCQkJCQkifSIsCisJCQkJfSwKKwkJCQkiU1VDQ0VTUyIpOworCX0KIH0KZGlmZiAtLWdpdCBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hc3QvUmV0dXJuU3RhdGVtZW50LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1JldHVyblN0YXRl
bWVudC5qYXZhCmluZGV4IDYxYzY3YTAuLjVhNTZlNTYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3Qv
UmV0dXJuU3RhdGVtZW50LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9SZXR1cm5TdGF0ZW1lbnQuamF2
YQpAQCAtMTc1LDExICsxNzUsMTEgQEAgcHVibGljIHZvaWQgZ2VuZXJhdGVDb2RlKEJsb2NrU2Nv
cGUgY3VycmVudFNjb3BlLCBDb2RlU3RyZWFtIGNvZGVTdHJlYW0pIHsKIAkJfQogCX0KIAlpZiAo
dGhpcy5zYXZlVmFsdWVWYXJpYWJsZSAhPSBudWxsKSB7Ci0JCWNvZGVTdHJlYW0uYWRkVmFyaWFi
bGUodGhpcy5zYXZlVmFsdWVWYXJpYWJsZSk7CiAJCWNvZGVTdHJlYW0ubG9hZCh0aGlzLnNhdmVW
YWx1ZVZhcmlhYmxlKTsKIAl9CiAJaWYgKHRoaXMuZXhwcmVzc2lvbiAhPSBudWxsICYmICFhbHJl
YWR5R2VuZXJhdGVkRXhwcmVzc2lvbikgewogCQl0aGlzLmV4cHJlc3Npb24uZ2VuZXJhdGVDb2Rl
KGN1cnJlbnRTY29wZSwgY29kZVN0cmVhbSwgdHJ1ZSk7CisJCS8vIGhvb2sgbmVjZXNzYXJ5IGZv
ciBDb2RlIFNuaXBwZXQKIAkJZ2VuZXJhdGVTdG9yZVNhdmVWYWx1ZUlmTmVjZXNzYXJ5KGNvZGVT
dHJlYW0pOwogCX0KIAkvLyBvdXRwdXQgdGhlIHN1aXRhYmxlIHJldHVybiBieXRlY29kZSBvciB3
cmFwIHRoZSB2YWx1ZSBpbnNpZGUgYSBkZXNjcmlwdG9yIGZvciBkb2l0cwpAQCAtMjA2LDYgKzIw
Niw4IEBAIHB1YmxpYyB2b2lkIGdlbmVyYXRlUmV0dXJuQnl0ZWNvZGUoQ29kZVN0cmVhbSBjb2Rl
U3RyZWFtKSB7CiBwdWJsaWMgdm9pZCBnZW5lcmF0ZVN0b3JlU2F2ZVZhbHVlSWZOZWNlc3Nhcnko
Q29kZVN0cmVhbSBjb2RlU3RyZWFtKXsKIAlpZiAodGhpcy5zYXZlVmFsdWVWYXJpYWJsZSAhPSBu
dWxsKSB7CiAJCWNvZGVTdHJlYW0uc3RvcmUodGhpcy5zYXZlVmFsdWVWYXJpYWJsZSwgZmFsc2Up
OworCQkvLyB0aGUgdmFyaWFibGUgaXMgdmlzaWJsZSBhcyBzb29uIGFzIHRoZSBsb2NhbCBpcyBz
dG9yZWQKKwkJY29kZVN0cmVhbS5hZGRWYXJpYWJsZSh0aGlzLnNhdmVWYWx1ZVZhcmlhYmxlKTsK
IAl9CiB9CiAK
</data>

          </attachment>
      

    </bug>

</bugzilla>