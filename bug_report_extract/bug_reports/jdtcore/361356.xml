<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>361356</bug_id>
          
          <creation_ts>2011-10-19 04:59:00 -0400</creation_ts>
          <short_desc>Allow to specify encoding for source attachments</short_desc>
          <delta_ts>2012-07-18 06:33:26 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>3.8 M5</target_milestone>
          
          <blocked>368015</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Victor Homyakov">vkhomyackov</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>daniel_megert</cc>
    
    <cc>deepakazad</cc>
    
    <cc>satyam.kandula</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2012843</commentid>
    <comment_count>0</comment_count>
    <who name="Victor Homyakov">vkhomyackov</who>
    <bug_when>2011-10-19 04:59:47 -0400</bug_when>
    <thetext>Eclipse uses encoding of current project to display source/javadoc of attached libraries despite the fact that the encoding used in the library may be different.

Steps to reproduce:
1. Create project in UTF-8 encoding.
2. Attach library with source/javadoc written in another (Cp1251) encoding.
3. Try to view source or open Javadoc view of attached library from main project - you will see question signs instead of national symbols.

As an enhancement I would like to propose possibility to set encoding for each used library manually (like for other project resources).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2012851</commentid>
    <comment_count>1</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2011-10-19 05:17:46 -0400</bug_when>
    <thetext>The library provider has two choices:
1. it offers Javadoc for each platform
2. it generates the Javadoc so that the 
&lt;META http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;
directive is inside the Javadoc.

Eclipse does nothing but display the given HTML in the browser widget i.e. I would assume that the same Javadoc will also not render correctly when you open it with your browser outside Eclipse.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2012855</commentid>
    <comment_count>2</comment_count>
    <who name="Victor Homyakov">vkhomyackov</who>
    <bug_when>2011-10-19 05:22:52 -0400</bug_when>
    <thetext>I was not talking about HTML. I was talking about Javadoc in source codes.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2012863</commentid>
    <comment_count>3</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2011-10-19 05:29:46 -0400</bug_when>
    <thetext>(In reply to comment #2)
&gt; I was not talking about HTML. I was talking about Javadoc in source codes.

I see. We&apos;ve added the support to specify the encoding in the 3.7 release.

*** This bug has been marked as a duplicate of bug 303511 ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2012876</commentid>
    <comment_count>4</comment_count>
    <who name="Victor Homyakov">vkhomyackov</who>
    <bug_when>2011-10-19 05:51:07 -0400</bug_when>
    <thetext>&gt; I see. We&apos;ve added the support to specify the encoding in the 3.7 release.

I am using the 3.7:
Eclipse Java EE IDE for Web Developers.
Version: Indigo Service Release 1
Build id: 20110916-0149

But I still don&apos;t see the way to specify the encoding for one particular library and make sources readable.

&gt; *** This bug has been marked as a duplicate of bug 303511 ***

I&apos;ve read bug 303511 and see that my case is falling under scenario 3 (The source attachment is an external folder or archive), and this case was not fixed in patch - Eclipse uses project encoding, exactly as I described.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2012913</commentid>
    <comment_count>5</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2011-10-19 06:57:11 -0400</bug_when>
    <thetext>&gt; I&apos;ve read bug 303511 and see that my case is falling under scenario 3 (The
&gt; source attachment is an external folder or archive), and this case was not
&gt; fixed in patch - Eclipse uses project encoding, exactly as I described.

It should use the workspace encoding for external JARs, hence as a workaround you can set the workspace encoding to Cp1251 or put the attachments into a folder in your workspace which as the Cp1251 encoding.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2012998</commentid>
    <comment_count>6</comment_count>
    <who name="Victor Homyakov">vkhomyackov</who>
    <bug_when>2011-10-19 08:47:26 -0400</bug_when>
    <thetext>(In reply to comment #5)
&gt; It should use the workspace encoding for external JARs, hence as a workaround
&gt; you can set the workspace encoding to Cp1251

I cannot set the workspace encoding to more than one value (UTF-8 and Cp1251) simultaneously. So either JAR with UTF-8 source or JAR with Cp1251 source will be unreadable. As I wrote, the preferred way (for me) is to assign encoding to each used source manually.

&gt; or put the attachments into a
&gt; folder in your workspace which as the Cp1251 encoding.

This works great for manually attached libraries. And how to deal with Maven dependencies (sources are attached by Maven plugin from ~/.m2/repository/)?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2013625</commentid>
    <comment_count>7</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2011-10-20 03:24:09 -0400</bug_when>
    <thetext>I do see your point. We can reopen this bug as a feature request if you want.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2013654</commentid>
    <comment_count>8</comment_count>
    <who name="Victor Homyakov">vkhomyackov</who>
    <bug_when>2011-10-20 04:14:38 -0400</bug_when>
    <thetext>(In reply to comment #7)
&gt; We can reopen this bug as a feature request if you want.
Reopen, please.

Thanks for your help and patience!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2013657</commentid>
    <comment_count>9</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-10-20 04:19:30 -0400</bug_when>
    <thetext>Jay, please take a look. Thanks!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2013667</commentid>
    <comment_count>10</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2011-10-20 04:26:20 -0400</bug_when>
    <thetext>This is a follow up of enhancement 303511. We&apos;ll need to see whether we have time to do this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2021855</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-07 00:42:57 -0500</bug_when>
    <thetext>Will investigate/consider for M4.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2033668</commentid>
    <comment_count>12</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-30 00:17:29 -0500</bug_when>
    <thetext>Since Jay had to go on unavoidable unplanned time off for several days,
this is not ready: retargetting to 3.8 M5.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2046733</commentid>
    <comment_count>13</comment_count>
      <attachid>209089</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-01-05 11:47:30 -0500</bug_when>
    <thetext>Created attachment 209089
Proposed patch

I have introduced a new classpath attribute for storing the source attachment encoding in the .classpath file. Now the order of encoding selection will be in the following order:

1. Encoding set on the resource representing the source file (.java or .zip)
2. Encoding specified for the corresponding classpath entry
3. Encoding of the project enclosing the source, if a member
4. Workspace encoding

I will release this fix after some more testing.
Is there a bug to handle the UI part already?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2046992</commentid>
    <comment_count>14</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2012-01-06 02:21:28 -0500</bug_when>
    <thetext>&gt; I will release this fix after some more testing.
Please wait until we have verified it through the UI part.

&gt; Is there a bug to handle the UI part already?
Not that I&apos;m aware of.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2047061</commentid>
    <comment_count>15</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-01-06 05:36:16 -0500</bug_when>
    <thetext>Raised bug 368015 for the UI part.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2051994</commentid>
    <comment_count>16</comment_count>
    <who name="Deepak Azad">deepakazad</who>
    <bug_when>2012-01-18 00:44:16 -0500</bug_when>
    <thetext>(In reply to comment #13)
&gt; Now the order of encoding selection will be in
&gt; the following order:
&gt; 
&gt; 1. Encoding set on the resource representing the source file (.java or .zip)
&gt; 2. Encoding specified for the corresponding classpath entry
&gt; 3. Encoding of the project enclosing the source, if a member
&gt; 4. Workspace encoding

This looks quite wrong to me. Take the case when the source attachment is a source folder in the workspace
- You will almost never have the encoding set on individual .java files, hence you move to step 2
- If an encoding is specified on the classpath it will be used.
- However, the canonical encoding in this case is the encoding on the container (project or workspace), but it is never used.

In short, for source attachments from the workspace the new attribute should not have any meaning. Ideally, we should not even allow to set the attribute for attachments from workspace, but I guess it is also OK if we silently ignore it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2051995</commentid>
    <comment_count>17</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-01-18 00:58:11 -0500</bug_when>
    <thetext>(In reply to comment #16)
&gt; This looks quite wrong to me. Take the case when the source attachment is a
&gt; source folder in the workspace
&gt; - You will almost never have the encoding set on individual .java files, hence
&gt; you move to step 2

Though I agree that it&apos;s unlikely, we can&apos;t not support that case.

&gt; - If an encoding is specified on the classpath it will be used.
&gt; - However, the canonical encoding in this case is the encoding on the container
&gt; (project or workspace), but it is never used.
&gt; 
&gt; In short, for source attachments from the workspace the new attribute should
&gt; not have any meaning. Ideally, we should not even allow to set the attribute
&gt; for attachments from workspace, but I guess it is also OK if we silently ignore
&gt; it.

If you look at comment #4, one of the requirements is to be able to support encoding at classpath entry (or library) level. If the user knows that the source attachment is inside the project/workspace and fine with the project/workspace encoding being used, he can very well do that by not setting the encoding for the library.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2051999</commentid>
    <comment_count>18</comment_count>
    <who name="Deepak Azad">deepakazad</who>
    <bug_when>2012-01-18 01:20:24 -0500</bug_when>
    <thetext>(In reply to comment #17)
&gt; If you look at comment #4, one of the requirements is to be able to support
&gt; encoding at classpath entry (or library) level. If the user knows that the
&gt; source attachment is inside the project/workspace and fine with the
&gt; project/workspace encoding being used, he can very well do that by not setting
&gt; the encoding for the library.

By that logic the algorithm should be
1. Encoding specified for the corresponding classpath entry
2 a. Encoding set on the resource representing the source file (.java or .zip)
  b. Encoding of the project enclosing the source, if a member
  c. Workspace encoding

2 a,b,c constitute a well defined algorithm to compute the encoding for an artifact in the workspace. I don&apos;t think we should break that. 

In any case I still think that it would be better to not use the new classpath attribute for source attachments from workspace.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2052003</commentid>
    <comment_count>19</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-01-18 01:44:20 -0500</bug_when>
    <thetext>(In reply to comment #18)
&gt; By that logic the algorithm should be
&gt; 1. Encoding specified for the corresponding classpath entry
&gt; 2 a. Encoding set on the resource representing the source file (.java or .zip)
&gt;   b. Encoding of the project enclosing the source, if a member
&gt;   c. Workspace encoding
&gt; 
&gt; 2 a,b,c constitute a well defined algorithm to compute the encoding for an
&gt; artifact in the workspace. I don&apos;t think we should break that. 
&gt; 
&gt; In any case I still think that it would be better to not use the new classpath
&gt; attribute for source attachments from workspace.

(b) and (c) are not explicitly set by the user or the author of the file. It&apos;s an algorithm used by the tool and we shouldn&apos;t really let it dictate terms to the user. If there is an encoding set explicitly, be it a resource, or a classpath entry, it must be given a higher priority than a default.

Think about this scenario: User has a source attachment, for which he wants to use a particular encoding. And let&apos;s say a particular file X.java in the source attachment has a different encoding than other files. How else can we support this?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2052007</commentid>
    <comment_count>20</comment_count>
    <who name="Deepak Azad">deepakazad</who>
    <bug_when>2012-01-18 02:01:13 -0500</bug_when>
    <thetext>(In reply to comment #19)
&gt; (b) and (c) are not explicitly set by the user or the author of the file. It&apos;s
&gt; an algorithm used by the tool and we shouldn&apos;t really let it dictate terms to
&gt; the user. If there is an encoding set explicitly, be it a resource, or a
&gt; classpath entry, it must be given a higher priority than a default.
&gt; 
&gt; Think about this scenario: User has a source attachment, for which he wants to
&gt; use a particular encoding. And let&apos;s say a particular file X.java in the source
&gt; attachment has a different encoding than other files. How else can we support
&gt; this?

... so you are saying that the encoding for the source attachment will be different from the encoding for the same resource accessed from its original location in the workspace?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2052012</commentid>
    <comment_count>21</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-01-18 02:13:39 -0500</bug_when>
    <thetext>(In reply to comment #20)
&gt; ... so you are saying that the encoding for the source attachment will be
&gt; different from the encoding for the same resource accessed from its original
&gt; location in the workspace?

Yes, only if the user has opted for a different encoding than the project&apos;s encoding and the individual resource doesn&apos;t have any encoding set on it. And I would assume that the user knows what he is doing. When the resource is directly accessed, the content may not be displayed correctly, which is the case even today.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2052050</commentid>
    <comment_count>22</comment_count>
    <who name="Deepak Azad">deepakazad</who>
    <bug_when>2012-01-18 04:09:13 -0500</bug_when>
    <thetext>(In reply to comment #21)
&gt; And I
&gt; would assume that the user knows what he is doing. When the resource is
&gt; directly accessed, the content may not be displayed correctly, which is the
&gt; case even today.

The idea should be to specify one property in only once place, and for source attachments from workspace I think the encoding is best defined in the original location, something we should not change.

As part of bug 368015 we can also prevent users from setting the encoding for attachments from workspace.

Also, the algorithm to compute the encoding is not trivial it needs to be documented along with the new API org.eclipse.jdt.core.IClasspathAttribute.SOURCE_ATTACHMENT_ENCODING.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2052066</commentid>
    <comment_count>23</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-01-18 04:36:32 -0500</bug_when>
    <thetext>(In reply to comment #22)
&gt; The idea should be to specify one property in only once place, and for source
&gt; attachments from workspace I think the encoding is best defined in the original
&gt; location, something we should not change.
&gt;
&gt; As part of bug 368015 we can also prevent users from setting the encoding for
&gt; attachments from workspace.

Are you saying that the user will have to set the encoding on the library&apos;s source attachment for external folders and on the resource if the source attachment is part of the workspace? The user will be confused if he doesn&apos;t see the encoding for some attachments, won&apos;t he?

For consistency sake, I would prefer it to be provided for all libraries in one place - where we attach the source. Perhaps, we can warn the user if it&apos;s an internal resource and if there is already an encoding set on the resource.
 
&gt; Also, the algorithm to compute the encoding is not trivial it needs to be
&gt; documented along with the new API
&gt; org.eclipse.jdt.core.IClasspathAttribute.SOURCE_ATTACHMENT_ENCODING.

I agree, the document should be updated.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2052105</commentid>
    <comment_count>24</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2012-01-18 05:49:13 -0500</bug_when>
    <thetext>The encoding property must only be defined and editable in the UI for case 3 from bug 303511 comment 1. If the property is not set, the workspace encoding is used.

If possible JDT Core should also define and implement the property like that. However, I&apos;m OK, if only the UI imposes the restriction.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2052728</commentid>
    <comment_count>25</comment_count>
    <who name="Deepak Azad">deepakazad</who>
    <bug_when>2012-01-19 05:00:56 -0500</bug_when>
    <thetext>(In reply to comment #24)
&gt; the UI imposes the restriction.
I have imposed the restriction in bug 368015.

Jay, your patch is OK for me once you update the doc.
(In reply to comment #23)
&gt; &gt; Also, the algorithm to compute the encoding is not trivial it needs to be
&gt; &gt; documented along with the new API
&gt; &gt; org.eclipse.jdt.core.IClasspathAttribute.SOURCE_ATTACHMENT_ENCODING.
&gt; 
&gt; I agree, the document should be updated.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2052731</commentid>
    <comment_count>26</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-01-19 05:06:08 -0500</bug_when>
    <thetext>(In reply to comment #25)
&gt; (In reply to comment #24)
&gt; &gt; the UI imposes the restriction.
&gt; I have imposed the restriction in bug 368015.
&gt; 
&gt; Jay, your patch is OK for me once you update the doc.

Thanks, Deepak. I have a patch with the updated doc. I will also test this fix with the UI and after that I will post/release the patch. Will do that after completing the 3.7.2 testing.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2052960</commentid>
    <comment_count>27</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2012-01-19 11:01:17 -0500</bug_when>
    <thetext>(In reply to comment #14)
&gt; &gt; I will release this fix after some more testing.
&gt; Please wait until we have verified it through the UI part.

You&apos;re good to go now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2053297</commentid>
    <comment_count>28</comment_count>
      <attachid>209785</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-01-19 23:08:22 -0500</bug_when>
    <thetext>Created attachment 209785
Updated patch

Same fix, with update documentation for the new classpath attribute.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2053319</commentid>
    <comment_count>29</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-01-20 01:39:18 -0500</bug_when>
    <thetext>(In reply to comment #28)
&gt; Created attachment 209785 [details]
&gt; Updated patch
&gt; 
&gt; Same fix, with update documentation for the new classpath attribute.

Tested the fix with the UI portion (bug 368015) and things look good, though I could test only the external libraries through the UI. Released with few cosmetic changes on the doc + additional tests for external libraries.

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=a74cc2e7acd1e0aec09bded5c981fd784a55b04c</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2053321</commentid>
    <comment_count>30</comment_count>
    <who name="Deepak Azad">deepakazad</who>
    <bug_when>2012-01-20 01:42:05 -0500</bug_when>
    <thetext>I got a mid-air collision while trying to say...

&quot;Hold on with releasing the patch. Looks like some more work needs to be done to
support jars in a container e.g. rt.jar. I am currently investigating this.&quot;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2053326</commentid>
    <comment_count>31</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-01-20 01:54:01 -0500</bug_when>
    <thetext>(In reply to comment #30)
&gt; I got a mid-air collision while trying to say...
&gt; 
&gt; &quot;Hold on with releasing the patch. Looks like some more work needs to be done
&gt; to
&gt; support jars in a container e.g. rt.jar. I am currently investigating this.&quot;

I did play around with containers and they looked to be alright. Let me know your findings. We still have time for the warm-up build.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2053327</commentid>
    <comment_count>32</comment_count>
    <who name="Deepak Azad">deepakazad</who>
    <bug_when>2012-01-20 01:59:28 -0500</bug_when>
    <thetext>(In reply to comment #31)
&gt; I did play around with containers and they looked to be alright.
Really? Can you view and edit the source attachment encoding for rt.jar ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2053328</commentid>
    <comment_count>33</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-01-20 02:09:40 -0500</bug_when>
    <thetext>(In reply to comment #32)
&gt; Really? Can you view and edit the source attachment encoding for rt.jar ?

Arrg, I see the value entered doesn&apos;t get stored if I come back again! But it&apos;s okay for individual jars.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2053361</commentid>
    <comment_count>34</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2012-01-20 03:19:10 -0500</bug_when>
    <thetext>(In reply to comment #33)
&gt; (In reply to comment #32)
&gt; &gt; Really? Can you view and edit the source attachment encoding for rt.jar ?
&gt; 
&gt; Arrg, I see the value entered doesn&apos;t get stored if I come back again! But it&apos;s
&gt; okay for individual jars.

Reopening then.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2053966</commentid>
    <comment_count>35</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-21 00:42:05 -0500</bug_when>
    <thetext>(In reply to comment #32)
&gt; (In reply to comment #31)
&gt; &gt; I did play around with containers and they looked to be alright.
&gt; Really? Can you view and edit the source attachment encoding for rt.jar ?

Do we have a consensus as to whether the JDT/Core side of things
is incorrect or merely incomplete (or is complete and is not really
contributing to the problem scenario) ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2053981</commentid>
    <comment_count>36</comment_count>
    <who name="Deepak Azad">deepakazad</who>
    <bug_when>2012-01-21 01:37:22 -0500</bug_when>
    <thetext>This bug can be closed now. (See also bug 368015 comment 17)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2055104</commentid>
    <comment_count>37</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-01-24 09:36:45 -0500</bug_when>
    <thetext>Verified for 3.8M5 using build I20120123-1800</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2138073</commentid>
    <comment_count>38</comment_count>
    <who name="Victor Homyakov">vkhomyackov</who>
    <bug_when>2012-07-17 12:28:59 -0400</bug_when>
    <thetext>Does not work in 3.8 (Version: 3.8.0 Build id: M20120626-2030) for sources downloaded by Maven plugin (m2e) - encoding is always &quot;Default (UTF-8)&quot;.

Steps to reproduce:
1. Install M2E - Maven Integration for Eclipse (version 1.1.0.20120530-0009 for Eclipse 3.8).
2. Window -&gt; Preferences -&gt; Maven -&gt; check &quot;Download Artifact Sources&quot; option.
3. Create Maven project or enable Maven dependency management on existing project (right-click on project -&gt; Configure -&gt; Convert to Maven Project).
4. Add to project dependency with sources in non-UTF-8 encoding.
5. Open Project Explorer, go to project -&gt; Maven Dependencies, right click on dependency, change encoding, apply changes. After reopening encoding will be again &quot;Default (UTF-8)&quot;.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2138313</commentid>
    <comment_count>39</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2012-07-18 02:23:37 -0400</bug_when>
    <thetext>(In reply to comment #38)
&gt; Does not work in 3.8 (Version: 3.8.0 Build id: M20120626-2030) for sources
&gt; downloaded by Maven plugin (m2e) - encoding is always &quot;Default (UTF-8)&quot;.
&gt; 
&gt; Steps to reproduce:
&gt; 1. Install M2E - Maven Integration for Eclipse (version 1.1.0.20120530-0009 for
&gt; Eclipse 3.8).
&gt; 2. Window -&gt; Preferences -&gt; Maven -&gt; check &quot;Download Artifact Sources&quot; option.
&gt; 3. Create Maven project or enable Maven dependency management on existing
&gt; project (right-click on project -&gt; Configure -&gt; Convert to Maven Project).
&gt; 4. Add to project dependency with sources in non-UTF-8 encoding.
&gt; 5. Open Project Explorer, go to project -&gt; Maven Dependencies, right click on
&gt; dependency, change encoding, apply changes. After reopening encoding will be
&gt; again &quot;Default (UTF-8)&quot;.

Please file a new bug report with steps to reproduce the problem using a plain Eclipse SDK:
http://download.eclipse.org/eclipse/downloads/drops4/R-4.2-201206081400/
to rule out Maven specific issue.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2138426</commentid>
    <comment_count>40</comment_count>
    <who name="Victor Homyakov">vkhomyackov</who>
    <bug_when>2012-07-18 06:33:26 -0400</bug_when>
    <thetext>(In reply to comment #39)
&gt; Please file a new bug report with steps to reproduce the problem using a plain
&gt; Eclipse SDK:
&gt; http://download.eclipse.org/eclipse/downloads/drops4/R-4.2-201206081400/
&gt; to rule out Maven specific issue.

OK</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>209089</attachid>
            <date>2012-01-05 11:47:00 -0500</date>
            <delta_ts>2012-01-19 23:08:22 -0500</delta_ts>
            <desc>Proposed patch</desc>
            <filename>bug361356.patch</filename>
            <type>text/plain</type>
            <size>15870</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9tb2RlbC9FbmNvZGluZ1Rlc3RzLmphdmEgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvbW9k
ZWwvRW5jb2RpbmdUZXN0cy5qYXZhCmluZGV4IGM5MzY4YzguLmZmMDU1OTEgMTAwNjQ0Ci0tLSBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29y
ZS90ZXN0cy9tb2RlbC9FbmNvZGluZ1Rlc3RzLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21vZGVsL0VuY29k
aW5nVGVzdHMuamF2YQpAQCAtMjgsNiArMjgsNyBAQAogaW1wb3J0IG9yZy5lY2xpcHNlLmNvcmUu
cnVudGltZS5jb250ZW50LklDb250ZW50RGVzY3JpcHRpb247CiBpbXBvcnQgb3JnLmVjbGlwc2Uu
Y29yZS5ydW50aW1lLnByZWZlcmVuY2VzLklFY2xpcHNlUHJlZmVyZW5jZXM7CiBpbXBvcnQgb3Jn
LmVjbGlwc2UuY29yZS5ydW50aW1lLnByZWZlcmVuY2VzLkluc3RhbmNlU2NvcGU7CitpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmNvcmUuSUNsYXNzcGF0aEF0dHJpYnV0ZTsKIGltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuY29yZS5JQ2xhc3NwYXRoRW50cnk7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNv
cmUuSUNvbXBpbGF0aW9uVW5pdDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5JSmF2YVBy
b2plY3Q7CkBAIC02Miw3ICs2Myw3IEBACiAJLy8gVXNlIHRoaXMgc3RhdGljIGluaXRpYWxpemVy
IHRvIHNwZWNpZnkgc3Vic2V0IGZvciB0ZXN0cwogCS8vIEFsbCBzcGVjaWZpZWQgdGVzdHMgd2hp
Y2ggZG8gbm90IGJlbG9uZyB0byB0aGUgY2xhc3MgYXJlIHNraXBwZWQuLi4KIAlzdGF0aWMgewot
Ly8JCVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1tdIHsgInRlc3RCdWcxMTA1NzYiIH07CisvLwkJ
VEVTVFNfTkFNRVMgPSBuZXcgU3RyaW5nW10geyAidGVzdEJ1ZzM2MTM1NiIgfTsKIC8vCQlURVNU
U19OVU1CRVJTID0gbmV3IGludFtdIHsgMiwgMTIgfTsKIC8vCQlURVNUU19SQU5HRSA9IG5ldyBp
bnRbXSB7IDE2LCAtMSB9OwogCX0KQEAgLTEyMTcsNyArMTIxOCwxNTYgQEAKIAkJCWdldFdvcmtz
cGFjZVJvb3QoKS5zZXREZWZhdWx0Q2hhcnNldCh3a3NwRW5jb2RpbmcsIG51bGwpOwogCQl9CiAJ
fQotCQorCXB1YmxpYyB2b2lkIHRlc3RCdWczNjEzNTYoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJ
U3RyaW5nIG9sZEVuY29kaW5nID0gdGhpcy5lbmNvZGluZ1Byb2plY3QuZ2V0RGVmYXVsdENoYXJz
ZXQoKTsKKwkJdHJ5eworCQkJU3RyaW5nIGVuY29kaW5nID0gIlNoaWZ0LUpJUyI7CisJCQlpZiAo
d2tzcEVuY29kaW5nLmVxdWFscyhlbmNvZGluZykpCisJCQkJZ2V0V29ya3NwYWNlUm9vdCgpLnNl
dERlZmF1bHRDaGFyc2V0KCJVVEYtOCIsIG51bGwpOworCQkJdGhpcy5lbmNvZGluZ1Byb2plY3Qu
c2V0RGVmYXVsdENoYXJzZXQoIlVURi04IiwgbnVsbCk7CisJCQlJSmF2YVByb2plY3QgcHJvamVj
dCA9IHRoaXMuY3JlYXRlSmF2YVByb2plY3QoIkVuY29kaW5nMiIsIG5ldyBTdHJpbmdbXSB7IiJ9
LCAiIik7CisJCQlJRmlsZSB6aXBGaWxlID0gKElGaWxlKSB0aGlzLmVuY29kaW5nUHJvamVjdC5m
aW5kTWVtYmVyKCJ0ZXN0U2hpZnRKSVMuemlwIik7IC8vJE5PTi1OTFMtMSQKKwkJCUlGaWxlIHNv
dXJjZUZpbGUgPSAoSUZpbGUpIHRoaXMuZW5jb2RpbmdQcm9qZWN0LmZpbmRNZW1iZXIoInNyYy90
ZXN0U2hpZnRKSVMvQS5qYXZhIik7CisJCQkKKwkJCUlDbGFzc3BhdGhFbnRyeVtdIGVudHJpZXMg
PSB0aGlzLmVuY29kaW5nSmF2YVByb2plY3QuZ2V0UmF3Q2xhc3NwYXRoKCk7CisJCQlJQ2xhc3Nw
YXRoRW50cnkgbmV3RW50cnkgPSBudWxsOworCQkJZm9yIChpbnQgaW5kZXggPSAwOyBpbmRleCA8
IGVudHJpZXMubGVuZ3RoOyBpbmRleCsrKSB7CisJCQkJSUNsYXNzcGF0aEVudHJ5IGVudHJ5ID0g
ZW50cmllc1tpbmRleF07CisJCQkJaWYgKGVudHJ5LmdldFBhdGgoKS50b09TU3RyaW5nKCkuZW5k
c1dpdGgoInRlc3RTaGlmdEpJUy5qYXIiKSkgeworCQkJCQluZXdFbnRyeSA9IGVudHJpZXNbaW5k
ZXhdOyAKKwkJCQl9CisJCQl9CisKKwkJCUlDbGFzc3BhdGhBdHRyaWJ1dGUgYXR0cmlidXRlID0g
SmF2YUNvcmUubmV3Q2xhc3NwYXRoQXR0cmlidXRlKElDbGFzc3BhdGhBdHRyaWJ1dGUuU09VUkNF
X0FUVEFDSE1FTlRfRU5DT0RJTkcsIGVuY29kaW5nKTsKKwkJCXByb2plY3Quc2V0UmF3Q2xhc3Nw
YXRoKG5ldyBJQ2xhc3NwYXRoRW50cnlbXXtKYXZhQ29yZS5uZXdMaWJyYXJ5RW50cnkobmV3RW50
cnkuZ2V0UGF0aCgpLCBuZXcgUGF0aCgiL0VuY29kaW5nL3NyYyIpLCBudWxsLCBudWxsLCBuZXcg
SUNsYXNzcGF0aEF0dHJpYnV0ZVtde2F0dHJpYnV0ZX0sIGZhbHNlKX0sIG51bGwpOworCQkJc291
cmNlRmlsZS5zZXRDaGFyc2V0KG51bGwsIG51bGwpOworCQkJCisJCQlJUGFja2FnZUZyYWdtZW50
Um9vdCByb290ID0gZ2V0UGFja2FnZUZyYWdtZW50Um9vdCgiRW5jb2RpbmcyIiwgInRlc3RTaGlm
dEpJUy5qYXIiKTsKKwkJCUlTb3VyY2VSZWZlcmVuY2Ugc291cmNlUmVmID0gcm9vdC5nZXRQYWNr
YWdlRnJhZ21lbnQoInRlc3RTaGlmdEpJUyIpLmdldENsYXNzRmlsZSgiQS5jbGFzcyIpOworCQkJ
YXNzZXJ0Tm90TnVsbChzb3VyY2VSZWYpOworCQkJU3RyaW5nIHNvdXJjZSA9IHNvdXJjZVJlZi5n
ZXRTb3VyY2UoKTsKKwkJCWFzc2VydE5vdE51bGwoc291cmNlKTsKKwkJCVN0cmluZyBlbmNvZGVk
Q29udGVudHMgPSBuZXcgU3RyaW5nIChVdGlsLmdldFJlc291cmNlQ29udGVudHNBc0NoYXJBcnJh
eShzb3VyY2VGaWxlLCBlbmNvZGluZykpOworCQkJY2hhcltdIGNoYXJBcnJheSA9IGVuY29kZWRD
b250ZW50cy50b0NoYXJBcnJheSgpOworCQkJZW5jb2RlZENvbnRlbnRzID0gbmV3IFN0cmluZyhD
aGFyT3BlcmF0aW9uLnJlbW92ZShjaGFyQXJyYXksICdccicpKTsKKwkJCWNoYXJBcnJheSA9IHNv
dXJjZS50b0NoYXJBcnJheSgpOworCQkJc291cmNlID0gbmV3IFN0cmluZyhDaGFyT3BlcmF0aW9u
LnJlbW92ZShjaGFyQXJyYXksICdccicpKTsKKwkJCWFzc2VydFRydWUoIlNvdXJjZXMgc2hvdWxk
IGJlIGRlY29kZWQgdGhlIHNhbWUgd2F5IiwgZW5jb2RlZENvbnRlbnRzLmVxdWFscyhzb3VyY2Up
KTsKKworCQkJYXR0cmlidXRlID0gSmF2YUNvcmUubmV3Q2xhc3NwYXRoQXR0cmlidXRlKElDbGFz
c3BhdGhBdHRyaWJ1dGUuU09VUkNFX0FUVEFDSE1FTlRfRU5DT0RJTkcsICJVVEYtOCIpOworCQkJ
cHJvamVjdC5zZXRSYXdDbGFzc3BhdGgobmV3IElDbGFzc3BhdGhFbnRyeVtde0phdmFDb3JlLm5l
d0xpYnJhcnlFbnRyeShuZXdFbnRyeS5nZXRQYXRoKCksIG5ldyBQYXRoKCIvRW5jb2Rpbmcvc3Jj
IiksIG51bGwsIG51bGwsIG5ldyBJQ2xhc3NwYXRoQXR0cmlidXRlW117YXR0cmlidXRlfSwgZmFs
c2UpfSwgbnVsbCk7CisJCQlzb3VyY2VGaWxlLnNldENoYXJzZXQoZW5jb2RpbmcsIG51bGwpOwor
CQkJCisJCQlyb290ID0gZ2V0UGFja2FnZUZyYWdtZW50Um9vdCgiRW5jb2RpbmcyIiwgInRlc3RT
aGlmdEpJUy5qYXIiKTsKKwkJCXNvdXJjZVJlZiA9IHJvb3QuZ2V0UGFja2FnZUZyYWdtZW50KCJ0
ZXN0U2hpZnRKSVMiKS5nZXRDbGFzc0ZpbGUoIkEuY2xhc3MiKTsKKwkJCWFzc2VydE5vdE51bGwo
c291cmNlUmVmKTsKKwkJCXNvdXJjZSA9IHNvdXJjZVJlZi5nZXRTb3VyY2UoKTsKKwkJCWFzc2Vy
dE5vdE51bGwoc291cmNlKTsKKwkJCWVuY29kZWRDb250ZW50cyA9IG5ldyBTdHJpbmcgKFV0aWwu
Z2V0UmVzb3VyY2VDb250ZW50c0FzQ2hhckFycmF5KHNvdXJjZUZpbGUsIGVuY29kaW5nKSk7CisJ
CQljaGFyQXJyYXkgPSBlbmNvZGVkQ29udGVudHMudG9DaGFyQXJyYXkoKTsKKwkJCWVuY29kZWRD
b250ZW50cyA9IG5ldyBTdHJpbmcoQ2hhck9wZXJhdGlvbi5yZW1vdmUoY2hhckFycmF5LCAnXHIn
KSk7CisJCQljaGFyQXJyYXkgPSBzb3VyY2UudG9DaGFyQXJyYXkoKTsKKwkJCXNvdXJjZSA9IG5l
dyBTdHJpbmcoQ2hhck9wZXJhdGlvbi5yZW1vdmUoY2hhckFycmF5LCAnXHInKSk7CisJCQlhc3Nl
cnRUcnVlKCJTb3VyY2VzIHNob3VsZCBiZSBkZWNvZGVkIHRoZSBzYW1lIHdheSIsIGVuY29kZWRD
b250ZW50cy5lcXVhbHMoc291cmNlKSk7CisKKwkJCWF0dHJpYnV0ZSA9IEphdmFDb3JlLm5ld0Ns
YXNzcGF0aEF0dHJpYnV0ZShJQ2xhc3NwYXRoQXR0cmlidXRlLlNPVVJDRV9BVFRBQ0hNRU5UX0VO
Q09ESU5HLCBlbmNvZGluZyk7CisJCQlwcm9qZWN0LnNldFJhd0NsYXNzcGF0aChuZXcgSUNsYXNz
cGF0aEVudHJ5W117SmF2YUNvcmUubmV3TGlicmFyeUVudHJ5KG5ld0VudHJ5LmdldFBhdGgoKSwg
bmV3IFBhdGgoIi9FbmNvZGluZy90ZXN0U2hpZnRKSVMuemlwIiksIG51bGwsIG51bGwsIG5ldyBJ
Q2xhc3NwYXRoQXR0cmlidXRlW117YXR0cmlidXRlfSwgZmFsc2UpfSwgbnVsbCk7CisJCQl6aXBG
aWxlLnNldENoYXJzZXQobnVsbCwgbnVsbCk7CisJCQkKKwkJCXJvb3QgPSBnZXRQYWNrYWdlRnJh
Z21lbnRSb290KCJFbmNvZGluZzIiLCAidGVzdFNoaWZ0SklTLmphciIpOworCQkJc291cmNlUmVm
ID0gcm9vdC5nZXRQYWNrYWdlRnJhZ21lbnQoInRlc3RTaGlmdEpJUyIpLmdldENsYXNzRmlsZSgi
QS5jbGFzcyIpOworCQkJYXNzZXJ0Tm90TnVsbChzb3VyY2VSZWYpOworCQkJc291cmNlID0gc291
cmNlUmVmLmdldFNvdXJjZSgpOworCQkJYXNzZXJ0Tm90TnVsbChzb3VyY2UpOworCQkJZW5jb2Rl
ZENvbnRlbnRzID0gbmV3IFN0cmluZyAoVXRpbC5nZXRSZXNvdXJjZUNvbnRlbnRzQXNDaGFyQXJy
YXkoc291cmNlRmlsZSwgZW5jb2RpbmcpKTsKKwkJCWNoYXJBcnJheSA9IGVuY29kZWRDb250ZW50
cy50b0NoYXJBcnJheSgpOworCQkJZW5jb2RlZENvbnRlbnRzID0gbmV3IFN0cmluZyhDaGFyT3Bl
cmF0aW9uLnJlbW92ZShjaGFyQXJyYXksICdccicpKTsKKwkJCWNoYXJBcnJheSA9IHNvdXJjZS50
b0NoYXJBcnJheSgpOworCQkJc291cmNlID0gbmV3IFN0cmluZyhDaGFyT3BlcmF0aW9uLnJlbW92
ZShjaGFyQXJyYXksICdccicpKTsKKwkJCWFzc2VydFRydWUoIlNvdXJjZXMgc2hvdWxkIGJlIGRl
Y29kZWQgdGhlIHNhbWUgd2F5IiwgZW5jb2RlZENvbnRlbnRzLmVxdWFscyhzb3VyY2UpKTsKKwor
CQkJYXR0cmlidXRlID0gSmF2YUNvcmUubmV3Q2xhc3NwYXRoQXR0cmlidXRlKElDbGFzc3BhdGhB
dHRyaWJ1dGUuU09VUkNFX0FUVEFDSE1FTlRfRU5DT0RJTkcsICJVVEYtOCIpOworCQkJcHJvamVj
dC5zZXRSYXdDbGFzc3BhdGgobmV3IElDbGFzc3BhdGhFbnRyeVtde0phdmFDb3JlLm5ld0xpYnJh
cnlFbnRyeShuZXdFbnRyeS5nZXRQYXRoKCksIG5ldyBQYXRoKCIvRW5jb2RpbmcvdGVzdFNoaWZ0
SklTLnppcCIpLCBudWxsLCBudWxsLCBuZXcgSUNsYXNzcGF0aEF0dHJpYnV0ZVtde2F0dHJpYnV0
ZX0sIGZhbHNlKX0sIG51bGwpOworCQkJemlwRmlsZS5zZXRDaGFyc2V0KGVuY29kaW5nLCBudWxs
KTsKKwkJCQorCQkJcm9vdCA9IGdldFBhY2thZ2VGcmFnbWVudFJvb3QoIkVuY29kaW5nMiIsICJ0
ZXN0U2hpZnRKSVMuamFyIik7CisJCQlzb3VyY2VSZWYgPSByb290LmdldFBhY2thZ2VGcmFnbWVu
dCgidGVzdFNoaWZ0SklTIikuZ2V0Q2xhc3NGaWxlKCJBLmNsYXNzIik7CisJCQlhc3NlcnROb3RO
dWxsKHNvdXJjZVJlZik7CisJCQlzb3VyY2UgPSBzb3VyY2VSZWYuZ2V0U291cmNlKCk7CisJCQlh
c3NlcnROb3ROdWxsKHNvdXJjZSk7CisJCQllbmNvZGVkQ29udGVudHMgPSBuZXcgU3RyaW5nIChV
dGlsLmdldFJlc291cmNlQ29udGVudHNBc0NoYXJBcnJheShzb3VyY2VGaWxlLCBlbmNvZGluZykp
OworCQkJY2hhckFycmF5ID0gZW5jb2RlZENvbnRlbnRzLnRvQ2hhckFycmF5KCk7CisJCQllbmNv
ZGVkQ29udGVudHMgPSBuZXcgU3RyaW5nKENoYXJPcGVyYXRpb24ucmVtb3ZlKGNoYXJBcnJheSwg
J1xyJykpOworCQkJY2hhckFycmF5ID0gc291cmNlLnRvQ2hhckFycmF5KCk7CisJCQlzb3VyY2Ug
PSBuZXcgU3RyaW5nKENoYXJPcGVyYXRpb24ucmVtb3ZlKGNoYXJBcnJheSwgJ1xyJykpOworCQkJ
YXNzZXJ0VHJ1ZSgiU291cmNlcyBzaG91bGQgYmUgZGVjb2RlZCB0aGUgc2FtZSB3YXkiLCBlbmNv
ZGVkQ29udGVudHMuZXF1YWxzKHNvdXJjZSkpOworCisJCX0KKwkJZmluYWxseSB7CisJCQl0aGlz
LmVuY29kaW5nUHJvamVjdC5zZXREZWZhdWx0Q2hhcnNldChvbGRFbmNvZGluZywgbnVsbCk7CisJ
CQlkZWxldGVQcm9qZWN0KCJFbmNvZGluZzIiKTsKKwkJCWdldFdvcmtzcGFjZVJvb3QoKS5zZXRE
ZWZhdWx0Q2hhcnNldCh3a3NwRW5jb2RpbmcsIG51bGwpOworCQl9CQkKKwl9CisJcHVibGljIHZv
aWQgdGVzdEJ1ZzM2MTM1NmEoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJU3RyaW5nIG9sZEVuY29k
aW5nID0gdGhpcy5lbmNvZGluZ1Byb2plY3QuZ2V0RGVmYXVsdENoYXJzZXQoKTsKKwkJdHJ5ewor
CQkJU3RyaW5nIGVuY29kaW5nID0gIlNoaWZ0LUpJUyI7CisJCQlpZiAod2tzcEVuY29kaW5nLmVx
dWFscyhlbmNvZGluZykpCisJCQkJZ2V0V29ya3NwYWNlUm9vdCgpLnNldERlZmF1bHRDaGFyc2V0
KCJVVEYtOCIsIG51bGwpOworCQkJdGhpcy5lbmNvZGluZ1Byb2plY3Quc2V0RGVmYXVsdENoYXJz
ZXQoIlVURi04IiwgbnVsbCk7CisJCQlJSmF2YVByb2plY3QgcHJvamVjdCA9IHRoaXMuY3JlYXRl
SmF2YVByb2plY3QoIkVuY29kaW5nMiIsIG5ldyBTdHJpbmdbXSB7IiJ9LCAiIik7CisJCQlJRmls
ZSB6aXBGaWxlID0gKElGaWxlKSB0aGlzLmVuY29kaW5nUHJvamVjdC5maW5kTWVtYmVyKCJ0ZXN0
U2hpZnRKSVMuemlwIik7IC8vJE5PTi1OTFMtMSQKKwkJCUlGaWxlIHNvdXJjZUZpbGUgPSAoSUZp
bGUpIHRoaXMuZW5jb2RpbmdQcm9qZWN0LmZpbmRNZW1iZXIoInNyYy90ZXN0U2hpZnRKSVMvQS5q
YXZhIik7CisJCQkKKwkJCUlDbGFzc3BhdGhFbnRyeVtdIGVudHJpZXMgPSB0aGlzLmVuY29kaW5n
SmF2YVByb2plY3QuZ2V0UmF3Q2xhc3NwYXRoKCk7CisJCQlJQ2xhc3NwYXRoRW50cnkgbmV3RW50
cnkgPSBudWxsOworCQkJZm9yIChpbnQgaW5kZXggPSAwOyBpbmRleCA8IGVudHJpZXMubGVuZ3Ro
OyBpbmRleCsrKSB7CisJCQkJSUNsYXNzcGF0aEVudHJ5IGVudHJ5ID0gZW50cmllc1tpbmRleF07
CisJCQkJaWYgKGVudHJ5LmdldFBhdGgoKS50b09TU3RyaW5nKCkuZW5kc1dpdGgoInRlc3RTaGlm
dEpJUy5qYXIiKSkgeworCQkJCQluZXdFbnRyeSA9IGVudHJpZXNbaW5kZXhdOyAKKwkJCQl9CisJ
CQl9CisKKwkJCUlDbGFzc3BhdGhBdHRyaWJ1dGUgYXR0cmlidXRlID0gSmF2YUNvcmUubmV3Q2xh
c3NwYXRoQXR0cmlidXRlKElDbGFzc3BhdGhBdHRyaWJ1dGUuU09VUkNFX0FUVEFDSE1FTlRfRU5D
T0RJTkcsIGVuY29kaW5nKTsKKwkJCWF0dHJpYnV0ZSA9IEphdmFDb3JlLm5ld0NsYXNzcGF0aEF0
dHJpYnV0ZShJQ2xhc3NwYXRoQXR0cmlidXRlLlNPVVJDRV9BVFRBQ0hNRU5UX0VOQ09ESU5HLCBl
bmNvZGluZyk7CisJCQlwcm9qZWN0LnNldFJhd0NsYXNzcGF0aChuZXcgSUNsYXNzcGF0aEVudHJ5
W117SmF2YUNvcmUubmV3TGlicmFyeUVudHJ5KG5ld0VudHJ5LmdldFBhdGgoKSwgbmV3IFBhdGgo
Ii9FbmNvZGluZy90ZXN0U2hpZnRKSVMuemlwIiksIG51bGwsIG51bGwsIG5ldyBJQ2xhc3NwYXRo
QXR0cmlidXRlW117YXR0cmlidXRlfSwgZmFsc2UpfSwgbnVsbCk7CisJCQl6aXBGaWxlLnNldENo
YXJzZXQobnVsbCwgbnVsbCk7CisJCQkKKwkJCUlQYWNrYWdlRnJhZ21lbnRSb290IHJvb3QgPSBn
ZXRQYWNrYWdlRnJhZ21lbnRSb290KCJFbmNvZGluZzIiLCAidGVzdFNoaWZ0SklTLmphciIpOwor
CQkJSVNvdXJjZVJlZmVyZW5jZSBzb3VyY2VSZWYgPSByb290LmdldFBhY2thZ2VGcmFnbWVudCgi
dGVzdFNoaWZ0SklTIikuZ2V0Q2xhc3NGaWxlKCJBLmNsYXNzIik7CisJCQlhc3NlcnROb3ROdWxs
KHNvdXJjZVJlZik7CisJCQlTdHJpbmcgc291cmNlID0gc291cmNlUmVmLmdldFNvdXJjZSgpOwor
CQkJYXNzZXJ0Tm90TnVsbChzb3VyY2UpOworCQkJU3RyaW5nIGVuY29kZWRDb250ZW50cyA9IG5l
dyBTdHJpbmcgKFV0aWwuZ2V0UmVzb3VyY2VDb250ZW50c0FzQ2hhckFycmF5KHNvdXJjZUZpbGUs
IGVuY29kaW5nKSk7CisJCQljaGFyW10gY2hhckFycmF5ID0gZW5jb2RlZENvbnRlbnRzLnRvQ2hh
ckFycmF5KCk7CisJCQllbmNvZGVkQ29udGVudHMgPSBuZXcgU3RyaW5nKENoYXJPcGVyYXRpb24u
cmVtb3ZlKGNoYXJBcnJheSwgJ1xyJykpOworCQkJY2hhckFycmF5ID0gc291cmNlLnRvQ2hhckFy
cmF5KCk7CisJCQlzb3VyY2UgPSBuZXcgU3RyaW5nKENoYXJPcGVyYXRpb24ucmVtb3ZlKGNoYXJB
cnJheSwgJ1xyJykpOworCQkJYXNzZXJ0VHJ1ZSgiU291cmNlcyBzaG91bGQgYmUgZGVjb2RlZCB0
aGUgc2FtZSB3YXkiLCBlbmNvZGVkQ29udGVudHMuZXF1YWxzKHNvdXJjZSkpOworCisJCQlhdHRy
aWJ1dGUgPSBKYXZhQ29yZS5uZXdDbGFzc3BhdGhBdHRyaWJ1dGUoSUNsYXNzcGF0aEF0dHJpYnV0
ZS5TT1VSQ0VfQVRUQUNITUVOVF9FTkNPRElORywgIlVURi04Iik7CisJCQlwcm9qZWN0LnNldFJh
d0NsYXNzcGF0aChuZXcgSUNsYXNzcGF0aEVudHJ5W117SmF2YUNvcmUubmV3TGlicmFyeUVudHJ5
KG5ld0VudHJ5LmdldFBhdGgoKSwgbmV3IFBhdGgoIi9FbmNvZGluZy90ZXN0U2hpZnRKSVMuemlw
IiksIG51bGwsIG51bGwsIG5ldyBJQ2xhc3NwYXRoQXR0cmlidXRlW117YXR0cmlidXRlfSwgZmFs
c2UpfSwgbnVsbCk7CisJCQl6aXBGaWxlLnNldENoYXJzZXQoZW5jb2RpbmcsIG51bGwpOworCQkJ
CisJCQlyb290ID0gZ2V0UGFja2FnZUZyYWdtZW50Um9vdCgiRW5jb2RpbmcyIiwgInRlc3RTaGlm
dEpJUy5qYXIiKTsKKwkJCXNvdXJjZVJlZiA9IHJvb3QuZ2V0UGFja2FnZUZyYWdtZW50KCJ0ZXN0
U2hpZnRKSVMiKS5nZXRDbGFzc0ZpbGUoIkEuY2xhc3MiKTsKKwkJCWFzc2VydE5vdE51bGwoc291
cmNlUmVmKTsKKwkJCXNvdXJjZSA9IHNvdXJjZVJlZi5nZXRTb3VyY2UoKTsKKwkJCWFzc2VydE5v
dE51bGwoc291cmNlKTsKKwkJCWVuY29kZWRDb250ZW50cyA9IG5ldyBTdHJpbmcgKFV0aWwuZ2V0
UmVzb3VyY2VDb250ZW50c0FzQ2hhckFycmF5KHNvdXJjZUZpbGUsIGVuY29kaW5nKSk7CisJCQlj
aGFyQXJyYXkgPSBlbmNvZGVkQ29udGVudHMudG9DaGFyQXJyYXkoKTsKKwkJCWVuY29kZWRDb250
ZW50cyA9IG5ldyBTdHJpbmcoQ2hhck9wZXJhdGlvbi5yZW1vdmUoY2hhckFycmF5LCAnXHInKSk7
CisJCQljaGFyQXJyYXkgPSBzb3VyY2UudG9DaGFyQXJyYXkoKTsKKwkJCXNvdXJjZSA9IG5ldyBT
dHJpbmcoQ2hhck9wZXJhdGlvbi5yZW1vdmUoY2hhckFycmF5LCAnXHInKSk7CisJCQlhc3NlcnRU
cnVlKCJTb3VyY2VzIHNob3VsZCBiZSBkZWNvZGVkIHRoZSBzYW1lIHdheSIsIGVuY29kZWRDb250
ZW50cy5lcXVhbHMoc291cmNlKSk7CisJCX0KKwkJZmluYWxseSB7CisJCQl0aGlzLmVuY29kaW5n
UHJvamVjdC5zZXREZWZhdWx0Q2hhcnNldChvbGRFbmNvZGluZywgbnVsbCk7CisJCQlkZWxldGVQ
cm9qZWN0KCJFbmNvZGluZzIiKTsKKwkJCWdldFdvcmtzcGFjZVJvb3QoKS5zZXREZWZhdWx0Q2hh
cnNldCh3a3NwRW5jb2RpbmcsIG51bGwpOworCQl9CQkKKwl9CiAJcHJpdmF0ZSB2b2lkIHZlcmlm
eVV0ZjhCT00oSUZpbGUgZmlsZSkgdGhyb3dzIENvcmVFeGNlcHRpb24gewogCQlhc3NlcnROdWxs
KCJGaWxlIHNob3VsZCBub3QgaGF2ZSBhbnkgZXhwbGljaXQgY2hhcnNldCIsIGZpbGUuZ2V0Q2hh
cnNldChmYWxzZSkpOwogCQlJQ29udGVudERlc2NyaXB0aW9uIGNvbnRlbnREZXNjcmlwdGlvbiA9
IGZpbGUuZ2V0Q29udGVudERlc2NyaXB0aW9uKCk7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvY29yZS9JQ2xhc3NwYXRoQXR0cmlidXRlLmph
dmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvY29yZS9JQ2xh
c3NwYXRoQXR0cmlidXRlLmphdmEKaW5kZXggNjg1YzFhMy4uZTQ4ZDQ0OSAxMDA2NDQKLS0tIGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2NvcmUvSUNsYXNzcGF0
aEF0dHJpYnV0ZS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xp
cHNlL2pkdC9jb3JlL0lDbGFzc3BhdGhBdHRyaWJ1dGUuamF2YQpAQCAtNzAsNiArNzAsMTQgQEAK
IAlTdHJpbmcgSU5ERVhfTE9DQVRJT05fQVRUUklCVVRFX05BTUUgPSAiaW5kZXhfbG9jYXRpb24i
OyAvLyROT04tTkxTLTEkCiAKIAkvKioKKwkgKiBDb25zdGFudCBmb3IgdGhlIG5hbWUgb2YgdGhl
IGVuY29kaW5nIHRvIGJlIHVzZWQgZm9yIHNvdXJjZSBhdHRhY2htZW50cy4KKwkgKgorCSAqIDxw
PlRoZSB2YWx1ZSBvZiB0aGlzIGF0dHJpYnV0ZSBoYXMgdG8gYmUgYSBzdHJpbmcgcmVwcmVzZW50
YXRpb24gb2YgYSB2YWxpZCBlbmNvZGluZzwvcD4KKwkgKiBAc2luY2UgMy44CisJICovCisJU3Ry
aW5nIFNPVVJDRV9BVFRBQ0hNRU5UX0VOQ09ESU5HID0gInNvdXJjZV9lbmNvZGluZyI7IC8vJE5P
Ti1OTFMtMSQKKwkKKwkvKioKIAkgKiBDb25zdGFudCBmb3IgdGhlIG5hbWUgb2YgdGhlIG9wdGlv
bmFsIGF0dHJpYnV0ZS4gVGhlIHBvc3NpYmxlIHZhbHVlcwogCSAqIGZvciB0aGlzIGF0dHJpYnV0
ZSBhcmUgPGNvZGU+InRydWUiPC9jb2RlPiBvciA8Y29kZT4iZmFsc2UiPC9jb2RlPi4KIAkgKiBX
aGVuIG5vdCBwcmVzZW50LCA8Y29kZT4iZmFsc2UiPC9jb2RlPiBpcyBhc3N1bWVkLgpkaWZmIC0t
Z2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvcmUvQ2xhc3NwYXRoRW50cnkuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0NsYXNzcGF0aEVudHJ5LmphdmEKaW5kZXggODEw
YTZiMi4uM2I4MGZhNyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvQ2xhc3NwYXRoRW50cnkuamF2YQorKysgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9DbGFz
c3BhdGhFbnRyeS5qYXZhCkBAIC0xMjcwLDYgKzEyNzAsMTQgQEAKIAkJfQogCQlyZXR1cm4gZmFs
c2U7CiAJfQorCXB1YmxpYyBTdHJpbmcgZ2V0U291cmNlQXR0YWNobWVudEVuY29kaW5nKCkgewor
CQlmb3IgKGludCBpID0gMCwgbGVuZ3RoID0gdGhpcy5leHRyYUF0dHJpYnV0ZXMubGVuZ3RoOyBp
IDwgbGVuZ3RoOyBpKyspIHsKKwkJCUlDbGFzc3BhdGhBdHRyaWJ1dGUgYXR0cmlidXRlID0gdGhp
cy5leHRyYUF0dHJpYnV0ZXNbaV07CisJCQlpZiAoSUNsYXNzcGF0aEF0dHJpYnV0ZS5TT1VSQ0Vf
QVRUQUNITUVOVF9FTkNPRElORy5lcXVhbHMoYXR0cmlidXRlLmdldE5hbWUoKSkpCisJCQkJcmV0
dXJuIGF0dHJpYnV0ZS5nZXRWYWx1ZSgpOworCQl9CisJCXJldHVybiBudWxsOworCX0KIAogCS8q
KgogCSAqIFJldHVybnMgdGhlIGtpbmQgb2YgYSA8Y29kZT5QYWNrYWdlRnJhZ21lbnRSb290PC9j
b2RlPiBmcm9tIGl0cyA8Y29kZT5TdHJpbmc8L2NvZGU+IGZvcm0uCmRpZmYgLS1naXQgYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9QYWNr
YWdlRnJhZ21lbnRSb290LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29yZS9QYWNrYWdlRnJhZ21lbnRSb290LmphdmEKaW5kZXggOWZi
NTljNi4uYzFlNTRhMCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvUGFja2FnZUZyYWdtZW50Um9vdC5qYXZhCisrKyBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3Jl
L1BhY2thZ2VGcmFnbWVudFJvb3QuamF2YQpAQCAtMTU0LDExICsxNTQsMTUgQEAKIAlyZXR1cm4g
Y29tcHV0ZUNoaWxkcmVuKGluZm8sIHVuZGVybHlpbmdSZXNvdXJjZSk7CiB9CiAKLVNvdXJjZU1h
cHBlciBjcmVhdGVTb3VyY2VNYXBwZXIoSVBhdGggc291cmNlUGF0aCwgSVBhdGggcm9vdFBhdGgp
IHsKK1NvdXJjZU1hcHBlciBjcmVhdGVTb3VyY2VNYXBwZXIoSVBhdGggc291cmNlUGF0aCwgSVBh
dGggcm9vdFBhdGgpIHRocm93cyBKYXZhTW9kZWxFeGNlcHRpb24geworCUlDbGFzc3BhdGhFbnRy
eSBlbnRyeSA9ICgoSmF2YVByb2plY3QpIGdldFBhcmVudCgpKS5nZXRDbGFzc3BhdGhFbnRyeUZv
cihnZXRQYXRoKCkpOworCVN0cmluZyBlbmNvZGluZyA9IChlbnRyeT09IG51bGwpID8gbnVsbCA6
ICgoQ2xhc3NwYXRoRW50cnkpIGVudHJ5KS5nZXRTb3VyY2VBdHRhY2htZW50RW5jb2RpbmcoKTsK
IAlTb3VyY2VNYXBwZXIgbWFwcGVyID0gbmV3IFNvdXJjZU1hcHBlcigKIAkJc291cmNlUGF0aCwK
IAkJcm9vdFBhdGggPT0gbnVsbCA/IG51bGwgOiByb290UGF0aC50b09TU3RyaW5nKCksCi0JCWdl
dEphdmFQcm9qZWN0KCkuZ2V0T3B0aW9ucyh0cnVlKSk7IC8vIGNhbm5vdCB1c2Ugd29ya3NwYWNl
IG9wdGlvbnMgaWYgZXh0ZXJuYWwgamFyIGlzIDEuNSBqYXIgYW5kIHdvcmtzcGFjZSBvcHRpb25z
IGFyZSAxLjQgb3B0aW9ucworCQlnZXRKYXZhUHJvamVjdCgpLmdldE9wdGlvbnModHJ1ZSksLy8g
Y2Fubm90IHVzZSB3b3Jrc3BhY2Ugb3B0aW9ucyBpZiBleHRlcm5hbCBqYXIgaXMgMS41IGphciBh
bmQgd29ya3NwYWNlIG9wdGlvbnMgYXJlIDEuNCBvcHRpb25zCisJCWVuY29kaW5nKTsKKwogCXJl
dHVybiBtYXBwZXI7CiB9CiAvKgpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9k
ZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvU291cmNlTWFwcGVyLmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9Tb3Vy
Y2VNYXBwZXIuamF2YQppbmRleCBiMjMwMmQ2Li5jMWMzZTg2IDEwMDY0NAotLS0gYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9Tb3VyY2VN
YXBwZXIuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29yZS9Tb3VyY2VNYXBwZXIuamF2YQpAQCAtMjUwLDYgKzI1MCw3IEBACiAJ
ICpPcHRpb25zIHRvIGJlIHVzZWQKIAkgKi8KIAlTdHJpbmcgZW5jb2Rpbmc7CisJU3RyaW5nIGRl
ZmF1bHRFbmNvZGluZzsKIAlNYXAgb3B0aW9uczsKIAogCS8qKgpAQCAtMjYxLDE1ICsyNjIsMTkg
QEAKIAkJdGhpcy5hcmVSb290UGF0aHNDb21wdXRlZCA9IGZhbHNlOwogCX0KIAorCXB1YmxpYyBT
b3VyY2VNYXBwZXIoSVBhdGggc291cmNlUGF0aCwgU3RyaW5nIHJvb3RQYXRoLCBNYXAgb3B0aW9u
cykgeworCQl0aGlzKHNvdXJjZVBhdGgsIHJvb3RQYXRoLCBvcHRpb25zLCBudWxsKTsKKwl9CiAJ
LyoqCiAJICogQ3JlYXRlcyBhIDxjb2RlPlNvdXJjZU1hcHBlcjwvY29kZT4gdGhhdCBsb2NhdGVz
IHNvdXJjZSBpbiB0aGUgemlwIGZpbGUKIAkgKiBhdCB0aGUgZ2l2ZW4gbG9jYXRpb24gaW4gdGhl
IHNwZWNpZmllZCBwYWNrYWdlIGZyYWdtZW50IHJvb3QuCiAJICovCi0JcHVibGljIFNvdXJjZU1h
cHBlcihJUGF0aCBzb3VyY2VQYXRoLCBTdHJpbmcgcm9vdFBhdGgsIE1hcCBvcHRpb25zKSB7CisJ
cHVibGljIFNvdXJjZU1hcHBlcihJUGF0aCBzb3VyY2VQYXRoLCBTdHJpbmcgcm9vdFBhdGgsIE1h
cCBvcHRpb25zLCBTdHJpbmcgZW5jb2RpbmcpIHsKIAkJdGhpcy5hcmVSb290UGF0aHNDb21wdXRl
ZCA9IGZhbHNlOwogCQl0aGlzLm9wdGlvbnMgPSBvcHRpb25zOworCQl0aGlzLmVuY29kaW5nID0g
ZW5jb2Rpbmc7CiAJCXRyeSB7Ci0JCQl0aGlzLmVuY29kaW5nID0gUmVzb3VyY2VzUGx1Z2luLmdl
dFdvcmtzcGFjZSgpLmdldFJvb3QoKS5nZXREZWZhdWx0Q2hhcnNldCgpOworCQkJdGhpcy5kZWZh
dWx0RW5jb2RpbmcgPSBSZXNvdXJjZXNQbHVnaW4uZ2V0V29ya3NwYWNlKCkuZ2V0Um9vdCgpLmdl
dERlZmF1bHRDaGFyc2V0KCk7CiAJCX0gY2F0Y2ggKENvcmVFeGNlcHRpb24gZSkgewogCQkJLy8g
dXNlIG5vIGVuY29kaW5nCiAJCX0KQEAgLTEwMjAsOSArMTAyNSwxNiBAQAogCQkJSVJlc291cmNl
IHJlcyA9ICgoSUNvbnRhaW5lcil0YXJnZXQpLmZpbmRNZW1iZXIoZnVsbE5hbWUpOwogCQkJaWYg
KHJlcyBpbnN0YW5jZW9mIElGaWxlKSB7CiAJCQkJdHJ5IHsKLQkJCQkJc291cmNlID0gb3JnLmVj
bGlwc2UuamR0LmludGVybmFsLmNvcmUudXRpbC5VdGlsLmdldFJlc291cmNlQ29udGVudHNBc0No
YXJBcnJheSgoSUZpbGUpcmVzKTsKKwkJCQkJLy8gT3JkZXIgb2YgcHJlZmVyZW5jZTogY2hhclNl
dCBzdXBwbGllZCwgdGhpcy5lbmNvZGluZyBvciB0aGlzLmRlZmF1bHRFbmNvZGluZyBpbiB0aGF0
IG9yZGVyCisJCQkJCXRyeSB7CisJCQkJCQljaGFyU2V0ID0gKChJRmlsZSkgcmVzKS5nZXRDaGFy
c2V0KHRoaXMuZW5jb2RpbmcgPT0gbnVsbCk7CisJCQkJCX0gY2F0Y2ggKENvcmVFeGNlcHRpb24g
ZSkgeworCQkJCQkJLy8gSWdub3JlCisJCQkJCX0KKwkJCQkJc291cmNlID0gb3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvcmUudXRpbC5VdGlsLmdldFJlc291cmNlQ29udGVudHNBc0NoYXJBcnJh
eSgoSUZpbGUpIHJlcywKKwkJCQkJCQkJCWNoYXJTZXQgPT0gbnVsbCA/ICh0aGlzLmVuY29kaW5n
ID09IG51bGwgPyB0aGlzLmRlZmF1bHRFbmNvZGluZyA6IHRoaXMuZW5jb2RpbmcpIDogY2hhclNl
dCk7CiAJCQkJfSBjYXRjaCAoSmF2YU1vZGVsRXhjZXB0aW9uIGUpIHsKLQkJCQkJLy8gaWdub3Jl
CisJCQkJCS8vIElnbm9yZQogCQkJCX0KIAkJCX0KIAkJfSBlbHNlIHsKQEAgLTEwMzAsNyArMTA0
Miw3IEBACiAJCQkJLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dp
P2lkPTMwMzUxMQogCQkJCS8vIEZvciBhIHJlc291cmNlIGluc2lkZSB0aGUgd29ya3NwYWNlLCB1
c2UgdGhlIGVuY29kaW5nIHNldCBvbiB0aGUgcmVzb3VyY2UKIAkJCQlpZiAodGFyZ2V0IGluc3Rh
bmNlb2YgSUZpbGUpCi0JCQkJCWNoYXJTZXQgPSAoKElGaWxlKXRhcmdldCkuZ2V0Q2hhcnNldCgp
OworCQkJCQljaGFyU2V0ID0gKChJRmlsZSl0YXJnZXQpLmdldENoYXJzZXQodGhpcy5lbmNvZGlu
ZyA9PSBudWxsKTsKIAkJCX0gY2F0Y2ggKENvcmVFeGNlcHRpb24gZSkgewogCQkJCS8vIElnbm9y
ZQogCQkJfQpAQCAtMTQxNCw3ICsxNDI2LDggQEAKIAkJdHJ5IHsKIAkJCWJ5dGVbXSBieXRlcyA9
IFV0aWwuZ2V0WmlwRW50cnlCeXRlQ29udGVudChlbnRyeSwgemlwKTsKIAkJCWlmIChieXRlcyAh
PSBudWxsKSB7Ci0JCQkJcmV0dXJuIFV0aWwuYnl0ZXNUb0NoYXIoYnl0ZXMsIGNoYXJTZXQgPT0g
bnVsbCA/IHRoaXMuZW5jb2RpbmcgOiBjaGFyU2V0KTsKKwkJCQkvLyBPcmRlciBvZiBwcmVmZXJl
bmNlOiBjaGFyU2V0IHN1cHBsaWVkLCB0aGlzLmVuY29kaW5nIG9yIHRoaXMuZGVmYXVsdEVuY29k
aW5nIGluIHRoYXQgb3JkZXIKKwkJCQlyZXR1cm4gVXRpbC5ieXRlc1RvQ2hhcihieXRlcywgY2hh
clNldCA9PSBudWxsID8gKHRoaXMuZW5jb2RpbmcgPT0gbnVsbCA/IHRoaXMuZGVmYXVsdEVuY29k
aW5nIDogdGhpcy5lbmNvZGluZykgOiBjaGFyU2V0KTsKIAkJCX0KIAkJfSBjYXRjaCAoSU9FeGNl
cHRpb24gZSkgewogCQkJLy8gaWdub3Jl
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>209785</attachid>
            <date>2012-01-19 23:08:00 -0500</date>
            <delta_ts>2012-01-19 23:08:22 -0500</delta_ts>
            <desc>Updated patch</desc>
            <filename>bug361356.patch</filename>
            <type>text/plain</type>
            <size>22142</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9tb2RlbC9FbmNvZGluZ1Rlc3RzLmphdmEgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvbW9k
ZWwvRW5jb2RpbmdUZXN0cy5qYXZhCmluZGV4IGM5MzY4YzguLjhiYWE5NmEgMTAwNjQ0Ci0tLSBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29y
ZS90ZXN0cy9tb2RlbC9FbmNvZGluZ1Rlc3RzLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21vZGVsL0VuY29k
aW5nVGVzdHMuamF2YQpAQCAtMjgsNiArMjgsNyBAQAogaW1wb3J0IG9yZy5lY2xpcHNlLmNvcmUu
cnVudGltZS5jb250ZW50LklDb250ZW50RGVzY3JpcHRpb247CiBpbXBvcnQgb3JnLmVjbGlwc2Uu
Y29yZS5ydW50aW1lLnByZWZlcmVuY2VzLklFY2xpcHNlUHJlZmVyZW5jZXM7CiBpbXBvcnQgb3Jn
LmVjbGlwc2UuY29yZS5ydW50aW1lLnByZWZlcmVuY2VzLkluc3RhbmNlU2NvcGU7CitpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmNvcmUuSUNsYXNzcGF0aEF0dHJpYnV0ZTsKIGltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuY29yZS5JQ2xhc3NwYXRoRW50cnk7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNv
cmUuSUNvbXBpbGF0aW9uVW5pdDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5JSmF2YVBy
b2plY3Q7CkBAIC02Miw3ICs2Myw3IEBACiAJLy8gVXNlIHRoaXMgc3RhdGljIGluaXRpYWxpemVy
IHRvIHNwZWNpZnkgc3Vic2V0IGZvciB0ZXN0cwogCS8vIEFsbCBzcGVjaWZpZWQgdGVzdHMgd2hp
Y2ggZG8gbm90IGJlbG9uZyB0byB0aGUgY2xhc3MgYXJlIHNraXBwZWQuLi4KIAlzdGF0aWMgewot
Ly8JCVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1tdIHsgInRlc3RCdWcxMTA1NzYiIH07CisvLwkJ
VEVTVFNfTkFNRVMgPSBuZXcgU3RyaW5nW10geyAidGVzdEJ1ZzM2MTM1NiIgfTsKIC8vCQlURVNU
U19OVU1CRVJTID0gbmV3IGludFtdIHsgMiwgMTIgfTsKIC8vCQlURVNUU19SQU5HRSA9IG5ldyBp
bnRbXSB7IDE2LCAtMSB9OwogCX0KQEAgLTEyMTcsNyArMTIxOCwyNTYgQEAKIAkJCWdldFdvcmtz
cGFjZVJvb3QoKS5zZXREZWZhdWx0Q2hhcnNldCh3a3NwRW5jb2RpbmcsIG51bGwpOwogCQl9CiAJ
fQotCQorCXB1YmxpYyB2b2lkIHRlc3RCdWczNjEzNTYoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJ
U3RyaW5nIG9sZEVuY29kaW5nID0gdGhpcy5lbmNvZGluZ1Byb2plY3QuZ2V0RGVmYXVsdENoYXJz
ZXQoKTsKKwkJdHJ5eworCQkJU3RyaW5nIGVuY29kaW5nID0gIlNoaWZ0LUpJUyI7CisJCQlpZiAo
d2tzcEVuY29kaW5nLmVxdWFscyhlbmNvZGluZykpCisJCQkJZ2V0V29ya3NwYWNlUm9vdCgpLnNl
dERlZmF1bHRDaGFyc2V0KCJVVEYtOCIsIG51bGwpOworCQkJdGhpcy5lbmNvZGluZ1Byb2plY3Qu
c2V0RGVmYXVsdENoYXJzZXQoIlVURi04IiwgbnVsbCk7CisJCQlJSmF2YVByb2plY3QgcHJvamVj
dCA9IHRoaXMuY3JlYXRlSmF2YVByb2plY3QoIkVuY29kaW5nMiIsIG5ldyBTdHJpbmdbXSB7IiJ9
LCAiIik7CisJCQlJRmlsZSB6aXBGaWxlID0gKElGaWxlKSB0aGlzLmVuY29kaW5nUHJvamVjdC5m
aW5kTWVtYmVyKCJ0ZXN0U2hpZnRKSVMuemlwIik7IC8vJE5PTi1OTFMtMSQKKwkJCUlGaWxlIHNv
dXJjZUZpbGUgPSAoSUZpbGUpIHRoaXMuZW5jb2RpbmdQcm9qZWN0LmZpbmRNZW1iZXIoInNyYy90
ZXN0U2hpZnRKSVMvQS5qYXZhIik7CisJCQkKKwkJCUlDbGFzc3BhdGhFbnRyeVtdIGVudHJpZXMg
PSB0aGlzLmVuY29kaW5nSmF2YVByb2plY3QuZ2V0UmF3Q2xhc3NwYXRoKCk7CisJCQlJQ2xhc3Nw
YXRoRW50cnkgbmV3RW50cnkgPSBudWxsOworCQkJZm9yIChpbnQgaW5kZXggPSAwOyBpbmRleCA8
IGVudHJpZXMubGVuZ3RoOyBpbmRleCsrKSB7CisJCQkJSUNsYXNzcGF0aEVudHJ5IGVudHJ5ID0g
ZW50cmllc1tpbmRleF07CisJCQkJaWYgKGVudHJ5LmdldFBhdGgoKS50b09TU3RyaW5nKCkuZW5k
c1dpdGgoInRlc3RTaGlmdEpJUy5qYXIiKSkgeworCQkJCQluZXdFbnRyeSA9IGVudHJpZXNbaW5k
ZXhdOyAKKwkJCQl9CisJCQl9CisKKwkJCUlDbGFzc3BhdGhBdHRyaWJ1dGUgYXR0cmlidXRlID0g
SmF2YUNvcmUubmV3Q2xhc3NwYXRoQXR0cmlidXRlKElDbGFzc3BhdGhBdHRyaWJ1dGUuU09VUkNF
X0FUVEFDSE1FTlRfRU5DT0RJTkcsIGVuY29kaW5nKTsKKwkJCXByb2plY3Quc2V0UmF3Q2xhc3Nw
YXRoKG5ldyBJQ2xhc3NwYXRoRW50cnlbXXtKYXZhQ29yZS5uZXdMaWJyYXJ5RW50cnkobmV3RW50
cnkuZ2V0UGF0aCgpLCBuZXcgUGF0aCgiL0VuY29kaW5nL3NyYyIpLCBudWxsLCBudWxsLCBuZXcg
SUNsYXNzcGF0aEF0dHJpYnV0ZVtde2F0dHJpYnV0ZX0sIGZhbHNlKX0sIG51bGwpOworCQkJc291
cmNlRmlsZS5zZXRDaGFyc2V0KG51bGwsIG51bGwpOworCQkJCisJCQlJUGFja2FnZUZyYWdtZW50
Um9vdCByb290ID0gZ2V0UGFja2FnZUZyYWdtZW50Um9vdCgiRW5jb2RpbmcyIiwgInRlc3RTaGlm
dEpJUy5qYXIiKTsKKwkJCUlTb3VyY2VSZWZlcmVuY2Ugc291cmNlUmVmID0gcm9vdC5nZXRQYWNr
YWdlRnJhZ21lbnQoInRlc3RTaGlmdEpJUyIpLmdldENsYXNzRmlsZSgiQS5jbGFzcyIpOworCQkJ
YXNzZXJ0Tm90TnVsbChzb3VyY2VSZWYpOworCQkJU3RyaW5nIHNvdXJjZSA9IHNvdXJjZVJlZi5n
ZXRTb3VyY2UoKTsKKwkJCWFzc2VydE5vdE51bGwoc291cmNlKTsKKwkJCVN0cmluZyBlbmNvZGVk
Q29udGVudHMgPSBuZXcgU3RyaW5nIChVdGlsLmdldFJlc291cmNlQ29udGVudHNBc0NoYXJBcnJh
eShzb3VyY2VGaWxlLCBlbmNvZGluZykpOworCQkJY2hhcltdIGNoYXJBcnJheSA9IGVuY29kZWRD
b250ZW50cy50b0NoYXJBcnJheSgpOworCQkJZW5jb2RlZENvbnRlbnRzID0gbmV3IFN0cmluZyhD
aGFyT3BlcmF0aW9uLnJlbW92ZShjaGFyQXJyYXksICdccicpKTsKKwkJCWNoYXJBcnJheSA9IHNv
dXJjZS50b0NoYXJBcnJheSgpOworCQkJc291cmNlID0gbmV3IFN0cmluZyhDaGFyT3BlcmF0aW9u
LnJlbW92ZShjaGFyQXJyYXksICdccicpKTsKKwkJCWFzc2VydFRydWUoIlNvdXJjZXMgc2hvdWxk
IGJlIGRlY29kZWQgdGhlIHNhbWUgd2F5IiwgZW5jb2RlZENvbnRlbnRzLmVxdWFscyhzb3VyY2Up
KTsKKworCQkJYXR0cmlidXRlID0gSmF2YUNvcmUubmV3Q2xhc3NwYXRoQXR0cmlidXRlKElDbGFz
c3BhdGhBdHRyaWJ1dGUuU09VUkNFX0FUVEFDSE1FTlRfRU5DT0RJTkcsICJVVEYtOCIpOworCQkJ
cHJvamVjdC5zZXRSYXdDbGFzc3BhdGgobmV3IElDbGFzc3BhdGhFbnRyeVtde0phdmFDb3JlLm5l
d0xpYnJhcnlFbnRyeShuZXdFbnRyeS5nZXRQYXRoKCksIG5ldyBQYXRoKCIvRW5jb2Rpbmcvc3Jj
IiksIG51bGwsIG51bGwsIG5ldyBJQ2xhc3NwYXRoQXR0cmlidXRlW117YXR0cmlidXRlfSwgZmFs
c2UpfSwgbnVsbCk7CisJCQlzb3VyY2VGaWxlLnNldENoYXJzZXQoZW5jb2RpbmcsIG51bGwpOwor
CQkJCisJCQlyb290ID0gZ2V0UGFja2FnZUZyYWdtZW50Um9vdCgiRW5jb2RpbmcyIiwgInRlc3RT
aGlmdEpJUy5qYXIiKTsKKwkJCXNvdXJjZVJlZiA9IHJvb3QuZ2V0UGFja2FnZUZyYWdtZW50KCJ0
ZXN0U2hpZnRKSVMiKS5nZXRDbGFzc0ZpbGUoIkEuY2xhc3MiKTsKKwkJCWFzc2VydE5vdE51bGwo
c291cmNlUmVmKTsKKwkJCXNvdXJjZSA9IHNvdXJjZVJlZi5nZXRTb3VyY2UoKTsKKwkJCWFzc2Vy
dE5vdE51bGwoc291cmNlKTsKKwkJCWVuY29kZWRDb250ZW50cyA9IG5ldyBTdHJpbmcgKFV0aWwu
Z2V0UmVzb3VyY2VDb250ZW50c0FzQ2hhckFycmF5KHNvdXJjZUZpbGUsIGVuY29kaW5nKSk7CisJ
CQljaGFyQXJyYXkgPSBlbmNvZGVkQ29udGVudHMudG9DaGFyQXJyYXkoKTsKKwkJCWVuY29kZWRD
b250ZW50cyA9IG5ldyBTdHJpbmcoQ2hhck9wZXJhdGlvbi5yZW1vdmUoY2hhckFycmF5LCAnXHIn
KSk7CisJCQljaGFyQXJyYXkgPSBzb3VyY2UudG9DaGFyQXJyYXkoKTsKKwkJCXNvdXJjZSA9IG5l
dyBTdHJpbmcoQ2hhck9wZXJhdGlvbi5yZW1vdmUoY2hhckFycmF5LCAnXHInKSk7CisJCQlhc3Nl
cnRUcnVlKCJTb3VyY2VzIHNob3VsZCBiZSBkZWNvZGVkIHRoZSBzYW1lIHdheSIsIGVuY29kZWRD
b250ZW50cy5lcXVhbHMoc291cmNlKSk7CisKKwkJCWF0dHJpYnV0ZSA9IEphdmFDb3JlLm5ld0Ns
YXNzcGF0aEF0dHJpYnV0ZShJQ2xhc3NwYXRoQXR0cmlidXRlLlNPVVJDRV9BVFRBQ0hNRU5UX0VO
Q09ESU5HLCBlbmNvZGluZyk7CisJCQlwcm9qZWN0LnNldFJhd0NsYXNzcGF0aChuZXcgSUNsYXNz
cGF0aEVudHJ5W117SmF2YUNvcmUubmV3TGlicmFyeUVudHJ5KG5ld0VudHJ5LmdldFBhdGgoKSwg
bmV3IFBhdGgoIi9FbmNvZGluZy90ZXN0U2hpZnRKSVMuemlwIiksIG51bGwsIG51bGwsIG5ldyBJ
Q2xhc3NwYXRoQXR0cmlidXRlW117YXR0cmlidXRlfSwgZmFsc2UpfSwgbnVsbCk7CisJCQl6aXBG
aWxlLnNldENoYXJzZXQobnVsbCwgbnVsbCk7CisJCQkKKwkJCXJvb3QgPSBnZXRQYWNrYWdlRnJh
Z21lbnRSb290KCJFbmNvZGluZzIiLCAidGVzdFNoaWZ0SklTLmphciIpOworCQkJc291cmNlUmVm
ID0gcm9vdC5nZXRQYWNrYWdlRnJhZ21lbnQoInRlc3RTaGlmdEpJUyIpLmdldENsYXNzRmlsZSgi
QS5jbGFzcyIpOworCQkJYXNzZXJ0Tm90TnVsbChzb3VyY2VSZWYpOworCQkJc291cmNlID0gc291
cmNlUmVmLmdldFNvdXJjZSgpOworCQkJYXNzZXJ0Tm90TnVsbChzb3VyY2UpOworCQkJZW5jb2Rl
ZENvbnRlbnRzID0gbmV3IFN0cmluZyAoVXRpbC5nZXRSZXNvdXJjZUNvbnRlbnRzQXNDaGFyQXJy
YXkoc291cmNlRmlsZSwgZW5jb2RpbmcpKTsKKwkJCWNoYXJBcnJheSA9IGVuY29kZWRDb250ZW50
cy50b0NoYXJBcnJheSgpOworCQkJZW5jb2RlZENvbnRlbnRzID0gbmV3IFN0cmluZyhDaGFyT3Bl
cmF0aW9uLnJlbW92ZShjaGFyQXJyYXksICdccicpKTsKKwkJCWNoYXJBcnJheSA9IHNvdXJjZS50
b0NoYXJBcnJheSgpOworCQkJc291cmNlID0gbmV3IFN0cmluZyhDaGFyT3BlcmF0aW9uLnJlbW92
ZShjaGFyQXJyYXksICdccicpKTsKKwkJCWFzc2VydFRydWUoIlNvdXJjZXMgc2hvdWxkIGJlIGRl
Y29kZWQgdGhlIHNhbWUgd2F5IiwgZW5jb2RlZENvbnRlbnRzLmVxdWFscyhzb3VyY2UpKTsKKwor
CQkJYXR0cmlidXRlID0gSmF2YUNvcmUubmV3Q2xhc3NwYXRoQXR0cmlidXRlKElDbGFzc3BhdGhB
dHRyaWJ1dGUuU09VUkNFX0FUVEFDSE1FTlRfRU5DT0RJTkcsICJVVEYtOCIpOworCQkJcHJvamVj
dC5zZXRSYXdDbGFzc3BhdGgobmV3IElDbGFzc3BhdGhFbnRyeVtde0phdmFDb3JlLm5ld0xpYnJh
cnlFbnRyeShuZXdFbnRyeS5nZXRQYXRoKCksIG5ldyBQYXRoKCIvRW5jb2RpbmcvdGVzdFNoaWZ0
SklTLnppcCIpLCBudWxsLCBudWxsLCBuZXcgSUNsYXNzcGF0aEF0dHJpYnV0ZVtde2F0dHJpYnV0
ZX0sIGZhbHNlKX0sIG51bGwpOworCQkJemlwRmlsZS5zZXRDaGFyc2V0KGVuY29kaW5nLCBudWxs
KTsKKwkJCQorCQkJcm9vdCA9IGdldFBhY2thZ2VGcmFnbWVudFJvb3QoIkVuY29kaW5nMiIsICJ0
ZXN0U2hpZnRKSVMuamFyIik7CisJCQlzb3VyY2VSZWYgPSByb290LmdldFBhY2thZ2VGcmFnbWVu
dCgidGVzdFNoaWZ0SklTIikuZ2V0Q2xhc3NGaWxlKCJBLmNsYXNzIik7CisJCQlhc3NlcnROb3RO
dWxsKHNvdXJjZVJlZik7CisJCQlzb3VyY2UgPSBzb3VyY2VSZWYuZ2V0U291cmNlKCk7CisJCQlh
c3NlcnROb3ROdWxsKHNvdXJjZSk7CisJCQllbmNvZGVkQ29udGVudHMgPSBuZXcgU3RyaW5nIChV
dGlsLmdldFJlc291cmNlQ29udGVudHNBc0NoYXJBcnJheShzb3VyY2VGaWxlLCBlbmNvZGluZykp
OworCQkJY2hhckFycmF5ID0gZW5jb2RlZENvbnRlbnRzLnRvQ2hhckFycmF5KCk7CisJCQllbmNv
ZGVkQ29udGVudHMgPSBuZXcgU3RyaW5nKENoYXJPcGVyYXRpb24ucmVtb3ZlKGNoYXJBcnJheSwg
J1xyJykpOworCQkJY2hhckFycmF5ID0gc291cmNlLnRvQ2hhckFycmF5KCk7CisJCQlzb3VyY2Ug
PSBuZXcgU3RyaW5nKENoYXJPcGVyYXRpb24ucmVtb3ZlKGNoYXJBcnJheSwgJ1xyJykpOworCQkJ
YXNzZXJ0VHJ1ZSgiU291cmNlcyBzaG91bGQgYmUgZGVjb2RlZCB0aGUgc2FtZSB3YXkiLCBlbmNv
ZGVkQ29udGVudHMuZXF1YWxzKHNvdXJjZSkpOworCisJCX0KKwkJZmluYWxseSB7CisJCQl0aGlz
LmVuY29kaW5nUHJvamVjdC5zZXREZWZhdWx0Q2hhcnNldChvbGRFbmNvZGluZywgbnVsbCk7CisJ
CQlkZWxldGVQcm9qZWN0KCJFbmNvZGluZzIiKTsKKwkJCWdldFdvcmtzcGFjZVJvb3QoKS5zZXRE
ZWZhdWx0Q2hhcnNldCh3a3NwRW5jb2RpbmcsIG51bGwpOworCQl9CQkKKwl9CisJcHVibGljIHZv
aWQgdGVzdEJ1ZzM2MTM1NmEoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJU3RyaW5nIG9sZEVuY29k
aW5nID0gdGhpcy5lbmNvZGluZ1Byb2plY3QuZ2V0RGVmYXVsdENoYXJzZXQoKTsKKwkJdHJ5ewor
CQkJU3RyaW5nIGVuY29kaW5nID0gIlNoaWZ0LUpJUyI7CisJCQlpZiAod2tzcEVuY29kaW5nLmVx
dWFscyhlbmNvZGluZykpCisJCQkJZ2V0V29ya3NwYWNlUm9vdCgpLnNldERlZmF1bHRDaGFyc2V0
KCJVVEYtOCIsIG51bGwpOworCQkJdGhpcy5lbmNvZGluZ1Byb2plY3Quc2V0RGVmYXVsdENoYXJz
ZXQoIlVURi04IiwgbnVsbCk7CisJCQlJSmF2YVByb2plY3QgcHJvamVjdCA9IHRoaXMuY3JlYXRl
SmF2YVByb2plY3QoIkVuY29kaW5nMiIsIG5ldyBTdHJpbmdbXSB7IiJ9LCAiIik7CisJCQlJRmls
ZSB6aXBGaWxlID0gKElGaWxlKSB0aGlzLmVuY29kaW5nUHJvamVjdC5maW5kTWVtYmVyKCJ0ZXN0
U2hpZnRKSVMuemlwIik7IC8vJE5PTi1OTFMtMSQKKwkJCUlGaWxlIHNvdXJjZUZpbGUgPSAoSUZp
bGUpIHRoaXMuZW5jb2RpbmdQcm9qZWN0LmZpbmRNZW1iZXIoInNyYy90ZXN0U2hpZnRKSVMvQS5q
YXZhIik7CisJCQkKKwkJCUlDbGFzc3BhdGhFbnRyeVtdIGVudHJpZXMgPSB0aGlzLmVuY29kaW5n
SmF2YVByb2plY3QuZ2V0UmF3Q2xhc3NwYXRoKCk7CisJCQlJQ2xhc3NwYXRoRW50cnkgbmV3RW50
cnkgPSBudWxsOworCQkJZm9yIChpbnQgaW5kZXggPSAwOyBpbmRleCA8IGVudHJpZXMubGVuZ3Ro
OyBpbmRleCsrKSB7CisJCQkJSUNsYXNzcGF0aEVudHJ5IGVudHJ5ID0gZW50cmllc1tpbmRleF07
CisJCQkJaWYgKGVudHJ5LmdldFBhdGgoKS50b09TU3RyaW5nKCkuZW5kc1dpdGgoInRlc3RTaGlm
dEpJUy5qYXIiKSkgeworCQkJCQluZXdFbnRyeSA9IGVudHJpZXNbaW5kZXhdOyAKKwkJCQl9CisJ
CQl9CisKKwkJCUlDbGFzc3BhdGhBdHRyaWJ1dGUgYXR0cmlidXRlID0gSmF2YUNvcmUubmV3Q2xh
c3NwYXRoQXR0cmlidXRlKElDbGFzc3BhdGhBdHRyaWJ1dGUuU09VUkNFX0FUVEFDSE1FTlRfRU5D
T0RJTkcsIGVuY29kaW5nKTsKKwkJCWF0dHJpYnV0ZSA9IEphdmFDb3JlLm5ld0NsYXNzcGF0aEF0
dHJpYnV0ZShJQ2xhc3NwYXRoQXR0cmlidXRlLlNPVVJDRV9BVFRBQ0hNRU5UX0VOQ09ESU5HLCBl
bmNvZGluZyk7CisJCQlwcm9qZWN0LnNldFJhd0NsYXNzcGF0aChuZXcgSUNsYXNzcGF0aEVudHJ5
W117SmF2YUNvcmUubmV3TGlicmFyeUVudHJ5KG5ld0VudHJ5LmdldFBhdGgoKSwgbmV3IFBhdGgo
Ii9FbmNvZGluZy90ZXN0U2hpZnRKSVMuemlwIiksIG51bGwsIG51bGwsIG5ldyBJQ2xhc3NwYXRo
QXR0cmlidXRlW117YXR0cmlidXRlfSwgZmFsc2UpfSwgbnVsbCk7CisJCQl6aXBGaWxlLnNldENo
YXJzZXQobnVsbCwgbnVsbCk7CisJCQkKKwkJCUlQYWNrYWdlRnJhZ21lbnRSb290IHJvb3QgPSBn
ZXRQYWNrYWdlRnJhZ21lbnRSb290KCJFbmNvZGluZzIiLCAidGVzdFNoaWZ0SklTLmphciIpOwor
CQkJSVNvdXJjZVJlZmVyZW5jZSBzb3VyY2VSZWYgPSByb290LmdldFBhY2thZ2VGcmFnbWVudCgi
dGVzdFNoaWZ0SklTIikuZ2V0Q2xhc3NGaWxlKCJBLmNsYXNzIik7CisJCQlhc3NlcnROb3ROdWxs
KHNvdXJjZVJlZik7CisJCQlTdHJpbmcgc291cmNlID0gc291cmNlUmVmLmdldFNvdXJjZSgpOwor
CQkJYXNzZXJ0Tm90TnVsbChzb3VyY2UpOworCQkJU3RyaW5nIGVuY29kZWRDb250ZW50cyA9IG5l
dyBTdHJpbmcgKFV0aWwuZ2V0UmVzb3VyY2VDb250ZW50c0FzQ2hhckFycmF5KHNvdXJjZUZpbGUs
IGVuY29kaW5nKSk7CisJCQljaGFyW10gY2hhckFycmF5ID0gZW5jb2RlZENvbnRlbnRzLnRvQ2hh
ckFycmF5KCk7CisJCQllbmNvZGVkQ29udGVudHMgPSBuZXcgU3RyaW5nKENoYXJPcGVyYXRpb24u
cmVtb3ZlKGNoYXJBcnJheSwgJ1xyJykpOworCQkJY2hhckFycmF5ID0gc291cmNlLnRvQ2hhckFy
cmF5KCk7CisJCQlzb3VyY2UgPSBuZXcgU3RyaW5nKENoYXJPcGVyYXRpb24ucmVtb3ZlKGNoYXJB
cnJheSwgJ1xyJykpOworCQkJYXNzZXJ0VHJ1ZSgiU291cmNlcyBzaG91bGQgYmUgZGVjb2RlZCB0
aGUgc2FtZSB3YXkiLCBlbmNvZGVkQ29udGVudHMuZXF1YWxzKHNvdXJjZSkpOworCisJCQlhdHRy
aWJ1dGUgPSBKYXZhQ29yZS5uZXdDbGFzc3BhdGhBdHRyaWJ1dGUoSUNsYXNzcGF0aEF0dHJpYnV0
ZS5TT1VSQ0VfQVRUQUNITUVOVF9FTkNPRElORywgIlVURi04Iik7CisJCQlwcm9qZWN0LnNldFJh
d0NsYXNzcGF0aChuZXcgSUNsYXNzcGF0aEVudHJ5W117SmF2YUNvcmUubmV3TGlicmFyeUVudHJ5
KG5ld0VudHJ5LmdldFBhdGgoKSwgbmV3IFBhdGgoIi9FbmNvZGluZy90ZXN0U2hpZnRKSVMuemlw
IiksIG51bGwsIG51bGwsIG5ldyBJQ2xhc3NwYXRoQXR0cmlidXRlW117YXR0cmlidXRlfSwgZmFs
c2UpfSwgbnVsbCk7CisJCQl6aXBGaWxlLnNldENoYXJzZXQoZW5jb2RpbmcsIG51bGwpOworCQkJ
CisJCQlyb290ID0gZ2V0UGFja2FnZUZyYWdtZW50Um9vdCgiRW5jb2RpbmcyIiwgInRlc3RTaGlm
dEpJUy5qYXIiKTsKKwkJCXNvdXJjZVJlZiA9IHJvb3QuZ2V0UGFja2FnZUZyYWdtZW50KCJ0ZXN0
U2hpZnRKSVMiKS5nZXRDbGFzc0ZpbGUoIkEuY2xhc3MiKTsKKwkJCWFzc2VydE5vdE51bGwoc291
cmNlUmVmKTsKKwkJCXNvdXJjZSA9IHNvdXJjZVJlZi5nZXRTb3VyY2UoKTsKKwkJCWFzc2VydE5v
dE51bGwoc291cmNlKTsKKwkJCWVuY29kZWRDb250ZW50cyA9IG5ldyBTdHJpbmcgKFV0aWwuZ2V0
UmVzb3VyY2VDb250ZW50c0FzQ2hhckFycmF5KHNvdXJjZUZpbGUsIGVuY29kaW5nKSk7CisJCQlj
aGFyQXJyYXkgPSBlbmNvZGVkQ29udGVudHMudG9DaGFyQXJyYXkoKTsKKwkJCWVuY29kZWRDb250
ZW50cyA9IG5ldyBTdHJpbmcoQ2hhck9wZXJhdGlvbi5yZW1vdmUoY2hhckFycmF5LCAnXHInKSk7
CisJCQljaGFyQXJyYXkgPSBzb3VyY2UudG9DaGFyQXJyYXkoKTsKKwkJCXNvdXJjZSA9IG5ldyBT
dHJpbmcoQ2hhck9wZXJhdGlvbi5yZW1vdmUoY2hhckFycmF5LCAnXHInKSk7CisJCQlhc3NlcnRU
cnVlKCJTb3VyY2VzIHNob3VsZCBiZSBkZWNvZGVkIHRoZSBzYW1lIHdheSIsIGVuY29kZWRDb250
ZW50cy5lcXVhbHMoc291cmNlKSk7CisJCX0KKwkJZmluYWxseSB7CisJCQl0aGlzLmVuY29kaW5n
UHJvamVjdC5zZXREZWZhdWx0Q2hhcnNldChvbGRFbmNvZGluZywgbnVsbCk7CisJCQlkZWxldGVQ
cm9qZWN0KCJFbmNvZGluZzIiKTsKKwkJCWdldFdvcmtzcGFjZVJvb3QoKS5zZXREZWZhdWx0Q2hh
cnNldCh3a3NwRW5jb2RpbmcsIG51bGwpOworCQl9CQkKKwl9CisJcHVibGljIHZvaWQgdGVzdEJ1
ZzM2MTM1NmIoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJU3RyaW5nIG9sZEVuY29kaW5nID0gdGhp
cy5lbmNvZGluZ1Byb2plY3QuZ2V0RGVmYXVsdENoYXJzZXQoKTsKKwkJRmlsZSBleHRlcm5hbFNv
dXJjZVppcCA9IG51bGw7CisJCUZpbGUgZXh0ZXJuYWxTb3VyY2UgPSBudWxsOworCQl0cnl7CisJ
CQlTdHJpbmcgZW5jb2RpbmcgPSAiU2hpZnQtSklTIjsKKwkJCWlmICh3a3NwRW5jb2RpbmcuZXF1
YWxzKGVuY29kaW5nKSkKKwkJCQlnZXRXb3Jrc3BhY2VSb290KCkuc2V0RGVmYXVsdENoYXJzZXQo
IlVURi04IiwgbnVsbCk7CisJCQl0aGlzLmVuY29kaW5nUHJvamVjdC5zZXREZWZhdWx0Q2hhcnNl
dCgiVVRGLTgiLCBudWxsKTsKKwkJCUlKYXZhUHJvamVjdCBwcm9qZWN0ID0gdGhpcy5jcmVhdGVK
YXZhUHJvamVjdCgiRW5jb2RpbmcyIiwgbmV3IFN0cmluZ1tdIHsiIn0sICIiKTsKKwkJCUlGaWxl
IHNvdXJjZUZpbGUgPSAoSUZpbGUpIHRoaXMuZW5jb2RpbmdQcm9qZWN0LmZpbmRNZW1iZXIoInNy
Yy90ZXN0U2hpZnRKSVMvQS5qYXZhIik7CisJCQkKKwkJCUZpbGUgaW50ZXJuYWxTb3VyY2VaaXAg
PSBuZXcgRmlsZShnZXRXb3Jrc3BhY2VQYXRoKCksICIvRW5jb2RpbmcvdGVzdFNoaWZ0SklTLnpp
cCIpOworCQkJZXh0ZXJuYWxTb3VyY2VaaXAgPSBuZXcgRmlsZShnZXRFeHRlcm5hbFBhdGgoKSwg
InRlc3RTaGlmdEpJUy56aXAiKTsKKwkJCUZpbGUgaW50ZXJuYWxTb3VyY2UgPSBuZXcgRmlsZShn
ZXRXb3Jrc3BhY2VQYXRoKCksICIvRW5jb2Rpbmcvc3JjIik7CisJCQlleHRlcm5hbFNvdXJjZSA9
IG5ldyBGaWxlKGdldEV4dGVybmFsUGF0aCgpLCAidGVzdFNoaWZ0SklTIik7CisKKwkJCWNvcHlE
aXJlY3RvcnkoaW50ZXJuYWxTb3VyY2UsIGV4dGVybmFsU291cmNlKTsKKwkJCWNvcHkoaW50ZXJu
YWxTb3VyY2VaaXAsIGV4dGVybmFsU291cmNlWmlwKTsKKwkJCQorCQkJSUNsYXNzcGF0aEVudHJ5
W10gZW50cmllcyA9IHRoaXMuZW5jb2RpbmdKYXZhUHJvamVjdC5nZXRSYXdDbGFzc3BhdGgoKTsK
KwkJCUlDbGFzc3BhdGhFbnRyeSBuZXdFbnRyeSA9IG51bGw7CisJCQlmb3IgKGludCBpbmRleCA9
IDA7IGluZGV4IDwgZW50cmllcy5sZW5ndGg7IGluZGV4KyspIHsKKwkJCQlJQ2xhc3NwYXRoRW50
cnkgZW50cnkgPSBlbnRyaWVzW2luZGV4XTsKKwkJCQlpZiAoZW50cnkuZ2V0UGF0aCgpLnRvT1NT
dHJpbmcoKS5lbmRzV2l0aCgidGVzdFNoaWZ0SklTLmphciIpKSB7CisJCQkJCW5ld0VudHJ5ID0g
ZW50cmllc1tpbmRleF07IAorCQkJCX0KKwkJCX0KKworCQkJSUNsYXNzcGF0aEF0dHJpYnV0ZSBh
dHRyaWJ1dGUgPSBKYXZhQ29yZS5uZXdDbGFzc3BhdGhBdHRyaWJ1dGUoSUNsYXNzcGF0aEF0dHJp
YnV0ZS5TT1VSQ0VfQVRUQUNITUVOVF9FTkNPRElORywgZW5jb2RpbmcpOworCQkJYXR0cmlidXRl
ID0gSmF2YUNvcmUubmV3Q2xhc3NwYXRoQXR0cmlidXRlKElDbGFzc3BhdGhBdHRyaWJ1dGUuU09V
UkNFX0FUVEFDSE1FTlRfRU5DT0RJTkcsIGVuY29kaW5nKTsKKwkJCXByb2plY3Quc2V0UmF3Q2xh
c3NwYXRoKG5ldyBJQ2xhc3NwYXRoRW50cnlbXXtKYXZhQ29yZS5uZXdMaWJyYXJ5RW50cnkobmV3
RW50cnkuZ2V0UGF0aCgpLCBuZXcgUGF0aChnZXRFeHRlcm5hbFJlc291cmNlUGF0aCgidGVzdFNo
aWZ0SklTLnppcCIpKSwgbnVsbCwgbnVsbCwgbmV3IElDbGFzc3BhdGhBdHRyaWJ1dGVbXXthdHRy
aWJ1dGV9LCBmYWxzZSl9LCBudWxsKTsKKwkJCQorCQkJSVBhY2thZ2VGcmFnbWVudFJvb3Qgcm9v
dCA9IGdldFBhY2thZ2VGcmFnbWVudFJvb3QoIkVuY29kaW5nMiIsICJ0ZXN0U2hpZnRKSVMuamFy
Iik7CisJCQlJU291cmNlUmVmZXJlbmNlIHNvdXJjZVJlZiA9IHJvb3QuZ2V0UGFja2FnZUZyYWdt
ZW50KCJ0ZXN0U2hpZnRKSVMiKS5nZXRDbGFzc0ZpbGUoIkEuY2xhc3MiKTsKKwkJCWFzc2VydE5v
dE51bGwoc291cmNlUmVmKTsKKwkJCVN0cmluZyBzb3VyY2UgPSBzb3VyY2VSZWYuZ2V0U291cmNl
KCk7CisJCQlhc3NlcnROb3ROdWxsKHNvdXJjZSk7CisJCQlTdHJpbmcgZW5jb2RlZENvbnRlbnRz
ID0gbmV3IFN0cmluZyAoVXRpbC5nZXRSZXNvdXJjZUNvbnRlbnRzQXNDaGFyQXJyYXkoc291cmNl
RmlsZSwgZW5jb2RpbmcpKTsKKwkJCWNoYXJbXSBjaGFyQXJyYXkgPSBlbmNvZGVkQ29udGVudHMu
dG9DaGFyQXJyYXkoKTsKKwkJCWVuY29kZWRDb250ZW50cyA9IG5ldyBTdHJpbmcoQ2hhck9wZXJh
dGlvbi5yZW1vdmUoY2hhckFycmF5LCAnXHInKSk7CisJCQljaGFyQXJyYXkgPSBzb3VyY2UudG9D
aGFyQXJyYXkoKTsKKwkJCXNvdXJjZSA9IG5ldyBTdHJpbmcoQ2hhck9wZXJhdGlvbi5yZW1vdmUo
Y2hhckFycmF5LCAnXHInKSk7CisJCQlhc3NlcnRUcnVlKCJTb3VyY2VzIHNob3VsZCBiZSBkZWNv
ZGVkIHRoZSBzYW1lIHdheSIsIGVuY29kZWRDb250ZW50cy5lcXVhbHMoc291cmNlKSk7CisKKwkJ
CWF0dHJpYnV0ZSA9IEphdmFDb3JlLm5ld0NsYXNzcGF0aEF0dHJpYnV0ZShJQ2xhc3NwYXRoQXR0
cmlidXRlLlNPVVJDRV9BVFRBQ0hNRU5UX0VOQ09ESU5HLCAiVVRGLTgiKTsKKwkJCXByb2plY3Qu
c2V0UmF3Q2xhc3NwYXRoKG5ldyBJQ2xhc3NwYXRoRW50cnlbXXtKYXZhQ29yZS5uZXdMaWJyYXJ5
RW50cnkobmV3RW50cnkuZ2V0UGF0aCgpLCBuZXcgUGF0aChnZXRFeHRlcm5hbFJlc291cmNlUGF0
aCgidGVzdFNoaWZ0SklTLnppcCIpKSwgbnVsbCwgbnVsbCwgbmV3IElDbGFzc3BhdGhBdHRyaWJ1
dGVbXXthdHRyaWJ1dGV9LCBmYWxzZSl9LCBudWxsKTsKKwkJCQorCQkJcm9vdCA9IGdldFBhY2th
Z2VGcmFnbWVudFJvb3QoIkVuY29kaW5nMiIsICJ0ZXN0U2hpZnRKSVMuamFyIik7CisJCQlzb3Vy
Y2VSZWYgPSByb290LmdldFBhY2thZ2VGcmFnbWVudCgidGVzdFNoaWZ0SklTIikuZ2V0Q2xhc3NG
aWxlKCJBLmNsYXNzIik7CisJCQlhc3NlcnROb3ROdWxsKHNvdXJjZVJlZik7CisJCQlzb3VyY2Ug
PSBzb3VyY2VSZWYuZ2V0U291cmNlKCk7CisJCQlhc3NlcnROb3ROdWxsKHNvdXJjZSk7CisJCQll
bmNvZGVkQ29udGVudHMgPSBuZXcgU3RyaW5nIChVdGlsLmdldFJlc291cmNlQ29udGVudHNBc0No
YXJBcnJheShzb3VyY2VGaWxlLCBlbmNvZGluZykpOworCQkJY2hhckFycmF5ID0gZW5jb2RlZENv
bnRlbnRzLnRvQ2hhckFycmF5KCk7CisJCQllbmNvZGVkQ29udGVudHMgPSBuZXcgU3RyaW5nKENo
YXJPcGVyYXRpb24ucmVtb3ZlKGNoYXJBcnJheSwgJ1xyJykpOworCQkJY2hhckFycmF5ID0gc291
cmNlLnRvQ2hhckFycmF5KCk7CisJCQlzb3VyY2UgPSBuZXcgU3RyaW5nKENoYXJPcGVyYXRpb24u
cmVtb3ZlKGNoYXJBcnJheSwgJ1xyJykpOworCQkJYXNzZXJ0RmFsc2UoIlNvdXJjZXMgc2hvdWxk
IG5vdCBiZSBkZWNvZGVkIHRoZSBzYW1lIHdheSIsIGVuY29kZWRDb250ZW50cy5lcXVhbHMoc291
cmNlKSk7CisJCQkKKwkJCWF0dHJpYnV0ZSA9IEphdmFDb3JlLm5ld0NsYXNzcGF0aEF0dHJpYnV0
ZShJQ2xhc3NwYXRoQXR0cmlidXRlLlNPVVJDRV9BVFRBQ0hNRU5UX0VOQ09ESU5HLCBlbmNvZGlu
Zyk7CisJCQlwcm9qZWN0LnNldFJhd0NsYXNzcGF0aChuZXcgSUNsYXNzcGF0aEVudHJ5W117SmF2
YUNvcmUubmV3TGlicmFyeUVudHJ5KG5ld0VudHJ5LmdldFBhdGgoKSwgbmV3IFBhdGgoZ2V0RXh0
ZXJuYWxSZXNvdXJjZVBhdGgoInRlc3RTaGlmdEpJUyIpKSwgbnVsbCwgbnVsbCwgbmV3IElDbGFz
c3BhdGhBdHRyaWJ1dGVbXXthdHRyaWJ1dGV9LCBmYWxzZSl9LCBudWxsKTsKKwkJCXNvdXJjZUZp
bGUuc2V0Q2hhcnNldChudWxsLCBudWxsKTsKKwkJCQorCQkJcm9vdCA9IGdldFBhY2thZ2VGcmFn
bWVudFJvb3QoIkVuY29kaW5nMiIsICJ0ZXN0U2hpZnRKSVMuamFyIik7CisJCQlzb3VyY2VSZWYg
PSByb290LmdldFBhY2thZ2VGcmFnbWVudCgidGVzdFNoaWZ0SklTIikuZ2V0Q2xhc3NGaWxlKCJB
LmNsYXNzIik7CisJCQlhc3NlcnROb3ROdWxsKHNvdXJjZVJlZik7CisJCQlzb3VyY2UgPSBzb3Vy
Y2VSZWYuZ2V0U291cmNlKCk7CisJCQlhc3NlcnROb3ROdWxsKHNvdXJjZSk7CisJCQllbmNvZGVk
Q29udGVudHMgPSBuZXcgU3RyaW5nIChVdGlsLmdldFJlc291cmNlQ29udGVudHNBc0NoYXJBcnJh
eShzb3VyY2VGaWxlLCBlbmNvZGluZykpOworCQkJY2hhckFycmF5ID0gZW5jb2RlZENvbnRlbnRz
LnRvQ2hhckFycmF5KCk7CisJCQllbmNvZGVkQ29udGVudHMgPSBuZXcgU3RyaW5nKENoYXJPcGVy
YXRpb24ucmVtb3ZlKGNoYXJBcnJheSwgJ1xyJykpOworCQkJY2hhckFycmF5ID0gc291cmNlLnRv
Q2hhckFycmF5KCk7CisJCQlzb3VyY2UgPSBuZXcgU3RyaW5nKENoYXJPcGVyYXRpb24ucmVtb3Zl
KGNoYXJBcnJheSwgJ1xyJykpOworCQkJYXNzZXJ0VHJ1ZSgiU291cmNlcyBzaG91bGQgYmUgZGVj
b2RlZCB0aGUgc2FtZSB3YXkiLCBlbmNvZGVkQ29udGVudHMuZXF1YWxzKHNvdXJjZSkpOworCisJ
CQlhdHRyaWJ1dGUgPSBKYXZhQ29yZS5uZXdDbGFzc3BhdGhBdHRyaWJ1dGUoSUNsYXNzcGF0aEF0
dHJpYnV0ZS5TT1VSQ0VfQVRUQUNITUVOVF9FTkNPRElORywgIlVURi04Iik7CisJCQlwcm9qZWN0
LnNldFJhd0NsYXNzcGF0aChuZXcgSUNsYXNzcGF0aEVudHJ5W117SmF2YUNvcmUubmV3TGlicmFy
eUVudHJ5KG5ld0VudHJ5LmdldFBhdGgoKSwgbmV3IFBhdGgoZ2V0RXh0ZXJuYWxSZXNvdXJjZVBh
dGgoInRlc3RTaGlmdEpJUyIpKSwgbnVsbCwgbnVsbCwgbmV3IElDbGFzc3BhdGhBdHRyaWJ1dGVb
XXthdHRyaWJ1dGV9LCBmYWxzZSl9LCBudWxsKTsKKwkJCXNvdXJjZUZpbGUuc2V0Q2hhcnNldChl
bmNvZGluZywgbnVsbCk7CisJCQkKKwkJCXJvb3QgPSBnZXRQYWNrYWdlRnJhZ21lbnRSb290KCJF
bmNvZGluZzIiLCAidGVzdFNoaWZ0SklTLmphciIpOworCQkJc291cmNlUmVmID0gcm9vdC5nZXRQ
YWNrYWdlRnJhZ21lbnQoInRlc3RTaGlmdEpJUyIpLmdldENsYXNzRmlsZSgiQS5jbGFzcyIpOwor
CQkJYXNzZXJ0Tm90TnVsbChzb3VyY2VSZWYpOworCQkJc291cmNlID0gc291cmNlUmVmLmdldFNv
dXJjZSgpOworCQkJYXNzZXJ0Tm90TnVsbChzb3VyY2UpOworCQkJZW5jb2RlZENvbnRlbnRzID0g
bmV3IFN0cmluZyAoVXRpbC5nZXRSZXNvdXJjZUNvbnRlbnRzQXNDaGFyQXJyYXkoc291cmNlRmls
ZSwgZW5jb2RpbmcpKTsKKwkJCWNoYXJBcnJheSA9IGVuY29kZWRDb250ZW50cy50b0NoYXJBcnJh
eSgpOworCQkJZW5jb2RlZENvbnRlbnRzID0gbmV3IFN0cmluZyhDaGFyT3BlcmF0aW9uLnJlbW92
ZShjaGFyQXJyYXksICdccicpKTsKKwkJCWNoYXJBcnJheSA9IHNvdXJjZS50b0NoYXJBcnJheSgp
OworCQkJc291cmNlID0gbmV3IFN0cmluZyhDaGFyT3BlcmF0aW9uLnJlbW92ZShjaGFyQXJyYXks
ICdccicpKTsKKwkJCWFzc2VydEZhbHNlKCJTb3VyY2VzIHNob3VsZCBub3QgYmUgZGVjb2RlZCB0
aGUgc2FtZSB3YXkiLCBlbmNvZGVkQ29udGVudHMuZXF1YWxzKHNvdXJjZSkpOworCQl9CisJCWZp
bmFsbHkgeworCQkJaWYgKGV4dGVybmFsU291cmNlWmlwICE9IG51bGwpIGV4dGVybmFsU291cmNl
WmlwLmRlbGV0ZSgpOworCQkJaWYgKGV4dGVybmFsU291cmNlICE9IG51bGwpIGRlbGV0ZUV4dGVy
bmFsUmVzb3VyY2UoInRlc3RTaGlmdEpJUyIpOworCQkJdGhpcy5lbmNvZGluZ1Byb2plY3Quc2V0
RGVmYXVsdENoYXJzZXQob2xkRW5jb2RpbmcsIG51bGwpOworCQkJZGVsZXRlUHJvamVjdCgiRW5j
b2RpbmcyIik7CisJCQlnZXRXb3Jrc3BhY2VSb290KCkuc2V0RGVmYXVsdENoYXJzZXQod2tzcEVu
Y29kaW5nLCBudWxsKTsKKwkJfQkJCisJfQogCXByaXZhdGUgdm9pZCB2ZXJpZnlVdGY4Qk9NKElG
aWxlIGZpbGUpIHRocm93cyBDb3JlRXhjZXB0aW9uIHsKIAkJYXNzZXJ0TnVsbCgiRmlsZSBzaG91
bGQgbm90IGhhdmUgYW55IGV4cGxpY2l0IGNoYXJzZXQiLCBmaWxlLmdldENoYXJzZXQoZmFsc2Up
KTsKIAkJSUNvbnRlbnREZXNjcmlwdGlvbiBjb250ZW50RGVzY3JpcHRpb24gPSBmaWxlLmdldENv
bnRlbnREZXNjcmlwdGlvbigpOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9k
ZWwvb3JnL2VjbGlwc2UvamR0L2NvcmUvSUNsYXNzcGF0aEF0dHJpYnV0ZS5qYXZhIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2NvcmUvSUNsYXNzcGF0aEF0dHJp
YnV0ZS5qYXZhCmluZGV4IDY4NWMxYTMuLjNhYTA5ZGEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9jb3JlL0lDbGFzc3BhdGhBdHRyaWJ1dGUu
amF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvY29y
ZS9JQ2xhc3NwYXRoQXR0cmlidXRlLmphdmEKQEAgLTcwLDYgKzcwLDIyIEBACiAJU3RyaW5nIElO
REVYX0xPQ0FUSU9OX0FUVFJJQlVURV9OQU1FID0gImluZGV4X2xvY2F0aW9uIjsgLy8kTk9OLU5M
Uy0xJAogCiAJLyoqCisJICogQ29uc3RhbnQgZm9yIHRoZSBuYW1lIG9mIHRoZSBlbmNvZGluZyB0
byBiZSB1c2VkIGZvciBzb3VyY2UgYXR0YWNobWVudHMuIAorCSAqIDxwPlRoZSB2YWx1ZSBvZiB0
aGlzIGF0dHJpYnV0ZSBoYXMgdG8gYmUgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSB2YWxp
ZCBlbmNvZGluZy4gVGhlIGVuY29kaW5nCisJICogZm9yIGEgc291cmNlIGF0dGFjaG1lbnQgaXMg
ZGV0ZXJtaW5lZCBpbiB0aGUgZm9sbG93aW5nIG9yZGVyOiA8L3A+CisJICoKKwkgKiA8dWw+IAor
CSAqIDxsaT4JRW5jb2RpbmcgZXhwbGljaXRseSBzZXQgb24gdGhlIHNvdXJjZSBmaWxlIChqYXZh
IG9yIHppcCksIGkuZS4gPGNvZGU+b3JnLmVjbGlwc2UuY29yZS5yZXNvdXJjZXMuSUZpbGUjZ2V0
Q2hhcnNldChmYWxzZSk8L2NvZGU+IDwvbGk+CisJICogPGxpPglFbmNvZGluZyBzZXQgb24gdGhl
IGNvcnJlc3BvbmRpbmcgY2xhc3NwYXRoIGVudHJ5IDwvbGk+CisJICogPGxpPiBJZiB0aGUgc291
cmNlIGF0dGFjaG1lbnQgaXMgYSBtZW1iZXIgb2YgdGhlIHByb2plY3QsIHRoZW4gdGhlIHByb2pl
Y3QncyBkZWZhdWx0IGNoYXJTZXQ8L2xpPgorCSAqIDxsaT4gV29ya3NwYWNlIGRlZmF1bHQgY2hh
clNldCA8L2xpPgorCSAqIDwvdWw+CisJICogCisJICogQHNpbmNlIDMuOAorCSAqLworCVN0cmlu
ZyBTT1VSQ0VfQVRUQUNITUVOVF9FTkNPRElORyA9ICJzb3VyY2VfZW5jb2RpbmciOyAvLyROT04t
TkxTLTEkCisJCisJLyoqCiAJICogQ29uc3RhbnQgZm9yIHRoZSBuYW1lIG9mIHRoZSBvcHRpb25h
bCBhdHRyaWJ1dGUuIFRoZSBwb3NzaWJsZSB2YWx1ZXMKIAkgKiBmb3IgdGhpcyBhdHRyaWJ1dGUg
YXJlIDxjb2RlPiJ0cnVlIjwvY29kZT4gb3IgPGNvZGU+ImZhbHNlIjwvY29kZT4uCiAJICogV2hl
biBub3QgcHJlc2VudCwgPGNvZGU+ImZhbHNlIjwvY29kZT4gaXMgYXNzdW1lZC4KZGlmZiAtLWdp
dCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b3JlL0NsYXNzcGF0aEVudHJ5LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9DbGFzc3BhdGhFbnRyeS5qYXZhCmluZGV4IDgxMGE2
YjIuLjQxZjY2ZWMgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0NsYXNzcGF0aEVudHJ5LmphdmEKKysrIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvQ2xhc3Nw
YXRoRW50cnkuamF2YQpAQCAtMTI3MSw2ICsxMjcxLDE1IEBACiAJCXJldHVybiBmYWxzZTsKIAl9
CiAKKwlwdWJsaWMgU3RyaW5nIGdldFNvdXJjZUF0dGFjaG1lbnRFbmNvZGluZygpIHsKKwkJZm9y
IChpbnQgaSA9IDAsIGxlbmd0aCA9IHRoaXMuZXh0cmFBdHRyaWJ1dGVzLmxlbmd0aDsgaSA8IGxl
bmd0aDsgaSsrKSB7CisJCQlJQ2xhc3NwYXRoQXR0cmlidXRlIGF0dHJpYnV0ZSA9IHRoaXMuZXh0
cmFBdHRyaWJ1dGVzW2ldOworCQkJaWYgKElDbGFzc3BhdGhBdHRyaWJ1dGUuU09VUkNFX0FUVEFD
SE1FTlRfRU5DT0RJTkcuZXF1YWxzKGF0dHJpYnV0ZS5nZXROYW1lKCkpKQorCQkJCXJldHVybiBh
dHRyaWJ1dGUuZ2V0VmFsdWUoKTsKKwkJfQorCQlyZXR1cm4gbnVsbDsKKwl9CisJCiAJLyoqCiAJ
ICogUmV0dXJucyB0aGUga2luZCBvZiBhIDxjb2RlPlBhY2thZ2VGcmFnbWVudFJvb3Q8L2NvZGU+
IGZyb20gaXRzIDxjb2RlPlN0cmluZzwvY29kZT4gZm9ybS4KIAkgKi8KZGlmZiAtLWdpdCBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL1Bh
Y2thZ2VGcmFnbWVudFJvb3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL1BhY2thZ2VGcmFnbWVudFJvb3QuamF2YQppbmRleCA5
ZmI1OWM2Li5jMWU1NGEwIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9QYWNrYWdlRnJhZ21lbnRSb290LmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
cmUvUGFja2FnZUZyYWdtZW50Um9vdC5qYXZhCkBAIC0xNTQsMTEgKzE1NCwxNSBAQAogCXJldHVy
biBjb21wdXRlQ2hpbGRyZW4oaW5mbywgdW5kZXJseWluZ1Jlc291cmNlKTsKIH0KIAotU291cmNl
TWFwcGVyIGNyZWF0ZVNvdXJjZU1hcHBlcihJUGF0aCBzb3VyY2VQYXRoLCBJUGF0aCByb290UGF0
aCkgeworU291cmNlTWFwcGVyIGNyZWF0ZVNvdXJjZU1hcHBlcihJUGF0aCBzb3VyY2VQYXRoLCBJ
UGF0aCByb290UGF0aCkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbiB7CisJSUNsYXNzcGF0aEVu
dHJ5IGVudHJ5ID0gKChKYXZhUHJvamVjdCkgZ2V0UGFyZW50KCkpLmdldENsYXNzcGF0aEVudHJ5
Rm9yKGdldFBhdGgoKSk7CisJU3RyaW5nIGVuY29kaW5nID0gKGVudHJ5PT0gbnVsbCkgPyBudWxs
IDogKChDbGFzc3BhdGhFbnRyeSkgZW50cnkpLmdldFNvdXJjZUF0dGFjaG1lbnRFbmNvZGluZygp
OwogCVNvdXJjZU1hcHBlciBtYXBwZXIgPSBuZXcgU291cmNlTWFwcGVyKAogCQlzb3VyY2VQYXRo
LAogCQlyb290UGF0aCA9PSBudWxsID8gbnVsbCA6IHJvb3RQYXRoLnRvT1NTdHJpbmcoKSwKLQkJ
Z2V0SmF2YVByb2plY3QoKS5nZXRPcHRpb25zKHRydWUpKTsgLy8gY2Fubm90IHVzZSB3b3Jrc3Bh
Y2Ugb3B0aW9ucyBpZiBleHRlcm5hbCBqYXIgaXMgMS41IGphciBhbmQgd29ya3NwYWNlIG9wdGlv
bnMgYXJlIDEuNCBvcHRpb25zCisJCWdldEphdmFQcm9qZWN0KCkuZ2V0T3B0aW9ucyh0cnVlKSwv
LyBjYW5ub3QgdXNlIHdvcmtzcGFjZSBvcHRpb25zIGlmIGV4dGVybmFsIGphciBpcyAxLjUgamFy
IGFuZCB3b3Jrc3BhY2Ugb3B0aW9ucyBhcmUgMS40IG9wdGlvbnMKKwkJZW5jb2RpbmcpOworCiAJ
cmV0dXJuIG1hcHBlcjsKIH0KIC8qCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9t
b2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9Tb3VyY2VNYXBwZXIuamF2YSBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL1Nv
dXJjZU1hcHBlci5qYXZhCmluZGV4IGIyMzAyZDYuLmMxYzNlODYgMTAwNjQ0Ci0tLSBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL1NvdXJj
ZU1hcHBlci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb3JlL1NvdXJjZU1hcHBlci5qYXZhCkBAIC0yNTAsNiArMjUwLDcgQEAK
IAkgKk9wdGlvbnMgdG8gYmUgdXNlZAogCSAqLwogCVN0cmluZyBlbmNvZGluZzsKKwlTdHJpbmcg
ZGVmYXVsdEVuY29kaW5nOwogCU1hcCBvcHRpb25zOwogCiAJLyoqCkBAIC0yNjEsMTUgKzI2Miwx
OSBAQAogCQl0aGlzLmFyZVJvb3RQYXRoc0NvbXB1dGVkID0gZmFsc2U7CiAJfQogCisJcHVibGlj
IFNvdXJjZU1hcHBlcihJUGF0aCBzb3VyY2VQYXRoLCBTdHJpbmcgcm9vdFBhdGgsIE1hcCBvcHRp
b25zKSB7CisJCXRoaXMoc291cmNlUGF0aCwgcm9vdFBhdGgsIG9wdGlvbnMsIG51bGwpOworCX0K
IAkvKioKIAkgKiBDcmVhdGVzIGEgPGNvZGU+U291cmNlTWFwcGVyPC9jb2RlPiB0aGF0IGxvY2F0
ZXMgc291cmNlIGluIHRoZSB6aXAgZmlsZQogCSAqIGF0IHRoZSBnaXZlbiBsb2NhdGlvbiBpbiB0
aGUgc3BlY2lmaWVkIHBhY2thZ2UgZnJhZ21lbnQgcm9vdC4KIAkgKi8KLQlwdWJsaWMgU291cmNl
TWFwcGVyKElQYXRoIHNvdXJjZVBhdGgsIFN0cmluZyByb290UGF0aCwgTWFwIG9wdGlvbnMpIHsK
KwlwdWJsaWMgU291cmNlTWFwcGVyKElQYXRoIHNvdXJjZVBhdGgsIFN0cmluZyByb290UGF0aCwg
TWFwIG9wdGlvbnMsIFN0cmluZyBlbmNvZGluZykgewogCQl0aGlzLmFyZVJvb3RQYXRoc0NvbXB1
dGVkID0gZmFsc2U7CiAJCXRoaXMub3B0aW9ucyA9IG9wdGlvbnM7CisJCXRoaXMuZW5jb2Rpbmcg
PSBlbmNvZGluZzsKIAkJdHJ5IHsKLQkJCXRoaXMuZW5jb2RpbmcgPSBSZXNvdXJjZXNQbHVnaW4u
Z2V0V29ya3NwYWNlKCkuZ2V0Um9vdCgpLmdldERlZmF1bHRDaGFyc2V0KCk7CisJCQl0aGlzLmRl
ZmF1bHRFbmNvZGluZyA9IFJlc291cmNlc1BsdWdpbi5nZXRXb3Jrc3BhY2UoKS5nZXRSb290KCku
Z2V0RGVmYXVsdENoYXJzZXQoKTsKIAkJfSBjYXRjaCAoQ29yZUV4Y2VwdGlvbiBlKSB7CiAJCQkv
LyB1c2Ugbm8gZW5jb2RpbmcKIAkJfQpAQCAtMTAyMCw5ICsxMDI1LDE2IEBACiAJCQlJUmVzb3Vy
Y2UgcmVzID0gKChJQ29udGFpbmVyKXRhcmdldCkuZmluZE1lbWJlcihmdWxsTmFtZSk7CiAJCQlp
ZiAocmVzIGluc3RhbmNlb2YgSUZpbGUpIHsKIAkJCQl0cnkgewotCQkJCQlzb3VyY2UgPSBvcmcu
ZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS51dGlsLlV0aWwuZ2V0UmVzb3VyY2VDb250ZW50c0Fz
Q2hhckFycmF5KChJRmlsZSlyZXMpOworCQkJCQkvLyBPcmRlciBvZiBwcmVmZXJlbmNlOiBjaGFy
U2V0IHN1cHBsaWVkLCB0aGlzLmVuY29kaW5nIG9yIHRoaXMuZGVmYXVsdEVuY29kaW5nIGluIHRo
YXQgb3JkZXIKKwkJCQkJdHJ5IHsKKwkJCQkJCWNoYXJTZXQgPSAoKElGaWxlKSByZXMpLmdldENo
YXJzZXQodGhpcy5lbmNvZGluZyA9PSBudWxsKTsKKwkJCQkJfSBjYXRjaCAoQ29yZUV4Y2VwdGlv
biBlKSB7CisJCQkJCQkvLyBJZ25vcmUKKwkJCQkJfQorCQkJCQlzb3VyY2UgPSBvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29yZS51dGlsLlV0aWwuZ2V0UmVzb3VyY2VDb250ZW50c0FzQ2hhckFy
cmF5KChJRmlsZSkgcmVzLAorCQkJCQkJCQkJY2hhclNldCA9PSBudWxsID8gKHRoaXMuZW5jb2Rp
bmcgPT0gbnVsbCA/IHRoaXMuZGVmYXVsdEVuY29kaW5nIDogdGhpcy5lbmNvZGluZykgOiBjaGFy
U2V0KTsKIAkJCQl9IGNhdGNoIChKYXZhTW9kZWxFeGNlcHRpb24gZSkgewotCQkJCQkvLyBpZ25v
cmUKKwkJCQkJLy8gSWdub3JlCiAJCQkJfQogCQkJfQogCQl9IGVsc2UgewpAQCAtMTAzMCw3ICsx
MDQyLDcgQEAKIAkJCQkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5j
Z2k/aWQ9MzAzNTExCiAJCQkJLy8gRm9yIGEgcmVzb3VyY2UgaW5zaWRlIHRoZSB3b3Jrc3BhY2Us
IHVzZSB0aGUgZW5jb2Rpbmcgc2V0IG9uIHRoZSByZXNvdXJjZQogCQkJCWlmICh0YXJnZXQgaW5z
dGFuY2VvZiBJRmlsZSkKLQkJCQkJY2hhclNldCA9ICgoSUZpbGUpdGFyZ2V0KS5nZXRDaGFyc2V0
KCk7CisJCQkJCWNoYXJTZXQgPSAoKElGaWxlKXRhcmdldCkuZ2V0Q2hhcnNldCh0aGlzLmVuY29k
aW5nID09IG51bGwpOwogCQkJfSBjYXRjaCAoQ29yZUV4Y2VwdGlvbiBlKSB7CiAJCQkJLy8gSWdu
b3JlCiAJCQl9CkBAIC0xNDE0LDcgKzE0MjYsOCBAQAogCQl0cnkgewogCQkJYnl0ZVtdIGJ5dGVz
ID0gVXRpbC5nZXRaaXBFbnRyeUJ5dGVDb250ZW50KGVudHJ5LCB6aXApOwogCQkJaWYgKGJ5dGVz
ICE9IG51bGwpIHsKLQkJCQlyZXR1cm4gVXRpbC5ieXRlc1RvQ2hhcihieXRlcywgY2hhclNldCA9
PSBudWxsID8gdGhpcy5lbmNvZGluZyA6IGNoYXJTZXQpOworCQkJCS8vIE9yZGVyIG9mIHByZWZl
cmVuY2U6IGNoYXJTZXQgc3VwcGxpZWQsIHRoaXMuZW5jb2Rpbmcgb3IgdGhpcy5kZWZhdWx0RW5j
b2RpbmcgaW4gdGhhdCBvcmRlcgorCQkJCXJldHVybiBVdGlsLmJ5dGVzVG9DaGFyKGJ5dGVzLCBj
aGFyU2V0ID09IG51bGwgPyAodGhpcy5lbmNvZGluZyA9PSBudWxsID8gdGhpcy5kZWZhdWx0RW5j
b2RpbmcgOiB0aGlzLmVuY29kaW5nKSA6IGNoYXJTZXQpOwogCQkJfQogCQl9IGNhdGNoIChJT0V4
Y2VwdGlvbiBlKSB7CiAJCQkvLyBpZ25vcmU=
</data>

          </attachment>
      

    </bug>

</bugzilla>