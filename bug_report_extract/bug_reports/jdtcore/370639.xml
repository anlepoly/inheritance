<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>370639</bug_id>
          
          <creation_ts>2012-02-04 13:24:00 -0500</creation_ts>
          <short_desc>[compiler][resource] restore the default for resource leak warnings</short_desc>
          <delta_ts>2012-03-12 04:49:46 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>Other</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>3.8 M6</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Stephan Herrmann">stephan.herrmann</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>daniel_megert</cc>
    
    <cc>deepakazad</cc>
    
    <cc>markus_keller</cc>
    
    <cc>satyam.kandula</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2061057</commentid>
    <comment_count>0</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-02-04 13:24:16 -0500</bug_when>
    <thetext>In bug 349326 comment 16 I argued:
&gt; I would normally propose the following defaults:
&gt; - UnclosedCloseable: error
&gt; - PotentiallyUnclosedCloseable: warning
&gt; - ExplicitlyClosedAutoCloseable: ignore (internal use only)
&gt;
&gt; However, for 3.7.1 these should perhaps be defined more shyly:
&gt; - UnclosedCloseable: warning
&gt; - PotentiallyUnclosedCloseable: ignore
&gt;  and by the time for 3.8 we should have sufficient experience to re-assess.

The patch was released for 3.8 M3 with the weaker set of defaults:
 - UnclosedCloseable: warning
 - all others: ignore

During the discussion on bug 358903 Markus disabled the warning as per bug 
365566:

&gt; (In reply to bug 358903 comment #13)
&gt; &gt; Could we put this and the dependent bugs on the plan for M5?
&gt; &gt; 
&gt; &gt; The builder has been updated for N20111201-2000, so this will create almost 100
&gt; &gt; compiler warnings in the SDK -- and from a quick glance, I&apos;d say about 30% are
&gt; &gt; practically unimportant.
&gt; 
&gt; We should disable the warning for M4 to avoid generating useless work. After
&gt; bug 358903 is fixed, the default should go back to &quot;warning&quot;.

Meanwhile bug 358903 has been fixed including its successor bug 368546. The results by far exceed what Markus expected in the above comment: when compiling the entire Eclipse SDK I only see 8 reports of unclosed resources. All other diagnostics are either detected as irrelevant or ranked as potential.

Therefor I propose to restore the default for UnclosedCloseable to warning.

I think we should do this within the Juno cycle, because after the Juno release many developers will unknowingly store the default in there jdt.core.prefs file, likely to be persisted in source repositories etc. After that only a selected fraction of JDT users would ever notice the option, even if we choose to change the default for 3.9.

In order to dispel remaining fears about bugs in the implementation I offer to add more early checks to the code. This way, should the analysis trigger a bug in the compiler a user can still work around the bug by disabling the warning.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2061093</commentid>
    <comment_count>1</comment_count>
    <who name="Deepak Azad">deepakazad</who>
    <bug_when>2012-02-04 21:39:30 -0500</bug_when>
    <thetext>(In reply to comment #0)
&gt; I think we should do this within the Juno cycle
+1</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2061219</commentid>
    <comment_count>2</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-02-06 00:39:10 -0500</bug_when>
    <thetext>M6 looks good, if everyone is on the same page</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2061317</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-02-06 05:21:06 -0500</bug_when>
    <thetext>(In reply to comment #0)

&gt; Meanwhile bug 358903 has been fixed including its successor bug 368546.

I think this feature has seen a good deal of scrutiny in terms of code
reviews, white box and black box testing, verification etc. Thanks to
Deepak, Satyam, Ayush and Markus for all the support and of course to
Stephan for very prompt follow ups to issues raised.

&gt; In order to dispel remaining fears about bugs in the implementation I offer to
&gt; add more early checks to the code. This way, should the analysis trigger a bug
&gt; in the compiler a user can still work around the bug by disabling the warning.

Code implementing an optional feature should ideally be under a flag so 
there is an effective escape hatch. Obviously we need to be judicious in 
this principle - we don&apos;t want to cause excess code clutter by checking 
for option being turned on all over the place. We also need to bear in 
the cost of these checks. The author of the feature can figure what 
constitutes a reasonable measure of defensive coding and implement it 
that way. 

In that spirit, Appreciate your offer to look into this. Thanks.
With that concern behind us, M6 looks good as the inflection point.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2061386</commentid>
    <comment_count>4</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2012-02-06 07:54:08 -0500</bug_when>
    <thetext>I set them to &apos;Error&apos; in my big source workspace which results in 3 errors for resource leaks and 63 errors for potential resource leaks.

The errors for resource leaks are either correct or an appearance of bug 370702.

For the potential resource leaks, those I sanity checked could be potential ones but in fact aren&apos;t. Also, most of them are in jdt.ui i.e. other components aren&apos;t affected heavily.

==&gt; OK to change the default for &apos;UnclosedCloseable&apos; to &apos;warning&apos;

==&gt;

- UnclosedCloseable: warning
- PotentiallyUnclosedCloseable: ignore
- ExplicitlyClosedAutoCloseable: ignore</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2062656</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-02-08 07:34:48 -0500</bug_when>
    <thetext>(In reply to comment #3)

&gt; ... We also need to bear in 
&gt; the cost of these checks.

The fix for https://bugs.eclipse.org/bugs/show_bug.cgi?id=370182 makes
looking up compiler options very cheap from various scopes. Code that
retrieves options from a scope instance would automatically stand to
benefit.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2065420</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-02-14 08:07:33 -0500</bug_when>
    <thetext>Resolved for 3.8 M6 via commit e67d1dc6830648c83fdb0e0b83b59925424638d8

When checking the documentation I found that JavaCore was still at the previous state =&gt; no change required.
OTOH, in jdt.doc.user ref-preferences-errors-warnings.htm these options were still lacking, fixed via commit d9b7b2fe0e0e034d4f95826842f5e776ae60eb7e
(w3c validator said OK)

Additionally, I added the mentioned checks to avoid the analysis when all these options are set to ignore. I double checked this with the following result:
When compiling the Eclipse SDK with all resource warnings disabled, no instance of FakedTrackingVariable was ever created, which is the center piece in this analysis.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2078535</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-12 04:49:46 -0400</bug_when>
    <thetext>Verified for 3.8 M6 using Build id: I20120306-0800</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>