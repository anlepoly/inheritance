<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>406973</bug_id>
          
          <creation_ts>2013-05-01 05:01:00 -0400</creation_ts>
          <short_desc>[1.8] Parse MethodParameters attribute from classfiles</short_desc>
          <delta_ts>2013-08-26 06:28:08 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>406966</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Jesper Moller">jesper</reporter>
          <assigned_to name="Jesper Moller">jesper</assigned_to>
          <cc>jarthana</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="58732"
          type_id="1"
          status="+"
          setter="stephan.herrmann"
    />
    <flag name="review"
          id="59132"
          type_id="1"
          status="+"
          setter="srikanth_sankaran"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2250951</commentid>
    <comment_count>0</comment_count>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-05-01 05:01:14 -0400</bug_when>
    <thetext>The MethodParameters attribute must be recognized and correctly read by a class file reader in order to properly implement the Java SE platform class libraries (2.12), if the class file&apos;s version number is 52.0 or above and the Java virtual machine implementation recognizes class files whose version number is 52.0 or
above.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2277187</commentid>
    <comment_count>1</comment_count>
      <attachid>232767</attachid>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-06-26 01:16:39 -0400</bug_when>
    <thetext>Created attachment 232767
Patch for this issue

This patch supports the parsing of MethodParameters for classfile reading and disassembly</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2277188</commentid>
    <comment_count>2</comment_count>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-06-26 01:18:03 -0400</bug_when>
    <thetext>Could someone review this before I commit?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2277200</commentid>
    <comment_count>3</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-06-26 01:48:40 -0400</bug_when>
    <thetext>Stephan is probably a better person to review this, if he can spare some time i.e. Otherwise, I will take a look at the patch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2278120</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-06-27 06:58:03 -0400</bug_when>
    <thetext>I&apos;ll take a look.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2278125</commentid>
    <comment_count>5</comment_count>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-06-27 07:27:43 -0400</bug_when>
    <thetext>Thanks, Stephan -- Note: I didn&apos;t implement this for the annotation processor yet.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2278143</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-06-27 08:07:18 -0400</bug_when>
    <thetext>Some questions, nit-picking &amp; a bug:

Re classfmt.MethodInfo:

(1) MethodInfo.decodeMethodParameters(): what&apos;s the parameter &quot;b&quot; for?

(2) I didn&apos;t fully understand the handling of &quot;absent&quot; parameter names.
decoding may skip a parameter (if nameIndex == 0), but the tests don&apos;t
exercise this path. While this may just be defensive programming, wouldn&apos;t that
break assumptions about correspondence of indices?

(3) This class skips any access_flags. Are those irrelevant for JDT? 
Maybe the flags would come in handy to decide which names to expose?

(4) Is the relation to a local variables attribute specified somewhere?
Given that in the implementation both attributes share the same field,
couldn&apos;t it happen, that information if overwritten / lost?

(5) Why is MethodInfo.argumentNamesIndex a field (vs. local variable)?

IModifierConstants:

(6) javadoc of ACC_MANDATED looks incomplete / truncated
Plus: what&apos;s the official spelling: Java 8 or Java SE 8 ?

IMethodParametersAttribute:

(7) class javadoc: &quot;Description of a methods attribute&quot; isn&apos;t quite right.

(8) javadoc of getMethodParameterLength() is bogus (copy&amp;paste)

(9) wouldn&apos;t &quot;the parameter name for the i&apos;th element&quot; be better phrased as
&quot;name of the i&apos;th parameter&quot;? If changed pls sync with getAccessFlags().

MethodParametersAttribute:

(10) Inside the constructor computation of &apos;mask&apos; is bogus
- 	int mask = u2At(classFileBytes, 2, readOffset+2);
+ 	int mask = u2At(classFileBytes, 2, readOffset);


I guess once you have an implementation for creating this attribute, you should
come back and write more tests also for decoding.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2280440</commentid>
    <comment_count>7</comment_count>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-07-03 17:26:52 -0400</bug_when>
    <thetext>(In reply to comment #6)
&gt; Some questions, nit-picking &amp; a bug:

Thank you!

&gt; Re classfmt.MethodInfo:
&gt; 
&gt; (1) MethodInfo.decodeMethodParameters(): what&apos;s the parameter &quot;b&quot; for?

Copy-waste.

&gt; (2) I didn&apos;t fully understand the handling of &quot;absent&quot; parameter names.
&gt; decoding may skip a parameter (if nameIndex == 0), but the tests don&apos;t
&gt; exercise this path. While this may just be defensive programming, wouldn&apos;t that
&gt; break assumptions about correspondence of indices?

Yep, fixed that. Such unnamed parameters are used for mandated arguments. I&apos;m changing this to be &apos;arg0&apos; and so forth.

&gt; (3) This class skips any access_flags. Are those irrelevant for JDT?
&gt; Maybe the flags would come in handy to decide which names to expose?

The interesting bits are MANDATED, used for outer this referenes, and SYNTHETIC, used for escaping outer finals in local and anonymous classes. I&apos;m certain the compiler already knows how to deal with these, to the extent that they ever need to be parsed.
 
&gt; (4) Is the relation to a local variables attribute specified somewhere?
&gt; Given that in the implementation both attributes share the same field,
&gt; couldn&apos;t it happen, that information if overwritten / lost?

This is intentional. The &apos;decodeLocalVariableAttribute&apos; is only ever called to decode the parameter names, since they&apos;re available together with the other locals with the code if compiled with -g.
Local variable names aren&apos;t stored, note how it compares the startingPC with 0 and only keeps those.

If the MethodParameters block is present, it should take precedence.

&gt; (5) Why is MethodInfo.argumentNamesIndex a field (vs. local variable)?

This was how it was, but it fixed now.
 
&gt; IModifierConstants:
&gt; 
&gt; (6) javadoc of ACC_MANDATED looks incomplete / truncated
&gt; Plus: what&apos;s the official spelling: Java 8 or Java SE 8 ?

Fixed, and adjusted to Java SE 8

&gt; IMethodParametersAttribute:
&gt; 
&gt; (7) class javadoc: &quot;Description of a methods attribute&quot; isn&apos;t quite right.

Fixed

&gt; (8) javadoc of getMethodParameterLength() is bogus (copy&amp;paste)

Fixed
 
&gt; (9) wouldn&apos;t &quot;the parameter name for the i&apos;th element&quot; be better phrased as
&gt; &quot;name of the i&apos;th parameter&quot;? If changed pls sync with getAccessFlags().

Fixed

&gt; MethodParametersAttribute:
&gt; 
&gt; (10) Inside the constructor computation of &apos;mask&apos; is bogus
&gt; - 	int mask = u2At(classFileBytes, 2, readOffset+2);
&gt; + 	int mask = u2At(classFileBytes, 2, readOffset);

Thank you - adding a test case which disassembles these flags PROPERLY

&gt; I guess once you have an implementation for creating this attribute, you should
&gt; come back and write more tests also for decoding.

True - I had some more lined up already, but javac had a bug in the -parameters generation. I&apos;ve updated and added those.

Unfortunately, I can&apos;t make javac prepare &quot;missing&quot; parameter names, so that must wait until we can generate them, too. Or I could tweak the .class file, I guess.

Should I have another review, or just go ahead and push?

I can</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2280441</commentid>
    <comment_count>8</comment_count>
      <attachid>233059</attachid>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-07-03 17:28:14 -0400</bug_when>
    <thetext>Created attachment 233059
Updated patch following Stephans review

Updated patch in git format (has binary contents)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2281044</commentid>
    <comment_count>9</comment_count>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-07-05 08:32:23 -0400</bug_when>
    <thetext>I forgot to add the test case to the relevant suite, kudos to http://www.codeaffine.com/2013/07/04/an-automated-osgi-test-runner/ for reminding me.

I wonder if we could do this smarter now we&apos;re on CBI/Tycho anyways?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2281480</commentid>
    <comment_count>10</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-07-08 01:47:56 -0400</bug_when>
    <thetext>(In reply to comment #8)
&gt; Created attachment 233059 [details]
&gt; Updated patch following Stephans review
&gt; 
&gt; Updated patch in git format (has binary contents)

Stephan, Did you want to glance through the revised patch before +ing the
review request ? Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2282085</commentid>
    <comment_count>11</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-07-08 19:15:37 -0400</bug_when>
    <thetext>(In reply to comment #10)
&gt; (In reply to comment #8)
&gt; &gt; Created attachment 233059 [details]
&gt; &gt; Updated patch following Stephans review
&gt; &gt; 
&gt; &gt; Updated patch in git format (has binary contents)
&gt; 
&gt; Stephan, Did you want to glance through the revised patch before +ing the
&gt; review request ? Thanks.

I&apos;ll take a look shortly.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2282218</commentid>
    <comment_count>12</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-07-09 07:15:02 -0400</bug_when>
    <thetext>Changes look good to me.

Remaining questions / comments:

(In reply to comment #7)
&gt; &gt; (3) This class skips any access_flags. Are those irrelevant for JDT?
&gt; &gt; Maybe the flags would come in handy to decide which names to expose?
&gt; 
&gt; The interesting bits are MANDATED, used for outer this referenes, and SYNTHETIC,
&gt; used for escaping outer finals in local and anonymous classes. I&apos;m certain the
&gt; compiler already knows how to deal with these, to the extent that they ever need
&gt; to be parsed.

Can you share why you&apos;re certain? If this is about retrieving names from class files,
the compiler would normally not bother at all. But when passing information
downstream, would it, e.g., be interesting to name some parameters &quot;this$0&quot;...
and others &quot;val$something&quot; even if no name was found?
Put differently, if the compiler doesn&apos;t care about those flags, who should?
Are those completely useless?
 
&gt; &gt; (4) Is the relation to a local variables attribute specified somewhere?
&gt; &gt; Given that in the implementation both attributes share the same field,
&gt; &gt; couldn&apos;t it happen, that information if overwritten / lost?
&gt; 
&gt; This is intentional. The &apos;decodeLocalVariableAttribute&apos; is only ever called to
&gt; decode the parameter names, since they&apos;re available together with the other
&gt; locals with the code if compiled with -g.
&gt; Local variable names aren&apos;t stored, note how it compares the startingPC with 0
&gt; and only keeps those.

This didn&apos;t quite convince me, why it&apos;s a good idea to share the same field.
Thus I had to dig a bit deeper, documenting my findings here:
- during createMethod() only decodeMethodParameters() is called, not decodeLocalVariableAttribute()
- the latter is called on-demand with only one public entry point: getArgumentNames()
- the latter has a check if argument names are already present, so MethodParameters has
  precedence over LocalVariables.
Ergo: I agree that sharing this field is OK, as long as the above chain is maintained.
 
&gt; If the MethodParameters block is present, it should take precedence.

s/should/does/ 
:)

&gt; &gt; IMethodParametersAttribute:
&gt; &gt;
&gt; &gt; (7) class javadoc: &quot;Description of a methods attribute&quot; isn&apos;t quite right.
&gt; 
&gt; Fixed

I believe &quot;method&apos;s parameters names&quot; should be &quot;method&apos;s parameter names&quot;.
(unless you want to say &quot;method&apos;s parameters&apos; names&quot;).
 
&gt; I can

? :)

I&apos;ll leave the above issues to your judgment, so feel free to release when you feel ready.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2292542</commentid>
    <comment_count>13</comment_count>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-08-07 20:37:03 -0400</bug_when>
    <thetext>Released to BETA_JAVA8 branch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2292587</commentid>
    <comment_count>14</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-08-08 02:00:45 -0400</bug_when>
    <thetext>(In reply to comment #13)
&gt; Released to BETA_JAVA8 branch.

Thanks, for posterity here is the commit id: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=4ddddb5424dafb4b8650d4349863e03fece6ac06</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2298881</commentid>
    <comment_count>15</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-08-26 06:28:08 -0400</bug_when>
    <thetext>I reviewed the implementation so as to under the overall picture for JEP118.
Looks good. Thanks Jesper. Minor follow up commit here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=adbbf7460be9edd65891c81d46250a9d2d89f5be</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>232767</attachid>
            <date>2013-06-26 01:16:00 -0400</date>
            <delta_ts>2013-07-03 17:28:26 -0400</delta_ts>
            <desc>Patch for this issue</desc>
            <filename>patch406973.txt</filename>
            <type>text/plain</type>
            <size>38180</size>
            <attacher name="Jesper Moller">jesper</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL01ldGhvZFBhcmFtZXRl
cnNBdHRyaWJ1dGVUZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxl
ci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9NZXRo
b2RQYXJhbWV0ZXJzQXR0cmlidXRlVGVzdC5qYXZhCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4
IDAwMDAwMDAuLmMwMWExZGYKLS0tIC9kZXYvbnVsbAorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIv
cmVncmVzc2lvbi9NZXRob2RQYXJhbWV0ZXJzQXR0cmlidXRlVGVzdC5qYXZhCkBAIC0wLDAgKzEs
MTI4IEBACisvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgorICogQ29weXJpZ2h0IChjKSAyMDEzIEpl
c3BlciBTdGVlbiBNb2VsbGVyIGFuZCBvdGhlcnMuCisgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBU
aGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCisgKiBhcmUgbWFkZSBh
dmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYx
LjAKKyAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxh
YmxlIGF0CisgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbAorICog
CisgKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmlj
YXRpb24gZGV2ZWxvcGVkIHVuZGVyIHRoZSBKYXZhCisgKiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQ
KSBhbmQgaXMgbWFkZSBhdmFpbGFibGUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gcHVycG9z
ZXMKKyAqIG9ubHkuIFRoZSBjb2RlIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggYW55IHNwZWNpZmlj
YXRpb24gb2YgdGhlIEpDUC4KKyAqIAorICogQ29udHJpYnV0b3JzOgorICogICAgIEplc3BlciBT
dGVlbiBNb2VsbGVyIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCisgKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKi8KK3BhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGls
ZXIucmVncmVzc2lvbjsKKworaW1wb3J0IGphdmEuaW8uRmlsZTsKKworaW1wb3J0IGp1bml0LmZy
YW1ld29yay5UZXN0OworCitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuVG9vbEZhY3Rvcnk7
CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMudXRpbC5VdGlsOworaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5jb3JlLnV0aWwuQ2xhc3NGaWxlQnl0ZXNEaXNhc3NlbWJsZXI7CitpbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmNsYXNzZm10LkNsYXNzRmlsZVJl
YWRlcjsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuZW52LklCaW5h
cnlNZXRob2Q7CisKK3B1YmxpYyBjbGFzcyBNZXRob2RQYXJhbWV0ZXJzQXR0cmlidXRlVGVzdCBl
eHRlbmRzIEFic3RyYWN0UmVncmVzc2lvblRlc3QgeworCXB1YmxpYyBNZXRob2RQYXJhbWV0ZXJz
QXR0cmlidXRlVGVzdChTdHJpbmcgbmFtZSkgeworCQlzdXBlcihuYW1lKTsKKwl9CisKKwlwdWJs
aWMgc3RhdGljIENsYXNzIHRlc3RDbGFzcygpIHsKKwkJcmV0dXJuIE1ldGhvZFBhcmFtZXRlcnNB
dHRyaWJ1dGVUZXN0LmNsYXNzOworCX0KKworCS8vIFVzZSB0aGlzIHN0YXRpYyBpbml0aWFsaXpl
ciB0byBzcGVjaWZ5IHN1YnNldCBmb3IgdGVzdHMKKwkvLyBBbGwgc3BlY2lmaWVkIHRlc3RzIHdo
aWNoIGRvZXMgbm90IGJlbG9uZyB0byB0aGUgY2xhc3MgYXJlIHNraXBwZWQuLi4KKwlzdGF0aWMg
eworLy8JCVRFU1RTX1BSRUZJWCA9ICJ0ZXN0QnVnOTU1MjEiOworLy8JCVRFU1RTX05BTUVTID0g
bmV3IFN0cmluZ1tdIHsgInRlc3RCdWczNTk0OTUiIH07CisvLwkJVEVTVFNfTlVNQkVSUyA9IG5l
dyBpbnRbXSB7IDUzIH07CisvLwkJVEVTVFNfUkFOR0UgPSBuZXcgaW50W10geyAyMyAtMSx9Owor
CX0KKwlwdWJsaWMgc3RhdGljIFRlc3Qgc3VpdGUoKSB7CisJCXJldHVybiBidWlsZE1pbmltYWxD
b21wbGlhbmNlVGVzdFN1aXRlKHRlc3RDbGFzcygpLCBGXzFfOCk7CisJfQorCXB1YmxpYyB2b2lk
IHRlc3QwMDEoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKworCQkJQ2xhc3NGaWxlQnl0ZXNEaXNhc3Nl
bWJsZXIgZGlzYXNzZW1ibGVyID0gVG9vbEZhY3RvcnkuY3JlYXRlRGVmYXVsdENsYXNzRmlsZUJ5
dGVzRGlzYXNzZW1ibGVyKCk7CisJCQlTdHJpbmcgcGF0aCA9IHRoaXMuZ2V0Q29tcGlsZXJUZXN0
c1BsdWdpbkRpcmVjdG9yeVBhdGgoKSArIEZpbGUuc2VwYXJhdG9yICsgIndvcmtzcGFjZSIgKyBG
aWxlLnNlcGFyYXRvciArICJJbm5lck5hbWVzLmNsYXNzIjsKKwkJCWJ5dGVbXSBjbGFzc0ZpbGVC
eXRlcyA9IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci51dGlsLlV0aWwuZ2V0Rmls
ZUJ5dGVDb250ZW50KG5ldyBGaWxlKHBhdGgpKTsKKwkJCVN0cmluZyBhY3R1YWxPdXRwdXQgPQor
CQkJCWRpc2Fzc2VtYmxlci5kaXNhc3NlbWJsZSgKKwkJCQkJY2xhc3NGaWxlQnl0ZXMsCisJCQkJ
CSJcbiIsCisJCQkJCUNsYXNzRmlsZUJ5dGVzRGlzYXNzZW1ibGVyLkRFVEFJTEVEKTsKKworCQkJ
U3RyaW5nIGV4cGVjdGVkT3V0cHV0ID0KKwkJCQkJCQkiLy8gQ29tcGlsZWQgZnJvbSBJbm5lck5h
bWVzLmphdmEgKHZlcnNpb24gMS44IDogNTIuMCwgc3VwZXIgYml0KVxuIiArIAorCQkJCQkJCSJw
dWJsaWMgY2xhc3MgSW5uZXJOYW1lcyB7XG4iICsgCisJCQkJCQkJIiAgXG4iICsgCisJCQkJCQkJ
IiAgLy8gTWV0aG9kIGRlc2NyaXB0b3IgIzEwICgpVlxuIiArIAorCQkJCQkJCSIgIC8vIFN0YWNr
OiAxLCBMb2NhbHM6IDFcbiIgKyAKKwkJCQkJCQkiICBwdWJsaWMgSW5uZXJOYW1lcygpO1xuIiAr
IAorCQkJCQkJCSIgICAgMCAgYWxvYWRfMCBbdGhpc11cbiIgKyAKKwkJCQkJCQkiICAgIDEgIGlu
dm9rZXNwZWNpYWwgamF2YS5sYW5nLk9iamVjdCgpIFsxXVxuIiArIAorCQkJCQkJCSIgICAgNCAg
cmV0dXJuXG4iICsgCisJCQkJCQkJIiAgICAgIExpbmUgbnVtYmVyczpcbiIgKyAKKwkJCQkJCQki
ICAgICAgICBbcGM6IDAsIGxpbmU6IDNdXG4iICsgCisJCQkJCQkJIiAgXG4iICsgCisJCQkJCQkJ
IiAgLy8gTWV0aG9kIGRlc2NyaXB0b3IgIzE0ICgpTGphdmEvdXRpbC9jb25jdXJyZW50L0NhbGxh
YmxlO1xuIiArIAorCQkJCQkJCSIgIC8vIFNpZ25hdHVyZTogKClMamF2YS91dGlsL2NvbmN1cnJl
bnQvQ2FsbGFibGU8TGphdmEvbGFuZy9TdHJpbmc7PjtcbiIgKyAKKwkJCQkJCQkiICAvLyBTdGFj
azogMywgTG9jYWxzOiAxXG4iICsgCisJCQkJCQkJIiAgcHVibGljIGphdmEudXRpbC5jb25jdXJy
ZW50LkNhbGxhYmxlIG1ha2VJbm5lcigpO1xuIiArIAorCQkJCQkJCSIgICAgMCAgbmV3IElubmVy
TmFtZXMkMSBbMl1cbiIgKyAKKwkJCQkJCQkiICAgIDMgIGR1cFxuIiArIAorCQkJCQkJCSIgICAg
NCAgYWxvYWRfMCBbdGhpc11cbiIgKyAKKwkJCQkJCQkiICAgIDUgIGludm9rZXNwZWNpYWwgSW5u
ZXJOYW1lcyQxKElubmVyTmFtZXMpIFszXVxuIiArIAorCQkJCQkJCSIgICAgOCAgYXJldHVyblxu
IiArIAorCQkJCQkJCSIgICAgICBMaW5lIG51bWJlcnM6XG4iICsgCisJCQkJCQkJIiAgICAgICAg
W3BjOiAwLCBsaW5lOiA2XVxuIiArIAorCQkJCQkJCSIgIFxuIiArIAorCQkJCQkJCSIgIC8vIE1l
dGhvZCBkZXNjcmlwdG9yICMxOCAoTGphdmEvbGFuZy9TdHJpbmc7TGphdmEvbGFuZy9TdHJpbmc7
KUxqYXZhL3V0aWwvY29uY3VycmVudC9DYWxsYWJsZTtcbiIgKyAKKwkJCQkJCQkiICAvLyBTaWdu
YXR1cmU6IChMamF2YS9sYW5nL1N0cmluZztMamF2YS9sYW5nL1N0cmluZzspTGphdmEvdXRpbC9j
b25jdXJyZW50L0NhbGxhYmxlPExqYXZhL2xhbmcvU3RyaW5nOz47XG4iICsgCisJCQkJCQkJIiAg
Ly8gU3RhY2s6IDQsIExvY2FsczogM1xuIiArIAorCQkJCQkJCSIgIHB1YmxpYyBqYXZhLnV0aWwu
Y29uY3VycmVudC5DYWxsYWJsZSBtYWtlSW5uZXJXaXRoQ2FwdHVyZShqYXZhLmxhbmcuU3RyaW5n
IGZpbmFsTWVzc2FnZSwgamF2YS5sYW5nLlN0cmluZyBtdXRhYmxlTWVzc2FnZSk7XG4iICsgCisJ
CQkJCQkJIiAgICAgMCAgbmV3IElubmVyTmFtZXMkMiBbNF1cbiIgKyAKKwkJCQkJCQkiICAgICAz
ICBkdXBcbiIgKyAKKwkJCQkJCQkiICAgICA0ICBhbG9hZF8wIFt0aGlzXVxuIiArIAorCQkJCQkJ
CSIgICAgIDUgIGFsb2FkXzEgW2ZpbmFsTWVzc2FnZV1cbiIgKyAKKwkJCQkJCQkiICAgICA2ICBp
bnZva2VzcGVjaWFsIElubmVyTmFtZXMkMihJbm5lck5hbWVzLCBqYXZhLmxhbmcuU3RyaW5nKSBb
NV1cbiIgKyAKKwkJCQkJCQkiICAgICA5ICBhcmV0dXJuXG4iICsgCisJCQkJCQkJIiAgICAgIExp
bmUgbnVtYmVyczpcbiIgKyAKKwkJCQkJCQkiICAgICAgICBbcGM6IDAsIGxpbmU6IDE0XVxuIiAr
IAorCQkJCQkJCSIgICAgICBNZXRob2QgUGFyYW1ldGVyczpcbiIgKyAKKwkJCQkJCQkiICAgICAg
ICBmaW5hbCBmaW5hbE1lc3NhZ2VcbiIgKyAKKwkJCQkJCQkiICAgICAgICBtdXRhYmxlTWVzc2Fn
ZVxuIiArIAorCQkJCQkJCSJcbiIgKyAKKwkJCQkJCQkiICBJbm5lciBjbGFzc2VzOlxuIiArIAor
CQkJCQkJCSIgICAgW2lubmVyIGNsYXNzIGluZm86ICM0IElubmVyTmFtZXMkMiwgb3V0ZXIgY2xh
c3MgaW5mbzogIzBcbiIgKyAKKwkJCQkJCQkiICAgICBpbm5lciBuYW1lOiAjMCwgYWNjZXNzZmxh
Z3M6IDAgZGVmYXVsdF0sXG4iICsgCisJCQkJCQkJIiAgICBbaW5uZXIgY2xhc3MgaW5mbzogIzIg
SW5uZXJOYW1lcyQxLCBvdXRlciBjbGFzcyBpbmZvOiAjMFxuIiArIAorCQkJCQkJCSIgICAgIGlu
bmVyIG5hbWU6ICMwLCBhY2Nlc3NmbGFnczogMCBkZWZhdWx0XVxuIiArIAorCQkJCQkJCSJ9IjsK
KworCQkJaW50IGluZGV4ID0gYWN0dWFsT3V0cHV0LmluZGV4T2YoZXhwZWN0ZWRPdXRwdXQpOwor
CQkJaWYgKGluZGV4ID09IC0xIHx8IGV4cGVjdGVkT3V0cHV0Lmxlbmd0aCgpID09IDApIHsKKwkJ
CQlTeXN0ZW0ub3V0LnByaW50bG4oVXRpbC5kaXNwbGF5U3RyaW5nKGFjdHVhbE91dHB1dCwgMikp
OworCQkJfQorCQkJaWYgKGluZGV4ID09IC0xKSB7CisJCQkJYXNzZXJ0RXF1YWxzKCJXcm9uZyBj
b250ZW50cyIsIGV4cGVjdGVkT3V0cHV0LCBhY3R1YWxPdXRwdXQpOworCQkJfQorCX0KKworCXB1
YmxpYyB2b2lkIHRlc3QwMDIoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKworCQkvLyBUZXN0IHRoZSBy
ZXN1bHRzIG9mIHRoZSBDbGFzc0ZpbGVSZWFkZXIKKwkJU3RyaW5nIHBhdGggPSB0aGlzLmdldENv
bXBpbGVyVGVzdHNQbHVnaW5EaXJlY3RvcnlQYXRoKCkgKyBGaWxlLnNlcGFyYXRvciArICJ3b3Jr
c3BhY2UiICsgRmlsZS5zZXBhcmF0b3IgKyAiSW5uZXJOYW1lcy5jbGFzcyI7CisJCQorCQlvcmcu
ZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuY2xhc3NmbXQuQ2xhc3NGaWxlUmVhZGVyIGNs
YXNzRmlsZVJlYWRlciA9IENsYXNzRmlsZVJlYWRlci5yZWFkKHBhdGgpOworCQlJQmluYXJ5TWV0
aG9kW10gbWV0aG9kSW5mb3MgPSBjbGFzc0ZpbGVSZWFkZXIuZ2V0TWV0aG9kcygpOworCQlhc3Nl
cnROb3ROdWxsKCJObyBtZXRob2QgaW5mb3MiLCBtZXRob2RJbmZvcyk7CisJCWludCBsZW5ndGgg
PSBtZXRob2RJbmZvcy5sZW5ndGg7CisJCWFzc2VydEVxdWFscygiTXVzdCBoYXZlIHRocmVlIG1l
dGhvZHMiLCAzLCBsZW5ndGgpOworCQlhc3NlcnRFcXVhbHMoImZpbmFsTWVzc2FnZSIsIG5ldyBT
dHJpbmcobWV0aG9kSW5mb3NbMl0uZ2V0QXJndW1lbnROYW1lcygpWzBdKSk7CisJCWFzc2VydEVx
dWFscygibXV0YWJsZU1lc3NhZ2UiLCBuZXcgU3RyaW5nKG1ldGhvZEluZm9zWzJdLmdldEFyZ3Vt
ZW50TmFtZXMoKVsxXSkpOworCX0KK30KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
LnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9y
ZWdyZXNzaW9uL1Rlc3RBbGwuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBp
bGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1Rl
c3RBbGwuamF2YQppbmRleCBlYWQzZjU1Li4wYTlhOTZmIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
Y29tcGlsZXIvcmVncmVzc2lvbi9UZXN0QWxsLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vVGVzdEFsbC5qYXZhCkBAIC0xNiw2ICsxNiw4IEBACiAgKgkJCQkJCQkJYnVn
IDM1ODkwMyAtIEZpbHRlciBwcmFjdGljYWxseSB1bmltcG9ydGFudCByZXNvdXJjZSBsZWFrIHdh
cm5pbmdzCiAgKiAgICAgICAgQW5keSBDbGVtZW50IC0gQ29udHJpYnV0aW9ucyBmb3IKICAqICAg
ICAgICAgICAgICAgICAgICAgICAgICBCdWcgMzgzNjI0IC0gWzEuOF1bY29tcGlsZXJdIFJldml2
ZSBjb2RlIGdlbmVyYXRpb24gc3VwcG9ydCBmb3IgdHlwZSBhbm5vdGF0aW9ucyAoZnJvbSBPbGl2
aWVyJ3Mgd29yaykKKyAqICAgICAgIEplc3BlciBTdGVlbiBNb2VsbGVyIC0gQ29udHJpYnV0aW9u
cyBmb3I6CisgKiAgICAgICAgICAgICAgICAgICAgICAgICAgQnVnIDQwNjk3MyAtIFtjb21waWxl
cl0gUGFyc2UgTWV0aG9kUGFyYW1ldGVycyBhdHRyaWJ1dGUKICAqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqLwogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci5yZWdyZXNz
aW9uOwogCkBAIC0xMzYsNiArMTM4LDcgQEAgcHVibGljIHN0YXRpYyBUZXN0IHN1aXRlKCkgewog
CXNpbmNlXzFfOC5hZGQoR3JhbW1hckNvdmVyYWdlVGVzdHMzMDguY2xhc3MpOwogCXNpbmNlXzFf
OC5hZGQoRmxvd0FuYWx5c2lzVGVzdDguY2xhc3MpOwogCXNpbmNlXzFfOC5hZGQoVHlwZUFubm90
YXRpb25UZXN0LmNsYXNzKTsKKwlzaW5jZV8xXzguYWRkKE1ldGhvZFBhcmFtZXRlcnNBdHRyaWJ1
dGVUZXN0LmNsYXNzKTsKIAogCS8vIEJ1aWxkIGZpbmFsIHRlc3Qgc3VpdGUKIAlUZXN0U3VpdGUg
YWxsID0gbmV3IFRlc3RTdWl0ZShUZXN0QWxsLmNsYXNzLmdldE5hbWUoKSk7CmRpZmYgLS1naXQg
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci93b3Jrc3BhY2UvSW5uZXJOYW1l
cyQxLmNsYXNzIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvd29ya3NwYWNl
L0lubmVyTmFtZXMkMS5jbGFzcwpuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwMDAw
MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwLi45NDEzZTM5NjkzODFhYWIxZWZlZWU2NmNm
ZWNjYjViN2NjODkzZDMyCkdJVCBiaW5hcnkgcGF0Y2gKbGl0ZXJhbCA3NzkKemNtWmAlVTI3OVQ2
Z2B1I1AxZTx7WlQmWGQpPnhBV00hYDJyS3wleH1SdzJkciQjekokWmYwZTdSKCRNRnMtUDhvCnpA
Q1cjIyM1MD8lOHd5PzZKOUUkNmJNSE5PPUZpXz56WDd+TnpsQSNQeG9GX05INjU0azB8eVRzWSZx
QiNYcWNsZwp6P0xIVXFDVTNQPyQtWjJ1XmNDXmxQPXt0dXB4cytOPXprUWJqcDlTYWdHczI+ZXp1
c1k8VXIwTUJLfHZOal5lYCkKekdHUCo8bDlhSzVqM1ItSlVWbX5kenNPLUVeP1chck52UCo2OypQ
JXQ+YXopQm9qUTFRRzNAPjlTT3RiKnQhWCZkCnoocXN2MWo5Mm0kMFpTd15WS2ZZNDliYCRPdj5B
P0EqdFdJMUxNUklGKzB4VEVPOUomS3cyaWsqPkNiR05NOC1PWgp6OypAUEpIOTY+ZGMjSXRuT3wo
Mz9jO2NaNC0kTlRkWElKdk9GVjVYakItMiFKMjdhbDAqfDkoO2hjMFZiVjc7WEwKejl9IztsJVd4
PFFgQU93fnp9RVNBRlV2XjUpdDxlKHJpcXRCeiRQQzswfEV8Jj9eeylURT4tPzZ1QWw7c3lLU3gm
Cnppd3ZJcmZFZkhsPHJfVkx0RilHQj9LUnB1KTFMU1FJRSNZMU56Vm99MmozeWlQKDleLW1EdDJ9
QX5qLWJ7JWk4cQpvM3RwJC0pZHkjJlRfaVAxNX4mK1pQezlxeyUtMzdFb2hRNzV5SHNYWDI8cHFm
ZjNtISVTXnhrNQoKbGl0ZXJhbCAwCkhjbVY/ZDAwMDAxCgpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvd29ya3NwYWNlL0lubmVyTmFtZXMkMi5jbGFzcyBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3dvcmtzcGFjZS9Jbm5lck5hbWVz
JDIuY2xhc3MKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMDAwMDAwMDAwMDAwMDAw
MDAwMDAwMDAwMDAwMDAwMDAwMC4uZTQ5NDE5NDdkN2YxYTNhNjFiOTQ3ZjJiOTBiYmJjYzlhZGVm
ZDYzZApHSVQgYmluYXJ5IHBhdGNoCmxpdGVyYWwgODgzCnpjbVpgJStpdWY5NnI2UH5DZE1AR2cq
JDszUWtuIXI1YU54aDV7aU9ebG9xNipeMU59RVdRKCh8PmBsY1pwOUImRwp6aTNkSl9rM3gpLWZU
S3BXPFVQbVpHanE8KT8oYVc4ZSp0KW9Sc3wqMHZnTkxhR1ZYY0lIZUdERmM7S1FnNVMrQFcKent5
YGZWP1c7N0VMbld9KkpDPilpOVo1NTZfaWR1aEBQJEN4aiZ4ZG9EJlk1Qzg+NWx+SWFYPGc/YG9z
JXAxQFhQCnpAeURgNl5IOEFKaUkzUXorUzVpSU92VkcxeXB3fjdOVSpRJENfWntDNlV0aFpxXnUy
UDZiV29KbiMpPU9VaVZYfAp6UE9PZWk+U0Z0UipfKishM041RnJeITNuNEo0eDgxeVB6e0ttPzBD
WnFqbmdaYUZRZy0qbWo0RnYkMXY7MnktOXkKenNPazBOTmZONDhJdmMjMm9BRCVialkhdm9RSm03
WCpgOGNIXnMkNDY0LWMxcFR0ZFola0VWfVJ0a0tQIVV3YClSCnp2bEdjUVJyRGFwNGBNZDRLeTM8
TEdfdF5ZUFdmKlVYVV5OdXRGaXAzcm9la2BNOyY9R19vdVBFLShfVGU4VyM7Zgp6ZStyR31BdlNy
PCRgRWtqMVZPZkdmUlBVSFFXcDY3eEI+PyYleXQrdnF9cUNQMkdNJGEyQi1Be2d8Q0VZQ2Y3XmAK
ekVEZ0FwOUMpN3QweUo7VnVra0FARDdDKTlgTkN3ODY9MG82az1SRD9sQkJDa3IwKiE2QyN+Y3BR
bTt8SyFGQWwyClUjKyRlYDZ9KmkqeFg7WF5iY3ZEQVVzXzdhVEwxdDYKCmxpdGVyYWwgMApIY21W
P2QwMDAwMQoKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVy
L3dvcmtzcGFjZS9Jbm5lck5hbWVzLmNsYXNzIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMu
Y29tcGlsZXIvd29ya3NwYWNlL0lubmVyTmFtZXMuY2xhc3MKbmV3IGZpbGUgbW9kZSAxMDA2NDQK
aW5kZXggMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMC4uNjBmMjNjM2Q2
ZGU2YzcxM2JlOWM3Nzg2NzEyNmYzNWIzOGNmNjdkOApHSVQgYmluYXJ5IHBhdGNoCmxpdGVyYWwg
ODIzCnpjbWJfYStlIW01NUl4en11M2MrZUBBdTBWQUY2XnkoV2k8cE1NMDwrczM/NipZcGtpO1JJ
KnZXT1A+UzxLZnNSPwp6Q3RGbSE7ZnMwNU9pcz8zT2xJYyE8PjNqeUNKRyowT3UzbCQ7OSRuWnRj
TjcjVCtGKnpWOTR3JUMzR2Q9VkpKZHwKeilWNVU4PkBYeVglY2wmPE83fm5hPGY+QU0hPkgyYGBo
KyhFTGVkPzZDMU5ScVV0RiVYYDMpfmNNaDJ5M1MyWks4CnpnKSpmSTQrMlhzNlRjPX5pa25FMmNJ
eit4Yn13QU9Salg3cFRCPXJnaGhtSnJ6ai1GaldyYmgmIXRFQm4pNHdCcwp6cjxnd3c9Q1hUISVy
KS1fQlEjWWJiMEhORTRuIUY4N0EyblRNOF5LLTlqTzF1KTQlLUl0OTJ2WTZub05eSX5TTXcKemtQ
LXttWV5nSXkhK1VGOTNAQCEpWjFGUjtWS0pZPGA7YXJfPDZnelpKIS1UPyhAXitnXkBDQmlqclR0
eEthfSRuCnpLMmtKVGJ8cFghaERaQVZvI3gwZ3ZWQU19VjBZd0RQUENfRCZ7N0FIckFmM0BLYjhY
Tk0+dXQmQ3ZMeWNRXipuRwp6QVd5TygzPWBlVDNOKms4dmZkKy1eX0E2b15uS04zRislcmcyY3Nr
JUJleGYzb0kqe3wkLXlOMCRxdGozQnh7JGAKRkdwflomI3Q4cmIKCmxpdGVyYWwgMApIY21WP2Qw
MDAwMQoKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9jbGFzc2ZtdC9NZXRob2RJbmZvLmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvY2xhc3NmbXQvTWV0aG9kSW5mby5qYXZhCmluZGV4IDg4ZDYwYWMuLjU2M2FhODYgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9jbGFzc2ZtdC9NZXRob2RJbmZvLmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2NsYXNz
Zm10L01ldGhvZEluZm8uamF2YQpAQCAtMSwxMyArMSwxOSBAQAogLyoqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMSBJQk0gQ29ycG9yYXRpb24gYW5kIG90
aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5kIG90
aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29t
cGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMg
b2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMg
dGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKICAqIGh0dHA6Ly93d3cuZWNs
aXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCiAgKgorICogVGhpcyBpcyBhbiBpbXBsZW1lbnRh
dGlvbiBvZiBhbiBlYXJseS1kcmFmdCBzcGVjaWZpY2F0aW9uIGRldmVsb3BlZCB1bmRlciB0aGUg
SmF2YQorICogQ29tbXVuaXR5IFByb2Nlc3MgKEpDUCkgYW5kIGlzIG1hZGUgYXZhaWxhYmxlIGZv
ciB0ZXN0aW5nIGFuZCBldmFsdWF0aW9uIHB1cnBvc2VzCisgKiBvbmx5LiBUaGUgY29kZSBpcyBu
b3QgY29tcGF0aWJsZSB3aXRoIGFueSBzcGVjaWZpY2F0aW9uIG9mIHRoZSBKQ1AuCisgKiAKKyAq
CiAgKiBDb250cmlidXRvcnM6CiAgKiAgICAgSUJNIENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkg
YW5kIGltcGxlbWVudGF0aW9uCiAgKiAgICAgU3RlcGhhbiBIZXJybWFubiAtIENvbnRyaWJ1dGlv
biBmb3IgYnVnIDE4NjM0MiAtIFtjb21waWxlcl1bbnVsbF0gVXNpbmcgYW5ub3RhdGlvbnMgZm9y
IG51bGwgY2hlY2tpbmcKKyAqICAgICBKZXNwZXIgU3RlZW4gTW9lbGxlciAtIENvbnRyaWJ1dGlv
biBmb3IgYnVnIDQwNjk3MyAtIFtjb21waWxlcl0gUGFyc2UgTWV0aG9kUGFyYW1ldGVycyBhdHRy
aWJ1dGUKICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIuY2xhc3NmbXQ7CiAKQEAgLTQ0LDYgKzUwLDExIEBAIHB1YmxpYyBz
dGF0aWMgTWV0aG9kSW5mbyBjcmVhdGVNZXRob2QoYnl0ZSBjbGFzc0ZpbGVCeXRlc1tdLCBpbnQg
b2Zmc2V0c1tdLCBpbnQKIAkJY2hhcltdIGF0dHJpYnV0ZU5hbWUgPSBtZXRob2RJbmZvLnV0ZjhB
dCh1dGY4T2Zmc2V0ICsgMywgbWV0aG9kSW5mby51MkF0KHV0ZjhPZmZzZXQgKyAxKSk7CiAJCWlm
IChhdHRyaWJ1dGVOYW1lLmxlbmd0aCA+IDApIHsKIAkJCXN3aXRjaChhdHRyaWJ1dGVOYW1lWzBd
KSB7CisJCQkJY2FzZSAnTScgOgorCQkJCQlpZiAoQ2hhck9wZXJhdGlvbi5lcXVhbHMoYXR0cmli
dXRlTmFtZSwgQXR0cmlidXRlTmFtZXNDb25zdGFudHMuTWV0aG9kUGFyYW1ldGVyc05hbWUpKSB7
CisJCQkJCQltZXRob2RJbmZvLmRlY29kZU1ldGhvZFBhcmFtZXRlcnMocmVhZE9mZnNldCwgdHJ1
ZSwgbWV0aG9kSW5mbyk7CisJCQkJCX0KKwkJCQkJYnJlYWs7CiAJCQkJY2FzZSAnUycgOgogCQkJ
CQlpZiAoQ2hhck9wZXJhdGlvbi5lcXVhbHMoQXR0cmlidXRlTmFtZXNDb25zdGFudHMuU2lnbmF0
dXJlTmFtZSwgYXR0cmlidXRlTmFtZSkpCiAJCQkJCQltZXRob2RJbmZvLnNpZ25hdHVyZVV0ZjhP
ZmZzZXQgPSBtZXRob2RJbmZvLmNvbnN0YW50UG9vbE9mZnNldHNbbWV0aG9kSW5mby51MkF0KHJl
YWRPZmZzZXQgKyA2KV0gLSBtZXRob2RJbmZvLnN0cnVjdE9mZnNldDsKQEAgLTQ5NSw0ICs1MDYs
MjYgQEAgcHJpdmF0ZSB2b2lkIGRlY29kZUxvY2FsVmFyaWFibGVBdHRyaWJ1dGUoaW50IG9mZnNl
dCwgaW50IGNvZGVMZW5ndGgpIHsKIAkJfQogCX0KIH0KK3ByaXZhdGUgdm9pZCBkZWNvZGVNZXRo
b2RQYXJhbWV0ZXJzKGludCBvZmZzZXQsIGJvb2xlYW4gYiwgTWV0aG9kSW5mbyBtZXRob2RJbmZv
KSB7CisJaW50IHJlYWRPZmZzZXQgPSBvZmZzZXQgKyA2OworCWZpbmFsIGludCBsZW5ndGggPSB1
MUF0KHJlYWRPZmZzZXQpOworCWlmIChsZW5ndGggIT0gMCkgeworCQlyZWFkT2Zmc2V0ICs9IDE7
CisJCXRoaXMuYXJndW1lbnROYW1lcyA9IG5ldyBjaGFyW2xlbmd0aF1bXTsKKwkJdGhpcy5hcmd1
bWVudE5hbWVzSW5kZXggPSAwOworCQlmb3IgKGludCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7
CisJCQlpbnQgbmFtZUluZGV4ID0gdTJBdChyZWFkT2Zmc2V0KTsKKwkJCWlmIChuYW1lSW5kZXgg
IT0gMCkgeworCQkJCWludCB1dGY4T2Zmc2V0ID0gdGhpcy5jb25zdGFudFBvb2xPZmZzZXRzW25h
bWVJbmRleF0gLSB0aGlzLnN0cnVjdE9mZnNldDsKKwkJCQljaGFyW10gcGFyYW1ldGVyTmFtZSA9
IHV0ZjhBdCh1dGY4T2Zmc2V0ICsgMywgdTJBdCh1dGY4T2Zmc2V0ICsgMSkpOworCQkJCXRoaXMu
YXJndW1lbnROYW1lc1t0aGlzLmFyZ3VtZW50TmFtZXNJbmRleCsrXSA9IHBhcmFtZXRlck5hbWU7
CisJCQl9CisJCQlyZWFkT2Zmc2V0ICs9IDQ7CisJCX0KKwkJaWYgKHRoaXMuYXJndW1lbnROYW1l
c0luZGV4ICE9IHRoaXMuYXJndW1lbnROYW1lcy5sZW5ndGgpIHsKKwkJCS8vIHJlc2l6ZQorCQkJ
U3lzdGVtLmFycmF5Y29weSh0aGlzLmFyZ3VtZW50TmFtZXMsIDAsICh0aGlzLmFyZ3VtZW50TmFt
ZXMgPSBuZXcgY2hhclt0aGlzLmFyZ3VtZW50TmFtZXNJbmRleF1bXSksIDAsIHRoaXMuYXJndW1l
bnROYW1lc0luZGV4KTsKKwkJfQorCX0KK30KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9jb2RlZ2Vu
L0F0dHJpYnV0ZU5hbWVzQ29uc3RhbnRzLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvY29kZWdlbi9BdHRyaWJ1dGVO
YW1lc0NvbnN0YW50cy5qYXZhCmluZGV4IDhmZDQxZWMuLjUzNGVlZjAgMTAwNjQ0Ci0tLSBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9jb2RlZ2VuL0F0dHJpYnV0ZU5hbWVzQ29uc3RhbnRzLmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Nv
ZGVnZW4vQXR0cmlidXRlTmFtZXNDb25zdGFudHMuamF2YQpAQCAtMTMsNiArMTMsNyBAQAogICog
ICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgogICog
ICAgIEplc3BlciBTIE1vbGxlciAtIENvbnRyaWJ1dGlvbnMgZm9yCiAgKgkJCQkJCQlCdWcgNDA1
MDY2IC0gWzEuOF1bY29tcGlsZXJdW2NvZGVnZW5dIEltcGxlbWVudCBjb2RlIGdlbmVyYXRpb24g
aW5mcmFzdHJ1Y3R1cmUgZm9yIEpTUjMzNSAgICAgICAgICAgICAKKyAqCQkJCQkJCUJ1ZyA0MDY5
NzMgLSBbY29tcGlsZXJdIFBhcnNlIE1ldGhvZFBhcmFtZXRlcnMgYXR0cmlidXRlCiAgKiAgICAg
ICAgQW5keSBDbGVtZW50IC0gQ29udHJpYnV0aW9ucyBmb3IKICAqICAgICAgICAgICAgICAgICAg
ICAgICAgICBCdWcgMzgzNjI0IC0gWzEuOF1bY29tcGlsZXJdIFJldml2ZSBjb2RlIGdlbmVyYXRp
b24gc3VwcG9ydCBmb3IgdHlwZSBhbm5vdGF0aW9ucyAoZnJvbSBPbGl2aWVyJ3Mgd29yaykKICAq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqLwpAQCAtNDUsNCArNDYsNiBAQCBwdWJsaWMgaW50ZXJmYWNl
IEF0dHJpYnV0ZU5hbWVzQ29uc3RhbnRzIHsKIAkvLyBqc3IzMDgKIAlmaW5hbCBjaGFyW10gUnVu
dGltZVZpc2libGVUeXBlQW5ub3RhdGlvbnNOYW1lID0gIlJ1bnRpbWVWaXNpYmxlVHlwZUFubm90
YXRpb25zIi50b0NoYXJBcnJheSgpOyAvLyROT04tTkxTLTEkCiAJZmluYWwgY2hhcltdIFJ1bnRp
bWVJbnZpc2libGVUeXBlQW5ub3RhdGlvbnNOYW1lID0gIlJ1bnRpbWVJbnZpc2libGVUeXBlQW5u
b3RhdGlvbnMiLnRvQ2hhckFycmF5KCk7IC8vJE5PTi1OTFMtMSQKKwkvLyBqZXAxMTgKKwlmaW5h
bCBjaGFyW10gTWV0aG9kUGFyYW1ldGVyc05hbWUgPSAiTWV0aG9kUGFyYW1ldGVycyIudG9DaGFy
QXJyYXkoKTsgLy8kTk9OLU5MUy0xJAogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2NvcmUvdXRpbC9JQXR0cmlidXRlTmFtZXNDb25zdGFu
dHMuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L3V0aWwvSUF0dHJpYnV0ZU5hbWVzQ29uc3RhbnRzLmphdmEKaW5kZXggMDU2ZGUyYi4uZGE3ZDI2
YiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0
L2NvcmUvdXRpbC9JQXR0cmlidXRlTmFtZXNDb25zdGFudHMuamF2YQorKysgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvY29yZS91dGlsL0lBdHRyaWJ1dGVOYW1l
c0NvbnN0YW50cy5qYXZhCkBAIC0xMyw2ICsxMyw4IEBACiAgKiAgICAgSUJNIENvcnBvcmF0aW9u
IC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCiAgKiAgICAgICAgQW5keSBDbGVtZW50
IC0gQ29udHJpYnV0aW9ucyBmb3IKICAqICAgICAgICAgICAgICAgICAgICAgICAgICBCdWcgMzgz
NjI0IC0gWzEuOF1bY29tcGlsZXJdIFJldml2ZSBjb2RlIGdlbmVyYXRpb24gc3VwcG9ydCBmb3Ig
dHlwZSBhbm5vdGF0aW9ucyAoZnJvbSBPbGl2aWVyJ3Mgd29yaykKKyAqICAgICAgICBKZXNwZXIg
U3RlZW4gTW9sbGVyIC0gQ29udHJpYnV0aW9ucyBmb3IKKyAqCQkJCQkJCUJ1ZyA0MDY5NzMgLSBb
Y29tcGlsZXJdIFBhcnNlIE1ldGhvZFBhcmFtZXRlcnMgYXR0cmlidXRlCiAgKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKi8KIHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmNvcmUudXRpbDsKIApAQCAtMTY1
LDQgKzE2NywxMCBAQCBwdWJsaWMgaW50ZXJmYWNlIElBdHRyaWJ1dGVOYW1lc0NvbnN0YW50cyB7
CiAJICogQHNpbmNlIDMuOAogCSAqLwogCWNoYXJbXSBCT09UU1RSQVBfTUVUSE9EUyA9ICJCb290
c3RyYXBNZXRob2RzIi50b0NoYXJBcnJheSgpOyAvLyROT04tTkxTLTEkCisKKwkvKioKKwkgKiAi
TWV0aG9kUGFyYW1ldGVycyIgYXR0cmlidXRlIChhZGRlZCBpbiBqZXAxMTgpLgorCSAqIEBzaW5j
ZSAzLjkgQkVUQV9KQVZBOAorCSAqLworCWNoYXJbXSBNRVRIT0RfUEFSQU1FVEVSUyA9ICJNZXRo
b2RQYXJhbWV0ZXJzIi50b0NoYXJBcnJheSgpOyAvLyROT04tTkxTLTEkCiB9CmRpZmYgLS1naXQg
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvY29yZS91dGlsL0lN
ZXRob2RQYXJhbWV0ZXJzQXR0cmlidXRlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2Rl
bC9vcmcvZWNsaXBzZS9qZHQvY29yZS91dGlsL0lNZXRob2RQYXJhbWV0ZXJzQXR0cmlidXRlLmph
dmEKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMC4uZWUxODBjZAotLS0gL2Rldi9u
dWxsCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L3V0aWwvSU1ldGhvZFBhcmFtZXRlcnNBdHRyaWJ1dGUuamF2YQpAQCAtMCwwICsxLDUyIEBACisv
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKgorICogQ29weXJpZ2h0IChjKSAyMDEzIEplc3BlciBTdGVl
biBNb2VsbGVyIGFuZCBvdGhlcnMuCisgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dy
YW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCisgKiBhcmUgbWFkZSBhdmFpbGFibGUg
dW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKKyAqIHdo
aWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0Cisg
KiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbAorICogCisgKiBUaGlz
IGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2
ZWxvcGVkIHVuZGVyIHRoZSBKYXZhCisgKiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMg
bWFkZSBhdmFpbGFibGUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9u
bHkuIFRoZSBjb2RlIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24gb2Yg
dGhlIEpDUC4KKyAqIAorICogQ29udHJpYnV0b3JzOgorICogICAgIEplc3BlciBTdGVlbiBNb2Vs
bGVyIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCisgKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKi8KK3BhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmNvcmUudXRpbDsKKworLyoqCisgKiBEZXNj
cmlwdGlvbiBvZiBhIG1ldGhvZHMgYXR0cmlidXRlIGFzIGRlc2NyaWJlZCBpbiB0aGUgSlZNIHNw
ZWNpZmljYXRpb25zLgorICoKKyAqIFRoaXMgaW50ZXJmYWNlIG1heSBiZSBpbXBsZW1lbnRlZCBi
eSBjbGllbnRzLgorICoKKyAqIEBzaW5jZSAzLjkKKyAqLworcHVibGljIGludGVyZmFjZSBJTWV0
aG9kUGFyYW1ldGVyc0F0dHJpYnV0ZSBleHRlbmRzIElDbGFzc0ZpbGVBdHRyaWJ1dGUgeworCisJ
LyoqCisJICogQW5zd2VyIGJhY2sgdGhlIG51bWJlciBvZiBib290c3RyYXAgbWV0aG9kcyBvZiB0
aGlzIGVudHJ5IGFzIHNwZWNpZmllZCBpbgorCSAqIHRoZSBKVk0gc3BlY2lmaWNhdGlvbnMuCisJ
ICoKKwkgKiBAcmV0dXJuIHRoZSBudW1iZXIgb2YgYm9vdHN0cmFwIG1ldGhvZHMgb2YgdGhpcyBl
bnRyeSBhcyBzcGVjaWZpZWQgaW4KKwkgKiB0aGUgSlZNIHNwZWNpZmljYXRpb25zCisJICovCisJ
aW50IGdldE1ldGhvZFBhcmFtZXRlckxlbmd0aCgpOworCisJLyoqCisJICogQW5zd2VyIGJhY2sg
dGhlIHBhcmFtZXRlciBuYW1lIGZvciB0aGUgaSd0aCBlbGVtZW50LiBBbnN3ZXIgbnVsbCBpZiBu
bworCSAqIG5hbWUgaXMgYXZhaWxhYmxlLgorCSAqCisJICogQHJldHVybiBiYWNrIHRoZSBwYXJh
bWV0ZXIgbmFtZSBmb3IgdGhlIGkndGggZWxlbWVudC4gUmV0dXJucyBudWxsIGlmIG5vCisJICog
bmFtZSBpcyBhdmFpbGFibGUuCisJICovCisJY2hhcltdIGdldFBhcmFtZXRlck5hbWUoaW50IGkp
OworCisJLyoqCisJICogQW5zd2VyIGJhY2sgdGhlIGFjY2VzcyBmbGFncyBuYW1lIGZvciB0aGUg
aSd0aCBlbGVtZW50LCBhIG1hc2sgb2YKKwkgKiA8Y29kZT5BQ0NfRklOQUw8L2NvZGU+LCA8Y29k
ZT5BQ0NfU1lOVEhFVElDPC9jb2RlPiwgYW5kIDxjb2RlPkFDQ19NQU5EQVRFRDwvY29kZT4uIAor
CSAqCisJICogQHJldHVybiB0aGUgYWNjZXNzIGZsYWdzIG5hbWUgZm9yIHRoZSBpJ3RoIGVsZW1l
bnQuCisJICovCisJc2hvcnQgZ2V0QWNjZXNzRmxhZ3MoaW50IGkpOworCit9CmRpZmYgLS1naXQg
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvY29yZS91dGlsL0lN
b2RpZmllckNvbnN0YW50cy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2Vj
bGlwc2UvamR0L2NvcmUvdXRpbC9JTW9kaWZpZXJDb25zdGFudHMuamF2YQppbmRleCBkZDY0YzBi
Li5kNjliMzBkIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNs
aXBzZS9qZHQvY29yZS91dGlsL0lNb2RpZmllckNvbnN0YW50cy5qYXZhCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9jb3JlL3V0aWwvSU1vZGlmaWVyQ29u
c3RhbnRzLmphdmEKQEAgLTEsMTIgKzEsMTggQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0g
KiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMDggSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisg
KiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTMgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAg
KiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcg
bWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBF
Y2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlz
dHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CiAgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3Jn
L2xlZ2FsL2VwbC12MTAuaHRtbAogICoKKyAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2Yg
YW4gZWFybHktZHJhZnQgc3BlY2lmaWNhdGlvbiBkZXZlbG9wZWQgdW5kZXIgdGhlIEphdmEKKyAq
IENvbW11bml0eSBQcm9jZXNzIChKQ1ApIGFuZCBpcyBtYWRlIGF2YWlsYWJsZSBmb3IgdGVzdGlu
ZyBhbmQgZXZhbHVhdGlvbiBwdXJwb3NlcworICogb25seS4gVGhlIGNvZGUgaXMgbm90IGNvbXBh
dGlibGUgd2l0aCBhbnkgc3BlY2lmaWNhdGlvbiBvZiB0aGUgSkNQLgorICogCisgKgogICogQ29u
dHJpYnV0b3JzOgogICogICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJIGFuZCBpbXBs
ZW1lbnRhdGlvbgorICogICAgIEplc3BlciBTdGVlbiBNb2VsbGVyIC0gQ29udHJpYnV0aW9uIGZv
ciBidWcgNDA2OTczIC0gW2NvbXBpbGVyXSBQYXJzZSBNZXRob2RQYXJhbWV0ZXJzIGF0dHJpYnV0
ZQogICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKiovCiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5jb3Jl
LnV0aWw7CiAKQEAgLTYwLDQgKzY2LDEwIEBAIHB1YmxpYyBpbnRlcmZhY2UgSU1vZGlmaWVyQ29u
c3RhbnRzIHsKIAkgKiBAc2luY2UgMy4wCiAJICovCiAJaW50IEFDQ19FTlVNICAgICAgICAgPSAw
eDQwMDA7CisKKwkvKioKKwkgKiBJbmRpY2F0ZXMgYSBtYW5kYXRlZCAoYWRkZWQgaW4gSmF2YSA4
KS4KKwkgKiBAc2luY2UgMy45IEJFVEFfSkFWQTgKKwkgKi8KKwlpbnQgQUNDX01BTkRBVEVEICAg
ICA9IDB4ODAwMDsKIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3V0aWwvRGlzYXNzZW1ibGVyLmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS91dGls
L0Rpc2Fzc2VtYmxlci5qYXZhCmluZGV4IGM3OTYwYjQuLmNkMTY3ZWYgMTAwNjQ0Ci0tLSBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3V0
aWwvRGlzYXNzZW1ibGVyLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvdXRpbC9EaXNhc3NlbWJsZXIuamF2YQpAQCAtMTMs
NiArMTMsOCBAQAogICogICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJIGFuZCBpbXBs
ZW1lbnRhdGlvbgogICogICAgICAgIEFuZHkgQ2xlbWVudCAoR29QaXZvdGFsLCBJbmMpIGFjbGVt
ZW50QGdvcGl2b3RhbC5jb20gLSBDb250cmlidXRpb25zIGZvcgogICogICAgICAgICAgICAgICAg
ICAgICAgICAgIEJ1ZyAzODM2MjQgLSBbMS44XVtjb21waWxlcl0gUmV2aXZlIGNvZGUgZ2VuZXJh
dGlvbiBzdXBwb3J0IGZvciB0eXBlIGFubm90YXRpb25zIChmcm9tIE9saXZpZXIncyB3b3JrKQor
ICogICAgICAgSmVzcGVyIFN0ZWVuIE1vZWxsZXIgLSBDb250cmlidXRpb25zIGZvcjoKKyAqICAg
ICAgICAgICAgICAgICAgICAgICAgICBCdWcgNDA2OTczIC0gW2NvbXBpbGVyXSBQYXJzZSBNZXRo
b2RQYXJhbWV0ZXJzIGF0dHJpYnV0ZQogICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCiBwYWNrYWdl
IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLnV0aWw7CiAKQEAgLTk1LDYgKzk3LDkgQEAg
cHVibGljIGNsYXNzIERpc2Fzc2VtYmxlciBleHRlbmRzIENsYXNzRmlsZUJ5dGVzRGlzYXNzZW1i
bGVyIHsKIAkJCQljYXNlIElNb2RpZmllckNvbnN0YW50cy5BQ0NfRU5VTSA6CiAJCQkJCWZpcnN0
TW9kaWZpZXIgPSBhcHBlbmRNb2RpZmllcihidWZmZXIsIGFjY2Vzc0ZsYWdzLCBJTW9kaWZpZXJD
b25zdGFudHMuQUNDX0VOVU0sICJlbnVtIiwgZmlyc3RNb2RpZmllcik7IC8vJE5PTi1OTFMtMSQK
IAkJCQkJYnJlYWs7CisJCQkJY2FzZSBJTW9kaWZpZXJDb25zdGFudHMuQUNDX01BTkRBVEVEIDoK
KwkJCQkJZmlyc3RNb2RpZmllciA9IGFwcGVuZE1vZGlmaWVyKGJ1ZmZlciwgYWNjZXNzRmxhZ3Ms
IElNb2RpZmllckNvbnN0YW50cy5BQ0NfTUFOREFURUQsICJtYW5kYXRlZCIsIGZpcnN0TW9kaWZp
ZXIpOyAvLyROT04tTkxTLTEkCisJCQkJCWJyZWFrOwogCQkJfQogCQl9CiAJCWlmICghZmlyc3RN
b2RpZmllcikgewpAQCAtMTU2LDYgKzE2MSwxNCBAQCBwdWJsaWMgY2xhc3MgRGlzYXNzZW1ibGVy
IGV4dGVuZHMgQ2xhc3NGaWxlQnl0ZXNEaXNhc3NlbWJsZXIgewogCQl9KTsKIAl9CiAKKwlwcml2
YXRlIGZpbmFsIHZvaWQgZGVjb2RlTW9kaWZpZXJzRm9yTWV0aG9kUGFyYW1ldGVycyhTdHJpbmdC
dWZmZXIgYnVmZmVyLCBpbnQgYWNjZXNzRmxhZ3MpIHsKKwkJZGVjb2RlTW9kaWZpZXJzKGJ1ZmZl
ciwgYWNjZXNzRmxhZ3MsIGZhbHNlLCB0cnVlLCBuZXcgaW50W10geworCQkJCUlNb2RpZmllckNv
bnN0YW50cy5BQ0NfRklOQUwsCisJCQkJSU1vZGlmaWVyQ29uc3RhbnRzLkFDQ19NQU5EQVRFRCwK
KwkJCQlJTW9kaWZpZXJDb25zdGFudHMuQUNDX1NZTlRIRVRJQywKKwkJfSk7CisJfQorCiAJcHJp
dmF0ZSBmaW5hbCB2b2lkIGRlY29kZU1vZGlmaWVyc0ZvclR5cGUoU3RyaW5nQnVmZmVyIGJ1ZmZl
ciwgaW50IGFjY2Vzc0ZsYWdzKSB7CiAJCWRlY29kZU1vZGlmaWVycyhidWZmZXIsIGFjY2Vzc0Zs
YWdzLCBuZXcgaW50W10gewogCQkJCUlNb2RpZmllckNvbnN0YW50cy5BQ0NfUFVCTElDLApAQCAt
NTc3LDkgKzU5MCwyMiBAQCBwdWJsaWMgY2xhc3MgRGlzYXNzZW1ibGVyIGV4dGVuZHMgQ2xhc3NG
aWxlQnl0ZXNEaXNhc3NlbWJsZXIgewogCQkJfSkpOwogCX0KIAorCXByaXZhdGUgdm9pZCBkaXNh
c3NlbWJsZShJTWV0aG9kUGFyYW1ldGVyc0F0dHJpYnV0ZSBtZXRob2RQYXJhbWV0ZXJzQXR0cmli
dXRlLCBTdHJpbmdCdWZmZXIgYnVmZmVyLCBTdHJpbmcgbGluZVNlcGFyYXRvciwgaW50IHRhYk51
bWJlciwgaW50IG1vZGUpIHsKKwkJdGFiTnVtYmVyICs9IDI7CisJCXdyaXRlTmV3TGluZShidWZm
ZXIsIGxpbmVTZXBhcmF0b3IsIHRhYk51bWJlcik7CisJCWJ1ZmZlci5hcHBlbmQoTWVzc2FnZXMu
ZGlzYXNzZW1ibGVyX21ldGhvZHBhcmFtZXRlcnNoZWFkZXIpOworCQlmb3IgKGludCBpID0gMDsg
aSA8IG1ldGhvZFBhcmFtZXRlcnNBdHRyaWJ1dGUuZ2V0TWV0aG9kUGFyYW1ldGVyTGVuZ3RoKCk7
ICsraSkgeworCQkJd3JpdGVOZXdMaW5lKGJ1ZmZlciwgbGluZVNlcGFyYXRvciwgdGFiTnVtYmVy
ICsgMSk7CisJCQlzaG9ydCBhY2Nlc3NGbGFncyA9IG1ldGhvZFBhcmFtZXRlcnNBdHRyaWJ1dGUu
Z2V0QWNjZXNzRmxhZ3MoaSk7CisJCQlkZWNvZGVNb2RpZmllcnNGb3JNZXRob2RQYXJhbWV0ZXJz
KGJ1ZmZlciwgYWNjZXNzRmxhZ3MpOworCQkJYnVmZmVyLmFwcGVuZChtZXRob2RQYXJhbWV0ZXJz
QXR0cmlidXRlLmdldFBhcmFtZXRlck5hbWUoaSkpOworCQl9CisJfQorCiAJcHJpdmF0ZSB2b2lk
IGRpc2Fzc2VtYmxlRW51bUNvbnN0cnVjdG9yKElDbGFzc0ZpbGVSZWFkZXIgY2xhc3NGaWxlUmVh
ZGVyLCBjaGFyW10gY2xhc3NOYW1lLCBJTWV0aG9kSW5mbyBtZXRob2RJbmZvLCBTdHJpbmdCdWZm
ZXIgYnVmZmVyLCBTdHJpbmcgbGluZVNlcGFyYXRvciwgaW50IHRhYk51bWJlciwgaW50IG1vZGUp
IHsKIAkJd3JpdGVOZXdMaW5lKGJ1ZmZlciwgbGluZVNlcGFyYXRvciwgdGFiTnVtYmVyKTsKIAkJ
ZmluYWwgSUNvZGVBdHRyaWJ1dGUgY29kZUF0dHJpYnV0ZSA9IG1ldGhvZEluZm8uZ2V0Q29kZUF0
dHJpYnV0ZSgpOworCQlJTWV0aG9kUGFyYW1ldGVyc0F0dHJpYnV0ZSBtZXRob2RQYXJhbWV0ZXJz
QXR0cmlidXRlID0gKElNZXRob2RQYXJhbWV0ZXJzQXR0cmlidXRlKSBVdGlsLmdldEF0dHJpYnV0
ZShtZXRob2RJbmZvLCBJQXR0cmlidXRlTmFtZXNDb25zdGFudHMuTUVUSE9EX1BBUkFNRVRFUlMp
OwogCQljaGFyW10gbWV0aG9kRGVzY3JpcHRvciA9IG1ldGhvZEluZm8uZ2V0RGVzY3JpcHRvcigp
OwogCQlmaW5hbCBJQ2xhc3NGaWxlQXR0cmlidXRlIHJ1bnRpbWVWaXNpYmxlQW5ub3RhdGlvbnNB
dHRyaWJ1dGUgPSBVdGlsLmdldEF0dHJpYnV0ZShtZXRob2RJbmZvLCBJQXR0cmlidXRlTmFtZXND
b25zdGFudHMuUlVOVElNRV9WSVNJQkxFX0FOTk9UQVRJT05TKTsKIAkJZmluYWwgSUNsYXNzRmls
ZUF0dHJpYnV0ZSBydW50aW1lSW52aXNpYmxlQW5ub3RhdGlvbnNBdHRyaWJ1dGUgPSBVdGlsLmdl
dEF0dHJpYnV0ZShtZXRob2RJbmZvLCBJQXR0cmlidXRlTmFtZXNDb25zdGFudHMuUlVOVElNRV9J
TlZJU0lCTEVfQU5OT1RBVElPTlMpOwpAQCAtNTk2LDcgKzYyMiw3IEBAIHB1YmxpYyBjbGFzcyBE
aXNhc3NlbWJsZXIgZXh0ZW5kcyBDbGFzc0ZpbGVCeXRlc0Rpc2Fzc2VtYmxlciB7CiAJCWRlY29k
ZU1vZGlmaWVyc0Zvck1ldGhvZChidWZmZXIsIGFjY2Vzc0ZsYWdzICYgSU1vZGlmaWVyQ29uc3Rh
bnRzLkFDQ19QUklWQVRFKTsKIAkJQ2hhck9wZXJhdGlvbi5yZXBsYWNlKG1ldGhvZERlc2NyaXB0
b3IsICcvJywgJy4nKTsKIAkJZmluYWwgYm9vbGVhbiBpc1ZhckFyZ3MgPSAoYWNjZXNzRmxhZ3Mg
JiBJTW9kaWZpZXJDb25zdGFudHMuQUNDX1ZBUkFSR1MpICE9IDA7Ci0JCWZpbmFsIGNoYXJbXSBz
aWduYXR1cmUgPSBTaWduYXR1cmUudG9DaGFyQXJyYXkobWV0aG9kRGVzY3JpcHRvciwgcmV0dXJu
Q2xhc3NOYW1lKGNsYXNzTmFtZSwgJy4nLCBDT01QQUNUKSwgZ2V0UGFyYW1ldGVyTmFtZXMobWV0
aG9kRGVzY3JpcHRvciwgY29kZUF0dHJpYnV0ZSwgYWNjZXNzRmxhZ3MpICwgIWNoZWNrTW9kZSht
b2RlLCBDT01QQUNUKSwgZmFsc2UsIGlzVmFyQXJncyk7CisJCWZpbmFsIGNoYXJbXSBzaWduYXR1
cmUgPSBTaWduYXR1cmUudG9DaGFyQXJyYXkobWV0aG9kRGVzY3JpcHRvciwgcmV0dXJuQ2xhc3NO
YW1lKGNsYXNzTmFtZSwgJy4nLCBDT01QQUNUKSwgZ2V0UGFyYW1ldGVyTmFtZXMobWV0aG9kRGVz
Y3JpcHRvciwgY29kZUF0dHJpYnV0ZSwgbWV0aG9kUGFyYW1ldGVyc0F0dHJpYnV0ZSwgYWNjZXNz
RmxhZ3MpICwgIWNoZWNrTW9kZShtb2RlLCBDT01QQUNUKSwgZmFsc2UsIGlzVmFyQXJncyk7CiAJ
CWludCBpbmRleCA9IENoYXJPcGVyYXRpb24uaW5kZXhPZignLCcsIHNpZ25hdHVyZSk7CiAJCWlu
ZGV4ID0gQ2hhck9wZXJhdGlvbi5pbmRleE9mKCcsJywgc2lnbmF0dXJlLCBpbmRleCArIDEpOwog
CQlidWZmZXIuYXBwZW5kKHNpZ25hdHVyZSwgMCwgQ2hhck9wZXJhdGlvbi5pbmRleE9mKCcoJywg
c2lnbmF0dXJlKSArIDEpOwpAQCAtNjY5LDYgKzY5NSw3IEBAIHB1YmxpYyBjbGFzcyBEaXNhc3Nl
bWJsZXIgZXh0ZW5kcyBDbGFzc0ZpbGVCeXRlc0Rpc2Fzc2VtYmxlciB7CiAJCWZpbmFsIElDbGFz
c0ZpbGVBdHRyaWJ1dGUgcnVudGltZUludmlzaWJsZVR5cGVBbm5vdGF0aW9uc0F0dHJpYnV0ZSA9
IFV0aWwuZ2V0QXR0cmlidXRlKG1ldGhvZEluZm8sIElBdHRyaWJ1dGVOYW1lc0NvbnN0YW50cy5S
VU5USU1FX0lOVklTSUJMRV9UWVBFX0FOTk9UQVRJT05TKTsKIAkJZmluYWwgSUNsYXNzRmlsZUF0
dHJpYnV0ZSBydW50aW1lVmlzaWJsZVBhcmFtZXRlckFubm90YXRpb25zQXR0cmlidXRlID0gVXRp
bC5nZXRBdHRyaWJ1dGUobWV0aG9kSW5mbywgSUF0dHJpYnV0ZU5hbWVzQ29uc3RhbnRzLlJVTlRJ
TUVfVklTSUJMRV9QQVJBTUVURVJfQU5OT1RBVElPTlMpOwogCQlmaW5hbCBJQ2xhc3NGaWxlQXR0
cmlidXRlIHJ1bnRpbWVJbnZpc2libGVQYXJhbWV0ZXJBbm5vdGF0aW9uc0F0dHJpYnV0ZSA9IFV0
aWwuZ2V0QXR0cmlidXRlKG1ldGhvZEluZm8sIElBdHRyaWJ1dGVOYW1lc0NvbnN0YW50cy5SVU5U
SU1FX0lOVklTSUJMRV9QQVJBTUVURVJfQU5OT1RBVElPTlMpOworCQlmaW5hbCBJQ2xhc3NGaWxl
QXR0cmlidXRlIG1ldGhvZFBhcmFtZXRlcnNBdHRyaWJ1dGUgPSBVdGlsLmdldEF0dHJpYnV0ZSht
ZXRob2RJbmZvLCBJQXR0cmlidXRlTmFtZXNDb25zdGFudHMuTUVUSE9EX1BBUkFNRVRFUlMpOwog
CQlmaW5hbCBJQ2xhc3NGaWxlQXR0cmlidXRlIGFubm90YXRpb25EZWZhdWx0QXR0cmlidXRlID0g
VXRpbC5nZXRBdHRyaWJ1dGUobWV0aG9kSW5mbywgSUF0dHJpYnV0ZU5hbWVzQ29uc3RhbnRzLkFO
Tk9UQVRJT05fREVGQVVMVCk7CiAJCWlmIChjaGVja01vZGUobW9kZSwgU1lTVEVNIHwgREVUQUlM
RUQpKSB7CiAJCQlidWZmZXIuYXBwZW5kKE1lc3NhZ2VzLmJpbmQoTWVzc2FnZXMuY2xhc3NmaWxl
Zm9ybWF0X21ldGhvZGRlc2NyaXB0b3IsCkBAIC03MTUsNyArNzQyLDcgQEAgcHVibGljIGNsYXNz
IERpc2Fzc2VtYmxlciBleHRlbmRzIENsYXNzRmlsZUJ5dGVzRGlzYXNzZW1ibGVyIHsKIAkJY2hh
cltdIG1ldGhvZEhlYWRlciA9IG51bGw7CiAJCWNoYXJbXVtdIHBhcmFtZXRlck5hbWVzID0gbnVs
bDsKIAkJaWYgKCFtZXRob2RJbmZvLmlzQ2xpbml0KCkpIHsKLQkJCXBhcmFtZXRlck5hbWVzID0g
Z2V0UGFyYW1ldGVyTmFtZXMobWV0aG9kRGVzY3JpcHRvciwgY29kZUF0dHJpYnV0ZSwgYWNjZXNz
RmxhZ3MpOworCQkJcGFyYW1ldGVyTmFtZXMgPSBnZXRQYXJhbWV0ZXJOYW1lcyhtZXRob2REZXNj
cmlwdG9yLCBjb2RlQXR0cmlidXRlLCAoSU1ldGhvZFBhcmFtZXRlcnNBdHRyaWJ1dGUpbWV0aG9k
UGFyYW1ldGVyc0F0dHJpYnV0ZSwgYWNjZXNzRmxhZ3MpOwogCQl9CiAJCWlmIChtZXRob2RJbmZv
LmlzQ29uc3RydWN0b3IoKSkgewogCQkJaWYgKGNoZWNrTW9kZShtb2RlLCBXT1JLSU5HX0NPUFkp
ICYmIHNpZ25hdHVyZUF0dHJpYnV0ZSAhPSBudWxsKSB7CkBAIC04NzUsNiArOTAyLDExIEBAIHB1
YmxpYyBjbGFzcyBEaXNhc3NlbWJsZXIgZXh0ZW5kcyBDbGFzc0ZpbGVCeXRlc0Rpc2Fzc2VtYmxl
ciB7CiAJCQkJZGlzYXNzZW1ibGUoY29kZUF0dHJpYnV0ZSwgcGFyYW1ldGVyTmFtZXMsIG1ldGhv
ZERlc2NyaXB0b3IsIChhY2Nlc3NGbGFncyAmIElNb2RpZmllckNvbnN0YW50cy5BQ0NfU1RBVElD
KSAhPSAwLCBidWZmZXIsIGxpbmVTZXBhcmF0b3IsIHRhYk51bWJlciwgbW9kZSk7CiAJCQl9CiAJ
CX0KKwkJaWYgKGNoZWNrTW9kZShtb2RlLCBTWVNURU0gfCBERVRBSUxFRCkpIHsKKwkJCWlmICht
ZXRob2RQYXJhbWV0ZXJzQXR0cmlidXRlICE9IG51bGwpIHsKKwkJCQlkaXNhc3NlbWJsZSgoSU1l
dGhvZFBhcmFtZXRlcnNBdHRyaWJ1dGUpbWV0aG9kUGFyYW1ldGVyc0F0dHJpYnV0ZSwgYnVmZmVy
LCBsaW5lU2VwYXJhdG9yLCB0YWJOdW1iZXIsIG1vZGUpOworCQkJfQorCQl9CiAJCWlmIChjaGVj
a01vZGUobW9kZSwgU1lTVEVNKSkgewogCQkJSUNsYXNzRmlsZUF0dHJpYnV0ZVtdIGF0dHJpYnV0
ZXMgPSBtZXRob2RJbmZvLmdldEF0dHJpYnV0ZXMoKTsKIAkJCWludCBsZW5ndGggPSBhdHRyaWJ1
dGVzLmxlbmd0aDsKQEAgLTg5MSw2ICs5MjMsNyBAQCBwdWJsaWMgY2xhc3MgRGlzYXNzZW1ibGVy
IGV4dGVuZHMgQ2xhc3NGaWxlQnl0ZXNEaXNhc3NlbWJsZXIgewogCQkJCQkJCSYmIGF0dHJpYnV0
ZSAhPSBydW50aW1lVmlzaWJsZVR5cGVBbm5vdGF0aW9uc0F0dHJpYnV0ZQogCQkJCQkJCSYmIGF0
dHJpYnV0ZSAhPSBydW50aW1lSW52aXNpYmxlUGFyYW1ldGVyQW5ub3RhdGlvbnNBdHRyaWJ1dGUK
IAkJCQkJCQkmJiBhdHRyaWJ1dGUgIT0gcnVudGltZVZpc2libGVQYXJhbWV0ZXJBbm5vdGF0aW9u
c0F0dHJpYnV0ZQorCQkJCQkJCSYmIGF0dHJpYnV0ZSAhPSBtZXRob2RQYXJhbWV0ZXJzQXR0cmli
dXRlCiAJCQkJCQkJJiYgIUNoYXJPcGVyYXRpb24uZXF1YWxzKGF0dHJpYnV0ZS5nZXRBdHRyaWJ1
dGVOYW1lKCksIElBdHRyaWJ1dGVOYW1lc0NvbnN0YW50cy5ERVBSRUNBVEVEKQogCQkJCQkJCSYm
ICFDaGFyT3BlcmF0aW9uLmVxdWFscyhhdHRyaWJ1dGUuZ2V0QXR0cmlidXRlTmFtZSgpLCBJQXR0
cmlidXRlTmFtZXNDb25zdGFudHMuU1lOVEhFVElDKSkgewogCQkJCQkJZGlzYXNzZW1ibGUoYXR0
cmlidXRlLCBidWZmZXIsIGxpbmVTZXBhcmF0b3IsIHRhYk51bWJlciwgbW9kZSk7CkBAIC0yNDAy
LDI4ICsyNDM1LDM3IEBAIHB1YmxpYyBjbGFzcyBEaXNhc3NlbWJsZXIgZXh0ZW5kcyBDbGFzc0Zp
bGVCeXRlc0Rpc2Fzc2VtYmxlciB7CiAJCXJldHVybiBudWxsOwogCX0KIAotCXByaXZhdGUgY2hh
cltdW10gZ2V0UGFyYW1ldGVyTmFtZXMoY2hhcltdIG1ldGhvZERlc2NyaXB0b3IsIElDb2RlQXR0
cmlidXRlIGNvZGVBdHRyaWJ1dGUsIGludCBhY2Nlc3NGbGFncykgeworCXByaXZhdGUgY2hhcltd
W10gZ2V0UGFyYW1ldGVyTmFtZXMoY2hhcltdIG1ldGhvZERlc2NyaXB0b3IsIElDb2RlQXR0cmli
dXRlIGNvZGVBdHRyaWJ1dGUsIElNZXRob2RQYXJhbWV0ZXJzQXR0cmlidXRlIHBhcmFtZXRlcnNB
dHRyaWJ1dGUsIGludCBhY2Nlc3NGbGFncykgewogCQlpbnQgcGFyYW1Db3VudCA9IFNpZ25hdHVy
ZS5nZXRQYXJhbWV0ZXJDb3VudChtZXRob2REZXNjcmlwdG9yKTsKIAkJY2hhcltdW10gcGFyYW1l
dGVyTmFtZXMgPSBuZXcgY2hhcltwYXJhbUNvdW50XVtdOwogCQkvLyBjaGVjayBpZiB0aGUgY29k
ZSBhdHRyaWJ1dGUgaGFzIGRlYnVnIGluZm8gZm9yIHRoaXMgbWV0aG9kCi0JCWlmIChjb2RlQXR0
cmlidXRlICE9IG51bGwpIHsKLQkJCUlMb2NhbFZhcmlhYmxlQXR0cmlidXRlIGxvY2FsVmFyaWFi
bGVBdHRyaWJ1dGUgPSBjb2RlQXR0cmlidXRlLmdldExvY2FsVmFyaWFibGVBdHRyaWJ1dGUoKTsK
LQkJCWlmIChsb2NhbFZhcmlhYmxlQXR0cmlidXRlICE9IG51bGwpIHsKLQkJCQlJTG9jYWxWYXJp
YWJsZVRhYmxlRW50cnlbXSBlbnRyaWVzID0gbG9jYWxWYXJpYWJsZUF0dHJpYnV0ZS5nZXRMb2Nh
bFZhcmlhYmxlVGFibGUoKTsKLQkJCQlmaW5hbCBpbnQgc3RhcnRpbmdJbmRleCA9IChhY2Nlc3NG
bGFncyAmIElNb2RpZmllckNvbnN0YW50cy5BQ0NfU1RBVElDKSAhPSAwID8gMCA6IDE7Ci0JCQkJ
Zm9yIChpbnQgaSA9IDA7IGkgPCBwYXJhbUNvdW50OyBpKyspIHsKLQkJCQkJSUxvY2FsVmFyaWFi
bGVUYWJsZUVudHJ5IHNlYXJjaGVkRW50cnkgPSBnZXRFbnRyeUZvcihnZXRMb2NhbEluZGV4KHN0
YXJ0aW5nSW5kZXgsIGksIG1ldGhvZERlc2NyaXB0b3IpLCBlbnRyaWVzKTsKLQkJCQkJaWYgKHNl
YXJjaGVkRW50cnkgIT0gbnVsbCkgewotCQkJCQkJcGFyYW1ldGVyTmFtZXNbaV0gPSBzZWFyY2hl
ZEVudHJ5LmdldE5hbWUoKTsKLQkJCQkJfSBlbHNlIHsKLQkJCQkJCXBhcmFtZXRlck5hbWVzW2ld
ID0gQ2hhck9wZXJhdGlvbi5jb25jYXQoTWVzc2FnZXMuZGlzYXNzZW1ibGVyX3BhcmFtZXRlcm5h
bWUudG9DaGFyQXJyYXkoKSwgSW50ZWdlci50b1N0cmluZyhpKS50b0NoYXJBcnJheSgpKTsKLQkJ
CQkJfQotCQkJCX0KLQkJCX0gZWxzZSB7Ci0JCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBwYXJhbUNv
dW50OyBpKyspIHsKKwkJaWYgKHBhcmFtZXRlcnNBdHRyaWJ1dGUgIT0gbnVsbCkgeworCQkJaW50
IHBhcmFtZXRlckNvdW50ID0gcGFyYW1ldGVyc0F0dHJpYnV0ZS5nZXRNZXRob2RQYXJhbWV0ZXJM
ZW5ndGgoKTsKKwkJCWZvciAoaW50IGkgPSAwOyBpIDwgcGFyYW1Db3VudDsgaSsrKSB7CisJCQkJ
aWYgKGkgPCBwYXJhbWV0ZXJDb3VudCAmJiBwYXJhbWV0ZXJzQXR0cmlidXRlLmdldFBhcmFtZXRl
ck5hbWUoaSkgIT0gbnVsbCkgeworCQkJCQlwYXJhbWV0ZXJOYW1lc1tpXSA9IHBhcmFtZXRlcnNB
dHRyaWJ1dGUuZ2V0UGFyYW1ldGVyTmFtZShpKTsKKwkJCQl9IGVsc2UgewogCQkJCQlwYXJhbWV0
ZXJOYW1lc1tpXSA9IENoYXJPcGVyYXRpb24uY29uY2F0KE1lc3NhZ2VzLmRpc2Fzc2VtYmxlcl9w
YXJhbWV0ZXJuYW1lLnRvQ2hhckFycmF5KCksIEludGVnZXIudG9TdHJpbmcoaSkudG9DaGFyQXJy
YXkoKSk7CiAJCQkJfQogCQkJfQorCQl9IGVsc2UgaWYgKGNvZGVBdHRyaWJ1dGUgIT0gbnVsbCkg
eworCQkJCUlMb2NhbFZhcmlhYmxlQXR0cmlidXRlIGxvY2FsVmFyaWFibGVBdHRyaWJ1dGUgPSBj
b2RlQXR0cmlidXRlLmdldExvY2FsVmFyaWFibGVBdHRyaWJ1dGUoKTsKKwkJCQlpZiAobG9jYWxW
YXJpYWJsZUF0dHJpYnV0ZSAhPSBudWxsKSB7CisJCQkJCUlMb2NhbFZhcmlhYmxlVGFibGVFbnRy
eVtdIGVudHJpZXMgPSBsb2NhbFZhcmlhYmxlQXR0cmlidXRlLmdldExvY2FsVmFyaWFibGVUYWJs
ZSgpOworCQkJCQlmaW5hbCBpbnQgc3RhcnRpbmdJbmRleCA9IChhY2Nlc3NGbGFncyAmIElNb2Rp
ZmllckNvbnN0YW50cy5BQ0NfU1RBVElDKSAhPSAwID8gMCA6IDE7CisJCQkJCWZvciAoaW50IGkg
PSAwOyBpIDwgcGFyYW1Db3VudDsgaSsrKSB7CisJCQkJCQlJTG9jYWxWYXJpYWJsZVRhYmxlRW50
cnkgc2VhcmNoZWRFbnRyeSA9IGdldEVudHJ5Rm9yKGdldExvY2FsSW5kZXgoc3RhcnRpbmdJbmRl
eCwgaSwgbWV0aG9kRGVzY3JpcHRvciksIGVudHJpZXMpOworCQkJCQkJaWYgKHNlYXJjaGVkRW50
cnkgIT0gbnVsbCkgeworCQkJCQkJCXBhcmFtZXRlck5hbWVzW2ldID0gc2VhcmNoZWRFbnRyeS5n
ZXROYW1lKCk7CisJCQkJCQl9IGVsc2UgeworCQkJCQkJCXBhcmFtZXRlck5hbWVzW2ldID0gQ2hh
ck9wZXJhdGlvbi5jb25jYXQoTWVzc2FnZXMuZGlzYXNzZW1ibGVyX3BhcmFtZXRlcm5hbWUudG9D
aGFyQXJyYXkoKSwgSW50ZWdlci50b1N0cmluZyhpKS50b0NoYXJBcnJheSgpKTsKKwkJCQkJCX0K
KwkJCQkJfQorCQkJCX0gZWxzZSB7CisJCQkJCWZvciAoaW50IGkgPSAwOyBpIDwgcGFyYW1Db3Vu
dDsgaSsrKSB7CisJCQkJCQlwYXJhbWV0ZXJOYW1lc1tpXSA9IENoYXJPcGVyYXRpb24uY29uY2F0
KE1lc3NhZ2VzLmRpc2Fzc2VtYmxlcl9wYXJhbWV0ZXJuYW1lLnRvQ2hhckFycmF5KCksIEludGVn
ZXIudG9TdHJpbmcoaSkudG9DaGFyQXJyYXkoKSk7CisJCQkJCX0KKwkJCQl9CiAJCX0gZWxzZSB7
CiAJCQlmb3IgKGludCBpID0gMDsgaSA8IHBhcmFtQ291bnQ7IGkrKykgewogCQkJCXBhcmFtZXRl
ck5hbWVzW2ldID0gQ2hhck9wZXJhdGlvbi5jb25jYXQoTWVzc2FnZXMuZGlzYXNzZW1ibGVyX3Bh
cmFtZXRlcm5hbWUudG9DaGFyQXJyYXkoKSwgSW50ZWdlci50b1N0cmluZyhpKS50b0NoYXJBcnJh
eSgpKTsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb3JlL3V0aWwvTWVzc2FnZXMuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3V0aWwvTWVzc2FnZXMuamF2
YQppbmRleCAyZGUzMzYyLi40MjA3Y2JjIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS91dGlsL01lc3NhZ2VzLmphdmEK
KysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvcmUvdXRpbC9NZXNzYWdlcy5qYXZhCkBAIC0xMyw2ICsxMyw4IEBACiAgKiAgICAgSUJNIENv
cnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCiAgKiAgICAgICAgQW5k
eSBDbGVtZW50IChHb1Bpdm90YWwsIEluYykgYWNsZW1lbnRAZ29waXZvdGFsLmNvbSAtIENvbnRy
aWJ1dGlvbnMgZm9yCiAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgQnVnIDM4MzYyNCAtIFsx
LjhdW2NvbXBpbGVyXSBSZXZpdmUgY29kZSBnZW5lcmF0aW9uIHN1cHBvcnQgZm9yIHR5cGUgYW5u
b3RhdGlvbnMgKGZyb20gT2xpdmllcidzIHdvcmspCisgKiAgICAgSmVzcGVyIFN0ZWVuIE1vZWxs
ZXIgLSBDb250cmlidXRpb24gZm9yCisgKiAgICAgICAgICAgICAgICAgICAgICAgICAgQnVnIDQw
Njk3MyAtIFtjb21waWxlcl0gUGFyc2UgTWV0aG9kUGFyYW1ldGVycyBhdHRyaWJ1dGUKICAqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqLwogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29y
ZS51dGlsOwogCkBAIC0yNTUsNiArMjU3LDcgQEAgcHVibGljIGZpbmFsIGNsYXNzIE1lc3NhZ2Vz
IGV4dGVuZHMgTkxTIHsKIAlwdWJsaWMgc3RhdGljIFN0cmluZyBkaXNhc3NlbWJsZXJfZW5jbG9z
aW5nbWV0aG9kaGVhZGVyOwogCXB1YmxpYyBzdGF0aWMgU3RyaW5nIGRpc2Fzc2VtYmxlcl9leGNl
cHRpb250YWJsZWhlYWRlcjsKIAlwdWJsaWMgc3RhdGljIFN0cmluZyBkaXNhc3NlbWJsZXJfbGlu
ZW51bWJlcmF0dHJpYnV0ZWhlYWRlcjsKKwlwdWJsaWMgc3RhdGljIFN0cmluZyBkaXNhc3NlbWJs
ZXJfbWV0aG9kcGFyYW1ldGVyc2hlYWRlcjsKIAlwdWJsaWMgc3RhdGljIFN0cmluZyBkaXNhc3Nl
bWJsZXJfbG9jYWx2YXJpYWJsZXRhYmxlYXR0cmlidXRlaGVhZGVyOwogCXB1YmxpYyBzdGF0aWMg
U3RyaW5nIGRpc2Fzc2VtYmxlcl9sb2NhbHZhcmlhYmxldHlwZXRhYmxlYXR0cmlidXRlaGVhZGVy
OwogCXB1YmxpYyBzdGF0aWMgU3RyaW5nIGRpc2Fzc2VtYmxlcl9hcnJheWRpbWVuc2lvbnM7CmRp
ZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29yZS91dGlsL01ldGhvZEluZm8uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21v
ZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3V0aWwvTWV0aG9kSW5mby5qYXZhCmlu
ZGV4IDcxYmY3ODIuLjBiM2MzYjAgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21v
ZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3V0aWwvTWV0aG9kSW5mby5qYXZhCisr
KyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b3JlL3V0aWwvTWV0aG9kSW5mby5qYXZhCkBAIC0xMyw2ICsxMyw4IEBACiAgKiAgICAgSUJNIENv
cnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCiAgKiAgICAgICAgQW5k
eSBDbGVtZW50IC0gQ29udHJpYnV0aW9ucyBmb3IKICAqICAgICAgICAgICAgICAgICAgICAgICAg
ICBCdWcgMzgzNjI0IC0gWzEuOF1bY29tcGlsZXJdIFJldml2ZSBjb2RlIGdlbmVyYXRpb24gc3Vw
cG9ydCBmb3IgdHlwZSBhbm5vdGF0aW9ucyAoZnJvbSBPbGl2aWVyJ3Mgd29yaykKKyAqICAgICAg
ICBKZXNwZXIgU3RlZW4gTW9lbGxlciAtIENvbnRyaWJ1dGlvbiBmb3IKKyAqICAgICAgICAgICAg
ICAgICAgICAgICAgICBCdWcgNDA2OTczIC0gW2NvbXBpbGVyXSBQYXJzZSBNZXRob2RQYXJhbWV0
ZXJzIGF0dHJpYnV0ZQogICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCiBwYWNrYWdlIG9yZy5lY2xp
cHNlLmpkdC5pbnRlcm5hbC5jb3JlLnV0aWw7CiAKQEAgLTEyNCw2ICsxMjYsOCBAQCBwdWJsaWMg
Y2xhc3MgTWV0aG9kSW5mbyBleHRlbmRzIENsYXNzRmlsZVN0cnVjdCBpbXBsZW1lbnRzIElNZXRo
b2RJbmZvIHsKIAkJCQl0aGlzLmF0dHJpYnV0ZXNbYXR0cmlidXRlc0luZGV4KytdID0gbmV3IFJ1
bnRpbWVWaXNpYmxlVHlwZUFubm90YXRpb25zQXR0cmlidXRlKGNsYXNzRmlsZUJ5dGVzLCBjb25z
dGFudFBvb2wsIG9mZnNldCArIHJlYWRPZmZzZXQpOwogCQkJfSBlbHNlIGlmIChlcXVhbHMoYXR0
cmlidXRlTmFtZSwgSUF0dHJpYnV0ZU5hbWVzQ29uc3RhbnRzLlJVTlRJTUVfSU5WSVNJQkxFX1RZ
UEVfQU5OT1RBVElPTlMpKSB7CiAJCQkJdGhpcy5hdHRyaWJ1dGVzW2F0dHJpYnV0ZXNJbmRleCsr
XSA9IG5ldyBSdW50aW1lSW52aXNpYmxlVHlwZUFubm90YXRpb25zQXR0cmlidXRlKGNsYXNzRmls
ZUJ5dGVzLCBjb25zdGFudFBvb2wsIG9mZnNldCArIHJlYWRPZmZzZXQpOworCQkJfSBlbHNlIGlm
IChlcXVhbHMoYXR0cmlidXRlTmFtZSwgSUF0dHJpYnV0ZU5hbWVzQ29uc3RhbnRzLk1FVEhPRF9Q
QVJBTUVURVJTKSkgeworCQkJCXRoaXMuYXR0cmlidXRlc1thdHRyaWJ1dGVzSW5kZXgrK10gPSBu
ZXcgTWV0aG9kUGFyYW1ldGVyc0F0dHJpYnV0ZShjbGFzc0ZpbGVCeXRlcywgY29uc3RhbnRQb29s
LCBvZmZzZXQgKyByZWFkT2Zmc2V0KTsKIAkJCX0gZWxzZSB7CiAJCQkJdGhpcy5hdHRyaWJ1dGVz
W2F0dHJpYnV0ZXNJbmRleCsrXSA9IG5ldyBDbGFzc0ZpbGVBdHRyaWJ1dGUoY2xhc3NGaWxlQnl0
ZXMsIGNvbnN0YW50UG9vbCwgb2Zmc2V0ICsgcmVhZE9mZnNldCk7CiAJCQl9CmRpZmYgLS1naXQg
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29y
ZS91dGlsL01ldGhvZFBhcmFtZXRlcnNBdHRyaWJ1dGUuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3V0aWwvTWV0aG9kUGFyYW1l
dGVyc0F0dHJpYnV0ZS5qYXZhCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAuLjMx
YWNlZWQKLS0tIC9kZXYvbnVsbAorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS91dGlsL01ldGhvZFBhcmFtZXRlcnNBdHRyaWJ1dGUu
amF2YQpAQCAtMCwwICsxLDg3IEBACisvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgorICogQ29weXJp
Z2h0IChjKSAyMDEzIEplc3BlciBTdGVlbiBNb2VsbGVyIGFuZCBvdGhlcnMuCisgKiBBbGwgcmln
aHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxz
CisgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1
YmxpYyBMaWNlbnNlIHYxLjAKKyAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9u
LCBhbmQgaXMgYXZhaWxhYmxlIGF0CisgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2Vw
bC12MTAuaHRtbAorICogCisgKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGFuIGVhcmx5
LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVyIHRoZSBKYXZhCisgKiBDb21tdW5p
dHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFibGUgZm9yIHRlc3RpbmcgYW5kIGV2
YWx1YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBjb2RlIGlzIG5vdCBjb21wYXRpYmxlIHdp
dGggYW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KKyAqIAorICogQ29udHJpYnV0b3JzOgor
ICogICAgIEplc3BlciBTdGVlbiBNb2VsbGVyIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0
aW9uCisgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KKworcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29yZS51dGlsOworCitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUudXRpbC5D
bGFzc0Zvcm1hdEV4Y2VwdGlvbjsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS51dGlsLklD
b25zdGFudFBvb2w7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUudXRpbC5JQ29uc3RhbnRQ
b29sQ29uc3RhbnQ7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUudXRpbC5JQ29uc3RhbnRQ
b29sRW50cnk7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUudXRpbC5JTWV0aG9kUGFyYW1l
dGVyc0F0dHJpYnV0ZTsKKworLyoqCisgKiBAc2luY2UgMy45IEJFVEFfSkFWQTgKKyAqLworcHVi
bGljIGNsYXNzIE1ldGhvZFBhcmFtZXRlcnNBdHRyaWJ1dGUgZXh0ZW5kcyBDbGFzc0ZpbGVBdHRy
aWJ1dGUgaW1wbGVtZW50cyBJTWV0aG9kUGFyYW1ldGVyc0F0dHJpYnV0ZSB7CisKKwlwcml2YXRl
IHN0YXRpYyBmaW5hbCBjaGFyW11bXSBOT19OQU1FUyA9IG5ldyBjaGFyWzBdW107CisJcHJpdmF0
ZSBzdGF0aWMgZmluYWwgc2hvcnRbXSBOT19BQ0NFU19GTEFHUyA9IG5ldyBzaG9ydFswXTsKKwkK
Kwlwcml2YXRlIGZpbmFsIGludCBudW1iZXJPZkVudHJpZXM7CisJcHJpdmF0ZSBmaW5hbCBjaGFy
W11bXSBuYW1lczsKKwlwcml2YXRlIGZpbmFsIHNob3J0W10gYWNjZXNzRmxhZ3M7CisJCisKKwlN
ZXRob2RQYXJhbWV0ZXJzQXR0cmlidXRlKGJ5dGVbXSBjbGFzc0ZpbGVCeXRlcywgSUNvbnN0YW50
UG9vbCBjb25zdGFudFBvb2wsIGludCBvZmZzZXQpIHRocm93cyBDbGFzc0Zvcm1hdEV4Y2VwdGlv
biB7CisJCXN1cGVyKGNsYXNzRmlsZUJ5dGVzLCBjb25zdGFudFBvb2wsIG9mZnNldCk7CisJCQor
CQlmaW5hbCBpbnQgbGVuZ3RoID0gdTFBdChjbGFzc0ZpbGVCeXRlcywgNiwgb2Zmc2V0KTsKKwkJ
dGhpcy5udW1iZXJPZkVudHJpZXMgPSBsZW5ndGg7CisJCWlmIChsZW5ndGggIT0gMCkgeworCQkJ
aW50IHJlYWRPZmZzZXQgPSBvZmZzZXQgKyA3OworCQkJdGhpcy5uYW1lcyA9IG5ldyBjaGFyW2xl
bmd0aF1bXTsKKwkJCXRoaXMuYWNjZXNzRmxhZ3MgPSBuZXcgc2hvcnRbbGVuZ3RoXTsKKwkJCWZv
ciAoaW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKKwkJCQlpbnQgbmFtZUluZGV4ID0gdTJB
dChjbGFzc0ZpbGVCeXRlcywgMCwgcmVhZE9mZnNldCk7CisJCQkJaW50IG1hc2sgPSB1MkF0KGNs
YXNzRmlsZUJ5dGVzLCAyLCByZWFkT2Zmc2V0KzIpOworCQkJCXJlYWRPZmZzZXQgKz0gNDsKKwkJ
CQlpZiAobmFtZUluZGV4ICE9IDApIHsKKwkJCQkJSUNvbnN0YW50UG9vbEVudHJ5IGNvbnN0YW50
UG9vbEVudHJ5ID0gY29uc3RhbnRQb29sLmRlY29kZUVudHJ5KG5hbWVJbmRleCk7CisJCQkJCWlm
IChjb25zdGFudFBvb2xFbnRyeS5nZXRLaW5kKCkgIT0gSUNvbnN0YW50UG9vbENvbnN0YW50LkNP
TlNUQU5UX1V0ZjgpIHsKKwkJCQkJCXRocm93IG5ldyBDbGFzc0Zvcm1hdEV4Y2VwdGlvbihDbGFz
c0Zvcm1hdEV4Y2VwdGlvbi5JTlZBTElEX0NPTlNUQU5UX1BPT0xfRU5UUlkpOworCQkJCQl9CisJ
CQkJCXRoaXMubmFtZXNbaV0gPSBjb25zdGFudFBvb2xFbnRyeS5nZXRVdGY4VmFsdWUoKTsKKwkJ
CQl9IGVsc2UgeworCQkJCQl0aGlzLm5hbWVzW2ldID0gbnVsbDsKKwkJCQl9CisJCQkJdGhpcy5h
Y2Nlc3NGbGFnc1tpXSA9IChzaG9ydCkgKG1hc2sgJiAweEZGRkYpOworCQkJfQorCQl9IGVsc2Ug
eworCQkJdGhpcy5uYW1lcyA9IE5PX05BTUVTOworCQkJdGhpcy5hY2Nlc3NGbGFncyA9IE5PX0FD
Q0VTX0ZMQUdTOworCQl9CisJfQorCisJLyogKG5vbi1KYXZhZG9jKQorCSAqIEBzZWUgb3JnLmVj
bGlwc2UuamR0LmNvcmUudXRpbC5JTWV0aG9kUGFyYW1ldGVyc0F0dHJpYnV0ZSNnZXRNZXRob2RQ
YXJhbWV0ZXJMZW5ndGgoKQorCSAqLworCXB1YmxpYyBpbnQgZ2V0TWV0aG9kUGFyYW1ldGVyTGVu
Z3RoKCkgeworCQlyZXR1cm4gdGhpcy5udW1iZXJPZkVudHJpZXM7CisJfQorCisJLyogKG5vbi1K
YXZhZG9jKQorCSAqIEBzZWUgb3JnLmVjbGlwc2UuamR0LmNvcmUudXRpbC5JTWV0aG9kUGFyYW1l
dGVyc0F0dHJpYnV0ZSNnZXRQYXJhbWV0ZXJOYW1lKGludCkKKwkgKi8KKwlwdWJsaWMgY2hhcltd
IGdldFBhcmFtZXRlck5hbWUoaW50IGkpIHsKKwkJcmV0dXJuIHRoaXMubmFtZXNbaV07CisJfQor
CisJLyogKG5vbi1KYXZhZG9jKQorCSAqIEBzZWUgb3JnLmVjbGlwc2UuamR0LmNvcmUudXRpbC5J
TWV0aG9kUGFyYW1ldGVyc0F0dHJpYnV0ZSNnZXRBY2Nlc3NGbGFncyhpbnQpCisJICovCisJcHVi
bGljIHNob3J0IGdldEFjY2Vzc0ZsYWdzKGludCBpKSB7CisJCXJldHVybiB0aGlzLmFjY2Vzc0Zs
YWdzW2ldOworCX0KK30KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3V0aWwvbWVzc2FnZXMucHJvcGVydGllcyBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3V0
aWwvbWVzc2FnZXMucHJvcGVydGllcwppbmRleCAzMGZhZDM4Li43NzE1YTdlIDEwMDY0NAotLS0g
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29y
ZS91dGlsL21lc3NhZ2VzLnByb3BlcnRpZXMKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9k
ZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvdXRpbC9tZXNzYWdlcy5wcm9wZXJ0aWVz
CkBAIC0xMyw2ICsxMyw4IEBACiAjICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBh
bmQgaW1wbGVtZW50YXRpb24KICMgICAgICAgIEFuZHkgQ2xlbWVudCAoR29QaXZvdGFsLCBJbmMp
IGFjbGVtZW50QGdvcGl2b3RhbC5jb20gLSBDb250cmlidXRpb25zIGZvcgogIyAgICAgICAgICAg
ICAgICAgICAgICAgICAgQnVnIDM4MzYyNCAtIFsxLjhdW2NvbXBpbGVyXSBSZXZpdmUgY29kZSBn
ZW5lcmF0aW9uIHN1cHBvcnQgZm9yIHR5cGUgYW5ub3RhdGlvbnMgKGZyb20gT2xpdmllcidzIHdv
cmspCisjICAgICAgICBKZXNwZXIgU3RlZW4gTW9lbGxlciAtIENvbnRyaWJ1dGlvbiBmb3IKKyMg
ICAgICAgICAgICAgICAgICAgICAgICAgIEJ1ZyA0MDY5NzMgLSBbY29tcGlsZXJdIFBhcnNlIE1l
dGhvZFBhcmFtZXRlcnMgYXR0cmlidXRlCiAjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjCiAKICMjIyBK
YXZhTW9kZWwgbWVzc2FnZXMuCkBAIC0yNzksNiArMjgxLDcgQEAgZGlzYXNzZW1ibGVyX3NvdXJj
ZWF0dHJpYnV0ZWhlYWRlciA9IENvbXBpbGVkIGZyb21cCiBkaXNhc3NlbWJsZXJfZW5jbG9zaW5n
bWV0aG9kaGVhZGVyID0gRW5jbG9zaW5nIE1ldGhvZDoKIGRpc2Fzc2VtYmxlcl9leGNlcHRpb250
YWJsZWhlYWRlciA9IEV4Y2VwdGlvbiBUYWJsZToKIGRpc2Fzc2VtYmxlcl9saW5lbnVtYmVyYXR0
cmlidXRlaGVhZGVyID0gTGluZSBudW1iZXJzOgorZGlzYXNzZW1ibGVyX21ldGhvZHBhcmFtZXRl
cnNoZWFkZXIgPSBNZXRob2QgUGFyYW1ldGVyczoKIGRpc2Fzc2VtYmxlcl9sb2NhbHZhcmlhYmxl
dGFibGVhdHRyaWJ1dGVoZWFkZXIgPSBMb2NhbCB2YXJpYWJsZSB0YWJsZToKIGRpc2Fzc2VtYmxl
cl9sb2NhbHZhcmlhYmxldHlwZXRhYmxlYXR0cmlidXRlaGVhZGVyID0gTG9jYWwgdmFyaWFibGUg
dHlwZSB0YWJsZToKIGRpc2Fzc2VtYmxlcl9hcnJheWRpbWVuc2lvbnMgPSBbXQo=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>233059</attachid>
            <date>2013-07-03 17:28:00 -0400</date>
            <delta_ts>2013-07-03 17:28:14 -0400</delta_ts>
            <desc>Updated patch following Stephans review</desc>
            <filename>0001-Bug-406973-1.8-Parse-MethodParameters-attribute-from.patch</filename>
            <type>text/plain</type>
            <size>51628</size>
            <attacher name="Jesper Moller">jesper</attacher>
            
              <data encoding="base64">RnJvbSA2ODJkZDY3YTRkNjY0Y2FjZmY1ODY4MTIwZjc2YWIxMTZkNjZiNDlhIE1vbiBTZXAgMTcg
MDA6MDA6MDAgMjAwMQpGcm9tOiA9P1VURi04P3E/SmVzcGVyPTIwU3RlZW49MjBNPUMzPUI4bGxl
cj89IDxqZXNwZXJAc2Vsc2thYmV0Lm9yZz4KRGF0ZTogVGh1LCAyNyBKdW4gMjAxMyAwMDo0Njo1
NyArMDIwMApTdWJqZWN0OiBbUEFUQ0hdIEJ1ZyA0MDY5NzM6IFsxLjhdIFBhcnNlIE1ldGhvZFBh
cmFtZXRlcnMgYXR0cmlidXRlIGZyb20KIGNsYXNzZmlsZXMKCi0tLQogLi4uL3JlZ3Jlc3Npb24v
TWV0aG9kUGFyYW1ldGVyc0F0dHJpYnV0ZVRlc3QuamF2YSAgfCAgMzUwICsrKysrKysrKysrKysr
KysrKysrCiAuLi4vY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1Rlc3RBbGwuamF2YSAg
ICB8ICAgIDMgKwogLi4uL3dvcmtzcGFjZS9QYXJhbWV0ZXJOYW1lcyQxLmNsYXNzICAgICAgICAg
ICAgICAgfCAgQmluIDAgLT4gOTA3IGJ5dGVzCiAuLi4vd29ya3NwYWNlL1BhcmFtZXRlck5hbWVz
JDFMb2NhbC5jbGFzcyAgICAgICAgICB8ICBCaW4gMCAtPiA2NzUgYnl0ZXMKIC4uLi93b3Jrc3Bh
Y2UvUGFyYW1ldGVyTmFtZXMuY2xhc3MgICAgICAgICAgICAgICAgIHwgIEJpbiAwIC0+IDk1NSBi
eXRlcwogLi4uL2pkdC9pbnRlcm5hbC9jb21waWxlci9jbGFzc2ZtdC9NZXRob2RJbmZvLmphdmEg
fCAgIDQyICsrLQogLi4uL2NvbXBpbGVyL2NvZGVnZW4vQXR0cmlidXRlTmFtZXNDb25zdGFudHMu
amF2YSAgfCAgICAzICsKIC4uLi9qZHQvY29yZS91dGlsL0lBdHRyaWJ1dGVOYW1lc0NvbnN0YW50
cy5qYXZhICAgIHwgICAgOCArCiAuLi4vamR0L2NvcmUvdXRpbC9JTWV0aG9kUGFyYW1ldGVyc0F0
dHJpYnV0ZS5qYXZhICB8ICAgNTIgKysrCiAuLi4vZWNsaXBzZS9qZHQvY29yZS91dGlsL0lNb2Rp
ZmllckNvbnN0YW50cy5qYXZhICB8ICAgMTYgKy0KIC4uLi9qZHQvaW50ZXJuYWwvY29yZS91dGls
L0Rpc2Fzc2VtYmxlci5qYXZhICAgICAgIHwgICA4MSArKysrLQogLi4uL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvcmUvdXRpbC9NZXNzYWdlcy5qYXZhICAgfCAgICAzICsKIC4uLi9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb3JlL3V0aWwvTWV0aG9kSW5mby5qYXZhIHwgICAgNCArCiAuLi4vY29yZS91
dGlsL01ldGhvZFBhcmFtZXRlcnNBdHRyaWJ1dGUuamF2YSAgICAgICB8ICAgODcgKysrKysKIC4u
Li9qZHQvaW50ZXJuYWwvY29yZS91dGlsL21lc3NhZ2VzLnByb3BlcnRpZXMgICAgIHwgICAgMyAr
CiAxNSBmaWxlcyBjaGFuZ2VkLCA2MjYgaW5zZXJ0aW9ucygrKSwgMjYgZGVsZXRpb25zKC0pCiBj
cmVhdGUgbW9kZSAxMDA2NDQgb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3Jj
L29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTWV0aG9kUGFy
YW1ldGVyc0F0dHJpYnV0ZVRlc3QuamF2YQogY3JlYXRlIG1vZGUgMTAwNjQ0IG9yZy5lY2xpcHNl
LmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3dvcmtzcGFjZS9QYXJhbWV0ZXJOYW1lcyQxLmNsYXNz
CiBjcmVhdGUgbW9kZSAxMDA2NDQgb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIv
d29ya3NwYWNlL1BhcmFtZXRlck5hbWVzJDFMb2NhbC5jbGFzcwogY3JlYXRlIG1vZGUgMTAwNjQ0
IG9yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3dvcmtzcGFjZS9QYXJhbWV0ZXJO
YW1lcy5jbGFzcwogY3JlYXRlIG1vZGUgMTAwNjQ0IG9yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVs
L29yZy9lY2xpcHNlL2pkdC9jb3JlL3V0aWwvSU1ldGhvZFBhcmFtZXRlcnNBdHRyaWJ1dGUuamF2
YQogY3JlYXRlIG1vZGUgMTAwNjQ0IG9yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb3JlL3V0aWwvTWV0aG9kUGFyYW1ldGVyc0F0dHJpYnV0ZS5qYXZh
CgpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTWV0aG9kUGFyYW1l
dGVyc0F0dHJpYnV0ZVRlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBp
bGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL01l
dGhvZFBhcmFtZXRlcnNBdHRyaWJ1dGVUZXN0LmphdmEKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5k
ZXggMDAwMDAwMC4uODVhNmVmYwotLS0gL2Rldi9udWxsCisrKyBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxl
ci9yZWdyZXNzaW9uL01ldGhvZFBhcmFtZXRlcnNBdHRyaWJ1dGVUZXN0LmphdmEKQEAgLTAsMCAr
MSwzNTAgQEAKKy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCisgKiBDb3B5cmlnaHQgKGMpIDIwMTMg
SmVzcGVyIFN0ZWVuIE1vZWxsZXIgYW5kIG90aGVycy4KKyAqIEFsbCByaWdodHMgcmVzZXJ2ZWQu
IFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKKyAqIGFyZSBtYWRl
IGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2Ug
djEuMAorICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFp
bGFibGUgYXQKKyAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCisg
KiAKKyAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQgc3BlY2lm
aWNhdGlvbiBkZXZlbG9wZWQgdW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0eSBQcm9jZXNzIChK
Q1ApIGFuZCBpcyBtYWRlIGF2YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiBwdXJw
b3NlcworICogb25seS4gVGhlIGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkgc3BlY2lm
aWNhdGlvbiBvZiB0aGUgSkNQLgorICogCisgKiBDb250cmlidXRvcnM6CisgKiAgICAgSmVzcGVy
IFN0ZWVuIE1vZWxsZXIgLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24KKyAqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqLworcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21w
aWxlci5yZWdyZXNzaW9uOworCitpbXBvcnQgamF2YS5pby5GaWxlOworCitpbXBvcnQganVuaXQu
ZnJhbWV3b3JrLlRlc3Q7CisKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5Ub29sRmFjdG9y
eTsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy51dGlsLlV0aWw7CitpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmNvcmUudXRpbC5DbGFzc0ZpbGVCeXRlc0Rpc2Fzc2VtYmxlcjsKK2lt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuY2xhc3NmbXQuQ2xhc3NGaWxl
UmVhZGVyOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5lbnYuSUJp
bmFyeU1ldGhvZDsKKworcHVibGljIGNsYXNzIE1ldGhvZFBhcmFtZXRlcnNBdHRyaWJ1dGVUZXN0
IGV4dGVuZHMgQWJzdHJhY3RSZWdyZXNzaW9uVGVzdCB7CisJcHVibGljIE1ldGhvZFBhcmFtZXRl
cnNBdHRyaWJ1dGVUZXN0KFN0cmluZyBuYW1lKSB7CisJCXN1cGVyKG5hbWUpOworCX0KKworCXB1
YmxpYyBzdGF0aWMgQ2xhc3MgdGVzdENsYXNzKCkgeworCQlyZXR1cm4gTWV0aG9kUGFyYW1ldGVy
c0F0dHJpYnV0ZVRlc3QuY2xhc3M7CisJfQorCisJLy8gVXNlIHRoaXMgc3RhdGljIGluaXRpYWxp
emVyIHRvIHNwZWNpZnkgc3Vic2V0IGZvciB0ZXN0cworCS8vIEFsbCBzcGVjaWZpZWQgdGVzdHMg
d2hpY2ggZG9lcyBub3QgYmVsb25nIHRvIHRoZSBjbGFzcyBhcmUgc2tpcHBlZC4uLgorCXN0YXRp
YyB7CisvLwkJVEVTVFNfUFJFRklYID0gInRlc3RCdWc5NTUyMSI7CisvLwkJVEVTVFNfTkFNRVMg
PSBuZXcgU3RyaW5nW10geyAidGVzdEJ1ZzM1OTQ5NSIgfTsKKy8vCQlURVNUU19OVU1CRVJTID0g
bmV3IGludFtdIHsgNTMgfTsKKy8vCQlURVNUU19SQU5HRSA9IG5ldyBpbnRbXSB7IDIzIC0xLH07
CisJfQorCXB1YmxpYyBzdGF0aWMgVGVzdCBzdWl0ZSgpIHsKKwkJcmV0dXJuIGJ1aWxkTWluaW1h
bENvbXBsaWFuY2VUZXN0U3VpdGUodGVzdENsYXNzKCksIEZfMV84KTsKKwl9CisJCisJU3RyaW5n
IG9yaWdpbmFsU291cmNlID0KKwkJImltcG9ydCBqYXZhLnV0aWwuY29uY3VycmVudC5DYWxsYWJs
ZTtcbiIgKyAKKwkJIlxuIiArIAorCQkicHVibGljIGNsYXNzIFBhcmFtZXRlck5hbWVzIHtcbiIg
KyAKKwkJIglcbiIgKyAKKwkJIglwdWJsaWMgdm9pZCBzb21lTWV0aG9kKGludCBzaW1wbGUsIGZp
bmFsIGRvdWJsZSBjb21wbGV4KSB7XG4iICsgCisJCSIJfVxuIiArIAorCQkiCVxuIiArIAorCQki
CXB1YmxpYyBDYWxsYWJsZTxTdHJpbmc+IG1ha2VJbm5lcldpdGhDYXB0dXJlKGZpbmFsIFN0cmlu
ZyBmaW5hbE1lc3NhZ2UsIFN0cmluZyBtdXRhYmxlTWVzc2FnZSkge1xuIiArIAorCQkiCQlyZXR1
cm4gbmV3IENhbGxhYmxlPFN0cmluZz4oKSAge1xuIiArIAorCQkiCQkJcHVibGljIFN0cmluZyBj
YWxsKCkgdGhyb3dzIEV4Y2VwdGlvbiB7XG4iICsgCisJCSIJCQkJcmV0dXJuIGZpbmFsTWVzc2Fn
ZTtcbiIgKyAKKwkJIgkJCX1cbiIgKyAKKwkJIgkJfTtcbiIgKyAKKwkJIgl9XG4iICsgCisJCSJc
biIgKyAKKwkJIglwdWJsaWMgaW50IGxvY2FsTWF0aChmaW5hbCBTdHJpbmcgZmluYWxNZXNzYWdl
LCBTdHJpbmcgbXV0YWJsZU1lc3NhZ2UpIHtcbiIgKyAKKwkJIgkJaW50IGNhcHR1cmVkQiA9IDQy
O1xuIiArIAorCQkiCQlcbiIgKyAKKwkJIgkJY2xhc3MgTG9jYWwge1xuIiArIAorCQkiCQkJaW50
IGZpZWxkQTtcbiIgKyAKKwkJIgkJCUxvY2FsKGludCBhKSB7XG4iICsgCisJCSIJCQkJdGhpcy5m
aWVsZEEgPSBhO1xuIiArIAorCQkiCQkJfVxuIiArIAorCQkiCQkJaW50IGNhbGN1bGF0ZShmaW5h
bCBpbnQgcGFyYW1ldGVyQykge1xuIiArIAorCQkiCQkJCXJldHVybiAgdGhpcy5maWVsZEEgKyBj
YXB0dXJlZEIgKyBwYXJhbWV0ZXJDO1xuIiArIAorCQkiCQkJfVxuIiArIAorCQkiCQl9XG4iICsg
CisJCSIJCVxuIiArIAorCQkiCQlyZXR1cm4gbmV3IExvY2FsKDIpLmNhbGN1bGF0ZSgzKTtcbiIg
KyAKKwkJIgl9XG4iICsgCisJCSJcbiIgKyAKKwkJIn1cbiIgKyAKKwkJIiI7CisKKwlwdWJsaWMg
dm9pZCB0ZXN0MDAxKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisKKwkJCUNsYXNzRmlsZUJ5dGVzRGlz
YXNzZW1ibGVyIGRpc2Fzc2VtYmxlciA9IFRvb2xGYWN0b3J5LmNyZWF0ZURlZmF1bHRDbGFzc0Zp
bGVCeXRlc0Rpc2Fzc2VtYmxlcigpOworCQkJU3RyaW5nIHBhdGggPSB0aGlzLmdldENvbXBpbGVy
VGVzdHNQbHVnaW5EaXJlY3RvcnlQYXRoKCkgKyBGaWxlLnNlcGFyYXRvciArICJ3b3Jrc3BhY2Ui
ICsgRmlsZS5zZXBhcmF0b3IgKyAiUGFyYW1ldGVyTmFtZXMuY2xhc3MiOworCQkJYnl0ZVtdIGNs
YXNzRmlsZUJ5dGVzID0gb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLnV0aWwuVXRp
bC5nZXRGaWxlQnl0ZUNvbnRlbnQobmV3IEZpbGUocGF0aCkpOworCQkJU3RyaW5nIGFjdHVhbE91
dHB1dCA9CisJCQkJZGlzYXNzZW1ibGVyLmRpc2Fzc2VtYmxlKAorCQkJCQljbGFzc0ZpbGVCeXRl
cywKKwkJCQkJIlxuIiwKKwkJCQkJQ2xhc3NGaWxlQnl0ZXNEaXNhc3NlbWJsZXIuREVUQUlMRUQp
OworCisJCQlTdHJpbmcgZXhwZWN0ZWRPdXRwdXQgPQorCQkJCQkiLy8gQ29tcGlsZWQgZnJvbSBQ
YXJhbWV0ZXJOYW1lcy5qYXZhICh2ZXJzaW9uIDEuOCA6IDUyLjAsIHN1cGVyIGJpdClcbiIgKyAK
KwkJCQkJInB1YmxpYyBjbGFzcyBQYXJhbWV0ZXJOYW1lcyB7XG4iICsgCisJCQkJCSIgIFxuIiAr
IAorCQkJCQkiICAvLyBNZXRob2QgZGVzY3JpcHRvciAjMTIgKClWXG4iICsgCisJCQkJCSIgIC8v
IFN0YWNrOiAxLCBMb2NhbHM6IDFcbiIgKyAKKwkJCQkJIiAgcHVibGljIFBhcmFtZXRlck5hbWVz
KCk7XG4iICsgCisJCQkJCSIgICAgMCAgYWxvYWRfMCBbdGhpc11cbiIgKyAKKwkJCQkJIiAgICAx
ICBpbnZva2VzcGVjaWFsIGphdmEubGFuZy5PYmplY3QoKSBbMV1cbiIgKyAKKwkJCQkJIiAgICA0
ICByZXR1cm5cbiIgKyAKKwkJCQkJIiAgICAgIExpbmUgbnVtYmVyczpcbiIgKyAKKwkJCQkJIiAg
ICAgICAgW3BjOiAwLCBsaW5lOiAzXVxuIiArIAorCQkJCQkiICBcbiIgKyAKKwkJCQkJIiAgLy8g
TWV0aG9kIGRlc2NyaXB0b3IgIzE2IChJRClWXG4iICsgCisJCQkJCSIgIC8vIFN0YWNrOiAwLCBM
b2NhbHM6IDRcbiIgKyAKKwkJCQkJIiAgcHVibGljIHZvaWQgc29tZU1ldGhvZChpbnQgc2ltcGxl
LCBkb3VibGUgY29tcGxleCk7XG4iICsgCisJCQkJCSIgICAgMCAgcmV0dXJuXG4iICsgCisJCQkJ
CSIgICAgICBMaW5lIG51bWJlcnM6XG4iICsgCisJCQkJCSIgICAgICAgIFtwYzogMCwgbGluZTog
Nl1cbiIgKyAKKwkJCQkJIiAgICAgIE1ldGhvZCBQYXJhbWV0ZXJzOlxuIiArIAorCQkJCQkiICAg
ICAgICBzaW1wbGVcbiIgKyAKKwkJCQkJIiAgICAgICAgZmluYWwgY29tcGxleFxuIiArIAorCQkJ
CQkiICBcbiIgKyAKKwkJCQkJIiAgLy8gTWV0aG9kIGRlc2NyaXB0b3IgIzIxIChMamF2YS9sYW5n
L1N0cmluZztMamF2YS9sYW5nL1N0cmluZzspTGphdmEvdXRpbC9jb25jdXJyZW50L0NhbGxhYmxl
O1xuIiArIAorCQkJCQkiICAvLyBTaWduYXR1cmU6IChMamF2YS9sYW5nL1N0cmluZztMamF2YS9s
YW5nL1N0cmluZzspTGphdmEvdXRpbC9jb25jdXJyZW50L0NhbGxhYmxlPExqYXZhL2xhbmcvU3Ry
aW5nOz47XG4iICsgCisJCQkJCSIgIC8vIFN0YWNrOiA0LCBMb2NhbHM6IDNcbiIgKyAKKwkJCQkJ
IiAgcHVibGljIGphdmEudXRpbC5jb25jdXJyZW50LkNhbGxhYmxlIG1ha2VJbm5lcldpdGhDYXB0
dXJlKGphdmEubGFuZy5TdHJpbmcgZmluYWxNZXNzYWdlLCBqYXZhLmxhbmcuU3RyaW5nIG11dGFi
bGVNZXNzYWdlKTtcbiIgKyAKKwkJCQkJIiAgICAgMCAgbmV3IFBhcmFtZXRlck5hbWVzJDEgWzJd
XG4iICsgCisJCQkJCSIgICAgIDMgIGR1cFxuIiArIAorCQkJCQkiICAgICA0ICBhbG9hZF8wIFt0
aGlzXVxuIiArIAorCQkJCQkiICAgICA1ICBhbG9hZF8xIFtmaW5hbE1lc3NhZ2VdXG4iICsgCisJ
CQkJCSIgICAgIDYgIGludm9rZXNwZWNpYWwgUGFyYW1ldGVyTmFtZXMkMShQYXJhbWV0ZXJOYW1l
cywgamF2YS5sYW5nLlN0cmluZykgWzNdXG4iICsgCisJCQkJCSIgICAgIDkgIGFyZXR1cm5cbiIg
KyAKKwkJCQkJIiAgICAgIExpbmUgbnVtYmVyczpcbiIgKyAKKwkJCQkJIiAgICAgICAgW3BjOiAw
LCBsaW5lOiA5XVxuIiArIAorCQkJCQkiICAgICAgTWV0aG9kIFBhcmFtZXRlcnM6XG4iICsgCisJ
CQkJCSIgICAgICAgIGZpbmFsIGZpbmFsTWVzc2FnZVxuIiArIAorCQkJCQkiICAgICAgICBtdXRh
YmxlTWVzc2FnZVxuIiArIAorCQkJCQkiICBcbiIgKyAKKwkJCQkJIiAgLy8gTWV0aG9kIGRlc2Ny
aXB0b3IgIzI3IChMamF2YS9sYW5nL1N0cmluZztMamF2YS9sYW5nL1N0cmluZzspSVxuIiArIAor
CQkJCQkiICAvLyBTdGFjazogNSwgTG9jYWxzOiA0XG4iICsgCisJCQkJCSIgIHB1YmxpYyBpbnQg
bG9jYWxNYXRoKGphdmEubGFuZy5TdHJpbmcgZmluYWxNZXNzYWdlLCBqYXZhLmxhbmcuU3RyaW5n
IG11dGFibGVNZXNzYWdlKTtcbiIgKyAKKwkJCQkJIiAgICAgMCAgYmlwdXNoIDQyXG4iICsgCisJ
CQkJCSIgICAgIDIgIGlzdG9yZV8zXG4iICsgCisJCQkJCSIgICAgIDMgIG5ldyBQYXJhbWV0ZXJO
YW1lcyQxTG9jYWwgWzRdXG4iICsgCisJCQkJCSIgICAgIDYgIGR1cFxuIiArIAorCQkJCQkiICAg
ICA3ICBhbG9hZF8wIFt0aGlzXVxuIiArIAorCQkJCQkiICAgICA4ICBpY29uc3RfMlxuIiArIAor
CQkJCQkiICAgICA5ICBpbG9hZF8zXG4iICsgCisJCQkJCSIgICAgMTAgIGludm9rZXNwZWNpYWwg
UGFyYW1ldGVyTmFtZXMkMUxvY2FsKFBhcmFtZXRlck5hbWVzLCBpbnQsIGludCkgWzVdXG4iICsg
CisJCQkJCSIgICAgMTMgIGljb25zdF8zXG4iICsgCisJCQkJCSIgICAgMTQgIGludm9rZXZpcnR1
YWwgUGFyYW1ldGVyTmFtZXMkMUxvY2FsLmNhbGN1bGF0ZShpbnQpIDogaW50IFs2XVxuIiArIAor
CQkJCQkiICAgIDE3ICBpcmV0dXJuXG4iICsgCisJCQkJCSIgICAgICBMaW5lIG51bWJlcnM6XG4i
ICsgCisJCQkJCSIgICAgICAgIFtwYzogMCwgbGluZTogMTddXG4iICsgCisJCQkJCSIgICAgICAg
IFtwYzogMywgbGluZTogMjldXG4iICsgCisJCQkJCSIgICAgICBNZXRob2QgUGFyYW1ldGVyczpc
biIgKyAKKwkJCQkJIiAgICAgICAgZmluYWwgZmluYWxNZXNzYWdlXG4iICsgCisJCQkJCSIgICAg
ICAgIG11dGFibGVNZXNzYWdlXG4iICsgCisJCQkJCSJcbiIgKyAKKwkJCQkJIiAgSW5uZXIgY2xh
c3NlczpcbiIgKyAKKwkJCQkJIiAgICBbaW5uZXIgY2xhc3MgaW5mbzogIzQgUGFyYW1ldGVyTmFt
ZXMkMUxvY2FsLCBvdXRlciBjbGFzcyBpbmZvOiAjMFxuIiArIAorCQkJCQkiICAgICBpbm5lciBu
YW1lOiAjOSBMb2NhbCwgYWNjZXNzZmxhZ3M6IDAgZGVmYXVsdF0sXG4iICsgCisJCQkJCSIgICAg
W2lubmVyIGNsYXNzIGluZm86ICMyIFBhcmFtZXRlck5hbWVzJDEsIG91dGVyIGNsYXNzIGluZm86
ICMwXG4iICsgCisJCQkJCSIgICAgIGlubmVyIG5hbWU6ICMwLCBhY2Nlc3NmbGFnczogMCBkZWZh
dWx0XVxuIiArIAorCQkJCQkifSI7CisKKworCQkJaW50IGluZGV4ID0gYWN0dWFsT3V0cHV0Lmlu
ZGV4T2YoZXhwZWN0ZWRPdXRwdXQpOworCQkJaWYgKGluZGV4ID09IC0xIHx8IGV4cGVjdGVkT3V0
cHV0Lmxlbmd0aCgpID09IDApIHsKKwkJCQlTeXN0ZW0ub3V0LnByaW50bG4oVXRpbC5kaXNwbGF5
U3RyaW5nKGFjdHVhbE91dHB1dCwgMikpOworCQkJfQorCQkJaWYgKGluZGV4ID09IC0xKSB7CisJ
CQkJYXNzZXJ0RXF1YWxzKCJXcm9uZyBjb250ZW50cyIsIGV4cGVjdGVkT3V0cHV0LCBhY3R1YWxP
dXRwdXQpOworCQkJfQorCX0KKwlwdWJsaWMgdm9pZCB0ZXN0MDAyKCkgdGhyb3dzIEV4Y2VwdGlv
biB7CisKKwkJQ2xhc3NGaWxlQnl0ZXNEaXNhc3NlbWJsZXIgZGlzYXNzZW1ibGVyID0gVG9vbEZh
Y3RvcnkuY3JlYXRlRGVmYXVsdENsYXNzRmlsZUJ5dGVzRGlzYXNzZW1ibGVyKCk7CisJCVN0cmlu
ZyBwYXRoID0gdGhpcy5nZXRDb21waWxlclRlc3RzUGx1Z2luRGlyZWN0b3J5UGF0aCgpICsgRmls
ZS5zZXBhcmF0b3IgKyAid29ya3NwYWNlIiArIEZpbGUuc2VwYXJhdG9yICsgIlBhcmFtZXRlck5h
bWVzJDEuY2xhc3MiOworCQlieXRlW10gY2xhc3NGaWxlQnl0ZXMgPSBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIudXRpbC5VdGlsLmdldEZpbGVCeXRlQ29udGVudChuZXcgRmlsZShw
YXRoKSk7CisJCVN0cmluZyBhY3R1YWxPdXRwdXQgPQorCQkJZGlzYXNzZW1ibGVyLmRpc2Fzc2Vt
YmxlKAorCQkJCWNsYXNzRmlsZUJ5dGVzLAorCQkJCSJcbiIsCisJCQkJQ2xhc3NGaWxlQnl0ZXNE
aXNhc3NlbWJsZXIuREVUQUlMRUQpOworCisJCVN0cmluZyBleHBlY3RlZE91dHB1dCA9CisJCQki
Ly8gQ29tcGlsZWQgZnJvbSBQYXJhbWV0ZXJOYW1lcy5qYXZhICh2ZXJzaW9uIDEuOCA6IDUyLjAs
IHN1cGVyIGJpdClcbiIgKyAKKwkJCSIvLyBTaWduYXR1cmU6IExqYXZhL2xhbmcvT2JqZWN0O0xq
YXZhL3V0aWwvY29uY3VycmVudC9DYWxsYWJsZTxMamF2YS9sYW5nL1N0cmluZzs+O1xuIiArIAor
CQkJImNsYXNzIFBhcmFtZXRlck5hbWVzJDEgaW1wbGVtZW50cyBqYXZhLnV0aWwuY29uY3VycmVu
dC5DYWxsYWJsZSB7XG4iICsgCisJCQkiICBcbiIgKyAKKwkJCSIgIC8vIEZpZWxkIGRlc2NyaXB0
b3IgIzkgTGphdmEvbGFuZy9TdHJpbmc7XG4iICsgCisJCQkiICBmaW5hbCBzeW50aGV0aWMgamF2
YS5sYW5nLlN0cmluZyB2YWwkZmluYWxNZXNzYWdlO1xuIiArIAorCQkJIiAgXG4iICsgCisJCQki
ICAvLyBGaWVsZCBkZXNjcmlwdG9yICMxMSBMUGFyYW1ldGVyTmFtZXM7XG4iICsgCisJCQkiICBm
aW5hbCBzeW50aGV0aWMgUGFyYW1ldGVyTmFtZXMgdGhpcyQwO1xuIiArIAorCQkJIiAgXG4iICsg
CisJCQkiICAvLyBNZXRob2QgZGVzY3JpcHRvciAjMTMgKExQYXJhbWV0ZXJOYW1lcztMamF2YS9s
YW5nL1N0cmluZzspVlxuIiArIAorCQkJIiAgLy8gU3RhY2s6IDIsIExvY2FsczogM1xuIiArIAor
CQkJIiAgUGFyYW1ldGVyTmFtZXMkMShQYXJhbWV0ZXJOYW1lcyB0aGlzJDAsIGphdmEubGFuZy5T
dHJpbmcgdmFsJGZpbmFsTWVzc2FnZSk7XG4iICsgCisJCQkiICAgICAwICBhbG9hZF8wIFt0aGlz
XVxuIiArIAorCQkJIiAgICAgMSAgYWxvYWRfMSBbdGhpcyQwXVxuIiArIAorCQkJIiAgICAgMiAg
cHV0ZmllbGQgUGFyYW1ldGVyTmFtZXMkMS50aGlzJDAgOiBQYXJhbWV0ZXJOYW1lcyBbMV1cbiIg
KyAKKwkJCSIgICAgIDUgIGFsb2FkXzAgW3RoaXNdXG4iICsgCisJCQkiICAgICA2ICBhbG9hZF8y
IFt2YWwkZmluYWxNZXNzYWdlXVxuIiArIAorCQkJIiAgICAgNyAgcHV0ZmllbGQgUGFyYW1ldGVy
TmFtZXMkMS52YWwkZmluYWxNZXNzYWdlIDogamF2YS5sYW5nLlN0cmluZyBbMl1cbiIgKyAKKwkJ
CSIgICAgMTAgIGFsb2FkXzAgW3RoaXNdXG4iICsgCisJCQkiICAgIDExICBpbnZva2VzcGVjaWFs
IGphdmEubGFuZy5PYmplY3QoKSBbM11cbiIgKyAKKwkJCSIgICAgMTQgIHJldHVyblxuIiArIAor
CQkJIiAgICAgIExpbmUgbnVtYmVyczpcbiIgKyAKKwkJCSIgICAgICAgIFtwYzogMCwgbGluZTog
OV1cbiIgKyAKKwkJCSIgICAgICBNZXRob2QgUGFyYW1ldGVyczpcbiIgKyAKKwkJCSIgICAgICAg
IGZpbmFsIG1hbmRhdGVkIHRoaXMkMFxuIiArIAorCQkJIiAgICAgICAgZmluYWwgc3ludGhldGlj
IHZhbCRmaW5hbE1lc3NhZ2VcbiIgKyAKKwkJCSIgIFxuIiArIAorCQkJIiAgLy8gTWV0aG9kIGRl
c2NyaXB0b3IgIzE4ICgpTGphdmEvbGFuZy9TdHJpbmc7XG4iICsgCisJCQkiICAvLyBTdGFjazog
MSwgTG9jYWxzOiAxXG4iICsgCisJCQkiICBwdWJsaWMgamF2YS5sYW5nLlN0cmluZyBjYWxsKCkg
dGhyb3dzIGphdmEubGFuZy5FeGNlcHRpb247XG4iICsgCisJCQkiICAgIDAgIGFsb2FkXzAgW3Ro
aXNdXG4iICsgCisJCQkiICAgIDEgIGdldGZpZWxkIFBhcmFtZXRlck5hbWVzJDEudmFsJGZpbmFs
TWVzc2FnZSA6IGphdmEubGFuZy5TdHJpbmcgWzJdXG4iICsgCisJCQkiICAgIDQgIGFyZXR1cm5c
biIgKyAKKwkJCSIgICAgICBMaW5lIG51bWJlcnM6XG4iICsgCisJCQkiICAgICAgICBbcGM6IDAs
IGxpbmU6IDExXVxuIiArIAorCQkJIiAgXG4iICsgCisJCQkiICAvLyBNZXRob2QgZGVzY3JpcHRv
ciAjMjEgKClMamF2YS9sYW5nL09iamVjdDtcbiIgKyAKKwkJCSIgIC8vIFN0YWNrOiAxLCBMb2Nh
bHM6IDFcbiIgKyAKKwkJCSIgIHB1YmxpYyBicmlkZ2Ugc3ludGhldGljIGphdmEubGFuZy5PYmpl
Y3QgY2FsbCgpIHRocm93cyBqYXZhLmxhbmcuRXhjZXB0aW9uO1xuIiArIAorCQkJIiAgICAwICBh
bG9hZF8wIFt0aGlzXVxuIiArIAorCQkJIiAgICAxICBpbnZva2V2aXJ0dWFsIFBhcmFtZXRlck5h
bWVzJDEuY2FsbCgpIDogamF2YS5sYW5nLlN0cmluZyBbNF1cbiIgKyAKKwkJCSIgICAgNCAgYXJl
dHVyblxuIiArIAorCQkJIiAgICAgIExpbmUgbnVtYmVyczpcbiIgKyAKKwkJCSIgICAgICAgIFtw
YzogMCwgbGluZTogOV1cbiIgKyAKKwkJCSJcbiIgKyAKKwkJCSIgIElubmVyIGNsYXNzZXM6XG4i
ICsgCisJCQkiICAgIFtpbm5lciBjbGFzcyBpbmZvOiAjNSBQYXJhbWV0ZXJOYW1lcyQxLCBvdXRl
ciBjbGFzcyBpbmZvOiAjMFxuIiArIAorCQkJIiAgICAgaW5uZXIgbmFtZTogIzAsIGFjY2Vzc2Zs
YWdzOiAwIGRlZmF1bHRdXG4iICsgCisJCQkiICBFbmNsb3NpbmcgTWV0aG9kOiAjMjcgICMyOCBQ
YXJhbWV0ZXJOYW1lcy5tYWtlSW5uZXJXaXRoQ2FwdHVyZShMamF2YS9sYW5nL1N0cmluZztMamF2
YS9sYW5nL1N0cmluZzspTGphdmEvdXRpbC9jb25jdXJyZW50L0NhbGxhYmxlO1xuIiArIAorCQkJ
In0iOworCisJCWludCBpbmRleCA9IGFjdHVhbE91dHB1dC5pbmRleE9mKGV4cGVjdGVkT3V0cHV0
KTsKKwkJaWYgKGluZGV4ID09IC0xIHx8IGV4cGVjdGVkT3V0cHV0Lmxlbmd0aCgpID09IDApIHsK
KwkJCVN5c3RlbS5vdXQucHJpbnRsbihVdGlsLmRpc3BsYXlTdHJpbmcoYWN0dWFsT3V0cHV0LCAy
KSk7CisJCX0KKwkJaWYgKGluZGV4ID09IC0xKSB7CisJCQlhc3NlcnRFcXVhbHMoIldyb25nIGNv
bnRlbnRzIiwgZXhwZWN0ZWRPdXRwdXQsIGFjdHVhbE91dHB1dCk7CisJCX0KKwl9CisKKwlwdWJs
aWMgdm9pZCB0ZXN0MDAzKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisKKwkJQ2xhc3NGaWxlQnl0ZXNE
aXNhc3NlbWJsZXIgZGlzYXNzZW1ibGVyID0gVG9vbEZhY3RvcnkuY3JlYXRlRGVmYXVsdENsYXNz
RmlsZUJ5dGVzRGlzYXNzZW1ibGVyKCk7CisJCVN0cmluZyBwYXRoID0gdGhpcy5nZXRDb21waWxl
clRlc3RzUGx1Z2luRGlyZWN0b3J5UGF0aCgpICsgRmlsZS5zZXBhcmF0b3IgKyAid29ya3NwYWNl
IiArIEZpbGUuc2VwYXJhdG9yICsgIlBhcmFtZXRlck5hbWVzJDFMb2NhbC5jbGFzcyI7CisJCWJ5
dGVbXSBjbGFzc0ZpbGVCeXRlcyA9IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci51
dGlsLlV0aWwuZ2V0RmlsZUJ5dGVDb250ZW50KG5ldyBGaWxlKHBhdGgpKTsKKwkJU3RyaW5nIGFj
dHVhbE91dHB1dCA9CisJCQlkaXNhc3NlbWJsZXIuZGlzYXNzZW1ibGUoCisJCQkJY2xhc3NGaWxl
Qnl0ZXMsCisJCQkJIlxuIiwKKwkJCQlDbGFzc0ZpbGVCeXRlc0Rpc2Fzc2VtYmxlci5ERVRBSUxF
RCk7CisKKwkJU3RyaW5nIGV4cGVjdGVkT3V0cHV0ID0KKwkJCSIvLyBDb21waWxlZCBmcm9tIFBh
cmFtZXRlck5hbWVzLmphdmEgKHZlcnNpb24gMS44IDogNTIuMCwgc3VwZXIgYml0KVxuIiArIAor
CQkJImNsYXNzIFBhcmFtZXRlck5hbWVzJDFMb2NhbCB7XG4iICsgCisJCQkiICBcbiIgKyAKKwkJ
CSIgIC8vIEZpZWxkIGRlc2NyaXB0b3IgIzggSVxuIiArIAorCQkJIiAgaW50IGZpZWxkQTtcbiIg
KyAKKwkJCSIgIFxuIiArIAorCQkJIiAgLy8gRmllbGQgZGVzY3JpcHRvciAjOCBJXG4iICsgCisJ
CQkiICBmaW5hbCBzeW50aGV0aWMgaW50IHZhbCRjYXB0dXJlZEI7XG4iICsgCisJCQkiICBcbiIg
KyAKKwkJCSIgIC8vIEZpZWxkIGRlc2NyaXB0b3IgIzExIExQYXJhbWV0ZXJOYW1lcztcbiIgKyAK
KwkJCSIgIGZpbmFsIHN5bnRoZXRpYyBQYXJhbWV0ZXJOYW1lcyB0aGlzJDA7XG4iICsgCisJCQki
ICBcbiIgKyAKKwkJCSIgIC8vIE1ldGhvZCBkZXNjcmlwdG9yICMxMyAoTFBhcmFtZXRlck5hbWVz
O0lJKVZcbiIgKyAKKwkJCSIgIC8vIFNpZ25hdHVyZTogKEkpVlxuIiArIAorCQkJIiAgLy8gU3Rh
Y2s6IDIsIExvY2FsczogNFxuIiArIAorCQkJIiAgUGFyYW1ldGVyTmFtZXMkMUxvY2FsKFBhcmFt
ZXRlck5hbWVzIHRoaXMkMCwgaW50IHZhbCRjYXB0dXJlZEIsIGludCBhKTtcbiIgKyAKKwkJCSIg
ICAgIDAgIGFsb2FkXzAgW3RoaXNdXG4iICsgCisJCQkiICAgICAxICBhbG9hZF8xIFt0aGlzJDBd
XG4iICsgCisJCQkiICAgICAyICBwdXRmaWVsZCBQYXJhbWV0ZXJOYW1lcyQxTG9jYWwudGhpcyQw
IDogUGFyYW1ldGVyTmFtZXMgWzFdXG4iICsgCisJCQkiICAgICA1ICBhbG9hZF8wIFt0aGlzXVxu
IiArIAorCQkJIiAgICAgNiAgaWxvYWRfMyBbYV1cbiIgKyAKKwkJCSIgICAgIDcgIHB1dGZpZWxk
IFBhcmFtZXRlck5hbWVzJDFMb2NhbC52YWwkY2FwdHVyZWRCIDogaW50IFsyXVxuIiArIAorCQkJ
IiAgICAxMCAgYWxvYWRfMCBbdGhpc11cbiIgKyAKKwkJCSIgICAgMTEgIGludm9rZXNwZWNpYWwg
amF2YS5sYW5nLk9iamVjdCgpIFszXVxuIiArIAorCQkJIiAgICAxNCAgYWxvYWRfMCBbdGhpc11c
biIgKyAKKwkJCSIgICAgMTUgIGlsb2FkXzIgW3ZhbCRjYXB0dXJlZEJdXG4iICsgCisJCQkiICAg
IDE2ICBwdXRmaWVsZCBQYXJhbWV0ZXJOYW1lcyQxTG9jYWwuZmllbGRBIDogaW50IFs0XVxuIiAr
IAorCQkJIiAgICAxOSAgcmV0dXJuXG4iICsgCisJCQkiICAgICAgTGluZSBudW1iZXJzOlxuIiAr
IAorCQkJIiAgICAgICAgW3BjOiAwLCBsaW5lOiAyMV1cbiIgKyAKKwkJCSIgICAgICAgIFtwYzog
MTQsIGxpbmU6IDIyXVxuIiArIAorCQkJIiAgICAgICAgW3BjOiAxOSwgbGluZTogMjNdXG4iICsg
CisJCQkiICAgICAgTWV0aG9kIFBhcmFtZXRlcnM6XG4iICsgCisJCQkiICAgICAgICBmaW5hbCBt
YW5kYXRlZCB0aGlzJDBcbiIgKyAKKwkJCSIgICAgICAgIGZpbmFsIHN5bnRoZXRpYyB2YWwkY2Fw
dHVyZWRCXG4iICsgCisJCQkiICAgICAgICBhXG4iICsgCisJCQkiICBcbiIgKyAKKwkJCSIgIC8v
IE1ldGhvZCBkZXNjcmlwdG9yICMyMSAoSSlJXG4iICsgCisJCQkiICAvLyBTdGFjazogMiwgTG9j
YWxzOiAyXG4iICsgCisJCQkiICBpbnQgY2FsY3VsYXRlKGludCBwYXJhbWV0ZXJDKTtcbiIgKyAK
KwkJCSIgICAgIDAgIGFsb2FkXzAgW3RoaXNdXG4iICsgCisJCQkiICAgICAxICBnZXRmaWVsZCBQ
YXJhbWV0ZXJOYW1lcyQxTG9jYWwuZmllbGRBIDogaW50IFs0XVxuIiArIAorCQkJIiAgICAgNCAg
YWxvYWRfMCBbdGhpc11cbiIgKyAKKwkJCSIgICAgIDUgIGdldGZpZWxkIFBhcmFtZXRlck5hbWVz
JDFMb2NhbC52YWwkY2FwdHVyZWRCIDogaW50IFsyXVxuIiArIAorCQkJIiAgICAgOCAgaWFkZFxu
IiArIAorCQkJIiAgICAgOSAgaWxvYWRfMSBbcGFyYW1ldGVyQ11cbiIgKyAKKwkJCSIgICAgMTAg
IGlhZGRcbiIgKyAKKwkJCSIgICAgMTEgIGlyZXR1cm5cbiIgKyAKKwkJCSIgICAgICBMaW5lIG51
bWJlcnM6XG4iICsgCisJCQkiICAgICAgICBbcGM6IDAsIGxpbmU6IDI1XVxuIiArIAorCQkJIiAg
ICAgIE1ldGhvZCBQYXJhbWV0ZXJzOlxuIiArIAorCQkJIiAgICAgICAgZmluYWwgcGFyYW1ldGVy
Q1xuIiArIAorCQkJIlxuIiArIAorCQkJIiAgSW5uZXIgY2xhc3NlczpcbiIgKyAKKwkJCSIgICAg
W2lubmVyIGNsYXNzIGluZm86ICM1IFBhcmFtZXRlck5hbWVzJDFMb2NhbCwgb3V0ZXIgY2xhc3Mg
aW5mbzogIzBcbiIgKyAKKwkJCSIgICAgIGlubmVyIG5hbWU6ICMzMyBMb2NhbCwgYWNjZXNzZmxh
Z3M6IDAgZGVmYXVsdF1cbiIgKyAKKwkJCSIgIEVuY2xvc2luZyBNZXRob2Q6ICMyNiAgIzI3IFBh
cmFtZXRlck5hbWVzLmxvY2FsTWF0aChMamF2YS9sYW5nL1N0cmluZztMamF2YS9sYW5nL1N0cmlu
ZzspSVxuIiArIAorCQkJIn0iOworCisJCWludCBpbmRleCA9IGFjdHVhbE91dHB1dC5pbmRleE9m
KGV4cGVjdGVkT3V0cHV0KTsKKwkJaWYgKGluZGV4ID09IC0xIHx8IGV4cGVjdGVkT3V0cHV0Lmxl
bmd0aCgpID09IDApIHsKKwkJCVN5c3RlbS5vdXQucHJpbnRsbihVdGlsLmRpc3BsYXlTdHJpbmco
YWN0dWFsT3V0cHV0LCAyKSk7CisJCX0KKwkJaWYgKGluZGV4ID09IC0xKSB7CisJCQlhc3NlcnRF
cXVhbHMoIldyb25nIGNvbnRlbnRzIiwgZXhwZWN0ZWRPdXRwdXQsIGFjdHVhbE91dHB1dCk7CisJ
CX0KKwl9CisKKwlwdWJsaWMgdm9pZCB0ZXN0MDA0KCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisKKwkJ
Ly8gVGVzdCB0aGUgcmVzdWx0cyBvZiB0aGUgQ2xhc3NGaWxlUmVhZGVyCisJCVN0cmluZyBwYXRo
ID0gdGhpcy5nZXRDb21waWxlclRlc3RzUGx1Z2luRGlyZWN0b3J5UGF0aCgpICsgRmlsZS5zZXBh
cmF0b3IgKyAid29ya3NwYWNlIiArIEZpbGUuc2VwYXJhdG9yICsgIlBhcmFtZXRlck5hbWVzLmNs
YXNzIjsKKwkJCisJCW9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5jbGFzc2ZtdC5D
bGFzc0ZpbGVSZWFkZXIgY2xhc3NGaWxlUmVhZGVyID0gQ2xhc3NGaWxlUmVhZGVyLnJlYWQocGF0
aCk7CisJCUlCaW5hcnlNZXRob2RbXSBtZXRob2RJbmZvcyA9IGNsYXNzRmlsZVJlYWRlci5nZXRN
ZXRob2RzKCk7CisJCWFzc2VydE5vdE51bGwoIk5vIG1ldGhvZCBpbmZvcyIsIG1ldGhvZEluZm9z
KTsKKwkJaW50IGxlbmd0aCA9IG1ldGhvZEluZm9zLmxlbmd0aDsKKwkJYXNzZXJ0RXF1YWxzKCJN
dXN0IGhhdmUgZm91ciBtZXRob2RzIiwgNCwgbGVuZ3RoKTsKKwkJYXNzZXJ0RXF1YWxzKCJmaW5h
bE1lc3NhZ2UiLCBuZXcgU3RyaW5nKG1ldGhvZEluZm9zWzJdLmdldEFyZ3VtZW50TmFtZXMoKVsw
XSkpOworCQlhc3NlcnRFcXVhbHMoIm11dGFibGVNZXNzYWdlIiwgbmV3IFN0cmluZyhtZXRob2RJ
bmZvc1syXS5nZXRBcmd1bWVudE5hbWVzKClbMV0pKTsKKwl9CisKKwlwdWJsaWMgdm9pZCB0ZXN0
MDA1KCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCS8vIFRlc3QgdGhlIHJlc3VsdHMgb2YgdGhlIENs
YXNzRmlsZVJlYWRlciB3aGVyZSBzb21lIG9mIHRoZSBwYXJhbWVycyBhcmUgc3ludGhldGljIGFu
ZC9vciBtYW5kYXRlZAorCQlTdHJpbmcgcGF0aCA9IHRoaXMuZ2V0Q29tcGlsZXJUZXN0c1BsdWdp
bkRpcmVjdG9yeVBhdGgoKSArIEZpbGUuc2VwYXJhdG9yICsgIndvcmtzcGFjZSIgKyBGaWxlLnNl
cGFyYXRvciArICJQYXJhbWV0ZXJOYW1lcyQxTG9jYWwuY2xhc3MiOworCQkKKwkJb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvbXBpbGVyLmNsYXNzZm10LkNsYXNzRmlsZVJlYWRlciBjbGFzc0Zp
bGVSZWFkZXIgPSBDbGFzc0ZpbGVSZWFkZXIucmVhZChwYXRoKTsKKwkJSUJpbmFyeU1ldGhvZFtd
IG1ldGhvZEluZm9zID0gY2xhc3NGaWxlUmVhZGVyLmdldE1ldGhvZHMoKTsKKwkJYXNzZXJ0Tm90
TnVsbCgiTm8gbWV0aG9kIGluZm9zIiwgbWV0aG9kSW5mb3MpOworCQlpbnQgbGVuZ3RoID0gbWV0
aG9kSW5mb3MubGVuZ3RoOworCQlhc3NlcnRFcXVhbHMoIk11c3QgaGF2ZSB0d28gbWV0aG9kcyIs
IDIsIGxlbmd0aCk7CisJCWFzc2VydEVxdWFscygidGhpcyQwIiwgbmV3IFN0cmluZyhtZXRob2RJ
bmZvc1swXS5nZXRBcmd1bWVudE5hbWVzKClbMF0pKTsKKwkJYXNzZXJ0RXF1YWxzKCJ2YWwkY2Fw
dHVyZWRCIiwgbmV3IFN0cmluZyhtZXRob2RJbmZvc1swXS5nZXRBcmd1bWVudE5hbWVzKClbMV0p
KTsKKwl9CisKK30KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBp
bGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1Rl
c3RBbGwuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1Rlc3RBbGwuamF2YQpp
bmRleCBlYWQzZjU1Li4wYTlhOTZmIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50
ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVn
cmVzc2lvbi9UZXN0QWxsLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29t
cGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24v
VGVzdEFsbC5qYXZhCkBAIC0xNiw2ICsxNiw4IEBACiAgKgkJCQkJCQkJYnVnIDM1ODkwMyAtIEZp
bHRlciBwcmFjdGljYWxseSB1bmltcG9ydGFudCByZXNvdXJjZSBsZWFrIHdhcm5pbmdzCiAgKiAg
ICAgICAgQW5keSBDbGVtZW50IC0gQ29udHJpYnV0aW9ucyBmb3IKICAqICAgICAgICAgICAgICAg
ICAgICAgICAgICBCdWcgMzgzNjI0IC0gWzEuOF1bY29tcGlsZXJdIFJldml2ZSBjb2RlIGdlbmVy
YXRpb24gc3VwcG9ydCBmb3IgdHlwZSBhbm5vdGF0aW9ucyAoZnJvbSBPbGl2aWVyJ3Mgd29yaykK
KyAqICAgICAgIEplc3BlciBTdGVlbiBNb2VsbGVyIC0gQ29udHJpYnV0aW9ucyBmb3I6CisgKiAg
ICAgICAgICAgICAgICAgICAgICAgICAgQnVnIDQwNjk3MyAtIFtjb21waWxlcl0gUGFyc2UgTWV0
aG9kUGFyYW1ldGVycyBhdHRyaWJ1dGUKICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwogcGFja2Fn
ZSBvcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci5yZWdyZXNzaW9uOwogCkBAIC0x
MzYsNiArMTM4LDcgQEAgcHVibGljIHN0YXRpYyBUZXN0IHN1aXRlKCkgewogCXNpbmNlXzFfOC5h
ZGQoR3JhbW1hckNvdmVyYWdlVGVzdHMzMDguY2xhc3MpOwogCXNpbmNlXzFfOC5hZGQoRmxvd0Fu
YWx5c2lzVGVzdDguY2xhc3MpOwogCXNpbmNlXzFfOC5hZGQoVHlwZUFubm90YXRpb25UZXN0LmNs
YXNzKTsKKwlzaW5jZV8xXzguYWRkKE1ldGhvZFBhcmFtZXRlcnNBdHRyaWJ1dGVUZXN0LmNsYXNz
KTsKIAogCS8vIEJ1aWxkIGZpbmFsIHRlc3Qgc3VpdGUKIAlUZXN0U3VpdGUgYWxsID0gbmV3IFRl
c3RTdWl0ZShUZXN0QWxsLmNsYXNzLmdldE5hbWUoKSk7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci93b3Jrc3BhY2UvUGFyYW1ldGVyTmFtZXMkMS5jbGFz
cyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3dvcmtzcGFjZS9QYXJhbWV0
ZXJOYW1lcyQxLmNsYXNzCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAwMDAwMDAw
MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAuLjBiMzhiYjBkODMyN2RmNDZmOTk0Mzc3MGM0OGFi
NTc0NWRiYWI1NzMKR0lUIGJpbmFyeSBwYXRjaApsaXRlcmFsIDkwNwp6Y21aYCUraXVmOTVJeVQk
T2tDNU53JWlGNk5VMzhHMGZ7JU5OKz0ydlFkKkV3bUZKRFNCd0woeVd2P3E5YDZRNGkKek5JZFdY
ZD16NVZ2NjNgYUVxUH0+b14kNVIrNVArUF9hNllTNUh3SWooPTdLTCliWVRmLUlrNHFIWGhxKEY/
ZVNACnpZSkhONU5CYmc4YEE5SVZfZlBtND8/aGFVSXM9X1pIRzBpWipKR0tzVUojKUZmaFQrLXZg
N3ZwcX5fblFSOHNGVAp6WjJRWVUlVCg8bmhINXVIcmJjVWhzbC03eDhIKGhQNDxwS1dgJENXNzw1
YEU0WUN8NEg0NFp6dCUqRWpKekolZ2IKeiVVR3Awd3dLR140XktwPk5udjlrTX5kcSNwJnE+am99
eXJ5JCtWMCpWWFZSfE5yY2ohRTtUbD9iezdESkFBN3s8Cno0QnsqYSNhbjVGWl9GZztyYVUoZSh0
dGVgTXNaM0dQVW9gbSNLakpMN1k8ZmpUdFVOeWk/KWt2U2Z9QUhhPHBERAp6eGJLdF9Oakt0WUQj
IzBPZWxTeno0OXpAc25SRjYxaHM+O0VTaVJWYWU0RnNrQjUoRmw+VCNFITdHQyt+Kn5eKlkKeldH
KWp5VVJDX3w1d19eKyl4bHVIQDtveTxLI2BvRmkmfi1BI1pfMlhyUUhyaWxVV08lb2BWST8mUzM/
PVEyOTxOCnpHTD0/QzEwd0x1WVFnelJlOGswIWtwKU1TekQhWHFfeU94MVo1RUwkKnF9XzZhK31e
ODAkbmVHZXhrWXpZUm98ZApjeStIJlBac0p4Ulp7dG8qY28rQlpoO3xOOSpDXjhTQTZuTVohfmcm
UQoKbGl0ZXJhbCAwCkhjbVY/ZDAwMDAxCgpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvd29ya3NwYWNlL1BhcmFtZXRlck5hbWVzJDFMb2NhbC5jbGFzcyBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3dvcmtzcGFjZS9QYXJhbWV0ZXJO
YW1lcyQxTG9jYWwuY2xhc3MKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMDAwMDAw
MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMC4uOTJiYTY4YmZlNWRmNDZiYWU4ZWI1ZGY1MGY4
NjYzNTVlMGU2YWQ4NwpHSVQgYmluYXJ5IHBhdGNoCmxpdGVyYWwgNjc1CnpjbVpXbS1BKXJoNyhL
Szdxd0JVXiNmbDBqPk1Ha2M1bHB6bG1fUT4qbEw5NnNUcj1Iez9VR0BhPmB1QSVmeEkhWAp6QT5v
MXRAUyUpbjdsYUBlLTwpc0dIKj9PSi1RUnlNRSYqKTd1Y0x5Y2R8OT9wI2YhWHFTO0k7Vlp2Pzh9
QkJlKUwKejAtYDYtSUZzNTc8KkF2YllQOEx2bk05ZWxGNXZkUiUyYnt4cXRaUD53I25KMkQyfmkk
Znd1cXV1LUVHeDNZNUZhCnpOQ353MVFMT2YrQ3F0RFUkZXx8Vj9rWTEkTW1MSFgmODB3bjVSR0cq
VGwyMThOWXEyQSE+TnwkbnFveHpeazB4Sgp6SC1sdUZoSDU5dVcjP31NaS07ZU48ciE2NVUqYj9G
U3JtYDJUeDsrZ3l1fntRSFhiO3JXNnB0dFJSPVo5QGh4e1gKenlwUjJhNWQ8cE49PTk9UHJDbHd2
T2ZqfmJkI3FfMGtKdDh4JDB7QGUmQVNTR21kKykxcklgcTxgdSpEKjFDdWg8Cno9NiRCYVhPe2ZW
QXkpWEtze0RsfDdVS2J+bitHbkM+Qig5dzJNd05SdmZKUmtPbmUtP3BGc3I2R2chZW5PMk5fJAp6
PCk3c0ZITWxrbHkqQlgpPUNKXm1UJSFkMEpIPWA2a2xSTnJpJGhBRyVgTy1CaD1wRDczdVRzZHcw
UUpge0ZQe3gKZzJzfHNxRHVUKWBUXjJ9TGN1RT9+XiZFP00mQ2NmMDNoQD4yN2ZvcX1jPm4rYQoK
bGl0ZXJhbCAwCkhjbVY/ZDAwMDAxCgpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUu
dGVzdHMuY29tcGlsZXIvd29ya3NwYWNlL1BhcmFtZXRlck5hbWVzLmNsYXNzIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvd29ya3NwYWNlL1BhcmFtZXRlck5hbWVzLmNsYXNz
Cm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAw
MDAwMDAwMDAwMDAuLjliOTJiZjViYTJjYzEyMjNlMGE2OTlhNTZmOWFlNDhjZTk0MTYwNTIKR0lU
IGJpbmFyeSBwYXRjaApsaXRlcmFsIDk1NQp6Y21iX2IlV2wmXjZnfWY3SGkzcWVARDkrQFFwWlMq
a2wzfSNDVipycURNJiNAU3goI2BhcSorRiRCMigmMFVJSncKemk0V2tUNU88dDVrY0leZEJLZU1V
PUc9NGRKdjA5Q15WQGQtJil+YmJnIT91Z3hYfCM+IyliPDZuPF9sQXYxTWJNCnohUiUpdGp+UXd+
bnVAI15eUCYoMWdTOCl9az9iPClVaSo7Mj13KE5PVlhZc2Y7LUV+JUI3ZWlqRihHYnxDMU4xdAp6
RyY+P0tGTDx1bF4qUWpHPVI2VG88VnZySWtgdDkraG5hZiQkWiRSMz8/cU1oWjZ2Mlhlaj59OTJy
czw7RzVeM2oKekY7NkYqcTBGT252YlR6fj1USXI1eEQjZStTbXdEJVd2OXBFU1QoanMxSEZxPDl1
R3VPQENuSVlPLWlZRDdKeEkxCnpDTWxvUzlRfWApYD5TMWNzU2hWczFgb0tMR1ZKX1lvcSY4RFdA
UjNWbXl6O3BlY3xLKjhDdldyZWA+Z2w4ZDwlKAp6d2U/aXRqflNYNUAjPmg+PTF2VkIrR05Od2dR
Un1qeyVVK0lMZG1mMF5fTitISXwofVE8X2EkZSlKMVM7XjAxNyMKenEjK0QxWGIwR1VPOz1MPTNA
fGtVI1ZobyRNSnVEI15rLW1TPSFGYGpYalB6MmFTZTY0IS17JkY5eiF1TShreHNmCnoqd042U1d1
NXFSJEl5Z2NXbz1UOVBQbHN0WlI5X2hMSTEyWXs7MS1kcntBRXxvM3dlMDkqeFF8K2AtK207PTNA
Ygp4OypHbEJKJXVzeSZESVIyXiVkNXFnYEUxPkt3PiZnYj1KfGpxPXRLeVhiVWNfNEktKlpvQz4x
PWB+cUhWKjEhTSYKCmxpdGVyYWwgMApIY21WP2QwMDAwMQoKZGlmZiAtLWdpdCBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9j
bGFzc2ZtdC9NZXRob2RJbmZvLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvY2xhc3NmbXQvTWV0aG9kSW5mby5qYXZh
CmluZGV4IDg4ZDYwYWMuLmJiZTU2NTQgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9jbGFzc2ZtdC9NZXRo
b2RJbmZvLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2NsYXNzZm10L01ldGhvZEluZm8uamF2YQpAQCAtMSwx
MyArMSwxOSBAQAogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAw
MCwgMjAxMSBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAw
MCwgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2
ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBt
YWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vu
c2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBh
dmFpbGFibGUgYXQKICAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1s
CiAgKgorICogVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBhbiBlYXJseS1kcmFmdCBzcGVj
aWZpY2F0aW9uIGRldmVsb3BlZCB1bmRlciB0aGUgSmF2YQorICogQ29tbXVuaXR5IFByb2Nlc3Mg
KEpDUCkgYW5kIGlzIG1hZGUgYXZhaWxhYmxlIGZvciB0ZXN0aW5nIGFuZCBldmFsdWF0aW9uIHB1
cnBvc2VzCisgKiBvbmx5LiBUaGUgY29kZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGFueSBzcGVj
aWZpY2F0aW9uIG9mIHRoZSBKQ1AuCisgKiAKKyAqCiAgKiBDb250cmlidXRvcnM6CiAgKiAgICAg
SUJNIENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCiAgKiAgICAg
U3RlcGhhbiBIZXJybWFubiAtIENvbnRyaWJ1dGlvbiBmb3IgYnVnIDE4NjM0MiAtIFtjb21waWxl
cl1bbnVsbF0gVXNpbmcgYW5ub3RhdGlvbnMgZm9yIG51bGwgY2hlY2tpbmcKKyAqICAgICBKZXNw
ZXIgU3RlZW4gTW9lbGxlciAtIENvbnRyaWJ1dGlvbiBmb3IgYnVnIDQwNjk3MyAtIFtjb21waWxl
cl0gUGFyc2UgTWV0aG9kUGFyYW1ldGVycyBhdHRyaWJ1dGUKICAqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqLwogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuY2xhc3NmbXQ7
CiAKQEAgLTIxLDYgKzI3LDcgQEAgaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21w
aWxlci51dGlsLlV0aWw7CiBwdWJsaWMgY2xhc3MgTWV0aG9kSW5mbyBleHRlbmRzIENsYXNzRmls
ZVN0cnVjdCBpbXBsZW1lbnRzIElCaW5hcnlNZXRob2QsIENvbXBhcmFibGUgewogCXN0YXRpYyBw
cml2YXRlIGZpbmFsIGNoYXJbXVtdIG5vRXhjZXB0aW9uID0gQ2hhck9wZXJhdGlvbi5OT19DSEFS
X0NIQVI7CiAJc3RhdGljIHByaXZhdGUgZmluYWwgY2hhcltdW10gbm9Bcmd1bWVudE5hbWVzID0g
Q2hhck9wZXJhdGlvbi5OT19DSEFSX0NIQVI7CisJc3RhdGljIHByaXZhdGUgZmluYWwgY2hhcltd
IEFSRyA9ICJhcmciLnRvQ2hhckFycmF5KCk7ICAvLyROT04tTkxTLTEkCiAJcHJvdGVjdGVkIGlu
dCBhY2Nlc3NGbGFnczsKIAlwcm90ZWN0ZWQgaW50IGF0dHJpYnV0ZUJ5dGVzOwogCXByb3RlY3Rl
ZCBjaGFyW10gZGVzY3JpcHRvcjsKQEAgLTMwLDcgKzM3LDYgQEAgcHVibGljIGNsYXNzIE1ldGhv
ZEluZm8gZXh0ZW5kcyBDbGFzc0ZpbGVTdHJ1Y3QgaW1wbGVtZW50cyBJQmluYXJ5TWV0aG9kLCBD
b21wYXIKIAlwcm90ZWN0ZWQgaW50IHNpZ25hdHVyZVV0ZjhPZmZzZXQ7CiAJcHJvdGVjdGVkIGxv
bmcgdGFnQml0czsKIAlwcm90ZWN0ZWQgY2hhcltdW10gYXJndW1lbnROYW1lczsKLQlwcm90ZWN0
ZWQgaW50IGFyZ3VtZW50TmFtZXNJbmRleDsKIAogcHVibGljIHN0YXRpYyBNZXRob2RJbmZvIGNy
ZWF0ZU1ldGhvZChieXRlIGNsYXNzRmlsZUJ5dGVzW10sIGludCBvZmZzZXRzW10sIGludCBvZmZz
ZXQpIHsKIAlNZXRob2RJbmZvIG1ldGhvZEluZm8gPSBuZXcgTWV0aG9kSW5mbyhjbGFzc0ZpbGVC
eXRlcywgb2Zmc2V0cywgb2Zmc2V0KTsKQEAgLTQ0LDYgKzUwLDExIEBAIHB1YmxpYyBzdGF0aWMg
TWV0aG9kSW5mbyBjcmVhdGVNZXRob2QoYnl0ZSBjbGFzc0ZpbGVCeXRlc1tdLCBpbnQgb2Zmc2V0
c1tdLCBpbnQKIAkJY2hhcltdIGF0dHJpYnV0ZU5hbWUgPSBtZXRob2RJbmZvLnV0ZjhBdCh1dGY4
T2Zmc2V0ICsgMywgbWV0aG9kSW5mby51MkF0KHV0ZjhPZmZzZXQgKyAxKSk7CiAJCWlmIChhdHRy
aWJ1dGVOYW1lLmxlbmd0aCA+IDApIHsKIAkJCXN3aXRjaChhdHRyaWJ1dGVOYW1lWzBdKSB7CisJ
CQkJY2FzZSAnTScgOgorCQkJCQlpZiAoQ2hhck9wZXJhdGlvbi5lcXVhbHMoYXR0cmlidXRlTmFt
ZSwgQXR0cmlidXRlTmFtZXNDb25zdGFudHMuTWV0aG9kUGFyYW1ldGVyc05hbWUpKSB7CisJCQkJ
CQltZXRob2RJbmZvLmRlY29kZU1ldGhvZFBhcmFtZXRlcnMocmVhZE9mZnNldCwgbWV0aG9kSW5m
byk7CisJCQkJCX0KKwkJCQkJYnJlYWs7CiAJCQkJY2FzZSAnUycgOgogCQkJCQlpZiAoQ2hhck9w
ZXJhdGlvbi5lcXVhbHMoQXR0cmlidXRlTmFtZXNDb25zdGFudHMuU2lnbmF0dXJlTmFtZSwgYXR0
cmlidXRlTmFtZSkpCiAJCQkJCQltZXRob2RJbmZvLnNpZ25hdHVyZVV0ZjhPZmZzZXQgPSBtZXRo
b2RJbmZvLmNvbnN0YW50UG9vbE9mZnNldHNbbWV0aG9kSW5mby51MkF0KHJlYWRPZmZzZXQgKyA2
KV0gLSBtZXRob2RJbmZvLnN0cnVjdE9mZnNldDsKQEAgLTQ3NCw3ICs0ODUsNyBAQCBwcml2YXRl
IHZvaWQgZGVjb2RlTG9jYWxWYXJpYWJsZUF0dHJpYnV0ZShpbnQgb2Zmc2V0LCBpbnQgY29kZUxl
bmd0aCkgewogCWlmIChsZW5ndGggIT0gMCkgewogCQlyZWFkT2Zmc2V0ICs9IDI7CiAJCXRoaXMu
YXJndW1lbnROYW1lcyA9IG5ldyBjaGFyW2xlbmd0aF1bXTsKLQkJdGhpcy5hcmd1bWVudE5hbWVz
SW5kZXggPSAwOworCQlpbnQgYXJndW1lbnROYW1lc0luZGV4ID0gMDsKIAkJZm9yIChpbnQgaSA9
IDA7IGkgPCBsZW5ndGg7IGkrKykgewogCQkJaW50IHN0YXJ0UEMgPSB1MkF0KHJlYWRPZmZzZXQp
OwogCQkJaWYgKHN0YXJ0UEMgPT0gMCkgewpAQCAtNDgyLDE2ICs0OTMsMzUgQEAgcHJpdmF0ZSB2
b2lkIGRlY29kZUxvY2FsVmFyaWFibGVBdHRyaWJ1dGUoaW50IG9mZnNldCwgaW50IGNvZGVMZW5n
dGgpIHsKIAkJCQlpbnQgdXRmOE9mZnNldCA9IHRoaXMuY29uc3RhbnRQb29sT2Zmc2V0c1tuYW1l
SW5kZXhdIC0gdGhpcy5zdHJ1Y3RPZmZzZXQ7CiAJCQkJY2hhcltdIGxvY2FsVmFyaWFibGVOYW1l
ID0gdXRmOEF0KHV0ZjhPZmZzZXQgKyAzLCB1MkF0KHV0ZjhPZmZzZXQgKyAxKSk7CiAJCQkJaWYg
KCFDaGFyT3BlcmF0aW9uLmVxdWFscyhsb2NhbFZhcmlhYmxlTmFtZSwgQ29uc3RhbnRQb29sLlRo
aXMpKSB7Ci0JCQkJCXRoaXMuYXJndW1lbnROYW1lc1t0aGlzLmFyZ3VtZW50TmFtZXNJbmRleCsr
XSA9IGxvY2FsVmFyaWFibGVOYW1lOworCQkJCQl0aGlzLmFyZ3VtZW50TmFtZXNbYXJndW1lbnRO
YW1lc0luZGV4KytdID0gbG9jYWxWYXJpYWJsZU5hbWU7CiAJCQkJfQogCQkJfSBlbHNlIHsKIAkJ
CQlicmVhazsKIAkJCX0KIAkJCXJlYWRPZmZzZXQgKz0gMTA7CiAJCX0KLQkJaWYgKHRoaXMuYXJn
dW1lbnROYW1lc0luZGV4ICE9IHRoaXMuYXJndW1lbnROYW1lcy5sZW5ndGgpIHsKKwkJaWYgKGFy
Z3VtZW50TmFtZXNJbmRleCAhPSB0aGlzLmFyZ3VtZW50TmFtZXMubGVuZ3RoKSB7CiAJCQkvLyBy
ZXNpemUKLQkJCVN5c3RlbS5hcnJheWNvcHkodGhpcy5hcmd1bWVudE5hbWVzLCAwLCAodGhpcy5h
cmd1bWVudE5hbWVzID0gbmV3IGNoYXJbdGhpcy5hcmd1bWVudE5hbWVzSW5kZXhdW10pLCAwLCB0
aGlzLmFyZ3VtZW50TmFtZXNJbmRleCk7CisJCQlTeXN0ZW0uYXJyYXljb3B5KHRoaXMuYXJndW1l
bnROYW1lcywgMCwgKHRoaXMuYXJndW1lbnROYW1lcyA9IG5ldyBjaGFyW2FyZ3VtZW50TmFtZXNJ
bmRleF1bXSksIDAsIGFyZ3VtZW50TmFtZXNJbmRleCk7CisJCX0KKwl9Cit9Citwcml2YXRlIHZv
aWQgZGVjb2RlTWV0aG9kUGFyYW1ldGVycyhpbnQgb2Zmc2V0LCBNZXRob2RJbmZvIG1ldGhvZElu
Zm8pIHsKKwlpbnQgcmVhZE9mZnNldCA9IG9mZnNldCArIDY7CisJZmluYWwgaW50IGxlbmd0aCA9
IHUxQXQocmVhZE9mZnNldCk7CisJaWYgKGxlbmd0aCAhPSAwKSB7CisJCXJlYWRPZmZzZXQgKz0g
MTsKKwkJdGhpcy5hcmd1bWVudE5hbWVzID0gbmV3IGNoYXJbbGVuZ3RoXVtdOworCQlmb3IgKGlu
dCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CisJCQlpbnQgbmFtZUluZGV4ID0gdTJBdChyZWFk
T2Zmc2V0KTsKKwkJCWlmIChuYW1lSW5kZXggIT0gMCkgeworCQkJCWludCB1dGY4T2Zmc2V0ID0g
dGhpcy5jb25zdGFudFBvb2xPZmZzZXRzW25hbWVJbmRleF0gLSB0aGlzLnN0cnVjdE9mZnNldDsK
KwkJCQljaGFyW10gcGFyYW1ldGVyTmFtZSA9IHV0ZjhBdCh1dGY4T2Zmc2V0ICsgMywgdTJBdCh1
dGY4T2Zmc2V0ICsgMSkpOworCQkJCXRoaXMuYXJndW1lbnROYW1lc1tpXSA9IHBhcmFtZXRlck5h
bWU7CisJCQl9IGVsc2UgeworCQkJCXRoaXMuYXJndW1lbnROYW1lc1tpXSA9IENoYXJPcGVyYXRp
b24uY29uY2F0KEFSRywgU3RyaW5nLnZhbHVlT2YoaSkudG9DaGFyQXJyYXkoKSk7CisJCQl9CisJ
CQlyZWFkT2Zmc2V0ICs9IDQ7CiAJCX0KIAl9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvY29kZWdl
bi9BdHRyaWJ1dGVOYW1lc0NvbnN0YW50cy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2NvZGVnZW4vQXR0cmlidXRl
TmFtZXNDb25zdGFudHMuamF2YQppbmRleCA4ZmQ0MWVjLi41MzRlZWYwIDEwMDY0NAotLS0gYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvY29kZWdlbi9BdHRyaWJ1dGVOYW1lc0NvbnN0YW50cy5qYXZhCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9j
b2RlZ2VuL0F0dHJpYnV0ZU5hbWVzQ29uc3RhbnRzLmphdmEKQEAgLTEzLDYgKzEzLDcgQEAKICAq
ICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24KICAq
ICAgICBKZXNwZXIgUyBNb2xsZXIgLSBDb250cmlidXRpb25zIGZvcgogICoJCQkJCQkJQnVnIDQw
NTA2NiAtIFsxLjhdW2NvbXBpbGVyXVtjb2RlZ2VuXSBJbXBsZW1lbnQgY29kZSBnZW5lcmF0aW9u
IGluZnJhc3RydWN0dXJlIGZvciBKU1IzMzUgICAgICAgICAgICAgCisgKgkJCQkJCQlCdWcgNDA2
OTczIC0gW2NvbXBpbGVyXSBQYXJzZSBNZXRob2RQYXJhbWV0ZXJzIGF0dHJpYnV0ZQogICogICAg
ICAgIEFuZHkgQ2xlbWVudCAtIENvbnRyaWJ1dGlvbnMgZm9yCiAgKiAgICAgICAgICAgICAgICAg
ICAgICAgICAgQnVnIDM4MzYyNCAtIFsxLjhdW2NvbXBpbGVyXSBSZXZpdmUgY29kZSBnZW5lcmF0
aW9uIHN1cHBvcnQgZm9yIHR5cGUgYW5ub3RhdGlvbnMgKGZyb20gT2xpdmllcidzIHdvcmspCiAg
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKi8KQEAgLTQ1LDQgKzQ2LDYgQEAgcHVibGljIGludGVyZmFj
ZSBBdHRyaWJ1dGVOYW1lc0NvbnN0YW50cyB7CiAJLy8ganNyMzA4CiAJZmluYWwgY2hhcltdIFJ1
bnRpbWVWaXNpYmxlVHlwZUFubm90YXRpb25zTmFtZSA9ICJSdW50aW1lVmlzaWJsZVR5cGVBbm5v
dGF0aW9ucyIudG9DaGFyQXJyYXkoKTsgLy8kTk9OLU5MUy0xJAogCWZpbmFsIGNoYXJbXSBSdW50
aW1lSW52aXNpYmxlVHlwZUFubm90YXRpb25zTmFtZSA9ICJSdW50aW1lSW52aXNpYmxlVHlwZUFu
bm90YXRpb25zIi50b0NoYXJBcnJheSgpOyAvLyROT04tTkxTLTEkCisJLy8gamVwMTE4CisJZmlu
YWwgY2hhcltdIE1ldGhvZFBhcmFtZXRlcnNOYW1lID0gIk1ldGhvZFBhcmFtZXRlcnMiLnRvQ2hh
ckFycmF5KCk7IC8vJE5PTi1OTFMtMSQKIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9jb3JlL3V0aWwvSUF0dHJpYnV0ZU5hbWVzQ29uc3Rh
bnRzLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvY29y
ZS91dGlsL0lBdHRyaWJ1dGVOYW1lc0NvbnN0YW50cy5qYXZhCmluZGV4IDA1NmRlMmIuLmRhN2Qy
NmIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pk
dC9jb3JlL3V0aWwvSUF0dHJpYnV0ZU5hbWVzQ29uc3RhbnRzLmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2NvcmUvdXRpbC9JQXR0cmlidXRlTmFt
ZXNDb25zdGFudHMuamF2YQpAQCAtMTMsNiArMTMsOCBAQAogICogICAgIElCTSBDb3Jwb3JhdGlv
biAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgogICogICAgICAgIEFuZHkgQ2xlbWVu
dCAtIENvbnRyaWJ1dGlvbnMgZm9yCiAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgQnVnIDM4
MzYyNCAtIFsxLjhdW2NvbXBpbGVyXSBSZXZpdmUgY29kZSBnZW5lcmF0aW9uIHN1cHBvcnQgZm9y
IHR5cGUgYW5ub3RhdGlvbnMgKGZyb20gT2xpdmllcidzIHdvcmspCisgKiAgICAgICAgSmVzcGVy
IFN0ZWVuIE1vbGxlciAtIENvbnRyaWJ1dGlvbnMgZm9yCisgKgkJCQkJCQlCdWcgNDA2OTczIC0g
W2NvbXBpbGVyXSBQYXJzZSBNZXRob2RQYXJhbWV0ZXJzIGF0dHJpYnV0ZQogICoqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKiovCiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5jb3JlLnV0aWw7CiAKQEAgLTE2
NSw0ICsxNjcsMTAgQEAgcHVibGljIGludGVyZmFjZSBJQXR0cmlidXRlTmFtZXNDb25zdGFudHMg
ewogCSAqIEBzaW5jZSAzLjgKIAkgKi8KIAljaGFyW10gQk9PVFNUUkFQX01FVEhPRFMgPSAiQm9v
dHN0cmFwTWV0aG9kcyIudG9DaGFyQXJyYXkoKTsgLy8kTk9OLU5MUy0xJAorCisJLyoqCisJICog
Ik1ldGhvZFBhcmFtZXRlcnMiIGF0dHJpYnV0ZSAoYWRkZWQgaW4gamVwMTE4KS4KKwkgKiBAc2lu
Y2UgMy45IEJFVEFfSkFWQTgKKwkgKi8KKwljaGFyW10gTUVUSE9EX1BBUkFNRVRFUlMgPSAiTWV0
aG9kUGFyYW1ldGVycyIudG9DaGFyQXJyYXkoKTsgLy8kTk9OLU5MUy0xJAogfQpkaWZmIC0tZ2l0
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2NvcmUvdXRpbC9J
TWV0aG9kUGFyYW1ldGVyc0F0dHJpYnV0ZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9k
ZWwvb3JnL2VjbGlwc2UvamR0L2NvcmUvdXRpbC9JTWV0aG9kUGFyYW1ldGVyc0F0dHJpYnV0ZS5q
YXZhCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAuLmRlZjYwYzkKLS0tIC9kZXYv
bnVsbAorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvY29y
ZS91dGlsL0lNZXRob2RQYXJhbWV0ZXJzQXR0cmlidXRlLmphdmEKQEAgLTAsMCArMSw1MiBAQAor
LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioKKyAqIENvcHlyaWdodCAoYykgMjAxMyBKZXNwZXIgU3Rl
ZW4gTW9lbGxlciBhbmQgb3RoZXJzLgorICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9n
cmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscworICogYXJlIG1hZGUgYXZhaWxhYmxl
IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCisgKiB3
aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdAor
ICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKKyAqIAorICogVGhp
cyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBhbiBlYXJseS1kcmFmdCBzcGVjaWZpY2F0aW9uIGRl
dmVsb3BlZCB1bmRlciB0aGUgSmF2YQorICogQ29tbXVuaXR5IFByb2Nlc3MgKEpDUCkgYW5kIGlz
IG1hZGUgYXZhaWxhYmxlIGZvciB0ZXN0aW5nIGFuZCBldmFsdWF0aW9uIHB1cnBvc2VzCisgKiBv
bmx5LiBUaGUgY29kZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGFueSBzcGVjaWZpY2F0aW9uIG9m
IHRoZSBKQ1AuCisgKiAKKyAqIENvbnRyaWJ1dG9yczoKKyAqICAgICBKZXNwZXIgU3RlZW4gTW9l
bGxlciAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgorICoqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKiovCitwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5jb3JlLnV0aWw7CisKKy8qKgorICogRGVz
Y3JpcHRpb24gb2YgYSBtZXRob2QncyBwYXJhbWV0ZXJzIG5hbWVzIGFzIGRlc2NyaWJlZCBpbiB0
aGUgSlZNIHNwZWNpZmljYXRpb25zLgorICoKKyAqIFRoaXMgaW50ZXJmYWNlIG1heSBiZSBpbXBs
ZW1lbnRlZCBieSBjbGllbnRzLgorICoKKyAqIEBzaW5jZSAzLjkgQkVUQV9KQVZBOAorICovCitw
dWJsaWMgaW50ZXJmYWNlIElNZXRob2RQYXJhbWV0ZXJzQXR0cmlidXRlIGV4dGVuZHMgSUNsYXNz
RmlsZUF0dHJpYnV0ZSB7CisKKwkvKioKKwkgKiBBbnN3ZXIgYmFjayB0aGUgbnVtYmVyIG9mIHBh
cmFtZXRlcnMgZm9yIHRoaXMgbWV0aG9kIGFzIHNwZWNpZmllZCBpbgorCSAqIHRoZSBKVk0gc3Bl
Y2lmaWNhdGlvbnMuCisJICoKKwkgKiBAcmV0dXJuIHRoZSBudW1iZXIgb2YgcGFyYW1ldGVycyBm
b3IgdGhpcyBtZXRob2QgYXMgc3BlY2lmaWVkIGluCisJICogdGhlIEpWTSBzcGVjaWZpY2F0aW9u
cworCSAqLworCWludCBnZXRNZXRob2RQYXJhbWV0ZXJMZW5ndGgoKTsKKworCS8qKgorCSAqIEFu
c3dlciBiYWNrIHRoZSBuYW1lIGZvciB0aGUgaSd0aCBwYXJhbWV0ZXIuIEFuc3dlciBudWxsIGlm
IG5vCisJICogbmFtZSBpcyBhdmFpbGFibGUuCisJICoKKwkgKiBAcmV0dXJuIGJhY2sgdGhlIG5h
bWUgZm9yIHRoZSBpJ3RoIHBhcmFtZXRlci4gUmV0dXJucyBudWxsIGlmIG5vCisJICogbmFtZSBp
cyBhdmFpbGFibGUuCisJICovCisJY2hhcltdIGdldFBhcmFtZXRlck5hbWUoaW50IGkpOworCisJ
LyoqCisJICogQW5zd2VyIGJhY2sgdGhlIGFjY2VzcyBmbGFncyBmb3IgdGhlIGkndGggcGFyYW1l
dGVyLCBhIG1hc2sgb2YKKwkgKiA8Y29kZT5BQ0NfRklOQUw8L2NvZGU+LCA8Y29kZT5BQ0NfU1lO
VEhFVElDPC9jb2RlPiwgYW5kIDxjb2RlPkFDQ19NQU5EQVRFRDwvY29kZT4uCisJICoKKwkgKiBA
cmV0dXJuIHRoZSBhY2Nlc3MgZmxhZ3MgZm9yIHRoZSBpJ3RoIHBhcmFtZXRlci4KKwkgKi8KKwlz
aG9ydCBnZXRBY2Nlc3NGbGFncyhpbnQgaSk7CisKK30KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9jb3JlL3V0aWwvSU1vZGlmaWVyQ29uc3Rh
bnRzLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvY29y
ZS91dGlsL0lNb2RpZmllckNvbnN0YW50cy5qYXZhCmluZGV4IGRkNjRjMGIuLjg3NDAyYWEgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L3V0aWwvSU1vZGlmaWVyQ29uc3RhbnRzLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
bW9kZWwvb3JnL2VjbGlwc2UvamR0L2NvcmUvdXRpbC9JTW9kaWZpZXJDb25zdGFudHMuamF2YQpA
QCAtMSwxMiArMSwxOCBAQAogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAo
YykgMjAwMCwgMjAwOCBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAo
YykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMg
cmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAq
IGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGlj
IExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFu
ZCBpcyBhdmFpbGFibGUgYXQKICAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYx
MC5odG1sCiAgKgorICogVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBhbiBlYXJseS1kcmFm
dCBzcGVjaWZpY2F0aW9uIGRldmVsb3BlZCB1bmRlciB0aGUgSmF2YQorICogQ29tbXVuaXR5IFBy
b2Nlc3MgKEpDUCkgYW5kIGlzIG1hZGUgYXZhaWxhYmxlIGZvciB0ZXN0aW5nIGFuZCBldmFsdWF0
aW9uIHB1cnBvc2VzCisgKiBvbmx5LiBUaGUgY29kZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGFu
eSBzcGVjaWZpY2F0aW9uIG9mIHRoZSBKQ1AuCisgKiAKKyAqCiAgKiBDb250cmlidXRvcnM6CiAg
KiAgICAgSUJNIENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCisg
KiAgICAgSmVzcGVyIFN0ZWVuIE1vZWxsZXIgLSBDb250cmlidXRpb24gZm9yIGJ1ZyA0MDY5NzMg
LSBbY29tcGlsZXJdIFBhcnNlIE1ldGhvZFBhcmFtZXRlcnMgYXR0cmlidXRlCiAgKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKi8KIHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmNvcmUudXRpbDsKIApAQCAt
NDQsNyArNTAsNyBAQCBwdWJsaWMgaW50ZXJmYWNlIElNb2RpZmllckNvbnN0YW50cyB7CiAJaW50
IEFDQ19BQlNUUkFDVCAgICAgPSAweDA0MDA7CiAJaW50IEFDQ19TVFJJQ1QgICAgICAgPSAweDA4
MDA7CiAJLyoqCi0JICogSW5kaWNhdGVzIGEgc3ludGhldGljIG1lbWJlci4KKwkgKiBJbmRpY2F0
ZXMgYSBzeW50aGV0aWMgbWVtYmVyIG9yIG1ldGhvZCBwYXJhbWV0ZXIuCiAJICogQHNpbmNlIDMu
MAogCSAqLwogCWludCBBQ0NfU1lOVEhFVElDICAgID0gMHgxMDAwOwpAQCAtNjAsNCArNjYsMTAg
QEAgcHVibGljIGludGVyZmFjZSBJTW9kaWZpZXJDb25zdGFudHMgewogCSAqIEBzaW5jZSAzLjAK
IAkgKi8KIAlpbnQgQUNDX0VOVU0gICAgICAgICA9IDB4NDAwMDsKKworCS8qKgorCSAqIEluZGlj
YXRlcyBhIG1hbmRhdGVkIHBhcmFtZXRlciwgc3VjaCBhcyB0aGlzJDEgKGFkZGVkIGluIEphdmEg
U0UgOCkuCisJICogQHNpbmNlIDMuOSBCRVRBX0pBVkE4CisJICovCisJaW50IEFDQ19NQU5EQVRF
RCAgICAgPSAweDgwMDA7CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2Rl
bC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS91dGlsL0Rpc2Fzc2VtYmxlci5qYXZhIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUv
dXRpbC9EaXNhc3NlbWJsZXIuamF2YQppbmRleCBjNzk2MGI0Li5jOGY5OGU0IDEwMDY0NAotLS0g
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29y
ZS91dGlsL0Rpc2Fzc2VtYmxlci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVs
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3V0aWwvRGlzYXNzZW1ibGVyLmphdmEKQEAg
LTEzLDYgKzEzLDggQEAKICAqICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBhbmQg
aW1wbGVtZW50YXRpb24KICAqICAgICAgICBBbmR5IENsZW1lbnQgKEdvUGl2b3RhbCwgSW5jKSBh
Y2xlbWVudEBnb3Bpdm90YWwuY29tIC0gQ29udHJpYnV0aW9ucyBmb3IKICAqICAgICAgICAgICAg
ICAgICAgICAgICAgICBCdWcgMzgzNjI0IC0gWzEuOF1bY29tcGlsZXJdIFJldml2ZSBjb2RlIGdl
bmVyYXRpb24gc3VwcG9ydCBmb3IgdHlwZSBhbm5vdGF0aW9ucyAoZnJvbSBPbGl2aWVyJ3Mgd29y
aykKKyAqICAgICAgIEplc3BlciBTdGVlbiBNb2VsbGVyIC0gQ29udHJpYnV0aW9ucyBmb3I6Cisg
KiAgICAgICAgICAgICAgICAgICAgICAgICAgQnVnIDQwNjk3MyAtIFtjb21waWxlcl0gUGFyc2Ug
TWV0aG9kUGFyYW1ldGVycyBhdHRyaWJ1dGUKICAqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwogcGFj
a2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS51dGlsOwogCkBAIC05NSw2ICs5Nywx
MiBAQCBwdWJsaWMgY2xhc3MgRGlzYXNzZW1ibGVyIGV4dGVuZHMgQ2xhc3NGaWxlQnl0ZXNEaXNh
c3NlbWJsZXIgewogCQkJCWNhc2UgSU1vZGlmaWVyQ29uc3RhbnRzLkFDQ19FTlVNIDoKIAkJCQkJ
Zmlyc3RNb2RpZmllciA9IGFwcGVuZE1vZGlmaWVyKGJ1ZmZlciwgYWNjZXNzRmxhZ3MsIElNb2Rp
ZmllckNvbnN0YW50cy5BQ0NfRU5VTSwgImVudW0iLCBmaXJzdE1vZGlmaWVyKTsgLy8kTk9OLU5M
Uy0xJAogCQkJCQlicmVhazsKKwkJCQljYXNlIElNb2RpZmllckNvbnN0YW50cy5BQ0NfU1lOVEhF
VElDIDoKKwkJCQkJZmlyc3RNb2RpZmllciA9IGFwcGVuZE1vZGlmaWVyKGJ1ZmZlciwgYWNjZXNz
RmxhZ3MsIElNb2RpZmllckNvbnN0YW50cy5BQ0NfU1lOVEhFVElDLCAic3ludGhldGljIiwgZmly
c3RNb2RpZmllcik7IC8vJE5PTi1OTFMtMSQKKwkJCQkJYnJlYWs7CisJCQkJY2FzZSBJTW9kaWZp
ZXJDb25zdGFudHMuQUNDX01BTkRBVEVEIDoKKwkJCQkJZmlyc3RNb2RpZmllciA9IGFwcGVuZE1v
ZGlmaWVyKGJ1ZmZlciwgYWNjZXNzRmxhZ3MsIElNb2RpZmllckNvbnN0YW50cy5BQ0NfTUFOREFU
RUQsICJtYW5kYXRlZCIsIGZpcnN0TW9kaWZpZXIpOyAvLyROT04tTkxTLTEkCisJCQkJCWJyZWFr
OwogCQkJfQogCQl9CiAJCWlmICghZmlyc3RNb2RpZmllcikgewpAQCAtMTU2LDYgKzE2NCwxNCBA
QCBwdWJsaWMgY2xhc3MgRGlzYXNzZW1ibGVyIGV4dGVuZHMgQ2xhc3NGaWxlQnl0ZXNEaXNhc3Nl
bWJsZXIgewogCQl9KTsKIAl9CiAKKwlwcml2YXRlIGZpbmFsIHZvaWQgZGVjb2RlTW9kaWZpZXJz
Rm9yTWV0aG9kUGFyYW1ldGVycyhTdHJpbmdCdWZmZXIgYnVmZmVyLCBpbnQgYWNjZXNzRmxhZ3Mp
IHsKKwkJZGVjb2RlTW9kaWZpZXJzKGJ1ZmZlciwgYWNjZXNzRmxhZ3MsIGZhbHNlLCB0cnVlLCBu
ZXcgaW50W10geworCQkJCUlNb2RpZmllckNvbnN0YW50cy5BQ0NfRklOQUwsCisJCQkJSU1vZGlm
aWVyQ29uc3RhbnRzLkFDQ19NQU5EQVRFRCwKKwkJCQlJTW9kaWZpZXJDb25zdGFudHMuQUNDX1NZ
TlRIRVRJQywKKwkJfSk7CisJfQorCiAJcHJpdmF0ZSBmaW5hbCB2b2lkIGRlY29kZU1vZGlmaWVy
c0ZvclR5cGUoU3RyaW5nQnVmZmVyIGJ1ZmZlciwgaW50IGFjY2Vzc0ZsYWdzKSB7CiAJCWRlY29k
ZU1vZGlmaWVycyhidWZmZXIsIGFjY2Vzc0ZsYWdzLCBuZXcgaW50W10gewogCQkJCUlNb2RpZmll
ckNvbnN0YW50cy5BQ0NfUFVCTElDLApAQCAtNTc3LDkgKzU5MywyMiBAQCBwdWJsaWMgY2xhc3Mg
RGlzYXNzZW1ibGVyIGV4dGVuZHMgQ2xhc3NGaWxlQnl0ZXNEaXNhc3NlbWJsZXIgewogCQkJfSkp
OwogCX0KIAorCXByaXZhdGUgdm9pZCBkaXNhc3NlbWJsZShJTWV0aG9kUGFyYW1ldGVyc0F0dHJp
YnV0ZSBtZXRob2RQYXJhbWV0ZXJzQXR0cmlidXRlLCBTdHJpbmdCdWZmZXIgYnVmZmVyLCBTdHJp
bmcgbGluZVNlcGFyYXRvciwgaW50IHRhYk51bWJlciwgaW50IG1vZGUpIHsKKwkJdGFiTnVtYmVy
ICs9IDI7CisJCXdyaXRlTmV3TGluZShidWZmZXIsIGxpbmVTZXBhcmF0b3IsIHRhYk51bWJlcik7
CisJCWJ1ZmZlci5hcHBlbmQoTWVzc2FnZXMuZGlzYXNzZW1ibGVyX21ldGhvZHBhcmFtZXRlcnNo
ZWFkZXIpOworCQlmb3IgKGludCBpID0gMDsgaSA8IG1ldGhvZFBhcmFtZXRlcnNBdHRyaWJ1dGUu
Z2V0TWV0aG9kUGFyYW1ldGVyTGVuZ3RoKCk7ICsraSkgeworCQkJd3JpdGVOZXdMaW5lKGJ1ZmZl
ciwgbGluZVNlcGFyYXRvciwgdGFiTnVtYmVyICsgMSk7CisJCQlzaG9ydCBhY2Nlc3NGbGFncyA9
IG1ldGhvZFBhcmFtZXRlcnNBdHRyaWJ1dGUuZ2V0QWNjZXNzRmxhZ3MoaSk7CisJCQlkZWNvZGVN
b2RpZmllcnNGb3JNZXRob2RQYXJhbWV0ZXJzKGJ1ZmZlciwgYWNjZXNzRmxhZ3MpOworCQkJYnVm
ZmVyLmFwcGVuZChtZXRob2RQYXJhbWV0ZXJzQXR0cmlidXRlLmdldFBhcmFtZXRlck5hbWUoaSkp
OworCQl9CisJfQorCiAJcHJpdmF0ZSB2b2lkIGRpc2Fzc2VtYmxlRW51bUNvbnN0cnVjdG9yKElD
bGFzc0ZpbGVSZWFkZXIgY2xhc3NGaWxlUmVhZGVyLCBjaGFyW10gY2xhc3NOYW1lLCBJTWV0aG9k
SW5mbyBtZXRob2RJbmZvLCBTdHJpbmdCdWZmZXIgYnVmZmVyLCBTdHJpbmcgbGluZVNlcGFyYXRv
ciwgaW50IHRhYk51bWJlciwgaW50IG1vZGUpIHsKIAkJd3JpdGVOZXdMaW5lKGJ1ZmZlciwgbGlu
ZVNlcGFyYXRvciwgdGFiTnVtYmVyKTsKIAkJZmluYWwgSUNvZGVBdHRyaWJ1dGUgY29kZUF0dHJp
YnV0ZSA9IG1ldGhvZEluZm8uZ2V0Q29kZUF0dHJpYnV0ZSgpOworCQlJTWV0aG9kUGFyYW1ldGVy
c0F0dHJpYnV0ZSBtZXRob2RQYXJhbWV0ZXJzQXR0cmlidXRlID0gKElNZXRob2RQYXJhbWV0ZXJz
QXR0cmlidXRlKSBVdGlsLmdldEF0dHJpYnV0ZShtZXRob2RJbmZvLCBJQXR0cmlidXRlTmFtZXND
b25zdGFudHMuTUVUSE9EX1BBUkFNRVRFUlMpOwogCQljaGFyW10gbWV0aG9kRGVzY3JpcHRvciA9
IG1ldGhvZEluZm8uZ2V0RGVzY3JpcHRvcigpOwogCQlmaW5hbCBJQ2xhc3NGaWxlQXR0cmlidXRl
IHJ1bnRpbWVWaXNpYmxlQW5ub3RhdGlvbnNBdHRyaWJ1dGUgPSBVdGlsLmdldEF0dHJpYnV0ZSht
ZXRob2RJbmZvLCBJQXR0cmlidXRlTmFtZXNDb25zdGFudHMuUlVOVElNRV9WSVNJQkxFX0FOTk9U
QVRJT05TKTsKIAkJZmluYWwgSUNsYXNzRmlsZUF0dHJpYnV0ZSBydW50aW1lSW52aXNpYmxlQW5u
b3RhdGlvbnNBdHRyaWJ1dGUgPSBVdGlsLmdldEF0dHJpYnV0ZShtZXRob2RJbmZvLCBJQXR0cmli
dXRlTmFtZXNDb25zdGFudHMuUlVOVElNRV9JTlZJU0lCTEVfQU5OT1RBVElPTlMpOwpAQCAtNTk2
LDcgKzYyNSw3IEBAIHB1YmxpYyBjbGFzcyBEaXNhc3NlbWJsZXIgZXh0ZW5kcyBDbGFzc0ZpbGVC
eXRlc0Rpc2Fzc2VtYmxlciB7CiAJCWRlY29kZU1vZGlmaWVyc0Zvck1ldGhvZChidWZmZXIsIGFj
Y2Vzc0ZsYWdzICYgSU1vZGlmaWVyQ29uc3RhbnRzLkFDQ19QUklWQVRFKTsKIAkJQ2hhck9wZXJh
dGlvbi5yZXBsYWNlKG1ldGhvZERlc2NyaXB0b3IsICcvJywgJy4nKTsKIAkJZmluYWwgYm9vbGVh
biBpc1ZhckFyZ3MgPSAoYWNjZXNzRmxhZ3MgJiBJTW9kaWZpZXJDb25zdGFudHMuQUNDX1ZBUkFS
R1MpICE9IDA7Ci0JCWZpbmFsIGNoYXJbXSBzaWduYXR1cmUgPSBTaWduYXR1cmUudG9DaGFyQXJy
YXkobWV0aG9kRGVzY3JpcHRvciwgcmV0dXJuQ2xhc3NOYW1lKGNsYXNzTmFtZSwgJy4nLCBDT01Q
QUNUKSwgZ2V0UGFyYW1ldGVyTmFtZXMobWV0aG9kRGVzY3JpcHRvciwgY29kZUF0dHJpYnV0ZSwg
YWNjZXNzRmxhZ3MpICwgIWNoZWNrTW9kZShtb2RlLCBDT01QQUNUKSwgZmFsc2UsIGlzVmFyQXJn
cyk7CisJCWZpbmFsIGNoYXJbXSBzaWduYXR1cmUgPSBTaWduYXR1cmUudG9DaGFyQXJyYXkobWV0
aG9kRGVzY3JpcHRvciwgcmV0dXJuQ2xhc3NOYW1lKGNsYXNzTmFtZSwgJy4nLCBDT01QQUNUKSwg
Z2V0UGFyYW1ldGVyTmFtZXMobWV0aG9kRGVzY3JpcHRvciwgY29kZUF0dHJpYnV0ZSwgbWV0aG9k
UGFyYW1ldGVyc0F0dHJpYnV0ZSwgYWNjZXNzRmxhZ3MpICwgIWNoZWNrTW9kZShtb2RlLCBDT01Q
QUNUKSwgZmFsc2UsIGlzVmFyQXJncyk7CiAJCWludCBpbmRleCA9IENoYXJPcGVyYXRpb24uaW5k
ZXhPZignLCcsIHNpZ25hdHVyZSk7CiAJCWluZGV4ID0gQ2hhck9wZXJhdGlvbi5pbmRleE9mKCcs
Jywgc2lnbmF0dXJlLCBpbmRleCArIDEpOwogCQlidWZmZXIuYXBwZW5kKHNpZ25hdHVyZSwgMCwg
Q2hhck9wZXJhdGlvbi5pbmRleE9mKCcoJywgc2lnbmF0dXJlKSArIDEpOwpAQCAtNjY5LDYgKzY5
OCw3IEBAIHB1YmxpYyBjbGFzcyBEaXNhc3NlbWJsZXIgZXh0ZW5kcyBDbGFzc0ZpbGVCeXRlc0Rp
c2Fzc2VtYmxlciB7CiAJCWZpbmFsIElDbGFzc0ZpbGVBdHRyaWJ1dGUgcnVudGltZUludmlzaWJs
ZVR5cGVBbm5vdGF0aW9uc0F0dHJpYnV0ZSA9IFV0aWwuZ2V0QXR0cmlidXRlKG1ldGhvZEluZm8s
IElBdHRyaWJ1dGVOYW1lc0NvbnN0YW50cy5SVU5USU1FX0lOVklTSUJMRV9UWVBFX0FOTk9UQVRJ
T05TKTsKIAkJZmluYWwgSUNsYXNzRmlsZUF0dHJpYnV0ZSBydW50aW1lVmlzaWJsZVBhcmFtZXRl
ckFubm90YXRpb25zQXR0cmlidXRlID0gVXRpbC5nZXRBdHRyaWJ1dGUobWV0aG9kSW5mbywgSUF0
dHJpYnV0ZU5hbWVzQ29uc3RhbnRzLlJVTlRJTUVfVklTSUJMRV9QQVJBTUVURVJfQU5OT1RBVElP
TlMpOwogCQlmaW5hbCBJQ2xhc3NGaWxlQXR0cmlidXRlIHJ1bnRpbWVJbnZpc2libGVQYXJhbWV0
ZXJBbm5vdGF0aW9uc0F0dHJpYnV0ZSA9IFV0aWwuZ2V0QXR0cmlidXRlKG1ldGhvZEluZm8sIElB
dHRyaWJ1dGVOYW1lc0NvbnN0YW50cy5SVU5USU1FX0lOVklTSUJMRV9QQVJBTUVURVJfQU5OT1RB
VElPTlMpOworCQlmaW5hbCBJQ2xhc3NGaWxlQXR0cmlidXRlIG1ldGhvZFBhcmFtZXRlcnNBdHRy
aWJ1dGUgPSBVdGlsLmdldEF0dHJpYnV0ZShtZXRob2RJbmZvLCBJQXR0cmlidXRlTmFtZXNDb25z
dGFudHMuTUVUSE9EX1BBUkFNRVRFUlMpOwogCQlmaW5hbCBJQ2xhc3NGaWxlQXR0cmlidXRlIGFu
bm90YXRpb25EZWZhdWx0QXR0cmlidXRlID0gVXRpbC5nZXRBdHRyaWJ1dGUobWV0aG9kSW5mbywg
SUF0dHJpYnV0ZU5hbWVzQ29uc3RhbnRzLkFOTk9UQVRJT05fREVGQVVMVCk7CiAJCWlmIChjaGVj
a01vZGUobW9kZSwgU1lTVEVNIHwgREVUQUlMRUQpKSB7CiAJCQlidWZmZXIuYXBwZW5kKE1lc3Nh
Z2VzLmJpbmQoTWVzc2FnZXMuY2xhc3NmaWxlZm9ybWF0X21ldGhvZGRlc2NyaXB0b3IsCkBAIC03
MTUsNyArNzQ1LDcgQEAgcHVibGljIGNsYXNzIERpc2Fzc2VtYmxlciBleHRlbmRzIENsYXNzRmls
ZUJ5dGVzRGlzYXNzZW1ibGVyIHsKIAkJY2hhcltdIG1ldGhvZEhlYWRlciA9IG51bGw7CiAJCWNo
YXJbXVtdIHBhcmFtZXRlck5hbWVzID0gbnVsbDsKIAkJaWYgKCFtZXRob2RJbmZvLmlzQ2xpbml0
KCkpIHsKLQkJCXBhcmFtZXRlck5hbWVzID0gZ2V0UGFyYW1ldGVyTmFtZXMobWV0aG9kRGVzY3Jp
cHRvciwgY29kZUF0dHJpYnV0ZSwgYWNjZXNzRmxhZ3MpOworCQkJcGFyYW1ldGVyTmFtZXMgPSBn
ZXRQYXJhbWV0ZXJOYW1lcyhtZXRob2REZXNjcmlwdG9yLCBjb2RlQXR0cmlidXRlLCAoSU1ldGhv
ZFBhcmFtZXRlcnNBdHRyaWJ1dGUpbWV0aG9kUGFyYW1ldGVyc0F0dHJpYnV0ZSwgYWNjZXNzRmxh
Z3MpOwogCQl9CiAJCWlmIChtZXRob2RJbmZvLmlzQ29uc3RydWN0b3IoKSkgewogCQkJaWYgKGNo
ZWNrTW9kZShtb2RlLCBXT1JLSU5HX0NPUFkpICYmIHNpZ25hdHVyZUF0dHJpYnV0ZSAhPSBudWxs
KSB7CkBAIC04NzUsNiArOTA1LDExIEBAIHB1YmxpYyBjbGFzcyBEaXNhc3NlbWJsZXIgZXh0ZW5k
cyBDbGFzc0ZpbGVCeXRlc0Rpc2Fzc2VtYmxlciB7CiAJCQkJZGlzYXNzZW1ibGUoY29kZUF0dHJp
YnV0ZSwgcGFyYW1ldGVyTmFtZXMsIG1ldGhvZERlc2NyaXB0b3IsIChhY2Nlc3NGbGFncyAmIElN
b2RpZmllckNvbnN0YW50cy5BQ0NfU1RBVElDKSAhPSAwLCBidWZmZXIsIGxpbmVTZXBhcmF0b3Is
IHRhYk51bWJlciwgbW9kZSk7CiAJCQl9CiAJCX0KKwkJaWYgKGNoZWNrTW9kZShtb2RlLCBTWVNU
RU0gfCBERVRBSUxFRCkpIHsKKwkJCWlmIChtZXRob2RQYXJhbWV0ZXJzQXR0cmlidXRlICE9IG51
bGwpIHsKKwkJCQlkaXNhc3NlbWJsZSgoSU1ldGhvZFBhcmFtZXRlcnNBdHRyaWJ1dGUpbWV0aG9k
UGFyYW1ldGVyc0F0dHJpYnV0ZSwgYnVmZmVyLCBsaW5lU2VwYXJhdG9yLCB0YWJOdW1iZXIsIG1v
ZGUpOworCQkJfQorCQl9CiAJCWlmIChjaGVja01vZGUobW9kZSwgU1lTVEVNKSkgewogCQkJSUNs
YXNzRmlsZUF0dHJpYnV0ZVtdIGF0dHJpYnV0ZXMgPSBtZXRob2RJbmZvLmdldEF0dHJpYnV0ZXMo
KTsKIAkJCWludCBsZW5ndGggPSBhdHRyaWJ1dGVzLmxlbmd0aDsKQEAgLTg5MSw2ICs5MjYsNyBA
QCBwdWJsaWMgY2xhc3MgRGlzYXNzZW1ibGVyIGV4dGVuZHMgQ2xhc3NGaWxlQnl0ZXNEaXNhc3Nl
bWJsZXIgewogCQkJCQkJCSYmIGF0dHJpYnV0ZSAhPSBydW50aW1lVmlzaWJsZVR5cGVBbm5vdGF0
aW9uc0F0dHJpYnV0ZQogCQkJCQkJCSYmIGF0dHJpYnV0ZSAhPSBydW50aW1lSW52aXNpYmxlUGFy
YW1ldGVyQW5ub3RhdGlvbnNBdHRyaWJ1dGUKIAkJCQkJCQkmJiBhdHRyaWJ1dGUgIT0gcnVudGlt
ZVZpc2libGVQYXJhbWV0ZXJBbm5vdGF0aW9uc0F0dHJpYnV0ZQorCQkJCQkJCSYmIGF0dHJpYnV0
ZSAhPSBtZXRob2RQYXJhbWV0ZXJzQXR0cmlidXRlCiAJCQkJCQkJJiYgIUNoYXJPcGVyYXRpb24u
ZXF1YWxzKGF0dHJpYnV0ZS5nZXRBdHRyaWJ1dGVOYW1lKCksIElBdHRyaWJ1dGVOYW1lc0NvbnN0
YW50cy5ERVBSRUNBVEVEKQogCQkJCQkJCSYmICFDaGFyT3BlcmF0aW9uLmVxdWFscyhhdHRyaWJ1
dGUuZ2V0QXR0cmlidXRlTmFtZSgpLCBJQXR0cmlidXRlTmFtZXNDb25zdGFudHMuU1lOVEhFVElD
KSkgewogCQkJCQkJZGlzYXNzZW1ibGUoYXR0cmlidXRlLCBidWZmZXIsIGxpbmVTZXBhcmF0b3Is
IHRhYk51bWJlciwgbW9kZSk7CkBAIC0yNDAyLDI4ICsyNDM4LDM3IEBAIHB1YmxpYyBjbGFzcyBE
aXNhc3NlbWJsZXIgZXh0ZW5kcyBDbGFzc0ZpbGVCeXRlc0Rpc2Fzc2VtYmxlciB7CiAJCXJldHVy
biBudWxsOwogCX0KIAotCXByaXZhdGUgY2hhcltdW10gZ2V0UGFyYW1ldGVyTmFtZXMoY2hhcltd
IG1ldGhvZERlc2NyaXB0b3IsIElDb2RlQXR0cmlidXRlIGNvZGVBdHRyaWJ1dGUsIGludCBhY2Nl
c3NGbGFncykgeworCXByaXZhdGUgY2hhcltdW10gZ2V0UGFyYW1ldGVyTmFtZXMoY2hhcltdIG1l
dGhvZERlc2NyaXB0b3IsIElDb2RlQXR0cmlidXRlIGNvZGVBdHRyaWJ1dGUsIElNZXRob2RQYXJh
bWV0ZXJzQXR0cmlidXRlIHBhcmFtZXRlcnNBdHRyaWJ1dGUsIGludCBhY2Nlc3NGbGFncykgewog
CQlpbnQgcGFyYW1Db3VudCA9IFNpZ25hdHVyZS5nZXRQYXJhbWV0ZXJDb3VudChtZXRob2REZXNj
cmlwdG9yKTsKIAkJY2hhcltdW10gcGFyYW1ldGVyTmFtZXMgPSBuZXcgY2hhcltwYXJhbUNvdW50
XVtdOwogCQkvLyBjaGVjayBpZiB0aGUgY29kZSBhdHRyaWJ1dGUgaGFzIGRlYnVnIGluZm8gZm9y
IHRoaXMgbWV0aG9kCi0JCWlmIChjb2RlQXR0cmlidXRlICE9IG51bGwpIHsKLQkJCUlMb2NhbFZh
cmlhYmxlQXR0cmlidXRlIGxvY2FsVmFyaWFibGVBdHRyaWJ1dGUgPSBjb2RlQXR0cmlidXRlLmdl
dExvY2FsVmFyaWFibGVBdHRyaWJ1dGUoKTsKLQkJCWlmIChsb2NhbFZhcmlhYmxlQXR0cmlidXRl
ICE9IG51bGwpIHsKLQkJCQlJTG9jYWxWYXJpYWJsZVRhYmxlRW50cnlbXSBlbnRyaWVzID0gbG9j
YWxWYXJpYWJsZUF0dHJpYnV0ZS5nZXRMb2NhbFZhcmlhYmxlVGFibGUoKTsKLQkJCQlmaW5hbCBp
bnQgc3RhcnRpbmdJbmRleCA9IChhY2Nlc3NGbGFncyAmIElNb2RpZmllckNvbnN0YW50cy5BQ0Nf
U1RBVElDKSAhPSAwID8gMCA6IDE7Ci0JCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBwYXJhbUNvdW50
OyBpKyspIHsKLQkJCQkJSUxvY2FsVmFyaWFibGVUYWJsZUVudHJ5IHNlYXJjaGVkRW50cnkgPSBn
ZXRFbnRyeUZvcihnZXRMb2NhbEluZGV4KHN0YXJ0aW5nSW5kZXgsIGksIG1ldGhvZERlc2NyaXB0
b3IpLCBlbnRyaWVzKTsKLQkJCQkJaWYgKHNlYXJjaGVkRW50cnkgIT0gbnVsbCkgewotCQkJCQkJ
cGFyYW1ldGVyTmFtZXNbaV0gPSBzZWFyY2hlZEVudHJ5LmdldE5hbWUoKTsKLQkJCQkJfSBlbHNl
IHsKLQkJCQkJCXBhcmFtZXRlck5hbWVzW2ldID0gQ2hhck9wZXJhdGlvbi5jb25jYXQoTWVzc2Fn
ZXMuZGlzYXNzZW1ibGVyX3BhcmFtZXRlcm5hbWUudG9DaGFyQXJyYXkoKSwgSW50ZWdlci50b1N0
cmluZyhpKS50b0NoYXJBcnJheSgpKTsKLQkJCQkJfQotCQkJCX0KLQkJCX0gZWxzZSB7Ci0JCQkJ
Zm9yIChpbnQgaSA9IDA7IGkgPCBwYXJhbUNvdW50OyBpKyspIHsKKwkJaWYgKHBhcmFtZXRlcnNB
dHRyaWJ1dGUgIT0gbnVsbCkgeworCQkJaW50IHBhcmFtZXRlckNvdW50ID0gcGFyYW1ldGVyc0F0
dHJpYnV0ZS5nZXRNZXRob2RQYXJhbWV0ZXJMZW5ndGgoKTsKKwkJCWZvciAoaW50IGkgPSAwOyBp
IDwgcGFyYW1Db3VudDsgaSsrKSB7CisJCQkJaWYgKGkgPCBwYXJhbWV0ZXJDb3VudCAmJiBwYXJh
bWV0ZXJzQXR0cmlidXRlLmdldFBhcmFtZXRlck5hbWUoaSkgIT0gbnVsbCkgeworCQkJCQlwYXJh
bWV0ZXJOYW1lc1tpXSA9IHBhcmFtZXRlcnNBdHRyaWJ1dGUuZ2V0UGFyYW1ldGVyTmFtZShpKTsK
KwkJCQl9IGVsc2UgewogCQkJCQlwYXJhbWV0ZXJOYW1lc1tpXSA9IENoYXJPcGVyYXRpb24uY29u
Y2F0KE1lc3NhZ2VzLmRpc2Fzc2VtYmxlcl9wYXJhbWV0ZXJuYW1lLnRvQ2hhckFycmF5KCksIElu
dGVnZXIudG9TdHJpbmcoaSkudG9DaGFyQXJyYXkoKSk7CiAJCQkJfQogCQkJfQorCQl9IGVsc2Ug
aWYgKGNvZGVBdHRyaWJ1dGUgIT0gbnVsbCkgeworCQkJCUlMb2NhbFZhcmlhYmxlQXR0cmlidXRl
IGxvY2FsVmFyaWFibGVBdHRyaWJ1dGUgPSBjb2RlQXR0cmlidXRlLmdldExvY2FsVmFyaWFibGVB
dHRyaWJ1dGUoKTsKKwkJCQlpZiAobG9jYWxWYXJpYWJsZUF0dHJpYnV0ZSAhPSBudWxsKSB7CisJ
CQkJCUlMb2NhbFZhcmlhYmxlVGFibGVFbnRyeVtdIGVudHJpZXMgPSBsb2NhbFZhcmlhYmxlQXR0
cmlidXRlLmdldExvY2FsVmFyaWFibGVUYWJsZSgpOworCQkJCQlmaW5hbCBpbnQgc3RhcnRpbmdJ
bmRleCA9IChhY2Nlc3NGbGFncyAmIElNb2RpZmllckNvbnN0YW50cy5BQ0NfU1RBVElDKSAhPSAw
ID8gMCA6IDE7CisJCQkJCWZvciAoaW50IGkgPSAwOyBpIDwgcGFyYW1Db3VudDsgaSsrKSB7CisJ
CQkJCQlJTG9jYWxWYXJpYWJsZVRhYmxlRW50cnkgc2VhcmNoZWRFbnRyeSA9IGdldEVudHJ5Rm9y
KGdldExvY2FsSW5kZXgoc3RhcnRpbmdJbmRleCwgaSwgbWV0aG9kRGVzY3JpcHRvciksIGVudHJp
ZXMpOworCQkJCQkJaWYgKHNlYXJjaGVkRW50cnkgIT0gbnVsbCkgeworCQkJCQkJCXBhcmFtZXRl
ck5hbWVzW2ldID0gc2VhcmNoZWRFbnRyeS5nZXROYW1lKCk7CisJCQkJCQl9IGVsc2UgeworCQkJ
CQkJCXBhcmFtZXRlck5hbWVzW2ldID0gQ2hhck9wZXJhdGlvbi5jb25jYXQoTWVzc2FnZXMuZGlz
YXNzZW1ibGVyX3BhcmFtZXRlcm5hbWUudG9DaGFyQXJyYXkoKSwgSW50ZWdlci50b1N0cmluZyhp
KS50b0NoYXJBcnJheSgpKTsKKwkJCQkJCX0KKwkJCQkJfQorCQkJCX0gZWxzZSB7CisJCQkJCWZv
ciAoaW50IGkgPSAwOyBpIDwgcGFyYW1Db3VudDsgaSsrKSB7CisJCQkJCQlwYXJhbWV0ZXJOYW1l
c1tpXSA9IENoYXJPcGVyYXRpb24uY29uY2F0KE1lc3NhZ2VzLmRpc2Fzc2VtYmxlcl9wYXJhbWV0
ZXJuYW1lLnRvQ2hhckFycmF5KCksIEludGVnZXIudG9TdHJpbmcoaSkudG9DaGFyQXJyYXkoKSk7
CisJCQkJCX0KKwkJCQl9CiAJCX0gZWxzZSB7CiAJCQlmb3IgKGludCBpID0gMDsgaSA8IHBhcmFt
Q291bnQ7IGkrKykgewogCQkJCXBhcmFtZXRlck5hbWVzW2ldID0gQ2hhck9wZXJhdGlvbi5jb25j
YXQoTWVzc2FnZXMuZGlzYXNzZW1ibGVyX3BhcmFtZXRlcm5hbWUudG9DaGFyQXJyYXkoKSwgSW50
ZWdlci50b1N0cmluZyhpKS50b0NoYXJBcnJheSgpKTsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3V0aWwvTWVzc2Fn
ZXMuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb3JlL3V0aWwvTWVzc2FnZXMuamF2YQppbmRleCAyZGUzMzYyLi40MjA3Y2JjIDEwMDY0
NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29yZS91dGlsL01lc3NhZ2VzLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9k
ZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvdXRpbC9NZXNzYWdlcy5qYXZhCkBAIC0x
Myw2ICsxMyw4IEBACiAgKiAgICAgSUJNIENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGlt
cGxlbWVudGF0aW9uCiAgKiAgICAgICAgQW5keSBDbGVtZW50IChHb1Bpdm90YWwsIEluYykgYWNs
ZW1lbnRAZ29waXZvdGFsLmNvbSAtIENvbnRyaWJ1dGlvbnMgZm9yCiAgKiAgICAgICAgICAgICAg
ICAgICAgICAgICAgQnVnIDM4MzYyNCAtIFsxLjhdW2NvbXBpbGVyXSBSZXZpdmUgY29kZSBnZW5l
cmF0aW9uIHN1cHBvcnQgZm9yIHR5cGUgYW5ub3RhdGlvbnMgKGZyb20gT2xpdmllcidzIHdvcmsp
CisgKiAgICAgSmVzcGVyIFN0ZWVuIE1vZWxsZXIgLSBDb250cmlidXRpb24gZm9yCisgKiAgICAg
ICAgICAgICAgICAgICAgICAgICAgQnVnIDQwNjk3MyAtIFtjb21waWxlcl0gUGFyc2UgTWV0aG9k
UGFyYW1ldGVycyBhdHRyaWJ1dGUKICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwogcGFja2FnZSBv
cmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS51dGlsOwogCkBAIC0yNTUsNiArMjU3LDcgQEAg
cHVibGljIGZpbmFsIGNsYXNzIE1lc3NhZ2VzIGV4dGVuZHMgTkxTIHsKIAlwdWJsaWMgc3RhdGlj
IFN0cmluZyBkaXNhc3NlbWJsZXJfZW5jbG9zaW5nbWV0aG9kaGVhZGVyOwogCXB1YmxpYyBzdGF0
aWMgU3RyaW5nIGRpc2Fzc2VtYmxlcl9leGNlcHRpb250YWJsZWhlYWRlcjsKIAlwdWJsaWMgc3Rh
dGljIFN0cmluZyBkaXNhc3NlbWJsZXJfbGluZW51bWJlcmF0dHJpYnV0ZWhlYWRlcjsKKwlwdWJs
aWMgc3RhdGljIFN0cmluZyBkaXNhc3NlbWJsZXJfbWV0aG9kcGFyYW1ldGVyc2hlYWRlcjsKIAlw
dWJsaWMgc3RhdGljIFN0cmluZyBkaXNhc3NlbWJsZXJfbG9jYWx2YXJpYWJsZXRhYmxlYXR0cmli
dXRlaGVhZGVyOwogCXB1YmxpYyBzdGF0aWMgU3RyaW5nIGRpc2Fzc2VtYmxlcl9sb2NhbHZhcmlh
YmxldHlwZXRhYmxlYXR0cmlidXRlaGVhZGVyOwogCXB1YmxpYyBzdGF0aWMgU3RyaW5nIGRpc2Fz
c2VtYmxlcl9hcnJheWRpbWVuc2lvbnM7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS91dGlsL01ldGhvZEluZm8uamF2
YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b3JlL3V0aWwvTWV0aG9kSW5mby5qYXZhCmluZGV4IDcxYmY3ODIuLjBiM2MzYjAgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b3JlL3V0aWwvTWV0aG9kSW5mby5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVs
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3V0aWwvTWV0aG9kSW5mby5qYXZhCkBAIC0x
Myw2ICsxMyw4IEBACiAgKiAgICAgSUJNIENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGlt
cGxlbWVudGF0aW9uCiAgKiAgICAgICAgQW5keSBDbGVtZW50IC0gQ29udHJpYnV0aW9ucyBmb3IK
ICAqICAgICAgICAgICAgICAgICAgICAgICAgICBCdWcgMzgzNjI0IC0gWzEuOF1bY29tcGlsZXJd
IFJldml2ZSBjb2RlIGdlbmVyYXRpb24gc3VwcG9ydCBmb3IgdHlwZSBhbm5vdGF0aW9ucyAoZnJv
bSBPbGl2aWVyJ3Mgd29yaykKKyAqICAgICAgICBKZXNwZXIgU3RlZW4gTW9lbGxlciAtIENvbnRy
aWJ1dGlvbiBmb3IKKyAqICAgICAgICAgICAgICAgICAgICAgICAgICBCdWcgNDA2OTczIC0gW2Nv
bXBpbGVyXSBQYXJzZSBNZXRob2RQYXJhbWV0ZXJzIGF0dHJpYnV0ZQogICoqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKiovCiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLnV0aWw7CiAK
QEAgLTEyNCw2ICsxMjYsOCBAQCBwdWJsaWMgY2xhc3MgTWV0aG9kSW5mbyBleHRlbmRzIENsYXNz
RmlsZVN0cnVjdCBpbXBsZW1lbnRzIElNZXRob2RJbmZvIHsKIAkJCQl0aGlzLmF0dHJpYnV0ZXNb
YXR0cmlidXRlc0luZGV4KytdID0gbmV3IFJ1bnRpbWVWaXNpYmxlVHlwZUFubm90YXRpb25zQXR0
cmlidXRlKGNsYXNzRmlsZUJ5dGVzLCBjb25zdGFudFBvb2wsIG9mZnNldCArIHJlYWRPZmZzZXQp
OwogCQkJfSBlbHNlIGlmIChlcXVhbHMoYXR0cmlidXRlTmFtZSwgSUF0dHJpYnV0ZU5hbWVzQ29u
c3RhbnRzLlJVTlRJTUVfSU5WSVNJQkxFX1RZUEVfQU5OT1RBVElPTlMpKSB7CiAJCQkJdGhpcy5h
dHRyaWJ1dGVzW2F0dHJpYnV0ZXNJbmRleCsrXSA9IG5ldyBSdW50aW1lSW52aXNpYmxlVHlwZUFu
bm90YXRpb25zQXR0cmlidXRlKGNsYXNzRmlsZUJ5dGVzLCBjb25zdGFudFBvb2wsIG9mZnNldCAr
IHJlYWRPZmZzZXQpOworCQkJfSBlbHNlIGlmIChlcXVhbHMoYXR0cmlidXRlTmFtZSwgSUF0dHJp
YnV0ZU5hbWVzQ29uc3RhbnRzLk1FVEhPRF9QQVJBTUVURVJTKSkgeworCQkJCXRoaXMuYXR0cmli
dXRlc1thdHRyaWJ1dGVzSW5kZXgrK10gPSBuZXcgTWV0aG9kUGFyYW1ldGVyc0F0dHJpYnV0ZShj
bGFzc0ZpbGVCeXRlcywgY29uc3RhbnRQb29sLCBvZmZzZXQgKyByZWFkT2Zmc2V0KTsKIAkJCX0g
ZWxzZSB7CiAJCQkJdGhpcy5hdHRyaWJ1dGVzW2F0dHJpYnV0ZXNJbmRleCsrXSA9IG5ldyBDbGFz
c0ZpbGVBdHRyaWJ1dGUoY2xhc3NGaWxlQnl0ZXMsIGNvbnN0YW50UG9vbCwgb2Zmc2V0ICsgcmVh
ZE9mZnNldCk7CiAJCQl9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS91dGlsL01ldGhvZFBhcmFtZXRlcnNBdHRyaWJ1
dGUuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb3JlL3V0aWwvTWV0aG9kUGFyYW1ldGVyc0F0dHJpYnV0ZS5qYXZhCm5ldyBmaWxlIG1v
ZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAuLjEwY2U3N2IKLS0tIC9kZXYvbnVsbAorKysgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS91dGls
L01ldGhvZFBhcmFtZXRlcnNBdHRyaWJ1dGUuamF2YQpAQCAtMCwwICsxLDg3IEBACisvKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKgorICogQ29weXJpZ2h0IChjKSAyMDEzIEplc3BlciBTdGVlbiBNb2Vs
bGVyIGFuZCBvdGhlcnMuCisgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5k
IHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCisgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIg
dGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKKyAqIHdoaWNoIGFj
Y29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CisgKiBodHRw
Oi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbAorICogCisgKiBUaGlzIGlzIGFu
IGltcGxlbWVudGF0aW9uIG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVk
IHVuZGVyIHRoZSBKYXZhCisgKiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBh
dmFpbGFibGUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRo
ZSBjb2RlIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpD
UC4KKyAqIAorICogQ29udHJpYnV0b3JzOgorICogICAgIEplc3BlciBTdGVlbiBNb2VsbGVyIC0g
aW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCisgKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8K
KworcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS51dGlsOworCitpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmNvcmUudXRpbC5DbGFzc0Zvcm1hdEV4Y2VwdGlvbjsKK2ltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuY29yZS51dGlsLklDb25zdGFudFBvb2w7CitpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmNvcmUudXRpbC5JQ29uc3RhbnRQb29sQ29uc3RhbnQ7CitpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmNvcmUudXRpbC5JQ29uc3RhbnRQb29sRW50cnk7CitpbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmNvcmUudXRpbC5JTWV0aG9kUGFyYW1ldGVyc0F0dHJpYnV0ZTsKKworLyoqCisgKiBAc2lu
Y2UgMy45IEJFVEFfSkFWQTgKKyAqLworcHVibGljIGNsYXNzIE1ldGhvZFBhcmFtZXRlcnNBdHRy
aWJ1dGUgZXh0ZW5kcyBDbGFzc0ZpbGVBdHRyaWJ1dGUgaW1wbGVtZW50cyBJTWV0aG9kUGFyYW1l
dGVyc0F0dHJpYnV0ZSB7CisKKwlwcml2YXRlIHN0YXRpYyBmaW5hbCBjaGFyW11bXSBOT19OQU1F
UyA9IG5ldyBjaGFyWzBdW107CisJcHJpdmF0ZSBzdGF0aWMgZmluYWwgc2hvcnRbXSBOT19BQ0NF
U19GTEFHUyA9IG5ldyBzaG9ydFswXTsKKwkKKwlwcml2YXRlIGZpbmFsIGludCBudW1iZXJPZkVu
dHJpZXM7CisJcHJpdmF0ZSBmaW5hbCBjaGFyW11bXSBuYW1lczsKKwlwcml2YXRlIGZpbmFsIHNo
b3J0W10gYWNjZXNzRmxhZ3M7CisJCisKKwlNZXRob2RQYXJhbWV0ZXJzQXR0cmlidXRlKGJ5dGVb
XSBjbGFzc0ZpbGVCeXRlcywgSUNvbnN0YW50UG9vbCBjb25zdGFudFBvb2wsIGludCBvZmZzZXQp
IHRocm93cyBDbGFzc0Zvcm1hdEV4Y2VwdGlvbiB7CisJCXN1cGVyKGNsYXNzRmlsZUJ5dGVzLCBj
b25zdGFudFBvb2wsIG9mZnNldCk7CisJCQorCQlmaW5hbCBpbnQgbGVuZ3RoID0gdTFBdChjbGFz
c0ZpbGVCeXRlcywgNiwgb2Zmc2V0KTsKKwkJdGhpcy5udW1iZXJPZkVudHJpZXMgPSBsZW5ndGg7
CisJCWlmIChsZW5ndGggIT0gMCkgeworCQkJaW50IHJlYWRPZmZzZXQgPSBvZmZzZXQgKyA3Owor
CQkJdGhpcy5uYW1lcyA9IG5ldyBjaGFyW2xlbmd0aF1bXTsKKwkJCXRoaXMuYWNjZXNzRmxhZ3Mg
PSBuZXcgc2hvcnRbbGVuZ3RoXTsKKwkJCWZvciAoaW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKysp
IHsKKwkJCQlpbnQgbmFtZUluZGV4ID0gdTJBdChjbGFzc0ZpbGVCeXRlcywgMCwgcmVhZE9mZnNl
dCk7CisJCQkJaW50IG1hc2sgPSB1MkF0KGNsYXNzRmlsZUJ5dGVzLCAyLCByZWFkT2Zmc2V0KTsK
KwkJCQlyZWFkT2Zmc2V0ICs9IDQ7CisJCQkJaWYgKG5hbWVJbmRleCAhPSAwKSB7CisJCQkJCUlD
b25zdGFudFBvb2xFbnRyeSBjb25zdGFudFBvb2xFbnRyeSA9IGNvbnN0YW50UG9vbC5kZWNvZGVF
bnRyeShuYW1lSW5kZXgpOworCQkJCQlpZiAoY29uc3RhbnRQb29sRW50cnkuZ2V0S2luZCgpICE9
IElDb25zdGFudFBvb2xDb25zdGFudC5DT05TVEFOVF9VdGY4KSB7CisJCQkJCQl0aHJvdyBuZXcg
Q2xhc3NGb3JtYXRFeGNlcHRpb24oQ2xhc3NGb3JtYXRFeGNlcHRpb24uSU5WQUxJRF9DT05TVEFO
VF9QT09MX0VOVFJZKTsKKwkJCQkJfQorCQkJCQl0aGlzLm5hbWVzW2ldID0gY29uc3RhbnRQb29s
RW50cnkuZ2V0VXRmOFZhbHVlKCk7CisJCQkJfSBlbHNlIHsKKwkJCQkJdGhpcy5uYW1lc1tpXSA9
IG51bGw7CisJCQkJfQorCQkJCXRoaXMuYWNjZXNzRmxhZ3NbaV0gPSAoc2hvcnQpIChtYXNrICYg
MHhGRkZGKTsKKwkJCX0KKwkJfSBlbHNlIHsKKwkJCXRoaXMubmFtZXMgPSBOT19OQU1FUzsKKwkJ
CXRoaXMuYWNjZXNzRmxhZ3MgPSBOT19BQ0NFU19GTEFHUzsKKwkJfQorCX0KKworCS8qIChub24t
SmF2YWRvYykKKwkgKiBAc2VlIG9yZy5lY2xpcHNlLmpkdC5jb3JlLnV0aWwuSU1ldGhvZFBhcmFt
ZXRlcnNBdHRyaWJ1dGUjZ2V0TWV0aG9kUGFyYW1ldGVyTGVuZ3RoKCkKKwkgKi8KKwlwdWJsaWMg
aW50IGdldE1ldGhvZFBhcmFtZXRlckxlbmd0aCgpIHsKKwkJcmV0dXJuIHRoaXMubnVtYmVyT2ZF
bnRyaWVzOworCX0KKworCS8qIChub24tSmF2YWRvYykKKwkgKiBAc2VlIG9yZy5lY2xpcHNlLmpk
dC5jb3JlLnV0aWwuSU1ldGhvZFBhcmFtZXRlcnNBdHRyaWJ1dGUjZ2V0UGFyYW1ldGVyTmFtZShp
bnQpCisJICovCisJcHVibGljIGNoYXJbXSBnZXRQYXJhbWV0ZXJOYW1lKGludCBpKSB7CisJCXJl
dHVybiB0aGlzLm5hbWVzW2ldOworCX0KKworCS8qIChub24tSmF2YWRvYykKKwkgKiBAc2VlIG9y
Zy5lY2xpcHNlLmpkdC5jb3JlLnV0aWwuSU1ldGhvZFBhcmFtZXRlcnNBdHRyaWJ1dGUjZ2V0QWNj
ZXNzRmxhZ3MoaW50KQorCSAqLworCXB1YmxpYyBzaG9ydCBnZXRBY2Nlc3NGbGFncyhpbnQgaSkg
eworCQlyZXR1cm4gdGhpcy5hY2Nlc3NGbGFnc1tpXTsKKwl9Cit9CmRpZmYgLS1naXQgYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS91dGls
L21lc3NhZ2VzLnByb3BlcnRpZXMgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29yZS91dGlsL21lc3NhZ2VzLnByb3BlcnRpZXMKaW5kZXggMzBm
YWQzOC4uNzcxNWE3ZSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvdXRpbC9tZXNzYWdlcy5wcm9wZXJ0aWVzCisrKyBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3Jl
L3V0aWwvbWVzc2FnZXMucHJvcGVydGllcwpAQCAtMTMsNiArMTMsOCBAQAogIyAgICAgSUJNIENv
cnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCiAjICAgICAgICBBbmR5
IENsZW1lbnQgKEdvUGl2b3RhbCwgSW5jKSBhY2xlbWVudEBnb3Bpdm90YWwuY29tIC0gQ29udHJp
YnV0aW9ucyBmb3IKICMgICAgICAgICAgICAgICAgICAgICAgICAgIEJ1ZyAzODM2MjQgLSBbMS44
XVtjb21waWxlcl0gUmV2aXZlIGNvZGUgZ2VuZXJhdGlvbiBzdXBwb3J0IGZvciB0eXBlIGFubm90
YXRpb25zIChmcm9tIE9saXZpZXIncyB3b3JrKQorIyAgICAgICAgSmVzcGVyIFN0ZWVuIE1vZWxs
ZXIgLSBDb250cmlidXRpb24gZm9yCisjICAgICAgICAgICAgICAgICAgICAgICAgICBCdWcgNDA2
OTczIC0gW2NvbXBpbGVyXSBQYXJzZSBNZXRob2RQYXJhbWV0ZXJzIGF0dHJpYnV0ZQogIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIwogCiAjIyMgSmF2YU1vZGVsIG1lc3NhZ2VzLgpAQCAtMjc5LDYgKzI4
MSw3IEBAIGRpc2Fzc2VtYmxlcl9zb3VyY2VhdHRyaWJ1dGVoZWFkZXIgPSBDb21waWxlZCBmcm9t
XAogZGlzYXNzZW1ibGVyX2VuY2xvc2luZ21ldGhvZGhlYWRlciA9IEVuY2xvc2luZyBNZXRob2Q6
CiBkaXNhc3NlbWJsZXJfZXhjZXB0aW9udGFibGVoZWFkZXIgPSBFeGNlcHRpb24gVGFibGU6CiBk
aXNhc3NlbWJsZXJfbGluZW51bWJlcmF0dHJpYnV0ZWhlYWRlciA9IExpbmUgbnVtYmVyczoKK2Rp
c2Fzc2VtYmxlcl9tZXRob2RwYXJhbWV0ZXJzaGVhZGVyID0gTWV0aG9kIFBhcmFtZXRlcnM6CiBk
aXNhc3NlbWJsZXJfbG9jYWx2YXJpYWJsZXRhYmxlYXR0cmlidXRlaGVhZGVyID0gTG9jYWwgdmFy
aWFibGUgdGFibGU6CiBkaXNhc3NlbWJsZXJfbG9jYWx2YXJpYWJsZXR5cGV0YWJsZWF0dHJpYnV0
ZWhlYWRlciA9IExvY2FsIHZhcmlhYmxlIHR5cGUgdGFibGU6CiBkaXNhc3NlbWJsZXJfYXJyYXlk
aW1lbnNpb25zID0gW10KLS0gCjEuNy43LjUgKEFwcGxlIEdpdC0yNikKCg==
</data>

          </attachment>
      

    </bug>

</bugzilla>