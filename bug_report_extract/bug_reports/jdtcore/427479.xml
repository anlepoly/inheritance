<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>427479</bug_id>
          
          <creation_ts>2014-02-05 10:33:00 -0500</creation_ts>
          <short_desc>Internal compiler error: java.lang.UnsupportedOperationException: Breaking a dependency cycle NYI</short_desc>
          <delta_ts>2014-02-21 07:00:34 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>427059</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Lars Sadau">lars</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>jarthana</cc>
    
    <cc>sarika.sinha</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2359152</commentid>
    <comment_count>0</comment_count>
      <attachid>239664</attachid>
    <who name="Lars Sadau">lars</who>
    <bug_when>2014-02-05 10:33:25 -0500</bug_when>
    <thetext>Created attachment 239664
Collecting a Map with lambdas resulting in a bug.

Overview:
I get an error message after compiling a litte java 8 lambdas experiment. 

Steps to reproduce:
1) Create new Java Projekt 
2) Insert attached file in default package

Actual Results:
I get the Error Message:
&gt; Internal compiler error: java.lang.UnsupportedOperationException: Breaking a dependency cycle NYI at   org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.missingImplementation(InferenceContext18.java:1449)


Expected Result:
It shall compile without errors.

Build Date &amp; Hardware:
* I just downloaded a fresh Eclipse for Java Developers with Build id: 20130614-0229.
* Windows 7 

Additional Information:
* The JDT has the version   1.0.0.v20140205-0104_BETA_JAVA8.
* My workspace is as new as &quot;new Date()&quot;.
* I tested the file with a java 8 sdk version number 1.8.0-ea-b104. It compiled and gave output as expected.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2359390</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-05 18:22:17 -0500</bug_when>
    <thetext>Cool, thanks for the example!

As the error message indicates, one function in the compiler simply hasn&apos;t been implemented yet. The reason is: the spec defines special handling for such an obscure corner case that I simply had no idea how to test that function. Now I&apos;m unblocked for that task, much appreciated :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2360057</commentid>
    <comment_count>2</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-02-07 05:51:46 -0500</bug_when>
    <thetext>Here&apos;s another testcase. This is same as the one reported in bug 424071, comment #0 :

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;


public class Bug419048 {
	void test1(List&lt;Object&gt; roster) {
        Map&lt;String, Object&gt; map = 
                roster
                    .stream()
                    .collect(
                        Collectors.toMap(
                            p -&gt; p.getLast(),
                            p -&gt; p.getLast()
                        ));
	}
}
interface Person {}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2360575</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-08 11:42:51 -0500</bug_when>
    <thetext>The missing part has been implemented, released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=266357791826a02f1dd87ad4cdccffd484f96fd9

The commit also contains an improvement regarding IC18.resolve(), which is now able to resolve only a subset of inference variables.

While making this change I realized a slight chance that in rare situations we could be ignoring *dependencies* (i.e., TypeBound with two InferenceVariables), because these are recorded only for one of the inference variables. I added code to also respect any inverse bounds, but haven&apos;t yet found an example where it makes a difference. I left corresponding TODOs in the code marking the places in question.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2366533</commentid>
    <comment_count>4</comment_count>
    <who name="Sarika Sinha">sarika.sinha</who>
    <bug_when>2014-02-21 03:42:11 -0500</bug_when>
    <thetext>Verified as working for Eclipse + Java 8 RC1 using Kepler SR2(RC4) +   
Eclipse Java Development Tools Patch for Java 8 Support (BETA)	
1.0.0.v20140220-2054</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>239664</attachid>
            <date>2014-02-05 10:33:00 -0500</date>
            <delta_ts>2014-02-05 10:33:25 -0500</delta_ts>
            <desc>Collecting a Map with lambdas resulting in a bug.</desc>
            <filename>Bug.java</filename>
            <type>text/x-java</type>
            <size>917</size>
            <attacher name="Lars Sadau">lars</attacher>
            
              <data encoding="base64">aW1wb3J0IGphdmEudXRpbC5BcnJheXM7DQppbXBvcnQgamF2YS51dGlsLkNvbGxlY3Rpb25zOw0K
aW1wb3J0IGphdmEudXRpbC5MaXN0Ow0KaW1wb3J0IGphdmEudXRpbC5NYXA7DQppbXBvcnQgamF2
YS51dGlsLmZ1bmN0aW9uLkJpbmFyeU9wZXJhdG9yOyANCmltcG9ydCBqYXZhLnV0aWwuc3RyZWFt
LkNvbGxlY3RvcjsNCmltcG9ydCBqYXZhLnV0aWwuc3RyZWFtLkNvbGxlY3RvcnM7DQoNCnB1Ymxp
YyBjbGFzcyBCdWcgew0KIA0KCXN0YXRpYyBMaXN0PFN0cmluZz4gbmFtZXMgPSBBcnJheXMuYXNM
aXN0KA0KCQkJImRkZCIsDQoJCQkicyIsDQoJCQkic2RmcyIsDQoJCQkic2ZkZiBkIik7IA0KIA0K
CXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHsNCgkJCSBCaW5hcnlPcGVy
YXRvcjxMaXN0PFN0cmluZz4+IG1lcmdlID0gKExpc3Q8U3RyaW5nPiBmaXJzdCwgTGlzdDxTdHJp
bmc+IHNlY29uZCkgLT4gew0KCQkJCSBmaXJzdC5hZGRBbGwoc2Vjb25kKTsNCgkJCQkgcmV0dXJu
IGZpcnN0Ow0KCQkJCSB9Ow0KCQkJCSANCgkJCUNvbGxlY3RvcjxTdHJpbmcsPyxNYXA8SW50ZWdl
cixMaXN0PFN0cmluZz4+PiBjb2xsZWN0b3I9IENvbGxlY3RvcnMudG9NYXAoDQoJCQkJCXMgLT4g
cy5sZW5ndGgoKSwgDQoJCQkJCUFycmF5czo6YXNMaXN0LA0KCQkJCQltZXJnZSk7IA0KCQkJTWFw
PEludGVnZXIsIExpc3Q8U3RyaW5nPj4gbGVuZ3RoVG9TdHJpbmdzID0gbmFtZXMuc3RyZWFtKCku
Y29sbGVjdChjb2xsZWN0b3IpOw0KCQkJDQoJCQlsZW5ndGhUb1N0cmluZ3MuZm9yRWFjaCgoSW50
ZWdlciBpLCBMaXN0PFN0cmluZz4gbCktPiB7DQoJCQkJU3lzdGVtLm91dC5wcmludGxuKGkgKyAi
IDogIiArIEFycmF5cy5kZWVwVG9TdHJpbmcobC50b0FycmF5KCkpKTsNCgkJCX0pOw0KDQoJfQ0K
DQp9DQo=
</data>

          </attachment>
      

    </bug>

</bugzilla>