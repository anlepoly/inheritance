<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>448112</bug_id>
          
          <creation_ts>2014-10-21 12:50:00 -0400</creation_ts>
          <short_desc>[compiler] Compiler crash (ArrayIndexOutOfBoundsException at StackMapFrame.addStackItem()) with unused variable</short_desc>
          <delta_ts>2015-01-20 17:45:46 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.5</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>4.4.2</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Konstantin Kolinko">knst.kolinko</reporter>
          <assigned_to name="Olivier Thomann">Olivier_Thomann</assigned_to>
          <cc>jarthana</cc>
    
    <cc>manpalat</cc>
    
    <cc>Olivier_Thomann</cc>
    
    <cc>srikanth_sankaran</cc>
          <qa_contact name="Srikanth Sankaran">srikanth_sankaran</qa_contact>
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2468854</commentid>
    <comment_count>0</comment_count>
    <who name="Konstantin Kolinko">knst.kolinko</who>
    <bug_when>2014-10-21 12:50:47 -0400</bug_when>
    <thetext>This error was originally reported at users &lt;at&gt; tomcat.apache.org mailing list as &quot;Tomcat 7.0: Unused primitive long or double variables prevent Tomcat from compiling JSP&quot; today (2014-10-21). The thread can be found in archives, e.g. here:
http://tomcat.markmail.org/thread/jblxumvub6o7nusr

Apache Tomcat uses Eclipse ECJ compiler to compile JSP pages. This issue happens when it compiles java code generated for a JSP page.

Steps to reproduce:
1) Download Tomcat 8 zip or tar.gz binary distributive from
http://tomcat.apache.org/download-80.cgi
2) Unpack the archive
3) Set JAVA_HOME environment variable to home directory of Java 7 or later JDK. (Details if needed can be found in RUNNING.txt in the archive).
4) Create a jsp page file &quot;webapps/ROOT/test.jsp&quot; with the following text:
======
&lt;%
session.setAttribute(&quot;v1&quot;, 1L);
session.setAttribute(&quot;v2&quot;, 2L);

long v1 = (Long) session.getAttribute(&quot;v1&quot;);
long v2 = (Long) session.getAttribute(&quot;v2&quot;);

out.write(String.valueOf(v1));
//out.write(String.valueOf(v2));
%&gt;
======
5) At the time of this writing, Tomcat includes ecj 4.4. To test with a later version of ECJ, replace file lib/ecj-4.4.jar with a different version of &quot;JDT Core Batch Compiler&quot; as can be downloaded from
http://download.eclipse.org/eclipse/downloads/

6) Start Tomcat by running bin/startup.bat or bin/startup.sh
7) Open the following page in a Web Browser:
http://localhost:8080/test.jsp

8)
Expected output: &quot;1&quot;
Actual output: Compilation error.

9) Stop Tomcat (Ctrl+C, or run bin/shutdown.bat, bin/shutdown.sh)


- This issue is reproducible with ecj-4.4.1.jar and with the current nightly ecj-N20141020-2000.jar.

- Stacktrace of the error is the following
(using current dev version of Tomcat 8 close to next 8.0.15 release
and nightly ecj-N20141020-2000.jar):

======
java.lang.ArrayIndexOutOfBoundsException: -1
	org.eclipse.jdt.internal.compiler.codegen.StackMapFrame.addStackItem(StackMapFrame.java:92)
	org.eclipse.jdt.internal.compiler.ClassFile.traverse(ClassFile.java:5560)
	org.eclipse.jdt.internal.compiler.ClassFile.generateStackMapTableAttribute(ClassFile.java:4319)
	org.eclipse.jdt.internal.compiler.ClassFile.completeCodeAttribute(ClassFile.java:1387)
	org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.generateCode(AbstractMethodDeclaration.java:339)
	org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.generateCode(AbstractMethodDeclaration.java:271)
	org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.generateCode(TypeDeclaration.java:566)
	org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.generateCode(TypeDeclaration.java:635)
	org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.generateCode(CompilationUnitDeclaration.java:368)
	org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:781)
	org.eclipse.jdt.internal.compiler.Compiler.compile(Compiler.java:470)
	org.apache.jasper.compiler.JDTCompiler.generateClass(JDTCompiler.java:440)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:361)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:336)
	org.apache.jasper.compiler.Compiler.compile(Compiler.java:323)
	org.apache.jasper.JspCompilationContext.compile(JspCompilationContext.java:564)
	org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:357)
	org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:396)
	org.apache.jasper.servlet.JspServlet.service(JspServlet.java:340)
	javax.servlet.http.HttpServlet.service(HttpServlet.java:725)
	org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)
======

- If the last line of the above fragment is uncommented, the JSP page compiles successfully and prints &quot;12&quot;.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2468856</commentid>
    <comment_count>1</comment_count>
      <attachid>248060</attachid>
    <who name="Konstantin Kolinko">knst.kolinko</who>
    <bug_when>2014-10-21 12:53:42 -0400</bug_when>
    <thetext>Created attachment 248060
test_jsp.java - Java code generated by Tomcat for the JSP page

I am attaching java code that is generated by Tomcat and fails to compile.

On a running Tomcat instance it can be found as work/Catalina/localhost/ROOT/org/apache/jsp/test_jsp.java</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2468864</commentid>
    <comment_count>2</comment_count>
    <who name="Konstantin Kolinko">knst.kolinko</who>
    <bug_when>2014-10-21 13:01:16 -0400</bug_when>
    <thetext>According to the original reporter, the issue is also reproducible if the local variable is of type &quot;double&quot;,  but it is not reproducible if it is &quot;int&quot; or &quot;float&quot;.

E.g. compiler crash does happen for me with the following JSP:
======
&lt;%
session.setAttribute(&quot;v1&quot;, new Double(1));
session.setAttribute(&quot;v2&quot;, new Double(2));

double v1 = (Double) session.getAttribute(&quot;v1&quot;);
double v2 = (Double) session.getAttribute(&quot;v2&quot;);

out.write(String.valueOf(v1));
//out.write(String.valueOf(v2));
%&gt;
======

The following page compiles and runs successfully, producing output of &quot;1&quot;:
======
&lt;%
session.setAttribute(&quot;v1&quot;, new Integer(1));
session.setAttribute(&quot;v2&quot;, new Integer(2));

int v1 = (Integer) session.getAttribute(&quot;v1&quot;);
int v2 = (Integer) session.getAttribute(&quot;v2&quot;);

out.write(String.valueOf(v1));
//out.write(String.valueOf(v2));
%&gt;
======</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2468933</commentid>
    <comment_count>3</comment_count>
      <attachid>248065</attachid>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2014-10-21 14:29:57 -0400</bug_when>
    <thetext>Created attachment 248065
Proposed patch</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2468934</commentid>
    <comment_count>4</comment_count>
      <attachid>248066</attachid>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2014-10-21 14:30:29 -0400</bug_when>
    <thetext>Created attachment 248066
Proposed regression test</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2468940</commentid>
    <comment_count>5</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2014-10-21 14:33:25 -0400</bug_when>
    <thetext>I believe the bug was introduced with the fix for bug 428522. I proposed a patch and the corresponding regression test. All CastTests are green with this change.
Of course all tests need to be run.

A workaround is to use the &quot;-preserveAllLocals&quot; option on the command line or remove the unused local.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2469272</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-22 04:18:03 -0400</bug_when>
    <thetext>(In reply to Olivier Thomann from comment #5)
&gt; I believe the bug was introduced with the fix for bug 428522. I proposed a
&gt; patch and the corresponding regression test. All CastTests are green with
&gt; this change.
&gt; Of course all tests need to be run.

Thanks a lot Olivier, I&apos;ll follow up on this for M3.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471950</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-26 08:26:53 -0400</bug_when>
    <thetext>I am encountering a very similar situation in https://bugs.eclipse.org/bugs/show_bug.cgi?id=443596

In 1.7 the inferred method looks like this: 

Predicate&lt;E&gt; and(Predicate&lt;? super E&gt;, Predicate&lt;? super E&gt;) 

and checking for argument compatibility looks like:

Predicate&lt;capture#1-of ? super E&gt;.isCompatibleWith(Predicate&lt;? super E&gt;)

while in 1.8, the inferred method looks like:

Predicate&lt;capture#1-of ? super E &amp; capture#2-of ?&gt; and(Predicate&lt;? super capture#1-of ? super E &amp; capture#2-of ?&gt;, Predicate&lt;? super capture#1-of ? super E &amp; capture#2-of ?&gt;) 

and checking for argument compatibility as follows:

Predicate&lt;capture#1-of ? super E&gt;.isCompatibleWith(Predicate&lt;? super capture#1-of ? super E &amp; capture#2-of ?&gt;) 

translates into a check 

(capture#1-of ? super E &amp; capture#2-of ?).fSOF(&lt;E&gt;)

This answers null and things quickly go south from there.

By making changes to the 

case Wildcard.SUPER similar to what is done in case case Wildcard.EXTENDS
The program compiles fine.

The solution posted at https://bugs.eclipse.org/bugs/show_bug.cgi?id=443596
completely circumvents the problem by taking an altogether different 
route.

But it is a matter of fact that

1.8 inferred methods carry captures way more often than 1.7 inferred methods
and correctly so and our infrastructure (CaptureBinding and ICTB) have 
some issues that trip us only at 1.8 -

It is a penalty/pain we need to go through for being more canonical/rigorous
in our implementation while relying on weaker links.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471954</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-26 08:43:50 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #7)
&gt; I am encountering a very similar situation in
&gt; https://bugs.eclipse.org/bugs/show_bug.cgi?id=443596

Oops, wrong bug, sorry.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472790</commentid>
    <comment_count>9</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-28 04:49:52 -0400</bug_when>
    <thetext>I believe I am all done with M3 work, except for this one, which I will
release later today after completing the testing.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472900</commentid>
    <comment_count>10</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-28 09:38:10 -0400</bug_when>
    <thetext>The code added for the fix for https://bugs.eclipse.org/bugs/show_bug.cgi?id=428522 reads:


		boolean isUnboxing = (this.implicitConversion &amp; TypeIds.UNBOXING) != 0;
		switch (isUnboxing ? postConversionType(currentScope).id : this.resolvedType.id) {
			case T_long :
			case T_double :
				codeStream.pop2();
				break;
			default :
				codeStream.pop();
				break;
		}

Yet, none of the tests added for that fix require the isUnboxing true part.

Given the expression&apos;s value is not required and so we are not going to
require unboxing and we are going to pop the wrapped object itself, checking
the post conversion type does not make sense.

I think Olivier&apos;s patch looks good to me.

IIRC, Feb 3rd week of 2014 was a busy week for fixes around cast expressions
for a few problems some of which have existed for a long time:

Apart from:
https://bugs.eclipse.org/bugs/show_bug.cgi?id=428522

we also had 

https://bugs.eclipse.org/bugs/show_bug.cgi?id=428388
https://bugs.eclipse.org/bugs/show_bug.cgi?id=428274.

It is likely there is some overlooking of interaction between these
fixes that has resulted in the present bug.

I am running all tests now and once it is seen to be green, will release.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472936</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-28 10:56:16 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #10)

&gt; I am running all tests now and once it is seen to be green, will release.

All clear, fix and tests released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=05396c2aadbdf694b3e24041198b7173f55ce8f9

Thanks a lot Olivier !</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2473193</commentid>
    <comment_count>12</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-10-29 01:49:28 -0400</bug_when>
    <thetext>Verified for 4.5 M3 using I20141028-2000 build</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2508169</commentid>
    <comment_count>13</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2015-01-20 17:45:46 -0500</bug_when>
    <thetext>Verified for Eclipse Luna SR2 Build id: M20150114-1500</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>248060</attachid>
            <date>2014-10-21 12:53:00 -0400</date>
            <delta_ts>2014-10-21 12:53:42 -0400</delta_ts>
            <desc>test_jsp.java - Java code generated by Tomcat for the JSP page</desc>
            <filename>test_jsp.java</filename>
            <type>text/plain</type>
            <size>3579</size>
            <attacher name="Konstantin Kolinko">knst.kolinko</attacher>
            
              <data encoding="base64">LyoNCiAqIEdlbmVyYXRlZCBieSB0aGUgSmFzcGVyIGNvbXBvbmVudCBvZiBBcGFjaGUgVG9tY2F0
DQogKiBWZXJzaW9uOiBBcGFjaGUgVG9tY2F0LzguMC4xNS1kZXYNCiAqIEdlbmVyYXRlZCBhdDog
MjAxNC0xMC0yMSAxNjoyMToyMCBVVEMNCiAqIE5vdGU6IFRoZSBsYXN0IG1vZGlmaWVkIHRpbWUg
b2YgdGhpcyBmaWxlIHdhcyBzZXQgdG8NCiAqICAgICAgIHRoZSBsYXN0IG1vZGlmaWVkIHRpbWUg
b2YgdGhlIHNvdXJjZSBmaWxlIGFmdGVyDQogKiAgICAgICBnZW5lcmF0aW9uIHRvIGFzc2lzdCB3
aXRoIG1vZGlmaWNhdGlvbiB0cmFja2luZy4NCiAqLw0KcGFja2FnZSBvcmcuYXBhY2hlLmpzcDsN
Cg0KaW1wb3J0IGphdmF4LnNlcnZsZXQuKjsNCmltcG9ydCBqYXZheC5zZXJ2bGV0Lmh0dHAuKjsN
CmltcG9ydCBqYXZheC5zZXJ2bGV0LmpzcC4qOw0KDQpwdWJsaWMgZmluYWwgY2xhc3MgdGVzdF9q
c3AgZXh0ZW5kcyBvcmcuYXBhY2hlLmphc3Blci5ydW50aW1lLkh0dHBKc3BCYXNlDQogICAgaW1w
bGVtZW50cyBvcmcuYXBhY2hlLmphc3Blci5ydW50aW1lLkpzcFNvdXJjZURlcGVuZGVudCB7DQoN
CiAgcHJpdmF0ZSBzdGF0aWMgZmluYWwgamF2YXguc2VydmxldC5qc3AuSnNwRmFjdG9yeSBfanNw
eEZhY3RvcnkgPQ0KICAgICAgICAgIGphdmF4LnNlcnZsZXQuanNwLkpzcEZhY3RvcnkuZ2V0RGVm
YXVsdEZhY3RvcnkoKTsNCg0KICBwcml2YXRlIHN0YXRpYyBqYXZhLnV0aWwuTWFwPGphdmEubGFu
Zy5TdHJpbmcsamF2YS5sYW5nLkxvbmc+IF9qc3B4X2RlcGVuZGFudHM7DQoNCiAgcHJpdmF0ZSBq
YXZheC5lbC5FeHByZXNzaW9uRmFjdG9yeSBfZWxfZXhwcmVzc2lvbmZhY3Rvcnk7DQogIHByaXZh
dGUgb3JnLmFwYWNoZS50b21jYXQuSW5zdGFuY2VNYW5hZ2VyIF9qc3BfaW5zdGFuY2VtYW5hZ2Vy
Ow0KDQogIHB1YmxpYyBqYXZhLnV0aWwuTWFwPGphdmEubGFuZy5TdHJpbmcsamF2YS5sYW5nLkxv
bmc+IGdldERlcGVuZGFudHMoKSB7DQogICAgcmV0dXJuIF9qc3B4X2RlcGVuZGFudHM7DQogIH0N
Cg0KICBwdWJsaWMgdm9pZCBfanNwSW5pdCgpIHsNCiAgICBfZWxfZXhwcmVzc2lvbmZhY3Rvcnkg
PSBfanNweEZhY3RvcnkuZ2V0SnNwQXBwbGljYXRpb25Db250ZXh0KGdldFNlcnZsZXRDb25maWco
KS5nZXRTZXJ2bGV0Q29udGV4dCgpKS5nZXRFeHByZXNzaW9uRmFjdG9yeSgpOw0KICAgIF9qc3Bf
aW5zdGFuY2VtYW5hZ2VyID0gb3JnLmFwYWNoZS5qYXNwZXIucnVudGltZS5JbnN0YW5jZU1hbmFn
ZXJGYWN0b3J5LmdldEluc3RhbmNlTWFuYWdlcihnZXRTZXJ2bGV0Q29uZmlnKCkpOw0KICB9DQoN
CiAgcHVibGljIHZvaWQgX2pzcERlc3Ryb3koKSB7DQogIH0NCg0KICBwdWJsaWMgdm9pZCBfanNw
U2VydmljZShmaW5hbCBqYXZheC5zZXJ2bGV0Lmh0dHAuSHR0cFNlcnZsZXRSZXF1ZXN0IHJlcXVl
c3QsIGZpbmFsIGphdmF4LnNlcnZsZXQuaHR0cC5IdHRwU2VydmxldFJlc3BvbnNlIHJlc3BvbnNl
KQ0KICAgICAgICB0aHJvd3MgamF2YS5pby5JT0V4Y2VwdGlvbiwgamF2YXguc2VydmxldC5TZXJ2
bGV0RXhjZXB0aW9uIHsNCg0KZmluYWwgamF2YS5sYW5nLlN0cmluZyBfanNweF9tZXRob2QgPSBy
ZXF1ZXN0LmdldE1ldGhvZCgpOw0KaWYgKCEiR0VUIi5lcXVhbHMoX2pzcHhfbWV0aG9kKSAmJiAh
IlBPU1QiLmVxdWFscyhfanNweF9tZXRob2QpICYmICEiSEVBRCIuZXF1YWxzKF9qc3B4X21ldGhv
ZCkgJiYgIWphdmF4LnNlcnZsZXQuRGlzcGF0Y2hlclR5cGUuRVJST1IuZXF1YWxzKHJlcXVlc3Qu
Z2V0RGlzcGF0Y2hlclR5cGUoKSkpIHsNCnJlc3BvbnNlLnNlbmRFcnJvcihIdHRwU2VydmxldFJl
c3BvbnNlLlNDX01FVEhPRF9OT1RfQUxMT1dFRCwgIkpTUHMgb25seSBwZXJtaXQgR0VUIFBPU1Qg
b3IgSEVBRCIpOw0KcmV0dXJuOw0KfQ0KDQogICAgZmluYWwgamF2YXguc2VydmxldC5qc3AuUGFn
ZUNvbnRleHQgcGFnZUNvbnRleHQ7DQogICAgamF2YXguc2VydmxldC5odHRwLkh0dHBTZXNzaW9u
IHNlc3Npb24gPSBudWxsOw0KICAgIGZpbmFsIGphdmF4LnNlcnZsZXQuU2VydmxldENvbnRleHQg
YXBwbGljYXRpb247DQogICAgZmluYWwgamF2YXguc2VydmxldC5TZXJ2bGV0Q29uZmlnIGNvbmZp
ZzsNCiAgICBqYXZheC5zZXJ2bGV0LmpzcC5Kc3BXcml0ZXIgb3V0ID0gbnVsbDsNCiAgICBmaW5h
bCBqYXZhLmxhbmcuT2JqZWN0IHBhZ2UgPSB0aGlzOw0KICAgIGphdmF4LnNlcnZsZXQuanNwLkpz
cFdyaXRlciBfanNweF9vdXQgPSBudWxsOw0KICAgIGphdmF4LnNlcnZsZXQuanNwLlBhZ2VDb250
ZXh0IF9qc3B4X3BhZ2VfY29udGV4dCA9IG51bGw7DQoNCg0KICAgIHRyeSB7DQogICAgICByZXNw
b25zZS5zZXRDb250ZW50VHlwZSgidGV4dC9odG1sIik7DQogICAgICBwYWdlQ29udGV4dCA9IF9q
c3B4RmFjdG9yeS5nZXRQYWdlQ29udGV4dCh0aGlzLCByZXF1ZXN0LCByZXNwb25zZSwNCiAgICAg
IAkJCW51bGwsIHRydWUsIDgxOTIsIHRydWUpOw0KICAgICAgX2pzcHhfcGFnZV9jb250ZXh0ID0g
cGFnZUNvbnRleHQ7DQogICAgICBhcHBsaWNhdGlvbiA9IHBhZ2VDb250ZXh0LmdldFNlcnZsZXRD
b250ZXh0KCk7DQogICAgICBjb25maWcgPSBwYWdlQ29udGV4dC5nZXRTZXJ2bGV0Q29uZmlnKCk7
DQogICAgICBzZXNzaW9uID0gcGFnZUNvbnRleHQuZ2V0U2Vzc2lvbigpOw0KICAgICAgb3V0ID0g
cGFnZUNvbnRleHQuZ2V0T3V0KCk7DQogICAgICBfanNweF9vdXQgPSBvdXQ7DQoNCg0Kc2Vzc2lv
bi5zZXRBdHRyaWJ1dGUoInYxIiwgMUwpOw0Kc2Vzc2lvbi5zZXRBdHRyaWJ1dGUoInYyIiwgMkwp
Ow0KDQpsb25nIHYxID0gKExvbmcpIHNlc3Npb24uZ2V0QXR0cmlidXRlKCJ2MSIpOw0KbG9uZyB2
MiA9IChMb25nKSBzZXNzaW9uLmdldEF0dHJpYnV0ZSgidjIiKTsNCg0Kb3V0LndyaXRlKFN0cmlu
Zy52YWx1ZU9mKHYxKSk7DQovL291dC53cml0ZShTdHJpbmcudmFsdWVPZih2MikpOw0KDQogICAg
fSBjYXRjaCAoamF2YS5sYW5nLlRocm93YWJsZSB0KSB7DQogICAgICBpZiAoISh0IGluc3RhbmNl
b2YgamF2YXguc2VydmxldC5qc3AuU2tpcFBhZ2VFeGNlcHRpb24pKXsNCiAgICAgICAgb3V0ID0g
X2pzcHhfb3V0Ow0KICAgICAgICBpZiAob3V0ICE9IG51bGwgJiYgb3V0LmdldEJ1ZmZlclNpemUo
KSAhPSAwKQ0KICAgICAgICAgIHRyeSB7DQogICAgICAgICAgICBpZiAocmVzcG9uc2UuaXNDb21t
aXR0ZWQoKSkgew0KICAgICAgICAgICAgICBvdXQuZmx1c2goKTsNCiAgICAgICAgICAgIH0gZWxz
ZSB7DQogICAgICAgICAgICAgIG91dC5jbGVhckJ1ZmZlcigpOw0KICAgICAgICAgICAgfQ0KICAg
ICAgICAgIH0gY2F0Y2ggKGphdmEuaW8uSU9FeGNlcHRpb24gZSkge30NCiAgICAgICAgaWYgKF9q
c3B4X3BhZ2VfY29udGV4dCAhPSBudWxsKSBfanNweF9wYWdlX2NvbnRleHQuaGFuZGxlUGFnZUV4
Y2VwdGlvbih0KTsNCiAgICAgICAgZWxzZSB0aHJvdyBuZXcgU2VydmxldEV4Y2VwdGlvbih0KTsN
CiAgICAgIH0NCiAgICB9IGZpbmFsbHkgew0KICAgICAgX2pzcHhGYWN0b3J5LnJlbGVhc2VQYWdl
Q29udGV4dChfanNweF9wYWdlX2NvbnRleHQpOw0KICAgIH0NCiAgfQ0KfQ0K
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>248065</attachid>
            <date>2014-10-21 14:29:00 -0400</date>
            <delta_ts>2014-10-21 14:29:57 -0400</delta_ts>
            <desc>Proposed patch</desc>
            <filename>patch448112.txt</filename>
            <type>text/plain</type>
            <size>872</size>
            <attacher name="Olivier Thomann">Olivier_Thomann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvQ2FzdEV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3Qv
Q2FzdEV4cHJlc3Npb24uamF2YQppbmRleCAxNzFlZjhkLi42NmU5MjQ2IDEwMDY0NAotLS0gYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvYXN0L0Nhc3RFeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9DYXN0RXhwcmVz
c2lvbi5qYXZhCkBAIC00NTcsOSArNDU3LDggQEAKIAl9CiAJaWYgKHZhbHVlUmVxdWlyZWQpIHsK
IAkJY29kZVN0cmVhbS5nZW5lcmF0ZUltcGxpY2l0Q29udmVyc2lvbih0aGlzLmltcGxpY2l0Q29u
dmVyc2lvbik7Ci0JfSBlbHNlIGlmIChuZWVkUnVudGltZUNoZWNrY2FzdCkgewotCQlib29sZWFu
IGlzVW5ib3hpbmcgPSAodGhpcy5pbXBsaWNpdENvbnZlcnNpb24gJiBUeXBlSWRzLlVOQk9YSU5H
KSAhPSAwOwotCQlzd2l0Y2ggKGlzVW5ib3hpbmcgPyBwb3N0Q29udmVyc2lvblR5cGUoY3VycmVu
dFNjb3BlKS5pZCA6IHRoaXMucmVzb2x2ZWRUeXBlLmlkKSB7CisJfSBlbHNlIGlmIChhbm5vdGF0
ZWRDYXN0IHx8IG5lZWRSdW50aW1lQ2hlY2tjYXN0KSB7CisJCXN3aXRjaCAodGhpcy5yZXNvbHZl
ZFR5cGUuaWQpIHsKIAkJCWNhc2UgVF9sb25nIDoKIAkJCWNhc2UgVF9kb3VibGUgOgogCQkJCWNv
ZGVTdHJlYW0ucG9wMigpOwo=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>248066</attachid>
            <date>2014-10-21 14:30:00 -0400</date>
            <delta_ts>2014-10-21 14:30:29 -0400</delta_ts>
            <desc>Proposed regression test</desc>
            <filename>patch_448112_tests.txt</filename>
            <type>text/plain</type>
            <size>4849</size>
            <attacher name="Olivier Thomann">Olivier_Thomann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0Nhc3RUZXN0LmphdmEg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0
L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9DYXN0VGVzdC5qYXZhCmluZGV4IDcwZTNl
MWQuLjhlNzQ1OGIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBp
bGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0Nh
c3RUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3Jj
L29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vQ2FzdFRlc3Qu
amF2YQpAQCAtMzA5Miw3ICszMDkyLDc1IEBACiAJCWFzc2VydEVxdWFscygiV3JvbmcgY29udGVu
dHMiLCBleHBlY3RlZE91dHB1dCwgYWN0dWFsT3V0cHV0KTsKIAl9CiB9CisvL2h0dHBzOi8vYnVn
cy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00NDgxMTIgCitwdWJsaWMgdm9pZCB0
ZXN0NDQ4MTEyKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJaWYgKHRoaXMuY29tcGxpYW5jZUxldmVs
IDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNykKKwkJcmV0dXJuOworCU1hcCBjdXN0b21PcHRp
b25zID0gZ2V0Q29tcGlsZXJPcHRpb25zKCk7CisJY3VzdG9tT3B0aW9ucy5wdXQoQ29tcGlsZXJP
cHRpb25zLk9QVElPTl9QcmVzZXJ2ZVVudXNlZExvY2FsLCBDb21waWxlck9wdGlvbnMuT1BUSU1J
WkVfT1VUKTsKKwl0aGlzLnJ1bkNvbmZvcm1UZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJIlgu
amF2YSIsCisJCQkicHVibGljIGNsYXNzIFgge1xuIiArIAorCQkJIlxuIiArIAorCQkJIiAgc3Rh
dGljIGNsYXNzIFkge1xuIiArIAorCQkJIgkgIHB1YmxpYyBPYmplY3QgZ2V0QXR0cmlidXRlKFN0
cmluZyBuYW1lKSB7XG4iICsgCisJCQkiCSAgCXJldHVybiBuZXcgTG9uZygxMDBMKTtcbiIgKyAK
KwkJCSIJICB9XG4iICsgCisJCQkiCX1cbiIgKyAKKwkJCSIJcHVibGljIHN0YXRpYyB2b2lkIGZv
bzIoWSB5KSB7XG4iICsgCisJCQkiXG4iICsgCisJCQkiCQl0cnkge1xuIiArIAorCQkJIgkJCWxv
bmcgdjEgPSAoTG9uZykgeS5nZXRBdHRyaWJ1dGUoXCJ2MVwiKTtcbiIgKyAKKwkJCSIJCQlsb25n
IHYyID0gKExvbmcpIHkuZ2V0QXR0cmlidXRlKFwidjJcIik7XG4iICsgCisJCQkiXG4iICsgCisJ
CQkiCQkJU3lzdGVtLm91dC5wcmludGxuKFN0cmluZy52YWx1ZU9mKHYxKSk7XG4iICsgCisJCQki
XG4iICsgCisJCQkiCQl9IGNhdGNoIChqYXZhLmxhbmcuVGhyb3dhYmxlIHQpIHt9XG4iICsgCisJ
CQkiCX1cbiIgKyAKKwkJCSIJXG4iICsgCisJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0
cmluZyBhcmdzW10pIHtcbiIgKyAKKwkJCSIJCWZvbzIobmV3IFkoKSk7XG4iICsgCisJCQkiICB9
XG4iICsgCisJCQkifSIsCisJCX0sCisJCSIxMDAiLCBjdXN0b21PcHRpb25zKTsKKwlDbGFzc0Zp
bGVCeXRlc0Rpc2Fzc2VtYmxlciBkaXNhc3NlbWJsZXIgPSBUb29sRmFjdG9yeS5jcmVhdGVEZWZh
dWx0Q2xhc3NGaWxlQnl0ZXNEaXNhc3NlbWJsZXIoKTsKKwlieXRlW10gY2xhc3NGaWxlQnl0ZXMg
PSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIudXRpbC5VdGlsLmdldEZpbGVCeXRl
Q29udGVudChuZXcgRmlsZShPVVRQVVRfRElSICsgRmlsZS5zZXBhcmF0b3IgICsiWC5jbGFzcyIp
KTsKKwlTdHJpbmcgYWN0dWFsT3V0cHV0ID0KKwkJZGlzYXNzZW1ibGVyLmRpc2Fzc2VtYmxlKAor
CQkJY2xhc3NGaWxlQnl0ZXMsCisJCQkiXG4iLAorCQkJQ2xhc3NGaWxlQnl0ZXNEaXNhc3NlbWJs
ZXIuREVUQUlMRUQpOwogCisJU3RyaW5nIGV4cGVjdGVkT3V0cHV0ID0KKwkJCSIgIHB1YmxpYyBz
dGF0aWMgdm9pZCBmb28yKFguWSB5KTtcbiIgKyAKKwkJCSIgICAgIDAgIGFsb2FkXzAgW3ldXG4i
ICsgCisJCQkiICAgICAxICBsZGMgPFN0cmluZyBcInYxXCI+IFsxNl1cbiIgKyAKKwkJCSIgICAg
IDMgIGludm9rZXZpcnR1YWwgWCRZLmdldEF0dHJpYnV0ZShqYXZhLmxhbmcuU3RyaW5nKSA6IGph
dmEubGFuZy5PYmplY3QgWzE4XVxuIiArIAorCQkJIiAgICAgNiAgY2hlY2tjYXN0IGphdmEubGFu
Zy5Mb25nIFsyNF1cbiIgKyAKKwkJCSIgICAgIDkgIGludm9rZXZpcnR1YWwgamF2YS5sYW5nLkxv
bmcubG9uZ1ZhbHVlKCkgOiBsb25nIFsyNl1cbiIgKyAKKwkJCSIgICAgMTIgIGxzdG9yZV8xIFt2
MV1cbiIgKyAKKwkJCSIgICAgMTMgIGFsb2FkXzAgW3ldXG4iICsgCisJCQkiICAgIDE0ICBsZGMg
PFN0cmluZyBcInYyXCI+IFszMF1cbiIgKyAKKwkJCSIgICAgMTYgIGludm9rZXZpcnR1YWwgWCRZ
LmdldEF0dHJpYnV0ZShqYXZhLmxhbmcuU3RyaW5nKSA6IGphdmEubGFuZy5PYmplY3QgWzE4XVxu
IiArIAorCQkJIiAgICAxOSAgY2hlY2tjYXN0IGphdmEubGFuZy5Mb25nIFsyNF1cbiIgKyAKKwkJ
CSIgICAgMjIgIHBvcFxuIiArIAorCQkJIiAgICAyMyAgZ2V0c3RhdGljIGphdmEubGFuZy5TeXN0
ZW0ub3V0IDogamF2YS5pby5QcmludFN0cmVhbSBbMzJdXG4iICsgCisJCQkiICAgIDI2ICBsbG9h
ZF8xIFt2MV1cbiIgKyAKKwkJCSIgICAgMjcgIGludm9rZXN0YXRpYyBqYXZhLmxhbmcuU3RyaW5n
LnZhbHVlT2YobG9uZykgOiBqYXZhLmxhbmcuU3RyaW5nIFszOF1cbiIgKyAKKwkJCSIgICAgMzAg
IGludm9rZXZpcnR1YWwgamF2YS5pby5QcmludFN0cmVhbS5wcmludGxuKGphdmEubGFuZy5TdHJp
bmcpIDogdm9pZCBbNDRdXG4iICsgCisJCQkiICAgIDMzICBnb3RvIDM3XG4iICsgCisJCQkiICAg
IDM2ICBwb3BcbiIgKyAKKwkJCSIgICAgMzcgIHJldHVyblxuIjsKKwlpbnQgaW5kZXggPSBhY3R1
YWxPdXRwdXQuaW5kZXhPZihleHBlY3RlZE91dHB1dCk7CisJaWYgKGluZGV4ID09IC0xIHx8IGV4
cGVjdGVkT3V0cHV0Lmxlbmd0aCgpID09IDApIHsKKwkJU3lzdGVtLm91dC5wcmludGxuKFV0aWwu
ZGlzcGxheVN0cmluZyhhY3R1YWxPdXRwdXQsIDIpKTsKKwl9CisJaWYgKGluZGV4ID09IC0xKSB7
CisJCWFzc2VydEVxdWFscygiV3JvbmcgY29udGVudHMiLCBleHBlY3RlZE91dHB1dCwgYWN0dWFs
T3V0cHV0KTsKKwl9Cit9CiBwdWJsaWMgc3RhdGljIENsYXNzIHRlc3RDbGFzcygpIHsKIAlyZXR1
cm4gQ2FzdFRlc3QuY2xhc3M7CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50
ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVn
cmVzc2lvbi9TY2FubmVyVGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29t
cGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24v
U2Nhbm5lclRlc3QuamF2YQppbmRleCA3YzU0YzJhLi4yM2UzOTdkIDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9TY2FubmVyVGVzdC5qYXZhCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0
cy9jb21waWxlci9yZWdyZXNzaW9uL1NjYW5uZXJUZXN0LmphdmEKQEAgLTEzNjgsNCArMTM2OCwz
NCBAQAogCQl9CiAJCWFzc2VydEVxdWFscygiRXhwZWN0aW5nIDo6IiwgSVRlcm1pbmFsU3ltYm9s
cy5Ub2tlbk5hbWVDT0xPTl9DT0xPTiwgdG9rZW4pOwogCX0KKworCS8vaHR0cHM6Ly9idWdzLmVj
bGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQ0Mzg1NAorCXB1YmxpYyB2b2lkIHRlc3Qw
NjQoKSB7CisJCVN0cmluZyBzb3VyY2UgPQorCQkJCSJwdWJsaWMgZW51bSBYIHtcbiIgKyAKKwkJ
CQkiCUhlbGxvXFx1MjA1ZndvcmxkO1xuIiArIAorCQkJCSIJcHVibGljIHN0YXRpYyB2b2lkIG1h
aW4oU3RyaW5nW10gYXJncykge1xuIiArIAorCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihIZWxs
b1xcdTIwNWZ3b3JsZCk7XG4iICsgCisJCQkJIgkJU3lzdGVtLm91dC5wcmludGxuKENoYXJhY3Rl
ci5pc0phdmFJZGVudGlmaWVyUGFydCgnXFx1MjA1ZicpKTsgLy8gZmFsc2VcbiIgKyAKKwkJCQki
CX1cbiIgKyAKKwkJCQkifSI7CisJCWlmICh0aGlzLmNvbXBsaWFuY2VMZXZlbCA+IENsYXNzRmls
ZUNvbnN0YW50cy5KREsxXzUpIHsKKwkJCXRoaXMucnVuTmVnYXRpdmVUZXN0KAorCQkJCW5ldyBT
dHJpbmdbXSB7CisJCQkJCSJYLmphdmEiLAorCQkJCQlzb3VyY2UKKwkJCQl9LAorCQkJCSItLS0t
LS0tLS0tXG4iICsgCisJCQkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAyKVxuIiArIAor
CQkJCSIJSGVsbG9cXHUyMDVmd29ybGQ7XG4iICsgCisJCQkJIgkgICAgIF5eXl5eXlxuIiArIAor
CQkJCSJTeW50YXggZXJyb3Igb24gdG9rZW4gXCJJbnZhbGlkIENoYXJhY3RlclwiLCAsIGV4cGVj
dGVkXG4iICsgCisJCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCQkiMi4gRVJST1IgaW4gWC5qYXZh
IChhdCBsaW5lIDQpXG4iICsgCisJCQkJIglTeXN0ZW0ub3V0LnByaW50bG4oSGVsbG9cXHUyMDVm
d29ybGQpO1xuIiArIAorCQkJCSIJICAgICAgICAgICAgICAgICAgICAgICAgXl5eXl5eXG4iICsg
CisJCQkJIlN5bnRheCBlcnJvciBvbiB0b2tlbiBcIkludmFsaWQgQ2hhcmFjdGVyXCIsIGludmFs
aWQgQXNzaWdubWVudE9wZXJhdG9yXG4iICsgCisJCQkJIi0tLS0tLS0tLS1cbiIpOworCQl9CisJ
fQogfQ==
</data>

          </attachment>
      

    </bug>

</bugzilla>