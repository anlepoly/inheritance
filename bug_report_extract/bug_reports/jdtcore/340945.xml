<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>340945</bug_id>
          
          <creation_ts>2011-03-25 08:14:00 -0400</creation_ts>
          <short_desc>Extension Request of JavaContentAssistInvocationContext</short_desc>
          <delta_ts>2012-01-05 08:24:29 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.7</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>3.8 M4</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Marcel Bruch">marcel.bruch</reporter>
          <assigned_to name="Ayushman Jain">amj87.iitr</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>deepakazad</cc>
    
    <cc>lars.vogel</cc>
    
    <cc>markus_keller</cc>
    
    <cc>Olivier_Thomann</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
    
    <cc>stevemash</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1903650</commentid>
    <comment_count>0</comment_count>
    <who name="Marcel Bruch">marcel.bruch</who>
    <bug_when>2011-03-25 08:14:54 -0400</bug_when>
    <thetext>Current JavaContentAssistInvocationContext provides access to the expected type of a completion request, the prefix the developer has already typed, as well as the enclosing IJavaElement code completion was triggered in.

The Eclipse Code Recommenders project aims to provide more fine-grained proposals based on what has been done with the object before code completion was triggered on. For instance, given that a constructor has been invoked on a, say, SWT Button Code Recommenders can infer that only a few proposals make sense in the current situation and  thus may filter the number of proposals made by JDT to just those actually relevant in the given completion context. 

For this computation, we currently have to re-run the CompletionParser and recompute the JDT proposals to determine the information on which variable completion was triggered on etc.

Since this process is rather costly we would like to ask the JDT team whether the current completion context could be extended to provide read access to little more information than available yet.

Information that would be beneficial in JavaContentAssistInvocationContext:

1. Variable code completion was triggered on (IType and Name would be great)
2. Access to all default completion proposals offered by JDT (we use that to create our own subset of proposals + decorations)
3. Information of all available locals, and fields in the given context (required for chain completion). Thus would also include the type and name of the variables.
4. Access to the requested completion type 



Proposed extensions to JavaContentAssistInvocationContext could look as follows:

getAccessibleFieldDeclarations(): List&lt;FieldDeclaration&gt;
getAccessibleLocalDeclarations(): List&lt;LocalDeclaration&gt;
getReceiverVariable() : VariableDeclaration
getCompletionNode(): ASTNode (currently taken from Compiler AST)
getCompletionNodeParent():  ASTNode (currently taken from Compiler AST)
isReceiverImplicitThis(): boolean

Code Recommenders currently has it&apos;s own completion context which does roughly this:

IIntelligentCompletionContext.java: http://goo.gl/7rAs2
IntelligentCompletionContext.java: http://goo.gl/imOiK
ASTCompletionNodeFinder.java: http://goo.gl/2boRm

What do you think?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1903796</commentid>
    <comment_count>1</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2011-03-25 10:35:53 -0400</bug_when>
    <thetext>Let&apos;s see what we can do for the next release.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2002210</commentid>
    <comment_count>2</comment_count>
    <who name="Marcel Bruch">marcel.bruch</who>
    <bug_when>2011-09-29 05:07:54 -0400</bug_when>
    <thetext>If 3.8 M3 is targeted: I&apos;ll ask Marko Martin (the student who implemented JDT chain completion) to contribute his code asap and to test it with 3.8 M3

Thanks!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2004375</commentid>
    <comment_count>3</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-10-04 02:32:22 -0400</bug_when>
    <thetext>Marcel, have you looked at org.eclipse.jdt.core.CompletionContext and org.eclipse.jdt.core.CompletionProposal. They seem to have most of the information you need. See org.eclipse.jdt.core.tests.model.CompletionTestsRequestor2 for usage examples. You can pass your own requestor in the org.eclipse.jdt.core.ICodeAssist.codeComplete(int, CompletionRequestor, WorkingCopyOwner, IProgressMonitor) API. 
Or if you&apos;re using jdt.ui&apos;s requestor, you caan query the completion proposals for the info as given in CompletionProposal and CompletionContext. 

Would that serve your purpose?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2005076</commentid>
    <comment_count>4</comment_count>
    <who name="Marcel Bruch">marcel.bruch</who>
    <bug_when>2011-10-05 01:41:20 -0400</bug_when>
    <thetext>(In reply to comment #3)

Let&apos;s see:

&gt; getAccessibleFieldDeclarations(): List&lt;FieldDeclaration&gt;

We may implement it using  org.eclipse.jdt.internal.codeassist.InternalCompletionContext.getVisibleElements(String) where String is &quot;java.lang.Object&quot; + Filtering for IFields. Would this work?

&gt; getAccessibleLocalDeclarations(): List&lt;LocalDeclaration&gt;

Same as above.

&gt; getReceiverVariable() : VariableDeclaration

Is there any equivalent way to express this? Yet, I didn&apos;t find any.

&gt; getCompletionNode(): ASTNode (currently taken from Compiler AST)

These nodes are essential because we need to know where/which type of code completion was requested. This information is hidden somewhere in the internal context already:
org.eclipse.jdt.internal.codeassist.InternalExtendedCompletionContext.assistNode but not accessible from CompletionProposalComputer classes via CompletionContext. If I remember correctly, the assistNode is always of kind CompletionOn*** which is what we need.

&gt; getCompletionNodeParent():  ASTNode (currently taken from Compiler AST)

Similar to the above?

&gt; isReceiverImplicitThis(): boolean

I don&apos;t know yet if this could be implemented based on the above information. Likely.


I might try to implement another completion context based on reflection to obtain the internal completion context and see how far I get? Maybe it would work to make this field accessible and add few more information.


Another, related question: Are proposal computations cached?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2005162</commentid>
    <comment_count>5</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-10-05 05:58:24 -0400</bug_when>
    <thetext>(In reply to comment #4)
&gt; (In reply to comment #3)
&gt; 
&gt; Let&apos;s see:
&gt; 
&gt; &gt; getAccessibleFieldDeclarations(): List&lt;FieldDeclaration&gt;
&gt; 
&gt; We may implement it using 
&gt; org.eclipse.jdt.internal.codeassist.InternalCompletionContext.getVisibleElements(String)
&gt; where String is &quot;java.lang.Object&quot; + Filtering for IFields. Would this work?

The argument should be the type signature, such as Ljava/lang/Object;

&gt; &gt; getCompletionNode(): ASTNode (currently taken from Compiler AST)
&gt; 
&gt; These nodes are essential because we need to know where/which type of code
&gt; completion was requested. This information is hidden somewhere in the internal
&gt; context already:
&gt; org.eclipse.jdt.internal.codeassist.InternalExtendedCompletionContext.assistNode
&gt; but not accessible from CompletionProposalComputer classes via
&gt; CompletionContext. If I remember correctly, the assistNode is always of kind
&gt; CompletionOn*** which is what we need.
&gt; 
&gt; &gt; getCompletionNodeParent():  ASTNode (currently taken from Compiler AST)

For this I can provide APIs getCompletionNode() and getCompletionNodeParent(). Should be straightforward.

&gt; &gt; getReceiverVariable() : VariableDeclaration
&gt; &gt; isReceiverImplicitThis(): boolean

These two I&apos;m not sure if you can find using the available APIs. So, basically these new APIs will return the VariableDeclaration in case the completion is of the form
someField.&lt;CTRL-SPC&gt;
someLocal.&lt;CTRL-SPC&gt;

and null otherwise (eg. in someMethod().&lt;CTRL-SPC&gt; or &lt;CTRL-SPC&gt;)

What would isReceiverImplicitThis() do exactly? Maybe you can infer an implicit this every time you find an empty completion token, no?

 
&gt; I might try to implement another completion context based on reflection to
&gt; obtain the internal completion context and see how far I get? 

Umm. Maybe, if you need still more info than what CompletionContext already provides. But otherwise just implementing your own CompletionRequestor should do. You can see how CompletionRequestor2 is implemented. Put a breakpoint somewhere in the getContext(..) method and debug the CompletionTest2 suite. Or extend JDT.Ui&apos;s requestor.

&gt; Another, related question: Are proposal computations cached?
Not in jdt.core. The requestor collects/caches them.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2005191</commentid>
    <comment_count>6</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-10-05 07:29:19 -0400</bug_when>
    <thetext>(In reply to comment #5)

&gt; &gt; &gt; getCompletionNodeParent():  ASTNode (currently taken from Compiler AST)
&gt; 
&gt; For this I can provide APIs getCompletionNode() and getCompletionNodeParent().
&gt; Should be straightforward.

Actually this isn&apos;t so straightforward. The CompletionOn** nodes are internal compiler AST nodes and can&apos;t be provided through an API. Can you tell me what information do you need from the completion node and the parent? Maybe we can give these specific pieces of info from APIs.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2005209</commentid>
    <comment_count>7</comment_count>
    <who name="Marcel Bruch">marcel.bruch</who>
    <bug_when>2011-10-05 07:58:24 -0400</bug_when>
    <thetext>(In reply to comment #6)
&gt; &gt; &gt; &gt; getCompletionNodeParent():  ASTNode (currently taken from Compiler AST)
&gt; &gt; 
&gt; &gt; For this I can provide APIs getCompletionNode() and getCompletionNodeParent().
&gt; &gt; Should be straightforward.
&gt; 
&gt; Actually this isn&apos;t so straightforward. The CompletionOn** nodes are internal
&gt; compiler AST nodes and can&apos;t be provided through an API. Can you tell me what
&gt; information do you need from the completion node and the parent? Maybe we can
&gt; give these specific pieces of info from APIs.

Does it make a difference if it becomes part of the official API?

Anyways, I use the completion node (statement) 


1. to determine the type of the receiver (Button, Text, etc.) and to determine the name of the variable (if any). Then, given the type and name, I can lookup which methods have been invoked on this variable before.

2. to determine the expected return type of a completion (not sure how ATM).

3. to determine which proposals I should offer. For instance, it makes a difference if I trigger a completion on a method composite.setLayoutData(|^Space) or in composite.setLayout(|^Space). In the first case I could propose new GridData() or FormData if a formLayout has been used before in the latter I should propose the use of an prexisting layout object. 

Do you need more examples? Does it make sense to specify a set of completion scenarios?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2010429</commentid>
    <comment_count>8</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-10-14 04:01:54 -0400</bug_when>
    <thetext>(In reply to comment #7)

&gt; Does it make a difference if it becomes part of the official API?

These AST nodes use a lot of internal stuff and thus cannot be provided as API.

Anyhow, I&apos;ve been playing around with ways to give you all the information that you need and it looks not just inefficient to convert all the internal stuff to something that can be returned as an API, but may also not be too useable to you. Ex: I was trying to return an IJavaElement for the completion node, but then that would work only for simple cases i.e. completion on a local variable or a field, but not on when its done on a method, because then you will also need the receiver and its type.

I think we can take the non-API route here, so that all info is available to you  from the InternalExtendedCompletionContext without having to re-run the CompletionParser. So, I can just provide :

InternalExtendedCompletionContext#getCompletionNode() {
 return this.assistNode
}

and

InternalExtendedCompletionContext#getCompletionNodeParent() {
  return this.completionParser.assistNodeParent;
}

to return these private fields to you.

Then you can use your current ASTCompletionNodeFinder.java&apos;s evaluate...() methods to calculate the rest of the info.
 
What do you think?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2011038</commentid>
    <comment_count>9</comment_count>
    <who name="Marcel Bruch">marcel.bruch</who>
    <bug_when>2011-10-14 17:52:30 -0400</bug_when>
    <thetext>(In reply to comment #8)

&gt; What do you think?

Would be fine. How can I obtain the list of accessible fields and locals then? This would be needed for the callchain completion and the next iteration of the subwords completion (see http://vimeo.com/11664433 for a related work)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2013681</commentid>
    <comment_count>10</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-10-20 05:00:13 -0400</bug_when>
    <thetext>Moving this to M4 since I was busy with critical compiler issues in M3. 
Marcel, I&apos;ll need to check about the visible fields and locals, because even though we do have the org.eclipse.jdt.internal.codeassist.InternalExtendedCompletionContext.visibleFields
and org.eclipse.jdt.internal.codeassist.InternalExtendedCompletionContext.visibleLocalVariables

However, I think these do not reliably provide the info, since we sometimes reject parts of the CU that are not relevant for the completion proposal. Eg: 
void foo() {
   int i = 1;
   Object o = new Object {
        void running() {
              int j = 1;
              &lt;CTRL-SPC&gt;
         }
}

Here j is not available. So I can guarantee about providing completion node and its parent as specified in the above comment, but not so sure about visible fields and locals.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2014486</commentid>
    <comment_count>11</comment_count>
    <who name="Marcel Bruch">marcel.bruch</who>
    <bug_when>2011-10-21 06:51:56 -0400</bug_when>
    <thetext>(In reply to comment #10)
&gt; Here j is not available. 

I don&apos;t understand why j wouldn&apos;t be available here. Is there some documentation/explanation that explains when a local variable is available or not? 

At the moment, we use ASTVisitor.visit(final LocalDeclaration localDeclaration, final BlockScope scope) to collect all local variables known to the completion(!) parser. This worked out well - but we may have missed some details? Is there anything I can do?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2014578</commentid>
    <comment_count>12</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-10-21 09:51:19 -0400</bug_when>
    <thetext>(In reply to comment #11)
&gt; This worked out well - but we may have missed some
&gt; details? Is there anything I can do?

Let me investigate more on this and come back to you with concrete examples. I couldn&apos;t spend much time on this in M3.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2020627</commentid>
    <comment_count>13</comment_count>
      <attachid>206388</attachid>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-11-03 05:35:11 -0400</bug_when>
    <thetext>Created attachment 206388
proposed fix + tests

Here&apos;s a patch which provides access to the completion node, its parent, and the visible fields, locals, and methods.

Marcel, I was wrong in the above comment about some locals not being available. I was looking at other usages from jdt core and in those cases the assignableType parameter of the getVisibleElements(..) method was set to values which restricted the kind of locals we want.

Anyway, this patch should be sufficient. I made sure here that even the assist node parent is cached as soon as the extended context is constructed, in addition to the assist node itself. Let me know if this works for you and i&apos;ll commit it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2027640</commentid>
    <comment_count>14</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-16 22:06:33 -0500</bug_when>
    <thetext>(In reply to comment #13)
&gt; Created attachment 206388 [details]
&gt; proposed fix + tests

[...]
 
&gt; Let me know if this works for you and i&apos;ll
&gt; commit it.

Hello Marcel, It has been two weeks since this patch was posted. Have you
had a chance to check it out ? If you are not in a position to apply source
patches and experiment with them, let us know.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2027663</commentid>
    <comment_count>15</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-11-17 00:17:01 -0500</bug_when>
    <thetext>(In reply to comment #14)
&gt; Hello Marcel, It has been two weeks since this patch was posted. Have you
&gt; had a chance to check it out ? If you are not in a position to apply source
&gt; patches and experiment with them, let us know.

Thats ok Srikanth. Marcel has been in touch on twitter, and is testing the patch these days. :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2027774</commentid>
    <comment_count>16</comment_count>
    <who name="Marcel Bruch">marcel.bruch</who>
    <bug_when>2011-11-17 05:26:53 -0500</bug_when>
    <thetext>I just run the patch with eclipse 3.7.1 and jdt.core 3.8 (only) from git master. 

It seems, that the completion context that gets handed over to
ICompletionProposalComputer.computeCompletionProposals(ContentAssistInvocationContext, IProgressMonitor) is not extended. Am I supposed to reuse this context? 

My test code looks like this:

    @Override
    public List&lt;ICompletionProposal&gt; computeCompletionProposals(final ContentAssistInvocationContext context, final IProgressMonitor monitor) {
        final JavaContentAssistInvocationContext jCtx = (JavaContentAssistInvocationContext) context;
        final InternalCompletionContext coreContext = (InternalCompletionContext) jCtx.getCoreContext();
        if (coreContext.isExtended()) {
            // didn&apos;t manage to get in here:
            final ASTNode completionNode = coreContext.getCompletionNode();
            final ASTNode completionNodeParent = coreContext.getCompletionNodeParent();
            final ObjectVector visibleFields = coreContext.getVisibleFields();
        }

I think the collector responsible for this is created in  org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext():280. It does not request an extended context.

Am I supposed to re-run code completion again in my own collector that requests the extended context?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2029300</commentid>
    <comment_count>17</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-11-21 06:32:07 -0500</bug_when>
    <thetext>(In reply to comment #16)
&gt; I think the collector responsible for this is created in 
&gt; org.eclipse.jdt.ui.text.java.JavaContentAssistInvocationContext.computeKeywordsAndContext():280.
&gt; It does not request an extended context.

This is only called when no collector is found in the JavaContentAssistInvocationContext. Usually if i debug using another Eclipse instance, I can always see the FillArgumentNamesCompletionProposalCollector requesting the proposals, and this always has the extended context. This is created in org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.createCollector(JavaContentAssistInvocationContext)

How did you end up inside computeKeywordsAndContext() ?

&gt; Am I supposed to re-run code completion again in my own collector that requests
&gt; the extended context?

If you&apos;re using your own collector, then you have to request extended context. But you won&apos;t need to re-run completion since, as shown above, jdt.ui&apos;s collector already has the extended context.(In reply to comment #16)


&gt; It seems, that the completion context that gets handed over to
&gt; ICompletionProposalComputer.computeCompletionProposals(ContentAssistInvocationContext,
&gt; IProgressMonitor) is not extended. Am I supposed to reuse this context? 

You can look at JDT/UI&apos;s implementation - org.eclipse.jdt.internal.ui.text.java.JavaTypeCompletionProposalComputer.computeCompletionProposals(ContentAssistInvocationContext, IProgressMonitor)

The context here is JavaContentAssistInvocationContext which has a collector in which extended information is present.

Is there any specific test case when you don&apos;t get the extended context?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2030237</commentid>
    <comment_count>18</comment_count>
    <who name="Marcel Bruch">marcel.bruch</who>
    <bug_when>2011-11-22 10:22:30 -0500</bug_when>
    <thetext>(In reply to comment #17)

&gt; How did you end up inside computeKeywordsAndContext() ?

No idea. I was just plain wrong. Sorry for that :)


I run the completion again and it works *very* nicely:
The completion nodes look perfect; the completionNodeParents are there when needed (local variable declaration and field declarations); visible fields and locals seem to work - what else can I need?!

We probably get rid of our complete AST parsing code now. Thanks!


Let me get you a beer at EclipseCon :)

Best,
Marcel</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2030288</commentid>
    <comment_count>19</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-11-22 11:07:29 -0500</bug_when>
    <thetext>(In reply to comment #18)
&gt; (In reply to comment #17)
&gt; 
&gt; &gt; How did you end up inside computeKeywordsAndContext() ?
&gt; 
&gt; No idea. I was just plain wrong. Sorry for that :)
&gt; 
&gt; 
&gt; I run the completion again and it works *very* nicely:
&gt; The completion nodes look perfect; the completionNodeParents are there when
&gt; needed (local variable declaration and field declarations); visible fields and
&gt; locals seem to work - what else can I need?!

That&apos;s great news! Thanks a lot for your patience and more thanks for all the good work you&apos;ve been doing in Code Recommenders. Let me get this patch released. :)

&gt; Let me get you a beer at EclipseCon :)
Looking forward to it :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2032780</commentid>
    <comment_count>20</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-11-28 12:50:40 -0500</bug_when>
    <thetext>Released to HEAD via commit a123639b0e67de0eec1abd2bc005d5cc75ac4787.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2036279</commentid>
    <comment_count>21</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-06 07:04:21 -0500</bug_when>
    <thetext>Fix verified by submitter (see comment#18)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2037357</commentid>
    <comment_count>22</comment_count>
    <who name="Marcel Bruch">marcel.bruch</who>
    <bug_when>2011-12-07 14:47:34 -0500</bug_when>
    <thetext>I run into an issue. When the code completion engine is not on the &quot;default&quot; content assists list, the given InternalCoreContext is not an extended context anymore.

When activating my engine on both, default and any secondary content assist list, it works on the default tab but not on the secondary tab.  Can you reproduce this?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2037364</commentid>
    <comment_count>23</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-12-07 15:01:25 -0500</bug_when>
    <thetext>(In reply to comment #22)
&gt; I run into an issue. When the code completion engine is not on the &quot;default&quot;
&gt; content assists list, the given InternalCoreContext is not an extended context
&gt; anymore.
&gt; 
&gt; When activating my engine on both, default and any secondary content assist
&gt; list, it works on the default tab but not on the secondary tab.  Can you
&gt; reproduce this?

I couldn&apos;t really understand this. What exactly do you mean by &apos;default&apos; and &apos;secondary&apos; lists? Are you talking about the cycling between different proposal kinds in the content assist suggestions tooltip?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2037373</commentid>
    <comment_count>24</comment_count>
    <who name="Marcel Bruch">marcel.bruch</who>
    <bug_when>2011-12-07 15:09:17 -0500</bug_when>
    <thetext>(In reply to comment #23)
&gt; I couldn&apos;t really understand this. What exactly do you mean by &apos;default&apos; and
&gt; &apos;secondary&apos; lists? Are you talking about the cycling between different proposal
&gt; kinds in the content assist suggestions tooltip?

Sorry for the bad naming convention. I think you understood it correctly.

default content assist list -&gt; trigger ctrl+space once
second content assist list -&gt; trigger ctrl+space twice

I subsumed all content assists that are not on the default content assist list as &quot;secondary content assists lists&quot;

If my callchain prototype is configured to the default list, all completions are there.
If it runs in a separate content list (2nd or 3rd etc.) the context is not extended anymore.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2046600</commentid>
    <comment_count>25</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-01-05 08:24:29 -0500</bug_when>
    <thetext>(In reply to comment #24)
&gt; Sorry for the bad naming convention. I think you understood it correctly.
&gt; 
&gt; default content assist list -&gt; trigger ctrl+space once
&gt; second content assist list -&gt; trigger ctrl+space twice
&gt; 
&gt; I subsumed all content assists that are not on the default content assist list
&gt; as &quot;secondary content assists lists&quot;
&gt; 
&gt; If my callchain prototype is configured to the default list, all completions
&gt; are there.
&gt; If it runs in a separate content list (2nd or 3rd etc.) the context is not
&gt; extended anymore.

Oops. I just now saw this comment. Terribly sorry for the delay. Can you file a bug for this against JDT/UI, and check why an extended context is not requested by the collector in that case? The behaviour wrt JDT/Core will not depend on the primary or secondary lists, but the way the completion APIs are called changes from JDT/UI. I don&apos;t have much knowledge about how that second list uses JDT/Core. Thanks!</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>206388</attachid>
            <date>2011-11-03 05:35:00 -0400</date>
            <delta_ts>2011-11-03 05:35:11 -0400</delta_ts>
            <desc>proposed fix + tests</desc>
            <filename>HEAD--Fixed-bug-340945-Extension-Request-of-JavaCont.patch</filename>
            <type>text/plain</type>
            <size>22676</size>
            <attacher name="Ayushman Jain">amj87.iitr</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9tb2RlbC9Db21wbGV0aW9uVGVzdHMyLmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
bW9kZWwvQ29tcGxldGlvblRlc3RzMi5qYXZhCmluZGV4IGEwNjc5MjQuLjhjZjljODggMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9tb2RlbC9Db21wbGV0aW9uVGVzdHMyLmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21v
ZGVsL0NvbXBsZXRpb25UZXN0czIuamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTAgSUJNIENvcnBvcmF0aW9uIGFu
ZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTEgSUJNIENvcnBvcmF0aW9uIGFu
ZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBh
Y2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRl
cm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFu
aWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC0zOCw2ICszOCw3
IEBACiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuSUphdmFQcm9qZWN0OwogaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5jb3JlLklUeXBlOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLkph
dmFDb3JlOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLkphdmFNb2RlbEV4Y2VwdGlvbjsK
IGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy51dGlsLlV0aWw7CiBpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvZGVhc3Npc3QuUmVsZXZhbmNlQ29uc3RhbnRzOwogaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5pbXBsLkNvbXBpbGVyT3B0aW9u
czsKQEAgLTQ1LDYgKzQ2LDEwIEBACiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNv
cmUuc2VhcmNoLmluZGV4aW5nLkluZGV4TWFuYWdlcjsKIAogcHVibGljIGNsYXNzIENvbXBsZXRp
b25UZXN0czIgZXh0ZW5kcyBNb2RpZnlpbmdSZXNvdXJjZVRlc3RzIGltcGxlbWVudHMgUmVsZXZh
bmNlQ29uc3RhbnRzIHsKKwkKKwlzdGF0aWMgeworLy8JCVRFU1RTX05BTUVTID0gbmV3IFN0cmlu
Z1tdeyJ0ZXN0QnVnMzQwOTQ1In07CisJfQogCiAJcHVibGljIHN0YXRpYyBjbGFzcyBDb21wbGV0
aW9uQ29udGFpbmVySW5pdGlhbGl6ZXIgaW1wbGVtZW50cyBDb250YWluZXJJbml0aWFsaXplci5J
VGVzdEluaXRpYWxpemVyIHsKIApAQCAtNTU5MSw0ICs1NTk2LDI2MCBAQAogCQlkZWxldGVQcm9q
ZWN0KHByb2plY3QpOwogCX0KIH0KKworLy9odHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9z
aG93X2J1Zy5jZ2k/aWQ9MjkyMDg3CitwdWJsaWMgdm9pZCB0ZXN0QnVnMzQwOTQ1KCkgdGhyb3dz
IEphdmFNb2RlbEV4Y2VwdGlvbiB7CisJdGhpcy53b3JraW5nQ29waWVzID0gbmV3IElDb21waWxh
dGlvblVuaXRbMV07CisJdGhpcy53b3JraW5nQ29waWVzWzBdID0gZ2V0V29ya2luZ0NvcHkoCisJ
CQkiL0NvbXBsZXRpb24vc3JjL3Rlc3QvVHJ5LmphdmEiLAorCQkJInBhY2thZ2UgdGVzdDtcbiIg
KworCQkJInB1YmxpYyBjbGFzcyBUcnkgZXh0ZW5kcyBUaHJlYWR7XG4iICsKKwkJCSIJaW50IGlu
dHkgPSAxO1xuIiArCisJCQkiCXZvaWQgZm9vKCkge1xuIiArCisJCQkiCQlpbnQgaSA9IDE7XG4i
ICsKKwkJCSIJCU9iamVjdCBvID0gbmV3IE9iamVjdCgpIHtcbiIgKworCQkJIgkJCXZvaWQgcnVu
bmluZygpIHtcbiIgKworCQkJIgkJCQlpbnQgaiA9IDE7XG4iICsKKwkJCSIJCQkJaW50IGsgPSAi
ICsKKwkJCSIJCQl9XG4iICsKKwkJCSIJCX1cbiIgKworCQkJIgl9XG4iICsKKwkJCSJ9XG4iKTsK
KworCUNvbXBsZXRpb25UZXN0c1JlcXVlc3RvcjIgcmVxdWVzdG9yID0gbmV3IENvbXBsZXRpb25U
ZXN0c1JlcXVlc3RvcjIodHJ1ZSk7CisJcmVxdWVzdG9yLnNldFJlcXVpcmVFeHRlbmRlZENvbnRl
eHQodHJ1ZSk7CisJcmVxdWVzdG9yLmFsbG93QWxsUmVxdWlyZWRQcm9wb3NhbHMoKTsKKwlyZXF1
ZXN0b3Iuc2V0Q29tcHV0ZVZpc2libGVFbGVtZW50cyh0cnVlKTsKKy8vCXJlcXVlc3Rvci5zZXRB
c3NpZ25hYmxlVHlwZSgiSSIpOworCVN0cmluZyBzdHIgPSB0aGlzLndvcmtpbmdDb3BpZXNbMF0u
Z2V0U291cmNlKCk7CisJU3RyaW5nIGNvbXBsZXRlQmVoaW5kID0gImludCBrID0iOworCWludCBj
dXJzb3JMb2NhdGlvbiA9IHN0ci5sYXN0SW5kZXhPZihjb21wbGV0ZUJlaGluZCkgKyBjb21wbGV0
ZUJlaGluZC5sZW5ndGgoKTsKKwl0aGlzLndvcmtpbmdDb3BpZXNbMF0uY29kZUNvbXBsZXRlKGN1
cnNvckxvY2F0aW9uLCByZXF1ZXN0b3IsIHRoaXMud2NPd25lcik7CisJYXNzZXJ0UmVzdWx0cygK
KwkJCSI8Q29tcGxldGVPbk5hbWU6PiIsCisJCQlyZXF1ZXN0b3IuZ2V0Q29tcGxldGlvbk5vZGUo
KSk7CisJYXNzZXJ0UmVzdWx0cygKKwkJCSJpbnQgayA9IDxDb21wbGV0ZU9uTmFtZTo+OyIsCisJ
CQlyZXF1ZXN0b3IuZ2V0Q29tcGxldGlvbk5vZGVQYXJlbnQoKSk7CisJYXNzZXJ0UmVzdWx0cygK
KwkJCSJpbnQgaltwb3M6IHVudXNlZF1baWQ6Ml1cbiIgKworCQkJImludCBpW3BvczogdW51c2Vk
XVtpZDowXVxuIiArCisJCQkiamF2YS5sYW5nLk9iamVjdCBvW3BvczogdW51c2VkXVtpZDoxXVxu
IiwKKwkJCXJlcXVlc3Rvci5nZXRWaXNpYmxlTG9jYWxWYXJpYWJsZXMoKSk7CisJYXNzZXJ0UmVz
dWx0cygKKwkJCSJpbnQgaW50eVxuIiwKKwkJCXJlcXVlc3Rvci5nZXRWaXNpYmxlRmllbGRzKCkp
OworCWFzc2VydFJlc3VsdHMoCisJCQkidm9pZCBydW5uaW5nKCkgXG4iICsKKwkJCSJwdWJsaWMg
ZmluYWwgdm9pZCB3YWl0KGxvbmcsIGludCkgdGhyb3dzIGphdmEubGFuZy5JbGxlZ2FsTW9uaXRv
clN0YXRlRXhjZXB0aW9uLCBqYXZhLmxhbmcuSW50ZXJydXB0ZWRFeGNlcHRpb25cbiIgKworCQkJ
InB1YmxpYyBmaW5hbCB2b2lkIHdhaXQobG9uZykgdGhyb3dzIGphdmEubGFuZy5JbGxlZ2FsTW9u
aXRvclN0YXRlRXhjZXB0aW9uLCBqYXZhLmxhbmcuSW50ZXJydXB0ZWRFeGNlcHRpb25cbiIgKwor
CQkJInB1YmxpYyBmaW5hbCB2b2lkIHdhaXQoKSB0aHJvd3MgamF2YS5sYW5nLklsbGVnYWxNb25p
dG9yU3RhdGVFeGNlcHRpb24sIGphdmEubGFuZy5JbnRlcnJ1cHRlZEV4Y2VwdGlvblxuIiArCisJ
CQkicHVibGljIGphdmEubGFuZy5TdHJpbmcgdG9TdHJpbmcoKSBcbiIgKworCQkJInB1YmxpYyBm
aW5hbCB2b2lkIG5vdGlmeUFsbCgpIHRocm93cyBqYXZhLmxhbmcuSWxsZWdhbE1vbml0b3JTdGF0
ZUV4Y2VwdGlvblxuIiArCisJCQkicHVibGljIGZpbmFsIHZvaWQgbm90aWZ5KCkgdGhyb3dzIGph
dmEubGFuZy5JbGxlZ2FsTW9uaXRvclN0YXRlRXhjZXB0aW9uXG4iICsKKwkJCSJwdWJsaWMgaW50
IGhhc2hDb2RlKCkgXG4iICsKKwkJCSJwdWJsaWMgZmluYWwgamF2YS5sYW5nLkNsYXNzIGdldENs
YXNzKCkgXG4iICsgCisJCQkicHJvdGVjdGVkIHZvaWQgZmluYWxpemUoKSB0aHJvd3MgamF2YS5s
YW5nLlRocm93YWJsZVxuIiArCisJCQkicHVibGljIGJvb2xlYW4gZXF1YWxzKGphdmEubGFuZy5P
YmplY3QpIFxuIiArCisJCQkicHJvdGVjdGVkIGphdmEubGFuZy5PYmplY3QgY2xvbmUoKSB0aHJv
d3MgamF2YS5sYW5nLkNsb25lTm90U3VwcG9ydGVkRXhjZXB0aW9uXG4iICsKKwkJCSJ2b2lkIGZv
bygpIFxuIiwKKwkJCXJlcXVlc3Rvci5nZXRWaXNpYmxlTWV0aG9kcygpKTsKK30KKworLy8gaHR0
cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTI5MjA4NworcHVibGlj
IHZvaWQgdGVzdEJ1ZzM0MDk0NWEoKSB0aHJvd3MgSmF2YU1vZGVsRXhjZXB0aW9uIHsKKwl0aGlz
LndvcmtpbmdDb3BpZXMgPSBuZXcgSUNvbXBpbGF0aW9uVW5pdFsxXTsKKwl0aGlzLndvcmtpbmdD
b3BpZXNbMF0gPSBnZXRXb3JraW5nQ29weSgKKwkJCSIvQ29tcGxldGlvbi9zcmMvdGVzdC9Ucnku
amF2YSIsCisJCQkicGFja2FnZSB0ZXN0O1xuIiArCisJCQkicHVibGljIGNsYXNzIFRyeSBleHRl
bmRzIFRocmVhZHtcbiIgKworCQkJIglpbnQgaW50MSA9IDE7XG4iICsKKwkJCSIJaW50IGludDIg
PSAyO1xuIiArCisJCQkiCWludCBpbnQzID0gIiArCisJCQkifVxuIik7CisKKwlDb21wbGV0aW9u
VGVzdHNSZXF1ZXN0b3IyIHJlcXVlc3RvciA9IG5ldyBDb21wbGV0aW9uVGVzdHNSZXF1ZXN0b3Iy
KHRydWUpOworCXJlcXVlc3Rvci5zZXRSZXF1aXJlRXh0ZW5kZWRDb250ZXh0KHRydWUpOworCXJl
cXVlc3Rvci5hbGxvd0FsbFJlcXVpcmVkUHJvcG9zYWxzKCk7CisJcmVxdWVzdG9yLnNldENvbXB1
dGVWaXNpYmxlRWxlbWVudHModHJ1ZSk7CisJU3RyaW5nIHN0ciA9IHRoaXMud29ya2luZ0NvcGll
c1swXS5nZXRTb3VyY2UoKTsKKwlTdHJpbmcgY29tcGxldGVCZWhpbmQgPSAiaW50IGludDMgPSI7
CisJaW50IGN1cnNvckxvY2F0aW9uID0gc3RyLmxhc3RJbmRleE9mKGNvbXBsZXRlQmVoaW5kKSAr
IGNvbXBsZXRlQmVoaW5kLmxlbmd0aCgpOworCXRoaXMud29ya2luZ0NvcGllc1swXS5jb2RlQ29t
cGxldGUoY3Vyc29yTG9jYXRpb24sIHJlcXVlc3RvciwgdGhpcy53Y093bmVyKTsKKwlhc3NlcnRS
ZXN1bHRzKAorCQkJIjxDb21wbGV0ZU9uTmFtZTo+IiwKKwkJCXJlcXVlc3Rvci5nZXRDb21wbGV0
aW9uTm9kZSgpKTsKKwlhc3NlcnRSZXN1bHRzKAorCQkJImludCBpbnQzID0gPENvbXBsZXRlT25O
YW1lOj47IiwKKwkJCXJlcXVlc3Rvci5nZXRDb21wbGV0aW9uTm9kZVBhcmVudCgpKTsKKwlhc3Nl
cnRSZXN1bHRzKAorCQkJIiIsCisJCQlyZXF1ZXN0b3IuZ2V0VmlzaWJsZUxvY2FsVmFyaWFibGVz
KCkpOworCWFzc2VydFJlc3VsdHMoCisJCQkiaW50IGludDJcbiIgKworCQkJImludCBpbnQxXG4i
LAorCQkJcmVxdWVzdG9yLmdldFZpc2libGVGaWVsZHMoKSk7CisJYXNzZXJ0UmVzdWx0cygKKwkJ
CSJwdWJsaWMgZmluYWwgdm9pZCB3YWl0KGxvbmcsIGludCkgdGhyb3dzIGphdmEubGFuZy5JbGxl
Z2FsTW9uaXRvclN0YXRlRXhjZXB0aW9uLCBqYXZhLmxhbmcuSW50ZXJydXB0ZWRFeGNlcHRpb25c
biIgKworCQkJInB1YmxpYyBmaW5hbCB2b2lkIHdhaXQobG9uZykgdGhyb3dzIGphdmEubGFuZy5J
bGxlZ2FsTW9uaXRvclN0YXRlRXhjZXB0aW9uLCBqYXZhLmxhbmcuSW50ZXJydXB0ZWRFeGNlcHRp
b25cbiIgKworCQkJInB1YmxpYyBmaW5hbCB2b2lkIHdhaXQoKSB0aHJvd3MgamF2YS5sYW5nLkls
bGVnYWxNb25pdG9yU3RhdGVFeGNlcHRpb24sIGphdmEubGFuZy5JbnRlcnJ1cHRlZEV4Y2VwdGlv
blxuIiArCisJCQkicHVibGljIGphdmEubGFuZy5TdHJpbmcgdG9TdHJpbmcoKSBcbiIgKworCQkJ
InB1YmxpYyBmaW5hbCB2b2lkIG5vdGlmeUFsbCgpIHRocm93cyBqYXZhLmxhbmcuSWxsZWdhbE1v
bml0b3JTdGF0ZUV4Y2VwdGlvblxuIiArCisJCQkicHVibGljIGZpbmFsIHZvaWQgbm90aWZ5KCkg
dGhyb3dzIGphdmEubGFuZy5JbGxlZ2FsTW9uaXRvclN0YXRlRXhjZXB0aW9uXG4iICsKKwkJCSJw
dWJsaWMgaW50IGhhc2hDb2RlKCkgXG4iICsKKwkJCSJwdWJsaWMgZmluYWwgamF2YS5sYW5nLkNs
YXNzIGdldENsYXNzKCkgXG4iICsgCisJCQkicHJvdGVjdGVkIHZvaWQgZmluYWxpemUoKSB0aHJv
d3MgamF2YS5sYW5nLlRocm93YWJsZVxuIiArCisJCQkicHVibGljIGJvb2xlYW4gZXF1YWxzKGph
dmEubGFuZy5PYmplY3QpIFxuIiArCisJCQkicHJvdGVjdGVkIGphdmEubGFuZy5PYmplY3QgY2xv
bmUoKSB0aHJvd3MgamF2YS5sYW5nLkNsb25lTm90U3VwcG9ydGVkRXhjZXB0aW9uXG4iLAorCQkJ
cmVxdWVzdG9yLmdldFZpc2libGVNZXRob2RzKCkpOworfQorCisvLyBodHRwczovL2J1Z3MuZWNs
aXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MjkyMDg3CitwdWJsaWMgdm9pZCB0ZXN0QnVn
MzQwOTQ1YigpIHRocm93cyBKYXZhTW9kZWxFeGNlcHRpb24geworCXRoaXMud29ya2luZ0NvcGll
cyA9IG5ldyBJQ29tcGlsYXRpb25Vbml0WzFdOworCXRoaXMud29ya2luZ0NvcGllc1swXSA9IGdl
dFdvcmtpbmdDb3B5KAorCQkJIi9Db21wbGV0aW9uL3NyYy90ZXN0L1RyeS5qYXZhIiwKKwkJCSJw
YWNrYWdlIHRlc3Q7XG4iICsKKwkJCSJwdWJsaWMgY2xhc3MgVHJ5IGV4dGVuZHMgVGhyZWFke1xu
IiArCisJCQkiT2JqZWN0IGZpZWxkO1xuIiArCisJCQkidm9pZCBmb28oKSB7XG4iICsKKwkJCSIJ
aW50IGludDEgPSAxO1xuIiArCisJCQkiCWludCBpbnQyID0gMjtcbiIgKworCQkJIglpbnQgaW50
MyA9ICIgKworCQkJIn1cbiIgKworCQkJIn1cbiIpOworCisJQ29tcGxldGlvblRlc3RzUmVxdWVz
dG9yMiByZXF1ZXN0b3IgPSBuZXcgQ29tcGxldGlvblRlc3RzUmVxdWVzdG9yMih0cnVlKTsKKwly
ZXF1ZXN0b3Iuc2V0UmVxdWlyZUV4dGVuZGVkQ29udGV4dCh0cnVlKTsKKwlyZXF1ZXN0b3IuYWxs
b3dBbGxSZXF1aXJlZFByb3Bvc2FscygpOworCXJlcXVlc3Rvci5zZXRDb21wdXRlVmlzaWJsZUVs
ZW1lbnRzKHRydWUpOworCVN0cmluZyBzdHIgPSB0aGlzLndvcmtpbmdDb3BpZXNbMF0uZ2V0U291
cmNlKCk7CisJU3RyaW5nIGNvbXBsZXRlQmVoaW5kID0gImludCBpbnQzID0iOworCWludCBjdXJz
b3JMb2NhdGlvbiA9IHN0ci5sYXN0SW5kZXhPZihjb21wbGV0ZUJlaGluZCkgKyBjb21wbGV0ZUJl
aGluZC5sZW5ndGgoKTsKKwl0aGlzLndvcmtpbmdDb3BpZXNbMF0uY29kZUNvbXBsZXRlKGN1cnNv
ckxvY2F0aW9uLCByZXF1ZXN0b3IsIHRoaXMud2NPd25lcik7CisJYXNzZXJ0UmVzdWx0cygKKwkJ
CSI8Q29tcGxldGVPbk5hbWU6PiIsCisJCQlyZXF1ZXN0b3IuZ2V0Q29tcGxldGlvbk5vZGUoKSk7
CisJYXNzZXJ0UmVzdWx0cygKKwkJCSJpbnQgaW50MyA9IDxDb21wbGV0ZU9uTmFtZTo+OyIsCisJ
CQlyZXF1ZXN0b3IuZ2V0Q29tcGxldGlvbk5vZGVQYXJlbnQoKSk7CisJYXNzZXJ0UmVzdWx0cygK
KwkJCSJpbnQgaW50MVtwb3M6IHVudXNlZF1baWQ6MF1cbiIgKworCQkJImludCBpbnQyW3Bvczog
dW51c2VkXVtpZDoxXVxuIiwKKwkJCXJlcXVlc3Rvci5nZXRWaXNpYmxlTG9jYWxWYXJpYWJsZXMo
KSk7CisJYXNzZXJ0UmVzdWx0cygKKwkJCSJqYXZhLmxhbmcuT2JqZWN0IGZpZWxkXG4iLAorCQkJ
cmVxdWVzdG9yLmdldFZpc2libGVGaWVsZHMoKSk7CisJYXNzZXJ0UmVzdWx0cygKKwkJCSJ2b2lk
IGZvbygpIFxuIiArCisJCQkicHVibGljIGZpbmFsIHZvaWQgd2FpdChsb25nLCBpbnQpIHRocm93
cyBqYXZhLmxhbmcuSWxsZWdhbE1vbml0b3JTdGF0ZUV4Y2VwdGlvbiwgamF2YS5sYW5nLkludGVy
cnVwdGVkRXhjZXB0aW9uXG4iICsKKwkJCSJwdWJsaWMgZmluYWwgdm9pZCB3YWl0KGxvbmcpIHRo
cm93cyBqYXZhLmxhbmcuSWxsZWdhbE1vbml0b3JTdGF0ZUV4Y2VwdGlvbiwgamF2YS5sYW5nLklu
dGVycnVwdGVkRXhjZXB0aW9uXG4iICsKKwkJCSJwdWJsaWMgZmluYWwgdm9pZCB3YWl0KCkgdGhy
b3dzIGphdmEubGFuZy5JbGxlZ2FsTW9uaXRvclN0YXRlRXhjZXB0aW9uLCBqYXZhLmxhbmcuSW50
ZXJydXB0ZWRFeGNlcHRpb25cbiIgKworCQkJInB1YmxpYyBqYXZhLmxhbmcuU3RyaW5nIHRvU3Ry
aW5nKCkgXG4iICsKKwkJCSJwdWJsaWMgZmluYWwgdm9pZCBub3RpZnlBbGwoKSB0aHJvd3MgamF2
YS5sYW5nLklsbGVnYWxNb25pdG9yU3RhdGVFeGNlcHRpb25cbiIgKworCQkJInB1YmxpYyBmaW5h
bCB2b2lkIG5vdGlmeSgpIHRocm93cyBqYXZhLmxhbmcuSWxsZWdhbE1vbml0b3JTdGF0ZUV4Y2Vw
dGlvblxuIiArCisJCQkicHVibGljIGludCBoYXNoQ29kZSgpIFxuIiArCisJCQkicHVibGljIGZp
bmFsIGphdmEubGFuZy5DbGFzcyBnZXRDbGFzcygpIFxuIiArIAorCQkJInByb3RlY3RlZCB2b2lk
IGZpbmFsaXplKCkgdGhyb3dzIGphdmEubGFuZy5UaHJvd2FibGVcbiIgKworCQkJInB1YmxpYyBi
b29sZWFuIGVxdWFscyhqYXZhLmxhbmcuT2JqZWN0KSBcbiIgKworCQkJInByb3RlY3RlZCBqYXZh
LmxhbmcuT2JqZWN0IGNsb25lKCkgdGhyb3dzIGphdmEubGFuZy5DbG9uZU5vdFN1cHBvcnRlZEV4
Y2VwdGlvblxuIiwJCQkKKwkJCXJlcXVlc3Rvci5nZXRWaXNpYmxlTWV0aG9kcygpKTsKK30KKwor
Ly8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTI5MjA4Nwor
cHVibGljIHZvaWQgdGVzdEJ1ZzM0MDk0NWMoKSB0aHJvd3MgSmF2YU1vZGVsRXhjZXB0aW9uIHsK
Kwl0aGlzLndvcmtpbmdDb3BpZXMgPSBuZXcgSUNvbXBpbGF0aW9uVW5pdFsxXTsKKwl0aGlzLndv
cmtpbmdDb3BpZXNbMF0gPSBnZXRXb3JraW5nQ29weSgKKwkJCSIvQ29tcGxldGlvbi9zcmMvdGVz
dC9UcnkuamF2YSIsCisJCQkicGFja2FnZSB0ZXN0O1xuIiArCisJCQkicHVibGljIGNsYXNzIFRy
eSBleHRlbmRzIFRocmVhZHtcbiIgKworCQkJIk9iamVjdCBmaWVsZDtcbiIgKworCQkJInZvaWQg
Zm9vKCkge1xuIiArCisJCQkiCWludCBpbnQxID0gMTtcbiIgKworCQkJIglpbnQgaW50MiA9IDI7
XG4iICsKKwkJCSIJT2JqZWN0IG8xID0gbmV3IE9iamVjdCgpO1xuIiArCisJCQkiICAgbzEuIiAr
CisJCQkifVxuIiArCisJCQkifVxuIik7CisKKwlDb21wbGV0aW9uVGVzdHNSZXF1ZXN0b3IyIHJl
cXVlc3RvciA9IG5ldyBDb21wbGV0aW9uVGVzdHNSZXF1ZXN0b3IyKHRydWUpOworCXJlcXVlc3Rv
ci5zZXRSZXF1aXJlRXh0ZW5kZWRDb250ZXh0KHRydWUpOworCXJlcXVlc3Rvci5hbGxvd0FsbFJl
cXVpcmVkUHJvcG9zYWxzKCk7CisJcmVxdWVzdG9yLnNldENvbXB1dGVWaXNpYmxlRWxlbWVudHMo
dHJ1ZSk7CisJU3RyaW5nIHN0ciA9IHRoaXMud29ya2luZ0NvcGllc1swXS5nZXRTb3VyY2UoKTsK
KwlTdHJpbmcgY29tcGxldGVCZWhpbmQgPSAibzEuIjsKKwlpbnQgY3Vyc29yTG9jYXRpb24gPSBz
dHIubGFzdEluZGV4T2YoY29tcGxldGVCZWhpbmQpICsgY29tcGxldGVCZWhpbmQubGVuZ3RoKCk7
CisJdGhpcy53b3JraW5nQ29waWVzWzBdLmNvZGVDb21wbGV0ZShjdXJzb3JMb2NhdGlvbiwgcmVx
dWVzdG9yLCB0aGlzLndjT3duZXIpOworCWFzc2VydFJlc3VsdHMoCisJCQkiPENvbXBsZXRlT25O
YW1lOm8xLj4iLAorCQkJcmVxdWVzdG9yLmdldENvbXBsZXRpb25Ob2RlKCkpOworCWFzc2VydE51
bGwoCisJCQkic2hvdWxkIGJlIG51bGwiLAorCQkJcmVxdWVzdG9yLmdldENvbXBsZXRpb25Ob2Rl
UGFyZW50KCkpOworCWFzc2VydFJlc3VsdHMoCisJCQkiaW50IGludDFbcG9zOiB1bnVzZWRdW2lk
OjBdXG4iICsKKwkJCSJpbnQgaW50Mltwb3M6IHVudXNlZF1baWQ6MV1cbiIgKworCQkJImphdmEu
bGFuZy5PYmplY3QgbzFbcG9zOiB1bnVzZWRdW2lkOjJdXG4iLAorCQkJcmVxdWVzdG9yLmdldFZp
c2libGVMb2NhbFZhcmlhYmxlcygpKTsKKwlhc3NlcnRSZXN1bHRzKAorCQkJImphdmEubGFuZy5P
YmplY3QgZmllbGRcbiIsCisJCQlyZXF1ZXN0b3IuZ2V0VmlzaWJsZUZpZWxkcygpKTsKKwlhc3Nl
cnRSZXN1bHRzKAorCQkJInZvaWQgZm9vKCkgXG4iICsKKwkJCSJwdWJsaWMgZmluYWwgdm9pZCB3
YWl0KGxvbmcsIGludCkgdGhyb3dzIGphdmEubGFuZy5JbGxlZ2FsTW9uaXRvclN0YXRlRXhjZXB0
aW9uLCBqYXZhLmxhbmcuSW50ZXJydXB0ZWRFeGNlcHRpb25cbiIgKworCQkJInB1YmxpYyBmaW5h
bCB2b2lkIHdhaXQobG9uZykgdGhyb3dzIGphdmEubGFuZy5JbGxlZ2FsTW9uaXRvclN0YXRlRXhj
ZXB0aW9uLCBqYXZhLmxhbmcuSW50ZXJydXB0ZWRFeGNlcHRpb25cbiIgKworCQkJInB1YmxpYyBm
aW5hbCB2b2lkIHdhaXQoKSB0aHJvd3MgamF2YS5sYW5nLklsbGVnYWxNb25pdG9yU3RhdGVFeGNl
cHRpb24sIGphdmEubGFuZy5JbnRlcnJ1cHRlZEV4Y2VwdGlvblxuIiArCisJCQkicHVibGljIGph
dmEubGFuZy5TdHJpbmcgdG9TdHJpbmcoKSBcbiIgKworCQkJInB1YmxpYyBmaW5hbCB2b2lkIG5v
dGlmeUFsbCgpIHRocm93cyBqYXZhLmxhbmcuSWxsZWdhbE1vbml0b3JTdGF0ZUV4Y2VwdGlvblxu
IiArCisJCQkicHVibGljIGZpbmFsIHZvaWQgbm90aWZ5KCkgdGhyb3dzIGphdmEubGFuZy5JbGxl
Z2FsTW9uaXRvclN0YXRlRXhjZXB0aW9uXG4iICsKKwkJCSJwdWJsaWMgaW50IGhhc2hDb2RlKCkg
XG4iICsKKwkJCSJwdWJsaWMgZmluYWwgamF2YS5sYW5nLkNsYXNzIGdldENsYXNzKCkgXG4iICsg
CisJCQkicHJvdGVjdGVkIHZvaWQgZmluYWxpemUoKSB0aHJvd3MgamF2YS5sYW5nLlRocm93YWJs
ZVxuIiArCisJCQkicHVibGljIGJvb2xlYW4gZXF1YWxzKGphdmEubGFuZy5PYmplY3QpIFxuIiAr
CisJCQkicHJvdGVjdGVkIGphdmEubGFuZy5PYmplY3QgY2xvbmUoKSB0aHJvd3MgamF2YS5sYW5n
LkNsb25lTm90U3VwcG9ydGVkRXhjZXB0aW9uXG4iLAkJCQorCQkJcmVxdWVzdG9yLmdldFZpc2li
bGVNZXRob2RzKCkpOworfQorCisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93
X2J1Zy5jZ2k/aWQ9MjkyMDg3CitwdWJsaWMgdm9pZCB0ZXN0QnVnMzQwOTQ1ZCgpIHRocm93cyBK
YXZhTW9kZWxFeGNlcHRpb24geworCXRoaXMud29ya2luZ0NvcGllcyA9IG5ldyBJQ29tcGlsYXRp
b25Vbml0WzFdOworCXRoaXMud29ya2luZ0NvcGllc1swXSA9IGdldFdvcmtpbmdDb3B5KAorCQkJ
Ii9Db21wbGV0aW9uL3NyYy90ZXN0L1RyeS5qYXZhIiwKKwkJCSJwYWNrYWdlIHRlc3Q7XG4iICsK
KwkJCSJwdWJsaWMgY2xhc3MgVHJ5IGV4dGVuZHMgVGhyZWFke1xuIiArCisJCQkiT2JqZWN0IGZp
ZWxkO1xuIiArCisJCQkic3RhdGljIHZvaWQgZm9vKCkge1xuIiArCS8vIGZpZWxkIHNob3VsZCBu
b3QgYmUgdmlzaWJsZSBoZXJlCisJCQkiCWludCBpbnQxID0gMTtcbiIgKworCQkJIglpbnQgaW50
MiA9IDI7XG4iICsKKwkJCSIJT2JqZWN0IG8xID0gbmV3IE9iamVjdCgpO1xuIiArCisJCQkiICAg
bzEuIiArCisJCQkifVxuIiArCisJCQkifVxuIik7CisKKwlDb21wbGV0aW9uVGVzdHNSZXF1ZXN0
b3IyIHJlcXVlc3RvciA9IG5ldyBDb21wbGV0aW9uVGVzdHNSZXF1ZXN0b3IyKHRydWUpOworCXJl
cXVlc3Rvci5zZXRSZXF1aXJlRXh0ZW5kZWRDb250ZXh0KHRydWUpOworCXJlcXVlc3Rvci5hbGxv
d0FsbFJlcXVpcmVkUHJvcG9zYWxzKCk7CisJcmVxdWVzdG9yLnNldENvbXB1dGVWaXNpYmxlRWxl
bWVudHModHJ1ZSk7CisJU3RyaW5nIHN0ciA9IHRoaXMud29ya2luZ0NvcGllc1swXS5nZXRTb3Vy
Y2UoKTsKKwlTdHJpbmcgY29tcGxldGVCZWhpbmQgPSAibzEuIjsKKwlpbnQgY3Vyc29yTG9jYXRp
b24gPSBzdHIubGFzdEluZGV4T2YoY29tcGxldGVCZWhpbmQpICsgY29tcGxldGVCZWhpbmQubGVu
Z3RoKCk7CisJdGhpcy53b3JraW5nQ29waWVzWzBdLmNvZGVDb21wbGV0ZShjdXJzb3JMb2NhdGlv
biwgcmVxdWVzdG9yLCB0aGlzLndjT3duZXIpOworCWFzc2VydFJlc3VsdHMoCisJCQkiPENvbXBs
ZXRlT25OYW1lOm8xLj4iLAorCQkJcmVxdWVzdG9yLmdldENvbXBsZXRpb25Ob2RlKCkpOworCWFz
c2VydE51bGwoCisJCQkic2hvdWxkIGJlIG51bGwiLAorCQkJcmVxdWVzdG9yLmdldENvbXBsZXRp
b25Ob2RlUGFyZW50KCkpOworCWFzc2VydFJlc3VsdHMoCisJCQkiaW50IGludDFbcG9zOiB1bnVz
ZWRdW2lkOjBdXG4iICsKKwkJCSJpbnQgaW50Mltwb3M6IHVudXNlZF1baWQ6MV1cbiIgKworCQkJ
ImphdmEubGFuZy5PYmplY3QgbzFbcG9zOiB1bnVzZWRdW2lkOjJdXG4iLAorCQkJcmVxdWVzdG9y
LmdldFZpc2libGVMb2NhbFZhcmlhYmxlcygpKTsKKwlhc3NlcnRSZXN1bHRzKAorCQkJIiIsCisJ
CQlyZXF1ZXN0b3IuZ2V0VmlzaWJsZUZpZWxkcygpKTsKKwlhc3NlcnRSZXN1bHRzKAorCQkJInN0
YXRpYyB2b2lkIGZvbygpIFxuIiwJCQkKKwkJCXJlcXVlc3Rvci5nZXRWaXNpYmxlTWV0aG9kcygp
KTsKK30KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3Ny
Yy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9tb2RlbC9Db21wbGV0aW9uVGVzdHNSZXF1ZXN0
b3IyLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlw
c2UvamR0L2NvcmUvdGVzdHMvbW9kZWwvQ29tcGxldGlvblRlc3RzUmVxdWVzdG9yMi5qYXZhCmlu
ZGV4IGMzMTAyYzQuLjM4ZTczNzQgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRl
c3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9tb2RlbC9Db21wbGV0aW9u
VGVzdHNSZXF1ZXN0b3IyLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9k
ZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21vZGVsL0NvbXBsZXRpb25UZXN0c1Jl
cXVlc3RvcjIuamF2YQpAQCAtMjAsNiArMjAsOSBAQAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5j
b3JlLklKYXZhRWxlbWVudDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5TaWduYXR1cmU7
CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuSVByb2JsZW07CitpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvZGVhc3Npc3QuSW50ZXJuYWxDb21wbGV0aW9uQ29u
dGV4dDsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkFTVE5v
ZGU7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLnV0aWwuT2JqZWN0
VmVjdG9yOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLkphdmFFbGVtZW50
OwogCiBwdWJsaWMgY2xhc3MgQ29tcGxldGlvblRlc3RzUmVxdWVzdG9yMiBleHRlbmRzIENvbXBs
ZXRpb25SZXF1ZXN0b3IgewpAQCAtNjA1LDQgKzYwOCw1NCBAQAogCQl9CiAJCXJldHVybiBmYWxz
ZTsKIAl9CisJCisJcHVibGljIFN0cmluZyBnZXRDb21wbGV0aW9uTm9kZSgpIHsKKwkJaWYgKHRo
aXMuY29udGV4dCBpbnN0YW5jZW9mIEludGVybmFsQ29tcGxldGlvbkNvbnRleHQpIHsKKwkJCUlu
dGVybmFsQ29tcGxldGlvbkNvbnRleHQgaW50ZXJuYWxDb21wbGV0aW9uQ29udGV4dCA9IChJbnRl
cm5hbENvbXBsZXRpb25Db250ZXh0KSB0aGlzLmNvbnRleHQ7CisJCQlBU1ROb2RlIGFzdE5vZGUg
PSBpbnRlcm5hbENvbXBsZXRpb25Db250ZXh0LmdldENvbXBsZXRpb25Ob2RlKCk7CisJCQlpZiAo
YXN0Tm9kZSAhPSBudWxsKSByZXR1cm4gYXN0Tm9kZS50b1N0cmluZygpOworCQkJCisJCX0KKwkJ
cmV0dXJuIG51bGw7CisJfQorCQorCXB1YmxpYyBTdHJpbmcgZ2V0Q29tcGxldGlvbk5vZGVQYXJl
bnQoKSB7CisJCWlmICh0aGlzLmNvbnRleHQgaW5zdGFuY2VvZiBJbnRlcm5hbENvbXBsZXRpb25D
b250ZXh0KSB7CisJCQlJbnRlcm5hbENvbXBsZXRpb25Db250ZXh0IGludGVybmFsQ29tcGxldGlv
bkNvbnRleHQgPSAoSW50ZXJuYWxDb21wbGV0aW9uQ29udGV4dCkgdGhpcy5jb250ZXh0OworCQkJ
QVNUTm9kZSBhc3ROb2RlID0gaW50ZXJuYWxDb21wbGV0aW9uQ29udGV4dC5nZXRDb21wbGV0aW9u
Tm9kZVBhcmVudCgpOworCQkJaWYgKGFzdE5vZGUgIT0gbnVsbCkgcmV0dXJuIGFzdE5vZGUudG9T
dHJpbmcoKTsKKwkJCQorCQl9CisJCXJldHVybiBudWxsOworCX0KKwkKKwlwdWJsaWMgU3RyaW5n
IGdldFZpc2libGVMb2NhbFZhcmlhYmxlcygpIHsKKwkJaWYgKHRoaXMuY29udGV4dCBpbnN0YW5j
ZW9mIEludGVybmFsQ29tcGxldGlvbkNvbnRleHQpIHsKKwkJCUludGVybmFsQ29tcGxldGlvbkNv
bnRleHQgaW50ZXJuYWxDb21wbGV0aW9uQ29udGV4dCA9IChJbnRlcm5hbENvbXBsZXRpb25Db250
ZXh0KSB0aGlzLmNvbnRleHQ7CisJCQlPYmplY3RWZWN0b3IgbG9jYWxzID0gaW50ZXJuYWxDb21w
bGV0aW9uQ29udGV4dC5nZXRWaXNpYmxlTG9jYWxWYXJpYWJsZXMoKTsKKwkJCWlmIChsb2NhbHMg
IT0gbnVsbCkgcmV0dXJuIGxvY2Fscy50b1N0cmluZygpOworCQkJCisJCX0KKwkJcmV0dXJuIG51
bGw7CisJfQorCQorCXB1YmxpYyBTdHJpbmcgZ2V0VmlzaWJsZUZpZWxkcygpIHsKKwkJaWYgKHRo
aXMuY29udGV4dCBpbnN0YW5jZW9mIEludGVybmFsQ29tcGxldGlvbkNvbnRleHQpIHsKKwkJCUlu
dGVybmFsQ29tcGxldGlvbkNvbnRleHQgaW50ZXJuYWxDb21wbGV0aW9uQ29udGV4dCA9IChJbnRl
cm5hbENvbXBsZXRpb25Db250ZXh0KSB0aGlzLmNvbnRleHQ7CisJCQlPYmplY3RWZWN0b3IgZmll
bGRzID0gaW50ZXJuYWxDb21wbGV0aW9uQ29udGV4dC5nZXRWaXNpYmxlRmllbGRzKCk7CisJCQlp
ZiAoZmllbGRzICE9IG51bGwpIHJldHVybiBmaWVsZHMudG9TdHJpbmcoKTsKKwkJCQorCQl9CisJ
CXJldHVybiBudWxsOworCX0KKwkKKwlwdWJsaWMgU3RyaW5nIGdldFZpc2libGVNZXRob2RzKCkg
eworCQlpZiAodGhpcy5jb250ZXh0IGluc3RhbmNlb2YgSW50ZXJuYWxDb21wbGV0aW9uQ29udGV4
dCkgeworCQkJSW50ZXJuYWxDb21wbGV0aW9uQ29udGV4dCBpbnRlcm5hbENvbXBsZXRpb25Db250
ZXh0ID0gKEludGVybmFsQ29tcGxldGlvbkNvbnRleHQpIHRoaXMuY29udGV4dDsKKwkJCU9iamVj
dFZlY3RvciBtZXRob2RzID0gaW50ZXJuYWxDb21wbGV0aW9uQ29udGV4dC5nZXRWaXNpYmxlTWV0
aG9kcygpOworCQkJaWYgKG1ldGhvZHMgIT0gbnVsbCkgcmV0dXJuIG1ldGhvZHMudG9TdHJpbmco
KTsKKwkJCQorCQl9CisJCXJldHVybiBudWxsOworCX0KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvZGVhc3Npc3Qvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvZGVhc3Np
c3QvQ29tcGxldGlvbkVuZ2luZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29kZWFzc2lz
dC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29kZWFzc2lzdC9Db21wbGV0aW9uRW5naW5lLmph
dmEKaW5kZXggOGI3YzU2NS4uOTg5YzExYyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29kZWFzc2lzdC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29kZWFzc2lzdC9Db21wbGV0
aW9uRW5naW5lLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29kZWFzc2lzdC9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29kZWFzc2lzdC9Db21wbGV0aW9uRW5naW5lLmphdmEKQEAg
LTE1MDIsNiArMTUwMiw3IEBACiAJCQkJCXRoaXMubG9va3VwRW52aXJvbm1lbnQsCiAJCQkJCXNj
b3BlLAogCQkJCQlhc3ROb2RlLAorCQkJCQlhc3ROb2RlUGFyZW50LAogCQkJCQl0aGlzLm93bmVy
LAogCQkJCQl0aGlzLnBhcnNlcik7CiAJCX0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvZGVhc3Npc3Qvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvZGVhc3Npc3QvSW50ZXJu
YWxDb21wbGV0aW9uQ29udGV4dC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29kZWFzc2lz
dC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29kZWFzc2lzdC9JbnRlcm5hbENvbXBsZXRpb25D
b250ZXh0LmphdmEKaW5kZXggYmEzM2VhMS4uYmJhOGQ3OCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29kZWFzc2lzdC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29kZWFzc2lz
dC9JbnRlcm5hbENvbXBsZXRpb25Db250ZXh0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29kZWFzc2lzdC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29kZWFzc2lzdC9JbnRlcm5h
bENvbXBsZXRpb25Db250ZXh0LmphdmEKQEAgLTEsNSArMSw1IEBACiAvKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDA1LCAyMDA4IElCTSBDb3Jwb3JhdGlvbiBhbmQg
b3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDA1LCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQg
b3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNj
b21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJt
cyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmll
cyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdApAQCAtMjQsOCArMjQsMTIg
QEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29kZWFzc2lzdC5jb21wbGV0ZS5D
b21wbGV0aW9uUGFyc2VyOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxl
ci5hc3QuQVNUTm9kZTsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
YXN0LkNvbXBpbGF0aW9uVW5pdERlY2xhcmF0aW9uOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5p
bnRlcm5hbC5jb21waWxlci5sb29rdXAuRmllbGRCaW5kaW5nOworaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuTG9jYWxWYXJpYWJsZUJpbmRpbmc7CiBpbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5Mb29rdXBFbnZpcm9u
bWVudDsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLk1l
dGhvZEJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxv
b2t1cC5TY29wZTsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIudXRp
bC5PYmplY3RWZWN0b3I7CiAKIAogLyoqCkBAIC02NSw2ICs2OSw3IEBACiAJCQlMb29rdXBFbnZp
cm9ubWVudCBsb29rdXBFbnZpcm9ubWVudCwKIAkJCVNjb3BlIHNjb3BlLAogCQkJQVNUTm9kZSBh
c3ROb2RlLAorCQkJQVNUTm9kZSBhc3ROb2RlUGFyZW50LAogCQkJV29ya2luZ0NvcHlPd25lciBv
d25lciwKIAkJCUNvbXBsZXRpb25QYXJzZXIgcGFyc2VyKSB7CiAJCXRoaXMuaXNFeHRlbmRlZCA9
IHRydWU7CkBAIC03Niw2ICs4MSw3IEBACiAJCQkJCWxvb2t1cEVudmlyb25tZW50LAogCQkJCQlz
Y29wZSwKIAkJCQkJYXN0Tm9kZSwKKwkJCQkJYXN0Tm9kZVBhcmVudCwKIAkJCQkJb3duZXIsCiAJ
CQkJCXBhcnNlcik7CiAJfQpAQCAtMzY4LDQgKzM3NCw4NyBAQAogCXB1YmxpYyBib29sZWFuIGlz
SW5KYXZhZG9jVGV4dCgpIHsKIAkJcmV0dXJuICh0aGlzLmphdmFkb2MgJiBDb21wbGV0aW9uT25K
YXZhZG9jLlRFWFQpICE9IDA7CiAJfQorCQorCS8qKgorCSAqIFJldHVybiB0aGUgY29tcGxldGlv
biBub2RlIGFzc29jaWF0ZWQgd2l0aCB0aGUgY3VycmVudCBjb21wbGV0aW9uLgorCSAqCisJICog
QHJldHVybiBjb21wbGV0aW9uIEFTVCBub2RlLCBvciBudWxsIGlmIHRoZSBleHRlbmRlZENvbnRl
eHQgaXMgbnVsbC4KKwkgKiBAZXhjZXB0aW9uIFVuc3VwcG9ydGVkT3BlcmF0aW9uRXhjZXB0aW9u
IGlmIHRoZSBjb250ZXh0IGlzIG5vdCBhbiBleHRlbmRlZCBjb250ZXh0CisJICoKKwkgKiBAc2Vl
ICNpc0V4dGVuZGVkKCkKKwkgKi8KKwlwdWJsaWMgQVNUTm9kZSBnZXRDb21wbGV0aW9uTm9kZSgp
IHsKKwkJaWYgKCF0aGlzLmlzRXh0ZW5kZWQpIHRocm93IG5ldyBVbnN1cHBvcnRlZE9wZXJhdGlv
bkV4Y2VwdGlvbigiT3BlcmF0aW9uIG9ubHkgc3VwcG9ydGVkIGluIGV4dGVuZGVkIGNvbnRleHQi
KTsgLy8kTk9OLU5MUy0xJAorCQorCQlpZiAodGhpcy5leHRlbmRlZENvbnRleHQgPT0gbnVsbCkg
cmV0dXJuIG51bGw7CisJCisJCXJldHVybiB0aGlzLmV4dGVuZGVkQ29udGV4dC5nZXRDb21wbGV0
aW9uTm9kZSgpOworCX0KKwkKKwkvKioKKwkgKiBSZXR1cm4gdGhlIHBhcmVudCBBU1Qgbm9kZSBv
ZiB0aGUgY29tcGxldGlvbiBub2RlIGFzc29jaWF0ZWQgd2l0aCB0aGUgY3VycmVudCBjb21wbGV0
aW9uLgorCSAqCisJICogQHJldHVybiBjb21wbGV0aW9uIHBhcmVudCBBU1Qgbm9kZSwgb3IgbnVs
bCBpZiB0aGUgZXh0ZW5kZWRDb250ZXh0IGlzIG51bGwuCisJICogQGV4Y2VwdGlvbiBVbnN1cHBv
cnRlZE9wZXJhdGlvbkV4Y2VwdGlvbiBpZiB0aGUgY29udGV4dCBpcyBub3QgYW4gZXh0ZW5kZWQg
Y29udGV4dAorCSAqCisJICogQHNlZSAjaXNFeHRlbmRlZCgpCisJICovCisJcHVibGljIEFTVE5v
ZGUgZ2V0Q29tcGxldGlvbk5vZGVQYXJlbnQoKSB7CisJCWlmICghdGhpcy5pc0V4dGVuZGVkKSB0
aHJvdyBuZXcgVW5zdXBwb3J0ZWRPcGVyYXRpb25FeGNlcHRpb24oIk9wZXJhdGlvbiBvbmx5IHN1
cHBvcnRlZCBpbiBleHRlbmRlZCBjb250ZXh0Iik7IC8vJE5PTi1OTFMtMSQKKwkKKwkJaWYgKHRo
aXMuZXh0ZW5kZWRDb250ZXh0ID09IG51bGwpIHJldHVybiBudWxsOworCQorCQlyZXR1cm4gdGhp
cy5leHRlbmRlZENvbnRleHQuZ2V0Q29tcGxldGlvbk5vZGVQYXJlbnQoKTsKKwl9CisJCisJLyoq
CisJICogUmV0dXJuIHRoZSBiaW5kaW5ncyBvZiBhbGwgdmlzaWJsZSBsb2NhbCB2YXJpYWJsZXMg
aW4gdGhlIGN1cnJlbnQgY29tcGxldGlvbiBjb250ZXh0LgorCSAqCisJICogQHJldHVybiBiaW5k
aW5ncyBvZiBhbGwgdmlzaWJsZSBsb2NhbCB2YXJpYWJsZXMsIG9yIG51bGwgaWYgdGhlIGV4dGVu
ZGVkQ29udGV4dCBpcyBudWxsLiBSZXR1cm5lZCBiaW5kaW5ncyBhcmUgaW5zdGFuY2VzIG9mCisJ
ICoge0BsaW5rIExvY2FsVmFyaWFibGVCaW5kaW5nfQorCSAqIEBleGNlcHRpb24gVW5zdXBwb3J0
ZWRPcGVyYXRpb25FeGNlcHRpb24gaWYgdGhlIGNvbnRleHQgaXMgbm90IGFuIGV4dGVuZGVkIGNv
bnRleHQKKwkgKgorCSAqIEBzZWUgI2lzRXh0ZW5kZWQoKQorCSAqLworCXB1YmxpYyBPYmplY3RW
ZWN0b3IgZ2V0VmlzaWJsZUxvY2FsVmFyaWFibGVzKCkgeworCQlpZiAoIXRoaXMuaXNFeHRlbmRl
ZCkgdGhyb3cgbmV3IFVuc3VwcG9ydGVkT3BlcmF0aW9uRXhjZXB0aW9uKCJPcGVyYXRpb24gb25s
eSBzdXBwb3J0ZWQgaW4gZXh0ZW5kZWQgY29udGV4dCIpOyAvLyROT04tTkxTLTEkCisJCisJCWlm
ICh0aGlzLmV4dGVuZGVkQ29udGV4dCA9PSBudWxsKSByZXR1cm4gbnVsbDsKKwkKKwkJcmV0dXJu
IHRoaXMuZXh0ZW5kZWRDb250ZXh0LmdldFZpc2libGVMb2NhbFZhcmlhYmxlcygpOworCX0KKwkK
KwkvKioKKwkgKiBSZXR1cm4gdGhlIGJpbmRpbmdzIG9mIGFsbCB2aXNpYmxlIGZpZWxkcyBpbiB0
aGUgY3VycmVudCBjb21wbGV0aW9uIGNvbnRleHQuCisJICoKKwkgKiBAcmV0dXJuIGJpbmRpbmdz
IG9mIGFsbCB2aXNpYmxlIGZpZWxkcywgb3IgbnVsbCBpZiB0aGUgZXh0ZW5kZWRDb250ZXh0IGlz
IG51bGwuIFJldHVybmVkIGJpbmRpbmdzIGFyZSBpbnN0YW5jZXMgb2YKKwkgKiB7QGxpbmsgRmll
bGRCaW5kaW5nfQorCSAqIEBleGNlcHRpb24gVW5zdXBwb3J0ZWRPcGVyYXRpb25FeGNlcHRpb24g
aWYgdGhlIGNvbnRleHQgaXMgbm90IGFuIGV4dGVuZGVkIGNvbnRleHQKKwkgKgorCSAqIEBzZWUg
I2lzRXh0ZW5kZWQoKQorCSAqLworCXB1YmxpYyBPYmplY3RWZWN0b3IgZ2V0VmlzaWJsZUZpZWxk
cygpIHsKKwkJaWYgKCF0aGlzLmlzRXh0ZW5kZWQpIHRocm93IG5ldyBVbnN1cHBvcnRlZE9wZXJh
dGlvbkV4Y2VwdGlvbigiT3BlcmF0aW9uIG9ubHkgc3VwcG9ydGVkIGluIGV4dGVuZGVkIGNvbnRl
eHQiKTsgLy8kTk9OLU5MUy0xJAorCQorCQlpZiAodGhpcy5leHRlbmRlZENvbnRleHQgPT0gbnVs
bCkgcmV0dXJuIG51bGw7CisJCisJCXJldHVybiB0aGlzLmV4dGVuZGVkQ29udGV4dC5nZXRWaXNp
YmxlRmllbGRzKCk7CisJfQorCQorCS8qKgorCSAqIFJldHVybiB0aGUgYmluZGluZ3Mgb2YgYWxs
IHZpc2libGUgbWV0aG9kcyBpbiB0aGUgY3VycmVudCBjb21wbGV0aW9uIGNvbnRleHQuCisJICoK
KwkgKiBAcmV0dXJuIGJpbmRpbmdzIG9mIGFsbCB2aXNpYmxlIG1ldGhvZHMsIG9yIG51bGwgaWYg
dGhlIGV4dGVuZGVkQ29udGV4dCBpcyBudWxsLiBSZXR1cm5lZCBiaW5kaW5ncyBhcmUgaW5zdGFu
Y2VzIG9mCisJICoge0BsaW5rIE1ldGhvZEJpbmRpbmd9CisJICogQGV4Y2VwdGlvbiBVbnN1cHBv
cnRlZE9wZXJhdGlvbkV4Y2VwdGlvbiBpZiB0aGUgY29udGV4dCBpcyBub3QgYW4gZXh0ZW5kZWQg
Y29udGV4dAorCSAqCisJICogQHNlZSAjaXNFeHRlbmRlZCgpCisJICovCisJcHVibGljIE9iamVj
dFZlY3RvciBnZXRWaXNpYmxlTWV0aG9kcygpIHsKKwkJaWYgKCF0aGlzLmlzRXh0ZW5kZWQpIHRo
cm93IG5ldyBVbnN1cHBvcnRlZE9wZXJhdGlvbkV4Y2VwdGlvbigiT3BlcmF0aW9uIG9ubHkgc3Vw
cG9ydGVkIGluIGV4dGVuZGVkIGNvbnRleHQiKTsgLy8kTk9OLU5MUy0xJAorCQorCQlpZiAodGhp
cy5leHRlbmRlZENvbnRleHQgPT0gbnVsbCkgcmV0dXJuIG51bGw7CisJCisJCXJldHVybiB0aGlz
LmV4dGVuZGVkQ29udGV4dC5nZXRWaXNpYmxlTWV0aG9kcygpOworCX0KIH0KZGlmZiAtLWdpdCBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvZGVhc3Npc3Qvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvZGVhc3Npc3QvSW50ZXJuYWxFeHRlbmRlZENvbXBsZXRpb25Db250ZXh0LmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb2RlYXNzaXN0L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb2Rl
YXNzaXN0L0ludGVybmFsRXh0ZW5kZWRDb21wbGV0aW9uQ29udGV4dC5qYXZhCmluZGV4IDE1Mjk3
N2EuLjE5ZjI1NDYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvZGVhc3Npc3Qv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvZGVhc3Npc3QvSW50ZXJuYWxFeHRlbmRlZENvbXBs
ZXRpb25Db250ZXh0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29kZWFzc2lzdC9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29kZWFzc2lzdC9JbnRlcm5hbEV4dGVuZGVkQ29tcGxl
dGlvbkNvbnRleHQuamF2YQpAQCAtNzYsNiArNzYsNyBAQAogCXByaXZhdGUgTG9va3VwRW52aXJv
bm1lbnQgbG9va3VwRW52aXJvbm1lbnQ7CiAJcHJpdmF0ZSBTY29wZSBhc3Npc3RTY29wZTsKIAlw
cml2YXRlIEFTVE5vZGUgYXNzaXN0Tm9kZTsKKwlwcml2YXRlIEFTVE5vZGUgYXNzaXN0Tm9kZVBh
cmVudDsKIAlwcml2YXRlIFdvcmtpbmdDb3B5T3duZXIgb3duZXI7CiAKIAlwcml2YXRlIENvbXBs
ZXRpb25QYXJzZXIgcGFyc2VyOwpAQCAtOTgsNiArOTksNyBAQAogCQkJTG9va3VwRW52aXJvbm1l
bnQgbG9va3VwRW52aXJvbm1lbnQsCiAJCQlTY29wZSBhc3Npc3RTY29wZSwKIAkJCUFTVE5vZGUg
YXNzaXN0Tm9kZSwKKwkJCUFTVE5vZGUgYXNzaXN0Tm9kZVBhcmVudCwKIAkJCVdvcmtpbmdDb3B5
T3duZXIgb3duZXIsCiAJCQlDb21wbGV0aW9uUGFyc2VyIHBhcnNlcikgewogCQl0aGlzLmNvbXBs
ZXRpb25Db250ZXh0ID0gY29tcGxldGlvbkNvbnRleHQ7CkBAIC0xMDYsNiArMTA4LDcgQEAKIAkJ
dGhpcy5sb29rdXBFbnZpcm9ubWVudCA9IGxvb2t1cEVudmlyb25tZW50OwogCQl0aGlzLmFzc2lz
dFNjb3BlID0gYXNzaXN0U2NvcGU7CiAJCXRoaXMuYXNzaXN0Tm9kZSA9IGFzc2lzdE5vZGU7CisJ
CXRoaXMuYXNzaXN0Tm9kZVBhcmVudCA9IGFzc2lzdE5vZGVQYXJlbnQ7CiAJCXRoaXMub3duZXIg
PSBvd25lcjsKIAkJdGhpcy5wYXJzZXIgPSBwYXJzZXI7CiAJfQpAQCAtOTI5LDQgKzkzMiw0MCBA
QAogCQl9CiAJCXJldHVybiBmYWxzZTsKIAl9CisJCisJLyoqCisJICogQHNlZSBJbnRlcm5hbENv
bXBsZXRpb25Db250ZXh0I2dldENvbXBsZXRpb25Ob2RlKCkKKwkgKi8KKwlwdWJsaWMgQVNUTm9k
ZSBnZXRDb21wbGV0aW9uTm9kZSgpIHsKKwkJcmV0dXJuIHRoaXMuYXNzaXN0Tm9kZTsKKwl9CisJ
CisJLyoqCisJICogQHNlZSBJbnRlcm5hbENvbXBsZXRpb25Db250ZXh0I2dldENvbXBsZXRpb25O
b2RlUGFyZW50KCkKKwkgKi8KKwlwdWJsaWMgQVNUTm9kZSBnZXRDb21wbGV0aW9uTm9kZVBhcmVu
dCgpIHsKKwkJLy8gVE9ETyBBdXRvLWdlbmVyYXRlZCBtZXRob2Qgc3R1YgorCQlyZXR1cm4gdGhp
cy5hc3Npc3ROb2RlUGFyZW50OworCX0KKwkKKwlwdWJsaWMgT2JqZWN0VmVjdG9yIGdldFZpc2li
bGVMb2NhbFZhcmlhYmxlcygpIHsKKwkJaWYgKCF0aGlzLmhhc0NvbXB1dGVkVmlzaWJsZUVsZW1l
bnRCaW5kaW5ncykgeworCQkJY29tcHV0ZVZpc2libGVFbGVtZW50QmluZGluZ3MoKTsKKwkJfQor
CQlyZXR1cm4gdGhpcy52aXNpYmxlTG9jYWxWYXJpYWJsZXM7CisJfQorCQorCXB1YmxpYyBPYmpl
Y3RWZWN0b3IgZ2V0VmlzaWJsZUZpZWxkcygpIHsKKwkJaWYgKCF0aGlzLmhhc0NvbXB1dGVkVmlz
aWJsZUVsZW1lbnRCaW5kaW5ncykgeworCQkJY29tcHV0ZVZpc2libGVFbGVtZW50QmluZGluZ3Mo
KTsKKwkJfQorCQlyZXR1cm4gdGhpcy52aXNpYmxlRmllbGRzOworCX0KKwkKKwlwdWJsaWMgT2Jq
ZWN0VmVjdG9yIGdldFZpc2libGVNZXRob2RzKCkgeworCQlpZiAoIXRoaXMuaGFzQ29tcHV0ZWRW
aXNpYmxlRWxlbWVudEJpbmRpbmdzKSB7CisJCQljb21wdXRlVmlzaWJsZUVsZW1lbnRCaW5kaW5n
cygpOworCQl9CisJCXJldHVybiB0aGlzLnZpc2libGVNZXRob2RzOworCX0KIH0=
</data>

          </attachment>
      

    </bug>

</bugzilla>