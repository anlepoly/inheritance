<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>388954</bug_id>
          
          <creation_ts>2012-09-06 10:46:00 -0400</creation_ts>
          <short_desc>[1.8][compiler] detect default methods in class files</short_desc>
          <delta_ts>2012-09-25 18:52:17 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>380501</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Stephan Herrmann">stephan.herrmann</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2156898</commentid>
    <comment_count>0</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-09-06 10:46:02 -0400</bug_when>
    <thetext>Default methods have no specific modifier in the class file format, yet the compiler needs to know when a method is a default method.

I&apos;m not 100% sure how compilation for 1.7- should handle any default methods it finds. 
At those levels the compiler doesn&apos;t expect any non-abstract methods in interfaces. 
So maybe we should add the AccAbstract flag for default methods in 1.7-, but I wouldn&apos;t know, where this is specified.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2162173</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-09-20 05:16:51 -0400</bug_when>
    <thetext>(In reply to comment #0)
&gt; Default methods have no specific modifier in the class file format, yet the
&gt; compiler needs to know when a method is a default method.

This may change, as the current thinking in the EG is to treat default
as a modifier and allow it syntactically in the same place as modifiers.
I don&apos;t have any information as to how it would be persisted though.

&gt; 
&gt; I&apos;m not 100% sure how compilation for 1.7- should handle any default methods
&gt; it finds. 
&gt; At those levels the compiler doesn&apos;t expect any non-abstract methods in
&gt; interfaces. 
&gt; So maybe we should add the AccAbstract flag for default methods in 1.7-, but
&gt; I wouldn&apos;t know, where this is specified.

Since your investigation of how javac behaves indicates that javac is 
automatically adding the AccAbstract flag, I would say this is the right
course of action for us also.

On a similar note, when it came to generics we used to discard generic
signature information from 1.5 binaries if the source level is 1.4, but
that led to a slew of bugs: See (among others)

https://bugs.eclipse.org/bugs/show_bug.cgi?id=324850
https://bugs.eclipse.org/bugs/show_bug.cgi?id=330537
https://bugs.eclipse.org/bugs/show_bug.cgi?id=329593
https://bugs.eclipse.org/bugs/show_bug.cgi?id=329589
https://bugs.eclipse.org/bugs/show_bug.cgi?id=329588
https://bugs.eclipse.org/bugs/show_bug.cgi?id=329584
https://bugs.eclipse.org/bugs/show_bug.cgi?id=186565

So if we force inject the AccAbstract flag on all interface
methods while compiling for 1.7-, do all problems go away ? 
In particular, does https://bugs.eclipse.org/bugs/show_bug.cgi?id=388800
require any further work at all ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2164506</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-09-25 18:52:17 -0400</bug_when>
    <thetext>Resolved via commit dd3bff4d99a5193497eb7e3c0e1bc46a32b7c36a
- in 1.7- modes all interface methods are now considered as abstract
- additionally, when overriding a default method AccImplementing is now used, so that reporting for these cases is covered by OPTION_ReportMissingOverrideAnnotationForInterfaceMethodImplementation.

With this implementation, the change from bug 388800 comment 1 (commit 4da3045d875134bb37de1ca00076288feb78d111) had to be reverted and I started walking in the opposite direction instead. As a result this patch contains the major leg work for bug 388800, too, do be documented there.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>