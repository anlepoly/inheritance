<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>391376</bug_id>
          
          <creation_ts>2012-10-08 17:50:00 -0400</creation_ts>
          <short_desc>[1.8] check interaction of default methods with bridge methods and generics</short_desc>
          <delta_ts>2013-11-19 08:59:02 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>All</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>383966</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Stephan Herrmann">stephan.herrmann</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2169185</commentid>
    <comment_count>0</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-10-08 17:50:12 -0400</bug_when>
    <thetext>The failure reported in bug 382347 comment 6 showed that the method verifier made some assumptions regarding interface methods which no longer hold when default methods enter the picture.

The immediate problem could be fixed via bug 390761 by cleanly filtering the bogus error messages, thus leaving the delicate parts of the logic unchanged, viz. code that handled corner cases involving generics and/or bridge methods.

We should still check whether this logic produces the desired behavior if default methods meet those situations with generics/bridge methods. During analysis I found these bugs to be relevant:
- bug 302358
- bug 194034</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2217645</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-02-16 04:52:12 -0500</bug_when>
    <thetext>Also bug 400710 touches an interaction between default methods and bridge methods as super access to a public method from a non-public super.
To be double checked here.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2238018</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-03-29 11:44:37 -0400</bug_when>
    <thetext>Combining default methods with issues raised in bug 194034 mandates the following change:

MethodVerifier15.isInterfaceMethodImplemented() reports false if return types differ, in order to prepare bridge methods. However, if the existing method is inherited from a super class S, then the bridge method should already be taken care of in S. This becomes relevant if the other method (&apos;inheritedMethod&apos;) is a default method, which finds its way deeper into analysis than regular interface methods do. 
Without this fix InterfaceMethodsTest.testBridge01() f. exhibited these bugs:
- testBridge01() reported duplicate methods against two inherited methods, which in the super class where already detected to be without conflict.
- testBridge02() had a bogus bridge method delegating to a default method, which was actually overridden in a super class.

With this fix in place I could then cleanup method MethodVerifier15.checkInheritedMethods(MethodBinding[],int,boolean[]) so that it looks even more like the spec:
- for &quot;playingTrump&quot; only consider abstract super class methods
- introduce as an invariant: playingTrump =&gt; (concreteMethod == null)
This helps to make error reporting more deterministic, because the trump situation no longer depends on any ordering of methods.

This part pushed to BETA_JAVA8 via commit ba04cb6ba4b5497c184d335aa777690304f7e67a.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2238161</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-03-31 10:05:03 -0400</bug_when>
    <thetext>(In reply to comment #1)
&gt; Also bug 400710 touches an interaction between default methods and bridge
&gt; methods as super access to a public method from a non-public super.
&gt; To be double checked here.

Yep, that fix was not complete. With the introduction of default methods we must be prepared to insert synthetic methods (SuperMethodAccess) into interfaces, too.
With this, finding the correct target type to be invoked by the synthetic method is a bit trickier (see new CodeStream.findDirectSuperTypeTowards()).

Test &amp; fix pushed to BETA_JAVA8 via commit b9fe1585cf31ec434ca228546eadf3af49447ab0

NB, that javac b81 has the same bug so I had to insert a new excuse as
org.eclipse.jdt.core.tests.compiler.regression.AbstractRegressionTest.JavacTestOptions.JavacHasABug.Javac8ProducesIllegalAccessError

I also reported this to lambda-dev@openjdk.java.net (pending moderation).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2238170</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-03-31 11:31:04 -0400</bug_when>
    <thetext>(In reply to comment #0)
&gt; We should still check whether this logic produces the desired behavior if
&gt; default methods meet those situations with generics/bridge methods. During
&gt; analysis I found these bugs to be relevant:
&gt; - bug 302358

Wow, modifying AmbiguousMethodTest.test081() from bug 302358 to use default methods gives some interesting outcomes:

(1) One variant with no further changes than turning regular methods into default methods (and classes into interfaces and &quot;extends&quot; into &quot;implements&quot;) reproduces the original bug from bug 302358.

(2) ecj happily accepts several variants, which are all rejected by javac, saying:

C.java:15: error: name clash: set(Object) in A and set(ValueType) in I have the same erasure, yet neither overrides the other
class B implements A&lt;E, CharSequence&gt; {
^
  where ValueType is a type-variable:
    ValueType extends Object declared in interface I
C.java:17: error: name clash: set(CharSequence) in B overrides a method whose erasure is the same as another method, yet neither overrides the other
    public void set(CharSequence string) {
                ^
  first method:  set(Object) in A
  second method: set(ValueType) in I
  where ValueType is a type-variable:
    ValueType extends Object declared in interface I

If (2) is not a bug in javac but an intended change in the language then (1) is a red herring.

Trying to better understand the situation, I ran AmbiguousMethodTest with -Drun.java=true etc. and observed 11 regressions.
I created bug 404648 for investigation.

From my current understanding, these deviations indicate that nothing needs to be fixed specifically for default methods.
For future use I added two disabled tests: InterfaceMethodTest._testBridge03/04(), to be enabled via bug 404648.
Tests pushed to BETA_JAVA8 via commit 826aaa7d3dacd4ddad5f556a3ebb7318859595b5

This concludes my current investigations in this bug.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2238423</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-04-01 19:52:17 -0400</bug_when>
    <thetext>(In reply to comment #3)
&gt; (In reply to comment #1)
&gt; &gt; Also bug 400710 touches an interaction between default methods and bridge
&gt; &gt; methods as super access to a public method from a non-public super.
&gt; &gt; To be double checked here.
&gt; 
&gt; Yep, that fix was not complete. With the introduction of default methods we
&gt; must be prepared to insert synthetic methods (SuperMethodAccess) into
&gt; interfaces, too.
&gt; With this, finding the correct target type to be invoked by the synthetic
&gt; method is a bit trickier (see new CodeStream.findDirectSuperTypeTowards()).
&gt; 
&gt; Test &amp; fix pushed to BETA_JAVA8 via commit
&gt; b9fe1585cf31ec434ca228546eadf3af49447ab0
&gt; 
&gt; NB, that javac b81 has the same bug so I had to insert a new excuse as
&gt; org.eclipse.jdt.core.tests.compiler.regression.AbstractRegressionTest.
&gt; JavacTestOptions.JavacHasABug.Javac8ProducesIllegalAccessError
&gt; 
&gt; I also reported this to lambda-dev@openjdk.java.net (pending moderation).

I learned that this is considered a bug in the VM:
http://bugs.sun.com/view_bug.do?bug_id=8009130

So once that bug is fixed we may want to retract some of our bridge generation.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2331844</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-11-19 08:59:02 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #5)
&gt; So once that bug is fixed we may want to retract some of our bridge
&gt; generation.

Done via bug 404690.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>