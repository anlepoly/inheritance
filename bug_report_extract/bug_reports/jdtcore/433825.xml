<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>433825</bug_id>
          
          <creation_ts>2014-04-30 05:34:00 -0400</creation_ts>
          <short_desc>[1.8][compiler] Internal compiler error: NullPointerException in AllocationExpression#resolvePart3</short_desc>
          <delta_ts>2014-05-26 02:46:19 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.4 RC2</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Oliver Masutti">eclipse2</reporter>
          <assigned_to name="Sasikanth Bharadwaj">saammana</assigned_to>
          <cc>jarthana</cc>
    
    <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="62423"
          type_id="1"
          status="+"
          setter="stephan.herrmann"
    />
    <flag name="review"
          id="62426"
          type_id="1"
          status="+"
          setter="jarthana"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2395262</commentid>
    <comment_count>0</comment_count>
      <attachid>242527</attachid>
    <who name="Oliver Masutti">eclipse2</who>
    <bug_when>2014-04-30 05:34:30 -0400</bug_when>
    <thetext>Created attachment 242527
Source file

The attached java class crashes the compiler with an NPE (in Eclipse 3.8.2 and javac compiling works fine).
Compiler Compliance Level has to be set to 1.8.

java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.resolvePart3(AllocationExpression.java:525)
	at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.checkAgainstFinalTargetType(AllocationExpression.java:728)
	at org.eclipse.jdt.internal.compiler.ast.ConditionalExpression.checkAgainstFinalTargetType(ConditionalExpression.java:728)
	at org.eclipse.jdt.internal.compiler.ast.ASTNode.resolvePolyExpressionArguments(ASTNode.java:739)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.inferInvocationType(Scope.java:5136)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getConstructor0(Scope.java:2490)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getConstructor(Scope.java:2429)
	at org.eclipse.jdt.internal.compiler.ast.Statement.findConstructorBinding(Statement.java:362)
	at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.resolvePart2(AllocationExpression.java:511)
	at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.resolveType(AllocationExpression.java:486)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1020)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:619)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:299)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:529)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1207)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1320)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:587)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:1204)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:689)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1183)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:809)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:470)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:470)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:83)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:367)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:349)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:372)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:332)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2400644</commentid>
    <comment_count>1</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-05-13 02:49:00 -0400</bug_when>
    <thetext>Jay, this is targeted for 4.4, probably should be RC1, I have a patch under test which I can submit for review once the tests pass</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2401754</commentid>
    <comment_count>2</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-14 12:37:10 -0400</bug_when>
    <thetext>Too late for RC1.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2403920</commentid>
    <comment_count>3</comment_count>
      <attachid>243273</attachid>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-05-20 02:31:47 -0400</bug_when>
    <thetext>Created attachment 243273
patch with proposed fix and tests</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2403924</commentid>
    <comment_count>4</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-05-20 02:42:37 -0400</bug_when>
    <thetext>Found two cases in which the diamond remains half resolved - one is the case reported here when wild card is involved and Scope.compatibilityLevel18FromInner() answers compatible via this branch

if (invocArg instanceof Invocation &amp;&amp; resolvedType != null) {
			Invocation innerPoly = (Invocation) invocArg;
			level = parameterCompatibilityLevel(resolvedType, targetType);
			if (level != NOT_COMPATIBLE) {
				if (TypeBinding.notEquals(argType, resolvedType) &amp;&amp; innerInferenceHelper != null)
					innerInferenceHelper.registerInnerResult(method, resolvedType, argLen, i);
				return Math.max(compatible, level);
			}
			.....

Other is in the same method, when the valueIfTrue expression of a conditional expression answers incompatible, the false portion is not evaluated leaving the diamond half resolved

Since ASTNode.resolvePolyExpressionArguments does not handle conditional expression specially, the allocation expression remains unbound
Performing resolution in AllocationExpression.checkAgainstFinalTargetType seems to be the correct solution to address both the cases</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404045</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-20 05:58:53 -0400</bug_when>
    <thetext>Hi Sasi,

I fully agree with the location of fixing the problem!

Regarding the fix itself, can you say a word, which method should be the best entry into resolving: your patch calls binding() which is a wrapper around resolvePart2(). Have you considered directly invoking the latter? Which one is better? Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404091</commentid>
    <comment_count>6</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-05-20 07:40:20 -0400</bug_when>
    <thetext>I kind of assumed that binding would be the right one to call because that is the one being called from other locations that attempt to resolve the diamond and it seems to report some errors. But on looking closer, since we are resolving from within the Allocation Expression, it looks like we can get rid of the wrapper and call resolvePart2() directly.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404093</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-20 07:46:47 -0400</bug_when>
    <thetext>(In reply to Sasikanth Bharadwaj from comment #6)
&gt; I kind of assumed that binding would be the right one to call because that
&gt; is the one being called from other locations that attempt to resolve the
&gt; diamond and it seems to report some errors. But on looking closer, since we
&gt; are resolving from within the Allocation Expression, it looks like we can
&gt; get rid of the wrapper and call resolvePart2() directly.

Makes sense, so please briefly check the impact on error reporting (would we be missing any errors?), and if all looks well please provide an updated patch. TIA.

Calling resolvePart2() and later resolvePart3() looks well in line with the tail of the original resolveType(BlockScope). :)

Ah, while we&apos;re at it, one last question: to return or to continue when detecting errors?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404097</commentid>
    <comment_count>8</comment_count>
      <attachid>243287</attachid>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-05-20 07:52:36 -0400</bug_when>
    <thetext>Created attachment 243287
Modified patch

updated as per comments</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404099</commentid>
    <comment_count>9</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-05-20 07:53:49 -0400</bug_when>
    <thetext>Attached modified patch, running tests, will update with results and answers once testing is complete</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404591</commentid>
    <comment_count>10</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-20 17:50:17 -0400</bug_when>
    <thetext>One more nit-pick: you are ignoring the result from resolvePart2(). By analogy from resolveType() I would instead expect

   	if (!resolvePart2(this.suspendedResolutionState))
		return null;

also here.

Note, that I haven&apos;t tried this nor do I have a test case that would tell a difference.

Can you argue why one is better than the other? The reason why I&apos;m insisting on thinking about this: if resolvePart2 fails (signaled by false) wouldn&apos;t that still leave us with a null this.binding, the exact thing we are fixing in this bug? There&apos;re certainly 1 or 2 more sides to this question, so please convince me which solutions better :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404632</commentid>
    <comment_count>11</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-05-21 02:40:54 -0400</bug_when>
    <thetext>(In reply to comment #10)
&gt; One more nit-pick: you are ignoring the result from resolvePart2(). By analogy
&gt; from resolveType() I would instead expect
&gt; 
&gt; if (!resolvePart2(this.suspendedResolutionState))
&gt; return null;
&gt; 
&gt; also here.
&gt; 
&gt; Note, that I haven&apos;t tried this nor do I have a test case that would tell a
&gt; difference.
&gt; 
&gt; Can you argue why one is better than the other? The reason why I&apos;m insisting on
&gt; thinking about this: if resolvePart2 fails (signaled by false) wouldn&apos;t that
&gt; still leave us with a null this.binding, the exact thing we are fixing in this
&gt; bug? There&apos;re certainly 1 or 2 more sides to this question, so please convince
&gt; me which solutions better :)
returning if resolvePart2() fails will result in the error cannotInferElidedTypes not being reported, so continuing in this case is the right thing to do. Since the state.cannotInferDiamond is set when resolvePart2 fails and this is checked in resolvePart3(), a null binding in this case will not be a problem. Also, the return value of this.resolvedType is set to null in resolvePart3(), so even that will not be a problem in the case of failed resolvePart2(). This would yield the same result as that of resolveType(). Only difference between calling binding() and resolvePart2() directly would occur in reporting the genericInferenceError, which I do not see occurring because the only case in which resolvePart2(0 fails is when it inferElidedTypes fails.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404634</commentid>
    <comment_count>12</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-05-21 02:42:34 -0400</bug_when>
    <thetext>Forgot to mention, all tests pass and I have not seen any difference with respect to error reporting with the tests I tried</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404665</commentid>
    <comment_count>13</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-21 03:46:05 -0400</bug_when>
    <thetext>(In reply to Sasikanth Bharadwaj from comment #11)

Thanks for the explanations!

Two final remarks after reading comment 11:
- our situation indeed differs from resolveType in the value of diamondNeedsDeferring. That&apos;s s.t. I missed when writing comment 10.
- not reporting genericInferenceError shouldn&apos;t worry us: that one is just a stop-gap safety measure :)

With your explanations I agree to the patch. Good job.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404769</commentid>
    <comment_count>14</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-21 06:42:23 -0400</bug_when>
    <thetext>I am not sure if this is relevant but the following code throws a NPE in codegen :(

new Bar(b ? new ArrayList&lt;&gt;(b ? new ArrayList&lt;&gt;() : c1) : c1)


Exception thrown:

java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.ConditionalExpression.generateCode(ConditionalExpression.java:286)
	at org.eclipse.jdt.internal.compiler.ast.Statement.generateArguments(Statement.java:287)
	at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.generateCode(AllocationExpression.java:215)
	at org.eclipse.jdt.internal.compiler.ast.ConditionalExpression.generateCode(ConditionalExpression.java:278)
	at org.eclipse.jdt.internal.compiler.ast.Statement.generateArguments(Statement.java:287)
	at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.generateCode(AllocationExpression.java:215)
	at org.eclipse.jdt.internal.compiler.ast.Expression.generateCode(Expression.java:705)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.generateCode(AbstractMethodDeclaration.java:325)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.generateCode(AbstractMethodDeclaration.java:270)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.generateCode(TypeDeclaration.java:566)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.generateCode(TypeDeclaration.java:635)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.generateCode(CompilationUnitDeclaration.java:368)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404787</commentid>
    <comment_count>15</comment_count>
      <attachid>243335</attachid>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-05-21 07:33:00 -0400</bug_when>
    <thetext>Created attachment 243335
Patch that includes tests</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404789</commentid>
    <comment_count>16</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-05-21 07:35:18 -0400</bug_when>
    <thetext>Jay, I tried the code with the patch and the exception does not occur, is that not the case for you?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404795</commentid>
    <comment_count>17</comment_count>
      <attachid>243338</attachid>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-05-21 07:45:22 -0400</bug_when>
    <thetext>Created attachment 243338
Patch that includes tests</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404812</commentid>
    <comment_count>18</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-21 08:15:36 -0400</bug_when>
    <thetext>(In reply to Sasikanth Bharadwaj from comment #16)
&gt; Jay, I tried the code with the patch and the exception does not occur, is
&gt; that not the case for you?

Just to be sure, can you check if it occurs without the patch? I see the NPE with or without the patch. Here&apos;s the code:

import java.util.ArrayList;
import java.util.Collection;

public class CompilerCrashesWithNPE {
  
  public void bla() {
    boolean b = Boolean.TRUE.booleanValue();
    Collection&lt;?&gt; c1 = new ArrayList&lt;String&gt;();
    new Bar(b ? new ArrayList&lt;&gt;(b ? new ArrayList&lt;&gt;() : c1) : c1);
  }

  private static class Bar {
    public Bar(Collection&lt;?&gt; col) {
    }
  }
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2405248</commentid>
    <comment_count>19</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-21 19:54:41 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #14)
&gt; I am not sure if this is relevant but the following code throws a NPE in
&gt; codegen :(
 

Compiling for 1.7 all is well, compiling for 1.8 I, too, see it crashing both with or without the patch :(

From quick analysis, however, the culprit is not the patch in this bug, but my patch in bug 434297.

Recommendation coming in a minute...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2405255</commentid>
    <comment_count>20</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-21 20:17:23 -0400</bug_when>
    <thetext>The problem from comment 14 *could* be solved by adding Sasi&apos;s patch from bug 434297 comment 2 on top of the patch in this bug, BUT: that patch had one non-trivial task outstanding: retrieve the correct parameter type as target type while respecting possible varargs invocations (see bug 434297 comment 4).

In that light I
- apologize for pushing my own solution in bug 434297 rather than help polish Sasi&apos;s version
- propose to release the patch in this bug as-is for now, since unrelated
- propose to prepare an additional patch combining the findings of both bugs and decide early next week whether we want this in RC3 or 4.5

my 2c.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2405291</commentid>
    <comment_count>21</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-22 00:14:25 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #20)
&gt; The problem from comment 14 *could* be solved by adding Sasi&apos;s patch from
&gt; bug 434297 comment 2 on top of the patch in this bug, BUT: that patch had
&gt; one non-trivial task outstanding: retrieve the correct parameter type as
&gt; target type while respecting possible varargs invocations (see bug 434297
&gt; comment 4).
&gt; 
&gt; In that light I
&gt; - apologize for pushing my own solution in bug 434297 rather than help
&gt; polish Sasi&apos;s version
&gt; - propose to release the patch in this bug as-is for now, since unrelated
&gt; - propose to prepare an additional patch combining the findings of both bugs
&gt; and decide early next week whether we want this in RC3 or 4.5
&gt; 
&gt; my 2c.

Thanks for weighing in, Stephan, I agree we could take this in another bug. But we should try and address in RC3

I have released the patch in master now:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=17cb72936c7817f00ee632f41ae5246b6b9db5dd

Sasi, can you raise a new bug for issue mentioned in comment #14 (complete test case provided in commment #18) and target RC3? Thanks!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2405298</commentid>
    <comment_count>22</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-05-22 01:26:46 -0400</bug_when>
    <thetext>Created bug 435462 for the case mentioned in comment 18</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2406868</commentid>
    <comment_count>23</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-05-26 01:13:59 -0400</bug_when>
    <thetext>Verified for Eclipse Luna 4.4 RC2 Build ID: I20140525-2000.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>242527</attachid>
            <date>2014-04-30 05:34:00 -0400</date>
            <delta_ts>2014-04-30 05:34:30 -0400</delta_ts>
            <desc>Source file</desc>
            <filename>CompilerCrashesWithNPE.java</filename>
            <type>application/octet-stream</type>
            <size>583</size>
            <attacher name="Oliver Masutti">eclipse2</attacher>
            
              <data encoding="base64">aW1wb3J0IGphdmEudXRpbC5BcnJheUxpc3Q7DQppbXBvcnQgamF2YS51dGlsLkNvbGxlY3Rpb247
DQoNCnB1YmxpYyBjbGFzcyBDb21waWxlckNyYXNoZXNXaXRoTlBFIHsNCiAgDQogIHB1YmxpYyB2
b2lkIGJsYSgpIHsNCiAgICBib29sZWFuIGIgPSBCb29sZWFuLlRSVUUuYm9vbGVhblZhbHVlKCk7
DQogICAgDQogICAgQ29sbGVjdGlvbjw/PiBjMSA9IG5ldyBBcnJheUxpc3Q8U3RyaW5nPigpOw0K
ICAgIA0KICAgIG5ldyBCYXIoYiA/IGMxIDogbmV3IEFycmF5TGlzdDxTdHJpbmc+KCkpOyAvLyB0
aGlzIGxpbmUgY29tcGlsZXMgZmluZSB3aXRoIGVjaiAoZWNsaXBzZSAzLjguMiBhbmQgNC40IEky
MDE0MDQyOS0wODAwKSBhbmQgamF2YWMNCiAgICBuZXcgQmFyKGIgPyBjMSA6IG5ldyBBcnJheUxp
c3Q8PigpKTsgLy8gdGhpcyBsaW5lIGNyYXNoZXMgZWNqICg0LjQgSTIwMTQwNDI5LTA4MDApLCBi
dXQgbm90IGVjaiAoZWNsaXBzZSAzLjguMikgYW5kIGphdmFjDQogIH0NCg0KICBwcml2YXRlIHN0
YXRpYyBjbGFzcyBCYXIgew0KICAgIHB1YmxpYyBCYXIoQ29sbGVjdGlvbjw/PiBjb2wpIHsNCiAg
ICB9DQogIH0NCn0NCg==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>243273</attachid>
            <date>2014-05-20 02:31:00 -0400</date>
            <delta_ts>2014-05-21 07:33:58 -0400</delta_ts>
            <desc>patch with proposed fix and tests</desc>
            <filename>Fix-and-tests-for-433825.patch</filename>
            <type>text/plain</type>
            <size>3859</size>
            <attacher name="Sasikanth Bharadwaj">saammana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3RfMV84LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmlj
c1JlZ3Jlc3Npb25UZXN0XzFfOC5qYXZhCmluZGV4IDIzYjhhM2EuLjc3NDNlMTkgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3Rf
MV84LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdy
ZXNzaW9uVGVzdF8xXzguamF2YQpAQCAtMzExNiw0ICszMTE2LDYzIEBACiAJCQkifVxuIgogCQl9
KTsKIH0KKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00
MzM4MjUgWzEuOF1bY29tcGlsZXJdIEludGVybmFsIGNvbXBpbGVyIGVycm9yOiBOdWxsUG9pbnRl
ckV4Y2VwdGlvbiBpbiBBbGxvY2F0aW9uRXhwcmVzc2lvbiNyZXNvbHZlUGFydDMKK3B1YmxpYyB2
b2lkIHRlc3RCdWc0MzM4MjUoKSB7CisJdGhpcy5ydW5Db25mb3JtVGVzdCgKKwkJbmV3IFN0cmlu
Z1tdIHsKKwkJCSJYLmphdmEiLCAKKwkJCSJpbXBvcnQgamF2YS51dGlsLkFycmF5TGlzdDtcbiIg
KyAKKwkJCSJpbXBvcnQgamF2YS51dGlsLkNvbGxlY3Rpb247XG4iICsgCisJCQkiaW1wb3J0IGph
dmEudXRpbC5MaXN0O1xuIiArIAorCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKyAKKwkJCSIgIHB1
YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKyAKKwkJCSIgIH1cbiIg
KyAKKwkJCSIgIHB1YmxpYyB2b2lkIGJsYSgpIHtcbiIgKyAKKwkJCSIgICAgYm9vbGVhbiBiID0g
Qm9vbGVhbi5UUlVFLmJvb2xlYW5WYWx1ZSgpO1xuIiArIAorCQkJIiAgICBMaXN0PFN0cmluZz4g
YzEgPSBuZXcgQXJyYXlMaXN0PD4oKTtcbiIgKyAKKwkJCSIgICAgbmV3IEJhcihiID8gYzEgOiBu
ZXcgQXJyYXlMaXN0PD4oKSk7IC8vIHRoaXMgbGluZSBjcmFzaGVzIGVjaiAoNC40IEkyMDE0MDQy
OS0wODAwKSwgYnV0IG5vdCBlY2ogKGVjbGlwc2UgMy44LjIpIGFuZCBqYXZhY1xuIiArIAorCQkJ
IiAgfVxuIiArIAorCQkJIiAgcHJpdmF0ZSBzdGF0aWMgY2xhc3MgQmFyIHtcbiIgKyAKKwkJCSIJ
ICBwdWJsaWMgQmFyKENvbGxlY3Rpb248Pz4gY29sKSB7IH1cbiIgKyAKKwkJCSIgIH1cbiIgKyAK
KwkJCSJ9IgorCX0pOworfQorLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19i
dWcuY2dpP2lkPTQzMzgyNSBbMS44XVtjb21waWxlcl0gSW50ZXJuYWwgY29tcGlsZXIgZXJyb3I6
IE51bGxQb2ludGVyRXhjZXB0aW9uIGluIEFsbG9jYXRpb25FeHByZXNzaW9uI3Jlc29sdmVQYXJ0
MworcHVibGljIHZvaWQgdGVzdEJ1ZzQzMzgyNWEoKSB7CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3Qo
CisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwgCisJCQkiaW1wb3J0IGphdmEudXRpbC5B
cnJheUxpc3Q7XG4iICsgCisJCQkiaW1wb3J0IGphdmEudXRpbC5Db2xsZWN0aW9uO1xuIiArIAor
CQkJImltcG9ydCBqYXZhLnV0aWwuTGlzdDtcbiIgKyAKKwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4i
ICsgCisJCQkiICBwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsg
CisJCQkiICB9XG4iICsgCisJCQkiICBwdWJsaWMgdm9pZCBibGEoKSB7XG4iICsgCisJCQkiICAg
IGJvb2xlYW4gYiA9IEJvb2xlYW4uVFJVRS5ib29sZWFuVmFsdWUoKTtcbiIgKyAKKwkJCSIgICAg
bmV3IEJhcihiID8gMCA6IG5ldyBBcnJheUxpc3Q8PigpKTtcbiIgKyAKKwkJCSIgIH1cbiIgKyAK
KwkJCSIgIHByaXZhdGUgc3RhdGljIGNsYXNzIEJhciB7XG4iICsgCisJCQkiCSAgcHVibGljIEJh
cihDb2xsZWN0aW9uPFN0cmluZz4gY29sKSB7IH1cbiIgKyAKKwkJCSIgIH1cbiIgKyAKKwkJCSJ9
IgorCQl9LAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBs
aW5lIDkpXG4iICsgCisJCSIJbmV3IEJhcihiID8gMCA6IG5ldyBBcnJheUxpc3Q8PigpKTtcbiIg
KyAKKwkJIgleXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCSJUaGUg
Y29uc3RydWN0b3IgWC5CYXIoKGIgPyAwIDogbmV3IEFycmF5TGlzdDw+KCkpKSBpcyB1bmRlZmlu
ZWRcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjIuIEVSUk9SIGluIFguamF2YSAoYXQg
bGluZSA5KVxuIiArIAorCQkiCW5ldyBCYXIoYiA/IDAgOiBuZXcgQXJyYXlMaXN0PD4oKSk7XG4i
ICsgCisJCSIJICAgICAgICAgICAgXlxuIiArIAorCQkiVHlwZSBtaXNtYXRjaDogY2Fubm90IGNv
bnZlcnQgZnJvbSBpbnQgdG8gQ29sbGVjdGlvbjxTdHJpbmc+XG4iICsgCisJCSItLS0tLS0tLS0t
XG4iICsKKwkJIjMuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDEyKVxuIiArIAorCQkiCXB1
YmxpYyBCYXIoQ29sbGVjdGlvbjxTdHJpbmc+IGNvbCkgeyB9XG4iICsgCisJCSIJICAgICAgIF5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkiVGhlIGNvbnN0cnVjdG9yIFguQmFy
KENvbGxlY3Rpb248U3RyaW5nPikgaXMgbmV2ZXIgdXNlZCBsb2NhbGx5XG4iICsgCisJCSItLS0t
LS0tLS0tXG4iKTsKK30KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWxsb2NhdGlvbkV4cHJl
c3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YQppbmRleCBj
MTAyZmE3Li43ZWZhMmQ5IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FsbG9jYXRpb25FeHByZXNz
aW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCkBAIC03
MjUsNiArNzI1LDEwIEBACiAJcmV0dXJuIHRoaXMuYmluZGluZzsKIH0KIHB1YmxpYyBUeXBlQmlu
ZGluZyBjaGVja0FnYWluc3RGaW5hbFRhcmdldFR5cGUoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwg
U2NvcGUgc2NvcGUpIHsKKwlpZiAodGhpcy5iaW5kaW5nID09IG51bGwgJiYgdGhpcy5zdXNwZW5k
ZWRSZXNvbHV0aW9uU3RhdGUgIT0gbnVsbCAmJiAhdGhpcy5zdXNwZW5kZWRSZXNvbHV0aW9uU3Rh
dGUuaGFzUmVwb3J0ZWRFcnJvcikgeworCQkvLyBBdHRlbXB0IHRvIHJlc29sdmUgaGFsZiByZXNv
bHZlZCBkaWFtb25kCisJCWJpbmRpbmcodGFyZ2V0VHlwZSwgdHJ1ZSxzY29wZSk7CisJfQogCS8v
IGNvbmZlciBNZXNzYWdlU2VuZC5jaGVja0FnYWluc3RGaW5hbFRhcmdldFR5cGUoLCwpOgogCWlm
ICh0aGlzLmJpbmRpbmcgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRp
bmcpIHsKIAkJSW5mZXJlbmNlQ29udGV4dDE4IGN0eCA9IGdldEluZmVyZW5jZUNvbnRleHQoKFBh
cmFtZXRlcml6ZWRNZXRob2RCaW5kaW5nKSB0aGlzLmJpbmRpbmcpOw==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>243287</attachid>
            <date>2014-05-20 07:52:00 -0400</date>
            <delta_ts>2014-05-21 07:33:31 -0400</delta_ts>
            <desc>Modified patch</desc>
            <filename>Fix-and-tests-for-433825.patch</filename>
            <type>text/plain</type>
            <size>1003</size>
            <attacher name="Sasikanth Bharadwaj">saammana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YSBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YQppbmRleCBjMTAyZmE3Li4wMTlhZDgxIDEw
MDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L0FsbG9jYXRpb25FeHByZXNzaW9uLmphdmEKKysrIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9BbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCkBAIC03MjUsNiArNzI1LDEwIEBACiAJ
cmV0dXJuIHRoaXMuYmluZGluZzsKIH0KIHB1YmxpYyBUeXBlQmluZGluZyBjaGVja0FnYWluc3RG
aW5hbFRhcmdldFR5cGUoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgU2NvcGUgc2NvcGUpIHsKKwlp
ZiAodGhpcy5iaW5kaW5nID09IG51bGwgJiYgdGhpcy5zdXNwZW5kZWRSZXNvbHV0aW9uU3RhdGUg
IT0gbnVsbCAmJiAhdGhpcy5zdXNwZW5kZWRSZXNvbHV0aW9uU3RhdGUuaGFzUmVwb3J0ZWRFcnJv
cikgeworCQkvLyBBdHRlbXB0IHRvIHJlc29sdmUgaGFsZiByZXNvbHZlZCBkaWFtb25kCisJCXJl
c29sdmVQYXJ0Mih0aGlzLnN1c3BlbmRlZFJlc29sdXRpb25TdGF0ZSk7CisJfQogCS8vIGNvbmZl
ciBNZXNzYWdlU2VuZC5jaGVja0FnYWluc3RGaW5hbFRhcmdldFR5cGUoLCwpOgogCWlmICh0aGlz
LmJpbmRpbmcgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHsK
IAkJSW5mZXJlbmNlQ29udGV4dDE4IGN0eCA9IGdldEluZmVyZW5jZUNvbnRleHQoKFBhcmFtZXRl
cml6ZWRNZXRob2RCaW5kaW5nKSB0aGlzLmJpbmRpbmcpOw==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>243335</attachid>
            <date>2014-05-21 07:33:00 -0400</date>
            <delta_ts>2014-05-21 07:44:25 -0400</delta_ts>
            <desc>Patch that includes tests</desc>
            <filename>Fix-and-tests-for-433825.patch</filename>
            <type>text/plain</type>
            <size>4109</size>
            <attacher name="Sasikanth Bharadwaj">saammana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3RfMV84LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmlj
c1JlZ3Jlc3Npb25UZXN0XzFfOC5qYXZhCmluZGV4IDIzYjhhM2EuLjI0N2ZhZjggMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3Rf
MV84LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdy
ZXNzaW9uVGVzdF8xXzguamF2YQpAQCAtMzExNiw0ICszMTE2LDY4IEBACiAJCQkifVxuIgogCQl9
KTsKIH0KKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00
MzM4MjUgWzEuOF1bY29tcGlsZXJdIEludGVybmFsIGNvbXBpbGVyIGVycm9yOiBOdWxsUG9pbnRl
ckV4Y2VwdGlvbiBpbiBBbGxvY2F0aW9uRXhwcmVzc2lvbiNyZXNvbHZlUGFydDMKK3B1YmxpYyB2
b2lkIHRlc3RCdWc0MzM4MjUoKSB7CisJdGhpcy5ydW5Db25mb3JtVGVzdCgKKwkJbmV3IFN0cmlu
Z1tdIHsKKwkJCSJYLmphdmEiLCAKKwkJCSJpbXBvcnQgamF2YS51dGlsLkFycmF5TGlzdDtcbiIg
KyAKKwkJCSJpbXBvcnQgamF2YS51dGlsLkNvbGxlY3Rpb247XG4iICsgCisJCQkiaW1wb3J0IGph
dmEudXRpbC5MaXN0O1xuIiArIAorCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKyAKKwkJCSIgIHB1
YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKyAKKwkJCSIgIH1cbiIg
KyAKKwkJCSIgIHB1YmxpYyB2b2lkIGJsYSgpIHtcbiIgKyAKKwkJCSIgICAgYm9vbGVhbiBiID0g
Qm9vbGVhbi5UUlVFLmJvb2xlYW5WYWx1ZSgpO1xuIiArIAorCQkJIiAgICBMaXN0PFN0cmluZz4g
YzEgPSBuZXcgQXJyYXlMaXN0PD4oKTtcbiIgKyAKKwkJCSIgICAgbmV3IEJhcihiID8gYzEgOiBu
ZXcgQXJyYXlMaXN0PD4oKSk7IC8vIHRoaXMgbGluZSBjcmFzaGVzIGVjaiAoNC40IEkyMDE0MDQy
OS0wODAwKSwgYnV0IG5vdCBlY2ogKGVjbGlwc2UgMy44LjIpIGFuZCBqYXZhY1xuIiArIAorCQkJ
IiAgfVxuIiArIAorCQkJIiAgcHJpdmF0ZSBzdGF0aWMgY2xhc3MgQmFyIHtcbiIgKyAKKwkJCSIJ
ICBwdWJsaWMgQmFyKENvbGxlY3Rpb248Pz4gY29sKSB7IH1cbiIgKyAKKwkJCSIgIH1cbiIgKyAK
KwkJCSJ9IgorCX0pOworfQorLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19i
dWcuY2dpP2lkPTQzMzgyNSBbMS44XVtjb21waWxlcl0gSW50ZXJuYWwgY29tcGlsZXIgZXJyb3I6
IE51bGxQb2ludGVyRXhjZXB0aW9uIGluIEFsbG9jYXRpb25FeHByZXNzaW9uI3Jlc29sdmVQYXJ0
MworcHVibGljIHZvaWQgdGVzdEJ1ZzQzMzgyNWEoKSB7CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3Qo
CisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwgCisJCQkiaW1wb3J0IGphdmEudXRpbC5B
cnJheUxpc3Q7XG4iICsgCisJCQkiaW1wb3J0IGphdmEudXRpbC5Db2xsZWN0aW9uO1xuIiArIAor
CQkJImltcG9ydCBqYXZhLnV0aWwuTGlzdDtcbiIgKyAKKwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4i
ICsgCisJCQkiICBwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsg
CisJCQkiICB9XG4iICsgCisJCQkiICBwdWJsaWMgdm9pZCBibGEoKSB7XG4iICsgCisJCQkiICAg
IGJvb2xlYW4gYiA9IEJvb2xlYW4uVFJVRS5ib29sZWFuVmFsdWUoKTtcbiIgKyAKKwkJCSIgICAg
bmV3IEJhcihiID8gMCA6IG5ldyBBcnJheUxpc3Q8PigpKTtcbiIgKyAKKwkJCSIgIH1cbiIgKyAK
KwkJCSIgIHByaXZhdGUgc3RhdGljIGNsYXNzIEJhciB7XG4iICsgCisJCQkiCSAgcHVibGljIEJh
cihDb2xsZWN0aW9uPFN0cmluZz4gY29sKSB7IH1cbiIgKyAKKwkJCSIgIH1cbiIgKyAKKwkJCSJ9
IgorCQl9LAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBs
aW5lIDkpXG4iICsgCisJCSIJbmV3IEJhcihiID8gMCA6IG5ldyBBcnJheUxpc3Q8PigpKTtcbiIg
KyAKKwkJIgleXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCSJUaGUg
Y29uc3RydWN0b3IgWC5CYXIoKGIgPyAwIDogbmV3IEFycmF5TGlzdDw+KCkpKSBpcyB1bmRlZmlu
ZWRcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjIuIEVSUk9SIGluIFguamF2YSAoYXQg
bGluZSA5KVxuIiArIAorCQkiCW5ldyBCYXIoYiA/IDAgOiBuZXcgQXJyYXlMaXN0PD4oKSk7XG4i
ICsgCisJCSIJICAgICAgICAgICAgXlxuIiArIAorCQkiVHlwZSBtaXNtYXRjaDogY2Fubm90IGNv
bnZlcnQgZnJvbSBpbnQgdG8gQ29sbGVjdGlvbjxTdHJpbmc+XG4iICsgCisJCSItLS0tLS0tLS0t
XG4iICsKKwkJIjMuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA5KVxuIiArIAorCQkiCW5ldyBC
YXIoYiA/IDAgOiBuZXcgQXJyYXlMaXN0PD4oKSk7XG4iICsgCisJCSIJICAgICAgICAgICAgICAg
IF5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVy
dCBmcm9tIEFycmF5TGlzdDxPYmplY3Q+IHRvIENvbGxlY3Rpb248U3RyaW5nPlxuIiArIAorCQki
LS0tLS0tLS0tLVxuIiArCisJCSIzLiBXQVJOSU5HIGluIFguamF2YSAoYXQgbGluZSAxMilcbiIg
KyAKKwkJIglwdWJsaWMgQmFyKENvbGxlY3Rpb248U3RyaW5nPiBjb2wpIHsgfVxuIiArIAorCQki
CSAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5cbiIgKyAKKwkJIlRoZSBjb25zdHJ1
Y3RvciBYLkJhcihDb2xsZWN0aW9uPFN0cmluZz4pIGlzIG5ldmVyIHVzZWQgbG9jYWxseVxuIiAr
IAorCQkiLS0tLS0tLS0tLVxuIik7Cit9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FsbG9j
YXRpb25FeHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FsbG9jYXRpb25FeHByZXNzaW9uLmph
dmEKaW5kZXggYzEwMmZhNy4uMDE5YWQ4MSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BbGxvY2F0
aW9uRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24u
amF2YQpAQCAtNzI1LDYgKzcyNSwxMCBAQAogCXJldHVybiB0aGlzLmJpbmRpbmc7CiB9CiBwdWJs
aWMgVHlwZUJpbmRpbmcgY2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRUeXBlKFR5cGVCaW5kaW5nIHRh
cmdldFR5cGUsIFNjb3BlIHNjb3BlKSB7CisJaWYgKHRoaXMuYmluZGluZyA9PSBudWxsICYmIHRo
aXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlICE9IG51bGwgJiYgIXRoaXMuc3VzcGVuZGVkUmVz
b2x1dGlvblN0YXRlLmhhc1JlcG9ydGVkRXJyb3IpIHsKKwkJLy8gQXR0ZW1wdCB0byByZXNvbHZl
IGhhbGYgcmVzb2x2ZWQgZGlhbW9uZAorCQlyZXNvbHZlUGFydDIodGhpcy5zdXNwZW5kZWRSZXNv
bHV0aW9uU3RhdGUpOworCX0KIAkvLyBjb25mZXIgTWVzc2FnZVNlbmQuY2hlY2tBZ2FpbnN0Rmlu
YWxUYXJnZXRUeXBlKCwsKToKIAlpZiAodGhpcy5iaW5kaW5nIGluc3RhbmNlb2YgUGFyYW1ldGVy
aXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7CiAJCUluZmVyZW5jZUNvbnRleHQxOCBjdHggPSBn
ZXRJbmZlcmVuY2VDb250ZXh0KChQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZykgdGhpcy5iaW5k
aW5nKTs=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>243338</attachid>
            <date>2014-05-21 07:45:00 -0400</date>
            <delta_ts>2014-05-21 07:45:22 -0400</delta_ts>
            <desc>Patch that includes tests</desc>
            <filename>Fix-and-tests-for-433825.patch</filename>
            <type>text/plain</type>
            <size>4109</size>
            <attacher name="Sasikanth Bharadwaj">saammana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3RfMV84LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmlj
c1JlZ3Jlc3Npb25UZXN0XzFfOC5qYXZhCmluZGV4IDIzYjhhM2EuLjAwNjBlYTggMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3Rf
MV84LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdy
ZXNzaW9uVGVzdF8xXzguamF2YQpAQCAtMzExNiw0ICszMTE2LDY4IEBACiAJCQkifVxuIgogCQl9
KTsKIH0KKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00
MzM4MjUgWzEuOF1bY29tcGlsZXJdIEludGVybmFsIGNvbXBpbGVyIGVycm9yOiBOdWxsUG9pbnRl
ckV4Y2VwdGlvbiBpbiBBbGxvY2F0aW9uRXhwcmVzc2lvbiNyZXNvbHZlUGFydDMKK3B1YmxpYyB2
b2lkIHRlc3RCdWc0MzM4MjUoKSB7CisJdGhpcy5ydW5Db25mb3JtVGVzdCgKKwkJbmV3IFN0cmlu
Z1tdIHsKKwkJCSJYLmphdmEiLCAKKwkJCSJpbXBvcnQgamF2YS51dGlsLkFycmF5TGlzdDtcbiIg
KyAKKwkJCSJpbXBvcnQgamF2YS51dGlsLkNvbGxlY3Rpb247XG4iICsgCisJCQkiaW1wb3J0IGph
dmEudXRpbC5MaXN0O1xuIiArIAorCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKyAKKwkJCSIgIHB1
YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKyAKKwkJCSIgIH1cbiIg
KyAKKwkJCSIgIHB1YmxpYyB2b2lkIGJsYSgpIHtcbiIgKyAKKwkJCSIgICAgYm9vbGVhbiBiID0g
Qm9vbGVhbi5UUlVFLmJvb2xlYW5WYWx1ZSgpO1xuIiArIAorCQkJIiAgICBMaXN0PFN0cmluZz4g
YzEgPSBuZXcgQXJyYXlMaXN0PD4oKTtcbiIgKyAKKwkJCSIgICAgbmV3IEJhcihiID8gYzEgOiBu
ZXcgQXJyYXlMaXN0PD4oKSk7IC8vIHRoaXMgbGluZSBjcmFzaGVzIGVjaiAoNC40IEkyMDE0MDQy
OS0wODAwKSwgYnV0IG5vdCBlY2ogKGVjbGlwc2UgMy44LjIpIGFuZCBqYXZhY1xuIiArIAorCQkJ
IiAgfVxuIiArIAorCQkJIiAgcHJpdmF0ZSBzdGF0aWMgY2xhc3MgQmFyIHtcbiIgKyAKKwkJCSIJ
ICBwdWJsaWMgQmFyKENvbGxlY3Rpb248Pz4gY29sKSB7IH1cbiIgKyAKKwkJCSIgIH1cbiIgKyAK
KwkJCSJ9IgorCX0pOworfQorLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19i
dWcuY2dpP2lkPTQzMzgyNSBbMS44XVtjb21waWxlcl0gSW50ZXJuYWwgY29tcGlsZXIgZXJyb3I6
IE51bGxQb2ludGVyRXhjZXB0aW9uIGluIEFsbG9jYXRpb25FeHByZXNzaW9uI3Jlc29sdmVQYXJ0
MworcHVibGljIHZvaWQgdGVzdEJ1ZzQzMzgyNWEoKSB7CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3Qo
CisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwgCisJCQkiaW1wb3J0IGphdmEudXRpbC5B
cnJheUxpc3Q7XG4iICsgCisJCQkiaW1wb3J0IGphdmEudXRpbC5Db2xsZWN0aW9uO1xuIiArIAor
CQkJImltcG9ydCBqYXZhLnV0aWwuTGlzdDtcbiIgKyAKKwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4i
ICsgCisJCQkiICBwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsg
CisJCQkiICB9XG4iICsgCisJCQkiICBwdWJsaWMgdm9pZCBibGEoKSB7XG4iICsgCisJCQkiICAg
IGJvb2xlYW4gYiA9IEJvb2xlYW4uVFJVRS5ib29sZWFuVmFsdWUoKTtcbiIgKyAKKwkJCSIgICAg
bmV3IEJhcihiID8gMCA6IG5ldyBBcnJheUxpc3Q8PigpKTtcbiIgKyAKKwkJCSIgIH1cbiIgKyAK
KwkJCSIgIHByaXZhdGUgc3RhdGljIGNsYXNzIEJhciB7XG4iICsgCisJCQkiCSAgcHVibGljIEJh
cihDb2xsZWN0aW9uPFN0cmluZz4gY29sKSB7IH1cbiIgKyAKKwkJCSIgIH1cbiIgKyAKKwkJCSJ9
IgorCQl9LAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBs
aW5lIDkpXG4iICsgCisJCSIJbmV3IEJhcihiID8gMCA6IG5ldyBBcnJheUxpc3Q8PigpKTtcbiIg
KyAKKwkJIgleXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCSJUaGUg
Y29uc3RydWN0b3IgWC5CYXIoKGIgPyAwIDogbmV3IEFycmF5TGlzdDw+KCkpKSBpcyB1bmRlZmlu
ZWRcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjIuIEVSUk9SIGluIFguamF2YSAoYXQg
bGluZSA5KVxuIiArIAorCQkiCW5ldyBCYXIoYiA/IDAgOiBuZXcgQXJyYXlMaXN0PD4oKSk7XG4i
ICsgCisJCSIJICAgICAgICAgICAgXlxuIiArIAorCQkiVHlwZSBtaXNtYXRjaDogY2Fubm90IGNv
bnZlcnQgZnJvbSBpbnQgdG8gQ29sbGVjdGlvbjxTdHJpbmc+XG4iICsgCisJCSItLS0tLS0tLS0t
XG4iICsKKwkJIjMuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA5KVxuIiArIAorCQkiCW5ldyBC
YXIoYiA/IDAgOiBuZXcgQXJyYXlMaXN0PD4oKSk7XG4iICsgCisJCSIJICAgICAgICAgICAgICAg
IF5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVy
dCBmcm9tIEFycmF5TGlzdDxPYmplY3Q+IHRvIENvbGxlY3Rpb248U3RyaW5nPlxuIiArIAorCQki
LS0tLS0tLS0tLVxuIiArCisJCSI0LiBXQVJOSU5HIGluIFguamF2YSAoYXQgbGluZSAxMilcbiIg
KyAKKwkJIglwdWJsaWMgQmFyKENvbGxlY3Rpb248U3RyaW5nPiBjb2wpIHsgfVxuIiArIAorCQki
CSAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5cbiIgKyAKKwkJIlRoZSBjb25zdHJ1
Y3RvciBYLkJhcihDb2xsZWN0aW9uPFN0cmluZz4pIGlzIG5ldmVyIHVzZWQgbG9jYWxseVxuIiAr
IAorCQkiLS0tLS0tLS0tLVxuIik7Cit9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FsbG9j
YXRpb25FeHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FsbG9jYXRpb25FeHByZXNzaW9uLmph
dmEKaW5kZXggYzEwMmZhNy4uMDE5YWQ4MSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BbGxvY2F0
aW9uRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24u
amF2YQpAQCAtNzI1LDYgKzcyNSwxMCBAQAogCXJldHVybiB0aGlzLmJpbmRpbmc7CiB9CiBwdWJs
aWMgVHlwZUJpbmRpbmcgY2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRUeXBlKFR5cGVCaW5kaW5nIHRh
cmdldFR5cGUsIFNjb3BlIHNjb3BlKSB7CisJaWYgKHRoaXMuYmluZGluZyA9PSBudWxsICYmIHRo
aXMuc3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlICE9IG51bGwgJiYgIXRoaXMuc3VzcGVuZGVkUmVz
b2x1dGlvblN0YXRlLmhhc1JlcG9ydGVkRXJyb3IpIHsKKwkJLy8gQXR0ZW1wdCB0byByZXNvbHZl
IGhhbGYgcmVzb2x2ZWQgZGlhbW9uZAorCQlyZXNvbHZlUGFydDIodGhpcy5zdXNwZW5kZWRSZXNv
bHV0aW9uU3RhdGUpOworCX0KIAkvLyBjb25mZXIgTWVzc2FnZVNlbmQuY2hlY2tBZ2FpbnN0Rmlu
YWxUYXJnZXRUeXBlKCwsKToKIAlpZiAodGhpcy5iaW5kaW5nIGluc3RhbmNlb2YgUGFyYW1ldGVy
aXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7CiAJCUluZmVyZW5jZUNvbnRleHQxOCBjdHggPSBn
ZXRJbmZlcmVuY2VDb250ZXh0KChQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZykgdGhpcy5iaW5k
aW5nKTs=
</data>

          </attachment>
      

    </bug>

</bugzilla>