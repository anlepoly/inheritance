<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>426537</bug_id>
          
          <creation_ts>2014-01-24 01:26:00 -0500</creation_ts>
          <short_desc>[1.8][inference] Eclipse compiler thinks I&lt;? super J&gt; is compatible with I&lt;J&lt;?&gt;&gt; - raw type J involved</short_desc>
          <delta_ts>2014-12-10 00:37:19 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P4</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.5 M4</target_milestone>
          
          <blocked>448791</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Jay Arthanareeswaran">jarthana</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>hjohn</cc>
    
    <cc>jarthana</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="61844"
          type_id="1"
          status="+"
          setter="jarthana"
    />
    <flag name="review"
          id="61845"
          type_id="1"
          status="+"
          setter="stephan.herrmann"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2353967</commentid>
    <comment_count>0</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-01-24 01:26:55 -0500</bug_when>
    <thetext>This is the test code:

public class X {
	void foo(J[] list, I&lt;J&lt;?&gt;&gt; i) {
		sort(list, i);
	}
	
	&lt;T&gt; T[] sort(T[] list, I&lt;? super T&gt; i) {
		return list;
	}
}
interface I&lt;T&gt; {}
interface J&lt;T&gt; {}

The invocation sort(list, i) should be reported but not.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2353968</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-24 01:35:46 -0500</bug_when>
    <thetext>works in 1.7- modes.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2353969</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-24 01:38:56 -0500</bug_when>
    <thetext>JDK1.5, 1.6 compile this code while 1.7 and 1.8 reject it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2356553</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-30 07:43:00 -0500</bug_when>
    <thetext>This example is not on safe grounds, since the &quot;J[]&quot; in foo&apos;s signature introduces the raw type J into inference, and we know that raw types cause grief in type inference.

Here&apos;s how we infer:

From the 1st argument we reduce:
  TypeBound T#0 :&gt; J

The 2nd argument produces this constraint and a chain of reductions:
  I&lt;J&lt;?&gt;&gt;  I&lt;? super T#0&gt;
  I&lt;J&lt;?&gt;&gt; &lt;: I&lt;? super T#0&gt;
  J&lt;?&gt; &lt;= ? super T#0
  T#0 &lt;: J&lt;?&gt;
  TypeBound T#0 &lt;: J&lt;?&gt;

During incorporation we produce one more interesting constraint: 
  J &lt;: J&lt;?&gt;
Based on RawTypeBinding.isEquivalentTo(..) we reduce to TRUE. From there we infer in a straight-forward manner that T = J#RAW.

We furthermore assume that whenever invocation applicability inference answers true, the given method is indeed applicable for the given arguments. In parameterCompatibilityLevel18() we trust inference rather than doing our own argument.isCompatibleWith(parameter) check, because in many cases this check wouldn&apos;t be able to give a meaningful answer (all poly expressions to start with), and even the given argumentTypes may not be final, actually.

How could we possibly raise the same error as javac?
(1) Change RawTypeBinding.isEquivalentTo()
(2) Do not trust inference but do additional isCompatibleWith checks

For (1) I predict a landslide of regressions, not very compelling.
Even experiments towards (2) indicate several regressions, which I&apos;d prefer to avoid at this point.


Note that javac 8 accepts the example as soon as you add a &lt;?&gt; to avoid the raw type J! From this analysis I wouldn&apos;t see this as a high-priority task, we might even close as WONTFIX.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2357144</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-31 08:00:16 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #3)

&gt; Note that javac 8 accepts the example as soon as you add a &lt;?&gt; to avoid the
&gt; raw type J! From this analysis I wouldn&apos;t see this as a high-priority task,
&gt; we might even close as WONTFIX.

Let us not close this as WONTFIX, at least not yet. An investigable (did I invent
that word ?) item could be to find out why ECJ would reject this in 1.7- modes.
What chain of reasoning leads the compiler to reject it and where we deviate.

If according to strict interpretation of the spec, this must be rejected, then
let us check with the RI engineers on javac behavior.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2357191</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-31 09:10:25 -0500</bug_when>
    <thetext>Coordinating among compiler implementations (javac and ecj_1.7) is certainly a good idea. 

I just wasn&apos;t very confident that raising this issue at the *EG* would yield an actionable answer, because handling of raw types has its own logic in the implementation, which is sometimes beyond the control of the EG :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2360672</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-09 06:13:10 -0500</bug_when>
    <thetext>Stephan, let us try a direct implementation of 4.10.1, 4.10.2 and 4.10.3 and
see how that fairs.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2362627</commentid>
    <comment_count>7</comment_count>
      <attachid>239888</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-12 21:09:45 -0500</bug_when>
    <thetext>Created attachment 239888
work in progress

This is getting tricky ...

I&apos;m dumping my current status which succeeds to resolve this bug for the price of a few changed results in other tests.

It would be cool if s.o. find the time to
- look at the &quot;regressions&quot; to see if those are actually bad or good changes
- test the patch against any other code base, e.g., JDK sources


What&apos;s happening here:

I indeed wrote a new family of methods as TypeBinding.isSubtypeOf() to implement a stricter checking than isCompatibleWith().
While findSuperTypeOriginatingFrom() provided a good starting point for &quot;normal&quot; reference bindings, many cases are not covered by that, so I started adding treatment for several subclasses of RB. This should be very close to the spec, but I haven&apos;t checked for completeness yet.

This new method is hooked into the inference at exactly one location currently: in ConstraintTypeFormula.reduceSubType().

While testing this I found several issues inside the inference proper: incomplete handling of intersection types, inability to correctly infer the type of A&lt;X&gt;::new (I quite freely interpret the spec to fix this), 

Other tests affected:

GTT.test1349(): new error reported at line 4:
The method method(X&lt;T&gt;, T) in the type Scratch is not applicable for the arguments (X&lt;Y&lt;Z&gt;&gt;, Y) 

GTT.test1430(): new error reported at line 4:
The method m(Foo&lt;T&gt;, T) in the type X is not applicable for the arguments (Foo&lt;Foo&lt;Integer&gt;&gt;, Foo)

MVT.test094(): secondary error at line 9:
Type mismatch: cannot convert from List&lt;Y&gt; to Collection&lt;? extends Y&lt;X&gt;&gt;
(We already report &quot;is not applicable&quot; against the same invocation).


There seems to be a connection between the two &quot;regressions&quot; in GTT and my efforts to mimic the javac bug JDK_8026527. Not sure if this is a game we can possibly win. For experimentation you may want to toggle IC18.ARGUMENT_CONSTRAINTS_ARE_SOFT, to see the two tests in GTT go back to normal (while others start to fail of course) - but then the patch doesn&apos;t actually fix this current bug...

To fix this bug we must do stricter checking, to be compatible with javac regarding the GTT tests, we must keep the more lenient checking. Any ideas, where to draw the line, i.e., how to distinguish those cases?

Maybe I&apos;m just no longer seeing the obvious ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2362755</commentid>
    <comment_count>8</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-02-13 05:21:33 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #7)
&gt; It would be cool if s.o. find the time to
&gt; - look at the &quot;regressions&quot; to see if those are actually bad or good changes
&gt; - test the patch against any other code base, e.g., JDK sources

I don&apos;t know if this is part of the list you just made, but with this patch, I am seeing (just) one additional error with JRE&apos;s source. There are about 7 errors all of the same kind and happen to be in the same file (Collectors.java, line 836)

Type mismatch: cannot convert from Collector&lt;capture#38-of ? super T &amp; capture#40-of ? super T,?,Map&lt;capture#39-of ? extends K,D&gt;&gt; to Collector&lt;T,?,Map&lt;K,D&gt;&gt;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2362806</commentid>
    <comment_count>9</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-13 07:03:33 -0500</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #8)
&gt; (In reply to Stephan Herrmann from comment #7)
&gt; &gt; It would be cool if s.o. find the time to
&gt; &gt; - look at the &quot;regressions&quot; to see if those are actually bad or good changes
&gt; &gt; - test the patch against any other code base, e.g., JDK sources
&gt; 
&gt; I don&apos;t know if this is part of the list you just made, but with this patch,
&gt; I am seeing (just) one additional error with JRE&apos;s source. There are about 7
&gt; errors all of the same kind and happen to be in the same file
&gt; (Collectors.java, line 836)
&gt; 
&gt; Type mismatch: cannot convert from Collector&lt;capture#38-of ? super T &amp;
&gt; capture#40-of ? super T,?,Map&lt;capture#39-of ? extends K,D&gt;&gt; to
&gt; Collector&lt;T,?,Map&lt;K,D&gt;&gt;

Thanks for testing.

Unfortunately it doesn&apos;t match with what I see: compiling java.util.stream.Collectors from source gives the same (single) error with and without the patch in this bug:

1. ERROR in /tmp/jre/java/util/stream/Collectors.java (at line 716)
        OptionalBox::new, OptionalBox::accept,
        ^^^^^^^^^^^^^^^^
No enclosing instance of the type Collectors is accessible in scope

I&apos;m at 1.8.0-b126 (where Collectors has no code at line 836 :) )</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2362824</commentid>
    <comment_count>10</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-13 07:32:14 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #7)
&gt; GTT.test1349(): new error reported at line 4:
&gt; The method method(X&lt;T&gt;, T) in the type Scratch is not applicable for the
&gt; arguments (X&lt;Y&lt;Z&gt;&gt;, Y) 


Details:
javac : 1 error
ecj with this patch: 2 errors, additional one is at line 4:
The method method(X&lt;T&gt;, T) in the type Scratch is not applicable for the arguments (X&lt;Y&lt;Z&gt;&gt;, Y) 

javac6 actually did report this error, too, but not javac7 nor javac8.

Reduction checks if 
   Y#RAW &lt;: Y&lt;Z&gt;
With old check using isCompatibleWith() we say &apos;yes&apos;, with correct check using isSubtypeOf() we say &apos;no&apos; -&gt; inference immediately fails.

Note that the opposite is true as per JLS 4.10.2:
   Y&lt;Z&gt; &lt;: Y#RAW

Such incorrect use of unchecked conversions is the exact subject of https://bugs.openjdk.java.net/browse/JDK-8026527 which we already try to mimic, by allowing softer checks for exactly those constraints that are derived from type variable bounds.

The only bound we get from type variable bounds is
  T#0 &lt;: j.l.Object
None of the interesting constraints are soft and hence strict checking is mandated for the above constraint.

Ergo: the javac bug doesn&apos;t obey the boundaries recommended by Dan.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2362827</commentid>
    <comment_count>11</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-13 07:38:45 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #7)
&gt; GTT.test1430(): new error reported at line 4:
&gt; The method m(Foo&lt;T&gt;, T) in the type X is not applicable for the arguments
&gt; (Foo&lt;Foo&lt;Integer&gt;&gt;, Foo)

Exact same situation as elaborated for test1349()

javac6: error, javac7 &amp; javac8 : no error

Reduction of a non-soft constraint:
  Foo#RAW &lt;: Foo&lt;java.lang.Integer&gt;

No indication why that constraint should be soft.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2362918</commentid>
    <comment_count>12</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-02-13 09:49:45 -0500</bug_when>
    <thetext>Something to do with helping with adding generics to libraries? The javac7/8 behavior allows pre-generics code to continue compiling against a generified library like it was still written using raw types. So you can update a library without having to rewrite the code calling it provided your code only uses type facilities that get erased at runtime (and the previously implied types didn&apos;t get changed in the meantime).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2362926</commentid>
    <comment_count>13</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-02-13 09:55:32 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #9)
&gt; I&apos;m at 1.8.0-b126 (where Collectors has no code at line 836 :) )

Looks like we are testing something that&apos;s rapidly changing. I was looking at b128 and Srikanth also reported differing line numbers with b129.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2362941</commentid>
    <comment_count>14</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-13 10:21:08 -0500</bug_when>
    <thetext>(In reply to Timo Kinnunen from comment #12)
&gt; Something to do with helping with adding generics to libraries? The javac7/8
&gt; behavior allows pre-generics code to continue compiling against a generified
&gt; library like it was still written using raw types. So you can update a
&gt; library without having to rewrite the code calling it provided your code
&gt; only uses type facilities that get erased at runtime (and the previously
&gt; implied types didn&apos;t get changed in the meantime).

Well, this sounds like the original motivation for supporting raw types in the first place. 10 years after adding generics to the language there are tendencies to no longer accept *some code patterns* as compatible, if the &quot;compatibility&quot; is *based on unsound assumptions*.

The spec has its rules where to accept compatibility with raw types. Javac has other rules to accept more code patterns, which is a known bug in javac. Just the exact extent of this bug is tremendously difficult to grasp.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2362957</commentid>
    <comment_count>15</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-13 10:36:25 -0500</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #13)
&gt; (In reply to Stephan Herrmann from comment #9)
&gt; &gt; I&apos;m at 1.8.0-b126 (where Collectors has no code at line 836 :) )
&gt; 
&gt; Looks like we are testing something that&apos;s rapidly changing. I was looking
&gt; at b128 and Srikanth also reported differing line numbers with b129.

Wow, I thought they&apos;re stabilizing their release candidates? :)

Using b129 still all I see against Collectors is:

        OptionalBox::new, OptionalBox::accept,
        ^^^^^^^^^^^^^^^^
No enclosing instance of the type Collectors is accessible in scope

Let me know if you still see another error.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2362961</commentid>
    <comment_count>16</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-13 10:40:46 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #15)

&gt; Using b129 still all I see against Collectors is:
&gt; 
&gt;         OptionalBox::new, OptionalBox::accept,
&gt;         ^^^^^^^^^^^^^^^^
&gt; No enclosing instance of the type Collectors is accessible in scope
&gt; 
&gt; Let me know if you still see another error.

Per https://bugs.eclipse.org/bugs/show_bug.cgi?id=427787#c7, I think 
Jay is testing with org.eclipse.jdt.core.compiler.storeAnnotations=enabled.
Is that also what you are doing ? 

(we need to eventually test with &amp; without this option, so both TypeSystem
and AnnotatableTypeSystem get exercised properly)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2362981</commentid>
    <comment_count>17</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-13 11:03:17 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #16)
&gt; (In reply to Stephan Herrmann from comment #15)
&gt; 
&gt; &gt; Using b129 still all I see against Collectors is:
&gt; &gt; 
&gt; &gt;         OptionalBox::new, OptionalBox::accept,
&gt; &gt;         ^^^^^^^^^^^^^^^^
&gt; &gt; No enclosing instance of the type Collectors is accessible in scope
&gt; &gt; 
&gt; &gt; Let me know if you still see another error.
&gt; 
&gt; Per https://bugs.eclipse.org/bugs/show_bug.cgi?id=427787#c7, I think 
&gt; Jay is testing with org.eclipse.jdt.core.compiler.storeAnnotations=enabled.
&gt; Is that also what you are doing ? 

No, I wasn&apos;t, since for simplicity I used the batch compiler on the linux command line ... sorry

But saying on the commandline &quot;-properties prefs&quot; where prefs is a file with the above line, should achieve the same, shouldn&apos;t it? Still no additional error ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2363115</commentid>
    <comment_count>18</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-02-13 14:44:15 -0500</bug_when>
    <thetext>(In reply to comment #14)

&gt; Well, this sounds like the original motivation for supporting raw types in the
&gt; first place. 10 years after adding generics to the language there are tendencies
&gt; to no longer accept *some code patterns* as compatible, if the &quot;compatibility&quot;
&gt; is *based on unsound assumptions*.

Without enforced checking in place the question of what was or shouldn&apos;t have been and still is sound or should be is quite nebulous :)
A generified version of:
  public static void lineOutputter1(Vector arg) {
    for(Enumeration en = arg.elements(); en.hasMoreElements();) { System.out.println(en.nextElement()); }
  }
would have to be something like:
  public static &lt;T extends Iterable&lt;String&gt;&gt; void lineOutputter2(T arg) {
    for(Object s : arg) { // no check for String in original
      System.out.println(s);
    }
  }

Who&apos;s to say where the line between an API contract and an informal understanding used to be drawn...

&gt; The spec has its rules where to accept compatibility with raw types. Javac has
&gt; other rules to accept more code patterns, which is a known bug in javac. Just
&gt; the exact extent of this bug is tremendously difficult to grasp.

Based on the examples from this bug and the javac bug reports, I would summarize thusly the principles that are guiding javac&apos;s behavior:

     If you demonstrate knowing that some type has type parameters and you can give it some type parameters, then you have to use the parameters correctly or not at all.
     If you have mentioned two types and then use them in a way that reveals they both include the same type, then that type has to be written consistently everywhere it is mentioned unless one of the mentions is raw in which case the other can be considered raw too.

- Dan&apos;s first example with this.&lt;Iterable&gt;m(rawIterable);
I think this is allowed to remain consistent with casting to choose between overloaded methods, but this one I&apos;m least sure about. 

- Second example with m(rawIterable);
This is classic raw argument method call that matches the erased parameter type. This has to be accepted because there&apos;s no way to obtain an erased version of the method that can be called with a raw argument otherwise!

- Third example with C&lt;Iterable&gt; c1 = null;
Here the code demonstrates knowing about the type parameters in C, but only goes part of the way. The code may not know if Iterable is generic or not, but it knows C is so it can make that part right. Note that it&apos;s still possible to use a raw Iterable with a C instance, you just have to shed C (here Snippet2) of its type parameters:

  public static void test4(Iterable rawIterable) {
    Snippet2&lt;Iterable&lt;String&gt;&gt; snippet = new Snippet2&lt;&gt;();
    test4part2(rawIterable, snippet);
  }
  private static void test4part2(Iterable rawIterable, Snippet2 snippet) { snippet.test(rawIterable); }

- In this bug report with void foo(J[] list, I&lt;J&lt;?&gt;&gt; i) { sort(list, i); }
I&apos;m going to say this is a javac bug. I guess javac is treating J[] as some sort of [Ljava/lang/Object;&lt;J&gt; type and thinking you&apos;re trying to erase it partially, that it should be [Ljava/lang/Object;&lt;J&lt;?&gt;&gt; or something, but this is wrong because arrays are strongly typed. Object[] is not an erased version of J[]. Adding a cast makes the code acceptable to javac, but that only adds a checkcast against the type the array already is. Completely pointless.

If the test case is written like this then javac compiles it fine:

  void foo(J[] list, I&lt;J&lt;?&gt;&gt; i) {
    sort(list, i);
  }

  &lt;T&gt; J&lt;T&gt;[] sort(J&lt;T&gt;[] list, I&lt;? super J&lt;T&gt;&gt; i) {
    return list;
  }

(fingers crossed I didn&apos;t get too much of that too completely wrong)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2363835</commentid>
    <comment_count>19</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-15 17:51:15 -0500</bug_when>
    <thetext>Timo, thanks for weighing in. Unfortunately, I&apos;m unable to connect your words to the spec which I have implemented.

Type inference is implemented as solving a set of constraints. Whenever these constraints mention T &lt;: S the strict interpretation yields false if you insert J for T and J&lt;X&gt; for S (for any X incl. ?). IOW, a raw type is never the subtype of a parameterized version of that type (compatibility could theoretically be achieved by unchecked conversion, but we are not interested in compatibility, we need subtyping).

Now we know that javac disregards this fact - in certain situations.

To describe the set of situations, Dan has in a prior post suggested to mark some constraints as &quot;soft&quot;, viz. those constraints that are derived from the bounds of a type variable which we are currently inferring. Admitting the wrong &apos;compatibility&apos; for these constraints and all we derive from them has brought us much much closer to javac.

The puzzlement in this bug results from the fact, that this same rule-of-thumb given by Dan is sometimes right and sometimes wrong.

During inference we have simply no idea what originally created a specific constraint. Yet, that&apos;s when we have to decide to evaluate the constraint in strict or bug-compatible way.

I suspect that javac implements some checking that is quite disconnected from the spec, and hence it may not even be possible to exactly capture those semantics in the framework of the spec. In the worst case the best possible description of that behavior is the source code of javac, which I cannot look at.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2363840</commentid>
    <comment_count>20</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-15 19:02:06 -0500</bug_when>
    <thetext>After porting my patch on top of current HEAD here are additional errors I see when compiling the JRE8:

----------
15. ERROR in /tmp/jre/java/util/stream/Collectors.java (at line 967)
        return groupingByConcurrent(classifier, ConcurrentHashMap::new, toList());
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Type mismatch: cannot convert from Collector&lt;capture#54-of ? super T,?,ConcurrentMap&lt;capture#55-of ? extends K,List&lt;Object&gt;&gt;&gt; to Collector&lt;T,?,ConcurrentMap&lt;K,List&lt;T&gt;&gt;&gt;
----------
16. ERROR in /tmp/jre/java/util/stream/Collectors.java (at line 1008)
        return groupingByConcurrent(classifier, ConcurrentHashMap::new, downstream);
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Type mismatch: cannot convert from Collector&lt;capture#57-of ? super T &amp; capture#59-of ? super T,?,ConcurrentMap&lt;capture#58-of ? extends K,D&gt;&gt; to Collector&lt;T,?,ConcurrentMap&lt;K,D&gt;&gt;
----------
17. ERROR in /tmp/jre/java/util/stream/Collectors.java (at line 1375)
        return toConcurrentMap(keyMapper, valueMapper, throwingMerger(), ConcurrentHashMap::new);
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Type mismatch: cannot convert from Collector&lt;capture#98-of ? super T &amp; capture#100-of ? super T,?,ConcurrentMap&lt;capture#99-of ? extends K,capture#101-of ? extends U&gt;&gt; to Collector&lt;T,?,ConcurrentMap&lt;K,U&gt;&gt;
----------
18. ERROR in /tmp/jre/java/util/stream/Collectors.java (at line 1429)
        return toConcurrentMap(keyMapper, valueMapper, mergeFunction, ConcurrentHashMap::new);
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Type mismatch: cannot convert from Collector&lt;capture#102-of ? super T &amp; capture#104-of ? super T,?,ConcurrentMap&lt;capture#103-of ? extends K,U&gt;&gt; to Collector&lt;T,?,ConcurrentMap&lt;K,U&gt;&gt;
----------

I&apos;ll take a look.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2363850</commentid>
    <comment_count>21</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-15 20:48:55 -0500</bug_when>
    <thetext>see bug 428220 comment 3</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2363852</commentid>
    <comment_count>22</comment_count>
      <attachid>239987</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-15 20:53:04 -0500</bug_when>
    <thetext>Created attachment 239987
patch updated for current HEAD

Since some of this patch has already been released, I updated the patch to match HEAD.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2363949</commentid>
    <comment_count>23</comment_count>
      <attachid>239999</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-16 10:04:52 -0500</bug_when>
    <thetext>Created attachment 239999
updated patch

Good news: after rebasing the patch on current HEAD the extra errors in Collectors.java seem to be gone :)

Only the two tests in GTT keep failing as analyzed above.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2364028</commentid>
    <comment_count>24</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-16 14:56:34 -0500</bug_when>
    <thetext>*** Bug 427957 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2364033</commentid>
    <comment_count>25</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-16 15:01:24 -0500</bug_when>
    <thetext>*** Bug 427992 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2371242</commentid>
    <comment_count>26</comment_count>
      <attachid>240507</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-04 10:29:59 -0500</bug_when>
    <thetext>Created attachment 240507
patch updated for current HEAD (2014/03/04)

(In reply to Stephan Herrmann from comment #23)
&gt; Created attachment 239999 [details]
&gt; updated patch

I did it again for today&apos;s HEAD
 
&gt; Good news: after rebasing the patch on current HEAD the extra errors in
&gt; Collectors.java seem to be gone :)

Bad news: this variant brings back the compile errors against Collectors :((

&gt; Only the two tests in GTT keep failing as analyzed above.

This part is unchanged.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2371279</commentid>
    <comment_count>27</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-04 11:03:44 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #26)
&gt; &gt; Good news: after rebasing the patch on current HEAD the extra errors in
&gt; &gt; Collectors.java seem to be gone :)
&gt; 
&gt; Bad news: this variant brings back the compile errors against Collectors :((

First result while trying to isolate a repro:

Errors are not reported when compiling Collectors.java in isolation.
Full build needed. I&apos;ll check which other classes need to be compiled from source, too...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2371297</commentid>
    <comment_count>28</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-04 11:33:11 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #27)
&gt; &gt; Bad news: this variant brings back the compile errors against Collectors :((

repro is:

interface C&lt;T, A, R&gt; {}

class MImpl&lt;K, V&gt; {}

interface S&lt;T&gt; { T get(); }

public class Test {
	static &lt;T, K, D&gt; C&lt;T, ?, MImpl&lt;K, D&gt;&gt; m1() {
        return m2(MImpl::new);
    }
    
    static &lt;T, K, D, M extends MImpl&lt;K, D&gt;&gt; C&lt;T, ?, M&gt; m2(S&lt;M&gt; s) {
    	return null;
    }
}

javac: OK
ecj: Type mismatch: cannot convert from C&lt;Object,?,MImpl&gt; to C&lt;T,?,MImpl&lt;K,D&gt;&gt;

Original message had some metions of captures, not sure if s.t. essential got lost during test case reduction ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2371303</commentid>
    <comment_count>29</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-04 11:44:45 -0500</bug_when>
    <thetext>In order to compile the repro, we must answer true to

  MImpl#RAW &lt;: MImpl&lt;K,D&gt;

which would be plain wrong. Prior to this patch we used isCompatibleWith and indeed answered true. Using isSubtypeOf() as mandated, we correctly get the undesired result ?!?


At this point we have preliminary indication that JRE8 might contain illegal code.

Checking our back lines I&apos;m checking now if that type constraint is correctly produced.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2371312</commentid>
    <comment_count>30</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-04 12:01:32 -0500</bug_when>
    <thetext>The RE &quot;MImpl:new&quot; has this #extactMethodBinding:

  PMG(&quot;void &lt;init&gt;()&quot;)
  - declaringClass = MImpl#RAW

Srikanth, is that expected? This seems to be the source of the unhappy raw type in the equation.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2371325</commentid>
    <comment_count>31</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-04 12:12:59 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #30)
&gt; The RE &quot;MImpl:new&quot; has this #extactMethodBinding:
&gt; 
&gt;   PMG(&quot;void &lt;init&gt;()&quot;)
&gt;   - declaringClass = MImpl#RAW
&gt; 
&gt; Srikanth, is that expected? This seems to be the source of the unhappy raw
&gt; type in the equation.

That indicates a missing piece of code. Types to the left of :: should not
be treated as raw types. In the case of ::new, diamond inference should kick
in to discover the parameterization. Which perhaps means the exact method binding
should be recomputed perhaps in findCompileTimeMethodTargeting.

Looking at all uses of exactMethodBinding, all but the one returned by
findCompileTimeMethodTargeting are existence checks - rawness should not
matter there.

For the callers of findCompileTimeMethodTargeting  (Inference), it is not
a question of existence alone.

I think similar treatment is required for method references too.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2371333</commentid>
    <comment_count>32</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-04 12:21:33 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #31)

&gt; I think similar treatment is required for method references too.

I think the &quot;treatment&quot; that is required is to find the parameterization
of the lhs diamond type that would be a subtype of the targetType value in
findCompileTimeMethodTargeting and compute the exact method binding afresh
on that parameterized type.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2371341</commentid>
    <comment_count>33</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-04 12:30:59 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #32)

&gt; I think the &quot;treatment&quot; that is required is to find the parameterization
&gt; of the lhs diamond type that would be a subtype of the targetType value in
&gt; findCompileTimeMethodTargeting and compute the exact method binding afresh
&gt; on that parameterized type.

This would involve walking up the super type chain - not mere transfer of
type arguments as even the arity may not match between lhstype and targetType.
I will share a version tomorrow.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2371345</commentid>
    <comment_count>34</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-04 12:33:25 -0500</bug_when>
    <thetext>(collision again :) sending anyway)

(In reply to Srikanth Sankaran from comment #31)
&gt; (In reply to Stephan Herrmann from comment #30)
&gt; &gt; The RE &quot;MImpl:new&quot; has this #extactMethodBinding:
&gt; &gt; 
&gt; &gt;   PMG(&quot;void &lt;init&gt;()&quot;)
&gt; &gt;   - declaringClass = MImpl#RAW
&gt; &gt; 
&gt; &gt; Srikanth, is that expected? This seems to be the source of the unhappy raw
&gt; &gt; type in the equation.
&gt; 
&gt; That indicates a missing piece of code. Types to the left of :: should not
&gt; be treated as raw types. In the case of ::new, diamond inference should kick
&gt; in to discover the parameterization. Which perhaps means the exact method
&gt; binding
&gt; should be recomputed perhaps in findCompileTimeMethodTargeting.

Sounds like s.t. worth investigating. Some quick observations:

- even ignoring the existing exactMethodBinding and going directly to internalResolveTentatively() gives the same method binding from a raw declaringClass.

- &quot;diamond inference should kick in&quot;: since all this happens *within* type inference, I&apos;d be hesitant to invent nested inference invocations.

- maybe computing a proper parameterization simply fails because the target type is not a proper type: &quot;S&lt;M#3&gt;&quot; where M#3 is an inference variable.

I keep looking ... I might have an idea actually ... mh ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2371348</commentid>
    <comment_count>35</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-04 12:38:30 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #31)
&gt; (In reply to Stephan Herrmann from comment #30)
&gt; &gt; The RE &quot;MImpl:new&quot; has this #extactMethodBinding:
&gt; &gt; 
&gt; &gt;   PMG(&quot;void &lt;init&gt;()&quot;)
&gt; &gt;   - declaringClass = MImpl#RAW
&gt; &gt; 
&gt; &gt; Srikanth, is that expected? This seems to be the source of the unhappy raw
&gt; &gt; type in the equation.
&gt; 
&gt; That indicates a missing piece of code. Types to the left of :: should not
&gt; be treated as raw types.

could it be the opposite? MImpl::new is *not* an exact method reference because:

&quot; A method reference of the form ClassType :: NonWildTypeArgumentsopt new is exact if it satisfies all of the following:

    The ClassType is not a raw type, or is a non-static member type of a raw type.
    ...&quot;

Not setting exactMethodBinding fixes the repro from comment 28 (although still not the full example in Collectors). The reason why this is a fix: for inexact method references we have all the desired nested inference in place :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2371358</commentid>
    <comment_count>36</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-04 12:52:17 -0500</bug_when>
    <thetext>One micro step forward: this little change in RE fixes the repro in comment 28 without new regressions:

        if (this.expectedType == null &amp;&amp; this.expressionContext == INVOCATION_CONTEXT) {
-               this.exactMethodBinding = isMethodReference() ? scope.getExactMethod(lhsType, this.selector, this) : scope.getExactConstructor(lhsType, this);
+               this.exactMethodBinding = isMethodReference()
+                               ? scope.getExactMethod(lhsType, this.selector, this) 
+                               : lhsType.isRawType() ? null : scope.getExactConstructor(lhsType, this);
                return new PolyTypeBinding(this);
                }
                super.resolveType(scope);</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2371465</commentid>
    <comment_count>37</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-04 16:19:30 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #35)
&gt; Not setting exactMethodBinding fixes the repro from comment 28 (although
&gt; still not the full example in Collectors). 

The reason why the repro and the original differed: in one place of the patch I use the innocent looking:
  reference.receiverType.typeArguments() == null
if receiverType is a raw type, the result depends on whether or not the raw type has been initialized, which happens at &quot;random&quot; times, which makes this check badly fragile.

By adding an explicit check for isRawType() I got back to a state where the patch allows to compile all of JRE8 without errors.

To be uploaded after some more testing and cleanup.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2371497</commentid>
    <comment_count>38</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-04 17:16:58 -0500</bug_when>
    <thetext>In an attempt to separate the safe bet from the undecided I released the bulk of the patch, which I believe to be good regardless of the final decision in this bug. Those changes fix issues that only surfaced while working on this, but aren&apos;t directly related. 

Tests and JRE8 compilation or green.

This commit also contains the latest on RE with rawtype lhs.

Released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=2d053de9651cebac3cf0a82f4012b7196ccb5c83</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2371505</commentid>
    <comment_count>39</comment_count>
      <attachid>240520</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-04 17:36:37 -0500</bug_when>
    <thetext>Created attachment 240520
remainder of the patch

This is what is left to decide about.

With this patch
 - JRE8 still compiles, yay!!
 - the example from comment 0 is flagged as desired
 - the 3 other tests mentioned in comment 7 now report more errors

GTT.test1349 (not counting the deliberate Zork error):
javac5 : 1 error
javac6+ : no errors
ecj : before: no error, with patch: 1 error

GTT.test1430 
javac8 : no errors
ecj : before: no errors, with patch: 1 error

MVT.test094 
javac8 : no errors
ecj : before: 1 error, with patch: 2 errors
-&gt; could be considered a harmless secondary error</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2371514</commentid>
    <comment_count>40</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-04 18:06:07 -0500</bug_when>
    <thetext>Finally I tried to squeeze the last bit of information out of those test cases to see, if we could distinguish them in some way for special treatment:

The name of the game is: can we find a rule for marking specific constraints as soft, allowing us to use isCompatibleWith instead of isSubtypeOf?

GTT.test1349: variable rawObject of type Y#RAW is passed as a method argument. For method arguments, Dan&apos;s advice was to *not* consider the resulting constraints as soft. This advice helped fixing many deviations ecj&lt;-&gt;javac.

GTT.test1430: expression new Foo() of type Foo#RAW is passed as a method argument. Same reasoning as above.

Once we have subtype constraint &quot;X#RAW &lt;: something&quot; we have no control, what other constraints are created from that until we end up with &quot;X#RAW &lt;: X&lt;T&gt;&quot;, which is false in strict checking.


The last hypothesis I can think of: javac might be creating a semi-soft constraint when it sees an argument matched against an array type.
Semi-soft would mean:
- don&apos;t allow raw types to match as type arguments (type argument containment)
- allow weak checking (isCompatibleWith) in subtype constraints.
Do we have any indications that arrays should produce less strict rules??



I have no clue, if / how this could make any sense and is a behavior worth copying, I&apos;m just *guessing* the crude decisions javac might be making..</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2371515</commentid>
    <comment_count>41</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-04 18:12:53 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #40)
&gt; The last hypothesis I can think of: javac might be creating a semi-soft
&gt; constraint when it sees an argument matched against an array type.
&gt; Semi-soft would mean:
&gt; - don&apos;t allow raw types to match as type arguments (type argument
&gt; containment)
&gt; - allow weak checking (isCompatibleWith) in subtype constraints.
&gt; Do we have any indications that arrays should produce less strict rules??

Oops, I got inverted logic here: the test in this bug uses arrays and requires strict checking - the other ones have array-less type matching and require lenient checking.

I give up.

I cannot see a sane pattern in this.

We just have to decide one bug against another.

Rejecting more (i.e., with this patch) is closer to the spec.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2371578</commentid>
    <comment_count>42</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-05 00:12:34 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #35)
&gt; (In reply to Srikanth Sankaran from comment #31)
&gt; &gt; (In reply to Stephan Herrmann from comment #30)
&gt; &gt; &gt; The RE &quot;MImpl:new&quot; has this #extactMethodBinding:
&gt; &gt; &gt; 
&gt; &gt; &gt;   PMG(&quot;void &lt;init&gt;()&quot;)
&gt; &gt; &gt;   - declaringClass = MImpl#RAW
&gt; &gt; &gt; 
&gt; &gt; &gt; Srikanth, is that expected? This seems to be the source of the unhappy raw
&gt; &gt; &gt; type in the equation.
&gt; &gt; 
&gt; &gt; That indicates a missing piece of code. Types to the left of :: should not
&gt; &gt; be treated as raw types.
&gt; 
&gt; could it be the opposite? MImpl::new is *not* an exact method reference
&gt; because:
&gt; 
&gt; &quot; A method reference of the form ClassType :: NonWildTypeArgumentsopt new is
&gt; exact if it satisfies all of the following:
&gt; 
&gt;     The ClassType is not a raw type, or is a non-static member type of a raw
&gt; type.
&gt;     ...&quot;

Sorry, I missed this late introduction to the spec, I am pretty sure this is
a late introduction that falls in the bucket, let us move what javac is doing
into the spec.

Thanks for catching this and releasing the fix pertinent to this part,
though it would have been better to have for the rest of the pieces developed
a comprehensive strategy and then released - but never mind, we can do time
travel if required.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2371833</commentid>
    <comment_count>43</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-05 09:21:52 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #42)
&gt; Thanks for catching this and releasing the fix pertinent to this part,
&gt; though it would have been better to have for the rest of the pieces developed
&gt; a comprehensive strategy and then released - but never mind, we can do time
&gt; travel if required.

Sorry if this looks like I&apos;m jumping to a conclusion before having the discussion. I released that part in confidence that those fixes are required independent of the discussion in this bug. 
Splitting the patch should also point exactly at the single tiny change that remains in  attachment 240520: implementationwise that&apos;s all we&apos;re discussing here :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372363</commentid>
    <comment_count>44</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-06 07:14:02 -0500</bug_when>
    <thetext>*** Bug 427957 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372365</commentid>
    <comment_count>45</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-06 07:19:46 -0500</bug_when>
    <thetext>I have very small safe fix for this under test.

Basically: Scope.parameterCompatibilityLevel18 there is an assumption 
captured by this comment:

// inference is responsible, no need to recheck

That is where the trouble originates. I don&apos;t have the explanation for the
subtleties involved, but I see that JLS7 engine also succeeds in solving
the type equations and computes the same PGMB as JLS8 engine. The method is
discarded subsequently.

Reinstating similar behavior for JLS8 engine code path solves the problem.

Patch will follow shortly.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373329</commentid>
    <comment_count>46</comment_count>
      <attachid>240678</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-08 04:34:30 -0500</bug_when>
    <thetext>Created attachment 240678
Point fix

This patch 

    - Fixes and includes tests for the problems in 
      https://bugs.eclipse.org/bugs/show_bug.cgi?id=426537,
      https://bugs.eclipse.org/bugs/show_bug.cgi?id=427957 and
      https://bugs.eclipse.org/bugs/show_bug.cgi?id=427992
    - Is conservative and of a point fix nature rather than a generalized
      solution which will have to come later - comments in MessageSend talk
      about the complexities that must be tackled for a general fix.
    - Passes all JDT/Core tests
    - JRE8 builds fine
    - Eclipse SDK bootstrap builds are fine.
    - Includes an escape hatch (preference) to flip behavior.
    - Includes a test that proves the escape hatch works fine.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373330</commentid>
    <comment_count>47</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-08 04:36:29 -0500</bug_when>
    <thetext>Stephan &amp; Jay, please review.

Jay, please pre-verify: My plan is to release this patch, but not resolve
the bug, but retarget it for 4.4 so a general solution can be investigated.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373355</commentid>
    <comment_count>48</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-08 08:18:30 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #46)
&gt; Created attachment 240678 [details]
&gt; Point fix

I&apos;ll split my review into a technical part and a &quot;political&quot; note, this part is about the purely technical side.

The point fix succeeds to detect the exact situation that discriminates this bug from all the rest. No existing test in our test suite nor compiling JRE8 from sources ever hits the single line of effect in the patch. This is a significant achievement.

I also agree about the shyness of the fix, i.e., abandoning the additional checks whenever s.t. is seen which we cannot fully handle (notably: captures). By continuing only when none of these uncertainties are at play, the patch avoids unpredictable results, good.

It&apos;s also reassuring to see that we correctly answer false to this question:
  &quot;I&lt;J&lt;?&gt;&gt;&quot; isCompatibleWith &quot;I&lt;? super J#RAW&gt;&quot;
the &quot;false&quot; answer coming from this detail question:
  is argument &quot;J&lt;?&gt;&quot; contained by &quot;? super J#RAW&quot;
i.e., no indication that we have a general bug in computing compatibility.


By comparison: inference never asks the above questions, because the problem is split into atomic constraints like:
  J#RAW &lt;: J&lt;?&gt;
which gives too little context to discern the situations where we &quot;want&quot; to answer yes vs. no.


The location of the fix is suitable, as it marks the point where resolution of this message send is done wrt. both method lookup and setting resolved argument types according to the inference solution. Still a tiny chance exists that this is earlier than desired; protection would be still stronger if we add

  InferenceContext18 ctx = getInferenceContext(pgmb);
  if (ctx == null || ctx.stepCompleted &lt; InferenceContext18.BINDINGS_UPDATED)
      return;

This could make a difference when this code kicks in against an inner inference whose outer is not yet done. If we actually end up keeping this patch permanently, I suggest to consider moving it into resolvePolyExpressionArguments() at a point close to the end, where we&apos;re past the corresponding check for stepCompleted. Also in case we keep the patch: it shouldn&apos;t be necessary to compute finalArgumentTypes, the current state of argumentTypes should reflect exactly what we need - this is more an optimization than a correctness issue.


Between leaving the patch as is, and moving it to a different location I suggest to insert the above stanza about stepCompleted, to rule out we are rejecting s.t. only based on the unfinished nature of intermediate inference results.


That said, the patch looks good to me: it achieves the desired outcome and I can see no particular risk associated with this solution.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373357</commentid>
    <comment_count>49</comment_count>
      <attachid>240680</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-08 08:24:02 -0500</bug_when>
    <thetext>Created attachment 240680
pointfix with addition suggested in my review

For your convenience: this is the variant the I suggest for release.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373358</commentid>
    <comment_count>50</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-08 08:32:57 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #49)
&gt; Created attachment 240680 [details]
&gt; pointfix with addition suggested in my review
&gt; 
&gt; For your convenience: this is the variant the I suggest for release.

Thanks for the review and the amendments - Jay, please review/test this patch.
Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373367</commentid>
    <comment_count>51</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-08 09:28:46 -0500</bug_when>
    <thetext>Now for the &quot;political&quot; side - not relevant for immediate actions.

Part of my motivation when implementing the new type inference was: compete with the javac team to produce the compiler that is closest to the spec. I believe this is healthy for the entire Java community, because this competition is a good means for reducing the impact of accidental idiosyncrasies in a compiler implementation. As a result, users can be more certain that the answers given by a compiler really express whether or not a given program is legal Java, vs. just what one implementation believes to be legal. See competition as a means to reduce dependence on one particular vendor.

Certainly both compilers have bugs, and each deviation between compilers calls for scrutiny to find out if our compiler might have a bug at play. After some arguing that our compiler were correct, the bug has been detected and the patch from comment 39 would be its fix.

Unfortunately, that patch is only &quot;correct&quot; but not &quot;appropriate&quot;, because it creates other deviations from javac behavior. Analysis of these deviations may not be complete at this point, I&apos;m leaning towards seeing these as a bug in javac not ecj, but until a bug on either side has been identified, this statement must be taken with a grain of salt.

Personally, I would have preferred to release the patch in comment 39 and pass the ball to the javac team to ask if they have justification for the newly found deviations. I could and should have triggered that discussion. Too bad I didn&apos;t find the time.

In all our treatment of raw types during type inference, we are already much closer to the actual behavior of javac than to the spec. Early in November 2013 we received answer that the javac team decided not to fix their major known bug in this area, due to &quot;a consensus that this is far too risky to cram late into 8&quot;. If November was too late, what does that mean for us and today? We already have sophisticated code in place for the sole purpose of imitating that bug, but it turns out, nobody can even describe that bug in a precise enough way so that it can be truthfully imitated by another implementation. 

At this point I believe we should take pride in deviating from javac, rather than being ashamed about it. I believe our current strategy defeats the purpose of competition and should be reverted soon. It deem it unfortunate, that the javac team didn&apos;t have the courage to let Java 8 be the landmark, where programs that where erroneously accepted by previous compilers are now correctly rejected. After release of Java 8 things get only more difficult to repair, not easier.

Back to the issue at hand, I&apos;d like to comment on this notice in the patch: &quot;There are embedded assumptions in the JLS8 type inference scheme that a successful solution of the type equations results in an applicable method. This appears to be a tenuous assumption, ...&quot;

This assumption was tenuous with regard to our implementation, agreed. However, the patch from comment 39 would fix this for the issue at hand. It provides a clean way to use the rules of the spec to prevent creating an unsound inference solution.

This mentioned assumption appears to be sound wrt the spec, only the implementation doesn&apos;t yet live up to it.

I hope this explains my hesitation in supporting the current strategy. In any future contention between correctness and any other requirements, I&apos;ll keep advocating correctness :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373392</commentid>
    <comment_count>52</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-08 12:33:11 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #51)

&gt; Now for the &quot;political&quot; side - not relevant for immediate actions.

Agree with much of the opinions expressed here.

&gt; Personally, I would have preferred to release the patch in comment 39 and
&gt; pass the ball to the javac team to ask if they have justification for the
&gt; newly found deviations. I could and should have triggered that discussion.
&gt; Too bad I didn&apos;t find the time.

With the spec coming in at end of Sep 2013, I doubt that we could have done
any better to find time - So let us not beat ourselves about it !

&gt; today? We already have sophisticated code in place for the sole purpose of
&gt; imitating that bug, but it turns out, nobody can even describe that bug in a
&gt; precise enough way so that it can be truthfully imitated by another
&gt; implementation. 

This unfortunately has been the trend in general - we have had irate users
demand in so many words to align to javac where the spec is unclear/fuzzy
or worse even where javac is blatantly at fault - In the past, we have had
to bend over backwards to accommodate such users.

&gt; At this point I believe we should take pride in deviating from javac, rather
&gt; than being ashamed about it. I believe our current strategy defeats the
&gt; purpose of competition and should be reverted soon. 

Here is a plausible proposal. A value add Eclipse could provide could be to
provide a &quot;pedantic&quot; mode - I have seen other (C++) compilers implement such
a mode. If over a period of time we can come up with a pile of demonstrable
cases where adhering to javac would violate type safety - that would be a
good value addition. 

&gt; Back to the issue at hand, I&apos;d like to comment on this notice in the patch:
&gt; &quot;There are embedded assumptions in the JLS8 type inference scheme that a
&gt; successful solution of the type equations results in an applicable method.
&gt; This appears to be a tenuous assumption, ...&quot;

Sorry, the choice of the word tenuous is poor - All I meant to say was that
the JLS7 engine solves the equation computing the same PGMB, but still does 
an extra check which was missing in 1.8 
 
&gt; I hope this explains my hesitation in supporting the current strategy. In
&gt; any future contention between correctness and any other requirements, I&apos;ll
&gt; keep advocating correctness :)

I&apos;ll do too, unless irate users demand otherwise :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373431</commentid>
    <comment_count>53</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-08 22:13:03 -0500</bug_when>
    <thetext>Jay completed verifying the partial solution we have - released here:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=a570286b736c470e3a8d4706cda3b67517e91cfc

Retargetting to 4.4 so we can complete handling of AE, ECC etc. Also there should
another place where this could be required ? (rebindInner*) - not sure.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2468833</commentid>
    <comment_count>54</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-21 12:25:59 -0400</bug_when>
    <thetext>I&apos;ll take a relook at this one.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472408</commentid>
    <comment_count>55</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-27 10:03:57 -0400</bug_when>
    <thetext>Brought forward from https://bugs.eclipse.org/bugs/show_bug.cgi?id=443596#c11:

Working on this problem has actually been helpful to ponder some
&quot;philosophical&quot; questions:

    - what does it mean to say &quot;trust inference&quot; ? 
    - to what degree can we trust inference ? 
    - if we want to boost our trust what needs to be done ?

Documenting connections to: https://bugs.eclipse.org/bugs/show_bug.cgi?id=426537

In that bug we took the approach that inference can produce a solution
that cannot be fully trusted and we need to apply post inference compatibility
checks to weed out incorrect results produced by inference.

There is no doubt that the test case in https://bugs.eclipse.org/bugs/show_bug.cgi?id=426537 must be rejected,
it is produced by inference.

So how did we get there ? 

Inference (assuming is bug free otherwise) can produce solutions that are
only as trustworthy as the &apos;outside-infrastructure-that-it-depends-on-to-
produce-those-solutions&apos; are trustworthy.

If isCompatibleWith would answer true to J#RAW &lt;= J&lt;?&gt; and this is used
by inference, our bets can&apos;t be high.

BUT, 

this whole situation emerges because inference engine breaks down larger
questions into smaller and ever smaller questions and even if the
infrastructure answers wrongly to one of smaller questions, we can still
ask the larger question at a later point in the engine.

If after solution, we revisit every CTF produced during inference that
we sliced and diced into ever smaller constraints during original visitation
and with instantiations produced by resolve applied ask the proper types
of the macro level CTFs if their original constraint is still true and
rejected the solution, we could reach a stage inference engine will
never produce a solution that is wrong.

We don&apos;t ask those larger questions inside the engine. Which is what
make it necessary to ask them post inference.

The present bug also has other connections to 
https://bugs.eclipse.org/bugs/show_bug.cgi?id=426537. If you look
at the &quot;solution&quot; in MessageSend.findMethodBinding, it carefully
side steps a bunch of scenarios with captures and ICTB&apos;s

They should have been tacked head on right then to uncover the
real problems - which is what we are hitting now - and again the present
approach is side step them (well, not totally true since TB.fSOF has
a fix for ICTB)) rather than tackle them head on - but it is too late
for M3.

I&apos;ll look into them for M4 for sure.

Brought forward from https://bugs.eclipse.org/bugs/show_bug.cgi?id=443596#c12

(In reply to Srikanth Sankaran from comment #11)

&gt; If after solution, we revisit every CTF produced during inference that
&gt; we sliced and diced into ever smaller constraints during original visitation
&gt; and with instantiations produced by resolve applied ask the proper types
&gt; of the macro level CTFs if their original constraint is still true and
&gt; rejected the solution, we could reach a stage inference engine will
&gt; never produce a solution that is wrong.
&gt; 
&gt; We don&apos;t ask those larger questions inside the engine. Which is what
&gt; make it necessary to ask them post inference.

I&apos;ll prototype this for M4 for https://bugs.eclipse.org/bugs/show_bug.cgi?id=426537 - this could be the rigorous solution and the hack at that
bug could be withdrawn.

I don&apos;t see the extra post resolution rechecks constituting a performance
problem - after call isCompatibleWith caches the results.

As an added bonus, I see this exercise as a way to expose every weak
link the outside infrastructure - that today we don&apos;t run into because
the test cases we have not exercising them (with the inferred method being
an inner poly of an outer poly)

Overall in summary, the patch here leaves us in a very clean. consistent
and coherent state with respect to compatibility checks post inference.

It is &quot;safe&quot; relative to master because we perform only a subset of checks
relative to master (only functional types) and not more.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472422</commentid>
    <comment_count>56</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-27 10:26:05 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #55)

[...]

&gt; If isCompatibleWith would answer true to J#RAW &lt;= J&lt;?&gt; and this is used
&gt; by inference, our bets can&apos;t be high.

I meant J#RAW &lt;: J&lt;?&gt;

&gt; BUT, 
&gt; 
&gt; this whole situation emerges because inference engine breaks down larger
&gt; questions into smaller and ever smaller questions and even if the
&gt; infrastructure answers wrongly to one of smaller questions, we can still
&gt; ask the larger question at a later point in the engine.
&gt; 
&gt; If after solution, we revisit every CTF produced during inference that
&gt; we sliced and diced into ever smaller constraints during original visitation
&gt; and with instantiations produced by resolve applied ask the proper types
&gt; of the macro level CTFs if their original constraint is still true and
&gt; rejected the solution, we could reach a stage inference engine will
&gt; never produce a solution that is wrong.

For example, in the comment#0 test case, Inference never really asserts
after all instantiations are available that

I&lt;J&lt;?&gt;&gt;  I&lt;? super J&gt;

I agree that the specification does not require this: 18.2 states:

&quot;The results of a reduction step are always soundness-preserving: if an 
inference variable instantiation satisfies the reduced constraints and 
bounds, it will also satisfy the original constraint.&quot;

This cannot be true of our implementation because it relies on
outside API which would not allow it to make such a guarantee.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472605</commentid>
    <comment_count>57</comment_count>
      <attachid>248216</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-27 14:51:31 -0400</bug_when>
    <thetext>Created attachment 248216
Proposed patch

This fails two tests in RunallJava8Tests - both need tweaking to ensure the
error message is suitable.

This eliminates the earlier hacky fix.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472606</commentid>
    <comment_count>58</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-27 14:52:01 -0400</bug_when>
    <thetext>Stephan, let us discuss this next week or later - this is not for M3.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472716</commentid>
    <comment_count>59</comment_count>
      <attachid>248220</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-28 01:18:46 -0400</bug_when>
    <thetext>Created attachment 248220
Proposed patch

Passes RunAllJava8Tests.

I think this is the proverbial nail in this bug&apos;s coffin.

I&apos;ll wait for M3 to get out and release this soon after. It should also 
allow for any continued discussion on the philosophical side to this.

With this change:

    - I believe inference produced results could be completely trusted as
the engine covers up for weaknesses in outside infrastructure it depends on.

    - There is good evidence that ICTB is finally properly hooked up in
all places.

    - A bug in TypeSystem gets fixed. During substitution, we used to 
hand out two completely different types for multi dimensional arrays. 
e.g String [][] could show up once as a two dimensional array of String 
and once again as a one dimensional array of String [] with different 
TypeBinding.id values.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2475094</commentid>
    <comment_count>60</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-11-01 09:15:51 -0400</bug_when>
    <thetext>To give answers to both the patch in comment 59 and the &quot;philosophical question&quot;:

Of course inference *cannot* fully be trusted while it still uses isCompatibleWith() where the spec requires isSubtypeOf(). This only emphasizes the importance to eventually remove *all* workarounds inserted for javac compatibility. Everything about &quot;soft&quot; constraints falls into this bucket.

Now the patch moves the &quot;post-inference checks&quot; back into inference, as a final check before answering the solution, right? As such it looks more systematic than the previous fix. If that produces the desired result I&apos;m fine with the patch - hoping that the extra reduction step has no noticeable effect on performance ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2475189</commentid>
    <comment_count>61</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-02 01:27:24 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #60)

&gt; Now the patch moves the &quot;post-inference checks&quot; back into inference, as a
&gt; final check before answering the solution, right? As such it looks more
&gt; systematic than the previous fix. If that produces the desired result I&apos;m
&gt; fine with the patch - hoping that the extra reduction step has no noticeable
&gt; effect on performance ...

Fix released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=fff3d1bb7cd12822df70202db7e6a801aeeb63a2

To avoid unnecessary extra reduction steps, I am revalidating only non-poly
constraints. Any inner poly&apos;s initial constraints get validated during its
own applicability inference and we have established its compatibility against
the target type imposed by the outer poly already.

(This also seems necessary due to unfinished business in capture bound
incorporation)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2494949</commentid>
    <comment_count>62</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-12-10 00:37:19 -0500</bug_when>
    <thetext>Verified for 4.5 M4 using build I20141208-2000</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>239888</attachid>
            <date>2014-02-12 21:09:00 -0500</date>
            <delta_ts>2014-02-15 20:53:04 -0500</delta_ts>
            <desc>work in progress</desc>
            <filename>Bug-426537--18inference-Eclipse-compiler-thinks-I-su.patch</filename>
            <type>text/plain</type>
            <size>12568</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3RfMV84LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmlj
c1JlZ3Jlc3Npb25UZXN0XzFfOC5qYXZhCmluZGV4IGU2ZjdhNTIuLjExMzJlM2YgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3Rf
MV84LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdy
ZXNzaW9uVGVzdF8xXzguamF2YQpAQCAtMjA5NCw0ICsyMDk0LDMyIEBACiAJCQkifVxuIgogCQl9
ICk7CiB9CitwdWJsaWMgdm9pZCB0ZXN0QnVnNDI2NTM3KCkgeworCXJ1bk5lZ2F0aXZlVGVzdCgK
KwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJYLmphdmEiLAorCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIg
KyAKKwkJCSIJdm9pZCBmb28oSltdIGxpc3QsIEk8Sjw/Pj4gaSkge1xuIiArIAorCQkJIgkJc29y
dChsaXN0LCBpKTtcbiIgKyAKKwkJCSIJfVxuIiArIAorCQkJIglcbiIgKyAKKwkJCSIJPFQ+IFRb
XSBzb3J0KFRbXSBsaXN0LCBJPD8gc3VwZXIgVD4gaSkge1xuIiArIAorCQkJIgkJcmV0dXJuIGxp
c3Q7XG4iICsgCisJCQkiCX1cbiIgKyAKKwkJCSJ9XG4iICsgCisJCQkiaW50ZXJmYWNlIEk8VD4g
e31cbiIgKyAKKwkJCSJpbnRlcmZhY2UgSjxUPiB7fVxuIgorCQl9LAorCQkiLS0tLS0tLS0tLVxu
IiArIAorCQkiMS4gV0FSTklORyBpbiBYLmphdmEgKGF0IGxpbmUgMilcbiIgKyAKKwkJIgl2b2lk
IGZvbyhKW10gbGlzdCwgSTxKPD8+PiBpKSB7XG4iICsgCisJCSIJICAgICAgICAgXlxuIiArIAor
CQkiSiBpcyBhIHJhdyB0eXBlLiBSZWZlcmVuY2VzIHRvIGdlbmVyaWMgdHlwZSBKPFQ+IHNob3Vs
ZCBiZSBwYXJhbWV0ZXJpemVkXG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIyLiBFUlJP
UiBpbiBYLmphdmEgKGF0IGxpbmUgMylcbiIgKyAKKwkJIglzb3J0KGxpc3QsIGkpO1xuIiArIAor
CQkiCV5eXl5cbiIgKyAKKwkJIlRoZSBtZXRob2Qgc29ydChUW10sIEk8PyBzdXBlciBUPikgaW4g
dGhlIHR5cGUgWCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoSltdLCBJPEo8
Pz4+KVxuIiArIAorCQkiLS0tLS0tLS0tLVxuIik7Cit9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
bG9va3VwL0NvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9D
b25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEuamF2YQppbmRleCAwYjIyZTFkLi4zNTAwYmUzIDEw
MDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYS5qYXZh
CisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9sb29rdXAvQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhLmphdmEKQEAg
LTE4OSw3ICsxODksNyBAQAogCQkJCQkJCQkJfHwgZXhwclR5cGUuaXNDb21wYXRpYmxlV2l0aChy
KSkpCiAJCQkJCQkJCXJldHVybiBGQUxTRTsKIAkJCQkJCX0gZWxzZSB7Ci0JCQkJCQkJcmVzdWx0
LmFkZChuZXcgQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhKGV4cHIsIHIsIENPTVBBVElCTEUp
KTsKKwkJCQkJCQlyZXN1bHQuYWRkKG5ldyBDb25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEoZXhw
ciwgciwgQ09NUEFUSUJMRSwgdGhpcy5pc1NvZnQpKTsKIAkJCQkJCX0KIAkJCQkJfQogCQkJCX0K
QEAgLTI2OSw3ICsyNjksOSBAQAogCQkJTWV0aG9kQmluZGluZyBvcmlnaW5hbCA9IGNvbXBpbGVU
aW1lRGVjbC5vcmlnaW5hbCgpOwogCQkJaWYgKHJlZmVyZW5jZS50eXBlQXJndW1lbnRzID09IG51
bGwKIAkJCQkJJiYgKChvcmlnaW5hbC50eXBlVmFyaWFibGVzKCkgIT0gQmluZGluZy5OT19UWVBF
X1ZBUklBQkxFUyAmJiByLm1lbnRpb25zQW55KG9yaWdpbmFsLnR5cGVWYXJpYWJsZXMoKSwgLTEp
KQotCQkJCQkJfHwgKG9yaWdpbmFsLmlzQ29uc3RydWN0b3IoKSAmJiBvcmlnaW5hbC5kZWNsYXJp
bmdDbGFzcy50eXBlVmFyaWFibGVzKCkgIT0gQmluZGluZy5OT19UWVBFX1ZBUklBQkxFUyAmJiBy
Lm1lbnRpb25zQW55KG9yaWdpbmFsLmRlY2xhcmluZ0NsYXNzLnR5cGVWYXJpYWJsZXMoKSwgLTEp
KSkpIAorCQkJCQkJfHwgKG9yaWdpbmFsLmlzQ29uc3RydWN0b3IoKSAmJiBvcmlnaW5hbC5kZWNs
YXJpbmdDbGFzcy50eXBlVmFyaWFibGVzKCkgIT0gQmluZGluZy5OT19UWVBFX1ZBUklBQkxFUykp
KQorCQkJCQkJCS8vIG5vdCBjaGVja2luZyByLm1lbnRpb25zQW55IGZvciBjb25zdHJ1Y3RvcnMs
IGJlY2F1c2UgQTo6bmV3IHJlc29sdmVzIHRvIHRoZSByYXcgdHlwZQorCQkJCQkJCS8vIHdoZXJl
YXMgaW4gZmFjdCB0aGUgdHlwZSBvZiBhbGwgZXhwcmVzc2lvbnMgb2YgdGhpcyBzaGFwZSBkZXBl
bmRzIG9uIHRoZWlyIHR5cGUgdmFyaWFibGUgKGlmIGFueSkKIAkJCXsKIAkJCQlJbnZvY2F0aW9u
UmVjb3JkIHByZXZJbnZvY2F0aW9uID0gaW5mZXJlbmNlQ29udGV4dC5lbnRlclBvbHlJbnZvY2F0
aW9uKHJlZmVyZW5jZSwgbnVsbC8qbm8gaW52b2NhdGlvbiBhcmd1bWVudHMgYXZhaWxhYmxlKi8p
OwogCkBAIC0yNzgsNyArMjgwLDkgQEAKIAkJCQkJaW5mZXJJbnZvY2F0aW9uQXBwbGljYWJpbGl0
eShpbmZlcmVuY2VDb250ZXh0LCBvcmlnaW5hbCwgZnVuY3Rpb25UeXBlLnBhcmFtZXRlcnMsIG9y
aWdpbmFsLmlzQ29uc3RydWN0b3IoKS8qbWltaWMgYSBkaWFtb25kPyovLCBpbmZlcmVuY2VDb250
ZXh0LmluZmVyZW5jZUtpbmQpOwogCQkJCQlpZiAoIWluZmVyUG9seUludm9jYXRpb25UeXBlKGlu
ZmVyZW5jZUNvbnRleHQsIHJlZmVyZW5jZSwgciwgb3JpZ2luYWwpKQogCQkJCQkJcmV0dXJuIEZB
TFNFOwotCQkJCQlyZXR1cm4gbnVsbDsgLy8gYWxyZWFkeSBpbmNvcnBvcmF0ZWQKKwkJCQkJaWYg
KCFvcmlnaW5hbC5pc0NvbnN0cnVjdG9yKCkgfHwgcmVmZXJlbmNlLnJlY2VpdmVyVHlwZS50eXBl
QXJndW1lbnRzKCkgPT0gbnVsbCkKKwkJCQkJCXJldHVybiBudWxsOyAvLyBhbHJlYWR5IGluY29y
cG9yYXRlZAorCQkJCQkvLyBmb3IgRm9vPEJhcj46Om5ldyB3ZSBuZWVkIHRvIChpbGxlZ2FsbHkp
IGFkZCBvbmUgbW9yZSBjb25zdHJhaW50IGJlbG93IHRvIGdldCB0byB0aGUgQmFyCiAJCQkJfSBj
YXRjaCAoSW5mZXJlbmNlRmFpbHVyZUV4Y2VwdGlvbiBlKSB7CiAJCQkJCXJldHVybiBGQUxTRTsK
IAkJCQl9IGZpbmFsbHkgewpAQCAtMzYxLDcgKzM2NSw5IEBACiAJCQkJCQl0b1Jlc29sdmUgPSB0
cnVlOwogCQkJCX0KIAkJCQlpZiAodG9SZXNvbHZlKSB7Ci0JCQkJCUJvdW5kU2V0IHNvbHV0aW9u
ID0gaW5mZXJlbmNlQ29udGV4dC5zb2x2ZSgpOyAvLyBUT0RPOiBtaW5pbWFsIHJlc29sdmluZyBm
b3Igb25seSDOsQorCQkJCQlCb3VuZFNldCBzb2x1dGlvbiA9IGluZmVyZW5jZUNvbnRleHQuc29s
dmUobmV3IEluZmVyZW5jZVZhcmlhYmxlW117YWxwaGF9KTsKKwkJCQkJaWYgKHNvbHV0aW9uID09
IG51bGwpCisJCQkJCQlyZXR1cm4gZmFsc2U7CiAJCQkJCVR5cGVCaW5kaW5nIHUgPSBzb2x1dGlv
bi5nZXRJbnN0YW50aWF0aW9uKGFscGhhKS5jYXB0dXJlKGluZmVyZW5jZUNvbnRleHQuc2NvcGUs
IGludm9jYXRpb25TaXRlLnNvdXJjZVN0YXJ0KCkpOyAvLyBUT0RPIG1ha2UgcG9zaXRpb24gdW5p
cXVlPwogCQkJCQlDb25zdHJhaW50VHlwZUZvcm11bGEgbmV3Q29uc3RyYWludCA9IG5ldyBDb25z
dHJhaW50VHlwZUZvcm11bGEodSwgdGFyZ2V0VHlwZSwgQ09NUEFUSUJMRSk7CiAJCQkJCXJldHVy
biBpbmZlcmVuY2VDb250ZXh0LnJlZHVjZUFuZEluY29ycG9yYXRlKG5ld0NvbnN0cmFpbnQpOwpk
aWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50VHlwZUZvcm11bGEuamF2YSBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9sb29rdXAvQ29uc3RyYWludFR5cGVGb3JtdWxhLmphdmEKaW5kZXggOTIxNGQ0NC4uODkz
Mjg4YiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50VHlwZUZvcm11bGEuamF2
YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRUeXBlRm9ybXVsYS5qYXZhCkBAIC0xOTYs
NyArMTk2LDkgQEAKIAlwcml2YXRlIE9iamVjdCByZWR1Y2VTdWJUeXBlKFNjb3BlIHNjb3BlLCBU
eXBlQmluZGluZyBzdWJDYW5kaWRhdGUsIFR5cGVCaW5kaW5nIHN1cGVyQ2FuZGlkYXRlKSB7CiAJ
CS8vIDE4LjIuMyBTdWJ0eXBpbmcgQ29uc3RyYWludHMKIAkJaWYgKHN1YkNhbmRpZGF0ZS5pc1By
b3BlclR5cGUodHJ1ZSkgJiYgc3VwZXJDYW5kaWRhdGUuaXNQcm9wZXJUeXBlKHRydWUpKSB7Ci0J
CQlpZiAoc3ViQ2FuZGlkYXRlLmlzQ29tcGF0aWJsZVdpdGgoc3VwZXJDYW5kaWRhdGUsIHNjb3Bl
KSkKKwkJCWlmICh0aGlzLmlzU29mdCAKKwkJCQkJPyBzdWJDYW5kaWRhdGUuaXNDb21wYXRpYmxl
V2l0aChzdXBlckNhbmRpZGF0ZSwgc2NvcGUpCisJCQkJCTogc3ViQ2FuZGlkYXRlLmlzU3VidHlw
ZU9mKHN1cGVyQ2FuZGlkYXRlKSkKIAkJCQlyZXR1cm4gVFJVRTsKIAkJCXJldHVybiBGQUxTRTsK
IAkJfQpAQCAtMjg1LDcgKzI4NywxNSBAQAogCQkJCQlJbmZlcmVuY2VDb250ZXh0MTgubWlzc2lu
Z0ltcGxlbWVudGF0aW9uKCJOWUkiKTsgLy8kTk9OLU5MUy0xJAogCQkJCXJldHVybiBGQUxTRTsK
IAkJCWNhc2UgQmluZGluZy5JTlRFUlNFQ1RJT05fVFlQRToKLQkJCQlJbmZlcmVuY2VDb250ZXh0
MTgubWlzc2luZ0ltcGxlbWVudGF0aW9uKCJOWUkiKTsgLy8kTk9OLU5MUy0xJAorCQkJCXN1cGVy
Q2FuZGlkYXRlID0gKChXaWxkY2FyZEJpbmRpbmcpIHN1cGVyQ2FuZGlkYXRlKS5hbGxCb3VuZHMo
KTsKKwkJCQkvLyRGQUxMLVRIUk9VR0gkCisJCQljYXNlIEJpbmRpbmcuSU5URVJTRUNUSU9OX0NB
U1RfVFlQRToKKwkJCQlUeXBlQmluZGluZ1tdIGludGVyc2VjdGluZ1R5cGVzID0gKChJbnRlcnNl
Y3Rpb25DYXN0VHlwZUJpbmRpbmcpIHN1cGVyQ2FuZGlkYXRlKS5pbnRlcnNlY3RpbmdUeXBlczsK
KwkJCQlDb25zdHJhaW50Rm9ybXVsYVtdIHJlc3VsdCA9IG5ldyBDb25zdHJhaW50Rm9ybXVsYVtp
bnRlcnNlY3RpbmdUeXBlcy5sZW5ndGhdOworCQkJCWZvciAoaW50IGkgPSAwOyBpIDwgaW50ZXJz
ZWN0aW5nVHlwZXMubGVuZ3RoOyBpKyspIHsKKwkJCQkJcmVzdWx0W2ldID0gbmV3IENvbnN0cmFp
bnRUeXBlRm9ybXVsYShzdWJDYW5kaWRhdGUsIGludGVyc2VjdGluZ1R5cGVzW2ldLCBTVUJUWVBF
KTsKKwkJCQl9CisJCQkJcmV0dXJuIHJlc3VsdDsKIAkJfQogCQl0aHJvdyBuZXcgSWxsZWdhbFN0
YXRlRXhjZXB0aW9uKCJVbmV4cGVjdGVkIFJIUyAiK3N1cGVyQ2FuZGlkYXRlKTsgLy8kTk9OLU5M
Uy0xJAogCX0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvSW5mZXJlbmNlQ29udGV4dDE4Lmph
dmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvbG9va3VwL0luZmVyZW5jZUNvbnRleHQxOC5qYXZhCmluZGV4IDk2OGZmOGIu
LjhhNTM5MDIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvSW5mZXJlbmNlQ29udGV4dDE4Lmph
dmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2xvb2t1cC9JbmZlcmVuY2VDb250ZXh0MTguamF2YQpAQCAtNzcxLDYg
Kzc3MSwxNSBAQAogCiAJCXJldHVybiByZXNvbHZlKHRoaXMuaW5mZXJlbmNlVmFyaWFibGVzKTsK
IAl9CisJCisJcHVibGljIC8qQE51bGxhYmxlKi8gQm91bmRTZXQgc29sdmUoSW5mZXJlbmNlVmFy
aWFibGVbXSB0b1Jlc29sdmUpIHRocm93cyBJbmZlcmVuY2VGYWlsdXJlRXhjZXB0aW9uIHsKKwkJ
aWYgKCFyZWR1Y2UoKSkKKwkJCXJldHVybiBudWxsOworCQlpZiAoIXRoaXMuY3VycmVudEJvdW5k
cy5pbmNvcnBvcmF0ZSh0aGlzKSkKKwkJCXJldHVybiBudWxsOworCisJCXJldHVybiByZXNvbHZl
KHRvUmVzb2x2ZSk7CisJfQogCiAJLyoqCiAJICogSkxTIDE4LjIuIHJlZHVjZSBhbGwgaW5pdGlh
bCBjb25zdHJhaW50cyAKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvSW50ZXJzZWN0aW9uQ2Fz
dFR5cGVCaW5kaW5nLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0ludGVyc2VjdGlvbkNhc3RUeXBlQmlu
ZGluZy5qYXZhCmluZGV4IGE1ZTA2MmMuLmNhNjhhMTYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29r
dXAvSW50ZXJzZWN0aW9uQ2FzdFR5cGVCaW5kaW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9J
bnRlcnNlY3Rpb25DYXN0VHlwZUJpbmRpbmcuamF2YQpAQCAtMTY0LDYgKzE2NCwxNyBAQAogCQl9
CiAJCXJldHVybiBmYWxzZTsKIAl9CisJCisJQE92ZXJyaWRlCisJcHVibGljIGJvb2xlYW4gaXNT
dWJ0eXBlT2YoVHlwZUJpbmRpbmcgb3RoZXIpIHsKKwkJaWYgKFR5cGVCaW5kaW5nLmVxdWFsc0Vx
dWFscyh0aGlzLCBvdGhlcikpCisJCQlyZXR1cm4gdHJ1ZTsKKwkJZm9yIChpbnQgaSA9IDA7IGkg
PCB0aGlzLmludGVyc2VjdGluZ1R5cGVzLmxlbmd0aDsgaSsrKSB7CisJCQlpZiAodGhpcy5pbnRl
cnNlY3RpbmdUeXBlc1tpXS5pc1N1YnR5cGVPZihvdGhlcikpCisJCQkJcmV0dXJuIHRydWU7CisJ
CX0KKwkJcmV0dXJuIGZhbHNlOworCX0KIAogCXB1YmxpYyBjaGFyW10gcXVhbGlmaWVkU291cmNl
TmFtZSgpIHsKIAkJU3RyaW5nQnVmZmVyIHF1YWxpZmllZFNvdXJjZU5hbWUgPSBuZXcgU3RyaW5n
QnVmZmVyKDE2KTsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUmVmZXJlbmNlQmluZGluZy5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9SZWZlcmVuY2VCaW5kaW5nLmphdmEKaW5kZXggM2RiMjlhYS4u
NzA4MzdiZSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9SZWZlcmVuY2VCaW5kaW5nLmphdmEK
KysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9SZWZlcmVuY2VCaW5kaW5nLmphdmEKQEAgLTEzMDcsNiArMTMw
Nyw1MCBAQAogCX0KIH0KIAorcHVibGljIGJvb2xlYW4gaXNTdWJ0eXBlT2YoVHlwZUJpbmRpbmcg
b3RoZXIpIHsKKwlpZiAoaXNTdWJUeXBlT2ZSVEwob3RoZXIpKQorCQlyZXR1cm4gdHJ1ZTsKKwlU
eXBlQmluZGluZyBjYW5kaWRhdGUgPSBmaW5kU3VwZXJUeXBlT3JpZ2luYXRpbmdGcm9tKG90aGVy
KTsKKwlpZiAoY2FuZGlkYXRlID09IG51bGwpCisJCXJldHVybiBmYWxzZTsKKwlpZiAoVHlwZUJp
bmRpbmcuZXF1YWxzRXF1YWxzKGNhbmRpZGF0ZSwgb3RoZXIpKQorCQlyZXR1cm4gdHJ1ZTsKKwlp
ZiAob3RoZXIuaXNSYXdUeXBlKCkgJiYgVHlwZUJpbmRpbmcuZXF1YWxzRXF1YWxzKGNhbmRpZGF0
ZS5lcmFzdXJlKCksIG90aGVyLmVyYXN1cmUoKSkpCisJCXJldHVybiB0cnVlOworCVR5cGVCaW5k
aW5nW10gc2lzID0gb3RoZXIudHlwZUFyZ3VtZW50cygpOworCVR5cGVCaW5kaW5nW10gdGlzID0g
Y2FuZGlkYXRlLnR5cGVBcmd1bWVudHMoKTsKKwlpZiAodGlzID09IG51bGwgfHwgc2lzID09IG51
bGwpCisJCXJldHVybiBmYWxzZTsKKwlpZiAoc2lzLmxlbmd0aCAhPSB0aXMubGVuZ3RoKQorCQly
ZXR1cm4gZmFsc2U7CisJZm9yIChpbnQgaSA9IDA7IGkgPCBzaXMubGVuZ3RoOyBpKyspIHsKKwkJ
aWYgKCF0aXNbaV0uaXNUeXBlQXJndW1lbnRDb250YWluZWRCeShzaXNbaV0pKQorCQkJcmV0dXJu
IGZhbHNlOworCX0KKwlyZXR1cm4gdHJ1ZTsKK30KKworcHJvdGVjdGVkIGJvb2xlYW4gaXNTdWJU
eXBlT2ZSVEwoVHlwZUJpbmRpbmcgb3RoZXIpIHsKKwlpZiAoVHlwZUJpbmRpbmcuZXF1YWxzRXF1
YWxzKHRoaXMsIG90aGVyKSkKKwkJcmV0dXJuIHRydWU7CisJaWYgKG90aGVyIGluc3RhbmNlb2Yg
Q2FwdHVyZUJpbmRpbmcpIHsKKwkJLy8gZm9yIHRoaXMgb25lIGtpbmQgd2UgbXVzdCBmaXJzdCB1
bndyYXAgdGhlIHJoczoKKwkJVHlwZUJpbmRpbmcgbG93ZXIgPSAoKENhcHR1cmVCaW5kaW5nKSBv
dGhlcikubG93ZXJCb3VuZDsKKwkJcmV0dXJuIChsb3dlciAhPSBudWxsICYmIGlzU3VidHlwZU9m
KGxvd2VyKSk7CisJfQorCWlmIChvdGhlciBpbnN0YW5jZW9mIFJlZmVyZW5jZUJpbmRpbmcpIHsK
KwkJVHlwZUJpbmRpbmdbXSBpbnRlcnNlY3RpbmcgPSAoKFJlZmVyZW5jZUJpbmRpbmcpIG90aGVy
KS5nZXRJbnRlcnNlY3RpbmdUeXBlcygpOworCQlpZiAoaW50ZXJzZWN0aW5nICE9IG51bGwpIHsK
KwkJCWZvciAoaW50IGkgPSAwOyBpIDwgaW50ZXJzZWN0aW5nLmxlbmd0aDsgaSsrKSB7CisJCQkJ
aWYgKCFpc1N1YnR5cGVPZihpbnRlcnNlY3RpbmdbaV0pKQorCQkJCQlyZXR1cm4gZmFsc2U7CisJ
CQl9CisJCQlyZXR1cm4gdHJ1ZTsKKwkJfQorCX0KKwlyZXR1cm4gZmFsc2U7Cit9CisKIC8qKgog
ICogQW5zd2VyIHRydWUgaWYgdGhlIHJlY2VpdmVyIGhhcyBkZWZhdWx0IHZpc2liaWxpdHkKICAq
LwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9UeXBlQmluZGluZy5qYXZhIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xv
b2t1cC9UeXBlQmluZGluZy5qYXZhCmluZGV4IDFlYTJiMWYuLmVhNjI0Y2UgMTAwNjQ0Ci0tLSBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9sb29rdXAvVHlwZUJpbmRpbmcuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1R5cGVC
aW5kaW5nLmphdmEKQEAgLTE1MzgsNiArMTUzOCwxMCBAQAogCXJldHVybiBzLmlzQ29tcGF0aWJs
ZVdpdGgodCwgc2NvcGUpICYmICFzLm5lZWRzVW5jaGVja2VkQ29udmVyc2lvbih0KTsKIH0KIAor
cHVibGljIGJvb2xlYW4gaXNTdWJ0eXBlT2YoVHlwZUJpbmRpbmcgcmlnaHQpIHsKKwlyZXR1cm4g
aXNDb21wYXRpYmxlV2l0aChyaWdodCk7Cit9CisKIHB1YmxpYyBNZXRob2RCaW5kaW5nW10gZ2V0
TWV0aG9kcyhjaGFyW10gc2VsZWN0b3IpIHsKIAlyZXR1cm4gQmluZGluZy5OT19NRVRIT0RTOwog
fQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9UeXBlVmFyaWFibGVCaW5kaW5nLmphdmEgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvbG9va3VwL1R5cGVWYXJpYWJsZUJpbmRpbmcuamF2YQppbmRleCA3NGRhZTlhLi4yOTJm
NGIwIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1R5cGVWYXJpYWJsZUJpbmRpbmcuamF2YQor
KysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvbG9va3VwL1R5cGVWYXJpYWJsZUJpbmRpbmcuamF2YQpAQCAtNDU4LDYgKzQ1
OCwyMSBAQAogCQlyZXR1cm4gdHJ1ZTsKIAl9CiAKKwlAT3ZlcnJpZGUKKwlwdWJsaWMgYm9vbGVh
biBpc1N1YnR5cGVPZihUeXBlQmluZGluZyBvdGhlcikgeworCQlpZiAoaXNTdWJUeXBlT2ZSVEwo
b3RoZXIpKQorCQkJcmV0dXJuIHRydWU7CisJCWlmICh0aGlzLmZpcnN0Qm91bmQgIT0gbnVsbCAm
JiB0aGlzLmZpcnN0Qm91bmQuaXNTdWJ0eXBlT2Yob3RoZXIpKQorCQkJcmV0dXJuIHRydWU7CisJ
CWlmICh0aGlzLnN1cGVyY2xhc3MgIT0gbnVsbCAmJiB0aGlzLnN1cGVyY2xhc3MuaXNTdWJ0eXBl
T2Yob3RoZXIpKQorCQkJcmV0dXJuIHRydWU7CisJCWlmICh0aGlzLnN1cGVySW50ZXJmYWNlcyAh
PSBudWxsKQorCQkJZm9yIChpbnQgaSA9IDAsIGwgPSB0aGlzLnN1cGVySW50ZXJmYWNlcy5sZW5n
dGg7IGkgPCBsOyBpKyspCisJCSAgIAkJaWYgKHRoaXMuc3VwZXJJbnRlcmZhY2VzW2ldLmlzU3Vi
dHlwZU9mKG90aGVyKSkKKwkJCQkJcmV0dXJuIHRydWU7CisJCXJldHVybiBvdGhlci5pZCA9PSBU
eXBlSWRzLlRfSmF2YUxhbmdPYmplY3Q7CisJfQorCiAJLy8gdG8gcHJldmVudCBpbmZpbml0ZSBy
ZWN1cnNpb24gd2hlbiBpbnNwZWN0aW5nIHJlY3Vyc2l2ZSBnZW5lcmljczoKIAlib29sZWFuIGlu
UmVjdXJzaXZlRnVuY3Rpb24gPSBmYWxzZTsKIAkKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAv
V2lsZGNhcmRCaW5kaW5nLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1dpbGRjYXJkQmluZGluZy5qYXZh
CmluZGV4IDlhNTAzMGYuLjk5ZjcxODYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvV2lsZGNh
cmRCaW5kaW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9XaWxkY2FyZEJpbmRpbmcuamF2YQpA
QCAtNTQyLDcgKzU0MiwyNCBAQAogICAgIAlyZXR1cm4gdGhpcy5vdGhlckJvdW5kcyAhPSBudWxs
OwogICAgIH0KIAotCXB1YmxpYyBib29sZWFuIGlzSGllcmFyY2h5Q29ubmVjdGVkKCkgeworICAg
IEBPdmVycmlkZQorICAgIHB1YmxpYyBSZWZlcmVuY2VCaW5kaW5nW10gZ2V0SW50ZXJzZWN0aW5n
VHlwZXMoKSB7CisgICAgCWlmIChpc0ludGVyc2VjdGlvblR5cGUoKSkgeworICAgIAkJUmVmZXJl
bmNlQmluZGluZ1tdIGFsbEJvdW5kcyA9IG5ldyBSZWZlcmVuY2VCaW5kaW5nW3RoaXMub3RoZXJC
b3VuZHMubGVuZ3RoKzFdOworICAgIAkJdHJ5IHsKKyAgICAJCQlhbGxCb3VuZHNbMF0gPSAoUmVm
ZXJlbmNlQmluZGluZykgdGhpcy5ib3VuZDsKKyAgICAJCQlTeXN0ZW0uYXJyYXljb3B5KHRoaXMu
b3RoZXJCb3VuZHMsIDAsIGFsbEJvdW5kcywgMSwgdGhpcy5vdGhlckJvdW5kcy5sZW5ndGgpOwor
ICAgIAkJfSBjYXRjaCAoQ2xhc3NDYXN0RXhjZXB0aW9uIGNjZSkgeworICAgIAkJCXJldHVybiBu
dWxsOworICAgIAkJfSBjYXRjaCAoQXJyYXlTdG9yZUV4Y2VwdGlvbiBhc2UpIHsKKyAgICAJCQly
ZXR1cm4gbnVsbDsKKyAgICAJCX0KKyAgICAJCXJldHVybiBhbGxCb3VuZHM7CisgICAgCX0KKyAg
ICAJcmV0dXJuIG51bGw7CisgICAgfQorCisgICAgcHVibGljIGJvb2xlYW4gaXNIaWVyYXJjaHlD
b25uZWN0ZWQoKSB7CiAJCXJldHVybiB0aGlzLnN1cGVyY2xhc3MgIT0gbnVsbCAmJiB0aGlzLnN1
cGVySW50ZXJmYWNlcyAhPSBudWxsOwogCX0KIA==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>239987</attachid>
            <date>2014-02-15 20:53:00 -0500</date>
            <delta_ts>2014-02-16 10:04:52 -0500</delta_ts>
            <desc>patch updated for current HEAD</desc>
            <filename>Bug-426537--18inference-Eclipse-compiler-thinks-I-su.patch</filename>
            <type>text/plain</type>
            <size>7896</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNUeXBlVGVz
dC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xp
cHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0Lmph
dmEKaW5kZXggZThhODg4My4uZGE2MWExMCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0LmphdmEKQEAgLTI5NDUwLDggKzI5NDUwLDEzIEBA
CiAJCSItLS0tLS0tLS0tXG4iICsKIAkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA2KVxu
IiArCiAJCSIJcmV0dXJuIGZvbyhpLCBmKTtcbiIgKworCQkodGhpcy5jb21wbGlhbmNlTGV2ZWwg
PCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84PwogCQkiCSAgICAgICBeXl5eXl5eXl5cbiIgKwot
CQkiVHlwZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBPYmplY3QmU2VyaWFsaXphYmxl
JkNsb25lYWJsZSB0byBPYmplY3RbXVxuIiArCisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29u
dmVydCBmcm9tIE9iamVjdCZTZXJpYWxpemFibGUmQ2xvbmVhYmxlIHRvIE9iamVjdFtdXG4iCisJ
CToKKwkJIgkgICAgICAgXl5eXG4iICsgCisJCSJUaGUgbWV0aG9kIGZvbyhULCBUKSBpbiB0aGUg
dHlwZSBYIGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRzIChpbnRbXSwgZmxvYXRb
XSlcbiIgCisJCSkrCiAJCSItLS0tLS0tLS0tXG4iLAogCQkvLyBqYXZhYyBvcHRpb25zCiAJCUph
dmFjVGVzdE9wdGlvbnMuSmF2YWNIYXNBQnVnLkphdmFjQnVnRml4ZWRfNl8xMCAvKiBqYXZhYyB0
ZXN0IG9wdGlvbnMgKi8pOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMu
Y29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Np
b24vR2VuZXJpY3NSZWdyZXNzaW9uVGVzdF8xXzguamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
LnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9y
ZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3RfMV84LmphdmEKaW5kZXggMjYyNWViNC4u
OWE4MmI5YSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIv
c3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJp
Y3NSZWdyZXNzaW9uVGVzdF8xXzguamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0
cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVz
c2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25UZXN0XzFfOC5qYXZhCkBAIC0yMTc3LDQgKzIxNzcsMzIg
QEAKIAkJCSJ9XG4iCiAJCX0pOwogfQorcHVibGljIHZvaWQgdGVzdEJ1ZzQyNjUzNygpIHsKKwly
dW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJwdWJs
aWMgY2xhc3MgWCB7XG4iICsgCisJCQkiCXZvaWQgZm9vKEpbXSBsaXN0LCBJPEo8Pz4+IGkpIHtc
biIgKyAKKwkJCSIJCXNvcnQobGlzdCwgaSk7XG4iICsgCisJCQkiCX1cbiIgKyAKKwkJCSIJXG4i
ICsgCisJCQkiCTxUPiBUW10gc29ydChUW10gbGlzdCwgSTw/IHN1cGVyIFQ+IGkpIHtcbiIgKyAK
KwkJCSIJCXJldHVybiBsaXN0O1xuIiArIAorCQkJIgl9XG4iICsgCisJCQkifVxuIiArIAorCQkJ
ImludGVyZmFjZSBJPFQ+IHt9XG4iICsgCisJCQkiaW50ZXJmYWNlIEo8VD4ge31cbiIKKwkJfSwK
KwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjEuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDIp
XG4iICsgCisJCSIJdm9pZCBmb28oSltdIGxpc3QsIEk8Sjw/Pj4gaSkge1xuIiArIAorCQkiCSAg
ICAgICAgIF5cbiIgKyAKKwkJIkogaXMgYSByYXcgdHlwZS4gUmVmZXJlbmNlcyB0byBnZW5lcmlj
IHR5cGUgSjxUPiBzaG91bGQgYmUgcGFyYW1ldGVyaXplZFxuIiArIAorCQkiLS0tLS0tLS0tLVxu
IiArIAorCQkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDMpXG4iICsgCisJCSIJc29ydChs
aXN0LCBpKTtcbiIgKyAKKwkJIgleXl5eXG4iICsgCisJCSJUaGUgbWV0aG9kIHNvcnQoVFtdLCBJ
PD8gc3VwZXIgVD4pIGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1
bWVudHMgKEpbXSwgSTxKPD8+PilcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIpOworfQogfQpkaWZm
IC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEuamF2YSBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9sb29rdXAvQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhLmphdmEKaW5kZXggZDAz
MzFjYi4uYjU4OWI1ZiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50RXhwcmVz
c2lvbkZvcm11bGEuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRFeHByZXNzaW9u
Rm9ybXVsYS5qYXZhCkBAIC0xODksNyArMTg5LDcgQEAKIAkJCQkJCQkJCXx8IGV4cHJUeXBlLmlz
Q29tcGF0aWJsZVdpdGgocikpKQogCQkJCQkJCQlyZXR1cm4gRkFMU0U7CiAJCQkJCQl9IGVsc2Ug
ewotCQkJCQkJCXJlc3VsdC5hZGQobmV3IENvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYShleHBy
LCByLCBDT01QQVRJQkxFKSk7CisJCQkJCQkJcmVzdWx0LmFkZChuZXcgQ29uc3RyYWludEV4cHJl
c3Npb25Gb3JtdWxhKGV4cHIsIHIsIENPTVBBVElCTEUsIHRoaXMuaXNTb2Z0KSk7CiAJCQkJCQl9
CiAJCQkJCX0KIAkJCQl9CkBAIC0yNjksNyArMjY5LDkgQEAKIAkJCU1ldGhvZEJpbmRpbmcgb3Jp
Z2luYWwgPSBjb21waWxlVGltZURlY2wub3JpZ2luYWwoKTsKIAkJCWlmIChyZWZlcmVuY2UudHlw
ZUFyZ3VtZW50cyA9PSBudWxsCiAJCQkJCSYmICgob3JpZ2luYWwudHlwZVZhcmlhYmxlcygpICE9
IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMgJiYgci5tZW50aW9uc0FueShvcmlnaW5hbC50eXBl
VmFyaWFibGVzKCksIC0xKSkKLQkJCQkJCXx8IChvcmlnaW5hbC5pc0NvbnN0cnVjdG9yKCkgJiYg
b3JpZ2luYWwuZGVjbGFyaW5nQ2xhc3MudHlwZVZhcmlhYmxlcygpICE9IEJpbmRpbmcuTk9fVFlQ
RV9WQVJJQUJMRVMgJiYgci5tZW50aW9uc0FueShvcmlnaW5hbC5kZWNsYXJpbmdDbGFzcy50eXBl
VmFyaWFibGVzKCksIC0xKSkpKSAKKwkJCQkJCXx8IChvcmlnaW5hbC5pc0NvbnN0cnVjdG9yKCkg
JiYgb3JpZ2luYWwuZGVjbGFyaW5nQ2xhc3MudHlwZVZhcmlhYmxlcygpICE9IEJpbmRpbmcuTk9f
VFlQRV9WQVJJQUJMRVMpKSkKKwkJCQkJCQkvLyBub3QgY2hlY2tpbmcgci5tZW50aW9uc0FueSBm
b3IgY29uc3RydWN0b3JzLCBiZWNhdXNlIEE6Om5ldyByZXNvbHZlcyB0byB0aGUgcmF3IHR5cGUK
KwkJCQkJCQkvLyB3aGVyZWFzIGluIGZhY3QgdGhlIHR5cGUgb2YgYWxsIGV4cHJlc3Npb25zIG9m
IHRoaXMgc2hhcGUgZGVwZW5kcyBvbiB0aGVpciB0eXBlIHZhcmlhYmxlIChpZiBhbnkpCiAJCQl7
CiAJCQkJSW52b2NhdGlvblJlY29yZCBwcmV2SW52b2NhdGlvbiA9IGluZmVyZW5jZUNvbnRleHQu
ZW50ZXJQb2x5SW52b2NhdGlvbihyZWZlcmVuY2UsIG51bGwvKm5vIGludm9jYXRpb24gYXJndW1l
bnRzIGF2YWlsYWJsZSovKTsKIApAQCAtMjc4LDcgKzI4MCw5IEBACiAJCQkJCWluZmVySW52b2Nh
dGlvbkFwcGxpY2FiaWxpdHkoaW5mZXJlbmNlQ29udGV4dCwgb3JpZ2luYWwsIGZ1bmN0aW9uVHlw
ZS5wYXJhbWV0ZXJzLCBvcmlnaW5hbC5pc0NvbnN0cnVjdG9yKCkvKm1pbWljIGEgZGlhbW9uZD8q
LywgaW5mZXJlbmNlQ29udGV4dC5pbmZlcmVuY2VLaW5kKTsKIAkJCQkJaWYgKCFpbmZlclBvbHlJ
bnZvY2F0aW9uVHlwZShpbmZlcmVuY2VDb250ZXh0LCByZWZlcmVuY2UsIHIsIG9yaWdpbmFsKSkK
IAkJCQkJCXJldHVybiBGQUxTRTsKLQkJCQkJcmV0dXJuIG51bGw7IC8vIGFscmVhZHkgaW5jb3Jw
b3JhdGVkCisJCQkJCWlmICghb3JpZ2luYWwuaXNDb25zdHJ1Y3RvcigpIHx8IHJlZmVyZW5jZS5y
ZWNlaXZlclR5cGUudHlwZUFyZ3VtZW50cygpID09IG51bGwpCisJCQkJCQlyZXR1cm4gbnVsbDsg
Ly8gYWxyZWFkeSBpbmNvcnBvcmF0ZWQKKwkJCQkJLy8gZm9yIEZvbzxCYXI+OjpuZXcgd2UgbmVl
ZCB0byAoaWxsZWdhbGx5KSBhZGQgb25lIG1vcmUgY29uc3RyYWludCBiZWxvdyB0byBnZXQgdG8g
dGhlIEJhcgogCQkJCX0gY2F0Y2ggKEluZmVyZW5jZUZhaWx1cmVFeGNlcHRpb24gZSkgewogCQkJ
CQlyZXR1cm4gRkFMU0U7CiAJCQkJfSBmaW5hbGx5IHsKQEAgLTM2NSw3ICszNjksOSBAQAogCQkJ
CQkJdG9SZXNvbHZlID0gdHJ1ZTsKIAkJCQl9CiAJCQkJaWYgKHRvUmVzb2x2ZSkgewotCQkJCQlC
b3VuZFNldCBzb2x1dGlvbiA9IGluZmVyZW5jZUNvbnRleHQuc29sdmUoKTsgLy8gVE9ETzogbWlu
aW1hbCByZXNvbHZpbmcgZm9yIG9ubHkgzrEKKwkJCQkJQm91bmRTZXQgc29sdXRpb24gPSBpbmZl
cmVuY2VDb250ZXh0LnNvbHZlKG5ldyBJbmZlcmVuY2VWYXJpYWJsZVtde2FscGhhfSk7CisJCQkJ
CWlmIChzb2x1dGlvbiA9PSBudWxsKQorCQkJCQkJcmV0dXJuIGZhbHNlOwogCQkJCQlUeXBlQmlu
ZGluZyB1ID0gc29sdXRpb24uZ2V0SW5zdGFudGlhdGlvbihhbHBoYSkuY2FwdHVyZShpbmZlcmVu
Y2VDb250ZXh0LnNjb3BlLCBpbnZvY2F0aW9uU2l0ZS5zb3VyY2VTdGFydCgpKTsgLy8gVE9ETyBt
YWtlIHBvc2l0aW9uIHVuaXF1ZT8KIAkJCQkJQ29uc3RyYWludFR5cGVGb3JtdWxhIG5ld0NvbnN0
cmFpbnQgPSBuZXcgQ29uc3RyYWludFR5cGVGb3JtdWxhKHUsIHRhcmdldFR5cGUsIENPTVBBVElC
TEUpOwogCQkJCQlyZXR1cm4gaW5mZXJlbmNlQ29udGV4dC5yZWR1Y2VBbmRJbmNvcnBvcmF0ZShu
ZXdDb25zdHJhaW50KTsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3RyYWludFR5cGVG
b3JtdWxhLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRUeXBlRm9ybXVsYS5qYXZhCmlu
ZGV4IGU2MDA1OTMuLmJiMWM3MjIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3RyYWlu
dFR5cGVGb3JtdWxhLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50VHlwZUZvcm11
bGEuamF2YQpAQCAtMTk2LDcgKzE5Niw5IEBACiAJcHJpdmF0ZSBPYmplY3QgcmVkdWNlU3ViVHlw
ZShTY29wZSBzY29wZSwgVHlwZUJpbmRpbmcgc3ViQ2FuZGlkYXRlLCBUeXBlQmluZGluZyBzdXBl
ckNhbmRpZGF0ZSkgewogCQkvLyAxOC4yLjMgU3VidHlwaW5nIENvbnN0cmFpbnRzCiAJCWlmIChz
dWJDYW5kaWRhdGUuaXNQcm9wZXJUeXBlKHRydWUpICYmIHN1cGVyQ2FuZGlkYXRlLmlzUHJvcGVy
VHlwZSh0cnVlKSkgewotCQkJaWYgKHN1YkNhbmRpZGF0ZS5pc0NvbXBhdGlibGVXaXRoKHN1cGVy
Q2FuZGlkYXRlLCBzY29wZSkpCisJCQlpZiAodGhpcy5pc1NvZnQgCisJCQkJCT8gc3ViQ2FuZGlk
YXRlLmlzQ29tcGF0aWJsZVdpdGgoc3VwZXJDYW5kaWRhdGUsIHNjb3BlKQorCQkJCQk6IHN1YkNh
bmRpZGF0ZS5pc1N1YnR5cGVPZihzdXBlckNhbmRpZGF0ZSkpCiAJCQkJcmV0dXJuIFRSVUU7CiAJ
CQlyZXR1cm4gRkFMU0U7CiAJCX0KQEAgLTI4MCw3ICsyODIsMTUgQEAKIAkJCQkJSW5mZXJlbmNl
Q29udGV4dDE4Lm1pc3NpbmdJbXBsZW1lbnRhdGlvbigiTllJIik7IC8vJE5PTi1OTFMtMSQKIAkJ
CQlyZXR1cm4gRkFMU0U7CiAJCQljYXNlIEJpbmRpbmcuSU5URVJTRUNUSU9OX1RZUEU6Ci0JCQkJ
SW5mZXJlbmNlQ29udGV4dDE4Lm1pc3NpbmdJbXBsZW1lbnRhdGlvbigiTllJIik7IC8vJE5PTi1O
TFMtMSQKKwkJCQlzdXBlckNhbmRpZGF0ZSA9ICgoV2lsZGNhcmRCaW5kaW5nKSBzdXBlckNhbmRp
ZGF0ZSkuYWxsQm91bmRzKCk7CisJCQkJLy8kRkFMTC1USFJPVUdIJAorCQkJY2FzZSBCaW5kaW5n
LklOVEVSU0VDVElPTl9DQVNUX1RZUEU6CisJCQkJVHlwZUJpbmRpbmdbXSBpbnRlcnNlY3RpbmdU
eXBlcyA9ICgoSW50ZXJzZWN0aW9uQ2FzdFR5cGVCaW5kaW5nKSBzdXBlckNhbmRpZGF0ZSkuaW50
ZXJzZWN0aW5nVHlwZXM7CisJCQkJQ29uc3RyYWludEZvcm11bGFbXSByZXN1bHQgPSBuZXcgQ29u
c3RyYWludEZvcm11bGFbaW50ZXJzZWN0aW5nVHlwZXMubGVuZ3RoXTsKKwkJCQlmb3IgKGludCBp
ID0gMDsgaSA8IGludGVyc2VjdGluZ1R5cGVzLmxlbmd0aDsgaSsrKSB7CisJCQkJCXJlc3VsdFtp
XSA9IG5ldyBDb25zdHJhaW50VHlwZUZvcm11bGEoc3ViQ2FuZGlkYXRlLCBpbnRlcnNlY3RpbmdU
eXBlc1tpXSwgU1VCVFlQRSk7CisJCQkJfQorCQkJCXJldHVybiByZXN1bHQ7CiAJCX0KIAkJdGhy
b3cgbmV3IElsbGVnYWxTdGF0ZUV4Y2VwdGlvbigiVW5leHBlY3RlZCBSSFMgIitzdXBlckNhbmRp
ZGF0ZSk7IC8vJE5PTi1OTFMtMSQKIAl9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVy
ZW5jZUNvbnRleHQxOC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9JbmZlcmVuY2VDb250ZXh0MTguamF2
YQppbmRleCA3YThhOTg5Li4yZWY1MzAzIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVy
ZW5jZUNvbnRleHQxOC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvSW5mZXJlbmNlQ29udGV4dDE4
LmphdmEKQEAgLTc3MSw2ICs3NzEsMTUgQEAKIAogCQlyZXR1cm4gcmVzb2x2ZSh0aGlzLmluZmVy
ZW5jZVZhcmlhYmxlcyk7CiAJfQorCQorCXB1YmxpYyAvKkBOdWxsYWJsZSovIEJvdW5kU2V0IHNv
bHZlKEluZmVyZW5jZVZhcmlhYmxlW10gdG9SZXNvbHZlKSB0aHJvd3MgSW5mZXJlbmNlRmFpbHVy
ZUV4Y2VwdGlvbiB7CisJCWlmICghcmVkdWNlKCkpCisJCQlyZXR1cm4gbnVsbDsKKwkJaWYgKCF0
aGlzLmN1cnJlbnRCb3VuZHMuaW5jb3Jwb3JhdGUodGhpcykpCisJCQlyZXR1cm4gbnVsbDsKKwor
CQlyZXR1cm4gcmVzb2x2ZSh0b1Jlc29sdmUpOworCX0KIAogCS8qKgogCSAqIEpMUyAxOC4yLiBy
ZWR1Y2UgYWxsIGluaXRpYWwgY29uc3RyYWludHMg
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>239999</attachid>
            <date>2014-02-16 10:04:00 -0500</date>
            <delta_ts>2014-03-04 10:29:59 -0500</delta_ts>
            <desc>updated patch</desc>
            <filename>Bug-426537--18inference-Eclipse-compiler-thinks-I-su.patch</filename>
            <type>text/plain</type>
            <size>7896</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNUeXBlVGVz
dC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xp
cHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0Lmph
dmEKaW5kZXggYmEyM2QxZi4uODkxMDc3MiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0LmphdmEKQEAgLTI5NDUwLDggKzI5NDUwLDEzIEBA
CiAJCSItLS0tLS0tLS0tXG4iICsKIAkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA2KVxu
IiArCiAJCSIJcmV0dXJuIGZvbyhpLCBmKTtcbiIgKworCQkodGhpcy5jb21wbGlhbmNlTGV2ZWwg
PCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84PwogCQkiCSAgICAgICBeXl5eXl5eXl5cbiIgKwot
CQkiVHlwZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBPYmplY3QmU2VyaWFsaXphYmxl
JkNsb25lYWJsZSB0byBPYmplY3RbXVxuIiArCisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29u
dmVydCBmcm9tIE9iamVjdCZTZXJpYWxpemFibGUmQ2xvbmVhYmxlIHRvIE9iamVjdFtdXG4iCisJ
CToKKwkJIgkgICAgICAgXl5eXG4iICsgCisJCSJUaGUgbWV0aG9kIGZvbyhULCBUKSBpbiB0aGUg
dHlwZSBYIGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRzIChpbnRbXSwgZmxvYXRb
XSlcbiIgCisJCSkrCiAJCSItLS0tLS0tLS0tXG4iLAogCQkvLyBqYXZhYyBvcHRpb25zCiAJCUph
dmFjVGVzdE9wdGlvbnMuSmF2YWNIYXNBQnVnLkphdmFjQnVnRml4ZWRfNl8xMCAvKiBqYXZhYyB0
ZXN0IG9wdGlvbnMgKi8pOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMu
Y29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Np
b24vR2VuZXJpY3NSZWdyZXNzaW9uVGVzdF8xXzguamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
LnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9y
ZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3RfMV84LmphdmEKaW5kZXggZDNlMWNlMi4u
YWZjMDM5YiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIv
c3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJp
Y3NSZWdyZXNzaW9uVGVzdF8xXzguamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0
cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVz
c2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25UZXN0XzFfOC5qYXZhCkBAIC0yMjEzLDQgKzIyMTMsMzIg
QEAKIAkJCSJ9XG4iCiAJCX0pOwogfQorcHVibGljIHZvaWQgdGVzdEJ1ZzQyNjUzNygpIHsKKwly
dW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJwdWJs
aWMgY2xhc3MgWCB7XG4iICsgCisJCQkiCXZvaWQgZm9vKEpbXSBsaXN0LCBJPEo8Pz4+IGkpIHtc
biIgKyAKKwkJCSIJCXNvcnQobGlzdCwgaSk7XG4iICsgCisJCQkiCX1cbiIgKyAKKwkJCSIJXG4i
ICsgCisJCQkiCTxUPiBUW10gc29ydChUW10gbGlzdCwgSTw/IHN1cGVyIFQ+IGkpIHtcbiIgKyAK
KwkJCSIJCXJldHVybiBsaXN0O1xuIiArIAorCQkJIgl9XG4iICsgCisJCQkifVxuIiArIAorCQkJ
ImludGVyZmFjZSBJPFQ+IHt9XG4iICsgCisJCQkiaW50ZXJmYWNlIEo8VD4ge31cbiIKKwkJfSwK
KwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjEuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDIp
XG4iICsgCisJCSIJdm9pZCBmb28oSltdIGxpc3QsIEk8Sjw/Pj4gaSkge1xuIiArIAorCQkiCSAg
ICAgICAgIF5cbiIgKyAKKwkJIkogaXMgYSByYXcgdHlwZS4gUmVmZXJlbmNlcyB0byBnZW5lcmlj
IHR5cGUgSjxUPiBzaG91bGQgYmUgcGFyYW1ldGVyaXplZFxuIiArIAorCQkiLS0tLS0tLS0tLVxu
IiArIAorCQkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDMpXG4iICsgCisJCSIJc29ydChs
aXN0LCBpKTtcbiIgKyAKKwkJIgleXl5eXG4iICsgCisJCSJUaGUgbWV0aG9kIHNvcnQoVFtdLCBJ
PD8gc3VwZXIgVD4pIGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1
bWVudHMgKEpbXSwgSTxKPD8+PilcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIpOworfQogfQpkaWZm
IC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEuamF2YSBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9sb29rdXAvQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhLmphdmEKaW5kZXggZDAz
MzFjYi4uYjU4OWI1ZiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50RXhwcmVz
c2lvbkZvcm11bGEuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRFeHByZXNzaW9u
Rm9ybXVsYS5qYXZhCkBAIC0xODksNyArMTg5LDcgQEAKIAkJCQkJCQkJCXx8IGV4cHJUeXBlLmlz
Q29tcGF0aWJsZVdpdGgocikpKQogCQkJCQkJCQlyZXR1cm4gRkFMU0U7CiAJCQkJCQl9IGVsc2Ug
ewotCQkJCQkJCXJlc3VsdC5hZGQobmV3IENvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYShleHBy
LCByLCBDT01QQVRJQkxFKSk7CisJCQkJCQkJcmVzdWx0LmFkZChuZXcgQ29uc3RyYWludEV4cHJl
c3Npb25Gb3JtdWxhKGV4cHIsIHIsIENPTVBBVElCTEUsIHRoaXMuaXNTb2Z0KSk7CiAJCQkJCQl9
CiAJCQkJCX0KIAkJCQl9CkBAIC0yNjksNyArMjY5LDkgQEAKIAkJCU1ldGhvZEJpbmRpbmcgb3Jp
Z2luYWwgPSBjb21waWxlVGltZURlY2wub3JpZ2luYWwoKTsKIAkJCWlmIChyZWZlcmVuY2UudHlw
ZUFyZ3VtZW50cyA9PSBudWxsCiAJCQkJCSYmICgob3JpZ2luYWwudHlwZVZhcmlhYmxlcygpICE9
IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMgJiYgci5tZW50aW9uc0FueShvcmlnaW5hbC50eXBl
VmFyaWFibGVzKCksIC0xKSkKLQkJCQkJCXx8IChvcmlnaW5hbC5pc0NvbnN0cnVjdG9yKCkgJiYg
b3JpZ2luYWwuZGVjbGFyaW5nQ2xhc3MudHlwZVZhcmlhYmxlcygpICE9IEJpbmRpbmcuTk9fVFlQ
RV9WQVJJQUJMRVMgJiYgci5tZW50aW9uc0FueShvcmlnaW5hbC5kZWNsYXJpbmdDbGFzcy50eXBl
VmFyaWFibGVzKCksIC0xKSkpKSAKKwkJCQkJCXx8IChvcmlnaW5hbC5pc0NvbnN0cnVjdG9yKCkg
JiYgb3JpZ2luYWwuZGVjbGFyaW5nQ2xhc3MudHlwZVZhcmlhYmxlcygpICE9IEJpbmRpbmcuTk9f
VFlQRV9WQVJJQUJMRVMpKSkKKwkJCQkJCQkvLyBub3QgY2hlY2tpbmcgci5tZW50aW9uc0FueSBm
b3IgY29uc3RydWN0b3JzLCBiZWNhdXNlIEE6Om5ldyByZXNvbHZlcyB0byB0aGUgcmF3IHR5cGUK
KwkJCQkJCQkvLyB3aGVyZWFzIGluIGZhY3QgdGhlIHR5cGUgb2YgYWxsIGV4cHJlc3Npb25zIG9m
IHRoaXMgc2hhcGUgZGVwZW5kcyBvbiB0aGVpciB0eXBlIHZhcmlhYmxlIChpZiBhbnkpCiAJCQl7
CiAJCQkJSW52b2NhdGlvblJlY29yZCBwcmV2SW52b2NhdGlvbiA9IGluZmVyZW5jZUNvbnRleHQu
ZW50ZXJQb2x5SW52b2NhdGlvbihyZWZlcmVuY2UsIG51bGwvKm5vIGludm9jYXRpb24gYXJndW1l
bnRzIGF2YWlsYWJsZSovKTsKIApAQCAtMjc4LDcgKzI4MCw5IEBACiAJCQkJCWluZmVySW52b2Nh
dGlvbkFwcGxpY2FiaWxpdHkoaW5mZXJlbmNlQ29udGV4dCwgb3JpZ2luYWwsIGZ1bmN0aW9uVHlw
ZS5wYXJhbWV0ZXJzLCBvcmlnaW5hbC5pc0NvbnN0cnVjdG9yKCkvKm1pbWljIGEgZGlhbW9uZD8q
LywgaW5mZXJlbmNlQ29udGV4dC5pbmZlcmVuY2VLaW5kKTsKIAkJCQkJaWYgKCFpbmZlclBvbHlJ
bnZvY2F0aW9uVHlwZShpbmZlcmVuY2VDb250ZXh0LCByZWZlcmVuY2UsIHIsIG9yaWdpbmFsKSkK
IAkJCQkJCXJldHVybiBGQUxTRTsKLQkJCQkJcmV0dXJuIG51bGw7IC8vIGFscmVhZHkgaW5jb3Jw
b3JhdGVkCisJCQkJCWlmICghb3JpZ2luYWwuaXNDb25zdHJ1Y3RvcigpIHx8IHJlZmVyZW5jZS5y
ZWNlaXZlclR5cGUudHlwZUFyZ3VtZW50cygpID09IG51bGwpCisJCQkJCQlyZXR1cm4gbnVsbDsg
Ly8gYWxyZWFkeSBpbmNvcnBvcmF0ZWQKKwkJCQkJLy8gZm9yIEZvbzxCYXI+OjpuZXcgd2UgbmVl
ZCB0byAoaWxsZWdhbGx5KSBhZGQgb25lIG1vcmUgY29uc3RyYWludCBiZWxvdyB0byBnZXQgdG8g
dGhlIEJhcgogCQkJCX0gY2F0Y2ggKEluZmVyZW5jZUZhaWx1cmVFeGNlcHRpb24gZSkgewogCQkJ
CQlyZXR1cm4gRkFMU0U7CiAJCQkJfSBmaW5hbGx5IHsKQEAgLTM2NSw3ICszNjksOSBAQAogCQkJ
CQkJdG9SZXNvbHZlID0gdHJ1ZTsKIAkJCQl9CiAJCQkJaWYgKHRvUmVzb2x2ZSkgewotCQkJCQlC
b3VuZFNldCBzb2x1dGlvbiA9IGluZmVyZW5jZUNvbnRleHQuc29sdmUoKTsgLy8gVE9ETzogbWlu
aW1hbCByZXNvbHZpbmcgZm9yIG9ubHkgzrEKKwkJCQkJQm91bmRTZXQgc29sdXRpb24gPSBpbmZl
cmVuY2VDb250ZXh0LnNvbHZlKG5ldyBJbmZlcmVuY2VWYXJpYWJsZVtde2FscGhhfSk7CisJCQkJ
CWlmIChzb2x1dGlvbiA9PSBudWxsKQorCQkJCQkJcmV0dXJuIGZhbHNlOwogCQkJCQlUeXBlQmlu
ZGluZyB1ID0gc29sdXRpb24uZ2V0SW5zdGFudGlhdGlvbihhbHBoYSkuY2FwdHVyZShpbmZlcmVu
Y2VDb250ZXh0LnNjb3BlLCBpbnZvY2F0aW9uU2l0ZS5zb3VyY2VTdGFydCgpKTsgLy8gVE9ETyBt
YWtlIHBvc2l0aW9uIHVuaXF1ZT8KIAkJCQkJQ29uc3RyYWludFR5cGVGb3JtdWxhIG5ld0NvbnN0
cmFpbnQgPSBuZXcgQ29uc3RyYWludFR5cGVGb3JtdWxhKHUsIHRhcmdldFR5cGUsIENPTVBBVElC
TEUpOwogCQkJCQlyZXR1cm4gaW5mZXJlbmNlQ29udGV4dC5yZWR1Y2VBbmRJbmNvcnBvcmF0ZShu
ZXdDb25zdHJhaW50KTsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3RyYWludFR5cGVG
b3JtdWxhLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRUeXBlRm9ybXVsYS5qYXZhCmlu
ZGV4IDIyNDQxYWYuLjVkNWVlYjkgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3RyYWlu
dFR5cGVGb3JtdWxhLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50VHlwZUZvcm11
bGEuamF2YQpAQCAtMTk2LDcgKzE5Niw5IEBACiAJcHJpdmF0ZSBPYmplY3QgcmVkdWNlU3ViVHlw
ZShTY29wZSBzY29wZSwgVHlwZUJpbmRpbmcgc3ViQ2FuZGlkYXRlLCBUeXBlQmluZGluZyBzdXBl
ckNhbmRpZGF0ZSkgewogCQkvLyAxOC4yLjMgU3VidHlwaW5nIENvbnN0cmFpbnRzCiAJCWlmIChz
dWJDYW5kaWRhdGUuaXNQcm9wZXJUeXBlKHRydWUpICYmIHN1cGVyQ2FuZGlkYXRlLmlzUHJvcGVy
VHlwZSh0cnVlKSkgewotCQkJaWYgKHN1YkNhbmRpZGF0ZS5pc0NvbXBhdGlibGVXaXRoKHN1cGVy
Q2FuZGlkYXRlLCBzY29wZSkpCisJCQlpZiAodGhpcy5pc1NvZnQgCisJCQkJCT8gc3ViQ2FuZGlk
YXRlLmlzQ29tcGF0aWJsZVdpdGgoc3VwZXJDYW5kaWRhdGUsIHNjb3BlKQorCQkJCQk6IHN1YkNh
bmRpZGF0ZS5pc1N1YnR5cGVPZihzdXBlckNhbmRpZGF0ZSkpCiAJCQkJcmV0dXJuIFRSVUU7CiAJ
CQlyZXR1cm4gRkFMU0U7CiAJCX0KQEAgLTI4MCw3ICsyODIsMTUgQEAKIAkJCQkJSW5mZXJlbmNl
Q29udGV4dDE4Lm1pc3NpbmdJbXBsZW1lbnRhdGlvbigiTllJIik7IC8vJE5PTi1OTFMtMSQKIAkJ
CQlyZXR1cm4gRkFMU0U7CiAJCQljYXNlIEJpbmRpbmcuSU5URVJTRUNUSU9OX1RZUEU6Ci0JCQkJ
SW5mZXJlbmNlQ29udGV4dDE4Lm1pc3NpbmdJbXBsZW1lbnRhdGlvbigiTllJIik7IC8vJE5PTi1O
TFMtMSQKKwkJCQlzdXBlckNhbmRpZGF0ZSA9ICgoV2lsZGNhcmRCaW5kaW5nKSBzdXBlckNhbmRp
ZGF0ZSkuYWxsQm91bmRzKCk7CisJCQkJLy8kRkFMTC1USFJPVUdIJAorCQkJY2FzZSBCaW5kaW5n
LklOVEVSU0VDVElPTl9DQVNUX1RZUEU6CisJCQkJVHlwZUJpbmRpbmdbXSBpbnRlcnNlY3RpbmdU
eXBlcyA9ICgoSW50ZXJzZWN0aW9uQ2FzdFR5cGVCaW5kaW5nKSBzdXBlckNhbmRpZGF0ZSkuaW50
ZXJzZWN0aW5nVHlwZXM7CisJCQkJQ29uc3RyYWludEZvcm11bGFbXSByZXN1bHQgPSBuZXcgQ29u
c3RyYWludEZvcm11bGFbaW50ZXJzZWN0aW5nVHlwZXMubGVuZ3RoXTsKKwkJCQlmb3IgKGludCBp
ID0gMDsgaSA8IGludGVyc2VjdGluZ1R5cGVzLmxlbmd0aDsgaSsrKSB7CisJCQkJCXJlc3VsdFtp
XSA9IG5ldyBDb25zdHJhaW50VHlwZUZvcm11bGEoc3ViQ2FuZGlkYXRlLCBpbnRlcnNlY3RpbmdU
eXBlc1tpXSwgU1VCVFlQRSk7CisJCQkJfQorCQkJCXJldHVybiByZXN1bHQ7CiAJCX0KIAkJdGhy
b3cgbmV3IElsbGVnYWxTdGF0ZUV4Y2VwdGlvbigiVW5leHBlY3RlZCBSSFMgIitzdXBlckNhbmRp
ZGF0ZSk7IC8vJE5PTi1OTFMtMSQKIAl9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVy
ZW5jZUNvbnRleHQxOC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9JbmZlcmVuY2VDb250ZXh0MTguamF2
YQppbmRleCA3YThhOTg5Li4yZWY1MzAzIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVy
ZW5jZUNvbnRleHQxOC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvSW5mZXJlbmNlQ29udGV4dDE4
LmphdmEKQEAgLTc3MSw2ICs3NzEsMTUgQEAKIAogCQlyZXR1cm4gcmVzb2x2ZSh0aGlzLmluZmVy
ZW5jZVZhcmlhYmxlcyk7CiAJfQorCQorCXB1YmxpYyAvKkBOdWxsYWJsZSovIEJvdW5kU2V0IHNv
bHZlKEluZmVyZW5jZVZhcmlhYmxlW10gdG9SZXNvbHZlKSB0aHJvd3MgSW5mZXJlbmNlRmFpbHVy
ZUV4Y2VwdGlvbiB7CisJCWlmICghcmVkdWNlKCkpCisJCQlyZXR1cm4gbnVsbDsKKwkJaWYgKCF0
aGlzLmN1cnJlbnRCb3VuZHMuaW5jb3Jwb3JhdGUodGhpcykpCisJCQlyZXR1cm4gbnVsbDsKKwor
CQlyZXR1cm4gcmVzb2x2ZSh0b1Jlc29sdmUpOworCX0KIAogCS8qKgogCSAqIEpMUyAxOC4yLiBy
ZWR1Y2UgYWxsIGluaXRpYWwgY29uc3RyYWludHMg
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>240507</attachid>
            <date>2014-03-04 10:29:00 -0500</date>
            <delta_ts>2014-03-04 17:36:37 -0500</delta_ts>
            <desc>patch updated for current HEAD (2014/03/04)</desc>
            <filename>Bug-426537--18inference-Eclipse-compiler-thinks-I-su.patch</filename>
            <type>text/plain</type>
            <size>7866</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNUeXBlVGVz
dC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xp
cHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0Lmph
dmEKaW5kZXggYmEyM2QxZi4uODkxMDc3MiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0LmphdmEKQEAgLTI5NDUwLDggKzI5NDUwLDEzIEBA
CiAJCSItLS0tLS0tLS0tXG4iICsKIAkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA2KVxu
IiArCiAJCSIJcmV0dXJuIGZvbyhpLCBmKTtcbiIgKworCQkodGhpcy5jb21wbGlhbmNlTGV2ZWwg
PCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84PwogCQkiCSAgICAgICBeXl5eXl5eXl5cbiIgKwot
CQkiVHlwZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBPYmplY3QmU2VyaWFsaXphYmxl
JkNsb25lYWJsZSB0byBPYmplY3RbXVxuIiArCisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29u
dmVydCBmcm9tIE9iamVjdCZTZXJpYWxpemFibGUmQ2xvbmVhYmxlIHRvIE9iamVjdFtdXG4iCisJ
CToKKwkJIgkgICAgICAgXl5eXG4iICsgCisJCSJUaGUgbWV0aG9kIGZvbyhULCBUKSBpbiB0aGUg
dHlwZSBYIGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRzIChpbnRbXSwgZmxvYXRb
XSlcbiIgCisJCSkrCiAJCSItLS0tLS0tLS0tXG4iLAogCQkvLyBqYXZhYyBvcHRpb25zCiAJCUph
dmFjVGVzdE9wdGlvbnMuSmF2YWNIYXNBQnVnLkphdmFjQnVnRml4ZWRfNl8xMCAvKiBqYXZhYyB0
ZXN0IG9wdGlvbnMgKi8pOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMu
Y29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Np
b24vR2VuZXJpY3NSZWdyZXNzaW9uVGVzdF8xXzguamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
LnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9y
ZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3RfMV84LmphdmEKaW5kZXggYzgxNTU1Yy4u
ZjhiYWM1MyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIv
c3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJp
Y3NSZWdyZXNzaW9uVGVzdF8xXzguamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0
cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVz
c2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25UZXN0XzFfOC5qYXZhCkBAIC0yNjMxLDQgKzI2MzEsMzIg
QEAKIAkJCSJcbiIKIAkJfSk7CiB9CitwdWJsaWMgdm9pZCB0ZXN0QnVnNDI2NTM3KCkgeworCXJ1
bk5lZ2F0aXZlVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJYLmphdmEiLAorCQkJInB1Ymxp
YyBjbGFzcyBYIHtcbiIgKyAKKwkJCSIJdm9pZCBmb28oSltdIGxpc3QsIEk8Sjw/Pj4gaSkge1xu
IiArIAorCQkJIgkJc29ydChsaXN0LCBpKTtcbiIgKyAKKwkJCSIJfVxuIiArIAorCQkJIglcbiIg
KyAKKwkJCSIJPFQ+IFRbXSBzb3J0KFRbXSBsaXN0LCBJPD8gc3VwZXIgVD4gaSkge1xuIiArIAor
CQkJIgkJcmV0dXJuIGxpc3Q7XG4iICsgCisJCQkiCX1cbiIgKyAKKwkJCSJ9XG4iICsgCisJCQki
aW50ZXJmYWNlIEk8VD4ge31cbiIgKyAKKwkJCSJpbnRlcmZhY2UgSjxUPiB7fVxuIgorCQl9LAor
CQkiLS0tLS0tLS0tLVxuIiArIAorCQkiMS4gV0FSTklORyBpbiBYLmphdmEgKGF0IGxpbmUgMilc
biIgKyAKKwkJIgl2b2lkIGZvbyhKW10gbGlzdCwgSTxKPD8+PiBpKSB7XG4iICsgCisJCSIJICAg
ICAgICAgXlxuIiArIAorCQkiSiBpcyBhIHJhdyB0eXBlLiBSZWZlcmVuY2VzIHRvIGdlbmVyaWMg
dHlwZSBKPFQ+IHNob3VsZCBiZSBwYXJhbWV0ZXJpemVkXG4iICsgCisJCSItLS0tLS0tLS0tXG4i
ICsgCisJCSIyLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMylcbiIgKyAKKwkJIglzb3J0KGxp
c3QsIGkpO1xuIiArIAorCQkiCV5eXl5cbiIgKyAKKwkJIlRoZSBtZXRob2Qgc29ydChUW10sIEk8
PyBzdXBlciBUPikgaW4gdGhlIHR5cGUgWCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3Vt
ZW50cyAoSltdLCBJPEo8Pz4+KVxuIiArIAorCQkiLS0tLS0tLS0tLVxuIik7Cit9CiB9CmRpZmYg
LS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYS5qYXZhIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2xvb2t1cC9Db25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEuamF2YQppbmRleCBhMzJh
N2FmLi5lYzA1MDU5IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRFeHByZXNz
aW9uRm9ybXVsYS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3RyYWludEV4cHJlc3Npb25G
b3JtdWxhLmphdmEKQEAgLTIwNyw3ICsyMDcsNyBAQAogCQkJCQkJCQkJfHwgZXhwclR5cGUuaXND
b21wYXRpYmxlV2l0aChyKSkpCiAJCQkJCQkJCXJldHVybiBGQUxTRTsKIAkJCQkJCX0gZWxzZSB7
Ci0JCQkJCQkJcmVzdWx0LmFkZChuZXcgQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhKGV4cHIs
IHIsIENPTVBBVElCTEUpKTsKKwkJCQkJCQlyZXN1bHQuYWRkKG5ldyBDb25zdHJhaW50RXhwcmVz
c2lvbkZvcm11bGEoZXhwciwgciwgQ09NUEFUSUJMRSwgdGhpcy5pc1NvZnQpKTsKIAkJCQkJCX0K
IAkJCQkJfQogCQkJCX0KQEAgLTMwMiw3ICszMDIsOSBAQAogCQkJTWV0aG9kQmluZGluZyBvcmln
aW5hbCA9IGNvbXBpbGVUaW1lRGVjbC5vcmlnaW5hbCgpOwogCQkJaWYgKHJlZmVyZW5jZS50eXBl
QXJndW1lbnRzID09IG51bGwKIAkJCQkJJiYgKChvcmlnaW5hbC50eXBlVmFyaWFibGVzKCkgIT0g
QmluZGluZy5OT19UWVBFX1ZBUklBQkxFUyAmJiByLm1lbnRpb25zQW55KG9yaWdpbmFsLnR5cGVW
YXJpYWJsZXMoKSwgLTEpKQotCQkJCQkJfHwgKG9yaWdpbmFsLmlzQ29uc3RydWN0b3IoKSAmJiBv
cmlnaW5hbC5kZWNsYXJpbmdDbGFzcy50eXBlVmFyaWFibGVzKCkgIT0gQmluZGluZy5OT19UWVBF
X1ZBUklBQkxFUyAmJiByLm1lbnRpb25zQW55KG9yaWdpbmFsLmRlY2xhcmluZ0NsYXNzLnR5cGVW
YXJpYWJsZXMoKSwgLTEpKSkpIAorCQkJCQkJfHwgKG9yaWdpbmFsLmlzQ29uc3RydWN0b3IoKSAm
JiBvcmlnaW5hbC5kZWNsYXJpbmdDbGFzcy50eXBlVmFyaWFibGVzKCkgIT0gQmluZGluZy5OT19U
WVBFX1ZBUklBQkxFUykpKQorCQkJCQkJCS8vIG5vdCBjaGVja2luZyByLm1lbnRpb25zQW55IGZv
ciBjb25zdHJ1Y3RvcnMsIGJlY2F1c2UgQTo6bmV3IHJlc29sdmVzIHRvIHRoZSByYXcgdHlwZQor
CQkJCQkJCS8vIHdoZXJlYXMgaW4gZmFjdCB0aGUgdHlwZSBvZiBhbGwgZXhwcmVzc2lvbnMgb2Yg
dGhpcyBzaGFwZSBkZXBlbmRzIG9uIHRoZWlyIHR5cGUgdmFyaWFibGUgKGlmIGFueSkKIAkJCXsK
IAkJCQlTdXNwZW5kZWRJbmZlcmVuY2VSZWNvcmQgcHJldkludm9jYXRpb24gPSBpbmZlcmVuY2VD
b250ZXh0LmVudGVyUG9seUludm9jYXRpb24ocmVmZXJlbmNlLCBudWxsLypubyBpbnZvY2F0aW9u
IGFyZ3VtZW50cyBhdmFpbGFibGUqLyk7CiAKQEAgLTMxMSw3ICszMTMsOSBAQAogCQkJCQlpbmZl
ckludm9jYXRpb25BcHBsaWNhYmlsaXR5KGluZmVyZW5jZUNvbnRleHQsIG9yaWdpbmFsLCBmdW5j
dGlvblR5cGUucGFyYW1ldGVycywgb3JpZ2luYWwuaXNDb25zdHJ1Y3RvcigpLyptaW1pYyBhIGRp
YW1vbmQ/Ki8sIGluZmVyZW5jZUNvbnRleHQuaW5mZXJlbmNlS2luZCk7CiAJCQkJCWlmICghaW5m
ZXJQb2x5SW52b2NhdGlvblR5cGUoaW5mZXJlbmNlQ29udGV4dCwgcmVmZXJlbmNlLCByLCBvcmln
aW5hbCkpCiAJCQkJCQlyZXR1cm4gRkFMU0U7Ci0JCQkJCXJldHVybiBudWxsOyAvLyBhbHJlYWR5
IGluY29ycG9yYXRlZAorCQkJCQlpZiAoIW9yaWdpbmFsLmlzQ29uc3RydWN0b3IoKSB8fCByZWZl
cmVuY2UucmVjZWl2ZXJUeXBlLnR5cGVBcmd1bWVudHMoKSA9PSBudWxsKQorCQkJCQkJcmV0dXJu
IG51bGw7IC8vIGFscmVhZHkgaW5jb3Jwb3JhdGVkCisJCQkJCS8vIGZvciBGb288QmFyPjo6bmV3
IHdlIG5lZWQgdG8gKGlsbGVnYWxseSkgYWRkIG9uZSBtb3JlIGNvbnN0cmFpbnQgYmVsb3cgdG8g
Z2V0IHRvIHRoZSBCYXIKIAkJCQl9IGNhdGNoIChJbmZlcmVuY2VGYWlsdXJlRXhjZXB0aW9uIGUp
IHsKIAkJCQkJcmV0dXJuIEZBTFNFOwogCQkJCX0gZmluYWxseSB7CkBAIC0zOTgsNyArNDAyLDkg
QEAKIAkJCQkJCXRvUmVzb2x2ZSA9IHRydWU7CiAJCQkJfQogCQkJCWlmICh0b1Jlc29sdmUpIHsK
LQkJCQkJQm91bmRTZXQgc29sdXRpb24gPSBpbmZlcmVuY2VDb250ZXh0LnNvbHZlKCk7IC8vIFRP
RE86IG1pbmltYWwgcmVzb2x2aW5nIGZvciBvbmx5IM6xCisJCQkJCUJvdW5kU2V0IHNvbHV0aW9u
ID0gaW5mZXJlbmNlQ29udGV4dC5zb2x2ZShuZXcgSW5mZXJlbmNlVmFyaWFibGVbXXthbHBoYX0p
OworCQkJCQlpZiAoc29sdXRpb24gPT0gbnVsbCkKKwkJCQkJCXJldHVybiBmYWxzZTsKIAkJCQkJ
VHlwZUJpbmRpbmcgdSA9IHNvbHV0aW9uLmdldEluc3RhbnRpYXRpb24oYWxwaGEsIG51bGwpLmNh
cHR1cmUoaW5mZXJlbmNlQ29udGV4dC5zY29wZSwgaW52b2NhdGlvblNpdGUuc291cmNlU3RhcnQo
KSk7IC8vIFRPRE8gbWFrZSBwb3NpdGlvbiB1bmlxdWU/CiAJCQkJCUNvbnN0cmFpbnRUeXBlRm9y
bXVsYSBuZXdDb25zdHJhaW50ID0gQ29uc3RyYWludFR5cGVGb3JtdWxhLmNyZWF0ZSh1LCB0YXJn
ZXRUeXBlLCBDT01QQVRJQkxFKTsKIAkJCQkJcmV0dXJuIGluZmVyZW5jZUNvbnRleHQucmVkdWNl
QW5kSW5jb3Jwb3JhdGUobmV3Q29uc3RyYWludCk7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3Vw
L0NvbnN0cmFpbnRUeXBlRm9ybXVsYS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50VHlw
ZUZvcm11bGEuamF2YQppbmRleCA3ODI1NGRhLi42MzQwZDEwIDEwMDY0NAotLS0gYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
bG9va3VwL0NvbnN0cmFpbnRUeXBlRm9ybXVsYS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29u
c3RyYWludFR5cGVGb3JtdWxhLmphdmEKQEAgLTIwOSw3ICsyMDksOSBAQAogCXByaXZhdGUgT2Jq
ZWN0IHJlZHVjZVN1YlR5cGUoU2NvcGUgc2NvcGUsIFR5cGVCaW5kaW5nIHN1YkNhbmRpZGF0ZSwg
VHlwZUJpbmRpbmcgc3VwZXJDYW5kaWRhdGUpIHsKIAkJLy8gMTguMi4zIFN1YnR5cGluZyBDb25z
dHJhaW50cwogCQlpZiAoc3ViQ2FuZGlkYXRlLmlzUHJvcGVyVHlwZSh0cnVlKSAmJiBzdXBlckNh
bmRpZGF0ZS5pc1Byb3BlclR5cGUodHJ1ZSkpIHsKLQkJCWlmIChzdWJDYW5kaWRhdGUuaXNDb21w
YXRpYmxlV2l0aChzdXBlckNhbmRpZGF0ZSwgc2NvcGUpKQorCQkJaWYgKHRoaXMuaXNTb2Z0IAor
CQkJCQk/IHN1YkNhbmRpZGF0ZS5pc0NvbXBhdGlibGVXaXRoKHN1cGVyQ2FuZGlkYXRlLCBzY29w
ZSkKKwkJCQkJOiBzdWJDYW5kaWRhdGUuaXNTdWJ0eXBlT2Yoc3VwZXJDYW5kaWRhdGUpKQogCQkJ
CXJldHVybiBUUlVFOwogCQkJcmV0dXJuIEZBTFNFOwogCQl9CkBAIC0zMDYsNyArMzA4LDE1IEBA
CiAJCQkJfQogCQkJCXJldHVybiBGQUxTRTsKIAkJCWNhc2UgQmluZGluZy5JTlRFUlNFQ1RJT05f
VFlQRToKLQkJCQlJbmZlcmVuY2VDb250ZXh0MTgubWlzc2luZ0ltcGxlbWVudGF0aW9uKCJOWUki
KTsgLy8kTk9OLU5MUy0xJAorCQkJCXN1cGVyQ2FuZGlkYXRlID0gKChXaWxkY2FyZEJpbmRpbmcp
IHN1cGVyQ2FuZGlkYXRlKS5hbGxCb3VuZHMoKTsKKwkJCQkvLyRGQUxMLVRIUk9VR0gkCisJCQlj
YXNlIEJpbmRpbmcuSU5URVJTRUNUSU9OX0NBU1RfVFlQRToKKwkJCQlUeXBlQmluZGluZ1tdIGlu
dGVyc2VjdGluZ1R5cGVzID0gKChJbnRlcnNlY3Rpb25DYXN0VHlwZUJpbmRpbmcpIHN1cGVyQ2Fu
ZGlkYXRlKS5pbnRlcnNlY3RpbmdUeXBlczsKKwkJCQlDb25zdHJhaW50Rm9ybXVsYVtdIHJlc3Vs
dCA9IG5ldyBDb25zdHJhaW50Rm9ybXVsYVtpbnRlcnNlY3RpbmdUeXBlcy5sZW5ndGhdOworCQkJ
CWZvciAoaW50IGkgPSAwOyBpIDwgaW50ZXJzZWN0aW5nVHlwZXMubGVuZ3RoOyBpKyspIHsKKwkJ
CQkJcmVzdWx0W2ldID0gQ29uc3RyYWludFR5cGVGb3JtdWxhLmNyZWF0ZShzdWJDYW5kaWRhdGUs
IGludGVyc2VjdGluZ1R5cGVzW2ldLCBTVUJUWVBFLCB0aGlzLmlzU29mdCk7CisJCQkJfQorCQkJ
CXJldHVybiByZXN1bHQ7CiAJCX0KIAkJdGhyb3cgbmV3IElsbGVnYWxTdGF0ZUV4Y2VwdGlvbigi
VW5leHBlY3RlZCBSSFMgIitzdXBlckNhbmRpZGF0ZSk7IC8vJE5PTi1OTFMtMSQKIAl9CmRpZmYg
LS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVyZW5jZUNvbnRleHQxOC5qYXZhIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xv
b2t1cC9JbmZlcmVuY2VDb250ZXh0MTguamF2YQppbmRleCBmYjBkY2YxLi5iNjQ4NGQwIDEwMDY0
NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVyZW5jZUNvbnRleHQxOC5qYXZhCisrKyBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9sb29rdXAvSW5mZXJlbmNlQ29udGV4dDE4LmphdmEKQEAgLTg1OCw2ICs4NTgsMTUgQEAKIAog
CQlyZXR1cm4gcmVzb2x2ZSh0aGlzLmluZmVyZW5jZVZhcmlhYmxlcyk7CiAJfQorCQorCXB1Ymxp
YyAvKkBOdWxsYWJsZSovIEJvdW5kU2V0IHNvbHZlKEluZmVyZW5jZVZhcmlhYmxlW10gdG9SZXNv
bHZlKSB0aHJvd3MgSW5mZXJlbmNlRmFpbHVyZUV4Y2VwdGlvbiB7CisJCWlmICghcmVkdWNlKCkp
CisJCQlyZXR1cm4gbnVsbDsKKwkJaWYgKCF0aGlzLmN1cnJlbnRCb3VuZHMuaW5jb3Jwb3JhdGUo
dGhpcykpCisJCQlyZXR1cm4gbnVsbDsKKworCQlyZXR1cm4gcmVzb2x2ZSh0b1Jlc29sdmUpOwor
CX0KIAogCS8qKgogCSAqIEpMUyAxOC4yLiByZWR1Y2UgYWxsIGluaXRpYWwgY29uc3RyYWludHMg
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>240520</attachid>
            <date>2014-03-04 17:36:00 -0500</date>
            <delta_ts>2014-10-27 14:51:31 -0400</delta_ts>
            <desc>remainder of the patch</desc>
            <filename>Bug-426537--18inference-Eclipse-compiler-thinks-I-su.patch</filename>
            <type>text/plain</type>
            <size>2705</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNUeXBlVGVz
dC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xp
cHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0Lmph
dmEKaW5kZXggYmEyM2QxZi4uODkxMDc3MiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0LmphdmEKQEAgLTI5NDUwLDggKzI5NDUwLDEzIEBA
CiAJCSItLS0tLS0tLS0tXG4iICsKIAkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA2KVxu
IiArCiAJCSIJcmV0dXJuIGZvbyhpLCBmKTtcbiIgKworCQkodGhpcy5jb21wbGlhbmNlTGV2ZWwg
PCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84PwogCQkiCSAgICAgICBeXl5eXl5eXl5cbiIgKwot
CQkiVHlwZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBPYmplY3QmU2VyaWFsaXphYmxl
JkNsb25lYWJsZSB0byBPYmplY3RbXVxuIiArCisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29u
dmVydCBmcm9tIE9iamVjdCZTZXJpYWxpemFibGUmQ2xvbmVhYmxlIHRvIE9iamVjdFtdXG4iCisJ
CToKKwkJIgkgICAgICAgXl5eXG4iICsgCisJCSJUaGUgbWV0aG9kIGZvbyhULCBUKSBpbiB0aGUg
dHlwZSBYIGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRzIChpbnRbXSwgZmxvYXRb
XSlcbiIgCisJCSkrCiAJCSItLS0tLS0tLS0tXG4iLAogCQkvLyBqYXZhYyBvcHRpb25zCiAJCUph
dmFjVGVzdE9wdGlvbnMuSmF2YWNIYXNBQnVnLkphdmFjQnVnRml4ZWRfNl8xMCAvKiBqYXZhYyB0
ZXN0IG9wdGlvbnMgKi8pOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMu
Y29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Np
b24vR2VuZXJpY3NSZWdyZXNzaW9uVGVzdF8xXzguamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
LnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9y
ZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3RfMV84LmphdmEKaW5kZXggNWRjN2M1OS4u
MTQ3OTAwZiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIv
c3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJp
Y3NSZWdyZXNzaW9uVGVzdF8xXzguamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0
cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVz
c2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25UZXN0XzFfOC5qYXZhCkBAIC0yNjMxLDcgKzI2MzEsNyBA
QAogCQkJIlxuIgogCQl9KTsKIH0KLXB1YmxpYyB2b2lkIF90ZXN0QnVnNDI2NTM3KCkgeworcHVi
bGljIHZvaWQgdGVzdEJ1ZzQyNjUzNygpIHsKIAlydW5OZWdhdGl2ZVRlc3QoCiAJCW5ldyBTdHJp
bmdbXSB7CiAJCQkiWC5qYXZhIiwKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3RyYWlu
dFR5cGVGb3JtdWxhLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRUeXBlRm9ybXVsYS5q
YXZhCmluZGV4IDljNTM3MTcuLjYzNDBkMTAgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29u
c3RyYWludFR5cGVGb3JtdWxhLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50VHlw
ZUZvcm11bGEuamF2YQpAQCAtMjA5LDcgKzIwOSw5IEBACiAJcHJpdmF0ZSBPYmplY3QgcmVkdWNl
U3ViVHlwZShTY29wZSBzY29wZSwgVHlwZUJpbmRpbmcgc3ViQ2FuZGlkYXRlLCBUeXBlQmluZGlu
ZyBzdXBlckNhbmRpZGF0ZSkgewogCQkvLyAxOC4yLjMgU3VidHlwaW5nIENvbnN0cmFpbnRzCiAJ
CWlmIChzdWJDYW5kaWRhdGUuaXNQcm9wZXJUeXBlKHRydWUpICYmIHN1cGVyQ2FuZGlkYXRlLmlz
UHJvcGVyVHlwZSh0cnVlKSkgewotCQkJaWYgKHN1YkNhbmRpZGF0ZS5pc0NvbXBhdGlibGVXaXRo
KHN1cGVyQ2FuZGlkYXRlLCBzY29wZSkpCisJCQlpZiAodGhpcy5pc1NvZnQgCisJCQkJCT8gc3Vi
Q2FuZGlkYXRlLmlzQ29tcGF0aWJsZVdpdGgoc3VwZXJDYW5kaWRhdGUsIHNjb3BlKQorCQkJCQk6
IHN1YkNhbmRpZGF0ZS5pc1N1YnR5cGVPZihzdXBlckNhbmRpZGF0ZSkpCiAJCQkJcmV0dXJuIFRS
VUU7CiAJCQlyZXR1cm4gRkFMU0U7CiAJCX0=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>240678</attachid>
            <date>2014-03-08 04:34:00 -0500</date>
            <delta_ts>2014-03-08 08:30:25 -0500</delta_ts>
            <desc>Point fix</desc>
            <filename>Pointfix.patch</filename>
            <type>text/plain</type>
            <size>16852</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0JhdGNoQ29tcGlsZXJU
ZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2Vj
bGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9CYXRjaENvbXBpbGVyVGVz
dC5qYXZhCmluZGV4IDY2OGViM2IuLjgzMWQzNmEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21w
aWxlci9yZWdyZXNzaW9uL0JhdGNoQ29tcGlsZXJUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Nv
bXBpbGVyL3JlZ3Jlc3Npb24vQmF0Y2hDb21waWxlclRlc3QuamF2YQpAQCAtMTkxMyw2ICsxOTEz
LDcgQEAKIAkJCSIJCTxvcHRpb24ga2V5PVwib3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIu
ZW11bGF0ZUphdmFjQnVnODAzMTc0NFwiIHZhbHVlPVwiZW5hYmxlZFwiLz5cbiIgKwogCQkJIgkJ
PG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5nZW5lcmF0ZUNsYXNz
RmlsZXNcIiB2YWx1ZT1cImVuYWJsZWRcIi8+XG4iICsgCiAJCQkiCQk8b3B0aW9uIGtleT1cIm9y
Zy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLm1heFByb2JsZW1QZXJVbml0XCIgdmFsdWU9XCIx
MDBcIi8+XG4iICsgCisJCQkiCQk8b3B0aW9uIGtleT1cIm9yZy5lY2xpcHNlLmpkdC5jb3JlLmNv
bXBpbGVyLnBvc3RSZXNvbHV0aW9uUmF3VHlwZUNvbXBhdGliaWxpdHlDaGVja1wiIHZhbHVlPVwi
ZW5hYmxlZFwiLz5cbiIgKwogCQkJIgkJPG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBzZS5qZHQuY29y
ZS5jb21waWxlci5wcm9ibGVtLmFubm90YXRpb25TdXBlckludGVyZmFjZVwiIHZhbHVlPVwid2Fy
bmluZ1wiLz5cbiIgKyAKIAkJCSIJCTxvcHRpb24ga2V5PVwib3JnLmVjbGlwc2UuamR0LmNvcmUu
Y29tcGlsZXIucHJvYmxlbS5hc3NlcnRJZGVudGlmaWVyXCIgdmFsdWU9XCJ3YXJuaW5nXCIvPlxu
IiArIAogCQkJIgkJPG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5w
cm9ibGVtLmF1dG9ib3hpbmdcIiB2YWx1ZT1cImlnbm9yZVwiLz5cbiIgKyAKZGlmZiAtLWdpdCBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQv
Y29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3QuamF2
YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3Qu
amF2YQppbmRleCBiMjNlNTk4Li4yYzliOTdhIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGls
ZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25UZXN0LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3Rz
L2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVzdC5qYXZhCkBAIC00MjYx
LDcgKzQyNjEsNyBAQAogCQkiWm9yayBjYW5ub3QgYmUgcmVzb2x2ZWQgdG8gYSB0eXBlXG4iICsg
CiAJCSItLS0tLS0tLS0tXG4iKTsKIH0KLS8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdz
L3Nob3dfYnVnLmNnaT9pZD00Mjk3MzMsIFsxLjhdW2J5dGVjb2RlXSBCYWQgdHlwZSBvbiBvcGVy
YW5kIHN0YWNrCisvL2h0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9p
ZD00Mjk3MzMsIFsxLjhdW2J5dGVjb2RlXSBCYWQgdHlwZSBvbiBvcGVyYW5kIHN0YWNrCiBwdWJs
aWMgdm9pZCB0ZXN0NDI5NzMzKCkgewogCWlmICh0aGlzLmNvbXBsaWFuY2VMZXZlbCA8IENsYXNz
RmlsZUNvbnN0YW50cy5KREsxXzcpCiAJCXJldHVybjsgLy8gdXNlcyBkaWFtb25kLgpAQCAtNDI4
Nyw3ICs0Mjg3LDcgQEAKIAkJfSwKIAkJIjEuMSIpOwogfQotLy8gaHR0cHM6Ly9idWdzLmVjbGlw
c2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQyOTczMywgWzEuOF1bYnl0ZWNvZGVdIEJhZCB0
eXBlIG9uIG9wZXJhbmQgc3RhY2sKKy8vaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hv
d19idWcuY2dpP2lkPTQyOTczMywgWzEuOF1bYnl0ZWNvZGVdIEJhZCB0eXBlIG9uIG9wZXJhbmQg
c3RhY2sKIHB1YmxpYyB2b2lkIHRlc3Q0Mjk3MzNhKCkgewogCWlmICh0aGlzLmNvbXBsaWFuY2VM
ZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzcpCiAJCXJldHVybjsgLy8gdXNlcyBkaWFt
b25kLgpAQCAtNDM1MCw1ICs0MzUwLDE5OCBAQAogCQl9LAogCQkiMS4xIik7CiB9CisvLyBodHRw
czovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDI2NTM3LCAgWzEuOF1b
aW5mZXJlbmNlXSBFY2xpcHNlIGNvbXBpbGVyIHRoaW5rcyBJPD8gc3VwZXIgSj4gaXMgY29tcGF0
aWJsZSB3aXRoIEk8Sjw/Pj4gLSByYXcgdHlwZSBKIGludm9sdmVkIAorcHVibGljIHZvaWQgdGVz
dEJ1ZzQyNjUzNygpIHsgLy8gbm9uIGdlbmVyaWMgY2FzZQorCXJ1bk5lZ2F0aXZlVGVzdCgKKwkJ
bmV3IFN0cmluZ1tdIHsKKwkJCSJYLmphdmEiLAorCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKwor
CQkJIgl2b2lkIGZvbyhKW10gbGlzdCwgSTxKPD8+PiBpKSB7XG4iICsKKwkJCSIJCXNvcnQobGlz
dCwgaSk7XG4iICsKKwkJCSIJfVxuIiArCisJCQkiCUpbXSBzb3J0KEpbXSBsaXN0LCBJPD8gc3Vw
ZXIgSj4gaSkge1xuIiArCisJCQkiCQlyZXR1cm4gbGlzdDtcbiIgKworCQkJIgl9XG4iICsKKwkJ
CSJ9XG4iICsKKwkJCSJpbnRlcmZhY2UgSTxUPiB7fVxuIiArCisJCQkiaW50ZXJmYWNlIEo8VD4g
e31cbiIKKwkJfSwKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjEuIFdBUk5JTkcgaW4gWC5qYXZh
IChhdCBsaW5lIDIpXG4iICsgCisJCSIJdm9pZCBmb28oSltdIGxpc3QsIEk8Sjw/Pj4gaSkge1xu
IiArIAorCQkiCSAgICAgICAgIF5cbiIgKyAKKwkJIkogaXMgYSByYXcgdHlwZS4gUmVmZXJlbmNl
cyB0byBnZW5lcmljIHR5cGUgSjxUPiBzaG91bGQgYmUgcGFyYW1ldGVyaXplZFxuIiArIAorCQki
LS0tLS0tLS0tLVxuIiArIAorCQkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDMpXG4iICsg
CisJCSIJc29ydChsaXN0LCBpKTtcbiIgKyAKKwkJIgleXl5eXG4iICsgCisJCSJUaGUgbWV0aG9k
IHNvcnQoSltdLCBJPD8gc3VwZXIgSj4pIGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUg
Zm9yIHRoZSBhcmd1bWVudHMgKEpbXSwgSTxKPD8+PilcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIg
KyAKKwkJIjMuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDUpXG4iICsgCisJCSIJSltdIHNv
cnQoSltdIGxpc3QsIEk8PyBzdXBlciBKPiBpKSB7XG4iICsgCisJCSIJXlxuIiArIAorCQkiSiBp
cyBhIHJhdyB0eXBlLiBSZWZlcmVuY2VzIHRvIGdlbmVyaWMgdHlwZSBKPFQ+IHNob3VsZCBiZSBw
YXJhbWV0ZXJpemVkXG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSI0LiBXQVJOSU5HIGlu
IFguamF2YSAoYXQgbGluZSA1KVxuIiArIAorCQkiCUpbXSBzb3J0KEpbXSBsaXN0LCBJPD8gc3Vw
ZXIgSj4gaSkge1xuIiArIAorCQkiCSAgICAgICAgIF5cbiIgKyAKKwkJIkogaXMgYSByYXcgdHlw
ZS4gUmVmZXJlbmNlcyB0byBnZW5lcmljIHR5cGUgSjxUPiBzaG91bGQgYmUgcGFyYW1ldGVyaXpl
ZFxuIiArIAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiNS4gV0FSTklORyBpbiBYLmphdmEgKGF0
IGxpbmUgNSlcbiIgKyAKKwkJIglKW10gc29ydChKW10gbGlzdCwgSTw/IHN1cGVyIEo+IGkpIHtc
biIgKyAKKwkJIgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5cbiIgKyAKKwkJIkogaXMg
YSByYXcgdHlwZS4gUmVmZXJlbmNlcyB0byBnZW5lcmljIHR5cGUgSjxUPiBzaG91bGQgYmUgcGFy
YW1ldGVyaXplZFxuIiArIAorCQkiLS0tLS0tLS0tLVxuIik7Cit9CisvLyBodHRwczovL2J1Z3Mu
ZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDI2NTM3LCAgWzEuOF1baW5mZXJlbmNl
XSBFY2xpcHNlIGNvbXBpbGVyIHRoaW5rcyBJPD8gc3VwZXIgSj4gaXMgY29tcGF0aWJsZSB3aXRo
IEk8Sjw/Pj4gLSByYXcgdHlwZSBKIGludm9sdmVkIAorcHVibGljIHZvaWQgdGVzdEJ1ZzQyNjUz
N19nZW5lcmljKCkgeworCXJ1bk5lZ2F0aXZlVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJY
LmphdmEiLAorCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJIgl2b2lkIGZvbyhKW10gbGlz
dCwgSTxKPD8+PiBpKSB7XG4iICsKKwkJCSIJCXNvcnQobGlzdCwgaSk7XG4iICsKKwkJCSIJfVxu
IiArCisJCQkiCTxUPiBUW10gc29ydChUW10gbGlzdCwgSTw/IHN1cGVyIFQ+IGkpIHtcbiIgKwor
CQkJIgkJcmV0dXJuIGxpc3Q7XG4iICsKKwkJCSIJfVxuIiArCisJCQkifVxuIiArCisJCQkiaW50
ZXJmYWNlIEk8VD4ge31cbiIgKworCQkJImludGVyZmFjZSBKPFQ+IHt9XG4iCisJCX0sCisJCSIt
LS0tLS0tLS0tXG4iICsgCisJCSIxLiBXQVJOSU5HIGluIFguamF2YSAoYXQgbGluZSAyKVxuIiAr
IAorCQkiCXZvaWQgZm9vKEpbXSBsaXN0LCBJPEo8Pz4+IGkpIHtcbiIgKyAKKwkJIgkgICAgICAg
ICBeXG4iICsgCisJCSJKIGlzIGEgcmF3IHR5cGUuIFJlZmVyZW5jZXMgdG8gZ2VuZXJpYyB0eXBl
IEo8VD4gc2hvdWxkIGJlIHBhcmFtZXRlcml6ZWRcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAK
KwkJIjIuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAzKVxuIiArIAorCQkiCXNvcnQobGlzdCwg
aSk7XG4iICsgCisJCSIJXl5eXlxuIiArIAorCQkiVGhlIG1ldGhvZCBzb3J0KFRbXSwgSTw/IHN1
cGVyIFQ+KSBpbiB0aGUgdHlwZSBYIGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRz
IChKW10sIEk8Sjw/Pj4pXG4iICsgCisJCSItLS0tLS0tLS0tXG4iKTsKK30KKy8vIGh0dHBzOi8v
YnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00Mjc5NTcsIFsxLjhdIFR5cGUg
aW5mZXJlbmNlIGluY29ycmVjdCB3aGVuIGEgd2lsZGNhcmQgaXMgbWlzc2luZyAKK3B1YmxpYyB2
b2lkIHRlc3RCdWc0Mjc5NTcoKSB7CisJcnVuTmVnYXRpdmVUZXN0KAorCQluZXcgU3RyaW5nW10g
eworCQkJIlguamF2YSIsCisJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkiICAgIDxUPiB2
b2lkIHNvcnQoVFtdIGEsIEk8PyBzdXBlciBUPiBjKSB7IH1cbiIgKworCQkJIiAgICB2b2lkIGZv
byhJW10gZSwgSTxJPD8+PiBjb21wKSB7XG4iICsKKwkJCSIgICAgICAgIHNvcnQoZSwgY29tcCk7
XG4iICsKKwkJCSIgICAgfVxuIiArCisJCQkifVxuIiArCisJCQkiaW50ZXJmYWNlIEk8VD4ge31c
biIKKwkJfSwKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjEuIFdBUk5JTkcgaW4gWC5qYXZhIChh
dCBsaW5lIDMpXG4iICsgCisJCSIJdm9pZCBmb28oSVtdIGUsIEk8STw/Pj4gY29tcCkge1xuIiAr
IAorCQkiCSAgICAgICAgIF5cbiIgKyAKKwkJIkkgaXMgYSByYXcgdHlwZS4gUmVmZXJlbmNlcyB0
byBnZW5lcmljIHR5cGUgSTxUPiBzaG91bGQgYmUgcGFyYW1ldGVyaXplZFxuIiArIAorCQkiLS0t
LS0tLS0tLVxuIiArIAorCQkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDQpXG4iICsgCisJ
CSIJc29ydChlLCBjb21wKTtcbiIgKyAKKwkJIgleXl5eXG4iICsgCisJCSJUaGUgbWV0aG9kIHNv
cnQoVFtdLCBJPD8gc3VwZXIgVD4pIGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9y
IHRoZSBhcmd1bWVudHMgKElbXSwgSTxJPD8+PilcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIpOwor
fQorLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQyNzk1
NywgWzEuOF0gVHlwZSBpbmZlcmVuY2UgaW5jb3JyZWN0IHdoZW4gYSB3aWxkY2FyZCBpcyBtaXNz
aW5nIAorcHVibGljIHZvaWQgdGVzdEJ1ZzQyNzk1N2EoKSB7IC8vIHZlcmlmeSBlc2NhcGUgaGF0
Y2ggd29ya3MuCisJaWYgKHRoaXMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRz
LkpESzFfOCkgIAorCQlyZXR1cm47CisJTWFwIGN1c3RvbU9wdGlvbnMgPSBnZXRDb21waWxlck9w
dGlvbnMoKTsKKwljdXN0b21PcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1Bvc3RS
ZXNvbHV0aW9uUmF3VHlwZUNvbXBhdGliaWxpdHlDaGVjaywgQ29tcGlsZXJPcHRpb25zLkRJU0FC
TEVEKTsKKwlydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwK
KwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCSIgICAgPFQ+IHZvaWQgc29ydChUW10gYSwg
STw/IHN1cGVyIFQ+IGMpIHsgfVxuIiArCisJCQkiICAgIHZvaWQgZm9vKElbXSBlLCBJPEk8Pz4+
IGNvbXApIHtcbiIgKworCQkJIiAgICAgICAgc29ydChlLCBjb21wKTtcbiIgKworCQkJIiAgICB9
XG4iICsKKwkJCSJ9XG4iICsKKwkJCSJpbnRlcmZhY2UgSTxUPiB7fVxuIgorCQl9LAorCQkiLS0t
LS0tLS0tLVxuIiArIAorCQkiMS4gV0FSTklORyBpbiBYLmphdmEgKGF0IGxpbmUgMylcbiIgKyAK
KwkJIgl2b2lkIGZvbyhJW10gZSwgSTxJPD8+PiBjb21wKSB7XG4iICsgCisJCSIJICAgICAgICAg
XlxuIiArIAorCQkiSSBpcyBhIHJhdyB0eXBlLiBSZWZlcmVuY2VzIHRvIGdlbmVyaWMgdHlwZSBJ
PFQ+IHNob3VsZCBiZSBwYXJhbWV0ZXJpemVkXG4iICsgCisJCSItLS0tLS0tLS0tXG4iLCBudWxs
LCB0cnVlLCBjdXN0b21PcHRpb25zKTsKK30KKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9i
dWdzL3Nob3dfYnVnLmNnaT9pZD00Mjc5OTIsICBbMS44XSBjb21waWxlciBkaWZmZXJlbmNlIHRv
IGphdmFjIGludm9sdmluZyBhIHJhdyBhcnJheQorcHVibGljIHZvaWQgdGVzdDQyNzk5MigpIHsK
KwlpZiAodGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV82KQor
CQlyZXR1cm47IC8vIHVzZXMgQE92ZXJyaWRlCisJcnVuTmVnYXRpdmVUZXN0KAorCQluZXcgU3Ry
aW5nW10geworCQkJIlguamF2YSIsCisJCQkiaW1wb3J0IHN0YXRpYyBvcmcuanVuaXQuQXNzZXJ0
LmFzc2VydEFycmF5RXF1YWxzO1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5BcnJheXM7XG4i
ICsKKwkJCSJpbXBvcnQgb3JnLmp1bml0LlRlc3Q7XG4iICsKKwkJCSJwdWJsaWMgY2xhc3MgWCB7
XG4iICsKKwkJCSIgIEBUZXN0KGV4cGVjdGVkID0gSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uLmNs
YXNzKVxuIiArCisJCQkiICBwdWJsaWMgdm9pZCBzaG91bGRUaHJvd0V4Y2VwdGlvbldoZW5DbGFz
c2VzQXJlTm90SW5TYW1lSW5oZXJpdGFuY2VUcmVlKCkge1xuIiArCisJCQkiICAgIEFycmF5cy5z
b3J0KG5ldyBDbGFzc1tdIHtDaGltcC5jbGFzcywgQ2F0LmNsYXNzfSwgQ2xhc3NJbmhlcml0YW5j
ZURlcHRoQ29tcGFyYXRvci5JTlNUQU5DRSk7XG4iICsKKwkJCSIgIH1cbiIgKworCQkJIiAgcHVi
bGljIHN0YXRpYyBjbGFzcyBBbmltYWwge1xuIiArCisJCQkiICB9XG4iICsKKwkJCSIgIHB1Ymxp
YyBzdGF0aWMgY2xhc3MgTW9ua2V5IGV4dGVuZHMgQW5pbWFsIHtcbiIgKworCQkJIiAgfVxuIiAr
CisJCQkiICBwdWJsaWMgc3RhdGljIGNsYXNzIENoaW1wIGV4dGVuZHMgTW9ua2V5IHtcbiIgKwor
CQkJIiAgfVxuIiArCisJCQkiICBwdWJsaWMgc3RhdGljIGNsYXNzIENhdCBleHRlbmRzIEFuaW1h
bCB7XG4iICsKKwkJCSIgIH1cbiIgKworCQkJInB1YmxpYyBzdGF0aWMgY2xhc3MgQ2xhc3NJbmhl
cml0YW5jZURlcHRoQ29tcGFyYXRvciBpbXBsZW1lbnRzIENvbXBhcmF0b3I8Q2xhc3M8Pz4+IHtc
biIgKworCQkJIiAgcHVibGljIHN0YXRpYyBmaW5hbCBDbGFzc0luaGVyaXRhbmNlRGVwdGhDb21w
YXJhdG9yIElOU1RBTkNFID0gbmV3IENsYXNzSW5oZXJpdGFuY2VEZXB0aENvbXBhcmF0b3IoKTtc
biIgKworCQkJIiAgQE92ZXJyaWRlXG4iICsKKwkJCSIgIHB1YmxpYyBpbnQgY29tcGFyZShDbGFz
czw/PiBjMSwgQ2xhc3M8Pz4gYzIpIHtcbiIgKworCQkJIiAgICBpZihjMS5lcXVhbHMoYzIpKSB7
XG4iICsKKwkJCSIgICAgICByZXR1cm4gMDtcbiIgKworCQkJIiAgICB9XG4iICsKKwkJCSIgICAg
aWYoYzEuaXNBc3NpZ25hYmxlRnJvbShjMikpIHtcbiIgKworCQkJIiAgICAgIHJldHVybiAtMTtc
biIgKworCQkJIiAgICB9XG4iICsKKwkJCSIgICAgaWYoYzIuaXNBc3NpZ25hYmxlRnJvbShjMSkp
IHtcbiIgKworCQkJIiAgICAgIHJldHVybiAxO1xuIiArCisJCQkiICAgIH1cbiIgKworCQkJIiAg
ICB0aHJvdyBuZXcgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uKFwiY2xhc3NlcyB0byBjb21wYXJl
IG11c3QgYmUgaW4gdGhlIHNhbWUgaW5oZXJpdGFuY2UgdHJlZTogXCIgKyBjMSArIFwiOyBcIiAr
IGMyKTtcbiIgKworCQkJIiAgfVxuIiArCisJCQkifVxuIiArCisJCQkifVxuIgorCQl9LAorCQki
LS0tLS0tLS0tLVxuIiArIAorCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDEpXG4iICsg
CisJCSIJaW1wb3J0IHN0YXRpYyBvcmcuanVuaXQuQXNzZXJ0LmFzc2VydEFycmF5RXF1YWxzO1xu
IiArIAorCQkiCSAgICAgICAgICAgICAgXl5eXl5eXl5eXG4iICsgCisJCSJUaGUgaW1wb3J0IG9y
Zy5qdW5pdCBjYW5ub3QgYmUgcmVzb2x2ZWRcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJ
IjIuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAzKVxuIiArIAorCQkiCWltcG9ydCBvcmcuanVu
aXQuVGVzdDtcbiIgKyAKKwkJIgkgICAgICAgXl5eXl5eXl5eXG4iICsgCisJCSJUaGUgaW1wb3J0
IG9yZy5qdW5pdCBjYW5ub3QgYmUgcmVzb2x2ZWRcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAK
KwkJIjMuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA1KVxuIiArIAorCQkiCUBUZXN0KGV4cGVj
dGVkID0gSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uLmNsYXNzKVxuIiArIAorCQkiCSBeXl5eXG4i
ICsgCisJCSJUZXN0IGNhbm5vdCBiZSByZXNvbHZlZCB0byBhIHR5cGVcbiIgKyAKKwkJIi0tLS0t
LS0tLS1cbiIgKyAKKwkJIjQuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA3KVxuIiArIAorCQki
CUFycmF5cy5zb3J0KG5ldyBDbGFzc1tdIHtDaGltcC5jbGFzcywgQ2F0LmNsYXNzfSwgQ2xhc3NJ
bmhlcml0YW5jZURlcHRoQ29tcGFyYXRvci5JTlNUQU5DRSk7XG4iICsgCisJCSIJICAgICAgIF5e
Xl5cbiIgKyAKKwkJIlRoZSBtZXRob2Qgc29ydChUW10sIENvbXBhcmF0b3I8PyBzdXBlciBUPikg
aW4gdGhlIHR5cGUgQXJyYXlzIGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRzIChD
bGFzc1tdLCBYLkNsYXNzSW5oZXJpdGFuY2VEZXB0aENvbXBhcmF0b3IpXG4iICsgCisJCSItLS0t
LS0tLS0tXG4iICsgCisJCSI1LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTcpXG4iICsgCisJ
CSIJcHVibGljIHN0YXRpYyBjbGFzcyBDbGFzc0luaGVyaXRhbmNlRGVwdGhDb21wYXJhdG9yIGlt
cGxlbWVudHMgQ29tcGFyYXRvcjxDbGFzczw/Pj4ge1xuIiArIAorCQkiCSAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5e
Xl5cbiIgKyAKKwkJIkNvbXBhcmF0b3IgY2Fubm90IGJlIHJlc29sdmVkIHRvIGEgdHlwZVxuIiAr
IAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiNi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDIw
KVxuIiArIAorCQkiCXB1YmxpYyBpbnQgY29tcGFyZShDbGFzczw/PiBjMSwgQ2xhc3M8Pz4gYzIp
IHtcbiIgKyAKKwkJIgkgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
XlxuIiArIAorCQkiVGhlIG1ldGhvZCBjb21wYXJlKENsYXNzPD8+LCBDbGFzczw/Pikgb2YgdHlw
ZSBYLkNsYXNzSW5oZXJpdGFuY2VEZXB0aENvbXBhcmF0b3IgbXVzdCBvdmVycmlkZSBvciBpbXBs
ZW1lbnQgYSBzdXBlcnR5cGUgbWV0aG9kXG4iICsgCisJCSItLS0tLS0tLS0tXG4iKTsKK30KIH0K
IApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9NZXNzYWdlU2VuZC5qYXZhIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9N
ZXNzYWdlU2VuZC5qYXZhCmluZGV4IGM0OGYyODAuLmUyOTBmY2IgMTAwNjQ0Ci0tLSBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hc3QvTWVzc2FnZVNlbmQuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L01lc3NhZ2VTZW5kLmphdmEK
QEAgLTg2OCw2ICs4NjgsNDggQEAKIAkJCT8gc2NvcGUuZ2V0SW1wbGljaXRNZXRob2QodGhpcy5z
ZWxlY3RvciwgYXJndW1lbnRUeXBlcywgdGhpcykKIAkJCTogc2NvcGUuZ2V0TWV0aG9kKHRoaXMu
YWN0dWFsUmVjZWl2ZXJUeXBlLCB0aGlzLnNlbGVjdG9yLCBhcmd1bWVudFR5cGVzLCB0aGlzKTsK
IAlyZXNvbHZlUG9seUV4cHJlc3Npb25Bcmd1bWVudHModGhpcywgdGhpcy5iaW5kaW5nLCBhcmd1
bWVudFR5cGVzLCBzY29wZSk7CisJCisJLyogVGhlcmUgYXJlIGVtYmVkZGVkIGFzc3VtcHRpb25z
IGluIHRoZSBKTFM4IHR5cGUgaW5mZXJlbmNlIHNjaGVtZSB0aGF0IGEgc3VjY2Vzc2Z1bCBzb2x1
dGlvbiBvZiB0aGUgdHlwZSBlcXVhdGlvbnMgcmVzdWx0cyBpbiBhbgorCSAgIGFwcGxpY2FibGUg
bWV0aG9kLiBUaGlzIGFwcGVhcnMgdG8gYmUgYSB0ZW51b3VzIGFzc3VtcHRpb24sIGF0IGxlYXN0
IG9uZSBub3QgbWFkZSBieSB0aGUgSkxTNyBlbmdpbmUgb3IgdGhlIHJlZmVyZW5jZSBjb21waWxl
ciBhbmQgCisJICAgdGhlcmUgYXJlIGNhc2VzIHdoZXJlIHRoaXMgYXNzdW1wdGlvbiB3b3VsZCBh
cHBlYXIgaW52YWxpZDogU2VlIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVn
LmNnaT9pZD00MjY1MzcsIHdoZXJlIHdlIGFsbG93IAorCSAgIGNlcnRhaW4gY29tcGF0aWJpbGl0
eSBjb25zdHJhaW5zIGFyb3VuZCByYXcgdHlwZXMgdG8gYmUgdmlvbGF0ZWQuIAorICAgICAgIAor
ICAgICAgIEhlcmUsIHdlIGZpbHRlciBvdXQgc3VjaCBpbmFwcGxpY2FibGUgbWV0aG9kcyB3aXRo
IHJhdyB0eXBlIHVzYWdlIHRoYXQgbWF5IGhhdmUgc25lYWtlZCBwYXN0IG92ZXJsb2FkIHJlc29s
dXRpb24gYW5kIHR5cGUgaW5mZXJlbmNlLCAKKyAgICAgICBwbGF5aW5nIHRoZSBkZXZpbHMgYWR2
b2NhdGUsIGJsYW1pbmcgdGhlIGludm9jYXRpb25zIHdpdGggcmF3IGFyZ3VtZW50cyB0aGF0IHNo
b3VsZCBub3QgZ28gYmxhbWVsZXNzLiBBdCB0aGlzIHRpbWUgdGhpcyBpcyBpbiB0aGUgCisgICAg
ICAgbmF0dXJlIG9mIGEgcG9pbnQgZml4IGFuZCBpcyBub3QgYSBnZW5lcmFsIHNvbHV0aW9uIHdo
aWNoIG5lZWRzIHRvIGNvbWUgbGF0ZXIgKHRoYXQgYWxzbyBpbmNsdWRlcyBBRSwgUUFFIGFuZCBF
Q0MpCisgICAgKi8KKwlmaW5hbCBDb21waWxlck9wdGlvbnMgY29tcGlsZXJPcHRpb25zID0gc2Nv
cGUuY29tcGlsZXJPcHRpb25zKCk7CisJaWYgKGNvbXBpbGVyT3B0aW9ucy5zb3VyY2VMZXZlbCA+
PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84ICYmIHRoaXMuYmluZGluZyBpbnN0YW5jZW9mIFBh
cmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyAmJiB0aGlzLmJpbmRpbmcuaXNWYWxpZEJp
bmRpbmcoKSkgeworCQlpZiAoIWNvbXBpbGVyT3B0aW9ucy5wb3N0UmVzb2x1dGlvblJhd1R5cGVD
b21wYXRpYmlsaXR5Q2hlY2spCisJCQlyZXR1cm47CisJCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0
aG9kQmluZGluZyBwZ21iID0gKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgdGhp
cy5iaW5kaW5nOworCQlpbnQgbGVuZ3RoID0gcGdtYi50eXBlQXJndW1lbnRzID09IG51bGwgPyAw
IDogcGdtYi50eXBlQXJndW1lbnRzLmxlbmd0aDsKKwkJYm9vbGVhbiBzYXdSYXdUeXBlID0gZmFs
c2U7CisJCWZvciAoaW50IGkgPSAwOyAgaSA8IGxlbmd0aDsgaSsrKSB7CisJCQkvKiBNdXN0IGNo
ZWNrIGNvbXBhdGliaWxpdHkgYWdhaW5zdCBjYXB0dXJlIGZyZWUgbWV0aG9kLiBGb3JtYWwgcGFy
YW1ldGVycyBjYW5ub3QgaGF2ZSBjYXB0dXJlcywgYnV0IG91ciBtYWNoaW5lcnkgaXMgbm90IHVw
IHRvIHNudWZmIHRvCisJCQkgICBjb25zdHJ1Y3QgYSBQR01CIHdpdGhvdXQgY2FwdHVyZXMgYXQg
dGhlIG1vbWVudCAtIGZvciBvbmUgdGhpbmcgSVRDQiBkb2VzIG5vdCBzdXBwb3J0IHVuY2FwdHVy
ZSgpIHlldCwgZm9yIGFub3RoZXIsIElOVEVSU0VDVElPTl9DQVNUX1RZUEUKKwkJCSAgIGRvZXMg
bm90IGFwcGVhciBmdWxseSBob29rZWQgdXAgaW50byBpc0NvbXBhdGlibGVXaXRoIGFuZCBpc0Vx
dWl2YWxlbnQgdG8gZXZlcnl3aGVyZS4gQXQgdGhlIG1vbWVudCwgYmFpbCBvdXQgaWYgd2Ugc2Vl
IGNhcHR1cmUuCisJCQkqLyAgIAorCQkJaWYgKHBnbWIudHlwZUFyZ3VtZW50c1tpXS5pc0NhcHR1
cmUoKSkKKwkJCQlyZXR1cm47CisJCQlpZiAocGdtYi50eXBlQXJndW1lbnRzW2ldLmlzUmF3VHlw
ZSgpKQorCQkJCXNhd1Jhd1R5cGUgPSB0cnVlOworCQl9CisJCWlmICghc2F3UmF3VHlwZSkKKwkJ
CXJldHVybjsKKwkJbGVuZ3RoID0gdGhpcy5hcmd1bWVudHMgPT0gbnVsbCA/IDAgOiB0aGlzLmFy
Z3VtZW50cy5sZW5ndGg7CisJCWlmIChsZW5ndGggPT0gMCkKKwkJCXJldHVybjsKKwkJVHlwZUJp
bmRpbmcgW10gZmluYWxBcmd1bWVudFR5cGVzID0gbmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07CisJ
CWZvciAoaW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKKwkJCVR5cGVCaW5kaW5nIGZpbmFs
QXJndW1lbnRUeXBlID0gdGhpcy5hcmd1bWVudHNbaV0ucmVzb2x2ZWRUeXBlOworCQkJaWYgKGZp
bmFsQXJndW1lbnRUeXBlID09IG51bGwgfHwgIWZpbmFsQXJndW1lbnRUeXBlLmlzVmFsaWRCaW5k
aW5nKCkpICAvLyBhbHJlYWR5IHNpZGVkIHdpdGggdGhlIGRldmlsLgorCQkJCXJldHVybjsKKwkJ
CWZpbmFsQXJndW1lbnRUeXBlc1tpXSA9IGZpbmFsQXJndW1lbnRUeXBlOyAKKwkJfQorCQlpZiAo
c2NvcGUucGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKHRoaXMuYmluZGluZywgZmluYWxBcmd1
bWVudFR5cGVzLCBmYWxzZSkgPT0gU2NvcGUuTk9UX0NPTVBBVElCTEUpCisJCQl0aGlzLmJpbmRp
bmcgPSBuZXcgUHJvYmxlbU1ldGhvZEJpbmRpbmcodGhpcy5iaW5kaW5nLm9yaWdpbmFsKCksIHRo
aXMuYmluZGluZy5zZWxlY3RvciwgZmluYWxBcmd1bWVudFR5cGVzLCBQcm9ibGVtUmVhc29ucy5O
b3RGb3VuZCk7CisJfQogfQogCiBAT3ZlcnJpZGUKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9pbXBsL0Nv
bXBpbGVyT3B0aW9ucy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2ltcGwvQ29tcGlsZXJPcHRpb25zLmphdmEKaW5k
ZXggNTQ4NzE3ZS4uYmNkYjYyOCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2ltcGwvQ29tcGlsZXJPcHRp
b25zLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2ltcGwvQ29tcGlsZXJPcHRpb25zLmphdmEKQEAgLTE1MCw2
ICsxNTAsNyBAQAogCS8vIE9QVElPTl9TdG9yZV9Bbm5vdGF0aW9uczogdW5kb2N1bWVudGVkIG9w
dGlvbiBmb3IgdGVzdGluZyBwdXJwb3NlcwogCXB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIE9Q
VElPTl9TdG9yZV9Bbm5vdGF0aW9ucyA9ICJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5z
dG9yZUFubm90YXRpb25zIjsgLy8kTk9OLU5MUy0xJAogCXB1YmxpYyBzdGF0aWMgZmluYWwgU3Ry
aW5nIE9QVElPTl9FbXVsYXRlSmF2YWNCdWc4MDMxNzQ0ID0gIm9yZy5lY2xpcHNlLmpkdC5jb3Jl
LmNvbXBpbGVyLmVtdWxhdGVKYXZhY0J1ZzgwMzE3NDQiOyAvLyROT04tTkxTLTEkCisJcHVibGlj
IHN0YXRpYyBmaW5hbCBTdHJpbmcgT1BUSU9OX1Bvc3RSZXNvbHV0aW9uUmF3VHlwZUNvbXBhdGli
aWxpdHlDaGVjayA9ICJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5wb3N0UmVzb2x1dGlv
blJhd1R5cGVDb21wYXRpYmlsaXR5Q2hlY2siOyAvLyROT04tTkxTLTEkCiAJcHVibGljIHN0YXRp
YyBmaW5hbCBTdHJpbmcgT1BUSU9OX1JlcG9ydFJlZHVuZGFudFN1cGVyaW50ZXJmYWNlID0gICJv
cmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5wcm9ibGVtLnJlZHVuZGFudFN1cGVyaW50ZXJm
YWNlIjsgLy8kTk9OLU5MUy0xJAogCXB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIE9QVElPTl9S
ZXBvcnRDb21wYXJpbmdJZGVudGljYWwgPSAgIm9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVy
LnByb2JsZW0uY29tcGFyaW5nSWRlbnRpY2FsIjsgLy8kTk9OLU5MUy0xJAogCXB1YmxpYyBzdGF0
aWMgZmluYWwgU3RyaW5nIE9QVElPTl9SZXBvcnRNaXNzaW5nU3luY2hyb25pemVkT25Jbmhlcml0
ZWRNZXRob2QgPSAgIm9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLnByb2JsZW0ubWlzc2lu
Z1N5bmNocm9uaXplZE9uSW5oZXJpdGVkTWV0aG9kIjsgLy8kTk9OLU5MUy0xJApAQCAtNDEyLDYg
KzQxMyw4IEBACiAJcHVibGljIGJvb2xlYW4gcHJvY2Vzc0Fubm90YXRpb25zOwogCS8qKiBTdG9y
ZSBhbm5vdGF0aW9ucyAqLwogCXB1YmxpYyBib29sZWFuIHN0b3JlQW5ub3RhdGlvbnM7CisJLyoq
IGV4dHJhIGNoZWNrIGZvciByYXcgdHlwZSBjb21wYXRpYmlsaXR5IHBvc3Qgb3ZlcmxvYWQgcmVz
b2x1dGlvbiAqLworCXB1YmxpYyBib29sZWFuIHBvc3RSZXNvbHV0aW9uUmF3VHlwZUNvbXBhdGli
aWxpdHlDaGVjayA9IHRydWU7CiAJLyoqIFNwZWNpZnkgaWYgbmVlZCB0byByZXBvcnQgbWlzc2lu
ZyBvdmVycmlkZSBhbm5vdGF0aW9uIGZvciBhIG1ldGhvZCBpbXBsZW1lbnRpbmcgYW4gaW50ZXJm
YWNlIG1ldGhvZCAoamF2YSAxLjYgYW5kIGFib3ZlKSovCiAJcHVibGljIGJvb2xlYW4gcmVwb3J0
TWlzc2luZ092ZXJyaWRlQW5ub3RhdGlvbkZvckludGVyZmFjZU1ldGhvZEltcGxlbWVudGF0aW9u
OwogCS8qKiBJbmRpY2F0ZSBpZiBhbm5vdGF0aW9uIHByb2Nlc3NpbmcgZ2VuZXJhdGVzIGNsYXNz
ZmlsZXMgKi8KQEAgLTExMzcsNiArMTE0MCw3IEBACiAJCW9wdGlvbnNNYXAucHV0KE9QVElPTl9Q
cm9jZXNzX0Fubm90YXRpb25zLCB0aGlzLnByb2Nlc3NBbm5vdGF0aW9ucyA/IEVOQUJMRUQgOiBE
SVNBQkxFRCk7CiAJCW9wdGlvbnNNYXAucHV0KE9QVElPTl9TdG9yZV9Bbm5vdGF0aW9ucywgdGhp
cy5zdG9yZUFubm90YXRpb25zID8gRU5BQkxFRCA6IERJU0FCTEVEKTsKIAkJb3B0aW9uc01hcC5w
dXQoT1BUSU9OX0VtdWxhdGVKYXZhY0J1ZzgwMzE3NDQsIHRoaXMuZW11bGF0ZUphdmFjQnVnODAz
MTc0NCA/IEVOQUJMRUQgOiBESVNBQkxFRCk7CisJCW9wdGlvbnNNYXAucHV0KE9QVElPTl9Qb3N0
UmVzb2x1dGlvblJhd1R5cGVDb21wYXRpYmlsaXR5Q2hlY2ssIHRoaXMucG9zdFJlc29sdXRpb25S
YXdUeXBlQ29tcGF0aWJpbGl0eUNoZWNrID8gRU5BQkxFRCA6IERJU0FCTEVEKTsKIAkJb3B0aW9u
c01hcC5wdXQoT1BUSU9OX1JlcG9ydFJlZHVuZGFudFN1cGVyaW50ZXJmYWNlLCBnZXRTZXZlcml0
eVN0cmluZyhSZWR1bmRhbnRTdXBlcmludGVyZmFjZSkpOwogCQlvcHRpb25zTWFwLnB1dChPUFRJ
T05fUmVwb3J0Q29tcGFyaW5nSWRlbnRpY2FsLCBnZXRTZXZlcml0eVN0cmluZyhDb21wYXJpbmdJ
ZGVudGljYWwpKTsKIAkJb3B0aW9uc01hcC5wdXQoT1BUSU9OX1JlcG9ydE1pc3NpbmdTeW5jaHJv
bml6ZWRPbkluaGVyaXRlZE1ldGhvZCwgZ2V0U2V2ZXJpdHlTdHJpbmcoTWlzc2luZ1N5bmNocm9u
aXplZE1vZGlmaWVySW5Jbmhlcml0ZWRNZXRob2QpKTsKQEAgLTE4MTIsNiArMTgxNiwxMyBAQAog
CQkJCXRoaXMuZW11bGF0ZUphdmFjQnVnODAzMTc0NCA9IGZhbHNlOwogCQkJfQogCQl9CisJCWlm
ICgob3B0aW9uVmFsdWUgPSBvcHRpb25zTWFwLmdldChPUFRJT05fUG9zdFJlc29sdXRpb25SYXdU
eXBlQ29tcGF0aWJpbGl0eUNoZWNrKSkgIT0gbnVsbCkgeworCQkJaWYgKEVOQUJMRUQuZXF1YWxz
KG9wdGlvblZhbHVlKSkgeworCQkJCXRoaXMucG9zdFJlc29sdXRpb25SYXdUeXBlQ29tcGF0aWJp
bGl0eUNoZWNrID0gdHJ1ZTsKKwkJCX0gZWxzZSBpZiAoRElTQUJMRUQuZXF1YWxzKG9wdGlvblZh
bHVlKSkgeworCQkJCXRoaXMucG9zdFJlc29sdXRpb25SYXdUeXBlQ29tcGF0aWJpbGl0eUNoZWNr
ID0gZmFsc2U7CisJCQl9CisJCX0KIAkJaWYgKChvcHRpb25WYWx1ZSA9IG9wdGlvbnNNYXAuZ2V0
KE9QVElPTl9SZXBvcnRVbmludGVybmVkSWRlbnRpdHlDb21wYXJpc29uKSkgIT0gbnVsbCkgewog
CQkJaWYgKEVOQUJMRUQuZXF1YWxzKG9wdGlvblZhbHVlKSkgewogCQkJCXRoaXMuY29tcGxhaW5P
blVuaW50ZXJuZWRJZGVudGl0eUNvbXBhcmlzb24gPSB0cnVlOw==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>240680</attachid>
            <date>2014-03-08 08:24:00 -0500</date>
            <delta_ts>2014-10-27 14:51:31 -0400</delta_ts>
            <desc>pointfix with addition suggested in my review</desc>
            <filename>Bug-426537--18inference-Eclipse-compiler-thinks-I-su.patch</filename>
            <type>text/plain</type>
            <size>16998</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0JhdGNoQ29tcGlsZXJU
ZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2Vj
bGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9CYXRjaENvbXBpbGVyVGVz
dC5qYXZhCmluZGV4IDY2OGViM2IuLjgzMWQzNmEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21w
aWxlci9yZWdyZXNzaW9uL0JhdGNoQ29tcGlsZXJUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Nv
bXBpbGVyL3JlZ3Jlc3Npb24vQmF0Y2hDb21waWxlclRlc3QuamF2YQpAQCAtMTkxMyw2ICsxOTEz
LDcgQEAKIAkJCSIJCTxvcHRpb24ga2V5PVwib3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIu
ZW11bGF0ZUphdmFjQnVnODAzMTc0NFwiIHZhbHVlPVwiZW5hYmxlZFwiLz5cbiIgKwogCQkJIgkJ
PG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5nZW5lcmF0ZUNsYXNz
RmlsZXNcIiB2YWx1ZT1cImVuYWJsZWRcIi8+XG4iICsgCiAJCQkiCQk8b3B0aW9uIGtleT1cIm9y
Zy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLm1heFByb2JsZW1QZXJVbml0XCIgdmFsdWU9XCIx
MDBcIi8+XG4iICsgCisJCQkiCQk8b3B0aW9uIGtleT1cIm9yZy5lY2xpcHNlLmpkdC5jb3JlLmNv
bXBpbGVyLnBvc3RSZXNvbHV0aW9uUmF3VHlwZUNvbXBhdGliaWxpdHlDaGVja1wiIHZhbHVlPVwi
ZW5hYmxlZFwiLz5cbiIgKwogCQkJIgkJPG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBzZS5qZHQuY29y
ZS5jb21waWxlci5wcm9ibGVtLmFubm90YXRpb25TdXBlckludGVyZmFjZVwiIHZhbHVlPVwid2Fy
bmluZ1wiLz5cbiIgKyAKIAkJCSIJCTxvcHRpb24ga2V5PVwib3JnLmVjbGlwc2UuamR0LmNvcmUu
Y29tcGlsZXIucHJvYmxlbS5hc3NlcnRJZGVudGlmaWVyXCIgdmFsdWU9XCJ3YXJuaW5nXCIvPlxu
IiArIAogCQkJIgkJPG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5w
cm9ibGVtLmF1dG9ib3hpbmdcIiB2YWx1ZT1cImlnbm9yZVwiLz5cbiIgKyAKZGlmZiAtLWdpdCBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQv
Y29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3QuamF2
YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3Qu
amF2YQppbmRleCBiMjNlNTk4Li4yYzliOTdhIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGls
ZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25UZXN0LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3Rz
L2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVzdC5qYXZhCkBAIC00MjYx
LDcgKzQyNjEsNyBAQAogCQkiWm9yayBjYW5ub3QgYmUgcmVzb2x2ZWQgdG8gYSB0eXBlXG4iICsg
CiAJCSItLS0tLS0tLS0tXG4iKTsKIH0KLS8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdz
L3Nob3dfYnVnLmNnaT9pZD00Mjk3MzMsIFsxLjhdW2J5dGVjb2RlXSBCYWQgdHlwZSBvbiBvcGVy
YW5kIHN0YWNrCisvL2h0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9p
ZD00Mjk3MzMsIFsxLjhdW2J5dGVjb2RlXSBCYWQgdHlwZSBvbiBvcGVyYW5kIHN0YWNrCiBwdWJs
aWMgdm9pZCB0ZXN0NDI5NzMzKCkgewogCWlmICh0aGlzLmNvbXBsaWFuY2VMZXZlbCA8IENsYXNz
RmlsZUNvbnN0YW50cy5KREsxXzcpCiAJCXJldHVybjsgLy8gdXNlcyBkaWFtb25kLgpAQCAtNDI4
Nyw3ICs0Mjg3LDcgQEAKIAkJfSwKIAkJIjEuMSIpOwogfQotLy8gaHR0cHM6Ly9idWdzLmVjbGlw
c2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQyOTczMywgWzEuOF1bYnl0ZWNvZGVdIEJhZCB0
eXBlIG9uIG9wZXJhbmQgc3RhY2sKKy8vaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hv
d19idWcuY2dpP2lkPTQyOTczMywgWzEuOF1bYnl0ZWNvZGVdIEJhZCB0eXBlIG9uIG9wZXJhbmQg
c3RhY2sKIHB1YmxpYyB2b2lkIHRlc3Q0Mjk3MzNhKCkgewogCWlmICh0aGlzLmNvbXBsaWFuY2VM
ZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzcpCiAJCXJldHVybjsgLy8gdXNlcyBkaWFt
b25kLgpAQCAtNDM1MCw1ICs0MzUwLDE5OCBAQAogCQl9LAogCQkiMS4xIik7CiB9CisvLyBodHRw
czovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDI2NTM3LCAgWzEuOF1b
aW5mZXJlbmNlXSBFY2xpcHNlIGNvbXBpbGVyIHRoaW5rcyBJPD8gc3VwZXIgSj4gaXMgY29tcGF0
aWJsZSB3aXRoIEk8Sjw/Pj4gLSByYXcgdHlwZSBKIGludm9sdmVkIAorcHVibGljIHZvaWQgdGVz
dEJ1ZzQyNjUzNygpIHsgLy8gbm9uIGdlbmVyaWMgY2FzZQorCXJ1bk5lZ2F0aXZlVGVzdCgKKwkJ
bmV3IFN0cmluZ1tdIHsKKwkJCSJYLmphdmEiLAorCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKwor
CQkJIgl2b2lkIGZvbyhKW10gbGlzdCwgSTxKPD8+PiBpKSB7XG4iICsKKwkJCSIJCXNvcnQobGlz
dCwgaSk7XG4iICsKKwkJCSIJfVxuIiArCisJCQkiCUpbXSBzb3J0KEpbXSBsaXN0LCBJPD8gc3Vw
ZXIgSj4gaSkge1xuIiArCisJCQkiCQlyZXR1cm4gbGlzdDtcbiIgKworCQkJIgl9XG4iICsKKwkJ
CSJ9XG4iICsKKwkJCSJpbnRlcmZhY2UgSTxUPiB7fVxuIiArCisJCQkiaW50ZXJmYWNlIEo8VD4g
e31cbiIKKwkJfSwKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjEuIFdBUk5JTkcgaW4gWC5qYXZh
IChhdCBsaW5lIDIpXG4iICsgCisJCSIJdm9pZCBmb28oSltdIGxpc3QsIEk8Sjw/Pj4gaSkge1xu
IiArIAorCQkiCSAgICAgICAgIF5cbiIgKyAKKwkJIkogaXMgYSByYXcgdHlwZS4gUmVmZXJlbmNl
cyB0byBnZW5lcmljIHR5cGUgSjxUPiBzaG91bGQgYmUgcGFyYW1ldGVyaXplZFxuIiArIAorCQki
LS0tLS0tLS0tLVxuIiArIAorCQkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDMpXG4iICsg
CisJCSIJc29ydChsaXN0LCBpKTtcbiIgKyAKKwkJIgleXl5eXG4iICsgCisJCSJUaGUgbWV0aG9k
IHNvcnQoSltdLCBJPD8gc3VwZXIgSj4pIGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUg
Zm9yIHRoZSBhcmd1bWVudHMgKEpbXSwgSTxKPD8+PilcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIg
KyAKKwkJIjMuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDUpXG4iICsgCisJCSIJSltdIHNv
cnQoSltdIGxpc3QsIEk8PyBzdXBlciBKPiBpKSB7XG4iICsgCisJCSIJXlxuIiArIAorCQkiSiBp
cyBhIHJhdyB0eXBlLiBSZWZlcmVuY2VzIHRvIGdlbmVyaWMgdHlwZSBKPFQ+IHNob3VsZCBiZSBw
YXJhbWV0ZXJpemVkXG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSI0LiBXQVJOSU5HIGlu
IFguamF2YSAoYXQgbGluZSA1KVxuIiArIAorCQkiCUpbXSBzb3J0KEpbXSBsaXN0LCBJPD8gc3Vw
ZXIgSj4gaSkge1xuIiArIAorCQkiCSAgICAgICAgIF5cbiIgKyAKKwkJIkogaXMgYSByYXcgdHlw
ZS4gUmVmZXJlbmNlcyB0byBnZW5lcmljIHR5cGUgSjxUPiBzaG91bGQgYmUgcGFyYW1ldGVyaXpl
ZFxuIiArIAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiNS4gV0FSTklORyBpbiBYLmphdmEgKGF0
IGxpbmUgNSlcbiIgKyAKKwkJIglKW10gc29ydChKW10gbGlzdCwgSTw/IHN1cGVyIEo+IGkpIHtc
biIgKyAKKwkJIgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5cbiIgKyAKKwkJIkogaXMg
YSByYXcgdHlwZS4gUmVmZXJlbmNlcyB0byBnZW5lcmljIHR5cGUgSjxUPiBzaG91bGQgYmUgcGFy
YW1ldGVyaXplZFxuIiArIAorCQkiLS0tLS0tLS0tLVxuIik7Cit9CisvLyBodHRwczovL2J1Z3Mu
ZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDI2NTM3LCAgWzEuOF1baW5mZXJlbmNl
XSBFY2xpcHNlIGNvbXBpbGVyIHRoaW5rcyBJPD8gc3VwZXIgSj4gaXMgY29tcGF0aWJsZSB3aXRo
IEk8Sjw/Pj4gLSByYXcgdHlwZSBKIGludm9sdmVkIAorcHVibGljIHZvaWQgdGVzdEJ1ZzQyNjUz
N19nZW5lcmljKCkgeworCXJ1bk5lZ2F0aXZlVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJY
LmphdmEiLAorCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJIgl2b2lkIGZvbyhKW10gbGlz
dCwgSTxKPD8+PiBpKSB7XG4iICsKKwkJCSIJCXNvcnQobGlzdCwgaSk7XG4iICsKKwkJCSIJfVxu
IiArCisJCQkiCTxUPiBUW10gc29ydChUW10gbGlzdCwgSTw/IHN1cGVyIFQ+IGkpIHtcbiIgKwor
CQkJIgkJcmV0dXJuIGxpc3Q7XG4iICsKKwkJCSIJfVxuIiArCisJCQkifVxuIiArCisJCQkiaW50
ZXJmYWNlIEk8VD4ge31cbiIgKworCQkJImludGVyZmFjZSBKPFQ+IHt9XG4iCisJCX0sCisJCSIt
LS0tLS0tLS0tXG4iICsgCisJCSIxLiBXQVJOSU5HIGluIFguamF2YSAoYXQgbGluZSAyKVxuIiAr
IAorCQkiCXZvaWQgZm9vKEpbXSBsaXN0LCBJPEo8Pz4+IGkpIHtcbiIgKyAKKwkJIgkgICAgICAg
ICBeXG4iICsgCisJCSJKIGlzIGEgcmF3IHR5cGUuIFJlZmVyZW5jZXMgdG8gZ2VuZXJpYyB0eXBl
IEo8VD4gc2hvdWxkIGJlIHBhcmFtZXRlcml6ZWRcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAK
KwkJIjIuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAzKVxuIiArIAorCQkiCXNvcnQobGlzdCwg
aSk7XG4iICsgCisJCSIJXl5eXlxuIiArIAorCQkiVGhlIG1ldGhvZCBzb3J0KFRbXSwgSTw/IHN1
cGVyIFQ+KSBpbiB0aGUgdHlwZSBYIGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRz
IChKW10sIEk8Sjw/Pj4pXG4iICsgCisJCSItLS0tLS0tLS0tXG4iKTsKK30KKy8vIGh0dHBzOi8v
YnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00Mjc5NTcsIFsxLjhdIFR5cGUg
aW5mZXJlbmNlIGluY29ycmVjdCB3aGVuIGEgd2lsZGNhcmQgaXMgbWlzc2luZyAKK3B1YmxpYyB2
b2lkIHRlc3RCdWc0Mjc5NTcoKSB7CisJcnVuTmVnYXRpdmVUZXN0KAorCQluZXcgU3RyaW5nW10g
eworCQkJIlguamF2YSIsCisJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkiICAgIDxUPiB2
b2lkIHNvcnQoVFtdIGEsIEk8PyBzdXBlciBUPiBjKSB7IH1cbiIgKworCQkJIiAgICB2b2lkIGZv
byhJW10gZSwgSTxJPD8+PiBjb21wKSB7XG4iICsKKwkJCSIgICAgICAgIHNvcnQoZSwgY29tcCk7
XG4iICsKKwkJCSIgICAgfVxuIiArCisJCQkifVxuIiArCisJCQkiaW50ZXJmYWNlIEk8VD4ge31c
biIKKwkJfSwKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjEuIFdBUk5JTkcgaW4gWC5qYXZhIChh
dCBsaW5lIDMpXG4iICsgCisJCSIJdm9pZCBmb28oSVtdIGUsIEk8STw/Pj4gY29tcCkge1xuIiAr
IAorCQkiCSAgICAgICAgIF5cbiIgKyAKKwkJIkkgaXMgYSByYXcgdHlwZS4gUmVmZXJlbmNlcyB0
byBnZW5lcmljIHR5cGUgSTxUPiBzaG91bGQgYmUgcGFyYW1ldGVyaXplZFxuIiArIAorCQkiLS0t
LS0tLS0tLVxuIiArIAorCQkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDQpXG4iICsgCisJ
CSIJc29ydChlLCBjb21wKTtcbiIgKyAKKwkJIgleXl5eXG4iICsgCisJCSJUaGUgbWV0aG9kIHNv
cnQoVFtdLCBJPD8gc3VwZXIgVD4pIGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9y
IHRoZSBhcmd1bWVudHMgKElbXSwgSTxJPD8+PilcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIpOwor
fQorLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQyNzk1
NywgWzEuOF0gVHlwZSBpbmZlcmVuY2UgaW5jb3JyZWN0IHdoZW4gYSB3aWxkY2FyZCBpcyBtaXNz
aW5nIAorcHVibGljIHZvaWQgdGVzdEJ1ZzQyNzk1N2EoKSB7IC8vIHZlcmlmeSBlc2NhcGUgaGF0
Y2ggd29ya3MuCisJaWYgKHRoaXMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRz
LkpESzFfOCkgIAorCQlyZXR1cm47CisJTWFwIGN1c3RvbU9wdGlvbnMgPSBnZXRDb21waWxlck9w
dGlvbnMoKTsKKwljdXN0b21PcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1Bvc3RS
ZXNvbHV0aW9uUmF3VHlwZUNvbXBhdGliaWxpdHlDaGVjaywgQ29tcGlsZXJPcHRpb25zLkRJU0FC
TEVEKTsKKwlydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwK
KwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCSIgICAgPFQ+IHZvaWQgc29ydChUW10gYSwg
STw/IHN1cGVyIFQ+IGMpIHsgfVxuIiArCisJCQkiICAgIHZvaWQgZm9vKElbXSBlLCBJPEk8Pz4+
IGNvbXApIHtcbiIgKworCQkJIiAgICAgICAgc29ydChlLCBjb21wKTtcbiIgKworCQkJIiAgICB9
XG4iICsKKwkJCSJ9XG4iICsKKwkJCSJpbnRlcmZhY2UgSTxUPiB7fVxuIgorCQl9LAorCQkiLS0t
LS0tLS0tLVxuIiArIAorCQkiMS4gV0FSTklORyBpbiBYLmphdmEgKGF0IGxpbmUgMylcbiIgKyAK
KwkJIgl2b2lkIGZvbyhJW10gZSwgSTxJPD8+PiBjb21wKSB7XG4iICsgCisJCSIJICAgICAgICAg
XlxuIiArIAorCQkiSSBpcyBhIHJhdyB0eXBlLiBSZWZlcmVuY2VzIHRvIGdlbmVyaWMgdHlwZSBJ
PFQ+IHNob3VsZCBiZSBwYXJhbWV0ZXJpemVkXG4iICsgCisJCSItLS0tLS0tLS0tXG4iLCBudWxs
LCB0cnVlLCBjdXN0b21PcHRpb25zKTsKK30KKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9i
dWdzL3Nob3dfYnVnLmNnaT9pZD00Mjc5OTIsICBbMS44XSBjb21waWxlciBkaWZmZXJlbmNlIHRv
IGphdmFjIGludm9sdmluZyBhIHJhdyBhcnJheQorcHVibGljIHZvaWQgdGVzdDQyNzk5MigpIHsK
KwlpZiAodGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV82KQor
CQlyZXR1cm47IC8vIHVzZXMgQE92ZXJyaWRlCisJcnVuTmVnYXRpdmVUZXN0KAorCQluZXcgU3Ry
aW5nW10geworCQkJIlguamF2YSIsCisJCQkiaW1wb3J0IHN0YXRpYyBvcmcuanVuaXQuQXNzZXJ0
LmFzc2VydEFycmF5RXF1YWxzO1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5BcnJheXM7XG4i
ICsKKwkJCSJpbXBvcnQgb3JnLmp1bml0LlRlc3Q7XG4iICsKKwkJCSJwdWJsaWMgY2xhc3MgWCB7
XG4iICsKKwkJCSIgIEBUZXN0KGV4cGVjdGVkID0gSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uLmNs
YXNzKVxuIiArCisJCQkiICBwdWJsaWMgdm9pZCBzaG91bGRUaHJvd0V4Y2VwdGlvbldoZW5DbGFz
c2VzQXJlTm90SW5TYW1lSW5oZXJpdGFuY2VUcmVlKCkge1xuIiArCisJCQkiICAgIEFycmF5cy5z
b3J0KG5ldyBDbGFzc1tdIHtDaGltcC5jbGFzcywgQ2F0LmNsYXNzfSwgQ2xhc3NJbmhlcml0YW5j
ZURlcHRoQ29tcGFyYXRvci5JTlNUQU5DRSk7XG4iICsKKwkJCSIgIH1cbiIgKworCQkJIiAgcHVi
bGljIHN0YXRpYyBjbGFzcyBBbmltYWwge1xuIiArCisJCQkiICB9XG4iICsKKwkJCSIgIHB1Ymxp
YyBzdGF0aWMgY2xhc3MgTW9ua2V5IGV4dGVuZHMgQW5pbWFsIHtcbiIgKworCQkJIiAgfVxuIiAr
CisJCQkiICBwdWJsaWMgc3RhdGljIGNsYXNzIENoaW1wIGV4dGVuZHMgTW9ua2V5IHtcbiIgKwor
CQkJIiAgfVxuIiArCisJCQkiICBwdWJsaWMgc3RhdGljIGNsYXNzIENhdCBleHRlbmRzIEFuaW1h
bCB7XG4iICsKKwkJCSIgIH1cbiIgKworCQkJInB1YmxpYyBzdGF0aWMgY2xhc3MgQ2xhc3NJbmhl
cml0YW5jZURlcHRoQ29tcGFyYXRvciBpbXBsZW1lbnRzIENvbXBhcmF0b3I8Q2xhc3M8Pz4+IHtc
biIgKworCQkJIiAgcHVibGljIHN0YXRpYyBmaW5hbCBDbGFzc0luaGVyaXRhbmNlRGVwdGhDb21w
YXJhdG9yIElOU1RBTkNFID0gbmV3IENsYXNzSW5oZXJpdGFuY2VEZXB0aENvbXBhcmF0b3IoKTtc
biIgKworCQkJIiAgQE92ZXJyaWRlXG4iICsKKwkJCSIgIHB1YmxpYyBpbnQgY29tcGFyZShDbGFz
czw/PiBjMSwgQ2xhc3M8Pz4gYzIpIHtcbiIgKworCQkJIiAgICBpZihjMS5lcXVhbHMoYzIpKSB7
XG4iICsKKwkJCSIgICAgICByZXR1cm4gMDtcbiIgKworCQkJIiAgICB9XG4iICsKKwkJCSIgICAg
aWYoYzEuaXNBc3NpZ25hYmxlRnJvbShjMikpIHtcbiIgKworCQkJIiAgICAgIHJldHVybiAtMTtc
biIgKworCQkJIiAgICB9XG4iICsKKwkJCSIgICAgaWYoYzIuaXNBc3NpZ25hYmxlRnJvbShjMSkp
IHtcbiIgKworCQkJIiAgICAgIHJldHVybiAxO1xuIiArCisJCQkiICAgIH1cbiIgKworCQkJIiAg
ICB0aHJvdyBuZXcgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uKFwiY2xhc3NlcyB0byBjb21wYXJl
IG11c3QgYmUgaW4gdGhlIHNhbWUgaW5oZXJpdGFuY2UgdHJlZTogXCIgKyBjMSArIFwiOyBcIiAr
IGMyKTtcbiIgKworCQkJIiAgfVxuIiArCisJCQkifVxuIiArCisJCQkifVxuIgorCQl9LAorCQki
LS0tLS0tLS0tLVxuIiArIAorCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDEpXG4iICsg
CisJCSIJaW1wb3J0IHN0YXRpYyBvcmcuanVuaXQuQXNzZXJ0LmFzc2VydEFycmF5RXF1YWxzO1xu
IiArIAorCQkiCSAgICAgICAgICAgICAgXl5eXl5eXl5eXG4iICsgCisJCSJUaGUgaW1wb3J0IG9y
Zy5qdW5pdCBjYW5ub3QgYmUgcmVzb2x2ZWRcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJ
IjIuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAzKVxuIiArIAorCQkiCWltcG9ydCBvcmcuanVu
aXQuVGVzdDtcbiIgKyAKKwkJIgkgICAgICAgXl5eXl5eXl5eXG4iICsgCisJCSJUaGUgaW1wb3J0
IG9yZy5qdW5pdCBjYW5ub3QgYmUgcmVzb2x2ZWRcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAK
KwkJIjMuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA1KVxuIiArIAorCQkiCUBUZXN0KGV4cGVj
dGVkID0gSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uLmNsYXNzKVxuIiArIAorCQkiCSBeXl5eXG4i
ICsgCisJCSJUZXN0IGNhbm5vdCBiZSByZXNvbHZlZCB0byBhIHR5cGVcbiIgKyAKKwkJIi0tLS0t
LS0tLS1cbiIgKyAKKwkJIjQuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA3KVxuIiArIAorCQki
CUFycmF5cy5zb3J0KG5ldyBDbGFzc1tdIHtDaGltcC5jbGFzcywgQ2F0LmNsYXNzfSwgQ2xhc3NJ
bmhlcml0YW5jZURlcHRoQ29tcGFyYXRvci5JTlNUQU5DRSk7XG4iICsgCisJCSIJICAgICAgIF5e
Xl5cbiIgKyAKKwkJIlRoZSBtZXRob2Qgc29ydChUW10sIENvbXBhcmF0b3I8PyBzdXBlciBUPikg
aW4gdGhlIHR5cGUgQXJyYXlzIGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRzIChD
bGFzc1tdLCBYLkNsYXNzSW5oZXJpdGFuY2VEZXB0aENvbXBhcmF0b3IpXG4iICsgCisJCSItLS0t
LS0tLS0tXG4iICsgCisJCSI1LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTcpXG4iICsgCisJ
CSIJcHVibGljIHN0YXRpYyBjbGFzcyBDbGFzc0luaGVyaXRhbmNlRGVwdGhDb21wYXJhdG9yIGlt
cGxlbWVudHMgQ29tcGFyYXRvcjxDbGFzczw/Pj4ge1xuIiArIAorCQkiCSAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5e
Xl5cbiIgKyAKKwkJIkNvbXBhcmF0b3IgY2Fubm90IGJlIHJlc29sdmVkIHRvIGEgdHlwZVxuIiAr
IAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiNi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDIw
KVxuIiArIAorCQkiCXB1YmxpYyBpbnQgY29tcGFyZShDbGFzczw/PiBjMSwgQ2xhc3M8Pz4gYzIp
IHtcbiIgKyAKKwkJIgkgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
XlxuIiArIAorCQkiVGhlIG1ldGhvZCBjb21wYXJlKENsYXNzPD8+LCBDbGFzczw/Pikgb2YgdHlw
ZSBYLkNsYXNzSW5oZXJpdGFuY2VEZXB0aENvbXBhcmF0b3IgbXVzdCBvdmVycmlkZSBvciBpbXBs
ZW1lbnQgYSBzdXBlcnR5cGUgbWV0aG9kXG4iICsgCisJCSItLS0tLS0tLS0tXG4iKTsKK30KIH0K
IApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9NZXNzYWdlU2VuZC5qYXZhIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9N
ZXNzYWdlU2VuZC5qYXZhCmluZGV4IGM0OGYyODAuLjJjZDNmZjcgMTAwNjQ0Ci0tLSBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hc3QvTWVzc2FnZVNlbmQuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L01lc3NhZ2VTZW5kLmphdmEK
QEAgLTg2OCw2ICs4NjgsNTEgQEAKIAkJCT8gc2NvcGUuZ2V0SW1wbGljaXRNZXRob2QodGhpcy5z
ZWxlY3RvciwgYXJndW1lbnRUeXBlcywgdGhpcykKIAkJCTogc2NvcGUuZ2V0TWV0aG9kKHRoaXMu
YWN0dWFsUmVjZWl2ZXJUeXBlLCB0aGlzLnNlbGVjdG9yLCBhcmd1bWVudFR5cGVzLCB0aGlzKTsK
IAlyZXNvbHZlUG9seUV4cHJlc3Npb25Bcmd1bWVudHModGhpcywgdGhpcy5iaW5kaW5nLCBhcmd1
bWVudFR5cGVzLCBzY29wZSk7CisJCisJLyogVGhlcmUgYXJlIGVtYmVkZGVkIGFzc3VtcHRpb25z
IGluIHRoZSBKTFM4IHR5cGUgaW5mZXJlbmNlIHNjaGVtZSB0aGF0IGEgc3VjY2Vzc2Z1bCBzb2x1
dGlvbiBvZiB0aGUgdHlwZSBlcXVhdGlvbnMgcmVzdWx0cyBpbiBhbgorCSAgIGFwcGxpY2FibGUg
bWV0aG9kLiBUaGlzIGFwcGVhcnMgdG8gYmUgYSB0ZW51b3VzIGFzc3VtcHRpb24sIGF0IGxlYXN0
IG9uZSBub3QgbWFkZSBieSB0aGUgSkxTNyBlbmdpbmUgb3IgdGhlIHJlZmVyZW5jZSBjb21waWxl
ciBhbmQgCisJICAgdGhlcmUgYXJlIGNhc2VzIHdoZXJlIHRoaXMgYXNzdW1wdGlvbiB3b3VsZCBh
cHBlYXIgaW52YWxpZDogU2VlIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVn
LmNnaT9pZD00MjY1MzcsIHdoZXJlIHdlIGFsbG93IAorCSAgIGNlcnRhaW4gY29tcGF0aWJpbGl0
eSBjb25zdHJhaW5zIGFyb3VuZCByYXcgdHlwZXMgdG8gYmUgdmlvbGF0ZWQuIAorICAgICAgIAor
ICAgICAgIEhlcmUsIHdlIGZpbHRlciBvdXQgc3VjaCBpbmFwcGxpY2FibGUgbWV0aG9kcyB3aXRo
IHJhdyB0eXBlIHVzYWdlIHRoYXQgbWF5IGhhdmUgc25lYWtlZCBwYXN0IG92ZXJsb2FkIHJlc29s
dXRpb24gYW5kIHR5cGUgaW5mZXJlbmNlLCAKKyAgICAgICBwbGF5aW5nIHRoZSBkZXZpbHMgYWR2
b2NhdGUsIGJsYW1pbmcgdGhlIGludm9jYXRpb25zIHdpdGggcmF3IGFyZ3VtZW50cyB0aGF0IHNo
b3VsZCBub3QgZ28gYmxhbWVsZXNzLiBBdCB0aGlzIHRpbWUgdGhpcyBpcyBpbiB0aGUgCisgICAg
ICAgbmF0dXJlIG9mIGEgcG9pbnQgZml4IGFuZCBpcyBub3QgYSBnZW5lcmFsIHNvbHV0aW9uIHdo
aWNoIG5lZWRzIHRvIGNvbWUgbGF0ZXIgKHRoYXQgYWxzbyBpbmNsdWRlcyBBRSwgUUFFIGFuZCBF
Q0MpCisgICAgKi8KKwlmaW5hbCBDb21waWxlck9wdGlvbnMgY29tcGlsZXJPcHRpb25zID0gc2Nv
cGUuY29tcGlsZXJPcHRpb25zKCk7CisJaWYgKGNvbXBpbGVyT3B0aW9ucy5zb3VyY2VMZXZlbCA+
PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84ICYmIHRoaXMuYmluZGluZyBpbnN0YW5jZW9mIFBh
cmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyAmJiB0aGlzLmJpbmRpbmcuaXNWYWxpZEJp
bmRpbmcoKSkgeworCQlpZiAoIWNvbXBpbGVyT3B0aW9ucy5wb3N0UmVzb2x1dGlvblJhd1R5cGVD
b21wYXRpYmlsaXR5Q2hlY2spCisJCQlyZXR1cm47CisJCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0
aG9kQmluZGluZyBwZ21iID0gKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgdGhp
cy5iaW5kaW5nOworCQlJbmZlcmVuY2VDb250ZXh0MTggY3R4ID0gZ2V0SW5mZXJlbmNlQ29udGV4
dChwZ21iKTsKKwkJaWYgKGN0eCA9PSBudWxsIHx8IGN0eC5zdGVwQ29tcGxldGVkIDwgSW5mZXJl
bmNlQ29udGV4dDE4LkJJTkRJTkdTX1VQREFURUQpCisJCQlyZXR1cm47CisJCWludCBsZW5ndGgg
PSBwZ21iLnR5cGVBcmd1bWVudHMgPT0gbnVsbCA/IDAgOiBwZ21iLnR5cGVBcmd1bWVudHMubGVu
Z3RoOworCQlib29sZWFuIHNhd1Jhd1R5cGUgPSBmYWxzZTsKKwkJZm9yIChpbnQgaSA9IDA7ICBp
IDwgbGVuZ3RoOyBpKyspIHsKKwkJCS8qIE11c3QgY2hlY2sgY29tcGF0aWJpbGl0eSBhZ2FpbnN0
IGNhcHR1cmUgZnJlZSBtZXRob2QuIEZvcm1hbCBwYXJhbWV0ZXJzIGNhbm5vdCBoYXZlIGNhcHR1
cmVzLCBidXQgb3VyIG1hY2hpbmVyeSBpcyBub3QgdXAgdG8gc251ZmYgdG8KKwkJCSAgIGNvbnN0
cnVjdCBhIFBHTUIgd2l0aG91dCBjYXB0dXJlcyBhdCB0aGUgbW9tZW50IC0gZm9yIG9uZSB0aGlu
ZyBJVENCIGRvZXMgbm90IHN1cHBvcnQgdW5jYXB0dXJlKCkgeWV0LCBmb3IgYW5vdGhlciwgSU5U
RVJTRUNUSU9OX0NBU1RfVFlQRQorCQkJICAgZG9lcyBub3QgYXBwZWFyIGZ1bGx5IGhvb2tlZCB1
cCBpbnRvIGlzQ29tcGF0aWJsZVdpdGggYW5kIGlzRXF1aXZhbGVudCB0byBldmVyeXdoZXJlLiBB
dCB0aGUgbW9tZW50LCBiYWlsIG91dCBpZiB3ZSBzZWUgY2FwdHVyZS4KKwkJCSovICAgCisJCQlp
ZiAocGdtYi50eXBlQXJndW1lbnRzW2ldLmlzQ2FwdHVyZSgpKQorCQkJCXJldHVybjsKKwkJCWlm
IChwZ21iLnR5cGVBcmd1bWVudHNbaV0uaXNSYXdUeXBlKCkpCisJCQkJc2F3UmF3VHlwZSA9IHRy
dWU7CisJCX0KKwkJaWYgKCFzYXdSYXdUeXBlKQorCQkJcmV0dXJuOworCQlsZW5ndGggPSB0aGlz
LmFyZ3VtZW50cyA9PSBudWxsID8gMCA6IHRoaXMuYXJndW1lbnRzLmxlbmd0aDsKKwkJaWYgKGxl
bmd0aCA9PSAwKQorCQkJcmV0dXJuOworCQlUeXBlQmluZGluZyBbXSBmaW5hbEFyZ3VtZW50VHlw
ZXMgPSBuZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXTsKKwkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW5n
dGg7IGkrKykgeworCQkJVHlwZUJpbmRpbmcgZmluYWxBcmd1bWVudFR5cGUgPSB0aGlzLmFyZ3Vt
ZW50c1tpXS5yZXNvbHZlZFR5cGU7CisJCQlpZiAoZmluYWxBcmd1bWVudFR5cGUgPT0gbnVsbCB8
fCAhZmluYWxBcmd1bWVudFR5cGUuaXNWYWxpZEJpbmRpbmcoKSkgIC8vIGFscmVhZHkgc2lkZWQg
d2l0aCB0aGUgZGV2aWwuCisJCQkJcmV0dXJuOworCQkJZmluYWxBcmd1bWVudFR5cGVzW2ldID0g
ZmluYWxBcmd1bWVudFR5cGU7IAorCQl9CisJCWlmIChzY29wZS5wYXJhbWV0ZXJDb21wYXRpYmls
aXR5TGV2ZWwodGhpcy5iaW5kaW5nLCBmaW5hbEFyZ3VtZW50VHlwZXMsIGZhbHNlKSA9PSBTY29w
ZS5OT1RfQ09NUEFUSUJMRSkKKwkJCXRoaXMuYmluZGluZyA9IG5ldyBQcm9ibGVtTWV0aG9kQmlu
ZGluZyh0aGlzLmJpbmRpbmcub3JpZ2luYWwoKSwgdGhpcy5iaW5kaW5nLnNlbGVjdG9yLCBmaW5h
bEFyZ3VtZW50VHlwZXMsIFByb2JsZW1SZWFzb25zLk5vdEZvdW5kKTsKKwl9CiB9CiAKIEBPdmVy
cmlkZQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2ltcGwvQ29tcGlsZXJPcHRpb25zLmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvaW1wbC9Db21waWxlck9wdGlvbnMuamF2YQppbmRleCA1NDg3MTdlLi5iY2RiNjI4IDEwMDY0
NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvaW1wbC9Db21waWxlck9wdGlvbnMuamF2YQorKysgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvaW1w
bC9Db21waWxlck9wdGlvbnMuamF2YQpAQCAtMTUwLDYgKzE1MCw3IEBACiAJLy8gT1BUSU9OX1N0
b3JlX0Fubm90YXRpb25zOiB1bmRvY3VtZW50ZWQgb3B0aW9uIGZvciB0ZXN0aW5nIHB1cnBvc2Vz
CiAJcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgT1BUSU9OX1N0b3JlX0Fubm90YXRpb25zID0g
Im9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLnN0b3JlQW5ub3RhdGlvbnMiOyAvLyROT04t
TkxTLTEkCiAJcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgT1BUSU9OX0VtdWxhdGVKYXZhY0J1
ZzgwMzE3NDQgPSAib3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuZW11bGF0ZUphdmFjQnVn
ODAzMTc0NCI7IC8vJE5PTi1OTFMtMSQKKwlwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBPUFRJ
T05fUG9zdFJlc29sdXRpb25SYXdUeXBlQ29tcGF0aWJpbGl0eUNoZWNrID0gIm9yZy5lY2xpcHNl
LmpkdC5jb3JlLmNvbXBpbGVyLnBvc3RSZXNvbHV0aW9uUmF3VHlwZUNvbXBhdGliaWxpdHlDaGVj
ayI7IC8vJE5PTi1OTFMtMSQKIAlwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBPUFRJT05fUmVw
b3J0UmVkdW5kYW50U3VwZXJpbnRlcmZhY2UgPSAgIm9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBp
bGVyLnByb2JsZW0ucmVkdW5kYW50U3VwZXJpbnRlcmZhY2UiOyAvLyROT04tTkxTLTEkCiAJcHVi
bGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgT1BUSU9OX1JlcG9ydENvbXBhcmluZ0lkZW50aWNhbCA9
ICAib3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIucHJvYmxlbS5jb21wYXJpbmdJZGVudGlj
YWwiOyAvLyROT04tTkxTLTEkCiAJcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgT1BUSU9OX1Jl
cG9ydE1pc3NpbmdTeW5jaHJvbml6ZWRPbkluaGVyaXRlZE1ldGhvZCA9ICAib3JnLmVjbGlwc2Uu
amR0LmNvcmUuY29tcGlsZXIucHJvYmxlbS5taXNzaW5nU3luY2hyb25pemVkT25Jbmhlcml0ZWRN
ZXRob2QiOyAvLyROT04tTkxTLTEkCkBAIC00MTIsNiArNDEzLDggQEAKIAlwdWJsaWMgYm9vbGVh
biBwcm9jZXNzQW5ub3RhdGlvbnM7CiAJLyoqIFN0b3JlIGFubm90YXRpb25zICovCiAJcHVibGlj
IGJvb2xlYW4gc3RvcmVBbm5vdGF0aW9uczsKKwkvKiogZXh0cmEgY2hlY2sgZm9yIHJhdyB0eXBl
IGNvbXBhdGliaWxpdHkgcG9zdCBvdmVybG9hZCByZXNvbHV0aW9uICovCisJcHVibGljIGJvb2xl
YW4gcG9zdFJlc29sdXRpb25SYXdUeXBlQ29tcGF0aWJpbGl0eUNoZWNrID0gdHJ1ZTsKIAkvKiog
U3BlY2lmeSBpZiBuZWVkIHRvIHJlcG9ydCBtaXNzaW5nIG92ZXJyaWRlIGFubm90YXRpb24gZm9y
IGEgbWV0aG9kIGltcGxlbWVudGluZyBhbiBpbnRlcmZhY2UgbWV0aG9kIChqYXZhIDEuNiBhbmQg
YWJvdmUpKi8KIAlwdWJsaWMgYm9vbGVhbiByZXBvcnRNaXNzaW5nT3ZlcnJpZGVBbm5vdGF0aW9u
Rm9ySW50ZXJmYWNlTWV0aG9kSW1wbGVtZW50YXRpb247CiAJLyoqIEluZGljYXRlIGlmIGFubm90
YXRpb24gcHJvY2Vzc2luZyBnZW5lcmF0ZXMgY2xhc3NmaWxlcyAqLwpAQCAtMTEzNyw2ICsxMTQw
LDcgQEAKIAkJb3B0aW9uc01hcC5wdXQoT1BUSU9OX1Byb2Nlc3NfQW5ub3RhdGlvbnMsIHRoaXMu
cHJvY2Vzc0Fubm90YXRpb25zID8gRU5BQkxFRCA6IERJU0FCTEVEKTsKIAkJb3B0aW9uc01hcC5w
dXQoT1BUSU9OX1N0b3JlX0Fubm90YXRpb25zLCB0aGlzLnN0b3JlQW5ub3RhdGlvbnMgPyBFTkFC
TEVEIDogRElTQUJMRUQpOwogCQlvcHRpb25zTWFwLnB1dChPUFRJT05fRW11bGF0ZUphdmFjQnVn
ODAzMTc0NCwgdGhpcy5lbXVsYXRlSmF2YWNCdWc4MDMxNzQ0ID8gRU5BQkxFRCA6IERJU0FCTEVE
KTsKKwkJb3B0aW9uc01hcC5wdXQoT1BUSU9OX1Bvc3RSZXNvbHV0aW9uUmF3VHlwZUNvbXBhdGli
aWxpdHlDaGVjaywgdGhpcy5wb3N0UmVzb2x1dGlvblJhd1R5cGVDb21wYXRpYmlsaXR5Q2hlY2sg
PyBFTkFCTEVEIDogRElTQUJMRUQpOwogCQlvcHRpb25zTWFwLnB1dChPUFRJT05fUmVwb3J0UmVk
dW5kYW50U3VwZXJpbnRlcmZhY2UsIGdldFNldmVyaXR5U3RyaW5nKFJlZHVuZGFudFN1cGVyaW50
ZXJmYWNlKSk7CiAJCW9wdGlvbnNNYXAucHV0KE9QVElPTl9SZXBvcnRDb21wYXJpbmdJZGVudGlj
YWwsIGdldFNldmVyaXR5U3RyaW5nKENvbXBhcmluZ0lkZW50aWNhbCkpOwogCQlvcHRpb25zTWFw
LnB1dChPUFRJT05fUmVwb3J0TWlzc2luZ1N5bmNocm9uaXplZE9uSW5oZXJpdGVkTWV0aG9kLCBn
ZXRTZXZlcml0eVN0cmluZyhNaXNzaW5nU3luY2hyb25pemVkTW9kaWZpZXJJbkluaGVyaXRlZE1l
dGhvZCkpOwpAQCAtMTgxMiw2ICsxODE2LDEzIEBACiAJCQkJdGhpcy5lbXVsYXRlSmF2YWNCdWc4
MDMxNzQ0ID0gZmFsc2U7CiAJCQl9CiAJCX0KKwkJaWYgKChvcHRpb25WYWx1ZSA9IG9wdGlvbnNN
YXAuZ2V0KE9QVElPTl9Qb3N0UmVzb2x1dGlvblJhd1R5cGVDb21wYXRpYmlsaXR5Q2hlY2spKSAh
PSBudWxsKSB7CisJCQlpZiAoRU5BQkxFRC5lcXVhbHMob3B0aW9uVmFsdWUpKSB7CisJCQkJdGhp
cy5wb3N0UmVzb2x1dGlvblJhd1R5cGVDb21wYXRpYmlsaXR5Q2hlY2sgPSB0cnVlOworCQkJfSBl
bHNlIGlmIChESVNBQkxFRC5lcXVhbHMob3B0aW9uVmFsdWUpKSB7CisJCQkJdGhpcy5wb3N0UmVz
b2x1dGlvblJhd1R5cGVDb21wYXRpYmlsaXR5Q2hlY2sgPSBmYWxzZTsKKwkJCX0KKwkJfQogCQlp
ZiAoKG9wdGlvblZhbHVlID0gb3B0aW9uc01hcC5nZXQoT1BUSU9OX1JlcG9ydFVuaW50ZXJuZWRJ
ZGVudGl0eUNvbXBhcmlzb24pKSAhPSBudWxsKSB7CiAJCQlpZiAoRU5BQkxFRC5lcXVhbHMob3B0
aW9uVmFsdWUpKSB7CiAJCQkJdGhpcy5jb21wbGFpbk9uVW5pbnRlcm5lZElkZW50aXR5Q29tcGFy
aXNvbiA9IHRydWU7
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>248216</attachid>
            <date>2014-10-27 14:51:00 -0400</date>
            <delta_ts>2014-10-28 01:18:46 -0400</delta_ts>
            <desc>Proposed patch</desc>
            <filename>rawcheck.patch</filename>
            <type>text/plain</type>
            <size>15275</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0JhdGNoQ29tcGlsZXJU
ZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2Vj
bGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9CYXRjaENvbXBpbGVyVGVz
dC5qYXZhCmluZGV4IDBlOWJhNzMuLjA1OTNlNTcgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21w
aWxlci9yZWdyZXNzaW9uL0JhdGNoQ29tcGlsZXJUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Nv
bXBpbGVyL3JlZ3Jlc3Npb24vQmF0Y2hDb21waWxlclRlc3QuamF2YQpAQCAtMTkwOSw3ICsxOTA5
LDYgQEAKIAkJCSIJCTxvcHRpb24ga2V5PVwib3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIu
ZW11bGF0ZUphdmFjQnVnODAzMTc0NFwiIHZhbHVlPVwiZW5hYmxlZFwiLz5cbiIgKwogCQkJIgkJ
PG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5nZW5lcmF0ZUNsYXNz
RmlsZXNcIiB2YWx1ZT1cImVuYWJsZWRcIi8+XG4iICsgCiAJCQkiCQk8b3B0aW9uIGtleT1cIm9y
Zy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLm1heFByb2JsZW1QZXJVbml0XCIgdmFsdWU9XCIx
MDBcIi8+XG4iICsgCi0JCQkiCQk8b3B0aW9uIGtleT1cIm9yZy5lY2xpcHNlLmpkdC5jb3JlLmNv
bXBpbGVyLnBvc3RSZXNvbHV0aW9uUmF3VHlwZUNvbXBhdGliaWxpdHlDaGVja1wiIHZhbHVlPVwi
ZW5hYmxlZFwiLz5cbiIgKwogCQkJIgkJPG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBzZS5qZHQuY29y
ZS5jb21waWxlci5wcm9ibGVtLmFubm90YXRpb25TdXBlckludGVyZmFjZVwiIHZhbHVlPVwid2Fy
bmluZ1wiLz5cbiIgKyAKIAkJCSIJCTxvcHRpb24ga2V5PVwib3JnLmVjbGlwc2UuamR0LmNvcmUu
Y29tcGlsZXIucHJvYmxlbS5hc3NlcnRJZGVudGlmaWVyXCIgdmFsdWU9XCJ3YXJuaW5nXCIvPlxu
IiArIAogCQkJIgkJPG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5w
cm9ibGVtLmF1dG9ib3hpbmdcIiB2YWx1ZT1cImlnbm9yZVwiLz5cbiIgKyAKZGlmZiAtLWdpdCBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQv
Y29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3QuamF2
YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3Qu
amF2YQppbmRleCBjZGIxMjJlLi43MzQ4OThhIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGls
ZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25UZXN0LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3Rz
L2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVzdC5qYXZhCkBAIC00NDQ0
LDMwICs0NDQ0LDYgQEAKIAkJIlRoZSBtZXRob2Qgc29ydChUW10sIEk8PyBzdXBlciBUPikgaW4g
dGhlIHR5cGUgWCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoSVtdLCBJPEk8
Pz4+KVxuIiArIAogCQkiLS0tLS0tLS0tLVxuIik7CiB9Ci0vLyBodHRwczovL2J1Z3MuZWNsaXBz
ZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDI3OTU3LCBbMS44XSBUeXBlIGluZmVyZW5jZSBp
bmNvcnJlY3Qgd2hlbiBhIHdpbGRjYXJkIGlzIG1pc3NpbmcgCi1wdWJsaWMgdm9pZCB0ZXN0QnVn
NDI3OTU3YSgpIHsgLy8gdmVyaWZ5IGVzY2FwZSBoYXRjaCB3b3Jrcy4KLQlpZiAodGhpcy5jb21w
bGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84KSAgCi0JCXJldHVybjsKLQlN
YXAgY3VzdG9tT3B0aW9ucyA9IGdldENvbXBpbGVyT3B0aW9ucygpOwotCWN1c3RvbU9wdGlvbnMu
cHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJT05fUG9zdFJlc29sdXRpb25SYXdUeXBlQ29tcGF0aWJp
bGl0eUNoZWNrLCBDb21waWxlck9wdGlvbnMuRElTQUJMRUQpOwotCXJ1bk5lZ2F0aXZlVGVzdCgK
LQkJbmV3IFN0cmluZ1tdIHsKLQkJCSJYLmphdmEiLAotCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIg
KwotCQkJIiAgICA8VD4gdm9pZCBzb3J0KFRbXSBhLCBJPD8gc3VwZXIgVD4gYykgeyB9XG4iICsK
LQkJCSIgICAgdm9pZCBmb28oSVtdIGUsIEk8STw/Pj4gY29tcCkge1xuIiArCi0JCQkiICAgICAg
ICBzb3J0KGUsIGNvbXApO1xuIiArCi0JCQkiICAgIH1cbiIgKwotCQkJIn1cbiIgKwotCQkJImlu
dGVyZmFjZSBJPFQ+IHt9XG4iCi0JCX0sCi0JCSItLS0tLS0tLS0tXG4iICsgCi0JCSIxLiBXQVJO
SU5HIGluIFguamF2YSAoYXQgbGluZSAzKVxuIiArIAotCQkiCXZvaWQgZm9vKElbXSBlLCBJPEk8
Pz4+IGNvbXApIHtcbiIgKyAKLQkJIgkgICAgICAgICBeXG4iICsgCi0JCSJJIGlzIGEgcmF3IHR5
cGUuIFJlZmVyZW5jZXMgdG8gZ2VuZXJpYyB0eXBlIEk8VD4gc2hvdWxkIGJlIHBhcmFtZXRlcml6
ZWRcbiIgKyAKLQkJIi0tLS0tLS0tLS1cbiIsIG51bGwsIHRydWUsIGN1c3RvbU9wdGlvbnMpOwot
fQogLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQyNzk5
MiwgIFsxLjhdIGNvbXBpbGVyIGRpZmZlcmVuY2UgdG8gamF2YWMgaW52b2x2aW5nIGEgcmF3IGFy
cmF5CiBwdWJsaWMgdm9pZCB0ZXN0NDI3OTkyKCkgewogCWlmICh0aGlzLmNvbXBsaWFuY2VMZXZl
bCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzYpCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29t
cGlsZXIvcmVncmVzc2lvbi9NZXRob2RWZXJpZnlUZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGls
ZXIvcmVncmVzc2lvbi9NZXRob2RWZXJpZnlUZXN0LmphdmEKaW5kZXggYWU4MzU3Yi4uNDRiZWIw
ZiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTWV0aG9kVmVyaWZ5
VGVzdC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9v
cmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL01ldGhvZFZlcmlm
eVRlc3QuamF2YQpAQCAtNzI0NCw2ICs3MjQ0LDcgQEAKIAkJCSIgIH1cbiIgKwogCQkJIn1cbiIs
IC8vID09PT09PT09PT09PT09PT09CiAJCX0sCisJCXRoaXMuY29tcGxpYW5jZUxldmVsIDwgQ2xh
c3NGaWxlQ29uc3RhbnRzLkpESzFfOCA/IAogCQkiLS0tLS0tLS0tLVxuIiArCiAJCSIxLiBXQVJO
SU5HIGluIFguamF2YSAoYXQgbGluZSA3KVxuIiArCiAJCSIJdm9pZCBmb28oWVtdIGFycmF5KVxu
IiArCkBAIC03MjU0LDcgKzcyNTUsMjMgQEAKIAkJIgl5LmFkZEFsbChBcnJheXMuYXNMaXN0KGFy
cmF5KSk7XG4iICsKIAkJIgkgIF5eXl5eXlxuIiArCiAJCSJUaGUgbWV0aG9kIGFkZEFsbChDb2xs
ZWN0aW9uPD8gZXh0ZW5kcyBZPFg+PikgaW4gdGhlIHR5cGUgQXJyYXlMaXN0PFk8WD4+IGlzIG5v
dCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRzIChMaXN0PFk+KVxuIiArCi0JCSItLS0tLS0t
LS0tXG4iCisJCSItLS0tLS0tLS0tXG4iIDogCisJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJIjEu
IFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDcpXG4iICsgCisJCQkiCXZvaWQgZm9vKFlbXSBh
cnJheSlcbiIgKyAKKwkJCSIJICAgICAgICAgXlxuIiArIAorCQkJIlkgaXMgYSByYXcgdHlwZS4g
UmVmZXJlbmNlcyB0byBnZW5lcmljIHR5cGUgWTxUPiBzaG91bGQgYmUgcGFyYW1ldGVyaXplZFxu
IiArIAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCSIyLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxp
bmUgOSlcbiIgKyAKKwkJCSIJeS5hZGRBbGwoQXJyYXlzLmFzTGlzdChhcnJheSkpO1xuIiArIAor
CQkJIgkgIF5eXl5eXlxuIiArIAorCQkJIlRoZSBtZXRob2QgYWRkQWxsKENvbGxlY3Rpb248PyBl
eHRlbmRzIFk8WD4+KSBpbiB0aGUgdHlwZSBBcnJheUxpc3Q8WTxYPj4gaXMgbm90IGFwcGxpY2Fi
bGUgZm9yIHRoZSBhcmd1bWVudHMgKExpc3Q8WT4pXG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIiAr
IAorCQkJIjMuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA5KVxuIiArIAorCQkJIgl5LmFkZEFs
bChBcnJheXMuYXNMaXN0KGFycmF5KSk7XG4iICsgCisJCQkiCSAgICAgICAgIF5eXl5eXl5eXl5e
Xl5eXl5eXl5eXG4iICsgCisJCQkiVHlwZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBM
aXN0PFk+IHRvIENvbGxlY3Rpb248PyBleHRlbmRzIFk8WD4+XG4iICsgCisJCQkiLS0tLS0tLS0t
LVxuIgogCSk7CiB9CiAKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTWVzc2FnZVNlbmQuamF2YSBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hc3QvTWVzc2FnZVNlbmQuamF2YQppbmRleCA3Mjk1MmY4Li4yNjhkNGMzIDEwMDY0
NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYXN0L01lc3NhZ2VTZW5kLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9NZXNz
YWdlU2VuZC5qYXZhCkBAIC04ODAsNDcgKzg4MCw2IEBACiAJCiAJcmVzb2x2ZVBvbHlFeHByZXNz
aW9uQXJndW1lbnRzKHRoaXMsIHRoaXMuYmluZGluZywgdGhpcy5hcmd1bWVudFR5cGVzLCBzY29w
ZSk7CiAJCi0JLyogVGhlcmUgYXJlIGVtYmVkZGVkIGFzc3VtcHRpb25zIGluIHRoZSBKTFM4IHR5
cGUgaW5mZXJlbmNlIHNjaGVtZSB0aGF0IGEgc3VjY2Vzc2Z1bCBzb2x1dGlvbiBvZiB0aGUgdHlw
ZSBlcXVhdGlvbnMgcmVzdWx0cyBpbiBhbgotCSAgIGFwcGxpY2FibGUgbWV0aG9kLiBUaGlzIGFw
cGVhcnMgdG8gYmUgYSB0ZW51b3VzIGFzc3VtcHRpb24sIGF0IGxlYXN0IG9uZSBub3QgbWFkZSBi
eSB0aGUgSkxTNyBlbmdpbmUgb3IgdGhlIHJlZmVyZW5jZSBjb21waWxlciBhbmQgCi0JICAgdGhl
cmUgYXJlIGNhc2VzIHdoZXJlIHRoaXMgYXNzdW1wdGlvbiB3b3VsZCBhcHBlYXIgaW52YWxpZDog
U2VlIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00MjY1Mzcs
IHdoZXJlIHdlIGFsbG93IAotCSAgIGNlcnRhaW4gY29tcGF0aWJpbGl0eSBjb25zdHJhaW5zIGFy
b3VuZCByYXcgdHlwZXMgdG8gYmUgdmlvbGF0ZWQuIAotICAgICAgIAotICAgICAgIEhlcmUsIHdl
IGZpbHRlciBvdXQgc3VjaCBpbmFwcGxpY2FibGUgbWV0aG9kcyB3aXRoIHJhdyB0eXBlIHVzYWdl
IHRoYXQgbWF5IGhhdmUgc25lYWtlZCBwYXN0IG92ZXJsb2FkIHJlc29sdXRpb24gYW5kIHR5cGUg
aW5mZXJlbmNlLCAKLSAgICAgICBwbGF5aW5nIHRoZSBkZXZpbHMgYWR2b2NhdGUsIGJsYW1pbmcg
dGhlIGludm9jYXRpb25zIHdpdGggcmF3IGFyZ3VtZW50cyB0aGF0IHNob3VsZCBub3QgZ28gYmxh
bWVsZXNzLiBBdCB0aGlzIHRpbWUgdGhpcyBpcyBpbiB0aGUgCi0gICAgICAgbmF0dXJlIG9mIGEg
cG9pbnQgZml4IGFuZCBpcyBub3QgYSBnZW5lcmFsIHNvbHV0aW9uIHdoaWNoIG5lZWRzIHRvIGNv
bWUgbGF0ZXIgKHRoYXQgYWxzbyBpbmNsdWRlcyBBRSwgUUFFIGFuZCBFQ0MpCi0gICAgKi8KLQlm
aW5hbCBDb21waWxlck9wdGlvbnMgY29tcGlsZXJPcHRpb25zID0gc2NvcGUuY29tcGlsZXJPcHRp
b25zKCk7Ci0JaWYgKGNvbXBpbGVyT3B0aW9ucy5zb3VyY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25z
dGFudHMuSkRLMV84ICYmIHRoaXMuYmluZGluZyBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5l
cmljTWV0aG9kQmluZGluZyAmJiB0aGlzLmJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkgewotCQlp
ZiAoIWNvbXBpbGVyT3B0aW9ucy5wb3N0UmVzb2x1dGlvblJhd1R5cGVDb21wYXRpYmlsaXR5Q2hl
Y2spCi0JCQlyZXR1cm4gdGhpcy5iaW5kaW5nLnJldHVyblR5cGU7Ci0JCVBhcmFtZXRlcml6ZWRH
ZW5lcmljTWV0aG9kQmluZGluZyBwZ21iID0gKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmlu
ZGluZykgdGhpcy5iaW5kaW5nOwotCQlpbnQgbGVuZ3RoID0gcGdtYi50eXBlQXJndW1lbnRzID09
IG51bGwgPyAwIDogcGdtYi50eXBlQXJndW1lbnRzLmxlbmd0aDsKLQkJYm9vbGVhbiBzYXdSYXdU
eXBlID0gZmFsc2U7Ci0JCWZvciAoaW50IGkgPSAwOyAgaSA8IGxlbmd0aDsgaSsrKSB7Ci0JCQkv
KiBNdXN0IGNoZWNrIGNvbXBhdGliaWxpdHkgYWdhaW5zdCBjYXB0dXJlIGZyZWUgbWV0aG9kLiBG
b3JtYWwgcGFyYW1ldGVycyBjYW5ub3QgaGF2ZSBjYXB0dXJlcywgYnV0IG91ciBtYWNoaW5lcnkg
aXMgbm90IHVwIHRvIHNudWZmIHRvCi0JCQkgICBjb25zdHJ1Y3QgYSBQR01CIHdpdGhvdXQgY2Fw
dHVyZXMgYXQgdGhlIG1vbWVudCAtIGZvciBvbmUgdGhpbmcgSVRDQiBkb2VzIG5vdCBzdXBwb3J0
IHVuY2FwdHVyZSgpIHlldCwgZm9yIGFub3RoZXIsIElOVEVSU0VDVElPTl9DQVNUX1RZUEUKLQkJ
CSAgIGRvZXMgbm90IGFwcGVhciBmdWxseSBob29rZWQgdXAgaW50byBpc0NvbXBhdGlibGVXaXRo
IGFuZCBpc0VxdWl2YWxlbnQgdG8gZXZlcnl3aGVyZS4gQXQgdGhlIG1vbWVudCwgYmFpbCBvdXQg
aWYgd2Ugc2VlIGNhcHR1cmUuCi0JCQkqLyAgIAotCQkJaWYgKHBnbWIudHlwZUFyZ3VtZW50c1tp
XS5pc0NhcHR1cmUoKSkKLQkJCQlyZXR1cm4gdGhpcy5iaW5kaW5nLnJldHVyblR5cGU7Ci0JCQlp
ZiAocGdtYi50eXBlQXJndW1lbnRzW2ldLmlzUmF3VHlwZSgpKQotCQkJCXNhd1Jhd1R5cGUgPSB0
cnVlOwotCQl9Ci0JCWlmICghc2F3UmF3VHlwZSkKLQkJCXJldHVybiB0aGlzLmJpbmRpbmcucmV0
dXJuVHlwZTsKLQkJbGVuZ3RoID0gdGhpcy5hcmd1bWVudHMgPT0gbnVsbCA/IDAgOiB0aGlzLmFy
Z3VtZW50cy5sZW5ndGg7Ci0JCWlmIChsZW5ndGggPT0gMCkKLQkJCXJldHVybiB0aGlzLmJpbmRp
bmcucmV0dXJuVHlwZTsKLQkJVHlwZUJpbmRpbmcgW10gZmluYWxBcmd1bWVudFR5cGVzID0gbmV3
IFR5cGVCaW5kaW5nW2xlbmd0aF07Ci0JCWZvciAoaW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKysp
IHsKLQkJCVR5cGVCaW5kaW5nIGZpbmFsQXJndW1lbnRUeXBlID0gdGhpcy5hcmd1bWVudHNbaV0u
cmVzb2x2ZWRUeXBlOwotCQkJaWYgKGZpbmFsQXJndW1lbnRUeXBlID09IG51bGwgfHwgIWZpbmFs
QXJndW1lbnRUeXBlLmlzVmFsaWRCaW5kaW5nKCkpICAvLyBhbHJlYWR5IHNpZGVkIHdpdGggdGhl
IGRldmlsLgotCQkJCXJldHVybiB0aGlzLmJpbmRpbmcucmV0dXJuVHlwZTsKLQkJCWZpbmFsQXJn
dW1lbnRUeXBlc1tpXSA9IGZpbmFsQXJndW1lbnRUeXBlOyAKLQkJfQotCQlpZiAoc2NvcGUucGFy
YW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKHRoaXMuYmluZGluZywgZmluYWxBcmd1bWVudFR5cGVz
LCBmYWxzZSkgPT0gU2NvcGUuTk9UX0NPTVBBVElCTEUpCi0JCQl0aGlzLmJpbmRpbmcgPSBuZXcg
UHJvYmxlbU1ldGhvZEJpbmRpbmcodGhpcy5iaW5kaW5nLm9yaWdpbmFsKCksIHRoaXMuYmluZGlu
Zy5zZWxlY3RvciwgZmluYWxBcmd1bWVudFR5cGVzLCBQcm9ibGVtUmVhc29ucy5Ob3RGb3VuZCk7
Ci0JfQogCXJldHVybiB0aGlzLmJpbmRpbmcucmV0dXJuVHlwZTsKIH0KIApkaWZmIC0tZ2l0IGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2ltcGwvQ29tcGlsZXJPcHRpb25zLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvaW1wbC9Db21waWxlck9w
dGlvbnMuamF2YQppbmRleCA1OTZiMDFkLi5lODU3MzRiIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvaW1w
bC9Db21waWxlck9wdGlvbnMuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvaW1wbC9Db21waWxlck9wdGlvbnMu
amF2YQpAQCAtMTQ2LDcgKzE0Niw2IEBACiAJLy8gT1BUSU9OX1N0b3JlX0Fubm90YXRpb25zOiB1
bmRvY3VtZW50ZWQgb3B0aW9uIGZvciB0ZXN0aW5nIHB1cnBvc2VzCiAJcHVibGljIHN0YXRpYyBm
aW5hbCBTdHJpbmcgT1BUSU9OX1N0b3JlX0Fubm90YXRpb25zID0gIm9yZy5lY2xpcHNlLmpkdC5j
b3JlLmNvbXBpbGVyLnN0b3JlQW5ub3RhdGlvbnMiOyAvLyROT04tTkxTLTEkCiAJcHVibGljIHN0
YXRpYyBmaW5hbCBTdHJpbmcgT1BUSU9OX0VtdWxhdGVKYXZhY0J1ZzgwMzE3NDQgPSAib3JnLmVj
bGlwc2UuamR0LmNvcmUuY29tcGlsZXIuZW11bGF0ZUphdmFjQnVnODAzMTc0NCI7IC8vJE5PTi1O
TFMtMSQKLQlwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBPUFRJT05fUG9zdFJlc29sdXRpb25S
YXdUeXBlQ29tcGF0aWJpbGl0eUNoZWNrID0gIm9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVy
LnBvc3RSZXNvbHV0aW9uUmF3VHlwZUNvbXBhdGliaWxpdHlDaGVjayI7IC8vJE5PTi1OTFMtMSQK
IAlwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBPUFRJT05fUmVwb3J0UmVkdW5kYW50U3VwZXJp
bnRlcmZhY2UgPSAgIm9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLnByb2JsZW0ucmVkdW5k
YW50U3VwZXJpbnRlcmZhY2UiOyAvLyROT04tTkxTLTEkCiAJcHVibGljIHN0YXRpYyBmaW5hbCBT
dHJpbmcgT1BUSU9OX1JlcG9ydENvbXBhcmluZ0lkZW50aWNhbCA9ICAib3JnLmVjbGlwc2UuamR0
LmNvcmUuY29tcGlsZXIucHJvYmxlbS5jb21wYXJpbmdJZGVudGljYWwiOyAvLyROT04tTkxTLTEk
CiAJcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgT1BUSU9OX1JlcG9ydE1pc3NpbmdTeW5jaHJv
bml6ZWRPbkluaGVyaXRlZE1ldGhvZCA9ICAib3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIu
cHJvYmxlbS5taXNzaW5nU3luY2hyb25pemVkT25Jbmhlcml0ZWRNZXRob2QiOyAvLyROT04tTkxT
LTEkCkBAIC00MDksOCArNDA4LDYgQEAKIAlwdWJsaWMgYm9vbGVhbiBwcm9jZXNzQW5ub3RhdGlv
bnM7CiAJLyoqIFN0b3JlIGFubm90YXRpb25zICovCiAJcHVibGljIGJvb2xlYW4gc3RvcmVBbm5v
dGF0aW9uczsKLQkvKiogZXh0cmEgY2hlY2sgZm9yIHJhdyB0eXBlIGNvbXBhdGliaWxpdHkgcG9z
dCBvdmVybG9hZCByZXNvbHV0aW9uICovCi0JcHVibGljIGJvb2xlYW4gcG9zdFJlc29sdXRpb25S
YXdUeXBlQ29tcGF0aWJpbGl0eUNoZWNrID0gdHJ1ZTsKIAkvKiogU3BlY2lmeSBpZiBuZWVkIHRv
IHJlcG9ydCBtaXNzaW5nIG92ZXJyaWRlIGFubm90YXRpb24gZm9yIGEgbWV0aG9kIGltcGxlbWVu
dGluZyBhbiBpbnRlcmZhY2UgbWV0aG9kIChqYXZhIDEuNiBhbmQgYWJvdmUpKi8KIAlwdWJsaWMg
Ym9vbGVhbiByZXBvcnRNaXNzaW5nT3ZlcnJpZGVBbm5vdGF0aW9uRm9ySW50ZXJmYWNlTWV0aG9k
SW1wbGVtZW50YXRpb247CiAJLyoqIEluZGljYXRlIGlmIGFubm90YXRpb24gcHJvY2Vzc2luZyBn
ZW5lcmF0ZXMgY2xhc3NmaWxlcyAqLwpAQCAtMTEzNiw3ICsxMTMzLDYgQEAKIAkJb3B0aW9uc01h
cC5wdXQoT1BUSU9OX1Byb2Nlc3NfQW5ub3RhdGlvbnMsIHRoaXMucHJvY2Vzc0Fubm90YXRpb25z
ID8gRU5BQkxFRCA6IERJU0FCTEVEKTsKIAkJb3B0aW9uc01hcC5wdXQoT1BUSU9OX1N0b3JlX0Fu
bm90YXRpb25zLCB0aGlzLnN0b3JlQW5ub3RhdGlvbnMgPyBFTkFCTEVEIDogRElTQUJMRUQpOwog
CQlvcHRpb25zTWFwLnB1dChPUFRJT05fRW11bGF0ZUphdmFjQnVnODAzMTc0NCwgdGhpcy5lbXVs
YXRlSmF2YWNCdWc4MDMxNzQ0ID8gRU5BQkxFRCA6IERJU0FCTEVEKTsKLQkJb3B0aW9uc01hcC5w
dXQoT1BUSU9OX1Bvc3RSZXNvbHV0aW9uUmF3VHlwZUNvbXBhdGliaWxpdHlDaGVjaywgdGhpcy5w
b3N0UmVzb2x1dGlvblJhd1R5cGVDb21wYXRpYmlsaXR5Q2hlY2sgPyBFTkFCTEVEIDogRElTQUJM
RUQpOwogCQlvcHRpb25zTWFwLnB1dChPUFRJT05fUmVwb3J0UmVkdW5kYW50U3VwZXJpbnRlcmZh
Y2UsIGdldFNldmVyaXR5U3RyaW5nKFJlZHVuZGFudFN1cGVyaW50ZXJmYWNlKSk7CiAJCW9wdGlv
bnNNYXAucHV0KE9QVElPTl9SZXBvcnRDb21wYXJpbmdJZGVudGljYWwsIGdldFNldmVyaXR5U3Ry
aW5nKENvbXBhcmluZ0lkZW50aWNhbCkpOwogCQlvcHRpb25zTWFwLnB1dChPUFRJT05fUmVwb3J0
TWlzc2luZ1N5bmNocm9uaXplZE9uSW5oZXJpdGVkTWV0aG9kLCBnZXRTZXZlcml0eVN0cmluZyhN
aXNzaW5nU3luY2hyb25pemVkTW9kaWZpZXJJbkluaGVyaXRlZE1ldGhvZCkpOwpAQCAtMTgxMCwx
MyArMTgwNiw2IEBACiAJCQkJdGhpcy5lbXVsYXRlSmF2YWNCdWc4MDMxNzQ0ID0gdHJ1ZTsKIAkJ
CX0gZWxzZSBpZiAoRElTQUJMRUQuZXF1YWxzKG9wdGlvblZhbHVlKSkgewogCQkJCXRoaXMuZW11
bGF0ZUphdmFjQnVnODAzMTc0NCA9IGZhbHNlOwotCQkJfQotCQl9Ci0JCWlmICgob3B0aW9uVmFs
dWUgPSBvcHRpb25zTWFwLmdldChPUFRJT05fUG9zdFJlc29sdXRpb25SYXdUeXBlQ29tcGF0aWJp
bGl0eUNoZWNrKSkgIT0gbnVsbCkgewotCQkJaWYgKEVOQUJMRUQuZXF1YWxzKG9wdGlvblZhbHVl
KSkgewotCQkJCXRoaXMucG9zdFJlc29sdXRpb25SYXdUeXBlQ29tcGF0aWJpbGl0eUNoZWNrID0g
dHJ1ZTsKLQkJCX0gZWxzZSBpZiAoRElTQUJMRUQuZXF1YWxzKG9wdGlvblZhbHVlKSkgewotCQkJ
CXRoaXMucG9zdFJlc29sdXRpb25SYXdUeXBlQ29tcGF0aWJpbGl0eUNoZWNrID0gZmFsc2U7CiAJ
CQl9CiAJCX0KIAkJaWYgKChvcHRpb25WYWx1ZSA9IG9wdGlvbnNNYXAuZ2V0KE9QVElPTl9SZXBv
cnRVbmludGVybmVkSWRlbnRpdHlDb21wYXJpc29uKSkgIT0gbnVsbCkgewpkaWZmIC0tZ2l0IGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2xvb2t1cC9Db25zdHJhaW50VHlwZUZvcm11bGEuamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAv
Q29uc3RyYWludFR5cGVGb3JtdWxhLmphdmEKaW5kZXggNGU3OTk0YS4uZGVhMDY5ZiAxMDA2NDQK
LS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50VHlwZUZvcm11bGEuamF2YQorKysgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvbG9va3VwL0NvbnN0cmFpbnRUeXBlRm9ybXVsYS5qYXZhCkBAIC02Myw2ICs2Myw3IEBACiAJ
CQlpZiAodGhpcy5sZWZ0LmlzUHJvcGVyVHlwZSh0cnVlKSAmJiB0aGlzLnJpZ2h0LmlzUHJvcGVy
VHlwZSh0cnVlKSkgewogCQkJCXJldHVybiB0aGlzLmxlZnQuaXNDb21wYXRpYmxlV2l0aCh0aGlz
LnJpZ2h0LCBpbmZlcmVuY2VDb250ZXh0LnNjb3BlKSB8fCB0aGlzLmxlZnQuaXNCb3hpbmdDb21w
YXRpYmxlV2l0aCh0aGlzLnJpZ2h0LCBpbmZlcmVuY2VDb250ZXh0LnNjb3BlKSA/IFRSVUUgOiBG
QUxTRTsKIAkJCX0KKwkJCWluZmVyZW5jZUNvbnRleHQuYWRkTWFjcm9UeXBlQ29uc3RyYWludCh0
aGlzKTsKIAkJCWlmICh0aGlzLmxlZnQuaXNQcmltaXRpdmVUeXBlKCkpIHsKIAkJCQlpZiAoaW5m
ZXJlbmNlQ29udGV4dC5pbmZlcmVuY2VLaW5kID09IEluZmVyZW5jZUNvbnRleHQxOC5DSEVDS19T
VFJJQ1QpCiAJCQkJCWluZmVyZW5jZUNvbnRleHQuaW5mZXJlbmNlS2luZCA9IEluZmVyZW5jZUNv
bnRleHQxOC5DSEVDS19MT09TRTsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvSW5mZXJlbmNl
Q29udGV4dDE4LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVyZW5jZUNvbnRleHQxOC5qYXZhCmlu
ZGV4IDMwY2VlMTUuLjhkZDJkOTQgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvSW5mZXJlbmNl
Q29udGV4dDE4LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9JbmZlcmVuY2VDb250ZXh0MTguamF2
YQpAQCAtMTYwLDYgKzE2MCw4IEBACiAJUmVmZXJlbmNlQmluZGluZyBvYmplY3Q7IC8vIGphdmEu
bGFuZy5PYmplY3QKIAlwdWJsaWMgQm91bmRTZXQgYjI7CiAJCisJSGFzaFNldDxDb25zdHJhaW50
VHlwZUZvcm11bGE+IG1hY3JvVHlwZUNvbnN0cmFpbnRzID0gbmV3IEhhc2hTZXQ8Q29uc3RyYWlu
dFR5cGVGb3JtdWxhPigpOworCQogCXB1YmxpYyBzdGF0aWMgZmluYWwgaW50IENIRUNLX1VOS05P
V04gPSAwOwogCXB1YmxpYyBzdGF0aWMgZmluYWwgaW50IENIRUNLX1NUUklDVCA9IDE7CiAJcHVi
bGljIHN0YXRpYyBmaW5hbCBpbnQgQ0hFQ0tfTE9PU0UgPSAyOwpAQCAtMjg5LDYgKzI5MSwxMCBA
QAogCQlyZXR1cm4gbmV3VmFyaWFibGVzOwogCX0KIAorCXB1YmxpYyB2b2lkIGFkZE1hY3JvVHlw
ZUNvbnN0cmFpbnQoQ29uc3RyYWludFR5cGVGb3JtdWxhIGZvcm11YWxhKSB7CisJCXRoaXMubWFj
cm9UeXBlQ29uc3RyYWludHMuYWRkKGZvcm11YWxhKTsKKwl9CisJCiAJLyoqIEFkZCBuZXcgaW5m
ZXJlbmNlIHZhcmlhYmxlcyBmb3IgdGhlIGdpdmVuIHR5cGUgdmFyaWFibGVzLiAqLwogCXB1Ymxp
YyBJbmZlcmVuY2VWYXJpYWJsZVtdIGFkZFR5cGVWYXJpYWJsZVN1YnN0aXR1dGlvbnMoVHlwZUJp
bmRpbmdbXSB0eXBlVmFyaWFibGVzKSB7CiAJCWludCBsZW4yID0gdHlwZVZhcmlhYmxlcy5sZW5n
dGg7CkBAIC03OTIsNyArNzk4LDE5IEBACiAJCWlmIChpbmZlcnJpbmdBcHBsaWNhYmlsaXR5KQog
CQkJdGhpcy5iMiA9IHRoaXMuY3VycmVudEJvdW5kcy5jb3B5KCk7IC8vIFByZXNlcnZlIHRoZSBy
ZXN1bHQgYWZ0ZXIgcmVkdWN0aW9uLCB3aXRob3V0IGVmZmVjdHMgb2YgcmVzb2x2ZSgpIGZvciBs
YXRlciB1c2UgaW4gaW52b2NhdGlvbiB0eXBlIGluZmVyZW5jZS4KIAotCQlyZXR1cm4gcmVzb2x2
ZSh0aGlzLmluZmVyZW5jZVZhcmlhYmxlcyk7CisJCUJvdW5kU2V0IHNvbHV0aW9uID0gcmVzb2x2
ZSh0aGlzLmluZmVyZW5jZVZhcmlhYmxlcyk7CisJCWlmIChzb2x1dGlvbiAhPSBudWxsICYmICFp
bmZlcnJpbmdBcHBsaWNhYmlsaXR5KSB7CisJCQlmb3IgKENvbnN0cmFpbnRUeXBlRm9ybXVsYSBm
b3JtdWxhOiB0aGlzLm1hY3JvVHlwZUNvbnN0cmFpbnRzKSB7CisJCQkJZm9ybXVsYS5hcHBseVN1
YnN0aXR1dGlvbihzb2x1dGlvbiwgdGhpcy5pbmZlcmVuY2VWYXJpYWJsZXMpOworCQkJCWlmIChm
b3JtdWxhLmxlZnQuaXNQcm9wZXJUeXBlKHRydWUpICYmIGZvcm11bGEucmlnaHQuaXNQcm9wZXJU
eXBlKHRydWUpKSB7CisJCQkJCWlmICghdGhpcy5jdXJyZW50Qm91bmRzLnJlZHVjZU9uZUNvbnN0
cmFpbnQodGhpcywgZm9ybXVsYSkpIHsKKwkJCQkJCVN5c3RlbS5vdXQucHJpbnRsbigiRmFpbGVk
IHRvIHJlZHVjZSAiICsgZm9ybXVsYSk7IC8vJE5PTi1OTFMtMSQKKwkJCQkJCXJldHVybiBudWxs
OworCQkJCQl9CisJCQkJfQorCQkJfQorCQl9CisJCXJldHVybiBzb2x1dGlvbjsKIAl9CiAJCiAJ
cHVibGljIC8qQE51bGxhYmxlKi8gQm91bmRTZXQgc29sdmUoKSB0aHJvd3MgSW5mZXJlbmNlRmFp
bHVyZUV4Y2VwdGlvbiB7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1R5cGVTeXN0ZW0uamF2
YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9sb29rdXAvVHlwZVN5c3RlbS5qYXZhCmluZGV4IDkxZmIxMzcuLmY4ZjExNWIg
MTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvVHlwZVN5c3RlbS5qYXZhCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9s
b29rdXAvVHlwZVN5c3RlbS5qYXZhCkBAIC0yMDIsNiArMjAyLDExIEBACiAJICAgU2VlIEFycmF5
QmluZGluZy5zd2FwVW5yZXNvbHZlZCBmb3IgZnVydGhlciBzcGVjaWFsIGNhc2UgaGFuZGxpbmcg
aWYgaW5jb21pbmcgbGVhZlR5cGUgaXMgYSBVUkIgdGhhdCB3b3VsZCByZXNvbHZlIHRvIGEgcmF3
IHR5cGUgbGF0ZXIuCiAJKi8gCiAJcHVibGljIEFycmF5QmluZGluZyBnZXRBcnJheVR5cGUoVHlw
ZUJpbmRpbmcgbGVhZlR5cGUsIGludCBkaW1lbnNpb25zKSB7CisJCXdoaWxlIChsZWFmVHlwZSBp
bnN0YW5jZW9mIEFycmF5QmluZGluZykgeworCQkJZGltZW5zaW9ucysrOworCQkJbGVhZlR5cGUg
PSAoKEFycmF5QmluZGluZylsZWFmVHlwZSkuZWxlbWVudHNUeXBlKCk7CisJCX0KKwkJCQogCQlU
eXBlQmluZGluZyB1bmFubm90YXRlZExlYWZUeXBlID0gZ2V0VW5hbm5vdGF0ZWRUeXBlKGxlYWZU
eXBlKTsKIAkJVHlwZUJpbmRpbmdbXSBkZXJpdmVkVHlwZXMgPSB0aGlzLnR5cGVzW3VuYW5ub3Rh
dGVkTGVhZlR5cGUuaWRdOwogCQlpbnQgaSwgbGVuZ3RoID0gZGVyaXZlZFR5cGVzLmxlbmd0aDs=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>248220</attachid>
            <date>2014-10-28 01:18:00 -0400</date>
            <delta_ts>2014-10-28 01:18:46 -0400</delta_ts>
            <desc>Proposed patch</desc>
            <filename>rawcheck.patch</filename>
            <type>text/plain</type>
            <size>17996</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0JhdGNoQ29tcGlsZXJU
ZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2Vj
bGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9CYXRjaENvbXBpbGVyVGVz
dC5qYXZhCmluZGV4IDBlOWJhNzMuLjA1OTNlNTcgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21w
aWxlci9yZWdyZXNzaW9uL0JhdGNoQ29tcGlsZXJUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Nv
bXBpbGVyL3JlZ3Jlc3Npb24vQmF0Y2hDb21waWxlclRlc3QuamF2YQpAQCAtMTkwOSw3ICsxOTA5
LDYgQEAKIAkJCSIJCTxvcHRpb24ga2V5PVwib3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIu
ZW11bGF0ZUphdmFjQnVnODAzMTc0NFwiIHZhbHVlPVwiZW5hYmxlZFwiLz5cbiIgKwogCQkJIgkJ
PG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5nZW5lcmF0ZUNsYXNz
RmlsZXNcIiB2YWx1ZT1cImVuYWJsZWRcIi8+XG4iICsgCiAJCQkiCQk8b3B0aW9uIGtleT1cIm9y
Zy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLm1heFByb2JsZW1QZXJVbml0XCIgdmFsdWU9XCIx
MDBcIi8+XG4iICsgCi0JCQkiCQk8b3B0aW9uIGtleT1cIm9yZy5lY2xpcHNlLmpkdC5jb3JlLmNv
bXBpbGVyLnBvc3RSZXNvbHV0aW9uUmF3VHlwZUNvbXBhdGliaWxpdHlDaGVja1wiIHZhbHVlPVwi
ZW5hYmxlZFwiLz5cbiIgKwogCQkJIgkJPG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBzZS5qZHQuY29y
ZS5jb21waWxlci5wcm9ibGVtLmFubm90YXRpb25TdXBlckludGVyZmFjZVwiIHZhbHVlPVwid2Fy
bmluZ1wiLz5cbiIgKyAKIAkJCSIJCTxvcHRpb24ga2V5PVwib3JnLmVjbGlwc2UuamR0LmNvcmUu
Y29tcGlsZXIucHJvYmxlbS5hc3NlcnRJZGVudGlmaWVyXCIgdmFsdWU9XCJ3YXJuaW5nXCIvPlxu
IiArIAogCQkJIgkJPG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5w
cm9ibGVtLmF1dG9ib3hpbmdcIiB2YWx1ZT1cImlnbm9yZVwiLz5cbiIgKyAKZGlmZiAtLWdpdCBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQv
Y29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3QuamF2
YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3Qu
amF2YQppbmRleCAwZTEyMjVlLi44ZTNkN2Y5IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGls
ZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25UZXN0LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3Rz
L2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVzdC5qYXZhCkBAIC00NDQ0
LDMwICs0NDQ0LDYgQEAKIAkJIlRoZSBtZXRob2Qgc29ydChUW10sIEk8PyBzdXBlciBUPikgaW4g
dGhlIHR5cGUgWCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoSVtdLCBJPEk8
Pz4+KVxuIiArIAogCQkiLS0tLS0tLS0tLVxuIik7CiB9Ci0vLyBodHRwczovL2J1Z3MuZWNsaXBz
ZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDI3OTU3LCBbMS44XSBUeXBlIGluZmVyZW5jZSBp
bmNvcnJlY3Qgd2hlbiBhIHdpbGRjYXJkIGlzIG1pc3NpbmcgCi1wdWJsaWMgdm9pZCB0ZXN0QnVn
NDI3OTU3YSgpIHsgLy8gdmVyaWZ5IGVzY2FwZSBoYXRjaCB3b3Jrcy4KLQlpZiAodGhpcy5jb21w
bGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84KSAgCi0JCXJldHVybjsKLQlN
YXAgY3VzdG9tT3B0aW9ucyA9IGdldENvbXBpbGVyT3B0aW9ucygpOwotCWN1c3RvbU9wdGlvbnMu
cHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJT05fUG9zdFJlc29sdXRpb25SYXdUeXBlQ29tcGF0aWJp
bGl0eUNoZWNrLCBDb21waWxlck9wdGlvbnMuRElTQUJMRUQpOwotCXJ1bk5lZ2F0aXZlVGVzdCgK
LQkJbmV3IFN0cmluZ1tdIHsKLQkJCSJYLmphdmEiLAotCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIg
KwotCQkJIiAgICA8VD4gdm9pZCBzb3J0KFRbXSBhLCBJPD8gc3VwZXIgVD4gYykgeyB9XG4iICsK
LQkJCSIgICAgdm9pZCBmb28oSVtdIGUsIEk8STw/Pj4gY29tcCkge1xuIiArCi0JCQkiICAgICAg
ICBzb3J0KGUsIGNvbXApO1xuIiArCi0JCQkiICAgIH1cbiIgKwotCQkJIn1cbiIgKwotCQkJImlu
dGVyZmFjZSBJPFQ+IHt9XG4iCi0JCX0sCi0JCSItLS0tLS0tLS0tXG4iICsgCi0JCSIxLiBXQVJO
SU5HIGluIFguamF2YSAoYXQgbGluZSAzKVxuIiArIAotCQkiCXZvaWQgZm9vKElbXSBlLCBJPEk8
Pz4+IGNvbXApIHtcbiIgKyAKLQkJIgkgICAgICAgICBeXG4iICsgCi0JCSJJIGlzIGEgcmF3IHR5
cGUuIFJlZmVyZW5jZXMgdG8gZ2VuZXJpYyB0eXBlIEk8VD4gc2hvdWxkIGJlIHBhcmFtZXRlcml6
ZWRcbiIgKyAKLQkJIi0tLS0tLS0tLS1cbiIsIG51bGwsIHRydWUsIGN1c3RvbU9wdGlvbnMpOwot
fQogLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQyNzk5
MiwgIFsxLjhdIGNvbXBpbGVyIGRpZmZlcmVuY2UgdG8gamF2YWMgaW52b2x2aW5nIGEgcmF3IGFy
cmF5CiBwdWJsaWMgdm9pZCB0ZXN0NDI3OTkyKCkgewogCWlmICh0aGlzLmNvbXBsaWFuY2VMZXZl
bCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzYpCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29t
cGlsZXIvcmVncmVzc2lvbi9OdWxsVHlwZUFubm90YXRpb25UZXN0LmphdmEgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
Y29tcGlsZXIvcmVncmVzc2lvbi9OdWxsVHlwZUFubm90YXRpb25UZXN0LmphdmEKaW5kZXggNGQz
ZWExYy4uZmYzYWUwZiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29t
cGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24v
TnVsbFR5cGVBbm5vdGF0aW9uVGVzdC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRl
c3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdy
ZXNzaW9uL051bGxUeXBlQW5ub3RhdGlvblRlc3QuamF2YQpAQCAtNjg3MSw0ICs2ODcxLDI1IEBA
CiAJCSJOdWxsIHR5cGUgbWlzbWF0Y2g6IHJlcXVpcmVkIFwnQE5vbk51bGwgWlwnIGJ1dCB0aGUg
cHJvdmlkZWQgdmFsdWUgaXMgbnVsbFxuIiArIAogCQkiLS0tLS0tLS0tLVxuIik7CiB9CitwdWJs
aWMgdm9pZCB0ZXN0QXJyYXlPZkFycmF5cygpIHsKKwl0aGlzLnJ1bk5lZ2F0aXZlVGVzdFdpdGhM
aWJzKAorCQluZXcgU3RyaW5nW10geworCQkJIlguamF2YSIsCisJCQkiaW1wb3J0IGphdmEudXRp
bC5BcnJheUxpc3Q7XG4iICsKKwkJCSJpbXBvcnQgamF2YS51dGlsLkFycmF5cztcbiIgKworCQkJ
ImltcG9ydCBvcmcuZWNsaXBzZS5qZHQuYW5ub3RhdGlvbi4qO1xuIiArCisJCQkicHVibGljIGNs
YXNzIFgge1xuIiArCisJCQkiICAgcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJn
cykge1xuIiArCisJCQkiICAgICAgU3RyaW5nIFtdIEBOdWxsYWJsZSBbXSBATm9uTnVsbCBbXSBh
cnIgPSBuZXcgU3RyaW5nW11bXVtdIHt9O1xuIiArCisJCQkiICAgICAgQXJyYXlMaXN0PFN0cmlu
Z1tdW10+IGFsID0gbmV3IEFycmF5TGlzdDxTdHJpbmcgW11bXT4oQXJyYXlzLmFzTGlzdChhcnIp
KTtcbiIgKworCQkJIiAgIH1cbiIgKworCQkJIn1cbiIsCisJCX0sCisJCSItLS0tLS0tLS0tXG4i
ICsgCisJCSIxLiBXQVJOSU5HIGluIFguamF2YSAoYXQgbGluZSA2KVxuIiArIAorCQkiCVN0cmlu
ZyBbXSBATnVsbGFibGUgW10gQE5vbk51bGwgW10gYXJyID0gbmV3IFN0cmluZ1tdW11bXSB7fTtc
biIgKyAKKwkJIgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5e
Xl5eXl5eXl5eXl5eXl5cbiIgKyAKKwkJIk51bGwgdHlwZSBzYWZldHkgKHR5cGUgYW5ub3RhdGlv
bnMpOiBUaGUgZXhwcmVzc2lvbiBvZiB0eXBlIFwnU3RyaW5nW11bXVtdXCcgbmVlZHMgdW5jaGVj
a2VkIGNvbnZlcnNpb24gdG8gY29uZm9ybSB0byBcJ1N0cmluZyBbXSBATnVsbGFibGVbXSBATm9u
TnVsbFtdXCdcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIpOworfQogfQpkaWZmIC0tZ2l0IGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9NZXNzYWdlU2VuZC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9NZXNzYWdlU2VuZC5qYXZhCmlu
ZGV4IDcyOTUyZjguLjI2OGQ0YzMgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTWVzc2FnZVNlbmQu
amF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L01lc3NhZ2VTZW5kLmphdmEKQEAgLTg4MCw0NyArODgwLDYg
QEAKIAkKIAlyZXNvbHZlUG9seUV4cHJlc3Npb25Bcmd1bWVudHModGhpcywgdGhpcy5iaW5kaW5n
LCB0aGlzLmFyZ3VtZW50VHlwZXMsIHNjb3BlKTsKIAkKLQkvKiBUaGVyZSBhcmUgZW1iZWRkZWQg
YXNzdW1wdGlvbnMgaW4gdGhlIEpMUzggdHlwZSBpbmZlcmVuY2Ugc2NoZW1lIHRoYXQgYSBzdWNj
ZXNzZnVsIHNvbHV0aW9uIG9mIHRoZSB0eXBlIGVxdWF0aW9ucyByZXN1bHRzIGluIGFuCi0JICAg
YXBwbGljYWJsZSBtZXRob2QuIFRoaXMgYXBwZWFycyB0byBiZSBhIHRlbnVvdXMgYXNzdW1wdGlv
biwgYXQgbGVhc3Qgb25lIG5vdCBtYWRlIGJ5IHRoZSBKTFM3IGVuZ2luZSBvciB0aGUgcmVmZXJl
bmNlIGNvbXBpbGVyIGFuZCAKLQkgICB0aGVyZSBhcmUgY2FzZXMgd2hlcmUgdGhpcyBhc3N1bXB0
aW9uIHdvdWxkIGFwcGVhciBpbnZhbGlkOiBTZWUgaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1
Z3Mvc2hvd19idWcuY2dpP2lkPTQyNjUzNywgd2hlcmUgd2UgYWxsb3cgCi0JICAgY2VydGFpbiBj
b21wYXRpYmlsaXR5IGNvbnN0cmFpbnMgYXJvdW5kIHJhdyB0eXBlcyB0byBiZSB2aW9sYXRlZC4g
Ci0gICAgICAgCi0gICAgICAgSGVyZSwgd2UgZmlsdGVyIG91dCBzdWNoIGluYXBwbGljYWJsZSBt
ZXRob2RzIHdpdGggcmF3IHR5cGUgdXNhZ2UgdGhhdCBtYXkgaGF2ZSBzbmVha2VkIHBhc3Qgb3Zl
cmxvYWQgcmVzb2x1dGlvbiBhbmQgdHlwZSBpbmZlcmVuY2UsIAotICAgICAgIHBsYXlpbmcgdGhl
IGRldmlscyBhZHZvY2F0ZSwgYmxhbWluZyB0aGUgaW52b2NhdGlvbnMgd2l0aCByYXcgYXJndW1l
bnRzIHRoYXQgc2hvdWxkIG5vdCBnbyBibGFtZWxlc3MuIEF0IHRoaXMgdGltZSB0aGlzIGlzIGlu
IHRoZSAKLSAgICAgICBuYXR1cmUgb2YgYSBwb2ludCBmaXggYW5kIGlzIG5vdCBhIGdlbmVyYWwg
c29sdXRpb24gd2hpY2ggbmVlZHMgdG8gY29tZSBsYXRlciAodGhhdCBhbHNvIGluY2x1ZGVzIEFF
LCBRQUUgYW5kIEVDQykKLSAgICAqLwotCWZpbmFsIENvbXBpbGVyT3B0aW9ucyBjb21waWxlck9w
dGlvbnMgPSBzY29wZS5jb21waWxlck9wdGlvbnMoKTsKLQlpZiAoY29tcGlsZXJPcHRpb25zLnNv
dXJjZUxldmVsID49IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzggJiYgdGhpcy5iaW5kaW5nIGlu
c3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nICYmIHRoaXMuYmluZGlu
Zy5pc1ZhbGlkQmluZGluZygpKSB7Ci0JCWlmICghY29tcGlsZXJPcHRpb25zLnBvc3RSZXNvbHV0
aW9uUmF3VHlwZUNvbXBhdGliaWxpdHlDaGVjaykKLQkJCXJldHVybiB0aGlzLmJpbmRpbmcucmV0
dXJuVHlwZTsKLQkJUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIHBnbWIgPSAoUGFy
YW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB0aGlzLmJpbmRpbmc7Ci0JCWludCBsZW5n
dGggPSBwZ21iLnR5cGVBcmd1bWVudHMgPT0gbnVsbCA/IDAgOiBwZ21iLnR5cGVBcmd1bWVudHMu
bGVuZ3RoOwotCQlib29sZWFuIHNhd1Jhd1R5cGUgPSBmYWxzZTsKLQkJZm9yIChpbnQgaSA9IDA7
ICBpIDwgbGVuZ3RoOyBpKyspIHsKLQkJCS8qIE11c3QgY2hlY2sgY29tcGF0aWJpbGl0eSBhZ2Fp
bnN0IGNhcHR1cmUgZnJlZSBtZXRob2QuIEZvcm1hbCBwYXJhbWV0ZXJzIGNhbm5vdCBoYXZlIGNh
cHR1cmVzLCBidXQgb3VyIG1hY2hpbmVyeSBpcyBub3QgdXAgdG8gc251ZmYgdG8KLQkJCSAgIGNv
bnN0cnVjdCBhIFBHTUIgd2l0aG91dCBjYXB0dXJlcyBhdCB0aGUgbW9tZW50IC0gZm9yIG9uZSB0
aGluZyBJVENCIGRvZXMgbm90IHN1cHBvcnQgdW5jYXB0dXJlKCkgeWV0LCBmb3IgYW5vdGhlciwg
SU5URVJTRUNUSU9OX0NBU1RfVFlQRQotCQkJICAgZG9lcyBub3QgYXBwZWFyIGZ1bGx5IGhvb2tl
ZCB1cCBpbnRvIGlzQ29tcGF0aWJsZVdpdGggYW5kIGlzRXF1aXZhbGVudCB0byBldmVyeXdoZXJl
LiBBdCB0aGUgbW9tZW50LCBiYWlsIG91dCBpZiB3ZSBzZWUgY2FwdHVyZS4KLQkJCSovICAgCi0J
CQlpZiAocGdtYi50eXBlQXJndW1lbnRzW2ldLmlzQ2FwdHVyZSgpKQotCQkJCXJldHVybiB0aGlz
LmJpbmRpbmcucmV0dXJuVHlwZTsKLQkJCWlmIChwZ21iLnR5cGVBcmd1bWVudHNbaV0uaXNSYXdU
eXBlKCkpCi0JCQkJc2F3UmF3VHlwZSA9IHRydWU7Ci0JCX0KLQkJaWYgKCFzYXdSYXdUeXBlKQot
CQkJcmV0dXJuIHRoaXMuYmluZGluZy5yZXR1cm5UeXBlOwotCQlsZW5ndGggPSB0aGlzLmFyZ3Vt
ZW50cyA9PSBudWxsID8gMCA6IHRoaXMuYXJndW1lbnRzLmxlbmd0aDsKLQkJaWYgKGxlbmd0aCA9
PSAwKQotCQkJcmV0dXJuIHRoaXMuYmluZGluZy5yZXR1cm5UeXBlOwotCQlUeXBlQmluZGluZyBb
XSBmaW5hbEFyZ3VtZW50VHlwZXMgPSBuZXcgVHlwZUJpbmRpbmdbbGVuZ3RoXTsKLQkJZm9yIChp
bnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewotCQkJVHlwZUJpbmRpbmcgZmluYWxBcmd1bWVu
dFR5cGUgPSB0aGlzLmFyZ3VtZW50c1tpXS5yZXNvbHZlZFR5cGU7Ci0JCQlpZiAoZmluYWxBcmd1
bWVudFR5cGUgPT0gbnVsbCB8fCAhZmluYWxBcmd1bWVudFR5cGUuaXNWYWxpZEJpbmRpbmcoKSkg
IC8vIGFscmVhZHkgc2lkZWQgd2l0aCB0aGUgZGV2aWwuCi0JCQkJcmV0dXJuIHRoaXMuYmluZGlu
Zy5yZXR1cm5UeXBlOwotCQkJZmluYWxBcmd1bWVudFR5cGVzW2ldID0gZmluYWxBcmd1bWVudFR5
cGU7IAotCQl9Ci0JCWlmIChzY29wZS5wYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwodGhpcy5i
aW5kaW5nLCBmaW5hbEFyZ3VtZW50VHlwZXMsIGZhbHNlKSA9PSBTY29wZS5OT1RfQ09NUEFUSUJM
RSkKLQkJCXRoaXMuYmluZGluZyA9IG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZyh0aGlzLmJpbmRp
bmcub3JpZ2luYWwoKSwgdGhpcy5iaW5kaW5nLnNlbGVjdG9yLCBmaW5hbEFyZ3VtZW50VHlwZXMs
IFByb2JsZW1SZWFzb25zLk5vdEZvdW5kKTsKLQl9CiAJcmV0dXJuIHRoaXMuYmluZGluZy5yZXR1
cm5UeXBlOwogfQogCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvaW1wbC9Db21waWxlck9wdGlvbnMuamF2
YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9pbXBsL0NvbXBpbGVyT3B0aW9ucy5qYXZhCmluZGV4IDU5NmIwMWQuLmU4NTcz
NGIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9pbXBsL0NvbXBpbGVyT3B0aW9ucy5qYXZhCisrKyBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9pbXBsL0NvbXBpbGVyT3B0aW9ucy5qYXZhCkBAIC0xNDYsNyArMTQ2LDYgQEAKIAkvLyBP
UFRJT05fU3RvcmVfQW5ub3RhdGlvbnM6IHVuZG9jdW1lbnRlZCBvcHRpb24gZm9yIHRlc3Rpbmcg
cHVycG9zZXMKIAlwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBPUFRJT05fU3RvcmVfQW5ub3Rh
dGlvbnMgPSAib3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuc3RvcmVBbm5vdGF0aW9ucyI7
IC8vJE5PTi1OTFMtMSQKIAlwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBPUFRJT05fRW11bGF0
ZUphdmFjQnVnODAzMTc0NCA9ICJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5lbXVsYXRl
SmF2YWNCdWc4MDMxNzQ0IjsgLy8kTk9OLU5MUy0xJAotCXB1YmxpYyBzdGF0aWMgZmluYWwgU3Ry
aW5nIE9QVElPTl9Qb3N0UmVzb2x1dGlvblJhd1R5cGVDb21wYXRpYmlsaXR5Q2hlY2sgPSAib3Jn
LmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIucG9zdFJlc29sdXRpb25SYXdUeXBlQ29tcGF0aWJp
bGl0eUNoZWNrIjsgLy8kTk9OLU5MUy0xJAogCXB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIE9Q
VElPTl9SZXBvcnRSZWR1bmRhbnRTdXBlcmludGVyZmFjZSA9ICAib3JnLmVjbGlwc2UuamR0LmNv
cmUuY29tcGlsZXIucHJvYmxlbS5yZWR1bmRhbnRTdXBlcmludGVyZmFjZSI7IC8vJE5PTi1OTFMt
MSQKIAlwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBPUFRJT05fUmVwb3J0Q29tcGFyaW5nSWRl
bnRpY2FsID0gICJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5wcm9ibGVtLmNvbXBhcmlu
Z0lkZW50aWNhbCI7IC8vJE5PTi1OTFMtMSQKIAlwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBP
UFRJT05fUmVwb3J0TWlzc2luZ1N5bmNocm9uaXplZE9uSW5oZXJpdGVkTWV0aG9kID0gICJvcmcu
ZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5wcm9ibGVtLm1pc3NpbmdTeW5jaHJvbml6ZWRPbklu
aGVyaXRlZE1ldGhvZCI7IC8vJE5PTi1OTFMtMSQKQEAgLTQwOSw4ICs0MDgsNiBAQAogCXB1Ymxp
YyBib29sZWFuIHByb2Nlc3NBbm5vdGF0aW9uczsKIAkvKiogU3RvcmUgYW5ub3RhdGlvbnMgKi8K
IAlwdWJsaWMgYm9vbGVhbiBzdG9yZUFubm90YXRpb25zOwotCS8qKiBleHRyYSBjaGVjayBmb3Ig
cmF3IHR5cGUgY29tcGF0aWJpbGl0eSBwb3N0IG92ZXJsb2FkIHJlc29sdXRpb24gKi8KLQlwdWJs
aWMgYm9vbGVhbiBwb3N0UmVzb2x1dGlvblJhd1R5cGVDb21wYXRpYmlsaXR5Q2hlY2sgPSB0cnVl
OwogCS8qKiBTcGVjaWZ5IGlmIG5lZWQgdG8gcmVwb3J0IG1pc3Npbmcgb3ZlcnJpZGUgYW5ub3Rh
dGlvbiBmb3IgYSBtZXRob2QgaW1wbGVtZW50aW5nIGFuIGludGVyZmFjZSBtZXRob2QgKGphdmEg
MS42IGFuZCBhYm92ZSkqLwogCXB1YmxpYyBib29sZWFuIHJlcG9ydE1pc3NpbmdPdmVycmlkZUFu
bm90YXRpb25Gb3JJbnRlcmZhY2VNZXRob2RJbXBsZW1lbnRhdGlvbjsKIAkvKiogSW5kaWNhdGUg
aWYgYW5ub3RhdGlvbiBwcm9jZXNzaW5nIGdlbmVyYXRlcyBjbGFzc2ZpbGVzICovCkBAIC0xMTM2
LDcgKzExMzMsNiBAQAogCQlvcHRpb25zTWFwLnB1dChPUFRJT05fUHJvY2Vzc19Bbm5vdGF0aW9u
cywgdGhpcy5wcm9jZXNzQW5ub3RhdGlvbnMgPyBFTkFCTEVEIDogRElTQUJMRUQpOwogCQlvcHRp
b25zTWFwLnB1dChPUFRJT05fU3RvcmVfQW5ub3RhdGlvbnMsIHRoaXMuc3RvcmVBbm5vdGF0aW9u
cyA/IEVOQUJMRUQgOiBESVNBQkxFRCk7CiAJCW9wdGlvbnNNYXAucHV0KE9QVElPTl9FbXVsYXRl
SmF2YWNCdWc4MDMxNzQ0LCB0aGlzLmVtdWxhdGVKYXZhY0J1ZzgwMzE3NDQgPyBFTkFCTEVEIDog
RElTQUJMRUQpOwotCQlvcHRpb25zTWFwLnB1dChPUFRJT05fUG9zdFJlc29sdXRpb25SYXdUeXBl
Q29tcGF0aWJpbGl0eUNoZWNrLCB0aGlzLnBvc3RSZXNvbHV0aW9uUmF3VHlwZUNvbXBhdGliaWxp
dHlDaGVjayA/IEVOQUJMRUQgOiBESVNBQkxFRCk7CiAJCW9wdGlvbnNNYXAucHV0KE9QVElPTl9S
ZXBvcnRSZWR1bmRhbnRTdXBlcmludGVyZmFjZSwgZ2V0U2V2ZXJpdHlTdHJpbmcoUmVkdW5kYW50
U3VwZXJpbnRlcmZhY2UpKTsKIAkJb3B0aW9uc01hcC5wdXQoT1BUSU9OX1JlcG9ydENvbXBhcmlu
Z0lkZW50aWNhbCwgZ2V0U2V2ZXJpdHlTdHJpbmcoQ29tcGFyaW5nSWRlbnRpY2FsKSk7CiAJCW9w
dGlvbnNNYXAucHV0KE9QVElPTl9SZXBvcnRNaXNzaW5nU3luY2hyb25pemVkT25Jbmhlcml0ZWRN
ZXRob2QsIGdldFNldmVyaXR5U3RyaW5nKE1pc3NpbmdTeW5jaHJvbml6ZWRNb2RpZmllckluSW5o
ZXJpdGVkTWV0aG9kKSk7CkBAIC0xODEwLDEzICsxODA2LDYgQEAKIAkJCQl0aGlzLmVtdWxhdGVK
YXZhY0J1ZzgwMzE3NDQgPSB0cnVlOwogCQkJfSBlbHNlIGlmIChESVNBQkxFRC5lcXVhbHMob3B0
aW9uVmFsdWUpKSB7CiAJCQkJdGhpcy5lbXVsYXRlSmF2YWNCdWc4MDMxNzQ0ID0gZmFsc2U7Ci0J
CQl9Ci0JCX0KLQkJaWYgKChvcHRpb25WYWx1ZSA9IG9wdGlvbnNNYXAuZ2V0KE9QVElPTl9Qb3N0
UmVzb2x1dGlvblJhd1R5cGVDb21wYXRpYmlsaXR5Q2hlY2spKSAhPSBudWxsKSB7Ci0JCQlpZiAo
RU5BQkxFRC5lcXVhbHMob3B0aW9uVmFsdWUpKSB7Ci0JCQkJdGhpcy5wb3N0UmVzb2x1dGlvblJh
d1R5cGVDb21wYXRpYmlsaXR5Q2hlY2sgPSB0cnVlOwotCQkJfSBlbHNlIGlmIChESVNBQkxFRC5l
cXVhbHMob3B0aW9uVmFsdWUpKSB7Ci0JCQkJdGhpcy5wb3N0UmVzb2x1dGlvblJhd1R5cGVDb21w
YXRpYmlsaXR5Q2hlY2sgPSBmYWxzZTsKIAkJCX0KIAkJfQogCQlpZiAoKG9wdGlvblZhbHVlID0g
b3B0aW9uc01hcC5nZXQoT1BUSU9OX1JlcG9ydFVuaW50ZXJuZWRJZGVudGl0eUNvbXBhcmlzb24p
KSAhPSBudWxsKSB7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0Fubm90YXRhYmxlVHlwZVN5
c3RlbS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Bbm5vdGF0YWJsZVR5cGVTeXN0ZW0uamF2YQppbmRl
eCBkNTg4YzUxLi5mYzBiYzc0IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0Fubm90YXRhYmxl
VHlwZVN5c3RlbS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQW5ub3RhdGFibGVUeXBlU3lzdGVt
LmphdmEKQEAgLTY1LDcgKzY1LDE1IEBACiAJICAgdHlwZSBsYXRlci4KIAkqLwogCXB1YmxpYyBB
cnJheUJpbmRpbmcgZ2V0QXJyYXlUeXBlKFR5cGVCaW5kaW5nIGxlYWZUeXBlLCBpbnQgZGltZW5z
aW9ucywgQW5ub3RhdGlvbkJpbmRpbmcgW10gYW5ub3RhdGlvbnMpIHsKLQkJCisJCWlmIChsZWFm
VHlwZSBpbnN0YW5jZW9mIEFycmF5QmluZGluZykgeyAvLyBzdWJzdGl0dXRpb24gYXR0ZW1wdHMg
Y2FuIGNhdXNlIHRoaXMsIGRvbid0IGNyZWF0ZSBhcnJheSBvZiBhcnJheXMuCisJCQlkaW1lbnNp
b25zICs9IGxlYWZUeXBlLmRpbWVuc2lvbnMoKTsKKwkJCUFubm90YXRpb25CaW5kaW5nW10gbGVh
ZkFubm90YXRpb25zID0gbGVhZlR5cGUuZ2V0VHlwZUFubm90YXRpb25zKCk7CisJCQlsZWFmVHlw
ZSA9IGxlYWZUeXBlLmxlYWZDb21wb25lbnRUeXBlKCk7CisJCQlBbm5vdGF0aW9uQmluZGluZyBb
XSBhbGxBbm5vdGF0aW9ucyA9IG5ldyBBbm5vdGF0aW9uQmluZGluZ1tsZWFmQW5ub3RhdGlvbnMu
bGVuZ3RoICsgYW5ub3RhdGlvbnMubGVuZ3RoICsgMV07CisJCQlTeXN0ZW0uYXJyYXljb3B5KGFu
bm90YXRpb25zLCAwLCBhbGxBbm5vdGF0aW9ucywgMCwgYW5ub3RhdGlvbnMubGVuZ3RoKTsKKwkJ
CVN5c3RlbS5hcnJheWNvcHkobGVhZkFubm90YXRpb25zLCAwLCBhbGxBbm5vdGF0aW9ucywgYW5u
b3RhdGlvbnMubGVuZ3RoICsgMSAvKiBsZWF2ZSBhIG51bGwgKi8sIGxlYWZBbm5vdGF0aW9ucy5s
ZW5ndGgpOworCQkJYW5ub3RhdGlvbnMgPSBhbGxBbm5vdGF0aW9uczsKKwkJfQogCQlBcnJheUJp
bmRpbmcgbmFrZWRUeXBlID0gbnVsbDsKIAkJVHlwZUJpbmRpbmdbXSBkZXJpdmVkVHlwZXMgPSBn
ZXREZXJpdmVkVHlwZXMobGVhZlR5cGUpOwogCQlmb3IgKGludCBpID0gMCwgbGVuZ3RoID0gZGVy
aXZlZFR5cGVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7CmRpZmYgLS1naXQgYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
bG9va3VwL0NvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9D
b25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEuamF2YQppbmRleCAwNWViNzc3Li44YjdjNTdhIDEw
MDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYS5qYXZh
CisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9sb29rdXAvQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhLmphdmEKQEAg
LTU5LDcgKzU5LDkgQEAKIAkJCVR5cGVCaW5kaW5nIGV4cHJUeXBlID0gdGhpcy5sZWZ0LnJlc29s
dmVkVHlwZTsKIAkJCWlmIChleHByVHlwZSA9PSBudWxsIHx8ICFleHByVHlwZS5pc1ZhbGlkQmlu
ZGluZygpKQogCQkJCXJldHVybiBGQUxTRTsKLQkJCXJldHVybiBDb25zdHJhaW50VHlwZUZvcm11
bGEuY3JlYXRlKGV4cHJUeXBlLCB0aGlzLnJpZ2h0LCBDT01QQVRJQkxFLCB0aGlzLmlzU29mdCk7
CisJCQlDb25zdHJhaW50VHlwZUZvcm11bGEgbmV3Q29uc3RyYWludCA9IENvbnN0cmFpbnRUeXBl
Rm9ybXVsYS5jcmVhdGUoZXhwclR5cGUsIHRoaXMucmlnaHQsIENPTVBBVElCTEUsIHRoaXMuaXNT
b2Z0KTsKKwkJCWluZmVyZW5jZUNvbnRleHQuYWRkTWFjcm9UeXBlQ29uc3RyYWludChuZXdDb25z
dHJhaW50KTsKKwkJCXJldHVybiBuZXdDb25zdHJhaW50OwogCQl9IGVsc2UgewogCQkJLy8gc2hh
cGVzIG9mIHBvbHkgZXhwcmVzc2lvbnMgKDE4LjIuMSkKIAkJCS8vIC0gcGFyZW50aGVzaXplZCBl
eHByZXNzaW9uIDogdGhlc2UgYXJlIHRyYW5zcGFyZW50IGluIG91ciBBU1QKQEAgLTM0NCw2ICsz
NDYsNyBAQAogCQkJCS8vIHNwZWMgc2F5cyBlcmFzdXJlLCBidXQgd2UgZG9uJ3QgcmVhbGx5IGhh
dmUgY29tcGF0aWJpbGl0eSBydWxlcyBmb3IgZXJhc3VyZSwgdXNlIHJhdyB0eXBlIGluc3RlYWQ6
CiAJCQkJVHlwZUJpbmRpbmcgZXJhc3VyZSA9IGluZmVyZW5jZUNvbnRleHQuZW52aXJvbm1lbnQu
Y29udmVydFRvUmF3VHlwZShyZXR1cm5UeXBlLCBmYWxzZSk7CiAJCQkJQ29uc3RyYWludFR5cGVG
b3JtdWxhIG5ld0NvbnN0cmFpbnQgPSBDb25zdHJhaW50VHlwZUZvcm11bGEuY3JlYXRlKGVyYXN1
cmUsIHRhcmdldFR5cGUsIENPTVBBVElCTEUpOworCQkJCWluZmVyZW5jZUNvbnRleHQuYWRkTWFj
cm9UeXBlQ29uc3RyYWludChuZXdDb25zdHJhaW50KTsKIAkJCQlpZiAoIWluZmVyZW5jZUNvbnRl
eHQucmVkdWNlQW5kSW5jb3Jwb3JhdGUobmV3Q29uc3RyYWludCkpCiAJCQkJCXJldHVybiBmYWxz
ZTsKIAkJCQkvLyBjb250aW51aW5nIGF0IHRydWUgaXMgbm90IHNwZWMnZCBidXQgbmVlZGVkIGZv
ciBqYXZhYy1jb21wYXRpYmlsaXR5LApAQCAtMzczLDYgKzM3Niw3IEBACiAJCQkJCX0KIAkJCQl9
CiAJCQkJQ29uc3RyYWludFR5cGVGb3JtdWxhIG5ld0NvbnN0cmFpbnQgPSBDb25zdHJhaW50VHlw
ZUZvcm11bGEuY3JlYXRlKGdiZXRhLCB0YXJnZXRUeXBlLCBDT01QQVRJQkxFKTsKKwkJCQlpbmZl
cmVuY2VDb250ZXh0LmFkZE1hY3JvVHlwZUNvbnN0cmFpbnQobmV3Q29uc3RyYWludCk7CiAJCQkJ
cmV0dXJuIGluZmVyZW5jZUNvbnRleHQucmVkdWNlQW5kSW5jb3Jwb3JhdGUobmV3Q29uc3RyYWlu
dCk7CiAJCQl9CiAJCQlpZiAoclRoZXRhLmxlYWZDb21wb25lbnRUeXBlKCkgaW5zdGFuY2VvZiBJ
bmZlcmVuY2VWYXJpYWJsZSkgeyAvLyBodHRwczovL2J1Z3Mub3Blbmpkay5qYXZhLm5ldC9icm93
c2UvSkRLLTgwNjIwODIKQEAgLTM5NywxMCArNDAxLDEyIEBACiAJCQkJCQl1ID0gaW5mZXJlbmNl
Q29udGV4dC5lbnZpcm9ubWVudC5jcmVhdGVBcnJheVR5cGUodSwgclRoZXRhLmRpbWVuc2lvbnMo
KSk7CiAJCQkJCX0KIAkJCQkJQ29uc3RyYWludFR5cGVGb3JtdWxhIG5ld0NvbnN0cmFpbnQgPSBD
b25zdHJhaW50VHlwZUZvcm11bGEuY3JlYXRlKHUsIHRhcmdldFR5cGUsIENPTVBBVElCTEUpOwor
CQkJCQlpbmZlcmVuY2VDb250ZXh0LmFkZE1hY3JvVHlwZUNvbnN0cmFpbnQobmV3Q29uc3RyYWlu
dCk7CiAJCQkJCXJldHVybiBpbmZlcmVuY2VDb250ZXh0LnJlZHVjZUFuZEluY29ycG9yYXRlKG5l
d0NvbnN0cmFpbnQpOwogCQkJCX0KIAkJCX0KIAkJCUNvbnN0cmFpbnRUeXBlRm9ybXVsYSBuZXdD
b25zdHJhaW50ID0gQ29uc3RyYWludFR5cGVGb3JtdWxhLmNyZWF0ZShyVGhldGEsIHRhcmdldFR5
cGUsIENPTVBBVElCTEUpOworCQkJaW5mZXJlbmNlQ29udGV4dC5hZGRNYWNyb1R5cGVDb25zdHJh
aW50KG5ld0NvbnN0cmFpbnQpOwogCQkJaWYgKCFpbmZlcmVuY2VDb250ZXh0LnJlZHVjZUFuZElu
Y29ycG9yYXRlKG5ld0NvbnN0cmFpbnQpKQogCQkJCXJldHVybiBmYWxzZTsKIAkJfQpkaWZmIC0t
Z2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9JbmZlcmVuY2VDb250ZXh0MTguamF2YSBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29r
dXAvSW5mZXJlbmNlQ29udGV4dDE4LmphdmEKaW5kZXggMzBjZWUxNS4uZDkzZDJjYiAxMDA2NDQK
LS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9JbmZlcmVuY2VDb250ZXh0MTguamF2YQorKysgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
bG9va3VwL0luZmVyZW5jZUNvbnRleHQxOC5qYXZhCkBAIC0xNjAsNiArMTYwLDggQEAKIAlSZWZl
cmVuY2VCaW5kaW5nIG9iamVjdDsgLy8gamF2YS5sYW5nLk9iamVjdAogCXB1YmxpYyBCb3VuZFNl
dCBiMjsKIAkKKwlIYXNoU2V0PENvbnN0cmFpbnRUeXBlRm9ybXVsYT4gbWFjcm9UeXBlQ29uc3Ry
YWludHMgPSBuZXcgSGFzaFNldDxDb25zdHJhaW50VHlwZUZvcm11bGE+KCk7CisJCiAJcHVibGlj
IHN0YXRpYyBmaW5hbCBpbnQgQ0hFQ0tfVU5LTk9XTiA9IDA7CiAJcHVibGljIHN0YXRpYyBmaW5h
bCBpbnQgQ0hFQ0tfU1RSSUNUID0gMTsKIAlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBDSEVDS19M
T09TRSA9IDI7CkBAIC0yODksNiArMjkxLDEwIEBACiAJCXJldHVybiBuZXdWYXJpYWJsZXM7CiAJ
fQogCisJcHVibGljIHZvaWQgYWRkTWFjcm9UeXBlQ29uc3RyYWludChDb25zdHJhaW50VHlwZUZv
cm11bGEgZm9ybXVhbGEpIHsKKwkJdGhpcy5tYWNyb1R5cGVDb25zdHJhaW50cy5hZGQoZm9ybXVh
bGEpOworCX0KKwkKIAkvKiogQWRkIG5ldyBpbmZlcmVuY2UgdmFyaWFibGVzIGZvciB0aGUgZ2l2
ZW4gdHlwZSB2YXJpYWJsZXMuICovCiAJcHVibGljIEluZmVyZW5jZVZhcmlhYmxlW10gYWRkVHlw
ZVZhcmlhYmxlU3Vic3RpdHV0aW9ucyhUeXBlQmluZGluZ1tdIHR5cGVWYXJpYWJsZXMpIHsKIAkJ
aW50IGxlbjIgPSB0eXBlVmFyaWFibGVzLmxlbmd0aDsKQEAgLTc5Miw3ICs3OTgsMTYgQEAKIAkJ
aWYgKGluZmVycmluZ0FwcGxpY2FiaWxpdHkpCiAJCQl0aGlzLmIyID0gdGhpcy5jdXJyZW50Qm91
bmRzLmNvcHkoKTsgLy8gUHJlc2VydmUgdGhlIHJlc3VsdCBhZnRlciByZWR1Y3Rpb24sIHdpdGhv
dXQgZWZmZWN0cyBvZiByZXNvbHZlKCkgZm9yIGxhdGVyIHVzZSBpbiBpbnZvY2F0aW9uIHR5cGUg
aW5mZXJlbmNlLgogCi0JCXJldHVybiByZXNvbHZlKHRoaXMuaW5mZXJlbmNlVmFyaWFibGVzKTsK
KwkJQm91bmRTZXQgc29sdXRpb24gPSByZXNvbHZlKHRoaXMuaW5mZXJlbmNlVmFyaWFibGVzKTsK
KwkJaWYgKHNvbHV0aW9uICE9IG51bGwgJiYgaW5mZXJyaW5nQXBwbGljYWJpbGl0eSkgeworCQkJ
Zm9yIChDb25zdHJhaW50VHlwZUZvcm11bGEgZm9ybXVsYTogdGhpcy5tYWNyb1R5cGVDb25zdHJh
aW50cykgeworCQkJCWZvcm11bGEuYXBwbHlTdWJzdGl0dXRpb24oc29sdXRpb24sIHRoaXMuaW5m
ZXJlbmNlVmFyaWFibGVzKTsKKwkJCQlpZiAoIXRoaXMuY3VycmVudEJvdW5kcy5yZWR1Y2VPbmVD
b25zdHJhaW50KHRoaXMsIGZvcm11bGEpKSB7CisJCQkJCXJldHVybiBudWxsOworCQkJCX0KKwkJ
CX0KKwkJfQorCQlyZXR1cm4gc29sdXRpb247CiAJfQogCQogCXB1YmxpYyAvKkBOdWxsYWJsZSov
IEJvdW5kU2V0IHNvbHZlKCkgdGhyb3dzIEluZmVyZW5jZUZhaWx1cmVFeGNlcHRpb24gewpkaWZm
IC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2xvb2t1cC9UeXBlU3lzdGVtLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1R5
cGVTeXN0ZW0uamF2YQppbmRleCA5MWZiMTM3Li5lOWJkODlkIDEwMDY0NAotLS0gYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
bG9va3VwL1R5cGVTeXN0ZW0uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1R5cGVTeXN0ZW0uamF2
YQpAQCAtMjAyLDYgKzIwMiwxMCBAQAogCSAgIFNlZSBBcnJheUJpbmRpbmcuc3dhcFVucmVzb2x2
ZWQgZm9yIGZ1cnRoZXIgc3BlY2lhbCBjYXNlIGhhbmRsaW5nIGlmIGluY29taW5nIGxlYWZUeXBl
IGlzIGEgVVJCIHRoYXQgd291bGQgcmVzb2x2ZSB0byBhIHJhdyB0eXBlIGxhdGVyLgogCSovIAog
CXB1YmxpYyBBcnJheUJpbmRpbmcgZ2V0QXJyYXlUeXBlKFR5cGVCaW5kaW5nIGxlYWZUeXBlLCBp
bnQgZGltZW5zaW9ucykgeworCQlpZiAgKGxlYWZUeXBlIGluc3RhbmNlb2YgQXJyYXlCaW5kaW5n
KSB7CisJCQlkaW1lbnNpb25zICs9IGxlYWZUeXBlLmRpbWVuc2lvbnMoKTsKKwkJCWxlYWZUeXBl
ID0gbGVhZlR5cGUubGVhZkNvbXBvbmVudFR5cGUoKTsKKwkJfQogCQlUeXBlQmluZGluZyB1bmFu
bm90YXRlZExlYWZUeXBlID0gZ2V0VW5hbm5vdGF0ZWRUeXBlKGxlYWZUeXBlKTsKIAkJVHlwZUJp
bmRpbmdbXSBkZXJpdmVkVHlwZXMgPSB0aGlzLnR5cGVzW3VuYW5ub3RhdGVkTGVhZlR5cGUuaWRd
OwogCQlpbnQgaSwgbGVuZ3RoID0gZGVyaXZlZFR5cGVzLmxlbmd0aDs=
</data>

          </attachment>
      

    </bug>

</bugzilla>