<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>426616</bug_id>
          
          <creation_ts>2014-01-24 14:35:00 -0500</creation_ts>
          <short_desc>[1.8][compiler] Type Annotations, multiple problems</short_desc>
          <delta_ts>2014-02-21 07:29:45 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Andr  Pankraz">andre</reporter>
          <assigned_to name="Andrew Clement">aclement</assigned_to>
          <cc>manpalat</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2354402</commentid>
    <comment_count>0</comment_count>
    <who name="Andr  Pankraz">andre</who>
    <bug_when>2014-01-24 14:35:17 -0500</bug_when>
    <thetext>I know, you are not finished, but just some feedback for type annotations:

If you compile the following with the Eclipse Compiler:
(Size is an easy Type Annotation with 1 argument for wasier debugging)

List&lt;@Size(max = 41) CharSequence&gt;[] @Size(max = 42) [] @Nonnull @Size(max = 43) [][] test = new @Size(max = 44) ArrayList @Size(max = 45) [10][][] @Size(max = 47) @Size(max = 48) [];

Then we find multiple (none-cosmetic) differences in the compiled byte in comparision to JDK 8 (most recent build), some of them not spec conform I think.

1.) No attribute &quot;Local variable type table&quot; with the generic type info for the variable is rendered, I know generic array declarations are somewhat so-so from spec view. JDK 8 generates this happily...
(But you generate the type annotation info for the CharSequence type param.)

2.) Size(44) till Size(4) appear 2 times in the Bytecode, one is correct int he array structure, but you generate it again for the local variable. So they appear at the wrong place, whats against the spec (not repeatable type annotations can appear multiple times)

3.) The new operation has offset 2, if new is the second operation. I think thats like described (fuzzily) in the spec. The JDK 8 has the previos operation pc as offset! So you are different. I think the JDK is wrong here, you might have shorter/stronger communication lines to the JDK team?!

4) Little bit different topic, but same stuff for me: Java Bytecode Viewer doesn&apos;t show class level type annotation attributes...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354406</commentid>
    <comment_count>1</comment_count>
    <who name="Andr  Pankraz">andre</who>
    <bug_when>2014-01-24 14:40:18 -0500</bug_when>
    <thetext>BTW: whole test method:

	public static String testArrays() {
		List&lt;@Size(max = 41) CharSequence&gt;[] @Size(max = 42) [] @Nonnull @Size(max = 43) [][] test = new @Size(max = 44) ArrayList @Size(max = 45) [10][][] @Size(max = 47) @Size(max = 48) [];
		return (@Size(max = 49) String) test[0][1][2][3].get(0);
	}

Decompiled from this:

	public static String testArrays() {
		@Size(max = 44)
		@Size(max = 45)
		@Size(max = 47)
		@Size(max = 48)
		java.util.List[] @Size(max = 42) [] @Nonnull @Size(max = 43) [][] test = new @Size(max = 44) java. util. ArrayList @Size(max = 45) [10][][] @Size(max = 47) @Size(max = 48) [];
		return (@Size(max = 49) String) test[0][1][2][3].get(0);
	}

The initial Sizes are wrong and the generic info is lost for Eclipse compiler (not for Oracle Compiler)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354484</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-24 18:41:01 -0500</bug_when>
    <thetext>(In reply to Andr  Pankraz from comment #0)
&gt; I know, you are not finished, but just some feedback for type annotations:

Actually, for 308 &amp; 269, 118 and 120, the compiler work is finished, so
defect reports are welcome. (actually also for 335)

&gt; 3.) The new operation has offset 2, if new is the second operation. I think
&gt; thats like described (fuzzily) in the spec. The JDK 8 has the previos
&gt; operation pc as offset! So you are different. I think the JDK is wrong here,
&gt; you might have shorter/stronger communication lines to the JDK team?!

Directly reporting this to Oracle bug tracking system is the most effective way. 

&gt; 4) Little bit different topic, but same stuff for me: Java Bytecode Viewer
&gt; doesn&apos;t show class level type annotation attributes...

Are you referring to javap ? If so, that being an Oracle tool, issues are
better reported there.

But what do you mean by class level type annotation attributes ? TYPE_USE
annotations at the (SE5) class declaration site end up in the same table as SE5
annotations per specification.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354485</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-24 18:41:30 -0500</bug_when>
    <thetext>Andy, thanks for following up.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354510</commentid>
    <comment_count>4</comment_count>
    <who name="Andr  Pankraz">andre</who>
    <bug_when>2014-01-25 04:57:14 -0500</bug_when>
    <thetext>Hi,

with 4) Java Bytecode Viewer I meant your
 org.eclipse.jdt.internal.ui.javaeditor.ClassFileEditor

This ClassFileEditor viewer is quite good to debug such stuff (even though I&apos;m really missing to click into Outline and then he jumps to the proper method here...).

It&apos;s showing the attribute &quot;RuntimeVisibleTypeAnnotations&quot; at method level but it doesn&apos;t show the attribute on class level (I just call it that way, don&apos;t know your internal terms), where I could see the type annotations for class declarations type arguments, super classes or interfaces.

3) OK, will try later. Should really be same for Eclipse and JDK....and I think Eclipse is right with this.

Best regards</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2355707</commentid>
    <comment_count>5</comment_count>
      <attachid>239410</attachid>
    <who name="Andrew Clement">aclement</who>
    <bug_when>2014-01-28 18:00:32 -0500</bug_when>
    <thetext>Created attachment 239410
Addresses the duplicate problem

This fixes the problem of duplicates in the bytecode and includes a testcase.

The problem was that the initializer was visited twice. The solution I included in the patch was to skip the initializer during the visit that collects the type annotations, it will be collected in the right way elsewhere.

With those duplicates removed we are in much better shape.

The one remaining annoyance I see is that there are two CHECKCASTs in what we generated for the test program. The first is generated by the MessageSend because it is seen to involve generics, the second is generated by the cast expression (because the cast has a type annotation). It isn&apos;t a problem as such but the bytecode is suboptimal.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2360688</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-09 08:01:36 -0500</bug_when>
    <thetext>Thanks for the patch Andy, looks good. I added a test for field initializers
and released it here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=bbab5540f6141654f88ccf247a378547f83d5cdb

(In reply to Andr  Pankraz from comment #0)

&gt; 1.) No attribute &quot;Local variable type table&quot; with the generic type info for
&gt; the variable is rendered, I know generic array declarations are somewhat
&gt; so-so from spec view. JDK 8 generates this happily...
&gt; (But you generate the type annotation info for the CharSequence type param.)

&gt; 4) Little bit different topic, but same stuff for me: Java Bytecode Viewer
&gt; doesn&apos;t show class level type annotation attributes...

I double checked this and couldn&apos;t find anything wrong in ECJ behavior:

For this program: 

import java.lang.annotation.*;
import static java.lang.annotation.ElementType.*;
@Retention(RetentionPolicy.RUNTIME)
@Target(TYPE_USE)
@interface Marker {}
public class X extends @Marker Object {}

We emit:

          &quot;  RuntimeVisibleTypeAnnotations: \n&quot; + 
	  &quot;    #17 @Marker(\n&quot; + 
          &quot;      target type = 0x10 CLASS_EXTENDS\n&quot; + 
	  &quot;      type index = -1\n&quot; + 
          &quot;    )\n&quot;;

I have raised https://bugs.eclipse.org/bugs/show_bug.cgi?id=427753
for follow up.

Thanks!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2366721</commentid>
    <comment_count>7</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2014-02-21 07:29:45 -0500</bug_when>
    <thetext>Verified as working for Eclipse + Java 8 RC1 using Kepler SR2(RC4) +   
Eclipse Java Development Tools Patch for Java 8 Support (BETA)   
1.0.0.v20140220-2054</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>239410</attachid>
            <date>2014-01-28 18:00:00 -0500</date>
            <delta_ts>2014-01-28 18:00:32 -0500</delta_ts>
            <desc>Addresses the duplicate problem</desc>
            <filename>0001-Bug-426616-1.8-compiler-Type-Annotations-multiple-pr.patch</filename>
            <type>text/plain</type>
            <size>9698</size>
            <attacher name="Andrew Clement">aclement</attacher>
            
              <data encoding="base64">RnJvbSA0NjZiYjg0NzA1ZjEwMTE3OTQ5YjQ5Y2Y5MTZkYzcyMWJmMDI3M2MzIE1vbiBTZXAgMTcg
MDA6MDA6MDAgMjAwMQpGcm9tOiBBbmR5IENsZW1lbnQgPGFjbGVtZW50QGdvcGl2b3RhbC5jb20+
CkRhdGU6IFR1ZSwgMjggSmFuIDIwMTQgMTQ6NDA6MzQgLTA4MDAKU3ViamVjdDogW1BBVENIXSBC
dWcgNDI2NjE2IC0gWzEuOF1bY29tcGlsZXJdIFR5cGUgQW5ub3RhdGlvbnMsIG11bHRpcGxlCiBw
cm9ibGVtcwoKLS0tCiAuLi4vY29tcGlsZXIvcmVncmVzc2lvbi9UeXBlQW5ub3RhdGlvblRlc3Qu
amF2YSAgICB8IDEyMSArKysrKysrKysrKysrKysrKysrKy0KIC4uLi9pbnRlcm5hbC9jb21waWxl
ci9hc3QvTG9jYWxEZWNsYXJhdGlvbi5qYXZhICAgIHwgIDE3ICsrLQogMiBmaWxlcyBjaGFuZ2Vk
LCAxMzYgaW5zZXJ0aW9ucygrKSwgMiBkZWxldGlvbnMoLSkKCmRpZmYgLS1naXQgYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVz
dHMvY29tcGlsZXIvcmVncmVzc2lvbi9UeXBlQW5ub3RhdGlvblRlc3QuamF2YSBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0
cy9jb21waWxlci9yZWdyZXNzaW9uL1R5cGVBbm5vdGF0aW9uVGVzdC5qYXZhCmluZGV4IGYzNzE3
OTUuLjdmNWMyNGIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBp
bGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1R5
cGVBbm5vdGF0aW9uVGVzdC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNv
bXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9u
L1R5cGVBbm5vdGF0aW9uVGVzdC5qYXZhCkBAIC0xNyw2ICsxNyw3IEBACiAgKiAgICAgICAgICAg
ICAgICAgICAgICAgICAgQnVnIDQwOTI0NiAtIFsxLjhdW2NvbXBpbGVyXSBUeXBlIGFubm90YXRp
b25zIG9uIGNhdGNoIHBhcmFtZXRlcnMgbm90IGhhbmRsZWQgcHJvcGVybHkKICAqICAgICAgICAg
ICAgICAgICAgICAgICAgICBCdWcgNDA5NTE3IC0gWzEuOF1bY29tcGlsZXJdIFR5cGUgYW5ub3Rh
dGlvbiBwcm9ibGVtcyBvbiBtb3JlIGVsYWJvcmF0ZSBhcnJheSByZWZlcmVuY2VzCiAgKiAgICAg
ICAgICAgICAgICAgICAgICAgICAgQnVnIDQxNTgyMSAtIFsxLjhdW2NvbXBpbGVyXSBDTEFTU19F
WFRFTkRTIHRhcmdldCB0eXBlIGFubm90YXRpb24gbWlzc2luZyBmb3IgYW5vbnltb3VzIGNsYXNz
ZXMKKyAqICAgICAgICAgICAgICAgICAgICAgICAgICBCdWcgNDI2NjE2IC0gWzEuOF1bY29tcGls
ZXJdIFR5cGUgQW5ub3RhdGlvbnMsIG11bHRpcGxlIHByb2JsZW1zIAogICogICAgICAgIFN0ZXBo
YW4gSGVycm1hbm4gLSBDb250cmlidXRpb24gZm9yCiAgKgkJCQkJCQlCdWcgNDE1OTExIC0gWzEu
OF1bY29tcGlsZXJdIE5QRSB3aGVuIFRZUEVfVVNFIGFubm90YXRlZCBtZXRob2Qgd2l0aCBtaXNz
aW5nIHJldHVybiB0eXBlCiAgKgkJCQkJCQlCdWcgNDE2MTc2IC0gWzEuOF1bY29tcGlsZXJdW251
bGxdIG51bGwgdHlwZSBhbm5vdGF0aW9ucyBjYXVzZSBncmllZiBvbiB0eXBlIHZhcmlhYmxlcwpA
QCAtNTU1Nyw2ICs1NTU4LDEyNCBAQCBwdWJsaWMgY2xhc3MgVHlwZUFubm90YXRpb25UZXN0IGV4
dGVuZHMgQWJzdHJhY3RSZWdyZXNzaW9uVGVzdCB7CiAJCQkiUmV0dXJuIHR5cGUgZm9yIHRoZSBt
ZXRob2QgaXMgbWlzc2luZ1xuIiArIAogCQkJIi0tLS0tLS0tLS1cbiIpOwogCX0KKwkKKwlwdWJs
aWMgdm9pZCB0ZXN0QnVnNDI2NjE2KCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCXRoaXMucnVuQ29u
Zm9ybVRlc3QoCisJCQluZXcgU3RyaW5nW10geworCQkJCSJYLmphdmEiLAorCQkJCSJpbXBvcnQg
amF2YS51dGlsLio7XG4iKworCQkJCSJpbXBvcnQgamF2YS5sYW5nLmFubm90YXRpb24uKjtcbiIg
KyAKKwkJCQkiaW1wb3J0IHN0YXRpYyBqYXZhLmxhbmcuYW5ub3RhdGlvbi5FbGVtZW50VHlwZS4q
O1xuIiArIAorCQkJCSJpbXBvcnQgc3RhdGljIGphdmEubGFuZy5hbm5vdGF0aW9uLlJldGVudGlv
blBvbGljeS4qO1xuIiArCisJCQkJIkBSZXRlbnRpb24oUlVOVElNRSlcbiIgKyAKKwkJCQkiQFRh
cmdldChUWVBFX1VTRSlcbiIgKyAKKwkJCQkiQGludGVyZmFjZSBTaXplSG9sZGVyIHsgU2l6ZVtd
IHZhbHVlKCk7fVxuIisKKwkJCQkiQFRhcmdldChUWVBFX1VTRSlcbiIgKyAKKwkJCQkiQFJldGVu
dGlvbihSVU5USU1FKVxuIiArIAorCQkJCSJAUmVwZWF0YWJsZShTaXplSG9sZGVyLmNsYXNzKVxu
IisKKwkJCQkiQGludGVyZmFjZSBTaXplIHsgaW50IG1heCgpOyB9XG4iKworCQkJCSJAVGFyZ2V0
KFRZUEVfVVNFKVxuIiArIAorCQkJCSJAUmV0ZW50aW9uKFJVTlRJTUUpXG4iICsgCisJCQkJIkBp
bnRlcmZhY2UgTm9ubnVsbCB7fVxuIisKKwkJCQkiXG4iKworCQkJCSJwdWJsaWMgY2xhc3MgWCB7
XG4iICsgCisJCQkJIiAgIHB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdYXJndikge31c
biIrCisJCQkJIglwdWJsaWMgc3RhdGljIFN0cmluZyB0ZXN0QXJyYXlzKCkge1xuIisKKwkJCQki
CQlMaXN0PEBTaXplKG1heCA9IDQxKSBDaGFyU2VxdWVuY2U+W10gQFNpemUobWF4ID0gNDIpIFtd
IEBOb25udWxsIEBTaXplKG1heCA9IDQzKSBbXVtdIHRlc3QgPSBuZXcgQFNpemUobWF4ID0gNDQp
IEFycmF5TGlzdCBAU2l6ZShtYXggPSA0NSkgWzEwXVtdW10gQFNpemUobWF4ID0gNDcpIEBTaXpl
KG1heCA9IDQ4KSBbXTtcbiIrCisJCQkJIgkJcmV0dXJuIChAU2l6ZShtYXggPSA0OSkgU3RyaW5n
KSB0ZXN0WzBdWzFdWzJdWzNdLmdldCgwKTtcbiIrCisJCQkJIgl9XG4iKworCQkJCSJ9IiwKKwkJ
fSwKKwkJIiIpOworCQkvLyBKYXZhYyBvdXRwdXQKKwkJLy8gMDogU2l6ZSg0NSk6IE5FVywgb2Zm
c2V0PTAKKyAgICAgICAgLy8gMTogU2l6ZUhvbGRlcihbQFNpemUobWF4PTQ3KSxAU2l6ZShtYXg9
NDgpXSk6IE5FVywgb2Zmc2V0PTAsIGxvY2F0aW9uPVtBUlJBWSwgQVJSQVksIEFSUkFZXQorICAg
ICAgICAvLyAyOiBTaXplKDQ0KTogTkVXLCBvZmZzZXQ9MCwgbG9jYXRpb249W0FSUkFZLCBBUlJB
WSwgQVJSQVksIEFSUkFZXQorCQkvLyAzOiBTaXplKDQ5KTogQ0FTVCwgb2Zmc2V0PTYsIHR5cGVf
aW5kZXg9MAkJCisgICAgICAgIC8vIDQ6IFNpemUoNDIpOiBMT0NBTF9WQVJJQUJMRSwge3N0YXJ0
X3BjPTYsIGxlbmd0aD0xOSwgaW5kZXg9MH0sIGxvY2F0aW9uPVtBUlJBWV0KKyAgICAgICAgLy8g
NTogTm9uTnVsbDogTE9DQUxfVkFSSUFCTEUsIHtzdGFydF9wYz02LCBsZW5ndGg9MTksIGluZGV4
PTB9LCBsb2NhdGlvbj1bQVJSQVksIEFSUkFZXQorICAgICAgICAvLyA2OiBTaXplKDQzKTogTE9D
QUxfVkFSSUFCTEUsIHtzdGFydF9wYz02LCBsZW5ndGg9MTksIGluZGV4PTB9LCBsb2NhdGlvbj1b
QVJSQVksIEFSUkFZXQorICAgICAgICAvLyA3OiBTaXplKDQxKTogTE9DQUxfVkFSSUFCTEUsIHtz
dGFydF9wYz02LCBsZW5ndGg9MTksIGluZGV4PTB9LCBsb2NhdGlvbj1bQVJSQVksIEFSUkFZLCBB
UlJBWSwgQVJSQVksIFRZUEVfQVJHVU1FTlQoMCldCisKKwkJU3RyaW5nIGV4cGVjdGVkT3V0cHV0
ID0KKwkJCQkiICAgIFJ1bnRpbWVWaXNpYmxlVHlwZUFubm90YXRpb25zOiBcbiIgKyAKKwkJCisJ
CQkJLy8gWCBNYXBzIHRvIGphdmFjIGVudHJ5ICgyKTogbG9jYXRpb24gT0ssIHRhcmdldCB0eXBl
IE9LLCBvZmZzZXQgZGlmZmVyZW50LCBvdXIgb2Zmc2V0IGlzIDIgYW5kIG5vdCAwCisJCQkJIiAg
ICAgICMzMyBAU2l6ZShcbiIgKyAKKwkJCQkiICAgICAgICAjMzQgbWF4PShpbnQpIDQ0IChjb25z
dGFudCB0eXBlKVxuIiArIAorCQkJCSIgICAgICAgIHRhcmdldCB0eXBlID0gMHg0NCBORVdcbiIg
KyAKKwkJCQkiICAgICAgICBvZmZzZXQgPSAyXG4iICsgCisJCQkJIiAgICAgICAgbG9jYXRpb24g
PSBbQVJSQVksIEFSUkFZLCBBUlJBWSwgQVJSQVldXG4iICsgCisJCQkJIiAgICAgIClcbiIgKyAK
KwkJCQkKKwkJCQkvLyBYIE1hcHMgdG8gamF2YWMgZW50cnkgKDApLCBsb2NhdGlvbiBPSywgdGFy
Z2V0IHR5cGUgT0ssIG9mZnNldCBkaWZmZXJlbnQsIG91ciBvZmZzZXQgaXMgMiBhbmQgbm90IDAK
KwkJCQkiICAgICAgIzMzIEBTaXplKFxuIiArIAorCQkJCSIgICAgICAgICMzNCBtYXg9KGludCkg
NDUgKGNvbnN0YW50IHR5cGUpXG4iICsgCisJCQkJIiAgICAgICAgdGFyZ2V0IHR5cGUgPSAweDQ0
IE5FV1xuIiArIAorCQkJCSIgICAgICAgIG9mZnNldCA9IDJcbiIgKyAKKwkJCQkiICAgICAgKVxu
IiArIAorCQkJCQorCQkJCS8vIFggTWFwcyB0byBqYXZhYyBlbnRyeSAoMSksIGxvY2F0aW9uIE9L
LCB0YXJnZXQgdHlwZSBPSywgb2Zmc2V0IGRpZmZlcmVudCwgb3VyIG9mZnNldCBpcyAyIGFuZCBu
b3QgMAorCQkJCSIgICAgICAjMzcgQFNpemVIb2xkZXIoXG4iICsgCisJCQkJIiAgICAgICAgIzM4
IHZhbHVlPVtcbiIgKyAKKwkJCQkiICAgICAgICAgIGFubm90YXRpb24gdmFsdWUgPVxuIiArIAor
CQkJCSIgICAgICAgICAgICAgICMzMyBAU2l6ZShcbiIgKyAKKwkJCQkiICAgICAgICAgICAgICAg
ICMzNCBtYXg9KGludCkgNDcgKGNvbnN0YW50IHR5cGUpXG4iICsgCisJCQkJIiAgICAgICAgICAg
ICAgKVxuIiArIAorCQkJCSIgICAgICAgICAgYW5ub3RhdGlvbiB2YWx1ZSA9XG4iICsgCisJCQkJ
IiAgICAgICAgICAgICAgIzMzIEBTaXplKFxuIiArIAorCQkJCSIgICAgICAgICAgICAgICAgIzM0
IG1heD0oaW50KSA0OCAoY29uc3RhbnQgdHlwZSlcbiIgKyAKKwkJCQkiICAgICAgICAgICAgICAp
XG4iICsgCisJCQkJIiAgICAgICAgICBdXG4iICsgCisJCQkJIiAgICAgICAgdGFyZ2V0IHR5cGUg
PSAweDQ0IE5FV1xuIiArIAorCQkJCSIgICAgICAgIG9mZnNldCA9IDJcbiIgKyAKKwkJCQkiICAg
ICAgICBsb2NhdGlvbiA9IFtBUlJBWSwgQVJSQVksIEFSUkFZXVxuIiArIAorCQkJCSIgICAgICAp
XG4iICsgCisJCQkJCisJCQkJLy8gWCBNYXBzIHRvIGphdmFjIGVudHJ5ICgzKSwgbG9jYXRpb24g
T0ssIHRhcmdldCB0eXBlIE9LLCBvZmZzZXQgZGlmZmVyZW50LCBvdXIgb2Zmc2V0IGlzIDI0IChu
b3QgNiksIHR5cGUgaW5kZXggT0sKKwkJCQkiICAgICAgIzMzIEBTaXplKFxuIiArIAorCQkJCSIg
ICAgICAgICMzNCBtYXg9KGludCkgNDkgKGNvbnN0YW50IHR5cGUpXG4iICsgCisJCQkJIiAgICAg
ICAgdGFyZ2V0IHR5cGUgPSAweDQ3IENBU1RcbiIgKyAKKwkJCQkiICAgICAgICBvZmZzZXQgPSAy
NFxuIiArIAorCQkJCSIgICAgICAgIHR5cGUgYXJndW1lbnQgaW5kZXggPSAwXG4iICsgCisJCQkJ
IiAgICAgIClcbiIgKyAKKwkJCQkKKwkJCQkvLyBNYXBzIHRvIGphdmFjIGVudHJ5ICg0KSwgbG9j
YXRpb24gT0ssIHRhcmdldCB0eXBlIE9LLCBsdmFyIGRpZmYsIHNsaWdodCBwb3NpdGlvbiBkaWZm
ZXJlbmNlICh3ZSBzZWVtIHRvIGhhdmUgYW4gZXh0cmEgQ0hFQ0tDQVNUKQorCQkJCSIgICAgICAj
MzMgQFNpemUoXG4iICsgCisJCQkJIiAgICAgICAgIzM0IG1heD0oaW50KSA0MiAoY29uc3RhbnQg
dHlwZSlcbiIgKyAKKwkJCQkiICAgICAgICB0YXJnZXQgdHlwZSA9IDB4NDAgTE9DQUxfVkFSSUFC
TEVcbiIgKyAKKwkJCQkiICAgICAgICBsb2NhbCB2YXJpYWJsZSBlbnRyaWVzOlxuIiArIAorCQkJ
CSIgICAgICAgICAgW3BjOiA2LCBwYzogMjhdIGluZGV4OiAwXG4iICsgCisJCQkJIiAgICAgICAg
bG9jYXRpb24gPSBbQVJSQVldXG4iICsgCisJCQkJIiAgICAgIClcbiIgKyAKKwkJCQkKKwkJCQkv
LyBNYXBzIHRvIGphdmFjIGVudHJ5ICg1KSwgbG9jYXRpb24gT0ssIHRhcmV0IHR5cGUgT0ssIGx2
YXIgZGlmZiwgc2xpZ2h0IHBvc2l0aW9uIGRpZmZlcmVuY2UgKHdlIHNlZW0gdG8gaGF2ZSBhbiBl
eHRyYSBDSEVDS0NBU1QpCisJCQkJIiAgICAgICM0MyBATm9ubnVsbChcbiIgKyAKKwkJCQkiICAg
ICAgICB0YXJnZXQgdHlwZSA9IDB4NDAgTE9DQUxfVkFSSUFCTEVcbiIgKyAKKwkJCQkiICAgICAg
ICBsb2NhbCB2YXJpYWJsZSBlbnRyaWVzOlxuIiArIAorCQkJCSIgICAgICAgICAgW3BjOiA2LCBw
YzogMjhdIGluZGV4OiAwXG4iICsgCisJCQkJIiAgICAgICAgbG9jYXRpb24gPSBbQVJSQVksIEFS
UkFZXVxuIiArIAorCQkJCSIgICAgICApXG4iICsgCisJCQkJCisJCQkJLy8gTWFwcyB0byBqYXZh
YyBlbnRyeSAoNiksIGxvY2F0aW9uIE9LLCB0YXJnZXQgdHlwZSBPSywgIHNsaWdodCBwb3NpdGlv
biBkaWZmZXJlbmNlICh3ZSBzZWVtIHRvIGhhdmUgYW4gZXh0cmEgQ0hFQ0tDQVNUKQorCQkJCSIg
ICAgICAjMzMgQFNpemUoXG4iICsgCisJCQkJIiAgICAgICAgIzM0IG1heD0oaW50KSA0MyAoY29u
c3RhbnQgdHlwZSlcbiIgKyAKKwkJCQkiICAgICAgICB0YXJnZXQgdHlwZSA9IDB4NDAgTE9DQUxf
VkFSSUFCTEVcbiIgKyAKKwkJCQkiICAgICAgICBsb2NhbCB2YXJpYWJsZSBlbnRyaWVzOlxuIiAr
IAorCQkJCSIgICAgICAgICAgW3BjOiA2LCBwYzogMjhdIGluZGV4OiAwXG4iICsgCisJCQkJIiAg
ICAgICAgbG9jYXRpb24gPSBbQVJSQVksIEFSUkFZXVxuIiArIAorCQkJCSIgICAgICApXG4iICsg
CisJCQkJCisJCQkJLy8gTWFwcyB0byBqYXZhYyBlbnRyeSAoNyksIGxvY2F0aW9uIE9LLCB0YXJn
ZXQgdHlwZSBPSywgc2xpZ2h0IHBvc2l0aW9uIGRpZmZlcmVuY2UgKHdlIHNlZW0gdG8gaGF2ZSBh
biBleHRyYSBDSEVDS0NBU1QpCisJCQkJIiAgICAgICMzMyBAU2l6ZShcbiIgKyAKKwkJCQkiICAg
ICAgICAjMzQgbWF4PShpbnQpIDQxIChjb25zdGFudCB0eXBlKVxuIiArIAorCQkJCSIgICAgICAg
IHRhcmdldCB0eXBlID0gMHg0MCBMT0NBTF9WQVJJQUJMRVxuIiArIAorCQkJCSIgICAgICAgIGxv
Y2FsIHZhcmlhYmxlIGVudHJpZXM6XG4iICsgCisJCQkJIiAgICAgICAgICBbcGM6IDYsIHBjOiAy
OF0gaW5kZXg6IDBcbiIgKyAKKwkJCQkiICAgICAgICBsb2NhdGlvbiA9IFtBUlJBWSwgQVJSQVks
IEFSUkFZLCBBUlJBWSwgVFlQRV9BUkdVTUVOVCgwKV1cbiIgKyAKKwkJCQkiICAgICAgKVxuIjsK
KwkJY2hlY2tEaXNhc3NlbWJsZWRDbGFzc0ZpbGUoT1VUUFVUX0RJUiArIEZpbGUuc2VwYXJhdG9y
ICsgIlguY2xhc3MiLCAiWCIsIGV4cGVjdGVkT3V0cHV0LCBDbGFzc0ZpbGVCeXRlc0Rpc2Fzc2Vt
Ymxlci5TWVNURU0pOworCX0KIAogCXB1YmxpYyB2b2lkIHRlc3RUeXBlVmFyaWFibGUoKSB7CiAJ
CXJ1bk5lZ2F0aXZlVGVzdCgKQEAgLTU1NjUsNyArNTY4NCw3IEBAIHB1YmxpYyBjbGFzcyBUeXBl
QW5ub3RhdGlvblRlc3QgZXh0ZW5kcyBBYnN0cmFjdFJlZ3Jlc3Npb25UZXN0IHsKIAkJCQkicHVi
bGljIGNsYXNzIFg8QE1pc3NpbmcgVD4ge1xuIiArCiAJCQkJIn1cbiIKIAkJCX0sCi0JCQkiLS0t
LS0tLS0tLVxuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIgKyAJCiAJCQkiMS4gRVJST1IgaW4gWC5q
YXZhIChhdCBsaW5lIDEpXG4iICsgCiAJCQkiCXB1YmxpYyBjbGFzcyBYPEBNaXNzaW5nIFQ+IHtc
biIgKyAKIAkJCSIJICAgICAgICAgICAgICAgIF5eXl5eXl5cbiIgKyAKZGlmZiAtLWdpdCBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9hc3QvTG9jYWxEZWNsYXJhdGlvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Mb2NhbERlY2xhcmF0
aW9uLmphdmEKaW5kZXggZTQzZjIzMS4uMzgxMzg5ZSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9M
b2NhbERlY2xhcmF0aW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Mb2NhbERlY2xhcmF0aW9uLmph
dmEKQEAgLTMxLDYgKzMxLDcgQEAKICAqCQkJCQkJCUJ1ZyAzNzg2NzQgLSAiVGhlIG1ldGhvZCBj
YW4gYmUgZGVjbGFyZWQgYXMgc3RhdGljIiBpcyB3cm9uZwogICogICAgICAgIEFuZHkgQ2xlbWVu
dCAoR29QaXZvdGFsLCBJbmMpIGFjbGVtZW50QGdvcGl2b3RhbC5jb20gLSBDb250cmlidXRpb25z
IGZvcgogICoJCQkJCQkJQnVnIDQwOTI1MCAtIFsxLjhdW2NvbXBpbGVyXSBWYXJpb3VzIGxvb3Nl
IGVuZHMgaW4gMzA4IGNvZGUgZ2VuZXJhdGlvbgorICoJCQkJCQkJQnVnIDQyNjYxNiAtIFsxLjhd
W2NvbXBpbGVyXSBUeXBlIEFubm90YXRpb25zLCBtdWx0aXBsZSBwcm9ibGVtcyAKICAqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqLwogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIuYXN0OwogCkBAIC0xNzMsMTMgKzE3NCwyNyBAQCBwdWJsaWMgRmxvd0luZm8gYW5hbHlzZUNv
ZGUoQmxvY2tTY29wZSBjdXJyZW50U2NvcGUsIEZsb3dDb250ZXh0IGZsb3dDb250ZXh0LCBGbAog
CS8vIGZvciBsb2NhbCB2YXJpYWJsZXMKIAlwdWJsaWMgdm9pZCBnZXRBbGxBbm5vdGF0aW9uQ29u
dGV4dHMoaW50IHRhcmdldFR5cGUsIExvY2FsVmFyaWFibGVCaW5kaW5nIGxvY2FsVmFyaWFibGUs
IExpc3QgYWxsQW5ub3RhdGlvbkNvbnRleHRzKSB7CiAJCUFubm90YXRpb25Db2xsZWN0b3IgY29s
bGVjdG9yID0gbmV3IEFubm90YXRpb25Db2xsZWN0b3IodGhpcywgdGFyZ2V0VHlwZSwgbG9jYWxW
YXJpYWJsZSwgYWxsQW5ub3RhdGlvbkNvbnRleHRzKTsKLQkJdGhpcy50cmF2ZXJzZShjb2xsZWN0
b3IsIChCbG9ja1Njb3BlKSBudWxsKTsKKwkJdGhpcy50cmF2ZXJzZVdpdGhvdXRJbml0aWFsaXpl
cihjb2xsZWN0b3IsIChCbG9ja1Njb3BlKSBudWxsKTsKIAl9CisKIAkvLyBmb3IgYXJndW1lbnRz
CiAJcHVibGljIHZvaWQgZ2V0QWxsQW5ub3RhdGlvbkNvbnRleHRzKGludCB0YXJnZXRUeXBlLCBp
bnQgcGFyYW1ldGVySW5kZXgsIExpc3QgYWxsQW5ub3RhdGlvbkNvbnRleHRzKSB7CiAJCUFubm90
YXRpb25Db2xsZWN0b3IgY29sbGVjdG9yID0gbmV3IEFubm90YXRpb25Db2xsZWN0b3IodGhpcywg
dGFyZ2V0VHlwZSwgcGFyYW1ldGVySW5kZXgsIGFsbEFubm90YXRpb25Db250ZXh0cyk7CiAJCXRo
aXMudHJhdmVyc2UoY29sbGVjdG9yLCAoQmxvY2tTY29wZSkgbnVsbCk7CiAJfQorCQorCXByaXZh
dGUgdm9pZCB0cmF2ZXJzZVdpdGhvdXRJbml0aWFsaXplcihBU1RWaXNpdG9yIHZpc2l0b3IsIEJs
b2NrU2NvcGUgc2NvcGUpIHsJCQorCQlpZiAodmlzaXRvci52aXNpdCh0aGlzLCBzY29wZSkpIHsK
KwkJCWlmICh0aGlzLmFubm90YXRpb25zICE9IG51bGwpIHsKKwkJCQlpbnQgYW5ub3RhdGlvbnNM
ZW5ndGggPSB0aGlzLmFubm90YXRpb25zLmxlbmd0aDsKKwkJCQlmb3IgKGludCBpID0gMDsgaSA8
IGFubm90YXRpb25zTGVuZ3RoOyBpKyspCisJCQkJCXRoaXMuYW5ub3RhdGlvbnNbaV0udHJhdmVy
c2UodmlzaXRvciwgc2NvcGUpOworCQkJfQorCQkJdGhpcy50eXBlLnRyYXZlcnNlKHZpc2l0b3Is
IHNjb3BlKTsKKwkJfQorCQl2aXNpdG9yLmVuZFZpc2l0KHRoaXMsIHNjb3BlKTsKKwl9CisJCiAJ
cHVibGljIGJvb2xlYW4gaXNBcmd1bWVudCgpIHsKIAkJcmV0dXJuIGZhbHNlOwogCX0KLS0gCjEu
Ny4xMS4yCgo=
</data>

          </attachment>
      

    </bug>

</bugzilla>