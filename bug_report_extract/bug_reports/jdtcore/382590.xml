<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>382590</bug_id>
          
          <creation_ts>2012-06-14 03:30:00 -0400</creation_ts>
          <short_desc>TypesImpl.asMemberOf must also work with a subclass and its superclass&apos; element</short_desc>
          <delta_ts>2015-04-30 09:30:34 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>APT</component>
          <version>3.8</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          <see_also>https://git.eclipse.org/r/45576</see_also>
    
    <see_also>https://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=fdf4380d8dd2e7b1f08462c3e15a52a8d6142eb4</see_also>
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.5 M7</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="DoHyung Kim">dynaxis</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>christian.humer</cc>
    
    <cc>eclipse.sprigogin</cc>
    
    <cc>eclipse</cc>
    
    <cc>jarthana</cc>
    
    <cc>jogl</cc>
    
    <cc>mmc</cc>
    
    <cc>saammana</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>5</votes>

      

      

      <flag name="review"
          id="64424"
          type_id="1"
          status="?"
          setter="jarthana"
          requestee="jarthana"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2124115</commentid>
    <comment_count>0</comment_count>
    <who name="DoHyung Kim">dynaxis</who>
    <bug_when>2012-06-14 03:30:31 -0400</bug_when>
    <thetext>Build Identifier: Version: Indigo Service Release 2 Build id: 20120216-1857

Let&apos;s say we have two classes:

public class Base&lt;T&gt; {

    T field;
}

public class Concrete extends Base&lt;Long&gt; {
}

Then the following call should be legitimate and it is so in Oracle javac, but raises IllegalArgumentException in JDT:

Types types = ...;
Elements elems = ...;
TypeMirror concreteType = elems.getTypeElement(&quot;Concrete&quot;).asType();
Element baseField = elems.getTypeElement(&quot;Base&quot;).getEnclosedElements().get(0);
TypeMirror tm = types.asMemberOf(concreteType, baseField);


Reproducible: Always

Steps to Reproduce:
1. Write an annotation processor having the code snippet shown in Details section.
2. Prepare forementioned classes too.
3. Compile the codebase and see what&apos;s shown in the error log.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2124117</commentid>
    <comment_count>1</comment_count>
    <who name="DoHyung Kim">dynaxis</who>
    <bug_when>2012-06-14 03:35:09 -0400</bug_when>
    <thetext>I think this problem is quite obvious and there is some difference in the interpretation of the specification for Types.asMemberOf() between implementations. If it is helpful to provide fully working codes to manifest the problem (at least to me a problem), please let me know. I&apos;ll be happy to provide one.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2164762</commentid>
    <comment_count>2</comment_count>
    <who name="Walter Harley">eclipse</who>
    <bug_when>2012-09-26 11:20:22 -0400</bug_when>
    <thetext>I have written a test case that reproduces this.  To rephrase the original bug, in the following scenario:
  class A&lt;T&gt; {
    T f;
  }
  class B extends A {}
then types.asMemberOf(B, f) should treat B as a valid container of f, even though it does not directly contain f.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2164779</commentid>
    <comment_count>3</comment_count>
    <who name="Walter Harley">eclipse</who>
    <bug_when>2012-09-26 11:39:00 -0400</bug_when>
    <thetext>Specifically, the problem is that in TypesImpl, we are checking to see if the element&apos;s containing type is the *same* as the container type, rather than a superclass:

  FieldBinding fieldBinding = (FieldBinding) elementImpl._binding;
  if (fieldBinding.declaringClass != referenceBinding) {
    throw new IllegalArgumentException(...);
  }

The code following this check also needs to be fixed to support superclasses.

The javac doc (which is, effectively, the APT spec) is not clear about whether field visibility is considered; for instance, in

  class A&lt;T&gt; {
    private T f;
  }
  class B extends A {}

would asMemberOf(B, f) still work?  I hope not, but I&apos;ll experiment.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2165930</commentid>
    <comment_count>4</comment_count>
    <who name="Walter Harley">eclipse</who>
    <bug_when>2012-09-30 14:51:16 -0400</bug_when>
    <thetext>I have a fix for this; still trying to navigate Git well enough to submit either a patch or code review.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2167046</commentid>
    <comment_count>5</comment_count>
    <who name="Walter Harley">eclipse</who>
    <bug_when>2012-10-02 16:57:36 -0400</bug_when>
    <thetext>I&apos;ve uploaded a proposed fix to Gerrit.  This is my first time working with Git and with Gerrit, so hopefully I did it correctly.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2455194</commentid>
    <comment_count>6</comment_count>
    <who name="Christian humer">christian.humer</who>
    <bug_when>2014-09-23 06:12:11 -0400</bug_when>
    <thetext>Any update on this? Just ran into the same issue on a recent luna build.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471882</commentid>
    <comment_count>7</comment_count>
    <who name="Morten Christensen">mmc</who>
    <bug_when>2014-10-26 03:10:23 -0400</bug_when>
    <thetext>I also have run into this when processing the following interface from an annotation processor and calling types.asMemberOf with the arguments corresponding to Comparable&lt;ComparableName&gt; and &quot;public abstract int compareTo(T)&quot;.

public interface ComparableName extends java.lang.Comparable&lt;ComparableName&gt;
{
	public String getFirstName();
	public String getLastName();
}

And I am not alone as a google search for &quot;eclipse and types.asMemberOf and annotation processor&quot; returns various projects that have tried workaround.

Well, In my open source project &quot;http://valjogen.41concepts.com&quot; there is no easy workaround. When running in eclipse I think I am just going to output a message pointing to this old bug that is unfortunately going nowhere.

PLEASE FIX!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471972</commentid>
    <comment_count>8</comment_count>
    <who name="Christian humer">christian.humer</who>
    <bug_when>2014-10-26 10:55:01 -0400</bug_when>
    <thetext>Hi Morten,

Don&apos;t expect any of these APT related bugs to be fixed any time soon. It seems the JDT team avoids putting resources into this area for several years now. There is a considerable amount of technical depth accumulated in this area. Unfortunately nobody seems to care.

My recommendation: fix it yourself and hope to get it integrated.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471983</commentid>
    <comment_count>9</comment_count>
    <who name="Morten Christensen">mmc</who>
    <bug_when>2014-10-26 12:16:38 -0400</bug_when>
    <thetext>I think it is based left at capable hands at Eclipse to fix this. Can be easily reproduced by trying this example &quot;https://github.com/41concepts/VALJOGen/blob/master/valjogen-examples/src/main/java/com/fortyoneconcepts/valjogen/examples/ComparableName.java&quot; using the VALJOGen 1.0.0-RC4 annotation processor inside eclipse Luna. See &quot;http://valjogen.41concepts.com&quot; or contact me for details.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471984</commentid>
    <comment_count>10</comment_count>
    <who name="Morten Christensen">mmc</who>
    <bug_when>2014-10-26 12:24:37 -0400</bug_when>
    <thetext>BTW, the assigned component category is slightly misleading as this bug is related to the standard Java 6+ annotation processing APIs which superseded Java 5&apos;s APT.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472068</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-26 20:18:28 -0400</bug_when>
    <thetext>I was alarmed to see that a review request has been posted against my name on 
2012-10-02 16:57:36 EDT, but as you can see by clicking on the
bug History link above, I added myself to the CC list just now !!!

An unfortunate process glitch that has prevented the review request from
being seen by the requestee. That bugzilla does not send a mail to the
requestee when he/she is not on CC list is dumb.

While work on APT related issues is on a back burner, it is absolutely
not that it is not cared for. When alerted to persistent pain points,
the team can make suitable efforts to help.

Jay, can you see how to take this forward ? TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472070</commentid>
    <comment_count>12</comment_count>
    <who name="Christian humer">christian.humer</who>
    <bug_when>2014-10-26 20:31:11 -0400</bug_when>
    <thetext>Regarding persistent pain points:

2007 https://bugs.eclipse.org/bugs/show_bug.cgi?id=186057
2010 https://bugs.eclipse.org/bugs/show_bug.cgi?id=300408
2011 https://bugs.eclipse.org/bugs/show_bug.cgi?id=367599
2013 https://bugs.eclipse.org/bugs/show_bug.cgi?id=409824</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472111</commentid>
    <comment_count>13</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-10-27 00:30:42 -0400</bug_when>
    <thetext>(In reply to Walter Harley from comment #5)
&gt; I&apos;ve uploaded a proposed fix to Gerrit.  This is my first time working with
&gt; Git and with Gerrit, so hopefully I did it correctly.

Hi Walter, can you post the link to Gerrit contribution please? Thanks!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472526</commentid>
    <comment_count>14</comment_count>
    <who name="Morten Christensen">mmc</who>
    <bug_when>2014-10-27 12:31:39 -0400</bug_when>
    <thetext>Great that it was just a glitch.

In addition to this key bug I am also very interested in getting &quot;bug 341298&quot; fixed! This bug is also old, has a proposed fix and I suspect very easy to do.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2477045</commentid>
    <comment_count>15</comment_count>
      <attachid>248399</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-11-05 06:36:44 -0500</bug_when>
    <thetext>Created attachment 248399
Junit testcase

JDT Core testcase to reproduce the problem</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2543785</commentid>
    <comment_count>16</comment_count>
    <who name="John Glassmyer">jogl</who>
    <bug_when>2015-04-08 17:04:19 -0400</bug_when>
    <thetext>This also causes problems with Dagger 2 (http://google.github.io/dagger/).

Apparently Walter&apos;s patch is here:
https://git.eclipse.org/r/#/c/8031</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2543929</commentid>
    <comment_count>17</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-04-09 03:34:03 -0400</bug_when>
    <thetext>(In reply to John Glassmyer from comment #16)
&gt; This also causes problems with Dagger 2 (http://google.github.io/dagger/).
&gt; 
&gt; Apparently Walter&apos;s patch is here:
&gt; https://git.eclipse.org/r/#/c/8031

Thanks, John, I will take a look at the patch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2544392</commentid>
    <comment_count>18</comment_count>
    <who name="Eclipse Genie">genie</who>
    <bug_when>2015-04-09 12:04:27 -0400</bug_when>
    <thetext>New Gerrit change created: https://git.eclipse.org/r/45576</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2544682</commentid>
    <comment_count>19</comment_count>
    <who name="Eclipse Genie">genie</who>
    <bug_when>2015-04-10 04:40:17 -0400</bug_when>
    <thetext>Gerrit change https://git.eclipse.org/r/45576 was merged to [master].
Commit: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=fdf4380d8dd2e7b1f08462c3e15a52a8d6142eb4</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2544689</commentid>
    <comment_count>20</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-04-10 04:43:23 -0400</bug_when>
    <thetext>Thanks everyone for the help. The fix is in master now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2554507</commentid>
    <comment_count>21</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-04-30 06:25:19 -0400</bug_when>
    <thetext>Sasi reported that the case reported in comment #9 is not fixed. I can see that things don&apos;t work well for parameterized methods. Will try to fix this for RC1.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2554664</commentid>
    <comment_count>22</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-04-30 08:47:56 -0400</bug_when>
    <thetext>(In reply to Jay Arthanareeswaran from comment #21)
&gt; Sasi reported that the case reported in comment #9 is not fixed. I can see
&gt; that things don&apos;t work well for parameterized methods. Will try to fix this
&gt; for RC1.

This particular case is not about inherited elements. Regardless of the types, looks like we have always had issues around parameterized types.

In the example, the element is retrieved from the base type and thus has method binding as &quot;compareTo(T)&quot;. But the type that inherits is parametrized to be public class Concrete extends Base&lt;Long&gt; and thus the method binding is &quot;compareTo(java.lang.Long)&quot;.

If we do the substitution things should work. I don&apos;t know if this is the right way, but I see getExactMethod() makes things work, but I wonder if there are better ways.

Sasi/Stephan, any thoughts?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2554720</commentid>
    <comment_count>23</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-04-30 09:30:34 -0400</bug_when>
    <thetext>(In reply to Jay Arthanareeswaran from comment #22)
&gt; (In reply to Jay Arthanareeswaran from comment #21)
&gt; &gt; Sasi reported that the case reported in comment #9 is not fixed. I can see
&gt; &gt; that things don&apos;t work well for parameterized methods. Will try to fix this
&gt; &gt; for RC1.
&gt; 
&gt; This particular case is not about inherited elements. Regardless of the
&gt; types, looks like we have always had issues around parameterized types.
&gt; 
&gt; In the example, the element is retrieved from the base type and thus has
&gt; method binding as &quot;compareTo(T)&quot;. But the type that inherits is parametrized
&gt; to be public class Concrete extends Base&lt;Long&gt; and thus the method binding
&gt; is &quot;compareTo(java.lang.Long)&quot;.
&gt; 
&gt; If we do the substitution things should work. I don&apos;t know if this is the
&gt; right way, but I see getExactMethod() makes things work, but I wonder if
&gt; there are better ways.
&gt; 
&gt; Sasi/Stephan, any thoughts?

I&apos;m not sure I have sufficient context to join the discussion, let me check:

- we are talking about code inside TypesImp.asMemberOf following the METHOD case label?

- we have a ReferenceBinding for class Concrete?

- we have a MethodBinding for Base&lt;T&gt;.compareTo(T)? Or is it Comaparable&lt;T&gt;.compareTo(T)?

- when returning newTypeMirror(method), what method do you expect to see here?

- is method comparison failing? (Using areParameterErasuresEqual we should already be safe?

- or are we answering a wrong variant of the method?</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>248399</attachid>
            <date>2014-11-05 06:36:00 -0500</date>
            <delta_ts>2014-11-05 06:36:44 -0500</delta_ts>
            <desc>Junit testcase</desc>
            <filename>Testcase-for-bug-382590.patch</filename>
            <type>text/plain</type>
            <size>2518</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb21waWxlci5hcHQudGVzdHMvcHJvY2Vzc29y
cy9vcmcvZWNsaXBzZS9qZHQvY29tcGlsZXIvYXB0L3Rlc3RzL3Byb2Nlc3NvcnMvdHlwZXV0aWxz
L1R5cGVVdGlsc1Byb2MuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb21waWxlci5hcHQudGVzdHMv
cHJvY2Vzc29ycy9vcmcvZWNsaXBzZS9qZHQvY29tcGlsZXIvYXB0L3Rlc3RzL3Byb2Nlc3NvcnMv
dHlwZXV0aWxzL1R5cGVVdGlsc1Byb2MuamF2YQppbmRleCBmYzUyZjhmLi5iOWZmYmY5IDEwMDY0
NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29tcGlsZXIuYXB0LnRlc3RzL3Byb2Nlc3NvcnMvb3Jn
L2VjbGlwc2UvamR0L2NvbXBpbGVyL2FwdC90ZXN0cy9wcm9jZXNzb3JzL3R5cGV1dGlscy9UeXBl
VXRpbHNQcm9jLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLmFwdC50ZXN0cy9w
cm9jZXNzb3JzL29yZy9lY2xpcHNlL2pkdC9jb21waWxlci9hcHQvdGVzdHMvcHJvY2Vzc29ycy90
eXBldXRpbHMvVHlwZVV0aWxzUHJvYy5qYXZhCkBAIC0xLDQgKzEsNCBAQAogLyoqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwNywgMjAwOSBCRUEgU3lzdGVtcywgSW5j
LiBhbmQgb3RoZXJzCisgKiBDb3B5cmlnaHQgKGMpIDIwMDcsIDIwMTQgQkVBIFN5c3RlbXMsIElu
Yy4gYW5kIG90aGVycwogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0
aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRo
ZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCkBAIC0yMCw0ICsyMCw1
IEBACiBpbXBvcnQgamF2YXguYW5ub3RhdGlvbi5wcm9jZXNzaW5nLlN1cHBvcnRlZFNvdXJjZVZl
cnNpb247CiBpbXBvcnQgamF2YXgubGFuZy5tb2RlbC5Tb3VyY2VWZXJzaW9uOworaW1wb3J0IGph
dmF4LmxhbmcubW9kZWwuZWxlbWVudC5FbGVtZW50OwogaW1wb3J0IGphdmF4LmxhbmcubW9kZWwu
ZWxlbWVudC5UeXBlRWxlbWVudDsKIGltcG9ydCBqYXZheC5sYW5nLm1vZGVsLnR5cGUuQXJyYXlU
eXBlOwpAQCAtNzYsNCArNzcsOCBAQAogCQkKIAkJaWYgKCFleGFtaW5lR2V0QXJyYXlUeXBlUGFy
YW1ldGVyaXplZCgpKSB7CisJCQlyZXR1cm4gZmFsc2U7CisJCX0KKwkJCisJCWlmICghZXhhbWlu
ZUJ1ZzM4MjU5MCgpKSB7CiAJCQlyZXR1cm4gZmFsc2U7CiAJCX0KQEAgLTMyMSw0ICszMjYsMTUg
QEAKIAkJcmV0dXJuIHRydWU7CiAJfQorCQorCXByaXZhdGUgYm9vbGVhbiBleGFtaW5lQnVnMzgy
NTkwKCkgeworCQlUeXBlRWxlbWVudCB0eXBlID0gX2VsZW1lbnRVdGlscy5nZXRUeXBlRWxlbWVu
dCgiQ29uY3JldGUiKTsKKwkJRWxlbWVudCBiYXNlRmllbGQgPSBfZWxlbWVudFV0aWxzLmdldFR5
cGVFbGVtZW50KCJCYXNlIikuZ2V0RW5jbG9zZWRFbGVtZW50cygpLmdldCgxKTsKKwkJRGVjbGFy
ZWRUeXBlIGRlY2xhcmVkVHlwZSA9IF90eXBlVXRpbHMuZ2V0RGVjbGFyZWRUeXBlKHR5cGUpOwor
CQlUeXBlTWlycm9yIG1pcnJvciA9IF90eXBlVXRpbHMuYXNNZW1iZXJPZihkZWNsYXJlZFR5cGUs
IGJhc2VGaWVsZCk7CisJCWlmIChtaXJyb3IgPT0gbnVsbCkgeworCQkJcmV0dXJuIGZhbHNlOwor
CQl9CisJCXJldHVybiB0cnVlOworCX0KIAogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0
LmNvbXBpbGVyLmFwdC50ZXN0cy9yZXNvdXJjZXMvdGFyZ2V0cy9tb2RlbC9wZS9CYXNlLmphdmEg
Yi9vcmcuZWNsaXBzZS5qZHQuY29tcGlsZXIuYXB0LnRlc3RzL3Jlc291cmNlcy90YXJnZXRzL21v
ZGVsL3BlL0Jhc2UuamF2YQpuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwLi43Yjg0
MTI1Ci0tLSAvZGV2L251bGwKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLmFwdC50ZXN0
cy9yZXNvdXJjZXMvdGFyZ2V0cy9tb2RlbC9wZS9CYXNlLmphdmEKQEAgLTAsMCArMSw0IEBACitw
dWJsaWMgY2xhc3MgQmFzZTxUPiB7CisKKyAgICBUIGZpZWxkOworfQpcIE5vIG5ld2xpbmUgYXQg
ZW5kIG9mIGZpbGUKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb21waWxlci5hcHQudGVz
dHMvcmVzb3VyY2VzL3RhcmdldHMvbW9kZWwvcGUvQ29uY3JldGUuamF2YSBiL29yZy5lY2xpcHNl
LmpkdC5jb21waWxlci5hcHQudGVzdHMvcmVzb3VyY2VzL3RhcmdldHMvbW9kZWwvcGUvQ29uY3Jl
dGUuamF2YQpuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwLi5hODAzMTU1Ci0tLSAv
ZGV2L251bGwKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLmFwdC50ZXN0cy9yZXNvdXJj
ZXMvdGFyZ2V0cy9tb2RlbC9wZS9Db25jcmV0ZS5qYXZhCkBAIC0wLDAgKzEsMiBAQAorcHVibGlj
IGNsYXNzIENvbmNyZXRlIGV4dGVuZHMgQmFzZTxMb25nPiB7Cit9ClwgTm8gbmV3bGluZSBhdCBl
bmQgb2YgZmlsZQ==
</data>

          </attachment>
      

    </bug>

</bugzilla>