<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>407414</bug_id>
          
          <creation_ts>2013-05-07 10:32:00 -0400</creation_ts>
          <short_desc>[compiler][null] Incorrect warning on a primitive type being null</short_desc>
          <delta_ts>2015-04-24 02:04:48 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          <see_also>https://bugs.eclipse.org/bugs/show_bug.cgi?id=428104</see_also>
    
    <see_also>https://bugs.eclipse.org/bugs/show_bug.cgi?id=424702</see_also>
    
    <see_also>https://bugs.eclipse.org/bugs/show_bug.cgi?id=237236</see_also>
    
    <see_also>https://bugs.eclipse.org/bugs/show_bug.cgi?id=418236</see_also>
    
    <see_also>https://git.eclipse.org/r/46200</see_also>
    
    <see_also>https://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=e659592a32935b3480e8554de2e33b0870ea4573</see_also>
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.5 M7</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="shankha banerjee">shankhba</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>bb010g</cc>
    
    <cc>chalin</cc>
    
    <cc>jarthana</cc>
    
    <cc>manpalat</cc>
    
    <cc>mfucci</cc>
    
    <cc>shankhba</cc>
    
    <cc>stephan.herrmann</cc>
    
    <cc>tommy.O</cc>
    
    <cc>zds</cc>
          
          <votes>3</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2253424</commentid>
    <comment_count>0</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2013-05-07 10:32:19 -0400</bug_when>
    <thetext>public class Test {
	void foo(int i) {
		bar(i);
	}
	
	static void bar(Integer i)
	{
		
	}
}

The compiler throws up a incorrect warning message
Null type safety: The expression of type int needs unchecked conversion to conform to &apos;@NonNull Integer&apos;

at the function call: bar(i). 


Discussion:
Well, that&apos;s cheating :)
No, the compiler correctly recognized the need to perform
a boxing conversion from int to Integer. The bug is real:
after converting to Integer it *thinks* it must continue
converting from plain Integer to &quot;@NonNull Integer&quot;, but in
fact the boxing conversion already provides &quot;@NonNull Integer&quot;.
There is no int value that would yield a boxed value of &quot;null&quot;.

cheers,
Stephan

On 05/07/2013 03:00 PM, Shankha Banerjee1 wrote:
&gt; Hi Stephan,
&gt; I modified the example a bit :
&gt;
&gt; *package*test2;
&gt;
&gt; *public**class*Test {
&gt; *void*foo(*int*i) {
&gt; /bar/(i);
&gt;          }
&gt;
&gt; *static**void*bar(*int*i) //*_Changed the argument type from integer to
&gt; int_*
&gt;          {
&gt;
&gt;          }
&gt; }
&gt;
&gt; The warning disappears. Could it be that the compiler is correct in
&gt; throwing up the warning since it thinks the argument is a Integer type.
&gt;
&gt; Thanks,
&gt; Shankha
&gt;
&gt;
&gt;
&gt; From: Stephan Herrmann &lt;stephan.herrmann@berlin.de&gt;
&gt; To: Shankha Banerjee1/India/IBM@IBMIN, Jayaprakash
&gt; Arthanareeswaran/India/IBM@IBMIN,
&gt; Date: 05/07/2013 06:18 PM
&gt; Subject: Re: Query on Null Analysis and suggested quick fix
&gt; ------------------------------------------------------------------------
&gt;
&gt;
&gt;
&gt; Hi Shankha,
&gt;
&gt; this is an interesting bug.
&gt;
&gt; After I&apos;ve done some work on properly including *unboxing* in
&gt; null analysis, here we have the case where *boxing* is not
&gt; correctly analyzed. The quick fix isn&apos;t really to blame,
&gt; its the warning that is bogus: boxing a primitive value
&gt; can never produce a null value.
&gt;
&gt; Please file a bug.
&gt;
&gt; @Jay, this isn&apos;t strictly a regression, but a genuine bug
&gt; that will become more and more relevant as people are starting
&gt; to jump on the train of null annotations.
&gt; Please let me know if I should attempt a fix for Kepler, which
&gt; *might* be a fairly easy tasks. Haven&apos;t look yet.
&gt;
&gt; Thanks,
&gt; Stephan
&gt;
&gt;
&gt; On 05/07/2013 07:44 AM, Shankha Banerjee1 wrote:
&gt;  &gt; Hi Stephan,
&gt;  &gt; I had the following test case with null analysis enabled.
&gt;  &gt;
&gt;  &gt; *package*test2;
&gt;  &gt; *import*_org.eclipse.jdt.annotation.NonNull_;
&gt;  &gt;
&gt;  &gt; *public**class*Test {
&gt;  &gt; *void*foo(*int*i) {
&gt;  &gt; /bar/(_i_);
&gt;  &gt;          }
&gt;  &gt;
&gt;  &gt; *static**void*bar(Integer i)
&gt;  &gt;          {
&gt;  &gt; *assert*(i != *null*);
&gt;  &gt;          }
&gt;  &gt; }
&gt;  &gt;
&gt;  &gt;
&gt;  &gt; There also exists a package-info.java as part of the package:
&gt;  &gt; @org.eclipse.jdt.annotation.NonNullByDefault(*true*)
&gt;  &gt; *package*test2;
&gt;  &gt;
&gt;  &gt; We report a error
&gt;  &gt; at
&gt;  &gt; bar(i)
&gt;  &gt; Null type safety: The expression of type int needs unchecked conversion
&gt;  &gt; to conform to &apos;@NonNull Integer&apos;
&gt;  &gt;
&gt;  &gt; The Quick fix suggests the following fix:
&gt;  &gt; ...
&gt;  &gt; public class Test {
&gt;  &gt; void foo(@NonNull int i) {
&gt;  &gt; bar(i);
&gt;  &gt; ...
&gt;  &gt;
&gt;  &gt;
&gt;  &gt; After following the quick fix:
&gt;  &gt;
&gt;  &gt; The error thrown up is:
&gt;  &gt; The nullness annotation @NonNull is not applicable for the primitive
&gt;  &gt; type int
&gt;  &gt; at void foo(@NonNull int i).
&gt;  &gt;
&gt;  &gt; Do you think it is a possible bug as the quick fix results in a error?
&gt;  &gt;
&gt;  &gt; Thanks,
&gt;  &gt; Shankha
&gt;
&gt;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2253443</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-05-07 10:43:35 -0400</bug_when>
    <thetext>I&apos;ll take a look</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2278119</commentid>
    <comment_count>2</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-06-27 06:56:54 -0400</bug_when>
    <thetext>Shankha will take this up.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2292616</commentid>
    <comment_count>3</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2013-08-08 03:34:43 -0400</bug_when>
    <thetext>Started Working</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2293344</commentid>
    <comment_count>4</comment_count>
      <attachid>234273</attachid>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2013-08-09 15:34:37 -0400</bug_when>
    <thetext>Created attachment 234273
Patch

RunAllJDTCore results are fine.
Please review.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2293395</commentid>
    <comment_count>5</comment_count>
      <attachid>234277</attachid>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2013-08-09 22:30:56 -0400</bug_when>
    <thetext>Created attachment 234277
Patch

Copyright changes.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2293525</commentid>
    <comment_count>6</comment_count>
      <attachid>234288</attachid>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2013-08-11 20:12:42 -0400</bug_when>
    <thetext>Created attachment 234288
Patch

Format changes.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2303101</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-09-05 06:17:21 -0400</bug_when>
    <thetext>See also bug 237236 comment 18</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2303344</commentid>
    <comment_count>8</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-09-05 14:13:29 -0400</bug_when>
    <thetext>Sorry, Shannkha, for the long wait.

I think your patch should go much further than fixing just this one example.

Here&apos;s another test to tackle:

  import org.eclipse.jdt.annotation.*;

  @NonNullByDefault
  public class Test {
	void foo(int i) {
		Integer i2 = i;
		bar(i2);
	}

	static void bar(Integer i) { }
  }

Using your patch I still see 

  bar(i2);
      ^^
  Null type safety: The expression of type Integer needs unchecked conversion to conform to &apos;@NonNull Integer&apos;

This indicates you only fixed the reporting end, but we should really leverage the 
knowledge that boxing is never null *for all of our analysis*.

Without diving very deep let me suggest you use 

  Expression#implicitConversion &amp; BOXING

to recognize the situation we want to improve.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2309064</commentid>
    <comment_count>9</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2013-09-20 01:02:39 -0400</bug_when>
    <thetext>Started working. This had been put off due to Java8 support.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2335672</commentid>
    <comment_count>10</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-11-28 12:56:47 -0500</bug_when>
    <thetext>*** Bug 418236 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2345050</commentid>
    <comment_count>11</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-27 17:14:57 -0500</bug_when>
    <thetext>*** Bug 424702 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2345051</commentid>
    <comment_count>12</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-27 17:15:57 -0500</bug_when>
    <thetext>Shankha, please also see the examples in the duplicates, thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2364637</commentid>
    <comment_count>13</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-02-17 23:24:48 -0500</bug_when>
    <thetext>Will start working on this and the related issues.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2364842</commentid>
    <comment_count>14</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-02-18 09:32:47 -0500</bug_when>
    <thetext>Hi Stephan,
I had a question on 
org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/Expression.java:nullStatus

Would be it be correct to have code like:

if (local != null &amp;&amp; local.type != null &amp;&amp; local.type.isBaseType()) {
		return FlowInfo.NON_NULL;
}

The question is not specific to the bug but in general.


Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2365251</commentid>
    <comment_count>15</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-02-18 22:43:04 -0500</bug_when>
    <thetext>For private discussions with Stephan: 

&quot;While collecting these hints I just notice that we don&apos;t
seem to ever set ASTNode.IsNonNull.&quot;

Had been asked to put the comment long time back in bugzilla. I had missed it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2366394</commentid>
    <comment_count>16</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-20 18:29:57 -0500</bug_when>
    <thetext>(In reply to shankha banerjee from comment #14)
&gt; Hi Stephan,
&gt; I had a question on 
&gt; org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/
&gt; Expression.java:nullStatus
&gt; 
&gt; Would be it be correct to have code like:
&gt; 
&gt; if (local != null &amp;&amp; local.type != null &amp;&amp; local.type.isBaseType()) {
&gt; 		return FlowInfo.NON_NULL;
&gt; }

Hm, normally I would have expected primitive boxing to be recognized via the implicitConversion bit. But maybe you&apos;re right that this little trick will be much easier. Have you tested it?
Caveat: Look closely at isBaseType() - in BETA_JAVA8 we recently introduced an additional isPrimitive() which will save your life :))

&gt; The question is not specific to the bug but in general.

Hm, I answered with respect to this bug. I don&apos;t know what more general discussion you are asking for?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2367226</commentid>
    <comment_count>17</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-22 12:19:29 -0500</bug_when>
    <thetext>Shankha, please take a look at bug 428104.
If it proves to be the same issue, please 
- assign to your name
- mark as duplicate of this bug
- include here the test from the other bug
TIA</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2367423</commentid>
    <comment_count>18</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-02-24 03:14:53 -0500</bug_when>
    <thetext>To me the Bug 428104, looks a duplicate.

I do not have commit privileges so I cannot perform:

- assign to your name
- mark as duplicate of this bug</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2368221</commentid>
    <comment_count>19</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-02-25 09:48:53 -0500</bug_when>
    <thetext>Hi Stephan,

In reply to Stephan Herrmann from comment #16)

&gt; &gt; 
&gt; &gt; if (local != null &amp;&amp; local.type != null &amp;&amp; local.type.isBaseType()) {
&gt; &gt; 		return FlowInfo.NON_NULL;
&gt; &gt; }
&gt; 
&gt; Hm, normally I would have expected primitive boxing to be recognized via the
&gt; implicitConversion bit. But maybe you&apos;re right that this little trick will
&gt; be much easier. Have you tested it?
&gt; Caveat: Look closely at isBaseType() - in BETA_JAVA8 we recently introduced
&gt; an additional isPrimitive() which will save your life :))

This does solve the issue (Comment 8, test407414b in AnnotationDependencyTests.java) without any regressions 
on the master branch.

The code in BETA_JAVA8 looks a lot different. I will port the code on BETA_JAVA8 so that, there are no porting issues and look at the duplicates as suggested.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2368224</commentid>
    <comment_count>20</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-02-25 09:49:53 -0500</bug_when>
    <thetext>Will it be good to work on BETA_JAVA8 branch for all the null annotation issues (even the ones reported on master.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2368246</commentid>
    <comment_count>21</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-25 10:04:22 -0500</bug_when>
    <thetext>(In reply to shankha banerjee from comment #20)
&gt; Will it be good to work on BETA_JAVA8 branch for all the null annotation
&gt; issues (even the ones reported on master.

I think that&apos;s exactly what you should do. Thanks for asking.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2368252</commentid>
    <comment_count>22</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-25 10:08:30 -0500</bug_when>
    <thetext>*** Bug 428104 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2368253</commentid>
    <comment_count>23</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-25 10:09:07 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #22)
&gt; *** Bug 428104 has been marked as a duplicate of this bug. ***

Please don&apos;t forget the test from that bug :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2368675</commentid>
    <comment_count>24</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-02-26 06:10:28 -0500</bug_when>
    <thetext>Hi,
This is w.r.t Bug 418236. I had few queries.

User&apos;s test case:

1)

--- MyClass.java ----

package com.test;

import javax.annotation.ParametersAreNonnullByDefault;

@ParametersAreNonnullByDefault
public class MyClass {
  private static final int CONSTANT = 24;

  public Integer returnConstant() {
    return CONSTANT; // The expression of type &apos;int&apos; needs unchecked conversion to conform to &apos;@Nonnull Integer&apos;
  }

  public Integer returnInteger() {
    return 24;
  }
}

------- Integer.java -----

package java.lang;

import javax.annotation.Nonnull;

public class Integer {

  @Nonnull
  public static Integer valueOf(int integer) {
    return new Integer();
  }
}


===================================================================

Instead of if I have the annotations coming from:

org.eclipse.jdt.annotation

I do not see any errors at all.

---------  My class.java ----------------

package com.test;

import org.eclipse.jdt.annotation.NonNullByDefault;

@NonNullByDefault
public class MyClass {
  private static final int CONSTANT = 24;

  public Integer returnConstant() {
    return CONSTANT; // No Errors.
  }

  public Integer returnInteger() {
    return 24;
  }
}

---------  Integer.java ----------------

package java.lang;

import org.eclipse.jdt.annotation.NonNull;

public class Integer {

  @NonNull
  public static Integer valueOf(int integer) {
    return new Integer();
  }
}

----------------------------------------

Why this difference fr the two annotation packages ?

2)  

@NonNullByDefault (http://help.eclipse.org/juno/index.jsp?topic=%2Forg.eclipse.jdt.doc.user%2Ftasks%2Ftask-using_null_annotations.htm) effects all the types (Parameters)
in method&apos;s signature.

This is similar to 
@ParametersAreNonnullByDefault.

The two functions defined in MyClass.java

returnConstant
returnInteger

neither of them have any parameters ?

What is @ParametersAreNonnullByDefault accomplishing?


------------------------------------------

3) If I have 

MyClass.java
Integer.java

in the same package I get two errors:

return 24;  // Type mismatch: cannot convert from int to Integer
return CONSTANT; //Type mismatch: cannot convert from int to Integer

What is the reason behind reporting both the errors?


Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2369155</commentid>
    <comment_count>25</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-02-27 01:33:03 -0500</bug_when>
    <thetext>All other test cases mentioned in this bug and duplicates (see depends on list) 
can be handled by the change in

FlowContext.java:recordNullityMismatch.

if ((expression.implicitConversion &amp; TypeIds.BOXING) != 0)
		return;

The one problem which still remains as the bug mentiond in Comment 8.

We have to store the information that a primitive type when boxed into one of its wrapper classes can never result in a null value.

Then associate this information with the wrapper type so that when checks
are performed on the wrapper type we can assume it is non null.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2369543</commentid>
    <comment_count>26</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-27 18:59:43 -0500</bug_when>
    <thetext>(In reply to shankha banerjee from comment #24)
&gt; import javax.annotation.ParametersAreNonnullByDefault;
&gt;
&gt; [...]
&gt; 
&gt; import javax.annotation.Nonnull;
&gt;
&gt; [...]
&gt; 
&gt; Instead of if I have the annotations coming from:
&gt; 
&gt; org.eclipse.jdt.annotation
&gt; 
&gt; I do not see any errors at all.
&gt;
&gt; [...]
&gt;
&gt; Why this difference fr the two annotation packages ?

So, did you configure the &quot;javax&quot; annotations to be used instead of our own? Did you explicitly map all three annotations?

If so, our compiler assumes that those annotations are intended to mean exactly the same as the ones provided by us. At this point I only see one potential source for differences: the definition of the annotations, please check specifically their @Target annotation. Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2374105</commentid>
    <comment_count>27</comment_count>
      <attachid>240736</attachid>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-03-10 20:37:50 -0400</bug_when>
    <thetext>Created attachment 240736
WIP: Patch

WIP: Patch.

Stephan,
If you have time could you please glance over the patch. I want to know if I am on the right track. I have handled all the cases as reported in this bug and all related bugs. Test results are good. 

I still have to add few more test cases. .e.g

public class Test {
  class Z {
	int a[];
	Z() {
	  a = new int[0];
	  a[0] = 0;
	}
  }
  class Y {
	Z[] z;
	Y () {
	  z = new Z[0];
	}
  }
  void fooQ(Y y, int i) {
	Integer i2 = y.z[i].a[i]; // Warning reported.
	bar(i2);
  }
  static void bar(Integer i) { }  

Thanks for the help.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2374493</commentid>
    <comment_count>28</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-11 13:01:09 -0400</bug_when>
    <thetext>At first glance looks OK, but I need more time later. For now you can validate by yourself:
- does it fix the problem? you have your tests for this. Be inventive to create variants.
- does it cause regressions? we have the entire suite for this.
- does it require changes in many similar locations? if so, perhaps(!) there could be a more central / clever location to fix it once and for all. Just one location is probably asking too much, but try to keep the number low and convince us, why these changes are complete :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2458334</commentid>
    <comment_count>29</comment_count>
    <who name="Brayden Banks">bb010g</who>
    <bug_when>2014-09-30 21:45:13 -0400</bug_when>
    <thetext>:bump:

This seems to have been forgotten...it would be good to have some sort of improvement working, even if it wasn&apos;t every case.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2458344</commentid>
    <comment_count>30</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-09-30 22:31:40 -0400</bug_when>
    <thetext>I will finish it up.
Will work on it next week.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2501775</commentid>
    <comment_count>31</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-01-04 09:35:27 -0500</bug_when>
    <thetext>Shankha, are you waiting for me to give a full review? Is the patch ready?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2501829</commentid>
    <comment_count>32</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2015-01-05 00:53:21 -0500</bug_when>
    <thetext>Stephan,
I haven&apos;t got a chance to work on this. 

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2501830</commentid>
    <comment_count>33</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2015-01-05 01:02:34 -0500</bug_when>
    <thetext>There are other bugs which have to be worked on. 
Moving to jdt-core-inbox@eclipse.org.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2501831</commentid>
    <comment_count>34</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2015-01-05 01:07:44 -0500</bug_when>
    <thetext>Assigning it back. I will work this and finish it up.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2524531</commentid>
    <comment_count>35</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-02-26 14:12:17 -0500</bug_when>
    <thetext>Shankha, any chance you will finish this soon?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2525352</commentid>
    <comment_count>36</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2015-03-02 01:28:47 -0500</bug_when>
    <thetext>Hi Stephan,
I will not be able to work on this bug during 4.5 M6.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2549587</commentid>
    <comment_count>37</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-04-21 13:43:00 -0400</bug_when>
    <thetext>I can use the tests from comment 27, but for a solution I have an alternative that is both simpler and more complete.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2549604</commentid>
    <comment_count>38</comment_count>
    <who name="Eclipse Genie">genie</who>
    <bug_when>2015-04-21 14:23:32 -0400</bug_when>
    <thetext>New Gerrit change created: https://git.eclipse.org/r/46200</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2549605</commentid>
    <comment_count>39</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-04-21 14:33:40 -0400</bug_when>
    <thetext>(In reply to Eclipse Genie from comment #38)
&gt; New Gerrit change created: https://git.eclipse.org/r/46200

This patch uniformly extends only several overrides of Expression.nullStatus(). The main benefit of this approach: we can systematically check for completeness simply be investigating the hierarchy of this single method. Nothing else is needed to fix this bug.

In addition I collected a few more test cases from related bugs and crafted some whitebox tests specifically for the constructs whose nullStatus() I overrode.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2550866</commentid>
    <comment_count>40</comment_count>
    <who name="Eclipse Genie">genie</who>
    <bug_when>2015-04-23 12:19:39 -0400</bug_when>
    <thetext>Gerrit change https://git.eclipse.org/r/46200 was merged to [master].
Commit: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=e659592a32935b3480e8554de2e33b0870ea4573</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2550867</commentid>
    <comment_count>41</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-04-23 12:20:23 -0400</bug_when>
    <thetext>.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2551084</commentid>
    <comment_count>42</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2015-04-24 02:04:48 -0400</bug_when>
    <thetext>Verified for Eclipse 4.5 Mars M7 Build id: I20150422-1000</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>234273</attachid>
            <date>2013-08-09 15:34:00 -0400</date>
            <delta_ts>2013-08-09 22:30:56 -0400</delta_ts>
            <desc>Patch</desc>
            <filename>patch.patch</filename>
            <type>text/plain</type>
            <size>6958</size>
            <attacher name="shankha banerjee">shankhba</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmJ1aWxkZXIvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2J1aWxkZXIvQW5ub3RhdGlvbkRlcGVuZGVuY3lUZXN0cy5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuYnVpbGRlci9zcmMvb3JnL2VjbGlwc2Uv
amR0L2NvcmUvdGVzdHMvYnVpbGRlci9Bbm5vdGF0aW9uRGVwZW5kZW5jeVRlc3RzLmphdmEKaW5k
ZXggZGMwY2JhZC4uODZlOWI5NSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVz
dHMuYnVpbGRlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvYnVpbGRlci9Bbm5vdGF0
aW9uRGVwZW5kZW5jeVRlc3RzLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMu
YnVpbGRlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvYnVpbGRlci9Bbm5vdGF0aW9u
RGVwZW5kZW5jeVRlc3RzLmphdmEKQEAgLTE1NTcsNCArMTU1NywxNTUgQEAgcHVibGljIGNsYXNz
IEFubm90YXRpb25EZXBlbmRlbmN5VGVzdHMgZXh0ZW5kcyBCdWlsZGVyVGVzdHMgewogCQkvLyB2
ZXJpZnkgdGhhdCBUZXN0MiBvbmx5IHdhcyByZWNvbXBpbGVkCiAJCWV4cGVjdGluZ1VuaXF1ZUNv
bXBpbGVkQ2xhc3NlcyhuZXcgU3RyaW5nW10geyAicDEuVGVzdDIiIH0pOwogCX0KKworCS8vIGh0
dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00MDc0MTQKKwkvLyA0
MDc0MTQgLSBJbmNvcnJlY3Qgd2FybmluZyBvbiBhIHByaW1pdGl2ZSB0eXBlIGJlaW5nIG51bGwu
CisJcHVibGljIHZvaWQgdGVzdDQwNzQxNGEoKSB0aHJvd3MgSmF2YU1vZGVsRXhjZXB0aW9uLCBJ
T0V4Y2VwdGlvbiB7CisJCXNldHVwUHJvamVjdEZvck51bGxBbm5vdGF0aW9ucygpOworCQlTdHJp
bmcgeGNvZGUgPSAicGFja2FnZSBwMTtcbiIgKworCQkJInB1YmxpYyBjbGFzcyBUZXN0IHtcbiIg
KworCQkJIgl2b2lkIGZvbyhpbnQgaSkge1xuIiArCisJCQkiCQliYXIoaSk7XG4iICsKKwkJCSIJ
fVxuIiArCisJCQkiCXN0YXRpYyB2b2lkIGJhcihJbnRlZ2VyIGkpXG4iICsKKwkJCSIJe1xuIiAr
CisJCQkiCQlcbiIgKworCQkJIgl9XG4iICsKKwkJCSJ9IjsKKwkJZW52LmFkZENsYXNzKHRoaXMu
c3JjUm9vdCwgInAxIiwgIlRlc3QiLCB4Y29kZSk7CisJCVN0cmluZyBwY29kZSA9ICJAb3JnLmVj
bGlwc2UuamR0LmFubm90YXRpb24uTm9uTnVsbEJ5RGVmYXVsdCh0cnVlKVxuIiArCisJCQkicGFj
a2FnZSBwMTsiOworCQllbnYuYWRkRmlsZSh0aGlzLnNyY1Jvb3QsICJwMS9wYWNrYWdlLWluZm8u
amF2YSIsIC8vJE5PTi1OTFMtMSQKKwkJCXBjb2RlKTsKKwkJZnVsbEJ1aWxkKCB0aGlzLnByb2pl
Y3RQYXRoICk7CisJCWV4cGVjdGluZ05vUHJvYmxlbXMoKTsKKwl9CisKKwkvLyBodHRwczovL2J1
Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDA3NDE0CisJLy8gNDA3NDE0IC0g
SW5jb3JyZWN0IHdhcm5pbmcgb24gYSBwcmltaXRpdmUgdHlwZSBiZWluZyBudWxsLgorCXB1Ymxp
YyB2b2lkIHRlc3Q0MDc0MTRiKCkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbiwgSU9FeGNlcHRp
b24geworCQlzZXR1cFByb2plY3RGb3JOdWxsQW5ub3RhdGlvbnMoKTsKKwkJU3RyaW5nIHhjb2Rl
ID0gInBhY2thZ2UgcDE7XG4iICsKKwkJCSJwdWJsaWMgY2xhc3MgVGVzdCB7XG4iICsKKwkJCSIJ
dm9pZCBmb28oYm9vbGVhbiBpKSB7XG4iICsKKwkJCSIJCWJhcihpKTtcbiIgKworCQkJIgl9XG4i
ICsKKwkJCSIJc3RhdGljIHZvaWQgYmFyKEJvb2xlYW4gaSlcbiIgKworCQkJIgl7XG4iICsKKwkJ
CSIJCVxuIiArCisJCQkiCX1cbiIgKworCQkJIn0iOworCQllbnYuYWRkQ2xhc3ModGhpcy5zcmNS
b290LCAicDEiLCAiVGVzdCIsIHhjb2RlKTsKKwkJU3RyaW5nIHBjb2RlID0gIkBvcmcuZWNsaXBz
ZS5qZHQuYW5ub3RhdGlvbi5Ob25OdWxsQnlEZWZhdWx0KHRydWUpXG4iICsKKwkJCSJwYWNrYWdl
IHAxOyI7CisJCWVudi5hZGRGaWxlKHRoaXMuc3JjUm9vdCwgInAxL3BhY2thZ2UtaW5mby5qYXZh
IiwgLy8kTk9OLU5MUy0xJAorCQkJcGNvZGUpOworCQlmdWxsQnVpbGQoIHRoaXMucHJvamVjdFBh
dGggKTsKKwkJZXhwZWN0aW5nTm9Qcm9ibGVtcygpOworCX0KKwkvLyA0MDc0MTQgLSBJbmNvcnJl
Y3Qgd2FybmluZyBvbiBhIHByaW1pdGl2ZSB0eXBlIGJlaW5nIG51bGwuCisJcHVibGljIHZvaWQg
dGVzdDQwNzQxNGMoKSB0aHJvd3MgSmF2YU1vZGVsRXhjZXB0aW9uLCBJT0V4Y2VwdGlvbiB7CisJ
CXNldHVwUHJvamVjdEZvck51bGxBbm5vdGF0aW9ucygpOworCQlTdHJpbmcgeGNvZGUgPSAicGFj
a2FnZSBwMTtcbiIgKworCQkJCSJwdWJsaWMgY2xhc3MgVGVzdCB7XG4iICsKKwkJCQkiCXZvaWQg
Zm9vKGJ5dGUgaSkge1xuIiArCisJCQkJIgkJYmFyKGkpO1xuIiArCisJCQkJIgl9XG4iICsKKwkJ
CQkiCXN0YXRpYyB2b2lkIGJhcihCeXRlIGkpXG4iICsKKwkJCQkiCXtcbiIgKworCQkJCSIJCVxu
IiArCisJCQkJIgl9XG4iICsKKwkJCQkifSI7CisJCWVudi5hZGRDbGFzcyh0aGlzLnNyY1Jvb3Qs
ICJwMSIsICJUZXN0IiwgeGNvZGUpOworCQlTdHJpbmcgcGNvZGUgPSAiQG9yZy5lY2xpcHNlLmpk
dC5hbm5vdGF0aW9uLk5vbk51bGxCeURlZmF1bHQodHJ1ZSlcbiIgKworCQkJCSJwYWNrYWdlIHAx
OyI7CisJCWVudi5hZGRGaWxlKHRoaXMuc3JjUm9vdCwgInAxL3BhY2thZ2UtaW5mby5qYXZhIiwg
Ly8kTk9OLU5MUy0xJAorCQkJCXBjb2RlKTsKKwkJZnVsbEJ1aWxkKCB0aGlzLnByb2plY3RQYXRo
ICk7CisJCWV4cGVjdGluZ05vUHJvYmxlbXMoKTsKKwl9CisJLy8gNDA3NDE0IC0gSW5jb3JyZWN0
IHdhcm5pbmcgb24gYSBwcmltaXRpdmUgdHlwZSBiZWluZyBudWxsLgorCXB1YmxpYyB2b2lkIHRl
c3Q0MDc0MTRkKCkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbiwgSU9FeGNlcHRpb24geworCQlz
ZXR1cFByb2plY3RGb3JOdWxsQW5ub3RhdGlvbnMoKTsKKwkJU3RyaW5nIHhjb2RlID0gInBhY2th
Z2UgcDE7XG4iICsKKwkJCQkicHVibGljIGNsYXNzIFRlc3Qge1xuIiArCisJCQkJIgl2b2lkIGZv
byhmbG9hdCBpKSB7XG4iICsKKwkJCQkiCQliYXIoaSk7XG4iICsKKwkJCQkiCX1cbiIgKworCQkJ
CSIJc3RhdGljIHZvaWQgYmFyKEZsb2F0IGkpXG4iICsKKwkJCQkiCXtcbiIgKworCQkJCSIJCVxu
IiArCisJCQkJIgl9XG4iICsKKwkJCQkifSI7CisJCWVudi5hZGRDbGFzcyh0aGlzLnNyY1Jvb3Qs
ICJwMSIsICJUZXN0IiwgeGNvZGUpOworCQlTdHJpbmcgcGNvZGUgPSAiQG9yZy5lY2xpcHNlLmpk
dC5hbm5vdGF0aW9uLk5vbk51bGxCeURlZmF1bHQodHJ1ZSlcbiIgKworCQkJCSJwYWNrYWdlIHAx
OyI7CisJCWVudi5hZGRGaWxlKHRoaXMuc3JjUm9vdCwgInAxL3BhY2thZ2UtaW5mby5qYXZhIiwg
Ly8kTk9OLU5MUy0xJAorCQkJCXBjb2RlKTsKKwkJZnVsbEJ1aWxkKCB0aGlzLnByb2plY3RQYXRo
ICk7CisJCWV4cGVjdGluZ05vUHJvYmxlbXMoKTsKKwl9CisJLy8gNDA3NDE0IC0gSW5jb3JyZWN0
IHdhcm5pbmcgb24gYSBwcmltaXRpdmUgdHlwZSBiZWluZyBudWxsLgorCXB1YmxpYyB2b2lkIHRl
c3Q0MDc0MTRlKCkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbiwgSU9FeGNlcHRpb24geworCQlz
ZXR1cFByb2plY3RGb3JOdWxsQW5ub3RhdGlvbnMoKTsKKwkJU3RyaW5nIHhjb2RlID0gInBhY2th
Z2UgcDE7XG4iICsKKwkJCQkicHVibGljIGNsYXNzIFRlc3Qge1xuIiArCisJCQkJIgl2b2lkIGZv
byhsb25nIGkpIHtcbiIgKworCQkJCSIJCWJhcihpKTtcbiIgKworCQkJCSIJfVxuIiArCisJCQkJ
IglzdGF0aWMgdm9pZCBiYXIoTG9uZyBpKVxuIiArCisJCQkJIgl7XG4iICsKKwkJCQkiCQlcbiIg
KworCQkJCSIJfVxuIiArCisJCQkJIn0iOworCQllbnYuYWRkQ2xhc3ModGhpcy5zcmNSb290LCAi
cDEiLCAiVGVzdCIsIHhjb2RlKTsKKwkJU3RyaW5nIHBjb2RlID0gIkBvcmcuZWNsaXBzZS5qZHQu
YW5ub3RhdGlvbi5Ob25OdWxsQnlEZWZhdWx0KHRydWUpXG4iICsKKwkJCQkicGFja2FnZSBwMTsi
OworCQllbnYuYWRkRmlsZSh0aGlzLnNyY1Jvb3QsICJwMS9wYWNrYWdlLWluZm8uamF2YSIsIC8v
JE5PTi1OTFMtMSQKKwkJCQlwY29kZSk7CisJCWZ1bGxCdWlsZCggdGhpcy5wcm9qZWN0UGF0aCAp
OworCQlleHBlY3RpbmdOb1Byb2JsZW1zKCk7CisJfQorCS8vIDQwNzQxNCAtIEluY29ycmVjdCB3
YXJuaW5nIG9uIGEgcHJpbWl0aXZlIHR5cGUgYmVpbmcgbnVsbC4KKwlwdWJsaWMgdm9pZCB0ZXN0
NDA3NDE0ZigpIHRocm93cyBKYXZhTW9kZWxFeGNlcHRpb24sIElPRXhjZXB0aW9uIHsKKwkJc2V0
dXBQcm9qZWN0Rm9yTnVsbEFubm90YXRpb25zKCk7CisJCVN0cmluZyB4Y29kZSA9ICJwYWNrYWdl
IHAxO1xuIiArCisJCQkJInB1YmxpYyBjbGFzcyBUZXN0IHtcbiIgKworCQkJCSIJdm9pZCBmb28o
Y2hhciBpKSB7XG4iICsKKwkJCQkiCQliYXIoaSk7XG4iICsKKwkJCQkiCX1cbiIgKworCQkJCSIJ
c3RhdGljIHZvaWQgYmFyKENoYXJhY3RlciBpKVxuIiArCisJCQkJIgl7XG4iICsKKwkJCQkiCQlc
biIgKworCQkJCSIJfVxuIiArCisJCQkJIn0iOworCQllbnYuYWRkQ2xhc3ModGhpcy5zcmNSb290
LCAicDEiLCAiVGVzdCIsIHhjb2RlKTsKKwkJU3RyaW5nIHBjb2RlID0gIkBvcmcuZWNsaXBzZS5q
ZHQuYW5ub3RhdGlvbi5Ob25OdWxsQnlEZWZhdWx0KHRydWUpXG4iICsKKwkJCQkicGFja2FnZSBw
MTsiOworCQllbnYuYWRkRmlsZSh0aGlzLnNyY1Jvb3QsICJwMS9wYWNrYWdlLWluZm8uamF2YSIs
IC8vJE5PTi1OTFMtMSQKKwkJCQlwY29kZSk7CisJCWZ1bGxCdWlsZCggdGhpcy5wcm9qZWN0UGF0
aCApOworCQlleHBlY3RpbmdOb1Byb2JsZW1zKCk7CisJfQorCS8vIDQwNzQxNCAtIEluY29ycmVj
dCB3YXJuaW5nIG9uIGEgcHJpbWl0aXZlIHR5cGUgYmVpbmcgbnVsbC4KKwlwdWJsaWMgdm9pZCB0
ZXN0NDA3NDE0ZygpIHRocm93cyBKYXZhTW9kZWxFeGNlcHRpb24sIElPRXhjZXB0aW9uIHsKKwkJ
c2V0dXBQcm9qZWN0Rm9yTnVsbEFubm90YXRpb25zKCk7CisJCVN0cmluZyB4Y29kZSA9ICJwYWNr
YWdlIHAxO1xuIiArCisJCQkJInB1YmxpYyBjbGFzcyBUZXN0IHtcbiIgKworCQkJCSIJdm9pZCBm
b28oc2hvcnQgaSkge1xuIiArCisJCQkJIgkJYmFyKGkpO1xuIiArCisJCQkJIgl9XG4iICsKKwkJ
CQkiCXN0YXRpYyB2b2lkIGJhcihTaG9ydCBpKVxuIiArCisJCQkJIgl7XG4iICsKKwkJCQkiCQlc
biIgKworCQkJCSIJfVxuIiArCisJCQkJIn0iOworCQllbnYuYWRkQ2xhc3ModGhpcy5zcmNSb290
LCAicDEiLCAiVGVzdCIsIHhjb2RlKTsKKwkJU3RyaW5nIHBjb2RlID0gIkBvcmcuZWNsaXBzZS5q
ZHQuYW5ub3RhdGlvbi5Ob25OdWxsQnlEZWZhdWx0KHRydWUpXG4iICsKKwkJCQkicGFja2FnZSBw
MTsiOworCQllbnYuYWRkRmlsZSh0aGlzLnNyY1Jvb3QsICJwMS9wYWNrYWdlLWluZm8uamF2YSIs
IC8vJE5PTi1OTFMtMSQKKwkJCQlwY29kZSk7CisJCWZ1bGxCdWlsZCggdGhpcy5wcm9qZWN0UGF0
aCApOworCQlleHBlY3RpbmdOb1Byb2JsZW1zKCk7CisJfQogfQpkaWZmIC0tZ2l0IGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2Zsb3cvRmxvd0NvbnRleHQuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9mbG93L0Zsb3dDb250ZXh0LmphdmEKaW5k
ZXggNWFlMmI4Yi4uMjkwNTVkYyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Zsb3cvRmxvd0NvbnRleHQu
amF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvZmxvdy9GbG93Q29udGV4dC5qYXZhCkBAIC05OTMsNiArOTkzLDE3
IEBAIHB1YmxpYyB2b2lkIHJlY29yZE51bGxpdHlNaXNtYXRjaChCbG9ja1Njb3BlIGN1cnJlbnRT
Y29wZSwgRXhwcmVzc2lvbiBleHByZXNzaW9uCiAJCQljdXJyZW50Q29udGV4dCA9IGN1cnJlbnRD
b250ZXh0LnBhcmVudDsKIAkJfQogCX0KKwlpbnQgcHR5cGVpZCA9IHByb3ZpZGVkVHlwZS5pZDsK
KwlpbnQgZXR5cGVpZCA9IGV4cGVjdGVkVHlwZS5pZDsKKwlpZiAoKHB0eXBlaWQgPT0gVHlwZUlk
cy5UX2ludCAmJiBldHlwZWlkID09IFR5cGVJZHMuVF9KYXZhTGFuZ0ludGVnZXIpCisJCXx8IChw
dHlwZWlkID09IFR5cGVJZHMuVF9ib29sZWFuICYmIGV0eXBlaWQgPT0gVHlwZUlkcy5UX0phdmFM
YW5nQm9vbGVhbikKKwkJfHwgKHB0eXBlaWQgPT0gVHlwZUlkcy5UX2J5dGUgJiYgZXR5cGVpZCA9
PSBUeXBlSWRzLlRfSmF2YUxhbmdCeXRlKQorCQl8fCAocHR5cGVpZCA9PSBUeXBlSWRzLlRfY2hh
ciAmJiBldHlwZWlkID09IFR5cGVJZHMuVF9KYXZhTGFuZ0NoYXJhY3RlcikKKwkJfHwgKHB0eXBl
aWQgPT0gVHlwZUlkcy5UX2Zsb2F0ICYmIGV0eXBlaWQgPT0gVHlwZUlkcy5UX0phdmFMYW5nRmxv
YXQpCisJCXx8IChwdHlwZWlkID09IFR5cGVJZHMuVF9sb25nICYmIGV0eXBlaWQgPT0gVHlwZUlk
cy5UX0phdmFMYW5nTG9uZykKKwkJfHwgKHB0eXBlaWQgPT0gVHlwZUlkcy5UX3Nob3J0ICYmIGV0
eXBlaWQgPT0gVHlwZUlkcy5UX0phdmFMYW5nU2hvcnQpKQorCQlyZXR1cm47CisKIAkvLyBubyBy
ZWFzb24gdG8gZGVmZXIsIHNvIHJlcG9ydCBub3c6CiAJY2hhcltdW10gYW5ub3RhdGlvbk5hbWUg
PSBjdXJyZW50U2NvcGUuZW52aXJvbm1lbnQoKS5nZXROb25OdWxsQW5ub3RhdGlvbk5hbWUoKTsK
IAljdXJyZW50U2NvcGUucHJvYmxlbVJlcG9ydGVyKCkubnVsbGl0eU1pc21hdGNoKGV4cHJlc3Np
b24sIHByb3ZpZGVkVHlwZSwgZXhwZWN0ZWRUeXBlLCBudWxsU3RhdHVzLCBhbm5vdGF0aW9uTmFt
ZSk7Cg==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>234277</attachid>
            <date>2013-08-09 22:30:00 -0400</date>
            <delta_ts>2013-08-11 20:12:42 -0400</delta_ts>
            <desc>Patch</desc>
            <filename>patch.patch</filename>
            <type>text/plain</type>
            <size>7674</size>
            <attacher name="shankha banerjee">shankhba</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmJ1aWxkZXIvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2J1aWxkZXIvQW5ub3RhdGlvbkRlcGVuZGVuY3lUZXN0cy5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuYnVpbGRlci9zcmMvb3JnL2VjbGlwc2Uv
amR0L2NvcmUvdGVzdHMvYnVpbGRlci9Bbm5vdGF0aW9uRGVwZW5kZW5jeVRlc3RzLmphdmEKaW5k
ZXggZGMwY2JhZC4uMzRhZWU5YSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVz
dHMuYnVpbGRlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvYnVpbGRlci9Bbm5vdGF0
aW9uRGVwZW5kZW5jeVRlc3RzLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMu
YnVpbGRlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvYnVpbGRlci9Bbm5vdGF0aW9u
RGVwZW5kZW5jeVRlc3RzLmphdmEKQEAgLTEsNSArMSw1IEBACiAvKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKgotICogQ29weXJpZ2h0IChjKSAyMDA5LCAyMDEyIFdhbHRlciBIYXJsZXkgYW5kIG90aGVy
cy4KKyAqIENvcHlyaWdodCAoYykgMjAwOSwgMjAxMyBXYWx0ZXIgSGFybGV5IGFuZCBvdGhlcnMu
CiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlp
bmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRo
ZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMg
ZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC0xNTU3LDQgKzE1NTcsMTY1IEBA
IHB1YmxpYyBjbGFzcyBBbm5vdGF0aW9uRGVwZW5kZW5jeVRlc3RzIGV4dGVuZHMgQnVpbGRlclRl
c3RzIHsKIAkJLy8gdmVyaWZ5IHRoYXQgVGVzdDIgb25seSB3YXMgcmVjb21waWxlZAogCQlleHBl
Y3RpbmdVbmlxdWVDb21waWxlZENsYXNzZXMobmV3IFN0cmluZ1tdIHsgInAxLlRlc3QyIiB9KTsK
IAl9CisKKwkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9
NDA3NDE0CisJLy8gNDA3NDE0IC0gSW5jb3JyZWN0IHdhcm5pbmcgb24gYSBwcmltaXRpdmUgdHlw
ZSBiZWluZyBudWxsLgorCXB1YmxpYyB2b2lkIHRlc3Q0MDc0MTRhKCkgdGhyb3dzIEphdmFNb2Rl
bEV4Y2VwdGlvbiwgSU9FeGNlcHRpb24geworCQlzZXR1cFByb2plY3RGb3JOdWxsQW5ub3RhdGlv
bnMoKTsKKwkJU3RyaW5nIHhjb2RlID0gInBhY2thZ2UgcDE7XG4iICsKKwkJCSJwdWJsaWMgY2xh
c3MgVGVzdCB7XG4iICsKKwkJCSIJdm9pZCBmb28oaW50IGkpIHtcbiIgKworCQkJIgkJYmFyKGkp
O1xuIiArCisJCQkiCX1cbiIgKworCQkJIglzdGF0aWMgdm9pZCBiYXIoSW50ZWdlciBpKVxuIiAr
CisJCQkiCXtcbiIgKworCQkJIgkJXG4iICsKKwkJCSIJfVxuIiArCisJCQkifSI7CisJCWVudi5h
ZGRDbGFzcyh0aGlzLnNyY1Jvb3QsICJwMSIsICJUZXN0IiwgeGNvZGUpOworCQlTdHJpbmcgcGNv
ZGUgPSAiQG9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uLk5vbk51bGxCeURlZmF1bHQodHJ1ZSlc
biIgKworCQkJInBhY2thZ2UgcDE7IjsKKwkJZW52LmFkZEZpbGUodGhpcy5zcmNSb290LCAicDEv
cGFja2FnZS1pbmZvLmphdmEiLCAvLyROT04tTkxTLTEkCisJCQlwY29kZSk7CisJCWZ1bGxCdWls
ZCggdGhpcy5wcm9qZWN0UGF0aCApOworCQlleHBlY3RpbmdOb1Byb2JsZW1zKCk7CisJfQorCisJ
Ly8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQwNzQxNAor
CS8vIDQwNzQxNCAtIEluY29ycmVjdCB3YXJuaW5nIG9uIGEgcHJpbWl0aXZlIHR5cGUgYmVpbmcg
bnVsbC4KKwlwdWJsaWMgdm9pZCB0ZXN0NDA3NDE0YigpIHRocm93cyBKYXZhTW9kZWxFeGNlcHRp
b24sIElPRXhjZXB0aW9uIHsKKwkJc2V0dXBQcm9qZWN0Rm9yTnVsbEFubm90YXRpb25zKCk7CisJ
CVN0cmluZyB4Y29kZSA9ICJwYWNrYWdlIHAxO1xuIiArCisJCQkicHVibGljIGNsYXNzIFRlc3Qg
e1xuIiArCisJCQkiCXZvaWQgZm9vKGJvb2xlYW4gaSkge1xuIiArCisJCQkiCQliYXIoaSk7XG4i
ICsKKwkJCSIJfVxuIiArCisJCQkiCXN0YXRpYyB2b2lkIGJhcihCb29sZWFuIGkpXG4iICsKKwkJ
CSIJe1xuIiArCisJCQkiCQlcbiIgKworCQkJIgl9XG4iICsKKwkJCSJ9IjsKKwkJZW52LmFkZENs
YXNzKHRoaXMuc3JjUm9vdCwgInAxIiwgIlRlc3QiLCB4Y29kZSk7CisJCVN0cmluZyBwY29kZSA9
ICJAb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTm9uTnVsbEJ5RGVmYXVsdCh0cnVlKVxuIiAr
CisJCQkicGFja2FnZSBwMTsiOworCQllbnYuYWRkRmlsZSh0aGlzLnNyY1Jvb3QsICJwMS9wYWNr
YWdlLWluZm8uamF2YSIsIC8vJE5PTi1OTFMtMSQKKwkJCXBjb2RlKTsKKwkJZnVsbEJ1aWxkKCB0
aGlzLnByb2plY3RQYXRoICk7CisJCWV4cGVjdGluZ05vUHJvYmxlbXMoKTsKKwl9CisKKwkvLyBo
dHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDA3NDE0CisJLy8g
NDA3NDE0IC0gSW5jb3JyZWN0IHdhcm5pbmcgb24gYSBwcmltaXRpdmUgdHlwZSBiZWluZyBudWxs
LgorCXB1YmxpYyB2b2lkIHRlc3Q0MDc0MTRjKCkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbiwg
SU9FeGNlcHRpb24geworCQlzZXR1cFByb2plY3RGb3JOdWxsQW5ub3RhdGlvbnMoKTsKKwkJU3Ry
aW5nIHhjb2RlID0gInBhY2thZ2UgcDE7XG4iICsKKwkJCQkicHVibGljIGNsYXNzIFRlc3Qge1xu
IiArCisJCQkJIgl2b2lkIGZvbyhieXRlIGkpIHtcbiIgKworCQkJCSIJCWJhcihpKTtcbiIgKwor
CQkJCSIJfVxuIiArCisJCQkJIglzdGF0aWMgdm9pZCBiYXIoQnl0ZSBpKVxuIiArCisJCQkJIgl7
XG4iICsKKwkJCQkiCQlcbiIgKworCQkJCSIJfVxuIiArCisJCQkJIn0iOworCQllbnYuYWRkQ2xh
c3ModGhpcy5zcmNSb290LCAicDEiLCAiVGVzdCIsIHhjb2RlKTsKKwkJU3RyaW5nIHBjb2RlID0g
IkBvcmcuZWNsaXBzZS5qZHQuYW5ub3RhdGlvbi5Ob25OdWxsQnlEZWZhdWx0KHRydWUpXG4iICsK
KwkJCQkicGFja2FnZSBwMTsiOworCQllbnYuYWRkRmlsZSh0aGlzLnNyY1Jvb3QsICJwMS9wYWNr
YWdlLWluZm8uamF2YSIsIC8vJE5PTi1OTFMtMSQKKwkJCQlwY29kZSk7CisJCWZ1bGxCdWlsZCgg
dGhpcy5wcm9qZWN0UGF0aCApOworCQlleHBlY3RpbmdOb1Byb2JsZW1zKCk7CisJfQorCisJLy8g
aHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQwNzQxNAorCS8v
IDQwNzQxNCAtIEluY29ycmVjdCB3YXJuaW5nIG9uIGEgcHJpbWl0aXZlIHR5cGUgYmVpbmcgbnVs
bC4KKwlwdWJsaWMgdm9pZCB0ZXN0NDA3NDE0ZCgpIHRocm93cyBKYXZhTW9kZWxFeGNlcHRpb24s
IElPRXhjZXB0aW9uIHsKKwkJc2V0dXBQcm9qZWN0Rm9yTnVsbEFubm90YXRpb25zKCk7CisJCVN0
cmluZyB4Y29kZSA9ICJwYWNrYWdlIHAxO1xuIiArCisJCQkJInB1YmxpYyBjbGFzcyBUZXN0IHtc
biIgKworCQkJCSIJdm9pZCBmb28oZmxvYXQgaSkge1xuIiArCisJCQkJIgkJYmFyKGkpO1xuIiAr
CisJCQkJIgl9XG4iICsKKwkJCQkiCXN0YXRpYyB2b2lkIGJhcihGbG9hdCBpKVxuIiArCisJCQkJ
Igl7XG4iICsKKwkJCQkiCQlcbiIgKworCQkJCSIJfVxuIiArCisJCQkJIn0iOworCQllbnYuYWRk
Q2xhc3ModGhpcy5zcmNSb290LCAicDEiLCAiVGVzdCIsIHhjb2RlKTsKKwkJU3RyaW5nIHBjb2Rl
ID0gIkBvcmcuZWNsaXBzZS5qZHQuYW5ub3RhdGlvbi5Ob25OdWxsQnlEZWZhdWx0KHRydWUpXG4i
ICsKKwkJCQkicGFja2FnZSBwMTsiOworCQllbnYuYWRkRmlsZSh0aGlzLnNyY1Jvb3QsICJwMS9w
YWNrYWdlLWluZm8uamF2YSIsIC8vJE5PTi1OTFMtMSQKKwkJCQlwY29kZSk7CisJCWZ1bGxCdWls
ZCggdGhpcy5wcm9qZWN0UGF0aCApOworCQlleHBlY3RpbmdOb1Byb2JsZW1zKCk7CisJfQorCisJ
Ly8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQwNzQxNAor
CS8vIDQwNzQxNCAtIEluY29ycmVjdCB3YXJuaW5nIG9uIGEgcHJpbWl0aXZlIHR5cGUgYmVpbmcg
bnVsbC4KKwlwdWJsaWMgdm9pZCB0ZXN0NDA3NDE0ZSgpIHRocm93cyBKYXZhTW9kZWxFeGNlcHRp
b24sIElPRXhjZXB0aW9uIHsKKwkJc2V0dXBQcm9qZWN0Rm9yTnVsbEFubm90YXRpb25zKCk7CisJ
CVN0cmluZyB4Y29kZSA9ICJwYWNrYWdlIHAxO1xuIiArCisJCQkJInB1YmxpYyBjbGFzcyBUZXN0
IHtcbiIgKworCQkJCSIJdm9pZCBmb28obG9uZyBpKSB7XG4iICsKKwkJCQkiCQliYXIoaSk7XG4i
ICsKKwkJCQkiCX1cbiIgKworCQkJCSIJc3RhdGljIHZvaWQgYmFyKExvbmcgaSlcbiIgKworCQkJ
CSIJe1xuIiArCisJCQkJIgkJXG4iICsKKwkJCQkiCX1cbiIgKworCQkJCSJ9IjsKKwkJZW52LmFk
ZENsYXNzKHRoaXMuc3JjUm9vdCwgInAxIiwgIlRlc3QiLCB4Y29kZSk7CisJCVN0cmluZyBwY29k
ZSA9ICJAb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTm9uTnVsbEJ5RGVmYXVsdCh0cnVlKVxu
IiArCisJCQkJInBhY2thZ2UgcDE7IjsKKwkJZW52LmFkZEZpbGUodGhpcy5zcmNSb290LCAicDEv
cGFja2FnZS1pbmZvLmphdmEiLCAvLyROT04tTkxTLTEkCisJCQkJcGNvZGUpOworCQlmdWxsQnVp
bGQoIHRoaXMucHJvamVjdFBhdGggKTsKKwkJZXhwZWN0aW5nTm9Qcm9ibGVtcygpOworCX0KKwor
CS8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00MDc0MTQK
KwkvLyA0MDc0MTQgLSBJbmNvcnJlY3Qgd2FybmluZyBvbiBhIHByaW1pdGl2ZSB0eXBlIGJlaW5n
IG51bGwuCisJcHVibGljIHZvaWQgdGVzdDQwNzQxNGYoKSB0aHJvd3MgSmF2YU1vZGVsRXhjZXB0
aW9uLCBJT0V4Y2VwdGlvbiB7CisJCXNldHVwUHJvamVjdEZvck51bGxBbm5vdGF0aW9ucygpOwor
CQlTdHJpbmcgeGNvZGUgPSAicGFja2FnZSBwMTtcbiIgKworCQkJCSJwdWJsaWMgY2xhc3MgVGVz
dCB7XG4iICsKKwkJCQkiCXZvaWQgZm9vKGNoYXIgaSkge1xuIiArCisJCQkJIgkJYmFyKGkpO1xu
IiArCisJCQkJIgl9XG4iICsKKwkJCQkiCXN0YXRpYyB2b2lkIGJhcihDaGFyYWN0ZXIgaSlcbiIg
KworCQkJCSIJe1xuIiArCisJCQkJIgkJXG4iICsKKwkJCQkiCX1cbiIgKworCQkJCSJ9IjsKKwkJ
ZW52LmFkZENsYXNzKHRoaXMuc3JjUm9vdCwgInAxIiwgIlRlc3QiLCB4Y29kZSk7CisJCVN0cmlu
ZyBwY29kZSA9ICJAb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTm9uTnVsbEJ5RGVmYXVsdCh0
cnVlKVxuIiArCisJCQkJInBhY2thZ2UgcDE7IjsKKwkJZW52LmFkZEZpbGUodGhpcy5zcmNSb290
LCAicDEvcGFja2FnZS1pbmZvLmphdmEiLCAvLyROT04tTkxTLTEkCisJCQkJcGNvZGUpOworCQlm
dWxsQnVpbGQoIHRoaXMucHJvamVjdFBhdGggKTsKKwkJZXhwZWN0aW5nTm9Qcm9ibGVtcygpOwor
CX0KKworCS8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00
MDc0MTQKKwkvLyA0MDc0MTQgLSBJbmNvcnJlY3Qgd2FybmluZyBvbiBhIHByaW1pdGl2ZSB0eXBl
IGJlaW5nIG51bGwuCisJcHVibGljIHZvaWQgdGVzdDQwNzQxNGcoKSB0aHJvd3MgSmF2YU1vZGVs
RXhjZXB0aW9uLCBJT0V4Y2VwdGlvbiB7CisJCXNldHVwUHJvamVjdEZvck51bGxBbm5vdGF0aW9u
cygpOworCQlTdHJpbmcgeGNvZGUgPSAicGFja2FnZSBwMTtcbiIgKworCQkJCSJwdWJsaWMgY2xh
c3MgVGVzdCB7XG4iICsKKwkJCQkiCXZvaWQgZm9vKHNob3J0IGkpIHtcbiIgKworCQkJCSIJCWJh
cihpKTtcbiIgKworCQkJCSIJfVxuIiArCisJCQkJIglzdGF0aWMgdm9pZCBiYXIoU2hvcnQgaSlc
biIgKworCQkJCSIJe1xuIiArCisJCQkJIgkJXG4iICsKKwkJCQkiCX1cbiIgKworCQkJCSJ9IjsK
KwkJZW52LmFkZENsYXNzKHRoaXMuc3JjUm9vdCwgInAxIiwgIlRlc3QiLCB4Y29kZSk7CisJCVN0
cmluZyBwY29kZSA9ICJAb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTm9uTnVsbEJ5RGVmYXVs
dCh0cnVlKVxuIiArCisJCQkJInBhY2thZ2UgcDE7IjsKKwkJZW52LmFkZEZpbGUodGhpcy5zcmNS
b290LCAicDEvcGFja2FnZS1pbmZvLmphdmEiLCAvLyROT04tTkxTLTEkCisJCQkJcGNvZGUpOwor
CQlmdWxsQnVpbGQoIHRoaXMucHJvamVjdFBhdGggKTsKKwkJZXhwZWN0aW5nTm9Qcm9ibGVtcygp
OworCX0KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9mbG93L0Zsb3dDb250ZXh0LmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvZmxvdy9GbG93Q29udGV4dC5qYXZhCmluZGV4IDVhZTJiOGIuLmVmY2YzZjMgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9mbG93L0Zsb3dDb250ZXh0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Zsb3cvRmxvd0Nv
bnRleHQuamF2YQpAQCAtOTkzLDYgKzk5MywxNyBAQCBwdWJsaWMgdm9pZCByZWNvcmROdWxsaXR5
TWlzbWF0Y2goQmxvY2tTY29wZSBjdXJyZW50U2NvcGUsIEV4cHJlc3Npb24gZXhwcmVzc2lvbgog
CQkJY3VycmVudENvbnRleHQgPSBjdXJyZW50Q29udGV4dC5wYXJlbnQ7CiAJCX0KIAl9CisJaW50
IHB0eXBlaWQgPSBwcm92aWRlZFR5cGUuaWQ7CisJaW50IGV0eXBlaWQgPSBleHBlY3RlZFR5cGUu
aWQ7CisJaWYgKChwdHlwZWlkID09IFR5cGVJZHMuVF9pbnQgJiYgZXR5cGVpZCA9PSBUeXBlSWRz
LlRfSmF2YUxhbmdJbnRlZ2VyKQorCQl8fCAocHR5cGVpZCA9PSBUeXBlSWRzLlRfYm9vbGVhbiAm
JiBldHlwZWlkID09IFR5cGVJZHMuVF9KYXZhTGFuZ0Jvb2xlYW4pCisJCXx8IChwdHlwZWlkID09
IFR5cGVJZHMuVF9ieXRlICYmIGV0eXBlaWQgPT0gVHlwZUlkcy5UX0phdmFMYW5nQnl0ZSkKKwkJ
fHwgKHB0eXBlaWQgPT0gVHlwZUlkcy5UX2NoYXIgJiYgZXR5cGVpZCA9PSBUeXBlSWRzLlRfSmF2
YUxhbmdDaGFyYWN0ZXIpCisJCXx8IChwdHlwZWlkID09IFR5cGVJZHMuVF9mbG9hdCAmJiBldHlw
ZWlkID09IFR5cGVJZHMuVF9KYXZhTGFuZ0Zsb2F0KQorCQl8fCAocHR5cGVpZCA9PSBUeXBlSWRz
LlRfbG9uZyAmJiBldHlwZWlkID09IFR5cGVJZHMuVF9KYXZhTGFuZ0xvbmcpCisJCXx8IChwdHlw
ZWlkID09IFR5cGVJZHMuVF9zaG9ydCAmJiBldHlwZWlkID09IFR5cGVJZHMuVF9KYXZhTGFuZ1No
b3J0KSkgeworCQlyZXR1cm47CisJfQogCS8vIG5vIHJlYXNvbiB0byBkZWZlciwgc28gcmVwb3J0
IG5vdzoKIAljaGFyW11bXSBhbm5vdGF0aW9uTmFtZSA9IGN1cnJlbnRTY29wZS5lbnZpcm9ubWVu
dCgpLmdldE5vbk51bGxBbm5vdGF0aW9uTmFtZSgpOwogCWN1cnJlbnRTY29wZS5wcm9ibGVtUmVw
b3J0ZXIoKS5udWxsaXR5TWlzbWF0Y2goZXhwcmVzc2lvbiwgcHJvdmlkZWRUeXBlLCBleHBlY3Rl
ZFR5cGUsIG51bGxTdGF0dXMsIGFubm90YXRpb25OYW1lKTsK
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>234288</attachid>
            <date>2013-08-11 20:12:00 -0400</date>
            <delta_ts>2014-03-10 20:37:50 -0400</delta_ts>
            <desc>Patch</desc>
            <filename>patch.patch</filename>
            <type>text/plain</type>
            <size>7619</size>
            <attacher name="shankha banerjee">shankhba</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmJ1aWxkZXIvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2J1aWxkZXIvQW5ub3RhdGlvbkRlcGVuZGVuY3lUZXN0cy5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuYnVpbGRlci9zcmMvb3JnL2VjbGlwc2Uv
amR0L2NvcmUvdGVzdHMvYnVpbGRlci9Bbm5vdGF0aW9uRGVwZW5kZW5jeVRlc3RzLmphdmEKaW5k
ZXggZGMwY2JhZC4uY2JiZTEwYyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVz
dHMuYnVpbGRlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvYnVpbGRlci9Bbm5vdGF0
aW9uRGVwZW5kZW5jeVRlc3RzLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMu
YnVpbGRlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvYnVpbGRlci9Bbm5vdGF0aW9u
RGVwZW5kZW5jeVRlc3RzLmphdmEKQEAgLTEsNSArMSw1IEBACiAvKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKgotICogQ29weXJpZ2h0IChjKSAyMDA5LCAyMDEyIFdhbHRlciBIYXJsZXkgYW5kIG90aGVy
cy4KKyAqIENvcHlyaWdodCAoYykgMjAwOSwgMjAxMyBXYWx0ZXIgSGFybGV5IGFuZCBvdGhlcnMu
CiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlp
bmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRo
ZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMg
ZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC0xNTU3LDQgKzE1NTcsMTY1IEBA
IHB1YmxpYyBjbGFzcyBBbm5vdGF0aW9uRGVwZW5kZW5jeVRlc3RzIGV4dGVuZHMgQnVpbGRlclRl
c3RzIHsKIAkJLy8gdmVyaWZ5IHRoYXQgVGVzdDIgb25seSB3YXMgcmVjb21waWxlZAogCQlleHBl
Y3RpbmdVbmlxdWVDb21waWxlZENsYXNzZXMobmV3IFN0cmluZ1tdIHsgInAxLlRlc3QyIiB9KTsK
IAl9CisKKwkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9
NDA3NDE0CisJLy8gNDA3NDE0IC0gSW5jb3JyZWN0IHdhcm5pbmcgb24gYSBwcmltaXRpdmUgdHlw
ZSBiZWluZyBudWxsLgorCXB1YmxpYyB2b2lkIHRlc3Q0MDc0MTRhKCkgdGhyb3dzIEphdmFNb2Rl
bEV4Y2VwdGlvbiwgSU9FeGNlcHRpb24geworCQlzZXR1cFByb2plY3RGb3JOdWxsQW5ub3RhdGlv
bnMoKTsKKwkJU3RyaW5nIHhjb2RlID0gInBhY2thZ2UgcDE7XG4iICsKKwkJCSJwdWJsaWMgY2xh
c3MgVGVzdCB7XG4iICsKKwkJCSIJdm9pZCBmb28oaW50IGkpIHtcbiIgKworCQkJIgkJYmFyKGkp
O1xuIiArCisJCQkiCX1cbiIgKworCQkJIglzdGF0aWMgdm9pZCBiYXIoSW50ZWdlciBpKVxuIiAr
CisJCQkiCXtcbiIgKworCQkJIgkJXG4iICsKKwkJCSIJfVxuIiArCisJCQkifSI7CisJCWVudi5h
ZGRDbGFzcyh0aGlzLnNyY1Jvb3QsICJwMSIsICJUZXN0IiwgeGNvZGUpOworCQlTdHJpbmcgcGNv
ZGUgPSAiQG9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uLk5vbk51bGxCeURlZmF1bHQodHJ1ZSlc
biIgKworCQkJInBhY2thZ2UgcDE7IjsKKwkJZW52LmFkZEZpbGUodGhpcy5zcmNSb290LCAicDEv
cGFja2FnZS1pbmZvLmphdmEiLCAvLyROT04tTkxTLTEkCisJCQlwY29kZSk7CisJCWZ1bGxCdWls
ZCggdGhpcy5wcm9qZWN0UGF0aCApOworCQlleHBlY3RpbmdOb1Byb2JsZW1zKCk7CisJfQorCisJ
Ly8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQwNzQxNAor
CS8vIDQwNzQxNCAtIEluY29ycmVjdCB3YXJuaW5nIG9uIGEgcHJpbWl0aXZlIHR5cGUgYmVpbmcg
bnVsbC4KKwlwdWJsaWMgdm9pZCB0ZXN0NDA3NDE0YigpIHRocm93cyBKYXZhTW9kZWxFeGNlcHRp
b24sIElPRXhjZXB0aW9uIHsKKwkJc2V0dXBQcm9qZWN0Rm9yTnVsbEFubm90YXRpb25zKCk7CisJ
CVN0cmluZyB4Y29kZSA9ICJwYWNrYWdlIHAxO1xuIiArCisJCQkicHVibGljIGNsYXNzIFRlc3Qg
e1xuIiArCisJCQkiCXZvaWQgZm9vKGJvb2xlYW4gaSkge1xuIiArCisJCQkiCQliYXIoaSk7XG4i
ICsKKwkJCSIJfVxuIiArCisJCQkiCXN0YXRpYyB2b2lkIGJhcihCb29sZWFuIGkpXG4iICsKKwkJ
CSIJe1xuIiArCisJCQkiCQlcbiIgKworCQkJIgl9XG4iICsKKwkJCSJ9IjsKKwkJZW52LmFkZENs
YXNzKHRoaXMuc3JjUm9vdCwgInAxIiwgIlRlc3QiLCB4Y29kZSk7CisJCVN0cmluZyBwY29kZSA9
ICJAb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTm9uTnVsbEJ5RGVmYXVsdCh0cnVlKVxuIiAr
CisJCQkicGFja2FnZSBwMTsiOworCQllbnYuYWRkRmlsZSh0aGlzLnNyY1Jvb3QsICJwMS9wYWNr
YWdlLWluZm8uamF2YSIsIC8vJE5PTi1OTFMtMSQKKwkJCXBjb2RlKTsKKwkJZnVsbEJ1aWxkKCB0
aGlzLnByb2plY3RQYXRoICk7CisJCWV4cGVjdGluZ05vUHJvYmxlbXMoKTsKKwl9CisKKwkvLyBo
dHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDA3NDE0CisJLy8g
NDA3NDE0IC0gSW5jb3JyZWN0IHdhcm5pbmcgb24gYSBwcmltaXRpdmUgdHlwZSBiZWluZyBudWxs
LgorCXB1YmxpYyB2b2lkIHRlc3Q0MDc0MTRjKCkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbiwg
SU9FeGNlcHRpb24geworCQlzZXR1cFByb2plY3RGb3JOdWxsQW5ub3RhdGlvbnMoKTsKKwkJU3Ry
aW5nIHhjb2RlID0gInBhY2thZ2UgcDE7XG4iICsKKwkJCSJwdWJsaWMgY2xhc3MgVGVzdCB7XG4i
ICsKKwkJCSIJdm9pZCBmb28oYnl0ZSBpKSB7XG4iICsKKwkJCSIJCWJhcihpKTtcbiIgKworCQkJ
Igl9XG4iICsKKwkJCSIJc3RhdGljIHZvaWQgYmFyKEJ5dGUgaSlcbiIgKworCQkJIgl7XG4iICsK
KwkJCSIJCVxuIiArCisJCQkiCX1cbiIgKworCQkJIn0iOworCQllbnYuYWRkQ2xhc3ModGhpcy5z
cmNSb290LCAicDEiLCAiVGVzdCIsIHhjb2RlKTsKKwkJU3RyaW5nIHBjb2RlID0gIkBvcmcuZWNs
aXBzZS5qZHQuYW5ub3RhdGlvbi5Ob25OdWxsQnlEZWZhdWx0KHRydWUpXG4iICsKKwkJCSJwYWNr
YWdlIHAxOyI7CisJCWVudi5hZGRGaWxlKHRoaXMuc3JjUm9vdCwgInAxL3BhY2thZ2UtaW5mby5q
YXZhIiwgLy8kTk9OLU5MUy0xJAorCQkJcGNvZGUpOworCQlmdWxsQnVpbGQoIHRoaXMucHJvamVj
dFBhdGggKTsKKwkJZXhwZWN0aW5nTm9Qcm9ibGVtcygpOworCX0KKworCS8vIGh0dHBzOi8vYnVn
cy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00MDc0MTQKKwkvLyA0MDc0MTQgLSBJ
bmNvcnJlY3Qgd2FybmluZyBvbiBhIHByaW1pdGl2ZSB0eXBlIGJlaW5nIG51bGwuCisJcHVibGlj
IHZvaWQgdGVzdDQwNzQxNGQoKSB0aHJvd3MgSmF2YU1vZGVsRXhjZXB0aW9uLCBJT0V4Y2VwdGlv
biB7CisJCXNldHVwUHJvamVjdEZvck51bGxBbm5vdGF0aW9ucygpOworCQlTdHJpbmcgeGNvZGUg
PSAicGFja2FnZSBwMTtcbiIgKworCQkJInB1YmxpYyBjbGFzcyBUZXN0IHtcbiIgKworCQkJIgl2
b2lkIGZvbyhmbG9hdCBpKSB7XG4iICsKKwkJCSIJCWJhcihpKTtcbiIgKworCQkJIgl9XG4iICsK
KwkJCSIJc3RhdGljIHZvaWQgYmFyKEZsb2F0IGkpXG4iICsKKwkJCSIJe1xuIiArCisJCQkiCQlc
biIgKworCQkJIgl9XG4iICsKKwkJCSJ9IjsKKwkJZW52LmFkZENsYXNzKHRoaXMuc3JjUm9vdCwg
InAxIiwgIlRlc3QiLCB4Y29kZSk7CisJCVN0cmluZyBwY29kZSA9ICJAb3JnLmVjbGlwc2UuamR0
LmFubm90YXRpb24uTm9uTnVsbEJ5RGVmYXVsdCh0cnVlKVxuIiArCisJCQkicGFja2FnZSBwMTsi
OworCQllbnYuYWRkRmlsZSh0aGlzLnNyY1Jvb3QsICJwMS9wYWNrYWdlLWluZm8uamF2YSIsIC8v
JE5PTi1OTFMtMSQKKwkJCXBjb2RlKTsKKwkJZnVsbEJ1aWxkKCB0aGlzLnByb2plY3RQYXRoICk7
CisJCWV4cGVjdGluZ05vUHJvYmxlbXMoKTsKKwl9CisKKwkvLyBodHRwczovL2J1Z3MuZWNsaXBz
ZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDA3NDE0CisJLy8gNDA3NDE0IC0gSW5jb3JyZWN0
IHdhcm5pbmcgb24gYSBwcmltaXRpdmUgdHlwZSBiZWluZyBudWxsLgorCXB1YmxpYyB2b2lkIHRl
c3Q0MDc0MTRlKCkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbiwgSU9FeGNlcHRpb24geworCQlz
ZXR1cFByb2plY3RGb3JOdWxsQW5ub3RhdGlvbnMoKTsKKwkJU3RyaW5nIHhjb2RlID0gInBhY2th
Z2UgcDE7XG4iICsKKwkJCSJwdWJsaWMgY2xhc3MgVGVzdCB7XG4iICsKKwkJCSIJdm9pZCBmb28o
bG9uZyBpKSB7XG4iICsKKwkJCSIJCWJhcihpKTtcbiIgKworCQkJIgl9XG4iICsKKwkJCSIJc3Rh
dGljIHZvaWQgYmFyKExvbmcgaSlcbiIgKworCQkJIgl7XG4iICsKKwkJCSIJCVxuIiArCisJCQki
CX1cbiIgKworCQkJIn0iOworCQllbnYuYWRkQ2xhc3ModGhpcy5zcmNSb290LCAicDEiLCAiVGVz
dCIsIHhjb2RlKTsKKwkJU3RyaW5nIHBjb2RlID0gIkBvcmcuZWNsaXBzZS5qZHQuYW5ub3RhdGlv
bi5Ob25OdWxsQnlEZWZhdWx0KHRydWUpXG4iICsKKwkJCSJwYWNrYWdlIHAxOyI7CisJCWVudi5h
ZGRGaWxlKHRoaXMuc3JjUm9vdCwgInAxL3BhY2thZ2UtaW5mby5qYXZhIiwgLy8kTk9OLU5MUy0x
JAorCQkJcGNvZGUpOworCQlmdWxsQnVpbGQoIHRoaXMucHJvamVjdFBhdGggKTsKKwkJZXhwZWN0
aW5nTm9Qcm9ibGVtcygpOworCX0KKworCS8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdz
L3Nob3dfYnVnLmNnaT9pZD00MDc0MTQKKwkvLyA0MDc0MTQgLSBJbmNvcnJlY3Qgd2FybmluZyBv
biBhIHByaW1pdGl2ZSB0eXBlIGJlaW5nIG51bGwuCisJcHVibGljIHZvaWQgdGVzdDQwNzQxNGYo
KSB0aHJvd3MgSmF2YU1vZGVsRXhjZXB0aW9uLCBJT0V4Y2VwdGlvbiB7CisJCXNldHVwUHJvamVj
dEZvck51bGxBbm5vdGF0aW9ucygpOworCQlTdHJpbmcgeGNvZGUgPSAicGFja2FnZSBwMTtcbiIg
KworCQkJInB1YmxpYyBjbGFzcyBUZXN0IHtcbiIgKworCQkJIgl2b2lkIGZvbyhjaGFyIGkpIHtc
biIgKworCQkJIgkJYmFyKGkpO1xuIiArCisJCQkiCX1cbiIgKworCQkJIglzdGF0aWMgdm9pZCBi
YXIoQ2hhcmFjdGVyIGkpXG4iICsKKwkJCSIJe1xuIiArCisJCQkiCQlcbiIgKworCQkJIgl9XG4i
ICsKKwkJCSJ9IjsKKwkJZW52LmFkZENsYXNzKHRoaXMuc3JjUm9vdCwgInAxIiwgIlRlc3QiLCB4
Y29kZSk7CisJCVN0cmluZyBwY29kZSA9ICJAb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTm9u
TnVsbEJ5RGVmYXVsdCh0cnVlKVxuIiArCisJCQkicGFja2FnZSBwMTsiOworCQllbnYuYWRkRmls
ZSh0aGlzLnNyY1Jvb3QsICJwMS9wYWNrYWdlLWluZm8uamF2YSIsIC8vJE5PTi1OTFMtMSQKKwkJ
CXBjb2RlKTsKKwkJZnVsbEJ1aWxkKCB0aGlzLnByb2plY3RQYXRoICk7CisJCWV4cGVjdGluZ05v
UHJvYmxlbXMoKTsKKwl9CisKKwkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93
X2J1Zy5jZ2k/aWQ9NDA3NDE0CisJLy8gNDA3NDE0IC0gSW5jb3JyZWN0IHdhcm5pbmcgb24gYSBw
cmltaXRpdmUgdHlwZSBiZWluZyBudWxsLgorCXB1YmxpYyB2b2lkIHRlc3Q0MDc0MTRnKCkgdGhy
b3dzIEphdmFNb2RlbEV4Y2VwdGlvbiwgSU9FeGNlcHRpb24geworCQlzZXR1cFByb2plY3RGb3JO
dWxsQW5ub3RhdGlvbnMoKTsKKwkJU3RyaW5nIHhjb2RlID0gInBhY2thZ2UgcDE7XG4iICsKKwkJ
CSJwdWJsaWMgY2xhc3MgVGVzdCB7XG4iICsKKwkJCSIJdm9pZCBmb28oc2hvcnQgaSkge1xuIiAr
CisJCQkiCQliYXIoaSk7XG4iICsKKwkJCSIJfVxuIiArCisJCQkiCXN0YXRpYyB2b2lkIGJhcihT
aG9ydCBpKVxuIiArCisJCQkiCXtcbiIgKworCQkJIgkJXG4iICsKKwkJCSIJfVxuIiArCisJCQki
fSI7CisJCWVudi5hZGRDbGFzcyh0aGlzLnNyY1Jvb3QsICJwMSIsICJUZXN0IiwgeGNvZGUpOwor
CQlTdHJpbmcgcGNvZGUgPSAiQG9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uLk5vbk51bGxCeURl
ZmF1bHQodHJ1ZSlcbiIgKworCQkJInBhY2thZ2UgcDE7IjsKKwkJZW52LmFkZEZpbGUodGhpcy5z
cmNSb290LCAicDEvcGFja2FnZS1pbmZvLmphdmEiLCAvLyROT04tTkxTLTEkCisJCQlwY29kZSk7
CisJCWZ1bGxCdWlsZCggdGhpcy5wcm9qZWN0UGF0aCApOworCQlleHBlY3RpbmdOb1Byb2JsZW1z
KCk7CisJfQogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Zsb3cvRmxvd0NvbnRleHQuamF2YSBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9mbG93L0Zsb3dDb250ZXh0LmphdmEKaW5kZXggNWFlMmI4Yi4uZWZjZjNmMyAxMDA2NDQK
LS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2Zsb3cvRmxvd0NvbnRleHQuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvZmxvdy9GbG93
Q29udGV4dC5qYXZhCkBAIC05OTMsNiArOTkzLDE3IEBAIHB1YmxpYyB2b2lkIHJlY29yZE51bGxp
dHlNaXNtYXRjaChCbG9ja1Njb3BlIGN1cnJlbnRTY29wZSwgRXhwcmVzc2lvbiBleHByZXNzaW9u
CiAJCQljdXJyZW50Q29udGV4dCA9IGN1cnJlbnRDb250ZXh0LnBhcmVudDsKIAkJfQogCX0KKwlp
bnQgcHR5cGVpZCA9IHByb3ZpZGVkVHlwZS5pZDsKKwlpbnQgZXR5cGVpZCA9IGV4cGVjdGVkVHlw
ZS5pZDsKKwlpZiAoKHB0eXBlaWQgPT0gVHlwZUlkcy5UX2ludCAmJiBldHlwZWlkID09IFR5cGVJ
ZHMuVF9KYXZhTGFuZ0ludGVnZXIpCisJCXx8IChwdHlwZWlkID09IFR5cGVJZHMuVF9ib29sZWFu
ICYmIGV0eXBlaWQgPT0gVHlwZUlkcy5UX0phdmFMYW5nQm9vbGVhbikKKwkJfHwgKHB0eXBlaWQg
PT0gVHlwZUlkcy5UX2J5dGUgJiYgZXR5cGVpZCA9PSBUeXBlSWRzLlRfSmF2YUxhbmdCeXRlKQor
CQl8fCAocHR5cGVpZCA9PSBUeXBlSWRzLlRfY2hhciAmJiBldHlwZWlkID09IFR5cGVJZHMuVF9K
YXZhTGFuZ0NoYXJhY3RlcikKKwkJfHwgKHB0eXBlaWQgPT0gVHlwZUlkcy5UX2Zsb2F0ICYmIGV0
eXBlaWQgPT0gVHlwZUlkcy5UX0phdmFMYW5nRmxvYXQpCisJCXx8IChwdHlwZWlkID09IFR5cGVJ
ZHMuVF9sb25nICYmIGV0eXBlaWQgPT0gVHlwZUlkcy5UX0phdmFMYW5nTG9uZykKKwkJfHwgKHB0
eXBlaWQgPT0gVHlwZUlkcy5UX3Nob3J0ICYmIGV0eXBlaWQgPT0gVHlwZUlkcy5UX0phdmFMYW5n
U2hvcnQpKSB7CisJCXJldHVybjsKKwl9CiAJLy8gbm8gcmVhc29uIHRvIGRlZmVyLCBzbyByZXBv
cnQgbm93OgogCWNoYXJbXVtdIGFubm90YXRpb25OYW1lID0gY3VycmVudFNjb3BlLmVudmlyb25t
ZW50KCkuZ2V0Tm9uTnVsbEFubm90YXRpb25OYW1lKCk7CiAJY3VycmVudFNjb3BlLnByb2JsZW1S
ZXBvcnRlcigpLm51bGxpdHlNaXNtYXRjaChleHByZXNzaW9uLCBwcm92aWRlZFR5cGUsIGV4cGVj
dGVkVHlwZSwgbnVsbFN0YXR1cywgYW5ub3RhdGlvbk5hbWUpOwo=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>240736</attachid>
            <date>2014-03-10 20:37:00 -0400</date>
            <delta_ts>2014-03-10 20:38:23 -0400</delta_ts>
            <desc>WIP: Patch</desc>
            <filename>patch.patch</filename>
            <type>text/plain</type>
            <size>16734</size>
            <attacher name="shankha banerjee">shankhba</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmJ1aWxkZXIvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2J1aWxkZXIvQW5ub3RhdGlvbkRlcGVuZGVuY3lUZXN0cy5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuYnVpbGRlci9zcmMvb3JnL2VjbGlwc2Uv
amR0L2NvcmUvdGVzdHMvYnVpbGRlci9Bbm5vdGF0aW9uRGVwZW5kZW5jeVRlc3RzLmphdmEKaW5k
ZXggMjFkY2Y3Yi4uMjZiMWRkMiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVz
dHMuYnVpbGRlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvYnVpbGRlci9Bbm5vdGF0
aW9uRGVwZW5kZW5jeVRlc3RzLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMu
YnVpbGRlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvYnVpbGRlci9Bbm5vdGF0aW9u
RGVwZW5kZW5jeVRlc3RzLmphdmEKQEAgLTQ0LDYgKzQ0LDEyIEBAIHB1YmxpYyBjbGFzcyBBbm5v
dGF0aW9uRGVwZW5kZW5jeVRlc3RzIGV4dGVuZHMgQnVpbGRlclRlc3RzIHsKIAkJc3VwZXIobmFt
ZSk7CiAJfQogCisJc3RhdGljIHsKKy8vCQlURVNUU19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7ICJ0
ZXN0NDA3NDE0YiIgfTsKKy8vCQlURVNUU19OVU1CRVJTID0gbmV3IGludFtdIHsgNTYxIH07Cisv
LwkJVEVTVFNfUkFOR0UgPSBuZXcgaW50W10geyAxLCAyMDQ5IH07Cit9CisKIAlwdWJsaWMgc3Rh
dGljIFRlc3Qgc3VpdGUoKSB7CiAJCXJldHVybiBidWlsZFRlc3RTdWl0ZShBbm5vdGF0aW9uRGVw
ZW5kZW5jeVRlc3RzLmNsYXNzKTsKIAl9CkBAIC0xNjY2LDQgKzE2NzIsMjIxIEBAIHB1YmxpYyBj
bGFzcyBBbm5vdGF0aW9uRGVwZW5kZW5jeVRlc3RzIGV4dGVuZHMgQnVpbGRlclRlc3RzIHsKIAog
CQkgZXhwZWN0aW5nVW5pcXVlQ29tcGlsZWRDbGFzc2VzKG5ldyBTdHJpbmdbXSB7ICJwMS5OdWxs
VGVzdCIgfSk7CiAJIH0KKworCSAvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93
X2J1Zy5jZ2k/aWQ9NDA3NDE0CisJIC8vIEluY29ycmVjdCB3YXJuaW5nIG9uIGEgcHJpbWl0aXZl
IHR5cGUgYmVpbmcgbnVsbC4KKwkgcHVibGljIHZvaWQgdGVzdDQwNzQxNGEoKSB0aHJvd3MgSmF2
YU1vZGVsRXhjZXB0aW9uLCBJT0V4Y2VwdGlvbiB7CisJCSBzZXR1cFByb2plY3RGb3JOdWxsQW5u
b3RhdGlvbnMoKTsKKwkJIFN0cmluZyB4Y29kZSA9ICJwYWNrYWdlIHAxO1xuIiArCisJCQkJICJw
dWJsaWMgY2xhc3MgVGVzdCB7XG4iICsKKwkJCQkgIgl2b2lkIGZvb0koaW50IGkpIHsgXG4iICsK
KwkJCQkgIgkJYmFySShpKTtcbiIgKworCQkJCSAiCX1cbiIgKworCQkJCSAiCXZvaWQgZm9vQihi
b29sZWFuIGkpIHtcbiIgKworCQkJCSAiCQliYXJCKGkpO1xuIiArCisJCQkJICIJfVxuIiArCisJ
CQkJICIJdm9pZCBmb29CeShieXRlIGkpIHtcbiIgKworCQkJCSAiCQliYXJCeShpKTtcbiIgKwor
CQkJCSAiCX1cbiIgKworCQkJCSAiCXZvaWQgZm9vRihmbG9hdCBpKSB7XG4iICsKKwkJCQkgIgkJ
YmFyRihpKTtcbiIgKworCQkJCSAiCX1cbiIgKworCQkJCSAiCXZvaWQgZm9vTChsb25nIGkpIHtc
biIgKworCQkJCSAiCQliYXJMKGkpO1xuIiArCisJCQkJICIJfVxuIiArCisJCQkJICIJdm9pZCBm
b29DKGNoYXIgaSkge1xuIiArCisJCQkJICIJCWJhckMoaSk7XG4iICsKKwkJCQkgIgl9XG4iICsK
KwkJCQkgIgl2b2lkIGZvb1Moc2hvcnQgaSkge1xuIiArCisJCQkJICIJCWJhclMoaSk7XG4iICsK
KwkJCQkgIgl9XG4iICsKKwkJCQkgIglzdGF0aWMgdm9pZCBiYXJJKEludGVnZXIgaSkge31cbiIg
KworCQkJCSAiCXN0YXRpYyB2b2lkIGJhckIoQm9vbGVhbiBpKSB7fVxuIiArCisJCQkJICIJc3Rh
dGljIHZvaWQgYmFyQnkoQnl0ZSBpKSB7fVxuIiArCisJCQkJICIJc3RhdGljIHZvaWQgYmFyRihG
bG9hdCBpKSB7fVxuIiArCisJCQkJICIJc3RhdGljIHZvaWQgYmFyTChMb25nIGkpIHt9XG4iICsK
KwkJCQkgIglzdGF0aWMgdm9pZCBiYXJDKENoYXJhY3RlciBpKSB7fVxuIiArCisJCQkJICIJc3Rh
dGljIHZvaWQgYmFyUyhTaG9ydCBpKSB7fVxuIiArCisJCQkJICJ9IjsKKwkJIGVudi5hZGRDbGFz
cyh0aGlzLnNyY1Jvb3QsICJwMSIsICJUZXN0IiwgeGNvZGUpOworCQkgU3RyaW5nIHBjb2RlID0g
IkBvcmcuZWNsaXBzZS5qZHQuYW5ub3RhdGlvbi5Ob25OdWxsQnlEZWZhdWx0KHRydWUpXG4iICsK
KwkJCQkgInBhY2thZ2UgcDE7IjsKKwkJIGVudi5hZGRGaWxlKHRoaXMuc3JjUm9vdCwgInAxL3Bh
Y2thZ2UtaW5mby5qYXZhIiwgLy8kTk9OLU5MUy0xJAorCQkJCSBwY29kZSk7CisJCSBmdWxsQnVp
bGQoIHRoaXMucHJvamVjdFBhdGggKTsKKwkJIGV4cGVjdGluZ05vUHJvYmxlbXMoKTsKKwkgfQor
CisJIC8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00MDc0
MTQKKwkgLy8gSW5jb3JyZWN0IHdhcm5pbmcgb24gYSBwcmltaXRpdmUgdHlwZSBiZWluZyBudWxs
LgorCSAvLyBUaGUgaW5mb3JtYXRpb24gdGhhdCBib3hpbmcgaXMgaGFwcGVuaW5nIGF0IGkyID0g
aQorCSAvLyBhbmQgdGhlcmVmb3JlIHRoZXJlIGNhbm5vdCBiZSBudWxsIHZhbHVlcyBpbiBpMiBp
cworCSAvLyBub3QgZmxvd2luZyBkb3duIHRvIGFjY2VzcyBvZiBpMi4KKwkgLy8gVGhlIHRlc3Qg
Y2FzZSBhbHNvIGlsbHVzdHJhdGVzIGFycmF5IGFjY2VzcyBhbmQgUXVhbGlmaWVkIGFjY2Vzcy4K
KwkgcHVibGljIHZvaWQgdGVzdDQwNzQxNGIoKSB0aHJvd3MgSmF2YU1vZGVsRXhjZXB0aW9uLCBJ
T0V4Y2VwdGlvbiB7CisJCSBzZXR1cFByb2plY3RGb3JOdWxsQW5ub3RhdGlvbnMoKTsKKwkJIFN0
cmluZyB4Y29kZSA9ICJwYWNrYWdlIHAxO1xuIiArCisJCQkJICIgIHB1YmxpYyBjbGFzcyBUZXN0
IHtcbiIgKworCQkJCSAiICBjbGFzcyBZIHtcbiIgKworCQkJCSAiCQljbGFzcyBaIHtcbiIgKwor
CQkJCSAiCQkJaW50IGk7XG4iICsKKwkJCQkgIiAgICAgICAgICBpbnQgYVtdO1xuIiArCisJCQkJ
ICIgICAgICAJWigpIHtcbiIgKworCQkJCSAiCQkJCWEgPSBuZXcgaW50WzBdO1xuIiArCisJCQkJ
ICIgICAgICAJfVxuIiArCisJCQkJICIJCX1cbiIgKworCQkJCSAiICB9XG4iICsKKwkJCQkgIgl2
b2lkIGZvbyhpbnQgaSkge1xuIiArCisJCQkJICIJCUludGVnZXIgaTIgPSBpO1xuIiArCisJCQkJ
ICIJCWJhcihpMik7XG4iICsKKwkJCQkgIgl9XG4iICsKKwkJCQkgIgl2b2lkIGZvb0EoaW50IGFb
XSwgaW50IGkpIHtcbiIgKworCQkJCSAiCQlJbnRlZ2VyIGkyID0gYVtpXTtcbiIgKworCQkJCSAi
CQliYXIoaTIpO1xuIiArCisJCQkJICIJfVxuIiArCisJCQkJICIgIHZvaWQgZm9vUShZLlogeXos
IGludCBpKSB7XG4iICsKKwkJCQkgIgkJSW50ZWdlciBpMiA9IHl6Lmk7XG4iICsKKwkJCQkgIgkJ
YmFyKGkyKTtcbiIgKworCQkJCSAiICAgICAgaTIgPSB5ei5hW2ldO1xuIiArCisJCQkJICIgICAg
ICBiYXIoaTIpO1xuIiArCisJCQkJICIgIH1cbiIgKworCQkJCSAiCXN0YXRpYyB2b2lkIGJhcihJ
bnRlZ2VyIGkpIHsgfVxuIiArCisJCQkJICJ9IjsKKwkJIGVudi5hZGRDbGFzcyh0aGlzLnNyY1Jv
b3QsICJwMSIsICJUZXN0IiwgeGNvZGUpOworCQkgU3RyaW5nIHBjb2RlID0gIkBvcmcuZWNsaXBz
ZS5qZHQuYW5ub3RhdGlvbi5Ob25OdWxsQnlEZWZhdWx0KHRydWUpXG4iICsKKwkJCQkgInBhY2th
Z2UgcDE7IjsKKwkJIGVudi5hZGRGaWxlKHRoaXMuc3JjUm9vdCwgInAxL3BhY2thZ2UtaW5mby5q
YXZhIiwgLy8kTk9OLU5MUy0xJAorCQkJCSBwY29kZSk7CisJCSBmdWxsQnVpbGQoIHRoaXMucHJv
amVjdFBhdGggKTsKKwkJIGV4cGVjdGluZ05vUHJvYmxlbXMoKTsKKwkgfQorCisJIHB1YmxpYyB2
b2lkIHRlc3Q0MDc0MTRiMigpIHRocm93cyBKYXZhTW9kZWxFeGNlcHRpb24sIElPRXhjZXB0aW9u
IHsKKwkJIHNldHVwUHJvamVjdEZvck51bGxBbm5vdGF0aW9ucygpOworCQkgU3RyaW5nIHhjb2Rl
ID0gInBhY2thZ2UgcDE7XG4iICsKKwkJCQkgIiAgcHVibGljIGNsYXNzIFRlc3Qge1xuIiArCisJ
CQkJICIgIGludCBhW107XG4iICsKKwkJCQkgIiAgVGVzdCgpIHtcbiIgKworCQkJCSAiCQlhID0g
bmV3IGludFswXTtcbiIgKworCQkJCSAiICAgICAgYVswXSA9IDA7XG4iICsKKwkJCQkgIiAgfVxu
IiArCisJCQkJICIJdm9pZCBmb29BKGludCBpKSB7XG4iICsKKwkJCQkgIgkJSW50ZWdlciBpMiA9
IGFbaV07XG4iICsKKwkJCQkgIgkJYmFyKGkyKTtcbiIgKworCQkJCSAiCX1cbiIgKworCQkJCSAi
CXN0YXRpYyB2b2lkIGJhcihJbnRlZ2VyIGkpIHsgfVxuIiArCisJCQkJICJ9IjsKKwkJIGVudi5h
ZGRDbGFzcyh0aGlzLnNyY1Jvb3QsICJwMSIsICJUZXN0IiwgeGNvZGUpOworCQkgU3RyaW5nIHBj
b2RlID0gIkBvcmcuZWNsaXBzZS5qZHQuYW5ub3RhdGlvbi5Ob25OdWxsQnlEZWZhdWx0KHRydWUp
XG4iICsKKwkJCQkgInBhY2thZ2UgcDE7IjsKKwkJIGVudi5hZGRGaWxlKHRoaXMuc3JjUm9vdCwg
InAxL3BhY2thZ2UtaW5mby5qYXZhIiwgLy8kTk9OLU5MUy0xJAorCQkJCSBwY29kZSk7CisJCSBm
dWxsQnVpbGQoIHRoaXMucHJvamVjdFBhdGggKTsKKwkJIGV4cGVjdGluZ05vUHJvYmxlbXMoKTsK
KwkgfQorCisJIC8vIEZpZWxkUmVmZXJlbmNlLgorCSBwdWJsaWMgdm9pZCB0ZXN0NDA3NDE0YjMo
KSB0aHJvd3MgSmF2YU1vZGVsRXhjZXB0aW9uLCBJT0V4Y2VwdGlvbiB7CisJCSBzZXR1cFByb2pl
Y3RGb3JOdWxsQW5ub3RhdGlvbnMoKTsKKwkJIFN0cmluZyB4Y29kZSA9ICJwYWNrYWdlIHAxO1xu
IiArCisJCQkJICJwdWJsaWMgY2xhc3MgVGVzdCB7XG4iICsKKwkJCQkgIiAgY2xhc3MgWiB7XG4i
ICsKKwkJCQkgIglpbnQgYVtdO1xuIiArCisJCQkJICIJWigpIHtcbiIgKworCQkJCSAiCSAgYSA9
IG5ldyBpbnRbMF07XG4iICsKKwkJCQkgIgkgIGFbMF0gPSAwO1xuIiArCisJCQkJICIJfVxuIiAr
CisJCQkJICIgIH1cbiIgKworCQkJCSAiICBjbGFzcyBZIHtcbiIgKworCQkJCSAiCVpbXSB6O1xu
IiArCisJCQkJICIJWSAoKSB7XG4iICsKKwkJCQkgIgkgIHogPSBuZXcgWlswXTtcbiIgKworCQkJ
CSAiCX1cbiIgKworCQkJCSAiICB9XG4iICsKKwkJCQkgIiAgdm9pZCBmb29RKFkgeSwgaW50IGkp
IHtcbiIgKworCQkJCSAiCUludGVnZXIgaTIgPSB5LnpbaV0uYVtpXTtcbiIgKworCQkJCSAiCWJh
cihpMik7XG4iICsKKwkJCQkgIiAgfVxuIiArCisJCQkJICIgIHN0YXRpYyB2b2lkIGJhcihJbnRl
Z2VyIGkpIHsgfVxuIiArCisJCQkJICJ9IjsKKwkJIGVudi5hZGRDbGFzcyh0aGlzLnNyY1Jvb3Qs
ICJwMSIsICJUZXN0IiwgeGNvZGUpOworCQkgU3RyaW5nIHBjb2RlID0gIkBvcmcuZWNsaXBzZS5q
ZHQuYW5ub3RhdGlvbi5Ob25OdWxsQnlEZWZhdWx0KHRydWUpXG4iICsKKwkJCQkgInBhY2thZ2Ug
cDE7IjsKKwkJIGVudi5hZGRGaWxlKHRoaXMuc3JjUm9vdCwgInAxL3BhY2thZ2UtaW5mby5qYXZh
IiwgLy8kTk9OLU5MUy0xJAorCQkJCSBwY29kZSk7CisJCSBmdWxsQnVpbGQoIHRoaXMucHJvamVj
dFBhdGggKTsKKwkJIGV4cGVjdGluZ05vUHJvYmxlbXMoKTsKKwkgfQorCisJLy8gYXJyYXlSZWZy
ZW5jZQorCSBwdWJsaWMgdm9pZCB0ZXN0NDA3NDE0YjQoKSB0aHJvd3MgSmF2YU1vZGVsRXhjZXB0
aW9uLCBJT0V4Y2VwdGlvbiB7CisJCSBzZXR1cFByb2plY3RGb3JOdWxsQW5ub3RhdGlvbnMoKTsK
KwkJIFN0cmluZyB4Y29kZSA9ICJwYWNrYWdlIHAxO1xuIiArCisJCQkJICJwdWJsaWMgY2xhc3Mg
VGVzdCB7XG4iICsKKwkJCQkgIiAgY2xhc3MgWSB7XG4iICsKKwkJCQkgIglpbnQgYVtdO1xuIiAr
CisJCQkJICIJWSgpIHtcbiIgKworCQkJCSAiCSAgYSA9IG5ldyBpbnRbMF07XG4iICsKKwkJCQkg
IgkgIGFbMF0gPSAwO1xuIiArCisJCQkJICIJfVxuIiArCisJCQkJICIgIH1cbiIgKworCQkJCSAi
ICB2b2lkIGZvb1EoWVtdIHksIGludCBpKSB7XG4iICsKKwkJCQkgIglJbnRlZ2VyIGkyID0geVtp
XS5hW2ldO1xuIiArCisJCQkJICIJYmFyKGkyKTtcbiIgKworCQkJCSAiICB9XG4iICsKKwkJCQkg
IiAgc3RhdGljIHZvaWQgYmFyKEludGVnZXIgaSkgeyB9XG4iICsKKwkJCQkgIn0iOworCQkgZW52
LmFkZENsYXNzKHRoaXMuc3JjUm9vdCwgInAxIiwgIlRlc3QiLCB4Y29kZSk7CisJCSBTdHJpbmcg
cGNvZGUgPSAiQG9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uLk5vbk51bGxCeURlZmF1bHQodHJ1
ZSlcbiIgKworCQkJCSAicGFja2FnZSBwMTsiOworCQkgZW52LmFkZEZpbGUodGhpcy5zcmNSb290
LCAicDEvcGFja2FnZS1pbmZvLmphdmEiLCAvLyROT04tTkxTLTEkCisJCQkJIHBjb2RlKTsKKwkJ
IGZ1bGxCdWlsZCggdGhpcy5wcm9qZWN0UGF0aCApOworCQkgZXhwZWN0aW5nTm9Qcm9ibGVtcygp
OworCSB9CisKKwkgLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dp
P2lkPTQyODEwNAorCSAvLyBOdWxsIGFubm90YXRpb24gaGV1cmlzdGljcyBkb2VzIG5vdCB1bmRl
cnN0YW5kIGF1dG9ib3hlZCBwcmltaXRpdmVzIHRvIGJlIG5vbi1udWxsLgorCSBwdWJsaWMgdm9p
ZCB0ZXN0NDI4MTA0KCkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbiwgSU9FeGNlcHRpb24gewor
CQkgc2V0dXBQcm9qZWN0Rm9yTnVsbEFubm90YXRpb25zKCk7CisJCSBTdHJpbmcgeGNvZGUgPSAi
cGFja2FnZSBwMTtcbiIgKworCQkJCSAiaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9u
Lk5vbk51bGw7XG4iICsKKwkJCQkgInB1YmxpYyBjbGFzcyBUZXN0IHtcbiIgKworCQkJCSAiICAg
IEBOb25OdWxsXG4iICsKKwkJCQkgIiAgICBCb29sZWFuIGNhc2UxUGFyZW50KCkge1xuIiArCisJ
CQkJICIgICAgICAgIHJldHVybiBjYXNlMUNoaWxkKCk7XG4iICsKKwkJCQkgIiAgICB9XG4iICsK
KwkJCQkgIiAgICBib29sZWFuIGNhc2UxQ2hpbGQoKSB7XG4iICsKKwkJCQkgIiAgICAgICAgcmV0
dXJuIE1hdGgucmFuZG9tKCkgPiAwLjU7XG4iICsKKwkJCQkgIiAgICB9XG4iICsKKwkJCQkgIn1c
biI7CisJCSBlbnYuYWRkQ2xhc3ModGhpcy5zcmNSb290LCAicDEiLCAiVGVzdCIsIHhjb2RlKTsK
KwkJIFN0cmluZyBwY29kZSA9ICJwYWNrYWdlIHAxOyI7CisJCSBlbnYuYWRkRmlsZSh0aGlzLnNy
Y1Jvb3QsICJwMS9wYWNrYWdlLWluZm8uamF2YSIsIC8vJE5PTi1OTFMtMSQKKwkJCQkgcGNvZGUp
OworCQkgZnVsbEJ1aWxkKCB0aGlzLnByb2plY3RQYXRoICk7CisJCSBleHBlY3RpbmdOb1Byb2Js
ZW1zKCk7CisJIH0KKworCSAvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1
Zy5jZ2k/aWQ9NDI0NzAyCisJIC8vIFdhcm5pbmcgYXQgYW4gYXNzaWdubWVudCBvZiBhIGJvb2xl
YW4tVmFyaWFibGUgdG8gYW4gQm9vbGVhbi1WYXJpYWJsZQorCSBwdWJsaWMgdm9pZCB0ZXN0NDI0
NzAyKCkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbiwgSU9FeGNlcHRpb24geworCQkgc2V0dXBQ
cm9qZWN0Rm9yTnVsbEFubm90YXRpb25zKCk7CisJCSBTdHJpbmcgeGNvZGUgPSAicGFja2FnZSBw
MTtcbiIgKworCQkJCSAiaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uLk5vbk51bGw7
XG4iICsKKwkJCQkgInB1YmxpYyBjbGFzcyBUZXN0IHtcbiIgKworCQkJCSAiICAgIHByaXZhdGUg
QE5vbk51bGwgQm9vbGVhbiB0ID0gdHJ1ZTtcbiIgKworCQkJCSAiICAgIEJvb2xlYW4gZm9vKCkg
e1xuIiArCisJCQkJICIJCWJvb2xlYW4geSA9IGZhbHNlO1xuIiArCisJCQkJICIgICAgICAgdCA9
IHk7XG4iICsKKwkJCQkgIgkJcmV0dXJuIHQ7XG4iICsKKwkJCQkgIiAgICB9XG4iICsKKwkJCQkg
In1cbiI7CisJCSBlbnYuYWRkQ2xhc3ModGhpcy5zcmNSb290LCAicDEiLCAiVGVzdCIsIHhjb2Rl
KTsKKwkJIFN0cmluZyBwY29kZSA9ICJwYWNrYWdlIHAxOyI7CisJCSBlbnYuYWRkRmlsZSh0aGlz
LnNyY1Jvb3QsICJwMS9wYWNrYWdlLWluZm8uamF2YSIsIC8vJE5PTi1OTFMtMSQKKwkJCQkgcGNv
ZGUpOworCQkgZnVsbEJ1aWxkKCB0aGlzLnByb2plY3RQYXRoICk7CisJCSBleHBlY3RpbmdOb1By
b2JsZW1zKCk7CisJIH0KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQXJyYXlSZWZlcmVuY2Uu
amF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hc3QvQXJyYXlSZWZlcmVuY2UuamF2YQppbmRleCA0Yzg5NmIxLi4yMGFl
ZjYzIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FycmF5UmVmZXJlbmNlLmphdmEKKysrIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9BcnJheVJlZmVyZW5jZS5qYXZhCkBAIC0xLDUgKzEsNSBAQAogLyoqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRpb24g
YW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxNCBJQk0gQ29ycG9yYXRpb24g
YW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhl
IGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUg
dGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21w
YW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKQEAgLTI1LDcgKzI1
LDEwIEBAIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuZmxvdy5GbG93
Q29udGV4dDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuZmxvdy5G
bG93SW5mbzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuaW1wbC5D
b25zdGFudDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3Vw
LkFycmF5QmluZGluZzsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
bG9va3VwLkJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVy
Lmxvb2t1cC5CbG9ja1Njb3BlOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21w
aWxlci5sb29rdXAuRmllbGRCaW5kaW5nOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5h
bC5jb21waWxlci5sb29rdXAuTG9jYWxWYXJpYWJsZUJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5UYWdCaXRzOwogaW1wb3J0IG9yZy5lY2xp
cHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuVHlwZUJpbmRpbmc7CiBpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5UeXBlSWRzOwpAQCAtNjksNiAr
NzIsMTUgQEAgcHVibGljIEZsb3dJbmZvIGFuYWx5c2VDb2RlKEJsb2NrU2NvcGUgY3VycmVudFNj
b3BlLCBGbG93Q29udGV4dCBmbG93Q29udGV4dCwgRmwKIAlmbG93SW5mbyA9IHRoaXMucG9zaXRp
b24uYW5hbHlzZUNvZGUoY3VycmVudFNjb3BlLCBmbG93Q29udGV4dCwgZmxvd0luZm8pOwogCXRo
aXMucG9zaXRpb24uY2hlY2tOUEVieVVuYm94aW5nKGN1cnJlbnRTY29wZSwgZmxvd0NvbnRleHQs
IGZsb3dJbmZvKTsKIAkvLyBhY2NvdW50IGZvciBwb3RlbnRpYWwgQXJyYXlJbmRleE91dE9mQm91
bmRzRXhjZXB0aW9uOgorCWlmICgodGhpcy5pbXBsaWNpdENvbnZlcnNpb24gJiBUeXBlSWRzLkJP
WElORykgIT0gMCkgeworCQlpZiAodGhpcy5yZWNlaXZlciBpbnN0YW5jZW9mIE5hbWVSZWZlcmVu
Y2UpIHsKKwkJCU5hbWVSZWZlcmVuY2UgcmVmID0gKE5hbWVSZWZlcmVuY2UpIHRoaXMucmVjZWl2
ZXI7CisJCQlCaW5kaW5nIGxvY2FsID0gcmVmLmJpbmRpbmc7CisJCQlpZiAobG9jYWwua2luZCgp
ID09IEJpbmRpbmcuTE9DQUwpIHsKKwkJCQlmbG93SW5mby5tYXJrQXNEZWZpbml0ZWx5Tm9uTnVs
bCgoTG9jYWxWYXJpYWJsZUJpbmRpbmcpIGxvY2FsKTsKKwkJCX0KKwkJfQorCX0KIAlmbG93Q29u
dGV4dC5yZWNvcmRBYnJ1cHRFeGl0KCk7CiAJcmV0dXJuIGZsb3dJbmZvOwogfQpAQCAtMjI3LDQg
KzIzOSwyNyBAQCBwdWJsaWMgdm9pZCB0cmF2ZXJzZShBU1RWaXNpdG9yIHZpc2l0b3IsIEJsb2Nr
U2NvcGUgc2NvcGUpIHsKIAl9CiAJdmlzaXRvci5lbmRWaXNpdCh0aGlzLCBzY29wZSk7CiB9CisK
K3B1YmxpYyBpbnQgbnVsbFN0YXR1cyhGbG93SW5mbyBmbG93SW5mbywgRmxvd0NvbnRleHQgZmxv
d0NvbnRleHQpIHsKKwlpZiAoISh0aGlzLnJlY2VpdmVyIGluc3RhbmNlb2YgTmFtZVJlZmVyZW5j
ZSkpCisJCXJldHVybiBzdXBlci5udWxsU3RhdHVzKGZsb3dJbmZvLCBmbG93Q29udGV4dCk7CisK
KwlOYW1lUmVmZXJlbmNlIHJlY3YgPSAoTmFtZVJlZmVyZW5jZSkgdGhpcy5yZWNlaXZlcjsKKwlC
aW5kaW5nIGJpbmRpbmcgPSByZWN2LmJpbmRpbmc7CisJaWYgKGJpbmRpbmcua2luZCgpICE9IEJp
bmRpbmcuTE9DQUwpCisJCXJldHVybiBzdXBlci5udWxsU3RhdHVzKGZsb3dJbmZvLCBmbG93Q29u
dGV4dCk7CisJaWYgKHJlY3YgaW5zdGFuY2VvZiBRdWFsaWZpZWROYW1lUmVmZXJlbmNlKSB7CisJ
CUZpZWxkQmluZGluZ1tdIG90aGVyQmluZGluZ3MgPSAoKFF1YWxpZmllZE5hbWVSZWZlcmVuY2Up
IHJlY3YpLm90aGVyQmluZGluZ3M7CisJCVR5cGVCaW5kaW5nIGVsZW1lbnRCaW5kaW5nID0gb3Ro
ZXJCaW5kaW5nc1tvdGhlckJpbmRpbmdzLmxlbmd0aCAtIDFdLnR5cGU7CisJCWVsZW1lbnRCaW5k
aW5nID0gKChBcnJheUJpbmRpbmcpIGVsZW1lbnRCaW5kaW5nKS5lbGVtZW50c1R5cGUoKTsKKwkJ
aWYgKGVsZW1lbnRCaW5kaW5nLmlzQmFzZVR5cGUoKSkgeworCQkJcmV0dXJuIGZsb3dJbmZvLm51
bGxTdGF0dXMoKExvY2FsVmFyaWFibGVCaW5kaW5nKSBiaW5kaW5nKTsKKwkJfQorCX0gZWxzZSB7
CisJCUxvY2FsVmFyaWFibGVCaW5kaW5nIGxvY2FsID0gKExvY2FsVmFyaWFibGVCaW5kaW5nKSBi
aW5kaW5nOworCQlpZiAoKChBcnJheUJpbmRpbmcpIGxvY2FsLnR5cGUpLmVsZW1lbnRzVHlwZSgp
LmlzQmFzZVR5cGUoKSkKKwkJCXJldHVybiBmbG93SW5mby5udWxsU3RhdHVzKGxvY2FsKTsKKwl9
CisJcmV0dXJuIHN1cGVyLm51bGxTdGF0dXMoZmxvd0luZm8sIGZsb3dDb250ZXh0KTsKIH0KK30K
XCBObyBuZXdsaW5lIGF0IGVuZCBvZiBmaWxlCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Fzc2ln
bm1lbnQuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvQXNzaWdubWVudC5qYXZhCmluZGV4IDZiNzVjNzMuLmY4
MTU5M2MgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQXNzaWdubWVudC5qYXZhCisrKyBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hc3QvQXNzaWdubWVudC5qYXZhCkBAIC0xMTMsNiArMTEzLDcgQEAgcHVibGljIEZsb3dJbmZv
IGFuYWx5c2VDb2RlKEJsb2NrU2NvcGUgY3VycmVudFNjb3BlLCBGbG93Q29udGV4dCBmbG93Q29u
dGV4dCwgRmwKIAl9CiAJaWYgKGxvY2FsICE9IG51bGwgJiYgKGxvY2FsLnR5cGUudGFnQml0cyAm
IFRhZ0JpdHMuSXNCYXNlVHlwZSkgPT0gMCkgewogCQlmbG93SW5mby5tYXJrTnVsbFN0YXR1cyhs
b2NhbCwgbnVsbFN0YXR1cyk7CisJCS8vIE51bGxSZWZyZWVuY2VUZXN0LmphdmE6IHRlc3RCdWcz
NDUyMDVfMy4KIAkJZmxvd0NvbnRleHQubWFya0ZpbmFsbHlOdWxsU3RhdHVzKGxvY2FsLCBudWxs
U3RhdHVzKTsKIAl9CiAJcmV0dXJuIGZsb3dJbmZvOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9F
eHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0V4cHJlc3Npb24uamF2YQppbmRleCAwZmRiMjAw
Li4zZDQyZTkyIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0V4cHJlc3Npb24uamF2YQorKysgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvYXN0L0V4cHJlc3Npb24uamF2YQpAQCAtNjQzLDE0ICs2NDMsMTQgQEAgcHVibGljIHZv
aWQgY29tcHV0ZUNvbnZlcnNpb24oU2NvcGUgc2NvcGUsIFR5cGVCaW5kaW5nIHJ1bnRpbWVUeXBl
LCBUeXBlQmluZGluZwogCS8vIGl0IGlzIHBvc3NpYmxlIGZvciBhIEJ5dGUgdG8gYmUgdW5ib3hl
ZCB0byBhIGJ5dGUgJiB0aGVuIGNvbnZlcnRlZCB0byBhbiBpbnQKIAkvLyBidXQgaXQgaXMgbm90
IHBvc3NpYmxlIGZvciBhIGJ5dGUgdG8gYmVjb21lIEJ5dGUgJiB0aGVuIGFzc2lnbmVkIHRvIGFu
IEludGVnZXIsCiAJLy8gb3IgdG8gYmVjb21lIGFuIGludCBiZWZvcmUgYm94ZWQgaW50byBhbiBJ
bnRlZ2VyCi0JaWYgKHJ1bnRpbWVUeXBlICE9IFR5cGVCaW5kaW5nLk5VTEwgJiYgcnVudGltZVR5
cGUuaXNCYXNlVHlwZSgpKSB7CisJaWYgKHJ1bnRpbWVUeXBlLmlzUHJpbWl0aXZlVHlwZSgpKSB7
CiAJCWlmICghY29tcGlsZVRpbWVUeXBlLmlzQmFzZVR5cGUoKSkgewogCQkJVHlwZUJpbmRpbmcg
dW5ib3hlZFR5cGUgPSBzY29wZS5lbnZpcm9ubWVudCgpLmNvbXB1dGVCb3hpbmdUeXBlKGNvbXBp
bGVUaW1lVHlwZSk7CiAJCQl0aGlzLmltcGxpY2l0Q29udmVyc2lvbiA9IFR5cGVJZHMuVU5CT1hJ
Tkc7CiAJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5hdXRvYm94aW5nKHRoaXMsIGNvbXBpbGVU
aW1lVHlwZSwgcnVudGltZVR5cGUpOwogCQkJY29tcGlsZVRpbWVUeXBlID0gdW5ib3hlZFR5cGU7
CiAJCX0KLQl9IGVsc2UgaWYgKGNvbXBpbGVUaW1lVHlwZSAhPSBUeXBlQmluZGluZy5OVUxMICYm
IGNvbXBpbGVUaW1lVHlwZS5pc0Jhc2VUeXBlKCkpIHsKKwl9IGVsc2UgaWYgKGNvbXBpbGVUaW1l
VHlwZS5pc1ByaW1pdGl2ZVR5cGUoKSkgewogCQlUeXBlQmluZGluZyBib3hlZFR5cGUgPSBzY29w
ZS5lbnZpcm9ubWVudCgpLmNvbXB1dGVCb3hpbmdUeXBlKHJ1bnRpbWVUeXBlKTsKIAkJaWYgKFR5
cGVCaW5kaW5nLmVxdWFsc0VxdWFscyhib3hlZFR5cGUsIHJ1bnRpbWVUeXBlKSkgLy8gT2JqZWN0
IG8gPSAxMjsKIAkJCWJveGVkVHlwZSA9IGNvbXBpbGVUaW1lVHlwZTsKZGlmZiAtLWdpdCBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9hc3QvUXVhbGlmaWVkTmFtZVJlZmVyZW5jZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9RdWFsaWZp
ZWROYW1lUmVmZXJlbmNlLmphdmEKaW5kZXggMTdiN2EyMS4uNTc3YTA1MiAxMDA2NDQKLS0tIGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FzdC9RdWFsaWZpZWROYW1lUmVmZXJlbmNlLmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9R
dWFsaWZpZWROYW1lUmVmZXJlbmNlLmphdmEKQEAgLTIxOCw2ICsyMTgsOSBAQCBwdWJsaWMgRmxv
d0luZm8gYW5hbHlzZUNvZGUoQmxvY2tTY29wZSBjdXJyZW50U2NvcGUsIEZsb3dDb250ZXh0IGZs
b3dDb250ZXh0LCBGbAogCQkJfSBlbHNlIGlmIChsb2NhbEJpbmRpbmcudXNlRmxhZyA9PSBMb2Nh
bFZhcmlhYmxlQmluZGluZy5VTlVTRUQpIHsKIAkJCQlsb2NhbEJpbmRpbmcudXNlRmxhZyA9IExv
Y2FsVmFyaWFibGVCaW5kaW5nLkZBS0VfVVNFRDsKIAkJCX0KKwkJCWlmICgodGhpcy5pbXBsaWNp
dENvbnZlcnNpb24gJiBUeXBlSWRzLkJPWElORykgIT0gMCkgeworCQkJCWZsb3dJbmZvLm1hcmtB
c0RlZmluaXRlbHlOb25OdWxsKChMb2NhbFZhcmlhYmxlQmluZGluZykgdGhpcy5iaW5kaW5nKTsK
KwkJCX0KIAl9CiAJaWYgKG5lZWRWYWx1ZSkgewogCQljaGVja0ludGVybmFsTlBFKGN1cnJlbnRT
Y29wZSwgZmxvd0NvbnRleHQsIGZsb3dJbmZvLCB0cnVlKTsKQEAgLTExNjUsNCArMTE2OCwxNCBA
QCBwdWJsaWMgVmFyaWFibGVCaW5kaW5nIG51bGxBbm5vdGF0ZWRWYXJpYWJsZUJpbmRpbmcoYm9v
bGVhbiBzdXBwb3J0VHlwZUFubm90YXRpbwogCX0KIAlyZXR1cm4gbnVsbDsKIH0KKworcHVibGlj
IGludCBudWxsU3RhdHVzKEZsb3dJbmZvIGZsb3dJbmZvLCBGbG93Q29udGV4dCBmbG93Q29udGV4
dCkgeworCWlmICh0aGlzLmJpbmRpbmcua2luZCgpID09IEJpbmRpbmcuTE9DQUwpIHsKKwkJVHlw
ZUJpbmRpbmcgZWxlbWVudEJpbmRpbmcgPSB0aGlzLm90aGVyQmluZGluZ3NbdGhpcy5vdGhlckJp
bmRpbmdzLmxlbmd0aCAtIDFdLnR5cGU7CisJCWlmIChlbGVtZW50QmluZGluZy5pc0Jhc2VUeXBl
KCkpIHsKKwkJCXJldHVybiBmbG93SW5mby5udWxsU3RhdHVzKChMb2NhbFZhcmlhYmxlQmluZGlu
ZykgdGhpcy5iaW5kaW5nKTsKKwkJfQorCX0KKwlyZXR1cm4gc3VwZXIubnVsbFN0YXR1cyhmbG93
SW5mbywgZmxvd0NvbnRleHQpOworfQogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9TaW5nbGVO
YW1lUmVmZXJlbmNlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1NpbmdsZU5hbWVSZWZlcmVuY2UuamF2YQpp
bmRleCA3MmQ5ZjZmLi5kYzE2MzIwIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1NpbmdsZU5hbWVS
ZWZlcmVuY2UuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1NpbmdsZU5hbWVSZWZlcmVuY2UuamF2YQpA
QCAtMjAyLDYgKzIwMiw5IEBAIHB1YmxpYyBGbG93SW5mbyBhbmFseXNlQ29kZShCbG9ja1Njb3Bl
IGN1cnJlbnRTY29wZSwgRmxvd0NvbnRleHQgZmxvd0NvbnRleHQsIEZsCiAJCQl9IGVsc2UgaWYg
KGxvY2FsQmluZGluZy51c2VGbGFnID09IExvY2FsVmFyaWFibGVCaW5kaW5nLlVOVVNFRCkgewog
CQkJCWxvY2FsQmluZGluZy51c2VGbGFnID0gTG9jYWxWYXJpYWJsZUJpbmRpbmcuRkFLRV9VU0VE
OwogCQkJfQorCQkJaWYgKCh0aGlzLmltcGxpY2l0Q29udmVyc2lvbiAmIFR5cGVJZHMuQk9YSU5H
KSAhPSAwKSB7CisJCQkJZmxvd0luZm8ubWFya0FzRGVmaW5pdGVseU5vbk51bGwoKExvY2FsVmFy
aWFibGVCaW5kaW5nKSB0aGlzLmJpbmRpbmcpOworCQkJfQogCX0KIAlpZiAodmFsdWVSZXF1aXJl
ZCkgewogCQltYW5hZ2VFbmNsb3NpbmdJbnN0YW5jZUFjY2Vzc0lmTmVjZXNzYXJ5KGN1cnJlbnRT
Y29wZSwgZmxvd0luZm8pOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Zsb3cvRmxvd0NvbnRleHQuamF2
YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9mbG93L0Zsb3dDb250ZXh0LmphdmEKaW5kZXggMGQ0MmViMi4uZmRlYWZmNyAx
MDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2Zsb3cvRmxvd0NvbnRleHQuamF2YQorKysgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvZmxv
dy9GbG93Q29udGV4dC5qYXZhCkBAIC05OTksNiArOTk5LDkgQEAgcHVibGljIHZvaWQgcmVjb3Jk
TnVsbGl0eU1pc21hdGNoKEJsb2NrU2NvcGUgY3VycmVudFNjb3BlLCBFeHByZXNzaW9uIGV4cHJl
c3Npb24KIAkJCWN1cnJlbnRDb250ZXh0ID0gY3VycmVudENvbnRleHQucGFyZW50OwogCQl9CiAJ
fQorCisJaWYgKChleHByZXNzaW9uLmltcGxpY2l0Q29udmVyc2lvbiAmIFR5cGVJZHMuQk9YSU5H
KSAhPSAwKQorCQkJcmV0dXJuOwogCS8vIG5vIHJlYXNvbiB0byBkZWZlciwgc28gcmVwb3J0IG5v
dzoKIAljaGFyW11bXSBhbm5vdGF0aW9uTmFtZSA9IGN1cnJlbnRTY29wZS5lbnZpcm9ubWVudCgp
LmdldE5vbk51bGxBbm5vdGF0aW9uTmFtZSgpOwogCWN1cnJlbnRTY29wZS5wcm9ibGVtUmVwb3J0
ZXIoKS5udWxsaXR5TWlzbWF0Y2goZXhwcmVzc2lvbiwgcHJvdmlkZWRUeXBlLCBleHBlY3RlZFR5
cGUsIG51bGxTdGF0dXMsIGFubm90YXRpb25OYW1lKTsK
</data>

          </attachment>
      

    </bug>

</bugzilla>