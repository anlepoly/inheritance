<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>412149</bug_id>
          
          <creation_ts>2013-07-02 18:35:00 -0400</creation_ts>
          <short_desc>[1.8][compiler] Emit repeated annotations into the designated container</short_desc>
          <delta_ts>2013-10-14 21:12:24 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>407864</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Jesper Moller">jesper</reporter>
          <assigned_to name="Jesper Moller">jesper</assigned_to>
          <cc>deepakazad</cc>
    
    <cc>jarthana</cc>
    
    <cc>markus_keller</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2279968</commentid>
    <comment_count>0</comment_count>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-07-02 18:35:38 -0400</bug_when>
    <thetext>When an annotation is repeated, it should be emitted as part of its container annotation.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2310964</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-09-26 00:25:38 -0400</bug_when>
    <thetext>I wonder if this task would be simplified a good bit if the abstract
Annotation class is changed to have:

        Annotation annotationToEmit = this;
	Annotation getAnnotationToEmit() {
		return this.annotationToEmit;
	}

and when we see a repeated annotation, fabricate a suitable container annotation
(ASTNode)  and make it the shared annotationToEmit for the repeating
annotations with each repeated annotation being accumulated in the value-pairs 
of the container.

Then at code generation time, emit code for the annotation that corresponds to getAnnotationToEmit() rather than for the annotation itself directly (making
sure not to emit the container multiple times)

Please feel free to ignore :) I didn&apos;t prototype this, so don&apos;t know how well
it would work in practice.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2310995</commentid>
    <comment_count>2</comment_count>
      <attachid>235833</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-09-26 04:34:41 -0400</bug_when>
    <thetext>Created attachment 235833
A sketch

Couldn&apos;t resist prototyping :) This shows very early sketch of what it *could*
look like.

Note: I don&apos;t plan to continue with this, so the fun is all yours to have.
Take a look and see if you want to leverage some elements of the solution.
I am fine with any alternates you come up with.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2314993</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-07 07:50:50 -0400</bug_when>
    <thetext>While reviewing JSR308 APT work, it came up that we also need to think
about how to encode repeated annotations into compiler and DOM bindings. 

One option is to not do anything, i.e let them appear repeated in bindings. 

Code generation for annotations happens from the AST. So this is not an issue
anyway.

For APT TypeMirrors and Elements, we can present a different world view
all within APT.

Comments ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2315067</commentid>
    <comment_count>4</comment_count>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-10-07 09:51:23 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #3)
&gt; While reviewing JSR308 APT work, it came up that we also need to think
&gt; about how to encode repeated annotations into compiler and DOM bindings. 
&gt; 
&gt; One option is to not do anything, i.e let them appear repeated in bindings. 

Should the DOM bindings not work the same between source and binary bindings? I that case, we should choose a method which works the same.

If I understand correctly, that *may* translate into checking each binary target&apos;s annotation for potentially being a container (an annotation type with a X[] value()) on a binary annotation target for a @Repeatable annotation on X, before determining whether to expand it into it&apos;s constituent repeated annotations.

&gt; For APT TypeMirrors and Elements, we can present a different world view
&gt; all within APT.
&gt; 
&gt; Comments ?

This may not be super-high priority, but to get it &apos;right&apos; we should probably make the same extensions to the DOM API as they did in reflection and the Element API.

If it walks like a hack, and quacks like a hack, perhaps it is a hack...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2315378</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-07 23:01:46 -0400</bug_when>
    <thetext>(In reply to Jesper Moller from comment #4)

&gt; If I understand correctly, that *may* translate into checking each binary
&gt; target&apos;s annotation for potentially being a container (an annotation type
&gt; with a X[] value()) on a binary annotation target for a @Repeatable
&gt; annotation on X, before determining whether to expand it into it&apos;s
&gt; constituent repeated annotations.

This may be an overkill, I am not sure DOM clients would care - We can present
a world view that is consistent with what is on the bindings which could be:

    - Repeated annotations on bindings that originate from source constructs.
    - The container on bindings that originate from binary constructs.
    - Document this as being the case.

Markus, we need UI team&apos;s opinion here. Do you have an example that shows
UI and other clients would care to see either repeated annotations or the
container annotation consistently ? Or that they need the ability to unwrap
the contained elements ? 

&gt; This may not be super-high priority, but to get it &apos;right&apos; we should
&gt; probably make the same extensions to the DOM API as they did in reflection
&gt; and the Element API.

That would be true, only if DOM/AST clients care/have a use for such 
facilities. The whole idea of a container is brought into the picture
because there could be clients for the annotation processing framework that
could be surprised/unprepared for repeated annotations. Because the
existing API (getAnnotation(Class&lt;A&gt;)) could return at most one annotation 
of a certain type. On the DOM API side, I don&apos;t think we have an API that 
has such limitations. IBinding.getAnnotations() is the only API that I see: 
this can return either repeated annotations or their container.

&gt; If it walks like a hack, and quacks like a hack, perhaps it is a hack...

:)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2316454</commentid>
    <comment_count>6</comment_count>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-10-09 17:28:48 -0400</bug_when>
    <thetext>I&apos;m pretty close with the final patch for this, just getting the various corner-case tests in, and suppressing the duplicated errors from typechecking the container annotation in the presence of errors regarding the containing annotation, or rather, preventing such typechecking.

Will post tomorrow.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2317499</commentid>
    <comment_count>7</comment_count>
      <attachid>236424</attachid>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-10-11 19:55:03 -0400</bug_when>
    <thetext>Created attachment 236424
A proposed solution

This is a proposed solution, based on the sketch. There are parts that I find less elegant, including the use of &apos;suppressed&apos; annotations (i.e. all but the first repeated annotation) -- also the error suppression is not really elegant.

Improvements are welcome!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2317556</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-12 09:39:22 -0400</bug_when>
    <thetext>Thanks for the patch Jesper, I have been doing some black box testing
and things look OK, except for that repeated type annotations are
not packaged into containers. Don&apos;t worry I have this covered already

Totally fortuitously, the exiting code lends itself very well to the
code generator not choosing to emit an annotation at the last possible
moment, at the deepest leaf level method viz ClassFile#generateAnnotation.

In ClassFile.generateRuntimeTypeAnnotations: I was puzzled by this code:

if ((annotationContext.visibility &amp; AnnotationContext.INVISIBLE) != 0) {
	int currentAnnotationOffset = this.contentsOffset;
        generateTypeAnnotation(annotationContext, currentAnnotationOffset);
	invisibleTypeAnnotationsCounter--;
	if (this.contentsOffset != currentAnnotationOffset) {
	    counter++;
	}
}

as to why this.contentsOffset would not change if we are emitting an
annotation just above.

Turns out this is just copy + paste + pound from generateRuntimeAnnotations().
generateAnnotation can return without anything if the annotation binding is
null - Curious that the code would resort to such checks and not instead
make generateAnnotation return true/false.

Anyways, not complaining about it ! This works perfectly for us and we
can check in the leaf routine if the annotation is packaged and emitted
already and just return.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2317619</commentid>
    <comment_count>9</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-13 10:25:48 -0400</bug_when>
    <thetext>(In reply to Jesper Moller from comment #7)
&gt; Created attachment 236424 [details]
&gt; A proposed solution
&gt; 
&gt; This is a proposed solution, based on the sketch. There are parts that I
&gt; find less elegant, including the use of &apos;suppressed&apos; annotations (i.e. all
&gt; but the first repeated annotation) -- also the error suppression is not
&gt; really elegant.
&gt; 
&gt; Improvements are welcome!

OK, Thanks for the patch, I cleaned it up a bit and released. Please take a 
look at http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=3c8b95412c50bb73a8372fbf9db9df68231cc311.

I eliminated setContainer, getContainer, isSuppressed() et all in favor
of just getPersistibleAnnotation and setPersistibleAnnotation.

Also look at the creation of ProblemReferenceBindings to tag an error
scenario.

Type annotations support hooked in: New tests that several sites have been
added.

Package annotation tests enabled as a disassembler test here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=618a6ff3d34de5a5e41db8b1f1893c42061e44cd

I plan to follow up with another round of polish. In particular, I would
like to settle on this nomenclature:

    - Repeating annotation stands for annotation instance that repeats.
    - Repeatable annotation type stands for the declaration context.
      or when we have to refer to the type binding for the annotation type.    
    - Container annotation type -&gt; type binding for the container.
    - Container - instance.

I already cleaned up things a bit, but there is more to do.

I also plan to inline some methods that in the final implementation
get called just from a single place.

Overall, terrific contribution and a big help, Thank You !</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2317688</commentid>
    <comment_count>10</comment_count>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-10-14 03:20:51 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #9)
&gt; (In reply to Jesper Moller from comment #7)
&gt; &gt; Improvements are welcome!
&gt; 
&gt; OK, Thanks for the patch, I cleaned it up a bit and released.

&quot;A bit&quot;? I do believe you are being modest here. :-)

&gt; I eliminated setContainer, getContainer, isSuppressed() et all in favor
&gt; of just getPersistibleAnnotation and setPersistibleAnnotation.

More elegant that way in Annotation, but the very big scope of &apos;annotation&apos; in the emitting methods in ClassFile really irks me, perhaps a question of taste.

&gt; Also look at the creation of ProblemReferenceBindings to tag an error
&gt; scenario.

Clever.

&gt; I plan to follow up with another round of polish. In particular, I would
&gt; like to settle on this nomenclature:
[...]
&gt;     - Container annotation type -&gt; type binding for the container.
&gt;     - Container - instance.

Shouldn&apos;t that be :
     - Container annotation type -&gt; Containing annotation type binding.
     - Container - instance.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2317722</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-14 04:27:42 -0400</bug_when>
    <thetext>(In reply to Jesper Moller from comment #10)

&gt; &gt; I eliminated setContainer, getContainer, isSuppressed() et all in favor
&gt; &gt; of just getPersistibleAnnotation and setPersistibleAnnotation.
&gt; 
&gt; More elegant that way in Annotation, but the very big scope of &apos;annotation&apos;
&gt; in the emitting methods in ClassFile really irks me, perhaps a question of
&gt; taste.

When you are talking about the &quot;the very big scope of &apos;annotation&apos;
in the emitting methods&quot; are you talking about the new code or the 
existing/prior infrastructure that deals with annotation generation ?

For JEP120, we have added just 12 lines of code in ClassFile.java.
If you count the fact that I nuked 15 LOC by eliminating 
generateWildcardTypeAnnotation(), we accomplished code generation with
-3 LOC :)

Basically we ask an annotation: Hey annotation, what should I emit for
you in the class file and let it answer appropriately.

&gt; &gt; Also look at the creation of ProblemReferenceBindings to tag an error
&gt; &gt; scenario.
&gt; 
&gt; Clever.

Just using existing infrastructure, can&apos;t claim credit for it :)

&gt; &gt; I plan to follow up with another round of polish. In particular, I would
&gt; &gt; like to settle on this nomenclature:
&gt; [...]
&gt; &gt;     - Container annotation type -&gt; type binding for the container.
&gt; &gt;     - Container - instance.
&gt; 
&gt; Shouldn&apos;t that be :
&gt;      - Container annotation type -&gt; Containing annotation type binding.
&gt;      - Container - instance.

Right. I made an attempt at harmonizing messages, variable names, method names
etc in:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=533660d1560f1a7aff4c5ccabdcd0cb35c0194c1 

This patch also includes some changes to eliminate needless hunting for
@Repeatable annotation.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2317737</commentid>
    <comment_count>12</comment_count>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-10-14 04:53:07 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #11)
&gt; (In reply to Jesper Moller from comment #10)
&gt; 
&gt; &gt; &gt; I eliminated setContainer, getContainer, isSuppressed() et all in favor
&gt; &gt; &gt; of just getPersistibleAnnotation and setPersistibleAnnotation.
&gt; &gt; 
&gt; &gt; More elegant that way in Annotation, but the very big scope of &apos;annotation&apos;
&gt; &gt; in the emitting methods in ClassFile really irks me, perhaps a question of
&gt; &gt; taste.
&gt; 
&gt; When you are talking about the &quot;the very big scope of &apos;annotation&apos;
&gt; in the emitting methods&quot; are you talking about the new code or the 
&gt; existing/prior infrastructure that deals with annotation generation ?

No, I mean the &apos;annotation&apos; local inside ClassFile.generateRuntimeAnnotations, which is re-used in each loop, where I&apos;d usually prefer to have it isolated to each loop, as an effectively final local variable (shorter scope -&gt; less risk of bad re-use). More lines of non-liveness for an in-scope variable strains the next reader of the code.

But, it would cost one extra line in each loop, turning

if ((annotation = annotations[i].getPersistibleAnnotation()) == null) continue; 

into 

Annotation annotation = annotations[i].getPersistibleAnnotation();
if (annotation == null) continue;

So, it really is just nitpicking.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2318055</commentid>
    <comment_count>13</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-14 21:12:24 -0400</bug_when>
    <thetext>(In reply to Jesper Moller from comment #12)
&gt; No, I mean the &apos;annotation&apos; local inside
&gt; ClassFile.generateRuntimeAnnotations, which is re-used in each loop, where
&gt; I&apos;d usually prefer to have it isolated to each loop, as an effectively final
&gt; local variable (shorter scope -&gt; less risk of bad re-use). More lines of
&gt; non-liveness for an in-scope variable strains the next reader of the code.

OK, I understand now. I don&apos;t quite recall how I ended up hoisting the local
from the loops into method prologue. It is harmless, but I agree the scope
needless spans a larger portion of code than in needs to. Fixed here:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=d469b28de67962080fcf567963cfa5517cd349da

Thanks</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>235833</attachid>
            <date>2013-09-26 04:34:00 -0400</date>
            <delta_ts>2013-10-11 19:55:17 -0400</delta_ts>
            <desc>A sketch</desc>
            <filename>sketch.patch</filename>
            <type>text/plain</type>
            <size>7439</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9DbGFzc0ZpbGUuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9DbGFzc0ZpbGUuamF2
YQppbmRleCA2NWI2ZGJiLi5jY2RjYjBlIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvQ2xhc3NGaWxlLmph
dmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL0NsYXNzRmlsZS5qYXZhCkBAIC0zNDA2LDcgKzM0MDYsNyBAQAogCQlp
bnQgaW52aXNpYmxlQW5ub3RhdGlvbnNDb3VudGVyID0gMDsKIAogCQlmb3IgKGludCBpID0gMDsg
aSA8IGxlbmd0aDsgaSsrKSB7Ci0JCQlBbm5vdGF0aW9uIGFubm90YXRpb24gPSBhbm5vdGF0aW9u
c1tpXTsKKwkJCUFubm90YXRpb24gYW5ub3RhdGlvbiA9IGFubm90YXRpb25zW2ldLmdldFBlcnNp
c3RpYmxlQW5ub3RhdGlvbigpOwogCQkJaWYgKGFubm90YXRpb24uaXNSdW50aW1lSW52aXNpYmxl
KCkgfHwgKGluY2x1ZGVUeXBlVXNlQW5ub3RhdGlvbnMgJiYgYW5ub3RhdGlvbi5pc1J1bnRpbWVU
eXBlSW52aXNpYmxlKCkpKSB7CiAJCQkJaW52aXNpYmxlQW5ub3RhdGlvbnNDb3VudGVyKys7CiAJ
CQl9IGVsc2UgaWYgKGFubm90YXRpb24uaXNSdW50aW1lVmlzaWJsZSgpIHx8IChpbmNsdWRlVHlw
ZVVzZUFubm90YXRpb25zICYmIGFubm90YXRpb24uaXNSdW50aW1lVHlwZVZpc2libGUoKSkpIHsK
ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvQVNUTm9kZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BU1ROb2Rl
LmphdmEKaW5kZXggMjEyYmI0ZS4uMDc3ODFjZiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BU1RO
b2RlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BU1ROb2RlLmphdmEKQEAgLTgwMiwyMSArODAyLDI0
IEBACiAJCQkJCUFubm90YXRpb25CaW5kaW5nIG90aGVyQW5ub3RhdGlvbiA9IGRpc3RpbmN0QW5u
b3RhdGlvbnNbal07CiAJCQkJCWlmIChvdGhlckFubm90YXRpb24gPT0gbnVsbCkgY29udGludWU7
CiAJCQkJCWlmIChvdGhlckFubm90YXRpb24uZ2V0QW5ub3RhdGlvblR5cGUoKSA9PSBhbm5vdGF0
aW9uVHlwZSkgeworCQkJCQkJaWYgKGRpc3RpbmN0QW5ub3RhdGlvbnMgPT0gYW5ub3RhdGlvbnMp
IHsKKwkJCQkJCQlTeXN0ZW0uYXJyYXljb3B5KGRpc3RpbmN0QW5ub3RhdGlvbnMsIDAsIGRpc3Rp
bmN0QW5ub3RhdGlvbnMgPSBuZXcgQW5ub3RhdGlvbkJpbmRpbmdbbGVuZ3RoXSwgMCwgbGVuZ3Ro
KTsKKwkJCQkJCX0KKwkJCQkJCWRpc3RpbmN0QW5ub3RhdGlvbnNbal0gPSBudWxsOyAvLyByZXBv
cnQvcHJvY2VzcyBpdCBvbmx5IG9uY2UKIAkJCQkJCWlmIChhbm5vdGF0aW9uVHlwZS5pc1JlcGVh
dGFibGVBbm5vdGF0aW9uKCkpIHsKLQkJCQkJCQlSZWZlcmVuY2VCaW5kaW5nIHJlc29sdmVkQ29u
dGFpbmVyID0gYW5ub3RhdGlvblR5cGUucmVzb2x2ZUNvbnRhaW5lckFubm90YXRpb24oKTsKLQkJ
CQkJCQlpZiAocmVzb2x2ZWRDb250YWluZXIgIT0gbnVsbCkgewotCQkJCQkJCQkvLyBTaW5jZSB0
aGlzIGlzIGEgcmVwZWF0ZWQgYW5ub3RhdGlvbiwgd2UgbmVlZCB0byBjaGVjayBpZiB0aGUgY29u
dGFpbmVyIGlzIGFsc28gdXNlZCAtIHNvIHN0b3JlIGl0Ci0JCQkJCQkJCS8vIGluIGEgbWFwIG9m
IChjb250YWluZXIncyBSZWZlcmVuY2VCaW5kaW5nIC0+IHRoZSByZXBlYXRlZCBzb3VyY2UgQW5u
b3RhdGlvbikKLQkJCQkJCQkJaWYgKGltcGxpY2l0Q29udGFpbmVyQW5ub3RhdGlvbnMgPT0gbnVs
bCkgaW1wbGljaXRDb250YWluZXJBbm5vdGF0aW9ucyA9IG5ldyBIYXNoTWFwKDMpOwotCQkJCQkJ
CQlpbXBsaWNpdENvbnRhaW5lckFubm90YXRpb25zLnB1dChyZXNvbHZlZENvbnRhaW5lciwgc291
cmNlQW5ub3RhdGlvbnNbaV0pOwotCQkJCQkJCQlBbm5vdGF0aW9uLmNoZWNrQW5ub3RhdGlvbkNv
bnRhaW5lclRhcmdldChzb3VyY2VBbm5vdGF0aW9uc1tpXSwgc2NvcGUsIGFubm90YXRpb25UeXBl
LCByZXNvbHZlZENvbnRhaW5lcik7Ci0JCQkJCQkJfQorCQkJCQkJCUNvbnRhaW5lckFubm90YXRp
b24gY29udGFpbmVyID0gc291cmNlQW5ub3RhdGlvbnNbaV0uZ2V0Q29udGFpbmVyKCk7CisJCQkJ
CQkJaWYgKGNvbnRhaW5lciA9PSBudWxsKSB7ICAvLyBmaXJzdCBlbmNvdW50ZXIgd2l0aCBhIGR1
cGxpY2F0ZS4KKwkJCQkJCQkJUmVmZXJlbmNlQmluZGluZyByZXNvbHZlZENvbnRhaW5lciA9IGFu
bm90YXRpb25UeXBlLnJlc29sdmVDb250YWluZXJBbm5vdGF0aW9uKCk7CisJCQkJCQkJCWlmIChy
ZXNvbHZlZENvbnRhaW5lciAhPSBudWxsICYmIHJlc29sdmVkQ29udGFpbmVyLmlzVmFsaWRCaW5k
aW5nKCkpIHsKKwkJCQkJCQkJCWNvbnRhaW5lciA9IG5ldyBDb250YWluZXJBbm5vdGF0aW9uKHNv
dXJjZUFubm90YXRpb25zW2ldLCByZXNvbHZlZENvbnRhaW5lcik7CisJCQkJCQkJCQlpZiAoaW1w
bGljaXRDb250YWluZXJBbm5vdGF0aW9ucyA9PSBudWxsKSBpbXBsaWNpdENvbnRhaW5lckFubm90
YXRpb25zID0gbmV3IEhhc2hNYXAoMyk7CisJCQkJCQkJCQlpbXBsaWNpdENvbnRhaW5lckFubm90
YXRpb25zLnB1dChyZXNvbHZlZENvbnRhaW5lciwgc291cmNlQW5ub3RhdGlvbnNbaV0pOworCQkJ
CQkJCQkJQW5ub3RhdGlvbi5jaGVja0Fubm90YXRpb25Db250YWluZXJUYXJnZXQoc291cmNlQW5u
b3RhdGlvbnNbaV0sIHNjb3BlLCBhbm5vdGF0aW9uVHlwZSwgcmVzb2x2ZWRDb250YWluZXIpOwor
CQkJCQkJCQl9CisJCQkJCQkJfSAKKwkJCQkJCQljb250YWluZXIuYWRkQ29udGFpbmVlKHNvdXJj
ZUFubm90YXRpb25zW2pdKTsKIAkJCQkJCX0gZWxzZSB7CiAJCQkJCQkJZm91bmREdXBsaWNhdGUg
PSB0cnVlOwotCQkJCQkJCWlmIChkaXN0aW5jdEFubm90YXRpb25zID09IGFubm90YXRpb25zKSB7
Ci0JCQkJCQkJCVN5c3RlbS5hcnJheWNvcHkoZGlzdGluY3RBbm5vdGF0aW9ucywgMCwgZGlzdGlu
Y3RBbm5vdGF0aW9ucyA9IG5ldyBBbm5vdGF0aW9uQmluZGluZ1tsZW5ndGhdLCAwLCBsZW5ndGgp
OwotCQkJCQkJCX0KLQkJCQkJCQlkaXN0aW5jdEFubm90YXRpb25zW2pdID0gbnVsbDsgLy8gcmVw
b3J0IGl0IG9ubHkgb25jZQogCQkJCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmR1cGxpY2F0
ZUFubm90YXRpb24oc291cmNlQW5ub3RhdGlvbnNbal0sIHNjb3BlLmNvbXBpbGVyT3B0aW9ucygp
LnNvdXJjZUxldmVsKTsKIAkJCQkJCX0KIAkJCQkJfQpAQCAtODM5LDYgKzg0Miw3IEBACiAJCXJl
dHVybiBhbm5vdGF0aW9uczsKIAl9CiAJCisJCiAJLyoqCVJlc29sdmUgSlNSMzA4IGFubm90YXRp
b25zIG9uIGEgdHlwZSByZWZlcmVuY2UsIGFycmF5IGNyZWF0aW9uIGV4cHJlc3Npb24gb3IgYSB3
aWxkY2FyZC4gVHlwZSBwYXJhbWV0ZXJzIGdvIGRpcmVjdGx5IHRvIHRoZSBzdWJyb3V0aW5lLAog
CSAgICBCeSBjb25zdHJ1Y3Rpb24gdGhlIGJpbmRpbmdzIGFzc29jaWF0ZWQgd2l0aCBRVFIsIFBR
VFIgZXRjIGdldCByZXNvbHZlZCBmaXJzdCBhbmQgdGhlbiBhbm5vdGF0aW9ucyBmb3IgZGlmZmVy
ZW50IGxldmVscyBnZXQgcmVzb2x2ZWQKIAkgICAgYW5kIGFwcGxpZWQgYXQgb25lIGdvLiBMaWtl
d2lzZSBmb3IgbXVsdGlkaW1lbnNpb25hbCBhcnJheXMuCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0
L0Fubm90YXRpb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQW5ub3RhdGlvbi5qYXZhCmluZGV4IDc5YTlh
MmUuLjJjMWExNjUgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQW5ub3RhdGlvbi5qYXZhCisrKyBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hc3QvQW5ub3RhdGlvbi5qYXZhCkBAIC00NSw2ICs0NSwxNSBAQAogICovCiBwdWJs
aWMgYWJzdHJhY3QgY2xhc3MgQW5ub3RhdGlvbiBleHRlbmRzIEV4cHJlc3Npb24gewogCQorCUNv
bnRhaW5lckFubm90YXRpb24gY29udGFpbmVyOworCQorCXB1YmxpYyBDb250YWluZXJBbm5vdGF0
aW9uIGdldENvbnRhaW5lcigpIHsKKwkJcmV0dXJuIHRoaXMuY29udGFpbmVyOworCX0KKwlwdWJs
aWMgdm9pZCBzZXRDb250YWluZXIoQ29udGFpbmVyQW5ub3RhdGlvbiBjb250YWluZXIpIHsKKwkJ
dGhpcy5jb250YWluZXIgPSBjb250YWluZXI7CisJfQorCQogCS8qKgogCSAqIFJldHVybiB0aGUg
bG9jYXRpb24gZm9yIHRoZSBjb3JyZXNwb25kaW5nIGFubm90YXRpb24gaW5zaWRlIHRoZSB0eXBl
IHJlZmVyZW5jZSwgPGNvZGU+bnVsbDwvY29kZT4gaWYgbm9uZS4KIAkgKi8KQEAgLTExNzUsNCAr
MTE4NCw3IEBACiAJcHVibGljIGFic3RyYWN0IHZvaWQgdHJhdmVyc2UoQVNUVmlzaXRvciB2aXNp
dG9yLCBCbG9ja1Njb3BlIHNjb3BlKTsKIAogCXB1YmxpYyBhYnN0cmFjdCB2b2lkIHRyYXZlcnNl
KEFTVFZpc2l0b3IgdmlzaXRvciwgQ2xhc3NTY29wZSBzY29wZSk7CisJcHVibGljIEFubm90YXRp
b24gZ2V0UGVyc2lzdGlibGVBbm5vdGF0aW9uKCkgeworCQlyZXR1cm4gdGhpcy5jb250YWluZXIg
IT0gbnVsbCA/IHRoaXMuY29udGFpbmVyIDogdGhpczsKKwl9CiB9CmRpZmYgLS1naXQgYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvYXN0L0NvbnRhaW5lckFubm90YXRpb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQ29udGFpbmVyQW5u
b3RhdGlvbi5qYXZhCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAuLmNhMmQzYmMK
LS0tIC9kZXYvbnVsbAorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0NvbnRhaW5lckFubm90YXRpb24uamF2YQpA
QCAtMCwwICsxLDM3IEBACitwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxl
ci5hc3Q7CisKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3Vw
LlJlZmVyZW5jZUJpbmRpbmc7CisKK3B1YmxpYyBjbGFzcyBDb250YWluZXJBbm5vdGF0aW9uIGV4
dGVuZHMgU2luZ2xlTWVtYmVyQW5ub3RhdGlvbiB7CisJCisJQW5ub3RhdGlvbiBbXSBjb250YWlu
ZWVzOworCUFycmF5SW5pdGlhbGl6ZXIgbWVtYmVyVmFsdWVzOworCWJvb2xlYW4gZW1pdHRlZEFs
cmVhZHkgPSBmYWxzZTsKKwkKKwlwdWJsaWMgQ29udGFpbmVyQW5ub3RhdGlvbihBbm5vdGF0aW9u
IGFubm90YXRpb24sIFJlZmVyZW5jZUJpbmRpbmcgcmVzb2x2ZWRDb250YWluZXIpIHsKKwkJY2hh
ciBbXVtdIGNvbnRhaW5lck5hbWUgPSByZXNvbHZlZENvbnRhaW5lci5jb21wb3VuZE5hbWU7CisJ
CWlmIChjb250YWluZXJOYW1lLmxlbmd0aCA9PSAxKSB7CisJCQl0aGlzLnR5cGUgPSBuZXcgU2lu
Z2xlVHlwZVJlZmVyZW5jZShjb250YWluZXJOYW1lWzBdLCAwKTsKKwkJfSBlbHNlIHsKKwkJCXRo
aXMudHlwZSA9IG5ldyBRdWFsaWZpZWRUeXBlUmVmZXJlbmNlKGNvbnRhaW5lck5hbWUsIG5ldyBs
b25nIFtjb250YWluZXJOYW1lLmxlbmd0aF0pOworCQl9CisJCQorCQl0aGlzLnJlc29sdmVkVHlw
ZSA9IHJlc29sdmVkQ29udGFpbmVyOworCQl0aGlzLnJlY2lwaWVudCA9IGFubm90YXRpb24ucmVj
aXBpZW50OworCQl0aGlzLmNvbnRhaW5lZXMgPSBuZXcgQW5ub3RhdGlvblswXTsKKwkJdGhpcy5t
ZW1iZXJWYWx1ZSA9IHRoaXMubWVtYmVyVmFsdWVzID0gbmV3IEFycmF5SW5pdGlhbGl6ZXIoKTsK
KwkJYWRkQ29udGFpbmVlKGFubm90YXRpb24pOworCX0KKwkKKwlwdWJsaWMgdm9pZCBhZGRDb250
YWluZWUoQW5ub3RhdGlvbiBhbm5vdGF0aW9uKSB7CisJCWZpbmFsIGludCBsZW5ndGggPSB0aGlz
LmNvbnRhaW5lZXMubGVuZ3RoOworCQlTeXN0ZW0uYXJyYXljb3B5KHRoaXMuY29udGFpbmVlcywg
MCwgdGhpcy5jb250YWluZWVzID0gbmV3IEFubm90YXRpb25bbGVuZ3RoICsgMV0sIDAsIGxlbmd0
aCk7CisJCXRoaXMuY29udGFpbmVlc1tsZW5ndGhdID0gYW5ub3RhdGlvbjsKKwkJdGhpcy5tZW1i
ZXJWYWx1ZXMuZXhwcmVzc2lvbnMgPSB0aGlzLmNvbnRhaW5lZXM7CisJCWFubm90YXRpb24uc2V0
Q29udGFpbmVyKHRoaXMpOworCX0KKwkKKwlib29sZWFuIGVtaXR0ZWRBbHJlYWR5KCkgeworCQly
ZXR1cm4gdGhpcy5lbWl0dGVkQWxyZWFkeTsKKwl9Cit9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0
L1NpbmdsZU1lbWJlckFubm90YXRpb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvU2luZ2xlTWVtYmVyQW5u
b3RhdGlvbi5qYXZhCmluZGV4IDJlZmYzODkuLjBiOTgyNGIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvU2luZ2xlTWVtYmVyQW5ub3RhdGlvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvU2luZ2xlTWVt
YmVyQW5ub3RhdGlvbi5qYXZhCkBAIC0zMCw2ICszMCwxMCBAQAogCQl0aGlzLnNvdXJjZVN0YXJ0
ID0gc291cmNlU3RhcnQ7CiAJCXRoaXMuc291cmNlRW5kID0gdHlwZS5zb3VyY2VFbmQ7CiAJfQor
CQorCXB1YmxpYyBTaW5nbGVNZW1iZXJBbm5vdGF0aW9uKCkgeworCQkvLyBmb3Igc3ViY2xhc3Nl
cy4KKwl9CiAKIAlwdWJsaWMgRWxlbWVudFZhbHVlUGFpcltdIGNvbXB1dGVFbGVtZW50VmFsdWVQ
YWlycygpIHsKIAkJcmV0dXJuIG5ldyBFbGVtZW50VmFsdWVQYWlyW10ge21lbWJlclZhbHVlUGFp
cnMoKVswXS5jb21waWxlckVsZW1lbnRQYWlyfTs=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>236424</attachid>
            <date>2013-10-11 19:55:00 -0400</date>
            <delta_ts>2013-10-11 19:55:03 -0400</delta_ts>
            <desc>A proposed solution</desc>
            <filename>bug_412149.txt</filename>
            <type>text/plain</type>
            <size>31556</size>
            <attacher name="Jesper Moller">jesper</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1JlcGVhdGFibGVBbm5v
dGF0aW9uVGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3Jj
L29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vUmVwZWF0YWJs
ZUFubm90YXRpb25UZXN0LmphdmEKaW5kZXggMWYyZjVlMC4uNTY4Nzg2ZCAxMDA2NDQKLS0tIGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9j
b3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vUmVwZWF0YWJsZUFubm90YXRpb25UZXN0Lmph
dmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xp
cHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vUmVwZWF0YWJsZUFubm90YXRp
b25UZXN0LmphdmEKQEAgLTEyLDYgKzEyLDcgQEAKICAqIENvbnRyaWJ1dG9yczoKICAqICAgICBK
ZXNwZXIgUyBNb2xsZXIgLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24KICAqICAgICAJ
CQkJCUJ1ZyA0MTIxNTEgLSBbMS44XVtjb21waWxlcl0gQ2hlY2sgcmVwZWF0aW5nIGFubm90YXRp
b24ncyBjb2xsZWN0aW9uIHR5cGUKKyAqICAgICAJCQkJCUJ1ZyA0MTIxNDkgLSBbMS44XVtjb21w
aWxlcl0gRW1pdCByZXBlYXRlZCBhbm5vdGF0aW9ucyBpbnRvIHRoZSBkZXNpZ25hdGVkIGNvbnRh
aW5lcgogICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5j
b3JlLnRlc3RzLmNvbXBpbGVyLnJlZ3Jlc3Npb247CiAKQEAgLTI3LDcgKzI4LDcgQEAgcHVibGlj
IGNsYXNzIFJlcGVhdGFibGVBbm5vdGF0aW9uVGVzdCBleHRlbmRzIEFic3RyYWN0Q29tcGFyYWJs
ZVRlc3QgewogCS8vIFN0YXRpYyBpbml0aWFsaXplciB0byBzcGVjaWZ5IHRlc3RzIHN1YnNldCB1
c2luZyBURVNUU18qIHN0YXRpYyB2YXJpYWJsZXMKIAkvLyBBbGwgc3BlY2lmaWVkIHRlc3RzIHdo
aWNoIGRvIG5vdCBiZWxvbmcgdG8gdGhlIGNsYXNzIGFyZSBza2lwcGVkLi4uCiAJc3RhdGljIHsK
LS8vCQlURVNUU19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7ICJ0ZXN0MDA2IiB9OworLy8JCVRFU1RT
X05BTUVTID0gbmV3IFN0cmluZ1tdIHsgInRlc3QwMzYiIH07CiAvLwkJVEVTVFNfTlVNQkVSUyA9
IG5ldyBpbnRbXSB7IDI5NyB9OwogLy8JCVRFU1RTX1JBTkdFID0gbmV3IGludFtdIHsgMjk0LCAt
MSB9OwogCX0KQEAgLTgzNyw0ICs4MzgsMTgwIEBAIHB1YmxpYyBjbGFzcyBSZXBlYXRhYmxlQW5u
b3RhdGlvblRlc3QgZXh0ZW5kcyBBYnN0cmFjdENvbXBhcmFibGVUZXN0IHsKIAkJCSJUaGUgcmVw
ZWF0YWJsZSBhbm5vdGF0aW9uIEBUIGlzIGRpc2FsbG93ZWQgZm9yIHRoaXMgbG9jYXRpb24gc2lu
Y2UgaXRzIGNvbnRhaW5lciBhbm5vdGF0aW9uIEBUQyBpcyBkaXNhbGxvd2VkIGF0IHRoaXMgbG9j
YXRpb25cbiIgKyAKIAkJCSItLS0tLS0tLS0tXG4iKTsKIAl9CQorCS8vIDQxMjE0OTogWzEuOF1b
Y29tcGlsZXJdIEVtaXQgcmVwZWF0ZWQgYW5ub3RhdGlvbnMgaW50byB0aGUgZGVzaWduYXRlZCBj
b250YWluZXIKKwlwdWJsaWMgdm9pZCB0ZXN0MDM2KCkgeworCQl0aGlzLnJ1bkNvbmZvcm1UZXN0
KAorCQkJbmV3IFN0cmluZ1tdIHsKKwkJCQkiWC5qYXZhIiwKKwkJCQkiaW1wb3J0IGphdmEubGFu
Zy5hbm5vdGF0aW9uLlJlcGVhdGFibGU7XG4iICsKKwkJCQkiaW1wb3J0IGphdmEubGFuZy5hbm5v
dGF0aW9uLlJldGVudGlvbjtcbiIgKworCQkJCSJpbXBvcnQgc3RhdGljIGphdmEubGFuZy5hbm5v
dGF0aW9uLlJldGVudGlvblBvbGljeS4qO1xuIiArCisJCQkJIlxuIiArCisJCQkJIkBSZXRlbnRp
b24oUlVOVElNRSlcbiIgKworCQkJCSJAaW50ZXJmYWNlIEF0dHJDb250YWluZXIge1xuIiArCisJ
CQkJIiAgcHVibGljIEF0dHJbXSB2YWx1ZSgpO1xuIiArCisJCQkJIn1cbiIgKworCQkJCSJAUmV0
ZW50aW9uKFJVTlRJTUUpXG4iICsKKwkJCQkiQFJlcGVhdGFibGUoQXR0ckNvbnRhaW5lci5jbGFz
cylcbiIgKyAKKwkJCQkiQGludGVyZmFjZSBBdHRyIHtcbiIgKworCQkJCSIgIHB1YmxpYyBpbnQg
dmFsdWUoKSBkZWZhdWx0IC0xO1xuIiArCisJCQkJIn1cbiIgKworCQkJCSJcbiIgKworCQkJCSJA
QXR0cigxKSBAQXR0cigyKVxuIiArCisJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJCSIg
IHB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZyBhcmdzW10pIHtcbiIgKworCQkJCSIgIAlP
YmplY3QgZVtdID0gWC5jbGFzcy5nZXRBbm5vdGF0aW9uc0J5VHlwZShBdHRyLmNsYXNzKTtcbiIg
KworCQkJCSIgIAlmb3IgKGludCBpPTA7IGk8ZS5sZW5ndGg7KytpKSBTeXN0ZW0ub3V0LnByaW50
KGVbaV0gKyBcIiBcIik7XG4iICsKKwkJCQkiICB9XG4iICsKKwkJCQkifSIKKwkJCX0sCisJCQki
QEF0dHIodmFsdWU9MSkgQEF0dHIodmFsdWU9MikiKTsKKwkJCisJfQorCS8vIDQxMjE0OTogWzEu
OF1bY29tcGlsZXJdIEVtaXQgcmVwZWF0ZWQgYW5ub3RhdGlvbnMgaW50byB0aGUgZGVzaWduYXRl
ZCBjb250YWluZXIKKwkvLyBUZXN0IHRoYXQgb25seSByZXBldGl0aW9ucyBnbyBpbnRvIHRoZSBj
b250YWluZXIgCisJcHVibGljIHZvaWQgdGVzdDAzNygpIHsKKwkJdGhpcy5ydW5Db25mb3JtVGVz
dCgKKwkJCW5ldyBTdHJpbmdbXSB7CisJCQkJIlguamF2YSIsCisJCQkJImltcG9ydCBqYXZhLmxh
bmcuYW5ub3RhdGlvbi5SZXBlYXRhYmxlO1xuIiArCisJCQkJImltcG9ydCBqYXZhLmxhbmcuYW5u
b3RhdGlvbi5SZXRlbnRpb247XG4iICsKKwkJCQkiaW1wb3J0IHN0YXRpYyBqYXZhLmxhbmcuYW5u
b3RhdGlvbi5SZXRlbnRpb25Qb2xpY3kuKjtcbiIgKworCQkJCSJcbiIgKworCQkJCSJAUmV0ZW50
aW9uKFJVTlRJTUUpXG4iICsKKwkJCQkiQGludGVyZmFjZSBBdHRyQ29udGFpbmVyIHtcbiIgKwor
CQkJCSIgIHB1YmxpYyBBdHRyW10gdmFsdWUoKTtcbiIgKworCQkJCSJ9XG4iICsKKwkJCQkiQFJl
dGVudGlvbihSVU5USU1FKVxuIiArCisJCQkJIkBSZXBlYXRhYmxlKEF0dHJDb250YWluZXIuY2xh
c3MpXG4iICsgCisJCQkJIkBpbnRlcmZhY2UgQXR0ciB7XG4iICsKKwkJCQkiICBwdWJsaWMgaW50
IHZhbHVlKCkgZGVmYXVsdCAtMTtcbiIgKworCQkJCSJ9XG4iICsKKwkJCQkiXG4iICsKKwkJCQki
cHVibGljIGNsYXNzIFgge1xuIiArCisJCQkJIiAgQEF0dHIoMSkgY2xhc3MgWTEge31cbiIgKwor
CQkJCSIgIEBBdHRyKDEpIEBBdHRyKDIpIGNsYXNzIFkyIHt9IFxuIiArCisJCQkJIiAgcHVibGlj
IHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nIGFyZ3NbXSkge1xuIiArCisJCQkJIiAgCVN5c3RlbS5v
dXQucHJpbnRsbihcIlkxOiBcIiArIFkxLmNsYXNzLmdldEFubm90YXRpb24oQXR0ci5jbGFzcykp
O1xuIiArCisJCQkJIiAgCVN5c3RlbS5vdXQucHJpbnRsbihcIlkyOiBcIiArIFkyLmNsYXNzLmdl
dEFubm90YXRpb24oQXR0ci5jbGFzcykpO1xuIiArCisJCQkJIiAgCVN5c3RlbS5vdXQucHJpbnRs
bihcIlkxOiBcIiArIFkxLmNsYXNzLmdldEFubm90YXRpb24oQXR0ckNvbnRhaW5lci5jbGFzcykp
O1xuIiArCisJCQkJIiAgCVN5c3RlbS5vdXQucHJpbnRsbihcIlkyOiBcIiArIFkyLmNsYXNzLmdl
dEFubm90YXRpb24oQXR0ckNvbnRhaW5lci5jbGFzcykpO1xuIiArCisJCQkJIiAgfVxuIiArCisJ
CQkJIn0iCisJCQl9LAorCQkJIlkxOiBAQXR0cih2YWx1ZT0xKVxuIiArIAorCQkJIlkyOiBudWxs
XG4iICsgCisJCQkiWTE6IG51bGxcbiIgKyAKKwkJCSJZMjogQEF0dHJDb250YWluZXIodmFsdWU9
W0BBdHRyKHZhbHVlPTEpLCBAQXR0cih2YWx1ZT0yKV0pIik7CisJCQorCX0KKwkvLyA0MTIxNDk6
IFsxLjhdW2NvbXBpbGVyXSBFbWl0IHJlcGVhdGVkIGFubm90YXRpb25zIGludG8gdGhlIGRlc2ln
bmF0ZWQgY29udGFpbmVyCisJLy8gVGVzdCB0aGF0IHRoZSByZXRlbnRpb24gZnJvbSB0aGUgY29u
dGFpbmluZyBhbm5vdGF0aW9uIGlzIHVzZWQKKwlwdWJsaWMgdm9pZCB0ZXN0MDM4KCkgeworCQl0
aGlzLnJ1bkNvbmZvcm1UZXN0KAorCQkJbmV3IFN0cmluZ1tdIHsKKwkJCQkiWC5qYXZhIiwKKwkJ
CQkiaW1wb3J0IGphdmEubGFuZy5hbm5vdGF0aW9uLlJlcGVhdGFibGU7XG4iICsKKwkJCQkiaW1w
b3J0IGphdmEubGFuZy5hbm5vdGF0aW9uLlJldGVudGlvbjtcbiIgKworCQkJCSJpbXBvcnQgc3Rh
dGljIGphdmEubGFuZy5hbm5vdGF0aW9uLlJldGVudGlvblBvbGljeS4qO1xuIiArCisJCQkJIlxu
IiArCisJCQkJIkBSZXRlbnRpb24oUlVOVElNRSlcbiIgKworCQkJCSJAaW50ZXJmYWNlIEF0dHJD
b250YWluZXIge1xuIiArCisJCQkJIiAgcHVibGljIEF0dHJbXSB2YWx1ZSgpO1xuIiArCisJCQkJ
In1cbiIgKworCQkJCSJAUmV0ZW50aW9uKFNPVVJDRSlcbiIgKworCQkJCSJAUmVwZWF0YWJsZShB
dHRyQ29udGFpbmVyLmNsYXNzKVxuIiArIAorCQkJCSJAaW50ZXJmYWNlIEF0dHIge1xuIiArCisJ
CQkJIiAgcHVibGljIGludCB2YWx1ZSgpIGRlZmF1bHQgLTE7XG4iICsKKwkJCQkifVxuIiArCisJ
CQkJIlxuIiArCisJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJCSIgIEBBdHRyKDEpIGNs
YXNzIFkxIHt9XG4iICsKKwkJCQkiICBAQXR0cigxKSBAQXR0cigyKSBjbGFzcyBZMiB7fSBcbiIg
KworCQkJCSIgIHB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZyBhcmdzW10pIHtcbiIgKwor
CQkJCSIgIAlTeXN0ZW0ub3V0LnByaW50bG4oXCJZMSBoYXMgXCIgKyBZMS5jbGFzcy5nZXRBbm5v
dGF0aW9uc0J5VHlwZShBdHRyLmNsYXNzKS5sZW5ndGgpO1xuIiArCisJCQkJIiAgCVN5c3RlbS5v
dXQucHJpbnRsbihcIlkyIGhhcyBcIiArIFkyLmNsYXNzLmdldEFubm90YXRpb25zQnlUeXBlKEF0
dHIuY2xhc3MpLmxlbmd0aCk7XG4iICsKKwkJCQkiICB9XG4iICsKKwkJCQkifSIKKwkJCX0sCisJ
CQkiWTEgaGFzIDBcbiIgKyAKKwkJCSJZMiBoYXMgMiIpOworCQkKKwl9CisJLy8gNDEyMTQ5OiBb
MS44XVtjb21waWxlcl0gRW1pdCByZXBlYXRlZCBhbm5vdGF0aW9ucyBpbnRvIHRoZSBkZXNpZ25h
dGVkIGNvbnRhaW5lcgorCS8vIFRlc3QgdGhhdCByZXBlYXRlZCBhbm5vdGF0aW9ucyBjYW4gYXBw
ZWFyIGF0IHBhY2thZ2UgdGFyZ2V0cyAtIGRvZXNuJ3Qgd29yayBkdWUgdG8gVmFyaWZ5Q2xhc3NM
b2FkZXIgbm90IGRlZmluaW5nIHBhY2thZ2VzLgorCXB1YmxpYyB2b2lkIF90ZXN0MDM5KCkgewor
CQlTdHJpbmdbXSB0ZXN0RmlsZXMgPSB7CisJCQkJInJlcGVhdGFibGUvTWFpbi5qYXZhIiwKKwkJ
CQkicGFja2FnZSByZXBlYXRhYmxlO1xuIiArCisJCQkJInB1YmxpYyBjbGFzcyBNYWluIHtcbiIg
KworCQkJCSIgICAgcHVibGljIHN0YXRpYyB2b2lkIG1haW4gKFN0cmluZ1tdIGFyZ3YpIHtcbiIg
KyAKKwkJCQkiICAgICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihyZXBlYXRhYmxlLk1haW4uY2xh
c3MuZ2V0Q2xhc3NMb2FkZXIoKS5nZXRDbGFzcygpLmdldFNpbXBsZU5hbWUoKSk7XG4iICsgCisJ
CQkJIiAgICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oXCJQYWNha2FnZSBoYXMgXCIgKyBNYWlu
LmNsYXNzLmdldENsYXNzTG9hZGVyKCkuZ2V0Q2xhc3MoKS5nZXROYW1lKCkpO1xuIiArCisJCQkJ
IiAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKFwiVGhlIHBhY2FrYWdlIGhhcyBcIiArIE1haW4u
Y2xhc3MuZ2V0UGFja2FnZSgpLmdldEFubm90YXRpb25zQnlUeXBlKEZvby5jbGFzcykubGVuZ3Ro
ICsgXCIgYW5ub3RhdGlvbnNcIik7XG4iICsKKwkJCQkiICAgIH07XG4iICsKKwkJCQkifSIsCisK
KwkJCSJyZXBlYXRhYmxlL0Zvb0NvbnRhaW5lci5qYXZhIiwKKwkJCSJwYWNrYWdlIHJlcGVhdGFi
bGU7XG4iICsKKwkJCSJAamF2YS5sYW5nLmFubm90YXRpb24uVGFyZ2V0KGphdmEubGFuZy5hbm5v
dGF0aW9uLkVsZW1lbnRUeXBlLlBBQ0tBR0UpXG4iICsKKwkJCSJAamF2YS5sYW5nLmFubm90YXRp
b24uUmV0ZW50aW9uKGphdmEubGFuZy5hbm5vdGF0aW9uLlJldGVudGlvblBvbGljeS5SVU5USU1F
KVxuIiArCisJCQkicHVibGljIEBpbnRlcmZhY2UgRm9vQ29udGFpbmVyIHtcbiIgKworCQkJIglG
b29bXSB2YWx1ZSgpO1xuIiArCisJCQkifVxuIiwKKworCQkJInJlcGVhdGFibGUvRm9vLmphdmEi
LAorCQkJInBhY2thZ2UgcmVwZWF0YWJsZTtcbiIgKworCQkJIkBqYXZhLmxhbmcuYW5ub3RhdGlv
bi5SZXBlYXRhYmxlKEZvb0NvbnRhaW5lci5jbGFzcylcbiIgKyAKKwkJCSJwdWJsaWMgQGludGVy
ZmFjZSBGb28ge31cbiIsCisKKwkJCSJyZXBlYXRhYmxlL3BhY2thZ2UtaW5mby5qYXZhIiwKKwkJ
CSJARm9vIEBGb29cbiIgKworCQkJInBhY2thZ2UgcmVwZWF0YWJsZTtcbiIgKworCQkJImltcG9y
dCByZXBlYXRhYmxlLkZvbzsiLAorCQl9OworCQlydW5Db25mb3JtVGVzdCh0ZXN0RmlsZXMsICJU
aGUgcGFja2FnZSBoYXMgMiBhbm5vdGF0aW9ucyIpOworCX0KKwkvLyA0MTIxNDk6IFsxLjhdW2Nv
bXBpbGVyXSBFbWl0IHJlcGVhdGVkIGFubm90YXRpb25zIGludG8gdGhlIGRlc2lnbmF0ZWQgY29u
dGFpbmVyCisJLy8gVGVzdCB0aGF0IHJlcGVhdGVkIGFubm90YXRpb25zIHNob3cgdXAgb24gZmll
bGRzLCBtZXRob2RzLCBhbmQgcGFyYW1ldGVycworCXB1YmxpYyB2b2lkIHRlc3QwNDAoKSB7CisJ
CXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCQluZXcgU3RyaW5nW10geworCQkJCSJYLmphdmEiLAor
CQkJCSJpbXBvcnQgamF2YS5sYW5nLnJlZmxlY3QuRmllbGQ7XG4iICsgCisJCQkJImltcG9ydCBq
YXZhLmxhbmcucmVmbGVjdC5NZXRob2Q7XG4iICsgCisJCQkJImltcG9ydCBqYXZhLmxhbmcucmVm
bGVjdC5QYXJhbWV0ZXI7XG4iICsgCisJCQkJImltcG9ydCBqYXZhLmxhbmcuYW5ub3RhdGlvbi5S
ZXBlYXRhYmxlO1xuIiArCisJCQkJImltcG9ydCBqYXZhLmxhbmcuYW5ub3RhdGlvbi5SZXRlbnRp
b247XG4iICsKKwkJCQkiaW1wb3J0IHN0YXRpYyBqYXZhLmxhbmcuYW5ub3RhdGlvbi5SZXRlbnRp
b25Qb2xpY3kuKjtcbiIgKworCQkJCSJcbiIgKworCQkJCSJAUmV0ZW50aW9uKFJVTlRJTUUpXG4i
ICsKKwkJCQkiQGludGVyZmFjZSBBdHRyQ29udGFpbmVyIHtcbiIgKworCQkJCSIgIHB1YmxpYyBB
dHRyW10gdmFsdWUoKTtcbiIgKworCQkJCSJ9XG4iICsKKwkJCQkiQFJldGVudGlvbihSVU5USU1F
KVxuIiArCisJCQkJIkBSZXBlYXRhYmxlKEF0dHJDb250YWluZXIuY2xhc3MpXG4iICsgCisJCQkJ
IkBpbnRlcmZhY2UgQXR0ciB7XG4iICsKKwkJCQkiICBwdWJsaWMgaW50IHZhbHVlKCkgZGVmYXVs
dCAtMTtcbiIgKworCQkJCSJ9XG4iICsKKwkJCQkiXG4iICsKKwkJCQkicHVibGljIGNsYXNzIFgg
e1xuIiArCisJCQkJIiAgIEBBdHRyKDEpIEBBdHRyKDIpIHB1YmxpYyBpbnQgZmllbGQ7XG4iICsg
CisJCQkJIlxuIiArIAorCQkJCSIgICBAQXR0cigzKSBAQXR0cig0KVxuIiArIAorCQkJCSIgICBw
dWJsaWMgc3RhdGljIHZvaWQgbWFpbihAQXR0cig1KSBAQXR0cig2KSBTdHJpbmcgYXJnc1tdKSB0
aHJvd3MgRXhjZXB0aW9uIHtcbiIgKyAKKwkJCQkiICAgIEZpZWxkIGZpZWxkRmllbGQgPSBYLmNs
YXNzLmdldEZpZWxkKFwiZmllbGRcIik7XG4iICsgCisJCQkJIiAgICBkdW1wKGZpZWxkRmllbGQu
Z2V0QW5ub3RhdGlvbnNCeVR5cGUoQXR0ci5jbGFzcykpO1xuIiArIAorCQkJCSIgICAgTWV0aG9k
IG1haW5NZXRob2QgPSBYLmNsYXNzLmdldE1ldGhvZChcIm1haW5cIiwgKG5ldyBTdHJpbmdbMF0p
LmdldENsYXNzKCkpO1xuIiArIAorCQkJCSIgICAgZHVtcChtYWluTWV0aG9kLmdldEFubm90YXRp
b25zQnlUeXBlKEF0dHIuY2xhc3MpKTtcbiIgKyAKKwkJCQkiICAgIFBhcmFtZXRlciBhcmd2UGFy
YW1ldGVyID0gbWFpbk1ldGhvZC5nZXRQYXJhbWV0ZXJzKClbMF07XG4iICsgCisJCQkJIiAgICBk
dW1wKGFyZ3ZQYXJhbWV0ZXIuZ2V0QW5ub3RhdGlvbnNCeVR5cGUoQXR0ci5jbGFzcykpO1xuIiAr
IAorCQkJCSIgICB9XG4iICsgCisJCQkJIiAgIHN0YXRpYyB2b2lkIGR1bXAoQXR0cltdIGF0dHJz
KSB7XG4iICsgCisJCQkJIiAgICBmb3IgKGludCBpPTA7IGk8YXR0cnMubGVuZ3RoOysraSkgU3lz
dGVtLm91dC5wcmludChhdHRyc1tpXSArIFwiIFwiKTtcbiIgKyAKKwkJCQkiICAgfVxuIiArCisJ
CQkJIn0iCisJCQl9LAorCQkJIkBBdHRyKHZhbHVlPTEpIEBBdHRyKHZhbHVlPTIpIEBBdHRyKHZh
bHVlPTMpIEBBdHRyKHZhbHVlPTQpIEBBdHRyKHZhbHVlPTUpIEBBdHRyKHZhbHVlPTYpIik7CisJ
fQogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL0NsYXNzRmlsZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL0NsYXNzRmls
ZS5qYXZhCmluZGV4IDZhYTNlMmUuLjc1NTU2NmIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9DbGFzc0Zp
bGUuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvQ2xhc3NGaWxlLmphdmEKQEAgLTE1LDYgKzE1LDcgQEAKICAq
CQkJCQkJCUJ1ZyA0MDUwNjYgLSBbMS44XVtjb21waWxlcl1bY29kZWdlbl0gSW1wbGVtZW50IGNv
ZGUgZ2VuZXJhdGlvbiBpbmZyYXN0cnVjdHVyZSBmb3IgSlNSMzM1ICAgICAgICAgICAgIAogICoJ
CQkJCQkJQnVnIDQwNjk4MiAtIFsxLjhdW2NvbXBpbGVyXSBHZW5lcmF0aW9uIG9mIE1ldGhvZFBh
cmFtZXRlcnMgQXR0cmlidXRlIGluIGNsYXNzZmlsZQogICoJCQkJCQkJQnVnIDQxNjg4NSAtIFsx
LjhdW2NvbXBpbGVyXUluY29tcGF0aWJsZUNsYXNzQ2hhbmdlIGVycm9yIChlZGl0KQorICoJCQkJ
CQkJQnVnIDQxMjE0OSAtIFsxLjhdW2NvbXBpbGVyXSBFbWl0IHJlcGVhdGVkIGFubm90YXRpb25z
IGludG8gdGhlIGRlc2lnbmF0ZWQgY29udGFpbmVyCiAgKiAgICAgICAgQW5keSBDbGVtZW50IChH
b1Bpdm90YWwsIEluYykgYWNsZW1lbnRAZ29waXZvdGFsLmNvbSAtIENvbnRyaWJ1dGlvbnMgZm9y
CiAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgQnVnIDM4MzYyNCAtIFsxLjhdW2NvbXBpbGVy
XSBSZXZpdmUgY29kZSBnZW5lcmF0aW9uIHN1cHBvcnQgZm9yIHR5cGUgYW5ub3RhdGlvbnMgKGZy
b20gT2xpdmllcidzIHdvcmspCiAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgQnVnIDQwOTIz
NiAtIFsxLjhdW2NvbXBpbGVyXSBUeXBlIGFubm90YXRpb25zIG9uIGludGVyc2VjdGlvbiBjYXN0
IHR5cGVzIGRyb3BwZWQgYnkgY29kZSBnZW5lcmF0b3IKQEAgLTM0MDYsNyArMzQwNyw5IEBAIHB1
YmxpYyBjbGFzcyBDbGFzc0ZpbGUgaW1wbGVtZW50cyBUeXBlQ29uc3RhbnRzLCBUeXBlSWRzIHsK
IAkJaW50IGludmlzaWJsZUFubm90YXRpb25zQ291bnRlciA9IDA7CiAKIAkJZm9yIChpbnQgaSA9
IDA7IGkgPCBsZW5ndGg7IGkrKykgewotCQkJQW5ub3RhdGlvbiBhbm5vdGF0aW9uID0gYW5ub3Rh
dGlvbnNbaV07CisJCQlBbm5vdGF0aW9uIHNvdXJjZUFubm90YXRpb24gPSBhbm5vdGF0aW9uc1tp
XTsKKwkJCWlmIChzb3VyY2VBbm5vdGF0aW9uLmlzU3VwcHJlc3NlZCgpKSBjb250aW51ZTsKKwkJ
CUFubm90YXRpb24gYW5ub3RhdGlvbiA9IHNvdXJjZUFubm90YXRpb24uZ2V0UGVyc2lzdGlibGVB
bm5vdGF0aW9uKCk7CiAJCQlpZiAoYW5ub3RhdGlvbi5pc1J1bnRpbWVJbnZpc2libGUoKSB8fCAo
aW5jbHVkZVR5cGVVc2VBbm5vdGF0aW9ucyAmJiBhbm5vdGF0aW9uLmlzUnVudGltZVR5cGVJbnZp
c2libGUoKSkpIHsKIAkJCQlpbnZpc2libGVBbm5vdGF0aW9uc0NvdW50ZXIrKzsKIAkJCX0gZWxz
ZSBpZiAoYW5ub3RhdGlvbi5pc1J1bnRpbWVWaXNpYmxlKCkgfHwgKGluY2x1ZGVUeXBlVXNlQW5u
b3RhdGlvbnMgJiYgYW5ub3RhdGlvbi5pc1J1bnRpbWVUeXBlVmlzaWJsZSgpKSkgewpAQCAtMzQz
NCw3ICszNDM3LDkgQEAgcHVibGljIGNsYXNzIENsYXNzRmlsZSBpbXBsZW1lbnRzIFR5cGVDb25z
dGFudHMsIFR5cGVJZHMgewogCQkJaW50IGNvdW50ZXIgPSAwOwogCQkJbG9vcDogZm9yIChpbnQg
aSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgewogCQkJCWlmIChpbnZpc2libGVBbm5vdGF0aW9uc0Nv
dW50ZXIgPT0gMCkgYnJlYWsgbG9vcDsKLQkJCQlBbm5vdGF0aW9uIGFubm90YXRpb24gPSBhbm5v
dGF0aW9uc1tpXTsKKwkJCQlBbm5vdGF0aW9uIHNvdXJjZUFubm90YXRpb24gPSBhbm5vdGF0aW9u
c1tpXTsKKwkJCQlpZiAoc291cmNlQW5ub3RhdGlvbi5pc1N1cHByZXNzZWQoKSkgY29udGludWU7
CisJCQkJQW5ub3RhdGlvbiBhbm5vdGF0aW9uID0gc291cmNlQW5ub3RhdGlvbi5nZXRQZXJzaXN0
aWJsZUFubm90YXRpb24oKTsKIAkJCQlpZiAoYW5ub3RhdGlvbi5pc1J1bnRpbWVJbnZpc2libGUo
KSB8fCAKIAkJCQkJCS8vIE5vIG5lZWQgdG8gZXhwbGljaXRseSBjaGVjayBpdCBpcyB0eXBlX3Vz
ZSBhbmQgbm90IHR5cGVfcGFyYW1ldGVyLCAKIAkJCQkJCS8vIHRoYXQgd2lsbCBhbHJlYWR5IGhh
dmUgYmVlbiBjaGVja2VkCkBAIC0zNDg0LDcgKzM0ODksOSBAQCBwdWJsaWMgY2xhc3MgQ2xhc3NG
aWxlIGltcGxlbWVudHMgVHlwZUNvbnN0YW50cywgVHlwZUlkcyB7CiAJCQlpbnQgY291bnRlciA9
IDA7CiAJCQlsb29wOiBmb3IgKGludCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAJCQkJaWYg
KHZpc2libGVBbm5vdGF0aW9uc0NvdW50ZXIgPT0gMCkgYnJlYWsgbG9vcDsKLQkJCQlBbm5vdGF0
aW9uIGFubm90YXRpb24gPSBhbm5vdGF0aW9uc1tpXTsKKwkJCQlBbm5vdGF0aW9uIHNvdXJjZUFu
bm90YXRpb24gPSBhbm5vdGF0aW9uc1tpXTsKKwkJCQlpZiAoc291cmNlQW5ub3RhdGlvbi5pc1N1
cHByZXNzZWQoKSkgY29udGludWU7CisJCQkJQW5ub3RhdGlvbiBhbm5vdGF0aW9uID0gc291cmNl
QW5ub3RhdGlvbi5nZXRQZXJzaXN0aWJsZUFubm90YXRpb24oKTsKIAkJCQlpZiAoYW5ub3RhdGlv
bi5pc1J1bnRpbWVWaXNpYmxlKCkgfHwgCiAJCQkJCS8vIE5vIG5lZWQgdG8gZXhwbGljaXRseSBj
aGVjayBpdCBpcyB0eXBlX3VzZSBhbmQgbm90IHR5cGVfcGFyYW1ldGVyLCAKIAkJCQkJLy8gdGhh
dCB3aWxsIGFscmVhZHkgaGF2ZSBiZWVuIGNoZWNrZWQKQEAgLTM1MjcsNyArMzUzNCw5IEBAIHB1
YmxpYyBjbGFzcyBDbGFzc0ZpbGUgaW1wbGVtZW50cyBUeXBlQ29uc3RhbnRzLCBUeXBlSWRzIHsK
IAkJCUFubm90YXRpb25bXSBhbm5vdGF0aW9ucyA9IGFyZ3VtZW50LmFubm90YXRpb25zOwogCQkJ
aWYgKGFubm90YXRpb25zICE9IG51bGwpIHsKIAkJCQlmb3IgKGludCBqID0gMCwgbWF4MiA9IGFu
bm90YXRpb25zLmxlbmd0aDsgaiA8IG1heDI7IGorKykgewotCQkJCQlBbm5vdGF0aW9uIGFubm90
YXRpb24gPSBhbm5vdGF0aW9uc1tqXTsKKwkJCQkJQW5ub3RhdGlvbiBzb3VyY2VBbm5vdGF0aW9u
ID0gYW5ub3RhdGlvbnNbal07CisJCQkJCWlmIChzb3VyY2VBbm5vdGF0aW9uLmlzU3VwcHJlc3Nl
ZCgpKSBjb250aW51ZTsKKwkJCQkJQW5ub3RhdGlvbiBhbm5vdGF0aW9uID0gc291cmNlQW5ub3Rh
dGlvbi5nZXRQZXJzaXN0aWJsZUFubm90YXRpb24oKTsKIAkJCQkJaWYgKGFubm90YXRpb24uaXNS
dW50aW1lSW52aXNpYmxlKCkpIHsKIAkJCQkJCWFubm90YXRpb25zQ291bnRlcnNbaV1bSU5WSVNJ
QkxFX0lOREVYXSsrOwogCQkJCQkJaW52aXNpYmxlUGFyYW1ldGVyc0Fubm90YXRpb25zQ291bnRl
cisrOwpAQCAtMzU3MCw3ICszNTc5LDkgQEAgcHVibGljIGNsYXNzIENsYXNzRmlsZSBpbXBsZW1l
bnRzIFR5cGVDb25zdGFudHMsIFR5cGVJZHMgewogCQkJCQkJQXJndW1lbnQgYXJndW1lbnQgPSBh
cmd1bWVudHNbaV07CiAJCQkJCQlBbm5vdGF0aW9uW10gYW5ub3RhdGlvbnMgPSBhcmd1bWVudC5h
bm5vdGF0aW9uczsKIAkJCQkJCWZvciAoaW50IGogPSAwLCBtYXggPSBhbm5vdGF0aW9ucy5sZW5n
dGg7IGogPCBtYXg7IGorKykgewotCQkJCQkJCUFubm90YXRpb24gYW5ub3RhdGlvbiA9IGFubm90
YXRpb25zW2pdOworCQkJCQkJCUFubm90YXRpb24gc291cmNlQW5ub3RhdGlvbiA9IGFubm90YXRp
b25zW2pdOworCQkJCQkJCWlmIChzb3VyY2VBbm5vdGF0aW9uLmlzU3VwcHJlc3NlZCgpKSBjb250
aW51ZTsKKwkJCQkJCQlBbm5vdGF0aW9uIGFubm90YXRpb24gPSBzb3VyY2VBbm5vdGF0aW9uLmdl
dFBlcnNpc3RpYmxlQW5ub3RhdGlvbigpOwogCQkJCQkJCWlmIChhbm5vdGF0aW9uLmlzUnVudGlt
ZUludmlzaWJsZSgpKSB7CiAJCQkJCQkJCWludCBjdXJyZW50QW5ub3RhdGlvbk9mZnNldCA9IHRo
aXMuY29udGVudHNPZmZzZXQ7CiAJCQkJCQkJCWdlbmVyYXRlQW5ub3RhdGlvbihhbm5vdGF0aW9u
LCBjdXJyZW50QW5ub3RhdGlvbk9mZnNldCk7CkBAIC0zNjI4LDcgKzM2MzksOSBAQCBwdWJsaWMg
Y2xhc3MgQ2xhc3NGaWxlIGltcGxlbWVudHMgVHlwZUNvbnN0YW50cywgVHlwZUlkcyB7CiAJCQkJ
CQlBcmd1bWVudCBhcmd1bWVudCA9IGFyZ3VtZW50c1tpXTsKIAkJCQkJCUFubm90YXRpb25bXSBh
bm5vdGF0aW9ucyA9IGFyZ3VtZW50LmFubm90YXRpb25zOwogCQkJCQkJZm9yIChpbnQgaiA9IDAs
IG1heCA9IGFubm90YXRpb25zLmxlbmd0aDsgaiA8IG1heDsgaisrKSB7Ci0JCQkJCQkJQW5ub3Rh
dGlvbiBhbm5vdGF0aW9uID0gYW5ub3RhdGlvbnNbal07CisJCQkJCQkJQW5ub3RhdGlvbiBzb3Vy
Y2VBbm5vdGF0aW9uID0gYW5ub3RhdGlvbnNbal07CisJCQkJCQkJaWYgKHNvdXJjZUFubm90YXRp
b24uaXNTdXBwcmVzc2VkKCkpIGNvbnRpbnVlOworCQkJCQkJCUFubm90YXRpb24gYW5ub3RhdGlv
biA9IHNvdXJjZUFubm90YXRpb24uZ2V0UGVyc2lzdGlibGVBbm5vdGF0aW9uKCk7CiAJCQkJCQkJ
aWYgKGFubm90YXRpb24uaXNSdW50aW1lVmlzaWJsZSgpKSB7CiAJCQkJCQkJCWludCBjdXJyZW50
QW5ub3RhdGlvbk9mZnNldCA9IHRoaXMuY29udGVudHNPZmZzZXQ7CiAJCQkJCQkJCWdlbmVyYXRl
QW5ub3RhdGlvbihhbm5vdGF0aW9uLCBjdXJyZW50QW5ub3RhdGlvbk9mZnNldCk7CmRpZmYgLS1n
aXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXN0L0FTVE5vZGUuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQVNUTm9kZS5qYXZhCmlu
ZGV4IGNhOTJiMTYuLjQwZDhiN2IgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQVNUTm9kZS5qYXZh
CisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hc3QvQVNUTm9kZS5qYXZhCkBAIC0yNiw2ICsyNiw3IEBACiAgKgkJCQkJ
CQkJYnVnIDM4MjcyMSAtIFsxLjhdW2NvbXBpbGVyXSBFZmZlY3RpdmVseSBmaW5hbCB2YXJpYWJs
ZXMgbmVlZHMgc3BlY2lhbCB0cmVhdG1lbnQKICAqCQkJCQkJCQlidWcgNDEyMTUzIC0gWzEuOF1b
Y29tcGlsZXJdIENoZWNrIHZhbGlkaXR5IG9mIGFubm90YXRpb25zIHdoaWNoIG1heSBiZSByZXBl
YXRhYmxlCiAgKgkJCQkJCQkJYnVnIDQxMjE1MyAtIFsxLjhdW2NvbXBpbGVyXSBDaGVjayB2YWxp
ZGl0eSBvZiBhbm5vdGF0aW9ucyB3aGljaCBtYXkgYmUgcmVwZWF0YWJsZQorICoJCQkJCQkJCWJ1
ZyA0MTIxNDkgLSBbMS44XVtjb21waWxlcl0gRW1pdCByZXBlYXRlZCBhbm5vdGF0aW9ucyBpbnRv
IHRoZSBkZXNpZ25hdGVkIGNvbnRhaW5lcgogICoqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCiBwYWNr
YWdlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3Q7CiAKQEAgLTgyMywyNiAr
ODI0LDMzIEBAIHB1YmxpYyBhYnN0cmFjdCBjbGFzcyBBU1ROb2RlIGltcGxlbWVudHMgVHlwZUNv
bnN0YW50cywgVHlwZUlkcyB7CiAJCQkJaWYgKGFubm90YXRpb24gPT0gbnVsbCkgY29udGludWU7
CiAJCQkJUmVmZXJlbmNlQmluZGluZyBhbm5vdGF0aW9uVHlwZSA9IGFubm90YXRpb24uZ2V0QW5u
b3RhdGlvblR5cGUoKTsKIAkJCQlib29sZWFuIGZvdW5kRHVwbGljYXRlID0gZmFsc2U7CisJCQkJ
Ym9vbGVhbiBmb3VuZEVycm9yID0gZmFsc2U7CiAJCQkJZm9yIChpbnQgaiA9IGkrMTsgaiA8IGxl
bmd0aDsgaisrKSB7CiAJCQkJCUFubm90YXRpb25CaW5kaW5nIG90aGVyQW5ub3RhdGlvbiA9IGRp
c3RpbmN0QW5ub3RhdGlvbnNbal07CiAJCQkJCWlmIChvdGhlckFubm90YXRpb24gPT0gbnVsbCkg
Y29udGludWU7CiAJCQkJCWlmIChvdGhlckFubm90YXRpb24uZ2V0QW5ub3RhdGlvblR5cGUoKSA9
PSBhbm5vdGF0aW9uVHlwZSkgeworCQkJCQkJaWYgKGRpc3RpbmN0QW5ub3RhdGlvbnMgPT0gYW5u
b3RhdGlvbnMpIHsKKwkJCQkJCQlTeXN0ZW0uYXJyYXljb3B5KGRpc3RpbmN0QW5ub3RhdGlvbnMs
IDAsIGRpc3RpbmN0QW5ub3RhdGlvbnMgPSBuZXcgQW5ub3RhdGlvbkJpbmRpbmdbbGVuZ3RoXSwg
MCwgbGVuZ3RoKTsKKwkJCQkJCX0KKwkJCQkJCWRpc3RpbmN0QW5ub3RhdGlvbnNbal0gPSBudWxs
OyAvLyByZXBvcnQvcHJvY2VzcyBpdCBvbmx5IG9uY2UKIAkJCQkJCWlmIChhbm5vdGF0aW9uVHlw
ZS5pc1JlcGVhdGFibGVBbm5vdGF0aW9uKCkpIHsKLQkJCQkJCQlSZWZlcmVuY2VCaW5kaW5nIHJl
c29sdmVkQ29udGFpbmVyID0gYW5ub3RhdGlvblR5cGUucmVzb2x2ZUNvbnRhaW5lckFubm90YXRp
b24oKTsKLQkJCQkJCQlpZiAocmVzb2x2ZWRDb250YWluZXIgIT0gbnVsbCkgewotCQkJCQkJCQkv
LyBTaW5jZSB0aGlzIGlzIGEgcmVwZWF0ZWQgYW5ub3RhdGlvbiwgd2UgbmVlZCB0byBjaGVjayBp
ZiB0aGUgY29udGFpbmVyIGlzIGFsc28gdXNlZCAtIHNvIHN0b3JlIGl0Ci0JCQkJCQkJCS8vIGlu
IGEgbWFwIG9mIChjb250YWluZXIncyBSZWZlcmVuY2VCaW5kaW5nIC0+IHRoZSByZXBlYXRlZCBz
b3VyY2UgQW5ub3RhdGlvbikKLQkJCQkJCQkJaWYgKGltcGxpY2l0Q29udGFpbmVyQW5ub3RhdGlv
bnMgPT0gbnVsbCkgaW1wbGljaXRDb250YWluZXJBbm5vdGF0aW9ucyA9IG5ldyBIYXNoTWFwKDMp
OwotCQkJCQkJCQlpbXBsaWNpdENvbnRhaW5lckFubm90YXRpb25zLnB1dChyZXNvbHZlZENvbnRh
aW5lciwgc291cmNlQW5ub3RhdGlvbnNbaV0pOwotCQkJCQkJCQkvLyBWYWxpZGF0ZSB0aGUgcmVw
ZWF0ZWQgKnVzZSogb2YgYSByZXBlYXRhYmxlIGFubm90YXRpb24uCi0JCQkJCQkJCUFubm90YXRp
b24uY2hlY2tDb250YWluaW5nQW5ub3RhdGlvbihzb3VyY2VBbm5vdGF0aW9uc1tpXSwgc2NvcGUs
IHJlc29sdmVkQ29udGFpbmVyLCBhbm5vdGF0aW9uVHlwZSk7CisJCQkJCQkJQ29udGFpbmVyQW5u
b3RhdGlvbiBjb250YWluZXIgPSBzb3VyY2VBbm5vdGF0aW9uc1tpXS5nZXRDb250YWluZXIoKTsK
KwkJCQkJCQlpZiAoY29udGFpbmVyID09IG51bGwpIHsgIC8vIGZpcnN0IGVuY291bnRlciB3aXRo
IGEgZHVwbGljYXRlLgorCQkJCQkJCQlSZWZlcmVuY2VCaW5kaW5nIHJlc29sdmVkQ29udGFpbmVy
ID0gYW5ub3RhdGlvblR5cGUucmVzb2x2ZUNvbnRhaW5lckFubm90YXRpb24oKTsKKwkJCQkJCQkJ
aWYgKHJlc29sdmVkQ29udGFpbmVyICE9IG51bGwgJiYgcmVzb2x2ZWRDb250YWluZXIuaXNWYWxp
ZEJpbmRpbmcoKSkgeworCQkJCQkJCQkJLy8gVmFsaWRhdGUgdGhlIHJlcGVhdGVkICp1c2UqIG9m
IGEgcmVwZWF0YWJsZSBhbm5vdGF0aW9uLgorCQkJCQkJCQkJaWYgKCEgKGZvdW5kRXJyb3IgPSAh
IEFubm90YXRpb24uY2hlY2tDb250YWluaW5nQW5ub3RhdGlvbihzb3VyY2VBbm5vdGF0aW9uc1tp
XSwgc2NvcGUsIHJlc29sdmVkQ29udGFpbmVyLCBhbm5vdGF0aW9uVHlwZSkpKSB7CisJCQkJCQkJ
CQkJY29udGFpbmVyID0gbmV3IENvbnRhaW5lckFubm90YXRpb24oc291cmNlQW5ub3RhdGlvbnNb
aV0sIHJlc29sdmVkQ29udGFpbmVyLCBzY29wZSk7CisJCQkJCQkJCQl9CisJCQkJCQkJCQlpZiAo
aW1wbGljaXRDb250YWluZXJBbm5vdGF0aW9ucyA9PSBudWxsKSBpbXBsaWNpdENvbnRhaW5lckFu
bm90YXRpb25zID0gbmV3IEhhc2hNYXAoMyk7CisJCQkJCQkJCQlpbXBsaWNpdENvbnRhaW5lckFu
bm90YXRpb25zLnB1dChyZXNvbHZlZENvbnRhaW5lciwgc291cmNlQW5ub3RhdGlvbnNbaV0pOwor
CQkJCQkJCQl9CisJCQkJCQkJfQorCQkJCQkJCWlmICghZm91bmRFcnJvcikgeworCQkJCQkJCQlj
b250YWluZXIuYWRkQ29udGFpbmVlKHNvdXJjZUFubm90YXRpb25zW2pdLCB0cnVlKTsKIAkJCQkJ
CQl9CiAJCQkJCQl9IGVsc2UgewogCQkJCQkJCWZvdW5kRHVwbGljYXRlID0gdHJ1ZTsKLQkJCQkJ
CQlpZiAoZGlzdGluY3RBbm5vdGF0aW9ucyA9PSBhbm5vdGF0aW9ucykgewotCQkJCQkJCQlTeXN0
ZW0uYXJyYXljb3B5KGRpc3RpbmN0QW5ub3RhdGlvbnMsIDAsIGRpc3RpbmN0QW5ub3RhdGlvbnMg
PSBuZXcgQW5ub3RhdGlvbkJpbmRpbmdbbGVuZ3RoXSwgMCwgbGVuZ3RoKTsKLQkJCQkJCQl9Ci0J
CQkJCQkJZGlzdGluY3RBbm5vdGF0aW9uc1tqXSA9IG51bGw7IC8vIHJlcG9ydCBpdCBvbmx5IG9u
Y2UKIAkJCQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5kdXBsaWNhdGVBbm5vdGF0aW9uKHNv
dXJjZUFubm90YXRpb25zW2pdLCBzY29wZS5jb21waWxlck9wdGlvbnMoKS5zb3VyY2VMZXZlbCk7
CiAJCQkJCQl9CiAJCQkJCX0KQEAgLTg2Niw2ICs4NzQsNyBAQCBwdWJsaWMgYWJzdHJhY3QgY2xh
c3MgQVNUTm9kZSBpbXBsZW1lbnRzIFR5cGVDb25zdGFudHMsIFR5cGVJZHMgewogCQlyZXR1cm4g
YW5ub3RhdGlvbnM7CiAJfQogCQorCQogCS8qKglSZXNvbHZlIEpTUjMwOCBhbm5vdGF0aW9ucyBv
biBhIHR5cGUgcmVmZXJlbmNlLCBhcnJheSBjcmVhdGlvbiBleHByZXNzaW9uIG9yIGEgd2lsZGNh
cmQuIFR5cGUgcGFyYW1ldGVycyBnbyBkaXJlY3RseSB0byB0aGUgc3Vicm91dGluZSwKIAkgICAg
QnkgY29uc3RydWN0aW9uIHRoZSBiaW5kaW5ncyBhc3NvY2lhdGVkIHdpdGggUVRSLCBQUVRSIGV0
YyBnZXQgcmVzb2x2ZWQgZmlyc3QgYW5kIHRoZW4gYW5ub3RhdGlvbnMgZm9yIGRpZmZlcmVudCBs
ZXZlbHMgZ2V0IHJlc29sdmVkCiAJICAgIGFuZCBhcHBsaWVkIGF0IG9uZSBnby4gTGlrZXdpc2Ug
Zm9yIG11bHRpZGltZW5zaW9uYWwgYXJyYXlzLgpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Bbm5v
dGF0aW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Fubm90YXRpb24uamF2YQppbmRleCBkMTAxYjk1Li45
YmY2NTIwIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Fubm90YXRpb24uamF2YQorKysgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvYXN0L0Fubm90YXRpb24uamF2YQpAQCAtMjcsNyArMjcsOCBAQAogICogICAgICAgICAgICAg
ICAgICAgICAgICAgIEJ1ZyA0MTQzODQgLSBbMS44XSB0eXBlIGFubm90YXRpb24gb24gYWJicmV2
aWF0ZWQgaW5uZXIgY2xhc3MgaXMgbm90IG1hcmtlZCBhcyBpbm5lciB0eXBlCiAgKiAgICAgIEpl
c3BlciBTIE1vbGxlciA8amVzcGVyQHNlbHNrYWJldC5vcmc+IC0gIENvbnRyaWJ1dGlvbnMgZm9y
CiAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgQnVnIDQxMjE1MyAtIFsxLjhdW2NvbXBpbGVy
XSBDaGVjayB2YWxpZGl0eSBvZiBhbm5vdGF0aW9ucyB3aGljaCBtYXkgYmUgcmVwZWF0YWJsZQot
IwkJCQkJCQlCdWcgNDEyMTUxIC0gWzEuOF1bY29tcGlsZXJdIENoZWNrIHJlcGVhdGluZyBhbm5v
dGF0aW9uJ3MgY29sbGVjdGlvbiB0eXBlCisgKiAgICAgICAgICAgICAgICAgICAgICAgICAgQnVn
IDQxMjE1MSAtIFsxLjhdW2NvbXBpbGVyXSBDaGVjayByZXBlYXRpbmcgYW5ub3RhdGlvbidzIGNv
bGxlY3Rpb24gdHlwZQorICogICAgICAgICAgICAgICAgICAgICAgICAgIEJ1ZyA0MTIxNDkgLSBb
MS44XVtjb21waWxlcl0gRW1pdCByZXBlYXRlZCBhbm5vdGF0aW9ucyBpbnRvIHRoZSBkZXNpZ25h
dGVkIGNvbnRhaW5lcgogICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCiBwYWNrYWdlIG9yZy5lY2xp
cHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3Q7CiAKQEAgLTQ2LDYgKzQ3LDIwIEBAIGltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLio7CiAgKi8KIHB1Ymxp
YyBhYnN0cmFjdCBjbGFzcyBBbm5vdGF0aW9uIGV4dGVuZHMgRXhwcmVzc2lvbiB7CiAJCisJQ29u
dGFpbmVyQW5ub3RhdGlvbiBjb250YWluZXI7CisJYm9vbGVhbiBzdXBwcmVzc1RoaXNBbm5vdGF0
aW9uID0gZmFsc2U7CisJCisJcHVibGljIENvbnRhaW5lckFubm90YXRpb24gZ2V0Q29udGFpbmVy
KCkgeworCQlyZXR1cm4gdGhpcy5jb250YWluZXI7CisJfQorCXB1YmxpYyB2b2lkIHNldENvbnRh
aW5lcihDb250YWluZXJBbm5vdGF0aW9uIGNvbnRhaW5lciwgYm9vbGVhbiBzdXBwcmVzc2VkKSB7
CisJCXRoaXMuY29udGFpbmVyID0gY29udGFpbmVyOworCQl0aGlzLnN1cHByZXNzVGhpc0Fubm90
YXRpb24gPSBzdXBwcmVzc2VkOworCX0KKwkKKwlwdWJsaWMgYm9vbGVhbiBpc1N1cHByZXNzZWQo
KSB7CisJCXJldHVybiB0aGlzLnN1cHByZXNzVGhpc0Fubm90YXRpb247CisJfQogCS8qKgogCSAq
IFJldHVybiB0aGUgbG9jYXRpb24gZm9yIHRoZSBjb3JyZXNwb25kaW5nIGFubm90YXRpb24gaW5z
aWRlIHRoZSB0eXBlIHJlZmVyZW5jZSwgPGNvZGU+bnVsbDwvY29kZT4gaWYgbm9uZS4KIAkgKi8K
QEAgLTQyMSw3ICs0MzYsOCBAQCBwdWJsaWMgYWJzdHJhY3QgY2xhc3MgQW5ub3RhdGlvbiBleHRl
bmRzIEV4cHJlc3Npb24gewogCQljaGVja0NvbnRhaW5pbmdBbm5vdGF0aW9uKHZhbHVlQXR0cmli
dXRlLCBzY29wZSwgY29udGFpbmluZywgcmVwZWF0YWJsZUFubm90YXRpb24pOwogCX0KIAotCXB1
YmxpYyBzdGF0aWMgdm9pZCBjaGVja0NvbnRhaW5pbmdBbm5vdGF0aW9uKEFTVE5vZGUgbWFya2Vy
Tm9kZSwgU2NvcGUgc2NvcGUsIFJlZmVyZW5jZUJpbmRpbmcgY29udGFpbmVyLCBSZWZlcmVuY2VC
aW5kaW5nIHJlcGVhdGFibGVBbm5vdGF0aW9uKSB7CisJcHVibGljIHN0YXRpYyBib29sZWFuIGNo
ZWNrQ29udGFpbmluZ0Fubm90YXRpb24oQVNUTm9kZSBtYXJrZXJOb2RlLCBTY29wZSBzY29wZSwg
UmVmZXJlbmNlQmluZGluZyBjb250YWluZXIsIFJlZmVyZW5jZUJpbmRpbmcgcmVwZWF0YWJsZUFu
bm90YXRpb24pIHsKKwkJYm9vbGVhbiBmbGF3bGVzcyA9IHRydWU7CiAJCU1ldGhvZEJpbmRpbmdb
XSBhbm5vdGF0aW9uTWV0aG9kcyA9IGNvbnRhaW5lci5tZXRob2RzKCk7CiAJCWJvb2xlYW4gc2F3
VmFsdWUgPSBmYWxzZTsKIAkJZm9yIChpbnQgaSA9IDAsIGxlbmd0aCA9IGFubm90YXRpb25NZXRo
b2RzLmxlbmd0aDsgaSA8IGxlbmd0aDsgKytpKSB7CkBAIC00MzMsNDUgKzQ0OSw1MyBAQCBwdWJs
aWMgYWJzdHJhY3QgY2xhc3MgQW5ub3RhdGlvbiBleHRlbmRzIEV4cHJlc3Npb24gewogCQkJCQlp
ZiAoVHlwZUJpbmRpbmcuZXF1YWxzRXF1YWxzKGFycmF5LmVsZW1lbnRzVHlwZSgpLCByZXBlYXRh
YmxlQW5ub3RhdGlvbikpIGNvbnRpbnVlOwogCQkJCX0KIAkJCQlzY29wZS5wcm9ibGVtUmVwb3J0
ZXIoKS5jb250YWluaW5nQW5ub3RhdGlvbkhhc1dyb25nVmFsdWVUeXBlKG1hcmtlck5vZGUsIGNv
bnRhaW5lciwgcmVwZWF0YWJsZUFubm90YXRpb24sIG1ldGhvZC5yZXR1cm5UeXBlKTsKKwkJCQlm
bGF3bGVzcyA9IGZhbHNlOwogCQkJfSBlbHNlIHsKIAkJCQkvLyBOb3QgdGhlIHZhbHVlKCkgLSBt
dXN0IGhhdmUgZGVmYXVsdCAob3IgZWxzZSBpc24ndCBzdWl0YWJsZSBhcyBjb250YWluZXIKIAkJ
CQlpZiAoKG1ldGhvZC5tb2RpZmllcnMgJiBDbGFzc0ZpbGVDb25zdGFudHMuQWNjQW5ub3RhdGlv
bkRlZmF1bHQpID09IDApIHsKIAkJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuY29udGFpbmlu
Z0Fubm90YXRpb25IYXNOb25EZWZhdWx0TWVtYmVycyhtYXJrZXJOb2RlLCBjb250YWluZXIsIG1l
dGhvZC5zZWxlY3Rvcik7CisJCQkJCWZsYXdsZXNzID0gZmFsc2U7CiAJCQkJfQogCQkJfQogCQl9
CiAJCWlmICghc2F3VmFsdWUpIHsKIAkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmNvbnRhaW5p
bmdBbm5vdGF0aW9uTXVzdEhhdmVWYWx1ZShtYXJrZXJOb2RlLCBjb250YWluZXIpOworCQkJZmxh
d2xlc3MgPSBmYWxzZTsKIAkJfQogCQkKLQkJY2hlY2tDb250YWluaW5nQW5ub3RhdGlvblJldGVu
dGlvbihtYXJrZXJOb2RlLCBzY29wZSwgY29udGFpbmVyLCByZXBlYXRhYmxlQW5ub3RhdGlvbik7
CisJCWZsYXdsZXNzID0gZmxhd2xlc3MgJiYgY2hlY2tDb250YWluaW5nQW5ub3RhdGlvblJldGVu
dGlvbihtYXJrZXJOb2RlLCBzY29wZSwgY29udGFpbmVyLCByZXBlYXRhYmxlQW5ub3RhdGlvbik7
CiAJCWlmIChtYXJrZXJOb2RlIGluc3RhbmNlb2YgQW5ub3RhdGlvbikKLQkJCWNoZWNrQ29udGFp
bmluZ0Fubm90YXRpb25UYXJnZXQoKEFubm90YXRpb24pIG1hcmtlck5vZGUsIChCbG9ja1Njb3Bl
KSBzY29wZSwgKFR5cGVCaW5kaW5nKSBjb250YWluZXIsIHJlcGVhdGFibGVBbm5vdGF0aW9uKTsK
KwkJCWZsYXdsZXNzID0gZmxhd2xlc3MgJiYgY2hlY2tDb250YWluaW5nQW5ub3RhdGlvblRhcmdl
dCgoQW5ub3RhdGlvbikgbWFya2VyTm9kZSwgKEJsb2NrU2NvcGUpIHNjb3BlLCAoVHlwZUJpbmRp
bmcpIGNvbnRhaW5lciwgcmVwZWF0YWJsZUFubm90YXRpb24pOwogCQllbHNlCi0JCQljaGVja0Nv
bnRhaW5pbmdBbm5vdGF0aW9uVGFyZ2V0KG1hcmtlck5vZGUsIHNjb3BlLCBjb250YWluZXIsIHJl
cGVhdGFibGVBbm5vdGF0aW9uKTsKLQkJY2hlY2tDb250YWludEFubm90YXRpb25Eb2N1bWVudGVk
KG1hcmtlck5vZGUsIHNjb3BlLCBjb250YWluZXIsIHJlcGVhdGFibGVBbm5vdGF0aW9uKTsKLQkJ
Y2hlY2tDb250YWludEFubm90YXRpb25Jbmhlcml0ZWQobWFya2VyTm9kZSwgc2NvcGUsIGNvbnRh
aW5lciwgcmVwZWF0YWJsZUFubm90YXRpb24pOworCQkJZmxhd2xlc3MgPSBmbGF3bGVzcyAmJiBj
aGVja0NvbnRhaW5pbmdBbm5vdGF0aW9uVGFyZ2V0KG1hcmtlck5vZGUsIHNjb3BlLCBjb250YWlu
ZXIsIHJlcGVhdGFibGVBbm5vdGF0aW9uKTsKKwkJZmxhd2xlc3MgPSBmbGF3bGVzcyAmJiBjaGVj
a0NvbnRhaW50QW5ub3RhdGlvbkRvY3VtZW50ZWQobWFya2VyTm9kZSwgc2NvcGUsIGNvbnRhaW5l
ciwgcmVwZWF0YWJsZUFubm90YXRpb24pOworCQlmbGF3bGVzcyA9IGZsYXdsZXNzICYmIGNoZWNr
Q29udGFpbnRBbm5vdGF0aW9uSW5oZXJpdGVkKG1hcmtlck5vZGUsIHNjb3BlLCBjb250YWluZXIs
IHJlcGVhdGFibGVBbm5vdGF0aW9uKTsKKwkJcmV0dXJuIGZsYXdsZXNzOwogCX0KIAogCS8vIFRo
aXMgaXMgZm9yIGVycm9yIHJlcG9ydGluZyBmb3IgYmFkIHRhcmdldHMgYXQgdGhlIHJlcGVhdGVk
IGFubm90YXRpb24gdXNlIHNpdGUgKGFzIG9wcG9zZWQgdG8gcmVwZWF0YWJsZSBhbm5vdGF0aW9u
IHR5cGUgZGVjbGFyYXRpb24gc2l0ZSkgLSBMZWFkcyB0byBiZXR0ZXIgbWVzc2FnZS4KLQlwdWJs
aWMgc3RhdGljIHZvaWQgY2hlY2tDb250YWluaW5nQW5ub3RhdGlvblRhcmdldChBbm5vdGF0aW9u
IGFubm90YXRpb24sIEJsb2NrU2NvcGUgc2NvcGUsIFR5cGVCaW5kaW5nIGNvbnRhaW5lckFubm90
YXRpb25UeXBlLCBUeXBlQmluZGluZyBhbm5vdGF0aW9uVHlwZSkgeworCXB1YmxpYyBzdGF0aWMg
Ym9vbGVhbiBjaGVja0NvbnRhaW5pbmdBbm5vdGF0aW9uVGFyZ2V0KEFubm90YXRpb24gYW5ub3Rh
dGlvbiwgQmxvY2tTY29wZSBzY29wZSwgVHlwZUJpbmRpbmcgY29udGFpbmVyQW5ub3RhdGlvblR5
cGUsIFR5cGVCaW5kaW5nIGFubm90YXRpb25UeXBlKSB7CiAJCS8vIGNoZWNrIChtZXRhKXRhcmdl
dCBjb21wYXRpYmlsaXR5CiAJCWlmICghYW5ub3RhdGlvblR5cGUuaXNWYWxpZEJpbmRpbmcoKSkg
ewogCQkJLy8gbm8gbmVlZCB0byBjaGVjayBhbm5vdGF0aW9uIHVzYWdlIGlmIG1pc3NpbmcKLQkJ
CXJldHVybjsKKwkJCXJldHVybiBmYWxzZTsKIAkJfQogCQlpZiAoISBpc0Fubm90YXRpb25UYXJn
ZXRBbGxvd2VkKGFubm90YXRpb24sIHNjb3BlLCBjb250YWluZXJBbm5vdGF0aW9uVHlwZSwgYW5u
b3RhdGlvbi5yZWNpcGllbnQua2luZCgpKSkgewogCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCku
ZGlzYWxsb3dlZFRhcmdldEZvckNvbnRhaW5lckFubm90YXRpb24oYW5ub3RhdGlvbiwgY29udGFp
bmVyQW5ub3RhdGlvblR5cGUpOworCQkJcmV0dXJuIGZhbHNlOwogCQl9CisJCXJldHVybiB0cnVl
OwogCX0KIAkKIAkvLyBUaGlzIGlzIGZvciBlcnJvciByZXBvcnRpbmcgZm9yIGJhZCB0YXJnZXRz
IGF0IGFubm90YXRpb24gdHlwZSBkZWNsYXJhdGlvbiBzaXRlIChhcyBvcHBvc2VkIHRvIHRoZSBy
ZXBlYXQgc2l0ZSkKLQlwcml2YXRlIHN0YXRpYyB2b2lkIGNoZWNrQ29udGFpbmluZ0Fubm90YXRp
b25UYXJnZXQoQVNUTm9kZSBtYXJrZXJOb2RlLCBTY29wZSBzY29wZSwgUmVmZXJlbmNlQmluZGlu
ZyBjb250YWluZXIsIFJlZmVyZW5jZUJpbmRpbmcgcmVwZWF0YWJsZUFubm90YXRpb24pIHsKKwlw
cml2YXRlIHN0YXRpYyBib29sZWFuIGNoZWNrQ29udGFpbmluZ0Fubm90YXRpb25UYXJnZXQoQVNU
Tm9kZSBtYXJrZXJOb2RlLCBTY29wZSBzY29wZSwgUmVmZXJlbmNlQmluZGluZyBjb250YWluZXIs
IFJlZmVyZW5jZUJpbmRpbmcgcmVwZWF0YWJsZUFubm90YXRpb24pIHsKKwkJYm9vbGVhbiBoYWRF
cnJvciA9IGZhbHNlOwogCQlsb25nIHRhZ0JpdHMgPSByZXBlYXRhYmxlQW5ub3RhdGlvbi5nZXRB
bm5vdGF0aW9uVGFnQml0cygpOwogCQlpZiAoKHRhZ0JpdHMgJiBUYWdCaXRzLkFubm90YXRpb25U
YXJnZXRNQVNLKSAhPSAwKSB7IAogCQkJbG9uZyBjb250YWluaW5nVGFnQml0cyA9IGNvbnRhaW5l
ci5nZXRBbm5vdGF0aW9uVGFnQml0cygpOwogCQkJaWYgKChjb250YWluaW5nVGFnQml0cyAmIFRh
Z0JpdHMuQW5ub3RhdGlvblRhcmdldE1BU0spID09IDApIHsKIAkJCQlzY29wZS5wcm9ibGVtUmVw
b3J0ZXIoKS5yZXBlYXRhYmxlQW5ub3RhdGlvbkhhc1RhcmdldHMobWFya2VyTm9kZSwgcmVwZWF0
YWJsZUFubm90YXRpb24sIGNvbnRhaW5lcik7CisJCQkJaGFkRXJyb3IgPSB0cnVlOwogCQkJfSBl
bHNlIHsKIAkJCQlmaW5hbCBsb25nIHRhcmdldHMgPSB0YWdCaXRzICYgVGFnQml0cy5Bbm5vdGF0
aW9uVGFyZ2V0TUFTSzsKIAkJCQlmaW5hbCBsb25nIGNvbnRhaW5pbmdUYXJnZXRzID0gY29udGFp
bmluZ1RhZ0JpdHMgJiBUYWdCaXRzLkFubm90YXRpb25UYXJnZXRNQVNLOwpAQCAtNTE3LDMwICs1
NDEsNDEgQEAgcHVibGljIGFic3RyYWN0IGNsYXNzIEFubm90YXRpb24gZXh0ZW5kcyBFeHByZXNz
aW9uIHsKIAkJCQkJYnVpbGRlci5jaGVjayhUYWdCaXRzLkFubm90YXRpb25Gb3JUeXBlVXNlLCBU
eXBlQ29uc3RhbnRzLlRZUEVfVVNFX1RBUkdFVCk7CiAJCQkJCWlmIChidWlsZGVyLmhhc0Vycm9y
KCkpIHsKIAkJCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLnJlcGVhdGFibGVBbm5vdGF0aW9u
VGFyZ2V0TWlzbWF0Y2gobWFya2VyTm9kZSwgcmVwZWF0YWJsZUFubm90YXRpb24sIGNvbnRhaW5l
ciwgYnVpbGRlci50b1N0cmluZygpKTsKKwkJCQkJCWhhZEVycm9yID0gdHJ1ZTsKIAkJCQkJfQog
CQkJCX0KIAkJCX0KIAkJfQorCQlyZXR1cm4gISBoYWRFcnJvcjsKIAl9CiAKLQlwcml2YXRlIHN0
YXRpYyB2b2lkIGNoZWNrQ29udGFpbnRBbm5vdGF0aW9uRG9jdW1lbnRlZChBU1ROb2RlIG1hcmtl
ck5vZGUsIFNjb3BlIHNjb3BlLCBSZWZlcmVuY2VCaW5kaW5nIGNvbnRhaW5pbmcsIFJlZmVyZW5j
ZUJpbmRpbmcgcmVwZWF0YWJsZUFubm90YXRpb24pIHsKKwlwcml2YXRlIHN0YXRpYyBib29sZWFu
IGNoZWNrQ29udGFpbnRBbm5vdGF0aW9uRG9jdW1lbnRlZChBU1ROb2RlIG1hcmtlck5vZGUsIFNj
b3BlIHNjb3BlLCBSZWZlcmVuY2VCaW5kaW5nIGNvbnRhaW5pbmcsIFJlZmVyZW5jZUJpbmRpbmcg
cmVwZWF0YWJsZUFubm90YXRpb24pIHsKIAkJaWYgKChyZXBlYXRhYmxlQW5ub3RhdGlvbi5nZXRB
bm5vdGF0aW9uVGFnQml0cygpICYgVGFnQml0cy5Bbm5vdGF0aW9uRG9jdW1lbnRlZCkgIT0gMCAm
JiAoY29udGFpbmluZy5nZXRBbm5vdGF0aW9uVGFnQml0cygpICYgVGFnQml0cy5Bbm5vdGF0aW9u
RG9jdW1lbnRlZCkgPT0gMCkgewogCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkucmVwZWF0YWJs
ZUFubm90YXRpb25Jc0RvY3VtZW50ZWQobWFya2VyTm9kZSwgcmVwZWF0YWJsZUFubm90YXRpb24s
IGNvbnRhaW5pbmcpOworCQkJcmV0dXJuIGZhbHNlOworCQl9IGVsc2UgeworCQkJcmV0dXJuIHRy
dWU7CiAJCX0KIAl9CiAKLQlwcml2YXRlIHN0YXRpYyB2b2lkIGNoZWNrQ29udGFpbnRBbm5vdGF0
aW9uSW5oZXJpdGVkKEFTVE5vZGUgbWFya2VyTm9kZSwgU2NvcGUgc2NvcGUsIFJlZmVyZW5jZUJp
bmRpbmcgY29udGFpbmluZywgUmVmZXJlbmNlQmluZGluZyByZXBlYXRhYmxlQW5ub3RhdGlvbikg
eworCXByaXZhdGUgc3RhdGljIGJvb2xlYW4gY2hlY2tDb250YWludEFubm90YXRpb25Jbmhlcml0
ZWQoQVNUTm9kZSBtYXJrZXJOb2RlLCBTY29wZSBzY29wZSwgUmVmZXJlbmNlQmluZGluZyBjb250
YWluaW5nLCBSZWZlcmVuY2VCaW5kaW5nIHJlcGVhdGFibGVBbm5vdGF0aW9uKSB7CiAJCWlmICgo
cmVwZWF0YWJsZUFubm90YXRpb24uZ2V0QW5ub3RhdGlvblRhZ0JpdHMoKSAmIFRhZ0JpdHMuQW5u
b3RhdGlvbkluaGVyaXRlZCkgIT0gMCAmJiAoY29udGFpbmluZy5nZXRBbm5vdGF0aW9uVGFnQml0
cygpICYgVGFnQml0cy5Bbm5vdGF0aW9uSW5oZXJpdGVkKSA9PSAwKSB7CiAJCQlzY29wZS5wcm9i
bGVtUmVwb3J0ZXIoKS5yZXBlYXRhYmxlQW5ub3RhdGlvbklzSW5oZXJpdGVkKG1hcmtlck5vZGUs
IHJlcGVhdGFibGVBbm5vdGF0aW9uLCBjb250YWluaW5nKTsKKwkJCXJldHVybiBmYWxzZTsKKwkJ
fSBlbHNlIHsKKwkJCXJldHVybiB0cnVlOwogCQl9CiAJfQogCi0JcHJpdmF0ZSBzdGF0aWMgdm9p
ZCBjaGVja0NvbnRhaW5pbmdBbm5vdGF0aW9uUmV0ZW50aW9uKEFTVE5vZGUgbWFya2VyTm9kZSwg
U2NvcGUgc2NvcGUsIFJlZmVyZW5jZUJpbmRpbmcgY29udGFpbmVyLCBSZWZlcmVuY2VCaW5kaW5n
IHJlcGVhdGFibGVBbm5vdGF0aW9uKSB7CisJcHJpdmF0ZSBzdGF0aWMgYm9vbGVhbiBjaGVja0Nv
bnRhaW5pbmdBbm5vdGF0aW9uUmV0ZW50aW9uKEFTVE5vZGUgbWFya2VyTm9kZSwgU2NvcGUgc2Nv
cGUsIFJlZmVyZW5jZUJpbmRpbmcgY29udGFpbmVyLCBSZWZlcmVuY2VCaW5kaW5nIHJlcGVhdGFi
bGVBbm5vdGF0aW9uKSB7CiAJCWxvbmcgYW5ub3RhdGlvbkJpdHMgPSBnZXRBbm5vdGF0aW9uUmV0
ZW50aW9uKHJlcGVhdGFibGVBbm5vdGF0aW9uKTsKIAkJbG9uZyBjb250YWluZXJCaXRzID0gZ2V0
QW5ub3RhdGlvblJldGVudGlvbihjb250YWluZXIpOyAKIAkJLy8gRHVlIHRvIGNsZXZlciBsYXlv
dXQgb2YgdGhlIGJpdHMsIHdlIGNhbiBjb21wYXJlIHRoZSBhYnNvbHV0ZSB2YWx1ZSBkaXJlY3Rs
eQogCQlpZiAoY29udGFpbmVyQml0cyA8IGFubm90YXRpb25CaXRzKSB7CiAJCQlzY29wZS5wcm9i
bGVtUmVwb3J0ZXIoKS5jb250YWluaW5nQW5ub3RhdGlvbkhhc1Nob3J0ZXJSZXRlbnRpb24obWFy
a2VyTm9kZSwgcmVwZWF0YWJsZUFubm90YXRpb24sIGdldFJldGVudGlvbk5hbWUoYW5ub3RhdGlv
bkJpdHMpLCBjb250YWluZXIsIGdldFJldGVudGlvbk5hbWUoY29udGFpbmVyQml0cykpOworCQkJ
cmV0dXJuIGZhbHNlOworCQl9IGVsc2UgeworCQkJcmV0dXJuIHRydWU7CiAJCX0KIAl9CiAJCkBA
IC04NDEsMTAgKzg3NiwxNCBAQCBwdWJsaWMgYWJzdHJhY3QgY2xhc3MgQW5ub3RhdGlvbiBleHRl
bmRzIEV4cHJlc3Npb24gewogCQkJCQkJYnJlYWs7CiAJCQkJfQogCQkJfQotCQkJY2hlY2tBbm5v
dGF0aW9uVGFyZ2V0KHRoaXMsIHNjb3BlLCBhbm5vdGF0aW9uVHlwZSwga2luZCk7CisJCQljaGVj
a0Fubm90YXRpb25UYXJnZXQoc2NvcGUsIGFubm90YXRpb25UeXBlLCBraW5kKTsKIAkJfQogCQly
ZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGU7CiAJfQorCQorCXByb3RlY3RlZCB2b2lkIGNoZWNrQW5u
b3RhdGlvblRhcmdldChCbG9ja1Njb3BlIHNjb3BlLCBSZWZlcmVuY2VCaW5kaW5nIGFubm90YXRp
b25UeXBlLCBpbnQga2luZCkgeworCQljaGVja0Fubm90YXRpb25UYXJnZXQodGhpcywgc2NvcGUs
IGFubm90YXRpb25UeXBlLCBraW5kKTsKKwl9CiAKIAlzdGF0aWMgYm9vbGVhbiBpc0Fubm90YXRp
b25UYXJnZXRBbGxvd2VkKEFubm90YXRpb24gYW5ub3RhdGlvbiwgQmxvY2tTY29wZSBzY29wZSwg
VHlwZUJpbmRpbmcgYW5ub3RhdGlvblR5cGUsIGludCBraW5kKSB7CiAJCWxvbmcgbWV0YVRhZ0Jp
dHMgPSBhbm5vdGF0aW9uVHlwZS5nZXRBbm5vdGF0aW9uVGFnQml0cygpOyAvLyBjb3VsZCBiZSBm
b3J3YXJkIHJlZmVyZW5jZQpAQCAtMTAwMiw0ICsxMDQxLDggQEAgcHVibGljIGFic3RyYWN0IGNs
YXNzIEFubm90YXRpb24gZXh0ZW5kcyBFeHByZXNzaW9uIHsKIAlwdWJsaWMgYWJzdHJhY3Qgdm9p
ZCB0cmF2ZXJzZShBU1RWaXNpdG9yIHZpc2l0b3IsIEJsb2NrU2NvcGUgc2NvcGUpOwogCiAJcHVi
bGljIGFic3RyYWN0IHZvaWQgdHJhdmVyc2UoQVNUVmlzaXRvciB2aXNpdG9yLCBDbGFzc1Njb3Bl
IHNjb3BlKTsKKworCXB1YmxpYyBBbm5vdGF0aW9uIGdldFBlcnNpc3RpYmxlQW5ub3RhdGlvbigp
IHsKKwkJcmV0dXJuIHRoaXMuY29udGFpbmVyICE9IG51bGwgPyB0aGlzLmNvbnRhaW5lciA6IHRo
aXM7CisJfQogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Db250YWluZXJBbm5vdGF0aW9uLmph
dmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXN0L0NvbnRhaW5lckFubm90YXRpb24uamF2YQpuZXcgZmlsZSBtb2RlIDEw
MDY0NAppbmRleCAwMDAwMDAwLi43YjMxNTQ3Ci0tLSAvZGV2L251bGwKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fz
dC9Db250YWluZXJBbm5vdGF0aW9uLmphdmEKQEAgLTAsMCArMSw1MiBAQAorLyoqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioKKyAqIENvcHlyaWdodCAoYykgMjAxMyBKZXNwZXIgUyBNb2xsZXIgYW5kIG90
aGVycy4KKyAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29t
cGFueWluZyBtYXRlcmlhbHMKKyAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMg
b2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAorICogd2hpY2ggYWNjb21wYW5pZXMg
dGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKKyAqIGh0dHA6Ly93d3cuZWNs
aXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCisgKiAKKyAqIFRoaXMgaXMgYW4gaW1wbGVtZW50
YXRpb24gb2YgYW4gZWFybHktZHJhZnQgc3BlY2lmaWNhdGlvbiBkZXZlbG9wZWQgdW5kZXIgdGhl
IEphdmEKKyAqIENvbW11bml0eSBQcm9jZXNzIChKQ1ApIGFuZCBpcyBtYWRlIGF2YWlsYWJsZSBm
b3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiBwdXJwb3NlcworICogb25seS4gVGhlIGNvZGUgaXMg
bm90IGNvbXBhdGlibGUgd2l0aCBhbnkgc3BlY2lmaWNhdGlvbiBvZiB0aGUgSkNQLgorICoKKyAq
IENvbnRyaWJ1dG9yczoKKyAqICAgICBKZXNwZXIgUyBNb2xsZXIgPGplc3BlckBzZWxza2FiZXQu
b3JnPiAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgorICoqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqLworcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0Owor
CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5CbG9ja1Nj
b3BlOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUmVm
ZXJlbmNlQmluZGluZzsKKworcHVibGljIGNsYXNzIENvbnRhaW5lckFubm90YXRpb24gZXh0ZW5k
cyBTaW5nbGVNZW1iZXJBbm5vdGF0aW9uIHsKKwkKKwlBbm5vdGF0aW9uIFtdIGNvbnRhaW5lZXM7
CisJQXJyYXlJbml0aWFsaXplciBtZW1iZXJWYWx1ZXM7CisJCisJcHVibGljIENvbnRhaW5lckFu
bm90YXRpb24oQW5ub3RhdGlvbiBhbm5vdGF0aW9uLCBSZWZlcmVuY2VCaW5kaW5nIHJlc29sdmVk
Q29udGFpbmVyLCBCbG9ja1Njb3BlIHNjb3BlKSB7CisJCWNoYXIgW11bXSBjb250YWluZXJOYW1l
ID0gcmVzb2x2ZWRDb250YWluZXIuY29tcG91bmROYW1lOworCQlpZiAoY29udGFpbmVyTmFtZS5s
ZW5ndGggPT0gMSkgeworCQkJdGhpcy50eXBlID0gbmV3IFNpbmdsZVR5cGVSZWZlcmVuY2UoY29u
dGFpbmVyTmFtZVswXSwgMCk7CisJCX0gZWxzZSB7CisJCQl0aGlzLnR5cGUgPSBuZXcgUXVhbGlm
aWVkVHlwZVJlZmVyZW5jZShjb250YWluZXJOYW1lLCBuZXcgbG9uZyBbY29udGFpbmVyTmFtZS5s
ZW5ndGhdKTsKKwkJfQorCQkKKwkJdGhpcy5yZXNvbHZlZFR5cGUgPSByZXNvbHZlZENvbnRhaW5l
cjsKKwkJdGhpcy5yZWNpcGllbnQgPSBhbm5vdGF0aW9uLnJlY2lwaWVudDsKKwkJdGhpcy5jb250
YWluZWVzID0gbmV3IEFubm90YXRpb25bMF07CisJCXRoaXMubWVtYmVyVmFsdWUgPSB0aGlzLm1l
bWJlclZhbHVlcyA9IG5ldyBBcnJheUluaXRpYWxpemVyKCk7CisJCWFkZENvbnRhaW5lZShhbm5v
dGF0aW9uLCBmYWxzZSk7CisJCXJlc29sdmVUeXBlKHNjb3BlKTsKKwl9CisJCisJcHJvdGVjdGVk
IHZvaWQgY2hlY2tBbm5vdGF0aW9uVGFyZ2V0KEJsb2NrU2NvcGUgc2NvcGUsIFJlZmVyZW5jZUJp
bmRpbmcgYW5ub3RhdGlvblR5cGUsIGludCBraW5kKSB7CisJCS8vIFRoaXMgaXMgZG9uZSBzcGVj
aWZpY2FsbHkgYnkgdGhlIHJlcGVhdGVkIGFubm90YXRpb24gY2hlY2ssIHNvIHdlIHNob3VsZG4n
dCBkdXBsaWNhdGUgaGVyZQorCX0KKwkKKwlwdWJsaWMgdm9pZCBhZGRDb250YWluZWUoQW5ub3Rh
dGlvbiBhbm5vdGF0aW9uLCBib29sZWFuIHN1cHByZXNzZWQpIHsKKwkJZmluYWwgaW50IGxlbmd0
aCA9IHRoaXMuY29udGFpbmVlcy5sZW5ndGg7CisJCVN5c3RlbS5hcnJheWNvcHkodGhpcy5jb250
YWluZWVzLCAwLCB0aGlzLmNvbnRhaW5lZXMgPSBuZXcgQW5ub3RhdGlvbltsZW5ndGggKyAxXSwg
MCwgbGVuZ3RoKTsKKwkJdGhpcy5jb250YWluZWVzW2xlbmd0aF0gPSBhbm5vdGF0aW9uOworCQl0
aGlzLm1lbWJlclZhbHVlcy5leHByZXNzaW9ucyA9IHRoaXMuY29udGFpbmVlczsKKwkJYW5ub3Rh
dGlvbi5zZXRDb250YWluZXIodGhpcywgc3VwcHJlc3NlZCk7CisJfQorfQpkaWZmIC0tZ2l0IGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FzdC9TaW5nbGVNZW1iZXJBbm5vdGF0aW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1Npbmds
ZU1lbWJlckFubm90YXRpb24uamF2YQppbmRleCAyZWZmMzg5Li5hYmI2YWQ1IDEwMDY0NAotLS0g
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvYXN0L1NpbmdsZU1lbWJlckFubm90YXRpb24uamF2YQorKysgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0
L1NpbmdsZU1lbWJlckFubm90YXRpb24uamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTIgSUJNIENvcnBvcmF0aW9u
IGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTMgSUJNIENvcnBvcmF0aW9u
IGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRo
ZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhl
IHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29t
cGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC0xMSw2ICsx
MSw4IEBACiAgKiAKICAqIENvbnRyaWJ1dG9yczoKICAqICAgICBJQk0gQ29ycG9yYXRpb24gLSBp
bml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24KKyAqICAgICBKZXNwZXIgU3RlZW4gTW9sbGVy
IC0gQ29udHJpYnV0aW9ucyBmb3I6CisgKiAgICAgICAgICBCdWcgNDEyMTQ5OiBbMS44XVtjb21w
aWxlcl0gRW1pdCByZXBlYXRlZCBhbm5vdGF0aW9ucyBpbnRvIHRoZSBkZXNpZ25hdGVkIGNvbnRh
aW5lcgogICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5p
bnRlcm5hbC5jb21waWxlci5hc3Q7CiAKQEAgLTMwLDYgKzMyLDEwIEBAIHB1YmxpYyBjbGFzcyBT
aW5nbGVNZW1iZXJBbm5vdGF0aW9uIGV4dGVuZHMgQW5ub3RhdGlvbiB7CiAJCXRoaXMuc291cmNl
U3RhcnQgPSBzb3VyY2VTdGFydDsKIAkJdGhpcy5zb3VyY2VFbmQgPSB0eXBlLnNvdXJjZUVuZDsK
IAl9CisJCisJcHVibGljIFNpbmdsZU1lbWJlckFubm90YXRpb24oKSB7CisJCS8vIGZvciBzdWJj
bGFzc2VzLgorCX0KIAogCXB1YmxpYyBFbGVtZW50VmFsdWVQYWlyW10gY29tcHV0ZUVsZW1lbnRW
YWx1ZVBhaXJzKCkgewogCQlyZXR1cm4gbmV3IEVsZW1lbnRWYWx1ZVBhaXJbXSB7bWVtYmVyVmFs
dWVQYWlycygpWzBdLmNvbXBpbGVyRWxlbWVudFBhaXJ9Owo=
</data>
<flag name="review"
          id="59632"
          type_id="6"
          status="?"
          setter="jesper"
    />
          </attachment>
      

    </bug>

</bugzilla>