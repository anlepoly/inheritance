<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>453635</bug_id>
          
          <creation_ts>2014-11-30 08:28:00 -0500</creation_ts>
          <short_desc>[compiler][null] Update NullReferenceImplTests and friends</short_desc>
          <delta_ts>2015-04-23 14:06:43 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords>test</keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.6</target_milestone>
          <dependson>453648</dependson>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Stephan Herrmann">stephan.herrmann</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2490614</commentid>
    <comment_count>0</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-11-30 08:28:14 -0500</bug_when>
    <thetext>Bug 453483 requires changes to the bit operations in UnconditionalFlowInfo. This routinely requires verification using NullReferenceImplTests (which are not part of regular builds &amp; tests).

The test harness given there and in NullReferenceImplTransformations supports several strategies for updating and comparing these elements:
 - a human readably description of all transitions in each of the major bit operations (as comments)
 - a hex-encoded tabular definition of those transitions
 - the current implementation of those operations
Additionally, karnaugh maps can be created for developing more compact implementations.

It turns out, that tests and implementation have slightly diverged, thus reducing the feasibility of comparisons:

- tabular definitions are incomplete. Based on a notion of transitive closure one state (0x1C) was considered unreachable, but previous bugs have proven this to be wrong - perhaps due to added UFI-operations that do not participate in the implementation tests. Operation mergedWith was already amended, the others still have to follow suite.

- tabular definitions as well as textual description (comments) are not ordered in the same way as the generator output, making it difficult to compare whether definitions re-generated from the current implementation match to the previously captured definitions.

- re-generating definitions marks all textual descriptions of ThreeDimensionalTransformation (incl. subclass) as &quot;CHECK&quot;, because it is not correctly detected when a transition actually matches the previous tabular form.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2490617</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-11-30 08:33:58 -0500</bug_when>
    <thetext>Additionally, bug 453483 will introduce two more bits to be considered during addInitializationsFrom(). I&apos;ll check feasibility of including these bits in the tests.

This is a problem both for defining the transformation as well as for printing the karnaugh maps. In both cases an increase in size by factor 4 stretches the limits of what can be manually handled.

Minimally, tests must ensure a reasonable value (1,1) for these bits to provide for comparability with previous results.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2490648</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-11-30 12:32:16 -0500</bug_when>
    <thetext>First test updates have been pushed:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=b077f1ec27f6f9c95317db4e5e225319a96f87d5
(A) generator changes to solve these issues:
 - comparison of generator output with previous test file was encumbered by different sorting orders. For each section of NullReferenceImplTransformations a well defined order is now used (selected as to require minimal changes in this file).
 - state 0x1C was not considered by the generator because it was not found to be reachable. Considering, however, that these tests don&apos;t represent all possible operations on flowInfos, and given that this state has been observed in real life, it should be included by the generator. This is ensured by included all named states (&quot;isSymbolic&quot;).
 - the generator created bogus &quot;CHECK&quot; marks because for three-dimensional transformations it could not retrieve the defined result.


http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=9c5059700205577ee2d000823b77569787384ecb
(B) re-order definitions of transformations to align with generator output. In addition to re-ordering lines, this also includes for the symmetric operation &quot;mergedWith&quot; that left &amp; right operands were swapped for a number of late added transitions.


http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=79774393baaba7f9e5f3461242a5b822bf662647
(C) accept output of the generator as improved in (A) into files prepared by (B). All newly added transitions were scanned, some are commented as bogus or not ideal. No transitions were changed, however.

At this point we&apos;re close to a fix point, where the generator would create an exact copy of its input. Only remaining difference: comments on individual transitions (some old, some newly added).

Note, that NullReferenceImplTests - which are not part of our regular test suite - show one failure. During addInitializationsFrom the start value 0000 creates different outcomes depending on the number of slots used (UFI.extra bits, happens only in combination with state 0x2C). I assume, the bug depends on whether or not the flow info is recognized as not having any (interesting) null info.
While this is a definite bug, it&apos;s not a regression recently introduced - it just wasn&apos;t noticed before. I&apos;m waiting with a fix until all dust in the related bugs has settled.

Also, this bug remains open to accommodate more changes necessitated by bug 453483.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2492932</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-12-04 14:20:34 -0500</bug_when>
    <thetext>let&apos;s see if bug 453648 will come to life... (not for M4, though)...</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>