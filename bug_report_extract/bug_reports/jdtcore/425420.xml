<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>425420</bug_id>
          
          <creation_ts>2014-01-10 11:28:00 -0500</creation_ts>
          <short_desc>NPE exception on standard Java build</short_desc>
          <delta_ts>2014-04-30 02:44:32 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 8</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.4 M7</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Avi Bluestein">avib</reporter>
          <assigned_to name="shankha banerjee">shankhba</assigned_to>
          <cc>dominik.stadler</cc>
    
    <cc>jarthana</cc>
    
    <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="62129"
          type_id="1"
          status="+"
          setter="stephan.herrmann"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2348254</commentid>
    <comment_count>0</comment_count>
    <who name="Avi Bluestein">avib</who>
    <bug_when>2014-01-10 11:28:14 -0500</bug_when>
    <thetext>What steps will reproduce the problem?
1. Plain build on eclipse of a project that does build correctly on Junos SR2 and former versions
2. 
3. 


-- Error Details --
Date: Fri Jan 10 18:22:21 IST 2014
Message: Errors running builder &apos;Java Builder&apos; on project &apos;Topology&apos;.
Severity: Error
Product: Eclipse 2.0.1.20130919-0803 (org.eclipse.epp.package.jee.product)
Plugin: org.eclipse.jdt.core
Session Data:
eclipse.buildId=4.3.0.M20130911-1000
java.version=1.7.0_45
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product

Exception Stack Trace:
java.lang.NullPointerException
	at java.lang.String.&lt;init&gt;(Unknown Source)
	at org.eclipse.jdt.internal.compiler.problem.ProblemReporter.conditionalArgumentsIncompatibleTypes(ProblemReporter.java:1445)
	at org.eclipse.jdt.internal.compiler.ast.ConditionalExpression.resolveType(ConditionalExpression.java:600)
	at org.eclipse.jdt.internal.compiler.ast.BinaryExpression.resolveType(BinaryExpression.java:1802)
	at org.eclipse.jdt.internal.compiler.ast.BinaryExpression.resolveType(BinaryExpression.java:1799)
	at org.eclipse.jdt.internal.compiler.ast.BinaryExpression.resolveType(BinaryExpression.java:1799)
	at org.eclipse.jdt.internal.compiler.ast.BinaryExpression.resolveType(BinaryExpression.java:1799)
	at org.eclipse.jdt.internal.compiler.ast.BinaryExpression.resolveType(BinaryExpression.java:1799)
	at org.eclipse.jdt.internal.compiler.ast.BinaryExpression.resolveType(BinaryExpression.java:1799)
	at org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression.resolveType(CombinedBinaryExpression.java:344)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:605)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:970)
	at org.eclipse.jdt.internal.compiler.ast.Block.resolveUsing(Block.java:127)
	at org.eclipse.jdt.internal.compiler.ast.TryStatement.resolve(TryStatement.java:1100)
	at org.eclipse.jdt.internal.compiler.ast.Block.resolve(Block.java:114)
	at org.eclipse.jdt.internal.compiler.ast.WhileStatement.resolve(WhileStatement.java:263)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:510)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:265)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:469)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1185)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1295)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:561)
	at org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:770)
	at org.eclipse.jdt.internal.compiler.ProcessTaskManager.run(ProcessTaskManager.java:137)
	at java.lang.Thread.run(Unknown Source)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2348305</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-10 12:59:05 -0500</bug_when>
    <thetext>Thanks for the report.

Do you see a chance to extract a (small) reproducing example?
Otherwise it will be difficult to find the root cause of that exception.

Hint: From the stack trace we can see that the compiler is trying to report a type error inside a nested expression, perhaps s.t. like
   &quot;x&quot;+val0+&quot;x&quot;+(cond ? val1 : val2)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2348526</commentid>
    <comment_count>2</comment_count>
    <who name="Avi Bluestein">avib</who>
    <bug_when>2014-01-11 10:21:38 -0500</bug_when>
    <thetext>Tell me what you need and I&apos;ll provide it (I cannot disclose the source code being compiled but I can provide the project settings and whatever else).

The project that fails is one of the most simple and small projects in the workspace so it&apos;s not size/complexity oriented.

I&apos;ve also verified this failure to reproduce when searching for &apos;?&apos; (without quotes) in the &quot;File Search&quot; box. 

The exception that is thrown there is:

java.lang.NullPointerException
	at java.lang.String.&lt;init&gt;(Unknown Source)
	at org.eclipse.jdt.internal.compiler.problem.ProblemReporter.conditionalArgumentsIncompatibleTypes(ProblemReporter.java:1445)
	at org.eclipse.jdt.internal.compiler.ast.ConditionalExpression.resolveType(ConditionalExpression.java:600)
	at org.eclipse.jdt.internal.compiler.ast.BinaryExpression.resolveType(BinaryExpression.java:1802)
	at org.eclipse.jdt.internal.compiler.ast.BinaryExpression.resolveType(BinaryExpression.java:1799)
	at org.eclipse.jdt.internal.compiler.ast.BinaryExpression.resolveType(BinaryExpression.java:1799)
	at org.eclipse.jdt.internal.compiler.ast.BinaryExpression.resolveType(BinaryExpression.java:1799)
	at org.eclipse.jdt.internal.compiler.ast.BinaryExpression.resolveType(BinaryExpression.java:1799)
	at org.eclipse.jdt.internal.compiler.ast.BinaryExpression.resolveType(BinaryExpression.java:1799)
	at org.eclipse.jdt.internal.compiler.ast.CombinedBinaryExpression.resolveType(CombinedBinaryExpression.java:344)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:605)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:970)
	at org.eclipse.jdt.internal.compiler.ast.Block.resolveUsing(Block.java:127)
	at org.eclipse.jdt.internal.compiler.ast.TryStatement.resolve(TryStatement.java:1100)
	at org.eclipse.jdt.internal.compiler.ast.Block.resolve(Block.java:114)
	at org.eclipse.jdt.internal.compiler.ast.WhileStatement.resolve(WhileStatement.java:263)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:510)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:265)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:469)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1185)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1295)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:561)
	at org.eclipse.jdt.internal.core.search.matching.MatchLocator.process(MatchLocator.java:1726)
	at org.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches(MatchLocator.java:1143)
	at org.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches(MatchLocator.java:1184)
	at org.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches(MatchLocator.java:1316)
	at org.eclipse.jdt.internal.core.search.JavaSearchParticipant.locateMatches(JavaSearchParticipant.java:95)
	at org.eclipse.jdt.internal.core.search.BasicSearchEngine.findMatches(BasicSearchEngine.java:231)
	at org.eclipse.jdt.internal.core.search.BasicSearchEngine.search(BasicSearchEngine.java:515)
	at org.eclipse.jdt.core.search.SearchEngine.search(SearchEngine.java:584)
	at org.eclipse.jdt.internal.ui.search.JavaSearchQuery.run(JavaSearchQuery.java:144)
	at org.eclipse.search2.internal.ui.InternalSearchUI$InternalSearchJob.run(InternalSearchUI.java:91)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)

eclipse.buildId=4.3.0.M20130911-1000
java.version=1.7.0_45
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -product org.eclipse.epp.package.jee.product</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2348537</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-11 11:57:16 -0500</bug_when>
    <thetext>Can you identify the source line containing the ? operator, which triggers the bug? One of the operands of that expression (before or after &quot;:&quot;) has a type whose name the compiler cannot determine. Do you see any hints what type that might be?

If you cannot(?) extract a shareable code example, could you either (a) run eclipse self-hosted in debug mode to inspect what values the compiler stumbles over, or (b) install a patch with some harness to extract and print that information?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2348597</commentid>
    <comment_count>4</comment_count>
    <who name="Avi Bluestein">avib</who>
    <bug_when>2014-01-12 06:08:06 -0500</bug_when>
    <thetext>Unfortunately there are quite a few such expressions there.
I&apos;ll try commenting them one by one and see where it leads. 

In the mean time, I do advise that you provide some dumping code because this may shed more light on the problem rather than a piece of code that might not reproduce the error on its own.

Thanks!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2348598</commentid>
    <comment_count>5</comment_count>
    <who name="Avi Bluestein">avib</who>
    <bug_when>2014-01-12 06:16:33 -0500</bug_when>
    <thetext>One thing that does reproduce on all projects, regardless of this specific one, is running &quot;Java Search&quot; with the &apos;?&apos; argument (without the quotes).

I didn&apos;t notice I was on &quot;Java Search&quot; when I wanted &quot;File Search&quot; and this causes NPE on all projects and any search.
I guess it&apos;s not related but it&apos;s also a bug (I guess you might want to open a different bug for it)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2348599</commentid>
    <comment_count>6</comment_count>
    <who name="Avi Bluestein">avib</who>
    <bug_when>2014-01-12 06:22:57 -0500</bug_when>
    <thetext>OK I tried removing all the &apos;?&apos; expressions and it still fails.
In fact, it even fails when trying to just edit the code file and whenever you open up the source code, it just throws a NullPointerException on the editor.

The exception is:

Problems occurred when invoking code from plug-in: &quot;org.eclipse.jdt.ui&quot;.


Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:247)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:195)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:258)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:521)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:170)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2348629</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-12 11:21:00 -0500</bug_when>
    <thetext>(In reply to Avi Bluestein from comment #6)
&gt; OK I tried removing all the &apos;?&apos; expressions and it still fails.
&gt; In fact, it even fails when trying to just edit the code file and whenever
&gt; you open up the source code, it just throws a NullPointerException on the
&gt; editor.

That&apos;s hard to believe, because the exception you reported can only occur when processing a ConditionalExpression (cond ? val1 : val2).

Since your newer stacktrace didn&apos;t show the root cause (only the wrapping JavaModelException) we don&apos;t know if that&apos;s indeed the same problem or something unrelated.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2348636</commentid>
    <comment_count>8</comment_count>
    <who name="Avi Bluestein">avib</who>
    <bug_when>2014-01-12 14:09:51 -0500</bug_when>
    <thetext>If you can, build some dumping version of eclipse because setting up a debugging environment for eclipse will take me time (unless it&apos;s awfully easy).

Anyhow, check out the &quot;Java Search&quot; with &apos;?&apos;. It should reproduce for you and should also throw a NullPointerException.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2353383</commentid>
    <comment_count>9</comment_count>
      <attachid>239249</attachid>
    <who name="Avi Bluestein">avib</who>
    <bug_when>2014-01-23 04:31:32 -0500</bug_when>
    <thetext>Created attachment 239249
A piece of code that was stripped and only the offending part was left

Once this project is loaded into Kepler, the exception is immediately triggered.
The failure seems to be in the &apos;?&apos; where &quot;PING FAILED&quot; is used together with a float variable.

I hope it helps.

The code itself is meaningless and most of the lines were stripped but this does reproduce the error on a clean workspace.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2353425</commentid>
    <comment_count>10</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-23 06:03:03 -0500</bug_when>
    <thetext>Thanks for the test, this will be very helpful in understanding the bug.

@Shankha, can you take it forward from here?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2353535</commentid>
    <comment_count>11</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-01-23 09:47:52 -0500</bug_when>
    <thetext>I see ton of compilation issues (27) but no NPE.

I am using Luna?
Eclipse SDK

Version: Luna (4.4)
Build id: I20140120-2000

Do you want me to try Kepler?

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2353572</commentid>
    <comment_count>12</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-23 10:30:34 -0500</bug_when>
    <thetext>Shankha, I believe the compilation issues are part of the problem. I can see the NPE sometimes, but when I remove all the parts causing compile errors, the machine runs faultlessly.

FWIW, I just tried it in BETA_JAVA8 and also there the NPE occurred.

What I did:
- import &gt; existing project &gt; from archive
- deselect the duplicate entry mentioning &quot;(bin)&quot;
Immediately during import I get the NPE from &quot;Building workspace&quot;.

Note, that this import even uses a bogus/undefined classpath (since no .classpath included in the archive).

After correcting the build path (removing then re-adding the source folder) the NPE no longer occurs, weird indeed.

So if you are able to reproduce with these exact steps, the interesting question will be: can we create a JUnit from the example?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2353602</commentid>
    <comment_count>13</comment_count>
    <who name="Avi Bluestein">avib</who>
    <bug_when>2014-01-23 10:46:16 -0500</bug_when>
    <thetext>I&apos;ll also add that copying the code from these files to other new files seems to help in some cases. I suspected it to be some unicode issue but couldn&apos;t find something offending in the files.

The chain of events leading to the NPE seems to somehow be related to this very file and piece of code.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2356366</commentid>
    <comment_count>14</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-01-30 00:02:56 -0500</bug_when>
    <thetext>Hi Stephan,

I performed the steps as you mentioned in Comment 12.

I used the latest BETA_JAVA8 code on SR1 (org.springsource.ide.eclipse.java8.site - http://dist.springsource.com/snapshot/TOOLS/java8/e43)

Created a new Project and imported the archive and removed the bin entry.

I see only compilation issues and no NPE&apos;s. I have tried it a few times.

I am on holidays till 14 Feb. Will work on it from 17th FEB.

Thanks,
Shankha</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2356460</commentid>
    <comment_count>15</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-30 04:58:09 -0500</bug_when>
    <thetext>(In reply to shankha banerjee from comment #14)
&gt; Hi Stephan,
&gt; 
&gt; I performed the steps as you mentioned in Comment 12.
&gt; 
&gt; I used the latest BETA_JAVA8 code on SR1
&gt; (org.springsource.ide.eclipse.java8.site -
&gt; http://dist.springsource.com/snapshot/TOOLS/java8/e43)
&gt; 
&gt; Created a new Project and imported the archive and removed the bin entry.

In my description in comment 12 deselecting the &quot;(bin)&quot; entry was meant as
*part of* the importing process. If you changed the setup *after* import
then you clearly have a different situation. 
I&apos;m not 100% sure how I should read your sentence.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2356544</commentid>
    <comment_count>16</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-01-30 07:09:36 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #15)
Hi Stephan,
I haven&apos;t changed the setup after import.

Following are the steps:

1) Have the latest JDT core (BETA_JAV8) on top of SR1. The IDE also updated with the latest updates from org.springsource.ide.eclipse.java8.site - http://dist.springsource.com/snapshot/TOOLS/java8/e43.
 
2) Launch a new configuration through Run Configuration
3) Create a new project with a default package &quot;src&quot;.
4) Right click on src and say select import.
5) From the General Option select Archive File.
6) In the from archive dialog box select the location to the example.zip (Test Case).

7) From the left window deselect bin. (Comment 12) 
8) The parts chosen are NewsbridgeServer and src.
9) Click finish.

I do not see a NPE.

Did try out a Project clean.

I assume the NPE message (along with the call stack) should come up on the console of the inner eclipse as well in the problems view of the new launch ?

Also tried the above steps without launching it through a inner instance of eclipse, i.e. by launching a new instance of eclipse and creating a fresh project and repeating the above steps. 
 
Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2356559</commentid>
    <comment_count>17</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-30 07:48:21 -0500</bug_when>
    <thetext>(In reply to shankha banerjee from comment #16)

&gt; 3) Create a new project with a default package &quot;src&quot;.
&gt; 4) Right click on src and say select import.
&gt; 5) From the General Option select Archive File.

That&apos;s the error: please carefully read:

(In reply to Stephan Herrmann from comment #12)
&gt; - import &gt; existing project &gt; from archive
&gt; - deselect the duplicate entry mentioning &quot;(bin)&quot;

This is a different wizard than what you are doing.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2356727</commentid>
    <comment_count>18</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-01-30 11:41:52 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #17)
&gt; (In reply to shankha banerjee from comment #16)
&gt; 
&gt; &gt; 3) Create a new project with a default package &quot;src&quot;.
&gt; &gt; 4) Right click on src and say select import.
&gt; &gt; 5) From the General Option select Archive File.
&gt; 
&gt; That&apos;s the error: please carefully read:
&gt; 
&gt; (In reply to Stephan Herrmann from comment #12)
&gt; &gt; - import &gt; existing project &gt; from archive
&gt; &gt; - deselect the duplicate entry mentioning &quot;(bin)&quot;
&gt; 
&gt; This is a different wizard than what you are doing.

Sorry about that. I see the NPE.

&quot;Errors occurred during the build.
Errors running builder &apos;Java Builder&apos; on project &apos;NewsbridgeServer&apos;.
java.lang.NullPointerException&quot;

Thanks a lot.


Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2364111</commentid>
    <comment_count>19</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-02-17 00:02:26 -0500</bug_when>
    <thetext>Upgraded to the latest code. Cannot reproduce the error.

Stephan,
I updated to the latest code on BETA_JAVA8 branch. I can&apos;t reproduce the issue. 
Can you please check if you still can reproduce the issue.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2365137</commentid>
    <comment_count>20</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-18 16:04:10 -0500</bug_when>
    <thetext>(In reply to shankha banerjee from comment #19)
&gt; Upgraded to the latest code. Cannot reproduce the error.
&gt; 
&gt; Stephan,
&gt; I updated to the latest code on BETA_JAVA8 branch. I can&apos;t reproduce the
&gt; issue. 
&gt; Can you please check if you still can reproduce the issue.

Sorry, Shankha, the goal is not to see the bug dissolve in mist, but to grab the NPE and understand its cause. I&apos;m not surprised if it doesn&apos;t surface in HEAD, as this kind of bug is typically very shy, but it may strike back when we turn away.

I don&apos;t know of any code changes that would give a good explanation why this bug no longer occurs.

Please, go back to the state when it was reproduceable. This state is a rare chance to catch a bug we haven&apos;t yet understood the first thing about.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2365255</commentid>
    <comment_count>21</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-02-18 23:10:13 -0500</bug_when>
    <thetext>Reverted back to commit on 31 Jan

====================================================================
Full Trace Message:


!ENTRY org.eclipse.core.resources 4 2 2014-02-19 09:36:43.811
!MESSAGE Problems occurred when invoking code from plug-in: &quot;org.eclipse.core.resources&quot;.
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.core.resources 4 75 2014-02-19 09:36:43.816
!MESSAGE Errors occurred during the build.
!SUBENTRY 1 org.eclipse.jdt.core 4 75 2014-02-19 09:36:43.816
!MESSAGE Errors running builder &apos;Java Builder&apos; on project &apos;NewsbridgeServer&apos;.
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.core 4 4 2014-02-19 09:36:44.569
!MESSAGE Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package com.newsbridge.server;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.RandomAccessFile;
import java.lang.management.GarbageCollectorMXBean;
import java.lang.management.ManagementFactory;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.SortedMap;
import java.util.TreeMap;

import com.jpragma.snmp.annotations.MibProperty;
import com.jpragma.snmp.asn.AsnInteger;
import com.jpragma.snmp.asn.SmiGauge32;
import com.newsbridge.administration.api.ServerMonitor;
import com.newsbridge.core.GlobalDefs;
import com.newsbridge.core.data.types.Pair;
import com.newsbridge.core.exceptions.NewsbridgeRuntimeException;
import com.newsbridge.topology.api.TopologyNode;
import com.newsbridge.topology.exporter.TcpInvokerExporter;
import com.newsbridge.topology.net.NBInvocationHandler;
import com.newsbridge.utils.date.DateTimeUtils;
import com.newsbridge.utils.java.lang.RuntimeInfo;
import com.newsbridge.utils.log.ReportFile;
import com.newsbridge.utils.log.SystemLogger;
import com.newsbridge.utils.monitoring.HeartBeatCustomMonitor;
import com.newsbridge.utils.monitoring.HeartBeatMonitor;
import com.newsbridge.utils.network.ICMPPing;
import com.newsbridge.utils.spring.NewsbridgeScope;

//@MibBean
public class NewsbridgeServerMonitor implements ServerMonitor {

	
	/**
	 * A custom heart-beat logger which prints out server status data
	 */
	protected final class HeartBeatLogger implements HeartBeatCustomMonitor {
		
		public boolean test() {
			StringBuilder builder = new StringBuilder();
			
			builder.append(&quot;\nPrimary Topology Ping (ms): &quot;);
			try {
				if (!primaryTopologyServer.isEmpty())
					float time = ICMPPing.ping(primaryTopologyServer, 2000);
				else
					builder.append(&quot;N/A&quot;);
			}
			catch(Exception ex) {
				builder.append(&quot;PING FAILED&quot;);
			}

			builder.append(&quot;\nSecondary Topology Ping (ms): &quot;);
			try {
				if (!primaryTopologyServer.isEmpty()) {
					float time = ICMPPing.ping(secondaryTopologyServer, 2000);
					builder.append(time &gt;= 0F ? time : &quot;PING FAILED&quot;); 
				}
				else
					builder.append(&quot;N/A&quot;);
			}
			catch(Exception ex) {
				builder.append(&quot;PING FAILED&quot;);
			}
			return true;
		}
	}
}

----------------------------------- SOURCE END -------------------------------------
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2014-02-19 09:36:44.587
!MESSAGE Problems occurred when invoking code from plug-in: &quot;org.eclipse.jdt.ui&quot;.
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:249)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:271)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:729)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:789)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1248)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2014-02-19 09:36:44.588
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2014-02-19 09:36:44.588
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2014-02-19 09:36:44.590
!MESSAGE Error in JDT Core during reconcile
!STACK 1
Java Model Exception: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:249)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:271)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:191)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:729)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:789)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1248)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)
Caused by: java.lang.NullPointerException
Caused by: java.lang.NullPointerException
!SUBENTRY 1 org.eclipse.jdt.core 4 1005 2014-02-19 09:36:44.590
!MESSAGE java.lang.NullPointerException
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 2 2014-02-19 09:36:44.598
!MESSAGE Problems occurred when invoking code from plug-in: &quot;org.eclipse.jdt.ui&quot;.
!STACK 0
java.lang.NullPointerException

!ENTRY org.eclipse.jdt.ui 4 0 2014-02-19 09:36:44.600
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.NullPointerException


=====================================================================

Will continue investigating further.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2365261</commentid>
    <comment_count>22</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-02-19 00:31:32 -0500</bug_when>
    <thetext>It may not be relevant, but may help in reproducing the issue:

Commit ID: a6f21a01110fe95a43760ec08fc8cc1e27e1c4bc  PASS
Commit ID: bca01eadc82a3abb71100149fcbedb07d33a04ad  NPE</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2365274</commentid>
    <comment_count>23</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-02-19 01:29:33 -0500</bug_when>
    <thetext>Reason:

ProblemReferenceBinding.&lt;init&gt;(char[][], ReferenceBinding, int) line: 25	
LookupEnvironment.computeBoxingType(TypeBinding) line: 386	
ConditionalExpression.resolveType(BlockScope) line: 605	
MessageSend.resolveType(BlockScope) line: 649	
MessageSend(Expression).resolve(BlockScope) line: 1019	


The sourceName (from ProblemReferenceBinding) field is not assigned.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2365332</commentid>
    <comment_count>24</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-02-19 05:03:22 -0500</bug_when>
    <thetext>We do not see the bug in  a6f21a01110fe95a43760ec08fc8cc1e27e1c4bc
as
org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java
Function: resolveType
Line: 483
if (isPolyExpression()) {
  if (this.expectedType == null) {
	this.polyExpressionScope = scope; // preserve for eventual resolution/error reporting.
	return new PolyTypeBinding(this);
  }

Doesn&apos;t let the flow reach the call to
  scope.problemReporter().conditionalArgumentsIncompatibleTypes.

  
The patch on bca01eadc82a3abb71100149fcbedb07d33a04ad  does make the test case succed. 


The error could be resolved by the following line:

org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/ProblemReferenceBinding.java:

@@ -24,6 +24,7 @@ public class ProblemReferenceBinding extends ReferenceBinding {

 public ProblemReferenceBinding(char[][] compoundName, ReferenceBinding closestMatch, int problemReason) {
        this.compoundName = compoundName;
+       this.sourceName = compoundName[compoundName.length - 1]; // [java][util][Map$Entry]
        this.closestMatch = closestMatch;
        this.problemReason = problemReason;
 }

-----------------------------------------------------------------

The next error which is exposed is:

Errors running builder &apos;Java Builder&apos; on project &apos;NewsbridgeServer&apos;.
Could not initialize class org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment

Will have to figure out if this is a real error or resolved / bypassed through 
subsequent commits.

We should be hitting the bug by simply compiling the code provided, instead of 
going through the steps mentioned in https://bugs.eclipse.org/bugs/show_bug.cgi?id=425420#c12.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2365412</commentid>
    <comment_count>25</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-02-19 07:04:01 -0500</bug_when>
    <thetext>(In reply to shankha banerjee from comment #24)
&gt; 
&gt; The next error which is exposed is:
&gt; 
&gt; Errors running builder &apos;Java Builder&apos; on project &apos;NewsbridgeServer&apos;.
&gt; Could not initialize class
&gt; org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment
&gt; 
&gt; Will have to figure out if this is a real error or resolved / bypassed
&gt; through 
&gt; subsequent commits.
&gt; 
&gt; We should be hitting the bug by simply compiling the code provided, instead
&gt; of 
&gt; going through the steps mentioned in
&gt; https://bugs.eclipse.org/bugs/show_bug.cgi?id=425420#c12.

Please ignore this as the error was introduced due to my own changes.

A simplified version of the test case:

//package src;
public class X {
  void test() {
	int x = 0;
	foo(0 &gt;= 0 ? x : &quot;&quot;); 
  }
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2365443</commentid>
    <comment_count>26</comment_count>
      <attachid>240108</attachid>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-02-19 08:10:41 -0500</bug_when>
    <thetext>Created attachment 240108
Patch: To be applied on latest code

Minor fix. Test results are green. I do not have a automated test case.
The patch has been tested on commit ID bca01eadc82a3abb71100149fcbedb07d33a04ad.

It resolves the issue.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2365514</commentid>
    <comment_count>27</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-19 10:07:09 -0500</bug_when>
    <thetext>(In reply to shankha banerjee from comment #24)
&gt; Doesn&apos;t let the flow reach the call to
&gt;   scope.problemReporter().conditionalArgumentsIncompatibleTypes.
&gt; 
[...] 
&gt; The error could be resolved by the following line:
&gt; 
&gt; org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/
&gt; ProblemReferenceBinding.java:

Ok, this is good information. Before we go about fixing, let&apos;s make sure we exactly understand what happens:

- ProblemReferenceBinding doesn&apos;t have a sourceName
- problemReporter().conditionalArgumentsIncompatibleTypes is invoked with a ProblemReferenceBinding as an argument(?)
- conditionalArgumentsIncompatibleTypes needs the sourceName of the argument

Is this exactly what you observed?

If so, we have three players contributing to the NPE, and should evaluate, which one should be modified. Given that this condition is rarely triggered, normal operation must avoid (at least) one of the ingredients. We could be playing by either of these rules:
- always assign a valid value to ReferenceBinding.sourceName (incl subtypes)
- never access the sourceName of a ProblemReferenceBinding
- never call (certain) methods of ProblemReporter with a ProblemReferenceBinding
- nerver access sourceName inside methods of ProblemReporter
or similar.

Going through the exercise of checking which of these rules might be valid (with the one exception that caused this bug) will help to create a fix that blends well with the existing design decisions rather than taking an opportunistic choice that helps only for this one particular bug without attention to general design.

Maybe you&apos;ve already done some search for &quot;prior art&quot; in this field? If not I suggest you do some investigation, which of the above is most likely intended by looking at &quot;what others did&quot;.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2365819</commentid>
    <comment_count>28</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-02-20 01:58:11 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #27)
&gt; 
&gt; - ProblemReferenceBinding doesn&apos;t have a sourceName
&gt; - problemReporter().conditionalArgumentsIncompatibleTypes is invoked with a
&gt; ProblemReferenceBinding as an argument(?)
&gt; - conditionalArgumentsIncompatibleTypes needs the sourceName of the argument
&gt; 
&gt; Is this exactly what you observed?

Yes This is what I observe.
To clarify a little more:
ProblemReferenceBinding does not have a initialized value of sourceName.

Some information may be useful:
The call to conditionalArgumentsIncompatibleTypes is made only once from
org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/ast/ConditionalExpression.java

Line: 666

&gt; - always assign a valid value to ReferenceBinding.sourceName (incl subtypes)
I checked all the subtypes (all subsequent descendents) of ReferenceBinding and sourceName is initialized in all the cases except IntersectionCastBinding.

&gt; - never access the sourceName of a ProblemReferenceBinding

&gt; - nerver access sourceName inside methods of ProblemReporter
&gt; or similar.
&gt; 

InterectionCastBinding has its own implementation of sourceName() and therefore
doesn&apos;t use sourceName (the field) explicitly.

We could assign a valid value to sourceName or have a implementation of
sourceName() which calculates the value when need be from compoundName.

Field sourceName is accessed at various other places in ProblemReporter.
 
&gt; - never call (certain) methods of ProblemReporter with a
&gt; ProblemReferenceBinding

Sorry, I don&apos;t see a way how I can do that.

Based on my investigation the correct solution could be 
(1) Calculate sourceName in conditionalArgumentsIncompatibleTypes if the argument is ProblemReferenceBinding as it is a error handling routine (and therefore the runtime cost is not incurred in the general compiler path) and it
is called from one place.

(2) The better solution which makes it look elegant and fits in the design is
to 
(a) initialize sourceName in ProblemReporterBinding constructor.
or
(b) provide a implementation of sourceName() and let it calculate sourceName as
and when needed.

My preferred choice would be 2(b) as it is efficient.
I currently have 2(a) in my implementation.
 
Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2365946</commentid>
    <comment_count>29</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-02-20 06:45:13 -0500</bug_when>
    <thetext>I was trying to come up with a automated test case.

Wrote up a test case in:

org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/parser/ComplianceDiagnoseTest.java

public void test425420() {
	if (this.complianceLevel &lt; ClassFileConstants.JDK1_5)
		return;
	String[] testFiles = new String[] {
		&quot;X.java&quot;,
		&quot;public class X {\n&quot; +
		&quot;  void test() {\n&quot; +
		&quot;	int x = 0;\n&quot; +
		&quot;	foo(0 &gt;= 0 ? x : \&quot;\&quot;); \n&quot; +
		&quot;  }\n&quot; +
		&quot;}\n&quot;
	};

        // -&gt; Ignore the error string for now. Will fix later.
	String expected13ProblemLog =
		&quot;----------\n&quot; +
		&quot;----------\n&quot;;

	this.runNegativeTest(testFiles, expected13ProblemLog);
}

This takes almost the same path as the test case provided in Comment 25 and
executed through the steps as shown in Comment 12.

call stack:

LookupEnvironment.getType(char[][]) line: 1099	
LookupEnvironment.computeBoxingType(TypeBinding) line: 364	
ConditionalExpression.resolveType(BlockScope) line: 604	
MessageSend.resolveType(BlockScope) line: 649	
MessageSend(Expression).resolve(BlockScope) line: 1019	
MethodDeclaration(AbstractMethodDeclaration).resolveStatements() line: 618	
MethodDeclaration.resolveStatements() line: 303	
MethodDeclaration(AbstractMethodDeclaration).resolve(ClassScope) line: 532	
TypeDeclaration.resolve() line: 1211	

We are not able to determine the package type in case of the test case mentioned in the bug report (executed as shown in Comment 12) and thus return null to computeBoxingType and thus the call to ProblemReferenceBinding.

Otherwise we are able to figure out the package name and the call to ProblemReferenceBinding is skipped.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2366358</commentid>
    <comment_count>30</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-20 16:42:41 -0500</bug_when>
    <thetext>Combining the findings about IntersectionCastTypeBinding and ProblemReporter, I think it&apos;s safe to conclude, that the recommended use would be via the method sourceName() and where we directly access the field we were plain lazy :), just compare the numbers of references to sourceName vs. sourceName() within ProblemReporter!

This laziness has a real risk since now we know that two subclasses of ReferenceBinding may have the field uninitialized.

Given that Problem*Bindings are indeed quite likely to end up in the ProblemReporter I think the following would add some safety indeed:
- replace all access to the field sourceName inside ProblemReporter with
  calling the corresponding method.
- add the one missing implementation of sourceName() in ProblemReferenceBinding


Regarding the test: the proof of the pudding is: can it reproduce the NPE?

&gt; We are not able to determine the package type

this I don&apos;t understand.

Also unclear:
- the connection to ComplianceDiagnostTest
- why only executed at 1.5+
- the variable name &quot;expected13ProblemLog&quot; :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2367295</commentid>
    <comment_count>31</comment_count>
      <attachid>240235</attachid>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-02-23 07:41:38 -0500</bug_when>
    <thetext>Created attachment 240235
Patch

Hi Stephan,

Taking into consideration discussions in Comment 30.

&gt; we were plain lazy :), just compare the numbers of references to sourceName
&gt; vs. sourceName() within ProblemReporter!

Yes you are correct. The field sourceName is accesed less frequently.

--------------------------------------------------------------------------
Instances where sourceName (field) is directly
accessed instead of sourceName(), they belong to TypeVariableBinding.  

There is one exception.
ProblemReporter.java: invalidEnclosingType 
Line: 3723
if (enclosingType.sourceName)  ReferenceBinding.

One of the subtypes of RefernceBinding is WildcardBinding.java has it&apos;s own implementation of sourceName() and therefore
the result will be diffirent if we replace access to sourcName with method call sourceName().

--------------------------------------------------------------------------

I have modified all the instaces(except the one case as written above) 
where field sourceName was accessed directly to access through the function sourceName() 

TypeVariableBinding does not have it&apos;s own implementation of sourceName() and picks it up from ReferenceBinding which returns sourceName. Thus we are safe.

&gt; This laziness has a real risk since now we know that two subclasses of
&gt; ReferenceBinding may have the field uninitialized.

There is just one class ProblemReferenceBinding. Which is the second subclass
you are referring to, IntersectionCastTypeBinding? It has it&apos;s own implementation of sourceName()?

&gt; - add the one missing implementation of sourceName() in
&gt; ProblemReferenceBinding

I have done that for the patch. 

Although, If you look at SourceTypeBinding, it doesn&apos;t have
it&apos;s own implementation of sourceName() and uses that of ReferenceBinding. It initializes sourceName in constructor. It (sourceName() from SourceTypeBinding) 
is extensively used in ProblemReporter.java.

I have uploaded the patch. Could you please review the patch? 
The patch has to be applied on the BETA_JAVA8  branch (tip). 

Test Results are all green.

--------------------------------------------------------------------

I will write about the test case in a seperate comment.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2367402</commentid>
    <comment_count>32</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-02-24 02:05:57 -0500</bug_when>
    <thetext>Regarding the test case.

(In reply to Stephan Herrmann from comment #30)

&gt; Regarding the test: the proof of the pudding is: can it reproduce the NPE?

Not yet.

&gt; 
&gt; &gt; We are not able to determine the package type
&gt; 
&gt; this I don&apos;t understand.
&gt; 
&gt; Also unclear:
&gt; - the connection to ComplianceDiagnostTest
&gt; - why only executed at 1.5+
&gt; - the variable name &quot;expected13ProblemLog&quot; :)

My strategy was this.
Let us figure out the call stack for the error. After that try to reproduce the same code path.

1) Smallest piece of code which reproduces the error.
public class X {
  void test() {
	int x = 0;
	foo(0 &gt;= 0 ? x : &quot;&quot;); 
  }
} 

2) Put a breakpoint in the function in ProblemReporter which leads to NPE.

public void conditionalArgumentsIncompatibleTypes(ConditionalExpression expression, TypeBinding trueType, TypeBinding falseType) {
	this.handle(
		IProblem.IncompatibleTypesInConditionalOperator,
		new String[] {new String(trueType.readableName()), new String(falseType.readableName())},
		new String[] {new String(trueType.sourceName()), new String(falseType.sourceName())},  // ---&gt; NPE here. trueType.sourceName is NULL
																							   // Therefore trueType.sourceName() retunrs NULL.
		expression.sourceStart,
		expression.sourceEnd);
}

3) Figure out the call stack.
 
Caused by: java.lang.NullPointerException
	at java.lang.String.&lt;init&gt;(String.java:166)
	at org.eclipse.jdt.internal.compiler.problem.ProblemReporter.conditionalArgumentsIncompatibleTypes(ProblemReporter.java:1569)
	at org.eclipse.jdt.internal.compiler.ast.ConditionalExpression.resolveType(ConditionalExpression.java:666)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:649)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1019)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:618)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:303)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:532)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1211)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1321)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:571)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:921)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:966)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:205)
	... 17 more
 
4) The idea is to have same piece of code and fine tune test setings then we cam follow the same call stack and
   reproduce the bug as a unit test case.

   If we run test case to ecj or without the specific steps as mentioned in Comment 12 we do not see the NPE.

Now coming back to the questions:
5) 
&gt; Also unclear:
&gt; - the connection to ComplianceDiagnostTest 
&gt; - why only executed at 1.5+
&gt; - the variable name &quot;expected13ProblemLog&quot; :)
 
I should have correctly specified the variable name. My mistake(copy/paste). I have changed the variable
name to expectedProblemLog.

I hvae put the test case in ComplianceDiagnostTest as the code path it takes for Compliance 1.5+
effects the path. I will explain.

The reason for creation of ProblemReferenceBinding object:

LookupEnvironment.computeBoxingType(TypeBinding) line: 364	
ConditionalExpression.resolveType(BlockScope) line: 604	
MessageSend.resolveType(BlockScope) line: 649	
MessageSend(Expression).resolve(BlockScope) line: 1019	
MethodDeclaration(AbstractMethodDeclaration).resolveStatements() line: 618	
MethodDeclaration.resolveStatements() line: 303	
MethodDeclaration(AbstractMethodDeclaration).resolve(ClassScope) line: 532	
TypeDeclaration.resolve() line: 1211	
TypeDeclaration.resolve(CompilationUnitScope) line: 1321	

case TypeIds.T_int :
			boxedType = getType(JAVA_LANG_INTEGER);
			if (boxedType != null) return boxedType;
			return new ProblemReferenceBinding(JAVA_LANG_INTEGER, null, NotFound);

The field boxedType is NULL and therefore the call to the constructor: ProblemReferenceBinding(JAVA_LANG_INTEGER, null, NotFound) 			

This behavior is observed if the test case is executed with steps mentioned in Comment 12.

Now with the standalone test case the behaivour is exactly the same as LookupEnvironment.computeBoxingType(TypeBinding) line: 364
i.e.
case TypeIds.T_int :
			boxedType = getType(JAVA_LANG_INTEGER); 
In this case boxedType is  returned as non null and the function returns the value of boxedType.			

Your question regarding &gt; - why only executed at 1.5+ ?

Please have a look at the part of the call stack:

LookupEnvironment.computeBoxingType(TypeBinding) line: 364	
ConditionalExpression.resolveType(BlockScope) line: 604	
MessageSend.resolveType(BlockScope) line: 649	       

if (valueIfTrueType.isBaseType() &amp;&amp; valueIfTrueType != TypeBinding.NULL) {
			if (use15specifics) {
				valueIfTrueType = env.computeBoxingType(valueIfTrueType);

The call to  env.computeBoxingType is under the flag use15specifics.
The field  use15specifics is intialized as 

boolean use15specifics = sourceLevel &gt;= ClassFileConstants.JDK1_5;

Therefore the  complaince setting of 1.5.


Now regarding the question:
&gt; &gt; We are not able to determine the package type?

We will now proceed with the call to 
boxedType = getType(JAVA_LANG_INTEGER)

The execution proceeds till: 

LookupEnvironment.getPackage0(char[]) line: 1051	
LookupEnvironment.getType(char[][]) line: 1107	
LookupEnvironment.computeBoxingType(TypeBinding) line: 364	

In the stand alone case:
return this.knownPackages.get(name);

The contents of this.knownPackages is &quot;package java&quot;.

That is what is returned.

The variable packageBinding is assigned the value package java.lang.
if ((packageBinding = packageBinding.getPackage0(compoundName[i])) == null) : Line 1113

Now Line 1122:
		else if ((referenceBinding = packageBinding.getType0(compoundName[compoundName.length - 1])) == null)
			referenceBinding = askForType(packageBinding, compoundName[compoundName.length - 1]);

referenceBinding is set as BinaryTypeBinding 
public final class java.lang.Integer.

The check (Line 1131):
	if (referenceBinding.isNestedType())

 and then referenceBinding is returned.     

In case where we face NPE:
return this.knownPackages.get(name);

The conetnts of this.knownPackages is:
package src
package java[MISSING]

package java[MISSING] is picked up.

		else if ((referenceBinding = packageBinding.getType0(compoundName[compoundName.length - 1])) == null)
			referenceBinding = askForType(packageBinding, compoundName[compoundName.length - 1]);

referenceBinding is null and we return null from this function : computeBoxingType.

case TypeIds.T_int :
			boxedType = getType(JAVA_LANG_INTEGER);
			if (boxedType != null) return boxedType;
			return new ProblemReferenceBinding(JAVA_LANG_INTEGER, null, NotFound);

This leads to creation of ProblemReferenceBinding object.

And as we know  ProblemReferenceBinding doesn&apos;t have a initialized value of sourceName we crash.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2370295</commentid>
    <comment_count>33</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-03-02 23:06:09 -0500</bug_when>
    <thetext>The target is being moved to 4.4 M7. Patch for the bug there for review. A test case has to be devised which can reproduce the issue as a Junit.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2389111</commentid>
    <comment_count>34</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-04-15 05:34:20 -0400</bug_when>
    <thetext>Shankha, any progress regarding a JUnit test?

You may have to find a test suite with better infra structure than we have in compiler.regression, maybe s.t. in tests.builder?

If you closely debug the steps in comment 12 you may want to inspect the classpath used during the first build (with no file .classpath given). S.t. I saw in your comment 32: if you really saw a &quot;package src&quot; then this might be a clear hint on what was broken in the project setup!

Also, when you upload a new patch, please give a summary of problems, causes and solutions, as the previous comments are very verbose and make it difficult to distinguish your actual findings from thinking aloud while doing experiments and trying to understand the issue.

Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2392242</commentid>
    <comment_count>35</comment_count>
      <attachid>242269</attachid>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-04-24 03:07:43 -0400</bug_when>
    <thetext>Created attachment 242269
Patch

--- Patch ----

1) Test results are green.
2) The patch fixes is in sync with the latest code and fixes the issue mentioned in the test case.
3) I was able to verify the patch as mentioned in Comment 31 that the test case provided by the user works fine.

This was verified by applying the patch on commit ID: bca01eadc82a3abb71100149fcbedb07d33a04ad.

--- Please see his point ---
4) It is now difficult to verify the patch now as other components the UI have move forward and if the JDT core head is moved to bca01eadc82a3abb71100149fcbedb07d33a04ad other issues crop up.
----------------------------

Please see Comment 22 as to why the NPE is not reproducible after bca01eadc82a3abb71100149fcbedb07d33a04ad.

5)  I have incorporated the changes Stephan suggested in Comment 30.
Have explained the actions taken in Comment 31.

In short, All the &quot;direct&quot; accesses to sourceName have been modified and
sourceName is now accessed with the already available function call sourceName().

Comment 31 is about the Patch. Comment 32 is about the test case.

--- Test Case ---

I do not have a test case. I am working on your suggestion on Comment 34.
 
-------------------------------------------------------------------


Will it be okay to commit the code since it solves the issue and keep the bug open for the automated test case.

Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2392245</commentid>
    <comment_count>36</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-04-24 03:15:05 -0400</bug_when>
    <thetext>(In reply to shankha banerjee from comment #35)
&gt; 4) It is now difficult to verify the patch now as other components the UI
&gt; have move forward and if the JDT core head is moved to
&gt; bca01eadc82a3abb71100149fcbedb07d33a04ad other issues crop up.
&gt; ----------------------------
&gt; 
I will try to see if I can verify the bug with a older release. Most probably SR1. Will update soon.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2392265</commentid>
    <comment_count>37</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-04-24 04:02:03 -0400</bug_when>
    <thetext>(In reply to shankha banerjee from comment #36)
&gt; (In reply to shankha banerjee from comment #35)
&gt; &gt; 4) It is now difficult to verify the patch now as other components the UI
&gt; &gt; have move forward and if the JDT core head is moved to
&gt; &gt; bca01eadc82a3abb71100149fcbedb07d33a04ad other issues crop up.
&gt; &gt; ----------------------------
&gt; &gt; 
&gt; I will try to see if I can verify the bug with a older release. Most
&gt; probably SR1. Will update soon.

I was able to verify with Version: Kepler Service Release 1
Build id: 20130919-0819.

1) Revert the head to bca01eadc82a3abb71100149fcbedb07d33a04ad.
2) You can reproduce the error on the test case attached in the bug report as 
well as the simplified test case.

class X {
  void test() {
	int x = 0;
	foo(0 &gt;= 0 ? x : &quot;&quot;); 
  }
}

3) After the patch on bca01eadc82a3abb71100149fcbedb07d33a04ad the bug is resolved. The test case does not throw a NPE. The simplified test case also 
does not result in NPE.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2392350</commentid>
    <comment_count>38</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-04-24 04:57:35 -0400</bug_when>
    <thetext>(In reply to shankha banerjee from comment #32)
&gt; 1) Smallest piece of code which reproduces the error.
&gt; public class X {
&gt;   void test() {
&gt; 	int x = 0;
&gt; 	foo(0 &gt;= 0 ? x : &quot;&quot;); 
&gt;   }
&gt; } 

Please add this as a regression test. I understand the NPE does not show up
on HEAD - but if you can show that there is a junit which produces the NPE
when reset to a certain commit and that the same junit passes cleanly when
the fix is applied on top of that commit, it should be good enough.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2392445</commentid>
    <comment_count>39</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-04-24 07:42:22 -0400</bug_when>
    <thetext>Shankha, are you working on creating the JUnit test?

If the test is a pure compiler test, I don&apos;t see why incompatibilities between old JDT/Core and new JDT/UI would affect the test, since you can run it in Headless mode and even exclude jdt.ui (and others dependending on it) from the test launch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2392455</commentid>
    <comment_count>40</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-04-24 08:02:43 -0400</bug_when>
    <thetext>Hi Stephan,

I am working on the test.

Sorry I  was not clear.  When I said I have a smaller piece of code through which I can reproduce the bug, I meant smaller piece of code with the same project settings as the test case attached as in the bug report.

It is not a pure compiler test.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2392473</commentid>
    <comment_count>41</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-04-24 08:37:51 -0400</bug_when>
    <thetext>(In reply to shankha banerjee from comment #40)
&gt; Sorry I  was not clear.  When I said I have a smaller piece of code through
&gt; which I can reproduce the bug, I meant smaller piece of code with the same
&gt; project settings as the test case attached as in the bug report.
&gt; 
&gt; It is not a pure compiler test.

OK

But still it doesn&apos;t depend on any UI, right? So running the test against any (old) commit of JDT/Core should impose any problems.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2392501</commentid>
    <comment_count>42</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-04-24 09:09:00 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #41)
&gt; OK
&gt; 
&gt; But still it doesn&apos;t depend on any UI, right? So running the test against
&gt; any (old) commit of JDT/Core should impose any problems.

Yes the commit ID should be before (bca01eadc82a3abb71100149fcbedb07d33a04ad)(Comment 22).

For testing purposes it will be good to pick up a version which is near to bca01eadc82a3abb71100149fcbedb07d33a04ad.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2392865</commentid>
    <comment_count>43</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-04-24 23:09:00 -0400</bug_when>
    <thetext>I got the steps to reproduce the bug independently.

1) Pick up SR1. Version: Kepler Service Release 1
Build id: 20130919-0819

2) Open a eclipse instance. Make sure you have Java60 as the only installed JRE
and that is the default JRE selected.

3) Create a new project.

3) Right Click on Project -&gt; Go to Properties -&gt; Go To BuildPath.
You would see Java SE - 1.6.
Click on Remove (Right hand side).

4) Have the following snippet inside a file:

class X {
  void test() {
	int x = 0;
	foo(0 &gt;= 0 ? x : &quot;&quot;); 
  }
}

You would see the NPE.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2392886</commentid>
    <comment_count>44</comment_count>
      <attachid>242307</attachid>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-04-25 02:52:46 -0400</bug_when>
    <thetext>Created attachment 242307
Patch

One could ignore all the previous comments. I will summarize everything in 
this comment.

Patch with unit test case.

1) This patch has a additional unit test case which reproduces the issue.
2) To test if the patch solves the defect attached in the bug report, one needs
   to apply the patch on bca01eadc82a3abb71100149fcbedb07d33a04ad.
   On bca01eadc82a3abb71100149fcbedb07d33a04ad the bug is reproducible.
3) The patch being attached should be applied on the latest origin/master.
4) Based on discussions on how to access sourceName in Comment 30.

Comment 30:
&gt; ProblemReporter, I think it&apos;s safe to conclude, that the recommended use
&gt; would be via the method sourceName() and where we directly access the field
&gt; we were plain lazy :)

Investigations for Comment 30 are in Comment 31:
&gt; Yes you are correct. The field sourceName is accesed less frequently.

sourceName is being accessed through function call: sourceName().

I have changed all the direct accesses of sourceName to function call.

5) The patch contains 2 items:

a) Fix and unit test case for the issue mentioned in the bug.
b) Direct access to sourceName has been modified to function call: sourceName().

6) All test results are good.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2393212</commentid>
    <comment_count>45</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-04-25 12:17:33 -0400</bug_when>
    <thetext>(In reply to shankha banerjee from comment #44)

Looks much better now.

Bonus question: can you explain, why the given steps / junit test get us into the situation, where sourceName is null?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2393527</commentid>
    <comment_count>46</comment_count>
      <attachid>242361</attachid>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-04-26 17:10:06 -0400</bug_when>
    <thetext>Created attachment 242361
Patch on Master

Hi Stephan,
---
Few more points. Hope it doesn&apos;t lead to more confusion.
I am sorry, but the bug appeared on master (latest code).
I haven&apos;t checked the reason behind it appearing back.

1) I checked with the latest code on master and see the NPE (without the fix).

Version: Luna (4.4) Build id: I20140318-0830 : NPE is not reproducible.

Version: Luna (4.4) Build id: N20140423-2200 : NPE is reproducible.

The bug would have got hidden and now reappeared with
the latest code.

2) I have generated a patch which can me applied on Master. 
   I am attaching the same.

   This patch is not diffirent from the earlier patch. It is just in sync
   with the latest master code.
---

Coming back to Comment 45

(In reply to Stephan Herrmann from comment #45)
&gt; Bonus question: can you explain, why the given steps / junit test get us
&gt; into the situation, where sourceName is null?

There are two things with respect to the bug. The test case and the way the project is set up.

a) Test case has to be a conditional expression as the code path needs to go through ConditionalExpression.java:resolveType.

b) One of the values in the conditional expression has to be base type and the two need not be of the same type.

Line No 614 : 	if (valueIfTrueType.isBaseType() &amp;&amp; valueIfTrueType != TypeBinding.NULL) {
		if (use15specifics) {
		valueIfTrueType = env.computeBoxingType(valueIfTrueType);
						
c) use15specifics: should be set to true.
boolean use15specifics = sourceLevel &gt;= ClassFileConstants.JDK1_5;

The compliance level of the project should be 1.5 or greater.

d) Now coming to the function: 
env.computeBoxingType(valueIfTrueType);

LookupEnvironment.getType(char[][]) line: 1150	
LookupEnvironment.computeBoxingType(TypeBinding) line: 362	
ConditionalExpression.resolveType(BlockScope) line: 616	

The type is not calculated through  LookupEnvironment.getType(char[][]). 
case TypeIds.T_int :
			boxedType = getType(JAVA_LANG_INTEGER);
			if (boxedType != null) return boxedType;
			return new ProblemReferenceBinding(JAVA_LANG_INTEGER, null, NotFound);

This function(getType) should return null for ProblemReferenceBinding to be returned.

This returns null if it cannot find the package from which the type is coming through.

For this reason we remove the libraries from the build path or we do not add them.

For all the other build tests, we have the following line:
env.addExternalJars(projectPath, Util.getJavaClassLibs());

This test case does not have this line.

e) The return value of env.computeBoxingType() is ProblemRefernceBinding 
valueIfTrueType = env.computeBoxingType(valueIfTrueType);

f) This is what is carried over to the call:
scope.problemReporter().conditionalArgumentsIncompatibleTypes(
			this,
			valueIfTrueType,  // ProblemReferenceBindig
			valueIfFalseType);

and thus the NPE on access to sourceType of valueIfTrueType which is of type
ProblemReferenceBinding.

g) I figured out the test case can be simplified a bit more.

Simplified version:

class X {
  void test() {
	int x = 0;
	int y = 0 &gt;= 0 ? x : \&quot;\&quot;; 
  }
} 

Thanks for the review and comments.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2394093</commentid>
    <comment_count>47</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-04-28 12:40:53 -0400</bug_when>
    <thetext>I don&apos;t have the complete context here, but just wondering if it&apos;s possible to fix the NPE alone now and address the remaining issues later? Of course, only if that makes sense in this case.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2394191</commentid>
    <comment_count>48</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-04-28 14:45:53 -0400</bug_when>
    <thetext>I&apos;ll release after minor cleanup and a final run of all tests.

For posterity, here&apos;s a shortened summary and additional findings:

Minimal ingredients to the NPE:
- a conditional expression that involves boxing int to Integer
- java.lang.Integer is nowhere to be found on the build path, hence we get a
  ProblemReferenceBinding
- ConditionalExpression.resolveType(..) (unnecessarily?) continues even after
  resolving one branch to an invalid type binding
- ProblemReporter.conditionalArgumentsIncompatibleTypes(..) calls
  ReferenceBinding.sourceName() which returns null for ProblemReferenceBinding
  since its field sourceName is uninitialized

Hence providing a null-safe implementation of PRB.sourceName() fixes the NPE, and possible helps for other callers of sourceName(), too.


As to the vicinity of this bug:

Other types that may have a null sourceName: IntersectionCastTypeBinding, which has a valid sourceName() method, so this is covered, too.

Other access to field sourceName (in ProblemReporter): these have been changed to using the method sourceName(), but this probably has no effect, because all changed occurrences affect uses of TypeVariableBinding, where field sourceName is initialized anyway (incl. subclasses). Direct field access was probably done by intention. =&gt; No added safety but also no harm, so I kept this change.

Other methods in ProblemReporter use readableName() for problemArguments and shortReadableName() for messageArguments. I see no good reason why conditionalArgumentsIncompatibleTypes uses sourceName() instead of shortReadableName(). I&apos;ll change this for consistency (which would&apos;ve fixed the NPE on its own right).

Final issue: what&apos;s the use of continuing to resolve the CE after one of its branches resolved to an invalid type binding? Also bailing out earlier would&apos;ve fixed the NPE. I&apos;ll file a fup for investigating this in calmer times.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2394217</commentid>
    <comment_count>49</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-04-28 15:15:09 -0400</bug_when>
    <thetext>Original patch (with comment changes in the test) released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=51eb8b8143716633a7515ed92273af51162b4257

Additional cleanup (consistency re shortReadableName() released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=2d84ef8ea92fe12f9b822d07837462ccd1509938

I also tried to provide variants of the test showing the same problem, but other resolve problems correctly lead CE.resolveType(..) into an early exit - hence the problematic path is never taken.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2394227</commentid>
    <comment_count>50</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-04-28 15:20:06 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #48)
&gt; Final issue: what&apos;s the use of continuing to resolve the CE after one of its
&gt; branches resolved to an invalid type binding? Also bailing out earlier
&gt; would&apos;ve fixed the NPE. I&apos;ll file a fup for investigating this in calmer
&gt; times.

I no longer think this is relevant besides the exact corner case of this bug,
because:

(In reply to Stephan Herrmann from comment #49)
&gt; I also tried to provide variants of the test showing the same problem, but
&gt; other resolve problems correctly lead CE.resolveType(..) into an early exit
&gt; - hence the problematic path is never taken.

Adding more early exits is probably not that relevant.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2395160</commentid>
    <comment_count>51</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-04-30 01:35:44 -0400</bug_when>
    <thetext>Verified for 4.4 M7 using I20140429-2000 build</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>239249</attachid>
            <date>2014-01-23 04:31:00 -0500</date>
            <delta_ts>2014-01-23 04:31:32 -0500</delta_ts>
            <desc>A piece of code that was stripped and only the offending part was left</desc>
            <filename>ExampleCodeThatFails.zip</filename>
            <type>application/binary</type>
            <size>3483</size>
            <attacher name="Avi Bluestein">avib</attacher>
            
              <data encoding="base64">UEsDBAoAAAAAAGpYN0QAAAAAAAAAAAAAAAARAAAATmV3c2JyaWRnZVNlcnZlci9QSwMEFAAAAAgA
W1g3RE32/yfDAAAAiAEAABkAAABOZXdzYnJpZGdlU2VydmVyLy5wcm9qZWN0dVBLDoIwEF1r4h0I
e6nuXBRYaFy6QQ9Q2gkpoS2ZFvT4llI/mLib92bep6XlQ3XJCGil0Xm6z3ZpApobIXWTp7freXtI
y2Kzpj2aFrg7geUoeyeN9uyKaqaguMDd1ihFAxWg96Ik0NOeG6VAu4KS1zSx0cwGQBaoHmQnqh74
hCI8einTIjAx0mCTAe9kbyFrhcu4QT+wkQXBdwWvYNgMU7aNmCwJSn5TKFnU8JFuQIjXM/jfYN5T
Eu+C3cfg/dzlTz4BUEsDBAoAAAAAAHFbN0QAAAAAAAAAAAAAAAAVAAAATmV3c2JyaWRnZVNlcnZl
ci9iaW4vUEsDBBQAAAAIAFtYN0RN9v8nwwAAAIgBAAAdAAAATmV3c2JyaWRnZVNlcnZlci9iaW4v
LnByb2plY3R1UEsOgjAQXWviHQh7qe5cFFhoXLpBD1DaCSmhLZkW9PiWUj+YuJv3Zt6npeVDdckI
aKXRebrPdmkCmhshdZOnt+t5e0jLYrOmPZoWuDuB5Sh7J4327IpqpqC4wN3WKEUDFaD3oiTQ054b
pUC7gpLXNLHRzAZAFqgeZCeqHviEIjx6KdMiMDHSYJMB72RvIWuFy7hBP7CRBcF3Ba9g2AxTto2Y
LAlKflMoWdTwkW5AiNcz+N9g3lMS74Ldx+D93OVPPgFQSwMECgAAAAAAcVs3RAAAAAAAAAAAAAAA
ABkAAABOZXdzYnJpZGdlU2VydmVyL2Jpbi9zcmMvUEsDBAoAAAAAAHFbN0QAAAAAAAAAAAAAAAAd
AAAATmV3c2JyaWRnZVNlcnZlci9iaW4vc3JjL2NvbS9QSwMECgAAAAAAcVs3RAAAAAAAAAAAAAAA
ACgAAABOZXdzYnJpZGdlU2VydmVyL2Jpbi9zcmMvY29tL25ld3NicmlkZ2UvUEsDBAoAAAAAAHFb
N0QAAAAAAAAAAAAAAAAvAAAATmV3c2JyaWRnZVNlcnZlci9iaW4vc3JjL2NvbS9uZXdzYnJpZGdl
L3NlcnZlci9QSwMECgAAAAAAFlg3RAAAAAAAAAAAAAAAABUAAABOZXdzYnJpZGdlU2VydmVyL3Ny
Yy9QSwMECgAAAAAAWVc3RAAAAAAAAAAAAAAAABkAAABOZXdzYnJpZGdlU2VydmVyL3NyYy9jb20v
UEsDBAoAAAAAACVYN0QAAAAAAAAAAAAAAAAkAAAATmV3c2JyaWRnZVNlcnZlci9zcmMvY29tL25l
d3NicmlkZ2UvUEsDBAoAAAAAAHBaN0QAAAAAAAAAAAAAAAArAAAATmV3c2JyaWRnZVNlcnZlci9z
cmMvY29tL25ld3NicmlkZ2Uvc2VydmVyL1BLAwQUAAAACAD3WjdEj2fVOvUCAADmCAAARwAAAE5l
d3NicmlkZ2VTZXJ2ZXIvc3JjL2NvbS9uZXdzYnJpZGdlL3NlcnZlci9OZXdzYnJpZGdlU2VydmVy
TW9uaXRvci5qYXZhxVRRT9swEH4uEv/hxlOLNhdtb1RsK9CWSrSqSCftYS9uck0Njm3ZDlAh/vvO
SVoKBMLDpEnpNfHdd/7u850Nj294ihDrjCm8cwsrkhSZQ3uLtre/t78nMqOth2t+y5nQbCgk9mpX
p9oPda6SwX2MxgutXoddcZXorB/H6FxNIslVyjKuiFCGyrMRtwt6P9NSYuy1nfw+Ra4aQJPt65AH
0PpFfO6FZBfcrSL0da4JN3XLb0RH9InJG5i5RSxdW2fQ+dpYnmacOZUZxpXSnge5HJuIxcxqg9av
e+8gnGJ9p8bKY4q2ITDKxIjnKX77+jxw56x5kgklnLcFC8aNYFFx/BOtBAlYDyRgrC2ykdQLLs9x
6d6PS7jnzK8NOjbjoiEpblrIsenWdZUrLzKsaa8XKbw2Wup0XZQyrz6mOsFmBN4HN1o2j81Y3eob
tINqqRms0LPpaYDFhZQX1O3yHWDoEReEQXZOZk7F/QpLDYCnrq8UGaulbsAQP3aFwf987N4MjtbO
Y3ap07SxgKxsE0GELpBbTzPqz3LndVbbQB/CfwxJgt9pe8PGZ5PZjPAN4c4Umzx1VBTTsBXT2e3+
pOELt8v+nskXUsQQS+4c7ATvzgTQPrK4ZBw8dzyEdC16uoeHZOEQ+hAXasAqVPdlQeWBLISFu5WI
VxBoUR6deyjvXXB0I+QOwswUObpkjdWebkFMYCkUlxW/rWLlUe3yqj+MQLAV+LWqOhdaS6obPDrf
7pTuVuSDVKe5kAklXVT/J0CawjNfu9MrAIWp4mjuDKqkffBHzazIuF3DZgohHBO0M9c5hoMK6u26
2rUlltD+ZErMBlLKy4QbZMav251OGdpaSk1Chv4nXpsOYIZMuzbDZ/h6dHRU7dlC6bB8e8V62u1v
qD0WlqY5XrW39w7g/UamV9jZeDqCYX98OTjfyfGGOBHGWiX/Wh54aBbIbXZ+T6KXjItM30/gaAg/
yrTH8KJgKJGP/0FjshZ9bqmRbY7FclilHz1/AVBLAQIfAAoAAAAAAGpYN0QAAAAAAAAAAAAAAAAR
ACQAAAAAAAAAMAAAAAAAAABOZXdzYnJpZGdlU2VydmVyLwoAIAAAAAAAAQAYALNhwvYZGM8Bs2HC
9hkYzwHC0GZVGRjPAVBLAQIfABQAAAAIAFtYN0RN9v8nwwAAAIgBAAAZACQAAAAAAAAAIAAAAC8A
AABOZXdzYnJpZGdlU2VydmVyLy5wcm9qZWN0CgAgAAAAAAABABgAa8zT5xkYzwEk1MffGRjPASTU
x98ZGM8BUEsBAh8ACgAAAAAAcVs3RAAAAAAAAAAAAAAAABUAJAAAAAAAAAAQAAAAKQEAAE5ld3Ni
cmlkZ2VTZXJ2ZXIvYmluLwoAIAAAAAAAAQAYAMzmq1kdGM8BzOarWR0YzwGzYcL2GRjPAVBLAQIf
ABQAAAAIAFtYN0RN9v8nwwAAAIgBAAAdACQAAAAAAAAAIAAAAFwBAABOZXdzYnJpZGdlU2VydmVy
L2Jpbi8ucHJvamVjdAoAIAAAAAAAAQAYACDM0+cZGM8BqYapWR0YzwGphqlZHRjPAVBLAQIfAAoA
AAAAAHFbN0QAAAAAAAAAAAAAAAAZACQAAAAAAAAAEAAAAFoCAABOZXdzYnJpZGdlU2VydmVyL2Jp
bi9zcmMvCgAgAAAAAAABABgAzOarWR0YzwHM5qtZHRjPAczmq1kdGM8BUEsBAh8ACgAAAAAAcVs3
RAAAAAAAAAAAAAAAAB0AJAAAAAAAAAAQAAAAkQIAAE5ld3NicmlkZ2VTZXJ2ZXIvYmluL3NyYy9j
b20vCgAgAAAAAAABABgAzOarWR0YzwHM5qtZHRjPAczmq1kdGM8BUEsBAh8ACgAAAAAAcVs3RAAA
AAAAAAAAAAAAACgAJAAAAAAAAAAQAAAAzAIAAE5ld3NicmlkZ2VTZXJ2ZXIvYmluL3NyYy9jb20v
bmV3c2JyaWRnZS8KACAAAAAAAAEAGADM5qtZHRjPAczmq1kdGM8BzOarWR0YzwFQSwECHwAKAAAA
AABxWzdEAAAAAAAAAAAAAAAALwAkAAAAAAAAABAAAAASAwAATmV3c2JyaWRnZVNlcnZlci9iaW4v
c3JjL2NvbS9uZXdzYnJpZGdlL3NlcnZlci8KACAAAAAAAAEAGADM5qtZHRjPAczmq1kdGM8BzOar
WR0YzwFQSwECHwAKAAAAAAAWWDdEAAAAAAAAAAAAAAAAFQAkAAAAAAAAADAAAABfAwAATmV3c2Jy
aWRnZVNlcnZlci9zcmMvCgAgAAAAAAABABgABuHhmRkYzwEG4eGZGRjPAcoKgVUZGM8BUEsBAh8A
CgAAAAAAWVc3RAAAAAAAAAAAAAAAABkAJAAAAAAAAAAwAAAAkgMAAE5ld3NicmlkZ2VTZXJ2ZXIv
c3JjL2NvbS8KACAAAAAAAAEAGAAMbYNVGRjPAQxtg1UZGM8BDG2DVRkYzwFQSwECHwAKAAAAAAAl
WDdEAAAAAAAAAAAAAAAAJAAkAAAAAAAAADAAAADJAwAATmV3c2JyaWRnZVNlcnZlci9zcmMvY29t
L25ld3NicmlkZ2UvCgAgAAAAAAABABgA+5ljqRkYzwH7mWOpGRjPAQxtg1UZGM8BUEsBAh8ACgAA
AAAAcFo3RAAAAAAAAAAAAAAAACsAJAAAAAAAAAAwAAAACwQAAE5ld3NicmlkZ2VTZXJ2ZXIvc3Jj
L2NvbS9uZXdzYnJpZGdlL3NlcnZlci8KACAAAAAAAAEAGAAF9ZY5HBjPAQX1ljkcGM8BDG2DVRkY
zwFQSwECHwAUAAAACAD3WjdEj2fVOvUCAADmCAAARwAkAAAAAAAAACAAAABUBAAATmV3c2JyaWRn
ZVNlcnZlci9zcmMvY29tL25ld3NicmlkZ2Uvc2VydmVyL05ld3NicmlkZ2VTZXJ2ZXJNb25pdG9y
LmphdmEKACAAAAAAAAEAGAAz8/TRHBjPAQxtg1UZGM8BDG2DVRkYzwFQSwUGAAAAAA0ADQDXBQAA
rgcAAAAA
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>240108</attachid>
            <date>2014-02-19 08:10:00 -0500</date>
            <delta_ts>2014-02-23 07:41:38 -0500</delta_ts>
            <desc>Patch: To be applied on latest code</desc>
            <filename>patch.patch</filename>
            <type>text/plain</type>
            <size>1297</size>
            <attacher name="shankha banerjee">shankhba</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUHJvYmxlbVJlZmVyZW5jZUJpbmRpbmcuamF2YSBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9sb29rdXAvUHJvYmxlbVJlZmVyZW5jZUJpbmRpbmcuamF2YQppbmRleCBlNzg1NzAz
Li4zYjI3OGZjIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Byb2JsZW1SZWZlcmVuY2VCaW5k
aW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Qcm9ibGVtUmVmZXJlbmNlQmluZGluZy5qYXZh
CkBAIC0xLDUgKzEsNSBAQAogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAo
YykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAo
YykgMjAwMCwgMjAxNCBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMg
cmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAq
IGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGlj
IExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFu
ZCBpcyBhdmFpbGFibGUgYXQKQEAgLTI0LDYgKzI0LDcgQEAgcHVibGljIGNsYXNzIFByb2JsZW1S
ZWZlcmVuY2VCaW5kaW5nIGV4dGVuZHMgUmVmZXJlbmNlQmluZGluZyB7CiAKIHB1YmxpYyBQcm9i
bGVtUmVmZXJlbmNlQmluZGluZyhjaGFyW11bXSBjb21wb3VuZE5hbWUsIFJlZmVyZW5jZUJpbmRp
bmcgY2xvc2VzdE1hdGNoLCBpbnQgcHJvYmxlbVJlYXNvbikgewogCXRoaXMuY29tcG91bmROYW1l
ID0gY29tcG91bmROYW1lOworCXRoaXMuc291cmNlTmFtZSA9IGNvbXBvdW5kTmFtZS5sZW5ndGgg
PT0gMCA/IG51bGwgOiBjb21wb3VuZE5hbWVbY29tcG91bmROYW1lLmxlbmd0aCAtIDFdOyAvLyBb
amF2YV1bdXRpbF1bTWFwJEVudHJ5XQogCXRoaXMuY2xvc2VzdE1hdGNoID0gY2xvc2VzdE1hdGNo
OwogCXRoaXMucHJvYmxlbVJlYXNvbiA9IHByb2JsZW1SZWFzb247CiB9Cg==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>240235</attachid>
            <date>2014-02-23 07:41:00 -0500</date>
            <delta_ts>2014-04-24 03:07:43 -0400</delta_ts>
            <desc>Patch</desc>
            <filename>patch.patch</filename>
            <type>text/plain</type>
            <size>8642</size>
            <attacher name="shankha banerjee">shankhba</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUHJvYmxlbVJlZmVyZW5jZUJpbmRpbmcuamF2YSBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9sb29rdXAvUHJvYmxlbVJlZmVyZW5jZUJpbmRpbmcuamF2YQppbmRleCBlNzg1NzAz
Li5mN2YwZWUyIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Byb2JsZW1SZWZlcmVuY2VCaW5k
aW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Qcm9ibGVtUmVmZXJlbmNlQmluZGluZy5qYXZh
CkBAIC0xLDUgKzEsNSBAQAogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAo
YykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAo
YykgMjAwMCwgMjAxNCBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMg
cmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAq
IGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGlj
IExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFu
ZCBpcyBhdmFpbGFibGUgYXQKQEAgLTkxLDYgKzkxLDEwIEBAIHB1YmxpYyBjaGFyW10gc2hvcnRS
ZWFkYWJsZU5hbWUoKSB7CiAJcmV0dXJuIHJlYWRhYmxlTmFtZSgpOwogfQogCitwdWJsaWMgY2hh
cltdIHNvdXJjZU5hbWUoKSB7CisJcmV0dXJuIHRoaXMuY29tcG91bmROYW1lLmxlbmd0aCA9PSAw
ID8gbnVsbCA6IHRoaXMuY29tcG91bmROYW1lW3RoaXMuY29tcG91bmROYW1lLmxlbmd0aCAtIDFd
OyAvLyBbamF2YV1bdXRpbF1bTWFwJEVudHJ5XQorfQorCiBwdWJsaWMgU3RyaW5nIHRvU3RyaW5n
KCkgewogCVN0cmluZ0J1ZmZlciBidWZmZXIgPSBuZXcgU3RyaW5nQnVmZmVyKDEwKTsKIAlidWZm
ZXIuYXBwZW5kKCJQcm9ibGVtVHlwZTpbY29tcG91bmROYW1lPSIpOyAvLyROT04tTkxTLTEkCmRp
ZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9Qcm9ibGVtUmVwb3J0ZXIuamF2YSBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9w
cm9ibGVtL1Byb2JsZW1SZXBvcnRlci5qYXZhCmluZGV4IDY1N2ViN2IuLjgxYzNlOTkgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9wcm9ibGVtL1Byb2JsZW1SZXBvcnRlci5qYXZhCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9w
cm9ibGVtL1Byb2JsZW1SZXBvcnRlci5qYXZhCkBAIC0yMjIzLDggKzIyMjMsOCBAQCBwdWJsaWMg
dm9pZCBmaW5hbFZhcmlhYmxlQm91bmQoVHlwZVZhcmlhYmxlQmluZGluZyB0eXBlVmFyaWFibGUs
IFR5cGVSZWZlcmVuY2UgdAogCWlmIChzZXZlcml0eSA9PSBQcm9ibGVtU2V2ZXJpdGllcy5JZ25v
cmUpIHJldHVybjsKIAl0aGlzLmhhbmRsZSgKIAkJSVByb2JsZW0uRmluYWxCb3VuZEZvclR5cGVW
YXJpYWJsZSwKLQkJbmV3IFN0cmluZ1tdIHsgbmV3IFN0cmluZyh0eXBlVmFyaWFibGUuc291cmNl
TmFtZSksIG5ldyBTdHJpbmcodHlwZVJlZi5yZXNvbHZlZFR5cGUucmVhZGFibGVOYW1lKCkpfSwK
LQkJbmV3IFN0cmluZ1tdIHsgbmV3IFN0cmluZyh0eXBlVmFyaWFibGUuc291cmNlTmFtZSksIG5l
dyBTdHJpbmcodHlwZVJlZi5yZXNvbHZlZFR5cGUuc2hvcnRSZWFkYWJsZU5hbWUoKSl9LAorCQlu
ZXcgU3RyaW5nW10geyBuZXcgU3RyaW5nKHR5cGVWYXJpYWJsZS5zb3VyY2VOYW1lKCkpLCBuZXcg
U3RyaW5nKHR5cGVSZWYucmVzb2x2ZWRUeXBlLnJlYWRhYmxlTmFtZSgpKX0sCisJCW5ldyBTdHJp
bmdbXSB7IG5ldyBTdHJpbmcodHlwZVZhcmlhYmxlLnNvdXJjZU5hbWUoKSksIG5ldyBTdHJpbmco
dHlwZVJlZi5yZXNvbHZlZFR5cGUuc2hvcnRSZWFkYWJsZU5hbWUoKSl9LAogCQlzZXZlcml0eSwK
IAkJdHlwZVJlZi5zb3VyY2VTdGFydCwKIAkJdHlwZVJlZi5zb3VyY2VFbmQpOwpAQCAtMzU3MSw3
ICszNTcxLDcgQEAgcHVibGljIHZvaWQgaW52YWxpZENvbnN0cnVjdG9yKFN0YXRlbWVudCBzdGF0
ZW1lbnQsIE1ldGhvZEJpbmRpbmcgdGFyZ2V0Q29uc3RydWMKIAkJCQkgICAgICAgIG5ldyBTdHJp
bmcoc2hvd25Db25zdHJ1Y3Rvci5kZWNsYXJpbmdDbGFzcy5yZWFkYWJsZU5hbWUoKSksCiAJCQkJ
ICAgICAgICB0eXBlc0FzU3RyaW5nKGludm9jYXRpb25Bcmd1bWVudHMsIGZhbHNlKSwKIAkJCQkg
ICAgICAgIG5ldyBTdHJpbmcoaW5mZXJyZWRUeXBlQXJndW1lbnQucmVhZGFibGVOYW1lKCkpLAot
CQkJCSAgICAgICAgbmV3IFN0cmluZyh0eXBlUGFyYW1ldGVyLnNvdXJjZU5hbWUpLAorCQkJCSAg
ICAgICAgbmV3IFN0cmluZyh0eXBlUGFyYW1ldGVyLnNvdXJjZU5hbWUoKSksCiAJCQkJICAgICAg
ICBwYXJhbWV0ZXJCb3VuZEFzU3RyaW5nKHR5cGVQYXJhbWV0ZXIsIGZhbHNlKSB9LAogCQkJCW5l
dyBTdHJpbmdbXSB7CiAJCQkJICAgICAgICBuZXcgU3RyaW5nKHNob3duQ29uc3RydWN0b3IuZGVj
bGFyaW5nQ2xhc3Muc291cmNlTmFtZSgpKSwKQEAgLTM1NzksNyArMzU3OSw3IEBAIHB1YmxpYyB2
b2lkIGludmFsaWRDb25zdHJ1Y3RvcihTdGF0ZW1lbnQgc3RhdGVtZW50LCBNZXRob2RCaW5kaW5n
IHRhcmdldENvbnN0cnVjCiAJCQkJICAgICAgICBuZXcgU3RyaW5nKHNob3duQ29uc3RydWN0b3Iu
ZGVjbGFyaW5nQ2xhc3Muc2hvcnRSZWFkYWJsZU5hbWUoKSksCiAJCQkJICAgICAgICB0eXBlc0Fz
U3RyaW5nKGludm9jYXRpb25Bcmd1bWVudHMsIHRydWUpLAogCQkJCSAgICAgICAgbmV3IFN0cmlu
ZyhpbmZlcnJlZFR5cGVBcmd1bWVudC5zaG9ydFJlYWRhYmxlTmFtZSgpKSwKLQkJCQkgICAgICAg
IG5ldyBTdHJpbmcodHlwZVBhcmFtZXRlci5zb3VyY2VOYW1lKSwKKwkJCQkgICAgICAgIG5ldyBT
dHJpbmcodHlwZVBhcmFtZXRlci5zb3VyY2VOYW1lKCkpLAogCQkJCSAgICAgICAgcGFyYW1ldGVy
Qm91bmRBc1N0cmluZyh0eXBlUGFyYW1ldGVyLCB0cnVlKSB9LAogCQkJCXNvdXJjZVN0YXJ0LAog
CQkJCXNvdXJjZUVuZCk7CkBAIC00MTE5LDcgKzQxMTksNyBAQCBwdWJsaWMgdm9pZCBpbnZhbGlk
TWV0aG9kKE1lc3NhZ2VTZW5kIG1lc3NhZ2VTZW5kLCBNZXRob2RCaW5kaW5nIG1ldGhvZCkgewog
CQkJCSAgICAgICAgbmV3IFN0cmluZyhzaG93bk1ldGhvZC5kZWNsYXJpbmdDbGFzcy5yZWFkYWJs
ZU5hbWUoKSksCiAJCQkJICAgICAgICB0eXBlc0FzU3RyaW5nKGludm9jYXRpb25Bcmd1bWVudHMs
IGZhbHNlKSwKIAkJCQkgICAgICAgIG5ldyBTdHJpbmcoaW5mZXJyZWRUeXBlQXJndW1lbnQucmVh
ZGFibGVOYW1lKCkpLAotCQkJCSAgICAgICAgbmV3IFN0cmluZyh0eXBlUGFyYW1ldGVyLnNvdXJj
ZU5hbWUpLAorCQkJCSAgICAgICAgbmV3IFN0cmluZyh0eXBlUGFyYW1ldGVyLnNvdXJjZU5hbWUo
KSksCiAJCQkJICAgICAgICBwYXJhbWV0ZXJCb3VuZEFzU3RyaW5nKHR5cGVQYXJhbWV0ZXIsIGZh
bHNlKSB9LAogCQkJCW5ldyBTdHJpbmdbXSB7CiAJCQkJICAgICAgICBuZXcgU3RyaW5nKHNob3du
TWV0aG9kLnNlbGVjdG9yKSwKQEAgLTQxMjcsNyArNDEyNyw3IEBAIHB1YmxpYyB2b2lkIGludmFs
aWRNZXRob2QoTWVzc2FnZVNlbmQgbWVzc2FnZVNlbmQsIE1ldGhvZEJpbmRpbmcgbWV0aG9kKSB7
CiAJCQkJICAgICAgICBuZXcgU3RyaW5nKHNob3duTWV0aG9kLmRlY2xhcmluZ0NsYXNzLnNob3J0
UmVhZGFibGVOYW1lKCkpLAogCQkJCSAgICAgICAgdHlwZXNBc1N0cmluZyhpbnZvY2F0aW9uQXJn
dW1lbnRzLCB0cnVlKSwKIAkJCQkgICAgICAgIG5ldyBTdHJpbmcoaW5mZXJyZWRUeXBlQXJndW1l
bnQuc2hvcnRSZWFkYWJsZU5hbWUoKSksCi0JCQkJICAgICAgICBuZXcgU3RyaW5nKHR5cGVQYXJh
bWV0ZXIuc291cmNlTmFtZSksCisJCQkJICAgICAgICBuZXcgU3RyaW5nKHR5cGVQYXJhbWV0ZXIu
c291cmNlTmFtZSgpKSwKIAkJCQkgICAgICAgIHBhcmFtZXRlckJvdW5kQXNTdHJpbmcodHlwZVBh
cmFtZXRlciwgdHJ1ZSkgfSwKIAkJCQkoaW50KSAobWVzc2FnZVNlbmQubmFtZVNvdXJjZVBvc2l0
aW9uID4+PiAzMiksCiAJCQkJKGludCkgbWVzc2FnZVNlbmQubmFtZVNvdXJjZVBvc2l0aW9uKTsK
QEAgLTQ5NDQsNyArNDk0NCw3IEBAIHB1YmxpYyB2b2lkIGphdmFkb2NJbnZhbGlkQ29uc3RydWN0
b3IoU3RhdGVtZW50IHN0YXRlbWVudCwgTWV0aG9kQmluZGluZyB0YXJnZXRDCiAJCQkJICAgICAg
ICBuZXcgU3RyaW5nKHNob3duQ29uc3RydWN0b3IuZGVjbGFyaW5nQ2xhc3MucmVhZGFibGVOYW1l
KCkpLAogCQkJCSAgICAgICAgdHlwZXNBc1N0cmluZyhpbnZvY2F0aW9uQXJndW1lbnRzLCBmYWxz
ZSksCiAJCQkJICAgICAgICBuZXcgU3RyaW5nKGluZmVycmVkVHlwZUFyZ3VtZW50LnJlYWRhYmxl
TmFtZSgpKSwKLQkJCQkgICAgICAgIG5ldyBTdHJpbmcodHlwZVBhcmFtZXRlci5zb3VyY2VOYW1l
KSwKKwkJCQkgICAgICAgIG5ldyBTdHJpbmcodHlwZVBhcmFtZXRlci5zb3VyY2VOYW1lKCkpLAog
CQkJCSAgICAgICAgcGFyYW1ldGVyQm91bmRBc1N0cmluZyh0eXBlUGFyYW1ldGVyLCBmYWxzZSkg
fSwKIAkJCQluZXcgU3RyaW5nW10gewogCQkJCSAgICAgICAgbmV3IFN0cmluZyhzaG93bkNvbnN0
cnVjdG9yLmRlY2xhcmluZ0NsYXNzLnNvdXJjZU5hbWUoKSksCkBAIC00OTUyLDcgKzQ5NTIsNyBA
QCBwdWJsaWMgdm9pZCBqYXZhZG9jSW52YWxpZENvbnN0cnVjdG9yKFN0YXRlbWVudCBzdGF0ZW1l
bnQsIE1ldGhvZEJpbmRpbmcgdGFyZ2V0QwogCQkJCSAgICAgICAgbmV3IFN0cmluZyhzaG93bkNv
bnN0cnVjdG9yLmRlY2xhcmluZ0NsYXNzLnNob3J0UmVhZGFibGVOYW1lKCkpLAogCQkJCSAgICAg
ICAgdHlwZXNBc1N0cmluZyhpbnZvY2F0aW9uQXJndW1lbnRzLCB0cnVlKSwKIAkJCQkgICAgICAg
IG5ldyBTdHJpbmcoaW5mZXJyZWRUeXBlQXJndW1lbnQuc2hvcnRSZWFkYWJsZU5hbWUoKSksCi0J
CQkJICAgICAgICBuZXcgU3RyaW5nKHR5cGVQYXJhbWV0ZXIuc291cmNlTmFtZSksCisJCQkJICAg
ICAgICBuZXcgU3RyaW5nKHR5cGVQYXJhbWV0ZXIuc291cmNlTmFtZSgpKSwKIAkJCQkgICAgICAg
IHBhcmFtZXRlckJvdW5kQXNTdHJpbmcodHlwZVBhcmFtZXRlciwgdHJ1ZSkgfSwKIAkJCQlzZXZl
cml0eSwKIAkJCQlzb3VyY2VTdGFydCwKQEAgLTUxNzYsNyArNTE3Niw3IEBAIHB1YmxpYyB2b2lk
IGphdmFkb2NJbnZhbGlkTWV0aG9kKE1lc3NhZ2VTZW5kIG1lc3NhZ2VTZW5kLCBNZXRob2RCaW5k
aW5nIG1ldGhvZCwKIAkJCQkgICAgICAgIG5ldyBTdHJpbmcoc2hvd25NZXRob2QuZGVjbGFyaW5n
Q2xhc3MucmVhZGFibGVOYW1lKCkpLAogCQkJCSAgICAgICAgdHlwZXNBc1N0cmluZyhpbnZvY2F0
aW9uQXJndW1lbnRzLCBmYWxzZSksCiAJCQkJICAgICAgICBuZXcgU3RyaW5nKGluZmVycmVkVHlw
ZUFyZ3VtZW50LnJlYWRhYmxlTmFtZSgpKSwKLQkJCQkgICAgICAgIG5ldyBTdHJpbmcodHlwZVBh
cmFtZXRlci5zb3VyY2VOYW1lKSwKKwkJCQkgICAgICAgIG5ldyBTdHJpbmcodHlwZVBhcmFtZXRl
ci5zb3VyY2VOYW1lKCkpLAogCQkJCSAgICAgICAgcGFyYW1ldGVyQm91bmRBc1N0cmluZyh0eXBl
UGFyYW1ldGVyLCBmYWxzZSkgfSwKIAkJCQluZXcgU3RyaW5nW10gewogCQkJCSAgICAgICAgbmV3
IFN0cmluZyhzaG93bk1ldGhvZC5zZWxlY3RvciksCkBAIC01MTg0LDcgKzUxODQsNyBAQCBwdWJs
aWMgdm9pZCBqYXZhZG9jSW52YWxpZE1ldGhvZChNZXNzYWdlU2VuZCBtZXNzYWdlU2VuZCwgTWV0
aG9kQmluZGluZyBtZXRob2QsCiAJCQkJICAgICAgICBuZXcgU3RyaW5nKHNob3duTWV0aG9kLmRl
Y2xhcmluZ0NsYXNzLnNob3J0UmVhZGFibGVOYW1lKCkpLAogCQkJCSAgICAgICAgdHlwZXNBc1N0
cmluZyhpbnZvY2F0aW9uQXJndW1lbnRzLCB0cnVlKSwKIAkJCQkgICAgICAgIG5ldyBTdHJpbmco
aW5mZXJyZWRUeXBlQXJndW1lbnQuc2hvcnRSZWFkYWJsZU5hbWUoKSksCi0JCQkJICAgICAgICBu
ZXcgU3RyaW5nKHR5cGVQYXJhbWV0ZXIuc291cmNlTmFtZSksCisJCQkJICAgICAgICBuZXcgU3Ry
aW5nKHR5cGVQYXJhbWV0ZXIuc291cmNlTmFtZSgpKSwKIAkJCQkgICAgICAgIHBhcmFtZXRlckJv
dW5kQXNTdHJpbmcodHlwZVBhcmFtZXRlciwgdHJ1ZSkgfSwKIAkJCQlzZXZlcml0eSwKIAkJCQko
aW50KSAobWVzc2FnZVNlbmQubmFtZVNvdXJjZVBvc2l0aW9uID4+PiAzMiksCkBAIC03ODI2LDgg
Kzc4MjYsOCBAQCBwdWJsaWMgdm9pZCB0eXBlTWlzbWF0Y2hFcnJvcihUeXBlQmluZGluZyB0eXBl
QXJndW1lbnQsIFR5cGVWYXJpYWJsZUJpbmRpbmcgdHlwZQogCWlmIChsb2NhdGlvbiA9PSBudWxs
KSB7IC8vIGJpbmFyeSBjYXNlCiAJCXRoaXMuaGFuZGxlKAogCQkJSVByb2JsZW0uVHlwZUFyZ3Vt
ZW50TWlzbWF0Y2gsCi0JCQluZXcgU3RyaW5nW10geyBuZXcgU3RyaW5nKHR5cGVBcmd1bWVudC5y
ZWFkYWJsZU5hbWUoKSksIG5ldyBTdHJpbmcoZ2VuZXJpY1R5cGUucmVhZGFibGVOYW1lKCkpLCBu
ZXcgU3RyaW5nKHR5cGVQYXJhbWV0ZXIuc291cmNlTmFtZSksIHBhcmFtZXRlckJvdW5kQXNTdHJp
bmcodHlwZVBhcmFtZXRlciwgZmFsc2UpIH0sCi0JCQluZXcgU3RyaW5nW10geyBuZXcgU3RyaW5n
KHR5cGVBcmd1bWVudC5zaG9ydFJlYWRhYmxlTmFtZSgpKSwgbmV3IFN0cmluZyhnZW5lcmljVHlw
ZS5zaG9ydFJlYWRhYmxlTmFtZSgpKSwgbmV3IFN0cmluZyh0eXBlUGFyYW1ldGVyLnNvdXJjZU5h
bWUpLCBwYXJhbWV0ZXJCb3VuZEFzU3RyaW5nKHR5cGVQYXJhbWV0ZXIsIHRydWUpIH0sCisJCQlu
ZXcgU3RyaW5nW10geyBuZXcgU3RyaW5nKHR5cGVBcmd1bWVudC5yZWFkYWJsZU5hbWUoKSksIG5l
dyBTdHJpbmcoZ2VuZXJpY1R5cGUucmVhZGFibGVOYW1lKCkpLCBuZXcgU3RyaW5nKHR5cGVQYXJh
bWV0ZXIuc291cmNlTmFtZSgpKSwgcGFyYW1ldGVyQm91bmRBc1N0cmluZyh0eXBlUGFyYW1ldGVy
LCBmYWxzZSkgfSwKKwkJCW5ldyBTdHJpbmdbXSB7IG5ldyBTdHJpbmcodHlwZUFyZ3VtZW50LnNo
b3J0UmVhZGFibGVOYW1lKCkpLCBuZXcgU3RyaW5nKGdlbmVyaWNUeXBlLnNob3J0UmVhZGFibGVO
YW1lKCkpLCBuZXcgU3RyaW5nKHR5cGVQYXJhbWV0ZXIuc291cmNlTmFtZSgpKSwgcGFyYW1ldGVy
Qm91bmRBc1N0cmluZyh0eXBlUGFyYW1ldGVyLCB0cnVlKSB9LAogCQkJUHJvYmxlbVNldmVyaXRp
ZXMuQWJvcnRDb21waWxhdGlvbiB8IFByb2JsZW1TZXZlcml0aWVzLkVycm9yIHwgUHJvYmxlbVNl
dmVyaXRpZXMuRmF0YWwsCiAJCQkwLAogCQkJMCk7CkBAIC03ODM1LDggKzc4MzUsOCBAQCBwdWJs
aWMgdm9pZCB0eXBlTWlzbWF0Y2hFcnJvcihUeXBlQmluZGluZyB0eXBlQXJndW1lbnQsIFR5cGVW
YXJpYWJsZUJpbmRpbmcgdHlwZQogICAgIH0KIAl0aGlzLmhhbmRsZSgKIAkJSVByb2JsZW0uVHlw
ZUFyZ3VtZW50TWlzbWF0Y2gsCi0JCW5ldyBTdHJpbmdbXSB7IG5ldyBTdHJpbmcodHlwZUFyZ3Vt
ZW50LnJlYWRhYmxlTmFtZSgpKSwgbmV3IFN0cmluZyhnZW5lcmljVHlwZS5yZWFkYWJsZU5hbWUo
KSksIG5ldyBTdHJpbmcodHlwZVBhcmFtZXRlci5zb3VyY2VOYW1lKSwgcGFyYW1ldGVyQm91bmRB
c1N0cmluZyh0eXBlUGFyYW1ldGVyLCBmYWxzZSkgfSwKLQkJbmV3IFN0cmluZ1tdIHsgbmV3IFN0
cmluZyh0eXBlQXJndW1lbnQuc2hvcnRSZWFkYWJsZU5hbWUoKSksIG5ldyBTdHJpbmcoZ2VuZXJp
Y1R5cGUuc2hvcnRSZWFkYWJsZU5hbWUoKSksIG5ldyBTdHJpbmcodHlwZVBhcmFtZXRlci5zb3Vy
Y2VOYW1lKSwgcGFyYW1ldGVyQm91bmRBc1N0cmluZyh0eXBlUGFyYW1ldGVyLCB0cnVlKSB9LAor
CQluZXcgU3RyaW5nW10geyBuZXcgU3RyaW5nKHR5cGVBcmd1bWVudC5yZWFkYWJsZU5hbWUoKSks
IG5ldyBTdHJpbmcoZ2VuZXJpY1R5cGUucmVhZGFibGVOYW1lKCkpLCBuZXcgU3RyaW5nKHR5cGVQ
YXJhbWV0ZXIuc291cmNlTmFtZSgpKSwgcGFyYW1ldGVyQm91bmRBc1N0cmluZyh0eXBlUGFyYW1l
dGVyLCBmYWxzZSkgfSwKKwkJbmV3IFN0cmluZ1tdIHsgbmV3IFN0cmluZyh0eXBlQXJndW1lbnQu
c2hvcnRSZWFkYWJsZU5hbWUoKSksIG5ldyBTdHJpbmcoZ2VuZXJpY1R5cGUuc2hvcnRSZWFkYWJs
ZU5hbWUoKSksIG5ldyBTdHJpbmcodHlwZVBhcmFtZXRlci5zb3VyY2VOYW1lKCkpLCBwYXJhbWV0
ZXJCb3VuZEFzU3RyaW5nKHR5cGVQYXJhbWV0ZXIsIHRydWUpIH0sCiAJCWxvY2F0aW9uLnNvdXJj
ZVN0YXJ0LAogCQlsb2NhdGlvbi5zb3VyY2VFbmQpOwogfQo=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>242269</attachid>
            <date>2014-04-24 03:07:00 -0400</date>
            <delta_ts>2014-04-25 02:52:46 -0400</delta_ts>
            <desc>Patch</desc>
            <filename>patch.patch</filename>
            <type>text/plain</type>
            <size>8642</size>
            <attacher name="shankha banerjee">shankhba</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUHJvYmxlbVJlZmVyZW5jZUJpbmRpbmcuamF2YSBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9sb29rdXAvUHJvYmxlbVJlZmVyZW5jZUJpbmRpbmcuamF2YQppbmRleCBlNzg1NzAz
Li5mN2YwZWUyIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Byb2JsZW1SZWZlcmVuY2VCaW5k
aW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Qcm9ibGVtUmVmZXJlbmNlQmluZGluZy5qYXZh
CkBAIC0xLDUgKzEsNSBAQAogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAo
YykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAo
YykgMjAwMCwgMjAxNCBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMg
cmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAq
IGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGlj
IExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFu
ZCBpcyBhdmFpbGFibGUgYXQKQEAgLTkxLDYgKzkxLDEwIEBAIHB1YmxpYyBjaGFyW10gc2hvcnRS
ZWFkYWJsZU5hbWUoKSB7CiAJcmV0dXJuIHJlYWRhYmxlTmFtZSgpOwogfQogCitwdWJsaWMgY2hh
cltdIHNvdXJjZU5hbWUoKSB7CisJcmV0dXJuIHRoaXMuY29tcG91bmROYW1lLmxlbmd0aCA9PSAw
ID8gbnVsbCA6IHRoaXMuY29tcG91bmROYW1lW3RoaXMuY29tcG91bmROYW1lLmxlbmd0aCAtIDFd
OyAvLyBbamF2YV1bdXRpbF1bTWFwJEVudHJ5XQorfQorCiBwdWJsaWMgU3RyaW5nIHRvU3RyaW5n
KCkgewogCVN0cmluZ0J1ZmZlciBidWZmZXIgPSBuZXcgU3RyaW5nQnVmZmVyKDEwKTsKIAlidWZm
ZXIuYXBwZW5kKCJQcm9ibGVtVHlwZTpbY29tcG91bmROYW1lPSIpOyAvLyROT04tTkxTLTEkCmRp
ZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9Qcm9ibGVtUmVwb3J0ZXIuamF2YSBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9w
cm9ibGVtL1Byb2JsZW1SZXBvcnRlci5qYXZhCmluZGV4IDE5NTNkYjUuLmE2OWZiYzYgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9wcm9ibGVtL1Byb2JsZW1SZXBvcnRlci5qYXZhCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9w
cm9ibGVtL1Byb2JsZW1SZXBvcnRlci5qYXZhCkBAIC0yMjI4LDggKzIyMjgsOCBAQCBwdWJsaWMg
dm9pZCBmaW5hbFZhcmlhYmxlQm91bmQoVHlwZVZhcmlhYmxlQmluZGluZyB0eXBlVmFyaWFibGUs
IFR5cGVSZWZlcmVuY2UgdAogCWlmIChzZXZlcml0eSA9PSBQcm9ibGVtU2V2ZXJpdGllcy5JZ25v
cmUpIHJldHVybjsKIAl0aGlzLmhhbmRsZSgKIAkJSVByb2JsZW0uRmluYWxCb3VuZEZvclR5cGVW
YXJpYWJsZSwKLQkJbmV3IFN0cmluZ1tdIHsgbmV3IFN0cmluZyh0eXBlVmFyaWFibGUuc291cmNl
TmFtZSksIG5ldyBTdHJpbmcodHlwZVJlZi5yZXNvbHZlZFR5cGUucmVhZGFibGVOYW1lKCkpfSwK
LQkJbmV3IFN0cmluZ1tdIHsgbmV3IFN0cmluZyh0eXBlVmFyaWFibGUuc291cmNlTmFtZSksIG5l
dyBTdHJpbmcodHlwZVJlZi5yZXNvbHZlZFR5cGUuc2hvcnRSZWFkYWJsZU5hbWUoKSl9LAorCQlu
ZXcgU3RyaW5nW10geyBuZXcgU3RyaW5nKHR5cGVWYXJpYWJsZS5zb3VyY2VOYW1lKCkpLCBuZXcg
U3RyaW5nKHR5cGVSZWYucmVzb2x2ZWRUeXBlLnJlYWRhYmxlTmFtZSgpKX0sCisJCW5ldyBTdHJp
bmdbXSB7IG5ldyBTdHJpbmcodHlwZVZhcmlhYmxlLnNvdXJjZU5hbWUoKSksIG5ldyBTdHJpbmco
dHlwZVJlZi5yZXNvbHZlZFR5cGUuc2hvcnRSZWFkYWJsZU5hbWUoKSl9LAogCQlzZXZlcml0eSwK
IAkJdHlwZVJlZi5zb3VyY2VTdGFydCwKIAkJdHlwZVJlZi5zb3VyY2VFbmQpOwpAQCAtMzU3Niw3
ICszNTc2LDcgQEAgcHVibGljIHZvaWQgaW52YWxpZENvbnN0cnVjdG9yKFN0YXRlbWVudCBzdGF0
ZW1lbnQsIE1ldGhvZEJpbmRpbmcgdGFyZ2V0Q29uc3RydWMKIAkJCQkgICAgICAgIG5ldyBTdHJp
bmcoc2hvd25Db25zdHJ1Y3Rvci5kZWNsYXJpbmdDbGFzcy5yZWFkYWJsZU5hbWUoKSksCiAJCQkJ
ICAgICAgICB0eXBlc0FzU3RyaW5nKGludm9jYXRpb25Bcmd1bWVudHMsIGZhbHNlKSwKIAkJCQkg
ICAgICAgIG5ldyBTdHJpbmcoaW5mZXJyZWRUeXBlQXJndW1lbnQucmVhZGFibGVOYW1lKCkpLAot
CQkJCSAgICAgICAgbmV3IFN0cmluZyh0eXBlUGFyYW1ldGVyLnNvdXJjZU5hbWUpLAorCQkJCSAg
ICAgICAgbmV3IFN0cmluZyh0eXBlUGFyYW1ldGVyLnNvdXJjZU5hbWUoKSksCiAJCQkJICAgICAg
ICBwYXJhbWV0ZXJCb3VuZEFzU3RyaW5nKHR5cGVQYXJhbWV0ZXIsIGZhbHNlKSB9LAogCQkJCW5l
dyBTdHJpbmdbXSB7CiAJCQkJICAgICAgICBuZXcgU3RyaW5nKHNob3duQ29uc3RydWN0b3IuZGVj
bGFyaW5nQ2xhc3Muc291cmNlTmFtZSgpKSwKQEAgLTM1ODQsNyArMzU4NCw3IEBAIHB1YmxpYyB2
b2lkIGludmFsaWRDb25zdHJ1Y3RvcihTdGF0ZW1lbnQgc3RhdGVtZW50LCBNZXRob2RCaW5kaW5n
IHRhcmdldENvbnN0cnVjCiAJCQkJICAgICAgICBuZXcgU3RyaW5nKHNob3duQ29uc3RydWN0b3Iu
ZGVjbGFyaW5nQ2xhc3Muc2hvcnRSZWFkYWJsZU5hbWUoKSksCiAJCQkJICAgICAgICB0eXBlc0Fz
U3RyaW5nKGludm9jYXRpb25Bcmd1bWVudHMsIHRydWUpLAogCQkJCSAgICAgICAgbmV3IFN0cmlu
ZyhpbmZlcnJlZFR5cGVBcmd1bWVudC5zaG9ydFJlYWRhYmxlTmFtZSgpKSwKLQkJCQkgICAgICAg
IG5ldyBTdHJpbmcodHlwZVBhcmFtZXRlci5zb3VyY2VOYW1lKSwKKwkJCQkgICAgICAgIG5ldyBT
dHJpbmcodHlwZVBhcmFtZXRlci5zb3VyY2VOYW1lKCkpLAogCQkJCSAgICAgICAgcGFyYW1ldGVy
Qm91bmRBc1N0cmluZyh0eXBlUGFyYW1ldGVyLCB0cnVlKSB9LAogCQkJCXNvdXJjZVN0YXJ0LAog
CQkJCXNvdXJjZUVuZCk7CkBAIC00MTI0LDcgKzQxMjQsNyBAQCBwdWJsaWMgdm9pZCBpbnZhbGlk
TWV0aG9kKE1lc3NhZ2VTZW5kIG1lc3NhZ2VTZW5kLCBNZXRob2RCaW5kaW5nIG1ldGhvZCkgewog
CQkJCSAgICAgICAgbmV3IFN0cmluZyhzaG93bk1ldGhvZC5kZWNsYXJpbmdDbGFzcy5yZWFkYWJs
ZU5hbWUoKSksCiAJCQkJICAgICAgICB0eXBlc0FzU3RyaW5nKGludm9jYXRpb25Bcmd1bWVudHMs
IGZhbHNlKSwKIAkJCQkgICAgICAgIG5ldyBTdHJpbmcoaW5mZXJyZWRUeXBlQXJndW1lbnQucmVh
ZGFibGVOYW1lKCkpLAotCQkJCSAgICAgICAgbmV3IFN0cmluZyh0eXBlUGFyYW1ldGVyLnNvdXJj
ZU5hbWUpLAorCQkJCSAgICAgICAgbmV3IFN0cmluZyh0eXBlUGFyYW1ldGVyLnNvdXJjZU5hbWUo
KSksCiAJCQkJICAgICAgICBwYXJhbWV0ZXJCb3VuZEFzU3RyaW5nKHR5cGVQYXJhbWV0ZXIsIGZh
bHNlKSB9LAogCQkJCW5ldyBTdHJpbmdbXSB7CiAJCQkJICAgICAgICBuZXcgU3RyaW5nKHNob3du
TWV0aG9kLnNlbGVjdG9yKSwKQEAgLTQxMzIsNyArNDEzMiw3IEBAIHB1YmxpYyB2b2lkIGludmFs
aWRNZXRob2QoTWVzc2FnZVNlbmQgbWVzc2FnZVNlbmQsIE1ldGhvZEJpbmRpbmcgbWV0aG9kKSB7
CiAJCQkJICAgICAgICBuZXcgU3RyaW5nKHNob3duTWV0aG9kLmRlY2xhcmluZ0NsYXNzLnNob3J0
UmVhZGFibGVOYW1lKCkpLAogCQkJCSAgICAgICAgdHlwZXNBc1N0cmluZyhpbnZvY2F0aW9uQXJn
dW1lbnRzLCB0cnVlKSwKIAkJCQkgICAgICAgIG5ldyBTdHJpbmcoaW5mZXJyZWRUeXBlQXJndW1l
bnQuc2hvcnRSZWFkYWJsZU5hbWUoKSksCi0JCQkJICAgICAgICBuZXcgU3RyaW5nKHR5cGVQYXJh
bWV0ZXIuc291cmNlTmFtZSksCisJCQkJICAgICAgICBuZXcgU3RyaW5nKHR5cGVQYXJhbWV0ZXIu
c291cmNlTmFtZSgpKSwKIAkJCQkgICAgICAgIHBhcmFtZXRlckJvdW5kQXNTdHJpbmcodHlwZVBh
cmFtZXRlciwgdHJ1ZSkgfSwKIAkJCQkoaW50KSAobWVzc2FnZVNlbmQubmFtZVNvdXJjZVBvc2l0
aW9uID4+PiAzMiksCiAJCQkJKGludCkgbWVzc2FnZVNlbmQubmFtZVNvdXJjZVBvc2l0aW9uKTsK
QEAgLTQ5NTMsNyArNDk1Myw3IEBAIHB1YmxpYyB2b2lkIGphdmFkb2NJbnZhbGlkQ29uc3RydWN0
b3IoU3RhdGVtZW50IHN0YXRlbWVudCwgTWV0aG9kQmluZGluZyB0YXJnZXRDCiAJCQkJICAgICAg
ICBuZXcgU3RyaW5nKHNob3duQ29uc3RydWN0b3IuZGVjbGFyaW5nQ2xhc3MucmVhZGFibGVOYW1l
KCkpLAogCQkJCSAgICAgICAgdHlwZXNBc1N0cmluZyhpbnZvY2F0aW9uQXJndW1lbnRzLCBmYWxz
ZSksCiAJCQkJICAgICAgICBuZXcgU3RyaW5nKGluZmVycmVkVHlwZUFyZ3VtZW50LnJlYWRhYmxl
TmFtZSgpKSwKLQkJCQkgICAgICAgIG5ldyBTdHJpbmcodHlwZVBhcmFtZXRlci5zb3VyY2VOYW1l
KSwKKwkJCQkgICAgICAgIG5ldyBTdHJpbmcodHlwZVBhcmFtZXRlci5zb3VyY2VOYW1lKCkpLAog
CQkJCSAgICAgICAgcGFyYW1ldGVyQm91bmRBc1N0cmluZyh0eXBlUGFyYW1ldGVyLCBmYWxzZSkg
fSwKIAkJCQluZXcgU3RyaW5nW10gewogCQkJCSAgICAgICAgbmV3IFN0cmluZyhzaG93bkNvbnN0
cnVjdG9yLmRlY2xhcmluZ0NsYXNzLnNvdXJjZU5hbWUoKSksCkBAIC00OTYxLDcgKzQ5NjEsNyBA
QCBwdWJsaWMgdm9pZCBqYXZhZG9jSW52YWxpZENvbnN0cnVjdG9yKFN0YXRlbWVudCBzdGF0ZW1l
bnQsIE1ldGhvZEJpbmRpbmcgdGFyZ2V0QwogCQkJCSAgICAgICAgbmV3IFN0cmluZyhzaG93bkNv
bnN0cnVjdG9yLmRlY2xhcmluZ0NsYXNzLnNob3J0UmVhZGFibGVOYW1lKCkpLAogCQkJCSAgICAg
ICAgdHlwZXNBc1N0cmluZyhpbnZvY2F0aW9uQXJndW1lbnRzLCB0cnVlKSwKIAkJCQkgICAgICAg
IG5ldyBTdHJpbmcoaW5mZXJyZWRUeXBlQXJndW1lbnQuc2hvcnRSZWFkYWJsZU5hbWUoKSksCi0J
CQkJICAgICAgICBuZXcgU3RyaW5nKHR5cGVQYXJhbWV0ZXIuc291cmNlTmFtZSksCisJCQkJICAg
ICAgICBuZXcgU3RyaW5nKHR5cGVQYXJhbWV0ZXIuc291cmNlTmFtZSgpKSwKIAkJCQkgICAgICAg
IHBhcmFtZXRlckJvdW5kQXNTdHJpbmcodHlwZVBhcmFtZXRlciwgdHJ1ZSkgfSwKIAkJCQlzZXZl
cml0eSwKIAkJCQlzb3VyY2VTdGFydCwKQEAgLTUxODUsNyArNTE4NSw3IEBAIHB1YmxpYyB2b2lk
IGphdmFkb2NJbnZhbGlkTWV0aG9kKE1lc3NhZ2VTZW5kIG1lc3NhZ2VTZW5kLCBNZXRob2RCaW5k
aW5nIG1ldGhvZCwKIAkJCQkgICAgICAgIG5ldyBTdHJpbmcoc2hvd25NZXRob2QuZGVjbGFyaW5n
Q2xhc3MucmVhZGFibGVOYW1lKCkpLAogCQkJCSAgICAgICAgdHlwZXNBc1N0cmluZyhpbnZvY2F0
aW9uQXJndW1lbnRzLCBmYWxzZSksCiAJCQkJICAgICAgICBuZXcgU3RyaW5nKGluZmVycmVkVHlw
ZUFyZ3VtZW50LnJlYWRhYmxlTmFtZSgpKSwKLQkJCQkgICAgICAgIG5ldyBTdHJpbmcodHlwZVBh
cmFtZXRlci5zb3VyY2VOYW1lKSwKKwkJCQkgICAgICAgIG5ldyBTdHJpbmcodHlwZVBhcmFtZXRl
ci5zb3VyY2VOYW1lKCkpLAogCQkJCSAgICAgICAgcGFyYW1ldGVyQm91bmRBc1N0cmluZyh0eXBl
UGFyYW1ldGVyLCBmYWxzZSkgfSwKIAkJCQluZXcgU3RyaW5nW10gewogCQkJCSAgICAgICAgbmV3
IFN0cmluZyhzaG93bk1ldGhvZC5zZWxlY3RvciksCkBAIC01MTkzLDcgKzUxOTMsNyBAQCBwdWJs
aWMgdm9pZCBqYXZhZG9jSW52YWxpZE1ldGhvZChNZXNzYWdlU2VuZCBtZXNzYWdlU2VuZCwgTWV0
aG9kQmluZGluZyBtZXRob2QsCiAJCQkJICAgICAgICBuZXcgU3RyaW5nKHNob3duTWV0aG9kLmRl
Y2xhcmluZ0NsYXNzLnNob3J0UmVhZGFibGVOYW1lKCkpLAogCQkJCSAgICAgICAgdHlwZXNBc1N0
cmluZyhpbnZvY2F0aW9uQXJndW1lbnRzLCB0cnVlKSwKIAkJCQkgICAgICAgIG5ldyBTdHJpbmco
aW5mZXJyZWRUeXBlQXJndW1lbnQuc2hvcnRSZWFkYWJsZU5hbWUoKSksCi0JCQkJICAgICAgICBu
ZXcgU3RyaW5nKHR5cGVQYXJhbWV0ZXIuc291cmNlTmFtZSksCisJCQkJICAgICAgICBuZXcgU3Ry
aW5nKHR5cGVQYXJhbWV0ZXIuc291cmNlTmFtZSgpKSwKIAkJCQkgICAgICAgIHBhcmFtZXRlckJv
dW5kQXNTdHJpbmcodHlwZVBhcmFtZXRlciwgdHJ1ZSkgfSwKIAkJCQlzZXZlcml0eSwKIAkJCQko
aW50KSAobWVzc2FnZVNlbmQubmFtZVNvdXJjZVBvc2l0aW9uID4+PiAzMiksCkBAIC03ODU4LDgg
Kzc4NTgsOCBAQCBwdWJsaWMgdm9pZCB0eXBlTWlzbWF0Y2hFcnJvcihUeXBlQmluZGluZyB0eXBl
QXJndW1lbnQsIFR5cGVWYXJpYWJsZUJpbmRpbmcgdHlwZQogCWlmIChsb2NhdGlvbiA9PSBudWxs
KSB7IC8vIGJpbmFyeSBjYXNlCiAJCXRoaXMuaGFuZGxlKAogCQkJSVByb2JsZW0uVHlwZUFyZ3Vt
ZW50TWlzbWF0Y2gsCi0JCQluZXcgU3RyaW5nW10geyBuZXcgU3RyaW5nKHR5cGVBcmd1bWVudC5y
ZWFkYWJsZU5hbWUoKSksIG5ldyBTdHJpbmcoZ2VuZXJpY1R5cGUucmVhZGFibGVOYW1lKCkpLCBu
ZXcgU3RyaW5nKHR5cGVQYXJhbWV0ZXIuc291cmNlTmFtZSksIHBhcmFtZXRlckJvdW5kQXNTdHJp
bmcodHlwZVBhcmFtZXRlciwgZmFsc2UpIH0sCi0JCQluZXcgU3RyaW5nW10geyBuZXcgU3RyaW5n
KHR5cGVBcmd1bWVudC5zaG9ydFJlYWRhYmxlTmFtZSgpKSwgbmV3IFN0cmluZyhnZW5lcmljVHlw
ZS5zaG9ydFJlYWRhYmxlTmFtZSgpKSwgbmV3IFN0cmluZyh0eXBlUGFyYW1ldGVyLnNvdXJjZU5h
bWUpLCBwYXJhbWV0ZXJCb3VuZEFzU3RyaW5nKHR5cGVQYXJhbWV0ZXIsIHRydWUpIH0sCisJCQlu
ZXcgU3RyaW5nW10geyBuZXcgU3RyaW5nKHR5cGVBcmd1bWVudC5yZWFkYWJsZU5hbWUoKSksIG5l
dyBTdHJpbmcoZ2VuZXJpY1R5cGUucmVhZGFibGVOYW1lKCkpLCBuZXcgU3RyaW5nKHR5cGVQYXJh
bWV0ZXIuc291cmNlTmFtZSgpKSwgcGFyYW1ldGVyQm91bmRBc1N0cmluZyh0eXBlUGFyYW1ldGVy
LCBmYWxzZSkgfSwKKwkJCW5ldyBTdHJpbmdbXSB7IG5ldyBTdHJpbmcodHlwZUFyZ3VtZW50LnNo
b3J0UmVhZGFibGVOYW1lKCkpLCBuZXcgU3RyaW5nKGdlbmVyaWNUeXBlLnNob3J0UmVhZGFibGVO
YW1lKCkpLCBuZXcgU3RyaW5nKHR5cGVQYXJhbWV0ZXIuc291cmNlTmFtZSgpKSwgcGFyYW1ldGVy
Qm91bmRBc1N0cmluZyh0eXBlUGFyYW1ldGVyLCB0cnVlKSB9LAogCQkJUHJvYmxlbVNldmVyaXRp
ZXMuQWJvcnRDb21waWxhdGlvbiB8IFByb2JsZW1TZXZlcml0aWVzLkVycm9yIHwgUHJvYmxlbVNl
dmVyaXRpZXMuRmF0YWwsCiAJCQkwLAogCQkJMCk7CkBAIC03ODY3LDggKzc4NjcsOCBAQCBwdWJs
aWMgdm9pZCB0eXBlTWlzbWF0Y2hFcnJvcihUeXBlQmluZGluZyB0eXBlQXJndW1lbnQsIFR5cGVW
YXJpYWJsZUJpbmRpbmcgdHlwZQogICAgIH0KIAl0aGlzLmhhbmRsZSgKIAkJSVByb2JsZW0uVHlw
ZUFyZ3VtZW50TWlzbWF0Y2gsCi0JCW5ldyBTdHJpbmdbXSB7IG5ldyBTdHJpbmcodHlwZUFyZ3Vt
ZW50LnJlYWRhYmxlTmFtZSgpKSwgbmV3IFN0cmluZyhnZW5lcmljVHlwZS5yZWFkYWJsZU5hbWUo
KSksIG5ldyBTdHJpbmcodHlwZVBhcmFtZXRlci5zb3VyY2VOYW1lKSwgcGFyYW1ldGVyQm91bmRB
c1N0cmluZyh0eXBlUGFyYW1ldGVyLCBmYWxzZSkgfSwKLQkJbmV3IFN0cmluZ1tdIHsgbmV3IFN0
cmluZyh0eXBlQXJndW1lbnQuc2hvcnRSZWFkYWJsZU5hbWUoKSksIG5ldyBTdHJpbmcoZ2VuZXJp
Y1R5cGUuc2hvcnRSZWFkYWJsZU5hbWUoKSksIG5ldyBTdHJpbmcodHlwZVBhcmFtZXRlci5zb3Vy
Y2VOYW1lKSwgcGFyYW1ldGVyQm91bmRBc1N0cmluZyh0eXBlUGFyYW1ldGVyLCB0cnVlKSB9LAor
CQluZXcgU3RyaW5nW10geyBuZXcgU3RyaW5nKHR5cGVBcmd1bWVudC5yZWFkYWJsZU5hbWUoKSks
IG5ldyBTdHJpbmcoZ2VuZXJpY1R5cGUucmVhZGFibGVOYW1lKCkpLCBuZXcgU3RyaW5nKHR5cGVQ
YXJhbWV0ZXIuc291cmNlTmFtZSgpKSwgcGFyYW1ldGVyQm91bmRBc1N0cmluZyh0eXBlUGFyYW1l
dGVyLCBmYWxzZSkgfSwKKwkJbmV3IFN0cmluZ1tdIHsgbmV3IFN0cmluZyh0eXBlQXJndW1lbnQu
c2hvcnRSZWFkYWJsZU5hbWUoKSksIG5ldyBTdHJpbmcoZ2VuZXJpY1R5cGUuc2hvcnRSZWFkYWJs
ZU5hbWUoKSksIG5ldyBTdHJpbmcodHlwZVBhcmFtZXRlci5zb3VyY2VOYW1lKCkpLCBwYXJhbWV0
ZXJCb3VuZEFzU3RyaW5nKHR5cGVQYXJhbWV0ZXIsIHRydWUpIH0sCiAJCWxvY2F0aW9uLnNvdXJj
ZVN0YXJ0LAogCQlsb2NhdGlvbi5zb3VyY2VFbmQpOwogfQo=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>242307</attachid>
            <date>2014-04-25 02:52:00 -0400</date>
            <delta_ts>2014-04-26 17:10:06 -0400</delta_ts>
            <desc>Patch</desc>
            <filename>patch.patch</filename>
            <type>text/plain</type>
            <size>10587</size>
            <attacher name="shankha banerjee">shankhba</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmJ1aWxkZXIvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2J1aWxkZXIvQmFzaWNCdWlsZFRlc3RzLmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5idWlsZGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90
ZXN0cy9idWlsZGVyL0Jhc2ljQnVpbGRUZXN0cy5qYXZhCmluZGV4IGJkNjRhMDAuLjhkZWVhZDAg
MTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmJ1aWxkZXIvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2J1aWxkZXIvQmFzaWNCdWlsZFRlc3RzLmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuYnVpbGRlci9zcmMvb3JnL2VjbGlwc2UvamR0L2Nv
cmUvdGVzdHMvYnVpbGRlci9CYXNpY0J1aWxkVGVzdHMuamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8q
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTMgSUJNIENv
cnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTQgSUJNIENv
cnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dy
YW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUg
dW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdo
aWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBA
IC02MDQsNCArNjA0LDI4IEBAIHB1YmxpYyBjbGFzcyBCYXNpY0J1aWxkVGVzdHMgZXh0ZW5kcyBC
dWlsZGVyVGVzdHMgewogCQlleHBlY3RpbmdOb1Byb2JsZW1zKCk7CiAJCWFzc2VydEVxdWFscygi
SW5jb3JyZWN0IHZhbHVlIiwgMCwgcHJldmlvdXMpOwogCX0KKwkvLyBodHRwczovL2J1Z3MuZWNs
aXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDI1NDIwCisJcHVibGljIHZvaWQgdGVzdGJC
dWc0MjU0MjAoKSB0aHJvd3MgSmF2YU1vZGVsRXhjZXB0aW9uIHsKKwkJSVBhdGggcHJvamVjdFBh
dGggPSBlbnYuYWRkUHJvamVjdCgiUHJvamVjdCIsICIxLjYiKTsgLy8kTk9OLU5MUy0xJAorCisJ
CS8vIHJlbW92ZSBvbGQgcGFja2FnZSBmcmFnbWVudCByb290IHNvIHRoYXQgbmFtZXMgZG9uJ3Qg
Y29sbGlkZQorCQllbnYucmVtb3ZlUGFja2FnZUZyYWdtZW50Um9vdChwcm9qZWN0UGF0aCwgIiIp
OyAvLyROT04tTkxTLTEkCisKKwkJSVBhdGggcm9vdCA9IGVudi5hZGRQYWNrYWdlRnJhZ21lbnRS
b290KHByb2plY3RQYXRoLCAic3JjIik7IC8vJE5PTi1OTFMtMSQKKwkJZW52LnNldE91dHB1dEZv
bGRlcihwcm9qZWN0UGF0aCwgImJpbiIpOyAvLyROT04tTkxTLTEkCisKKwkJSVBhdGggcGF0aCA9
IGVudi5hZGRDbGFzcyhyb290LCAiIiwgIlgiLCAvLyROT04tTkxTLTEkIC8vJE5PTi1OTFMtMiQK
KwkJCSJjbGFzcyBYIHtcbiIgKworCQkJIiAgdm9pZCB0ZXN0KCkge1xuIiArCisJCQkiCWludCB4
ID0gMDtcbiIgKworCQkJIglmb28oMCA+PSAwID8geCA6IFwiXCIpOyBcbiIgKworCQkJIiAgfVxu
IiArCisJCQkifSIpOworCisJCWZ1bGxCdWlsZChwcm9qZWN0UGF0aCk7CisJCWV4cGVjdGluZ1By
b2JsZW1zRm9yKAorCQkJCXBhdGgsCisJCQkJIlByb2JsZW0gOiBUaGUgdHlwZSBqYXZhLmxhbmcu
T2JqZWN0IGNhbm5vdCBiZSByZXNvbHZlZC4gSXQgaXMgaW5kaXJlY3RseSByZWZlcmVuY2VkIGZy
b20gcmVxdWlyZWQgLmNsYXNzIGZpbGVzIFsgcmVzb3VyY2UgOiA8L1Byb2plY3Qvc3JjL1guamF2
YT4gcmFuZ2UgOiA8MCwxPiBjYXRlZ29yeSA6IDwxMD4gc2V2ZXJpdHkgOiA8Mj5dIgorCQkJKTsK
Kwl9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Byb2JsZW1SZWZlcmVuY2VCaW5kaW5n
LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Byb2JsZW1SZWZlcmVuY2VCaW5kaW5nLmphdmEKaW5kZXgg
ZTc4NTcwMy4uZjdmMGVlMiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Qcm9ibGVtUmVmZXJl
bmNlQmluZGluZy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUHJvYmxlbVJlZmVyZW5jZUJpbmRp
bmcuamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5
cmlnaHQgKGMpIDIwMDAsIDIwMTMgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5
cmlnaHQgKGMpIDIwMDAsIDIwMTQgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwg
cmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJp
YWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNl
IFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0
aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC05MSw2ICs5MSwxMCBAQCBwdWJsaWMgY2hhcltd
IHNob3J0UmVhZGFibGVOYW1lKCkgewogCXJldHVybiByZWFkYWJsZU5hbWUoKTsKIH0KIAorcHVi
bGljIGNoYXJbXSBzb3VyY2VOYW1lKCkgeworCXJldHVybiB0aGlzLmNvbXBvdW5kTmFtZS5sZW5n
dGggPT0gMCA/IG51bGwgOiB0aGlzLmNvbXBvdW5kTmFtZVt0aGlzLmNvbXBvdW5kTmFtZS5sZW5n
dGggLSAxXTsgLy8gW2phdmFdW3V0aWxdW01hcCRFbnRyeV0KK30KKwogcHVibGljIFN0cmluZyB0
b1N0cmluZygpIHsKIAlTdHJpbmdCdWZmZXIgYnVmZmVyID0gbmV3IFN0cmluZ0J1ZmZlcigxMCk7
CiAJYnVmZmVyLmFwcGVuZCgiUHJvYmxlbVR5cGU6W2NvbXBvdW5kTmFtZT0iKTsgLy8kTk9OLU5M
Uy0xJApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxlbVJlcG9ydGVyLmphdmEgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvcHJvYmxlbS9Qcm9ibGVtUmVwb3J0ZXIuamF2YQppbmRleCA2MzcwZmViLi42MGFkNjU0
IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9Qcm9ibGVtUmVwb3J0ZXIuamF2YQorKysgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvcHJvYmxlbS9Qcm9ibGVtUmVwb3J0ZXIuamF2YQpAQCAtMjIzMSw4ICsyMjMxLDggQEAg
cHVibGljIHZvaWQgZmluYWxWYXJpYWJsZUJvdW5kKFR5cGVWYXJpYWJsZUJpbmRpbmcgdHlwZVZh
cmlhYmxlLCBUeXBlUmVmZXJlbmNlIHQKIAlpZiAoc2V2ZXJpdHkgPT0gUHJvYmxlbVNldmVyaXRp
ZXMuSWdub3JlKSByZXR1cm47CiAJdGhpcy5oYW5kbGUoCiAJCUlQcm9ibGVtLkZpbmFsQm91bmRG
b3JUeXBlVmFyaWFibGUsCi0JCW5ldyBTdHJpbmdbXSB7IG5ldyBTdHJpbmcodHlwZVZhcmlhYmxl
LnNvdXJjZU5hbWUpLCBuZXcgU3RyaW5nKHR5cGVSZWYucmVzb2x2ZWRUeXBlLnJlYWRhYmxlTmFt
ZSgpKX0sCi0JCW5ldyBTdHJpbmdbXSB7IG5ldyBTdHJpbmcodHlwZVZhcmlhYmxlLnNvdXJjZU5h
bWUpLCBuZXcgU3RyaW5nKHR5cGVSZWYucmVzb2x2ZWRUeXBlLnNob3J0UmVhZGFibGVOYW1lKCkp
fSwKKwkJbmV3IFN0cmluZ1tdIHsgbmV3IFN0cmluZyh0eXBlVmFyaWFibGUuc291cmNlTmFtZSgp
KSwgbmV3IFN0cmluZyh0eXBlUmVmLnJlc29sdmVkVHlwZS5yZWFkYWJsZU5hbWUoKSl9LAorCQlu
ZXcgU3RyaW5nW10geyBuZXcgU3RyaW5nKHR5cGVWYXJpYWJsZS5zb3VyY2VOYW1lKCkpLCBuZXcg
U3RyaW5nKHR5cGVSZWYucmVzb2x2ZWRUeXBlLnNob3J0UmVhZGFibGVOYW1lKCkpfSwKIAkJc2V2
ZXJpdHksCiAJCXR5cGVSZWYuc291cmNlU3RhcnQsCiAJCXR5cGVSZWYuc291cmNlRW5kKTsKQEAg
LTM1NzksNyArMzU3OSw3IEBAIHB1YmxpYyB2b2lkIGludmFsaWRDb25zdHJ1Y3RvcihTdGF0ZW1l
bnQgc3RhdGVtZW50LCBNZXRob2RCaW5kaW5nIHRhcmdldENvbnN0cnVjCiAJCQkJICAgICAgICBu
ZXcgU3RyaW5nKHNob3duQ29uc3RydWN0b3IuZGVjbGFyaW5nQ2xhc3MucmVhZGFibGVOYW1lKCkp
LAogCQkJCSAgICAgICAgdHlwZXNBc1N0cmluZyhpbnZvY2F0aW9uQXJndW1lbnRzLCBmYWxzZSks
CiAJCQkJICAgICAgICBuZXcgU3RyaW5nKGluZmVycmVkVHlwZUFyZ3VtZW50LnJlYWRhYmxlTmFt
ZSgpKSwKLQkJCQkgICAgICAgIG5ldyBTdHJpbmcodHlwZVBhcmFtZXRlci5zb3VyY2VOYW1lKSwK
KwkJCQkgICAgICAgIG5ldyBTdHJpbmcodHlwZVBhcmFtZXRlci5zb3VyY2VOYW1lKCkpLAogCQkJ
CSAgICAgICAgcGFyYW1ldGVyQm91bmRBc1N0cmluZyh0eXBlUGFyYW1ldGVyLCBmYWxzZSkgfSwK
IAkJCQluZXcgU3RyaW5nW10gewogCQkJCSAgICAgICAgbmV3IFN0cmluZyhzaG93bkNvbnN0cnVj
dG9yLmRlY2xhcmluZ0NsYXNzLnNvdXJjZU5hbWUoKSksCkBAIC0zNTg3LDcgKzM1ODcsNyBAQCBw
dWJsaWMgdm9pZCBpbnZhbGlkQ29uc3RydWN0b3IoU3RhdGVtZW50IHN0YXRlbWVudCwgTWV0aG9k
QmluZGluZyB0YXJnZXRDb25zdHJ1YwogCQkJCSAgICAgICAgbmV3IFN0cmluZyhzaG93bkNvbnN0
cnVjdG9yLmRlY2xhcmluZ0NsYXNzLnNob3J0UmVhZGFibGVOYW1lKCkpLAogCQkJCSAgICAgICAg
dHlwZXNBc1N0cmluZyhpbnZvY2F0aW9uQXJndW1lbnRzLCB0cnVlKSwKIAkJCQkgICAgICAgIG5l
dyBTdHJpbmcoaW5mZXJyZWRUeXBlQXJndW1lbnQuc2hvcnRSZWFkYWJsZU5hbWUoKSksCi0JCQkJ
ICAgICAgICBuZXcgU3RyaW5nKHR5cGVQYXJhbWV0ZXIuc291cmNlTmFtZSksCisJCQkJICAgICAg
ICBuZXcgU3RyaW5nKHR5cGVQYXJhbWV0ZXIuc291cmNlTmFtZSgpKSwKIAkJCQkgICAgICAgIHBh
cmFtZXRlckJvdW5kQXNTdHJpbmcodHlwZVBhcmFtZXRlciwgdHJ1ZSkgfSwKIAkJCQlzb3VyY2VT
dGFydCwKIAkJCQlzb3VyY2VFbmQpOwpAQCAtNDEyNyw3ICs0MTI3LDcgQEAgcHVibGljIHZvaWQg
aW52YWxpZE1ldGhvZChNZXNzYWdlU2VuZCBtZXNzYWdlU2VuZCwgTWV0aG9kQmluZGluZyBtZXRo
b2QpIHsKIAkJCQkgICAgICAgIG5ldyBTdHJpbmcoc2hvd25NZXRob2QuZGVjbGFyaW5nQ2xhc3Mu
cmVhZGFibGVOYW1lKCkpLAogCQkJCSAgICAgICAgdHlwZXNBc1N0cmluZyhpbnZvY2F0aW9uQXJn
dW1lbnRzLCBmYWxzZSksCiAJCQkJICAgICAgICBuZXcgU3RyaW5nKGluZmVycmVkVHlwZUFyZ3Vt
ZW50LnJlYWRhYmxlTmFtZSgpKSwKLQkJCQkgICAgICAgIG5ldyBTdHJpbmcodHlwZVBhcmFtZXRl
ci5zb3VyY2VOYW1lKSwKKwkJCQkgICAgICAgIG5ldyBTdHJpbmcodHlwZVBhcmFtZXRlci5zb3Vy
Y2VOYW1lKCkpLAogCQkJCSAgICAgICAgcGFyYW1ldGVyQm91bmRBc1N0cmluZyh0eXBlUGFyYW1l
dGVyLCBmYWxzZSkgfSwKIAkJCQluZXcgU3RyaW5nW10gewogCQkJCSAgICAgICAgbmV3IFN0cmlu
ZyhzaG93bk1ldGhvZC5zZWxlY3RvciksCkBAIC00MTM1LDcgKzQxMzUsNyBAQCBwdWJsaWMgdm9p
ZCBpbnZhbGlkTWV0aG9kKE1lc3NhZ2VTZW5kIG1lc3NhZ2VTZW5kLCBNZXRob2RCaW5kaW5nIG1l
dGhvZCkgewogCQkJCSAgICAgICAgbmV3IFN0cmluZyhzaG93bk1ldGhvZC5kZWNsYXJpbmdDbGFz
cy5zaG9ydFJlYWRhYmxlTmFtZSgpKSwKIAkJCQkgICAgICAgIHR5cGVzQXNTdHJpbmcoaW52b2Nh
dGlvbkFyZ3VtZW50cywgdHJ1ZSksCiAJCQkJICAgICAgICBuZXcgU3RyaW5nKGluZmVycmVkVHlw
ZUFyZ3VtZW50LnNob3J0UmVhZGFibGVOYW1lKCkpLAotCQkJCSAgICAgICAgbmV3IFN0cmluZyh0
eXBlUGFyYW1ldGVyLnNvdXJjZU5hbWUpLAorCQkJCSAgICAgICAgbmV3IFN0cmluZyh0eXBlUGFy
YW1ldGVyLnNvdXJjZU5hbWUoKSksCiAJCQkJICAgICAgICBwYXJhbWV0ZXJCb3VuZEFzU3RyaW5n
KHR5cGVQYXJhbWV0ZXIsIHRydWUpIH0sCiAJCQkJKGludCkgKG1lc3NhZ2VTZW5kLm5hbWVTb3Vy
Y2VQb3NpdGlvbiA+Pj4gMzIpLAogCQkJCShpbnQpIG1lc3NhZ2VTZW5kLm5hbWVTb3VyY2VQb3Np
dGlvbik7CkBAIC00OTU2LDcgKzQ5NTYsNyBAQCBwdWJsaWMgdm9pZCBqYXZhZG9jSW52YWxpZENv
bnN0cnVjdG9yKFN0YXRlbWVudCBzdGF0ZW1lbnQsIE1ldGhvZEJpbmRpbmcgdGFyZ2V0QwogCQkJ
CSAgICAgICAgbmV3IFN0cmluZyhzaG93bkNvbnN0cnVjdG9yLmRlY2xhcmluZ0NsYXNzLnJlYWRh
YmxlTmFtZSgpKSwKIAkJCQkgICAgICAgIHR5cGVzQXNTdHJpbmcoaW52b2NhdGlvbkFyZ3VtZW50
cywgZmFsc2UpLAogCQkJCSAgICAgICAgbmV3IFN0cmluZyhpbmZlcnJlZFR5cGVBcmd1bWVudC5y
ZWFkYWJsZU5hbWUoKSksCi0JCQkJICAgICAgICBuZXcgU3RyaW5nKHR5cGVQYXJhbWV0ZXIuc291
cmNlTmFtZSksCisJCQkJICAgICAgICBuZXcgU3RyaW5nKHR5cGVQYXJhbWV0ZXIuc291cmNlTmFt
ZSgpKSwKIAkJCQkgICAgICAgIHBhcmFtZXRlckJvdW5kQXNTdHJpbmcodHlwZVBhcmFtZXRlciwg
ZmFsc2UpIH0sCiAJCQkJbmV3IFN0cmluZ1tdIHsKIAkJCQkgICAgICAgIG5ldyBTdHJpbmcoc2hv
d25Db25zdHJ1Y3Rvci5kZWNsYXJpbmdDbGFzcy5zb3VyY2VOYW1lKCkpLApAQCAtNDk2NCw3ICs0
OTY0LDcgQEAgcHVibGljIHZvaWQgamF2YWRvY0ludmFsaWRDb25zdHJ1Y3RvcihTdGF0ZW1lbnQg
c3RhdGVtZW50LCBNZXRob2RCaW5kaW5nIHRhcmdldEMKIAkJCQkgICAgICAgIG5ldyBTdHJpbmco
c2hvd25Db25zdHJ1Y3Rvci5kZWNsYXJpbmdDbGFzcy5zaG9ydFJlYWRhYmxlTmFtZSgpKSwKIAkJ
CQkgICAgICAgIHR5cGVzQXNTdHJpbmcoaW52b2NhdGlvbkFyZ3VtZW50cywgdHJ1ZSksCiAJCQkJ
ICAgICAgICBuZXcgU3RyaW5nKGluZmVycmVkVHlwZUFyZ3VtZW50LnNob3J0UmVhZGFibGVOYW1l
KCkpLAotCQkJCSAgICAgICAgbmV3IFN0cmluZyh0eXBlUGFyYW1ldGVyLnNvdXJjZU5hbWUpLAor
CQkJCSAgICAgICAgbmV3IFN0cmluZyh0eXBlUGFyYW1ldGVyLnNvdXJjZU5hbWUoKSksCiAJCQkJ
ICAgICAgICBwYXJhbWV0ZXJCb3VuZEFzU3RyaW5nKHR5cGVQYXJhbWV0ZXIsIHRydWUpIH0sCiAJ
CQkJc2V2ZXJpdHksCiAJCQkJc291cmNlU3RhcnQsCkBAIC01MTg4LDcgKzUxODgsNyBAQCBwdWJs
aWMgdm9pZCBqYXZhZG9jSW52YWxpZE1ldGhvZChNZXNzYWdlU2VuZCBtZXNzYWdlU2VuZCwgTWV0
aG9kQmluZGluZyBtZXRob2QsCiAJCQkJICAgICAgICBuZXcgU3RyaW5nKHNob3duTWV0aG9kLmRl
Y2xhcmluZ0NsYXNzLnJlYWRhYmxlTmFtZSgpKSwKIAkJCQkgICAgICAgIHR5cGVzQXNTdHJpbmco
aW52b2NhdGlvbkFyZ3VtZW50cywgZmFsc2UpLAogCQkJCSAgICAgICAgbmV3IFN0cmluZyhpbmZl
cnJlZFR5cGVBcmd1bWVudC5yZWFkYWJsZU5hbWUoKSksCi0JCQkJICAgICAgICBuZXcgU3RyaW5n
KHR5cGVQYXJhbWV0ZXIuc291cmNlTmFtZSksCisJCQkJICAgICAgICBuZXcgU3RyaW5nKHR5cGVQ
YXJhbWV0ZXIuc291cmNlTmFtZSgpKSwKIAkJCQkgICAgICAgIHBhcmFtZXRlckJvdW5kQXNTdHJp
bmcodHlwZVBhcmFtZXRlciwgZmFsc2UpIH0sCiAJCQkJbmV3IFN0cmluZ1tdIHsKIAkJCQkgICAg
ICAgIG5ldyBTdHJpbmcoc2hvd25NZXRob2Quc2VsZWN0b3IpLApAQCAtNTE5Niw3ICs1MTk2LDcg
QEAgcHVibGljIHZvaWQgamF2YWRvY0ludmFsaWRNZXRob2QoTWVzc2FnZVNlbmQgbWVzc2FnZVNl
bmQsIE1ldGhvZEJpbmRpbmcgbWV0aG9kLAogCQkJCSAgICAgICAgbmV3IFN0cmluZyhzaG93bk1l
dGhvZC5kZWNsYXJpbmdDbGFzcy5zaG9ydFJlYWRhYmxlTmFtZSgpKSwKIAkJCQkgICAgICAgIHR5
cGVzQXNTdHJpbmcoaW52b2NhdGlvbkFyZ3VtZW50cywgdHJ1ZSksCiAJCQkJICAgICAgICBuZXcg
U3RyaW5nKGluZmVycmVkVHlwZUFyZ3VtZW50LnNob3J0UmVhZGFibGVOYW1lKCkpLAotCQkJCSAg
ICAgICAgbmV3IFN0cmluZyh0eXBlUGFyYW1ldGVyLnNvdXJjZU5hbWUpLAorCQkJCSAgICAgICAg
bmV3IFN0cmluZyh0eXBlUGFyYW1ldGVyLnNvdXJjZU5hbWUoKSksCiAJCQkJICAgICAgICBwYXJh
bWV0ZXJCb3VuZEFzU3RyaW5nKHR5cGVQYXJhbWV0ZXIsIHRydWUpIH0sCiAJCQkJc2V2ZXJpdHks
CiAJCQkJKGludCkgKG1lc3NhZ2VTZW5kLm5hbWVTb3VyY2VQb3NpdGlvbiA+Pj4gMzIpLApAQCAt
Nzg2MSw4ICs3ODYxLDggQEAgcHVibGljIHZvaWQgdHlwZU1pc21hdGNoRXJyb3IoVHlwZUJpbmRp
bmcgdHlwZUFyZ3VtZW50LCBUeXBlVmFyaWFibGVCaW5kaW5nIHR5cGUKIAlpZiAobG9jYXRpb24g
PT0gbnVsbCkgeyAvLyBiaW5hcnkgY2FzZQogCQl0aGlzLmhhbmRsZSgKIAkJCUlQcm9ibGVtLlR5
cGVBcmd1bWVudE1pc21hdGNoLAotCQkJbmV3IFN0cmluZ1tdIHsgbmV3IFN0cmluZyh0eXBlQXJn
dW1lbnQucmVhZGFibGVOYW1lKCkpLCBuZXcgU3RyaW5nKGdlbmVyaWNUeXBlLnJlYWRhYmxlTmFt
ZSgpKSwgbmV3IFN0cmluZyh0eXBlUGFyYW1ldGVyLnNvdXJjZU5hbWUpLCBwYXJhbWV0ZXJCb3Vu
ZEFzU3RyaW5nKHR5cGVQYXJhbWV0ZXIsIGZhbHNlKSB9LAotCQkJbmV3IFN0cmluZ1tdIHsgbmV3
IFN0cmluZyh0eXBlQXJndW1lbnQuc2hvcnRSZWFkYWJsZU5hbWUoKSksIG5ldyBTdHJpbmcoZ2Vu
ZXJpY1R5cGUuc2hvcnRSZWFkYWJsZU5hbWUoKSksIG5ldyBTdHJpbmcodHlwZVBhcmFtZXRlci5z
b3VyY2VOYW1lKSwgcGFyYW1ldGVyQm91bmRBc1N0cmluZyh0eXBlUGFyYW1ldGVyLCB0cnVlKSB9
LAorCQkJbmV3IFN0cmluZ1tdIHsgbmV3IFN0cmluZyh0eXBlQXJndW1lbnQucmVhZGFibGVOYW1l
KCkpLCBuZXcgU3RyaW5nKGdlbmVyaWNUeXBlLnJlYWRhYmxlTmFtZSgpKSwgbmV3IFN0cmluZyh0
eXBlUGFyYW1ldGVyLnNvdXJjZU5hbWUoKSksIHBhcmFtZXRlckJvdW5kQXNTdHJpbmcodHlwZVBh
cmFtZXRlciwgZmFsc2UpIH0sCisJCQluZXcgU3RyaW5nW10geyBuZXcgU3RyaW5nKHR5cGVBcmd1
bWVudC5zaG9ydFJlYWRhYmxlTmFtZSgpKSwgbmV3IFN0cmluZyhnZW5lcmljVHlwZS5zaG9ydFJl
YWRhYmxlTmFtZSgpKSwgbmV3IFN0cmluZyh0eXBlUGFyYW1ldGVyLnNvdXJjZU5hbWUoKSksIHBh
cmFtZXRlckJvdW5kQXNTdHJpbmcodHlwZVBhcmFtZXRlciwgdHJ1ZSkgfSwKIAkJCVByb2JsZW1T
ZXZlcml0aWVzLkFib3J0Q29tcGlsYXRpb24gfCBQcm9ibGVtU2V2ZXJpdGllcy5FcnJvciB8IFBy
b2JsZW1TZXZlcml0aWVzLkZhdGFsLAogCQkJMCwKIAkJCTApOwpAQCAtNzg3MCw4ICs3ODcwLDgg
QEAgcHVibGljIHZvaWQgdHlwZU1pc21hdGNoRXJyb3IoVHlwZUJpbmRpbmcgdHlwZUFyZ3VtZW50
LCBUeXBlVmFyaWFibGVCaW5kaW5nIHR5cGUKICAgICB9CiAJdGhpcy5oYW5kbGUoCiAJCUlQcm9i
bGVtLlR5cGVBcmd1bWVudE1pc21hdGNoLAotCQluZXcgU3RyaW5nW10geyBuZXcgU3RyaW5nKHR5
cGVBcmd1bWVudC5yZWFkYWJsZU5hbWUoKSksIG5ldyBTdHJpbmcoZ2VuZXJpY1R5cGUucmVhZGFi
bGVOYW1lKCkpLCBuZXcgU3RyaW5nKHR5cGVQYXJhbWV0ZXIuc291cmNlTmFtZSksIHBhcmFtZXRl
ckJvdW5kQXNTdHJpbmcodHlwZVBhcmFtZXRlciwgZmFsc2UpIH0sCi0JCW5ldyBTdHJpbmdbXSB7
IG5ldyBTdHJpbmcodHlwZUFyZ3VtZW50LnNob3J0UmVhZGFibGVOYW1lKCkpLCBuZXcgU3RyaW5n
KGdlbmVyaWNUeXBlLnNob3J0UmVhZGFibGVOYW1lKCkpLCBuZXcgU3RyaW5nKHR5cGVQYXJhbWV0
ZXIuc291cmNlTmFtZSksIHBhcmFtZXRlckJvdW5kQXNTdHJpbmcodHlwZVBhcmFtZXRlciwgdHJ1
ZSkgfSwKKwkJbmV3IFN0cmluZ1tdIHsgbmV3IFN0cmluZyh0eXBlQXJndW1lbnQucmVhZGFibGVO
YW1lKCkpLCBuZXcgU3RyaW5nKGdlbmVyaWNUeXBlLnJlYWRhYmxlTmFtZSgpKSwgbmV3IFN0cmlu
Zyh0eXBlUGFyYW1ldGVyLnNvdXJjZU5hbWUoKSksIHBhcmFtZXRlckJvdW5kQXNTdHJpbmcodHlw
ZVBhcmFtZXRlciwgZmFsc2UpIH0sCisJCW5ldyBTdHJpbmdbXSB7IG5ldyBTdHJpbmcodHlwZUFy
Z3VtZW50LnNob3J0UmVhZGFibGVOYW1lKCkpLCBuZXcgU3RyaW5nKGdlbmVyaWNUeXBlLnNob3J0
UmVhZGFibGVOYW1lKCkpLCBuZXcgU3RyaW5nKHR5cGVQYXJhbWV0ZXIuc291cmNlTmFtZSgpKSwg
cGFyYW1ldGVyQm91bmRBc1N0cmluZyh0eXBlUGFyYW1ldGVyLCB0cnVlKSB9LAogCQlsb2NhdGlv
bi5zb3VyY2VTdGFydCwKIAkJbG9jYXRpb24uc291cmNlRW5kKTsKIH0K
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>242361</attachid>
            <date>2014-04-26 17:10:00 -0400</date>
            <delta_ts>2014-04-26 17:10:06 -0400</delta_ts>
            <desc>Patch on Master</desc>
            <filename>patch.patch</filename>
            <type>text/plain</type>
            <size>10590</size>
            <attacher name="shankha banerjee">shankhba</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmJ1aWxkZXIvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2J1aWxkZXIvQmFzaWNCdWlsZFRlc3RzLmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5idWlsZGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90
ZXN0cy9idWlsZGVyL0Jhc2ljQnVpbGRUZXN0cy5qYXZhCmluZGV4IGJkNjRhMDAuLjkyNzkyZjUg
MTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmJ1aWxkZXIvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2J1aWxkZXIvQmFzaWNCdWlsZFRlc3RzLmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuYnVpbGRlci9zcmMvb3JnL2VjbGlwc2UvamR0L2Nv
cmUvdGVzdHMvYnVpbGRlci9CYXNpY0J1aWxkVGVzdHMuamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8q
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTMgSUJNIENv
cnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTQgSUJNIENv
cnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dy
YW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUg
dW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdo
aWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBA
IC02MDQsNCArNjA0LDI4IEBAIHB1YmxpYyBjbGFzcyBCYXNpY0J1aWxkVGVzdHMgZXh0ZW5kcyBC
dWlsZGVyVGVzdHMgewogCQlleHBlY3RpbmdOb1Byb2JsZW1zKCk7CiAJCWFzc2VydEVxdWFscygi
SW5jb3JyZWN0IHZhbHVlIiwgMCwgcHJldmlvdXMpOwogCX0KKwkvLyBodHRwczovL2J1Z3MuZWNs
aXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDI1NDIwCisJcHVibGljIHZvaWQgdGVzdGJC
dWc0MjU0MjAoKSB0aHJvd3MgSmF2YU1vZGVsRXhjZXB0aW9uIHsKKwkJSVBhdGggcHJvamVjdFBh
dGggPSBlbnYuYWRkUHJvamVjdCgiUHJvamVjdCIsICIxLjUiKTsgLy8kTk9OLU5MUy0xJAorCisJ
CS8vIHJlbW92ZSBvbGQgcGFja2FnZSBmcmFnbWVudCByb290IHNvIHRoYXQgbmFtZXMgZG9uJ3Qg
Y29sbGlkZQorCQllbnYucmVtb3ZlUGFja2FnZUZyYWdtZW50Um9vdChwcm9qZWN0UGF0aCwgIiIp
OyAvLyROT04tTkxTLTEkCisKKwkJSVBhdGggcm9vdCA9IGVudi5hZGRQYWNrYWdlRnJhZ21lbnRS
b290KHByb2plY3RQYXRoLCAic3JjIik7IC8vJE5PTi1OTFMtMSQKKwkJZW52LnNldE91dHB1dEZv
bGRlcihwcm9qZWN0UGF0aCwgImJpbiIpOyAvLyROT04tTkxTLTEkCisKKwkJSVBhdGggcGF0aCA9
IGVudi5hZGRDbGFzcyhyb290LCAiIiwgIlgiLCAvLyROT04tTkxTLTEkIC8vJE5PTi1OTFMtMiQK
KwkJCSJjbGFzcyBYIHtcbiIgKworCQkJIiAgdm9pZCB0ZXN0KCkge1xuIiArCisJCQkiCWludCB4
ID0gMDtcbiIgKworCQkJIglpbnQgeSA9IDAgPj0gMCA/IHggOiBcIlwiOyBcbiIgKworCQkJIiAg
fVxuIiArCisJCQkifSIpOworCisJCWZ1bGxCdWlsZChwcm9qZWN0UGF0aCk7CisJCWV4cGVjdGlu
Z1Byb2JsZW1zRm9yKAorCQkJCXBhdGgsCisJCQkJIlByb2JsZW0gOiBUaGUgdHlwZSBqYXZhLmxh
bmcuT2JqZWN0IGNhbm5vdCBiZSByZXNvbHZlZC4gSXQgaXMgaW5kaXJlY3RseSByZWZlcmVuY2Vk
IGZyb20gcmVxdWlyZWQgLmNsYXNzIGZpbGVzIFsgcmVzb3VyY2UgOiA8L1Byb2plY3Qvc3JjL1gu
amF2YT4gcmFuZ2UgOiA8MCwxPiBjYXRlZ29yeSA6IDwxMD4gc2V2ZXJpdHkgOiA8Mj5dIgorCQkJ
KTsKKwl9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Byb2JsZW1SZWZlcmVuY2VCaW5k
aW5nLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Byb2JsZW1SZWZlcmVuY2VCaW5kaW5nLmphdmEKaW5k
ZXggZTc4NTcwMy4uZjdmMGVlMiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Qcm9ibGVtUmVm
ZXJlbmNlQmluZGluZy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUHJvYmxlbVJlZmVyZW5jZUJp
bmRpbmcuamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBD
b3B5cmlnaHQgKGMpIDIwMDAsIDIwMTMgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBD
b3B5cmlnaHQgKGMpIDIwMDAsIDIwMTQgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBB
bGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0
ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xp
cHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJp
YnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC05MSw2ICs5MSwxMCBAQCBwdWJsaWMgY2hh
cltdIHNob3J0UmVhZGFibGVOYW1lKCkgewogCXJldHVybiByZWFkYWJsZU5hbWUoKTsKIH0KIAor
cHVibGljIGNoYXJbXSBzb3VyY2VOYW1lKCkgeworCXJldHVybiB0aGlzLmNvbXBvdW5kTmFtZS5s
ZW5ndGggPT0gMCA/IG51bGwgOiB0aGlzLmNvbXBvdW5kTmFtZVt0aGlzLmNvbXBvdW5kTmFtZS5s
ZW5ndGggLSAxXTsgLy8gW2phdmFdW3V0aWxdW01hcCRFbnRyeV0KK30KKwogcHVibGljIFN0cmlu
ZyB0b1N0cmluZygpIHsKIAlTdHJpbmdCdWZmZXIgYnVmZmVyID0gbmV3IFN0cmluZ0J1ZmZlcigx
MCk7CiAJYnVmZmVyLmFwcGVuZCgiUHJvYmxlbVR5cGU6W2NvbXBvdW5kTmFtZT0iKTsgLy8kTk9O
LU5MUy0xJApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxlbVJlcG9ydGVyLmphdmEg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvcHJvYmxlbS9Qcm9ibGVtUmVwb3J0ZXIuamF2YQppbmRleCA2MzcwZmViLi42MGFk
NjU0IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9Qcm9ibGVtUmVwb3J0ZXIuamF2YQorKysg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvcHJvYmxlbS9Qcm9ibGVtUmVwb3J0ZXIuamF2YQpAQCAtMjIzMSw4ICsyMjMxLDgg
QEAgcHVibGljIHZvaWQgZmluYWxWYXJpYWJsZUJvdW5kKFR5cGVWYXJpYWJsZUJpbmRpbmcgdHlw
ZVZhcmlhYmxlLCBUeXBlUmVmZXJlbmNlIHQKIAlpZiAoc2V2ZXJpdHkgPT0gUHJvYmxlbVNldmVy
aXRpZXMuSWdub3JlKSByZXR1cm47CiAJdGhpcy5oYW5kbGUoCiAJCUlQcm9ibGVtLkZpbmFsQm91
bmRGb3JUeXBlVmFyaWFibGUsCi0JCW5ldyBTdHJpbmdbXSB7IG5ldyBTdHJpbmcodHlwZVZhcmlh
YmxlLnNvdXJjZU5hbWUpLCBuZXcgU3RyaW5nKHR5cGVSZWYucmVzb2x2ZWRUeXBlLnJlYWRhYmxl
TmFtZSgpKX0sCi0JCW5ldyBTdHJpbmdbXSB7IG5ldyBTdHJpbmcodHlwZVZhcmlhYmxlLnNvdXJj
ZU5hbWUpLCBuZXcgU3RyaW5nKHR5cGVSZWYucmVzb2x2ZWRUeXBlLnNob3J0UmVhZGFibGVOYW1l
KCkpfSwKKwkJbmV3IFN0cmluZ1tdIHsgbmV3IFN0cmluZyh0eXBlVmFyaWFibGUuc291cmNlTmFt
ZSgpKSwgbmV3IFN0cmluZyh0eXBlUmVmLnJlc29sdmVkVHlwZS5yZWFkYWJsZU5hbWUoKSl9LAor
CQluZXcgU3RyaW5nW10geyBuZXcgU3RyaW5nKHR5cGVWYXJpYWJsZS5zb3VyY2VOYW1lKCkpLCBu
ZXcgU3RyaW5nKHR5cGVSZWYucmVzb2x2ZWRUeXBlLnNob3J0UmVhZGFibGVOYW1lKCkpfSwKIAkJ
c2V2ZXJpdHksCiAJCXR5cGVSZWYuc291cmNlU3RhcnQsCiAJCXR5cGVSZWYuc291cmNlRW5kKTsK
QEAgLTM1NzksNyArMzU3OSw3IEBAIHB1YmxpYyB2b2lkIGludmFsaWRDb25zdHJ1Y3RvcihTdGF0
ZW1lbnQgc3RhdGVtZW50LCBNZXRob2RCaW5kaW5nIHRhcmdldENvbnN0cnVjCiAJCQkJICAgICAg
ICBuZXcgU3RyaW5nKHNob3duQ29uc3RydWN0b3IuZGVjbGFyaW5nQ2xhc3MucmVhZGFibGVOYW1l
KCkpLAogCQkJCSAgICAgICAgdHlwZXNBc1N0cmluZyhpbnZvY2F0aW9uQXJndW1lbnRzLCBmYWxz
ZSksCiAJCQkJICAgICAgICBuZXcgU3RyaW5nKGluZmVycmVkVHlwZUFyZ3VtZW50LnJlYWRhYmxl
TmFtZSgpKSwKLQkJCQkgICAgICAgIG5ldyBTdHJpbmcodHlwZVBhcmFtZXRlci5zb3VyY2VOYW1l
KSwKKwkJCQkgICAgICAgIG5ldyBTdHJpbmcodHlwZVBhcmFtZXRlci5zb3VyY2VOYW1lKCkpLAog
CQkJCSAgICAgICAgcGFyYW1ldGVyQm91bmRBc1N0cmluZyh0eXBlUGFyYW1ldGVyLCBmYWxzZSkg
fSwKIAkJCQluZXcgU3RyaW5nW10gewogCQkJCSAgICAgICAgbmV3IFN0cmluZyhzaG93bkNvbnN0
cnVjdG9yLmRlY2xhcmluZ0NsYXNzLnNvdXJjZU5hbWUoKSksCkBAIC0zNTg3LDcgKzM1ODcsNyBA
QCBwdWJsaWMgdm9pZCBpbnZhbGlkQ29uc3RydWN0b3IoU3RhdGVtZW50IHN0YXRlbWVudCwgTWV0
aG9kQmluZGluZyB0YXJnZXRDb25zdHJ1YwogCQkJCSAgICAgICAgbmV3IFN0cmluZyhzaG93bkNv
bnN0cnVjdG9yLmRlY2xhcmluZ0NsYXNzLnNob3J0UmVhZGFibGVOYW1lKCkpLAogCQkJCSAgICAg
ICAgdHlwZXNBc1N0cmluZyhpbnZvY2F0aW9uQXJndW1lbnRzLCB0cnVlKSwKIAkJCQkgICAgICAg
IG5ldyBTdHJpbmcoaW5mZXJyZWRUeXBlQXJndW1lbnQuc2hvcnRSZWFkYWJsZU5hbWUoKSksCi0J
CQkJICAgICAgICBuZXcgU3RyaW5nKHR5cGVQYXJhbWV0ZXIuc291cmNlTmFtZSksCisJCQkJICAg
ICAgICBuZXcgU3RyaW5nKHR5cGVQYXJhbWV0ZXIuc291cmNlTmFtZSgpKSwKIAkJCQkgICAgICAg
IHBhcmFtZXRlckJvdW5kQXNTdHJpbmcodHlwZVBhcmFtZXRlciwgdHJ1ZSkgfSwKIAkJCQlzb3Vy
Y2VTdGFydCwKIAkJCQlzb3VyY2VFbmQpOwpAQCAtNDEyNyw3ICs0MTI3LDcgQEAgcHVibGljIHZv
aWQgaW52YWxpZE1ldGhvZChNZXNzYWdlU2VuZCBtZXNzYWdlU2VuZCwgTWV0aG9kQmluZGluZyBt
ZXRob2QpIHsKIAkJCQkgICAgICAgIG5ldyBTdHJpbmcoc2hvd25NZXRob2QuZGVjbGFyaW5nQ2xh
c3MucmVhZGFibGVOYW1lKCkpLAogCQkJCSAgICAgICAgdHlwZXNBc1N0cmluZyhpbnZvY2F0aW9u
QXJndW1lbnRzLCBmYWxzZSksCiAJCQkJICAgICAgICBuZXcgU3RyaW5nKGluZmVycmVkVHlwZUFy
Z3VtZW50LnJlYWRhYmxlTmFtZSgpKSwKLQkJCQkgICAgICAgIG5ldyBTdHJpbmcodHlwZVBhcmFt
ZXRlci5zb3VyY2VOYW1lKSwKKwkJCQkgICAgICAgIG5ldyBTdHJpbmcodHlwZVBhcmFtZXRlci5z
b3VyY2VOYW1lKCkpLAogCQkJCSAgICAgICAgcGFyYW1ldGVyQm91bmRBc1N0cmluZyh0eXBlUGFy
YW1ldGVyLCBmYWxzZSkgfSwKIAkJCQluZXcgU3RyaW5nW10gewogCQkJCSAgICAgICAgbmV3IFN0
cmluZyhzaG93bk1ldGhvZC5zZWxlY3RvciksCkBAIC00MTM1LDcgKzQxMzUsNyBAQCBwdWJsaWMg
dm9pZCBpbnZhbGlkTWV0aG9kKE1lc3NhZ2VTZW5kIG1lc3NhZ2VTZW5kLCBNZXRob2RCaW5kaW5n
IG1ldGhvZCkgewogCQkJCSAgICAgICAgbmV3IFN0cmluZyhzaG93bk1ldGhvZC5kZWNsYXJpbmdD
bGFzcy5zaG9ydFJlYWRhYmxlTmFtZSgpKSwKIAkJCQkgICAgICAgIHR5cGVzQXNTdHJpbmcoaW52
b2NhdGlvbkFyZ3VtZW50cywgdHJ1ZSksCiAJCQkJICAgICAgICBuZXcgU3RyaW5nKGluZmVycmVk
VHlwZUFyZ3VtZW50LnNob3J0UmVhZGFibGVOYW1lKCkpLAotCQkJCSAgICAgICAgbmV3IFN0cmlu
Zyh0eXBlUGFyYW1ldGVyLnNvdXJjZU5hbWUpLAorCQkJCSAgICAgICAgbmV3IFN0cmluZyh0eXBl
UGFyYW1ldGVyLnNvdXJjZU5hbWUoKSksCiAJCQkJICAgICAgICBwYXJhbWV0ZXJCb3VuZEFzU3Ry
aW5nKHR5cGVQYXJhbWV0ZXIsIHRydWUpIH0sCiAJCQkJKGludCkgKG1lc3NhZ2VTZW5kLm5hbWVT
b3VyY2VQb3NpdGlvbiA+Pj4gMzIpLAogCQkJCShpbnQpIG1lc3NhZ2VTZW5kLm5hbWVTb3VyY2VQ
b3NpdGlvbik7CkBAIC00OTU2LDcgKzQ5NTYsNyBAQCBwdWJsaWMgdm9pZCBqYXZhZG9jSW52YWxp
ZENvbnN0cnVjdG9yKFN0YXRlbWVudCBzdGF0ZW1lbnQsIE1ldGhvZEJpbmRpbmcgdGFyZ2V0Qwog
CQkJCSAgICAgICAgbmV3IFN0cmluZyhzaG93bkNvbnN0cnVjdG9yLmRlY2xhcmluZ0NsYXNzLnJl
YWRhYmxlTmFtZSgpKSwKIAkJCQkgICAgICAgIHR5cGVzQXNTdHJpbmcoaW52b2NhdGlvbkFyZ3Vt
ZW50cywgZmFsc2UpLAogCQkJCSAgICAgICAgbmV3IFN0cmluZyhpbmZlcnJlZFR5cGVBcmd1bWVu
dC5yZWFkYWJsZU5hbWUoKSksCi0JCQkJICAgICAgICBuZXcgU3RyaW5nKHR5cGVQYXJhbWV0ZXIu
c291cmNlTmFtZSksCisJCQkJICAgICAgICBuZXcgU3RyaW5nKHR5cGVQYXJhbWV0ZXIuc291cmNl
TmFtZSgpKSwKIAkJCQkgICAgICAgIHBhcmFtZXRlckJvdW5kQXNTdHJpbmcodHlwZVBhcmFtZXRl
ciwgZmFsc2UpIH0sCiAJCQkJbmV3IFN0cmluZ1tdIHsKIAkJCQkgICAgICAgIG5ldyBTdHJpbmco
c2hvd25Db25zdHJ1Y3Rvci5kZWNsYXJpbmdDbGFzcy5zb3VyY2VOYW1lKCkpLApAQCAtNDk2NCw3
ICs0OTY0LDcgQEAgcHVibGljIHZvaWQgamF2YWRvY0ludmFsaWRDb25zdHJ1Y3RvcihTdGF0ZW1l
bnQgc3RhdGVtZW50LCBNZXRob2RCaW5kaW5nIHRhcmdldEMKIAkJCQkgICAgICAgIG5ldyBTdHJp
bmcoc2hvd25Db25zdHJ1Y3Rvci5kZWNsYXJpbmdDbGFzcy5zaG9ydFJlYWRhYmxlTmFtZSgpKSwK
IAkJCQkgICAgICAgIHR5cGVzQXNTdHJpbmcoaW52b2NhdGlvbkFyZ3VtZW50cywgdHJ1ZSksCiAJ
CQkJICAgICAgICBuZXcgU3RyaW5nKGluZmVycmVkVHlwZUFyZ3VtZW50LnNob3J0UmVhZGFibGVO
YW1lKCkpLAotCQkJCSAgICAgICAgbmV3IFN0cmluZyh0eXBlUGFyYW1ldGVyLnNvdXJjZU5hbWUp
LAorCQkJCSAgICAgICAgbmV3IFN0cmluZyh0eXBlUGFyYW1ldGVyLnNvdXJjZU5hbWUoKSksCiAJ
CQkJICAgICAgICBwYXJhbWV0ZXJCb3VuZEFzU3RyaW5nKHR5cGVQYXJhbWV0ZXIsIHRydWUpIH0s
CiAJCQkJc2V2ZXJpdHksCiAJCQkJc291cmNlU3RhcnQsCkBAIC01MTg4LDcgKzUxODgsNyBAQCBw
dWJsaWMgdm9pZCBqYXZhZG9jSW52YWxpZE1ldGhvZChNZXNzYWdlU2VuZCBtZXNzYWdlU2VuZCwg
TWV0aG9kQmluZGluZyBtZXRob2QsCiAJCQkJICAgICAgICBuZXcgU3RyaW5nKHNob3duTWV0aG9k
LmRlY2xhcmluZ0NsYXNzLnJlYWRhYmxlTmFtZSgpKSwKIAkJCQkgICAgICAgIHR5cGVzQXNTdHJp
bmcoaW52b2NhdGlvbkFyZ3VtZW50cywgZmFsc2UpLAogCQkJCSAgICAgICAgbmV3IFN0cmluZyhp
bmZlcnJlZFR5cGVBcmd1bWVudC5yZWFkYWJsZU5hbWUoKSksCi0JCQkJICAgICAgICBuZXcgU3Ry
aW5nKHR5cGVQYXJhbWV0ZXIuc291cmNlTmFtZSksCisJCQkJICAgICAgICBuZXcgU3RyaW5nKHR5
cGVQYXJhbWV0ZXIuc291cmNlTmFtZSgpKSwKIAkJCQkgICAgICAgIHBhcmFtZXRlckJvdW5kQXNT
dHJpbmcodHlwZVBhcmFtZXRlciwgZmFsc2UpIH0sCiAJCQkJbmV3IFN0cmluZ1tdIHsKIAkJCQkg
ICAgICAgIG5ldyBTdHJpbmcoc2hvd25NZXRob2Quc2VsZWN0b3IpLApAQCAtNTE5Niw3ICs1MTk2
LDcgQEAgcHVibGljIHZvaWQgamF2YWRvY0ludmFsaWRNZXRob2QoTWVzc2FnZVNlbmQgbWVzc2Fn
ZVNlbmQsIE1ldGhvZEJpbmRpbmcgbWV0aG9kLAogCQkJCSAgICAgICAgbmV3IFN0cmluZyhzaG93
bk1ldGhvZC5kZWNsYXJpbmdDbGFzcy5zaG9ydFJlYWRhYmxlTmFtZSgpKSwKIAkJCQkgICAgICAg
IHR5cGVzQXNTdHJpbmcoaW52b2NhdGlvbkFyZ3VtZW50cywgdHJ1ZSksCiAJCQkJICAgICAgICBu
ZXcgU3RyaW5nKGluZmVycmVkVHlwZUFyZ3VtZW50LnNob3J0UmVhZGFibGVOYW1lKCkpLAotCQkJ
CSAgICAgICAgbmV3IFN0cmluZyh0eXBlUGFyYW1ldGVyLnNvdXJjZU5hbWUpLAorCQkJCSAgICAg
ICAgbmV3IFN0cmluZyh0eXBlUGFyYW1ldGVyLnNvdXJjZU5hbWUoKSksCiAJCQkJICAgICAgICBw
YXJhbWV0ZXJCb3VuZEFzU3RyaW5nKHR5cGVQYXJhbWV0ZXIsIHRydWUpIH0sCiAJCQkJc2V2ZXJp
dHksCiAJCQkJKGludCkgKG1lc3NhZ2VTZW5kLm5hbWVTb3VyY2VQb3NpdGlvbiA+Pj4gMzIpLApA
QCAtNzg2MSw4ICs3ODYxLDggQEAgcHVibGljIHZvaWQgdHlwZU1pc21hdGNoRXJyb3IoVHlwZUJp
bmRpbmcgdHlwZUFyZ3VtZW50LCBUeXBlVmFyaWFibGVCaW5kaW5nIHR5cGUKIAlpZiAobG9jYXRp
b24gPT0gbnVsbCkgeyAvLyBiaW5hcnkgY2FzZQogCQl0aGlzLmhhbmRsZSgKIAkJCUlQcm9ibGVt
LlR5cGVBcmd1bWVudE1pc21hdGNoLAotCQkJbmV3IFN0cmluZ1tdIHsgbmV3IFN0cmluZyh0eXBl
QXJndW1lbnQucmVhZGFibGVOYW1lKCkpLCBuZXcgU3RyaW5nKGdlbmVyaWNUeXBlLnJlYWRhYmxl
TmFtZSgpKSwgbmV3IFN0cmluZyh0eXBlUGFyYW1ldGVyLnNvdXJjZU5hbWUpLCBwYXJhbWV0ZXJC
b3VuZEFzU3RyaW5nKHR5cGVQYXJhbWV0ZXIsIGZhbHNlKSB9LAotCQkJbmV3IFN0cmluZ1tdIHsg
bmV3IFN0cmluZyh0eXBlQXJndW1lbnQuc2hvcnRSZWFkYWJsZU5hbWUoKSksIG5ldyBTdHJpbmco
Z2VuZXJpY1R5cGUuc2hvcnRSZWFkYWJsZU5hbWUoKSksIG5ldyBTdHJpbmcodHlwZVBhcmFtZXRl
ci5zb3VyY2VOYW1lKSwgcGFyYW1ldGVyQm91bmRBc1N0cmluZyh0eXBlUGFyYW1ldGVyLCB0cnVl
KSB9LAorCQkJbmV3IFN0cmluZ1tdIHsgbmV3IFN0cmluZyh0eXBlQXJndW1lbnQucmVhZGFibGVO
YW1lKCkpLCBuZXcgU3RyaW5nKGdlbmVyaWNUeXBlLnJlYWRhYmxlTmFtZSgpKSwgbmV3IFN0cmlu
Zyh0eXBlUGFyYW1ldGVyLnNvdXJjZU5hbWUoKSksIHBhcmFtZXRlckJvdW5kQXNTdHJpbmcodHlw
ZVBhcmFtZXRlciwgZmFsc2UpIH0sCisJCQluZXcgU3RyaW5nW10geyBuZXcgU3RyaW5nKHR5cGVB
cmd1bWVudC5zaG9ydFJlYWRhYmxlTmFtZSgpKSwgbmV3IFN0cmluZyhnZW5lcmljVHlwZS5zaG9y
dFJlYWRhYmxlTmFtZSgpKSwgbmV3IFN0cmluZyh0eXBlUGFyYW1ldGVyLnNvdXJjZU5hbWUoKSks
IHBhcmFtZXRlckJvdW5kQXNTdHJpbmcodHlwZVBhcmFtZXRlciwgdHJ1ZSkgfSwKIAkJCVByb2Js
ZW1TZXZlcml0aWVzLkFib3J0Q29tcGlsYXRpb24gfCBQcm9ibGVtU2V2ZXJpdGllcy5FcnJvciB8
IFByb2JsZW1TZXZlcml0aWVzLkZhdGFsLAogCQkJMCwKIAkJCTApOwpAQCAtNzg3MCw4ICs3ODcw
LDggQEAgcHVibGljIHZvaWQgdHlwZU1pc21hdGNoRXJyb3IoVHlwZUJpbmRpbmcgdHlwZUFyZ3Vt
ZW50LCBUeXBlVmFyaWFibGVCaW5kaW5nIHR5cGUKICAgICB9CiAJdGhpcy5oYW5kbGUoCiAJCUlQ
cm9ibGVtLlR5cGVBcmd1bWVudE1pc21hdGNoLAotCQluZXcgU3RyaW5nW10geyBuZXcgU3RyaW5n
KHR5cGVBcmd1bWVudC5yZWFkYWJsZU5hbWUoKSksIG5ldyBTdHJpbmcoZ2VuZXJpY1R5cGUucmVh
ZGFibGVOYW1lKCkpLCBuZXcgU3RyaW5nKHR5cGVQYXJhbWV0ZXIuc291cmNlTmFtZSksIHBhcmFt
ZXRlckJvdW5kQXNTdHJpbmcodHlwZVBhcmFtZXRlciwgZmFsc2UpIH0sCi0JCW5ldyBTdHJpbmdb
XSB7IG5ldyBTdHJpbmcodHlwZUFyZ3VtZW50LnNob3J0UmVhZGFibGVOYW1lKCkpLCBuZXcgU3Ry
aW5nKGdlbmVyaWNUeXBlLnNob3J0UmVhZGFibGVOYW1lKCkpLCBuZXcgU3RyaW5nKHR5cGVQYXJh
bWV0ZXIuc291cmNlTmFtZSksIHBhcmFtZXRlckJvdW5kQXNTdHJpbmcodHlwZVBhcmFtZXRlciwg
dHJ1ZSkgfSwKKwkJbmV3IFN0cmluZ1tdIHsgbmV3IFN0cmluZyh0eXBlQXJndW1lbnQucmVhZGFi
bGVOYW1lKCkpLCBuZXcgU3RyaW5nKGdlbmVyaWNUeXBlLnJlYWRhYmxlTmFtZSgpKSwgbmV3IFN0
cmluZyh0eXBlUGFyYW1ldGVyLnNvdXJjZU5hbWUoKSksIHBhcmFtZXRlckJvdW5kQXNTdHJpbmco
dHlwZVBhcmFtZXRlciwgZmFsc2UpIH0sCisJCW5ldyBTdHJpbmdbXSB7IG5ldyBTdHJpbmcodHlw
ZUFyZ3VtZW50LnNob3J0UmVhZGFibGVOYW1lKCkpLCBuZXcgU3RyaW5nKGdlbmVyaWNUeXBlLnNo
b3J0UmVhZGFibGVOYW1lKCkpLCBuZXcgU3RyaW5nKHR5cGVQYXJhbWV0ZXIuc291cmNlTmFtZSgp
KSwgcGFyYW1ldGVyQm91bmRBc1N0cmluZyh0eXBlUGFyYW1ldGVyLCB0cnVlKSB9LAogCQlsb2Nh
dGlvbi5zb3VyY2VTdGFydCwKIAkJbG9jYXRpb24uc291cmNlRW5kKTsKIH0K
</data>
<flag name="review"
          id="62142"
          type_id="6"
          status="?"
          setter="shankhba"
    />
          </attachment>
      

    </bug>

</bugzilla>