<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>434118</bug_id>
          
          <creation_ts>2014-05-05 09:35:00 -0400</creation_ts>
          <short_desc>[1.8][compiler] Compilation error on generic capture/type inference</short_desc>
          <delta_ts>2014-10-28 04:49:42 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>DUPLICATE</resolution>
          <dup_id>444334</dup_id>
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.5 M3</target_milestone>
          
          <blocked>428061</blocked>
    
    <blocked>434115</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Frank Pavageau">pavageau</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>jarthana</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2396851</commentid>
    <comment_count>0</comment_count>
    <who name="Frank Pavageau">pavageau</who>
    <bug_when>2014-05-05 09:35:34 -0400</bug_when>
    <thetext>I ran into this problem using AspectJ 1.8, but it can also be reproduced by calling ECJ directly, so it&apos;s not introduced by AspectJ&apos;s usage of ECJ.

Consider the following class:
public class WildcardCapture {
    public Object convertFails(Class&lt;?&gt; clazz, String value) {
        return Enum.valueOf(clazz.asSubclass(Enum.class), value);
    }

    public Object convertCompiles(Class&lt;?&gt; clazz, String value) {
        return Enum.valueOf(clazz.&lt;Enum&gt;asSubclass(Enum.class), value);
    }

    public Object convertCompiles2(Class&lt;?&gt; clazz, String value) {
        Class&lt;? extends Enum&gt; enumType = clazz.asSubclass(Enum.class);
        return Enum.valueOf(enumType, value);
    }
}

The first method fails to compile, the other two have no problem (by either specifying a second type the generic type, or extracting the variable).

Using the most recent deployment of ECJ in Maven Central, I get:
$ java -jar ~/.m2/repository/org/eclipse/jdt/core/compiler/ecj/P20140317-1600/ecj-P20140317-1600.jar -1.8 -deprecation WildcardCapture.java 
----------
1. ERROR in /home/pavageau/devs/aspectj/wildcard-capture/src/main/java/WildcardCapture.java (at line 3)
	return Enum.valueOf(clazz.asSubclass(Enum.class), value);
	            ^^^^^^^
The method valueOf(Class&lt;T&gt;, String) in the type Enum is not applicable for the arguments (Class&lt;capture#2-of ? extends Enum&gt;, String)
----------
2. WARNING in /home/pavageau/devs/aspectj/wildcard-capture/src/main/java/WildcardCapture.java (at line 7)
	return Enum.valueOf(clazz.&lt;Enum&gt;asSubclass(Enum.class), value);
	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Type safety: Unchecked invocation valueOf(Class&lt;capture#4-of ? extends Enum&gt;, String) of the generic method valueOf(Class&lt;T&gt;, String) of type Enum
----------
3. WARNING in /home/pavageau/devs/aspectj/wildcard-capture/src/main/java/WildcardCapture.java (at line 7)
	return Enum.valueOf(clazz.&lt;Enum&gt;asSubclass(Enum.class), value);
	                           ^^^^
Enum is a raw type. References to generic type Enum&lt;E&gt; should be parameterized
----------
4. WARNING in /home/pavageau/devs/aspectj/wildcard-capture/src/main/java/WildcardCapture.java (at line 11)
	Class&lt;? extends Enum&gt; enumType = clazz.asSubclass(Enum.class);
	                ^^^^
Enum is a raw type. References to generic type Enum&lt;E&gt; should be parameterized
----------
5. WARNING in /home/pavageau/devs/aspectj/wildcard-capture/src/main/java/WildcardCapture.java (at line 12)
	return Enum.valueOf(enumType, value);
	       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Type safety: Unchecked invocation valueOf(Class&lt;capture#7-of ? extends Enum&gt;, String) of the generic method valueOf(Class&lt;T&gt;, String) of type Enum
----------
5 problems (1 error, 4 warnings)


Note that this compiles fine using javac from Oracle JDK 6, 7 or 8, and AspectJ 1.6 and 1.7 also compile it (with matching versions of ECJ embeded).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2397804</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-05-06 21:50:34 -0400</bug_when>
    <thetext>Thanks for taking a look Stephan,</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2434421</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-07-31 16:36:41 -0400</bug_when>
    <thetext>In fact, it&apos;s type inference that correctly fails due to this constraint:

  java.lang.Enum &lt;: java.lang.Enum&lt;T#0&gt;

Next, if I disable our javac bug-compatibility flag SIMULATE_BUG_JDK_8026527 all three variants are rejected (as per JLS).

If instead, I flip the detail of the former, ARGUMENT_CONSTRAINTS_ARE_SOFT, all three variants are accepted.

Ergo: we could resolve either way, but each of these bug compatibility flags has already been fine tuned for best similarity with buggy javac.

I have no hope that we can improve here, before javac has cleaned up that cluster of known bugs.


Note, that at -1.7 all compilers are known to illegally admit constraints like the above. Hence, it comes to no surprise that ecj -1.7, too, accepts the program -- erroneously.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2453447</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-18 00:06:30 -0400</bug_when>
    <thetext>Targetting for 4.5 M3. While ATM ownership is left unchanged, Stephan is under
time constraint during this window, so I will likely take this over or assign to someone else to load balance later on.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2468000</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-20 08:33:53 -0400</bug_when>
    <thetext>This is simply a variant of the issue discussed at https://bugs.eclipse.org/bugs/show_bug.cgi?id=430987#c13

Is Class&lt;? extends Enum#RAW&gt; asSubclass(Class&lt;Enum#RAW&gt;) a poly expression ?

I think not since it does not mention in its return type any type variables.

But to reach past the jlO substitutions, we reach into the generic method and
get misled.

But the fix at that bug does not cover this case as I am just checking
for return type being raw and Class&lt;? extends Enum#RAW&gt; is not raw in itself.

I&apos;ll see how I can extend that.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2468022</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-20 09:03:46 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #4)
&gt; This is simply a variant of the issue discussed at
&gt; https://bugs.eclipse.org/bugs/show_bug.cgi?id=430987#c13
&gt; 
&gt; Is Class&lt;? extends Enum#RAW&gt; asSubclass(Class&lt;Enum#RAW&gt;) a poly expression ?
&gt; 
&gt; I think not since it does not mention in its return type any type variables.
&gt; 
&gt; But to reach past the jlO substitutions, we reach into the generic method and
&gt; get misled.

Rereading the definition:

The method to be invoked, as determined by the following subsections, is 
generic (8.4.4) and has a return type that mentions at least one of the 
method&apos;s type parameters

looks straightforward enough that we should reach into the generic method
(not just because we could find jlO instantiations in the PGMB that would
mask type variable mention) by definition.

But javac must either be making exceptions when type arguments are seen to
be raw types or using some form of unofficial soft constraints.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472681</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-27 18:35:33 -0400</bug_when>
    <thetext>Bug went away with the fix for bug 444334.

Released a junit here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=736a3352edee05c04aa96eb4323328cfa8fdbdd5

*** This bug has been marked as a duplicate of bug 444334 ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472789</commentid>
    <comment_count>7</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-10-28 04:49:42 -0400</bug_when>
    <thetext>Verified for 4.5 M3 using I20141027-2000 build</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>