<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>412203</bug_id>
          
          <creation_ts>2013-07-03 09:10:00 -0400</creation_ts>
          <short_desc>[compiler] Internal compiler error: java.lang.IllegalArgumentException: info cannot be null</short_desc>
          <delta_ts>2013-08-29 13:40:41 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard>To be verified for 4.4 M2</status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.3.1</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Jan Reidemeister">eclipse</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>dbirkefeld</cc>
    
    <cc>jarthana</cc>
    
    <cc>Olivier_Thomann</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="58861"
          type_id="1"
          status="+"
          setter="jarthana"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2280169</commentid>
    <comment_count>0</comment_count>
      <attachid>233034</attachid>
    <who name="Jan Reidemeister">eclipse</who>
    <bug_when>2013-07-03 09:10:15 -0400</bug_when>
    <thetext>Created attachment 233034
Source Code

Build 20130614-0229

Create a new project with the attached source code and enable the annotation based null analysis and suppress optional errors with @SuppressWarnings. IllegalArgumentException is thrown in &quot;XYZManagementDialog&quot; (both in incremental and clean build).

Disabling the null analysis or removing one of the instance fields resolves the error. I have other dialogs with the same hierarchy and more or less the same design where the problem does not occur so it may be caused by some sprecific field pattern.

Stacktrace:
!ENTRY org.eclipse.jdt.ui 4 2 2013-07-03 14:45:58.710
!MESSAGE Problems occurred when invoking code from plug-in: &quot;org.eclipse.jdt.ui&quot;.
!STACK 0
java.lang.IllegalArgumentException: info cannot be null
	at org.eclipse.jdt.internal.compiler.codegen.StackMapFrame.addStackItem(StackMapFrame.java:81)
	at org.eclipse.jdt.internal.compiler.ClassFile.traverse(ClassFile.java:4561)
	at org.eclipse.jdt.internal.compiler.ClassFile.generateStackMapTableAttribute(ClassFile.java:3375)
	at org.eclipse.jdt.internal.compiler.ClassFile.completeCodeAttribute(ClassFile.java:1190)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.generateCode(AbstractMethodDeclaration.java:296)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.generateCode(AbstractMethodDeclaration.java:228)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.generateCode(TypeDeclaration.java:562)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.generateCode(TypeDeclaration.java:631)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.generateCode(CompilationUnitDeclaration.java:360)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:1206)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:685)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1181)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2280280</commentid>
    <comment_count>1</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2013-07-03 11:44:19 -0400</bug_when>
    <thetext>Reproduced with master contents. My guess would be that we are reaching code generation when we should not.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2280294</commentid>
    <comment_count>2</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2013-07-03 12:38:36 -0400</bug_when>
    <thetext>The problem seems to come from the flow analysis:

final java.lang.Object selector[pos: 1][id:0][pc: 8-67]
LinkedList&lt;java.lang.Character&gt; invalidCharactersList[pos: 2][id:1][pc: 40-67]
char[] invalidCharacters[pos: 3][id:2][pc: 34-67]
int i[pos: 4][id:3][pc: 37-66]
dialog.XYZManagementDialog this[pos: unused][id:0][pc: 0-67]

  // Method descriptor #30 ()V
  // Stack: 4, Locals: 5
  private void init();
     0  new Object [37]
     3  dup
     4  invokespecial Object() [39]
     7  astore_1 [selector]
     8  aload_0 [this]
     9  new JTextField [41]
    12  dup
    13  invokespecial JTextField() [43]
    16  putfield XYZManagementDialog.name : JTextField [44]
    19  new LinkedList [48]
    22  dup
    23  invokespecial LinkedList() [50]
    26  astore_2
    27  aload_2
    28  invokevirtual LinkedList.size() : int [51]
    31  newarray char [5]
    33  astore_3 [invalidCharacters]
    34  iconst_0
    35  istore 4 [i]
    37  goto 59
    40  aload_3 [invalidCharacters]
    41  iload 4 [i]
    43  aload_2 [invalidCharactersList]
    44  iload 4 [i]
    46  invokevirtual LinkedList.get(int) : Object [55]
    49  checkcast Character [59]
    52  invokevirtual Character.charValue() : char [61]
    55  castore
    56  iinc 4 1 [i]
    59  iload 4 [i]
    61  aload_3 [invalidCharacters]
    62  arraylength
    63  if_icmplt 40
    66  return
      Line numbers:
        [pc: 0, line: 29]
        [pc: 8, line: 30]
        [pc: 19, line: 31]
        [pc: 27, line: 32]
        [pc: 34, line: 33]
        [pc: 40, line: 34]
        [pc: 56, line: 33]
        [pc: 66, line: 36]
      Local variable table:
        [pc: 0, pc: 67] local: this index: 0 type: XYZManagementDialog
        [pc: 8, pc: 67] local: selector index: 1 type: Object
        [pc: 40, pc: 67] local: invalidCharactersList index: 2 type: LinkedList
        [pc: 34, pc: 67] local: invalidCharacters index: 3 type: char[]
        [pc: 37, pc: 66] local: i index: 4 type: int
      Local variable type table:
        [pc: 40, pc: 67] local: invalidCharactersList index: 2 type: Character&gt;

As you can see, the initialization range for the local variable &quot;invalidCharactersList &quot; is clearly wrong. It should start in pc 27, not 40.
I tried to debug it more and for some reason in org.eclipse.jdt.internal.compiler.ast.LocalDeclaration line 84:
The bit FirstAssignmentToLocal is not set for this local which means the initialization start PC is not recorded.
Stephan, you might want to take a look.
I believe that once the initialization range is fixed, the code generation should work as expected.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2280333</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-07-03 13:52:50 -0400</bug_when>
    <thetext>ack</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2281358</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-07-06 16:16:29 -0400</bug_when>
    <thetext>Thanks for the example which is very will reduced to the relevant parts.
With yet a bit more experimentation I came up with the following version:

import java.util.LinkedList;

import org.eclipse.jdt.annotation.NonNull;

abstract class X1 {

	Object a, b, c, d, e, f;

	protected @NonNull Object name = new Object();
}

public class X2 extends X1 {

	Object w, x, y, z;

	Runnable runable = new Runnable () {
		public void run () {}
	};

	void init () {
		Object o1 = new Object ();
		this.name = new Object ();
		LinkedList&lt;Character&gt; l = new LinkedList&lt;&gt; ();
		char[] cs = new char[l.size ()];
		for (int i = 0; i &lt; cs.length; i++) {
			cs[i] = l.get (i).charValue ();
		}
		Object o2 = new Object();
	}
}

In this example every single item seems to be necessary to reproduce the bug.
E.g., we no longer need to suppress optional errors, the program in this shape
has none.

At this point the example is order sensitive, e.g., changing the order of fields
in X1 makes the bug disappear. Also changing the number of fields (either in X1
or in X2) makes it disappear, too. Apparently some index points into the wild.
To be continued.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2281373</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-07-07 09:20:09 -0400</bug_when>
    <thetext>Update: I could even remove most of the fields incl. &apos;runable&apos;.

The problem is: we are trying to do flow analysis (definite assignment) for
field &apos;name&apos; while analysing X2.init(). However, during analysis of X2 our
flow infos have no slot for any inherited fields, thus we were overwriting
the flow info of a local within init(). This is pretty bad and can cause just 
about any flow-related bug downstream.

This was incurred by including @NonNull field in an analysis similar to
final fields in order to report errors when a @NonNull field is not properly
initialized.

Fix is to simply exclude inherited @NonNull fields from this analysis.
Those have already been analysed in the context of their declaring class.

Tests are running as I&apos;m writing this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2281383</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-07-07 11:12:28 -0400</bug_when>
    <thetext>Tests &amp; fix have been released for 4.4 M1 via commit 1b815ceb49474185b2e7a556292026c81d6ba468.

I&apos;m proposing to backport this to 4.3.1, because:
- the damage is real and the only workaround I see is to disable annotation based
  null analysis (quite a big hammer)
- the problem has been introduced in 4.3 
  (though not a genuine regression, since null annotations on fields are new in 4.3).
- the fix is small / well localized</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2283173</commentid>
    <comment_count>7</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-07-11 03:17:38 -0400</bug_when>
    <thetext>(In reply to comment #6)
&gt; Tests &amp; fix have been released for 4.4 M1 via commit
&gt; 1b815ceb49474185b2e7a556292026c81d6ba468.

I will take a look at the fix for 4.3.1.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2284303</commentid>
    <comment_count>8</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-07-15 00:33:29 -0400</bug_when>
    <thetext>I have looked at the the fix and +1 for the fix.

Dani, I reckon this is a good candidate for 4.3.1.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2284397</commentid>
    <comment_count>9</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2013-07-15 07:21:43 -0400</bug_when>
    <thetext>(In reply to comment #8)
&gt; I have looked at the the fix and +1 for the fix.
&gt; 
&gt; Dani, I reckon this is a good candidate for 4.3.1.

I&apos;m fine backporting it. 

Stephan, please either attach a patch or a link to the commit you plan to put into 4.3.1. Jay, you then need add the review+ flag based on that.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2284407</commentid>
    <comment_count>10</comment_count>
    <who name="Jan Reidemeister">eclipse</who>
    <bug_when>2013-07-15 07:59:56 -0400</bug_when>
    <thetext>The original problematic source code compiles and runs fine in 4.4.0 (N20130714-2000).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2284507</commentid>
    <comment_count>11</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-07-15 11:18:05 -0400</bug_when>
    <thetext>(In reply to comment #9)
&gt; Stephan, please either attach a patch or a link to the commit you plan to
&gt; put into 4.3.1. Jay, you then need add the review+ flag based on that.

That would be:
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=1b815ceb49474185b2e7a556292026c81d6ba468

I just confirmed this can be cherry-picked in R4_3_maintenance without any issues and patch is fine.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2285366</commentid>
    <comment_count>12</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-07-17 04:12:40 -0400</bug_when>
    <thetext>Patch looks good and all tests passed. Pushed the fix for 4.3.1 on behalf of Stephan via commit:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=R4_3_maintenance&amp;id=001501313b8d383d57f3b797fccbc8abbe8277e0</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2297756</commentid>
    <comment_count>13</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-08-22 06:48:49 -0400</bug_when>
    <thetext>After cherry-pick to BETA_JAVA8 this patch caused issues (worked around by Jay, thanks).
I committed some cleanup to the branch via commit 901110738b530761a9230c7cdee9da8743b87763

- make getLibsWithNullAnnotations() configurable per sourceLevel to select the
  appropriate org.eclipse.jdt.annotation bundle (1.1.0 vs. 2.0.0)

- remove Jay&apos;s workaround (inline declaration of annotations)

- fix NullAnnotationTest.testBug413460() after the above:
  Protect more reporting by a check for FlowContext.HIDE_NULL_COMPARISON_WARNING_MASK
  (these tests now use type annotations when run at 1.8).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2297760</commentid>
    <comment_count>14</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-08-22 06:51:47 -0400</bug_when>
    <thetext>(In reply to comment #13)
&gt; After cherry-pick to BETA_JAVA8 this patch caused issues (worked around by
&gt; Jay, thanks).
&gt; I committed some cleanup to the branch via commit
&gt; 901110738b530761a9230c7cdee9da8743b87763

This looks perfect, thanks!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2298136</commentid>
    <comment_count>15</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-08-22 17:18:41 -0400</bug_when>
    <thetext>Adjusting whiteboard entry so this gets a review in Luna.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2300804</commentid>
    <comment_count>16</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-08-29 13:40:41 -0400</bug_when>
    <thetext>Verified for 4.3.1 with build M20130828-0800.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>233034</attachid>
            <date>2013-07-03 09:10:00 -0400</date>
            <delta_ts>2013-07-03 09:10:15 -0400</delta_ts>
            <desc>Source Code</desc>
            <filename>src.zip</filename>
            <type>application/x-zip-compressed</type>
            <size>3966</size>
            <attacher name="Jan Reidemeister">eclipse</attacher>
            
              <data encoding="base64">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
dsGtBpl3nn0AUEsBAj8AFAAAAAAAiHXjQgAAAAAAAAAAAAAAAAcAJAAAAAAAAAAQAAAAAAAAAGRp
YWxvZy8KACAAAAAAAAEAGAC6lRAH63fOAbqVEAfrd84BWqsPB+t3zgFQSwECPwAUAAAACACSdeNC
R1KNtM0AAABqAQAAGgAkAAAAAAAAACAAAAAlAAAAZGlhbG9nL0Fic3RyYWN0RGlhbG9nLmphdmEK
ACAAAAAAAAEAGACqDlsS63fOAWrSDwfrd84BatIPB+t3zgFQSwECPwAUAAAACACVdeNCOpQmx/gA
AADvAQAAJAAkAAAAAAAAACAAAAAqAQAAZGlhbG9nL0Fic3RyYWN0TWFuYWdlbWVudERpYWxvZy5q
YXZhCgAgAAAAAAABABgA+m8AFut3zgGKIBAH63fOAYogEAfrd84BUEsBAj8AFAAAAAgAOnXjQobS
l9jQAQAACQQAAB8AJAAAAAAAAAAgAAAAZAIAAGRpYWxvZy9YWVpNYW5hZ2VtZW50RGlhbG9nLmph
dmEKACAAAAAAAAEAGABIgtWw6nfOAapuEAfrd84Bqm4QB+t3zgFQSwECPwAUAAAAAACIdeNCAAAA
AAAAAAAAAAAABwAkAAAAAAAAABAAAABxBAAAdmVyaWZ5LwoAIAAAAAAAAQAYADpdDwfrd84BOl0P
B+t3zgGq/Q0H63fOAVBLAQI/ABQAAAAIAJp140IZVjz9iwAAAOYAAAAZACQAAAAAAAAAIAAAAJYE
AAB2ZXJpZnkvSW5wdXRWZXJpZmllci5qYXZhCgAgAAAAAAABABgACt5oG+t3zgHKSw4H63fOAcpL
Dgfrd84BUEsBAj8AFAAAAAgAoHXjQr9KmrAkAQAArAIAACMAJAAAAAAAAAAgAAAAWAUAAHZlcmlm
eS9KQ29tcG9uZW50SW5wdXRWZXJpZmllci5qYXZhCgAgAAAAAAABABgA6jDCIOt3zgHqmQ4H63fO
AeqZDgfrd84BUEsBAj8AFAAAAAgAm3XjQp3CU36zAAAAPQEAACcAJAAAAAAAAAAgAAAAvQYAAHZl
cmlmeS9KVGV4dENvbXBvbmVudElucHV0VmVyaWZpZXIuamF2YQoAIAAAAAAAAQAYAGoAKx3rd84B
+sAOB+t3zgH6wA4H63fOAVBLAQI/ABQAAAAIAJ1140Jei0np5wAAAPQBAAAtACQAAAAAAAAAIAAA
ALUHAAB2ZXJpZnkvU3RyaW5nSlRleHRDb21wb25lbnRJbnB1dFZlcmlmaWVyLmphdmEKACAAAAAA
AAEAGABqSBMf63fOAQroDgfrd84BCugOB+t3zgFQSwECPwAUAAAACAChdeNCUnhBMbkAAAAdAQAA
FAAkAAAAAAAAACAAAADnCAAAdmVyaWZ5L1ZlcmlmaWVyLmphdmEKACAAAAAAAAEAGADqM3ci63fO
ASo2Dwfrd84BKjYPB+t3zgFQSwECPwAUAAAACACjdeNCEulrBa8AAAAfAQAAGgAkAAAAAAAAACAA
AADSCQAAdmVyaWZ5L1ZlcmlmeUxpc3RlbmVyLmphdmEKACAAAAAAAAEAGADagC4k63fOATpdDwfr
d84BOl0PB+t3zgFQSwUGAAAAAAsACwCvBAAAuQoAAAAA
</data>

          </attachment>
      

    </bug>

</bugzilla>