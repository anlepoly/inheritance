<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>401487</bug_id>
          
          <creation_ts>2013-02-22 00:29:00 -0500</creation_ts>
          <short_desc>[1.8][assist] default modifier not proposed while completing modifiers in interfaces</short_desc>
          <delta_ts>2013-03-11 07:12:35 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>402079</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="ANIRBAN CHAKRABORTY">anchakrk</assigned_to>
          
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2220615</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-22 00:29:05 -0500</bug_when>
    <thetext>interface I {
	def&lt;CTRL+SPACE&gt;
}


For Java 8, we should propose default as a choice.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2220616</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-22 00:29:34 -0500</bug_when>
    <thetext>Anirban, thanks for following up.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2226012</commentid>
    <comment_count>2</comment_count>
      <attachid>227915</attachid>
    <who name="ANIRBAN CHAKRABORTY">anchakrk</who>
    <bug_when>2013-03-05 00:52:39 -0500</bug_when>
    <thetext>Created attachment 227915
Patch for &apos;default&apos; suggestion for interfaces in 1.8

Patch for &apos;default&apos; suggestion for interfaces in 1.8. Testcase is added to CompletionTest.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2226145</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-05 07:14:17 -0500</bug_when>
    <thetext>Patch looks heading in the right direction: Here are some review comments:

(1) As was pointed out in https://bugs.eclipse.org/bugs/show_bug.cgi?id=399770#c7, all files modified for Java 8 BETA branch should have the 
JCP disclaimer as part of the copyright - Both the modified files are
missing them.

(2) We should not propose default as a choice in the following location.
We do presently:

@interface A {  // @interface == annotation type declaration.
	de|
}

(3) testBug401487 sets compliance to 1.7 - why ? This is likely to be harmless
in this test, but it is needless and as such confusing. It could be set to 1.8 ?

(4) Please add more tests that show what happens when you complete inside
similar location in a class, annotation type, enumerations and inner interface.
Only in the last case we would expect default keyword to be proposed.

(5) Why is the instanceof check astNode instanceof CompletionOnFieldType 
required in completionOnFieldType ?

(6) findKeywordsForMember:

(a) remove the comment: &quot;// checking the following with null checks at every step :
		// if((astNode != null) &amp;&amp; ((CompletionOnFieldType) astNode).binding.declaringClass.isInterface() )&quot; - not useful.

(b) does this code block:

if((this.compilerOptions.sourceLevel &gt;= ClassFileConstants.JDK1_8) &amp;&amp;
  (astNode != null) &amp;&amp; 
   ((astNodeBinding = ((CompletionOnFieldType) astNode).binding) != null) &amp;&amp; 
   ((declaringClass = astNodeBinding.declaringClass) != null) &amp;&amp;
   declaringClass.isInterface() ) {
	keywords[count++] = Keywords.DEFAULT;
} 

really need those half a dozen extra pairs of () ? :)

Also is it better written as:

if (astNode instanceof CompletionOnFieldType &amp;&amp; 
               this.compilerOptions.sourceLevel &gt;= ClassFileConstants.JDK1_8) {
	FieldBinding astNodeBinding = ((CompletionOnFieldType) astNode).binding;
	ReferenceBinding declaringClass = astNodeBinding != null ? 
                                           astNodeBinding.declaringClass : null;
	if (declaringClass != null &amp;&amp; declaringClass.isInterface())
	    keywords[count++] = Keywords.DEFAULT;
}


This latter code block (a) pulls up the most important check first (b)
pushes the locals into a new block and removes them from outer scope where
they are irrelevant. (c) Guards the cast with an instanceof check rendering
it absolutely safe: In future if some other client calls this method with
a different ast node type, this code will not cause a ClassCastException.

(A point worth noting is that astNode instanceof CompletionOnFieldType
automatically ensures that astNode is not null. So no need to check for
astNode != null.)

Pleaase incorporate these suggestions, run the tests and post a fresh patch,
TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2226147</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-05 07:17:45 -0500</bug_when>
    <thetext>(In reply to comment #3)

&gt; Pleaase incorporate these suggestions, run the tests and post a fresh patch,
&gt; TIA.

Looking at how localized the changes are it should be enough to rerun just
completion tests, Thanks Anirban.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2228685</commentid>
    <comment_count>5</comment_count>
      <attachid>228175</attachid>
    <who name="ANIRBAN CHAKRABORTY">anchakrk</who>
    <bug_when>2013-03-11 02:57:17 -0400</bug_when>
    <thetext>Created attachment 228175
Patch after accommodating the review comments

Hello,
Attaching applicable, completion test clean patch which incorporates the review comments.
Thanks
Anirban</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2228796</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-11 07:12:35 -0400</bug_when>
    <thetext>Fix and tests released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=7dd940af8bfbaf46f5a69ec7b85437ba951f7d8e

Thanks Anirban,</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>227915</attachid>
            <date>2013-03-05 00:52:00 -0500</date>
            <delta_ts>2013-03-11 06:27:09 -0400</delta_ts>
            <desc>Patch for &apos;default&apos; suggestion for interfaces in 1.8</desc>
            <filename>bug401487_eclipse.jdt.core.patch</filename>
            <type>text/plain</type>
            <size>6225</size>
            <attacher name="ANIRBAN CHAKRABORTY">anchakrk</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9tb2RlbC9Db21wbGV0aW9uVGVzdHMuamF2YSBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9t
b2RlbC9Db21wbGV0aW9uVGVzdHMuamF2YQppbmRleCBhMDUwZmZlLi4yYTBiNDVhIDEwMDY0NAot
LS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0
L2NvcmUvdGVzdHMvbW9kZWwvQ29tcGxldGlvblRlc3RzLmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21vZGVs
L0NvbXBsZXRpb25UZXN0cy5qYXZhCkBAIC0xMDE5LDEwICsxMDE5LDExIEBACiAJc3VpdGUuYWRk
VGVzdChuZXcgQ29tcGxldGlvblRlc3RzKCJ0ZXN0QnVnMzUwNzY3IikpOwogCXN1aXRlLmFkZFRl
c3QobmV3IENvbXBsZXRpb25UZXN0cygidGVzdEJ1ZzM1MDc2N2IiKSk7CiAJc3VpdGUuYWRkVGVz
dChuZXcgQ29tcGxldGlvblRlc3RzKCJ0ZXN0QnVnMzUwNjUyIikpOwogCXN1aXRlLmFkZFRlc3Qo
bmV3IENvbXBsZXRpb25UZXN0cygidGVzdEJ1ZzM1MDY1MmIiKSk7CiAJc3VpdGUuYWRkVGVzdChu
ZXcgQ29tcGxldGlvblRlc3RzKCJ0ZXN0QnVnMzUwNjUyYyIpKTsKKwlzdWl0ZS5hZGRUZXN0KG5l
dyBDb21wbGV0aW9uVGVzdHMoInRlc3RCdWc0MDE0ODciKSk7CiAJc3VpdGUuYWRkVGVzdChuZXcg
Q29tcGxldGlvblRlc3RzKCJ0ZXN0QnVnMzUwNjUyZCIpKTsKIAlzdWl0ZS5hZGRUZXN0KG5ldyBD
b21wbGV0aW9uVGVzdHMoInRlc3RCdWczNTA2NTJlIikpOwogCXN1aXRlLmFkZFRlc3QobmV3IENv
bXBsZXRpb25UZXN0cygidGVzdEJ1ZzM1MDY1MmYiKSk7CiAJc3VpdGUuYWRkVGVzdChuZXcgQ29t
cGxldGlvblRlc3RzKCJ0ZXN0QnVnMzUwNjUyZyIpKTsKIAlzdWl0ZS5hZGRUZXN0KG5ldyBDb21w
bGV0aW9uVGVzdHMoInRlc3RCdWczNTA2NTJoIikpOwpAQCAtMjQ4MjAsMTAgKzI0ODIxLDQ1IEBA
CiAJCS8vIFJlc3RvcmUgY29tcGxpYW5jZSBzZXR0aW5ncy4KIAkJb3B0aW9ucy5wdXQoQ29tcGls
ZXJPcHRpb25zLk9QVElPTl9Db21wbGlhbmNlLCBzYXZlZE9wdGlvbkNvbXBsaWFuY2UpOwogCQlD
T01QTEVUSU9OX1BST0pFQ1Quc2V0T3B0aW9ucyhvcHRpb25zKTsJCiAJfQogfQorCisvLyBodHRw
czovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDAxNDg3CisvLyBCdWcg
NDAxNDg3IC0gWzEuOF1bYXNzaXN0XSBkZWZhdWx0IG1vZGlmaWVyIG5vdCBwcm9wb3NlZCB3aGls
ZSBjb21wbGV0aW5nIG1vZGlmaWVycyBpbiBpbnRlcmZhY2VzCitwdWJsaWMgdm9pZCB0ZXN0QnVn
NDAxNDg3KCkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbiB7CisJTWFwIG9wdGlvbnMgPSBDT01Q
TEVUSU9OX1BST0pFQ1QuZ2V0T3B0aW9ucyh0cnVlKTsKKwlPYmplY3Qgc2F2ZWRPcHRpb25Db21w
bGlhbmNlID0gb3B0aW9ucy5nZXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9Db21wbGlhbmNlKTsK
KwlPYmplY3Qgc2F2ZWRPcHRpb25Tb3VyY2UgPSBvcHRpb25zLmdldChDb21waWxlck9wdGlvbnMu
T1BUSU9OX1NvdXJjZSk7CisJdHJ5IHsKKwkJb3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9Q
VElPTl9Db21wbGlhbmNlLCBDb21waWxlck9wdGlvbnMuVkVSU0lPTl8xXzcpOworCQlvcHRpb25z
LnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1NvdXJjZSwgQ29tcGlsZXJPcHRpb25zLlZFUlNJ
T05fMV84KTsKKwkJQ09NUExFVElPTl9QUk9KRUNULnNldE9wdGlvbnMob3B0aW9ucyk7CisJCXRo
aXMud29ya2luZ0NvcGllcyA9IG5ldyBJQ29tcGlsYXRpb25Vbml0WzNdOworCQl0aGlzLndvcmtp
bmdDb3BpZXNbMF0gPSBnZXRXb3JraW5nQ29weSgKKwkJCSIvQ29tcGxldGlvbi9zcmMvdGVzdC9U
ZXN0LmphdmEiLAorCQkJInBhY2thZ2UgdGVzdDsiKworCQkJImludGVyZmFjZSBQIHsgXG4iICsK
KyAgICAgICAgICAgICIgICAgZGVmIiArCisJCQkifVxuIik7CisKKwkJQ29tcGxldGlvblRlc3Rz
UmVxdWVzdG9yMiByZXF1ZXN0b3IgPSBuZXcgQ29tcGxldGlvblRlc3RzUmVxdWVzdG9yMih0cnVl
KTsKKwkJU3RyaW5nIHN0ciA9IHRoaXMud29ya2luZ0NvcGllc1swXS5nZXRTb3VyY2UoKTsKKwkJ
U3RyaW5nIGNvbXBsZXRlQmVoaW5kID0gIiAgICBkZWYiOworCQlpbnQgY3Vyc29yTG9jYXRpb24g
PSBzdHIubGFzdEluZGV4T2YoY29tcGxldGVCZWhpbmQpICsgY29tcGxldGVCZWhpbmQubGVuZ3Ro
KCk7CisJCXRoaXMud29ya2luZ0NvcGllc1swXS5jb2RlQ29tcGxldGUoY3Vyc29yTG9jYXRpb24s
IHJlcXVlc3RvciwgdGhpcy53Y093bmVyKTsKKwkJCisJCWFzc2VydFJlc3VsdHMoCisJCQkiZGVm
W1BPVEVOVElBTF9NRVRIT0RfREVDTEFSQVRJT05de2RlZiwgTHRlc3QuUDssICgpViwgZGVmLCBu
dWxsLCAxNH1cbiIgKyAiZGVmYXVsdFtLRVlXT1JEXXtkZWZhdWx0LCBudWxsLCBudWxsLCBkZWZh
dWx0LCBudWxsLCAyNH0iICwKKwkJCXJlcXVlc3Rvci5nZXRSZXN1bHRzKCkpOworCX0gZmluYWxs
eSB7CisJCS8vIFJlc3RvcmUgY29tcGxpYW5jZSBzZXR0aW5ncy4KKwkJb3B0aW9ucy5wdXQoQ29t
cGlsZXJPcHRpb25zLk9QVElPTl9Db21wbGlhbmNlLCBzYXZlZE9wdGlvbkNvbXBsaWFuY2UpOwor
CQlvcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1NvdXJjZSwgc2F2ZWRPcHRpb25T
b3VyY2UpOworCQlDT01QTEVUSU9OX1BST0pFQ1Quc2V0T3B0aW9ucyhvcHRpb25zKTsJCisJfQor
fQogLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM1MDY1
MgogLy8gc3VwZXJjbGFzcyBleGNlcHRpb24gdHlwZSBpcyBhbGxvd2VkIGluIG11bHRpLWNhdGNo
CiAvLyB0eXBlcyBpbiBzYW1lIENVLiBSZWxldmFuY2Ugb2Ygc3VwZXIgdHlwZSB3aWxsIGJlIGxl
c3MuCiBwdWJsaWMgdm9pZCB0ZXN0QnVnMzUwNjUyZCgpIHRocm93cyBKYXZhTW9kZWxFeGNlcHRp
b24gewogCU1hcCBvcHRpb25zID0gQ09NUExFVElPTl9QUk9KRUNULmdldE9wdGlvbnModHJ1ZSk7
CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb2RlYXNzaXN0L29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb2RlYXNzaXN0L0NvbXBsZXRpb25FbmdpbmUuamF2YSBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvZGVhc3Npc3Qvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvZGVhc3Np
c3QvQ29tcGxldGlvbkVuZ2luZS5qYXZhCmluZGV4IDQzMzNjZDUuLmViNmY1NGYgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvZGVhc3Npc3Qvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvZGVhc3Npc3QvQ29tcGxldGlvbkVuZ2luZS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvZGVhc3Npc3Qvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvZGVhc3Npc3QvQ29t
cGxldGlvbkVuZ2luZS5qYXZhCkBAIC0yMTc5LDExICsyMTc5LDExIEBACiAJCXRoaXMuY29tcGxl
dGlvblRva2VuID0gdHlwZS50b2tlbjsKIAkJc2V0U291cmNlQW5kVG9rZW5SYW5nZSh0eXBlLnNv
dXJjZVN0YXJ0LCB0eXBlLnNvdXJjZUVuZCk7CiAKIAkJZmluZFR5cGVzQW5kUGFja2FnZXModGhp
cy5jb21wbGV0aW9uVG9rZW4sIHNjb3BlLCB0cnVlLCB0cnVlLCBuZXcgT2JqZWN0VmVjdG9yKCkp
OwogCQlpZiAoIXRoaXMucmVxdWVzdG9yLmlzSWdub3JlZChDb21wbGV0aW9uUHJvcG9zYWwuS0VZ
V09SRCkpIHsKLQkJCWZpbmRLZXl3b3Jkc0Zvck1lbWJlcih0aGlzLmNvbXBsZXRpb25Ub2tlbiwg
ZmllbGQubW9kaWZpZXJzKTsKKwkJCWZpbmRLZXl3b3Jkc0Zvck1lbWJlcih0aGlzLmNvbXBsZXRp
b25Ub2tlbiwgZmllbGQubW9kaWZpZXJzLCBhc3ROb2RlIGluc3RhbmNlb2YgQ29tcGxldGlvbk9u
RmllbGRUeXBlID8gYXN0Tm9kZSA6IG51bGwpOwogCQl9CiAKIAkJaWYgKCFmaWVsZC5pc0xvY2Fs
VmFyaWFibGUgJiYgZmllbGQubW9kaWZpZXJzID09IENsYXNzRmlsZUNvbnN0YW50cy5BY2NEZWZh
dWx0KSB7CiAJCQlTb3VyY2VUeXBlQmluZGluZyBlbmNsb3NpbmdUeXBlID0gc2NvcGUuZW5jbG9z
aW5nU291cmNlVHlwZSgpOwogCQkJaWYgKCFlbmNsb3NpbmdUeXBlLmlzQW5ub3RhdGlvblR5cGUo
KSkgewpAQCAtMjc5MywxMSArMjc5MywxMSBAQAogCQlTaW5nbGVUeXBlUmVmZXJlbmNlIHR5cGUg
PSAoQ29tcGxldGlvbk9uU2luZ2xlVHlwZVJlZmVyZW5jZSkgbWV0aG9kLnJldHVyblR5cGU7CiAJ
CXRoaXMuY29tcGxldGlvblRva2VuID0gdHlwZS50b2tlbjsKIAkJc2V0U291cmNlQW5kVG9rZW5S
YW5nZSh0eXBlLnNvdXJjZVN0YXJ0LCB0eXBlLnNvdXJjZUVuZCk7CiAJCWZpbmRUeXBlc0FuZFBh
Y2thZ2VzKHRoaXMuY29tcGxldGlvblRva2VuLCBzY29wZS5wYXJlbnQsIHRydWUsIHRydWUsIG5l
dyBPYmplY3RWZWN0b3IoKSk7CiAJCWlmICghdGhpcy5yZXF1ZXN0b3IuaXNJZ25vcmVkKENvbXBs
ZXRpb25Qcm9wb3NhbC5LRVlXT1JEKSkgewotCQkJZmluZEtleXdvcmRzRm9yTWVtYmVyKHRoaXMu
Y29tcGxldGlvblRva2VuLCBtZXRob2QubW9kaWZpZXJzKTsKKwkJCWZpbmRLZXl3b3Jkc0Zvck1l
bWJlcih0aGlzLmNvbXBsZXRpb25Ub2tlbiwgbWV0aG9kLm1vZGlmaWVycywgbnVsbCk7CiAJCX0K
IAogCQlpZiAobWV0aG9kLm1vZGlmaWVycyA9PSBDbGFzc0ZpbGVDb25zdGFudHMuQWNjRGVmYXVs
dCkgewogCQkJU291cmNlVHlwZUJpbmRpbmcgZW5jbG9zaW5nVHlwZSA9IHNjb3BlLmVuY2xvc2lu
Z1NvdXJjZVR5cGUoKTsKIAkJCWlmICghZW5jbG9zaW5nVHlwZS5pc0Fubm90YXRpb25UeXBlKCkp
IHsKQEAgLTgxMjMsMTEgKzgxMjMsMTEgQEAKIAkJCQkJCQl0aGlzLnByaW50RGVidWcocHJvcG9z
YWwpOwogCQkJCQkJfQogCQkJCQl9CiAJCQkJfQogCX0KLQlwcml2YXRlIHZvaWQgZmluZEtleXdv
cmRzRm9yTWVtYmVyKGNoYXJbXSB0b2tlbiwgaW50IG1vZGlmaWVycykgeworCXByaXZhdGUgdm9p
ZCBmaW5kS2V5d29yZHNGb3JNZW1iZXIoY2hhcltdIHRva2VuLCBpbnQgbW9kaWZpZXJzLCBBU1RO
b2RlIGFzdE5vZGUpIHsKIAkJY2hhcltdW10ga2V5d29yZHMgPSBuZXcgY2hhcltLZXl3b3Jkcy5D
T1VOVF1bXTsKIAkJaW50IGNvdW50ID0gMDsKIAogCQkvLyB2aXNpYmlsaXR5CiAJCWlmKChtb2Rp
ZmllcnMgJiBDbGFzc0ZpbGVDb25zdGFudHMuQWNjUHJpdmF0ZSkgPT0gMApAQCAtODEzOCwxMCAr
ODEzOCwyMSBAQAogCQkJaWYoKG1vZGlmaWVycyAmIENsYXNzRmlsZUNvbnN0YW50cy5BY2NBYnN0
cmFjdCkgPT0gMCkgewogCQkJCWtleXdvcmRzW2NvdW50KytdID0gS2V5d29yZHMuUFJJVkFURTsK
IAkJCX0KIAkJfQogCisJCUZpZWxkQmluZGluZyBhc3ROb2RlQmluZGluZzsKKwkJUmVmZXJlbmNl
QmluZGluZyBkZWNsYXJpbmdDbGFzczsKKwkJLy8gY2hlY2tpbmcgdGhlIGZvbGxvd2luZyB3aXRo
IG51bGwgY2hlY2tzIGF0IGV2ZXJ5IHN0ZXAgOgorCQkvLyBpZigoYXN0Tm9kZSAhPSBudWxsKSAm
JiAoKENvbXBsZXRpb25PbkZpZWxkVHlwZSkgYXN0Tm9kZSkuYmluZGluZy5kZWNsYXJpbmdDbGFz
cy5pc0ludGVyZmFjZSgpICkKKwkJaWYoKHRoaXMuY29tcGlsZXJPcHRpb25zLnNvdXJjZUxldmVs
ID49IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzgpICYmCisJCSAgIChhc3ROb2RlICE9IG51bGwp
ICYmIAorCQkgICAoKGFzdE5vZGVCaW5kaW5nID0gKChDb21wbGV0aW9uT25GaWVsZFR5cGUpIGFz
dE5vZGUpLmJpbmRpbmcpICE9IG51bGwpICYmIAorCQkgICAoKGRlY2xhcmluZ0NsYXNzID0gYXN0
Tm9kZUJpbmRpbmcuZGVjbGFyaW5nQ2xhc3MpICE9IG51bGwpICYmCisJCSAgIGRlY2xhcmluZ0Ns
YXNzLmlzSW50ZXJmYWNlKCkgKSB7CisJCQkJa2V5d29yZHNbY291bnQrK10gPSBLZXl3b3Jkcy5E
RUZBVUxUOworCQl9CiAJCWlmKChtb2RpZmllcnMgJiBDbGFzc0ZpbGVDb25zdGFudHMuQWNjQWJz
dHJhY3QpID09IDApIHsKIAkJCS8vIGFidHJhY3QKIAkJCWlmKChtb2RpZmllcnMgJiB+KEV4dHJh
Q29tcGlsZXJNb2RpZmllcnMuQWNjVmlzaWJpbGl0eU1BU0sgfCBDbGFzc0ZpbGVDb25zdGFudHMu
QWNjU3RhdGljKSkgPT0gMCkgewogCQkJCWtleXdvcmRzW2NvdW50KytdID0gS2V5d29yZHMuQUJT
VFJBQ1Q7CiAJCQl9
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>228175</attachid>
            <date>2013-03-11 02:57:00 -0400</date>
            <delta_ts>2013-03-11 02:57:17 -0400</delta_ts>
            <desc>Patch after accommodating the review comments</desc>
            <filename>Bug401487_ReviewCommentsIncorporated.patch</filename>
            <type>text/plain</type>
            <size>13926</size>
            <attacher name="ANIRBAN CHAKRABORTY">anchakrk</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9tb2RlbC9Db21wbGV0aW9uVGVzdHMuamF2YSBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9t
b2RlbC9Db21wbGV0aW9uVGVzdHMuamF2YQppbmRleCBhMDUwZmZlLi4yYjIyMzc3IDEwMDY0NAot
LS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0
L2NvcmUvdGVzdHMvbW9kZWwvQ29tcGxldGlvblRlc3RzLmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21vZGVs
L0NvbXBsZXRpb25UZXN0cy5qYXZhCkBAIC0zLDEwICszLDE0IEBACiAgKiBBbGwgcmlnaHRzIHJl
c2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBh
cmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBM
aWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQg
aXMgYXZhaWxhYmxlIGF0CiAgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAu
aHRtbAogICogCisgKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGFuIGVhcmx5LWRyYWZ0
IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVyIHRoZSBKYXZhCisgKiBDb21tdW5pdHkgUHJv
Y2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFibGUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRp
b24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBjb2RlIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggYW55
IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KKyAqIAogICogQ29udHJpYnV0b3JzOgogICogICAg
IElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgogICoqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKiovCiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1v
ZGVsOwogCkBAIC0xMDMwLDEwICsxMDM0LDE1IEBACiAJc3VpdGUuYWRkVGVzdChuZXcgQ29tcGxl
dGlvblRlc3RzKCJ0ZXN0QnVnMzUwNjUyaiIpKTsKIAlzdWl0ZS5hZGRUZXN0KG5ldyBDb21wbGV0
aW9uVGVzdHMoInRlc3RCdWczNTA2NTJrIikpOwogCXN1aXRlLmFkZFRlc3QobmV3IENvbXBsZXRp
b25UZXN0cygidGVzdEJ1ZzM1MDY1MmwiKSk7CiAJc3VpdGUuYWRkVGVzdChuZXcgQ29tcGxldGlv
blRlc3RzKCJ0ZXN0QnVnMzUwNjUybSIpKTsKIAlzdWl0ZS5hZGRUZXN0KG5ldyBDb21wbGV0aW9u
VGVzdHMoInRlc3RCdWczNTA2NTJuIikpOworCXN1aXRlLmFkZFRlc3QobmV3IENvbXBsZXRpb25U
ZXN0cygidGVzdEJ1ZzQwMTQ4N2EiKSk7CisJc3VpdGUuYWRkVGVzdChuZXcgQ29tcGxldGlvblRl
c3RzKCJ0ZXN0QnVnNDAxNDg3YiIpKTsKKwlzdWl0ZS5hZGRUZXN0KG5ldyBDb21wbGV0aW9uVGVz
dHMoInRlc3RCdWc0MDE0ODdjIikpOworCXN1aXRlLmFkZFRlc3QobmV3IENvbXBsZXRpb25UZXN0
cygidGVzdEJ1ZzQwMTQ4N2QiKSk7CisJc3VpdGUuYWRkVGVzdChuZXcgQ29tcGxldGlvblRlc3Rz
KCJ0ZXN0QnVnNDAxNDg3ZSIpKTsKIAlzdWl0ZS5hZGRUZXN0KG5ldyBDb21wbGV0aW9uVGVzdHMo
InRlc3RCdWczNTE0NDQiKSk7CiAJc3VpdGUuYWRkVGVzdChuZXcgQ29tcGxldGlvblRlc3RzKCJ0
ZXN0QnVnMzUxNDQ0YSIpKTsKIAlzdWl0ZS5hZGRUZXN0KG5ldyBDb21wbGV0aW9uVGVzdHMoInRl
c3RCdWczNTE0NDRiIikpOwogCXN1aXRlLmFkZFRlc3QobmV3IENvbXBsZXRpb25UZXN0cygidGVz
dEJ1ZzM1MTQ0NGMiKSk7CiAJc3VpdGUuYWRkVGVzdChuZXcgQ29tcGxldGlvblRlc3RzKCJ0ZXN0
QnVnMzUxNDQ0ZCIpKTsKQEAgLTI0ODIwLDEwICsyNDgyOSwxNzUgQEAKIAkJLy8gUmVzdG9yZSBj
b21wbGlhbmNlIHNldHRpbmdzLgogCQlvcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9O
X0NvbXBsaWFuY2UsIHNhdmVkT3B0aW9uQ29tcGxpYW5jZSk7CiAJCUNPTVBMRVRJT05fUFJPSkVD
VC5zZXRPcHRpb25zKG9wdGlvbnMpOwkKIAl9CiB9CisKKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNl
Lm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00MDE0ODcKKy8vIEJ1ZyA0MDE0ODcgLSBbMS44XVth
c3Npc3RdIGRlZmF1bHQgbW9kaWZpZXIgbm90IHByb3Bvc2VkIHdoaWxlIGNvbXBsZXRpbmcgbW9k
aWZpZXJzIGluIGludGVyZmFjZXMKK3B1YmxpYyB2b2lkIHRlc3RCdWc0MDE0ODdhKCkgdGhyb3dz
IEphdmFNb2RlbEV4Y2VwdGlvbiB7CisJTWFwIG9wdGlvbnMgPSBDT01QTEVUSU9OX1BST0pFQ1Qu
Z2V0T3B0aW9ucyh0cnVlKTsKKwlPYmplY3Qgc2F2ZWRPcHRpb25Db21wbGlhbmNlID0gb3B0aW9u
cy5nZXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9Db21wbGlhbmNlKTsKKwlPYmplY3Qgc2F2ZWRP
cHRpb25Tb3VyY2UgPSBvcHRpb25zLmdldChDb21waWxlck9wdGlvbnMuT1BUSU9OX1NvdXJjZSk7
CisJdHJ5IHsKKwkJb3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9Db21wbGlhbmNl
LCBDb21waWxlck9wdGlvbnMuVkVSU0lPTl8xXzgpOworCQlvcHRpb25zLnB1dChDb21waWxlck9w
dGlvbnMuT1BUSU9OX1NvdXJjZSwgQ29tcGlsZXJPcHRpb25zLlZFUlNJT05fMV84KTsKKwkJQ09N
UExFVElPTl9QUk9KRUNULnNldE9wdGlvbnMob3B0aW9ucyk7CisJCXRoaXMud29ya2luZ0NvcGll
cyA9IG5ldyBJQ29tcGlsYXRpb25Vbml0WzNdOworCQl0aGlzLndvcmtpbmdDb3BpZXNbMF0gPSBn
ZXRXb3JraW5nQ29weSgKKwkJCSIvQ29tcGxldGlvbi9zcmMvdGVzdC9UZXN0LmphdmEiLAorCQkJ
InBhY2thZ2UgdGVzdDsiKworCQkJImludGVyZmFjZSBQIHsgXG4iICsKKyAgICAgICAgICAgICIg
ICAgZGVmIiArCisJCQkifVxuIik7CisKKwkJQ29tcGxldGlvblRlc3RzUmVxdWVzdG9yMiByZXF1
ZXN0b3IgPSBuZXcgQ29tcGxldGlvblRlc3RzUmVxdWVzdG9yMih0cnVlKTsKKwkJU3RyaW5nIHN0
ciA9IHRoaXMud29ya2luZ0NvcGllc1swXS5nZXRTb3VyY2UoKTsKKwkJU3RyaW5nIGNvbXBsZXRl
QmVoaW5kID0gIiAgICBkZWYiOworCQlpbnQgY3Vyc29yTG9jYXRpb24gPSBzdHIubGFzdEluZGV4
T2YoY29tcGxldGVCZWhpbmQpICsgY29tcGxldGVCZWhpbmQubGVuZ3RoKCk7CisJCXRoaXMud29y
a2luZ0NvcGllc1swXS5jb2RlQ29tcGxldGUoY3Vyc29yTG9jYXRpb24sIHJlcXVlc3RvciwgdGhp
cy53Y093bmVyKTsKKwkJCisJCWFzc2VydFJlc3VsdHMoCisJCQkiZGVmW1BPVEVOVElBTF9NRVRI
T0RfREVDTEFSQVRJT05de2RlZiwgTHRlc3QuUDssICgpViwgZGVmLCBudWxsLCAxNH1cbiIgKyAi
ZGVmYXVsdFtLRVlXT1JEXXtkZWZhdWx0LCBudWxsLCBudWxsLCBkZWZhdWx0LCBudWxsLCAyNH0i
ICwKKwkJCXJlcXVlc3Rvci5nZXRSZXN1bHRzKCkpOworCX0gZmluYWxseSB7CisJCS8vIFJlc3Rv
cmUgY29tcGxpYW5jZSBzZXR0aW5ncy4KKwkJb3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9Q
VElPTl9Db21wbGlhbmNlLCBzYXZlZE9wdGlvbkNvbXBsaWFuY2UpOworCQlvcHRpb25zLnB1dChD
b21waWxlck9wdGlvbnMuT1BUSU9OX1NvdXJjZSwgc2F2ZWRPcHRpb25Tb3VyY2UpOworCQlDT01Q
TEVUSU9OX1BST0pFQ1Quc2V0T3B0aW9ucyhvcHRpb25zKTsJCisJfQorfQorcHVibGljIHZvaWQg
dGVzdEJ1ZzQwMTQ4N2IoKSB0aHJvd3MgSmF2YU1vZGVsRXhjZXB0aW9uIHsKKwlNYXAgb3B0aW9u
cyA9IENPTVBMRVRJT05fUFJPSkVDVC5nZXRPcHRpb25zKHRydWUpOworCU9iamVjdCBzYXZlZE9w
dGlvbkNvbXBsaWFuY2UgPSBvcHRpb25zLmdldChDb21waWxlck9wdGlvbnMuT1BUSU9OX0NvbXBs
aWFuY2UpOworCU9iamVjdCBzYXZlZE9wdGlvblNvdXJjZSA9IG9wdGlvbnMuZ2V0KENvbXBpbGVy
T3B0aW9ucy5PUFRJT05fU291cmNlKTsKKwl0cnkgeworCQlvcHRpb25zLnB1dChDb21waWxlck9w
dGlvbnMuT1BUSU9OX0NvbXBsaWFuY2UsIENvbXBpbGVyT3B0aW9ucy5WRVJTSU9OXzFfOCk7CisJ
CW9wdGlvbnMucHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJT05fU291cmNlLCBDb21waWxlck9wdGlv
bnMuVkVSU0lPTl8xXzgpOworCQlDT01QTEVUSU9OX1BST0pFQ1Quc2V0T3B0aW9ucyhvcHRpb25z
KTsKKwkJdGhpcy53b3JraW5nQ29waWVzID0gbmV3IElDb21waWxhdGlvblVuaXRbM107CisJCXRo
aXMud29ya2luZ0NvcGllc1swXSA9IGdldFdvcmtpbmdDb3B5KAorCQkJIi9Db21wbGV0aW9uL3Ny
Yy90ZXN0L1Rlc3QuamF2YSIsCisJCQkicGFja2FnZSB0ZXN0OyIrCisJCQkiQGludGVyZmFjZSBQ
IHsgXG4iICsKKyAgICAgICAgICAgICIgICAgZGVmIiArCisJCQkifVxuIik7CisKKwkJQ29tcGxl
dGlvblRlc3RzUmVxdWVzdG9yMiByZXF1ZXN0b3IgPSBuZXcgQ29tcGxldGlvblRlc3RzUmVxdWVz
dG9yMih0cnVlKTsKKwkJU3RyaW5nIHN0ciA9IHRoaXMud29ya2luZ0NvcGllc1swXS5nZXRTb3Vy
Y2UoKTsKKwkJU3RyaW5nIGNvbXBsZXRlQmVoaW5kID0gIiAgICBkZWYiOworCQlpbnQgY3Vyc29y
TG9jYXRpb24gPSBzdHIubGFzdEluZGV4T2YoY29tcGxldGVCZWhpbmQpICsgY29tcGxldGVCZWhp
bmQubGVuZ3RoKCk7CisJCXRoaXMud29ya2luZ0NvcGllc1swXS5jb2RlQ29tcGxldGUoY3Vyc29y
TG9jYXRpb24sIHJlcXVlc3RvciwgdGhpcy53Y093bmVyKTsKKwkJCisJCWFzc2VydFJlc3VsdHMo
CisJCQkiIiAsCisJCQlyZXF1ZXN0b3IuZ2V0UmVzdWx0cygpKTsKKwl9IGZpbmFsbHkgeworCQkv
LyBSZXN0b3JlIGNvbXBsaWFuY2Ugc2V0dGluZ3MuCisJCW9wdGlvbnMucHV0KENvbXBpbGVyT3B0
aW9ucy5PUFRJT05fQ29tcGxpYW5jZSwgc2F2ZWRPcHRpb25Db21wbGlhbmNlKTsKKwkJb3B0aW9u
cy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9Tb3VyY2UsIHNhdmVkT3B0aW9uU291cmNlKTsK
KwkJQ09NUExFVElPTl9QUk9KRUNULnNldE9wdGlvbnMob3B0aW9ucyk7CQorCX0KK30KK3B1Ymxp
YyB2b2lkIHRlc3RCdWc0MDE0ODdjKCkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbiB7CisJTWFw
IG9wdGlvbnMgPSBDT01QTEVUSU9OX1BST0pFQ1QuZ2V0T3B0aW9ucyh0cnVlKTsKKwlPYmplY3Qg
c2F2ZWRPcHRpb25Db21wbGlhbmNlID0gb3B0aW9ucy5nZXQoQ29tcGlsZXJPcHRpb25zLk9QVElP
Tl9Db21wbGlhbmNlKTsKKwlPYmplY3Qgc2F2ZWRPcHRpb25Tb3VyY2UgPSBvcHRpb25zLmdldChD
b21waWxlck9wdGlvbnMuT1BUSU9OX1NvdXJjZSk7CisJdHJ5IHsKKwkJb3B0aW9ucy5wdXQoQ29t
cGlsZXJPcHRpb25zLk9QVElPTl9Db21wbGlhbmNlLCBDb21waWxlck9wdGlvbnMuVkVSU0lPTl8x
XzgpOworCQlvcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1NvdXJjZSwgQ29tcGls
ZXJPcHRpb25zLlZFUlNJT05fMV84KTsKKwkJQ09NUExFVElPTl9QUk9KRUNULnNldE9wdGlvbnMo
b3B0aW9ucyk7CisJCXRoaXMud29ya2luZ0NvcGllcyA9IG5ldyBJQ29tcGlsYXRpb25Vbml0WzNd
OworCQl0aGlzLndvcmtpbmdDb3BpZXNbMF0gPSBnZXRXb3JraW5nQ29weSgKKwkJCSIvQ29tcGxl
dGlvbi9zcmMvdGVzdC9UZXN0LmphdmEiLAorCQkJInBhY2thZ2UgdGVzdDsiKworCQkJImNsYXNz
IFAgeyBcbiIgKworICAgICAgICAgICAgIiAgICBkZWYiICsKKwkJCSJ9XG4iKTsKKworCQlDb21w
bGV0aW9uVGVzdHNSZXF1ZXN0b3IyIHJlcXVlc3RvciA9IG5ldyBDb21wbGV0aW9uVGVzdHNSZXF1
ZXN0b3IyKHRydWUpOworCQlTdHJpbmcgc3RyID0gdGhpcy53b3JraW5nQ29waWVzWzBdLmdldFNv
dXJjZSgpOworCQlTdHJpbmcgY29tcGxldGVCZWhpbmQgPSAiICAgIGRlZiI7CisJCWludCBjdXJz
b3JMb2NhdGlvbiA9IHN0ci5sYXN0SW5kZXhPZihjb21wbGV0ZUJlaGluZCkgKyBjb21wbGV0ZUJl
aGluZC5sZW5ndGgoKTsKKwkJdGhpcy53b3JraW5nQ29waWVzWzBdLmNvZGVDb21wbGV0ZShjdXJz
b3JMb2NhdGlvbiwgcmVxdWVzdG9yLCB0aGlzLndjT3duZXIpOworCQkKKwkJYXNzZXJ0UmVzdWx0
cygKKwkJCSJkZWZbUE9URU5USUFMX01FVEhPRF9ERUNMQVJBVElPTl17ZGVmLCBMdGVzdC5QOywg
KClWLCBkZWYsIG51bGwsIDE0fSIgLAorCQkJcmVxdWVzdG9yLmdldFJlc3VsdHMoKSk7CisJfSBm
aW5hbGx5IHsKKwkJLy8gUmVzdG9yZSBjb21wbGlhbmNlIHNldHRpbmdzLgorCQlvcHRpb25zLnB1
dChDb21waWxlck9wdGlvbnMuT1BUSU9OX0NvbXBsaWFuY2UsIHNhdmVkT3B0aW9uQ29tcGxpYW5j
ZSk7CisJCW9wdGlvbnMucHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJT05fU291cmNlLCBzYXZlZE9w
dGlvblNvdXJjZSk7CisJCUNPTVBMRVRJT05fUFJPSkVDVC5zZXRPcHRpb25zKG9wdGlvbnMpOwkK
Kwl9Cit9CitwdWJsaWMgdm9pZCB0ZXN0QnVnNDAxNDg3ZCgpIHRocm93cyBKYXZhTW9kZWxFeGNl
cHRpb24geworCU1hcCBvcHRpb25zID0gQ09NUExFVElPTl9QUk9KRUNULmdldE9wdGlvbnModHJ1
ZSk7CisJT2JqZWN0IHNhdmVkT3B0aW9uQ29tcGxpYW5jZSA9IG9wdGlvbnMuZ2V0KENvbXBpbGVy
T3B0aW9ucy5PUFRJT05fQ29tcGxpYW5jZSk7CisJT2JqZWN0IHNhdmVkT3B0aW9uU291cmNlID0g
b3B0aW9ucy5nZXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9Tb3VyY2UpOworCXRyeSB7CisJCW9w
dGlvbnMucHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJT05fQ29tcGxpYW5jZSwgQ29tcGlsZXJPcHRp
b25zLlZFUlNJT05fMV84KTsKKwkJb3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9T
b3VyY2UsIENvbXBpbGVyT3B0aW9ucy5WRVJTSU9OXzFfOCk7CisJCUNPTVBMRVRJT05fUFJPSkVD
VC5zZXRPcHRpb25zKG9wdGlvbnMpOworCQl0aGlzLndvcmtpbmdDb3BpZXMgPSBuZXcgSUNvbXBp
bGF0aW9uVW5pdFszXTsKKwkJdGhpcy53b3JraW5nQ29waWVzWzBdID0gZ2V0V29ya2luZ0NvcHko
CisJCQkiL0NvbXBsZXRpb24vc3JjL3Rlc3QvVGVzdC5qYXZhIiwKKwkJCSJwYWNrYWdlIHRlc3Q7
IisKKwkJCSJlbnVtIFAgeyBcbiIgKworICAgICAgICAgICAgIiAgICBkZWYiICsKKwkJCSJ9XG4i
KTsKKworCQlDb21wbGV0aW9uVGVzdHNSZXF1ZXN0b3IyIHJlcXVlc3RvciA9IG5ldyBDb21wbGV0
aW9uVGVzdHNSZXF1ZXN0b3IyKHRydWUpOworCQlTdHJpbmcgc3RyID0gdGhpcy53b3JraW5nQ29w
aWVzWzBdLmdldFNvdXJjZSgpOworCQlTdHJpbmcgY29tcGxldGVCZWhpbmQgPSAiICAgIGRlZiI7
CisJCWludCBjdXJzb3JMb2NhdGlvbiA9IHN0ci5sYXN0SW5kZXhPZihjb21wbGV0ZUJlaGluZCkg
KyBjb21wbGV0ZUJlaGluZC5sZW5ndGgoKTsKKwkJdGhpcy53b3JraW5nQ29waWVzWzBdLmNvZGVD
b21wbGV0ZShjdXJzb3JMb2NhdGlvbiwgcmVxdWVzdG9yLCB0aGlzLndjT3duZXIpOworCQkKKwkJ
YXNzZXJ0UmVzdWx0cygKKwkJCSIiICwKKwkJCXJlcXVlc3Rvci5nZXRSZXN1bHRzKCkpOworCX0g
ZmluYWxseSB7CisJCS8vIFJlc3RvcmUgY29tcGxpYW5jZSBzZXR0aW5ncy4KKwkJb3B0aW9ucy5w
dXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9Db21wbGlhbmNlLCBzYXZlZE9wdGlvbkNvbXBsaWFu
Y2UpOworCQlvcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1NvdXJjZSwgc2F2ZWRP
cHRpb25Tb3VyY2UpOworCQlDT01QTEVUSU9OX1BST0pFQ1Quc2V0T3B0aW9ucyhvcHRpb25zKTsJ
CisJfQorfQorcHVibGljIHZvaWQgdGVzdEJ1ZzQwMTQ4N2UoKSB0aHJvd3MgSmF2YU1vZGVsRXhj
ZXB0aW9uIHsKKwlNYXAgb3B0aW9ucyA9IENPTVBMRVRJT05fUFJPSkVDVC5nZXRPcHRpb25zKHRy
dWUpOworCU9iamVjdCBzYXZlZE9wdGlvbkNvbXBsaWFuY2UgPSBvcHRpb25zLmdldChDb21waWxl
ck9wdGlvbnMuT1BUSU9OX0NvbXBsaWFuY2UpOworCU9iamVjdCBzYXZlZE9wdGlvblNvdXJjZSA9
IG9wdGlvbnMuZ2V0KENvbXBpbGVyT3B0aW9ucy5PUFRJT05fU291cmNlKTsKKwl0cnkgeworCQlv
cHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX0NvbXBsaWFuY2UsIENvbXBpbGVyT3B0
aW9ucy5WRVJTSU9OXzFfOCk7CisJCW9wdGlvbnMucHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJT05f
U291cmNlLCBDb21waWxlck9wdGlvbnMuVkVSU0lPTl8xXzgpOworCQlDT01QTEVUSU9OX1BST0pF
Q1Quc2V0T3B0aW9ucyhvcHRpb25zKTsKKwkJdGhpcy53b3JraW5nQ29waWVzID0gbmV3IElDb21w
aWxhdGlvblVuaXRbM107CisJCXRoaXMud29ya2luZ0NvcGllc1swXSA9IGdldFdvcmtpbmdDb3B5
KAorCQkJIi9Db21wbGV0aW9uL3NyYy90ZXN0L1Rlc3QuamF2YSIsCisJCQkicGFja2FnZSB0ZXN0
OyIrCisJCQkicHVibGljIGNsYXNzIFpaIHsgXG4iICsKKwkJCSIgICAgcHVibGljIGludGVyZmFj
ZSBJIHsiICsKKyAgICAgICAgICAgICIgICAgICAgIGRlZiIgKworCQkJIiAgICB9IiArCisJCQki
fVxuIik7CisKKwkJQ29tcGxldGlvblRlc3RzUmVxdWVzdG9yMiByZXF1ZXN0b3IgPSBuZXcgQ29t
cGxldGlvblRlc3RzUmVxdWVzdG9yMih0cnVlKTsKKwkJU3RyaW5nIHN0ciA9IHRoaXMud29ya2lu
Z0NvcGllc1swXS5nZXRTb3VyY2UoKTsKKwkJU3RyaW5nIGNvbXBsZXRlQmVoaW5kID0gIiAgICBk
ZWYiOworCQlpbnQgY3Vyc29yTG9jYXRpb24gPSBzdHIubGFzdEluZGV4T2YoY29tcGxldGVCZWhp
bmQpICsgY29tcGxldGVCZWhpbmQubGVuZ3RoKCk7CisJCXRoaXMud29ya2luZ0NvcGllc1swXS5j
b2RlQ29tcGxldGUoY3Vyc29yTG9jYXRpb24sIHJlcXVlc3RvciwgdGhpcy53Y093bmVyKTsKKwkJ
CisJCWFzc2VydFJlc3VsdHMoCisJCQkiZGVmW1BPVEVOVElBTF9NRVRIT0RfREVDTEFSQVRJT05d
e2RlZiwgTHRlc3QuWlokSTssICgpViwgZGVmLCBudWxsLCAxNH1cbiIgKyAiZGVmYXVsdFtLRVlX
T1JEXXtkZWZhdWx0LCBudWxsLCBudWxsLCBkZWZhdWx0LCBudWxsLCAyNH0iICwKKwkJCXJlcXVl
c3Rvci5nZXRSZXN1bHRzKCkpOworCX0gZmluYWxseSB7CisJCS8vIFJlc3RvcmUgY29tcGxpYW5j
ZSBzZXR0aW5ncy4KKwkJb3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9Db21wbGlh
bmNlLCBzYXZlZE9wdGlvbkNvbXBsaWFuY2UpOworCQlvcHRpb25zLnB1dChDb21waWxlck9wdGlv
bnMuT1BUSU9OX1NvdXJjZSwgc2F2ZWRPcHRpb25Tb3VyY2UpOworCQlDT01QTEVUSU9OX1BST0pF
Q1Quc2V0T3B0aW9ucyhvcHRpb25zKTsJCisJfQorfQogLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uu
b3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM1MDY1MgogLy8gc3VwZXJjbGFzcyBleGNlcHRpb24g
dHlwZSBpcyBhbGxvd2VkIGluIG11bHRpLWNhdGNoCiAvLyB0eXBlcyBpbiBzYW1lIENVLiBSZWxl
dmFuY2Ugb2Ygc3VwZXIgdHlwZSB3aWxsIGJlIGxlc3MuCiBwdWJsaWMgdm9pZCB0ZXN0QnVnMzUw
NjUyZCgpIHRocm93cyBKYXZhTW9kZWxFeGNlcHRpb24gewogCU1hcCBvcHRpb25zID0gQ09NUExF
VElPTl9QUk9KRUNULmdldE9wdGlvbnModHJ1ZSk7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb2RlYXNzaXN0L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb2RlYXNzaXN0L0Nv
bXBsZXRpb25FbmdpbmUuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvZGVhc3Npc3Qvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvZGVhc3Npc3QvQ29tcGxldGlvbkVuZ2luZS5qYXZhCmlu
ZGV4IDQzMzNjZDUuLjA0MDlhZGEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
ZGVhc3Npc3Qvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvZGVhc3Npc3QvQ29tcGxldGlvbkVu
Z2luZS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvZGVhc3Npc3Qvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvZGVhc3Npc3QvQ29tcGxldGlvbkVuZ2luZS5qYXZhCkBAIC0yLDEw
ICsyLDE0IEBACiAgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTMgSUJNIENvcnBvcmF0aW9uIGFu
ZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBh
Y2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRl
cm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFu
aWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CiAgKiBodHRwOi8vd3d3
LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbAorICogCisgKiBUaGlzIGlzIGFuIGltcGxl
bWVudGF0aW9uIG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVy
IHRoZSBKYXZhCisgKiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFi
bGUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBjb2Rl
IGlzIG5vdCBjb21wYXRpYmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KICAq
CiAgKiBDb250cmlidXRvcnM6CiAgKiAgICAgSUJNIENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkg
YW5kIGltcGxlbWVudGF0aW9uCiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KIHBhY2thZ2Ugb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvZGVhc3Npc3Q7CkBAIC0zMSwxMSArMzUsMTAgQEAKIGlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5Xb3JraW5nQ29weU93bmVyOwogaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLkNhdGVnb3JpemVkUHJvYmxlbTsKIGltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5DaGFyT3BlcmF0aW9uOwogaW1wb3J0IG9yZy5lY2xp
cHNlLmpkdC5jb3JlLmNvbXBpbGVyLklQcm9ibGVtOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5j
b3JlLnNlYXJjaC5JSmF2YVNlYXJjaENvbnN0YW50czsKLQogaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5pbnRlcm5hbC5jb2RlYXNzaXN0LmNvbXBsZXRlLio7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmludGVybmFsLmNvZGVhc3Npc3QuaW1wbC5Bc3Npc3RQYXJzZXI7CiBpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvZGVhc3Npc3QuaW1wbC5FbmdpbmU7CiBpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvZGVhc3Npc3QuaW1wbC5LZXl3b3JkczsKIGltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuQ29tcGlsYXRpb25SZXN1bHQ7CkBAIC0yMTc5LDEx
ICsyMTgyLDExIEBACiAJCXRoaXMuY29tcGxldGlvblRva2VuID0gdHlwZS50b2tlbjsKIAkJc2V0
U291cmNlQW5kVG9rZW5SYW5nZSh0eXBlLnNvdXJjZVN0YXJ0LCB0eXBlLnNvdXJjZUVuZCk7CiAK
IAkJZmluZFR5cGVzQW5kUGFja2FnZXModGhpcy5jb21wbGV0aW9uVG9rZW4sIHNjb3BlLCB0cnVl
LCB0cnVlLCBuZXcgT2JqZWN0VmVjdG9yKCkpOwogCQlpZiAoIXRoaXMucmVxdWVzdG9yLmlzSWdu
b3JlZChDb21wbGV0aW9uUHJvcG9zYWwuS0VZV09SRCkpIHsKLQkJCWZpbmRLZXl3b3Jkc0Zvck1l
bWJlcih0aGlzLmNvbXBsZXRpb25Ub2tlbiwgZmllbGQubW9kaWZpZXJzKTsKKwkJCWZpbmRLZXl3
b3Jkc0Zvck1lbWJlcih0aGlzLmNvbXBsZXRpb25Ub2tlbiwgZmllbGQubW9kaWZpZXJzLCBhc3RO
b2RlKTsKIAkJfQogCiAJCWlmICghZmllbGQuaXNMb2NhbFZhcmlhYmxlICYmIGZpZWxkLm1vZGlm
aWVycyA9PSBDbGFzc0ZpbGVDb25zdGFudHMuQWNjRGVmYXVsdCkgewogCQkJU291cmNlVHlwZUJp
bmRpbmcgZW5jbG9zaW5nVHlwZSA9IHNjb3BlLmVuY2xvc2luZ1NvdXJjZVR5cGUoKTsKIAkJCWlm
ICghZW5jbG9zaW5nVHlwZS5pc0Fubm90YXRpb25UeXBlKCkpIHsKQEAgLTI3OTMsMTEgKzI3OTYs
MTEgQEAKIAkJU2luZ2xlVHlwZVJlZmVyZW5jZSB0eXBlID0gKENvbXBsZXRpb25PblNpbmdsZVR5
cGVSZWZlcmVuY2UpIG1ldGhvZC5yZXR1cm5UeXBlOwogCQl0aGlzLmNvbXBsZXRpb25Ub2tlbiA9
IHR5cGUudG9rZW47CiAJCXNldFNvdXJjZUFuZFRva2VuUmFuZ2UodHlwZS5zb3VyY2VTdGFydCwg
dHlwZS5zb3VyY2VFbmQpOwogCQlmaW5kVHlwZXNBbmRQYWNrYWdlcyh0aGlzLmNvbXBsZXRpb25U
b2tlbiwgc2NvcGUucGFyZW50LCB0cnVlLCB0cnVlLCBuZXcgT2JqZWN0VmVjdG9yKCkpOwogCQlp
ZiAoIXRoaXMucmVxdWVzdG9yLmlzSWdub3JlZChDb21wbGV0aW9uUHJvcG9zYWwuS0VZV09SRCkp
IHsKLQkJCWZpbmRLZXl3b3Jkc0Zvck1lbWJlcih0aGlzLmNvbXBsZXRpb25Ub2tlbiwgbWV0aG9k
Lm1vZGlmaWVycyk7CisJCQlmaW5kS2V5d29yZHNGb3JNZW1iZXIodGhpcy5jb21wbGV0aW9uVG9r
ZW4sIG1ldGhvZC5tb2RpZmllcnMsIG51bGwpOwogCQl9CiAKIAkJaWYgKG1ldGhvZC5tb2RpZmll
cnMgPT0gQ2xhc3NGaWxlQ29uc3RhbnRzLkFjY0RlZmF1bHQpIHsKIAkJCVNvdXJjZVR5cGVCaW5k
aW5nIGVuY2xvc2luZ1R5cGUgPSBzY29wZS5lbmNsb3NpbmdTb3VyY2VUeXBlKCk7CiAJCQlpZiAo
IWVuY2xvc2luZ1R5cGUuaXNBbm5vdGF0aW9uVHlwZSgpKSB7CkBAIC04MTIzLDExICs4MTI2LDEx
IEBACiAJCQkJCQkJdGhpcy5wcmludERlYnVnKHByb3Bvc2FsKTsKIAkJCQkJCX0KIAkJCQkJfQog
CQkJCX0KIAl9Ci0JcHJpdmF0ZSB2b2lkIGZpbmRLZXl3b3Jkc0Zvck1lbWJlcihjaGFyW10gdG9r
ZW4sIGludCBtb2RpZmllcnMpIHsKKwlwcml2YXRlIHZvaWQgZmluZEtleXdvcmRzRm9yTWVtYmVy
KGNoYXJbXSB0b2tlbiwgaW50IG1vZGlmaWVycywgQVNUTm9kZSBhc3ROb2RlKSB7CiAJCWNoYXJb
XVtdIGtleXdvcmRzID0gbmV3IGNoYXJbS2V5d29yZHMuQ09VTlRdW107CiAJCWludCBjb3VudCA9
IDA7CiAKIAkJLy8gdmlzaWJpbGl0eQogCQlpZigobW9kaWZpZXJzICYgQ2xhc3NGaWxlQ29uc3Rh
bnRzLkFjY1ByaXZhdGUpID09IDAKQEAgLTgxMzgsMTAgKzgxNDEsMTcgQEAKIAkJCWlmKChtb2Rp
ZmllcnMgJiBDbGFzc0ZpbGVDb25zdGFudHMuQWNjQWJzdHJhY3QpID09IDApIHsKIAkJCQlrZXl3
b3Jkc1tjb3VudCsrXSA9IEtleXdvcmRzLlBSSVZBVEU7CiAJCQl9CiAJCX0KIAorCQlpZiAoYXN0
Tm9kZSBpbnN0YW5jZW9mIENvbXBsZXRpb25PbkZpZWxkVHlwZSAmJiAKKwkgICAgICAgIHRoaXMu
Y29tcGlsZXJPcHRpb25zLnNvdXJjZUxldmVsID49IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzgp
IHsKKwkgICAgICAgIEZpZWxkQmluZGluZyBhc3ROb2RlQmluZGluZyA9ICgoQ29tcGxldGlvbk9u
RmllbGRUeXBlKSBhc3ROb2RlKS5iaW5kaW5nOworCSAgICAgICAgUmVmZXJlbmNlQmluZGluZyBk
ZWNsYXJpbmdDbGFzcyA9IGFzdE5vZGVCaW5kaW5nICE9IG51bGwgPyBhc3ROb2RlQmluZGluZy5k
ZWNsYXJpbmdDbGFzcyA6IG51bGw7CisJICAgICAgICBpZiAoZGVjbGFyaW5nQ2xhc3MgIT0gbnVs
bCAmJiBkZWNsYXJpbmdDbGFzcy5pc0ludGVyZmFjZSgpICYmICFkZWNsYXJpbmdDbGFzcy5pc0Fu
bm90YXRpb25UeXBlKCkpCisJICAgICAgICAgICAga2V5d29yZHNbY291bnQrK10gPSBLZXl3b3Jk
cy5ERUZBVUxUOworCSAgICB9CiAJCWlmKChtb2RpZmllcnMgJiBDbGFzc0ZpbGVDb25zdGFudHMu
QWNjQWJzdHJhY3QpID09IDApIHsKIAkJCS8vIGFidHJhY3QKIAkJCWlmKChtb2RpZmllcnMgJiB+
KEV4dHJhQ29tcGlsZXJNb2RpZmllcnMuQWNjVmlzaWJpbGl0eU1BU0sgfCBDbGFzc0ZpbGVDb25z
dGFudHMuQWNjU3RhdGljKSkgPT0gMCkgewogCQkJCWtleXdvcmRzW2NvdW50KytdID0gS2V5d29y
ZHMuQUJTVFJBQ1Q7CiAJCQl9
</data>

          </attachment>
      

    </bug>

</bugzilla>