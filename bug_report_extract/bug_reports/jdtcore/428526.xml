<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>428526</bug_id>
          
          <creation_ts>2014-02-19 05:42:00 -0500</creation_ts>
          <short_desc>[1.8] API to get the single abstract method in a functional interface</short_desc>
          <delta_ts>2014-03-07 07:31:00 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>424509</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Noopur Gupta">noopur_gupta</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>manpalat</cc>
    
    <cc>markus_keller</cc>
    
    <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="61755"
          type_id="1"
          status="+"
          setter="srikanth_sankaran"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2365349</commentid>
    <comment_count>0</comment_count>
    <who name="Noopur Gupta">noopur_gupta</who>
    <bug_when>2014-02-19 05:42:04 -0500</bug_when>
    <thetext>An API could be provided in ITypeBinding to get the single abstract method (SAM) of a functional interface type corresponding to the internal implementation of ReferenceBinding#getSingleAbstractMethod and relevant checks from ReferenceBinding.isFunctionalInterface.

The API ITypeBinding#isFunctionalInterface can be replaced with the new API returning SAM and at the client side a null check for SAM will tell if the type is a functional interface.

The new API will help in avoiding with these checks at the client in the interface hierarchy (JSR 335 - 9.8 Functional Interfaces):
- excluding methods that are also public methods in Object.
- The signature of m is a subsignature (8.4.2) of every method&apos;s signature in M.
- m is return-type-substitutable (8.4.5) for every method in M.

See also bug 424509.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2365426</commentid>
    <comment_count>1</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-02-19 07:25:09 -0500</bug_when>
    <thetext>+1, this would be helpful and should be implemented for GA.

Note that the SAM is not necessarily a single method declared by the given ITypeBinding:

interface Foo&lt;T, N extends Number&gt; {
    void m(T arg);
    void m(N arg);
}
interface Baz extends Foo&lt;Integer, Integer&gt; {}

Here, Baz is a functional interface, and the SAM is any of the &quot;void m(Integer)&quot; methods from the superinterface &quot;Foo&lt;Integer,Integer&gt;&quot;.

I&apos;d call the API #getFunctionalInterfaceMethod() and tell in the Javadoc that it returns any one of the (functionally equivalent) abstract methods.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2365597</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-19 12:23:06 -0500</bug_when>
    <thetext>Jay, this should be straightforward, let us see if we can knock this off
for RC1.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2367180</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-22 04:52:05 -0500</bug_when>
    <thetext>I;ll take over this one to allow Jay to focus on bug 425134</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2367192</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-22 06:32:40 -0500</bug_when>
    <thetext>New API and tests here:
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=1927adcb5b6322754055ec7c1403d18ef9b85d5d

Note:

   - ATM, I left the old API intact. Suppose we implement a save action to 
annotate all functional interfaces with @FunctionalInterface, the old API 
could result in slightly more readable code. Not an overwhelmingly convincing
case, but ...

   - I didn&apos;t document the part about the new API returning &quot;any one of the
(functionally equivalent) abstract methods.&quot; It is very easy for me to end
up with loose but easy to read prose on the one hand or correct and dense to
read prose on the other.

    Baz.getFunctionalInterfaceMethod() for the snippet from comment#1 does
not return &quot;any one of the (functionally equivalent) abstract methods.&quot; It
returns the only method it has. The declaring class of the returned method
is Foo&lt;Integer,Integer&gt; which has a single method.

    I also think this is just plain inheritance rules and there is nothing
special about functional interfaces when it comes to these rules (redeclared
object methods not counting is special, but that is documented)

    If however, you think it is better for the clients of the API, feel free
to mend as you see fit. Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2367197</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-22 07:08:10 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #4)

&gt;     If however, you think it is better for the clients of the API, feel free
&gt; to mend as you see fit. Thanks.

If you do, however, we must take care: it cannot be any one of the ..., it must
be that method whose signature is a subsignature of every other abstract method&apos;s
and which is return type substitutable for every other method.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2367640</commentid>
    <comment_count>6</comment_count>
      <attachid>240266</attachid>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-02-24 09:56:04 -0500</bug_when>
    <thetext>Created attachment 240266
Follow-up fixes

(In reply to Srikanth Sankaran from comment #4)
&gt;    - I didn&apos;t document the part about the new API returning &quot;any one of the
&gt; (functionally equivalent) abstract methods.&quot;
&gt; [..]

Up to now, we didn&apos;t have method bindings for inherited methods, so I thought the new API would have to return one of the methods reachable via #getDeclaredMethod() on a superinterface. In the example from comment 1, Baz&apos; supertype Foo&lt;Integer, Integer&gt; has two declared methods whose #getMethodDeclaration() are Foo.m(T) and Foo.m(N), respectively.

#getFunctionalInterfaceMethod() now returns a binding whose declaring class Foo&lt;Integer, Integer&gt; doesn&apos;t declare the method. That&apos;s OK for me, but we need to account for this in another place:

IBinding#getJavaElement() returns null for this binding. I think the binding should be marked as synthetic and then IBinding#getJavaElement() can say it returns &lt;code&gt;null&lt;/code&gt; for synthetic bindings.


&gt;    - ATM, I left the old API intact. Suppose we implement a save action to 
&gt; annotate all functional interfaces with @FunctionalInterface, the old API 
&gt; could result in slightly more readable code. Not an overwhelmingly convincing
&gt; case, but ...

Thanks for keeping the #isFunctionalInterface() API to ease the transition. But now, we should remove the old API, since it is largely redundant. I&apos;ve removed all references in JDT UI with http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=a24fdf9bb64f8cf41e66fb3d103a669e26ed2868

BTW: We won&apos;t add such a save action, since that would work against the goal of @FunctionalInterface (explicit semantic tagging).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2368070</commentid>
    <comment_count>7</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-02-25 05:41:35 -0500</bug_when>
    <thetext>Srikanth, please have a look at comment 6.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2368144</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-25 08:32:56 -0500</bug_when>
    <thetext>Thanks, I will look at it within the next couple of days.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2368600</commentid>
    <comment_count>9</comment_count>
    <who name="Noopur Gupta">noopur_gupta</who>
    <bug_when>2014-02-26 03:48:39 -0500</bug_when>
    <thetext>Minor correction in the Javadoc (*is* is missing):
&quot;if there *is* no such contract or if the receiver is not an interface&quot;.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2369545</commentid>
    <comment_count>10</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-27 19:01:26 -0500</bug_when>
    <thetext>Thanks Markus.

I am not entirely convinced about removing isFunctionalInterface - but given
we can count the major clientele with a single hand, will go with the suggestion.

I also removed isFI from RecoveredTB and released here:
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=481255841603dcf6f5f9da59c807742b7a8cedc1

(In reply to Noopur Gupta from comment #9)
&gt; Minor correction in the Javadoc (*is* is missing):
&gt; &quot;if there *is* no such contract or if the receiver is not an interface&quot;.

Thanks Noopur, fixed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372841</commentid>
    <comment_count>11</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-03-07 03:51:56 -0500</bug_when>
    <thetext>Verified as working for Eclipse + Java 8 RC2 using Kepler SR2 +   
Eclipse Java Development Tools Patch for Java 8 Support (BETA) 
1.0.0.v20140306-1935.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>240266</attachid>
            <date>2014-02-24 09:56:00 -0500</date>
            <delta_ts>2014-02-24 09:56:04 -0500</delta_ts>
            <desc>Follow-up fixes</desc>
            <filename>eclipse.jdt.core.patch</filename>
            <type>text/plain</type>
            <size>6464</size>
            <attacher name="Markus Keller">markus_keller</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMAojUCBvcmcuZWNsaXBzZS5qZHQuY29yZS50
ZXN0cy5tb2RlbApkaWZmIC0tZ2l0IHNyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9kb20v
QVNUQ29udmVydGVyMThUZXN0LmphdmEgc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Rv
bS9BU1RDb252ZXJ0ZXIxOFRlc3QuamF2YQppbmRleCA0Yjg1Y2NhLi5jYjY1ZGEwIDEwMDY0NAot
LS0gc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2RvbS9BU1RDb252ZXJ0ZXIxOFRlc3Qu
amF2YQorKysgc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2RvbS9BU1RDb252ZXJ0ZXIx
OFRlc3QuamF2YQpAQCAtMjcwMyw2ICsyNzAzLDcgQEAKIAl9CiAKIAkvLyBodHRwczovL2J1Z3Mu
ZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDEyNzI2CisJLy8gaHR0cHM6Ly9idWdz
LmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQyODUyNgogCXB1YmxpYyB2b2lkIHRl
c3RCdWc0MTI3MjYoKSB0aHJvd3MgSmF2YU1vZGVsRXhjZXB0aW9uIHsKIAkJU3RyaW5nIGNvbnRl
bnRzID0KIAkJCSJwdWJsaWMgaW50ZXJmYWNlIFgge1xuIiArCkBAIC0yNzI5LDIzICsyNzMwLDI2
IEBACiAJCS8qIGNhc2UgMDogdmFuaWxsYSBjYXNlIC0gaW50ZXJmYWNlIHdpdGggb25lIGFic3Ry
YWN0IG1ldGhvZCAqLwogCQlUeXBlRGVjbGFyYXRpb24gdHlwZSA9ICAoVHlwZURlY2xhcmF0aW9u
KSB1bml0LnR5cGVzKCkuZ2V0KDApOwogCQlJVHlwZUJpbmRpbmcgdHlwZUJpbmRpbmcgPSB0eXBl
LnJlc29sdmVCaW5kaW5nKCk7Ci0JCWFzc2VydFRydWUoIk5vdCBhIGZ1bmN0aW9uYWwgaW50ZXJm
YWNlIiwgdHlwZUJpbmRpbmcuaXNGdW5jdGlvbmFsSW50ZXJmYWNlKCkpOworCQlhc3NlcnRFcXVh
bHMoIkluY29ycmVjdCBtZXRob2QiLCB0eXBlQmluZGluZy5nZXREZWNsYXJlZE1ldGhvZHMoKVsw
XSwgdHlwZUJpbmRpbmcuZ2V0RnVuY3Rpb25hbEludGVyZmFjZU1ldGhvZCgpKTsKIAkJLyogY2Fz
ZSAxOiBpbnRlcmZhY2Ugd2l0aG91dCBhbnkgbWV0aG9kICovCiAJCXR5cGUgPSAgKFR5cGVEZWNs
YXJhdGlvbikgdW5pdC50eXBlcygpLmdldCgxKTsKIAkJdHlwZUJpbmRpbmcgPSB0eXBlLnJlc29s
dmVCaW5kaW5nKCk7Ci0JCWFzc2VydEZhbHNlKCJBIEZ1bmN0aW9uYWwgaW50ZXJmYWNlIiwgdHlw
ZUJpbmRpbmcuaXNGdW5jdGlvbmFsSW50ZXJmYWNlKCkpOworCQlhc3NlcnROdWxsKHR5cGVCaW5k
aW5nLmdldEZ1bmN0aW9uYWxJbnRlcmZhY2VNZXRob2QoKSk7CiAJCS8qIGNhc2UgMjogaW50ZXJm
YWNlIHdpdGgganVzdCBvbmUgZGVmYXVsdCBtZXRob2QgYW5kIHdpdGhvdXQgYW55IGFic3RyYWN0
IG1ldGhvZCAqLwogCQl0eXBlID0gIChUeXBlRGVjbGFyYXRpb24pIHVuaXQudHlwZXMoKS5nZXQo
Mik7CiAJCXR5cGVCaW5kaW5nID0gdHlwZS5yZXNvbHZlQmluZGluZygpOwotCQlhc3NlcnRGYWxz
ZSgiQSBGdW5jdGlvbmFsIGludGVyZmFjZSIsIHR5cGVCaW5kaW5nLmlzRnVuY3Rpb25hbEludGVy
ZmFjZSgpKTsKKwkJYXNzZXJ0TnVsbCh0eXBlQmluZGluZy5nZXRGdW5jdGlvbmFsSW50ZXJmYWNl
TWV0aG9kKCkpOwogCQkvKiBjYXNlIDM6IGludGVyZmFjZSB3aXRoIGp1c3Qgb25lIGRlZmF1bHQg
bWV0aG9kIGFuZCBvbmUgYWJzdHJhY3QgbWV0aG9kICovCiAJCXR5cGUgPSAgKFR5cGVEZWNsYXJh
dGlvbikgdW5pdC50eXBlcygpLmdldCgzKTsKIAkJdHlwZUJpbmRpbmcgPSB0eXBlLnJlc29sdmVC
aW5kaW5nKCk7Ci0JCWFzc2VydFRydWUoIkEgRnVuY3Rpb25hbCBpbnRlcmZhY2UiLCB0eXBlQmlu
ZGluZy5pc0Z1bmN0aW9uYWxJbnRlcmZhY2UoKSk7CisJCUlNZXRob2RCaW5kaW5nIGZ1bmN0aW9u
YWxJbnRlcmZhY2VNZXRob2QgPSB0eXBlQmluZGluZy5nZXRGdW5jdGlvbmFsSW50ZXJmYWNlTWV0
aG9kKCk7CisJCWFzc2VydE5vdE51bGwoZnVuY3Rpb25hbEludGVyZmFjZU1ldGhvZCk7CisJCWFz
c2VydEVxdWFscygiSW5jb3JyZWN0IG1ldGhvZCIsICJwdWJsaWMgYWJzdHJhY3Qgdm9pZCBiYXIo
KSAiLCBmdW5jdGlvbmFsSW50ZXJmYWNlTWV0aG9kLnRvU3RyaW5nKCkpOworCQlhc3NlcnRFcXVh
bHModHlwZUJpbmRpbmcsIGZ1bmN0aW9uYWxJbnRlcmZhY2VNZXRob2QuZ2V0RGVjbGFyaW5nQ2xh
c3MoKSk7CiAJCS8qIGNhc2UgNDogaW50ZXJmYWNlIHdpdGgganVzdCBvbmUgZGVmYXVsdCBtZXRo
b2QgYW5kIHR3byBhYnN0cmFjdCBtZXRob2RzICovCiAJCXR5cGUgPSAgKFR5cGVEZWNsYXJhdGlv
bikgdW5pdC50eXBlcygpLmdldCg0KTsKIAkJdHlwZUJpbmRpbmcgPSB0eXBlLnJlc29sdmVCaW5k
aW5nKCk7Ci0JCWFzc2VydEZhbHNlKCJBIEZ1bmN0aW9uYWwgaW50ZXJmYWNlIiwgdHlwZUJpbmRp
bmcuaXNGdW5jdGlvbmFsSW50ZXJmYWNlKCkpOworCQlhc3NlcnROdWxsKHR5cGVCaW5kaW5nLmdl
dEZ1bmN0aW9uYWxJbnRlcmZhY2VNZXRob2QoKSk7CiAJfQogCS8qKgogCSAqIGh0dHBzOi8vYnVn
cy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00MTcwMTcKI1Agb3JnLmVjbGlwc2Uu
amR0LmNvcmUKZGlmZiAtLWdpdCBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvbG9va3VwL1JlZmVyZW5jZUJpbmRpbmcuamF2YSBjb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1JlZmVyZW5jZUJpbmRpbmcuamF2YQppbmRleCA0
MjM0M2NlLi43MDUwMGIzIDEwMDY0NAotLS0gY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9SZWZlcmVuY2VCaW5kaW5nLmphdmEKKysrIGNvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUmVmZXJlbmNlQmluZGluZy5q
YXZhCkBAIC0yMDM4LDcgKzIwMzgsNyBAQAogCQlpZiAoZXhjZXB0aW9uc0NvdW50ICE9IGV4Y2Vw
dGlvbnNMZW5ndGgpIHsKIAkJCVN5c3RlbS5hcnJheWNvcHkoZXhjZXB0aW9ucywgMCwgZXhjZXB0
aW9ucyA9IG5ldyBSZWZlcmVuY2VCaW5kaW5nW2V4Y2VwdGlvbnNDb3VudF0sIDAsIGV4Y2VwdGlv
bnNDb3VudCk7CiAJCX0KLQkJdGhpcy5zaW5nbGVBYnN0cmFjdE1ldGhvZFtpbmRleF0gPSBuZXcg
TWV0aG9kQmluZGluZyh0aGVBYnN0cmFjdE1ldGhvZC5tb2RpZmllcnMsIAorCQl0aGlzLnNpbmds
ZUFic3RyYWN0TWV0aG9kW2luZGV4XSA9IG5ldyBNZXRob2RCaW5kaW5nKHRoZUFic3RyYWN0TWV0
aG9kLm1vZGlmaWVycyB8IENsYXNzRmlsZUNvbnN0YW50cy5BY2NTeW50aGV0aWMsIAogCQkJCXRo
ZUFic3RyYWN0TWV0aG9kLnNlbGVjdG9yLCAKIAkJCQl0aGVBYnN0cmFjdE1ldGhvZC5yZXR1cm5U
eXBlLCAKIAkJCQl0aGVBYnN0cmFjdE1ldGhvZC5wYXJhbWV0ZXJzLCAKZGlmZiAtLWdpdCBkb20v
b3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0lCaW5kaW5nLmphdmEgZG9tL29yZy9lY2xpcHNlL2pk
dC9jb3JlL2RvbS9JQmluZGluZy5qYXZhCmluZGV4IDRmMGE1MzEuLmUzZjE2M2QgMTAwNjQ0Ci0t
LSBkb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0lCaW5kaW5nLmphdmEKKysrIGRvbS9vcmcv
ZWNsaXBzZS9qZHQvY29yZS9kb20vSUJpbmRpbmcuamF2YQpAQCAtMjE3LDYgKzIxNyw3IEBACiAJ
ICogPGxpPnRoZSBkZWZhdWx0IGNvbnN0cnVjdG9yIG9mIGEgc291cmNlIGNsYXNzPC9saT4KIAkg
KiA8bGk+dGhlIGNvbnN0cnVjdG9yIG9mIGFuIGFub255bW91cyBjbGFzczwvbGk+CiAJICogPGxp
Pm1lbWJlciB2YWx1ZSBwYWlyczwvbGk+CisJICogPGxpPnN5bnRoZXRpYyBiaW5kaW5nczwvbGk+
CiAJICogPC91bD4KIAkgKiBGb3IgYWxsIG90aGVyIGtpbmQgb2YgdHlwZSwgbWV0aG9kLCB2YXJp
YWJsZSwgYW5ub3RhdGlvbiBhbmQgcGFja2FnZSBiaW5kaW5ncywKIAkgKiB0aGlzIG1ldGhvZCBy
ZXR1cm5zIG5vbi08Y29kZT5udWxsPC9jb2RlPi4KZGlmZiAtLWdpdCBkb20vb3JnL2VjbGlwc2Uv
amR0L2NvcmUvZG9tL0lUeXBlQmluZGluZy5qYXZhIGRvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9k
b20vSVR5cGVCaW5kaW5nLmphdmEKaW5kZXggOWY1OTE2OS4uMTJmMjUxYSAxMDA2NDQKLS0tIGRv
bS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vSVR5cGVCaW5kaW5nLmphdmEKKysrIGRvbS9vcmcv
ZWNsaXBzZS9qZHQvY29yZS9kb20vSVR5cGVCaW5kaW5nLmphdmEKQEAgLTI5NywxMyArMjk3LDE1
IEBACiAJLyoqCiAJICogUmV0dXJucyB0aGUgc2luZ2xlIGFic3RyYWN0IG1ldGhvZCB0aGF0IGNv
bnN0aXR1dGVzIHRoZSBzaW5nbGUgZnVuY3Rpb24gCiAJICogY29udHJhY3QgKGFzaWRlIGZyb20g
YW55IHJlZGVjbGFyYXRpb25zIG9mIG1ldGhvZHMgb2YgPGNvZGU+amF2YS5sYW5nLk9iamVjdDwv
Y29kZT4pIAotCSAqIG9mIHRoZSByZWNlaXZlciBpbnRlcmZhY2UgdHlwZSBvciBudWxsIGlmIHRo
ZXJlIG5vIHN1Y2ggY29udHJhY3Qgb3IgaWYgdGhlIHJlY2VpdmVyIAotCSAqIGlzIG5vdCBhbiBp
bnRlcmZhY2UuIAorCSAqIG9mIHRoZSByZWNlaXZlciBpbnRlcmZhY2UgdHlwZSBvciA8Y29kZT5u
dWxsPC9jb2RlPiBpZiB0aGVyZSBubyBzdWNoIGNvbnRyYWN0IG9yIGlmIHRoZSByZWNlaXZlciAK
KwkgKiBpcyBub3QgYW4gaW50ZXJmYWNlLgorCSAqIDxwPgorCSAqIFRoZSByZXR1cm5lZCBtZXRo
b2QgYmluZGluZyBtYXkgYmUgc3ludGhldGljIGFuZCBpdHMge0BsaW5rICNnZXREZWNsYXJpbmdD
bGFzcygpIGRlY2xhcmluZyB0eXBlfQorCSAqIG1heSBiZSBhIHN1cGVyIGludGVyZmFjZSB0eXBl
IG9mIHRoaXMgdHlwZSBiaW5kaW5nLgorCSAqIDwvcD4KIAkgKiAKLQkgKiBAcmV0dXJuIHRoZSBz
aW5nbGUgYWJzdHJhY3QgbWV0aG9kIHRoYXQgcmVwcmVzZW50cyB0aGUgc2luZ2xlIGZ1bmN0aW9u
IGNvbnRyYWN0IAotCSAqIChhc2lkZSBmcm9tIGFueSByZWRlY2xhcmF0aW9ucyBvZiBtZXRob2Rz
IG9mIDxjb2RlPmphdmEubGFuZy5PYmplY3Q8L2NvZGU+KSBvZiAKLQkgKiB0aGlzIGludGVyZmFj
ZSB0eXBlIG9yIG51bGwgaWYgdGhlIHJlY2VpdmVyIGlzIG5vdCBhbiBpbnRlcmZhY2Ugb3IgaWYg
dGhlIHJlY2VpdmVyIAotCSAqIGhhcyBtb3JlIHRoYW4gb25lIGFic3RyYWN0IG1ldGhvZCBvciBu
byBhYnN0cmFjdCBtZXRob2RzLgorCSAqIEByZXR1cm4gdGhlIHNpbmdsZSBhYnN0cmFjdCBtZXRo
b2QgdGhhdCByZXByZXNlbnRzIHRoZSBzaW5nbGUgZnVuY3Rpb24gY29udHJhY3QsIG9yCisJICog
PGNvZGU+bnVsbDwvY29kZT4gaWYgdGhlIHJlY2VpdmVyIGlzIG5vdCBhIGZ1bmN0aW9uYWwgaW50
ZXJmYWNlIHR5cGUKIAkgKgogCSAqIEBzaW5jZSAzLjkgQkVUQV9KQVZBOAogCSAqLwpAQCAtNzc2
LDE1ICs3NzgsNiBAQAogCSAqIEBzaW5jZSAzLjEKIAkgKi8KIAlwdWJsaWMgYm9vbGVhbiBpc0dl
bmVyaWNUeXBlKCk7Ci0KLQkvKioKLQkgKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyB0eXBlIGJpbmRp
bmcgcmVwcmVzZW50cyBhIGZ1bmN0aW9uYWwgaW50ZXJmYWNlIHR5cGUuCi0JICoKLQkgKiBAcmV0
dXJuIDxjb2RlPnRydWU8L2NvZGU+IGlmIHRoaXMgb2JqZWN0IHJlcHJlc2VudHMgYSBmdW5jdGlv
bmFsIGludGVyZmFjZSwKLQkgKiAgICBhbmQgPGNvZGU+ZmFsc2U8L2NvZGU+IG90aGVyd2lzZQot
CSAqIEBzaW5jZSAzLjkgQkVUQV9KQVZBOAotCSAqLwotCXB1YmxpYyBib29sZWFuIGlzRnVuY3Rp
b25hbEludGVyZmFjZSgpOwogCiAJLyoqCiAJICogUmV0dXJucyB3aGV0aGVyIHRoaXMgdHlwZSBi
aW5kaW5nIHJlcHJlc2VudHMgYW4gaW50ZXJmYWNlIHR5cGUuCmRpZmYgLS1naXQgZG9tL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL2RvbS9UeXBlQmluZGluZy5qYXZhIGRvbS9vcmcvZWNsaXBzZS9qZHQv
Y29yZS9kb20vVHlwZUJpbmRpbmcuamF2YQppbmRleCA5MmYxYzEzLi5kN2YwY2ZiIDEwMDY0NAot
LS0gZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9UeXBlQmluZGluZy5qYXZhCisrKyBkb20v
b3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL1R5cGVCaW5kaW5nLmphdmEKQEAgLTExNjcsMjAgKzEx
NjcsNiBAQAogCQlyZXR1cm4gZmFsc2U7CiAJfQogCi0KLQkvKgotCSAqIEBzZWUgSVR5cGVCaW5k
aW5nI2lzRnVuY3Rpb25hbEludGVyZmFjZSgpCi0JICovCi0JcHVibGljIGJvb2xlYW4gaXNGdW5j
dGlvbmFsSW50ZXJmYWNlKCkgewotCQlpZiAoaXNJbnRlcmZhY2UoKSkgewotCQkJUmVmZXJlbmNl
QmluZGluZyByZWZlcmVuY2VCaW5kaW5nID0gKFJlZmVyZW5jZUJpbmRpbmcpdGhpcy5iaW5kaW5n
OwotCQkJaWYgKHJlZmVyZW5jZUJpbmRpbmcgIT0gbnVsbCkgewotCQkJCXJldHVybiByZWZlcmVu
Y2VCaW5kaW5nLmlzRnVuY3Rpb25hbEludGVyZmFjZSh0aGlzLnJlc29sdmVyLnNjb3BlKCkpOwot
CQkJfQotCQl9Ci0JCXJldHVybiBmYWxzZTsKLQl9Ci0KIAkvKgogCSAqIEBzZWUgSVR5cGVCaW5k
aW5nI2lzSW50ZXJmYWNlKCkKIAkgKi8=
</data>

          </attachment>
      

    </bug>

</bugzilla>