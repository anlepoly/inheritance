<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>406859</bug_id>
          
          <creation_ts>2013-04-30 01:22:00 -0400</creation_ts>
          <short_desc>[1.8][compiler] Bad hint that method could be declared static</short_desc>
          <delta_ts>2013-05-20 08:20:13 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>380188</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="shankha banerjee">shankhba</assigned_to>
          <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="57079"
          type_id="1"
          status="+"
          setter="srikanth_sankaran"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2250204</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-04-30 01:22:40 -0400</bug_when>
    <thetext>BETA_JAVA8: 

In the following program, the compiler hints the user that X.foo could
be declared as static. This is wrong and will result in the code not
continuing to compile:

// ---
interface I {
	void foo(int i);
}
public class X {
	public static void main(String[] args) {
		X x = null;
		I i = x::foo;
		try {
			i.foo(10);
		} catch (NullPointerException npe) {
			System.out.println(npe.getMessage());
		}
	}
	int foo(int x) {
		return x;
	}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2250205</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-04-30 01:23:10 -0400</bug_when>
    <thetext>Shankha, please follow up, TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2253437</commentid>
    <comment_count>2</comment_count>
      <attachid>230585</attachid>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2013-05-07 10:40:18 -0400</bug_when>
    <thetext>Created attachment 230585
WIP: Patch for the change including the test case

I needed help on addition of the test case. I have not been able to figure out the correct way to add the test case. I am not able to specify the compliance level. 

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2253795</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-05-08 00:58:56 -0400</bug_when>
    <thetext>(In reply to comment #2)
&gt; Created attachment 230585 [details]
&gt; WIP: Patch for the change including the test case
&gt; 
&gt; I needed help on addition of the test case. I have not been able to figure
&gt; out the correct way to add the test case. I am not able to specify the
&gt; compliance level. 

You have posted the patch in the wrong bug, it should have been attached to
bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=406619.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2255914</commentid>
    <comment_count>4</comment_count>
      <attachid>230852</attachid>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2013-05-13 07:54:30 -0400</bug_when>
    <thetext>Created attachment 230852
Patch

RunAllJDTCore tests and RunAllJava8Tests are fine. 

I have a question regarding 

if (this.haveReceiver &amp;&amp; someMethod != null &amp;&amp; !someMethod.isStatic() &amp;&amp; isMethodReference) {
            AbstractMethodDeclaration srcMethod = someMethod.sourceMethod();
            if(srcMethod != null &amp;&amp; srcMethod.isMethod() &amp;&amp; (srcMethod.bits &amp; ASTNode.CanBeStatic) != 0)
                srcMethod.bits &amp;= ~ASTNode.CanBeStatic;
        }

This is the core change in ReferenceExpression.java. Is the check of isMethodReference necessary. I could not think of a case where it would be on along with this.haveReceiver. 

Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2256468</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-05-14 01:28:21 -0400</bug_when>
    <thetext>Review comments:

(1) We still emit an incorrect warning for:

/ ---
interface I {
	void doit (X x);
}

public class X {
	void foo() {
		return;
	}
	
	public static void main(String[] args) {
		I i = X::foo; 
	}
}

(2) Our coding practice calls for a space between if and &apos;(&apos;


(3) 
In reply to comment #4)

&gt; Is the check of
&gt; isMethodReference necessary. I could not think of a case where it would be
&gt; on along with this.haveReceiver. 

I don&apos;t think it is needed.

(4) In
if(srcMethod != null &amp;&amp; srcMethod.isMethod() &amp;&amp; (srcMethod.bits &amp; ASTNode.CanBeStatic) != 0)
                srcMethod.bits &amp;= ~ASTNode.CanBeStatic;

the check (srcMethod.bits &amp; ASTNode.CanBeStatic) != 0) is wasteful. please
get rid of it.

(5) This problem may be unsolvable in he general case when separate compilation
 units are involved.

For example:

// ---

public class Y {
	void foo() {  
		return;
	}
}

// --
interface I {
	void doit ();
}

public class X {
	void foo() {
		return;
	}
	
	public static void main(String[] args) {
		I i = new Y()::foo; 
	}
}

This set of files actually trigger an NPE. In sourceMethod()
the statement:

AbstractMethodDeclaration[] methods = sourceType.scope.referenceContext.methods;
	
triggers an NPE because scope is nulled out by org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.cleanUp()

So the above statement should conservatively be changed to:

AbstractMethodDeclaration[] methods = sourceType.scope == null ? null : sourceType.scope.referenceContext.methods;

Please make this change and also add a test for this scenario.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2258529</commentid>
    <comment_count>6</comment_count>
      <attachid>231130</attachid>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2013-05-17 02:31:38 -0400</bug_when>
    <thetext>Created attachment 231130
Patch

About the example:
// ---

public class Y {
	void foo() {  
		return;
	}
}

// --
interface I {
	void doit ();
}

public class X {
	void foo() {
		return;
	}
	
	public static void main(String[] args) {
		I i = new Y()::foo; 
	}
}

As you said this involves two different compilation units. The compiler provides a hint that the function &quot;foo&quot; belonging to class Y can be marked as static. If we mark it as static we get a error:

The method foo() from the type Y should be accessed in a static . 

So somehow the information from one compilation unit is made available for 
the other compilation unit.  


Request to review the patch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2258531</commentid>
    <comment_count>7</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2013-05-17 02:37:31 -0400</bug_when>
    <thetext>(In reply to comment #6)
&gt; Created attachment 231130 [details]
&gt; Patch
&gt; 
&gt; About the example:
&gt; // ---
&gt; 
&gt; public class Y {
&gt; 	void foo() {  
&gt; 		return;
&gt; 	}
&gt; }
&gt; 
&gt; // --
&gt; interface I {
&gt; 	void doit ();
&gt; }
&gt; 
&gt; public class X {
&gt; 	void foo() {
&gt; 		return;
&gt; 	}
&gt; 	
&gt; 	public static void main(String[] args) {
&gt; 		I i = new Y()::foo; 
&gt; 	}
&gt; }
&gt; 
&gt; As you said this involves two different compilation units. The compiler
&gt; provides a hint that the function &quot;foo&quot; belonging to class Y can be marked
&gt; as static. If we mark it as static we get a error:
&gt; 
&gt; The method foo() from the type Y should be accessed in a static . 
&gt; 
&gt; So somehow the information from one compilation unit is made available for 
&gt; the other compilation unit.  
&gt; 
&gt; 
&gt; Request to review the patch.

RunAllJava8Tests were fine.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2259372</commentid>
    <comment_count>8</comment_count>
      <attachid>231202</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-05-20 03:00:39 -0400</bug_when>
    <thetext>Created attachment 231202
Potentially simpler patch

Shankha, please take a look at this patch:

(1) It simplifies and merges two blocks of code into one.
(2) Removes incorrect comment about haveReceiver - true means
there is a captured object and false means pure type and not
vice versa as the comment in the patch indicates.

Please also add a test for comment#5 point#5 to prove that the
code change in MethodBinding solves the NPE issue.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2259575</commentid>
    <comment_count>9</comment_count>
      <attachid>231214</attachid>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2013-05-20 07:54:21 -0400</bug_when>
    <thetext>Created attachment 231214
New patch to add the test case which lead to NPE. Replacing: &quot;Potentially simpler patch&quot; attachment

I have added the test case.

RunAllJava8 tests is clean.

Do I need test406859d and test406859c both or I should remove test406859c ?

The error condition (described below) is being hit by test384750z, therefore not adding any other test case.

ReferenceExpression.java

if (this.binding.isStatic()) {
        	if (this.binding.declaringClass != this.receiverType)
        		scope.problemReporter().indirectAccessToStaticMethod(this, this.binding);
        }

Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2259582</commentid>
    <comment_count>10</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2013-05-20 08:09:51 -0400</bug_when>
    <thetext>Please ignore my earlier patch attachment 231214. Only the test case got posted. I will repost the patch. 

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2259583</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-05-20 08:12:48 -0400</bug_when>
    <thetext>Fix and test released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=4d3e86023b52d983561e88d8a94124c1505fe619

Thanks Shankha</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2259585</commentid>
    <comment_count>12</comment_count>
      <attachid>231214</attachid>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2013-05-20 08:14:32 -0400</bug_when>
    <thetext>Comment on attachment 231214
New patch to add the test case which lead to NPE. Replacing: &quot;Potentially simpler patch&quot; attachment

&gt;diff --git a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
&gt;index d00f07a..01709df 100644
&gt;--- a/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
&gt;+++ b/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression/NegativeLambdaExpressionsTest.java
&gt;@@ -6535,4 +6535,131 @@
&gt; 		);
&gt; }
&gt;+//https://bugs.eclipse.org/bugs/show_bug.cgi?id=406859,  [1.8][compiler] Bad hint that method could be declared static
&gt;+public void test406859a() {
&gt;+		Map compilerOptions = getCompilerOptions();
&gt;+		compilerOptions.put(CompilerOptions.OPTION_ReportMethodCanBeStatic, CompilerOptions.ERROR);
&gt;+		compilerOptions.put(CompilerOptions.OPTION_ReportMethodCanBePotentiallyStatic, CompilerOptions.ERROR);
&gt;+		this.runNegativeTest(
&gt;+			new String[] {
&gt;+					&quot;X.java&quot;,
&gt;+					&quot;interface I {\n&quot; +
&gt;+					&quot;	int foo(int i);\n&quot; +
&gt;+					&quot;}\n&quot; +
&gt;+					&quot;public class X {\n&quot; +
&gt;+					&quot;	public static void main(String[] args) {\n&quot; +
&gt;+					&quot;		X x = new X();\n&quot; +
&gt;+					&quot;		I i = x::foo;\n&quot; +
&gt;+					&quot;		i.foo(3);\n&quot; +
&gt;+					&quot;	}\n&quot; +
&gt;+					&quot;	int foo(int x) {\n&quot; +
&gt;+					&quot;		return x;\n&quot; +
&gt;+					&quot;	}   \n&quot; +
&gt;+					&quot;}\n&quot;
&gt;+			},
&gt;+			&quot;&quot;,
&gt;+			null /* no extra class libraries */,
&gt;+			true /* flush output directory */,
&gt;+			compilerOptions /* custom options */
&gt;+		);
&gt;+}
&gt;+//https://bugs.eclipse.org/bugs/show_bug.cgi?id=406859,  [1.8][compiler] Bad hint that method could be declared static
&gt;+public void test406859b() {
&gt;+		Map compilerOptions = getCompilerOptions();
&gt;+		compilerOptions.put(CompilerOptions.OPTION_ReportMethodCanBeStatic, CompilerOptions.ERROR);
&gt;+		compilerOptions.put(CompilerOptions.OPTION_ReportMethodCanBePotentiallyStatic, CompilerOptions.ERROR);
&gt;+		this.runNegativeTest(
&gt;+			new String[] {
&gt;+					&quot;X.java&quot;,
&gt;+					&quot;interface I {\n&quot; +
&gt;+					&quot;	void doit (Y y);\n&quot; +
&gt;+					&quot;}\n&quot; +
&gt;+					&quot;\n&quot; +
&gt;+					&quot;class Y {\n&quot; +
&gt;+					&quot;	void foo() {\n&quot; +
&gt;+					&quot;		return;\n&quot; +
&gt;+					&quot;	}\n&quot; +
&gt;+					&quot;}\n&quot; +
&gt;+					&quot;\n&quot; +
&gt;+					&quot;public class X {\n&quot; +
&gt;+					&quot;	public static void main(String[] args) {\n&quot; +
&gt;+					&quot;		I i = Y::foo; \n&quot; +
&gt;+					&quot;		Y y = new Y();\n&quot; +
&gt;+					&quot;		i.doit(y);\n&quot; +
&gt;+					&quot;	}\n&quot; +
&gt;+					&quot;}\n&quot;
&gt;+			},
&gt;+			&quot;&quot;,
&gt;+			null /* no extra class libraries */,
&gt;+			true /* flush output directory */,
&gt;+			compilerOptions /* custom options */
&gt;+		);
&gt;+}
&gt;+//https://bugs.eclipse.org/bugs/show_bug.cgi?id=406859,  [1.8][compiler] Bad hint that method could be declared static
&gt;+public void test406859c() {
&gt;+		Map compilerOptions = getCompilerOptions();
&gt;+		compilerOptions.put(CompilerOptions.OPTION_ReportMethodCanBeStatic, CompilerOptions.ERROR);
&gt;+		compilerOptions.put(CompilerOptions.OPTION_ReportMethodCanBePotentiallyStatic, CompilerOptions.ERROR);
&gt;+		this.runNegativeTest(
&gt;+			new String[] {
&gt;+					&quot;X.java&quot;,
&gt;+					&quot;interface I {\n&quot; +
&gt;+					&quot;	void doit ();\n&quot; +
&gt;+					&quot;}\n&quot; +
&gt;+					&quot;\n&quot; +
&gt;+					&quot;class Y {\n&quot; +
&gt;+					&quot;	void foo() {  \n&quot; +
&gt;+					&quot;		return;\n&quot; +
&gt;+					&quot;	}\n&quot; +
&gt;+					&quot;}\n&quot; +
&gt;+					&quot;\n&quot; +
&gt;+					&quot;public class X {\n&quot; +
&gt;+					&quot;	public static void main(String[] args) {\n&quot; +
&gt;+					&quot;		I i = new Y()::foo;\n&quot; +
&gt;+					&quot;		i.doit();\n&quot; +
&gt;+					&quot;	}\n&quot; +
&gt;+					&quot;}\n&quot;
&gt;+			},
&gt;+			&quot;&quot;,
&gt;+			null /* no extra class libraries */,
&gt;+			true /* flush output directory */,
&gt;+			compilerOptions /* custom options */
&gt;+		);
&gt;+}
&gt;+//https://bugs.eclipse.org/bugs/show_bug.cgi?id=406859,  [1.8][compiler] Bad hint that method could be declared static
&gt;+public void test406859d() {
&gt;+	Map compilerOptions = getCompilerOptions();
&gt;+	compilerOptions.put(CompilerOptions.OPTION_ReportMethodCanBeStatic, CompilerOptions.ERROR);
&gt;+	compilerOptions.put(CompilerOptions.OPTION_ReportMethodCanBePotentiallyStatic, CompilerOptions.WARNING);
&gt;+	this.runNegativeTest(
&gt;+		new String[] {
&gt;+				&quot;Y.java&quot;,
&gt;+				&quot;public class Y {\n&quot; +
&gt;+				&quot;	void foo() {\n&quot; +
&gt;+				&quot;		return;\n&quot; +
&gt;+				&quot;	}\n&quot; +
&gt;+				&quot;}&quot;,
&gt;+				&quot;X.java&quot;,
&gt;+				&quot;interface I {\n&quot; +
&gt;+				&quot;	void doit ();\n&quot; +
&gt;+				&quot;}\n&quot; +
&gt;+				&quot;\n&quot; +
&gt;+				&quot;public class X {\n&quot; +
&gt;+				&quot;	public static void main(String[] args) {\n&quot; +
&gt;+				&quot;		I i = new Y()::foo;\n&quot; +
&gt;+				&quot;		i.doit();\n&quot; +
&gt;+				&quot;	}\n&quot; +
&gt;+				&quot;}\n&quot;
&gt;+		},
&gt;+		&quot;----------\n&quot; +
&gt;+		&quot;1. WARNING in Y.java (at line 2)\n&quot; +
&gt;+		&quot;	void foo() {\n&quot; +
&gt;+		&quot;	     ^^^^^\n&quot; +
&gt;+		&quot;The method foo() from the type Y can potentially be declared as static\n&quot; +
&gt;+		&quot;----------\n&quot;,
&gt;+		null /* no extra class libraries */,
&gt;+		true /* flush output directory */,
&gt;+		compilerOptions /* custom options */
&gt;+	);
&gt;+}
&gt; public static Class testClass() {
&gt; 	return NegativeLambdaExpressionsTest.class;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2259589</commentid>
    <comment_count>13</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2013-05-20 08:20:13 -0400</bug_when>
    <thetext>(In reply to comment #12)
Please ignore comment #12.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>230585</attachid>
            <date>2013-05-07 10:40:00 -0400</date>
            <delta_ts>2013-05-08 01:00:40 -0400</delta_ts>
            <desc>WIP: Patch for the change including the test case</desc>
            <filename>patch.patch</filename>
            <type>text/plain</type>
            <size>3730</size>
            <attacher name="shankha banerjee">shankhba</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0Fic3RyYWN0UmVncmVz
c2lvblRlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9v
cmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0Fic3RyYWN0UmVn
cmVzc2lvblRlc3QuamF2YQppbmRleCBmMDAxMmRjLi5iMGNmYzg2IDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9BYnN0cmFjdFJlZ3Jlc3Npb25UZXN0LmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pk
dC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vQWJzdHJhY3RSZWdyZXNzaW9uVGVzdC5q
YXZhCkBAIC0xMzcwLDYgKzEzNzAsMjggQEAgcHJvdGVjdGVkIHN0YXRpYyBjbGFzcyBKYXZhY1Rl
c3RPcHRpb25zIHsKIAkJCS8vIGphdmFjIG9wdGlvbnMKIAkJCUphdmFjVGVzdE9wdGlvbnMuREVG
QVVMVCAvKiBkZWZhdWx0IGphdmFjIHRlc3Qgb3B0aW9ucyAqLyk7CiAJfQorCXByb3RlY3RlZCB2
b2lkIHJ1bkNvbmZvcm1UZXN0KFN0cmluZ1tdIHRlc3RGaWxlcywgU3RyaW5nW10gdm1Bcmd1bWVu
dHMpIHsKKwkJcnVuVGVzdCgKKwkJCS8vIHRlc3QgZGlyZWN0b3J5IHByZXBhcmF0aW9uCisJCQl0
cnVlIC8qIGZsdXNoIG91dHB1dCBkaXJlY3RvcnkgKi8sCisJCQl0ZXN0RmlsZXMgLyogdGVzdCBm
aWxlcyAqLywKKwkJCS8vIGNvbXBpbGVyIG9wdGlvbnMKKwkJCW51bGwgLyogbm8gY2xhc3MgbGli
cmFyaWVzICovLAorCQkJbnVsbCAvKiBubyBjdXN0b20gb3B0aW9ucyAqLywKKwkJCWZhbHNlIC8q
IGRvIG5vdCBwZXJmb3JtIHN0YXRlbWVudHMgcmVjb3ZlcnkgKi8sCisJCQludWxsIC8qIG5vIGN1
c3RvbSByZXF1ZXN0b3IgKi8sCisJCQkvLyBjb21waWxlciByZXN1bHRzCisJCQlmYWxzZSAvKiBl
eHBlY3Rpbmcgbm8gY29tcGlsZXIgZXJyb3JzICovLAorCQkJbnVsbCAvKiBkbyBub3QgY2hlY2sg
Y29tcGlsZXIgbG9nICovLAorCQkJLy8gcnVudGltZSBvcHRpb25zCisJCQlmYWxzZSAvKiBkbyBu
b3QgZm9yY2UgZXhlY3V0aW9uICovLAorCQkJdm1Bcmd1bWVudHMgLyogdm0gYXJndW1lbnRzICov
LAorCQkJLy8gcnVudGltZSByZXN1bHRzCisJCQludWxsIC8qIGV4cGVjdGVkIG91dHB1dCBzdHJp
bmcgKi8sCisJCQludWxsIC8qIGRvIG5vdCBjaGVjayBlcnJvciBzdHJpbmcgKi8sCisJCQkvLyBq
YXZhYyBvcHRpb25zCisJCQlKYXZhY1Rlc3RPcHRpb25zLkRFRkFVTFQgLyogZGVmYXVsdCBqYXZh
YyB0ZXN0IG9wdGlvbnMgKi8pOworCX0KIAlwcm90ZWN0ZWQgdm9pZCBydW5Db25mb3JtVGVzdChT
dHJpbmdbXSB0ZXN0RmlsZXMsIE1hcCBjdXN0b21PcHRpb25zKSB7CiAJCXJ1blRlc3QoCiAJCQkv
LyB0ZXN0IGRpcmVjdG9yeSBwcmVwYXJhdGlvbgpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBp
bGVyL3JlZ3Jlc3Npb24vSW50ZXJmYWNlTWV0aG9kc1Rlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21w
aWxlci9yZWdyZXNzaW9uL0ludGVyZmFjZU1ldGhvZHNUZXN0LmphdmEKaW5kZXggYzlmMDRmOS4u
YTQxNmU0NCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIv
c3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vSW50ZXJm
YWNlTWV0aG9kc1Rlc3QuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21w
aWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9J
bnRlcmZhY2VNZXRob2RzVGVzdC5qYXZhCkBAIC0xNzQyLDYgKzE3NDIsMTkgQEAgcHVibGljIGNs
YXNzIEludGVyZmFjZU1ldGhvZHNUZXN0IGV4dGVuZHMgQWJzdHJhY3RDb21wYXJhYmxlVGVzdCB7
CiAJCQkJIkNhbm5vdCB1c2Ugc3VwZXIgaW4gYSBzdGF0aWMgY29udGV4dFxuIiArIAogCQkJCSIt
LS0tLS0tLS0tXG4iKTsKIAl9CisgICAgLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mv
c2hvd19idWcuY2dpP2lkPTQwNjYxOQorCXB1YmxpYyB2b2lkIHRlc3RTdGF0aWNNZXRob2QxNCgp
IHsKKwkJcnVuQ29uZm9ybVRlc3QoCisJCQluZXcgU3RyaW5nW10geworCQkJCSJYLmphdmEiLAor
CQkJCSJpbnRlcmZhY2UgWCB7XG4iICsKKwkJCQkiCWRlZmF1bHQgaW50IGZvbygpIHtcbiIgKwor
CQkJCSIJCXJldHVybiAxMDtcbiIgKworCQkJCSIJfVxuIiArCisJCQkJIn1cbiIsCisJCQl9LAor
CQkJbmV3IFN0cmluZ1tdIHsiLURjb21wbGlhbmNlPTEuOCJ9KTsKKwl9CiAKIAkvLyBjbGFzcyBp
bXBsZW1lbnRzIGludGVyZmFjZSB3aXRoIGRlZmF1bHQgbWV0aG9kLiAKIAkvLyAtIHN5bnRoLiBh
Y2Nlc3MgbmVlZGVkIGZvciB2aXNpYmlsaXR5IHJlYXNvbnMKZGlmZiAtLWdpdCBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvTWV0aG9kRGVjbGFyYXRpb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTWV0aG9kRGVjbGFyYXRpb24u
amF2YQppbmRleCBjNjg1MDBkLi5mNmFhY2M3IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L01ldGhv
ZERlY2xhcmF0aW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9NZXRob2REZWNsYXJhdGlvbi5qYXZh
CkBAIC0xNDUsNyArMTQ1LDcgQEAgcHVibGljIGNsYXNzIE1ldGhvZERlY2xhcmF0aW9uIGV4dGVu
ZHMgQWJzdHJhY3RNZXRob2REZWNsYXJhdGlvbiB7CiAJCQkvLyBjaGVjayB1bnVzZWQgcGFyYW1l
dGVycwogCQkJdGhpcy5zY29wZS5jaGVja1VudXNlZFBhcmFtZXRlcnModGhpcy5iaW5kaW5nKTsK
IAkJCS8vIGNoZWNrIGlmIHRoZSBtZXRob2QgY291bGQgaGF2ZSBiZWVuIHN0YXRpYwotCQkJaWYg
KCF0aGlzLmJpbmRpbmcuaXNTdGF0aWMoKSAmJiAodGhpcy5iaXRzICYgQVNUTm9kZS5DYW5CZVN0
YXRpYykgIT0gMCkgeworCQkJaWYgKCF0aGlzLmJpbmRpbmcuaXNTdGF0aWMoKSAmJiAodGhpcy5i
aXRzICYgQVNUTm9kZS5DYW5CZVN0YXRpYykgIT0gMCAmJiAhdGhpcy5pc0RlZmF1bHRNZXRob2Qo
KSkgewogCQkJCWlmKCF0aGlzLmJpbmRpbmcuaXNPdmVycmlkaW5nKCkgJiYgIXRoaXMuYmluZGlu
Zy5pc0ltcGxlbWVudGluZygpKSB7CiAJCQkJCWlmICh0aGlzLmJpbmRpbmcuaXNQcml2YXRlKCkg
fHwgdGhpcy5iaW5kaW5nLmlzRmluYWwoKSB8fCB0aGlzLmJpbmRpbmcuZGVjbGFyaW5nQ2xhc3Mu
aXNGaW5hbCgpKSB7CiAJCQkJCQl0aGlzLnNjb3BlLnByb2JsZW1SZXBvcnRlcigpLm1ldGhvZENh
bkJlRGVjbGFyZWRTdGF0aWModGhpcyk7Cg==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>230852</attachid>
            <date>2013-05-13 07:54:00 -0400</date>
            <delta_ts>2013-05-17 02:31:38 -0400</delta_ts>
            <desc>Patch</desc>
            <filename>patch.patch</filename>
            <type>text/plain</type>
            <size>2869</size>
            <attacher name="shankha banerjee">shankhba</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRh
RXhwcmVzc2lvbnNUZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxl
ci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OZWdh
dGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCmluZGV4IGQwMGYwN2EuLmU4MjkxNDIgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRhRXhw
cmVzc2lvbnNUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGls
ZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVn
YXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YQpAQCAtNjUzNCw2ICs2NTM0LDM0IEBAIHB1
YmxpYyB2b2lkIHRlc3Q0MDY3NzMoKSB7CiAJCQljb21waWxlck9wdGlvbnMgLyogY3VzdG9tIG9w
dGlvbnMgKi8KIAkJKTsKIH0KKy8vaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19i
dWcuY2dpP2lkPTQwNjg1OSwgIFsxLjhdW2NvbXBpbGVyXSBCYWQgaGludCB0aGF0IG1ldGhvZCBj
b3VsZCBiZSBkZWNsYXJlZCBzdGF0aWMKK3B1YmxpYyB2b2lkIHRlc3Q0MDY4NTkoKSB7CisJCU1h
cCBjb21waWxlck9wdGlvbnMgPSBnZXRDb21waWxlck9wdGlvbnMoKTsKKwkJY29tcGlsZXJPcHRp
b25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydE1ldGhvZENhbkJlU3RhdGljLCBD
b21waWxlck9wdGlvbnMuRVJST1IpOworCQljb21waWxlck9wdGlvbnMucHV0KENvbXBpbGVyT3B0
aW9ucy5PUFRJT05fUmVwb3J0TWV0aG9kQ2FuQmVQb3RlbnRpYWxseVN0YXRpYywgQ29tcGlsZXJP
cHRpb25zLkVSUk9SKTsKKwkJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCQluZXcgU3RyaW5nW10g
eworCQkJCQkiWC5qYXZhIiwKKwkJCQkJImludGVyZmFjZSBJIHtcbiIgKworCQkJCQkiCWludCBm
b28oaW50IGkpO1xuIiArCisJCQkJCSJ9XG4iICsKKwkJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIg
KworCQkJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKwor
CQkJCQkiCQlYIHggPSBuZXcgWCgpO1xuIiArCisJCQkJCSIJCUkgaSA9IHg6OmZvbztcbiIgKwor
CQkJCQkiCQlpLmZvbygzKTtcbiIgKworCQkJCQkiCX1cbiIgKworCQkJCQkiCWludCBmb28oaW50
IHgpIHtcbiIgKworCQkJCQkiCQlyZXR1cm4geDtcbiIgKworCQkJCQkiCX0gICBcbiIgKworCQkJ
CQkifVxuIgorCQkJfSwKKwkJCSIiLAorCQkJbnVsbCAvKiBubyBleHRyYSBjbGFzcyBsaWJyYXJp
ZXMgKi8sCisJCQl0cnVlIC8qIGZsdXNoIG91dHB1dCBkaXJlY3RvcnkgKi8sCisJCQljb21waWxl
ck9wdGlvbnMgLyogY3VzdG9tIG9wdGlvbnMgKi8KKwkJKTsKK30KIHB1YmxpYyBzdGF0aWMgQ2xh
c3MgdGVzdENsYXNzKCkgewogCXJldHVybiBOZWdhdGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5j
bGFzczsKIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUmVmZXJlbmNlRXhwcmVzc2lvbi5qYXZh
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FzdC9SZWZlcmVuY2VFeHByZXNzaW9uLmphdmEKaW5kZXggNGE0YTMxNC4uNWJi
YTUzOCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9SZWZlcmVuY2VFeHByZXNzaW9uLmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FzdC9SZWZlcmVuY2VFeHByZXNzaW9uLmphdmEKQEAgLTM0MCw2ICszNDAsMTIg
QEAgcHVibGljIGNsYXNzIFJlZmVyZW5jZUV4cHJlc3Npb24gZXh0ZW5kcyBGdW5jdGlvbmFsRXhw
cmVzc2lvbiBpbXBsZW1lbnRzIEludm9jYXQKICAgICAJCXNjb3BlLmNoZWNrQXBwcm9wcmlhdGVN
ZXRob2RBZ2FpbnN0U3VwZXJzKHRoaXMuc2VsZWN0b3IsIHNvbWVNZXRob2QsIHRoaXMuZGVzY3Jp
cHRvci5wYXJhbWV0ZXJzLCB0aGlzKTsKICAgICAJfQogCisgICAgICAgIGlmICh0aGlzLmhhdmVS
ZWNlaXZlciAmJiBzb21lTWV0aG9kICE9IG51bGwgJiYgIXNvbWVNZXRob2QuaXNTdGF0aWMoKSAm
JiBpc01ldGhvZFJlZmVyZW5jZSkgeworICAgICAgICAgICAgQWJzdHJhY3RNZXRob2REZWNsYXJh
dGlvbiBzcmNNZXRob2QgPSBzb21lTWV0aG9kLnNvdXJjZU1ldGhvZCgpOworICAgICAgICAgICAg
aWYoc3JjTWV0aG9kICE9IG51bGwgJiYgc3JjTWV0aG9kLmlzTWV0aG9kKCkgJiYgKHNyY01ldGhv
ZC5iaXRzICYgQVNUTm9kZS5DYW5CZVN0YXRpYykgIT0gMCkKKyAgICAgICAgICAgICAgICBzcmNN
ZXRob2QuYml0cyAmPSB+QVNUTm9kZS5DYW5CZVN0YXRpYzsKKyAgICAgICAgfQorCiAgICAgICAg
IE1ldGhvZEJpbmRpbmcgYW5vdGhlck1ldGhvZCA9IG51bGw7CiAgICAgICAgIGlmICghdGhpcy5o
YXZlUmVjZWl2ZXIgJiYgaXNNZXRob2RSZWZlcmVuY2UgJiYgcGFyYW1ldGVyc0xlbmd0aCA+IDAp
IHsKICAgICAgICAgCWZpbmFsIFR5cGVCaW5kaW5nIHBvdGVudGlhbFJlY2VpdmVyID0gZGVzY3Jp
cHRvclBhcmFtZXRlcnNbMF07Cg==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>231130</attachid>
            <date>2013-05-17 02:31:00 -0400</date>
            <delta_ts>2013-05-20 07:54:21 -0400</delta_ts>
            <desc>Patch</desc>
            <filename>patch.patch</filename>
            <type>text/plain</type>
            <size>7513</size>
            <attacher name="shankha banerjee">shankhba</attacher>
            
              <data encoding="base64">RnJvbSA1MzBmYmRjNzVmMjJiNzk1YzIyYTBlZTFjNzhiNzRmMTY4NmM5MTBhIE1vbiBTZXAgMTcg
MDA6MDA6MDAgMjAwMQpGcm9tOiBzaGFua2hhIDxzaGFua2hiQGluLmlibS5jb20+CkRhdGU6IE1v
biwgMTMgTWF5IDIwMTMgMTc6MDQ6MjAgKzA1MzAKU3ViamVjdDogW1BBVENIXSBXb3JrcwoKLS0t
CiAuLi4vcmVncmVzc2lvbi9OZWdhdGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhICB8IDkx
ICsrKysrKysrKysrKysrKysrKysrKysKIC4uLi9pbnRlcm5hbC9jb21waWxlci9hc3QvUmVmZXJl
bmNlRXhwcmVzc2lvbi5qYXZhIHwgMTkgKysrKy0KIC4uLi9pbnRlcm5hbC9jb21waWxlci9sb29r
dXAvTWV0aG9kQmluZGluZy5qYXZhICAgIHwgIDYgKy0KIDMgZmlsZXMgY2hhbmdlZCwgMTE0IGlu
c2VydGlvbnMoKyksIDIgZGVsZXRpb25zKC0pCgpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBp
bGVyL3JlZ3Jlc3Npb24vTmVnYXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YSBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90
ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRhRXhwcmVzc2lvbnNUZXN0Lmph
dmEKaW5kZXggZDAwZjA3YS4uM2YyMGU5OSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vTmVnYXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YQorKysgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OZWdhdGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5q
YXZhCkBAIC02NTM0LDYgKzY1MzQsOTcgQEAgcHVibGljIHZvaWQgdGVzdDQwNjc3MygpIHsKIAkJ
CWNvbXBpbGVyT3B0aW9ucyAvKiBjdXN0b20gb3B0aW9ucyAqLwogCQkpOwogfQorLy9odHRwczov
L2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDA2ODU5LCAgWzEuOF1bY29t
cGlsZXJdIEJhZCBoaW50IHRoYXQgbWV0aG9kIGNvdWxkIGJlIGRlY2xhcmVkIHN0YXRpYworcHVi
bGljIHZvaWQgdGVzdDQwNjg1OWEoKSB7CisJCU1hcCBjb21waWxlck9wdGlvbnMgPSBnZXRDb21w
aWxlck9wdGlvbnMoKTsKKwkJY29tcGlsZXJPcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BU
SU9OX1JlcG9ydE1ldGhvZENhbkJlU3RhdGljLCBDb21waWxlck9wdGlvbnMuRVJST1IpOworCQlj
b21waWxlck9wdGlvbnMucHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJT05fUmVwb3J0TWV0aG9kQ2Fu
QmVQb3RlbnRpYWxseVN0YXRpYywgQ29tcGlsZXJPcHRpb25zLkVSUk9SKTsKKwkJdGhpcy5ydW5O
ZWdhdGl2ZVRlc3QoCisJCQluZXcgU3RyaW5nW10geworCQkJCQkiWC5qYXZhIiwKKwkJCQkJImlu
dGVyZmFjZSBJIHtcbiIgKworCQkJCQkiCWludCBmb28oaW50IGkpO1xuIiArCisJCQkJCSJ9XG4i
ICsKKwkJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJCQkiCXB1YmxpYyBzdGF0aWMgdm9p
ZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKworCQkJCQkiCQlYIHggPSBuZXcgWCgpO1xuIiAr
CisJCQkJCSIJCUkgaSA9IHg6OmZvbztcbiIgKworCQkJCQkiCQlpLmZvbygzKTtcbiIgKworCQkJ
CQkiCX1cbiIgKworCQkJCQkiCWludCBmb28oaW50IHgpIHtcbiIgKworCQkJCQkiCQlyZXR1cm4g
eDtcbiIgKworCQkJCQkiCX0gICBcbiIgKworCQkJCQkifVxuIgorCQkJfSwKKwkJCSIiLAorCQkJ
bnVsbCAvKiBubyBleHRyYSBjbGFzcyBsaWJyYXJpZXMgKi8sCisJCQl0cnVlIC8qIGZsdXNoIG91
dHB1dCBkaXJlY3RvcnkgKi8sCisJCQljb21waWxlck9wdGlvbnMgLyogY3VzdG9tIG9wdGlvbnMg
Ki8KKwkJKTsKK30KKy8vaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dp
P2lkPTQwNjg1OSwgIFsxLjhdW2NvbXBpbGVyXSBCYWQgaGludCB0aGF0IG1ldGhvZCBjb3VsZCBi
ZSBkZWNsYXJlZCBzdGF0aWMKK3B1YmxpYyB2b2lkIHRlc3Q0MDY4NTliKCkgeworCQlNYXAgY29t
cGlsZXJPcHRpb25zID0gZ2V0Q29tcGlsZXJPcHRpb25zKCk7CisJCWNvbXBpbGVyT3B0aW9ucy5w
dXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9SZXBvcnRNZXRob2RDYW5CZVN0YXRpYywgQ29tcGls
ZXJPcHRpb25zLkVSUk9SKTsKKwkJY29tcGlsZXJPcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMu
T1BUSU9OX1JlcG9ydE1ldGhvZENhbkJlUG90ZW50aWFsbHlTdGF0aWMsIENvbXBpbGVyT3B0aW9u
cy5FUlJPUik7CisJCXRoaXMucnVuTmVnYXRpdmVUZXN0KAorCQkJbmV3IFN0cmluZ1tdIHsKKwkJ
CQkJIlguamF2YSIsCisJCQkJCSJpbnRlcmZhY2UgSSB7XG4iICsKKwkJCQkJIgl2b2lkIGRvaXQg
KFkgeSk7XG4iICsKKwkJCQkJIn1cbiIgKworCQkJCQkiXG4iICsKKwkJCQkJImNsYXNzIFkge1xu
IiArCisJCQkJCSIJdm9pZCBmb28oKSB7XG4iICsKKwkJCQkJIgkJcmV0dXJuO1xuIiArCisJCQkJ
CSIJfVxuIiArCisJCQkJCSJ9XG4iICsKKwkJCQkJIlxuIiArCisJCQkJCSJwdWJsaWMgY2xhc3Mg
WCB7XG4iICsKKwkJCQkJIglwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7
XG4iICsKKwkJCQkJIgkJSSBpID0gWTo6Zm9vOyBcbiIgKworCQkJCQkiCQlZIHkgPSBuZXcgWSgp
O1xuIiArCisJCQkJCSIJCWkuZG9pdCh5KTtcbiIgKworCQkJCQkiCX1cbiIgKworCQkJCQkifVxu
IgorCQkJfSwKKwkJCSIiLAorCQkJbnVsbCAvKiBubyBleHRyYSBjbGFzcyBsaWJyYXJpZXMgKi8s
CisJCQl0cnVlIC8qIGZsdXNoIG91dHB1dCBkaXJlY3RvcnkgKi8sCisJCQljb21waWxlck9wdGlv
bnMgLyogY3VzdG9tIG9wdGlvbnMgKi8KKwkJKTsKK30KKy8vaHR0cHM6Ly9idWdzLmVjbGlwc2Uu
b3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQwNjg1OSwgIFsxLjhdW2NvbXBpbGVyXSBCYWQgaGlu
dCB0aGF0IG1ldGhvZCBjb3VsZCBiZSBkZWNsYXJlZCBzdGF0aWMKK3B1YmxpYyB2b2lkIHRlc3Q0
MDY4NTljKCkgeworCQlNYXAgY29tcGlsZXJPcHRpb25zID0gZ2V0Q29tcGlsZXJPcHRpb25zKCk7
CisJCWNvbXBpbGVyT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9SZXBvcnRNZXRo
b2RDYW5CZVN0YXRpYywgQ29tcGlsZXJPcHRpb25zLkVSUk9SKTsKKwkJY29tcGlsZXJPcHRpb25z
LnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydE1ldGhvZENhbkJlUG90ZW50aWFsbHlT
dGF0aWMsIENvbXBpbGVyT3B0aW9ucy5FUlJPUik7CisJCXRoaXMucnVuTmVnYXRpdmVUZXN0KAor
CQkJbmV3IFN0cmluZ1tdIHsKKwkJCQkJIlguamF2YSIsCisJCQkJCSJpbnRlcmZhY2UgSSB7XG4i
ICsKKwkJCQkJIgl2b2lkIGRvaXQgKCk7XG4iICsKKwkJCQkJIn1cbiIgKworCQkJCQkiXG4iICsK
KwkJCQkJImNsYXNzIFkge1xuIiArCisJCQkJCSIJdm9pZCBmb28oKSB7ICBcbiIgKworCQkJCQki
CQlyZXR1cm47XG4iICsKKwkJCQkJIgl9XG4iICsKKwkJCQkJIn1cbiIgKworCQkJCQkiXG4iICsK
KwkJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBt
YWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKworCQkJCQkiCQlJIGkgPSBuZXcgWSgpOjpmb287XG4i
ICsKKwkJCQkJIgkJaS5kb2l0KCk7XG4iICsKKwkJCQkJIgl9XG4iICsKKwkJCQkJIn1cbiIKKwkJ
CX0sCisJCQkiIiwKKwkJCW51bGwgLyogbm8gZXh0cmEgY2xhc3MgbGlicmFyaWVzICovLAorCQkJ
dHJ1ZSAvKiBmbHVzaCBvdXRwdXQgZGlyZWN0b3J5ICovLAorCQkJY29tcGlsZXJPcHRpb25zIC8q
IGN1c3RvbSBvcHRpb25zICovCisJCSk7Cit9CiBwdWJsaWMgc3RhdGljIENsYXNzIHRlc3RDbGFz
cygpIHsKIAlyZXR1cm4gTmVnYXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuY2xhc3M7CiB9CmRp
ZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVyZW5jZUV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvUmVmZXJlbmNlRXhwcmVzc2lvbi5qYXZhCmluZGV4IDRhNGEzMTQuLmZiM2U4YTkgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hc3QvUmVmZXJlbmNlRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvUmVmZXJlbmNlRXhwcmVzc2lvbi5qYXZhCkBAIC0yOTYsNiArMjk2LDExIEBAIHB1YmxpYyBj
bGFzcyBSZWZlcmVuY2VFeHByZXNzaW9uIGV4dGVuZHMgRnVuY3Rpb25hbEV4cHJlc3Npb24gaW1w
bGVtZW50cyBJbnZvY2F0CiAgICAgICAgIAlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGU7IC8vIE5v
IGJpbmRpbmcgY29uc3RydWN0aW9uIHBvc3NpYmxlIHJpZ2h0IG5vdy4gQ29kZSBnZW5lcmF0b3Ig
d2lsbCBoYXZlIHRvIGNvbmp1cmUgdXAgYSByYWJiaXQuCiAgICAgICAgIH0KIAkJCisgICAgICAg
IC8qIExIUyBvZiB0aGUgZXhwcmVzc2lvbiBjYW4gYmUgZWl0aGVyIGEgcHVyZSB0eXBlIG9yIG9i
amVjdC4KKyAgICAgICAgICAgdGhpcy5oYXZlUmVjZWl2ZXIgdHJ1ZSBkZW5vdGVzIHRoZSBMSFMg
aXMgcHVyZSB0eXBlLgorICAgICAgICAgICB0aGlzLmhhdmVSZWNlaXZlciBmYWxzZSBkZW5vdGVz
IHRoZSBMSFMgaXMgb2JqZWN0LgorICAgICAgICAgICBMb29rIGF0IHRlc3QgY2FzZSB0byB1bmRl
cnN0YW5kIHRoZSBjb2RlIHdoaWNoIGxlYWRzIHRvIHRoaXMgY29kZSBwYXRoLgorICAgICAgICAg
Ki8KIAkJdGhpcy5oYXZlUmVjZWl2ZXIgPSB0cnVlOwogCQlpZiAodGhpcy5saHMgaW5zdGFuY2Vv
ZiBOYW1lUmVmZXJlbmNlKSB7CiAJCQlpZiAoKHRoaXMubGhzLmJpdHMgJiBBU1ROb2RlLlJlc3Ry
aWN0aXZlRmxhZ01BU0spID09IEJpbmRpbmcuVFlQRSkgewpAQCAtMzQwLDYgKzM0NSwxMiBAQCBw
dWJsaWMgY2xhc3MgUmVmZXJlbmNlRXhwcmVzc2lvbiBleHRlbmRzIEZ1bmN0aW9uYWxFeHByZXNz
aW9uIGltcGxlbWVudHMgSW52b2NhdAogICAgIAkJc2NvcGUuY2hlY2tBcHByb3ByaWF0ZU1ldGhv
ZEFnYWluc3RTdXBlcnModGhpcy5zZWxlY3Rvciwgc29tZU1ldGhvZCwgdGhpcy5kZXNjcmlwdG9y
LnBhcmFtZXRlcnMsIHRoaXMpOwogICAgIAl9CiAKKyAgICAgICAgaWYgKHRoaXMuaGF2ZVJlY2Vp
dmVyICYmIHNvbWVNZXRob2QgIT0gbnVsbCAmJiAhc29tZU1ldGhvZC5pc1N0YXRpYygpKSB7Cisg
ICAgICAgICAgICBBYnN0cmFjdE1ldGhvZERlY2xhcmF0aW9uIHNyY01ldGhvZCA9IHNvbWVNZXRo
b2Quc291cmNlTWV0aG9kKCk7CisgICAgICAgICAgICBpZihzcmNNZXRob2QgIT0gbnVsbCAmJiBz
cmNNZXRob2QuaXNNZXRob2QoKSkKKyAgICAgICAgICAgICAgICBzcmNNZXRob2QuYml0cyAmPSB+
QVNUTm9kZS5DYW5CZVN0YXRpYzsKKyAgICAgICAgfQorCiAgICAgICAgIE1ldGhvZEJpbmRpbmcg
YW5vdGhlck1ldGhvZCA9IG51bGw7CiAgICAgICAgIGlmICghdGhpcy5oYXZlUmVjZWl2ZXIgJiYg
aXNNZXRob2RSZWZlcmVuY2UgJiYgcGFyYW1ldGVyc0xlbmd0aCA+IDApIHsKICAgICAgICAgCWZp
bmFsIFR5cGVCaW5kaW5nIHBvdGVudGlhbFJlY2VpdmVyID0gZGVzY3JpcHRvclBhcmFtZXRlcnNb
MF07CkBAIC0zNjUsNyArMzc2LDEzIEBAIHB1YmxpYyBjbGFzcyBSZWZlcmVuY2VFeHByZXNzaW9u
IGV4dGVuZHMgRnVuY3Rpb25hbEV4cHJlc3Npb24gaW1wbGVtZW50cyBJbnZvY2F0CiAgICAgICAg
IAkJcmV0dXJuIHRoaXMucmVzb2x2ZWRUeXBlID0gbnVsbDsKICAgICAgICAgCX0KICAgICAgICAg
fQotICAgICAgICAKKworICAgICAgICBpZiAoIXRoaXMuaGF2ZVJlY2VpdmVyICYmIGFub3RoZXJN
ZXRob2QgIT0gbnVsbCAmJiAhYW5vdGhlck1ldGhvZC5pc1N0YXRpYygpKSB7CisgICAgICAgICAg
ICBBYnN0cmFjdE1ldGhvZERlY2xhcmF0aW9uIHNyY01ldGhvZCA9IGFub3RoZXJNZXRob2Quc291
cmNlTWV0aG9kKCk7CisgICAgICAgICAgICBpZihzcmNNZXRob2QgIT0gbnVsbCAmJiBzcmNNZXRo
b2QuaXNNZXRob2QoKSkKKyAgICAgICAgICAgICAgICBzcmNNZXRob2QuYml0cyAmPSB+QVNUTm9k
ZS5DYW5CZVN0YXRpYzsKKyAgICAgICAgfQorCiAgICAgICAgIGlmIChzb21lTWV0aG9kICE9IG51
bGwgJiYgc29tZU1ldGhvZC5pc1ZhbGlkQmluZGluZygpICYmIGFub3RoZXJNZXRob2QgIT0gbnVs
bCAmJiBhbm90aGVyTWV0aG9kLmlzVmFsaWRCaW5kaW5nKCkpIHsKICAgICAgICAgCXNjb3BlLnBy
b2JsZW1SZXBvcnRlcigpLm1ldGhvZFJlZmVyZW5jZVN3aW5nc0JvdGhXYXlzKHRoaXMsIGFub3Ro
ZXJNZXRob2QsIHNvbWVNZXRob2QpOwogICAgICAgICAJcmV0dXJuIHRoaXMucmVzb2x2ZWRUeXBl
ID0gbnVsbDsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvTWV0aG9kQmluZGluZy5qYXZhIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2xvb2t1cC9NZXRob2RCaW5kaW5nLmphdmEKaW5kZXggYTNhY2M2OS4uMDgwMzU5ZSAx
MDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9NZXRob2RCaW5kaW5nLmphdmEKKysrIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2xvb2t1cC9NZXRob2RCaW5kaW5nLmphdmEKQEAgLTExMjksNyArMTEyOSwxMSBAQCBwdWJsaWMg
QWJzdHJhY3RNZXRob2REZWNsYXJhdGlvbiBzb3VyY2VNZXRob2QoKSB7CiAJCXJldHVybiBudWxs
OwogCX0KIAotCUFic3RyYWN0TWV0aG9kRGVjbGFyYXRpb25bXSBtZXRob2RzID0gc291cmNlVHlw
ZS5zY29wZS5yZWZlcmVuY2VDb250ZXh0Lm1ldGhvZHM7CisJQWJzdHJhY3RNZXRob2REZWNsYXJh
dGlvbltdIG1ldGhvZHM7CisJaWYgKHNvdXJjZVR5cGUgIT0gbnVsbCAmJiBzb3VyY2VUeXBlLnNj
b3BlICE9IG51bGwpCisJCW1ldGhvZHMgPSBzb3VyY2VUeXBlLnNjb3BlLnJlZmVyZW5jZUNvbnRl
eHQubWV0aG9kczsKKwllbHNlCisJCXJldHVybiBudWxsOwogCWlmIChtZXRob2RzICE9IG51bGwp
IHsKIAkJZm9yIChpbnQgaSA9IG1ldGhvZHMubGVuZ3RoOyAtLWkgPj0gMDspCiAJCQlpZiAodGhp
cyA9PSBtZXRob2RzW2ldLmJpbmRpbmcpCi0tIAoxLjguMS5tc3lzZ2l0LjEKCg==
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>231202</attachid>
            <date>2013-05-20 03:00:00 -0400</date>
            <delta_ts>2013-05-20 03:00:39 -0400</delta_ts>
            <desc>Potentially simpler patch</desc>
            <filename>static-analysis.patch</filename>
            <type>text/plain</type>
            <size>5683</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRh
RXhwcmVzc2lvbnNUZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxl
ci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OZWdh
dGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCmluZGV4IGQwMGYwN2EuLjNmMjBlOTkgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRhRXhw
cmVzc2lvbnNUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGls
ZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVn
YXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YQpAQCAtNjUzNCw2ICs2NTM0LDk3IEBACiAJ
CQljb21waWxlck9wdGlvbnMgLyogY3VzdG9tIG9wdGlvbnMgKi8KIAkJKTsKIH0KKy8vaHR0cHM6
Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQwNjg1OSwgIFsxLjhdW2Nv
bXBpbGVyXSBCYWQgaGludCB0aGF0IG1ldGhvZCBjb3VsZCBiZSBkZWNsYXJlZCBzdGF0aWMKK3B1
YmxpYyB2b2lkIHRlc3Q0MDY4NTlhKCkgeworCQlNYXAgY29tcGlsZXJPcHRpb25zID0gZ2V0Q29t
cGlsZXJPcHRpb25zKCk7CisJCWNvbXBpbGVyT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9Q
VElPTl9SZXBvcnRNZXRob2RDYW5CZVN0YXRpYywgQ29tcGlsZXJPcHRpb25zLkVSUk9SKTsKKwkJ
Y29tcGlsZXJPcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydE1ldGhvZENh
bkJlUG90ZW50aWFsbHlTdGF0aWMsIENvbXBpbGVyT3B0aW9ucy5FUlJPUik7CisJCXRoaXMucnVu
TmVnYXRpdmVUZXN0KAorCQkJbmV3IFN0cmluZ1tdIHsKKwkJCQkJIlguamF2YSIsCisJCQkJCSJp
bnRlcmZhY2UgSSB7XG4iICsKKwkJCQkJIglpbnQgZm9vKGludCBpKTtcbiIgKworCQkJCQkifVxu
IiArCisJCQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCQkJIglwdWJsaWMgc3RhdGljIHZv
aWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsKKwkJCQkJIgkJWCB4ID0gbmV3IFgoKTtcbiIg
KworCQkJCQkiCQlJIGkgPSB4Ojpmb287XG4iICsKKwkJCQkJIgkJaS5mb28oMyk7XG4iICsKKwkJ
CQkJIgl9XG4iICsKKwkJCQkJIglpbnQgZm9vKGludCB4KSB7XG4iICsKKwkJCQkJIgkJcmV0dXJu
IHg7XG4iICsKKwkJCQkJIgl9ICAgXG4iICsKKwkJCQkJIn1cbiIKKwkJCX0sCisJCQkiIiwKKwkJ
CW51bGwgLyogbm8gZXh0cmEgY2xhc3MgbGlicmFyaWVzICovLAorCQkJdHJ1ZSAvKiBmbHVzaCBv
dXRwdXQgZGlyZWN0b3J5ICovLAorCQkJY29tcGlsZXJPcHRpb25zIC8qIGN1c3RvbSBvcHRpb25z
ICovCisJCSk7Cit9CisvL2h0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNn
aT9pZD00MDY4NTksICBbMS44XVtjb21waWxlcl0gQmFkIGhpbnQgdGhhdCBtZXRob2QgY291bGQg
YmUgZGVjbGFyZWQgc3RhdGljCitwdWJsaWMgdm9pZCB0ZXN0NDA2ODU5YigpIHsKKwkJTWFwIGNv
bXBpbGVyT3B0aW9ucyA9IGdldENvbXBpbGVyT3B0aW9ucygpOworCQljb21waWxlck9wdGlvbnMu
cHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJT05fUmVwb3J0TWV0aG9kQ2FuQmVTdGF0aWMsIENvbXBp
bGVyT3B0aW9ucy5FUlJPUik7CisJCWNvbXBpbGVyT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25z
Lk9QVElPTl9SZXBvcnRNZXRob2RDYW5CZVBvdGVudGlhbGx5U3RhdGljLCBDb21waWxlck9wdGlv
bnMuRVJST1IpOworCQl0aGlzLnJ1bk5lZ2F0aXZlVGVzdCgKKwkJCW5ldyBTdHJpbmdbXSB7CisJ
CQkJCSJYLmphdmEiLAorCQkJCQkiaW50ZXJmYWNlIEkge1xuIiArCisJCQkJCSIJdm9pZCBkb2l0
IChZIHkpO1xuIiArCisJCQkJCSJ9XG4iICsKKwkJCQkJIlxuIiArCisJCQkJCSJjbGFzcyBZIHtc
biIgKworCQkJCQkiCXZvaWQgZm9vKCkge1xuIiArCisJCQkJCSIJCXJldHVybjtcbiIgKworCQkJ
CQkiCX1cbiIgKworCQkJCQkifVxuIiArCisJCQkJCSJcbiIgKworCQkJCQkicHVibGljIGNsYXNz
IFgge1xuIiArCisJCQkJCSIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykg
e1xuIiArCisJCQkJCSIJCUkgaSA9IFk6OmZvbzsgXG4iICsKKwkJCQkJIgkJWSB5ID0gbmV3IFko
KTtcbiIgKworCQkJCQkiCQlpLmRvaXQoeSk7XG4iICsKKwkJCQkJIgl9XG4iICsKKwkJCQkJIn1c
biIKKwkJCX0sCisJCQkiIiwKKwkJCW51bGwgLyogbm8gZXh0cmEgY2xhc3MgbGlicmFyaWVzICov
LAorCQkJdHJ1ZSAvKiBmbHVzaCBvdXRwdXQgZGlyZWN0b3J5ICovLAorCQkJY29tcGlsZXJPcHRp
b25zIC8qIGN1c3RvbSBvcHRpb25zICovCisJCSk7Cit9CisvL2h0dHBzOi8vYnVncy5lY2xpcHNl
Lm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00MDY4NTksICBbMS44XVtjb21waWxlcl0gQmFkIGhp
bnQgdGhhdCBtZXRob2QgY291bGQgYmUgZGVjbGFyZWQgc3RhdGljCitwdWJsaWMgdm9pZCB0ZXN0
NDA2ODU5YygpIHsKKwkJTWFwIGNvbXBpbGVyT3B0aW9ucyA9IGdldENvbXBpbGVyT3B0aW9ucygp
OworCQljb21waWxlck9wdGlvbnMucHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJT05fUmVwb3J0TWV0
aG9kQ2FuQmVTdGF0aWMsIENvbXBpbGVyT3B0aW9ucy5FUlJPUik7CisJCWNvbXBpbGVyT3B0aW9u
cy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9SZXBvcnRNZXRob2RDYW5CZVBvdGVudGlhbGx5
U3RhdGljLCBDb21waWxlck9wdGlvbnMuRVJST1IpOworCQl0aGlzLnJ1bk5lZ2F0aXZlVGVzdCgK
KwkJCW5ldyBTdHJpbmdbXSB7CisJCQkJCSJYLmphdmEiLAorCQkJCQkiaW50ZXJmYWNlIEkge1xu
IiArCisJCQkJCSIJdm9pZCBkb2l0ICgpO1xuIiArCisJCQkJCSJ9XG4iICsKKwkJCQkJIlxuIiAr
CisJCQkJCSJjbGFzcyBZIHtcbiIgKworCQkJCQkiCXZvaWQgZm9vKCkgeyAgXG4iICsKKwkJCQkJ
IgkJcmV0dXJuO1xuIiArCisJCQkJCSIJfVxuIiArCisJCQkJCSJ9XG4iICsKKwkJCQkJIlxuIiAr
CisJCQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCQkJIglwdWJsaWMgc3RhdGljIHZvaWQg
bWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsKKwkJCQkJIgkJSSBpID0gbmV3IFkoKTo6Zm9vO1xu
IiArCisJCQkJCSIJCWkuZG9pdCgpO1xuIiArCisJCQkJCSIJfVxuIiArCisJCQkJCSJ9XG4iCisJ
CQl9LAorCQkJIiIsCisJCQludWxsIC8qIG5vIGV4dHJhIGNsYXNzIGxpYnJhcmllcyAqLywKKwkJ
CXRydWUgLyogZmx1c2ggb3V0cHV0IGRpcmVjdG9yeSAqLywKKwkJCWNvbXBpbGVyT3B0aW9ucyAv
KiBjdXN0b20gb3B0aW9ucyAqLworCQkpOworfQogcHVibGljIHN0YXRpYyBDbGFzcyB0ZXN0Q2xh
c3MoKSB7CiAJcmV0dXJuIE5lZ2F0aXZlTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmNsYXNzOwogfQpk
aWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2FzdC9SZWZlcmVuY2VFeHByZXNzaW9uLmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
YXN0L1JlZmVyZW5jZUV4cHJlc3Npb24uamF2YQppbmRleCA0YTRhMzE0Li5hOTEzNGFhIDEwMDY0
NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVyZW5jZUV4cHJlc3Npb24uamF2YQorKysgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
YXN0L1JlZmVyZW5jZUV4cHJlc3Npb24uamF2YQpAQCAtMzk5LDkgKzM5OSwxNSBAQAogICAgICAg
ICBpZiAodGhpcy5iaW5kaW5nLmlzQWJzdHJhY3QoKSAmJiB0aGlzLmxocy5pc1N1cGVyKCkpCiAg
ICAgICAgIAlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5jYW5ub3REaXJlY2x5SW52b2tlQWJzdHJh
Y3RNZXRob2QodGhpcywgdGhpcy5iaW5kaW5nKTsKICAgICAgICAgCi0gICAgICAgIGlmICh0aGlz
LmJpbmRpbmcuaXNTdGF0aWMoKSAmJiB0aGlzLmJpbmRpbmcuZGVjbGFyaW5nQ2xhc3MgIT0gdGhp
cy5yZWNlaXZlclR5cGUpCi0JCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5pbmRpcmVjdEFjY2Vz
c1RvU3RhdGljTWV0aG9kKHRoaXMsIHRoaXMuYmluZGluZyk7Ci0gICAgCisgICAgICAgIGlmICh0
aGlzLmJpbmRpbmcuaXNTdGF0aWMoKSkgeworICAgICAgICAJaWYgKHRoaXMuYmluZGluZy5kZWNs
YXJpbmdDbGFzcyAhPSB0aGlzLnJlY2VpdmVyVHlwZSkKKyAgICAgICAgCQlzY29wZS5wcm9ibGVt
UmVwb3J0ZXIoKS5pbmRpcmVjdEFjY2Vzc1RvU3RhdGljTWV0aG9kKHRoaXMsIHRoaXMuYmluZGlu
Zyk7CisgICAgICAgIH0gZWxzZSB7CisgICAgICAgIAlBYnN0cmFjdE1ldGhvZERlY2xhcmF0aW9u
IHNyY01ldGhvZCA9IHRoaXMuYmluZGluZy5zb3VyY2VNZXRob2QoKTsKKyAgICAgICAgCWlmIChz
cmNNZXRob2QgIT0gbnVsbCAmJiBzcmNNZXRob2QuaXNNZXRob2QoKSkKKyAgICAgICAgCQlzcmNN
ZXRob2QuYml0cyAmPSB+QVNUTm9kZS5DYW5CZVN0YXRpYzsKKyAgICAgICAgfQorICAgICAgICAK
ICAgICAJaWYgKGlzTWV0aG9kVXNlRGVwcmVjYXRlZCh0aGlzLmJpbmRpbmcsIHNjb3BlLCB0cnVl
KSkKICAgICAJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmRlcHJlY2F0ZWRNZXRob2QodGhpcy5i
aW5kaW5nLCB0aGlzKTsKIApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9NZXRob2RCaW5kaW5n
LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvbG9va3VwL01ldGhvZEJpbmRpbmcuamF2YQppbmRleCBhM2FjYzY5Li4w
MjViMDc4IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL01ldGhvZEJpbmRpbmcuamF2YQorKysg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvbG9va3VwL01ldGhvZEJpbmRpbmcuamF2YQpAQCAtMTEyOSw3ICsxMTI5LDcgQEAK
IAkJcmV0dXJuIG51bGw7CiAJfQogCi0JQWJzdHJhY3RNZXRob2REZWNsYXJhdGlvbltdIG1ldGhv
ZHMgPSBzb3VyY2VUeXBlLnNjb3BlLnJlZmVyZW5jZUNvbnRleHQubWV0aG9kczsKKwlBYnN0cmFj
dE1ldGhvZERlY2xhcmF0aW9uW10gbWV0aG9kcyA9IHNvdXJjZVR5cGUuc2NvcGUgIT0gbnVsbCA/
IHNvdXJjZVR5cGUuc2NvcGUucmVmZXJlbmNlQ29udGV4dC5tZXRob2RzIDogbnVsbDsKIAlpZiAo
bWV0aG9kcyAhPSBudWxsKSB7CiAJCWZvciAoaW50IGkgPSBtZXRob2RzLmxlbmd0aDsgLS1pID49
IDA7KQogCQkJaWYgKHRoaXMgPT0gbWV0aG9kc1tpXS5iaW5kaW5nKQ==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>231214</attachid>
            <date>2013-05-20 07:54:00 -0400</date>
            <delta_ts>2013-05-20 08:14:32 -0400</delta_ts>
            <desc>New patch to add the test case which lead to NPE. Replacing: &quot;Potentially simpler patch&quot; attachment</desc>
            <filename>static-analysis_added_test_case.patch</filename>
            <type>text/plain</type>
            <size>4687</size>
            <attacher name="shankha banerjee">shankhba</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRh
RXhwcmVzc2lvbnNUZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxl
ci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OZWdh
dGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCmluZGV4IGQwMGYwN2EuLjAxNzA5ZGYgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRhRXhw
cmVzc2lvbnNUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGls
ZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVn
YXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YQpAQCAtNjUzNSw0ICs2NTM1LDEzMSBAQAog
CQkpOwogfQorLy9odHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9
NDA2ODU5LCAgWzEuOF1bY29tcGlsZXJdIEJhZCBoaW50IHRoYXQgbWV0aG9kIGNvdWxkIGJlIGRl
Y2xhcmVkIHN0YXRpYworcHVibGljIHZvaWQgdGVzdDQwNjg1OWEoKSB7CisJCU1hcCBjb21waWxl
ck9wdGlvbnMgPSBnZXRDb21waWxlck9wdGlvbnMoKTsKKwkJY29tcGlsZXJPcHRpb25zLnB1dChD
b21waWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydE1ldGhvZENhbkJlU3RhdGljLCBDb21waWxlck9w
dGlvbnMuRVJST1IpOworCQljb21waWxlck9wdGlvbnMucHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJ
T05fUmVwb3J0TWV0aG9kQ2FuQmVQb3RlbnRpYWxseVN0YXRpYywgQ29tcGlsZXJPcHRpb25zLkVS
Uk9SKTsKKwkJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCQluZXcgU3RyaW5nW10geworCQkJCQki
WC5qYXZhIiwKKwkJCQkJImludGVyZmFjZSBJIHtcbiIgKworCQkJCQkiCWludCBmb28oaW50IGkp
O1xuIiArCisJCQkJCSJ9XG4iICsKKwkJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJCQki
CXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKworCQkJCQkiCQlY
IHggPSBuZXcgWCgpO1xuIiArCisJCQkJCSIJCUkgaSA9IHg6OmZvbztcbiIgKworCQkJCQkiCQlp
LmZvbygzKTtcbiIgKworCQkJCQkiCX1cbiIgKworCQkJCQkiCWludCBmb28oaW50IHgpIHtcbiIg
KworCQkJCQkiCQlyZXR1cm4geDtcbiIgKworCQkJCQkiCX0gICBcbiIgKworCQkJCQkifVxuIgor
CQkJfSwKKwkJCSIiLAorCQkJbnVsbCAvKiBubyBleHRyYSBjbGFzcyBsaWJyYXJpZXMgKi8sCisJ
CQl0cnVlIC8qIGZsdXNoIG91dHB1dCBkaXJlY3RvcnkgKi8sCisJCQljb21waWxlck9wdGlvbnMg
LyogY3VzdG9tIG9wdGlvbnMgKi8KKwkJKTsKK30KKy8vaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3Jn
L2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQwNjg1OSwgIFsxLjhdW2NvbXBpbGVyXSBCYWQgaGludCB0
aGF0IG1ldGhvZCBjb3VsZCBiZSBkZWNsYXJlZCBzdGF0aWMKK3B1YmxpYyB2b2lkIHRlc3Q0MDY4
NTliKCkgeworCQlNYXAgY29tcGlsZXJPcHRpb25zID0gZ2V0Q29tcGlsZXJPcHRpb25zKCk7CisJ
CWNvbXBpbGVyT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9SZXBvcnRNZXRob2RD
YW5CZVN0YXRpYywgQ29tcGlsZXJPcHRpb25zLkVSUk9SKTsKKwkJY29tcGlsZXJPcHRpb25zLnB1
dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydE1ldGhvZENhbkJlUG90ZW50aWFsbHlTdGF0
aWMsIENvbXBpbGVyT3B0aW9ucy5FUlJPUik7CisJCXRoaXMucnVuTmVnYXRpdmVUZXN0KAorCQkJ
bmV3IFN0cmluZ1tdIHsKKwkJCQkJIlguamF2YSIsCisJCQkJCSJpbnRlcmZhY2UgSSB7XG4iICsK
KwkJCQkJIgl2b2lkIGRvaXQgKFkgeSk7XG4iICsKKwkJCQkJIn1cbiIgKworCQkJCQkiXG4iICsK
KwkJCQkJImNsYXNzIFkge1xuIiArCisJCQkJCSIJdm9pZCBmb28oKSB7XG4iICsKKwkJCQkJIgkJ
cmV0dXJuO1xuIiArCisJCQkJCSIJfVxuIiArCisJCQkJCSJ9XG4iICsKKwkJCQkJIlxuIiArCisJ
CQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCQkJIglwdWJsaWMgc3RhdGljIHZvaWQgbWFp
bihTdHJpbmdbXSBhcmdzKSB7XG4iICsKKwkJCQkJIgkJSSBpID0gWTo6Zm9vOyBcbiIgKworCQkJ
CQkiCQlZIHkgPSBuZXcgWSgpO1xuIiArCisJCQkJCSIJCWkuZG9pdCh5KTtcbiIgKworCQkJCQki
CX1cbiIgKworCQkJCQkifVxuIgorCQkJfSwKKwkJCSIiLAorCQkJbnVsbCAvKiBubyBleHRyYSBj
bGFzcyBsaWJyYXJpZXMgKi8sCisJCQl0cnVlIC8qIGZsdXNoIG91dHB1dCBkaXJlY3RvcnkgKi8s
CisJCQljb21waWxlck9wdGlvbnMgLyogY3VzdG9tIG9wdGlvbnMgKi8KKwkJKTsKK30KKy8vaHR0
cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQwNjg1OSwgIFsxLjhd
W2NvbXBpbGVyXSBCYWQgaGludCB0aGF0IG1ldGhvZCBjb3VsZCBiZSBkZWNsYXJlZCBzdGF0aWMK
K3B1YmxpYyB2b2lkIHRlc3Q0MDY4NTljKCkgeworCQlNYXAgY29tcGlsZXJPcHRpb25zID0gZ2V0
Q29tcGlsZXJPcHRpb25zKCk7CisJCWNvbXBpbGVyT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25z
Lk9QVElPTl9SZXBvcnRNZXRob2RDYW5CZVN0YXRpYywgQ29tcGlsZXJPcHRpb25zLkVSUk9SKTsK
KwkJY29tcGlsZXJPcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydE1ldGhv
ZENhbkJlUG90ZW50aWFsbHlTdGF0aWMsIENvbXBpbGVyT3B0aW9ucy5FUlJPUik7CisJCXRoaXMu
cnVuTmVnYXRpdmVUZXN0KAorCQkJbmV3IFN0cmluZ1tdIHsKKwkJCQkJIlguamF2YSIsCisJCQkJ
CSJpbnRlcmZhY2UgSSB7XG4iICsKKwkJCQkJIgl2b2lkIGRvaXQgKCk7XG4iICsKKwkJCQkJIn1c
biIgKworCQkJCQkiXG4iICsKKwkJCQkJImNsYXNzIFkge1xuIiArCisJCQkJCSIJdm9pZCBmb28o
KSB7ICBcbiIgKworCQkJCQkiCQlyZXR1cm47XG4iICsKKwkJCQkJIgl9XG4iICsKKwkJCQkJIn1c
biIgKworCQkJCQkiXG4iICsKKwkJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJCQkiCXB1
YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKworCQkJCQkiCQlJIGkg
PSBuZXcgWSgpOjpmb287XG4iICsKKwkJCQkJIgkJaS5kb2l0KCk7XG4iICsKKwkJCQkJIgl9XG4i
ICsKKwkJCQkJIn1cbiIKKwkJCX0sCisJCQkiIiwKKwkJCW51bGwgLyogbm8gZXh0cmEgY2xhc3Mg
bGlicmFyaWVzICovLAorCQkJdHJ1ZSAvKiBmbHVzaCBvdXRwdXQgZGlyZWN0b3J5ICovLAorCQkJ
Y29tcGlsZXJPcHRpb25zIC8qIGN1c3RvbSBvcHRpb25zICovCisJCSk7Cit9CisvL2h0dHBzOi8v
YnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00MDY4NTksICBbMS44XVtjb21w
aWxlcl0gQmFkIGhpbnQgdGhhdCBtZXRob2QgY291bGQgYmUgZGVjbGFyZWQgc3RhdGljCitwdWJs
aWMgdm9pZCB0ZXN0NDA2ODU5ZCgpIHsKKwlNYXAgY29tcGlsZXJPcHRpb25zID0gZ2V0Q29tcGls
ZXJPcHRpb25zKCk7CisJY29tcGlsZXJPcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9O
X1JlcG9ydE1ldGhvZENhbkJlU3RhdGljLCBDb21waWxlck9wdGlvbnMuRVJST1IpOworCWNvbXBp
bGVyT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9SZXBvcnRNZXRob2RDYW5CZVBv
dGVudGlhbGx5U3RhdGljLCBDb21waWxlck9wdGlvbnMuV0FSTklORyk7CisJdGhpcy5ydW5OZWdh
dGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkJIlkuamF2YSIsCisJCQkJInB1YmxpYyBj
bGFzcyBZIHtcbiIgKworCQkJCSIJdm9pZCBmb28oKSB7XG4iICsKKwkJCQkiCQlyZXR1cm47XG4i
ICsKKwkJCQkiCX1cbiIgKworCQkJCSJ9IiwKKwkJCQkiWC5qYXZhIiwKKwkJCQkiaW50ZXJmYWNl
IEkge1xuIiArCisJCQkJIgl2b2lkIGRvaXQgKCk7XG4iICsKKwkJCQkifVxuIiArCisJCQkJIlxu
IiArCisJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJCSIJcHVibGljIHN0YXRpYyB2b2lk
IG1haW4oU3RyaW5nW10gYXJncykge1xuIiArCisJCQkJIgkJSSBpID0gbmV3IFkoKTo6Zm9vO1xu
IiArCisJCQkJIgkJaS5kb2l0KCk7XG4iICsKKwkJCQkiCX1cbiIgKworCQkJCSJ9XG4iCisJCX0s
CisJCSItLS0tLS0tLS0tXG4iICsKKwkJIjEuIFdBUk5JTkcgaW4gWS5qYXZhIChhdCBsaW5lIDIp
XG4iICsKKwkJIgl2b2lkIGZvbygpIHtcbiIgKworCQkiCSAgICAgXl5eXl5cbiIgKworCQkiVGhl
IG1ldGhvZCBmb28oKSBmcm9tIHRoZSB0eXBlIFkgY2FuIHBvdGVudGlhbGx5IGJlIGRlY2xhcmVk
IGFzIHN0YXRpY1xuIiArCisJCSItLS0tLS0tLS0tXG4iLAorCQludWxsIC8qIG5vIGV4dHJhIGNs
YXNzIGxpYnJhcmllcyAqLywKKwkJdHJ1ZSAvKiBmbHVzaCBvdXRwdXQgZGlyZWN0b3J5ICovLAor
CQljb21waWxlck9wdGlvbnMgLyogY3VzdG9tIG9wdGlvbnMgKi8KKwkpOworfQogcHVibGljIHN0
YXRpYyBDbGFzcyB0ZXN0Q2xhc3MoKSB7CiAJcmV0dXJuIE5lZ2F0aXZlTGFtYmRhRXhwcmVzc2lv
bnNUZXN0LmNsYXNzOw==
</data>

          </attachment>
      

    </bug>

</bugzilla>