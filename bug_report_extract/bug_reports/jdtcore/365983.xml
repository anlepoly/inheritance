<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>365983</bug_id>
          
          <creation_ts>2011-12-07 23:41:00 -0500</creation_ts>
          <short_desc>[compiler][null] AIOOB with null annotation analysis and varargs</short_desc>
          <delta_ts>2012-01-23 03:08:33 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>3.8 M5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>loskutov</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="47455"
          type_id="1"
          status="+"
          setter="amj87.iitr"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2037498</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-07 23:41:31 -0500</bug_when>
    <thetext>This was discovered and reported as issue (25) and (26)
during code review here: https://bugs.eclipse.org/bugs/show_bug.cgi?id=365387#c17

I am spawning a separate bug so that this can be tracked independently for
verification purposes.

A patch with fix &amp; tests is available at https://bugs.eclipse.org/bugs/show_bug.cgi?id=365387#c32</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2037499</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-07 23:42:53 -0500</bug_when>
    <thetext>Ayush, please review in early M5 for inclusion.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2039779</commentid>
    <comment_count>2</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-12-13 03:59:36 -0500</bug_when>
    <thetext>The changes look good. 
only issue I found was in the following example:

void callVarargs(@Nullable String... str) {
		String[] str = null;
		vargsMethod(1, null, &quot;&quot;, null );  // warning on each element:bad
                vargsMethod(1, null);   // warning: good
                vargsMethod(1, str);    // warning:good
	}
	
	public @NonNull Object vargsMethod(int i, @NonNull final String... objects) {
                objects[1] = &quot;&quot;;
		System.out.println(objects);
		return objects; 	
	}

I think its better to treat the @NonNull as a modifier on the varargs parameter reference as a whole and not individual elements (just like the adding the final modifier only enforces the whole reference to be final and not the referands). So passing null as a lone argument or a null array as an argument should trigger the warning, but passing individual elements shouldn&apos;t, since individual elements will be collected into an array and then passed into the method.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2039818</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-13 05:17:21 -0500</bug_when>
    <thetext>(In reply to comment #2)
&gt; The changes look good. 
&gt; only issue I found was in the following example:
&gt; 
&gt; void callVarargs(@Nullable String... str) {
&gt;         String[] str = null;
&gt;         vargsMethod(1, null, &quot;&quot;, null );  // warning on each element:bad
&gt;                 vargsMethod(1, null);   // warning: good
&gt;                 vargsMethod(1, str);    // warning:good

Also,
    	
    new X().vargsMethod(1, (String) null); // warning: bad.

&gt; I think its better to treat the @NonNull as a modifier on the varargs parameter
&gt; reference as a whole and not individual elements (just like the adding the
&gt; final modifier only enforces the whole reference to be final and not the
&gt; referands).

I agree that annotations being modifiers, should modify the reference and not
the referents. There is no syntax annotate the array elements themselves.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2039913</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-13 08:35:38 -0500</bug_when>
    <thetext>(In reply to comment #2)
&gt; I think its better to treat the @NonNull as a modifier on the varargs parameter
&gt; reference as a whole and not individual elements (just like the adding the
&gt; final modifier only enforces the whole reference to be final and not the
&gt; referands). So passing null as a lone argument or a null array as an argument
&gt; should trigger the warning, but passing individual elements shouldn&apos;t, since
&gt; individual elements will be collected into an array and then passed into the
&gt; method.

I did some quick research on JSR 308 and from my current understanding
we should indeed interpret these declarations
  @NonNull Object[] objects
  @NonNull Object ... objects
as constraining the elements, i.e., defining an array of &apos;@NonNull Object&apos;.

Constraints on the array itself will (once we have JSR 308) be expressed
before the brackets or before the dots:
  Object @NonNull[] objects
  Object @NonNull ... objects

(similarly for intermediate arrays at the respective brackets).
Please correct me, if my understanding of JSR 308 is wrong.
We wouldn&apos;t want to do anything now, that will be incompatible with
JSR 308, right?

However, since adding analysis for array element access deserves a
second thought, I propose a quick way out for the next I-Build:
- avoid AIOOBE
- flag a warning against the vararg declaration:
  &quot;Compiler limitation: nullness is not analyzed for access to array elements&quot;
- keep analysis of var-args calls as implemented in my patch
  (should be in line with JSR 308)
  -&gt; need to re-consider passing a null array (should not be flagged IMO)

Next I can see if checking of array element access can be easily analyzed.
Checking the array itself will then be postponed to JSR 308.

What do you think?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2039940</commentid>
    <comment_count>5</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-12-13 09:09:19 -0500</bug_when>
    <thetext>(In reply to comment #4)
&gt; I did some quick research on JSR 308 and from my current understanding
&gt; we should indeed interpret these declarations
&gt;   @NonNull Object[] objects
&gt;   @NonNull Object ... objects
&gt; as constraining the elements, i.e., defining an array of &apos;@NonNull Object&apos;.

I&apos;m not sure if JSR308 should be the correct reference point. The JLS seems silent on the effect of annotating an array variable. 
However, if you say  @NonNull Object[] objects also constrains the array elements, then I should also get an error in the below example with some individual elements being null?

void callVarargs(@Nullable String... str) {
        String[] str = null;
        vargsMethod(1, new String{null, &quot;&quot;, null} );
           
    }

public @NonNull Object vargsMethod(int i, @NonNull String[] objects){
        objects[1] = &quot;&quot;;
        System.out.println(objects);
        return objects;     
    }

&gt; - flag a warning against the vararg declaration:
&gt;   &quot;Compiler limitation: nullness is not analyzed for access to array elements&quot;
This does not seem right. We have many limitations in the compiler currently too but we don&apos;t give a corresponding warning for each. ;)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2039954</commentid>
    <comment_count>6</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-12-13 09:18:03 -0500</bug_when>
    <thetext>A reading of JSR308 section B3 (http://types.cs.washington.edu/jsr308/specification/java-annotation-design.html#array-syntax) says, &quot;A potential criticism is that a type annotation at the very beginning of a declaration does not refer to the full type, even though declaration annotations (which also occur at the beginning of the declaration) do refer to the entire variable. As an example, in @NonNull String[] arr2; the variable arr2 is not non-null. This is actually a criticism of Java itself, not of the JSR 308 annotation extension&quot;

which means that the annotation on the far left of a declaration being applied to each array element is a very JSR308-specific feature and is not the case in Java currently. I don&apos;t think we should comply with JSR308 unless it actually comes out.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2039959</commentid>
    <comment_count>7</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-12-13 09:20:37 -0500</bug_when>
    <thetext>(In reply to comment #6)
&gt; A potential criticism is that a *type annotation* at the very beginning of
&gt; a declaration does not refer to the full type, even though *declaration
&gt; annotations* ... do refer to the entire variable

Simply speaking, in @NonNull String[] str, @NonNull is currently a declarative annotation in the java world, and not yet a &quot;type annotation&quot;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2039976</commentid>
    <comment_count>8</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-13 09:40:06 -0500</bug_when>
    <thetext>(In reply to comment #6)
&gt; I don&apos;t think we should comply with JSR308 unless it actually comes out.

If we follow that road I think we have to to prohibit any null annotations
on any arrays and varargs, because otherwise users will insert annotations
into their code that will be wrong (change their semantics) once JSR 308 is
released. This also means, arrays and varargs need to be explicitly
excluded from @NonNullByDefault.

I&apos;d still prefer to carefully support what is possible today,
without breaking users&apos; code tomorrow.

(In reply to comment #5)
&gt; &gt; - flag a warning against the vararg declaration:
&gt; &gt;   &quot;Compiler limitation: nullness is not analyzed for access to array elements&quot;
&gt; This does not seem right. We have many limitations in the compiler currently
&gt; too but we don&apos;t give a corresponding warning for each. ;)

We can drop this warning for now, and I could make a more general proposal 
on how we can inform users when protection against NPE is incomplete
although they did their best to specify nullness.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2039988</commentid>
    <comment_count>9</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-13 09:55:47 -0500</bug_when>
    <thetext>(In reply to comment #7)
&gt; (In reply to comment #6)
&gt; &gt; A potential criticism is that a *type annotation* at the very beginning of
&gt; &gt; a declaration does not refer to the full type, even though *declaration
&gt; &gt; annotations* ... do refer to the entire variable
&gt; 
&gt; Simply speaking, in @NonNull String[] str, @NonNull is currently a declarative
&gt; annotation in the java world, and not yet a &quot;type annotation&quot;

Currently, we have a similar ambiguity regarding method return:
  @NonNull Object foo() { return this; }
is a legal annotation in Java 5 so it must be a declarative annotation,
however, once type annotations are added, the same syntax will be
re-interpreted and users get what they expect.

  @NonNull public Object foo() { return this; }
is currently equivalent (because order between modifiers/annotations
is not considered), but if we want users to change this to
  public @NonNull Object foo() { return this; }
this can be automated because (in this position) @NonNull is not useful as
a declarative annotation as soon has we have that distinction.

By contrast, if we interpret 
  @NonNull String[] str
as affecting the whole declaration, then this will inherently be ambiguous
once we have JSR 308. If we support the interpretation that the annotation
affects the whole declaration, we will never be able to distinguish this
from a nullable array containing non-null elements.

One consequence of the discussion might be:
- check order of modifiers / annotations of a method to enforce that
  any null annotation comes directly before the type.
This would help users to write code that is legal today AND doesn&apos;t 
require change due to the introduction of JSR 308.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2039993</commentid>
    <comment_count>10</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-13 10:02:13 -0500</bug_when>
    <thetext>(In reply to comment #9)
&gt; One consequence of the discussion might be:
&gt; - check order of modifiers / annotations of a method to enforce that
&gt;   any null annotation comes directly before the type.
&gt; This would help users to write code that is legal today AND doesn&apos;t 
&gt; require change due to the introduction of JSR 308.

Nevermind this proposal, I should have continued reading the JSR 308
discussion (thanks for the link, BTW, I missed that discussion part before!)

With JSR 308 the NonNull annotation will have to change its @Target 
from METHOD etc. to TYPE_USE, which then avoids the ambiguity in the 
first place, irrelevant of order.

Just for arrays this doesn&apos;t help ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2039998</commentid>
    <comment_count>11</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-12-13 10:05:42 -0500</bug_when>
    <thetext>(In reply to comment #10)
&gt; With JSR 308 the NonNull annotation will have to change its @Target 
&gt; from METHOD etc. to TYPE_USE, which then avoids the ambiguity in the 
&gt; first place, irrelevant of order.
&gt; 
&gt; Just for arrays this doesn&apos;t help ...

Comptability-wise, note that we will anyway have to undertake a major effort to support type annotations, during which we will make sure the new semantic for @NonNull on array variable is also obeyed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2040143</commentid>
    <comment_count>12</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-13 12:25:44 -0500</bug_when>
    <thetext>(In reply to comment #5)
&gt; However, if you say  @NonNull Object[] objects also constrains the array
&gt; elements, then I should also get an error in the below example with some
&gt; individual elements being null?
&gt; 
&gt; void callVarargs(@Nullable String... str) {
&gt;         String[] str = null;
&gt;         vargsMethod(1, new String{null, &quot;&quot;, null} );
&gt; 
&gt;     }

I&apos;m not sure what you want to show in line 2 but a vargsMethod call
  vargsMethod(1, new String[]{null, &quot;&quot;, null});
would ideally flag both nulls. Currently we can&apos;t look inside the array.
We may need to wait until we can write
  new @NonNull String[] { null, &quot;&quot;, null }
to actually analyze such expressions.
(*maybe* the expectedType from the call method can already help to find out).
 
&gt; public @NonNull Object vargsMethod(int i, @NonNull String[] objects){
&gt;         objects[1] = &quot;&quot;;
&gt;         System.out.println(objects);
&gt;         return objects;     
&gt;     }

The return is unsafe in my interpretation, we don&apos;t yet know about the
nullness of the array.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2040151</commentid>
    <comment_count>13</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-12-13 12:38:11 -0500</bug_when>
    <thetext>(In reply to comment #12)
&gt;
&gt; I&apos;m not sure what you want to show in line 2 but a vargsMethod call
&gt;   vargsMethod(1, new String[]{null, &quot;&quot;, null});
&gt; would ideally flag both nulls. 

I wanted to point a contrasting example with an array parameter as compared to a varargs parameter in reply to comment 4&apos;s claim
&gt; we should indeed interpret these declarations
&gt;   @NonNull Object[] objects
&gt;   @NonNull Object ... objects
&gt; as constraining the elements, i.e., defining an array of &apos;@NonNull Object&apos;.

In my example, the param is an array of String,  yet at the call site we don&apos;t flag the &apos;null&apos; elements. However, the similar case when the param is a varargs of type String, we flag &apos;null&apos; elements passed in an array at the call site. That is, if comment 4 is correct, I&apos;d expect calls to both vargsMethod and vargsMethod2 to give same error:

void callVarargs(@Nullable String... str) {
        String[] str = null;
        vargsMethod(1, null, &quot;&quot;, null ); // implicitly equal to new String{null,&quot;&quot;,null}
        vargsMethod2(1, new String{null, &quot;&quot;, null} );
             
    }

    public void vargsMethod(int i, @NonNull String... objects)
{
               
        return objects;     
    }

 public void vargsMethod2(int i, @NonNull String[] objects)
{
               
        return objects;     
    }

but only the varargs call gives the error currently</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2040449</commentid>
    <comment_count>14</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-14 02:26:56 -0500</bug_when>
    <thetext>This thread makes for increasingly confusing reading. To clarify matters,
I would keep considerations on JSR308 aside at the moment and try
to stick to Java 7.

So is there still some debate purely from a java7 perspective, 
about whether in @NonNull String [] array; 
array cannot be null or array elements cannot be null or both ?

My reading was that considering only Java 7 annotations and drawing
analogy with how final modifier works, it is the array itself that is
tagged non null and not the array elements.

If there is agreement on this, then I suggest we proceed on that basis
ignoring JSR 308 at the moment.

To make sure this issue surfaces at the right time and gets a second look
I would add a test that would simply fail for JDK level &gt; 1.7 with a
message that draws attention to this issue.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2040496</commentid>
    <comment_count>15</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-14 04:29:56 -0500</bug_when>
    <thetext>(In reply to comment #14)
&gt; This thread makes for increasingly confusing reading. To clarify matters,
&gt; I would keep considerations on JSR308 aside at the moment and try
&gt; to stick to Java 7.

Sorry for that.
Perhaps I was biased too much by looking at the Checker Framework 
(which already does it the JSR 308 way). 

&gt; So is there still some debate purely from a java7 perspective, 
&gt; about whether in @NonNull String [] array; 
&gt; array cannot be null or array elements cannot be null or both ?

I&apos;ve read about a quick survey that reported a 50/50 split between people
who intuitively associated the annotation with the array and those who
think it would constrain the element type. From an intuition POV the 
ambiguity seems to be inherent.

&gt; My reading was that considering only Java 7 annotations and drawing
&gt; analogy with how final modifier works, it is the array itself that is
&gt; tagged non null and not the array elements.

Meanwhile I realized that e.g. FindBugs does it the way you propose.
Since a major concern in these questions is about migration paths for
adopters, I agree that associating the annotation with the array makes
sense for now. It will certainly ease the migration from FindBugs to
our analysis.

This comes at the price that we now train the users to think one way
and when JSR 308 comes out everybody has to be re-trained and all their
code must be refactored.

&gt; If there is agreement on this, then I suggest we proceed on that basis
&gt; ignoring JSR 308 at the moment.

OK. During the discussion it come up that for adopting JSR 308 we&apos;ll have
to change the @Target for the annotations from METHOD etc. to TYPE_USE.
This will eventually help us drawing a line between both approaches.
Based on this the mentioned refactoring should be possible.
 
&gt; To make sure this issue surfaces at the right time and gets a second look
&gt; I would add a test that would simply fail for JDK level &gt; 1.7 with a
&gt; message that draws attention to this issue.

Good idea, I&apos;ll do that.
I&apos;ll prepare a new patch by tomorrow, which will apply the Java 7 POV.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2041534</commentid>
    <comment_count>16</comment_count>
      <attachid>208473</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-15 18:14:15 -0500</bug_when>
    <thetext>Created attachment 208473
test &amp; fix with changed strategy.

This patch checks nullness of varargs at the array-level, not its elements.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2041582</commentid>
    <comment_count>17</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-12-16 02:08:23 -0500</bug_when>
    <thetext>(In reply to comment #16)
&gt; Created attachment 208473 [details]
&gt; test &amp; fix with changed strategy.
This patch is good. One suggestion though: 
Instead of having an independent failing test for &apos;compliance&apos;&gt;1.7, it is better to have the added regression tests itself fail for &apos;source&apos;&gt;1.7 i.e. 

if (source&gt;1.7) {
   runNegativeTest(...);
} else {
   fail(..);
}

PS: &apos;source&apos; should be used instead of &apos;compliance&apos;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2041589</commentid>
    <comment_count>18</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-16 02:41:59 -0500</bug_when>
    <thetext>(In reply to comment #17)
&gt; (In reply to comment #16)
&gt; &gt; Created attachment 208473 [details] [details]
&gt; &gt; test &amp; fix with changed strategy.
&gt; This patch is good. One suggestion though: 
&gt; Instead of having an independent failing test for &apos;compliance&apos;&gt;1.7, it is
&gt; better to have the added regression tests itself fail for &apos;source&apos;&gt;1.7 i.e. 
&gt; 
&gt; if (source&gt;1.7) {
&gt;    runNegativeTest(...);
&gt; } else {
&gt;    fail(..);
&gt; }

Just to forestall potential confusion, the decision pathways look
inverted in the above.

Assuming JSR308 becomes official for Java8, any new syntax that allows
finer grained annotations should be accepted only for source level 8, but
purely for the case at hand, compliance testing should be good enough,
though it is purer to check for source level.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2041706</commentid>
    <comment_count>19</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-12-16 03:00:46 -0500</bug_when>
    <thetext>(In reply to comment #18)
&gt; Just to forestall potential confusion, the decision pathways look
&gt; inverted in the above.
Oops! :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2041730</commentid>
    <comment_count>20</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-16 04:26:35 -0500</bug_when>
    <thetext>(In reply to comment #18)


[...]


&gt; Assuming JSR308 becomes official for Java8, any new syntax that allows
&gt; finer grained annotations should be accepted only for source level 8, but
&gt; purely for the case at hand, compliance testing should be good enough,
&gt; though it is purer to check for source level.

Sauce for the goose is sauce for the gander ? 

Looking at the infrastructure (org.eclipse.jdt.core.tests.util.AbstractCompilerTest.buildAllCompliancesTestSuite(TestSuite, Class)), we may have to go with just testing compliance levels, since
this is what we have always done in the test suite universe.

So it looks like we can go with the patch as it is.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2041791</commentid>
    <comment_count>21</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-16 08:49:17 -0500</bug_when>
    <thetext>I&apos;ve integrated the JSR 308-reminder with &apos;real&apos; tests as suggested in
comment 17 (w/ corrected logic :)).

With this change released for 3.8 M5 via
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=fda975d98b069f678ae89a663957463bb7bd4088</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2048742</commentid>
    <comment_count>22</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-11 03:36:29 -0500</bug_when>
    <thetext>*** Bug 366331 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2054219</commentid>
    <comment_count>23</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-23 03:08:33 -0500</bug_when>
    <thetext>Verified for 3.8 M5 using build id: I20120122-2000</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>208473</attachid>
            <date>2011-12-15 18:14:00 -0500</date>
            <delta_ts>2011-12-15 18:14:15 -0500</delta_ts>
            <desc>test &amp; fix with changed strategy.</desc>
            <filename>Bug_365983.patch</filename>
            <type>text/plain</type>
            <size>7914</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxBbm5vdGF0aW9u
VGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbEFubm90YXRpb25U
ZXN0LmphdmEKaW5kZXggNTNkOGE2Zi4uZDc5M2FjNSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Nv
bXBpbGVyL3JlZ3Jlc3Npb24vTnVsbEFubm90YXRpb25UZXN0LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3Rz
L2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbEFubm90YXRpb25UZXN0LmphdmEKQEAgLTE5LDYgKzE5
LDcgQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5jb3JlLnJ1bnRpbWUuRmlsZUxvY2F0b3I7CiBpbXBv
cnQgb3JnLmVjbGlwc2UuY29yZS5ydW50aW1lLlBsYXRmb3JtOwogaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5jb3JlLkphdmFDb3JlOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21w
aWxlci5jbGFzc2ZtdC5DbGFzc0ZpbGVDb25zdGFudHM7CiAKIC8vIHNlZSBidWcgMTg2MzQyIC0g
W2NvbXBpbGVyXVtudWxsXSBVc2luZyBhbm5vdGF0aW9ucyBmb3IgbnVsbCBjaGVja2luZwogcHVi
bGljIGNsYXNzIE51bGxBbm5vdGF0aW9uVGVzdCBleHRlbmRzIEFic3RyYWN0Q29tcGFyYWJsZVRl
c3QgewpAQCAtNTIsNyArNTMsNyBAQAogLy8gU3RhdGljIGluaXRpYWxpemVyIHRvIHNwZWNpZnkg
dGVzdHMgc3Vic2V0IHVzaW5nIFRFU1RTXyogc3RhdGljIHZhcmlhYmxlcwogLy8gQWxsIHNwZWNp
ZmllZCB0ZXN0cyB3aGljaCBkbyBub3QgYmVsb25nIHRvIHRoZSBjbGFzcyBhcmUgc2tpcHBlZC4u
Lgogc3RhdGljIHsKLS8vCQlURVNUU19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7ICJ0ZXN0X2Fzc2ln
bm1lbnRfZXhwcmVzc2lvbl8xIiB9OworLy8JCVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1tdIHsg
InRlc3Rfbm9ubnVsbF9wYXJhbWV0ZXJfMDE1IiB9OwogLy8JCVRFU1RTX05VTUJFUlMgPSBuZXcg
aW50W10geyA1NjEgfTsKIC8vCQlURVNUU19SQU5HRSA9IG5ldyBpbnRbXSB7IDEsIDIwNDkgfTsK
IH0KQEAgLTU1MCw2ICs1NTEsMTA4IEBACiAJCSJUeXBlIG1pc21hdGNoOiByZXF1aXJlZCBcJ0BO
b25OdWxsIE9iamVjdFwnIGJ1dCB0aGUgcHJvdmlkZWQgdmFsdWUgaXMgbnVsbFxuIiArIAogCQki
LS0tLS0tLS0tLVxuIik7CiB9CisvLyBub24tbnVsbCB2YXJhcmdzIChtZXNzYWdlIHNlbmQpCitw
dWJsaWMgdm9pZCB0ZXN0X25vbm51bGxfcGFyYW1ldGVyXzAxNSgpIHsKKwlydW5OZWdhdGl2ZVRl
c3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmFubm90YXRpb24uKjtcbiIgKworCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJ
IiAgICB2b2lkIGZvbyhATm9uTnVsbCBPYmplY3QgLi4uIG8pIHtcbiIgKworCQkJIiAgICAgICAg
aWYgKG8gIT0gbnVsbClcbiIgKworCQkJIiAgICAgICAgICAgICAgU3lzdGVtLm91dC5wcmludChv
LnRvU3RyaW5nKCkpO1xuIiArCisJCQkiICAgIH1cbiIgKworCQkJIiAgICB2b2lkIGZvbzIoaW50
IGksIEBOb25OdWxsIE9iamVjdCAuLi4gbykge1xuIiArCisJCQkiICAgICAgICBpZiAoby5sZW5n
dGggPiAwICYmIG9bMF0gIT0gbnVsbClcbiIgKworCQkJIiAgICAgICAgICAgICAgU3lzdGVtLm91
dC5wcmludChvWzBdLnRvU3RyaW5nKCkpO1xuIiArCisJCQkiICAgIH1cbiIgKworCQkJIiAgICB2
b2lkIGJhcigpIHtcbiIgKworCQkJIiAgICAgICAgZm9vKChPYmplY3QpbnVsbCk7XG4iICsJCS8v
IHVuY2hlY2tlZDogc2luZ2xlIHBsYWluIGFyZ3VtZW50CisJCQkiICAgICAgICBPYmplY3RbXSBv
YmpzID0gbnVsbDtcbiIgKworCQkJIiAgICAgICAgZm9vKG9ianMpO1xuIiArCQkJCS8vIGVycm9y
CisJCQkiICAgICAgICBmb28odGhpcywgbnVsbCk7XG4iICsJCQkvLyB1bmNoZWNrZWQ6IG11bHRp
cGxlIHBsYWluIGFyZ3VtZW50cworCQkJIiAgICAgICAgZm9vMigyLCAoT2JqZWN0KW51bGwpO1xu
IiArICAgIC8vIHVuY2hlY2tlZDogc2luZ2xlIHBsYWluIGFyZ3VtZW50CisJCQkiICAgICAgICBm
b28yKDIsIG51bGwsIHRoaXMpO1xuIiArICAgICAgLy8gdW5jaGVja2VkOiBtdWx0aXBsZSBwbGFp
biBhcmd1bWVudHMKKwkJCSIgICAgICAgIGZvbzIoMiwgbnVsbCk7XG4iICsgIAkJCS8vIGVycm9y
CisJCQkiICAgIH1cbiIgKworCQkJIn1cbiJ9LAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCSIx
LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNClcbiIgKyAKKwkJCSIJaWYgKG8gIT0gbnVsbClc
biIgKyAKKwkJCSIJICAgIF5cbiIgKyAKKwkJCSJSZWR1bmRhbnQgbnVsbCBjaGVjazogVGhlIHZh
cmlhYmxlIG8gY2Fubm90IGJlIG51bGwgYXQgdGhpcyBsb2NhdGlvblxuIiArIAorCQkJIi0tLS0t
LS0tLS1cbiIgKyAKKwkJCSIyLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTQpXG4iICsgCisJ
CQkiCWZvbyhvYmpzKTtcbiIgKyAKKwkJCSIJICAgIF5eXl5cbiIgKyAKKwkJCSJUeXBlIG1pc21h
dGNoOiByZXF1aXJlZCBcJ0BOb25OdWxsIE9iamVjdFtdXCcgYnV0IHRoZSBwcm92aWRlZCB2YWx1
ZSBpcyBudWxsXG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJIjMuIFdBUk5JTkcgaW4g
WC5qYXZhIChhdCBsaW5lIDE4KVxuIiArIAorCQkJIglmb28yKDIsIG51bGwpO1xuIiArIAorCQkJ
IgleXl5eXl5eXl5eXl5eXG4iICsgCisJCQkiVGhlIGFyZ3VtZW50IG9mIHR5cGUgbnVsbCBzaG91
bGQgZXhwbGljaXRseSBiZSBjYXN0IHRvIE9iamVjdFtdIGZvciB0aGUgaW52b2NhdGlvbiBvZiB0
aGUgdmFyYXJncyBtZXRob2QgZm9vMihpbnQsIE9iamVjdC4uLikgZnJvbSB0eXBlIFguIEl0IGNv
dWxkIGFsdGVybmF0aXZlbHkgYmUgY2FzdCB0byBPYmplY3QgZm9yIGEgdmFyYXJncyBpbnZvY2F0
aW9uXG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJIjQuIEVSUk9SIGluIFguamF2YSAo
YXQgbGluZSAxOClcbiIgKyAKKwkJCSIJZm9vMigyLCBudWxsKTtcbiIgKyAKKwkJCSIJICAgICAg
ICBeXl5eXG4iICsgCisJCQkiVHlwZSBtaXNtYXRjaDogcmVxdWlyZWQgXCdATm9uTnVsbCBPYmpl
Y3RbXVwnIGJ1dCB0aGUgcHJvdmlkZWQgdmFsdWUgaXMgbnVsbFxuIiArIAorCQkJIi0tLS0tLS0t
LS1cbiIsCisJCXRoaXMuTElCUywKKwkJdHJ1ZSAvKiBzaG91bGRGbHVzaCovKTsKK30KKy8vIG5v
bi1udWxsIHZhcmFyZ3MgKGFsbG9jYXRpb24gYW5kIGV4cGxpY2l0IGNvbnN0cnVjdG9yIGNhbGxz
KQorcHVibGljIHZvaWQgdGVzdF9ub25udWxsX3BhcmFtZXRlcl8wMTYoKSB7CisJcnVuTmVnYXRp
dmVUZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJIlguamF2YSIsCisJCQkiaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5hbm5vdGF0aW9uLio7XG4iICsKKwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsK
KwkJCSIgICAgWChATm9uTnVsbCBPYmplY3QgLi4uIG8pIHtcbiIgKworCQkJIiAgICAgICAgaWYg
KG8gIT0gbnVsbClcbiIgKworCQkJIiAgICAgICAgICAgICAgU3lzdGVtLm91dC5wcmludChvLnRv
U3RyaW5nKCkpO1xuIiArCisJCQkiICAgIH1cbiIgKworCQkJIiAgICBjbGFzcyBZIGV4dGVuZHMg
WCB7XG4iICsKKwkJCSIgICAgICAgIFkoaW50IGksIEBOb25OdWxsIE9iamVjdCAuLi4gbykge1xu
IiArCisJCQkiICAgICAgICAJc3VwZXIoaSwgKE9iamVjdCludWxsKTtcbiIgKworCQkJIiAgICAg
ICAgfVxuIiArCisJCQkiICAgICAgICBZKGNoYXIgYywgQE5vbk51bGwgT2JqZWN0IC4uLiBvKSB7
XG4iICsKKwkJCSIgICAgICAgIAl0aGlzKDEsIG5ldyBPYmplY3QoKSwgbnVsbCk7XG4iICsKKwkJ
CSIgICAgICAgIH1cbiIgKworCQkJIiAgICB9XG4iICsKKwkJCSIgICAgdm9pZCBiYXIoKSB7XG4i
ICsKKwkJCSIgICAgICAgIG5ldyBYKChPYmplY3RbXSludWxsKTtcbiIgKworCQkJIiAgICAgICAg
bmV3IFgodGhpcywgbnVsbCk7XG4iICsKKwkJCSIgICAgICAgIFggeCA9IG5ldyBYKG51bGwsIHRo
aXMpO1xuIiArCisJCQkiICAgICAgICB4Lm5ldyBZKDIsIChPYmplY3QpbnVsbCk7XG4iICsKKwkJ
CSIgICAgICAgIHRoaXMubmV3IFkoMiwgbnVsbCwgdGhpcyk7XG4iICsKKwkJCSIgICAgICAgIHRo
aXMubmV3IFkoMiwgKE9iamVjdFtdKW51bGwpO1xuIiArCisJCQkiICAgIH1cbiIgKworCQkJIn1c
biJ9LAorCQkJIi0tLS0tLS0tLS1cbiIgKworCQkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGlu
ZSA0KVxuIiArCisJCQkiCWlmIChvICE9IG51bGwpXG4iICsKKwkJCSIJICAgIF5cbiIgKworCQkJ
IlJlZHVuZGFudCBudWxsIGNoZWNrOiBUaGUgdmFyaWFibGUgbyBjYW5ub3QgYmUgbnVsbCBhdCB0
aGlzIGxvY2F0aW9uXG4iICsKKwkJCSItLS0tLS0tLS0tXG4iICsKKwkJCSIyLiBFUlJPUiBpbiBY
LmphdmEgKGF0IGxpbmUgMTYpXG4iICsKKwkJCSIJbmV3IFgoKE9iamVjdFtdKW51bGwpO1xuIiAr
CisJCQkiCSAgICAgIF5eXl5eXl5eXl5eXl5eXG4iICsKKwkJCSJUeXBlIG1pc21hdGNoOiByZXF1
aXJlZCBcJ0BOb25OdWxsIE9iamVjdFtdXCcgYnV0IHRoZSBwcm92aWRlZCB2YWx1ZSBpcyBudWxs
XG4iICsKKwkJCSItLS0tLS0tLS0tXG4iICsKKwkJCSIzLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxp
bmUgMjEpXG4iICsKKwkJCSIJdGhpcy5uZXcgWSgyLCAoT2JqZWN0W10pbnVsbCk7XG4iICsKKwkJ
CSIJICAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXlxuIiArCisJCQkiVHlwZSBtaXNtYXRjaDog
cmVxdWlyZWQgXCdATm9uTnVsbCBPYmplY3RbXVwnIGJ1dCB0aGUgcHJvdmlkZWQgdmFsdWUgaXMg
bnVsbFxuIiArCisJCQkiLS0tLS0tLS0tLVxuIiwKKwkJdGhpcy5MSUJTLAorCQl0cnVlIC8qIHNo
b3VsZEZsdXNoKi8pOworfQorLy8gQnVnIDM2NTk4MyAtIFtjb21waWxlcl1bbnVsbF0gQUlPT0Ig
d2l0aCBudWxsIGFubm90YXRpb24gYW5hbHlzaXMgYW5kIHZhcmFyZ3MKK3B1YmxpYyB2b2lkIHRl
c3Rfbm9ubnVsbF9wYXJhbWV0ZXJfMDE3KCkgeworCWlmICh0aGlzLmNvbXBsaWFuY2VMZXZlbCA+
IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzcpIHsKKwkJZmFpbCgiUmVtaW5kZXI6IHNob3VsZCBj
aGVjayBpZiBKU1IgMzA4IG1hbmRhdGVzIGEgY2hhbmdlIGluIGhhbmRsaW5nIHZhcmFyZyBlbGVt
ZW50cyAoc2VlIGJ1ZyAzNjU5ODMpLiIpOworCX0KK30KIC8vIGFzc2lnbmluZyBwb3RlbnRpYWwg
bnVsbCB0byBhIG5vbm51bGwgbG9jYWwgdmFyaWFibGUKIHB1YmxpYyB2b2lkIHRlc3Rfbm9ubnVs
bF9sb2NhbF8wMDEoKSB7CiAJcnVuTmVnYXRpdmVUZXN0KApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fz
dC9TdGF0ZW1lbnQuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvU3RhdGVtZW50LmphdmEKaW5kZXggMDczZWNj
MS4uOGY2OGI3YyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9TdGF0ZW1lbnQuamF2YQorKysgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvYXN0L1N0YXRlbWVudC5qYXZhCkBAIC04LDkgKzgsMTAgQEAKICAqIENvbnRyaWJ1dG9y
czoKICAqICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRp
b24KICAqICAgICBTdGVwaGFuIEhlcnJtYW5uIC0gQ29udHJpYnV0aW9ucyBmb3IKLSAqICAgICAJ
CQkJCQkJYnVnIDMzNTA5MyAtIFtjb21waWxlcl1bbnVsbF0gbWluaW1hbCBob29rIGZvciBmdXR1
cmUgbnVsbCBhbm5vdGF0aW9uIHN1cHBvcnQKLSAqICAgICAJCQkJCQkJYnVnIDM0OTMyNiAtIFsx
LjddIG5ldyB3YXJuaW5nIGZvciBtaXNzaW5nIHRyeS13aXRoLXJlc291cmNlcworICoJCQkJCQkJ
CWJ1ZyAzMzUwOTMgLSBbY29tcGlsZXJdW251bGxdIG1pbmltYWwgaG9vayBmb3IgZnV0dXJlIG51
bGwgYW5ub3RhdGlvbiBzdXBwb3J0CisgKgkJCQkJCQkJYnVnIDM0OTMyNiAtIFsxLjddIG5ldyB3
YXJuaW5nIGZvciBtaXNzaW5nIHRyeS13aXRoLXJlc291cmNlcwogICoJCQkJCQkJCWJ1ZyAxODYz
NDIgLSBbY29tcGlsZXJdW251bGxdIFVzaW5nIGFubm90YXRpb25zIGZvciBudWxsIGNoZWNraW5n
CisgKgkJCQkJCQkJYnVnIDM2NTk4MyAtIFtjb21waWxlcl1bbnVsbF0gQUlPT0Igd2l0aCBudWxs
IGFubm90YXRpb24gYW5hbHlzaXMgYW5kIHZhcmFyZ3MKICAqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
LwogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0OwogCkBAIC02
NCw3ICs2NSwyNiBAQAogewogCS8vIGNvbXBhcmUgYWN0dWFsIG51bGwtc3RhdHVzIGFnYWluc3Qg
cGFyYW1ldGVyIGFubm90YXRpb25zIG9mIHRoZSBjYWxsZWQgbWV0aG9kOgogCWlmIChhcmd1bWVu
dHMgIT0gbnVsbCAmJiBtZXRob2RCaW5kaW5nLnBhcmFtZXRlck5vbk51bGxuZXNzICE9IG51bGwp
IHsKLQkJZm9yIChpbnQgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKKworCQkv
LyBjaGVjayBpZiB2YXJhcmdzIG5lZWQgc3BlY2lhbCB0cmVhdG1lbnQ6CisJCWludCBudW1QYXJh
bXNUb0NoZWNrID0gbWV0aG9kQmluZGluZy5wYXJhbWV0ZXJzLmxlbmd0aDsKKwkJYm9vbGVhbiBw
YXNzVGhyb3VnaCA9IGZhbHNlOworCQlpZiAobWV0aG9kQmluZGluZy5pc1ZhcmFyZ3MoKSkgewor
CQkJaW50IHZhckFyZ1BvcyA9IG51bVBhcmFtc1RvQ2hlY2stMTsKKwkJCS8vIHRoaXMgaWYtYmxv
Y2sgZXNzZW50aWFsbHkgY29waWVkIGZyb20gZ2VuZXJhdGVBcmd1bWVudHMoLi4pOgorCQkJaWYg
KG51bVBhcmFtc1RvQ2hlY2sgPT0gYXJndW1lbnRzLmxlbmd0aCkgeworCQkJCVR5cGVCaW5kaW5n
IHZhckFyZ3NUeXBlID0gbWV0aG9kQmluZGluZy5wYXJhbWV0ZXJzW3ZhckFyZ1Bvc107CisJCQkJ
VHlwZUJpbmRpbmcgbGFzdFR5cGUgPSBhcmd1bWVudHNbdmFyQXJnUG9zXS5yZXNvbHZlZFR5cGU7
CisJCQkJaWYgKGxhc3RUeXBlID09IFR5cGVCaW5kaW5nLk5VTEwKKwkJCQkJCXx8ICh2YXJBcmdz
VHlwZS5kaW1lbnNpb25zKCkgPT0gbGFzdFR5cGUuZGltZW5zaW9ucygpCisJCQkJCQkmJiBsYXN0
VHlwZS5pc0NvbXBhdGlibGVXaXRoKHZhckFyZ3NUeXBlKSkpCisJCQkJCXBhc3NUaHJvdWdoID0g
dHJ1ZTsgLy8gcGFzcyBkaXJlY3RseSBhcy1pcworCQkJfQorCQkJaWYgKCFwYXNzVGhyb3VnaCkK
KwkJCQludW1QYXJhbXNUb0NoZWNrLS07IC8vIHdpdGggbm9uLXBhc3N0aHJvdWdoIHZhcmFyZ3Mg
bGFzdCBwYXJhbSBpcyBmZWQgZnJvbSBpbmRpdmlkdWFsIGFyZ3MgLT4gZG9uJ3QgY2hlY2sKKwkJ
fQorCisJCWZvciAoaW50IGkgPSAwOyBpIDwgbnVtUGFyYW1zVG9DaGVjazsgaSsrKSB7CiAJCQlp
ZiAobWV0aG9kQmluZGluZy5wYXJhbWV0ZXJOb25OdWxsbmVzc1tpXSA9PSBCb29sZWFuLlRSVUUp
IHsKIAkJCQlUeXBlQmluZGluZyBleHBlY3RlZFR5cGUgPSBtZXRob2RCaW5kaW5nLnBhcmFtZXRl
cnNbaV07CiAJCQkJRXhwcmVzc2lvbiBhcmd1bWVudCA9IGFyZ3VtZW50c1tpXTsK
</data>

          </attachment>
      

    </bug>

</bugzilla>