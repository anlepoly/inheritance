<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>402673</bug_id>
          
          <creation_ts>2013-03-07 11:38:00 -0500</creation_ts>
          <short_desc>[1.8][dom ast] ASTs &lt; JLS8 must not create new node types</short_desc>
          <delta_ts>2013-03-15 06:43:06 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Markus Keller">markus_keller</reporter>
          <assigned_to name="Manoj Palat Away Until May 11 2015">manpalat</assigned_to>
          <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="56096"
          type_id="1"
          status="+"
          setter="srikanth_sankaran"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2227539</commentid>
    <comment_count>0</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-03-07 11:38:06 -0500</bug_when>
    <thetext>ASTs before JLS8 must not try to create nodes that are only allowed in JLS8.

Hint: Open a call hierarchy on ASTNode#unsupportedIn2_3_4() and make sure all accesses are properly protected. You may want to set &quot;Search Scope &gt; Project&quot; in the view menu.


E.g. LambdaExpression nodes:

package jsr335;
public class RunnableTest {
	Runnable r = () -&gt; System.out.println(&quot;hi&quot;);
}

java.lang.UnsupportedOperationException: Operation only supported in JLS8 and later AST
	at org.eclipse.jdt.core.dom.ASTNode.unsupportedIn2_3_4(ASTNode.java:1906)
	at org.eclipse.jdt.core.dom.LambdaExpression.&lt;init&gt;(LambdaExpression.java:127)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2144)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1724)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToVariableDeclarationFragment(ASTConverter.java:3137)
	at org.eclipse.jdt.core.dom.ASTConverter.convertToFieldDeclaration(ASTConverter.java:3026)
	at org.eclipse.jdt.core.dom.ASTConverter.checkAndAddMultipleFieldDeclaration(ASTConverter.java:417)
	at org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(ASTConverter.java:183)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:2809)
	at org.eclipse.jdt.core.dom.ASTConverter.convert(ASTConverter.java:1329)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.convert(CompilationUnitResolver.java:295)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1212)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:812)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2227792</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-07 18:28:45 -0500</bug_when>
    <thetext>Please follow up asap. TIA.

I don&apos;t see a check for AST level in org.eclipse.jdt.core.dom.ASTConverter.convert(LambdaExpression). We should tag
the tree as being MALFORMED for lower JLS levels.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2228677</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-11 02:24:05 -0400</bug_when>
    <thetext>For LambdaExpressions, figuring out the &quot;containing context&quot; node to flag as 
being malformed has some challenges. As is written, convert(Expression) does 
not get to know the parent node. 

(1) Now this method could be refactored to receive a parent node, but that 
looks like an overkill for basically tagging the AST as being broken. (there 
are many callers (70+ - while lambda expressions can legally occur in only a
few of them,  they can syntactically-legally occur in all of them)

(2) ASTVisitor as is, does not have a notion of last visited node - so it can&apos;t 
also be used without extensive changes to find the parent node.

I see two quick solutions:

(1) A coarse grained flagging approach:

where 

(a) convert(LE) would return null for level &lt; JLS8 and
(b) flag the closest method/type as being MALFORMED.

(2) convert(LE) could return a NullLiteral node that is flagged as being
MALFORMED.

(2) is a bit unorthodox and so we are proceeding with (1) - the coarse
grained flagging approach.

Markus, any reason this won&apos;t be sufficient for clients ? The compiler 
would have generated a suitable IProblem anyway</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2231690</commentid>
    <comment_count>3</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2013-03-14 23:39:22 -0400</bug_when>
    <thetext>(In reply to comment #2)

I see two quick solutions:

(1)
&gt; A coarse grained flagging approach:

where 

(a) convert(LE) would return
&gt; null for level &lt; JLS8 and
(b) flag the closest method/type as being
&gt; MALFORMED.

(2) convert(LE) could return a NullLiteral node that is flagged
&gt; as being
MALFORMED.

(2) is a bit unorthodox and so we are proceeding with
&gt; (1) - the coarse
grained flagging approach.

The approach 1 was tried, but found to affect multiple places by throwing NPE. So we will be going ahead with (2) and returning a NullLiteral (with source positions) for AST &lt; JLS8.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2231696</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-14 23:54:16 -0400</bug_when>
    <thetext>(In reply to comment #3)

&gt; The approach 1 was tried, but found to affect multiple places by throwing
&gt; NPE. So we will be going ahead with (2) and returning a NullLiteral (with
&gt; source positions) for AST &lt; JLS8.

Please tag the closest method/type as being malformed - in addition for good
measure also tag the manufactured NullLiteral as being malformed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2231712</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-15 00:37:27 -0400</bug_when>
    <thetext>(In reply to comment #3)
&gt; (In reply to comment #2)
&gt; 
&gt; I see two quick solutions:

I have noticed that your replies have weird quoting. For example in
comment#3 I would have expected to see

&gt; I see two quick solutions:

instead of

I see two quick solutions:

when you do reply, doesn&apos;t bugzilla automatically do this for you ?
It could lead to confusion in future for a reader.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2231719</commentid>
    <comment_count>6</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2013-03-15 00:54:05 -0400</bug_when>
    <thetext>(In reply to comment #5)
&gt; when you do reply, doesn&apos;t bugzilla automatically do this for you ?
Unfortunately, IE doesn&apos;t do this for all the lines, while chrome and firefox does.
&gt; It could lead to confusion in future for a reader.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2231743</commentid>
    <comment_count>7</comment_count>
      <attachid>228459</attachid>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2013-03-15 03:04:56 -0400</bug_when>
    <thetext>Created attachment 228459
Proposed Patch</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2231762</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-15 03:56:07 -0400</bug_when>
    <thetext>(In reply to comment #0)
&gt; ASTs before JLS8 must not try to create nodes that are only allowed in JLS8.
&gt; 
&gt; Hint: Open a call hierarchy on ASTNode#unsupportedIn2_3_4() and make sure
&gt; all accesses are properly protected. You may want to set &quot;Search Scope &gt;
&gt; Project&quot; in the view menu.

Checking: was this step done ? Are we in the clear ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2231771</commentid>
    <comment_count>9</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2013-03-15 04:27:46 -0400</bug_when>
    <thetext>(In reply to comment #8)
&gt; (In reply to comment #0)
&gt; &gt; ASTs before JLS8 must not try to create nodes that are only allowed in JLS8.
&gt; &gt; 
&gt; &gt; Hint: Open a call hierarchy on ASTNode#unsupportedIn2_3_4() and make sure
&gt; &gt; all accesses are properly protected. You may want to set &quot;Search Scope &gt;
&gt; &gt; Project&quot; in the view menu.
&gt; 
&gt; Checking: was this step done ? Are we in the clear ?

Yes. Have checked all the cases except calls in tests. All the accesses are either  protected with a level check directly or indirectly (in a call above or with a if based on level check) or the method is documented to throw unsupported exception (eg: ASTNode:newLambdaExpression).

[Did n&apos;t check the tests since 1)the tests have to go through any of the above entry points and 2) tests would have given an exception if there was a case otherwise]</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2231850</commentid>
    <comment_count>10</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-15 06:43:06 -0400</bug_when>
    <thetext>Fix and tests released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=253db1ad159947db401a053aab34e948bedb1e92

Thanks Manoj.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>228459</attachid>
            <date>2013-03-15 03:04:00 -0400</date>
            <delta_ts>2013-03-15 03:04:56 -0400</delta_ts>
            <desc>Proposed Patch</desc>
            <filename>Fix-for-Bug-402673--18dom-ast-ASTs--JLS8-must-not-cr.patch</filename>
            <type>text/plain</type>
            <size>9216</size>
            <attacher name="Manoj Palat Away Until May 11 2015">manpalat</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9kb20vQVNUQ29udmVydGVyMTdUZXN0LmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
ZG9tL0FTVENvbnZlcnRlcjE3VGVzdC5qYXZhCmluZGV4IDFjZTBkNTAuLjAxZjZjNmEgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9kb20vQVNUQ29udmVydGVyMTdUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Rv
bS9BU1RDb252ZXJ0ZXIxN1Rlc3QuamF2YQpAQCAtMSwxMCArMSwxMyBAQAogLyoqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMSBJQk0gQ29ycG9yYXRpb24g
YW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRpb24g
YW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhl
IGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUg
dGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21w
YW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKICAqIGh0dHA6Ly93
d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCiAgKgorICogVGhpcyBpcyBhbiBpbXBs
ZW1lbnRhdGlvbiBvZiBhbiBlYXJseS1kcmFmdCBzcGVjaWZpY2F0aW9uIGRldmVsb3BlZCB1bmRl
ciB0aGUgSmF2YQorICogQ29tbXVuaXR5IFByb2Nlc3MgKEpDUCkgYW5kIGlzIG1hZGUgYXZhaWxh
YmxlIGZvciB0ZXN0aW5nIGFuZCBldmFsdWF0aW9uIHB1cnBvc2VzCisgKiBvbmx5LiBUaGUgY29k
ZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGFueSBzcGVjaWZpY2F0aW9uIG9mIHRoZSBKQ1AuCiAg
KiBDb250cmlidXRvcnM6CiAgKiAgICAgSUJNIENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5k
IGltcGxlbWVudGF0aW9uCiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KQEAgLTM4LDEyICs0MSwx
NSBAQAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5JTWV0aG9kQmluZGluZzsKIGlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uSVR5cGVCaW5kaW5nOwogaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5jb3JlLmRvbS5JVmFyaWFibGVCaW5kaW5nOworaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5jb3JlLmRvbS5NZXRob2REZWNsYXJhdGlvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
Y29yZS5kb20uTWV0aG9kSW52b2NhdGlvbjsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5k
b20uTnVsbExpdGVyYWw7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLk51bWJlckxp
dGVyYWw7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlNpbmdsZVZhcmlhYmxlRGVj
bGFyYXRpb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlN3aXRjaFN0YXRlbWVu
dDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uVHJ5U3RhdGVtZW50OwogaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5UeXBlOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5j
b3JlLmRvbS5UeXBlRGVjbGFyYXRpb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9t
LlZhcmlhYmxlRGVjbGFyYXRpb25GcmFnbWVudDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29y
ZS5kb20uVmFyaWFibGVEZWNsYXJhdGlvblN0YXRlbWVudDsKIApAQCAtNzg3LDQgKzc5Myw2OCBA
QAogCQlJTWV0aG9kQmluZGluZ1tdIG1ldGhvZHMgPSBiaW5kaW5nLmdldERlY2xhcmVkTWV0aG9k
cygpOwogCQlhc3NlcnRFcXVhbHMoIldyb25nIHNpemUiLCAyLCBtZXRob2RzLmxlbmd0aCk7CiAJ
fQorCS8qKgorICAgICAqIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNn
aT9pZD00MDI2NzMKKyAgICAgKgorICAgICAqIEB0aHJvd3MgSmF2YU1vZGVsRXhjZXB0aW9uCisg
ICAgICovCisgICAgcHVibGljIHZvaWQgdGVzdDQwMjY3M2EoKSB0aHJvd3MgSmF2YU1vZGVsRXhj
ZXB0aW9uIHsKKyAgICAgICAgICAgIFN0cmluZyBjb250ZW50cyA9ICJwYWNrYWdlIHRlc3Q0MDI2
NzM7IgorICAgICAgICAgICAgICAgICAgICArICJwdWJsaWMgY2xhc3MgWCB7XG4iCisgICAgICAg
ICAgICAgICAgICAgICsgIiAgICBSdW5uYWJsZSByID0gKCkgLT4gU3lzdGVtLm91dC5wcmludGxu
KFwiaGlcIik7XG4iCisgICAgICAgICAgICAgICAgICAgICsifVxuIjsKKyAgICAgICAgCXRoaXMu
d29ya2luZ0NvcHkgPSBnZXRXb3JraW5nQ29weSgiL0NvbnZlcnRlci9zcmMvdGVzdDQwMjY3My9Y
LmphdmEiLCB0cnVlLyogcmVzb2x2ZSAqLyk7CisgICAgICAgIAl0aGlzLndvcmtpbmdDb3B5Lmdl
dEJ1ZmZlcigpLnNldENvbnRlbnRzKGNvbnRlbnRzKTsKKyAgICAgICAgCUFTVE5vZGUgbm9kZSA9
IHJ1bkNvbnZlcnNpb24odGhpcy53b3JraW5nQ29weSwgdHJ1ZSk7CisgICAgICAgIAlhc3NlcnRU
cnVlKG5vZGUgIT0gbnVsbCk7CisgICAgCQlhc3NlcnRFcXVhbHMoIk5vdCBhIGNvbXBpbGF0aW9u
IHVuaXQiLCBBU1ROb2RlLkNPTVBJTEFUSU9OX1VOSVQsIG5vZGUuZ2V0Tm9kZVR5cGUoKSk7Cisg
ICAgCQlDb21waWxhdGlvblVuaXQgdW5pdCA9IChDb21waWxhdGlvblVuaXQpIG5vZGU7CisgICAg
CQlhc3NlcnRQcm9ibGVtc1NpemUodW5pdCwgMSwgIkxhbWJkYSBleHByZXNzaW9ucyBhcmUgYWxs
b3dlZCBvbmx5IGF0IHNvdXJjZSBsZXZlbCAxLjggb3IgYWJvdmUiKTsKKyAgICAJCVR5cGVEZWNs
YXJhdGlvbiB0eXBlID0gKFR5cGVEZWNsYXJhdGlvbikgZ2V0QVNUTm9kZSh1bml0LCAwKTsKKyAg
ICAJCWFzc2VydFRydWUoKHR5cGUuZ2V0RmxhZ3MoKSAmIEFTVE5vZGUuTUFMRk9STUVEKSAhPSAw
KTsKKyAgICAJCW5vZGUgPSBnZXRBU1ROb2RlKHVuaXQsIDAsIDApOworICAgIAkJYXNzZXJ0RXF1
YWxzKCJOb3QgYSBmaWVsZCBkZWNsYXJhdGlvbiIsIEFTVE5vZGUuRklFTERfREVDTEFSQVRJT04s
IG5vZGUuZ2V0Tm9kZVR5cGUoKSk7CisgICAgCQlGaWVsZERlY2xhcmF0aW9uIGZpZWxkRGVjbGFy
YXRpb24gPSAoRmllbGREZWNsYXJhdGlvbikgbm9kZTsKKyAgICAJCWZpbmFsIExpc3QgZnJhZ21l
bnRzID0gZmllbGREZWNsYXJhdGlvbi5mcmFnbWVudHMoKTsKKyAgICAJCWFzc2VydEVxdWFscygi
V3Jvbmcgc2l6ZSIsIDEsIGZyYWdtZW50cy5zaXplKCkpOworICAgIAkJVmFyaWFibGVEZWNsYXJh
dGlvbkZyYWdtZW50IGZyYWdtZW50ID0gKFZhcmlhYmxlRGVjbGFyYXRpb25GcmFnbWVudCkgZnJh
Z21lbnRzLmdldCgwKTsKKyAgICAJCWZpbmFsIEV4cHJlc3Npb24gaW5pdGlhbGl6ZXIgPSBmcmFn
bWVudC5nZXRJbml0aWFsaXplcigpOworICAgIAkJYXNzZXJ0RXF1YWxzKCJOb3QgYSBudWxsIGxp
dGVyYWwiLCBBU1ROb2RlLk5VTExfTElURVJBTCwgaW5pdGlhbGl6ZXIuZ2V0Tm9kZVR5cGUoKSk7
CisgICAgCQlOdWxsTGl0ZXJhbCBudWxsTGl0ZXJhbCA9IChOdWxsTGl0ZXJhbCkgaW5pdGlhbGl6
ZXI7CisgICAgCQlhc3NlcnRUcnVlKChudWxsTGl0ZXJhbC5nZXRGbGFncygpICYgQVNUTm9kZS5N
QUxGT1JNRUQpICE9IDApOworICAgIH0KKyAgICAvKioKKyAgICAgKiBodHRwczovL2J1Z3MuZWNs
aXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDAyNjczCisgICAgICoKKyAgICAgKiBAdGhy
b3dzIEphdmFNb2RlbEV4Y2VwdGlvbgorICAgICAqLworICAgIHB1YmxpYyB2b2lkIHRlc3Q0MDI2
NzNiKCkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbiB7CisgICAgICAgICAgICBTdHJpbmcgY29u
dGVudHMgPSAicGFja2FnZSB0ZXN0NDAyNjczOyIKKyAgICAgICAgICAgICAgICAgICAgKyAicHVi
bGljIGNsYXNzIFgge1xuIgorICAgICAgICAgICAgCQkrICIgICAgcHVibGljIHZvaWQgZm9vKCkg
e1xuIgorICAgICAgICAgICAgICAgICAgICArICIgICAgICAgIFJ1bm5hYmxlIHIgPSAoKSAtPiBT
eXN0ZW0ub3V0LnByaW50bG4oXCJoaVwiKTtcbiIKKyAgICAgICAgICAgICAgICAgICAgKyIgICAg
fVxuIgorICAgICAgICAgICAgICAgICAgICArIn1cbiI7CisgICAgICAgIAl0aGlzLndvcmtpbmdD
b3B5ID0gZ2V0V29ya2luZ0NvcHkoIi9Db252ZXJ0ZXIvc3JjL3Rlc3Q0MDI2NzMvWC5qYXZhIiwg
dHJ1ZS8qIHJlc29sdmUgKi8pOworICAgICAgICAJdGhpcy53b3JraW5nQ29weS5nZXRCdWZmZXIo
KS5zZXRDb250ZW50cyhjb250ZW50cyk7CisgICAgICAgIAlBU1ROb2RlIG5vZGUgPSBydW5Db252
ZXJzaW9uKHRoaXMud29ya2luZ0NvcHksIHRydWUpOworICAgICAgICAJYXNzZXJ0VHJ1ZShub2Rl
ICE9IG51bGwpOworICAgIAkJYXNzZXJ0RXF1YWxzKCJOb3QgYSBjb21waWxhdGlvbiB1bml0Iiwg
QVNUTm9kZS5DT01QSUxBVElPTl9VTklULCBub2RlLmdldE5vZGVUeXBlKCkpOworICAgIAkJQ29t
cGlsYXRpb25Vbml0IHVuaXQgPSAoQ29tcGlsYXRpb25Vbml0KSBub2RlOworICAgIAkJYXNzZXJ0
UHJvYmxlbXNTaXplKHVuaXQsIDEsICJMYW1iZGEgZXhwcmVzc2lvbnMgYXJlIGFsbG93ZWQgb25s
eSBhdCBzb3VyY2UgbGV2ZWwgMS44IG9yIGFib3ZlIik7CisgICAgCQlub2RlID0gZ2V0QVNUTm9k
ZSh1bml0LCAwLCAwKTsKKyAgICAJCWFzc2VydEVxdWFscygiTm90IGEgbWV0aG9kIGRlY2xhcmF0
aW9uIiwgQVNUTm9kZS5NRVRIT0RfREVDTEFSQVRJT04sIG5vZGUuZ2V0Tm9kZVR5cGUoKSk7Cisg
ICAgCQlNZXRob2REZWNsYXJhdGlvbiBtZXRob2REZWNsID0gKE1ldGhvZERlY2xhcmF0aW9uKSBu
b2RlOworICAgIAkJYXNzZXJ0VHJ1ZSgobWV0aG9kRGVjbC5nZXRGbGFncygpICYgQVNUTm9kZS5N
QUxGT1JNRUQpID09IDEpOworICAgIAkJbm9kZSA9IGdldEFTVE5vZGUodW5pdCwgMCwgMCwgMCk7
CisgICAgCQlhc3NlcnRFcXVhbHMoIk5vdCBhIHZhcmlhYmxlIGRlY2xhcmF0aW9uIHN0YXRlbWVu
dCIsIEFTVE5vZGUuVkFSSUFCTEVfREVDTEFSQVRJT05fU1RBVEVNRU5ULCBub2RlLmdldE5vZGVU
eXBlKCkpOworICAgIAkJVmFyaWFibGVEZWNsYXJhdGlvblN0YXRlbWVudCB2YXJpYWJsZURlY2wg
PSAoVmFyaWFibGVEZWNsYXJhdGlvblN0YXRlbWVudCkgbm9kZTsKKyAgICAJCWZpbmFsIExpc3Qg
ZnJhZ21lbnRzID0gdmFyaWFibGVEZWNsLmZyYWdtZW50cygpOworICAgIAkJYXNzZXJ0RXF1YWxz
KCJXcm9uZyBzaXplIiwgMSwgZnJhZ21lbnRzLnNpemUoKSk7CisgICAgCQlWYXJpYWJsZURlY2xh
cmF0aW9uRnJhZ21lbnQgZnJhZ21lbnQgPSAoVmFyaWFibGVEZWNsYXJhdGlvbkZyYWdtZW50KSBm
cmFnbWVudHMuZ2V0KDApOworICAgIAkJZmluYWwgRXhwcmVzc2lvbiBpbml0aWFsaXplciA9IGZy
YWdtZW50LmdldEluaXRpYWxpemVyKCk7CisgICAgCQlhc3NlcnRFcXVhbHMoIk5vdCBhIG51bGwg
bGl0ZXJhbCIsIEFTVE5vZGUuTlVMTF9MSVRFUkFMLCBpbml0aWFsaXplci5nZXROb2RlVHlwZSgp
KTsKKyAgICAJCU51bGxMaXRlcmFsIG51bGxMaXRlcmFsID0gKE51bGxMaXRlcmFsKSBpbml0aWFs
aXplcjsKKyAgICAJCWFzc2VydFRydWUoKG51bGxMaXRlcmFsLmdldEZsYWdzKCkgJiBBU1ROb2Rl
Lk1BTEZPUk1FRCkgIT0gMCk7CisgICAgfQogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1RDb252ZXJ0ZXIuamF2YSBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vQVNUQ29udmVy
dGVyLmphdmEKaW5kZXggNGI3YjgxOC4uYzg2ZjQ2YyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1RDb252ZXJ0ZXIuamF2YQor
KysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FT
VENvbnZlcnRlci5qYXZhCkBAIC02Nyw2ICs2Nyw3IEBACiBjbGFzcyBBU1RDb252ZXJ0ZXIgewog
CiAJcHJvdGVjdGVkIEFTVCBhc3Q7CisJcHJpdmF0ZSBBU1ROb2RlIHJlZmVyZW5jZUNvbnRleHQ7
CiAJcHJvdGVjdGVkIENvbW1lbnRbXSBjb21tZW50c1RhYmxlOwogCWNoYXJbXSBjb21waWxhdGlv
blVuaXRTb3VyY2U7CiAJaW50IGNvbXBpbGF0aW9uVW5pdFNvdXJjZUxlbmd0aDsKQEAgLTgyLDYg
KzgzLDcgQEAKIAogCXB1YmxpYyBBU1RDb252ZXJ0ZXIoTWFwIG9wdGlvbnMsIGJvb2xlYW4gcmVz
b2x2ZUJpbmRpbmdzLCBJUHJvZ3Jlc3NNb25pdG9yIG1vbml0b3IpIHsKIAkJdGhpcy5yZXNvbHZl
QmluZGluZ3MgPSByZXNvbHZlQmluZGluZ3M7CisJCXRoaXMucmVmZXJlbmNlQ29udGV4dCA9IG51
bGw7CiAJCU9iamVjdCBzb3VyY2VNb2RlU2V0dGluZyA9IG9wdGlvbnMuZ2V0KEphdmFDb3JlLkNP
TVBJTEVSX1NPVVJDRSk7CiAJCWxvbmcgc291cmNlTGV2ZWwgPSBDb21waWxlck9wdGlvbnMudmVy
c2lvblRvSmRrTGV2ZWwoc291cmNlTW9kZVNldHRpbmcpOwogCQlpZiAoc291cmNlTGV2ZWwgPT0g
MCkgewpAQCAtNDYxLDYgKzQ2Myw4IEBACiAJCQlyZXR1cm4gY29udmVydCgob3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5Bbm5vdGF0aW9uTWV0aG9kRGVjbGFyYXRpb24pIG1l
dGhvZERlY2xhcmF0aW9uKTsKIAkJfQogCQlNZXRob2REZWNsYXJhdGlvbiBtZXRob2REZWNsID0g
bmV3IE1ldGhvZERlY2xhcmF0aW9uKHRoaXMuYXN0KTsKKwkJQVNUTm9kZSBvbGRSZWZlcmVuY2VD
b250ZXh0ID0gdGhpcy5yZWZlcmVuY2VDb250ZXh0OworCQl0aGlzLnJlZmVyZW5jZUNvbnRleHQg
PSBtZXRob2REZWNsOwogCQlzZXRNb2RpZmllcnMobWV0aG9kRGVjbCwgbWV0aG9kRGVjbGFyYXRp
b24pOwogCQlib29sZWFuIGlzQ29uc3RydWN0b3IgPSBtZXRob2REZWNsYXJhdGlvbi5pc0NvbnN0
cnVjdG9yKCk7CiAJCW1ldGhvZERlY2wuc2V0Q29uc3RydWN0b3IoaXNDb25zdHJ1Y3Rvcik7CkBA
IC02NTUsNiArNjU5LDcgQEAKIAkJCXJlY29yZE5vZGVzKG1ldGhvZE5hbWUsIG1ldGhvZERlY2xh
cmF0aW9uKTsKIAkJCW1ldGhvZERlY2wucmVzb2x2ZUJpbmRpbmcoKTsKIAkJfQorCQl0aGlzLnJl
ZmVyZW5jZUNvbnRleHQgPSBvbGRSZWZlcmVuY2VDb250ZXh0OwogCQlyZXR1cm4gbWV0aG9kRGVj
bDsKIAl9CiAKQEAgLTEwNTMsNiArMTA1OCw4IEBACiAJICovCiAJcHVibGljIFR5cGVEZWNsYXJh
dGlvbiBjb252ZXJ0KG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuQVNUTm9k
ZVtdIG5vZGVzKSB7CiAJCWZpbmFsIFR5cGVEZWNsYXJhdGlvbiB0eXBlRGVjbCA9IG5ldyBUeXBl
RGVjbGFyYXRpb24odGhpcy5hc3QpOworCQlBU1ROb2RlIG9sZFJlZmVyZW5jZUNvbnRleHQgPSB0
aGlzLnJlZmVyZW5jZUNvbnRleHQ7CisJCXRoaXMucmVmZXJlbmNlQ29udGV4dCA9IHR5cGVEZWNs
OwogCQl0eXBlRGVjbC5zZXRJbnRlcmZhY2UoZmFsc2UpOwogCQlpbnQgbm9kZXNMZW5ndGggPSBu
b2Rlcy5sZW5ndGg7CiAJCWZvciAoaW50IGkgPSAwOyBpIDwgbm9kZXNMZW5ndGg7IGkrKykgewpA
QCAtMTA5NSw2ICsxMTAyLDcgQEAKIAkJCQl9CiAJCQl9CiAJCX0KKwkJdGhpcy5yZWZlcmVuY2VD
b250ZXh0ID0gb2xkUmVmZXJlbmNlQ29udGV4dDsKIAkJcmV0dXJuIHR5cGVEZWNsOwogCX0KIApA
QCAtMjEzMSw3ICsyMTM5LDE2IEBACiAJCXJldHVybiBleHByOwogCX0KIAotCXB1YmxpYyBMYW1i
ZGFFeHByZXNzaW9uIGNvbnZlcnQob3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFz
dC5MYW1iZGFFeHByZXNzaW9uIGxhbWJkYSkgeworCXB1YmxpYyBFeHByZXNzaW9uIGNvbnZlcnQo
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5MYW1iZGFFeHByZXNzaW9uIGxh
bWJkYSkgeworCQlpZiAodGhpcy5hc3QuYXBpTGV2ZWwgPCBBU1QuSkxTOCkgeworCQkJaWYgKHRo
aXMucmVmZXJlbmNlQ29udGV4dCAhPSBudWxsKSB7CisJCQkJdGhpcy5yZWZlcmVuY2VDb250ZXh0
LnNldEZsYWdzKHRoaXMucmVmZXJlbmNlQ29udGV4dC5nZXRGbGFncygpIHwgQVNUTm9kZS5NQUxG
T1JNRUQpOworCQkJfQorCQkJTnVsbExpdGVyYWwgbnVsbExpdGVyYWwgPSBuZXcgTnVsbExpdGVy
YWwodGhpcy5hc3QpOworCQkJbnVsbExpdGVyYWwuc2V0RmxhZ3MobnVsbExpdGVyYWwuZ2V0Rmxh
Z3MoKSB8IEFTVE5vZGUuTUFMRk9STUVEKTsKKwkJCW51bGxMaXRlcmFsLnNldFNvdXJjZVJhbmdl
KGxhbWJkYS5zb3VyY2VTdGFydCwgbGFtYmRhLnNvdXJjZUVuZCAtIGxhbWJkYS5zb3VyY2VTdGFy
dCArIDEpOworCQkJcmV0dXJuIG51bGxMaXRlcmFsOwkJCisJCX0KIAkJZmluYWwgTGFtYmRhRXhw
cmVzc2lvbglsYW1iZGFFeHByZXNzaW9uID0gbmV3IExhbWJkYUV4cHJlc3Npb24odGhpcy5hc3Qp
OwogCQlpZiAodGhpcy5yZXNvbHZlQmluZGluZ3MpIHsKIAkJCXJlY29yZE5vZGVzKGxhbWJkYUV4
cHJlc3Npb24sIGxhbWJkYSk7CkBAIC0yNzQ4LDYgKzI3NjUsOCBAQAogCiAJCWNoZWNrQ2FuY2Vs
ZWQoKTsKIAkJVHlwZURlY2xhcmF0aW9uIHR5cGVEZWNsID0gbmV3IFR5cGVEZWNsYXJhdGlvbih0
aGlzLmFzdCk7CisJCUFTVE5vZGUgb2xkUmVmZXJlbmNlQ29udGV4dCA9IHRoaXMucmVmZXJlbmNl
Q29udGV4dDsKKwkJdGhpcy5yZWZlcmVuY2VDb250ZXh0ID0gdHlwZURlY2w7CiAJCWlmICh0eXBl
RGVjbGFyYXRpb24ubW9kaWZpZXJzU291cmNlU3RhcnQgIT0gLTEpIHsKIAkJCXNldE1vZGlmaWVy
cyh0eXBlRGVjbCwgdHlwZURlY2xhcmF0aW9uKTsKIAkJfQpAQCAtMjgwNCw2ICsyODIzLDcgQEAK
IAkJCXJlY29yZE5vZGVzKHR5cGVOYW1lLCB0eXBlRGVjbGFyYXRpb24pOwogCQkJdHlwZURlY2wu
cmVzb2x2ZUJpbmRpbmcoKTsKIAkJfQorCQl0aGlzLnJlZmVyZW5jZUNvbnRleHQgPSBvbGRSZWZl
cmVuY2VDb250ZXh0OwogCQlyZXR1cm4gdHlwZURlY2w7CiAJfQog
</data>

          </attachment>
      

    </bug>

</bugzilla>