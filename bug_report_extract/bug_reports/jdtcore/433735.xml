<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>433735</bug_id>
          
          <creation_ts>2014-04-29 04:49:00 -0400</creation_ts>
          <short_desc>[1.8] Discrepancy with javac when dealing with local classes in lambda expressions</short_desc>
          <delta_ts>2015-01-12 04:09:38 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.5 M2</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Sasikanth Bharadwaj">saammana</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>jarthana</cc>
    
    <cc>manpalat</cc>
    
    <cc>Sebastian.Zarnekow</cc>
    
    <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2394490</commentid>
    <comment_count>0</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-04-29 04:49:54 -0400</bug_when>
    <thetext>The following class is accepted by eclipse while it is rejected by javac with the error

cannot reference this before super type constructor has been called.
---------------------&gt;
import java.util.function.Supplier;

class E {
	E(Supplier&lt;Object&gt; factory) { }
}

public class Y extends E {
	Y() {
		super( () -&gt; {
			class Z extends E {
				Z() {
					super(new Supplier&lt;Object&gt;() {
						@Override
						public Object get() {
							// TODO Auto-generated method stub
							return new Object();
						}
					});
				}
			} 
			return new Z();
			});
	}
	public static void main(String[] args) {
		new Y();
	}
}
-----------------------------&gt;
Not sure if it&apos;s a bug in eclipse or javac.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2394519</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-04-29 05:10:25 -0400</bug_when>
    <thetext>From a quick look I&apos;d say:

- Z requires an enclosing instance of type Y

- Y&apos;s &apos;this&apos; is not available during evaluating arguments to the super(..) call

=&gt; a local class defined in a lambda which is a super-call argument can never be instantiated.


Question: does Z really require this enclosing instance?
- Z is not a regular inner class but a local class
- it does not explicitly access the enclosing instance nor any of its members


If the program were legal, it still breaks at runtime:

Exception in thread &quot;main&quot; java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    Y.&lt;init&gt;()V @2: invokedynamic
  Reason:
    Type uninitializedThis (current frame, stack[1]) is not assignable to &apos;Y&apos;
  Current Frame:
    bci: @2
    flags: { flagThisUninit }
    locals: { uninitializedThis }
    stack: { uninitializedThis, uninitializedThis }
  Bytecode:
    0000000: 2a2a ba00 0b00 00b7 000c b1            


All this is said without looking into the spec, yet.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2429958</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-07-21 17:20:08 -0400</bug_when>
    <thetext>any volunteer?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2451511</commentid>
    <comment_count>3</comment_count>
    <who name="Sebastian Zarnekow">Sebastian.Zarnekow</who>
    <bug_when>2014-09-15 02:51:05 -0400</bug_when>
    <thetext>Did you mean Target milestone 4.5M3?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2451512</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-15 02:54:34 -0400</bug_when>
    <thetext>(In reply to Sebastian Zarnekow from comment #3)
&gt; Did you mean Target milestone 4.5M3?

:) Thanks Sebastian.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2452104</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-16 01:08:50 -0400</bug_when>
    <thetext>I&apos;ll take over this one to allow Sasi to work on shape analysis.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2452845</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-17 00:35:49 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #1)
&gt; From a quick look I&apos;d say:
&gt; 
&gt; - Z requires an enclosing instance of type Y
&gt; 
&gt; - Y&apos;s &apos;this&apos; is not available during evaluating arguments to the super(..)
&gt; call
&gt; 
&gt; =&gt; a local class defined in a lambda which is a super-call argument can
&gt; never be instantiated.
&gt; 
&gt; 
&gt; Question: does Z really require this enclosing instance?
&gt; - Z is not a regular inner class but a local class
&gt; - it does not explicitly access the enclosing instance nor any of its members

These two points do not matter. 8.1.3 has the details.

Fix and tests released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=85430bbb6b230d87cb672b19d866f291f4cf633d</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2453672</commentid>
    <comment_count>7</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-09-18 08:59:56 -0400</bug_when>
    <thetext>Verified fixed for 4.5 M2 using  I20140918-0330 build.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2504272</commentid>
    <comment_count>8</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2015-01-12 01:53:42 -0500</bug_when>
    <thetext>This needs to be backported to 442 in order to include bug 446317. Dani/Jay, please authorize.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2504277</commentid>
    <comment_count>9</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-01-12 02:03:08 -0500</bug_when>
    <thetext>(In reply to Sasikanth Bharadwaj from comment #8)
&gt; This needs to be backported to 442 in order to include bug 446317. Dani/Jay,
&gt; please authorize.

Patch looks safe to me. Sasi, please proceed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2504318</commentid>
    <comment_count>10</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2015-01-12 04:09:38 -0500</bug_when>
    <thetext>Released to 442 via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=R4_4_maintenance&amp;id=3adaecc389796bbf5aca13cddf4c067ef8810859</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>