<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>373571</bug_id>
          
          <creation_ts>2012-03-07 12:59:00 -0500</creation_ts>
          <short_desc>[null][regression] Incorrect application of null annotations to primitive types</short_desc>
          <delta_ts>2012-03-13 14:36:24 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Mac OS X - Carbon (unsup.)</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>3.8 M6</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Sebastian Zarnekow">Sebastian.Zarnekow</reporter>
          <assigned_to name="Ayushman Jain">amj87.iitr</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>deepakazad</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2076808</commentid>
    <comment_count>0</comment_count>
    <who name="Sebastian Zarnekow">Sebastian.Zarnekow</who>
    <bug_when>2012-03-07 12:59:54 -0500</bug_when>
    <thetext>With the following two classes I get 

&apos;The return type is incompatible with the @NonNull return from C.doStuff(int)&apos;
and
&apos;Missing non-null annotation: inherited method from C declares this parameter as @NonNull&apos;

on the primitive types int and void on method D#doStuff

import org.eclipse.jdt.annotation.NonNullByDefault;

@NonNullByDefault
public class C {
	public void doStuff(int i) {}
}


import org.eclipse.jdt.annotation.NonNullByDefault;

@NonNullByDefault
class D extends C {
	@Override
	public void doStuff(int i) {
		super.doStuff(i);
	}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2076812</commentid>
    <comment_count>1</comment_count>
    <who name="Sebastian Zarnekow">Sebastian.Zarnekow</who>
    <bug_when>2012-03-07 13:04:02 -0500</bug_when>
    <thetext>Build I20120306-0800</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2077000</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-07 18:09:22 -0500</bug_when>
    <thetext>I couldn&apos;t reproduce neither from source nor using N20120305-2000, which should be pretty much identical to the integration build you used.

The check that prevents applying null defaults to basic types in method signatures is still in place (in MethodBinding.fillInDefaultNonNullness()) - nothing changed recently.

OTOH, both builds have some weird test failures. Not sure if those are related.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2077058</commentid>
    <comment_count>3</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-03-08 01:16:47 -0500</bug_when>
    <thetext>(In reply to comment #1)
&gt; Build I20120306-0800

I can reproduce both on this build and on HEAD. Hmm, this is bad. :(
Thanks a lot for reporting this Sebastian!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2077060</commentid>
    <comment_count>4</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-03-08 01:29:28 -0500</bug_when>
    <thetext>May have been broken after bug 365531</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2077061</commentid>
    <comment_count>5</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-03-08 01:32:22 -0500</bug_when>
    <thetext>Two problems in org.eclipse.jdt.internal.compiler.lookup.MethodVerifier15.checkNullSpecInheritance(MethodBinding, MethodBinding) :
1) No check to avoid reporting of such problems on base types
2) The @NonNullByDefault doesn&apos;t propogate onto the current method.

Stephan, what do you think?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2077066</commentid>
    <comment_count>6</comment_count>
      <attachid>212274</attachid>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-03-08 01:52:54 -0500</bug_when>
    <thetext>Created attachment 212274
proposed fix

Fixing (1) fixes (2) as well because fillInDefaultNullness is a no-op for base types.

Stephan, is there any location too which needs this fix?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2077100</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-08 03:57:32 -0500</bug_when>
    <thetext>(In reply to comment #3)
&gt; (In reply to comment #1)
&gt; &gt; Build I20120306-0800
&gt; 
&gt; I can reproduce both on this build and on HEAD. Hmm, this is bad. :(
&gt; Thanks a lot for reporting this Sebastian!

Could you include a test in the patch - I had/have some trouble reproducing
this on HEAD.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2077122</commentid>
    <comment_count>8</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-03-08 04:41:40 -0500</bug_when>
    <thetext>(In reply to comment #7)
&gt; (In reply to comment #3)
&gt; &gt; (In reply to comment #1)
&gt; &gt; &gt; Build I20120306-0800
&gt; &gt; 
&gt; &gt; I can reproduce both on this build and on HEAD. Hmm, this is bad. :(
&gt; &gt; Thanks a lot for reporting this Sebastian!
&gt; 
&gt; Could you include a test in the patch - I had/have some trouble reproducing
&gt; this on HEAD.

Same old drill - The 2 classes have to be in different CU&apos;s.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2077125</commentid>
    <comment_count>9</comment_count>
    <who name="Sebastian Zarnekow">Sebastian.Zarnekow</who>
    <bug_when>2012-03-08 04:44:55 -0500</bug_when>
    <thetext>(In reply to comment #8)
&gt; The 2 classes have to be in different CU&apos;s.

Sorry I could have mentioned that in the initial report but thought the two import section are an indicator. There is no such issue with nested classes or two classes in the same file.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2077153</commentid>
    <comment_count>10</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-03-08 05:34:36 -0500</bug_when>
    <thetext>(In reply to comment #6)
&gt; Created attachment 212274 [details]
&gt; proposed fix
Sorry, thats not the correct fix. The real fix is put checks for base types in org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.scanMethodForNullAnnotation(IBinaryMethod, MethodBinding)
Need to add a test for this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2077167</commentid>
    <comment_count>11</comment_count>
      <attachid>212287</attachid>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-03-08 05:56:54 -0500</bug_when>
    <thetext>Created attachment 212287
proposed fix v1.0 + regression tests

This is the correct patch. Also added a builder test to mimic the case.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2077445</commentid>
    <comment_count>12</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-08 13:43:42 -0500</bug_when>
    <thetext>From a cursory look the patch looks fine to me.

(In reply to comment #4)
&gt; May have been broken after bug 365531

Exactly, before bug 365531 we only had one location evaluating the default, and there we check for basic types. After that bug also BinaryTypeBinding needs to apply the same logic.

Thanks, Ayush!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2077697</commentid>
    <comment_count>13</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-03-09 01:06:41 -0500</bug_when>
    <thetext>Released in master via commit 99e894848fc56021931fbde74aea8ec7cd4a00da</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2079811</commentid>
    <comment_count>14</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-13 14:36:24 -0400</bug_when>
    <thetext>For the records: the problem cannot be reproduced by a full build, only incremental compilation where C is consumed from its .class file was broken. Exactly this handling of binary types is fixed by the patch.

Verified for 3.8 M6 using build I20120312-1800.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>212274</attachid>
            <date>2012-03-08 01:52:00 -0500</date>
            <delta_ts>2012-03-08 05:56:54 -0500</delta_ts>
            <desc>proposed fix</desc>
            <filename>test.patch</filename>
            <type>text/plain</type>
            <size>5757</size>
            <attacher name="Ayushman Jain">amj87.iitr</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvTWV0aG9kVmVyaWZpZXIxNS5qYXZhIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2xvb2t1cC9NZXRob2RWZXJpZmllcjE1LmphdmEKaW5kZXggOWMwMzBlYy4uYmM1NGNiMiAxMDA2
NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2xvb2t1cC9NZXRob2RWZXJpZmllcjE1LmphdmEKKysrIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2xvb2t1cC9NZXRob2RWZXJpZmllcjE1LmphdmEKQEAgLTM4NSw3ICszODUsNyBAQAogCQlzcmNN
ZXRob2QgPSBjdXJyZW50TWV0aG9kLnNvdXJjZU1ldGhvZCgpOwogCiAJLy8gcmV0dXJuIHR5cGU6
Ci0JaWYgKChpbmhlcml0ZWRCaXRzICYgVGFnQml0cy5Bbm5vdGF0aW9uTm9uTnVsbCkgIT0gMCkg
eworCWlmICghKGN1cnJlbnRNZXRob2QucmV0dXJuVHlwZS5pc0Jhc2VUeXBlKCkpICYmIChpbmhl
cml0ZWRCaXRzICYgVGFnQml0cy5Bbm5vdGF0aW9uTm9uTnVsbCkgIT0gMCkgewogCQlsb25nIGN1
cnJlbnROdWxsQml0cyA9IGN1cnJlbnRCaXRzICYgKFRhZ0JpdHMuQW5ub3RhdGlvbk5vbk51bGx8
VGFnQml0cy5Bbm5vdGF0aW9uTnVsbGFibGUpOwogCQlpZiAoY3VycmVudE51bGxCaXRzICE9IFRh
Z0JpdHMuQW5ub3RhdGlvbk5vbk51bGwpIHsKIAkJCWlmIChzcmNNZXRob2QgIT0gbnVsbCkgewpA
QCAtNDA2LDQ0ICs0MDYsNDYgQEAKIAkJaW50IGxlbmd0aCA9IGluaGVyaXRlZE1ldGhvZC5wYXJh
bWV0ZXJOb25OdWxsbmVzcy5sZW5ndGg7CiAJCWZvciAoaW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBp
KyspIHsKIAkJCUFyZ3VtZW50IGN1cnJlbnRBcmd1bWVudCA9IGN1cnJlbnRBcmd1bWVudHMgPT0g
bnVsbCA/IG51bGwgOiBjdXJyZW50QXJndW1lbnRzW2ldOwotCisJCQlib29sZWFuIGlzQmFzZVR5
cGUgPSBjdXJyZW50QXJndW1lbnQgIT0gbnVsbCAmJiBjdXJyZW50QXJndW1lbnQuYmluZGluZyAh
PSBudWxsICYmIGN1cnJlbnRBcmd1bWVudC5iaW5kaW5nLnR5cGUuaXNCYXNlVHlwZSgpOwogCQkJ
Qm9vbGVhbiBpbmhlcml0ZWROb25OdWxsTmVzcyA9IGluaGVyaXRlZE1ldGhvZC5wYXJhbWV0ZXJO
b25OdWxsbmVzc1tpXTsKIAkJCUJvb2xlYW4gY3VycmVudE5vbk51bGxOZXNzID0gKGN1cnJlbnRN
ZXRob2QucGFyYW1ldGVyTm9uTnVsbG5lc3MgPT0gbnVsbCkKIAkJCQkJCQkJCQk/IG51bGwgOiBj
dXJyZW50TWV0aG9kLnBhcmFtZXRlck5vbk51bGxuZXNzW2ldOwotCQkJaWYgKGluaGVyaXRlZE5v
bk51bGxOZXNzICE9IG51bGwpIHsJCQkJLy8gc3VwZXIgaGFzIGEgbnVsbCBhbm5vdGF0aW9uCi0J
CQkJaWYgKGN1cnJlbnROb25OdWxsTmVzcyA9PSBudWxsKSB7CQkJLy8gY3VycmVudCBwYXJhbWV0
ZXIgbGFja3MgbnVsbCBhbm5vdGF0aW9uCi0JCQkJCWJvb2xlYW4gbmVlZE5vbk51bGwgPSBmYWxz
ZTsKLQkJCQkJY2hhcltdW10gYW5ub3RhdGlvbk5hbWU7Ci0JCQkJCWlmIChpbmhlcml0ZWROb25O
dWxsTmVzcyA9PSBCb29sZWFuLlRSVUUpIHsKLQkJCQkJCW5lZWROb25OdWxsID0gdHJ1ZTsKLQkJ
CQkJCWFubm90YXRpb25OYW1lID0gdGhpcy5lbnZpcm9ubWVudC5nZXROb25OdWxsQW5ub3RhdGlv
bk5hbWUoKTsKLQkJCQkJfSBlbHNlIHsKLQkJCQkJCWFubm90YXRpb25OYW1lID0gdGhpcy5lbnZp
cm9ubWVudC5nZXROdWxsYWJsZUFubm90YXRpb25OYW1lKCk7Ci0JCQkJCX0KLQkJCQkJaWYgKGN1
cnJlbnRBcmd1bWVudCAhPSBudWxsKSB7Ci0JCQkJCQl0aGlzLnR5cGUuc2NvcGUucHJvYmxlbVJl
cG9ydGVyKCkucGFyYW1ldGVyTGFja2luZ051bGxBbm5vdGF0aW9uKAotCQkJCQkJCQljdXJyZW50
QXJndW1lbnQsCi0JCQkJCQkJCWluaGVyaXRlZE1ldGhvZC5kZWNsYXJpbmdDbGFzcywKLQkJCQkJ
CQkJbmVlZE5vbk51bGwsCi0JCQkJCQkJCWFubm90YXRpb25OYW1lKTsKLQkJCQkJCWNvbnRpbnVl
OwotCQkJCQl9IGVsc2UgewotCQkJCQkJdGhpcy50eXBlLnNjb3BlLnByb2JsZW1SZXBvcnRlcigp
LmNhbm5vdEltcGxlbWVudEluY29tcGF0aWJsZU51bGxuZXNzKGN1cnJlbnRNZXRob2QsIGluaGVy
aXRlZE1ldGhvZCk7Ci0JCQkJCQlicmVhazsKKwkJCWlmICghaXNCYXNlVHlwZSkgeworCQkJCWlm
IChpbmhlcml0ZWROb25OdWxsTmVzcyAhPSBudWxsKSB7CQkJCS8vIHN1cGVyIGhhcyBhIG51bGwg
YW5ub3RhdGlvbgorCQkJCQlpZiAoY3VycmVudE5vbk51bGxOZXNzID09IG51bGwpIHsJCQkvLyBj
dXJyZW50IHBhcmFtZXRlciBsYWNrcyBudWxsIGFubm90YXRpb24KKwkJCQkJCWJvb2xlYW4gbmVl
ZE5vbk51bGwgPSBmYWxzZTsKKwkJCQkJCWNoYXJbXVtdIGFubm90YXRpb25OYW1lOworCQkJCQkJ
aWYgKGluaGVyaXRlZE5vbk51bGxOZXNzID09IEJvb2xlYW4uVFJVRSkgeworCQkJCQkJCW5lZWRO
b25OdWxsID0gdHJ1ZTsKKwkJCQkJCQlhbm5vdGF0aW9uTmFtZSA9IHRoaXMuZW52aXJvbm1lbnQu
Z2V0Tm9uTnVsbEFubm90YXRpb25OYW1lKCk7CisJCQkJCQl9IGVsc2UgeworCQkJCQkJCWFubm90
YXRpb25OYW1lID0gdGhpcy5lbnZpcm9ubWVudC5nZXROdWxsYWJsZUFubm90YXRpb25OYW1lKCk7
CisJCQkJCQl9CisJCQkJCQlpZiAoY3VycmVudEFyZ3VtZW50ICE9IG51bGwpIHsKKwkJCQkJCQl0
aGlzLnR5cGUuc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkucGFyYW1ldGVyTGFja2luZ051bGxBbm5v
dGF0aW9uKAorCQkJCQkJCQkJY3VycmVudEFyZ3VtZW50LAorCQkJCQkJCQkJaW5oZXJpdGVkTWV0
aG9kLmRlY2xhcmluZ0NsYXNzLAorCQkJCQkJCQkJbmVlZE5vbk51bGwsCisJCQkJCQkJCQlhbm5v
dGF0aW9uTmFtZSk7CisJCQkJCQkJY29udGludWU7CisJCQkJCQl9IGVsc2UgeworCQkJCQkJCXRo
aXMudHlwZS5zY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5jYW5ub3RJbXBsZW1lbnRJbmNvbXBhdGli
bGVOdWxsbmVzcyhjdXJyZW50TWV0aG9kLCBpbmhlcml0ZWRNZXRob2QpOworCQkJCQkJCWJyZWFr
OworCQkJCQkJfQogCQkJCQl9CiAJCQkJfQotCQkJfQotCQkJaWYgKGluaGVyaXRlZE5vbk51bGxO
ZXNzICE9IEJvb2xlYW4uVFJVRSkgewkJLy8gc3VwZXIgcGFyYW1ldGVyIGlzIG5vdCByZXN0cmlj
dGVkIHRvIEBOb25OdWxsCi0JCQkJaWYgKGN1cnJlbnROb25OdWxsTmVzcyA9PSBCb29sZWFuLlRS
VUUpIHsgCS8vIGN1cnJlbnQgcGFyYW1ldGVyIGlzIHJlc3RyaWN0ZWQgdG8gQE5vbk51bGwKLQkJ
CQkJaWYgKGN1cnJlbnRBcmd1bWVudCAhPSBudWxsKQotCQkJCQkJdGhpcy50eXBlLnNjb3BlLnBy
b2JsZW1SZXBvcnRlcigpLmlsbGVnYWxSZWRlZmluaXRpb25Ub05vbk51bGxQYXJhbWV0ZXIoCi0J
CQkJCQkJCQkJCQkJCWN1cnJlbnRBcmd1bWVudCwKLQkJCQkJCQkJCQkJCQkJaW5oZXJpdGVkTWV0
aG9kLmRlY2xhcmluZ0NsYXNzLAotCQkJCQkJCQkJCQkJCQlpbmhlcml0ZWROb25OdWxsTmVzcyA9
PSBudWxsCi0JCQkJCQkJCQkJCQkJCT8gbnVsbAotCQkJCQkJCQkJCQkJCQk6IHRoaXMuZW52aXJv
bm1lbnQuZ2V0TnVsbGFibGVBbm5vdGF0aW9uTmFtZSgpKTsKLQkJCQkJZWxzZQotCQkJCQkJdGhp
cy50eXBlLnNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmNhbm5vdEltcGxlbWVudEluY29tcGF0aWJs
ZU51bGxuZXNzKGN1cnJlbnRNZXRob2QsIGluaGVyaXRlZE1ldGhvZCk7CisJCQkJaWYgKGluaGVy
aXRlZE5vbk51bGxOZXNzICE9IEJvb2xlYW4uVFJVRSkgewkJLy8gc3VwZXIgcGFyYW1ldGVyIGlz
IG5vdCByZXN0cmljdGVkIHRvIEBOb25OdWxsCisJCQkJCWlmIChjdXJyZW50Tm9uTnVsbE5lc3Mg
PT0gQm9vbGVhbi5UUlVFKSB7IAkvLyBjdXJyZW50IHBhcmFtZXRlciBpcyByZXN0cmljdGVkIHRv
IEBOb25OdWxsCisJCQkJCQlpZiAoIWlzQmFzZVR5cGUgJiYgY3VycmVudEFyZ3VtZW50ICE9IG51
bGwpCisJCQkJCQkJdGhpcy50eXBlLnNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmlsbGVnYWxSZWRl
ZmluaXRpb25Ub05vbk51bGxQYXJhbWV0ZXIoCisJCQkJCQkJCQkJCQkJCQljdXJyZW50QXJndW1l
bnQsCisJCQkJCQkJCQkJCQkJCQlpbmhlcml0ZWRNZXRob2QuZGVjbGFyaW5nQ2xhc3MsCisJCQkJ
CQkJCQkJCQkJCQlpbmhlcml0ZWROb25OdWxsTmVzcyA9PSBudWxsCisJCQkJCQkJCQkJCQkJCQk/
IG51bGwKKwkJCQkJCQkJCQkJCQkJCTogdGhpcy5lbnZpcm9ubWVudC5nZXROdWxsYWJsZUFubm90
YXRpb25OYW1lKCkpOworCQkJCQkJZWxzZQorCQkJCQkJCXRoaXMudHlwZS5zY29wZS5wcm9ibGVt
UmVwb3J0ZXIoKS5jYW5ub3RJbXBsZW1lbnRJbmNvbXBhdGlibGVOdWxsbmVzcyhjdXJyZW50TWV0
aG9kLCBpbmhlcml0ZWRNZXRob2QpOworCQkJCQl9CiAJCQkJfQogCQkJfQogCQl9CkBAIC00NTEs
MTQgKzQ1MywxOCBAQAogCQkvLyBzdXBlciBtZXRob2QgaGFzIG5vIGFubm90YXRpb25zIGJ1dCBj
dXJyZW50IGhhcwogCQlmb3IgKGludCBpID0gMDsgaSA8IGN1cnJlbnRNZXRob2QucGFyYW1ldGVy
Tm9uTnVsbG5lc3MubGVuZ3RoOyBpKyspIHsKIAkJCWlmIChjdXJyZW50TWV0aG9kLnBhcmFtZXRl
ck5vbk51bGxuZXNzW2ldID09IEJvb2xlYW4uVFJVRSkgeyAvLyB0aWdodGVuaW5nIGZyb20gdW5j
b25zdHJhaW5lZCB0byBATm9uTnVsbAotCQkJCWlmIChjdXJyZW50QXJndW1lbnRzICE9IG51bGwp
IHsKLQkJCQkJdGhpcy50eXBlLnNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmlsbGVnYWxSZWRlZmlu
aXRpb25Ub05vbk51bGxQYXJhbWV0ZXIoCi0JCQkJCQkJCQkJCQkJCQkJCWN1cnJlbnRBcmd1bWVu
dHNbaV0sCi0JCQkJCQkJCQkJCQkJCQkJCWluaGVyaXRlZE1ldGhvZC5kZWNsYXJpbmdDbGFzcywK
LQkJCQkJCQkJCQkJCQkJCQkJbnVsbCk7Ci0JCQkJfSBlbHNlIHsKLQkJCQkJdGhpcy50eXBlLnNj
b3BlLnByb2JsZW1SZXBvcnRlcigpLmNhbm5vdEltcGxlbWVudEluY29tcGF0aWJsZU51bGxuZXNz
KGN1cnJlbnRNZXRob2QsIGluaGVyaXRlZE1ldGhvZCk7Ci0JCQkJCWJyZWFrOworCQkJCUFyZ3Vt
ZW50IGN1cnJlbnRBcmd1bWVudCA9IGN1cnJlbnRBcmd1bWVudHMgPT0gbnVsbCA/IG51bGwgOiBj
dXJyZW50QXJndW1lbnRzW2ldOworCQkJCWJvb2xlYW4gaXNCYXNlVHlwZSA9IGN1cnJlbnRBcmd1
bWVudCAhPSBudWxsICYmIGN1cnJlbnRBcmd1bWVudC5iaW5kaW5nICE9IG51bGwgJiYgY3VycmVu
dEFyZ3VtZW50LmJpbmRpbmcudHlwZS5pc0Jhc2VUeXBlKCk7CisJCQkJaWYgKCFpc0Jhc2VUeXBl
KSB7CisJCQkJCWlmIChjdXJyZW50QXJndW1lbnRzICE9IG51bGwpIHsKKwkJCQkJCXRoaXMudHlw
ZS5zY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5pbGxlZ2FsUmVkZWZpbml0aW9uVG9Ob25OdWxsUGFy
YW1ldGVyKAorCQkJCQkJCQkJCQkJCQkJCQkJY3VycmVudEFyZ3VtZW50LAorCQkJCQkJCQkJCQkJ
CQkJCQkJaW5oZXJpdGVkTWV0aG9kLmRlY2xhcmluZ0NsYXNzLAorCQkJCQkJCQkJCQkJCQkJCQkJ
bnVsbCk7CisJCQkJCX0gZWxzZSB7CisJCQkJCQl0aGlzLnR5cGUuc2NvcGUucHJvYmxlbVJlcG9y
dGVyKCkuY2Fubm90SW1wbGVtZW50SW5jb21wYXRpYmxlTnVsbG5lc3MoY3VycmVudE1ldGhvZCwg
aW5oZXJpdGVkTWV0aG9kKTsKKwkJCQkJCWJyZWFrOworCQkJCQl9CiAJCQkJfQogCQkJfQogCQl9
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>212287</attachid>
            <date>2012-03-08 05:56:00 -0500</date>
            <delta_ts>2012-03-08 05:56:54 -0500</delta_ts>
            <desc>proposed fix v1.0 + regression tests</desc>
            <filename>test.patch</filename>
            <type>text/plain</type>
            <size>3591</size>
            <attacher name="Ayushman Jain">amj87.iitr</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmJ1aWxkZXIvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2J1aWxkZXIvQW5ub3RhdGlvbkRlcGVuZGVuY3lUZXN0cy5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuYnVpbGRlci9zcmMvb3JnL2VjbGlwc2Uv
amR0L2NvcmUvdGVzdHMvYnVpbGRlci9Bbm5vdGF0aW9uRGVwZW5kZW5jeVRlc3RzLmphdmEKaW5k
ZXggOTQ5MDM4ZC4uZWViMGM3OCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVz
dHMuYnVpbGRlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvYnVpbGRlci9Bbm5vdGF0
aW9uRGVwZW5kZW5jeVRlc3RzLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMu
YnVpbGRlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvYnVpbGRlci9Bbm5vdGF0aW9u
RGVwZW5kZW5jeVRlc3RzLmphdmEKQEAgLTE1MDcsNCArMTUwNyw1NCBAQAogCQkvLyB2ZXJpZnkg
dGhhdCBUZXN0MSB3YXMgcmVjb21waWxlZAogCQlleHBlY3RpbmdVbmlxdWVDb21waWxlZENsYXNz
ZXMobmV3IFN0cmluZ1tdIHsgInAxLlRlc3QxIiwgInAxLlRlc3QyIiB9KTsKIAl9CisJCisJLy8g
QnVnIDM2NTk5MiAtIFtidWlsZGVyXSBbbnVsbF0gQ2hhbmdlIG9mIG51bGxuZXNzIGZvciBhIHBh
cmFtZXRlciBkb2Vzbid0IHRyaWdnZXIgYSBidWlsZCBmb3IgdGhlIGZpbGVzIHRoYXQgY2FsbCB0
aGUgbWV0aG9kCisJLy8gQnVnIDM2NjM0MSAtIEluY3JlbWVudGFsIGNvbXBpbGVyIGZhaWxzIHRv
IGRldGVjdCByaWdodCBzY29wZSBmb3IgYW5ub3RhdGlvbiByZWxhdGVkIGNvZGUgY2hhbmdlcwor
CXB1YmxpYyB2b2lkIHRlc3RSZXR1cm5Bbm5vdGF0aW9uRGVwZW5kZW5jeTAyKCkgdGhyb3dzIEph
dmFNb2RlbEV4Y2VwdGlvbiwgSU9FeGNlcHRpb24geworCQkvLyBwcmVwYXJlIHRoZSBwcm9qZWN0
OgorCQlzZXR1cFByb2plY3RGb3JOdWxsQW5ub3RhdGlvbnMoKTsKKworCQlTdHJpbmcgdGVzdDFD
b2RlID0gInBhY2thZ2UgcDE7XG4iICsKKwkJCSJpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmFubm90
YXRpb24uTm9uTnVsbEJ5RGVmYXVsdDtcbiIgKworCQkJIkBOb25OdWxsQnlEZWZhdWx0XG4iICsK
KwkJCSJwdWJsaWMgY2xhc3MgVGVzdDEge1xuIiArCisJCQkiICAgIHB1YmxpYyB2b2lkIGRvU3R1
ZmYoaW50IGkpIHtcbiIgKworCQkJIiAgICB9XG4iICsKKwkJCSJ9IjsKKwkJZW52LmFkZENsYXNz
KCB0aGlzLnNyY1Jvb3QsICJwMSIsICJUZXN0MSIsIHRlc3QxQ29kZSApOworCQlmdWxsQnVpbGQo
IHRoaXMucHJvamVjdFBhdGggKTsKKwkJZXhwZWN0aW5nTm9Qcm9ibGVtcygpOworCisJCS8vIGFk
ZCBUZXN0MgorCQlTdHJpbmcgdGVzdDJDb2RlID0gInBhY2thZ2UgcDE7XG4iICsKKwkJCSJpbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTm9uTnVsbEJ5RGVmYXVsdDtcbiIgKworCQkJ
IkBOb25OdWxsQnlEZWZhdWx0XG4iICsKKwkJCSJwdWJsaWMgY2xhc3MgVGVzdDIgZXh0ZW5kcyBU
ZXN0MXtcbiIgKworCQkJIglAT3ZlcnJpZGVcbiIgKworCQkJIiAgICBwdWJsaWMgdm9pZCBkb1N0
dWZmKGludCBpKSB7XG4iICsKKwkJCSIJCSBzdXBlci5kb1N0dWZmKGkpO1xuIiArCisJCQkiICAg
IH1cbiIgKworCQkJIn0iOworCQllbnYuYWRkQ2xhc3MoIHRoaXMuc3JjUm9vdCwgInAxIiwgIlRl
c3QyIiwgdGVzdDJDb2RlICk7CisJCWluY3JlbWVudGFsQnVpbGQoIHRoaXMucHJvamVjdFBhdGgg
KTsKKwkJZXhwZWN0aW5nTm9Qcm9ibGVtcygpOworCisJCS8vIHZlcmlmeSB0aGF0IFRlc3QyIG9u
bHkgd2FzIHJlY29tcGlsZWQKKwkJZXhwZWN0aW5nVW5pcXVlQ29tcGlsZWRDbGFzc2VzKG5ldyBT
dHJpbmdbXSB7ICJwMS5UZXN0MiIgfSk7CisKKwkJLy8gZWRpdCBUZXN0MiB0byBkZWxldGUgYW5u
b3RhdGlvbgorCQl0ZXN0MkNvZGUgPSAicGFja2FnZSBwMTtcbiIgKworCQkJInB1YmxpYyBjbGFz
cyBUZXN0MiBleHRlbmRzIFRlc3Qxe1xuIiArCisJCQkiCUBPdmVycmlkZVxuIiArCisJCQkiICAg
IHB1YmxpYyB2b2lkIGRvU3R1ZmYoaW50IGkpIHtcbiIgKworCQkJIgkJIHN1cGVyLmRvU3R1ZmYo
aSk7XG4iICsKKwkJCSIgICAgfVxuIiArCisJCQkifSI7CisJCWVudi5hZGRDbGFzcyggdGhpcy5z
cmNSb290LCAicDEiLCAiVGVzdDIiLCB0ZXN0MkNvZGUgKTsKKwkJaW5jcmVtZW50YWxCdWlsZCgg
dGhpcy5wcm9qZWN0UGF0aCApOworCQlleHBlY3RpbmdOb1Byb2JsZW1zKCk7CisKKwkJLy8gdmVy
aWZ5IHRoYXQgVGVzdDIgb25seSB3YXMgcmVjb21waWxlZAorCQlleHBlY3RpbmdVbmlxdWVDb21w
aWxlZENsYXNzZXMobmV3IFN0cmluZ1tdIHsgInAxLlRlc3QyIiB9KTsKKwl9CiB9CmRpZmYgLS1n
aXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvbG9va3VwL0JpbmFyeVR5cGVCaW5kaW5nLmphdmEgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3Vw
L0JpbmFyeVR5cGVCaW5kaW5nLmphdmEKaW5kZXggNzg3MjUwYi4uNGQ2ZjAxYyAxMDA2NDQKLS0t
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2xvb2t1cC9CaW5hcnlUeXBlQmluZGluZy5qYXZhCisrKyBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29r
dXAvQmluYXJ5VHlwZUJpbmRpbmcuamF2YQpAQCAtMTE5Miw3ICsxMTkyLDkgQEAKIAkJCX0KIAkJ
fQogCX0KLQlpZiAoIWV4cGxpY2l0TnVsbG5lc3MgJiYgY3VycmVudERlZmF1bHQgPT0gTk9OTlVM
TF9CWV9ERUZBVUxUKSB7CisJaWYgKCFleHBsaWNpdE51bGxuZXNzIAorCQkJJiYgKG1ldGhvZEJp
bmRpbmcucmV0dXJuVHlwZSAhPSBudWxsICYmICFtZXRob2RCaW5kaW5nLnJldHVyblR5cGUuaXNC
YXNlVHlwZSgpKSAKKwkJCSYmIGN1cnJlbnREZWZhdWx0ID09IE5PTk5VTExfQllfREVGQVVMVCkg
ewogCQltZXRob2RCaW5kaW5nLnRhZ0JpdHMgfD0gVGFnQml0cy5Bbm5vdGF0aW9uTm9uTnVsbDsK
IAl9CiAKQEAgLTEyMzEsNyArMTIzMyw5IEBACiAJCQlpZiAoIWV4cGxpY2l0TnVsbG5lc3MgJiYg
Y3VycmVudERlZmF1bHQgPT0gTk9OTlVMTF9CWV9ERUZBVUxUKSB7CiAJCQkJaWYgKG1ldGhvZEJp
bmRpbmcucGFyYW1ldGVyTm9uTnVsbG5lc3MgPT0gbnVsbCkKIAkJCQkJbWV0aG9kQmluZGluZy5w
YXJhbWV0ZXJOb25OdWxsbmVzcyA9IG5ldyBCb29sZWFuW251bVZpc2libGVQYXJhbXNdOwotCQkJ
CW1ldGhvZEJpbmRpbmcucGFyYW1ldGVyTm9uTnVsbG5lc3Nbal0gPSBCb29sZWFuLlRSVUU7CisJ
CQkJaWYgKG1ldGhvZEJpbmRpbmcucGFyYW1ldGVyc1tqXSE9IG51bGwgJiYgIW1ldGhvZEJpbmRp
bmcucGFyYW1ldGVyc1tqXS5pc0Jhc2VUeXBlKCkpIHsKKwkJCQkJbWV0aG9kQmluZGluZy5wYXJh
bWV0ZXJOb25OdWxsbmVzc1tqXSA9IEJvb2xlYW4uVFJVRTsKKwkJCQl9CiAJCQl9CiAJCX0KIAl9
</data>

          </attachment>
      

    </bug>

</bugzilla>