<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>425493</bug_id>
          
          <creation_ts>2014-01-11 18:10:00 -0500</creation_ts>
          <short_desc>[1.8] Compiler regression</short_desc>
          <delta_ts>2014-01-21 17:04:48 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Mac OS X</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>INVALID</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>424053</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="kasper nielsen">kasperni</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2348568</commentid>
    <comment_count>0</comment_count>
    <who name="kasper nielsen">kasperni</who>
    <bug_when>2014-01-11 18:10:35 -0500</bug_when>
    <thetext>The following piece of code no longer compiles with latest snapshots (11-jan)

public class Test {
    public void addAttribute(Attribute&lt;?&gt; attribute) {
        addAttribute(java.util.Objects.requireNonNull((Attribute) attribute, &quot;&quot;),
                attribute.getDefault());
    }

    private &lt;T&gt; void addAttribute(Attribute&lt;T&gt; attribute, T defaultValue) {}

    static class Attribute&lt;T&gt; {

        T getDefault() {
            return null;
        }
    }
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2348570</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-11 18:27:48 -0500</bug_when>
    <thetext>Thanks for the test.

First, note that even this simplified statement raises the same error:

        addAttribute(attribute, attribute.getDefault());
        ^^^^^^^^^^^^
The method addAttribute(Test.Attribute&lt;T&gt;, T) in the type Test is not applicable for the arguments (Test.Attribute&lt;capture#3-of ?&gt;, capture#4-of ?)

Next, see that javac 8 also reports errors (using the simpler variant):

        addAttribute(attribute, attribute.getDefault());
        ^
  required: Attribute&lt;T&gt;,T
  found: Attribute&lt;CAP#1&gt;,CAP#2
  reason: inference variable T has incompatible bounds
    equality constraints: CAP#1
    lower bounds: Object
  where T is a type-variable:
    T extends Object declared in method &lt;T&gt;addAttribute(Attribute&lt;T&gt;,T)
  where CAP#1,CAP#2 are fresh type-variables:
    CAP#1 extends Object from capture of ?
    CAP#2 extends Object from capture of ?

The point is that wildcards are captured before inference starts. Now the different captures will never be regarded as compatible.
(For demonstrating compatibility, we&apos;d first need to demonstrate that both references &quot;attribute&quot; actually point to the same runtime instance. Such pointer analysis is not available in the compiler).

I think we&apos;ll be seeing more cases where type inference has become more precise (and thus rejects more bogus programs). As long as both compilers agree this is a good thing, actually.

PS: can&apos;t you make the public method generic just like the private one? This would also avoid the dangerous cast to raw Attribute. Both compilers happily accept that.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2348575</commentid>
    <comment_count>2</comment_count>
    <who name="kasper nielsen">kasperni</who>
    <bug_when>2014-01-11 19:05:02 -0500</bug_when>
    <thetext>Actually I&apos;m stuck with an old build where this works.

I&apos;m getting a lot NPE and ArrayIndexOutOfBoundsException in the compiler with the latest build. But I have been unable to create a simple test case.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2348577</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-11 19:16:22 -0500</bug_when>
    <thetext>(In reply to kasper nielsen from comment #2)
&gt; I&apos;m getting a lot NPE and ArrayIndexOutOfBoundsException in the compiler
&gt; with the latest build. But I have been unable to create a simple test case.

If you&apos;re saying the situation got worse from one BETA_JAVA8 build to another, could you please give the build dates of both versions?

Of course a small test would be optimal :)
(to be filed into a new bug then)

Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2348578</commentid>
    <comment_count>4</comment_count>
    <who name="kasper nielsen">kasperni</who>
    <bug_when>2014-01-11 19:22:32 -0500</bug_when>
    <thetext>I&apos;m on 1.0.0.v20131211-0103_BETA_JAVA8
Have had troubles with various internal errors ever since (on a 100k project).

I will give it a try again tomorrow and see if I can make a valid testcase. Otherwise I will zip-up the project with dependencies and make it available somewhere.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2352751</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-21 17:04:48 -0500</bug_when>
    <thetext>I still added a (negative) regression test from this report via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=a0fd6dae6dbb696f05ef352cad9852f287a5aeec</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>