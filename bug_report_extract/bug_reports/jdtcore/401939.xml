<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>401939</bug_id>
          
          <creation_ts>2013-02-27 13:11:00 -0500</creation_ts>
          <short_desc>[1.8][compiler] Incorrect shape analysis leads to method resolution failure</short_desc>
          <delta_ts>2013-03-02 08:01:19 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>400871</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>jarthana</cc>
    
    <cc>jesper</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2223388</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-27 13:11:00 -0500</bug_when>
    <thetext>BETA_JAVA8:

The following program should compile, but doesn&apos;t:

// ---
interface I {
	int foo();
}

class X {
	void foo(I i) {}
	I i = ()-&gt;{ throw new RuntimeException(); }; // OK
	{
		foo(()-&gt;{ throw new RuntimeException(); }); // Error: Bad
	}
}

The lambda is value compatible, we conclude otherwise.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2223584</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-28 00:00:04 -0500</bug_when>
    <thetext>I released a point fix via: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=a34418d91ee2e59f0538793b35de996642c16051

The general problem is solvable readily now that we have the cloning
capability, but it calls for full control &amp; data flow analysis to be
done - I chose to not bother with it right now, since I don&apos;t think 
we will hit it in real situations and I am loathe to cluttering the 
code - The point fix is worth it since it is called out directly in
the spec and someone may be interested in trying it out ;-)

From the discussion box in Part - B:

&quot;It&apos;s worth noting that the void/value compatible definition is not a 
strictly structural property: &quot;can complete normally&quot; depends on the values 
of constant expressions, and these may include names that reference constant
variables.&quot;

The phrase made up by the last two words is interesting.

I&apos;ll leave this bug open though.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2224947</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-02 08:01:19 -0500</bug_when>
    <thetext>I went ahead and implemented the full analysis anyways. However, we do the
control flow and data flow analysis only when really necessary - otherwise
we use a heuristics based solution which should work for the most part and
fail over to full analysis when it cannot.

Flow analysis is needed to determine the shape only when:

    - A lambda features in a method invocation context.
    - Has no returns at all in its body.
    - Has one or more throws in its body.
    - Does not end with an unconditional throw.

We could further implement an improvement at a later time if required that
flow analysis or even ahead of time resolution is required only when there
are more than one candidates for potentially applicable methods analysis.

The heuristics based analysis would some times claim that a block is value
compatible when it is actually not. For example:

    (x) -&gt; { if (x) return null; } would be declared value compatible by
the heuristics (and naturally not by the full control flow analysis). This
is good enough: This is just a choice between whether we want overload
resolution to fail or the subsequent resolution of the lambda body to fail.
No invalid program would be accepted and vice versa.

Fix and tests released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=3c7abdea60e3dea7a9b2b822e92d260aea9179a7</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>