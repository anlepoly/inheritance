<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>427433</bug_id>
          
          <creation_ts>2014-02-05 02:31:00 -0500</creation_ts>
          <short_desc>[1.8][compiler] NPE at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4755)</short_desc>
          <delta_ts>2014-02-21 05:00:47 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Mathieu Croizard">mcr</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2358899</commentid>
    <comment_count>0</comment_count>
    <who name="Mathieu Croizard">mcr</who>
    <bug_when>2014-02-05 02:31:38 -0500</bug_when>
    <thetext>Hello,
I have an NPE while compiling this piece of code:

public class B {
	
	public void testError()
	{
		assertEquals(A.e(null,null,null),null);
	}
	
	public static boolean assertEquals(String a, String b)
	{
		return false;
	}
	
	public static boolean assertEquals(Object a, Object b)
	{
		return false;
	}
}

public class A 
{
	public static &lt;T, V&gt; V e(T[] t, V[] v, T object)
	{
		return null;
	}
}


A and B are two classes within two different files.
Should it be considered as a bug ? I understand that the compiler is not able to choose between the two equals methods.

I am using :

  Eclipse Java Development Tools Patch for Java 8 Support (BETA)		1.0.0.v20140205-0104_BETA_JAVA8
  Eclipse Plugin-in Development Environment Patch for Java 8 Support (BETA)	1.0.0.v20140205-0104_BETA_JAVA8
  Eclipse RCP Patch for Java 8 Support (BETA)					1.0.0.v20140205-0104_BETA_JAVA8

This is the stack:

java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4755)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4724)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(Scope.java:4657)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.mostSpecificMethodBinding(Scope.java:4337)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1895)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1627)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2572)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.findMethodBinding(MessageSend.java:861)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:694)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1018)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:621)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:303)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:532)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1211)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1321)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:571)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:1208)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:693)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1187)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:813)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:548)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:541)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:484)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:132)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2358904</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-05 02:46:04 -0500</bug_when>
    <thetext>(In reply to Mathieu Croizard from comment #0)
&gt; Hello,
&gt; I have an NPE while compiling this piece of code:

Thanks for the report.

&gt; A and B are two classes within two different files.
&gt; Should it be considered as a bug ? I understand that the compiler is not
&gt; able to choose between the two equals methods.

Well, NPEs are always bugs, I&apos;ll first fix that and then determine if there
are further issues.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2358917</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-05 03:11:37 -0500</bug_when>
    <thetext>Stephan, getArgumentTypesForCandidate() returns null padded argument
array. This breaks the length comparison in 

if (isVarargs()) {
} else if (paramLength != argLength) {
	return NOT_COMPATIBLE;
 } 

so instead of early termination, we reach into the null padded argument
array resulting in NPE. Thanks for taking a look.

I released a unit test here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=3df53d270ad119d1b04ae0fa029692bed42277fb

(remove the compliance check at the top of the test)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2358954</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-05 04:28:58 -0500</bug_when>
    <thetext>Having seen the comment 

// binding parameters will be padded from InferenceContext18.getParameter()

in RE.resolveType,

I assume such padding is intentional and not being prepared to handle it
in some places is an oversight.

On that presumption, I fixed Scope.parameterCompatibilityLevel along
the lines of the preamble in the other overloaded version,

However, I can readily see other problem spots and this needs confirmation
whether this is per design.

I released the workaround (which is safe and correct in any event) here:
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=51c3a83b72566da0bc051063e5ffe993e7132633

to allow  Mathieu  to continue to test and report issues. Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2359418</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-05 21:14:25 -0500</bug_when>
    <thetext>A connection to varargs and specifically InferenceContext18.getParameter() was a hot candidate indeed. On closer look, however, it turned out the bug works for fixed-arity methods as well.

The solution for bug 426290 simply was incomplete: I&apos;m lazily filling an array of type bindings *if* any argument has improved type info due to nested inference. Now for those arguments that don&apos;t have inner inference I simply never assigned a slot in InnerInferenceHelper.argTypePerCandidate. =&gt; NPE

Fixed by filling in the blanks during getArgumentTypesForCandidate().

Fix release via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=5b571c10f6bc3362562e3394fe138c118abcca9f</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2366612</commentid>
    <comment_count>5</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-02-21 05:00:33 -0500</bug_when>
    <thetext>NPE observed in older builds.

Both the files compile successfully with Eclipse + Java 8 RC1 Eclipse Kepler 4.3.2(RC4) Build id: M20140212-0800 +  
Eclipse Java Development Tools Patch for Java 8 Support (BETA)	
1.0.0.v20140220-2054.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2366613</commentid>
    <comment_count>6</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-02-21 05:00:47 -0500</bug_when>
    <thetext>Verified as working for Eclipse + Java 8 RC1 Eclipse Kepler 4.3.2(RC4) Build id: M20140212-0800 +  
Eclipse Java Development Tools Patch for Java 8 Support (BETA)	
1.0.0.v20140220-2054.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>