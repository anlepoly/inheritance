<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>437072</bug_id>
          
          <creation_ts>2014-06-10 13:18:00 -0400</creation_ts>
          <short_desc>[compiler][null] Null analysis emits possibly incorrect warning for new int[][] despite @NonNullByDefault</short_desc>
          <delta_ts>2015-03-18 10:14:47 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Mac OS X</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          <see_also>https://git.eclipse.org/r/43372</see_also>
    
    <see_also>https://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=d40b3c41bcebac07f42f1f11c9b679087cfd1515</see_also>
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.5 M6</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Alex W">awang060843</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>jarthana</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2415287</commentid>
    <comment_count>0</comment_count>
    <who name="Alex W">awang060843</who>
    <bug_when>2014-06-10 13:18:13 -0400</bug_when>
    <thetext>I&apos;m not really sure if this is because I&apos;m not understanding how multidimensional arrays are implemented in Java, but this warning seems a bit off to me.

I have @NonNullByDefault on the package level, yet for some reason new int[][] causes a unchecked conversion warning:

Null type safety (type annotations): The expression of type &apos;int[][]&apos; needs unchecked conversion to conform to &apos;int @NonNull[] []&apos;

For the class

public class Puzzle {
	private final int n;
	private final int[][] grid;
	
	Puzzle(final int size) {
		n = size;
		@NonNull
		final int[][] temp = new int[n][n];
		grid = temp;
	}
}

Seems that @NonNull is only applied to one of the dimensions (the inner dimension?), so the outer is left as Nullable which raises the warning.

In other cases where I have encountered something like this (e.g. Java&apos;s built-in methods, such as Integer.valueOf()), it makes sense as those classes don&apos;t have null annotations, so the null analyzer can&apos;t make any assumptions for those. In those cases, I just assign the result to a temporary variable and suppress the warning there (which I find strange, as given the presence of the @NonNullByDefault annotation I shouldn&apos;t need to use @NonNull explicitly):

@SuppressWarnings(&quot;null&quot;)
@NonNull
Integer temp = Integer.valueOf(x);
target = temp

However, @NonNull has no effect on int[][] temp = new int[n][n];, as the warning persists unchanged.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2415295</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-06-10 13:35:54 -0400</bug_when>
    <thetext>First questions:
- Java 1.8? Or below?
- o.e.j.annotation 2.0.0? Or below?

For the effect of @NonNullByDefault you may want to consult its javadoc (which changed significantly between 1.1.0 and 2.0.0 of the annotation bundle).

Since RC4 the help also has a snippet explaining an incompatible change in how null annotations on arrays are interpreted. (search the help for &quot;null type annotations&quot;).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2415299</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-06-10 13:41:37 -0400</bug_when>
    <thetext>Ah, seeing 
   &quot;Null type safety (type annotations): ...
I already have some of my answers :)


The main answer that you&apos;ll find in the help, in condensed form:

This:
   @NonNull int[][]
means a 2 dim array, whose leaf cells are guaranteed nonnull.
The array (at both dimensions) is unspecified.

This:
   new int[n][n];
creates an array, whose leaf cells are definitely null.


The error message seems to be off, though. I&apos;d expect:

Null type safety (type annotations): The expression of type &apos;int[][]&apos; needs unchecked conversion to conform to &apos;@NonNull int [] []&apos;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2415302</commentid>
    <comment_count>3</comment_count>
    <who name="Alex W">awang060843</who>
    <bug_when>2014-06-10 13:52:31 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #1)
&gt; First questions:
&gt; - Java 1.8? Or below?
&gt; - o.e.j.annotation 2.0.0? Or below?
&gt; 
&gt; For the effect of @NonNullByDefault you may want to consult its javadoc
&gt; (which changed significantly between 1.1.0 and 2.0.0 of the annotation
&gt; bundle).
&gt; 
&gt; Since RC4 the help also has a snippet explaining an incompatible change in
&gt; how null annotations on arrays are interpreted. (search the help for &quot;null
&gt; type annotations&quot;).

Java 1.8.0_05b13, annotation JAR is 2.0.0.v20140415-1436

Just read the help, and fixed the problem. I had no idea I had to annotate each of the brackets; thought that the entire expression would be annotated at once. Apparently I have some reading to do.

My apologies for wasting your time; should have been a bit more thorough before filing a report.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2415307</commentid>
    <comment_count>4</comment_count>
    <who name="Alex W">awang060843</who>
    <bug_when>2014-06-10 13:58:39 -0400</bug_when>
    <thetext>Hmmm... Just read the javadoc for @NonNullByDefault, and want to confirm I&apos;m reading this right. Javadoc says that @NonNullByDefault only applies to the static types of variables/fields, and not to method invocations/constructors/etc. (for classes in unannotated packages or unannotated packages)?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2415315</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-06-10 14:24:00 -0400</bug_when>
    <thetext>(In reply to Alex W from comment #3)
&gt; My apologies for wasting your time; should have been a bit more thorough
&gt; before filing a report.

No problem, the error message looks wrong anyway, so I still have some cleanup to do.

(In reply to Alex W from comment #4)
&gt; Hmmm... Just read the javadoc for @NonNullByDefault, and want to confirm I&apos;m
&gt; reading this right. Javadoc says that @NonNullByDefault only applies to the
&gt; static types of variables/fields, and not to method
&gt; invocations/constructors/etc. (for classes in unannotated packages or
&gt; unannotated packages)?

Hm, I don&apos;t seem to understand your question, so I&apos;m inclined to answering &quot;No&quot; :)

Are you asking about
- where @NonNullByDefault can be written, or
- which locations it affects?

For the latter, the gory details are in the enum DefaultLocation...

But what should it mean for this annotation to apply &quot;to method invocations&quot;? There&apos;s no type to annotate in &quot;o.foo(13);&quot;, hm....</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2415349</commentid>
    <comment_count>6</comment_count>
    <who name="Alex W">awang060843</who>
    <bug_when>2014-06-10 15:08:06 -0400</bug_when>
    <thetext>&gt; (In reply to Alex W from comment #4)
&gt; &gt; Hmmm... Just read the javadoc for @NonNullByDefault, and want to confirm I&apos;m
&gt; &gt; reading this right. Javadoc says that @NonNullByDefault only applies to the
&gt; &gt; static types of variables/fields, and not to method
&gt; &gt; invocations/constructors/etc. (for classes in unannotated packages or
&gt; &gt; unannotated packages)?
&gt; 
&gt; Hm, I don&apos;t seem to understand your question, so I&apos;m inclined to answering
&gt; &quot;No&quot; :)
&gt; 
&gt; Are you asking about
&gt; - where @NonNullByDefault can be written, or
&gt; - which locations it affects?
 
Sorry, that was rather poorly worded. I was asking about the locations it affects when used in an assignment. Don&apos;t think I have a question any more, as I realized I was reading the Juno javadoc. The Kepler javadoc makes things much clearer. My understanding is now that the unannotated built-in methods (e.g. Integer.valueOf()  [is new int[][] considered a method call?]) are assumed to be nullable and 2. @NonNull was indeed required for the local temp variables I defined.

&gt; For the latter, the gory details are in the enum DefaultLocation...

Looks like yet another thing added to my growing reading list...

&gt; But what should it mean for this annotation to apply &quot;to method
&gt; invocations&quot;? There&apos;s no type to annotate in &quot;o.foo(13);&quot;, hm....

Yeah, that was just bad wording on my part. My apologies.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2505273</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-01-13 18:49:20 -0500</bug_when>
    <thetext>Re-testing in HEAD there&apos;s only one problem I see:

At 1.8, what exactly is this saying?
		@NonNull
		final int[][] temp = new int[n][n];
The annotation applies to the leaf element type, but &quot;@NonNull int&quot; should actually be rejected.
Or should we reject this because a type annotation is used in a declaration position (before the modifiers of the variable)?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2528084</commentid>
    <comment_count>8</comment_count>
    <who name="Eclipse Genie">genie</who>
    <bug_when>2015-03-08 14:05:47 -0400</bug_when>
    <thetext>New Gerrit change created: https://git.eclipse.org/r/43372</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2528123</commentid>
    <comment_count>9</comment_count>
    <who name="Eclipse Genie">genie</who>
    <bug_when>2015-03-08 19:28:53 -0400</bug_when>
    <thetext>Gerrit change https://git.eclipse.org/r/43372 was merged to [master].
Commit: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=d40b3c41bcebac07f42f1f11c9b679087cfd1515</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2528124</commentid>
    <comment_count>10</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-03-08 19:33:25 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #7)
&gt; Re-testing in HEAD there&apos;s only one problem I see:
&gt; 
&gt; At 1.8, what exactly is this saying?
&gt; 		@NonNull
&gt; 		final int[][] temp = new int[n][n];
&gt; The annotation applies to the leaf element type, but &quot;@NonNull int&quot; should
&gt; actually be rejected.

That&apos;s what I&apos;ve implemented.

&gt; Or should we reject this because a type annotation is used in a declaration
&gt; position (before the modifiers of the variable)?

No, JLS speaks of &quot;the type that is closest&quot; to the annotation. Interspersed modifiers are legal.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2533653</commentid>
    <comment_count>11</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-03-18 10:14:47 -0400</bug_when>
    <thetext>Verified for 4.5 M6 with build I20150317-2000</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>