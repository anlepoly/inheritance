<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>437973</bug_id>
          
          <creation_ts>2014-06-23 16:04:00 -0400</creation_ts>
          <short_desc>[1.8][compiler] Missing implementation of JLS 15.12.2.5 Third Bullet - Part 2 (Varargs &amp; Overload)</short_desc>
          <delta_ts>2015-01-19 00:19:15 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Mac OS X</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          <see_also>https://bugs.eclipse.org/bugs/show_bug.cgi?id=440548</see_also>
    
    <see_also>https://bugs.eclipse.org/bugs/show_bug.cgi?id=440752</see_also>
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.4.2</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Steve Northover">snorthov</reporter>
          <assigned_to name="shankha banerjee">shankhba</assigned_to>
          <cc>adomanski</cc>
    
    <cc>ignacio</cc>
    
    <cc>jarthana</cc>
    
    <cc>manpalat</cc>
    
    <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>1</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2419546</commentid>
    <comment_count>0</comment_count>
    <who name="Steve Northover">snorthov</who>
    <bug_when>2014-06-23 16:04:06 -0400</bug_when>
    <thetext>The following code compiles cleanly under JDK8 but has a compile error use the Eclipse compiler:

package junk;

public class Junk16 {

    public static String junk(String format, Object... args) {
        return null;
    }

    public static String junk(String... s) {
        return null;
    }
    
    public static void main(String[] args) {
        
        // COMPILE ERROR IN ECLIPSE (none in JDK)
        junk(&quot;fred&quot;);
        
        //NO COMPILE ERROR
        junk(&quot;fred&quot;, 12);
    }
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2419569</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-06-23 17:35:05 -0400</bug_when>
    <thetext>Guess what: not much arguing from me this time :)

Yep, our implementation seems to miss this sentence in JLS 15.12.2.5:
&quot; Additionally, if m2 has k+1 parameters, then the k+1&apos;th variable arity parameter type of m1 is a subtype of the k+1&apos;th variable arity parameter type of m2.&quot;

Upto that point we have established that
- both methods are applicable by variable arity invocation
- the first k parameter types of m1 are more specific than the first k parameter types of m2 - IN BOTH DIRECTIONS
=&gt; no decision yet.

Only the addition about different number of parameters makes junk(String...) more specific than junk(String,Object...) but not vice versa (for the given arguments (String)).

Plus: at -1.7 we *are* accepting this program - since this is a regression I marked it for 4.4.1.

Thanks for the report.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2421665</commentid>
    <comment_count>2</comment_count>
    <who name="Steve Northover">snorthov</who>
    <bug_when>2014-06-27 13:58:05 -0400</bug_when>
    <thetext>Cool.  The world has not ended due to this bug as it is pretty easy to work around and code your application differently.  

It seems bogus to me that you could delete the single argument method and all of you code would suddenly compile and run the multi-argument method but I won&apos;t argue with the spec or you, especially as you are planning on fixing this!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2427328</commentid>
    <comment_count>3</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-07-14 03:57:33 -0400</bug_when>
    <thetext>Stephan, if you haven&apos;t spent time on this already, I would like Shankha to investigate. Feel free to assign to yourself otherwise :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2427366</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-07-14 05:17:22 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #3)
&gt; Stephan, if you haven&apos;t spent time on this already, I would like Shankha to
&gt; investigate. Feel free to assign to yourself otherwise :)

I haven&apos;t yet started to work on this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2427367</commentid>
    <comment_count>5</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-07-14 05:19:18 -0400</bug_when>
    <thetext>Shankha, please take this forward. Thanks!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2432231</commentid>
    <comment_count>6</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-07-26 07:05:50 -0400</bug_when>
    <thetext>Test Case:

class W {}
class A{}
public class X {
    void foo(W ... w) {}
    void foo(W w, A ... a) {}
    void bar() {
        foo(new W()); // [1] : Ambiguous method error
    }
    public static void main(String[] args) {}
}

1) javac 1.7.0_65: Error[1] is reported
2) javac 1.8.0_20-ea: Error[1] is reported
3) ecj 1.8 : Error[1] is reported


4)ecj 1.7 : No error is reported.

Looks like bug for 1.7

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2432276</commentid>
    <comment_count>7</comment_count>
      <attachid>245414</attachid>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-07-26 22:47:05 -0400</bug_when>
    <thetext>Created attachment 245414
WIP: Patch

WIP: Patch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2432561</commentid>
    <comment_count>8</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-07-28 09:10:56 -0400</bug_when>
    <thetext>Please consider two more test case:

a) 

class Y {}
class Z extends Y {}
class A{}
public class X {

    &lt;T&gt; void foo(T t, Z ... z) {}
    &lt;T&gt; void foo(T t, Z z, Y ... y) {}
    void bar() {
        foo(new A(), new Z()); // [1] error with ecj 1.8       
    }
    public static void main(String[] args) {}
} 

[1] Ambiguous method error.

1) javac 1.7 , 1.8 No errors. The program compiles fine.
2) ecj 1.7 No error. Error with ecj 1.8.

---------------------------------------------

b)

class Y {}
class Z extends Y {}
class A {}
public class X {
	@SafeVarargs
    final &lt;T&gt; void foo(T ... t) {}
    &lt;T&gt; void foo(T t, Y ... y) {}

    void bar() {
        foo(new Z()); // [1] Error with ecj 1.7
        foo(new A()); // [2] Error with ecj 1.8
    }
    public static void main(String[] args) {}
} 


[1] &amp; [2] Ambiguous method error.

1) javac 1.7 , 1.8 No errors.
2) ecj 1.8 No errors. ecj 1.7</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2432569</commentid>
    <comment_count>9</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-07-28 09:21:38 -0400</bug_when>
    <thetext>(In reply to shankha banerjee from comment #8)
&gt; 
&gt; b)
&gt; 
&gt; class Y {}
&gt; class Z extends Y {}
&gt; class A {}
&gt; public class X {
&gt; 	@SafeVarargs
&gt;     final &lt;T&gt; void foo(T ... t) {}
&gt;     &lt;T&gt; void foo(T t, Y ... y) {}
&gt; 
&gt;     void bar() {
&gt;         foo(new Z()); // [1] Error with ecj 1.7
&gt;         foo(new A()); // [2] Error with ecj 1.8

I meant : [2] Error with ecj 1.7 means</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2432576</commentid>
    <comment_count>10</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-07-28 09:26:19 -0400</bug_when>
    <thetext>Please See Bug 440548 for issues mentioned in Comment 6, Comment 8.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2433388</commentid>
    <comment_count>11</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-07-30 01:16:17 -0400</bug_when>
    <thetext>One more test case:

class W {}
class Y extends W {}
public class X {
	void foo(W w, Y ... y) {}
	void foo(W ... w) {}

	void bar() {
		foo(new W()); // Error with 1.8 and 1.7. Succeeds with javac
	}
	public static void main(String[] args) {
		X x = new X();
		x.bar();
	}
}

---  Error with 1.8 and 1.7. Succeeds with javac

So to summarize:

There as per this bug there are three defects.

I) Defect mentioned in Comment 0.
II) Defect mentioned in Comment 8 (Test case a)

class Y {}
class Z extends Y {}
class A{}
public class X {

    &lt;T&gt; void foo(T t, Z ... z) {}
    &lt;T&gt; void foo(T t, Z z, Y ... y) {}
    void bar() {
        foo(new A(), new Z()); // [1] error with ecj 1.8       
    }
    public static void main(String[] args) {}
} 

[1] Ambiguous method error.

1) javac 1.7 , 1.8 No errors. The program compiles fine.
2) ecj 1.7 No error. Error with ecj 1.8.


III) Defect mentioned in this comment (Comment 11).

Please see Bug 421922 (Specifically Bug 421922 Comment 7) for some related discussions.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2433531</commentid>
    <comment_count>12</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-07-30 06:45:37 -0400</bug_when>
    <thetext>Please See Bug 440752 for test case mentioned in Comment 11 (II).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2433784</commentid>
    <comment_count>13</comment_count>
      <attachid>245545</attachid>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-07-30 13:47:45 -0400</bug_when>
    <thetext>Created attachment 245545
Patch

Test results are good.
The patch handles test cases mentioned in Comment 0 and Comment 11.

All other test cases do not fall under the section of JLS (Comment 1) which this bug is related to.

Bugs have been filed for all other test scenarios.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2433945</commentid>
    <comment_count>14</comment_count>
      <attachid>245570</attachid>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-07-31 02:28:12 -0400</bug_when>
    <thetext>Created attachment 245570
Patch

As mentioned in Comment 13:
&gt; All other test cases do not fall under the section of JLS (Comment 1) which
&gt; this bug is related to.
&gt; 
&gt; Bugs have been filed for all other test scenarios.

Added a negative test case where parameter of one method is not the subtype of the other and thus leads to non resolution of the most specific method.

I am not quite sure if I should add a check for the following statement in JLS (15.12.2.5):

&quot; Additionally, if m2 has k+1 parameters,&quot;

Please see the test case:
test437973a in the patch.

It would fail if the check is incorporated.

The compilation of test437973a is successful with javac.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2433989</commentid>
    <comment_count>15</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-07-31 04:07:19 -0400</bug_when>
    <thetext>Cancelling the review. Will investigate and check if this scenario is valid for Lambda functions.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2434199</commentid>
    <comment_count>16</comment_count>
      <attachid>245595</attachid>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-07-31 09:38:48 -0400</bug_when>
    <thetext>Created attachment 245595
Patch

Test results are good.
1)The patch handles test cases mentioned in Comment 0 and Comment 11.

All other test cases do not fall under the section of JLS (Comment 1) which this bug is related to.

2) I am not sure if I should add a check for the following statement in JLS (15.12.2.5):

&quot; Additionally, if m2 has k+1 parameters,&quot;

Please see the test case:
test437973a in the patch.

It would fail if the check is incorporated.

The compilation of test437973a is successful with javac.

3) The patch handles lambda expressions.

---

Please review.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2449023</commentid>
    <comment_count>17</comment_count>
    <who name="Ignacio Baca Moreno-Torres">ignacio</who>
    <bug_when>2014-09-09 02:14:24 -0400</bug_when>
    <thetext>I think this code error is the same described here. The code is from Guava, and this bug is especially problematic because GWT uses eclipse JDT for compilation, and when GWT compiles a project, it compiles all used libraries too. So projects using guava (quite common) produces compilation errors in external libraries (difficult to solve).

public final class Collections2 {
    static interface Predicate&lt;T&gt; { boolean test(T object); }
    public static &lt;T&gt; Predicate&lt;T&gt; in(Predicate&lt;? extends T&gt; arg) { return null; }
    public static &lt;T&gt; Predicate&lt;T&gt; and(Predicate&lt;? super T&gt;... arg) { return null; }
    public static &lt;T&gt; Predicate&lt;T&gt; and(Predicate&lt;? super T&gt; arg0, Predicate&lt;? super T&gt; arg1) { return null; }
    static class FilteredCollection&lt;E&gt; {
        Predicate&lt;? super E&gt; predicate;
        public void error(Predicate&lt;?&gt; arg) { and(predicate, in(arg)); } // no compile
    }
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2449102</commentid>
    <comment_count>18</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-09 05:02:42 -0400</bug_when>
    <thetext>(In reply to Ignacio Baca Moreno-Torres from comment #17)
&gt; I think this code error is the same described here. 

Shankha, could you please check if Ignacio&apos;s problem is solved by your patch ? 
If yes, please update the patch with another junit, I&apos;ll review it for inclusion
in 4.5 M2. TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2449154</commentid>
    <comment_count>19</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-09-09 06:42:08 -0400</bug_when>
    <thetext>The patch does not solve the issue mentioned in Comment 17.
The code compiles fine with javac 1.7 , 1.8.
I will investigate further and if necessary file a new bug.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2449249</commentid>
    <comment_count>20</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-09-09 08:58:14 -0400</bug_when>
    <thetext>(In reply to Ignacio Baca Moreno-Torres from comment #17)
Filed Bug 443596

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2449253</commentid>
    <comment_count>21</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-09-09 09:01:54 -0400</bug_when>
    <thetext>Will update a new patch after syncing with the latest code and running all the tests.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2449298</commentid>
    <comment_count>22</comment_count>
      <attachid>246888</attachid>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-09-09 09:58:41 -0400</bug_when>
    <thetext>Created attachment 246888
Patch

Patch in sync with latest code. Test results are good.
---
Please see Comment 16 for details regarding the patch.
---
Request for review.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2451474</commentid>
    <comment_count>23</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-14 23:26:08 -0400</bug_when>
    <thetext>Sorry, ran out of time for M2. Will look at this right in early M3.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2464478</commentid>
    <comment_count>24</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-14 04:19:15 -0400</bug_when>
    <thetext>Stephan, on master Scope.mSMB reads:

// TODO: should the following line also find diamond-typeVariables?
					if (((invocationSite instanceof Invocation) || (invocationSite instanceof ReferenceExpression))
							&amp;&amp; mbk.typeVariables() != Binding.NO_TYPE_VARIABLES) {


}

(a) Is the TODO out of date ? 
(b) Are the instanceof checks redundant ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2464517</commentid>
    <comment_count>25</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-14 05:40:26 -0400</bug_when>
    <thetext>1. I think we can get rid of the check mbk.typeVariables() == Binding.NO_TYPE_VARIABLES.

2. Can we explicitly check for m2 has k+1 parameters. It will map better to
the relevant JLS passgage.

Otherwise it looks good. Let us wait to release this after https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2464532</commentid>
    <comment_count>26</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-14 06:09:03 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #24)
&gt; Stephan, on master Scope.mSMB reads:
&gt; 
&gt; // TODO: should the following line also find diamond-typeVariables?
&gt; 					if (((invocationSite instanceof Invocation) || (invocationSite
&gt; instanceof ReferenceExpression))
&gt; 							&amp;&amp; mbk.typeVariables() != Binding.NO_TYPE_VARIABLES) {
&gt; 
&gt; 
&gt; }
&gt; 
&gt; (a) Is the TODO out of date ? 

No, my understanding was: mbk.typeVariables() only answers type variables declared by the method, whereas the type variables for a diamond are declared by the class.

&gt; (b) Are the instanceof checks redundant ?

Not directly:
- then-branch handles Invocation &amp; ReferenceExpression (conditionally),
- else-branch handles all other kinds of InvocationSites.
Do you want to apply some reasoning like
  looking for a method implies invocationSite instanceof (Invocation|ReferenceExpression)
?

IMHO, that would require more efforts of hand-waving in code comments, than the actual instanceof checks cost. (see also the else-cast-to-ReferenceExpression snippet below).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2464552</commentid>
    <comment_count>27</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-14 06:17:01 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #26)

&gt; &gt; (a) Is the TODO out of date ? 
&gt; 
&gt; No, my understanding was: mbk.typeVariables() only answers type variables
&gt; declared by the method, whereas the type variables for a diamond are
&gt; declared by the class.

I think class type variables are not relevant there diamond or otherwise,
constructor or otherwise.

&gt; Not directly:

&gt; Do you want to apply some reasoning like
&gt;   looking for a method implies invocationSite instanceof
&gt; (Invocation|ReferenceExpression)
&gt; ?

Yes that is what I had in mind, but I buy the argument below. So this is fine.

&gt; IMHO, that would require more efforts of hand-waving in code comments, than
&gt; the actual instanceof checks cost. (see also the
&gt; else-cast-to-ReferenceExpression snippet below).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2464565</commentid>
    <comment_count>28</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-14 06:44:31 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #27)
&gt; (In reply to Stephan Herrmann from comment #26)
&gt; 
&gt; &gt; &gt; (a) Is the TODO out of date ? 
&gt; &gt; 
&gt; &gt; No, my understanding was: mbk.typeVariables() only answers type variables
&gt; &gt; declared by the method, whereas the type variables for a diamond are
&gt; &gt; declared by the class.
&gt; 
&gt; I think class type variables are not relevant there diamond or otherwise,
&gt; constructor or otherwise.

15.12.2.5 defines entry condition into mSMB inference as &quot;m2 is generic&quot;.

Throughout inference we normally apply &quot;(For a class instance creation expression, the corresponding &quot;method&quot; used for inference is defined in 15.9.3).&quot; (explicit in 18.2.1).

15.9.3 contains: 
- &quot;Let F1...Fp be the type parameters of C ...&quot;
- &quot;j is [F1:=X1, ..., Fp:=Xp, G1:=Y1, ..., Gq:=Yq]. &quot;
- &quot;The type parameters of mj are X1...Xp,Y1...Yq. &quot;

=&gt; hence for any constructor of a generic class I consider mj to be generic, and X1..Xp are substitutes for the type parameters of the declaring class C.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2465291</commentid>
    <comment_count>29</comment_count>
      <attachid>247887</attachid>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-10-15 05:25:05 -0400</bug_when>
    <thetext>Created attachment 247887
Patch

(In reply to Srikanth Sankaran from comment #25)
&gt; 1. I think we can get rid of the check mbk.typeVariables() ==
&gt; Binding.NO_TYPE_VARIABLES.

The check has been removed.
 
&gt; 2. Can we explicitly check for m2 has k+1 parameters. It will map better to
&gt; the relevant JLS passgage.
&gt; 

Please see Comment 16.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2466168</commentid>
    <comment_count>30</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-16 03:19:54 -0400</bug_when>
    <thetext>Patch looks good. I changed !TypeBinding.equalsEquals to TypeBinding.notEquals
and also enabled a test for all modes and released it here: 

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=b6ef8906908f58bf234a11b3c3bc9c9b1d585dcc.

Thanks Shankha.

(In reply to shankha banerjee from comment #29)
&gt; Created attachment 247887 [details]
&gt; Patch

&gt; &gt; 2. Can we explicitly check for m2 has k+1 parameters. It will map better to
&gt; &gt; the relevant JLS passgage.
&gt; &gt; 
&gt; 
&gt; Please see Comment 16.

Staring at a long time, I convinced myself that even without the explicit
check we are doing what is intended. So we are good.

Now on some of the tests we have disabled for Java 7-, the behavior is 
suspect. While addressing bug 440548, let us also look it into this ? 

In general, it is OK to relax behavior for older compatibility levels.
i.e where we reject the code, it is OK to start accepting them if that
is the right thing to do. The converse requires a bit more circumspection
even when correct.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2466170</commentid>
    <comment_count>31</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-16 03:24:24 -0400</bug_when>
    <thetext>Could you please modify and and release
org.eclipse.jdt.core.tests.compiler.regression.VarargsTest.test437973d()
so the identity of the resolved method gets printed and tested. 

I verified that we are doing the right thing, but the test just asserts
that we compile the program, not also that we resolve the overloaded calls
correctly. TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2466302</commentid>
    <comment_count>32</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-10-16 06:05:29 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #31)
&gt; Could you please modify and and release
&gt; org.eclipse.jdt.core.tests.compiler.regression.VarargsTest.test437973d()
&gt; so the identity of the resolved method gets printed and tested. 

Commit: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=1b83df7d45014e7f124fef507b7bdd60803d3e04</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2473178</commentid>
    <comment_count>33</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2014-10-29 00:32:39 -0400</bug_when>
    <thetext>Verified for Eclipse Mars 4.5M3 Build id: I20141027-2000</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2487853</commentid>
    <comment_count>34</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-11-24 03:26:20 -0500</bug_when>
    <thetext>I have reviewed and released this fix for 4.4.2:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=R4_4_maintenance&amp;id=5a506446ace745853a35927f8e6458402b811258

Moving back to RESOLVED to allow it to appear in verification queries.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2487855</commentid>
    <comment_count>35</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-11-24 03:27:07 -0500</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #34)
&gt; I have reviewed and released this fix for 4.4.2:
&gt; 
&gt; http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
&gt; ?h=R4_4_maintenance&amp;id=5a506446ace745853a35927f8e6458402b811258

And this (test):

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=R4_4_maintenance&amp;id=3323b9a8d3a2341c74f371679943f20fd013aff8</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2488851</commentid>
    <comment_count>36</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-11-25 10:54:10 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #30)
&gt; (In reply to shankha banerjee from comment #29)
&gt; &gt; Created attachment 247887 [details]
&gt; &gt; Patch
&gt; 
&gt; &gt; &gt; 2. Can we explicitly check for m2 has k+1 parameters. It will map better to
&gt; &gt; &gt; the relevant JLS passgage.
&gt; &gt; &gt; 
&gt; &gt; 
&gt; &gt; Please see Comment 16.
&gt; 
&gt; Staring at a long time, I convinced myself that even without the explicit
&gt; check we are doing what is intended. So we are good.

I just came across this patch and my first reaction was: stare at the missing k+1 check :)

@Srikanth: Can you share the reasoning why it is not needed?

@Shankha: you seemed to imply (comment 16) that the check would be wrong??</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2489078</commentid>
    <comment_count>37</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-11-26 01:41:20 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #36)
Hi Stephan,
&gt; @Srikanth: Can you share the reasoning why it is not needed?
Please consider [1]:
foo(new B())
foo2(new B())

I think Srikanth meant that jdt code is able to handle such cases without the additional check.

&gt; @Shankha: you seemed to imply (comment 16) that the check would be wrong??
I am sorry. I was not clear.
What I meant was how do I put in the explicit check? Will it have any meaning?
We should be able to identify the correct method for test case 2.

Thanks,
Shankha

// 1:
class Y {}
class Z extends Y {}
class A {}
class B {}

class X {
	void foo(B b, Y ... y) {
		System.out.println(&quot;foo Y&quot;);
	}
	void foo(B b, Z ... z) {
		System.out.println(&quot;foo Z&quot;);
	}
	void foo2(B b, Y ... y) {
		System.out.println(&quot;foo2 Y&quot;);
	}
	void foo2(B b, A ... a) {
		System.out.println(&quot;foo2 Y&quot;);
	}
	void bar() {
		foo(new B());  
		foo2(new B()); // Error
	}
}

// 2:
class Y {}
class Z extends Y {}

class X {
	void foo(Z ... z) {}
	void foo(Z z, Y ... y) {}
	
	void bar() {
		foo(new Z());
	}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2489493</commentid>
    <comment_count>38</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-11-26 16:02:46 -0500</bug_when>
    <thetext>In general you cannot know what program should be accepted or not before applying the rules of the spec. Implementing the spec *cannot* produce a wrong result, when done correctly :)

I&apos;ll take a closer look shortly.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2489562</commentid>
    <comment_count>39</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-27 01:01:00 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #38)
&gt; In general you cannot know what program should be accepted or not before
&gt; applying the rules of the spec. Implementing the spec *cannot* produce a
&gt; wrong result, when done correctly :)
&gt; 
&gt; I&apos;ll take a closer look shortly.

Thanks, Please also see https://bugs.eclipse.org/bugs/show_bug.cgi?id=440752.


I think it is worth rewriting this piece to align closely with the spec wording.
(including using variable names that align).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2507084</commentid>
    <comment_count>40</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2015-01-19 00:19:15 -0500</bug_when>
    <thetext>Verified for Eclipse Luna SR2 Build id: M20150114-1500</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>245414</attachid>
            <date>2014-07-26 22:47:00 -0400</date>
            <delta_ts>2014-07-30 13:47:45 -0400</delta_ts>
            <desc>WIP: Patch</desc>
            <filename>patch.patch</filename>
            <type>text/plain</type>
            <size>5075</size>
            <attacher name="shankha banerjee">shankhba</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1ZhcmFyZ3NUZXN0Lmph
dmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2Uv
amR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9WYXJhcmdzVGVzdC5qYXZhCmluZGV4
IDhiNTc5ZTAuLjU1NWJlZmUgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3Rz
LmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNz
aW9uL1ZhcmFyZ3NUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29t
cGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24v
VmFyYXJnc1Rlc3QuamF2YQpAQCAtMzQ2NSw0ICszNDY1LDEwOSBAQCBwdWJsaWMgY2xhc3MgVmFy
YXJnc1Rlc3QgZXh0ZW5kcyBBYnN0cmFjdENvbXBhcmFibGVUZXN0IHsKIAkJCSJUaGUgbWV0aG9k
IGZvbyhBLi4uKSBvZiB0eXBlIEIgaXMgbm90IGFwcGxpY2FibGUgYXMgdGhlIGZvcm1hbCB2YXJh
cmdzIGVsZW1lbnQgdHlwZSBBIGlzIG5vdCBhY2Nlc3NpYmxlIGhlcmVcbiIgKyAKIAkJCSItLS0t
LS0tLS0tXG4iKTsgLy8gY2hlY2sgYW5kIGFkanVzdCwKIAl9CisKKwkvLyBodHRwczovL2J1Z3Mu
ZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDM3OTczLCBbMS44XVtjb21waWxlcl0g
VGhlIG1ldGhvZCBqdW5rKFN0cmluZywgT2JqZWN0W10pIGlzIGFtYmlndW91cyBmb3IgdGhlIHR5
cGUgSnVuazE2CisJcHVibGljIHZvaWQgdGVzdDQzNzk3MygpIHsKKwkJaWYgKHRoaXMuY29tcGxp
YW5jZUxldmVsID49IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzgpIHsKKwkJCXJ1bk5lZ2F0aXZl
VGVzdCgKKwkJCQluZXcgU3RyaW5nW10geworCQkJCQkiWC5qYXZhIiwKKwkJCQkJImNsYXNzIFcg
e31cbiIgKworCQkJCQkiY2xhc3MgWSBleHRlbmRzIFcge31cbiIgKworCQkJCQkiY2xhc3MgWiBl
eHRlbmRzIFkge31cbiIgKworCQkJCQkiY2xhc3MgQXt9XG4iICsKKwkJCQkJInB1YmxpYyBjbGFz
cyBYIHtcbiIgKworCisJCQkJCSIgICAgdm9pZCBmb28oU3RyaW5nIGZvcm1hdCwgT2JqZWN0IC4u
LiBhcmdzKSB7fVxuIiArCisJCQkJCSIgICAgdm9pZCBmb28oU3RyaW5nIC4uLiBzKSB7fVxuIiAr
CisKKwkJCQkJIiAgICB2b2lkIGZvbzEoWiAuLi4geikge31cbiIgKworCQkJCQkiICAgIHZvaWQg
Zm9vMShaIHosIFkgLi4uIHkpIHt9XG4iICsKKworCQkJCQkiICAgIHZvaWQgZm9vMihXIC4uLiB3
KSB7fVxuIiArCisJCQkJCSIgICAgdm9pZCBmb28yKFcgdywgQSAuLi4gYSkge31cbiIgKworCisJ
CQkJCSIgICAgdm9pZCBmb28zKFogeiwgVyAuLi4gdykge31cbiIgKworCQkJCQkiICAgIHZvaWQg
Zm9vMyhaIHosIFkgLi4uIHkpIHt9XG4iICsKKworCQkJCQkiICAgIHZvaWQgZm9vNChBIGEsIFcg
Li4uIHcpIHt9XG4iICsKKwkJCQkJIiAgICB2b2lkIGZvbzQoQSBhLCBZIC4uLiB5KSB7fVxuIiAr
CisKKwkJCQkJIiAgICB2b2lkIGZvbzUoWiAuLi4geikge31cbiIgKworCQkJCQkiICAgIHZvaWQg
Zm9vNShaIHosIFogLi4uIHoyKSB7fVxuIiArCisKKwkJCQkJIiAgICB2b2lkIGJhcigpIHtcbiIg
KworCQkJCQkiICAgICAgICBmb28oXCJmXCIpO1xuIiArIC8vIE9yaWdpbmFsIFRlc3QgQ2FzZQor
CQkJCQkJCQkJCQkgIC8vIEFtYmlndW91cyBmdW5jdGlvbiBjYWxsIGVycm9yIHdpdGhvdXQgZml4
CisKKwkJCQkJIiAgICAgICAgZm9vKFwiZlwiLCAxMik7XG4iICsKKworCQkJCQkiICAgICAgICBm
b28xKG5ldyBaKCkpO1xuIiArCisJCQkJCSIgICAgICAgIGZvbzIobmV3IFcoKSk7XG4iICsgLy9F
cnJvciBbMV0KKwkJCQkJIiAgICAgICAgZm9vMyhuZXcgWigpKTtcbiIgKworCQkJCQkiICAgICAg
ICBmb280KG5ldyBBKCkpO1xuIiArCisJCQkJCSIgICAgICAgIGZvbzUobmV3IFooKSk7XG4iICsg
Ly9FcnJvciBbMl0KKwkJCQkJIiAgICB9XG4iICsKKwkJCQkJIiAgICBwdWJsaWMgc3RhdGljIHZv
aWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7fVxuIiArCisJCQkJCSJ9XG4iLAorCQkJCX0sCisJCQkJ
Ii0tLS0tLS0tLS1cbiIgKworCQkJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMjIpXG4i
ICsKKwkJCQkiCWZvbzIobmV3IFcoKSk7XG4iICsKKwkJCQkiCV5eXl5cbiIgKworCQkJCSJUaGUg
bWV0aG9kIGZvbzIoV1tdKSBpcyBhbWJpZ3VvdXMgZm9yIHRoZSB0eXBlIFhcbiIgKworCQkJCSIt
LS0tLS0tLS0tXG4iICsKKwkJCQkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDI1KVxuIiAr
CisJCQkJIglmb281KG5ldyBaKCkpO1xuIiArCisJCQkJIgleXl5eXG4iICsKKwkJCQkiVGhlIG1l
dGhvZCBmb281KFpbXSkgaXMgYW1iaWd1b3VzIGZvciB0aGUgdHlwZSBYXG4iICsKKwkJCQkiLS0t
LS0tLS0tLVxuIik7CisJCX0gZWxzZSB7CisJCQlydW5OZWdhdGl2ZVRlc3QoCisJCQkJbmV3IFN0
cmluZ1tdIHsKKwkJCQkJIlguamF2YSIsCisJCQkJCSJjbGFzcyBXIHt9XG4iICsKKwkJCQkJImNs
YXNzIFkgZXh0ZW5kcyBXIHt9XG4iICsKKwkJCQkJImNsYXNzIFogZXh0ZW5kcyBZIHt9XG4iICsK
KwkJCQkJImNsYXNzIEF7fVxuIiArCisJCQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKworCQkJ
CQkiICAgIHZvaWQgZm9vKFN0cmluZyBmb3JtYXQsIE9iamVjdCAuLi4gYXJncykge31cbiIgKwor
CQkJCQkiICAgIHZvaWQgZm9vKFN0cmluZyAuLi4gcykge31cbiIgKworCisJCQkJCSIgICAgdm9p
ZCBmb28xKFogLi4uIHopIHt9XG4iICsKKwkJCQkJIiAgICB2b2lkIGZvbzEoWiB6LCBZIC4uLiB5
KSB7fVxuIiArCisKKwkJCQkJIiAgICB2b2lkIGZvbzIoVyAuLi4gdykge31cbiIgKworCQkJCQki
ICAgIHZvaWQgZm9vMihXIHcsIEEgLi4uIGEpIHt9XG4iICsKKworCQkJCQkiICAgIHZvaWQgZm9v
MyhaIHosIFcgLi4uIHcpIHt9XG4iICsKKwkJCQkJIiAgICB2b2lkIGZvbzMoWiB6LCBZIC4uLiB5
KSB7fVxuIiArCisKKwkJCQkJIiAgICB2b2lkIGZvbzQoQSBhLCBXIC4uLiB3KSB7fVxuIiArCisJ
CQkJCSIgICAgdm9pZCBmb280KEEgYSwgWSAuLi4geSkge31cbiIgKworCisJCQkJCSIgICAgdm9p
ZCBmb281KFogLi4uIHopIHt9XG4iICsKKwkJCQkJIiAgICB2b2lkIGZvbzUoWiB6LCBaIC4uLiB6
Mikge31cbiIgKworCisJCQkJCSIgICAgdm9pZCBiYXIoKSB7XG4iICsKKwkJCQkJIiAgICAgICAg
Zm9vKFwiZlwiKTtcbiIgKworCQkJCQkiICAgICAgICBmb28oXCJmXCIsIDEyKTtcbiIgKworCQkJ
CQkiICAgICAgICBmb28xKG5ldyBaKCkpO1xuIiArCisJCQkJCSIgICAgICAgIGZvbzIobmV3IFco
KSk7XG4iICsgLy8gTm8gRXJyb3IuCisJCQkJCSIgICAgICAgIGZvbzMobmV3IFooKSk7XG4iICsK
KwkJCQkJIiAgICAgICAgZm9vNChuZXcgQSgpKTtcbiIgKworCQkJCQkiICAgICAgICBmb281KG5l
dyBaKCkpO1xuIiArIC8vIEVycm9yIFsxXQorCQkJCQkiICAgIH1cbiIgKworCQkJCQkiICAgIHB1
YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHt9XG4iICsKKwkJCQkifVxuIiwK
KwkJCQl9LAorCQkJCSItLS0tLS0tLS0tXG4iICsKKwkJCQkiMS4gRVJST1IgaW4gWC5qYXZhIChh
dCBsaW5lIDI1KVxuIiArCisJCQkJIglmb281KG5ldyBaKCkpO1xyXG4iICsKKwkJCQkiCV5eXl5c
biIgKworCQkJCSJUaGUgbWV0aG9kIGZvbzUoWltdKSBpcyBhbWJpZ3VvdXMgZm9yIHRoZSB0eXBl
IFhcbiIgKworCQkJCSItLS0tLS0tLS0tXG4iKTsKKwkJfQorCX0KIH0KXCBObyBuZXdsaW5lIGF0
IGVuZCBvZiBmaWxlCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvbG9va3VwL1Njb3BlLmphdmEKaW5kZXggYmYwNzJkNC4uNGY1YWVhMSAxMDA2NDQKLS0tIGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YQpA
QCAtNDQ1Niw2ICs0NDU2LDE1IEBAIHB1YmxpYyBhYnN0cmFjdCBjbGFzcyBTY29wZSB7CiAJCQkJ
CQkJCWNvbnRpbnVlIG5leHRKOwogCQkJCQkJCX0KIAkJCQkJCX0KKwkJCQkJCWlmIChtYmsudHlw
ZVZhcmlhYmxlcygpID09IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMgLy8gTm9uIC0gZ2VuZXJp
YworCQkJCQkJCQkmJiBtYmpQYXJhbWV0ZXJzLmxlbmd0aCA9PSBhcmd1bWVudFR5cGVzLmxlbmd0
aCArIDEgLy8gbGV2ZWxqID09IFZBUkFSR1NfQ09NUEFUSUJMRQorICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgLy8gbWJqLmlzVmFyYXJncygpIC0+IFRydWUKKwkJCQkJCQkJJiYgbGV2ZWxrID09
IFZBUkFSR1NfQ09NUEFUSUJMRSkgeworCQkJCQkJCVR5cGVCaW5kaW5nIHMgPSBJbmZlcmVuY2VD
b250ZXh0MTguZ2V0UGFyYW1ldGVyKG1ialBhcmFtZXRlcnMsIGFyZ3VtZW50VHlwZXMubGVuZ3Ro
LCB0cnVlKTsKKwkJCQkJCQlUeXBlQmluZGluZyB0ID0gSW5mZXJlbmNlQ29udGV4dDE4LmdldFBh
cmFtZXRlcihtYmtQYXJhbWV0ZXJzLCBhcmd1bWVudFR5cGVzLmxlbmd0aCwgdHJ1ZSk7CisJCQkJ
CQkJaWYgKCFUeXBlQmluZGluZy5lcXVhbHNFcXVhbHMocywgdCkgJiYgdC5pc1N1YnR5cGVPZihz
KSkgLy9tYmsgaXMgbW9yZSBzcGVjaWZpYworCQkJCQkJCQljb250aW51ZSBuZXh0SjsKKwkJCQkJ
CX0KIAkJCQkJfQogCQkJCX0KIAkJCQltb3JlU3BlY2lmaWNbY291bnQrK10gPSB2aXNpYmxlW2pd
Owo=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>245545</attachid>
            <date>2014-07-30 13:47:00 -0400</date>
            <delta_ts>2014-07-31 01:53:37 -0400</delta_ts>
            <desc>Patch</desc>
            <filename>patch.patch</filename>
            <type>text/plain</type>
            <size>5644</size>
            <attacher name="shankha banerjee">shankhba</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1ZhcmFyZ3NUZXN0Lmph
dmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2Uv
amR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9WYXJhcmdzVGVzdC5qYXZhCmluZGV4
IDhiNTc5ZTAuLmE4MjdmM2UgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3Rz
LmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNz
aW9uL1ZhcmFyZ3NUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29t
cGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24v
VmFyYXJnc1Rlc3QuamF2YQpAQCAtMzQ2NSw0ICszNDY1LDEyOSBAQCBwdWJsaWMgY2xhc3MgVmFy
YXJnc1Rlc3QgZXh0ZW5kcyBBYnN0cmFjdENvbXBhcmFibGVUZXN0IHsKIAkJCSJUaGUgbWV0aG9k
IGZvbyhBLi4uKSBvZiB0eXBlIEIgaXMgbm90IGFwcGxpY2FibGUgYXMgdGhlIGZvcm1hbCB2YXJh
cmdzIGVsZW1lbnQgdHlwZSBBIGlzIG5vdCBhY2Nlc3NpYmxlIGhlcmVcbiIgKyAKIAkJCSItLS0t
LS0tLS0tXG4iKTsgLy8gY2hlY2sgYW5kIGFkanVzdCwKIAl9CisKKwkvL2h0dHBzOi8vYnVncy5l
Y2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00Mzc5NzMsIFsxLjhdW2NvbXBpbGVyXSBN
aXNzaW5nIGltcGxlbWVudGF0aW9uIG9mIEpMUyAxNS4xMi4yLjUgVGhpcmQgQnVsbGV0IC0gUGFy
dCAyCisJcHVibGljIHZvaWQgdGVzdDQzNzk3MygpIHsKKwkJcnVuQ29uZm9ybVRlc3QoCisJCQlu
ZXcgU3RyaW5nW10geworCQkJCSJYLmphdmEiLAorCQkJCSJjbGFzcyBXIHt9XG4iICsKKwkJCQki
Y2xhc3MgWSBleHRlbmRzIFcge31cbiIgKworCQkJCSJjbGFzcyBaIGV4dGVuZHMgWSB7fVxuIiAr
CisJCQkJImNsYXNzIEF7fVxuIiArCisJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJCSIJ
dm9pZCBmb28oU3RyaW5nIGZvcm1hdCwgT2JqZWN0IC4uLiBhcmdzKSB7XG4iICsKKwkJCQkiCQlT
eXN0ZW0ub3V0LnByaW50bG4oXCJmb28gT2JqZWN0IFZhcmFyZ3NcIik7XG4iICsKKwkJCQkiCX1c
biIgKworCQkJCSIJdm9pZCBmb28oU3RyaW5nIC4uLiBzKSB7XG4iICsKKwkJCQkiCQlTeXN0ZW0u
b3V0LnByaW50bG4oXCJmb28gU3RyaW5nIFZhcmFyZ3NcIik7XG4iICsKKwkJCQkiCX1cbiIgKwor
CQkJCSIJdm9pZCBmb28xKFogLi4uIHopIHtcbiIgKworCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRs
bihcImZvbzEgWiB2YXJhcmdzXCIpO1xuIiArCisJCQkJIgl9XG4iICsKKwkJCQkiCXZvaWQgZm9v
MShaIHosIFkgLi4uIHkpIHtcbiIgKworCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihcImZvbzEg
WSB2YXJhcmdzXCIpO1xuIiArCisJCQkJIgl9XG4iICsKKwkJCQkiCXZvaWQgZm9vMihaIHosIFcg
Li4uIHcpIHtcbiIgKworCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihcImZvbzIgVyB2YXJhcmdz
XCIpO1xuIiArCisJCQkJIgl9XG4iICsKKwkJCQkiCXZvaWQgZm9vMihaIHosIFkgLi4uIHkpIHtc
biIgKworCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihcImZvbzIgWSB2YXJhcmdzXCIpO1xuIiAr
CisJCQkJIgl9XG4iICsKKwkJCQkiCXZvaWQgZm9vMyhBIGEsIFcgLi4uIHcpIHtcbiIgKworCQkJ
CSIJCVN5c3RlbS5vdXQucHJpbnRsbihcImZvbzMgVyB2YXJhcmdzXCIpO1xuIiArCisJCQkJIgl9
XG4iICsKKwkJCQkiCXZvaWQgZm9vMyhBIGEsIFkgLi4uIHkpIHtcbiIgKworCQkJCSIJCVN5c3Rl
bS5vdXQucHJpbnRsbihcImZvbzMgWSB2YXJhcmdzXCIpO1xuIiArCisJCQkJIgl9XG4iICsKKwkJ
CQkiCXZvaWQgZm9vNChXIHcpIHtcbiIgKworCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihcImZv
bzQgV1wiKTtcbiIgKworCQkJCSIJfVxuIiArCisJCQkJIgl2b2lkIGZvbzQoVyB3LCBBIC4uLiBh
KSB7XG4iICsKKwkJCQkiCQlTeXN0ZW0ub3V0LnByaW50bG4oXCJmb280IEEgdmFyYXJnc1wiKTtc
biIgKworCQkJCSIJfVxuIiArCisJCQkJIgl2b2lkIGZvbzUoVyB3KSB7XG4iICsKKwkJCQkiCQlT
eXN0ZW0ub3V0LnByaW50bG4oXCJmb281IFdcIik7XG4iICsKKwkJCQkiCX1cbiIgKworCQkJCSIJ
dm9pZCBmb281KFcgLi4uIHcpIHtcbiIgKworCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihcImZv
bzUgVyB2YXJhcmdzXCIpO1xuIiArCisJCQkJIgl9XG4iICsKKwkJCQkiCXZvaWQgZm9vNihXIC4u
LiB3KSB7XG4iICsKKwkJCQkiCQlTeXN0ZW0ub3V0LnByaW50bG4oXCJmb282IFcgdmFyYXJnc1wi
KTtcbiIgKworCQkJCSIJfVxuIiArCisJCQkJIgl2b2lkIGZvbzYoWSAuLi4geSkge1xuIiArCisJ
CQkJIgkJU3lzdGVtLm91dC5wcmludGxuKFwiZm9vNiBZIHZhcmFyZ3NcIik7XG4iICsKKwkJCQki
CX1cbiIgKworCQkJCSIgICB2b2lkIGZvbzcoU3RyaW5nIGZvcm1hdCwgT2JqZWN0IC4uLiBhcmdz
KSB7XG4iICsKKwkJCQkiCSAgICBTeXN0ZW0ub3V0LnByaW50bG4oXCJmb283IE9iamVjdCBWYXJh
cmdzXCIpO1xuIiArCisJCQkJIiAgIH1cbiIgKworCQkJCSIgICB2b2lkIGZvbzgoU3RyaW5nIC4u
LiBzKSB7XG4iICsKKwkJCQkiCSAgICBTeXN0ZW0ub3V0LnByaW50bG4oXCJmb284IFN0cmluZyBW
YXJhcmdzXCIpO1xuIiArCisJCQkJIiAgIH1cbiIgKyAKKwkJCQkiCXZvaWQgYmFyKCkge1xuIiAr
CisJCQkJIgkJZm9vKFwiZlwiKTtcbiIgKyAgIC8vIE9yaWdpbmFsIFRlc3QgQ2FzZSA6IEVycm9y
IHdpdGhvdXQgZml4CisJCQkJIgkJZm9vKFwiZlwiLCAxMik7XG4iICsKKwkJCQkiCQlmb28xKG5l
dyBaKCkpO1xuIiArCisJCQkJIgkJZm9vMihuZXcgWigpKTtcbiIgKworCQkJCSIJCWZvbzMobmV3
IEEoKSk7XG4iICsKKwkJCQkiCQlmb280KG5ldyBXKCkpO1xuIiArCisJCQkJIgkJZm9vNShuZXcg
VygpKTtcbiIgKworCQkJCSIJCWZvbzYobmV3IFcoKSk7XG4iICsKKwkJCQkiCQlmb282KG5ldyBZ
KCkpO1xuIiArCisJCQkJIiAgICAgICBmb283KFwiZlwiLCAxMik7XG4iICsKKwkJICAgICAgICAi
ICAgICAgIGZvbzgoXCJmXCIpO1xuIiArCisJCQkJIgl9XG4iICsKKwkJCQkiCXB1YmxpYyBzdGF0
aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKworCQkJCSIJCVggeCA9IG5ldyBYKCk7
XG4iICsKKwkJCQkiCQl4LmJhcigpO1xuIiArCisJCQkJIgl9XG4iICsKKwkJCQkifVxuIiwKKwkJ
CX0sCisJCQkiZm9vIFN0cmluZyBWYXJhcmdzXG4iICsKKwkJCSJmb28gT2JqZWN0IFZhcmFyZ3Nc
biIgKworCQkJImZvbzEgWiB2YXJhcmdzXG4iICsKKwkJCSJmb28yIFkgdmFyYXJnc1xuIiArCisJ
CQkiZm9vMyBZIHZhcmFyZ3NcbiIgKworCQkJImZvbzQgV1xuIiArCisJCQkiZm9vNSBXXG4iICsK
KwkJCSJmb282IFcgdmFyYXJnc1xuIiArCisJCQkiZm9vNiBZIHZhcmFyZ3NcbiIgKworCQkJImZv
bzcgT2JqZWN0IFZhcmFyZ3NcbiIgKworCQkJImZvbzggU3RyaW5nIFZhcmFyZ3MiKTsKKwl9CisK
KwkvL2h0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00Mzc5NzMs
IFsxLjhdW2NvbXBpbGVyXSBNaXNzaW5nIGltcGxlbWVudGF0aW9uIG9mIEpMUyAxNS4xMi4yLjUg
VGhpcmQgQnVsbGV0IC0gUGFydCAyCQorCXB1YmxpYyB2b2lkIHRlc3Q0Mzc5NzNhKCkgeworCQlp
ZiAodGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84KQorCQkJ
cmV0dXJuOworCQlydW5Db25mb3JtVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJYLmphdmEi
LAorCQkJImNsYXNzIFcge31cbiIgKworCQkJImNsYXNzIFkgZXh0ZW5kcyBXIHt9XG4iICsKKwkJ
CSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCSIJdm9pZCBmb28oVyB3LCBZIC4uLiB5KSB7XG4i
ICsKKwkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihcImZvbyBZIHZhcmFyZ3NcIik7XG4iICsKKwkJ
CSIgICB9XG4iICsKKwkJCSIJdm9pZCBmb28oVyAuLi4gdykge1xuIiArCisJCQkiCQlTeXN0ZW0u
b3V0LnByaW50bG4oXCJmb28gVyB2YXJhcmdzXCIpO1xuIiArCisJCQkiICAgfVxuIiArCisJCQki
CXZvaWQgYmFyKCkge1xuIiArCisJCQkiCQlmb28obmV3IFcoKSwgbmV3IFcoKSwgbmV3IFcoKSk7
XG4iICsKKworCQkJLy9FcnJvciB3aXRoIDEuOCB3aXRob3V0IGZpeCBmb3IgYWxsIHRoZXNlIHRo
cmVlIHRlc3QgY2FzZXMuCisJCQkiCQlmb28obmV3IFkoKSwgbmV3IFkoKSwgbmV3IFkoKSk7XG4i
ICsKKwkJCSIJCWZvbyhuZXcgVygpKTtcbiIgKworCQkJIgkJZm9vKG5ldyBZKCkpO1xuIiArCisJ
CQkiCX1cbiIgKworCQkJIglwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7
XG4iICsKKwkJCSIJCVggeCA9IG5ldyBYKCk7XG4iICsKKwkJCSIJCXguYmFyKCk7XG4iICsKKwkJ
CSIJfVxuIiArCisJCQkifVxuIn0sCisJCQkiZm9vIFcgdmFyYXJnc1xuIiArCisJCQkiZm9vIFkg
dmFyYXJnc1xuIiArCisJCQkiZm9vIFkgdmFyYXJnc1xuIiArCisJCQkiZm9vIFkgdmFyYXJncyIp
OworCX0KIH0KXCBObyBuZXdsaW5lIGF0IGVuZCBvZiBmaWxlCmRpZmYgLS1naXQgYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
bG9va3VwL1Njb3BlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEKaW5kZXggYmYwNzJk
NC4uYmFhZWQxYyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhCisrKyBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9sb29rdXAvU2NvcGUuamF2YQpAQCAtNDQ1Niw2ICs0NDU2LDEzIEBAIHB1YmxpYyBhYnN0
cmFjdCBjbGFzcyBTY29wZSB7CiAJCQkJCQkJCWNvbnRpbnVlIG5leHRKOwogCQkJCQkJCX0KIAkJ
CQkJCX0KKwkJCQkJCWlmIChtYmsudHlwZVZhcmlhYmxlcygpID09IEJpbmRpbmcuTk9fVFlQRV9W
QVJJQUJMRVMgLy8gTm9uIC0gZ2VuZXJpYworCQkJCQkJCQkmJiBsZXZlbGogPT0gVkFSQVJHU19D
T01QQVRJQkxFICYmIGxldmVsayA9PSBWQVJBUkdTX0NPTVBBVElCTEUpIHsKKwkJCQkJCQlUeXBl
QmluZGluZyBzID0gSW5mZXJlbmNlQ29udGV4dDE4LmdldFBhcmFtZXRlcihtYmpQYXJhbWV0ZXJz
LCBhcmd1bWVudFR5cGVzLmxlbmd0aCwgdHJ1ZSk7CisJCQkJCQkJVHlwZUJpbmRpbmcgdCA9IElu
ZmVyZW5jZUNvbnRleHQxOC5nZXRQYXJhbWV0ZXIobWJrUGFyYW1ldGVycywgYXJndW1lbnRUeXBl
cy5sZW5ndGgsIHRydWUpOworCQkJCQkJCWlmICghVHlwZUJpbmRpbmcuZXF1YWxzRXF1YWxzKHMs
IHQpICYmIHQuaXNTdWJ0eXBlT2YocykpCisJCQkJCQkJCWNvbnRpbnVlIG5leHRKOworCQkJCQkJ
fQogCQkJCQl9CiAJCQkJfQogCQkJCW1vcmVTcGVjaWZpY1tjb3VudCsrXSA9IHZpc2libGVbal07
Cg==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>245570</attachid>
            <date>2014-07-31 02:28:00 -0400</date>
            <delta_ts>2014-07-31 09:38:48 -0400</delta_ts>
            <desc>Patch</desc>
            <filename>patch.patch</filename>
            <type>text/plain</type>
            <size>6542</size>
            <attacher name="shankha banerjee">shankhba</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1ZhcmFyZ3NUZXN0Lmph
dmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2Uv
amR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9WYXJhcmdzVGVzdC5qYXZhCmluZGV4
IDhiNTc5ZTAuLjRiNmU4ZjUgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3Rz
LmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNz
aW9uL1ZhcmFyZ3NUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29t
cGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24v
VmFyYXJnc1Rlc3QuamF2YQpAQCAtMzQ2NSw0ICszNDY1LDE1NSBAQCBwdWJsaWMgY2xhc3MgVmFy
YXJnc1Rlc3QgZXh0ZW5kcyBBYnN0cmFjdENvbXBhcmFibGVUZXN0IHsKIAkJCSJUaGUgbWV0aG9k
IGZvbyhBLi4uKSBvZiB0eXBlIEIgaXMgbm90IGFwcGxpY2FibGUgYXMgdGhlIGZvcm1hbCB2YXJh
cmdzIGVsZW1lbnQgdHlwZSBBIGlzIG5vdCBhY2Nlc3NpYmxlIGhlcmVcbiIgKyAKIAkJCSItLS0t
LS0tLS0tXG4iKTsgLy8gY2hlY2sgYW5kIGFkanVzdCwKIAl9CisKKwkvL2h0dHBzOi8vYnVncy5l
Y2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00Mzc5NzMsIFsxLjhdW2NvbXBpbGVyXSBN
aXNzaW5nIGltcGxlbWVudGF0aW9uIG9mIEpMUyAxNS4xMi4yLjUgVGhpcmQgQnVsbGV0IC0gUGFy
dCAyCisJcHVibGljIHZvaWQgdGVzdDQzNzk3MygpIHsKKwkJcnVuQ29uZm9ybVRlc3QoCisJCQlu
ZXcgU3RyaW5nW10geworCQkJCSJYLmphdmEiLAorCQkJCSJjbGFzcyBXIHt9XG4iICsKKwkJCQki
Y2xhc3MgWSBleHRlbmRzIFcge31cbiIgKworCQkJCSJjbGFzcyBaIGV4dGVuZHMgWSB7fVxuIiAr
CisJCQkJImNsYXNzIEF7fVxuIiArCisJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJCSIJ
dm9pZCBmb28oU3RyaW5nIGZvcm1hdCwgT2JqZWN0IC4uLiBhcmdzKSB7XG4iICsKKwkJCQkiCQlT
eXN0ZW0ub3V0LnByaW50bG4oXCJmb28gT2JqZWN0IFZhcmFyZ3NcIik7XG4iICsKKwkJCQkiCX1c
biIgKworCQkJCSIJdm9pZCBmb28oU3RyaW5nIC4uLiBzKSB7XG4iICsKKwkJCQkiCQlTeXN0ZW0u
b3V0LnByaW50bG4oXCJmb28gU3RyaW5nIFZhcmFyZ3NcIik7XG4iICsKKwkJCQkiCX1cbiIgKwor
CQkJCSIJdm9pZCBmb28xKFogLi4uIHopIHtcbiIgKworCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRs
bihcImZvbzEgWiB2YXJhcmdzXCIpO1xuIiArCisJCQkJIgl9XG4iICsKKwkJCQkiCXZvaWQgZm9v
MShaIHosIFkgLi4uIHkpIHtcbiIgKworCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihcImZvbzEg
WSB2YXJhcmdzXCIpO1xuIiArCisJCQkJIgl9XG4iICsKKwkJCQkiCXZvaWQgZm9vMihaIHosIFcg
Li4uIHcpIHtcbiIgKworCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihcImZvbzIgVyB2YXJhcmdz
XCIpO1xuIiArCisJCQkJIgl9XG4iICsKKwkJCQkiCXZvaWQgZm9vMihaIHosIFkgLi4uIHkpIHtc
biIgKworCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihcImZvbzIgWSB2YXJhcmdzXCIpO1xuIiAr
CisJCQkJIgl9XG4iICsKKwkJCQkiCXZvaWQgZm9vMyhBIGEsIFcgLi4uIHcpIHtcbiIgKworCQkJ
CSIJCVN5c3RlbS5vdXQucHJpbnRsbihcImZvbzMgVyB2YXJhcmdzXCIpO1xuIiArCisJCQkJIgl9
XG4iICsKKwkJCQkiCXZvaWQgZm9vMyhBIGEsIFkgLi4uIHkpIHtcbiIgKworCQkJCSIJCVN5c3Rl
bS5vdXQucHJpbnRsbihcImZvbzMgWSB2YXJhcmdzXCIpO1xuIiArCisJCQkJIgl9XG4iICsKKwkJ
CQkiCXZvaWQgZm9vNChXIHcpIHtcbiIgKworCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihcImZv
bzQgV1wiKTtcbiIgKworCQkJCSIJfVxuIiArCisJCQkJIgl2b2lkIGZvbzQoVyB3LCBBIC4uLiBh
KSB7XG4iICsKKwkJCQkiCQlTeXN0ZW0ub3V0LnByaW50bG4oXCJmb280IEEgdmFyYXJnc1wiKTtc
biIgKworCQkJCSIJfVxuIiArCisJCQkJIgl2b2lkIGZvbzUoVyB3KSB7XG4iICsKKwkJCQkiCQlT
eXN0ZW0ub3V0LnByaW50bG4oXCJmb281IFdcIik7XG4iICsKKwkJCQkiCX1cbiIgKworCQkJCSIJ
dm9pZCBmb281KFcgLi4uIHcpIHtcbiIgKworCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihcImZv
bzUgVyB2YXJhcmdzXCIpO1xuIiArCisJCQkJIgl9XG4iICsKKwkJCQkiCXZvaWQgZm9vNihXIC4u
LiB3KSB7XG4iICsKKwkJCQkiCQlTeXN0ZW0ub3V0LnByaW50bG4oXCJmb282IFcgdmFyYXJnc1wi
KTtcbiIgKworCQkJCSIJfVxuIiArCisJCQkJIgl2b2lkIGZvbzYoWSAuLi4geSkge1xuIiArCisJ
CQkJIgkJU3lzdGVtLm91dC5wcmludGxuKFwiZm9vNiBZIHZhcmFyZ3NcIik7XG4iICsKKwkJCQki
CX1cbiIgKworCQkJCSIgICB2b2lkIGZvbzcoU3RyaW5nIGZvcm1hdCwgT2JqZWN0IC4uLiBhcmdz
KSB7XG4iICsKKwkJCQkiCSAgICBTeXN0ZW0ub3V0LnByaW50bG4oXCJmb283IE9iamVjdCBWYXJh
cmdzXCIpO1xuIiArCisJCQkJIiAgIH1cbiIgKworCQkJCSIgICB2b2lkIGZvbzgoU3RyaW5nIC4u
LiBzKSB7XG4iICsKKwkJCQkiCSAgICBTeXN0ZW0ub3V0LnByaW50bG4oXCJmb284IFN0cmluZyBW
YXJhcmdzXCIpO1xuIiArCisJCQkJIiAgIH1cbiIgKyAKKwkJCQkiCXZvaWQgYmFyKCkge1xuIiAr
CisJCQkJIgkJZm9vKFwiZlwiKTtcbiIgKyAgIC8vIE9yaWdpbmFsIFRlc3QgQ2FzZSA6IEVycm9y
IHdpdGhvdXQgZml4CisJCQkJIgkJZm9vKFwiZlwiLCAxMik7XG4iICsKKwkJCQkiCQlmb28xKG5l
dyBaKCkpO1xuIiArCisJCQkJIgkJZm9vMihuZXcgWigpKTtcbiIgKworCQkJCSIJCWZvbzMobmV3
IEEoKSk7XG4iICsKKwkJCQkiCQlmb280KG5ldyBXKCkpO1xuIiArCisJCQkJIgkJZm9vNShuZXcg
VygpKTtcbiIgKworCQkJCSIJCWZvbzYobmV3IFcoKSk7XG4iICsKKwkJCQkiCQlmb282KG5ldyBZ
KCkpO1xuIiArCisJCQkJIiAgICAgICBmb283KFwiZlwiLCAxMik7XG4iICsKKwkJICAgICAgICAi
ICAgICAgIGZvbzgoXCJmXCIpO1xuIiArCisJCQkJIgl9XG4iICsKKwkJCQkiCXB1YmxpYyBzdGF0
aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKworCQkJCSIJCVggeCA9IG5ldyBYKCk7
XG4iICsKKwkJCQkiCQl4LmJhcigpO1xuIiArCisJCQkJIgl9XG4iICsKKwkJCQkifVxuIiwKKwkJ
CX0sCisJCQkiZm9vIFN0cmluZyBWYXJhcmdzXG4iICsKKwkJCSJmb28gT2JqZWN0IFZhcmFyZ3Nc
biIgKworCQkJImZvbzEgWiB2YXJhcmdzXG4iICsKKwkJCSJmb28yIFkgdmFyYXJnc1xuIiArCisJ
CQkiZm9vMyBZIHZhcmFyZ3NcbiIgKworCQkJImZvbzQgV1xuIiArCisJCQkiZm9vNSBXXG4iICsK
KwkJCSJmb282IFcgdmFyYXJnc1xuIiArCisJCQkiZm9vNiBZIHZhcmFyZ3NcbiIgKworCQkJImZv
bzcgT2JqZWN0IFZhcmFyZ3NcbiIgKworCQkJImZvbzggU3RyaW5nIFZhcmFyZ3MiKTsKKwl9CisK
KwkvL2h0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00Mzc5NzMs
IFsxLjhdW2NvbXBpbGVyXSBNaXNzaW5nIGltcGxlbWVudGF0aW9uIG9mIEpMUyAxNS4xMi4yLjUg
VGhpcmQgQnVsbGV0IC0gUGFydCAyCQorCXB1YmxpYyB2b2lkIHRlc3Q0Mzc5NzNhKCkgeworCQlp
ZiAodGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84KQorCQkJ
cmV0dXJuOworCQlydW5Db25mb3JtVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJYLmphdmEi
LAorCQkJImNsYXNzIFcge31cbiIgKworCQkJImNsYXNzIFkgZXh0ZW5kcyBXIHt9XG4iICsKKwkJ
CSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCSIJdm9pZCBmb28oVyB3LCBZIC4uLiB5KSB7XG4i
ICsKKwkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihcImZvbyBZIHZhcmFyZ3NcIik7XG4iICsKKwkJ
CSIgICB9XG4iICsKKwkJCSIJdm9pZCBmb28oVyAuLi4gdykge1xuIiArCisJCQkiCQlTeXN0ZW0u
b3V0LnByaW50bG4oXCJmb28gVyB2YXJhcmdzXCIpO1xuIiArCisJCQkiICAgfVxuIiArCisJCQki
CXZvaWQgYmFyKCkge1xuIiArCisJCQkiCQlmb28obmV3IFcoKSwgbmV3IFcoKSwgbmV3IFcoKSk7
XG4iICsKKworCQkJLy9FcnJvciB3aXRoIDEuOCB3aXRob3V0IGZpeCBmb3IgYWxsIHRoZXNlIHRo
cmVlIHRlc3QgY2FzZXMuCisJCQkiCQlmb28obmV3IFkoKSwgbmV3IFkoKSwgbmV3IFkoKSk7XG4i
ICsKKwkJCSIJCWZvbyhuZXcgVygpKTtcbiIgKworCQkJIgkJZm9vKG5ldyBZKCkpO1xuIiArCisJ
CQkiCX1cbiIgKworCQkJIglwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7
XG4iICsKKwkJCSIJCVggeCA9IG5ldyBYKCk7XG4iICsKKwkJCSIJCXguYmFyKCk7XG4iICsKKwkJ
CSIJfVxuIiArCisJCQkifVxuIn0sCisJCQkiZm9vIFcgdmFyYXJnc1xuIiArCisJCQkiZm9vIFkg
dmFyYXJnc1xuIiArCisJCQkiZm9vIFkgdmFyYXJnc1xuIiArCisJCQkiZm9vIFkgdmFyYXJncyIp
OworCX0KKworCS8vaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lk
PTQzNzk3MywgWzEuOF1bY29tcGlsZXJdIE1pc3NpbmcgaW1wbGVtZW50YXRpb24gb2YgSkxTIDE1
LjEyLjIuNSBUaGlyZCBCdWxsZXQgLSBQYXJ0IDIKKwkvL1RoZSBwYXJhbWV0ZXIgb2Ygb25lIG1l
dGhvZCBpcyBub3QgYSBzdWJ0eXBlIG9mIHRoZSBvdGhlci4KKwlwdWJsaWMgdm9pZCB0ZXN0NDM3
OTczYigpIHsKKwkJaWYgKHRoaXMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRz
LkpESzFfOCkKKwkJCXJldHVybjsKKwkJcnVuTmVnYXRpdmVUZXN0KAorCQluZXcgU3RyaW5nW10g
eworCQkJIlguamF2YSIsCisJCQkiY2xhc3MgVyB7fVxuIiArCisJCQkiY2xhc3MgQSB7fVxuIiAr
CisJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkiICAgIHZvaWQgZm9vKFcgLi4uIHcpIHt9
XG4iICsKKwkJCSIgICAgdm9pZCBmb28oVyB3LCBBIC4uLiBhKSB7fVxuIiArCisJCQkiICAgIHZv
aWQgYmFyKCkge1xuIiArCisJCQkiICAgICAgICBmb28obmV3IFcoKSk7IC8vIDEuOCBFcnJvcjog
QW1iaWd1b3VzIG1ldGhvZCBlcnJvclxuIiArCisJCQkiICAgIH1cbiIgKworCQkJIiAgICBwdWJs
aWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7fVxuIiArCisJCQkifVxuIn0sCisJ
CQkiLS0tLS0tLS0tLVxuIiArCisJCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDcpXG4i
ICsKKwkJCSIJZm9vKG5ldyBXKCkpOyAvLyAxLjggRXJyb3I6IEFtYmlndW91cyBtZXRob2QgZXJy
b3JcbiIgKworCQkJIgleXl5cbiIgKworCQkJIlRoZSBtZXRob2QgZm9vKFdbXSkgaXMgYW1iaWd1
b3VzIGZvciB0aGUgdHlwZSBYXG4iICsKKwkJCSItLS0tLS0tLS0tXG4iKTsKKwl9CiB9ClwgTm8g
bmV3bGluZSBhdCBlbmQgb2YgZmlsZQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhCmluZGV4IGJmMDcyZDQuLmJhYWVkMWMgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Nj
b3BlLmphdmEKQEAgLTQ0NTYsNiArNDQ1NiwxMyBAQCBwdWJsaWMgYWJzdHJhY3QgY2xhc3MgU2Nv
cGUgewogCQkJCQkJCQljb250aW51ZSBuZXh0SjsKIAkJCQkJCQl9CiAJCQkJCQl9CisJCQkJCQlp
ZiAobWJrLnR5cGVWYXJpYWJsZXMoKSA9PSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTIC8vIE5v
biAtIGdlbmVyaWMKKwkJCQkJCQkJJiYgbGV2ZWxqID09IFZBUkFSR1NfQ09NUEFUSUJMRSAmJiBs
ZXZlbGsgPT0gVkFSQVJHU19DT01QQVRJQkxFKSB7CisJCQkJCQkJVHlwZUJpbmRpbmcgcyA9IElu
ZmVyZW5jZUNvbnRleHQxOC5nZXRQYXJhbWV0ZXIobWJqUGFyYW1ldGVycywgYXJndW1lbnRUeXBl
cy5sZW5ndGgsIHRydWUpOworCQkJCQkJCVR5cGVCaW5kaW5nIHQgPSBJbmZlcmVuY2VDb250ZXh0
MTguZ2V0UGFyYW1ldGVyKG1ia1BhcmFtZXRlcnMsIGFyZ3VtZW50VHlwZXMubGVuZ3RoLCB0cnVl
KTsKKwkJCQkJCQlpZiAoIVR5cGVCaW5kaW5nLmVxdWFsc0VxdWFscyhzLCB0KSAmJiB0LmlzU3Vi
dHlwZU9mKHMpKQorCQkJCQkJCQljb250aW51ZSBuZXh0SjsKKwkJCQkJCX0KIAkJCQkJfQogCQkJ
CX0KIAkJCQltb3JlU3BlY2lmaWNbY291bnQrK10gPSB2aXNpYmxlW2pdOwo=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>245595</attachid>
            <date>2014-07-31 09:38:00 -0400</date>
            <delta_ts>2014-09-09 09:58:41 -0400</delta_ts>
            <desc>Patch</desc>
            <filename>patch.patch</filename>
            <type>text/plain</type>
            <size>7238</size>
            <attacher name="shankha banerjee">shankhba</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1ZhcmFyZ3NUZXN0Lmph
dmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2Uv
amR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9WYXJhcmdzVGVzdC5qYXZhCmluZGV4
IDhiNTc5ZTAuLjNkYzdkNGYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3Rz
LmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNz
aW9uL1ZhcmFyZ3NUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29t
cGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24v
VmFyYXJnc1Rlc3QuamF2YQpAQCAtMzQ2NSw0ICszNDY1LDE4MSBAQCBwdWJsaWMgY2xhc3MgVmFy
YXJnc1Rlc3QgZXh0ZW5kcyBBYnN0cmFjdENvbXBhcmFibGVUZXN0IHsKIAkJCSJUaGUgbWV0aG9k
IGZvbyhBLi4uKSBvZiB0eXBlIEIgaXMgbm90IGFwcGxpY2FibGUgYXMgdGhlIGZvcm1hbCB2YXJh
cmdzIGVsZW1lbnQgdHlwZSBBIGlzIG5vdCBhY2Nlc3NpYmxlIGhlcmVcbiIgKyAKIAkJCSItLS0t
LS0tLS0tXG4iKTsgLy8gY2hlY2sgYW5kIGFkanVzdCwKIAl9CisKKwkvL2h0dHBzOi8vYnVncy5l
Y2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00Mzc5NzMsIFsxLjhdW2NvbXBpbGVyXSBN
aXNzaW5nIGltcGxlbWVudGF0aW9uIG9mIEpMUyAxNS4xMi4yLjUgVGhpcmQgQnVsbGV0IC0gUGFy
dCAyCisJcHVibGljIHZvaWQgdGVzdDQzNzk3MygpIHsKKwkJcnVuQ29uZm9ybVRlc3QoCisJCQlu
ZXcgU3RyaW5nW10geworCQkJCSJYLmphdmEiLAorCQkJCSJjbGFzcyBXIHt9XG4iICsKKwkJCQki
Y2xhc3MgWSBleHRlbmRzIFcge31cbiIgKworCQkJCSJjbGFzcyBaIGV4dGVuZHMgWSB7fVxuIiAr
CisJCQkJImNsYXNzIEF7fVxuIiArCisJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJCSIJ
dm9pZCBmb28oU3RyaW5nIGZvcm1hdCwgT2JqZWN0IC4uLiBhcmdzKSB7XG4iICsKKwkJCQkiCQlT
eXN0ZW0ub3V0LnByaW50bG4oXCJmb28gT2JqZWN0IFZhcmFyZ3NcIik7XG4iICsKKwkJCQkiCX1c
biIgKworCQkJCSIJdm9pZCBmb28oU3RyaW5nIC4uLiBzKSB7XG4iICsKKwkJCQkiCQlTeXN0ZW0u
b3V0LnByaW50bG4oXCJmb28gU3RyaW5nIFZhcmFyZ3NcIik7XG4iICsKKwkJCQkiCX1cbiIgKwor
CQkJCSIJdm9pZCBmb28xKFogLi4uIHopIHtcbiIgKworCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRs
bihcImZvbzEgWiB2YXJhcmdzXCIpO1xuIiArCisJCQkJIgl9XG4iICsKKwkJCQkiCXZvaWQgZm9v
MShaIHosIFkgLi4uIHkpIHtcbiIgKworCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihcImZvbzEg
WSB2YXJhcmdzXCIpO1xuIiArCisJCQkJIgl9XG4iICsKKwkJCQkiCXZvaWQgZm9vMihaIHosIFcg
Li4uIHcpIHtcbiIgKworCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihcImZvbzIgVyB2YXJhcmdz
XCIpO1xuIiArCisJCQkJIgl9XG4iICsKKwkJCQkiCXZvaWQgZm9vMihaIHosIFkgLi4uIHkpIHtc
biIgKworCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihcImZvbzIgWSB2YXJhcmdzXCIpO1xuIiAr
CisJCQkJIgl9XG4iICsKKwkJCQkiCXZvaWQgZm9vMyhBIGEsIFcgLi4uIHcpIHtcbiIgKworCQkJ
CSIJCVN5c3RlbS5vdXQucHJpbnRsbihcImZvbzMgVyB2YXJhcmdzXCIpO1xuIiArCisJCQkJIgl9
XG4iICsKKwkJCQkiCXZvaWQgZm9vMyhBIGEsIFkgLi4uIHkpIHtcbiIgKworCQkJCSIJCVN5c3Rl
bS5vdXQucHJpbnRsbihcImZvbzMgWSB2YXJhcmdzXCIpO1xuIiArCisJCQkJIgl9XG4iICsKKwkJ
CQkiCXZvaWQgZm9vNChXIHcpIHtcbiIgKworCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihcImZv
bzQgV1wiKTtcbiIgKworCQkJCSIJfVxuIiArCisJCQkJIgl2b2lkIGZvbzQoVyB3LCBBIC4uLiBh
KSB7XG4iICsKKwkJCQkiCQlTeXN0ZW0ub3V0LnByaW50bG4oXCJmb280IEEgdmFyYXJnc1wiKTtc
biIgKworCQkJCSIJfVxuIiArCisJCQkJIgl2b2lkIGZvbzUoVyB3KSB7XG4iICsKKwkJCQkiCQlT
eXN0ZW0ub3V0LnByaW50bG4oXCJmb281IFdcIik7XG4iICsKKwkJCQkiCX1cbiIgKworCQkJCSIJ
dm9pZCBmb281KFcgLi4uIHcpIHtcbiIgKworCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihcImZv
bzUgVyB2YXJhcmdzXCIpO1xuIiArCisJCQkJIgl9XG4iICsKKwkJCQkiCXZvaWQgZm9vNihXIC4u
LiB3KSB7XG4iICsKKwkJCQkiCQlTeXN0ZW0ub3V0LnByaW50bG4oXCJmb282IFcgdmFyYXJnc1wi
KTtcbiIgKworCQkJCSIJfVxuIiArCisJCQkJIgl2b2lkIGZvbzYoWSAuLi4geSkge1xuIiArCisJ
CQkJIgkJU3lzdGVtLm91dC5wcmludGxuKFwiZm9vNiBZIHZhcmFyZ3NcIik7XG4iICsKKwkJCQki
CX1cbiIgKworCQkJCSIgICB2b2lkIGZvbzcoU3RyaW5nIGZvcm1hdCwgT2JqZWN0IC4uLiBhcmdz
KSB7XG4iICsKKwkJCQkiCSAgICBTeXN0ZW0ub3V0LnByaW50bG4oXCJmb283IE9iamVjdCBWYXJh
cmdzXCIpO1xuIiArCisJCQkJIiAgIH1cbiIgKworCQkJCSIgICB2b2lkIGZvbzgoU3RyaW5nIC4u
LiBzKSB7XG4iICsKKwkJCQkiCSAgICBTeXN0ZW0ub3V0LnByaW50bG4oXCJmb284IFN0cmluZyBW
YXJhcmdzXCIpO1xuIiArCisJCQkJIiAgIH1cbiIgKyAKKwkJCQkiCXZvaWQgYmFyKCkge1xuIiAr
CisJCQkJIgkJZm9vKFwiZlwiKTtcbiIgKyAgIC8vIE9yaWdpbmFsIFRlc3QgQ2FzZSA6IEVycm9y
IHdpdGhvdXQgZml4CisJCQkJIgkJZm9vKFwiZlwiLCAxMik7XG4iICsKKwkJCQkiCQlmb28xKG5l
dyBaKCkpO1xuIiArCisJCQkJIgkJZm9vMihuZXcgWigpKTtcbiIgKworCQkJCSIJCWZvbzMobmV3
IEEoKSk7XG4iICsKKwkJCQkiCQlmb280KG5ldyBXKCkpO1xuIiArCisJCQkJIgkJZm9vNShuZXcg
VygpKTtcbiIgKworCQkJCSIJCWZvbzYobmV3IFcoKSk7XG4iICsKKwkJCQkiCQlmb282KG5ldyBZ
KCkpO1xuIiArCisJCQkJIiAgICAgICBmb283KFwiZlwiLCAxMik7XG4iICsKKwkJICAgICAgICAi
ICAgICAgIGZvbzgoXCJmXCIpO1xuIiArCisJCQkJIgl9XG4iICsKKwkJCQkiCXB1YmxpYyBzdGF0
aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKworCQkJCSIJCVggeCA9IG5ldyBYKCk7
XG4iICsKKwkJCQkiCQl4LmJhcigpO1xuIiArCisJCQkJIgl9XG4iICsKKwkJCQkifVxuIiwKKwkJ
CX0sCisJCQkiZm9vIFN0cmluZyBWYXJhcmdzXG4iICsKKwkJCSJmb28gT2JqZWN0IFZhcmFyZ3Nc
biIgKworCQkJImZvbzEgWiB2YXJhcmdzXG4iICsKKwkJCSJmb28yIFkgdmFyYXJnc1xuIiArCisJ
CQkiZm9vMyBZIHZhcmFyZ3NcbiIgKworCQkJImZvbzQgV1xuIiArCisJCQkiZm9vNSBXXG4iICsK
KwkJCSJmb282IFcgdmFyYXJnc1xuIiArCisJCQkiZm9vNiBZIHZhcmFyZ3NcbiIgKworCQkJImZv
bzcgT2JqZWN0IFZhcmFyZ3NcbiIgKworCQkJImZvbzggU3RyaW5nIFZhcmFyZ3MiKTsKKwl9CisK
KwkvL2h0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00Mzc5NzMs
IFsxLjhdW2NvbXBpbGVyXSBNaXNzaW5nIGltcGxlbWVudGF0aW9uIG9mIEpMUyAxNS4xMi4yLjUg
VGhpcmQgQnVsbGV0IC0gUGFydCAyCQorCXB1YmxpYyB2b2lkIHRlc3Q0Mzc5NzNhKCkgeworCQlp
ZiAodGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84KQorCQkJ
cmV0dXJuOworCQlydW5Db25mb3JtVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJYLmphdmEi
LAorCQkJImNsYXNzIFcge31cbiIgKworCQkJImNsYXNzIFkgZXh0ZW5kcyBXIHt9XG4iICsKKwkJ
CSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCSIJdm9pZCBmb28oVyB3LCBZIC4uLiB5KSB7XG4i
ICsKKwkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihcImZvbyBZIHZhcmFyZ3NcIik7XG4iICsKKwkJ
CSIgICB9XG4iICsKKwkJCSIJdm9pZCBmb28oVyAuLi4gdykge1xuIiArCisJCQkiCQlTeXN0ZW0u
b3V0LnByaW50bG4oXCJmb28gVyB2YXJhcmdzXCIpO1xuIiArCisJCQkiICAgfVxuIiArCisJCQki
CXZvaWQgYmFyKCkge1xuIiArCisJCQkiCQlmb28obmV3IFcoKSwgbmV3IFcoKSwgbmV3IFcoKSk7
XG4iICsKKworCQkJLy9FcnJvciB3aXRoIDEuOCB3aXRob3V0IGZpeCBmb3IgYWxsIHRoZXNlIHRo
cmVlIHRlc3QgY2FzZXMuCisJCQkiCQlmb28obmV3IFkoKSwgbmV3IFkoKSwgbmV3IFkoKSk7XG4i
ICsKKwkJCSIJCWZvbyhuZXcgVygpKTtcbiIgKworCQkJIgkJZm9vKG5ldyBZKCkpO1xuIiArCisJ
CQkiCX1cbiIgKworCQkJIglwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7
XG4iICsKKwkJCSIJCVggeCA9IG5ldyBYKCk7XG4iICsKKwkJCSIJCXguYmFyKCk7XG4iICsKKwkJ
CSIJfVxuIiArCisJCQkifVxuIn0sCisJCQkiZm9vIFcgdmFyYXJnc1xuIiArCisJCQkiZm9vIFkg
dmFyYXJnc1xuIiArCisJCQkiZm9vIFkgdmFyYXJnc1xuIiArCisJCQkiZm9vIFkgdmFyYXJncyIp
OworCX0KKworCS8vaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lk
PTQzNzk3MywgWzEuOF1bY29tcGlsZXJdIE1pc3NpbmcgaW1wbGVtZW50YXRpb24gb2YgSkxTIDE1
LjEyLjIuNSBUaGlyZCBCdWxsZXQgLSBQYXJ0IDIKKwkvL1RoZSBwYXJhbWV0ZXIgb2Ygb25lIG1l
dGhvZCBpcyBub3QgYSBzdWJ0eXBlIG9mIHRoZSBvdGhlci4KKwlwdWJsaWMgdm9pZCB0ZXN0NDM3
OTczYigpIHsKKwkJaWYgKHRoaXMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRz
LkpESzFfOCkKKwkJCXJldHVybjsKKwkJcnVuTmVnYXRpdmVUZXN0KAorCQluZXcgU3RyaW5nW10g
eworCQkJIlguamF2YSIsCisJCQkiY2xhc3MgVyB7fVxuIiArCisJCQkiY2xhc3MgQSB7fVxuIiAr
CisJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkiICAgIHZvaWQgZm9vKFcgLi4uIHcpIHt9
XG4iICsKKwkJCSIgICAgdm9pZCBmb28oVyB3LCBBIC4uLiBhKSB7fVxuIiArCisJCQkiICAgIHZv
aWQgYmFyKCkge1xuIiArCisJCQkiICAgICAgICBmb28obmV3IFcoKSk7IC8vIDEuOCBFcnJvcjog
QW1iaWd1b3VzIG1ldGhvZCBlcnJvclxuIiArCisJCQkiICAgIH1cbiIgKworCQkJIiAgICBwdWJs
aWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7fVxuIiArCisJCQkifVxuIn0sCisJ
CQkiLS0tLS0tLS0tLVxuIiArCisJCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDcpXG4i
ICsKKwkJCSIJZm9vKG5ldyBXKCkpOyAvLyAxLjggRXJyb3I6IEFtYmlndW91cyBtZXRob2QgZXJy
b3JcbiIgKworCQkJIgleXl5cbiIgKworCQkJIlRoZSBtZXRob2QgZm9vKFdbXSkgaXMgYW1iaWd1
b3VzIGZvciB0aGUgdHlwZSBYXG4iICsKKwkJCSItLS0tLS0tLS0tXG4iKTsKKwl9CisKKwkvLyBo
dHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDM3OTczLCBbMS44
XVtjb21waWxlcl0gTWlzc2luZyBpbXBsZW1lbnRhdGlvbiBvZiBKTFMgMTUuMTIuMi41IFRoaXJk
IEJ1bGxldCAtIFBhcnQgMgorCS8vIExhbWJkYSBmdW5jdGlvbnMKKwlwdWJsaWMgdm9pZCB0ZXN0
NDM3OTczYygpIHsKKwkJaWYgKHRoaXMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3Rh
bnRzLkpESzFfOCkKKwkJCXJldHVybjsKKwkJcnVuTmVnYXRpdmVUZXN0KAorCQluZXcgU3RyaW5n
W10geworCQkJIlguamF2YSIsCisJCQkiY2xhc3MgVyB7fVxuIiArCisJCQkiY2xhc3MgWSBleHRl
bmRzIFcge31cbiIgKworCQkJImNsYXNzIFogZXh0ZW5kcyBZIHt9XG4iICsKKwkJCSJjbGFzcyBB
e31cbiIgKworCQkJIlxuIiArCisJCQkiaW50ZXJmYWNlIEkxIHtcbiIgKworCQkJIgl2b2lkIGZv
byAoWSAuLi4geSk7IFxuIiArCisJCQkiCWRlZmF1bHQgdm9pZCBmb28gKFkgeSwgVyAuLi4gdykg
e31cbiIgKworCQkJIn1cbiIgKworCQkJIlxuIiArCisJCQkicHVibGljIGNsYXNzIFgge1xuIiAr
CisJCQkiCXZvaWQgYmFyKCkge1xuIiArCisJCQkiCQlJMSBpMSA9ICh4KSAtPiB7fTtcbiIgKwor
CQkJIgkJaTEuZm9vKG5ldyBZKCkpO1xuIiArCisJCQkiCX1cbiIgKworCQkJIn1cbiJ9LCIiKTsK
Kwl9CiB9ClwgTm8gbmV3bGluZSBhdCBlbmQgb2YgZmlsZQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xv
b2t1cC9TY29wZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhCmluZGV4IGJmMDcyZDQu
LmJhYWVkMWMgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YQorKysgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvbG9va3VwL1Njb3BlLmphdmEKQEAgLTQ0NTYsNiArNDQ1NiwxMyBAQCBwdWJsaWMgYWJzdHJh
Y3QgY2xhc3MgU2NvcGUgewogCQkJCQkJCQljb250aW51ZSBuZXh0SjsKIAkJCQkJCQl9CiAJCQkJ
CQl9CisJCQkJCQlpZiAobWJrLnR5cGVWYXJpYWJsZXMoKSA9PSBCaW5kaW5nLk5PX1RZUEVfVkFS
SUFCTEVTIC8vIE5vbiAtIGdlbmVyaWMKKwkJCQkJCQkJJiYgbGV2ZWxqID09IFZBUkFSR1NfQ09N
UEFUSUJMRSAmJiBsZXZlbGsgPT0gVkFSQVJHU19DT01QQVRJQkxFKSB7CisJCQkJCQkJVHlwZUJp
bmRpbmcgcyA9IEluZmVyZW5jZUNvbnRleHQxOC5nZXRQYXJhbWV0ZXIobWJqUGFyYW1ldGVycywg
YXJndW1lbnRUeXBlcy5sZW5ndGgsIHRydWUpOworCQkJCQkJCVR5cGVCaW5kaW5nIHQgPSBJbmZl
cmVuY2VDb250ZXh0MTguZ2V0UGFyYW1ldGVyKG1ia1BhcmFtZXRlcnMsIGFyZ3VtZW50VHlwZXMu
bGVuZ3RoLCB0cnVlKTsKKwkJCQkJCQlpZiAoIVR5cGVCaW5kaW5nLmVxdWFsc0VxdWFscyhzLCB0
KSAmJiB0LmlzU3VidHlwZU9mKHMpKQorCQkJCQkJCQljb250aW51ZSBuZXh0SjsKKwkJCQkJCX0K
IAkJCQkJfQogCQkJCX0KIAkJCQltb3JlU3BlY2lmaWNbY291bnQrK10gPSB2aXNpYmxlW2pdOwo=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>246888</attachid>
            <date>2014-09-09 09:58:00 -0400</date>
            <delta_ts>2014-10-15 05:25:05 -0400</delta_ts>
            <desc>Patch</desc>
            <filename>patch.patch</filename>
            <type>text/plain</type>
            <size>8904</size>
            <attacher name="shankha banerjee">shankhba</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1ZhcmFyZ3NUZXN0Lmph
dmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2Uv
amR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9WYXJhcmdzVGVzdC5qYXZhCmluZGV4
IDg2OGNhYTkuLjE3ZjA2OTUgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3Rz
LmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNz
aW9uL1ZhcmFyZ3NUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29t
cGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24v
VmFyYXJnc1Rlc3QuamF2YQpAQCAtMzQ4NSw0ICszNDg1LDIyNCBAQCBwdWJsaWMgY2xhc3MgVmFy
YXJnc1Rlc3QgZXh0ZW5kcyBBYnN0cmFjdENvbXBhcmFibGVUZXN0IHsKIAkJCX0sCiAJCQkiYSIp
OwogCX0KLX0KXCBObyBuZXdsaW5lIGF0IGVuZCBvZiBmaWxlCisKKwkvL2h0dHBzOi8vYnVncy5l
Y2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00Mzc5NzMsIFsxLjhdW2NvbXBpbGVyXSBN
aXNzaW5nIGltcGxlbWVudGF0aW9uIG9mIEpMUyAxNS4xMi4yLjUgVGhpcmQgQnVsbGV0IC0gUGFy
dCAyCisJcHVibGljIHZvaWQgdGVzdDQzNzk3MygpIHsKKwkJcnVuQ29uZm9ybVRlc3QoCisJCQlu
ZXcgU3RyaW5nW10geworCQkJCSJYLmphdmEiLAorCQkJCSJjbGFzcyBXIHt9XG4iICsKKwkJCQki
Y2xhc3MgWSBleHRlbmRzIFcge31cbiIgKworCQkJCSJjbGFzcyBaIGV4dGVuZHMgWSB7fVxuIiAr
CisJCQkJImNsYXNzIEF7fVxuIiArCisJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJCSIJ
dm9pZCBmb28oU3RyaW5nIGZvcm1hdCwgT2JqZWN0IC4uLiBhcmdzKSB7XG4iICsKKwkJCQkiCQlT
eXN0ZW0ub3V0LnByaW50bG4oXCJmb28gT2JqZWN0IFZhcmFyZ3NcIik7XG4iICsKKwkJCQkiCX1c
biIgKworCQkJCSIJdm9pZCBmb28oU3RyaW5nIC4uLiBzKSB7XG4iICsKKwkJCQkiCQlTeXN0ZW0u
b3V0LnByaW50bG4oXCJmb28gU3RyaW5nIFZhcmFyZ3NcIik7XG4iICsKKwkJCQkiCX1cbiIgKwor
CQkJCSIJdm9pZCBmb28xKFogLi4uIHopIHtcbiIgKworCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRs
bihcImZvbzEgWiB2YXJhcmdzXCIpO1xuIiArCisJCQkJIgl9XG4iICsKKwkJCQkiCXZvaWQgZm9v
MShaIHosIFkgLi4uIHkpIHtcbiIgKworCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihcImZvbzEg
WSB2YXJhcmdzXCIpO1xuIiArCisJCQkJIgl9XG4iICsKKwkJCQkiCXZvaWQgZm9vMihaIHosIFcg
Li4uIHcpIHtcbiIgKworCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihcImZvbzIgVyB2YXJhcmdz
XCIpO1xuIiArCisJCQkJIgl9XG4iICsKKwkJCQkiCXZvaWQgZm9vMihaIHosIFkgLi4uIHkpIHtc
biIgKworCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihcImZvbzIgWSB2YXJhcmdzXCIpO1xuIiAr
CisJCQkJIgl9XG4iICsKKwkJCQkiCXZvaWQgZm9vMyhBIGEsIFcgLi4uIHcpIHtcbiIgKworCQkJ
CSIJCVN5c3RlbS5vdXQucHJpbnRsbihcImZvbzMgVyB2YXJhcmdzXCIpO1xuIiArCisJCQkJIgl9
XG4iICsKKwkJCQkiCXZvaWQgZm9vMyhBIGEsIFkgLi4uIHkpIHtcbiIgKworCQkJCSIJCVN5c3Rl
bS5vdXQucHJpbnRsbihcImZvbzMgWSB2YXJhcmdzXCIpO1xuIiArCisJCQkJIgl9XG4iICsKKwkJ
CQkiCXZvaWQgZm9vNChXIHcpIHtcbiIgKworCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihcImZv
bzQgV1wiKTtcbiIgKworCQkJCSIJfVxuIiArCisJCQkJIgl2b2lkIGZvbzQoVyB3LCBBIC4uLiBh
KSB7XG4iICsKKwkJCQkiCQlTeXN0ZW0ub3V0LnByaW50bG4oXCJmb280IEEgdmFyYXJnc1wiKTtc
biIgKworCQkJCSIJfVxuIiArCisJCQkJIgl2b2lkIGZvbzUoVyB3KSB7XG4iICsKKwkJCQkiCQlT
eXN0ZW0ub3V0LnByaW50bG4oXCJmb281IFdcIik7XG4iICsKKwkJCQkiCX1cbiIgKworCQkJCSIJ
dm9pZCBmb281KFcgLi4uIHcpIHtcbiIgKworCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihcImZv
bzUgVyB2YXJhcmdzXCIpO1xuIiArCisJCQkJIgl9XG4iICsKKwkJCQkiCXZvaWQgZm9vNihXIC4u
LiB3KSB7XG4iICsKKwkJCQkiCQlTeXN0ZW0ub3V0LnByaW50bG4oXCJmb282IFcgdmFyYXJnc1wi
KTtcbiIgKworCQkJCSIJfVxuIiArCisJCQkJIgl2b2lkIGZvbzYoWSAuLi4geSkge1xuIiArCisJ
CQkJIgkJU3lzdGVtLm91dC5wcmludGxuKFwiZm9vNiBZIHZhcmFyZ3NcIik7XG4iICsKKwkJCQki
CX1cbiIgKworCQkJCSIgICB2b2lkIGZvbzcoU3RyaW5nIGZvcm1hdCwgT2JqZWN0IC4uLiBhcmdz
KSB7XG4iICsKKwkJCQkiCSAgICBTeXN0ZW0ub3V0LnByaW50bG4oXCJmb283IE9iamVjdCBWYXJh
cmdzXCIpO1xuIiArCisJCQkJIiAgIH1cbiIgKworCQkJCSIgICB2b2lkIGZvbzgoU3RyaW5nIC4u
LiBzKSB7XG4iICsKKwkJCQkiCSAgICBTeXN0ZW0ub3V0LnByaW50bG4oXCJmb284IFN0cmluZyBW
YXJhcmdzXCIpO1xuIiArCisJCQkJIiAgIH1cbiIgKworCQkJCSIJdm9pZCBiYXIoKSB7XG4iICsK
KwkJCQkiCQlmb28oXCJmXCIpO1xuIiArICAgLy8gT3JpZ2luYWwgVGVzdCBDYXNlIDogRXJyb3Ig
d2l0aG91dCBmaXgKKwkJCQkiCQlmb28oXCJmXCIsIDEyKTtcbiIgKworCQkJCSIJCWZvbzEobmV3
IFooKSk7XG4iICsKKwkJCQkiCQlmb28yKG5ldyBaKCkpO1xuIiArCisJCQkJIgkJZm9vMyhuZXcg
QSgpKTtcbiIgKworCQkJCSIJCWZvbzQobmV3IFcoKSk7XG4iICsKKwkJCQkiCQlmb281KG5ldyBX
KCkpO1xuIiArCisJCQkJIgkJZm9vNihuZXcgVygpKTtcbiIgKworCQkJCSIJCWZvbzYobmV3IFko
KSk7XG4iICsKKwkJCQkiICAgICAgIGZvbzcoXCJmXCIsIDEyKTtcbiIgKworCQkgICAgICAgICIg
ICAgICAgZm9vOChcImZcIik7XG4iICsKKwkJCQkiCX1cbiIgKworCQkJCSIJcHVibGljIHN0YXRp
YyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuIiArCisJCQkJIgkJWCB4ID0gbmV3IFgoKTtc
biIgKworCQkJCSIJCXguYmFyKCk7XG4iICsKKwkJCQkiCX1cbiIgKworCQkJCSJ9XG4iLAorCQkJ
fSwKKwkJCSJmb28gU3RyaW5nIFZhcmFyZ3NcbiIgKworCQkJImZvbyBPYmplY3QgVmFyYXJnc1xu
IiArCisJCQkiZm9vMSBaIHZhcmFyZ3NcbiIgKworCQkJImZvbzIgWSB2YXJhcmdzXG4iICsKKwkJ
CSJmb28zIFkgdmFyYXJnc1xuIiArCisJCQkiZm9vNCBXXG4iICsKKwkJCSJmb281IFdcbiIgKwor
CQkJImZvbzYgVyB2YXJhcmdzXG4iICsKKwkJCSJmb282IFkgdmFyYXJnc1xuIiArCisJCQkiZm9v
NyBPYmplY3QgVmFyYXJnc1xuIiArCisJCQkiZm9vOCBTdHJpbmcgVmFyYXJncyIpOworCX0KKwor
CS8vaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQzNzk3Mywg
WzEuOF1bY29tcGlsZXJdIE1pc3NpbmcgaW1wbGVtZW50YXRpb24gb2YgSkxTIDE1LjEyLjIuNSBU
aGlyZCBCdWxsZXQgLSBQYXJ0IDIKKwlwdWJsaWMgdm9pZCB0ZXN0NDM3OTczYSgpIHsKKwkJaWYg
KHRoaXMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCkKKwkJCXJl
dHVybjsKKwkJcnVuQ29uZm9ybVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwK
KwkJCSJjbGFzcyBXIHt9XG4iICsKKwkJCSJjbGFzcyBZIGV4dGVuZHMgVyB7fVxuIiArCisJCQki
cHVibGljIGNsYXNzIFgge1xuIiArCisJCQkiCXZvaWQgZm9vKFcgdywgWSAuLi4geSkge1xuIiAr
CisJCQkiCQlTeXN0ZW0ub3V0LnByaW50bG4oXCJmb28gWSB2YXJhcmdzXCIpO1xuIiArCisJCQki
ICAgfVxuIiArCisJCQkiCXZvaWQgZm9vKFcgLi4uIHcpIHtcbiIgKworCQkJIgkJU3lzdGVtLm91
dC5wcmludGxuKFwiZm9vIFcgdmFyYXJnc1wiKTtcbiIgKworCQkJIiAgIH1cbiIgKworCQkJIgl2
b2lkIGJhcigpIHtcbiIgKworCQkJIgkJZm9vKG5ldyBXKCksIG5ldyBXKCksIG5ldyBXKCkpO1xu
IiArCisKKwkJCS8vRXJyb3Igd2l0aCAxLjggd2l0aG91dCBmaXggZm9yIGFsbCB0aGVzZSB0aHJl
ZSB0ZXN0IGNhc2VzLgorCQkJIgkJZm9vKG5ldyBZKCksIG5ldyBZKCksIG5ldyBZKCkpO1xuIiAr
CisJCQkiCQlmb28obmV3IFcoKSk7XG4iICsKKwkJCSIJCWZvbyhuZXcgWSgpKTtcbiIgKworCQkJ
Igl9XG4iICsKKwkJCSIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xu
IiArCisJCQkiCQlYIHggPSBuZXcgWCgpO1xuIiArCisJCQkiCQl4LmJhcigpO1xuIiArCisJCQki
CX1cbiIgKworCQkJIn1cbiJ9LAorCQkJImZvbyBXIHZhcmFyZ3NcbiIgKworCQkJImZvbyBZIHZh
cmFyZ3NcbiIgKworCQkJImZvbyBZIHZhcmFyZ3NcbiIgKworCQkJImZvbyBZIHZhcmFyZ3MiKTsK
Kwl9CisKKwkvL2h0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00
Mzc5NzMsIFsxLjhdW2NvbXBpbGVyXSBNaXNzaW5nIGltcGxlbWVudGF0aW9uIG9mIEpMUyAxNS4x
Mi4yLjUgVGhpcmQgQnVsbGV0IC0gUGFydCAyCisJLy9UaGUgcGFyYW1ldGVyIG9mIG9uZSBtZXRo
b2QgaXMgbm90IGEgc3VidHlwZSBvZiB0aGUgb3RoZXIuCisJcHVibGljIHZvaWQgdGVzdDQzNzk3
M2IoKSB7CisJCWlmICh0aGlzLmNvbXBsaWFuY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5K
REsxXzgpCisJCQlyZXR1cm47CisJCXJ1bk5lZ2F0aXZlVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsK
KwkJCSJYLmphdmEiLAorCQkJImNsYXNzIFcge31cbiIgKworCQkJImNsYXNzIEEge31cbiIgKwor
CQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJIiAgICB2b2lkIGZvbyhXIC4uLiB3KSB7fVxu
IiArCisJCQkiICAgIHZvaWQgZm9vKFcgdywgQSAuLi4gYSkge31cbiIgKworCQkJIiAgICB2b2lk
IGJhcigpIHtcbiIgKworCQkJIiAgICAgICAgZm9vKG5ldyBXKCkpOyAvLyAxLjggRXJyb3I6IEFt
YmlndW91cyBtZXRob2QgZXJyb3JcbiIgKworCQkJIiAgICB9XG4iICsKKwkJCSIgICAgcHVibGlj
IHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge31cbiIgKworCQkJIn1cbiJ9LAorCQkJ
Ii0tLS0tLS0tLS1cbiIgKworCQkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA3KVxuIiAr
CisJCQkiCWZvbyhuZXcgVygpKTsgLy8gMS44IEVycm9yOiBBbWJpZ3VvdXMgbWV0aG9kIGVycm9y
XG4iICsKKwkJCSIJXl5eXG4iICsKKwkJCSJUaGUgbWV0aG9kIGZvbyhXW10pIGlzIGFtYmlndW91
cyBmb3IgdGhlIHR5cGUgWFxuIiArCisJCQkiLS0tLS0tLS0tLVxuIik7CisJfQorCisJLy8gaHR0
cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQzNzk3MywgWzEuOF1b
Y29tcGlsZXJdIE1pc3NpbmcgaW1wbGVtZW50YXRpb24gb2YgSkxTIDE1LjEyLjIuNSBUaGlyZCBC
dWxsZXQgLSBQYXJ0IDIKKwkvLyBMYW1iZGEgZnVuY3Rpb25zCisJcHVibGljIHZvaWQgdGVzdDQz
Nzk3M2MoKSB7CisJCWlmICh0aGlzLmNvbXBsaWFuY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50
cy5KREsxXzgpCisJCQlyZXR1cm47CisJCXJ1bk5lZ2F0aXZlVGVzdCgKKwkJbmV3IFN0cmluZ1td
IHsKKwkJCSJYLmphdmEiLAorCQkJImNsYXNzIFcge31cbiIgKworCQkJImNsYXNzIFkgZXh0ZW5k
cyBXIHt9XG4iICsKKwkJCSJjbGFzcyBaIGV4dGVuZHMgWSB7fVxuIiArCisJCQkiY2xhc3MgQXt9
XG4iICsKKwkJCSJcbiIgKworCQkJImludGVyZmFjZSBJMSB7XG4iICsKKwkJCSIJdm9pZCBmb28g
KFkgLi4uIHkpOyBcbiIgKworCQkJIglkZWZhdWx0IHZvaWQgZm9vIChZIHksIFcgLi4uIHcpIHt9
XG4iICsKKwkJCSJ9XG4iICsKKwkJCSJcbiIgKworCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKwor
CQkJIgl2b2lkIGJhcigpIHtcbiIgKworCQkJIgkJSTEgaTEgPSAoeCkgLT4ge307XG4iICsKKwkJ
CSIJCWkxLmZvbyhuZXcgWSgpKTtcbiIgKworCQkJIgl9XG4iICsKKwkJCSJ9XG4ifSwiIik7CisJ
fQorCisJLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQz
Nzk3MywgWzEuOF1bY29tcGlsZXJdIE1pc3NpbmcgaW1wbGVtZW50YXRpb24gb2YgSkxTIDE1LjEy
LjIuNSBUaGlyZCBCdWxsZXQgLSBQYXJ0IDIKKwkvLyBPcmlnaW5hbCBUZXN0IENhc2UgLSBDb21t
ZW50IDAKKwlwdWJsaWMgdm9pZCB0ZXN0NDM3OTczZCgpIHsKKwkJaWYgKHRoaXMuY29tcGxpYW5j
ZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCkKKwkJCXJldHVybjsKKwkJcnVuQ29u
Zm9ybVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiSnVuazE2LmphdmEiLAorCQkJInB1Ymxp
YyBjbGFzcyBKdW5rMTYge1xuIiArCisJCQkiICAgIHB1YmxpYyBzdGF0aWMgU3RyaW5nIGp1bmso
U3RyaW5nIGZvcm1hdCwgT2JqZWN0Li4uIGFyZ3MpIHtcbiIgKworCQkJIiAgICAgICAgcmV0dXJu
IG51bGw7XG4iICsKKwkJCSIgICAgfVxuIiArCisJCQkiICAgIHB1YmxpYyBzdGF0aWMgU3RyaW5n
IGp1bmsoU3RyaW5nLi4uIHMpIHtcbiIgKworCQkJIiAgICAgICAgcmV0dXJuIG51bGw7XG4iICsK
KwkJCSIgICAgfVxuIiArCisJCQkiICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1td
IGFyZ3MpIHtcbiIgKworCQkJIiAgICAgICAgLy8gQ09NUElMRSBFUlJPUiBJTiBFQ0xJUFNFIChu
b25lIGluIEpESykgV0lUSE9VVCBGSVhcbiIgKworCQkJIiAgICAgICAganVuayhcImZyZWRcIik7
XG4iICsKKwkJCSIgICAgICAgIC8vTk8gQ09NUElMRSBFUlJPUlxuIiArCisJCQkiICAgICAgICBq
dW5rKFwiZnJlZFwiLCAxMik7XG4iICsKKwkJCSIgICAgfVxuIiArCisJCQkifVxuIiB9KTsKKwl9
CisKKwkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDQz
NTk2LCBbMS44XVtjb21waWxlcl0gRmFpbHVyZSBmb3Igb3ZlcmxvYWQgcmVzb2x1dGlvbiBpbiBj
YXNlIG9mIEdlbmVyaWNzIGFuZCBWYXJhZ3MKKwlwdWJsaWMgdm9pZCBfdGVzdDQ0MzU5NigpIHsK
KwkJaWYgKHRoaXMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCkK
KwkJCXJldHVybjsKKwkJcnVuQ29uZm9ybVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiQ29s
bGVjdGlvbnMyLmphdmEiLAorCQkJInB1YmxpYyBmaW5hbCBjbGFzcyBDb2xsZWN0aW9uczIge1xu
IiArCisJCQkiICAgIHN0YXRpYyBpbnRlcmZhY2UgUHJlZGljYXRlPFQ+IHsgYm9vbGVhbiB0ZXN0
KFQgb2JqZWN0KTsgfVxuIiArCisJCQkiICAgIHB1YmxpYyBzdGF0aWMgPFQ+IFByZWRpY2F0ZTxU
PiBpbihQcmVkaWNhdGU8PyBleHRlbmRzIFQ+IGFyZykgeyByZXR1cm4gbnVsbDsgfVxuIiArCisJ
CQkiICAgIHB1YmxpYyBzdGF0aWMgPFQ+IFByZWRpY2F0ZTxUPiBhbmQoUHJlZGljYXRlPD8gc3Vw
ZXIgVD4uLi4gYXJnKSB7IHJldHVybiBudWxsOyB9XG4iICsKKwkJCSIgICAgcHVibGljIHN0YXRp
YyA8VD4gUHJlZGljYXRlPFQ+IGFuZChQcmVkaWNhdGU8PyBzdXBlciBUPiBhcmcwLCBQcmVkaWNh
dGU8PyBzdXBlciBUPiBhcmcxKSB7IHJldHVybiBudWxsOyB9XG4iICsKKwkJCSIgICAgc3RhdGlj
IGNsYXNzIEZpbHRlcmVkQ29sbGVjdGlvbjxFPiB7XG4iICsKKwkJCSIgICAgICAgIFByZWRpY2F0
ZTw/IHN1cGVyIEU+IHByZWRpY2F0ZTtcbiIgKworCQkJIiAgICAgICAgcHVibGljIHZvaWQgZXJy
b3IoUHJlZGljYXRlPD8+IGFyZykgeyBhbmQocHJlZGljYXRlLCBpbihhcmcpKTsgfSAvLyBubyBj
b21waWxlXG4iICsKKwkJCSIgICAgfVxuIiArCisJCQkifVxuIn0pOworCX0KK30KZGlmZiAtLWdp
dCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YQpp
bmRleCAxZjE2NTU3Li5jZDRiMjUyIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmph
dmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhCkBAIC00NDYyLDYgKzQ0NjIsMTMgQEAg
cHVibGljIGFic3RyYWN0IGNsYXNzIFNjb3BlIHsKIAkJCQkJCQkJY29udGludWUgbmV4dEo7CiAJ
CQkJCQkJfQogCQkJCQkJfQorCQkJCQkJaWYgKG1iay50eXBlVmFyaWFibGVzKCkgPT0gQmluZGlu
Zy5OT19UWVBFX1ZBUklBQkxFUyAvLyBOb24gLSBnZW5lcmljCisJCQkJCQkJCSYmIGxldmVsaiA9
PSBWQVJBUkdTX0NPTVBBVElCTEUgJiYgbGV2ZWxrID09IFZBUkFSR1NfQ09NUEFUSUJMRSkgewor
CQkJCQkJCVR5cGVCaW5kaW5nIHMgPSBJbmZlcmVuY2VDb250ZXh0MTguZ2V0UGFyYW1ldGVyKG1i
alBhcmFtZXRlcnMsIGFyZ3VtZW50VHlwZXMubGVuZ3RoLCB0cnVlKTsKKwkJCQkJCQlUeXBlQmlu
ZGluZyB0ID0gSW5mZXJlbmNlQ29udGV4dDE4LmdldFBhcmFtZXRlcihtYmtQYXJhbWV0ZXJzLCBh
cmd1bWVudFR5cGVzLmxlbmd0aCwgdHJ1ZSk7CisJCQkJCQkJaWYgKCFUeXBlQmluZGluZy5lcXVh
bHNFcXVhbHMocywgdCkgJiYgdC5pc1N1YnR5cGVPZihzKSkKKwkJCQkJCQkJY29udGludWUgbmV4
dEo7CisJCQkJCQl9CiAJCQkJCX0KIAkJCQl9CiAJCQkJbW9yZVNwZWNpZmljW2NvdW50KytdID0g
dmlzaWJsZVtqXTsK
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>247887</attachid>
            <date>2014-10-15 05:25:00 -0400</date>
            <delta_ts>2014-10-15 05:25:05 -0400</delta_ts>
            <desc>Patch</desc>
            <filename>patch.patch</filename>
            <type>text/plain</type>
            <size>8826</size>
            <attacher name="shankha banerjee">shankhba</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1ZhcmFyZ3NUZXN0Lmph
dmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2Uv
amR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9WYXJhcmdzVGVzdC5qYXZhCmluZGV4
IDg2OGNhYTkuLjE3ZjA2OTUgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3Rz
LmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNz
aW9uL1ZhcmFyZ3NUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29t
cGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24v
VmFyYXJnc1Rlc3QuamF2YQpAQCAtMzQ4NSw0ICszNDg1LDIyNCBAQCBwdWJsaWMgY2xhc3MgVmFy
YXJnc1Rlc3QgZXh0ZW5kcyBBYnN0cmFjdENvbXBhcmFibGVUZXN0IHsKIAkJCX0sCiAJCQkiYSIp
OwogCX0KLX0KXCBObyBuZXdsaW5lIGF0IGVuZCBvZiBmaWxlCisKKwkvL2h0dHBzOi8vYnVncy5l
Y2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00Mzc5NzMsIFsxLjhdW2NvbXBpbGVyXSBN
aXNzaW5nIGltcGxlbWVudGF0aW9uIG9mIEpMUyAxNS4xMi4yLjUgVGhpcmQgQnVsbGV0IC0gUGFy
dCAyCisJcHVibGljIHZvaWQgdGVzdDQzNzk3MygpIHsKKwkJcnVuQ29uZm9ybVRlc3QoCisJCQlu
ZXcgU3RyaW5nW10geworCQkJCSJYLmphdmEiLAorCQkJCSJjbGFzcyBXIHt9XG4iICsKKwkJCQki
Y2xhc3MgWSBleHRlbmRzIFcge31cbiIgKworCQkJCSJjbGFzcyBaIGV4dGVuZHMgWSB7fVxuIiAr
CisJCQkJImNsYXNzIEF7fVxuIiArCisJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJCSIJ
dm9pZCBmb28oU3RyaW5nIGZvcm1hdCwgT2JqZWN0IC4uLiBhcmdzKSB7XG4iICsKKwkJCQkiCQlT
eXN0ZW0ub3V0LnByaW50bG4oXCJmb28gT2JqZWN0IFZhcmFyZ3NcIik7XG4iICsKKwkJCQkiCX1c
biIgKworCQkJCSIJdm9pZCBmb28oU3RyaW5nIC4uLiBzKSB7XG4iICsKKwkJCQkiCQlTeXN0ZW0u
b3V0LnByaW50bG4oXCJmb28gU3RyaW5nIFZhcmFyZ3NcIik7XG4iICsKKwkJCQkiCX1cbiIgKwor
CQkJCSIJdm9pZCBmb28xKFogLi4uIHopIHtcbiIgKworCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRs
bihcImZvbzEgWiB2YXJhcmdzXCIpO1xuIiArCisJCQkJIgl9XG4iICsKKwkJCQkiCXZvaWQgZm9v
MShaIHosIFkgLi4uIHkpIHtcbiIgKworCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihcImZvbzEg
WSB2YXJhcmdzXCIpO1xuIiArCisJCQkJIgl9XG4iICsKKwkJCQkiCXZvaWQgZm9vMihaIHosIFcg
Li4uIHcpIHtcbiIgKworCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihcImZvbzIgVyB2YXJhcmdz
XCIpO1xuIiArCisJCQkJIgl9XG4iICsKKwkJCQkiCXZvaWQgZm9vMihaIHosIFkgLi4uIHkpIHtc
biIgKworCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihcImZvbzIgWSB2YXJhcmdzXCIpO1xuIiAr
CisJCQkJIgl9XG4iICsKKwkJCQkiCXZvaWQgZm9vMyhBIGEsIFcgLi4uIHcpIHtcbiIgKworCQkJ
CSIJCVN5c3RlbS5vdXQucHJpbnRsbihcImZvbzMgVyB2YXJhcmdzXCIpO1xuIiArCisJCQkJIgl9
XG4iICsKKwkJCQkiCXZvaWQgZm9vMyhBIGEsIFkgLi4uIHkpIHtcbiIgKworCQkJCSIJCVN5c3Rl
bS5vdXQucHJpbnRsbihcImZvbzMgWSB2YXJhcmdzXCIpO1xuIiArCisJCQkJIgl9XG4iICsKKwkJ
CQkiCXZvaWQgZm9vNChXIHcpIHtcbiIgKworCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihcImZv
bzQgV1wiKTtcbiIgKworCQkJCSIJfVxuIiArCisJCQkJIgl2b2lkIGZvbzQoVyB3LCBBIC4uLiBh
KSB7XG4iICsKKwkJCQkiCQlTeXN0ZW0ub3V0LnByaW50bG4oXCJmb280IEEgdmFyYXJnc1wiKTtc
biIgKworCQkJCSIJfVxuIiArCisJCQkJIgl2b2lkIGZvbzUoVyB3KSB7XG4iICsKKwkJCQkiCQlT
eXN0ZW0ub3V0LnByaW50bG4oXCJmb281IFdcIik7XG4iICsKKwkJCQkiCX1cbiIgKworCQkJCSIJ
dm9pZCBmb281KFcgLi4uIHcpIHtcbiIgKworCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihcImZv
bzUgVyB2YXJhcmdzXCIpO1xuIiArCisJCQkJIgl9XG4iICsKKwkJCQkiCXZvaWQgZm9vNihXIC4u
LiB3KSB7XG4iICsKKwkJCQkiCQlTeXN0ZW0ub3V0LnByaW50bG4oXCJmb282IFcgdmFyYXJnc1wi
KTtcbiIgKworCQkJCSIJfVxuIiArCisJCQkJIgl2b2lkIGZvbzYoWSAuLi4geSkge1xuIiArCisJ
CQkJIgkJU3lzdGVtLm91dC5wcmludGxuKFwiZm9vNiBZIHZhcmFyZ3NcIik7XG4iICsKKwkJCQki
CX1cbiIgKworCQkJCSIgICB2b2lkIGZvbzcoU3RyaW5nIGZvcm1hdCwgT2JqZWN0IC4uLiBhcmdz
KSB7XG4iICsKKwkJCQkiCSAgICBTeXN0ZW0ub3V0LnByaW50bG4oXCJmb283IE9iamVjdCBWYXJh
cmdzXCIpO1xuIiArCisJCQkJIiAgIH1cbiIgKworCQkJCSIgICB2b2lkIGZvbzgoU3RyaW5nIC4u
LiBzKSB7XG4iICsKKwkJCQkiCSAgICBTeXN0ZW0ub3V0LnByaW50bG4oXCJmb284IFN0cmluZyBW
YXJhcmdzXCIpO1xuIiArCisJCQkJIiAgIH1cbiIgKworCQkJCSIJdm9pZCBiYXIoKSB7XG4iICsK
KwkJCQkiCQlmb28oXCJmXCIpO1xuIiArICAgLy8gT3JpZ2luYWwgVGVzdCBDYXNlIDogRXJyb3Ig
d2l0aG91dCBmaXgKKwkJCQkiCQlmb28oXCJmXCIsIDEyKTtcbiIgKworCQkJCSIJCWZvbzEobmV3
IFooKSk7XG4iICsKKwkJCQkiCQlmb28yKG5ldyBaKCkpO1xuIiArCisJCQkJIgkJZm9vMyhuZXcg
QSgpKTtcbiIgKworCQkJCSIJCWZvbzQobmV3IFcoKSk7XG4iICsKKwkJCQkiCQlmb281KG5ldyBX
KCkpO1xuIiArCisJCQkJIgkJZm9vNihuZXcgVygpKTtcbiIgKworCQkJCSIJCWZvbzYobmV3IFko
KSk7XG4iICsKKwkJCQkiICAgICAgIGZvbzcoXCJmXCIsIDEyKTtcbiIgKworCQkgICAgICAgICIg
ICAgICAgZm9vOChcImZcIik7XG4iICsKKwkJCQkiCX1cbiIgKworCQkJCSIJcHVibGljIHN0YXRp
YyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuIiArCisJCQkJIgkJWCB4ID0gbmV3IFgoKTtc
biIgKworCQkJCSIJCXguYmFyKCk7XG4iICsKKwkJCQkiCX1cbiIgKworCQkJCSJ9XG4iLAorCQkJ
fSwKKwkJCSJmb28gU3RyaW5nIFZhcmFyZ3NcbiIgKworCQkJImZvbyBPYmplY3QgVmFyYXJnc1xu
IiArCisJCQkiZm9vMSBaIHZhcmFyZ3NcbiIgKworCQkJImZvbzIgWSB2YXJhcmdzXG4iICsKKwkJ
CSJmb28zIFkgdmFyYXJnc1xuIiArCisJCQkiZm9vNCBXXG4iICsKKwkJCSJmb281IFdcbiIgKwor
CQkJImZvbzYgVyB2YXJhcmdzXG4iICsKKwkJCSJmb282IFkgdmFyYXJnc1xuIiArCisJCQkiZm9v
NyBPYmplY3QgVmFyYXJnc1xuIiArCisJCQkiZm9vOCBTdHJpbmcgVmFyYXJncyIpOworCX0KKwor
CS8vaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQzNzk3Mywg
WzEuOF1bY29tcGlsZXJdIE1pc3NpbmcgaW1wbGVtZW50YXRpb24gb2YgSkxTIDE1LjEyLjIuNSBU
aGlyZCBCdWxsZXQgLSBQYXJ0IDIKKwlwdWJsaWMgdm9pZCB0ZXN0NDM3OTczYSgpIHsKKwkJaWYg
KHRoaXMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCkKKwkJCXJl
dHVybjsKKwkJcnVuQ29uZm9ybVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwK
KwkJCSJjbGFzcyBXIHt9XG4iICsKKwkJCSJjbGFzcyBZIGV4dGVuZHMgVyB7fVxuIiArCisJCQki
cHVibGljIGNsYXNzIFgge1xuIiArCisJCQkiCXZvaWQgZm9vKFcgdywgWSAuLi4geSkge1xuIiAr
CisJCQkiCQlTeXN0ZW0ub3V0LnByaW50bG4oXCJmb28gWSB2YXJhcmdzXCIpO1xuIiArCisJCQki
ICAgfVxuIiArCisJCQkiCXZvaWQgZm9vKFcgLi4uIHcpIHtcbiIgKworCQkJIgkJU3lzdGVtLm91
dC5wcmludGxuKFwiZm9vIFcgdmFyYXJnc1wiKTtcbiIgKworCQkJIiAgIH1cbiIgKworCQkJIgl2
b2lkIGJhcigpIHtcbiIgKworCQkJIgkJZm9vKG5ldyBXKCksIG5ldyBXKCksIG5ldyBXKCkpO1xu
IiArCisKKwkJCS8vRXJyb3Igd2l0aCAxLjggd2l0aG91dCBmaXggZm9yIGFsbCB0aGVzZSB0aHJl
ZSB0ZXN0IGNhc2VzLgorCQkJIgkJZm9vKG5ldyBZKCksIG5ldyBZKCksIG5ldyBZKCkpO1xuIiAr
CisJCQkiCQlmb28obmV3IFcoKSk7XG4iICsKKwkJCSIJCWZvbyhuZXcgWSgpKTtcbiIgKworCQkJ
Igl9XG4iICsKKwkJCSIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xu
IiArCisJCQkiCQlYIHggPSBuZXcgWCgpO1xuIiArCisJCQkiCQl4LmJhcigpO1xuIiArCisJCQki
CX1cbiIgKworCQkJIn1cbiJ9LAorCQkJImZvbyBXIHZhcmFyZ3NcbiIgKworCQkJImZvbyBZIHZh
cmFyZ3NcbiIgKworCQkJImZvbyBZIHZhcmFyZ3NcbiIgKworCQkJImZvbyBZIHZhcmFyZ3MiKTsK
Kwl9CisKKwkvL2h0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00
Mzc5NzMsIFsxLjhdW2NvbXBpbGVyXSBNaXNzaW5nIGltcGxlbWVudGF0aW9uIG9mIEpMUyAxNS4x
Mi4yLjUgVGhpcmQgQnVsbGV0IC0gUGFydCAyCisJLy9UaGUgcGFyYW1ldGVyIG9mIG9uZSBtZXRo
b2QgaXMgbm90IGEgc3VidHlwZSBvZiB0aGUgb3RoZXIuCisJcHVibGljIHZvaWQgdGVzdDQzNzk3
M2IoKSB7CisJCWlmICh0aGlzLmNvbXBsaWFuY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5K
REsxXzgpCisJCQlyZXR1cm47CisJCXJ1bk5lZ2F0aXZlVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsK
KwkJCSJYLmphdmEiLAorCQkJImNsYXNzIFcge31cbiIgKworCQkJImNsYXNzIEEge31cbiIgKwor
CQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJIiAgICB2b2lkIGZvbyhXIC4uLiB3KSB7fVxu
IiArCisJCQkiICAgIHZvaWQgZm9vKFcgdywgQSAuLi4gYSkge31cbiIgKworCQkJIiAgICB2b2lk
IGJhcigpIHtcbiIgKworCQkJIiAgICAgICAgZm9vKG5ldyBXKCkpOyAvLyAxLjggRXJyb3I6IEFt
YmlndW91cyBtZXRob2QgZXJyb3JcbiIgKworCQkJIiAgICB9XG4iICsKKwkJCSIgICAgcHVibGlj
IHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge31cbiIgKworCQkJIn1cbiJ9LAorCQkJ
Ii0tLS0tLS0tLS1cbiIgKworCQkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA3KVxuIiAr
CisJCQkiCWZvbyhuZXcgVygpKTsgLy8gMS44IEVycm9yOiBBbWJpZ3VvdXMgbWV0aG9kIGVycm9y
XG4iICsKKwkJCSIJXl5eXG4iICsKKwkJCSJUaGUgbWV0aG9kIGZvbyhXW10pIGlzIGFtYmlndW91
cyBmb3IgdGhlIHR5cGUgWFxuIiArCisJCQkiLS0tLS0tLS0tLVxuIik7CisJfQorCisJLy8gaHR0
cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQzNzk3MywgWzEuOF1b
Y29tcGlsZXJdIE1pc3NpbmcgaW1wbGVtZW50YXRpb24gb2YgSkxTIDE1LjEyLjIuNSBUaGlyZCBC
dWxsZXQgLSBQYXJ0IDIKKwkvLyBMYW1iZGEgZnVuY3Rpb25zCisJcHVibGljIHZvaWQgdGVzdDQz
Nzk3M2MoKSB7CisJCWlmICh0aGlzLmNvbXBsaWFuY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50
cy5KREsxXzgpCisJCQlyZXR1cm47CisJCXJ1bk5lZ2F0aXZlVGVzdCgKKwkJbmV3IFN0cmluZ1td
IHsKKwkJCSJYLmphdmEiLAorCQkJImNsYXNzIFcge31cbiIgKworCQkJImNsYXNzIFkgZXh0ZW5k
cyBXIHt9XG4iICsKKwkJCSJjbGFzcyBaIGV4dGVuZHMgWSB7fVxuIiArCisJCQkiY2xhc3MgQXt9
XG4iICsKKwkJCSJcbiIgKworCQkJImludGVyZmFjZSBJMSB7XG4iICsKKwkJCSIJdm9pZCBmb28g
KFkgLi4uIHkpOyBcbiIgKworCQkJIglkZWZhdWx0IHZvaWQgZm9vIChZIHksIFcgLi4uIHcpIHt9
XG4iICsKKwkJCSJ9XG4iICsKKwkJCSJcbiIgKworCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKwor
CQkJIgl2b2lkIGJhcigpIHtcbiIgKworCQkJIgkJSTEgaTEgPSAoeCkgLT4ge307XG4iICsKKwkJ
CSIJCWkxLmZvbyhuZXcgWSgpKTtcbiIgKworCQkJIgl9XG4iICsKKwkJCSJ9XG4ifSwiIik7CisJ
fQorCisJLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQz
Nzk3MywgWzEuOF1bY29tcGlsZXJdIE1pc3NpbmcgaW1wbGVtZW50YXRpb24gb2YgSkxTIDE1LjEy
LjIuNSBUaGlyZCBCdWxsZXQgLSBQYXJ0IDIKKwkvLyBPcmlnaW5hbCBUZXN0IENhc2UgLSBDb21t
ZW50IDAKKwlwdWJsaWMgdm9pZCB0ZXN0NDM3OTczZCgpIHsKKwkJaWYgKHRoaXMuY29tcGxpYW5j
ZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCkKKwkJCXJldHVybjsKKwkJcnVuQ29u
Zm9ybVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiSnVuazE2LmphdmEiLAorCQkJInB1Ymxp
YyBjbGFzcyBKdW5rMTYge1xuIiArCisJCQkiICAgIHB1YmxpYyBzdGF0aWMgU3RyaW5nIGp1bmso
U3RyaW5nIGZvcm1hdCwgT2JqZWN0Li4uIGFyZ3MpIHtcbiIgKworCQkJIiAgICAgICAgcmV0dXJu
IG51bGw7XG4iICsKKwkJCSIgICAgfVxuIiArCisJCQkiICAgIHB1YmxpYyBzdGF0aWMgU3RyaW5n
IGp1bmsoU3RyaW5nLi4uIHMpIHtcbiIgKworCQkJIiAgICAgICAgcmV0dXJuIG51bGw7XG4iICsK
KwkJCSIgICAgfVxuIiArCisJCQkiICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1td
IGFyZ3MpIHtcbiIgKworCQkJIiAgICAgICAgLy8gQ09NUElMRSBFUlJPUiBJTiBFQ0xJUFNFIChu
b25lIGluIEpESykgV0lUSE9VVCBGSVhcbiIgKworCQkJIiAgICAgICAganVuayhcImZyZWRcIik7
XG4iICsKKwkJCSIgICAgICAgIC8vTk8gQ09NUElMRSBFUlJPUlxuIiArCisJCQkiICAgICAgICBq
dW5rKFwiZnJlZFwiLCAxMik7XG4iICsKKwkJCSIgICAgfVxuIiArCisJCQkifVxuIiB9KTsKKwl9
CisKKwkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDQz
NTk2LCBbMS44XVtjb21waWxlcl0gRmFpbHVyZSBmb3Igb3ZlcmxvYWQgcmVzb2x1dGlvbiBpbiBj
YXNlIG9mIEdlbmVyaWNzIGFuZCBWYXJhZ3MKKwlwdWJsaWMgdm9pZCBfdGVzdDQ0MzU5NigpIHsK
KwkJaWYgKHRoaXMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCkK
KwkJCXJldHVybjsKKwkJcnVuQ29uZm9ybVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiQ29s
bGVjdGlvbnMyLmphdmEiLAorCQkJInB1YmxpYyBmaW5hbCBjbGFzcyBDb2xsZWN0aW9uczIge1xu
IiArCisJCQkiICAgIHN0YXRpYyBpbnRlcmZhY2UgUHJlZGljYXRlPFQ+IHsgYm9vbGVhbiB0ZXN0
KFQgb2JqZWN0KTsgfVxuIiArCisJCQkiICAgIHB1YmxpYyBzdGF0aWMgPFQ+IFByZWRpY2F0ZTxU
PiBpbihQcmVkaWNhdGU8PyBleHRlbmRzIFQ+IGFyZykgeyByZXR1cm4gbnVsbDsgfVxuIiArCisJ
CQkiICAgIHB1YmxpYyBzdGF0aWMgPFQ+IFByZWRpY2F0ZTxUPiBhbmQoUHJlZGljYXRlPD8gc3Vw
ZXIgVD4uLi4gYXJnKSB7IHJldHVybiBudWxsOyB9XG4iICsKKwkJCSIgICAgcHVibGljIHN0YXRp
YyA8VD4gUHJlZGljYXRlPFQ+IGFuZChQcmVkaWNhdGU8PyBzdXBlciBUPiBhcmcwLCBQcmVkaWNh
dGU8PyBzdXBlciBUPiBhcmcxKSB7IHJldHVybiBudWxsOyB9XG4iICsKKwkJCSIgICAgc3RhdGlj
IGNsYXNzIEZpbHRlcmVkQ29sbGVjdGlvbjxFPiB7XG4iICsKKwkJCSIgICAgICAgIFByZWRpY2F0
ZTw/IHN1cGVyIEU+IHByZWRpY2F0ZTtcbiIgKworCQkJIiAgICAgICAgcHVibGljIHZvaWQgZXJy
b3IoUHJlZGljYXRlPD8+IGFyZykgeyBhbmQocHJlZGljYXRlLCBpbihhcmcpKTsgfSAvLyBubyBj
b21waWxlXG4iICsKKwkJCSIgICAgfVxuIiArCisJCQkifVxuIn0pOworCX0KK30KZGlmZiAtLWdp
dCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YQpp
bmRleCBjOWYzZTkwLi5jYjZlNTRiIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmph
dmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhCkBAIC00NDU2LDYgKzQ0NTYsMTIgQEAg
cHVibGljIGFic3RyYWN0IGNsYXNzIFNjb3BlIHsKIAkJCQkJCQkJY29udGludWUgbmV4dEo7CiAJ
CQkJCQkJfQogCQkJCQkJfQorCQkJCQkJaWYgKGxldmVsaiA9PSBWQVJBUkdTX0NPTVBBVElCTEUg
JiYgbGV2ZWxrID09IFZBUkFSR1NfQ09NUEFUSUJMRSkgeworCQkJCQkJCVR5cGVCaW5kaW5nIHMg
PSBJbmZlcmVuY2VDb250ZXh0MTguZ2V0UGFyYW1ldGVyKG1ialBhcmFtZXRlcnMsIGFyZ3VtZW50
VHlwZXMubGVuZ3RoLCB0cnVlKTsKKwkJCQkJCQlUeXBlQmluZGluZyB0ID0gSW5mZXJlbmNlQ29u
dGV4dDE4LmdldFBhcmFtZXRlcihtYmtQYXJhbWV0ZXJzLCBhcmd1bWVudFR5cGVzLmxlbmd0aCwg
dHJ1ZSk7CisJCQkJCQkJaWYgKCFUeXBlQmluZGluZy5lcXVhbHNFcXVhbHMocywgdCkgJiYgdC5p
c1N1YnR5cGVPZihzKSkKKwkJCQkJCQkJY29udGludWUgbmV4dEo7CisJCQkJCQl9CiAJCQkJCX0K
IAkJCQl9CiAJCQkJbW9yZVNwZWNpZmljW2NvdW50KytdID0gdmlzaWJsZVtqXTsK
</data>
<flag name="review"
          id="63623"
          type_id="6"
          status="?"
          setter="shankhba"
    />
          </attachment>
      

    </bug>

</bugzilla>