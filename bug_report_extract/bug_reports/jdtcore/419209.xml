<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>419209</bug_id>
          
          <creation_ts>2013-10-11 06:07:00 -0400</creation_ts>
          <short_desc>[1.8] Repeating container annotations should be rejected in the presence of annotation it contains</short_desc>
          <delta_ts>2013-11-03 04:45:19 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Jay Arthanareeswaran">jarthana</reporter>
          <assigned_to name="Jesper Moller">jesper</assigned_to>
          <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="59684"
          type_id="1"
          status="+"
          setter="srikanth_sankaran"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2317129</commentid>
    <comment_count>0</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-10-11 06:07:38 -0400</bug_when>
    <thetext>The spec says:

It is a compile-time error if a declaration is annotated with any annotations of
a repeatable annotation type T and more than one annotation of the containing
annotation type of T.

Assuming FooContainer is itself a repeatable annotation type with a containing
annotation type of FooContainerContainer, one might expect the following code to be legal:

@Foo(1) @FooContainer({@Foo(2)}) @FooContainer({@Foo(3)}) class A {}

But this code is allowed by eclipse compiler.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2317308</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-11 12:00:59 -0400</bug_when>
    <thetext>Please always set the target so it shows up on queries. TIA</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2319428</commentid>
    <comment_count>2</comment_count>
      <attachid>236588</attachid>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-10-17 07:33:33 -0400</bug_when>
    <thetext>Created attachment 236588
Fix for this issue

I&apos;ve fixed this now, had to add yet another problem message.

By the way, I&apos;m seeing unrelated errors when running RunAllJava8Tests (against b108):

org.eclipse.jdt.core.tests.dom.TypeBindingTests308:
  test018(org.eclipse.jdt.core.tests.dom.TypeBindingTests308)
    java.lang.IllegalStateException: Bad AST node structure:
  test020(org.eclipse.jdt.core.tests.dom.TypeBindingTests308)
    java.lang.IllegalStateException: Bad AST node structure:
  test016(org.eclipse.jdt.core.tests.dom.TypeBindingTests308)
    java.lang.IllegalStateException: Bad AST node structure:
    
org.eclipse.jdt.core.tests.compiler.regression.RepeatableAnnotationTest:
  testTypeParameters(org.eclipse.jdt.core.tests.compiler.regression.RepeatableAnnotationTest)
    junit.framework.AssertionFailedError: Unexpected error running resulting class file for X.java:
  testVariousSites(org.eclipse.jdt.core.tests.compiler.regression.RepeatableAnnotationTest)
    junit.framework.AssertionFailedError: Unexpected error running resulting class file for X.java:</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2319433</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-17 07:40:50 -0400</bug_when>
    <thetext>(In reply to Jesper Moller from comment #2)
&gt; Created attachment 236588 [details]
&gt; Fix for this issue
&gt; 
&gt; I&apos;ve fixed this now, had to add yet another problem message.
&gt; 
&gt; By the way, I&apos;m seeing unrelated errors when running RunAllJava8Tests
&gt; (against b108):
&gt; 
&gt; org.eclipse.jdt.core.tests.dom.TypeBindingTests308:
&gt;   test018(org.eclipse.jdt.core.tests.dom.TypeBindingTests308)
&gt;     java.lang.IllegalStateException: Bad AST node structure:
&gt;   test020(org.eclipse.jdt.core.tests.dom.TypeBindingTests308)
&gt;     java.lang.IllegalStateException: Bad AST node structure:
&gt;   test016(org.eclipse.jdt.core.tests.dom.TypeBindingTests308)
&gt;     java.lang.IllegalStateException: Bad AST node structure:

I just disabled these. See https://bugs.eclipse.org/bugs/show_bug.cgi?id=417659#c8.

&gt; testTypeParameters(org.eclipse.jdt.core.tests.compiler.regression.
&gt; RepeatableAnnotationTest)
&gt;     junit.framework.AssertionFailedError: Unexpected error running resulting
&gt; class file for X.java:
&gt;  
&gt; testVariousSites(org.eclipse.jdt.core.tests.compiler.regression.
&gt; RepeatableAnnotationTest)
&gt;     junit.framework.AssertionFailedError: Unexpected error running resulting
&gt; class file for X.java:

These tests pass for me with 8b108. Could you investigate a bit more and
see what this unexpected error is about ? 

BTW, I had to resort to shutting down the VM and restarting it for these
tests: See the comment: 
// Not sure, unless we force the VM to not be reused by passing dummy vm argument, the generated program aborts midway through its execution

Not sure, may be your VM does not like the dummy argument ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2319434</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-17 07:44:57 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #3)

&gt; These tests pass for me with 8b108.

I am Windows 64 bits.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2319453</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-17 08:13:51 -0400</bug_when>
    <thetext>Patch looks good. I made the following changes:

1. Added one more test.
2. Renamed checkForInstancesOfRepeatableWithRepeatingContaining to be 
checkForInstancesOfRepeatableWithRepeatingContainerAnnotation so it is
consistent with IProblem and the other methods
3. Mildly reworded the javadoc of this method

and released here:
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=72dcd4b854d317f3c3f9226ee2c9a6583e0ff5db.

Thanks Jesper. Looks like javac does not implement this yet,</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2325937</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-11-02 20:21:27 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #3)
&gt; (In reply to Jesper Moller from comment #2)
&gt; &gt; testTypeParameters(org.eclipse.jdt.core.tests.compiler.regression.
&gt; &gt; RepeatableAnnotationTest)
&gt; &gt;     junit.framework.AssertionFailedError: Unexpected error running resulting
&gt; &gt; class file for X.java:
&gt; &gt;  
&gt; &gt; testVariousSites(org.eclipse.jdt.core.tests.compiler.regression.
&gt; &gt; RepeatableAnnotationTest)
&gt; &gt;     junit.framework.AssertionFailedError: Unexpected error running resulting
&gt; &gt; class file for X.java:
&gt; 
&gt; These tests pass for me with 8b108. Could you investigate a bit more and
&gt; see what this unexpected error is about ? 

These exact two tests are failing for me, too (on Linux with 8b108).
The output is
  &quot;Error: Could not find or load main class&quot;
which I also get on the command line when calling
$ /home/local/java/jdk1.8.0/bin/java -verify &quot;&quot; X

It&apos;s indeed the empty argument that screws up the VM (and I&apos;d suspect that bogus commandline processing in windows simply swallows the empty argument).

Simplest fix is to change &quot;&quot; into s.t. legal like &quot;-server&quot; or &quot;-Ddummy&quot;.

If pushed a fix via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/org.eclipse.jdt.core.tests.compiler/src/org/eclipse/jdt/core/tests/compiler/regression?h=BETA_JAVA8&amp;id=093ab4b3428c0cfbf5dcade43c17848dfc0c032d

Hope, it works an all platforms ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2325961</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-11-03 04:45:19 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #6)

&gt; Hope, it works an all platforms ...

Windows64 - changes look good. Thanks.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>236588</attachid>
            <date>2013-10-17 07:33:00 -0400</date>
            <delta_ts>2013-10-17 07:33:33 -0400</delta_ts>
            <desc>Fix for this issue</desc>
            <filename>bug_419209.txt</filename>
            <type>text/plain</type>
            <size>15204</size>
            <attacher name="Jesper Moller">jesper</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0NvbXBpbGVySW52b2Nh
dGlvblRlc3RzLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMv
b3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9Db21waWxlcklu
dm9jYXRpb25UZXN0cy5qYXZhCmluZGV4IGQ4NjcyNTguLmFkZTNjMDQgMTAwNjQ0Ci0tLSBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29y
ZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0NvbXBpbGVySW52b2NhdGlvblRlc3RzLmphdmEK
KysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNl
L2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vQ29tcGlsZXJJbnZvY2F0aW9uVGVz
dHMuamF2YQpAQCAtMzksNiArMzksNyBAQAogICoJCQkJCQkJCWJ1ZyAzODI3MjEgLSBbMS44XVtj
b21waWxlcl0gRWZmZWN0aXZlbHkgZmluYWwgdmFyaWFibGVzIG5lZWRzIHNwZWNpYWwgdHJlYXRt
ZW50CiAgKgkJCQkJCQkJYnVnIDM4NDU2NyAtIFsxLjVdW2NvbXBpbGVyXSBDb21waWxlciBhY2Nl
cHRzIGlsbGVnYWwgbW9kaWZpZXJzIG9uIHBhY2thZ2UgZGVjbGFyYXRpb24KICAqCQkJCQkJCQli
dWcgNDEyMTUzIC0gWzEuOF1bY29tcGlsZXJdIENoZWNrIHZhbGlkaXR5IG9mIGFubm90YXRpb25z
IHdoaWNoIG1heSBiZSByZXBlYXRhYmxlCisgKgkJCQkJCQkJYnVnIDQxOTIwOSAtIFsxLjhdIFJl
cGVhdGluZyBjb250YWluZXIgYW5ub3RhdGlvbnMgc2hvdWxkIGJlIHJlamVjdGVkIGluIHRoZSBw
cmVzZW5jZSBvZiBhbm5vdGF0aW9uIGl0IGNvbnRhaW5zCiAgKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
Ki8KIHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIucmVncmVzc2lv
bjsKIApAQCAtOTIyLDYgKzkyMyw3IEBAIHB1YmxpYyB2b2lkIHRlc3QwMTFfcHJvYmxlbV9jYXRl
Z29yaWVzKCkgewogCQlleHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiUmVwZWF0YWJsZUFu
bm90YXRpb25UeXBlSXNEb2N1bWVudGVkIiwgbmV3IFByb2JsZW1BdHRyaWJ1dGVzKENhdGVnb3Jp
emVkUHJvYmxlbS5DQVRfVFlQRSkpOwogCQlleHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgi
UmVwZWF0YWJsZUFubm90YXRpb25UeXBlSXNJbmhlcml0ZWQiLCBuZXcgUHJvYmxlbUF0dHJpYnV0
ZXMoQ2F0ZWdvcml6ZWRQcm9ibGVtLkNBVF9UWVBFKSk7CiAJCWV4cGVjdGVkUHJvYmxlbUF0dHJp
YnV0ZXMucHV0KCJSZXBlYXRhYmxlQW5ub3RhdGlvblR5cGVUYXJnZXRNaXNtYXRjaCIsIG5ldyBQ
cm9ibGVtQXR0cmlidXRlcyhDYXRlZ29yaXplZFByb2JsZW0uQ0FUX1RZUEUpKTsKKwkJZXhwZWN0
ZWRQcm9ibGVtQXR0cmlidXRlcy5wdXQoIlJlcGVhdGFibGVBbm5vdGF0aW9uV2l0aFJlcGVhdGlu
Z0NvbnRhaW5lckFubm90YXRpb24iLCBuZXcgUHJvYmxlbUF0dHJpYnV0ZXMoQ2F0ZWdvcml6ZWRQ
cm9ibGVtLkNBVF9UWVBFKSk7CiAJCWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0KCJSZXBl
YXRlZEFubm90YXRpb25XaXRoQ29udGFpbmVyQW5ub3RhdGlvbiIsIG5ldyBQcm9ibGVtQXR0cmli
dXRlcyhDYXRlZ29yaXplZFByb2JsZW0uQ0FUX1RZUEUpKTsKIAkJZXhwZWN0ZWRQcm9ibGVtQXR0
cmlidXRlcy5wdXQoIlJlc291cmNlSGFzVG9JbXBsZW1lbnRBdXRvQ2xvc2VhYmxlIiwgbmV3IFBy
b2JsZW1BdHRyaWJ1dGVzKENhdGVnb3JpemVkUHJvYmxlbS5DQVRfVFlQRSkpOwogCQlleHBlY3Rl
ZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiUmV0dXJuVHlwZUFtYmlndW91cyIsIERFUFJFQ0FURUQp
OwpAQCAtMTcyMyw2ICsxNzI1LDcgQEAgcHVibGljIHZvaWQgdGVzdDAxMl9jb21waWxlcl9wcm9i
bGVtc190dW5pbmcoKSB7CiAJCWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0KCJSZXBlYXRh
YmxlQW5ub3RhdGlvblR5cGVJc0RvY3VtZW50ZWQiLCBTS0lQKTsKIAkJZXhwZWN0ZWRQcm9ibGVt
QXR0cmlidXRlcy5wdXQoIlJlcGVhdGFibGVBbm5vdGF0aW9uVHlwZUlzSW5oZXJpdGVkIiwgU0tJ
UCk7CiAJCWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0KCJSZXBlYXRhYmxlQW5ub3RhdGlv
blR5cGVUYXJnZXRNaXNtYXRjaCIsIFNLSVApOworCQlleHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVz
LnB1dCgiUmVwZWF0YWJsZUFubm90YXRpb25XaXRoUmVwZWF0aW5nQ29udGFpbmVyQW5ub3RhdGlv
biIsIFNLSVApOwogCQlleHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiUmVwZWF0ZWRBbm5v
dGF0aW9uV2l0aENvbnRhaW5lckFubm90YXRpb24iLCBTS0lQKTsKIAkJZXhwZWN0ZWRQcm9ibGVt
QXR0cmlidXRlcy5wdXQoIlJlcXVpcmVkTm9uTnVsbEJ1dFByb3ZpZGVkTnVsbCIsIG5ldyBQcm9i
bGVtQXR0cmlidXRlcyhKYXZhQ29yZS5DT01QSUxFUl9QQl9OVUxMX1NQRUNJRklDQVRJT05fVklP
TEFUSU9OKSk7CiAJCWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0KCJSZXF1aXJlZE5vbk51
bGxCdXRQcm92aWRlZFBvdGVudGlhbE51bGwiLCBuZXcgUHJvYmxlbUF0dHJpYnV0ZXMoSmF2YUNv
cmUuQ09NUElMRVJfUEJfTlVMTF9BTk5PVEFUSU9OX0lORkVSRU5DRV9DT05GTElDVCkpOwpkaWZm
IC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xp
cHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vUmVwZWF0YWJsZUFubm90YXRp
b25UZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3Jn
L2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9SZXBlYXRhYmxlQW5u
b3RhdGlvblRlc3QuamF2YQppbmRleCA4ZDFlNTg2Li4xNjViYzY3IDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9SZXBlYXRhYmxlQW5ub3RhdGlvblRlc3QuamF2YQor
KysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2Uv
amR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9SZXBlYXRhYmxlQW5ub3RhdGlvblRl
c3QuamF2YQpAQCAtMTMsNiArMTMsNyBAQAogICogICAgIEplc3BlciBTIE1vbGxlciAtIGluaXRp
YWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgogICogICAgIAkJCQkJQnVnIDQxMjE1MSAtIFsxLjhd
W2NvbXBpbGVyXSBDaGVjayByZXBlYXRpbmcgYW5ub3RhdGlvbidzIGNvbGxlY3Rpb24gdHlwZQog
ICogICAgIAkJCQkJQnVnIDQxMjE0OSAtIFsxLjhdW2NvbXBpbGVyXSBFbWl0IHJlcGVhdGVkIGFu
bm90YXRpb25zIGludG8gdGhlIGRlc2lnbmF0ZWQgY29udGFpbmVyCisgKiAgICAgCQkJCQlCdWcg
NDE5MjA5IC0gWzEuOF0gUmVwZWF0aW5nIGNvbnRhaW5lciBhbm5vdGF0aW9ucyBzaG91bGQgYmUg
cmVqZWN0ZWQgaW4gdGhlIHByZXNlbmNlIG9mIGFubm90YXRpb24gaXQgY29udGFpbnMKICAqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqLwogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5j
b21waWxlci5yZWdyZXNzaW9uOwogCkBAIC0xNDUyLDQgKzE0NTMsNTUgQEAgcHVibGljIGNsYXNz
IFJlcGVhdGFibGVBbm5vdGF0aW9uVGVzdCBleHRlbmRzIEFic3RyYWN0Q29tcGFyYWJsZVRlc3Qg
ewogCQkJIkFubm90YXRpb24gdHlwZXMgdGhhdCBkbyBub3Qgc3BlY2lmeSBleHBsaWNpdCB0YXJn
ZXQgZWxlbWVudCB0eXBlcyBjYW5ub3QgYmUgYXBwbGllZCBoZXJlXG4iICsgCiAJCQkiLS0tLS0t
LS0tLVxuIik7CiAJfQkKKwkKKwkvLyA0MTkyMDk6IFsxLjhdIFJlcGVhdGluZyBjb250YWluZXIg
YW5ub3RhdGlvbnMgc2hvdWxkIGJlIHJlamVjdGVkIGluIHRoZSBwcmVzZW5jZSBvZiBhbm5vdGF0
aW9uIGl0IGNvbnRhaW5zCisJcHVibGljIHZvaWQgdGVzdFJlcGVhdGFibGVXaXRoQ29udGFpbmlu
ZzEoKSB7CisJCXRoaXMucnVuTmVnYXRpdmVUZXN0KAorCQkJbmV3IFN0cmluZ1tdIHsKKwkJCQki
QS5qYXZhIiwKKwkJCQkiQGludGVyZmFjZSBGb29Db250YWluZXJDb250YWluZXIge1xuIiArCisJ
CQkJIiAgcHVibGljIEZvb0NvbnRhaW5lcltdIHZhbHVlKCk7XG4iICsKKwkJCQkifVxuIiArCisJ
CQkJIkBqYXZhLmxhbmcuYW5ub3RhdGlvbi5SZXBlYXRhYmxlKEZvb0NvbnRhaW5lckNvbnRhaW5l
ci5jbGFzcylcbiIgKworCQkJCSJAaW50ZXJmYWNlIEZvb0NvbnRhaW5lciB7XG4iICsKKwkJCQki
ICBwdWJsaWMgRm9vW10gdmFsdWUoKTtcbiIgKworCQkJCSJ9XG4iICsKKwkJCQkiQGphdmEubGFu
Zy5hbm5vdGF0aW9uLlJlcGVhdGFibGUoRm9vQ29udGFpbmVyLmNsYXNzKVxuIiArCisJCQkJIkBp
bnRlcmZhY2UgRm9vIHtcbiIgKworCQkJCSIgIHB1YmxpYyBpbnQgdmFsdWUoKSBkZWZhdWx0IC0x
O1xuIiArICAKKwkJCQkifVxuIiArCisJCQkJIkBGb29Db250YWluZXIoe0BGb28oMSl9KSBARm9v
Q29udGFpbmVyKHtARm9vKDIpfSkgQEZvbygzKSBjbGFzcyBBIHt9XG4iCisJCQl9LAorCQkJIi0t
LS0tLS0tLS1cbiIgKyAKKwkJCSIxLiBFUlJPUiBpbiBBLmphdmEgKGF0IGxpbmUgMTIpXG4iICsg
CisJCQkiCUBGb29Db250YWluZXIoe0BGb28oMSl9KSBARm9vQ29udGFpbmVyKHtARm9vKDIpfSkg
QEZvbygzKSBjbGFzcyBBIHt9XG4iICsgCisJCQkiCSAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgXl5eXlxuIiArIAorCQkJIlRoZSByZXBlYXRhYmxlIGFu
bm90YXRpb24gQEZvbyBtYXkgbm90IGJlIHByZXNlbnQgd2hlcmUgaXRzIGNvbnRhaW5lciBhbm5v
dGF0aW9uIHR5cGUgQEZvb0NvbnRhaW5lciBpcyByZXBlYXRlZFxuIiArIAorCQkJIi0tLS0tLS0t
LS1cbiIpOworCX0KKwkvLyA0MTkyMDk6IFsxLjhdIFJlcGVhdGluZyBjb250YWluZXIgYW5ub3Rh
dGlvbnMgc2hvdWxkIGJlIHJlamVjdGVkIGluIHRoZSBwcmVzZW5jZSBvZiBhbm5vdGF0aW9uIGl0
IGNvbnRhaW5zCisJcHVibGljIHZvaWQgdGVzdFJlcGVhdGFibGVXaXRoQ29udGFpbmluZzIoKSB7
CisJCXRoaXMucnVuTmVnYXRpdmVUZXN0KAorCQkJbmV3IFN0cmluZ1tdIHsKKwkJCQkiQS5qYXZh
IiwKKwkJCQkiQGludGVyZmFjZSBGb29Db250YWluZXJDb250YWluZXIge1xuIiArCisJCQkJIiAg
cHVibGljIEZvb0NvbnRhaW5lcltdIHZhbHVlKCk7XG4iICsKKwkJCQkifVxuIiArCisJCQkJIkBq
YXZhLmxhbmcuYW5ub3RhdGlvbi5SZXBlYXRhYmxlKEZvb0NvbnRhaW5lckNvbnRhaW5lci5jbGFz
cylcbiIgKworCQkJCSJAaW50ZXJmYWNlIEZvb0NvbnRhaW5lciB7XG4iICsKKwkJCQkiICBwdWJs
aWMgRm9vW10gdmFsdWUoKTtcbiIgKworCQkJCSJ9XG4iICsKKwkJCQkiQGphdmEubGFuZy5hbm5v
dGF0aW9uLlJlcGVhdGFibGUoRm9vQ29udGFpbmVyLmNsYXNzKVxuIiArCisJCQkJIkBpbnRlcmZh
Y2UgRm9vIHtcbiIgKworCQkJCSIgIHB1YmxpYyBpbnQgdmFsdWUoKSBkZWZhdWx0IC0xO1xuIiAr
ICAKKwkJCQkifVxuIiArCisJCQkJIkBGb28oMSkgQEZvb0NvbnRhaW5lcih7QEZvbygyKX0pIEBG
b29Db250YWluZXIoe0BGb28oMyl9KSBjbGFzcyBBIHt9XG4iCisJCQl9LAorCQkJIi0tLS0tLS0t
LS1cbiIgKyAKKwkJCSIxLiBFUlJPUiBpbiBBLmphdmEgKGF0IGxpbmUgMTIpXG4iICsgCisJCQki
CUBGb28oMSkgQEZvb0NvbnRhaW5lcih7QEZvbygyKX0pIEBGb29Db250YWluZXIoe0BGb28oMyl9
KSBjbGFzcyBBIHt9XG4iICsgCisJCQkiCV5eXl5cbiIgKyAKKwkJCSJUaGUgcmVwZWF0YWJsZSBh
bm5vdGF0aW9uIEBGb28gbWF5IG5vdCBiZSBwcmVzZW50IHdoZXJlIGl0cyBjb250YWluZXIgYW5u
b3RhdGlvbiB0eXBlIEBGb29Db250YWluZXIgaXMgcmVwZWF0ZWRcbiIgKyAKKwkJCSItLS0tLS0t
LS0tXG4iKTsKKwl9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvY29yZS9jb21waWxlci9JUHJvYmxlbS5qYXZhIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2NvcmUvY29tcGlsZXIvSVByb2Js
ZW0uamF2YQppbmRleCAwZGM5ODYwLi41NTdhNTdjIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvY29yZS9jb21waWxlci9JUHJvYmxlbS5q
YXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9j
b3JlL2NvbXBpbGVyL0lQcm9ibGVtLmphdmEKQEAgLTIwNyw2ICsyMDcsNyBAQAogICoJCQkJCQkJ
CQlSZXBlYXRhYmxlQW5ub3RhdGlvblRhcmdldE1pc21hdGNoCiAgKgkJCQkJCQkJCVJlcGVhdGFi
bGVBbm5vdGF0aW9uSXNEb2N1bWVudGVkCiAgKgkJCQkJCQkJCVJlcGVhdGFibGVBbm5vdGF0aW9u
SXNJbmhlcml0ZWQKKyAqCQkJCQkJCQkJUmVwZWF0YWJsZUFubm90YXRpb25XaXRoUmVwZWF0aW5n
Q29udGFpbmVyQW5ub3RhdGlvbgogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KIHBhY2thZ2Ugb3Jn
LmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXI7CiAKQEAgLTE2NTMsNiArMTY1NCw4IEBAIHZvaWQg
c2V0U291cmNlU3RhcnQoaW50IHNvdXJjZVN0YXJ0KTsKIAlpbnQgUmVwZWF0YWJsZUFubm90YXRp
b25UeXBlSXNEb2N1bWVudGVkID0gVHlwZVJlbGF0ZWQgKyA5MDc7CiAJLyoqIEBzaW5jZSAzLjkg
QkVUQV9KQVZBOCAqLwogCWludCBSZXBlYXRhYmxlQW5ub3RhdGlvblR5cGVJc0luaGVyaXRlZCA9
IFR5cGVSZWxhdGVkICsgOTA4OworCS8qKiBAc2luY2UgMy45IEJFVEFfSkFWQTggKi8KKwlpbnQg
UmVwZWF0YWJsZUFubm90YXRpb25XaXRoUmVwZWF0aW5nQ29udGFpbmVyQW5ub3RhdGlvbiA9IFR5
cGVSZWxhdGVkICsgOTA5OwogCQogCS8qKgogCSAqIEVycm9ycy93YXJuaW5ncyBmcm9tIGFubm90
YXRpb24gYmFzZWQgbnVsbCBhbmFseXNpcwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BU1ROb2Rl
LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYXN0L0FTVE5vZGUuamF2YQppbmRleCBmOTRjNjc0Li5kMGUzZGU3IDEw
MDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L0FTVE5vZGUuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FTVE5v
ZGUuamF2YQpAQCAtMjcsNiArMjcsNyBAQAogICoJCQkJCQkJCWJ1ZyA0MTIxNTMgLSBbMS44XVtj
b21waWxlcl0gQ2hlY2sgdmFsaWRpdHkgb2YgYW5ub3RhdGlvbnMgd2hpY2ggbWF5IGJlIHJlcGVh
dGFibGUKICAqCQkJCQkJCQlidWcgNDEyMTUzIC0gWzEuOF1bY29tcGlsZXJdIENoZWNrIHZhbGlk
aXR5IG9mIGFubm90YXRpb25zIHdoaWNoIG1heSBiZSByZXBlYXRhYmxlCiAgKgkJCQkJCQkJYnVn
IDQxMjE0OSAtIFsxLjhdW2NvbXBpbGVyXSBFbWl0IHJlcGVhdGVkIGFubm90YXRpb25zIGludG8g
dGhlIGRlc2lnbmF0ZWQgY29udGFpbmVyCisgKgkJCQkJCQkJYnVnIDQxOTIwOSAtIFsxLjhdIFJl
cGVhdGluZyBjb250YWluZXIgYW5ub3RhdGlvbnMgc2hvdWxkIGJlIHJlamVjdGVkIGluIHRoZSBw
cmVzZW5jZSBvZiBhbm5vdGF0aW9uIGl0IGNvbnRhaW5zCiAgKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
Ki8KIHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdDsKIApAQCAt
ODQxLDYgKzg0Miw3IEBAIHB1YmxpYyBhYnN0cmFjdCBjbGFzcyBBU1ROb2RlIGltcGxlbWVudHMg
VHlwZUNvbnN0YW50cywgVHlwZUlkcyB7CiAJCQkJCQkJCWNvbnRhaW5lciA9IG5ldyBDb250YWlu
ZXJBbm5vdGF0aW9uKHNvdXJjZUFubm90YXRpb25zW2ldLCBjb250YWluZXJBbm5vdGF0aW9uVHlw
ZSwgc2NvcGUpOwogCQkJCQkJCQlpZiAoaW1wbGljaXRDb250YWluZXJBbm5vdGF0aW9ucyA9PSBu
dWxsKSBpbXBsaWNpdENvbnRhaW5lckFubm90YXRpb25zID0gbmV3IEhhc2hNYXAoMyk7CiAJCQkJ
CQkJCWltcGxpY2l0Q29udGFpbmVyQW5ub3RhdGlvbnMucHV0KGNvbnRhaW5lckFubm90YXRpb25U
eXBlLCBzb3VyY2VBbm5vdGF0aW9uc1tpXSk7CisJCQkJCQkJCUFubm90YXRpb24uY2hlY2tGb3JJ
bnN0YW5jZXNPZlJlcGVhdGFibGVXaXRoUmVwZWF0aW5nQ29udGFpbmluZyhzY29wZSwgYW5ub3Rh
dGlvblR5cGUsIHNvdXJjZUFubm90YXRpb25zKTsKIAkJCQkJCQl9CiAJCQkJCQkJY29udGFpbmVy
LmFkZENvbnRhaW5lZShzb3VyY2VBbm5vdGF0aW9uc1tqXSk7CiAJCQkJCQl9IGVsc2UgewpkaWZm
IC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2FzdC9Bbm5vdGF0aW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Fubm90YXRp
b24uamF2YQppbmRleCBhMWQ2NmRhLi45ZGM3YjAzIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Fu
bm90YXRpb24uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Fubm90YXRpb24uamF2YQpAQCAtMjksNiAr
MjksNyBAQAogICogICAgICAgICAgICAgICAgICAgICAgICAgIEJ1ZyA0MTIxNTMgLSBbMS44XVtj
b21waWxlcl0gQ2hlY2sgdmFsaWRpdHkgb2YgYW5ub3RhdGlvbnMgd2hpY2ggbWF5IGJlIHJlcGVh
dGFibGUKICAqICAgICAgICAgICAgICAgICAgICAgICAgICBCdWcgNDEyMTUxIC0gWzEuOF1bY29t
cGlsZXJdIENoZWNrIHJlcGVhdGluZyBhbm5vdGF0aW9uJ3MgY29sbGVjdGlvbiB0eXBlCiAgKiAg
ICAgICAgICAgICAgICAgICAgICAgICAgQnVnIDQxMjE0OSAtIFsxLjhdW2NvbXBpbGVyXSBFbWl0
IHJlcGVhdGVkIGFubm90YXRpb25zIGludG8gdGhlIGRlc2lnbmF0ZWQgY29udGFpbmVyCisgKiAg
ICAgICAgICAgICAgICAgICAgICAgICAgQnVnIDQxOTIwOSAtIFsxLjhdIFJlcGVhdGluZyBjb250
YWluZXIgYW5ub3RhdGlvbnMgc2hvdWxkIGJlIHJlamVjdGVkIGluIHRoZSBwcmVzZW5jZSBvZiBh
bm5vdGF0aW9uIGl0IGNvbnRhaW5zCiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KIHBhY2thZ2Ug
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdDsKIApAQCAtOTc2LDYgKzk3Nywz
NSBAQCBwdWJsaWMgYWJzdHJhY3QgY2xhc3MgQW5ub3RhdGlvbiBleHRlbmRzIEV4cHJlc3Npb24g
ewogCQl9CiAJfQogCisJLyoqCisJICogQ2hlY2sgdG8gc2VlIGlmIGEgcmVwZWF0aW5nIGFubm90
YXRpb24gaXMgaW4gZmFjdHMgYSBjb250YWluaW5nIGFubm90YXRpb24gZm9yIGFuIGFubm90YXRp
b24gd2hpY2ggaXMgYWxzbyBwcmVzZW50IGF0IHRoZSBzYW1lIHRhcmdldC4KKwkgKiBAcGFyYW0g
c2NvcGUgVGhlIHNjb3BlIChmb3IgZXJyb3IgcmVwb3J0aW5nKQorCSAqIEBwYXJhbSByZXBlYXRl
ZEFubm90YXRpb25UeXBlIFR5cGUgb2YgYW5ub3RhdGlvbiB3aGljaCBoYXMgYmVlbiByZXBlYXRl
ZCAodG8gY2hlY2sgZm9yIHBvc3NpYmx5IGJlaW5nIGEgY29udGFpbmVyIGZvciBhIHJlcGVhdGFi
bGUgYW5ub3RhdGlvbikKKwkgKiBAcGFyYW0gc291cmNlQW5ub3RhdGlvbnMgVGhlIGFubm90YXRp
b25zIHRvIGNoZWNrCisJICovCisJcHVibGljIHN0YXRpYyB2b2lkIGNoZWNrRm9ySW5zdGFuY2Vz
T2ZSZXBlYXRhYmxlV2l0aFJlcGVhdGluZ0NvbnRhaW5pbmcoQmxvY2tTY29wZSBzY29wZSwKKwkJ
CVJlZmVyZW5jZUJpbmRpbmcgcmVwZWF0ZWRBbm5vdGF0aW9uVHlwZSwgQW5ub3RhdGlvbltdIHNv
dXJjZUFubm90YXRpb25zKSB7CisJCS8vIEZhaWwgZmFzdCBpZiB0aGUgcmVwZWF0aW5nIGFubm90
YXRpb24gdHlwZSBjYW4ndCBiZSBhIGNvbnRhaW5lciwgYW55d2F5CisJCU1ldGhvZEJpbmRpbmdb
XSB2YWx1ZU1ldGhvZHMgPSByZXBlYXRlZEFubm90YXRpb25UeXBlLmdldE1ldGhvZHMoVHlwZUNv
bnN0YW50cy5WQUxVRSk7CisJCWlmICh2YWx1ZU1ldGhvZHMubGVuZ3RoICE9IDEpIHJldHVybjsg
Ly8gTm8gdmlvbGF0aW9ucyBwb3NzaWJsZQorCQkKKwkJVHlwZUJpbmRpbmcgbWV0aG9kUmV0dXJu
VHlwZSA9IHZhbHVlTWV0aG9kc1swXS5yZXR1cm5UeXBlOworCQkvLyB2YWx1ZSBtdXN0IGJlIGFu
IGFycmF5IAorCQlpZiAoISBtZXRob2RSZXR1cm5UeXBlLmlzQXJyYXlUeXBlKCkgfHwgbWV0aG9k
UmV0dXJuVHlwZS5kaW1lbnNpb25zKCkgIT0gMSkgcmV0dXJuOworCQkKKwkJQXJyYXlCaW5kaW5n
IGFycmF5ID0gKEFycmF5QmluZGluZykgbWV0aG9kUmV0dXJuVHlwZTsKKwkJVHlwZUJpbmRpbmcg
ZWxlbWVudHNUeXBlID0gYXJyYXkuZWxlbWVudHNUeXBlKCk7CisJCWlmICghIGVsZW1lbnRzVHlw
ZS5pc1JlcGVhdGFibGVBbm5vdGF0aW9uVHlwZSgpKSByZXR1cm47IC8vIENhbid0IGJlIGEgcHJv
YmxlbSwgdGhlbgorCQkKKwkJZm9yIChpbnQgaT0wOyBpIDwgc291cmNlQW5ub3RhdGlvbnMubGVu
Z3RoOyArK2kpIHsKKwkJCUFubm90YXRpb24gYW5ub3RhdGlvbiA9IHNvdXJjZUFubm90YXRpb25z
W2ldOworCQkJaWYgKFR5cGVCaW5kaW5nLmVxdWFsc0VxdWFscyhlbGVtZW50c1R5cGUsIGFubm90
YXRpb24ucmVzb2x2ZWRUeXBlKSkgeworCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLnJlcGVh
dGFibGVBbm5vdGF0aW9uV2l0aFJlcGVhdGluZ0NvbnRhaW5lcihhbm5vdGF0aW9uLCByZXBlYXRl
ZEFubm90YXRpb25UeXBlKTsKKwkJCQlyZXR1cm47IC8vIE9uZSBpcyBlbm91Z2ggZm9yIHRoaXMg
YW5ub3RhdGlvbiB0eXBlCisJCQl9CisJCX0KKwl9CisKIAkvLyBDaGVjayBhbmQgYW5zd2VyIGlm
IGFuIGF0dGVtcHQgdG8gYW5ub3RhdGUgYSBwYWNrYWdlIGlzIGJlaW5nIG1hZGUuIEVycm9yIHNo
b3VsZCBiZSByZXBvcnRlZCBieSBjYWxsZXIuCiAJcHVibGljIHN0YXRpYyBib29sZWFuIGlzVHlw
ZVVzZUNvbXBhdGlibGUoVHlwZVJlZmVyZW5jZSByZWZlcmVuY2UsIFNjb3BlIHNjb3BlKSB7CiAJ
CWlmIChyZWZlcmVuY2UgIT0gbnVsbCAmJiAhKHJlZmVyZW5jZSBpbnN0YW5jZW9mIFNpbmdsZVR5
cGVSZWZlcmVuY2UpKSB7CkBAIC0xMDI3LDUgKzEwNTcsNCBAQCBwdWJsaWMgYWJzdHJhY3QgY2xh
c3MgQW5ub3RhdGlvbiBleHRlbmRzIEV4cHJlc3Npb24gewogCXB1YmxpYyB2b2lkIHNldFBlcnNp
c3RpYmxlQW5ub3RhdGlvbihDb250YWluZXJBbm5vdGF0aW9uIGNvbnRhaW5lcikgewogCQl0aGlz
LnBlcnNpc3RpYmxlQW5ub3RhdGlvbiA9IGNvbnRhaW5lcjsgLy8gd2lsbCBiZSBhIGxlZ2l0aW1h
dGUgY29udGFpbmVyIGZvciB0aGUgZmlyc3Qgb2YgdGhlIHJlcGVhdGluZyBvbmVzIGFuZCBudWxs
IGZvciB0aGUgZm9sbG93ZXJzLgogCX0KLQkKIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVt
L1Byb2JsZW1SZXBvcnRlci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxlbVJlcG9ydGVyLmph
dmEKaW5kZXggY2E2NTNmNC4uZjQzOTE3ZCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJv
YmxlbVJlcG9ydGVyLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxlbVJlcG9ydGVyLmph
dmEKQEAgLTUxLDYgKzUxLDcgQEAKICAqCQkJCQkJCQlidWcgMzg0NTY3IC0gWzEuNV1bY29tcGls
ZXJdIENvbXBpbGVyIGFjY2VwdHMgaWxsZWdhbCBtb2RpZmllcnMgb24gcGFja2FnZSBkZWNsYXJh
dGlvbgogICoJCQkJCQkJCWJ1ZyA0MTIxNTMgLSBbMS44XVtjb21waWxlcl0gQ2hlY2sgdmFsaWRp
dHkgb2YgYW5ub3RhdGlvbnMgd2hpY2ggbWF5IGJlIHJlcGVhdGFibGUKICAqCQkJCQkJCQlidWcg
NDEyMTUxIC0gWzEuOF1bY29tcGlsZXJdIENoZWNrIHJlcGVhdGluZyBhbm5vdGF0aW9uJ3MgY29s
bGVjdGlvbiB0eXBlCisgKgkJCQkJCQkJYnVnIDQxOTIwOSAtIFsxLjhdIFJlcGVhdGluZyBjb250
YWluZXIgYW5ub3RhdGlvbnMgc2hvdWxkIGJlIHJlamVjdGVkIGluIHRoZSBwcmVzZW5jZSBvZiBh
bm5vdGF0aW9uIGl0IGNvbnRhaW5zCiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCiBwYWNrYWdl
IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5wcm9ibGVtOwogCkBAIC03MTI5LDYg
KzcxMzAsMTUgQEAgcHVibGljIHZvaWQgcmVwZWF0YWJsZUFubm90YXRpb25UeXBlSXNJbmhlcml0
ZWQoQVNUTm9kZSBtYXJrZXJOb2RlLCBSZWZlcmVuY2VCaW4KIAkJbWFya2VyTm9kZS5zb3VyY2VF
bmQpOwogfQogCitwdWJsaWMgdm9pZCByZXBlYXRhYmxlQW5ub3RhdGlvbldpdGhSZXBlYXRpbmdD
b250YWluZXIoQW5ub3RhdGlvbiBhbm5vdGF0aW9uLCBSZWZlcmVuY2VCaW5kaW5nIGNvbnRhaW5l
clR5cGUpIHsKKwl0aGlzLmhhbmRsZSgKKwkJSVByb2JsZW0uUmVwZWF0YWJsZUFubm90YXRpb25X
aXRoUmVwZWF0aW5nQ29udGFpbmVyQW5ub3RhdGlvbiwKKwkJbmV3IFN0cmluZ1tdIHtuZXcgU3Ry
aW5nKGFubm90YXRpb24ucmVzb2x2ZWRUeXBlLnJlYWRhYmxlTmFtZSgpKSwgbmV3IFN0cmluZyhj
b250YWluZXJUeXBlLnJlYWRhYmxlTmFtZSgpKX0sCisJCW5ldyBTdHJpbmdbXSB7bmV3IFN0cmlu
Zyhhbm5vdGF0aW9uLnJlc29sdmVkVHlwZS5zaG9ydFJlYWRhYmxlTmFtZSgpKSwgbmV3IFN0cmlu
Zyhjb250YWluZXJUeXBlLnNob3J0UmVhZGFibGVOYW1lKCkpfSwKKwkJYW5ub3RhdGlvbi5zb3Vy
Y2VTdGFydCwKKwkJYW5ub3RhdGlvbi5zb3VyY2VFbmQpOworfQorCiBwdWJsaWMgdm9pZCByZXNl
dCgpIHsKIAl0aGlzLnBvc2l0aW9uU2Nhbm5lciA9IG51bGw7CiB9CmRpZmYgLS1naXQgYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvcHJvYmxlbS9tZXNzYWdlcy5wcm9wZXJ0aWVzIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vbWVzc2FnZXMu
cHJvcGVydGllcwppbmRleCAxODdkNzdjLi4yY2FkOTIwIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJv
YmxlbS9tZXNzYWdlcy5wcm9wZXJ0aWVzCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL21lc3NhZ2VzLnBy
b3BlcnRpZXMKQEAgLTQxLDYgKzQxLDcgQEAKICMJCQkJCQkJYnVnIDM4NDU2NyAtIFsxLjVdW2Nv
bXBpbGVyXSBDb21waWxlciBhY2NlcHRzIGlsbGVnYWwgbW9kaWZpZXJzIG9uIHBhY2thZ2UgZGVj
bGFyYXRpb24KICMJCQkJCQkJQnVnIDQxMjE1MyAtIFsxLjhdW2NvbXBpbGVyXSBDaGVjayB2YWxp
ZGl0eSBvZiBhbm5vdGF0aW9ucyB3aGljaCBtYXkgYmUgcmVwZWF0YWJsZQogIwkJCQkJCQlCdWcg
NDEyMTUxIC0gWzEuOF1bY29tcGlsZXJdIENoZWNrIHJlcGVhdGluZyBhbm5vdGF0aW9uJ3MgY29s
bGVjdGlvbiB0eXBlCisjCQkJCQkJCUJ1ZyA0MTkyMDkgLSBbMS44XSBSZXBlYXRpbmcgY29udGFp
bmVyIGFubm90YXRpb25zIHNob3VsZCBiZSByZWplY3RlZCBpbiB0aGUgcHJlc2VuY2Ugb2YgYW5u
b3RhdGlvbiBpdCBjb250YWlucwogIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIwogMCA9IHswfQogMSA9
IHN1cGVyIGNhbm5vdCBiZSB1c2VkIGluIGphdmEubGFuZy5PYmplY3QKQEAgLTc1NSw2ICs3NTYs
NyBAQAogOTA2ID0gVGhlIGNvbnRhaW5lciBhbm5vdGF0aW9uIHR5cGUgQHsxfSBpcyBhbGxvd2Vk
IGF0IHRhcmdldHMgd2hlcmUgdGhlIHJlcGVhdGFibGUgYW5ub3RhdGlvbiB0eXBlIEB7MH0gaXMg
bm90OiB7Mn0KIDkwNyA9IFRoZSByZXBlYXRhYmxlIGFubm90YXRpb24gdHlwZSBAezB9IGlzIG1h
cmtlZCBARG9jdW1lbnRlZCwgYnV0IGl0cyBjb250YWluZXIgYW5ub3RhdGlvbiB0eXBlIEB7MX0g
aXMgbm90CiA5MDggPSBUaGUgcmVwZWF0YWJsZSBhbm5vdGF0aW9uIHR5cGUgQHswfSBpcyBtYXJr
ZWQgQEluaGVyaXRlZCwgYnV0IGl0cyBjb250YWluZXIgYW5ub3RhdGlvbiB0eXBlIEB7MX0gaXMg
bm90Cis5MDkgPSBUaGUgcmVwZWF0YWJsZSBhbm5vdGF0aW9uIEB7MH0gbWF5IG5vdCBiZSBwcmVz
ZW50IHdoZXJlIGl0cyBjb250YWluZXIgYW5ub3RhdGlvbiB0eXBlIEB7MX0gaXMgcmVwZWF0ZWQK
IAogIyMjIE5VTEwgQU5OT1RBVElPTlMKIDkxMCA9IE51bGwgdHlwZSBtaXNtYXRjaDogcmVxdWly
ZWQgJyd7MH0nJyBidXQgdGhlIHByb3ZpZGVkIHZhbHVlIGlzIG51bGwK
</data>

          </attachment>
      

    </bug>

</bugzilla>