<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>422884</bug_id>
          
          <creation_ts>2013-11-29 17:51:00 -0500</creation_ts>
          <short_desc>[test] Failure in BasicBuildTests.testbBug386901: Incorrect value expected:&lt;0&gt; but was:&lt;2000&gt;</short_desc>
          <delta_ts>2014-09-17 07:50:53 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 8</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.5 M2</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Timo Kinnunen">timo.kinnunen</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>jarthana</cc>
    
    <cc>mistria</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2336193</commentid>
    <comment_count>0</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2013-11-29 17:51:35 -0500</bug_when>
    <thetext>I just got a test failure from running tests from command-line:

Failed tests:   testbBug386901(org.eclipse.jdt.core.tests.builder.BasicBuildTests): Incorrect value expected:&lt;0&gt; but was:&lt;2000&gt;

As far as I can tell, the assert that emits the failure is not working properly. The relevant section:

		int previous = org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.MAX_AT_ONCE;
		org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.MAX_AT_ONCE = 1; // units compiled in batches of &apos;1&apos; unit
		/* ... Snipped code executing tests that doesn&apos;t assign to previous */
		org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.MAX_AT_ONCE = 0; // All units compiled at once
		/* ... Snipped code executing tests that doesn&apos;t assign to previous */
		assertEquals(&quot;Incorrect value&quot;, 0, previous);
		
This is equivalent to:
		final int previous = org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.MAX_AT_ONCE;
		assertEquals(&quot;Incorrect value&quot;, 0, previous);
		/* ... Code that used to be between the two previous lines goes here */

This asserts that the default value of AbstractImageBuilder.MAX_AT_ONCE has been changed to be 0. This is attempted to be done in the initializer block during constructing the instance: 
{
System.setProperty(JavaModelManager.MAX_COMPILED_UNITS_AT_ONCE, &quot;0&quot;);
}

The failure itself is caused by the combination of 2 things:

- Thing 1: AbstractImageBuilder.MAX_AT_ONCE is a static field that is initialized only once during class loading. JavaBuilder.buildAll() creates a new BatchImageBuilder which extends AbstractImageBuilder, which would initialize the field in &lt;clinit&gt;. AbstractMethodTest.test001(), .test002() and .test003() were executed before BasicBuildTests.testTags3() and they build, so if test suites are created only when needed that would be enough to cause the initialization using the default value 2000. I don&apos;t have tests running inside Eclipse to verify what exactly ends up loading AbstractImageBuilder, unfortunately.

- Thing 2: A design issue where AbstractMethodTest.testbBug386901() method depends on the side effects of code that it doesn&apos;t itself cause to be executed. 

The trace:

junit.framework.AssertionFailedError: Incorrect value expected:&lt;0&gt; but was:&lt;2000&gt;
	at junit.framework.Assert.fail(Assert.java:57)
	at junit.framework.Assert.failNotEquals(Assert.java:329)
	at junit.framework.Assert.assertEquals(Assert.java:78)
	at junit.framework.Assert.assertEquals(Assert.java:234)
	at junit.framework.TestCase.assertEquals(TestCase.java:401)
	at org.eclipse.jdt.core.tests.builder.BasicBuildTests.testbBug386901(BasicBuildTests.java:605)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at junit.framework.TestCase.runTest(TestCase.java:176)
	at junit.framework.TestCase.runBare(TestCase.java:141)
	at junit.framework.TestResult$1.protect(TestResult.java:122)
	at junit.framework.TestResult.runProtected(TestResult.java:142)
	at junit.framework.TestResult.run(TestResult.java:125)
	at junit.framework.TestCase.run(TestCase.java:129)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at junit.framework.TestSuite.runTest(TestSuite.java:255)
	at junit.framework.TestSuite.run(TestSuite.java:250)
	at org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:84)
	at org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:53)
	at org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:123)
	at org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:104)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.apache.maven.surefire.util.ReflectionUtils.invokeMethodWithArray(ReflectionUtils.java:164)
	at org.apache.maven.surefire.booter.ProviderFactory$ProviderProxy.invoke(ProviderFactory.java:110)
	at org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:175)
	at org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:123)
	at org.eclipse.tycho.surefire.osgibooter.OsgiSurefireBooter.run(OsgiSurefireBooter.java:86)
	at org.eclipse.tycho.surefire.osgibooter.HeadlessTestApplication.run(HeadlessTestApplication.java:21)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.eclipse.equinox.internal.app.EclipseAppContainer.callMethodWithException(EclipseAppContainer.java:587)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:198)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:109)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:80)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:372)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:226)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:606)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:636)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:591)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1450)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1426)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2336195</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-11-29 18:13:19 -0500</bug_when>
    <thetext>I, too, have seen this failure in the past but didn&apos;t find the time to dig into it. Thanks, Timo, for the detailed analysis!

I&apos;d conclude trying to test this particular feature from within a running java process is doomed to be unreliable at best. Setting a system property violates the desired isolation of tests.

Jay, should we just remove the manipulation of the system property and only test the effect of modifying AbstractImageBuilder.MAX_AT_ONCE? Additionally we should probably put any modification of this &quot;constant&quot; into a try-finally, right?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2414927</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-06-09 17:30:07 -0400</bug_when>
    <thetext>Just documenting that with Object Teams in the loop this test failure currently occurs most the time. Let&apos;s clean this up during the next cycle...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2440980</commentid>
    <comment_count>3</comment_count>
    <who name="Mickael Istria">mistria</who>
    <bug_when>2014-08-19 14:03:17 -0400</bug_when>
    <thetext>I see the same test failure with patch testbBug386901. Do you have a clue of what could be a cause/a good fix?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2441022</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-08-19 15:21:53 -0400</bug_when>
    <thetext>(In reply to Mickael Istria from comment #3)
&gt; I see the same test failure with patch testbBug386901. Do you have a clue of
&gt; what could be a cause/a good fix?

Cause: lack of test isolation.

Fix? Don&apos;t test manipulation / evaluation of the system property?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2441025</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-08-19 15:24:04 -0400</bug_when>
    <thetext>@Jay, I just saw you were not on Cc:

So let me repeat my question (comment 1):

&gt; Jay, should we just remove the manipulation of the system property and only test the effect of modifying AbstractImageBuilder.MAX_AT_ONCE? Additionally we should probably put any modification of this &quot;constant&quot; into a try-finally, right?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2441098</commentid>
    <comment_count>6</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-08-19 23:53:11 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #5)
&gt; Jay, should we just remove the manipulation of the system property and only test the effect of modifying AbstractImageBuilder.MAX_AT_ONCE? Additionally we should probably put any modification of this &quot;constant&quot; into a try-finally, right?

Yes, we should. I was hoping it will find it&apos;s way through patch set 5 of https://git.eclipse.org/r/#/c/31845/ 

I wasn&apos;t aware of this bug. I will fix it here.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2441119</commentid>
    <comment_count>7</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-08-20 02:27:21 -0400</bug_when>
    <thetext>Done:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=97ab3cc22cd29aa2a71224814e66535bc04ff083</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2452990</commentid>
    <comment_count>8</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-09-17 06:25:21 -0400</bug_when>
    <thetext>Verified for 4.5 M2 using I20140916-2000 build</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>