<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>360164</bug_id>
          
          <creation_ts>2011-10-06 15:53:00 -0400</creation_ts>
          <short_desc>Compile error in XSDImpl</short_desc>
          <delta_ts>2011-10-24 04:33:05 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>PC</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>critical</bug_severity>
          <target_milestone>3.8 M3</target_milestone>
          
          <blocked>360317</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Carl Anderson">ccc</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>david_williams</cc>
    
    <cc>Ed.Merks</cc>
    
    <cc>john_arthorne</cc>
    
    <cc>Kenn.Hussey</cc>
    
    <cc>Olivier_Thomann</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
    
    <cc>tjwatson</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="46368"
          type_id="1"
          status="+"
          setter="srikanth_sankaran"
    />
    <flag name="review"
          id="46373"
          type_id="1"
          status="+"
          setter="srikanth_sankaran"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2006160</commentid>
    <comment_count>0</comment_count>
    <who name="Carl Anderson">ccc</who>
    <bug_when>2011-10-06 15:53:24 -0400</bug_when>
    <thetext>In org.eclipse.wst.xsd.core, in org.eclipse.wst.xsd.contentmodel.internal.XSDImpl, we are seeing a Java Compile error:

Compiler Report
Compiler: Eclipse Compiler for Java(TM) Version: 0.C13, 3.8.0 M3

Number of source files: 17 Number of classfiles: 37

Problems: 1 (Errors: 1 Warnings: 0 ) 

Source File: org/eclipse/wst/xsd/contentmodel/internal/XSDImpl.java 
1. ERROR: IsClassPathCorrect
The type java.lang.Enum cannot be resolved. It is indirectly referenced from required .class files 

XSDImpl.java : 

1 : /*******************************************************************************</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2006165</commentid>
    <comment_count>1</comment_count>
    <who name="Carl Anderson">ccc</who>
    <bug_when>2011-10-06 15:57:12 -0400</bug_when>
    <thetext>This appears to be due to that plugin&apos;s usage of EMF.  Currently, EMF uses Java 1.5, but org.eclipse.wst.xsd.core only requires Java 1.4.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2006170</commentid>
    <comment_count>2</comment_count>
    <who name="Carl Anderson">ccc</who>
    <bug_when>2011-10-06 16:01:45 -0400</bug_when>
    <thetext>Digging even further, this appears to be caused by changes to the JDT.  If we set up a development environment using Eclipse 3.7.1 to compile, and target the same driver, this error does not appear.

I believe that this is related to a JDT bug fix post-M2... possibly bug 355838 ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2006228</commentid>
    <comment_count>3</comment_count>
    <who name="Carl Anderson">ccc</who>
    <bug_when>2011-10-06 17:48:04 -0400</bug_when>
    <thetext>Moving down to JDT for their investigation/comment.

The class in question is not using EMF directly.  It should not require Java 1.5.  Either JDT is correctly displaying an incompatibility that has existed and this is EMF 2.8 M2a&apos;s fault for not being compatible with Java 1.4-based plugins, or (more likely) this is JDT detecting an incompatibility that does not truly exist.

(Note that the plugin in question has not changed and has been tested at runtime with EMF 2.8 M2 and previous EMF versions.)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2006242</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-10-06 19:17:22 -0400</bug_when>
    <thetext>(In reply to comment #3)
&gt; Moving down to JDT for their investigation/comment.

Let&apos;s see, I guess we need a bit more information here, before we understand
the question.
 
&gt; The class in question is not using EMF directly.

Am I assuming right that &quot;the class in question&quot; is XSDImpl?
For those who don&apos;t know the repository structure of wst by heart,
after some chasing I found this class here:

http://dev.eclipse.org/viewcvs/viewvc.cgi/sourceediting/plugins/org.eclipse.wst.xsd.core/src-contentmodel/org/eclipse/wst/xsd/contentmodel/internal/XSDImpl.java?view=markup&amp;root=WebTools_Project

Is that the correct version?

However, the first thing I see there is:

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.resource.impl.URIConverterImpl;

Is that the class that &quot;is not using EMF directly&quot;?

So, what exactly would you like us to investigate? :)


BTW: from the project page
http://www.eclipse.org/projects/project.php?id=webtools.webservices
I get forwarded to
http://dev.eclipse.org/viewcvs/viewvc.cgi/webservices/?root=Webtools_Project
which is a dead link
it must be
http://dev.eclipse.org/viewcvs/viewvc.cgi/webservices/?root=WebTools_Project</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2006255</commentid>
    <comment_count>5</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2011-10-06 21:17:21 -0400</bug_when>
    <thetext>I think Carl meant &quot;The class in question is not using &gt;Enum&lt; directly.&quot;

I personally am not able to reproduce this in a fresh install ... but, I&apos;m sure there is some permutation that would, since it happened in our batch build. 

For background, I asked a bug be opened when we &quot;accidentally&quot; used 0.C13, 3.8.0 M3 in the WTP Batch build, instead of 3.7.1 as we&apos;d intended. So, thought we might be discovering an &quot;early bug&quot;. 

I&apos;ll describe how I tried to reproduce ... maybe someone else can figure out an &quot;alternative install&quot; that might? 

I started with Eclipse SDK I20111004-2000, then added &quot;emf-xsd&quot; to the PDE runtime target, such as their &quot;M2a&quot; from 
http://www.eclipse.org/downloads/download.php?file=/modeling/emf/emf/downloads/drops/2.8.0/S201109231242/emf-xsd-SDK-2.8.0M2a.zip

Next, I imported all the projects needed for &quot;wst.xsd.core&quot; (was NOT easy ... I&apos;ll attach a team project set). 

And ... I don&apos;t see the error there. Maybe it&apos;d make a difference if &quot;emf-xsd&quot; was &quot;unzipped&quot; into an install? I know EMFs M2a was kind of &quot;special&quot;, in some way.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2006256</commentid>
    <comment_count>6</comment_count>
      <attachid>204725</attachid>
    <who name="David Williams">david_williams</who>
    <bug_when>2011-10-06 21:19:01 -0400</bug_when>
    <thetext>Created attachment 204725
team project set for the 15 projects requried for build wst.xsd.core</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2006259</commentid>
    <comment_count>7</comment_count>
    <who name="Carl Anderson">ccc</who>
    <bug_when>2011-10-06 21:37:23 -0400</bug_when>
    <thetext>Sorry, yes, it does not use Enum directly.

One other thing that might help in reproducing- this error does not appear until I have a Java 1.4 JRE installed in my development environment.  It does not have to be configured as the Execution Environment- once I installed it as a JRE, this error was reproduced.

With the same PDE target, but with Eclipse 3.7.1 ad the development environment, this error does not appear.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2006264</commentid>
    <comment_count>8</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2011-10-06 22:04:59 -0400</bug_when>
    <thetext>
&gt; 
&gt; One other thing that might help in reproducing- this error does not appear
&gt; until I have a Java 1.4 JRE installed in my development environment. 

Yep, that did it. In my &quot;fresh install&quot; I forgot to add all my JREs back to JRE runtimes. Once I did, the error showed up in my fresh, &quot;minimal&quot; workspace.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2006314</commentid>
    <comment_count>9</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-10-07 03:55:11 -0400</bug_when>
    <thetext>One more question: what is the goal behind specifying a 1.4 execution
environment and compiling against other plug-ins that require 1.5?
Why would this be a useful exercise?

Note to the JDT/Core team: bug 349326 influences the order in which
types are resolved (need some super-types early). This *might* be the 
butterfly that caused the storm in wst.xsd.core.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2006423</commentid>
    <comment_count>10</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2011-10-07 08:20:42 -0400</bug_when>
    <thetext>(In reply to comment #9)
&gt; One more question: what is the goal behind specifying a 1.4 execution
&gt; environment and compiling against other plug-ins that require 1.5?
&gt; Why would this be a useful exercise?

Partially (mostly?) its just considered good architecture ... see 
http://wiki.eclipse.org/Execution_Environments#I_have_prerequisites_that_require_1.5_to_run.2C_so_shouldn.27t_I_require_1.5_too.3F 

where it says (and I think I might have written that section, so let us know if you disagree and think that&apos;s not true, as it has been the advised for a long time)
&quot;... You should seek to use the smallest BREE possible. There&apos;s several reasons to use a BREE smaller than your prerequisites. One is just sound architecture. Things might change in the future, so you want to code your bundle based on your needs. Maybe that prerequisite will be refactored out next release. Similarly, you do not (normally) have control over your prerequisites BREEs. They might lower theirs, they might raise it ... no reason to hard code some assumption in your bundle, based on your prerequisites. &quot;

Second, there could be real cases where the pre-req is optional, etc., such that the bundle can run in 1.4 with perhaps reduced function, even if has more function when running on 1.5. 

Third, I know EMF went to great pains so that even though _they_ moved to 1.5, not to require all their clients to do so ... I forget details, but something like marked their bundles to produce 1.4 compliant code and restricted themselves so that there was some 1.5 things they could do, but not just any thing in 1.5. If that was no longer possible, it&apos;d have a huge ripple effect. 
[As far as I know, this is still true ... that EMF does this &quot;use 1.5, compile to 1.4) ... but I will add Ed and Kenn, in case something they changed could be related to that we are seeing]. 

But, we do this all over the place (have 1.4 bundles that pre-req EMF) so not sure why it is just this one bundle that&apos;s having trouble. 

Suggestions/clarifications welcome. but, if its a new limitation, even if should have always been a limitation, it will have a big ripple effect.

HTH</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2006443</commentid>
    <comment_count>11</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-10-07 08:42:52 -0400</bug_when>
    <thetext>As far as I can say, the type org.eclipse.xsd.XSDContentTypeCategory is an enum
type. So when trying to resolve its hierarchy, the type java.lang.Enum cannot
be found.
The reference is in
org.eclipse.wst.xsd.contentmodel.internal.XSDImpl.ElementDeclarationBaseImpl#getContentType().

I wonder how this actually worked before. David, could you please how you
expect this to compile using a 1.4 system library on the classpath of the
corresponding project ?

When using 1.5 but being able to run on top of 1.4, java.lang.Enum must never
be used. This is one of the limitation that has always been there. Now the
question remains why this compiles fine using 3.7.1. I&apos;ll investigate.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2006474</commentid>
    <comment_count>12</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-10-07 09:28:03 -0400</bug_when>
    <thetext>It doesn&apos;t compile with 3.8, because the fix for bug 349326 checks if the local defined in:
XSDContentTypeCategory category = (XSDComplexTypeDefinition) td.getContentTypeCategory();
is an instance of AutoCloseable/Closeable and therefore it resolves its type hierarchy. Doing so, it tries to resolve java.lang.Enum and it failed.

This being said, I don&apos;t expect org.eclipse.xsd to contain 1.5 type if it has to be used in projects that require 1.4 only. If that type is used differently, even with 3.7.1, its type hierarchy might be resolved.

I would say that xsd should not use 1.5 types and it should be fixed on their side.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2006551</commentid>
    <comment_count>13</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-10-07 10:37:49 -0400</bug_when>
    <thetext>I quickly checked org.eclipse.xsd and it is not set up to be compiled to target 1.4 (target platform=jsr14). This being said, I would say it is a mistake to refer to this bundle in a bundle that is supposed to use 1.4 only. I don&apos;t see how this would work at runtime.
Could you please clarify that point ?

So even if it looks like a regression in JDT, I believe this is actually catching a wrong setup in the org.eclipse.wst.xsd.core project or org.eclipse.xsd must be changed not to use any of the 1.5 types.

Did you try to run the code (compiled using 3.7.1) from this method org.eclipse.wst.xsd.contentmodel.internal.XSDImpl.ElementDeclarationBaseImpl#getContentType() on a 1.4 VM ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2006640</commentid>
    <comment_count>14</comment_count>
    <who name="Ed Merks">Ed.Merks</who>
    <bug_when>2011-10-07 12:12:14 -0400</bug_when>
    <thetext>Yes, that doesn&apos;t make sense to me.  Of course folks can depend on an older version of EMF and XSD that doesn&apos;t require Java 5, but when you depend on a newer version that depends on Java 5.0 and compile against it, by transitivity you depend on Java 5.0.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2006657</commentid>
    <comment_count>15</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-10-07 12:23:48 -0400</bug_when>
    <thetext>(In reply to comment #14)
&gt; Yes, that doesn&apos;t make sense to me.  Of course folks can depend on an older
&gt; version of EMF and XSD that doesn&apos;t require Java 5, but when you depend on a
&gt; newer version that depends on Java 5.0 and compile against it, by transitivity
&gt; you depend on Java 5.0.
Exactly my point. If a version of org.eclipse.xsd depends on 1.5 and it not compiled to target 1.4, then that version should never be used in a bundle that targets 1.4.
So org.eclipse.wst.xsd.core should either refer to a version of XSD that doesn&apos;t use 1.5, or it should be set to run on top of 1.5, or org.eclipse.xsd must provide a new version that runs on top of 1.4.
Right now I don&apos;t see anything wrong in JDT and I would move that bug back to wst.

David, what do you think ? Are any of these options applicable for you ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2006826</commentid>
    <comment_count>16</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2011-10-07 15:19:54 -0400</bug_when>
    <thetext>(In reply to comment #15)
&gt; (In reply to comment #14)

&gt; David, what do you think ? Are any of these options applicable for you ?

Could be ... but, that&apos;d mean I&apos;ve been under the wrong impression for a while. (no surprise there). A few comments and questions come to mind ... no judgments here ... just comments and questions. 

First and foremost, I _thought_ emf (and xsd) used Java 1.5 in their source but still &quot;compiled to&quot; 1.4. But, apparently not. I&apos;ve always thought &quot;compiling time is different than runtime&quot; but ... apparently not so much. 

Second, I thought the BREE setting was supposed to be about your own specific bundle ... not all of your prereqs. If we have to take into account all pre-reqs, then the BREE is more like a &quot;highest common denominator&quot; rather than a minimum for one bundle alone. That sounds like a big change (mistake?) in my thinking.

Third, Keep in mind, we have no interest in running xsd.core on 1.4 but ... a) did not want to preclude others from doing so if they wanted, and their use of it was sufficient for their needs (they might not use the function that ultimately uses Enum). and b) I thought it was supposed to be architecturally more sound, since otherwise, if prereqs change, in future, the BREE might have to change, even though our code did not change. Seems odd ... but, again, probably just a mistaken impression on my part. 

Fourth, you say &quot;... the local defined in ... [is checked if it ] is an instance of AutoCloseable/Closeable and therefore it resolves its type
hierarchy.&quot; Does his just impact only &quot;VM Level&quot; issues ... or does it mean that now, to guarantee compilation, someone needs a complete &quot;target&quot; even for other bundles their pre-reqs might need when they compile, even though their own code does not?  Sounds complicated. (A VM Level is one thing ... a whole, huge stack of bundles one doesn&apos;t care about is another thing). Again ... maybe that&apos;s always the way it &quot;should have been&quot; but seems like a change that would effect many people. 

Fourth, sounds really complicated if someone specifies a version range, such as 
Require-Bundle: org.eclipse.core.resources; bundle-version=&quot;3.1.0,4.0.0&quot;
when &quot;core resources&quot; changed their BREE in there somewhere, from 1.4 to 1.5 ... so, now, to be exactly correct, if those wide ranges were correct, they could no longer compile against the version that has pre-req&apos;d the higher BREE?
[I just picked core.resources for illustration ... similar for emf or xsd].  

So ... I was thinking of lots more complicated questions ... but ... I&apos;m boring even myself ... so, I think time to &quot;call in&quot; people who might know better than I ... Tom and John ... and see if they can better describe &quot;what the BREE should be&quot; especially &quot;how the BREE should be related to compile time&quot; -- I have a feeling it is not &quot;spec&apos;d for compile time&quot; :)  

I should emphasize ... we in WTP have no need for 1.4 ... if the advice is to change all our BREEs to 1.5 (simply to get &quot;highest common denominator&quot;, because we use EMF and things like core.resources) then that&apos;s fine by me. We just opened this bug to give you &quot;early warning&quot; of a change in behavior ... and now has turned into &quot;educating David&quot; :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2006840</commentid>
    <comment_count>17</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2011-10-07 15:34:40 -0400</bug_when>
    <thetext>One quick suggestion ... you say, due to bug 349326 you check &quot; ... the local defined in ... [is checked if it ] is an instance of AutoCloseable/Closeable and therefore it resolves its type hierarchy.&quot;

Would it be better to write your code so that 
 if &lt;type hierachy can not be resolved&gt;
 then assume &quot;false&quot; (not AutoCloseable/Closeable)

and continue as before? 

Not sure if that&apos;s still speaks to &quot;correctness&quot; of our bundle&apos;s set-up ... but, would maintain old behavior. 

But, guess the first question is the conceptual (or spec) question if a bundle&apos;s BREE must be set to its highest common denominator of pre-reqs ... or, lowest level, as determined only by itself.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2006844</commentid>
    <comment_count>18</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-10-07 15:40:56 -0400</bug_when>
    <thetext>(In reply to comment #17)
&gt; Would it be better to write your code so that 
&gt;  if &lt;type hierachy can not be resolved&gt;
&gt;  then assume &quot;false&quot; (not AutoCloseable/Closeable)
&gt; 
&gt; and continue as before? 
This is what I am investigating. I&apos;ll make more experiment with this today and talk to Stephan next week.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2006895</commentid>
    <comment_count>19</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-10-07 17:17:59 -0400</bug_when>
    <thetext>I think there is room for improvement on the compiler side. I&apos;ll leave the bug here for now and we will investigate if we can fallback to the previous behavior in case one type in the hierarchy cannot be properly resolved.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2006956</commentid>
    <comment_count>20</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2011-10-08 01:41:38 -0400</bug_when>
    <thetext>(In reply to comment #19)
&gt; I think there is room for improvement on the compiler side. I&apos;ll leave the bug
&gt; here for now and we will investigate if we can fallback to the previous
&gt; behavior in case one type in the hierarchy cannot be properly resolved.

Thanks, for considering. The more I think about it, the more I think each bundle should only have to specify the VM that it, itself needs. What convinces me is the &quot;OSGi Ideal&quot; of being able to &quot;mix and match&quot; bundles. As long as we use API, there&apos;s no reason our &quot;current bundle&quot; could not be used with an &quot;old&quot; version of EMF running on 1.4 as long as it fits in version pre-req ranges. 

But, admit ... cases involving &quot;Enum&quot; are a little problematic. Guess that could be argued to be part of their (org.eclipse.xsd) API now and we should up our minimum pre-req. But still ... in general, should not be required to &quot;up&quot; compile level ... as far as I can tell ... just because the current version of a pre-req does. Thanks for the discussion/education.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2007035</commentid>
    <comment_count>21</comment_count>
      <attachid>204799</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-10-08 08:55:55 -0400</bug_when>
    <thetext>Created attachment 204799
test &amp; proposed fix

OK, here&apos;s an isolated test case and a small fix which we could apply to
make XSDImpl compile again against a 1.4 EE, if we want that.

Aside from the scenario in this bug that fix might lead also a direction
towards resolving bug 148844: with a similar approach we could also 
ignore binary methods that refer to missing types. I&apos;ll take a look at that.


The jar file that didn&apos;t make it into the patch is compiled from these
classes:

package p360164;

public class Provider {
	public MyEnum getE() {
		return MyEnum.TWO;
	}
}
----------
package p360164;

public enum MyEnum {
	ONE, TWO;
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2007038</commentid>
    <comment_count>22</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-10-08 09:14:50 -0400</bug_when>
    <thetext>More thoughts on the conceptual side:

I would naively assume that bundles don&apos;t lower their required BREE during
evolution but only raise it. If that is a sound assumption, I&apos;d suggest
the following strategy:

- *Build* your bundles against the lowest possible versions of all 
  dependencies. During this build use the lowest BREE that satisfies all.
  Only if this build succeeds will clients ever be able to use the
  low BREE.

- *Cross-check* your bundles against the highest supported versions of
  dependencies to see if any API changes break you bundle.
  For this compilation you may have to temporarily set a higher BREE.
  Only if this compilation succeeds will clients be able to use your bundle
  with newer versions of dependencies.

I don&apos;t think there&apos;s a way to get both guarantees in just one build.


One thing is special about BREE: you can&apos;t simply neglect your re-reqs
BREE and let every bundle pick its favored BREE, because unlike regular
OSGi bundles, you can only have one JRE at runtime. Thus every BREE
specification should be considered as a reexported dependency, no?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2007058</commentid>
    <comment_count>23</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2011-10-08 10:29:09 -0400</bug_when>
    <thetext>(In reply to comment #22)
&gt; More thoughts on the conceptual side:
&gt; 

All good observations. 

I have heard of some groups that do this sort of  &quot;multiple builds&quot; to check all the assumptions inherent in OSGi range assumptions, the focus there was not on BREE levels .... but, seems that would automatically happen, at least using PDE build. See
http://dev.eclipse.org/mhonarc/lists/cross-project-issues-dev/msg06601.html
Seems like a good idea ... too bad most of us have a hard time just building once :) 

While a different issue than the bug here, for casual readers, I&apos;d also like to document other known cases where the compile-time BREE has to be different than the true minimum runtime BREE ... this case had more to do with class libraries sometimes in JRE, sometimes provided externally ... and that there are ways to specify both a compile-time bree and a (lower) run-time bree. see http://wiki.eclipse.org/Execution_Environments#Compiling_against_more_than_is_required. 

I hate to &quot;add to your work&quot; but it would be nice to turn this into an optional &quot;feature&quot; for the JDT compiler ... allow a compiler directive such as &quot;strictTypeResolution&quot; that could be &quot;featured&quot; as doing a better job of checking assumptions ... but which might find issues users didn&apos;t care about so could be turned off (or ... turned into &quot;warning&quot; instead of &quot;error&quot;) since I think many such violations would not often effect resulting byte codes ... just tell you some of your assumptions might not be quite right. (I&apos;d suggest using the warning by default to better match current behavior). But, again, this was opened hoping to provide you with an early warning of a change in behavior ... so feel free to handle/track that deluxe solution separately if you&apos;d like.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2007561</commentid>
    <comment_count>24</comment_count>
    <who name="Thomas Watson">tjwatson</who>
    <bug_when>2011-10-10 09:09:38 -0400</bug_when>
    <thetext>(In reply to comment #20)
&gt; Thanks, for considering. The more I think about it, the more I think each
&gt; bundle should only have to specify the VM that it, itself needs. What convinces
&gt; me is the &quot;OSGi Ideal&quot; of being able to &quot;mix and match&quot; bundles. As long as we
&gt; use API, there&apos;s no reason our &quot;current bundle&quot; could not be used with an &quot;old&quot;
&gt; version of EMF running on 1.4 as long as it fits in version pre-req ranges. 

I agree with David, Each bundle should be responsible for determining what its own BREE is.  If a client bundle X has BREE J2SE-1.4 and requires some bundle Y at a range of [1.0,2.0) and bundle Y increases its BREE from J2SE-1.4 to J2SE-1.5 between bundle versions 1.1-&gt;1.2 then does that mean the binary bundle X is no longer valid when the new version of bundle y version 1.2 is installed?

&gt; 
&gt; But, admit ... cases involving &quot;Enum&quot; are a little problematic. Guess that
&gt; could be argued to be part of their (org.eclipse.xsd) API now and we should up
&gt; our minimum pre-req. But still ... in general, should not be required to &quot;up&quot;
&gt; compile level ... as far as I can tell ... just because the current version of
&gt; a pre-req does. Thanks for the discussion/education.

But if the client is not using Enum I don&apos;t see why it is required simply because the API of xsd now includes an Enum type.

(In reply to comment #22)
&gt; 
&gt; One thing is special about BREE: you can&apos;t simply neglect your re-reqs
&gt; BREE and let every bundle pick its favored BREE, because unlike regular
&gt; OSGi bundles, you can only have one JRE at runtime.

I disagree.  First of all, with singleton bundles you can force only one version to be resolved at a time.  Many eclipse bundles are singletons (I don&apos;t know about xsd), but this is besides the point.  Clients usually place a range on their constraints to disallow major version increases (e.g [1.0, 2.0)).  We have never thought of an increase in BREE to be considered a breaking change that requires a major version increase.  I hope we do not start thinking that it is a breaking change requiring a major version increase.  If increasing some bundle&apos;s BREE forces all bundles that transitively depend on it to also increase their BREE then to me that is a breaking change that would force a major version increase.  As David has stated this is going to be very disruptive.

&gt; Thus every BREE specification should be considered as a reexported 
&gt; dependency, no?

I don&apos;t think of it this way.  A bundle does not provide the classes from the VM.  Depending on some bundle that requires BREE JavaSE-1.6 from a bundle that has a BREE of j2SE-1.5 does not automatically grant the bundle access to all classes from the package javax.lang.model.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2007853</commentid>
    <comment_count>25</comment_count>
    <who name="David Williams">david_williams</who>
    <bug_when>2011-10-10 20:29:21 -0400</bug_when>
    <thetext>&gt;&gt; But, admit ... cases involving &quot;Enum&quot; are a little problematic. ...
&gt; 
&gt; But if the client is not using Enum I don&apos;t see why it is required simply
&gt; because the API of xsd now includes an Enum type.

Yes, forget what I said. I was thinking we were subclassing a type that declared itself as &apos;enum&apos; but we are not subclassing it ... we simply &quot;get&quot; an instance of one, check a few things, and move on ... so, yes, whether we &quot;get&quot; the one from an old 1.4 based version or the newer 1.5 based version should not matter to us. (that is, to our byte codes, at compile time). 

So, it is nice that the compiler finds potential runtime problems for us :) ...  and a warning would be just fine if not great! ... but, it would not be right for the compiler to prevent us from keeping the 1.4 bree. 

(And, while we are talking about &quot;bree&apos;s and jre levels here ... I am guessing that strict &quot;runtime resolution checking&quot; would effect assumptions about other pre-req libraries too ... which might be a more difficult issue to solve than merely changing BREE level.). 

Feel free to correct my thinking or descriptions if I&apos;ve mis-characterized anything. Appreciate the help.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2010119</commentid>
    <comment_count>26</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-10-13 13:32:26 -0400</bug_when>
    <thetext>Mh, it seems my compiler POV made me jump at conclusions that don&apos;t fit OSGi.

So the request is: the compiler must be able to cope with references of a
type that cannot be fully resolved. Here: references of an enum type while
super-class Enum cannot be found.

IMHO this makes it indeed very similar to bug 148844 which requests to 
gracefully handle a type where some methods mention types in their signatures
that are not directly visible to the project being compiled.

The immediate issue in this bug arises when all of the resolve phase never
touched the missing super-class, and only during analyseCode the new check 
triggered the undesired error message.

I think we could release this patch, but it will not be a full answer to
the requirement (which has never been implemented in full by the compiler).
E.g., if you take a variable of the type that has now become an enum and try
to invoke toString() you should see the same error even with 3.7:

The type java.lang.Enum cannot be resolved. It is indirectly referenced from
required .class files 

This is caused by the broken link to the super-class Object.
Should the compiler gracefully handle this too?
To what degree *should* we then cope with missing classes?

When adjusting the compiler to these requirements will this still be the
correct semantics outside OSGi settings, or should we introduce an
explicit OSGi mode for any changes we do here?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2010123</commentid>
    <comment_count>27</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-10-13 13:39:10 -0400</bug_when>
    <thetext>Ayush, do you think the patch is safe for fixing the regression at hand?

I guess the general picture deserves investigation in another bug.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2010135</commentid>
    <comment_count>28</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-10-13 13:51:50 -0400</bug_when>
    <thetext>When investigating full independence of a pre-req&apos;s BREE we may have to
ponder contrived examples like this:
* a class A changes its super from B (in version 1) to C (in version 2)
  assume C is provided by J2SE-1.5
* both B and C define a method m
* a client depends on A version 1 and invokes m (which is provided by B)
* at compile time we unexpectedly find A version 2, but still use J2SE-1.4.
  So C cannot be resolved, hence we don&apos;t find m, even though in all 
  situations at runtime A will have m, either from B or from C.
What is the compiler expected to answer?

At compliance 1.3 the dependency on class B would be hardcoded in the byte 
code, but starting with 1.4 this could actually work at runtime, but how can
it be compiled with A version 2 (which needs C) and J2SE-1.4 (which doesn&apos;t
provide C)?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2010176</commentid>
    <comment_count>29</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-10-13 14:52:33 -0400</bug_when>
    <thetext>I think this problem should be carefully assessed. It has to be clear that even if we release that patch, the problem is not completely solved. It will only be hidden.
Allowing a switch statement on an enum constant inside a project which is set to be 1.4 compliant looks wrong to me. Switching on enum constants is not allowed in 1.4. This violates the JLS.
Now we need to clearly explain what should be accepted and what should not be accepted.
If org.eclipse.xsd requires 1.5 types (like enum types) and is exposing enum types as API type, then I believe that consumers of that bundle should require 1.5 as well.
Accepting some usage of 1.5 code (compiled to target 1.4) inside 1.4 projects is one thing. When it is about accepting switching on enum constants, I believe this goes too far. This should not be accepted.
I agree that changing the BREE might not require a major version change, but switching to 1.5 and then adding a enum type as an API type makes it unusable the way it is used by wst.xsd code.
Referring to a generic type is different as it can be seen as a &quot;raw&quot; type and used as is. This can be handled. The case described here should not be handled.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2010226</commentid>
    <comment_count>30</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-10-13 16:43:02 -0400</bug_when>
    <thetext>(In reply to comment #29)
&gt; Allowing a switch statement on an enum constant inside a project which is set
&gt; to be 1.4 compliant looks wrong to me. Switching on enum constants is not
&gt; allowed in 1.4. This violates the JLS.

The type XSDContentTypeCategory is both a Java5-enum and a pre-5 emulation
using ints. XSDImpl uses getValue() to perform an int-based switch.
This is why I created bug 360317 as a separate issue: XSDImpl isn&apos;t affected
by that question, but if we fix this bug the other bug will become relevant.

Sorry if the test case was confusing, it is not a 1:1 extract from XSDImpl.

&gt; Now we need to clearly explain what should be accepted and what should not be
&gt; accepted.

Indeed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2010373</commentid>
    <comment_count>31</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-10-14 02:25:45 -0400</bug_when>
    <thetext>(In reply to comment #29)

&gt; Allowing a switch statement on an enum constant inside a project which is set
&gt; to be 1.4 compliant looks wrong to me. Switching on enum constants is not
&gt; allowed in 1.4. This violates the JLS.

Yes, agreed. Stephan, is the submitter&apos;s code dependent on this behavior ?
I am coming late to the party and haven&apos;t fully assimilated the fine
points of the long discussion, but I agree with the approach outlined here
in earlier comments and embodied in the patch posted, to wit that if the
connect supertype operation leads us into minefield, recognize that, wriggle
out of there, declare the type is not an autocloseable entity and move on.

&gt; Referring to a generic type is different as it can be seen as a &quot;raw&quot; type and
&gt; used as is. This can be handled. The case described here should not be handled.

Yes.

(In reply to comment #30)
&gt; (In reply to comment #29)

[...]

&gt; The type XSDContentTypeCategory is both a Java5-enum and a pre-5 emulation
&gt; using ints. XSDImpl uses getValue() to perform an int-based switch.

This I take to read that the submitter&apos;s code is not expecting to switch
on the enum directly and expect things to work. 

&gt; This is why I created bug 360317 as a separate issue: XSDImpl isn&apos;t affected
&gt; by that question, but if we fix this bug the other bug will become relevant.

This looks like a plain oversight on the part of the compiler. There should
have a call to org.eclipse.jdt.internal.compiler.problem.ProblemReporter.incorrectSwitchType(Expression, TypeBinding) from the appropriate place when the switch expression
is an enum at level &lt;= 1.4

&gt; Sorry if the test case was confusing, it is not a 1:1 extract from XSDImpl.
&gt; 
&gt; &gt; Now we need to clearly explain what should be accepted and what should not be
&gt; &gt; accepted.

I&apos;ll post a patch shortly that I have been playing with. Stephan, please
experiment with that and let me know if there are any more open issues that
I have failed to take note of.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2010374</commentid>
    <comment_count>32</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-10-14 02:28:44 -0400</bug_when>
    <thetext>(In reply to comment #31)

&gt; &gt; This is why I created bug 360317 as a separate issue: XSDImpl isn&apos;t affected
&gt; &gt; by that question, but if we fix this bug the other bug will become relevant.

BTW, how did you stumble upon this scenario for the bug 360317 ? If it is
by thought experiment/imagination/extrapolation from code inspection, we
also need to ask ourselves what other operations on enums should have been
forbidden at 1.4 level under mixed mode set up and are not in practice.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2010382</commentid>
    <comment_count>33</comment_count>
    <who name="Ed Merks">Ed.Merks</who>
    <bug_when>2011-10-14 02:42:25 -0400</bug_when>
    <thetext>FYI

EMFs generated enums followed the type safe enum pattern. They currently and have always implemented this interface:

package org.eclipse.emf.common.util;


/**
 * An interface implemented by the enumerators of a type-safe enum.
 */
public interface Enumerator
{
  /**
   * Returns the name of the enumerator.
   * @return the name.
   */
  String getName();

  /**
   * Returns the &lt;code&gt;int&lt;/code&gt;value of the enumerator.
   * @return the value.
   */
  int getValue();
  
  /**
   * Returns the literal value of the enumerator.
   * @return the literal.
   */
  String getLiteral();
}


Here&apos;s how they look in Java 5.0

public enum GenPropertyKind implements Enumerator
{
  EDITABLE_LITERAL(0, &quot;Editable&quot;, &quot;Editable&quot;),
  READONLY_LITERAL(1, &quot;Readonly&quot;, &quot;Readonly&quot;),
  NONE_LITERAL(2, &quot;None&quot;, &quot;None&quot;);
  public static final int EDITABLE = 0;
  public static final int READONLY = 1;
  public static final int NONE = 2;

  private static final GenPropertyKind[] VALUES_ARRAY =
    new GenPropertyKind[]
    {
      EDITABLE_LITERAL,
      READONLY_LITERAL,
      NONE_LITERAL,
    };

  public static final List&lt;GenPropertyKind&gt; VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

  public static GenPropertyKind get(String literal)
  {
    for (int i = 0; i &lt; VALUES_ARRAY.length; ++i)
    {
      GenPropertyKind result = VALUES_ARRAY[i];
      if (result.toString().equals(literal))
      {
        return result;
      }
    }
    return null;
  }

  public static GenPropertyKind getByName(String name)
  {
    for (int i = 0; i &lt; VALUES_ARRAY.length; ++i)
    {
      GenPropertyKind result = VALUES_ARRAY[i];
      if (result.getName().equals(name))
      {
        return result;
      }
    }
    return null;
  }

  public static GenPropertyKind get(int value)
  {
    switch (value)
    {
      case EDITABLE: return EDITABLE_LITERAL;
      case READONLY: return READONLY_LITERAL;
      case NONE: return NONE_LITERAL;
    }
    return null;
  }

  private final int value;

  private final String name;

  private final String literal;

  private GenPropertyKind(int value, String name, String literal)
  {
    this.value = value;
    this.name = name;
    this.literal = literal;
  }

  public int getValue()
  {
    return value;
  }

  public String getName()
  {
    return name;
  }

  public String getLiteral()
  {
    return literal;
  }

  public String toString()
  {
    return literal;
  }
}


Here&apos;s how they looked before

public final class GenPropertyKind extends AbstractEnumerator
{
  public static final int EDITABLE = 0;

  public static final int READONLY = 1;

  public static final int NONE = 2;

  public static final GenPropertyKind EDITABLE_LITERAL = new GenPropertyKind(EDITABLE, &quot;Editable&quot;, &quot;Editable&quot;);

  public static final GenPropertyKind READONLY_LITERAL = new GenPropertyKind(READONLY, &quot;Readonly&quot;, &quot;Readonly&quot;);

  public static final GenPropertyKind NONE_LITERAL = new GenPropertyKind(NONE, &quot;None&quot;, &quot;None&quot;);

  private static final GenPropertyKind[] VALUES_ARRAY =
    new GenPropertyKind[]
    {
      EDITABLE_LITERAL,
      READONLY_LITERAL,
      NONE_LITERAL,
    };

  public static final List VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

  public static GenPropertyKind get(String literal)
  {
    for (int i = 0; i &lt; VALUES_ARRAY.length; ++i)
    {
      GenPropertyKind result = VALUES_ARRAY[i];
      if (result.toString().equals(literal))
      {
        return result;
      }
    }
    return null;
  }

  public static GenPropertyKind getByName(String name)
  {
    for (int i = 0; i &lt; VALUES_ARRAY.length; ++i)
    {
      GenPropertyKind result = VALUES_ARRAY[i];
      if (result.getName().equals(name))
      {
        return result;
      }
    }
    return null;
  }

  public static GenPropertyKind get(int value)
  {
    switch (value)
    {
      case EDITABLE: return EDITABLE_LITERAL;
      case READONLY: return READONLY_LITERAL;
      case NONE: return NONE_LITERAL;
    }
    return null;	
  }


  private GenPropertyKind(int value, String name, String literal)
  {
    super(value, name, literal);
  }

} //GenPropertyKind</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2010422</commentid>
    <comment_count>34</comment_count>
      <attachid>205181</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-10-14 03:53:48 -0400</bug_when>
    <thetext>Created attachment 205181
Plausible fix

Plausible cumulative patch for bug 360164 and bug 360317.

Passes all tests. Stephan, let me know if there are still open issues
or we have managed to push the problem under a suitably large rug :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2010423</commentid>
    <comment_count>35</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-10-14 03:56:00 -0400</bug_when>
    <thetext>(In reply to comment #34)
&gt; Created attachment 205181 [details]
&gt; Plausible fix
&gt; 
&gt; Plausible cumulative patch for bug 360164 and bug 360317.
&gt; 
&gt; Passes all tests. Stephan, let me know if there are still open issues
&gt; or we have managed to push the problem under a suitably large rug :)

Patch is missing test BTW.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2010475</commentid>
    <comment_count>36</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-10-14 06:08:34 -0400</bug_when>
    <thetext>(In reply to comment #34)
&gt; Created attachment 205181 [details] [diff]
&gt; Plausible fix

A minor observation. The other switch related warnings read &quot;cannot switch on....Only convertible int values....are permitted&quot;.
So maybe the latter &quot;Only convertible int values are permitted&quot; can be added to the new error msg as well, for the sake of uniformity.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2012324</commentid>
    <comment_count>37</comment_count>
      <attachid>205424</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-10-18 10:29:57 -0400</bug_when>
    <thetext>Created attachment 205424
tests &amp; combined fix v3

This patch consolidates the previous patches with
- dedicated tests for legal/illegal use of the enum type,
- better wording for the new diagnostic.
To be released shortly.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2012333</commentid>
    <comment_count>38</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-10-18 10:36:52 -0400</bug_when>
    <thetext>Released as commit 2d89f0516f5e5910bcd18015e8090ed0805dbb4e for 3.8 M3.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2012382</commentid>
    <comment_count>39</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-10-18 11:21:13 -0400</bug_when>
    <thetext>Just so as not to leave the review flag dangling, patch has been reviewed by
both Ayush and Srikanth, so updating with +1, Thanks for the fix Stephan.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2013662</commentid>
    <comment_count>40</comment_count>
      <attachid>205590</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-10-20 04:25:17 -0400</bug_when>
    <thetext>Created attachment 205590
Additional fixes &amp; tests

Olivier pointed out another scenario that continues to fail even after
the resolution of the bug.

Turns out https://bugs.eclipse.org/bugs/show_bug.cgi?id=349326 introduced
supertype walks in three places of which we built an escape hatch only
for one. This additional patch takes care of the other two places.

Thanks to Olivier and to Ayush for putting together a junit.

Tests are running. I&apos;ll update after they finish.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2013729</commentid>
    <comment_count>41</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-10-20 06:12:02 -0400</bug_when>
    <thetext>(In reply to comment #40)

&gt; Tests are running. I&apos;ll update after they finish.

Ayush, all tests pass, Can you please release the patch as I am having some
issues with git. Stephan has reviewed the patch already. TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2013812</commentid>
    <comment_count>42</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-10-20 08:41:26 -0400</bug_when>
    <thetext>Released last patch in HEAD for 3.8M3 via commit 7cc08fd6458164ad4911bfd35d3157c5667751d0</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2015180</commentid>
    <comment_count>43</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-10-24 04:33:05 -0400</bug_when>
    <thetext>Verified for 3.8 M3 using build id: N20111022-2000. Olivier also
independently ran into this problem on his set of sources and
could verify that this issue is fixed by the patch in comment# 40.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>204725</attachid>
            <date>2011-10-06 21:19:00 -0400</date>
            <delta_ts>2011-10-06 21:19:01 -0400</delta_ts>
            <desc>team project set for the 15 projects requried for build wst.xsd.core</desc>
            <filename>compprob.psf</filename>
            <type>text/plain</type>
            <size>2330</size>
            <attacher name="David Williams">david_williams</attacher>
            
              <data encoding="base64">PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxwc2YgdmVyc2lvbj0iMi4w
Ij4NCjxwcm92aWRlciBpZD0ib3JnLmVjbGlwc2UudGVhbS5jdnMuY29yZS5jdnNuYXR1cmUiPg0K
PHByb2plY3QgcmVmZXJlbmNlPSIxLjAsOmV4dHNzaDpkZXYuZWNsaXBzZS5vcmc6L2N2c3Jvb3Qv
dG9vbHMsb3JnLmVjbGlwc2Uub3JiaXQvb3JnLmFwYWNoZS54ZXJjZXMsb3JnLmFwYWNoZS54ZXJj
ZXMsdjJfOV8wIi8+DQo8cHJvamVjdCByZWZlcmVuY2U9IjEuMCw6ZXh0c3NoOmRldi5lY2xpcHNl
Lm9yZzovY3Zzcm9vdC90b29scyxvcmcuZWNsaXBzZS5vcmJpdC9vcmcuYXBhY2hlLnhtbC5yZXNv
bHZlcixvcmcuYXBhY2hlLnhtbC5yZXNvbHZlcix2MV8yXzAiLz4NCjxwcm9qZWN0IHJlZmVyZW5j
ZT0iMS4wLDpleHRzc2g6ZGV2LmVjbGlwc2Uub3JnOi9jdnNyb290L3Rvb2xzLG9yZy5lY2xpcHNl
Lm9yYml0L29yZy5hcGFjaGUueG1sLnNlcmlhbGl6ZXIsb3JnLmFwYWNoZS54bWwuc2VyaWFsaXpl
cix2Ml83XzEiLz4NCjxwcm9qZWN0IHJlZmVyZW5jZT0iMS4wLDpleHRzc2g6ZGV2LmVjbGlwc2Uu
b3JnOi9jdnNyb290L3dlYnRvb2xzLGNvbW1vbi9wbHVnaW5zL29yZy5lY2xpcHNlLmplbS51dGls
LG9yZy5lY2xpcHNlLmplbS51dGlsIi8+DQo8cHJvamVjdCByZWZlcmVuY2U9IjEuMCw6ZXh0c3No
OmRldi5lY2xpcHNlLm9yZzovY3Zzcm9vdC93ZWJ0b29scyxjb21tb24vcGx1Z2lucy9vcmcuZWNs
aXBzZS53c3QuY29tbW9uLmNvcmUsb3JnLmVjbGlwc2Uud3N0LmNvbW1vbi5jb3JlIi8+DQo8cHJv
amVjdCByZWZlcmVuY2U9IjEuMCw6ZXh0c3NoOmRldi5lY2xpcHNlLm9yZzovY3Zzcm9vdC93ZWJ0
b29scyxjb21tb24vcGx1Z2lucy9vcmcuZWNsaXBzZS53c3QuY29tbW9uLmVtZixvcmcuZWNsaXBz
ZS53c3QuY29tbW9uLmVtZiIvPg0KPHByb2plY3QgcmVmZXJlbmNlPSIxLjAsOmV4dHNzaDpkZXYu
ZWNsaXBzZS5vcmc6L2N2c3Jvb3Qvd2VidG9vbHMsY29tbW9uL3BsdWdpbnMvb3JnLmVjbGlwc2Uu
d3N0LmNvbW1vbi5lbWZ3b3JrYmVuY2guaW50ZWdyYXRpb24sb3JnLmVjbGlwc2Uud3N0LmNvbW1v
bi5lbWZ3b3JrYmVuY2guaW50ZWdyYXRpb24iLz4NCjxwcm9qZWN0IHJlZmVyZW5jZT0iMS4wLDpl
eHRzc2g6ZGV2LmVjbGlwc2Uub3JnOi9jdnNyb290L3dlYnRvb2xzLGNvbW1vbi9wbHVnaW5zL29y
Zy5lY2xpcHNlLndzdC5jb21tb24uZW52aXJvbm1lbnQsb3JnLmVjbGlwc2Uud3N0LmNvbW1vbi5l
bnZpcm9ubWVudCIvPg0KPHByb2plY3QgcmVmZXJlbmNlPSIxLjAsOmV4dHNzaDpkZXYuZWNsaXBz
ZS5vcmc6L2N2c3Jvb3Qvd2VidG9vbHMsY29tbW9uL3BsdWdpbnMvb3JnLmVjbGlwc2Uud3N0LmNv
bW1vbi5mcmFtZXdvcmtzLG9yZy5lY2xpcHNlLndzdC5jb21tb24uZnJhbWV3b3JrcyIvPg0KPHBy
b2plY3QgcmVmZXJlbmNlPSIxLjAsOmV4dHNzaDpkZXYuZWNsaXBzZS5vcmc6L2N2c3Jvb3Qvd2Vi
dG9vbHMsY29tbW9uL3BsdWdpbnMvb3JnLmVjbGlwc2Uud3N0LmNvbW1vbi5wcm9qZWN0LmZhY2V0
LmNvcmUsb3JnLmVjbGlwc2Uud3N0LmNvbW1vbi5wcm9qZWN0LmZhY2V0LmNvcmUiLz4NCjxwcm9q
ZWN0IHJlZmVyZW5jZT0iMS4wLDpleHRzc2g6ZGV2LmVjbGlwc2Uub3JnOi9jdnNyb290L3dlYnRv
b2xzLGNvbW1vbi9wbHVnaW5zL29yZy5lY2xpcHNlLndzdC5jb21tb24udXJpcmVzb2x2ZXIsb3Jn
LmVjbGlwc2Uud3N0LmNvbW1vbi51cmlyZXNvbHZlciIvPg0KPHByb2plY3QgcmVmZXJlbmNlPSIx
LjAsOmV4dHNzaDpkZXYuZWNsaXBzZS5vcmc6L2N2c3Jvb3Qvd2VidG9vbHMsc291cmNlZWRpdGlu
Zy9wbHVnaW5zL29yZy5lY2xpcHNlLndzdC5zc2UuY29yZSxvcmcuZWNsaXBzZS53c3Quc3NlLmNv
cmUiLz4NCjxwcm9qZWN0IHJlZmVyZW5jZT0iMS4wLDpleHRzc2g6ZGV2LmVjbGlwc2Uub3JnOi9j
dnNyb290L3dlYnRvb2xzLGNvbW1vbi9wbHVnaW5zL29yZy5lY2xpcHNlLndzdC52YWxpZGF0aW9u
LG9yZy5lY2xpcHNlLndzdC52YWxpZGF0aW9uIi8+DQo8cHJvamVjdCByZWZlcmVuY2U9IjEuMCw6
ZXh0c3NoOmRldi5lY2xpcHNlLm9yZzovY3Zzcm9vdC93ZWJ0b29scyxzb3VyY2VlZGl0aW5nL3Bs
dWdpbnMvb3JnLmVjbGlwc2Uud3N0LnhtbC5jb3JlLG9yZy5lY2xpcHNlLndzdC54bWwuY29yZSIv
Pg0KPHByb2plY3QgcmVmZXJlbmNlPSIxLjAsOmV4dHNzaDpkZXYuZWNsaXBzZS5vcmc6L2N2c3Jv
b3Qvd2VidG9vbHMsc291cmNlZWRpdGluZy9wbHVnaW5zL29yZy5lY2xpcHNlLndzdC54c2QuY29y
ZSxvcmcuZWNsaXBzZS53c3QueHNkLmNvcmUiLz4NCjwvcHJvdmlkZXI+DQo8L3BzZj4=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>204799</attachid>
            <date>2011-10-08 08:55:00 -0400</date>
            <delta_ts>2011-10-18 10:29:57 -0400</delta_ts>
            <desc>test &amp; proposed fix</desc>
            <filename>Bug_360164.patch</filename>
            <type>text/plain</type>
            <size>5111</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9tb2RlbC9KYXZhUHJvamVjdFRlc3RzLmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
bW9kZWwvSmF2YVByb2plY3RUZXN0cy5qYXZhCmluZGV4IDYzNTc4MDMuLjI1MGI2NmUgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9tb2RlbC9KYXZhUHJvamVjdFRlc3RzLmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21v
ZGVsL0phdmFQcm9qZWN0VGVzdHMuamF2YQpAQCAtMzcsNyArMzcsNyBAQAogCXN1cGVyKG5hbWUp
OwogfQogc3RhdGljIHsKLS8vCVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1tdIHsgInRlc3RBZGRF
eHRlcm5hbExpYkZvbGRlcjYiIH07CisvLwlURVNUU19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7ICJ0
ZXN0QnVnMzYwMTY0IiB9OwogfQogcHVibGljIHN0YXRpYyBUZXN0IHN1aXRlKCkgewogCVRlc3RT
dWl0ZSBzdWl0ZSA9IChUZXN0U3VpdGUpIGJ1aWxkTW9kZWxUZXN0U3VpdGUoSmF2YVByb2plY3RU
ZXN0cy5jbGFzcyk7CkBAIC0yMzg5LDQgKzIzODksMzYgQEAKIAkJZGVsZXRlUHJvamVjdCgiSmF2
YVByb2plY3RUZXN0c0ludmFsaWRQcm9qZWN0Iik7CiAJfQogfQorLy8gQnVnIDM2MDE2NCAtIENv
bXBpbGUgZXJyb3IgaW4gWFNESW1wbAorLy8gdGVzdCB0aGF0IHdlIGNhbiB0b2xlcmF0ZSBpZiBh
IDEuNCBwcm9qZWN0IHJlZmVycyB0byBhbiBlbnVtIGluc2lkZSBhIGxpYnJhcnkuCitwdWJsaWMg
dm9pZCB0ZXN0QnVnMzYwMTY0KCkgdGhyb3dzIElPRXhjZXB0aW9uLCBDb3JlRXhjZXB0aW9uIHsK
KwlTdHJpbmcgbGliUGF0aCA9IGdldFdvcmtzcGFjZVBhdGgoKSsiSmF2YVByb2plY3RUZXN0cy9i
aW4vYnVnMzYwMTY0LmphciI7CisJdHJ5IHsKKwkJdGhpcy5jcmVhdGVKYXZhUHJvamVjdCgiUCIs
IG5ldyBTdHJpbmdbXSB7InNyYyJ9LCBuZXcgU3RyaW5nW10geyJKQ0xfTElCIiwgbGliUGF0aH0s
ICJiaW4iLCBKYXZhQ29yZS5WRVJTSU9OXzFfNCk7CisJCUlGaWxlIGZpbGUgPSBjcmVhdGVGaWxl
KCIvUC9zcmMvWC5qYXZhIiwgCisJCQkJImltcG9ydCBwMzYwMTY0LlByb3ZpZGVyO1xuIiArCisJ
CQkJImltcG9ydCBwMzYwMTY0Lk15RW51bTtcbiIgKworCQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4i
ICsKKwkJCQkiICAgIGludCBmb28oUHJvdmlkZXIgcCkge1xuIiArCisJCQkJIiAgICAgICAgTXlF
bnVtIGUgPSBwLmdldEUoKTtcbiIgKworCQkJCSIgICAgICAgIHN3aXRjaCAoZSkge1xuIiArCisJ
CQkJIiAgICAgICAgY2FzZSBPTkU6IHJldHVybiAxO1xuIiArCisJCQkJIiAgICAgICAgY2FzZSBU
V086IHJldHVybiAyO1xuIiArCisJCQkJIiAgICAgICAgfVxuIiArCisJCQkJIiAgICAgICAgcmV0
dXJuIDA7XG4iICsKKwkJCQkiICAgIH1cbiIgKworCQkJCSJ9IgorCQkpOwkKKwkJSUNvbXBpbGF0
aW9uVW5pdCB1bml0ID0gKElDb21waWxhdGlvblVuaXQpSmF2YUNvcmUuY3JlYXRlKGZpbGUpOwor
CQlQcm9ibGVtUmVxdWVzdG9yIHByb2JsZW1SZXF1ZXN0b3IgPSBuZXcgUHJvYmxlbVJlcXVlc3Rv
cigpOworCQlXb3JraW5nQ29weU93bmVyIG93bmVyID0gbmV3V29ya2luZ0NvcHlPd25lcihwcm9i
bGVtUmVxdWVzdG9yKTsKKwkJdW5pdC5nZXRXb3JraW5nQ29weShvd25lciwgbnVsbCk7CisJCWFz
c2VydFByb2JsZW1zKCJVbmV4cGVjdGVkIHByb2JsZW1zIiwgCisJCQkJIi0tLS0tLS0tLS1cbiIg
KyAKKwkJCQkiLS0tLS0tLS0tLVxuIiwgCisJCQkJcHJvYmxlbVJlcXVlc3Rvcik7CisJfSBmaW5h
bGx5IHsKKwkJdGhpcy5kZWxldGVQcm9qZWN0KCJQIik7CisJfQorfQogfQpkaWZmIC0tZ2l0IGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvd29ya3NwYWNlL0phdmFQcm9qZWN0VGVz
dHMvYmluL2J1ZzM2MDE2NC5qYXIgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC93
b3Jrc3BhY2UvSmF2YVByb2plY3RUZXN0cy9iaW4vYnVnMzYwMTY0LmphcgpuZXcgZmlsZSBtb2Rl
IDEwMDY0NAppbmRleCAwMDAwMDAwLi4xMzRmM2Y2Ci0tLSAvZGV2L251bGwKKysrIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvd29ya3NwYWNlL0phdmFQcm9qZWN0VGVzdHMvYmlu
L2J1ZzM2MDE2NC5qYXIKQmluYXJ5IGZpbGVzIGRpZmZlcgpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xv
b2t1cC9CaW5hcnlUeXBlQmluZGluZy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9CaW5hcnlUeXBlQmlu
ZGluZy5qYXZhCmluZGV4IDc0ZGQwZWIuLjhhODQ2MTkgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29r
dXAvQmluYXJ5VHlwZUJpbmRpbmcuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0JpbmFyeVR5cGVC
aW5kaW5nLmphdmEKQEAgLTk3NSw4ICs5NzUsMTQgQEAKIH0KIHB1YmxpYyBib29sZWFuIGhhc1R5
cGVCaXQoaW50IGJpdCkgewogCS8vIGVuc3VyZSBoaWVyYXJjaHkgaXMgcmVzb2x2ZWQsIHdoaWNo
IHdpbGwgcHJvcGFnYXRlIGJpdHMgZG93biB0byB1cwotCXN1cGVyY2xhc3MoKTsKLQlzdXBlcklu
dGVyZmFjZXMoKTsKKwlib29sZWFuIHdhc1RvbGVyYXRpbmdNaXNzaW5nVHlwZVByb2Nlc3NpbmdB
bm5vdGF0aW9ucyA9IHRoaXMuZW52aXJvbm1lbnQubWF5VG9sZXJhdGVNaXNzaW5nVHlwZTsKKwl0
aGlzLmVudmlyb25tZW50Lm1heVRvbGVyYXRlTWlzc2luZ1R5cGUgPSB0cnVlOworCXRyeSB7CisJ
CXN1cGVyY2xhc3MoKTsKKwkJc3VwZXJJbnRlcmZhY2VzKCk7CisJfSBmaW5hbGx5IHsKKwkJdGhp
cy5lbnZpcm9ubWVudC5tYXlUb2xlcmF0ZU1pc3NpbmdUeXBlID0gd2FzVG9sZXJhdGluZ01pc3Np
bmdUeXBlUHJvY2Vzc2luZ0Fubm90YXRpb25zOworCX0KIAlyZXR1cm4gKHRoaXMudHlwZUJpdHMg
JiBiaXQpICE9IDA7CiB9CiBwcml2YXRlIHZvaWQgaW5pdGlhbGl6ZVR5cGVWYXJpYWJsZShUeXBl
VmFyaWFibGVCaW5kaW5nIHZhcmlhYmxlLCBUeXBlVmFyaWFibGVCaW5kaW5nW10gZXhpc3RpbmdW
YXJpYWJsZXMsIFNpZ25hdHVyZVdyYXBwZXIgd3JhcHBlciwgY2hhcltdW11bXSBtaXNzaW5nVHlw
ZU5hbWVzKSB7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0xvb2t1cEVudmlyb25tZW50Lmph
dmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvbG9va3VwL0xvb2t1cEVudmlyb25tZW50LmphdmEKaW5kZXggODRkM2U3NC4u
MmU3ZmU5NyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Mb29rdXBFbnZpcm9ubWVudC5qYXZh
CisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9sb29rdXAvTG9va3VwRW52aXJvbm1lbnQuamF2YQpAQCAtNzQsNiArNzQs
NyBAQAogCXByaXZhdGUgQXJyYXlMaXN0IG1pc3NpbmdUeXBlczsKIAlTZXQgdHlwZXNCZWluZ0Nv
bm5lY3RlZDsKIAlwdWJsaWMgYm9vbGVhbiBpc1Byb2Nlc3NpbmdBbm5vdGF0aW9ucyA9IGZhbHNl
OworCXB1YmxpYyBib29sZWFuIG1heVRvbGVyYXRlTWlzc2luZ1R5cGUgPSBmYWxzZTsKIAogCWZp
bmFsIHN0YXRpYyBpbnQgQlVJTERfRklFTERTX0FORF9NRVRIT0RTID0gNDsKIAlmaW5hbCBzdGF0
aWMgaW50IEJVSUxEX1RZUEVfSElFUkFSQ0hZID0gMTsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29r
dXAvVW5yZXNvbHZlZFJlZmVyZW5jZUJpbmRpbmcuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvVW5yZXNv
bHZlZFJlZmVyZW5jZUJpbmRpbmcuamF2YQppbmRleCAzMDM4MzY4Li4yZGE0OTg0IDEwMDY0NAot
LS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvbG9va3VwL1VucmVzb2x2ZWRSZWZlcmVuY2VCaW5kaW5nLmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2xvb2t1cC9VbnJlc29sdmVkUmVmZXJlbmNlQmluZGluZy5qYXZhCkBAIC01NSw3ICs1
NSw3IEBACiAJCX0KIAkJaWYgKHRhcmdldFR5cGUgPT0gbnVsbCB8fCB0YXJnZXRUeXBlID09IHRo
aXMpIHsgLy8gY291bGQgbm90IHJlc29sdmUgYW55IGJldHRlciwgZXJyb3Igd2FzIGFscmVhZHkg
cmVwb3J0ZWQgYWdhaW5zdCBpdAogCQkJLy8gcmVwb3J0IHRoZSBtaXNzaW5nIGNsYXNzIGZpbGUg
Zmlyc3QgLSBvbmx5IGlmIG5vdCByZXNvbHZpbmcgYSBwcmV2aW91c2x5IG1pc3NpbmcgdHlwZQot
CQkJaWYgKCh0aGlzLnRhZ0JpdHMgJiBUYWdCaXRzLkhhc01pc3NpbmdUeXBlKSA9PSAwKSB7CisJ
CQlpZiAoKHRoaXMudGFnQml0cyAmIFRhZ0JpdHMuSGFzTWlzc2luZ1R5cGUpID09IDAgJiYgIWVu
dmlyb25tZW50Lm1heVRvbGVyYXRlTWlzc2luZ1R5cGUpIHsKIAkJCQllbnZpcm9ubWVudC5wcm9i
bGVtUmVwb3J0ZXIuaXNDbGFzc1BhdGhDb3JyZWN0KAogCQkJCQl0aGlzLmNvbXBvdW5kTmFtZSwK
IAkJCQkJZW52aXJvbm1lbnQudW5pdEJlaW5nQ29tcGxldGVkLAo=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>205181</attachid>
            <date>2011-10-14 03:53:00 -0400</date>
            <delta_ts>2011-10-18 10:29:57 -0400</delta_ts>
            <desc>Plausible fix</desc>
            <filename>patch.txt</filename>
            <type>text/plain</type>
            <size>8484</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0NvbXBpbGVySW52b2Nh
dGlvblRlc3RzLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMv
b3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9Db21waWxlcklu
dm9jYXRpb25UZXN0cy5qYXZhCmluZGV4IDRlMWNiYTcuLjlmMDk5NWQgMTAwNjQ0Ci0tLSBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29y
ZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0NvbXBpbGVySW52b2NhdGlvblRlc3RzLmphdmEK
KysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNl
L2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vQ29tcGlsZXJJbnZvY2F0aW9uVGVz
dHMuamF2YQpAQCAtODA5LDYgKzgwOSw3IEBACiAJCWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMu
cHV0KCJTdXBlcmNsYXNzTm90Rm91bmQiLCBERVBSRUNBVEVEKTsKIAkJZXhwZWN0ZWRQcm9ibGVt
QXR0cmlidXRlcy5wdXQoIlN1cGVyY2xhc3NOb3RWaXNpYmxlIiwgREVQUkVDQVRFRCk7CiAJCWV4
cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0KCJTdXBlcmZsdW91c1NlbWljb2xvbiIsIG5ldyBQ
cm9ibGVtQXR0cmlidXRlcyhDYXRlZ29yaXplZFByb2JsZW0uQ0FUX1BPVEVOVElBTF9QUk9HUkFN
TUlOR19QUk9CTEVNKSk7CisJCWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0KCJTd2l0Y2hP
bkVudW1Ob3RCZWxvdzE1IiwgbmV3IFByb2JsZW1BdHRyaWJ1dGVzKENhdGVnb3JpemVkUHJvYmxl
bS5DQVRfVFlQRSkpOwogCQlleHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiU3dpdGNoT25T
dHJpbmdzTm90QmVsb3cxNyIsIG5ldyBQcm9ibGVtQXR0cmlidXRlcyhDYXRlZ29yaXplZFByb2Js
ZW0uQ0FUX1RZUEUpKTsKIAkJZXhwZWN0ZWRQcm9ibGVtQXR0cmlidXRlcy5wdXQoIlRhc2siLCBu
ZXcgUHJvYmxlbUF0dHJpYnV0ZXMoQ2F0ZWdvcml6ZWRQcm9ibGVtLkNBVF9JTlRFUk5BTCkpOwog
CQlleHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiVGhpc0luU3RhdGljQ29udGV4dCIsIG5l
dyBQcm9ibGVtQXR0cmlidXRlcyhDYXRlZ29yaXplZFByb2JsZW0uQ0FUX0lOVEVSTkFMKSk7CkBA
IC0xNDgyLDYgKzE0ODMsNyBAQAogCQlleHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiU3Vw
ZXJjbGFzc05vdEZvdW5kIiwgU0tJUCk7CiAJCWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0
KCJTdXBlcmNsYXNzTm90VmlzaWJsZSIsIG5ldyBQcm9ibGVtQXR0cmlidXRlcyhKYXZhQ29yZS5D
T01QSUxFUl9QQl9SRURVTkRBTlRfU1VQRVJJTlRFUkZBQ0UpKTsKIAkJZXhwZWN0ZWRQcm9ibGVt
QXR0cmlidXRlcy5wdXQoIlN1cGVyZmx1b3VzU2VtaWNvbG9uIiwgbmV3IFByb2JsZW1BdHRyaWJ1
dGVzKEphdmFDb3JlLkNPTVBJTEVSX1BCX0VNUFRZX1NUQVRFTUVOVCkpOworCQlleHBlY3RlZFBy
b2JsZW1BdHRyaWJ1dGVzLnB1dCgiU3dpdGNoT25FbnVtTm90QmVsb3cxNSIsIFNLSVApOwogCQll
eHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiU3dpdGNoT25TdHJpbmdzTm90QmVsb3cxNyIs
IFNLSVApOwogCQlleHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiVGFzayIsIFNLSVApOwog
CQlleHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiVGhpc0luU3RhdGljQ29udGV4dCIsIFNL
SVApOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2NvcmUvY29tcGlsZXIvSVByb2JsZW0uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9jb3JlL2NvbXBpbGVyL0lQcm9ibGVtLmphdmEKaW5k
ZXggNDM3NWU0OC4uOGNhODk5OSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2NvcmUvY29tcGlsZXIvSVByb2JsZW0uamF2YQorKysgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvY29yZS9jb21waWxl
ci9JUHJvYmxlbS5qYXZhCkBAIC0xNDA5LDYgKzE0MDksOCBAQAogCWludCBVbmNsb3NlZENsb3Nl
YWJsZUF0RXhpdCA9IEludGVybmFsICsgODg4OwogCS8qKiBAc2luY2UgMy44ICovCiAJaW50IEV4
cGxpY2l0bHlDbG9zZWRBdXRvQ2xvc2VhYmxlID0gSW50ZXJuYWwgKyA4ODk7CisJLyoqIEBzaW5j
ZSAzLjggKi8KKwlpbnQgU3dpdGNoT25FbnVtTm90QmVsb3cxNSA9IFR5cGVSZWxhdGVkICsgODkw
OwkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9CiAJLyoq
CiAJICogRXh0ZXJuYWwgcHJvYmxlbXMgLS0gVGhlc2UgYXJlIHByb2JsZW1zIGRlZmluZWQgYnkg
b3RoZXIgcGx1Z2lucwogCSAqLwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Td2l0Y2hTdGF0ZW1l
bnQuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9hc3QvU3dpdGNoU3RhdGVtZW50LmphdmEKaW5kZXggNjA5YThhNS4u
NTJiOTYzMCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Td2l0Y2hTdGF0ZW1lbnQuamF2YQorKysg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvYXN0L1N3aXRjaFN0YXRlbWVudC5qYXZhCkBAIC00NjMsNiArNDYzLDkgQEAKIAkJ
CQkJCQlicmVhayBjaGVja1R5cGU7CiAJCQkJCX0gZWxzZSBpZiAoZXhwcmVzc2lvblR5cGUuaXNF
bnVtKCkpIHsKIAkJCQkJCWlzRW51bVN3aXRjaCA9IHRydWU7CisJCQkJCQlpZiAodXBwZXJTY29w
ZS5jb21waWxlck9wdGlvbnMoKS5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMu
SkRLMV81KSB7CisJCQkJCQkJdXBwZXJTY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5pbmNvcnJlY3RT
d2l0Y2hUeXBlKHRoaXMuZXhwcmVzc2lvbiwgZXhwcmVzc2lvblR5cGUpOyAvLyBodHRwczovL2J1
Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzYwMTY0CisJCQkJCQl9CiAJCQkJ
CQlicmVhayBjaGVja1R5cGU7CiAJCQkJCX0gZWxzZSBpZiAodXBwZXJTY29wZS5pc0JveGluZ0Nv
bXBhdGlibGVXaXRoKGV4cHJlc3Npb25UeXBlLCBUeXBlQmluZGluZy5JTlQpKSB7CiAJCQkJCQl0
aGlzLmV4cHJlc3Npb24uY29tcHV0ZUNvbnZlcnNpb24odXBwZXJTY29wZSwgVHlwZUJpbmRpbmcu
SU5ULCBleHByZXNzaW9uVHlwZSk7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0JpbmFyeVR5
cGVCaW5kaW5nLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0JpbmFyeVR5cGVCaW5kaW5nLmphdmEKaW5k
ZXggNzRkZDBlYi4uZmM3N2Y0OCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9CaW5hcnlUeXBl
QmluZGluZy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQmluYXJ5VHlwZUJpbmRpbmcuamF2YQpA
QCAtOTc1LDkgKzk3NSwxNCBAQAogfQogcHVibGljIGJvb2xlYW4gaGFzVHlwZUJpdChpbnQgYml0
KSB7CiAJLy8gZW5zdXJlIGhpZXJhcmNoeSBpcyByZXNvbHZlZCwgd2hpY2ggd2lsbCBwcm9wYWdh
dGUgYml0cyBkb3duIHRvIHVzCi0Jc3VwZXJjbGFzcygpOwotCXN1cGVySW50ZXJmYWNlcygpOwot
CXJldHVybiAodGhpcy50eXBlQml0cyAmIGJpdCkgIT0gMDsKKwlib29sZWFuIHdhc1RvbGVyYXRp
bmdNaXNzaW5nVHlwZVByb2Nlc3NpbmdBbm5vdGF0aW9ucyA9IHRoaXMuZW52aXJvbm1lbnQubWF5
VG9sZXJhdGVNaXNzaW5nVHlwZTsKKwl0aGlzLmVudmlyb25tZW50Lm1heVRvbGVyYXRlTWlzc2lu
Z1R5cGUgPSB0cnVlOworCXRyeSB7CisJCXN1cGVyY2xhc3MoKTsKKwkJc3VwZXJJbnRlcmZhY2Vz
KCk7CisJfSBmaW5hbGx5IHsKKwkJdGhpcy5lbnZpcm9ubWVudC5tYXlUb2xlcmF0ZU1pc3NpbmdU
eXBlID0gd2FzVG9sZXJhdGluZ01pc3NpbmdUeXBlUHJvY2Vzc2luZ0Fubm90YXRpb25zOworCX0J
cmV0dXJuICh0aGlzLnR5cGVCaXRzICYgYml0KSAhPSAwOwogfQogcHJpdmF0ZSB2b2lkIGluaXRp
YWxpemVUeXBlVmFyaWFibGUoVHlwZVZhcmlhYmxlQmluZGluZyB2YXJpYWJsZSwgVHlwZVZhcmlh
YmxlQmluZGluZ1tdIGV4aXN0aW5nVmFyaWFibGVzLCBTaWduYXR1cmVXcmFwcGVyIHdyYXBwZXIs
IGNoYXJbXVtdW10gbWlzc2luZ1R5cGVOYW1lcykgewogCS8vIFBhcmFtZXRlclNpZ25hdHVyZSA9
IElkZW50aWZpZXIgJzonIFR5cGVTaWduYXR1cmUKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAv
TG9va3VwRW52aXJvbm1lbnQuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvTG9va3VwRW52aXJvbm1lbnQu
amF2YQppbmRleCA4NGQzZTc0Li4yZTdmZTk3IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0xv
b2t1cEVudmlyb25tZW50LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Mb29rdXBFbnZpcm9ubWVu
dC5qYXZhCkBAIC03NCw2ICs3NCw3IEBACiAJcHJpdmF0ZSBBcnJheUxpc3QgbWlzc2luZ1R5cGVz
OwogCVNldCB0eXBlc0JlaW5nQ29ubmVjdGVkOwogCXB1YmxpYyBib29sZWFuIGlzUHJvY2Vzc2lu
Z0Fubm90YXRpb25zID0gZmFsc2U7CisJcHVibGljIGJvb2xlYW4gbWF5VG9sZXJhdGVNaXNzaW5n
VHlwZSA9IGZhbHNlOwogCiAJZmluYWwgc3RhdGljIGludCBCVUlMRF9GSUVMRFNfQU5EX01FVEhP
RFMgPSA0OwogCWZpbmFsIHN0YXRpYyBpbnQgQlVJTERfVFlQRV9ISUVSQVJDSFkgPSAxOwpkaWZm
IC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2xvb2t1cC9VbnJlc29sdmVkUmVmZXJlbmNlQmluZGluZy5qYXZhIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2xvb2t1cC9VbnJlc29sdmVkUmVmZXJlbmNlQmluZGluZy5qYXZhCmluZGV4IDMwMzgz
NjguLjJkYTQ5ODQgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvVW5yZXNvbHZlZFJlZmVyZW5j
ZUJpbmRpbmcuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1VucmVzb2x2ZWRSZWZlcmVuY2VCaW5k
aW5nLmphdmEKQEAgLTU1LDcgKzU1LDcgQEAKIAkJfQogCQlpZiAodGFyZ2V0VHlwZSA9PSBudWxs
IHx8IHRhcmdldFR5cGUgPT0gdGhpcykgeyAvLyBjb3VsZCBub3QgcmVzb2x2ZSBhbnkgYmV0dGVy
LCBlcnJvciB3YXMgYWxyZWFkeSByZXBvcnRlZCBhZ2FpbnN0IGl0CiAJCQkvLyByZXBvcnQgdGhl
IG1pc3NpbmcgY2xhc3MgZmlsZSBmaXJzdCAtIG9ubHkgaWYgbm90IHJlc29sdmluZyBhIHByZXZp
b3VzbHkgbWlzc2luZyB0eXBlCi0JCQlpZiAoKHRoaXMudGFnQml0cyAmIFRhZ0JpdHMuSGFzTWlz
c2luZ1R5cGUpID09IDApIHsKKwkJCWlmICgodGhpcy50YWdCaXRzICYgVGFnQml0cy5IYXNNaXNz
aW5nVHlwZSkgPT0gMCAmJiAhZW52aXJvbm1lbnQubWF5VG9sZXJhdGVNaXNzaW5nVHlwZSkgewog
CQkJCWVudmlyb25tZW50LnByb2JsZW1SZXBvcnRlci5pc0NsYXNzUGF0aENvcnJlY3QoCiAJCQkJ
CXRoaXMuY29tcG91bmROYW1lLAogCQkJCQllbnZpcm9ubWVudC51bml0QmVpbmdDb21wbGV0ZWQs
CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9Qcm9ibGVtUmVwb3J0ZXIuamF2YSBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9wcm9ibGVtL1Byb2JsZW1SZXBvcnRlci5qYXZhCmluZGV4IGM4NGI4M2QuLjBhM2IxOTEgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9wcm9ibGVtL1Byb2JsZW1SZXBvcnRlci5qYXZhCisrKyBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9wcm9ibGVtL1Byb2JsZW1SZXBvcnRlci5qYXZhCkBAIC0yODYzLDEyICsyODYzLDIxIEBACiAJ
CQkJCWV4cHJlc3Npb24uc291cmNlU3RhcnQsCiAJCQkJCWV4cHJlc3Npb24uc291cmNlRW5kKTsK
IAkJfSBlbHNlIHsKLQkJCXRoaXMuaGFuZGxlKAotCQkJCUlQcm9ibGVtLkluY29ycmVjdFN3aXRj
aFR5cGUsCi0JCQkJbmV3IFN0cmluZ1tdIHtuZXcgU3RyaW5nKHRlc3RUeXBlLnJlYWRhYmxlTmFt
ZSgpKX0sCi0JCQkJbmV3IFN0cmluZ1tdIHtuZXcgU3RyaW5nKHRlc3RUeXBlLnNob3J0UmVhZGFi
bGVOYW1lKCkpfSwKLQkJCQlleHByZXNzaW9uLnNvdXJjZVN0YXJ0LAotCQkJCWV4cHJlc3Npb24u
c291cmNlRW5kKTsKKwkJCWlmICh0aGlzLm9wdGlvbnMuc291cmNlTGV2ZWwgPCBDbGFzc0ZpbGVD
b25zdGFudHMuSkRLMV81ICYmIHRlc3RUeXBlLmlzRW51bSgpKSB7CisJCQkJdGhpcy5oYW5kbGUo
CisJCQkJCQlJUHJvYmxlbS5Td2l0Y2hPbkVudW1Ob3RCZWxvdzE1LAorCQkJCQkJbmV3IFN0cmlu
Z1tdIHtuZXcgU3RyaW5nKHRlc3RUeXBlLnJlYWRhYmxlTmFtZSgpKX0sCisJCQkJCQluZXcgU3Ry
aW5nW10ge25ldyBTdHJpbmcodGVzdFR5cGUuc2hvcnRSZWFkYWJsZU5hbWUoKSl9LAorCQkJCQkJ
ZXhwcmVzc2lvbi5zb3VyY2VTdGFydCwKKwkJCQkJCWV4cHJlc3Npb24uc291cmNlRW5kKTsKKwkJ
CX0gZWxzZSB7CisJCQkJdGhpcy5oYW5kbGUoCisJCQkJCQlJUHJvYmxlbS5JbmNvcnJlY3RTd2l0
Y2hUeXBlLAorCQkJCQkJbmV3IFN0cmluZ1tdIHtuZXcgU3RyaW5nKHRlc3RUeXBlLnJlYWRhYmxl
TmFtZSgpKX0sCisJCQkJCQluZXcgU3RyaW5nW10ge25ldyBTdHJpbmcodGVzdFR5cGUuc2hvcnRS
ZWFkYWJsZU5hbWUoKSl9LAorCQkJCQkJZXhwcmVzc2lvbi5zb3VyY2VTdGFydCwKKwkJCQkJCWV4
cHJlc3Npb24uc291cmNlRW5kKTsKKwkJCX0KIAkJfQogCX0gZWxzZSB7CiAJCXRoaXMuaGFuZGxl
KApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vbWVzc2FnZXMucHJvcGVydGllcyBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9wcm9ibGVtL21lc3NhZ2VzLnByb3BlcnRpZXMKaW5kZXggOTc2YTk1Ni4uY2ZlNTJkMSAxMDA2
NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vbWVzc2FnZXMucHJvcGVydGllcworKysgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
cHJvYmxlbS9tZXNzYWdlcy5wcm9wZXJ0aWVzCkBAIC02NTEsNiArNjUxLDcgQEAKIDg4NyA9IFJl
c291cmNlIGxlYWs6ICcnezB9JycgaXMgbmV2ZXIgY2xvc2VkCiA4ODggPSBSZXNvdXJjZSBsZWFr
OiAnJ3swfScnIGlzIG5vdCBjbG9zZWQgYXQgdGhpcyBsb2NhdGlvbgogODg5ID0gUmVzb3VyY2Ug
Jyd7MH0nJyBzaG91bGQgYmUgbWFuYWdlZCBieSB0cnktd2l0aC1yZXNvdXJjZQorODkwID0gQ2Fu
bm90IHN3aXRjaCBvbiBhIHZhbHVlIG9mIHR5cGUgZW51bSBmb3Igc291cmNlIGxldmVsIGJlbG93
IDEuNQogCiAjIyMgRUxBQk9SQVRJT05TCiAjIyBBY2Nlc3MgcmVzdHJpY3Rpb25z
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>205424</attachid>
            <date>2011-10-18 10:29:00 -0400</date>
            <delta_ts>2011-10-18 10:29:57 -0400</delta_ts>
            <desc>tests &amp; combined fix v3</desc>
            <filename>Bug_360164_v3.patch</filename>
            <type>text/plain</type>
            <size>13522</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0NvbXBpbGVySW52b2Nh
dGlvblRlc3RzLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMv
b3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9Db21waWxlcklu
dm9jYXRpb25UZXN0cy5qYXZhCmluZGV4IDRlMWNiYTcuLjlmMDk5NWQgMTAwNjQ0Ci0tLSBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29y
ZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0NvbXBpbGVySW52b2NhdGlvblRlc3RzLmphdmEK
KysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNl
L2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vQ29tcGlsZXJJbnZvY2F0aW9uVGVz
dHMuamF2YQpAQCAtODA5LDYgKzgwOSw3IEBACiAJCWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMu
cHV0KCJTdXBlcmNsYXNzTm90Rm91bmQiLCBERVBSRUNBVEVEKTsKIAkJZXhwZWN0ZWRQcm9ibGVt
QXR0cmlidXRlcy5wdXQoIlN1cGVyY2xhc3NOb3RWaXNpYmxlIiwgREVQUkVDQVRFRCk7CiAJCWV4
cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0KCJTdXBlcmZsdW91c1NlbWljb2xvbiIsIG5ldyBQ
cm9ibGVtQXR0cmlidXRlcyhDYXRlZ29yaXplZFByb2JsZW0uQ0FUX1BPVEVOVElBTF9QUk9HUkFN
TUlOR19QUk9CTEVNKSk7CisJCWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0KCJTd2l0Y2hP
bkVudW1Ob3RCZWxvdzE1IiwgbmV3IFByb2JsZW1BdHRyaWJ1dGVzKENhdGVnb3JpemVkUHJvYmxl
bS5DQVRfVFlQRSkpOwogCQlleHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiU3dpdGNoT25T
dHJpbmdzTm90QmVsb3cxNyIsIG5ldyBQcm9ibGVtQXR0cmlidXRlcyhDYXRlZ29yaXplZFByb2Js
ZW0uQ0FUX1RZUEUpKTsKIAkJZXhwZWN0ZWRQcm9ibGVtQXR0cmlidXRlcy5wdXQoIlRhc2siLCBu
ZXcgUHJvYmxlbUF0dHJpYnV0ZXMoQ2F0ZWdvcml6ZWRQcm9ibGVtLkNBVF9JTlRFUk5BTCkpOwog
CQlleHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiVGhpc0luU3RhdGljQ29udGV4dCIsIG5l
dyBQcm9ibGVtQXR0cmlidXRlcyhDYXRlZ29yaXplZFByb2JsZW0uQ0FUX0lOVEVSTkFMKSk7CkBA
IC0xNDgyLDYgKzE0ODMsNyBAQAogCQlleHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiU3Vw
ZXJjbGFzc05vdEZvdW5kIiwgU0tJUCk7CiAJCWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0
KCJTdXBlcmNsYXNzTm90VmlzaWJsZSIsIG5ldyBQcm9ibGVtQXR0cmlidXRlcyhKYXZhQ29yZS5D
T01QSUxFUl9QQl9SRURVTkRBTlRfU1VQRVJJTlRFUkZBQ0UpKTsKIAkJZXhwZWN0ZWRQcm9ibGVt
QXR0cmlidXRlcy5wdXQoIlN1cGVyZmx1b3VzU2VtaWNvbG9uIiwgbmV3IFByb2JsZW1BdHRyaWJ1
dGVzKEphdmFDb3JlLkNPTVBJTEVSX1BCX0VNUFRZX1NUQVRFTUVOVCkpOworCQlleHBlY3RlZFBy
b2JsZW1BdHRyaWJ1dGVzLnB1dCgiU3dpdGNoT25FbnVtTm90QmVsb3cxNSIsIFNLSVApOwogCQll
eHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiU3dpdGNoT25TdHJpbmdzTm90QmVsb3cxNyIs
IFNLSVApOwogCQlleHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiVGFzayIsIFNLSVApOwog
CQlleHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiVGhpc0luU3RhdGljQ29udGV4dCIsIFNL
SVApOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21vZGVsL0phdmFQcm9qZWN0VGVzdHMuamF2YSBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90
ZXN0cy9tb2RlbC9KYXZhUHJvamVjdFRlc3RzLmphdmEKaW5kZXggNjM1NzgwMy4uYTczODhhYiAx
MDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xp
cHNlL2pkdC9jb3JlL3Rlc3RzL21vZGVsL0phdmFQcm9qZWN0VGVzdHMuamF2YQorKysgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVz
dHMvbW9kZWwvSmF2YVByb2plY3RUZXN0cy5qYXZhCkBAIC0zNyw3ICszNyw3IEBACiAJc3VwZXIo
bmFtZSk7CiB9CiBzdGF0aWMgewotLy8JVEVTVFNfTkFNRVMgPSBuZXcgU3RyaW5nW10geyAidGVz
dEFkZEV4dGVybmFsTGliRm9sZGVyNiIgfTsKKy8vCVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1td
IHsgInRlc3RCdWczNjAxNjQiIH07CiB9CiBwdWJsaWMgc3RhdGljIFRlc3Qgc3VpdGUoKSB7CiAJ
VGVzdFN1aXRlIHN1aXRlID0gKFRlc3RTdWl0ZSkgYnVpbGRNb2RlbFRlc3RTdWl0ZShKYXZhUHJv
amVjdFRlc3RzLmNsYXNzKTsKQEAgLTIzODksNCArMjM4OSwxMDIgQEAKIAkJZGVsZXRlUHJvamVj
dCgiSmF2YVByb2plY3RUZXN0c0ludmFsaWRQcm9qZWN0Iik7CiAJfQogfQorLy8gQnVnIDM2MDE2
NCAtIENvbXBpbGUgZXJyb3IgaW4gWFNESW1wbAorLy8gdGVzdCB0aGF0IHdlIGNhbiB0b2xlcmF0
ZSBpZiBhIDEuNCBwcm9qZWN0IHJlZmVycyB0byBhbiBlbnVtIGluc2lkZSBhIGxpYnJhcnkuCitw
dWJsaWMgdm9pZCB0ZXN0QnVnMzYwMTY0KCkgdGhyb3dzIElPRXhjZXB0aW9uLCBDb3JlRXhjZXB0
aW9uIHsKKwlTdHJpbmcgbGliUGF0aCA9IGdldFdvcmtzcGFjZVBhdGgoKSsiSmF2YVByb2plY3RU
ZXN0cy9iaW4vYnVnMzYwMTY0LmphciI7CisJdHJ5IHsKKwkJdGhpcy5jcmVhdGVKYXZhUHJvamVj
dCgiUCIsIG5ldyBTdHJpbmdbXSB7InNyYyJ9LCBuZXcgU3RyaW5nW10geyJKQ0xfTElCIiwgbGli
UGF0aH0sICJiaW4iLCBKYXZhQ29yZS5WRVJTSU9OXzFfNCk7CisJCUlGaWxlIGZpbGUgPSBjcmVh
dGVGaWxlKCIvUC9zcmMvWC5qYXZhIiwgCisJCQkJImltcG9ydCBwMzYwMTY0LlByb3ZpZGVyO1xu
IiArCisJCQkJImltcG9ydCBwMzYwMTY0Lk15RW51bTtcbiIgKworCQkJCSJwdWJsaWMgY2xhc3Mg
WCB7XG4iICsKKwkJCQkiICAgIGludCBmb28oUHJvdmlkZXIgcCkge1xuIiArCisJCQkJIiAgICAg
ICAgTXlFbnVtIGUgPSBwLmdldEUoKTtcbiIgKworCQkJCSIgICAgICAgIHN3aXRjaCAoZS5nZXRW
YWx1ZSgpKSB7XG4iICsKKwkJCQkiICAgICAgICBjYXNlIE15RW51bS5PTkVfQ09NUEFUOiByZXR1
cm4gMTtcbiIgKworCQkJCSIgICAgICAgIGNhc2UgTXlFbnVtLlRXT19DT01QQVQ6IHJldHVybiAy
O1xuIiArCisJCQkJIiAgICAgICAgfVxuIiArCisJCQkJIiAgICAgICAgcmV0dXJuIDA7XG4iICsK
KwkJCQkiICAgIH1cbiIgKworCQkJCSJ9IgorCQkpOwkKKwkJSUNvbXBpbGF0aW9uVW5pdCB1bml0
ID0gKElDb21waWxhdGlvblVuaXQpSmF2YUNvcmUuY3JlYXRlKGZpbGUpOworCQlQcm9ibGVtUmVx
dWVzdG9yIHByb2JsZW1SZXF1ZXN0b3IgPSBuZXcgUHJvYmxlbVJlcXVlc3RvcigpOworCQlXb3Jr
aW5nQ29weU93bmVyIG93bmVyID0gbmV3V29ya2luZ0NvcHlPd25lcihwcm9ibGVtUmVxdWVzdG9y
KTsKKwkJdW5pdC5nZXRXb3JraW5nQ29weShvd25lciwgbnVsbCk7CisJCWFzc2VydFByb2JsZW1z
KCJVbmV4cGVjdGVkIHByb2JsZW1zIiwgCisJCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCQkiLS0t
LS0tLS0tLVxuIiwgCisJCQkJcHJvYmxlbVJlcXVlc3Rvcik7CisJfSBmaW5hbGx5IHsKKwkJdGhp
cy5kZWxldGVQcm9qZWN0KCJQIik7CisJfQorfQorLy8gQnVnIDM2MDE2NCAtIENvbXBpbGUgZXJy
b3IgaW4gWFNESW1wbAorLy8gdGVzdCB0aGF0IHdlIHN0aWxsIHJlcG9ydCB0aGUgbWlzc2luZyBz
dXBlcmNsYXNzIHdoZW4gcmVzb2x2aW5nIG5vbi1sb2NhbCBtZXRob2RzCitwdWJsaWMgdm9pZCB0
ZXN0QnVnMzYwMTY0YSgpIHRocm93cyBJT0V4Y2VwdGlvbiwgQ29yZUV4Y2VwdGlvbiB7CisJU3Ry
aW5nIGxpYlBhdGggPSBnZXRXb3Jrc3BhY2VQYXRoKCkrIkphdmFQcm9qZWN0VGVzdHMvYmluL2J1
ZzM2MDE2NC5qYXIiOworCXRyeSB7CisJCXRoaXMuY3JlYXRlSmF2YVByb2plY3QoIlAiLCBuZXcg
U3RyaW5nW10geyJzcmMifSwgbmV3IFN0cmluZ1tdIHsiSkNMX0xJQiIsIGxpYlBhdGh9LCAiYmlu
IiwgSmF2YUNvcmUuVkVSU0lPTl8xXzQpOworCQlJRmlsZSBmaWxlID0gY3JlYXRlRmlsZSgiL1Av
c3JjL1guamF2YSIsIAorCQkJCSJpbXBvcnQgcDM2MDE2NC5Qcm92aWRlcjtcbiIgKworCQkJCSJp
bXBvcnQgcDM2MDE2NC5NeUVudW07XG4iICsKKwkJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJ
CQkJIiAgICBTdHJpbmcgZm9vKFByb3ZpZGVyIHApIHtcbiIgKworCQkJCSIgICAgICAgIE15RW51
bSBlID0gcC5nZXRFKCk7XG4iICsKKwkJCQkiICAgICAgICByZXR1cm4gZS50b1N0cmluZygpO1xu
IiArCisJCQkJIiAgICB9XG4iICsKKwkJCQkifSIKKwkJKTsJCisJCUlDb21waWxhdGlvblVuaXQg
dW5pdCA9IChJQ29tcGlsYXRpb25Vbml0KUphdmFDb3JlLmNyZWF0ZShmaWxlKTsKKwkJUHJvYmxl
bVJlcXVlc3RvciBwcm9ibGVtUmVxdWVzdG9yID0gbmV3IFByb2JsZW1SZXF1ZXN0b3IoKTsKKwkJ
V29ya2luZ0NvcHlPd25lciBvd25lciA9IG5ld1dvcmtpbmdDb3B5T3duZXIocHJvYmxlbVJlcXVl
c3Rvcik7CisJCXVuaXQuZ2V0V29ya2luZ0NvcHkob3duZXIsIG51bGwpOworCQlhc3NlcnRQcm9i
bGVtcygiVW5leHBlY3RlZCBwcm9ibGVtcyIsIAorCQkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkJ
IjEuIEVSUk9SIGluIC9QL3NyYy9YLmphdmFcbiIgKyAKKwkJCQkiVGhlIHR5cGUgamF2YS5sYW5n
LkVudW0gY2Fubm90IGJlIHJlc29sdmVkLiBJdCBpcyBpbmRpcmVjdGx5IHJlZmVyZW5jZWQgZnJv
bSByZXF1aXJlZCAuY2xhc3MgZmlsZXNcbiIgKyAKKwkJCQkiLS0tLS0tLS0tLVxuIiwgCisJCQkJ
cHJvYmxlbVJlcXVlc3Rvcik7CisJfSBmaW5hbGx5IHsKKwkJdGhpcy5kZWxldGVQcm9qZWN0KCJQ
Iik7CisJfQorfQorLy8gQnVnIDM2MDMxNyAtIFtjb21waWxlcl0gcmVwb3J0IHN3aXRjaCBvdmVy
IGVudW0gaW4gMS40LSBtb2RlCitwdWJsaWMgdm9pZCB0ZXN0QnVnMzYwMzE3KCkgdGhyb3dzIElP
RXhjZXB0aW9uLCBDb3JlRXhjZXB0aW9uIHsKKwkvLyB1c2UgdGhlIHNldHVwIGZyb20gdGVzdEJ1
ZzM2MDE2NCgpOgorCVN0cmluZyBsaWJQYXRoID0gZ2V0V29ya3NwYWNlUGF0aCgpKyJKYXZhUHJv
amVjdFRlc3RzL2Jpbi9idWczNjAxNjQuamFyIjsKKwl0cnkgeworCQl0aGlzLmNyZWF0ZUphdmFQ
cm9qZWN0KCJQIiwgbmV3IFN0cmluZ1tdIHsic3JjIn0sIG5ldyBTdHJpbmdbXSB7IkpDTF9MSUIi
LCBsaWJQYXRofSwgImJpbiIsIEphdmFDb3JlLlZFUlNJT05fMV80KTsKKwkJU3RyaW5nIHNvdXJj
ZVggPSAiaW1wb3J0IHAzNjAxNjQuUHJvdmlkZXI7XG4iICsKKwkJCQkJCSAiaW1wb3J0IHAzNjAx
NjQuTXlFbnVtO1xuIiArCisJCQkJCQkgInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJCQkJICIg
ICAgaW50IGZvbyhQcm92aWRlciBwKSB7XG4iICsKKwkJCQkJCSAiICAgICAgICBNeUVudW0gZSA9
IHAuZ2V0RSgpO1xuIiArCisJCQkJCQkgIiAgICAgICAgc3dpdGNoIChlKSB7XG4iICsKKwkJCQkJ
CSAiICAgICAgICBjYXNlIE9ORTogcmV0dXJuIDE7XG4iICsKKwkJCQkJCSAiICAgICAgICBjYXNl
IFRXTzogcmV0dXJuIDI7XG4iICsKKwkJCQkJCSAiICAgICAgICB9XG4iICsKKwkJCQkJCSAiICAg
ICAgICByZXR1cm4gMDtcbiIgKworCQkJCQkJICIgICAgfVxuIiArCisJCQkJCQkgIn0iOworCQlJ
RmlsZSBmaWxlID0gY3JlYXRlRmlsZSgiL1Avc3JjL1guamF2YSIsIHNvdXJjZVgpOwkKKwkJSUNv
bXBpbGF0aW9uVW5pdCB1bml0ID0gKElDb21waWxhdGlvblVuaXQpSmF2YUNvcmUuY3JlYXRlKGZp
bGUpOworCQlQcm9ibGVtUmVxdWVzdG9yIHByb2JsZW1SZXF1ZXN0b3IgPSBuZXcgUHJvYmxlbVJl
cXVlc3RvcigpOworCQlwcm9ibGVtUmVxdWVzdG9yLmluaXRpYWxpemUoc291cmNlWC50b0NoYXJB
cnJheSgpKTsKKwkJV29ya2luZ0NvcHlPd25lciBvd25lciA9IG5ld1dvcmtpbmdDb3B5T3duZXIo
cHJvYmxlbVJlcXVlc3Rvcik7CisJCXVuaXQuZ2V0V29ya2luZ0NvcHkob3duZXIsIG51bGwpOwor
CQlhc3NlcnRQcm9ibGVtcygiVW5leHBlY3RlZCBwcm9ibGVtcyIsIAorCQkJCSItLS0tLS0tLS0t
XG4iICsKKwkJCQkiMS4gRVJST1IgaW4gL1Avc3JjL1guamF2YSAoYXQgbGluZSA2KVxuIiArCisJ
CQkJIglzd2l0Y2ggKGUpIHtcbiIgKworCQkJCSIJICAgICAgICBeXG4iICsKKwkJCQkiQ2Fubm90
IHN3aXRjaCBvbiBhbiBlbnVtIHZhbHVlIGZvciBzb3VyY2UgbGV2ZWwgYmVsb3cgMS41LiBPbmx5
IGNvbnZlcnRpYmxlIGludCB2YWx1ZXMgYXJlIHBlcm1pdHRlZFxuIiArCisJCQkJIi0tLS0tLS0t
LS1cbiIsCisJCQkJcHJvYmxlbVJlcXVlc3Rvcik7CisJfSBmaW5hbGx5IHsKKwkJdGhpcy5kZWxl
dGVQcm9qZWN0KCJQIik7CisJfQorfQogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMubW9kZWwvd29ya3NwYWNlL0phdmFQcm9qZWN0VGVzdHMvYmluL2J1ZzM2MDE2NC5q
YXIgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC93b3Jrc3BhY2UvSmF2YVByb2pl
Y3RUZXN0cy9iaW4vYnVnMzYwMTY0LmphcgpuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAw
MDAwLi4zZGVmYWY1Ci0tLSAvZGV2L251bGwKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVz
dHMubW9kZWwvd29ya3NwYWNlL0phdmFQcm9qZWN0VGVzdHMvYmluL2J1ZzM2MDE2NC5qYXIKQmlu
YXJ5IGZpbGVzIGRpZmZlcgpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2NvcmUvY29tcGlsZXIvSVByb2JsZW0uamF2YSBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9jb3JlL2NvbXBpbGVyL0lQcm9i
bGVtLmphdmEKaW5kZXggNDM3NWU0OC4uYTg5ODY2ZiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2NvcmUvY29tcGlsZXIvSVByb2JsZW0u
amF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
Y29yZS9jb21waWxlci9JUHJvYmxlbS5qYXZhCkBAIC0xNDA5LDYgKzE0MDksOCBAQAogCWludCBV
bmNsb3NlZENsb3NlYWJsZUF0RXhpdCA9IEludGVybmFsICsgODg4OwogCS8qKiBAc2luY2UgMy44
ICovCiAJaW50IEV4cGxpY2l0bHlDbG9zZWRBdXRvQ2xvc2VhYmxlID0gSW50ZXJuYWwgKyA4ODk7
CisJLyoqIEBzaW5jZSAzLjggKi8KKwlpbnQgU3dpdGNoT25FbnVtTm90QmVsb3cxNSA9IFR5cGVS
ZWxhdGVkICsgODkwOwkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5j
Z2k/aWQ9MzYwMzE3CiAJLyoqCiAJICogRXh0ZXJuYWwgcHJvYmxlbXMgLS0gVGhlc2UgYXJlIHBy
b2JsZW1zIGRlZmluZWQgYnkgb3RoZXIgcGx1Z2lucwogCSAqLwpkaWZmIC0tZ2l0IGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FzdC9Td2l0Y2hTdGF0ZW1lbnQuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvU3dpdGNoU3RhdGVtZW50Lmph
dmEKaW5kZXggNjA5YThhNS4uMDNjNmU4MCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Td2l0Y2hT
dGF0ZW1lbnQuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1N3aXRjaFN0YXRlbWVudC5qYXZhCkBAIC00
NjMsNiArNDYzLDkgQEAKIAkJCQkJCQlicmVhayBjaGVja1R5cGU7CiAJCQkJCX0gZWxzZSBpZiAo
ZXhwcmVzc2lvblR5cGUuaXNFbnVtKCkpIHsKIAkJCQkJCWlzRW51bVN3aXRjaCA9IHRydWU7CisJ
CQkJCQlpZiAodXBwZXJTY29wZS5jb21waWxlck9wdGlvbnMoKS5jb21wbGlhbmNlTGV2ZWwgPCBD
bGFzc0ZpbGVDb25zdGFudHMuSkRLMV81KSB7CisJCQkJCQkJdXBwZXJTY29wZS5wcm9ibGVtUmVw
b3J0ZXIoKS5pbmNvcnJlY3RTd2l0Y2hUeXBlKHRoaXMuZXhwcmVzc2lvbiwgZXhwcmVzc2lvblR5
cGUpOyAvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzYw
MzE3CisJCQkJCQl9CiAJCQkJCQlicmVhayBjaGVja1R5cGU7CiAJCQkJCX0gZWxzZSBpZiAodXBw
ZXJTY29wZS5pc0JveGluZ0NvbXBhdGlibGVXaXRoKGV4cHJlc3Npb25UeXBlLCBUeXBlQmluZGlu
Zy5JTlQpKSB7CiAJCQkJCQl0aGlzLmV4cHJlc3Npb24uY29tcHV0ZUNvbnZlcnNpb24odXBwZXJT
Y29wZSwgVHlwZUJpbmRpbmcuSU5ULCBleHByZXNzaW9uVHlwZSk7CmRpZmYgLS1naXQgYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvbG9va3VwL0JpbmFyeVR5cGVCaW5kaW5nLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0JpbmFyeVR5
cGVCaW5kaW5nLmphdmEKaW5kZXggNzRkZDBlYi4uOGE4NDYxOSAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2xvb2t1cC9CaW5hcnlUeXBlQmluZGluZy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQmluYXJ5
VHlwZUJpbmRpbmcuamF2YQpAQCAtOTc1LDggKzk3NSwxNCBAQAogfQogcHVibGljIGJvb2xlYW4g
aGFzVHlwZUJpdChpbnQgYml0KSB7CiAJLy8gZW5zdXJlIGhpZXJhcmNoeSBpcyByZXNvbHZlZCwg
d2hpY2ggd2lsbCBwcm9wYWdhdGUgYml0cyBkb3duIHRvIHVzCi0Jc3VwZXJjbGFzcygpOwotCXN1
cGVySW50ZXJmYWNlcygpOworCWJvb2xlYW4gd2FzVG9sZXJhdGluZ01pc3NpbmdUeXBlUHJvY2Vz
c2luZ0Fubm90YXRpb25zID0gdGhpcy5lbnZpcm9ubWVudC5tYXlUb2xlcmF0ZU1pc3NpbmdUeXBl
OworCXRoaXMuZW52aXJvbm1lbnQubWF5VG9sZXJhdGVNaXNzaW5nVHlwZSA9IHRydWU7CisJdHJ5
IHsKKwkJc3VwZXJjbGFzcygpOworCQlzdXBlckludGVyZmFjZXMoKTsKKwl9IGZpbmFsbHkgewor
CQl0aGlzLmVudmlyb25tZW50Lm1heVRvbGVyYXRlTWlzc2luZ1R5cGUgPSB3YXNUb2xlcmF0aW5n
TWlzc2luZ1R5cGVQcm9jZXNzaW5nQW5ub3RhdGlvbnM7CisJfQogCXJldHVybiAodGhpcy50eXBl
Qml0cyAmIGJpdCkgIT0gMDsKIH0KIHByaXZhdGUgdm9pZCBpbml0aWFsaXplVHlwZVZhcmlhYmxl
KFR5cGVWYXJpYWJsZUJpbmRpbmcgdmFyaWFibGUsIFR5cGVWYXJpYWJsZUJpbmRpbmdbXSBleGlz
dGluZ1ZhcmlhYmxlcywgU2lnbmF0dXJlV3JhcHBlciB3cmFwcGVyLCBjaGFyW11bXVtdIG1pc3Np
bmdUeXBlTmFtZXMpIHsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvTG9va3VwRW52aXJvbm1l
bnQuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9sb29rdXAvTG9va3VwRW52aXJvbm1lbnQuamF2YQppbmRleCA4NGQz
ZTc0Li4yZTdmZTk3IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0xvb2t1cEVudmlyb25tZW50
LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Mb29rdXBFbnZpcm9ubWVudC5qYXZhCkBAIC03NCw2
ICs3NCw3IEBACiAJcHJpdmF0ZSBBcnJheUxpc3QgbWlzc2luZ1R5cGVzOwogCVNldCB0eXBlc0Jl
aW5nQ29ubmVjdGVkOwogCXB1YmxpYyBib29sZWFuIGlzUHJvY2Vzc2luZ0Fubm90YXRpb25zID0g
ZmFsc2U7CisJcHVibGljIGJvb2xlYW4gbWF5VG9sZXJhdGVNaXNzaW5nVHlwZSA9IGZhbHNlOwog
CiAJZmluYWwgc3RhdGljIGludCBCVUlMRF9GSUVMRFNfQU5EX01FVEhPRFMgPSA0OwogCWZpbmFs
IHN0YXRpYyBpbnQgQlVJTERfVFlQRV9ISUVSQVJDSFkgPSAxOwpkaWZmIC0tZ2l0IGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2xvb2t1cC9VbnJlc29sdmVkUmVmZXJlbmNlQmluZGluZy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9V
bnJlc29sdmVkUmVmZXJlbmNlQmluZGluZy5qYXZhCmluZGV4IDMwMzgzNjguLjJkYTQ5ODQgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9sb29rdXAvVW5yZXNvbHZlZFJlZmVyZW5jZUJpbmRpbmcuamF2YQor
KysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvbG9va3VwL1VucmVzb2x2ZWRSZWZlcmVuY2VCaW5kaW5nLmphdmEKQEAgLTU1
LDcgKzU1LDcgQEAKIAkJfQogCQlpZiAodGFyZ2V0VHlwZSA9PSBudWxsIHx8IHRhcmdldFR5cGUg
PT0gdGhpcykgeyAvLyBjb3VsZCBub3QgcmVzb2x2ZSBhbnkgYmV0dGVyLCBlcnJvciB3YXMgYWxy
ZWFkeSByZXBvcnRlZCBhZ2FpbnN0IGl0CiAJCQkvLyByZXBvcnQgdGhlIG1pc3NpbmcgY2xhc3Mg
ZmlsZSBmaXJzdCAtIG9ubHkgaWYgbm90IHJlc29sdmluZyBhIHByZXZpb3VzbHkgbWlzc2luZyB0
eXBlCi0JCQlpZiAoKHRoaXMudGFnQml0cyAmIFRhZ0JpdHMuSGFzTWlzc2luZ1R5cGUpID09IDAp
IHsKKwkJCWlmICgodGhpcy50YWdCaXRzICYgVGFnQml0cy5IYXNNaXNzaW5nVHlwZSkgPT0gMCAm
JiAhZW52aXJvbm1lbnQubWF5VG9sZXJhdGVNaXNzaW5nVHlwZSkgewogCQkJCWVudmlyb25tZW50
LnByb2JsZW1SZXBvcnRlci5pc0NsYXNzUGF0aENvcnJlY3QoCiAJCQkJCXRoaXMuY29tcG91bmRO
YW1lLAogCQkJCQllbnZpcm9ubWVudC51bml0QmVpbmdDb21wbGV0ZWQsCmRpZmYgLS1naXQgYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvcHJvYmxlbS9Qcm9ibGVtUmVwb3J0ZXIuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL1Byb2Js
ZW1SZXBvcnRlci5qYXZhCmluZGV4IGM4NGI4M2QuLjBhM2IxOTEgMTAwNjQ0Ci0tLSBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9wcm9ibGVtL1Byb2JsZW1SZXBvcnRlci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL1Byb2Js
ZW1SZXBvcnRlci5qYXZhCkBAIC0yODYzLDEyICsyODYzLDIxIEBACiAJCQkJCWV4cHJlc3Npb24u
c291cmNlU3RhcnQsCiAJCQkJCWV4cHJlc3Npb24uc291cmNlRW5kKTsKIAkJfSBlbHNlIHsKLQkJ
CXRoaXMuaGFuZGxlKAotCQkJCUlQcm9ibGVtLkluY29ycmVjdFN3aXRjaFR5cGUsCi0JCQkJbmV3
IFN0cmluZ1tdIHtuZXcgU3RyaW5nKHRlc3RUeXBlLnJlYWRhYmxlTmFtZSgpKX0sCi0JCQkJbmV3
IFN0cmluZ1tdIHtuZXcgU3RyaW5nKHRlc3RUeXBlLnNob3J0UmVhZGFibGVOYW1lKCkpfSwKLQkJ
CQlleHByZXNzaW9uLnNvdXJjZVN0YXJ0LAotCQkJCWV4cHJlc3Npb24uc291cmNlRW5kKTsKKwkJ
CWlmICh0aGlzLm9wdGlvbnMuc291cmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV81
ICYmIHRlc3RUeXBlLmlzRW51bSgpKSB7CisJCQkJdGhpcy5oYW5kbGUoCisJCQkJCQlJUHJvYmxl
bS5Td2l0Y2hPbkVudW1Ob3RCZWxvdzE1LAorCQkJCQkJbmV3IFN0cmluZ1tdIHtuZXcgU3RyaW5n
KHRlc3RUeXBlLnJlYWRhYmxlTmFtZSgpKX0sCisJCQkJCQluZXcgU3RyaW5nW10ge25ldyBTdHJp
bmcodGVzdFR5cGUuc2hvcnRSZWFkYWJsZU5hbWUoKSl9LAorCQkJCQkJZXhwcmVzc2lvbi5zb3Vy
Y2VTdGFydCwKKwkJCQkJCWV4cHJlc3Npb24uc291cmNlRW5kKTsKKwkJCX0gZWxzZSB7CisJCQkJ
dGhpcy5oYW5kbGUoCisJCQkJCQlJUHJvYmxlbS5JbmNvcnJlY3RTd2l0Y2hUeXBlLAorCQkJCQkJ
bmV3IFN0cmluZ1tdIHtuZXcgU3RyaW5nKHRlc3RUeXBlLnJlYWRhYmxlTmFtZSgpKX0sCisJCQkJ
CQluZXcgU3RyaW5nW10ge25ldyBTdHJpbmcodGVzdFR5cGUuc2hvcnRSZWFkYWJsZU5hbWUoKSl9
LAorCQkJCQkJZXhwcmVzc2lvbi5zb3VyY2VTdGFydCwKKwkJCQkJCWV4cHJlc3Npb24uc291cmNl
RW5kKTsKKwkJCX0KIAkJfQogCX0gZWxzZSB7CiAJCXRoaXMuaGFuZGxlKApkaWZmIC0tZ2l0IGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL3Byb2JsZW0vbWVzc2FnZXMucHJvcGVydGllcyBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL21lc3Nh
Z2VzLnByb3BlcnRpZXMKaW5kZXggOTc2YTk1Ni4uYjQ5NzI3NyAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L3Byb2JsZW0vbWVzc2FnZXMucHJvcGVydGllcworKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9tZXNzYWdl
cy5wcm9wZXJ0aWVzCkBAIC02NTEsNiArNjUxLDcgQEAKIDg4NyA9IFJlc291cmNlIGxlYWs6ICcn
ezB9JycgaXMgbmV2ZXIgY2xvc2VkCiA4ODggPSBSZXNvdXJjZSBsZWFrOiAnJ3swfScnIGlzIG5v
dCBjbG9zZWQgYXQgdGhpcyBsb2NhdGlvbgogODg5ID0gUmVzb3VyY2UgJyd7MH0nJyBzaG91bGQg
YmUgbWFuYWdlZCBieSB0cnktd2l0aC1yZXNvdXJjZQorODkwID0gQ2Fubm90IHN3aXRjaCBvbiBh
biBlbnVtIHZhbHVlIGZvciBzb3VyY2UgbGV2ZWwgYmVsb3cgMS41LiBPbmx5IGNvbnZlcnRpYmxl
IGludCB2YWx1ZXMgYXJlIHBlcm1pdHRlZAogCiAjIyMgRUxBQk9SQVRJT05TCiAjIyBBY2Nlc3Mg
cmVzdHJpY3Rpb25zCg==
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>205590</attachid>
            <date>2011-10-20 04:25:00 -0400</date>
            <delta_ts>2011-10-20 04:25:17 -0400</delta_ts>
            <desc>Additional fixes &amp; tests</desc>
            <filename>patch.txt</filename>
            <type>text/plain</type>
            <size>4696</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1Byb2JsZW1UeXBlQW5k
TWV0aG9kVGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3Jj
L29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vUHJvYmxlbVR5
cGVBbmRNZXRob2RUZXN0LmphdmEKaW5kZXggOTg2NzU1ZS4uNGJlNjJiMSAxMDA2NDQKLS0tIGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9j
b3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vUHJvYmxlbVR5cGVBbmRNZXRob2RUZXN0Lmph
dmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xp
cHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vUHJvYmxlbVR5cGVBbmRNZXRo
b2RUZXN0LmphdmEKQEAgLTcxMTEsNCArNzExMSw4MSBAQAogCQljb21waWxlck9wdGlvbnMgLyog
Y3VzdG9tIG9wdGlvbnMgKi8KIAkpOwogfQorLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1
Z3Mvc2hvd19idWcuY2dpP2lkPTM2MDE2NAorcHVibGljIHZvaWQgdGVzdDM2MDE2NCgpIHsKKwlp
ZiAodGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV81KSByZXR1
cm47CisJdGhpcy5ydW5Db25mb3JtVGVzdCgKKwkJCW5ldyBTdHJpbmdbXSB7CisJCQkJCSJwL0Iu
amF2YSIsIAorCQkJCQkicGFja2FnZSBwO1xuIiArCisJCQkJCSJcbiIgKworCQkJCQkicHVibGlj
IGFic3RyYWN0IGNsYXNzIEI8SyxWPiB7XG4iICsKKwkJCQkJIgkgcHJvdGVjdGVkIGFic3RyYWN0
IFYgZm9vKEsgZWxlbWVudCk7XG4iICsKKwkJCQkJIn1cbiIsCisJCQkJCSJwL0MuamF2YSIsIAor
CQkJCQkicGFja2FnZSBwO1xuIiArCisJCQkJCSJwdWJsaWMgY2xhc3MgQyB7XG4iICsKKwkJCQkJ
In1cbiIsCisJCQkJCSJwL0QuamF2YSIsIAorCQkJCQkicGFja2FnZSBwO1xuIiArCisJCQkJCSJw
dWJsaWMgY2xhc3MgRCBleHRlbmRzIEUge1xuIiArCisJCQkJCSJ9XG4iLAorCQkJCQkicC9FLmph
dmEiLCAKKwkJCQkJInBhY2thZ2UgcDtcbiIgKworCQkJCQkicHVibGljIGFic3RyYWN0IGNsYXNz
IEUgaW1wbGVtZW50cyBJIHtcbiIgKworCQkJCQkifVxuIiwKKwkJCQkJInAvSS5qYXZhIiwgCisJ
CQkJCSJwYWNrYWdlIHA7XG4iICsKKwkJCQkJInB1YmxpYyBpbnRlcmZhY2UgSSB7XG4iICsKKwkJ
CQkJIn1cbiIsCisJCQkJCSJwL1guamF2YSIsIAorCQkJCQkicGFja2FnZSBwO1xuIiArCisJCQkJ
CSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCQkJIglwcml2YXRlIGZpbmFsIGNsYXNzIEEgZXh0
ZW5kcyBCPEMsRD57XG4iICsKKwkJCQkJIgkJQE92ZXJyaWRlXG4iICsKKwkJCQkJIgkJcHJvdGVj
dGVkIEQgZm9vKEMgYykge1xuIiArCisJCQkJCSIJCQlyZXR1cm4gbnVsbDtcbiIgKworCQkJCQki
CQl9XG4iICsKKwkJCQkJIiAgIH1cbiIgKworCQkJCQkifVxuIiwKKwkJCX0sCisJCQkiIik7CisK
KwkvLyBkZWxldGUgYmluYXJ5IGZpbGUgWm9yayAoaS5lLiBzaW11bGF0ZSByZW1vdmluZyBpdCBm
cm9tIGNsYXNzcGF0aCBmb3Igc3Vic2VxdWVudCBjb21waWxlKQorCVV0aWwuZGVsZXRlKG5ldyBG
aWxlKE9VVFBVVF9ESVIsICJwIiArIEZpbGUuc2VwYXJhdG9yICsgIkkuY2xhc3MiKSk7CisKKwly
dW5OZWdhdGl2ZVRlc3QoCisJCS8vIHRlc3QgZGlyZWN0b3J5IHByZXBhcmF0aW9uCisJCWZhbHNl
IC8qIGRvIG5vdCBmbHVzaCBvdXRwdXQgZGlyZWN0b3J5ICovLAorCQluZXcgU3RyaW5nW10geyAv
KiB0ZXN0IGZpbGVzICovCisJCQkJInAvWC5qYXZhIiwgCisJCQkJInBhY2thZ2UgcDtcbiIgKwor
CQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCQkiCXByaXZhdGUgZmluYWwgY2xhc3MgQSBl
eHRlbmRzIEI8QyxEPntcbiIgKworCQkJCSIJCUBPdmVycmlkZVxuIiArCisJCQkJIgkJcHJvdGVj
dGVkIEQgZm9vKEMgYykge1xuIiArCisJCQkJIiAgICAgICAgICAgIFpvcmsgejtcbiIgKworCQkJ
CSIJCQlyZXR1cm4gbnVsbDtcbiIgKworCQkJCSIJCX1cbiIgKworCQkJCSIgICB9XG4iICsKKwkJ
CQkifVxuIiwKKwkJfSwKKwkJLy8gY29tcGlsZXIgb3B0aW9ucworCQludWxsIC8qIG5vIGNsYXNz
IGxpYnJhcmllcyAqLywKKwkJbnVsbCAvKiBubyBjdXN0b20gb3B0aW9ucyAqLywKKwkJLy8gY29t
cGlsZXIgcmVzdWx0cyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjEuIFdBUk5JTkcgaW4gcFxc
WC5qYXZhIChhdCBsaW5lIDMpXG4iICsgCisJCSIJcHJpdmF0ZSBmaW5hbCBjbGFzcyBBIGV4dGVu
ZHMgQjxDLEQ+e1xuIiArIAorCQkiCSAgICAgICAgICAgICAgICAgICAgXlxuIiArIAorCQkiVGhl
IHR5cGUgWC5BIGlzIG5ldmVyIHVzZWQgbG9jYWxseVxuIiArIAorCQkiLS0tLS0tLS0tLVxuIiAr
IAorCQkiMi4gRVJST1IgaW4gcFxcWC5qYXZhIChhdCBsaW5lIDYpXG4iICsgCisJCSIJWm9yayB6
O1xuIiArIAorCQkiCV5eXl5cbiIgKyAKKwkJIlpvcmsgY2Fubm90IGJlIHJlc29sdmVkIHRvIGEg
dHlwZVxuIiArIAorCQkiLS0tLS0tLS0tLVxuIiwKKwkJLy8gamF2YWMgb3B0aW9ucworCQlKYXZh
Y1Rlc3RPcHRpb25zLlNLSVBfVU5USUxfRlJBTUVXT1JLX0ZJWCAvKiBqYXZhYyB0ZXN0IG9wdGlv
bnMgKi8pOworfQogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9CaW5hcnlUeXBlQmluZGlu
Zy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2xvb2t1cC9CaW5hcnlUeXBlQmluZGluZy5qYXZhCmluZGV4IDhhODQ2
MTkuLmI4NTgxZTMgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQmluYXJ5VHlwZUJpbmRpbmcu
amF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0JpbmFyeVR5cGVCaW5kaW5nLmphdmEKQEAgLTExNTcs
OCArMTE1NywxNCBAQAogCQl0aGlzLnRhZ0JpdHMgfD0gVGFnQml0cy5IaWVyYXJjaHlIYXNQcm9i
bGVtczsgLy8gcHJvcGFnYXRlIHR5cGUgaW5jb25zaXN0ZW5jeQogCX0gZWxzZSB7CiAJCS8vIG1h
a2Ugc3VwZXItdHlwZSByZXNvbHZpbmcgcmVjdXJzaXZlIGZvciBwcm9wYWdhdGluZyB0eXBlQml0
cyBkb3dud2FyZHMKLQkJdGhpcy5zdXBlcmNsYXNzLnN1cGVyY2xhc3MoKTsKLQkJdGhpcy5zdXBl
cmNsYXNzLnN1cGVySW50ZXJmYWNlcygpOworCQlib29sZWFuIHdhc1RvbGVyYXRpbmdNaXNzaW5n
VHlwZVByb2Nlc3NpbmdBbm5vdGF0aW9ucyA9IHRoaXMuZW52aXJvbm1lbnQubWF5VG9sZXJhdGVN
aXNzaW5nVHlwZTsKKwkJdGhpcy5lbnZpcm9ubWVudC5tYXlUb2xlcmF0ZU1pc3NpbmdUeXBlID0g
dHJ1ZTsgLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM2
MDE2NAorCQl0cnkgeworCQkJdGhpcy5zdXBlcmNsYXNzLnN1cGVyY2xhc3MoKTsKKwkJCXRoaXMu
c3VwZXJjbGFzcy5zdXBlckludGVyZmFjZXMoKTsKKwkJfSBmaW5hbGx5IHsKKwkJCXRoaXMuZW52
aXJvbm1lbnQubWF5VG9sZXJhdGVNaXNzaW5nVHlwZSA9IHdhc1RvbGVyYXRpbmdNaXNzaW5nVHlw
ZVByb2Nlc3NpbmdBbm5vdGF0aW9uczsKKwkJfQogCX0KIAl0aGlzLnR5cGVCaXRzIHw9IHRoaXMu
c3VwZXJjbGFzcy50eXBlQml0czsKIAlyZXR1cm4gdGhpcy5zdXBlcmNsYXNzOwpAQCAtMTE3NCw4
ICsxMTgwLDE0IEBACiAJCQl0aGlzLnRhZ0JpdHMgfD0gVGFnQml0cy5IaWVyYXJjaHlIYXNQcm9i
bGVtczsgLy8gcHJvcGFnYXRlIHR5cGUgaW5jb25zaXN0ZW5jeQogCQl9IGVsc2UgewogCQkJLy8g
bWFrZSBzdXBlci10eXBlIHJlc29sdmluZyByZWN1cnNpdmUgZm9yIHByb3BhZ2F0aW5nIHR5cGVC
aXRzIGRvd253YXJkcwotCQkJdGhpcy5zdXBlckludGVyZmFjZXNbaV0uc3VwZXJjbGFzcygpOwot
CQkJdGhpcy5zdXBlckludGVyZmFjZXNbaV0uc3VwZXJJbnRlcmZhY2VzKCk7CisJCQlib29sZWFu
IHdhc1RvbGVyYXRpbmdNaXNzaW5nVHlwZVByb2Nlc3NpbmdBbm5vdGF0aW9ucyA9IHRoaXMuZW52
aXJvbm1lbnQubWF5VG9sZXJhdGVNaXNzaW5nVHlwZTsKKwkJCXRoaXMuZW52aXJvbm1lbnQubWF5
VG9sZXJhdGVNaXNzaW5nVHlwZSA9IHRydWU7IC8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9i
dWdzL3Nob3dfYnVnLmNnaT9pZD0zNjAxNjQKKwkJCXRyeSB7CisJCQkJdGhpcy5zdXBlckludGVy
ZmFjZXNbaV0uc3VwZXJjbGFzcygpOworCQkJCXRoaXMuc3VwZXJJbnRlcmZhY2VzW2ldLnN1cGVy
SW50ZXJmYWNlcygpOworCQkJfSBmaW5hbGx5IHsKKwkJCQl0aGlzLmVudmlyb25tZW50Lm1heVRv
bGVyYXRlTWlzc2luZ1R5cGUgPSB3YXNUb2xlcmF0aW5nTWlzc2luZ1R5cGVQcm9jZXNzaW5nQW5u
b3RhdGlvbnM7CisJCQl9CQogCQl9CiAJCXRoaXMudHlwZUJpdHMgfD0gdGhpcy5zdXBlckludGVy
ZmFjZXNbaV0udHlwZUJpdHM7CiAJfQ==
</data>

          </attachment>
      

    </bug>

</bugzilla>