<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>449262</bug_id>
          
          <creation_ts>2014-10-29 19:57:00 -0400</creation_ts>
          <short_desc>[formatter] Allow the use of third-party Java code formatters</short_desc>
          <delta_ts>2014-12-10 07:12:52 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords>noteworthy</keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>4.5 M4</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Harry Terkelsen">het</reporter>
          <assigned_to name="Harry Terkelsen">het</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>eclipse.sprigogin</cc>
    
    <cc>jarthana</cc>
    
    <cc>manpalat</cc>
    
    <cc>markus_keller</cc>
    
    <cc>noopur_gupta</cc>
    
    <cc>thirumala</cc>
    
    <cc>tparker</cc>
          
          <votes>2</votes>

      

      

      <flag name="review"
          id="63814"
          type_id="1"
          status="+"
          setter="manpalat"
    />
    <flag name="review"
          id="63829"
          type_id="1"
          status="+"
          setter="markus_keller"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2473773</commentid>
    <comment_count>0</comment_count>
    <who name="Harry Terkelsen">het</who>
    <bug_when>2014-10-29 19:57:59 -0400</bug_when>
    <thetext>JDT should allow overriding of the built-in formatter via extension point so that users can supply their own Java formatters.

The built-in Eclipse formatter works great, but sometimes there are codebase-specific formatting options that the Eclipse formatter cannot do. At Google specifically, we have an internal Java formatter that is specifically tailored to Google style that we would like to integrate into Eclipse. This is the approach that is used in CDT, where one can plug-in one of the popular C/C++ formatters such as clang-format easily with an extension point.

I propose that JDT adds an extension point that allows a client to extend org.eclipse.jdt.core.formatter.CodeFormatter so that Eclipse will use their custom formatter. The selection between the various formatters can happen in the &quot;Formatting&quot; preference page, where the combo box for selecting formatters is hidden if no custom formatters are provided. This mirrors CDT behavior.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2478363</commentid>
    <comment_count>1</comment_count>
    <who name="Harry Terkelsen">het</who>
    <bug_when>2014-11-06 16:52:16 -0500</bug_when>
    <thetext>Gentle ping. I have written patches for jdt.core and jdt.ui that implement this functionality. They should be pretty straightforward since they are practically verbatim copies from CDT. I&apos;ve been sitting on them waiting for some feedback on this bug report. Are there any comments on this feature?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2478369</commentid>
    <comment_count>2</comment_count>
    <who name="Harry Terkelsen">het</who>
    <bug_when>2014-11-06 17:11:47 -0500</bug_when>
    <thetext>The jdt.core gerrit review is here: https://git.eclipse.org/r/#/c/36081/
The jdt.ui gerrit review is here: https://git.eclipse.org/r/#/c/36082/</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2478432</commentid>
    <comment_count>3</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2014-11-06 22:14:55 -0500</bug_when>
    <thetext>Will take a look (at the jdt core  part).
Noopur: Can you take up the jdt.ui part review?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2478440</commentid>
    <comment_count>4</comment_count>
    <who name="Noopur Gupta">noopur_gupta</who>
    <bug_when>2014-11-06 23:59:18 -0500</bug_when>
    <thetext>(In reply to Manoj Palat from comment #3)
&gt; Will take a look (at the jdt core  part).
&gt; Noopur: Can you take up the jdt.ui part review?
Yes, I will review the jdt.ui patch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2478484</commentid>
    <comment_count>5</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2014-11-07 03:16:58 -0500</bug_when>
    <thetext>Markus: just stumbled upon this comment of yours at bug 309787 comment 3 regarding &quot;support &quot;pluggable&quot; code formatters&quot;. Since the commit of this patch would mean the extension point support, what is your take for this bug (current bug 449262)?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2479102</commentid>
    <comment_count>6</comment_count>
    <who name="Sergey Prigogin">eclipse.sprigogin</who>
    <bug_when>2014-11-07 13:37:17 -0500</bug_when>
    <thetext>(In reply to Manoj Palat from comment #5)

CDT has been supporting pluggable code formatters for a long time. Inside our company we are successfully using one such formatter based on clang-format. I don&apos;t see a reason why this positive experience cannot be extended to JDT.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2480284</commentid>
    <comment_count>7</comment_count>
    <who name="Harry Terkelsen">het</who>
    <bug_when>2014-11-10 20:29:02 -0500</bug_when>
    <thetext>Markus: Regarding your comment in bug 309787 comment 3, the extension point defined in this patch addresses the concerns with the old extension point because implementors use the new formatter interface and are passed the formatter options specified in DefaultCodeFormatterConstants. This is, of course, no guarantee that the implementor will honor the formatter options, but at least with the new extension point (adapting a sufficiently customizable third-party formatter) it will be possible to use the options. As Sergey mentioned, this functionality has been a part of CDT for a long time.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2482913</commentid>
    <comment_count>8</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2014-11-14 08:17:19 -0500</bug_when>
    <thetext>I have a problem with this. I hoped that Google is helping us to make the built-in formatter better, so that it can also handle Google&apos;s profile, see e.g. bug 303519.

If we proceed with this bug, I&apos;m pretty sure that the interest of that contribution vanishes.

For now I&apos;d say -1 and focus our energy on bug 303519 and any other obstacles that prevent Google from using the built-in formatter.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2482945</commentid>
    <comment_count>9</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-11-14 08:55:12 -0500</bug_when>
    <thetext>I agree with Dani.

If we still decide to add an extension point, then the default code formatter should also be contributed via the extension point. The javaFormatter.exsd would also need some love (%javaFormatterName doesn&apos;t work; copy/paste bug in example; should tell that the formatter is expected to use the default formatter&apos;s options).

The Formatter preference page just seems to use the last-stored formatter to render the preview, and the profile edit dialog always seems to use the built-in formatter. The preference page would either use a group for both sections or for none. The &quot;Code formatter&quot; label should be in sentence case.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2484572</commentid>
    <comment_count>10</comment_count>
    <who name="Sergey Prigogin">eclipse.sprigogin</who>
    <bug_when>2014-11-17 22:24:19 -0500</bug_when>
    <thetext>(In reply to Dani Megert from comment #8)

Hi Dani,

Bug 303519 is still being worked on by Mateusz Matela. If he is successful in his rewrite of the built-in formatter, we may consider using it in future and contribute to it if necessary. The task of rewriting the JDT code formatter turned out to be very hard. We put a lot of effort into it, but havent achieved satisfactory results. Supporting a particular coding style on the other hand is much easier than supporting every coding style under the sun. There are already two independently developed Java formatters that do reasonably good job for our coding style.

Preventing Eclipse users from using an external code formatter with JDT is wrong for a number of reasons:

1. It violates the principle of openness of Eclipse as a platform and puts Eclipse at a disadvantage compared to Vim, Emacs and IntelliJ that are already capable of using external code formatters.

2. The extension point is going to be useful even when all problems with the built-in formatter are resolved. It is not uncommon for a large company to run in a multi-tool environment, where a single formatter is blessed for all tools. Making it more difficult to run that formatter from Eclipse only hurts Eclipse.

3. If there is a thought that shutting off Eclipses extensibility will cause Google to invest more time in Eclipses built-in formatter, that hope is misplaced. That criterion should be removed from these discussions.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2489023</commentid>
    <comment_count>11</comment_count>
    <who name="Harry Terkelsen">het</who>
    <bug_when>2014-11-25 17:26:27 -0500</bug_when>
    <thetext>(In reply to Markus Keller -- away till Nov 28 from comment #9)
&gt; I agree with Dani.
&gt; 
&gt; If we still decide to add an extension point, then the default code
&gt; formatter should also be contributed via the extension point. The
&gt; javaFormatter.exsd would also need some love (%javaFormatterName doesn&apos;t
&gt; work; copy/paste bug in example; should tell that the formatter is expected
&gt; to use the default formatter&apos;s options).
&gt; 
&gt; The Formatter preference page just seems to use the last-stored formatter to
&gt; render the preview, and the profile edit dialog always seems to use the
&gt; built-in formatter. The preference page would either use a group for both
&gt; sections or for none. The &quot;Code formatter&quot; label should be in sentence case.

I&apos;ve fixed the javaFormatter.exsd and have the preview on the profile edit dialog changing with the selection of the custom formatter in the most recent Gerrit patches. Thanks!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2490049</commentid>
    <comment_count>12</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2014-11-28 04:04:47 -0500</bug_when>
    <thetext>(In reply to Sergey Prigogin from comment #10)
&gt; (In reply to Dani Megert from comment #8)

Sounds fair, especially that paragraph:
&gt; Supporting a particular coding style
&gt; on the other hand is much easier than supporting every coding style under
&gt; the sun.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2491534</commentid>
    <comment_count>13</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-12-02 06:42:13 -0500</bug_when>
    <thetext>(In reply to Harry Terkelsen from comment #11)
Thanks, the javaFormatter.exsd looks good now.

&gt; the default code formatter should also be contributed via the extension point

This is still missing. This is important for documentation purposes, and the &quot;eat your own dogfood&quot; also ensures that the extension point processing actually works, even if no third-party formatter is used.

The Javadoc of org.eclipse.jdt.core.JavaCore#JAVA_FORMATTER should mention the extension point &quot;org.eclipse.jdt.core.javaFormatter&quot;.

org.eclipse.jdt.core.formatter.CodeFormatter#setOptions(Map&lt;String, ?&gt;) should take a Map&lt;String, String&gt;. I know some APIs are missing an explicit specification of the value type, but others are clear about it, e.g. JavaCore#getOption(String) and JavaCore#setOptions(Hashtable).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2492122</commentid>
    <comment_count>14</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-12-03 08:23:00 -0500</bug_when>
    <thetext>I&apos;ve just rebased and reviewed the jdt.ui changes, and I&apos;ve uploaded https://git.eclipse.org/r/#/c/36082/3 with a few layout changes.

The preview on the Formatter preference page now uses the selected formatter, but the Edit Profile dialog still doesn&apos;t. That&apos;s OK for me, since I guess that third-party formatter won&apos;t observe the default formatter&apos;s settings anyway...

Good to go once comment 13 is addressed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2493369</commentid>
    <comment_count>15</comment_count>
    <who name="Harry Terkelsen">het</who>
    <bug_when>2014-12-05 14:17:05 -0500</bug_when>
    <thetext>I&apos;ve addressed comment #13 in the most recent patch in jdt.core. Thanks for your review comments, Markus and Manoj</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2493642</commentid>
    <comment_count>16</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-12-07 18:40:52 -0500</bug_when>
    <thetext>Thanks, released as
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=13d88a2db10e3a34264b75313001b46a5abddbdd and
http://git.eclipse.org/c/jdt/eclipse.jdt.ui.git/commit/?id=e80862cc16da4931b3162859fcc8cc41ba1da7a3

After the latest changes in jdt.core, the CustomCodeFormatterBlock showed the built-in formatter twice. When looking closer at the implementation, I also saw it doesn&apos;t properly handle multiple formatter contributions with the same name. I&apos;ve fixed those issues before releasing, and I formatted the code.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2494135</commentid>
    <comment_count>17</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-12-08 14:34:09 -0500</bug_when>
    <thetext>Found a bug in ToolFactory. E.g. RunFormatterTests wrote many wrong messages like this to the log: &quot;Unable to instantiate formatter extension, returning built-in formatter.&quot;

The error message should include the formatterId, and nothing should be logged if the JavaCore.JAVA_FORMATTER option is not set.

Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=364abd1fe47d562f576cb6b54a083094e0671f23</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2495143</commentid>
    <comment_count>18</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-12-10 07:12:52 -0500</bug_when>
    <thetext>Verified for 4.5 M4 with build I20141209-2000</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>