<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>424637</bug_id>
          
          <creation_ts>2013-12-24 14:31:00 -0500</creation_ts>
          <short_desc>[1.8][compiler][null] AIOOB in ReferenceExpression.resolveType with a method reference to Files::walk</short_desc>
          <delta_ts>2014-02-24 17:50:53 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Timo Kinnunen">timo.kinnunen</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>anchakrk</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2344831</commentid>
    <comment_count>0</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2013-12-24 14:31:29 -0500</bug_when>
    <thetext>This may be a duplicate but the problematic source code is so neat I&apos;m reporting it without checking too carefully :)

What steps will reproduce the problem?
1. Copy the source code from the error message below and paste it to a project and save.
2. AIOOB is logged many many times from many many places.

Tested with BETA_JAVA8 binaries updated earlier today.

-- Error Details --
Date: Tue Dec 24 21:15:24 EET 2013
Message: Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package vararg.methodref;

import java.nio.file.Files;
import java.nio.file.Path;
import java.util.function.Function;
import java.util.stream.Stream;


public class AstAndReconcileErrors {
  public static void method() {
    Function&lt;Path, Stream&lt;Path&gt;&gt; method = Files::walk;
  }
}

----------------------------------- SOURCE END -------------------------------------
Severity: Error
Product: Eclipse SDK 4.3.1.v20130911-1000 (org.eclipse.sdk.ide)
Plugin: org.eclipse.jdt.core
Session Data:
eclipse.buildId=4.3.0.M20130911-1000
java.version=1.8.0-ea
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Command-line arguments:  -os win32 -ws win32 -arch x86_64

Exception Stack Trace:
java.lang.ArrayIndexOutOfBoundsException: 1
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.resolveType(ReferenceExpression.java:468)
	at org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.resolve(LocalDeclaration.java:244)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:620)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:303)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:531)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1209)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1319)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:570)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:920)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:965)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:204)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:270)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:190)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:89)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:728)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:788)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2344851</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-25 10:37:01 -0500</bug_when>
    <thetext>I could observe an NPE a la bug 424631 but never an AIOOBE.

I&apos;d appreciate if you&apos;d retry with the next nightly build, thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2344887</commentid>
    <comment_count>2</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2013-12-26 04:35:43 -0500</bug_when>
    <thetext>I&apos;ve reproduced this with self-built BETA_JAVA8 binaries (using a clone of https://github.com/kdvolder/eclipse-java8 project), self-checked out BETA_JAVA8 projects including eclipse.jdt.core with HEAD at commit 06bdf5f8ca932659165d125e6cf2506452ef5977 and an empty workspace with Eclipse SDK 4.3.1 win32 x64. 

After installing the plugins and copy-pasting the code, to reproduce the AIOOB the only setting I needed to change was to turn on Enable annotation-based null analysis in Errors/Warnings and answer yes to the dialog.

To make absolutely sure that I was using binaries with known code I changed line 468 in ReferenceExpression to (all on a single line):

long declared; try {declared = this.descriptor.parameters[i+paramOffset].tagBits &amp; TagBits.AnnotationNullMASK;}catch(ArrayIndexOutOfBoundsException e) {throw new ArrayIndexOutOfBoundsException(e.getMessage()+ &apos; &apos;+&apos;t&apos;+&apos;h&apos;+&apos;i&apos;+&apos;s&apos;+&apos;.&apos;+&apos;d&apos;+&apos;e&apos;+&apos;s&apos;+&apos;c&apos;+&apos;r&apos;+&apos;i&apos;+&apos;p&apos;+&apos;t&apos;+&apos;o&apos;+&apos;r&apos;+&apos;=&apos;+this.descriptor);}

As expected this changed the error message which now showed:

java.lang.ArrayIndexOutOfBoundsException: 1 this.descriptor=public abstract Stream&lt;java.nio.file.Path&gt; apply(java.nio.file.Path) 
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.resolveType(ReferenceExpression.java:468)
	at org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.resolve(LocalDeclaration.java:244)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2345850</commentid>
    <comment_count>3</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-01-04 07:10:37 -0500</bug_when>
    <thetext>Another example, javac b121 compiles this without errors:

package aioob.ReferenceExpression.resolveType.line468;
import java.util.function.Consumer;
public class VarArgsMethodReferenceTest {
  @SuppressWarnings(&quot;unused&quot;) public static void main(String[] argv) {
    Consumer&lt;String&gt; printffer;
    printffer = System.out::printf;
  }
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2345943</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-05 23:28:19 -0500</bug_when>
    <thetext>Incorrect varargs handling during null analysis.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2346254</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-06 16:50:26 -0500</bug_when>
    <thetext>Status with latest in BETA_JAVA8:

example from comment 0:
	1. ERROR in X.java (at line 9)
		Function&lt;Path, Stream&lt;Path&gt;&gt; method = Files::walk;
		                                      ^^^^^^^^^^^
	Unhandled exception type IOException


example from comment 3 (compiles fine, then):

java.lang.BootstrapMethodError: call site initialization exception
	at java.lang.invoke.CallSite.makeSite(CallSite.java:328)
	at java.lang.invoke.MethodHandleNatives.linkCallSite(MethodHandleNatives.java:296)
	at X.main(X.java:5)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:483)

Is anybody still seeing exceptions in the compiler?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2346256</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-06 16:53:26 -0500</bug_when>
    <thetext>Passing test from comment 0 was added via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=06bdf5f8ca932659165d125e6cf2506452ef5977</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2346263</commentid>
    <comment_count>7</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-01-06 17:37:25 -0500</bug_when>
    <thetext>I don&apos;t think the test case is complete as written, it probably needs to called with additional arguments like this:

runNegativeTest(&lt;testFiles&gt;, &lt;expectedCompilerLog&gt;, null, true, Collections.singletonMap(CompilerOptions.OPTION_AnnotationBasedNullAnalysis, CompilerOptions.ENABLED));</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2346273</commentid>
    <comment_count>8</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-06 18:20:11 -0500</bug_when>
    <thetext>(In reply to Timo Kinnunen from comment #7)
&gt; I don&apos;t think the test case is complete as written, it probably needs to
&gt; called with additional arguments like this:
&gt; 
&gt; runNegativeTest(&lt;testFiles&gt;, &lt;expectedCompilerLog&gt;, null, true,
&gt; Collections.singletonMap(CompilerOptions.OPTION_AnnotationBasedNullAnalysis,
&gt; CompilerOptions.ENABLED));

Ups, that&apos;s the part I missed in your earlier comment.

Yep, now I&apos;m able to reproduce.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2346289</commentid>
    <comment_count>9</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-06 20:09:08 -0500</bug_when>
    <thetext>Test &amp; fix released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=898da07e1ab8f70e81db909fb2e1c38edc9b87c3

While I was at it I also improved null analysis for reference expressions to use the recursive facility from NullAnnotationMatching.

The runtime error from comment 3 looks like bug 424628 (disabled test NullTypeAnnotationTest._testBug424637_comment3() )</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2346357</commentid>
    <comment_count>10</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-01-07 04:59:49 -0500</bug_when>
    <thetext>Examples from comment 0 and comment 3  both work for me with the changes in place, thanks!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2346360</commentid>
    <comment_count>11</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-07 05:03:32 -0500</bug_when>
    <thetext>(In reply to Timo Kinnunen from comment #10)
&gt; Examples from comment 0 and comment 3  both work for me with the changes in
&gt; place, thanks!

Phew, thanks for confirming :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2357665</commentid>
    <comment_count>12</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-02 14:12:29 -0500</bug_when>
    <thetext>Still something wrong:

interface I {
	String foo(X x, String s2);
}

public class X {
	String goo(String ...ts) {
		System.out.println(ts[0]);  
		return ts[0];
	}
	public static void main(String[] args) {
		I i = X::goo;
		String s = i.foo(new X(), &quot;world&quot;);
		System.out.println(s);     
	}
}

triggers an AIOOB on head.

Thanks for taking a look.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2357695</commentid>
    <comment_count>13</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-02 17:39:46 -0500</bug_when>
    <thetext>I cannot reproduce using HEAD as of 7b815bfaa3b1a804bb04e149d3fdcdeccff01e22

The program is accepted by the compiler, but at runtime:


Exception in thread &quot;main&quot; java.lang.BootstrapMethodError: call site initialization exception
        at java.lang.invoke.CallSite.makeSite(CallSite.java:328)
        at java.lang.invoke.MethodHandleNatives.linkCallSite(MethodHandleNatives.java:296)
        at X.main(X.java:11)
Caused by: java.lang.invoke.LambdaConversionException: Type mismatch for lambda argument 0: class java.lang.String is not convertible to class [Ljava.lang.String;
        at java.lang.invoke.AbstractValidatingLambdaMetafactory.validateMetafactoryArgs(AbstractValidatingLambdaMetafactory.java:248)
        at java.lang.invoke.LambdaMetafactory.metafactory(LambdaMetafactory.java:303)
        at java.lang.invoke.CallSite.makeSite(CallSite.java:289)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2357707</commentid>
    <comment_count>14</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-02 21:26:27 -0500</bug_when>
    <thetext>Here is the story/history since there is some mystery going on:

- I made some &quot;innocuous changes&quot;, introduced a new boolean field
in ReferenceExpression receiverPrecedesParameters initialized to false.

-  int paramOffset = 0; transformed to receiverPrecedesParameters  = false;

-  Transformed 

   paramOffset = 1; // 0 is receiver, real parameters start at 1

   into

   this.receiverPrecedesParameters = true; // 0 is receiver, real parameters start at 1
 
- Transformed

TypeBinding descriptorParameter = this.descriptor.parameters[i+paramOffset];

into 

TypeBinding descriptorParameter = this.descriptor.parameters[i + (this.receiverPrecedesParameters ? 1 : 0)];
    			
- This got me an AIOOB on the snippet from comment#12

- I backed out the changes and saw that the AIOOB persisted.

- Today when stepping over the line where the array access happens I get:

02:07:54.309 0x477d900   j9prt.748    *   ** ASSERTION FAILED ** at common/j9memtag.c:145: ((memoryCorruptionDetected))
JVMDUMP039I Processing dump event &quot;traceassert&quot;, detail &quot;&quot; at 2014/02/03 07:37:54 - please wait.
JVMDUMP032I JVM requested System dump using &apos;C:\work\eclipse-standard-kepler-SR1-win32-x86_64\eclipse\core.20140203.073754.10192.0001.dmp&apos; in response to an event
JVMDUMP010I System dump written to C:\work\eclipse-standard-kepler-SR1-win32-x86_64\eclipse\core.20140203.073754.10192.0001.dmp
JVMDUMP032I JVM requested Java dump using &apos;C:\work\eclipse-standard-kepler-SR1-win32-x86_64\eclipse\javacore.20140203.073754.10192.0002.txt&apos; in response to an event
JVMDUMP010I Java dump written to C:\work\eclipse-standard-kepler-SR1-win32-x86_64\eclipse\javacore.20140203.073754.10192.0002.txt
JVMDUMP032I JVM requested Snap dump using &apos;C:\work\eclipse-standard-kepler-SR1-win32-x86_64\eclipse\Snap.20140203.073754.10192.0003.trc&apos; in response to an event
JVMDUMP010I Snap dump written to C:\work\eclipse-standard-kepler-SR1-win32-x86_64\eclipse\Snap.20140203.073754.10192.0003.trc
JVMDUMP013I Processed dump event &quot;traceassert&quot;, detail &quot;&quot;.

- This may be a red herring, since after I restart eclipse, I see the AIOOB.

- Basically for the given test case, 

int expectedlen = this.binding.parameters.length;
        	int providedLen = this.descriptor.parameters.length;
        	boolean isVarArgs = false;
        	if (this.binding.isVarargs()) {
        		isVarArgs = (providedLen == expectedlen)
					? !this.descriptor.parameters[expectedlen-1].isCompatibleWith(this.binding.parameters[expectedlen-1])
					: true;
        		len = providedLen; // binding parameters will be padded from InferenceContext18.getParameter()
        	} else {
        		len = Math.min(expectedlen, providedLen);
        	}

expectedlen = 1, providedLen = 2

so we loop from 0 - len -1 and get an AIOOB since the index is further shifted
by 1 due to receiver preceding parameters.

I&apos;ll try the commit id you mention and see what happens differently.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2357708</commentid>
    <comment_count>15</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-02 21:38:59 -0500</bug_when>
    <thetext>I tried SR1 + Java 8 bundles dated:

Eclipse Java Development Tools Patch for Java 8 Support (BETA)	1.0.0.v20140203-0104_BETA_JAVA8	org.eclipse.jdt.java8patch.feature.group	Eclipse.org

on a clean and empty workspace and I am able to reproduce with the snippet
from comment#12. See that the Math.min call is not happening for the isVarargs()
branch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2358275</commentid>
    <comment_count>16</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-03 19:45:28 -0500</bug_when>
    <thetext>I see it now. I was too far out of context from the previous examples to remember to enable null annotations.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2358280</commentid>
    <comment_count>17</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-03 20:06:52 -0500</bug_when>
    <thetext>Obviously the guy writing the null analysis didn&apos;t understand the business of paramOffset/receiverPrecedesParameters :)
If that flag is true, providedLen should be one less, because the first parameter doesn&apos;t &quot;count&quot; as a real parameter.

OTOH, if we have more provided than expected parameters, we keep the greater providedLen, the expected side will be &quot;padded&quot; from InferenceContext18.getParameter(). That&apos;s why we don&apos;t call Math.min(..) on that branch.

Test &amp; fix released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=2001b039afb3494b66b4a4b694a48c1ddf006564</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2367908</commentid>
    <comment_count>18</comment_count>
    <who name="ANIRBAN CHAKRABORTY">anchakrk</who>
    <bug_when>2014-02-24 17:50:53 -0500</bug_when>
    <thetext>Verified as working for Eclipse + Java 8 RC1 using Kepler SR1 + Eclipse Java Development Tools Patch for Java 8 Support (BETA) 1.0.0.v20140220-2054</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>