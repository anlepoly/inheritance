<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>424500</bug_id>
          
          <creation_ts>2013-12-19 16:59:00 -0500</creation_ts>
          <short_desc>[1.8] All poly expressions should avoid reevaluation against the same target type.</short_desc>
          <delta_ts>2014-12-10 23:19:09 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>4.5 M4</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Stephan Herrmann">stephan.herrmann</reporter>
          <assigned_to name="shankha banerjee">shankhba</assigned_to>
          <cc>jarthana</cc>
    
    <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
          <qa_contact name="Srikanth Sankaran">srikanth_sankaran</qa_contact>
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2344111</commentid>
    <comment_count>0</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-19 16:59:52 -0500</bug_when>
    <thetext>When debugging examples involving nested structures that require type inference we can see that inference and resolving for the same elements is triggered ridiculously many times.

Consider a lambda as an argument to a method with many candidate overloads: for each method the lambda is asked isCompatible against the corresponding method parameter. Consider further a body inside that lambda that requires type inference.

Each time isCompatible is invoked we create a copy of the lambda, invoke resolveType which may invoke inner inference and all results we compute inside will immediately be discarded.

Caching such results not only improves performance but should also make debugging easier :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2344147</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-12-19 20:33:31 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #0)
&gt; When debugging examples involving nested structures that require type
&gt; inference we can see that inference and resolving for the same elements is
&gt; triggered ridiculously many times.
&gt; 
&gt; Consider a lambda as an argument to a method with many candidate overloads:
&gt; for each method the lambda is asked isCompatible against the corresponding
&gt; method parameter. Consider further a body inside that lambda that requires
&gt; type inference.
&gt; 
&gt; Each time isCompatible is invoked we create a copy of the lambda, invoke
&gt; resolveType which may invoke inner inference and all results we compute
&gt; inside will immediately be discarded.

isCompatibleWith() calls copy + resolveType  + analyze shape only if 
shape analysis is incomplete for the lambda. This would mean only as
many times as needed to complete shape analysis - because it can fail
against some initial candidate target type(s)

I had initially considered caching, but didn&apos;t implement it because part F 
does not really require it. For part F, result expressions matter ONLY for
explicit lambdas.

I was mildly surprised that part G requires it even for implicit lambdas -
in this case, can we check if we are doing the right thing ?

I do have a comment: 

// // don&apos;t want to use the resolvedType - polluted from some other overload resolution candidate

in isCompatibleWith()



&gt; 
&gt; Caching such results not only improves performance but should also make
&gt; debugging easier :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2353858</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-23 16:40:19 -0500</bug_when>
    <thetext>Much fine tuning has gone into the control of inference. InferenceContext18 itself stores some results that can be used for answering the same question asked again and again. This now seems much less of an issue, although LambdaExpression in particular does not yet participate in such caching.

I&apos;ll leave it as an optional (polish) item.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2363226</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-13 23:48:25 -0500</bug_when>
    <thetext>Per comment#2, adjusted the title and target milestone.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2455582</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-23 23:05:54 -0400</bug_when>
    <thetext>Debugging G is a nightmare : I don&apos;t know how you managed :) I&apos;ll fix this for
M3.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2455965</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-09-24 13:55:11 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #4)
&gt; Debugging G is a nightmare : I don&apos;t know how you managed :) I&apos;ll fix this
&gt; for M3.

We do have a set of toString()s and I have may private set of breakpoints. Not sure what you want to fix here? Simplify the algorithm? :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2456045</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-24 19:35:08 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #5)
&gt; (In reply to Srikanth Sankaran from comment #4)
&gt; &gt; Debugging G is a nightmare : I don&apos;t know how you managed :) I&apos;ll fix this
&gt; &gt; for M3.
&gt; 
&gt; We do have a set of toString()s and I have may private set of breakpoints.
&gt; Not sure what you want to fix here? Simplify the algorithm? :)

I was referring to the fact that in deeply nested invocations, while stepping
through some piece of code in outer inference, the repeated resolution of the
lambda results in various breakpoints firing in a re-entrant manner forcing 
context switch and creating parallel universes - sometimes leaving me confused
about which universe I am inhabiting. So I find myself having to keep the 
breakpoints set minimal or attaching conditions tying them to the method&apos;s name.
 
Of course this is intrinsic to the situation insofar as first evaluation of the 
lambda against the given target type, but subsequent ones are best eliminated.

BTW, it is only in the last couple of weeks I am getting to take a real close 
look at the G implementation - Let me record that it looks very clean and solid 
- this should put us in terra firma once the initial flurry of bug fixing 
finishes  and things settle down - great job!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2456233</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-09-25 08:12:07 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #6)
&gt; I was referring to the fact that in deeply nested invocations, while stepping
&gt; through some piece of code in outer inference, the repeated resolution of the
&gt; lambda results in various breakpoints firing in a re-entrant manner forcing 
&gt; context switch and creating parallel universes - sometimes leaving me
&gt; confused about which universe I am inhabiting.

I see, yes, I know that feeling :)

Yes, fixing this bug will - as a side effect - much improve the debugging experience!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2460078</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-05 05:12:38 -0400</bug_when>
    <thetext>Shankha can you get started on this asap ? Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2460081</commentid>
    <comment_count>9</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-05 05:13:40 -0400</bug_when>
    <thetext>*** Bug 442793 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2460232</commentid>
    <comment_count>10</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-10-06 00:57:13 -0400</bug_when>
    <thetext>Working on it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2461488</commentid>
    <comment_count>11</comment_count>
      <attachid>247717</attachid>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-10-08 06:23:18 -0400</bug_when>
    <thetext>Created attachment 247717
Patch: Implemented Caching For Lambdas

We cache the Lambda Expressions with the key being the target interface.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2462651</commentid>
    <comment_count>12</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-10 00:38:34 -0400</bug_when>
    <thetext>(In reply to shankha banerjee from comment #11)
&gt; Created attachment 247717 [details]
&gt; Patch: Implemented Caching For Lambdas
&gt; 
&gt; We cache the Lambda Expressions with the key being the target interface.

Thanks Shankha, I absorbed with some changes into the patch set posted
for https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444#c62</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2462766</commentid>
    <comment_count>13</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-10 05:40:41 -0400</bug_when>
    <thetext>Please see that LE.isCompatibleWith should also use the cache.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2465424</commentid>
    <comment_count>14</comment_count>
      <attachid>247891</attachid>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-10-15 08:02:12 -0400</bug_when>
    <thetext>Created attachment 247891
Patch

(In reply to Srikanth Sankaran from comment #13)
&gt; Please see that LE.isCompatibleWith should also use the cache.

1) The patch takes in all the changes from the cumulative patch posted in 
Bug 437444 Comment 76.

2) The cache has been implemented. 
3) The copy creation of the Lambda expression has been pushed into a new method.
4) Please consider the test case: 

OverLoadResolutionTest8.java#test016:
foo(()-&gt; ()-&gt; \&quot;String\&quot;)

For the return type (LE) ()-&gt; \&quot;String\&quot; the expectedType
is already set. Therefore we do not enter the condition:

LambdaExpression#resolveType(BlockScope blockScope)
Line: 246.
if (this.expectedType == null &amp;&amp; this.expressionContext == INVOCATION_CONTEXT) {

The cache resolvedCopies is not allocated.

Therefore the check to guard against null is needed:
LambdaExpression copy = this.resolvedCopies == null ? null : this.resolvedCopies.get(left);
in LE#isCompatibleWih: 716.

LambdaExpression.isCompatibleWith(TypeBinding, Scope) line: 716	
LambdaExpression.isCompatibleWith(TypeBinding, Scope) line: 764	

I don&apos;t think the returnStatement will be checked more than once and thus the cache will not be hit.

I thought of putting a similar check for:
getResolvedCopyForInferenceTargeting, but could not come up with a test case.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2468401</commentid>
    <comment_count>15</comment_count>
      <attachid>248031</attachid>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-10-21 01:25:59 -0400</bug_when>
    <thetext>Created attachment 248031
Patch

Needs more investigation.
---
Cache for both Lamnda Expression and Reference Expression has been implemented. 
Please ignore comment 14. I will explain all the details here, so that everything is at one place.

1) The patch takes in all the changes from the cumulative patch posted in 
Bug 437444 Comment 76.
2) The copy creation of the Lambda expression has been pushed into a new method.
---
3) The explanation for explicitly checking if the cache pointer is null or not is given below
---
1) LambdaExpression.java
Please consider  test cases:
OverLoadResolutionTest8.java#test016:
foo(()-&gt; ()-&gt; \&quot;String\&quot;)

For the return type (LE) ()-&gt; \&quot;String\&quot; the expectedType
is already set. Therefore we do not enter the condition:

LambdaExpression#resolveType(BlockScope blockScope)
Line: 246.
if (this.expectedType == null &amp;&amp; this.expressionContext == INVOCATION_CONTEXT) {

The cache resolvedCopies is not allocated.
Therefore we have the check to guard against null for resolvedCopies.

The call to LambdaExpression#isCompatibleWith for return type happens from:
LambdaExpression#isCompatibleWith(TypeBinding left, final Scope someScope)
Line: 762 (Patch)
if (!returnExpressions[i].isCompatibleWith(sam.returnType, this.enclosingScope))

I don&apos;t think the returnStatement will be checked more than once and thus the cache will not be hit. I may be wrong looking at: GenericsRegressionTest_1_8#testBug435689. 

---
2. Reference Expression
GenericsRegressionTest_1_8#testBug435689.

Consider the line:
new Foo&lt;Bar&gt;().apply(bar -&gt; bar::setBar)

Similar reasoning as given for LambdaExpession.java.
For the return type (RE) ()-&gt; bar::setBar the expectedType
is already set. Therefore we do not enter the condition:

ReferenceExpression#resolveType(BlockScope scope)
Line: 401:
if (this.expectedType == null &amp;&amp; this.expressionContext == INVOCATION_CONTEXT) {

The cache resolvedTargetMethod is not set and therefore the need for the null
check in:
ReferenceExpression#findCompileTimeMethodTargeting.

====

Remaining items:

1) If a null check is required for the cache resolvedCopies in LE#getResolvedCopyForInferenceTargeting.

2) If a null check is required for the cache resolvedTargetMethod in 
RE#isCompatibleWith.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2470219</commentid>
    <comment_count>16</comment_count>
      <attachid>248116</attachid>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-10-23 01:31:43 -0400</bug_when>
    <thetext>Created attachment 248116
WIP: Patch

The issue which we see in Comment 15 is due to a Lambda being present inside a Lambda Expression with the outer lambda being in invocation context. 

The inner lambda is not aware it is part of invocation context. 

Solution:
We move the creation of the cache from resolveType to the functions.

Issue:
NullTypeAnnotationTest.java#test443467
We miss the first error.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2470601</commentid>
    <comment_count>17</comment_count>
      <attachid>248136</attachid>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-10-23 12:04:37 -0400</bug_when>
    <thetext>Created attachment 248136
Patch

Simpler patch. Running tests. Will update with reason for the failure after tests are through.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471598</commentid>
    <comment_count>18</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-24 23:57:51 -0400</bug_when>
    <thetext>See also https://bugs.eclipse.org/bugs/show_bug.cgi?id=448794</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471602</commentid>
    <comment_count>19</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-25 00:19:52 -0400</bug_when>
    <thetext>Please also use this ticket to address the issue of lambda ground target
type resulting in different hashing as discussed between
https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444#c50 and
https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444#c58</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2474448</commentid>
    <comment_count>20</comment_count>
      <attachid>248295</attachid>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-10-31 06:47:57 -0400</bug_when>
    <thetext>Created attachment 248295
Patch

Srikanth,
Do you have some time to review the patch.
The cache has been implemented for LE, RE and function calls (MessageSend).

1) Test results are good. (https://git.eclipse.org/r/#/c/35711/).
2) I have modified LE#isCompatibleWith on the lines of your modification with getResolvedCopyForInferenceTargeting and getResolvedCopyForInferenceTargeting0.

The functionality of creating a copy of LE has been moved into a new function
getCompatibleCopy.

3) I have slightly modified your changes in LE#getResolvedCopyForInferenceTargeting.

For scenarios where the copy is null we didn&apos;t push the null value to the map(cache).
I am pushing the null values into the cache.

4) This patch is similar to the patch in Comment 16 except at that point changes for Bug 437444 were not on master.

I had notices one failure (Comment 17) on the old patch.
With the new patch there are no test failures.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2475998</commentid>
    <comment_count>21</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-03 14:50:08 -0500</bug_when>
    <thetext>Forwarding of results from https://bugs.eclipse.org/bugs/show_bug.cgi?id=448794
ensures that MessageSend and AllocationExpression avoid reevaluation against
the same target type.

Lambdas already have a partial solution. I&apos;ll take a look at this patch
and absorb the changes for LE and RE. CE does not need any support.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2476136</commentid>
    <comment_count>22</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-03 23:17:54 -0500</bug_when>
    <thetext>This patch has some issues: 

   - Looking at RE.isCompatibleWith, it is not the sam that should be
cached, but the compile time declaration that &quot;implements&quot; the sam.
So caching the sam against the target type will mess up things.

    - Code like: 

MethodBinding targetMethod = this.resolvedTargetMethod.get(targetType);
if (!this.resolvedTargetMethod.containsKey(targetType)) {

is better replaced with a null check for targetMethod rather than looking
up the map again.

Two points: (1) Caching is not really important in LE.isCompatibleWith since
once the shape analysis is complete, we don&apos;t re-resolve so I opted out of
those changes (2) in RE.resolveType for the final resolution, I am not 
consulting the cache - too much of code in RE is interspersed with error 
handling to conveniently do that.

Fixed the issues and committed here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=83b433cefe204b4efddb34a5fec23235369a79e2

Thanks Shankha</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2494945</commentid>
    <comment_count>23</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-12-10 00:29:27 -0500</bug_when>
    <thetext>Stephan, can you mark the bug verified if you are satisfied with the fix? Thanks!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2495622</commentid>
    <comment_count>24</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-12-10 23:19:09 -0500</bug_when>
    <thetext>Verified for 4.5 M4 by inspection.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>247717</attachid>
            <date>2014-10-08 06:23:00 -0400</date>
            <delta_ts>2014-10-15 08:02:12 -0400</delta_ts>
            <desc>Patch: Implemented Caching For Lambdas</desc>
            <filename>patch.patch</filename>
            <type>text/plain</type>
            <size>2341</size>
            <attacher name="shankha banerjee">shankhba</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fz
dC9MYW1iZGFFeHByZXNzaW9uLmphdmEKaW5kZXggMTMzZmNhZC4uZjZlZWU0NSAxMDA2NDQKLS0t
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FzdC9MYW1iZGFFeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9MYW1i
ZGFFeHByZXNzaW9uLmphdmEKQEAgLTQxLDYgKzQxLDcgQEAgcGFja2FnZSBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0OwogaW1wb3J0IHN0YXRpYyBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIuYXN0LkV4cHJlc3Npb25Db250ZXh0LklOVk9DQVRJT05fQ09OVEVY
VDsKIAogaW1wb3J0IGphdmEudXRpbC5Db2xsZWN0aW9uczsKK2ltcG9ydCBqYXZhLnV0aWwuSGFz
aE1hcDsKIGltcG9ydCBqYXZhLnV0aWwuSGFzaFNldDsKIGltcG9ydCBqYXZhLnV0aWwuTGlua2Vk
SGFzaFNldDsKIGltcG9ydCBqYXZhLnV0aWwuU2V0OwpAQCAtMTIwLDEyICsxMjEsMTQgQEAgcHVi
bGljIGNsYXNzIExhbWJkYUV4cHJlc3Npb24gZXh0ZW5kcyBGdW5jdGlvbmFsRXhwcmVzc2lvbiBp
bXBsZW1lbnRzIFJlZmVyZW5jZUMKIAlwdWJsaWMgY2hhcltdIHRleHQ7ICAvLyBzb3VyY2UgcmVw
cmVzZW50YXRpb24gb2YgdGhlIGxhbWJkYS4KIAlwcml2YXRlIHN0YXRpYyBmaW5hbCBTeW50aGV0
aWNBcmd1bWVudEJpbmRpbmcgW10gTk9fU1lOVEhFVElDX0FSR1VNRU5UUyA9IG5ldyBTeW50aGV0
aWNBcmd1bWVudEJpbmRpbmdbMF07CiAJcHJpdmF0ZSBzdGF0aWMgZmluYWwgQmxvY2sgTk9fQk9E
WSA9IG5ldyBCbG9jaygwLCB0cnVlKTsKKwlwcml2YXRlIEhhc2hNYXAgdGFyZ2V0SW50ZXJmYWNl
Q2FjaGU7CiAKIAlwdWJsaWMgTGFtYmRhRXhwcmVzc2lvbihDb21waWxhdGlvblJlc3VsdCBjb21w
aWxhdGlvblJlc3VsdCwgYm9vbGVhbiBhc3Npc3ROb2RlKSB7CiAJCXN1cGVyKGNvbXBpbGF0aW9u
UmVzdWx0KTsKIAkJdGhpcy5hc3Npc3ROb2RlID0gYXNzaXN0Tm9kZTsKIAkJc2V0QXJndW1lbnRz
KE5PX0FSR1VNRU5UUyk7CiAJCXNldEJvZHkoTk9fQk9EWSk7CisJCXRoaXMudGFyZ2V0SW50ZXJm
YWNlQ2FjaGUgPSBuZXcgSGFzaE1hcCgpOwogCX0KIAkKIAlwdWJsaWMgdm9pZCBzZXRBcmd1bWVu
dHMoQXJndW1lbnQgW10gYXJndW1lbnRzKSB7CkBAIC04MjYsNyArODI5LDExIEBAIHB1YmxpYyBj
bGFzcyBMYW1iZGFFeHByZXNzaW9uIGV4dGVuZHMgRnVuY3Rpb25hbEV4cHJlc3Npb24gaW1wbGVt
ZW50cyBSZWZlcmVuY2VDCiAJCQlyZXR1cm4gdGhpczsKIAkJCiAJCXRhcmdldFR5cGUgPSB0YXJn
ZXRUeXBlLnVuY2FwdHVyZSh0aGlzLmVuY2xvc2luZ1Njb3BlKTsKLQkJLy8gVE9ETzogY2FjaGlu
ZworCQlMYW1iZGFFeHByZXNzaW9uIGxhbWJkYUV4cCA9IChMYW1iZGFFeHByZXNzaW9uKSB0aGlz
LnRhcmdldEludGVyZmFjZUNhY2hlLmdldCh0YXJnZXRUeXBlKTsKKwkJaWYgKGxhbWJkYUV4cCAh
PSBudWxsKSB7CisJCQlyZXR1cm4gbGFtYmRhRXhwOworCQl9CisKIAkJSUVycm9ySGFuZGxpbmdQ
b2xpY3kgb2xkUG9saWN5ID0gdGhpcy5lbmNsb3NpbmdTY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5z
d2l0Y2hFcnJvckhhbmRsaW5nUG9saWN5KHNpbGVudEVycm9ySGFuZGxpbmdQb2xpY3kpOwogCQlm
aW5hbCBDb21waWxlck9wdGlvbnMgY29tcGlsZXJPcHRpb25zID0gdGhpcy5lbmNsb3NpbmdTY29w
ZS5jb21waWxlck9wdGlvbnMoKTsKIAkJYm9vbGVhbiBhbmFseXplTlBFID0gY29tcGlsZXJPcHRp
b25zLmlzQW5ub3RhdGlvbkJhc2VkTnVsbEFuYWx5c2lzRW5hYmxlZDsKQEAgLTg3Myw2ICs4ODAs
NyBAQCBwdWJsaWMgY2xhc3MgTGFtYmRhRXhwcmVzc2lvbiBleHRlbmRzIEZ1bmN0aW9uYWxFeHBy
ZXNzaW9uIGltcGxlbWVudHMgUmVmZXJlbmNlQwogCQkJdGhpcy5oYXNJZ25vcmVkTWFuZGF0b3J5
RXJyb3JzID0gZmFsc2U7CiAJCQl0aGlzLmVuY2xvc2luZ1Njb3BlLnByb2JsZW1SZXBvcnRlcigp
LnN3aXRjaEVycm9ySGFuZGxpbmdQb2xpY3kob2xkUG9saWN5KTsKIAkJfQorCQl0aGlzLnRhcmdl
dEludGVyZmFjZUNhY2hlLnB1dCh0YXJnZXRUeXBlLCBjb3B5KTsKIAkJcmV0dXJuIGNvcHk7CiAJ
fQogCg==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>247891</attachid>
            <date>2014-10-15 08:02:00 -0400</date>
            <delta_ts>2014-10-21 01:25:59 -0400</delta_ts>
            <desc>Patch</desc>
            <filename>patch.patch</filename>
            <type>text/plain</type>
            <size>11636</size>
            <attacher name="shankha banerjee">shankhba</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0Nhc3RUZXN0LmphdmEg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0
L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9DYXN0VGVzdC5qYXZhCmluZGV4IDUzMjFh
Y2UuLjcwZTNlMWQgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBp
bGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0Nh
c3RUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3Jj
L29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vQ2FzdFRlc3Qu
amF2YQpAQCAtMzA5MywyOCArMzA5Myw2IEBAIHB1YmxpYyB2b2lkIHRlc3Q0Mjg1MjJjKCkgdGhy
b3dzIEV4Y2VwdGlvbiB7CiAJfQogfQogCi0vLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVn
cy9zaG93X2J1Zy5jZ2k/aWQ9NDQxNzMxIEpEVCByZXBvcnRzIHVubmVjZXNzYXJ5IGNhc3QsIHVz
aW5nIHRoZSBRdWlja2ZpeCB0byByZW1vdmUgaXQgY3JlYXRlcyBzeW50YXggZXJyb3IKLXB1Ymxp
YyB2b2lkIHRlc3Q0NDE3MzEoKSB7Ci0JaWYgKHRoaXMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NG
aWxlQ29uc3RhbnRzLkpESzFfNSkKLQkJcmV0dXJuOwotCU1hcCBjdXN0b21PcHRpb25zID0gZ2V0
Q29tcGlsZXJPcHRpb25zKCk7Ci0JY3VzdG9tT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9Q
VElPTl9SZXBvcnRVbm5lY2Vzc2FyeVR5cGVDaGVjaywgQ29tcGlsZXJPcHRpb25zLkVSUk9SKTsK
LQl0aGlzLnJ1bkNvbmZvcm1UZXN0KAotCQluZXcgU3RyaW5nW10gewotCQkJIlguamF2YSIsCi0J
CQkiaW50ZXJmYWNlIE1VSUVsZW1lbnQge31cbiIgKyAKLQkJCSJpbnRlcmZhY2UgTVVJRWxlbWVu
dENvbnRhaW5lcjxUIGV4dGVuZHMgTVVJRWxlbWVudD4gZXh0ZW5kcyBNVUlFbGVtZW50e31cbiIg
KyAKLQkJCSJpbnRlcmZhY2UgTVdpbmRvd0VsZW1lbnQgZXh0ZW5kcyBNVUlFbGVtZW50IHt9XG4i
ICsgCi0JCQkiaW50ZXJmYWNlIE1XaW5kb3cgZXh0ZW5kcyBNVUlFbGVtZW50Q29udGFpbmVyPE1X
aW5kb3dFbGVtZW50PiB7fVxuIiArIAotCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKyAKLQkJCSIJ
dm9pZCB0ZXN0KE1VSUVsZW1lbnRDb250YWluZXI8TVVJRWxlbWVudD4gbWUpIHtcbiIgKyAKLQkJ
CSIJCWlmKCgoTVVJRWxlbWVudCkgbWUpIGluc3RhbmNlb2YgTVdpbmRvdykgcmV0dXJuO1xuIiAr
IAotCQkJIgkJTVdpbmRvdyBtdyA9IChNV2luZG93KSgoTVVJRWxlbWVudCltZSk7XG4iICsgCi0J
CQkiCX1cbiIgKyAKLQkJCSJ9XG4iCi0JCX0sCi0JCWN1c3RvbU9wdGlvbnMpOwotfQogcHVibGlj
IHN0YXRpYyBDbGFzcyB0ZXN0Q2xhc3MoKSB7CiAJcmV0dXJuIENhc3RUZXN0LmNsYXNzOwogfQpk
aWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2FzdC9DYXN0RXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9D
YXN0RXhwcmVzc2lvbi5qYXZhCmluZGV4IGFiZjkyZDcuLjhmNjM4ZDggMTAwNjQ0Ci0tLSBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9hc3QvQ2FzdEV4cHJlc3Npb24uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Nhc3RFeHByZXNz
aW9uLmphdmEKQEAgLTMyMiw4ICszMjIsNyBAQCBwcml2YXRlIHN0YXRpYyB2b2lkIGNoZWNrQWx0
ZXJuYXRlQmluZGluZyhCbG9ja1Njb3BlIHNjb3BlLCBFeHByZXNzaW9uIHJlY2VpdmVyLAogCiBw
dWJsaWMgYm9vbGVhbiBjaGVja1Vuc2FmZUNhc3QoU2NvcGUgc2NvcGUsIFR5cGVCaW5kaW5nIGNh
c3RUeXBlLCBUeXBlQmluZGluZyBleHByZXNzaW9uVHlwZSwgVHlwZUJpbmRpbmcgbWF0Y2gsIGJv
b2xlYW4gaXNOYXJyb3dpbmcpIHsKIAlpZiAoVHlwZUJpbmRpbmcuZXF1YWxzRXF1YWxzKG1hdGNo
LCBjYXN0VHlwZSkpIHsKLQkJaWYgKCFpc05hcnJvd2luZyAmJiBUeXBlQmluZGluZy5lcXVhbHNF
cXVhbHMobWF0Y2gsIHRoaXMucmVzb2x2ZWRUeXBlLmxlYWZDb21wb25lbnRUeXBlKCkpIC8vIGRv
IG5vdCB0YWcgYXMgdW5uZWNlc3Nhcnkgd2hlbiByZWN1cnNpbmcgdGhyb3VnaCB1cHBlciBib3Vu
ZHMKLQkJCQkmJiAhKGV4cHJlc3Npb25UeXBlLmlzUGFyYW1ldGVyaXplZFR5cGUoKSAmJiBleHBy
ZXNzaW9uVHlwZS5pc1Byb3ZhYmx5RGlzdGluY3QoY2FzdFR5cGUpKSkgeworCQlpZiAoIWlzTmFy
cm93aW5nICYmIFR5cGVCaW5kaW5nLmVxdWFsc0VxdWFscyhtYXRjaCwgdGhpcy5yZXNvbHZlZFR5
cGUubGVhZkNvbXBvbmVudFR5cGUoKSkpIHsgLy8gZG8gbm90IHRhZyBhcyB1bm5lY2Vzc2FyeSB3
aGVuIHJlY3Vyc2luZyB0aHJvdWdoIHVwcGVyIGJvdW5kcwogCQkJdGFnQXNVbm5lY2Vzc2FyeUNh
c3Qoc2NvcGUsIGNhc3RUeXBlKTsKIAkJfQogCQlyZXR1cm4gdHJ1ZTsKZGlmZiAtLWdpdCBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9MYW1iZGFFeHByZXNz
aW9uLmphdmEKaW5kZXggMTMzZmNhZC4uN2NkYmVjZSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9M
YW1iZGFFeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9MYW1iZGFFeHByZXNzaW9uLmph
dmEKQEAgLTQxLDYgKzQxLDcgQEAgcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29t
cGlsZXIuYXN0OwogaW1wb3J0IHN0YXRpYyBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIuYXN0LkV4cHJlc3Npb25Db250ZXh0LklOVk9DQVRJT05fQ09OVEVYVDsKIAogaW1wb3J0IGph
dmEudXRpbC5Db2xsZWN0aW9uczsKK2ltcG9ydCBqYXZhLnV0aWwuSGFzaE1hcDsKIGltcG9ydCBq
YXZhLnV0aWwuSGFzaFNldDsKIGltcG9ydCBqYXZhLnV0aWwuTGlua2VkSGFzaFNldDsKIGltcG9y
dCBqYXZhLnV0aWwuU2V0OwpAQCAtMjM4LDYgKzIzOSw3IEBAIHB1YmxpYyBjbGFzcyBMYW1iZGFF
eHByZXNzaW9uIGV4dGVuZHMgRnVuY3Rpb25hbEV4cHJlc3Npb24gaW1wbGVtZW50cyBSZWZlcmVu
Y2VDCiAJCQkJdGhpcy5hcmd1bWVudFR5cGVzW2ldID0gdGhpcy5hcmd1bWVudHNbaV0udHlwZS5y
ZXNvbHZlVHlwZShibG9ja1Njb3BlLCB0cnVlIC8qIGNoZWNrIGJvdW5kcyovKTsKIAkJfQogCQlp
ZiAodGhpcy5leHBlY3RlZFR5cGUgPT0gbnVsbCAmJiB0aGlzLmV4cHJlc3Npb25Db250ZXh0ID09
IElOVk9DQVRJT05fQ09OVEVYVCkgeworCQkJdGhpcy5yZXNvbHZlZENvcGllcyA9IG5ldyBIYXNo
TWFwPFR5cGVCaW5kaW5nLCBMYW1iZGFFeHByZXNzaW9uPigpOwogCQkJcmV0dXJuIG5ldyBQb2x5
VHlwZUJpbmRpbmcodGhpcyk7CiAJCX0gCiAJCQpAQCAtNzEwLDU4ICs3MTIsMjEgQEAgcHVibGlj
IGNsYXNzIExhbWJkYUV4cHJlc3Npb24gZXh0ZW5kcyBGdW5jdGlvbmFsRXhwcmVzc2lvbiBpbXBs
ZW1lbnRzIFJlZmVyZW5jZUMKIAkJaWYgKCEobGVmdCBpbnN0YW5jZW9mIFJlZmVyZW5jZUJpbmRp
bmcpKQogCQkJcmV0dXJuIGZhbHNlOwogCi0JCWxlZnQgPSBsZWZ0LnVuY2FwdHVyZSh0aGlzLmVu
Y2xvc2luZ1Njb3BlKTsKLQkJc2hhcGVBbmFseXNpczogaWYgKCF0aGlzLnNoYXBlQW5hbHlzaXND
b21wbGV0ZSkgewotCQkJSUVycm9ySGFuZGxpbmdQb2xpY3kgb2xkUG9saWN5ID0gdGhpcy5lbmNs
b3NpbmdTY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5zd2l0Y2hFcnJvckhhbmRsaW5nUG9saWN5KHNp
bGVudEVycm9ySGFuZGxpbmdQb2xpY3kpOwotCQkJZmluYWwgQ29tcGlsZXJPcHRpb25zIGNvbXBp
bGVyT3B0aW9ucyA9IHRoaXMuZW5jbG9zaW5nU2NvcGUuY29tcGlsZXJPcHRpb25zKCk7Ci0JCQli
b29sZWFuIGFuYWx5emVOUEUgPSBjb21waWxlck9wdGlvbnMuaXNBbm5vdGF0aW9uQmFzZWROdWxs
QW5hbHlzaXNFbmFibGVkOwotCQkJY29tcGlsZXJPcHRpb25zLmlzQW5ub3RhdGlvbkJhc2VkTnVs
bEFuYWx5c2lzRW5hYmxlZCA9IGZhbHNlOwotCQkJdHJ5IHsKLQkJCQlmaW5hbCBMYW1iZGFFeHBy
ZXNzaW9uIGNvcHkgPSBjb3B5KCk7Ci0JCQkJaWYgKGNvcHkgPT0gbnVsbCkgewotCQkJCQlpZiAo
dGhpcy5hc3Npc3ROb2RlKSB7Ci0JCQkJCQlhbmFseXplU2hhcGUoKTsgLy8gbm90IG9uIHRlcnJh
IGZpcm1hIGhlcmUgIQotCQkJCQkJYnJlYWsgc2hhcGVBbmFseXNpczsKLQkJCQkJfQotCQkJCQly
ZXR1cm4gIWlzUGVydGluZW50VG9BcHBsaWNhYmlsaXR5KGxlZnQsIG51bGwpOwotCQkJCX0KLQkJ
CQljb3B5LnNldEV4cHJlc3Npb25Db250ZXh0KHRoaXMuZXhwcmVzc2lvbkNvbnRleHQpOwotCQkJ
CWNvcHkuc2V0RXhwZWN0ZWRUeXBlKGxlZnQpOwotCQkJCXRoaXMuaGFzSWdub3JlZE1hbmRhdG9y
eUVycm9ycyA9IGZhbHNlOwotCQkJCVR5cGVCaW5kaW5nIHR5cGUgPSBjb3B5LnJlc29sdmVUeXBl
KHRoaXMuZW5jbG9zaW5nU2NvcGUpOwotCQkJCWlmICh0eXBlID09IG51bGwgfHwgIXR5cGUuaXNW
YWxpZEJpbmRpbmcoKSkKKwkJTGFtYmRhRXhwcmVzc2lvbiBjb3B5ID0gdGhpcy5yZXNvbHZlZENv
cGllcyA9PSBudWxsID8gbnVsbCA6IHRoaXMucmVzb2x2ZWRDb3BpZXMuZ2V0KGxlZnQpOworCQlp
ZiAodGhpcy5yZXNvbHZlZENvcGllcyA9PSBudWxsIHx8ICF0aGlzLnJlc29sdmVkQ29waWVzLmNv
bnRhaW5zS2V5KGxlZnQpKSB7CisJCQlpZiAoIXRoaXMuc2hhcGVBbmFseXNpc0NvbXBsZXRlKSB7
CisJCQkJYm9vbGVhbltdIHJldHVyblZhbCA9IG5ldyBib29sZWFuW10ge3RydWV9OworCQkJCWNv
cHkgPSBnZXRDb21wYXRpYmxlQ29weShsZWZ0LCByZXR1cm5WYWwpOworCQkJCWlmICh0aGlzLnJl
c29sdmVkQ29waWVzICE9IG51bGwpCisJCQkJCXRoaXMucmVzb2x2ZWRDb3BpZXMucHV0KGxlZnQs
IGNvcHkpOworCQkJCWlmIChjb3B5ID09IG51bGwgJiYgIXRoaXMuYXNzaXN0Tm9kZSkKKwkJCQkJ
cmV0dXJuIHJldHVyblZhbFswXTsKKwkJCQlpZiAocmV0dXJuVmFsWzBdID09IGZhbHNlKQogCQkJ
CQlyZXR1cm4gZmFsc2U7Ci0JCQkJaWYgKHRoaXMuYm9keSBpbnN0YW5jZW9mIEJsb2NrKSB7Ci0J
CQkJCWlmICh0aGlzLnJldHVybnNWb2lkKSB7Ci0JCQkJCQl0aGlzLnNoYXBlQW5hbHlzaXNDb21w
bGV0ZSA9IHRydWU7Ci0JCQkJCQlicmVhayBzaGFwZUFuYWx5c2lzOwotCQkJCQl9Ci0JCQkJfSBl
bHNlIHsKLQkJCQkJZmluYWwgRXhwcmVzc2lvbiBleHByZXNzaW9uQm9keSA9IChFeHByZXNzaW9u
KSBjb3B5LmJvZHk7Ci0JCQkJCXRoaXMudm9pZENvbXBhdGlibGUgPSB0aGlzLmFzc2lzdE5vZGUg
PyB0cnVlIDogZXhwcmVzc2lvbkJvZHkuc3RhdGVtZW50RXhwcmVzc2lvbigpOwotCQkJCQl0aGlz
LnZhbHVlQ29tcGF0aWJsZSA9IGV4cHJlc3Npb25Cb2R5LnJlc29sdmVkVHlwZSAhPSBUeXBlQmlu
ZGluZy5WT0lEOwotCQkJCQl0aGlzLnNoYXBlQW5hbHlzaXNDb21wbGV0ZSA9IHRydWU7Ci0JCQkJ
CWJyZWFrIHNoYXBlQW5hbHlzaXM7Ci0JCQkJfQotCQkJCS8vIERvIG5vdCBwcm9jZWVkIHdpdGgg
ZGF0YS9jb250cm9sIGZsb3cgYW5hbHlzaXMgaWYgcmVzb2x2ZSBlbmNvdW50ZXJlZCBlcnJvcnMu
Ci0JCQkJaWYgKHRoaXMuaGFzSWdub3JlZE1hbmRhdG9yeUVycm9ycyB8fCBlbmNsb3NpbmdTY29w
ZXNIYXZlRXJyb3JzKCkpIHsKLQkJCQkJaWYgKCFpc1BlcnRpbmVudFRvQXBwbGljYWJpbGl0eShs
ZWZ0LCBudWxsKSkKLQkJCQkJCWJyZWFrIHNoYXBlQW5hbHlzaXM7Ci0JCQkJCWlmICh0aGlzLmFy
Z3VtZW50cy5sZW5ndGggIT0gMCkgLy8gZXJyb3Igbm90IGJlY2F1c2Ugb2YgdGhlIHRhcmdldCB0
eXBlIGltcG9zaXRpb24sIGJ1dCBpcyBpbmhlcmVudC4gSnVzdCBzYXkgY29tcGF0aWJsZSBzaW5j
ZSBlcnJvcnMgaW4gYm9keSBhcmVuJ3QgdG8gaW5mbHVlbmNlIGFwcGxpY2FiaWxpdHkuCi0JCQkJ
CQlyZXR1cm4gZmFsc2U7Ci0JCQkJCWJyZWFrIHNoYXBlQW5hbHlzaXM7Ci0JCQkJfQotCQkJCQot
CQkJCS8vIHZhbHVlIGNvbXBhdGliaWxpdHkgb2YgYmxvY2sgbGFtYmRhJ3MgaXMgdGhlIG9ubHkg
b3BlbiBxdWVzdGlvbi4KLQkJCQlpZiAoIXRoaXMuc2hhcGVBbmFseXNpc0NvbXBsZXRlKQotCQkJ
CQl0aGlzLnZhbHVlQ29tcGF0aWJsZSA9IGNvcHkuZG9lc05vdENvbXBsZXRlTm9ybWFsbHkoKTsK
LQkJCQkKLQkJCQl0aGlzLnNoYXBlQW5hbHlzaXNDb21wbGV0ZSA9IHRydWU7Ci0JCQl9IGZpbmFs
bHkgewotCQkJCWNvbXBpbGVyT3B0aW9ucy5pc0Fubm90YXRpb25CYXNlZE51bGxBbmFseXNpc0Vu
YWJsZWQgPSBhbmFseXplTlBFOwotCQkJCXRoaXMuaGFzSWdub3JlZE1hbmRhdG9yeUVycm9ycyA9
IGZhbHNlOwotCQkJCXRoaXMuZW5jbG9zaW5nU2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuc3dpdGNo
RXJyb3JIYW5kbGluZ1BvbGljeShvbGRQb2xpY3kpOwogCQkJfQorCQl9IGVsc2UgaWYgKGNvcHkg
PT0gbnVsbCkgeworCQkJaWYgKCF0aGlzLmFzc2lzdE5vZGUpCisJCQkJcmV0dXJuICFpc1BlcnRp
bmVudFRvQXBwbGljYWJpbGl0eShsZWZ0LCBudWxsKTsKIAkJfQogCiAJCVJlZmVyZW5jZUJpbmRp
bmcgZXhwZWN0ZWRTQU1UeXBlID0gbnVsbDsKQEAgLTgxMyw2ICs3NzgsNjUgQEAgcHVibGljIGNs
YXNzIExhbWJkYUV4cHJlc3Npb24gZXh0ZW5kcyBGdW5jdGlvbmFsRXhwcmVzc2lvbiBpbXBsZW1l
bnRzIFJlZmVyZW5jZUMKIAkJcmV0dXJuIHRydWU7CiAJfQogCisJcHJpdmF0ZSBMYW1iZGFFeHBy
ZXNzaW9uIGdldENvbXBhdGlibGVDb3B5KFR5cGVCaW5kaW5nIGxlZnQsIGJvb2xlYW5bXSByZXR1
cm5WYWwpIHsKKwkJSUVycm9ySGFuZGxpbmdQb2xpY3kgb2xkUG9saWN5ID0gdGhpcy5lbmNsb3Np
bmdTY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5zd2l0Y2hFcnJvckhhbmRsaW5nUG9saWN5KHNpbGVu
dEVycm9ySGFuZGxpbmdQb2xpY3kpOworCQlmaW5hbCBDb21waWxlck9wdGlvbnMgY29tcGlsZXJP
cHRpb25zID0gdGhpcy5lbmNsb3NpbmdTY29wZS5jb21waWxlck9wdGlvbnMoKTsKKwkJYm9vbGVh
biBhbmFseXplTlBFID0gY29tcGlsZXJPcHRpb25zLmlzQW5ub3RhdGlvbkJhc2VkTnVsbEFuYWx5
c2lzRW5hYmxlZDsKKwkJY29tcGlsZXJPcHRpb25zLmlzQW5ub3RhdGlvbkJhc2VkTnVsbEFuYWx5
c2lzRW5hYmxlZCA9IGZhbHNlOworCQl0cnkgeworCQkJZmluYWwgTGFtYmRhRXhwcmVzc2lvbiBj
b3B5ID0gY29weSgpOworCQkJaWYgKGNvcHkgPT0gbnVsbCkgeworCQkJCWlmICh0aGlzLmFzc2lz
dE5vZGUpIHsKKwkJCQkJYW5hbHl6ZVNoYXBlKCk7IC8vIG5vdCBvbiB0ZXJyYSBmaXJtYSBoZXJl
ICEKKwkJCQkJcmV0dXJuIG51bGw7CisJCQkJfQorCQkJCXJldHVyblZhbFswXSA9ICFpc1BlcnRp
bmVudFRvQXBwbGljYWJpbGl0eShsZWZ0LCBudWxsKTsKKwkJCQlyZXR1cm4gbnVsbDsKKwkJCX0K
KwkJCWNvcHkuc2V0RXhwcmVzc2lvbkNvbnRleHQodGhpcy5leHByZXNzaW9uQ29udGV4dCk7CisJ
CQljb3B5LnNldEV4cGVjdGVkVHlwZShsZWZ0KTsKKwkJCXRoaXMuaGFzSWdub3JlZE1hbmRhdG9y
eUVycm9ycyA9IGZhbHNlOworCQkJVHlwZUJpbmRpbmcgdHlwZSA9IGNvcHkucmVzb2x2ZVR5cGUo
dGhpcy5lbmNsb3NpbmdTY29wZSk7CisJCQlpZiAodHlwZSA9PSBudWxsIHx8ICF0eXBlLmlzVmFs
aWRCaW5kaW5nKCkpIHsKKwkJCQlyZXR1cm5WYWxbMF0gPSBmYWxzZTsKKwkJCQlyZXR1cm4gY29w
eTsKKwkJCX0KKwkJCWlmICh0aGlzLmJvZHkgaW5zdGFuY2VvZiBCbG9jaykgeworCQkJCWlmICh0
aGlzLnJldHVybnNWb2lkKSB7CisJCQkJCXRoaXMuc2hhcGVBbmFseXNpc0NvbXBsZXRlID0gdHJ1
ZTsKKwkJCQkJcmV0dXJuIGNvcHk7CisJCQkJfQorCQkJfSBlbHNlIHsKKwkJCQlmaW5hbCBFeHBy
ZXNzaW9uIGV4cHJlc3Npb25Cb2R5ID0gKEV4cHJlc3Npb24pIGNvcHkuYm9keTsKKwkJCQl0aGlz
LnZvaWRDb21wYXRpYmxlID0gdGhpcy5hc3Npc3ROb2RlID8gdHJ1ZSA6IGV4cHJlc3Npb25Cb2R5
LnN0YXRlbWVudEV4cHJlc3Npb24oKTsKKwkJCQl0aGlzLnZhbHVlQ29tcGF0aWJsZSA9IGV4cHJl
c3Npb25Cb2R5LnJlc29sdmVkVHlwZSAhPSBUeXBlQmluZGluZy5WT0lEOworCQkJCXRoaXMuc2hh
cGVBbmFseXNpc0NvbXBsZXRlID0gdHJ1ZTsKKwkJCQlyZXR1cm4gY29weTsKKwkJCX0KKwkJCS8v
IERvIG5vdCBwcm9jZWVkIHdpdGggZGF0YS9jb250cm9sIGZsb3cgYW5hbHlzaXMgaWYgcmVzb2x2
ZSBlbmNvdW50ZXJlZCBlcnJvcnMuCisJCQlpZiAodGhpcy5oYXNJZ25vcmVkTWFuZGF0b3J5RXJy
b3JzIHx8IGVuY2xvc2luZ1Njb3Blc0hhdmVFcnJvcnMoKSkgeworCQkJCWlmICghaXNQZXJ0aW5l
bnRUb0FwcGxpY2FiaWxpdHkobGVmdCwgbnVsbCkpCisJCQkJCXJldHVybiBjb3B5OworCQkJCWlm
ICh0aGlzLmFyZ3VtZW50cy5sZW5ndGggIT0gMCkgey8vIGVycm9yIG5vdCBiZWNhdXNlIG9mIHRo
ZSB0YXJnZXQgdHlwZSBpbXBvc2l0aW9uLCBidXQgaXMgaW5oZXJlbnQuIEp1c3Qgc2F5IGNvbXBh
dGlibGUgc2luY2UgZXJyb3JzIGluIGJvZHkgYXJlbid0IHRvIGluZmx1ZW5jZSBhcHBsaWNhYmls
aXR5LgorCQkJCQlyZXR1cm5WYWxbMF0gPSBmYWxzZTsKKwkJCQkJcmV0dXJuIGNvcHk7CisJCQkJ
fQorCQkJCXJldHVybiBjb3B5OworCQkJfQorCQkJLy8gdmFsdWUgY29tcGF0aWJpbGl0eSBvZiBi
bG9jayBsYW1iZGEncyBpcyB0aGUgb25seSBvcGVuIHF1ZXN0aW9uLgorCQkJaWYgKCF0aGlzLnNo
YXBlQW5hbHlzaXNDb21wbGV0ZSkKKwkJCQl0aGlzLnZhbHVlQ29tcGF0aWJsZSA9IGNvcHkuZG9l
c05vdENvbXBsZXRlTm9ybWFsbHkoKTsKKwkJCXRoaXMuc2hhcGVBbmFseXNpc0NvbXBsZXRlID0g
dHJ1ZTsKKwkJCXJldHVybiBjb3B5OworCQl9IGZpbmFsbHkgeworCQkJY29tcGlsZXJPcHRpb25z
LmlzQW5ub3RhdGlvbkJhc2VkTnVsbEFuYWx5c2lzRW5hYmxlZCA9IGFuYWx5emVOUEU7CisJCQl0
aGlzLmhhc0lnbm9yZWRNYW5kYXRvcnlFcnJvcnMgPSBmYWxzZTsKKwkJCXRoaXMuZW5jbG9zaW5n
U2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuc3dpdGNoRXJyb3JIYW5kbGluZ1BvbGljeShvbGRQb2xp
Y3kpOworCQl9CisJfQorCisJcHJpdmF0ZSBIYXNoTWFwPFR5cGVCaW5kaW5nLCBMYW1iZGFFeHBy
ZXNzaW9uPiByZXNvbHZlZENvcGllczsKKwogCS8qKgogCSAqIEdldCBhIHJlc29sdmVkIGNvcHkg
b2YgdGhpcyBsYW1iZGEgZm9yIHVzZSBieSB0eXBlIGluZmVyZW5jZSwgYXMgdG8gYXZvaWQgc3Bp
bGxpbmcgYW55IHByZW1hdHVyZQogCSAqIHR5cGUgcmVzdWx0cyBpbnRvIHRoZSBvcmlnaW5hbCBs
YW1iZGEuCkBAIC04MjEsMTIgKzg0NSwxOSBAQCBwdWJsaWMgY2xhc3MgTGFtYmRhRXhwcmVzc2lv
biBleHRlbmRzIEZ1bmN0aW9uYWxFeHByZXNzaW9uIGltcGxlbWVudHMgUmVmZXJlbmNlQwogCSAq
IEByZXR1cm4gYSByZXNvbHZlZCBjb3B5IG9mICd0aGlzJyBvciBudWxsIGlmIHNpZ25pZmljYW50
IGVycm9ycyB3aGVyZSBlbmNvdW50ZXJlZAogCSAqLwogCXB1YmxpYyBMYW1iZGFFeHByZXNzaW9u
IGdldFJlc29sdmVkQ29weUZvckluZmVyZW5jZVRhcmdldGluZyhUeXBlQmluZGluZyB0YXJnZXRU
eXBlKSB7Ci0JCS8vIG5vdGU6IHRoaXMgaXMgZXNzZW50aWFsbHkgYSBzaW1wbGlmaWVkIGV4dHJh
Y3QgZnJvbSBpc0NvbXBhdGlibGVXaXRoKFR5cGVCaW5kaW5nLFNjb3BlKS4KKwkJTGFtYmRhRXhw
cmVzc2lvbiBsYW1iZGEgPSB0aGlzLnJlc29sdmVkQ29waWVzLmdldCh0YXJnZXRUeXBlKTsKKwkJ
aWYgKCF0aGlzLnJlc29sdmVkQ29waWVzLmNvbnRhaW5zS2V5KHRhcmdldFR5cGUpKSB7CisJCQls
YW1iZGEgPSBnZXRSZXNvbHZlZENvcHlGb3JJbmZlcmVuY2VUYXJnZXRpbmcwKHRhcmdldFR5cGUp
OworCQkJdGhpcy5yZXNvbHZlZENvcGllcy5wdXQodGFyZ2V0VHlwZSwgbGFtYmRhKTsKKwkJfQor
CQlyZXR1cm4gbGFtYmRhOworCX0KKworCXB1YmxpYyBMYW1iZGFFeHByZXNzaW9uIGdldFJlc29s
dmVkQ29weUZvckluZmVyZW5jZVRhcmdldGluZzAoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSkgewor
CQkvLyBub3RlOiB0aGlzIGlzIGVzc2VudGlhbGx5IGEgc2ltcGxpZmllZCBleHRyYWN0IGZyb20g
Z2V0Q29tcGF0aWJsZUNvcHkoVHlwZUJpbmRpbmcsYm9vbGVhbltdKS4KIAkJaWYgKHRoaXMuc2hh
cGVBbmFseXNpc0NvbXBsZXRlICYmIHRoaXMuYmluZGluZyAhPSBudWxsKQogCQkJcmV0dXJuIHRo
aXM7CiAJCQotCQl0YXJnZXRUeXBlID0gdGFyZ2V0VHlwZS51bmNhcHR1cmUodGhpcy5lbmNsb3Np
bmdTY29wZSk7Ci0JCS8vIFRPRE86IGNhY2hpbmcKIAkJSUVycm9ySGFuZGxpbmdQb2xpY3kgb2xk
UG9saWN5ID0gdGhpcy5lbmNsb3NpbmdTY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5zd2l0Y2hFcnJv
ckhhbmRsaW5nUG9saWN5KHNpbGVudEVycm9ySGFuZGxpbmdQb2xpY3kpOwogCQlmaW5hbCBDb21w
aWxlck9wdGlvbnMgY29tcGlsZXJPcHRpb25zID0gdGhpcy5lbmNsb3NpbmdTY29wZS5jb21waWxl
ck9wdGlvbnMoKTsKIAkJYm9vbGVhbiBhbmFseXplTlBFID0gY29tcGlsZXJPcHRpb25zLmlzQW5u
b3RhdGlvbkJhc2VkTnVsbEFuYWx5c2lzRW5hYmxlZDsKQEAgLTk1Niw3ICs5ODcsNyBAQCBwdWJs
aWMgY2xhc3MgTGFtYmRhRXhwcmVzc2lvbiBleHRlbmRzIEZ1bmN0aW9uYWxFeHByZXNzaW9uIGlt
cGxlbWVudHMgUmVmZXJlbmNlQwogCQlpZiAodGhpcy5vcmlnaW5hbCA9PSB0aGlzKSAvLyBub3Qg
aW4gb3ZlcmxvYWQgcmVzb2x1dGlvbiBjb250ZXh0LgogCQkJcmV0dXJuOwogCQlpZiAodGhpcy5i
b2R5IGluc3RhbmNlb2YgRXhwcmVzc2lvbikgewotCQkJdGhpcy5vcmlnaW5hbC52YWx1ZUNvbXBh
dGlibGUgPSByZXN1bHRUeXBlICE9IG51bGwgJiYgcmVzdWx0VHlwZS5pZCAhPSBUeXBlSWRzLlRf
dm9pZDsKKwkJCXRoaXMub3JpZ2luYWwudmFsdWVDb21wYXRpYmxlID0gcmVzdWx0VHlwZSAhPSBu
dWxsICYmIHJlc3VsdFR5cGUuaWQgPT0gVHlwZUlkcy5UX3ZvaWQgPyBmYWxzZSA6IHRydWU7CiAJ
CQl0aGlzLm9yaWdpbmFsLnJlc3VsdEV4cHJlc3Npb25zID0gbmV3IEV4cHJlc3Npb25bMV07CiAJ
CQl0aGlzLm9yaWdpbmFsLnJlc3VsdEV4cHJlc3Npb25zWzBdID0gZXhwcmVzc2lvbjsKIAkJCXJl
dHVybjsgLy8gdm9pZCBjb21wYXRpYmlsaXR5IGRldGVybWluZWQgdmlhIHN0YXRlbWVudEV4cHJl
c3Npb24oKQo=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>248031</attachid>
            <date>2014-10-21 01:25:00 -0400</date>
            <delta_ts>2014-10-23 01:31:43 -0400</delta_ts>
            <desc>Patch</desc>
            <filename>patch.patch</filename>
            <type>text/plain</type>
            <size>11763</size>
            <attacher name="shankha banerjee">shankhba</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fz
dC9MYW1iZGFFeHByZXNzaW9uLmphdmEKaW5kZXggMTMzZmNhZC4uMGM5NTdhZSAxMDA2NDQKLS0t
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FzdC9MYW1iZGFFeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9MYW1i
ZGFFeHByZXNzaW9uLmphdmEKQEAgLTQxLDYgKzQxLDcgQEAgcGFja2FnZSBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0OwogaW1wb3J0IHN0YXRpYyBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIuYXN0LkV4cHJlc3Npb25Db250ZXh0LklOVk9DQVRJT05fQ09OVEVY
VDsKIAogaW1wb3J0IGphdmEudXRpbC5Db2xsZWN0aW9uczsKK2ltcG9ydCBqYXZhLnV0aWwuSGFz
aE1hcDsKIGltcG9ydCBqYXZhLnV0aWwuSGFzaFNldDsKIGltcG9ydCBqYXZhLnV0aWwuTGlua2Vk
SGFzaFNldDsKIGltcG9ydCBqYXZhLnV0aWwuU2V0OwpAQCAtMjM4LDYgKzIzOSw3IEBAIHB1Ymxp
YyBjbGFzcyBMYW1iZGFFeHByZXNzaW9uIGV4dGVuZHMgRnVuY3Rpb25hbEV4cHJlc3Npb24gaW1w
bGVtZW50cyBSZWZlcmVuY2VDCiAJCQkJdGhpcy5hcmd1bWVudFR5cGVzW2ldID0gdGhpcy5hcmd1
bWVudHNbaV0udHlwZS5yZXNvbHZlVHlwZShibG9ja1Njb3BlLCB0cnVlIC8qIGNoZWNrIGJvdW5k
cyovKTsKIAkJfQogCQlpZiAodGhpcy5leHBlY3RlZFR5cGUgPT0gbnVsbCAmJiB0aGlzLmV4cHJl
c3Npb25Db250ZXh0ID09IElOVk9DQVRJT05fQ09OVEVYVCkgeworCQkJdGhpcy5yZXNvbHZlZENv
cGllcyA9IG5ldyBIYXNoTWFwPFR5cGVCaW5kaW5nLCBMYW1iZGFFeHByZXNzaW9uPigpOwogCQkJ
cmV0dXJuIG5ldyBQb2x5VHlwZUJpbmRpbmcodGhpcyk7CiAJCX0gCiAJCQpAQCAtNzEwLDU3ICs3
MTIsMjEgQEAgcHVibGljIGNsYXNzIExhbWJkYUV4cHJlc3Npb24gZXh0ZW5kcyBGdW5jdGlvbmFs
RXhwcmVzc2lvbiBpbXBsZW1lbnRzIFJlZmVyZW5jZUMKIAkJaWYgKCEobGVmdCBpbnN0YW5jZW9m
IFJlZmVyZW5jZUJpbmRpbmcpKQogCQkJcmV0dXJuIGZhbHNlOwogCi0JCWxlZnQgPSBsZWZ0LnVu
Y2FwdHVyZSh0aGlzLmVuY2xvc2luZ1Njb3BlKTsKLQkJc2hhcGVBbmFseXNpczogaWYgKCF0aGlz
LnNoYXBlQW5hbHlzaXNDb21wbGV0ZSkgewotCQkJSUVycm9ySGFuZGxpbmdQb2xpY3kgb2xkUG9s
aWN5ID0gdGhpcy5lbmNsb3NpbmdTY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5zd2l0Y2hFcnJvckhh
bmRsaW5nUG9saWN5KHNpbGVudEVycm9ySGFuZGxpbmdQb2xpY3kpOwotCQkJZmluYWwgQ29tcGls
ZXJPcHRpb25zIGNvbXBpbGVyT3B0aW9ucyA9IHRoaXMuZW5jbG9zaW5nU2NvcGUuY29tcGlsZXJP
cHRpb25zKCk7Ci0JCQlib29sZWFuIGFuYWx5emVOUEUgPSBjb21waWxlck9wdGlvbnMuaXNBbm5v
dGF0aW9uQmFzZWROdWxsQW5hbHlzaXNFbmFibGVkOwotCQkJY29tcGlsZXJPcHRpb25zLmlzQW5u
b3RhdGlvbkJhc2VkTnVsbEFuYWx5c2lzRW5hYmxlZCA9IGZhbHNlOwotCQkJdHJ5IHsKLQkJCQlm
aW5hbCBMYW1iZGFFeHByZXNzaW9uIGNvcHkgPSBjb3B5KCk7Ci0JCQkJaWYgKGNvcHkgPT0gbnVs
bCkgewotCQkJCQlpZiAodGhpcy5hc3Npc3ROb2RlKSB7Ci0JCQkJCQlhbmFseXplU2hhcGUoKTsg
Ly8gbm90IG9uIHRlcnJhIGZpcm1hIGhlcmUgIQotCQkJCQkJYnJlYWsgc2hhcGVBbmFseXNpczsK
LQkJCQkJfQotCQkJCQlyZXR1cm4gIWlzUGVydGluZW50VG9BcHBsaWNhYmlsaXR5KGxlZnQsIG51
bGwpOwotCQkJCX0KLQkJCQljb3B5LnNldEV4cHJlc3Npb25Db250ZXh0KHRoaXMuZXhwcmVzc2lv
bkNvbnRleHQpOwotCQkJCWNvcHkuc2V0RXhwZWN0ZWRUeXBlKGxlZnQpOwotCQkJCXRoaXMuaGFz
SWdub3JlZE1hbmRhdG9yeUVycm9ycyA9IGZhbHNlOwotCQkJCVR5cGVCaW5kaW5nIHR5cGUgPSBj
b3B5LnJlc29sdmVUeXBlKHRoaXMuZW5jbG9zaW5nU2NvcGUpOwotCQkJCWlmICh0eXBlID09IG51
bGwgfHwgIXR5cGUuaXNWYWxpZEJpbmRpbmcoKSkKKwkJaWYgKHRoaXMucmVzb2x2ZWRDb3BpZXMg
PT0gbnVsbCB8fCAhdGhpcy5yZXNvbHZlZENvcGllcy5jb250YWluc0tleShsZWZ0KSkgeworCQkJ
aWYgKCF0aGlzLnNoYXBlQW5hbHlzaXNDb21wbGV0ZSkgeworCQkJCWJvb2xlYW5bXSByZXR1cm5W
YWwgPSBuZXcgYm9vbGVhbltdIHt0cnVlfTsKKwkJCQlMYW1iZGFFeHByZXNzaW9uIGNvcHkgPSBn
ZXRDb21wYXRpYmxlQ29weShsZWZ0LCByZXR1cm5WYWwpOworCQkJCWlmICh0aGlzLnJlc29sdmVk
Q29waWVzICE9IG51bGwpCisJCQkJCXRoaXMucmVzb2x2ZWRDb3BpZXMucHV0KGxlZnQsIGNvcHkp
OworCQkJCWlmIChjb3B5ID09IG51bGwgJiYgIXRoaXMuYXNzaXN0Tm9kZSkKKwkJCQkJcmV0dXJu
IHJldHVyblZhbFswXTsKKwkJCQlpZiAocmV0dXJuVmFsWzBdID09IGZhbHNlKQogCQkJCQlyZXR1
cm4gZmFsc2U7Ci0JCQkJaWYgKHRoaXMuYm9keSBpbnN0YW5jZW9mIEJsb2NrKSB7Ci0JCQkJCWlm
ICh0aGlzLnJldHVybnNWb2lkKSB7Ci0JCQkJCQl0aGlzLnNoYXBlQW5hbHlzaXNDb21wbGV0ZSA9
IHRydWU7Ci0JCQkJCQlicmVhayBzaGFwZUFuYWx5c2lzOwotCQkJCQl9Ci0JCQkJfSBlbHNlIHsK
LQkJCQkJZmluYWwgRXhwcmVzc2lvbiBleHByZXNzaW9uQm9keSA9IChFeHByZXNzaW9uKSBjb3B5
LmJvZHk7Ci0JCQkJCXRoaXMudm9pZENvbXBhdGlibGUgPSB0aGlzLmFzc2lzdE5vZGUgPyB0cnVl
IDogZXhwcmVzc2lvbkJvZHkuc3RhdGVtZW50RXhwcmVzc2lvbigpOwotCQkJCQl0aGlzLnZhbHVl
Q29tcGF0aWJsZSA9IGV4cHJlc3Npb25Cb2R5LnJlc29sdmVkVHlwZSAhPSBUeXBlQmluZGluZy5W
T0lEOwotCQkJCQl0aGlzLnNoYXBlQW5hbHlzaXNDb21wbGV0ZSA9IHRydWU7Ci0JCQkJCWJyZWFr
IHNoYXBlQW5hbHlzaXM7Ci0JCQkJfQotCQkJCS8vIERvIG5vdCBwcm9jZWVkIHdpdGggZGF0YS9j
b250cm9sIGZsb3cgYW5hbHlzaXMgaWYgcmVzb2x2ZSBlbmNvdW50ZXJlZCBlcnJvcnMuCi0JCQkJ
aWYgKHRoaXMuaGFzSWdub3JlZE1hbmRhdG9yeUVycm9ycyB8fCBlbmNsb3NpbmdTY29wZXNIYXZl
RXJyb3JzKCkpIHsKLQkJCQkJaWYgKCFpc1BlcnRpbmVudFRvQXBwbGljYWJpbGl0eShsZWZ0LCBu
dWxsKSkKLQkJCQkJCWJyZWFrIHNoYXBlQW5hbHlzaXM7Ci0JCQkJCWlmICh0aGlzLmFyZ3VtZW50
cy5sZW5ndGggIT0gMCkgLy8gZXJyb3Igbm90IGJlY2F1c2Ugb2YgdGhlIHRhcmdldCB0eXBlIGlt
cG9zaXRpb24sIGJ1dCBpcyBpbmhlcmVudC4gSnVzdCBzYXkgY29tcGF0aWJsZSBzaW5jZSBlcnJv
cnMgaW4gYm9keSBhcmVuJ3QgdG8gaW5mbHVlbmNlIGFwcGxpY2FiaWxpdHkuCi0JCQkJCQlyZXR1
cm4gZmFsc2U7Ci0JCQkJCWJyZWFrIHNoYXBlQW5hbHlzaXM7Ci0JCQkJfQotCQkJCQotCQkJCS8v
IHZhbHVlIGNvbXBhdGliaWxpdHkgb2YgYmxvY2sgbGFtYmRhJ3MgaXMgdGhlIG9ubHkgb3BlbiBx
dWVzdGlvbi4KLQkJCQlpZiAoIXRoaXMuc2hhcGVBbmFseXNpc0NvbXBsZXRlKQotCQkJCQl0aGlz
LnZhbHVlQ29tcGF0aWJsZSA9IGNvcHkuZG9lc05vdENvbXBsZXRlTm9ybWFsbHkoKTsKLQkJCQkK
LQkJCQl0aGlzLnNoYXBlQW5hbHlzaXNDb21wbGV0ZSA9IHRydWU7Ci0JCQl9IGZpbmFsbHkgewot
CQkJCWNvbXBpbGVyT3B0aW9ucy5pc0Fubm90YXRpb25CYXNlZE51bGxBbmFseXNpc0VuYWJsZWQg
PSBhbmFseXplTlBFOwotCQkJCXRoaXMuaGFzSWdub3JlZE1hbmRhdG9yeUVycm9ycyA9IGZhbHNl
OwotCQkJCXRoaXMuZW5jbG9zaW5nU2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuc3dpdGNoRXJyb3JI
YW5kbGluZ1BvbGljeShvbGRQb2xpY3kpOworCQkJfQorCQl9IGVsc2UgeworCQkJTGFtYmRhRXhw
cmVzc2lvbiBjb3B5ID0gdGhpcy5yZXNvbHZlZENvcGllcy5nZXQobGVmdCk7CisJCQlpZiAoY29w
eSA9PSBudWxsICYmICF0aGlzLmFzc2lzdE5vZGUpIHsKKwkJCQkJcmV0dXJuICFpc1BlcnRpbmVu
dFRvQXBwbGljYWJpbGl0eShsZWZ0LCBudWxsKTsKIAkJCX0KIAkJfQogCkBAIC04MTMsNiArNzc5
LDY1IEBAIHB1YmxpYyBjbGFzcyBMYW1iZGFFeHByZXNzaW9uIGV4dGVuZHMgRnVuY3Rpb25hbEV4
cHJlc3Npb24gaW1wbGVtZW50cyBSZWZlcmVuY2VDCiAJCXJldHVybiB0cnVlOwogCX0KIAorCXBy
aXZhdGUgTGFtYmRhRXhwcmVzc2lvbiBnZXRDb21wYXRpYmxlQ29weShUeXBlQmluZGluZyBsZWZ0
LCBib29sZWFuW10gcmV0dXJuVmFsKSB7CisJCUlFcnJvckhhbmRsaW5nUG9saWN5IG9sZFBvbGlj
eSA9IHRoaXMuZW5jbG9zaW5nU2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuc3dpdGNoRXJyb3JIYW5k
bGluZ1BvbGljeShzaWxlbnRFcnJvckhhbmRsaW5nUG9saWN5KTsKKwkJZmluYWwgQ29tcGlsZXJP
cHRpb25zIGNvbXBpbGVyT3B0aW9ucyA9IHRoaXMuZW5jbG9zaW5nU2NvcGUuY29tcGlsZXJPcHRp
b25zKCk7CisJCWJvb2xlYW4gYW5hbHl6ZU5QRSA9IGNvbXBpbGVyT3B0aW9ucy5pc0Fubm90YXRp
b25CYXNlZE51bGxBbmFseXNpc0VuYWJsZWQ7CisJCWNvbXBpbGVyT3B0aW9ucy5pc0Fubm90YXRp
b25CYXNlZE51bGxBbmFseXNpc0VuYWJsZWQgPSBmYWxzZTsKKwkJdHJ5IHsKKwkJCWZpbmFsIExh
bWJkYUV4cHJlc3Npb24gY29weSA9IGNvcHkoKTsKKwkJCWlmIChjb3B5ID09IG51bGwpIHsKKwkJ
CQlpZiAodGhpcy5hc3Npc3ROb2RlKSB7CisJCQkJCWFuYWx5emVTaGFwZSgpOyAvLyBub3Qgb24g
dGVycmEgZmlybWEgaGVyZSAhCisJCQkJCXJldHVybiBudWxsOworCQkJCX0KKwkJCQlyZXR1cm5W
YWxbMF0gPSAhaXNQZXJ0aW5lbnRUb0FwcGxpY2FiaWxpdHkobGVmdCwgbnVsbCk7CisJCQkJcmV0
dXJuIG51bGw7CisJCQl9CisJCQljb3B5LnNldEV4cHJlc3Npb25Db250ZXh0KHRoaXMuZXhwcmVz
c2lvbkNvbnRleHQpOworCQkJY29weS5zZXRFeHBlY3RlZFR5cGUobGVmdCk7CisJCQl0aGlzLmhh
c0lnbm9yZWRNYW5kYXRvcnlFcnJvcnMgPSBmYWxzZTsKKwkJCVR5cGVCaW5kaW5nIHR5cGUgPSBj
b3B5LnJlc29sdmVUeXBlKHRoaXMuZW5jbG9zaW5nU2NvcGUpOworCQkJaWYgKHR5cGUgPT0gbnVs
bCB8fCAhdHlwZS5pc1ZhbGlkQmluZGluZygpKSB7CisJCQkJcmV0dXJuVmFsWzBdID0gZmFsc2U7
CisJCQkJcmV0dXJuIGNvcHk7CisJCQl9CisJCQlpZiAodGhpcy5ib2R5IGluc3RhbmNlb2YgQmxv
Y2spIHsKKwkJCQlpZiAodGhpcy5yZXR1cm5zVm9pZCkgeworCQkJCQl0aGlzLnNoYXBlQW5hbHlz
aXNDb21wbGV0ZSA9IHRydWU7CisJCQkJCXJldHVybiBjb3B5OworCQkJCX0KKwkJCX0gZWxzZSB7
CisJCQkJZmluYWwgRXhwcmVzc2lvbiBleHByZXNzaW9uQm9keSA9IChFeHByZXNzaW9uKSBjb3B5
LmJvZHk7CisJCQkJdGhpcy52b2lkQ29tcGF0aWJsZSA9IHRoaXMuYXNzaXN0Tm9kZSA/IHRydWUg
OiBleHByZXNzaW9uQm9keS5zdGF0ZW1lbnRFeHByZXNzaW9uKCk7CisJCQkJdGhpcy52YWx1ZUNv
bXBhdGlibGUgPSBleHByZXNzaW9uQm9keS5yZXNvbHZlZFR5cGUgIT0gVHlwZUJpbmRpbmcuVk9J
RDsKKwkJCQl0aGlzLnNoYXBlQW5hbHlzaXNDb21wbGV0ZSA9IHRydWU7CisJCQkJcmV0dXJuIGNv
cHk7CisJCQl9CisJCQkvLyBEbyBub3QgcHJvY2VlZCB3aXRoIGRhdGEvY29udHJvbCBmbG93IGFu
YWx5c2lzIGlmIHJlc29sdmUgZW5jb3VudGVyZWQgZXJyb3JzLgorCQkJaWYgKHRoaXMuaGFzSWdu
b3JlZE1hbmRhdG9yeUVycm9ycyB8fCBlbmNsb3NpbmdTY29wZXNIYXZlRXJyb3JzKCkpIHsKKwkJ
CQlpZiAoIWlzUGVydGluZW50VG9BcHBsaWNhYmlsaXR5KGxlZnQsIG51bGwpKQorCQkJCQlyZXR1
cm4gY29weTsKKwkJCQlpZiAodGhpcy5hcmd1bWVudHMubGVuZ3RoICE9IDApIHsvLyBlcnJvciBu
b3QgYmVjYXVzZSBvZiB0aGUgdGFyZ2V0IHR5cGUgaW1wb3NpdGlvbiwgYnV0IGlzIGluaGVyZW50
LiBKdXN0IHNheSBjb21wYXRpYmxlIHNpbmNlIGVycm9ycyBpbiBib2R5IGFyZW4ndCB0byBpbmZs
dWVuY2UgYXBwbGljYWJpbGl0eS4KKwkJCQkJcmV0dXJuVmFsWzBdID0gZmFsc2U7CisJCQkJCXJl
dHVybiBjb3B5OworCQkJCX0KKwkJCQlyZXR1cm4gY29weTsKKwkJCX0KKwkJCS8vIHZhbHVlIGNv
bXBhdGliaWxpdHkgb2YgYmxvY2sgbGFtYmRhJ3MgaXMgdGhlIG9ubHkgb3BlbiBxdWVzdGlvbi4K
KwkJCWlmICghdGhpcy5zaGFwZUFuYWx5c2lzQ29tcGxldGUpCisJCQkJdGhpcy52YWx1ZUNvbXBh
dGlibGUgPSBjb3B5LmRvZXNOb3RDb21wbGV0ZU5vcm1hbGx5KCk7CisJCQl0aGlzLnNoYXBlQW5h
bHlzaXNDb21wbGV0ZSA9IHRydWU7CisJCQlyZXR1cm4gY29weTsKKwkJfSBmaW5hbGx5IHsKKwkJ
CWNvbXBpbGVyT3B0aW9ucy5pc0Fubm90YXRpb25CYXNlZE51bGxBbmFseXNpc0VuYWJsZWQgPSBh
bmFseXplTlBFOworCQkJdGhpcy5oYXNJZ25vcmVkTWFuZGF0b3J5RXJyb3JzID0gZmFsc2U7CisJ
CQl0aGlzLmVuY2xvc2luZ1Njb3BlLnByb2JsZW1SZXBvcnRlcigpLnN3aXRjaEVycm9ySGFuZGxp
bmdQb2xpY3kob2xkUG9saWN5KTsKKwkJfQorCX0KKworCXByaXZhdGUgSGFzaE1hcDxUeXBlQmlu
ZGluZywgTGFtYmRhRXhwcmVzc2lvbj4gcmVzb2x2ZWRDb3BpZXM7CisKIAkvKioKIAkgKiBHZXQg
YSByZXNvbHZlZCBjb3B5IG9mIHRoaXMgbGFtYmRhIGZvciB1c2UgYnkgdHlwZSBpbmZlcmVuY2Us
IGFzIHRvIGF2b2lkIHNwaWxsaW5nIGFueSBwcmVtYXR1cmUKIAkgKiB0eXBlIHJlc3VsdHMgaW50
byB0aGUgb3JpZ2luYWwgbGFtYmRhLgpAQCAtODIxLDEyICs4NDYsMTkgQEAgcHVibGljIGNsYXNz
IExhbWJkYUV4cHJlc3Npb24gZXh0ZW5kcyBGdW5jdGlvbmFsRXhwcmVzc2lvbiBpbXBsZW1lbnRz
IFJlZmVyZW5jZUMKIAkgKiBAcmV0dXJuIGEgcmVzb2x2ZWQgY29weSBvZiAndGhpcycgb3IgbnVs
bCBpZiBzaWduaWZpY2FudCBlcnJvcnMgd2hlcmUgZW5jb3VudGVyZWQKIAkgKi8KIAlwdWJsaWMg
TGFtYmRhRXhwcmVzc2lvbiBnZXRSZXNvbHZlZENvcHlGb3JJbmZlcmVuY2VUYXJnZXRpbmcoVHlw
ZUJpbmRpbmcgdGFyZ2V0VHlwZSkgewotCQkvLyBub3RlOiB0aGlzIGlzIGVzc2VudGlhbGx5IGEg
c2ltcGxpZmllZCBleHRyYWN0IGZyb20gaXNDb21wYXRpYmxlV2l0aChUeXBlQmluZGluZyxTY29w
ZSkuCisJCUxhbWJkYUV4cHJlc3Npb24gbGFtYmRhID0gdGhpcy5yZXNvbHZlZENvcGllcy5nZXQo
dGFyZ2V0VHlwZSk7CisJCWlmIChsYW1iZGEgPT0gbnVsbCkgeworCQkJbGFtYmRhID0gZ2V0UmVz
b2x2ZWRDb3B5Rm9ySW5mZXJlbmNlVGFyZ2V0aW5nMCh0YXJnZXRUeXBlKTsKKwkJCXRoaXMucmVz
b2x2ZWRDb3BpZXMucHV0KHRhcmdldFR5cGUsIGxhbWJkYSk7CisJCX0KKwkJcmV0dXJuIGxhbWJk
YTsKKwl9CisKKwlwdWJsaWMgTGFtYmRhRXhwcmVzc2lvbiBnZXRSZXNvbHZlZENvcHlGb3JJbmZl
cmVuY2VUYXJnZXRpbmcwKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUpIHsKKwkJLy8gbm90ZTogdGhp
cyBpcyBlc3NlbnRpYWxseSBhIHNpbXBsaWZpZWQgZXh0cmFjdCBmcm9tIGdldENvbXBhdGlibGVD
b3B5KFR5cGVCaW5kaW5nLGJvb2xlYW5bXSkuCiAJCWlmICh0aGlzLnNoYXBlQW5hbHlzaXNDb21w
bGV0ZSAmJiB0aGlzLmJpbmRpbmcgIT0gbnVsbCkKIAkJCXJldHVybiB0aGlzOwogCQkKLQkJdGFy
Z2V0VHlwZSA9IHRhcmdldFR5cGUudW5jYXB0dXJlKHRoaXMuZW5jbG9zaW5nU2NvcGUpOwotCQkv
LyBUT0RPOiBjYWNoaW5nCiAJCUlFcnJvckhhbmRsaW5nUG9saWN5IG9sZFBvbGljeSA9IHRoaXMu
ZW5jbG9zaW5nU2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuc3dpdGNoRXJyb3JIYW5kbGluZ1BvbGlj
eShzaWxlbnRFcnJvckhhbmRsaW5nUG9saWN5KTsKIAkJZmluYWwgQ29tcGlsZXJPcHRpb25zIGNv
bXBpbGVyT3B0aW9ucyA9IHRoaXMuZW5jbG9zaW5nU2NvcGUuY29tcGlsZXJPcHRpb25zKCk7CiAJ
CWJvb2xlYW4gYW5hbHl6ZU5QRSA9IGNvbXBpbGVyT3B0aW9ucy5pc0Fubm90YXRpb25CYXNlZE51
bGxBbmFseXNpc0VuYWJsZWQ7CkBAIC05NTYsNyArOTg4LDcgQEAgcHVibGljIGNsYXNzIExhbWJk
YUV4cHJlc3Npb24gZXh0ZW5kcyBGdW5jdGlvbmFsRXhwcmVzc2lvbiBpbXBsZW1lbnRzIFJlZmVy
ZW5jZUMKIAkJaWYgKHRoaXMub3JpZ2luYWwgPT0gdGhpcykgLy8gbm90IGluIG92ZXJsb2FkIHJl
c29sdXRpb24gY29udGV4dC4KIAkJCXJldHVybjsKIAkJaWYgKHRoaXMuYm9keSBpbnN0YW5jZW9m
IEV4cHJlc3Npb24pIHsKLQkJCXRoaXMub3JpZ2luYWwudmFsdWVDb21wYXRpYmxlID0gcmVzdWx0
VHlwZSAhPSBudWxsICYmIHJlc3VsdFR5cGUuaWQgIT0gVHlwZUlkcy5UX3ZvaWQ7CisJCQl0aGlz
Lm9yaWdpbmFsLnZhbHVlQ29tcGF0aWJsZSA9IHJlc3VsdFR5cGUgIT0gbnVsbCAmJiByZXN1bHRU
eXBlLmlkID09IFR5cGVJZHMuVF92b2lkID8gZmFsc2UgOiB0cnVlOwogCQkJdGhpcy5vcmlnaW5h
bC5yZXN1bHRFeHByZXNzaW9ucyA9IG5ldyBFeHByZXNzaW9uWzFdOwogCQkJdGhpcy5vcmlnaW5h
bC5yZXN1bHRFeHByZXNzaW9uc1swXSA9IGV4cHJlc3Npb247CiAJCQlyZXR1cm47IC8vIHZvaWQg
Y29tcGF0aWJpbGl0eSBkZXRlcm1pbmVkIHZpYSBzdGF0ZW1lbnRFeHByZXNzaW9uKCkKZGlmZiAt
LWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hc3QvUmVmZXJlbmNlRXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9S
ZWZlcmVuY2VFeHByZXNzaW9uLmphdmEKaW5kZXggMzQzMzhjYS4uY2IwNzQ3ZCAxMDA2NDQKLS0t
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FzdC9SZWZlcmVuY2VFeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9S
ZWZlcmVuY2VFeHByZXNzaW9uLmphdmEKQEAgLTQwLDYgKzQwLDcgQEAgcGFja2FnZSBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0OwogCiBpbXBvcnQgc3RhdGljIG9yZy5lY2xp
cHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuRXhwcmVzc2lvbkNvbnRleHQuSU5WT0NBVElP
Tl9DT05URVhUOwogCitpbXBvcnQgamF2YS51dGlsLkhhc2hNYXA7CiBpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmNvcmUuY29tcGlsZXIuQ2hhck9wZXJhdGlvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIuQVNUVmlzaXRvcjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIuQ29tcGlsYXRpb25SZXN1bHQ7CkBAIC0zOTgsNiArMzk5LDcgQEAg
cHVibGljIGNsYXNzIFJlZmVyZW5jZUV4cHJlc3Npb24gZXh0ZW5kcyBGdW5jdGlvbmFsRXhwcmVz
c2lvbiBpbXBsZW1lbnRzIEludm9jYXQKICAgICAJCXRoaXMuZXhhY3RNZXRob2RCaW5kaW5nID0g
aXNNZXRob2RSZWZlcmVuY2UoKSA/IHNjb3BlLmdldEV4YWN0TWV0aG9kKGxoc1R5cGUsIHRoaXMu
c2VsZWN0b3IsIHRoaXMpIDogc2NvcGUuZ2V0RXhhY3RDb25zdHJ1Y3RvcihsaHNUeXBlLCB0aGlz
KTsKIAogICAgIAlpZiAodGhpcy5leHBlY3RlZFR5cGUgPT0gbnVsbCAmJiB0aGlzLmV4cHJlc3Np
b25Db250ZXh0ID09IElOVk9DQVRJT05fQ09OVEVYVCkgeworICAgIAkJdGhpcy5yZXNvbHZlZFRh
cmdldE1ldGhvZCA9IG5ldyBIYXNoTWFwPFR5cGVCaW5kaW5nLCBNZXRob2RCaW5kaW5nPigpOwog
ICAgIAkJcmV0dXJuIG5ldyBQb2x5VHlwZUJpbmRpbmcodGhpcyk7CiAJCX0KIAkJc3VwZXIucmVz
b2x2ZVR5cGUoc2NvcGUpOwpAQCAtNjkxLDkgKzY5MywxNiBAQCBwdWJsaWMgY2xhc3MgUmVmZXJl
bmNlRXhwcmVzc2lvbiBleHRlbmRzIEZ1bmN0aW9uYWxFeHByZXNzaW9uIGltcGxlbWVudHMgSW52
b2NhdAogCQlyZXR1cm4gdGhpcy5kZXNjcmlwdG9yLnBhcmFtZXRlcnM7CiAJfQogCisJcHJpdmF0
ZSBIYXNoTWFwPFR5cGVCaW5kaW5nLCBNZXRob2RCaW5kaW5nPiByZXNvbHZlZFRhcmdldE1ldGhv
ZDsKKwogCS8qKiBEdXJpbmcgaW5mZXJlbmNlOiBUcnkgdG8gZmluZCBhbiBhcHBsaWNhYmxlIG1l
dGhvZCBiaW5kaW5nIHdpdGhvdXQgY2F1c2luZyB1bmRlc2lyZWQgc2lkZS1lZmZlY3RzLiAqLwog
CXB1YmxpYyBNZXRob2RCaW5kaW5nIGZpbmRDb21waWxlVGltZU1ldGhvZFRhcmdldGluZyhUeXBl
QmluZGluZyB0YXJnZXRUeXBlLCBTY29wZSBzY29wZSkgewotCQlNZXRob2RCaW5kaW5nIHRhcmdl
dE1ldGhvZCA9IGludGVybmFsUmVzb2x2ZVRlbnRhdGl2ZWx5KHRhcmdldFR5cGUsIHNjb3BlKTsK
KwkJTWV0aG9kQmluZGluZyB0YXJnZXRNZXRob2QgPSB0aGlzLnJlc29sdmVkVGFyZ2V0TWV0aG9k
ID09IG51bGwgPyBudWxsIDogdGhpcy5yZXNvbHZlZFRhcmdldE1ldGhvZC5nZXQodGFyZ2V0VHlw
ZSk7CisJCWlmICh0YXJnZXRNZXRob2QgPT0gbnVsbCkgeworCQkJdGFyZ2V0TWV0aG9kID0gaW50
ZXJuYWxSZXNvbHZlVGVudGF0aXZlbHkodGFyZ2V0VHlwZSwgc2NvcGUpOworCQkJaWYgKHRoaXMu
cmVzb2x2ZWRUYXJnZXRNZXRob2QgIT0gbnVsbCkKKwkJCQl0aGlzLnJlc29sdmVkVGFyZ2V0TWV0
aG9kLnB1dCh0YXJnZXRUeXBlLCB0YXJnZXRNZXRob2QpOworCQl9CiAJCWlmICh0YXJnZXRNZXRo
b2QgPT0gbnVsbCB8fCAhdGFyZ2V0TWV0aG9kLmlzVmFsaWRCaW5kaW5nKCkpCiAJCQlyZXR1cm4g
bnVsbDsKIAkJcmV0dXJuIHRhcmdldE1ldGhvZDsKQEAgLTg0OCw4ICs4NTcsMTMgQEAgcHVibGlj
IGNsYXNzIFJlZmVyZW5jZUV4cHJlc3Npb24gZXh0ZW5kcyBGdW5jdGlvbmFsRXhwcmVzc2lvbiBp
bXBsZW1lbnRzIEludm9jYXQKIAkJCQkmJiB0aGlzLnJlc29sdmVkVHlwZSAhPSBudWxsICYmIHRo
aXMucmVzb2x2ZWRUeXBlLmlzVmFsaWRCaW5kaW5nKCkpIHsKIAkJCXJldHVybiB0aGlzLnJlc29s
dmVkVHlwZS5pc0NvbXBhdGlibGVXaXRoKGxlZnQsIHNjb3BlKTsKIAkJfQotCQkvLyAxNS4xMy4y
Ci0JCWZpbmFsIE1ldGhvZEJpbmRpbmcgc2FtID0gbGVmdC5nZXRTaW5nbGVBYnN0cmFjdE1ldGhv
ZCh0aGlzLmVuY2xvc2luZ1Njb3BlLCB0cnVlKTsKKwkJTWV0aG9kQmluZGluZyBzYW0gPSB0aGlz
LnJlc29sdmVkVGFyZ2V0TWV0aG9kID09IG51bGwgPyBudWxsIDogdGhpcy5yZXNvbHZlZFRhcmdl
dE1ldGhvZC5nZXQobGVmdCk7CisJCWlmIChzYW0gPT0gbnVsbCkgeworCQkJLy8gMTUuMTMuMgor
CQkJc2FtID0gbGVmdC5nZXRTaW5nbGVBYnN0cmFjdE1ldGhvZCh0aGlzLmVuY2xvc2luZ1Njb3Bl
LCB0cnVlKTsKKwkJCWlmICh0aGlzLnJlc29sdmVkVGFyZ2V0TWV0aG9kICE9IG51bGwpCisJCQkJ
dGhpcy5yZXNvbHZlZFRhcmdldE1ldGhvZC5wdXQobGVmdCwgc2FtKTsKKwkJfQogCQlpZiAoc2Ft
ID09IG51bGwgfHwgIXNhbS5pc1ZhbGlkQmluZGluZygpKQogCQkJcmV0dXJuIGZhbHNlOwogCQli
b29sZWFuIGlzQ29tcGF0aWJsZTsK
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>248116</attachid>
            <date>2014-10-23 01:31:00 -0400</date>
            <delta_ts>2014-10-23 12:04:37 -0400</delta_ts>
            <desc>WIP: Patch</desc>
            <filename>patch.patch</filename>
            <type>text/plain</type>
            <size>12208</size>
            <attacher name="shankha banerjee">shankhba</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxUeXBlQW5ub3Rh
dGlvblRlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9v
cmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxUeXBlQW5u
b3RhdGlvblRlc3QuamF2YQppbmRleCA2YjJiZjEzLi41NzU3YzdmIDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OdWxsVHlwZUFubm90YXRpb25UZXN0LmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pk
dC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbFR5cGVBbm5vdGF0aW9uVGVzdC5q
YXZhCkBAIC0yNyw3ICsyNyw3IEBAIHB1YmxpYyBjbGFzcyBOdWxsVHlwZUFubm90YXRpb25UZXN0
IGV4dGVuZHMgQWJzdHJhY3ROdWxsQW5ub3RhdGlvblRlc3QgewogCS8vIFN0YXRpYyBpbml0aWFs
aXplciB0byBzcGVjaWZ5IHRlc3RzIHN1YnNldCB1c2luZyBURVNUU18qIHN0YXRpYyB2YXJpYWJs
ZXMKIAkvLyBBbGwgc3BlY2lmaWVkIHRlc3RzIHdoaWNoIGRvIG5vdCBiZWxvbmcgdG8gdGhlIGNs
YXNzIGFyZSBza2lwcGVkLi4uCiAJc3RhdGljIHsKLS8vCQkJVEVTVFNfTkFNRVMgPSBuZXcgU3Ry
aW5nW10geyAidGVzdEJ1ZzQ0MTY5M290aGVyIiB9OworCQkJVEVTVFNfTkFNRVMgPSBuZXcgU3Ry
aW5nW10geyAidGVzdDQ0MzQ2NyIgfTsKIC8vCQkJVEVTVFNfTlVNQkVSUyA9IG5ldyBpbnRbXSB7
IDU2MSB9OwogLy8JCQlURVNUU19SQU5HRSA9IG5ldyBpbnRbXSB7IDEsIDIwNDkgfTsKIAl9CmRp
ZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L0xhbWJkYUV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3Qv
TGFtYmRhRXhwcmVzc2lvbi5qYXZhCmluZGV4IGNjMjA4NzcuLjQwZTAxYzUgMTAwNjQ0Ci0tLSBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFtYmRh
RXhwcmVzc2lvbi5qYXZhCkBAIC00MSw2ICs0MSw3IEBAIHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0
LmludGVybmFsLmNvbXBpbGVyLmFzdDsKIGltcG9ydCBzdGF0aWMgb3JnLmVjbGlwc2UuamR0Lmlu
dGVybmFsLmNvbXBpbGVyLmFzdC5FeHByZXNzaW9uQ29udGV4dC5JTlZPQ0FUSU9OX0NPTlRFWFQ7
CiAKIGltcG9ydCBqYXZhLnV0aWwuQ29sbGVjdGlvbnM7CitpbXBvcnQgamF2YS51dGlsLkhhc2hN
YXA7CiBpbXBvcnQgamF2YS51dGlsLkhhc2hTZXQ7CiBpbXBvcnQgamF2YS51dGlsLkxpbmtlZEhh
c2hTZXQ7CiBpbXBvcnQgamF2YS51dGlsLlNldDsKQEAgLTczMCw1NyArNzMxLDIzIEBAIHB1Ymxp
YyBjbGFzcyBMYW1iZGFFeHByZXNzaW9uIGV4dGVuZHMgRnVuY3Rpb25hbEV4cHJlc3Npb24gaW1w
bGVtZW50cyBSZWZlcmVuY2VDCiAJCWlmICghKGxlZnQgaW5zdGFuY2VvZiBSZWZlcmVuY2VCaW5k
aW5nKSkKIAkJCXJldHVybiBmYWxzZTsKIAotCQlsZWZ0ID0gbGVmdC51bmNhcHR1cmUodGhpcy5l
bmNsb3NpbmdTY29wZSk7Ci0JCXNoYXBlQW5hbHlzaXM6IGlmICghdGhpcy5zaGFwZUFuYWx5c2lz
Q29tcGxldGUpIHsKLQkJCUlFcnJvckhhbmRsaW5nUG9saWN5IG9sZFBvbGljeSA9IHRoaXMuZW5j
bG9zaW5nU2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuc3dpdGNoRXJyb3JIYW5kbGluZ1BvbGljeShz
aWxlbnRFcnJvckhhbmRsaW5nUG9saWN5KTsKLQkJCWZpbmFsIENvbXBpbGVyT3B0aW9ucyBjb21w
aWxlck9wdGlvbnMgPSB0aGlzLmVuY2xvc2luZ1Njb3BlLmNvbXBpbGVyT3B0aW9ucygpOwotCQkJ
Ym9vbGVhbiBhbmFseXplTlBFID0gY29tcGlsZXJPcHRpb25zLmlzQW5ub3RhdGlvbkJhc2VkTnVs
bEFuYWx5c2lzRW5hYmxlZDsKLQkJCWNvbXBpbGVyT3B0aW9ucy5pc0Fubm90YXRpb25CYXNlZE51
bGxBbmFseXNpc0VuYWJsZWQgPSBmYWxzZTsKLQkJCXRyeSB7Ci0JCQkJZmluYWwgTGFtYmRhRXhw
cmVzc2lvbiBjb3B5ID0gY29weSgpOwotCQkJCWlmIChjb3B5ID09IG51bGwpIHsKLQkJCQkJaWYg
KHRoaXMuYXNzaXN0Tm9kZSkgewotCQkJCQkJYW5hbHl6ZVNoYXBlKCk7IC8vIG5vdCBvbiB0ZXJy
YSBmaXJtYSBoZXJlICEKLQkJCQkJCWJyZWFrIHNoYXBlQW5hbHlzaXM7Ci0JCQkJCX0KLQkJCQkJ
cmV0dXJuICFpc1BlcnRpbmVudFRvQXBwbGljYWJpbGl0eShsZWZ0LCBudWxsKTsKLQkJCQl9Ci0J
CQkJY29weS5zZXRFeHByZXNzaW9uQ29udGV4dCh0aGlzLmV4cHJlc3Npb25Db250ZXh0KTsKLQkJ
CQljb3B5LnNldEV4cGVjdGVkVHlwZShsZWZ0KTsKLQkJCQl0aGlzLmhhc0lnbm9yZWRNYW5kYXRv
cnlFcnJvcnMgPSBmYWxzZTsKLQkJCQlUeXBlQmluZGluZyB0eXBlID0gY29weS5yZXNvbHZlVHlw
ZSh0aGlzLmVuY2xvc2luZ1Njb3BlKTsKLQkJCQlpZiAodHlwZSA9PSBudWxsIHx8ICF0eXBlLmlz
VmFsaWRCaW5kaW5nKCkpCisJCWlmICh0aGlzLnJlc29sdmVkQ29waWVzID09IG51bGwpIHsKKwkJ
CXRoaXMucmVzb2x2ZWRDb3BpZXMgPSBuZXcgSGFzaE1hcDxUeXBlQmluZGluZywgTGFtYmRhRXhw
cmVzc2lvbj4oKTsKKwkJfQorCQlpZiAoIXRoaXMucmVzb2x2ZWRDb3BpZXMuY29udGFpbnNLZXko
bGVmdCkpIHsKKwkJCWlmICghdGhpcy5zaGFwZUFuYWx5c2lzQ29tcGxldGUpIHsKKwkJCQlib29s
ZWFuW10gcmV0dXJuVmFsID0gbmV3IGJvb2xlYW5bXSB7dHJ1ZX07CisJCQkJTGFtYmRhRXhwcmVz
c2lvbiBjb3B5ID0gZ2V0Q29tcGF0aWJsZUNvcHkobGVmdCwgcmV0dXJuVmFsKTsKKwkJCQl0aGlz
LnJlc29sdmVkQ29waWVzLnB1dChsZWZ0LCBjb3B5KTsKKwkJCQlpZiAoY29weSA9PSBudWxsICYm
ICF0aGlzLmFzc2lzdE5vZGUpCisJCQkJCXJldHVybiByZXR1cm5WYWxbMF07CisJCQkJaWYgKHJl
dHVyblZhbFswXSA9PSBmYWxzZSkKIAkJCQkJcmV0dXJuIGZhbHNlOwotCQkJCWlmICh0aGlzLmJv
ZHkgaW5zdGFuY2VvZiBCbG9jaykgewotCQkJCQlpZiAodGhpcy5yZXR1cm5zVm9pZCkgewotCQkJ
CQkJdGhpcy5zaGFwZUFuYWx5c2lzQ29tcGxldGUgPSB0cnVlOwotCQkJCQkJYnJlYWsgc2hhcGVB
bmFseXNpczsKLQkJCQkJfQotCQkJCX0gZWxzZSB7Ci0JCQkJCWZpbmFsIEV4cHJlc3Npb24gZXhw
cmVzc2lvbkJvZHkgPSAoRXhwcmVzc2lvbikgY29weS5ib2R5OwotCQkJCQl0aGlzLnZvaWRDb21w
YXRpYmxlID0gdGhpcy5hc3Npc3ROb2RlID8gdHJ1ZSA6IGV4cHJlc3Npb25Cb2R5LnN0YXRlbWVu
dEV4cHJlc3Npb24oKTsKLQkJCQkJdGhpcy52YWx1ZUNvbXBhdGlibGUgPSBleHByZXNzaW9uQm9k
eS5yZXNvbHZlZFR5cGUgIT0gVHlwZUJpbmRpbmcuVk9JRDsKLQkJCQkJdGhpcy5zaGFwZUFuYWx5
c2lzQ29tcGxldGUgPSB0cnVlOwotCQkJCQlicmVhayBzaGFwZUFuYWx5c2lzOwotCQkJCX0KLQkJ
CQkvLyBEbyBub3QgcHJvY2VlZCB3aXRoIGRhdGEvY29udHJvbCBmbG93IGFuYWx5c2lzIGlmIHJl
c29sdmUgZW5jb3VudGVyZWQgZXJyb3JzLgotCQkJCWlmICh0aGlzLmhhc0lnbm9yZWRNYW5kYXRv
cnlFcnJvcnMgfHwgZW5jbG9zaW5nU2NvcGVzSGF2ZUVycm9ycygpKSB7Ci0JCQkJCWlmICghaXNQ
ZXJ0aW5lbnRUb0FwcGxpY2FiaWxpdHkobGVmdCwgbnVsbCkpCi0JCQkJCQlicmVhayBzaGFwZUFu
YWx5c2lzOwotCQkJCQlpZiAodGhpcy5hcmd1bWVudHMubGVuZ3RoICE9IDApIC8vIGVycm9yIG5v
dCBiZWNhdXNlIG9mIHRoZSB0YXJnZXQgdHlwZSBpbXBvc2l0aW9uLCBidXQgaXMgaW5oZXJlbnQu
IEp1c3Qgc2F5IGNvbXBhdGlibGUgc2luY2UgZXJyb3JzIGluIGJvZHkgYXJlbid0IHRvIGluZmx1
ZW5jZSBhcHBsaWNhYmlsaXR5LgotCQkJCQkJcmV0dXJuIGZhbHNlOwotCQkJCQlicmVhayBzaGFw
ZUFuYWx5c2lzOwotCQkJCX0KLQkJCQkKLQkJCQkvLyB2YWx1ZSBjb21wYXRpYmlsaXR5IG9mIGJs
b2NrIGxhbWJkYSdzIGlzIHRoZSBvbmx5IG9wZW4gcXVlc3Rpb24uCi0JCQkJaWYgKCF0aGlzLnNo
YXBlQW5hbHlzaXNDb21wbGV0ZSkKLQkJCQkJdGhpcy52YWx1ZUNvbXBhdGlibGUgPSBjb3B5LmRv
ZXNOb3RDb21wbGV0ZU5vcm1hbGx5KCk7Ci0JCQkJCi0JCQkJdGhpcy5zaGFwZUFuYWx5c2lzQ29t
cGxldGUgPSB0cnVlOwotCQkJfSBmaW5hbGx5IHsKLQkJCQljb21waWxlck9wdGlvbnMuaXNBbm5v
dGF0aW9uQmFzZWROdWxsQW5hbHlzaXNFbmFibGVkID0gYW5hbHl6ZU5QRTsKLQkJCQl0aGlzLmhh
c0lnbm9yZWRNYW5kYXRvcnlFcnJvcnMgPSBmYWxzZTsKLQkJCQl0aGlzLmVuY2xvc2luZ1Njb3Bl
LnByb2JsZW1SZXBvcnRlcigpLnN3aXRjaEVycm9ySGFuZGxpbmdQb2xpY3kob2xkUG9saWN5KTsK
KwkJCX0KKwkJfSBlbHNlIHsKKwkJCUxhbWJkYUV4cHJlc3Npb24gY29weSA9IHRoaXMucmVzb2x2
ZWRDb3BpZXMuZ2V0KGxlZnQpOworCQkJaWYgKGNvcHkgPT0gbnVsbCAmJiAhdGhpcy5hc3Npc3RO
b2RlKSB7CisJCQkJCXJldHVybiAhaXNQZXJ0aW5lbnRUb0FwcGxpY2FiaWxpdHkobGVmdCwgbnVs
bCk7CiAJCQl9CiAJCX0KIApAQCAtODMzLDYgKzgwMCw2NSBAQCBwdWJsaWMgY2xhc3MgTGFtYmRh
RXhwcmVzc2lvbiBleHRlbmRzIEZ1bmN0aW9uYWxFeHByZXNzaW9uIGltcGxlbWVudHMgUmVmZXJl
bmNlQwogCQlyZXR1cm4gdHJ1ZTsKIAl9CiAKKwlwcml2YXRlIExhbWJkYUV4cHJlc3Npb24gZ2V0
Q29tcGF0aWJsZUNvcHkoVHlwZUJpbmRpbmcgbGVmdCwgYm9vbGVhbltdIHJldHVyblZhbCkgewor
CQlJRXJyb3JIYW5kbGluZ1BvbGljeSBvbGRQb2xpY3kgPSB0aGlzLmVuY2xvc2luZ1Njb3BlLnBy
b2JsZW1SZXBvcnRlcigpLnN3aXRjaEVycm9ySGFuZGxpbmdQb2xpY3koc2lsZW50RXJyb3JIYW5k
bGluZ1BvbGljeSk7CisJCWZpbmFsIENvbXBpbGVyT3B0aW9ucyBjb21waWxlck9wdGlvbnMgPSB0
aGlzLmVuY2xvc2luZ1Njb3BlLmNvbXBpbGVyT3B0aW9ucygpOworCQlib29sZWFuIGFuYWx5emVO
UEUgPSBjb21waWxlck9wdGlvbnMuaXNBbm5vdGF0aW9uQmFzZWROdWxsQW5hbHlzaXNFbmFibGVk
OworCQljb21waWxlck9wdGlvbnMuaXNBbm5vdGF0aW9uQmFzZWROdWxsQW5hbHlzaXNFbmFibGVk
ID0gZmFsc2U7CisJCXRyeSB7CisJCQlmaW5hbCBMYW1iZGFFeHByZXNzaW9uIGNvcHkgPSBjb3B5
KCk7CisJCQlpZiAoY29weSA9PSBudWxsKSB7CisJCQkJaWYgKHRoaXMuYXNzaXN0Tm9kZSkgewor
CQkJCQlhbmFseXplU2hhcGUoKTsgLy8gbm90IG9uIHRlcnJhIGZpcm1hIGhlcmUgIQorCQkJCQly
ZXR1cm4gbnVsbDsKKwkJCQl9CisJCQkJcmV0dXJuVmFsWzBdID0gIWlzUGVydGluZW50VG9BcHBs
aWNhYmlsaXR5KGxlZnQsIG51bGwpOworCQkJCXJldHVybiBudWxsOworCQkJfQorCQkJY29weS5z
ZXRFeHByZXNzaW9uQ29udGV4dCh0aGlzLmV4cHJlc3Npb25Db250ZXh0KTsKKwkJCWNvcHkuc2V0
RXhwZWN0ZWRUeXBlKGxlZnQpOworCQkJdGhpcy5oYXNJZ25vcmVkTWFuZGF0b3J5RXJyb3JzID0g
ZmFsc2U7CisJCQlUeXBlQmluZGluZyB0eXBlID0gY29weS5yZXNvbHZlVHlwZSh0aGlzLmVuY2xv
c2luZ1Njb3BlKTsKKwkJCWlmICh0eXBlID09IG51bGwgfHwgIXR5cGUuaXNWYWxpZEJpbmRpbmco
KSkgeworCQkJCXJldHVyblZhbFswXSA9IGZhbHNlOworCQkJCXJldHVybiBjb3B5OworCQkJfQor
CQkJaWYgKHRoaXMuYm9keSBpbnN0YW5jZW9mIEJsb2NrKSB7CisJCQkJaWYgKHRoaXMucmV0dXJu
c1ZvaWQpIHsKKwkJCQkJdGhpcy5zaGFwZUFuYWx5c2lzQ29tcGxldGUgPSB0cnVlOworCQkJCQly
ZXR1cm4gY29weTsKKwkJCQl9CisJCQl9IGVsc2UgeworCQkJCWZpbmFsIEV4cHJlc3Npb24gZXhw
cmVzc2lvbkJvZHkgPSAoRXhwcmVzc2lvbikgY29weS5ib2R5OworCQkJCXRoaXMudm9pZENvbXBh
dGlibGUgPSB0aGlzLmFzc2lzdE5vZGUgPyB0cnVlIDogZXhwcmVzc2lvbkJvZHkuc3RhdGVtZW50
RXhwcmVzc2lvbigpOworCQkJCXRoaXMudmFsdWVDb21wYXRpYmxlID0gZXhwcmVzc2lvbkJvZHku
cmVzb2x2ZWRUeXBlICE9IFR5cGVCaW5kaW5nLlZPSUQ7CisJCQkJdGhpcy5zaGFwZUFuYWx5c2lz
Q29tcGxldGUgPSB0cnVlOworCQkJCXJldHVybiBjb3B5OworCQkJfQorCQkJLy8gRG8gbm90IHBy
b2NlZWQgd2l0aCBkYXRhL2NvbnRyb2wgZmxvdyBhbmFseXNpcyBpZiByZXNvbHZlIGVuY291bnRl
cmVkIGVycm9ycy4KKwkJCWlmICh0aGlzLmhhc0lnbm9yZWRNYW5kYXRvcnlFcnJvcnMgfHwgZW5j
bG9zaW5nU2NvcGVzSGF2ZUVycm9ycygpKSB7CisJCQkJaWYgKCFpc1BlcnRpbmVudFRvQXBwbGlj
YWJpbGl0eShsZWZ0LCBudWxsKSkKKwkJCQkJcmV0dXJuIGNvcHk7CisJCQkJaWYgKHRoaXMuYXJn
dW1lbnRzLmxlbmd0aCAhPSAwKSB7Ly8gZXJyb3Igbm90IGJlY2F1c2Ugb2YgdGhlIHRhcmdldCB0
eXBlIGltcG9zaXRpb24sIGJ1dCBpcyBpbmhlcmVudC4gSnVzdCBzYXkgY29tcGF0aWJsZSBzaW5j
ZSBlcnJvcnMgaW4gYm9keSBhcmVuJ3QgdG8gaW5mbHVlbmNlIGFwcGxpY2FiaWxpdHkuCisJCQkJ
CXJldHVyblZhbFswXSA9IGZhbHNlOworCQkJCQlyZXR1cm4gY29weTsKKwkJCQl9CisJCQkJcmV0
dXJuIGNvcHk7CisJCQl9CisJCQkvLyB2YWx1ZSBjb21wYXRpYmlsaXR5IG9mIGJsb2NrIGxhbWJk
YSdzIGlzIHRoZSBvbmx5IG9wZW4gcXVlc3Rpb24uCisJCQlpZiAoIXRoaXMuc2hhcGVBbmFseXNp
c0NvbXBsZXRlKQorCQkJCXRoaXMudmFsdWVDb21wYXRpYmxlID0gY29weS5kb2VzTm90Q29tcGxl
dGVOb3JtYWxseSgpOworCQkJdGhpcy5zaGFwZUFuYWx5c2lzQ29tcGxldGUgPSB0cnVlOworCQkJ
cmV0dXJuIGNvcHk7CisJCX0gZmluYWxseSB7CisJCQljb21waWxlck9wdGlvbnMuaXNBbm5vdGF0
aW9uQmFzZWROdWxsQW5hbHlzaXNFbmFibGVkID0gYW5hbHl6ZU5QRTsKKwkJCXRoaXMuaGFzSWdu
b3JlZE1hbmRhdG9yeUVycm9ycyA9IGZhbHNlOworCQkJdGhpcy5lbmNsb3NpbmdTY29wZS5wcm9i
bGVtUmVwb3J0ZXIoKS5zd2l0Y2hFcnJvckhhbmRsaW5nUG9saWN5KG9sZFBvbGljeSk7CisJCX0K
Kwl9CisKKwlwcml2YXRlIEhhc2hNYXA8VHlwZUJpbmRpbmcsIExhbWJkYUV4cHJlc3Npb24+IHJl
c29sdmVkQ29waWVzOworCiAJLyoqCiAJICogR2V0IGEgcmVzb2x2ZWQgY29weSBvZiB0aGlzIGxh
bWJkYSBmb3IgdXNlIGJ5IHR5cGUgaW5mZXJlbmNlLCBhcyB0byBhdm9pZCBzcGlsbGluZyBhbnkg
cHJlbWF0dXJlCiAJICogdHlwZSByZXN1bHRzIGludG8gdGhlIG9yaWdpbmFsIGxhbWJkYS4KQEAg
LTg0MSwxMiArODY3LDIzIEBAIHB1YmxpYyBjbGFzcyBMYW1iZGFFeHByZXNzaW9uIGV4dGVuZHMg
RnVuY3Rpb25hbEV4cHJlc3Npb24gaW1wbGVtZW50cyBSZWZlcmVuY2VDCiAJICogQHJldHVybiBh
IHJlc29sdmVkIGNvcHkgb2YgJ3RoaXMnIG9yIG51bGwgaWYgc2lnbmlmaWNhbnQgZXJyb3JzIHdo
ZXJlIGVuY291bnRlcmVkCiAJICovCiAJcHVibGljIExhbWJkYUV4cHJlc3Npb24gZ2V0UmVzb2x2
ZWRDb3B5Rm9ySW5mZXJlbmNlVGFyZ2V0aW5nKFR5cGVCaW5kaW5nIHRhcmdldFR5cGUpIHsKLQkJ
Ly8gbm90ZTogdGhpcyBpcyBlc3NlbnRpYWxseSBhIHNpbXBsaWZpZWQgZXh0cmFjdCBmcm9tIGlz
Q29tcGF0aWJsZVdpdGgoVHlwZUJpbmRpbmcsU2NvcGUpLgorCQlpZiAodGhpcy5yZXNvbHZlZENv
cGllcyA9PSBudWxsKQorCQkJdGhpcy5yZXNvbHZlZENvcGllcyA9IG5ldyBIYXNoTWFwPFR5cGVC
aW5kaW5nLCBMYW1iZGFFeHByZXNzaW9uPigpOworCQlMYW1iZGFFeHByZXNzaW9uIGxhbWJkYTsK
KwkJaWYgKCF0aGlzLnJlc29sdmVkQ29waWVzLmNvbnRhaW5zS2V5KHRhcmdldFR5cGUpKSB7CisJ
CQlsYW1iZGEgPSBnZXRSZXNvbHZlZENvcHlGb3JJbmZlcmVuY2VUYXJnZXRpbmcwKHRhcmdldFR5
cGUpOworCQkJdGhpcy5yZXNvbHZlZENvcGllcy5wdXQodGFyZ2V0VHlwZSwgbGFtYmRhKTsKKwkJ
fSBlbHNlIHsKKwkJCWxhbWJkYSA9IHRoaXMucmVzb2x2ZWRDb3BpZXMuZ2V0KHRhcmdldFR5cGUp
OworCQl9CisJCXJldHVybiBsYW1iZGE7CisJfQorCisJcHVibGljIExhbWJkYUV4cHJlc3Npb24g
Z2V0UmVzb2x2ZWRDb3B5Rm9ySW5mZXJlbmNlVGFyZ2V0aW5nMChUeXBlQmluZGluZyB0YXJnZXRU
eXBlKSB7CisJCS8vIG5vdGU6IHRoaXMgaXMgZXNzZW50aWFsbHkgYSBzaW1wbGlmaWVkIGV4dHJh
Y3QgZnJvbSBnZXRDb21wYXRpYmxlQ29weShUeXBlQmluZGluZyxib29sZWFuW10pLgogCQlpZiAo
dGhpcy5zaGFwZUFuYWx5c2lzQ29tcGxldGUgJiYgdGhpcy5iaW5kaW5nICE9IG51bGwpCiAJCQly
ZXR1cm4gdGhpczsKIAkJCi0JCXRhcmdldFR5cGUgPSB0YXJnZXRUeXBlLnVuY2FwdHVyZSh0aGlz
LmVuY2xvc2luZ1Njb3BlKTsKLQkJLy8gVE9ETzogY2FjaGluZwogCQlJRXJyb3JIYW5kbGluZ1Bv
bGljeSBvbGRQb2xpY3kgPSB0aGlzLmVuY2xvc2luZ1Njb3BlLnByb2JsZW1SZXBvcnRlcigpLnN3
aXRjaEVycm9ySGFuZGxpbmdQb2xpY3koc2lsZW50RXJyb3JIYW5kbGluZ1BvbGljeSk7CiAJCWZp
bmFsIENvbXBpbGVyT3B0aW9ucyBjb21waWxlck9wdGlvbnMgPSB0aGlzLmVuY2xvc2luZ1Njb3Bl
LmNvbXBpbGVyT3B0aW9ucygpOwogCQlib29sZWFuIGFuYWx5emVOUEUgPSBjb21waWxlck9wdGlv
bnMuaXNBbm5vdGF0aW9uQmFzZWROdWxsQW5hbHlzaXNFbmFibGVkOwpAQCAtOTc2LDcgKzEwMTMs
NyBAQCBwdWJsaWMgY2xhc3MgTGFtYmRhRXhwcmVzc2lvbiBleHRlbmRzIEZ1bmN0aW9uYWxFeHBy
ZXNzaW9uIGltcGxlbWVudHMgUmVmZXJlbmNlQwogCQlpZiAodGhpcy5vcmlnaW5hbCA9PSB0aGlz
KSAvLyBub3QgaW4gb3ZlcmxvYWQgcmVzb2x1dGlvbiBjb250ZXh0LgogCQkJcmV0dXJuOwogCQlp
ZiAodGhpcy5ib2R5IGluc3RhbmNlb2YgRXhwcmVzc2lvbikgewotCQkJdGhpcy5vcmlnaW5hbC52
YWx1ZUNvbXBhdGlibGUgPSByZXN1bHRUeXBlICE9IG51bGwgJiYgcmVzdWx0VHlwZS5pZCAhPSBU
eXBlSWRzLlRfdm9pZDsKKwkJCXRoaXMub3JpZ2luYWwudmFsdWVDb21wYXRpYmxlID0gcmVzdWx0
VHlwZSAhPSBudWxsICYmIHJlc3VsdFR5cGUuaWQgPT0gVHlwZUlkcy5UX3ZvaWQgPyBmYWxzZSA6
IHRydWU7CiAJCQl0aGlzLm9yaWdpbmFsLnJlc3VsdEV4cHJlc3Npb25zID0gbmV3IEV4cHJlc3Np
b25bMV07CiAJCQl0aGlzLm9yaWdpbmFsLnJlc3VsdEV4cHJlc3Npb25zWzBdID0gZXhwcmVzc2lv
bjsKIAkJCXJldHVybjsgLy8gdm9pZCBjb21wYXRpYmlsaXR5IGRldGVybWluZWQgdmlhIHN0YXRl
bWVudEV4cHJlc3Npb24oKQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9SZWZlcmVuY2VFeHByZXNz
aW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVyZW5jZUV4cHJlc3Npb24uamF2YQppbmRleCBlOTQ2
NWYzLi5iZjczNjRlIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVyZW5jZUV4cHJlc3Npb24u
amF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVyZW5jZUV4cHJlc3Npb24uamF2YQpAQCAtNDAsNiAr
NDAsNyBAQCBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3Q7CiAK
IGltcG9ydCBzdGF0aWMgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5FeHBy
ZXNzaW9uQ29udGV4dC5JTlZPQ0FUSU9OX0NPTlRFWFQ7CiAKK2ltcG9ydCBqYXZhLnV0aWwuSGFz
aE1hcDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5DaGFyT3BlcmF0aW9u
OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5BU1RWaXNpdG9yOwog
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5Db21waWxhdGlvblJlc3Vs
dDsKQEAgLTY5Miw5ICs2OTMsMTkgQEAgcHVibGljIGNsYXNzIFJlZmVyZW5jZUV4cHJlc3Npb24g
ZXh0ZW5kcyBGdW5jdGlvbmFsRXhwcmVzc2lvbiBpbXBsZW1lbnRzIEludm9jYXQKIAkJcmV0dXJu
IHRoaXMuZGVzY3JpcHRvci5wYXJhbWV0ZXJzOwogCX0KIAorCXByaXZhdGUgSGFzaE1hcDxUeXBl
QmluZGluZywgTWV0aG9kQmluZGluZz4gcmVzb2x2ZWRUYXJnZXRNZXRob2Q7CisKIAkvKiogRHVy
aW5nIGluZmVyZW5jZTogVHJ5IHRvIGZpbmQgYW4gYXBwbGljYWJsZSBtZXRob2QgYmluZGluZyB3
aXRob3V0IGNhdXNpbmcgdW5kZXNpcmVkIHNpZGUtZWZmZWN0cy4gKi8KIAlwdWJsaWMgTWV0aG9k
QmluZGluZyBmaW5kQ29tcGlsZVRpbWVNZXRob2RUYXJnZXRpbmcoVHlwZUJpbmRpbmcgdGFyZ2V0
VHlwZSwgU2NvcGUgc2NvcGUpIHsKLQkJTWV0aG9kQmluZGluZyB0YXJnZXRNZXRob2QgPSBpbnRl
cm5hbFJlc29sdmVUZW50YXRpdmVseSh0YXJnZXRUeXBlLCBzY29wZSk7CisJCWlmICh0aGlzLnJl
c29sdmVkVGFyZ2V0TWV0aG9kID09IG51bGwpCisJCQl0aGlzLnJlc29sdmVkVGFyZ2V0TWV0aG9k
ID0gbmV3IEhhc2hNYXA8VHlwZUJpbmRpbmcsIE1ldGhvZEJpbmRpbmc+KCk7CisJCU1ldGhvZEJp
bmRpbmcgdGFyZ2V0TWV0aG9kOworCQlpZiAoIXRoaXMucmVzb2x2ZWRUYXJnZXRNZXRob2QuY29u
dGFpbnNLZXkodGFyZ2V0VHlwZSkpIHsKKwkJCXRhcmdldE1ldGhvZCA9IGludGVybmFsUmVzb2x2
ZVRlbnRhdGl2ZWx5KHRhcmdldFR5cGUsIHNjb3BlKTsKKwkJCXRoaXMucmVzb2x2ZWRUYXJnZXRN
ZXRob2QucHV0KHRhcmdldFR5cGUsIHRhcmdldE1ldGhvZCk7CisJCX0gZWxzZSB7CisJCQl0YXJn
ZXRNZXRob2QgPSB0aGlzLnJlc29sdmVkVGFyZ2V0TWV0aG9kLmdldCh0YXJnZXRUeXBlKTsKKwkJ
fQogCQlpZiAodGFyZ2V0TWV0aG9kID09IG51bGwgfHwgIXRhcmdldE1ldGhvZC5pc1ZhbGlkQmlu
ZGluZygpKQogCQkJcmV0dXJuIG51bGw7CiAJCXJldHVybiB0YXJnZXRNZXRob2Q7CkBAIC04NDks
OCArODYwLDE2IEBAIHB1YmxpYyBjbGFzcyBSZWZlcmVuY2VFeHByZXNzaW9uIGV4dGVuZHMgRnVu
Y3Rpb25hbEV4cHJlc3Npb24gaW1wbGVtZW50cyBJbnZvY2F0CiAJCQkJJiYgdGhpcy5yZXNvbHZl
ZFR5cGUgIT0gbnVsbCAmJiB0aGlzLnJlc29sdmVkVHlwZS5pc1ZhbGlkQmluZGluZygpKSB7CiAJ
CQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGUuaXNDb21wYXRpYmxlV2l0aChsZWZ0LCBzY29wZSk7
CiAJCX0KLQkJLy8gMTUuMTMuMgotCQlmaW5hbCBNZXRob2RCaW5kaW5nIHNhbSA9IGxlZnQuZ2V0
U2luZ2xlQWJzdHJhY3RNZXRob2QodGhpcy5lbmNsb3NpbmdTY29wZSwgdHJ1ZSk7CisJCWlmICh0
aGlzLnJlc29sdmVkVGFyZ2V0TWV0aG9kID09IG51bGwpCisJCQl0aGlzLnJlc29sdmVkVGFyZ2V0
TWV0aG9kID0gbmV3IEhhc2hNYXA8VHlwZUJpbmRpbmcsIE1ldGhvZEJpbmRpbmc+KCk7CisJCU1l
dGhvZEJpbmRpbmcgc2FtOworCQlpZiAoIXRoaXMucmVzb2x2ZWRUYXJnZXRNZXRob2QuY29udGFp
bnNLZXkobGVmdCkpIHsKKwkJCS8vIDE1LjEzLjIKKwkJCXNhbSA9IGxlZnQuZ2V0U2luZ2xlQWJz
dHJhY3RNZXRob2QodGhpcy5lbmNsb3NpbmdTY29wZSwgdHJ1ZSk7CisJCQl0aGlzLnJlc29sdmVk
VGFyZ2V0TWV0aG9kLnB1dChsZWZ0LCBzYW0pOworCQl9IGVsc2UgeworCQkJc2FtID0gdGhpcy5y
ZXNvbHZlZFRhcmdldE1ldGhvZC5nZXQobGVmdCk7CisJCX0KIAkJaWYgKHNhbSA9PSBudWxsIHx8
ICFzYW0uaXNWYWxpZEJpbmRpbmcoKSkKIAkJCXJldHVybiBmYWxzZTsKIAkJYm9vbGVhbiBpc0Nv
bXBhdGlibGU7Cg==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>248136</attachid>
            <date>2014-10-23 12:04:00 -0400</date>
            <delta_ts>2014-10-31 06:47:57 -0400</delta_ts>
            <desc>Patch</desc>
            <filename>patch.patch</filename>
            <type>text/plain</type>
            <size>11015</size>
            <attacher name="shankha banerjee">shankhba</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fz
dC9MYW1iZGFFeHByZXNzaW9uLmphdmEKaW5kZXggNThmYWVhOS4uYTVmN2QxYiAxMDA2NDQKLS0t
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FzdC9MYW1iZGFFeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9MYW1i
ZGFFeHByZXNzaW9uLmphdmEKQEAgLTQxLDYgKzQxLDcgQEAgcGFja2FnZSBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0OwogaW1wb3J0IHN0YXRpYyBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIuYXN0LkV4cHJlc3Npb25Db250ZXh0LklOVk9DQVRJT05fQ09OVEVY
VDsKIAogaW1wb3J0IGphdmEudXRpbC5Db2xsZWN0aW9uczsKK2ltcG9ydCBqYXZhLnV0aWwuSGFz
aE1hcDsKIGltcG9ydCBqYXZhLnV0aWwuSGFzaFNldDsKIGltcG9ydCBqYXZhLnV0aWwuTGlua2Vk
SGFzaFNldDsKIGltcG9ydCBqYXZhLnV0aWwuU2V0OwpAQCAtNzMwLDU3ICs3MzEsMjAgQEAgcHVi
bGljIGNsYXNzIExhbWJkYUV4cHJlc3Npb24gZXh0ZW5kcyBGdW5jdGlvbmFsRXhwcmVzc2lvbiBp
bXBsZW1lbnRzIFJlZmVyZW5jZUMKIAkJaWYgKCEobGVmdCBpbnN0YW5jZW9mIFJlZmVyZW5jZUJp
bmRpbmcpKQogCQkJcmV0dXJuIGZhbHNlOwogCi0JCWxlZnQgPSBsZWZ0LnVuY2FwdHVyZSh0aGlz
LmVuY2xvc2luZ1Njb3BlKTsKLQkJc2hhcGVBbmFseXNpczogaWYgKCF0aGlzLnNoYXBlQW5hbHlz
aXNDb21wbGV0ZSkgewotCQkJSUVycm9ySGFuZGxpbmdQb2xpY3kgb2xkUG9saWN5ID0gdGhpcy5l
bmNsb3NpbmdTY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5zd2l0Y2hFcnJvckhhbmRsaW5nUG9saWN5
KHNpbGVudEVycm9ySGFuZGxpbmdQb2xpY3kpOwotCQkJZmluYWwgQ29tcGlsZXJPcHRpb25zIGNv
bXBpbGVyT3B0aW9ucyA9IHRoaXMuZW5jbG9zaW5nU2NvcGUuY29tcGlsZXJPcHRpb25zKCk7Ci0J
CQlib29sZWFuIGFuYWx5emVOUEUgPSBjb21waWxlck9wdGlvbnMuaXNBbm5vdGF0aW9uQmFzZWRO
dWxsQW5hbHlzaXNFbmFibGVkOwotCQkJY29tcGlsZXJPcHRpb25zLmlzQW5ub3RhdGlvbkJhc2Vk
TnVsbEFuYWx5c2lzRW5hYmxlZCA9IGZhbHNlOwotCQkJdHJ5IHsKLQkJCQlmaW5hbCBMYW1iZGFF
eHByZXNzaW9uIGNvcHkgPSBjb3B5KCk7Ci0JCQkJaWYgKGNvcHkgPT0gbnVsbCkgewotCQkJCQlp
ZiAodGhpcy5hc3Npc3ROb2RlKSB7Ci0JCQkJCQlhbmFseXplU2hhcGUoKTsgLy8gbm90IG9uIHRl
cnJhIGZpcm1hIGhlcmUgIQotCQkJCQkJYnJlYWsgc2hhcGVBbmFseXNpczsKLQkJCQkJfQotCQkJ
CQlyZXR1cm4gIWlzUGVydGluZW50VG9BcHBsaWNhYmlsaXR5KGxlZnQsIG51bGwpOwotCQkJCX0K
LQkJCQljb3B5LnNldEV4cHJlc3Npb25Db250ZXh0KHRoaXMuZXhwcmVzc2lvbkNvbnRleHQpOwot
CQkJCWNvcHkuc2V0RXhwZWN0ZWRUeXBlKGxlZnQpOwotCQkJCXRoaXMuaGFzSWdub3JlZE1hbmRh
dG9yeUVycm9ycyA9IGZhbHNlOwotCQkJCVR5cGVCaW5kaW5nIHR5cGUgPSBjb3B5LnJlc29sdmVU
eXBlKHRoaXMuZW5jbG9zaW5nU2NvcGUpOwotCQkJCWlmICh0eXBlID09IG51bGwgfHwgIXR5cGUu
aXNWYWxpZEJpbmRpbmcoKSkKKwkJaWYgKHRoaXMucmVzb2x2ZWRDb3BpZXMgPT0gbnVsbCkgewor
CQkJdGhpcy5yZXNvbHZlZENvcGllcyA9IG5ldyBIYXNoTWFwPFR5cGVCaW5kaW5nLCBMYW1iZGFF
eHByZXNzaW9uPigpOworCQl9CisJCUxhbWJkYUV4cHJlc3Npb24gY29weSA9IHRoaXMucmVzb2x2
ZWRDb3BpZXMuZ2V0KGxlZnQpOworCQlpZiAoY29weSA9PSBudWxsKSB7CisJCQlpZiAoIXRoaXMu
c2hhcGVBbmFseXNpc0NvbXBsZXRlKSB7CisJCQkJYm9vbGVhbltdIHJldHVyblZhbCA9IG5ldyBi
b29sZWFuW10ge3RydWV9OworCQkJCWNvcHkgPSBnZXRDb21wYXRpYmxlQ29weShsZWZ0LCByZXR1
cm5WYWwpOworCQkJCWlmIChjb3B5ICE9IG51bGwpCisJCQkJCXRoaXMucmVzb2x2ZWRDb3BpZXMu
cHV0KGxlZnQsIGNvcHkpOworCQkJCWlmIChjb3B5ID09IG51bGwgJiYgIXRoaXMuYXNzaXN0Tm9k
ZSkKKwkJCQkJcmV0dXJuIHJldHVyblZhbFswXTsKKwkJCQlpZiAocmV0dXJuVmFsWzBdID09IGZh
bHNlKQogCQkJCQlyZXR1cm4gZmFsc2U7Ci0JCQkJaWYgKHRoaXMuYm9keSBpbnN0YW5jZW9mIEJs
b2NrKSB7Ci0JCQkJCWlmICh0aGlzLnJldHVybnNWb2lkKSB7Ci0JCQkJCQl0aGlzLnNoYXBlQW5h
bHlzaXNDb21wbGV0ZSA9IHRydWU7Ci0JCQkJCQlicmVhayBzaGFwZUFuYWx5c2lzOwotCQkJCQl9
Ci0JCQkJfSBlbHNlIHsKLQkJCQkJZmluYWwgRXhwcmVzc2lvbiBleHByZXNzaW9uQm9keSA9IChF
eHByZXNzaW9uKSBjb3B5LmJvZHk7Ci0JCQkJCXRoaXMudm9pZENvbXBhdGlibGUgPSB0aGlzLmFz
c2lzdE5vZGUgPyB0cnVlIDogZXhwcmVzc2lvbkJvZHkuc3RhdGVtZW50RXhwcmVzc2lvbigpOwot
CQkJCQl0aGlzLnZhbHVlQ29tcGF0aWJsZSA9IGV4cHJlc3Npb25Cb2R5LnJlc29sdmVkVHlwZSAh
PSBUeXBlQmluZGluZy5WT0lEOwotCQkJCQl0aGlzLnNoYXBlQW5hbHlzaXNDb21wbGV0ZSA9IHRy
dWU7Ci0JCQkJCWJyZWFrIHNoYXBlQW5hbHlzaXM7Ci0JCQkJfQotCQkJCS8vIERvIG5vdCBwcm9j
ZWVkIHdpdGggZGF0YS9jb250cm9sIGZsb3cgYW5hbHlzaXMgaWYgcmVzb2x2ZSBlbmNvdW50ZXJl
ZCBlcnJvcnMuCi0JCQkJaWYgKHRoaXMuaGFzSWdub3JlZE1hbmRhdG9yeUVycm9ycyB8fCBlbmNs
b3NpbmdTY29wZXNIYXZlRXJyb3JzKCkpIHsKLQkJCQkJaWYgKCFpc1BlcnRpbmVudFRvQXBwbGlj
YWJpbGl0eShsZWZ0LCBudWxsKSkKLQkJCQkJCWJyZWFrIHNoYXBlQW5hbHlzaXM7Ci0JCQkJCWlm
ICh0aGlzLmFyZ3VtZW50cy5sZW5ndGggIT0gMCkgLy8gZXJyb3Igbm90IGJlY2F1c2Ugb2YgdGhl
IHRhcmdldCB0eXBlIGltcG9zaXRpb24sIGJ1dCBpcyBpbmhlcmVudC4gSnVzdCBzYXkgY29tcGF0
aWJsZSBzaW5jZSBlcnJvcnMgaW4gYm9keSBhcmVuJ3QgdG8gaW5mbHVlbmNlIGFwcGxpY2FiaWxp
dHkuCi0JCQkJCQlyZXR1cm4gZmFsc2U7Ci0JCQkJCWJyZWFrIHNoYXBlQW5hbHlzaXM7Ci0JCQkJ
fQotCQkJCQotCQkJCS8vIHZhbHVlIGNvbXBhdGliaWxpdHkgb2YgYmxvY2sgbGFtYmRhJ3MgaXMg
dGhlIG9ubHkgb3BlbiBxdWVzdGlvbi4KLQkJCQlpZiAoIXRoaXMuc2hhcGVBbmFseXNpc0NvbXBs
ZXRlKQotCQkJCQl0aGlzLnZhbHVlQ29tcGF0aWJsZSA9IGNvcHkuZG9lc05vdENvbXBsZXRlTm9y
bWFsbHkoKTsKLQkJCQkKLQkJCQl0aGlzLnNoYXBlQW5hbHlzaXNDb21wbGV0ZSA9IHRydWU7Ci0J
CQl9IGZpbmFsbHkgewotCQkJCWNvbXBpbGVyT3B0aW9ucy5pc0Fubm90YXRpb25CYXNlZE51bGxB
bmFseXNpc0VuYWJsZWQgPSBhbmFseXplTlBFOwotCQkJCXRoaXMuaGFzSWdub3JlZE1hbmRhdG9y
eUVycm9ycyA9IGZhbHNlOwotCQkJCXRoaXMuZW5jbG9zaW5nU2NvcGUucHJvYmxlbVJlcG9ydGVy
KCkuc3dpdGNoRXJyb3JIYW5kbGluZ1BvbGljeShvbGRQb2xpY3kpOwogCQkJfQogCQl9CiAKQEAg
LTgzMyw2ICs3OTcsNjUgQEAgcHVibGljIGNsYXNzIExhbWJkYUV4cHJlc3Npb24gZXh0ZW5kcyBG
dW5jdGlvbmFsRXhwcmVzc2lvbiBpbXBsZW1lbnRzIFJlZmVyZW5jZUMKIAkJcmV0dXJuIHRydWU7
CiAJfQogCisJcHJpdmF0ZSBMYW1iZGFFeHByZXNzaW9uIGdldENvbXBhdGlibGVDb3B5KFR5cGVC
aW5kaW5nIGxlZnQsIGJvb2xlYW5bXSByZXR1cm5WYWwpIHsKKwkJSUVycm9ySGFuZGxpbmdQb2xp
Y3kgb2xkUG9saWN5ID0gdGhpcy5lbmNsb3NpbmdTY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5zd2l0
Y2hFcnJvckhhbmRsaW5nUG9saWN5KHNpbGVudEVycm9ySGFuZGxpbmdQb2xpY3kpOworCQlmaW5h
bCBDb21waWxlck9wdGlvbnMgY29tcGlsZXJPcHRpb25zID0gdGhpcy5lbmNsb3NpbmdTY29wZS5j
b21waWxlck9wdGlvbnMoKTsKKwkJYm9vbGVhbiBhbmFseXplTlBFID0gY29tcGlsZXJPcHRpb25z
LmlzQW5ub3RhdGlvbkJhc2VkTnVsbEFuYWx5c2lzRW5hYmxlZDsKKwkJY29tcGlsZXJPcHRpb25z
LmlzQW5ub3RhdGlvbkJhc2VkTnVsbEFuYWx5c2lzRW5hYmxlZCA9IGZhbHNlOworCQl0cnkgewor
CQkJZmluYWwgTGFtYmRhRXhwcmVzc2lvbiBjb3B5ID0gY29weSgpOworCQkJaWYgKGNvcHkgPT0g
bnVsbCkgeworCQkJCWlmICh0aGlzLmFzc2lzdE5vZGUpIHsKKwkJCQkJYW5hbHl6ZVNoYXBlKCk7
IC8vIG5vdCBvbiB0ZXJyYSBmaXJtYSBoZXJlICEKKwkJCQkJcmV0dXJuIG51bGw7CisJCQkJfQor
CQkJCXJldHVyblZhbFswXSA9ICFpc1BlcnRpbmVudFRvQXBwbGljYWJpbGl0eShsZWZ0LCBudWxs
KTsKKwkJCQlyZXR1cm4gbnVsbDsKKwkJCX0KKwkJCWNvcHkuc2V0RXhwcmVzc2lvbkNvbnRleHQo
dGhpcy5leHByZXNzaW9uQ29udGV4dCk7CisJCQljb3B5LnNldEV4cGVjdGVkVHlwZShsZWZ0KTsK
KwkJCXRoaXMuaGFzSWdub3JlZE1hbmRhdG9yeUVycm9ycyA9IGZhbHNlOworCQkJVHlwZUJpbmRp
bmcgdHlwZSA9IGNvcHkucmVzb2x2ZVR5cGUodGhpcy5lbmNsb3NpbmdTY29wZSk7CisJCQlpZiAo
dHlwZSA9PSBudWxsIHx8ICF0eXBlLmlzVmFsaWRCaW5kaW5nKCkpIHsKKwkJCQlyZXR1cm5WYWxb
MF0gPSBmYWxzZTsKKwkJCQlyZXR1cm4gY29weTsKKwkJCX0KKwkJCWlmICh0aGlzLmJvZHkgaW5z
dGFuY2VvZiBCbG9jaykgeworCQkJCWlmICh0aGlzLnJldHVybnNWb2lkKSB7CisJCQkJCXRoaXMu
c2hhcGVBbmFseXNpc0NvbXBsZXRlID0gdHJ1ZTsKKwkJCQkJcmV0dXJuIGNvcHk7CisJCQkJfQor
CQkJfSBlbHNlIHsKKwkJCQlmaW5hbCBFeHByZXNzaW9uIGV4cHJlc3Npb25Cb2R5ID0gKEV4cHJl
c3Npb24pIGNvcHkuYm9keTsKKwkJCQl0aGlzLnZvaWRDb21wYXRpYmxlID0gdGhpcy5hc3Npc3RO
b2RlID8gdHJ1ZSA6IGV4cHJlc3Npb25Cb2R5LnN0YXRlbWVudEV4cHJlc3Npb24oKTsKKwkJCQl0
aGlzLnZhbHVlQ29tcGF0aWJsZSA9IGV4cHJlc3Npb25Cb2R5LnJlc29sdmVkVHlwZSAhPSBUeXBl
QmluZGluZy5WT0lEOworCQkJCXRoaXMuc2hhcGVBbmFseXNpc0NvbXBsZXRlID0gdHJ1ZTsKKwkJ
CQlyZXR1cm4gY29weTsKKwkJCX0KKwkJCS8vIERvIG5vdCBwcm9jZWVkIHdpdGggZGF0YS9jb250
cm9sIGZsb3cgYW5hbHlzaXMgaWYgcmVzb2x2ZSBlbmNvdW50ZXJlZCBlcnJvcnMuCisJCQlpZiAo
dGhpcy5oYXNJZ25vcmVkTWFuZGF0b3J5RXJyb3JzIHx8IGVuY2xvc2luZ1Njb3Blc0hhdmVFcnJv
cnMoKSkgeworCQkJCWlmICghaXNQZXJ0aW5lbnRUb0FwcGxpY2FiaWxpdHkobGVmdCwgbnVsbCkp
CisJCQkJCXJldHVybiBjb3B5OworCQkJCWlmICh0aGlzLmFyZ3VtZW50cy5sZW5ndGggIT0gMCkg
ey8vIGVycm9yIG5vdCBiZWNhdXNlIG9mIHRoZSB0YXJnZXQgdHlwZSBpbXBvc2l0aW9uLCBidXQg
aXMgaW5oZXJlbnQuIEp1c3Qgc2F5IGNvbXBhdGlibGUgc2luY2UgZXJyb3JzIGluIGJvZHkgYXJl
bid0IHRvIGluZmx1ZW5jZSBhcHBsaWNhYmlsaXR5LgorCQkJCQlyZXR1cm5WYWxbMF0gPSBmYWxz
ZTsKKwkJCQkJcmV0dXJuIGNvcHk7CisJCQkJfQorCQkJCXJldHVybiBjb3B5OworCQkJfQorCQkJ
Ly8gdmFsdWUgY29tcGF0aWJpbGl0eSBvZiBibG9jayBsYW1iZGEncyBpcyB0aGUgb25seSBvcGVu
IHF1ZXN0aW9uLgorCQkJaWYgKCF0aGlzLnNoYXBlQW5hbHlzaXNDb21wbGV0ZSkKKwkJCQl0aGlz
LnZhbHVlQ29tcGF0aWJsZSA9IGNvcHkuZG9lc05vdENvbXBsZXRlTm9ybWFsbHkoKTsKKwkJCXRo
aXMuc2hhcGVBbmFseXNpc0NvbXBsZXRlID0gdHJ1ZTsKKwkJCXJldHVybiBjb3B5OworCQl9IGZp
bmFsbHkgeworCQkJY29tcGlsZXJPcHRpb25zLmlzQW5ub3RhdGlvbkJhc2VkTnVsbEFuYWx5c2lz
RW5hYmxlZCA9IGFuYWx5emVOUEU7CisJCQl0aGlzLmhhc0lnbm9yZWRNYW5kYXRvcnlFcnJvcnMg
PSBmYWxzZTsKKwkJCXRoaXMuZW5jbG9zaW5nU2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuc3dpdGNo
RXJyb3JIYW5kbGluZ1BvbGljeShvbGRQb2xpY3kpOworCQl9CisJfQorCisJcHJpdmF0ZSBIYXNo
TWFwPFR5cGVCaW5kaW5nLCBMYW1iZGFFeHByZXNzaW9uPiByZXNvbHZlZENvcGllczsKKwogCS8q
KgogCSAqIEdldCBhIHJlc29sdmVkIGNvcHkgb2YgdGhpcyBsYW1iZGEgZm9yIHVzZSBieSB0eXBl
IGluZmVyZW5jZSwgYXMgdG8gYXZvaWQgc3BpbGxpbmcgYW55IHByZW1hdHVyZQogCSAqIHR5cGUg
cmVzdWx0cyBpbnRvIHRoZSBvcmlnaW5hbCBsYW1iZGEuCkBAIC04NDEsMTIgKzg2NCwyMiBAQCBw
dWJsaWMgY2xhc3MgTGFtYmRhRXhwcmVzc2lvbiBleHRlbmRzIEZ1bmN0aW9uYWxFeHByZXNzaW9u
IGltcGxlbWVudHMgUmVmZXJlbmNlQwogCSAqIEByZXR1cm4gYSByZXNvbHZlZCBjb3B5IG9mICd0
aGlzJyBvciBudWxsIGlmIHNpZ25pZmljYW50IGVycm9ycyB3aGVyZSBlbmNvdW50ZXJlZAogCSAq
LwogCXB1YmxpYyBMYW1iZGFFeHByZXNzaW9uIGdldFJlc29sdmVkQ29weUZvckluZmVyZW5jZVRh
cmdldGluZyhUeXBlQmluZGluZyB0YXJnZXRUeXBlKSB7Ci0JCS8vIG5vdGU6IHRoaXMgaXMgZXNz
ZW50aWFsbHkgYSBzaW1wbGlmaWVkIGV4dHJhY3QgZnJvbSBpc0NvbXBhdGlibGVXaXRoKFR5cGVC
aW5kaW5nLFNjb3BlKS4KKwkJaWYgKHRoaXMucmVzb2x2ZWRDb3BpZXMgPT0gbnVsbCkKKwkJCXRo
aXMucmVzb2x2ZWRDb3BpZXMgPSBuZXcgSGFzaE1hcDxUeXBlQmluZGluZywgTGFtYmRhRXhwcmVz
c2lvbj4oKTsKKwkJTGFtYmRhRXhwcmVzc2lvbiBsYW1iZGEgPSB0aGlzLnJlc29sdmVkQ29waWVz
LmdldCh0YXJnZXRUeXBlKTsKKwkJaWYgKGxhbWJkYSA9PSBudWxsKSB7CisJCQlsYW1iZGEgPSBn
ZXRSZXNvbHZlZENvcHlGb3JJbmZlcmVuY2VUYXJnZXRpbmcwKHRhcmdldFR5cGUpOworCQkJaWYg
KGxhbWJkYSAhPSBudWxsKQorCQkJCXRoaXMucmVzb2x2ZWRDb3BpZXMucHV0KHRhcmdldFR5cGUs
IGxhbWJkYSk7CisJCX0KKwkJcmV0dXJuIGxhbWJkYTsKKwl9CisKKwlwdWJsaWMgTGFtYmRhRXhw
cmVzc2lvbiBnZXRSZXNvbHZlZENvcHlGb3JJbmZlcmVuY2VUYXJnZXRpbmcwKFR5cGVCaW5kaW5n
IHRhcmdldFR5cGUpIHsKKwkJLy8gbm90ZTogdGhpcyBpcyBlc3NlbnRpYWxseSBhIHNpbXBsaWZp
ZWQgZXh0cmFjdCBmcm9tIGdldENvbXBhdGlibGVDb3B5KFR5cGVCaW5kaW5nLGJvb2xlYW5bXSku
CiAJCWlmICh0aGlzLnNoYXBlQW5hbHlzaXNDb21wbGV0ZSAmJiB0aGlzLmJpbmRpbmcgIT0gbnVs
bCkKIAkJCXJldHVybiB0aGlzOwogCQkKLQkJdGFyZ2V0VHlwZSA9IHRhcmdldFR5cGUudW5jYXB0
dXJlKHRoaXMuZW5jbG9zaW5nU2NvcGUpOwotCQkvLyBUT0RPOiBjYWNoaW5nCiAJCUlFcnJvckhh
bmRsaW5nUG9saWN5IG9sZFBvbGljeSA9IHRoaXMuZW5jbG9zaW5nU2NvcGUucHJvYmxlbVJlcG9y
dGVyKCkuc3dpdGNoRXJyb3JIYW5kbGluZ1BvbGljeShzaWxlbnRFcnJvckhhbmRsaW5nUG9saWN5
KTsKIAkJZmluYWwgQ29tcGlsZXJPcHRpb25zIGNvbXBpbGVyT3B0aW9ucyA9IHRoaXMuZW5jbG9z
aW5nU2NvcGUuY29tcGlsZXJPcHRpb25zKCk7CiAJCWJvb2xlYW4gYW5hbHl6ZU5QRSA9IGNvbXBp
bGVyT3B0aW9ucy5pc0Fubm90YXRpb25CYXNlZE51bGxBbmFseXNpc0VuYWJsZWQ7CkBAIC05NzYs
NyArMTAwOSw3IEBAIHB1YmxpYyBjbGFzcyBMYW1iZGFFeHByZXNzaW9uIGV4dGVuZHMgRnVuY3Rp
b25hbEV4cHJlc3Npb24gaW1wbGVtZW50cyBSZWZlcmVuY2VDCiAJCWlmICh0aGlzLm9yaWdpbmFs
ID09IHRoaXMpIC8vIG5vdCBpbiBvdmVybG9hZCByZXNvbHV0aW9uIGNvbnRleHQuCiAJCQlyZXR1
cm47CiAJCWlmICh0aGlzLmJvZHkgaW5zdGFuY2VvZiBFeHByZXNzaW9uKSB7Ci0JCQl0aGlzLm9y
aWdpbmFsLnZhbHVlQ29tcGF0aWJsZSA9IHJlc3VsdFR5cGUgIT0gbnVsbCAmJiByZXN1bHRUeXBl
LmlkICE9IFR5cGVJZHMuVF92b2lkOworCQkJdGhpcy5vcmlnaW5hbC52YWx1ZUNvbXBhdGlibGUg
PSByZXN1bHRUeXBlICE9IG51bGwgJiYgcmVzdWx0VHlwZS5pZCA9PSBUeXBlSWRzLlRfdm9pZCA/
IGZhbHNlIDogdHJ1ZTsKIAkJCXRoaXMub3JpZ2luYWwucmVzdWx0RXhwcmVzc2lvbnMgPSBuZXcg
RXhwcmVzc2lvblsxXTsKIAkJCXRoaXMub3JpZ2luYWwucmVzdWx0RXhwcmVzc2lvbnNbMF0gPSBl
eHByZXNzaW9uOwogCQkJcmV0dXJuOyAvLyB2b2lkIGNvbXBhdGliaWxpdHkgZGV0ZXJtaW5lZCB2
aWEgc3RhdGVtZW50RXhwcmVzc2lvbigpCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVyZW5j
ZUV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUmVmZXJlbmNlRXhwcmVzc2lvbi5qYXZhCmlu
ZGV4IGU5NDY1ZjMuLjZkYTY4NjYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUmVmZXJlbmNlRXhw
cmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUmVmZXJlbmNlRXhwcmVzc2lvbi5qYXZhCkBA
IC00MCw2ICs0MCw3IEBAIHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVy
LmFzdDsKIAogaW1wb3J0IHN0YXRpYyBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
YXN0LkV4cHJlc3Npb25Db250ZXh0LklOVk9DQVRJT05fQ09OVEVYVDsKIAoraW1wb3J0IGphdmEu
dXRpbC5IYXNoTWFwOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLkNoYXJP
cGVyYXRpb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLkFTVFZp
c2l0b3I7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLkNvbXBpbGF0
aW9uUmVzdWx0OwpAQCAtNjkyLDkgKzY5MywxOCBAQCBwdWJsaWMgY2xhc3MgUmVmZXJlbmNlRXhw
cmVzc2lvbiBleHRlbmRzIEZ1bmN0aW9uYWxFeHByZXNzaW9uIGltcGxlbWVudHMgSW52b2NhdAog
CQlyZXR1cm4gdGhpcy5kZXNjcmlwdG9yLnBhcmFtZXRlcnM7CiAJfQogCisJcHJpdmF0ZSBIYXNo
TWFwPFR5cGVCaW5kaW5nLCBNZXRob2RCaW5kaW5nPiByZXNvbHZlZFRhcmdldE1ldGhvZDsKKwog
CS8qKiBEdXJpbmcgaW5mZXJlbmNlOiBUcnkgdG8gZmluZCBhbiBhcHBsaWNhYmxlIG1ldGhvZCBi
aW5kaW5nIHdpdGhvdXQgY2F1c2luZyB1bmRlc2lyZWQgc2lkZS1lZmZlY3RzLiAqLwogCXB1Ymxp
YyBNZXRob2RCaW5kaW5nIGZpbmRDb21waWxlVGltZU1ldGhvZFRhcmdldGluZyhUeXBlQmluZGlu
ZyB0YXJnZXRUeXBlLCBTY29wZSBzY29wZSkgewotCQlNZXRob2RCaW5kaW5nIHRhcmdldE1ldGhv
ZCA9IGludGVybmFsUmVzb2x2ZVRlbnRhdGl2ZWx5KHRhcmdldFR5cGUsIHNjb3BlKTsKKwkJaWYg
KHRoaXMucmVzb2x2ZWRUYXJnZXRNZXRob2QgPT0gbnVsbCkKKwkJCXRoaXMucmVzb2x2ZWRUYXJn
ZXRNZXRob2QgPSBuZXcgSGFzaE1hcDxUeXBlQmluZGluZywgTWV0aG9kQmluZGluZz4oKTsKKwkJ
TWV0aG9kQmluZGluZyB0YXJnZXRNZXRob2QgPSB0aGlzLnJlc29sdmVkVGFyZ2V0TWV0aG9kLmdl
dCh0YXJnZXRUeXBlKTsKKwkJaWYgKHRhcmdldE1ldGhvZCA9PSBudWxsKSB7CisJCQl0YXJnZXRN
ZXRob2QgPSBpbnRlcm5hbFJlc29sdmVUZW50YXRpdmVseSh0YXJnZXRUeXBlLCBzY29wZSk7CisJ
CQlpZiAodGFyZ2V0TWV0aG9kICE9IG51bGwpCisJCQkJdGhpcy5yZXNvbHZlZFRhcmdldE1ldGhv
ZC5wdXQodGFyZ2V0VHlwZSwgdGFyZ2V0TWV0aG9kKTsKKwkJfQogCQlpZiAodGFyZ2V0TWV0aG9k
ID09IG51bGwgfHwgIXRhcmdldE1ldGhvZC5pc1ZhbGlkQmluZGluZygpKQogCQkJcmV0dXJuIG51
bGw7CiAJCXJldHVybiB0YXJnZXRNZXRob2Q7CkBAIC04NDksOCArODU5LDE1IEBAIHB1YmxpYyBj
bGFzcyBSZWZlcmVuY2VFeHByZXNzaW9uIGV4dGVuZHMgRnVuY3Rpb25hbEV4cHJlc3Npb24gaW1w
bGVtZW50cyBJbnZvY2F0CiAJCQkJJiYgdGhpcy5yZXNvbHZlZFR5cGUgIT0gbnVsbCAmJiB0aGlz
LnJlc29sdmVkVHlwZS5pc1ZhbGlkQmluZGluZygpKSB7CiAJCQlyZXR1cm4gdGhpcy5yZXNvbHZl
ZFR5cGUuaXNDb21wYXRpYmxlV2l0aChsZWZ0LCBzY29wZSk7CiAJCX0KLQkJLy8gMTUuMTMuMgot
CQlmaW5hbCBNZXRob2RCaW5kaW5nIHNhbSA9IGxlZnQuZ2V0U2luZ2xlQWJzdHJhY3RNZXRob2Qo
dGhpcy5lbmNsb3NpbmdTY29wZSwgdHJ1ZSk7CisJCWlmICh0aGlzLnJlc29sdmVkVGFyZ2V0TWV0
aG9kID09IG51bGwpCisJCQl0aGlzLnJlc29sdmVkVGFyZ2V0TWV0aG9kID0gbmV3IEhhc2hNYXA8
VHlwZUJpbmRpbmcsIE1ldGhvZEJpbmRpbmc+KCk7CisJCU1ldGhvZEJpbmRpbmcgc2FtID0gdGhp
cy5yZXNvbHZlZFRhcmdldE1ldGhvZC5nZXQobGVmdCk7CisJCWlmIChzYW0gPT0gbnVsbCkgewor
CQkJLy8gMTUuMTMuMgorCQkJc2FtID0gbGVmdC5nZXRTaW5nbGVBYnN0cmFjdE1ldGhvZCh0aGlz
LmVuY2xvc2luZ1Njb3BlLCB0cnVlKTsKKwkJCWlmIChzYW0gIT0gbnVsbCkKKwkJCQl0aGlzLnJl
c29sdmVkVGFyZ2V0TWV0aG9kLnB1dChsZWZ0LCBzYW0pOworCQl9CiAJCWlmIChzYW0gPT0gbnVs
bCB8fCAhc2FtLmlzVmFsaWRCaW5kaW5nKCkpCiAJCQlyZXR1cm4gZmFsc2U7CiAJCWJvb2xlYW4g
aXNDb21wYXRpYmxlOwo=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>248295</attachid>
            <date>2014-10-31 06:47:00 -0400</date>
            <delta_ts>2014-10-31 06:47:57 -0400</delta_ts>
            <desc>Patch</desc>
            <filename>patch.patch</filename>
            <type>text/plain</type>
            <size>12439</size>
            <attacher name="shankha banerjee">shankhba</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fz
dC9MYW1iZGFFeHByZXNzaW9uLmphdmEKaW5kZXggNTFjYzg0Ny4uOGUwNDRiOCAxMDA2NDQKLS0t
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FzdC9MYW1iZGFFeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9MYW1i
ZGFFeHByZXNzaW9uLmphdmEKQEAgLTI0NSw3ICsyNDUsNiBAQCBwdWJsaWMgY2xhc3MgTGFtYmRh
RXhwcmVzc2lvbiBleHRlbmRzIEZ1bmN0aW9uYWxFeHByZXNzaW9uIGltcGxlbWVudHMgUmVmZXJl
bmNlQwogCQkJCXRoaXMuYXJndW1lbnRUeXBlc1tpXSA9IHRoaXMuYXJndW1lbnRzW2ldLnR5cGUu
cmVzb2x2ZVR5cGUoYmxvY2tTY29wZSwgdHJ1ZSAvKiBjaGVjayBib3VuZHMqLyk7CiAJCX0KIAkJ
aWYgKHRoaXMuZXhwZWN0ZWRUeXBlID09IG51bGwgJiYgdGhpcy5leHByZXNzaW9uQ29udGV4dCA9
PSBJTlZPQ0FUSU9OX0NPTlRFWFQpIHsKLQkJCXRoaXMucmVzb2x2ZWRDb3BpZXMgPSBuZXcgSGFz
aE1hcDxUeXBlQmluZGluZywgTGFtYmRhRXhwcmVzc2lvbj4oKTsKIAkJCXJldHVybiBuZXcgUG9s
eVR5cGVCaW5kaW5nKHRoaXMpOwogCQl9IAogCQkKQEAgLTc0MCw1NiArNzM5LDIzIEBAIHB1Ymxp
YyBjbGFzcyBMYW1iZGFFeHByZXNzaW9uIGV4dGVuZHMgRnVuY3Rpb25hbEV4cHJlc3Npb24gaW1w
bGVtZW50cyBSZWZlcmVuY2VDCiAJCWlmICghKGxlZnQgaW5zdGFuY2VvZiBSZWZlcmVuY2VCaW5k
aW5nKSkKIAkJCXJldHVybiBmYWxzZTsKIAotCQlzaGFwZUFuYWx5c2lzOiBpZiAoIXRoaXMuc2hh
cGVBbmFseXNpc0NvbXBsZXRlKSB7Ci0JCQlJRXJyb3JIYW5kbGluZ1BvbGljeSBvbGRQb2xpY3kg
PSB0aGlzLmVuY2xvc2luZ1Njb3BlLnByb2JsZW1SZXBvcnRlcigpLnN3aXRjaEVycm9ySGFuZGxp
bmdQb2xpY3koc2lsZW50RXJyb3JIYW5kbGluZ1BvbGljeSk7Ci0JCQlmaW5hbCBDb21waWxlck9w
dGlvbnMgY29tcGlsZXJPcHRpb25zID0gdGhpcy5lbmNsb3NpbmdTY29wZS5jb21waWxlck9wdGlv
bnMoKTsKLQkJCWJvb2xlYW4gYW5hbHl6ZU5QRSA9IGNvbXBpbGVyT3B0aW9ucy5pc0Fubm90YXRp
b25CYXNlZE51bGxBbmFseXNpc0VuYWJsZWQ7Ci0JCQljb21waWxlck9wdGlvbnMuaXNBbm5vdGF0
aW9uQmFzZWROdWxsQW5hbHlzaXNFbmFibGVkID0gZmFsc2U7Ci0JCQl0cnkgewotCQkJCWZpbmFs
IExhbWJkYUV4cHJlc3Npb24gY29weSA9IGNvcHkoKTsKLQkJCQlpZiAoY29weSA9PSBudWxsKSB7
Ci0JCQkJCWlmICh0aGlzLmFzc2lzdE5vZGUpIHsKLQkJCQkJCWFuYWx5emVTaGFwZSgpOyAvLyBu
b3Qgb24gdGVycmEgZmlybWEgaGVyZSAhCi0JCQkJCQlicmVhayBzaGFwZUFuYWx5c2lzOwotCQkJ
CQl9Ci0JCQkJCXJldHVybiAhaXNQZXJ0aW5lbnRUb0FwcGxpY2FiaWxpdHkobGVmdCwgbnVsbCk7
Ci0JCQkJfQotCQkJCWNvcHkuc2V0RXhwcmVzc2lvbkNvbnRleHQodGhpcy5leHByZXNzaW9uQ29u
dGV4dCk7Ci0JCQkJY29weS5zZXRFeHBlY3RlZFR5cGUobGVmdCk7Ci0JCQkJdGhpcy5oYXNJZ25v
cmVkTWFuZGF0b3J5RXJyb3JzID0gZmFsc2U7Ci0JCQkJVHlwZUJpbmRpbmcgdHlwZSA9IGNvcHku
cmVzb2x2ZVR5cGUodGhpcy5lbmNsb3NpbmdTY29wZSk7Ci0JCQkJaWYgKHR5cGUgPT0gbnVsbCB8
fCAhdHlwZS5pc1ZhbGlkQmluZGluZygpKQotCQkJCQlyZXR1cm4gZmFsc2U7Ci0JCQkJaWYgKHRo
aXMuYm9keSBpbnN0YW5jZW9mIEJsb2NrKSB7Ci0JCQkJCWlmICh0aGlzLnJldHVybnNWb2lkKSB7
Ci0JCQkJCQl0aGlzLnNoYXBlQW5hbHlzaXNDb21wbGV0ZSA9IHRydWU7Ci0JCQkJCQlicmVhayBz
aGFwZUFuYWx5c2lzOwotCQkJCQl9CisJCWlmICh0aGlzLnJlc29sdmVkQ29waWVzID09IG51bGwp
CisJCQl0aGlzLnJlc29sdmVkQ29waWVzID0gbmV3IEhhc2hNYXA8VHlwZUJpbmRpbmcsIExhbWJk
YUV4cHJlc3Npb24+KCk7CisKKwkJaWYgKCF0aGlzLnJlc29sdmVkQ29waWVzLmNvbnRhaW5zS2V5
KGxlZnQpKSB7CisJCQlpZiAoIXRoaXMuc2hhcGVBbmFseXNpc0NvbXBsZXRlKSB7CisJCQkJYm9v
bGVhbltdIHJldHVyblZhbCA9IG5ldyBib29sZWFuW10ge3RydWV9OworCQkJCUxhbWJkYUV4cHJl
c3Npb24gY29weTsKKwkJCQlpZiAoIXRoaXMucmVzb2x2ZWRDb3BpZXMuY29udGFpbnNLZXkobGVm
dCkpIHsKKwkJCQkJY29weSA9IGdldENvbXBhdGlibGVDb3B5KGxlZnQsIHJldHVyblZhbCk7CisJ
CQkJCXRoaXMucmVzb2x2ZWRDb3BpZXMucHV0KGxlZnQsIGNvcHkpOwogCQkJCX0gZWxzZSB7Ci0J
CQkJCWZpbmFsIEV4cHJlc3Npb24gZXhwcmVzc2lvbkJvZHkgPSAoRXhwcmVzc2lvbikgY29weS5i
b2R5OwotCQkJCQl0aGlzLnZvaWRDb21wYXRpYmxlID0gdGhpcy5hc3Npc3ROb2RlID8gdHJ1ZSA6
IGV4cHJlc3Npb25Cb2R5LnN0YXRlbWVudEV4cHJlc3Npb24oKTsKLQkJCQkJdGhpcy52YWx1ZUNv
bXBhdGlibGUgPSBleHByZXNzaW9uQm9keS5yZXNvbHZlZFR5cGUgIT0gVHlwZUJpbmRpbmcuVk9J
RDsKLQkJCQkJdGhpcy5zaGFwZUFuYWx5c2lzQ29tcGxldGUgPSB0cnVlOwotCQkJCQlicmVhayBz
aGFwZUFuYWx5c2lzOwotCQkJCX0KLQkJCQkvLyBEbyBub3QgcHJvY2VlZCB3aXRoIGRhdGEvY29u
dHJvbCBmbG93IGFuYWx5c2lzIGlmIHJlc29sdmUgZW5jb3VudGVyZWQgZXJyb3JzLgotCQkJCWlm
ICh0aGlzLmhhc0lnbm9yZWRNYW5kYXRvcnlFcnJvcnMgfHwgZW5jbG9zaW5nU2NvcGVzSGF2ZUVy
cm9ycygpKSB7Ci0JCQkJCWlmICghaXNQZXJ0aW5lbnRUb0FwcGxpY2FiaWxpdHkobGVmdCwgbnVs
bCkpCi0JCQkJCQlicmVhayBzaGFwZUFuYWx5c2lzOwotCQkJCQlpZiAodGhpcy5hcmd1bWVudHMu
bGVuZ3RoICE9IDApIC8vIGVycm9yIG5vdCBiZWNhdXNlIG9mIHRoZSB0YXJnZXQgdHlwZSBpbXBv
c2l0aW9uLCBidXQgaXMgaW5oZXJlbnQuIEp1c3Qgc2F5IGNvbXBhdGlibGUgc2luY2UgZXJyb3Jz
IGluIGJvZHkgYXJlbid0IHRvIGluZmx1ZW5jZSBhcHBsaWNhYmlsaXR5LgotCQkJCQkJcmV0dXJu
IGZhbHNlOwotCQkJCQlicmVhayBzaGFwZUFuYWx5c2lzOworCQkJCQljb3B5ID0gdGhpcy5yZXNv
bHZlZENvcGllcy5nZXQobGVmdCk7CiAJCQkJfQotCQkJCQotCQkJCS8vIHZhbHVlIGNvbXBhdGli
aWxpdHkgb2YgYmxvY2sgbGFtYmRhJ3MgaXMgdGhlIG9ubHkgb3BlbiBxdWVzdGlvbi4KLQkJCQlp
ZiAoIXRoaXMuc2hhcGVBbmFseXNpc0NvbXBsZXRlKQotCQkJCQl0aGlzLnZhbHVlQ29tcGF0aWJs
ZSA9IGNvcHkuZG9lc05vdENvbXBsZXRlTm9ybWFsbHkoKTsKLQkJCQkKLQkJCQl0aGlzLnNoYXBl
QW5hbHlzaXNDb21wbGV0ZSA9IHRydWU7Ci0JCQl9IGZpbmFsbHkgewotCQkJCWNvbXBpbGVyT3B0
aW9ucy5pc0Fubm90YXRpb25CYXNlZE51bGxBbmFseXNpc0VuYWJsZWQgPSBhbmFseXplTlBFOwot
CQkJCXRoaXMuaGFzSWdub3JlZE1hbmRhdG9yeUVycm9ycyA9IGZhbHNlOwotCQkJCXRoaXMuZW5j
bG9zaW5nU2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuc3dpdGNoRXJyb3JIYW5kbGluZ1BvbGljeShv
bGRQb2xpY3kpOworCQkJCWlmIChjb3B5ID09IG51bGwgJiYgIXRoaXMuYXNzaXN0Tm9kZSkKKwkJ
CQkJcmV0dXJuIHJldHVyblZhbFswXTsKKwkJCQlpZiAocmV0dXJuVmFsWzBdID09IGZhbHNlKQor
CQkJCQlyZXR1cm4gZmFsc2U7CiAJCQl9CiAJCX0KIApAQCAtODQyLDYgKzgwOCw2MyBAQCBwdWJs
aWMgY2xhc3MgTGFtYmRhRXhwcmVzc2lvbiBleHRlbmRzIEZ1bmN0aW9uYWxFeHByZXNzaW9uIGlt
cGxlbWVudHMgUmVmZXJlbmNlQwogCQlyZXR1cm4gdHJ1ZTsKIAl9CiAKKwlwcml2YXRlIExhbWJk
YUV4cHJlc3Npb24gZ2V0Q29tcGF0aWJsZUNvcHkoVHlwZUJpbmRpbmcgbGVmdCwgYm9vbGVhbltd
IHJldHVyblZhbCkgeworCQlJRXJyb3JIYW5kbGluZ1BvbGljeSBvbGRQb2xpY3kgPSB0aGlzLmVu
Y2xvc2luZ1Njb3BlLnByb2JsZW1SZXBvcnRlcigpLnN3aXRjaEVycm9ySGFuZGxpbmdQb2xpY3ko
c2lsZW50RXJyb3JIYW5kbGluZ1BvbGljeSk7CisJCWZpbmFsIENvbXBpbGVyT3B0aW9ucyBjb21w
aWxlck9wdGlvbnMgPSB0aGlzLmVuY2xvc2luZ1Njb3BlLmNvbXBpbGVyT3B0aW9ucygpOworCQli
b29sZWFuIGFuYWx5emVOUEUgPSBjb21waWxlck9wdGlvbnMuaXNBbm5vdGF0aW9uQmFzZWROdWxs
QW5hbHlzaXNFbmFibGVkOworCQljb21waWxlck9wdGlvbnMuaXNBbm5vdGF0aW9uQmFzZWROdWxs
QW5hbHlzaXNFbmFibGVkID0gZmFsc2U7CisJCXRyeSB7CisJCQlmaW5hbCBMYW1iZGFFeHByZXNz
aW9uIGNvcHkgPSBjb3B5KCk7CisJCQlpZiAoY29weSA9PSBudWxsKSB7CisJCQkJaWYgKHRoaXMu
YXNzaXN0Tm9kZSkgeworCQkJCQlhbmFseXplU2hhcGUoKTsgLy8gbm90IG9uIHRlcnJhIGZpcm1h
IGhlcmUgIQorCQkJCQlyZXR1cm4gbnVsbDsKKwkJCQl9CisJCQkJcmV0dXJuVmFsWzBdID0gIWlz
UGVydGluZW50VG9BcHBsaWNhYmlsaXR5KGxlZnQsIG51bGwpOworCQkJCXJldHVybiBudWxsOwor
CQkJfQorCQkJY29weS5zZXRFeHByZXNzaW9uQ29udGV4dCh0aGlzLmV4cHJlc3Npb25Db250ZXh0
KTsKKwkJCWNvcHkuc2V0RXhwZWN0ZWRUeXBlKGxlZnQpOworCQkJdGhpcy5oYXNJZ25vcmVkTWFu
ZGF0b3J5RXJyb3JzID0gZmFsc2U7CisJCQlUeXBlQmluZGluZyB0eXBlID0gY29weS5yZXNvbHZl
VHlwZSh0aGlzLmVuY2xvc2luZ1Njb3BlKTsKKwkJCWlmICh0eXBlID09IG51bGwgfHwgIXR5cGUu
aXNWYWxpZEJpbmRpbmcoKSkgeworCQkJCXJldHVyblZhbFswXSA9IGZhbHNlOworCQkJCXJldHVy
biBjb3B5OworCQkJfQorCQkJaWYgKHRoaXMuYm9keSBpbnN0YW5jZW9mIEJsb2NrKSB7CisJCQkJ
aWYgKHRoaXMucmV0dXJuc1ZvaWQpIHsKKwkJCQkJdGhpcy5zaGFwZUFuYWx5c2lzQ29tcGxldGUg
PSB0cnVlOworCQkJCQlyZXR1cm4gY29weTsKKwkJCQl9CisJCQl9IGVsc2UgeworCQkJCWZpbmFs
IEV4cHJlc3Npb24gZXhwcmVzc2lvbkJvZHkgPSAoRXhwcmVzc2lvbikgY29weS5ib2R5OworCQkJ
CXRoaXMudm9pZENvbXBhdGlibGUgPSB0aGlzLmFzc2lzdE5vZGUgPyB0cnVlIDogZXhwcmVzc2lv
bkJvZHkuc3RhdGVtZW50RXhwcmVzc2lvbigpOworCQkJCXRoaXMudmFsdWVDb21wYXRpYmxlID0g
ZXhwcmVzc2lvbkJvZHkucmVzb2x2ZWRUeXBlICE9IFR5cGVCaW5kaW5nLlZPSUQ7CisJCQkJdGhp
cy5zaGFwZUFuYWx5c2lzQ29tcGxldGUgPSB0cnVlOworCQkJCXJldHVybiBjb3B5OworCQkJfQor
CQkJLy8gRG8gbm90IHByb2NlZWQgd2l0aCBkYXRhL2NvbnRyb2wgZmxvdyBhbmFseXNpcyBpZiBy
ZXNvbHZlIGVuY291bnRlcmVkIGVycm9ycy4KKwkJCWlmICh0aGlzLmhhc0lnbm9yZWRNYW5kYXRv
cnlFcnJvcnMgfHwgZW5jbG9zaW5nU2NvcGVzSGF2ZUVycm9ycygpKSB7CisJCQkJaWYgKCFpc1Bl
cnRpbmVudFRvQXBwbGljYWJpbGl0eShsZWZ0LCBudWxsKSkKKwkJCQkJcmV0dXJuIGNvcHk7CisJ
CQkJaWYgKHRoaXMuYXJndW1lbnRzLmxlbmd0aCAhPSAwKSB7Ly8gZXJyb3Igbm90IGJlY2F1c2Ug
b2YgdGhlIHRhcmdldCB0eXBlIGltcG9zaXRpb24sIGJ1dCBpcyBpbmhlcmVudC4gSnVzdCBzYXkg
Y29tcGF0aWJsZSBzaW5jZSBlcnJvcnMgaW4gYm9keSBhcmVuJ3QgdG8gaW5mbHVlbmNlIGFwcGxp
Y2FiaWxpdHkuCisJCQkJCXJldHVyblZhbFswXSA9IGZhbHNlOworCQkJCQlyZXR1cm4gY29weTsK
KwkJCQl9CisJCQkJcmV0dXJuIGNvcHk7CisJCQl9CisJCQkvLyB2YWx1ZSBjb21wYXRpYmlsaXR5
IG9mIGJsb2NrIGxhbWJkYSdzIGlzIHRoZSBvbmx5IG9wZW4gcXVlc3Rpb24uCisJCQlpZiAoIXRo
aXMuc2hhcGVBbmFseXNpc0NvbXBsZXRlKQorCQkJCXRoaXMudmFsdWVDb21wYXRpYmxlID0gY29w
eS5kb2VzTm90Q29tcGxldGVOb3JtYWxseSgpOworCQkJdGhpcy5zaGFwZUFuYWx5c2lzQ29tcGxl
dGUgPSB0cnVlOworCQkJcmV0dXJuIGNvcHk7CisJCX0gZmluYWxseSB7CisJCQljb21waWxlck9w
dGlvbnMuaXNBbm5vdGF0aW9uQmFzZWROdWxsQW5hbHlzaXNFbmFibGVkID0gYW5hbHl6ZU5QRTsK
KwkJCXRoaXMuaGFzSWdub3JlZE1hbmRhdG9yeUVycm9ycyA9IGZhbHNlOworCQkJdGhpcy5lbmNs
b3NpbmdTY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5zd2l0Y2hFcnJvckhhbmRsaW5nUG9saWN5KG9s
ZFBvbGljeSk7CisJCX0KKwl9CisKIAlwcml2YXRlIEhhc2hNYXA8VHlwZUJpbmRpbmcsIExhbWJk
YUV4cHJlc3Npb24+IHJlc29sdmVkQ29waWVzOwogCQogCS8qKgpAQCAtODUyLDEyICs4NzUsMTQg
QEAgcHVibGljIGNsYXNzIExhbWJkYUV4cHJlc3Npb24gZXh0ZW5kcyBGdW5jdGlvbmFsRXhwcmVz
c2lvbiBpbXBsZW1lbnRzIFJlZmVyZW5jZUMKIAkgKiBAcmV0dXJuIGEgcmVzb2x2ZWQgY29weSBv
ZiAndGhpcycgb3IgbnVsbCBpZiBzaWduaWZpY2FudCBlcnJvcnMgd2hlcmUgZW5jb3VudGVyZWQK
IAkgKi8KIAlwdWJsaWMgTGFtYmRhRXhwcmVzc2lvbiBnZXRSZXNvbHZlZENvcHlGb3JJbmZlcmVu
Y2VUYXJnZXRpbmcoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSkgewotCQlMYW1iZGFFeHByZXNzaW9u
IGxhbWJkYSA9IHRoaXMucmVzb2x2ZWRDb3BpZXMuZ2V0KHRhcmdldFR5cGUpOwotCQlpZiAobGFt
YmRhID09IG51bGwpIHsKKwkJaWYgKHRoaXMucmVzb2x2ZWRDb3BpZXMgPT0gbnVsbCkKKwkJCXRo
aXMucmVzb2x2ZWRDb3BpZXMgPSBuZXcgSGFzaE1hcDxUeXBlQmluZGluZywgTGFtYmRhRXhwcmVz
c2lvbj4oKTsKKwkJTGFtYmRhRXhwcmVzc2lvbiBsYW1iZGE7CisJCWlmICghdGhpcy5yZXNvbHZl
ZENvcGllcy5jb250YWluc0tleSh0YXJnZXRUeXBlKSkgewogCQkJbGFtYmRhID0gZ2V0UmVzb2x2
ZWRDb3B5Rm9ySW5mZXJlbmNlVGFyZ2V0aW5nMCh0YXJnZXRUeXBlKTsKLQkJCWlmIChsYW1iZGEg
IT0gbnVsbCkgewotCQkJCXRoaXMucmVzb2x2ZWRDb3BpZXMucHV0KHRhcmdldFR5cGUsIGxhbWJk
YSk7Ci0JCQl9CisJCQl0aGlzLnJlc29sdmVkQ29waWVzLnB1dCh0YXJnZXRUeXBlLCBsYW1iZGEp
OworCQl9IGVsc2UgeworCQkJbGFtYmRhID0gdGhpcy5yZXNvbHZlZENvcGllcy5nZXQodGFyZ2V0
VHlwZSk7CiAJCX0KIAkJcmV0dXJuIGxhbWJkYTsKIAl9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0
L01lc3NhZ2VTZW5kLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L01lc3NhZ2VTZW5kLmphdmEKaW5kZXggNzI5
NTJmOC4uMDg3MWRhZCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9NZXNzYWdlU2VuZC5qYXZhCisr
KyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hc3QvTWVzc2FnZVNlbmQuamF2YQpAQCAtNTgsNiArNTgsOCBAQCBwYWNrYWdl
IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3Q7CiAKIGltcG9ydCBzdGF0aWMg
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5FeHByZXNzaW9uQ29udGV4dC4q
OwogCitpbXBvcnQgamF2YS51dGlsLkhhc2hNYXA7CisKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
Y29yZS5jb21waWxlci5DaGFyT3BlcmF0aW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRl
cm5hbC5jb21waWxlci5BU1RWaXNpdG9yOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5h
bC5jb21waWxlci5jbGFzc2ZtdC5DbGFzc0ZpbGVDb25zdGFudHM7CkBAIC05NzYsNiArOTc4LDgg
QEAgcHVibGljIGJvb2xlYW4gaXNCb3hpbmdDb21wYXRpYmxlV2l0aChUeXBlQmluZGluZyB0YXJn
ZXRUeXBlLCBTY29wZSBzY29wZSkgewogCX0KIH0KIAorcHJpdmF0ZSBIYXNoTWFwPFR5cGVCaW5k
aW5nLCBNZXRob2RCaW5kaW5nPiByZXNvbHZlZFRhcmdldE1ldGhvZDsKKwogcHVibGljIGJvb2xl
YW4gaXNDb21wYXRpYmxlV2l0aChUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBmaW5hbCBTY29wZSBz
Y29wZSkgewogCWlmICh0aGlzLmFyZ3VtZW50c0hhdmVFcnJvcnMgfHwgdGhpcy5iaW5kaW5nID09
IG51bGwgfHwgIXRoaXMuYmluZGluZy5pc1ZhbGlkQmluZGluZygpIHx8IHRhcmdldFR5cGUgPT0g
bnVsbCB8fCBzY29wZSA9PSBudWxsKQogCQlyZXR1cm4gZmFsc2U7CkBAIC05ODMsNyArOTg3LDE5
IEBAIHB1YmxpYyBib29sZWFuIGlzQ29tcGF0aWJsZVdpdGgoVHlwZUJpbmRpbmcgdGFyZ2V0VHlw
ZSwgZmluYWwgU2NvcGUgc2NvcGUpIHsKIAl0cnkgewogCQl0aGlzLmV4cGVjdGVkVHlwZSA9IHRh
cmdldFR5cGU7CiAJCS8vIE5vIG5lZWQgdG8gdHVubmVsIHRocm91Z2ggb3ZlcmxvYWQgcmVzb2x1
dGlvbi4gdGhpcy5iaW5kaW5nIGlzIHRoZSBNU01CLgotCQlNZXRob2RCaW5kaW5nIG1ldGhvZCA9
IGlzUG9seUV4cHJlc3Npb24oKSA/IFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5j
b21wdXRlQ29tcGF0aWJsZU1ldGhvZDE4KHRoaXMuYmluZGluZy5zaGFsbG93T3JpZ2luYWwoKSwg
dGhpcy5hcmd1bWVudFR5cGVzLCBzY29wZSwgdGhpcykgOiB0aGlzLmJpbmRpbmc7CisJCU1ldGhv
ZEJpbmRpbmcgbWV0aG9kOworCQlpZiAoIWlzUG9seUV4cHJlc3Npb24oKSkKKwkJCW1ldGhvZCA9
IHRoaXMuYmluZGluZzsKKwkJZWxzZSB7CisJCQlpZiAodGhpcy5yZXNvbHZlZFRhcmdldE1ldGhv
ZCA9PSBudWxsKQorCQkJCXRoaXMucmVzb2x2ZWRUYXJnZXRNZXRob2QgPSBuZXcgSGFzaE1hcDxU
eXBlQmluZGluZywgTWV0aG9kQmluZGluZz4oKTsKKwkJCWlmICghdGhpcy5yZXNvbHZlZFRhcmdl
dE1ldGhvZC5jb250YWluc0tleSh0YXJnZXRUeXBlKSkgeworCQkJCW1ldGhvZCA9IFBhcmFtZXRl
cml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5jb21wdXRlQ29tcGF0aWJsZU1ldGhvZDE4KHRoaXMu
YmluZGluZy5zaGFsbG93T3JpZ2luYWwoKSwgdGhpcy5hcmd1bWVudFR5cGVzLCBzY29wZSwgdGhp
cyk7CisJCQkJdGhpcy5yZXNvbHZlZFRhcmdldE1ldGhvZC5wdXQodGFyZ2V0VHlwZSwgbWV0aG9k
KTsKKwkJCX0gZWxzZSB7CisJCQkJbWV0aG9kID0gdGhpcy5yZXNvbHZlZFRhcmdldE1ldGhvZC5n
ZXQodGFyZ2V0VHlwZSk7CisJCQl9CisJCX0KIAkJVHlwZUJpbmRpbmcgcmV0dXJuVHlwZTsKIAkJ
aWYgKG1ldGhvZCA9PSBudWxsIHx8ICFtZXRob2QuaXNWYWxpZEJpbmRpbmcoKSB8fCAocmV0dXJu
VHlwZSA9IG1ldGhvZC5yZXR1cm5UeXBlKSA9PSBudWxsIHx8ICFyZXR1cm5UeXBlLmlzVmFsaWRC
aW5kaW5nKCkpCiAJCQlyZXR1cm4gZmFsc2U7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVy
ZW5jZUV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUmVmZXJlbmNlRXhwcmVzc2lvbi5qYXZh
CmluZGV4IDYwYThjZGEuLmMwNWM4OWEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUmVmZXJlbmNl
RXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUmVmZXJlbmNlRXhwcmVzc2lvbi5qYXZh
CkBAIC00MCw2ICs0MCw3IEBAIHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBp
bGVyLmFzdDsKIAogaW1wb3J0IHN0YXRpYyBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIuYXN0LkV4cHJlc3Npb25Db250ZXh0LklOVk9DQVRJT05fQ09OVEVYVDsKIAoraW1wb3J0IGph
dmEudXRpbC5IYXNoTWFwOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLkNo
YXJPcGVyYXRpb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLkFT
VFZpc2l0b3I7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLkNvbXBp
bGF0aW9uUmVzdWx0OwpAQCAtNjkyLDYgKzY5Myw4IEBAIHB1YmxpYyBjbGFzcyBSZWZlcmVuY2VF
eHByZXNzaW9uIGV4dGVuZHMgRnVuY3Rpb25hbEV4cHJlc3Npb24gaW1wbGVtZW50cyBJbnZvY2F0
CiAJCXJldHVybiB0aGlzLmRlc2NyaXB0b3IucGFyYW1ldGVyczsKIAl9CiAKKwlwcml2YXRlIEhh
c2hNYXA8VHlwZUJpbmRpbmcsIE1ldGhvZEJpbmRpbmc+IHJlc29sdmVkVGFyZ2V0TWV0aG9kOwor
CiAJLyoqIER1cmluZyBpbmZlcmVuY2U6IFRyeSB0byBmaW5kIGFuIGFwcGxpY2FibGUgbWV0aG9k
IGJpbmRpbmcgd2l0aG91dCBjYXVzaW5nIHVuZGVzaXJlZCBzaWRlLWVmZmVjdHMuICovCiAJcHVi
bGljIE1ldGhvZEJpbmRpbmcgZmluZENvbXBpbGVUaW1lTWV0aG9kVGFyZ2V0aW5nKFR5cGVCaW5k
aW5nIHRhcmdldFR5cGUsIFNjb3BlIHNjb3BlKSB7CiAJCWlmICh0aGlzLmV4YWN0TWV0aG9kQmlu
ZGluZyAhPSBudWxsKSB7CkBAIC03MDIsNyArNzA1LDEzIEBAIHB1YmxpYyBjbGFzcyBSZWZlcmVu
Y2VFeHByZXNzaW9uIGV4dGVuZHMgRnVuY3Rpb25hbEV4cHJlc3Npb24gaW1wbGVtZW50cyBJbnZv
Y2F0CiAJCQlpbnQgayA9IHRoaXMuZXhhY3RNZXRob2RCaW5kaW5nLnBhcmFtZXRlcnMubGVuZ3Ro
OwogCQkJcmV0dXJuIChuID09IGsgfHwgbiA9PSBrICsgMSkgPyB0aGlzLmV4YWN0TWV0aG9kQmlu
ZGluZyA6IG51bGw7CiAJCX0KLQkJTWV0aG9kQmluZGluZyB0YXJnZXRNZXRob2QgPSBpbnRlcm5h
bFJlc29sdmVUZW50YXRpdmVseSh0YXJnZXRUeXBlLCBzY29wZSk7CisJCWlmICh0aGlzLnJlc29s
dmVkVGFyZ2V0TWV0aG9kID09IG51bGwpCisJCQl0aGlzLnJlc29sdmVkVGFyZ2V0TWV0aG9kID0g
bmV3IEhhc2hNYXA8VHlwZUJpbmRpbmcsIE1ldGhvZEJpbmRpbmc+KCk7CisJCU1ldGhvZEJpbmRp
bmcgdGFyZ2V0TWV0aG9kID0gdGhpcy5yZXNvbHZlZFRhcmdldE1ldGhvZC5nZXQodGFyZ2V0VHlw
ZSk7CisJCWlmICghdGhpcy5yZXNvbHZlZFRhcmdldE1ldGhvZC5jb250YWluc0tleSh0YXJnZXRU
eXBlKSkgeworCQkJdGFyZ2V0TWV0aG9kID0gaW50ZXJuYWxSZXNvbHZlVGVudGF0aXZlbHkodGFy
Z2V0VHlwZSwgc2NvcGUpOworCQkJdGhpcy5yZXNvbHZlZFRhcmdldE1ldGhvZC5wdXQodGFyZ2V0
VHlwZSwgdGFyZ2V0TWV0aG9kKTsKKwkJfQogCQlpZiAodGFyZ2V0TWV0aG9kID09IG51bGwgfHwg
IXRhcmdldE1ldGhvZC5pc1ZhbGlkQmluZGluZygpKQogCQkJcmV0dXJuIG51bGw7CiAJCXJldHVy
biB0YXJnZXRNZXRob2Q7CkBAIC04NDUsOCArODU0LDE0IEBAIHB1YmxpYyBjbGFzcyBSZWZlcmVu
Y2VFeHByZXNzaW9uIGV4dGVuZHMgRnVuY3Rpb25hbEV4cHJlc3Npb24gaW1wbGVtZW50cyBJbnZv
Y2F0CiAJCQkJJiYgdGhpcy5yZXNvbHZlZFR5cGUgIT0gbnVsbCAmJiB0aGlzLnJlc29sdmVkVHlw
ZS5pc1ZhbGlkQmluZGluZygpKSB7CiAJCQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGUuaXNDb21w
YXRpYmxlV2l0aChsZWZ0LCBzY29wZSk7CiAJCX0KLQkJLy8gMTUuMTMuMgotCQlmaW5hbCBNZXRo
b2RCaW5kaW5nIHNhbSA9IGxlZnQuZ2V0U2luZ2xlQWJzdHJhY3RNZXRob2QodGhpcy5lbmNsb3Np
bmdTY29wZSwgdHJ1ZSk7CisJCWlmICh0aGlzLnJlc29sdmVkVGFyZ2V0TWV0aG9kID09IG51bGwp
CisJCQl0aGlzLnJlc29sdmVkVGFyZ2V0TWV0aG9kID0gbmV3IEhhc2hNYXA8VHlwZUJpbmRpbmcs
IE1ldGhvZEJpbmRpbmc+KCk7CisJCU1ldGhvZEJpbmRpbmcgc2FtID0gdGhpcy5yZXNvbHZlZFRh
cmdldE1ldGhvZC5nZXQobGVmdCk7CisJCWlmICghdGhpcy5yZXNvbHZlZFRhcmdldE1ldGhvZC5j
b250YWluc0tleShsZWZ0KSkgeworCQkJLy8gMTUuMTMuMgorCQkJc2FtID0gbGVmdC5nZXRTaW5n
bGVBYnN0cmFjdE1ldGhvZCh0aGlzLmVuY2xvc2luZ1Njb3BlLCB0cnVlKTsKKwkJCXRoaXMucmVz
b2x2ZWRUYXJnZXRNZXRob2QucHV0KGxlZnQsIHNhbSk7CisJCX0KIAkJaWYgKHNhbSA9PSBudWxs
IHx8ICFzYW0uaXNWYWxpZEJpbmRpbmcoKSkKIAkJCXJldHVybiBmYWxzZTsKIAkJYm9vbGVhbiBp
c0NvbXBhdGlibGU7Cg==
</data>
<flag name="review"
          id="63723"
          type_id="6"
          status="?"
          setter="shankhba"
    />
          </attachment>
      

    </bug>

</bugzilla>