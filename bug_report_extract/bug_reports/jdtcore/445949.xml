<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>445949</bug_id>
          
          <creation_ts>2014-10-04 15:04:00 -0400</creation_ts>
          <short_desc>Lambda parameter not shadowing in nested scope producing non-existent compilation error</short_desc>
          <delta_ts>2014-12-09 09:49:55 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Mac OS X</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.5 M4</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Alexandros Karypidis">akarypid</reporter>
          <assigned_to name="shankha banerjee">shankhba</assigned_to>
          <cc>jarthana</cc>
    
    <cc>shankhba</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="63840"
          type_id="1"
          status="+"
          setter="jarthana"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2460034</commentid>
    <comment_count>0</comment_count>
    <who name="Alexandros Karypidis">akarypid</who>
    <bug_when>2014-10-04 15:04:55 -0400</bug_when>
    <thetext>I came across this after importing vert.x code into Eclipse Luna. Line 297 below causes JDT to report a &quot;Lambda expression&apos;s parameter future cannot redeclare another local variable defined in an enclosing scope.&quot; compilation error:

https://github.com/eclipse/vert.x/blob/master/vertx-core/src/main/java/io/vertx/core/http/impl/HttpClientImpl.java#L297

I think the compiler is confused by the nested enclosing scopes. The &quot;future&quot; parameter on line 297 is considered to collide with the declaration of future on line 286. I understand lambdas do not define a nested scope, but it seems like the JDK considers this not to be the case (the code compiles and runs fine with Oracle JDK 1.8.0_20).

One can easily reproduce this by using this snippet:

import java.util.function.Consumer;
public class LambdaScopeTest {
	void methodInFirstLevel(int y) {
		class Second {
			int t = y;
			Consumer&lt;Integer&gt; myConsumer1 = (z) -&gt; {
				System.out.println(&quot;z = &quot; + z);
				System.out.println(&quot;y = &quot; + y);
				System.out.println(&quot;t = &quot; + t);
			};
			Consumer&lt;Integer&gt; myConsumer2 = (y) -&gt; {
				System.out.println(&quot;y = &quot; + y);
				System.out.println(&quot;t = &quot; + t);
			};
		}
		new Second().myConsumer1.accept(10);
		new Second().myConsumer2.accept(20);
	}
	
	public static void main(String[] args) {
		new LambdaScopeTest().methodInFirstLevel(5);
	}
}

In the snippet above you will get the same behavior for parameter y in myConsumer2.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2460122</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-05 12:00:11 -0400</bug_when>
    <thetext>JLS8 page 142: It is a compile-time error if the name of a formal parameter is 
used to declare a new variable within the body of the method, constructor, or 
lambda expression, unless the new variable is declared within a class declaration 
contained by the method, constructor, or lambda expression</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471976</commentid>
    <comment_count>2</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-10-26 11:26:40 -0400</bug_when>
    <thetext>Will look into it during 4.5 M4.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2490199</commentid>
    <comment_count>3</comment_count>
      <attachid>248999</attachid>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-11-28 08:00:19 -0500</bug_when>
    <thetext>Created attachment 248999
Patch

Tests Results are all good.
Please review.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2490200</commentid>
    <comment_count>4</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-11-28 08:04:38 -0500</bug_when>
    <thetext>Shankha, what about comment #1? Doesn&apos;t it apply here? Please clarify.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2490209</commentid>
    <comment_count>5</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-11-28 08:17:07 -0500</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #4)

&gt; unless the new variable is declared within a class
&gt; declaration 
&gt; contained by the method, constructor, or lambda expression

This is the key part which we were missing.
The new variable is inside a class declaration contained by a method.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2490211</commentid>
    <comment_count>6</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-11-28 08:18:41 -0500</bug_when>
    <thetext>From the example in Comment 0:
Consumer&lt;Integer&gt; myConsumer2 = (y) -&gt; {

is inside the class Second declared withing the method methodInFirstLevel.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2490830</commentid>
    <comment_count>7</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-12-01 03:53:05 -0500</bug_when>
    <thetext>Shankha, the patch doesn&apos;t work for this case:

Consumer&lt;Integer&gt; myConsumer2 = (y) -&gt; {
				class Inner {
					Consumer&lt;Integer&gt; myConsumer3 = (y) -&gt; { 
						class InnerMost {
							Consumer&lt;Integer&gt; myConsumer3 = (y /*error*/) -&gt; {
							}; 
						}
					};
				}
				new Inner().myConsumer3.accept(10);
			};

Note the series of nested class declaration and lambdas. There&apos;s an error reported for the innermost lambda argument.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2491626</commentid>
    <comment_count>8</comment_count>
      <attachid>249096</attachid>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-12-02 09:08:43 -0500</bug_when>
    <thetext>Created attachment 249096
Patch

Test results are good.
The test case in Comment 7 succeeds with the new patch.
It has been added to the test suite.

My understanding of 
AbstractVariableDeclaration#hiddenVariableDepth
was incorrect.

e.g. 
class X {
   class Y {
      void foo() {
         int y;
         int y; // Error [2]
      }
   }  
}

hiddenVariableDepth for both the declarations would be 0. 
It does not matter if there within a inner class.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2492032</commentid>
    <comment_count>9</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-12-03 05:09:12 -0500</bug_when>
    <thetext>Patch looks good to me.

One minor comment, perhaps the two checks can be pulled under a common &quot;if&quot; clause, something like this?

if (localExists &amp;&amp; this.hiddenVariableDepth == 0) {
				if ((this.bits &amp; ASTNode.ShadowsOuterLocal) != 0 &amp;&amp; scope.isLambdaSubscope()) {
				} else {
				}
			} else {
                           ...

The patch is nice and short as is. So, I leave it to you to consider this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2492492</commentid>
    <comment_count>10</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-12-04 01:27:10 -0500</bug_when>
    <thetext>I have incorporated the changes in Comment 9.
Test results look good.
Released the fix via:
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=80b471fd651d608d69202a61f08b90dcc23280d3</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2494561</commentid>
    <comment_count>11</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-12-09 09:49:55 -0500</bug_when>
    <thetext>Verified for 4.5 M4 with build I20141208-0800</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>248999</attachid>
            <date>2014-11-28 08:00:00 -0500</date>
            <delta_ts>2014-12-02 09:08:43 -0500</delta_ts>
            <desc>Patch</desc>
            <filename>patch.patch</filename>
            <type>text/plain</type>
            <size>4851</size>
            <attacher name="shankha banerjee">shankhba</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0xhbWJkYUV4cHJlc3Np
b25zVGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhRXhwcmVz
c2lvbnNUZXN0LmphdmEKaW5kZXggZDczNDZhNy4uNDgxZWE4NCAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rl
c3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9j
b3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEK
QEAgLTU0OTYsNiArNTQ5Niw3OCBAQCBwdWJsaWMgdm9pZCB0ZXN0NDQ5MDYzZigpIHsKIAkJCSIi
LAogCQkJY3VzdG9tT3B0aW9ucyk7CiB9CisvL2h0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdz
L3Nob3dfYnVnLmNnaT9pZD00NDU5NDksIExhbWJkYSBwYXJhbWV0ZXIgbm90IHNoYWRvd2luZyBp
biBuZXN0ZWQgc2NvcGUgcHJvZHVjaW5nIG5vbi1leGlzdGVudCBjb21waWxhdGlvbiBlcnJvcgor
cHVibGljIHZvaWQgdGVzdDQ0NTk0OSgpIHsKKwl0aGlzLnJ1bkNvbmZvcm1UZXN0KAorCQluZXcg
U3RyaW5nW10geworCQkJIlguamF2YSIsIAorCQkJImltcG9ydCBqYXZhLnV0aWwuZnVuY3Rpb24u
Q29uc3VtZXI7XG4iICsKKwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCSIJdm9pZCBtZXRo
b2RJbkZpcnN0TGV2ZWwoaW50IHkpIHtcbiIgKworCQkJIgkJY2xhc3MgU2Vjb25kIHtcbiIgKwor
CQkJIgkJCWludCB0ID0geTtcbiIgKworCQkJIgkJCUNvbnN1bWVyPEludGVnZXI+IG15Q29uc3Vt
ZXIxID0gKHopIC0+IHtcbiIgKworCQkJIgkJCQlTeXN0ZW0ub3V0LnByaW50bG4oXCJ6ID0gXCIg
KyB6KTtcbiIgKworCQkJIgkJCQlTeXN0ZW0ub3V0LnByaW50bG4oXCJ5ID0gXCIgKyB5KTtcbiIg
KworCQkJIgkJCQlTeXN0ZW0ub3V0LnByaW50bG4oXCJ0ID0gXCIgKyB0KTtcbiIgKworCQkJIgkJ
CX07XG4iICsKKwkJCSIJCQlDb25zdW1lcjxJbnRlZ2VyPiBteUNvbnN1bWVyMiA9ICh5KSAtPiB7
XG4iICsKKwkJCSIJCQkJU3lzdGVtLm91dC5wcmludGxuKFwieSA9IFwiICsgeSk7XG4iICsKKwkJ
CSIJCQkJU3lzdGVtLm91dC5wcmludGxuKFwidCA9IFwiICsgdCk7XG4iICsKKwkJCSIJCQl9O1xu
IiArCisJCQkiCQkJdm9pZCBmb28oIGludCB5KSB7XG4iICsKKwkJCSIJCQkJU3lzdGVtLm91dC5w
cmludGxuKFwieSA9IFwiICsgeSk7XG4iICsKKwkJCSIJCQl9XG4iICsKKwkJCSIJCQljbGFzcyBU
aGlyZCB7XG4iICsKKwkJCSIJCQkJQ29uc3VtZXI8SW50ZWdlcj4gbXlDb25zdW1lcjMgPSAoeSkg
LT4ge1xuIiArCisJCQkiCQkJCQlTeXN0ZW0ub3V0LnByaW50bG4oXCJ5ID0gXCIgKyB5KTtcbiIg
KworCQkJIgkJCQl9O1xuIiArCisJCQkiCQkJfVxuIiArCisJCQkiCQkJdm9pZCBiYXIoaW50IHkp
IHtcbiIgKworCQkJIgkJCQluZXcgVGhpcmQoKS5teUNvbnN1bWVyMy5hY2NlcHQoeSk7XG4iICsK
KwkJCSIJCQl9XG4iICsKKwkJCSIgCQl9XG4iICsKKwkJCSIJCW5ldyBTZWNvbmQoKS5teUNvbnN1
bWVyMS5hY2NlcHQoMTApO1xuIiArCisJCQkiCQluZXcgU2Vjb25kKCkubXlDb25zdW1lcjIuYWNj
ZXB0KDIwKTtcbiIgKworCQkJIgkJbmV3IFNlY29uZCgpLmZvbygzMCk7XG4iICsKKwkJCSIJCW5l
dyBTZWNvbmQoKS5iYXIoNDApO1xuIiArCisJCQkiCQlcbiIgKworCQkJIgl9XG4iICsKKwkJCSIJ
cHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuIiArCisJCQkiCQluZXcg
WCgpLm1ldGhvZEluRmlyc3RMZXZlbCg1KTtcbiIgKworCQkJIgl9XG4iICsKKwkJCSJ9XG4iCisJ
fSwKKwkieiA9IDEwXG55ID0gNVxudCA9IDVcbnkgPSAyMFxudCA9IDVcbnkgPSAzMFxueSA9IDQw
Iik7Cit9CisvL2h0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00
NDU5NDksIExhbWJkYSBwYXJhbWV0ZXIgbm90IHNoYWRvd2luZyBpbiBuZXN0ZWQgc2NvcGUgcHJv
ZHVjaW5nIG5vbi1leGlzdGVudCBjb21waWxhdGlvbiBlcnJvcgorcHVibGljIHZvaWQgdGVzdDQ0
NTk0OWEoKSB7CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQki
WC5qYXZhIiwgCisJCQkiaW1wb3J0IGphdmEudXRpbC5mdW5jdGlvbi5Db25zdW1lcjtcbiIgKwor
CQkJImNsYXNzIFgge1xuIiArCisJCQkiCXZvaWQgZm9vKGludCB5KSB7XG4iICsKKwkJCSIJCUNv
bnN1bWVyPEludGVnZXI+IGMxID0gKHkpLT4ge307XG4iICsKKwkJCSIJfVxuIiArCisJCQkiCXZv
aWQgZm9vMigpIHtcbiIgKworCQkJIgkJaW50IHk7XG4iICsKKwkJCSIJCUNvbnN1bWVyPEludGVn
ZXI+IGMxID0gKHkpLT4ge307XG4iICsKKwkJCSIJfVxuIiArCisJCQkifVxuIiAKKwkJfSwKKwkJ
Ii0tLS0tLS0tLS1cbiIgKworCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDQpXG4iICsK
KwkJIglDb25zdW1lcjxJbnRlZ2VyPiBjMSA9ICh5KS0+IHt9O1xuIiArCisJCSIJICAgICAgICAg
ICAgICAgICAgICAgICAgXlxuIiArCisJCSJMYW1iZGEgZXhwcmVzc2lvbidzIHBhcmFtZXRlciB5
IGNhbm5vdCByZWRlY2xhcmUgYW5vdGhlciBsb2NhbCB2YXJpYWJsZSBkZWZpbmVkIGluIGFuIGVu
Y2xvc2luZyBzY29wZS4gXG4iICsKKwkJIi0tLS0tLS0tLS1cbiIgKworCQkiMi4gRVJST1IgaW4g
WC5qYXZhIChhdCBsaW5lIDgpXG4iICsKKwkJIglDb25zdW1lcjxJbnRlZ2VyPiBjMSA9ICh5KS0+
IHt9O1xuIiArCisJCSIJICAgICAgICAgICAgICAgICAgICAgICAgXlxuIiArCisJCSJMYW1iZGEg
ZXhwcmVzc2lvbidzIHBhcmFtZXRlciB5IGNhbm5vdCByZWRlY2xhcmUgYW5vdGhlciBsb2NhbCB2
YXJpYWJsZSBkZWZpbmVkIGluIGFuIGVuY2xvc2luZyBzY29wZS4gXG4iICsKKwkJIi0tLS0tLS0t
LS1cbiIpOworfQogcHVibGljIHN0YXRpYyBDbGFzcyB0ZXN0Q2xhc3MoKSB7CiAJcmV0dXJuIExh
bWJkYUV4cHJlc3Npb25zVGVzdC5jbGFzczsKIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQXJn
dW1lbnQuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvQXJndW1lbnQuamF2YQppbmRleCBjODQ3YTZjLi4yNzFi
YTQ3IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FyZ3VtZW50LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fz
dC9Bcmd1bWVudC5qYXZhCkBAIC0xLDUgKzEsNSBAQAogLyoqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioK
LSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4K
KyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxNCBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4K
ICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWlu
ZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhl
IEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBk
aXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKQEAgLTkwLDcgKzkwLDggQEAgcHVibGlj
IGNsYXNzIEFyZ3VtZW50IGV4dGVuZHMgTG9jYWxEZWNsYXJhdGlvbiB7CiAJCUJpbmRpbmcgZXhp
c3RpbmdWYXJpYWJsZSA9IHNjb3BlLmdldEJpbmRpbmcodGhpcy5uYW1lLCBCaW5kaW5nLlZBUklB
QkxFLCB0aGlzLCBmYWxzZSAvKmRvIG5vdCByZXNvbHZlIGhpZGRlbiBmaWVsZCovKTsKIAkJaWYg
KGV4aXN0aW5nVmFyaWFibGUgIT0gbnVsbCAmJiBleGlzdGluZ1ZhcmlhYmxlLmlzVmFsaWRCaW5k
aW5nKCkpewogCQkJZmluYWwgYm9vbGVhbiBsb2NhbEV4aXN0cyA9IGV4aXN0aW5nVmFyaWFibGUg
aW5zdGFuY2VvZiBMb2NhbFZhcmlhYmxlQmluZGluZzsKLQkJCWlmIChsb2NhbEV4aXN0cyAmJiAo
dGhpcy5iaXRzICYgQVNUTm9kZS5TaGFkb3dzT3V0ZXJMb2NhbCkgIT0gMCAmJiBzY29wZS5pc0xh
bWJkYVN1YnNjb3BlKCkpIHsKKwkJCWlmIChsb2NhbEV4aXN0cyAmJiAodGhpcy5iaXRzICYgQVNU
Tm9kZS5TaGFkb3dzT3V0ZXJMb2NhbCkgIT0gMCAmJiBzY29wZS5pc0xhbWJkYVN1YnNjb3BlKCkg
JiYKKwkJCQkJKChMb2NhbFZhcmlhYmxlQmluZGluZykgZXhpc3RpbmdWYXJpYWJsZSkuZGVjbGFy
YXRpb24uaGlkZGVuVmFyaWFibGVEZXB0aCA9PSB0aGlzLmhpZGRlblZhcmlhYmxlRGVwdGgpIHsK
IAkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5sYW1iZGFSZWRlY2xhcmVzQXJndW1lbnQodGhp
cyk7CiAJCQl9IGVsc2UgaWYgKGxvY2FsRXhpc3RzICYmIHRoaXMuaGlkZGVuVmFyaWFibGVEZXB0
aCA9PSAwKSB7CiAJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkucmVkZWZpbmVBcmd1bWVudCh0
aGlzKTsK
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>249096</attachid>
            <date>2014-12-02 09:08:00 -0500</date>
            <delta_ts>2014-12-03 05:02:17 -0500</delta_ts>
            <desc>Patch</desc>
            <filename>patch.patch</filename>
            <type>text/plain</type>
            <size>5191</size>
            <attacher name="shankha banerjee">shankhba</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0xhbWJkYUV4cHJlc3Np
b25zVGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhRXhwcmVz
c2lvbnNUZXN0LmphdmEKaW5kZXggZDczNDZhNy4uM2IxYzJiYyAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rl
c3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9j
b3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEK
QEAgLTU0OTYsNiArNTQ5Niw5MSBAQCBwdWJsaWMgdm9pZCB0ZXN0NDQ5MDYzZigpIHsKIAkJCSIi
LAogCQkJY3VzdG9tT3B0aW9ucyk7CiB9CisvL2h0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdz
L3Nob3dfYnVnLmNnaT9pZD00NDU5NDksIExhbWJkYSBwYXJhbWV0ZXIgbm90IHNoYWRvd2luZyBp
biBuZXN0ZWQgc2NvcGUgcHJvZHVjaW5nIG5vbi1leGlzdGVudCBjb21waWxhdGlvbiBlcnJvcgor
cHVibGljIHZvaWQgdGVzdDQ0NTk0OSgpIHsKKwl0aGlzLnJ1bkNvbmZvcm1UZXN0KAorCQluZXcg
U3RyaW5nW10geworCQkJIlguamF2YSIsCisJCQkiaW1wb3J0IGphdmEudXRpbC5mdW5jdGlvbi5D
b25zdW1lcjtcbiIgKworCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJIgl2b2lkIG1ldGhv
ZEluRmlyc3RMZXZlbChpbnQgeSkge1xuIiArCisJCQkiCQljbGFzcyBTZWNvbmQge1xuIiArCisJ
CQkiCQkJaW50IHQgPSB5O1xuIiArCisJCQkiCQkJQ29uc3VtZXI8SW50ZWdlcj4gbXlDb25zdW1l
cjEgPSAoeikgLT4ge1xuIiArCisJCQkiCQkJCVN5c3RlbS5vdXQucHJpbnRsbihcInogPSBcIiAr
IHopO1xuIiArCisJCQkiCQkJCVN5c3RlbS5vdXQucHJpbnRsbihcInkgPSBcIiArIHkpO1xuIiAr
CisJCQkiCQkJCVN5c3RlbS5vdXQucHJpbnRsbihcInQgPSBcIiArIHQpO1xuIiArCisJCQkiCQkJ
fTtcbiIgKworCQkJIgkJCUNvbnN1bWVyPEludGVnZXI+IG15Q29uc3VtZXIyID0gKHkpIC0+IHtc
biIgKworCQkJIgkJCQlTeXN0ZW0ub3V0LnByaW50bG4oXCJ5ID0gXCIgKyB5KTtcbiIgKworCQkJ
IgkJCQlTeXN0ZW0ub3V0LnByaW50bG4oXCJ0ID0gXCIgKyB0KTtcbiIgKworCQkJIgkJCX07XG4i
ICsKKwkJCSIJCQl2b2lkIGZvbyggaW50IHkpIHtcbiIgKworCQkJIgkJCQlTeXN0ZW0ub3V0LnBy
aW50bG4oXCJ5ID0gXCIgKyB5KTtcbiIgKworCQkJIgkJCX1cbiIgKworCQkJIgkJCWNsYXNzIFRo
aXJkIHtcbiIgKworCQkJIgkJCQlDb25zdW1lcjxJbnRlZ2VyPiBteUNvbnN1bWVyMyA9ICh5KSAt
PiB7XG4iICsKKwkJCSIJCQkJCVN5c3RlbS5vdXQucHJpbnRsbihcInkgPSBcIiArIHkpO1xuIiAr
CisJCQkiCQkJCX07XG4iICsKKwkJCSIJCQl9XG4iICsKKwkJCSIJCQl2b2lkIGJhcihpbnQgeSkg
e1xuIiArCisJCQkiCQkJCW5ldyBUaGlyZCgpLm15Q29uc3VtZXIzLmFjY2VwdCh5KTtcbiIgKwor
CQkJIgkJCX1cbiIgKworCQkJIiAJCX1cbiIgKworCQkJIgkJbmV3IFNlY29uZCgpLm15Q29uc3Vt
ZXIxLmFjY2VwdCgxMCk7XG4iICsKKwkJCSIJCW5ldyBTZWNvbmQoKS5teUNvbnN1bWVyMi5hY2Nl
cHQoMjApO1xuIiArCisJCQkiCQluZXcgU2Vjb25kKCkuZm9vKDMwKTtcbiIgKworCQkJIgkJbmV3
IFNlY29uZCgpLmJhcig0MCk7XG4iICsKKwkJCSIJCVxuIiArCisJCQkiCX1cbiIgKworCQkJIgl2
b2lkIGZvbygpIHtcbiIgKworCQkJIiAgCQlDb25zdW1lcjxJbnRlZ2VyPiBteUNvbnN1bWVyMiA9
ICh5KSAtPiB7XG4iICsKKwkJCSIJCWNsYXNzIElubmVyIHtcbiIgKworCQkJIgkgIAlDb25zdW1l
cjxJbnRlZ2VyPiBteUNvbnN1bWVyNCA9ICh5KSAtPiB7IFxuIiArCisJCQkiCQljbGFzcyBJbm5l
ck1vc3Qge1xuIiArCisJCQkiCQlDb25zdW1lcjxJbnRlZ2VyPiBteUNvbnN1bWVyMyA9ICh5IC8q
ZXJyb3Igd2l0aG91dCBmaXgqLykgLT4ge307XG4iICsKKwkJCSIJCX1cbiIgKworCQkJIgkgIAl9
O1xuIiArCisJCQkiCQl9XG4iICsKKwkJCSIJCW5ldyBJbm5lcigpLm15Q29uc3VtZXI0LmFjY2Vw
dCgxMCk7XG4iICsKKwkJCSIJfTtcbiIgKworCQkJIgl9XG4iICsKKwkJCSIJcHVibGljIHN0YXRp
YyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuIiArCisJCQkiCQluZXcgWCgpLm1ldGhvZElu
Rmlyc3RMZXZlbCg1KTtcbiIgKworCQkJIgkJbmV3IFgoKS5mb28oKTtcbiIgKworCQkJIgl9XG4i
ICsKKwkJCSJ9XG4iCisJfSwKKwkieiA9IDEwXG55ID0gNVxudCA9IDVcbnkgPSAyMFxudCA9IDVc
bnkgPSAzMFxueSA9IDQwIik7Cit9CisvL2h0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3No
b3dfYnVnLmNnaT9pZD00NDU5NDksIExhbWJkYSBwYXJhbWV0ZXIgbm90IHNoYWRvd2luZyBpbiBu
ZXN0ZWQgc2NvcGUgcHJvZHVjaW5nIG5vbi1leGlzdGVudCBjb21waWxhdGlvbiBlcnJvcgorcHVi
bGljIHZvaWQgdGVzdDQ0NTk0OWEoKSB7CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBT
dHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJpbXBvcnQgamF2YS51dGlsLmZ1bmN0aW9uLkNv
bnN1bWVyO1xuIiArCisJCQkiY2xhc3MgWCB7XG4iICsKKwkJCSIJdm9pZCBmb28oaW50IHkpIHtc
biIgKworCQkJIgkJQ29uc3VtZXI8SW50ZWdlcj4gYzEgPSAoeSktPiB7fTtcbiIgKworCQkJIgl9
XG4iICsKKwkJCSIJdm9pZCBmb28yKCkge1xuIiArCisJCQkiCQlpbnQgeTtcbiIgKworCQkJIgkJ
Q29uc3VtZXI8SW50ZWdlcj4gYzEgPSAoeSktPiB7fTtcbiIgKworCQkJIgl9XG4iICsKKwkJCSJ9
XG4iCisJCX0sCisJCSItLS0tLS0tLS0tXG4iICsKKwkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQg
bGluZSA0KVxuIiArCisJCSIJQ29uc3VtZXI8SW50ZWdlcj4gYzEgPSAoeSktPiB7fTtcbiIgKwor
CQkiCSAgICAgICAgICAgICAgICAgICAgICAgIF5cbiIgKworCQkiTGFtYmRhIGV4cHJlc3Npb24n
cyBwYXJhbWV0ZXIgeSBjYW5ub3QgcmVkZWNsYXJlIGFub3RoZXIgbG9jYWwgdmFyaWFibGUgZGVm
aW5lZCBpbiBhbiBlbmNsb3Npbmcgc2NvcGUuIFxuIiArCisJCSItLS0tLS0tLS0tXG4iICsKKwkJ
IjIuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA4KVxuIiArCisJCSIJQ29uc3VtZXI8SW50ZWdl
cj4gYzEgPSAoeSktPiB7fTtcbiIgKworCQkiCSAgICAgICAgICAgICAgICAgICAgICAgIF5cbiIg
KworCQkiTGFtYmRhIGV4cHJlc3Npb24ncyBwYXJhbWV0ZXIgeSBjYW5ub3QgcmVkZWNsYXJlIGFu
b3RoZXIgbG9jYWwgdmFyaWFibGUgZGVmaW5lZCBpbiBhbiBlbmNsb3Npbmcgc2NvcGUuIFxuIiAr
CisJCSItLS0tLS0tLS0tXG4iKTsKK30KIHB1YmxpYyBzdGF0aWMgQ2xhc3MgdGVzdENsYXNzKCkg
ewogCXJldHVybiBMYW1iZGFFeHByZXNzaW9uc1Rlc3QuY2xhc3M7CiB9CmRpZmYgLS1naXQgYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvYXN0L0FyZ3VtZW50LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FyZ3VtZW50LmphdmEKaW5kZXgg
Yzg0N2E2Yy4uZTgxZTU3YiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Bcmd1bWVudC5qYXZhCisr
KyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hc3QvQXJndW1lbnQuamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTMgSUJNIENvcnBvcmF0aW9u
IGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTQgSUJNIENvcnBvcmF0aW9u
IGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRo
ZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhl
IHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29t
cGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC05MCw3ICs5
MCw4IEBAIHB1YmxpYyBjbGFzcyBBcmd1bWVudCBleHRlbmRzIExvY2FsRGVjbGFyYXRpb24gewog
CQlCaW5kaW5nIGV4aXN0aW5nVmFyaWFibGUgPSBzY29wZS5nZXRCaW5kaW5nKHRoaXMubmFtZSwg
QmluZGluZy5WQVJJQUJMRSwgdGhpcywgZmFsc2UgLypkbyBub3QgcmVzb2x2ZSBoaWRkZW4gZmll
bGQqLyk7CiAJCWlmIChleGlzdGluZ1ZhcmlhYmxlICE9IG51bGwgJiYgZXhpc3RpbmdWYXJpYWJs
ZS5pc1ZhbGlkQmluZGluZygpKXsKIAkJCWZpbmFsIGJvb2xlYW4gbG9jYWxFeGlzdHMgPSBleGlz
dGluZ1ZhcmlhYmxlIGluc3RhbmNlb2YgTG9jYWxWYXJpYWJsZUJpbmRpbmc7Ci0JCQlpZiAobG9j
YWxFeGlzdHMgJiYgKHRoaXMuYml0cyAmIEFTVE5vZGUuU2hhZG93c091dGVyTG9jYWwpICE9IDAg
JiYgc2NvcGUuaXNMYW1iZGFTdWJzY29wZSgpKSB7CisJCQlpZiAobG9jYWxFeGlzdHMgJiYgKHRo
aXMuYml0cyAmIEFTVE5vZGUuU2hhZG93c091dGVyTG9jYWwpICE9IDAgJiYgc2NvcGUuaXNMYW1i
ZGFTdWJzY29wZSgpICYmCisJCQkJCXRoaXMuaGlkZGVuVmFyaWFibGVEZXB0aCA9PSAwKSB7CiAJ
CQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkubGFtYmRhUmVkZWNsYXJlc0FyZ3VtZW50KHRoaXMp
OwogCQkJfSBlbHNlIGlmIChsb2NhbEV4aXN0cyAmJiB0aGlzLmhpZGRlblZhcmlhYmxlRGVwdGgg
PT0gMCkgewogCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLnJlZGVmaW5lQXJndW1lbnQodGhp
cyk7Cg==
</data>

          </attachment>
      

    </bug>

</bugzilla>