<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>425203</bug_id>
          
          <creation_ts>2014-01-09 10:58:00 -0500</creation_ts>
          <short_desc>[compiler][1.7][inference] ECJ rejects valid code using bounded wildcards</short_desc>
          <delta_ts>2015-03-18 02:58:35 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.5 M6</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Craig Motlin">craig.motlin</reporter>
          <assigned_to name="Sasikanth Bharadwaj">saammana</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>manpalat</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="64214"
          type_id="1"
          status="+"
          setter="stephan.herrmann"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2347544</commentid>
    <comment_count>0</comment_count>
    <who name="Craig Motlin">craig.motlin</who>
    <bug_when>2014-01-09 10:58:21 -0500</bug_when>
    <thetext>This issue seems similar to https://bugs.eclipse.org/bugs/show_bug.cgi?id=415981, but I&apos;m not sure if it&apos;s identical.

javac compiles this valid Java code.

    public interface MyFunction&lt;Input, Output&gt;
    {
        Output apply(Input input);
    }
    
    public &lt;Input, Output&gt; List&lt;Output&gt; wrap(MyFunction&lt;? super Input, ? extends Output&gt; function, Input input)
    {
        return Arrays.asList(function.apply(input));
    }

ecj rejects it with &quot;Type mismatch: cannot convert from List&lt;capture#2-of ? extends Output&gt; to List&lt;Output&gt;&quot;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2347558</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-09 11:17:38 -0500</bug_when>
    <thetext>Interestingly, in branch BETA_JAVA8 this example compiles fine.

This *could* mean, we should do the same also in 1.7, but we&apos;d need to check the spec, to see how the inference should find the correct type solution.
One thing is for sure: once we&apos;ve inferred 
List&lt;capture#2-of ? extends Output&gt; the incompatibility is inevitable.

Success to type this in 1.8 might indeed be resulting from better leveraging the expected type during inference.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2450115</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-10 22:49:33 -0400</bug_when>
    <thetext>Here is a fuller test case:

import java.util.Arrays;
import java.util.List;

interface MyFunction&lt;Input, Output&gt; {
	Output apply(Input input);
}

public class X {
	public &lt;Input, Output&gt; List&lt;Output&gt; wrap(MyFunction&lt;? super Input, ? extends Output&gt; function, Input input) {
		return Arrays.asList(function.apply(input));
	}
}

We compile this code in 1.8.

Javac 1.8 and 1.7 -&gt; compile OK.
javac 1.5, 1.6 -&gt; compile with unchecked warnings.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2487888</commentid>
    <comment_count>3</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2014-11-24 04:03:21 -0500</bug_when>
    <thetext>Please try to fix this for M4. Also a candidate for 4.4.2.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2491461</commentid>
    <comment_count>4</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-12-02 04:18:17 -0500</bug_when>
    <thetext>(In reply to comment #1)
&gt;
&gt; Success to type this in 1.8 might indeed be resulting from better leveraging the
&gt; expected type during inference.
Yes, that is exactly the case. At 1.7, in PGMB.inferFromArgumentTypes, when we do resolveSubstituteConstraints(), we substitute capture#2-of ? extends Output from the SUPER constraint and conclude that inference is complete because all type arguments are resolved. We do not proceed to inferFromExpectedType at all, where as at 1.8, we consider the expected type as part of invocation type inference. As an experiment, I excluded captures from this substitution and that works. However, that causes us to accept invalid code in a few cases. Now evaluating what&apos;s the best way to proceed. Stephan - some suggestions?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2491590</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-12-02 08:18:58 -0500</bug_when>
    <thetext>This is a difficult situation, so let&apos;s count the votes:

At 1.8 we all agree: it&apos;s a legal Java 8 program and all compilers accept it at 1.8.

In many situations this is indicative of what was intended also for 1.7-, but we know that with target typing, inference in 1.8 finds better solutions than at 1.7-. So in this case looking at 1.8 behavior doesn&apos;t really help.

We have indications that rejecting the program might be the correct application of JLS 7:
- inference for the invocation asList(..) has produced a valid result
  (valid meaning: all arguments have compatible types, no bounds violated)
- the return type after inference is List&lt;capture#2-of ? extends Output&gt;,
  which is not compatible to the required type List&lt;Output&gt;
=&gt; the return statement is not compatible with the declared return type.

ecj has rejected the program ever since 3.2, i.e., it&apos;s not a regression.

Hypothesis: javac 1.7- is the odd one out, no need to change ecj.

Risks involved:
- our implementation could possibly produce a less-then-optimal solution,
  JLS 7 could potentially call for better inference.

Completely 100% eliminating this risk is a hard task, I don&apos;t think anybody in the team is perfectly familiar with JLS 7 specification of inference. OTOH, from a quick glance I see no reason at all, how a type List&lt;Output&gt; could possibly enter the picture during inferFromArgumentTypes().

Additional hint: javac is known to be imprecise in its handling of captures during inference. From here it&apos;s an easy guess that javac simply and illegally dropped the capture also here, thus failing to see the incompatibility.

BTW: I do think that we have the same case as in bug 415981.

From all these I&apos;m leaning towards leaving ecj as it is, but there&apos;s perhaps one more aspect to the story ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2491592</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-12-02 08:21:40 -0500</bug_when>
    <thetext>(In reply to Dani Megert from comment #3)
&gt; Please try to fix this for M4. Also a candidate for 4.4.2.

Dani, can you share any reason for wanting this behavior to be changed?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2492341</commentid>
    <comment_count>7</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2014-12-03 12:19:48 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #6)
&gt; (In reply to Dani Megert from comment #3)
&gt; &gt; Please try to fix this for M4. Also a candidate for 4.4.2.
&gt; 
&gt; Dani, can you share any reason for wanting this behavior to be changed?

People having a working code base using javac and then switch to ECJ will be frustrated, and most likely not understand why we reject the code.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2493655</commentid>
    <comment_count>8</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-12-08 00:20:08 -0500</bug_when>
    <thetext>Moving to M5, solution with minimal impact needs to be thought out and implemented to change the existing behavior</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2511784</commentid>
    <comment_count>9</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2015-01-29 02:50:02 -0500</bug_when>
    <thetext>Patch under test, but causes several unexpected test failures, still working on improving the patch to reduce impact</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2517032</commentid>
    <comment_count>10</comment_count>
      <attachid>250701</attachid>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2015-02-11 03:04:36 -0500</bug_when>
    <thetext>Created attachment 250701
First patch that passes all tests</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2517035</commentid>
    <comment_count>11</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2015-02-11 03:07:05 -0500</bug_when>
    <thetext>(In reply to comment #8)
&gt; solution with minimal impact needs to be thought out and
&gt; implemented to change the existing behavior
Attached first cut patch that passes all tests and solves the problem. @Stephan, please review.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2519122</commentid>
    <comment_count>12</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2015-02-16 01:15:21 -0500</bug_when>
    <thetext>Setting the review flag, missed it earlier</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2525179</commentid>
    <comment_count>13</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-02-28 09:05:11 -0500</bug_when>
    <thetext>(In reply to Sasikanth Bharadwaj from comment #11)
&gt; (In reply to comment #8)
&gt; &gt; solution with minimal impact needs to be thought out and
&gt; &gt; implemented to change the existing behavior
&gt; Attached first cut patch that passes all tests and solves the problem.
&gt; @Stephan, please review.

This looks solidly engineered. Thanks.

I like the fact that the first 4 &quot;if&quot;s successfully avoid that any of our existing tests ever reach the inner block of code.

The check using mentionsAny() looks a bit like a heuristic. Can you share an example where this distinction is relevant? I&apos;m not saying a heuristic check is bad in this situation, just I would like to better understand how you arrived at it.

Similarly for the final check parameterCompatibilityLevel(): did you observe a &quot;false&quot; answer for some example? Is inferFromArgumentTypes() indeed capable of producing a solution with incompatible paramters?

At this point we may conclude, that the patch brings our 1.7-behavior closer to the behavior of javac7 and also closer to JLS8. While it seems to be a deviation from JLS7, it doesn&apos;t cause us to accept unsound programs. Most importantly, the risk of unintended impact regarding other programs is very small, indeed.

So, patch looks OK to me, I&apos;ll let you decide the final details, perhaps one or two more tests would be great.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2525360</commentid>
    <comment_count>14</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2015-03-02 02:30:55 -0500</bug_when>
    <thetext>(In reply to comment #13)
&gt; (In reply to Sasikanth Bharadwaj from comment #11)
&gt; &gt; (In reply to comment #8)
&gt; &gt; &gt; solution with minimal impact needs to be thought out and
&gt; &gt; &gt; implemented to change the existing behavior
&gt; &gt; Attached first cut patch that passes all tests and solves the problem.
&gt; &gt; @Stephan, please review.
&gt; 
&gt; This looks solidly engineered. Thanks.
&gt; 
Thanks
&gt; The check using mentionsAny() looks a bit like a heuristic. Can you share an
&gt; example where this distinction is relevant? I&apos;m not saying a heuristic check is
&gt; bad in this situation, just I would like to better understand how you arrived at
&gt; it.
In case of a method like &lt;T&gt; List&lt;T&gt; foo(T arg), the new return type based constraint would influence the type inferred for parameters as well.
GTT.test1255 is the example that is accepted  by eclipse while rejected by javac without this check

&gt; Similarly for the final check parameterCompatibilityLevel(): did you observe a
&gt; &quot;false&quot; answer for some example? Is inferFromArgumentTypes() indeed capable of
&gt; producing a solution with incompatible paramters?
&gt; 
GTT_test0929 is an example where this happens. The presence of the new constraint causes inference to pick up wrong result making the argument types incompatible</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2530409</commentid>
    <comment_count>15</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2015-03-12 05:00:59 -0400</bug_when>
    <thetext>resolved via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=2a1e455dd4c823fdae35f395f819afea5a811300. 
Sorry Stephan, released with out adding more tests as we are running out of time for M6. Will complete that later</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2533348</commentid>
    <comment_count>16</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2015-03-18 02:58:35 -0400</bug_when>
    <thetext>Verified for Eclipse Mars 4.5 M6 Build id: I20150317-2000</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>250701</attachid>
            <date>2015-02-11 03:04:00 -0500</date>
            <delta_ts>2015-02-11 03:04:36 -0500</delta_ts>
            <desc>First patch that passes all tests</desc>
            <filename>bug425203_firstcut.patch</filename>
            <type>text/plain</type>
            <size>4574</size>
            <attacher name="Sasikanth Bharadwaj">saammana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9v
cmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVn
cmVzc2lvblRlc3QuamF2YQppbmRleCBjMmUyMzdjLi4zMGM1ZDA2IDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25UZXN0LmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pk
dC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVzdC5q
YXZhCkBAIC01NzM3LDUgKzU3MzcsNDIgQEAKIAkJCSJjbGFzcyBUZXN0MjxFIGV4dGVuZHMgVGVz
dDE8RT4+e31cbiIKIAkJfSk7CiB9CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9z
aG93X2J1Zy5jZ2k/aWQ9NDI1MjAzLCBbY29tcGlsZXJdWzEuN11baW5mZXJlbmNlXSBFQ0ogcmVq
ZWN0cyB2YWxpZCBjb2RlIHVzaW5nIGJvdW5kZWQgd2lsZGNhcmRzIAorcHVibGljIHZvaWQgdGVz
dDQyNTIwMygpIHsKKwlTdHJpbmcgc291cmNlID0gCisJCQkiaW1wb3J0IGphdmEudXRpbC5BcnJh
eXM7XG4iICsgCisJCQkiaW1wb3J0IGphdmEudXRpbC5MaXN0O1xuIiArIAorCQkJImludGVyZmFj
ZSBNeUZ1bmN0aW9uPElucHV0LCBPdXRwdXQ+IHtcbiIgKyAKKwkJCSIJT3V0cHV0IGFwcGx5KElu
cHV0IGlucHV0KTtcbiIgKyAKKwkJCSJ9XG4iICsgCisJCQkicHVibGljIGNsYXNzIFRlc3Qge1xu
IiArIAorCQkJIglwdWJsaWMgPElucHV0LCBPdXRwdXQ+IExpc3Q8T3V0cHV0PiB3cmFwKE15RnVu
Y3Rpb248PyBzdXBlciBJbnB1dCwgPyBleHRlbmRzIE91dHB1dD4gZnVuY3Rpb24sIElucHV0IGlu
cHV0KSB7XG4iICsgCisJCQkiCQlyZXR1cm4gQXJyYXlzLmFzTGlzdChmdW5jdGlvbi5hcHBseShp
bnB1dCkpO1xuIiArIAorCQkJIgl9XG4iICsgCisJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWlu
KFN0cmluZ1tdIGFyZ3MpIHtcbiIgKyAKKwkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihcIkRvbmVc
Iik7XG4iICsgCisJCQkiCX1cbiIgKyAKKwkJCSJ9IjsKKwlpZiAodGhpcy5jb21wbGlhbmNlTGV2
ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV83KSB7CisJCXRoaXMucnVuTmVnYXRpdmVUZXN0
KAorCQkJbmV3IFN0cmluZ1tdIHsKKwkJCQkiVGVzdC5qYXZhIiwKKwkJCQlzb3VyY2UsCisJCQl9
LAorCQkJIi0tLS0tLS0tLS1cbiIgKworCQkJIjEuIFdBUk5JTkcgaW4gVGVzdC5qYXZhIChhdCBs
aW5lIDgpXG4iICsgCisJCQkiCXJldHVybiBBcnJheXMuYXNMaXN0KGZ1bmN0aW9uLmFwcGx5KGlu
cHV0KSk7XG4iICsgCisJCQkiCSAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5cbiIgKyAKKwkJCSJUeXBlIHNhZmV0eTogQSBnZW5lcmljIGFycmF5IG9mIGNhcHR1cmUj
Mi1vZiA/IGV4dGVuZHMgT3V0cHV0IGlzIGNyZWF0ZWQgZm9yIGEgdmFyYXJncyBwYXJhbWV0ZXJc
biIgKyAKKwkJCSItLS0tLS0tLS0tXG4iICsKKwkJCSIyLiBFUlJPUiBpbiBUZXN0LmphdmEgKGF0
IGxpbmUgOClcbiIgKworCQkJIglyZXR1cm4gQXJyYXlzLmFzTGlzdChmdW5jdGlvbi5hcHBseShp
bnB1dCkpO1xuIiArCisJCQkiCSAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5cbiIgKworCQkJIlR5cGUgbWlzbWF0Y2g6IGNhbm5vdCBjb252ZXJ0IGZyb20gTGlzdDxj
YXB0dXJlIzItb2YgPyBleHRlbmRzIE91dHB1dD4gdG8gTGlzdDxPdXRwdXQ+XG4iICsKKwkJCSIt
LS0tLS0tLS0tXG4iKTsKKwl9IGVsc2UgeworCQlydW5Db25mb3JtVGVzdChuZXcgU3RyaW5nW117
ICJUZXN0LmphdmEiLCBzb3VyY2UgfSwgIkRvbmUiKTsKKwl9Cit9CiB9CiAKZGlmZiAtLWdpdCBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9sb29rdXAvUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nLmphdmEgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvbG9va3VwL1BhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5qYXZhCmluZGV4
IGYzZjhkMGEuLjZjMjIxMTcgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUGFyYW1ldGVyaXpl
ZEdlbmVyaWNNZXRob2RCaW5kaW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9QYXJhbWV0ZXJp
emVkR2VuZXJpY01ldGhvZEJpbmRpbmcuamF2YQpAQCAtMTA3LDYgKzEwNywzNSBAQAogCQkJCW1l
dGhvZFN1YnN0aXR1dGUgPSBtZXRob2RTdWJzdGl0dXRlLmluZmVyRnJvbUV4cGVjdGVkVHlwZShz
Y29wZSwgaW5mZXJlbmNlQ29udGV4dCk7CiAJCQkJaWYgKG1ldGhvZFN1YnN0aXR1dGUgPT0gbnVs
bCkKIAkJCQkJcmV0dXJuIG51bGw7CisJCQl9IGVsc2UgaWYgKGNvbXBpbGVyT3B0aW9ucy5zb3Vy
Y2VMZXZlbCA9PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV83KSB7CisJCQkJLy8gYnVnIDQyNTIw
MyAtIGNvbnNpZGVyIGFkZGl0aW9uYWwgY29uc3RyYWludHMgdG8gY29uZm9ybSB0byBidWdneSBq
YXZhYyBiZWhhdmlvcgorCQkJCWlmIChtZXRob2RTdWJzdGl0dXRlLnJldHVyblR5cGUgIT0gVHlw
ZUJpbmRpbmcuVk9JRCkgeworCQkJCQlUeXBlQmluZGluZyBleHBlY3RlZFR5cGUgPSBpbnZvY2F0
aW9uU2l0ZS5pbnZvY2F0aW9uVGFyZ2V0VHlwZSgpOworCQkJCQkvLyBJbiBjYXNlIG9mIGEgbWV0
aG9kIGxpa2UgPFQ+IExpc3Q8VD4gZm9vKFQgYXJnKSwgc29sdXRpb24gYmFzZWQgb24gcmV0dXJu
IHR5cGUKKwkJCQkJLy8gc2hvdWxkIG5vdCBiZSBwcmVmZXJyZWQgdnMgc29sdXRpb24gYmFzZWQg
b24gcGFyYW1ldGVyIHR5cGVzLCBzbyBkbyBub3QgYXR0ZW1wdAorCQkJCQkvLyB0byB1c2UgcmV0
dXJuIHR5cGUgYmFzZWQgaW5mZXJlbmNlIGluIHRoaXMgY2FzZQorIAkJCQkJaWYgKGV4cGVjdGVk
VHlwZSAhPSBudWxsICYmICFvcmlnaW5hbE1ldGhvZC5yZXR1cm5UeXBlLm1lbnRpb25zQW55KG9y
aWdpbmFsTWV0aG9kLnBhcmFtZXRlcnMsIC0xKSkgeworCQkJCQkJVHlwZUJpbmRpbmcgdW5jYXB0
dXJlZCA9IG1ldGhvZFN1YnN0aXR1dGUucmV0dXJuVHlwZS51bmNhcHR1cmUoc2NvcGUpOworCQkJ
CQkJaWYgKCFtZXRob2RTdWJzdGl0dXRlLnJldHVyblR5cGUuaXNDb21wYXRpYmxlV2l0aChleHBl
Y3RlZFR5cGUpICYmCisJCQkJCQkJCWV4cGVjdGVkVHlwZS5pc0NvbXBhdGlibGVXaXRoKHVuY2Fw
dHVyZWQpKSB7IAorCQkJCQkJCUluZmVyZW5jZUNvbnRleHQgb2xkQ29udGV4dCA9IGluZmVyZW5j
ZUNvbnRleHQ7CisJCQkJCQkJaW5mZXJlbmNlQ29udGV4dCA9IG5ldyBJbmZlcmVuY2VDb250ZXh0
KG9yaWdpbmFsTWV0aG9kKTsKKwkJCQkJCQkvLyBJbmNsdWRlIGFkZGl0aW9uYWwgY29uc3RyYWlu
dCBwZXJ0YWluaW5nIHRvIHRoZSBleHBlY3RlZCB0eXBlCisJCQkJCQkJb3JpZ2luYWxNZXRob2Qu
cmV0dXJuVHlwZS5jb2xsZWN0U3Vic3RpdHV0ZXMoc2NvcGUsIGV4cGVjdGVkVHlwZSwgaW5mZXJl
bmNlQ29udGV4dCwgVHlwZUNvbnN0YW50cy5DT05TVFJBSU5UX0VYVEVORFMpOworCQkJCQkJCVBh
cmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBzdWJzdGl0dXRlID0gaW5mZXJGcm9tQXJn
dW1lbnRUeXBlcyhzY29wZSwgb3JpZ2luYWxNZXRob2QsIGFyZ3VtZW50cywgcGFyYW1ldGVycywg
aW5mZXJlbmNlQ29udGV4dCk7CisJCQkJCQkJaWYgKHN1YnN0aXR1dGUgIT0gbnVsbCAmJiBzdWJz
dGl0dXRlLnJldHVyblR5cGUuaXNDb21wYXRpYmxlV2l0aChleHBlY3RlZFR5cGUpKSB7CisJCQkJ
CQkJCS8vIERvIG5vdCB1c2UgdGhlIG5ldyBzb2x1dGlvbiBpZiBpdCByZXN1bHRzIGluIGluY29t
cGF0aWJpbGl0aWVzIGluIHBhcmFtZXRlciB0eXBlcworCQkJCQkJCQlpZiAoKHNjb3BlLnBhcmFt
ZXRlckNvbXBhdGliaWxpdHlMZXZlbChzdWJzdGl0dXRlLCBhcmd1bWVudHMsIGZhbHNlKSkgPiBT
Y29wZS5OT1RfQ09NUEFUSUJMRSkgeworCQkJCQkJCQkJbWV0aG9kU3Vic3RpdHV0ZSA9IHN1YnN0
aXR1dGU7CisJCQkJCQkJCX0gZWxzZSB7CisJCQkJCQkJCQlpbmZlcmVuY2VDb250ZXh0ID0gb2xk
Q29udGV4dDsKKwkJCQkJCQkJfQorCQkJCQkJCX0gZWxzZSB7CisJCQkJCQkJCWluZmVyZW5jZUNv
bnRleHQgPSBvbGRDb250ZXh0OworCQkJCQkJCX0KKwkJCQkJCX0KKwkJCQkJfQkJCQkJCisJCQkJ
fQogCQkJfQogCQl9CiA=
</data>

          </attachment>
      

    </bug>

</bugzilla>