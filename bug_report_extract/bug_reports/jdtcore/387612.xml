<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>387612</bug_id>
          
          <creation_ts>2012-08-20 10:32:00 -0400</creation_ts>
          <short_desc>Unreachable catch block...exception is never thrown from the try</short_desc>
          <delta_ts>2012-09-17 23:19:22 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.2</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>4.3 M2</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Leon Finker">leonfin</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>leonfin</cc>
    
    <cc>Olivier_Thomann</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2150086</commentid>
    <comment_count>0</comment_count>
    <who name="Leon Finker">leonfin</who>
    <bug_when>2012-08-20 10:32:13 -0400</bug_when>
    <thetext>The following produces error in Eclipse, but no error happens from Oracle/Sun java compiler or from other IDEs:

interface A{
void authenticateUser(String username, String password)
                throws javax.naming.NameNotFoundException,
                       javax.naming.NamingException;        
}

interface B extends A{
void authenticateUser(String username, String password)
                throws javax.naming.NamingException;        
}

B b = new B() {
    @Override
    public void authenticateUser(String username, String password) {}
};
try {
    b.authenticateUser(&quot;&quot;, &quot;&quot;);
} catch (NameNotFoundException e) {
} 
catch(javax.naming.InterruptedNamingException e){
//Eclipse ERROR: Unreachable catch block for InterruptedNamingException. 
//This exception is never thrown from the try statement body
}

No problem when going through the base interface. I have 3rd party lib that has this hierarchy and throws specifications (which I&apos;ve simplified above). Not something I can change. But also there is no error from standard Java compiler or other IDEs.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2150197</commentid>
    <comment_count>1</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2012-08-20 13:38:44 -0400</bug_when>
    <thetext>Please provide a complete test case that reproduces this issue. This will help identifying what could be wrong.
Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2159390</commentid>
    <comment_count>2</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2012-09-12 20:38:03 -0400</bug_when>
    <thetext>Reducing severity. Might reassess once a test case is provided.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2159882</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-09-13 17:16:07 -0400</bug_when>
    <thetext>I can reproduce (in 4.2.0) given the example from comment 0. 
The method in B declares to throw NamingException, which is a common supertype of NameNotFoundException, InterruptedNamingException and others.

It seems that ECJ erroneously believes that catching NameNotFoundException already covers InterruptedNameingException, too, which is not true.

The bug does not occur when B is a class and no anonymous class is involved.

The bug also disappears when removing the redundant NameNotFoundException in the throws list in A.

Also: the redundant declaration must be in A, not in B to trigger the bug.

Another symptom of the bug is that a real error is not reported:
NamingException itself is not handled.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2159929</commentid>
    <comment_count>4</comment_count>
    <who name="Leon Finker">leonfin</who>
    <bug_when>2012-09-13 23:38:20 -0400</bug_when>
    <thetext>I provided the complete case. It simply needs to be copy/pasted into java source file in eclipse. Why else is needed? There is no 3rd party source. It&apos;s just simple standard java.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2159958</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-09-14 02:48:52 -0400</bug_when>
    <thetext>(In reply to comment #4)
&gt; I provided the complete case. It simply needs to be copy/pasted into java
&gt; source file in eclipse. Why else is needed? There is no 3rd party source.
&gt; It&apos;s just simple standard java.

Don&apos;t worry:

(In reply to comment #3)
&gt; I can reproduce (in 4.2.0) given the example from comment 0.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2160357</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-09-14 18:32:23 -0400</bug_when>
    <thetext>I have a patch under test, which fixes the problem based on the following understanding:

The root of the problem is the redundant throws clause in A
(avoiding this redundancy also avoids the problem, i.e., a workaround exists).

If method lookup passes through Scope.mostSpecificMethodBinding() and if shouldIntersectExceptions is set to true, a flat list of exceptions is filtered as to eliminate more general exceptions in favour of more specific ones.

This elimination is only correct for exceptions from different interfaces, like:

(A, B independent, E1 subtype of E):

A#foo throws E
B#foo throws E1

I extends A, B
-&gt; I#foo can only throw E1

But concluding from (A1 subtype of A)

A#foo throws E, E1
A1#foo throws E
C implements A1

that C#foo can only throw E1 is wrong.

My patch addresses this by splitting the filtering of exceptions inside Scope.mostSpecificMethodBinding():

(1) exceptions thrown from the same method are first filtered to favour more general exceptions (so we don&apos;t lose any exceptions that can possibly be thrown)

(2) only after that first step for filtering, eliminate by favouring more specific exceptions over more general ones.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2160358</commentid>
    <comment_count>7</comment_count>
      <attachid>221112</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-09-14 18:37:24 -0400</bug_when>
    <thetext>Created attachment 221112
patch under test

This patch fixes the problem and passes tests.compiler.regression.

More testing still to be done.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2160419</commentid>
    <comment_count>8</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-09-15 15:01:12 -0400</bug_when>
    <thetext>Tests &amp; fix have been released for 4.3 M2 via commit bfb7aec1d503f7f6d62839e0fbbc7dbce023c93b.

I briefly considered caching the result from exception filtering, because this function has O(n^2) effort, but experiments with compiling the jdt.ui plugin showed a total of only 18 executions of this method (not counting very early exits), all of which had n==2, so there wasn&apos;t really much time spent in this method, not enough to justify the memory for caching.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2161032</commentid>
    <comment_count>9</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-09-17 23:18:52 -0400</bug_when>
    <thetext>(In reply to comment #4)
&gt; I provided the complete case. It simply needs to be copy/pasted into java
&gt; source file in eclipse. Why else is needed? There is no 3rd party source.
&gt; It&apos;s just simple standard java.

Nope, comment#0 case needs slight fixing:

Here is a proper case:

//------
import javax.naming.NameNotFoundException;
import javax.naming.NamingException;

interface A {
	void authenticateUser(String username, String password)
			throws javax.naming.NameNotFoundException,
			javax.naming.NamingException;        
}

interface B extends A{
	void authenticateUser(String username, String password)
			throws javax.naming.NamingException;        
}

class C {

	public static void main(String[] args) {


		B b = new B() {
			public void authenticateUser(String username, String password) {}
		};
		try {
			b.authenticateUser(&quot;&quot;, &quot;&quot;);
		} catch (NameNotFoundException e) {
		} 
		catch(javax.naming.InterruptedNamingException e){
			
		} catch (NamingException e) {
			
			e.printStackTrace();
		}
	}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2161033</commentid>
    <comment_count>10</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-09-17 23:19:22 -0400</bug_when>
    <thetext>Verified for 4.3 M2 using Build id: I20120917-0800</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>221112</attachid>
            <date>2012-09-14 18:37:00 -0400</date>
            <delta_ts>2012-09-14 18:37:24 -0400</delta_ts>
            <desc>patch under test</desc>
            <filename>clipboard.txt</filename>
            <type>text/plain</type>
            <size>7164</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1RyeVN0YXRlbWVudFRl
c3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1RyeVN0YXRlbWVudFRlc3Qu
amF2YQppbmRleCAzZmZmN2RmLi4xNTdkYWQzIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGls
ZXIvcmVncmVzc2lvbi9UcnlTdGF0ZW1lbnRUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBp
bGVyL3JlZ3Jlc3Npb24vVHJ5U3RhdGVtZW50VGVzdC5qYXZhCkBAIC0yNSw3ICsyNSw3IEBACiBw
dWJsaWMgY2xhc3MgVHJ5U3RhdGVtZW50VGVzdCBleHRlbmRzIEFic3RyYWN0UmVncmVzc2lvblRl
c3QgewogCiBzdGF0aWMgewotLy8JVEVTVFNfTkFNRVMgPSBuZXcgU3RyaW5nW10geyAidGVzdDA3
NCIgfTsKKy8vCVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1tdIHsgInRlc3RCdWczODc2MTIiIH07
CiAvLwlURVNUU19OVU1CRVJTID0gbmV3IGludFtdIHsgNzQsIDc1IH07CiAvLwlURVNUU19SQU5H
RSA9IG5ldyBpbnRbXSB7IDExLCAtMSB9OwogfQpAQCAtNTk5MCw2ICs1OTkwLDEzNyBAQAogCQl9
KTsKIH0KIAorcHVibGljIHZvaWQgdGVzdEJ1ZzM4NzYxMigpIHsKKwlTdHJpbmcgc2VyaWFsVUlE
ID0gInByaXZhdGUgc3RhdGljIGZpbmFsIGxvbmcgc2VyaWFsVmVyc2lvblVJRD0xTDsiOworCXJ1
bk5lZ2F0aXZlVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJFLmphdmEiLAorCQkJInB1Ymxp
YyBjbGFzcyBFIGV4dGVuZHMgRXhjZXB0aW9uIHsiK3NlcmlhbFVJRCsifVxuIiwKKwkJCSJFMS5q
YXZhIiwKKwkJCSJwdWJsaWMgY2xhc3MgRTEgZXh0ZW5kcyBFIHsiK3NlcmlhbFVJRCsifVxuIiwK
KwkJCSJFMi5qYXZhIiwKKwkJCSJwdWJsaWMgY2xhc3MgRTIgZXh0ZW5kcyBFIHsiK3NlcmlhbFVJ
RCsifVxuIiwKKwkJCSJFMy5qYXZhIiwKKwkJCSJwdWJsaWMgY2xhc3MgRTMgZXh0ZW5kcyBFIHsi
K3NlcmlhbFVJRCsifVxuIiwKKwkJCSJBLmphdmEiLAorCQkJImludGVyZmFjZSBBIHtcbiIgKwor
CQkJIiAgICB2b2lkIGZvbyhTdHJpbmcgYTEsIFN0cmluZyBhMikgdGhyb3dzIEUxLCBFO1xuIiAr
CisJCQkifVxuIiwKKwkJCSJCLmphdmEiLAorCQkJImludGVyZmFjZSBCIGV4dGVuZHMgQSB7XG4i
ICsKKwkJCSIgICAgdm9pZCBmb28oU3RyaW5nIGExLCBTdHJpbmcgYTIpIHRocm93cyBFO1xuIiAr
CisJCQkifVxuIiwKKwkJCSJDbGllbnQuamF2YSIsCisJCQkicHVibGljIGNsYXNzIENsaWVudCB7
XG4iICsKKwkJCSIgICAgdm9pZCB0ZXN0KCkge1xuIiArCisJCQkiICAgICAgICBCIGIgPSBuZXcg
QigpIHtcbiIgKworCQkJIiAgICAgICAgICAgIHB1YmxpYyB2b2lkIGZvbyhTdHJpbmcgYTEsIFN0
cmluZyBhMikge31cbiIgKworCQkJIiAgICAgICAgfTtcbiIgKworCQkJIiAgICAgICAgdHJ5IHtc
biIgKworCQkJIiAgICAgICAgICAgIGIuZm9vKG51bGwsIG51bGwpO1xuIiArCisJCQkiICAgICAg
ICB9XG4iICsKKwkJCSIgICAgICAgIGNhdGNoIChFMSBlKSB7fVxuIiArCisJCQkiICAgICAgICBj
YXRjaCAoRTIgZSkge31cbiIgKworCQkJIiAgICB9XG4iICsKKwkJCSJ9XG4iLAorCQl9LAorCQki
LS0tLS0tLS0tLVxuIiArIAorCQkiMS4gRVJST1IgaW4gQ2xpZW50LmphdmEgKGF0IGxpbmUgNylc
biIgKyAKKwkJIgliLmZvbyhudWxsLCBudWxsKTtcbiIgKyAKKwkJIgleXl5eXl5eXl5eXl5eXl5e
XlxuIiArIAorCQkiVW5oYW5kbGVkIGV4Y2VwdGlvbiB0eXBlIEVcbiIgKyAKKwkJIi0tLS0tLS0t
LS1cbiIpOworfQorCitwdWJsaWMgdm9pZCB0ZXN0QnVnMzg3NjEyYigpIHsKKwlTdHJpbmcgc2Vy
aWFsVUlEID0gInByaXZhdGUgc3RhdGljIGZpbmFsIGxvbmcgc2VyaWFsVmVyc2lvblVJRD0xTDsi
OworCXJ1bk5lZ2F0aXZlVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJFLmphdmEiLAorCQkJ
InB1YmxpYyBjbGFzcyBFIGV4dGVuZHMgRXhjZXB0aW9uIHsiK3NlcmlhbFVJRCsifVxuIiwKKwkJ
CSJFMS5qYXZhIiwKKwkJCSJwdWJsaWMgY2xhc3MgRTEgZXh0ZW5kcyBFIHsiK3NlcmlhbFVJRCsi
fVxuIiwKKwkJCSJFMi5qYXZhIiwKKwkJCSJwdWJsaWMgY2xhc3MgRTIgZXh0ZW5kcyBFIHsiK3Nl
cmlhbFVJRCsifVxuIiwKKwkJCSJFMy5qYXZhIiwKKwkJCSJwdWJsaWMgY2xhc3MgRTMgZXh0ZW5k
cyBFIHsiK3NlcmlhbFVJRCsifVxuIiwKKwkJCSJBLmphdmEiLAorCQkJImludGVyZmFjZSBBIHtc
biIgKworCQkJIiAgICB2b2lkIGZvbyhTdHJpbmcgYTEsIFN0cmluZyBhMikgdGhyb3dzIEUsIEUx
O1xuIiArCisJCQkifVxuIiwKKwkJCSJCLmphdmEiLAorCQkJImludGVyZmFjZSBCIGV4dGVuZHMg
QSB7XG4iICsKKwkJCSIgICAgdm9pZCBmb28oU3RyaW5nIGExLCBTdHJpbmcgYTIpIHRocm93cyBF
O1xuIiArCisJCQkifVxuIiwKKwkJCSJDbGllbnQuamF2YSIsCisJCQkicHVibGljIGNsYXNzIENs
aWVudCB7XG4iICsKKwkJCSIgICAgdm9pZCB0ZXN0KCkge1xuIiArCisJCQkiICAgICAgICBCIGIg
PSBuZXcgQigpIHtcbiIgKworCQkJIiAgICAgICAgICAgIHB1YmxpYyB2b2lkIGZvbyhTdHJpbmcg
YTEsIFN0cmluZyBhMikge31cbiIgKworCQkJIiAgICAgICAgfTtcbiIgKworCQkJIiAgICAgICAg
dHJ5IHtcbiIgKworCQkJIiAgICAgICAgICAgIGIuZm9vKG51bGwsIG51bGwpO1xuIiArCisJCQki
ICAgICAgICB9XG4iICsKKwkJCSIgICAgICAgIGNhdGNoIChFMSBlKSB7fVxuIiArCisJCQkiICAg
ICAgICBjYXRjaCAoRTIgZSkge31cbiIgKworCQkJIiAgICB9XG4iICsKKwkJCSJ9XG4iLAorCQl9
LAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiMS4gRVJST1IgaW4gQ2xpZW50LmphdmEgKGF0IGxp
bmUgNylcbiIgKyAKKwkJIgliLmZvbyhudWxsLCBudWxsKTtcbiIgKyAKKwkJIgleXl5eXl5eXl5e
Xl5eXl5eXlxuIiArIAorCQkiVW5oYW5kbGVkIGV4Y2VwdGlvbiB0eXBlIEVcbiIgKyAKKwkJIi0t
LS0tLS0tLS1cbiIpOworfQorCitwdWJsaWMgdm9pZCB0ZXN0QnVnMzg3NjEyYygpIHsKKwlTdHJp
bmcgc2VyaWFsVUlEID0gInByaXZhdGUgc3RhdGljIGZpbmFsIGxvbmcgc2VyaWFsVmVyc2lvblVJ
RD0xTDsiOworCXJ1bkNvbmZvcm1UZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJIkUuamF2YSIs
CisJCQkicHVibGljIGNsYXNzIEUgZXh0ZW5kcyBFeGNlcHRpb24geyIrc2VyaWFsVUlEKyJ9XG4i
LAorCQkJIkUxLmphdmEiLAorCQkJInB1YmxpYyBjbGFzcyBFMSBleHRlbmRzIEUgeyIrc2VyaWFs
VUlEKyJ9XG4iLAorCQkJIkUyLmphdmEiLAorCQkJInB1YmxpYyBjbGFzcyBFMiBleHRlbmRzIEUg
eyIrc2VyaWFsVUlEKyJ9XG4iLAorCQkJIkUzLmphdmEiLAorCQkJInB1YmxpYyBjbGFzcyBFMyBl
eHRlbmRzIEUgeyIrc2VyaWFsVUlEKyJ9XG4iLAorCQkJIkEuamF2YSIsCisJCQkiaW50ZXJmYWNl
IEEge1xuIiArCisJCQkiICAgIHZvaWQgZm9vKFN0cmluZyBhMSwgU3RyaW5nIGEyKSB0aHJvd3Mg
RTEsIEU7XG4iICsKKwkJCSJ9XG4iLAorCQkJIkIuamF2YSIsCisJCQkiaW50ZXJmYWNlIEIgZXh0
ZW5kcyBBIHtcbiIgKworCQkJIiAgICB2b2lkIGZvbyhTdHJpbmcgYTEsIFN0cmluZyBhMikgdGhy
b3dzIEU7XG4iICsKKwkJCSJ9XG4iCisJCX0pOworCXJ1bk5lZ2F0aXZlVGVzdCgKKwkJbmV3IFN0
cmluZ1tdIHsKKwkJCSJDbGllbnQuamF2YSIsCisJCQkicHVibGljIGNsYXNzIENsaWVudCB7XG4i
ICsKKwkJCSIgICAgdm9pZCB0ZXN0KCkge1xuIiArCisJCQkiICAgICAgICBCIGIgPSBuZXcgQigp
IHtcbiIgKworCQkJIiAgICAgICAgICAgIHB1YmxpYyB2b2lkIGZvbyhTdHJpbmcgYTEsIFN0cmlu
ZyBhMikge31cbiIgKworCQkJIiAgICAgICAgfTtcbiIgKworCQkJIiAgICAgICAgdHJ5IHtcbiIg
KworCQkJIiAgICAgICAgICAgIGIuZm9vKG51bGwsIG51bGwpO1xuIiArCisJCQkiICAgICAgICB9
XG4iICsKKwkJCSIgICAgICAgIGNhdGNoIChFMSBlKSB7fVxuIiArCisJCQkiICAgICAgICBjYXRj
aCAoRTIgZSkge31cbiIgKworCQkJIiAgICB9XG4iICsKKwkJCSJ9XG4iLAorCQl9LAorCQkiLS0t
LS0tLS0tLVxuIiArIAorCQkiMS4gRVJST1IgaW4gQ2xpZW50LmphdmEgKGF0IGxpbmUgNylcbiIg
KyAKKwkJIgliLmZvbyhudWxsLCBudWxsKTtcbiIgKyAKKwkJIgleXl5eXl5eXl5eXl5eXl5eXlxu
IiArIAorCQkiVW5oYW5kbGVkIGV4Y2VwdGlvbiB0eXBlIEVcbiIgKyAKKwkJIi0tLS0tLS0tLS1c
biIsCisJCW51bGwsCisJCWZhbHNlLypzaG91bGRGbHVzaCovKTsKK30KKwogcHVibGljIHN0YXRp
YyBDbGFzcyB0ZXN0Q2xhc3MoKSB7CiAJcmV0dXJuIFRyeVN0YXRlbWVudFRlc3QuY2xhc3M7CiB9
CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Nj
b3BlLmphdmEKaW5kZXggZmFiYmY5Ny4uODQ5ZjUxYyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1
cC9TY29wZS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YQpAQCAtMzk3MywxMyAr
Mzk3MywxNCBAQAogCQkJCQkJCQkJCW1vc3RTcGVjaWZpY0V4Y2VwdGlvbnMgPSBjdXJyZW50LnRo
cm93bkV4Y2VwdGlvbnM7CiAJCQkJCQkJCQl9CiAJCQkJCQkJCQlpbnQgbW9zdFNwZWNpZmljTGVu
Z3RoID0gbW9zdFNwZWNpZmljRXhjZXB0aW9ucy5sZW5ndGg7Ci0JCQkJCQkJCQlpbnQgbmV4dExl
bmd0aCA9IG5leHQudGhyb3duRXhjZXB0aW9ucy5sZW5ndGg7CisJCQkJCQkJCQlSZWZlcmVuY2VC
aW5kaW5nW10gbmV4dEV4Y2VwdGlvbnMgPSBmaWx0ZXJFeGNlcHRpb25zKG5leHQudGhyb3duRXhj
ZXB0aW9ucyk7CisJCQkJCQkJCQlpbnQgbmV4dExlbmd0aCA9IG5leHRFeGNlcHRpb25zLmxlbmd0
aDsKIAkJCQkJCQkJCVNpbXBsZVNldCB0ZW1wID0gbmV3IFNpbXBsZVNldChtb3N0U3BlY2lmaWNM
ZW5ndGgpOwogCQkJCQkJCQkJYm9vbGVhbiBjaGFuZ2VkID0gZmFsc2U7CiAJCQkJCQkJCQluZXh0
RXhjZXB0aW9uIDogZm9yIChpbnQgdCA9IDA7IHQgPCBtb3N0U3BlY2lmaWNMZW5ndGg7IHQrKykg
ewogCQkJCQkJCQkJCVJlZmVyZW5jZUJpbmRpbmcgZXhjZXB0aW9uID0gbW9zdFNwZWNpZmljRXhj
ZXB0aW9uc1t0XTsKIAkJCQkJCQkJCQlmb3IgKGludCBzID0gMDsgcyA8IG5leHRMZW5ndGg7IHMr
KykgewotCQkJCQkJCQkJCQlSZWZlcmVuY2VCaW5kaW5nIG5leHRFeGNlcHRpb24gPSBuZXh0LnRo
cm93bkV4Y2VwdGlvbnNbc107CisJCQkJCQkJCQkJCVJlZmVyZW5jZUJpbmRpbmcgbmV4dEV4Y2Vw
dGlvbiA9IG5leHRFeGNlcHRpb25zW3NdOwogCQkJCQkJCQkJCQlpZiAoZXhjZXB0aW9uLmlzQ29t
cGF0aWJsZVdpdGgobmV4dEV4Y2VwdGlvbikpIHsKIAkJCQkJCQkJCQkJCXRlbXAuYWRkKGV4Y2Vw
dGlvbik7CiAJCQkJCQkJCQkJCQljb250aW51ZSBuZXh0RXhjZXB0aW9uOwpAQCAtNDAxMSw2ICs0
MDEyLDM3IEBACiAJCS8vIGlmIGFsbCBtb3JlU3BlY2lmaWMgbWV0aG9kcyBhcmUgZXF1YWwgdGhl
biBzZWUgaWYgZHVwbGljYXRlcyBleGlzdCBiZWNhdXNlIG9mIHN1YnN0aXR1dGlvbgogCQlyZXR1
cm4gbmV3IFByb2JsZW1NZXRob2RCaW5kaW5nKHZpc2libGVbMF0sIHZpc2libGVbMF0uc2VsZWN0
b3IsIHZpc2libGVbMF0ucGFyYW1ldGVycywgUHJvYmxlbVJlYXNvbnMuQW1iaWd1b3VzKTsKIAl9
CisJCisJcHJpdmF0ZSBSZWZlcmVuY2VCaW5kaW5nW10gZmlsdGVyRXhjZXB0aW9ucyhSZWZlcmVu
Y2VCaW5kaW5nW10gYWxsRXhjZXB0aW9ucykgeworCQlpbnQgbGVuZ3RoID0gYWxsRXhjZXB0aW9u
cy5sZW5ndGg7CisJCWlmIChsZW5ndGggPCAyKSByZXR1cm4gYWxsRXhjZXB0aW9uczsKKwkJUmVm
ZXJlbmNlQmluZGluZ1tdIGZpbHRlcmVkRXhjZXB0aW9ucyA9IG5ldyBSZWZlcmVuY2VCaW5kaW5n
W2xlbmd0aF07CisJCWludCBjb3VudCA9IDA7CisJCWN1cnJlbnRzOiBmb3IgKGludCBpID0gMDsg
aSA8IGxlbmd0aDsgaSsrKSB7CisJCQlSZWZlcmVuY2VCaW5kaW5nIGN1cnJlbnRFeGNlcHRpb24g
PSBhbGxFeGNlcHRpb25zW2ldOworCQkJZm9yIChpbnQgaiA9IDA7IGogPCBsZW5ndGg7IGorKykg
eworCQkJCWlmIChpID09IGopIGNvbnRpbnVlOworCQkJCWlmIChjdXJyZW50RXhjZXB0aW9uID09
IGFsbEV4Y2VwdGlvbnNbal0pIHsKKwkJCQkJLy8gZHVwbGljYXRlIHNhbWUgZXhjZXB0aW9uCisJ
CQkJCWlmIChpIDwgaikgCisJCQkJCQlicmVhazsgLy8gdGFrZSBvbmx5IHRoZSBmaXJzdCBvY2N1
cnJlbmNlCisJCQkJCWVsc2UKKwkJCQkJCWNvbnRpbnVlIGN1cnJlbnRzOworCQkJCX0KKwkJCQlp
ZiAoY3VycmVudEV4Y2VwdGlvbi5pc0NvbXBhdGlibGVXaXRoKGFsbEV4Y2VwdGlvbnNbal0pKSB7
CisJCQkJCWNvbnRpbnVlIGN1cnJlbnRzOworCQkJCX0KKwkJCX0KKwkJCWZpbHRlcmVkRXhjZXB0
aW9uc1tjb3VudCsrXSA9IGN1cnJlbnRFeGNlcHRpb247CisJCX0KKwkJaWYgKGNvdW50ICE9IGxl
bmd0aCkgeworCQkJUmVmZXJlbmNlQmluZGluZ1tdIHRtcCA9IG5ldyBSZWZlcmVuY2VCaW5kaW5n
W2NvdW50XTsKKwkJCVN5c3RlbS5hcnJheWNvcHkoZmlsdGVyZWRFeGNlcHRpb25zLCAwLCB0bXAs
ICAwLCBjb3VudCk7CisJCQlyZXR1cm4gdG1wOworCQl9CisJCXJldHVybiBhbGxFeGNlcHRpb25z
OworCX0KKwogCiAJcHVibGljIGZpbmFsIENsYXNzU2NvcGUgb3V0ZXJNb3N0Q2xhc3NTY29wZSgp
IHsKIAkJQ2xhc3NTY29wZSBsYXN0Q2xhc3NTY29wZSA9IG51bGw7
</data>

          </attachment>
      

    </bug>

</bugzilla>