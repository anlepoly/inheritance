<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>432682</bug_id>
          
          <creation_ts>2014-04-12 20:39:00 -0400</creation_ts>
          <short_desc>[1.8][compiler] Type mismatch error with lambda expression</short_desc>
          <delta_ts>2014-10-28 04:27:45 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3.2</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Mac OS X</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>DUPLICATE</resolution>
          <dup_id>444891</dup_id>
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.5 M3</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Toshihiro Nakamura">toshihiro.nakamura</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>denis.lepekhin</cc>
    
    <cc>gautier.desaintmartinlacaze</cc>
    
    <cc>hwaite</cc>
    
    <cc>jarthana</cc>
    
    <cc>markus_keller</cc>
    
    <cc>nikolaymetchev</cc>
    
    <cc>noopur_gupta</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
    
    <cc>timo.kinnunen</cc>
    
    <cc>tobias.gierke</cc>
          
          <votes>1</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2388393</commentid>
    <comment_count>0</comment_count>
    <who name="Toshihiro Nakamura">toshihiro.nakamura</who>
    <bug_when>2014-04-12 20:39:59 -0400</bug_when>
    <thetext>For the following code, Eclipse compiler says &apos;Type mismatch: cannot convert from Object to boolean&apos; and the compile is failed.

-------------------------------------------------------
package zzz;

import java.util.Optional;

public class Main {

	public static void main(String[] args) {
		Optional&lt;String&gt; userName = Optional.of(&quot;sa&quot;);
		Optional&lt;String&gt; password = Optional.of(&quot;sa&quot;);

		boolean isValid = userName.flatMap(u -&gt; {
			return password.map(p -&gt; {
				return u.equals(&quot;sa&quot;) &amp;&amp; p.equals(&quot;sa&quot;);
			});
		}).orElse(false);

		System.out.println(isValid);
	}
}
-------------------------------------------------------

But, with javac, I can compile it.

My environment:
- Kepler Service Release 2 Build id: 20140224-0627
- Eclipse JDT (Java Development Tools) Patch with Java 8 support (for Kepler SR2)	1.0.0.v20140317-1956
- Eclipse PDE (Plug-in Development Environment) Patch with Java 8 support (for Kepler SR2)	1.0.0.v20140317-1956</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2388419</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-04-13 05:38:06 -0400</bug_when>
    <thetext>Thanks for the report.

In addition to the error, we also issue this warning:

  (Recovered) Internal inconsistency detected during lambda shape analysis

which _could_ hint at the underlying (internal) cause.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2388455</commentid>
    <comment_count>2</comment_count>
    <who name="Toshihiro Nakamura">toshihiro.nakamura</who>
    <bug_when>2014-04-13 10:42:48 -0400</bug_when>
    <thetext>Hi, thanks for your reply.

I feel the warning message is not useful for me.

I can avoid the error, if I put an explicit type argument as followings.

----------------------------------------------
	return password.&lt;Boolean&gt; map(p -&gt; {
		return u.equals(&quot;sa&quot;) &amp;&amp; p.equals(&quot;sa&quot;);
	});
----------------------------------------------

But I hope the original code is compiled without any modification.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2388456</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-04-13 10:45:31 -0400</bug_when>
    <thetext>(In reply to Toshihiro Nakamura from comment #2)
&gt; Hi, thanks for your reply.
&gt; 
&gt; I feel the warning message is not useful for me.

Sorry, no, this comment was meant as an internal hint for debugging this issue :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2388544</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-04-14 03:04:39 -0400</bug_when>
    <thetext>Released unit test here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=35868a2bd44946bcaa16cc791e1a3f869f5cd6bb

Fix under investigation.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2391674</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-04-23 01:15:53 -0400</bug_when>
    <thetext>Sasi, please take a look. Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2406008</commentid>
    <comment_count>6</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-22 22:52:11 -0400</bug_when>
    <thetext>With not much time left in Luna, we will handle this in 4.5 or 4.4.1.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2435433</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-08-05 01:57:45 -0400</bug_when>
    <thetext>Ran out of time for M1, will look at M2.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2452264</commentid>
    <comment_count>8</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-09-16 06:27:05 -0400</bug_when>
    <thetext>Moving to M3</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2453438</commentid>
    <comment_count>9</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-17 23:11:07 -0400</bug_when>
    <thetext>As my list of open bugs targetted for M3 is down to just 3, I can take over this
one to allow Sasi to focus on lambda shape analysis issues. I also suspect this 
is a duplicate of https://bugs.eclipse.org/bugs/show_bug.cgi?id=439594 which is 
against my name.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454042</commentid>
    <comment_count>10</comment_count>
      <attachid>247224</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-19 03:35:13 -0400</bug_when>
    <thetext>Created attachment 247224
Patch under consideration.

This patch fixes a whole slew of duplicate open issues. I&apos;ll add tests for them
one by and one close.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454047</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-19 03:39:27 -0400</bug_when>
    <thetext>Stephan, please review. This patch addresses two problems. (a) We don&apos;t proceed
to infer invocation type if the target type contains inference variables. This 
would/could preclude constraints being captured between what inner returns and
what is the target type imposed by the outer consisting of (outer&apos;s) inference variables. (b) We are tossing out perfectly valid, fully cooked inner inference
that could be used to solve outer inference.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454050</commentid>
    <comment_count>12</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-19 03:44:11 -0400</bug_when>
    <thetext>*** Bug 433158 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454053</commentid>
    <comment_count>13</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-19 03:47:30 -0400</bug_when>
    <thetext>*** Bug 435187 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454057</commentid>
    <comment_count>14</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-19 03:49:26 -0400</bug_when>
    <thetext>*** Bug 435767 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454060</commentid>
    <comment_count>15</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-19 03:54:45 -0400</bug_when>
    <thetext>Passes all Java 8 tests, will run the entire suite now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454062</commentid>
    <comment_count>16</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-19 03:58:49 -0400</bug_when>
    <thetext>*** Bug 439594 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454068</commentid>
    <comment_count>17</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-19 04:08:07 -0400</bug_when>
    <thetext>*** Bug 442916 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454077</commentid>
    <comment_count>18</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-19 04:21:38 -0400</bug_when>
    <thetext>*** Bug 433852 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454092</commentid>
    <comment_count>19</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-19 04:42:33 -0400</bug_when>
    <thetext>*** Bug 442769 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454101</commentid>
    <comment_count>20</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-19 04:52:04 -0400</bug_when>
    <thetext>*** Bug 442769 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454108</commentid>
    <comment_count>21</comment_count>
      <attachid>247230</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-19 04:59:36 -0400</bug_when>
    <thetext>Created attachment 247230
Same patch with junit for duplicates.

So, I made a quick pass over all the open bugs. That is a total of 1 original + 7 duplicates.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454113</commentid>
    <comment_count>22</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-19 05:05:46 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #21)

&gt; So, I made a quick pass over all the open bugs. That is a total of 1
&gt; original + 7 duplicates.

1 original + 8 duplicates actually.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454131</commentid>
    <comment_count>23</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-19 06:22:31 -0400</bug_when>
    <thetext>
    - All JDT/Core tests are green.
    - I have verified that for new and remastered tests, the behavior matches
with the reference compiler 8u20.
    - Self-reviewed the code.

Capturing observations for posterity:

    - For the PGMB that corresponds to the map() call in
       
        return password.map((&lt;no type&gt; p) -&gt; {
            return (u.equals(&quot;sa&quot;) &amp;&amp; p.equals(&quot;sa&quot;));
        })

      target type is Optional&lt;U#0&gt; where U#0 is the inference variable from 
the outer PGMB corresponding to flatMap call.

    - The condition 
    if(haveProperTargetType||!invocation.getExpressionContext().definesTargetType())

can never be true for the map call until outer inference for flatMap finishes.

    - But outer inference cannot finish correctly if the inner&apos;s invocation type
inference does not build up the bounds set:

Type Bounds:
	TypeBound  U#0 :&gt; java.lang.Boolean
	TypeBound  U#0 = java.lang.Boolean
	TypeBound  U#0 &lt;: java.lang.Object
	TypeBound  U#0 :&gt; java.lang.Boolean
	TypeBound  U#0 = java.lang.Boolean
	Dependency U#0 = U#0
	TypeBound  U#0 &lt;: java.lang.Object
Capture Bounds:

by taking its target type into account.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454152</commentid>
    <comment_count>24</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-19 07:35:33 -0400</bug_when>
    <thetext>Hmm, I have my patch comparator set to ignore white space, A couple of harmless 
noise diffs due to indenting have made it to the patch. Sorry about that. 
I can clean it up before release.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454175</commentid>
    <comment_count>25</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-09-19 09:01:32 -0400</bug_when>
    <thetext>I&apos;m against a rushed decision.

In some of the related bugs which are reported to be &quot;fixed&quot; by this patch I have argued why the current behavior seems correct wrt JLS. 

Specific concerns regarding the patch:

- The change in InferenceContext18 looks unsafe to me, because it could possibly cause an inference variable from the target type to leak into the final decision, whereas inference variables MUST be kept local to inference. The final method in invocation type inference must indeed be final, no further updates will happen, so if it contains an inference variable that will be it. I don&apos;t easily see what would prevent the situation, given that the inner inference does not have outer inference variables in its list of inference variables that must be resolved.

- The change in ConstraintExpressionFormula is in conflict with JLS 18.2.1 bullet 3.2:
  &quot;If the expression is a class instance creation expression or a method invocation expression, the constraint reduces to the bound set B3 which would be used to determine the expression&apos;s invocation type when targeting T, as defined in 18.5.2.&quot;
The change &quot;cheats&quot; by using the bound set B4, which may already exist, but is not allowed to influence the reduction at 18.2.1.

Now, the large number of &quot;duplicates&quot; of this &quot;bug&quot; indicates that the real culprit in all this may indeed by JLS 18.2.1. Hence we should file a spec bug and seek a better understanding of what behavior is *intended*.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454182</commentid>
    <comment_count>26</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-19 09:07:45 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #25)
&gt; I&apos;m against a rushed decision.

Thanks for weighing in Stephan. I agree we should wait to study more. I&apos;ll 
continue to look at it and evaluate the solution in the light of your 
observations.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454187</commentid>
    <comment_count>27</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-19 09:16:39 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #25)

Now continuing the discussion for a solution in M3, 

&gt; - The change in InferenceContext18 looks unsafe to me, because it could
&gt; possibly cause an inference variable from the target type to leak into the
&gt; final decision, whereas inference variables MUST be kept local to inference.
&gt; The final method in invocation type inference must indeed be final, no
&gt; further updates will happen, so if it contains an inference variable that
&gt; will be it. I don&apos;t easily see what would prevent the situation, given that
&gt; the inner inference does not have outer inference variables in its list of
&gt; inference variables that must be resolved.

Isn&apos;t this just a matter of inspecting the 

TypeBinding[] solutions = getSolutions(original.typeVariables(), invocation, result);

solutions array to ensure every element is a proper type and failing to
create a final method PGMB ? 

&gt; - The change in ConstraintExpressionFormula is in conflict with JLS 18.2.1
&gt; bullet 3.2:

I&apos;ll take a look at this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454192</commentid>
    <comment_count>28</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-09-19 09:26:01 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #27)
&gt; (In reply to Stephan Herrmann from comment #25)
&gt; 
&gt; Now continuing the discussion for a solution in M3, 
&gt; 
&gt; &gt; - The change in InferenceContext18 looks unsafe to me, because it could
&gt; &gt; possibly cause an inference variable from the target type to leak into the
&gt; &gt; final decision, whereas inference variables MUST be kept local to inference.
&gt; &gt; The final method in invocation type inference must indeed be final, no
&gt; &gt; further updates will happen, so if it contains an inference variable that
&gt; &gt; will be it. I don&apos;t easily see what would prevent the situation, given that
&gt; &gt; the inner inference does not have outer inference variables in its list of
&gt; &gt; inference variables that must be resolved.
&gt; 
&gt; Isn&apos;t this just a matter of inspecting the 
&gt; 
&gt; TypeBinding[] solutions = getSolutions(original.typeVariables(), invocation,
&gt; result);
&gt; 
&gt; solutions array to ensure every element is a proper type and failing to
&gt; create a final method PGMB ? 

It seems the danger is already checked by a guard in BoundSet.addBound(), where we only invoke three.setInstantiation() if &quot;typeBinding.isProperType(true)&quot;. This should prevent *any* inference variables (local or &quot;foreign&quot;) from leaking into the solution.

This leaves me with just an uneasy feeling, why should we perform finalization of inner inference while still in the process of outer inference? Can this be triggered multiple times with different target types during outer inference (e.g. due to different candidates in some outer overload resolution)? That would be a conflict. After analysing such risks we may well conclude that this part is OK.

 
&gt; &gt; - The change in ConstraintExpressionFormula is in conflict with JLS 18.2.1
&gt; &gt; bullet 3.2:
&gt; 
&gt; I&apos;ll take a look at this.

Yep, that is the main open issue here.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454257</commentid>
    <comment_count>29</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-19 11:02:48 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #28)

&gt; It seems the danger is already checked by a guard in BoundSet.addBound(),
&gt; where we only invoke three.setInstantiation() if
&gt; &quot;typeBinding.isProperType(true)&quot;. This should prevent *any* inference
&gt; variables (local or &quot;foreign&quot;) from leaking into the solution.

Mid air collision, I was just typing up the same point :)

&gt; &gt; &gt; - The change in ConstraintExpressionFormula is in conflict with JLS 18.2.1
&gt; &gt; &gt; bullet 3.2:
&gt; &gt; 
&gt; &gt; I&apos;ll take a look at this.
&gt; 
&gt; Yep, that is the main open issue here.

15.12: 

A method invocation expression is a poly expression if all of the following 
are true:

[...]

 The method to be invoked, as determined by the following subsections, is 
generic (8.4.4) and has a return type that mentions at least one of 
the method&apos;s type parameters. Otherwise, the method invocation expression is 
a standalone expression.

So we can quibble over whether a fully instantiated PGMB is a poly expression
or not. It is &quot;the&quot; method to be &quot;invoked&quot; and it is not generic nor can it
mention any type parameters.

On another note, the unrelated section 15.25 has an explicit mention of 
pre-instantiation return type:

For the purpose of classifying a conditional, the following expressions are
boolean expressions:

[...]

A method invocation expression (15.12) for which the chosen most specific
method (15.12.2.5) has return type boolean or Boolean.
Note that, for a generic method, this is the type before instantiating the 
method&apos;s type arguments.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454430</commentid>
    <comment_count>30</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-19 23:37:38 -0400</bug_when>
    <thetext>Analysis:

(1) Should we proceed to infer invocation type of a nested generic method when
the target type is not a proper type ?

I think we must absolutely do so. Otherwise we will never discover certain constraints that are vital. Not proceeding is counter intuitive and I couldn&apos;t
also find any sanction for it in JLS.

In fact these passages in JLS:

(a)18.2.1:

&quot;The key piece of information to derive from a compatibility constraint 
involving a lambda expression is the set of bounds on inference variables 
appearing in the target function type&apos;s return type. This is crucial, because
functional interfaces are often generic, and many methods operating on these
types are generic, too.&quot;

[...]

In more complex cases, a result expression may be a poly expression - perhaps
even another lambda expression - and so the inference variable might be passed
through multiple constraint formulas with different target types before a 
bound is produced.&quot;

require/indicate/imply that we do.



Given the lambdas in comment#0 are not pertinent to applicability they are
excluded from 18.5.1 and so this passage can only be in the context of 
18.5.2

(b) 18.2.1:

&quot;Note that if the target type is an inference variable, or if the target 
type&apos;s parameter types contain inference variables, we produce false. During
invocation type inference (18.5.2), extra substitutions are performed in 
order to instantiate these inference variables&quot;

(2) Is the proposed change in ConstraintExpressionFormula.reduce() correct ? 

During the invocation type of inference of the outer call (flatMap()),
in InferenceContext18.inferInvocationType(), per 18.5.2 bullets:  

 For all i (1  i  k), if ei is not pertinent to applicability, 
C contains ei  Fi .
 For all i (1  i  k), additional constraints may be included, 
depending on the form of ei:
 If ei is a LambdaExpression, C contains LambdaExpression throws Fi .

we correctly add to C:

(&lt;no type&gt; u) -&gt;         {
          return password.map((&lt;no type&gt; p) -&gt; {
              return (u.equals(&quot;sa&quot;) &amp;&amp; p.equals(&quot;sa&quot;));
          });
} throws java.util.function.Function&lt;? super String,Optional&lt;U#0&gt;&gt;, 

(&lt;no type&gt; u) -&gt;         {
          return password.map((&lt;no type&gt; p) -&gt; {
              return (u.equals(&quot;sa&quot;) &amp;&amp; p.equals(&quot;sa&quot;));
          });
}  java.util.function.Function&lt;? super String,Optional&lt;U#0&gt;&gt;

In the following, I&apos;ll take for granted the soundness of the spec for
the enumerated process under the clause:

While C is not empty ...

and the fidelity of our implementation of it in InferenceContext18 
lines 404 - 438.

That grant then calls for this constraint:

password.map((&lt;no type&gt; p) -&gt; {
  return (u.equals(&quot;sa&quot;) &amp;&amp; p.equals(&quot;sa&quot;));
})  java.util.Optional&lt;U#0&gt;

to be reduced as requested by this call stack:

ConstraintExpressionFormula.reduce(InferenceContext18) line: 124	
BoundSet.reduceOneConstraint(InferenceContext18, ConstraintFormula) line: 752	
BoundSet.reduceOneConstraint(InferenceContext18, ConstraintFormula) line: 768	
InferenceContext18.inferInvocationType(BoundSet, TypeBinding, InvocationSite, MethodBinding) line: 435	

In this step (assuming we proceeded with invocation type inference in the
presence of a target type with inference variable)

password.map((&lt;no type&gt; p) -&gt; {
  return (u.equals(&quot;sa&quot;) &amp;&amp; p.equals(&quot;sa&quot;));
})

has a resolved type of Optional&lt;java.lang.Boolean&gt;. I think we should
use this value in reduction as is - without reaching for the shallow
original and doing:

inferInvocationApplicability(inferenceContext, method, argumentTypes, isDiamond, inferenceContext.inferenceKind);
					if (!inferPolyInvocationType(inferenceContext, invocation, this.right, method))
						return FALSE;

This is the key part ---&gt; 

For one thing, I don&apos;t see the JLS requiring it, for another, bindings have
been updated and the lambda is already resolved. Redoing it could and does
seem to produce strange and unwanted behavior ? Against the right target type
why then would we infer different bounds than

Type Bounds:
	TypeBound  U#0 = java.lang.Boolean
	TypeBound  U#0 &lt;: java.lang.Object
Capture Bounds:

We infer: 

Type Bounds:
	TypeBound  U#0 &lt;: java.lang.Object
	Dependency U#1 = U#0
	TypeBound  U#1 &lt;: java.lang.Object
Capture Bounds:

on HEAD.


I think this is because, the statements:

inferInvocationApplicability(inferenceContext, method, argumentTypes, isDiamond, inferenceContext.inferenceKind);
					if (!inferPolyInvocationType(inferenceContext, invocation, this.right, method))
						return FALSE;

for the inner method (map() call) is RUN DIRECTLY as a nested inference - 
there is an INTERVENING LAMBDA which also should introduce some 
inference variables that are necessary to solve the inner inference and 
we are bypassing the lambda and treating the map() call as though it were 
a direct argument of flatMap() call

  ==&gt; bug in ECJ: redone inner inference is lacking constraints from the
lambda&apos;s functional target type ==&gt; redone inner inference will not produce
correct results.

(3) Should we compile the comment#0 code ? Does the JLS requite it ?

I think we can safely conclude ECJ behavior is incorrect.

(4) Does proceeding to infer invocation type in the presence of improper
target type pose complications in overload resolution ? 

I share your uneasiness - I think it can.

For all poly expressions we should be operating on copies not just for
lambdas.

I think we should tackle this in a separate bug and not allow it to block
a fix to the current problem. We haven&apos;t hit it so far, we don&apos;t have a test
case for it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454431</commentid>
    <comment_count>31</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-19 23:57:30 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #30)
&gt; Analysis:

&gt; (2) Is the proposed change in ConstraintExpressionFormula.reduce() correct ? 

Even if we were to somehow accommodate the intervening lambda into the
(re)inference of the map() call, it cannot produce different constraints
since nothing is changed in the context. So we may as well use the fully
instantiated method&apos;s attributes.

==&gt; It should be a safe change.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454432</commentid>
    <comment_count>32</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-20 00:09:04 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #25)

&gt; - The change in ConstraintExpressionFormula is in conflict with JLS 18.2.1
&gt; bullet 3.2:
&gt;   &quot;If the expression is a class instance creation expression or a method
&gt; invocation expression, the constraint reduces to the bound set B3 which
&gt; would be used to determine the expression&apos;s invocation type when targeting
&gt; T, as defined in 18.5.2.&quot;

OK, here the point is we already know the expression&apos;s invocation type.
I think this bullet is really only applicable for directly nested argument
expressions. It seems to call for some reading between lines.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454568</commentid>
    <comment_count>33</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-09-21 12:55:57 -0400</bug_when>
    <thetext>Today I don&apos;t have time to answer on all details of comments 29 - 32, but to keep the discussion going I&apos;d like to say a general word about &quot;reading between the lines&quot;:


I fully acknowledge the need for interpretation at the *interface* between inference and other parts of resolution / type checking. 
Example:
 - 18.2.1: &quot;If T is a proper type, the constraint reduces to true if the expression is compatible in a loose invocation context with T ...&quot;
   -&gt; if the expression is poly, we have to &quot;invent&quot; some glue for determining this compatibility.
Other examples might be callers of LE.getResolvedCopyForInferenceTargeting(), which is never directly mandated by the spec, but necessary to connect the spec to our implementation.



For the inner workings of inference, however, specifically during reduction, I hold we should insist that complete lists of alternatives are indeed complete.

In particular, 18.2.1 fully specifies how a expression compatibility constraint is reduced to new constraints / bounds. This section doesn&apos;t answer the question &quot;what is the type of the expression&quot;. Hence, if it would be the case that we already knew its type, this doesn&apos;t let us bypass the derivation of new type constraints and bounds.

Put differently, the only way to reduce that expression compatibility constraint is by applying one of the bullets in 18.2.1. If we&apos;d conclude that any of the bullets does not apply, we&apos;d have to identify another bullet that does. I see now opt-out off 18.2.1.



I think we have sufficient evidence for convincing the spec lead that s.t. is missing in the spec exactly here, in which case discussion could terminate with great ease :)  I see good chances that the next spec version will explicitly support your interpretation ...

Srikanth, do you want to file a spec bug, or should I?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454602</commentid>
    <comment_count>34</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-21 19:41:24 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #33)
&gt; Today I don&apos;t have time to answer on all details of comments 29 - 32, but to
&gt; keep the discussion going I&apos;d like to say a general word 

Appreciated.

&gt; I fully acknowledge the need for interpretation at the *interface* between
&gt; inference and other parts of resolution / type checking. 

[...]

&gt; For the inner workings of inference, however, specifically during reduction,
&gt; I hold we should insist that complete lists of alternatives are indeed
&gt; complete.

[...]

&gt; Put differently, the only way to reduce that expression compatibility
&gt; constraint is by applying one of the bullets in 18.2.1. If we&apos;d conclude
&gt; that any of the bullets does not apply, we&apos;d have to identify another bullet
&gt; that does. 

All valid points. 

&gt; I think we have sufficient evidence for convincing the spec lead that s.t.
&gt; is missing in the spec exactly here, in which case discussion could
&gt; terminate with great ease :)  I see good chances that the next spec version
&gt; will explicitly support your interpretation ...
&gt; 
&gt; Srikanth, do you want to file a spec bug, or should I?

Let me have time until this week end - Given this is the first major problem
I am working on in part G, my understanding of the that section of the spec 
and our implementation is still evolving, making me revise some of the deductions, conclusions, claims and assertions I have been making - 

I think within a week I should have a solid grasp of the terrain and then
we can plan on approaching Oracle as the situation demands.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454605</commentid>
    <comment_count>35</comment_count>
      <attachid>247263</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-21 21:17:34 -0400</bug_when>
    <thetext>Created attachment 247263
Revised patch - conforms to JLS and solves the problem</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454606</commentid>
    <comment_count>36</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-21 21:37:39 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #34)

&gt; Let me have time until this week end

I am fairly certain we already have a happy ending to this episode.

Stephan, thanks for reviewing the new patch. 

(In reply to Stephan Herrmann from comment #25)

&gt; - The change in ConstraintExpressionFormula is in conflict with JLS 18.2.1
&gt; bullet 3.2:
&gt;   &quot;If the expression is a class instance creation expression or a method
&gt; invocation expression, the constraint reduces to the bound set B3 which
&gt; would be used to determine the expression&apos;s invocation type when targeting
&gt; T, as defined in 18.5.2.&quot;
&gt; The change &quot;cheats&quot; by using the bound set B4, which may already exist, but
&gt; is not allowed to influence the reduction at 18.2.1.

This concern is addressed. Now we adhere to the letter and spirit of this
clause and use b3 which already exists while targetting T.

I think the phrase &quot;would be&quot; in &quot;the bound set B3 which would be used&quot; implies 
a future action in one way of looking at it, but I think given it is an 
invariant computation against the same target type, the phrase &quot;should be used&quot;
would be (pun intended :)) a better choice.

Your concern in comment#28 regarding overload resolution still needs addressing
and can be tackled in a new ticket.

(In reply to Stephan Herrmann from comment #33)

&gt; For the inner workings of inference, however, specifically during reduction,
&gt; I hold we should insist that complete lists of alternatives are indeed
&gt; complete.
&gt; 
&gt; In particular, 18.2.1 fully specifies how a expression compatibility
&gt; constraint is reduced to new constraints / bounds. This section doesn&apos;t
&gt; answer the question &quot;what is the type of the expression&quot;. Hence, if it would
&gt; be the case that we already knew its type, this doesn&apos;t let us bypass the
&gt; derivation of new type constraints and bounds.

The new patch addresses these concerns too.

(In reply to Srikanth Sankaran from comment #30)

[...]

&gt; That grant then calls for this constraint:
&gt; 
&gt; password.map((&lt;no type&gt; p) -&gt; {
&gt;   return (u.equals(&quot;sa&quot;) &amp;&amp; p.equals(&quot;sa&quot;));
&gt; })  java.util.Optional&lt;U#0&gt;
&gt; 
&gt; to be reduced as requested by this call stack:

[...]

&gt; Against the right target type
&gt; why then would we infer different bounds than
&gt; 
&gt; Type Bounds:
&gt; 	TypeBound  U#0 = java.lang.Boolean
&gt; 	TypeBound  U#0 &lt;: java.lang.Object
&gt; Capture Bounds:
&gt; 
&gt; We infer: 
&gt; 
&gt; Type Bounds:
&gt; 	TypeBound  U#0 &lt;: java.lang.Object
&gt; 	Dependency U#1 = U#0
&gt; 	TypeBound  U#1 &lt;: java.lang.Object
&gt; Capture Bounds:
&gt; 
&gt; on HEAD.

&gt; I think this is because, the statements:
&gt; 
&gt; inferInvocationApplicability(inferenceContext, method, argumentTypes,
&gt; isDiamond, inferenceContext.inferenceKind);
&gt; 					if (!inferPolyInvocationType(inferenceContext, invocation, this.right,
&gt; method))
&gt; 						return FALSE;
&gt; 
&gt; for the inner method (map() call) is RUN DIRECTLY as a nested inference - 
&gt; there is an INTERVENING LAMBDA which also should introduce some 
&gt; inference variables that are necessary to solve the inner inference and 
&gt; we are bypassing the lambda and treating the map() call as though it were 
&gt; a direct argument of flatMap() call

For completeness and as an academic exercise, I&apos;ll analyze behavior on HEAD
to document why exactly we drop some constraints.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454613</commentid>
    <comment_count>37</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-21 23:56:58 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #36)
&gt; (In reply to Srikanth Sankaran from comment #34)
&gt; 
&gt; &gt; Let me have time until this week end
&gt; 
&gt; I am fairly certain we already have a happy ending to this episode.

Sigh.

Sorry for the avalanche of bugzilla updates on this and the flip flops.
I was completely thrown off scent by what looks like a wrong comment in 
our code :-(

// 4. bullet: assemble C:
Set&lt;ConstraintFormula&gt; c = new HashSet&lt;ConstraintFormula&gt;();
if (!addConstraintsToC(this.invocationArguments, c, method, this.inferenceKind))
    return false;
// 5. bullet: determine B3 from C
while (!c.isEmpty()) {
// Stuff
}

The comment says determine B3 from C, but looking at the spec, it should 
actually be 

// 5. bullet: determine B4 from C

My latest patch is based on the comment, so I think I am using B4, which does
not have official blessing.

So we are back to square one :(

If I assume that inferPolyInvocationType() computes B3 with fidelity and
that does not lead to solution, the only sane explanation would appear to 
be that there is a spec bug and javac does extra constitutional stuff.

This is the one last thing to check before giving up and contacting the spec
lead for clarifications.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454615</commentid>
    <comment_count>38</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-22 00:13:42 -0400</bug_when>
    <thetext>*** Bug 442446 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454616</commentid>
    <comment_count>39</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-22 00:31:03 -0400</bug_when>
    <thetext>Stephan, were there any further follow ups from Dan to your question here:

http://mail.openjdk.java.net/pipermail/lambda-spec-experts/2014-January/000495.html

beyond 

http://mail.openjdk.java.net/pipermail/lambda-spec-experts/2014-January/000498.html

which says: 

&quot;Yes, this is the crux of the problem.  The nested invocation&apos;s method reference is irrelevant to invocation typing in the spec, but javac is using it.  I believe javac captures the intended behavior; I&apos;m now revisiting the design discussions about this to figure out what&apos;s supposed to happen.&quot;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454620</commentid>
    <comment_count>40</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-22 01:17:20 -0400</bug_when>
    <thetext>http://mail.openjdk.java.net/pipermail/lambda-spec-experts/2014-February/000501.html

Looks like this was created and resolved:

https://bugs.openjdk.java.net/browse/JDK-8033488.

The wording change incorporated 

If ei is a poly class instance creation expression (15.9) or a poly method
invocation expression (15.12), C contains all the constraint formulas that
would appear in the set C generated by 18.5.2 when inferring the poly
expression&apos;s invocation type.

does not accord any special additional treatment for the return expressions
of intervening lambdas that are poly method invocation expressions themselves.

(In reply to Stephan Herrmann from comment #33)

&gt; Srikanth, do you want to file a spec bug, or should I?

I&apos;ll open up a line of communication with Dan Smith by mail first, let us see
if we have some ready clarifications.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454811</commentid>
    <comment_count>41</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-09-22 09:56:37 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #37)
&gt; I was completely thrown off scent by what looks like a wrong comment in 
&gt; our code :-(
&gt; 
&gt; // 4. bullet: assemble C:
&gt; Set&lt;ConstraintFormula&gt; c = new HashSet&lt;ConstraintFormula&gt;();
&gt; if (!addConstraintsToC(this.invocationArguments, c, method,
&gt; this.inferenceKind))
&gt;     return false;
&gt; // 5. bullet: determine B3 from C
&gt; while (!c.isEmpty()) {
&gt; // Stuff
&gt; }
&gt; 
&gt; The comment says determine B3 from C, but looking at the spec, it should 
&gt; actually be 
&gt; 
&gt; // 5. bullet: determine B4 from C

Sorry about that. I think there was a renumbering of &quot;B&quot; sets during the cleanup of the spec. Might have missed to update the comment. Yep, comments are code, too, and need maintenance, too ... Learning this the hard way every day anew.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454813</commentid>
    <comment_count>42</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-09-22 10:00:33 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #40)
&gt; https://bugs.openjdk.java.net/browse/JDK-8033488.
&gt; 
&gt; The wording change incorporated 
&gt; 
&gt; If ei is a poly class instance creation expression (15.9) or a poly method
&gt; invocation expression (15.12), C contains all the constraint formulas that
&gt; would appear in the set C generated by 18.5.2 when inferring the poly
&gt; expression&apos;s invocation type.

Thanks for digging this out: this sounds like the answer to me: we&apos;ll no longer be confined to B3 but we can use the full result of inner inference. Isn&apos;t that exactly what you were heading at?
!! :)

We really should install a listener on all JDK bugs of this level of relevance!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454816</commentid>
    <comment_count>43</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-22 10:07:31 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #42)
&gt; (In reply to Srikanth Sankaran from comment #40)
&gt; &gt; https://bugs.openjdk.java.net/browse/JDK-8033488.
&gt; &gt; 
&gt; &gt; The wording change incorporated 
&gt; &gt; 
&gt; &gt; If ei is a poly class instance creation expression (15.9) or a poly method
&gt; &gt; invocation expression (15.12), C contains all the constraint formulas that
&gt; &gt; would appear in the set C generated by 18.5.2 when inferring the poly
&gt; &gt; expression&apos;s invocation type.
&gt; 
&gt; Thanks for digging this out: this sounds like the answer to me: we&apos;ll no
&gt; longer be confined to B3 but we can use the full result of inner inference.
&gt; Isn&apos;t that exactly what you were heading at?
&gt; !! :)


Not sure, after this change, you are permitted to descend into directly nested
invocations. If there is an intervening lambda there is a dead end.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454821</commentid>
    <comment_count>44</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-09-22 10:11:55 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #42)
&gt; Thanks for digging this out: this sounds like the answer to me: we&apos;ll no
&gt; longer be confined to B3 but we can use the full result of inner inference.
&gt; Isn&apos;t that exactly what you were heading at?
&gt; !! :)

Sorry, this time I was to quick. We&apos;d need a change similar to this also in 18.2.1. ...

Seeing a related bug still open, things still seem to be in flux:
https://bugs.openjdk.java.net/browse/JDK-8052325

That one seems to be more relevant to our issue.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454898</commentid>
    <comment_count>45</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-22 11:37:29 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #44)

&gt; Sorry, this time I was to quick. We&apos;d need a change similar to this also in
&gt; 18.2.1. ...
&gt; 
&gt; Seeing a related bug still open, things still seem to be in flux:
&gt; https://bugs.openjdk.java.net/browse/JDK-8052325
&gt; 
&gt; That one seems to be more relevant to our issue.

More relevant, but still does not seem totally on target. Here is what I propose:

Later this week, I&apos;ll write up a detailed analysis capturing all the relevant
data and open up a discussion.

In the meantime, I would like to proceed with the fix we have - My argument in
favor being:

    - Type inference for the nested generic method that is one level removed
from the outer generic method by the interleaving lambda is performed against
an inference *variable* and there is a successful instantiation.

    - If the inner expression does not have a solution, we are going to fall
through and do what we do today anyway.

    - Many early adopters are running into this problem and looking at 
https://bugs.openjdk.java.net/browse/JDK-8052325, it looks could be a while
for resolution.

    - We are early in M3 and so that would allow us to discover any side effects
and such and respond suitably.

Any strong objections ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454906</commentid>
    <comment_count>46</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-22 11:45:30 -0400</bug_when>
    <thetext>Our test case looks very similar to the example on this spec bug that is still
open: https://bugs.openjdk.java.net/browse/JDK-8038747

There is an outline of the proposed wording - I&apos;ll prototype it to see if that
helps before proceeding with the plan to release the patch we already have.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2455070</commentid>
    <comment_count>47</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-09-22 18:40:18 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #46)
&gt; Our test case looks very similar to the example on this spec bug that is
&gt; still
&gt; open: https://bugs.openjdk.java.net/browse/JDK-8038747
&gt; 
&gt; There is an outline of the proposed wording - 

Yes, description and proposed wording look *very* promising for our case.

&gt; I&apos;ll prototype it to see if that helps 

Let me know if you have questions concerning the implementation ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2455571</commentid>
    <comment_count>48</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-23 22:16:30 -0400</bug_when>
    <thetext>I raised https://bugs.eclipse.org/bugs/show_bug.cgi?id=444891 to track the
specification change from our side.

Since I don&apos;t expect to get to this for at least a week or more, I have gone
ahead and released the experimental change per rationale in comment#45 here:
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=0492d8e41c1aba4d81d43f5d644f4506ed10c8ab

A couple of points are not documented yet and so here they are:

    - That we have the results of the inner inference is only because (a) I have
opened the gates to inferInvocationType() in the presence of target types with
inference variables. This change itself is safe as we have reasoned, but may
not be needed once the amended specification is implemented and in that case
can be pulled back. (b) it is also very much a side effect of our implementation.
LE.getResolvedCopy* calls during inference produce the result which we rely on
in this interim fix.

Reporters of this and its duplicates, please test the next weekly integration
build and report any persisting problems so I can address them well in time
for M3 in conjunction with https://bugs.eclipse.org/bugs/show_bug.cgi?id=444891</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2455572</commentid>
    <comment_count>49</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-23 22:18:10 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #25)
&gt; I&apos;m against a rushed decision.

Given how much oscillating discussion this produced, that was sound advice,
Thanks ! :)

(In reply to Stephan Herrmann from comment #47)

&gt; Yes, description and proposed wording look *very* promising for our case.
&gt; 
&gt; &gt; I&apos;ll prototype it to see if that helps 
&gt; 
&gt; Let me know if you have questions concerning the implementation ...

Thanks, I&apos;ll raise a review request once the implementation for https://bugs.eclipse.org/bugs/show_bug.cgi?id=444891 is ready.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2459279</commentid>
    <comment_count>50</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-02 11:57:51 -0400</bug_when>
    <thetext>While working on bug 444891 and bug 437444, it has become clear to me that the
&quot;work around&quot; fix released here, is not appropriate and the real solution is far
more involved. This is also getting in the way of a clean fix. As a result 
I am changing the resolution of this bug from being FIXED to DUPLICATE of bug 
444891 which is still open and under investigation to reflect the status properly.

I&apos;ll be reverting the patch shortly. Sorry for any inconvenience.

*** This bug has been marked as a duplicate of bug 444891 ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2459590</commentid>
    <comment_count>51</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-02 21:41:44 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #50)

&gt; I&apos;ll be reverting the patch shortly. Sorry for any inconvenience.

Reverted here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=f5884fa8b0573c548eaeabaa37cd99c51e41fd3b

Status reflects status already. This issue is still open, but tracked under
bug 444891.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472780</commentid>
    <comment_count>52</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-10-28 04:27:45 -0400</bug_when>
    <thetext>Verified for 4.5 M3 using I20141027-2000 build</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>247224</attachid>
            <date>2014-09-19 03:35:00 -0400</date>
            <delta_ts>2014-09-19 04:59:36 -0400</delta_ts>
            <desc>Patch under consideration.</desc>
            <filename>Patch.patch</filename>
            <type>text/plain</type>
            <size>8226</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3RfMV84LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmlj
c1JlZ3Jlc3Npb25UZXN0XzFfOC5qYXZhCmluZGV4IGY3ZjEzYzUuLmExZWRkNzMgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3Rf
MV84LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdy
ZXNzaW9uVGVzdF8xXzguamF2YQpAQCAtMzA0MiwxMiArMzA0Miw3IEBACiAJCQkiCX1cbiIgKyAK
IAkJCSJ9XG4iCiAJCX0sCi0JCSItLS0tLS0tLS0tXG4iICsgCi0JCSIxLiBFUlJPUiBpbiBDb2xs
ZWN0b3JzTWFwcy5qYXZhIChhdCBsaW5lIDIwKVxuIiArIAotCQkiCXAgLT4gcC5saHMuc3RyZWFt
KCkubWFwKHA6OmtlZXBpbmdSaHMpKS5jb2xsZWN0KFxuIiArIAotCQkiCSAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXG4iICsgCi0JCSJUaGUgbWV0aG9kIGNv
bGxlY3QoQ29sbGVjdG9yPD8gc3VwZXIgT2JqZWN0LEEsUj4pIGluIHRoZSB0eXBlIFN0cmVhbTxP
YmplY3Q+IGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRzIChDb2xsZWN0b3I8Q29s
bGVjdG9yc01hcHMuUGFpcjxTdHJpbmcsU3RyaW5nPixjYXB0dXJlIzMtb2YgPyxNYXA8U3RyaW5n
LExpc3Q8U3RyaW5nPj4+KVxuIiArIAotCQkiLS0tLS0tLS0tLVxuIik7CisJCSIiKTsKIH0KIHB1
YmxpYyB2b2lkIF90ZXN0QnVnNDMyNjI2KCkgewogCXJ1bkNvbmZvcm1UZXN0KApAQCAtMzMwNyw3
ICszMzAyLDYgQEAKIAkJCSJpbXBvcnQgamF2YS51dGlsLkxpc3Q7XG4iICsgCiAJCQkiaW1wb3J0
IGphdmEudXRpbC5NYXA7XG4iICsgCiAJCQkiaW1wb3J0IGphdmEudXRpbC5NYXAuRW50cnk7XG4i
ICsgCi0JCQkiaW1wb3J0IGphdmEudXRpbC5mdW5jdGlvbi5GdW5jdGlvbjtcbiIgKyAKIAkJCSJp
bXBvcnQgamF2YS51dGlsLnN0cmVhbS5Db2xsZWN0b3I7XG4iICsgCiAJCQkiaW1wb3J0IGphdmEu
dXRpbC5zdHJlYW0uU3RyZWFtO1xuIiArIAogCQkJIlxuIiArIApAQCAtMzMyOCwxMiArMzMyMiw3
IEBACiAJCQkiCX1cbiIgKyAKIAkJCSJ9XG4iCiAJCX0sCi0JCSItLS0tLS0tLS0tXG4iICsgCi0J
CSIxLiBFUlJPUiBpbiBFeHRyYWN0TG9jYWxMYW1iZGEuamF2YSAoYXQgbGluZSAyMilcbiIgKyAK
LQkJIgkpLmNvbGxlY3QoZ3JvdXBpbmdCeSk7XG4iICsgCi0JCSIJICBeXl5eXl5eXG4iICsgCi0J
CSJUaGUgbWV0aG9kIGNvbGxlY3QoQ29sbGVjdG9yPD8gc3VwZXIgT2JqZWN0LEEsUj4pIGluIHRo
ZSB0eXBlIFN0cmVhbTxPYmplY3Q+IGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRz
IChDb2xsZWN0b3I8TWFwLkVudHJ5PFN0cmluZyxTdHJpbmc+LGNhcHR1cmUjMS1vZiA/LE1hcDxT
dHJpbmcsTGlzdDxTdHJpbmc+Pj4pXG4iICsgCi0JCSItLS0tLS0tLS0tXG4iKTsKKwkJIiIpOwog
fQogcHVibGljIHZvaWQgdGVzdEJ1ZzQzNTc2NygpIHsKIAlydW5OZWdhdGl2ZVRlc3QoCkBAIC0z
Mzc4LDE3ICszMzY3LDcgQEAKIAkJCSIJfVxuIiArIAogCQkJIn1cbiIKIAkJfSwKLQkJIi0tLS0t
LS0tLS1cbiIgKyAKLQkJIjEuIEVSUk9SIGluIER1bW15Q2xhc3MuamF2YSAoYXQgbGluZSAxOClc
biIgKyAKLQkJIgkuY29sbGVjdChDb2xsZWN0b3JzLnRvTWFwKHBhdGggLT4gdGhpcy5nZXRLZXko
cGF0aCksIHBhdGggLT4gdGhpcy5nZXRWYWx1ZShwYXRoKSkpKTtcbiIgKyAKLQkJIgkgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5cbiIgKyAKLQkJIlRoZSBtZXRo
b2QgZ2V0S2V5KFN0cmluZykgaW4gdGhlIHR5cGUgRHVtbXlDbGFzcyBpcyBub3QgYXBwbGljYWJs
ZSBmb3IgdGhlIGFyZ3VtZW50cyAoT2JqZWN0KVxuIiArIAotCQkiLS0tLS0tLS0tLVxuIiArIAot
CQkiMi4gRVJST1IgaW4gRHVtbXlDbGFzcy5qYXZhIChhdCBsaW5lIDE4KVxuIiArIAotCQkiCS5j
b2xsZWN0KENvbGxlY3RvcnMudG9NYXAocGF0aCAtPiB0aGlzLmdldEtleShwYXRoKSwgcGF0aCAt
PiB0aGlzLmdldFZhbHVlKHBhdGgpKSkpO1xuIiArIAotCQkiCSAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXG4i
ICsgCi0JCSJUaGUgbWV0aG9kIGdldFZhbHVlKFN0cmluZykgaW4gdGhlIHR5cGUgRHVtbXlDbGFz
cyBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoT2JqZWN0KVxuIiArIAotCQki
LS0tLS0tLS0tLVxuIik7CisJCSIiKTsKIH0KIHB1YmxpYyB2b2lkIHRlc3RCdWc0MzQ0ODMoKSB7
CiAJcnVuQ29uZm9ybVRlc3QoCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0
cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVz
c2lvbi9MYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRl
c3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdy
ZXNzaW9uL0xhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCmluZGV4IDA1NDA1MmMuLmFiN2MyOGMg
MTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0xhbWJkYUV4cHJlc3Np
b25zVGVzdC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3Ny
Yy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0xhbWJkYUV4
cHJlc3Npb25zVGVzdC5qYXZhCkBAIC00MTYzLDcgKzQxNjMsNyBAQAogCQkiT0siKTsKIH0KIC8v
IGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00MzI2ODIsIFsx
LjhdW2NvbXBpbGVyXSBUeXBlIG1pc21hdGNoIGVycm9yIHdpdGggbGFtYmRhIGV4cHJlc3Npb24K
LXB1YmxpYyB2b2lkIF90ZXN0NDMyNjgyKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CitwdWJsaWMgdm9p
ZCB0ZXN0NDMyNjgyKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CiAJdGhpcy5ydW5Db25mb3JtVGVzdCgK
IAkJbmV3IFN0cmluZ1tdIHsKIAkJCSJYLmphdmEiLApAQCAtNDE4MSw3ICs0MTgxLDcgQEAKIAkJ
CSIJfVxuIiArCiAJCQkifVxuIgogCQl9LAotCQkiT0siKTsKKwkJInRydWUiKTsKIH0KIC8vIGh0
dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00MzI1MjAsIGNvbXBp
bGVyICJkdXBsaWNhdGUgbWV0aG9kIiBidWcgd2l0aCBsYW1kYXMgYW5kIGdlbmVyaWMgaW50ZXJm
YWNlcyAKIHB1YmxpYyB2b2lkIHRlc3Q0MzI1MjAoKSB0aHJvd3MgRXhjZXB0aW9uIHsKZGlmZiAt
LWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBz
ZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxUeXBlQW5ub3RhdGlvblRl
c3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxUeXBlQW5ub3RhdGlv
blRlc3QuamF2YQppbmRleCBhZmVjN2ViLi5hYTBmMDA3IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
Y29tcGlsZXIvcmVncmVzc2lvbi9OdWxsVHlwZUFubm90YXRpb25UZXN0LmphdmEKKysrIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbFR5cGVBbm5vdGF0aW9uVGVzdC5qYXZhCkBA
IC02NzUwLDExICs2NzUwLDYgQEAKIAkJIglmaWx0ZXIyLm1hcChwIC0+IG5ldyBQYWlyPD4odXBk
YXRlVG9GaWxlLmdldChwKSwgcC0+aWRlRmlsZXMuZ2V0KHApKSk7XG4iICsgCiAJCSIJICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5e
Xl5eXlxuIiArIAogCQkiVGhlIHRhcmdldCB0eXBlIG9mIHRoaXMgZXhwcmVzc2lvbiBtdXN0IGJl
IGEgZnVuY3Rpb25hbCBpbnRlcmZhY2VcbiIgKyAKLQkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJIjMu
IEVSUk9SIGluIEJ1aWxkSWRlTWFpbi5qYXZhIChhdCBsaW5lIDkpXG4iICsgCi0JCSIJZmlsdGVy
Mi5tYXAocCAtPiBuZXcgUGFpcjw+KHVwZGF0ZVRvRmlsZS5nZXQocCksIHAtPmlkZUZpbGVzLmdl
dChwKSkpO1xuIiArIAotCQkiCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5cbiIgKyAKLQkJIlRoZSB0YXJnZXQgdHlwZSBv
ZiB0aGlzIGV4cHJlc3Npb24gbXVzdCBiZSBhIGZ1bmN0aW9uYWwgaW50ZXJmYWNlXG4iICsgCiAJ
CSItLS0tLS0tLS0tXG4iLAogCQluZXcgU3RyaW5nW117amZ4SmFyfSk7CiB9CmRpZmYgLS1naXQg
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYS5qYXZhIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2xvb2t1cC9Db25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEuamF2YQppbmRleCA2MjBmNDY2Li42
MGE1NDY5IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRFeHByZXNzaW9uRm9y
bXVsYS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxh
LmphdmEKQEAgLTEyMSw3ICsxMjEsNyBAQAogCQkJCQlpZiAocHJldmlvdXNNZXRob2QgaW5zdGFu
Y2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHsKIAkJCQkJCS8vIGZpbmQg
dGhlIHByZXZpb3VzIGlubmVyIGluZmVyZW5jZSBjb250ZXh0IHRvIHNlZSB3aGF0IGluZmVyZW5j
ZSBraW5kIHRoaXMgaW52b2NhdGlvbiBuZWVkczoKIAkJCQkJCUluZmVyZW5jZUNvbnRleHQxOCBp
bm5lckN0eCA9IGludm9jYXRpb24uZ2V0SW5mZXJlbmNlQ29udGV4dCgoUGFyYW1ldGVyaXplZEdl
bmVyaWNNZXRob2RCaW5kaW5nKSBwcmV2aW91c01ldGhvZCk7Ci0JCQkJCQlpZiAoaW5uZXJDdHgg
PT0gbnVsbCkgeyAvLyBubyBpbmZlcmVuY2UgLT4gYXNzdW1lIGl0IHdhc24ndCByZWFsbHkgcG9s
eSBhZnRlciBhbGwKKwkJCQkJCWlmIChpbm5lckN0eCA9PSBudWxsIHx8IGlubmVyQ3R4Lmhhc1Jl
c3VsdEZvcih0aGlzLnJpZ2h0KSkgeyAvLyBubyBpbmZlcmVuY2UgfHwgY29tcGxldGVkIGluZmVy
ZW5jZSAtPiBhc3N1bWUgaXQgd2Fzbid0IHJlYWxseSBwb2x5IGFmdGVyIGFsbAogCQkJCQkJCVR5
cGVCaW5kaW5nIGV4cHJUeXBlID0gdGhpcy5sZWZ0LnJlc29sdmVkVHlwZTsKIAkJCQkJCQlpZiAo
ZXhwclR5cGUgPT0gbnVsbCB8fCAhZXhwclR5cGUuaXNWYWxpZEJpbmRpbmcoKSkKIAkJCQkJCQkJ
cmV0dXJuIEZBTFNFOwpAQCAtNDQ4LDEwICs0NDgsMTAgQEAKIAkJCQkJCQkJcmV0dXJuIGZhbHNl
OwogCQkJCQkJCX0KIAkJCQkJCX0sIChCbG9ja1Njb3BlKW51bGwpOworCQkJCQkJfQogCQkJCQl9
Ci0JCQkJfQogCQkJCXJldHVybiB2YXJpYWJsZXM7Ci0JCQl9CisJCQkJfQogCQl9IGVsc2UgaWYg
KHRoaXMubGVmdCBpbnN0YW5jZW9mIFJlZmVyZW5jZUV4cHJlc3Npb24pIHsKIAkJCWlmICh0aGlz
LnJpZ2h0IGluc3RhbmNlb2YgSW5mZXJlbmNlVmFyaWFibGUpIHsKIAkJCQlyZXR1cm4gQ29sbGVj
dGlvbnMuc2luZ2xldG9uTGlzdCgoSW5mZXJlbmNlVmFyaWFibGUpdGhpcy5yaWdodCk7CmRpZmYg
LS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVyZW5jZUNvbnRleHQxOC5qYXZhIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xv
b2t1cC9JbmZlcmVuY2VDb250ZXh0MTguamF2YQppbmRleCA2MWZiY2MwLi45N2VmZjI2IDEwMDY0
NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVyZW5jZUNvbnRleHQxOC5qYXZhCisrKyBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9sb29rdXAvSW5mZXJlbmNlQ29udGV4dDE4LmphdmEKQEAgLTUyMCw3ICs1MjAsOCBAQAogCQlQ
YXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgbWV0aG9kVG9DaGVjayA9IG1ldGhvZDsK
IAkJCiAJCWJvb2xlYW4gaGF2ZVByb3BlclRhcmdldFR5cGUgPSB0YXJnZXRUeXBlICE9IG51bGwg
JiYgdGFyZ2V0VHlwZS5pc1Byb3BlclR5cGUodHJ1ZSk7Ci0JCWlmIChoYXZlUHJvcGVyVGFyZ2V0
VHlwZSB8fCAhaW52b2NhdGlvbi5nZXRFeHByZXNzaW9uQ29udGV4dCgpLmRlZmluZXNUYXJnZXRU
eXBlKCkpIHsKKwkJYm9vbGVhbiBpbmZlcnJlZEludm9jYXRpb25UeXBlID0gZmFsc2U7CisJCWlm
ICh0YXJnZXRUeXBlICE9IG51bGwgfHwgIWludm9jYXRpb24uZ2V0RXhwcmVzc2lvbkNvbnRleHQo
KS5kZWZpbmVzVGFyZ2V0VHlwZSgpKSB7CiAJCQlNZXRob2RCaW5kaW5nIG9yaWdpbmFsID0gbWV0
aG9kLm9yaWdpbmFsTWV0aG9kOwogCQkJU29sdXRpb24gc29sdXRpb24gPSB0aGlzLnNvbHV0aW9u
c1BlclRhcmdldFR5cGUuZ2V0KHRhcmdldFR5cGUpOwogCQkJQm91bmRTZXQgcmVzdWx0ID0gc29s
dXRpb24gIT0gbnVsbCA/IHNvbHV0aW9uLmJvdW5kcyA6IG51bGw7CkBAIC01NDEsNiArNTQyLDcg
QEAKIAkJCQkJCU51bGxBbm5vdGF0aW9uTWF0Y2hpbmcuY2hlY2tGb3JDb250cmFkaXRpb25zKGZp
bmFsTWV0aG9kLCBpbnZvY2F0aW9uLCB0aGlzLnNjb3BlKTsKIAkJCQkJaW52b2NhdGlvbi5yZWdp
c3RlckluZmVyZW5jZUNvbnRleHQoZmluYWxNZXRob2QsIHRoaXMpOwogCQkJCQl0aGlzLnNvbHV0
aW9uc1BlclRhcmdldFR5cGUucHV0KHRhcmdldFR5cGUsIG5ldyBTb2x1dGlvbihmaW5hbE1ldGhv
ZCwgcmVzdWx0KSk7CisJCQkJCWluZmVycmVkSW52b2NhdGlvblR5cGUgPSB0cnVlOwogCQkJCX0K
IAkJCX0KIAkJCWlmIChmaW5hbE1ldGhvZCAhPSBudWxsKQpAQCAtNTUzLDEyICs1NTUsMTEgQEAK
IAkJaWYgKHByb2JsZW1NZXRob2QgIT0gbnVsbCkKIAkJCXJldHVybiBwcm9ibGVtTWV0aG9kOwog
Ci0JCWlmICghaGF2ZVByb3BlclRhcmdldFR5cGUgJiYgaW52b2NhdGlvbi5nZXRFeHByZXNzaW9u
Q29udGV4dCgpLmRlZmluZXNUYXJnZXRUeXBlKCkpCi0JCQlyZXR1cm4gbWV0aG9kOyAvLyBzdGls
bCBub3QgcmVhZHkhCi0KLQkJaWYgKGZpbmFsTWV0aG9kICE9IG51bGwpIHsKKwkJaWYgKGluZmVy
cmVkSW52b2NhdGlvblR5cGUpIHsKIAkJCWlmIChyZWJpbmRJbm5lclBvbGllcyhmaW5hbE1ldGhv
ZCwgaW52b2NhdGlvbikpCiAJCQkJcmV0dXJuIGZpbmFsTWV0aG9kOworCQl9IGVsc2UgaWYgKCFo
YXZlUHJvcGVyVGFyZ2V0VHlwZSAmJiBpbnZvY2F0aW9uLmdldEV4cHJlc3Npb25Db250ZXh0KCku
ZGVmaW5lc1RhcmdldFR5cGUoKSkgeworCQkJcmV0dXJuIG1ldGhvZDsgLy8gc3RpbGwgbm90IHJl
YWR5IQogCQl9CiAJCXJldHVybiBnZXRSZXR1cm5Qcm9ibGVtTWV0aG9kSWZOZWVkZWQodGFyZ2V0
VHlwZSwgbWV0aG9kKTsKIAl9
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>247230</attachid>
            <date>2014-09-19 04:59:00 -0400</date>
            <delta_ts>2014-09-21 21:17:34 -0400</delta_ts>
            <desc>Same patch with junit for duplicates.</desc>
            <filename>Patch.patch</filename>
            <type>text/plain</type>
            <size>15690</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3RfMV84LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmlj
c1JlZ3Jlc3Npb25UZXN0XzFfOC5qYXZhCmluZGV4IGY3ZjEzYzUuLmExZWRkNzMgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3Rf
MV84LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdy
ZXNzaW9uVGVzdF8xXzguamF2YQpAQCAtMzA0MiwxMiArMzA0Miw3IEBACiAJCQkiCX1cbiIgKyAK
IAkJCSJ9XG4iCiAJCX0sCi0JCSItLS0tLS0tLS0tXG4iICsgCi0JCSIxLiBFUlJPUiBpbiBDb2xs
ZWN0b3JzTWFwcy5qYXZhIChhdCBsaW5lIDIwKVxuIiArIAotCQkiCXAgLT4gcC5saHMuc3RyZWFt
KCkubWFwKHA6OmtlZXBpbmdSaHMpKS5jb2xsZWN0KFxuIiArIAotCQkiCSAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXG4iICsgCi0JCSJUaGUgbWV0aG9kIGNv
bGxlY3QoQ29sbGVjdG9yPD8gc3VwZXIgT2JqZWN0LEEsUj4pIGluIHRoZSB0eXBlIFN0cmVhbTxP
YmplY3Q+IGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRzIChDb2xsZWN0b3I8Q29s
bGVjdG9yc01hcHMuUGFpcjxTdHJpbmcsU3RyaW5nPixjYXB0dXJlIzMtb2YgPyxNYXA8U3RyaW5n
LExpc3Q8U3RyaW5nPj4+KVxuIiArIAotCQkiLS0tLS0tLS0tLVxuIik7CisJCSIiKTsKIH0KIHB1
YmxpYyB2b2lkIF90ZXN0QnVnNDMyNjI2KCkgewogCXJ1bkNvbmZvcm1UZXN0KApAQCAtMzMwNyw3
ICszMzAyLDYgQEAKIAkJCSJpbXBvcnQgamF2YS51dGlsLkxpc3Q7XG4iICsgCiAJCQkiaW1wb3J0
IGphdmEudXRpbC5NYXA7XG4iICsgCiAJCQkiaW1wb3J0IGphdmEudXRpbC5NYXAuRW50cnk7XG4i
ICsgCi0JCQkiaW1wb3J0IGphdmEudXRpbC5mdW5jdGlvbi5GdW5jdGlvbjtcbiIgKyAKIAkJCSJp
bXBvcnQgamF2YS51dGlsLnN0cmVhbS5Db2xsZWN0b3I7XG4iICsgCiAJCQkiaW1wb3J0IGphdmEu
dXRpbC5zdHJlYW0uU3RyZWFtO1xuIiArIAogCQkJIlxuIiArIApAQCAtMzMyOCwxMiArMzMyMiw3
IEBACiAJCQkiCX1cbiIgKyAKIAkJCSJ9XG4iCiAJCX0sCi0JCSItLS0tLS0tLS0tXG4iICsgCi0J
CSIxLiBFUlJPUiBpbiBFeHRyYWN0TG9jYWxMYW1iZGEuamF2YSAoYXQgbGluZSAyMilcbiIgKyAK
LQkJIgkpLmNvbGxlY3QoZ3JvdXBpbmdCeSk7XG4iICsgCi0JCSIJICBeXl5eXl5eXG4iICsgCi0J
CSJUaGUgbWV0aG9kIGNvbGxlY3QoQ29sbGVjdG9yPD8gc3VwZXIgT2JqZWN0LEEsUj4pIGluIHRo
ZSB0eXBlIFN0cmVhbTxPYmplY3Q+IGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRz
IChDb2xsZWN0b3I8TWFwLkVudHJ5PFN0cmluZyxTdHJpbmc+LGNhcHR1cmUjMS1vZiA/LE1hcDxT
dHJpbmcsTGlzdDxTdHJpbmc+Pj4pXG4iICsgCi0JCSItLS0tLS0tLS0tXG4iKTsKKwkJIiIpOwog
fQogcHVibGljIHZvaWQgdGVzdEJ1ZzQzNTc2NygpIHsKIAlydW5OZWdhdGl2ZVRlc3QoCkBAIC0z
Mzc4LDE3ICszMzY3LDcgQEAKIAkJCSIJfVxuIiArIAogCQkJIn1cbiIKIAkJfSwKLQkJIi0tLS0t
LS0tLS1cbiIgKyAKLQkJIjEuIEVSUk9SIGluIER1bW15Q2xhc3MuamF2YSAoYXQgbGluZSAxOClc
biIgKyAKLQkJIgkuY29sbGVjdChDb2xsZWN0b3JzLnRvTWFwKHBhdGggLT4gdGhpcy5nZXRLZXko
cGF0aCksIHBhdGggLT4gdGhpcy5nZXRWYWx1ZShwYXRoKSkpKTtcbiIgKyAKLQkJIgkgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5cbiIgKyAKLQkJIlRoZSBtZXRo
b2QgZ2V0S2V5KFN0cmluZykgaW4gdGhlIHR5cGUgRHVtbXlDbGFzcyBpcyBub3QgYXBwbGljYWJs
ZSBmb3IgdGhlIGFyZ3VtZW50cyAoT2JqZWN0KVxuIiArIAotCQkiLS0tLS0tLS0tLVxuIiArIAot
CQkiMi4gRVJST1IgaW4gRHVtbXlDbGFzcy5qYXZhIChhdCBsaW5lIDE4KVxuIiArIAotCQkiCS5j
b2xsZWN0KENvbGxlY3RvcnMudG9NYXAocGF0aCAtPiB0aGlzLmdldEtleShwYXRoKSwgcGF0aCAt
PiB0aGlzLmdldFZhbHVlKHBhdGgpKSkpO1xuIiArIAotCQkiCSAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXG4i
ICsgCi0JCSJUaGUgbWV0aG9kIGdldFZhbHVlKFN0cmluZykgaW4gdGhlIHR5cGUgRHVtbXlDbGFz
cyBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoT2JqZWN0KVxuIiArIAotCQki
LS0tLS0tLS0tLVxuIik7CisJCSIiKTsKIH0KIHB1YmxpYyB2b2lkIHRlc3RCdWc0MzQ0ODMoKSB7
CiAJcnVuQ29uZm9ybVRlc3QoCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0
cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVz
c2lvbi9MYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRl
c3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdy
ZXNzaW9uL0xhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCmluZGV4IDA1NDA1MmMuLmEzMDZjYzkg
MTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0xhbWJkYUV4cHJlc3Np
b25zVGVzdC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3Ny
Yy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0xhbWJkYUV4
cHJlc3Npb25zVGVzdC5qYXZhCkBAIC00MTYzLDcgKzQxNjMsNyBAQAogCQkiT0siKTsKIH0KIC8v
IGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00MzI2ODIsIFsx
LjhdW2NvbXBpbGVyXSBUeXBlIG1pc21hdGNoIGVycm9yIHdpdGggbGFtYmRhIGV4cHJlc3Npb24K
LXB1YmxpYyB2b2lkIF90ZXN0NDMyNjgyKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CitwdWJsaWMgdm9p
ZCB0ZXN0NDMyNjgyKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CiAJdGhpcy5ydW5Db25mb3JtVGVzdCgK
IAkJbmV3IFN0cmluZ1tdIHsKIAkJCSJYLmphdmEiLApAQCAtNDE4MSw3ICs0MTgxLDcgQEAKIAkJ
CSIJfVxuIiArCiAJCQkifVxuIgogCQl9LAotCQkiT0siKTsKKwkJInRydWUiKTsKIH0KIC8vIGh0
dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00MzI1MjAsIGNvbXBp
bGVyICJkdXBsaWNhdGUgbWV0aG9kIiBidWcgd2l0aCBsYW1kYXMgYW5kIGdlbmVyaWMgaW50ZXJm
YWNlcyAKIHB1YmxpYyB2b2lkIHRlc3Q0MzI1MjAoKSB0aHJvd3MgRXhjZXB0aW9uIHsKQEAgLTQ3
NzQsNiArNDc3NCwyOSBAQAogCQl9LAogCQkiIik7CiB9CisvLyBodHRwczovL2J1Z3MuZWNsaXBz
ZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDQyOTE2LCAgWzEuOF1baW5mZXJlbmNlXSBUeXBl
IEluZmVyZW5jZSBpcyBicm9rZW4gZm9yIENvbXBsZXRhYmxlRnV0dXJlIHRoZW4tbWV0aG9kcyAg
CitwdWJsaWMgdm9pZCB0ZXN0NDQyOTE2KCkgeworCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCW5l
dyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJpbXBvcnQgc3RhdGljIGphdmEudXRpbC5j
b25jdXJyZW50LkNvbXBsZXRhYmxlRnV0dXJlLmNvbXBsZXRlZEZ1dHVyZTtcbiIgKworCQkJImlt
cG9ydCBqYXZhLnV0aWwuQXJyYXlzO1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5jb25jdXJy
ZW50LkNvbXBsZXRhYmxlRnV0dXJlO1xuIiArCisJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJ
CQkiICAgIHB1YmxpYyBzdGF0aWMgQ29tcGxldGFibGVGdXR1cmU8SW50ZWdlcj4gY2YoaW50IHZh
bHVlKSB7XG4iICsKKwkJCSIJCXJldHVybiBjb21wbGV0ZWRGdXR1cmUodmFsdWUpO1xuIiArCisJ
CQkiICAgIH1cbiIgKworCQkJIiAgICBwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBh
cmdzKSB7XG4iICsKKwkJCSIJCWNmKDEpLnRoZW5Db21wb3NlKCh4SW50KSAtPiBjZigyKS50aGVu
QXBwbHkoKHpJbnQpIC0+IEFycmF5cy5hc0xpc3QoeEludCwgekludCkpKVxuIiArCisJCQkiCQku
dGhlbkFjY2VwdCgoaW50cykgLT4ge1xuIiArCisJCQkiCQkJLyogISEhISBpbnRzIGlzIGluY29y
cmVjdGx5IGluZmVycmVkIHRvIGJlIGFuIE9iamVjdCwgYnV0IGl0IGlzIExpc3Q8SW50ZWdlcj4g
Ki9cbiIgKworCQkJIgkJCVN5c3RlbS5vdXQucHJpbnRsbihpbnRzLmdldCgwKSArIGludHMuZ2V0
KDEpKTsgLy8gc2hvdWxkIHByaW50IDM7XG4iICsKKwkJCSIJCX0pO1xuIiArCisJCQkiCX1cbiIg
KworCQkJIn1cbiIKKwkJfSwKKwkJIjMiKTsKK30KIHB1YmxpYyBzdGF0aWMgQ2xhc3MgdGVzdENs
YXNzKCkgewogCXJldHVybiBMYW1iZGFFeHByZXNzaW9uc1Rlc3QuY2xhc3M7CiB9CmRpZmYgLS1n
aXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2Uv
amR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OZWdhdGl2ZUxhbWJkYUV4cHJlc3Np
b25zVGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVnYXRpdmVMYW1i
ZGFFeHByZXNzaW9uc1Rlc3QuamF2YQppbmRleCBjMzQ0ZTA2Li5mNzRiNGJmIDEwMDY0NAotLS0g
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0
L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OZWdhdGl2ZUxhbWJkYUV4cHJlc3Npb25z
VGVzdC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9v
cmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFt
YmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKQEAgLTk1NjAsNiArOTU2MCwxMjQgQEAKIAkiTm8gZW5j
bG9zaW5nIGluc3RhbmNlIG9mIHR5cGUgWSBpcyBhdmFpbGFibGUgZHVlIHRvIHNvbWUgaW50ZXJt
ZWRpYXRlIGNvbnN0cnVjdG9yIGludm9jYXRpb25cbiIgKyAKIAkiLS0tLS0tLS0tLVxuIik7CiB9
CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDM5NTk0
ICBbMS44XVtjb21waWxlcl0gbmVzdGVkIGxhbWJkYSB0eXBlIGluY29ycmVjdGx5IGluZmVycmVk
IHZzIGphdmFjCitwdWJsaWMgdm9pZCB0ZXN0NDM5NTk0KCkgeworCXRoaXMucnVuTmVnYXRpdmVU
ZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJIlguamF2YSIsIAorCQkJImltcG9ydCBqYXZhLnV0
aWwuQXJyYXlMaXN0O1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5MaXN0O1xuIiArCisJCQki
aW1wb3J0IGphdmEudXRpbC5mdW5jdGlvbi5GdW5jdGlvbjtcbiIgKworCQkJImltcG9ydCBqYXZh
LnV0aWwuZnVuY3Rpb24uUHJlZGljYXRlO1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5zdHJl
YW0uQ29sbGVjdG9ycztcbiIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuc3RyZWFtLlN0cmVhbTtc
biIgKworCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJIglwcm90ZWN0ZWQgc3RhdGljIGlu
dGVyZmFjZSBJTGlzdEVudHJ5IHtcbiIgKworCQkJIgkJcHVibGljIDxUPiBUIHZpc2l0UmVjb3Jk
c1dpdGhSZXN1bHQoRnVuY3Rpb248U3RyZWFtPFJlY29yZD4sVD4gZnVuYyk7CQlcbiIgKworCQkJ
Igl9XG4iICsKKwkJCSIJcHJvdGVjdGVkIHN0YXRpYyBmaW5hbCBjbGFzcyBJbW11dGFibGVSZWNv
cmQge1xuIiArCisJCQkiCQlwdWJsaWMgSW1tdXRhYmxlUmVjb3JkKFJlY29yZCByKSB7IH1cbiIg
KworCQkJIgl9XG4iICsKKwkJCSIJcHJvdGVjdGVkIHN0YXRpYyBmaW5hbCBjbGFzcyBSZWNvcmQg
e31cbiIgKworCQkJIglwdWJsaWMgTGlzdDxJbW11dGFibGVSZWNvcmQ+IGNvbXBpbGVzV2l0aEVj
bGlwc2VBbmRKYXZhYygpIFxuIiArCisJCQkiCXtcbiIgKworCQkJIgkJcmV0dXJuIHZpc2l0RW50
cmllc1dpdGhSZXN1bHQoIHN0cmVhbSAtPiB7XG4iICsKKwkJCSIJCQlyZXR1cm4gc3RyZWFtLm1h
cCggZW50cnkgLT4ge1xuIiArCisJCQkiCQkJCWZpbmFsIExpc3Q8SW1tdXRhYmxlUmVjb3JkPiBy
ZXN1bHQxID0gZW50cnkudmlzaXRSZWNvcmRzV2l0aFJlc3VsdCggc3RyZWFtMiAtPiBzdHJlYW0y
XG4iICsKKwkJCSIJCQkJCQkuZmlsdGVyKCBzb21lUHJlZGljYXRlKCkgKVxuIiArCisJCQkiCQkJ
CQkJLm1hcCggSW1tdXRhYmxlUmVjb3JkOjpuZXcgKVxuIiArCisJCQkiCQkJCQkJLmNvbGxlY3Qo
IENvbGxlY3RvcnMudG9MaXN0KCkgKVxuIiArCisJCQkiCQkJCQkpOwlcbiIgKworCQkJIgkJCQly
ZXR1cm4gcmVzdWx0MTtcbiIgKworCQkJIgkJCX0pLmZsYXRNYXAoIExpc3Q6OnN0cmVhbSApLmNv
bGxlY3QoIENvbGxlY3RvcnMudG9Db2xsZWN0aW9uKCBBcnJheUxpc3Q6Om5ldyApICk7XG4iICsK
KwkJCSIJCX0pOwkJXG4iICsKKwkJCSIJfQkJXG4iICsKKwkJCSIJcHVibGljIExpc3Q8SW1tdXRh
YmxlUmVjb3JkPiBjb21waWxlc1dpdGhKYXZhY0J1dE5vdEVjbGlwc2UxKCkgXG4iICsKKwkJCSIJ
e1xuIiArCisJCQkiCQlyZXR1cm4gdmlzaXRFbnRyaWVzV2l0aFJlc3VsdCggc3RyZWFtIC0+IHtc
biIgKworCQkJIgkJCXJldHVybiBzdHJlYW0ubWFwKCBlbnRyeSAtPiB7XG4iICsKKwkJCSIJCQkJ
cmV0dXJuIGVudHJ5LnZpc2l0UmVjb3Jkc1dpdGhSZXN1bHQoIHN0cmVhbTIgLT4gc3RyZWFtMlxu
IiArCisJCQkiCQkJCQkJLmZpbHRlciggc29tZVByZWRpY2F0ZSgpIClcbiIgKworCQkJIgkJCQkJ
CS5tYXAoIEltbXV0YWJsZVJlY29yZDo6bmV3IClcbiIgKworCQkJIgkJCQkJCS5jb2xsZWN0KCBD
b2xsZWN0b3JzLnRvTGlzdCgpIClcbiIgKworCQkJIgkJCQkJKTsJXG4iICsKKwkJCSIJCQl9KS5m
bGF0TWFwKCBMaXN0OjpzdHJlYW0gKS5jb2xsZWN0KCBDb2xsZWN0b3JzLnRvQ29sbGVjdGlvbigg
QXJyYXlMaXN0OjpuZXcgKSApO1xuIiArCisJCQkiCQl9KTsJCVxuIiArCisJCQkiCX0JCVxuIiAr
CisJCQkiCXB1YmxpYyBMaXN0PEltbXV0YWJsZVJlY29yZD4gY29tcGlsZXNXaXRoSmF2YWNCdXRO
b3RFY2xpcHNlMigpIFxuIiArCisJCQkiCXtcbiIgKworCQkJIgkJcmV0dXJuIHZpc2l0RW50cmll
c1dpdGhSZXN1bHQoIHN0cmVhbSAtPiB7XG4iICsKKwkJCSIJCQlyZXR1cm4gc3RyZWFtLm1hcCgg
ZW50cnkgLT4gZW50cnkudmlzaXRSZWNvcmRzV2l0aFJlc3VsdCggc3RyZWFtMiAtPiBzdHJlYW0y
XG4iICsKKwkJCSIJCQkJCQkuZmlsdGVyKCBzb21lUHJlZGljYXRlKCkgKVxuIiArCisJCQkiCQkJ
CQkJLm1hcCggSW1tdXRhYmxlUmVjb3JkOjpuZXcgKVxuIiArCisJCQkiCQkJCQkJLmNvbGxlY3Qo
IENvbGxlY3RvcnMudG9MaXN0KCkgKSApXG4iICsKKwkJCSIJCQkpLmZsYXRNYXAoIExpc3Q6OnN0
cmVhbSApLmNvbGxlY3QoIENvbGxlY3RvcnMudG9Db2xsZWN0aW9uKCBBcnJheUxpc3Q6Om5ldyAp
ICk7XG4iICsKKwkJCSIJCX0pOwkJXG4iICsKKwkJCSIJfQlcbiIgKworCQkJIglwdWJsaWMgTGlz
dDxJbW11dGFibGVSZWNvcmQ+IGNvbXBpbGVzV2l0aEphdmFjQnV0Tm90RWNsaXBzZTMoKSBcbiIg
KworCQkJIgl7XG4iICsKKwkJCSIJCXJldHVybiB2aXNpdEVudHJpZXNXaXRoUmVzdWx0KCBzdHJl
YW0gLT4gc3RyZWFtLm1hcCggZW50cnkgLT4gZW50cnkudmlzaXRSZWNvcmRzV2l0aFJlc3VsdCgg
c3RyZWFtMiAtPiBzdHJlYW0yXG4iICsKKwkJCSIJCQkJCQkuZmlsdGVyKCBzb21lUHJlZGljYXRl
KCkgKVxuIiArCisJCQkiCQkJCQkJLm1hcCggSW1tdXRhYmxlUmVjb3JkOjpuZXcgKVxuIiArCisJ
CQkiCQkJCQkJLmNvbGxlY3QoIENvbGxlY3RvcnMudG9MaXN0KCkgKSApXG4iICsKKwkJCSIJCQkp
XG4iICsKKwkJCSIJCQkuZmxhdE1hcCggTGlzdDo6c3RyZWFtIClcbiIgKworCQkJIgkJCS5jb2xs
ZWN0KCBDb2xsZWN0b3JzLnRvQ29sbGVjdGlvbiggQXJyYXlMaXN0OjpuZXcgKSApXG4iICsKKwkJ
CSIJCSk7CQlcbiIgKworCQkJIgl9CVxuIiArCisJCQkiCXByaXZhdGUgc3RhdGljIFByZWRpY2F0
ZTxSZWNvcmQ+IHNvbWVQcmVkaWNhdGUoKSB7XG4iICsKKwkJCSIJCXJldHVybiByZWNvcmQgLT4g
dHJ1ZTtcbiIgKworCQkJIgl9CQlcbiIgKworCQkJIglwcml2YXRlIDxUPiBUIHZpc2l0RW50cmll
c1dpdGhSZXN1bHQoRnVuY3Rpb248U3RyZWFtPElMaXN0RW50cnk+LFQ+IGZ1bmMpIHtcbiIgKwor
CQkJIgkJcmV0dXJuIGZ1bmMuYXBwbHkoIG5ldyBBcnJheUxpc3Q8SUxpc3RFbnRyeT4oKS5zdHJl
YW0oKSApO1xuIiArCisJCQkiCX1cbiIgKworCQkJIn1cbiIKKwl9LAorCSIiKTsKK30KKy8vIGh0
dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00MzM4NTIsIFsxLjhd
W2NvbXBpbGVyXSBKYXZhYyByZWplY3RzIHR5cGUgaW5mZXJlbmNlIHJlc3VsdHMgdGhhdCBFQ0og
YWNjZXB0cworcHVibGljIHZvaWQgdGVzdDQzMzg1MigpIHsKKwl0aGlzLnJ1bk5lZ2F0aXZlVGVz
dCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJYLmphdmEiLCAKKwkJCSJpbXBvcnQgamF2YS51dGls
Lk9wdGlvbmFsO1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5mdW5jdGlvbi5GdW5jdGlvbjtc
biIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuc3RyZWFtLlN0cmVhbTtcbiIgKworCQkJInB1Ymxp
YyBjbGFzcyBYIHtcbiIgKworCQkJIglwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBh
cmdzKSB7XG4iICsKKwkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbih0ZXN0KFN0cmVhbS5vZihTdHJl
YW0ub2YoXCIzXCIpKSkpO1xuIiArCisJCQkiCQlTeXN0ZW0ub3V0LnByaW50bG4odGVzdDIoU3Ry
ZWFtLm9mKFN0cmVhbS5vZihcIjFcIikpLnNraXAoMSkpKTtcbiIgKworCQkJIgkJU3lzdGVtLm91
dC5wcmludGxuKHRlc3QzMShTdHJlYW0ub2YoU3RyZWFtLm9mKFwiMlwiKSkuc2tpcCgxKSkpO1xu
IiArCisJCQkiCX1cbiIgKworCQkJIglzdGF0aWMgT3B0aW9uYWw8U3RyZWFtPE9iamVjdD4+IHRl
c3QoU3RyZWFtPFN0cmVhbTxTdHJpbmc+PiBzMzEpIHtcbiIgKworCQkJIgkJcmV0dXJuIHMzMS5t
YXAoczIgLT4gczIubWFwKHMxIC0+IEludGVnZXIucGFyc2VJbnQoczEpKSkuZmluZEFueSgpO1xu
IiArCisJCQkiCX1cbiIgKworCQkJIglzdGF0aWMgT2JqZWN0IHRlc3QyKFN0cmVhbTxTdHJlYW08
U3RyaW5nPj4gczMpIHtcbiIgKworCQkJIgkJcmV0dXJuIHMzLm1hcChzMiAtPiBzMi5tYXAoczEg
LT4gSW50ZWdlci5wYXJzZUludChzMSkpKS5mbGF0TWFwKEZ1bmN0aW9uLmlkZW50aXR5KCkpLmZp
bmRBbnkoKS5vckVsc2UoXG4iICsKKwkJCSIJCSAgWC5jbGFzcyk7XG4iICsKKwkJCSIJfVxuIiAr
CisJCQkiCXN0YXRpYyBTdHJlYW08T2JqZWN0PiB0ZXN0MzEoU3RyZWFtPFN0cmVhbTxTdHJpbmc+
PiBzMykge1xuIiArCisJCQkiCQlyZXR1cm4gczMubWFwKHMyIC0+IHMyLm1hcChzMSAtPiBJbnRl
Z2VyLnBhcnNlSW50KHMxKSkpLmZpbmRBbnkoKS5vckVsc2UoU3RyZWFtLm9mKG5ldyBPYmplY3Qo
KSkpO1xuIiArCisJCQkiCX1cbiIgKworCQkJIn1cbiIKKwl9LAorCSItLS0tLS0tLS0tXG4iICsg
CisJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMSlcbiIgKyAKKwkiCXJldHVybiBzMzEu
bWFwKHMyIC0+IHMyLm1hcChzMSAtPiBJbnRlZ2VyLnBhcnNlSW50KHMxKSkpLmZpbmRBbnkoKTtc
biIgKyAKKwkiCSAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVy
dCBmcm9tIE9wdGlvbmFsPFN0cmVhbTxJbnRlZ2VyPj4gdG8gT3B0aW9uYWw8U3RyZWFtPE9iamVj
dD4+XG4iICsgCisJIi0tLS0tLS0tLS1cbiIgKyAKKwkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBs
aW5lIDE0KVxuIiArIAorCSIJcmV0dXJuIHMzLm1hcChzMiAtPiBzMi5tYXAoczEgLT4gSW50ZWdl
ci5wYXJzZUludChzMSkpKS5mbGF0TWFwKEZ1bmN0aW9uLmlkZW50aXR5KCkpLmZpbmRBbnkoKS5v
ckVsc2UoXG4iICsgCisJIgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5e
Xl5eXlxuIiArIAorCSJUaGUgbWV0aG9kIG9yRWxzZShJbnRlZ2VyKSBpbiB0aGUgdHlwZSBPcHRp
b25hbDxJbnRlZ2VyPiBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoQ2xhc3M8
WD4pXG4iICsgCisJIi0tLS0tLS0tLS1cbiIgKyAKKwkiMy4gRVJST1IgaW4gWC5qYXZhIChhdCBs
aW5lIDE4KVxuIiArIAorCSIJcmV0dXJuIHMzLm1hcChzMiAtPiBzMi5tYXAoczEgLT4gSW50ZWdl
ci5wYXJzZUludChzMSkpKS5maW5kQW55KCkub3JFbHNlKFN0cmVhbS5vZihuZXcgT2JqZWN0KCkp
KTtcbiIgKyAKKwkiCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXlxuIiArIAorCSJUaGUgbWV0aG9kIG9yRWxzZShT
dHJlYW08SW50ZWdlcj4pIGluIHRoZSB0eXBlIE9wdGlvbmFsPFN0cmVhbTxJbnRlZ2VyPj4gaXMg
bm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKFN0cmVhbTxPYmplY3Q+KVxuIiArIAor
CSItLS0tLS0tLS0tXG4iKTsKK30KIHB1YmxpYyBzdGF0aWMgQ2xhc3MgdGVzdENsYXNzKCkgewog
CXJldHVybiBOZWdhdGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5jbGFzczsKIH0KZGlmZiAtLWdp
dCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxUeXBlQW5ub3RhdGlvblRlc3Qu
amF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBz
ZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxUeXBlQW5ub3RhdGlvblRl
c3QuamF2YQppbmRleCBhZmVjN2ViLi5hYTBmMDA3IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29t
cGlsZXIvcmVncmVzc2lvbi9OdWxsVHlwZUFubm90YXRpb25UZXN0LmphdmEKKysrIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rl
c3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbFR5cGVBbm5vdGF0aW9uVGVzdC5qYXZhCkBAIC02
NzUwLDExICs2NzUwLDYgQEAKIAkJIglmaWx0ZXIyLm1hcChwIC0+IG5ldyBQYWlyPD4odXBkYXRl
VG9GaWxlLmdldChwKSwgcC0+aWRlRmlsZXMuZ2V0KHApKSk7XG4iICsgCiAJCSIJICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5e
XlxuIiArIAogCQkiVGhlIHRhcmdldCB0eXBlIG9mIHRoaXMgZXhwcmVzc2lvbiBtdXN0IGJlIGEg
ZnVuY3Rpb25hbCBpbnRlcmZhY2VcbiIgKyAKLQkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJIjMuIEVS
Uk9SIGluIEJ1aWxkSWRlTWFpbi5qYXZhIChhdCBsaW5lIDkpXG4iICsgCi0JCSIJZmlsdGVyMi5t
YXAocCAtPiBuZXcgUGFpcjw+KHVwZGF0ZVRvRmlsZS5nZXQocCksIHAtPmlkZUZpbGVzLmdldChw
KSkpO1xuIiArIAotCQkiCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5cbiIgKyAKLQkJIlRoZSB0YXJnZXQgdHlwZSBvZiB0
aGlzIGV4cHJlc3Npb24gbXVzdCBiZSBhIGZ1bmN0aW9uYWwgaW50ZXJmYWNlXG4iICsgCiAJCSIt
LS0tLS0tLS0tXG4iLAogCQluZXcgU3RyaW5nW117amZ4SmFyfSk7CiB9CmRpZmYgLS1naXQgYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvbG9va3VwL0NvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYS5qYXZhIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xv
b2t1cC9Db25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEuamF2YQppbmRleCA2MjBmNDY2Li42MGE1
NDY5IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVs
YS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhLmph
dmEKQEAgLTEyMSw3ICsxMjEsNyBAQAogCQkJCQlpZiAocHJldmlvdXNNZXRob2QgaW5zdGFuY2Vv
ZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHsKIAkJCQkJCS8vIGZpbmQgdGhl
IHByZXZpb3VzIGlubmVyIGluZmVyZW5jZSBjb250ZXh0IHRvIHNlZSB3aGF0IGluZmVyZW5jZSBr
aW5kIHRoaXMgaW52b2NhdGlvbiBuZWVkczoKIAkJCQkJCUluZmVyZW5jZUNvbnRleHQxOCBpbm5l
ckN0eCA9IGludm9jYXRpb24uZ2V0SW5mZXJlbmNlQ29udGV4dCgoUGFyYW1ldGVyaXplZEdlbmVy
aWNNZXRob2RCaW5kaW5nKSBwcmV2aW91c01ldGhvZCk7Ci0JCQkJCQlpZiAoaW5uZXJDdHggPT0g
bnVsbCkgeyAvLyBubyBpbmZlcmVuY2UgLT4gYXNzdW1lIGl0IHdhc24ndCByZWFsbHkgcG9seSBh
ZnRlciBhbGwKKwkJCQkJCWlmIChpbm5lckN0eCA9PSBudWxsIHx8IGlubmVyQ3R4Lmhhc1Jlc3Vs
dEZvcih0aGlzLnJpZ2h0KSkgeyAvLyBubyBpbmZlcmVuY2UgfHwgY29tcGxldGVkIGluZmVyZW5j
ZSAtPiBhc3N1bWUgaXQgd2Fzbid0IHJlYWxseSBwb2x5IGFmdGVyIGFsbAogCQkJCQkJCVR5cGVC
aW5kaW5nIGV4cHJUeXBlID0gdGhpcy5sZWZ0LnJlc29sdmVkVHlwZTsKIAkJCQkJCQlpZiAoZXhw
clR5cGUgPT0gbnVsbCB8fCAhZXhwclR5cGUuaXNWYWxpZEJpbmRpbmcoKSkKIAkJCQkJCQkJcmV0
dXJuIEZBTFNFOwpAQCAtNDQ4LDEwICs0NDgsMTAgQEAKIAkJCQkJCQkJcmV0dXJuIGZhbHNlOwog
CQkJCQkJCX0KIAkJCQkJCX0sIChCbG9ja1Njb3BlKW51bGwpOworCQkJCQkJfQogCQkJCQl9Ci0J
CQkJfQogCQkJCXJldHVybiB2YXJpYWJsZXM7Ci0JCQl9CisJCQkJfQogCQl9IGVsc2UgaWYgKHRo
aXMubGVmdCBpbnN0YW5jZW9mIFJlZmVyZW5jZUV4cHJlc3Npb24pIHsKIAkJCWlmICh0aGlzLnJp
Z2h0IGluc3RhbmNlb2YgSW5mZXJlbmNlVmFyaWFibGUpIHsKIAkJCQlyZXR1cm4gQ29sbGVjdGlv
bnMuc2luZ2xldG9uTGlzdCgoSW5mZXJlbmNlVmFyaWFibGUpdGhpcy5yaWdodCk7CmRpZmYgLS1n
aXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvbG9va3VwL0luZmVyZW5jZUNvbnRleHQxOC5qYXZhIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1
cC9JbmZlcmVuY2VDb250ZXh0MTguamF2YQppbmRleCA2MWZiY2MwLi45N2VmZjI2IDEwMDY0NAot
LS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvbG9va3VwL0luZmVyZW5jZUNvbnRleHQxOC5qYXZhCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9s
b29rdXAvSW5mZXJlbmNlQ29udGV4dDE4LmphdmEKQEAgLTUyMCw3ICs1MjAsOCBAQAogCQlQYXJh
bWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgbWV0aG9kVG9DaGVjayA9IG1ldGhvZDsKIAkJ
CiAJCWJvb2xlYW4gaGF2ZVByb3BlclRhcmdldFR5cGUgPSB0YXJnZXRUeXBlICE9IG51bGwgJiYg
dGFyZ2V0VHlwZS5pc1Byb3BlclR5cGUodHJ1ZSk7Ci0JCWlmIChoYXZlUHJvcGVyVGFyZ2V0VHlw
ZSB8fCAhaW52b2NhdGlvbi5nZXRFeHByZXNzaW9uQ29udGV4dCgpLmRlZmluZXNUYXJnZXRUeXBl
KCkpIHsKKwkJYm9vbGVhbiBpbmZlcnJlZEludm9jYXRpb25UeXBlID0gZmFsc2U7CisJCWlmICh0
YXJnZXRUeXBlICE9IG51bGwgfHwgIWludm9jYXRpb24uZ2V0RXhwcmVzc2lvbkNvbnRleHQoKS5k
ZWZpbmVzVGFyZ2V0VHlwZSgpKSB7CiAJCQlNZXRob2RCaW5kaW5nIG9yaWdpbmFsID0gbWV0aG9k
Lm9yaWdpbmFsTWV0aG9kOwogCQkJU29sdXRpb24gc29sdXRpb24gPSB0aGlzLnNvbHV0aW9uc1Bl
clRhcmdldFR5cGUuZ2V0KHRhcmdldFR5cGUpOwogCQkJQm91bmRTZXQgcmVzdWx0ID0gc29sdXRp
b24gIT0gbnVsbCA/IHNvbHV0aW9uLmJvdW5kcyA6IG51bGw7CkBAIC01NDEsNiArNTQyLDcgQEAK
IAkJCQkJCU51bGxBbm5vdGF0aW9uTWF0Y2hpbmcuY2hlY2tGb3JDb250cmFkaXRpb25zKGZpbmFs
TWV0aG9kLCBpbnZvY2F0aW9uLCB0aGlzLnNjb3BlKTsKIAkJCQkJaW52b2NhdGlvbi5yZWdpc3Rl
ckluZmVyZW5jZUNvbnRleHQoZmluYWxNZXRob2QsIHRoaXMpOwogCQkJCQl0aGlzLnNvbHV0aW9u
c1BlclRhcmdldFR5cGUucHV0KHRhcmdldFR5cGUsIG5ldyBTb2x1dGlvbihmaW5hbE1ldGhvZCwg
cmVzdWx0KSk7CisJCQkJCWluZmVycmVkSW52b2NhdGlvblR5cGUgPSB0cnVlOwogCQkJCX0KIAkJ
CX0KIAkJCWlmIChmaW5hbE1ldGhvZCAhPSBudWxsKQpAQCAtNTUzLDEyICs1NTUsMTEgQEAKIAkJ
aWYgKHByb2JsZW1NZXRob2QgIT0gbnVsbCkKIAkJCXJldHVybiBwcm9ibGVtTWV0aG9kOwogCi0J
CWlmICghaGF2ZVByb3BlclRhcmdldFR5cGUgJiYgaW52b2NhdGlvbi5nZXRFeHByZXNzaW9uQ29u
dGV4dCgpLmRlZmluZXNUYXJnZXRUeXBlKCkpCi0JCQlyZXR1cm4gbWV0aG9kOyAvLyBzdGlsbCBu
b3QgcmVhZHkhCi0KLQkJaWYgKGZpbmFsTWV0aG9kICE9IG51bGwpIHsKKwkJaWYgKGluZmVycmVk
SW52b2NhdGlvblR5cGUpIHsKIAkJCWlmIChyZWJpbmRJbm5lclBvbGllcyhmaW5hbE1ldGhvZCwg
aW52b2NhdGlvbikpCiAJCQkJcmV0dXJuIGZpbmFsTWV0aG9kOworCQl9IGVsc2UgaWYgKCFoYXZl
UHJvcGVyVGFyZ2V0VHlwZSAmJiBpbnZvY2F0aW9uLmdldEV4cHJlc3Npb25Db250ZXh0KCkuZGVm
aW5lc1RhcmdldFR5cGUoKSkgeworCQkJcmV0dXJuIG1ldGhvZDsgLy8gc3RpbGwgbm90IHJlYWR5
IQogCQl9CiAJCXJldHVybiBnZXRSZXR1cm5Qcm9ibGVtTWV0aG9kSWZOZWVkZWQodGFyZ2V0VHlw
ZSwgbWV0aG9kKTsKIAl9
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>247263</attachid>
            <date>2014-09-21 21:17:00 -0400</date>
            <delta_ts>2014-09-25 12:58:58 -0400</delta_ts>
            <desc>Revised patch - conforms to JLS and solves the problem</desc>
            <filename>Patch.patch</filename>
            <type>text/plain</type>
            <size>16868</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3RfMV84LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmlj
c1JlZ3Jlc3Npb25UZXN0XzFfOC5qYXZhCmluZGV4IGY3ZjEzYzUuLmExZWRkNzMgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3Rf
MV84LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdy
ZXNzaW9uVGVzdF8xXzguamF2YQpAQCAtMzA0MiwxMiArMzA0Miw3IEBACiAJCQkiCX1cbiIgKyAK
IAkJCSJ9XG4iCiAJCX0sCi0JCSItLS0tLS0tLS0tXG4iICsgCi0JCSIxLiBFUlJPUiBpbiBDb2xs
ZWN0b3JzTWFwcy5qYXZhIChhdCBsaW5lIDIwKVxuIiArIAotCQkiCXAgLT4gcC5saHMuc3RyZWFt
KCkubWFwKHA6OmtlZXBpbmdSaHMpKS5jb2xsZWN0KFxuIiArIAotCQkiCSAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXG4iICsgCi0JCSJUaGUgbWV0aG9kIGNv
bGxlY3QoQ29sbGVjdG9yPD8gc3VwZXIgT2JqZWN0LEEsUj4pIGluIHRoZSB0eXBlIFN0cmVhbTxP
YmplY3Q+IGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRzIChDb2xsZWN0b3I8Q29s
bGVjdG9yc01hcHMuUGFpcjxTdHJpbmcsU3RyaW5nPixjYXB0dXJlIzMtb2YgPyxNYXA8U3RyaW5n
LExpc3Q8U3RyaW5nPj4+KVxuIiArIAotCQkiLS0tLS0tLS0tLVxuIik7CisJCSIiKTsKIH0KIHB1
YmxpYyB2b2lkIF90ZXN0QnVnNDMyNjI2KCkgewogCXJ1bkNvbmZvcm1UZXN0KApAQCAtMzMwNyw3
ICszMzAyLDYgQEAKIAkJCSJpbXBvcnQgamF2YS51dGlsLkxpc3Q7XG4iICsgCiAJCQkiaW1wb3J0
IGphdmEudXRpbC5NYXA7XG4iICsgCiAJCQkiaW1wb3J0IGphdmEudXRpbC5NYXAuRW50cnk7XG4i
ICsgCi0JCQkiaW1wb3J0IGphdmEudXRpbC5mdW5jdGlvbi5GdW5jdGlvbjtcbiIgKyAKIAkJCSJp
bXBvcnQgamF2YS51dGlsLnN0cmVhbS5Db2xsZWN0b3I7XG4iICsgCiAJCQkiaW1wb3J0IGphdmEu
dXRpbC5zdHJlYW0uU3RyZWFtO1xuIiArIAogCQkJIlxuIiArIApAQCAtMzMyOCwxMiArMzMyMiw3
IEBACiAJCQkiCX1cbiIgKyAKIAkJCSJ9XG4iCiAJCX0sCi0JCSItLS0tLS0tLS0tXG4iICsgCi0J
CSIxLiBFUlJPUiBpbiBFeHRyYWN0TG9jYWxMYW1iZGEuamF2YSAoYXQgbGluZSAyMilcbiIgKyAK
LQkJIgkpLmNvbGxlY3QoZ3JvdXBpbmdCeSk7XG4iICsgCi0JCSIJICBeXl5eXl5eXG4iICsgCi0J
CSJUaGUgbWV0aG9kIGNvbGxlY3QoQ29sbGVjdG9yPD8gc3VwZXIgT2JqZWN0LEEsUj4pIGluIHRo
ZSB0eXBlIFN0cmVhbTxPYmplY3Q+IGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRz
IChDb2xsZWN0b3I8TWFwLkVudHJ5PFN0cmluZyxTdHJpbmc+LGNhcHR1cmUjMS1vZiA/LE1hcDxT
dHJpbmcsTGlzdDxTdHJpbmc+Pj4pXG4iICsgCi0JCSItLS0tLS0tLS0tXG4iKTsKKwkJIiIpOwog
fQogcHVibGljIHZvaWQgdGVzdEJ1ZzQzNTc2NygpIHsKIAlydW5OZWdhdGl2ZVRlc3QoCkBAIC0z
Mzc4LDE3ICszMzY3LDcgQEAKIAkJCSIJfVxuIiArIAogCQkJIn1cbiIKIAkJfSwKLQkJIi0tLS0t
LS0tLS1cbiIgKyAKLQkJIjEuIEVSUk9SIGluIER1bW15Q2xhc3MuamF2YSAoYXQgbGluZSAxOClc
biIgKyAKLQkJIgkuY29sbGVjdChDb2xsZWN0b3JzLnRvTWFwKHBhdGggLT4gdGhpcy5nZXRLZXko
cGF0aCksIHBhdGggLT4gdGhpcy5nZXRWYWx1ZShwYXRoKSkpKTtcbiIgKyAKLQkJIgkgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5cbiIgKyAKLQkJIlRoZSBtZXRo
b2QgZ2V0S2V5KFN0cmluZykgaW4gdGhlIHR5cGUgRHVtbXlDbGFzcyBpcyBub3QgYXBwbGljYWJs
ZSBmb3IgdGhlIGFyZ3VtZW50cyAoT2JqZWN0KVxuIiArIAotCQkiLS0tLS0tLS0tLVxuIiArIAot
CQkiMi4gRVJST1IgaW4gRHVtbXlDbGFzcy5qYXZhIChhdCBsaW5lIDE4KVxuIiArIAotCQkiCS5j
b2xsZWN0KENvbGxlY3RvcnMudG9NYXAocGF0aCAtPiB0aGlzLmdldEtleShwYXRoKSwgcGF0aCAt
PiB0aGlzLmdldFZhbHVlKHBhdGgpKSkpO1xuIiArIAotCQkiCSAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXG4i
ICsgCi0JCSJUaGUgbWV0aG9kIGdldFZhbHVlKFN0cmluZykgaW4gdGhlIHR5cGUgRHVtbXlDbGFz
cyBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoT2JqZWN0KVxuIiArIAotCQki
LS0tLS0tLS0tLVxuIik7CisJCSIiKTsKIH0KIHB1YmxpYyB2b2lkIHRlc3RCdWc0MzQ0ODMoKSB7
CiAJcnVuQ29uZm9ybVRlc3QoCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0
cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVz
c2lvbi9MYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRl
c3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdy
ZXNzaW9uL0xhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCmluZGV4IDRlODhhMmEuLjlkNDEzNjcg
MTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0xhbWJkYUV4cHJlc3Np
b25zVGVzdC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3Ny
Yy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0xhbWJkYUV4
cHJlc3Npb25zVGVzdC5qYXZhCkBAIC00MTYzLDcgKzQxNjMsNyBAQAogCQkiT0siKTsKIH0KIC8v
IGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00MzI2ODIsIFsx
LjhdW2NvbXBpbGVyXSBUeXBlIG1pc21hdGNoIGVycm9yIHdpdGggbGFtYmRhIGV4cHJlc3Npb24K
LXB1YmxpYyB2b2lkIF90ZXN0NDMyNjgyKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CitwdWJsaWMgdm9p
ZCB0ZXN0NDMyNjgyKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CiAJdGhpcy5ydW5Db25mb3JtVGVzdCgK
IAkJbmV3IFN0cmluZ1tdIHsKIAkJCSJYLmphdmEiLApAQCAtNDE4MSw3ICs0MTgxLDcgQEAKIAkJ
CSIJfVxuIiArCiAJCQkifVxuIgogCQl9LAotCQkiT0siKTsKKwkJInRydWUiKTsKIH0KIC8vIGh0
dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00MzI1MjAsIGNvbXBp
bGVyICJkdXBsaWNhdGUgbWV0aG9kIiBidWcgd2l0aCBsYW1kYXMgYW5kIGdlbmVyaWMgaW50ZXJm
YWNlcyAKIHB1YmxpYyB2b2lkIHRlc3Q0MzI1MjAoKSB0aHJvd3MgRXhjZXB0aW9uIHsKQEAgLTQ3
NDksNiArNDc0OSwyOSBAQAogCQl9LAogCQkiIik7CiB9CisvLyBodHRwczovL2J1Z3MuZWNsaXBz
ZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDQyOTE2LCAgWzEuOF1baW5mZXJlbmNlXSBUeXBl
IEluZmVyZW5jZSBpcyBicm9rZW4gZm9yIENvbXBsZXRhYmxlRnV0dXJlIHRoZW4tbWV0aG9kcyAg
CitwdWJsaWMgdm9pZCB0ZXN0NDQyOTE2KCkgeworCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCW5l
dyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJpbXBvcnQgc3RhdGljIGphdmEudXRpbC5j
b25jdXJyZW50LkNvbXBsZXRhYmxlRnV0dXJlLmNvbXBsZXRlZEZ1dHVyZTtcbiIgKworCQkJImlt
cG9ydCBqYXZhLnV0aWwuQXJyYXlzO1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5jb25jdXJy
ZW50LkNvbXBsZXRhYmxlRnV0dXJlO1xuIiArCisJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJ
CQkiICAgIHB1YmxpYyBzdGF0aWMgQ29tcGxldGFibGVGdXR1cmU8SW50ZWdlcj4gY2YoaW50IHZh
bHVlKSB7XG4iICsKKwkJCSIJCXJldHVybiBjb21wbGV0ZWRGdXR1cmUodmFsdWUpO1xuIiArCisJ
CQkiICAgIH1cbiIgKworCQkJIiAgICBwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBh
cmdzKSB7XG4iICsKKwkJCSIJCWNmKDEpLnRoZW5Db21wb3NlKCh4SW50KSAtPiBjZigyKS50aGVu
QXBwbHkoKHpJbnQpIC0+IEFycmF5cy5hc0xpc3QoeEludCwgekludCkpKVxuIiArCisJCQkiCQku
dGhlbkFjY2VwdCgoaW50cykgLT4ge1xuIiArCisJCQkiCQkJLyogISEhISBpbnRzIGlzIGluY29y
cmVjdGx5IGluZmVycmVkIHRvIGJlIGFuIE9iamVjdCwgYnV0IGl0IGlzIExpc3Q8SW50ZWdlcj4g
Ki9cbiIgKworCQkJIgkJCVN5c3RlbS5vdXQucHJpbnRsbihpbnRzLmdldCgwKSArIGludHMuZ2V0
KDEpKTsgLy8gc2hvdWxkIHByaW50IDM7XG4iICsKKwkJCSIJCX0pO1xuIiArCisJCQkiCX1cbiIg
KworCQkJIn1cbiIKKwkJfSwKKwkJIjMiKTsKK30KIHB1YmxpYyBzdGF0aWMgQ2xhc3MgdGVzdENs
YXNzKCkgewogCXJldHVybiBMYW1iZGFFeHByZXNzaW9uc1Rlc3QuY2xhc3M7CiB9CmRpZmYgLS1n
aXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2Uv
amR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OZWdhdGl2ZUxhbWJkYUV4cHJlc3Np
b25zVGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVnYXRpdmVMYW1i
ZGFFeHByZXNzaW9uc1Rlc3QuamF2YQppbmRleCBjNTAxMTA5Li45MzY4NWFiIDEwMDY0NAotLS0g
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0
L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OZWdhdGl2ZUxhbWJkYUV4cHJlc3Npb25z
VGVzdC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9v
cmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFt
YmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKQEAgLTk3MDcsNiArOTcwNywxMjQgQEAKIAl9LAogCSIi
KTsKIH0KKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00
Mzk1OTQgIFsxLjhdW2NvbXBpbGVyXSBuZXN0ZWQgbGFtYmRhIHR5cGUgaW5jb3JyZWN0bHkgaW5m
ZXJyZWQgdnMgamF2YWMKK3B1YmxpYyB2b2lkIHRlc3Q0Mzk1OTQoKSB7CisJdGhpcy5ydW5OZWdh
dGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwgCisJCQkiaW1wb3J0IGph
dmEudXRpbC5BcnJheUxpc3Q7XG4iICsKKwkJCSJpbXBvcnQgamF2YS51dGlsLkxpc3Q7XG4iICsK
KwkJCSJpbXBvcnQgamF2YS51dGlsLmZ1bmN0aW9uLkZ1bmN0aW9uO1xuIiArCisJCQkiaW1wb3J0
IGphdmEudXRpbC5mdW5jdGlvbi5QcmVkaWNhdGU7XG4iICsKKwkJCSJpbXBvcnQgamF2YS51dGls
LnN0cmVhbS5Db2xsZWN0b3JzO1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5zdHJlYW0uU3Ry
ZWFtO1xuIiArCisJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkiCXByb3RlY3RlZCBzdGF0
aWMgaW50ZXJmYWNlIElMaXN0RW50cnkge1xuIiArCisJCQkiCQlwdWJsaWMgPFQ+IFQgdmlzaXRS
ZWNvcmRzV2l0aFJlc3VsdChGdW5jdGlvbjxTdHJlYW08UmVjb3JkPixUPiBmdW5jKTsJCVxuIiAr
CisJCQkiCX1cbiIgKworCQkJIglwcm90ZWN0ZWQgc3RhdGljIGZpbmFsIGNsYXNzIEltbXV0YWJs
ZVJlY29yZCB7XG4iICsKKwkJCSIJCXB1YmxpYyBJbW11dGFibGVSZWNvcmQoUmVjb3JkIHIpIHsg
fVxuIiArCisJCQkiCX1cbiIgKworCQkJIglwcm90ZWN0ZWQgc3RhdGljIGZpbmFsIGNsYXNzIFJl
Y29yZCB7fVxuIiArCisJCQkiCXB1YmxpYyBMaXN0PEltbXV0YWJsZVJlY29yZD4gY29tcGlsZXNX
aXRoRWNsaXBzZUFuZEphdmFjKCkgXG4iICsKKwkJCSIJe1xuIiArCisJCQkiCQlyZXR1cm4gdmlz
aXRFbnRyaWVzV2l0aFJlc3VsdCggc3RyZWFtIC0+IHtcbiIgKworCQkJIgkJCXJldHVybiBzdHJl
YW0ubWFwKCBlbnRyeSAtPiB7XG4iICsKKwkJCSIJCQkJZmluYWwgTGlzdDxJbW11dGFibGVSZWNv
cmQ+IHJlc3VsdDEgPSBlbnRyeS52aXNpdFJlY29yZHNXaXRoUmVzdWx0KCBzdHJlYW0yIC0+IHN0
cmVhbTJcbiIgKworCQkJIgkJCQkJCS5maWx0ZXIoIHNvbWVQcmVkaWNhdGUoKSApXG4iICsKKwkJ
CSIJCQkJCQkubWFwKCBJbW11dGFibGVSZWNvcmQ6Om5ldyApXG4iICsKKwkJCSIJCQkJCQkuY29s
bGVjdCggQ29sbGVjdG9ycy50b0xpc3QoKSApXG4iICsKKwkJCSIJCQkJCSk7CVxuIiArCisJCQki
CQkJCXJldHVybiByZXN1bHQxO1xuIiArCisJCQkiCQkJfSkuZmxhdE1hcCggTGlzdDo6c3RyZWFt
ICkuY29sbGVjdCggQ29sbGVjdG9ycy50b0NvbGxlY3Rpb24oIEFycmF5TGlzdDo6bmV3ICkgKTtc
biIgKworCQkJIgkJfSk7CQlcbiIgKworCQkJIgl9CQlcbiIgKworCQkJIglwdWJsaWMgTGlzdDxJ
bW11dGFibGVSZWNvcmQ+IGNvbXBpbGVzV2l0aEphdmFjQnV0Tm90RWNsaXBzZTEoKSBcbiIgKwor
CQkJIgl7XG4iICsKKwkJCSIJCXJldHVybiB2aXNpdEVudHJpZXNXaXRoUmVzdWx0KCBzdHJlYW0g
LT4ge1xuIiArCisJCQkiCQkJcmV0dXJuIHN0cmVhbS5tYXAoIGVudHJ5IC0+IHtcbiIgKworCQkJ
IgkJCQlyZXR1cm4gZW50cnkudmlzaXRSZWNvcmRzV2l0aFJlc3VsdCggc3RyZWFtMiAtPiBzdHJl
YW0yXG4iICsKKwkJCSIJCQkJCQkuZmlsdGVyKCBzb21lUHJlZGljYXRlKCkgKVxuIiArCisJCQki
CQkJCQkJLm1hcCggSW1tdXRhYmxlUmVjb3JkOjpuZXcgKVxuIiArCisJCQkiCQkJCQkJLmNvbGxl
Y3QoIENvbGxlY3RvcnMudG9MaXN0KCkgKVxuIiArCisJCQkiCQkJCQkpOwlcbiIgKworCQkJIgkJ
CX0pLmZsYXRNYXAoIExpc3Q6OnN0cmVhbSApLmNvbGxlY3QoIENvbGxlY3RvcnMudG9Db2xsZWN0
aW9uKCBBcnJheUxpc3Q6Om5ldyApICk7XG4iICsKKwkJCSIJCX0pOwkJXG4iICsKKwkJCSIJfQkJ
XG4iICsKKwkJCSIJcHVibGljIExpc3Q8SW1tdXRhYmxlUmVjb3JkPiBjb21waWxlc1dpdGhKYXZh
Y0J1dE5vdEVjbGlwc2UyKCkgXG4iICsKKwkJCSIJe1xuIiArCisJCQkiCQlyZXR1cm4gdmlzaXRF
bnRyaWVzV2l0aFJlc3VsdCggc3RyZWFtIC0+IHtcbiIgKworCQkJIgkJCXJldHVybiBzdHJlYW0u
bWFwKCBlbnRyeSAtPiBlbnRyeS52aXNpdFJlY29yZHNXaXRoUmVzdWx0KCBzdHJlYW0yIC0+IHN0
cmVhbTJcbiIgKworCQkJIgkJCQkJCS5maWx0ZXIoIHNvbWVQcmVkaWNhdGUoKSApXG4iICsKKwkJ
CSIJCQkJCQkubWFwKCBJbW11dGFibGVSZWNvcmQ6Om5ldyApXG4iICsKKwkJCSIJCQkJCQkuY29s
bGVjdCggQ29sbGVjdG9ycy50b0xpc3QoKSApIClcbiIgKworCQkJIgkJCSkuZmxhdE1hcCggTGlz
dDo6c3RyZWFtICkuY29sbGVjdCggQ29sbGVjdG9ycy50b0NvbGxlY3Rpb24oIEFycmF5TGlzdDo6
bmV3ICkgKTtcbiIgKworCQkJIgkJfSk7CQlcbiIgKworCQkJIgl9CVxuIiArCisJCQkiCXB1Ymxp
YyBMaXN0PEltbXV0YWJsZVJlY29yZD4gY29tcGlsZXNXaXRoSmF2YWNCdXROb3RFY2xpcHNlMygp
IFxuIiArCisJCQkiCXtcbiIgKworCQkJIgkJcmV0dXJuIHZpc2l0RW50cmllc1dpdGhSZXN1bHQo
IHN0cmVhbSAtPiBzdHJlYW0ubWFwKCBlbnRyeSAtPiBlbnRyeS52aXNpdFJlY29yZHNXaXRoUmVz
dWx0KCBzdHJlYW0yIC0+IHN0cmVhbTJcbiIgKworCQkJIgkJCQkJCS5maWx0ZXIoIHNvbWVQcmVk
aWNhdGUoKSApXG4iICsKKwkJCSIJCQkJCQkubWFwKCBJbW11dGFibGVSZWNvcmQ6Om5ldyApXG4i
ICsKKwkJCSIJCQkJCQkuY29sbGVjdCggQ29sbGVjdG9ycy50b0xpc3QoKSApIClcbiIgKworCQkJ
IgkJCSlcbiIgKworCQkJIgkJCS5mbGF0TWFwKCBMaXN0OjpzdHJlYW0gKVxuIiArCisJCQkiCQkJ
LmNvbGxlY3QoIENvbGxlY3RvcnMudG9Db2xsZWN0aW9uKCBBcnJheUxpc3Q6Om5ldyApIClcbiIg
KworCQkJIgkJKTsJCVxuIiArCisJCQkiCX0JXG4iICsKKwkJCSIJcHJpdmF0ZSBzdGF0aWMgUHJl
ZGljYXRlPFJlY29yZD4gc29tZVByZWRpY2F0ZSgpIHtcbiIgKworCQkJIgkJcmV0dXJuIHJlY29y
ZCAtPiB0cnVlO1xuIiArCisJCQkiCX0JCVxuIiArCisJCQkiCXByaXZhdGUgPFQ+IFQgdmlzaXRF
bnRyaWVzV2l0aFJlc3VsdChGdW5jdGlvbjxTdHJlYW08SUxpc3RFbnRyeT4sVD4gZnVuYykge1xu
IiArCisJCQkiCQlyZXR1cm4gZnVuYy5hcHBseSggbmV3IEFycmF5TGlzdDxJTGlzdEVudHJ5Pigp
LnN0cmVhbSgpICk7XG4iICsKKwkJCSIJfVxuIiArCisJCQkifVxuIgorCX0sCisJIiIpOworfQor
Ly8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQzMzg1Miwg
WzEuOF1bY29tcGlsZXJdIEphdmFjIHJlamVjdHMgdHlwZSBpbmZlcmVuY2UgcmVzdWx0cyB0aGF0
IEVDSiBhY2NlcHRzCitwdWJsaWMgdm9pZCB0ZXN0NDMzODUyKCkgeworCXRoaXMucnVuTmVnYXRp
dmVUZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJIlguamF2YSIsIAorCQkJImltcG9ydCBqYXZh
LnV0aWwuT3B0aW9uYWw7XG4iICsKKwkJCSJpbXBvcnQgamF2YS51dGlsLmZ1bmN0aW9uLkZ1bmN0
aW9uO1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5zdHJlYW0uU3RyZWFtO1xuIiArCisJCQki
cHVibGljIGNsYXNzIFgge1xuIiArCisJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmlu
Z1tdIGFyZ3MpIHtcbiIgKworCQkJIgkJU3lzdGVtLm91dC5wcmludGxuKHRlc3QoU3RyZWFtLm9m
KFN0cmVhbS5vZihcIjNcIikpKSk7XG4iICsKKwkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbih0ZXN0
MihTdHJlYW0ub2YoU3RyZWFtLm9mKFwiMVwiKSkuc2tpcCgxKSkpO1xuIiArCisJCQkiCQlTeXN0
ZW0ub3V0LnByaW50bG4odGVzdDMxKFN0cmVhbS5vZihTdHJlYW0ub2YoXCIyXCIpKS5za2lwKDEp
KSk7XG4iICsKKwkJCSIJfVxuIiArCisJCQkiCXN0YXRpYyBPcHRpb25hbDxTdHJlYW08T2JqZWN0
Pj4gdGVzdChTdHJlYW08U3RyZWFtPFN0cmluZz4+IHMzMSkge1xuIiArCisJCQkiCQlyZXR1cm4g
czMxLm1hcChzMiAtPiBzMi5tYXAoczEgLT4gSW50ZWdlci5wYXJzZUludChzMSkpKS5maW5kQW55
KCk7XG4iICsKKwkJCSIJfVxuIiArCisJCQkiCXN0YXRpYyBPYmplY3QgdGVzdDIoU3RyZWFtPFN0
cmVhbTxTdHJpbmc+PiBzMykge1xuIiArCisJCQkiCQlyZXR1cm4gczMubWFwKHMyIC0+IHMyLm1h
cChzMSAtPiBJbnRlZ2VyLnBhcnNlSW50KHMxKSkpLmZsYXRNYXAoRnVuY3Rpb24uaWRlbnRpdHko
KSkuZmluZEFueSgpLm9yRWxzZShcbiIgKworCQkJIgkJICBYLmNsYXNzKTtcbiIgKworCQkJIgl9
XG4iICsKKwkJCSIJc3RhdGljIFN0cmVhbTxPYmplY3Q+IHRlc3QzMShTdHJlYW08U3RyZWFtPFN0
cmluZz4+IHMzKSB7XG4iICsKKwkJCSIJCXJldHVybiBzMy5tYXAoczIgLT4gczIubWFwKHMxIC0+
IEludGVnZXIucGFyc2VJbnQoczEpKSkuZmluZEFueSgpLm9yRWxzZShTdHJlYW0ub2YobmV3IE9i
amVjdCgpKSk7XG4iICsKKwkJCSIJfVxuIiArCisJCQkifVxuIgorCX0sCisJIi0tLS0tLS0tLS1c
biIgKyAKKwkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDExKVxuIiArIAorCSIJcmV0dXJu
IHMzMS5tYXAoczIgLT4gczIubWFwKHMxIC0+IEludGVnZXIucGFyc2VJbnQoczEpKSkuZmluZEFu
eSgpO1xuIiArIAorCSIJICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCisJIlR5cGUgbWlzbWF0Y2g6IGNhbm5vdCBj
b252ZXJ0IGZyb20gT3B0aW9uYWw8U3RyZWFtPEludGVnZXI+PiB0byBPcHRpb25hbDxTdHJlYW08
T2JqZWN0Pj5cbiIgKyAKKwkiLS0tLS0tLS0tLVxuIiArIAorCSIyLiBFUlJPUiBpbiBYLmphdmEg
KGF0IGxpbmUgMTQpXG4iICsgCisJIglyZXR1cm4gczMubWFwKHMyIC0+IHMyLm1hcChzMSAtPiBJ
bnRlZ2VyLnBhcnNlSW50KHMxKSkpLmZsYXRNYXAoRnVuY3Rpb24uaWRlbnRpdHkoKSkuZmluZEFu
eSgpLm9yRWxzZShcbiIgKyAKKwkiCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgXl5eXl5eXG4iICsgCisJIlRoZSBtZXRob2Qgb3JFbHNlKEludGVnZXIpIGluIHRoZSB0eXBl
IE9wdGlvbmFsPEludGVnZXI+IGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRzIChD
bGFzczxYPilcbiIgKyAKKwkiLS0tLS0tLS0tLVxuIiArIAorCSIzLiBFUlJPUiBpbiBYLmphdmEg
KGF0IGxpbmUgMTgpXG4iICsgCisJIglyZXR1cm4gczMubWFwKHMyIC0+IHMyLm1hcChzMSAtPiBJ
bnRlZ2VyLnBhcnNlSW50KHMxKSkpLmZpbmRBbnkoKS5vckVsc2UoU3RyZWFtLm9mKG5ldyBPYmpl
Y3QoKSkpO1xuIiArIAorCSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgXl5eXl5eXG4iICsgCisJIlRoZSBtZXRob2Qgb3JF
bHNlKFN0cmVhbTxJbnRlZ2VyPikgaW4gdGhlIHR5cGUgT3B0aW9uYWw8U3RyZWFtPEludGVnZXI+
PiBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoU3RyZWFtPE9iamVjdD4pXG4i
ICsgCisJIi0tLS0tLS0tLS1cbiIpOworfQogcHVibGljIHN0YXRpYyBDbGFzcyB0ZXN0Q2xhc3Mo
KSB7CiAJcmV0dXJuIE5lZ2F0aXZlTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmNsYXNzOwogfQpkaWZm
IC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xp
cHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbFR5cGVBbm5vdGF0aW9u
VGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbFR5cGVBbm5vdGF0
aW9uVGVzdC5qYXZhCmluZGV4IGFmZWM3ZWIuLmFhMGYwMDcgMTAwNjQ0Ci0tLSBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0
cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxUeXBlQW5ub3RhdGlvblRlc3QuamF2YQorKysgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2Nv
cmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OdWxsVHlwZUFubm90YXRpb25UZXN0LmphdmEK
QEAgLTY3NTAsMTEgKzY3NTAsNiBAQAogCQkiCWZpbHRlcjIubWFwKHAgLT4gbmV3IFBhaXI8Pih1
cGRhdGVUb0ZpbGUuZ2V0KHApLCBwLT5pZGVGaWxlcy5nZXQocCkpKTtcbiIgKyAKIAkJIgkgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXl5eXl5eXl5eXl5e
Xl5eXl5eXG4iICsgCiAJCSJUaGUgdGFyZ2V0IHR5cGUgb2YgdGhpcyBleHByZXNzaW9uIG11c3Qg
YmUgYSBmdW5jdGlvbmFsIGludGVyZmFjZVxuIiArIAotCQkiLS0tLS0tLS0tLVxuIiArIAotCQki
My4gRVJST1IgaW4gQnVpbGRJZGVNYWluLmphdmEgKGF0IGxpbmUgOSlcbiIgKyAKLQkJIglmaWx0
ZXIyLm1hcChwIC0+IG5ldyBQYWlyPD4odXBkYXRlVG9GaWxlLmdldChwKSwgcC0+aWRlRmlsZXMu
Z2V0KHApKSk7XG4iICsgCi0JCSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAotCQkiVGhlIHRhcmdldCB0eXBl
IG9mIHRoaXMgZXhwcmVzc2lvbiBtdXN0IGJlIGEgZnVuY3Rpb25hbCBpbnRlcmZhY2VcbiIgKyAK
IAkJIi0tLS0tLS0tLS1cbiIsCiAJCW5ldyBTdHJpbmdbXXtqZnhKYXJ9KTsKIH0KZGlmZiAtLWdp
dCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9sb29rdXAvQm91bmRTZXQuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQm91bmRTZXQu
amF2YQppbmRleCBjNDM4YWM1Li43MjJlMDQ1IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0Jv
dW5kU2V0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Cb3VuZFNldC5qYXZhCkBAIC0zODAsNiAr
MzgwLDEyIEBACiAJCX0KIAl9CiAKKwlwdWJsaWMgdm9pZCBhZGRCb3VuZHMoQm91bmRTZXQgdGhh
dCwgTG9va3VwRW52aXJvbm1lbnQgZW52aXJvbm1lbnQpIHsKKwkJaWYgKHRoYXQgPT0gbnVsbCB8
fCBlbnZpcm9ubWVudCA9PSBudWxsKQorCQkJcmV0dXJuOworCQlhZGRCb3VuZHModGhhdC5mbGF0
dGVuKCksIGVudmlyb25tZW50KTsKKwl9CisJCiAJcHJpdmF0ZSBib29sZWFuIGFkZEJvdW5kcyhU
eXBlQm91bmRbXSBuZXdCb3VuZHMsIExvb2t1cEVudmlyb25tZW50IGVudmlyb25tZW50KSB7CiAJ
CWJvb2xlYW4gaGFzUHJvcGVyQm91bmQgPSBmYWxzZTsKIAkJZm9yIChpbnQgaSA9IDA7IGkgPCBu
ZXdCb3VuZHMubGVuZ3RoOyBpKyspIHsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3Ry
YWludEV4cHJlc3Npb25Gb3JtdWxhLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRFeHBy
ZXNzaW9uRm9ybXVsYS5qYXZhCmluZGV4IDYyMGY0NjYuLmI3Y2I1ZjMgMTAwNjQ0Ci0tLSBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9sb29rdXAvQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhLmphdmEKKysrIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2xvb2t1cC9Db25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEuamF2YQpAQCAtMjksNiArMjksNyBA
QAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuUmVmZXJlbmNl
RXhwcmVzc2lvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0
LlJldHVyblN0YXRlbWVudDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIuYXN0LlN0YXRlbWVudDsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIubG9va3VwLkluZmVyZW5jZUNvbnRleHQxOC5Tb2x1dGlvbjsKIGltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkluZmVyZW5jZUNvbnRleHQxOC5TdXNwZW5k
ZWRJbmZlcmVuY2VSZWNvcmQ7CiAKIC8qKgpAQCAtMTI3LDYgKzEyOCwxNCBAQAogCQkJCQkJCQly
ZXR1cm4gRkFMU0U7CiAJCQkJCQkJcmV0dXJuIENvbnN0cmFpbnRUeXBlRm9ybXVsYS5jcmVhdGUo
ZXhwclR5cGUsIHRoaXMucmlnaHQsIENPTVBBVElCTEUsIHRoaXMuaXNTb2Z0KTsKIAkJCQkJCX0K
KwkJCQkJCS8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00
MzI2ODIsIDE4LjIuMSwgYnVsbGV0IDMsIGNsYXVzZSAyCisJCQkJCQkvLyAuLi4gdGhlIGNvbnN0
cmFpbnQgcmVkdWNlcyB0byB0aGUgYm91bmQgc2V0IEIzIHdoaWNoIHdvdWxkIGJlIHVzZWQgdG8g
ZGV0ZXJtaW5lIHRoZSBleHByZXNzaW9uJ3MgaW52b2NhdGlvbiB0eXBlIHdoZW4gdGFyZ2V0aW5n
IFQsIGFzIGRlZmluZWQgaW4gwqcxOC41LjIuCisJCQkJCQlTb2x1dGlvbiBzb2x1dGlvbiA9IGlu
bmVyQ3R4LmdldFJlc3VsdEZvcih0aGlzLnJpZ2h0KTsKKwkJCQkJCWlmIChzb2x1dGlvbiAhPSBu
dWxsKSB7CisJCQkJCQkJQm91bmRTZXQgYjMgPSBzb2x1dGlvbi5ib3VuZHM7CisJCQkJCQkJaW5m
ZXJlbmNlQ29udGV4dC5jdXJyZW50Qm91bmRzLmFkZEJvdW5kcyhiMywgaW5mZXJlbmNlQ29udGV4
dC5lbnZpcm9ubWVudCk7CisJCQkJCQkJcmV0dXJuIFRSVUU7CisJCQkJCQl9CiAJCQkJCQlpbmZl
cmVuY2VDb250ZXh0LmluZmVyZW5jZUtpbmQgPSBpbm5lckN0eC5pbmZlcmVuY2VLaW5kOwogCQkJ
CQkJaW5uZXJDdHgub3V0ZXJDb250ZXh0ID0gaW5mZXJlbmNlQ29udGV4dDsKIAkJCQkJfQpkaWZm
IC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2xvb2t1cC9JbmZlcmVuY2VDb250ZXh0MTguamF2YSBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9s
b29rdXAvSW5mZXJlbmNlQ29udGV4dDE4LmphdmEKaW5kZXggNjFmYmNjMC4uZmJjMWUzYiAxMDA2
NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2xvb2t1cC9JbmZlcmVuY2VDb250ZXh0MTguamF2YQorKysgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvbG9va3VwL0luZmVyZW5jZUNvbnRleHQxOC5qYXZhCkBAIC01MjAsNyArNTIwLDggQEAKIAkJ
UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIG1ldGhvZFRvQ2hlY2sgPSBtZXRob2Q7
CiAJCQogCQlib29sZWFuIGhhdmVQcm9wZXJUYXJnZXRUeXBlID0gdGFyZ2V0VHlwZSAhPSBudWxs
ICYmIHRhcmdldFR5cGUuaXNQcm9wZXJUeXBlKHRydWUpOwotCQlpZiAoaGF2ZVByb3BlclRhcmdl
dFR5cGUgfHwgIWludm9jYXRpb24uZ2V0RXhwcmVzc2lvbkNvbnRleHQoKS5kZWZpbmVzVGFyZ2V0
VHlwZSgpKSB7CisJCWJvb2xlYW4gaW5mZXJyZWRJbnZvY2F0aW9uVHlwZSA9IGZhbHNlOworCQlp
ZiAodGFyZ2V0VHlwZSAhPSBudWxsIHx8ICFpbnZvY2F0aW9uLmdldEV4cHJlc3Npb25Db250ZXh0
KCkuZGVmaW5lc1RhcmdldFR5cGUoKSkgewogCQkJTWV0aG9kQmluZGluZyBvcmlnaW5hbCA9IG1l
dGhvZC5vcmlnaW5hbE1ldGhvZDsKIAkJCVNvbHV0aW9uIHNvbHV0aW9uID0gdGhpcy5zb2x1dGlv
bnNQZXJUYXJnZXRUeXBlLmdldCh0YXJnZXRUeXBlKTsKIAkJCUJvdW5kU2V0IHJlc3VsdCA9IHNv
bHV0aW9uICE9IG51bGwgPyBzb2x1dGlvbi5ib3VuZHMgOiBudWxsOwpAQCAtNTQxLDYgKzU0Miw3
IEBACiAJCQkJCQlOdWxsQW5ub3RhdGlvbk1hdGNoaW5nLmNoZWNrRm9yQ29udHJhZGl0aW9ucyhm
aW5hbE1ldGhvZCwgaW52b2NhdGlvbiwgdGhpcy5zY29wZSk7CiAJCQkJCWludm9jYXRpb24ucmVn
aXN0ZXJJbmZlcmVuY2VDb250ZXh0KGZpbmFsTWV0aG9kLCB0aGlzKTsKIAkJCQkJdGhpcy5zb2x1
dGlvbnNQZXJUYXJnZXRUeXBlLnB1dCh0YXJnZXRUeXBlLCBuZXcgU29sdXRpb24oZmluYWxNZXRo
b2QsIHJlc3VsdCkpOworCQkJCQlpbmZlcnJlZEludm9jYXRpb25UeXBlID0gdHJ1ZTsKIAkJCQl9
CiAJCQl9CiAJCQlpZiAoZmluYWxNZXRob2QgIT0gbnVsbCkKQEAgLTU1MywxMiArNTU1LDExIEBA
CiAJCWlmIChwcm9ibGVtTWV0aG9kICE9IG51bGwpCiAJCQlyZXR1cm4gcHJvYmxlbU1ldGhvZDsK
IAotCQlpZiAoIWhhdmVQcm9wZXJUYXJnZXRUeXBlICYmIGludm9jYXRpb24uZ2V0RXhwcmVzc2lv
bkNvbnRleHQoKS5kZWZpbmVzVGFyZ2V0VHlwZSgpKQotCQkJcmV0dXJuIG1ldGhvZDsgLy8gc3Rp
bGwgbm90IHJlYWR5IQotCi0JCWlmIChmaW5hbE1ldGhvZCAhPSBudWxsKSB7CisJCWlmIChpbmZl
cnJlZEludm9jYXRpb25UeXBlKSB7CiAJCQlpZiAocmViaW5kSW5uZXJQb2xpZXMoZmluYWxNZXRo
b2QsIGludm9jYXRpb24pKQogCQkJCXJldHVybiBmaW5hbE1ldGhvZDsKKwkJfSBlbHNlIGlmICgh
aGF2ZVByb3BlclRhcmdldFR5cGUgJiYgaW52b2NhdGlvbi5nZXRFeHByZXNzaW9uQ29udGV4dCgp
LmRlZmluZXNUYXJnZXRUeXBlKCkpIHsKKwkJCXJldHVybiBtZXRob2Q7IC8vIHN0aWxsIG5vdCBy
ZWFkeSEKIAkJfQogCQlyZXR1cm4gZ2V0UmV0dXJuUHJvYmxlbU1ldGhvZElmTmVlZGVkKHRhcmdl
dFR5cGUsIG1ldGhvZCk7CiAJfQpAQCAtNTkyLDYgKzU5MywxMCBAQAogCQllbHNlCiAJCQlyZXR1
cm4gdGhpcy5zb2x1dGlvbnNQZXJUYXJnZXRUeXBlLmNvbnRhaW5zS2V5KHRhcmdldFR5cGUpOwog
CX0KKwkKKwlwdWJsaWMgU29sdXRpb24gZ2V0UmVzdWx0Rm9yKFR5cGVCaW5kaW5nIHRhcmdldFR5
cGUpIHsKKwkJcmV0dXJuIHRoaXMuc29sdXRpb25zUGVyVGFyZ2V0VHlwZS5nZXQodGFyZ2V0VHlw
ZSk7CisJfQogCiAJcHVibGljIGJvb2xlYW4gcmVnaXN0ZXJTb2x1dGlvbihUeXBlQmluZGluZyB0
YXJnZXRUeXBlLCBNZXRob2RCaW5kaW5nIHVwZGF0ZWRCaW5kaW5nKSB7CiAJCVNvbHV0aW9uIHNv
bHV0aW9uID0gdGhpcy5zb2x1dGlvbnNQZXJUYXJnZXRUeXBlLmdldCh0YXJnZXRUeXBlKTs=
</data>

          </attachment>
      

    </bug>

</bugzilla>