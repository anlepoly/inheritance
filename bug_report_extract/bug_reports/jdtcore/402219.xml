<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>402219</bug_id>
          
          <creation_ts>2013-03-02 22:16:00 -0500</creation_ts>
          <short_desc>[1.8][compiler] Compile time errors in lambda during hypothetical type check should render candidate method inapplicable.</short_desc>
          <delta_ts>2013-12-07 16:18:30 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>400871</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2225020</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-02 22:16:02 -0500</bug_when>
    <thetext>BETA_JAVA8:

The following program is required to be rejected per 0.6.1 with
a &quot;method is ambiguous&quot; error. Beginning 0.6.2 though, compile
errors discovered during (potential and full) applicability analysis
should disqualify an overload resolution candidate method and the
program should compile.

// ----
interface I {
	String foo(String s1, String s2);
}

interface J {
	X foo(X x1, X x2);
}

public class X { 
	void goo(I i) {}
	void goo(J j) {}
    public static void main(String [] args) {
	new X().goo((p1, p2) -&gt; p1 = p1 + p2);
    }
}  
// -----

ECJ has already been &quot;partly&quot; implementing this semantics: if the body of
the lambda were to be p1 + p2 instead of p1 = p1 + p2, we would not report
any ambiguity - (because return expressions need to be analyzed for assignment
compatibility as a part of cpmpatibility check, an erroneous return type
would fail to quality)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2225060</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-03 04:59:04 -0500</bug_when>
    <thetext>Fix and tests released via: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=16151d07e4904ee08ac48f6566d670b6d78a3084</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2225063</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-03 05:22:11 -0500</bug_when>
    <thetext>For posterity: Some of the discussions that should have happened here
happened here instead: https://bugs.eclipse.org/bugs/show_bug.cgi?id=382721#c49
through https://bugs.eclipse.org/bugs/show_bug.cgi?id=382721#c54</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2338985</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-07 07:10:30 -0500</bug_when>
    <thetext>Srikanth: are the expectations in NegativeLambdaExpressionsTest.test402219() ff already the optimal version? I&apos;m asking because experiments to improve ASTNode.resolvePolyExpressionArguments() (ne ASTNode.polyExpressionsHaveErrors()) result in much fewer errors being reported. What I saw from a first glance seemed to look like an improvement but I didn&apos;t understand the subtleties of the variants among those tests.

If you see leeway in test expectations, can you provide an optimal version so I can try to achieve those best results? Or should I make an offer what the behavior would be with my pending changes?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2338988</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-12-07 07:37:10 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #3)
&gt; Srikanth: are the expectations in NegativeLambdaExpressionsTest.test402219()
&gt; ff already the optimal version? I&apos;m asking because experiments to improve

No, they are not optimal. for the time being, I have pushed this elephant under
these rugs: 

https://bugs.eclipse.org/bugs/show_bug.cgi?id=406614
https://bugs.eclipse.org/bugs/show_bug.cgi?id=400831

In my experience, there is a fair bit of instability in the messages. Make
a small code change/fix to overload resolution, you see a flurry of not-invalid,
not-particularly-better changes showing up in test case behavior.

You are welcome to take a shot - I am sure there is lots of scope for improvement.
Optimal version is one that is correct, minimal, descriptive, explanatory etc :)

I have in mind two changes for those bugs cited above:

(1) Change the best guess algorithms for PMB to take into functional interface
types.

(2) When there is overload resolution failure either due to no method being
applicable or there being no most specific method, emit detailed error message
under an option that will spell out why each candidate was rejected.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2339050</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-07 16:18:30 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #4)
&gt; I have in mind two changes for those bugs cited above:
&gt; 
&gt; (1) Change the best guess algorithms for PMB to take into functional
&gt; interface
&gt; types.
&gt; 
&gt; (2) When there is overload resolution failure either due to no method being
&gt; applicable or there being no most specific method, emit detailed error
&gt; message
&gt; under an option that will spell out why each candidate was rejected.

X-ref: It seems my rugs are relevant for these issues, too:

Bug 423504 - [1.8] Implement &quot;18.5.3 Functional Interface Parameterization Inference&quot;

Bug 423505 - [1.8] Implement &quot;18.5.4 More Specific Method Inference&quot;

I&apos;m not sure which ones of these are top priority for a first EA of the inference (if any).</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>