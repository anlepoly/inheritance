<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>441734</bug_id>
          
          <creation_ts>2014-08-13 16:05:00 -0400</creation_ts>
          <short_desc>[1.8][inference] Generic method with nested parameterized type argument fails on method reference</short_desc>
          <delta_ts>2015-01-20 01:29:27 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.5</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.4.2</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Sean Van Gorder">sean.van.gorder</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>hall</cc>
    
    <cc>jarthana</cc>
    
    <cc>manpalat</cc>
    
    <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2438741</commentid>
    <comment_count>0</comment_count>
    <who name="Sean Van Gorder">sean.van.gorder</who>
    <bug_when>2014-08-13 16:05:34 -0400</bug_when>
    <thetext>The following class compiles with javac.exe (JDK 8u11 x86), but fails in Eclipse (tested on 4.4.0, 4.5M1, and I20140812-0800):

class Example {
    void foo(Iterable&lt;Number&gt; x) { }

    &lt;T&gt; void bar(Consumer&lt;Iterable&lt;T&gt;&gt; f) { }

    void test() {
        //call 1: lambda w/argument type - OK
        bar((Iterable&lt;Number&gt; x) -&gt; foo(x));

        //call 2: lambda w/explicit type - OK
        this.&lt;Number&gt; bar(x -&gt; foo(x));

        //call 3: method ref w/explicit type - OK
        this.&lt;Number&gt; bar(this::foo);

        //call 4: lambda w/implicit type - correctly(?) fails*
        //bar(x -&gt; foo(x));

        //call 5: method ref w/implicit type - BUG!
        bar(this::foo); // errors!
    }
}

The last method call gives two errors in Eclipse:
1. The method bar(Consumer&lt;Iterable&lt;T&gt;&gt;) in the type Example is not applicable for the arguments (this::foo)
2. The type Example does not define foo(Iterable&lt;T&gt;) that is applicable here

The types Consumer, Iterable, and Number are arbitrary and can be replaced with any functional interface, generic type, and non-generic type (ex. Predicate, Optional, String). Giving foo a return type or additional arguments to fit a different interface does not affect the bug.

The problem seems to stem from the nesting of the generic type parameter. The bug will not trigger if:
- bar is changed to &quot;&lt;T extends Iterable&lt;Number&gt;&gt; void bar(Consumer&lt;T&gt; f)&quot;
- All instances of Iterable&lt;_&gt; are replaced with their parameter (T or Number)
- bar is changed to &quot;void bar(Consumer&lt;Iterable&lt;Number&gt;&gt; f)&quot;


*Surprisingly, javac will infer the type for the implicit method reference, but not for the implicit lambda (call 4). It just assigns Object to T and gives an &quot;incompatible types&quot; error. Eclipse does this as well, so I assume this is somehow correct behavior.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2438823</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-08-13 20:35:26 -0400</bug_when>
    <thetext>Stephan, thanks for taking a look.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2439120</commentid>
    <comment_count>2</comment_count>
    <who name="Sean Van Gorder">sean.van.gorder</who>
    <bug_when>2014-08-14 10:49:22 -0400</bug_when>
    <thetext>Found another way to avoid triggering the bug: change foo&apos;s argument type to Iterable&lt;? extends Number&gt;. The tooltip shows that T is inferred to be Number.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2439123</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-08-14 10:58:56 -0400</bug_when>
    <thetext>With my WIP from bug 434483 call 5 is now accepted.

*** This bug has been marked as a duplicate of bug 434483 ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2444870</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-08-28 08:27:37 -0400</bug_when>
    <thetext>Unfortunately, the final fix in bug 434483 leaves this issue unresolved -&gt; re-opening.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2445821</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-08-31 08:45:45 -0400</bug_when>
    <thetext>During inference a search for an applicable method for this::foo failed the test for argument compatibility. At a closer look this happened when targeting a non-proper type; the descriptor argument was resolved to Iterable&lt;T#0&gt; (T#0 being an inference variable). Since type compatibility is not defined for inference variables we did not recognize the method as applicable.

Resolved by detecting this situation (ReferenceExpression during trial resolution) and tolerating any non-proper types, knowing that inference will take care of compatibility in this situation.

In times of leisure we might want to consider inventing our own rules for type compatibility involving inference variables. Maybe this would simplify the entire business around Scope.parameterCompatibilityLevel18()... OTOH, during &quot;normal&quot; operation we&apos;d want to be alerted if an inference variable has erroneously leaked inference ... so anything we&apos;d do must be context sensitive ...

Released for 4.5 M2 via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=97ecea4988b025b105080d33f2f05e43659a9d0a</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2452591</commentid>
    <comment_count>6</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-09-16 11:53:04 -0400</bug_when>
    <thetext>Verified for Mars 4.5M2 using I20140915-2000 build.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2473900</commentid>
    <comment_count>7</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-10-30 02:20:31 -0400</bug_when>
    <thetext>Reopening for back porting.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2475051</commentid>
    <comment_count>8</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-11-01 07:25:15 -0400</bug_when>
    <thetext>The key element in this fix is a new flag &quot;tolerateInferenceVariables&quot;.
Note that this goes away again in bug 437444.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2477663</commentid>
    <comment_count>9</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-11-06 03:14:14 -0500</bug_when>
    <thetext>Released in R4_4_maintenance via commit(s):

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=R4_4_maintenance&amp;id=f572e1b80a09e5a777bff45b8a460eee0809d073</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2488566</commentid>
    <comment_count>10</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-11-25 01:09:07 -0500</bug_when>
    <thetext>*** Bug 453117 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2507639</commentid>
    <comment_count>11</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2015-01-20 01:29:27 -0500</bug_when>
    <thetext>Verified for 4.4.2 RC1 using build M20150114-1500.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>