<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>425156</bug_id>
          
          <creation_ts>2014-01-09 03:13:00 -0500</creation_ts>
          <short_desc>[1.8] Lambda as an argument is flagged with incompatible error</short_desc>
          <delta_ts>2014-01-21 09:12:36 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>424053</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Jay Arthanareeswaran">jarthana</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2347275</commentid>
    <comment_count>0</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-01-09 03:13:02 -0500</bug_when>
    <thetext>This happens only when the parameter of the method being invoked is a parameterized type with wildcard. Here is an example:

interface I&lt;T&gt; {
    void foo(T t);
}
public class X {
    void bar(I&lt;?&gt; i) {
        i.foo(null);
    }
    void run() {
        bar((X x) -&gt; {}); // Incompatible error reported
    }
}

The reported error:
The method bar(I&lt;?&gt;) in the type X is not applicable for the arguments ((X x) -&gt; {
})

The error goes away when bar() is rewritten to be &quot;void bar(I&lt;X&gt; i)&quot;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2347289</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-09 03:37:43 -0500</bug_when>
    <thetext>I suspect some same underlying problem is contributing to multiple failures
in different scenarios ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2349172</commentid>
    <comment_count>2</comment_count>
      <attachid>238940</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-13 16:51:03 -0500</bug_when>
    <thetext>Created attachment 238940
work in progress

Here&apos;s my today&apos;s status for this bug, which shuffles around bits and pieces of lambda resolution =&gt; I wouldn&apos;t mind a second pair of eyes :)

LE.isCompatibleWith specifically lacked the part of 15.27.3 where they define a &quot;ground target type&quot;. We had part of that in LE.resolveType which I extracted into a new method LE.findGroundTargetType().

This revealed that here we still missed the part about &quot;the non-wildcard parameterization (9.8) of the target type.&quot;. This was covered in PTB.getSingleAbstractMethod(), so I extracted that section, too, into a new method PTB.getNonWildcardParameterization().

At this point the example in this bug compiles fine, with the following sacrifices:

- after moving around sections inside LE.isCompatibleWith() the block inside &quot;if (this.assistNode)&quot; is no longer valid, because the sam is now computed only below this point (see the FIXME).

- I saw duplicate reporting of sam problems, my fix to this is somewhat clumsy.

- 10 other tests (from RunAllJava8Tests) change their output, some might be OK, but probably not all. A common theme is: we accept more lambdas as compatible (that&apos;s what this bug is all about) which leads to more cases of reporting ambiguous methods.

So, either my solution is too radical, accepting too many lambdas, or, this fix reveals that we need a real, inference base implementation of &quot;18.5.4 More Specific Method Inference&quot;, to better select from multiple candidates.

I&apos;ll draft an implementation for 18.5.4 soon, to see if that improves the situation in this bug.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2351594</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-19 15:09:54 -0500</bug_when>
    <thetext>With my draft implementation in bug 423505 in place, the number of regressions in this bug went down from 10 to 9, not a real break through :-/

Back to debugging ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2351621</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-19 18:14:57 -0500</bug_when>
    <thetext>OK, I found a couple of bugs, which could be easily fixed once identified:
- don&apos;t set LE.resolvedType if no sam can be found, would be wrongly seen
  as compatible
- after reshuffling stanzas in LE.isCompatibleWith() we must ensure that
  lookup of the sam always occurs before answering true

All remaining effects on tests look acceptable to me: we report more errors in some cases, but it&apos;s more like reporting secondary errors (where it&apos;s not always clear which error *is* the primary one), no tests changing from pass to fail. One test (OverloadResolutionTest8.test004()) now actually reports 2 errors which we wanted to see earlier, but failed.

With this the bug can be closed independently of bug 423505.

I&apos;m leaving a FIXME inside LE.isCompatibleWith() which will probably become obsolete once the shape analysis story is revisited.

Released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=a06fd70a66cd192fe200df3baf9406d9e87b6313</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>238940</attachid>
            <date>2014-01-13 16:51:00 -0500</date>
            <delta_ts>2014-01-13 16:51:03 -0500</delta_ts>
            <desc>work in progress</desc>
            <filename>Bug-425156--18-Lambda-as-an-argument-is-flagged-with.patch</filename>
            <type>text/plain</type>
            <size>16061</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3RfMV84LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmlj
c1JlZ3Jlc3Npb25UZXN0XzFfOC5qYXZhCmluZGV4IDQ0MzE3ZjcuLjllY2JkZDggMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3Rf
MV84LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdy
ZXNzaW9uVGVzdF8xXzguamF2YQpAQCAtODcwLDQgKzg3MCwyMSBAQAogCQkJIn1cbiIKIAkJfSk7
CiB9CitwdWJsaWMgdm9pZCB0ZXN0QnVnNDI1MTU2KCkgeworCXJ1bkNvbmZvcm1UZXN0KAorCQlu
ZXcgU3RyaW5nW10geworCQkJIlguamF2YSIsCisJCQkiaW50ZXJmYWNlIEk8VD4ge1xuIiArIAor
CQkJIiAgICB2b2lkIGZvbyhUIHQpO1xuIiArIAorCQkJIn1cbiIgKyAKKwkJCSJwdWJsaWMgY2xh
c3MgWCB7XG4iICsgCisJCQkiICAgIHZvaWQgYmFyKEk8Pz4gaSkge1xuIiArIAorCQkJIiAgICAg
ICAgaS5mb28obnVsbCk7XG4iICsgCisJCQkiICAgIH1cbiIgKyAKKwkJCSIgICAgdm9pZCBydW4o
KSB7XG4iICsgCisJCQkiICAgICAgICBiYXIoKFggeCkgLT4ge30pOyAvLyBJbmNvbXBhdGlibGUg
ZXJyb3IgcmVwb3J0ZWRcbiIgKyAKKwkJCSIgICAgfVxuIiArIAorCQkJIn1cbiIKKwkJfSk7Cit9
CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Z1bmN0aW9uYWxFeHByZXNzaW9uLmphdmEgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvYXN0L0Z1bmN0aW9uYWxFeHByZXNzaW9uLmphdmEKaW5kZXggMmYzOWI0MS4uY2MwMTg5
YiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9GdW5jdGlvbmFsRXhwcmVzc2lvbi5qYXZhCisrKyBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hc3QvRnVuY3Rpb25hbEV4cHJlc3Npb24uamF2YQpAQCAtNTUsNiArNTUsNyBAQAog
CXByb3RlY3RlZCBib29sZWFuIGVsbGlwc2lzQXJndW1lbnQ7CiAJcHVibGljIGludCBib290c3Ry
YXBNZXRob2ROdW1iZXIgPSAtMTsKIAlwcm90ZWN0ZWQgc3RhdGljIElFcnJvckhhbmRsaW5nUG9s
aWN5IHNpbGVudEVycm9ySGFuZGxpbmdQb2xpY3kgPSBEZWZhdWx0RXJyb3JIYW5kbGluZ1BvbGlj
aWVzLmlnbm9yZUFsbFByb2JsZW1zKCk7CisJcHJpdmF0ZSBib29sZWFuIGhhc1JlcG9ydGVkU2Ft
UHJvYmxlbSA9IGZhbHNlOwogCiAJcHVibGljIEZ1bmN0aW9uYWxFeHByZXNzaW9uKENvbXBpbGF0
aW9uUmVzdWx0IGNvbXBpbGF0aW9uUmVzdWx0KSB7CiAJCXRoaXMuY29tcGlsYXRpb25SZXN1bHQg
PSBjb21waWxhdGlvblJlc3VsdDsKQEAgLTEzMywxNSArMTM0LDIwIEBACiAJfQogCiAJcHJvdGVj
dGVkIFR5cGVCaW5kaW5nIHJlcG9ydFNhbVByb2JsZW0oQmxvY2tTY29wZSBibG9ja1Njb3BlLCBN
ZXRob2RCaW5kaW5nIHNhbSkgeworCQlpZiAodGhpcy5oYXNSZXBvcnRlZFNhbVByb2JsZW0pCisJ
CQlyZXR1cm4gbnVsbDsKIAkJc3dpdGNoIChzYW0ucHJvYmxlbUlkKCkpIHsKIAkJCWNhc2UgUHJv
YmxlbVJlYXNvbnMuTm9TdWNoU2luZ2xlQWJzdHJhY3RNZXRob2Q6CiAJCQkJYmxvY2tTY29wZS5w
cm9ibGVtUmVwb3J0ZXIoKS50YXJnZXRUeXBlSXNOb3RBRnVuY3Rpb25hbEludGVyZmFjZSh0aGlz
KTsKKwkJCQl0aGlzLmhhc1JlcG9ydGVkU2FtUHJvYmxlbSA9IHRydWU7CiAJCQkJYnJlYWs7CiAJ
CQljYXNlIFByb2JsZW1SZWFzb25zLk5vdEFXZWxsRm9ybWVkUGFyYW1ldGVyaXplZFR5cGU6CiAJ
CQkJYmxvY2tTY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5pbGxGb3JtZWRQYXJhbWV0ZXJpemF0aW9u
T2ZGdW5jdGlvbmFsSW50ZXJmYWNlKHRoaXMpOworCQkJCXRoaXMuaGFzUmVwb3J0ZWRTYW1Qcm9i
bGVtID0gdHJ1ZTsKIAkJCQlicmVhazsKIAkJCWNhc2UgUHJvYmxlbVJlYXNvbnMuSW50ZXJzZWN0
aW9uSGFzTXVsdGlwbGVGdW5jdGlvbmFsSW50ZXJmYWNlczoKIAkJCQlibG9ja1Njb3BlLnByb2Js
ZW1SZXBvcnRlcigpLm11bHRpcGxlRnVuY3Rpb25hbEludGVyZmFjZXModGhpcyk7CisJCQkJdGhp
cy5oYXNSZXBvcnRlZFNhbVByb2JsZW0gPSB0cnVlOwogCQkJCWJyZWFrOwogCQl9CiAJCXJldHVy
biBudWxsOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9MYW1iZGFFeHByZXNzaW9uLmphdmEgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvYXN0L0xhbWJkYUV4cHJlc3Npb24uamF2YQppbmRleCBlMDk4YTlhLi4yMzExNzI3IDEw
MDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L0xhbWJkYUV4cHJlc3Npb24uamF2YQorKysgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
YXN0L0xhbWJkYUV4cHJlc3Npb24uamF2YQpAQCAtMjgyLDI1ICsyODIsMTQgQEAKIAkJCX0KIAkJ
fQogCQlpZiAoIWFyZ3VtZW50c1R5cGVFbGlkZWQgJiYgIWJ1Z2d5QXJndW1lbnRzKSB7Ci0JCQlQ
YXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgd2l0aFdpbGRDYXJkcyA9IEluZmVyZW5jZUNvbnRleHQx
OC5wYXJhbWV0ZXJpemVkV2l0aFdpbGRjYXJkKHRoaXMuZXhwZWN0ZWRUeXBlKTsKLQkJCWlmICh3
aXRoV2lsZENhcmRzICE9IG51bGwpIHsKLQkJCQkvLyBpbnZva2UgMTguNS4zIEZ1bmN0aW9uYWwg
SW50ZXJmYWNlIFBhcmFtZXRlcml6YXRpb24gSW5mZXJlbmNlCi0JCQkJSW5mZXJlbmNlQ29udGV4
dDE4IGN0eCA9IG5ldyBJbmZlcmVuY2VDb250ZXh0MTgobWV0aG9kU2NvcGUpOwotCQkJCVR5cGVC
aW5kaW5nW10gcSA9IGN0eC5jcmVhdGVCb3VuZHNGb3JGdW5jdGlvbmFsSW50ZXJmYWNlUGFyYW1l
dGVyaXphdGlvbkluZmVyZW5jZSh3aXRoV2lsZENhcmRzKTsKLQkJCQlpZiAocS5sZW5ndGggIT0g
dGhpcy5hcmd1bWVudHMubGVuZ3RoKSB7Ci0JCQkJCS8vIGZhaWwgIFRPRE86IGNhbiB0aGlzIHN0
aWxsIGhhcHBlbiBoZXJlPwotCQkJCX0gZWxzZSB7Ci0JCQkJCWlmIChjdHgucmVkdWNlV2l0aEVx
dWFsaXR5Q29uc3RyYWludHModGhpcy5hcmd1bWVudFR5cGVzLCBxKSkgewotCQkJCQkJVHlwZUJp
bmRpbmdbXSBhID0gd2l0aFdpbGRDYXJkcy5hcmd1bWVudHM7Ci0JCQkJCQlUeXBlQmluZGluZ1td
IGFwcmltZSA9IGN0eC5nZXRGdW5jdGlvbkludGVyZmFjZUFyZ3VtZW50U29sdXRpb25zKGEpOwot
CQkJCQkJLy8gVE9ETyBJZiBGPEEnMSwgLi4uLCBBJ20+IGlzIGEgd2VsbC1mb3JtZWQgdHlwZSwg
Li4uCi0JCQkJCQlSZWZlcmVuY2VCaW5kaW5nIGdlbmVyaWNUeXBlID0gd2l0aFdpbGRDYXJkcy5n
ZW5lcmljVHlwZSgpOwotCQkJCQkJdGhpcy5yZXNvbHZlZFR5cGUgPSBibG9ja1Njb3BlLmVudmly
b25tZW50KCkuY3JlYXRlUGFyYW1ldGVyaXplZFR5cGUoZ2VuZXJpY1R5cGUsIGFwcmltZSwgZ2Vu
ZXJpY1R5cGUuZW5jbG9zaW5nVHlwZSgpKTsKLQkJCQkJCXRoaXMuZGVzY3JpcHRvciA9IHRoaXMu
cmVzb2x2ZWRUeXBlLmdldFNpbmdsZUFic3RyYWN0TWV0aG9kKGJsb2NrU2NvcGUsIHRydWUpOwot
CQkJCQkJaWYgKCF0aGlzLmRlc2NyaXB0b3IuaXNWYWxpZEJpbmRpbmcoKSkKLQkJCQkJCQlyZXBv
cnRTYW1Qcm9ibGVtKGJsb2NrU2NvcGUsIHRoaXMuZGVzY3JpcHRvcik7Ci0JCQkJCX0KLQkJCQl9
CisJCQlSZWZlcmVuY2VCaW5kaW5nIGdyb3VuZFR5cGUgPSBudWxsOworCQkJaWYgKHRoaXMuZXhw
ZWN0ZWRUeXBlIGluc3RhbmNlb2YgUmVmZXJlbmNlQmluZGluZykKKwkJCQlncm91bmRUeXBlID0g
ZmluZEdyb3VuZFRhcmdldFR5cGUoYmxvY2tTY29wZSwgKFJlZmVyZW5jZUJpbmRpbmcpdGhpcy5l
eHBlY3RlZFR5cGUsIGFyZ3VtZW50c1R5cGVFbGlkZWQpOworCQkJaWYgKGdyb3VuZFR5cGUgIT0g
bnVsbCkgeworCQkJCXRoaXMucmVzb2x2ZWRUeXBlID0gZ3JvdW5kVHlwZTsKKwkJCQl0aGlzLmRl
c2NyaXB0b3IgPSBncm91bmRUeXBlLmdldFNpbmdsZUFic3RyYWN0TWV0aG9kKGJsb2NrU2NvcGUs
IHRydWUpOworCQkJCWlmICghdGhpcy5kZXNjcmlwdG9yLmlzVmFsaWRCaW5kaW5nKCkpCisJCQkJ
CXJlcG9ydFNhbVByb2JsZW0oYmxvY2tTY29wZSwgdGhpcy5kZXNjcmlwdG9yKTsKIAkJCX0KIAkJ
fQogCQlmb3IgKGludCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CkBAIC0zOTUsNiArMzg0LDM1
IEBACiAJCQl0aGlzLmlzU2VyaWFsaXphYmxlID0gdHJ1ZTsKIAkJfQogCQlyZXR1cm4gdGhpcy5y
ZXNvbHZlZFR5cGU7CisJfQorCisJcHJpdmF0ZSBSZWZlcmVuY2VCaW5kaW5nIGZpbmRHcm91bmRU
YXJnZXRUeXBlKEJsb2NrU2NvcGUgYmxvY2tTY29wZSwgUmVmZXJlbmNlQmluZGluZyB0YXJnZXRU
eXBlLCBib29sZWFuIGFyZ3VtZW50VHlwZXNFbGlkZWQpIHsKKwkJUGFyYW1ldGVyaXplZFR5cGVC
aW5kaW5nIHdpdGhXaWxkQ2FyZHMgPSBJbmZlcmVuY2VDb250ZXh0MTgucGFyYW1ldGVyaXplZFdp
dGhXaWxkY2FyZCh0YXJnZXRUeXBlKTsKKwkJaWYgKHdpdGhXaWxkQ2FyZHMgIT0gbnVsbCkgewor
CQkJUmVmZXJlbmNlQmluZGluZyBnZW5lcmljVHlwZSA9IHdpdGhXaWxkQ2FyZHMuZ2VuZXJpY1R5
cGUoKTsKKwkJCWlmICghYXJndW1lbnRUeXBlc0VsaWRlZCkgeworCQkJCS8vIGludm9rZSAxOC41
LjMgRnVuY3Rpb25hbCBJbnRlcmZhY2UgUGFyYW1ldGVyaXphdGlvbiBJbmZlcmVuY2UKKwkJCQlJ
bmZlcmVuY2VDb250ZXh0MTggY3R4ID0gbmV3IEluZmVyZW5jZUNvbnRleHQxOChibG9ja1Njb3Bl
KTsKKwkJCQlUeXBlQmluZGluZ1tdIHEgPSBjdHguY3JlYXRlQm91bmRzRm9yRnVuY3Rpb25hbElu
dGVyZmFjZVBhcmFtZXRlcml6YXRpb25JbmZlcmVuY2Uod2l0aFdpbGRDYXJkcyk7CisJCQkJaWYg
KHEubGVuZ3RoICE9IHRoaXMuYXJndW1lbnRzLmxlbmd0aCkgeworCQkJCQkvLyBmYWlsICBUT0RP
OiBjYW4gdGhpcyBzdGlsbCBoYXBwZW4gaGVyZT8KKwkJCQl9IGVsc2UgeworCQkJCQlpZiAoY3R4
LnJlZHVjZVdpdGhFcXVhbGl0eUNvbnN0cmFpbnRzKHRoaXMuYXJndW1lbnRUeXBlcywgcSkpIHsK
KwkJCQkJCVR5cGVCaW5kaW5nW10gYSA9IHdpdGhXaWxkQ2FyZHMuYXJndW1lbnRzOworCQkJCQkJ
VHlwZUJpbmRpbmdbXSBhcHJpbWUgPSBjdHguZ2V0RnVuY3Rpb25JbnRlcmZhY2VBcmd1bWVudFNv
bHV0aW9ucyhhKTsKKwkJCQkJCS8vIFRPRE8gSWYgRjxBJzEsIC4uLiwgQSdtPiBpcyBhIHdlbGwt
Zm9ybWVkIHR5cGUsIC4uLgorCQkJCQkJcmV0dXJuIGJsb2NrU2NvcGUuZW52aXJvbm1lbnQoKS5j
cmVhdGVQYXJhbWV0ZXJpemVkVHlwZShnZW5lcmljVHlwZSwgYXByaW1lLCBnZW5lcmljVHlwZS5l
bmNsb3NpbmdUeXBlKCkpOworCQkJCQl9CisJCQkJfQorCQkJfSBlbHNlIHsKKwkJCQkvLyBub24t
d2lsZGNhcmQgcGFyYW1ldGVyaXphdGlvbiAoOS44KSBvZiB0aGUgdGFyZ2V0IHR5cGUKKwkJCQlU
eXBlQmluZGluZ1tdIHR5cGVzID0gd2l0aFdpbGRDYXJkcy5nZXROb25XaWxkY2FyZFBhcmFtZXRl
cml6YXRpb24oKTsKKwkJCQlpZiAodHlwZXMgPT0gbnVsbCkKKwkJCQkJcmV0dXJuIG51bGw7CisJ
CQkJcmV0dXJuIGJsb2NrU2NvcGUuZW52aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVkVHlw
ZShnZW5lcmljVHlwZSwgdHlwZXMsIGdlbmVyaWNUeXBlLmVuY2xvc2luZ1R5cGUoKSk7CisJCQl9
CisJCX0KKwkJcmV0dXJuIHRhcmdldFR5cGU7CiAJfQogCiAJcHVibGljIGJvb2xlYW4gYXJndW1l
bnRzVHlwZUVsaWRlZCgpIHsKQEAgLTY1NCwxNCArNjcyLDkgQEAKIAl9CiAJCiAJcHVibGljIGJv
b2xlYW4gaXNDb21wYXRpYmxlV2l0aChmaW5hbCBUeXBlQmluZGluZyBsZWZ0LCBmaW5hbCBTY29w
ZSBzb21lU2NvcGUpIHsKLQkJCi0JCWZpbmFsIE1ldGhvZEJpbmRpbmcgc2FtID0gbGVmdC5nZXRT
aW5nbGVBYnN0cmFjdE1ldGhvZCh0aGlzLmVuY2xvc2luZ1Njb3BlLCB0cnVlKTsKLQkJCi0JCWlm
IChzYW0gPT0gbnVsbCB8fCAhc2FtLmlzVmFsaWRCaW5kaW5nKCkpCisJCWlmICghKGxlZnQgaW5z
dGFuY2VvZiBSZWZlcmVuY2VCaW5kaW5nKSkKIAkJCXJldHVybiBmYWxzZTsKLQkJaWYgKHNhbS5w
YXJhbWV0ZXJzLmxlbmd0aCAhPSB0aGlzLmFyZ3VtZW50cy5sZW5ndGgpCi0JCQlyZXR1cm4gZmFs
c2U7Ci0JCQorCiAJCWlmICghdGhpcy5zaGFwZUFuYWx5c2lzQ29tcGxldGUpIHsKIAkJCUlFcnJv
ckhhbmRsaW5nUG9saWN5IG9sZFBvbGljeSA9IHRoaXMuZW5jbG9zaW5nU2NvcGUucHJvYmxlbVJl
cG9ydGVyKCkuc3dpdGNoRXJyb3JIYW5kbGluZ1BvbGljeShzaWxlbnRFcnJvckhhbmRsaW5nUG9s
aWN5KTsKIAkJCWZpbmFsIENvbXBpbGVyT3B0aW9ucyBjb21waWxlck9wdGlvbnMgPSB0aGlzLmVu
Y2xvc2luZ1Njb3BlLmNvbXBpbGVyT3B0aW9ucygpOwpAQCAtNjcyLDEzICs2ODUsMTQgQEAKIAkJ
CQlpZiAoY29weSA9PSBudWxsKSB7CiAJCQkJCWlmICh0aGlzLmFzc2lzdE5vZGUpIHsKIAkJCQkJ
CWFuYWx5emVTaGFwZSgpOyAvLyBub3Qgb24gdGVycmEgZmlybWEgaGVyZSAhCi0JCQkJCQlpZiAo
c2FtLnJldHVyblR5cGUuaWQgPT0gVHlwZUlkcy5UX3ZvaWQpIHsKLQkJCQkJCQlpZiAoIXRoaXMu
dm9pZENvbXBhdGlibGUpCi0JCQkJCQkJCXJldHVybiBmYWxzZTsKLQkJCQkJCX0gZWxzZSB7Ci0J
CQkJCQkJaWYgKCF0aGlzLnZhbHVlQ29tcGF0aWJsZSkKLQkJCQkJCQkJcmV0dXJuIGZhbHNlOwot
CQkJCQkJfQorLy8gRklYTUU6IHdlIGRvbid0IHlldCBoYXZlIHRoZSBzYW1lLCBzaG91bGQgd2Ug
Y29tcHV0ZSBpdCBoZXJlICYgbm93PworLy8JCQkJCQlpZiAoc2FtLnJldHVyblR5cGUuaWQgPT0g
VHlwZUlkcy5UX3ZvaWQpIHsKKy8vCQkJCQkJCWlmICghdGhpcy52b2lkQ29tcGF0aWJsZSkKKy8v
CQkJCQkJCQlyZXR1cm4gZmFsc2U7CisvLwkJCQkJCX0gZWxzZSB7CisvLwkJCQkJCQlpZiAoIXRo
aXMudmFsdWVDb21wYXRpYmxlKQorLy8JCQkJCQkJCXJldHVybiBmYWxzZTsKKy8vCQkJCQkJfQog
CQkJCQl9CiAJCQkJCXJldHVybiAhaXNQZXJ0aW5lbnRUb0FwcGxpY2FiaWxpdHkobGVmdCwgbnVs
bCk7CiAJCQkJfQpAQCAtNzE5LDYgKzczMywxNiBAQAogCQkJfQogCQl9CiAKKwkJUmVmZXJlbmNl
QmluZGluZyBncm91bmRUYXJnZXRUeXBlID0gZmluZEdyb3VuZFRhcmdldFR5cGUodGhpcy5lbmNs
b3NpbmdTY29wZSwgKFJlZmVyZW5jZUJpbmRpbmcpIGxlZnQsIGFyZ3VtZW50c1R5cGVFbGlkZWQo
KSk7CisJCWlmIChncm91bmRUYXJnZXRUeXBlID09IG51bGwpCisJCQlyZXR1cm4gZmFsc2U7CisJ
CQorCQlNZXRob2RCaW5kaW5nIHNhbSA9IGdyb3VuZFRhcmdldFR5cGUuZ2V0U2luZ2xlQWJzdHJh
Y3RNZXRob2QodGhpcy5lbmNsb3NpbmdTY29wZSwgdHJ1ZSk7CisJCWlmIChzYW0gPT0gbnVsbCB8
fCAhc2FtLmlzVmFsaWRCaW5kaW5nKCkpCisJCQlyZXR1cm4gZmFsc2U7CisJCWlmIChzYW0ucGFy
YW1ldGVycy5sZW5ndGggIT0gdGhpcy5hcmd1bWVudHMubGVuZ3RoKQorCQkJcmV0dXJuIGZhbHNl
OworCiAJCWlmICghaXNQZXJ0aW5lbnRUb0FwcGxpY2FiaWxpdHkobGVmdCwgbnVsbCkpICAvLyBU
aGlzIGNoZWNrIHNob3VsZCBoYXBwZW4gYWZ0ZXIgcmV0dXJuIHR5cGUgY2hlY2sgYmVsb3csIGJ1
dCBmb3IgYnVnZ3kgamF2YWMgY29tcGF0aWJpbGl0eSB3ZSBoYXZlIGxlZnQgaXQgaW4uCiAJCQly
ZXR1cm4gdHJ1ZTsKIApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9QYXJhbWV0ZXJpemVkVHlw
ZUJpbmRpbmcuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nLmph
dmEKaW5kZXggZGFmZWNlYy4uODdlN2M5OSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9QYXJh
bWV0ZXJpemVkVHlwZUJpbmRpbmcuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1BhcmFtZXRlcml6
ZWRUeXBlQmluZGluZy5qYXZhCkBAIC0xMzIyLDcwICsxMzIyLDE5IEBACiAJCQlyZXR1cm4gdGhp
cy5zaW5nbGVBYnN0cmFjdE1ldGhvZDsKIAkJfQogCQlmaW5hbCBSZWZlcmVuY2VCaW5kaW5nIGdl
bmVyaWNUeXBlID0gZ2VuZXJpY1R5cGUoKTsKLQkJTWV0aG9kQmluZGluZyB0aGVBYnN0cmFjdE1l
dGhvZCA9IGdlbmVyaWNUeXBlLmdldFNpbmdsZUFic3RyYWN0TWV0aG9kKHNjb3BlLCB0cnVlKTsK
KwkJTWV0aG9kQmluZGluZyB0aGVBYnN0cmFjdE1ldGhvZCA9IGdlbmVyaWNUeXBlLmdldFNpbmds
ZUFic3RyYWN0TWV0aG9kKHNjb3BlLCByZXBsYWNlV2lsZGNhcmRzKTsKIAkJaWYgKHRoZUFic3Ry
YWN0TWV0aG9kID09IG51bGwgfHwgIXRoZUFic3RyYWN0TWV0aG9kLmlzVmFsaWRCaW5kaW5nKCkp
CiAJCQlyZXR1cm4gdGhpcy5zaW5nbGVBYnN0cmFjdE1ldGhvZCA9IHRoZUFic3RyYWN0TWV0aG9k
OwogCQkKLQkJVHlwZUJpbmRpbmcgW10gdHlwZUFyZ3VtZW50cyA9IHRoaXMuYXJndW1lbnRzOyAv
LyBBMSAuLi4gQW4gCi0JCVR5cGVWYXJpYWJsZUJpbmRpbmcgW10gdHlwZVBhcmFtZXRlcnMgPSBn
ZW5lcmljVHlwZS50eXBlVmFyaWFibGVzKCk7IC8vIFAxIC4uLiBQbgotCQlUeXBlQmluZGluZyBb
XSB0eXBlcyA9IG5ldyBUeXBlQmluZGluZ1t0eXBlQXJndW1lbnRzLmxlbmd0aF07ICAvLyBUMSAu
Li4gVG4KLQkJZm9yIChpbnQgaSA9IDAsIGxlbmd0aCA9IHR5cGVBcmd1bWVudHMubGVuZ3RoOyBp
IDwgbGVuZ3RoOyBpKyspIHsKLQkJCVR5cGVCaW5kaW5nIHR5cGVBcmd1bWVudCA9IHR5cGVBcmd1
bWVudHNbaV07Ci0JCQlpZiAocmVwbGFjZVdpbGRjYXJkcyAmJiB0eXBlQXJndW1lbnQua2luZCgp
ID09IEJpbmRpbmcuV0lMRENBUkRfVFlQRSkgewotCQkJCWlmICh0eXBlUGFyYW1ldGVyc1tpXS5t
ZW50aW9uc0FueSh0eXBlUGFyYW1ldGVycywgaSkpCi0JCQkJCXJldHVybiB0aGlzLnNpbmdsZUFi
c3RyYWN0TWV0aG9kID0gbmV3IFByb2JsZW1NZXRob2RCaW5kaW5nKFR5cGVDb25zdGFudHMuQU5P
TllNT1VTX01FVEhPRCwgbnVsbCwgUHJvYmxlbVJlYXNvbnMuTm90QVdlbGxGb3JtZWRQYXJhbWV0
ZXJpemVkVHlwZSk7Ci0JCQkJV2lsZGNhcmRCaW5kaW5nIHdpbGRjYXJkID0gKFdpbGRjYXJkQmlu
ZGluZykgdHlwZUFyZ3VtZW50OwotCQkJCXN3aXRjaCh3aWxkY2FyZC5ib3VuZEtpbmQpIHsKLSAg
ICAJCQkJY2FzZSBXaWxkY2FyZC5FWFRFTkRTIDoKLSAgICAJCQkJCS8vIElmIEFpIGlzIGEgdXBw
ZXItYm91bmRlZCB3aWxkY2FyZCA/IGV4dGVuZHMgVWksIHRoZW4gVGkgPSBnbGIoVWksIEJpKS4K
LSAgICAJCQkJCS8vIE5vdGU6IG5laXRoZXIgVWkgbm9yIEJpIGlzIG5lY2Vzc2FyaWx5IHNjYWxh
ciAtPiBuZWVkIHRvIGNvbGxlY3QgYWxsIGJvdW5kcwotICAgIAkJCQkJVHlwZUJpbmRpbmdbXSBv
dGhlclVCb3VuZHMgPSB3aWxkY2FyZC5vdGhlckJvdW5kczsKLSAgICAJCQkJCVR5cGVCaW5kaW5n
W10gb3RoZXJCQm91bmRzID0gdHlwZVBhcmFtZXRlcnNbaV0ub3RoZXJVcHBlckJvdW5kcygpOwot
ICAgIAkJCQkJaW50IGxlbiA9IDEgKyAob3RoZXJVQm91bmRzICE9IG51bGwgPyBvdGhlclVCb3Vu
ZHMubGVuZ3RoIDogMCkgKyBvdGhlckJCb3VuZHMubGVuZ3RoOwotICAgIAkJCQkJaWYgKHR5cGVQ
YXJhbWV0ZXJzW2ldLmZpcnN0Qm91bmQgIT0gbnVsbCkKLSAgICAJCQkJCQlsZW4rKzsKLSAgICAJ
CQkJCVJlZmVyZW5jZUJpbmRpbmdbXSBhbGxCb3VuZHMgPSBuZXcgUmVmZXJlbmNlQmluZGluZ1ts
ZW5dOwotICAgIAkJCQkJdHJ5IHsKLSAgICAJCQkJCQlpbnQgaWR4ID0gMDsKLSAgICAJCQkJCQkv
LyBVaQotCSAgICAJCQkJCWFsbEJvdW5kc1tpZHgrK10gPSAoUmVmZXJlbmNlQmluZGluZykgd2ls
ZGNhcmQuYm91bmQ7Ci0JICAgIAkJCQkJaWYgKG90aGVyVUJvdW5kcyAhPSBudWxsKQotCSAgICAJ
CQkJCQlmb3IgKGludCBqID0gMDsgaiA8IG90aGVyVUJvdW5kcy5sZW5ndGg7IGorKykKLQkgICAg
CQkJCQkJCWFsbEJvdW5kc1tpZHgrK10gPSAoUmVmZXJlbmNlQmluZGluZykgb3RoZXJVQm91bmRz
W2pdOwotCSAgICAJCQkJCS8vIEJpCi0JICAgIAkJCQkJaWYgKHR5cGVQYXJhbWV0ZXJzW2ldLmZp
cnN0Qm91bmQgIT0gbnVsbCkKLQkgICAgCQkJCQkJYWxsQm91bmRzW2lkeCsrXSA9IChSZWZlcmVu
Y2VCaW5kaW5nKSB0eXBlUGFyYW1ldGVyc1tpXS5maXJzdEJvdW5kOwotCSAgICAJCQkJCWZvciAo
aW50IGogPSAwOyBqIDwgb3RoZXJCQm91bmRzLmxlbmd0aDsgaisrKQotCSAgICAJCQkJCQlhbGxC
b3VuZHNbaWR4KytdID0gKFJlZmVyZW5jZUJpbmRpbmcpIG90aGVyQkJvdW5kc1tqXTsKLSAgICAJ
CQkJCX0gY2F0Y2ggKENsYXNzQ2FzdEV4Y2VwdGlvbiBjY2UpIHsKLSAgICAJCQkJCQlyZXR1cm4g
dGhpcy5zaW5nbGVBYnN0cmFjdE1ldGhvZCA9IG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZyhUeXBl
Q29uc3RhbnRzLkFOT05ZTU9VU19NRVRIT0QsIG51bGwsIFByb2JsZW1SZWFzb25zLk5vdEFXZWxs
Rm9ybWVkUGFyYW1ldGVyaXplZFR5cGUpOwkJICAgIAkJCQkJCQotICAgIAkJCQkJfQotICAgIAkJ
CQkJUmVmZXJlbmNlQmluZGluZ1tdIGdsYiA9IFNjb3BlLmdyZWF0ZXJMb3dlckJvdW5kKGFsbEJv
dW5kcyk7Ci0gICAgCQkJCQlpZiAoZ2xiID09IG51bGwgfHwgZ2xiLmxlbmd0aCA9PSAwKSB7Ci0J
CQkJCQkJcmV0dXJuIHRoaXMuc2luZ2xlQWJzdHJhY3RNZXRob2QgPSBuZXcgUHJvYmxlbU1ldGhv
ZEJpbmRpbmcoVHlwZUNvbnN0YW50cy5BTk9OWU1PVVNfTUVUSE9ELCBudWxsLCBQcm9ibGVtUmVh
c29ucy5Ob3RBV2VsbEZvcm1lZFBhcmFtZXRlcml6ZWRUeXBlKTsKLQkJCQkJCX0gZWxzZSBpZiAo
Z2xiLmxlbmd0aCA9PSAxKSB7Ci0JCQkJCQkJdHlwZXNbaV0gPSBnbGJbMF07Ci0JCQkJCQl9IGVs
c2UgewotCQkJCQkJCXR5cGVzW2ldID0gbmV3IEludGVyc2VjdGlvbkNhc3RUeXBlQmluZGluZyhn
bGIsIHRoaXMuZW52aXJvbm1lbnQpOwotCQkJCQkJfQotICAgIAkJCQkJYnJlYWs7Ci0gICAgCQkJ
CWNhc2UgV2lsZGNhcmQuU1VQRVIgOgotICAgIAkJCQkJLy8gSWYgQWkgaXMgYSBsb3dlci1ib3Vu
ZGVkIHdpbGRjYXJkID8gc3VwZXIgTGksIHRoZW4gVGkgPSBMaS4KLSAgICAJCQkJCXR5cGVzW2ld
ID0gd2lsZGNhcmQuYm91bmQ7Ci0gICAgCQkJCQlicmVhazsKLSAgICAJCQkJY2FzZSBXaWxkY2Fy
ZC5VTkJPVU5EIDoKLSAgICAJCQkJCS8vIElmIEFpIGlzIGFuIHVuYm91bmQgd2lsZGNhcmQgPywg
dGhlbiBUaSA9IEJpLgotICAgIAkJCQkJdHlwZXNbaV0gPSB0eXBlUGFyYW1ldGVyc1tpXS5maXJz
dEJvdW5kOwotICAgIAkJCQkJaWYgKHR5cGVzW2ldID09IG51bGwpCi0gICAgCQkJCQkJdHlwZXNb
aV0gPSB0eXBlUGFyYW1ldGVyc1tpXS5zdXBlcmNsYXNzOyAvLyBhc3N1bWFibHkgai5sLk9iamVj
dD8KLSAgICAJCQkJCWJyZWFrOwotCQkJCX0KLQkJCX0gZWxzZSB7Ci0JCQkJLy8gSWYgQWkgaXMg
YSB0eXBlLCB0aGVuIFRpID0gQWkuCi0JCQkJdHlwZXNbaV0gPSB0eXBlQXJndW1lbnQ7Ci0JCQl9
CisJCVBhcmFtZXRlcml6ZWRUeXBlQmluZGluZyBkZWNsYXJpbmdUeXBlID0gbnVsbDsKKwkJVHlw
ZUJpbmRpbmcgW10gdHlwZXMgPSB0aGlzLmFyZ3VtZW50czsgCisJCWlmIChyZXBsYWNlV2lsZGNh
cmRzKSB7CisJCQl0eXBlcyA9IGdldE5vbldpbGRjYXJkUGFyYW1ldGVyaXphdGlvbigpOworCQkJ
aWYgKHR5cGVzID09IG51bGwpCisJCQkJcmV0dXJuIHRoaXMuc2luZ2xlQWJzdHJhY3RNZXRob2Qg
PSBuZXcgUHJvYmxlbU1ldGhvZEJpbmRpbmcoVHlwZUNvbnN0YW50cy5BTk9OWU1PVVNfTUVUSE9E
LCBudWxsLCBQcm9ibGVtUmVhc29ucy5Ob3RBV2VsbEZvcm1lZFBhcmFtZXRlcml6ZWRUeXBlKTsK
IAkJfQotCQlQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgZGVjbGFyaW5nVHlwZSA9IHNjb3BlLmVu
dmlyb25tZW50KCkuY3JlYXRlUGFyYW1ldGVyaXplZFR5cGUoZ2VuZXJpY1R5cGUsIHR5cGVzLCBn
ZW5lcmljVHlwZS5lbmNsb3NpbmdUeXBlKCkpOworCQlkZWNsYXJpbmdUeXBlID0gc2NvcGUuZW52
aXJvbm1lbnQoKS5jcmVhdGVQYXJhbWV0ZXJpemVkVHlwZShnZW5lcmljVHlwZSwgdHlwZXMsIGdl
bmVyaWNUeXBlLmVuY2xvc2luZ1R5cGUoKSk7CisJCVR5cGVWYXJpYWJsZUJpbmRpbmcgW10gdHlw
ZVBhcmFtZXRlcnMgPSBnZW5lcmljVHlwZS50eXBlVmFyaWFibGVzKCk7CiAJCWZvciAoaW50IGkg
PSAwLCBsZW5ndGggPSB0eXBlUGFyYW1ldGVycy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgewog
CQkJaWYgKHR5cGVQYXJhbWV0ZXJzW2ldLmJvdW5kQ2hlY2soZGVjbGFyaW5nVHlwZSwgdHlwZXNb
aV0sIHNjb3BlKSAhPSBUeXBlQ29uc3RhbnRzLk9LKQogCQkJCXJldHVybiB0aGlzLnNpbmdsZUFi
c3RyYWN0TWV0aG9kID0gbmV3IFByb2JsZW1NZXRob2RCaW5kaW5nKFR5cGVDb25zdGFudHMuQU5P
TllNT1VTX01FVEhPRCwgbnVsbCwgUHJvYmxlbVJlYXNvbnMuTm90QVdlbGxGb3JtZWRQYXJhbWV0
ZXJpemVkVHlwZSk7CQkJCkBAIC0xNDAxLDYgKzEzNTAsNjkgQEAKIAkJcmV0dXJuIHRoaXMuc2lu
Z2xlQWJzdHJhY3RNZXRob2Q7CiAJfQogCisJLy8gZnJvbSBKTFMgOS44CisJcHVibGljIFR5cGVC
aW5kaW5nW10gZ2V0Tm9uV2lsZGNhcmRQYXJhbWV0ZXJpemF0aW9uKCkgeworCQlUeXBlQmluZGlu
Z1tdIHR5cGVBcmd1bWVudHMgPSB0aGlzLmFyZ3VtZW50czsgCQkJCQkJCS8vIEExIC4uLiBBbgor
CQlUeXBlVmFyaWFibGVCaW5kaW5nW10gdHlwZVBhcmFtZXRlcnMgPSBnZW5lcmljVHlwZSgpLnR5
cGVWYXJpYWJsZXMoKTsgCS8vIFAxIC4uLiBQbgorCQlUeXBlQmluZGluZ1tdIHR5cGVzID0gbmV3
IFR5cGVCaW5kaW5nW3R5cGVBcmd1bWVudHMubGVuZ3RoXTsgIAkJCS8vIFQxIC4uLiBUbgorCQlm
b3IgKGludCBpID0gMCwgbGVuZ3RoID0gdHlwZUFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsZW5ndGg7
IGkrKykgeworCQkJVHlwZUJpbmRpbmcgdHlwZUFyZ3VtZW50ID0gdHlwZUFyZ3VtZW50c1tpXTsK
KwkJCWlmICh0eXBlQXJndW1lbnQua2luZCgpID09IEJpbmRpbmcuV0lMRENBUkRfVFlQRSkgewor
CQkJCWlmICh0eXBlUGFyYW1ldGVyc1tpXS5tZW50aW9uc0FueSh0eXBlUGFyYW1ldGVycywgaSkp
CisJCQkJCXJldHVybiBudWxsOworCQkJCVdpbGRjYXJkQmluZGluZyB3aWxkY2FyZCA9IChXaWxk
Y2FyZEJpbmRpbmcpIHR5cGVBcmd1bWVudDsKKwkJCQlzd2l0Y2god2lsZGNhcmQuYm91bmRLaW5k
KSB7CisJCQkJCWNhc2UgV2lsZGNhcmQuRVhURU5EUyA6CisJCQkJCQkvLyBJZiBBaSBpcyBhIHVw
cGVyLWJvdW5kZWQgd2lsZGNhcmQgPyBleHRlbmRzIFVpLCB0aGVuIFRpID0gZ2xiKFVpLCBCaSku
CisJCQkJCQkvLyBOb3RlOiBuZWl0aGVyIFVpIG5vciBCaSBpcyBuZWNlc3NhcmlseSBzY2FsYXIg
LT4gbmVlZCB0byBjb2xsZWN0IGFsbCBib3VuZHMKKwkJCQkJCVR5cGVCaW5kaW5nW10gb3RoZXJV
Qm91bmRzID0gd2lsZGNhcmQub3RoZXJCb3VuZHM7CisJCQkJCQlUeXBlQmluZGluZ1tdIG90aGVy
QkJvdW5kcyA9IHR5cGVQYXJhbWV0ZXJzW2ldLm90aGVyVXBwZXJCb3VuZHMoKTsKKwkJCQkJCWlu
dCBsZW4gPSAxICsgKG90aGVyVUJvdW5kcyAhPSBudWxsID8gb3RoZXJVQm91bmRzLmxlbmd0aCA6
IDApICsgb3RoZXJCQm91bmRzLmxlbmd0aDsKKwkJCQkJCWlmICh0eXBlUGFyYW1ldGVyc1tpXS5m
aXJzdEJvdW5kICE9IG51bGwpCisJCQkJCQkJbGVuKys7CisJCQkJCQlSZWZlcmVuY2VCaW5kaW5n
W10gYWxsQm91bmRzID0gbmV3IFJlZmVyZW5jZUJpbmRpbmdbbGVuXTsKKwkJCQkJCXRyeSB7CisJ
CQkJCQkJaW50IGlkeCA9IDA7CisJCQkJCQkJLy8gVWkKKwkJCQkJCQlhbGxCb3VuZHNbaWR4Kytd
ID0gKFJlZmVyZW5jZUJpbmRpbmcpIHdpbGRjYXJkLmJvdW5kOworCQkJCQkJCWlmIChvdGhlclVC
b3VuZHMgIT0gbnVsbCkKKwkJCQkJCQkJZm9yIChpbnQgaiA9IDA7IGogPCBvdGhlclVCb3VuZHMu
bGVuZ3RoOyBqKyspCisJCQkJCQkJCQlhbGxCb3VuZHNbaWR4KytdID0gKFJlZmVyZW5jZUJpbmRp
bmcpIG90aGVyVUJvdW5kc1tqXTsKKwkJCQkJCQkvLyBCaQorCQkJCQkJCWlmICh0eXBlUGFyYW1l
dGVyc1tpXS5maXJzdEJvdW5kICE9IG51bGwpCisJCQkJCQkJCWFsbEJvdW5kc1tpZHgrK10gPSAo
UmVmZXJlbmNlQmluZGluZykgdHlwZVBhcmFtZXRlcnNbaV0uZmlyc3RCb3VuZDsKKwkJCQkJCQlm
b3IgKGludCBqID0gMDsgaiA8IG90aGVyQkJvdW5kcy5sZW5ndGg7IGorKykKKwkJCQkJCQkJYWxs
Qm91bmRzW2lkeCsrXSA9IChSZWZlcmVuY2VCaW5kaW5nKSBvdGhlckJCb3VuZHNbal07CisJCQkJ
CQl9IGNhdGNoIChDbGFzc0Nhc3RFeGNlcHRpb24gY2NlKSB7CisJCQkJCQkJcmV0dXJuIG51bGw7
CisJCQkJCQl9CisJCQkJCQlSZWZlcmVuY2VCaW5kaW5nW10gZ2xiID0gU2NvcGUuZ3JlYXRlckxv
d2VyQm91bmQoYWxsQm91bmRzKTsKKwkJCQkJCWlmIChnbGIgPT0gbnVsbCB8fCBnbGIubGVuZ3Ro
ID09IDApIHsKKwkJCQkJCQlyZXR1cm4gbnVsbDsKKwkJCQkJCX0gZWxzZSBpZiAoZ2xiLmxlbmd0
aCA9PSAxKSB7CisJCQkJCQkJdHlwZXNbaV0gPSBnbGJbMF07CisJCQkJCQl9IGVsc2UgeworCQkJ
CQkJCXR5cGVzW2ldID0gbmV3IEludGVyc2VjdGlvbkNhc3RUeXBlQmluZGluZyhnbGIsIHRoaXMu
ZW52aXJvbm1lbnQpOworCQkJCQkJfQorCQkJCQkJYnJlYWs7CisJCQkJCWNhc2UgV2lsZGNhcmQu
U1VQRVIgOgorCQkJCQkJLy8gSWYgQWkgaXMgYSBsb3dlci1ib3VuZGVkIHdpbGRjYXJkID8gc3Vw
ZXIgTGksIHRoZW4gVGkgPSBMaS4KKwkJCQkJCXR5cGVzW2ldID0gd2lsZGNhcmQuYm91bmQ7CisJ
CQkJCQlicmVhazsKKwkJCQkJY2FzZSBXaWxkY2FyZC5VTkJPVU5EIDoKKwkJCQkJCS8vIElmIEFp
IGlzIGFuIHVuYm91bmQgd2lsZGNhcmQgPywgdGhlbiBUaSA9IEJpLgorCQkJCQkJdHlwZXNbaV0g
PSB0eXBlUGFyYW1ldGVyc1tpXS5maXJzdEJvdW5kOworCQkJCQkJaWYgKHR5cGVzW2ldID09IG51
bGwpCisJCQkJCQkJdHlwZXNbaV0gPSB0eXBlUGFyYW1ldGVyc1tpXS5zdXBlcmNsYXNzOyAvLyBh
c3N1bWFibHkgai5sLk9iamVjdD8KKwkJCQkJCWJyZWFrOworCQkJCX0KKwkJCX0gZWxzZSB7CisJ
CQkJLy8gSWYgQWkgaXMgYSB0eXBlLCB0aGVuIFRpID0gQWkuCisJCQkJdHlwZXNbaV0gPSB0eXBl
QXJndW1lbnQ7CisJCQl9CisJCX0KKwkJcmV0dXJuIHR5cGVzOworCX0KIAlzdGF0aWMgYm9vbGVh
biB0eXBlUGFyYW1ldGVyc01lbnRpb25lZChUeXBlQmluZGluZyB1cHBlckJvdW5kKSB7CiAJCWNs
YXNzIE1lbnRpb25MaXN0ZW5lciBleHRlbmRzIFR5cGVCaW5kaW5nVmlzaXRvciB7CiAJCQlwcml2
YXRlIGJvb2xlYW4gdHlwZVBhcmFtZXRlcnNNZW50aW9uZWQgPSBmYWxzZTs=
</data>

          </attachment>
      

    </bug>

</bugzilla>