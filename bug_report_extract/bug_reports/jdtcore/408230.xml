<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>408230</bug_id>
          
          <creation_ts>2013-05-16 08:33:00 -0400</creation_ts>
          <short_desc>[1.8][hovering] NPE on hovering over a type inferred parameter in lambda expression</short_desc>
          <delta_ts>2013-11-25 06:28:38 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>408937</blocked>
    
    <blocked>409253</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Noopur Gupta">noopur_gupta</reporter>
          <assigned_to name="ANIRBAN CHAKRABORTY">anchakrk</assigned_to>
          <cc>anchakrk</cc>
    
    <cc>manju656</cc>
    
    <cc>markus_keller</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2257986</commentid>
    <comment_count>0</comment_count>
    <who name="Noopur Gupta">noopur_gupta</who>
    <bug_when>2013-05-16 08:33:26 -0400</bug_when>
    <thetext>Consider the following example and hover on &quot;a&quot; as mentioned in the comments:

public class C1 {	
	FI i1= (a) -&gt; a++; // [1] Hover on &quot;a&quot; in &quot;a++&quot;
	void foo() {
		FI i2= (a) -&gt; {
			return a; // [2] Hover on &quot;a&quot;
		};
	}
}
interface FI {
	int f1(int a);
}

We get these exceptions:
[1]
java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.util.Util.typeSignature(Util.java:2685)
	at org.eclipse.jdt.internal.core.SelectionRequestor.acceptLocalVariable(SelectionRequestor.java:454)
	at org.eclipse.jdt.internal.codeassist.SelectionEngine.selectFrom(SelectionEngine.java:1229)

[2]
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.resolve(LocalDeclaration.java:187)
	at org.eclipse.jdt.internal.compiler.ast.Block.resolve(Block.java:114)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:594)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2258116</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-05-16 10:50:38 -0400</bug_when>
    <thetext>Thanks for the report Noopur, I&apos;ll take a look.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2286681</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-07-22 04:04:01 -0400</bug_when>
    <thetext>Anirban, please follow up, TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2289500</commentid>
    <comment_count>3</comment_count>
      <attachid>233920</attachid>
    <who name="ANIRBAN CHAKRABORTY">anchakrk</who>
    <bug_when>2013-07-29 23:30:18 -0400</bug_when>
    <thetext>Created attachment 233920
patch for the fix

patch for the fix</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2290503</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-08-01 04:56:45 -0400</bug_when>
    <thetext>Here are some review comments:

(1) loop iteration variables are best named i, j, k etc, instead of
indx.

(2) Always hoist the extraction of length of arrays outside the loop.

(3) In the following:

// ---
public class C1 {	
	void goo(FI f1) {
		
	}
//	FI i1= (a) -&gt; a++; // [1] Hover on &quot;a&quot; in &quot;a++&quot;
	void foo() {
//		Object i2 = new Object() {
//			int foo (int a) {
//				return a; // [2] Hover on &quot;a&quot;
//			};
//		};
			FI i2= (a) -&gt; {
				int b = a;
				return a; // [2] Hover on &quot;a&quot;
			};
			
			goo((a) -&gt; a++);
			
			
		
	}
}
interface FI {
	int f1(int a);
}


hovering on either
goo((a) -&gt; a++); or
return a

does not produce expected behavior.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2309213</commentid>
    <comment_count>5</comment_count>
    <who name="Manju Mathew">manju656</who>
    <bug_when>2013-09-20 08:19:28 -0400</bug_when>
    <thetext>bug 383096 looks partly similar to this bug as it has the similar exception stack trace as that of the second scenario.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2315493</commentid>
    <comment_count>6</comment_count>
      <attachid>236207</attachid>
    <who name="ANIRBAN CHAKRABORTY">anchakrk</who>
    <bug_when>2013-10-08 07:00:56 -0400</bug_when>
    <thetext>Created attachment 236207
patch for the fix accommodating the review comments

Hello,

Patch, which complies with http://www.eclipse.org/legal/CoO.php, is attached.

Among other things, one point to be noted is, while hovering on a lambda expression in an invocation context, the complete function (MessageSend) is not available up-to that point. Hence some reasonable heuristic is applied to find candidate(s) and the corresponding functional interface at that parameter number.

Thanks
Anirban</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2315819</commentid>
    <comment_count>7</comment_count>
    <who name="ANIRBAN CHAKRABORTY">anchakrk</who>
    <bug_when>2013-10-08 14:43:22 -0400</bug_when>
    <thetext>(In reply to Manju Mathew from comment #5)
&gt; bug 383096 looks partly similar to this bug as it has the similar exception
&gt; stack trace as that of the second scenario.

No, that is a different issue. Thx</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2316862</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-10 12:35:27 -0400</bug_when>
    <thetext>Thanks for the patch Anirban - it is going to take me a week to 10 days
to get to this, appreciate your patience.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2330130</commentid>
    <comment_count>9</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-11-14 06:30:42 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #8)
&gt; Thanks for the patch Anirban - it is going to take me a week to 10 days
&gt; to get to this, appreciate your patience.

Going to need 2-3 more weeks - Thanks for your patience.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2333914</commentid>
    <comment_count>10</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-11-25 06:28:38 -0500</bug_when>
    <thetext>I leveraged some elements from the proposed patch and redid parts of it
to integrate well with the existing scheme of affairs and released it here:
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=a0893fa670a9452a3bb55e34d39061d0e31c358a.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>233920</attachid>
            <date>2013-07-29 23:30:00 -0400</date>
            <delta_ts>2013-10-08 07:00:56 -0400</delta_ts>
            <desc>patch for the fix</desc>
            <filename>Bug-408230_new.patch</filename>
            <type>text/plain</type>
            <size>20632</size>
            <attacher name="ANIRBAN CHAKRABORTY">anchakrk</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9tb2RlbC9UeXBlUmVzb2x2ZVRlc3RzLmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
bW9kZWwvVHlwZVJlc29sdmVUZXN0cy5qYXZhCmluZGV4IDk0MmY4ODkuLjgyMDhjMjkgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9tb2RlbC9UeXBlUmVzb2x2ZVRlc3RzLmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21v
ZGVsL1R5cGVSZXNvbHZlVGVzdHMuamF2YQpAQCAtMSwxMSArMSwxNSBAQAogLyoqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMiBJQk0gQ29ycG9yYXRpb24g
YW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRpb24g
YW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhl
IGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUg
dGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21w
YW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKICAqIGh0dHA6Ly93
d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCisgKgorICogVGhpcyBpcyBhbiBpbXBs
ZW1lbnRhdGlvbiBvZiBhbiBlYXJseS1kcmFmdCBzcGVjaWZpY2F0aW9uIGRldmVsb3BlZCB1bmRl
ciB0aGUgSmF2YQorICogQ29tbXVuaXR5IFByb2Nlc3MgKEpDUCkgYW5kIGlzIG1hZGUgYXZhaWxh
YmxlIGZvciB0ZXN0aW5nIGFuZCBldmFsdWF0aW9uIHB1cnBvc2VzCisgKiBvbmx5LiBUaGUgY29k
ZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGFueSBzcGVjaWZpY2F0aW9uIG9mIHRoZSBKQ1AuCiAg
KgogICogQ29udHJpYnV0b3JzOgogICogICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJ
IGFuZCBpbXBsZW1lbnRhdGlvbgogICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCiBwYWNrYWdlIG9y
Zy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsOwpAQCAtODMyLDYgKzgzNiwxMDggQEAKIAl9
CiAJZmluYWxseSB7CiAJCWRlbGV0ZVByb2plY3QoIlRlc3QzNDIzOTMiKTsKIAl9CiB9CisvLyBC
dWcgNDA4MjMwIC0gWzEuOF1baG92ZXJpbmddIE5QRSBvbiBob3ZlcmluZyBvdmVyIGEgdHlwZSBp
bmZlcnJlZCBwYXJhbWV0ZXIgaW4gbGFtYmRhIGV4cHJlc3Npb24KKy8vIGh0dHBzOi8vYnVncy5l
Y2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00MDgyMzAKK3B1YmxpYyB2b2lkIHRlc3RC
dWc0MDgyMzBhKCkgdGhyb3dzIENvcmVFeGNlcHRpb24geworCXRyeSB7CisJCWNyZWF0ZUphdmFQ
cm9qZWN0KCJQIiwgbmV3IFN0cmluZ1tdIHsic3JjIn0sIG5ldyBTdHJpbmdbXSB7IkpDTDE4X0xJ
QiJ9LCAiYmluIiwgIjEuOCIpOworCQlTdHJpbmcgc291cmNlID0gInBhY2thZ2UgcDtcbiIgKwor
CQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCQkiICBGSSBpMSA9IChhLCBiKSAtPiBhK2I7
XG4iICsKKwkJCQkiICB2b2lkIGZvbygpIHtcbiIgKworCQkJCSIJRkkgaTIgPSAoYSxiYXJnKSAt
PiB7IHJldHVybiBhK2Jhcmc7IH07XG4iICsKKwkJCQkiICB9XG4iICsKKwkJCQkifVxuIiArCisJ
CQkJImludGVyZmFjZSBGSSB7IGludCBmMShpbnQgYSwgaW50IGIpOyB9XG4iOworCQljcmVhdGVG
b2xkZXIoIi9QL3NyYy9wIik7CisJCWNyZWF0ZUZpbGUoCisJCQkiL1Avc3JjL3AvWC5qYXZhIiwK
KwkJCXNvdXJjZQorCQkpOworCQl3YWl0Rm9yQXV0b0J1aWxkKCk7CisJCQorCQlJQ29tcGlsYXRp
b25Vbml0IHVuaXQgPSBnZXRDb21waWxhdGlvblVuaXQoIi9QL3NyYy9wL1guamF2YSIpOyAKKwkJ
U3RyaW5nIHNlbGVjdFN0cmluZyA9ICJiYXJnIjsKKwkJKChJQ29kZUFzc2lzdCkgdW5pdCkuY29k
ZVNlbGVjdChzb3VyY2UubGFzdEluZGV4T2Yoc2VsZWN0U3RyaW5nKSwgc2VsZWN0U3RyaW5nLmxl
bmd0aCgpKTsKKwl9IGZpbmFsbHkgeworCQlkZWxldGVQcm9qZWN0KCJQIik7CisJfQorfQorcHVi
bGljIHZvaWQgdGVzdEJ1ZzQwODIzMGIoKSB0aHJvd3MgQ29yZUV4Y2VwdGlvbiB7CisJdHJ5IHsK
KwkJY3JlYXRlSmF2YVByb2plY3QoIlAiLCBuZXcgU3RyaW5nW10geyJzcmMifSwgbmV3IFN0cmlu
Z1tdIHsiSkNMMThfTElCIn0sICJiaW4iLCAiMS44Iik7CisJCVN0cmluZyBzb3VyY2UgPSAicGFj
a2FnZSBwO1xuIiArCisJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJCSIgIEZJIGkxID0g
KGEsIGIpIC0+IGErYjtcbiIgKworCQkJCSIgIHZvaWQgZm9vKCkge1xuIiArCisJCQkJIglGSSBp
MiA9IChhYXJnKSAtPiB7IHJldHVybiBhYXJnOyB9O1xuIiArCisJCQkJIiAgfVxuIiArCisJCQkJ
In1cbiIgKworCQkJCSJpbnRlcmZhY2UgRkkgeyBpbnQgZjEoaW50IGEsIGludCBiKTsgfVxuIjsK
KwkJY3JlYXRlRm9sZGVyKCIvUC9zcmMvcCIpOworCQljcmVhdGVGaWxlKAorCQkJIi9QL3NyYy9w
L1guamF2YSIsCisJCQlzb3VyY2UKKwkJKTsKKwkJd2FpdEZvckF1dG9CdWlsZCgpOworCQkKKwkJ
SUNvbXBpbGF0aW9uVW5pdCB1bml0ID0gZ2V0Q29tcGlsYXRpb25Vbml0KCIvUC9zcmMvcC9YLmph
dmEiKTsgCisJCVN0cmluZyBzZWxlY3RTdHJpbmcgPSAiYWFyZyI7CisJCSgoSUNvZGVBc3Npc3Qp
IHVuaXQpLmNvZGVTZWxlY3Qoc291cmNlLmxhc3RJbmRleE9mKHNlbGVjdFN0cmluZyksIHNlbGVj
dFN0cmluZy5sZW5ndGgoKSk7CisJfSBmaW5hbGx5IHsKKwkJZGVsZXRlUHJvamVjdCgiUCIpOwor
CX0KK30KK3B1YmxpYyB2b2lkIHRlc3RCdWc0MDgyMzBjKCkgdGhyb3dzIENvcmVFeGNlcHRpb24g
eworCXRyeSB7CisJCWNyZWF0ZUphdmFQcm9qZWN0KCJQIiwgbmV3IFN0cmluZ1tdIHsic3JjIn0s
IG5ldyBTdHJpbmdbXSB7IkpDTDE4X0xJQiJ9LCAiYmluIiwgIjEuOCIpOworCQlTdHJpbmcgc291
cmNlID0gInBhY2thZ2UgcDtcbiIgKworCQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCQki
ICBGSSBpMSA9IChhLCBiYXJnKSAtPiBhK2Jhcmc7XG4iICsKKwkJCQkiICB2b2lkIGZvbygpIHtc
biIgKworCQkJCSIJRkkgaTIgPSAoYSxiKSAtPiB7IHJldHVybiBhK2I7IH07XG4iICsKKwkJCQki
ICB9XG4iICsKKwkJCQkifVxuIiArCisJCQkJImludGVyZmFjZSBGSSB7IGludCBmMShpbnQgYSwg
aW50IGIpOyB9XG4iOworCQljcmVhdGVGb2xkZXIoIi9QL3NyYy9wIik7CisJCWNyZWF0ZUZpbGUo
CisJCQkiL1Avc3JjL3AvWC5qYXZhIiwKKwkJCXNvdXJjZQorCQkpOworCQl3YWl0Rm9yQXV0b0J1
aWxkKCk7CisJCQorCQlJQ29tcGlsYXRpb25Vbml0IHVuaXQgPSBnZXRDb21waWxhdGlvblVuaXQo
Ii9QL3NyYy9wL1guamF2YSIpOyAKKwkJU3RyaW5nIHNlbGVjdFN0cmluZyA9ICJiYXJnIjsKKwkJ
KChJQ29kZUFzc2lzdCkgdW5pdCkuY29kZVNlbGVjdChzb3VyY2UubGFzdEluZGV4T2Yoc2VsZWN0
U3RyaW5nKSwgc2VsZWN0U3RyaW5nLmxlbmd0aCgpKTsKKwl9IGZpbmFsbHkgeworCQlkZWxldGVQ
cm9qZWN0KCJQIik7CisJfQorfQorcHVibGljIHZvaWQgdGVzdEJ1ZzQwODIzMGQoKSB0aHJvd3Mg
Q29yZUV4Y2VwdGlvbiB7CisJdHJ5IHsKKwkJY3JlYXRlSmF2YVByb2plY3QoIlAiLCBuZXcgU3Ry
aW5nW10geyJzcmMifSwgbmV3IFN0cmluZ1tdIHsiSkNMMThfTElCIn0sICJiaW4iLCAiMS44Iik7
CisJCVN0cmluZyBzb3VyY2UgPSAicGFja2FnZSBwO1xuIiArCisJCQkJInB1YmxpYyBjbGFzcyBY
IHtcbiIgKworCQkJCSIgIEZJIGkxID0gKGFhcmcpIC0+IGFhcmcrKztcbiIgKworCQkJCSIgIHZv
aWQgZm9vKCkge1xuIiArCisJCQkJIglGSSBpMiA9IChhLGIpIC0+IHsgcmV0dXJuIGErYjsgfTtc
biIgKworCQkJCSIgIH1cbiIgKworCQkJCSJ9XG4iICsKKwkJCQkiaW50ZXJmYWNlIEZJIHsgaW50
IGYxKGludCBhLCBpbnQgYik7IH1cbiI7CisJCWNyZWF0ZUZvbGRlcigiL1Avc3JjL3AiKTsKKwkJ
Y3JlYXRlRmlsZSgKKwkJCSIvUC9zcmMvcC9YLmphdmEiLAorCQkJc291cmNlCisJCSk7CisJCXdh
aXRGb3JBdXRvQnVpbGQoKTsKKwkJCisJCUlDb21waWxhdGlvblVuaXQgdW5pdCA9IGdldENvbXBp
bGF0aW9uVW5pdCgiL1Avc3JjL3AvWC5qYXZhIik7IAorCQlTdHJpbmcgc2VsZWN0U3RyaW5nID0g
ImFhcmciOworCQkoKElDb2RlQXNzaXN0KSB1bml0KS5jb2RlU2VsZWN0KHNvdXJjZS5sYXN0SW5k
ZXhPZihzZWxlY3RTdHJpbmcpLCBzZWxlY3RTdHJpbmcubGVuZ3RoKCkpOworCX0gZmluYWxseSB7
CisJCWRlbGV0ZVByb2plY3QoIlAiKTsKKwl9Cit9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb2RlYXNzaXN0L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb2RlYXNzaXN0
L3NlbGVjdC9TZWxlY3Rpb25QYXJzZXIuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvZGVh
c3Npc3Qvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvZGVhc3Npc3Qvc2VsZWN0L1NlbGVjdGlv
blBhcnNlci5qYXZhCmluZGV4IDkwNzIyYmYuLjEyZGZlMjIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvZGVhc3Npc3Qvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvZGVhc3Np
c3Qvc2VsZWN0L1NlbGVjdGlvblBhcnNlci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvZGVhc3Npc3Qvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvZGVhc3Npc3Qvc2VsZWN0L1Nl
bGVjdGlvblBhcnNlci5qYXZhCkBAIC0xNDM5LDEwICsxNDM5LDE2IEBACiAJCXRoaXMgYWN0aW9u
IGlzIGFsc28gcGVyZm9ybWVkIHdoZW4gc2hpZnRpbmcgdG9rZW4gYWZ0ZXIgcmVjb3ZlcnkKIAkJ
Z290IGFjdGl2YXRlZCBvbmNlLgogCSovCiAJcmVjb3ZlcnlUb2tlbkNoZWNrKCk7CiB9Citwcm90
ZWN0ZWQgdm9pZCBjb25zdW1lVHlwZUVsaWRlZExhbWJkYVBhcmFtZXRlcihib29sZWFuIHBhcmVu
dGhlc2l6ZWQpIHsKKwlpZiAodGhpcy5hc3RTdGFja1t0aGlzLmFzdFB0cl0gaW5zdGFuY2VvZiBM
b2NhbERlY2xhcmF0aW9uKSB7CisJCXRoaXMuYXN0U3RhY2tbdGhpcy5hc3RQdHJdLmJpdHMgfD0g
QVNUTm9kZS5Jc0luaXRpYWxpemVkQnlMYW1kYUV4cHJlc3Npb247CisJfQorCXN1cGVyLmNvbnN1
bWVUeXBlRWxpZGVkTGFtYmRhUGFyYW1ldGVyKHBhcmVudGhlc2l6ZWQpOworfQogCiBwdWJsaWMg
IFN0cmluZyB0b1N0cmluZygpIHsKIAlTdHJpbmcgcyA9IFV0aWwuRU1QVFlfU1RSSU5HOwogCXMg
PSBzICsgImVsZW1lbnRLaW5kU3RhY2sgOiBpbnRbXSA9IHsiOyAvLyROT04tTkxTLTEkCiAJZm9y
IChpbnQgaSA9IDA7IGkgPD0gdGhpcy5lbGVtZW50UHRyOyBpKyspIHsKZGlmZiAtLWdpdCBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9hc3QvQVNUTm9kZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BU1ROb2RlLmphdmEKaW5kZXggNTUw
OTFmOC4uOGNmMTYxMyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BU1ROb2RlLmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FzdC9BU1ROb2RlLmphdmEKQEAgLTQxLDExICs0MSwxMSBAQAogCXB1YmxpYyBmaW5h
bCBzdGF0aWMgaW50IEJpdDMgPSAweDQ7CQkJCQkvLyByZXR1cm4gdHlwZSAob3BlcmF0b3IpIHwg
bmFtZSByZWZlcmVuY2Uga2luZCAobmFtZSByZWYpIHwgaW1wbGljaXQgdGhpcyAodGhpcyByZWYp
IHwgaXMgYXJndW1lbnQobG9jYWwpCiAJcHVibGljIGZpbmFsIHN0YXRpYyBpbnQgQml0NCA9IDB4
ODsJCQkJCS8vIHJldHVybiB0eXBlIChvcGVyYXRvcikgfCBmaXJzdCBhc3NpZ25tZW50IHRvIGxv
Y2FsIChuYW1lIHJlZixsb2NhbCBkZWNsKSB8IHVuZG9jdW1lbnRlZCBlbXB0eSBibG9jayAoYmxv
Y2ssIHR5cGUgYW5kIG1ldGhvZCBkZWNsKQogCXB1YmxpYyBmaW5hbCBzdGF0aWMgaW50IEJpdDUg
PSAweDEwOwkJCQkJLy8gdmFsdWUgZm9yIHJldHVybiAoZXhwcmVzc2lvbikgfCBoYXMgYWxsIG1l
dGhvZCBib2RpZXMgKHVuaXQpIHwgc3VwZXJ0eXBlIHJlZiAodHlwZSByZWYpIHwgcmVzb2x2ZWQg
KGZpZWxkIGRlY2wpCiAJcHVibGljIGZpbmFsIHN0YXRpYyBpbnQgQml0NiA9IDB4MjA7CQkJCQkv
LyBkZXB0aCAobmFtZSByZWYsIG1zZykgfCBpZ25vcmUgbmVlZCBjYXN0IGNoZWNrIChjYXN0IGV4
cHJlc3Npb24pIHwgZXJyb3IgaW4gc2lnbmF0dXJlIChtZXRob2QgZGVjbGFyYXRpb24vIGluaXRp
YWxpemVyKSB8IGlzIHJlY292ZXJlZCAoYW5ub3RhdGlvbiByZWZlcmVuY2UpCiAJcHVibGljIGZp
bmFsIHN0YXRpYyBpbnQgQml0NyA9IDB4NDA7CQkJCQkvLyBkZXB0aCAobmFtZSByZWYsIG1zZykg
fCBvcGVyYXRvciAob3BlcmF0b3IpIHwgbmVlZCBydW50aW1lIGNoZWNrY2FzdCAoY2FzdCBleHBy
ZXNzaW9uKSB8IGxhYmVsIHVzZWQgKGxhYmVsU3RhdGVtZW50KSB8IG5lZWRGcmVlUmV0dXJuIChB
YnN0cmFjdE1ldGhvZERlY2xhcmF0aW9uKQotCXB1YmxpYyBmaW5hbCBzdGF0aWMgaW50IEJpdDgg
PSAweDgwOwkJCQkJLy8gZGVwdGggKG5hbWUgcmVmLCBtc2cpIHwgb3BlcmF0b3IgKG9wZXJhdG9y
KSB8IHVuc2FmZSBjYXN0IChjYXN0IGV4cHJlc3Npb24pIHwgaXMgZGVmYXVsdCBjb25zdHJ1Y3Rv
ciAoY29uc3RydWN0b3IgZGVjbGFyYXRpb24pIHwgaXNFbHNlU3RhdGVtZW50VW5yZWFjaGFibGUg
KGlmIHN0YXRlbWVudCkKKwlwdWJsaWMgZmluYWwgc3RhdGljIGludCBCaXQ4ID0gMHg4MDsJCQkJ
CS8vIGRlcHRoIChuYW1lIHJlZiwgbXNnKSB8IG9wZXJhdG9yIChvcGVyYXRvcikgfCB1bnNhZmUg
Y2FzdCAoY2FzdCBleHByZXNzaW9uKSB8IGlzIGRlZmF1bHQgY29uc3RydWN0b3IgKGNvbnN0cnVj
dG9yIGRlY2xhcmF0aW9uKSB8IGlzRWxzZVN0YXRlbWVudFVucmVhY2hhYmxlIChpZiBzdGF0ZW1l
bnQpIHwgSXNJbml0aWFsaXplZEJ5TGFtYmRhRXhwcmVzc2lvbiAobG9jYWwgZGVjbGFyYXRpb24p
CiAJcHVibGljIGZpbmFsIHN0YXRpYyBpbnQgQml0OSA9IDB4MTAwOwkJCQkvLyBkZXB0aCAobmFt
ZSByZWYsIG1zZykgfCBvcGVyYXRvciAob3BlcmF0b3IpIHwgaXMgbG9jYWwgdHlwZSAodHlwZSBk
ZWNsKSB8IGlzVGhlblN0YXRlbWVudFVucmVhY2hhYmxlIChpZiBzdGF0ZW1lbnQpIHwgY2FuIGJl
IHN0YXRpYwogCXB1YmxpYyBmaW5hbCBzdGF0aWMgaW50IEJpdDEwPSAweDIwMDsJCQkJLy8gZGVw
dGggKG5hbWUgcmVmLCBtc2cpIHwgb3BlcmF0b3IgKG9wZXJhdG9yKSB8IGlzIGFub255bW91cyB0
eXBlICh0eXBlIGRlY2wpCiAJcHVibGljIGZpbmFsIHN0YXRpYyBpbnQgQml0MTEgPSAweDQwMDsJ
CQkJLy8gZGVwdGggKG5hbWUgcmVmLCBtc2cpIHwgb3BlcmF0b3IgKG9wZXJhdG9yKSB8IGlzIG1l
bWJlciB0eXBlICh0eXBlIGRlY2wpCiAJcHVibGljIGZpbmFsIHN0YXRpYyBpbnQgQml0MTIgPSAw
eDgwMDsJCQkJLy8gZGVwdGggKG5hbWUgcmVmLCBtc2cpIHwgb3BlcmF0b3IgKG9wZXJhdG9yKSB8
IGhhcyBhYnN0cmFjdCBtZXRob2RzICh0eXBlIGRlY2wpCiAJcHVibGljIGZpbmFsIHN0YXRpYyBp
bnQgQml0MTMgPSAweDEwMDA7CQkJLy8gZGVwdGggKG5hbWUgcmVmLCBtc2cpIHwgaXMgc2Vjb25k
YXJ5IHR5cGUgKHR5cGUgZGVjbCkKQEAgLTEyNiwxMCArMTI2LDExIEBACiAJcHVibGljIHN0YXRp
YyBmaW5hbCBpbnQgSXNUeXBlRWxpZGVkID0gQml0MjsgIC8vIHR5cGUgZWxpZGVkIGxhbWJkYSBh
cmd1bWVudC4KIAlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBJc0FyZ3VtZW50ID0gQml0MzsKIAlw
dWJsaWMgc3RhdGljIGZpbmFsIGludCBJc0xvY2FsRGVjbGFyYXRpb25SZWFjaGFibGUgPSBCaXQz
MTsKIAlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBJc0ZvcmVhY2hFbGVtZW50VmFyaWFibGUgPSBC
aXQ1OwogCXB1YmxpYyBzdGF0aWMgZmluYWwgaW50IFNoYWRvd3NPdXRlckxvY2FsID0gQml0MjI7
CisJcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgSXNJbml0aWFsaXplZEJ5TGFtZGFFeHByZXNzaW9u
ID0gQml0ODsKIAogCS8vIGZvciBuYW1lIHJlZnMgb3IgbG9jYWwgZGVjbHMKIAlwdWJsaWMgc3Rh
dGljIGZpbmFsIGludCBGaXJzdEFzc2lnbm1lbnRUb0xvY2FsID0gQml0NDsKIAogCS8vIGZvciBt
c2cgb3IgZmllbGQgcmVmZXJlbmNlcwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3BhcnNlci9SZWNvdmVy
ZWRCbG9jay5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL3BhcnNlci9SZWNvdmVyZWRCbG9jay5qYXZhCmluZGV4IDFk
NzRmZTguLjQ4NDUzYjQgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wYXJzZXIvUmVjb3ZlcmVkQmxvY2su
amF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvcGFyc2VyL1JlY292ZXJlZEJsb2NrLmphdmEKQEAgLTEsMTIgKzEs
MTYgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIw
MDkgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIw
MTMgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBU
aGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBh
dmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYx
LjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxh
YmxlIGF0CiAgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbAogICoK
KyAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQgc3BlY2lmaWNh
dGlvbiBkZXZlbG9wZWQgdW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0eSBQcm9jZXNzIChKQ1Ap
IGFuZCBpcyBtYWRlIGF2YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiBwdXJwb3Nl
cworICogb25seS4gVGhlIGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkgc3BlY2lmaWNh
dGlvbiBvZiB0aGUgSkNQLgorICogCiAgKiBDb250cmlidXRvcnM6CiAgKiAgICAgSUJNIENvcnBv
cmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCiAgKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKi8KIHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLnBhcnNl
cjsKIApAQCAtMTcsMTAgKzIxLDExIEBACiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFs
LmNvbXBpbGVyLmFzdC5BYnN0cmFjdE1ldGhvZERlY2xhcmF0aW9uOwogaW1wb3J0IG9yZy5lY2xp
cHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuQXJndW1lbnQ7CiBpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5BU1ROb2RlOwogaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuQmxvY2s7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmludGVybmFsLmNvbXBpbGVyLmFzdC5GaWVsZERlY2xhcmF0aW9uOworaW1wb3J0IG9yZy5lY2xp
cHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuTGFtYmRhRXhwcmVzc2lvbjsKIGltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkxvY2FsRGVjbGFyYXRpb247CiBp
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5TdGF0ZW1lbnQ7CiBp
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5UeXBlRGVjbGFyYXRp
b247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmNsYXNzZm10LkNs
YXNzRmlsZUNvbnN0YW50czsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIubG9va3VwLlR5cGVCaW5kaW5nOwpAQCAtMjksMTEgKzM0LDExIEBACiAKIAlwdWJsaWMgQmxv
Y2sgYmxvY2tEZWNsYXJhdGlvbjsKIAlwdWJsaWMgUmVjb3ZlcmVkU3RhdGVtZW50W10gc3RhdGVt
ZW50czsKIAlwdWJsaWMgaW50IHN0YXRlbWVudENvdW50OwogCXB1YmxpYyBib29sZWFuIHByZXNl
cnZlQ29udGVudCA9IGZhbHNlOwotCXB1YmxpYyBSZWNvdmVyZWRMb2NhbFZhcmlhYmxlIHBlbmRp
bmdBcmd1bWVudDsKKwlwdWJsaWMgUmVjb3ZlcmVkTG9jYWxWYXJpYWJsZSBbXSBwZW5kaW5nQXJn
dW1lbnRzID0gbnVsbDsKIAogCWludCBwZW5kaW5nTW9kaWZpZXJzOwogCWludCBwZW5kaW5nTW9k
aWZlcnNTb3VyY2VTdGFydCA9IC0xOwogCVJlY292ZXJlZEFubm90YXRpb25bXSBwZW5kaW5nQW5u
b3RhdGlvbnM7CiAJaW50IHBlbmRpbmdBbm5vdGF0aW9uQ291bnQ7CkBAIC01NCwxMCArNTksMjEg
QEAKIAkJCXJldHVybiB0aGlzOyAvLyBpZ25vcmUgdGhpcyBlbGVtZW50CiAJCX0KIAl9CiAJcmV0
dXJuIHN1cGVyLmFkZChtZXRob2REZWNsYXJhdGlvbiwgYnJhY2tldEJhbGFuY2VWYWx1ZSk7CiB9
CitwdWJsaWMgdm9pZCBhZGRQZW5kaW5nQXJndW1lbnQoUmVjb3ZlcmVkTG9jYWxWYXJpYWJsZSBw
ZW5kaW5nQXJnKSB7CisJaWYgKHRoaXMucGVuZGluZ0FyZ3VtZW50cyA9PSBudWxsKSB7CisJCVJl
Y292ZXJlZExvY2FsVmFyaWFibGUgcmVjb3ZlcmVkTG9jYWxWYXJpYWJsZSBbXSA9IHtwZW5kaW5n
QXJnfTsKKwkJdGhpcy5wZW5kaW5nQXJndW1lbnRzID0gcmVjb3ZlcmVkTG9jYWxWYXJpYWJsZTsK
Kwl9CisJZWxzZSB7CisJCWludCBsZW5ndGggPSB0aGlzLnBlbmRpbmdBcmd1bWVudHMubGVuZ3Ro
OworCQlTeXN0ZW0uYXJyYXljb3B5KHRoaXMucGVuZGluZ0FyZ3VtZW50cywgMCwgdGhpcy5wZW5k
aW5nQXJndW1lbnRzID0gbmV3IFJlY292ZXJlZExvY2FsVmFyaWFibGVbbGVuZ3RoKzFdLCAwLCBs
ZW5ndGgpOworCQl0aGlzLnBlbmRpbmdBcmd1bWVudHNbbGVuZ3RoXSA9IHBlbmRpbmdBcmc7CisJ
fQorfQogLyoKICAqIFJlY29yZCBhIG5lc3RlZCBibG9jayBkZWNsYXJhdGlvbgogICovCiBwdWJs
aWMgUmVjb3ZlcmVkRWxlbWVudCBhZGQoQmxvY2sgbmVzdGVkQmxvY2tEZWNsYXJhdGlvbiwgaW50
IGJyYWNrZXRCYWxhbmNlVmFsdWUpIHsKIAlyZXNldFBlbmRpbmdNb2RpZmllcnMoKTsKQEAgLTcw
LDEzICs4NiwxNSBAQAogCX0KIAogCVJlY292ZXJlZEJsb2NrIGVsZW1lbnQgPSBuZXcgUmVjb3Zl
cmVkQmxvY2sobmVzdGVkQmxvY2tEZWNsYXJhdGlvbiwgdGhpcywgYnJhY2tldEJhbGFuY2VWYWx1
ZSk7CiAKIAkvLyBpZiB3ZSBoYXZlIGEgcGVuZGluZyBBcmd1bWVudCwgcHJvbW90ZSBpdCBpbnRv
IHRoZSBuZXcgYmxvY2sKLQlpZiAodGhpcy5wZW5kaW5nQXJndW1lbnQgIT0gbnVsbCl7Ci0JCWVs
ZW1lbnQuYXR0YWNoKHRoaXMucGVuZGluZ0FyZ3VtZW50KTsKLQkJdGhpcy5wZW5kaW5nQXJndW1l
bnQgPSBudWxsOworCWlmICh0aGlzLnBlbmRpbmdBcmd1bWVudHMgIT0gbnVsbCkgeworCQlmb3Ig
KGludCBpbmR4ID0gMDsgaW5keCA8IHRoaXMucGVuZGluZ0FyZ3VtZW50cy5sZW5ndGg7IGluZHgr
KykgeworCQkJZWxlbWVudC5hdHRhY2godGhpcy5wZW5kaW5nQXJndW1lbnRzW2luZHhdKTsJCQkK
KwkJfQorCQl0aGlzLnBlbmRpbmdBcmd1bWVudHMgPSBudWxsOwogCX0KIAlpZihwYXJzZXIoKS5z
dGF0ZW1lbnRSZWNvdmVyeUFjdGl2YXRlZCkgewogCQlhZGRCbG9ja1N0YXRlbWVudChlbGVtZW50
KTsKIAl9CiAJYXR0YWNoKGVsZW1lbnQpOwpAQCAtMTI5LDExICsxNDcsMTEgQEAKIAkJCQl0aGlz
LnBlbmRpbmdNb2RpZmVyc1NvdXJjZVN0YXJ0KTsKIAl9CiAJcmVzZXRQZW5kaW5nTW9kaWZpZXJz
KCk7CiAKIAlpZiAobG9jYWxEZWNsYXJhdGlvbiBpbnN0YW5jZW9mIEFyZ3VtZW50KXsKLQkJdGhp
cy5wZW5kaW5nQXJndW1lbnQgPSBlbGVtZW50OworCQlhZGRQZW5kaW5nQXJndW1lbnQoZWxlbWVu
dCk7CiAJCXJldHVybiB0aGlzOwogCX0KIAogCWF0dGFjaChlbGVtZW50KTsKIAlpZiAobG9jYWxE
ZWNsYXJhdGlvbi5kZWNsYXJhdGlvblNvdXJjZUVuZCA9PSAwKSByZXR1cm4gZWxlbWVudDsKQEAg
LTI3NywxMSArMjk1LDE0IEBACiAJcmV0dXJuIHJlc3VsdC50b1N0cmluZygpOwogfQogLyoKICAq
IFJlYnVpbGQgYSBibG9jayBmcm9tIHRoZSBuZXN0ZWQgc3RydWN0dXJlIHdoaWNoIGlzIGluIHNj
b3BlCiAgKi8KLXB1YmxpYyBCbG9jayB1cGRhdGVkQmxvY2soaW50IGRlcHRoLCBTZXQga25vd25U
eXBlcyl7CitwdWJsaWMgQmxvY2sgdXBkYXRlZEJsb2NrKGludCBkZXB0aCwgU2V0IGtub3duVHlw
ZXMpIHsKKwlyZXR1cm4gdXBkYXRlZEJsb2NrKGRlcHRoLCBrbm93blR5cGVzLCBmYWxzZSk7Cit9
CitwdWJsaWMgQmxvY2sgdXBkYXRlZEJsb2NrKGludCBkZXB0aCwgU2V0IGtub3duVHlwZXMsIGJv
b2xlYW4gbGFtYmRhRXhwcmVzc2lvbkV4cGVjdGVkKSB7CiAKIAkvLyBpZiBibG9jayB3YXMgbm90
IG1hcmtlZCB0byBiZSBwcmVzZXJ2ZWQgb3IgZW1wdHksIHRoZW4gaWdub3JlIGl0CiAJaWYgKCF0
aGlzLnByZXNlcnZlQ29udGVudCB8fCB0aGlzLnN0YXRlbWVudENvdW50ID09IDApIHJldHVybiBu
dWxsOwogCiAJU3RhdGVtZW50W10gdXBkYXRlZFN0YXRlbWVudHMgPSBuZXcgU3RhdGVtZW50W3Ro
aXMuc3RhdGVtZW50Q291bnRdOwpAQCAtMzIzLDEzICszNDQsMjAgQEAKIAogCWludCBsYXN0RW5k
ID0gdGhpcy5ibG9ja0RlY2xhcmF0aW9uLnNvdXJjZVN0YXJ0OwogCiAJLy8gb25seSBjb2xsZWN0
IHRoZSBub24tbnVsbCB1cGRhdGVkIHN0YXRlbWVudHMKIAlmb3IgKGludCBpID0gMDsgaSA8IHRo
aXMuc3RhdGVtZW50Q291bnQ7IGkrKyl7Ci0JCVN0YXRlbWVudCB1cGRhdGVkU3RhdGVtZW50ID0g
dGhpcy5zdGF0ZW1lbnRzW2ldLnVwZGF0ZWRTdGF0ZW1lbnQoZGVwdGgsIGtub3duVHlwZXMpOwor
CQlib29sZWFuIGxhbWJkYUV4cHJJbml0ID0gaSA+IDAgJiYgbGFtYmRhRXhwcmVzc2lvbkluaXRp
YWxpemFibGUodGhpcy5zdGF0ZW1lbnRzW2ktMV0pOworCQlTdGF0ZW1lbnQgdXBkYXRlZFN0YXRl
bWVudCA9IHRoaXMuc3RhdGVtZW50c1tpXS51cGRhdGVkU3RhdGVtZW50KGRlcHRoLCBrbm93blR5
cGVzLCBsYW1iZGFFeHBySW5pdCk7CiAJCWlmICh1cGRhdGVkU3RhdGVtZW50ICE9IG51bGwpewot
CQkJdXBkYXRlZFN0YXRlbWVudHNbdXBkYXRlZENvdW50KytdID0gdXBkYXRlZFN0YXRlbWVudDsK
KwkJCUxhbWJkYUV4cHJlc3Npb24gbGFtYmRhRXhwciA9IGdldExhbWJkYUV4cHJlc3Npb24odXBk
YXRlZFN0YXRlbWVudCk7CisJCQlpZiAobGFtYmRhRXhwckluaXQgJiYgbGFtYmRhRXhwciAhPSBu
dWxsKSB7CisJCQkJKChMb2NhbERlY2xhcmF0aW9uKXVwZGF0ZWRTdGF0ZW1lbnRzW3VwZGF0ZWRD
b3VudC0xXSkuaW5pdGlhbGl6YXRpb24gPSBsYW1iZGFFeHByOworCQkJfQorCQkJZWxzZSB7CisJ
CQkJdXBkYXRlZFN0YXRlbWVudHNbdXBkYXRlZENvdW50KytdID0gdXBkYXRlZFN0YXRlbWVudDsK
KwkJCX0KIAogCQkJaWYgKHVwZGF0ZWRTdGF0ZW1lbnQgaW5zdGFuY2VvZiBMb2NhbERlY2xhcmF0
aW9uKSB7CiAJCQkJTG9jYWxEZWNsYXJhdGlvbiBsb2NhbERlY2xhcmF0aW9uID0gKExvY2FsRGVj
bGFyYXRpb24pIHVwZGF0ZWRTdGF0ZW1lbnQ7CiAJCQkJaWYobG9jYWxEZWNsYXJhdGlvbi5kZWNs
YXJhdGlvblNvdXJjZUVuZCA+IGxhc3RFbmQpIHsKIAkJCQkJbGFzdEVuZCA9IGxvY2FsRGVjbGFy
YXRpb24uZGVjbGFyYXRpb25Tb3VyY2VFbmQ7CkBAIC0zNTEsMTEgKzM3OSwxOCBAQAogCS8vIHJl
c2l6ZSBzdGF0ZW1lbnQgY29sbGVjdGlvbiBpZiBuZWNlc3NhcnkKIAlpZiAodXBkYXRlZENvdW50
ICE9IHRoaXMuc3RhdGVtZW50Q291bnQpewogCQl0aGlzLmJsb2NrRGVjbGFyYXRpb24uc3RhdGVt
ZW50cyA9IG5ldyBTdGF0ZW1lbnRbdXBkYXRlZENvdW50XTsKIAkJU3lzdGVtLmFycmF5Y29weSh1
cGRhdGVkU3RhdGVtZW50cywgMCwgdGhpcy5ibG9ja0RlY2xhcmF0aW9uLnN0YXRlbWVudHMsIDAs
IHVwZGF0ZWRDb3VudCk7CiAJfSBlbHNlIHsKLQkJdGhpcy5ibG9ja0RlY2xhcmF0aW9uLnN0YXRl
bWVudHMgPSB1cGRhdGVkU3RhdGVtZW50czsKKwkJTGFtYmRhRXhwcmVzc2lvbiBsYW1iZGEgPSBu
dWxsOworCQlpZiAobGFtYmRhRXhwcmVzc2lvbkV4cGVjdGVkICYmIChsYW1iZGEgPSBjYW5HZXRM
YW1iZGFFeHByZXNzaW9uKHVwZGF0ZWRTdGF0ZW1lbnRzLCB1cGRhdGVkQ291bnQpKSAhPSBudWxs
KSB7CisJCQlTdGF0ZW1lbnQgW10gc3RtdCA9IHtsYW1iZGF9OworCQkJdGhpcy5ibG9ja0RlY2xh
cmF0aW9uLnN0YXRlbWVudHMgPSBzdG10OworCQl9CisJCWVsc2UgeworCQkJdGhpcy5ibG9ja0Rl
Y2xhcmF0aW9uLnN0YXRlbWVudHMgPSB1cGRhdGVkU3RhdGVtZW50czsKKwkJfQogCX0KIAogCWlm
ICh0aGlzLmJsb2NrRGVjbGFyYXRpb24uc291cmNlRW5kID09IDApIHsKIAkJaWYobGFzdEVuZCA8
IGJvZHlFbmRWYWx1ZSkgewogCQkJdGhpcy5ibG9ja0RlY2xhcmF0aW9uLnNvdXJjZUVuZCA9IGJv
ZHlFbmRWYWx1ZTsKQEAgLTM2NCwxNyArMzk5LDQ3IEBACiAJCX0KIAl9CiAKIAlyZXR1cm4gdGhp
cy5ibG9ja0RlY2xhcmF0aW9uOwogfQorcHVibGljIExhbWJkYUV4cHJlc3Npb24gZ2V0TGFtYmRh
RXhwcmVzc2lvbiAoU3RhdGVtZW50IHN0bW50KSB7CisJaWYgKHN0bW50IGluc3RhbmNlb2YgTGFt
YmRhRXhwcmVzc2lvbikgeworCQlyZXR1cm4gKExhbWJkYUV4cHJlc3Npb24pc3RtbnQ7CisJfQor
CWVsc2UgaWYgKHN0bW50IGluc3RhbmNlb2YgQmxvY2sgJiYgKChCbG9jaylzdG1udCkuc3RhdGVt
ZW50c1swXSBpbnN0YW5jZW9mIExhbWJkYUV4cHJlc3Npb24pIHsKKwkJcmV0dXJuIChMYW1iZGFF
eHByZXNzaW9uKSgoQmxvY2spc3RtbnQpLnN0YXRlbWVudHNbMF07CisJfQorCXJldHVybiBudWxs
OworfQorcHVibGljIExhbWJkYUV4cHJlc3Npb24gY2FuR2V0TGFtYmRhRXhwcmVzc2lvbiAoU3Rh
dGVtZW50IFtdIHN0YXRlbWVudHNBcnJheSwgaW50IGNvdW50KSB7CisJZm9yIChpbnQgaW5keCA9
IDA7IGluZHggPCBjb3VudCAtIDE7IGluZHgrKykgeworCQlpZiAoIShzdGF0ZW1lbnRzQXJyYXlb
aW5keF0gaW5zdGFuY2VvZiBBcmd1bWVudCkpIHsKKwkJCXJldHVybiBudWxsOworCQl9CisJfQor
CUFyZ3VtZW50IFtdIGFyZ3VtZW50cyA9IG5ldyBBcmd1bWVudCBbY291bnQtMV07CisJU3lzdGVt
LmFycmF5Y29weShzdGF0ZW1lbnRzQXJyYXksIDAsIGFyZ3VtZW50cywgMCwgY291bnQtMSk7CisJ
cmV0dXJuIG5ldyBMYW1iZGFFeHByZXNzaW9uKHBhcnNlcigpLmNvbXBpbGF0aW9uVW5pdC5jb21w
aWxhdGlvblJlc3VsdCwgYXJndW1lbnRzLCBzdGF0ZW1lbnRzQXJyYXlbY291bnQtMV0pOworfQog
LyoKICAqIFJlYnVpbGQgYSBzdGF0ZW1lbnQgZnJvbSB0aGUgbmVzdGVkIHN0cnVjdHVyZSB3aGlj
aCBpcyBpbiBzY29wZQogICovCiBwdWJsaWMgU3RhdGVtZW50IHVwZGF0ZWRTdGF0ZW1lbnQoaW50
IGRlcHRoLCBTZXQga25vd25UeXBlcyl7CiAKIAlyZXR1cm4gdXBkYXRlZEJsb2NrKGRlcHRoLCBr
bm93blR5cGVzKTsKIH0KK3B1YmxpYyBTdGF0ZW1lbnQgdXBkYXRlZFN0YXRlbWVudChpbnQgZGVw
dGgsIFNldCBrbm93blR5cGVzLCBib29sZWFuIGxhbWJkYUV4cHJlc3Npb25FeHBlY3RlZCkgewor
CisJcmV0dXJuIGxhbWJkYUV4cHJlc3Npb25FeHBlY3RlZCA/IHVwZGF0ZWRCbG9jayhkZXB0aCwg
a25vd25UeXBlcywgdHJ1ZSkgOiB1cGRhdGVkU3RhdGVtZW50KGRlcHRoLCBrbm93blR5cGVzKTsK
K30KK2Jvb2xlYW4gbGFtYmRhRXhwcmVzc2lvbkluaXRpYWxpemFibGUoUmVjb3ZlcmVkU3RhdGVt
ZW50IHN0bW50KSB7CisJaWYgKHN0bW50IGluc3RhbmNlb2YgUmVjb3ZlcmVkTG9jYWxWYXJpYWJs
ZSkgeworCQlSZWNvdmVyZWRMb2NhbFZhcmlhYmxlIHJlY0xvY1ZhciA9IChSZWNvdmVyZWRMb2Nh
bFZhcmlhYmxlKSBzdG1udDsKKwkJcmV0dXJuIHJlY0xvY1Zhci5sb2NhbERlY2xhcmF0aW9uICE9
IG51bGwgJiYgKHJlY0xvY1Zhci5sb2NhbERlY2xhcmF0aW9uLmJpdHMgJiBBU1ROb2RlLklzSW5p
dGlhbGl6ZWRCeUxhbWRhRXhwcmVzc2lvbikgIT0gMDsKKwl9CisJcmV0dXJuIGZhbHNlOworfQog
LyoKICAqIEEgY2xvc2luZyBicmFjZSBnb3QgY29uc3VtZWQsIG1pZ2h0IGhhdmUgY2xvc2VkIHRo
ZSBjdXJyZW50IGVsZW1lbnQsCiAgKiBpbiB3aGljaCBjYXNlIGJvdGggdGhlIGN1cnJlbnRFbGVt
ZW50IGlzIGV4aXRlZAogICovCiBwdWJsaWMgUmVjb3ZlcmVkRWxlbWVudCB1cGRhdGVPbkNsb3Np
bmdCcmFjZShpbnQgYnJhY2VTdGFydCwgaW50IGJyYWNlRW5kKXsKZGlmZiAtLWdpdCBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9wYXJzZXIvUmVjb3ZlcmVkU3RhdGVtZW50LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcGFyc2VyL1JlY292ZXJl
ZFN0YXRlbWVudC5qYXZhCmluZGV4IDVkM2Y2NTMuLjU0MGMyZTIgMTAwNjQ0Ci0tLSBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9wYXJzZXIvUmVjb3ZlcmVkU3RhdGVtZW50LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3BhcnNlci9SZWNv
dmVyZWRTdGF0ZW1lbnQuamF2YQpAQCAtMSwxMiArMSwxNiBAQAogLyoqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAwOSBJQk0gQ29ycG9yYXRpb24gYW5kIG90
aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5kIG90
aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29t
cGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMg
b2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMg
dGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKICAqIGh0dHA6Ly93d3cuZWNs
aXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCiAgKgorICogVGhpcyBpcyBhbiBpbXBsZW1lbnRh
dGlvbiBvZiBhbiBlYXJseS1kcmFmdCBzcGVjaWZpY2F0aW9uIGRldmVsb3BlZCB1bmRlciB0aGUg
SmF2YQorICogQ29tbXVuaXR5IFByb2Nlc3MgKEpDUCkgYW5kIGlzIG1hZGUgYXZhaWxhYmxlIGZv
ciB0ZXN0aW5nIGFuZCBldmFsdWF0aW9uIHB1cnBvc2VzCisgKiBvbmx5LiBUaGUgY29kZSBpcyBu
b3QgY29tcGF0aWJsZSB3aXRoIGFueSBzcGVjaWZpY2F0aW9uIG9mIHRoZSBKQ1AuCisgKiAKICAq
IENvbnRyaWJ1dG9yczoKICAqICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBhbmQg
aW1wbGVtZW50YXRpb24KICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwogcGFja2FnZSBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIucGFyc2VyOwogCkBAIC00MiwxMCArNDYsMTMgQEAK
IAlyZXR1cm4gdGFiU3RyaW5nKHRhYikgKyAiUmVjb3ZlcmVkIHN0YXRlbWVudDpcbiIgKyB0aGlz
LnN0YXRlbWVudC5wcmludCh0YWIgKyAxLCBuZXcgU3RyaW5nQnVmZmVyKDEwKSk7IC8vJE5PTi1O
TFMtMSQKIH0KIHB1YmxpYyBTdGF0ZW1lbnQgdXBkYXRlZFN0YXRlbWVudChpbnQgZGVwdGgsIFNl
dCBrbm93blR5cGVzKXsKIAlyZXR1cm4gdGhpcy5zdGF0ZW1lbnQ7CiB9CitwdWJsaWMgU3RhdGVt
ZW50IHVwZGF0ZWRTdGF0ZW1lbnQoaW50IGRlcHRoLCBTZXQga25vd25UeXBlcywgYm9vbGVhbiBs
YW1iZGFFeHByZXNzaW9uRXhwZWN0ZWQpIHsKKwlyZXR1cm4gdXBkYXRlZFN0YXRlbWVudChkZXB0
aCwga25vd25UeXBlcyk7Cit9CiBwdWJsaWMgdm9pZCB1cGRhdGVQYXJzZVRyZWUoKXsKIAl1cGRh
dGVkU3RhdGVtZW50KDAsIG5ldyBIYXNoU2V0KCkpOwogfQogLyoKICAqIFVwZGF0ZSB0aGUgZGVj
bGFyYXRpb25Tb3VyY2VFbmQgb2YgdGhlIGNvcnJlc3BvbmRpbmcgcGFyc2Ugbm9kZQpkaWZmIC0t
Z2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvcmUvU2VsZWN0aW9uUmVxdWVzdG9yLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2Rl
bC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9TZWxlY3Rpb25SZXF1ZXN0b3IuamF2YQpp
bmRleCA3YWNjYmZmLi4xYWI2ZmE3IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9t
b2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9TZWxlY3Rpb25SZXF1ZXN0b3IuamF2
YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29yZS9TZWxlY3Rpb25SZXF1ZXN0b3IuamF2YQpAQCAtMSwxMiArMSwxNiBAQAogLyoqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMSBJQk0gQ29ycG9y
YXRpb24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMyBJQk0gQ29ycG9y
YXRpb24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBh
bmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRl
ciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2gg
YWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKICAqIGh0
dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCiAgKgorICogVGhpcyBpcyBh
biBpbXBsZW1lbnRhdGlvbiBvZiBhbiBlYXJseS1kcmFmdCBzcGVjaWZpY2F0aW9uIGRldmVsb3Bl
ZCB1bmRlciB0aGUgSmF2YQorICogQ29tbXVuaXR5IFByb2Nlc3MgKEpDUCkgYW5kIGlzIG1hZGUg
YXZhaWxhYmxlIGZvciB0ZXN0aW5nIGFuZCBldmFsdWF0aW9uIHB1cnBvc2VzCisgKiBvbmx5LiBU
aGUgY29kZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGFueSBzcGVjaWZpY2F0aW9uIG9mIHRoZSBK
Q1AuCisgKiAKICAqIENvbnRyaWJ1dG9yczoKICAqICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0
aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24KICAqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwogcGFj
a2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZTsKIApAQCAtNDQ5LDExICs0NTMsMTEg
QEAKIAkJCQluZXcgU3RyaW5nKGxvY2FsLm5hbWUpLAogCQkJCWxvY2FsLmRlY2xhcmF0aW9uU291
cmNlU3RhcnQsCiAJCQkJbG9jYWwuZGVjbGFyYXRpb25Tb3VyY2VFbmQsCiAJCQkJbG9jYWwuc291
cmNlU3RhcnQsCiAJCQkJbG9jYWwuc291cmNlRW5kLAotCQkJCVV0aWwudHlwZVNpZ25hdHVyZShs
b2NhbC50eXBlKSwKKwkJCQlsb2NhbC50eXBlID09IG51bGwgPyBTaWduYXR1cmUuY3JlYXRlVHlw
ZVNpZ25hdHVyZShsb2NhbC5iaW5kaW5nLnR5cGUucmVhZGFibGVOYW1lKCksIGZhbHNlKSA6IFV0
aWwudHlwZVNpZ25hdHVyZShsb2NhbC50eXBlKSwKIAkJCQlsb2NhbC5hbm5vdGF0aW9ucywKIAkJ
CQlsb2NhbC5tb2RpZmllcnMsCiAJCQkJbG9jYWwuZ2V0S2luZCgpID09IEFic3RyYWN0VmFyaWFi
bGVEZWNsYXJhdGlvbi5QQVJBTUVURVIpOwogCX0KIAlpZiAobG9jYWxWYXIgIT0gbnVsbCkgew==
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>236207</attachid>
            <date>2013-10-08 07:00:00 -0400</date>
            <delta_ts>2013-10-08 07:00:56 -0400</delta_ts>
            <desc>patch for the fix accommodating the review comments</desc>
            <filename>Bug408230--another.patch</filename>
            <type>text/plain</type>
            <size>50372</size>
            <attacher name="ANIRBAN CHAKRABORTY">anchakrk</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9tb2RlbC9UeXBlUmVzb2x2ZVRlc3RzLmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
bW9kZWwvVHlwZVJlc29sdmVUZXN0cy5qYXZhCmluZGV4IDk0MmY4ODkuLmQwZjE5OTMgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9tb2RlbC9UeXBlUmVzb2x2ZVRlc3RzLmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21v
ZGVsL1R5cGVSZXNvbHZlVGVzdHMuamF2YQpAQCAtMSwxMSArMSwxNSBAQAogLyoqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMiBJQk0gQ29ycG9yYXRpb24g
YW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRpb24g
YW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhl
IGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUg
dGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21w
YW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKICAqIGh0dHA6Ly93
d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCisgKgorICogVGhpcyBpcyBhbiBpbXBs
ZW1lbnRhdGlvbiBvZiBhbiBlYXJseS1kcmFmdCBzcGVjaWZpY2F0aW9uIGRldmVsb3BlZCB1bmRl
ciB0aGUgSmF2YQorICogQ29tbXVuaXR5IFByb2Nlc3MgKEpDUCkgYW5kIGlzIG1hZGUgYXZhaWxh
YmxlIGZvciB0ZXN0aW5nIGFuZCBldmFsdWF0aW9uIHB1cnBvc2VzCisgKiBvbmx5LiBUaGUgY29k
ZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGFueSBzcGVjaWZpY2F0aW9uIG9mIHRoZSBKQ1AuCiAg
KgogICogQ29udHJpYnV0b3JzOgogICogICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJ
IGFuZCBpbXBsZW1lbnRhdGlvbgogICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCiBwYWNrYWdlIG9y
Zy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsOwpAQCAtODMyLDYgKzgzNiwzNTggQEAKIAl9
CiAJZmluYWxseSB7CiAJCWRlbGV0ZVByb2plY3QoIlRlc3QzNDIzOTMiKTsKIAl9CiB9CisvLyBC
dWcgNDA4MjMwIC0gWzEuOF1baG92ZXJpbmddIE5QRSBvbiBob3ZlcmluZyBvdmVyIGEgdHlwZSBp
bmZlcnJlZCBwYXJhbWV0ZXIgaW4gbGFtYmRhIGV4cHJlc3Npb24KKy8vIGh0dHBzOi8vYnVncy5l
Y2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00MDgyMzAKK3B1YmxpYyB2b2lkIHRlc3RC
dWc0MDgyMzBhKCkgdGhyb3dzIENvcmVFeGNlcHRpb24geworCXRyeSB7CisJCWNyZWF0ZUphdmFQ
cm9qZWN0KCJQIiwgbmV3IFN0cmluZ1tdIHsic3JjIn0sIG5ldyBTdHJpbmdbXSB7IkpDTDE4X0xJ
QiJ9LCAiYmluIiwgIjEuOCIpOworCQlTdHJpbmcgc291cmNlID0gInBhY2thZ2UgcDtcbiIgKwor
CQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCQkiICBGSSBpMSA9IChhLCBiYXJnKSAtPiBh
K2Jhcmc7XG4iICsKKwkJCQkifVxuIiArCisJCQkJImludGVyZmFjZSBGSSB7IGludCBmMShpbnQg
YSwgaW50IGIpOyB9XG4iOworCQljcmVhdGVGb2xkZXIoIi9QL3NyYy9wIik7CisJCWNyZWF0ZUZp
bGUoCisJCQkiL1Avc3JjL3AvWC5qYXZhIiwKKwkJCXNvdXJjZQorCQkpOworCQl3YWl0Rm9yQXV0
b0J1aWxkKCk7CisJCQorCQlJQ29tcGlsYXRpb25Vbml0IHVuaXQgPSBnZXRDb21waWxhdGlvblVu
aXQoIi9QL3NyYy9wL1guamF2YSIpOyAKKwkJU3RyaW5nIHNlbGVjdFN0cmluZyA9ICJiYXJnIjsK
KwkJSUphdmFFbGVtZW50IFtdIHZhcmlhYmxlID0gKChJQ29kZUFzc2lzdCkgdW5pdCkuY29kZVNl
bGVjdChzb3VyY2UubGFzdEluZGV4T2Yoc2VsZWN0U3RyaW5nKSwgc2VsZWN0U3RyaW5nLmxlbmd0
aCgpKTsKKwkJYXNzZXJ0RXF1YWxzKDEsIHZhcmlhYmxlLmxlbmd0aCk7CisJfSBmaW5hbGx5IHsK
KwkJZGVsZXRlUHJvamVjdCgiUCIpOworCX0KK30KK3B1YmxpYyB2b2lkIHRlc3RCdWc0MDgyMzBi
KCkgdGhyb3dzIENvcmVFeGNlcHRpb24geworCXRyeSB7CisJCWNyZWF0ZUphdmFQcm9qZWN0KCJQ
IiwgbmV3IFN0cmluZ1tdIHsic3JjIn0sIG5ldyBTdHJpbmdbXSB7IkpDTDE4X0xJQiJ9LCAiYmlu
IiwgIjEuOCIpOworCQlTdHJpbmcgc291cmNlID0gInBhY2thZ2UgcDtcbiIgKworCQkJCSJwdWJs
aWMgY2xhc3MgWCB7XG4iICsKKwkJCQkiICB2b2lkIGZvbygpIHtcbiIgKworCQkJCSIJRkkgaTIg
PSAoYSwgYmFyZykgLT4geyByZXR1cm4gYStiYXJnOyB9O1xuIiArCisJCQkJIiAgfVxuIiArCisJ
CQkJIn1cbiIgKworCQkJCSJpbnRlcmZhY2UgRkkgeyBpbnQgZjEoaW50IGEsIGludCBiKTsgfVxu
IjsKKwkJY3JlYXRlRm9sZGVyKCIvUC9zcmMvcCIpOworCQljcmVhdGVGaWxlKAorCQkJIi9QL3Ny
Yy9wL1guamF2YSIsCisJCQlzb3VyY2UKKwkJKTsKKwkJd2FpdEZvckF1dG9CdWlsZCgpOworCQkK
KwkJSUNvbXBpbGF0aW9uVW5pdCB1bml0ID0gZ2V0Q29tcGlsYXRpb25Vbml0KCIvUC9zcmMvcC9Y
LmphdmEiKTsgCisJCVN0cmluZyBzZWxlY3RTdHJpbmcgPSAiYmFyZyI7CisJCUlKYXZhRWxlbWVu
dCBbXSB2YXJpYWJsZSA9ICgoSUNvZGVBc3Npc3QpIHVuaXQpLmNvZGVTZWxlY3Qoc291cmNlLmxh
c3RJbmRleE9mKHNlbGVjdFN0cmluZyksIHNlbGVjdFN0cmluZy5sZW5ndGgoKSk7CisJCWFzc2Vy
dEVxdWFscygxLCB2YXJpYWJsZS5sZW5ndGgpOworCX0gZmluYWxseSB7CisJCWRlbGV0ZVByb2pl
Y3QoIlAiKTsKKwl9Cit9CitwdWJsaWMgdm9pZCB0ZXN0QnVnNDA4MjMwYygpIHRocm93cyBDb3Jl
RXhjZXB0aW9uIHsKKwl0cnkgeworCQljcmVhdGVKYXZhUHJvamVjdCgiUCIsIG5ldyBTdHJpbmdb
XSB7InNyYyJ9LCBuZXcgU3RyaW5nW10geyJKQ0wxOF9MSUIifSwgImJpbiIsICIxLjgiKTsKKwkJ
U3RyaW5nIHNvdXJjZSA9ICJwYWNrYWdlIHA7XG4iICsKKwkJCQkicHVibGljIGNsYXNzIFgge1xu
IiArCisJCQkJIiAgdm9pZCBmb28oKSB7XG4iICsKKwkJCQkiCUZJIGkyID0gKGEsIGJhcmcpIC0+
IHsgaW50IHggPSAyOyB3aGlsZSAoeCA8IDIpIHsgeCsrOyB9IHJldHVybiBhK2Jhcmc7IH07XG4i
ICsKKwkJCQkiICB9XG4iICsKKwkJCQkifVxuIiArCisJCQkJImludGVyZmFjZSBGSSB7IGludCBm
MShpbnQgYSwgaW50IGIpOyB9XG4iOworCQljcmVhdGVGb2xkZXIoIi9QL3NyYy9wIik7CisJCWNy
ZWF0ZUZpbGUoCisJCQkiL1Avc3JjL3AvWC5qYXZhIiwKKwkJCXNvdXJjZQorCQkpOworCQl3YWl0
Rm9yQXV0b0J1aWxkKCk7CisJCQorCQlJQ29tcGlsYXRpb25Vbml0IHVuaXQgPSBnZXRDb21waWxh
dGlvblVuaXQoIi9QL3NyYy9wL1guamF2YSIpOyAKKwkJU3RyaW5nIHNlbGVjdFN0cmluZyA9ICJi
YXJnIjsKKwkJSUphdmFFbGVtZW50IFtdIHZhcmlhYmxlID0gKChJQ29kZUFzc2lzdCkgdW5pdCku
Y29kZVNlbGVjdChzb3VyY2UubGFzdEluZGV4T2Yoc2VsZWN0U3RyaW5nKSwgc2VsZWN0U3RyaW5n
Lmxlbmd0aCgpKTsKKwkJYXNzZXJ0RXF1YWxzKDEsIHZhcmlhYmxlLmxlbmd0aCk7CisJfSBmaW5h
bGx5IHsKKwkJZGVsZXRlUHJvamVjdCgiUCIpOworCX0KK30KK3B1YmxpYyB2b2lkIHRlc3RCdWc0
MDgyMzBkKCkgdGhyb3dzIENvcmVFeGNlcHRpb24geworCXRyeSB7CisJCWNyZWF0ZUphdmFQcm9q
ZWN0KCJQIiwgbmV3IFN0cmluZ1tdIHsic3JjIn0sIG5ldyBTdHJpbmdbXSB7IkpDTDE4X0xJQiJ9
LCAiYmluIiwgIjEuOCIpOworCQlTdHJpbmcgc291cmNlID0gInBhY2thZ2UgcDtcbiIgKworCQkJ
CSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCQkiICBGSSBpMSA9IChiYXJnKSAtPiArK2Jhcmc7
XG4iICsKKwkJCQkifVxuIiArCisJCQkJImludGVyZmFjZSBGSSB7IGludCBmMShpbnQgYik7IH1c
biI7CisJCWNyZWF0ZUZvbGRlcigiL1Avc3JjL3AiKTsKKwkJY3JlYXRlRmlsZSgKKwkJCSIvUC9z
cmMvcC9YLmphdmEiLAorCQkJc291cmNlCisJCSk7CisJCXdhaXRGb3JBdXRvQnVpbGQoKTsKKwkJ
CisJCUlDb21waWxhdGlvblVuaXQgdW5pdCA9IGdldENvbXBpbGF0aW9uVW5pdCgiL1Avc3JjL3Av
WC5qYXZhIik7IAorCQlTdHJpbmcgc2VsZWN0U3RyaW5nID0gImJhcmciOworCQlJSmF2YUVsZW1l
bnQgW10gdmFyaWFibGUgPSAoKElDb2RlQXNzaXN0KSB1bml0KS5jb2RlU2VsZWN0KHNvdXJjZS5s
YXN0SW5kZXhPZihzZWxlY3RTdHJpbmcpLCBzZWxlY3RTdHJpbmcubGVuZ3RoKCkpOworCQlhc3Nl
cnRFcXVhbHMoMSwgdmFyaWFibGUubGVuZ3RoKTsKKwl9IGZpbmFsbHkgeworCQlkZWxldGVQcm9q
ZWN0KCJQIik7CisJfQorfQorcHVibGljIHZvaWQgdGVzdEJ1ZzQwODIzMGUoKSB0aHJvd3MgQ29y
ZUV4Y2VwdGlvbiB7CisJdHJ5IHsKKwkJY3JlYXRlSmF2YVByb2plY3QoIlAiLCBuZXcgU3RyaW5n
W10geyJzcmMifSwgbmV3IFN0cmluZ1tdIHsiSkNMMThfTElCIn0sICJiaW4iLCAiMS44Iik7CisJ
CVN0cmluZyBzb3VyY2UgPSAicGFja2FnZSBwO1xuIiArCisJCQkJInB1YmxpYyBjbGFzcyBYIHtc
biIgKworCQkJCSIgIEZJIGkxID0gKGFhcmcpIC0+IHsgcmV0dXJuIGFhcmcrKzt9O1xuIiArCisJ
CQkJIn1cbiIgKworCQkJCSJpbnRlcmZhY2UgRkkgeyBpbnQgZjEoaW50IGEpOyB9XG4iOworCQlj
cmVhdGVGb2xkZXIoIi9QL3NyYy9wIik7CisJCWNyZWF0ZUZpbGUoCisJCQkiL1Avc3JjL3AvWC5q
YXZhIiwKKwkJCXNvdXJjZQorCQkpOworCQl3YWl0Rm9yQXV0b0J1aWxkKCk7CisJCQorCQlJQ29t
cGlsYXRpb25Vbml0IHVuaXQgPSBnZXRDb21waWxhdGlvblVuaXQoIi9QL3NyYy9wL1guamF2YSIp
OyAKKwkJU3RyaW5nIHNlbGVjdFN0cmluZyA9ICJhYXJnIjsKKwkJSUphdmFFbGVtZW50IFtdIHZh
cmlhYmxlID0gKChJQ29kZUFzc2lzdCkgdW5pdCkuY29kZVNlbGVjdChzb3VyY2UubGFzdEluZGV4
T2Yoc2VsZWN0U3RyaW5nKSwgc2VsZWN0U3RyaW5nLmxlbmd0aCgpKTsKKwkJYXNzZXJ0RXF1YWxz
KDEsIHZhcmlhYmxlLmxlbmd0aCk7CisJfSBmaW5hbGx5IHsKKwkJZGVsZXRlUHJvamVjdCgiUCIp
OworCX0KK30KK3B1YmxpYyB2b2lkIHRlc3RCdWc0MDgyMzBmKCkgdGhyb3dzIENvcmVFeGNlcHRp
b24geworCXRyeSB7CisJCWNyZWF0ZUphdmFQcm9qZWN0KCJQIiwgbmV3IFN0cmluZ1tdIHsic3Jj
In0sIG5ldyBTdHJpbmdbXSB7IkpDTDE4X0xJQiJ9LCAiYmluIiwgIjEuOCIpOworCQlTdHJpbmcg
c291cmNlID0gInBhY2thZ2UgcDtcbiIgKworCQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJ
CQkiICBGSSBpMSA9IChhYXJnKSAtPiB7ICBpbnQgeCA9IGFhcmc7IHJldHVybiBhYXJnKys7fTtc
biIgKworCQkJCSJ9XG4iICsKKwkJCQkiaW50ZXJmYWNlIEZJIHsgaW50IGYxKGludCBhKTsgfVxu
IjsKKwkJY3JlYXRlRm9sZGVyKCIvUC9zcmMvcCIpOworCQljcmVhdGVGaWxlKAorCQkJIi9QL3Ny
Yy9wL1guamF2YSIsCisJCQlzb3VyY2UKKwkJKTsKKwkJd2FpdEZvckF1dG9CdWlsZCgpOworCQkK
KwkJSUNvbXBpbGF0aW9uVW5pdCB1bml0ID0gZ2V0Q29tcGlsYXRpb25Vbml0KCIvUC9zcmMvcC9Y
LmphdmEiKTsgCisJCVN0cmluZyBzZWxlY3RTdHJpbmcgPSAiYWFyZyI7CisJCUlKYXZhRWxlbWVu
dCBbXSB2YXJpYWJsZSA9ICgoSUNvZGVBc3Npc3QpIHVuaXQpLmNvZGVTZWxlY3Qoc291cmNlLmxh
c3RJbmRleE9mKHNlbGVjdFN0cmluZyksIHNlbGVjdFN0cmluZy5sZW5ndGgoKSk7CisJCWFzc2Vy
dEVxdWFscygxLCB2YXJpYWJsZS5sZW5ndGgpOworCX0gZmluYWxseSB7CisJCWRlbGV0ZVByb2pl
Y3QoIlAiKTsKKwl9Cit9CitwdWJsaWMgdm9pZCB0ZXN0QnVnNDA4MjMwZygpIHRocm93cyBDb3Jl
RXhjZXB0aW9uIHsKKwl0cnkgeworCQljcmVhdGVKYXZhUHJvamVjdCgiUCIsIG5ldyBTdHJpbmdb
XSB7InNyYyJ9LCBuZXcgU3RyaW5nW10geyJKQ0wxOF9MSUIifSwgImJpbiIsICIxLjgiKTsKKwkJ
U3RyaW5nIHNvdXJjZSA9ICJwYWNrYWdlIHA7XG4iICsKKwkJCQkicHVibGljIGNsYXNzIFgge1xu
IiArCisJCQkJIiBwdWJsaWMgdm9pZCBib28oRkkgZmkpIHt9XG4iICsKKwkJCQkiICB2b2lkIGZv
bygpIHtcbiIgKworCQkJCSIJYm9vKChhYXJnKSAtPiBhYXJnKyspO1xuIiArCisJCQkJIiAgfVxu
IiArCisJCQkJIn1cbiIgKworCQkJCSJpbnRlcmZhY2UgRkkgeyBpbnQgZjEoaW50IGEpOyB9XG4i
OworCQljcmVhdGVGb2xkZXIoIi9QL3NyYy9wIik7CisJCWNyZWF0ZUZpbGUoCisJCQkiL1Avc3Jj
L3AvWC5qYXZhIiwKKwkJCXNvdXJjZQorCQkpOworCQl3YWl0Rm9yQXV0b0J1aWxkKCk7CisJCQor
CQlJQ29tcGlsYXRpb25Vbml0IHVuaXQgPSBnZXRDb21waWxhdGlvblVuaXQoIi9QL3NyYy9wL1gu
amF2YSIpOyAKKwkJU3RyaW5nIHNlbGVjdFN0cmluZyA9ICJhYXJnIjsKKwkJSUphdmFFbGVtZW50
IFtdIHZhcmlhYmxlID0gKChJQ29kZUFzc2lzdCkgdW5pdCkuY29kZVNlbGVjdChzb3VyY2UubGFz
dEluZGV4T2Yoc2VsZWN0U3RyaW5nKSwgc2VsZWN0U3RyaW5nLmxlbmd0aCgpKTsKKwkJYXNzZXJ0
RXF1YWxzKDEsIHZhcmlhYmxlLmxlbmd0aCk7CisJfSBmaW5hbGx5IHsKKwkJZGVsZXRlUHJvamVj
dCgiUCIpOworCX0KK30KK3B1YmxpYyB2b2lkIHRlc3RCdWc0MDgyMzBoKCkgdGhyb3dzIENvcmVF
eGNlcHRpb24geworCXRyeSB7CisJCWNyZWF0ZUphdmFQcm9qZWN0KCJQIiwgbmV3IFN0cmluZ1td
IHsic3JjIn0sIG5ldyBTdHJpbmdbXSB7IkpDTDE4X0xJQiJ9LCAiYmluIiwgIjEuOCIpOworCQlT
dHJpbmcgc291cmNlID0gInBhY2thZ2UgcDtcbiIgKworCQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4i
ICsKKwkJCQkiIHB1YmxpYyB2b2lkIGJvbyhGSSBmaSkge31cbiIgKworCQkJCSIgIHZvaWQgZm9v
KCkge1xuIiArCisJCQkJIglib28oKGFhcmcpIC0+IHtpbnQgYiA9IDEwOyByZXR1cm4gYWFyZysr
O30pO1xuIiArCisJCQkJIiAgfVxuIiArCisJCQkJIn1cbiIgKworCQkJCSJpbnRlcmZhY2UgRkkg
eyBpbnQgZjEoaW50IGEpOyB9XG4iOworCQljcmVhdGVGb2xkZXIoIi9QL3NyYy9wIik7CisJCWNy
ZWF0ZUZpbGUoCisJCQkiL1Avc3JjL3AvWC5qYXZhIiwKKwkJCXNvdXJjZQorCQkpOworCQl3YWl0
Rm9yQXV0b0J1aWxkKCk7CisJCQorCQlJQ29tcGlsYXRpb25Vbml0IHVuaXQgPSBnZXRDb21waWxh
dGlvblVuaXQoIi9QL3NyYy9wL1guamF2YSIpOyAKKwkJU3RyaW5nIHNlbGVjdFN0cmluZyA9ICJh
YXJnIjsKKwkJSUphdmFFbGVtZW50IFtdIHZhcmlhYmxlID0gKChJQ29kZUFzc2lzdCkgdW5pdCku
Y29kZVNlbGVjdChzb3VyY2UubGFzdEluZGV4T2Yoc2VsZWN0U3RyaW5nKSwgc2VsZWN0U3RyaW5n
Lmxlbmd0aCgpKTsKKwkJYXNzZXJ0RXF1YWxzKDEsIHZhcmlhYmxlLmxlbmd0aCk7CisJfSBmaW5h
bGx5IHsKKwkJZGVsZXRlUHJvamVjdCgiUCIpOworCX0KK30KK3B1YmxpYyB2b2lkIHRlc3RCdWc0
MDgyMzBpKCkgdGhyb3dzIENvcmVFeGNlcHRpb24geworCXRyeSB7CisJCWNyZWF0ZUphdmFQcm9q
ZWN0KCJQIiwgbmV3IFN0cmluZ1tdIHsic3JjIn0sIG5ldyBTdHJpbmdbXSB7IkpDTDE4X0xJQiJ9
LCAiYmluIiwgIjEuOCIpOworCQlTdHJpbmcgc291cmNlID0gInBhY2thZ2UgcDtcbiIgKworCQkJ
CSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCQkiIHB1YmxpYyB2b2lkIGJvbyhGSSBmaSkge31c
biIgKworCQkJCSIgIHZvaWQgZm9vKCkge1xuIiArCisJCQkJIglib28oKGFhcmcsIHgpIC0+IHgg
KyBhYXJnKyspO1xuIiArCisJCQkJIiAgfVxuIiArCisJCQkJIn1cbiIgKworCQkJCSJpbnRlcmZh
Y2UgRkkgeyBpbnQgZjEoaW50IGEsIGludCBiKTsgfVxuIjsKKwkJY3JlYXRlRm9sZGVyKCIvUC9z
cmMvcCIpOworCQljcmVhdGVGaWxlKAorCQkJIi9QL3NyYy9wL1guamF2YSIsCisJCQlzb3VyY2UK
KwkJKTsKKwkJd2FpdEZvckF1dG9CdWlsZCgpOworCQkKKwkJSUNvbXBpbGF0aW9uVW5pdCB1bml0
ID0gZ2V0Q29tcGlsYXRpb25Vbml0KCIvUC9zcmMvcC9YLmphdmEiKTsgCisJCVN0cmluZyBzZWxl
Y3RTdHJpbmcgPSAiYWFyZyI7CisJCUlKYXZhRWxlbWVudCBbXSB2YXJpYWJsZSA9ICgoSUNvZGVB
c3Npc3QpIHVuaXQpLmNvZGVTZWxlY3Qoc291cmNlLmxhc3RJbmRleE9mKHNlbGVjdFN0cmluZyks
IHNlbGVjdFN0cmluZy5sZW5ndGgoKSk7CisJCWFzc2VydEVxdWFscygxLCB2YXJpYWJsZS5sZW5n
dGgpOworCX0gZmluYWxseSB7CisJCWRlbGV0ZVByb2plY3QoIlAiKTsKKwl9Cit9CitwdWJsaWMg
dm9pZCB0ZXN0QnVnNDA4MjMwaigpIHRocm93cyBDb3JlRXhjZXB0aW9uIHsKKwl0cnkgeworCQlj
cmVhdGVKYXZhUHJvamVjdCgiUCIsIG5ldyBTdHJpbmdbXSB7InNyYyJ9LCBuZXcgU3RyaW5nW10g
eyJKQ0wxOF9MSUIifSwgImJpbiIsICIxLjgiKTsKKwkJU3RyaW5nIHNvdXJjZSA9ICJwYWNrYWdl
IHA7XG4iICsKKwkJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkJIiBwdWJsaWMgdm9pZCBi
b28oRkkgZmkpIHt9XG4iICsKKwkJCQkiICB2b2lkIGZvbygpIHtcbiIgKworCQkJCSIJYm9vKChh
YXJnLCB4KSAtPiB7aW50IGIgPSAxMDsgcmV0dXJuIHggKyBhYXJnKys7fSk7XG4iICsKKwkJCQki
ICB9XG4iICsKKwkJCQkifVxuIiArCisJCQkJImludGVyZmFjZSBGSSB7IGludCBmMShpbnQgYSwg
aW50IGIpOyB9XG4iOworCQljcmVhdGVGb2xkZXIoIi9QL3NyYy9wIik7CisJCWNyZWF0ZUZpbGUo
CisJCQkiL1Avc3JjL3AvWC5qYXZhIiwKKwkJCXNvdXJjZQorCQkpOworCQl3YWl0Rm9yQXV0b0J1
aWxkKCk7CisJCQorCQlJQ29tcGlsYXRpb25Vbml0IHVuaXQgPSBnZXRDb21waWxhdGlvblVuaXQo
Ii9QL3NyYy9wL1guamF2YSIpOyAKKwkJU3RyaW5nIHNlbGVjdFN0cmluZyA9ICJhYXJnIjsKKwkJ
SUphdmFFbGVtZW50IFtdIHZhcmlhYmxlID0gKChJQ29kZUFzc2lzdCkgdW5pdCkuY29kZVNlbGVj
dChzb3VyY2UubGFzdEluZGV4T2Yoc2VsZWN0U3RyaW5nKSwgc2VsZWN0U3RyaW5nLmxlbmd0aCgp
KTsKKwkJYXNzZXJ0RXF1YWxzKDEsIHZhcmlhYmxlLmxlbmd0aCk7CisJfSBmaW5hbGx5IHsKKwkJ
ZGVsZXRlUHJvamVjdCgiUCIpOworCX0KK30KK3B1YmxpYyB2b2lkIHRlc3RCdWc0MDgyMzBrKCkg
dGhyb3dzIENvcmVFeGNlcHRpb24geworCXRyeSB7CisJCWNyZWF0ZUphdmFQcm9qZWN0KCJQIiwg
bmV3IFN0cmluZ1tdIHsic3JjIn0sIG5ldyBTdHJpbmdbXSB7IkpDTDE4X0xJQiJ9LCAiYmluIiwg
IjEuOCIpOworCQlTdHJpbmcgc291cmNlID0gInBhY2thZ2UgcDtcbiIgKworCQkJCSJwdWJsaWMg
Y2xhc3MgWCB7XG4iICsKKwkJCQkiIHB1YmxpYyB2b2lkIGJvbyhpbnQgeCwgaW50IHksIEZJIGZp
KSB7fVxuIiArCisJCQkJIiAgdm9pZCBmb28oKSB7XG4iICsKKwkJCQkiCWJvbygyLCA0LCAoYWFy
ZykgLT4gYWFyZysrKTtcbiIgKworCQkJCSIgIH1cbiIgKworCQkJCSJ9XG4iICsKKwkJCQkiaW50
ZXJmYWNlIEZJIHsgaW50IGYxKGludCBhKTsgfVxuIjsKKwkJY3JlYXRlRm9sZGVyKCIvUC9zcmMv
cCIpOworCQljcmVhdGVGaWxlKAorCQkJIi9QL3NyYy9wL1guamF2YSIsCisJCQlzb3VyY2UKKwkJ
KTsKKwkJd2FpdEZvckF1dG9CdWlsZCgpOworCQkKKwkJSUNvbXBpbGF0aW9uVW5pdCB1bml0ID0g
Z2V0Q29tcGlsYXRpb25Vbml0KCIvUC9zcmMvcC9YLmphdmEiKTsgCisJCVN0cmluZyBzZWxlY3RT
dHJpbmcgPSAiYWFyZyI7CisJCUlKYXZhRWxlbWVudCBbXSB2YXJpYWJsZSA9ICgoSUNvZGVBc3Np
c3QpIHVuaXQpLmNvZGVTZWxlY3Qoc291cmNlLmxhc3RJbmRleE9mKHNlbGVjdFN0cmluZyksIHNl
bGVjdFN0cmluZy5sZW5ndGgoKSk7CisJCWFzc2VydEVxdWFscygxLCB2YXJpYWJsZS5sZW5ndGgp
OworCX0gZmluYWxseSB7CisJCWRlbGV0ZVByb2plY3QoIlAiKTsKKwl9Cit9CitwdWJsaWMgdm9p
ZCB0ZXN0QnVnNDA4MjMwbCgpIHRocm93cyBDb3JlRXhjZXB0aW9uIHsKKwl0cnkgeworCQljcmVh
dGVKYXZhUHJvamVjdCgiUCIsIG5ldyBTdHJpbmdbXSB7InNyYyJ9LCBuZXcgU3RyaW5nW10geyJK
Q0wxOF9MSUIifSwgImJpbiIsICIxLjgiKTsKKwkJU3RyaW5nIHNvdXJjZSA9ICJwYWNrYWdlIHA7
XG4iICsKKwkJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkJIiBwdWJsaWMgdm9pZCBib28o
aW50IHgsIEZJIGZpKSB7fVxuIiArCisJCQkJIiAgdm9pZCBmb28oKSB7XG4iICsKKwkJCQkiCWJv
bygyLCAoYWFyZykgLT4ge2ludCBiID0gMTA7IHJldHVybiBhYXJnKys7fSk7XG4iICsKKwkJCQki
ICB9XG4iICsKKwkJCQkifVxuIiArCisJCQkJImludGVyZmFjZSBGSSB7IGludCBmMShpbnQgYSk7
IH1cbiI7CisJCWNyZWF0ZUZvbGRlcigiL1Avc3JjL3AiKTsKKwkJY3JlYXRlRmlsZSgKKwkJCSIv
UC9zcmMvcC9YLmphdmEiLAorCQkJc291cmNlCisJCSk7CisJCXdhaXRGb3JBdXRvQnVpbGQoKTsK
KwkJCisJCUlDb21waWxhdGlvblVuaXQgdW5pdCA9IGdldENvbXBpbGF0aW9uVW5pdCgiL1Avc3Jj
L3AvWC5qYXZhIik7IAorCQlTdHJpbmcgc2VsZWN0U3RyaW5nID0gImFhcmciOworCQlJSmF2YUVs
ZW1lbnQgW10gdmFyaWFibGUgPSAoKElDb2RlQXNzaXN0KSB1bml0KS5jb2RlU2VsZWN0KHNvdXJj
ZS5sYXN0SW5kZXhPZihzZWxlY3RTdHJpbmcpLCBzZWxlY3RTdHJpbmcubGVuZ3RoKCkpOworCQlh
c3NlcnRFcXVhbHMoMSwgdmFyaWFibGUubGVuZ3RoKTsKKwl9IGZpbmFsbHkgeworCQlkZWxldGVQ
cm9qZWN0KCJQIik7CisJfQorfQorcHVibGljIHZvaWQgdGVzdEJ1ZzQwODIzMG0oKSB0aHJvd3Mg
Q29yZUV4Y2VwdGlvbiB7CisJdHJ5IHsKKwkJY3JlYXRlSmF2YVByb2plY3QoIlAiLCBuZXcgU3Ry
aW5nW10geyJzcmMifSwgbmV3IFN0cmluZ1tdIHsiSkNMMThfTElCIn0sICJiaW4iLCAiMS44Iik7
CisJCVN0cmluZyBzb3VyY2UgPSAicGFja2FnZSBwO1xuIiArCisJCQkJInB1YmxpYyBjbGFzcyBY
IHtcbiIgKworCQkJCSIgcHVibGljIHZvaWQgYm9vKGludCB4LCBpbnQgeSwgRkkgZmkpIHt9XG4i
ICsKKwkJCQkiICB2b2lkIGZvbygpIHtcbiIgKworCQkJCSIJYm9vKDIsIDUrNiwgKGFhcmcsIHgp
IC0+IHggKyBhYXJnKyspO1xuIiArCisJCQkJIiAgfVxuIiArCisJCQkJIn1cbiIgKworCQkJCSJp
bnRlcmZhY2UgRkkgeyBpbnQgZjEoaW50IGEsIGludCBiKTsgfVxuIjsKKwkJY3JlYXRlRm9sZGVy
KCIvUC9zcmMvcCIpOworCQljcmVhdGVGaWxlKAorCQkJIi9QL3NyYy9wL1guamF2YSIsCisJCQlz
b3VyY2UKKwkJKTsKKwkJd2FpdEZvckF1dG9CdWlsZCgpOworCQkKKwkJSUNvbXBpbGF0aW9uVW5p
dCB1bml0ID0gZ2V0Q29tcGlsYXRpb25Vbml0KCIvUC9zcmMvcC9YLmphdmEiKTsgCisJCVN0cmlu
ZyBzZWxlY3RTdHJpbmcgPSAiYWFyZyI7CisJCUlKYXZhRWxlbWVudCBbXSB2YXJpYWJsZSA9ICgo
SUNvZGVBc3Npc3QpIHVuaXQpLmNvZGVTZWxlY3Qoc291cmNlLmxhc3RJbmRleE9mKHNlbGVjdFN0
cmluZyksIHNlbGVjdFN0cmluZy5sZW5ndGgoKSk7CisJCWFzc2VydEVxdWFscygxLCB2YXJpYWJs
ZS5sZW5ndGgpOworCX0gZmluYWxseSB7CisJCWRlbGV0ZVByb2plY3QoIlAiKTsKKwl9Cit9Citw
dWJsaWMgdm9pZCB0ZXN0QnVnNDA4MjMwbigpIHRocm93cyBDb3JlRXhjZXB0aW9uIHsKKwl0cnkg
eworCQljcmVhdGVKYXZhUHJvamVjdCgiUCIsIG5ldyBTdHJpbmdbXSB7InNyYyJ9LCBuZXcgU3Ry
aW5nW10geyJKQ0wxOF9MSUIifSwgImJpbiIsICIxLjgiKTsKKwkJU3RyaW5nIHNvdXJjZSA9ICJw
YWNrYWdlIHA7XG4iICsKKwkJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkJIiBwdWJsaWMg
dm9pZCBib28oaW50IHgsIEZJIGZpKSB7fVxuIiArCisJCQkJIiAgdm9pZCBmb28oKSB7XG4iICsK
KwkJCQkiCWJvbygyLCAoYWFyZywgeCkgLT4ge2ludCBiID0gMTA7IHJldHVybiB4ICsgYWFyZysr
O30pO1xuIiArCisJCQkJIiAgfVxuIiArCisJCQkJIn1cbiIgKworCQkJCSJpbnRlcmZhY2UgRkkg
eyBpbnQgZjEoaW50IGEsIGludCBiKTsgfVxuIjsKKwkJY3JlYXRlRm9sZGVyKCIvUC9zcmMvcCIp
OworCQljcmVhdGVGaWxlKAorCQkJIi9QL3NyYy9wL1guamF2YSIsCisJCQlzb3VyY2UKKwkJKTsK
KwkJd2FpdEZvckF1dG9CdWlsZCgpOworCQkKKwkJSUNvbXBpbGF0aW9uVW5pdCB1bml0ID0gZ2V0
Q29tcGlsYXRpb25Vbml0KCIvUC9zcmMvcC9YLmphdmEiKTsgCisJCVN0cmluZyBzZWxlY3RTdHJp
bmcgPSAiYWFyZyI7CisJCUlKYXZhRWxlbWVudCBbXSB2YXJpYWJsZSA9ICgoSUNvZGVBc3Npc3Qp
IHVuaXQpLmNvZGVTZWxlY3Qoc291cmNlLmxhc3RJbmRleE9mKHNlbGVjdFN0cmluZyksIHNlbGVj
dFN0cmluZy5sZW5ndGgoKSk7CisJCWFzc2VydEVxdWFscygxLCB2YXJpYWJsZS5sZW5ndGgpOwor
CX0gZmluYWxseSB7CisJCWRlbGV0ZVByb2plY3QoIlAiKTsKKwl9Cit9CiB9CmRpZmYgLS1naXQg
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb2RlYXNzaXN0L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb2RlYXNzaXN0L2NvbXBsZXRlL0NvbXBsZXRpb25QYXJzZXIuamF2YSBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvZGVhc3Npc3Qvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvZGVhc3Npc3Qv
Y29tcGxldGUvQ29tcGxldGlvblBhcnNlci5qYXZhCmluZGV4IDk5ZmMwODguLjFlYzhiNjUgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvZGVhc3Npc3Qvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvZGVhc3Npc3QvY29tcGxldGUvQ29tcGxldGlvblBhcnNlci5qYXZhCisrKyBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvZGVhc3Npc3Qvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvZGVhc3Npc3QvY29tcGxldGUvQ29tcGxldGlvblBhcnNlci5qYXZhCkBAIC0xMDk1LDExICsx
MDk1LDExIEBACiAJCWludCBpbnN0YW5jZU9mSW5kZXggPSBsYXN0SW5kZXhPZkVsZW1lbnQoS19C
RVRXRUVOX0lOU1RBTkNFT0ZfQU5EX1JQQVJFTik7CiAJCWluZGV4ID0gYmxvY2tJbmRleCAhPSAt
MSAmJiBpbnN0YW5jZU9mSW5kZXggPCBibG9ja0luZGV4ID8gYmxvY2tJbmRleCA6IGluc3RhbmNl
T2ZJbmRleDsKIAl9CiAJd2hpbGUgKGluZGV4ID49IDApIHsKIAkJLy8gVHJ5IHRvIGZpbmQgYW4g
ZW5jbG9zaW5nIGlmIHN0YXRlbWVudCBldmVuIGlmIG9uZSBpcyBub3QgZm91bmQgaW1tZWRpYXRl
bHkgcHJlY2VkaW5nIHRoZSBjb21wbGV0aW9uIG5vZGUuCi0JCWlmIChpbmRleCAhPSAtMSAmJiB0
aGlzLmVsZW1lbnRJbmZvU3RhY2tbaW5kZXhdID09IElGICYmIHRoaXMuZWxlbWVudE9iamVjdElu
Zm9TdGFja1tpbmRleF0gIT0gbnVsbCkgeworCQlpZiAoaW5kZXggIT0gLTEgJiYgdGhpcy5lbGVt
ZW50SW5mb1N0YWNrW2luZGV4XSA9PSBJRiAmJiB0aGlzLmVsZW1lbnRPYmplY3RJbmZvU3RhY2tb
aW5kZXhdICE9IG51bGwgJiYgISh0aGlzLmVsZW1lbnRPYmplY3RJbmZvU3RhY2tbaW5kZXhdIGlu
c3RhbmNlb2YgSW50ZWdlcikpIHsKIAkJCUV4cHJlc3Npb24gY29uZGl0aW9uID0gKEV4cHJlc3Np
b24pdGhpcy5lbGVtZW50T2JqZWN0SW5mb1N0YWNrW2luZGV4XTsKIAkKIAkJCS8vIElmIGN1cnJl
bnRFbGVtZW50IGlzIGEgUmVjb3ZlcmVkTG9jYWxWYXJpYWJsZSB0aGVuIGl0IGNhbiBiZSBjb250
YWluZWQgaW4gdGhlIGlmIHN0YXRlbWVudAogCQkJaWYgKHRoaXMuY3VycmVudEVsZW1lbnQgaW5z
dGFuY2VvZiBSZWNvdmVyZWRMb2NhbFZhcmlhYmxlICYmCiAJCQkJCXRoaXMuY3VycmVudEVsZW1l
bnQucGFyZW50IGluc3RhbmNlb2YgUmVjb3ZlcmVkQmxvY2spIHsKZGlmZiAtLWdpdCBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvZGVhc3Npc3Qvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvZGVh
c3Npc3QvaW1wbC9Bc3Npc3RQYXJzZXIuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvZGVh
c3Npc3Qvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvZGVhc3Npc3QvaW1wbC9Bc3Npc3RQYXJz
ZXIuamF2YQppbmRleCA1MDkzNDUxLi43NDYzOTMzIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb2RlYXNzaXN0L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb2RlYXNzaXN0L2lt
cGwvQXNzaXN0UGFyc2VyLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29kZWFzc2lz
dC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29kZWFzc2lzdC9pbXBsL0Fzc2lzdFBhcnNlci5q
YXZhCkBAIC0xNywxMCArMTcsMTEgQEAKIC8qCiAgKiBQYXJzZXIgZXh0ZW5zaW9uIGZvciBjb2Rl
IGFzc2lzdCB0YXNrCiAgKgogICovCiAKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwu
Y29kZWFzc2lzdC5zZWxlY3QuU2VsZWN0aW9uT25TaW5nbGVOYW1lUmVmZXJlbmNlOwogaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuKjsKIGltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuY2xhc3NmbXQuQ2xhc3NGaWxlQ29uc3RhbnRzOwog
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuQmluZGluZzsK
IGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkV4dHJhQ29t
cGlsZXJNb2RpZmllcnM7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVy
LnBhcnNlci5QYXJzZXI7CkBAIC03MCwxMCArNzEsMTEgQEAKIAlwcm90ZWN0ZWQgc3RhdGljIGZp
bmFsIGludCBLX1RZUEVfREVMSU1JVEVSID0gQVNTSVNUX1BBUlNFUiArIDI7IC8vIHdoZXRoZXIg
d2UgYXJlIGluc2lkZSBhIHR5cGUgZGVjbGFyYXRpb24KIAlwcm90ZWN0ZWQgc3RhdGljIGZpbmFs
IGludCBLX01FVEhPRF9ERUxJTUlURVIgPSBBU1NJU1RfUEFSU0VSICsgMzsgLy8gd2hldGhlciB3
ZSBhcmUgaW5zaWRlIGEgbWV0aG9kIGRlY2xhcmF0aW9uCiAJcHJvdGVjdGVkIHN0YXRpYyBmaW5h
bCBpbnQgS19GSUVMRF9JTklUSUFMSVpFUl9ERUxJTUlURVIgPSBBU1NJU1RfUEFSU0VSICsgNDsg
Ly8gd2hldGhlciB3ZSBhcmUgaW5zaWRlIGEgZmllbGQgaW5pdGlhbGl6ZXIKIAlwcm90ZWN0ZWQg
c3RhdGljIGZpbmFsIGludCBLX0FUVFJJQlVURV9WQUxVRV9ERUxJTUlURVIgPSBBU1NJU1RfUEFS
U0VSICsgNTsgLy8gd2hldGhlciB3ZSBhcmUgaW5zaWRlIGEgYW5ub3RhdGlvbiBhdHRyaWJ1dGUg
dmFsdWVyCiAJcHJvdGVjdGVkIHN0YXRpYyBmaW5hbCBpbnQgS19FTlVNX0NPTlNUQU5UX0RFTElN
SVRFUiA9IEFTU0lTVF9QQVJTRVIgKyA2OyAvLyB3aGV0aGVyIHdlIGFyZSBpbnNpZGUgYSBmaWVs
ZCBpbml0aWFsaXplcgorCXByb3RlY3RlZCBzdGF0aWMgZmluYWwgaW50IEtfSU5TSURFX0xBTUJE
QV9FWFBSRVNTSU9OID0gQVNTSVNUX1BBUlNFUiArIDc7IC8vIHdoZXRoZXIgd2UgYXJlIGluc2lk
ZSBhIGZpZWxkIGluaXRpYWxpemVyCiAKIAkvLyBzZWxlY3RvciBjb25zdGFudHMKIAlwcm90ZWN0
ZWQgc3RhdGljIGZpbmFsIGludCBUSElTX0NPTlNUUlVDVE9SID0gLTE7CiAJcHJvdGVjdGVkIHN0
YXRpYyBmaW5hbCBpbnQgU1VQRVJfQ09OU1RSVUNUT1IgPSAtMjsKIApAQCAtMTkxLDExICsxOTMs
MjggQEAKIAkJCQlibG9jay5zb3VyY2VTdGFydCA9IGxhc3RTdGFydCA9IC10aGlzLmJsb2NrU3Rh
cnRzW2pdOwogCQkJCWVsZW1lbnQgPSBlbGVtZW50LmFkZChibG9jaywgMSk7CiAJCQl9CiAJCQli
bG9ja0luZGV4ID0gaisxOyAvLyBzaGlmdCB0aGUgaW5kZXggdG8gdGhlIG5ldyBibG9jawogCQl9
Ci0JCWlmIChub2RlIGluc3RhbmNlb2YgTG9jYWxEZWNsYXJhdGlvbil7CisJCWlmIChub2RlIGlu
c3RhbmNlb2YgQXJndW1lbnQgJiYgKChBcmd1bWVudClub2RlKS5oYXNFbGlkZWRUeXBlKCkpewor
CQkJQXJndW1lbnQgbG9jYWwgPSAoQXJndW1lbnQpIG5vZGU7CisJCQlpZiAobG9jYWwuZGVjbGFy
YXRpb25Tb3VyY2VFbmQgPT0gMCl7CisJCQkJZWxlbWVudCA9IGVsZW1lbnQuYWRkKGxvY2FsLCAw
KTsKKwkJCQlpZiAobG9jYWwuaW5pdGlhbGl6YXRpb24gPT0gbnVsbCl7CisJCQkJCXRoaXMubGFz
dENoZWNrUG9pbnQgPSBsb2NhbC5zb3VyY2VFbmQgKyAxOworCQkJCX0gZWxzZSB7CisJCQkJCXRo
aXMubGFzdENoZWNrUG9pbnQgPSBsb2NhbC5pbml0aWFsaXphdGlvbi5zb3VyY2VFbmQgKyAxOwor
CQkJCX0KKwkJCX0gZWxzZSB7CisJCQkJZWxlbWVudCA9IGVsZW1lbnQuYWRkKGxvY2FsLCAwKTsK
KwkJCQl0aGlzLmxhc3RDaGVja1BvaW50ID0gbG9jYWwuZGVjbGFyYXRpb25Tb3VyY2VFbmQgKyAx
OworCQkJfQorCQkJd2hpbGUgKGkgPD0gdGhpcy5hc3RQdHIgJiYgdGhpcy5hc3RTdGFja1tpKzFd
IGluc3RhbmNlb2YgQXJndW1lbnQgJiYgKChBcmd1bWVudCl0aGlzLmFzdFN0YWNrW2krMV0pLmhh
c0VsaWRlZFR5cGUoKSkgeworCQkJCWkrKzsKKwkJCX0KKwkJCWNvbnRpbnVlOworCQl9IGVsc2Ug
aWYgKG5vZGUgaW5zdGFuY2VvZiBMb2NhbERlY2xhcmF0aW9uKXsKIAkJCUxvY2FsRGVjbGFyYXRp
b24gbG9jYWwgPSAoTG9jYWxEZWNsYXJhdGlvbikgbm9kZTsKIAkJCWlmIChsb2NhbC5kZWNsYXJh
dGlvblNvdXJjZUVuZCA9PSAwKXsKIAkJCQllbGVtZW50ID0gZWxlbWVudC5hZGQobG9jYWwsIDAp
OwogCQkJCWlmIChsb2NhbC5pbml0aWFsaXphdGlvbiA9PSBudWxsKXsKIAkJCQkJdGhpcy5sYXN0
Q2hlY2tQb2ludCA9IGxvY2FsLnNvdXJjZUVuZCArIDE7CkBAIC03NjksMTcgKzc4OCwxNyBAQAog
CQlzd2l0Y2ggKHRva2VuKSB7CiAJCQljYXNlIFRva2VuTmFtZUxQQVJFTiA6CiAJCQkJdGhpcy5i
cmFja2V0RGVwdGgrKzsKIAkJCQlzd2l0Y2ggKHRoaXMucHJldmlvdXNUb2tlbikgewogCQkJCQlj
YXNlIFRva2VuTmFtZUlkZW50aWZpZXI6Ci0JCQkJCQl0aGlzLnB1c2hPbkVsZW1lbnRTdGFjayhL
X1NFTEVDVE9SLCB0aGlzLmlkZW50aWZpZXJQdHIpOworCQkJCQkJdGhpcy5wdXNoT25FbGVtZW50
U3RhY2soS19TRUxFQ1RPUiwgdGhpcy5pZGVudGlmaWVyUHRyLCBuZXcgSW50ZWdlcih0aGlzLmV4
cHJlc3Npb25QdHIpKTsKIAkJCQkJCWJyZWFrOwogCQkJCQljYXNlIFRva2VuTmFtZXRoaXM6IC8v
IGV4cGxpY2l0IGNvbnN0cnVjdG9yIGludm9jYXRpb24sIGUuZy4gdGhpcygxLCAyKQotCQkJCQkJ
dGhpcy5wdXNoT25FbGVtZW50U3RhY2soS19TRUxFQ1RPUiwgVEhJU19DT05TVFJVQ1RPUik7CisJ
CQkJCQl0aGlzLnB1c2hPbkVsZW1lbnRTdGFjayhLX1NFTEVDVE9SLCBUSElTX0NPTlNUUlVDVE9S
LCBuZXcgSW50ZWdlcih0aGlzLmV4cHJlc3Npb25QdHIpKTsKIAkJCQkJCWJyZWFrOwogCQkJCQlj
YXNlIFRva2VuTmFtZXN1cGVyOiAvLyBleHBsaWNpdCBjb25zdHJ1Y3RvciBpbnZvY2F0aW9uLCBl
LmcuIHN1cGVyKDEsIDIpCi0JCQkJCQl0aGlzLnB1c2hPbkVsZW1lbnRTdGFjayhLX1NFTEVDVE9S
LCBTVVBFUl9DT05TVFJVQ1RPUik7CisJCQkJCQl0aGlzLnB1c2hPbkVsZW1lbnRTdGFjayhLX1NF
TEVDVE9SLCBTVVBFUl9DT05TVFJVQ1RPUiwgbmV3IEludGVnZXIodGhpcy5leHByZXNzaW9uUHRy
KSk7CiAJCQkJCQlicmVhazsKIAkJCQkJY2FzZSBUb2tlbk5hbWVHUkVBVEVSOiAvLyBleHBsaWNp
dCBjb25zdHJ1Y3RvciBpbnZvY2F0aW9uLCBlLmcuIEZyZWQ8WD5bKF0xLCAyKQogCQkJCQljYXNl
IFRva2VuTmFtZVJJR0hUX1NISUZUOiAvLyBvciBmcmVkPFg8WD4+WyhdMSwgMikKIAkJCQkJY2Fz
ZSBUb2tlbk5hbWVVTlNJR05FRF9SSUdIVF9TSElGVDogLy9vciBGcmVkPFg8WDxYPj4+WyhdMSwg
MikKIAkJCQkJCWlmKHRoaXMuaWRlbnRpZmllclB0ciA+IC0xKSB7CkBAIC04MTQsMTAgKzgzMywx
MiBAQAogCQl9CiAJfQogCXRoaXMucHJldmlvdXNUb2tlbiA9IHRva2VuOwogCWlmICh0b2tlbiA9
PSBUb2tlbk5hbWVJZGVudGlmaWVyKSB7CiAJCXRoaXMucHJldmlvdXNJZGVudGlmaWVyUHRyID0g
dGhpcy5pZGVudGlmaWVyUHRyOworCX0gZWxzZSBpZiAodG9rZW4gPT0gVG9rZW5OYW1lQmVnaW5M
YW1iZGEpIHsKKwkJcHVzaE9uRWxlbWVudFN0YWNrKEtfSU5TSURFX0xBTUJEQV9FWFBSRVNTSU9O
LCB0aGlzLmV4cHJlc3Npb25QdHIpOwogCX0KIH0KIHByb3RlY3RlZCB2b2lkIGNvbnN1bWVUeXBl
SW1wb3J0T25EZW1hbmREZWNsYXJhdGlvbk5hbWUoKSB7CiAJLy8gVHlwZUltcG9ydE9uRGVtYW5k
RGVjbGFyYXRpb25OYW1lIDo6PSAnaW1wb3J0JyBOYW1lICcuJyAnKicKIAkvKiBwdXNoIGFuIElt
cG9ydFJlZiBidWlsZCBmcm9tIHRoZSBsYXN0IG5hbWUKQEAgLTE3MzYsMTAgKzE3NTcsMTQgQEAK
IAlyZXR1cm4gbnVsbDsKIH0KIHByb3RlY3RlZCBPYmplY3QgdG9wS25vd25FbGVtZW50T2JqZWN0
SW5mbyhpbnQgb3duZXIpIHsKIAlyZXR1cm4gdG9wS25vd25FbGVtZW50T2JqZWN0SW5mbyhvd25l
ciwgMCk7CiB9Citwcm90ZWN0ZWQgdm9pZCBjb25zdW1lTGFtYmRhRXhwcmVzc2lvbigpIHsKKwlz
dXBlci5jb25zdW1lTGFtYmRhRXhwcmVzc2lvbigpOworCXBvcFVudGlsRWxlbWVudChLX0lOU0lE
RV9MQU1CREFfRVhQUkVTU0lPTik7Cit9CiAvKioKICAqIElmIHRoZSBnaXZlbiBhc3Qgbm9kZSBp
cyBpbnNpZGUgYW4gZXhwbGljaXQgY29uc3RydWN0b3IgY2FsbAogICogdGhlbiB3cmFwIGl0IHdp
dGggYSBmYWtlIGNvbnN0cnVjdG9yIGNhbGwuCiAgKiBSZXR1cm5zIHRoZSB3cmFwcGVkIGNvbXBs
ZXRpb24gbm9kZSBvciB0aGUgY29tcGxldGlvbiBub2RlIGl0c2VsZi4KICAqLwpAQCAtMTc1OSw2
ICsxNzg0LDgzIEBACiAJCXJldHVybiBjYWxsOwogCX0gZWxzZSB7CiAJCXJldHVybiBhc3Q7CiAJ
fQogfQorcHVibGljIE1lc3NhZ2VTZW5kIGNvbGxlY3RMYW1iZGFFeHByZXNzaW9uSW5mb3JtYXRp
b25Gcm9tUGFyc2VyV2l0aG91dERpc3R1cmJpbmdTdGFja3MgKCkgeworCWlmKHRoaXMuZXhwcmVz
c2lvblB0ciA+PSAwICYmIHRoaXMuZXhwcmVzc2lvblN0YWNrW3RoaXMuZXhwcmVzc2lvblB0cl0g
aW5zdGFuY2VvZiBTZWxlY3Rpb25PblNpbmdsZU5hbWVSZWZlcmVuY2UpIHsKKwkJaW50IGFyZ3Vt
ZW50c1Jvb2YgPSB0aGlzLmVsZW1lbnRJbmZvU3RhY2tbbGFzdEluZGV4T2ZFbGVtZW50KEtfSU5T
SURFX0xBTUJEQV9FWFBSRVNTSU9OKV07CisJCWlmICh0b3BLbm93bkVsZW1lbnRLaW5kKEFTU0lT
VF9QQVJTRVIpID09IEtfU0VMRUNUT1IgfHwgdG9wS25vd25FbGVtZW50S2luZChBU1NJU1RfUEFS
U0VSLCAxKSA9PSBLX1NFTEVDVE9SIHx8IHRvcEtub3duRWxlbWVudEtpbmQoQVNTSVNUX1BBUlNF
UiwgMikgPT0gS19TRUxFQ1RPUikgeworCQkJaW50IGFyZ3VtZW50c0Zsb29yID0gKChJbnRlZ2Vy
KXRoaXMuZWxlbWVudE9iamVjdEluZm9TdGFja1tsYXN0SW5kZXhPZkVsZW1lbnQoS19TRUxFQ1RP
UildKS5pbnRWYWx1ZSgpOworCQkJTWVzc2FnZVNlbmQgc2VudE1lc3NhZ2UgPSBuZXcgTWVzc2Fn
ZVNlbmQoKTsKKwkJCXNlbnRNZXNzYWdlLnNlbGVjdG9yID0gdGhpcy5pZGVudGlmaWVyU3RhY2tb
dGhpcy5pZGVudGlmaWVyUHRyXTsKKwkJCWlmICh0aGlzLmV4cHJlc3Npb25QdHIgPiBhcmd1bWVu
dHNGbG9vciAmJiBhcmd1bWVudHNGbG9vciA8PSBhcmd1bWVudHNSb29mKSB7CisJCQkJaW50IG5v
T2ZTZWVuQXJndW1lbnRzID0gYXJndW1lbnRzUm9vZiAtIGFyZ3VtZW50c0Zsb29yOworCQkJCWlm
IChub09mU2VlbkFyZ3VtZW50cyA+IDApIHsKKwkJCQkJU3lzdGVtLmFycmF5Y29weSh0aGlzLmV4
cHJlc3Npb25TdGFjaywgYXJndW1lbnRzRmxvb3IgKyAxLCBzZW50TWVzc2FnZS5hcmd1bWVudHMg
PSBuZXcgRXhwcmVzc2lvbltub09mU2VlbkFyZ3VtZW50c10sIDAsIG5vT2ZTZWVuQXJndW1lbnRz
KTsKKwkJCQl9CisJCQkJdGhpcy5leHByZXNzaW9uUHRyID0gYXJndW1lbnRzRmxvb3I7CisJCQl9
CisJCQlyZXR1cm4gc2VudE1lc3NhZ2U7CisJCX0KKwl9CisJcmV0dXJuIG51bGw7Cit9CitwdWJs
aWMgTGFtYmRhRXhwcmVzc2lvbiBjb2xsZWN0TGFtYmRhRXhwcmVzc2lvbkluZm9ybWF0aW9uICgp
IHsKKwlBU1ROb2RlIGFyZzsKKwlpZih0aGlzLmV4cHJlc3Npb25QdHIgPj0gMCAmJiB0aGlzLmV4
cHJlc3Npb25TdGFja1t0aGlzLmV4cHJlc3Npb25QdHJdIGluc3RhbmNlb2YgU2VsZWN0aW9uT25T
aW5nbGVOYW1lUmVmZXJlbmNlKSB7CisJCUFyZ3VtZW50IFtdIGFyZ3VtZW50cyA9IEFTVE5vZGUu
Tk9fQVJHVU1FTlRTOworCQlpZiAodGhpcy5hc3RQdHIgPj0gMCAmJiB0aGlzLmFzdFN0YWNrW3Ro
aXMuYXN0UHRyXSBpbnN0YW5jZW9mIEFyZ3VtZW50KSB7CisJCQlhcmd1bWVudHMgPSBuZXcgQXJn
dW1lbnRbdGhpcy5hc3RMZW5ndGhTdGFja1t0aGlzLmFzdExlbmd0aFB0cl1dOworCQkJaW50IGs7
CisJCQlmb3IgKGludCBpID0gayA9IHRoaXMuYXN0UHRyICsgMSAtIHRoaXMuYXN0TGVuZ3RoU3Rh
Y2tbdGhpcy5hc3RMZW5ndGhQdHJdLCBqID0gdGhpcy5hc3RQdHI7IGkgPD0gaiAmJiAoYXJnID0g
dGhpcy5hc3RTdGFja1tpXSkgaW5zdGFuY2VvZiBBcmd1bWVudDsgaSsrKSB7CisJCQkJYXJndW1l
bnRzW2kgLSBrXSA9IChBcmd1bWVudClhcmc7CisJCQl9CisKKwkJfQorCQlMYW1iZGFFeHByZXNz
aW9uIGxFeHA7CisJCWludCBhcmd1bWVudHNSb29mID0gdGhpcy5lbGVtZW50SW5mb1N0YWNrW2xh
c3RJbmRleE9mRWxlbWVudChLX0lOU0lERV9MQU1CREFfRVhQUkVTU0lPTildOworCQlwb3BFbGVt
ZW50KEtfSU5TSURFX0xBTUJEQV9FWFBSRVNTSU9OKTsKKwkJbEV4cCA9IG5ldyBMYW1iZGFFeHBy
ZXNzaW9uKHRoaXMuY29tcGlsYXRpb25Vbml0LmNvbXBpbGF0aW9uUmVzdWx0LCBhcmd1bWVudHMs
IHRoaXMuZXhwcmVzc2lvblN0YWNrW3RoaXMuZXhwcmVzc2lvblB0ci0tXSk7CisJCXRoaXMuZXhw
cmVzc2lvbkxlbmd0aFB0ci0tOworCQlpZiAodG9wS25vd25FbGVtZW50S2luZChBU1NJU1RfUEFS
U0VSKSA9PSBLX1NFTEVDVE9SKSB7CisJCQlpbnQgYXJndW1lbnRzRmxvb3IgPSAoKEludGVnZXIp
dGhpcy5lbGVtZW50T2JqZWN0SW5mb1N0YWNrW2xhc3RJbmRleE9mRWxlbWVudChLX1NFTEVDVE9S
KV0pLmludFZhbHVlKCk7CisJCQlsRXhwLnNlbnRNZXNzYWdlID0gbmV3IE1lc3NhZ2VTZW5kKCk7
CisJCQlsRXhwLnNlbnRNZXNzYWdlLnNlbGVjdG9yID0gdGhpcy5pZGVudGlmaWVyU3RhY2tbdGhp
cy5pZGVudGlmaWVyUHRyXTsKKwkJCWlmICh0aGlzLmV4cHJlc3Npb25QdHIgPiBhcmd1bWVudHNG
bG9vciAmJiBhcmd1bWVudHNGbG9vciA8PSBhcmd1bWVudHNSb29mKSB7CisJCQkJaW50IG5vT2ZT
ZWVuQXJndW1lbnRzID0gYXJndW1lbnRzUm9vZiAtIGFyZ3VtZW50c0Zsb29yOworCQkJCWlmIChu
b09mU2VlbkFyZ3VtZW50cyA+IDApIHsKKwkJCQkJU3lzdGVtLmFycmF5Y29weSh0aGlzLmV4cHJl
c3Npb25TdGFjaywgYXJndW1lbnRzRmxvb3IgKyAxLCBsRXhwLnNlbnRNZXNzYWdlLmFyZ3VtZW50
cyA9IG5ldyBFeHByZXNzaW9uW25vT2ZTZWVuQXJndW1lbnRzXSwgMCwgbm9PZlNlZW5Bcmd1bWVu
dHMpOworCQkJCX0KKwkJCQl0aGlzLmV4cHJlc3Npb25QdHIgPSBhcmd1bWVudHNGbG9vcjsKKwkJ
CQl0aGlzLmV4cHJlc3Npb25MZW5ndGhQdHItLTsKKwkJCX0KKwkJfQorCQlyZXR1cm4gbEV4cDsK
Kwl9CisJcmV0dXJuIG51bGw7Cit9CitwdWJsaWMgQXJndW1lbnQgW10gZ2V0TGFtYmRhQXJndW1l
bnRzT253YXJkcyAoQXJndW1lbnQgYXJnKSB7CisJYm9vbGVhbiBzdGFydGVkID0gZmFsc2U7CisJ
QVNUTm9kZSBbXSBub2RlU3RhY2sgPSB0aGlzLmFzdFN0YWNrOworCUFyZ3VtZW50IFtdIGxBcmdz
ID0gbnVsbDsKKwlmb3IgKGludCBpID0gMCwgaiA9IHRoaXMuYXN0UHRyOyBpIDw9IGo7IGkrKykg
eworCQlpZiAoc3RhcnRlZCkgeworCQkJaWYoIG5vZGVTdGFja1tpXSBpbnN0YW5jZW9mIEFyZ3Vt
ZW50ICYmICgoQXJndW1lbnQpbm9kZVN0YWNrW2ldKS5oYXNFbGlkZWRUeXBlKCkpIHsKKwkJCQlp
ZiAobEFyZ3MgPT0gbnVsbCkgeworCQkJCQlsQXJncyA9IG5ldyBBcmd1bWVudFsxXTsKKwkJCQl9
IGVsc2UgeworCQkJCQlpbnQgbGVuID0gbEFyZ3MubGVuZ3RoOworCQkJCQlTeXN0ZW0uYXJyYXlj
b3B5KGxBcmdzLCAwLCBsQXJncyA9IG5ldyBBcmd1bWVudFtsZW4gKyAxXSwgMCwgbGVuKTsKKwkJ
CQl9CisJCQkJbEFyZ3NbbEFyZ3MubGVuZ3RoIC0gMV0gPSAoQXJndW1lbnQpbm9kZVN0YWNrW2ld
OworCQkJfSBlbHNlIHsKKwkJCQlyZXR1cm4gbEFyZ3M7CisJCQl9CisJCX0KKwkJaWYgKG5vZGVT
dGFja1tpXSA9PSBhcmcpIHsKKwkJCXN0YXJ0ZWQgPSB0cnVlOworCQl9CisJfQorCXJldHVybiBs
QXJnczsKK30KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvZGVhc3Npc3Qv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvZGVhc3Npc3Qvc2VsZWN0L1NlbGVjdGlvblBhcnNl
ci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29kZWFzc2lzdC9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29kZWFzc2lzdC9zZWxlY3QvU2VsZWN0aW9uUGFyc2VyLmphdmEKaW5kZXggMmZl
MWE3ZS4uYjgwOGJlNyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29kZWFzc2lz
dC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29kZWFzc2lzdC9zZWxlY3QvU2VsZWN0aW9uUGFy
c2VyLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29kZWFzc2lzdC9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29kZWFzc2lzdC9zZWxlY3QvU2VsZWN0aW9uUGFyc2VyLmphdmEKQEAg
LTI1LDExICsyNSwxMCBAQAogICovCiAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwu
Y29tcGlsZXIuKjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuY2xh
c3NmbXQuQ2xhc3NGaWxlQ29uc3RhbnRzOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5h
bC5jb21waWxlci5lbnYuKjsKLQogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVy
LkNoYXJPcGVyYXRpb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvZGVhc3Np
c3QuaW1wbC4qOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3Qu
KjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkJsb2Nr
U2NvcGU7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5U
eXBlQmluZGluZzsKQEAgLTE0MiwxMCArMTQxLDEzIEBACiAJCQkJCWNhc3Quc291cmNlU3RhcnQg
PSBjYXN0VHlwZS5zb3VyY2VTdGFydDsKIAkJCQkJY2FzdC5zb3VyY2VFbmQ9IGV4cHJlc3Npb24u
c291cmNlRW5kOwogCQkJCQlwYXJlbnROb2RlID0gY2FzdDsKIAkJCQkJdGhpcy5hc3Npc3ROb2Rl
UGFyZW50ID0gcGFyZW50Tm9kZTsKIAkJCQl9CisJCQkJYnJlYWsgbmV4dEVsZW1lbnQ7CisJCQlj
YXNlIEtfSU5TSURFX0xBTUJEQV9FWFBSRVNTSU9OIDoKKwkJCQl0aGlzLmFzc2lzdE5vZGVQYXJl
bnQgPSBwYXJlbnROb2RlID0gY29sbGVjdExhbWJkYUV4cHJlc3Npb25JbmZvcm1hdGlvbigpOwog
CQkJCWJyZWFrIG5leHRFbGVtZW50OwogCQl9CiAJfQogCWlmKHBhcmVudE5vZGUgIT0gbnVsbCkg
ewogCQl0aGlzLmN1cnJlbnRFbGVtZW50ID0gdGhpcy5jdXJyZW50RWxlbWVudC5hZGQoKFN0YXRl
bWVudClwYXJlbnROb2RlLCAwKTsKQEAgLTE0MzQsMTAgKzE0MzYsMTYgQEAKIAkJdGhpcyBhY3Rp
b24gaXMgYWxzbyBwZXJmb3JtZWQgd2hlbiBzaGlmdGluZyB0b2tlbiBhZnRlciByZWNvdmVyeQog
CQlnb3QgYWN0aXZhdGVkIG9uY2UuCiAJKi8KIAlyZWNvdmVyeVRva2VuQ2hlY2soKTsKIH0KK3By
b3RlY3RlZCB2b2lkIGNvbnN1bWVUeXBlRWxpZGVkTGFtYmRhUGFyYW1ldGVyKGJvb2xlYW4gcGFy
ZW50aGVzaXplZCkgeworCWlmICh0aGlzLmFzdFB0ciA+IC0xICYmIHRoaXMuYXN0U3RhY2tbdGhp
cy5hc3RQdHJdIGluc3RhbmNlb2YgTG9jYWxEZWNsYXJhdGlvbikgeworCQl0aGlzLmFzdFN0YWNr
W3RoaXMuYXN0UHRyXS5iaXRzIHw9IEFTVE5vZGUuSXNJbml0aWFsaXplZEJ5TGFtZGFFeHByZXNz
aW9uOworCX0KKwlzdXBlci5jb25zdW1lVHlwZUVsaWRlZExhbWJkYVBhcmFtZXRlcihwYXJlbnRo
ZXNpemVkKTsKK30KIAogcHVibGljICBTdHJpbmcgdG9TdHJpbmcoKSB7CiAJU3RyaW5nIHMgPSBV
dGlsLkVNUFRZX1NUUklORzsKIAlzID0gcyArICJlbGVtZW50S2luZFN0YWNrIDogaW50W10gPSB7
IjsgLy8kTk9OLU5MUy0xJAogCWZvciAoaW50IGkgPSAwOyBpIDw9IHRoaXMuZWxlbWVudFB0cjsg
aSsrKSB7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FTVE5vZGUuamF2YSBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3Qv
QVNUTm9kZS5qYXZhCmluZGV4IDVjNDcyODcuLmFhY2VjMjcgMTAwNjQ0Ci0tLSBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvQVNUTm9kZS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQVNUTm9kZS5qYXZhCkBAIC02OSwxMSAr
NjksMTEgQEAKIAlwdWJsaWMgZmluYWwgc3RhdGljIGludCBCaXQzID0gMHg0OwkJCQkJLy8gcmV0
dXJuIHR5cGUgKG9wZXJhdG9yKSB8IG5hbWUgcmVmZXJlbmNlIGtpbmQgKG5hbWUgcmVmKSB8IGlt
cGxpY2l0IHRoaXMgKHRoaXMgcmVmKSB8IGlzIGFyZ3VtZW50KGxvY2FsKQogCXB1YmxpYyBmaW5h
bCBzdGF0aWMgaW50IEJpdDQgPSAweDg7CQkJCQkvLyByZXR1cm4gdHlwZSAob3BlcmF0b3IpIHwg
Zmlyc3QgYXNzaWdubWVudCB0byBsb2NhbCAobmFtZSByZWYsbG9jYWwgZGVjbCkgfCB1bmRvY3Vt
ZW50ZWQgZW1wdHkgYmxvY2sgKGJsb2NrLCB0eXBlIGFuZCBtZXRob2QgZGVjbCkKIAlwdWJsaWMg
ZmluYWwgc3RhdGljIGludCBCaXQ1ID0gMHgxMDsJCQkJCS8vIHZhbHVlIGZvciByZXR1cm4gKGV4
cHJlc3Npb24pIHwgaGFzIGFsbCBtZXRob2QgYm9kaWVzICh1bml0KSB8IHN1cGVydHlwZSByZWYg
KHR5cGUgcmVmKSB8IHJlc29sdmVkIChmaWVsZCBkZWNsKQogCXB1YmxpYyBmaW5hbCBzdGF0aWMg
aW50IEJpdDYgPSAweDIwOwkJCQkJLy8gZGVwdGggKG5hbWUgcmVmLCBtc2cpIHwgaWdub3JlIG5l
ZWQgY2FzdCBjaGVjayAoY2FzdCBleHByZXNzaW9uKSB8IGVycm9yIGluIHNpZ25hdHVyZSAobWV0
aG9kIGRlY2xhcmF0aW9uLyBpbml0aWFsaXplcikgfCBpcyByZWNvdmVyZWQgKGFubm90YXRpb24g
cmVmZXJlbmNlKQogCXB1YmxpYyBmaW5hbCBzdGF0aWMgaW50IEJpdDcgPSAweDQwOwkJCQkJLy8g
ZGVwdGggKG5hbWUgcmVmLCBtc2cpIHwgb3BlcmF0b3IgKG9wZXJhdG9yKSB8IG5lZWQgcnVudGlt
ZSBjaGVja2Nhc3QgKGNhc3QgZXhwcmVzc2lvbikgfCBsYWJlbCB1c2VkIChsYWJlbFN0YXRlbWVu
dCkgfCBuZWVkRnJlZVJldHVybiAoQWJzdHJhY3RNZXRob2REZWNsYXJhdGlvbikKLQlwdWJsaWMg
ZmluYWwgc3RhdGljIGludCBCaXQ4ID0gMHg4MDsJCQkJCS8vIGRlcHRoIChuYW1lIHJlZiwgbXNn
KSB8IG9wZXJhdG9yIChvcGVyYXRvcikgfCB1bnNhZmUgY2FzdCAoY2FzdCBleHByZXNzaW9uKSB8
IGlzIGRlZmF1bHQgY29uc3RydWN0b3IgKGNvbnN0cnVjdG9yIGRlY2xhcmF0aW9uKSB8IGlzRWxz
ZVN0YXRlbWVudFVucmVhY2hhYmxlIChpZiBzdGF0ZW1lbnQpCisJcHVibGljIGZpbmFsIHN0YXRp
YyBpbnQgQml0OCA9IDB4ODA7CQkJCQkvLyBkZXB0aCAobmFtZSByZWYsIG1zZykgfCBvcGVyYXRv
ciAob3BlcmF0b3IpIHwgdW5zYWZlIGNhc3QgKGNhc3QgZXhwcmVzc2lvbikgfCBpcyBkZWZhdWx0
IGNvbnN0cnVjdG9yIChjb25zdHJ1Y3RvciBkZWNsYXJhdGlvbikgfCBpc0Vsc2VTdGF0ZW1lbnRV
bnJlYWNoYWJsZSAoaWYgc3RhdGVtZW50KSB8IElzSW5pdGlhbGl6ZWRCeUxhbWJkYUV4cHJlc3Np
b24gKGxvY2FsIGRlY2xhcmF0aW9uKQogCXB1YmxpYyBmaW5hbCBzdGF0aWMgaW50IEJpdDkgPSAw
eDEwMDsJCQkJLy8gZGVwdGggKG5hbWUgcmVmLCBtc2cpIHwgb3BlcmF0b3IgKG9wZXJhdG9yKSB8
IGlzIGxvY2FsIHR5cGUgKHR5cGUgZGVjbCkgfCBpc1RoZW5TdGF0ZW1lbnRVbnJlYWNoYWJsZSAo
aWYgc3RhdGVtZW50KSB8IGNhbiBiZSBzdGF0aWMKIAlwdWJsaWMgZmluYWwgc3RhdGljIGludCBC
aXQxMD0gMHgyMDA7CQkJCS8vIGRlcHRoIChuYW1lIHJlZiwgbXNnKSB8IG9wZXJhdG9yIChvcGVy
YXRvcikgfCBpcyBhbm9ueW1vdXMgdHlwZSAodHlwZSBkZWNsKQogCXB1YmxpYyBmaW5hbCBzdGF0
aWMgaW50IEJpdDExID0gMHg0MDA7CQkJCS8vIGRlcHRoIChuYW1lIHJlZiwgbXNnKSB8IG9wZXJh
dG9yIChvcGVyYXRvcikgfCBpcyBtZW1iZXIgdHlwZSAodHlwZSBkZWNsKQogCXB1YmxpYyBmaW5h
bCBzdGF0aWMgaW50IEJpdDEyID0gMHg4MDA7CQkJCS8vIGRlcHRoIChuYW1lIHJlZiwgbXNnKSB8
IG9wZXJhdG9yIChvcGVyYXRvcikgfCBoYXMgYWJzdHJhY3QgbWV0aG9kcyAodHlwZSBkZWNsKQog
CXB1YmxpYyBmaW5hbCBzdGF0aWMgaW50IEJpdDEzID0gMHgxMDAwOwkJCS8vIGRlcHRoIChuYW1l
IHJlZiwgbXNnKSB8IGlzIHNlY29uZGFyeSB0eXBlICh0eXBlIGRlY2wpCkBAIC0xNTQsMTAgKzE1
NCwxMSBAQAogCXB1YmxpYyBzdGF0aWMgZmluYWwgaW50IElzVHlwZUVsaWRlZCA9IEJpdDI7ICAv
LyB0eXBlIGVsaWRlZCBsYW1iZGEgYXJndW1lbnQuCiAJcHVibGljIHN0YXRpYyBmaW5hbCBpbnQg
SXNBcmd1bWVudCA9IEJpdDM7CiAJcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgSXNMb2NhbERlY2xh
cmF0aW9uUmVhY2hhYmxlID0gQml0MzE7CiAJcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgSXNGb3Jl
YWNoRWxlbWVudFZhcmlhYmxlID0gQml0NTsKIAlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBTaGFk
b3dzT3V0ZXJMb2NhbCA9IEJpdDIyOworCXB1YmxpYyBzdGF0aWMgZmluYWwgaW50IElzSW5pdGlh
bGl6ZWRCeUxhbWRhRXhwcmVzc2lvbiA9IEJpdDg7CiAKIAkvLyBmb3IgbmFtZSByZWZzIG9yIGxv
Y2FsIGRlY2xzCiAJcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgRmlyc3RBc3NpZ25tZW50VG9Mb2Nh
bCA9IEJpdDQ7CiAKIAkvLyBmb3IgbXNnIG9yIGZpZWxkIHJlZmVyZW5jZXMKZGlmZiAtLWdpdCBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9MYW1iZGFFeHBy
ZXNzaW9uLmphdmEKaW5kZXggZmZlOWFkZC4uZTRkNzcyNiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fz
dC9MYW1iZGFFeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9MYW1iZGFFeHByZXNzaW9u
LmphdmEKQEAgLTM0LDEwICszNCwxMSBAQAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5h
bC5jb21waWxlci5mbG93LkZsb3dDb250ZXh0OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRl
cm5hbC5jb21waWxlci5mbG93LkZsb3dJbmZvOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRl
cm5hbC5jb21waWxlci5pbXBsLkNvbnN0YW50OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRl
cm5hbC5jb21waWxlci5pbXBsLlJlZmVyZW5jZUNvbnRleHQ7CiBpbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5Bbm5vdGF0aW9uQmluZGluZzsKK2ltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkJpbmFyeVR5cGVCaW5kaW5n
OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuQmluZGlu
ZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkJsb2Nr
U2NvcGU7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5D
bGFzc1Njb3BlOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29r
dXAuRXh0cmFDb21waWxlck1vZGlmaWVyczsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJu
YWwuY29tcGlsZXIubG9va3VwLkxvY2FsVmFyaWFibGVCaW5kaW5nOwpAQCAtNzcsMTAgKzc4LDEx
IEBACiAJcHJpdmF0ZSBMYW1iZGFFeHByZXNzaW9uIG9yaWdpbmFsID0gdGhpczsKIAlwcml2YXRl
IFN5bnRoZXRpY0FyZ3VtZW50QmluZGluZ1tdIG91dGVyTG9jYWxWYXJpYWJsZXMgPSBOT19TWU5U
SEVUSUNfQVJHVU1FTlRTOwogCXByaXZhdGUgaW50IG91dGVyTG9jYWxWYXJpYWJsZXNTbG90U2l6
ZSA9IDA7CiAJcHVibGljIGJvb2xlYW4gc2hvdWxkQ2FwdHVyZUluc3RhbmNlID0gZmFsc2U7CiAJ
cHJpdmF0ZSBzdGF0aWMgZmluYWwgU3ludGhldGljQXJndW1lbnRCaW5kaW5nIFtdIE5PX1NZTlRI
RVRJQ19BUkdVTUVOVFMgPSBuZXcgU3ludGhldGljQXJndW1lbnRCaW5kaW5nWzBdOworCXB1Ymxp
YyBNZXNzYWdlU2VuZCBzZW50TWVzc2FnZSA9IG51bGw7CiAJCiAJcHVibGljIExhbWJkYUV4cHJl
c3Npb24oQ29tcGlsYXRpb25SZXN1bHQgY29tcGlsYXRpb25SZXN1bHQsIEFyZ3VtZW50IFtdIGFy
Z3VtZW50cywgU3RhdGVtZW50IGJvZHkpIHsKIAkJc3VwZXIoY29tcGlsYXRpb25SZXN1bHQpOwog
CQl0aGlzLmFyZ3VtZW50cyA9IGFyZ3VtZW50cyAhPSBudWxsID8gYXJndW1lbnRzIDogQVNUTm9k
ZS5OT19BUkdVTUVOVFM7CiAJCXRoaXMuYm9keSA9IGJvZHk7CkBAIC0xMjgsMTEgKzEzMCw1OSBA
QAogCQkJCWN1cnJlbnRTY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5sYW1iZGFFeHByZXNzaW9uQ2Fu
bm90SW1wbGVtZW50R2VuZXJpY01ldGhvZCh0aGlzLCBzYW0pOwogCQkJcmV0dXJuIGZhbHNlOwog
CQl9CiAJCXJldHVybiBzdXBlci5rb3NoZXJEZXNjcmlwdG9yKGN1cnJlbnRTY29wZSwgc2FtLCBz
aG91bGRDaGF0dGVyKTsKIAl9Ci0JCisKKwlwcml2YXRlIHZvaWQgaGFuZGxlU2VsZWN0aW9uTm9k
ZSAoQmxvY2tTY29wZSBibG9ja1Njb3BlKSB7CisJCWZpbmFsIGludCBzbWFsbFFTaXplID0gMTA7
CisJCU1lc3NhZ2VTZW5kIG1zZ1NlbmQgPSB0aGlzLnNlbnRNZXNzYWdlOworCQlSZWZlcmVuY2VC
aW5kaW5nIFtdIHR5cGVBcnJheSA9IG5ldyBSZWZlcmVuY2VCaW5kaW5nW3NtYWxsUVNpemVdOwor
CQlpbnQgdHlwZUFycmF5SW5keCA9IDAsIHR5cGVBcnJheU1heCA9IDA7CisJCXR5cGVBcnJheVsw
XSA9IHRoaXMuc2NvcGUuY2xhc3NTY29wZSgpLmVuY2xvc2luZ1JlY2VpdmVyVHlwZSgpOworCQlk
byB7CisJCQlpZiAoIXR5cGVBcnJheVt0eXBlQXJyYXlJbmR4XS5jb21wb3VuZE5hbWUuZXF1YWxz
KEpBVkFfTEFOR19PQkpFQ1QpKSB7CisJCQkJTWV0aG9kQmluZGluZyBbXSBtZXRob2RzID0gdHlw
ZUFycmF5W3R5cGVBcnJheUluZHhdLm1ldGhvZHMoKTsKKwkJCQlmb3IgKGludCBpID0gMCwgaiA9
IG1ldGhvZHMubGVuZ3RoLCBub09mQXJnc1NlZW4gPSBtc2dTZW5kLmFyZ3VtZW50cyA9PSBudWxs
ID8gMCA6IG1zZ1NlbmQuYXJndW1lbnRzLmxlbmd0aDsgaSA8IGo7IGkrKykgeworCQkJCQlUeXBl
QmluZGluZyBbXSBwYXJhbXMgPSBudWxsOworCQkJCQlpZiAobWV0aG9kc1tpXS5zZWxlY3Rvci5l
cXVhbHMobXNnU2VuZC5zZWxlY3RvcikgJiYgKHBhcmFtcyA9IG1ldGhvZHNbaV0ucGFyYW1ldGVy
cykgIT0gbnVsbCAmJiBwYXJhbXMubGVuZ3RoID4gbm9PZkFyZ3NTZWVuICYmICh0aGlzLmRlc2Ny
aXB0b3IgPSBwYXJhbXNbbm9PZkFyZ3NTZWVuXS5nZXRTaW5nbGVBYnN0cmFjdE1ldGhvZChibG9j
a1Njb3BlKSkgIT0gbnVsbCkgeworCQkJCQkJdGhpcy5leHBlY3RlZFR5cGUgPSB0aGlzLnJlc29s
dmVkVHlwZSA9IHBhcmFtc1tub09mQXJnc1NlZW5dOworCQkJCQkJaSA9IGo7CisJCQkJCX0KKwkJ
CQl9CisJCQkJaWYgKHRoaXMuZGVzY3JpcHRvciA9PSBudWxsKSB7CisJCQkJCVJlZmVyZW5jZUJp
bmRpbmcgc2MgPSBudWxsOworCQkJCQlSZWZlcmVuY2VCaW5kaW5nIFtdIHNpID0gbnVsbDsKKwkJ
CQkJaWYgKHR5cGVBcnJheVt0eXBlQXJyYXlJbmR4XSBpbnN0YW5jZW9mIFNvdXJjZVR5cGVCaW5k
aW5nKSB7CisJCQkJCQlzYyA9ICgoU291cmNlVHlwZUJpbmRpbmcpdHlwZUFycmF5W3R5cGVBcnJh
eUluZHhdKS5zdXBlcmNsYXNzKCk7CisJCQkJCQlzaSA9ICgoU291cmNlVHlwZUJpbmRpbmcpdHlw
ZUFycmF5W3R5cGVBcnJheUluZHhdKS5zdXBlckludGVyZmFjZXMoKTsKKwkJCQkJfSBlbHNlIGlm
ICh0eXBlQXJyYXlbdHlwZUFycmF5SW5keF0gaW5zdGFuY2VvZiBCaW5hcnlUeXBlQmluZGluZykg
eworCQkJCQkJc2MgPSAoKEJpbmFyeVR5cGVCaW5kaW5nKXR5cGVBcnJheVt0eXBlQXJyYXlJbmR4
XSkuc3VwZXJjbGFzcygpOworCQkJCQkJc2kgPSAoKEJpbmFyeVR5cGVCaW5kaW5nKXR5cGVBcnJh
eVt0eXBlQXJyYXlJbmR4XSkuc3VwZXJJbnRlcmZhY2VzKCk7CisJCQkJCX0KKwkJCQkJaW50IGFk
ZGl0aW9uYWxMZW5ndGggPSAoc2kgPT0gbnVsbCA/IDAgOiBzaS5sZW5ndGgpICsgKHNjID09IG51
bGwgPyAwIDogMSk7CisJCQkJCWlmICh0eXBlQXJyYXlNYXggKyAxICsgYWRkaXRpb25hbExlbmd0
aCA+IHR5cGVBcnJheS5sZW5ndGgpIHsKKwkJCQkJCVN5c3RlbS5hcnJheWNvcHkodHlwZUFycmF5
LCB0eXBlQXJyYXlJbmR4ICsgMSwgCisJCQkJCQkJCXR5cGVBcnJheU1heCAtIHR5cGVBcnJheUlu
ZHggKyAxICsgYWRkaXRpb25hbExlbmd0aCA8PSB0eXBlQXJyYXkubGVuZ3RoID8gCisJCQkJCQkJ
CQkJdHlwZUFycmF5IDogKHR5cGVBcnJheSA9IG5ldyBSZWZlcmVuY2VCaW5kaW5nW3R5cGVBcnJh
eU1heCAtIHR5cGVBcnJheUluZHggKyAoYWRkaXRpb25hbExlbmd0aCA+IHNtYWxsUVNpemUgPyBh
ZGRpdGlvbmFsTGVuZ3RoIDogc21hbGxRU2l6ZSldKSwgCisJCQkJCQkJCTAsIHR5cGVBcnJheU1h
eCAtIHR5cGVBcnJheUluZHgpOworCQkJCQkJdHlwZUFycmF5TWF4IC09ICh0eXBlQXJyYXlJbmR4
ICsgMSk7CisJCQkJCQl0eXBlQXJyYXlJbmR4ID0gLTE7CisJCQkJCX0KKwkJCQkJaWYgKHNjICE9
IG51bGwpeworCQkJCQkJdHlwZUFycmF5WysrdHlwZUFycmF5TWF4XSA9IHNjOworCQkJCQl9CisJ
CQkJCWlmIChzaSAhPSBudWxsICYmIHNpLmxlbmd0aCA+IDApIHsKKwkJCQkJCVN5c3RlbS5hcnJh
eWNvcHkoc2ksIDAsIHR5cGVBcnJheSwgKyt0eXBlQXJyYXlNYXgsIHNpLmxlbmd0aCk7CisJCQkJ
CQl0eXBlQXJyYXlNYXggKz0gc2kubGVuZ3RoIC0gMTsKKwkJCQkJfQorCQkJCX0KKwkJCQl0eXBl
QXJyYXlJbmR4Kys7CisJCQl9CisJCX0gd2hpbGUgKHRoaXMuZGVzY3JpcHRvciA9PSBudWxsICYm
IHR5cGVBcnJheUluZHggPD0gdHlwZUFycmF5TWF4KTsKKwl9CisKIAkvKiBUaGlzIGNvZGUgaXMg
YXJyYW5nZWQgc28gdGhhdCB3ZSBjYW4gY29udGludWUgd2l0aCBhcyBtdWNoIGFuYWx5c2lzIGFz
IHBvc3NpYmxlIHdoaWxlIGF2b2lkaW5nIAogCSAqIG1pbmUgZmllbGRzIHRoYXQgd291bGQgcmVz
dWx0IGluIGEgc2xldyBvZiBzcHVyaW91cyBtZXNzYWdlcy4gVGhpcyBtZXRob2QgaXMgYSBtZXJn
ZXIgb2Y6CiAJICogQHNlZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3Vw
Lk1ldGhvZFNjb3BlLmNyZWF0ZU1ldGhvZChBYnN0cmFjdE1ldGhvZERlY2xhcmF0aW9uKQogCSAq
IEBzZWUgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5Tb3VyY2VUeXBl
QmluZGluZy5yZXNvbHZlVHlwZXNGb3IoTWV0aG9kQmluZGluZykKIAkgKiBAc2VlIG9yZy5lY2xp
cHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuQWJzdHJhY3RNZXRob2REZWNsYXJhdGlvbi5y
ZXNvbHZlKENsYXNzU2NvcGUpCkBAIC0xNTYsMTIgKzIwNiwxNiBAQAogCQlmaW5hbCBib29sZWFu
IGhhdmVEZXNjcmlwdG9yID0gdGhpcy5kZXNjcmlwdG9yICE9IG51bGw7CiAJCQogCQlpZiAoaGF2
ZURlc2NyaXB0b3IgJiYgdGhpcy5kZXNjcmlwdG9yLnR5cGVWYXJpYWJsZXMgIT0gQmluZGluZy5O
T19UWVBFX1ZBUklBQkxFUykgLy8gYWxyZWFkeSBjb21wbGFpbmVkIGluIGtvc2hlcioKIAkJCXJl
dHVybiBudWxsOwogCQkKLQkJaWYgKCFoYXZlRGVzY3JpcHRvciAmJiBhcmd1bWVudHNUeXBlRWxp
ZGVkKSAKLQkJCXJldHVybiBudWxsOyAvLyBGVUJBUiwgYmFpbCBvdXQuLi4KKwkJaWYgKCFoYXZl
RGVzY3JpcHRvciAmJiBhcmd1bWVudHNUeXBlRWxpZGVkKSB7CisJCQlpZiAodGhpcy5zZW50TWVz
c2FnZSA9PSBudWxsKSB7CisJCQkJcmV0dXJuIG51bGw7IC8vIEZVQkFSLCBiYWlsIG91dC4uLgor
CQkJfQorCQkJaGFuZGxlU2VsZWN0aW9uTm9kZShibG9ja1Njb3BlKTsKKwkJfQogCiAJCXRoaXMu
YmluZGluZyA9IG5ldyBNZXRob2RCaW5kaW5nKENsYXNzRmlsZUNvbnN0YW50cy5BY2NQcml2YXRl
IHwgQ2xhc3NGaWxlQ29uc3RhbnRzLkFjY1N5bnRoZXRpYyB8IEV4dHJhQ29tcGlsZXJNb2RpZmll
cnMuQWNjVW5yZXNvbHZlZCwKIAkJCQkJCQlUeXBlQ29uc3RhbnRzLkFOT05ZTU9VU19NRVRIT0Qs
IC8vIHdpbGwgYmUgZml4ZWQgdXAgbGF0ZXIuCiAJCQkJCQkJaGF2ZURlc2NyaXB0b3IgPyB0aGlz
LmRlc2NyaXB0b3IucmV0dXJuVHlwZSA6IG51bGwsIAogCQkJCQkJCUJpbmRpbmcuTk9fUEFSQU1F
VEVSUywgLy8gZm9yIG5vdy4gCkBAIC0xOTQsMTEgKzI0OCwxMSBAQAogCQkJCQlidWdneUFyZ3Vt
ZW50cyA9IHRydWU7CiAJCQkJfQogCQkJfQogCQkJCiAJCQlUeXBlQmluZGluZyBwYXJhbWV0ZXJU
eXBlOwotCQkJZmluYWwgVHlwZUJpbmRpbmcgZXhwZWN0ZWRQYXJhbWV0ZXJUeXBlID0gaGF2ZURl
c2NyaXB0b3IgJiYgaSA8IHRoaXMuZGVzY3JpcHRvci5wYXJhbWV0ZXJzLmxlbmd0aCA/IHRoaXMu
ZGVzY3JpcHRvci5wYXJhbWV0ZXJzW2ldIDogbnVsbDsKKwkJCWZpbmFsIFR5cGVCaW5kaW5nIGV4
cGVjdGVkUGFyYW1ldGVyVHlwZSA9IHRoaXMuZGVzY3JpcHRvciAhPSBudWxsICYmIGkgPCB0aGlz
LmRlc2NyaXB0b3IucGFyYW1ldGVycy5sZW5ndGggPyB0aGlzLmRlc2NyaXB0b3IucGFyYW1ldGVy
c1tpXSA6IG51bGw7CiAJCQlwYXJhbWV0ZXJUeXBlID0gYXJndW1lbnRzVHlwZUVsaWRlZCA/IGV4
cGVjdGVkUGFyYW1ldGVyVHlwZSA6IGFyZ3VtZW50LnR5cGUucmVzb2x2ZVR5cGUodGhpcy5zY29w
ZSwgdHJ1ZSAvKiBjaGVjayBib3VuZHMqLyk7CiAJCQlpZiAocGFyYW1ldGVyVHlwZSA9PSBudWxs
KSB7CiAJCQkJYnVnZ3lBcmd1bWVudHMgPSB0cnVlOwogCQkJfSBlbHNlIGlmIChwYXJhbWV0ZXJU
eXBlID09IFR5cGVCaW5kaW5nLlZPSUQpIHsKIAkJCQl0aGlzLnNjb3BlLnByb2JsZW1SZXBvcnRl
cigpLmFyZ3VtZW50VHlwZUNhbm5vdEJlVm9pZCh0aGlzLCBhcmd1bWVudCk7CmRpZmYgLS1naXQg
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvcGFyc2VyL1JlY292ZXJlZEJsb2NrLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcGFyc2VyL1JlY292
ZXJlZEJsb2NrLmphdmEKaW5kZXggMWQ3NGZlOC4uOWJjYzA0YiAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L3BhcnNlci9SZWNvdmVyZWRCbG9jay5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wYXJzZXIvUmVjb3ZlcmVk
QmxvY2suamF2YQpAQCAtMSwyNiArMSwzMiBAQAogLyoqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAq
IENvcHlyaWdodCAoYykgMjAwMCwgMjAwOSBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAq
IENvcHlyaWdodCAoYykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAq
IEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBt
YXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVj
bGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0
cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKICAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcv
bGVnYWwvZXBsLXYxMC5odG1sCiAgKgorICogVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBh
biBlYXJseS1kcmFmdCBzcGVjaWZpY2F0aW9uIGRldmVsb3BlZCB1bmRlciB0aGUgSmF2YQorICog
Q29tbXVuaXR5IFByb2Nlc3MgKEpDUCkgYW5kIGlzIG1hZGUgYXZhaWxhYmxlIGZvciB0ZXN0aW5n
IGFuZCBldmFsdWF0aW9uIHB1cnBvc2VzCisgKiBvbmx5LiBUaGUgY29kZSBpcyBub3QgY29tcGF0
aWJsZSB3aXRoIGFueSBzcGVjaWZpY2F0aW9uIG9mIHRoZSBKQ1AuCisgKiAKICAqIENvbnRyaWJ1
dG9yczoKICAqICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50
YXRpb24KICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIucGFyc2VyOwogCiBpbXBvcnQgamF2YS51dGlsLkhhc2hTZXQ7CiBp
bXBvcnQgamF2YS51dGlsLlNldDsKIAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBp
bGVyLio7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvZGVhc3Npc3QuaW1wbC5B
c3Npc3RQYXJzZXI7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFz
dC5BYnN0cmFjdE1ldGhvZERlY2xhcmF0aW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRl
cm5hbC5jb21waWxlci5hc3QuQXJndW1lbnQ7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVy
bmFsLmNvbXBpbGVyLmFzdC5BU1ROb2RlOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5h
bC5jb21waWxlci5hc3QuQmxvY2s7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNv
bXBpbGVyLmFzdC5GaWVsZERlY2xhcmF0aW9uOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRl
cm5hbC5jb21waWxlci5hc3QuTGFtYmRhRXhwcmVzc2lvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkxvY2FsRGVjbGFyYXRpb247CiBpbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5TdGF0ZW1lbnQ7CiBpbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5UeXBlRGVjbGFyYXRpb247CiBpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmNsYXNzZm10LkNsYXNzRmlsZUNvbnN0
YW50czsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlR5
cGVCaW5kaW5nOwpAQCAtMjksMTEgKzM1LDExIEBACiAKIAlwdWJsaWMgQmxvY2sgYmxvY2tEZWNs
YXJhdGlvbjsKIAlwdWJsaWMgUmVjb3ZlcmVkU3RhdGVtZW50W10gc3RhdGVtZW50czsKIAlwdWJs
aWMgaW50IHN0YXRlbWVudENvdW50OwogCXB1YmxpYyBib29sZWFuIHByZXNlcnZlQ29udGVudCA9
IGZhbHNlOwotCXB1YmxpYyBSZWNvdmVyZWRMb2NhbFZhcmlhYmxlIHBlbmRpbmdBcmd1bWVudDsK
KwlwdWJsaWMgUmVjb3ZlcmVkTG9jYWxWYXJpYWJsZSBbXSBwZW5kaW5nQXJndW1lbnRzID0gbnVs
bDsKIAogCWludCBwZW5kaW5nTW9kaWZpZXJzOwogCWludCBwZW5kaW5nTW9kaWZlcnNTb3VyY2VT
dGFydCA9IC0xOwogCVJlY292ZXJlZEFubm90YXRpb25bXSBwZW5kaW5nQW5ub3RhdGlvbnM7CiAJ
aW50IHBlbmRpbmdBbm5vdGF0aW9uQ291bnQ7CkBAIC01NCwxMCArNjAsMjEgQEAKIAkJCXJldHVy
biB0aGlzOyAvLyBpZ25vcmUgdGhpcyBlbGVtZW50CiAJCX0KIAl9CiAJcmV0dXJuIHN1cGVyLmFk
ZChtZXRob2REZWNsYXJhdGlvbiwgYnJhY2tldEJhbGFuY2VWYWx1ZSk7CiB9CitwdWJsaWMgdm9p
ZCBhZGRQZW5kaW5nQXJndW1lbnQoUmVjb3ZlcmVkTG9jYWxWYXJpYWJsZSBwZW5kaW5nQXJnKSB7
CisJaWYgKHRoaXMucGVuZGluZ0FyZ3VtZW50cyA9PSBudWxsKSB7CisJCVJlY292ZXJlZExvY2Fs
VmFyaWFibGUgcmVjb3ZlcmVkTG9jYWxWYXJpYWJsZSBbXSA9IHtwZW5kaW5nQXJnfTsKKwkJdGhp
cy5wZW5kaW5nQXJndW1lbnRzID0gcmVjb3ZlcmVkTG9jYWxWYXJpYWJsZTsKKwl9CisJZWxzZSB7
CisJCWludCBsZW5ndGggPSB0aGlzLnBlbmRpbmdBcmd1bWVudHMubGVuZ3RoOworCQlTeXN0ZW0u
YXJyYXljb3B5KHRoaXMucGVuZGluZ0FyZ3VtZW50cywgMCwgdGhpcy5wZW5kaW5nQXJndW1lbnRz
ID0gbmV3IFJlY292ZXJlZExvY2FsVmFyaWFibGVbbGVuZ3RoKzFdLCAwLCBsZW5ndGgpOworCQl0
aGlzLnBlbmRpbmdBcmd1bWVudHNbbGVuZ3RoXSA9IHBlbmRpbmdBcmc7CisJfQorfQogLyoKICAq
IFJlY29yZCBhIG5lc3RlZCBibG9jayBkZWNsYXJhdGlvbgogICovCiBwdWJsaWMgUmVjb3ZlcmVk
RWxlbWVudCBhZGQoQmxvY2sgbmVzdGVkQmxvY2tEZWNsYXJhdGlvbiwgaW50IGJyYWNrZXRCYWxh
bmNlVmFsdWUpIHsKIAlyZXNldFBlbmRpbmdNb2RpZmllcnMoKTsKQEAgLTcwLDEzICs4NywxNSBA
QAogCX0KIAogCVJlY292ZXJlZEJsb2NrIGVsZW1lbnQgPSBuZXcgUmVjb3ZlcmVkQmxvY2sobmVz
dGVkQmxvY2tEZWNsYXJhdGlvbiwgdGhpcywgYnJhY2tldEJhbGFuY2VWYWx1ZSk7CiAKIAkvLyBp
ZiB3ZSBoYXZlIGEgcGVuZGluZyBBcmd1bWVudCwgcHJvbW90ZSBpdCBpbnRvIHRoZSBuZXcgYmxv
Y2sKLQlpZiAodGhpcy5wZW5kaW5nQXJndW1lbnQgIT0gbnVsbCl7Ci0JCWVsZW1lbnQuYXR0YWNo
KHRoaXMucGVuZGluZ0FyZ3VtZW50KTsKLQkJdGhpcy5wZW5kaW5nQXJndW1lbnQgPSBudWxsOwor
CWlmICh0aGlzLnBlbmRpbmdBcmd1bWVudHMgIT0gbnVsbCkgeworCQlmb3IgKGludCBpbmR4ID0g
MDsgaW5keCA8IHRoaXMucGVuZGluZ0FyZ3VtZW50cy5sZW5ndGg7IGluZHgrKykgeworCQkJZWxl
bWVudC5hdHRhY2godGhpcy5wZW5kaW5nQXJndW1lbnRzW2luZHhdKTsJCQkKKwkJfQorCQl0aGlz
LnBlbmRpbmdBcmd1bWVudHMgPSBudWxsOwogCX0KIAlpZihwYXJzZXIoKS5zdGF0ZW1lbnRSZWNv
dmVyeUFjdGl2YXRlZCkgewogCQlhZGRCbG9ja1N0YXRlbWVudChlbGVtZW50KTsKIAl9CiAJYXR0
YWNoKGVsZW1lbnQpOwpAQCAtMTI5LDExICsxNDgsMjMgQEAKIAkJCQl0aGlzLnBlbmRpbmdNb2Rp
ZmVyc1NvdXJjZVN0YXJ0KTsKIAl9CiAJcmVzZXRQZW5kaW5nTW9kaWZpZXJzKCk7CiAKIAlpZiAo
bG9jYWxEZWNsYXJhdGlvbiBpbnN0YW5jZW9mIEFyZ3VtZW50KXsKLQkJdGhpcy5wZW5kaW5nQXJn
dW1lbnQgPSBlbGVtZW50OworCQlpZiAoKChBcmd1bWVudClsb2NhbERlY2xhcmF0aW9uKS5oYXNF
bGlkZWRUeXBlKCkpIHsKKwkJCVJlY292ZXJlZExhbWJkYUV4cHJlc3Npb24gckxleHAgPSBuZXcg
UmVjb3ZlcmVkTGFtYmRhRXhwcmVzc2lvbihuZXcgQmxvY2soMCksIHRoaXMsIGJyYWNrZXRCYWxh
bmNlVmFsdWUpOworCQkJUGFyc2VyIGN1cnJQYXJzZXIgPSBwYXJzZXIoKTsKKwkJCWlmIChjdXJy
UGFyc2VyIGluc3RhbmNlb2YgQXNzaXN0UGFyc2VyKSB7CisJCQkJQXNzaXN0UGFyc2VyIGFQYXJz
ZXIgPSAoQXNzaXN0UGFyc2VyKWN1cnJQYXJzZXI7CisJCQkJckxleHAuc2VudE1lc3NhZ2UgPSBh
UGFyc2VyLmNvbGxlY3RMYW1iZGFFeHByZXNzaW9uSW5mb3JtYXRpb25Gcm9tUGFyc2VyV2l0aG91
dERpc3R1cmJpbmdTdGFja3MoKTsKKwkJCQlyTGV4cC5pbnNlcnRMYW1iZGFBcmd1bWVudCgoQXJn
dW1lbnQpbG9jYWxEZWNsYXJhdGlvbik7CisJCQkJckxleHAuaW5zZXJ0TGFtYmRhQXJndW1lbnQo
YVBhcnNlci5nZXRMYW1iZGFBcmd1bWVudHNPbndhcmRzKChBcmd1bWVudClsb2NhbERlY2xhcmF0
aW9uKSk7CisJCQl9CisJCQlhdHRhY2gockxleHApOworCQkJcmV0dXJuIHJMZXhwOworCQl9CisJ
CWFkZFBlbmRpbmdBcmd1bWVudChlbGVtZW50KTsKIAkJcmV0dXJuIHRoaXM7CiAJfQogCiAJYXR0
YWNoKGVsZW1lbnQpOwogCWlmIChsb2NhbERlY2xhcmF0aW9uLmRlY2xhcmF0aW9uU291cmNlRW5k
ID09IDApIHJldHVybiBlbGVtZW50OwpAQCAtMjc3LDExICszMDgsMTQgQEAKIAlyZXR1cm4gcmVz
dWx0LnRvU3RyaW5nKCk7CiB9CiAvKgogICogUmVidWlsZCBhIGJsb2NrIGZyb20gdGhlIG5lc3Rl
ZCBzdHJ1Y3R1cmUgd2hpY2ggaXMgaW4gc2NvcGUKICAqLwotcHVibGljIEJsb2NrIHVwZGF0ZWRC
bG9jayhpbnQgZGVwdGgsIFNldCBrbm93blR5cGVzKXsKK3B1YmxpYyBCbG9jayB1cGRhdGVkQmxv
Y2soaW50IGRlcHRoLCBTZXQga25vd25UeXBlcykgeworCXJldHVybiB1cGRhdGVkQmxvY2soZGVw
dGgsIGtub3duVHlwZXMsIGZhbHNlKTsKK30KK3B1YmxpYyBCbG9jayB1cGRhdGVkQmxvY2soaW50
IGRlcHRoLCBTZXQga25vd25UeXBlcywgYm9vbGVhbiBsYW1iZGFFeHByZXNzaW9uRXhwZWN0ZWQp
IHsKIAogCS8vIGlmIGJsb2NrIHdhcyBub3QgbWFya2VkIHRvIGJlIHByZXNlcnZlZCBvciBlbXB0
eSwgdGhlbiBpZ25vcmUgaXQKIAlpZiAoIXRoaXMucHJlc2VydmVDb250ZW50IHx8IHRoaXMuc3Rh
dGVtZW50Q291bnQgPT0gMCkgcmV0dXJuIG51bGw7CiAKIAlTdGF0ZW1lbnRbXSB1cGRhdGVkU3Rh
dGVtZW50cyA9IG5ldyBTdGF0ZW1lbnRbdGhpcy5zdGF0ZW1lbnRDb3VudF07CkBAIC0zMjMsMTMg
KzM1NywyMCBAQAogCiAJaW50IGxhc3RFbmQgPSB0aGlzLmJsb2NrRGVjbGFyYXRpb24uc291cmNl
U3RhcnQ7CiAKIAkvLyBvbmx5IGNvbGxlY3QgdGhlIG5vbi1udWxsIHVwZGF0ZWQgc3RhdGVtZW50
cwogCWZvciAoaW50IGkgPSAwOyBpIDwgdGhpcy5zdGF0ZW1lbnRDb3VudDsgaSsrKXsKLQkJU3Rh
dGVtZW50IHVwZGF0ZWRTdGF0ZW1lbnQgPSB0aGlzLnN0YXRlbWVudHNbaV0udXBkYXRlZFN0YXRl
bWVudChkZXB0aCwga25vd25UeXBlcyk7CisJCWJvb2xlYW4gbGFtYmRhRXhwckluaXQgPSBpID4g
MCAmJiBsYW1iZGFFeHByZXNzaW9uSW5pdGlhbGl6YWJsZSh0aGlzLnN0YXRlbWVudHNbaS0xXSk7
CisJCVN0YXRlbWVudCB1cGRhdGVkU3RhdGVtZW50ID0gdGhpcy5zdGF0ZW1lbnRzW2ldLnVwZGF0
ZWRTdGF0ZW1lbnQoZGVwdGgsIGtub3duVHlwZXMsIGxhbWJkYUV4cHJJbml0KTsKIAkJaWYgKHVw
ZGF0ZWRTdGF0ZW1lbnQgIT0gbnVsbCl7Ci0JCQl1cGRhdGVkU3RhdGVtZW50c1t1cGRhdGVkQ291
bnQrK10gPSB1cGRhdGVkU3RhdGVtZW50OworCQkJTGFtYmRhRXhwcmVzc2lvbiBsYW1iZGFFeHBy
ID0gZ2V0TGFtYmRhRXhwcmVzc2lvbih1cGRhdGVkU3RhdGVtZW50KTsKKwkJCWlmIChsYW1iZGFF
eHBySW5pdCAmJiBsYW1iZGFFeHByICE9IG51bGwpIHsKKwkJCQkoKExvY2FsRGVjbGFyYXRpb24p
dXBkYXRlZFN0YXRlbWVudHNbdXBkYXRlZENvdW50LTFdKS5pbml0aWFsaXphdGlvbiA9IGxhbWJk
YUV4cHI7CisJCQl9CisJCQllbHNlIHsKKwkJCQl1cGRhdGVkU3RhdGVtZW50c1t1cGRhdGVkQ291
bnQrK10gPSB1cGRhdGVkU3RhdGVtZW50OworCQkJfQogCiAJCQlpZiAodXBkYXRlZFN0YXRlbWVu
dCBpbnN0YW5jZW9mIExvY2FsRGVjbGFyYXRpb24pIHsKIAkJCQlMb2NhbERlY2xhcmF0aW9uIGxv
Y2FsRGVjbGFyYXRpb24gPSAoTG9jYWxEZWNsYXJhdGlvbikgdXBkYXRlZFN0YXRlbWVudDsKIAkJ
CQlpZihsb2NhbERlY2xhcmF0aW9uLmRlY2xhcmF0aW9uU291cmNlRW5kID4gbGFzdEVuZCkgewog
CQkJCQlsYXN0RW5kID0gbG9jYWxEZWNsYXJhdGlvbi5kZWNsYXJhdGlvblNvdXJjZUVuZDsKQEAg
LTM1MSwxMSArMzkyLDE4IEBACiAJLy8gcmVzaXplIHN0YXRlbWVudCBjb2xsZWN0aW9uIGlmIG5l
Y2Vzc2FyeQogCWlmICh1cGRhdGVkQ291bnQgIT0gdGhpcy5zdGF0ZW1lbnRDb3VudCl7CiAJCXRo
aXMuYmxvY2tEZWNsYXJhdGlvbi5zdGF0ZW1lbnRzID0gbmV3IFN0YXRlbWVudFt1cGRhdGVkQ291
bnRdOwogCQlTeXN0ZW0uYXJyYXljb3B5KHVwZGF0ZWRTdGF0ZW1lbnRzLCAwLCB0aGlzLmJsb2Nr
RGVjbGFyYXRpb24uc3RhdGVtZW50cywgMCwgdXBkYXRlZENvdW50KTsKIAl9IGVsc2UgewotCQl0
aGlzLmJsb2NrRGVjbGFyYXRpb24uc3RhdGVtZW50cyA9IHVwZGF0ZWRTdGF0ZW1lbnRzOworCQlM
YW1iZGFFeHByZXNzaW9uIGxhbWJkYSA9IG51bGw7CisJCWlmIChsYW1iZGFFeHByZXNzaW9uRXhw
ZWN0ZWQgJiYgISh1cGRhdGVkU3RhdGVtZW50c1swXSBpbnN0YW5jZW9mIExhbWJkYUV4cHJlc3Np
b24pICYmIChsYW1iZGEgPSBjYW5HZXRMYW1iZGFFeHByZXNzaW9uKHVwZGF0ZWRTdGF0ZW1lbnRz
LCB1cGRhdGVkQ291bnQpKSAhPSBudWxsKSB7CisJCQlTdGF0ZW1lbnQgW10gc3RtdCA9IHtsYW1i
ZGF9OworCQkJdGhpcy5ibG9ja0RlY2xhcmF0aW9uLnN0YXRlbWVudHMgPSBzdG10OworCQl9CisJ
CWVsc2UgeworCQkJdGhpcy5ibG9ja0RlY2xhcmF0aW9uLnN0YXRlbWVudHMgPSB1cGRhdGVkU3Rh
dGVtZW50czsKKwkJfQogCX0KIAogCWlmICh0aGlzLmJsb2NrRGVjbGFyYXRpb24uc291cmNlRW5k
ID09IDApIHsKIAkJaWYobGFzdEVuZCA8IGJvZHlFbmRWYWx1ZSkgewogCQkJdGhpcy5ibG9ja0Rl
Y2xhcmF0aW9uLnNvdXJjZUVuZCA9IGJvZHlFbmRWYWx1ZTsKQEAgLTM2NCwxNyArNDEyLDQ3IEBA
CiAJCX0KIAl9CiAKIAlyZXR1cm4gdGhpcy5ibG9ja0RlY2xhcmF0aW9uOwogfQorcHVibGljIExh
bWJkYUV4cHJlc3Npb24gZ2V0TGFtYmRhRXhwcmVzc2lvbiAoU3RhdGVtZW50IHN0bW50KSB7CisJ
aWYgKHN0bW50IGluc3RhbmNlb2YgTGFtYmRhRXhwcmVzc2lvbikgeworCQlyZXR1cm4gKExhbWJk
YUV4cHJlc3Npb24pc3RtbnQ7CisJfQorCWVsc2UgaWYgKHN0bW50IGluc3RhbmNlb2YgQmxvY2sg
JiYgKChCbG9jaylzdG1udCkuc3RhdGVtZW50c1swXSBpbnN0YW5jZW9mIExhbWJkYUV4cHJlc3Np
b24pIHsKKwkJcmV0dXJuIChMYW1iZGFFeHByZXNzaW9uKSgoQmxvY2spc3RtbnQpLnN0YXRlbWVu
dHNbMF07CisJfQorCXJldHVybiBudWxsOworfQorcHVibGljIExhbWJkYUV4cHJlc3Npb24gY2Fu
R2V0TGFtYmRhRXhwcmVzc2lvbiAoU3RhdGVtZW50IFtdIHN0YXRlbWVudHNBcnJheSwgaW50IGNv
dW50KSB7CisJZm9yIChpbnQgaW5keCA9IDA7IGluZHggPCBjb3VudCAtIDE7IGluZHgrKykgewor
CQlpZiAoIShzdGF0ZW1lbnRzQXJyYXlbaW5keF0gaW5zdGFuY2VvZiBBcmd1bWVudCkpIHsKKwkJ
CXJldHVybiBudWxsOworCQl9CisJfQorCUFyZ3VtZW50IFtdIGFyZ3VtZW50cyA9IG5ldyBBcmd1
bWVudCBbY291bnQtMV07CisJU3lzdGVtLmFycmF5Y29weShzdGF0ZW1lbnRzQXJyYXksIDAsIGFy
Z3VtZW50cywgMCwgY291bnQtMSk7CisJcmV0dXJuIG5ldyBMYW1iZGFFeHByZXNzaW9uKHBhcnNl
cigpLmNvbXBpbGF0aW9uVW5pdC5jb21waWxhdGlvblJlc3VsdCwgYXJndW1lbnRzLCBzdGF0ZW1l
bnRzQXJyYXlbY291bnQtMV0pOworfQogLyoKICAqIFJlYnVpbGQgYSBzdGF0ZW1lbnQgZnJvbSB0
aGUgbmVzdGVkIHN0cnVjdHVyZSB3aGljaCBpcyBpbiBzY29wZQogICovCiBwdWJsaWMgU3RhdGVt
ZW50IHVwZGF0ZWRTdGF0ZW1lbnQoaW50IGRlcHRoLCBTZXQga25vd25UeXBlcyl7CiAKIAlyZXR1
cm4gdXBkYXRlZEJsb2NrKGRlcHRoLCBrbm93blR5cGVzKTsKIH0KK3B1YmxpYyBTdGF0ZW1lbnQg
dXBkYXRlZFN0YXRlbWVudChpbnQgZGVwdGgsIFNldCBrbm93blR5cGVzLCBib29sZWFuIGxhbWJk
YUV4cHJlc3Npb25FeHBlY3RlZCkgeworCisJcmV0dXJuIGxhbWJkYUV4cHJlc3Npb25FeHBlY3Rl
ZCA/IHVwZGF0ZWRCbG9jayhkZXB0aCwga25vd25UeXBlcywgdHJ1ZSkgOiB1cGRhdGVkU3RhdGVt
ZW50KGRlcHRoLCBrbm93blR5cGVzKTsKK30KK2Jvb2xlYW4gbGFtYmRhRXhwcmVzc2lvbkluaXRp
YWxpemFibGUoUmVjb3ZlcmVkU3RhdGVtZW50IHN0bW50KSB7CisJaWYgKHN0bW50IGluc3RhbmNl
b2YgUmVjb3ZlcmVkTG9jYWxWYXJpYWJsZSkgeworCQlSZWNvdmVyZWRMb2NhbFZhcmlhYmxlIHJl
Y0xvY1ZhciA9IChSZWNvdmVyZWRMb2NhbFZhcmlhYmxlKSBzdG1udDsKKwkJcmV0dXJuIHJlY0xv
Y1Zhci5sb2NhbERlY2xhcmF0aW9uICE9IG51bGwgJiYgKHJlY0xvY1Zhci5sb2NhbERlY2xhcmF0
aW9uLmJpdHMgJiBBU1ROb2RlLklzSW5pdGlhbGl6ZWRCeUxhbWRhRXhwcmVzc2lvbikgIT0gMDsK
Kwl9CisJcmV0dXJuIGZhbHNlOworfQogLyoKICAqIEEgY2xvc2luZyBicmFjZSBnb3QgY29uc3Vt
ZWQsIG1pZ2h0IGhhdmUgY2xvc2VkIHRoZSBjdXJyZW50IGVsZW1lbnQsCiAgKiBpbiB3aGljaCBj
YXNlIGJvdGggdGhlIGN1cnJlbnRFbGVtZW50IGlzIGV4aXRlZAogICovCiBwdWJsaWMgUmVjb3Zl
cmVkRWxlbWVudCB1cGRhdGVPbkNsb3NpbmdCcmFjZShpbnQgYnJhY2VTdGFydCwgaW50IGJyYWNl
RW5kKXsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wYXJzZXIvUmVjb3ZlcmVkTGFtYmRhRXhwcmVzc2lv
bi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL3BhcnNlci9SZWNvdmVyZWRMYW1iZGFFeHByZXNzaW9uLmphdmEKbmV3
IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMC4uYTcyYzUxZgotLS0gL2Rldi9udWxsCisr
KyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9wYXJzZXIvUmVjb3ZlcmVkTGFtYmRhRXhwcmVzc2lvbi5qYXZhCkBAIC0wLDAg
KzEsODIgQEAKKy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAs
IDIwMTMgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBBbGwgcmlnaHRzIHJlc2VydmVk
LiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCisgKiBhcmUgbWFk
ZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNl
IHYxLjAKKyAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZh
aWxhYmxlIGF0CisgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbAor
ICogCisgKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNp
ZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVyIHRoZSBKYXZhCisgKiBDb21tdW5pdHkgUHJvY2VzcyAo
SkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFibGUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gcHVy
cG9zZXMKKyAqIG9ubHkuIFRoZSBjb2RlIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggYW55IHNwZWNp
ZmljYXRpb24gb2YgdGhlIEpDUC4KKyAqIAorICogQ29udHJpYnV0b3JzOgorICogICAgIElCTSBD
b3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgorICoqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKiovCitwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5w
YXJzZXI7CisKK2ltcG9ydCBqYXZhLnV0aWwuU2V0OworCitpbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmludGVybmFsLmNvbXBpbGVyLmFzdC5Bcmd1bWVudDsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIuYXN0LkJsb2NrOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRl
cm5hbC5jb21waWxlci5hc3QuTGFtYmRhRXhwcmVzc2lvbjsKK2ltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0Lk1lc3NhZ2VTZW5kOworaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuU3RhdGVtZW50OworCitwdWJsaWMgY2xhc3MgUmVj
b3ZlcmVkTGFtYmRhRXhwcmVzc2lvbiBleHRlbmRzIFJlY292ZXJlZEJsb2NrIHsKKwkKKwlwdWJs
aWMgQXJndW1lbnQgW10gbGFtYmRhQXJndW1lbnRzID0gbnVsbDsKKwlwdWJsaWMgTWVzc2FnZVNl
bmQgc2VudE1lc3NhZ2UgPSBudWxsOworCisJcHVibGljIFJlY292ZXJlZExhbWJkYUV4cHJlc3Np
b24oQmxvY2sgYmxvY2ssIFJlY292ZXJlZEVsZW1lbnQgcGFyZW50LCBpbnQgYnJhY2tldEJhbGFu
Y2UpIHsKKwkJc3VwZXIoYmxvY2ssIHBhcmVudCwgYnJhY2tldEJhbGFuY2UpOworCX0KKworCXB1
YmxpYyB2b2lkIGluc2VydExhbWJkYUFyZ3VtZW50IChBcmd1bWVudCBhcmcpIHsKKwkJaWYgKHRo
aXMubGFtYmRhQXJndW1lbnRzID09IG51bGwpIHsKKwkJCSh0aGlzLmxhbWJkYUFyZ3VtZW50cyA9
IG5ldyBBcmd1bWVudFsxXSlbMF0gPSBhcmc7CisJCX0gZWxzZSB7CisJCQlpbnQgbGVuOworCQkJ
U3lzdGVtLmFycmF5Y29weSh0aGlzLmxhbWJkYUFyZ3VtZW50cywgMCwgdGhpcy5sYW1iZGFBcmd1
bWVudHMgPSBuZXcgQXJndW1lbnRbKGxlbiA9IHRoaXMubGFtYmRhQXJndW1lbnRzLmxlbmd0aCkg
KyAxXSwgMCwgbGVuKTsKKwkJCXRoaXMubGFtYmRhQXJndW1lbnRzW2xlbl0gPSBhcmc7CisJCX0K
Kwl9CisJCisJcHVibGljIHZvaWQgaW5zZXJ0TGFtYmRhQXJndW1lbnQgKEFyZ3VtZW50IFtdIGFy
Z3MpIHsKKwkJaWYgKGFyZ3MgIT0gbnVsbCkgeworCQkJaWYgKHRoaXMubGFtYmRhQXJndW1lbnRz
ID09IG51bGwpIHsKKwkJCQl0aGlzLmxhbWJkYUFyZ3VtZW50cyA9IGFyZ3M7CisJCQl9IGVsc2Ug
eworCQkJCWludCBsZW4gPSB0aGlzLmxhbWJkYUFyZ3VtZW50cy5sZW5ndGg7CisJCQkJU3lzdGVt
LmFycmF5Y29weSh0aGlzLmxhbWJkYUFyZ3VtZW50cywgMCwgdGhpcy5sYW1iZGFBcmd1bWVudHMg
PSBuZXcgQXJndW1lbnRbbGVuICsgYXJncy5sZW5ndGhdLCAwLCBsZW4pOworCQkJCVN5c3RlbS5h
cnJheWNvcHkoYXJncywgMCwgdGhpcy5sYW1iZGFBcmd1bWVudHMsIGxlbiwgYXJncy5sZW5ndGgp
OworCQkJfQorCQl9CisJfQorCQorCXB1YmxpYyBTdGF0ZW1lbnQgdXBkYXRlZFN0YXRlbWVudChp
bnQgZGVwdGgsIFNldCBrbm93blR5cGVzLCBib29sZWFuIGxhbWJkYUV4cHJlc3Npb25FeHBlY3Rl
ZCkgeworCQlyZXR1cm4gdXBkYXRlZEJsb2NrKGRlcHRoLCBrbm93blR5cGVzLCB0cnVlKTsKKwl9
CisJCisJcHVibGljIExhbWJkYUV4cHJlc3Npb24gY2FuR2V0TGFtYmRhRXhwcmVzc2lvbiAoU3Rh
dGVtZW50IFtdIHN0YXRlbWVudHNBcnJheSwgaW50IGNvdW50KSB7CisJCWlmIChzdGF0ZW1lbnRz
QXJyYXkubGVuZ3RoID09IDEgJiYgdGhpcy5sYW1iZGFBcmd1bWVudHMgIT0gbnVsbCkgeworCQkJ
TGFtYmRhRXhwcmVzc2lvbiBsRXhwID0gbmV3IExhbWJkYUV4cHJlc3Npb24ocGFyc2VyKCkuY29t
cGlsYXRpb25Vbml0LmNvbXBpbGF0aW9uUmVzdWx0LCB0aGlzLmxhbWJkYUFyZ3VtZW50cywgc3Rh
dGVtZW50c0FycmF5WzBdKTsKKwkJCWxFeHAuc2VudE1lc3NhZ2UgPSB0aGlzLnNlbnRNZXNzYWdl
OworCQkJcmV0dXJuIGxFeHA7CisJCX0KKwkJcmV0dXJuIHN1cGVyLmNhbkdldExhbWJkYUV4cHJl
c3Npb24oc3RhdGVtZW50c0FycmF5LCBjb3VudCk7CisJfQorCQorCXB1YmxpYyBTdHJpbmcgdG9T
dHJpbmcoaW50IHRhYikgeworCQlTdHJpbmdCdWZmZXIgcmVzdWx0ID0gbmV3IFN0cmluZ0J1ZmZl
cih0YWJTdHJpbmcodGFiKSk7CisJCXJlc3VsdC5hcHBlbmQoIlJlY292ZXJlZCBMYW1iZGEgRXhw
cmVzc2lvbjpcbiIpOyAvLyROT04tTkxTLTEkCisJCXRoaXMuYmxvY2tEZWNsYXJhdGlvbi5wcmlu
dCh0YWIgKyAxLCByZXN1bHQpOworCQlpZiAodGhpcy5zdGF0ZW1lbnRzICE9IG51bGwpIHsKKwkJ
CWZvciAoaW50IGkgPSAwOyBpIDwgdGhpcy5zdGF0ZW1lbnRDb3VudDsgaSsrKSB7CisJCQkJcmVz
dWx0LmFwcGVuZCgiXG4iKTsgLy8kTk9OLU5MUy0xJAorCQkJCXJlc3VsdC5hcHBlbmQodGhpcy5z
dGF0ZW1lbnRzW2ldLnRvU3RyaW5nKHRhYiArIDEpKTsKKwkJCX0KKwkJfQorCQlyZXR1cm4gcmVz
dWx0LnRvU3RyaW5nKCk7CisJfQorCit9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcGFyc2VyL1JlY292
ZXJlZFN0YXRlbWVudC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3BhcnNlci9SZWNvdmVyZWRTdGF0ZW1lbnQuamF2
YQppbmRleCA1ZDNmNjUzLi41NDBjMmUyIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcGFyc2VyL1JlY292
ZXJlZFN0YXRlbWVudC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wYXJzZXIvUmVjb3ZlcmVkU3RhdGVtZW50
LmphdmEKQEAgLTEsMTIgKzEsMTYgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5
cmlnaHQgKGMpIDIwMDAsIDIwMDkgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5
cmlnaHQgKGMpIDIwMDAsIDIwMTMgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwg
cmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJp
YWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNl
IFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0
aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CiAgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2Fs
L2VwbC12MTAuaHRtbAogICoKKyAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFy
bHktZHJhZnQgc3BlY2lmaWNhdGlvbiBkZXZlbG9wZWQgdW5kZXIgdGhlIEphdmEKKyAqIENvbW11
bml0eSBQcm9jZXNzIChKQ1ApIGFuZCBpcyBtYWRlIGF2YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQg
ZXZhbHVhdGlvbiBwdXJwb3NlcworICogb25seS4gVGhlIGNvZGUgaXMgbm90IGNvbXBhdGlibGUg
d2l0aCBhbnkgc3BlY2lmaWNhdGlvbiBvZiB0aGUgSkNQLgorICogCiAgKiBDb250cmlidXRvcnM6
CiAgKiAgICAgSUJNIENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9u
CiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKi8KIHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmludGVy
bmFsLmNvbXBpbGVyLnBhcnNlcjsKIApAQCAtNDIsMTAgKzQ2LDEzIEBACiAJcmV0dXJuIHRhYlN0
cmluZyh0YWIpICsgIlJlY292ZXJlZCBzdGF0ZW1lbnQ6XG4iICsgdGhpcy5zdGF0ZW1lbnQucHJp
bnQodGFiICsgMSwgbmV3IFN0cmluZ0J1ZmZlcigxMCkpOyAvLyROT04tTkxTLTEkCiB9CiBwdWJs
aWMgU3RhdGVtZW50IHVwZGF0ZWRTdGF0ZW1lbnQoaW50IGRlcHRoLCBTZXQga25vd25UeXBlcyl7
CiAJcmV0dXJuIHRoaXMuc3RhdGVtZW50OwogfQorcHVibGljIFN0YXRlbWVudCB1cGRhdGVkU3Rh
dGVtZW50KGludCBkZXB0aCwgU2V0IGtub3duVHlwZXMsIGJvb2xlYW4gbGFtYmRhRXhwcmVzc2lv
bkV4cGVjdGVkKSB7CisJcmV0dXJuIHVwZGF0ZWRTdGF0ZW1lbnQoZGVwdGgsIGtub3duVHlwZXMp
OworfQogcHVibGljIHZvaWQgdXBkYXRlUGFyc2VUcmVlKCl7CiAJdXBkYXRlZFN0YXRlbWVudCgw
LCBuZXcgSGFzaFNldCgpKTsKIH0KIC8qCiAgKiBVcGRhdGUgdGhlIGRlY2xhcmF0aW9uU291cmNl
RW5kIG9mIHRoZSBjb3JyZXNwb25kaW5nIHBhcnNlIG5vZGUKZGlmZiAtLWdpdCBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL1NlbGVjdGlv
blJlcXVlc3Rvci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvcmUvU2VsZWN0aW9uUmVxdWVzdG9yLmphdmEKaW5kZXggN2FjY2JmZi4u
MWFiNmZhNyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvcmUvU2VsZWN0aW9uUmVxdWVzdG9yLmphdmEKKysrIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvU2VsZWN0
aW9uUmVxdWVzdG9yLmphdmEKQEAgLTEsMTIgKzEsMTYgQEAKIC8qKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhl
cnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTMgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhl
cnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBh
bnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9m
IHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRo
aXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CiAgKiBodHRwOi8vd3d3LmVjbGlw
c2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbAogICoKKyAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRp
b24gb2YgYW4gZWFybHktZHJhZnQgc3BlY2lmaWNhdGlvbiBkZXZlbG9wZWQgdW5kZXIgdGhlIEph
dmEKKyAqIENvbW11bml0eSBQcm9jZXNzIChKQ1ApIGFuZCBpcyBtYWRlIGF2YWlsYWJsZSBmb3Ig
dGVzdGluZyBhbmQgZXZhbHVhdGlvbiBwdXJwb3NlcworICogb25seS4gVGhlIGNvZGUgaXMgbm90
IGNvbXBhdGlibGUgd2l0aCBhbnkgc3BlY2lmaWNhdGlvbiBvZiB0aGUgSkNQLgorICogCiAgKiBD
b250cmlidXRvcnM6CiAgKiAgICAgSUJNIENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGlt
cGxlbWVudGF0aW9uCiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KIHBhY2thZ2Ugb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvcmU7CiAKQEAgLTQ0OSwxMSArNDUzLDExIEBACiAJCQkJbmV3IFN0
cmluZyhsb2NhbC5uYW1lKSwKIAkJCQlsb2NhbC5kZWNsYXJhdGlvblNvdXJjZVN0YXJ0LAogCQkJ
CWxvY2FsLmRlY2xhcmF0aW9uU291cmNlRW5kLAogCQkJCWxvY2FsLnNvdXJjZVN0YXJ0LAogCQkJ
CWxvY2FsLnNvdXJjZUVuZCwKLQkJCQlVdGlsLnR5cGVTaWduYXR1cmUobG9jYWwudHlwZSksCisJ
CQkJbG9jYWwudHlwZSA9PSBudWxsID8gU2lnbmF0dXJlLmNyZWF0ZVR5cGVTaWduYXR1cmUobG9j
YWwuYmluZGluZy50eXBlLnJlYWRhYmxlTmFtZSgpLCBmYWxzZSkgOiBVdGlsLnR5cGVTaWduYXR1
cmUobG9jYWwudHlwZSksCiAJCQkJbG9jYWwuYW5ub3RhdGlvbnMsCiAJCQkJbG9jYWwubW9kaWZp
ZXJzLAogCQkJCWxvY2FsLmdldEtpbmQoKSA9PSBBYnN0cmFjdFZhcmlhYmxlRGVjbGFyYXRpb24u
UEFSQU1FVEVSKTsKIAl9CiAJaWYgKGxvY2FsVmFyICE9IG51bGwpIHs=
</data>
<flag name="review"
          id="59550"
          type_id="6"
          status="?"
          setter="anchakrk"
    />
          </attachment>
      

    </bug>

</bugzilla>