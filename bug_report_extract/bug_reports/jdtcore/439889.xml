<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>439889</bug_id>
          
          <creation_ts>2014-07-18 08:55:00 -0400</creation_ts>
          <short_desc>[1.8][compiler] [lambda] Deserializing lambda fails with IllegalArgumentException: &quot;Invalid lambda deserialization&quot;</short_desc>
          <delta_ts>2014-08-28 07:03:43 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          <see_also>https://bugs.eclipse.org/bugs/show_bug.cgi?id=428642</see_also>
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.4.1</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Tobias Gierke">tobias.gierke</reporter>
          <assigned_to name="Andrew Clement">aclement</assigned_to>
          <cc>jarthana</cc>
    
    <cc>manpalat</cc>
    
    <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2429264</commentid>
    <comment_count>0</comment_count>
    <who name="Tobias Gierke">tobias.gierke</who>
    <bug_when>2014-07-18 08:55:21 -0400</bug_when>
    <thetext>This looks suspiciously like bug 428642 (currently marked as fixed) is not really fixed. I tested this on Eclipse 4.4.0 (Luna release version) using 64-bit JDK 1.8.05.

The following code works as expected with javac but fails to execute correctly (throwing an IllegalArgumentException instead) when run from inside Eclipse.

-----------------------------
package com.vodecc.voipmng.boundary.wicket.alarming;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;

public class SerializationTest implements Serializable
{
	interface SerializableRunnable extends Runnable, Serializable {
	}

	SerializableRunnable runnable;

	public SerializationTest() {
		final SerializationTest self = this;
		// runnable = () -&gt; self.doSomething();  // WORKING
		runnable = () -&gt; this.doSomething(); // FAILS
        }

	public void doSomething() {
		System.out.println(&quot;Hello,world!&quot;);
	}

	public static void main(String[] args) throws Exception
	{
		final ByteArrayOutputStream buffer = new ByteArrayOutputStream();
		try (ObjectOutputStream out = new ObjectOutputStream(buffer) ) {
			out.writeObject(new SerializationTest());
		}
		try (ObjectInputStream in = new ObjectInputStream( new ByteArrayInputStream(buffer.toByteArray())))
		{
			final SerializationTest s = (SerializationTest) in.readObject();
			s.doSomething();
		}
	}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2429446</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-07-18 23:52:11 -0400</bug_when>
    <thetext>Andy, can you please take a look ? TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2431305</commentid>
    <comment_count>2</comment_count>
    <who name="Andrew Clement">aclement</who>
    <bug_when>2014-07-23 16:06:49 -0400</bug_when>
    <thetext>The problem here appears to be the 2nd method argument in the bootstrap method.  For javac it is:

        #76 invokespecial SerializationTest.lambda$new$81c80a4a$1:()V

Whilst in JDT it is:

        #166 invokevirtual SerializationTest.lambda$0:()V

As discussed in comment 5 of bug 405104 we are still doing much less work around naming lambdas, so I&apos;m not surprised the name is different. Therefore it is because JDT is generating invokevirtual (the lambda method is actually private in both cases).

By changing JDT to ensure that is an invokespecial, the test code works. (this bug is not related to bug 428642).

We can achieve this by changing this method in ConstantPool:

public int literalIndexForMethodHandle(MethodBinding binding) {
  boolean isInterface = binding.declaringClass.isInterface();
  int referenceKind =
    isInterface ? binding.isStatic() ? MethodHandleRefKindInvokeStatic : binding.isPrivate() ? MethodHandleRefKindInvokeSpecial : MethodHandleRefKindInvokeInterface
    : binding.isConstructor() ? MethodHandleRefKindNewInvokeSpecial
    : binding.isStatic() ? MethodHandleRefKindInvokeStatic
    : MethodHandleRefKindInvokeVirtual;

    return literalIndexForMethodHandle(referenceKind, binding.declaringClass, binding.selector, binding.signature(), isInterface);
}

we basically add an extra section to the ternary expression that checks whether the target binding is private, and if so use invokespecial:

public int literalIndexForMethodHandle(MethodBinding binding) {
  boolean isInterface = binding.declaringClass.isInterface();
  int referenceKind =
    isInterface ? binding.isStatic() ? MethodHandleRefKindInvokeStatic : binding.isPrivate() ? MethodHandleRefKindInvokeSpecial : MethodHandleRefKindInvokeInterface
    : binding.isConstructor() ? MethodHandleRefKindNewInvokeSpecial
    : binding.isStatic() ? MethodHandleRefKindInvokeStatic
    : binding.isPrivate() ? MethodHandleRefKindInvokeSpecial // NEWLINE
    : MethodHandleRefKindInvokeVirtual;

    return literalIndexForMethodHandle(referenceKind, binding.declaringClass, binding.selector, binding.signature(), isInterface);
}

This passes this test and continues to pass all existing tests.

Interestingly this is actually going bang because the lambda is in a constructor. If the lambda was in a regular method JDT will still generate different output to javac (invokevirtual vs invokespecial) but it won&apos;t fail.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2431306</commentid>
    <comment_count>3</comment_count>
      <attachid>245308</attachid>
    <who name="Andrew Clement">aclement</who>
    <bug_when>2014-07-23 16:07:42 -0400</bug_when>
    <thetext>Created attachment 245308
Patch to add test cases and fix mentioned in previous comment</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2431419</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-07-24 01:56:48 -0400</bug_when>
    <thetext>Fix looks good, Thanks Andy. 

Released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=ee5e3843269e8af70318f7535175e87d19c752b4.

Jay, perhaps we should backport this to 4.4.1</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2431422</commentid>
    <comment_count>5</comment_count>
    <who name="Tobias Gierke">tobias.gierke</who>
    <bug_when>2014-07-24 02:38:58 -0400</bug_when>
    <thetext>Please backport the fix to 4.4.1. This is breaking applications that rely heavily on serialization (for example applications that are using Apache Wicket).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2431425</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-07-24 02:41:55 -0400</bug_when>
    <thetext>Reopening to back port, Jay confirm agreement.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2431657</commentid>
    <comment_count>7</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-07-24 10:23:06 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #6)
&gt; Reopening to back port, Jay confirm agreement.

Fine by me.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2435015</commentid>
    <comment_count>8</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-08-04 01:14:43 -0400</bug_when>
    <thetext>Released in R4_4_maintenance:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=R4_4_maintenance&amp;id=5d9ab3c35b604994d7f3bd7c1c70c17649f1325e</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2435530</commentid>
    <comment_count>9</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-08-05 04:50:43 -0400</bug_when>
    <thetext>Verified for 4.5 M1 using Version: Mars (4.5)
Build id: I20140804-2000</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2435762</commentid>
    <comment_count>10</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-08-05 09:57:25 -0400</bug_when>
    <thetext>Need to be &apos;VERIFIED&apos; as part of 4.4.1 test cycle.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2444767</commentid>
    <comment_count>11</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-08-28 05:44:57 -0400</bug_when>
    <thetext>Verified for 4.4.1 with build M20140827-0800.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>245308</attachid>
            <date>2014-07-23 16:07:00 -0400</date>
            <delta_ts>2014-07-23 16:07:42 -0400</delta_ts>
            <desc>Patch to add test cases and fix mentioned in previous comment</desc>
            <filename>0001-Bug-439889-1.8-compiler-lambda-Deserializing-lambda-.patch</filename>
            <type>text/plain</type>
            <size>6953</size>
            <attacher name="Andrew Clement">aclement</attacher>
            
              <data encoding="base64">RnJvbSBlMWJiZWM4MjQ3MTdiNDk4YTRlMmRmNTM2NjdiYzIwODI2YmNiOWNkIE1vbiBTZXAgMTcg
MDA6MDA6MDAgMjAwMQpGcm9tOiBBbmR5IENsZW1lbnQgPGFjbGVtZW50QGdvcGl2b3RhbC5jb20+
CkRhdGU6IFdlZCwgMjMgSnVsIDIwMTQgMTM6MDM6MTcgLTA3MDAKU3ViamVjdDogW1BBVENIXSBC
dWcgNDM5ODg5IC0gWzEuOF1bY29tcGlsZXJdIFtsYW1iZGFdIERlc2VyaWFsaXppbmcgbGFtYmRh
CiBmYWlscyB3aXRoIElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbjogJ0ludmFsaWQgbGFtYmRhIGRl
c2VyaWFsaXphdGlvbicKCi0tLQogLi4uL3JlZ3Jlc3Npb24vU2VyaWFsaXphYmxlTGFtYmRhVGVz
dC5qYXZhICAgICAgICAgfCA4MCArKysrKysrKysrKysrKysrKysrKysrCiAuLi4vaW50ZXJuYWwv
Y29tcGlsZXIvY29kZWdlbi9Db25zdGFudFBvb2wuamF2YSAgICB8ICAyICsKIDIgZmlsZXMgY2hh
bmdlZCwgODIgaW5zZXJ0aW9ucygrKQoKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
LnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9y
ZWdyZXNzaW9uL1NlcmlhbGl6YWJsZUxhbWJkYVRlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxl
ci9yZWdyZXNzaW9uL1NlcmlhbGl6YWJsZUxhbWJkYVRlc3QuamF2YQppbmRleCAxMzUwZTI4Li45
NGYxZDYxIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9TZXJpYWxp
emFibGVMYW1iZGFUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29t
cGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24v
U2VyaWFsaXphYmxlTGFtYmRhVGVzdC5qYXZhCkBAIC04LDYgKzgsNyBAQAogICogQ29udHJpYnV0
b3JzOgogICogICAgICAgIEFuZHkgQ2xlbWVudCAoR29QaXZvdGFsLCBJbmMpIGFjbGVtZW50QGdv
cGl2b3RhbC5jb20gLSBDb250cmlidXRpb25zIGZvcgogICogICAgICAgICAgICAgICAgICAgICAg
ICAgIEJ1ZyA0MDUxMDQgLSBbMS44XVtjb21waWxlcl1bY29kZWdlbl0gSW1wbGVtZW50IHN1cHBv
cnQgZm9yIHNlcmlhbGl6ZWFibGUgbGFtYmRhcworICogICAgICAgICAgICAgICAgICAgICAgICAg
IEJ1ZyA0Mzk4ODkgLSBbMS44XVtjb21waWxlcl0gW2xhbWJkYV0gRGVzZXJpYWxpemluZyBsYW1i
ZGEgZmFpbHMgd2l0aCBJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb246ICJJbnZhbGlkIGxhbWJkYSBk
ZXNlcmlhbGl6YXRpb24iCiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KIHBhY2thZ2Ugb3JnLmVj
bGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIucmVncmVzc2lvbjsKIApAQCAtMTIzNCw2ICsx
MjM1LDg1IEBAIHB1YmxpYyBjbGFzcyBTZXJpYWxpemFibGVMYW1iZGFUZXN0IGV4dGVuZHMgQWJz
dHJhY3RSZWdyZXNzaW9uVGVzdCB7CiAJCQkJbnVsbCx0cnVlLAogCQkJCW5ldyBTdHJpbmdbXXsi
LURkdW1teSJ9KTsgLy8gTm90IHN1cmUsIHVubGVzcyB3ZSBmb3JjZSB0aGUgVk0gdG8gbm90IGJl
IHJldXNlZCBieSBwYXNzaW5nIGR1bW15IHZtIGFyZ3VtZW50LCB0aGUgZ2VuZXJhdGVkIHByb2dy
YW0gYWJvcnRzIG1pZHdheSB0aHJvdWdoIGl0cyBleGVjdXRpb24uCiAJfQorCQorCS8vIGh0dHBz
Oi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00Mzk4ODkgLSBbMS44XVtj
b21waWxlcl0gW2xhbWJkYV0gRGVzZXJpYWxpemluZyBsYW1iZGEgZmFpbHMgd2l0aCBJbGxlZ2Fs
QXJndW1lbnRFeGNlcHRpb246ICJJbnZhbGlkIGxhbWJkYSBkZXNlcmlhbGl6YXRpb24iCisJcHVi
bGljIHZvaWQgdGVzdDQzOTg4OSgpIHRocm93cyBFeGNlcHRpb24geworCQl0aGlzLnJ1bkNvbmZv
cm1UZXN0KAorCQkJCW5ldyBTdHJpbmdbXXsKKwkJCQkJIlNlcmlhbGl6YXRpb25UZXN0LmphdmEi
LAorCQkJCQkiaW1wb3J0IGphdmEuaW8uKjtcbiIrCisJCQkJCSJcbiIrCisJCQkJCSJwdWJsaWMg
Y2xhc3MgU2VyaWFsaXphdGlvblRlc3QgaW1wbGVtZW50cyBTZXJpYWxpemFibGUge1xuIisKKwkJ
CQkJIglpbnRlcmZhY2UgU2VyaWFsaXphYmxlUnVubmFibGUgZXh0ZW5kcyBSdW5uYWJsZSwgU2Vy
aWFsaXphYmxlIHtcbiIrCisJCQkJCSIJfVxuIisKKwkJCQkJIlxuIisKKwkJCQkJIglTZXJpYWxp
emFibGVSdW5uYWJsZSBydW5uYWJsZTtcbiIrCisJCQkJCSJcbiIrCisJCQkJCSIJcHVibGljIFNl
cmlhbGl6YXRpb25UZXN0KCkge1xuIisKKwkJCQkJIgkJZmluYWwgU2VyaWFsaXphdGlvblRlc3Qg
c2VsZiA9IHRoaXM7XG4iKworCQkJCQkiCQkvLyBydW5uYWJsZSA9ICgpIC0+IHNlbGYuZG9Tb21l
dGhpbmcoKTtcbiIrCisJCQkJCSIJCXJ1bm5hYmxlID0gKCkgLT4gdGhpcy5kb1NvbWV0aGluZygp
O1xuIisgLy8gcmVzdWx0cyBpbiB0aGlzIG1ldGhvZCBoYW5kbGU6ICMxNjYgaW52b2tlc3BlY2lh
bCBTZXJpYWxpemF0aW9uVGVzdC5sYW1iZGEkMDooKVYKKwkJCQkJIiAgICAgICB9XG4iKworCQkJ
CQkiXG4iKworCQkJCQkiCXB1YmxpYyB2b2lkIGRvU29tZXRoaW5nKCkge1xuIisKKwkJCQkJIgkJ
U3lzdGVtLm91dC5wcmludGxuKFwiSGVsbG8sd29ybGQhXCIpO1xuIisKKwkJCQkJIgl9XG4iKwor
CQkJCQkiXG4iKworCQkJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3Mp
IHRocm93cyBFeGNlcHRpb24ge1xuIisKKwkJCQkJIgkJZmluYWwgQnl0ZUFycmF5T3V0cHV0U3Ry
ZWFtIGJ1ZmZlciA9IG5ldyBCeXRlQXJyYXlPdXRwdXRTdHJlYW0oKTtcbiIrCisJCQkJCSIJCXRy
eSAoT2JqZWN0T3V0cHV0U3RyZWFtIG91dCA9IG5ldyBPYmplY3RPdXRwdXRTdHJlYW0oYnVmZmVy
KSApIHtcbiIrCisJCQkJCSIJCQlvdXQud3JpdGVPYmplY3QobmV3IFNlcmlhbGl6YXRpb25UZXN0
KCkpO1xuIisKKwkJCQkJIgkJfVxuIisKKwkJCQkJIgkJdHJ5IChPYmplY3RJbnB1dFN0cmVhbSBp
biA9IG5ldyBPYmplY3RJbnB1dFN0cmVhbSggbmV3IEJ5dGVBcnJheUlucHV0U3RyZWFtKGJ1ZmZl
ci50b0J5dGVBcnJheSgpKSkpIHtcbiIrCisJCQkJCSIJCQlmaW5hbCBTZXJpYWxpemF0aW9uVGVz
dCBzID0gKFNlcmlhbGl6YXRpb25UZXN0KSBpbi5yZWFkT2JqZWN0KCk7XG4iKworCQkJCQkiCQkJ
cy5kb1NvbWV0aGluZygpO1xuIisKKwkJCQkJIgkJfVxuIisKKwkJCQkJIgl9XG4iKworCQkJCQki
fVxuIgorCQkJCQl9LAorCQkJCQkiSGVsbG8sd29ybGQhIiwKKwkJCQkJbnVsbCx0cnVlLAorCQkJ
CQluZXcgU3RyaW5nW117Ii1EZHVtbXkifSk7IC8vIE5vdCBzdXJlLCB1bmxlc3Mgd2UgZm9yY2Ug
dGhlIFZNIHRvIG5vdCBiZSByZXVzZWQgYnkgcGFzc2luZyBkdW1teSB2bSBhcmd1bWVudCwgdGhl
IGdlbmVyYXRlZCBwcm9ncmFtIGFib3J0cyBtaWR3YXkgdGhyb3VnaCBpdHMgZXhlY3V0aW9uLgor
CX0KKwkKKwlwdWJsaWMgdm9pZCB0ZXN0NDM5ODg5XzIoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJ
dGhpcy5ydW5Db25mb3JtVGVzdCgKKwkJCQluZXcgU3RyaW5nW117CisJCQkJCSJTZXJpYWxpemF0
aW9uVGVzdC5qYXZhIiwKKwkJCQkJImltcG9ydCBqYXZhLmlvLio7XG4iKworCQkJCQkiXG4iKwor
CQkJCQkicHVibGljIGNsYXNzIFNlcmlhbGl6YXRpb25UZXN0IGltcGxlbWVudHMgU2VyaWFsaXph
YmxlIHtcbiIrCisJCQkJCSIJaW50ZXJmYWNlIFNlcmlhbGl6YWJsZVJ1bm5hYmxlIGV4dGVuZHMg
UnVubmFibGUsIFNlcmlhbGl6YWJsZSB7XG4iKworCQkJCQkiCX1cbiIrCisJCQkJCSJcbiIrCisJ
CQkJCSIJU2VyaWFsaXphYmxlUnVubmFibGUgcnVubmFibGU7XG4iKworCQkJCQkiXG4iKworCQkJ
CQkiCXB1YmxpYyBTZXJpYWxpemF0aW9uVGVzdCgpIHtcbiIrCisJCQkJCSIJCWZpbmFsIFNlcmlh
bGl6YXRpb25UZXN0IHNlbGYgPSB0aGlzO1xuIisKKwkJCQkJIgkJcnVubmFibGUgPSAoKSAtPiBz
ZWxmLmRvU29tZXRoaW5nKCk7XG4iKyAvLyByZXN1bHRzIGluIHRoaXMgbWV0aG9kIGhhbmRsZTog
IzE2OCBpbnZva2VzdGF0aWMgU2VyaWFsaXphdGlvblRlc3QubGFtYmRhJDA6KExTZXJpYWxpemF0
aW9uVGVzdDspVgorCQkJCQkiCQkvLyBydW5uYWJsZSA9ICgpIC0+IHRoaXMuZG9Tb21ldGhpbmco
KTtcbiIrCisJCQkJCSIgICAgICAgfVxuIisKKwkJCQkJIlxuIisKKwkJCQkJIglwdWJsaWMgdm9p
ZCBkb1NvbWV0aGluZygpIHtcbiIrCisJCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihcIkhlbGxv
LHdvcmxkIVwiKTtcbiIrCisJCQkJCSIJfVxuIisKKwkJCQkJIlxuIisKKwkJCQkJIglwdWJsaWMg
c3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB0aHJvd3MgRXhjZXB0aW9uIHtcbiIrCisJ
CQkJCSIJCWZpbmFsIEJ5dGVBcnJheU91dHB1dFN0cmVhbSBidWZmZXIgPSBuZXcgQnl0ZUFycmF5
T3V0cHV0U3RyZWFtKCk7XG4iKworCQkJCQkiCQl0cnkgKE9iamVjdE91dHB1dFN0cmVhbSBvdXQg
PSBuZXcgT2JqZWN0T3V0cHV0U3RyZWFtKGJ1ZmZlcikgKSB7XG4iKworCQkJCQkiCQkJb3V0Lndy
aXRlT2JqZWN0KG5ldyBTZXJpYWxpemF0aW9uVGVzdCgpKTtcbiIrCisJCQkJCSIJCX1cbiIrCisJ
CQkJCSIJCXRyeSAoT2JqZWN0SW5wdXRTdHJlYW0gaW4gPSBuZXcgT2JqZWN0SW5wdXRTdHJlYW0o
IG5ldyBCeXRlQXJyYXlJbnB1dFN0cmVhbShidWZmZXIudG9CeXRlQXJyYXkoKSkpKSB7XG4iKwor
CQkJCQkiCQkJZmluYWwgU2VyaWFsaXphdGlvblRlc3QgcyA9IChTZXJpYWxpemF0aW9uVGVzdCkg
aW4ucmVhZE9iamVjdCgpO1xuIisKKwkJCQkJIgkJCXMuZG9Tb21ldGhpbmcoKTtcbiIrCisJCQkJ
CSIJCX1cbiIrCisJCQkJCSIJfVxuIisKKwkJCQkJIn1cbiIKKwkJCQkJfSwKKwkJCQkJIkhlbGxv
LHdvcmxkISIsCisJCQkJCW51bGwsdHJ1ZSwKKwkJCQkJbmV3IFN0cmluZ1tdeyItRGR1bW15In0p
OyAvLyBOb3Qgc3VyZSwgdW5sZXNzIHdlIGZvcmNlIHRoZSBWTSB0byBub3QgYmUgcmV1c2VkIGJ5
IHBhc3NpbmcgZHVtbXkgdm0gYXJndW1lbnQsIHRoZSBnZW5lcmF0ZWQgcHJvZ3JhbSBhYm9ydHMg
bWlkd2F5IHRocm91Z2ggaXRzIGV4ZWN1dGlvbi4KKwl9CiAJLy8gLS0tCiAJCiAJcHJpdmF0ZSB2
b2lkIGNoZWNrRXhwZWN0ZWQoU3RyaW5nIGV4cGVjdGVkLCBTdHJpbmcgYWN0dWFsKSB7CmRpZmYg
LS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvY29kZWdlbi9Db25zdGFudFBvb2wuamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9jb2RlZ2Vu
L0NvbnN0YW50UG9vbC5qYXZhCmluZGV4IGEwOTM2OWQuLmJjZDM0NWYgMTAwNjQ0Ci0tLSBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9jb2RlZ2VuL0NvbnN0YW50UG9vbC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9jb2RlZ2VuL0NvbnN0
YW50UG9vbC5qYXZhCkBAIC0xNCw2ICsxNCw3IEBACiAgKgkJCQkJCQlCdWcgNDEyMTUzIC0gWzEu
OF1bY29tcGlsZXJdIENoZWNrIHZhbGlkaXR5IG9mIGFubm90YXRpb25zIHdoaWNoIG1heSBiZSBy
ZXBlYXRhYmxlCiAgKiAgICAgQW5keSBDbGVtZW50IChHb1Bpdm90YWwsIEluYykgYWNsZW1lbnRA
Z29waXZvdGFsLmNvbSAtIENvbnRyaWJ1dGlvbnMgZm9yCiAgKiAgICAgICAgICAgICAgICAgICAg
ICAgICAgQnVnIDQwNTEwNCAtIFsxLjhdW2NvbXBpbGVyXVtjb2RlZ2VuXSBJbXBsZW1lbnQgc3Vw
cG9ydCBmb3Igc2VyaWFsaXplYWJsZSBsYW1iZGFzCisgKiAgICAgICAgICAgICAgICAgICAgICAg
ICAgQnVnIDQzOTg4OSAtIFsxLjhdW2NvbXBpbGVyXSBbbGFtYmRhXSBEZXNlcmlhbGl6aW5nIGxh
bWJkYSBmYWlscyB3aXRoIElsbGVnYWxBcmd1bWVudEV4Y2VwdGlvbjogIkludmFsaWQgbGFtYmRh
IGRlc2VyaWFsaXphdGlvbiIKICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwogcGFja2FnZSBvcmcu
ZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuY29kZWdlbjsKIApAQCAtNzg2LDYgKzc4Nyw3
IEBAIHB1YmxpYyBjbGFzcyBDb25zdGFudFBvb2wgaW1wbGVtZW50cyBDbGFzc0ZpbGVDb25zdGFu
dHMsIFR5cGVJZHMgewogCQkJaXNJbnRlcmZhY2UgPyBiaW5kaW5nLmlzU3RhdGljKCkgPyBNZXRo
b2RIYW5kbGVSZWZLaW5kSW52b2tlU3RhdGljIDogYmluZGluZy5pc1ByaXZhdGUoKSA/IE1ldGhv
ZEhhbmRsZVJlZktpbmRJbnZva2VTcGVjaWFsIDogTWV0aG9kSGFuZGxlUmVmS2luZEludm9rZUlu
dGVyZmFjZQogCQkJOiBiaW5kaW5nLmlzQ29uc3RydWN0b3IoKSA/IE1ldGhvZEhhbmRsZVJlZktp
bmROZXdJbnZva2VTcGVjaWFsCiAJCQk6IGJpbmRpbmcuaXNTdGF0aWMoKSA/IE1ldGhvZEhhbmRs
ZVJlZktpbmRJbnZva2VTdGF0aWMKKwkJCTogYmluZGluZy5pc1ByaXZhdGUoKSA/IE1ldGhvZEhh
bmRsZVJlZktpbmRJbnZva2VTcGVjaWFsCiAJCQk6IE1ldGhvZEhhbmRsZVJlZktpbmRJbnZva2VW
aXJ0dWFsOwogCQkKIAkJcmV0dXJuIGxpdGVyYWxJbmRleEZvck1ldGhvZEhhbmRsZShyZWZlcmVu
Y2VLaW5kLCBiaW5kaW5nLmRlY2xhcmluZ0NsYXNzLCBiaW5kaW5nLnNlbGVjdG9yLCBiaW5kaW5n
LnNpZ25hdHVyZSgpLCBpc0ludGVyZmFjZSk7Ci0tIAoxLjguNS4yIChBcHBsZSBHaXQtNDgpCgo=
</data>

          </attachment>
      

    </bug>

</bugzilla>