<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>436350</bug_id>
          
          <creation_ts>2014-06-02 07:08:00 -0400</creation_ts>
          <short_desc>[1.8][compiler] Missing bridge method in interface results in AbstractMethodError</short_desc>
          <delta_ts>2014-08-28 07:06:35 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>Macintosh</rep_platform>
          <op_sys>Mac OS X</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.4.1</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Tobias Grasl">toby</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>jarthana</cc>
    
    <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
    
    <cc>toby</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="63311"
          type_id="1"
          status="+"
          setter="jarthana"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2411169</commentid>
    <comment_count>0</comment_count>
      <attachid>243774</attachid>
    <who name="Tobias Grasl">toby</who>
    <bug_when>2014-06-02 07:08:52 -0400</bug_when>
    <thetext>Created attachment 243774
Code that demonstrates the bug

In the attached sample I have a Generic Interface which accepts generic objects, and a specialised subinterface which accepts specialised objects, and provides a default method for the generic interface&apos;s method, which delegates to the specialised implementation.

If I implement the specialised method in an anonymous class, and pass it to some code that calls the generic method, then the code correctly executes and passed through to the specialised method.

However, if, rather than implementing the anonymous class, I use a lambda expression, the code compiles fine, but at runtime I get an AbstractMethodError &quot;java.lang.AbstractMethodError: Method LambdaBugDemo$$Lambda$1.reduce(Ljava/util/Iterator;)Ljava/lang/Object&quot;. Apparently, the default method is not picked up.

This code compiles and runs fine on Oracle JDK 1.8_05 for OsX. It compiles fine in eclipse, but the generated code throughs the error as specified.

The attached java file contains a full demonstration of the problem.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2411170</commentid>
    <comment_count>1</comment_count>
    <who name="Tobias Grasl">toby</who>
    <bug_when>2014-06-02 07:09:28 -0400</bug_when>
    <thetext>I should add, I tested it in Kepler SR2 and Luna.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2435429</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-08-05 01:52:33 -0400</bug_when>
    <thetext>Retargetting to M2, as I don&apos;t expect to finish work on these before this week&apos;s build(s)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2443296</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-08-26 01:09:39 -0400</bug_when>
    <thetext>Much shorter/simpler test case that still shows the problem: 

// --
public class X {
	public static void main(String[] args) {
		reduce((DoubleInterface) i -&gt; {
			return 0;
		});
	}
	static Double reduce(GenericInterface&lt;Double&gt; r) {
		return r.reduce(null);
	}
}
interface GenericInterface&lt;T&gt; {
	T reduce(Integer i);
}
interface DoubleInterface extends GenericInterface&lt;Double&gt; {
	default Double reduce(Integer i) {
		return 0.0;
	}
	double reduce(String s);
}
// --</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2443297</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-08-26 01:18:47 -0400</bug_when>
    <thetext>Interface DoubleInterface is missing a bridge to accommodate for the difference
in return type erasure. In the case of the anonymous class, this bridge gets
emitted into the class. Emitting it into the interface would be the right thing
to accommodate for the lambda case. Looking into it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2443301</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-08-26 01:30:08 -0400</bug_when>
    <thetext>*** Bug 421747 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2443318</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-08-26 02:18:13 -0400</bug_when>
    <thetext>Fix and test released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=1412d255f0ba497d3ea8f98ac07c17128ae17670</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2443319</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-08-26 02:18:45 -0400</bug_when>
    <thetext>Jay, I think this should be backported to SR1. Please review.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2443695</commentid>
    <comment_count>8</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-08-26 12:49:54 -0400</bug_when>
    <thetext>Patch looks safe for SR1 to me.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2443696</commentid>
    <comment_count>9</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-08-26 12:50:51 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #8)
&gt; Patch looks safe for SR1 to me.

Tests ran fine locally. Will release after looking at tonight&apos;s I build result.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2443916</commentid>
    <comment_count>10</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-08-27 00:09:28 -0400</bug_when>
    <thetext>Released in R4_4_maintenance.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2444749</commentid>
    <comment_count>11</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-08-28 05:13:17 -0400</bug_when>
    <thetext>Verified for 4.4.1 with build M20140827-0800.

and

Verified for 4.5 M2 with build N20140827-2000.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>243774</attachid>
            <date>2014-06-02 07:08:00 -0400</date>
            <delta_ts>2014-06-02 07:08:52 -0400</delta_ts>
            <desc>Code that demonstrates the bug</desc>
            <filename>LambdaBugDemo.java</filename>
            <type>application/octet-stream</type>
            <size>1952</size>
            <attacher name="Tobias Grasl">toby</attacher>
            
              <data encoding="base64">aW1wb3J0IGphdmEudXRpbC5JdGVyYXRvcjsKaW1wb3J0IGphdmEudXRpbC5QcmltaXRpdmVJdGVy
YXRvcjsKaW1wb3J0IGphdmEudXRpbC5QcmltaXRpdmVJdGVyYXRvci5PZkRvdWJsZTsKCi8qKgog
KiAKICovCgovKioKICogQGF1dGhvciBUb2JpYXMgR3Jhc2wKICovCnB1YmxpYyBjbGFzcyBMYW1i
ZGFCdWdEZW1vCnsKCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpCgl7CgkJ
ZmluYWwgZG91YmxlW10gZG91YmxlcyA9IG5ldyBkb3VibGVbXXsxLDIsM307CgkJCgkJT2ZEb3Vi
bGUgZG91YmxlSXRlcmF0b3IgPSBuZXcgRG91YmxlQXJyYXlJdGVyYXRvcihkb3VibGVzKTsKCQkK
CQlEb3VibGUgdmFsdWUgPSBuZXcgUmVkdWNlcjxEb3VibGU+KCkucmVkdWNlKGRvdWJsZUl0ZXJh
dG9yLCBuZXcgRG91YmxlSW50ZXJmYWNlKCkKCQl7CgkJCUBPdmVycmlkZQoJCQlwdWJsaWMgZG91
YmxlIHJlZHVjZShPZkRvdWJsZSBpdGVyYXRvcl8pCgkJCXsKCQkJCWRvdWJsZSBzdW0gPSAwOwoJ
CQkJCgkJCQl3aGlsZShpdGVyYXRvcl8uaGFzTmV4dCgpKQoJCQkJewoJCQkJCXN1bSArPSBpdGVy
YXRvcl8ubmV4dERvdWJsZSgpOwoJCQkJfQoJCQkJcmV0dXJuIHN1bTsKCQkJfQoJCX0pOwoJCQkK
CQlTeXN0ZW0ub3V0LnByaW50bG4oIkFub255bW91cyBjbGFzcyB2YWx1ZTogIit2YWx1ZSk7CgkJ
CgkJZG91YmxlSXRlcmF0b3IgPSBuZXcgRG91YmxlQXJyYXlJdGVyYXRvcihkb3VibGVzKTsKCQkK
CQl2YWx1ZSA9IG5ldyBSZWR1Y2VyPERvdWJsZT4oKS5yZWR1Y2UoZG91YmxlSXRlcmF0b3IsIChE
b3VibGVJbnRlcmZhY2UpIGl0ZXJhdG9yXyAtPiB7CgkJCQoJCQlkb3VibGUgc3VtID0gMDsKCQkJ
CgkJCXdoaWxlKGl0ZXJhdG9yXy5oYXNOZXh0KCkpCgkJCXsKCQkJCXN1bSArPSBpdGVyYXRvcl8u
bmV4dERvdWJsZSgpOwoJCQl9CgkJCXJldHVybiBzdW07CgkJfSk7CgkJCgkJU3lzdGVtLm91dC5w
cmludGxuKCJMYW1iZGEgZXhwcmVzc2lvbiB2YWx1ZTogIit2YWx1ZSk7Cgl9CgkKCXByaXZhdGUg
c3RhdGljIGNsYXNzIERvdWJsZUFycmF5SXRlcmF0b3IgaW1wbGVtZW50cyBQcmltaXRpdmVJdGVy
YXRvci5PZkRvdWJsZQoJewoJCWludCBpbmRleCA9IDA7CgkJcHJpdmF0ZSBkb3VibGVbXSBfZG91
YmxlczsKCQkKCQlwdWJsaWMgRG91YmxlQXJyYXlJdGVyYXRvcihkb3VibGVbXSBkb3VibGVzXykK
CQl7CgkJCV9kb3VibGVzID0gZG91Ymxlc187CgkJfQoKCQlAT3ZlcnJpZGUKCQlwdWJsaWMgYm9v
bGVhbiBoYXNOZXh0KCkKCQl7CgkJCXJldHVybiBpbmRleCA8IF9kb3VibGVzLmxlbmd0aDsKCQl9
CgkJCgkJQE92ZXJyaWRlCgkJcHVibGljIGRvdWJsZSBuZXh0RG91YmxlKCkKCQl7CgkJCXJldHVy
biBfZG91Ymxlc1tpbmRleCsrXTsKCQl9Cgl9OwoJCglpbnRlcmZhY2UgR2VuZXJpY0ludGVyZmFj
ZTxUPgoJewoJCVQgcmVkdWNlKEl0ZXJhdG9yPFQ+IGl0ZXJhdG9yXyk7Cgl9CgkKCWludGVyZmFj
ZSBEb3VibGVJbnRlcmZhY2UgZXh0ZW5kcyBHZW5lcmljSW50ZXJmYWNlPERvdWJsZT4KCXsKCQlk
ZWZhdWx0IERvdWJsZSByZWR1Y2UoSXRlcmF0b3I8RG91YmxlPiBpdGVyYXRvcl8pCgkJewoJCQlp
ZihpdGVyYXRvcl8gaW5zdGFuY2VvZiBQcmltaXRpdmVJdGVyYXRvci5PZkRvdWJsZSkKCQkJewoJ
CQkJcmV0dXJuIHJlZHVjZSgoUHJpbWl0aXZlSXRlcmF0b3IuT2ZEb3VibGUpaXRlcmF0b3JfKTsK
CQkJfQoJCQlyZXR1cm4gRG91YmxlLk5hTjsKCQl9OwoJCQoJCWRvdWJsZSByZWR1Y2UoUHJpbWl0
aXZlSXRlcmF0b3IuT2ZEb3VibGUgaXRlcmF0b3JfKTsKCX0KCQoJc3RhdGljIGNsYXNzIFJlZHVj
ZXI8VD4KCXsKCQlUIHJlZHVjZShJdGVyYXRvcjxUPiBpdGVyYXRvcl8sIEdlbmVyaWNJbnRlcmZh
Y2U8VD4gcmVkdWN0aW9uXykKCQl7CgkJCXJldHVybiByZWR1Y3Rpb25fLnJlZHVjZShpdGVyYXRv
cl8pOwoJCX0KCX0KfQo=
</data>

          </attachment>
      

    </bug>

</bugzilla>