<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>432110</bug_id>
          
          <creation_ts>2014-04-06 14:13:00 -0400</creation_ts>
          <short_desc>[1.8][compiler] nested lambda type incorrectly inferred vs javac</short_desc>
          <delta_ts>2015-01-20 04:01:52 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3.2</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.4.2</target_milestone>
          <dependson>429430</dependson>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Ray Kelm">kelmray</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>daniel.dietrich</cc>
    
    <cc>eclipse</cc>
    
    <cc>jarthana</cc>
    
    <cc>joerg83reichert</cc>
    
    <cc>manpalat</cc>
    
    <cc>markus_keller</cc>
    
    <cc>p_ansell</cc>
    
    <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>tobias.gierke</cc>
          
          <votes>2</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2385165</commentid>
    <comment_count>0</comment_count>
    <who name="Ray Kelm">kelmray</who>
    <bug_when>2014-04-06 14:13:24 -0400</bug_when>
    <thetext>Eclipse shows an error in the flatten2 method:

Type mismatch: cannot convert from Stream&lt;Object&gt; to Stream&lt;? extends Integer&gt;

The editor also shows this in the hover for the bug marker:

Multiple markers at this line
  - Type mismatch: cannot convert from Stream&lt;Object&gt; to Stream&lt;? extends Integer&gt;
  - (Recovered) Internal inconsistency detected during lambda shape analysis

javac compiles the code with no warnings or errors.

$ java -version
java version &quot;1.8.0&quot;
Java(TM) SE Runtime Environment (build 1.8.0-b132)
Java HotSpot(TM) 64-Bit Server VM (build 25.0-b70, mixed mode)
$ javac -version
javac 1.8.0


Eclipse Java EE IDE for Web Developers.

Version: Kepler Service Release 2
Build id: 20140224-0627

With:

  Eclipse JDT (Java Development Tools) Patch with Java 8 support (for Kepler SR2)	1.0.0.v20140317-1956	org.eclipse.jdt.java8patch.feature.group	Eclipse.org
  Eclipse PDE (Plug-in Development Environment) Patch with Java 8 support (for Kepler SR2)	1.0.0.v20140317-1956	org.eclipse.pde.java8patch.feature.group	Eclipse.org

Demonstration code follows
---

import java.util.List;
import java.util.function.Function;
import java.util.stream.Stream;

class Bug
{
    // fully inline
    // compiles successfully
    Stream&lt;? extends Integer&gt; flatten1(
        final Stream&lt;List&lt;Integer&gt;&gt; input)
    {
        return input.flatMap(item -&gt; item.stream().map(value -&gt; value));
    }

    // lambda using braces
    // compiles with error in eclipse, successfully with javac
    Stream&lt;? extends Integer&gt; flatten2(
        final Stream&lt;List&lt;Integer&gt;&gt; input)
    {
        return input.flatMap(item -&gt; {
            return item.stream().map(value -&gt; value);
        });
    }

    // without map step
    // compiles successfully
    Stream&lt;? extends Integer&gt; flatten3(
        final Stream&lt;List&lt;Integer&gt;&gt; input)
    {
        return input.flatMap(item -&gt; {
            return item.stream();
        });
    }

    // with map step, but not inline
    // compiles successfully
    Stream&lt;? extends Integer&gt; flatten4(
        final Stream&lt;List&lt;Integer&gt;&gt; input)
    {
        return input.flatMap(item -&gt; {
            final Function&lt;? super Integer, ? extends Integer&gt; mapper = value -&gt; value;
            return item.stream().map(mapper);
        });
    }

    // with map step, but outer lambda is not inline
    // compiles successfully
    Stream&lt;? extends Integer&gt; flatten5(
        final Stream&lt;List&lt;Integer&gt;&gt; input)
    {
        final Function&lt;? super List&lt;Integer&gt;, ? extends Stream&lt;? extends Integer&gt;&gt; func = item -&gt; {
            return item.stream().map(value -&gt; value);
        };
        return input.flatMap(func);
    }
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2385166</commentid>
    <comment_count>1</comment_count>
    <who name="Ray Kelm">kelmray</who>
    <bug_when>2014-04-06 14:16:06 -0400</bug_when>
    <thetext>Seems similar to https://bugs.eclipse.org/bugs/show_bug.cgi?id=426676, but with slightly different conditions.

In this case, it matters whether the lambda uses braces or not.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2385235</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-04-07 02:22:53 -0400</bug_when>
    <thetext>Tentatively targetting for M7. Stephan, thanks for taking a look, if it leaks
outside of part G, please reassign to me.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2394340</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-04-28 17:54:53 -0400</bug_when>
    <thetext>This warning:
  &quot;(Recovered) Internal inconsistency detected during lambda shape analysis&quot;
is raised from an internal NPE in LE.analyseCode(..), right at the beginning when evaluating
	this.binding.thrownExceptions,
where this.binding is null.

The NPE is caught and as a result we do *not* set LE.valueCompatible, which looks wrong for this:
   (&lt;no type&gt; item) -&gt; {
      return item.stream().map((&lt;no type&gt; value) -&gt; value);
   }

Let&apos;s see if that impacts the inference ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2394344</commentid>
    <comment_count>4</comment_count>
      <attachid>242427</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-04-28 18:11:20 -0400</bug_when>
    <thetext>Created attachment 242427
draft patch

Yep, inference fails because we erroneously believe the lambda is not value compatible.

Srikanth, do you want to glance over the tiny patch that fixes the issue?

When analyseCode(..) throws an exception, doesNotCompleteNormally() simply preserves the previous value of this.valueCompatible. However, for a Block lambda, we don&apos;t really have a previous value. That&apos;s what I&apos;m trying to fix with this patch...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2394389</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-04-29 01:49:07 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #4)
&gt; Created attachment 242427 [details]
&gt; draft patch
&gt; 
&gt; Yep, inference fails because we erroneously believe the lambda is not value
&gt; compatible.
&gt; 
&gt; Srikanth, do you want to glance over the tiny patch that fixes the issue?
&gt; 
&gt; When analyseCode(..) throws an exception, doesNotCompleteNormally() simply
&gt; preserves the previous value of this.valueCompatible. However, for a Block
&gt; lambda, we don&apos;t really have a previous value. That&apos;s what I&apos;m trying to fix
&gt; with this patch...

I think this fix is a step forward and can be done for M7, but I presume
you want to leave the bug open for a fuller fix that addresses the NPE post
M7 ? Why would this.binding == null ??

(I am OK with this being released for M7 as is, with the bug retargetted.)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2394576</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-04-29 05:58:00 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #5)
&gt; Why would this.binding == null ??

Sorry, my analysis was incomplete. The NPE happens at a nested lambda.
We are resolving this:

(&lt;no type&gt; item) -&gt; {
  return item.stream().map((&lt;no type&gt; value) -&gt; value);
}

When we get to resolving the lambda body this includes resolving the nested lambda &quot;value -&gt; value&quot;. Initially, we don&apos;t have a target type and hence take the early exit answering a new PolyTypeBinding.

While inside the outer inference we never get to the final inference for the call to map() including its lambda argument. Hence the null binding for the inner lambda.

This also illustrates why bug 429430 is a hard problem: we seem to be required to do full flow analysis even before we have the results from resolve. I don&apos;t readily see how this could ever be possible.

&gt; (I am OK with this being released for M7 as is, with the bug retargetted.)

That&apos;s what I&apos;ll do, thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2394934</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-04-29 11:53:13 -0400</bug_when>
    <thetext>Released the point fix via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=a7f5603b3c36eb77b904abb6fcbf6f113b2755cc

Retargetting for a more complete solution in 4.5

The dependency between bug 429430 and this bug could be seen in either direction ... just marking relation so we can address both issues in conjunction.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2427747</commentid>
    <comment_count>8</comment_count>
    <who name="Tobias Gierke">tobias.gierke</who>
    <bug_when>2014-07-15 04:30:36 -0400</bug_when>
    <thetext>Did the fix mentioned in the previous comment make it into the 4.4 release version ? I&apos;m experiencing a very similar issue (also involving nested lambdas/flatMap() and javac compiling the code without errors/warnings).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2427748</commentid>
    <comment_count>9</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-07-15 04:36:45 -0400</bug_when>
    <thetext>(In reply to Tobias Gierke from comment #8)
&gt; Did the fix mentioned in the previous comment make it into the 4.4 release
&gt; version ? I&apos;m experiencing a very similar issue (also involving nested
&gt; lambdas/flatMap() and javac compiling the code without errors/warnings).

Yes, I see this went in as early as I20140429-2000. So, it should be part of 4.4.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2427762</commentid>
    <comment_count>10</comment_count>
    <who name="Tobias Gierke">tobias.gierke</who>
    <bug_when>2014-07-15 05:16:55 -0400</bug_when>
    <thetext>I&apos;m assuming the issue described in this ticket has been fixed so I just filed bug 439594.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2429330</commentid>
    <comment_count>11</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-07-18 11:18:22 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #2)
&gt; Tentatively targetting for M7. Stephan, thanks for taking a look, if it leaks
&gt; outside of part G, please reassign to me.

Srikanth, any ideas how processing order can be improved?
See also the relation to bug 429430.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2435424</commentid>
    <comment_count>12</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-08-05 01:52:16 -0400</bug_when>
    <thetext>Retargetting to M2, as I don&apos;t expect to finish work on these before this week&apos;s build(s)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2444682</commentid>
    <comment_count>13</comment_count>
    <who name="Daniel Dietrich">daniel.dietrich</who>
    <bug_when>2014-08-28 03:29:25 -0400</bug_when>
    <thetext>+1

same here (mac, jdk1.8.0_20, eclipse luna)

- - - - - -8&lt; *snip* 8&lt;- - - - - -
import java.util.function.Function;

interface Test {

    // _warning_ produces a
    // &apos;(Recovered) Internal inconsistency detected during lambda shape analysis&apos;
    default void test() {
        testee().flatMap(_warning_ -&gt; {
            return result().map(s -&gt; 0);
        });
    }

    Either&lt;Integer, Integer&gt; testee();

    Either&lt;Integer, String&gt; result();

    static interface Either&lt;L, R&gt; {
        &lt;U&gt; Either&lt;L, U&gt; flatMap(Function&lt;? super R, Either&lt;L, U&gt;&gt; mapper);

        &lt;U&gt; Either&lt;L, U&gt; map(Function&lt;? super R, U&gt; mapper);
    }
}

- - - - - -8&lt; *snap* 8&lt;- - - - - -</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2445233</commentid>
    <comment_count>14</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-08-29 00:08:14 -0400</bug_when>
    <thetext>Fix and tests released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=c3cfcbf3735a569bd82b9e06ea31c818736eb0c6

This commit:

    - backs out the change from comment#7 - this fix is indeed a correct and
valid one, but is subsumed by the more general new fix shared by multiple
paths.

    - stops emitting the internal inconsistency message: this has served its
purpose and we understand the scenarios.

    - adds a new test to verify that the case in comment#13 compiles fine.
    
Basically, we run into the internal error while attempting to determine
value/void compatibility in the most pedantic manner. 99.99% of the time
we don&apos;t need this pedantic analysis and can fall back on heuristics based
answer.

See that value/void compatibility is not a structural property that can be
determined by AST inspection by a visitor.

    { throw new NPE(); } is value compatible despite there not being a return
statement.

    { if (x) return 0; } is NOT value compatible despite there being a return
statement with expression.

 
The former case is a pathological corner case, while in the case of the latter,
we can claim it to be value compatible for the purposes of F &amp; G and let the
error be reported elsewhere.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2445428</commentid>
    <comment_count>15</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-08-29 08:07:34 -0400</bug_when>
    <thetext>With the correct API Baseline (4.4.0), there&apos;s an error due to the removal of IProblem#LambdaShapeComputationError. Please restore the field and deprecate it.

Hint: For cases where you know upfront that an element should not be API, you should add @noreference right when you add the element. Then you&apos;re free to remove it without traces in the next release.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2445433</commentid>
    <comment_count>16</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-08-29 08:15:31 -0400</bug_when>
    <thetext>(In reply to Markus Keller from comment #15)
Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=c98bc8fa76cf3f980443dd4f59dcf01050b482f6</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2445449</commentid>
    <comment_count>17</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-08-29 08:39:12 -0400</bug_when>
    <thetext>(In reply to Markus Keller from comment #15)
&gt; With the correct API Baseline (4.4.0), there&apos;s an error due to the removal
&gt; of IProblem#LambdaShapeComputationError. Please restore the field and
&gt; deprecate it.
&gt; 
&gt; Hint: For cases where you know upfront that an element should not be API,
&gt; you should add @noreference right when you add the element. Then you&apos;re free
&gt; to remove it without traces in the next release.

Sorry about the breakage, thanks for the hint &amp; fix Markus.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2452662</commentid>
    <comment_count>18</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2014-09-16 13:50:01 -0400</bug_when>
    <thetext>Verified Fixed for Eclipse Mars 4.5 M2 Build id: I20140915-2000</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2460195</commentid>
    <comment_count>19</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-05 17:46:24 -0400</bug_when>
    <thetext>*** Bug 445465 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2473896</commentid>
    <comment_count>20</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-10-30 02:16:10 -0400</bug_when>
    <thetext>Reopening for back porting.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2477682</commentid>
    <comment_count>21</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-11-06 03:43:47 -0500</bug_when>
    <thetext>Released in R4_4_maintenance via commit(s):

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=R4_4_maintenance&amp;id=c3b79585234710b781ce7a24fef132f3584233c1

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=R4_4_maintenance&amp;id=9036c80bdabb111823f679d933cc44f86ddc04da</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2507699</commentid>
    <comment_count>22</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2015-01-20 03:58:18 -0500</bug_when>
    <thetext>Verified for 4.4.2 RC1 using build M20150114-1500.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2507704</commentid>
    <comment_count>23</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2015-01-20 03:59:33 -0500</bug_when>
    <thetext>Verified for 4.4.2 RC1 using build M20150114-1500.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2507705</commentid>
    <comment_count>24</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2015-01-20 04:01:52 -0500</bug_when>
    <thetext>Verified for 4.4.2 RC1 using build M20150114-1500.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>242427</attachid>
            <date>2014-04-28 18:11:00 -0400</date>
            <delta_ts>2014-04-28 18:11:20 -0400</delta_ts>
            <desc>draft patch</desc>
            <filename>ValueCompatible.patch</filename>
            <type>text/plain</type>
            <size>3861</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3RfMV84LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmlj
c1JlZ3Jlc3Npb25UZXN0XzFfOC5qYXZhCmluZGV4IDAzYzBmMmEuLmUwMTRlYzggMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3Rf
MV84LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdy
ZXNzaW9uVGVzdF8xXzguamF2YQpAQCAtMjEsNyArMjEsNyBAQAogcHVibGljIGNsYXNzIEdlbmVy
aWNzUmVncmVzc2lvblRlc3RfMV84IGV4dGVuZHMgQWJzdHJhY3RSZWdyZXNzaW9uVGVzdCB7CiAK
IHN0YXRpYyB7Ci0vLwlURVNUU19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7ICJ0ZXN0QnVnNDI4MTk4
YiIgfTsKKwlURVNUU19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7ICJ0ZXN0QnVnNDMyMTEwIiB9Owog
Ly8JVEVTVFNfTlVNQkVSUyA9IG5ldyBpbnRbXSB7IDQwLCA0MSwgNDMsIDQ1LCA2MywgNjQgfTsK
IC8vCVRFU1RTX1JBTkdFID0gbmV3IGludFtdIHsgMTEsIC0xIH07CiB9CkBAIC0yOTUzLDQgKzI5
NTMsNjUgQEAKIAkJCSJ9IgogCX0pOwogfQorcHVibGljIHZvaWQgdGVzdEJ1ZzQzMjExMCgpIHsK
KwlydW5Db25mb3JtVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJCdWcuamF2YSIsCisJCQki
aW1wb3J0IGphdmEudXRpbC5MaXN0O1xuIiArIAorCQkJImltcG9ydCBqYXZhLnV0aWwuZnVuY3Rp
b24uRnVuY3Rpb247XG4iICsgCisJCQkiaW1wb3J0IGphdmEudXRpbC5zdHJlYW0uU3RyZWFtO1xu
IiArIAorCQkJIlxuIiArIAorCQkJImNsYXNzIEJ1Z1xuIiArIAorCQkJIntcbiIgKyAKKwkJCSIg
ICAgLy8gZnVsbHkgaW5saW5lXG4iICsgCisJCQkiICAgIC8vIGNvbXBpbGVzIHN1Y2Nlc3NmdWxs
eVxuIiArIAorCQkJIiAgICBTdHJlYW08PyBleHRlbmRzIEludGVnZXI+IGZsYXR0ZW4xKFxuIiAr
IAorCQkJIiAgICAgICAgZmluYWwgU3RyZWFtPExpc3Q8SW50ZWdlcj4+IGlucHV0KVxuIiArIAor
CQkJIiAgICB7XG4iICsgCisJCQkiICAgICAgICByZXR1cm4gaW5wdXQuZmxhdE1hcChpdGVtIC0+
IGl0ZW0uc3RyZWFtKCkubWFwKHZhbHVlIC0+IHZhbHVlKSk7XG4iICsgCisJCQkiICAgIH1cbiIg
KyAKKwkJCSJcbiIgKyAKKwkJCSIgICAgLy8gbGFtYmRhIHVzaW5nIGJyYWNlc1xuIiArIAorCQkJ
IiAgICAvLyBjb21waWxlcyB3aXRoIGVycm9yIGluIGVjbGlwc2UsIHN1Y2Nlc3NmdWxseSB3aXRo
IGphdmFjXG4iICsgCisJCQkiICAgIFN0cmVhbTw/IGV4dGVuZHMgSW50ZWdlcj4gZmxhdHRlbjIo
XG4iICsgCisJCQkiICAgICAgICBmaW5hbCBTdHJlYW08TGlzdDxJbnRlZ2VyPj4gaW5wdXQpXG4i
ICsgCisJCQkiICAgIHtcbiIgKyAKKwkJCSIgICAgICAgIHJldHVybiBpbnB1dC5mbGF0TWFwKGl0
ZW0gLT4ge1xuIiArIAorCQkJIiAgICAgICAgICAgIHJldHVybiBpdGVtLnN0cmVhbSgpLm1hcCh2
YWx1ZSAtPiB2YWx1ZSk7XG4iICsgCisJCQkiICAgICAgICB9KTtcbiIgKyAKKwkJCSIgICAgfVxu
IiArIAorCQkJIlxuIiArIAorCQkJIiAgICAvLyB3aXRob3V0IG1hcCBzdGVwXG4iICsgCisJCQki
ICAgIC8vIGNvbXBpbGVzIHN1Y2Nlc3NmdWxseVxuIiArIAorCQkJIiAgICBTdHJlYW08PyBleHRl
bmRzIEludGVnZXI+IGZsYXR0ZW4zKFxuIiArIAorCQkJIiAgICAgICAgZmluYWwgU3RyZWFtPExp
c3Q8SW50ZWdlcj4+IGlucHV0KVxuIiArIAorCQkJIiAgICB7XG4iICsgCisJCQkiICAgICAgICBy
ZXR1cm4gaW5wdXQuZmxhdE1hcChpdGVtIC0+IHtcbiIgKyAKKwkJCSIgICAgICAgICAgICByZXR1
cm4gaXRlbS5zdHJlYW0oKTtcbiIgKyAKKwkJCSIgICAgICAgIH0pO1xuIiArIAorCQkJIiAgICB9
XG4iICsgCisJCQkiXG4iICsgCisJCQkiICAgIC8vIHdpdGggbWFwIHN0ZXAsIGJ1dCBub3QgaW5s
aW5lXG4iICsgCisJCQkiICAgIC8vIGNvbXBpbGVzIHN1Y2Nlc3NmdWxseVxuIiArIAorCQkJIiAg
ICBTdHJlYW08PyBleHRlbmRzIEludGVnZXI+IGZsYXR0ZW40KFxuIiArIAorCQkJIiAgICAgICAg
ZmluYWwgU3RyZWFtPExpc3Q8SW50ZWdlcj4+IGlucHV0KVxuIiArIAorCQkJIiAgICB7XG4iICsg
CisJCQkiICAgICAgICByZXR1cm4gaW5wdXQuZmxhdE1hcChpdGVtIC0+IHtcbiIgKyAKKwkJCSIg
ICAgICAgICAgICBmaW5hbCBGdW5jdGlvbjw/IHN1cGVyIEludGVnZXIsID8gZXh0ZW5kcyBJbnRl
Z2VyPiBtYXBwZXIgPSB2YWx1ZSAtPiB2YWx1ZTtcbiIgKyAKKwkJCSIgICAgICAgICAgICByZXR1
cm4gaXRlbS5zdHJlYW0oKS5tYXAobWFwcGVyKTtcbiIgKyAKKwkJCSIgICAgICAgIH0pO1xuIiAr
IAorCQkJIiAgICB9XG4iICsgCisJCQkiXG4iICsgCisJCQkiICAgIC8vIHdpdGggbWFwIHN0ZXAs
IGJ1dCBvdXRlciBsYW1iZGEgaXMgbm90IGlubGluZVxuIiArIAorCQkJIiAgICAvLyBjb21waWxl
cyBzdWNjZXNzZnVsbHlcbiIgKyAKKwkJCSIgICAgU3RyZWFtPD8gZXh0ZW5kcyBJbnRlZ2VyPiBm
bGF0dGVuNShcbiIgKyAKKwkJCSIgICAgICAgIGZpbmFsIFN0cmVhbTxMaXN0PEludGVnZXI+PiBp
bnB1dClcbiIgKyAKKwkJCSIgICAge1xuIiArIAorCQkJIiAgICAgICAgZmluYWwgRnVuY3Rpb248
PyBzdXBlciBMaXN0PEludGVnZXI+LCA/IGV4dGVuZHMgU3RyZWFtPD8gZXh0ZW5kcyBJbnRlZ2Vy
Pj4gZnVuYyA9IGl0ZW0gLT4ge1xuIiArIAorCQkJIiAgICAgICAgICAgIHJldHVybiBpdGVtLnN0
cmVhbSgpLm1hcCh2YWx1ZSAtPiB2YWx1ZSk7XG4iICsgCisJCQkiICAgICAgICB9O1xuIiArIAor
CQkJIiAgICAgICAgcmV0dXJuIGlucHV0LmZsYXRNYXAoZnVuYyk7XG4iICsgCisJCQkiICAgIH1c
biIgKyAKKwkJCSJ9XG4ifSk7Cit9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0xhbWJkYUV4
cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhCmluZGV4IDkw
NjMxYmYuLjFjNDQwZTEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5q
YXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhCkBAIC04NDQsNiArODQ0
LDggQEAKIAkJCWlmICh0aGlzLmJvZHkgaW5zdGFuY2VvZiBCbG9jaykgewogCQkJCWlmIChjb3B5
LnJldHVybnNWb2lkKSB7CiAJCQkJCWNvcHkuc2hhcGVBbmFseXNpc0NvbXBsZXRlID0gdHJ1ZTsK
KwkJCQl9IGVsc2UgeworCQkJCQljb3B5LnZhbHVlQ29tcGF0aWJsZSA9IHRoaXMucmV0dXJuc1Zh
bHVlOwogCQkJCX0KIAkJCX0gZWxzZSB7CiAJCQkJY29weS52b2lkQ29tcGF0aWJsZSA9ICgoRXhw
cmVzc2lvbikgdGhpcy5ib2R5KS5zdGF0ZW1lbnRFeHByZXNzaW9uKCk7
</data>

          </attachment>
      

    </bug>

</bugzilla>