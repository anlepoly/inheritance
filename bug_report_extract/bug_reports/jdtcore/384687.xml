<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>384687</bug_id>
          
          <creation_ts>2012-07-10 02:54:00 -0400</creation_ts>
          <short_desc>[1.8] Wildcard type arguments should be rejected for lambda and reference expressions</short_desc>
          <delta_ts>2013-11-14 08:53:13 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>382701</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Ayushman Jain">amj87.iitr</reporter>
          <assigned_to name="Jesper Moller">jesper</assigned_to>
          <cc>anchakrk</cc>
    
    <cc>jarthana</cc>
    
    <cc>jesper</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2134875</commentid>
    <comment_count>0</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-07-10 02:54:29 -0400</bug_when>
    <thetext>BETA_JAVA8
interface I {
	
}
public class Action&lt;T&gt; {
	
	&lt;K&gt; Action(int i)  {
		
	}
	
	Action (int i1, int i2) {
		&lt;?&gt;this(i1);   //gives error:GOOD
	}
	
	public void f1(Object[] o[][]) {}
        public void foo() {
    	    I len =  List::&lt;?&gt;size;  // no error:BAD
        }
}

Just like explicit constrcutor invocations, method and const. references should also not accept wildcard type arguments</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2134876</commentid>
    <comment_count>1</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-07-10 02:56:00 -0400</bug_when>
    <thetext>Looking at the way it is done for explicit const. invocations I found that the grammar accepts wildcards but resolution rejects it. So perhaps this can be done during semantic analysis for method references as well.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2135528</commentid>
    <comment_count>2</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-07-11 05:55:15 -0400</bug_when>
    <thetext>Even lambda expressions currently allow wildcards

    	Action exp = new Action&lt;&gt;();
    	int x,y,z;
        I len6 = foo-&gt;exp.&lt;?&gt;method(x, y, z);

while the following is correctly rejected
     	Action exp = new Action&lt;&gt;();
    	int x,y,z;
	exp.&lt;?&gt;method(x, y, z);</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2204120</commentid>
    <comment_count>3</comment_count>
      <attachid>225754</attachid>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-01-17 07:23:03 -0500</bug_when>
    <thetext>Created attachment 225754
Patch for this issue

Added a check for the type arguments into ReferenceExpression, and also adds a test for this case and the lambda one.

MyClass1::&lt;?&gt;method as an error, but I&apos;m not sure about MyClass2&lt;?&gt;::method - is  that an error as well?

This patch depends on the patches I&apos;ve submitted for bug 382701.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2208245</commentid>
    <comment_count>4</comment_count>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-01-27 06:25:54 -0500</bug_when>
    <thetext>Gerrit: https://git.eclipse.org/r/#/c/9914/</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2212503</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-05 12:14:10 -0500</bug_when>
    <thetext>Jesper, now that the infrastructure has stabilized, if you can adjust
the patch and repost, I can take it forward. Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2215855</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-12 20:29:52 -0500</bug_when>
    <thetext>(In reply to comment #3)
&gt; Created attachment 225754 [details]
&gt; Patch for this issue
&gt; 
&gt; Added a check for the type arguments into ReferenceExpression, and also adds
&gt; a test for this case and the lambda one.
&gt; 
&gt; MyClass1::&lt;?&gt;method as an error, but I&apos;m not sure about MyClass2&lt;?&gt;::method
&gt; - is  that an error as well?
&gt; 
&gt; This patch depends on the patches I&apos;ve submitted for bug 382701.

Brought the patch up to date by synching with branch head, reviewed and
released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=7d431a6663c03691d383a66bc16841bb87e3308d.


A few nag reminders:

-- please remember to add your contribution details to copyright messages
-- please remember to add the JCP disclaimer to all modified files.
-- some of your junit test strings have &quot;\r\n&quot; in them, we use only &quot;\n&quot;


Thanks Jesper.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2330177</commentid>
    <comment_count>7</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-11-14 08:43:28 -0500</bug_when>
    <thetext>I was going to raise a new bug then I saw this. The following program doesn&apos;t compile but Javac accepts this:

public class X1  {
    public static void main(String argv[]) {
        I&lt;?&gt; i = (String s1, String s2) -&gt; {};
    }
}
    
interface I&lt;T&gt; {
	public void foo(T t1, T t2);
}

Should we start accepting ? on the LHS?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2330182</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-11-14 08:53:13 -0500</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #7)
&gt; I was going to raise a new bug then I saw this. The following program
&gt; doesn&apos;t compile but Javac accepts this:

This is unconnected to the original subject. 
 
&gt; Should we start accepting ? on the LHS?

I don&apos;t know ! I&apos;ll investigate this and a raise a bug if needed. Thanks!</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>225754</attachid>
            <date>2013-01-17 07:23:00 -0500</date>
            <delta_ts>2013-01-17 07:23:03 -0500</delta_ts>
            <desc>Patch for this issue</desc>
            <filename>file_384687.txt</filename>
            <type>text/plain</type>
            <size>5887</size>
            <attacher name="Jesper Moller">jesper</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMA0KI1Agb3JnLmVjbGlwc2UuamR0LmNvcmUN
CmRpZmYgLS1naXQgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fz
dC9MYW1iZGFFeHByZXNzaW9uLmphdmEgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FzdC9MYW1iZGFFeHByZXNzaW9uLmphdmENCmluZGV4IDNhODE0ZDguLjMxMTQ2
ZGEgMTAwNjQ0DQotLS0gY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FzdC9MYW1iZGFFeHByZXNzaW9uLmphdmENCisrKyBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L0xhbWJkYUV4cHJlc3Npb24uamF2YQ0KQEAgLTQ3LDcgKzQ3
LDcgQEANCiAJCQl0aGlzLnNjb3BlLnByb2JsZW1SZXBvcnRlcigpLnBvbHlFeHByZXNzaW9uSW5J
bGxlZ2FsQ29udGV4dCh0aGlzKTsNCiAJCX0NCiAJCXRoaXMuc2luZ2xlTWV0aG9kID0gcmVzb2x2
ZUZ1bmN0aW9uYWxNZXRob2QodGhpcy5hcmd1bWVudHMgIT0gbnVsbCA/IHRoaXMuYXJndW1lbnRz
Lmxlbmd0aCA6IDApOw0KLQkJaWYgKHRoaXMuYXJndW1lbnRzICE9IG51bGwpIHsNCisJCWlmICh0
aGlzLmFyZ3VtZW50cyAhPSBudWxsICYmIHRoaXMuc2luZ2xlTWV0aG9kICE9IG51bGwpIHsNCiAJ
CQlmb3IgKGludCBpID0gMCwgbGVuZ3RoID0gdGhpcy5hcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVu
Z3RoOyBpKyspIHsNCiAJCQkJdGhpcy5hcmd1bWVudHNbaV0uc2V0RWxpZGVkVHlwZSh0aGlzLnNp
bmdsZU1ldGhvZC5wYXJhbWV0ZXJzW2ldKTsNCiAJCQkJdGhpcy5hcmd1bWVudHNbaV0ucmVzb2x2
ZSh0aGlzLnNjb3BlKTsNCmRpZmYgLS1naXQgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2FzdC9SZWZlcmVuY2VFeHByZXNzaW9uLmphdmEgY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9SZWZlcmVuY2VFeHByZXNzaW9uLmphdmEN
CmluZGV4IGJjNjgwZDYuLjgyODBlNjEgMTAwNjQ0DQotLS0gY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9SZWZlcmVuY2VFeHByZXNzaW9uLmphdmENCisrKyBj
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVyZW5jZUV4
cHJlc3Npb24uamF2YQ0KQEAgLTE1LDYgKzE1LDEwIEBADQogDQogcGFja2FnZSBvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0Ow0KIA0KK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIuY2xhc3NmbXQuQ2xhc3NGaWxlQ29uc3RhbnRzOw0KK2ltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkJsb2NrU2NvcGU7DQoraW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuVHlwZUJpbmRpbmc7
DQorDQogcHVibGljIGNsYXNzIFJlZmVyZW5jZUV4cHJlc3Npb24gZXh0ZW5kcyBOdWxsTGl0ZXJh
bCB7IC8vIEZvciB0aGUgdGltZSBiZWluZy4NCiAJDQogCXByb3RlY3RlZCBOYW1lUmVmZXJlbmNl
IG5hbWU7DQpAQCAtMjQsNiArMjgsNyBAQA0KIAlwcm90ZWN0ZWQgVHlwZVJlZmVyZW5jZSBbXSB0
eXBlQXJndW1lbnRzOw0KIAkNCiAJcHJvdGVjdGVkIFNpbmdsZU5hbWVSZWZlcmVuY2UgbWV0aG9k
OyAvLyA9PSBudWxsID8gIjo6bmV3IiA6ICI6Om1ldGhvZCINCisJcHJpdmF0ZSBUeXBlQmluZGlu
Z1tdIGdlbmVyaWNUeXBlQXJndW1lbnRzOw0KIAkNCiAJcHVibGljIFJlZmVyZW5jZUV4cHJlc3Np
b24oTmFtZVJlZmVyZW5jZSBuYW1lLCBUeXBlUmVmZXJlbmNlW10gdHlwZUFyZ3VtZW50cywgaW50
IHNvdXJjZUVuZCkgew0KIAkJc3VwZXIobmFtZS5zb3VyY2VTdGFydCwgc291cmNlRW5kKTsNCkBA
IC05Myw0ICs5OCwyNCBAQA0KIAlwdWJsaWMgYm9vbGVhbiBpc01ldGhvZFJlZmVyZW5jZSgpIHsN
CiAJCXJldHVybiB0aGlzLm1ldGhvZCAhPSBudWxsOw0KIAl9DQorCQ0KKwlwdWJsaWMgVHlwZUJp
bmRpbmcgcmVzb2x2ZVR5cGUoQmxvY2tTY29wZSBzY29wZSkgew0KKwkJLy8gcmVzb2x2ZSB0eXBl
IGFyZ3VtZW50cyAoZm9yIGdlbmVyaWMgY29uc3RydWN0b3IgY2FsbCkNCisJCWlmICh0aGlzLnR5
cGVBcmd1bWVudHMgIT0gbnVsbCkgew0KKwkJCWludCBsZW5ndGggPSB0aGlzLnR5cGVBcmd1bWVu
dHMubGVuZ3RoOw0KKwkJCWJvb2xlYW4gYXJnSGFzRXJyb3IgPSBzY29wZS5jb21waWxlck9wdGlv
bnMoKS5zb3VyY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzU7IC8vIHR5cGVDaGVj
a3MgYWxsIGFyZ3VtZW50cw0KKwkJCXRoaXMuZ2VuZXJpY1R5cGVBcmd1bWVudHMgPSBuZXcgVHlw
ZUJpbmRpbmdbbGVuZ3RoXTsNCisJCQlmb3IgKGludCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7
DQorCQkJCVR5cGVSZWZlcmVuY2UgdHlwZVJlZmVyZW5jZSA9IHRoaXMudHlwZUFyZ3VtZW50c1tp
XTsNCisJCQkJaWYgKCh0aGlzLmdlbmVyaWNUeXBlQXJndW1lbnRzW2ldID0gdHlwZVJlZmVyZW5j
ZS5yZXNvbHZlVHlwZShzY29wZSwgdHJ1ZSAvKiBjaGVjayBib3VuZHMqLykpID09IG51bGwpIHsN
CisJCQkJCWFyZ0hhc0Vycm9yID0gdHJ1ZTsNCisJCQkJfQ0KKwkJCQlpZiAoYXJnSGFzRXJyb3Ig
JiYgdHlwZVJlZmVyZW5jZSBpbnN0YW5jZW9mIFdpbGRjYXJkKSB7DQorCQkJCQlzY29wZS5wcm9i
bGVtUmVwb3J0ZXIoKS5pbGxlZ2FsVXNhZ2VPZldpbGRjYXJkKHR5cGVSZWZlcmVuY2UpOw0KKwkJ
CQl9DQorCQkJfQ0KKwkJfQ0KKwkJcmV0dXJuIHN1cGVyLnJlc29sdmVUeXBlKHNjb3BlKTsNCisJ
fQ0KKwkNCiB9DQpcIE5vIG5ld2xpbmUgYXQgZW5kIG9mIGZpbGUNCiNQIG9yZy5lY2xpcHNlLmpk
dC5jb3JlLnRlc3RzLmNvbXBpbGVyDQpkaWZmIC0tZ2l0IHNyYy9vcmcvZWNsaXBzZS9qZHQvY29y
ZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRhRXhwcmVzc2lvbnNUZXN0
LmphdmEgc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24v
TmVnYXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YQ0KaW5kZXggYmY4ZjUzMy4uZGE0M2Q0
ZSAxMDA2NDQNCi0tLSBzcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVn
cmVzc2lvbi9OZWdhdGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhDQorKysgc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVnYXRpdmVMYW1iZGFF
eHByZXNzaW9uc1Rlc3QuamF2YQ0KQEAgLTE1MCw2ICsxNTAsMTMgQEANCiAJdGhpcy5ydW5OZWdh
dGl2ZVRlc3QoDQogCQkJbmV3IFN0cmluZ1tdIHsNCiAJCQkJIlguamF2YSIsDQorCQkJCSJpbnRl
cmZhY2UgT25le31cbiIgKw0KKwkJCQkiaW50ZXJmYWNlIFR3b3t9XG4iICsNCisJCQkJImludGVy
ZmFjZSBUaHJlZXt9XG4iICsNCisJCQkJImludGVyZmFjZSBGb3Vye31cbiIgKw0KKwkJCQkiaW50
ZXJmYWNlIEZpdmV7fVxuIiArDQorCQkJCSJpbnRlcmZhY2UgQmxhaHt9XG4iICsNCisJCQkJImlu
dGVyZmFjZSBPdXRlcjxUMSxUMj57aW50ZXJmYWNlIElubmVyPFQzLFQ0PntpbnRlcmZhY2UgTGVh
ZnsgPFQ+IHZvaWQgbWV0aG9kKCk7IH0gfSB9XG4iICsNCiAJCQkJImludGVyZmFjZSBJWHtcbiIg
Kw0KIAkJCQkiCXB1YmxpYyB2b2lkIGZvbygpO1xuIiArDQogCQkJCSJ9XG4iICsNCkBAIC0xNTks
NyArMTY2LDcgQEANCiAJCQkJIn1cbiIsDQogCQkJfSwNCiAJCQkiLS0tLS0tLS0tLVxuIiArIA0K
LQkJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNilcbiIgKyANCisJCQkiMS4gRVJST1Ig
aW4gWC5qYXZhIChhdCBsaW5lIDEzKVxuIiArIA0KIAkJCSIJaW50IHhcbiIgKyANCiAJCQkiCSAg
ICBeXG4iICsgDQogCQkJIlN5bnRheCBlcnJvciwgaW5zZXJ0IFwiO1wiIHRvIGNvbXBsZXRlIEZp
ZWxkRGVjbGFyYXRpb25cbiIgKyANCkBAIC0zNDksNiArMzU2LDU1IEBADQogCQkJCQ0KIH0NCiAN
CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9Mzg0Njg3
IFsxLjhdIFdpbGRjYXJkIHR5cGUgYXJndW1lbnRzIHNob3VsZCBiZSByZWplY3RlZCBmb3IgbGFt
YmRhIGFuZCByZWZlcmVuY2UgZXhwcmVzc2lvbnMNCitwdWJsaWMgdm9pZCB0ZXN0MDEzQSgpIHsN
CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoDQorCQkJbmV3IFN0cmluZ1tdIHsNCisJCQkiWC5qYXZh
IiwNCisJCQkiY2xhc3MgQWN0aW9uPEs+IHtcclxuIiArIA0KKwkJCSIgIHN0YXRpYyA8VDE+IGlu
dCBmb29NZXRob2QoT2JqZWN0IHgpIHsgcmV0dXJuIDA7IH1cclxuIiArIA0KKwkJCSJ9XHJcbiIg
KyANCisJCQkiaW50ZXJmYWNlIEkge1xyXG4iICsgDQorCQkJIiAgaW50IGZvbyhPYmplY3QgeCk7
XHJcbiIgKyANCisJCQkifVxyXG4iICsgDQorCQkJInB1YmxpYyBjbGFzcyBYIHtcclxuIiArIA0K
KwkJCSIgIHB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcclxuIiArIA0K
KwkJCSIgICAgSSBmdW5jdGlvbmFsID0gQWN0aW9uOjo8Pz5mb29NZXRob2Q7XHJcbiIgKyANCisJ
CQkiICB9XHJcbiIgKyANCisJCQkifSJ9LA0KKwkJCSItLS0tLS0tLS0tXG4iICsgDQorCQkJIjEu
IEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA5KVxuIiArIA0KKwkJCSIJSSBmdW5jdGlvbmFsID0g
QWN0aW9uOjo8Pz5mb29NZXRob2Q7XG4iICsgDQorCQkJIgkgICAgICAgICAgICAgICAgICAgICAg
ICBeXG4iICsgDQorCQkJIldpbGRjYXJkIGlzIG5vdCBhbGxvd2VkIGF0IHRoaXMgbG9jYXRpb25c
biIgKyANCisJCQkiLS0tLS0tLS0tLVxuIik7DQorfQ0KKw0KKy8vaHR0cHM6Ly9idWdzLmVjbGlw
c2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM4NDY4NyBbMS44XSBXaWxkY2FyZCB0eXBlIGFy
Z3VtZW50cyBzaG91bGQgYmUgcmVqZWN0ZWQgZm9yIGxhbWJkYSBhbmQgcmVmZXJlbmNlIGV4cHJl
c3Npb25zDQorcHVibGljIHZvaWQgdGVzdDAxM0IoKSB7DQorCXRoaXMucnVuTmVnYXRpdmVUZXN0
KA0KKwkJCW5ldyBTdHJpbmdbXSB7DQorCQkJIlguamF2YSIsDQorCQkJImNsYXNzIEFjdGlvbjxL
PiB7XHJcbiIgKyANCisJCQkiICBpbnQgZm9vKE9iamVjdCB4LCBPYmplY3QgeSwgT2JqZWN0IHop
IHsgcmV0dXJuIDA7IH1cclxuIiArIA0KKwkJCSJ9XHJcbiIgKyANCisJCQkiaW50ZXJmYWNlIEkg
e1xyXG4iICsgDQorCQkJIiAgdm9pZCBmb28oT2JqZWN0IHgpO1xyXG4iICsgDQorCQkJIn1cclxu
IiArIA0KKwkJCSJwdWJsaWMgY2xhc3MgWCB7XHJcbiIgKyANCisJCQkiICBwdWJsaWMgc3RhdGlj
IHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7XHJcbiIgKyANCisJCQkiICAgIEFjdGlvbjxPYmpl
Y3Q+IGV4cCA9IG5ldyBBY3Rpb248T2JqZWN0PigpO1xyXG4iICsgDQorCQkJIiAgICBpbnQgeCx5
LHo7XHJcbiIgKyANCisJCQkiICAgIEkgbGVuNiA9IGZvby0+ZXhwLjw/Pm1ldGhvZCh4LCB5LCB6
KTtcclxuIiArIA0KKwkJCSIgIH1cclxuIiArIA0KKwkJCSJ9In0sDQorCQkJIi0tLS0tLS0tLS1c
biIgKyANCisJCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDExKVxuIiArIA0KKwkJCSIJ
SSBsZW42ID0gZm9vLT5leHAuPD8+bWV0aG9kKHgsIHksIHopO1xuIiArIA0KKwkJCSIJICAgICAg
ICAgICAgICAgICAgIF5cbiIgKyANCisJCQkiV2lsZGNhcmQgaXMgbm90IGFsbG93ZWQgYXQgdGhp
cyBsb2NhdGlvblxuIiArIA0KKwkJCSItLS0tLS0tLS0tXG4iKTsNCit9DQogDQogcHVibGljIHN0
YXRpYyBDbGFzcyB0ZXN0Q2xhc3MoKSB7DQogCXJldHVybiBOZWdhdGl2ZUxhbWJkYUV4cHJlc3Np
b25zVGVzdC5jbGFzczsNCg==
</data>

          </attachment>
      

    </bug>

</bugzilla>