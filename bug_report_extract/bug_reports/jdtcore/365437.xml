<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>365437</bug_id>
          
          <creation_ts>2011-12-02 09:35:00 -0500</creation_ts>
          <short_desc>Private methods tagged with @Inject should not be flagged with unused warning</short_desc>
          <delta_ts>2012-04-12 09:27:19 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>3.8 M5</target_milestone>
          
          <blocked>367858</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Dean Roberts">dean_roberts</reporter>
          <assigned_to name="Ayushman Jain">amj87.iitr</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>deepakazad</cc>
    
    <cc>markus_keller</cc>
    
    <cc>Olivier_Thomann</cc>
    
    <cc>pbenedict</cc>
    
    <cc>satyam.kandula</cc>
    
    <cc>Sebastian.Zarnekow</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2034978</commentid>
    <comment_count>0</comment_count>
    <who name="Dean Roberts">dean_roberts</who>
    <bug_when>2011-12-02 09:35:46 -0500</bug_when>
    <thetext>Our dependency injection engine can inject into private methods from outside the declaring class.

Therefore, a private method with an @Inject tag that is not used in the local class should NOT be flagged as an unused warning.

(As an aside, I had thought the same argument would hold for private fields, but I believe the warning is still valid for fields.  Even though the private field can be set fro outside the class.  It can only be used inside the class.  And if it is never used, it should be flagged as a warning)

Example:

import javax.inject.Inject;

public class InjectExample {
	@Inject 
	private String fooField;
	
	@Inject 
	private void fooMethod() {
		System.out.println(fooField);
	}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2034981</commentid>
    <comment_count>1</comment_count>
    <who name="Sebastian Zarnekow">Sebastian.Zarnekow</who>
    <bug_when>2011-12-02 09:39:15 -0500</bug_when>
    <thetext>Looks like a duplicate of bug 357902
Btw: I still have plans to provide a patch for that one :-)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2035095</commentid>
    <comment_count>2</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-12-02 11:49:18 -0500</bug_when>
    <thetext>I would say we should probably add support to disable this reporting when a member (type/field/method) is annotated with an annotation coming from the javax package.
We added support for javax.annotation.PostConstruct and PreDestroy (see bug 346529).
I think we should remove the check for the specific annotation name and add a more generic support for annotations coming from javax package.

The purpose of this warning is to &quot;clean&quot; up the code from code that is not being used. Of course nothing prevents reflection to be used to access a private method, but when a method is annotated with annotations from javax... package, it is more likely that these methods will be used in a different way at runtime like dependency injection or other runtime mechanisms.

Adding support for more specific annotations looks like a wrong solution. So bug 346529 was too specific and the fix should be removed to go with a more general solution.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2035117</commentid>
    <comment_count>3</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-12-02 12:16:46 -0500</bug_when>
    <thetext>At least this was useful to find bug 365455.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2035282</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-02 19:45:02 -0500</bug_when>
    <thetext>I&apos;ll take a look.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2036276</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-06 06:58:33 -0500</bug_when>
    <thetext>Ayush, please follow up for M5. I&apos;ll attach a patch from
Olivier (Thanks!) shortly.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2036277</commentid>
    <comment_count>6</comment_count>
      <attachid>207974</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-06 07:00:22 -0500</bug_when>
    <thetext>Created attachment 207974
Patch from Olivier

This is a cumulative patch and includes fix for 365455</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2040704</commentid>
    <comment_count>7</comment_count>
    <who name="Paul Benedict">pbenedict</who>
    <bug_when>2011-12-14 11:01:14 -0500</bug_when>
    <thetext>I think disabling the warning when an annotation comes from the javax package is too large of a swath. Not every annotation is for the container. For example, if javax.xml.bind.annotation.XmlValue is applied to a method, it must be a JavaBeans (public) property. Applying this to a private method should trigger the warning.

I think the previous patch was correct; annotations which only mean something to the container should be suppressed. I know that means maintaining a list of some sort, but that seems superior to the current recommendation.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2041023</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-14 22:06:48 -0500</bug_when>
    <thetext>(In reply to comment #7)

&gt; I think the previous patch was correct; annotations which only mean something
&gt; to the container should be suppressed. I know that means maintaining a list of
&gt; some sort, but that seems superior to the current recommendation.

Could you point us to some documentation that would help us put together such
a list ? Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2041173</commentid>
    <comment_count>9</comment_count>
    <who name="Paul Benedict">pbenedict</who>
    <bug_when>2011-12-15 09:16:11 -0500</bug_when>
    <thetext>Srikanth, I am not sure if you are asking in jest :-) but there&apos;s no such readily available list. Unfortunately, what annotations matter to the container need to be cherry-picked from API documentation. While probably out of scope for this ticket, if the user had a Preference option of selecting WHICH javax.* annotations should be ignored, then things can be exact without Eclipse committers maintaining a list.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2041569</commentid>
    <comment_count>10</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-15 22:47:51 -0500</bug_when>
    <thetext>(In reply to comment #9)
&gt; Srikanth, I am not sure if you are asking in jest :-) but there&apos;s no such
&gt; readily available list.

No, this question was asked in dead earnest, when it comes to javabeans,
some of us firmly occupy the don&apos;t-know-what-we-don&apos;t-know quadrant and
don&apos;t allow that fact to deter us from shooting off questions :)
 
Ayush, I am OK with the incrementally-fix-as-we-hear-issues approach as
these are not critical problems.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2041708</commentid>
    <comment_count>11</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-12-16 03:04:54 -0500</bug_when>
    <thetext>(In reply to comment #10)
&gt; Ayush, I am OK with the incrementally-fix-as-we-hear-issues approach as
&gt; these are not critical problems.

Umm...but in the above patch we have switched off the warning completely for any javax.*
So are you saying that we should drop that patch and instead only special case javax.inject.Inject in additon to @PostConstruct and @PreDestroy?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2041727</commentid>
    <comment_count>12</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-16 04:08:44 -0500</bug_when>
    <thetext>(In reply to comment #11)

&gt; So are you saying that we should drop that patch and instead only special case
&gt; javax.inject.Inject in additon to @PostConstruct and @PreDestroy?

Yes, comment #7 points out with specific example why we should not adopt the
strategy in the patch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2043930</commentid>
    <comment_count>13</comment_count>
    <who name="Paul Benedict">pbenedict</who>
    <bug_when>2011-12-22 10:30:15 -0500</bug_when>
    <thetext>I went through the JEE 6 API and selected only the annotations which were explicitly documented to:
1) receive a callback
2) applied to methods
3) say something like &quot;method may have any access type&quot; or &quot;method on which XXX is applied MAY be public, protected, package private or private&quot;. 

javax.annotation.PreDestroy
javax.annotation.PostConstruct
javax.annotation.Resource
javax.ejb.AfterBegin
javax.ejb.AfterCompletion
javax.ejb.BeforeCompletion
javax.ejb.PostActivate
javax.ejb.PrePassivate
javax.inject.Inject

Some also apply to fields too, but not all do.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2045425</commentid>
    <comment_count>14</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-01-03 04:51:34 -0500</bug_when>
    <thetext>The fix for bug 365455 included with the patch here is being tracked in bug 346175.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2045508</commentid>
    <comment_count>15</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-01-03 07:24:00 -0500</bug_when>
    <thetext>(In reply to comment #13)
&gt; I went through the JEE 6 API and selected only the annotations which were
Thanks for the list Paul. I will exclude these from the unused warnings. Will also try to see if this can be made configurable.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2046117</commentid>
    <comment_count>16</comment_count>
      <attachid>209012</attachid>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-01-04 10:23:07 -0500</bug_when>
    <thetext>Created attachment 209012
proposed fix v1.0 + regression tests

This patch attempts to solve the issue in a more generic way by introducing a new option on preferences page.
This option takes a comma separated list of all annotation names (fully qualified) that, when applied to a private method, will suppress the unused warning even if the method is not used. 
I have kept both @javax.annotation.PreDestroy and @PostConstruct as defaults in this configurable list to preserve the earlier behaviour and backed out the changes done for bug 346529. 
I have also added a batch compiler option to specify these names which can be used as given below:
-warn:unusedPrivateExempt(javax.annotation.Resource|javax.annotation.PreDestroy)

The implementation is simple: a special bit is assigned to any annotation that is defined by the user in the list. This is done in org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.computeId(LookupEnvironment).
This bit gets transferred to the tagBits of the method to which the annotation is applied. While reporting the unused error, if this tagBit is found, we skip.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2046136</commentid>
    <comment_count>17</comment_count>
    <who name="Dean Roberts">dean_roberts</who>
    <bug_when>2012-01-04 10:49:45 -0500</bug_when>
    <thetext>I&apos;m never a big fan of adding more preferences to Eclipse.  But in this case, I think it is a particularly bad idea.

In point of fact, I do not view these annotations as user preferences.

A private method tagged as @Inject must not be flagged as a &quot;never called&quot; warning.  This is not a preference, it is a dependency injection truism.  

The suggested approach would be the same as asking the user to maintain a list of access modifiers that would be considered as &quot;not accessible out side a class&quot;, and then making sure that &quot;private&quot; was always included in that preferanece list.

I can appreciate that maintaining the list of special annotations is a problem but I don&apos;t believe making it the user&apos;s problem is the correct approach here.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2046161</commentid>
    <comment_count>18</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-01-04 11:16:55 -0500</bug_when>
    <thetext>(In reply to comment #17)
&gt; I don&apos;t believe making it the user&apos;s problem is the correct approach here.
That&apos;s not my intention at all. The idea behind providing an option is to give some kind of flexibility to the user, in cases he has his own annotations which do something akin to the @Inject annotation, or if in the future other annotations with such meanings are introduced. Do you suggest we keep hard-coding such annotations into the compiler?

The whole idea is *not* to burden the user with another preference, but to provide more flexibility. I don&apos;t understand why you think thats a &apos;bad&apos; thing. :)

Ofcourse, I can buy the argument that the list of annotations mentioned in comment 13 can be added to the current defaults. But I dont see any de-merits, as such, of the proposed option.

Srikanth/Olivier, what do you think?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2046170</commentid>
    <comment_count>19</comment_count>
    <who name="Paul Benedict">pbenedict</who>
    <bug_when>2012-01-04 11:20:13 -0500</bug_when>
    <thetext>The fact is that JEE is not the only dependency injection framework. There&apos;s
nothing special about JEE annotations besides being the standard. Users of the
Spring Framework and Google Guice (and the like) also have the ability to
annotate private methods with non-standard annotations and would run into the
same &quot;unused method&quot; warning. 

It seems reasonable to me that users should have the power to configure which
annotations suppress the warning.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2046184</commentid>
    <comment_count>20</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2012-01-04 11:29:31 -0500</bug_when>
    <thetext>I think in this case we cannot make a call for which annotations should be considered to remove the warnings. This is why we should either use a list defined by the user, or simply remove the warning as soon as the private member is annotated.
My concern is that there is a clean-up action to get rid of these unused private members so this warning should be reported only when required. In this case, we end up with false positives that can lead to get the corresponding members removed on the next save. This is bad!
The question we should really ask is that &quot;is it a big issue to remove the warning as soon as the method is annotated?&quot;. I don&apos;t think so. If we remove the warning, the only consequence is that the user doesn&apos;t get the automatic cleanup and might keep unused methods in her/his code. If we don&apos;t want to completely remove the warning, then this solution seems to be the one to go with. I don&apos;t see how we can maintain a list without letting the user set it up.

On the patch itself, I would extract the compound name concatenation outside of the for loop in the computeId(..) method.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2046205</commentid>
    <comment_count>21</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-01-04 11:46:06 -0500</bug_when>
    <thetext>(In reply to comment #20)
&gt; The question we should really ask is that &quot;is it a big issue to remove the
&gt; warning as soon as the method is annotated?&quot;

I think that may depend on a case to case basis. A user who frequently uses annotations may suffer. Annotations like @SuppressWarnings and now our own Null annotations, which can be expected to be commonly used, will suppress this otherwise useful cleanup diagnostic. So, I&apos;m slightly biased in favour of the option. :)

&gt; On the patch itself, I would extract the compound name concatenation outside of
&gt; the for loop in the computeId(..) method.

Thanks, will do in my next patch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2046217</commentid>
    <comment_count>22</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2012-01-04 12:10:52 -0500</bug_when>
    <thetext>(In reply to comment #20)
&gt; [..], or simply remove the warning as soon as the private member
&gt; is annotated.

I agree with this. As soon as a member is annotated, we have no clue what an
annotation processor (or a reflective tool at runtime) is going to do with it.
We can say that the annotation itself establishes a potential reference from an
annotation processor, so the member is not definitely unused any more.

However, there are a few annotations with well-defined semantics that don&apos;t establish a use of the member. These include @Deprecated, @SuppressWarnings, @Nullable, @NonNull.

How about hardcoding these few annotations and consider all other annotations as rendering a member used?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2046949</commentid>
    <comment_count>23</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-05 21:16:32 -0500</bug_when>
    <thetext>(In reply to comment #22)
&gt; (In reply to comment #20)
&gt; &gt; [..], or simply remove the warning as soon as the private member
&gt; &gt; is annotated.
&gt; 
&gt; I agree with this. As soon as a member is annotated, we have no clue what an
&gt; annotation processor (or a reflective tool at runtime) is going to do with it.
&gt; We can say that the annotation itself establishes a potential reference from an
&gt; annotation processor, so the member is not definitely unused any more.
&gt; 
&gt; However, there are a few annotations with well-defined semantics that don&apos;t
&gt; establish a use of the member. These include @Deprecated, @SuppressWarnings,
&gt; @Nullable, @NonNull.
&gt; 
&gt; How about hardcoding these few annotations and consider all other annotations
&gt; as rendering a member used?

This sounds reasonable to me.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2046987</commentid>
    <comment_count>24</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2012-01-06 02:08:27 -0500</bug_when>
    <thetext>(In reply to comment #23)
&gt; (In reply to comment #22)
&gt; &gt; (In reply to bug 365437 comment 23)
&gt; &gt; &gt; [..], or simply remove the warning as soon as the private member
&gt; &gt; &gt; is annotated.
&gt; &gt; 
&gt; &gt; I agree with this. As soon as a member is annotated, we have no clue what an
&gt; &gt; annotation processor (or a reflective tool at runtime) is going to do with it.
&gt; &gt; We can say that the annotation itself establishes a potential reference from an
&gt; &gt; annotation processor, so the member is not definitely unused any more.
&gt; &gt; 
&gt; &gt; However, there are a few annotations with well-defined semantics that don&apos;t
&gt; &gt; establish a use of the member. These include @Deprecated, @SuppressWarnings,
&gt; &gt; @Nullable, @NonNull.
&gt; &gt; 
&gt; &gt; How about hardcoding these few annotations and consider all other annotations
&gt; &gt; as rendering a member used?
&gt; 
&gt; This sounds reasonable to me.

Same here.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2047100</commentid>
    <comment_count>25</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-01-06 08:04:45 -0500</bug_when>
    <thetext>(In reply to comment #22)
&gt;These include @Deprecated, @SuppressWarnings,
&gt; @Nullable, @NonNull.

On the one hand, we&apos;re giving the user the option to specify his own Null annotations, on the other, we&apos;re hardcoding @org.eclipse.jdt.annotation.Nullable in this particular case. Seems a bit uncanny, no?
Apart from these, the user may have so many Marker annotations of his own that don&apos;t make a method used, yet we&apos;re switching this warning off. Why can&apos;t we empower the user?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2047135</commentid>
    <comment_count>26</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-01-06 09:01:41 -0500</bug_when>
    <thetext>Also, what about @SafeVarargs? 
Subsequent java releases may come with more such annotations too.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2047551</commentid>
    <comment_count>27</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-08 21:53:25 -0500</bug_when>
    <thetext>(In reply to comment #25)

&gt; Apart from these, the user may have so many Marker annotations of his own that
&gt; don&apos;t make a method used, yet we&apos;re switching this warning off. Why can&apos;t we
&gt; empower the user?

This was addressed by the earlier comment# 22, an excerpt from which reads:

... As soon as a member is annotated, we have no clue what an
annotation processor (or a reflective tool at runtime) is going to do with it.
We can say that the annotation itself establishes a potential reference from an
annotation processor, so the member is not definitely unused any more ...

Obviously this is a conservative assumption, but since the compiler cannot
divine the intentions of the programmer, it is a reasonable assumption.

(In reply to comment #26)
&gt; Also, what about @SafeVarargs? 

That too.

&gt; Subsequent java releases may come with more such annotations too.

Those too.

@Override doesn&apos;t need handling as we never mark a overriding method
(relevant only for non top level class) as unused.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2047717</commentid>
    <comment_count>28</comment_count>
      <attachid>209200</attachid>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-01-09 06:50:31 -0500</bug_when>
    <thetext>Created attachment 209200
proposed fix v2.0 + regression tests

Here is the patch which turns off the diagnostic for all annotated methods with any annotation other than @SW, @Deprecated, @SafeVarargs and the user configured null annotations.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2047859</commentid>
    <comment_count>29</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2012-01-09 10:51:18 -0500</bug_when>
    <thetext>Path looks good. Except that I would use a local variable for the resolveType.
	for (int i = 0; i &lt; annotationsLen; i++) {
		TypeBinding resolvedType = annotations[i].resolvedType;
		if (resolvedType != null) {
			switch (resolvedType.id) {
				case TypeIds.T_JavaLangSuppressWarnings:
				case TypeIds.T_JavaLangDeprecated:
				case TypeIds.T_JavaLangSafeVarargs:
				case TypeIds.T_ConfiguredAnnotationNonNull:
				case TypeIds.T_ConfiguredAnnotationNullable:
				case TypeIds.T_ConfiguredAnnotationNonNullByDefault:
					break;
				default:
					// non-standard annotation found, don&apos;t warn
					return;
			}
		}
	}

Do we also need to same code for unused constructors ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2048094</commentid>
    <comment_count>30</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-09 20:20:18 -0500</bug_when>
    <thetext>(In reply to comment #29)

&gt; Do we also need to same code for unused constructors ?

For consistency&apos;s sakes, should we exclude annotated fields
too ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2048210</commentid>
    <comment_count>31</comment_count>
      <attachid>209250</attachid>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-01-10 05:52:14 -0500</bug_when>
    <thetext>Created attachment 209250
proposed fix v2.1 + regression tests

Thanks Olivier.

This patch adds support for unused private types, fields and constructors as well.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2048318</commentid>
    <comment_count>32</comment_count>
    <who name="Paul Benedict">pbenedict</who>
    <bug_when>2012-01-10 09:34:58 -0500</bug_when>
    <thetext>(In reply to comment #31)
&gt; This patch adds support for unused private types, fields and constructors as
&gt; well.

I think the solution being proposed is a good middle ground: once an annotation is applied, it is considered used. But I believe fields should be excluded in this patch. Fields are data points and unless your code is reading them, there&apos;s no point in having the data. This is unlike methods which actually get called from a container; but if your fields are being set by a container and you aren&apos;t using them, then I think the warning should remain.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2048329</commentid>
    <comment_count>33</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-10 09:44:29 -0500</bug_when>
    <thetext>(In reply to comment #32)
&gt; (In reply to comment #31)
&gt; &gt; This patch adds support for unused private types, fields and constructors as
&gt; &gt; well.
&gt; 
&gt; I think the solution being proposed is a good middle ground: once an annotation
&gt; is applied, it is considered used. But I believe fields should be excluded in
&gt; this patch. Fields are data points and unless your code is reading them,
&gt; there&apos;s no point in having the data. This is unlike methods which actually get
&gt; called from a container; but if your fields are being set by a container and
&gt; you aren&apos;t using them, then I think the warning should remain.

This may be true of the container world, but in the most
general sense we are in no position to divine what an
arbitrary annotation processor would do with some annotated
element. So the point made by comment# 22, an excerpt from
which reads:

... As soon as a member is annotated, we have no clue what an
annotation processor (or a reflective tool at runtime) is 
going to do with it. We can say that the annotation itself 
establishes a potential reference from an annotation processor, 
so the member is not definitely unused any more ...

still holds.

Notwithstanding the fact that there is no counter example of
a valid annotation processor usage being proferred,  I suggest we
treat fields, methods, types and constructor consistently and
go forward with the fix v2.1.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2048488</commentid>
    <comment_count>34</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2012-01-10 13:30:33 -0500</bug_when>
    <thetext>(In reply to comment #33)
&gt; Notwithstanding the fact that there is no counter example of
&gt; a valid annotation processor usage being proferred,  I suggest we
&gt; treat fields, methods, types and constructor consistently and
&gt; go forward with the fix v2.1.
+1</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2048715</commentid>
    <comment_count>35</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-01-11 01:39:59 -0500</bug_when>
    <thetext>Released in master via commit b0bd844e638d627fddf9ed3dbc5637db4513a8de</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2049698</commentid>
    <comment_count>36</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2012-01-12 13:54:04 -0500</bug_when>
    <thetext>Released in master via commit 1d9c797e2d535a723d97129a4995a501f060e8fc to fix side effect in apt pluggable tests.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2054511</commentid>
    <comment_count>37</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-01-23 11:15:43 -0500</bug_when>
    <thetext>Verified for 3.8M5 using build I20120122-2000</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2092587</commentid>
    <comment_count>38</comment_count>
    <who name="Sebastian Zarnekow">Sebastian.Zarnekow</who>
    <bug_when>2012-04-12 08:59:59 -0400</bug_when>
    <thetext>I&apos;d like to reopen this since private fields that are annotated with @Inject but not referenced anywhere are also ignored by the unused-member check. This does not seem to be right to me.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2092590</commentid>
    <comment_count>39</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2012-04-12 09:01:18 -0400</bug_when>
    <thetext>(In reply to comment #38)
&gt; I&apos;d like to reopen this since private fields that are annotated with @Inject
&gt; but not referenced anywhere are also ignored by the unused-member check. This
&gt; does not seem to be right to me.

Please file a new bug.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2092605</commentid>
    <comment_count>40</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-04-12 09:14:53 -0400</bug_when>
    <thetext>(In reply to comment #38)
&gt; I&apos;d like to reopen this since private fields that are annotated with @Inject
&gt; but not referenced anywhere are also ignored by the unused-member check. This
&gt; does not seem to be right to me.

This has already been discussed in comment 32 and comment 33.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2092613</commentid>
    <comment_count>41</comment_count>
    <who name="Sebastian Zarnekow">Sebastian.Zarnekow</who>
    <bug_when>2012-04-12 09:26:39 -0400</bug_when>
    <thetext>(In reply to comment #40)
&gt; (In reply to comment #38)
&gt; &gt; I&apos;d like to reopen this since private fields that are annotated with @Inject
&gt; &gt; but not referenced anywhere are also ignored by the unused-member check. This
&gt; &gt; does not seem to be right to me.
&gt; 
&gt; This has already been discussed in comment 32 and comment 33.

The container annotations (@Inject and friends) declare dependencies thus introduce coupling between components. If these dependencies are unused, the tool should warn me about that because I have the chance to reduce coupling simply by removing these unused fields.

There is already a special treatment of @Deprecated (I still get the warning about unused fields). From my perception it may be useful to make a distinction between common used annotations that lead to reading or writing a field. Since @Inject will usually be processed by a writing service, I&apos;d expect a warning if no client reads that field.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2092614</commentid>
    <comment_count>42</comment_count>
    <who name="Sebastian Zarnekow">Sebastian.Zarnekow</who>
    <bug_when>2012-04-12 09:27:19 -0400</bug_when>
    <thetext>Sorry, wrong ticket. I move the discussion to the bug 376590</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>207974</attachid>
            <date>2011-12-06 07:00:00 -0500</date>
            <delta_ts>2012-01-04 10:23:07 -0500</delta_ts>
            <desc>Patch from Olivier</desc>
            <filename>patch_365455.txt</filename>
            <type>text/plain</type>
            <size>27073</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05vbkZhdGFsRXJyb3JU
ZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2Vj
bGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9Ob25GYXRhbEVycm9yVGVz
dC5qYXZhCmluZGV4IDFkMjgzNjcuLjhlMDk1OWMgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21w
aWxlci9yZWdyZXNzaW9uL05vbkZhdGFsRXJyb3JUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Nv
bXBpbGVyL3JlZ3Jlc3Npb24vTm9uRmF0YWxFcnJvclRlc3QuamF2YQpAQCAtMTIsNiArMTIsNyBA
QCBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyLnJlZ3Jlc3Npb247
CiAKIGltcG9ydCBqYXZhLnV0aWwuTWFwOwogCitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVy
bmFsLmNvbXBpbGVyLmNsYXNzZm10LkNsYXNzRmlsZUNvbnN0YW50czsKIGltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuaW1wbC5Db21waWxlck9wdGlvbnM7CiAKIGltcG9y
dCBqdW5pdC5mcmFtZXdvcmsuVGVzdDsKQEAgLTI0LDcgKzI1LDcgQEAgcHVibGljIGNsYXNzIE5v
bkZhdGFsRXJyb3JUZXN0IGV4dGVuZHMgQWJzdHJhY3RSZWdyZXNzaW9uVGVzdCB7CiAJLy8gQWxs
IHNwZWNpZmllZCB0ZXN0cyB3aGljaCBkb2VzIG5vdCBiZWxvbmcgdG8gdGhlIGNsYXNzIGFyZSBz
a2lwcGVkLi4uCiAJc3RhdGljIHsKIC8vCQlURVNUU19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7ICJ0
ZXN0MTI3IiB9OwotLy8JCVRFU1RTX05VTUJFUlMgPSBuZXcgaW50W10geyA1IH07CisvLwkJVEVT
VFNfTlVNQkVSUyA9IG5ldyBpbnRbXSB7IDcgfTsKIC8vCQlURVNUU19SQU5HRSA9IG5ldyBpbnRb
XSB7IDE2OSwgMTgwIH07CiAJfQogCkBAIC0yNTgsNCArMjU5LDQxIEBAIHB1YmxpYyBjbGFzcyBO
b25GYXRhbEVycm9yVGVzdCBleHRlbmRzIEFic3RyYWN0UmVncmVzc2lvblRlc3QgewogCQkJLy8g
amF2YWMgb3B0aW9ucwogCQkJSmF2YWNUZXN0T3B0aW9ucy5FeGN1c2UuRWNsaXBzZVdhcm5pbmdD
b25maWd1cmVkQXNFcnJvciAvKiBqYXZhYyB0ZXN0IG9wdGlvbnMgKi8pOwogCX0KKwlwdWJsaWMg
dm9pZCB0ZXN0MDA3KCkgeworCQlpZiAodGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVD
b25zdGFudHMuSkRLMV81KSB7CisJCQlyZXR1cm47CisJCX0KKwkJTWFwIGN1c3RvbU9wdGlvbnMg
PSBnZXRDb21waWxlck9wdGlvbnMoKTsKKwkJY3VzdG9tT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRp
b25zLk9QVElPTl9GYXRhbE9wdGlvbmFsRXJyb3IsCisJCQkJQ29tcGlsZXJPcHRpb25zLkVOQUJM
RUQpOworCQljdXN0b21PcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydFVu
dXNlZExvY2FsLAorCQkJCUNvbXBpbGVyT3B0aW9ucy5FUlJPUik7CisJCWN1c3RvbU9wdGlvbnMu
cHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJT05fU3VwcHJlc3NXYXJuaW5ncywKKwkJCQlDb21waWxl
ck9wdGlvbnMuRU5BQkxFRCk7CisJCWN1c3RvbU9wdGlvbnMucHV0KENvbXBpbGVyT3B0aW9ucy5P
UFRJT05fU3VwcHJlc3NPcHRpb25hbEVycm9ycywKKwkJCQlDb21waWxlck9wdGlvbnMuRU5BQkxF
RCk7CisJCWN1c3RvbU9wdGlvbnMucHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJT05fUmVwb3J0VW51
c2VkV2FybmluZ1Rva2VuLAorCQkJCUNvbXBpbGVyT3B0aW9ucy5FUlJPUik7CisJCXJ1bkNvbmZv
cm1UZXN0KAorCQkJCW5ldyBTdHJpbmdbXSB7IC8qIHRlc3QgZmlsZXMgKi8KKwkJCQkJCSJYLmph
dmEiLAorCQkJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJCQkJCQkiICAgICAgICBAU3Vw
cHJlc3NXYXJuaW5ncyhcInVudXNlZFwiKVxuIiArCisJCQkJCQkJCSIgICAgICAgIHN0YXRpYyB2
b2lkIGZvbygpIHtcbiIgKworCQkJCQkJCQkiICAgICAgICAgICAgU3RyaW5nIHMgPSBudWxsO1xu
IiArCisJCQkJCQkJCSIgICAgICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oXCJTVUNDRVNTXCIp
O1xuIiArCisJCQkJCQkJCSIgICAgICAgIH1cbiIgKworCQkJCQkJCQkiICAgICAgICBwdWJsaWMg
c3RhdGljIHZvaWQgbWFpbihTdHJpbmcgYXJndltdKSB7XG4iICsKKwkJCQkJCQkJIiAgICAgICAg
ICAgIGZvbygpO1xuIiArCisJCQkJCQkJCSIgICAgICAgIH1cbiIgKworCQkJCQkJCQkifSIKKwkJ
CQl9LAorCQkJCSJTVUNDRVNTIiAvKiBleHBlY3RlZCBvdXRwdXQgc3RyaW5nICovLAorCQkJCW51
bGwgLyogbm8gY2xhc3MgbGlicmFyaWVzICovLAorCQkJCXRydWUsCisJCQkJbnVsbCwKKwkJCQlj
dXN0b21PcHRpb25zIC8qIGN1c3RvbSBvcHRpb25zICovLAorCQkJCS8vIGNvbXBpbGVyIHJlc3Vs
dHMKKwkJCQludWxsIC8qIGRvIG5vdCBjaGVjayBlcnJvciBzdHJpbmcgKi8pOworCX0KIH0KZGlm
ZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9hc3QvQWJzdHJhY3RNZXRob2REZWNsYXJhdGlvbi5qYXZhIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9BYnN0cmFjdE1ldGhvZERlY2xhcmF0aW9uLmphdmEKaW5kZXggZjZkOThmZC4uMzQ1
YmY3MyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BYnN0cmFjdE1ldGhvZERlY2xhcmF0aW9uLmph
dmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2FzdC9BYnN0cmFjdE1ldGhvZERlY2xhcmF0aW9uLmphdmEKQEAgLTM5
Miw2ICszOTIsMTUgQEAgcHVibGljIGFic3RyYWN0IGNsYXNzIEFic3RyYWN0TWV0aG9kRGVjbGFy
YXRpb24KIAkJcmV0dXJuIGZhbHNlOwogCX0KIAorCXB1YmxpYyBib29sZWFuIGlzRmlsdGVyZWQo
Q2F0ZWdvcml6ZWRQcm9ibGVtIHByb2JsZW0pIHsKKwkJaWYgKHRoaXMuc2NvcGUgPT0gbnVsbCkg
cmV0dXJuIGZhbHNlOworCQlDb21waWxhdGlvblVuaXRTY29wZSBjb21waWxhdGlvblVuaXRTY29w
ZSA9IHRoaXMuc2NvcGUuY29tcGlsYXRpb25Vbml0U2NvcGUoKTsKKwkJaWYgKGNvbXBpbGF0aW9u
VW5pdFNjb3BlID09IG51bGwpIHJldHVybiBmYWxzZTsKKwkJQ29tcGlsYXRpb25Vbml0RGVjbGFy
YXRpb24gcmVmZXJlbmNlQ29udGV4dCA9IGNvbXBpbGF0aW9uVW5pdFNjb3BlLnJlZmVyZW5jZUNv
bnRleHQ7CisJCWlmIChyZWZlcmVuY2VDb250ZXh0ID09IG51bGwpIHJldHVybiBmYWxzZTsKKwkJ
cmV0dXJuIHJlZmVyZW5jZUNvbnRleHQuZmlsdGVyUHJvYmxlbShwcm9ibGVtKTsKKwl9CisKIAlw
dWJsaWMgYm9vbGVhbiBpc0luaXRpYWxpemF0aW9uTWV0aG9kKCkgewogCiAJCXJldHVybiBmYWxz
ZTsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQW5ub3RhdGlvbi5qYXZhIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9B
bm5vdGF0aW9uLmphdmEKaW5kZXggYmM3NmFkNy4uYTRiZmY0ZSAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FzdC9Bbm5vdGF0aW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Bbm5vdGF0aW9uLmphdmEKQEAg
LTE2OCwxMiArMTY4LDYgQEAgcHVibGljIGFic3RyYWN0IGNsYXNzIEFubm90YXRpb24gZXh0ZW5k
cyBFeHByZXNzaW9uIHsKIAkJCWNhc2UgVHlwZUlkcy5UX0phdmFMYW5nSW52b2tlTWV0aG9kSGFu
ZGxlUG9seW1vcnBoaWNTaWduYXR1cmUgOgogCQkJCXRhZ0JpdHMgfD0gVGFnQml0cy5Bbm5vdGF0
aW9uUG9seW1vcnBoaWNTaWduYXR1cmU7CiAJCQkJYnJlYWs7Ci0JCQljYXNlIFR5cGVJZHMuVF9K
YXZheEFubm90YXRpb25Qb3N0Q29uc3RydWN0IDoKLQkJCQl0YWdCaXRzIHw9IFRhZ0JpdHMuQW5u
b3RhdGlvblBvc3RDb25zdHJ1Y3Q7Ci0JCQkJYnJlYWs7Ci0JCQljYXNlIFR5cGVJZHMuVF9KYXZh
eEFubm90YXRpb25QcmVEZXN0cm95IDoKLQkJCQl0YWdCaXRzIHw9IFRhZ0JpdHMuQW5ub3RhdGlv
blByZURlc3Ryb3k7Ci0JCQkJYnJlYWs7CiAJCQljYXNlIFR5cGVJZHMuVF9Db25maWd1cmVkQW5u
b3RhdGlvbk51bGxhYmxlIDoKIAkJCQl0YWdCaXRzIHw9IFRhZ0JpdHMuQW5ub3RhdGlvbk51bGxh
YmxlOwogCQkJCWJyZWFrOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Db21waWxhdGlvblVuaXRE
ZWNsYXJhdGlvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Db21waWxhdGlvblVuaXREZWNsYXJhdGlvbi5q
YXZhCmluZGV4IGViNmY2NGEuLjljNGYyOWQgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQ29tcGls
YXRpb25Vbml0RGVjbGFyYXRpb24uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0NvbXBpbGF0aW9uVW5p
dERlY2xhcmF0aW9uLmphdmEKQEAgLTMzOSw3ICszMzksMzUgQEAgcHVibGljIHZvaWQgZmluYWxp
emVQcm9ibGVtcygpIHsKIAkJfQogCX0KIH0KLQorcHVibGljIGJvb2xlYW4gZmlsdGVyUHJvYmxl
bShDYXRlZ29yaXplZFByb2JsZW0gcHJvYmxlbSkgeworCWlmICh0aGlzLnN1cHByZXNzV2Fybmlu
Z3NDb3VudCA9PSAwKSByZXR1cm4gZmFsc2U7CisJQ29tcGlsZXJPcHRpb25zIG9wdGlvbnMgPSB0
aGlzLnNjb3BlLmNvbXBpbGVyT3B0aW9ucygpOworCWludCBwcm9ibGVtSUQgPSBwcm9ibGVtLmdl
dElEKCk7CisJaW50IGlycml0YW50ID0gUHJvYmxlbVJlcG9ydGVyLmdldElycml0YW50KHByb2Js
ZW1JRCk7CisJYm9vbGVhbiBpc0Vycm9yID0gcHJvYmxlbS5pc0Vycm9yKCk7CisJaWYgKGlzRXJy
b3IpIHsKKwkJaWYgKGlycml0YW50ID09IDApIHsKKwkJCXJldHVybiBmYWxzZTsKKwkJfQorCQlp
ZiAoIW9wdGlvbnMuc3VwcHJlc3NPcHRpb25hbEVycm9ycykgeworCQkJcmV0dXJuIGZhbHNlOwor
CQl9CisJfQorCWludCBzdGFydCA9IHByb2JsZW0uZ2V0U291cmNlU3RhcnQoKTsKKwlpbnQgZW5k
ID0gcHJvYmxlbS5nZXRTb3VyY2VFbmQoKTsKKwluZXh0U3VwcHJlc3M6IGZvciAoaW50IGlTdXBw
cmVzcyA9IDAsIHN1cHByZXNzQ291bnQgPSB0aGlzLnN1cHByZXNzV2FybmluZ3NDb3VudDsgaVN1
cHByZXNzIDwgc3VwcHJlc3NDb3VudDsgaVN1cHByZXNzKyspIHsKKwkJbG9uZyBwb3NpdGlvbiA9
IHRoaXMuc3VwcHJlc3NXYXJuaW5nU2NvcGVQb3NpdGlvbnNbaVN1cHByZXNzXTsKKwkJaW50IHN0
YXJ0U3VwcHJlc3MgPSAoaW50KSAocG9zaXRpb24gPj4+IDMyKTsKKwkJaW50IGVuZFN1cHByZXNz
ID0gKGludCkgcG9zaXRpb247CisJCWlmIChzdGFydCA8IHN0YXJ0U3VwcHJlc3MpIGNvbnRpbnVl
IG5leHRTdXBwcmVzczsKKwkJaWYgKGVuZCA+IGVuZFN1cHByZXNzKSBjb250aW51ZSBuZXh0U3Vw
cHJlc3M7CisJCWlmICghdGhpcy5zdXBwcmVzc1dhcm5pbmdJcnJpdGFudHNbaVN1cHByZXNzXS5p
c1NldChpcnJpdGFudCkpCisJCQljb250aW51ZSBuZXh0U3VwcHJlc3M7CisJCS8vIGRpc2NhcmQg
c3VwcHJlc3NlZCB3YXJuaW5nCisJCXJldHVybiB0cnVlOworCX0KKwlyZXR1cm4gZmFsc2U7Cit9
CiAvKioKICAqIEJ5dGVjb2RlIGdlbmVyYXRpb24KICAqLwpAQCAtMzg5LDcgKzQxNywxMiBAQCBw
dWJsaWMgY2hhcltdIGdldE1haW5UeXBlTmFtZSgpIHsKIHB1YmxpYyBib29sZWFuIGlzRW1wdHko
KSB7CiAJcmV0dXJuICh0aGlzLmN1cnJlbnRQYWNrYWdlID09IG51bGwpICYmICh0aGlzLmltcG9y
dHMgPT0gbnVsbCkgJiYgKHRoaXMudHlwZXMgPT0gbnVsbCk7CiB9Ci0KK3B1YmxpYyBib29sZWFu
IGlzRmlsdGVyZWQoQ2F0ZWdvcml6ZWRQcm9ibGVtIHByb2JsZW0pIHsKKwlpZiAodGhpcy5zY29w
ZSA9PSBudWxsKSByZXR1cm4gZmFsc2U7CisJQ29tcGlsYXRpb25Vbml0RGVjbGFyYXRpb24gcmVm
ZXJlbmNlQ29udGV4dCA9IHRoaXMuc2NvcGUucmVmZXJlbmNlQ29udGV4dDsKKwlpZiAocmVmZXJl
bmNlQ29udGV4dCA9PSBudWxsKSByZXR1cm4gZmFsc2U7CisJcmV0dXJuIHJlZmVyZW5jZUNvbnRl
eHQuZmlsdGVyUHJvYmxlbShwcm9ibGVtKTsKK30KIHB1YmxpYyBib29sZWFuIGlzUGFja2FnZUlu
Zm8oKSB7CiAJcmV0dXJuIENoYXJPcGVyYXRpb24uZXF1YWxzKGdldE1haW5UeXBlTmFtZSgpLCBU
eXBlQ29uc3RhbnRzLlBBQ0tBR0VfSU5GT19OQU1FKTsKIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvVHlwZURlY2xhcmF0aW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1R5cGVEZWNsYXJhdGlvbi5qYXZh
CmluZGV4IGY1ZDQxZWEuLjkwYzZlMzEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvVHlwZURlY2xh
cmF0aW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9UeXBlRGVjbGFyYXRpb24uamF2YQpAQCAtNzA5
LDcgKzcwOSwxNCBAQCBwcml2YXRlIHZvaWQgaW50ZXJuYWxBbmFseXNlQ29kZShGbG93Q29udGV4
dCBmbG93Q29udGV4dCwgRmxvd0luZm8gZmxvd0luZm8pIHsKIAkJdGhpcy5lbnVtVmFsdWVzU3lu
dGhldGljZmllbGQgPSB0aGlzLmJpbmRpbmcuYWRkU3ludGhldGljRmllbGRGb3JFbnVtVmFsdWVz
KCk7CiAJfQogfQotCitwdWJsaWMgYm9vbGVhbiBpc0ZpbHRlcmVkKENhdGVnb3JpemVkUHJvYmxl
bSBwcm9ibGVtKSB7CisJaWYgKHRoaXMuc2NvcGUgPT0gbnVsbCkgcmV0dXJuIGZhbHNlOworCUNv
bXBpbGF0aW9uVW5pdFNjb3BlIGNvbXBpbGF0aW9uVW5pdFNjb3BlID0gdGhpcy5zY29wZS5jb21w
aWxhdGlvblVuaXRTY29wZSgpOworCWlmIChjb21waWxhdGlvblVuaXRTY29wZSA9PSBudWxsKSBy
ZXR1cm4gZmFsc2U7CisJQ29tcGlsYXRpb25Vbml0RGVjbGFyYXRpb24gcmVmZXJlbmNlQ29udGV4
dCA9IGNvbXBpbGF0aW9uVW5pdFNjb3BlLnJlZmVyZW5jZUNvbnRleHQ7CisJaWYgKHJlZmVyZW5j
ZUNvbnRleHQgPT0gbnVsbCkgcmV0dXJuIGZhbHNlOworCXJldHVybiByZWZlcmVuY2VDb250ZXh0
LmZpbHRlclByb2JsZW0ocHJvYmxlbSk7Cit9CiBwdWJsaWMgZmluYWwgc3RhdGljIGludCBraW5k
KGludCBmbGFncykgewogCXN3aXRjaCAoZmxhZ3MgJiAoQ2xhc3NGaWxlQ29uc3RhbnRzLkFjY0lu
dGVyZmFjZXxDbGFzc0ZpbGVDb25zdGFudHMuQWNjQW5ub3RhdGlvbnxDbGFzc0ZpbGVDb25zdGFu
dHMuQWNjRW51bSkpIHsKIAkJY2FzZSBDbGFzc0ZpbGVDb25zdGFudHMuQWNjSW50ZXJmYWNlIDoK
ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9jbGFzc2ZtdC9Bbm5vdGF0aW9uSW5mby5qYXZhIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2NsYXNzZm10L0Fubm90YXRpb25JbmZvLmphdmEKaW5kZXggMzM1N2Q3ZC4uZDgxZWMxYyAxMDA2
NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2NsYXNzZm10L0Fubm90YXRpb25JbmZvLmphdmEKKysrIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2NsYXNzZm10L0Fubm90YXRpb25JbmZvLmphdmEKQEAgLTMwMywxMCArMzAzLDYgQEAgcHJpdmF0
ZSBpbnQgc2NhbkFubm90YXRpb24oaW50IG9mZnNldCwgYm9vbGVhbiBleHBlY3RSdW50aW1lVmlz
aWJsZUFubm8sIGJvb2xlYW4KIAkJCQkJY3VycmVudE9mZnNldCArPSAyOwogCQkJCQlyZXR1cm4g
cmVhZFRhcmdldFZhbHVlKGN1cnJlbnRPZmZzZXQpOwogCQkJCX0KLQkJCQlpZiAoQ2hhck9wZXJh
dGlvbi5lcXVhbHModHlwZU5hbWUsIENvbnN0YW50UG9vbC5KQVZBWF9BTk5PVEFUSU9OX1BSRURF
U1RST1kpKSB7Ci0JCQkJCXRoaXMuc3RhbmRhcmRBbm5vdGF0aW9uVGFnQml0cyB8PSBUYWdCaXRz
LkFubm90YXRpb25QcmVEZXN0cm95OwotCQkJCQlyZXR1cm4gY3VycmVudE9mZnNldDsKLQkJCQl9
CiAJCQkJYnJlYWs7CiAJCQljYXNlIDMyOgogCQkJCWlmIChDaGFyT3BlcmF0aW9uLmVxdWFscyh0
eXBlTmFtZSwgQ29uc3RhbnRQb29sLkpBVkFfTEFOR19BTk5PVEFUSU9OX1JFVEVOVElPTikpIHsK
QEAgLTMxNywxMCArMzEzLDYgQEAgcHJpdmF0ZSBpbnQgc2NhbkFubm90YXRpb24oaW50IG9mZnNl
dCwgYm9vbGVhbiBleHBlY3RSdW50aW1lVmlzaWJsZUFubm8sIGJvb2xlYW4KIAkJCQkJdGhpcy5z
dGFuZGFyZEFubm90YXRpb25UYWdCaXRzIHw9IFRhZ0JpdHMuQW5ub3RhdGlvbkluaGVyaXRlZDsK
IAkJCQkJcmV0dXJuIGN1cnJlbnRPZmZzZXQ7CiAJCQkJfQotCQkJCWlmIChDaGFyT3BlcmF0aW9u
LmVxdWFscyh0eXBlTmFtZSwgQ29uc3RhbnRQb29sLkpBVkFYX0FOTk9UQVRJT05fUE9TVENPTlNU
UlVDVCkpIHsKLQkJCQkJdGhpcy5zdGFuZGFyZEFubm90YXRpb25UYWdCaXRzIHw9IFRhZ0JpdHMu
QW5ub3RhdGlvblBvc3RDb25zdHJ1Y3Q7Ci0JCQkJCXJldHVybiBjdXJyZW50T2Zmc2V0OwotCQkJ
CX0KIAkJCQlicmVhazsKIAkJCWNhc2UgMzM6CiAJCQkJaWYgKENoYXJPcGVyYXRpb24uZXF1YWxz
KHR5cGVOYW1lLCBDb25zdGFudFBvb2wuSkFWQV9MQU5HX0FOTk9UQVRJT05fRE9DVU1FTlRFRCkp
IHsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9jb2RlZ2VuL0NvbnN0YW50UG9vbC5qYXZhIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2NvZGVnZW4vQ29uc3RhbnRQb29sLmphdmEKaW5kZXggYzg3NWM5Yi4uYWNhMzVmNiAxMDA2NDQK
LS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2NvZGVnZW4vQ29uc3RhbnRQb29sLmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2NvZGVn
ZW4vQ29uc3RhbnRQb29sLmphdmEKQEAgLTI0OCw4ICsyNDgsNiBAQCBwdWJsaWMgY2xhc3MgQ29u
c3RhbnRQb29sIGltcGxlbWVudHMgQ2xhc3NGaWxlQ29uc3RhbnRzLCBUeXBlSWRzIHsKIAlwdWJs
aWMgc3RhdGljIGZpbmFsIGNoYXJbXSBKQVZBX0xBTkdfU0FGRVZBUkFSR1MgPSAiTGphdmEvbGFu
Zy9TYWZlVmFyYXJnczsiLnRvQ2hhckFycmF5KCk7IC8vJE5PTi1OTFMtMSQKIAkvLyBqYXZhIDcg
amF2YS5sYW5nLmludm9rZS5NZXRob2RIYW5kbGUuaW52b2tlRXhhY3QoLi4pL2ludm9rZUdlbmVy
aWMoLi4pCiAJcHVibGljIHN0YXRpYyBmaW5hbCBjaGFyW10gSkFWQV9MQU5HX0lOVk9LRV9NRVRI
T0RIQU5ETEVfUE9MWU1PUlBISUNTSUdOQVRVUkUgPSAiTGphdmEvbGFuZy9pbnZva2UvTWV0aG9k
SGFuZGxlJFBvbHltb3JwaGljU2lnbmF0dXJlOyIudG9DaGFyQXJyYXkoKTsgLy8kTk9OLU5MUy0x
JAotCXB1YmxpYyBzdGF0aWMgZmluYWwgY2hhcltdIEpBVkFYX0FOTk9UQVRJT05fUE9TVENPTlNU
UlVDVCA9ICJMamF2YXgvYW5ub3RhdGlvbi9Qb3N0Q29uc3RydWN0OyIudG9DaGFyQXJyYXkoKTsg
Ly8kTk9OLU5MUy0xJAotCXB1YmxpYyBzdGF0aWMgZmluYWwgY2hhcltdIEpBVkFYX0FOTk9UQVRJ
T05fUFJFREVTVFJPWSA9ICJMamF2YXgvYW5ub3RhdGlvbi9QcmVEZXN0cm95OyIudG9DaGFyQXJy
YXkoKTsgLy8kTk9OLU5MUy0xJAogCiAJcHVibGljIHN0YXRpYyBmaW5hbCBjaGFyW10gSGFzaENv
ZGUgPSAiaGFzaENvZGUiLnRvQ2hhckFycmF5KCk7IC8vJE5PTi1OTFMtMSQKIAlwdWJsaWMgc3Rh
dGljIGZpbmFsIGNoYXJbXSBIYXNoQ29kZVNpZ25hdHVyZSA9ICIoKUkiLnRvQ2hhckFycmF5KCk7
IC8vJE5PTi1OTFMtMSQ7IApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2ltcGwvUmVmZXJlbmNlQ29udGV4
dC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2ltcGwvUmVmZXJlbmNlQ29udGV4dC5qYXZhCmluZGV4IGVjM2Y3MmIu
LjA4ODVjNTUgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9pbXBsL1JlZmVyZW5jZUNvbnRleHQuamF2YQor
KysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvaW1wbC9SZWZlcmVuY2VDb250ZXh0LmphdmEKQEAgLTEsNSArMSw1IEBACiAv
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDA5IElCTSBD
b3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDExIElCTSBD
b3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9n
cmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxl
IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3
aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdApA
QCAtMjUsNiArMjUsOCBAQCBwdWJsaWMgaW50ZXJmYWNlIFJlZmVyZW5jZUNvbnRleHQgewogCiAJ
Q29tcGlsYXRpb25SZXN1bHQgY29tcGlsYXRpb25SZXN1bHQoKTsKIAorCWJvb2xlYW4gaXNGaWx0
ZXJlZChDYXRlZ29yaXplZFByb2JsZW0gcHJvYmxlbSk7CisKIAlib29sZWFuIGhhc0Vycm9ycygp
OwogCiAJdm9pZCB0YWdBc0hhdmluZ0Vycm9ycygpOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1
cC9Bbm5vdGF0aW9uQmluZGluZy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Bbm5vdGF0aW9uQmluZGlu
Zy5qYXZhCmluZGV4IGM4OGM0YTEuLmM4MDk4YzkgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAv
QW5ub3RhdGlvbkJpbmRpbmcuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0Fubm90YXRpb25CaW5k
aW5nLmphdmEKQEAgLTU0LDExICs1NCwxMCBAQCBwdWJsaWMgc3RhdGljIEFubm90YXRpb25CaW5k
aW5nW10gYWRkU3RhbmRhcmRBbm5vdGF0aW9ucyhBbm5vdGF0aW9uQmluZGluZ1tdIHJlYwogCQlj
b3VudCsrOwogCWlmICgoYW5ub3RhdGlvblRhZ0JpdHMgJiBUYWdCaXRzLkFubm90YXRpb25TYWZl
VmFyYXJncykgIT0gMCkKIAkJY291bnQrKzsKLQlpZiAoKGFubm90YXRpb25UYWdCaXRzICYgVGFn
Qml0cy5Bbm5vdGF0aW9uUG9zdENvbnN0cnVjdCkgIT0gMCkKLQkJY291bnQrKzsKLQlpZiAoKGFu
bm90YXRpb25UYWdCaXRzICYgVGFnQml0cy5Bbm5vdGF0aW9uUHJlRGVzdHJveSkgIT0gMCkKLQkJ
Y291bnQrKzsKLQkvLyBjb3VudCBtdXN0IGJlIGRpZmZlcmVudCBmcm9tIDAKKwlpZiAoY291bnQg
PT0gMCkgeworCQkvLyB0aGlzIGlzIHBvc3NpYmxlIGlmIGJpdHMgd2VyZSBzZXQgZm9yIG51bGwg
YW5ub3RhdGlvbnMKKwkJcmV0dXJuIHJlY29yZGVkQW5ub3RhdGlvbnM7CisJfQogCiAJaW50IGlu
ZGV4ID0gcmVjb3JkZWRBbm5vdGF0aW9ucy5sZW5ndGg7CiAJQW5ub3RhdGlvbkJpbmRpbmdbXSBy
ZXN1bHQgPSBuZXcgQW5ub3RhdGlvbkJpbmRpbmdbaW5kZXggKyBjb3VudF07CkBAIC04MSwxMCAr
ODAsNiBAQCBwdWJsaWMgc3RhdGljIEFubm90YXRpb25CaW5kaW5nW10gYWRkU3RhbmRhcmRBbm5v
dGF0aW9ucyhBbm5vdGF0aW9uQmluZGluZ1tdIHJlYwogCQlyZXN1bHRbaW5kZXgrK10gPSBidWls
ZE1hcmtlckFubm90YXRpb25Gb3JNZW1iZXJUeXBlKFR5cGVDb25zdGFudHMuSkFWQV9MQU5HX0lO
Vk9LRV9NRVRIT0RIQU5ETEVfJF9QT0xZTU9SUEhJQ1NJR05BVFVSRSwgZW52KTsKIAlpZiAoKGFu
bm90YXRpb25UYWdCaXRzICYgVGFnQml0cy5Bbm5vdGF0aW9uU2FmZVZhcmFyZ3MpICE9IDApCiAJ
CXJlc3VsdFtpbmRleCsrXSA9IGJ1aWxkTWFya2VyQW5ub3RhdGlvbihUeXBlQ29uc3RhbnRzLkpB
VkFfTEFOR19TQUZFVkFSQVJHUywgZW52KTsKLQlpZiAoKGFubm90YXRpb25UYWdCaXRzICYgVGFn
Qml0cy5Bbm5vdGF0aW9uUG9zdENvbnN0cnVjdCkgIT0gMCkKLQkJcmVzdWx0W2luZGV4KytdID0g
YnVpbGRNYXJrZXJBbm5vdGF0aW9uKFR5cGVDb25zdGFudHMuSkFWQVhfQU5OT1RBVElPTl9QT1NU
Q09OU1RSVUNULCBlbnYpOwotCWlmICgoYW5ub3RhdGlvblRhZ0JpdHMgJiBUYWdCaXRzLkFubm90
YXRpb25QcmVEZXN0cm95KSAhPSAwKQotCQlyZXN1bHRbaW5kZXgrK10gPSBidWlsZE1hcmtlckFu
bm90YXRpb24oVHlwZUNvbnN0YW50cy5KQVZBWF9BTk5PVEFUSU9OX1BSRURFU1RST1ksIGVudik7
CiAJcmV0dXJuIHJlc3VsdDsKIH0KIApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9SZWZlcmVu
Y2VCaW5kaW5nLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1JlZmVyZW5jZUJpbmRpbmcuamF2YQppbmRl
eCA3NWRlODU0Li44Njg2ODZmIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1JlZmVyZW5jZUJp
bmRpbmcuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1JlZmVyZW5jZUJpbmRpbmcuamF2YQpAQCAt
MzgwLDI4ICszODAsMTQgQEAgcHVibGljIHZvaWQgY29tcHV0ZUlkKCkgewogCXN3aXRjaCAodGhp
cy5jb21wb3VuZE5hbWUubGVuZ3RoKSB7CiAKIAkJY2FzZSAzIDoKLQkJCWlmICghQ2hhck9wZXJh
dGlvbi5lcXVhbHMoVHlwZUNvbnN0YW50cy5KQVZBLCB0aGlzLmNvbXBvdW5kTmFtZVswXSkKLQkJ
CQkJJiYgIUNoYXJPcGVyYXRpb24uZXF1YWxzKFR5cGVDb25zdGFudHMuSkFWQVgsIHRoaXMuY29t
cG91bmROYW1lWzBdKSkKKwkJCWlmICghQ2hhck9wZXJhdGlvbi5lcXVhbHMoVHlwZUNvbnN0YW50
cy5KQVZBLCB0aGlzLmNvbXBvdW5kTmFtZVswXSkpCiAJCQkJcmV0dXJuOwotCQkJCisKIAkJCWNo
YXJbXSBwYWNrYWdlTmFtZSA9IHRoaXMuY29tcG91bmROYW1lWzFdOwogCQkJaWYgKHBhY2thZ2VO
YW1lLmxlbmd0aCA9PSAwKSByZXR1cm47IC8vIGp1c3QgdG8gYmUgc2FmZQogCQkJY2hhcltdIHR5
cGVOYW1lID0gdGhpcy5jb21wb3VuZE5hbWVbMl07CiAJCQlpZiAodHlwZU5hbWUubGVuZ3RoID09
IDApIHJldHVybjsgLy8ganVzdCB0byBiZSBzYWZlCiAJCQkvLyByZW1haW5pbmcgdHlwZXMgTVVT
VCBiZSBpbiBqYXZhLiouKgotCQkJaWYgKENoYXJPcGVyYXRpb24uZXF1YWxzKFR5cGVDb25zdGFu
dHMuSkFWQVgsIHRoaXMuY29tcG91bmROYW1lWzBdKSkgewotCQkJCWlmIChDaGFyT3BlcmF0aW9u
LmVxdWFscyhUeXBlQ29uc3RhbnRzLkFOTk9UQVRJT04sIHRoaXMuY29tcG91bmROYW1lWzFdKSkg
ewotCQkJCQlzd2l0Y2ggKHR5cGVOYW1lWzBdKSB7Ci0JCQkJCQljYXNlICdQJyA6Ci0JCQkJCQkJ
aWYgKENoYXJPcGVyYXRpb24uZXF1YWxzKHR5cGVOYW1lLCBUeXBlQ29uc3RhbnRzLkpBVkFYX0FO
Tk9UQVRJT05fUE9TVENPTlNUUlVDVFsyXSkpCi0JCQkJCQkJCXRoaXMuaWQgPSBUeXBlSWRzLlRf
SmF2YXhBbm5vdGF0aW9uUG9zdENvbnN0cnVjdDsKLQkJCQkJCQlpZiAoQ2hhck9wZXJhdGlvbi5l
cXVhbHModHlwZU5hbWUsIFR5cGVDb25zdGFudHMuSkFWQVhfQU5OT1RBVElPTl9QUkVERVNUUk9Z
WzJdKSkKLQkJCQkJCQkJdGhpcy5pZCA9IFR5cGVJZHMuVF9KYXZheEFubm90YXRpb25QcmVEZXN0
cm95OwotCQkJCQkJCXJldHVybjsKLQkJCQkJfQotCQkJCX0KLQkJCQlyZXR1cm47Ci0JCQl9CiAJ
CQlpZiAoIUNoYXJPcGVyYXRpb24uZXF1YWxzKFR5cGVDb25zdGFudHMuTEFORywgdGhpcy5jb21w
b3VuZE5hbWVbMV0pKSB7CiAJCQkJc3dpdGNoIChwYWNrYWdlTmFtZVswXSkgewogCQkJCQljYXNl
ICdpJyA6CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1RhZ0JpdHMuamF2YSBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9s
b29rdXAvVGFnQml0cy5qYXZhCmluZGV4IDliYTZkYTAuLjE0ZTk2MTAgMTAwNjQ0Ci0tLSBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9sb29rdXAvVGFnQml0cy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvVGFnQml0cy5qYXZh
CkBAIC0xMjksMTAgKzEyOSw2IEBAIHB1YmxpYyBpbnRlcmZhY2UgVGFnQml0cyB7CiAJbG9uZyBB
bm5vdGF0aW9uU2FmZVZhcmFyZ3MgPSBBU1ROb2RlLkJpdDUyTDsKIAkvKiogQHNpbmNlIDMuNyAt
IGphdmEgNyBNZXRob2RIYW5kbGUuaW52b2tlRXhhY3QoLi4pL2ludm9rZUdlbmVyaWMoLi4pKi8K
IAlsb25nIEFubm90YXRpb25Qb2x5bW9ycGhpY1NpZ25hdHVyZSA9IEFTVE5vZGUuQml0NTNMOwot
CS8qKiBAc2luY2UgMy44ICovCi0JbG9uZyBBbm5vdGF0aW9uUHJlRGVzdHJveSA9IEFTVE5vZGUu
Qml0NTRMOwotCS8qKiBAc2luY2UgMy44ICovCi0JbG9uZyBBbm5vdGF0aW9uUG9zdENvbnN0cnVj
dCA9IEFTVE5vZGUuQml0NTVMOwogCS8qKiBAc2luY2UgMy44IG51bGwgYW5ub3RhdGlvbiBmb3Ig
TWV0aG9kQmluZGluZyBvciBMb2NhbFZhcmlhYmxlQmluZGluZyAoYXJndW1lbnQpOiAqLwogCWxv
bmcgQW5ub3RhdGlvbk51bGxhYmxlID0gQVNUTm9kZS5CaXQ1Nkw7CiAJLyoqIEBzaW5jZSAzLjgg
bnVsbCBhbm5vdGF0aW9uIGZvciBNZXRob2RCaW5kaW5nIG9yIExvY2FsVmFyaWFibGVCaW5kaW5n
IChhcmd1bWVudCk6ICovCkBAIC0xNTIsOCArMTQ4LDYgQEAgcHVibGljIGludGVyZmFjZSBUYWdC
aXRzIHsKIAkJCQl8IEFubm90YXRpb25TdXBwcmVzc1dhcm5pbmdzCiAJCQkJfCBBbm5vdGF0aW9u
U2FmZVZhcmFyZ3MKIAkJCQl8IEFubm90YXRpb25Qb2x5bW9ycGhpY1NpZ25hdHVyZQotCQkJCXwg
QW5ub3RhdGlvblBvc3RDb25zdHJ1Y3QKLQkJCQl8IEFubm90YXRpb25QcmVEZXN0cm95CiAJCQkJ
fCBBbm5vdGF0aW9uTnVsbGFibGUKIAkJCQl8IEFubm90YXRpb25Ob25OdWxsCiAJCQkJfCBBbm5v
dGF0aW9uTm9uTnVsbEJ5RGVmYXVsdApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9UeXBlQ29u
c3RhbnRzLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1R5cGVDb25zdGFudHMuamF2YQppbmRleCAwYmJl
ZjQ3Li42YTk2MTE5IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1R5cGVDb25zdGFudHMuamF2
YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvbG9va3VwL1R5cGVDb25zdGFudHMuamF2YQpAQCAtMTc3LDE4ICsxNzcs
NiBAQCBwdWJsaWMgaW50ZXJmYWNlIFR5cGVDb25zdGFudHMgewogCWNoYXJbXSBTWU5USEVUSUNf
QUNDRVNTX01FVEhPRF9QUkVGSVggPSAgImFjY2VzcyQiLnRvQ2hhckFycmF5KCk7IC8vJE5PTi1O
TFMtMSQKIAljaGFyW10gU1lOVEhFVElDX0VOVU1fQ09OU1RBTlRfSU5JVElBTElaQVRJT05fTUVU
SE9EX1BSRUZJWCA9ICAiIGVudW0gY29uc3RhbnQgaW5pdGlhbGl6YXRpb24kIi50b0NoYXJBcnJh
eSgpOyAvLyROT04tTkxTLTEkCiAJY2hhcltdIFNZTlRIRVRJQ19TVEFUSUNfRkFDVE9SWSA9ICAi
PGZhY3Rvcnk+Ii50b0NoYXJBcnJheSgpOyAvLyROT04tTkxTLTEkCi0JY2hhcltdW10gSkFWQVhf
QU5OT1RBVElPTl9QT1NUQ09OU1RSVUNUID0KLQkJCW5ldyBjaGFyW11bXSB7Ci0JCQkJSkFWQVgs
Ci0JCQkJQU5OT1RBVElPTiwKLQkJCQkiUG9zdENvbnN0cnVjdCIudG9DaGFyQXJyYXkoKSAvLyRO
T04tTkxTLTEkCi0JCQl9OwotCWNoYXJbXVtdIEpBVkFYX0FOTk9UQVRJT05fUFJFREVTVFJPWSA9
Ci0JCQluZXcgY2hhcltdW10gewotCQkJCUpBVkFYLAotCQkJCUFOTk9UQVRJT04sCi0JCQkJIlBy
ZURlc3Ryb3kiLnRvQ2hhckFycmF5KCkgLy8kTk9OLU5MUy0xJAotCQkJfTsKIAogCS8vIHN5bnRo
ZXRpYyBwYWNrYWdlLWluZm8gbmFtZQogCXB1YmxpYyBzdGF0aWMgZmluYWwgY2hhcltdIFBBQ0tB
R0VfSU5GT19OQU1FID0gInBhY2thZ2UtaW5mbyIudG9DaGFyQXJyYXkoKTsgLy8kTk9OLU5MUy0x
JApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9UeXBlSWRzLmphdmEgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3Vw
L1R5cGVJZHMuamF2YQppbmRleCA3ZmZmNDM0Li41ZjNhMWM0IDEwMDY0NAotLS0gYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
bG9va3VwL1R5cGVJZHMuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1R5cGVJZHMuamF2YQpAQCAt
MTAwLDExICsxMDAsNiBAQCBwdWJsaWMgaW50ZXJmYWNlIFR5cGVJZHMgewogCiAJLy8gamF2YSA3
IGphdmEubGFuZy5BdXRvQ2xvc2VhYmxlCiAJZmluYWwgaW50IFRfSmF2YUxhbmdBdXRvQ2xvc2Vh
YmxlID0gNjI7Ci0KLQkvLyBuZXcgaW4gMy44Ci0JZmluYWwgaW50IFRfSmF2YXhBbm5vdGF0aW9u
UG9zdENvbnN0cnVjdCA9IDYzOwotCi0JZmluYWwgaW50IFRfSmF2YXhBbm5vdGF0aW9uUHJlRGVz
dHJveSA9IDY0OwogCQogCS8vIG5ldyBpbiAzLjggZm9yIG51bGwgYW5ub3RhdGlvbnM6CiAJZmlu
YWwgaW50IFRfQ29uZmlndXJlZEFubm90YXRpb25OdWxsYWJsZSA9IDY1OwpkaWZmIC0tZ2l0IGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL3Byb2JsZW0vUHJvYmxlbUhhbmRsZXIuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL1Byb2Js
ZW1IYW5kbGVyLmphdmEKaW5kZXggNmJhYWQ5OS4uM2E0NjUzOSAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L3Byb2JsZW0vUHJvYmxlbUhhbmRsZXIuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9Qcm9ibGVt
SGFuZGxlci5qYXZhCkBAIC0xLDUgKzEsNSBAQAogLyoqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAq
IENvcHlyaWdodCAoYykgMjAwMCwgMjAwOSBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAq
IENvcHlyaWdodCAoYykgMjAwMCwgMjAxMSBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAq
IEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBt
YXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVj
bGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0
cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKQEAgLTE1MCw2ICsxNTAsMTAgQEAgcHVibGlj
IHZvaWQgaGFuZGxlKAogCQljYXNlIFByb2JsZW1TZXZlcml0aWVzLkVycm9yIDoKIAkJCXJlY29y
ZChwcm9ibGVtLCB1bml0UmVzdWx0LCByZWZlcmVuY2VDb250ZXh0KTsKIAkJCWlmICgoc2V2ZXJp
dHkgJiBQcm9ibGVtU2V2ZXJpdGllcy5GYXRhbCkgIT0gMCkgeworCQkJCWlmICgoc2V2ZXJpdHkg
JiBQcm9ibGVtU2V2ZXJpdGllcy5PcHRpb25hbCkgIT0gMCAmJiByZWZlcmVuY2VDb250ZXh0Lmlz
RmlsdGVyZWQocHJvYmxlbSkpIHsKKwkJCQkJLy8gZG9uJ3QgYWJvcnQgZm9yIG9wdGlvbmFsIHBy
b2JsZW0gdHJlYXRlZCBhcyBmYXRhbCBpZiBpZ25vcmVkIHdpdGggQFN1cHByZXNzV2FybmluZ3MK
KwkJCQkJcmV0dXJuOworCQkJCX0KIAkJCQlyZWZlcmVuY2VDb250ZXh0LnRhZ0FzSGF2aW5nRXJy
b3JzKCk7CiAJCQkJLy8gc2hvdWxkIGFib3J0ID8KIAkJCQlpbnQgYWJvcnRMZXZlbDsKZGlmZiAt
LWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9wcm9ibGVtL1Byb2JsZW1SZXBvcnRlci5qYXZhIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2Js
ZW0vUHJvYmxlbVJlcG9ydGVyLmphdmEKaW5kZXggOWI4MzkzMy4uNzkzNDkwMCAxMDA2NDQKLS0t
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxlbVJlcG9ydGVyLmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2Js
ZW0vUHJvYmxlbVJlcG9ydGVyLmphdmEKQEAgLTg4LDYgKzg4LDcgQEAgaW1wb3J0IG9yZy5lY2xp
cHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5lbnYuSUNvbXBpbGF0aW9uVW5pdDsKIGltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuZmxvdy5GbG93SW5mbzsKIGltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuaW1wbC5Db21waWxlck9wdGlvbnM7CiBp
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmltcGwuUmVmZXJlbmNlQ29u
dGV4dDsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkFu
bm90YXRpb25CaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxl
ci5sb29rdXAuQXJyYXlCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b21waWxlci5sb29rdXAuQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwu
Y29tcGlsZXIubG9va3VwLkV4dHJhQ29tcGlsZXJNb2RpZmllcnM7CkBAIC03NjkxLDkgKzc2OTIs
MTYgQEAgcHVibGljIHZvaWQgdW51c2VkUHJpdmF0ZU1ldGhvZChBYnN0cmFjdE1ldGhvZERlY2xh
cmF0aW9uIG1ldGhvZERlY2wpIHsKIAkJCSYmIENoYXJPcGVyYXRpb24uZXF1YWxzKG1ldGhvZC5z
ZWxlY3RvciwgVHlwZUNvbnN0YW50cy5XUklURVJFUExBQ0UpKSB7CiAJCXJldHVybjsKIAl9Ci0J
aWYgKChtZXRob2QudGFnQml0cyAmIChUYWdCaXRzLkFubm90YXRpb25Qb3N0Q29uc3RydWN0IHwg
VGFnQml0cy5Bbm5vdGF0aW9uUHJlRGVzdHJveSkpICE9IDApIHsKLQkJLy8gUG9zdENvbnN0cnVj
dCBhbmQgUHJlRGVzdHJveSBtZXRob2QgYXJlIGlnbm9yZWQKLQkJcmV0dXJuOworCUFubm90YXRp
b25CaW5kaW5nW10gYW5ub3RhdGlvbnMgPSBtZXRob2QuZ2V0QW5ub3RhdGlvbnMoKTsKKwlpbnQg
YW5ub3RhdGlvbnNMZW5ndGggPSBhbm5vdGF0aW9ucy5sZW5ndGg7CisJaWYgKGFubm90YXRpb25z
TGVuZ3RoID4gMCkgeworCQlmb3IgKGludCBpID0gMDsgaSA8IGFubm90YXRpb25zTGVuZ3RoOyBp
KyspIHsKKwkJCWNoYXJbXVtdIGFubm90YXRpb25OYW1lID0gYW5ub3RhdGlvbnNbMF0uZ2V0QW5u
b3RhdGlvblR5cGUoKS5jb21wb3VuZE5hbWU7CisJCQlpZiAoYW5ub3RhdGlvbk5hbWUubGVuZ3Ro
ID4gMQorCQkJCQkmJiBDaGFyT3BlcmF0aW9uLmVxdWFscyhhbm5vdGF0aW9uTmFtZVswXSwgVHlw
ZUNvbnN0YW50cy5KQVZBWCkpIHsKKwkJCQlyZXR1cm47CisJCQl9CisJCX0KIAl9CiAJdGhpcy5o
YW5kbGUoCiAJCQlJUHJvYmxlbS5VbnVzZWRQcml2YXRlTWV0aG9kLApkaWZmIC0tZ2l0IGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvQmlu
YXJ5TWVtYmVyLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29yZS9CaW5hcnlNZW1iZXIuamF2YQppbmRleCA5NGU2ZGIxLi42MDMwMGNh
IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29yZS9CaW5hcnlNZW1iZXIuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9CaW5hcnlNZW1iZXIuamF2YQpA
QCAtODcsMTIgKzg3LDYgQEAgcHJvdGVjdGVkIElBbm5vdGF0aW9uW10gZ2V0U3RhbmRhcmRBbm5v
dGF0aW9ucyhsb25nIHRhZ0JpdHMpIHsKIAlpZiAoKHRhZ0JpdHMgJiBUYWdCaXRzLkFubm90YXRp
b25TYWZlVmFyYXJncykgIT0gMCkgewogCQlhbm5vdGF0aW9ucy5hZGQoZ2V0QW5ub3RhdGlvbihU
eXBlQ29uc3RhbnRzLkpBVkFfTEFOR19TQUZFVkFSQVJHUykpOwogCX0KLQlpZiAoKHRhZ0JpdHMg
JiBUYWdCaXRzLkFubm90YXRpb25Qb3N0Q29uc3RydWN0KSAhPSAwKSB7Ci0JCWFubm90YXRpb25z
LmFkZChnZXRBbm5vdGF0aW9uKFR5cGVDb25zdGFudHMuSkFWQVhfQU5OT1RBVElPTl9QT1NUQ09O
U1RSVUNUKSk7Ci0JfQotCWlmICgodGFnQml0cyAmIFRhZ0JpdHMuQW5ub3RhdGlvblByZURlc3Ry
b3kpICE9IDApIHsKLQkJYW5ub3RhdGlvbnMuYWRkKGdldEFubm90YXRpb24oVHlwZUNvbnN0YW50
cy5KQVZBWF9BTk5PVEFUSU9OX1BSRURFU1RST1kpKTsKLQl9CiAJLy8gbm90ZSB0aGF0IEpBVkFf
TEFOR19TVVBQUkVTU1dBUk5JTkdTIGFuZCBKQVZBX0xBTkdfT1ZFUlJJREUgY2Fubm90IGFwcGVh
ciBpbiBiaW5hcmllcwogCXJldHVybiAoSUFubm90YXRpb25bXSkgYW5ub3RhdGlvbnMudG9BcnJh
eShuZXcgSUFubm90YXRpb25bYW5ub3RhdGlvbnMuc2l6ZSgpXSk7CiB9CmRpZmYgLS1naXQgYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9D
bGFzc0ZpbGVJbmZvLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29yZS9DbGFzc0ZpbGVJbmZvLmphdmEKaW5kZXggYmNmN2NlYi4uMTM2
MTJhNSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvcmUvQ2xhc3NGaWxlSW5mby5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0NsYXNzRmlsZUluZm8u
amF2YQpAQCAtMTA4LDEyICsxMDgsNiBAQCBwcml2YXRlIHZvaWQgZ2VuZXJhdGVTdGFuZGFyZEFu
bm90YXRpb25zSW5mb3MoSmF2YUVsZW1lbnQgamF2YUVsZW1lbnQsIGNoYXJbXSBwYQogCWlmICgo
dGFnQml0cyAmIFRhZ0JpdHMuQW5ub3RhdGlvblNhZmVWYXJhcmdzKSAhPSAwKSB7CiAJCWdlbmVy
YXRlU3RhbmRhcmRBbm5vdGF0aW9uKGphdmFFbGVtZW50LCBUeXBlQ29uc3RhbnRzLkpBVkFfTEFO
R19TQUZFVkFSQVJHUywgQW5ub3RhdGlvbi5OT19NRU1CRVJfVkFMVUVfUEFJUlMsIG5ld0VsZW1l
bnRzKTsKIAl9Ci0JaWYgKCh0YWdCaXRzICYgVGFnQml0cy5Bbm5vdGF0aW9uUG9zdENvbnN0cnVj
dCkgIT0gMCkgewotCQlnZW5lcmF0ZVN0YW5kYXJkQW5ub3RhdGlvbihqYXZhRWxlbWVudCwgVHlw
ZUNvbnN0YW50cy5KQVZBWF9BTk5PVEFUSU9OX1BPU1RDT05TVFJVQ1QsIEFubm90YXRpb24uTk9f
TUVNQkVSX1ZBTFVFX1BBSVJTLCBuZXdFbGVtZW50cyk7Ci0JfQotCWlmICgodGFnQml0cyAmIFRh
Z0JpdHMuQW5ub3RhdGlvblByZURlc3Ryb3kpICE9IDApIHsKLQkJZ2VuZXJhdGVTdGFuZGFyZEFu
bm90YXRpb24oamF2YUVsZW1lbnQsIFR5cGVDb25zdGFudHMuSkFWQVhfQU5OT1RBVElPTl9QUkVE
RVNUUk9ZLCBBbm5vdGF0aW9uLk5PX01FTUJFUl9WQUxVRV9QQUlSUywgbmV3RWxlbWVudHMpOwot
CX0KIAkvLyBub3RlIHRoYXQgSkFWQV9MQU5HX1NVUFBSRVNTV0FSTklOR1MgYW5kIEpBVkFfTEFO
R19PVkVSUklERSBjYW5ub3QgYXBwZWFyIGluIGJpbmFyaWVzCiB9CiAKZGlmZiAtLWdpdCBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9z
ZWFyY2gvaW5kZXhpbmcvQmluYXJ5SW5kZXhlci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
c2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9pbmRleGluZy9CaW5h
cnlJbmRleGVyLmphdmEKaW5kZXggYzI0MmZiNS4uYmNiMDQwMSAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJj
aC9pbmRleGluZy9CaW5hcnlJbmRleGVyLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
c2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9pbmRleGluZy9CaW5h
cnlJbmRleGVyLmphdmEKQEAgLTQ2LDYgKzQ2LDkgQEAgcHVibGljIGNsYXNzIEJpbmFyeUluZGV4
ZXIgZXh0ZW5kcyBBYnN0cmFjdEluZGV4ZXIgaW1wbGVtZW50cyBTdWZmaXhDb25zdGFudHMgewog
CQlzdXBlcihkb2N1bWVudCk7CiAJfQogCXByaXZhdGUgdm9pZCBhZGRCaW5hcnlTdGFuZGFyZEFu
bm90YXRpb25zKGxvbmcgYW5ub3RhdGlvblRhZ0JpdHMpIHsKKwkJaWYgKChhbm5vdGF0aW9uVGFn
Qml0cyAmIFRhZ0JpdHMuQWxsU3RhbmRhcmRBbm5vdGF0aW9uc01hc2spID09IDApIHsKKwkJCXJl
dHVybjsKKwkJfQogCQlpZiAoKGFubm90YXRpb25UYWdCaXRzICYgVGFnQml0cy5Bbm5vdGF0aW9u
VGFyZ2V0TUFTSykgIT0gMCkgewogCQkJY2hhcltdW10gY29tcG91bmROYW1lID0gVHlwZUNvbnN0
YW50cy5KQVZBX0xBTkdfQU5OT1RBVElPTl9UQVJHRVQ7CiAJCQlhZGRBbm5vdGF0aW9uVHlwZVJl
ZmVyZW5jZShjb21wb3VuZE5hbWVbY29tcG91bmROYW1lLmxlbmd0aC0xXSk7CkBAIC04NSwxNCAr
ODgsNiBAQCBwdWJsaWMgY2xhc3MgQmluYXJ5SW5kZXhlciBleHRlbmRzIEFic3RyYWN0SW5kZXhl
ciBpbXBsZW1lbnRzIFN1ZmZpeENvbnN0YW50cyB7CiAJCQkJCVR5cGVDb25zdGFudHMuSkFWQV9M
QU5HX0lOVk9LRV9NRVRIT0RIQU5ETEVfJF9QT0xZTU9SUEhJQ1NJR05BVFVSRTsKIAkJCWFkZEFu
bm90YXRpb25UeXBlUmVmZXJlbmNlKGNvbXBvdW5kTmFtZVtjb21wb3VuZE5hbWUubGVuZ3RoLTFd
KTsKIAkJfQotCQlpZiAoKGFubm90YXRpb25UYWdCaXRzICYgVGFnQml0cy5Bbm5vdGF0aW9uUG9z
dENvbnN0cnVjdCkgIT0gMCkgewotCQkJY2hhcltdW10gY29tcG91bmROYW1lID0gVHlwZUNvbnN0
YW50cy5KQVZBWF9BTk5PVEFUSU9OX1BPU1RDT05TVFJVQ1Q7Ci0JCQlhZGRBbm5vdGF0aW9uVHlw
ZVJlZmVyZW5jZShjb21wb3VuZE5hbWVbY29tcG91bmROYW1lLmxlbmd0aC0xXSk7Ci0JCX0KLQkJ
aWYgKChhbm5vdGF0aW9uVGFnQml0cyAmIFRhZ0JpdHMuQW5ub3RhdGlvblByZURlc3Ryb3kpICE9
IDApIHsKLQkJCWNoYXJbXVtdIGNvbXBvdW5kTmFtZSA9IFR5cGVDb25zdGFudHMuSkFWQVhfQU5O
T1RBVElPTl9QUkVERVNUUk9ZOwotCQkJYWRkQW5ub3RhdGlvblR5cGVSZWZlcmVuY2UoY29tcG91
bmROYW1lW2NvbXBvdW5kTmFtZS5sZW5ndGgtMV0pOwotCQl9CiAJfQogCXByaXZhdGUgdm9pZCBh
ZGRCaW5hcnlUYXJnZXRBbm5vdGF0aW9uKGxvbmcgYml0cykgewogCQljaGFyW11bXSBjb21wb3Vu
ZE5hbWUgPSBudWxsOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9tYXRjaGluZy9DbGFzc0ZpbGVNYXRj
aExvY2F0b3IuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gvbWF0Y2hpbmcvQ2xhc3NGaWxlTWF0Y2hMb2NhdG9yLmph
dmEKaW5kZXggMzc2MDhhYS4uMDdiNTQ0MiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9tYXRjaGluZy9D
bGFzc0ZpbGVNYXRjaExvY2F0b3IuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFy
Y2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNoL21hdGNoaW5nL0NsYXNzRmls
ZU1hdGNoTG9jYXRvci5qYXZhCkBAIC05MCw2ICs5MCw5IEBAIHByaXZhdGUgYm9vbGVhbiBjaGVj
a1BhcmFtZXRlcnMoY2hhcltdIG1ldGhvZERlc2NyaXB0b3IsIGNoYXJbXVtdIHBhcmFtZXRlclNp
bXBsCiAJcmV0dXJuIHRydWU7CiB9CiBwcml2YXRlIGJvb2xlYW4gY2hlY2tTdGFuZGFyZEFubm90
YXRpb25zKGxvbmcgYW5ub3RhdGlvblRhZ0JpdHMsIFR5cGVSZWZlcmVuY2VQYXR0ZXJuIHBhdHRl
cm4pIHsKKwlpZiAoKGFubm90YXRpb25UYWdCaXRzICYgVGFnQml0cy5BbGxTdGFuZGFyZEFubm90
YXRpb25zTWFzaykgPT0gMCkgeworCQlyZXR1cm4gZmFsc2U7CisJfQogCWlmICgoYW5ub3RhdGlv
blRhZ0JpdHMgJiBUYWdCaXRzLkFubm90YXRpb25UYXJnZXRNQVNLKSAhPSAwKSB7CiAJCWNoYXJb
XVtdIGNvbXBvdW5kTmFtZSA9IFR5cGVDb25zdGFudHMuSkFWQV9MQU5HX0FOTk9UQVRJT05fVEFS
R0VUOwogCQlpZiAoY2hlY2tBbm5vdGF0aW9uVHlwZVJlZmVyZW5jZShDaGFyT3BlcmF0aW9uLmNv
bmNhdFdpdGgoY29tcG91bmROYW1lLCAnLicpLCBwYXR0ZXJuKSB8fApAQCAtMTQ2LDE4ICsxNDks
NiBAQCBwcml2YXRlIGJvb2xlYW4gY2hlY2tTdGFuZGFyZEFubm90YXRpb25zKGxvbmcgYW5ub3Rh
dGlvblRhZ0JpdHMsIFR5cGVSZWZlcmVuY2VQYQogCQkJcmV0dXJuIHRydWU7CiAJCX0KIAl9Ci0J
aWYgKChhbm5vdGF0aW9uVGFnQml0cyAmIFRhZ0JpdHMuQW5ub3RhdGlvblBvc3RDb25zdHJ1Y3Qp
ICE9IDApIHsKLQkJY2hhcltdW10gY29tcG91bmROYW1lID0gVHlwZUNvbnN0YW50cy5KQVZBWF9B
Tk5PVEFUSU9OX1BPU1RDT05TVFJVQ1Q7Ci0JCWlmIChjaGVja0Fubm90YXRpb25UeXBlUmVmZXJl
bmNlKENoYXJPcGVyYXRpb24uY29uY2F0V2l0aChjb21wb3VuZE5hbWUsICcuJyksIHBhdHRlcm4p
KSB7Ci0JCQlyZXR1cm4gdHJ1ZTsKLQkJfQotCX0KLQlpZiAoKGFubm90YXRpb25UYWdCaXRzICYg
VGFnQml0cy5Bbm5vdGF0aW9uUHJlRGVzdHJveSkgIT0gMCkgewotCQljaGFyW11bXSBjb21wb3Vu
ZE5hbWUgPSBUeXBlQ29uc3RhbnRzLkpBVkFYX0FOTk9UQVRJT05fUFJFREVTVFJPWTsKLQkJaWYg
KGNoZWNrQW5ub3RhdGlvblR5cGVSZWZlcmVuY2UoQ2hhck9wZXJhdGlvbi5jb25jYXRXaXRoKGNv
bXBvdW5kTmFtZSwgJy4nKSwgcGF0dGVybikpIHsKLQkJCXJldHVybiB0cnVlOwotCQl9Ci0JfQog
CXJldHVybiBmYWxzZTsKIH0KIHByaXZhdGUgYm9vbGVhbiBjaGVja1R5cGVOYW1lKGNoYXJbXSBz
aW1wbGVOYW1lLCBjaGFyW10gcXVhbGlmaWNhdGlvbiwgY2hhcltdIGZ1bGx5UXVhbGlmaWVkVHlw
ZU5hbWUsIGJvb2xlYW4gaXNDYXNlU2Vuc2l0aXZlLCBib29sZWFuIGlzQ2FtZWxDYXNlKSB7Cg==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>209012</attachid>
            <date>2012-01-04 10:23:00 -0500</date>
            <delta_ts>2012-01-09 06:50:31 -0500</delta_ts>
            <desc>proposed fix v1.0 + regression tests</desc>
            <filename>HEAD--Fixed-bug-365437-Private-methods-tagged-with-I.patch</filename>
            <type>text/plain</type>
            <size>53235</size>
            <attacher name="Ayushman Jain">amj87.iitr</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0Fubm90YXRpb25UZXN0
LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlw
c2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9Bbm5vdGF0aW9uVGVzdC5qYXZh
CmluZGV4IGJiZTBiYTUuLjIzZmY0YzEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
LnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9y
ZWdyZXNzaW9uL0Fubm90YXRpb25UZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUu
dGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3Jl
Z3Jlc3Npb24vQW5ub3RhdGlvblRlc3QuamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTEgSUJNIENvcnBvcmF0aW9u
IGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTIgSUJNIENvcnBvcmF0aW9u
IGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRo
ZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhl
IHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29t
cGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC00Nyw3ICs0
Nyw3IEBACiAJLy8gU3RhdGljIGluaXRpYWxpemVyIHRvIHNwZWNpZnkgdGVzdHMgc3Vic2V0IHVz
aW5nIFRFU1RTXyogc3RhdGljIHZhcmlhYmxlcwogCS8vIEFsbCBzcGVjaWZpZWQgdGVzdHMgd2hp
Y2ggZG8gbm90IGJlbG9uZyB0byB0aGUgY2xhc3MgYXJlIHNraXBwZWQuLi4KIAlzdGF0aWMgewot
Ly8JCVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1tdIHsgInRlc3QyOTMiIH07CisvLwkJVEVTVFNf
TkFNRVMgPSBuZXcgU3RyaW5nW10geyAidGVzdEJ1ZzM2NTQzNyIgfTsKIC8vCQlURVNUU19OVU1C
RVJTID0gbmV3IGludFtdIHsgMjk3IH07CiAvLwkJVEVTVFNfUkFOR0UgPSBuZXcgaW50W10geyAy
OTQsIC0xIH07CiAJfQpAQCAtMTAxNDgsNCArMTAxNDgsMTM1IEBACiAJCSJCbGEgY2Fubm90IGJl
IHJlc29sdmVkIHRvIGEgdHlwZVxuIiArCiAJCSItLS0tLS0tLS0tXG4iKTsKIH0KKy8vIGh0dHBz
Oi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNjU0MzcKK3B1YmxpYyB2
b2lkIHRlc3RCdWczNjU0MzdhKCkgeworCU1hcCBjdXN0b21PcHRpb25zID0gZ2V0Q29tcGlsZXJP
cHRpb25zKCk7CisJY3VzdG9tT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9SZXBv
cnRVbnVzZWRQcml2YXRlTWVtYmVyLCBDb21waWxlck9wdGlvbnMuRVJST1IpOworCVN0cmluZyBl
eGNsdXNpb25Bbm5vdGF0aW9ucyA9IAorCQkJInAxLlByZURlc3Ryb3ksIiArCisJCQkicDEuUG9z
dENvbnN0cnVjdCI7CisJY3VzdG9tT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9B
bm5vdGF0aW9uc1RvRXhlbXB0VW51c2VkTWV0aG9kcywgZXhjbHVzaW9uQW5ub3RhdGlvbnMpOwor
CVN0cmluZyB0ZXN0RmlsZXMgW10gPSBuZXcgU3RyaW5nW10geworCQkJInAvQS5qYXZhIiwKKwkJ
CSJwYWNrYWdlIHA7XG4iICsKKwkJCSJpbXBvcnQgcDEuKjtcbiIgKworCQkJInB1YmxpYyBjbGFz
cyBBIHtcbiIgKworCQkJIglAcDEuUHJlRGVzdHJveVxuIiArCisJCQkiCXByaXZhdGUgdm9pZCBm
b28xKCl7fVxuIiArCisJCQkiCUBQcmVEZXN0cm95XG4iICsKKwkJCSIJcHJpdmF0ZSB2b2lkIGZv
bzIoKXt9XG4iICsKKwkJCSIJQHAxLlBvc3RDb25zdHJ1Y3RcbiIgKworCQkJIglwcml2YXRlIHZv
aWQgZm9vMWEoKXt9XG4iICsKKwkJCSIJQFBvc3RDb25zdHJ1Y3RcbiIgKworCQkJIglwcml2YXRl
IHZvaWQgZm9vMmEoKXt9XG4iICsKKwkJCSIJcHJpdmF0ZSB2b2lkIGZvbzMoKXt9IiArCisJCQki
fVxuIiwKKwkJCSJwMS9QcmVEZXN0cm95LmphdmEiLAorCQkJInBhY2thZ2UgcDE7XG4iICsKKwkJ
CSJwdWJsaWMgQGludGVyZmFjZSBQcmVEZXN0cm95e30iLAorCQkJInAxL1Bvc3RDb25zdHJ1Y3Qu
amF2YSIsCisJCQkicGFja2FnZSBwMTtcbiIgKworCQkJInB1YmxpYyBAaW50ZXJmYWNlIFBvc3RD
b25zdHJ1Y3R7fSIKKwkJCX07CisJU3RyaW5nIGV4cGVjdGVkRXJyb3JTdHJpbmcgPSAKKwkJCSIt
LS0tLS0tLS0tXG4iICsgCisJCQkiMS4gRVJST1IgaW4gcFxcQS5qYXZhIChhdCBsaW5lIDEyKVxu
IiArIAorCQkJIglwcml2YXRlIHZvaWQgZm9vMygpe319XG4iICsgCisJCQkiCSAgICAgICAgICAg
ICBeXl5eXl5cbiIgKyAKKwkJCSJUaGUgbWV0aG9kIGZvbzMoKSBmcm9tIHRoZSB0eXBlIEEgaXMg
bmV2ZXIgdXNlZCBsb2NhbGx5XG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIjsKKwlydW5OZWdhdGl2
ZVRlc3QoCisJCQl0cnVlLAorCQkJdGVzdEZpbGVzLAorCQkJbnVsbCwgCisJCQljdXN0b21PcHRp
b25zLAorCQkJZXhwZWN0ZWRFcnJvclN0cmluZywKKwkJCUphdmFjVGVzdE9wdGlvbnMuRXhjdXNl
LkVjbGlwc2VXYXJuaW5nQ29uZmlndXJlZEFzRXJyb3IpOworfQorLy8gaHR0cHM6Ly9idWdzLmVj
bGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM2NTQzNworcHVibGljIHZvaWQgdGVzdEJ1
ZzM2NTQzN2IoKSB7CisJTWFwIGN1c3RvbU9wdGlvbnMgPSBnZXRDb21waWxlck9wdGlvbnMoKTsK
KwljdXN0b21PcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydFVudXNlZFBy
aXZhdGVNZW1iZXIsIENvbXBpbGVyT3B0aW9ucy5FUlJPUik7CisJU3RyaW5nIGV4Y2x1c2lvbkFu
bm90YXRpb25zID0gCisJCQkiamF2YXguYW5ub3RhdGlvbi5QcmVEZXN0cm95LCIgKworCQkJImph
dmF4LmFubm90YXRpb24uUmVzb3VyY2UiOworCWN1c3RvbU9wdGlvbnMucHV0KENvbXBpbGVyT3B0
aW9ucy5PUFRJT05fQW5ub3RhdGlvbnNUb0V4ZW1wdFVudXNlZE1ldGhvZHMsIGV4Y2x1c2lvbkFu
bm90YXRpb25zKTsKKwlTdHJpbmcgdGVzdEZpbGVzIFtdID0gbmV3IFN0cmluZ1tdIHsKKwkJCSJB
LmphdmEiLAorCQkJImltcG9ydCBqYXZheC5hbm5vdGF0aW9uLio7XG4iICsKKwkJCSJwdWJsaWMg
Y2xhc3MgQSB7XG4iICsKKwkJCSIJQGphdmF4LmFubm90YXRpb24uUHJlRGVzdHJveVxuIiArCisJ
CQkiCXByaXZhdGUgdm9pZCBmb28xKCl7fVxuIiArCisJCQkiCUBQcmVEZXN0cm95XG4iICsKKwkJ
CSIJcHJpdmF0ZSB2b2lkIGZvbzIoKXt9XG4iICsKKwkJCSIJQGphdmF4LmFubm90YXRpb24uUmVz
b3VyY2VcbiIgKworCQkJIglwcml2YXRlIHZvaWQgZm9vMWEoKXt9XG4iICsKKwkJCSIJQFJlc291
cmNlXG4iICsKKwkJCSIJcHJpdmF0ZSB2b2lkIGZvbzJhKCl7fVxuIiArCisJCQkiCUBqYXZheC5h
bm5vdGF0aW9uLlBvc3RDb25zdHJ1Y3RcbiIgKworCQkJIglwcml2YXRlIHZvaWQgZm9vMygpe31c
biIgKworCQkJIglAamF2YXguYW5ub3RhdGlvbi5Qb3N0Q29uc3RydWN0XG4iICsKKwkJCSIJQFJl
c291cmNlXG4iICsKKwkJCSIJcHJpdmF0ZSB2b2lkIGZvbzNhKCl7fSIgKworCQkJIn1cbiIKKwkJ
CX07CisJU3RyaW5nIGV4cGVjdGVkRXJyb3JTdHJpbmcgPSAKKwkJCSItLS0tLS0tLS0tXG4iICsg
CisJCQkiMS4gRVJST1IgaW4gQS5qYXZhIChhdCBsaW5lIDEyKVxuIiArIAorCQkJIglwcml2YXRl
IHZvaWQgZm9vMygpe31cbiIgKyAKKwkJCSIJICAgICAgICAgICAgIF5eXl5eXlxuIiArIAorCQkJ
IlRoZSBtZXRob2QgZm9vMygpIGZyb20gdGhlIHR5cGUgQSBpcyBuZXZlciB1c2VkIGxvY2FsbHlc
biIgKyAKKwkJCSItLS0tLS0tLS0tXG4iOworCXJ1bk5lZ2F0aXZlVGVzdCgKKwkJCXRydWUsCisJ
CQl0ZXN0RmlsZXMsCisJCQludWxsLCAKKwkJCWN1c3RvbU9wdGlvbnMsCisJCQlleHBlY3RlZEVy
cm9yU3RyaW5nLAorCQkJSmF2YWNUZXN0T3B0aW9ucy5FeGN1c2UuRWNsaXBzZVdhcm5pbmdDb25m
aWd1cmVkQXNFcnJvcik7Cit9CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93
X2J1Zy5jZ2k/aWQ9MzY1NDM3CisvLyB0ZXN0IGRlZmF1bHRzCitwdWJsaWMgdm9pZCB0ZXN0QnVn
MzY1NDM3YygpIHsKKwlNYXAgY3VzdG9tT3B0aW9ucyA9IGdldENvbXBpbGVyT3B0aW9ucygpOwor
CWN1c3RvbU9wdGlvbnMucHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJT05fUmVwb3J0VW51c2VkUHJp
dmF0ZU1lbWJlciwgQ29tcGlsZXJPcHRpb25zLkVSUk9SKTsKKwlTdHJpbmcgdGVzdEZpbGVzIFtd
ID0gbmV3IFN0cmluZ1tdIHsKKwkJCSJBLmphdmEiLAorCQkJImltcG9ydCBqYXZheC5hbm5vdGF0
aW9uLio7XG4iICsKKwkJCSJwdWJsaWMgY2xhc3MgQSB7XG4iICsKKwkJCSIJQGphdmF4LmFubm90
YXRpb24uUHJlRGVzdHJveVxuIiArCisJCQkiCXByaXZhdGUgdm9pZCBmb28xKCl7fVxuIiArCisJ
CQkiCUBQcmVEZXN0cm95XG4iICsKKwkJCSIJcHJpdmF0ZSB2b2lkIGZvbzIoKXt9XG4iICsKKwkJ
CSIJQGphdmF4LmFubm90YXRpb24uUmVzb3VyY2VcbiIgKworCQkJIglwcml2YXRlIHZvaWQgZm9v
MWEoKXt9XG4iICsKKwkJCSIJQFJlc291cmNlXG4iICsKKwkJCSIJcHJpdmF0ZSB2b2lkIGZvbzJh
KCl7fVxuIiArCisJCQkiCUBqYXZheC5hbm5vdGF0aW9uLlBvc3RDb25zdHJ1Y3RcbiIgKworCQkJ
Iglwcml2YXRlIHZvaWQgZm9vMygpe31cbiIgKworCQkJIglAamF2YXguYW5ub3RhdGlvbi5Qb3N0
Q29uc3RydWN0XG4iICsKKwkJCSIJQFJlc291cmNlXG4iICsKKwkJCSIJcHJpdmF0ZSB2b2lkIGZv
bzNhKCl7fSIgKworCQkJIn1cbiIKKwkJCX07CisJU3RyaW5nIGV4cGVjdGVkRXJyb3JTdHJpbmcg
PSAKKwkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkiMS4gRVJST1IgaW4gQS5qYXZhIChhdCBsaW5l
IDgpXG4iICsgCisJCQkiCXByaXZhdGUgdm9pZCBmb28xYSgpe31cbiIgKyAKKwkJCSIJICAgICAg
ICAgICAgIF5eXl5eXl5cbiIgKyAKKwkJCSJUaGUgbWV0aG9kIGZvbzFhKCkgZnJvbSB0aGUgdHlw
ZSBBIGlzIG5ldmVyIHVzZWQgbG9jYWxseVxuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJ
CSIyLiBFUlJPUiBpbiBBLmphdmEgKGF0IGxpbmUgMTApXG4iICsgCisJCQkiCXByaXZhdGUgdm9p
ZCBmb28yYSgpe31cbiIgKyAKKwkJCSIJICAgICAgICAgICAgIF5eXl5eXl5cbiIgKyAKKwkJCSJU
aGUgbWV0aG9kIGZvbzJhKCkgZnJvbSB0aGUgdHlwZSBBIGlzIG5ldmVyIHVzZWQgbG9jYWxseVxu
IiArIAorCQkJIi0tLS0tLS0tLS1cbiI7CisJcnVuTmVnYXRpdmVUZXN0KAorCQkJdHJ1ZSwKKwkJ
CXRlc3RGaWxlcywKKwkJCW51bGwsIAorCQkJY3VzdG9tT3B0aW9ucywKKwkJCWV4cGVjdGVkRXJy
b3JTdHJpbmcsCisJCQlKYXZhY1Rlc3RPcHRpb25zLkV4Y3VzZS5FY2xpcHNlV2FybmluZ0NvbmZp
Z3VyZWRBc0Vycm9yKTsKK30KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRl
c3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdy
ZXNzaW9uL0JhdGNoQ29tcGlsZXJUZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0
cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVz
c2lvbi9CYXRjaENvbXBpbGVyVGVzdC5qYXZhCmluZGV4IDNlNDZmZDYuLmUzMTBkYmQgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBz
ZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0JhdGNoQ29tcGlsZXJUZXN0Lmph
dmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xp
cHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vQmF0Y2hDb21waWxlclRlc3Qu
amF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmln
aHQgKGMpIDIwMDAsIDIwMTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmln
aHQgKGMpIDIwMDAsIDIwMTIgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmln
aHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxz
CiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1
YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9u
LCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC01Miw3ICs1Miw3IEBACiAJcHJpdmF0ZSBzdGF0aWMg
ZmluYWwgTWFpbiBNQUlOID0gbmV3IE1haW4obnVsbC8qb3V0V3JpdGVyKi8sIG51bGwvKmVycldy
aXRlciovLCBmYWxzZS8qc3lzdGVtRXhpdCovLCBudWxsLypvcHRpb25zKi8sIG51bGwvKnByb2dy
ZXNzKi8pOwogCiAJc3RhdGljIHsKLS8vCQlURVNUU19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7ICJ0
ZXN0Mjk1X3dhcm5fb3B0aW9ucyIgfTsKKy8vCQlURVNUU19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7
ICJ0ZXN0MzExX3dhcm5fb3B0aW9ucyIgfTsKIC8vCQlURVNUU19OVU1CRVJTID0gbmV3IGludFtd
IHsgMzA2IH07CiAvLwkJVEVTVFNfUkFOR0UgPSBuZXcgaW50W10geyAyOTgsIC0xIH07CiAJfQpA
QCAtMTY2OCw3ICsxNjY4LDcgQEAKICAgICAgICAgIiAgICAgIGFsbERlcHJlY2F0aW9uICAgICAg
IGRlcHJlY2F0aW9uIGluY2x1ZGluZyBpbnNpZGUgZGVwcmVjYXRlZCBjb2RlXG4iICsgCiAgICAg
ICAgICIgICAgICBhbGxKYXZhZG9jICAgICAgICAgICBpbnZhbGlkIG9yIG1pc3NpbmcgamF2YWRv
Y1xuIiArIAogICAgICAgICAiICAgICAgYWxsT3Zlci1hbm4gICAgICAgICAgYWxsIG1pc3Npbmcg
QE92ZXJyaWRlIGFubm90YXRpb25zXG4iICsgCi0gICAgICAgICIgICAgICBhbGwtc3RhdGljLW1l
dGhvZCAgICBhbGwgbWV0aG9kIGNhbiBiZSBkZWNsYXJlZCBhcyBzdGF0aWMgd2FybmluZ3NcbiIg
KworICAgICAgICAiICAgICAgYWxsLXN0YXRpYy1tZXRob2QgICAgYWxsIG1ldGhvZCBjYW4gYmUg
ZGVjbGFyZWQgYXMgc3RhdGljIHdhcm5pbmdzXG4iICsgCiAgICAgICAgICIgICAgICBhc3NlcnRJ
ZGVudGlmaWVyICAgKyAnJ2Fzc2VydCcnIHVzZWQgYXMgaWRlbnRpZmllclxuIiArIAogICAgICAg
ICAiICAgICAgYm94aW5nICAgICAgICAgICAgICAgYXV0b2JveGluZyBjb252ZXJzaW9uXG4iICsg
CiAgICAgICAgICIgICAgICBjaGFyQ29uY2F0ICAgICAgICAgKyBjaGFyW10gaW4gU3RyaW5nIGNv
bmNhdFxuIiArIApAQCAtMTcyMiw3ICsxNzIyLDcgQEAKICAgICAgICAgIiAgICAgIHN5bnRoZXRp
Y0FjY2VzcyAgICAgIHN5bnRoZXRpYyBhY2Nlc3MgZm9yIGlubmVyY2xhc3NcbiIgKyAKICAgICAg
ICAgIiAgICAgIHRhc2tzKDx0YWdzIHNlcGFyYXRlZCBieSB8PikgdGFza3MgaWRlbnRpZmllZCBi
eSB0YWdzIGluc2lkZSBjb21tZW50c1xuIiArIAogICAgICAgICAiICAgICAgdHlwZUhpZGluZyAg
ICAgICAgICsgdHlwZSBwYXJhbWV0ZXIgaGlkaW5nIGFub3RoZXIgdHlwZVxuIiArIAotICAgICAg
ICAiICAgICAgdW5hdm9pZGFibGVHZW5lcmljUHJvYmxlbXMgKyBpZ25vcmUgdW5hdm9pZGFibGUg
dHlwZSBzYWZldHkgcHJvYmxlbXNcbiIgKworICAgICAgICAiICAgICAgdW5hdm9pZGFibGVHZW5l
cmljUHJvYmxlbXMgKyBpZ25vcmUgdW5hdm9pZGFibGUgdHlwZSBzYWZldHkgcHJvYmxlbXNcbiIg
KyAKICAgICAgICAgIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVlIHRvIHJh
dyBBUElzXG4iICsgCiAgICAgICAgICIgICAgICB1bmNoZWNrZWQgICAgICAgICAgKyB1bmNoZWNr
ZWQgdHlwZSBvcGVyYXRpb25cbiIgKyAKICAgICAgICAgIiAgICAgIHVubmVjZXNzYXJ5RWxzZSAg
ICAgIHVubmVjZXNzYXJ5IGVsc2UgY2xhdXNlXG4iICsgCkBAIC0xNzM2LDYgKzE3MzYsNyBAQAog
ICAgICAgICAiICAgICAgdW51c2VkTGFiZWwgICAgICAgICsgdW51c2VkIGxhYmVsXG4iICsgCiAg
ICAgICAgICIgICAgICB1bnVzZWRMb2NhbCAgICAgICAgKyB1bnJlYWQgbG9jYWwgdmFyaWFibGVc
biIgKyAKICAgICAgICAgIiAgICAgIHVudXNlZFByaXZhdGUgICAgICArIHVudXNlZCBwcml2YXRl
IG1lbWJlciBkZWNsYXJhdGlvblxuIiArIAorICAgICAgICAiICAgICAgdW51c2VkUHJpdmF0ZUV4
ZW1wdCg8bmFtZXMgc2VwYXJhdGVkIGJ5IHw+KSBhbm5vdGF0aW9ucyBtYXJrIG1ldGhvZCB1c2Vk
XG4iICsgCiAgICAgICAgICIgICAgICB1bnVzZWRUaHJvd24gICAgICAgICB1bnVzZWQgZGVjbGFy
ZWQgdGhyb3duIGV4Y2VwdGlvblxuIiArIAogICAgICAgICAiICAgICAgdW51c2VkVHlwZUFyZ3Mg
ICAgICsgdW51c2VkIHR5cGUgYXJndW1lbnRzIGZvciBtZXRob2QgYW5kIGNvbnN0cnVjdG9yXG4i
ICsgCiAgICAgICAgICIgICAgICB1c2VsZXNzVHlwZUNoZWNrICAgICB1bm5lY2Vzc2FyeSBjYXN0
L2luc3RhbmNlb2Ygb3BlcmF0aW9uXG4iICsgCkBAIC0xODAwLDExICsxODAxLDExIEBACiAJCQki
CQk8YXJndW1lbnQgdmFsdWU9XCItLS1PVVRQVVRfRElSX1BMQUNFSE9MREVSLS0tXCIvPlxuIiAr
IAogCQkJIgk8L2NvbW1hbmRfbGluZT5cbiIgKyAKIAkJCSIJPG9wdGlvbnM+XG4iICsgCi0JCQki
CQk8b3B0aW9uIGtleT1cIm9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLmFubm90YXRpb24u
bm9ubnVsbFwiIHZhbHVlPVwib3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTm9uTnVsbFwiLz5c
biIgKwotCQkJIgkJPG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5h
bm5vdGF0aW9uLm5vbm51bGxieWRlZmF1bHRcIiB2YWx1ZT1cIm9yZy5lY2xpcHNlLmpkdC5hbm5v
dGF0aW9uLk5vbk51bGxCeURlZmF1bHRcIi8+XG4iICsKLQkJCSIJCTxvcHRpb24ga2V5PVwib3Jn
LmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuYW5ub3RhdGlvbi5ub25udWxsaXNkZWZhdWx0XCIg
dmFsdWU9XCJkaXNhYmxlZFwiLz5cbiIgKwotCQkJIgkJPG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBz
ZS5qZHQuY29yZS5jb21waWxlci5hbm5vdGF0aW9uLm51bGxhYmxlXCIgdmFsdWU9XCJvcmcuZWNs
aXBzZS5qZHQuYW5ub3RhdGlvbi5OdWxsYWJsZVwiLz5cbiIgKwotCQkJIgkJPG9wdGlvbiBrZXk9
XCJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5hbm5vdGF0aW9uLm51bGxhbmFseXNpc1wi
IHZhbHVlPVwiZGlzYWJsZWRcIi8+XG4iICsKKwkJCSIJCTxvcHRpb24ga2V5PVwib3JnLmVjbGlw
c2UuamR0LmNvcmUuY29tcGlsZXIuYW5ub3RhdGlvbi5ub25udWxsXCIgdmFsdWU9XCJvcmcuZWNs
aXBzZS5qZHQuYW5ub3RhdGlvbi5Ob25OdWxsXCIvPlxuIiArIAorCQkJIgkJPG9wdGlvbiBrZXk9
XCJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5hbm5vdGF0aW9uLm5vbm51bGxieWRlZmF1
bHRcIiB2YWx1ZT1cIm9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uLk5vbk51bGxCeURlZmF1bHRc
Ii8+XG4iICsgCisJCQkiCQk8b3B0aW9uIGtleT1cIm9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBp
bGVyLmFubm90YXRpb24ubm9ubnVsbGlzZGVmYXVsdFwiIHZhbHVlPVwiZGlzYWJsZWRcIi8+XG4i
ICsgCisJCQkiCQk8b3B0aW9uIGtleT1cIm9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLmFu
bm90YXRpb24ubnVsbGFibGVcIiB2YWx1ZT1cIm9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uLk51
bGxhYmxlXCIvPlxuIiArIAorCQkJIgkJPG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBzZS5qZHQuY29y
ZS5jb21waWxlci5hbm5vdGF0aW9uLm51bGxhbmFseXNpc1wiIHZhbHVlPVwiZGlzYWJsZWRcIi8+
XG4iICsgCiAJCQkiCQk8b3B0aW9uIGtleT1cIm9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVy
LmNvZGVnZW4uaW5saW5lSnNyQnl0ZWNvZGVcIiB2YWx1ZT1cImRpc2FibGVkXCIvPlxuIiArIAog
CQkJIgkJPG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5jb2RlZ2Vu
LnRhcmdldFBsYXRmb3JtXCIgdmFsdWU9XCIxLjVcIi8+XG4iICsgCiAJCQkiCQk8b3B0aW9uIGtl
eT1cIm9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLmNvZGVnZW4udW51c2VkTG9jYWxcIiB2
YWx1ZT1cIm9wdGltaXplIG91dFwiLz5cbiIgKyAKQEAgLTE4MTQsNyArMTgxNSw3IEBACiAJCQki
CQk8b3B0aW9uIGtleT1cIm9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLmRlYnVnLnNvdXJj
ZUZpbGVcIiB2YWx1ZT1cImdlbmVyYXRlXCIvPlxuIiArIAogCQkJIgkJPG9wdGlvbiBrZXk9XCJv
cmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5kb2MuY29tbWVudC5zdXBwb3J0XCIgdmFsdWU9
XCJkaXNhYmxlZFwiLz5cbiIgKyAKIAkJCSIJCTxvcHRpb24ga2V5PVwib3JnLmVjbGlwc2UuamR0
LmNvcmUuY29tcGlsZXIuZ2VuZXJhdGVDbGFzc0ZpbGVzXCIgdmFsdWU9XCJlbmFibGVkXCIvPlxu
IiArIAotCQkJIgkJPG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5t
YXhQcm9ibGVtUGVyVW5pdFwiIHZhbHVlPVwiMTAwXCIvPlxuIiArCisJCQkiCQk8b3B0aW9uIGtl
eT1cIm9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLm1heFByb2JsZW1QZXJVbml0XCIgdmFs
dWU9XCIxMDBcIi8+XG4iICsgCiAJCQkiCQk8b3B0aW9uIGtleT1cIm9yZy5lY2xpcHNlLmpkdC5j
b3JlLmNvbXBpbGVyLnByb2JsZW0uYW5ub3RhdGlvblN1cGVySW50ZXJmYWNlXCIgdmFsdWU9XCJ3
YXJuaW5nXCIvPlxuIiArIAogCQkJIgkJPG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBzZS5qZHQuY29y
ZS5jb21waWxlci5wcm9ibGVtLmFzc2VydElkZW50aWZpZXJcIiB2YWx1ZT1cIndhcm5pbmdcIi8+
XG4iICsgCiAJCQkiCQk8b3B0aW9uIGtleT1cIm9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVy
LnByb2JsZW0uYXV0b2JveGluZ1wiIHZhbHVlPVwiaWdub3JlXCIvPlxuIiArIApAQCAtMTg2Mywx
OCArMTg2NCwxOCBAQAogCQkJIgkJPG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBzZS5qZHQuY29yZS5j
b21waWxlci5wcm9ibGVtLm5vRWZmZWN0QXNzaWdubWVudFwiIHZhbHVlPVwid2FybmluZ1wiLz5c
biIgKyAKIAkJCSIJCTxvcHRpb24ga2V5PVwib3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIu
cHJvYmxlbS5ub0ltcGxpY2l0U3RyaW5nQ29udmVyc2lvblwiIHZhbHVlPVwid2FybmluZ1wiLz5c
biIgKyAKIAkJCSIJCTxvcHRpb24ga2V5PVwib3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIu
cHJvYmxlbS5ub25FeHRlcm5hbGl6ZWRTdHJpbmdMaXRlcmFsXCIgdmFsdWU9XCJpZ25vcmVcIi8+
XG4iICsgCi0JCQkiCQk8b3B0aW9uIGtleT1cIm9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVy
LnByb2JsZW0ubnVsbFJlZmVyZW5jZVwiIHZhbHVlPVwid2FybmluZ1wiLz5cbiIgKwotCQkJIgkJ
PG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5wcm9ibGVtLm51bGxT
cGVjSW5zdWZmaWNpZW50SW5mb1wiIHZhbHVlPVwid2FybmluZ1wiLz5cbiIgKwotCQkJIgkJPG9w
dGlvbiBrZXk9XCJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5wcm9ibGVtLm51bGxTcGVj
VmlvbGF0aW9uXCIgdmFsdWU9XCJlcnJvclwiLz5cbiIgKworCQkJIgkJPG9wdGlvbiBrZXk9XCJv
cmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5wcm9ibGVtLm51bGxSZWZlcmVuY2VcIiB2YWx1
ZT1cIndhcm5pbmdcIi8+XG4iICsgCisJCQkiCQk8b3B0aW9uIGtleT1cIm9yZy5lY2xpcHNlLmpk
dC5jb3JlLmNvbXBpbGVyLnByb2JsZW0ubnVsbFNwZWNJbnN1ZmZpY2llbnRJbmZvXCIgdmFsdWU9
XCJ3YXJuaW5nXCIvPlxuIiArIAorCQkJIgkJPG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBzZS5qZHQu
Y29yZS5jb21waWxlci5wcm9ibGVtLm51bGxTcGVjVmlvbGF0aW9uXCIgdmFsdWU9XCJlcnJvclwi
Lz5cbiIgKyAKIAkJCSIJCTxvcHRpb24ga2V5PVwib3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGls
ZXIucHJvYmxlbS5vdmVycmlkaW5nTWV0aG9kV2l0aG91dFN1cGVySW52b2NhdGlvblwiIHZhbHVl
PVwiaWdub3JlXCIvPlxuIiArIAogCQkJIgkJPG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBzZS5qZHQu
Y29yZS5jb21waWxlci5wcm9ibGVtLm92ZXJyaWRpbmdQYWNrYWdlRGVmYXVsdE1ldGhvZFwiIHZh
bHVlPVwid2FybmluZ1wiLz5cbiIgKyAKIAkJCSIJCTxvcHRpb24ga2V5PVwib3JnLmVjbGlwc2Uu
amR0LmNvcmUuY29tcGlsZXIucHJvYmxlbS5wYXJhbWV0ZXJBc3NpZ25tZW50XCIgdmFsdWU9XCJp
Z25vcmVcIi8+XG4iICsgCiAJCQkiCQk8b3B0aW9uIGtleT1cIm9yZy5lY2xpcHNlLmpkdC5jb3Jl
LmNvbXBpbGVyLnByb2JsZW0ucG9zc2libGVBY2NpZGVudGFsQm9vbGVhbkFzc2lnbm1lbnRcIiB2
YWx1ZT1cImlnbm9yZVwiLz5cbiIgKyAKIAkJCSIJCTxvcHRpb24ga2V5PVwib3JnLmVjbGlwc2Uu
amR0LmNvcmUuY29tcGlsZXIucHJvYmxlbS5wb3RlbnRpYWxOdWxsUmVmZXJlbmNlXCIgdmFsdWU9
XCJpZ25vcmVcIi8+XG4iICsgCi0JCQkiCQk8b3B0aW9uIGtleT1cIm9yZy5lY2xpcHNlLmpkdC5j
b3JlLmNvbXBpbGVyLnByb2JsZW0ucG90ZW50aWFsTnVsbFNwZWNWaW9sYXRpb25cIiB2YWx1ZT1c
ImVycm9yXCIvPlxuIiArCi0JCQkiCQk8b3B0aW9uIGtleT1cIm9yZy5lY2xpcHNlLmpkdC5jb3Jl
LmNvbXBpbGVyLnByb2JsZW0ucG90ZW50aWFsbHlVbmNsb3NlZENsb3NlYWJsZVwiIHZhbHVlPVwi
aWdub3JlXCIvPlxuIiArCi0JCQkiCQk8b3B0aW9uIGtleT1cIm9yZy5lY2xpcHNlLmpkdC5jb3Jl
LmNvbXBpbGVyLnByb2JsZW0ucmF3VHlwZVJlZmVyZW5jZVwiIHZhbHVlPVwid2FybmluZ1wiLz5c
biIgKwotCQkJIgkJPG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5w
cm9ibGVtLnJlZHVuZGFudE51bGxBbm5vdGF0aW9uXCIgdmFsdWU9XCJ3YXJuaW5nXCIvPlxuIiAr
CisJCQkiCQk8b3B0aW9uIGtleT1cIm9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLnByb2Js
ZW0ucG90ZW50aWFsTnVsbFNwZWNWaW9sYXRpb25cIiB2YWx1ZT1cImVycm9yXCIvPlxuIiArIAor
CQkJIgkJPG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5wcm9ibGVt
LnBvdGVudGlhbGx5VW5jbG9zZWRDbG9zZWFibGVcIiB2YWx1ZT1cImlnbm9yZVwiLz5cbiIgKyAK
KwkJCSIJCTxvcHRpb24ga2V5PVwib3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIucHJvYmxl
bS5yYXdUeXBlUmVmZXJlbmNlXCIgdmFsdWU9XCJ3YXJuaW5nXCIvPlxuIiArIAorCQkJIgkJPG9w
dGlvbiBrZXk9XCJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5wcm9ibGVtLnJlZHVuZGFu
dE51bGxBbm5vdGF0aW9uXCIgdmFsdWU9XCJ3YXJuaW5nXCIvPlxuIiArIAogCQkJIgkJPG9wdGlv
biBrZXk9XCJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5wcm9ibGVtLnJlZHVuZGFudE51
bGxDaGVja1wiIHZhbHVlPVwiaWdub3JlXCIvPlxuIiArIAogCQkJIgkJPG9wdGlvbiBrZXk9XCJv
cmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5wcm9ibGVtLnJlZHVuZGFudFNwZWNpZmljYXRp
b25PZlR5cGVBcmd1bWVudHNcIiB2YWx1ZT1cImlnbm9yZVwiLz5cbiIgKyAKIAkJCSIJCTxvcHRp
b24ga2V5PVwib3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIucHJvYmxlbS5yZWR1bmRhbnRT
dXBlcmludGVyZmFjZVwiIHZhbHVlPVwiaWdub3JlXCIvPlxuIiArIApAQCAtMTg4Nyw3ICsxODg4
LDcgQEAKIAkJCSIJCTxvcHRpb24ga2V5PVwib3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIu
cHJvYmxlbS5zeW50aGV0aWNBY2Nlc3NFbXVsYXRpb25cIiB2YWx1ZT1cImlnbm9yZVwiLz5cbiIg
KyAKIAkJCSIJCTxvcHRpb24ga2V5PVwib3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIucHJv
YmxlbS50YXNrc1wiIHZhbHVlPVwid2FybmluZ1wiLz5cbiIgKyAKIAkJCSIJCTxvcHRpb24ga2V5
PVwib3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIucHJvYmxlbS50eXBlUGFyYW1ldGVySGlk
aW5nXCIgdmFsdWU9XCJ3YXJuaW5nXCIvPlxuIiArIAotCQkJIgkJPG9wdGlvbiBrZXk9XCJvcmcu
ZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5wcm9ibGVtLnVuYXZvaWRhYmxlR2VuZXJpY1R5cGVQ
cm9ibGVtc1wiIHZhbHVlPVwiZW5hYmxlZFwiLz5cbiIgKworCQkJIgkJPG9wdGlvbiBrZXk9XCJv
cmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5wcm9ibGVtLnVuYXZvaWRhYmxlR2VuZXJpY1R5
cGVQcm9ibGVtc1wiIHZhbHVlPVwiZW5hYmxlZFwiLz5cbiIgKyAKIAkJCSIJCTxvcHRpb24ga2V5
PVwib3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIucHJvYmxlbS51bmNoZWNrZWRUeXBlT3Bl
cmF0aW9uXCIgdmFsdWU9XCJ3YXJuaW5nXCIvPlxuIiArIAogCQkJIgkJPG9wdGlvbiBrZXk9XCJv
cmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5wcm9ibGVtLnVuY2xvc2VkQ2xvc2VhYmxlXCIg
dmFsdWU9XCJpZ25vcmVcIi8+XG4iICsgCiAJCQkiCQk8b3B0aW9uIGtleT1cIm9yZy5lY2xpcHNl
LmpkdC5jb3JlLmNvbXBpbGVyLnByb2JsZW0udW5kb2N1bWVudGVkRW1wdHlCbG9ja1wiIHZhbHVl
PVwiaWdub3JlXCIvPlxuIiArIApAQCAtMTkwOSwxMyArMTkxMCwxNCBAQAogCQkJIgkJPG9wdGlv
biBrZXk9XCJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5wcm9ibGVtLnVudXNlZFBhcmFt
ZXRlcldoZW5PdmVycmlkaW5nQ29uY3JldGVcIiB2YWx1ZT1cImRpc2FibGVkXCIvPlxuIiArIAog
CQkJIgkJPG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5wcm9ibGVt
LnVudXNlZFByaXZhdGVNZW1iZXJcIiB2YWx1ZT1cIndhcm5pbmdcIi8+XG4iICsgCiAJCQkiCQk8
b3B0aW9uIGtleT1cIm9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLnByb2JsZW0udW51c2Vk
VHlwZUFyZ3VtZW50c0Zvck1ldGhvZEludm9jYXRpb25cIiB2YWx1ZT1cIndhcm5pbmdcIi8+XG4i
ICsgCisJCQkiCQk8b3B0aW9uIGtleT1cIm9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLnBy
b2JsZW0udW51c2VkV2FybmluZ0V4Y2x1ZGVkVHlwZXNcIiB2YWx1ZT1cIlwiLz5cbiIgKyAKIAkJ
CSIJCTxvcHRpb24ga2V5PVwib3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIucHJvYmxlbS51
bnVzZWRXYXJuaW5nVG9rZW5cIiB2YWx1ZT1cIndhcm5pbmdcIi8+XG4iICsgCiAJCQkiCQk8b3B0
aW9uIGtleT1cIm9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLnByb2JsZW0udmFyYXJnc0Fy
Z3VtZW50TmVlZENhc3RcIiB2YWx1ZT1cIndhcm5pbmdcIi8+XG4iICsgCiAJCQkiCQk8b3B0aW9u
IGtleT1cIm9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLnByb2Nlc3NBbm5vdGF0aW9uc1wi
IHZhbHVlPVwiZGlzYWJsZWRcIi8+XG4iICsgCiAJCQkiCQk8b3B0aW9uIGtleT1cIm9yZy5lY2xp
cHNlLmpkdC5jb3JlLmNvbXBpbGVyLnNvdXJjZVwiIHZhbHVlPVwiMS41XCIvPlxuIiArIAogCQkJ
IgkJPG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci50YXNrQ2FzZVNl
bnNpdGl2ZVwiIHZhbHVlPVwiZW5hYmxlZFwiLz5cbiIgKyAKIAkJCSIJCTxvcHRpb24ga2V5PVwi
b3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIudGFza1ByaW9yaXRpZXNcIiB2YWx1ZT1cIlwi
Lz5cbiIgKyAKLQkJCSIJCTxvcHRpb24ga2V5PVwib3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGls
ZXIudGFza1RhZ3NcIiB2YWx1ZT1cIlwiLz5cbiIgKyAKKwkJCSIJCTxvcHRpb24ga2V5PVwib3Jn
LmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIudGFza1RhZ3NcIiB2YWx1ZT1cIlwiLz5cbiIgKyAg
CiAJCQkiCTwvb3B0aW9ucz5cbiIgKyAKIAkJCSIJPGNsYXNzcGF0aHM+Tk9STUFMSVpFRCBTRUNU
SU9OPC9jbGFzc3BhdGhzPlxuIiArIAogCQkJIgk8c291cmNlcz5cbiIgKyAKQEAgLTEyMzUyLDQg
KzEyMzU0LDQzIEBACiAJCSIxIHByb2JsZW0gKDEgd2FybmluZykiLCAKIAkJdHJ1ZSk7CiB9CisK
Ky8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNjU0MzcK
Ky8vIHRlc3QgYmF0Y2ggY29tcGlsZXIgb3B0aW9uIHRvIHNwZWNpZnkgYW5ub3RhdGlvbnMgdG8g
ZXhjbHVkZSBwcml2YXRlIG1ldGhvZHMKKy8vIGZyb20gdW51c2VkIHdhcm5pbmcKK3B1YmxpYyB2
b2lkIHRlc3QzMTFfd2Fybl9vcHRpb25zKCkgeworCVN0cmluZyB0ZXN0RmlsZXMgW10gPSBuZXcg
U3RyaW5nW10geworCQkJIkEuamF2YSIsCisJCQkiaW1wb3J0IGphdmF4LmFubm90YXRpb24uKjtc
biIgKworCQkJInB1YmxpYyBjbGFzcyBBIHtcbiIgKworCQkJIglAamF2YXguYW5ub3RhdGlvbi5Q
cmVEZXN0cm95XG4iICsKKwkJCSIJcHJpdmF0ZSB2b2lkIGZvbzEoKXt9XG4iICsKKwkJCSIJQFBy
ZURlc3Ryb3lcbiIgKworCQkJIglwcml2YXRlIHZvaWQgZm9vMigpe31cbiIgKworCQkJIglAamF2
YXguYW5ub3RhdGlvbi5SZXNvdXJjZVxuIiArCisJCQkiCXByaXZhdGUgdm9pZCBmb28xYSgpe31c
biIgKworCQkJIglAUmVzb3VyY2VcbiIgKworCQkJIglwcml2YXRlIHZvaWQgZm9vMmEoKXt9XG4i
ICsKKwkJCSIJQGphdmF4LmFubm90YXRpb24uUG9zdENvbnN0cnVjdFxuIiArCisJCQkiCXByaXZh
dGUgdm9pZCBmb28zKCl7fVxuIiArCisJCQkiCUBqYXZheC5hbm5vdGF0aW9uLlBvc3RDb25zdHJ1
Y3RcbiIgKworCQkJIglAUmVzb3VyY2VcbiIgKworCQkJIglwcml2YXRlIHZvaWQgZm9vM2EoKXt9
IiArCisJCQkifVxuIgorCQkJfTsKKwlydW5Db25mb3JtVGVzdCgKKwkJCXRlc3RGaWxlcywKKwkJ
CSJcIiIgKyBPVVRQVVRfRElSICsgIEZpbGUuc2VwYXJhdG9yICsgIkEuamF2YVwiIgorCQkJKyAi
IC1zb3VyY2VwYXRoIFwiIiArIE9VVFBVVF9ESVIgKyAiXCIiCisJCQkrICIgLXdhcm46dW51c2Vk
UHJpdmF0ZUV4ZW1wdChqYXZheC5hbm5vdGF0aW9uLlByZURlc3Ryb3l8amF2YXguYW5ub3RhdGlv
bi5SZXNvdXJjZSkgLTEuNSAtcHJvYzpub25lIC1kIFwiIiArIE9VVFBVVF9ESVIgKyAiXCIiLAor
CQkJIiIsCisJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJIjEuIFdBUk5JTkcgaW4gLS0tT1VUUFVU
X0RJUl9QTEFDRUhPTERFUi0tLS9BLmphdmEgKGF0IGxpbmUgMTIpXG4iICsgCisJCQkiCXByaXZh
dGUgdm9pZCBmb28zKCl7fVxuIiArIAorCQkJIgkgICAgICAgICAgICAgXl5eXl5eXG4iICsgCisJ
CQkiVGhlIG1ldGhvZCBmb28zKCkgZnJvbSB0aGUgdHlwZSBBIGlzIG5ldmVyIHVzZWQgbG9jYWxs
eVxuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCSIxIHByb2JsZW0gKDEgd2FybmluZyki
LCAKKwkJCXRydWUpOworfQogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvYmF0
Y2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2JhdGNoL01haW4uamF2YSBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2JhdGNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9iYXRjaC9NYWluLmphdmEKaW5kZXggYTY3ZjNjYy4uZDg1MzI4OCAxMDA2NDQKLS0tIGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvYmF0Y2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2JhdGNoL01haW4uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9iYXRjaC9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYmF0Y2gvTWFpbi5qYXZhCkBAIC0xLDUgKzEsNSBA
QAogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMSBJ
Qk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMiBJ
Qk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMg
cHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWls
YWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAog
ICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUg
YXQKQEAgLTM1MzUsNiArMzUzNSwyMyBAQAogCQkJfSBlbHNlIGlmICh0b2tlbi5lcXVhbHMoInVu
dXNlZFByaXZhdGUiKSkgeyAvLyROT04tTkxTLTEkCiAJCQkJc2V0U2V2ZXJpdHkoQ29tcGlsZXJP
cHRpb25zLk9QVElPTl9SZXBvcnRVbnVzZWRQcml2YXRlTWVtYmVyLCBzZXZlcml0eSwgaXNFbmFi
bGluZyk7CiAJCQkJcmV0dXJuOworCQkJfSBlbHNlIGlmICh0b2tlbi5zdGFydHNXaXRoKCJ1bnVz
ZWRQcml2YXRlRXhlbXB0IikpIHsgLy8kTk9OLU5MUy0xJAorCQkJCVN0cmluZyB1bnVzZWRXYXJu
aW5nRXhjbHVkaW5nQW5ub3RhdGlvbnMgPSBVdGlsLkVNUFRZX1NUUklORzsKKwkJCQlpbnQgc3Rh
cnQgPSB0b2tlbi5pbmRleE9mKCcoJyk7CisJCQkJaW50IGVuZCA9IHRva2VuLmluZGV4T2YoJykn
KTsKKwkJCQlpZiAoc3RhcnQgPj0gMCAmJiBlbmQgPj0gMCAmJiBzdGFydCA8IGVuZCl7CisJCQkJ
CXVudXNlZFdhcm5pbmdFeGNsdWRpbmdBbm5vdGF0aW9ucyA9IHRva2VuLnN1YnN0cmluZyhzdGFy
dCsxLCBlbmQpLnRyaW0oKTsKKwkJCQkJdW51c2VkV2FybmluZ0V4Y2x1ZGluZ0Fubm90YXRpb25z
ID0gdW51c2VkV2FybmluZ0V4Y2x1ZGluZ0Fubm90YXRpb25zLnJlcGxhY2UoJ3wnLCcsJyk7CisJ
CQkJfQorCQkJCWlmICh1bnVzZWRXYXJuaW5nRXhjbHVkaW5nQW5ub3RhdGlvbnMubGVuZ3RoKCkg
PT0gMCl7CisJCQkJCXRocm93IG5ldyBJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24odGhpcy5iaW5k
KCJjb25maWd1cmUuaW52YWxpZFVudXNlZFByaXZhdGVFeGVtcHQiLCB0b2tlbikpOyAvLyROT04t
TkxTLTEkCisJCQkJfQorCQkJCXRoaXMub3B0aW9ucy5wdXQoCisJCQkJCUNvbXBpbGVyT3B0aW9u
cy5PUFRJT05fQW5ub3RhdGlvbnNUb0V4ZW1wdFVudXNlZE1ldGhvZHMsCisJCQkJCWlzRW5hYmxp
bmcgPyB1bnVzZWRXYXJuaW5nRXhjbHVkaW5nQW5ub3RhdGlvbnMgOiBVdGlsLkVNUFRZX1NUUklO
Ryk7CisJCQkJCisJCQkJc2V0U2V2ZXJpdHkoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9SZXBvcnRV
bnVzZWRQcml2YXRlTWVtYmVyLCBzZXZlcml0eSwgaXNFbmFibGluZyk7CisJCQkJcmV0dXJuOwog
CQkJfSBlbHNlIGlmICh0b2tlbi5lcXVhbHMoInVudXNlZExhYmVsIikpIHsgLy8kTk9OLU5MUy0x
JAogCQkJCXNldFNldmVyaXR5KENvbXBpbGVyT3B0aW9ucy5PUFRJT05fUmVwb3J0VW51c2VkTGFi
ZWwsIHNldmVyaXR5LCBpc0VuYWJsaW5nKTsKIAkJCQlyZXR1cm47CmRpZmYgLS1naXQgYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9iYXRjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
YmF0Y2gvbWVzc2FnZXMucHJvcGVydGllcyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2JhdGNoL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9iYXRjaC9tZXNzYWdlcy5wcm9wZXJ0aWVz
CmluZGV4IDY5ODVmZTMuLjA4NzFkMGIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2JhdGNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9iYXRjaC9tZXNzYWdlcy5w
cm9wZXJ0aWVzCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2JhdGNoL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9iYXRjaC9tZXNzYWdlcy5wcm9wZXJ0aWVzCkBAIC04Miw2ICs4
Miw3IEBACiBjb25maWd1cmUudW5zdXBwb3J0ZWRFbmNvZGluZyA9IHVuc3VwcG9ydGVkIGVuY29k
aW5nIGZvcm1hdDogezB9CiBjb25maWd1cmUuZHVwbGljYXRlRGVmYXVsdEVuY29kaW5nID0gZHVw
bGljYXRlIGRlZmF1bHQgZW5jb2RpbmcgZm9ybWF0IHNwZWNpZmljYXRpb246IHswfQogY29uZmln
dXJlLmludmFsaWRUYXNrVGFnID17MH0gaXMgYW4gaW52YWxpZCB0YXNrIHRhZworY29uZmlndXJl
LmludmFsaWRVbnVzZWRQcml2YXRlRXhlbXB0ID0gZnVsbHkgcXVhbGlmaWVkIGFubm90YXRpb24g
dHlwZSBuYW1lcyBleHBlY3RlZAogY29uZmlndXJlLmluY29ycmVjdEV4dERpcnNFbnRyeSA9IGlu
Y29ycmVjdCBleHQgZGlyIGVudHJ5OyB7MH0gbXVzdCBiZSBhIGRpcmVjdG9yeQogY29uZmlndXJl
LmluY29ycmVjdEVuZG9yc2VkRGlyc0VudHJ5ID0gaW5jb3JyZWN0IGVuZG9yc2VkIGRpciBlbnRy
eTsgezB9IG11c3QgYmUgYSBkaXJlY3RvcnkKIGNvbmZpZ3VyZS5kdXBsaWNhdGVFbmRvcnNlZERp
cnMgPSBkdXBsaWNhdGUgZW5kb3JzZWRkaXJzIHNwZWNpZmljYXRpb246IHswfQpAQCAtMzQwLDYg
KzM0MSw3IEBACiBcICAgICAgdW51c2VkTGFiZWwgICAgICAgICsgdW51c2VkIGxhYmVsXG5cCiBc
ICAgICAgdW51c2VkTG9jYWwgICAgICAgICsgdW5yZWFkIGxvY2FsIHZhcmlhYmxlXG5cCiBcICAg
ICAgdW51c2VkUHJpdmF0ZSAgICAgICsgdW51c2VkIHByaXZhdGUgbWVtYmVyIGRlY2xhcmF0aW9u
XG5cCitcICAgICAgdW51c2VkUHJpdmF0ZUV4ZW1wdCg8bmFtZXMgc2VwYXJhdGVkIGJ5IHw+KSBh
bm5vdGF0aW9ucyBtYXJrIG1ldGhvZCB1c2VkXG5cCiBcICAgICAgdW51c2VkVGhyb3duICAgICAg
ICAgdW51c2VkIGRlY2xhcmVkIHRocm93biBleGNlcHRpb25cblwKIFwgICAgICB1bnVzZWRUeXBl
QXJncyAgICAgKyB1bnVzZWQgdHlwZSBhcmd1bWVudHMgZm9yIG1ldGhvZCBhbmQgY29uc3RydWN0
b3JcblwKIFwgICAgICB1c2VsZXNzVHlwZUNoZWNrICAgICB1bm5lY2Vzc2FyeSBjYXN0L2luc3Rh
bmNlb2Ygb3BlcmF0aW9uXG5cCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Fubm90YXRpb24uamF2
YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hc3QvQW5ub3RhdGlvbi5qYXZhCmluZGV4IGJjNzZhZDcuLjI4NDk2ZGEgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9hc3QvQW5ub3RhdGlvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQW5u
b3RhdGlvbi5qYXZhCkBAIC0xLDUgKzEsNSBAQAogLyoqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAq
IENvcHlyaWdodCAoYykgMjAwMCwgMjAxMSBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAq
IENvcHlyaWdodCAoYykgMjAwMCwgMjAxMiBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAq
IEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBt
YXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVj
bGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0
cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKQEAgLTE2OCwxMSArMTY4LDggQEAKIAkJCWNh
c2UgVHlwZUlkcy5UX0phdmFMYW5nSW52b2tlTWV0aG9kSGFuZGxlUG9seW1vcnBoaWNTaWduYXR1
cmUgOgogCQkJCXRhZ0JpdHMgfD0gVGFnQml0cy5Bbm5vdGF0aW9uUG9seW1vcnBoaWNTaWduYXR1
cmU7CiAJCQkJYnJlYWs7Ci0JCQljYXNlIFR5cGVJZHMuVF9KYXZheEFubm90YXRpb25Qb3N0Q29u
c3RydWN0IDoKLQkJCQl0YWdCaXRzIHw9IFRhZ0JpdHMuQW5ub3RhdGlvblBvc3RDb25zdHJ1Y3Q7
Ci0JCQkJYnJlYWs7Ci0JCQljYXNlIFR5cGVJZHMuVF9KYXZheEFubm90YXRpb25QcmVEZXN0cm95
IDoKLQkJCQl0YWdCaXRzIHw9IFRhZ0JpdHMuQW5ub3RhdGlvblByZURlc3Ryb3k7CisJCQljYXNl
IFR5cGVJZHMuVF9VbnVzZWRXYXJuaW5nRXhjbHVzaW9uQW5ub3RhdGlvbiA6CisJCQkJdGFnQml0
cyB8PSBUYWdCaXRzLkFubm90YXRpb25Ub0V4Y2x1ZGVVbnVzZWRXYXJuaW5nOwogCQkJCWJyZWFr
OwogCQkJY2FzZSBUeXBlSWRzLlRfQ29uZmlndXJlZEFubm90YXRpb25OdWxsYWJsZSA6CiAJCQkJ
dGFnQml0cyB8PSBUYWdCaXRzLkFubm90YXRpb25OdWxsYWJsZTsKZGlmZiAtLWdpdCBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9jbGFzc2ZtdC9Bbm5vdGF0aW9uSW5mby5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2NsYXNzZm10L0Fubm90YXRp
b25JbmZvLmphdmEKaW5kZXggMzM1N2Q3ZC4uZDgxZWMxYyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Ns
YXNzZm10L0Fubm90YXRpb25JbmZvLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2NsYXNzZm10L0Fubm90YXRp
b25JbmZvLmphdmEKQEAgLTMwMywxMCArMzAzLDYgQEAKIAkJCQkJY3VycmVudE9mZnNldCArPSAy
OwogCQkJCQlyZXR1cm4gcmVhZFRhcmdldFZhbHVlKGN1cnJlbnRPZmZzZXQpOwogCQkJCX0KLQkJ
CQlpZiAoQ2hhck9wZXJhdGlvbi5lcXVhbHModHlwZU5hbWUsIENvbnN0YW50UG9vbC5KQVZBWF9B
Tk5PVEFUSU9OX1BSRURFU1RST1kpKSB7Ci0JCQkJCXRoaXMuc3RhbmRhcmRBbm5vdGF0aW9uVGFn
Qml0cyB8PSBUYWdCaXRzLkFubm90YXRpb25QcmVEZXN0cm95OwotCQkJCQlyZXR1cm4gY3VycmVu
dE9mZnNldDsKLQkJCQl9CiAJCQkJYnJlYWs7CiAJCQljYXNlIDMyOgogCQkJCWlmIChDaGFyT3Bl
cmF0aW9uLmVxdWFscyh0eXBlTmFtZSwgQ29uc3RhbnRQb29sLkpBVkFfTEFOR19BTk5PVEFUSU9O
X1JFVEVOVElPTikpIHsKQEAgLTMxNSwxMCArMzExLDYgQEAKIAkJCQl9CiAJCQkJaWYgKENoYXJP
cGVyYXRpb24uZXF1YWxzKHR5cGVOYW1lLCBDb25zdGFudFBvb2wuSkFWQV9MQU5HX0FOTk9UQVRJ
T05fSU5IRVJJVEVEKSkgewogCQkJCQl0aGlzLnN0YW5kYXJkQW5ub3RhdGlvblRhZ0JpdHMgfD0g
VGFnQml0cy5Bbm5vdGF0aW9uSW5oZXJpdGVkOwotCQkJCQlyZXR1cm4gY3VycmVudE9mZnNldDsK
LQkJCQl9Ci0JCQkJaWYgKENoYXJPcGVyYXRpb24uZXF1YWxzKHR5cGVOYW1lLCBDb25zdGFudFBv
b2wuSkFWQVhfQU5OT1RBVElPTl9QT1NUQ09OU1RSVUNUKSkgewotCQkJCQl0aGlzLnN0YW5kYXJk
QW5ub3RhdGlvblRhZ0JpdHMgfD0gVGFnQml0cy5Bbm5vdGF0aW9uUG9zdENvbnN0cnVjdDsKIAkJ
CQkJcmV0dXJuIGN1cnJlbnRPZmZzZXQ7CiAJCQkJfQogCQkJCWJyZWFrOwpkaWZmIC0tZ2l0IGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2NvZGVnZW4vQ29uc3RhbnRQb29sLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvY29kZWdlbi9Db25zdGFu
dFBvb2wuamF2YQppbmRleCBjODc1YzliLi5jNDQ5Mzg1IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvY29k
ZWdlbi9Db25zdGFudFBvb2wuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvY29kZWdlbi9Db25zdGFudFBvb2wu
amF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmln
aHQgKGMpIDIwMDAsIDIwMTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmln
aHQgKGMpIDIwMDAsIDIwMTIgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmln
aHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxz
CiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1
YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9u
LCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC0yNDgsOCArMjQ4LDYgQEAKIAlwdWJsaWMgc3RhdGlj
IGZpbmFsIGNoYXJbXSBKQVZBX0xBTkdfU0FGRVZBUkFSR1MgPSAiTGphdmEvbGFuZy9TYWZlVmFy
YXJnczsiLnRvQ2hhckFycmF5KCk7IC8vJE5PTi1OTFMtMSQKIAkvLyBqYXZhIDcgamF2YS5sYW5n
Lmludm9rZS5NZXRob2RIYW5kbGUuaW52b2tlRXhhY3QoLi4pL2ludm9rZUdlbmVyaWMoLi4pCiAJ
cHVibGljIHN0YXRpYyBmaW5hbCBjaGFyW10gSkFWQV9MQU5HX0lOVk9LRV9NRVRIT0RIQU5ETEVf
UE9MWU1PUlBISUNTSUdOQVRVUkUgPSAiTGphdmEvbGFuZy9pbnZva2UvTWV0aG9kSGFuZGxlJFBv
bHltb3JwaGljU2lnbmF0dXJlOyIudG9DaGFyQXJyYXkoKTsgLy8kTk9OLU5MUy0xJAotCXB1Ymxp
YyBzdGF0aWMgZmluYWwgY2hhcltdIEpBVkFYX0FOTk9UQVRJT05fUE9TVENPTlNUUlVDVCA9ICJM
amF2YXgvYW5ub3RhdGlvbi9Qb3N0Q29uc3RydWN0OyIudG9DaGFyQXJyYXkoKTsgLy8kTk9OLU5M
Uy0xJAotCXB1YmxpYyBzdGF0aWMgZmluYWwgY2hhcltdIEpBVkFYX0FOTk9UQVRJT05fUFJFREVT
VFJPWSA9ICJMamF2YXgvYW5ub3RhdGlvbi9QcmVEZXN0cm95OyIudG9DaGFyQXJyYXkoKTsgLy8k
Tk9OLU5MUy0xJAogCiAJcHVibGljIHN0YXRpYyBmaW5hbCBjaGFyW10gSGFzaENvZGUgPSAiaGFz
aENvZGUiLnRvQ2hhckFycmF5KCk7IC8vJE5PTi1OTFMtMSQKIAlwdWJsaWMgc3RhdGljIGZpbmFs
IGNoYXJbXSBIYXNoQ29kZVNpZ25hdHVyZSA9ICIoKUkiLnRvQ2hhckFycmF5KCk7IC8vJE5PTi1O
TFMtMSQ7IApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2ltcGwvQ29tcGlsZXJPcHRpb25zLmphdmEgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvaW1wbC9Db21waWxlck9wdGlvbnMuamF2YQppbmRleCBiZDBjOThkLi4xMzU3YTU1IDEw
MDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvaW1wbC9Db21waWxlck9wdGlvbnMuamF2YQorKysgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
aW1wbC9Db21waWxlck9wdGlvbnMuamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTEgSUJNIENvcnBvcmF0aW9uIGFu
ZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTIgSUJNIENvcnBvcmF0aW9uIGFu
ZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBh
Y2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRl
cm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFu
aWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC0xNTcsNiArMTU3
LDggQEAKIAlzdGF0aWMgZmluYWwgY2hhcltdW10gREVGQVVMVF9OT05OVUxMX0FOTk9UQVRJT05f
TkFNRSA9IENoYXJPcGVyYXRpb24uc3BsaXRPbignLicsICJvcmcuZWNsaXBzZS5qZHQuYW5ub3Rh
dGlvbi5Ob25OdWxsIi50b0NoYXJBcnJheSgpKTsgLy8kTk9OLU5MUy0xJAogCXN0YXRpYyBmaW5h
bCBjaGFyW11bXSBERUZBVUxUX05PTk5VTExCWURFRkFVTFRfQU5OT1RBVElPTl9OQU1FID0gQ2hh
ck9wZXJhdGlvbi5zcGxpdE9uKCcuJywgIm9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uLk5vbk51
bGxCeURlZmF1bHQiLnRvQ2hhckFycmF5KCkpOyAvLyROT04tTkxTLTEkCiAJcHVibGljIHN0YXRp
YyBmaW5hbCBTdHJpbmcgT1BUSU9OX05vbk51bGxJc0RlZmF1bHQgPSAib3JnLmVjbGlwc2UuamR0
LmNvcmUuY29tcGlsZXIuYW5ub3RhdGlvbi5ub25udWxsaXNkZWZhdWx0IjsgIC8vJE5PTi1OTFMt
MSQKKwkKKwlwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBPUFRJT05fQW5ub3RhdGlvbnNUb0V4
ZW1wdFVudXNlZE1ldGhvZHMgPSAib3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIucHJvYmxl
bS5hbm5vdGF0aW9uc1RvRXhlbXB0VW51c2VkUHJpdmF0ZU1ldGhvZHMiOyAvLyROT04tTkxTLTEk
CiAJLyoqCiAJICogUG9zc2libGUgdmFsdWVzIGZvciBjb25maWd1cmFibGUgb3B0aW9ucwogCSAq
LwpAQCAtMzg4LDYgKzM5MCw4IEBACiAJcHVibGljIGJvb2xlYW4gaW5jbHVkZU51bGxJbmZvRnJv
bUFzc2VydHM7CiAJLyoqIENvbnRyb2xzIHdoZXRoZXIgZm9yY2VkIGdlbmVyaWMgdHlwZSBwcm9i
bGVtcyBnZXQgcmVwb3J0ZWQgICovCiAJcHVibGljIGJvb2xlYW4gcmVwb3J0VW5hdm9pZGFibGVH
ZW5lcmljVHlwZVByb2JsZW1zOworCS8qKiBQcml2YXRlIG1ldGhvZHMgdGFnZ2VkIHdpdGggdGhl
c2UgYW5ub3RhdGlvbiB0eXBlcyB3aWxsIG5vdCBiZSByZXBvcnRlZCBhcyB1bnVzZWQgKi8KKwlw
dWJsaWMgY2hhcltdW10gYW5ub3RhdGlvbnNUb0V4Y2x1ZGVVbnVzZWRNZXRob2RzOyAKIAogCS8v
ID09PSBTdXBwb3J0IGZvciBOdWxsIEFubm90YXRpb25zOiA9PT0KIAkvKiogTWFzdGVyIHN3aXRj
aCBmb3IgbnVsbCBhbmFseXNpcyBiYXNlZCBvbiBhbm5vdGF0aW9uczogKi8KQEAgLTc4MCw3ICs3
ODQsOCBAQAogCQkJT1BUSU9OX1JlcG9ydE51bGxTcGVjVmlvbGF0aW9uLAogCQkJT1BUSU9OX1Jl
cG9ydFBvdGVudGlhbE51bGxTcGVjVmlvbGF0aW9uLAogCQkJT1BUSU9OX1JlcG9ydE51bGxTcGVj
SW5zdWZmaWNpZW50SW5mbywKLQkJCU9QVElPTl9SZXBvcnRSZWR1bmRhbnROdWxsQW5ub3RhdGlv
bgorCQkJT1BUSU9OX1JlcG9ydFJlZHVuZGFudE51bGxBbm5vdGF0aW9uLAorCQkJT1BUSU9OX0Fu
bm90YXRpb25zVG9FeGVtcHRVbnVzZWRNZXRob2RzCiAJCX07CiAJCXJldHVybiByZXN1bHQ7CiAJ
fQpAQCAtMTA3Miw2ICsxMDc3LDcgQEAKIAkJb3B0aW9uc01hcC5wdXQoT1BUSU9OX051bGxhYmxl
QW5ub3RhdGlvbk5hbWUsIFN0cmluZy52YWx1ZU9mKENoYXJPcGVyYXRpb24uY29uY2F0V2l0aCh0
aGlzLm51bGxhYmxlQW5ub3RhdGlvbk5hbWUsICcuJykpKTsKIAkJb3B0aW9uc01hcC5wdXQoT1BU
SU9OX05vbk51bGxBbm5vdGF0aW9uTmFtZSwgU3RyaW5nLnZhbHVlT2YoQ2hhck9wZXJhdGlvbi5j
b25jYXRXaXRoKHRoaXMubm9uTnVsbEFubm90YXRpb25OYW1lLCAnLicpKSk7CiAJCW9wdGlvbnNN
YXAucHV0KE9QVElPTl9Ob25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbk5hbWUsIFN0cmluZy52YWx1
ZU9mKENoYXJPcGVyYXRpb24uY29uY2F0V2l0aCh0aGlzLm5vbk51bGxCeURlZmF1bHRBbm5vdGF0
aW9uTmFtZSwgJy4nKSkpOworCQlvcHRpb25zTWFwLnB1dChPUFRJT05fQW5ub3RhdGlvbnNUb0V4
ZW1wdFVudXNlZE1ldGhvZHMsIHRoaXMuYW5ub3RhdGlvbnNUb0V4Y2x1ZGVVbnVzZWRNZXRob2Rz
ID09IG51bGwgPyBVdGlsLkVNUFRZX1NUUklORyA6IG5ldyBTdHJpbmcoQ2hhck9wZXJhdGlvbi5j
b25jYXRXaXRoKHRoaXMuYW5ub3RhdGlvbnNUb0V4Y2x1ZGVVbnVzZWRNZXRob2RzLCcsJykpKTsK
IAkJaWYgKHRoaXMuZGVmYXVsdE5vbk51bGxuZXNzID09IFRhZ0JpdHMuQW5ub3RhdGlvbk5vbk51
bGwpCiAJCQlvcHRpb25zTWFwLnB1dChPUFRJT05fTm9uTnVsbElzRGVmYXVsdCwgQ29tcGlsZXJP
cHRpb25zLkVOQUJMRUQpOwogCQllbHNlCkBAIC0xMjMyLDYgKzEyMzgsMTEgQEAKIAkJdGhpcy5u
b25OdWxsQW5ub3RhdGlvbk5hbWUgPSBERUZBVUxUX05PTk5VTExfQU5OT1RBVElPTl9OQU1FOwog
CQl0aGlzLm5vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uTmFtZSA9IERFRkFVTFRfTk9OTlVMTEJZ
REVGQVVMVF9BTk5PVEFUSU9OX05BTUU7CiAJCXRoaXMuZGVmYXVsdE5vbk51bGxuZXNzID0gMDsK
KwkJCisJCXRoaXMuYW5ub3RhdGlvbnNUb0V4Y2x1ZGVVbnVzZWRNZXRob2RzID0gbmV3IGNoYXJb
XVtdIHsgCisJCQkJImphdmF4LmFubm90YXRpb24uUHJlRGVzdHJveSIudG9DaGFyQXJyYXkoKSwg
Ly8kTk9OLU5MUy0xJAorCQkJCSJqYXZheC5hbm5vdGF0aW9uLlBvc3RDb25zdHJ1Y3QiLnRvQ2hh
ckFycmF5KCkgLy8kTk9OLU5MUy0xJAorCQl9OwogCX0KIAogCXB1YmxpYyB2b2lkIHNldChNYXAg
b3B0aW9uc01hcCkgewpAQCAtMTU0OCw2ICsxNTU5LDE3IEBACiAJCQkJCXRoaXMuZGVmYXVsdE5v
bk51bGxuZXNzID0gMDsKIAkJCX0KIAkJfQorCQkKKwkJaWYgKChvcHRpb25WYWx1ZSA9IG9wdGlv
bnNNYXAuZ2V0KE9QVElPTl9Bbm5vdGF0aW9uc1RvRXhlbXB0VW51c2VkTWV0aG9kcykpICE9IG51
bGwpIHsKKwkJCWlmIChvcHRpb25WYWx1ZSBpbnN0YW5jZW9mIFN0cmluZykgeworCQkJCVN0cmlu
ZyBzdHJpbmdWYWx1ZSA9IChTdHJpbmcpIG9wdGlvblZhbHVlOworCQkJCWlmIChzdHJpbmdWYWx1
ZS5sZW5ndGgoKSA9PSAwKSB7CisJCQkJCXRoaXMuYW5ub3RhdGlvbnNUb0V4Y2x1ZGVVbnVzZWRN
ZXRob2RzID0gbnVsbDsKKwkJCQl9IGVsc2UgeworCQkJCQl0aGlzLmFubm90YXRpb25zVG9FeGNs
dWRlVW51c2VkTWV0aG9kcyA9IENoYXJPcGVyYXRpb24uc3BsaXRBbmRUcmltT24oJywnLCBzdHJp
bmdWYWx1ZS50b0NoYXJBcnJheSgpKTsKKwkJCQl9CisJCQl9CisJCX0KIAogCQkvLyBKYXZhZG9j
IG9wdGlvbnMKIAkJaWYgKChvcHRpb25WYWx1ZSA9IG9wdGlvbnNNYXAuZ2V0KE9QVElPTl9Eb2ND
b21tZW50U3VwcG9ydCkpICE9IG51bGwpIHsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQW5u
b3RhdGlvbkJpbmRpbmcuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQW5ub3RhdGlvbkJpbmRpbmcuamF2
YQppbmRleCBjODhjNGExLi4yNmZlNThiIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0Fubm90
YXRpb25CaW5kaW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Bbm5vdGF0aW9uQmluZGluZy5q
YXZhCkBAIC0xLDUgKzEsNSBAQAogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdo
dCAoYykgMjAwMCwgMjAxMSBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdo
dCAoYykgMjAwMCwgMjAxMiBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAqIEFsbCByaWdo
dHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMK
ICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVi
bGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24s
IGFuZCBpcyBhdmFpbGFibGUgYXQKQEAgLTU0LDEwICs1NCw2IEBACiAJCWNvdW50Kys7CiAJaWYg
KChhbm5vdGF0aW9uVGFnQml0cyAmIFRhZ0JpdHMuQW5ub3RhdGlvblNhZmVWYXJhcmdzKSAhPSAw
KQogCQljb3VudCsrOwotCWlmICgoYW5ub3RhdGlvblRhZ0JpdHMgJiBUYWdCaXRzLkFubm90YXRp
b25Qb3N0Q29uc3RydWN0KSAhPSAwKQotCQljb3VudCsrOwotCWlmICgoYW5ub3RhdGlvblRhZ0Jp
dHMgJiBUYWdCaXRzLkFubm90YXRpb25QcmVEZXN0cm95KSAhPSAwKQotCQljb3VudCsrOwogCS8v
IGNvdW50IG11c3QgYmUgZGlmZmVyZW50IGZyb20gMAogCiAJaW50IGluZGV4ID0gcmVjb3JkZWRB
bm5vdGF0aW9ucy5sZW5ndGg7CkBAIC04MSwxMCArNzcsNiBAQAogCQlyZXN1bHRbaW5kZXgrK10g
PSBidWlsZE1hcmtlckFubm90YXRpb25Gb3JNZW1iZXJUeXBlKFR5cGVDb25zdGFudHMuSkFWQV9M
QU5HX0lOVk9LRV9NRVRIT0RIQU5ETEVfJF9QT0xZTU9SUEhJQ1NJR05BVFVSRSwgZW52KTsKIAlp
ZiAoKGFubm90YXRpb25UYWdCaXRzICYgVGFnQml0cy5Bbm5vdGF0aW9uU2FmZVZhcmFyZ3MpICE9
IDApCiAJCXJlc3VsdFtpbmRleCsrXSA9IGJ1aWxkTWFya2VyQW5ub3RhdGlvbihUeXBlQ29uc3Rh
bnRzLkpBVkFfTEFOR19TQUZFVkFSQVJHUywgZW52KTsKLQlpZiAoKGFubm90YXRpb25UYWdCaXRz
ICYgVGFnQml0cy5Bbm5vdGF0aW9uUG9zdENvbnN0cnVjdCkgIT0gMCkKLQkJcmVzdWx0W2luZGV4
KytdID0gYnVpbGRNYXJrZXJBbm5vdGF0aW9uKFR5cGVDb25zdGFudHMuSkFWQVhfQU5OT1RBVElP
Tl9QT1NUQ09OU1RSVUNULCBlbnYpOwotCWlmICgoYW5ub3RhdGlvblRhZ0JpdHMgJiBUYWdCaXRz
LkFubm90YXRpb25QcmVEZXN0cm95KSAhPSAwKQotCQlyZXN1bHRbaW5kZXgrK10gPSBidWlsZE1h
cmtlckFubm90YXRpb24oVHlwZUNvbnN0YW50cy5KQVZBWF9BTk5PVEFUSU9OX1BSRURFU1RST1ks
IGVudik7CiAJcmV0dXJuIHJlc3VsdDsKIH0KIApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9C
aW5hcnlUeXBlQmluZGluZy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9CaW5hcnlUeXBlQmluZGluZy5q
YXZhCmluZGV4IDRhMWJhZDQuLjY0NWM1YTQgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQmlu
YXJ5VHlwZUJpbmRpbmcuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0JpbmFyeVR5cGVCaW5kaW5n
LmphdmEKQEAgLTEsNSArMSw1IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJp
Z2h0IChjKSAyMDAwLCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJp
Z2h0IChjKSAyMDAwLCAyMDEyIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJp
Z2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFs
cwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQ
dWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlv
biwgYW5kIGlzIGF2YWlsYWJsZSBhdApAQCAtMTQ3LDcgKzE0Nyw3IEBACiAgKi8KIHB1YmxpYyBC
aW5hcnlUeXBlQmluZGluZyhQYWNrYWdlQmluZGluZyBwYWNrYWdlQmluZGluZywgSUJpbmFyeVR5
cGUgYmluYXJ5VHlwZSwgTG9va3VwRW52aXJvbm1lbnQgZW52aXJvbm1lbnQpIHsKIAl0aGlzLmNv
bXBvdW5kTmFtZSA9IENoYXJPcGVyYXRpb24uc3BsaXRPbignLycsIGJpbmFyeVR5cGUuZ2V0TmFt
ZSgpKTsKLQljb21wdXRlSWQoKTsKKwljb21wdXRlSWQoZW52aXJvbm1lbnQpOwogCiAJdGhpcy50
YWdCaXRzIHw9IFRhZ0JpdHMuSXNCaW5hcnlCaW5kaW5nOwogCXRoaXMuZW52aXJvbm1lbnQgPSBl
bnZpcm9ubWVudDsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvTG9va3VwRW52aXJvbm1lbnQu
amF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9sb29rdXAvTG9va3VwRW52aXJvbm1lbnQuamF2YQppbmRleCAwYjQ4YmJi
Li5kNWQ2Mzg4IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0xvb2t1cEVudmlyb25tZW50Lmph
dmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Mb29rdXBFbnZpcm9ubWVudC5qYXZhCkBAIC0xLDUgKzEs
NSBAQAogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAx
MSBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAx
MiBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRo
aXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2
YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEu
MAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFi
bGUgYXQKQEAgLTEwODAsNiArMTA4MCwxMCBAQAogCXJldHVybiBwYWNrYWdlQmluZGluZy5nZXRU
eXBlMChjb21wb3VuZE5hbWVbY29tcG91bmROYW1lLmxlbmd0aCAtIDFdKTsKIH0KIAorcHVibGlj
IGNoYXJbXVtdIGdldFVudXNlZFdhcm5pbmdFeGNsdXNpb25Bbm5vdGF0aW9ucygpIHsKKwlyZXR1
cm4gdGhpcy5nbG9iYWxPcHRpb25zLmFubm90YXRpb25zVG9FeGNsdWRlVW51c2VkTWV0aG9kczsK
K30KKwogcHVibGljIGNoYXJbXVtdIGdldE51bGxhYmxlQW5ub3RhdGlvbk5hbWUoKSB7CiAJcmV0
dXJuIHRoaXMuZ2xvYmFsT3B0aW9ucy5udWxsYWJsZUFubm90YXRpb25OYW1lOwogfQpkaWZmIC0t
Z2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9NaXNzaW5nVHlwZUJpbmRpbmcuamF2YSBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29r
dXAvTWlzc2luZ1R5cGVCaW5kaW5nLmphdmEKaW5kZXggOGI4NmQ4Yy4uMDEzODg2OCAxMDA2NDQK
LS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9NaXNzaW5nVHlwZUJpbmRpbmcuamF2YQorKysgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
bG9va3VwL01pc3NpbmdUeXBlQmluZGluZy5qYXZhCkBAIC0xLDUgKzEsNSBAQAogLyoqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAwOCBJQk0gQ29ycG9yYXRp
b24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMiBJQk0gQ29ycG9yYXRp
b24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQg
dGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0
aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNj
b21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKQEAgLTI2LDcg
KzI2LDcgQEAKICAqLwogcHVibGljIE1pc3NpbmdUeXBlQmluZGluZyhQYWNrYWdlQmluZGluZyBw
YWNrYWdlQmluZGluZywgY2hhcltdW10gY29tcG91bmROYW1lLCBMb29rdXBFbnZpcm9ubWVudCBl
bnZpcm9ubWVudCkgewogCXRoaXMuY29tcG91bmROYW1lID0gY29tcG91bmROYW1lOwotCWNvbXB1
dGVJZCgpOworCWNvbXB1dGVJZChlbnZpcm9ubWVudCk7CiAJdGhpcy50YWdCaXRzIHw9IFRhZ0Jp
dHMuSXNCaW5hcnlCaW5kaW5nIHwgVGFnQml0cy5IaWVyYXJjaHlIYXNQcm9ibGVtcyB8IFRhZ0Jp
dHMuSGFzTWlzc2luZ1R5cGU7CiAJdGhpcy5lbnZpcm9ubWVudCA9IGVudmlyb25tZW50OwogCXRo
aXMuZlBhY2thZ2UgPSBwYWNrYWdlQmluZGluZzsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAv
UmVmZXJlbmNlQmluZGluZy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9SZWZlcmVuY2VCaW5kaW5nLmph
dmEKaW5kZXggNzVkZTg1NC4uYzIyMDNhMyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9SZWZl
cmVuY2VCaW5kaW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9SZWZlcmVuY2VCaW5kaW5nLmph
dmEKQEAgLTEsNSArMSw1IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0
IChjKSAyMDAwLCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0
IChjKSAyMDAwLCAyMDEyIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0
cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwog
ICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJs
aWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwg
YW5kIGlzIGF2YWlsYWJsZSBhdApAQCAtMTcsOCArMTcsMTAgQEAKIGltcG9ydCBqYXZhLnV0aWwu
Q29tcGFyYXRvcjsKIAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLkNoYXJP
cGVyYXRpb247CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuSVByb2JsZW07
CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5NZXRob2REZWNs
YXJhdGlvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuY2xhc3Nm
bXQuQ2xhc3NGaWxlQ29uc3RhbnRzOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b21waWxlci5wcm9ibGVtLlByb2JsZW1TZXZlcml0aWVzOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5pbnRlcm5hbC5jb21waWxlci51dGlsLlNpbXBsZUxvb2t1cFRhYmxlOwogCiAvKgpAQCAtMzc1
LDMzICszNzcsMjggQEAKIAlyZXR1cm4gcmVzdWx0OwogfQogCi1wdWJsaWMgdm9pZCBjb21wdXRl
SWQoKSB7CitwdWJsaWMgdm9pZCBjb21wdXRlSWQoTG9va3VwRW52aXJvbm1lbnQgZW52KSB7CisJ
Y2hhcltdW10gdW51c2VkV2FybmluZ0V4Y2x1c2lvbkFubm90YXRpb25zID0gZW52LmdldFVudXNl
ZFdhcm5pbmdFeGNsdXNpb25Bbm5vdGF0aW9ucygpOworCWlmIChlbnYucHJvYmxlbVJlcG9ydGVy
LmNvbXB1dGVTZXZlcml0eShJUHJvYmxlbS5VbnVzZWRQcml2YXRlTWV0aG9kKSAhPSBQcm9ibGVt
U2V2ZXJpdGllcy5JZ25vcmUKKwkJCSYmIHVudXNlZFdhcm5pbmdFeGNsdXNpb25Bbm5vdGF0aW9u
cyAhPSBudWxsKSB7CisJCWludCBsZW4gPSB1bnVzZWRXYXJuaW5nRXhjbHVzaW9uQW5ub3RhdGlv
bnMubGVuZ3RoOworCQlmb3IgKGludCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7CisJCQlpZiAoQ2hh
ck9wZXJhdGlvbi5lcXVhbHMoQ2hhck9wZXJhdGlvbi5jb25jYXRXaXRoKHRoaXMuY29tcG91bmRO
YW1lLCcuJyksIHVudXNlZFdhcm5pbmdFeGNsdXNpb25Bbm5vdGF0aW9uc1tpXSkpCisJCQkJdGhp
cy5pZCA9IFR5cGVJZHMuVF9VbnVzZWRXYXJuaW5nRXhjbHVzaW9uQW5ub3RhdGlvbjsKKwkJfQor
CX0KIAkvLyB0cnkgdG8gYXZvaWQgbXVsdGlwbGUgY2hlY2tzIGFnYWluc3QgYSBwYWNrYWdlL3R5
cGUgbmFtZQogCXN3aXRjaCAodGhpcy5jb21wb3VuZE5hbWUubGVuZ3RoKSB7CiAKIAkJY2FzZSAz
IDoKLQkJCWlmICghQ2hhck9wZXJhdGlvbi5lcXVhbHMoVHlwZUNvbnN0YW50cy5KQVZBLCB0aGlz
LmNvbXBvdW5kTmFtZVswXSkKLQkJCQkJJiYgIUNoYXJPcGVyYXRpb24uZXF1YWxzKFR5cGVDb25z
dGFudHMuSkFWQVgsIHRoaXMuY29tcG91bmROYW1lWzBdKSkKKwkJCWlmICghQ2hhck9wZXJhdGlv
bi5lcXVhbHMoVHlwZUNvbnN0YW50cy5KQVZBLCB0aGlzLmNvbXBvdW5kTmFtZVswXSkpCiAJCQkJ
cmV0dXJuOwogCQkJCiAJCQljaGFyW10gcGFja2FnZU5hbWUgPSB0aGlzLmNvbXBvdW5kTmFtZVsx
XTsKIAkJCWlmIChwYWNrYWdlTmFtZS5sZW5ndGggPT0gMCkgcmV0dXJuOyAvLyBqdXN0IHRvIGJl
IHNhZmUKIAkJCWNoYXJbXSB0eXBlTmFtZSA9IHRoaXMuY29tcG91bmROYW1lWzJdOwogCQkJaWYg
KHR5cGVOYW1lLmxlbmd0aCA9PSAwKSByZXR1cm47IC8vIGp1c3QgdG8gYmUgc2FmZQotCQkJLy8g
cmVtYWluaW5nIHR5cGVzIE1VU1QgYmUgaW4gamF2YS4qLioKLQkJCWlmIChDaGFyT3BlcmF0aW9u
LmVxdWFscyhUeXBlQ29uc3RhbnRzLkpBVkFYLCB0aGlzLmNvbXBvdW5kTmFtZVswXSkpIHsKLQkJ
CQlpZiAoQ2hhck9wZXJhdGlvbi5lcXVhbHMoVHlwZUNvbnN0YW50cy5BTk5PVEFUSU9OLCB0aGlz
LmNvbXBvdW5kTmFtZVsxXSkpIHsKLQkJCQkJc3dpdGNoICh0eXBlTmFtZVswXSkgewotCQkJCQkJ
Y2FzZSAnUCcgOgotCQkJCQkJCWlmIChDaGFyT3BlcmF0aW9uLmVxdWFscyh0eXBlTmFtZSwgVHlw
ZUNvbnN0YW50cy5KQVZBWF9BTk5PVEFUSU9OX1BPU1RDT05TVFJVQ1RbMl0pKQotCQkJCQkJCQl0
aGlzLmlkID0gVHlwZUlkcy5UX0phdmF4QW5ub3RhdGlvblBvc3RDb25zdHJ1Y3Q7Ci0JCQkJCQkJ
aWYgKENoYXJPcGVyYXRpb24uZXF1YWxzKHR5cGVOYW1lLCBUeXBlQ29uc3RhbnRzLkpBVkFYX0FO
Tk9UQVRJT05fUFJFREVTVFJPWVsyXSkpCi0JCQkJCQkJCXRoaXMuaWQgPSBUeXBlSWRzLlRfSmF2
YXhBbm5vdGF0aW9uUHJlRGVzdHJveTsKLQkJCQkJCQlyZXR1cm47Ci0JCQkJCX0KLQkJCQl9Ci0J
CQkJcmV0dXJuOwotCQkJfQorCQkJCiAJCQlpZiAoIUNoYXJPcGVyYXRpb24uZXF1YWxzKFR5cGVD
b25zdGFudHMuTEFORywgdGhpcy5jb21wb3VuZE5hbWVbMV0pKSB7CiAJCQkJc3dpdGNoIChwYWNr
YWdlTmFtZVswXSkgewogCQkJCQljYXNlICdpJyA6CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3Vw
L1NvdXJjZVR5cGVCaW5kaW5nLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1NvdXJjZVR5cGVCaW5kaW5n
LmphdmEKaW5kZXggZTk2YTFmOS4uODE0MzBjMCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9T
b3VyY2VUeXBlQmluZGluZy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU291cmNlVHlwZUJpbmRp
bmcuamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5
cmlnaHQgKGMpIDIwMDAsIDIwMTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5
cmlnaHQgKGMpIDIwMDAsIDIwMTIgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwg
cmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJp
YWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNl
IFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0
aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC03Miw3ICs3Miw3IEBACiAJdGhpcy5maWVsZHMg
PSBCaW5kaW5nLlVOSU5JVElBTElaRURfRklFTERTOwogCXRoaXMubWV0aG9kcyA9IEJpbmRpbmcu
VU5JTklUSUFMSVpFRF9NRVRIT0RTOwogCi0JY29tcHV0ZUlkKCk7CisJY29tcHV0ZUlkKHNjb3Bl
LmVudmlyb25tZW50KCkpOwogfQogCiBwcml2YXRlIHZvaWQgYWRkRGVmYXVsdEFic3RyYWN0TWV0
aG9kcygpIHsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvVGFnQml0cy5qYXZhIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2xvb2t1cC9UYWdCaXRzLmphdmEKaW5kZXggOWJhNmRhMC4uNzU3OWNhYiAxMDA2NDQKLS0tIGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2xvb2t1cC9UYWdCaXRzLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9UYWdCaXRzLmph
dmEKQEAgLTEsNSArMSw1IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0
IChjKSAyMDAwLCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0
IChjKSAyMDAwLCAyMDEyIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0
cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwog
ICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJs
aWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwg
YW5kIGlzIGF2YWlsYWJsZSBhdApAQCAtMTMwLDkgKzEzMCw3IEBACiAJLyoqIEBzaW5jZSAzLjcg
LSBqYXZhIDcgTWV0aG9kSGFuZGxlLmludm9rZUV4YWN0KC4uKS9pbnZva2VHZW5lcmljKC4uKSov
CiAJbG9uZyBBbm5vdGF0aW9uUG9seW1vcnBoaWNTaWduYXR1cmUgPSBBU1ROb2RlLkJpdDUzTDsK
IAkvKiogQHNpbmNlIDMuOCAqLwotCWxvbmcgQW5ub3RhdGlvblByZURlc3Ryb3kgPSBBU1ROb2Rl
LkJpdDU0TDsKLQkvKiogQHNpbmNlIDMuOCAqLwotCWxvbmcgQW5ub3RhdGlvblBvc3RDb25zdHJ1
Y3QgPSBBU1ROb2RlLkJpdDU1TDsKKwlsb25nIEFubm90YXRpb25Ub0V4Y2x1ZGVVbnVzZWRXYXJu
aW5nID0gQVNUTm9kZS5CaXQ1NEw7CiAJLyoqIEBzaW5jZSAzLjggbnVsbCBhbm5vdGF0aW9uIGZv
ciBNZXRob2RCaW5kaW5nIG9yIExvY2FsVmFyaWFibGVCaW5kaW5nIChhcmd1bWVudCk6ICovCiAJ
bG9uZyBBbm5vdGF0aW9uTnVsbGFibGUgPSBBU1ROb2RlLkJpdDU2TDsKIAkvKiogQHNpbmNlIDMu
OCBudWxsIGFubm90YXRpb24gZm9yIE1ldGhvZEJpbmRpbmcgb3IgTG9jYWxWYXJpYWJsZUJpbmRp
bmcgKGFyZ3VtZW50KTogKi8KQEAgLTE1Miw4ICsxNTAsNyBAQAogCQkJCXwgQW5ub3RhdGlvblN1
cHByZXNzV2FybmluZ3MKIAkJCQl8IEFubm90YXRpb25TYWZlVmFyYXJncwogCQkJCXwgQW5ub3Rh
dGlvblBvbHltb3JwaGljU2lnbmF0dXJlCi0JCQkJfCBBbm5vdGF0aW9uUG9zdENvbnN0cnVjdAot
CQkJCXwgQW5ub3RhdGlvblByZURlc3Ryb3kKKwkJCQl8IEFubm90YXRpb25Ub0V4Y2x1ZGVVbnVz
ZWRXYXJuaW5nCiAJCQkJfCBBbm5vdGF0aW9uTnVsbGFibGUKIAkJCQl8IEFubm90YXRpb25Ob25O
dWxsCiAJCQkJfCBBbm5vdGF0aW9uTm9uTnVsbEJ5RGVmYXVsdApkaWZmIC0tZ2l0IGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2xvb2t1cC9UeXBlQ29uc3RhbnRzLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1R5cGVDb25zdGFudHMu
amF2YQppbmRleCAwYmJlZjQ3Li43MDk4ZDM3IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1R5
cGVDb25zdGFudHMuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1R5cGVDb25zdGFudHMuamF2YQpA
QCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMp
IDIwMDAsIDIwMTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMp
IDIwMDAsIDIwMTIgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJl
c2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBh
cmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBM
aWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQg
aXMgYXZhaWxhYmxlIGF0CkBAIC0xNzcsMTggKzE3Nyw2IEBACiAJY2hhcltdIFNZTlRIRVRJQ19B
Q0NFU1NfTUVUSE9EX1BSRUZJWCA9ICAiYWNjZXNzJCIudG9DaGFyQXJyYXkoKTsgLy8kTk9OLU5M
Uy0xJAogCWNoYXJbXSBTWU5USEVUSUNfRU5VTV9DT05TVEFOVF9JTklUSUFMSVpBVElPTl9NRVRI
T0RfUFJFRklYID0gICIgZW51bSBjb25zdGFudCBpbml0aWFsaXphdGlvbiQiLnRvQ2hhckFycmF5
KCk7IC8vJE5PTi1OTFMtMSQKIAljaGFyW10gU1lOVEhFVElDX1NUQVRJQ19GQUNUT1JZID0gICI8
ZmFjdG9yeT4iLnRvQ2hhckFycmF5KCk7IC8vJE5PTi1OTFMtMSQKLQljaGFyW11bXSBKQVZBWF9B
Tk5PVEFUSU9OX1BPU1RDT05TVFJVQ1QgPQotCQkJbmV3IGNoYXJbXVtdIHsKLQkJCQlKQVZBWCwK
LQkJCQlBTk5PVEFUSU9OLAotCQkJCSJQb3N0Q29uc3RydWN0Ii50b0NoYXJBcnJheSgpIC8vJE5P
Ti1OTFMtMSQKLQkJCX07Ci0JY2hhcltdW10gSkFWQVhfQU5OT1RBVElPTl9QUkVERVNUUk9ZID0K
LQkJCW5ldyBjaGFyW11bXSB7Ci0JCQkJSkFWQVgsCi0JCQkJQU5OT1RBVElPTiwKLQkJCQkiUHJl
RGVzdHJveSIudG9DaGFyQXJyYXkoKSAvLyROT04tTkxTLTEkCi0JCQl9OwogCiAJLy8gc3ludGhl
dGljIHBhY2thZ2UtaW5mbyBuYW1lCiAJcHVibGljIHN0YXRpYyBmaW5hbCBjaGFyW10gUEFDS0FH
RV9JTkZPX05BTUUgPSAicGFja2FnZS1pbmZvIi50b0NoYXJBcnJheSgpOyAvLyROT04tTkxTLTEk
CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1R5cGVJZHMuamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAv
VHlwZUlkcy5qYXZhCmluZGV4IDdmZmY0MzQuLjc0MmU1NjIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9s
b29rdXAvVHlwZUlkcy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvVHlwZUlkcy5qYXZhCkBAIC0x
LDUgKzEsNSBAQAogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAw
MCwgMjAxMSBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAw
MCwgMjAxMiBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2
ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBt
YWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vu
c2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBh
dmFpbGFibGUgYXQKQEAgLTEwMiwxNCArMTAyLDEyIEBACiAJZmluYWwgaW50IFRfSmF2YUxhbmdB
dXRvQ2xvc2VhYmxlID0gNjI7CiAKIAkvLyBuZXcgaW4gMy44Ci0JZmluYWwgaW50IFRfSmF2YXhB
bm5vdGF0aW9uUG9zdENvbnN0cnVjdCA9IDYzOwotCi0JZmluYWwgaW50IFRfSmF2YXhBbm5vdGF0
aW9uUHJlRGVzdHJveSA9IDY0OworCWZpbmFsIGludCBUX1VudXNlZFdhcm5pbmdFeGNsdXNpb25B
bm5vdGF0aW9uID0gNjM7CiAJCiAJLy8gbmV3IGluIDMuOCBmb3IgbnVsbCBhbm5vdGF0aW9uczoK
LQlmaW5hbCBpbnQgVF9Db25maWd1cmVkQW5ub3RhdGlvbk51bGxhYmxlID0gNjU7Ci0JZmluYWwg
aW50IFRfQ29uZmlndXJlZEFubm90YXRpb25Ob25OdWxsID0gNjY7Ci0JZmluYWwgaW50IFRfQ29u
ZmlndXJlZEFubm90YXRpb25Ob25OdWxsQnlEZWZhdWx0ID0gNjc7CisJZmluYWwgaW50IFRfQ29u
ZmlndXJlZEFubm90YXRpb25OdWxsYWJsZSA9IDY0OworCWZpbmFsIGludCBUX0NvbmZpZ3VyZWRB
bm5vdGF0aW9uTm9uTnVsbCA9IDY1OworCWZpbmFsIGludCBUX0NvbmZpZ3VyZWRBbm5vdGF0aW9u
Tm9uTnVsbEJ5RGVmYXVsdCA9IDY2OwogCiAJZmluYWwgaW50IE5vSWQgPSBJbnRlZ2VyLk1BWF9W
QUxVRTsKIApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxlbVJlcG9ydGVyLmphdmEg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvcHJvYmxlbS9Qcm9ibGVtUmVwb3J0ZXIuamF2YQppbmRleCA5YjgzOTMzLi5iNmRj
ZDQ3IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9Qcm9ibGVtUmVwb3J0ZXIuamF2YQorKysg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvcHJvYmxlbS9Qcm9ibGVtUmVwb3J0ZXIuamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8q
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTEgSUJNIENv
cnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTIgSUJNIENv
cnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dy
YW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUg
dW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdo
aWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBA
IC03NjkxLDggKzc2OTEsOSBAQAogCQkJJiYgQ2hhck9wZXJhdGlvbi5lcXVhbHMobWV0aG9kLnNl
bGVjdG9yLCBUeXBlQ29uc3RhbnRzLldSSVRFUkVQTEFDRSkpIHsKIAkJcmV0dXJuOwogCX0KLQlp
ZiAoKG1ldGhvZC50YWdCaXRzICYgKFRhZ0JpdHMuQW5ub3RhdGlvblBvc3RDb25zdHJ1Y3QgfCBU
YWdCaXRzLkFubm90YXRpb25QcmVEZXN0cm95KSkgIT0gMCkgewotCQkvLyBQb3N0Q29uc3RydWN0
IGFuZCBQcmVEZXN0cm95IG1ldGhvZCBhcmUgaWdub3JlZAorCQorCWlmICgobWV0aG9kLnRhZ0Jp
dHMgJiBUYWdCaXRzLkFubm90YXRpb25Ub0V4Y2x1ZGVVbnVzZWRXYXJuaW5nKSAhPSAwKSB7CisJ
CS8vIG1ldGhvZCB0YWdnZWQgd2l0aCBhbm5vdGF0aW9uIHRoYXQgZXhjbHVkZXMgdGhlIG1ldGhv
ZCBmcm9tIHVudXNlZCB3YXJuaW5nCiAJCXJldHVybjsKIAl9CiAJdGhpcy5oYW5kbGUoCmRpZmYg
LS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvY29yZS9K
YXZhQ29yZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0
L2NvcmUvSmF2YUNvcmUuamF2YQppbmRleCA1ODk4OTAyLi44MDU2NWUzIDEwMDY0NAotLS0gYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvY29yZS9KYXZhQ29yZS5q
YXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L0phdmFDb3JlLmphdmEKQEAgLTEsNSArMSw1IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgot
ICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgor
ICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEyIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgog
ICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5n
IG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUg
RWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRp
c3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdApAQCAtNjI0LDYgKzYyNCwxOSBAQAogCSAq
LwogCXB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIENPTVBJTEVSX1BCX1VOVVNFRF9QUklWQVRF
X01FTUJFUiA9IFBMVUdJTl9JRCArICIuY29tcGlsZXIucHJvYmxlbS51bnVzZWRQcml2YXRlTWVt
YmVyIjsgLy8kTk9OLU5MUy0xJAogCS8qKgorCSAqIENvbXBpbGVyIG9wdGlvbiBJRDogQW5ub3Rh
dGlvbnMgdGhhdCBleGVtcHQgYSBwcml2YXRlIG1ldGhvZCBmcm9tIGJlaW5nIHJlcG9ydGVkIGFz
IHVudXNlZC4KKwkgKiA8cD5XaGVuIHRoZSB7QGxpbmsgI0NPTVBJTEVSX1BCX1VOVVNFRF9QUklW
QVRFX01FTUJFUn0gaXMgZW5hYmxlZCwgdGhlIGNvbXBpbGVyIHdpbGwgbm90IHJlcG9ydAorCSAq
ICAgIHByaXZhdGUgbWV0aG9kcyB0aGF0IGFyZSBkZWNsYXJlZCB3aXRoIHRoZXNlIGFubm90YXRp
b25zLCBldmVuIGlmIHRoZSBtZXRob2QgaXMgb3RoZXJ3aXNlIHVudXNlZC4KKwkgKiA8ZGw+CisJ
ICogPGR0Pk9wdGlvbiBpZDo8L2R0PjxkZD48Y29kZT4ib3JnLmVjbGlwc2UuamR0LmNvcmUuY29t
cGlsZXIucHJvYmxlbS5hbm5vdGF0aW9uc1RvRXhlbXB0VW51c2VkUHJpdmF0ZU1ldGhvZHMiPC9j
b2RlPjwvZGQ+CisJICogPGR0PlBvc3NpYmxlIHZhbHVlczo8L2R0PjxkZD5GdWxseSBxdWFsaWZp
ZWQgYW5ub3RhdGlvbiB0eXBlIG5hbWVzPC9kZD4KKwkgKiA8ZHQ+RGVmYXVsdDo8L2R0PjxkZD48
Y29kZT5qYXZheC5hbm5vdGF0aW9uLlByZURlc3Ryb3ksIGphdmF4LmFubm90YXRpb24uUG9zdENv
bnN0cnVjdDwvY29kZT48L2RkPgorCSAqIDwvZGw+CisJICogQHNpbmNlIDMuOAorCSAqIEBjYXRl
Z29yeSBDb21waWxlck9wdGlvbklECisJICovCisJcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcg
Q09NUElMRVJfQU5OT1RBVElPTlNfVE9fRVhFTVBUX1VOVVNFRF9QUklWQVRFX01FVEhPRCA9IFBM
VUdJTl9JRCArICIuY29tcGlsZXIucHJvYmxlbS5hbm5vdGF0aW9uc1RvRXhlbXB0VW51c2VkUHJp
dmF0ZU1ldGhvZHMiOyAvLyROT04tTkxTLTEkCisJLyoqCiAJICogQ29tcGlsZXIgb3B0aW9uIElE
OiBSZXBvcnRpbmcgTG9jYWwgVmFyaWFibGUgRGVjbGFyYXRpb24gSGlkaW5nIGFub3RoZXIgVmFy
aWFibGUuCiAJICogPHA+V2hlbiBlbmFibGVkLCB0aGUgY29tcGlsZXIgd2lsbCBpc3N1ZSBhbiBl
cnJvciBvciBhIHdhcm5pbmcgd2hlbmV2ZXIgYSBsb2NhbCB2YXJpYWJsZQogCSAqICAgIGRlY2xh
cmF0aW9uIGlzIGhpZGluZyBzb21lIGZpZWxkIG9yIGxvY2FsIHZhcmlhYmxlIChlaXRoZXIgbG9j
YWxseSwgaW5oZXJpdGVkIG9yIGRlZmluZWQgaW4gZW5jbG9zaW5nIHR5cGUpLgpkaWZmIC0tZ2l0
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
cmUvQmluYXJ5TWVtYmVyLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29yZS9CaW5hcnlNZW1iZXIuamF2YQppbmRleCA5NGU2ZGIxLi4z
ZjZkNzQyIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29yZS9CaW5hcnlNZW1iZXIuamF2YQorKysgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9CaW5hcnlNZW1iZXIu
amF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmln
aHQgKGMpIDIwMDAsIDIwMTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmln
aHQgKGMpIDIwMDAsIDIwMTIgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmln
aHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxz
CiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1
YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9u
LCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC04NiwxMiArODYsNiBAQAogCX0KIAlpZiAoKHRhZ0Jp
dHMgJiBUYWdCaXRzLkFubm90YXRpb25TYWZlVmFyYXJncykgIT0gMCkgewogCQlhbm5vdGF0aW9u
cy5hZGQoZ2V0QW5ub3RhdGlvbihUeXBlQ29uc3RhbnRzLkpBVkFfTEFOR19TQUZFVkFSQVJHUykp
OwotCX0KLQlpZiAoKHRhZ0JpdHMgJiBUYWdCaXRzLkFubm90YXRpb25Qb3N0Q29uc3RydWN0KSAh
PSAwKSB7Ci0JCWFubm90YXRpb25zLmFkZChnZXRBbm5vdGF0aW9uKFR5cGVDb25zdGFudHMuSkFW
QVhfQU5OT1RBVElPTl9QT1NUQ09OU1RSVUNUKSk7Ci0JfQotCWlmICgodGFnQml0cyAmIFRhZ0Jp
dHMuQW5ub3RhdGlvblByZURlc3Ryb3kpICE9IDApIHsKLQkJYW5ub3RhdGlvbnMuYWRkKGdldEFu
bm90YXRpb24oVHlwZUNvbnN0YW50cy5KQVZBWF9BTk5PVEFUSU9OX1BSRURFU1RST1kpKTsKIAl9
CiAJLy8gbm90ZSB0aGF0IEpBVkFfTEFOR19TVVBQUkVTU1dBUk5JTkdTIGFuZCBKQVZBX0xBTkdf
T1ZFUlJJREUgY2Fubm90IGFwcGVhciBpbiBiaW5hcmllcwogCXJldHVybiAoSUFubm90YXRpb25b
XSkgYW5ub3RhdGlvbnMudG9BcnJheShuZXcgSUFubm90YXRpb25bYW5ub3RhdGlvbnMuc2l6ZSgp
XSk7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29yZS9DbGFzc0ZpbGVJbmZvLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9DbGFzc0ZpbGVJbmZvLmphdmEK
aW5kZXggYmNmN2NlYi4uZTE3MTRhMCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
bW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvQ2xhc3NGaWxlSW5mby5qYXZhCisr
KyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b3JlL0NsYXNzRmlsZUluZm8uamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTEgSUJNIENvcnBvcmF0aW9uIGFuZCBv
dGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTIgSUJNIENvcnBvcmF0aW9uIGFuZCBv
dGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2Nv
bXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1z
IG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVz
IHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC0xMDcsMTIgKzEwNyw2
IEBACiAJfQogCWlmICgodGFnQml0cyAmIFRhZ0JpdHMuQW5ub3RhdGlvblNhZmVWYXJhcmdzKSAh
PSAwKSB7CiAJCWdlbmVyYXRlU3RhbmRhcmRBbm5vdGF0aW9uKGphdmFFbGVtZW50LCBUeXBlQ29u
c3RhbnRzLkpBVkFfTEFOR19TQUZFVkFSQVJHUywgQW5ub3RhdGlvbi5OT19NRU1CRVJfVkFMVUVf
UEFJUlMsIG5ld0VsZW1lbnRzKTsKLQl9Ci0JaWYgKCh0YWdCaXRzICYgVGFnQml0cy5Bbm5vdGF0
aW9uUG9zdENvbnN0cnVjdCkgIT0gMCkgewotCQlnZW5lcmF0ZVN0YW5kYXJkQW5ub3RhdGlvbihq
YXZhRWxlbWVudCwgVHlwZUNvbnN0YW50cy5KQVZBWF9BTk5PVEFUSU9OX1BPU1RDT05TVFJVQ1Qs
IEFubm90YXRpb24uTk9fTUVNQkVSX1ZBTFVFX1BBSVJTLCBuZXdFbGVtZW50cyk7Ci0JfQotCWlm
ICgodGFnQml0cyAmIFRhZ0JpdHMuQW5ub3RhdGlvblByZURlc3Ryb3kpICE9IDApIHsKLQkJZ2Vu
ZXJhdGVTdGFuZGFyZEFubm90YXRpb24oamF2YUVsZW1lbnQsIFR5cGVDb25zdGFudHMuSkFWQVhf
QU5OT1RBVElPTl9QUkVERVNUUk9ZLCBBbm5vdGF0aW9uLk5PX01FTUJFUl9WQUxVRV9QQUlSUywg
bmV3RWxlbWVudHMpOwogCX0KIAkvLyBub3RlIHRoYXQgSkFWQV9MQU5HX1NVUFBSRVNTV0FSTklO
R1MgYW5kIEpBVkFfTEFOR19PVkVSUklERSBjYW5ub3QgYXBwZWFyIGluIGJpbmFyaWVzCiB9CmRp
ZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvcmUvc2VhcmNoL2luZGV4aW5nL0JpbmFyeUluZGV4ZXIuamF2YSBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gv
aW5kZXhpbmcvQmluYXJ5SW5kZXhlci5qYXZhCmluZGV4IGMyNDJmYjUuLmEyYmRmZTMgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29yZS9zZWFyY2gvaW5kZXhpbmcvQmluYXJ5SW5kZXhlci5qYXZhCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gv
aW5kZXhpbmcvQmluYXJ5SW5kZXhlci5qYXZhCkBAIC0xLDUgKzEsNSBAQAogLyoqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMSBJQk0gQ29ycG9yYXRpb24g
YW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMiBJQk0gQ29ycG9yYXRpb24g
YW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhl
IGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUg
dGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21w
YW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKQEAgLTgzLDE0ICs4
Myw2IEBACiAJCWlmICgoYW5ub3RhdGlvblRhZ0JpdHMgJiBUYWdCaXRzLkFubm90YXRpb25Qb2x5
bW9ycGhpY1NpZ25hdHVyZSkgIT0gMCkgewogCQkJY2hhcltdW10gY29tcG91bmROYW1lID0KIAkJ
CQkJVHlwZUNvbnN0YW50cy5KQVZBX0xBTkdfSU5WT0tFX01FVEhPREhBTkRMRV8kX1BPTFlNT1JQ
SElDU0lHTkFUVVJFOwotCQkJYWRkQW5ub3RhdGlvblR5cGVSZWZlcmVuY2UoY29tcG91bmROYW1l
W2NvbXBvdW5kTmFtZS5sZW5ndGgtMV0pOwotCQl9Ci0JCWlmICgoYW5ub3RhdGlvblRhZ0JpdHMg
JiBUYWdCaXRzLkFubm90YXRpb25Qb3N0Q29uc3RydWN0KSAhPSAwKSB7Ci0JCQljaGFyW11bXSBj
b21wb3VuZE5hbWUgPSBUeXBlQ29uc3RhbnRzLkpBVkFYX0FOTk9UQVRJT05fUE9TVENPTlNUUlVD
VDsKLQkJCWFkZEFubm90YXRpb25UeXBlUmVmZXJlbmNlKGNvbXBvdW5kTmFtZVtjb21wb3VuZE5h
bWUubGVuZ3RoLTFdKTsKLQkJfQotCQlpZiAoKGFubm90YXRpb25UYWdCaXRzICYgVGFnQml0cy5B
bm5vdGF0aW9uUHJlRGVzdHJveSkgIT0gMCkgewotCQkJY2hhcltdW10gY29tcG91bmROYW1lID0g
VHlwZUNvbnN0YW50cy5KQVZBWF9BTk5PVEFUSU9OX1BSRURFU1RST1k7CiAJCQlhZGRBbm5vdGF0
aW9uVHlwZVJlZmVyZW5jZShjb21wb3VuZE5hbWVbY29tcG91bmROYW1lLmxlbmd0aC0xXSk7CiAJ
CX0KIAl9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNoL21hdGNoaW5nL0NsYXNzRmlsZU1hdGNoTG9jYXRv
ci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb3JlL3NlYXJjaC9tYXRjaGluZy9DbGFzc0ZpbGVNYXRjaExvY2F0b3IuamF2YQppbmRl
eCAzNzYwOGFhLi4wYzU1ODM3IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFy
Y2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNoL21hdGNoaW5nL0NsYXNzRmls
ZU1hdGNoTG9jYXRvci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gvbWF0Y2hpbmcvQ2xhc3NGaWxlTWF0Y2hM
b2NhdG9yLmphdmEKQEAgLTEsNSArMSw1IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICog
Q29weXJpZ2h0IChjKSAyMDAwLCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICog
Q29weXJpZ2h0IChjKSAyMDAwLCAyMDEyIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICog
QWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1h
dGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNs
aXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3Ry
aWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdApAQCAtMTQyLDE4ICsxNDIsNiBAQAogCX0KIAlp
ZiAoKGFubm90YXRpb25UYWdCaXRzICYgVGFnQml0cy5Bbm5vdGF0aW9uUG9seW1vcnBoaWNTaWdu
YXR1cmUpICE9IDApIHsKIAkJY2hhcltdW10gY29tcG91bmROYW1lID0gVHlwZUNvbnN0YW50cy5K
QVZBX0xBTkdfSU5WT0tFX01FVEhPREhBTkRMRV8kX1BPTFlNT1JQSElDU0lHTkFUVVJFOwotCQlp
ZiAoY2hlY2tBbm5vdGF0aW9uVHlwZVJlZmVyZW5jZShDaGFyT3BlcmF0aW9uLmNvbmNhdFdpdGgo
Y29tcG91bmROYW1lLCAnLicpLCBwYXR0ZXJuKSkgewotCQkJcmV0dXJuIHRydWU7Ci0JCX0KLQl9
Ci0JaWYgKChhbm5vdGF0aW9uVGFnQml0cyAmIFRhZ0JpdHMuQW5ub3RhdGlvblBvc3RDb25zdHJ1
Y3QpICE9IDApIHsKLQkJY2hhcltdW10gY29tcG91bmROYW1lID0gVHlwZUNvbnN0YW50cy5KQVZB
WF9BTk5PVEFUSU9OX1BPU1RDT05TVFJVQ1Q7Ci0JCWlmIChjaGVja0Fubm90YXRpb25UeXBlUmVm
ZXJlbmNlKENoYXJPcGVyYXRpb24uY29uY2F0V2l0aChjb21wb3VuZE5hbWUsICcuJyksIHBhdHRl
cm4pKSB7Ci0JCQlyZXR1cm4gdHJ1ZTsKLQkJfQotCX0KLQlpZiAoKGFubm90YXRpb25UYWdCaXRz
ICYgVGFnQml0cy5Bbm5vdGF0aW9uUHJlRGVzdHJveSkgIT0gMCkgewotCQljaGFyW11bXSBjb21w
b3VuZE5hbWUgPSBUeXBlQ29uc3RhbnRzLkpBVkFYX0FOTk9UQVRJT05fUFJFREVTVFJPWTsKIAkJ
aWYgKGNoZWNrQW5ub3RhdGlvblR5cGVSZWZlcmVuY2UoQ2hhck9wZXJhdGlvbi5jb25jYXRXaXRo
KGNvbXBvdW5kTmFtZSwgJy4nKSwgcGF0dGVybikpIHsKIAkJCXJldHVybiB0cnVlOwogCQl9
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>209200</attachid>
            <date>2012-01-09 06:50:00 -0500</date>
            <delta_ts>2012-01-10 05:52:14 -0500</delta_ts>
            <desc>proposed fix v2.0 + regression tests</desc>
            <filename>master--Fixed-bug-365437-Private-methods-tagged-with.patch</filename>
            <type>text/plain</type>
            <size>27567</size>
            <attacher name="Ayushman Jain">amj87.iitr</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0Fubm90YXRpb25UZXN0
LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlw
c2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9Bbm5vdGF0aW9uVGVzdC5qYXZh
CmluZGV4IGJiZTBiYTUuLjFhMzlkZjUgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
LnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9y
ZWdyZXNzaW9uL0Fubm90YXRpb25UZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUu
dGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3Jl
Z3Jlc3Npb24vQW5ub3RhdGlvblRlc3QuamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTEgSUJNIENvcnBvcmF0aW9u
IGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTIgSUJNIENvcnBvcmF0aW9u
IGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRo
ZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhl
IHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29t
cGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC00Nyw3ICs0
Nyw3IEBACiAJLy8gU3RhdGljIGluaXRpYWxpemVyIHRvIHNwZWNpZnkgdGVzdHMgc3Vic2V0IHVz
aW5nIFRFU1RTXyogc3RhdGljIHZhcmlhYmxlcwogCS8vIEFsbCBzcGVjaWZpZWQgdGVzdHMgd2hp
Y2ggZG8gbm90IGJlbG9uZyB0byB0aGUgY2xhc3MgYXJlIHNraXBwZWQuLi4KIAlzdGF0aWMgewot
Ly8JCVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1tdIHsgInRlc3QyOTMiIH07CisvLwkJVEVTVFNf
TkFNRVMgPSBuZXcgU3RyaW5nW10geyAidGVzdEJ1ZzM2NTQzN2IiIH07CiAvLwkJVEVTVFNfTlVN
QkVSUyA9IG5ldyBpbnRbXSB7IDI5NyB9OwogLy8JCVRFU1RTX1JBTkdFID0gbmV3IGludFtdIHsg
Mjk0LCAtMSB9OwogCX0KQEAgLTEwMTQ4LDQgKzEwMTQ4LDE0OSBAQAogCQkiQmxhIGNhbm5vdCBi
ZSByZXNvbHZlZCB0byBhIHR5cGVcbiIgKwogCQkiLS0tLS0tLS0tLVxuIik7CiB9CisvLyBodHRw
czovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzY1NDM3CitwdWJsaWMg
dm9pZCB0ZXN0QnVnMzY1NDM3YSgpIHsKKwlNYXAgY3VzdG9tT3B0aW9ucyA9IGdldENvbXBpbGVy
T3B0aW9ucygpOworCWN1c3RvbU9wdGlvbnMucHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJT05fUmVw
b3J0VW51c2VkUHJpdmF0ZU1lbWJlciwgQ29tcGlsZXJPcHRpb25zLkVSUk9SKTsKKwlTdHJpbmcg
dGVzdEZpbGVzIFtdID0gbmV3IFN0cmluZ1tdIHsKKwkJCSJwL0EuamF2YSIsCisJCQkicGFja2Fn
ZSBwO1xuIiArCisJCQkiaW1wb3J0IHAxLio7XG4iICsKKwkJCSJwdWJsaWMgY2xhc3MgQSB7XG4i
ICsKKwkJCSIJQHAxLlByZURlc3Ryb3lcbiIgKworCQkJIglwcml2YXRlIHZvaWQgZm9vMSgpe31c
biIgKworCQkJIglAUHJlRGVzdHJveVxuIiArCisJCQkiCXByaXZhdGUgdm9pZCBmb28yKCl7fVxu
IiArCisJCQkiCUBTdXBwcmVzc1dhcm5pbmdzKFwibnVsbFwiKVxuIiArCisJCQkiCUBQb3N0Q29u
c3RydWN0XG4iICsKKwkJCSIJcHJpdmF0ZSB2b2lkIGZvbzFhKCl7fVxuIiArCisJCQkiCUBQb3N0
Q29uc3RydWN0XG4iICsKKwkJCSIJcHJpdmF0ZSB2b2lkIGZvbzJhKCl7fVxuIiArCisJCQkiCUBE
ZXByZWNhdGVkIiArCisJCQkiCXByaXZhdGUgdm9pZCBmb28zKCl7fSIgKworCQkJIn1cbiIsCisJ
CQkicDEvUHJlRGVzdHJveS5qYXZhIiwKKwkJCSJwYWNrYWdlIHAxO1xuIiArCisJCQkicHVibGlj
IEBpbnRlcmZhY2UgUHJlRGVzdHJveXt9IiwKKwkJCSJwMS9Qb3N0Q29uc3RydWN0LmphdmEiLAor
CQkJInBhY2thZ2UgcDE7XG4iICsKKwkJCSJwdWJsaWMgQGludGVyZmFjZSBQb3N0Q29uc3RydWN0
e30iCisJCQl9OworCVN0cmluZyBleHBlY3RlZEVycm9yU3RyaW5nID0gCisJCQkiLS0tLS0tLS0t
LVxuIiArIAorCQkJIjEuIFdBUk5JTkcgaW4gcFxcQS5qYXZhIChhdCBsaW5lIDgpXG4iICsgCisJ
CQkiCUBTdXBwcmVzc1dhcm5pbmdzKFwibnVsbFwiKVxuIiArIAorCQkJIgkgICAgICAgICAgICAg
ICAgICBeXl5eXl5cbiIgKyAKKwkJCSJVbm5lY2Vzc2FyeSBAU3VwcHJlc3NXYXJuaW5ncyhcIm51
bGxcIilcbiIgKyAKKwkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkiMi4gRVJST1IgaW4gcFxcQS5q
YXZhIChhdCBsaW5lIDEzKVxuIiArIAorCQkJIglARGVwcmVjYXRlZAlwcml2YXRlIHZvaWQgZm9v
Mygpe319XG4iICsgCisJCQkiCSAgICAgICAgICAgCSAgICAgICAgICAgICBeXl5eXl5cbiIgKyAK
KwkJCSJUaGUgbWV0aG9kIGZvbzMoKSBmcm9tIHRoZSB0eXBlIEEgaXMgbmV2ZXIgdXNlZCBsb2Nh
bGx5XG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIjsKKwlydW5OZWdhdGl2ZVRlc3QoCisJCQl0cnVl
LAorCQkJdGVzdEZpbGVzLAorCQkJbnVsbCwgCisJCQljdXN0b21PcHRpb25zLAorCQkJZXhwZWN0
ZWRFcnJvclN0cmluZywKKwkJCUphdmFjVGVzdE9wdGlvbnMuRXhjdXNlLkVjbGlwc2VXYXJuaW5n
Q29uZmlndXJlZEFzRXJyb3IpOworfQorLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mv
c2hvd19idWcuY2dpP2lkPTM2NTQzNworcHVibGljIHZvaWQgdGVzdEJ1ZzM2NTQzN2IoKSB7CisJ
TWFwIGN1c3RvbU9wdGlvbnMgPSBnZXRDb21waWxlck9wdGlvbnMoKTsKKwljdXN0b21PcHRpb25z
LnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydFVudXNlZFByaXZhdGVNZW1iZXIsIENv
bXBpbGVyT3B0aW9ucy5FUlJPUik7CisJY3VzdG9tT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25z
Lk9QVElPTl9Bbm5vdGF0aW9uQmFzZWROdWxsQW5hbHlzaXMsIENvbXBpbGVyT3B0aW9ucy5FTkFC
TEVEKTsKKwljdXN0b21PcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX05vbk51bGxB
bm5vdGF0aW9uTmFtZSwgInAuTm9uTnVsbCIpOworCVN0cmluZyB0ZXN0RmlsZXMgW10gPSBuZXcg
U3RyaW5nW10geworCQkJIkEuamF2YSIsCisJCQkiaW1wb3J0IGphdmF4LmFubm90YXRpb24uKjtc
biIgKworCQkJInB1YmxpYyBjbGFzcyBBIHtcbiIgKworCQkJIglAamF2YXguYW5ub3RhdGlvbi5Q
cmVEZXN0cm95XG4iICsKKwkJCSIJcHJpdmF0ZSB2b2lkIGZvbzEoKXt9XG4iICsKKwkJCSIJQFBy
ZURlc3Ryb3lcbiIgKworCQkJIglwcml2YXRlIHZvaWQgZm9vMigpe31cbiIgKworCQkJIglAamF2
YXguYW5ub3RhdGlvbi5SZXNvdXJjZVxuIiArCisJCQkiCXByaXZhdGUgdm9pZCBmb28xYSgpe31c
biIgKworCQkJIglAUmVzb3VyY2VcbiIgKworCQkJIglAcC5Ob25OdWxsXG4iICsKKwkJCSIJcHJp
dmF0ZSBPYmplY3QgZm9vMmEoKXsgcmV0dXJuIG5ldyBPYmplY3QoKTt9XG4iICsKKwkJCSIJQGph
dmF4LmFubm90YXRpb24uUG9zdENvbnN0cnVjdFxuIiArCisJCQkiCUBEZXByZWNhdGVkXG4iICsK
KwkJCSIJcHJpdmF0ZSB2b2lkIGZvbzMoKXt9XG4iICsKKwkJCSIJQHAuTm9uTnVsbFxuIiArCisJ
CQkiCXByaXZhdGUgT2JqZWN0IGZvbzNhKCl7IHJldHVybiBuZXcgT2JqZWN0KCk7fVxuIiArCisJ
CQkifVxuIiwKKwkJCSJwL05vbk51bGwuamF2YSIsCisJCQkicGFja2FnZSBwO1xuIiArCisJCQki
aW1wb3J0IHN0YXRpYyBqYXZhLmxhbmcuYW5ub3RhdGlvbi5FbGVtZW50VHlwZS4qO1xuIiArCisJ
CQkiaW1wb3J0IGphdmEubGFuZy5hbm5vdGF0aW9uLio7XG4iICsKKwkJCSJAVGFyZ2V0KHtUWVBF
LCBNRVRIT0QsUEFSQU1FVEVSLExPQ0FMX1ZBUklBQkxFfSlcbiIgKworCQkJInB1YmxpYyBAaW50
ZXJmYWNlIE5vbk51bGwge1xuIiArCisJCQkifSIKKwkJCX07CisJU3RyaW5nIGV4cGVjdGVkRXJy
b3JTdHJpbmcgPSAKKwkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkiMS4gRVJST1IgaW4gQS5qYXZh
IChhdCBsaW5lIDE2KVxuIiArIAorCQkJIglwcml2YXRlIE9iamVjdCBmb28zYSgpeyByZXR1cm4g
bmV3IE9iamVjdCgpO31cbiIgKyAKKwkJCSIJICAgICAgICAgICAgICAgXl5eXl5eXlxuIiArIAor
CQkJIlRoZSBtZXRob2QgZm9vM2EoKSBmcm9tIHRoZSB0eXBlIEEgaXMgbmV2ZXIgdXNlZCBsb2Nh
bGx5XG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIjsKKwlydW5OZWdhdGl2ZVRlc3QoCisJCQl0cnVl
LAorCQkJdGVzdEZpbGVzLAorCQkJbnVsbCwgCisJCQljdXN0b21PcHRpb25zLAorCQkJZXhwZWN0
ZWRFcnJvclN0cmluZywKKwkJCUphdmFjVGVzdE9wdGlvbnMuRXhjdXNlLkVjbGlwc2VXYXJuaW5n
Q29uZmlndXJlZEFzRXJyb3IpOworfQorLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mv
c2hvd19idWcuY2dpP2lkPTM2NTQzNworcHVibGljIHZvaWQgdGVzdEJ1ZzM2NTQzN2MoKSB7CisJ
aWYgKHRoaXMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNykgcmV0
dXJuOworCU1hcCBjdXN0b21PcHRpb25zID0gZ2V0Q29tcGlsZXJPcHRpb25zKCk7CisJY3VzdG9t
T3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9SZXBvcnRVbnVzZWRQcml2YXRlTWVt
YmVyLCBDb21waWxlck9wdGlvbnMuRVJST1IpOworCVN0cmluZyB0ZXN0RmlsZXMgW10gPSBuZXcg
U3RyaW5nW10geworCQkJInAvQS5qYXZhIiwKKwkJCSJwYWNrYWdlIHA7XG4iICsKKwkJCSJpbXBv
cnQgcDEuKjtcbiIgKworCQkJInB1YmxpYyBjbGFzcyBBIHtcbiIgKworCQkJIglAcDEuUHJlRGVz
dHJveVxuIiArCisJCQkiCXByaXZhdGUgdm9pZCBmb28xKCl7fVxuIiArCisJCQkiCUBQcmVEZXN0
cm95XG4iICsKKwkJCSIJcHJpdmF0ZSB2b2lkIGZvbzIoKXt9XG4iICsKKwkJCSIJQFN1cHByZXNz
V2FybmluZ3MoXCJudWxsXCIpXG4iICsKKwkJCSIJQFBvc3RDb25zdHJ1Y3RcbiIgKworCQkJIglw
cml2YXRlIHZvaWQgZm9vMWEoKXt9XG4iICsKKwkJCSIJQFBvc3RDb25zdHJ1Y3RcbiIgKworCQkJ
Iglwcml2YXRlIHZvaWQgZm9vMmEoKXt9XG4iICsKKwkJCSIJQFNhZmVWYXJhcmdzIiArCisJCQki
CXByaXZhdGUgZmluYWwgdm9pZCBmb28zKE9iamVjdC4uLiBvKXt9IiArCisJCQkifVxuIiwKKwkJ
CSJwMS9QcmVEZXN0cm95LmphdmEiLAorCQkJInBhY2thZ2UgcDE7XG4iICsKKwkJCSJwdWJsaWMg
QGludGVyZmFjZSBQcmVEZXN0cm95e30iLAorCQkJInAxL1Bvc3RDb25zdHJ1Y3QuamF2YSIsCisJ
CQkicGFja2FnZSBwMTtcbiIgKworCQkJInB1YmxpYyBAaW50ZXJmYWNlIFBvc3RDb25zdHJ1Y3R7
fSIKKwkJCX07CisJU3RyaW5nIGV4cGVjdGVkRXJyb3JTdHJpbmcgPSAKKwkJCSItLS0tLS0tLS0t
XG4iICsgCisJCQkiMS4gV0FSTklORyBpbiBwXFxBLmphdmEgKGF0IGxpbmUgOClcbiIgKyAKKwkJ
CSIJQFN1cHByZXNzV2FybmluZ3MoXCJudWxsXCIpXG4iICsgCisJCQkiCSAgICAgICAgICAgICAg
ICAgIF5eXl5eXlxuIiArIAorCQkJIlVubmVjZXNzYXJ5IEBTdXBwcmVzc1dhcm5pbmdzKFwibnVs
bFwiKVxuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCSIyLiBFUlJPUiBpbiBwXFxBLmph
dmEgKGF0IGxpbmUgMTMpXG4iICsgCisJCQkiCUBTYWZlVmFyYXJncwlwcml2YXRlIGZpbmFsIHZv
aWQgZm9vMyhPYmplY3QuLi4gbyl7fX1cbiIgKyAKKwkJCSIJICAgICAgICAgICAgCSAgICAgICAg
ICAgICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkJIlRoZSBtZXRob2QgZm9vMyhP
YmplY3QuLi4pIGZyb20gdGhlIHR5cGUgQSBpcyBuZXZlciB1c2VkIGxvY2FsbHlcbiIgKyAKKwkJ
CSItLS0tLS0tLS0tXG4iOworCXJ1bk5lZ2F0aXZlVGVzdCgKKwkJCXRydWUsCisJCQl0ZXN0Rmls
ZXMsCisJCQludWxsLCAKKwkJCWN1c3RvbU9wdGlvbnMsCisJCQlleHBlY3RlZEVycm9yU3RyaW5n
LAorCQkJSmF2YWNUZXN0T3B0aW9ucy5FeGN1c2UuRWNsaXBzZVdhcm5pbmdDb25maWd1cmVkQXNF
cnJvcik7Cit9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Fubm90YXRpb24uamF2YSBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9hc3QvQW5ub3RhdGlvbi5qYXZhCmluZGV4IGJjNzZhZDcuLjY4ZWQ5ZWIgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hc3QvQW5ub3RhdGlvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQW5ub3RhdGlv
bi5qYXZhCkBAIC0xLDUgKzEsNSBAQAogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHly
aWdodCAoYykgMjAwMCwgMjAxMSBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIENvcHly
aWdodCAoYykgMjAwMCwgMjAxMiBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAqIEFsbCBy
aWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlh
bHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2Ug
UHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRp
b24sIGFuZCBpcyBhdmFpbGFibGUgYXQKQEAgLTE2NywxMiArMTY3LDYgQEAKIAkJCQlicmVhazsK
IAkJCWNhc2UgVHlwZUlkcy5UX0phdmFMYW5nSW52b2tlTWV0aG9kSGFuZGxlUG9seW1vcnBoaWNT
aWduYXR1cmUgOgogCQkJCXRhZ0JpdHMgfD0gVGFnQml0cy5Bbm5vdGF0aW9uUG9seW1vcnBoaWNT
aWduYXR1cmU7Ci0JCQkJYnJlYWs7Ci0JCQljYXNlIFR5cGVJZHMuVF9KYXZheEFubm90YXRpb25Q
b3N0Q29uc3RydWN0IDoKLQkJCQl0YWdCaXRzIHw9IFRhZ0JpdHMuQW5ub3RhdGlvblBvc3RDb25z
dHJ1Y3Q7Ci0JCQkJYnJlYWs7Ci0JCQljYXNlIFR5cGVJZHMuVF9KYXZheEFubm90YXRpb25QcmVE
ZXN0cm95IDoKLQkJCQl0YWdCaXRzIHw9IFRhZ0JpdHMuQW5ub3RhdGlvblByZURlc3Ryb3k7CiAJ
CQkJYnJlYWs7CiAJCQljYXNlIFR5cGVJZHMuVF9Db25maWd1cmVkQW5ub3RhdGlvbk51bGxhYmxl
IDoKIAkJCQl0YWdCaXRzIHw9IFRhZ0JpdHMuQW5ub3RhdGlvbk51bGxhYmxlOwpkaWZmIC0tZ2l0
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2NsYXNzZm10L0Fubm90YXRpb25JbmZvLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvY2xhc3NmbXQv
QW5ub3RhdGlvbkluZm8uamF2YQppbmRleCAzMzU3ZDdkLi5kODFlYzFjIDEwMDY0NAotLS0gYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvY2xhc3NmbXQvQW5ub3RhdGlvbkluZm8uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvY2xhc3NmbXQv
QW5ub3RhdGlvbkluZm8uamF2YQpAQCAtMzAzLDEwICszMDMsNiBAQAogCQkJCQljdXJyZW50T2Zm
c2V0ICs9IDI7CiAJCQkJCXJldHVybiByZWFkVGFyZ2V0VmFsdWUoY3VycmVudE9mZnNldCk7CiAJ
CQkJfQotCQkJCWlmIChDaGFyT3BlcmF0aW9uLmVxdWFscyh0eXBlTmFtZSwgQ29uc3RhbnRQb29s
LkpBVkFYX0FOTk9UQVRJT05fUFJFREVTVFJPWSkpIHsKLQkJCQkJdGhpcy5zdGFuZGFyZEFubm90
YXRpb25UYWdCaXRzIHw9IFRhZ0JpdHMuQW5ub3RhdGlvblByZURlc3Ryb3k7Ci0JCQkJCXJldHVy
biBjdXJyZW50T2Zmc2V0OwotCQkJCX0KIAkJCQlicmVhazsKIAkJCWNhc2UgMzI6CiAJCQkJaWYg
KENoYXJPcGVyYXRpb24uZXF1YWxzKHR5cGVOYW1lLCBDb25zdGFudFBvb2wuSkFWQV9MQU5HX0FO
Tk9UQVRJT05fUkVURU5USU9OKSkgewpAQCAtMzE1LDEwICszMTEsNiBAQAogCQkJCX0KIAkJCQlp
ZiAoQ2hhck9wZXJhdGlvbi5lcXVhbHModHlwZU5hbWUsIENvbnN0YW50UG9vbC5KQVZBX0xBTkdf
QU5OT1RBVElPTl9JTkhFUklURUQpKSB7CiAJCQkJCXRoaXMuc3RhbmRhcmRBbm5vdGF0aW9uVGFn
Qml0cyB8PSBUYWdCaXRzLkFubm90YXRpb25Jbmhlcml0ZWQ7Ci0JCQkJCXJldHVybiBjdXJyZW50
T2Zmc2V0OwotCQkJCX0KLQkJCQlpZiAoQ2hhck9wZXJhdGlvbi5lcXVhbHModHlwZU5hbWUsIENv
bnN0YW50UG9vbC5KQVZBWF9BTk5PVEFUSU9OX1BPU1RDT05TVFJVQ1QpKSB7Ci0JCQkJCXRoaXMu
c3RhbmRhcmRBbm5vdGF0aW9uVGFnQml0cyB8PSBUYWdCaXRzLkFubm90YXRpb25Qb3N0Q29uc3Ry
dWN0OwogCQkJCQlyZXR1cm4gY3VycmVudE9mZnNldDsKIAkJCQl9CiAJCQkJYnJlYWs7CmRpZmYg
LS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvY29kZWdlbi9Db25zdGFudFBvb2wuamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9jb2RlZ2Vu
L0NvbnN0YW50UG9vbC5qYXZhCmluZGV4IGM4NzVjOWIuLmM0NDkzODUgMTAwNjQ0Ci0tLSBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9jb2RlZ2VuL0NvbnN0YW50UG9vbC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9jb2RlZ2VuL0NvbnN0
YW50UG9vbC5qYXZhCkBAIC0xLDUgKzEsNSBAQAogLyoqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAq
IENvcHlyaWdodCAoYykgMjAwMCwgMjAxMSBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAq
IENvcHlyaWdodCAoYykgMjAwMCwgMjAxMiBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAq
IEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBt
YXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVj
bGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0
cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKQEAgLTI0OCw4ICsyNDgsNiBAQAogCXB1Ymxp
YyBzdGF0aWMgZmluYWwgY2hhcltdIEpBVkFfTEFOR19TQUZFVkFSQVJHUyA9ICJMamF2YS9sYW5n
L1NhZmVWYXJhcmdzOyIudG9DaGFyQXJyYXkoKTsgLy8kTk9OLU5MUy0xJAogCS8vIGphdmEgNyBq
YXZhLmxhbmcuaW52b2tlLk1ldGhvZEhhbmRsZS5pbnZva2VFeGFjdCguLikvaW52b2tlR2VuZXJp
YyguLikKIAlwdWJsaWMgc3RhdGljIGZpbmFsIGNoYXJbXSBKQVZBX0xBTkdfSU5WT0tFX01FVEhP
REhBTkRMRV9QT0xZTU9SUEhJQ1NJR05BVFVSRSA9ICJMamF2YS9sYW5nL2ludm9rZS9NZXRob2RI
YW5kbGUkUG9seW1vcnBoaWNTaWduYXR1cmU7Ii50b0NoYXJBcnJheSgpOyAvLyROT04tTkxTLTEk
Ci0JcHVibGljIHN0YXRpYyBmaW5hbCBjaGFyW10gSkFWQVhfQU5OT1RBVElPTl9QT1NUQ09OU1RS
VUNUID0gIkxqYXZheC9hbm5vdGF0aW9uL1Bvc3RDb25zdHJ1Y3Q7Ii50b0NoYXJBcnJheSgpOyAv
LyROT04tTkxTLTEkCi0JcHVibGljIHN0YXRpYyBmaW5hbCBjaGFyW10gSkFWQVhfQU5OT1RBVElP
Tl9QUkVERVNUUk9ZID0gIkxqYXZheC9hbm5vdGF0aW9uL1ByZURlc3Ryb3k7Ii50b0NoYXJBcnJh
eSgpOyAvLyROT04tTkxTLTEkCiAKIAlwdWJsaWMgc3RhdGljIGZpbmFsIGNoYXJbXSBIYXNoQ29k
ZSA9ICJoYXNoQ29kZSIudG9DaGFyQXJyYXkoKTsgLy8kTk9OLU5MUy0xJAogCXB1YmxpYyBzdGF0
aWMgZmluYWwgY2hhcltdIEhhc2hDb2RlU2lnbmF0dXJlID0gIigpSSIudG9DaGFyQXJyYXkoKTsg
Ly8kTk9OLU5MUy0xJDsgCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0Fubm90YXRpb25CaW5k
aW5nLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0Fubm90YXRpb25CaW5kaW5nLmphdmEKaW5kZXggYzg4
YzRhMS4uMDM4YzVhZCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Bbm5vdGF0aW9uQmluZGlu
Zy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQW5ub3RhdGlvbkJpbmRpbmcuamF2YQpAQCAtMSw1
ICsxLDUgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAs
IDIwMTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAs
IDIwMTIgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVk
LiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFk
ZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNl
IHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZh
aWxhYmxlIGF0CkBAIC01NCwxMSArNTQsMTAgQEAKIAkJY291bnQrKzsKIAlpZiAoKGFubm90YXRp
b25UYWdCaXRzICYgVGFnQml0cy5Bbm5vdGF0aW9uU2FmZVZhcmFyZ3MpICE9IDApCiAJCWNvdW50
Kys7Ci0JaWYgKChhbm5vdGF0aW9uVGFnQml0cyAmIFRhZ0JpdHMuQW5ub3RhdGlvblBvc3RDb25z
dHJ1Y3QpICE9IDApCi0JCWNvdW50Kys7Ci0JaWYgKChhbm5vdGF0aW9uVGFnQml0cyAmIFRhZ0Jp
dHMuQW5ub3RhdGlvblByZURlc3Ryb3kpICE9IDApCi0JCWNvdW50Kys7Ci0JLy8gY291bnQgbXVz
dCBiZSBkaWZmZXJlbnQgZnJvbSAwCisJaWYgKGNvdW50ID09IDApIHsKKwkJLy8gdGhpcyBpcyBw
b3NzaWJsZSBpZiBiaXRzIHdlcmUgc2V0IGZvciBudWxsIGFubm90YXRpb25zCisJCXJldHVybiBy
ZWNvcmRlZEFubm90YXRpb25zOworCX0KIAogCWludCBpbmRleCA9IHJlY29yZGVkQW5ub3RhdGlv
bnMubGVuZ3RoOwogCUFubm90YXRpb25CaW5kaW5nW10gcmVzdWx0ID0gbmV3IEFubm90YXRpb25C
aW5kaW5nW2luZGV4ICsgY291bnRdOwpAQCAtODEsMTAgKzgwLDYgQEAKIAkJcmVzdWx0W2luZGV4
KytdID0gYnVpbGRNYXJrZXJBbm5vdGF0aW9uRm9yTWVtYmVyVHlwZShUeXBlQ29uc3RhbnRzLkpB
VkFfTEFOR19JTlZPS0VfTUVUSE9ESEFORExFXyRfUE9MWU1PUlBISUNTSUdOQVRVUkUsIGVudik7
CiAJaWYgKChhbm5vdGF0aW9uVGFnQml0cyAmIFRhZ0JpdHMuQW5ub3RhdGlvblNhZmVWYXJhcmdz
KSAhPSAwKQogCQlyZXN1bHRbaW5kZXgrK10gPSBidWlsZE1hcmtlckFubm90YXRpb24oVHlwZUNv
bnN0YW50cy5KQVZBX0xBTkdfU0FGRVZBUkFSR1MsIGVudik7Ci0JaWYgKChhbm5vdGF0aW9uVGFn
Qml0cyAmIFRhZ0JpdHMuQW5ub3RhdGlvblBvc3RDb25zdHJ1Y3QpICE9IDApCi0JCXJlc3VsdFtp
bmRleCsrXSA9IGJ1aWxkTWFya2VyQW5ub3RhdGlvbihUeXBlQ29uc3RhbnRzLkpBVkFYX0FOTk9U
QVRJT05fUE9TVENPTlNUUlVDVCwgZW52KTsKLQlpZiAoKGFubm90YXRpb25UYWdCaXRzICYgVGFn
Qml0cy5Bbm5vdGF0aW9uUHJlRGVzdHJveSkgIT0gMCkKLQkJcmVzdWx0W2luZGV4KytdID0gYnVp
bGRNYXJrZXJBbm5vdGF0aW9uKFR5cGVDb25zdGFudHMuSkFWQVhfQU5OT1RBVElPTl9QUkVERVNU
Uk9ZLCBlbnYpOwogCXJldHVybiByZXN1bHQ7CiB9CiAKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29r
dXAvUmVmZXJlbmNlQmluZGluZy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9SZWZlcmVuY2VCaW5kaW5n
LmphdmEKaW5kZXggNzVkZTg1NC4uOGU1N2FmYiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9S
ZWZlcmVuY2VCaW5kaW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9SZWZlcmVuY2VCaW5kaW5n
LmphdmEKQEAgLTEsNSArMSw1IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJp
Z2h0IChjKSAyMDAwLCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJp
Z2h0IChjKSAyMDAwLCAyMDEyIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJp
Z2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFs
cwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQ
dWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlv
biwgYW5kIGlzIGF2YWlsYWJsZSBhdApAQCAtMzgwLDggKzM4MCw3IEBACiAJc3dpdGNoICh0aGlz
LmNvbXBvdW5kTmFtZS5sZW5ndGgpIHsKIAogCQljYXNlIDMgOgotCQkJaWYgKCFDaGFyT3BlcmF0
aW9uLmVxdWFscyhUeXBlQ29uc3RhbnRzLkpBVkEsIHRoaXMuY29tcG91bmROYW1lWzBdKQotCQkJ
CQkmJiAhQ2hhck9wZXJhdGlvbi5lcXVhbHMoVHlwZUNvbnN0YW50cy5KQVZBWCwgdGhpcy5jb21w
b3VuZE5hbWVbMF0pKQorCQkJaWYgKCFDaGFyT3BlcmF0aW9uLmVxdWFscyhUeXBlQ29uc3RhbnRz
LkpBVkEsIHRoaXMuY29tcG91bmROYW1lWzBdKSkKIAkJCQlyZXR1cm47CiAJCQkKIAkJCWNoYXJb
XSBwYWNrYWdlTmFtZSA9IHRoaXMuY29tcG91bmROYW1lWzFdOwpAQCAtMzg5LDE5ICszODgsNiBA
QAogCQkJY2hhcltdIHR5cGVOYW1lID0gdGhpcy5jb21wb3VuZE5hbWVbMl07CiAJCQlpZiAodHlw
ZU5hbWUubGVuZ3RoID09IDApIHJldHVybjsgLy8ganVzdCB0byBiZSBzYWZlCiAJCQkvLyByZW1h
aW5pbmcgdHlwZXMgTVVTVCBiZSBpbiBqYXZhLiouKgotCQkJaWYgKENoYXJPcGVyYXRpb24uZXF1
YWxzKFR5cGVDb25zdGFudHMuSkFWQVgsIHRoaXMuY29tcG91bmROYW1lWzBdKSkgewotCQkJCWlm
IChDaGFyT3BlcmF0aW9uLmVxdWFscyhUeXBlQ29uc3RhbnRzLkFOTk9UQVRJT04sIHRoaXMuY29t
cG91bmROYW1lWzFdKSkgewotCQkJCQlzd2l0Y2ggKHR5cGVOYW1lWzBdKSB7Ci0JCQkJCQljYXNl
ICdQJyA6Ci0JCQkJCQkJaWYgKENoYXJPcGVyYXRpb24uZXF1YWxzKHR5cGVOYW1lLCBUeXBlQ29u
c3RhbnRzLkpBVkFYX0FOTk9UQVRJT05fUE9TVENPTlNUUlVDVFsyXSkpCi0JCQkJCQkJCXRoaXMu
aWQgPSBUeXBlSWRzLlRfSmF2YXhBbm5vdGF0aW9uUG9zdENvbnN0cnVjdDsKLQkJCQkJCQlpZiAo
Q2hhck9wZXJhdGlvbi5lcXVhbHModHlwZU5hbWUsIFR5cGVDb25zdGFudHMuSkFWQVhfQU5OT1RB
VElPTl9QUkVERVNUUk9ZWzJdKSkKLQkJCQkJCQkJdGhpcy5pZCA9IFR5cGVJZHMuVF9KYXZheEFu
bm90YXRpb25QcmVEZXN0cm95OwotCQkJCQkJCXJldHVybjsKLQkJCQkJfQotCQkJCX0KLQkJCQly
ZXR1cm47Ci0JCQl9CiAJCQlpZiAoIUNoYXJPcGVyYXRpb24uZXF1YWxzKFR5cGVDb25zdGFudHMu
TEFORywgdGhpcy5jb21wb3VuZE5hbWVbMV0pKSB7CiAJCQkJc3dpdGNoIChwYWNrYWdlTmFtZVsw
XSkgewogCQkJCQljYXNlICdpJyA6CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1RhZ0JpdHMu
amF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9sb29rdXAvVGFnQml0cy5qYXZhCmluZGV4IDliYTZkYTAuLjIxYjFjMTEg
MTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvVGFnQml0cy5qYXZhCisrKyBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29r
dXAvVGFnQml0cy5qYXZhCkBAIC0xLDUgKzEsNSBAQAogLyoqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioK
LSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMSBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4K
KyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMiBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4K
ICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWlu
ZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhl
IEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBk
aXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKQEAgLTEyOSwxMCArMTI5LDYgQEAKIAls
b25nIEFubm90YXRpb25TYWZlVmFyYXJncyA9IEFTVE5vZGUuQml0NTJMOwogCS8qKiBAc2luY2Ug
My43IC0gamF2YSA3IE1ldGhvZEhhbmRsZS5pbnZva2VFeGFjdCguLikvaW52b2tlR2VuZXJpYygu
LikqLwogCWxvbmcgQW5ub3RhdGlvblBvbHltb3JwaGljU2lnbmF0dXJlID0gQVNUTm9kZS5CaXQ1
M0w7Ci0JLyoqIEBzaW5jZSAzLjggKi8KLQlsb25nIEFubm90YXRpb25QcmVEZXN0cm95ID0gQVNU
Tm9kZS5CaXQ1NEw7Ci0JLyoqIEBzaW5jZSAzLjggKi8KLQlsb25nIEFubm90YXRpb25Qb3N0Q29u
c3RydWN0ID0gQVNUTm9kZS5CaXQ1NUw7CiAJLyoqIEBzaW5jZSAzLjggbnVsbCBhbm5vdGF0aW9u
IGZvciBNZXRob2RCaW5kaW5nIG9yIExvY2FsVmFyaWFibGVCaW5kaW5nIChhcmd1bWVudCk6ICov
CiAJbG9uZyBBbm5vdGF0aW9uTnVsbGFibGUgPSBBU1ROb2RlLkJpdDU2TDsKIAkvKiogQHNpbmNl
IDMuOCBudWxsIGFubm90YXRpb24gZm9yIE1ldGhvZEJpbmRpbmcgb3IgTG9jYWxWYXJpYWJsZUJp
bmRpbmcgKGFyZ3VtZW50KTogKi8KQEAgLTE1Miw4ICsxNDgsNiBAQAogCQkJCXwgQW5ub3RhdGlv
blN1cHByZXNzV2FybmluZ3MKIAkJCQl8IEFubm90YXRpb25TYWZlVmFyYXJncwogCQkJCXwgQW5u
b3RhdGlvblBvbHltb3JwaGljU2lnbmF0dXJlCi0JCQkJfCBBbm5vdGF0aW9uUG9zdENvbnN0cnVj
dAotCQkJCXwgQW5ub3RhdGlvblByZURlc3Ryb3kKIAkJCQl8IEFubm90YXRpb25OdWxsYWJsZQog
CQkJCXwgQW5ub3RhdGlvbk5vbk51bGwKIAkJCQl8IEFubm90YXRpb25Ob25OdWxsQnlEZWZhdWx0
CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1R5cGVDb25zdGFudHMuamF2YSBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9s
b29rdXAvVHlwZUNvbnN0YW50cy5qYXZhCmluZGV4IDBiYmVmNDcuLjcwOThkMzcgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9sb29rdXAvVHlwZUNvbnN0YW50cy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAv
VHlwZUNvbnN0YW50cy5qYXZhCkBAIC0xLDUgKzEsNSBAQAogLyoqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMSBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVy
cy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMiBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVy
cy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFu
eWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2Yg
dGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhp
cyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKQEAgLTE3NywxOCArMTc3LDYgQEAK
IAljaGFyW10gU1lOVEhFVElDX0FDQ0VTU19NRVRIT0RfUFJFRklYID0gICJhY2Nlc3MkIi50b0No
YXJBcnJheSgpOyAvLyROT04tTkxTLTEkCiAJY2hhcltdIFNZTlRIRVRJQ19FTlVNX0NPTlNUQU5U
X0lOSVRJQUxJWkFUSU9OX01FVEhPRF9QUkVGSVggPSAgIiBlbnVtIGNvbnN0YW50IGluaXRpYWxp
emF0aW9uJCIudG9DaGFyQXJyYXkoKTsgLy8kTk9OLU5MUy0xJAogCWNoYXJbXSBTWU5USEVUSUNf
U1RBVElDX0ZBQ1RPUlkgPSAgIjxmYWN0b3J5PiIudG9DaGFyQXJyYXkoKTsgLy8kTk9OLU5MUy0x
JAotCWNoYXJbXVtdIEpBVkFYX0FOTk9UQVRJT05fUE9TVENPTlNUUlVDVCA9Ci0JCQluZXcgY2hh
cltdW10gewotCQkJCUpBVkFYLAotCQkJCUFOTk9UQVRJT04sCi0JCQkJIlBvc3RDb25zdHJ1Y3Qi
LnRvQ2hhckFycmF5KCkgLy8kTk9OLU5MUy0xJAotCQkJfTsKLQljaGFyW11bXSBKQVZBWF9BTk5P
VEFUSU9OX1BSRURFU1RST1kgPQotCQkJbmV3IGNoYXJbXVtdIHsKLQkJCQlKQVZBWCwKLQkJCQlB
Tk5PVEFUSU9OLAotCQkJCSJQcmVEZXN0cm95Ii50b0NoYXJBcnJheSgpIC8vJE5PTi1OTFMtMSQK
LQkJCX07CiAKIAkvLyBzeW50aGV0aWMgcGFja2FnZS1pbmZvIG5hbWUKIAlwdWJsaWMgc3RhdGlj
IGZpbmFsIGNoYXJbXSBQQUNLQUdFX0lORk9fTkFNRSA9ICJwYWNrYWdlLWluZm8iLnRvQ2hhckFy
cmF5KCk7IC8vJE5PTi1OTFMtMSQKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvVHlwZUlkcy5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9UeXBlSWRzLmphdmEKaW5kZXggN2ZmZjQzNC4uNTE1NmE0NCAx
MDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9UeXBlSWRzLmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1
cC9UeXBlSWRzLmphdmEKQEAgLTEsNSArMSw1IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgot
ICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgor
ICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEyIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgog
ICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5n
IG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUg
RWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRp
c3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdApAQCAtMTAwLDExICsxMDAsNiBAQAogCiAJ
Ly8gamF2YSA3IGphdmEubGFuZy5BdXRvQ2xvc2VhYmxlCiAJZmluYWwgaW50IFRfSmF2YUxhbmdB
dXRvQ2xvc2VhYmxlID0gNjI7Ci0KLQkvLyBuZXcgaW4gMy44Ci0JZmluYWwgaW50IFRfSmF2YXhB
bm5vdGF0aW9uUG9zdENvbnN0cnVjdCA9IDYzOwotCi0JZmluYWwgaW50IFRfSmF2YXhBbm5vdGF0
aW9uUHJlRGVzdHJveSA9IDY0OwogCQogCS8vIG5ldyBpbiAzLjggZm9yIG51bGwgYW5ub3RhdGlv
bnM6CiAJZmluYWwgaW50IFRfQ29uZmlndXJlZEFubm90YXRpb25OdWxsYWJsZSA9IDY1OwpkaWZm
IC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxlbVJlcG9ydGVyLmphdmEgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJv
YmxlbS9Qcm9ibGVtUmVwb3J0ZXIuamF2YQppbmRleCA5YjgzOTMzLi4zZjM2NWQ0IDEwMDY0NAot
LS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvcHJvYmxlbS9Qcm9ibGVtUmVwb3J0ZXIuamF2YQorKysgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJv
YmxlbS9Qcm9ibGVtUmVwb3J0ZXIuamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTEgSUJNIENvcnBvcmF0aW9uIGFu
ZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTIgSUJNIENvcnBvcmF0aW9uIGFu
ZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBh
Y2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRl
cm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFu
aWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC03NjkxLDkgKzc2
OTEsMjYgQEAKIAkJCSYmIENoYXJPcGVyYXRpb24uZXF1YWxzKG1ldGhvZC5zZWxlY3RvciwgVHlw
ZUNvbnN0YW50cy5XUklURVJFUExBQ0UpKSB7CiAJCXJldHVybjsKIAl9Ci0JaWYgKChtZXRob2Qu
dGFnQml0cyAmIChUYWdCaXRzLkFubm90YXRpb25Qb3N0Q29uc3RydWN0IHwgVGFnQml0cy5Bbm5v
dGF0aW9uUHJlRGVzdHJveSkpICE9IDApIHsKLQkJLy8gUG9zdENvbnN0cnVjdCBhbmQgUHJlRGVz
dHJveSBtZXRob2QgYXJlIGlnbm9yZWQKLQkJcmV0dXJuOworCUFubm90YXRpb25bXSBhbm5vdGF0
aW9ucyA9IG1ldGhvZERlY2wuYW5ub3RhdGlvbnM7CisJaW50IGFubm90YXRpb25zTGVuID0gMDsK
KwlpZiAoYW5ub3RhdGlvbnMgIT0gbnVsbCkgeworCQlhbm5vdGF0aW9uc0xlbiA9IGFubm90YXRp
b25zLmxlbmd0aDsKKwl9CisJZm9yIChpbnQgaSA9IDA7IGkgPCBhbm5vdGF0aW9uc0xlbjsgaSsr
KSB7CisJCWlmIChhbm5vdGF0aW9uc1tpXS5yZXNvbHZlZFR5cGUgIT0gbnVsbCkgeworCQkJc3dp
dGNoIChhbm5vdGF0aW9uc1tpXS5yZXNvbHZlZFR5cGUuaWQpIHsKKwkJCQljYXNlIFR5cGVJZHMu
VF9KYXZhTGFuZ1N1cHByZXNzV2FybmluZ3M6CisJCQkJY2FzZSBUeXBlSWRzLlRfSmF2YUxhbmdE
ZXByZWNhdGVkOgorCQkJCWNhc2UgVHlwZUlkcy5UX0phdmFMYW5nU2FmZVZhcmFyZ3M6CisJCQkJ
Y2FzZSBUeXBlSWRzLlRfQ29uZmlndXJlZEFubm90YXRpb25Ob25OdWxsOgorCQkJCWNhc2UgVHlw
ZUlkcy5UX0NvbmZpZ3VyZWRBbm5vdGF0aW9uTnVsbGFibGU6CisJCQkJY2FzZSBUeXBlSWRzLlRf
Q29uZmlndXJlZEFubm90YXRpb25Ob25OdWxsQnlEZWZhdWx0OgorCQkJCQlicmVhazsKKwkJCQlk
ZWZhdWx0OgorCQkJCQkvLyBub24tc3RhbmRhcmQgYW5ub3RhdGlvbiBmb3VuZCwgZG9uJ3Qgd2Fy
bgorCQkJCQlyZXR1cm47CisJCQl9CisJCX0KIAl9CiAJdGhpcy5oYW5kbGUoCiAJCQlJUHJvYmxl
bS5VbnVzZWRQcml2YXRlTWV0aG9kLApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
bW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvQmluYXJ5TWVtYmVyLmphdmEgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9C
aW5hcnlNZW1iZXIuamF2YQppbmRleCA5NGU2ZGIxLi4zZjZkNzQyIDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9CaW5h
cnlNZW1iZXIuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29yZS9CaW5hcnlNZW1iZXIuamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8q
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTEgSUJNIENv
cnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTIgSUJNIENv
cnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dy
YW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUg
dW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdo
aWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBA
IC04NiwxMiArODYsNiBAQAogCX0KIAlpZiAoKHRhZ0JpdHMgJiBUYWdCaXRzLkFubm90YXRpb25T
YWZlVmFyYXJncykgIT0gMCkgewogCQlhbm5vdGF0aW9ucy5hZGQoZ2V0QW5ub3RhdGlvbihUeXBl
Q29uc3RhbnRzLkpBVkFfTEFOR19TQUZFVkFSQVJHUykpOwotCX0KLQlpZiAoKHRhZ0JpdHMgJiBU
YWdCaXRzLkFubm90YXRpb25Qb3N0Q29uc3RydWN0KSAhPSAwKSB7Ci0JCWFubm90YXRpb25zLmFk
ZChnZXRBbm5vdGF0aW9uKFR5cGVDb25zdGFudHMuSkFWQVhfQU5OT1RBVElPTl9QT1NUQ09OU1RS
VUNUKSk7Ci0JfQotCWlmICgodGFnQml0cyAmIFRhZ0JpdHMuQW5ub3RhdGlvblByZURlc3Ryb3kp
ICE9IDApIHsKLQkJYW5ub3RhdGlvbnMuYWRkKGdldEFubm90YXRpb24oVHlwZUNvbnN0YW50cy5K
QVZBWF9BTk5PVEFUSU9OX1BSRURFU1RST1kpKTsKIAl9CiAJLy8gbm90ZSB0aGF0IEpBVkFfTEFO
R19TVVBQUkVTU1dBUk5JTkdTIGFuZCBKQVZBX0xBTkdfT1ZFUlJJREUgY2Fubm90IGFwcGVhciBp
biBiaW5hcmllcwogCXJldHVybiAoSUFubm90YXRpb25bXSkgYW5ub3RhdGlvbnMudG9BcnJheShu
ZXcgSUFubm90YXRpb25bYW5ub3RhdGlvbnMuc2l6ZSgpXSk7CmRpZmYgLS1naXQgYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9DbGFzc0Zp
bGVJbmZvLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29yZS9DbGFzc0ZpbGVJbmZvLmphdmEKaW5kZXggYmNmN2NlYi4uZTE3MTRhMCAx
MDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvcmUvQ2xhc3NGaWxlSW5mby5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0NsYXNzRmlsZUluZm8uamF2YQpA
QCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMp
IDIwMDAsIDIwMTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMp
IDIwMDAsIDIwMTIgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJl
c2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBh
cmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBM
aWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQg
aXMgYXZhaWxhYmxlIGF0CkBAIC0xMDcsMTIgKzEwNyw2IEBACiAJfQogCWlmICgodGFnQml0cyAm
IFRhZ0JpdHMuQW5ub3RhdGlvblNhZmVWYXJhcmdzKSAhPSAwKSB7CiAJCWdlbmVyYXRlU3RhbmRh
cmRBbm5vdGF0aW9uKGphdmFFbGVtZW50LCBUeXBlQ29uc3RhbnRzLkpBVkFfTEFOR19TQUZFVkFS
QVJHUywgQW5ub3RhdGlvbi5OT19NRU1CRVJfVkFMVUVfUEFJUlMsIG5ld0VsZW1lbnRzKTsKLQl9
Ci0JaWYgKCh0YWdCaXRzICYgVGFnQml0cy5Bbm5vdGF0aW9uUG9zdENvbnN0cnVjdCkgIT0gMCkg
ewotCQlnZW5lcmF0ZVN0YW5kYXJkQW5ub3RhdGlvbihqYXZhRWxlbWVudCwgVHlwZUNvbnN0YW50
cy5KQVZBWF9BTk5PVEFUSU9OX1BPU1RDT05TVFJVQ1QsIEFubm90YXRpb24uTk9fTUVNQkVSX1ZB
TFVFX1BBSVJTLCBuZXdFbGVtZW50cyk7Ci0JfQotCWlmICgodGFnQml0cyAmIFRhZ0JpdHMuQW5u
b3RhdGlvblByZURlc3Ryb3kpICE9IDApIHsKLQkJZ2VuZXJhdGVTdGFuZGFyZEFubm90YXRpb24o
amF2YUVsZW1lbnQsIFR5cGVDb25zdGFudHMuSkFWQVhfQU5OT1RBVElPTl9QUkVERVNUUk9ZLCBB
bm5vdGF0aW9uLk5PX01FTUJFUl9WQUxVRV9QQUlSUywgbmV3RWxlbWVudHMpOwogCX0KIAkvLyBu
b3RlIHRoYXQgSkFWQV9MQU5HX1NVUFBSRVNTV0FSTklOR1MgYW5kIEpBVkFfTEFOR19PVkVSUklE
RSBjYW5ub3QgYXBwZWFyIGluIGJpbmFyaWVzCiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNoL2luZGV4
aW5nL0JpbmFyeUluZGV4ZXIuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gvaW5kZXhpbmcvQmluYXJ5SW5kZXhlci5q
YXZhCmluZGV4IGMyNDJmYjUuLmY3NTJjMzQgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gvaW5kZXhpbmcv
QmluYXJ5SW5kZXhlci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gvaW5kZXhpbmcvQmluYXJ5SW5kZXhlci5q
YXZhCkBAIC0xLDUgKzEsNSBAQAogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdo
dCAoYykgMjAwMCwgMjAxMSBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdo
dCAoYykgMjAwMCwgMjAxMiBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAqIEFsbCByaWdo
dHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMK
ICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVi
bGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24s
IGFuZCBpcyBhdmFpbGFibGUgYXQKQEAgLTQ2LDYgKzQ2LDkgQEAKIAkJc3VwZXIoZG9jdW1lbnQp
OwogCX0KIAlwcml2YXRlIHZvaWQgYWRkQmluYXJ5U3RhbmRhcmRBbm5vdGF0aW9ucyhsb25nIGFu
bm90YXRpb25UYWdCaXRzKSB7CisJCWlmICgoYW5ub3RhdGlvblRhZ0JpdHMgJiBUYWdCaXRzLkFs
bFN0YW5kYXJkQW5ub3RhdGlvbnNNYXNrKSA9PSAwKSB7CisJCQlyZXR1cm47CisJCX0KIAkJaWYg
KChhbm5vdGF0aW9uVGFnQml0cyAmIFRhZ0JpdHMuQW5ub3RhdGlvblRhcmdldE1BU0spICE9IDAp
IHsKIAkJCWNoYXJbXVtdIGNvbXBvdW5kTmFtZSA9IFR5cGVDb25zdGFudHMuSkFWQV9MQU5HX0FO
Tk9UQVRJT05fVEFSR0VUOwogCQkJYWRkQW5ub3RhdGlvblR5cGVSZWZlcmVuY2UoY29tcG91bmRO
YW1lW2NvbXBvdW5kTmFtZS5sZW5ndGgtMV0pOwpAQCAtODMsMTQgKzg2LDYgQEAKIAkJaWYgKChh
bm5vdGF0aW9uVGFnQml0cyAmIFRhZ0JpdHMuQW5ub3RhdGlvblBvbHltb3JwaGljU2lnbmF0dXJl
KSAhPSAwKSB7CiAJCQljaGFyW11bXSBjb21wb3VuZE5hbWUgPQogCQkJCQlUeXBlQ29uc3RhbnRz
LkpBVkFfTEFOR19JTlZPS0VfTUVUSE9ESEFORExFXyRfUE9MWU1PUlBISUNTSUdOQVRVUkU7Ci0J
CQlhZGRBbm5vdGF0aW9uVHlwZVJlZmVyZW5jZShjb21wb3VuZE5hbWVbY29tcG91bmROYW1lLmxl
bmd0aC0xXSk7Ci0JCX0KLQkJaWYgKChhbm5vdGF0aW9uVGFnQml0cyAmIFRhZ0JpdHMuQW5ub3Rh
dGlvblBvc3RDb25zdHJ1Y3QpICE9IDApIHsKLQkJCWNoYXJbXVtdIGNvbXBvdW5kTmFtZSA9IFR5
cGVDb25zdGFudHMuSkFWQVhfQU5OT1RBVElPTl9QT1NUQ09OU1RSVUNUOwotCQkJYWRkQW5ub3Rh
dGlvblR5cGVSZWZlcmVuY2UoY29tcG91bmROYW1lW2NvbXBvdW5kTmFtZS5sZW5ndGgtMV0pOwot
CQl9Ci0JCWlmICgoYW5ub3RhdGlvblRhZ0JpdHMgJiBUYWdCaXRzLkFubm90YXRpb25QcmVEZXN0
cm95KSAhPSAwKSB7Ci0JCQljaGFyW11bXSBjb21wb3VuZE5hbWUgPSBUeXBlQ29uc3RhbnRzLkpB
VkFYX0FOTk9UQVRJT05fUFJFREVTVFJPWTsKIAkJCWFkZEFubm90YXRpb25UeXBlUmVmZXJlbmNl
KGNvbXBvdW5kTmFtZVtjb21wb3VuZE5hbWUubGVuZ3RoLTFdKTsKIAkJfQogCX0KZGlmZiAtLWdp
dCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29yZS9zZWFyY2gvbWF0Y2hpbmcvQ2xhc3NGaWxlTWF0Y2hMb2NhdG9yLmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNo
L21hdGNoaW5nL0NsYXNzRmlsZU1hdGNoTG9jYXRvci5qYXZhCmluZGV4IDM3NjA4YWEuLjFjODY3
MjEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gvbWF0Y2hpbmcvQ2xhc3NGaWxlTWF0Y2hMb2NhdG9yLmph
dmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb3JlL3NlYXJjaC9tYXRjaGluZy9DbGFzc0ZpbGVNYXRjaExvY2F0b3IuamF2YQpAQCAt
MSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIw
MDAsIDIwMTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIw
MDAsIDIwMTIgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2Vy
dmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUg
bWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNl
bnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMg
YXZhaWxhYmxlIGF0CkBAIC05MCw2ICs5MCw5IEBACiAJcmV0dXJuIHRydWU7CiB9CiBwcml2YXRl
IGJvb2xlYW4gY2hlY2tTdGFuZGFyZEFubm90YXRpb25zKGxvbmcgYW5ub3RhdGlvblRhZ0JpdHMs
IFR5cGVSZWZlcmVuY2VQYXR0ZXJuIHBhdHRlcm4pIHsKKwlpZiAoKGFubm90YXRpb25UYWdCaXRz
ICYgVGFnQml0cy5BbGxTdGFuZGFyZEFubm90YXRpb25zTWFzaykgPT0gMCkgeworCQlyZXR1cm4g
ZmFsc2U7CisJfQogCWlmICgoYW5ub3RhdGlvblRhZ0JpdHMgJiBUYWdCaXRzLkFubm90YXRpb25U
YXJnZXRNQVNLKSAhPSAwKSB7CiAJCWNoYXJbXVtdIGNvbXBvdW5kTmFtZSA9IFR5cGVDb25zdGFu
dHMuSkFWQV9MQU5HX0FOTk9UQVRJT05fVEFSR0VUOwogCQlpZiAoY2hlY2tBbm5vdGF0aW9uVHlw
ZVJlZmVyZW5jZShDaGFyT3BlcmF0aW9uLmNvbmNhdFdpdGgoY29tcG91bmROYW1lLCAnLicpLCBw
YXR0ZXJuKSB8fApAQCAtMTQyLDE4ICsxNDUsNiBAQAogCX0KIAlpZiAoKGFubm90YXRpb25UYWdC
aXRzICYgVGFnQml0cy5Bbm5vdGF0aW9uUG9seW1vcnBoaWNTaWduYXR1cmUpICE9IDApIHsKIAkJ
Y2hhcltdW10gY29tcG91bmROYW1lID0gVHlwZUNvbnN0YW50cy5KQVZBX0xBTkdfSU5WT0tFX01F
VEhPREhBTkRMRV8kX1BPTFlNT1JQSElDU0lHTkFUVVJFOwotCQlpZiAoY2hlY2tBbm5vdGF0aW9u
VHlwZVJlZmVyZW5jZShDaGFyT3BlcmF0aW9uLmNvbmNhdFdpdGgoY29tcG91bmROYW1lLCAnLicp
LCBwYXR0ZXJuKSkgewotCQkJcmV0dXJuIHRydWU7Ci0JCX0KLQl9Ci0JaWYgKChhbm5vdGF0aW9u
VGFnQml0cyAmIFRhZ0JpdHMuQW5ub3RhdGlvblBvc3RDb25zdHJ1Y3QpICE9IDApIHsKLQkJY2hh
cltdW10gY29tcG91bmROYW1lID0gVHlwZUNvbnN0YW50cy5KQVZBWF9BTk5PVEFUSU9OX1BPU1RD
T05TVFJVQ1Q7Ci0JCWlmIChjaGVja0Fubm90YXRpb25UeXBlUmVmZXJlbmNlKENoYXJPcGVyYXRp
b24uY29uY2F0V2l0aChjb21wb3VuZE5hbWUsICcuJyksIHBhdHRlcm4pKSB7Ci0JCQlyZXR1cm4g
dHJ1ZTsKLQkJfQotCX0KLQlpZiAoKGFubm90YXRpb25UYWdCaXRzICYgVGFnQml0cy5Bbm5vdGF0
aW9uUHJlRGVzdHJveSkgIT0gMCkgewotCQljaGFyW11bXSBjb21wb3VuZE5hbWUgPSBUeXBlQ29u
c3RhbnRzLkpBVkFYX0FOTk9UQVRJT05fUFJFREVTVFJPWTsKIAkJaWYgKGNoZWNrQW5ub3RhdGlv
blR5cGVSZWZlcmVuY2UoQ2hhck9wZXJhdGlvbi5jb25jYXRXaXRoKGNvbXBvdW5kTmFtZSwgJy4n
KSwgcGF0dGVybikpIHsKIAkJCXJldHVybiB0cnVlOwogCQl9
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>209250</attachid>
            <date>2012-01-10 05:52:00 -0500</date>
            <delta_ts>2012-01-10 05:52:14 -0500</delta_ts>
            <desc>proposed fix v2.1 + regression tests</desc>
            <filename>master--Fixed-bug-365437-Private-methods-tagged-with.patch</filename>
            <type>text/plain</type>
            <size>36320</size>
            <attacher name="Ayushman Jain">amj87.iitr</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0Fubm90YXRpb25UZXN0
LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlw
c2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9Bbm5vdGF0aW9uVGVzdC5qYXZh
CmluZGV4IGJiZTBiYTUuLjRhOGIwZmEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
LnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9y
ZWdyZXNzaW9uL0Fubm90YXRpb25UZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUu
dGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3Jl
Z3Jlc3Npb24vQW5ub3RhdGlvblRlc3QuamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTEgSUJNIENvcnBvcmF0aW9u
IGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTIgSUJNIENvcnBvcmF0aW9u
IGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRo
ZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhl
IHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29t
cGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC00Nyw3ICs0
Nyw3IEBACiAJLy8gU3RhdGljIGluaXRpYWxpemVyIHRvIHNwZWNpZnkgdGVzdHMgc3Vic2V0IHVz
aW5nIFRFU1RTXyogc3RhdGljIHZhcmlhYmxlcwogCS8vIEFsbCBzcGVjaWZpZWQgdGVzdHMgd2hp
Y2ggZG8gbm90IGJlbG9uZyB0byB0aGUgY2xhc3MgYXJlIHNraXBwZWQuLi4KIAlzdGF0aWMgewot
Ly8JCVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1tdIHsgInRlc3QyOTMiIH07CisvLwkJVEVTVFNf
TkFNRVMgPSBuZXcgU3RyaW5nW10geyAidGVzdEJ1ZzM2NTQzNyIgfTsKIC8vCQlURVNUU19OVU1C
RVJTID0gbmV3IGludFtdIHsgMjk3IH07CiAvLwkJVEVTVFNfUkFOR0UgPSBuZXcgaW50W10geyAy
OTQsIC0xIH07CiAJfQpAQCAtMTAxNDgsNCArMTAxNDgsMzczIEBACiAJCSJCbGEgY2Fubm90IGJl
IHJlc29sdmVkIHRvIGEgdHlwZVxuIiArCiAJCSItLS0tLS0tLS0tXG4iKTsKIH0KKy8vIGh0dHBz
Oi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNjU0MzcKK3B1YmxpYyB2
b2lkIHRlc3RCdWczNjU0MzdhKCkgeworCU1hcCBjdXN0b21PcHRpb25zID0gZ2V0Q29tcGlsZXJP
cHRpb25zKCk7CisJY3VzdG9tT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9SZXBv
cnRVbnVzZWRQcml2YXRlTWVtYmVyLCBDb21waWxlck9wdGlvbnMuRVJST1IpOworCVN0cmluZyB0
ZXN0RmlsZXMgW10gPSBuZXcgU3RyaW5nW10geworCQkJInAvQS5qYXZhIiwKKwkJCSJwYWNrYWdl
IHA7XG4iICsKKwkJCSJpbXBvcnQgcDEuKjtcbiIgKworCQkJInB1YmxpYyBjbGFzcyBBIHtcbiIg
KworCQkJIglAcDEuUHJlRGVzdHJveVxuIiArCisJCQkiCXByaXZhdGUgdm9pZCBmb28xKCl7fVxu
IiArCisJCQkiCUBQcmVEZXN0cm95XG4iICsKKwkJCSIJcHJpdmF0ZSB2b2lkIGZvbzIoKXt9XG4i
ICsKKwkJCSIJQFN1cHByZXNzV2FybmluZ3MoXCJudWxsXCIpXG4iICsKKwkJCSIJQFBvc3RDb25z
dHJ1Y3RcbiIgKworCQkJIglwcml2YXRlIHZvaWQgZm9vMWEoKXt9XG4iICsKKwkJCSIJQFBvc3RD
b25zdHJ1Y3RcbiIgKworCQkJIglwcml2YXRlIHZvaWQgZm9vMmEoKXt9XG4iICsKKwkJCSIJQERl
cHJlY2F0ZWQiICsKKwkJCSIJcHJpdmF0ZSB2b2lkIGZvbzMoKXt9IiArCisJCQkifVxuIiwKKwkJ
CSJwMS9QcmVEZXN0cm95LmphdmEiLAorCQkJInBhY2thZ2UgcDE7XG4iICsKKwkJCSJwdWJsaWMg
QGludGVyZmFjZSBQcmVEZXN0cm95e30iLAorCQkJInAxL1Bvc3RDb25zdHJ1Y3QuamF2YSIsCisJ
CQkicGFja2FnZSBwMTtcbiIgKworCQkJInB1YmxpYyBAaW50ZXJmYWNlIFBvc3RDb25zdHJ1Y3R7
fSIKKwkJCX07CisJU3RyaW5nIGV4cGVjdGVkRXJyb3JTdHJpbmcgPSAKKwkJCSItLS0tLS0tLS0t
XG4iICsgCisJCQkiMS4gV0FSTklORyBpbiBwXFxBLmphdmEgKGF0IGxpbmUgOClcbiIgKyAKKwkJ
CSIJQFN1cHByZXNzV2FybmluZ3MoXCJudWxsXCIpXG4iICsgCisJCQkiCSAgICAgICAgICAgICAg
ICAgIF5eXl5eXlxuIiArIAorCQkJIlVubmVjZXNzYXJ5IEBTdXBwcmVzc1dhcm5pbmdzKFwibnVs
bFwiKVxuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCSIyLiBFUlJPUiBpbiBwXFxBLmph
dmEgKGF0IGxpbmUgMTMpXG4iICsgCisJCQkiCUBEZXByZWNhdGVkCXByaXZhdGUgdm9pZCBmb28z
KCl7fX1cbiIgKyAKKwkJCSIJICAgICAgICAgICAJICAgICAgICAgICAgIF5eXl5eXlxuIiArIAor
CQkJIlRoZSBtZXRob2QgZm9vMygpIGZyb20gdGhlIHR5cGUgQSBpcyBuZXZlciB1c2VkIGxvY2Fs
bHlcbiIgKyAKKwkJCSItLS0tLS0tLS0tXG4iOworCXJ1bk5lZ2F0aXZlVGVzdCgKKwkJCXRydWUs
CisJCQl0ZXN0RmlsZXMsCisJCQludWxsLCAKKwkJCWN1c3RvbU9wdGlvbnMsCisJCQlleHBlY3Rl
ZEVycm9yU3RyaW5nLAorCQkJSmF2YWNUZXN0T3B0aW9ucy5FeGN1c2UuRWNsaXBzZVdhcm5pbmdD
b25maWd1cmVkQXNFcnJvcik7Cit9CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9z
aG93X2J1Zy5jZ2k/aWQ9MzY1NDM3CitwdWJsaWMgdm9pZCB0ZXN0QnVnMzY1NDM3YigpIHsKKwlN
YXAgY3VzdG9tT3B0aW9ucyA9IGdldENvbXBpbGVyT3B0aW9ucygpOworCWN1c3RvbU9wdGlvbnMu
cHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJT05fUmVwb3J0VW51c2VkUHJpdmF0ZU1lbWJlciwgQ29t
cGlsZXJPcHRpb25zLkVSUk9SKTsKKwljdXN0b21PcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMu
T1BUSU9OX0Fubm90YXRpb25CYXNlZE51bGxBbmFseXNpcywgQ29tcGlsZXJPcHRpb25zLkVOQUJM
RUQpOworCWN1c3RvbU9wdGlvbnMucHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJT05fTm9uTnVsbEFu
bm90YXRpb25OYW1lLCAicC5Ob25OdWxsIik7CisJU3RyaW5nIHRlc3RGaWxlcyBbXSA9IG5ldyBT
dHJpbmdbXSB7CisJCQkiQS5qYXZhIiwKKwkJCSJpbXBvcnQgamF2YXguYW5ub3RhdGlvbi4qO1xu
IiArCisJCQkicHVibGljIGNsYXNzIEEge1xuIiArCisJCQkiCUBqYXZheC5hbm5vdGF0aW9uLlBy
ZURlc3Ryb3lcbiIgKworCQkJIglwcml2YXRlIHZvaWQgZm9vMSgpe31cbiIgKworCQkJIglAUHJl
RGVzdHJveVxuIiArCisJCQkiCXByaXZhdGUgdm9pZCBmb28yKCl7fVxuIiArCisJCQkiCUBqYXZh
eC5hbm5vdGF0aW9uLlJlc291cmNlXG4iICsKKwkJCSIJcHJpdmF0ZSB2b2lkIGZvbzFhKCl7fVxu
IiArCisJCQkiCUBSZXNvdXJjZVxuIiArCisJCQkiCUBwLk5vbk51bGxcbiIgKworCQkJIglwcml2
YXRlIE9iamVjdCBmb28yYSgpeyByZXR1cm4gbmV3IE9iamVjdCgpO31cbiIgKworCQkJIglAamF2
YXguYW5ub3RhdGlvbi5Qb3N0Q29uc3RydWN0XG4iICsKKwkJCSIJQERlcHJlY2F0ZWRcbiIgKwor
CQkJIglwcml2YXRlIHZvaWQgZm9vMygpe31cbiIgKworCQkJIglAcC5Ob25OdWxsXG4iICsKKwkJ
CSIJcHJpdmF0ZSBPYmplY3QgZm9vM2EoKXsgcmV0dXJuIG5ldyBPYmplY3QoKTt9XG4iICsKKwkJ
CSJ9XG4iLAorCQkJInAvTm9uTnVsbC5qYXZhIiwKKwkJCSJwYWNrYWdlIHA7XG4iICsKKwkJCSJp
bXBvcnQgc3RhdGljIGphdmEubGFuZy5hbm5vdGF0aW9uLkVsZW1lbnRUeXBlLio7XG4iICsKKwkJ
CSJpbXBvcnQgamF2YS5sYW5nLmFubm90YXRpb24uKjtcbiIgKworCQkJIkBUYXJnZXQoe1RZUEUs
IE1FVEhPRCxQQVJBTUVURVIsTE9DQUxfVkFSSUFCTEV9KVxuIiArCisJCQkicHVibGljIEBpbnRl
cmZhY2UgTm9uTnVsbCB7XG4iICsKKwkJCSJ9IgorCQkJfTsKKwlTdHJpbmcgZXhwZWN0ZWRFcnJv
clN0cmluZyA9IAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCSIxLiBFUlJPUiBpbiBBLmphdmEg
KGF0IGxpbmUgMTYpXG4iICsgCisJCQkiCXByaXZhdGUgT2JqZWN0IGZvbzNhKCl7IHJldHVybiBu
ZXcgT2JqZWN0KCk7fVxuIiArIAorCQkJIgkgICAgICAgICAgICAgICBeXl5eXl5eXG4iICsgCisJ
CQkiVGhlIG1ldGhvZCBmb28zYSgpIGZyb20gdGhlIHR5cGUgQSBpcyBuZXZlciB1c2VkIGxvY2Fs
bHlcbiIgKyAKKwkJCSItLS0tLS0tLS0tXG4iOworCXJ1bk5lZ2F0aXZlVGVzdCgKKwkJCXRydWUs
CisJCQl0ZXN0RmlsZXMsCisJCQludWxsLCAKKwkJCWN1c3RvbU9wdGlvbnMsCisJCQlleHBlY3Rl
ZEVycm9yU3RyaW5nLAorCQkJSmF2YWNUZXN0T3B0aW9ucy5FeGN1c2UuRWNsaXBzZVdhcm5pbmdD
b25maWd1cmVkQXNFcnJvcik7Cit9CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9z
aG93X2J1Zy5jZ2k/aWQ9MzY1NDM3CisvLyBAU2FmZVZhcmFyZ3MKK3B1YmxpYyB2b2lkIHRlc3RC
dWczNjU0MzdjKCkgeworCWlmICh0aGlzLmNvbXBsaWFuY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0
YW50cy5KREsxXzcpIHJldHVybjsKKwlNYXAgY3VzdG9tT3B0aW9ucyA9IGdldENvbXBpbGVyT3B0
aW9ucygpOworCWN1c3RvbU9wdGlvbnMucHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJT05fUmVwb3J0
VW51c2VkUHJpdmF0ZU1lbWJlciwgQ29tcGlsZXJPcHRpb25zLkVSUk9SKTsKKwlTdHJpbmcgdGVz
dEZpbGVzIFtdID0gbmV3IFN0cmluZ1tdIHsKKwkJCSJwL0EuamF2YSIsCisJCQkicGFja2FnZSBw
O1xuIiArCisJCQkiaW1wb3J0IHAxLio7XG4iICsKKwkJCSJwdWJsaWMgY2xhc3MgQSB7XG4iICsK
KwkJCSIJQHAxLlByZURlc3Ryb3lcbiIgKworCQkJIglwcml2YXRlIHZvaWQgZm9vMSgpe31cbiIg
KworCQkJIglAUHJlRGVzdHJveVxuIiArCisJCQkiCXByaXZhdGUgdm9pZCBmb28yKCl7fVxuIiAr
CisJCQkiCUBTdXBwcmVzc1dhcm5pbmdzKFwibnVsbFwiKVxuIiArCisJCQkiCUBQb3N0Q29uc3Ry
dWN0XG4iICsKKwkJCSIJcHJpdmF0ZSB2b2lkIGZvbzFhKCl7fVxuIiArCisJCQkiCUBQb3N0Q29u
c3RydWN0XG4iICsKKwkJCSIJcHJpdmF0ZSB2b2lkIGZvbzJhKCl7fVxuIiArCisJCQkiCUBTYWZl
VmFyYXJncyIgKworCQkJIglwcml2YXRlIGZpbmFsIHZvaWQgZm9vMyhPYmplY3QuLi4gbyl7fSIg
KworCQkJIn1cbiIsCisJCQkicDEvUHJlRGVzdHJveS5qYXZhIiwKKwkJCSJwYWNrYWdlIHAxO1xu
IiArCisJCQkicHVibGljIEBpbnRlcmZhY2UgUHJlRGVzdHJveXt9IiwKKwkJCSJwMS9Qb3N0Q29u
c3RydWN0LmphdmEiLAorCQkJInBhY2thZ2UgcDE7XG4iICsKKwkJCSJwdWJsaWMgQGludGVyZmFj
ZSBQb3N0Q29uc3RydWN0e30iCisJCQl9OworCVN0cmluZyBleHBlY3RlZEVycm9yU3RyaW5nID0g
CisJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJIjEuIFdBUk5JTkcgaW4gcFxcQS5qYXZhIChhdCBs
aW5lIDgpXG4iICsgCisJCQkiCUBTdXBwcmVzc1dhcm5pbmdzKFwibnVsbFwiKVxuIiArIAorCQkJ
IgkgICAgICAgICAgICAgICAgICBeXl5eXl5cbiIgKyAKKwkJCSJVbm5lY2Vzc2FyeSBAU3VwcHJl
c3NXYXJuaW5ncyhcIm51bGxcIilcbiIgKyAKKwkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkiMi4g
RVJST1IgaW4gcFxcQS5qYXZhIChhdCBsaW5lIDEzKVxuIiArIAorCQkJIglAU2FmZVZhcmFyZ3MJ
cHJpdmF0ZSBmaW5hbCB2b2lkIGZvbzMoT2JqZWN0Li4uIG8pe319XG4iICsgCisJCQkiCSAgICAg
ICAgICAgIAkgICAgICAgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5cbiIgKyAKKwkJCSJU
aGUgbWV0aG9kIGZvbzMoT2JqZWN0Li4uKSBmcm9tIHRoZSB0eXBlIEEgaXMgbmV2ZXIgdXNlZCBs
b2NhbGx5XG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIjsKKwlydW5OZWdhdGl2ZVRlc3QoCisJCQl0
cnVlLAorCQkJdGVzdEZpbGVzLAorCQkJbnVsbCwgCisJCQljdXN0b21PcHRpb25zLAorCQkJZXhw
ZWN0ZWRFcnJvclN0cmluZywKKwkJCUphdmFjVGVzdE9wdGlvbnMuRXhjdXNlLkVjbGlwc2VXYXJu
aW5nQ29uZmlndXJlZEFzRXJyb3IpOworfQorLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1
Z3Mvc2hvd19idWcuY2dpP2lkPTM2NTQzNworLy8gdW51c2VkIGNvbnN0cnVjdG9yCitwdWJsaWMg
dm9pZCB0ZXN0QnVnMzY1NDM3ZCgpIHsKKwlNYXAgY3VzdG9tT3B0aW9ucyA9IGdldENvbXBpbGVy
T3B0aW9ucygpOworCWN1c3RvbU9wdGlvbnMucHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJT05fUmVw
b3J0VW51c2VkUHJpdmF0ZU1lbWJlciwgQ29tcGlsZXJPcHRpb25zLkVSUk9SKTsKKwljdXN0b21P
cHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydFVudXNlZFByaXZhdGVNZW1i
ZXIsIENvbXBpbGVyT3B0aW9ucy5FUlJPUik7CisJY3VzdG9tT3B0aW9ucy5wdXQoQ29tcGlsZXJP
cHRpb25zLk9QVElPTl9Bbm5vdGF0aW9uQmFzZWROdWxsQW5hbHlzaXMsIENvbXBpbGVyT3B0aW9u
cy5FTkFCTEVEKTsKKwljdXN0b21PcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX05v
bk51bGxBbm5vdGF0aW9uTmFtZSwgInAuTm9uTnVsbCIpOworCXRoaXMucnVuTmVnYXRpdmVUZXN0
KAorCQl0cnVlLAorCQluZXcgU3RyaW5nW10geworCQkJIkV4YW1wbGUuamF2YSIsCisJCQkiY2xh
c3MgRXhhbXBsZSB7XG4iICsKKwkJCSIgIEBwLkFubm90XG4iICsKKwkJCSIgIHByaXZhdGUgRXhh
bXBsZSgpIHtcbiIgKworCQkJIiAgfVxuIiArCisJCQkiICBwdWJsaWMgRXhhbXBsZShpbnQgaSkg
e1xuIiArCisJCQkiICB9XG4iICsKKwkJCSJ9XG4iICsKKwkJCSJjbGFzcyBFMSB7XG4iICsKKwkJ
CSIJIEBEZXByZWNhdGVkXG4iICsKKwkJCSIgICAgcHJpdmF0ZSBFMSgpIHt9XG4iICsKKwkJCSIg
ICAgcHVibGljIEUxKGxvbmcgbCkge31cbiIgKworCQkJIn1cbiIgKworCQkJImNsYXNzIEUyIHtc
biIgKworCQkJIgkgQFN1cHByZXNzV2FybmluZ3MoXCJudWxsXCIpXG4iICsKKwkJCSIgICAgcHJp
dmF0ZSBFMigpIHt9XG4iICsKKwkJCSIgICAgcHVibGljIEUyKGxvbmcgbCkge31cbiIgKworCQkJ
In1cbiIgKworCQkJImNsYXNzIEUzIHtcbiIgKworCQkJIgkgQHAuTm9uTnVsbFxuIiArCisJCQki
ICAgIHByaXZhdGUgRTMoKSB7fVxuIiArCisJCQkiICAgIHB1YmxpYyBFMyhsb25nIGwpIHt9XG4i
ICsKKwkJCSJ9XG4iICsKKwkJCSJjbGFzcyBFNCB7XG4iICsKKwkJCSIJIEBEZXByZWNhdGVkXG4i
ICsKKwkJCSIJIEBwLkFubm90XG4iICsKKwkJCSIgICAgcHJpdmF0ZSBFNCgpIHt9XG4iICsKKwkJ
CSIgICAgcHVibGljIEU0KGxvbmcgbCkge31cbiIgKworCQkJIn1cbiIsCisJCQkicC9Ob25OdWxs
LmphdmEiLAorCQkJInBhY2thZ2UgcDtcbiIgKworCQkJImltcG9ydCBzdGF0aWMgamF2YS5sYW5n
LmFubm90YXRpb24uRWxlbWVudFR5cGUuKjtcbiIgKworCQkJImltcG9ydCBqYXZhLmxhbmcuYW5u
b3RhdGlvbi4qO1xuIiArCisJCQkiQFRhcmdldCh7VFlQRSwgTUVUSE9ELFBBUkFNRVRFUixDT05T
VFJVQ1RPUn0pXG4iICsKKwkJCSJwdWJsaWMgQGludGVyZmFjZSBOb25OdWxsIHtcbiIgKworCQkJ
In0iLAorCQkJInAvQW5ub3QuamF2YSIsCisJCQkicGFja2FnZSBwO1xuIiArCisJCQkiaW1wb3J0
IHN0YXRpYyBqYXZhLmxhbmcuYW5ub3RhdGlvbi5FbGVtZW50VHlwZS4qO1xuIiArCisJCQkiaW1w
b3J0IGphdmEubGFuZy5hbm5vdGF0aW9uLio7XG4iICsKKwkJCSJAVGFyZ2V0KHtUWVBFLCBNRVRI
T0QsUEFSQU1FVEVSLExPQ0FMX1ZBUklBQkxFLCBDT05TVFJVQ1RPUn0pXG4iICsKKwkJCSJwdWJs
aWMgQGludGVyZmFjZSBBbm5vdCB7XG4iICsKKwkJCSJ9IgorCQl9LAorCQludWxsLCBjdXN0b21P
cHRpb25zLAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiMS4gRVJST1IgaW4gRXhhbXBsZS5qYXZh
IChhdCBsaW5lIDEwKVxuIiArIAorCQkiCXByaXZhdGUgRTEoKSB7fVxuIiArIAorCQkiCSAgICAg
ICAgXl5eXlxuIiArIAorCQkiVGhlIGNvbnN0cnVjdG9yIEUxKCkgaXMgbmV2ZXIgdXNlZCBsb2Nh
bGx5XG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIyLiBXQVJOSU5HIGluIEV4YW1wbGUu
amF2YSAoYXQgbGluZSAxNClcbiIgKyAKKwkJIglAU3VwcHJlc3NXYXJuaW5ncyhcIm51bGxcIilc
biIgKyAKKwkJIgkgICAgICAgICAgICAgICAgICBeXl5eXl5cbiIgKyAKKwkJIlVubmVjZXNzYXJ5
IEBTdXBwcmVzc1dhcm5pbmdzKFwibnVsbFwiKVxuIiArIAorCQkiLS0tLS0tLS0tLVxuIiArIAor
CQkiMy4gRVJST1IgaW4gRXhhbXBsZS5qYXZhIChhdCBsaW5lIDE1KVxuIiArIAorCQkiCXByaXZh
dGUgRTIoKSB7fVxuIiArIAorCQkiCSAgICAgICAgXl5eXlxuIiArIAorCQkiVGhlIGNvbnN0cnVj
dG9yIEUyKCkgaXMgbmV2ZXIgdXNlZCBsb2NhbGx5XG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsg
CisJCSI0LiBFUlJPUiBpbiBFeGFtcGxlLmphdmEgKGF0IGxpbmUgMjApXG4iICsgCisJCSIJcHJp
dmF0ZSBFMygpIHt9XG4iICsgCisJCSIJICAgICAgICBeXl5eXG4iICsgCisJCSJUaGUgY29uc3Ry
dWN0b3IgRTMoKSBpcyBuZXZlciB1c2VkIGxvY2FsbHlcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIs
CisJCUphdmFjVGVzdE9wdGlvbnMuRXhjdXNlLkVjbGlwc2VXYXJuaW5nQ29uZmlndXJlZEFzRXJy
b3IpOworfQorLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lk
PTM2NTQzNworLy8gdW51c2VkIGZpZWxkCitwdWJsaWMgdm9pZCB0ZXN0QnVnMzY1NDM3ZSgpIHsK
KwlNYXAgY3VzdG9tT3B0aW9ucyA9IGdldENvbXBpbGVyT3B0aW9ucygpOworCWN1c3RvbU9wdGlv
bnMucHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJT05fUmVwb3J0VW51c2VkUHJpdmF0ZU1lbWJlciwg
Q29tcGlsZXJPcHRpb25zLkVSUk9SKTsKKwljdXN0b21PcHRpb25zLnB1dChDb21waWxlck9wdGlv
bnMuT1BUSU9OX1JlcG9ydFVudXNlZFByaXZhdGVNZW1iZXIsIENvbXBpbGVyT3B0aW9ucy5FUlJP
Uik7CisJY3VzdG9tT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9Bbm5vdGF0aW9u
QmFzZWROdWxsQW5hbHlzaXMsIENvbXBpbGVyT3B0aW9ucy5FTkFCTEVEKTsKKwljdXN0b21PcHRp
b25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX05vbk51bGxBbm5vdGF0aW9uTmFtZSwgInAu
Tm9uTnVsbCIpOworCXRoaXMucnVuTmVnYXRpdmVUZXN0KAorCQl0cnVlLAorCQluZXcgU3RyaW5n
W10geworCQkJIkV4YW1wbGUuamF2YSIsCisJCQkiY2xhc3MgRXhhbXBsZSB7XG4iICsKKwkJCSIg
IEBwLkFubm90XG4iICsKKwkJCSIgIHByaXZhdGUgaW50IEV4O1xuIiArCisJCQkifVxuIiArCisJ
CQkiY2xhc3MgRTEge1xuIiArCisJCQkiCSBARGVwcmVjYXRlZFxuIiArCisJCQkiICAgIHByaXZh
dGUgaW50IEUxO1xuIiArCisJCQkifVxuIiArCisJCQkiY2xhc3MgRTIge1xuIiArCisJCQkiCSBA
U3VwcHJlc3NXYXJuaW5ncyhcIm51bGxcIilcbiIgKworCQkJIiAgICBwcml2YXRlIGludCBFMjtc
biIgKworCQkJIn1cbiIgKworCQkJImNsYXNzIEUzIHtcbiIgKworCQkJIgkgQHAuTm9uTnVsbFxu
IiArCisJCQkiICAgIHByaXZhdGUgaW50IEUzO1xuIiArCisJCQkifVxuIiArCisJCQkiY2xhc3Mg
RTQge1xuIiArCisJCQkiCSBARGVwcmVjYXRlZFxuIiArCisJCQkiCSBAcC5Bbm5vdFxuIiArCisJ
CQkiICAgIHByaXZhdGUgaW50IEU0O1xuIiArCisJCQkifVxuIiwKKwkJCSJwL05vbk51bGwuamF2
YSIsCisJCQkicGFja2FnZSBwO1xuIiArCisJCQkiaW1wb3J0IHN0YXRpYyBqYXZhLmxhbmcuYW5u
b3RhdGlvbi5FbGVtZW50VHlwZS4qO1xuIiArCisJCQkiaW1wb3J0IGphdmEubGFuZy5hbm5vdGF0
aW9uLio7XG4iICsKKwkJCSJAVGFyZ2V0KHtUWVBFLCBNRVRIT0QsUEFSQU1FVEVSLExPQ0FMX1ZB
UklBQkxFLCBGSUVMRH0pXG4iICsKKwkJCSJwdWJsaWMgQGludGVyZmFjZSBOb25OdWxsIHtcbiIg
KworCQkJIn0iLAorCQkJInAvQW5ub3QuamF2YSIsCisJCQkicGFja2FnZSBwO1xuIiArCisJCQki
aW1wb3J0IHN0YXRpYyBqYXZhLmxhbmcuYW5ub3RhdGlvbi5FbGVtZW50VHlwZS4qO1xuIiArCisJ
CQkiaW1wb3J0IGphdmEubGFuZy5hbm5vdGF0aW9uLio7XG4iICsKKwkJCSJAVGFyZ2V0KHtUWVBF
LCBNRVRIT0QsUEFSQU1FVEVSLExPQ0FMX1ZBUklBQkxFLCBGSUVMRH0pXG4iICsKKwkJCSJwdWJs
aWMgQGludGVyZmFjZSBBbm5vdCB7XG4iICsKKwkJCSJ9IgorCQl9LAorCQludWxsLCBjdXN0b21P
cHRpb25zLAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiMS4gRVJST1IgaW4gRXhhbXBsZS5qYXZh
IChhdCBsaW5lIDcpXG4iICsgCisJCSIJcHJpdmF0ZSBpbnQgRTE7XG4iICsgCisJCSIJICAgICAg
ICAgICAgXl5cbiIgKyAKKwkJIlRoZSB2YWx1ZSBvZiB0aGUgZmllbGQgRTEuRTEgaXMgbm90IHVz
ZWRcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjIuIFdBUk5JTkcgaW4gRXhhbXBsZS5q
YXZhIChhdCBsaW5lIDEwKVxuIiArIAorCQkiCUBTdXBwcmVzc1dhcm5pbmdzKFwibnVsbFwiKVxu
IiArIAorCQkiCSAgICAgICAgICAgICAgICAgIF5eXl5eXlxuIiArIAorCQkiVW5uZWNlc3Nhcnkg
QFN1cHByZXNzV2FybmluZ3MoXCJudWxsXCIpXG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJ
CSIzLiBFUlJPUiBpbiBFeGFtcGxlLmphdmEgKGF0IGxpbmUgMTEpXG4iICsgCisJCSIJcHJpdmF0
ZSBpbnQgRTI7XG4iICsgCisJCSIJICAgICAgICAgICAgXl5cbiIgKyAKKwkJIlRoZSB2YWx1ZSBv
ZiB0aGUgZmllbGQgRTIuRTIgaXMgbm90IHVzZWRcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAK
KwkJIjQuIEVSUk9SIGluIEV4YW1wbGUuamF2YSAoYXQgbGluZSAxNSlcbiIgKyAKKwkJIglwcml2
YXRlIGludCBFMztcbiIgKyAKKwkJIgkgICAgICAgICAgICBeXlxuIiArIAorCQkiVGhlIHZhbHVl
IG9mIHRoZSBmaWVsZCBFMy5FMyBpcyBub3QgdXNlZFxuIiArIAorCQkiLS0tLS0tLS0tLVxuIiwK
KwkJSmF2YWNUZXN0T3B0aW9ucy5FeGN1c2UuRWNsaXBzZVdhcm5pbmdDb25maWd1cmVkQXNFcnJv
cik7Cit9CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9
MzY1NDM3CisvLyB1bnVzZWQgdHlwZQorcHVibGljIHZvaWQgdGVzdEJ1ZzM2NTQzN2YoKSB7CisJ
TWFwIGN1c3RvbU9wdGlvbnMgPSBnZXRDb21waWxlck9wdGlvbnMoKTsKKwljdXN0b21PcHRpb25z
LnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydFVudXNlZFByaXZhdGVNZW1iZXIsIENv
bXBpbGVyT3B0aW9ucy5FUlJPUik7CisJY3VzdG9tT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25z
Lk9QVElPTl9SZXBvcnRVbnVzZWRQcml2YXRlTWVtYmVyLCBDb21waWxlck9wdGlvbnMuRVJST1Ip
OworCWN1c3RvbU9wdGlvbnMucHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJT05fQW5ub3RhdGlvbkJh
c2VkTnVsbEFuYWx5c2lzLCBDb21waWxlck9wdGlvbnMuRU5BQkxFRCk7CisJY3VzdG9tT3B0aW9u
cy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9Ob25OdWxsQW5ub3RhdGlvbk5hbWUsICJwLk5v
bk51bGwiKTsKKwl0aGlzLnJ1bk5lZ2F0aXZlVGVzdCgKKwkJdHJ1ZSwKKwkJbmV3IFN0cmluZ1td
IHsKKwkJCSJFeGFtcGxlLmphdmEiLAorCQkJImNsYXNzIEV4YW1wbGUge1xuIiArCisJCQkiICBA
cC5Bbm5vdFxuIiArCisJCQkiICBwcml2YXRlIGNsYXNzIEV4e31cbiIgKworCQkJIn1cbiIgKwor
CQkJImNsYXNzIEUxIHtcbiIgKworCQkJIgkgQERlcHJlY2F0ZWRcbiIgKworCQkJIiAgICBwcml2
YXRlIGNsYXNzIEUxMXt9XG4iICsKKwkJCSJ9XG4iICsKKwkJCSJjbGFzcyBFMiB7XG4iICsKKwkJ
CSIJIEBTdXBwcmVzc1dhcm5pbmdzKFwibnVsbFwiKVxuIiArCisJCQkiICAgIHByaXZhdGUgY2xh
c3MgRTIye31cbiIgKworCQkJIn1cbiIgKworCQkJImNsYXNzIEUzIHtcbiIgKworCQkJIgkgQHAu
Tm9uTnVsbFxuIiArCisJCQkiICAgIHByaXZhdGUgY2xhc3MgRTMze31cbiIgKworCQkJIn1cbiIg
KworCQkJImNsYXNzIEU0IHtcbiIgKworCQkJIgkgQERlcHJlY2F0ZWRcbiIgKworCQkJIgkgQHAu
QW5ub3RcbiIgKworCQkJIiAgICBwcml2YXRlIGNsYXNzIEU0NHt9XG4iICsKKwkJCSJ9XG4iLAor
CQkJInAvTm9uTnVsbC5qYXZhIiwKKwkJCSJwYWNrYWdlIHA7XG4iICsKKwkJCSJpbXBvcnQgc3Rh
dGljIGphdmEubGFuZy5hbm5vdGF0aW9uLkVsZW1lbnRUeXBlLio7XG4iICsKKwkJCSJpbXBvcnQg
amF2YS5sYW5nLmFubm90YXRpb24uKjtcbiIgKworCQkJIkBUYXJnZXQoe1RZUEUsIE1FVEhPRCxQ
QVJBTUVURVIsTE9DQUxfVkFSSUFCTEV9KVxuIiArCisJCQkicHVibGljIEBpbnRlcmZhY2UgTm9u
TnVsbCB7XG4iICsKKwkJCSJ9IiwKKwkJCSJwL0Fubm90LmphdmEiLAorCQkJInBhY2thZ2UgcDtc
biIgKworCQkJImltcG9ydCBzdGF0aWMgamF2YS5sYW5nLmFubm90YXRpb24uRWxlbWVudFR5cGUu
KjtcbiIgKworCQkJImltcG9ydCBqYXZhLmxhbmcuYW5ub3RhdGlvbi4qO1xuIiArCisJCQkiQFRh
cmdldCh7VFlQRSwgTUVUSE9ELFBBUkFNRVRFUixMT0NBTF9WQVJJQUJMRSwgQ09OU1RSVUNUT1J9
KVxuIiArCisJCQkicHVibGljIEBpbnRlcmZhY2UgQW5ub3Qge1xuIiArCisJCQkifSIKKwkJfSwK
KwkJbnVsbCwgY3VzdG9tT3B0aW9ucywKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjEuIEVSUk9S
IGluIEV4YW1wbGUuamF2YSAoYXQgbGluZSA3KVxuIiArIAorCQkiCXByaXZhdGUgY2xhc3MgRTEx
e31cbiIgKyAKKwkJIgkgICAgICAgICAgICAgIF5eXlxuIiArIAorCQkiVGhlIHR5cGUgRTEuRTEx
IGlzIG5ldmVyIHVzZWQgbG9jYWxseVxuIiArIAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiMi4g
V0FSTklORyBpbiBFeGFtcGxlLmphdmEgKGF0IGxpbmUgMTApXG4iICsgCisJCSIJQFN1cHByZXNz
V2FybmluZ3MoXCJudWxsXCIpXG4iICsgCisJCSIJICAgICAgICAgICAgICAgICAgXl5eXl5eXG4i
ICsgCisJCSJVbm5lY2Vzc2FyeSBAU3VwcHJlc3NXYXJuaW5ncyhcIm51bGxcIilcbiIgKyAKKwkJ
Ii0tLS0tLS0tLS1cbiIgKyAKKwkJIjMuIEVSUk9SIGluIEV4YW1wbGUuamF2YSAoYXQgbGluZSAx
MSlcbiIgKyAKKwkJIglwcml2YXRlIGNsYXNzIEUyMnt9XG4iICsgCisJCSIJICAgICAgICAgICAg
ICBeXl5cbiIgKyAKKwkJIlRoZSB0eXBlIEUyLkUyMiBpcyBuZXZlciB1c2VkIGxvY2FsbHlcbiIg
KyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjQuIEVSUk9SIGluIEV4YW1wbGUuamF2YSAoYXQg
bGluZSAxNSlcbiIgKyAKKwkJIglwcml2YXRlIGNsYXNzIEUzM3t9XG4iICsgCisJCSIJICAgICAg
ICAgICAgICBeXl5cbiIgKyAKKwkJIlRoZSB0eXBlIEUzLkUzMyBpcyBuZXZlciB1c2VkIGxvY2Fs
bHlcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIsCisJCUphdmFjVGVzdE9wdGlvbnMuRXhjdXNlLkVj
bGlwc2VXYXJuaW5nQ29uZmlndXJlZEFzRXJyb3IpOworfQogfQpkaWZmIC0tZ2l0IGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FzdC9Bbm5vdGF0aW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Fubm90YXRpb24uamF2YQppbmRleCBi
Yzc2YWQ3Li42OGVkOWViIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Fubm90YXRpb24uamF2YQor
KysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXN0L0Fubm90YXRpb24uamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTEgSUJNIENvcnBvcmF0
aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTIgSUJNIENvcnBvcmF0
aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5k
IHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIg
dGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFj
Y29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC0xNjcs
MTIgKzE2Nyw2IEBACiAJCQkJYnJlYWs7CiAJCQljYXNlIFR5cGVJZHMuVF9KYXZhTGFuZ0ludm9r
ZU1ldGhvZEhhbmRsZVBvbHltb3JwaGljU2lnbmF0dXJlIDoKIAkJCQl0YWdCaXRzIHw9IFRhZ0Jp
dHMuQW5ub3RhdGlvblBvbHltb3JwaGljU2lnbmF0dXJlOwotCQkJCWJyZWFrOwotCQkJY2FzZSBU
eXBlSWRzLlRfSmF2YXhBbm5vdGF0aW9uUG9zdENvbnN0cnVjdCA6Ci0JCQkJdGFnQml0cyB8PSBU
YWdCaXRzLkFubm90YXRpb25Qb3N0Q29uc3RydWN0OwotCQkJCWJyZWFrOwotCQkJY2FzZSBUeXBl
SWRzLlRfSmF2YXhBbm5vdGF0aW9uUHJlRGVzdHJveSA6Ci0JCQkJdGFnQml0cyB8PSBUYWdCaXRz
LkFubm90YXRpb25QcmVEZXN0cm95OwogCQkJCWJyZWFrOwogCQkJY2FzZSBUeXBlSWRzLlRfQ29u
ZmlndXJlZEFubm90YXRpb25OdWxsYWJsZSA6CiAJCQkJdGFnQml0cyB8PSBUYWdCaXRzLkFubm90
YXRpb25OdWxsYWJsZTsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9jbGFzc2ZtdC9Bbm5vdGF0aW9uSW5m
by5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2NsYXNzZm10L0Fubm90YXRpb25JbmZvLmphdmEKaW5kZXggMzM1N2Q3
ZC4uZDgxZWMxYyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2NsYXNzZm10L0Fubm90YXRpb25JbmZvLmph
dmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2NsYXNzZm10L0Fubm90YXRpb25JbmZvLmphdmEKQEAgLTMwMywxMCAr
MzAzLDYgQEAKIAkJCQkJY3VycmVudE9mZnNldCArPSAyOwogCQkJCQlyZXR1cm4gcmVhZFRhcmdl
dFZhbHVlKGN1cnJlbnRPZmZzZXQpOwogCQkJCX0KLQkJCQlpZiAoQ2hhck9wZXJhdGlvbi5lcXVh
bHModHlwZU5hbWUsIENvbnN0YW50UG9vbC5KQVZBWF9BTk5PVEFUSU9OX1BSRURFU1RST1kpKSB7
Ci0JCQkJCXRoaXMuc3RhbmRhcmRBbm5vdGF0aW9uVGFnQml0cyB8PSBUYWdCaXRzLkFubm90YXRp
b25QcmVEZXN0cm95OwotCQkJCQlyZXR1cm4gY3VycmVudE9mZnNldDsKLQkJCQl9CiAJCQkJYnJl
YWs7CiAJCQljYXNlIDMyOgogCQkJCWlmIChDaGFyT3BlcmF0aW9uLmVxdWFscyh0eXBlTmFtZSwg
Q29uc3RhbnRQb29sLkpBVkFfTEFOR19BTk5PVEFUSU9OX1JFVEVOVElPTikpIHsKQEAgLTMxNSwx
MCArMzExLDYgQEAKIAkJCQl9CiAJCQkJaWYgKENoYXJPcGVyYXRpb24uZXF1YWxzKHR5cGVOYW1l
LCBDb25zdGFudFBvb2wuSkFWQV9MQU5HX0FOTk9UQVRJT05fSU5IRVJJVEVEKSkgewogCQkJCQl0
aGlzLnN0YW5kYXJkQW5ub3RhdGlvblRhZ0JpdHMgfD0gVGFnQml0cy5Bbm5vdGF0aW9uSW5oZXJp
dGVkOwotCQkJCQlyZXR1cm4gY3VycmVudE9mZnNldDsKLQkJCQl9Ci0JCQkJaWYgKENoYXJPcGVy
YXRpb24uZXF1YWxzKHR5cGVOYW1lLCBDb25zdGFudFBvb2wuSkFWQVhfQU5OT1RBVElPTl9QT1NU
Q09OU1RSVUNUKSkgewotCQkJCQl0aGlzLnN0YW5kYXJkQW5ub3RhdGlvblRhZ0JpdHMgfD0gVGFn
Qml0cy5Bbm5vdGF0aW9uUG9zdENvbnN0cnVjdDsKIAkJCQkJcmV0dXJuIGN1cnJlbnRPZmZzZXQ7
CiAJCQkJfQogCQkJCWJyZWFrOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2NvZGVnZW4vQ29uc3RhbnRQ
b29sLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvY29kZWdlbi9Db25zdGFudFBvb2wuamF2YQppbmRleCBjODc1Yzli
Li5jNDQ5Mzg1IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvY29kZWdlbi9Db25zdGFudFBvb2wuamF2YQor
KysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvY29kZWdlbi9Db25zdGFudFBvb2wuamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8q
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTEgSUJNIENv
cnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTIgSUJNIENv
cnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dy
YW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUg
dW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdo
aWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBA
IC0yNDgsOCArMjQ4LDYgQEAKIAlwdWJsaWMgc3RhdGljIGZpbmFsIGNoYXJbXSBKQVZBX0xBTkdf
U0FGRVZBUkFSR1MgPSAiTGphdmEvbGFuZy9TYWZlVmFyYXJnczsiLnRvQ2hhckFycmF5KCk7IC8v
JE5PTi1OTFMtMSQKIAkvLyBqYXZhIDcgamF2YS5sYW5nLmludm9rZS5NZXRob2RIYW5kbGUuaW52
b2tlRXhhY3QoLi4pL2ludm9rZUdlbmVyaWMoLi4pCiAJcHVibGljIHN0YXRpYyBmaW5hbCBjaGFy
W10gSkFWQV9MQU5HX0lOVk9LRV9NRVRIT0RIQU5ETEVfUE9MWU1PUlBISUNTSUdOQVRVUkUgPSAi
TGphdmEvbGFuZy9pbnZva2UvTWV0aG9kSGFuZGxlJFBvbHltb3JwaGljU2lnbmF0dXJlOyIudG9D
aGFyQXJyYXkoKTsgLy8kTk9OLU5MUy0xJAotCXB1YmxpYyBzdGF0aWMgZmluYWwgY2hhcltdIEpB
VkFYX0FOTk9UQVRJT05fUE9TVENPTlNUUlVDVCA9ICJMamF2YXgvYW5ub3RhdGlvbi9Qb3N0Q29u
c3RydWN0OyIudG9DaGFyQXJyYXkoKTsgLy8kTk9OLU5MUy0xJAotCXB1YmxpYyBzdGF0aWMgZmlu
YWwgY2hhcltdIEpBVkFYX0FOTk9UQVRJT05fUFJFREVTVFJPWSA9ICJMamF2YXgvYW5ub3RhdGlv
bi9QcmVEZXN0cm95OyIudG9DaGFyQXJyYXkoKTsgLy8kTk9OLU5MUy0xJAogCiAJcHVibGljIHN0
YXRpYyBmaW5hbCBjaGFyW10gSGFzaENvZGUgPSAiaGFzaENvZGUiLnRvQ2hhckFycmF5KCk7IC8v
JE5PTi1OTFMtMSQKIAlwdWJsaWMgc3RhdGljIGZpbmFsIGNoYXJbXSBIYXNoQ29kZVNpZ25hdHVy
ZSA9ICIoKUkiLnRvQ2hhckFycmF5KCk7IC8vJE5PTi1OTFMtMSQ7IApkaWZmIC0tZ2l0IGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2xvb2t1cC9Bbm5vdGF0aW9uQmluZGluZy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Bbm5vdGF0
aW9uQmluZGluZy5qYXZhCmluZGV4IGM4OGM0YTEuLjAzOGM1YWQgMTAwNjQ0Ci0tLSBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9sb29rdXAvQW5ub3RhdGlvbkJpbmRpbmcuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0Fubm90
YXRpb25CaW5kaW5nLmphdmEKQEAgLTEsNSArMSw1IEBACiAvKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KgotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJz
LgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEyIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJz
LgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55
aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0
aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlz
IGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdApAQCAtNTQsMTEgKzU0LDEwIEBACiAJ
CWNvdW50Kys7CiAJaWYgKChhbm5vdGF0aW9uVGFnQml0cyAmIFRhZ0JpdHMuQW5ub3RhdGlvblNh
ZmVWYXJhcmdzKSAhPSAwKQogCQljb3VudCsrOwotCWlmICgoYW5ub3RhdGlvblRhZ0JpdHMgJiBU
YWdCaXRzLkFubm90YXRpb25Qb3N0Q29uc3RydWN0KSAhPSAwKQotCQljb3VudCsrOwotCWlmICgo
YW5ub3RhdGlvblRhZ0JpdHMgJiBUYWdCaXRzLkFubm90YXRpb25QcmVEZXN0cm95KSAhPSAwKQot
CQljb3VudCsrOwotCS8vIGNvdW50IG11c3QgYmUgZGlmZmVyZW50IGZyb20gMAorCWlmIChjb3Vu
dCA9PSAwKSB7CisJCS8vIHRoaXMgaXMgcG9zc2libGUgaWYgYml0cyB3ZXJlIHNldCBmb3IgbnVs
bCBhbm5vdGF0aW9ucworCQlyZXR1cm4gcmVjb3JkZWRBbm5vdGF0aW9uczsKKwl9CiAKIAlpbnQg
aW5kZXggPSByZWNvcmRlZEFubm90YXRpb25zLmxlbmd0aDsKIAlBbm5vdGF0aW9uQmluZGluZ1td
IHJlc3VsdCA9IG5ldyBBbm5vdGF0aW9uQmluZGluZ1tpbmRleCArIGNvdW50XTsKQEAgLTgxLDEw
ICs4MCw2IEBACiAJCXJlc3VsdFtpbmRleCsrXSA9IGJ1aWxkTWFya2VyQW5ub3RhdGlvbkZvck1l
bWJlclR5cGUoVHlwZUNvbnN0YW50cy5KQVZBX0xBTkdfSU5WT0tFX01FVEhPREhBTkRMRV8kX1BP
TFlNT1JQSElDU0lHTkFUVVJFLCBlbnYpOwogCWlmICgoYW5ub3RhdGlvblRhZ0JpdHMgJiBUYWdC
aXRzLkFubm90YXRpb25TYWZlVmFyYXJncykgIT0gMCkKIAkJcmVzdWx0W2luZGV4KytdID0gYnVp
bGRNYXJrZXJBbm5vdGF0aW9uKFR5cGVDb25zdGFudHMuSkFWQV9MQU5HX1NBRkVWQVJBUkdTLCBl
bnYpOwotCWlmICgoYW5ub3RhdGlvblRhZ0JpdHMgJiBUYWdCaXRzLkFubm90YXRpb25Qb3N0Q29u
c3RydWN0KSAhPSAwKQotCQlyZXN1bHRbaW5kZXgrK10gPSBidWlsZE1hcmtlckFubm90YXRpb24o
VHlwZUNvbnN0YW50cy5KQVZBWF9BTk5PVEFUSU9OX1BPU1RDT05TVFJVQ1QsIGVudik7Ci0JaWYg
KChhbm5vdGF0aW9uVGFnQml0cyAmIFRhZ0JpdHMuQW5ub3RhdGlvblByZURlc3Ryb3kpICE9IDAp
Ci0JCXJlc3VsdFtpbmRleCsrXSA9IGJ1aWxkTWFya2VyQW5ub3RhdGlvbihUeXBlQ29uc3RhbnRz
LkpBVkFYX0FOTk9UQVRJT05fUFJFREVTVFJPWSwgZW52KTsKIAlyZXR1cm4gcmVzdWx0OwogfQog
CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1JlZmVyZW5jZUJpbmRpbmcuamF2YSBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9sb29rdXAvUmVmZXJlbmNlQmluZGluZy5qYXZhCmluZGV4IDc1ZGU4NTQuLjhlNTdhZmIgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9sb29rdXAvUmVmZXJlbmNlQmluZGluZy5qYXZhCisrKyBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9sb29rdXAvUmVmZXJlbmNlQmluZGluZy5qYXZhCkBAIC0xLDUgKzEsNSBAQAogLyoqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMSBJQk0gQ29ycG9yYXRp
b24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMiBJQk0gQ29ycG9yYXRp
b24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQg
dGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0
aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNj
b21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKQEAgLTM4MCw4
ICszODAsNyBAQAogCXN3aXRjaCAodGhpcy5jb21wb3VuZE5hbWUubGVuZ3RoKSB7CiAKIAkJY2Fz
ZSAzIDoKLQkJCWlmICghQ2hhck9wZXJhdGlvbi5lcXVhbHMoVHlwZUNvbnN0YW50cy5KQVZBLCB0
aGlzLmNvbXBvdW5kTmFtZVswXSkKLQkJCQkJJiYgIUNoYXJPcGVyYXRpb24uZXF1YWxzKFR5cGVD
b25zdGFudHMuSkFWQVgsIHRoaXMuY29tcG91bmROYW1lWzBdKSkKKwkJCWlmICghQ2hhck9wZXJh
dGlvbi5lcXVhbHMoVHlwZUNvbnN0YW50cy5KQVZBLCB0aGlzLmNvbXBvdW5kTmFtZVswXSkpCiAJ
CQkJcmV0dXJuOwogCQkJCiAJCQljaGFyW10gcGFja2FnZU5hbWUgPSB0aGlzLmNvbXBvdW5kTmFt
ZVsxXTsKQEAgLTM4OSwxOSArMzg4LDYgQEAKIAkJCWNoYXJbXSB0eXBlTmFtZSA9IHRoaXMuY29t
cG91bmROYW1lWzJdOwogCQkJaWYgKHR5cGVOYW1lLmxlbmd0aCA9PSAwKSByZXR1cm47IC8vIGp1
c3QgdG8gYmUgc2FmZQogCQkJLy8gcmVtYWluaW5nIHR5cGVzIE1VU1QgYmUgaW4gamF2YS4qLioK
LQkJCWlmIChDaGFyT3BlcmF0aW9uLmVxdWFscyhUeXBlQ29uc3RhbnRzLkpBVkFYLCB0aGlzLmNv
bXBvdW5kTmFtZVswXSkpIHsKLQkJCQlpZiAoQ2hhck9wZXJhdGlvbi5lcXVhbHMoVHlwZUNvbnN0
YW50cy5BTk5PVEFUSU9OLCB0aGlzLmNvbXBvdW5kTmFtZVsxXSkpIHsKLQkJCQkJc3dpdGNoICh0
eXBlTmFtZVswXSkgewotCQkJCQkJY2FzZSAnUCcgOgotCQkJCQkJCWlmIChDaGFyT3BlcmF0aW9u
LmVxdWFscyh0eXBlTmFtZSwgVHlwZUNvbnN0YW50cy5KQVZBWF9BTk5PVEFUSU9OX1BPU1RDT05T
VFJVQ1RbMl0pKQotCQkJCQkJCQl0aGlzLmlkID0gVHlwZUlkcy5UX0phdmF4QW5ub3RhdGlvblBv
c3RDb25zdHJ1Y3Q7Ci0JCQkJCQkJaWYgKENoYXJPcGVyYXRpb24uZXF1YWxzKHR5cGVOYW1lLCBU
eXBlQ29uc3RhbnRzLkpBVkFYX0FOTk9UQVRJT05fUFJFREVTVFJPWVsyXSkpCi0JCQkJCQkJCXRo
aXMuaWQgPSBUeXBlSWRzLlRfSmF2YXhBbm5vdGF0aW9uUHJlRGVzdHJveTsKLQkJCQkJCQlyZXR1
cm47Ci0JCQkJCX0KLQkJCQl9Ci0JCQkJcmV0dXJuOwotCQkJfQogCQkJaWYgKCFDaGFyT3BlcmF0
aW9uLmVxdWFscyhUeXBlQ29uc3RhbnRzLkxBTkcsIHRoaXMuY29tcG91bmROYW1lWzFdKSkgewog
CQkJCXN3aXRjaCAocGFja2FnZU5hbWVbMF0pIHsKIAkJCQkJY2FzZSAnaScgOgpkaWZmIC0tZ2l0
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2xvb2t1cC9UYWdCaXRzLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1RhZ0JpdHMuamF2
YQppbmRleCA5YmE2ZGEwLi4yMWIxYzExIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1RhZ0Jp
dHMuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1RhZ0JpdHMuamF2YQpAQCAtMSw1ICsxLDUgQEAK
IC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTEgSUJN
IENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTIgSUJN
IENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHBy
b2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFi
bGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAq
IHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0
CkBAIC0xMjksMTAgKzEyOSw2IEBACiAJbG9uZyBBbm5vdGF0aW9uU2FmZVZhcmFyZ3MgPSBBU1RO
b2RlLkJpdDUyTDsKIAkvKiogQHNpbmNlIDMuNyAtIGphdmEgNyBNZXRob2RIYW5kbGUuaW52b2tl
RXhhY3QoLi4pL2ludm9rZUdlbmVyaWMoLi4pKi8KIAlsb25nIEFubm90YXRpb25Qb2x5bW9ycGhp
Y1NpZ25hdHVyZSA9IEFTVE5vZGUuQml0NTNMOwotCS8qKiBAc2luY2UgMy44ICovCi0JbG9uZyBB
bm5vdGF0aW9uUHJlRGVzdHJveSA9IEFTVE5vZGUuQml0NTRMOwotCS8qKiBAc2luY2UgMy44ICov
Ci0JbG9uZyBBbm5vdGF0aW9uUG9zdENvbnN0cnVjdCA9IEFTVE5vZGUuQml0NTVMOwogCS8qKiBA
c2luY2UgMy44IG51bGwgYW5ub3RhdGlvbiBmb3IgTWV0aG9kQmluZGluZyBvciBMb2NhbFZhcmlh
YmxlQmluZGluZyAoYXJndW1lbnQpOiAqLwogCWxvbmcgQW5ub3RhdGlvbk51bGxhYmxlID0gQVNU
Tm9kZS5CaXQ1Nkw7CiAJLyoqIEBzaW5jZSAzLjggbnVsbCBhbm5vdGF0aW9uIGZvciBNZXRob2RC
aW5kaW5nIG9yIExvY2FsVmFyaWFibGVCaW5kaW5nIChhcmd1bWVudCk6ICovCkBAIC0xNTIsOCAr
MTQ4LDYgQEAKIAkJCQl8IEFubm90YXRpb25TdXBwcmVzc1dhcm5pbmdzCiAJCQkJfCBBbm5vdGF0
aW9uU2FmZVZhcmFyZ3MKIAkJCQl8IEFubm90YXRpb25Qb2x5bW9ycGhpY1NpZ25hdHVyZQotCQkJ
CXwgQW5ub3RhdGlvblBvc3RDb25zdHJ1Y3QKLQkJCQl8IEFubm90YXRpb25QcmVEZXN0cm95CiAJ
CQkJfCBBbm5vdGF0aW9uTnVsbGFibGUKIAkJCQl8IEFubm90YXRpb25Ob25OdWxsCiAJCQkJfCBB
bm5vdGF0aW9uTm9uTnVsbEJ5RGVmYXVsdApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9UeXBl
Q29uc3RhbnRzLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1R5cGVDb25zdGFudHMuamF2YQppbmRleCAw
YmJlZjQ3Li43MDk4ZDM3IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1R5cGVDb25zdGFudHMu
amF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1R5cGVDb25zdGFudHMuamF2YQpAQCAtMSw1ICsxLDUg
QEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTEg
SUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTIg
SUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlz
IHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFp
bGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAK
ICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxl
IGF0CkBAIC0xNzcsMTggKzE3Nyw2IEBACiAJY2hhcltdIFNZTlRIRVRJQ19BQ0NFU1NfTUVUSE9E
X1BSRUZJWCA9ICAiYWNjZXNzJCIudG9DaGFyQXJyYXkoKTsgLy8kTk9OLU5MUy0xJAogCWNoYXJb
XSBTWU5USEVUSUNfRU5VTV9DT05TVEFOVF9JTklUSUFMSVpBVElPTl9NRVRIT0RfUFJFRklYID0g
ICIgZW51bSBjb25zdGFudCBpbml0aWFsaXphdGlvbiQiLnRvQ2hhckFycmF5KCk7IC8vJE5PTi1O
TFMtMSQKIAljaGFyW10gU1lOVEhFVElDX1NUQVRJQ19GQUNUT1JZID0gICI8ZmFjdG9yeT4iLnRv
Q2hhckFycmF5KCk7IC8vJE5PTi1OTFMtMSQKLQljaGFyW11bXSBKQVZBWF9BTk5PVEFUSU9OX1BP
U1RDT05TVFJVQ1QgPQotCQkJbmV3IGNoYXJbXVtdIHsKLQkJCQlKQVZBWCwKLQkJCQlBTk5PVEFU
SU9OLAotCQkJCSJQb3N0Q29uc3RydWN0Ii50b0NoYXJBcnJheSgpIC8vJE5PTi1OTFMtMSQKLQkJ
CX07Ci0JY2hhcltdW10gSkFWQVhfQU5OT1RBVElPTl9QUkVERVNUUk9ZID0KLQkJCW5ldyBjaGFy
W11bXSB7Ci0JCQkJSkFWQVgsCi0JCQkJQU5OT1RBVElPTiwKLQkJCQkiUHJlRGVzdHJveSIudG9D
aGFyQXJyYXkoKSAvLyROT04tTkxTLTEkCi0JCQl9OwogCiAJLy8gc3ludGhldGljIHBhY2thZ2Ut
aW5mbyBuYW1lCiAJcHVibGljIHN0YXRpYyBmaW5hbCBjaGFyW10gUEFDS0FHRV9JTkZPX05BTUUg
PSAicGFja2FnZS1pbmZvIi50b0NoYXJBcnJheSgpOyAvLyROT04tTkxTLTEkCmRpZmYgLS1naXQg
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvbG9va3VwL1R5cGVJZHMuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvVHlwZUlkcy5qYXZh
CmluZGV4IDdmZmY0MzQuLjUxNTZhNDQgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvVHlwZUlk
cy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvVHlwZUlkcy5qYXZhCkBAIC0xLDUgKzEsNSBAQAog
LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMSBJQk0g
Q29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMiBJQk0g
Q29ycG9yYXRpb24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJv
Z3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJs
ZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICog
d2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQK
QEAgLTEwMCwxMSArMTAwLDYgQEAKIAogCS8vIGphdmEgNyBqYXZhLmxhbmcuQXV0b0Nsb3NlYWJs
ZQogCWZpbmFsIGludCBUX0phdmFMYW5nQXV0b0Nsb3NlYWJsZSA9IDYyOwotCi0JLy8gbmV3IGlu
IDMuOAotCWZpbmFsIGludCBUX0phdmF4QW5ub3RhdGlvblBvc3RDb25zdHJ1Y3QgPSA2MzsKLQot
CWZpbmFsIGludCBUX0phdmF4QW5ub3RhdGlvblByZURlc3Ryb3kgPSA2NDsKIAkKIAkvLyBuZXcg
aW4gMy44IGZvciBudWxsIGFubm90YXRpb25zOgogCWZpbmFsIGludCBUX0NvbmZpZ3VyZWRBbm5v
dGF0aW9uTnVsbGFibGUgPSA2NTsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL1Byb2JsZW1S
ZXBvcnRlci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxlbVJlcG9ydGVyLmphdmEKaW5kZXgg
OWI4MzkzMy4uMmU1MDc3NyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxlbVJlcG9y
dGVyLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxlbVJlcG9ydGVyLmphdmEKQEAgLTEs
NSArMSw1IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDAw
LCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDAw
LCAyMDEyIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZl
ZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1h
ZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5z
ZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2
YWlsYWJsZSBhdApAQCAtNzU5Miw3ICs3NTkyLDkgQEAKIAogCWludCBzZXZlcml0eSA9IGNvbXB1
dGVTZXZlcml0eShJUHJvYmxlbS5VbnVzZWRQcml2YXRlQ29uc3RydWN0b3IpOwogCWlmIChzZXZl
cml0eSA9PSBQcm9ibGVtU2V2ZXJpdGllcy5JZ25vcmUpIHJldHVybjsKLQorCQorCWlmIChleGNs
dWRlRHVlVG9Bbm5vdGF0aW9uKGNvbnN0cnVjdG9yRGVjbC5hbm5vdGF0aW9ucykpIHJldHVybjsK
KwkKIAlNZXRob2RCaW5kaW5nIGNvbnN0cnVjdG9yID0gY29uc3RydWN0b3JEZWNsLmJpbmRpbmc7
CiAJdGhpcy5oYW5kbGUoCiAJCQlJUHJvYmxlbS5VbnVzZWRQcml2YXRlQ29uc3RydWN0b3IsCkBA
IC03NjM4LDYgKzc2NDAsNyBAQAogCQkJfQogCQl9CiAJfQorCWlmIChleGNsdWRlRHVlVG9Bbm5v
dGF0aW9uKGZpZWxkRGVjbC5hbm5vdGF0aW9ucykpIHJldHVybjsKIAl0aGlzLmhhbmRsZSgKIAkJ
CUlQcm9ibGVtLlVudXNlZFByaXZhdGVGaWVsZCwKIAkJbmV3IFN0cmluZ1tdIHsKQEAgLTc2OTEs
MTAgKzc2OTQsOCBAQAogCQkJJiYgQ2hhck9wZXJhdGlvbi5lcXVhbHMobWV0aG9kLnNlbGVjdG9y
LCBUeXBlQ29uc3RhbnRzLldSSVRFUkVQTEFDRSkpIHsKIAkJcmV0dXJuOwogCX0KLQlpZiAoKG1l
dGhvZC50YWdCaXRzICYgKFRhZ0JpdHMuQW5ub3RhdGlvblBvc3RDb25zdHJ1Y3QgfCBUYWdCaXRz
LkFubm90YXRpb25QcmVEZXN0cm95KSkgIT0gMCkgewotCQkvLyBQb3N0Q29uc3RydWN0IGFuZCBQ
cmVEZXN0cm95IG1ldGhvZCBhcmUgaWdub3JlZAotCQlyZXR1cm47Ci0JfQorCWlmIChleGNsdWRl
RHVlVG9Bbm5vdGF0aW9uKG1ldGhvZERlY2wuYW5ub3RhdGlvbnMpKSByZXR1cm47CisJCiAJdGhp
cy5oYW5kbGUoCiAJCQlJUHJvYmxlbS5VbnVzZWRQcml2YXRlTWV0aG9kLAogCQluZXcgU3RyaW5n
W10gewpAQCAtNzcxMSwxMCArNzcxMiw0MyBAQAogCQltZXRob2REZWNsLnNvdXJjZVN0YXJ0LAog
CQltZXRob2REZWNsLnNvdXJjZUVuZCk7CiB9CisKKy8qKgorICogUmV0dXJucyB0cnVlIGlmIGEg
cHJpdmF0ZSBtZW1iZXIgc2hvdWxkIG5vdCBiZSB3YXJuZWQgYXMgdW51c2VkIGlmCisgKiBhbm5v
dGF0ZWQgd2l0aCBhIG5vbi1zdGFuZGFyZCBhbm5vdGF0aW9uCisgKiBAc2VlIGh0dHBzOi8vYnVn
cy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNjU0MzcKKyAqLworcHJpdmF0ZSBi
b29sZWFuIGV4Y2x1ZGVEdWVUb0Fubm90YXRpb24oQW5ub3RhdGlvbltdIGFubm90YXRpb25zKSB7
CisJaW50IGFubm90YXRpb25zTGVuID0gMDsKKwlpZiAoYW5ub3RhdGlvbnMgIT0gbnVsbCkgewor
CQlhbm5vdGF0aW9uc0xlbiA9IGFubm90YXRpb25zLmxlbmd0aDsKKwl9IGVsc2UgeworCQlyZXR1
cm4gZmFsc2U7CisJfQorCWlmIChhbm5vdGF0aW9uc0xlbiA9PSAwKSByZXR1cm4gZmFsc2U7CisJ
Zm9yIChpbnQgaSA9IDA7IGkgPCBhbm5vdGF0aW9uc0xlbjsgaSsrKSB7CisJCSBUeXBlQmluZGlu
ZyByZXNvbHZlZFR5cGUgPSBhbm5vdGF0aW9uc1tpXS5yZXNvbHZlZFR5cGU7CisJICAgICBpZiAo
cmVzb2x2ZWRUeXBlICE9IG51bGwpIHsKKwkJCXN3aXRjaCAocmVzb2x2ZWRUeXBlLmlkKSB7CisJ
CQkJY2FzZSBUeXBlSWRzLlRfSmF2YUxhbmdTdXBwcmVzc1dhcm5pbmdzOgorCQkJCWNhc2UgVHlw
ZUlkcy5UX0phdmFMYW5nRGVwcmVjYXRlZDoKKwkJCQljYXNlIFR5cGVJZHMuVF9KYXZhTGFuZ1Nh
ZmVWYXJhcmdzOgorCQkJCWNhc2UgVHlwZUlkcy5UX0NvbmZpZ3VyZWRBbm5vdGF0aW9uTm9uTnVs
bDoKKwkJCQljYXNlIFR5cGVJZHMuVF9Db25maWd1cmVkQW5ub3RhdGlvbk51bGxhYmxlOgorCQkJ
CWNhc2UgVHlwZUlkcy5UX0NvbmZpZ3VyZWRBbm5vdGF0aW9uTm9uTnVsbEJ5RGVmYXVsdDoKKwkJ
CQkJYnJlYWs7CisJCQkJZGVmYXVsdDoKKwkJCQkJLy8gbm9uLXN0YW5kYXJkIGFubm90YXRpb24g
Zm91bmQsIGRvbid0IHdhcm4KKwkJCQkJcmV0dXJuIHRydWU7CisJCQl9CisJCX0KKwl9CisJcmV0
dXJuIGZhbHNlOworfQogcHVibGljIHZvaWQgdW51c2VkUHJpdmF0ZVR5cGUoVHlwZURlY2xhcmF0
aW9uIHR5cGVEZWNsKSB7CiAJaW50IHNldmVyaXR5ID0gY29tcHV0ZVNldmVyaXR5KElQcm9ibGVt
LlVudXNlZFByaXZhdGVUeXBlKTsKIAlpZiAoc2V2ZXJpdHkgPT0gUHJvYmxlbVNldmVyaXRpZXMu
SWdub3JlKSByZXR1cm47Ci0KKwlpZiAoZXhjbHVkZUR1ZVRvQW5ub3RhdGlvbih0eXBlRGVjbC5h
bm5vdGF0aW9ucykpIHJldHVybjsKIAlSZWZlcmVuY2VCaW5kaW5nIHR5cGUgPSB0eXBlRGVjbC5i
aW5kaW5nOwogCXRoaXMuaGFuZGxlKAogCQkJSVByb2JsZW0uVW51c2VkUHJpdmF0ZVR5cGUsCmRp
ZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29yZS9CaW5hcnlNZW1iZXIuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVs
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0JpbmFyeU1lbWJlci5qYXZhCmluZGV4IDk0
ZTZkYjEuLjNmNmQ3NDIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0JpbmFyeU1lbWJlci5qYXZhCisrKyBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0JpbmFy
eU1lbWJlci5qYXZhCkBAIC0xLDUgKzEsNSBAQAogLyoqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAq
IENvcHlyaWdodCAoYykgMjAwMCwgMjAxMSBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAq
IENvcHlyaWdodCAoYykgMjAwMCwgMjAxMiBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAq
IEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBt
YXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVj
bGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0
cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKQEAgLTg2LDEyICs4Niw2IEBACiAJfQogCWlm
ICgodGFnQml0cyAmIFRhZ0JpdHMuQW5ub3RhdGlvblNhZmVWYXJhcmdzKSAhPSAwKSB7CiAJCWFu
bm90YXRpb25zLmFkZChnZXRBbm5vdGF0aW9uKFR5cGVDb25zdGFudHMuSkFWQV9MQU5HX1NBRkVW
QVJBUkdTKSk7Ci0JfQotCWlmICgodGFnQml0cyAmIFRhZ0JpdHMuQW5ub3RhdGlvblBvc3RDb25z
dHJ1Y3QpICE9IDApIHsKLQkJYW5ub3RhdGlvbnMuYWRkKGdldEFubm90YXRpb24oVHlwZUNvbnN0
YW50cy5KQVZBWF9BTk5PVEFUSU9OX1BPU1RDT05TVFJVQ1QpKTsKLQl9Ci0JaWYgKCh0YWdCaXRz
ICYgVGFnQml0cy5Bbm5vdGF0aW9uUHJlRGVzdHJveSkgIT0gMCkgewotCQlhbm5vdGF0aW9ucy5h
ZGQoZ2V0QW5ub3RhdGlvbihUeXBlQ29uc3RhbnRzLkpBVkFYX0FOTk9UQVRJT05fUFJFREVTVFJP
WSkpOwogCX0KIAkvLyBub3RlIHRoYXQgSkFWQV9MQU5HX1NVUFBSRVNTV0FSTklOR1MgYW5kIEpB
VkFfTEFOR19PVkVSUklERSBjYW5ub3QgYXBwZWFyIGluIGJpbmFyaWVzCiAJcmV0dXJuIChJQW5u
b3RhdGlvbltdKSBhbm5vdGF0aW9ucy50b0FycmF5KG5ldyBJQW5ub3RhdGlvblthbm5vdGF0aW9u
cy5zaXplKCldKTsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0NsYXNzRmlsZUluZm8uamF2YSBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0NsYXNzRmlsZUlu
Zm8uamF2YQppbmRleCBiY2Y3Y2ViLi5lMTcxNGEwIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9DbGFzc0ZpbGVJbmZv
LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvcmUvQ2xhc3NGaWxlSW5mby5qYXZhCkBAIC0xLDUgKzEsNSBAQAogLyoqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMSBJQk0gQ29ycG9yYXRp
b24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMiBJQk0gQ29ycG9yYXRp
b24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQg
dGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0
aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNj
b21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKQEAgLTEwNywx
MiArMTA3LDYgQEAKIAl9CiAJaWYgKCh0YWdCaXRzICYgVGFnQml0cy5Bbm5vdGF0aW9uU2FmZVZh
cmFyZ3MpICE9IDApIHsKIAkJZ2VuZXJhdGVTdGFuZGFyZEFubm90YXRpb24oamF2YUVsZW1lbnQs
IFR5cGVDb25zdGFudHMuSkFWQV9MQU5HX1NBRkVWQVJBUkdTLCBBbm5vdGF0aW9uLk5PX01FTUJF
Ul9WQUxVRV9QQUlSUywgbmV3RWxlbWVudHMpOwotCX0KLQlpZiAoKHRhZ0JpdHMgJiBUYWdCaXRz
LkFubm90YXRpb25Qb3N0Q29uc3RydWN0KSAhPSAwKSB7Ci0JCWdlbmVyYXRlU3RhbmRhcmRBbm5v
dGF0aW9uKGphdmFFbGVtZW50LCBUeXBlQ29uc3RhbnRzLkpBVkFYX0FOTk9UQVRJT05fUE9TVENP
TlNUUlVDVCwgQW5ub3RhdGlvbi5OT19NRU1CRVJfVkFMVUVfUEFJUlMsIG5ld0VsZW1lbnRzKTsK
LQl9Ci0JaWYgKCh0YWdCaXRzICYgVGFnQml0cy5Bbm5vdGF0aW9uUHJlRGVzdHJveSkgIT0gMCkg
ewotCQlnZW5lcmF0ZVN0YW5kYXJkQW5ub3RhdGlvbihqYXZhRWxlbWVudCwgVHlwZUNvbnN0YW50
cy5KQVZBWF9BTk5PVEFUSU9OX1BSRURFU1RST1ksIEFubm90YXRpb24uTk9fTUVNQkVSX1ZBTFVF
X1BBSVJTLCBuZXdFbGVtZW50cyk7CiAJfQogCS8vIG5vdGUgdGhhdCBKQVZBX0xBTkdfU1VQUFJF
U1NXQVJOSU5HUyBhbmQgSkFWQV9MQU5HX09WRVJSSURFIGNhbm5vdCBhcHBlYXIgaW4gYmluYXJp
ZXMKIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gvaW5kZXhpbmcvQmluYXJ5SW5kZXhlci5qYXZhIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3Jl
L3NlYXJjaC9pbmRleGluZy9CaW5hcnlJbmRleGVyLmphdmEKaW5kZXggYzI0MmZiNS4uZjc1MmMz
NCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9pbmRleGluZy9CaW5hcnlJbmRleGVyLmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3Jl
L3NlYXJjaC9pbmRleGluZy9CaW5hcnlJbmRleGVyLmphdmEKQEAgLTEsNSArMSw1IEBACiAvKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDExIElCTSBDb3Jw
b3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEyIElCTSBDb3Jw
b3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFt
IGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVu
ZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGlj
aCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdApAQCAt
NDYsNiArNDYsOSBAQAogCQlzdXBlcihkb2N1bWVudCk7CiAJfQogCXByaXZhdGUgdm9pZCBhZGRC
aW5hcnlTdGFuZGFyZEFubm90YXRpb25zKGxvbmcgYW5ub3RhdGlvblRhZ0JpdHMpIHsKKwkJaWYg
KChhbm5vdGF0aW9uVGFnQml0cyAmIFRhZ0JpdHMuQWxsU3RhbmRhcmRBbm5vdGF0aW9uc01hc2sp
ID09IDApIHsKKwkJCXJldHVybjsKKwkJfQogCQlpZiAoKGFubm90YXRpb25UYWdCaXRzICYgVGFn
Qml0cy5Bbm5vdGF0aW9uVGFyZ2V0TUFTSykgIT0gMCkgewogCQkJY2hhcltdW10gY29tcG91bmRO
YW1lID0gVHlwZUNvbnN0YW50cy5KQVZBX0xBTkdfQU5OT1RBVElPTl9UQVJHRVQ7CiAJCQlhZGRB
bm5vdGF0aW9uVHlwZVJlZmVyZW5jZShjb21wb3VuZE5hbWVbY29tcG91bmROYW1lLmxlbmd0aC0x
XSk7CkBAIC04MywxNCArODYsNiBAQAogCQlpZiAoKGFubm90YXRpb25UYWdCaXRzICYgVGFnQml0
cy5Bbm5vdGF0aW9uUG9seW1vcnBoaWNTaWduYXR1cmUpICE9IDApIHsKIAkJCWNoYXJbXVtdIGNv
bXBvdW5kTmFtZSA9CiAJCQkJCVR5cGVDb25zdGFudHMuSkFWQV9MQU5HX0lOVk9LRV9NRVRIT0RI
QU5ETEVfJF9QT0xZTU9SUEhJQ1NJR05BVFVSRTsKLQkJCWFkZEFubm90YXRpb25UeXBlUmVmZXJl
bmNlKGNvbXBvdW5kTmFtZVtjb21wb3VuZE5hbWUubGVuZ3RoLTFdKTsKLQkJfQotCQlpZiAoKGFu
bm90YXRpb25UYWdCaXRzICYgVGFnQml0cy5Bbm5vdGF0aW9uUG9zdENvbnN0cnVjdCkgIT0gMCkg
ewotCQkJY2hhcltdW10gY29tcG91bmROYW1lID0gVHlwZUNvbnN0YW50cy5KQVZBWF9BTk5PVEFU
SU9OX1BPU1RDT05TVFJVQ1Q7Ci0JCQlhZGRBbm5vdGF0aW9uVHlwZVJlZmVyZW5jZShjb21wb3Vu
ZE5hbWVbY29tcG91bmROYW1lLmxlbmd0aC0xXSk7Ci0JCX0KLQkJaWYgKChhbm5vdGF0aW9uVGFn
Qml0cyAmIFRhZ0JpdHMuQW5ub3RhdGlvblByZURlc3Ryb3kpICE9IDApIHsKLQkJCWNoYXJbXVtd
IGNvbXBvdW5kTmFtZSA9IFR5cGVDb25zdGFudHMuSkFWQVhfQU5OT1RBVElPTl9QUkVERVNUUk9Z
OwogCQkJYWRkQW5ub3RhdGlvblR5cGVSZWZlcmVuY2UoY29tcG91bmROYW1lW2NvbXBvdW5kTmFt
ZS5sZW5ndGgtMV0pOwogCQl9CiAJfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
c2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9tYXRjaGluZy9DbGFz
c0ZpbGVNYXRjaExvY2F0b3IuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gvbWF0Y2hpbmcvQ2xhc3NGaWxlTWF0Y2hM
b2NhdG9yLmphdmEKaW5kZXggMzc2MDhhYS4uMWM4NjcyMSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9t
YXRjaGluZy9DbGFzc0ZpbGVNYXRjaExvY2F0b3IuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNoL21hdGNoaW5n
L0NsYXNzRmlsZU1hdGNoTG9jYXRvci5qYXZhCkBAIC0xLDUgKzEsNSBAQAogLyoqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMSBJQk0gQ29ycG9yYXRpb24g
YW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMiBJQk0gQ29ycG9yYXRpb24g
YW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhl
IGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUg
dGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21w
YW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKQEAgLTkwLDYgKzkw
LDkgQEAKIAlyZXR1cm4gdHJ1ZTsKIH0KIHByaXZhdGUgYm9vbGVhbiBjaGVja1N0YW5kYXJkQW5u
b3RhdGlvbnMobG9uZyBhbm5vdGF0aW9uVGFnQml0cywgVHlwZVJlZmVyZW5jZVBhdHRlcm4gcGF0
dGVybikgeworCWlmICgoYW5ub3RhdGlvblRhZ0JpdHMgJiBUYWdCaXRzLkFsbFN0YW5kYXJkQW5u
b3RhdGlvbnNNYXNrKSA9PSAwKSB7CisJCXJldHVybiBmYWxzZTsKKwl9CiAJaWYgKChhbm5vdGF0
aW9uVGFnQml0cyAmIFRhZ0JpdHMuQW5ub3RhdGlvblRhcmdldE1BU0spICE9IDApIHsKIAkJY2hh
cltdW10gY29tcG91bmROYW1lID0gVHlwZUNvbnN0YW50cy5KQVZBX0xBTkdfQU5OT1RBVElPTl9U
QVJHRVQ7CiAJCWlmIChjaGVja0Fubm90YXRpb25UeXBlUmVmZXJlbmNlKENoYXJPcGVyYXRpb24u
Y29uY2F0V2l0aChjb21wb3VuZE5hbWUsICcuJyksIHBhdHRlcm4pIHx8CkBAIC0xNDIsMTggKzE0
NSw2IEBACiAJfQogCWlmICgoYW5ub3RhdGlvblRhZ0JpdHMgJiBUYWdCaXRzLkFubm90YXRpb25Q
b2x5bW9ycGhpY1NpZ25hdHVyZSkgIT0gMCkgewogCQljaGFyW11bXSBjb21wb3VuZE5hbWUgPSBU
eXBlQ29uc3RhbnRzLkpBVkFfTEFOR19JTlZPS0VfTUVUSE9ESEFORExFXyRfUE9MWU1PUlBISUNT
SUdOQVRVUkU7Ci0JCWlmIChjaGVja0Fubm90YXRpb25UeXBlUmVmZXJlbmNlKENoYXJPcGVyYXRp
b24uY29uY2F0V2l0aChjb21wb3VuZE5hbWUsICcuJyksIHBhdHRlcm4pKSB7Ci0JCQlyZXR1cm4g
dHJ1ZTsKLQkJfQotCX0KLQlpZiAoKGFubm90YXRpb25UYWdCaXRzICYgVGFnQml0cy5Bbm5vdGF0
aW9uUG9zdENvbnN0cnVjdCkgIT0gMCkgewotCQljaGFyW11bXSBjb21wb3VuZE5hbWUgPSBUeXBl
Q29uc3RhbnRzLkpBVkFYX0FOTk9UQVRJT05fUE9TVENPTlNUUlVDVDsKLQkJaWYgKGNoZWNrQW5u
b3RhdGlvblR5cGVSZWZlcmVuY2UoQ2hhck9wZXJhdGlvbi5jb25jYXRXaXRoKGNvbXBvdW5kTmFt
ZSwgJy4nKSwgcGF0dGVybikpIHsKLQkJCXJldHVybiB0cnVlOwotCQl9Ci0JfQotCWlmICgoYW5u
b3RhdGlvblRhZ0JpdHMgJiBUYWdCaXRzLkFubm90YXRpb25QcmVEZXN0cm95KSAhPSAwKSB7Ci0J
CWNoYXJbXVtdIGNvbXBvdW5kTmFtZSA9IFR5cGVDb25zdGFudHMuSkFWQVhfQU5OT1RBVElPTl9Q
UkVERVNUUk9ZOwogCQlpZiAoY2hlY2tBbm5vdGF0aW9uVHlwZVJlZmVyZW5jZShDaGFyT3BlcmF0
aW9uLmNvbmNhdFdpdGgoY29tcG91bmROYW1lLCAnLicpLCBwYXR0ZXJuKSkgewogCQkJcmV0dXJu
IHRydWU7CiAJCX0=
</data>

          </attachment>
      

    </bug>

</bugzilla>