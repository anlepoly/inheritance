<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>401850</bug_id>
          
          <creation_ts>2013-02-26 23:30:00 -0500</creation_ts>
          <short_desc>[1.8][compiler] Compiler fails to type poly allocation expressions in method invocation contexts</short_desc>
          <delta_ts>2014-11-02 11:32:58 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>DUPLICATE</resolution>
          <dup_id>424167</dup_id>
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>424053</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>jarthana</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2222385</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-26 23:30:15 -0500</bug_when>
    <thetext></thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2222386</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-26 23:31:48 -0500</bug_when>
    <thetext>BETA_JAVA8:

The following is illegal in Java7, but is legal in Java 8 due to
poly expression typing rules in Java 8.

// ---
public class X&lt;T&gt; {
	
	void foo(X&lt;String&gt; s) {}
	
	public static void main(String[] args) {
		new X&lt;String&gt;().foo(new X&lt;&gt;());
	}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2331607</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-11-18 23:43:22 -0500</bug_when>
    <thetext>I pushed the changes for overload resolution in the presence of poly allocation
expressions (&lt;&gt;, not generic constructors) via: 
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=f74beb57e62e872a608b1d99069f6ffa51720699

QualifiedAllocationExpression is not hooked up into the overload resolution
scheme yet. Will work on it now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2331620</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-11-19 02:16:56 -0500</bug_when>
    <thetext>This piece of code is failing with an ambiguos call error with ECJ:

// --
import java.util.List;
import java.util.ArrayList;
public class X&lt;T&gt; {
   X(T t) {}
   X(String s) {}
   int m(X&lt;String&gt; xs) { return 0; }
   int i = m(new X&lt;&gt;(&quot;&quot;));
}

while 8b115 compiles it fine. This could be a bug in javac since if I make
the inferred diamond parameters explicit, both compilers agree the call is
ambiguous: 

import java.util.List;
import java.util.ArrayList;
public class X&lt;T&gt; {
   X(T t) {}
   X(String s) {}
   int m(X&lt;String&gt; xs) { return 0; }
   int i = m(new X&lt;&gt;(&quot;&quot;));
}


I have added a note to GenericsRegressionTest_1_7.test0026() from
which this was extracted.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2331621</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-11-19 02:18:20 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #3)

&gt; while 8b115 compiles it fine. This could be a bug in javac since if I make
&gt; the inferred diamond parameters explicit, both compilers agree the call is
&gt; ambiguous: 

Copy pasted the same code and forgot to make the &lt;&gt; explicit: Here is the
right snippet:

import java.util.List;
import java.util.ArrayList;
public class X&lt;T&gt; {
   X(T t) {}
   X(String s) {}
   int m(X&lt;String&gt; xs) { return 0; }
   int i = m(new X&lt;String&gt;(&quot;&quot;));
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2332819</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-11-21 06:08:22 -0500</bug_when>
    <thetext>This implementation will not work as is and will need adaptation when
the allocation expression has generic methods as arguments.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2341936</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-14 14:56:17 -0500</bug_when>
    <thetext>Let me know if this is still valid with type inference pushed to BETA_JAVA8 and if this reveals any issues with the inference.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2343605</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-12-18 21:23:05 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #6)
&gt; Let me know if this is still valid with type inference pushed to BETA_JAVA8
&gt; and if this reveals any issues with the inference.

The issue reported in comment#3 and comment#4 still occurs, Note comment#3 second
snippet is incorrect and is corrected in comment#4.

Could you take a look whether the spec would require inferred call to succeed
resolution while the explicit call would be tagged ambiguous (javac behavior)
or whether both cases should be ambiguous (ECJ behavior)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2343897</commentid>
    <comment_count>8</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-19 10:34:01 -0500</bug_when>
    <thetext>Both methods are applicable, so the only thing that could prevent ambiguity is if &quot;More Specific Method Inference&quot; gives priority to one over other other, right?

-&gt; Marking dependency on bug 423505.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2344562</commentid>
    <comment_count>9</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-22 17:33:02 -0500</bug_when>
    <thetext>With latest in bug 424167 ecj accepts the first example in comment 3 while still reporting ambiguity for the example in comment 4.

*** This bug has been marked as a duplicate of bug 424167 ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2344755</commentid>
    <comment_count>10</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-23 18:19:58 -0500</bug_when>
    <thetext>I&apos;ve added corresponding tests to GenericsRegressionTest_1_8 to witness that the fix for bug 424167 indeed resolves this issue, too.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2348561</commentid>
    <comment_count>11</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-11 17:18:01 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #9)
&gt; With latest in bug 424167 ecj accepts the first example in comment 3 while
&gt; still reporting ambiguity for the example in comment 4.

This has again changed with the resolution of bug 424205: we now report the ambiguity in both cases. Per face value this looks correct, to be revisited when finalizing More Specific Method Inference.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2475302</commentid>
    <comment_count>12</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-02 11:02:02 -0500</bug_when>
    <thetext>Cumulative fix and tests for bug 449619 + bug 448799 + bug 401850
are here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=2a90eeb9372f2a1a1f5e7c24d7c19363b361caf2</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2475304</commentid>
    <comment_count>13</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-11-02 11:14:56 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #12)
&gt; Cumulative fix and tests for bug 449619 + bug 448799 + bug 401850
&gt; are here:
&gt; http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
&gt; ?id=2a90eeb9372f2a1a1f5e7c24d7c19363b361caf2

Given this was marked resolved already for BETA J8, can you add a word on what has been fixed now?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2475307</commentid>
    <comment_count>14</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-02 11:32:58 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #13)
&gt; (In reply to Srikanth Sankaran from comment #12)
&gt; &gt; Cumulative fix and tests for bug 449619 + bug 448799 + bug 401850
&gt; &gt; are here:
&gt; &gt; http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
&gt; &gt; ?id=2a90eeb9372f2a1a1f5e7c24d7c19363b361caf2
&gt; 
&gt; Given this was marked resolved already for BETA J8, can you add a word on
&gt; what has been fixed now?

My bad, I should have just added a note saying status has reverted to as of
comment#9. i.e we accept the first snippet in comment#3 while rejecting
the snippet from comment#4. Restored.

*** This bug has been marked as a duplicate of bug 424167 ***</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>