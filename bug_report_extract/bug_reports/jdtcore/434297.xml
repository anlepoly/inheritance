<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>434297</bug_id>
          
          <creation_ts>2014-05-07 05:39:00 -0400</creation_ts>
          <short_desc>[1.8] NPE in LamdaExpression.analyseCode with lamda expression nested in a conditional expression</short_desc>
          <delta_ts>2014-05-19 05:29:49 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.4 RC1</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Sasikanth Bharadwaj">saammana</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>jarthana</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="62312"
          type_id="1"
          status="+"
          setter="jarthana"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2397987</commentid>
    <comment_count>0</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-05-07 05:39:50 -0400</bug_when>
    <thetext>The following code causes the compiler to abort with an NPE. It compiles fine with javac

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class CompilerCrashesWithNPE {
  
  public void bla() {
    boolean b = Boolean.TRUE.booleanValue();
    
    List&lt;String&gt; c1 = new ArrayList&lt;&gt;();
    Collections.sort(c1, b ? null : new Bar(new ArrayList&lt;&gt;(),Comparator.nullsLast((a,e) -&gt; {return 0;})));
  }

  private static class Bar implements Comparator&lt;String&gt;{
	  public &lt;T&gt; Bar(Collection&lt;T&gt; col, Comparator&lt;T&gt; comp) {
		  
	  }
	@Override
	public int compare(String o1, String o2) {
		// TODO Auto-generated method stub
		return 0;
	}
  }
}

This is the stack trace

java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.analyseCode(LambdaExpression.java:469)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode(MessageSend.java:172)
	at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.analyseCode(AllocationExpression.java:116)
	at org.eclipse.jdt.internal.compiler.ast.ConditionalExpression.analyseCode(ConditionalExpression.java:119)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode(MessageSend.java:172)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.analyseCode(MethodDeclaration.java:124)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.internalAnalyseCode(TypeDeclaration.java:737)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode(TypeDeclaration.java:261)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.analyseCode(CompilationUnitDeclaration.java:118)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:1207)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:689)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1183)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:809)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
....</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2398001</commentid>
    <comment_count>1</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-05-07 05:56:16 -0400</bug_when>
    <thetext>Could be the same root cause as bug 433825. The same code works fine when the conditional expression is removed and the new Bar(...) is directly used. Some part of inference seems to be not carried out on branches of conditional expressions</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2400638</commentid>
    <comment_count>2</comment_count>
      <attachid>242998</attachid>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-05-13 02:41:33 -0400</bug_when>
    <thetext>Created attachment 242998
Patch with fix and test</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2400641</commentid>
    <comment_count>3</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-05-13 02:46:25 -0400</bug_when>
    <thetext>The problem is that the allocation expression does not pass the results of inference to it&apos;s arguments in checkAgainstFinalTargetType(), there by resulting in an unbound lambda. Calling checkAgainstFinalTargetType() on arguments of the allocation expression takes care of the problem. Stephan, please review. All tests pass with these changes</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2400701</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-13 04:32:45 -0400</bug_when>
    <thetext>Patch seems to go into the right direction. I will play with it later today.

Meanwhile, can you please check: I believe we should retrieve the inner targetType from this.binding.parameters. 

In that case, care must be taken to correctly apply rules for variable-arity invocations. See:
- InferenceContext18.getParameter()
- do we have information at hand, whether this invocation is a var-arity invocation? Remember that even if method.isVarargs the *invocation* could be straight if the last arg fits the array type. It&apos;s quite tedious to check this every time, so if we&apos;d have an InferenceContext18 at hand, IC18.isVarArgs() reliably answers this question.

Also, have you compared the situation of AllocationExpression with what we have in MessageSend.checkAgainstFinalTargetType() ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2400789</commentid>
    <comment_count>5</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-05-13 06:07:35 -0400</bug_when>
    <thetext>(In reply to comment #4)
&gt; Patch seems to go into the right direction. I will play with it later today.
&gt; 
&gt; Meanwhile, can you please check: I believe we should retrieve the inner
&gt; targetType from this.binding.parameters.
I will make that change and test it out.
&gt; 
&gt; In that case, care must be taken to correctly apply rules for variable-arity
&gt; invocations. See:
&gt; - InferenceContext18.getParameter()
&gt; - do we have information at hand, whether this invocation is a var-arity
&gt; invocation? Remember that even if method.isVarargs the *invocation* could be
&gt; straight if the last arg fits the array type. It&apos;s quite tedious to check this
&gt; every time, so if we&apos;d have an InferenceContext18 at hand, IC18.isVarArgs()
&gt; reliably answers this question.
&gt; 
&gt; Also, have you compared the situation of AllocationExpression with what we have
&gt; in MessageSend.checkAgainstFinalTargetType() ?
I&apos;m attaching an alternate solution I considered before arriving at the proposed one. This is based on what we have in MessageSend.checkAgainstFinalTargetType(). This solves both the problems (433825 and this one), but that looked like unnecessary replication of code (I copied this piece from ASTNode.resolvePolyExpressionArguments()). However, since this problem occurs in case of a poly expression as argument to a non-poly allocation expression, and other scenarios for allocation expressions seem to be handled by IC18.rebindInnerPolies and ASTNode.resolvePolyExpressionArguments, I went with the proposed solution</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2400791</commentid>
    <comment_count>6</comment_count>
      <attachid>243008</attachid>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-05-13 06:08:26 -0400</bug_when>
    <thetext>Created attachment 243008
An alternative solution</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2401232</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-13 16:01:39 -0400</bug_when>
    <thetext>(In reply to Sasikanth Bharadwaj from comment #5)
&gt; I&apos;m attaching an alternate solution I considered before arriving at the
&gt; proposed one. This is based on what we have in
&gt; MessageSend.checkAgainstFinalTargetType(). This solves both the problems
&gt; (433825 and this one), but that looked like unnecessary replication of code

You&apos;re right, duplicating code into ConditionalExpression isn&apos;t cool.

However, we can make the code look quite canonical if we align MessageSend.checkAgainstFinalTargetType() and AllocationExpression.checkAgainstFinalTargetType().

There&apos;s already some duplication among all implementors of Invocation, but that duplication is just a workaround for the lack of multiple inheritance in Java. I.e., in this situation I&apos;m actually happy about equal or very similar methods.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2401234</commentid>
    <comment_count>8</comment_count>
      <attachid>243055</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-13 16:05:32 -0400</bug_when>
    <thetext>Created attachment 243055
Patch by code-copy from MessageSend

Here&apos;s my proposal to the riddle.

Sasi, Jay, please let me know what you think of this solution.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2401381</commentid>
    <comment_count>9</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-05-14 04:02:21 -0400</bug_when>
    <thetext>(In reply to comment #7)
&gt; (In reply to Sasikanth Bharadwaj from comment #5)
&gt; &gt; I&apos;m attaching an alternate solution I considered before arriving at the
&gt; &gt; proposed one. This is based on what we have in
&gt; &gt; MessageSend.checkAgainstFinalTargetType(). This solves both the problems
&gt; &gt; (433825 and this one), but that looked like unnecessary replication of code
&gt; 
&gt; You&apos;re right, duplicating code into ConditionalExpression isn&apos;t cool.
&gt; 
&gt; However, we can make the code look quite canonical if we align
&gt; MessageSend.checkAgainstFinalTargetType() and
&gt; AllocationExpression.checkAgainstFinalTargetType().
&gt; 
&gt; There&apos;s already some duplication among all implementors of Invocation, but that
&gt; duplication is just a workaround for the lack of multiple inheritance in Java.
&gt; I.e., in this situation I&apos;m actually happy about equal or very similar methods.
Ok. now I get it, we complete pending inference in checkAgainstFinalTargetType() and pushing the result of inference is taken care in inferInvocationType.
I just have one question though (to gain a better understanding of the whole thing), what about expressions for which applicability inference has failed? We seem to still attempt to resolvePart3(), which could be the cause of the problem 433825, but in general, should the result from outer invocation be pushed into the arguments of this invocation in this case?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2401752</commentid>
    <comment_count>10</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-14 12:36:47 -0400</bug_when>
    <thetext>Not taking bug 433825 into consideration, this appears to be the right fix for this bug.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2401933</commentid>
    <comment_count>11</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-14 17:43:50 -0400</bug_when>
    <thetext>After briefly playing with bug 433825 I can confirm that both issues, though close neighbors, are sufficiently distinct to release this patch without also fixing the other bug. In short: this bug is about updating the arguments contained in the allocation expression, the other bug is about (not) skipping some phase of resolution for the allocation itself.

Thanks Sasi for good preparation, sorry for &quot;stealing&quot; this bug in order to get the fix into RC1.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2401934</commentid>
    <comment_count>12</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-14 17:45:32 -0400</bug_when>
    <thetext>Released for 4.4 RC1 via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=e7fead4adac4e5d682bbdf8cb7aaa3f524aab927</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2403537</commentid>
    <comment_count>13</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-19 05:29:49 -0400</bug_when>
    <thetext>Verified for 4.4 RC1 with build I20140518-2000</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>242998</attachid>
            <date>2014-05-13 02:41:00 -0400</date>
            <delta_ts>2014-05-14 17:46:23 -0400</delta_ts>
            <desc>Patch with fix and test</desc>
            <filename>Fix-and-test-for-434297.patch</filename>
            <type>text/plain</type>
            <size>2778</size>
            <attacher name="Sasikanth Bharadwaj">saammana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0xhbWJkYUV4cHJlc3Np
b25zVGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhRXhwcmVz
c2lvbnNUZXN0LmphdmEKaW5kZXggNzA3YmVlYi4uODI1YTFlZCAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rl
c3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9j
b3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEK
QEAgLTQ0MDYsNiArNDQwNiwzNCBAQAogCQkJIn0iCiAJfSk7CiB9CisvLyBodHRwczovL2J1Z3Mu
ZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDM0Mjk3IFsxLjhdIE5QRSBpbiBMYW1k
YUV4cHJlc3Npb24uYW5hbHlzZUNvZGUgd2l0aCBsYW1kYSBleHByZXNzaW9uIG5lc3RlZCBpbiBh
IGNvbmRpdGlvbmFsIGV4cHJlc3Npb24KK3B1YmxpYyB2b2lkIHRlc3Q0MzQyOTcoKSB7CisJdGhp
cy5ydW5Db25mb3JtVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJYLmphdmEiLCAKKwkJCSJp
bXBvcnQgamF2YS51dGlsLkFycmF5TGlzdDtcbiIgKyAKKwkJCSJpbXBvcnQgamF2YS51dGlsLkNv
bGxlY3Rpb247XG4iICsgCisJCQkiaW1wb3J0IGphdmEudXRpbC5Db2xsZWN0aW9ucztcbiIgKyAK
KwkJCSJpbXBvcnQgamF2YS51dGlsLkNvbXBhcmF0b3I7XG4iICsgCisJCQkiaW1wb3J0IGphdmEu
dXRpbC5MaXN0O1xuIiArIAorCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKyAKKwkJCSIgIHB1Ymxp
YyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKyAKKwkJCSIgIH1cbiIgKyAK
KwkJCSIgIHB1YmxpYyB2b2lkIGJsYSgpIHtcbiIgKyAKKwkJCSIgICAgYm9vbGVhbiBiID0gQm9v
bGVhbi5UUlVFLmJvb2xlYW5WYWx1ZSgpO1xuIiArIAorCQkJIiAgICBMaXN0PFN0cmluZz4gYzEg
PSBuZXcgQXJyYXlMaXN0PD4oKTtcbiIgKyAKKwkJCSIgICAgQ29sbGVjdGlvbnMuc29ydChjMSwg
YiA/IG51bGwgOiBuZXcgQmFyKG5ldyBBcnJheUxpc3Q8PigpLENvbXBhcmF0b3IubnVsbHNMYXN0
KChhLGUpIC0+IHtyZXR1cm4gMDt9KSkpO1xuIiArIAorCQkJIiAgfVxuIiArIAorCQkJIiAgcHJp
dmF0ZSBzdGF0aWMgY2xhc3MgQmFyIGltcGxlbWVudHMgQ29tcGFyYXRvcjxTdHJpbmc+e1xuIiAr
IAorCQkJIgkgIHB1YmxpYyA8VD4gQmFyKENvbGxlY3Rpb248VD4gY29sLCBDb21wYXJhdG9yPFQ+
IGNvbXApIHsgfVxuIiArIAorCQkJIglAT3ZlcnJpZGVcbiIgKyAKKwkJCSIJcHVibGljIGludCBj
b21wYXJlKFN0cmluZyBvMSwgU3RyaW5nIG8yKSB7XG4iICsgCisJCQkiCQlyZXR1cm4gMDtcbiIg
KyAKKwkJCSIJfVxuIiArIAorCQkJIiAgfVxuIiArIAorCQkJIn0iCisJfSk7Cit9CiBwdWJsaWMg
c3RhdGljIENsYXNzIHRlc3RDbGFzcygpIHsKIAlyZXR1cm4gTGFtYmRhRXhwcmVzc2lvbnNUZXN0
LmNsYXNzOwogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BbGxvY2F0aW9uRXhwcmVzc2lvbi5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2FzdC9BbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCmluZGV4IDA2OTBhYzcu
LmZiNTNiM2EgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2
YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYXN0L0FsbG9jYXRpb25FeHByZXNzaW9uLmphdmEKQEAgLTcyNiw3ICs3
MjYsMTcgQEAKIHB1YmxpYyBUeXBlQmluZGluZyBjaGVja0FnYWluc3RGaW5hbFRhcmdldFR5cGUo
VHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgU2NvcGUgc2NvcGUpIHsKIAlpZiAodGhpcy5zdXNwZW5k
ZWRSZXNvbHV0aW9uU3RhdGUgIT0gbnVsbCkgewogCQlyZXR1cm4gcmVzb2x2ZVBhcnQzKHRoaXMu
c3VzcGVuZGVkUmVzb2x1dGlvblN0YXRlKTsKKwl9CisJaWYgKCh0aGlzLmJpbmRpbmcgIT0gbnVs
bCkgJiYgdGhpcy5iaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkpIHsKIAkJLy8gYWxzbzogc2hvdWxk
IHRoaXMgdHJpZ2dlciBhbnkgcHJvcGFnYXRpb24gdG8gaW5uZXJzLCB0b28/CisJCUV4cHJlc3Np
b25bXSBhcmdzID0gdGhpcy5hcmd1bWVudHMoKTsKKwkJaWYgKGFyZ3MgIT0gbnVsbCkgeworCQkJ
Zm9yIChFeHByZXNzaW9uIGV4cHIgOiBhcmdzKSB7CisJCQkJaWYgKGV4cHIuaXNQb2x5RXhwcmVz
c2lvbigpKSB7CisJCQkJCWV4cHIuY2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRUeXBlKHRhcmdldFR5
cGUsIHNjb3BlKTsKKwkJCQl9CisJCQl9CisJCX0KIAl9CiAJcmV0dXJuIHN1cGVyLmNoZWNrQWdh
aW5zdEZpbmFsVGFyZ2V0VHlwZSh0YXJnZXRUeXBlLCBzY29wZSk7CiB9
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>243008</attachid>
            <date>2014-05-13 06:08:00 -0400</date>
            <delta_ts>2014-05-14 17:46:44 -0400</delta_ts>
            <desc>An alternative solution</desc>
            <filename>Combined-fix-for-434297--433825.patch</filename>
            <type>text/plain</type>
            <size>2661</size>
            <attacher name="Sasikanth Bharadwaj">saammana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvQ29uZGl0aW9uYWxFeHByZXNzaW9uLmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvYXN0L0NvbmRpdGlvbmFsRXhwcmVzc2lvbi5qYXZhDQppbmRleCBlZTMxMDg2Li42YzUyZGQ5
IDEwMDY0NA0KLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Db25kaXRpb25hbEV4cHJlc3Npb24uamF2YQ0KKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FzdC9Db25kaXRpb25hbEV4cHJlc3Npb24uamF2YQ0KQEAgLTcyNCw2ICs3MjQs
OCBAQA0KIAkJLy8gaW4gMS44IGlmIHRyZWF0ZWQgYXMgYSBwb2x5IGV4cHJlc3Npb246DQogCQlp
ZiAoaXNQb2x5RXhwcmVzc2lvbigpKSB7DQogCQkJdGFyZ2V0VHlwZSA9IHRhcmdldFR5cGUudW5j
YXB0dXJlKHRoaXMucG9seUV4cHJlc3Npb25TY29wZSk7DQorCQkJdXBkYXRlSW52b2NhdGlvbkFy
Z3VtZW50cyh0aGlzLnZhbHVlSWZUcnVlLCB0YXJnZXRUeXBlLCBzY29wZSk7DQorCQkJdXBkYXRl
SW52b2NhdGlvbkFyZ3VtZW50cyh0aGlzLnZhbHVlSWZGYWxzZSwgdGFyZ2V0VHlwZSwgc2NvcGUp
Ow0KIAkJCXRoaXMub3JpZ2luYWxWYWx1ZUlmVHJ1ZVR5cGUgPSB0aGlzLnZhbHVlSWZUcnVlLmNo
ZWNrQWdhaW5zdEZpbmFsVGFyZ2V0VHlwZSh0YXJnZXRUeXBlLCBzY29wZSk7DQogCQkJdGhpcy5v
cmlnaW5hbFZhbHVlSWZGYWxzZVR5cGUgPSB0aGlzLnZhbHVlSWZGYWxzZS5jaGVja0FnYWluc3RG
aW5hbFRhcmdldFR5cGUodGFyZ2V0VHlwZSwgc2NvcGUpOw0KIAkJCWNvbXB1dGVDb252ZXJzaW9u
cyh0aGlzLnBvbHlFeHByZXNzaW9uU2NvcGUsIHRhcmdldFR5cGUpOw0KQEAgLTczMSw3ICs3MzMs
MzMgQEANCiAJCX0NCiAJCXJldHVybiB0aGlzLnJlc29sdmVkVHlwZTsNCiAJfQ0KLQkNCisNCisJ
cHJpdmF0ZSBzdGF0aWMgdm9pZCB1cGRhdGVJbnZvY2F0aW9uQXJndW1lbnRzKEV4cHJlc3Npb24g
YXJndW1lbnQsIFR5cGVCaW5kaW5nIHBhcmFtZXRlclR5cGUsIFNjb3BlIHNjb3BlKSB7DQorCQlp
ZiAoYXJndW1lbnQgaW5zdGFuY2VvZiBJbnZvY2F0aW9uKSB7DQorCQkJSW52b2NhdGlvbiBpbm5l
ckludm9jYXRpb24gPSAoSW52b2NhdGlvbikgYXJndW1lbnQ7DQorCQkJTWV0aG9kQmluZGluZyBi
aW5kaW5nID0gaW5uZXJJbnZvY2F0aW9uLmJpbmRpbmcocGFyYW1ldGVyVHlwZSwgdHJ1ZSwgc2Nv
cGUpOw0KKwkJCWlmIChiaW5kaW5nIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRo
b2RCaW5kaW5nKSB7DQorCQkJCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBwYXJh
bWV0ZXJpemVkTWV0aG9kID0gKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgYmlu
ZGluZzsNCisJCQkJSW5mZXJlbmNlQ29udGV4dDE4IGlubmVyQ29udGV4dCA9IGlubmVySW52b2Nh
dGlvbi5nZXRJbmZlcmVuY2VDb250ZXh0KHBhcmFtZXRlcml6ZWRNZXRob2QpOw0KKwkJCQlpZiAo
aW5uZXJDb250ZXh0ICE9IG51bGwpIHsNCisJCQkJCWlmICghaW5uZXJDb250ZXh0Lmhhc1Jlc3Vs
dEZvcihwYXJhbWV0ZXJUeXBlKSkgew0KKwkJCQkJCWFyZ3VtZW50LnNldEV4cGVjdGVkVHlwZShw
YXJhbWV0ZXJUeXBlKTsNCisJCQkJCQlNZXRob2RCaW5kaW5nIGltcHJvdmVkQmluZGluZyA9IGlu
bmVyQ29udGV4dC5pbmZlckludm9jYXRpb25UeXBlKGlubmVySW52b2NhdGlvbiwNCisJCQkJCQkJ
CXBhcmFtZXRlcml6ZWRNZXRob2QpOw0KKwkJCQkJCWlmICghaW1wcm92ZWRCaW5kaW5nLmlzVmFs
aWRCaW5kaW5nKCkpIHsNCisJCQkJCQkJaW5uZXJDb250ZXh0LnJlcG9ydEludmFsaWRJbnZvY2F0
aW9uKGlubmVySW52b2NhdGlvbiwgaW1wcm92ZWRCaW5kaW5nKTsNCisJCQkJCQl9DQorCQkJCQkJ
aWYgKGlubmVySW52b2NhdGlvbi51cGRhdGVCaW5kaW5ncyhpbXByb3ZlZEJpbmRpbmcsIHBhcmFt
ZXRlclR5cGUpKSB7DQorCQkJCQkJCXJlc29sdmVQb2x5RXhwcmVzc2lvbkFyZ3VtZW50cyhpbm5l
ckludm9jYXRpb24sIGltcHJvdmVkQmluZGluZywgc2NvcGUpOw0KKwkJCQkJCX0NCisJCQkJCX0g
ZWxzZSBpZiAoaW5uZXJDb250ZXh0LnN0ZXBDb21wbGV0ZWQgPCBJbmZlcmVuY2VDb250ZXh0MTgu
QklORElOR1NfVVBEQVRFRCkgew0KKwkJCQkJCWlubmVyQ29udGV4dC5yZWJpbmRJbm5lclBvbGll
cyhwYXJhbWV0ZXJpemVkTWV0aG9kLCBpbm5lckludm9jYXRpb24pOw0KKwkJCQkJfQ0KKwkJCQl9
DQorCQkJfQ0KKwkJfQ0KKwl9DQorDQogCXB1YmxpYyBib29sZWFuIGlzUGVydGluZW50VG9BcHBs
aWNhYmlsaXR5KFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIE1ldGhvZEJpbmRpbmcgbWV0aG9kKSB7
DQogCQlyZXR1cm4gdGhpcy52YWx1ZUlmVHJ1ZS5pc1BlcnRpbmVudFRvQXBwbGljYWJpbGl0eSh0
YXJnZXRUeXBlLCBtZXRob2QpIA0KIAkJCQkmJiB0aGlzLnZhbHVlSWZGYWxzZS5pc1BlcnRpbmVu
dFRvQXBwbGljYWJpbGl0eSh0YXJnZXRUeXBlLCBtZXRob2QpOw0K
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>243055</attachid>
            <date>2014-05-13 16:05:00 -0400</date>
            <delta_ts>2014-05-13 16:05:32 -0400</delta_ts>
            <desc>Patch by code-copy from MessageSend</desc>
            <filename>Bug-434297--18-NPE-in-LamdaExpressionanalyseCode-wit.patch</filename>
            <type>text/plain</type>
            <size>3201</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0xhbWJkYUV4cHJlc3Np
b25zVGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhRXhwcmVz
c2lvbnNUZXN0LmphdmEKaW5kZXggNzA3YmVlYi4uODI1YTFlZCAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rl
c3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9j
b3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEK
QEAgLTQ0MDYsNiArNDQwNiwzNCBAQAogCQkJIn0iCiAJfSk7CiB9CisvLyBodHRwczovL2J1Z3Mu
ZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDM0Mjk3IFsxLjhdIE5QRSBpbiBMYW1k
YUV4cHJlc3Npb24uYW5hbHlzZUNvZGUgd2l0aCBsYW1kYSBleHByZXNzaW9uIG5lc3RlZCBpbiBh
IGNvbmRpdGlvbmFsIGV4cHJlc3Npb24KK3B1YmxpYyB2b2lkIHRlc3Q0MzQyOTcoKSB7CisJdGhp
cy5ydW5Db25mb3JtVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJYLmphdmEiLCAKKwkJCSJp
bXBvcnQgamF2YS51dGlsLkFycmF5TGlzdDtcbiIgKyAKKwkJCSJpbXBvcnQgamF2YS51dGlsLkNv
bGxlY3Rpb247XG4iICsgCisJCQkiaW1wb3J0IGphdmEudXRpbC5Db2xsZWN0aW9ucztcbiIgKyAK
KwkJCSJpbXBvcnQgamF2YS51dGlsLkNvbXBhcmF0b3I7XG4iICsgCisJCQkiaW1wb3J0IGphdmEu
dXRpbC5MaXN0O1xuIiArIAorCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKyAKKwkJCSIgIHB1Ymxp
YyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKyAKKwkJCSIgIH1cbiIgKyAK
KwkJCSIgIHB1YmxpYyB2b2lkIGJsYSgpIHtcbiIgKyAKKwkJCSIgICAgYm9vbGVhbiBiID0gQm9v
bGVhbi5UUlVFLmJvb2xlYW5WYWx1ZSgpO1xuIiArIAorCQkJIiAgICBMaXN0PFN0cmluZz4gYzEg
PSBuZXcgQXJyYXlMaXN0PD4oKTtcbiIgKyAKKwkJCSIgICAgQ29sbGVjdGlvbnMuc29ydChjMSwg
YiA/IG51bGwgOiBuZXcgQmFyKG5ldyBBcnJheUxpc3Q8PigpLENvbXBhcmF0b3IubnVsbHNMYXN0
KChhLGUpIC0+IHtyZXR1cm4gMDt9KSkpO1xuIiArIAorCQkJIiAgfVxuIiArIAorCQkJIiAgcHJp
dmF0ZSBzdGF0aWMgY2xhc3MgQmFyIGltcGxlbWVudHMgQ29tcGFyYXRvcjxTdHJpbmc+e1xuIiAr
IAorCQkJIgkgIHB1YmxpYyA8VD4gQmFyKENvbGxlY3Rpb248VD4gY29sLCBDb21wYXJhdG9yPFQ+
IGNvbXApIHsgfVxuIiArIAorCQkJIglAT3ZlcnJpZGVcbiIgKyAKKwkJCSIJcHVibGljIGludCBj
b21wYXJlKFN0cmluZyBvMSwgU3RyaW5nIG8yKSB7XG4iICsgCisJCQkiCQlyZXR1cm4gMDtcbiIg
KyAKKwkJCSIJfVxuIiArIAorCQkJIiAgfVxuIiArIAorCQkJIn0iCisJfSk7Cit9CiBwdWJsaWMg
c3RhdGljIENsYXNzIHRlc3RDbGFzcygpIHsKIAlyZXR1cm4gTGFtYmRhRXhwcmVzc2lvbnNUZXN0
LmNsYXNzOwogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BbGxvY2F0aW9uRXhwcmVzc2lvbi5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2FzdC9BbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCmluZGV4IDA2OTBhYzcu
LmI3NjEzZTYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2
YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYXN0L0FsbG9jYXRpb25FeHByZXNzaW9uLmphdmEKQEAgLTcyNCwxMSAr
NzI0LDIxIEBACiAJcmV0dXJuIHRoaXMuYmluZGluZzsKIH0KIHB1YmxpYyBUeXBlQmluZGluZyBj
aGVja0FnYWluc3RGaW5hbFRhcmdldFR5cGUoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgU2NvcGUg
c2NvcGUpIHsKKwkvLyBjb25mZXIgTWVzc2FnZVNlbmQuY2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRU
eXBlKCwsKToKKwlpZiAodGhpcy5iaW5kaW5nIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVy
aWNNZXRob2RCaW5kaW5nKSB7CisJCUluZmVyZW5jZUNvbnRleHQxOCBjdHggPSBnZXRJbmZlcmVu
Y2VDb250ZXh0KChQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZykgdGhpcy5iaW5kaW5nKTsKKwkJ
aWYgKGN0eCAhPSBudWxsICYmIGN0eC5zdGVwQ29tcGxldGVkIDwgSW5mZXJlbmNlQ29udGV4dDE4
LlRZUEVfSU5GRVJSRUQpIHsKKwkJCXRoaXMudHlwZUV4cGVjdGVkID0gdGFyZ2V0VHlwZTsKKwkJ
CU1ldGhvZEJpbmRpbmcgdXBkYXRlZEJpbmRpbmcgPSBjdHguaW5mZXJJbnZvY2F0aW9uVHlwZSh0
aGlzLCAoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB0aGlzLmJpbmRpbmcpOwor
CQkJaWYgKHVwZGF0ZUJpbmRpbmdzKHVwZGF0ZWRCaW5kaW5nLCB0YXJnZXRUeXBlKSkgeworCQkJ
CUFTVE5vZGUucmVzb2x2ZVBvbHlFeHByZXNzaW9uQXJndW1lbnRzKHRoaXMsIHVwZGF0ZWRCaW5k
aW5nLCBzY29wZSk7CisJCQl9CisJCX0KKwl9CiAJaWYgKHRoaXMuc3VzcGVuZGVkUmVzb2x1dGlv
blN0YXRlICE9IG51bGwpIHsKIAkJcmV0dXJuIHJlc29sdmVQYXJ0Myh0aGlzLnN1c3BlbmRlZFJl
c29sdXRpb25TdGF0ZSk7Ci0JCS8vIGFsc286IHNob3VsZCB0aGlzIHRyaWdnZXIgYW55IHByb3Bh
Z2F0aW9uIHRvIGlubmVycywgdG9vPwogCX0KLQlyZXR1cm4gc3VwZXIuY2hlY2tBZ2FpbnN0Rmlu
YWxUYXJnZXRUeXBlKHRhcmdldFR5cGUsIHNjb3BlKTsKKwlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5
cGU7CiB9CiBwdWJsaWMgRXhwcmVzc2lvbltdIGFyZ3VtZW50cygpIHsKIAlyZXR1cm4gdGhpcy5h
cmd1bWVudHM7
</data>

          </attachment>
      

    </bug>

</bugzilla>