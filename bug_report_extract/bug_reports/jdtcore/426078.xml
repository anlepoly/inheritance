<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>426078</bug_id>
          
          <creation_ts>2014-01-20 03:51:00 -0500</creation_ts>
          <short_desc>[1.8] VerifyError when conditional expression passed as an argument</short_desc>
          <delta_ts>2014-01-20 19:19:13 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Jay Arthanareeswaran">jarthana</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2351681</commentid>
    <comment_count>0</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-01-20 03:51:05 -0500</bug_when>
    <thetext>This program crashes when run:

public class X {
	&lt;T&gt; int square(int i) {
		return i * i;
	}
	boolean isOdd(boolean what) {
		return square(what ? new Integer(1) : new Integer(2)) % 2 == 1; // trouble here
	}
	public static void main(String argv[]) {
		System.out.println(new X().isOdd(true));
	}
}

Note that the program runs fine if you:
1. remove the type parameter &lt;T&gt; (or)
2. substitute the &apos;what&apos; with a boolean literal (or)
3. get rid of the boxing for int primitive

So, looks like all these are playing a part here.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2351700</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-20 04:46:49 -0500</bug_when>
    <thetext>I&apos;ll take a look at this one.

Passes upto 1.7 compliance/source levels.

Stack map table looks incorrect for 1.8.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2351814</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-20 08:14:48 -0500</bug_when>
    <thetext>Somewhere along the type inference path, the conditional&apos;s resolved type
get changed from Integer to int. Stephan, thanks for looking into it.

From the spec: 

Conditional operator expressions may be poly expressions if they appear in assignment or invocation contexts, unless both operands
produce primitives (or boxed primitives)

In this scenario, it is not a poly expression and I would not expect any
change from 1.7 behavior.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2351816</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-20 08:20:31 -0500</bug_when>
    <thetext>Disabled test released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=ed45f69d40b17b59915e726fa4a306f40a296886

(Please remember to adjust to &lt; 1.5 return.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2352174</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-20 19:19:13 -0500</bug_when>
    <thetext>With this precise analysis there wasn&apos;t much left for me to do :)

Inference already correctly notices that this ternary is not a poly expression, but still calls checkAgainstFinalTargetType() after all is said and done.

This method even had a comment &quot;in 1.8 if treated as a poly expression&quot;, but here the check isPolyExpression() was simply missing.

Fixed and released for BETA_JAVA8 via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=3168f520c145ac4dd47d54a812acd1c888ed8ea9</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>