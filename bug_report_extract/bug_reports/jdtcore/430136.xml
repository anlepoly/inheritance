<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>430136</bug_id>
          
          <creation_ts>2014-03-11 15:14:00 -0400</creation_ts>
          <short_desc>[1.8][model] JavaElement.JEM_LAMBDA_METHOD should not use &apos;*&apos; and &apos;&gt;&apos; as memento delimiter</short_desc>
          <delta_ts>2014-03-13 16:26:16 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Markus Keller">markus_keller</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="61870"
          type_id="1"
          status="+"
          setter="srikanth_sankaran"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2374576</commentid>
    <comment_count>0</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-03-11 15:14:52 -0400</bug_when>
    <thetext>JavaElement.JEM_LAMBDA_METHOD should not use &apos;*&apos; and &apos;&gt;&apos; as memento delimiter.

I just saw that the fix for bug 425134 had to make adjustments in MementoTests. That&apos;s not good. Existing JavaElement handles should stay as stable as possible, see Javadoc of IJavaElement#getHandleIdentifier(). &apos;*&apos; and &apos;&gt;&apos; were already used by existing mementos, and such stored mementos cannot be parsed any more now.

I see that most &quot;safe&quot; ASCII characters are already used as token delimiters or in token data, but these look free:

&amp;&apos;)`

Forbidden character groups:
- identifier characters
- characters used in Signature (at least for parameter type signatures)
- , is IMO risky as well (often used by clients to separate data)

We should also have a test for lambda type and lambda method mementos. I don&apos;t think these will be stored often (since they are inherently unstable), but they can be used locally (e.g. to put an element on the clipboard, or for hyperlinks in Javadoc hovers).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2374583</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-11 15:25:47 -0400</bug_when>
    <thetext>Jay, thanks for following up.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2374763</commentid>
    <comment_count>2</comment_count>
      <attachid>240796</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-03-12 06:02:02 -0400</bug_when>
    <thetext>Created attachment 240796
Proposed fix

Patch with new tests to test memento and creating handles back from the memento.

Srikanth, please review.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2374777</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-12 06:25:18 -0400</bug_when>
    <thetext>Looks good, thanks Jay.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375029</commentid>
    <comment_count>4</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-03-12 12:30:41 -0400</bug_when>
    <thetext>Thanks Srikanth. But looks like ) is taken too. We allow ) as part of project names :(</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375041</commentid>
    <comment_count>5</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-03-12 12:39:48 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #4)
&gt; Thanks Srikanth. But looks like ) is taken too. We allow ) as part of
&gt; project names :(

I guess we will alter the tests and move on. Srikanth, what do you think?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375043</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-12 12:41:59 -0400</bug_when>
    <thetext>Which test are you talking about ? Basically as Markus pointed out from
the javadocs, the memento can span sessions and we have limited room in
what we can do.

It is enough if we identity ONE kosher delimiter - we can alter the code so
the new delimiter is really a delimiter sequence -</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375052</commentid>
    <comment_count>7</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-03-12 12:53:39 -0400</bug_when>
    <thetext>Only the tests needed to be adjusted with right escapes. I have pushed the fix here:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=a80fa7c6cb262efaa08135896e90e4ea5ac09d8b</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375065</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-12 13:13:03 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #7)
&gt; Only the tests needed to be adjusted with right escapes. I have pushed the
&gt; fix here:
&gt; 
&gt; http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
&gt; ?h=BETA_JAVA8&amp;id=a80fa7c6cb262efaa08135896e90e4ea5ac09d8b

For the record, first two are reverting the changes made earlier which
prompted the opening of this CR - So good.

The last one - what happens if a stored memento contains &quot;=P \\(abc) \\~&quot; ?

Looking at this bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=47815,
I don&apos;t know that we (can) have a satisfactory solution impervious to breakage,
given escaping happens only for known delimiters at *generation* time.

Avoiding clashes with what we know are likely encodings due to our own
internal schemes is in our hands but for project names and such encoding 
special characters - things are not in our control at this point and we 
will have to settle for what we have now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375104</commentid>
    <comment_count>9</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-03-12 14:31:43 -0400</bug_when>
    <thetext>The new memento tests for lambdas should also go into MementoTests, so that all memento tests are at the same place. The sysouts in ResolveTests18#test430136() should be removed.

The situation is still not good, since comment 7 breaks bug 47815. Try creating a Java working set and put an IType from a project called &quot;(hello)&quot; in there. I&apos;m pretty sure this won&apos;t survive a migration from 4.3 to BETA_JAVA8. (IIRC, projects are stored as resources in Java working sets, so it may work for the project alone).


I think the only way out is to revert JavaElement#escapeMementoName() to the 4.3 state, and then make MementoTokenizer#nextToken() smarter: It should only consider token delimiters that can actually show up as delimiters after the already seen delimiters.

Maybe we can get away with only escaping the new token delimiters after we&apos;ve seen a type root (CU or class file), since only JEM_JAVAPROJECT, JEM_PACKAGEFRAGMENTROOT, JEM_COMPILATIONUNIT, and
JEM_CLASSFILE accept non-Java-identifier characters as names.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375110</commentid>
    <comment_count>10</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-12 14:43:19 -0400</bug_when>
    <thetext>(In reply to Markus Keller from comment #9)
&gt; The new memento tests for lambdas should also go into MementoTests, so that
&gt; all memento tests are at the same place. The sysouts in
&gt; ResolveTests18#test430136() should be removed.

This has been removed already here:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=4ba46e68413e894bf4c2e4db03e6bebaa1c62c18

&gt; The situation is still not good, since comment 7 breaks bug 47815. Try
&gt; creating a Java working set and put an IType from a project called &quot;(hello)&quot;
&gt; in there. I&apos;m pretty sure this won&apos;t survive a migration from 4.3 to
&gt; BETA_JAVA8. (IIRC, projects are stored as resources in Java working sets, so
&gt; it may work for the project alone).

Markus, why is this an issue only with the new memento demiliters ? At every
stage a new delimiter got introduced that could have been used in other
contexts the same situation would have prevailed ?

&gt; I think the only way out is to revert JavaElement#escapeMementoName() to the
&gt; 4.3 state, and then make MementoTokenizer#nextToken() smarter: It should
&gt; only consider token delimiters that can actually show up as delimiters after
&gt; the already seen delimiters.

This is too much work.

A simpler solution is to treat one of the existing delimiters as a start
of an delimiter sequence - if it is not immediately followed by another 
delimiter, it defaults to old meaning vs new meaning if a sequence is seen.
Do you agree that scheme would work ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375111</commentid>
    <comment_count>11</comment_count>
      <attachid>240827</attachid>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-03-12 14:45:38 -0400</bug_when>
    <thetext>Created attachment 240827
Fix to keep existing element handles stable</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375112</commentid>
    <comment_count>12</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-12 14:46:56 -0400</bug_when>
    <thetext>(In reply to Markus Keller from comment #9)
&gt; The new memento tests for lambdas should also go into MementoTests, so that
&gt; all memento tests are at the same place. 

While this is an ideal goal - we discussed this and we don&apos;t want to enforce
it in this case - the requirements for the test call for various hierarchy
elements that are not visible readily - JDT/Core normal commit rules call
for all tests to be run anyways.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375113</commentid>
    <comment_count>13</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-12 14:47:38 -0400</bug_when>
    <thetext>(In reply to Markus Keller from comment #11)
&gt; Created attachment 240827 [details]
&gt; Fix to keep existing element handles stable

would the proposal in comment#10 be simpler ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375116</commentid>
    <comment_count>14</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-03-12 14:52:09 -0400</bug_when>
    <thetext>(In reply to Markus Keller from comment #9)
&gt; The situation is still not good, since comment 7 breaks bug 47815. Try
&gt; creating a Java working set and put an IType from a project called &quot;(hello)&quot;
&gt; in there. I&apos;m pretty sure this won&apos;t survive a migration from 4.3 to
&gt; BETA_JAVA8. (IIRC, projects are stored as resources in Java working sets, so
&gt; it may work for the project alone).

I can&apos;t reproduce this. I am able to add types from a project named &quot;(Test[])&quot; to a java working set. I also tried out the copy+paste testcase from bug 47815 without any problem. But I agree with you on the migration part.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375124</commentid>
    <comment_count>15</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-03-12 15:15:55 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #10)
&gt; Markus, why is this an issue only with the new memento demiliters ? At every
&gt; stage a new delimiter got introduced that could have been used in other
&gt; contexts the same situation would have prevailed ?

The last new delimiter was &apos;}&apos;, added in 2007 via bug 79112. That one was also unsafe, but I guess project names contain &apos;)&apos; much more frequently than &apos;}&apos;.

All other handle format changes were done before bug 79112, in complete ignorance of this problem.

&gt; A simpler solution is to treat one of the existing delimiters as a start
&gt; of an delimiter sequence - if it is not immediately followed by another 
&gt; delimiter, it defaults to old meaning vs new meaning if a sequence is seen.
&gt; Do you agree that scheme would work ?

You mean e.g. &apos;=&apos; is considered an escape for new delimiters, so that JEM_LAMBDA_EXPRESSION would be written as &apos;=)&apos;? Yes, that could work and could be an easier solution than comment 11.

A project with name &apos;(hi=)&apos; would then still have handle &apos;=\(hi\=)&apos; because &apos;=&apos; is escaped as usual and &apos;)&apos; has no special meaning since it doesn&apos;t follow an unescaped &apos;=&apos;.

(I won&apos;t spend time to implement/test this.)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375130</commentid>
    <comment_count>16</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-12 15:23:04 -0400</bug_when>
    <thetext>(In reply to Markus Keller from comment #15)

&gt; You mean e.g. &apos;=&apos; is considered an escape for new delimiters, so that
&gt; JEM_LAMBDA_EXPRESSION would be written as &apos;=)&apos;? Yes, that could work and
&gt; could be an easier solution than comment 11.

Jay, could you prototype this please, Thanks in advance.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375264</commentid>
    <comment_count>17</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-13 00:58:18 -0400</bug_when>
    <thetext>(In reply to Markus Keller from comment #15)

&gt; A project with name &apos;(hi=)&apos; would then still have handle &apos;=\(hi\=)&apos; because
&gt; &apos;=&apos; is escaped as usual and &apos;)&apos; has no special meaning since it doesn&apos;t
&gt; follow an unescaped &apos;=&apos;.
&gt; 
&gt; (I won&apos;t spend time to implement/test this.)

I also wouldn&apos;t recommend it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375502</commentid>
    <comment_count>18</comment_count>
      <attachid>240862</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-03-13 09:49:24 -0400</bug_when>
    <thetext>Created attachment 240862
Fix to escape new delimiters

Fix as discussed. Even though we don&apos;t seem to allow &quot; as part of many element names, just to be safe, I am treating that delimiter as well.

Have run the relevant tests and looks fine. But will run all tests and report back.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375612</commentid>
    <comment_count>19</comment_count>
      <attachid>240870</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-03-13 12:41:24 -0400</bug_when>
    <thetext>Created attachment 240870
Updated patch

Updated patch after a pull. Nothing&apos;s changed since last.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375614</commentid>
    <comment_count>20</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-03-13 12:43:49 -0400</bug_when>
    <thetext>Please explain the problem and the solution in the code. The story is so hard to understand that this needs to be documented for readers of the code.

&quot;appendLambdaDelimiter&quot; and &quot;JEM_LAMBDA_ESCAPE&quot; are not good names. This is not about lambdas, but about escaping all future delimiters. E.g. use appendEscapedDelimiter and JEM_DELIMITER_ESCAPE.

MementoTests#testProjectMemento2() needs to be reverted to this:

public void testProjectMemento2() {
	IJavaProject project = getJavaProject(&quot;P (abc) ~&quot;);
	assertMemento(
		&quot;=P \\(abc\\) \\~&quot;,
		project);
}

You probably forgot to remove the new token delimiters from JavaElement#escapeMementoName(StringBuffer, String)

Add a comment to that method, so that the next one sees that this list must not be extended again.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375639</commentid>
    <comment_count>21</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-13 13:02:37 -0400</bug_when>
    <thetext>These cases directly under the switch in MementoTokenizer.nextToken()
should not stay ? 

                        case JavaElement.JEM_LAMBDA_EXPRESSION:
				return LAMBDA_EXPRESSION;
			case JavaElement.JEM_LAMBDA_METHOD:
				return LAMBDA_METHOD;
			case JavaElement.JEM_STRING:
				return STRING;

Likewise these cases in the next switch in the same method should not stay :

                                case JavaElement.JEM_LAMBDA_EXPRESSION:
				case JavaElement.JEM_LAMBDA_METHOD:	
				case JavaElement.JEM_STRING:

Otherwise patch looks good.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375651</commentid>
    <comment_count>22</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-03-13 13:16:56 -0400</bug_when>
    <thetext>(In reply to Markus Keller from comment #20)
&gt; MementoTests#testProjectMemento2() needs to be reverted to this:
&gt; 
&gt; public void testProjectMemento2() {
&gt; 	IJavaProject project = getJavaProject(&quot;P (abc) ~&quot;);
&gt; 	assertMemento(
&gt; 		&quot;=P \\(abc\\) \\~&quot;,
&gt; 		project);
&gt; }

Sorry, copied wrong side. The correct line is the old one with unescaped &apos;)&apos;:

		&quot;=P \\(abc) \\~&quot;,

To protect us from future fallout, please add a testProjectMemento4() that has a project name with all old JEM_* characters that are possible in a project name plus &amp;&apos;)`,</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375672</commentid>
    <comment_count>23</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-13 13:43:51 -0400</bug_when>
    <thetext>Let us first finalize this and release this before working on https://bugs.eclipse.org/bugs/show_bug.cgi?id=430307</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375743</commentid>
    <comment_count>24</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-03-13 16:26:16 -0400</bug_when>
    <thetext>Thanks Markus and Srikanth. Fixed with changes here:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=8c2daa60afb7b30e300741be54521542b6ad58f3

&gt; To protect us from future fallout, please add a testProjectMemento4() that
&gt; has a project name with all old JEM_* characters that are possible in a
&gt; project name plus &amp;&apos;)`,

This will have to wait. Will try to squeeze in as part of the other bugs in this area, perhaps 430307.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>240796</attachid>
            <date>2014-03-12 06:02:00 -0400</date>
            <delta_ts>2014-03-12 06:02:02 -0400</delta_ts>
            <desc>Proposed fix</desc>
            <filename>Bug-430136--18model-JavaElementJEMLAMBDAMETHOD-shoul.patch</filename>
            <type>text/plain</type>
            <size>5939</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMAojUCBvcmcuZWNsaXBzZS5qZHQuY29yZS50
ZXN0cy5tb2RlbApkaWZmIC0tZ2l0IHNyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9tb2Rl
bC9SZXNvbHZlVGVzdHMxOC5qYXZhIHNyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9tb2Rl
bC9SZXNvbHZlVGVzdHMxOC5qYXZhCmluZGV4IDI1MmRkYzYuLjY0ZDg1NDkgMTAwNjQ0Ci0tLSBz
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvbW9kZWwvUmVzb2x2ZVRlc3RzMTguamF2YQor
Kysgc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21vZGVsL1Jlc29sdmVUZXN0czE4Lmph
dmEKQEAgLTIzLDYgKzIzLDggQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5JSmF2YUVs
ZW1lbnQ7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuSU1ldGhvZDsKK2ltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuY29yZS5KYXZhQ29yZTsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5K
YXZhTW9kZWxFeGNlcHRpb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuV29ya2luZ0Nv
cHlPd25lcjsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS5MYW1iZGFFeHBy
ZXNzaW9uOwogCiBwdWJsaWMgY2xhc3MgUmVzb2x2ZVRlc3RzMTggZXh0ZW5kcyBBYnN0cmFjdEph
dmFNb2RlbFRlc3RzIHsKQEAgLTIzOTksMyArMjQwMSw1OCBAQAogCWFzc2VydEVxdWFscygiKExq
YXZhLnV0aWwuTGlzdDxUVTs+O0kpVFU7IiwgbGFtYmRhLmdldFNpZ25hdHVyZSgpKTsKIH0KKy8v
IGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00MzAxMzYKK3B1
YmxpYyB2b2lkIHRlc3Q0MzAxMzYoKSB0aHJvd3MgQ29yZUV4Y2VwdGlvbiB7CisJdGhpcy53b3Jr
aW5nQ29waWVzID0gbmV3IElDb21waWxhdGlvblVuaXRbMV07CisJdGhpcy53b3JraW5nQ29waWVz
WzBdID0gZ2V0V29ya2luZ0NvcHkoIi9SZXNvbHZlL3NyYy9YLmphdmEiLAorCQkJImltcG9ydCBq
YXZhLnV0aWwuTGlzdDtcbiIgKworCQkJImludGVyZmFjZSBHZXR0ZXI8RT4ge1xuIiArCisJCQki
ICAgIEUgZ2V0KExpc3Q8RT4gbGlzdCwgaW50IGkpO1xuIiArCisJCQkifVxuIiArCisJCQkicHVi
bGljIGNsYXNzIFg8VT4ge1xuIiArCisJCQkiCXB1YmxpYyB2b2lkIGZvbyhMaXN0PFU+IGwpIHtc
biIgKworCQkJIgkJR2V0dGVyPFU+IGc9ICh4LCBpKSAtPiB4LmdldChpKTtcbiIgKworCQkJIgkJ
R2V0dGVyPFU+IGcxPSAoeCwgaSkgLT4geC5nZXQoaSk7XG4iICsKKwkJCSIJfSBcbiIgKworCQkJ
In1cbiIKKwkJCSk7CisJCisJU3RyaW5nIHN0ciA9IHRoaXMud29ya2luZ0NvcGllc1swXS5nZXRT
b3VyY2UoKTsKKwkKKwlTdHJpbmcgc2VsZWN0aW9uID0gIngsIjsKKwlpbnQgc3RhcnQgPSBzdHIu
aW5kZXhPZihzZWxlY3Rpb24pOworCUlKYXZhRWxlbWVudFtdIGVsZW1lbnRzID0gdGhpcy53b3Jr
aW5nQ29waWVzWzBdLmNvZGVTZWxlY3Qoc3RhcnQsIDEpOworCUlNZXRob2QgbGFtYmRhID0gKElN
ZXRob2QpIGVsZW1lbnRzWzBdLmdldFBhcmVudCgpOworCVN0cmluZyBtZW1lbnRvID0gbGFtYmRh
LmdldEhhbmRsZUlkZW50aWZpZXIoKTsKKwlhc3NlcnRFcXVhbHMoIkluY29ycmVjdCBtZW1lbnRv
IHN0cmluZyIsIAorCQkJIj1SZXNvbHZlL3NyYzx7WC5qYXZhW1h+Zm9vflFMaXN0XFw8UVU7Pjsp
TGFtYmRhXFwoR2V0dGVyXFwpXCJMR2V0dGVyXFw8VFU7PjshMTQ0ITE2MSExNTImZ2V0ITJcIkxq
YXZhLnV0aWwuTGlzdFxcPFRVOz47XCJ4XCJJXCJpXCJUVTtcIkxYXFx+R2V0dGVyXFw8TFg7OlRV
Oz47LmdldFxcKExqYXZhXFwvdXRpbFxcL0xpc3RcXDxUVTs+O0lcXClUVTtAeCExNDUhMTQ1ITE0
NSExNDUhTGphdmFcXC91dGlsXFwvTGlzdDshMCF0cnVlQGkhMTQ4ITE0OCExNDghMTQ4IUkhMCF0
cnVlIiwgCisJCQltZW1lbnRvKTsKKwlJSmF2YUVsZW1lbnQgcmVzdWx0ID0gSmF2YUNvcmUuY3Jl
YXRlKG1lbWVudG8pOworCWFzc2VydEVxdWFscygiSmF2YSBlbGVtZW50cyBzaG91bGQgYmUgZXF1
YWwiLCBsYW1iZGEsIHJlc3VsdCk7CisJTGFtYmRhRXhwcmVzc2lvbiBleHByZXNzaW9uID0gKExh
bWJkYUV4cHJlc3Npb24pIGxhbWJkYS5nZXRQYXJlbnQoKTsKKwltZW1lbnRvID0gZXhwcmVzc2lv
bi5nZXRIYW5kbGVJZGVudGlmaWVyKCk7CisJYXNzZXJ0RXF1YWxzKCJJbmNvcnJlY3QgbWVtZW50
byBzdHJpbmciLCAKKwkJCSI9UmVzb2x2ZS9zcmM8e1guamF2YVtYfmZvb35RTGlzdFxcPFFVOz47
KUxhbWJkYVxcKEdldHRlclxcKVwiTEdldHRlclxcPFRVOz47ITE0NCExNjEhMTUyIiwgCisJCQlt
ZW1lbnRvKTsKKwlyZXN1bHQgPSBKYXZhQ29yZS5jcmVhdGUobWVtZW50byk7CisJYXNzZXJ0RXF1
YWxzKCJKYXZhIGVsZW1lbnRzIHNob3VsZCBiZSBlcXVhbCIsIGV4cHJlc3Npb24sIHJlc3VsdCk7
CisJCisJc3RhcnQgPSBzdHIubGFzdEluZGV4T2Yoc2VsZWN0aW9uKTsKKwllbGVtZW50cyA9IHRo
aXMud29ya2luZ0NvcGllc1swXS5jb2RlU2VsZWN0KHN0YXJ0LCAxKTsKKwlsYW1iZGEgPSAoSU1l
dGhvZCkgZWxlbWVudHNbMF0uZ2V0UGFyZW50KCk7CisJbWVtZW50byA9IGxhbWJkYS5nZXRIYW5k
bGVJZGVudGlmaWVyKCk7CisJU3lzdGVtLm91dC5wcmludGxuKG1lbWVudG8pOworCWFzc2VydEVx
dWFscygiSW5jb3JyZWN0IG1lbWVudG8gc3RyaW5nIiwgCisJCQkiPVJlc29sdmUvc3JjPHtYLmph
dmFbWH5mb29+UUxpc3RcXDxRVTs+OylMYW1iZGFcXChHZXR0ZXJcXClcIkxHZXR0ZXJcXDxUVTs+
OyExODAhMTk3ITE4OCZnZXQhMlwiTGphdmEudXRpbC5MaXN0XFw8VFU7PjtcInhcIklcImlcIlRV
O1wiTFhcXH5HZXR0ZXJcXDxMWDs6VFU7PjsuZ2V0XFwoTGphdmFcXC91dGlsXFwvTGlzdFxcPFRV
Oz47SVxcKVRVO0B4ITE4MSExODEhMTgxITE4MSFMamF2YVxcL3V0aWxcXC9MaXN0OyEwIXRydWVA
aSExODQhMTg0ITE4NCExODQhSSEwIXRydWUiLCAKKwkJCW1lbWVudG8pOworCXJlc3VsdCA9IEph
dmFDb3JlLmNyZWF0ZShtZW1lbnRvKTsKKwlhc3NlcnRFcXVhbHMoIkphdmEgZWxlbWVudHMgc2hv
dWxkIGJlIGVxdWFsIiwgbGFtYmRhLCByZXN1bHQpOworCWV4cHJlc3Npb24gPSAoTGFtYmRhRXhw
cmVzc2lvbikgbGFtYmRhLmdldFBhcmVudCgpOworCW1lbWVudG8gPSBleHByZXNzaW9uLmdldEhh
bmRsZUlkZW50aWZpZXIoKTsKKwlTeXN0ZW0ub3V0LnByaW50bG4obWVtZW50byk7CisJYXNzZXJ0
RXF1YWxzKCJJbmNvcnJlY3QgbWVtZW50byBzdHJpbmciLCAKKwkJCSI9UmVzb2x2ZS9zcmM8e1gu
amF2YVtYfmZvb35RTGlzdFxcPFFVOz47KUxhbWJkYVxcKEdldHRlclxcKVwiTEdldHRlclxcPFRV
Oz47ITE4MCExOTchMTg4IiwgCisJCQltZW1lbnRvKTsKKwlyZXN1bHQgPSBKYXZhQ29yZS5jcmVh
dGUobWVtZW50byk7CisJYXNzZXJ0RXF1YWxzKCJKYXZhIGVsZW1lbnRzIHNob3VsZCBiZSBlcXVh
bCIsIGV4cHJlc3Npb24sIHJlc3VsdCk7Cit9CiB9CiNQIG9yZy5lY2xpcHNlLmpkdC5jb3JlCmRp
ZmYgLS1naXQgbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvSmF2YUVsZW1lbnQu
amF2YSBtb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9KYXZhRWxlbWVudC5qYXZh
CmluZGV4IGEyZTgyYTIuLjBjM2U2MTkgMTAwNjQ0Ci0tLSBtb2RlbC9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29yZS9KYXZhRWxlbWVudC5qYXZhCisrKyBtb2RlbC9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29yZS9KYXZhRWxlbWVudC5qYXZhCkBAIC03MCw2ICs3MCw2IEBACiAJcHVibGlj
IHN0YXRpYyBmaW5hbCBjaGFyIEpFTV9UWVBFX1BBUkFNRVRFUiA9ICddJzsKIAlwdWJsaWMgc3Rh
dGljIGZpbmFsIGNoYXIgSkVNX0FOTk9UQVRJT04gPSAnfSc7Ci0JcHVibGljIHN0YXRpYyBmaW5h
bCBjaGFyIEpFTV9MQU1CREFfRVhQUkVTU0lPTiA9ICc+JzsKLQlwdWJsaWMgc3RhdGljIGZpbmFs
IGNoYXIgSkVNX0xBTUJEQV9NRVRIT0QgPSAnKic7CisJcHVibGljIHN0YXRpYyBmaW5hbCBjaGFy
IEpFTV9MQU1CREFfRVhQUkVTU0lPTiA9ICcpJzsKKwlwdWJsaWMgc3RhdGljIGZpbmFsIGNoYXIg
SkVNX0xBTUJEQV9NRVRIT0QgPSAnJic7CiAJcHVibGljIHN0YXRpYyBmaW5hbCBjaGFyIEpFTV9T
VFJJTkcgPSAnIic7CiAJCmRpZmYgLS1naXQgbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvcmUvTGFtYmRhTWV0aG9kLmphdmEgbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
cmUvTGFtYmRhTWV0aG9kLmphdmEKaW5kZXggODY5NzUwYy4uM2UxNTViNyAxMDA2NDQKLS0tIG1v
ZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0xhbWJkYU1ldGhvZC5qYXZhCisrKyBt
b2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9MYW1iZGFNZXRob2QuamF2YQpAQCAt
MTQ1LDEyICsxNDUsMTIgQEAKIAkJZm9yIChpbnQgaSA9IDAsIGxlbmd0aCA9IHRoaXMucGFyYW1l
dGVyVHlwZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKIAkJCWJ1ZmYuYXBwZW5kKEpFTV9T
VFJJTkcpOwotCQkJYnVmZi5hcHBlbmQodGhpcy5wYXJhbWV0ZXJUeXBlc1tpXSk7CisJCQllc2Nh
cGVNZW1lbnRvTmFtZShidWZmLCB0aGlzLnBhcmFtZXRlclR5cGVzW2ldKTsKIAkJCWJ1ZmYuYXBw
ZW5kKEpFTV9TVFJJTkcpOwotCQkJYnVmZi5hcHBlbmQodGhpcy5wYXJhbWV0ZXJOYW1lU3RyaW5n
c1tpXSk7CisJCQllc2NhcGVNZW1lbnRvTmFtZShidWZmLCB0aGlzLnBhcmFtZXRlck5hbWVTdHJp
bmdzW2ldKTsKIAkJfQogCQlidWZmLmFwcGVuZChKRU1fU1RSSU5HKTsKLQkJYnVmZi5hcHBlbmQo
dGhpcy5yZXR1cm5UeXBlU3RyaW5nKTsKKwkJZXNjYXBlTWVtZW50b05hbWUoYnVmZiwgdGhpcy5y
ZXR1cm5UeXBlU3RyaW5nKTsKIAkJYnVmZi5hcHBlbmQoSkVNX1NUUklORyk7Ci0JCWJ1ZmYuYXBw
ZW5kKHRoaXMua2V5KTsKKwkJZXNjYXBlTWVtZW50b05hbWUoYnVmZiwgdGhpcy5rZXkpOwogCQlJ
TG9jYWxWYXJpYWJsZVtdIGFyZ3VtZW50cyA9IHRoaXMuZWxlbWVudEluZm8uYXJndW1lbnRzOwog
CQlmb3IgKGludCBpID0gMCwgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGxlbmd0aDsg
aSsrKSB7CmRpZmYgLS1naXQgbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvTWVt
YmVyLmphdmEgbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvTWVtYmVyLmphdmEK
aW5kZXggY2FiYjBmNC4uMmMzOTUwZCAxMDA2NDQKLS0tIG1vZGVsL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb3JlL01lbWJlci5qYXZhCisrKyBtb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29yZS9NZW1iZXIuamF2YQpAQCAtMTkzLDcgKzE5Myw3IEBACiAJCQkJcmV0dXJuIHRoaXM7
CiAJCQlpbnQgYXJyb3dQb3NpdGlvbiA9IEludGVnZXIucGFyc2VJbnQobWVtZW50by5uZXh0VG9r
ZW4oKSk7Ci0JCQlpZiAoIW1lbWVudG8uaGFzTW9yZVRva2VucygpIHx8ICh0b2tlbiA9IG1lbWVu
dG8ubmV4dFRva2VuKCkpICE9IE1lbWVudG9Ub2tlbml6ZXIuTEFNQkRBX01FVEhPRCkgCi0JCQkJ
cmV0dXJuIHRoaXM7CiAJCQlMYW1iZGFFeHByZXNzaW9uIGV4cHJlc3Npb24gPSBuZXcgTGFtYmRh
RXhwcmVzc2lvbih0aGlzLCBuYW1lLCBpbnRlcnBoYXNlLCBzb3VyY2VTdGFydCwgc291cmNlRW5k
LCBhcnJvd1Bvc2l0aW9uKTsKKwkJCWlmICghbWVtZW50by5oYXNNb3JlVG9rZW5zKCkgfHwgKHRv
a2VuID0gbWVtZW50by5uZXh0VG9rZW4oKSkgIT0gTWVtZW50b1Rva2VuaXplci5MQU1CREFfTUVU
SE9EKSAKKwkJCQlyZXR1cm4gZXhwcmVzc2lvbjsKIAkJCXJldHVybiBleHByZXNzaW9uLmdldEhh
bmRsZUZyb21NZW1lbnRvKHRva2VuLCBtZW1lbnRvLCB3b3JraW5nQ29weU93bmVyKTsKIAkJY2Fz
ZSBKRU1fVFlQRTo=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>240827</attachid>
            <date>2014-03-12 14:45:00 -0400</date>
            <delta_ts>2014-03-13 09:49:24 -0400</delta_ts>
            <desc>Fix to keep existing element handles stable</desc>
            <filename>eclipse.jdt.core.patch</filename>
            <type>text/plain</type>
            <size>5474</size>
            <attacher name="Markus Keller">markus_keller</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMAojUCBvcmcuZWNsaXBzZS5qZHQuY29yZS50
ZXN0cy5tb2RlbApkaWZmIC0tZ2l0IHNyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9tb2Rl
bC9NZW1lbnRvVGVzdHMuamF2YSBzcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvbW9kZWwv
TWVtZW50b1Rlc3RzLmphdmEKaW5kZXggY2ViYTU3Mi4uNTc2NDMyYSAxMDA2NDQKLS0tIHNyYy9v
cmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9tb2RlbC9NZW1lbnRvVGVzdHMuamF2YQorKysgc3Jj
L29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21vZGVsL01lbWVudG9UZXN0cy5qYXZhCkBAIC03
MDIsNyArNzAyLDcgQEAKIHB1YmxpYyB2b2lkIHRlc3RQcm9qZWN0TWVtZW50bzIoKSB7CiAJSUph
dmFQcm9qZWN0IHByb2plY3QgPSBnZXRKYXZhUHJvamVjdCgiUCAoYWJjKSB+Iik7CiAJYXNzZXJ0
TWVtZW50bygKLQkJIj1QIFxcKGFiY1xcKSBcXH4iLAorCQkiPVAgXFwoYWJjKSBcXH4iLAogCQlw
cm9qZWN0KTsKIH0KIC8qKgojUCBvcmcuZWNsaXBzZS5qZHQuY29yZQpkaWZmIC0tZ2l0IG1vZGVs
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0phdmFFbGVtZW50LmphdmEgbW9kZWwvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvSmF2YUVsZW1lbnQuamF2YQppbmRleCAwYzNlNjE5
Li4zMWViNWZkIDEwMDY0NAotLS0gbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUv
SmF2YUVsZW1lbnQuamF2YQorKysgbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUv
SmF2YUVsZW1lbnQuamF2YQpAQCAtNjksNiArNjksMTcgQEAKIAlwdWJsaWMgc3RhdGljIGZpbmFs
IGNoYXIgSkVNX0xPQ0FMVkFSSUFCTEUgPSAnQCc7CiAJcHVibGljIHN0YXRpYyBmaW5hbCBjaGFy
IEpFTV9UWVBFX1BBUkFNRVRFUiA9ICddJzsKIAlwdWJsaWMgc3RhdGljIGZpbmFsIGNoYXIgSkVN
X0FOTk9UQVRJT04gPSAnfSc7CisJLyoKKwkgKiBXQVJOSU5HIQorCSAqIFRoZSBlbGVtZW50IGhh
bmRsZSBmb3JtYXQgd2FzIGRlc2lnbmVkIHdpdGggYSBmaXhlZC13b3JsZCBhc3N1bXB0aW9uLCBi
dXQgdGhhdAorCSAqIGNsYXNoZXMgd2l0aCB0aGUgcmVxdWlyZW1lbnQgdGhhdCBoYW5kbGVzIGFy
ZSBzdGFibGUgYWNyb3NzIHdvcmtzcGFjZSBzZXNzaW9ucy4KKwkgKiBUaGUgd29ya2Fyb3VuZCBp
cyB0byBoYW5kbGUgbmV3bHkgZGVmaW5lZCB0b2tlbiBkZWxpbWl0ZXJzIHNwZWNpYWxseSBhbmQg
b25seQorCSAqIGVzY2FwZS91bmVzY2FwZSB0aGVtIGluIHRva2VucyBwYXN0IGEgdHlwZSByb290
ICh0aG9zZSBhcmUgdGhlIGxhc3Qgb25lcyB0aGF0CisJICogZW5jb2RlIGZpbGUgbmFtZXMgd2hp
Y2ggY2FuIGNvbnRhaW4gYXJiaXRyYXJ5IGNoYXJhY3RlcnMpLgorCSAqIAorCSAqIEBzZWUgI2Vz
Y2FwZU1lbWVudG9OYW1lKFN0cmluZ0J1ZmZlciwgU3RyaW5nKQorCSAqIEBzZWUgTWVtZW50b1Rv
a2VuaXplciNwYXN0VHlwZVJvb3QKKwkgKi8KIAlwdWJsaWMgc3RhdGljIGZpbmFsIGNoYXIgSkVN
X0xBTUJEQV9FWFBSRVNTSU9OID0gJyknOwogCXB1YmxpYyBzdGF0aWMgZmluYWwgY2hhciBKRU1f
TEFNQkRBX01FVEhPRCA9ICcmJzsKIAlwdWJsaWMgc3RhdGljIGZpbmFsIGNoYXIgSkVNX1NUUklO
RyA9ICciJzsKQEAgLTEzNCw2ICsxNDUsMjEgQEAKIAkJCQl0aGlzLnBhcmVudC5lcXVhbHMob3Ro
ZXIucGFyZW50KTsKIAl9CiAJcHJvdGVjdGVkIHZvaWQgZXNjYXBlTWVtZW50b05hbWUoU3RyaW5n
QnVmZmVyIGJ1ZmZlciwgU3RyaW5nIG1lbWVudG9OYW1lKSB7CisJCWJvb2xlYW4gcGFzdFR5cGVS
b290ID0gZmFsc2U7CisJCWZvciAoaW50IGkgPSAwLCBsZW5ndGggPSBidWZmZXIubGVuZ3RoKCk7
IGkgPCBsZW5ndGg7IGkrKykgeworCQkJY2hhciBjaGFyYWN0ZXIgPSBidWZmZXIuY2hhckF0KGkp
OworCQkJc3dpdGNoIChjaGFyYWN0ZXIpIHsKKwkJCQljYXNlIEpFTV9FU0NBUEU6CisJCQkJCWkr
KzsKKwkJCQkJYnJlYWs7CisJCQkJCQorCQkJCWNhc2UgSkVNX0NMQVNTRklMRToKKwkJCQljYXNl
IEpFTV9DT01QSUxBVElPTlVOSVQ6CisJCQkJCXBhc3RUeXBlUm9vdCA9IHRydWU7CisJCQkJCWJy
ZWFrOworCQkJfQorCQl9CisJCQogCQlmb3IgKGludCBpID0gMCwgbGVuZ3RoID0gbWVtZW50b05h
bWUubGVuZ3RoKCk7IGkgPCBsZW5ndGg7IGkrKykgewogCQkJY2hhciBjaGFyYWN0ZXIgPSBtZW1l
bnRvTmFtZS5jaGFyQXQoaSk7CiAJCQlzd2l0Y2ggKGNoYXJhY3RlcikgewpAQCAtMTUzLDEwICsx
NzksMTYgQEAKIAkJCQljYXNlIEpFTV9MT0NBTFZBUklBQkxFOgogCQkJCWNhc2UgSkVNX1RZUEVf
UEFSQU1FVEVSOgogCQkJCWNhc2UgSkVNX0FOTk9UQVRJT046CisJCQkJCWJ1ZmZlci5hcHBlbmQo
SkVNX0VTQ0FQRSk7CisJCQkJCWJyZWFrOworCQkJCQkKIAkJCQljYXNlIEpFTV9MQU1CREFfRVhQ
UkVTU0lPTjoKIAkJCQljYXNlIEpFTV9MQU1CREFfTUVUSE9EOgogCQkJCWNhc2UgSkVNX1NUUklO
RzoKLQkJCQkJYnVmZmVyLmFwcGVuZChKRU1fRVNDQVBFKTsKKwkJCQkJaWYgKHBhc3RUeXBlUm9v
dCkgeworCQkJCQkJYnVmZmVyLmFwcGVuZChKRU1fRVNDQVBFKTsKKwkJCQkJfQorCQkJCQlicmVh
azsKIAkJCX0KIAkJCWJ1ZmZlci5hcHBlbmQoY2hhcmFjdGVyKTsKIAkJfQpkaWZmIC0tZ2l0IG1v
ZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3V0aWwvTWVtZW50b1Rva2VuaXplci5q
YXZhIG1vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3V0aWwvTWVtZW50b1Rva2Vu
aXplci5qYXZhCmluZGV4IDUyOWM2NWYuLjAwOTBiNTUgMTAwNjQ0Ci0tLSBtb2RlbC9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29yZS91dGlsL01lbWVudG9Ub2tlbml6ZXIuamF2YQorKysgbW9k
ZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvdXRpbC9NZW1lbnRvVG9rZW5pemVyLmph
dmEKQEAgLTEsNSArMSw1IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0
IChjKSAyMDA0LCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0
IChjKSAyMDA0LCAyMDE0IElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0
cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwog
ICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJs
aWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwg
YW5kIGlzIGF2YWlsYWJsZSBhdApAQCAtMzUsNiArMzUsNyBAQAogCXByaXZhdGUgZmluYWwgY2hh
cltdIG1lbWVudG87CiAJcHJpdmF0ZSBmaW5hbCBpbnQgbGVuZ3RoOwogCXByaXZhdGUgaW50IGlu
ZGV4ID0gMDsKKwlwcml2YXRlIGJvb2xlYW4gcGFzdFR5cGVSb290OwogCiAJcHVibGljIE1lbWVu
dG9Ub2tlbml6ZXIoU3RyaW5nIG1lbWVudG8pIHsKIAkJdGhpcy5tZW1lbnRvID0gbWVtZW50by50
b0NoYXJBcnJheSgpOwpAQCAtNjksOCArNzAsMTAgQEAKIAkJCWNhc2UgSmF2YUVsZW1lbnQuSkVN
X0lOSVRJQUxJWkVSOgogCQkJCXJldHVybiBJTklUSUFMSVpFUjsKIAkJCWNhc2UgSmF2YUVsZW1l
bnQuSkVNX0NPTVBJTEFUSU9OVU5JVDoKKwkJCQl0aGlzLnBhc3RUeXBlUm9vdCA9IHRydWU7CiAJ
CQkJcmV0dXJuIENPTVBJTEFUSU9OVU5JVDsKIAkJCWNhc2UgSmF2YUVsZW1lbnQuSkVNX0NMQVNT
RklMRToKKwkJCQl0aGlzLnBhc3RUeXBlUm9vdCA9IHRydWU7CiAJCQkJcmV0dXJuIENMQVNTRklM
RTsKIAkJCWNhc2UgSmF2YUVsZW1lbnQuSkVNX1RZUEU6CiAJCQkJcmV0dXJuIFRZUEU7CkBAIC03
OCwxOCArODEsMjggQEAKIAkJCQlyZXR1cm4gUEFDS0FHRURFQ0xBUkFUSU9OOwogCQkJY2FzZSBK
YXZhRWxlbWVudC5KRU1fSU1QT1JUREVDTEFSQVRJT046CiAJCQkJcmV0dXJuIElNUE9SVERFQ0xB
UkFUSU9OOwotCQkJY2FzZSBKYXZhRWxlbWVudC5KRU1fTEFNQkRBX0VYUFJFU1NJT046Ci0JCQkJ
cmV0dXJuIExBTUJEQV9FWFBSRVNTSU9OOwotCQkJY2FzZSBKYXZhRWxlbWVudC5KRU1fTEFNQkRB
X01FVEhPRDoKLQkJCQlyZXR1cm4gTEFNQkRBX01FVEhPRDsKLQkJCWNhc2UgSmF2YUVsZW1lbnQu
SkVNX1NUUklORzoKLQkJCQlyZXR1cm4gU1RSSU5HOwogCQkJY2FzZSBKYXZhRWxlbWVudC5KRU1f
TE9DQUxWQVJJQUJMRToKIAkJCQlyZXR1cm4gTE9DQUxWQVJJQUJMRTsKIAkJCWNhc2UgSmF2YUVs
ZW1lbnQuSkVNX1RZUEVfUEFSQU1FVEVSOgogCQkJCXJldHVybiBUWVBFX1BBUkFNRVRFUjsKIAkJ
CWNhc2UgSmF2YUVsZW1lbnQuSkVNX0FOTk9UQVRJT046CiAJCQkJcmV0dXJuIEFOTk9UQVRJT047
CisJCQkJCisJCQljYXNlIEphdmFFbGVtZW50LkpFTV9MQU1CREFfRVhQUkVTU0lPTjoKKwkJCQlp
ZiAodGhpcy5wYXN0VHlwZVJvb3QpIHsKKwkJCQkJcmV0dXJuIExBTUJEQV9FWFBSRVNTSU9OOwor
CQkJCX0KKwkJCQlicmVhazsKKwkJCWNhc2UgSmF2YUVsZW1lbnQuSkVNX0xBTUJEQV9NRVRIT0Q6
CisJCQkJaWYgKHRoaXMucGFzdFR5cGVSb290KSB7CisJCQkJCXJldHVybiBMQU1CREFfTUVUSE9E
OworCQkJCX0KKwkJCQlicmVhazsKKwkJCWNhc2UgSmF2YUVsZW1lbnQuSkVNX1NUUklORzoKKwkJ
CQlpZiAodGhpcy5wYXN0VHlwZVJvb3QpIHsKKwkJCQkJcmV0dXJuIFNUUklORzsKKwkJCQl9CisJ
CQkJYnJlYWs7CiAJCX0KIAkJbG9vcDogd2hpbGUgKHRoaXMuaW5kZXggPCB0aGlzLmxlbmd0aCkg
ewogCQkJc3dpdGNoICh0aGlzLm1lbWVudG9bdGhpcy5pbmRleF0pIHsKQEAgLTExMSwxMiArMTI0
LDE2IEBACiAJCQkJY2FzZSBKYXZhRWxlbWVudC5KRU1fUEFDS0FHRURFQ0xBUkFUSU9OOgogCQkJ
CWNhc2UgSmF2YUVsZW1lbnQuSkVNX0lNUE9SVERFQ0xBUkFUSU9OOgogCQkJCWNhc2UgSmF2YUVs
ZW1lbnQuSkVNX0xPQ0FMVkFSSUFCTEU6Ci0JCQkJY2FzZSBKYXZhRWxlbWVudC5KRU1fTEFNQkRB
X0VYUFJFU1NJT046Ci0JCQkJY2FzZSBKYXZhRWxlbWVudC5KRU1fTEFNQkRBX01FVEhPRDoJCi0J
CQkJY2FzZSBKYXZhRWxlbWVudC5KRU1fU1RSSU5HOgogCQkJCWNhc2UgSmF2YUVsZW1lbnQuSkVN
X1RZUEVfUEFSQU1FVEVSOgogCQkJCWNhc2UgSmF2YUVsZW1lbnQuSkVNX0FOTk9UQVRJT046CiAJ
CQkJCWJyZWFrIGxvb3A7CisJCQkJCQorCQkJCWNhc2UgSmF2YUVsZW1lbnQuSkVNX0xBTUJEQV9F
WFBSRVNTSU9OOgorCQkJCWNhc2UgSmF2YUVsZW1lbnQuSkVNX0xBTUJEQV9NRVRIT0Q6CQorCQkJ
CWNhc2UgSmF2YUVsZW1lbnQuSkVNX1NUUklORzoKKwkJCQkJaWYgKHRoaXMucGFzdFR5cGVSb290
KSB7CisJCQkJCQlicmVhayBsb29wOworCQkJCQl9CiAJCQl9CiAJCQl0aGlzLmluZGV4Kys7CiAJ
CX0=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>240862</attachid>
            <date>2014-03-13 09:49:00 -0400</date>
            <delta_ts>2014-03-13 12:41:24 -0400</delta_ts>
            <desc>Fix to escape new delimiters</desc>
            <filename>Fix-for-bug-430136--Implementing-escape-sequence-for.patch</filename>
            <type>text/plain</type>
            <size>7916</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMAojUCBvcmcuZWNsaXBzZS5qZHQuY29yZS50
ZXN0cy5tb2RlbApkaWZmIC0tZ2l0IHNyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9tb2Rl
bC9KYXZhRWxlbWVudDhUZXN0cy5qYXZhIHNyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9t
b2RlbC9KYXZhRWxlbWVudDhUZXN0cy5qYXZhCmluZGV4IDE4NDE0MmYuLjAzOGFhMTUgMTAwNjQ0
Ci0tLSBzcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvbW9kZWwvSmF2YUVsZW1lbnQ4VGVz
dHMuamF2YQorKysgc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21vZGVsL0phdmFFbGVt
ZW50OFRlc3RzLmphdmEKQEAgLTQ5OCw0ICs0OTgsMzUgQEAKIAkJCWRlbGV0ZVByb2plY3QoIkJ1
ZzQzMDE0MSIpOwogCQl9Ci0JfQkKKwl9CisJLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1
Z3Mvc2hvd19idWcuY2dpP2lkPTQzMDEzNgorCXB1YmxpYyB2b2lkIHRlc3Q0MzAxMzYoKSB0aHJv
d3MgQ29yZUV4Y2VwdGlvbiB7CisJCVN0cmluZyBwcm9qZWN0TmFtZSA9ICIoW0J1ZzQzMDEzNl0p
IjsKKwkJdHJ5IHsKKwkJCUlKYXZhUHJvamVjdCBwcm9qZWN0ID0gY3JlYXRlSmF2YVByb2plY3Qo
cHJvamVjdE5hbWUsIG5ldyBTdHJpbmdbXSB7InNyYyJ9LCBuZXcgU3RyaW5nW10geyJKQ0wxOF9M
SUIifSwgImJpbiIsICIxLjgiKTsKKwkJCXByb2plY3Qub3BlbihudWxsKTsKKwkJCVN0cmluZyBm
aWxlQ29udGVudCA9IAorCQkJCQkiaW50ZXJmYWNlIE15RnVuY3Rpb248VCwgUj4ge1xuIiArCisJ
CQkJCSIgICAgUiBhcHBseShUIHQpO1xuIiArCisJCQkJCSIgICAgZGVmYXVsdCA8Vj4gTXlGdW5j
dGlvbjxWLCBSPiBjb21wb3NlKE15RnVuY3Rpb248PyBzdXBlciBWLCA/IGV4dGVuZHMgVD4gYmVm
b3JlKSB7XG4iICsKKwkJCQkJIiAgICAgICAgcmV0dXJuIHYgLT4gYXBwbHkoYmVmb3JlLmFwcGx5
KHYpKTtcbiIgKworCQkJCQkiICAgIH1cbiIgKworCQkJCQkifVxuIjsKKwkJCVN0cmluZyBmaWxl
TmFtZSA9ICIvIiArIHByb2plY3ROYW1lICsgIi9zcmMvWC5qYXZhIjsKKwkJCWNyZWF0ZUZpbGUo
ZmlsZU5hbWUsIGZpbGVDb250ZW50KTsKKwkJCQorCQkJSUNvbXBpbGF0aW9uVW5pdCB1bml0ID0g
Z2V0Q29tcGlsYXRpb25Vbml0KGZpbGVOYW1lKTsKKwkJCWludCBzdGFydCA9IGZpbGVDb250ZW50
LmluZGV4T2YoInYiKTsKKwkJCUlKYXZhRWxlbWVudFtdIGVsZW1lbnRzID0gdW5pdC5jb2RlU2Vs
ZWN0KHN0YXJ0LCAxKTsKKwkJCWFzc2VydEVxdWFscygiSW5jb3JyZWN0IGphdmEgZWxlbWVudCIs
IElKYXZhRWxlbWVudC5MT0NBTF9WQVJJQUJMRSwgZWxlbWVudHNbMF0uZ2V0RWxlbWVudFR5cGUo
KSk7CisJCQlJVHlwZSBsYW1iZGEgPSAoSVR5cGUpIGVsZW1lbnRzWzBdLmdldFBhcmVudCgpLmdl
dFBhcmVudCgpOworCQkJU3RyaW5nIG1lbSA9IGxhbWJkYS5nZXRIYW5kbGVJZGVudGlmaWVyKCk7
CisJCQlTdHJpbmcgZXhwZWN0ZWQgPSAiPVxcKFxcW0J1ZzQzMDEzNlxcXVxcKS9zcmM8e1guamF2
YVtNeUZ1bmN0aW9ufmNvbXBvc2V+UU15RnVuY3Rpb25cXDwtUVY7K1FUOz47PSlMYW1iZGFcXChN
eUZ1bmN0aW9uXFwpPVwiTE15RnVuY3Rpb25cXDxUVjtUUjs+OyExNDghMTc0ITE1MSI7CisJCQlh
c3NlcnRFcXVhbHMoIkluY29ycmVjdCBtZW1lbnRvIiwgZXhwZWN0ZWQsIG1lbSk7CisJCQlJSmF2
YUVsZW1lbnQgcmVzdWx0ID0gSmF2YUNvcmUuY3JlYXRlKGV4cGVjdGVkKTsKKwkJCWFzc2VydEVx
dWFscygiSW5jb3JyZWN0IGVsZW1lbnQgY3JlYXRlZCIsIGxhbWJkYSwgcmVzdWx0KTsKKwkJfQor
CQlmaW5hbGx5IHsKKwkJCWRlbGV0ZVByb2plY3QocHJvamVjdE5hbWUpOworCQl9CisJfQogfQpk
aWZmIC0tZ2l0IHNyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9tb2RlbC9SZXNvbHZlVGVz
dHMxOC5qYXZhIHNyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9tb2RlbC9SZXNvbHZlVGVz
dHMxOC5qYXZhCmluZGV4IDY0ZDg1NDkuLjNhZTcyMzkgMTAwNjQ0Ci0tLSBzcmMvb3JnL2VjbGlw
c2UvamR0L2NvcmUvdGVzdHMvbW9kZWwvUmVzb2x2ZVRlc3RzMTguamF2YQorKysgc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21vZGVsL1Jlc29sdmVUZXN0czE4LmphdmEKQEAgLTI0MjUs
NSArMjQyNSw1IEBACiAJU3RyaW5nIG1lbWVudG8gPSBsYW1iZGEuZ2V0SGFuZGxlSWRlbnRpZmll
cigpOwogCWFzc2VydEVxdWFscygiSW5jb3JyZWN0IG1lbWVudG8gc3RyaW5nIiwgCi0JCQkiPVJl
c29sdmUvc3JjPHtYLmphdmFbWH5mb29+UUxpc3RcXDxRVTs+OylMYW1iZGFcXChHZXR0ZXJcXClc
IkxHZXR0ZXJcXDxUVTs+OyExNDQhMTYxITE1MiZnZXQhMlwiTGphdmEudXRpbC5MaXN0XFw8VFU7
PjtcInhcIklcImlcIlRVO1wiTFhcXH5HZXR0ZXJcXDxMWDs6VFU7PjsuZ2V0XFwoTGphdmFcXC91
dGlsXFwvTGlzdFxcPFRVOz47SVxcKVRVO0B4ITE0NSExNDUhMTQ1ITE0NSFMamF2YVxcL3V0aWxc
XC9MaXN0OyEwIXRydWVAaSExNDghMTQ4ITE0OCExNDghSSEwIXRydWUiLCAKKwkJCSI9UmVzb2x2
ZS9zcmM8e1guamF2YVtYfmZvb35RTGlzdFxcPFFVOz47PSlMYW1iZGFcXChHZXR0ZXJcXCk9XCJM
R2V0dGVyXFw8VFU7PjshMTQ0ITE2MSExNTI9JmdldCEyPVwiTGphdmEudXRpbC5MaXN0XFw8VFU7
Pjs9XCJ4PVwiST1cImk9XCJUVTs9XCJMWFxcfkdldHRlclxcPExYOzpUVTs+Oy5nZXRcXChMamF2
YVxcL3V0aWxcXC9MaXN0XFw8VFU7PjtJXFwpVFU7QHghMTQ1ITE0NSExNDUhMTQ1IUxqYXZhXFwv
dXRpbFxcL0xpc3Q7ITAhdHJ1ZUBpITE0OCExNDghMTQ4ITE0OCFJITAhdHJ1ZSIsIAogCQkJbWVt
ZW50byk7CiAJSUphdmFFbGVtZW50IHJlc3VsdCA9IEphdmFDb3JlLmNyZWF0ZShtZW1lbnRvKTsK
QEAgLTI0MzIsNSArMjQzMiw1IEBACiAJbWVtZW50byA9IGV4cHJlc3Npb24uZ2V0SGFuZGxlSWRl
bnRpZmllcigpOwogCWFzc2VydEVxdWFscygiSW5jb3JyZWN0IG1lbWVudG8gc3RyaW5nIiwgCi0J
CQkiPVJlc29sdmUvc3JjPHtYLmphdmFbWH5mb29+UUxpc3RcXDxRVTs+OylMYW1iZGFcXChHZXR0
ZXJcXClcIkxHZXR0ZXJcXDxUVTs+OyExNDQhMTYxITE1MiIsIAorCQkJIj1SZXNvbHZlL3NyYzx7
WC5qYXZhW1h+Zm9vflFMaXN0XFw8UVU7Pjs9KUxhbWJkYVxcKEdldHRlclxcKT1cIkxHZXR0ZXJc
XDxUVTs+OyExNDQhMTYxITE1MiIsIAogCQkJbWVtZW50byk7CiAJcmVzdWx0ID0gSmF2YUNvcmUu
Y3JlYXRlKG1lbWVudG8pOwpAQCAtMjQ0Myw1ICsyNDQzLDUgQEAKIAlTeXN0ZW0ub3V0LnByaW50
bG4obWVtZW50byk7CiAJYXNzZXJ0RXF1YWxzKCJJbmNvcnJlY3QgbWVtZW50byBzdHJpbmciLCAK
LQkJCSI9UmVzb2x2ZS9zcmM8e1guamF2YVtYfmZvb35RTGlzdFxcPFFVOz47KUxhbWJkYVxcKEdl
dHRlclxcKVwiTEdldHRlclxcPFRVOz47ITE4MCExOTchMTg4JmdldCEyXCJMamF2YS51dGlsLkxp
c3RcXDxUVTs+O1wieFwiSVwiaVwiVFU7XCJMWFxcfkdldHRlclxcPExYOzpUVTs+Oy5nZXRcXChM
amF2YVxcL3V0aWxcXC9MaXN0XFw8VFU7PjtJXFwpVFU7QHghMTgxITE4MSExODEhMTgxIUxqYXZh
XFwvdXRpbFxcL0xpc3Q7ITAhdHJ1ZUBpITE4NCExODQhMTg0ITE4NCFJITAhdHJ1ZSIsIAorCQkJ
Ij1SZXNvbHZlL3NyYzx7WC5qYXZhW1h+Zm9vflFMaXN0XFw8UVU7Pjs9KUxhbWJkYVxcKEdldHRl
clxcKT1cIkxHZXR0ZXJcXDxUVTs+OyExODAhMTk3ITE4OD0mZ2V0ITI9XCJMamF2YS51dGlsLkxp
c3RcXDxUVTs+Oz1cIng9XCJJPVwiaT1cIlRVOz1cIkxYXFx+R2V0dGVyXFw8TFg7OlRVOz47Lmdl
dFxcKExqYXZhXFwvdXRpbFxcL0xpc3RcXDxUVTs+O0lcXClUVTtAeCExODEhMTgxITE4MSExODEh
TGphdmFcXC91dGlsXFwvTGlzdDshMCF0cnVlQGkhMTg0ITE4NCExODQhMTg0IUkhMCF0cnVlIiwg
CiAJCQltZW1lbnRvKTsKIAlyZXN1bHQgPSBKYXZhQ29yZS5jcmVhdGUobWVtZW50byk7CkBAIC0y
NDUxLDUgKzI0NTEsNSBAQAogCVN5c3RlbS5vdXQucHJpbnRsbihtZW1lbnRvKTsKIAlhc3NlcnRF
cXVhbHMoIkluY29ycmVjdCBtZW1lbnRvIHN0cmluZyIsIAotCQkJIj1SZXNvbHZlL3NyYzx7WC5q
YXZhW1h+Zm9vflFMaXN0XFw8UVU7PjspTGFtYmRhXFwoR2V0dGVyXFwpXCJMR2V0dGVyXFw8VFU7
PjshMTgwITE5NyExODgiLCAKKwkJCSI9UmVzb2x2ZS9zcmM8e1guamF2YVtYfmZvb35RTGlzdFxc
PFFVOz47PSlMYW1iZGFcXChHZXR0ZXJcXCk9XCJMR2V0dGVyXFw8VFU7PjshMTgwITE5NyExODgi
LCAKIAkJCW1lbWVudG8pOwogCXJlc3VsdCA9IEphdmFDb3JlLmNyZWF0ZShtZW1lbnRvKTsKI1Ag
b3JnLmVjbGlwc2UuamR0LmNvcmUKZGlmZiAtLWdpdCBtb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29yZS9KYXZhRWxlbWVudC5qYXZhIG1vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb3JlL0phdmFFbGVtZW50LmphdmEKaW5kZXggMGMzZTYxOS4uY2M2ZDAwZiAxMDA2NDQKLS0t
IG1vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0phdmFFbGVtZW50LmphdmEKKysr
IG1vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0phdmFFbGVtZW50LmphdmEKQEAg
LTczLDQgKzczLDUgQEAKIAlwdWJsaWMgc3RhdGljIGZpbmFsIGNoYXIgSkVNX0xBTUJEQV9NRVRI
T0QgPSAnJic7CiAJcHVibGljIHN0YXRpYyBmaW5hbCBjaGFyIEpFTV9TVFJJTkcgPSAnIic7CisJ
cHVibGljIHN0YXRpYyBmaW5hbCBjaGFyIEpFTV9MQU1CREFfRVNDQVBFID0gSkVNX0pBVkFQUk9K
RUNUOwogCQogCkBAIC0xMzQsNCArMTM1LDggQEAKIAkJCQl0aGlzLnBhcmVudC5lcXVhbHMob3Ro
ZXIucGFyZW50KTsKIAl9CisJcHJvdGVjdGVkIHZvaWQgYXBwZW5kTGFtYmRhRGVsaW1pdGVyKFN0
cmluZ0J1ZmZlciBidWZmZXIsIGNoYXIgZGVsaW1pdGVyKSB7CisJCWJ1ZmZlci5hcHBlbmQoSkVN
X0xBTUJEQV9FU0NBUEUpOworCQlidWZmZXIuYXBwZW5kKGRlbGltaXRlcik7CisJfQogCXByb3Rl
Y3RlZCB2b2lkIGVzY2FwZU1lbWVudG9OYW1lKFN0cmluZ0J1ZmZlciBidWZmZXIsIFN0cmluZyBt
ZW1lbnRvTmFtZSkgewogCQlmb3IgKGludCBpID0gMCwgbGVuZ3RoID0gbWVtZW50b05hbWUubGVu
Z3RoKCk7IGkgPCBsZW5ndGg7IGkrKykgewpkaWZmIC0tZ2l0IG1vZGVsL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb3JlL0xhbWJkYUV4cHJlc3Npb24uamF2YSBtb2RlbC9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29yZS9MYW1iZGFFeHByZXNzaW9uLmphdmEKaW5kZXggNWIyZDk4ZC4uNDQw
ZTE0ZSAxMDA2NDQKLS0tIG1vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0xhbWJk
YUV4cHJlc3Npb24uamF2YQorKysgbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUv
TGFtYmRhRXhwcmVzc2lvbi5qYXZhCkBAIC0xMzgsNyArMTM4LDcgQEAKIAkJaWYgKG1lbW9pemVQ
YXJlbnQpIAogCQkJKChKYXZhRWxlbWVudClnZXRQYXJlbnQoKSkuZ2V0SGFuZGxlTWVtZW50byhi
dWZmKTsKLQkJYnVmZi5hcHBlbmQoZ2V0SGFuZGxlTWVtZW50b0RlbGltaXRlcigpKTsKKwkJYXBw
ZW5kTGFtYmRhRGVsaW1pdGVyKGJ1ZmYsIGdldEhhbmRsZU1lbWVudG9EZWxpbWl0ZXIoKSk7CiAJ
CWVzY2FwZU1lbWVudG9OYW1lKGJ1ZmYsIHRoaXMubmFtZSk7Ci0JCWJ1ZmYuYXBwZW5kKEpFTV9T
VFJJTkcpOworCQlhcHBlbmRMYW1iZGFEZWxpbWl0ZXIoYnVmZiwgSkVNX1NUUklORyk7CiAJCWVz
Y2FwZU1lbWVudG9OYW1lKGJ1ZmYsIHRoaXMuaW50ZXJwaGFzZSk7CiAJCWJ1ZmYuYXBwZW5kKEpF
TV9DT1VOVCk7CmRpZmYgLS1naXQgbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUv
TGFtYmRhTWV0aG9kLmphdmEgbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvTGFt
YmRhTWV0aG9kLmphdmEKaW5kZXggM2UxNTViNy4uNGY4YTdmZiAxMDA2NDQKLS0tIG1vZGVsL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0xhbWJkYU1ldGhvZC5qYXZhCisrKyBtb2RlbC9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9MYW1iZGFNZXRob2QuamF2YQpAQCAtMTM4LDE4
ICsxMzgsMTcgQEAKIAkJaWYgKG1lbW9pemVQYXJlbnQpCiAJCQkoKEphdmFFbGVtZW50KSBnZXRQ
YXJlbnQoKSkuZ2V0SGFuZGxlTWVtZW50byhidWZmKTsKLQkJY2hhciBkZWxpbWl0ZXIgPSBnZXRI
YW5kbGVNZW1lbnRvRGVsaW1pdGVyKCk7Ci0JCWJ1ZmYuYXBwZW5kKGRlbGltaXRlcik7CisJCWFw
cGVuZExhbWJkYURlbGltaXRlcihidWZmLCBnZXRIYW5kbGVNZW1lbnRvRGVsaW1pdGVyKCkpOwog
CQllc2NhcGVNZW1lbnRvTmFtZShidWZmLCBnZXRFbGVtZW50TmFtZSgpKTsKIAkJYnVmZi5hcHBl
bmQoSkVNX0NPVU5UKTsKIAkJYnVmZi5hcHBlbmQodGhpcy5wYXJhbWV0ZXJUeXBlcy5sZW5ndGgp
OwogCQlmb3IgKGludCBpID0gMCwgbGVuZ3RoID0gdGhpcy5wYXJhbWV0ZXJUeXBlcy5sZW5ndGg7
IGkgPCBsZW5ndGg7IGkrKykgewotCQkJYnVmZi5hcHBlbmQoSkVNX1NUUklORyk7CisJCQlhcHBl
bmRMYW1iZGFEZWxpbWl0ZXIoYnVmZiwgSkVNX1NUUklORyk7CiAJCQllc2NhcGVNZW1lbnRvTmFt
ZShidWZmLCB0aGlzLnBhcmFtZXRlclR5cGVzW2ldKTsKLQkJCWJ1ZmYuYXBwZW5kKEpFTV9TVFJJ
TkcpOworCQkJYXBwZW5kTGFtYmRhRGVsaW1pdGVyKGJ1ZmYsIEpFTV9TVFJJTkcpOwogCQkJZXNj
YXBlTWVtZW50b05hbWUoYnVmZiwgdGhpcy5wYXJhbWV0ZXJOYW1lU3RyaW5nc1tpXSk7CiAJCX0K
LQkJYnVmZi5hcHBlbmQoSkVNX1NUUklORyk7CisJCWFwcGVuZExhbWJkYURlbGltaXRlcihidWZm
LCBKRU1fU1RSSU5HKTsKIAkJZXNjYXBlTWVtZW50b05hbWUoYnVmZiwgdGhpcy5yZXR1cm5UeXBl
U3RyaW5nKTsKLQkJYnVmZi5hcHBlbmQoSkVNX1NUUklORyk7CisJCWFwcGVuZExhbWJkYURlbGlt
aXRlcihidWZmLCBKRU1fU1RSSU5HKTsKIAkJZXNjYXBlTWVtZW50b05hbWUoYnVmZiwgdGhpcy5r
ZXkpOwogCQlJTG9jYWxWYXJpYWJsZVtdIGFyZ3VtZW50cyA9IHRoaXMuZWxlbWVudEluZm8uYXJn
dW1lbnRzOwpkaWZmIC0tZ2l0IG1vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3V0
aWwvTWVtZW50b1Rva2VuaXplci5qYXZhIG1vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b3JlL3V0aWwvTWVtZW50b1Rva2VuaXplci5qYXZhCmluZGV4IDUyOWM2NWYuLjVmODg3NzUgMTAw
NjQ0Ci0tLSBtb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS91dGlsL01lbWVudG9U
b2tlbml6ZXIuamF2YQorKysgbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvdXRp
bC9NZW1lbnRvVG9rZW5pemVyLmphdmEKQEAgLTU4LDQgKzU4LDE4IEBACiAJCQkJcmV0dXJuIENP
VU5UOwogCQkJY2FzZSBKYXZhRWxlbWVudC5KRU1fSkFWQVBST0pFQ1Q6CisJCQkJaWYgKHRoaXMu
aW5kZXggPCB0aGlzLmxlbmd0aCkgeworCQkJCQljaGFyIG5leHRDaGFyID0gdGhpcy5tZW1lbnRv
W3RoaXMuaW5kZXgrK107CisJCQkJCXN3aXRjaChuZXh0Q2hhcikgeworCQkJCQkJY2FzZSBKYXZh
RWxlbWVudC5KRU1fTEFNQkRBX0VYUFJFU1NJT046CisJCQkJCQkJcmV0dXJuIExBTUJEQV9FWFBS
RVNTSU9OOworCQkJCQkJY2FzZSBKYXZhRWxlbWVudC5KRU1fTEFNQkRBX01FVEhPRDoKKwkJCQkJ
CQlyZXR1cm4gTEFNQkRBX01FVEhPRDsKKwkJCQkJCWNhc2UgSmF2YUVsZW1lbnQuSkVNX1NUUklO
RzoKKwkJCQkJCQlyZXR1cm4gU1RSSU5HOworCQkJCQkJZGVmYXVsdDoKKwkJCQkJCQl0aGlzLmlu
ZGV4LS07CisJCQkJCQkJYnJlYWs7CisJCQkJCX0KKwkJCQl9CiAJCQkJcmV0dXJuIEpBVkFQUk9K
RUNUOwogCQkJY2FzZSBKYXZhRWxlbWVudC5KRU1fUEFDS0FHRUZSQUdNRU5UUk9PVDo=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>240870</attachid>
            <date>2014-03-13 12:41:00 -0400</date>
            <delta_ts>2014-03-13 13:07:49 -0400</delta_ts>
            <desc>Updated patch</desc>
            <filename>Fix-for-bug-430136--Implementing-escape-sequence-for.patch</filename>
            <type>text/plain</type>
            <size>7942</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMAojUCBvcmcuZWNsaXBzZS5qZHQuY29yZS50
ZXN0cy5tb2RlbApkaWZmIC0tZ2l0IHNyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9tb2Rl
bC9KYXZhRWxlbWVudDhUZXN0cy5qYXZhIHNyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9t
b2RlbC9KYXZhRWxlbWVudDhUZXN0cy5qYXZhCmluZGV4IDE4NDE0MmYuLjAzOGFhMTUgMTAwNjQ0
Ci0tLSBzcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvbW9kZWwvSmF2YUVsZW1lbnQ4VGVz
dHMuamF2YQorKysgc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21vZGVsL0phdmFFbGVt
ZW50OFRlc3RzLmphdmEKQEAgLTQ5OCw0ICs0OTgsMzUgQEAKIAkJCWRlbGV0ZVByb2plY3QoIkJ1
ZzQzMDE0MSIpOwogCQl9Ci0JfQkKKwl9CisJLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1
Z3Mvc2hvd19idWcuY2dpP2lkPTQzMDEzNgorCXB1YmxpYyB2b2lkIHRlc3Q0MzAxMzYoKSB0aHJv
d3MgQ29yZUV4Y2VwdGlvbiB7CisJCVN0cmluZyBwcm9qZWN0TmFtZSA9ICIoW0J1ZzQzMDEzNl0p
IjsKKwkJdHJ5IHsKKwkJCUlKYXZhUHJvamVjdCBwcm9qZWN0ID0gY3JlYXRlSmF2YVByb2plY3Qo
cHJvamVjdE5hbWUsIG5ldyBTdHJpbmdbXSB7InNyYyJ9LCBuZXcgU3RyaW5nW10geyJKQ0wxOF9M
SUIifSwgImJpbiIsICIxLjgiKTsKKwkJCXByb2plY3Qub3BlbihudWxsKTsKKwkJCVN0cmluZyBm
aWxlQ29udGVudCA9IAorCQkJCQkiaW50ZXJmYWNlIE15RnVuY3Rpb248VCwgUj4ge1xuIiArCisJ
CQkJCSIgICAgUiBhcHBseShUIHQpO1xuIiArCisJCQkJCSIgICAgZGVmYXVsdCA8Vj4gTXlGdW5j
dGlvbjxWLCBSPiBjb21wb3NlKE15RnVuY3Rpb248PyBzdXBlciBWLCA/IGV4dGVuZHMgVD4gYmVm
b3JlKSB7XG4iICsKKwkJCQkJIiAgICAgICAgcmV0dXJuIHYgLT4gYXBwbHkoYmVmb3JlLmFwcGx5
KHYpKTtcbiIgKworCQkJCQkiICAgIH1cbiIgKworCQkJCQkifVxuIjsKKwkJCVN0cmluZyBmaWxl
TmFtZSA9ICIvIiArIHByb2plY3ROYW1lICsgIi9zcmMvWC5qYXZhIjsKKwkJCWNyZWF0ZUZpbGUo
ZmlsZU5hbWUsIGZpbGVDb250ZW50KTsKKwkJCQorCQkJSUNvbXBpbGF0aW9uVW5pdCB1bml0ID0g
Z2V0Q29tcGlsYXRpb25Vbml0KGZpbGVOYW1lKTsKKwkJCWludCBzdGFydCA9IGZpbGVDb250ZW50
LmluZGV4T2YoInYiKTsKKwkJCUlKYXZhRWxlbWVudFtdIGVsZW1lbnRzID0gdW5pdC5jb2RlU2Vs
ZWN0KHN0YXJ0LCAxKTsKKwkJCWFzc2VydEVxdWFscygiSW5jb3JyZWN0IGphdmEgZWxlbWVudCIs
IElKYXZhRWxlbWVudC5MT0NBTF9WQVJJQUJMRSwgZWxlbWVudHNbMF0uZ2V0RWxlbWVudFR5cGUo
KSk7CisJCQlJVHlwZSBsYW1iZGEgPSAoSVR5cGUpIGVsZW1lbnRzWzBdLmdldFBhcmVudCgpLmdl
dFBhcmVudCgpOworCQkJU3RyaW5nIG1lbSA9IGxhbWJkYS5nZXRIYW5kbGVJZGVudGlmaWVyKCk7
CisJCQlTdHJpbmcgZXhwZWN0ZWQgPSAiPVxcKFxcW0J1ZzQzMDEzNlxcXVxcKS9zcmM8e1guamF2
YVtNeUZ1bmN0aW9ufmNvbXBvc2V+UU15RnVuY3Rpb25cXDwtUVY7K1FUOz47PSlMYW1iZGFcXChN
eUZ1bmN0aW9uXFwpPVwiTE15RnVuY3Rpb25cXDxUVjtUUjs+OyExNDghMTc0ITE1MSI7CisJCQlh
c3NlcnRFcXVhbHMoIkluY29ycmVjdCBtZW1lbnRvIiwgZXhwZWN0ZWQsIG1lbSk7CisJCQlJSmF2
YUVsZW1lbnQgcmVzdWx0ID0gSmF2YUNvcmUuY3JlYXRlKGV4cGVjdGVkKTsKKwkJCWFzc2VydEVx
dWFscygiSW5jb3JyZWN0IGVsZW1lbnQgY3JlYXRlZCIsIGxhbWJkYSwgcmVzdWx0KTsKKwkJfQor
CQlmaW5hbGx5IHsKKwkJCWRlbGV0ZVByb2plY3QocHJvamVjdE5hbWUpOworCQl9CisJfQogfQpk
aWZmIC0tZ2l0IHNyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9tb2RlbC9SZXNvbHZlVGVz
dHMxOC5qYXZhIHNyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9tb2RlbC9SZXNvbHZlVGVz
dHMxOC5qYXZhCmluZGV4IDZlYTk4NWIuLjM3Mjk3MWEgMTAwNjQ0Ci0tLSBzcmMvb3JnL2VjbGlw
c2UvamR0L2NvcmUvdGVzdHMvbW9kZWwvUmVzb2x2ZVRlc3RzMTguamF2YQorKysgc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21vZGVsL1Jlc29sdmVUZXN0czE4LmphdmEKQEAgLTI0MjUs
NSArMjQyNSw1IEBACiAJU3RyaW5nIG1lbWVudG8gPSBsYW1iZGEuZ2V0SGFuZGxlSWRlbnRpZmll
cigpOwogCWFzc2VydEVxdWFscygiSW5jb3JyZWN0IG1lbWVudG8gc3RyaW5nIiwgCi0JCQkiPVJl
c29sdmUvc3JjPHtYLmphdmFbWH5mb29+UUxpc3RcXDxRVTs+OylMYW1iZGFcXChHZXR0ZXJcXClc
IkxHZXR0ZXJcXDxUVTs+OyExNDQhMTYxITE1MiZnZXQhMlwiTGphdmEudXRpbC5MaXN0XFw8VFU7
PjtcInhcIklcImlcIlRVO1wiTFhcXH5HZXR0ZXJcXDxMWDs6VFU7PjsuZ2V0XFwoTGphdmFcXC91
dGlsXFwvTGlzdFxcPFRVOz47SVxcKVRVO0B4ITE0NSExNDUhMTQ1ITE0NSFMamF2YVxcL3V0aWxc
XC9MaXN0OyEwIXRydWVAaSExNDghMTQ4ITE0OCExNDghSSEwIXRydWUiLCAKKwkJCSI9UmVzb2x2
ZS9zcmM8e1guamF2YVtYfmZvb35RTGlzdFxcPFFVOz47PSlMYW1iZGFcXChHZXR0ZXJcXCk9XCJM
R2V0dGVyXFw8VFU7PjshMTQ0ITE2MSExNTI9JmdldCEyPVwiTGphdmEudXRpbC5MaXN0XFw8VFU7
Pjs9XCJ4PVwiST1cImk9XCJUVTs9XCJMWFxcfkdldHRlclxcPExYOzpUVTs+Oy5nZXRcXChMamF2
YVxcL3V0aWxcXC9MaXN0XFw8VFU7PjtJXFwpVFU7QHghMTQ1ITE0NSExNDUhMTQ1IUxqYXZhXFwv
dXRpbFxcL0xpc3Q7ITAhdHJ1ZUBpITE0OCExNDghMTQ4ITE0OCFJITAhdHJ1ZSIsIAogCQkJbWVt
ZW50byk7CiAJSUphdmFFbGVtZW50IHJlc3VsdCA9IEphdmFDb3JlLmNyZWF0ZShtZW1lbnRvKTsK
QEAgLTI0MzIsNSArMjQzMiw1IEBACiAJbWVtZW50byA9IGV4cHJlc3Npb24uZ2V0SGFuZGxlSWRl
bnRpZmllcigpOwogCWFzc2VydEVxdWFscygiSW5jb3JyZWN0IG1lbWVudG8gc3RyaW5nIiwgCi0J
CQkiPVJlc29sdmUvc3JjPHtYLmphdmFbWH5mb29+UUxpc3RcXDxRVTs+OylMYW1iZGFcXChHZXR0
ZXJcXClcIkxHZXR0ZXJcXDxUVTs+OyExNDQhMTYxITE1MiIsIAorCQkJIj1SZXNvbHZlL3NyYzx7
WC5qYXZhW1h+Zm9vflFMaXN0XFw8UVU7Pjs9KUxhbWJkYVxcKEdldHRlclxcKT1cIkxHZXR0ZXJc
XDxUVTs+OyExNDQhMTYxITE1MiIsIAogCQkJbWVtZW50byk7CiAJcmVzdWx0ID0gSmF2YUNvcmUu
Y3JlYXRlKG1lbWVudG8pOwpAQCAtMjQ0Miw1ICsyNDQyLDUgQEAKIAltZW1lbnRvID0gbGFtYmRh
LmdldEhhbmRsZUlkZW50aWZpZXIoKTsKIAlhc3NlcnRFcXVhbHMoIkluY29ycmVjdCBtZW1lbnRv
IHN0cmluZyIsIAotCQkJIj1SZXNvbHZlL3NyYzx7WC5qYXZhW1h+Zm9vflFMaXN0XFw8UVU7Pjsp
TGFtYmRhXFwoR2V0dGVyXFwpXCJMR2V0dGVyXFw8VFU7PjshMTgwITE5NyExODgmZ2V0ITJcIkxq
YXZhLnV0aWwuTGlzdFxcPFRVOz47XCJ4XCJJXCJpXCJUVTtcIkxYXFx+R2V0dGVyXFw8TFg7OlRV
Oz47LmdldFxcKExqYXZhXFwvdXRpbFxcL0xpc3RcXDxUVTs+O0lcXClUVTtAeCExODEhMTgxITE4
MSExODEhTGphdmFcXC91dGlsXFwvTGlzdDshMCF0cnVlQGkhMTg0ITE4NCExODQhMTg0IUkhMCF0
cnVlIiwgCisJCQkiPVJlc29sdmUvc3JjPHtYLmphdmFbWH5mb29+UUxpc3RcXDxRVTs+Oz0pTGFt
YmRhXFwoR2V0dGVyXFwpPVwiTEdldHRlclxcPFRVOz47ITE4MCExOTchMTg4PSZnZXQhMj1cIkxq
YXZhLnV0aWwuTGlzdFxcPFRVOz47PVwieD1cIkk9XCJpPVwiVFU7PVwiTFhcXH5HZXR0ZXJcXDxM
WDs6VFU7PjsuZ2V0XFwoTGphdmFcXC91dGlsXFwvTGlzdFxcPFRVOz47SVxcKVRVO0B4ITE4MSEx
ODEhMTgxITE4MSFMamF2YVxcL3V0aWxcXC9MaXN0OyEwIXRydWVAaSExODQhMTg0ITE4NCExODQh
SSEwIXRydWUiLCAKIAkJCW1lbWVudG8pOwogCXJlc3VsdCA9IEphdmFDb3JlLmNyZWF0ZShtZW1l
bnRvKTsKQEAgLTI0NDksNSArMjQ0OSw1IEBACiAJbWVtZW50byA9IGV4cHJlc3Npb24uZ2V0SGFu
ZGxlSWRlbnRpZmllcigpOwogCWFzc2VydEVxdWFscygiSW5jb3JyZWN0IG1lbWVudG8gc3RyaW5n
IiwgCi0JCQkiPVJlc29sdmUvc3JjPHtYLmphdmFbWH5mb29+UUxpc3RcXDxRVTs+OylMYW1iZGFc
XChHZXR0ZXJcXClcIkxHZXR0ZXJcXDxUVTs+OyExODAhMTk3ITE4OCIsIAorCQkJIj1SZXNvbHZl
L3NyYzx7WC5qYXZhW1h+Zm9vflFMaXN0XFw8UVU7Pjs9KUxhbWJkYVxcKEdldHRlclxcKT1cIkxH
ZXR0ZXJcXDxUVTs+OyExODAhMTk3ITE4OCIsIAogCQkJbWVtZW50byk7CiAJcmVzdWx0ID0gSmF2
YUNvcmUuY3JlYXRlKG1lbWVudG8pOwojUCBvcmcuZWNsaXBzZS5qZHQuY29yZQpkaWZmIC0tZ2l0
IG1vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0phdmFFbGVtZW50LmphdmEgbW9k
ZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvSmF2YUVsZW1lbnQuamF2YQppbmRleCAw
YzNlNjE5Li5jYzZkMDBmIDEwMDY0NAotLS0gbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvcmUvSmF2YUVsZW1lbnQuamF2YQorKysgbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvcmUvSmF2YUVsZW1lbnQuamF2YQpAQCAtNzMsNCArNzMsNSBAQAogCXB1YmxpYyBzdGF0aWMg
ZmluYWwgY2hhciBKRU1fTEFNQkRBX01FVEhPRCA9ICcmJzsKIAlwdWJsaWMgc3RhdGljIGZpbmFs
IGNoYXIgSkVNX1NUUklORyA9ICciJzsKKwlwdWJsaWMgc3RhdGljIGZpbmFsIGNoYXIgSkVNX0xB
TUJEQV9FU0NBUEUgPSBKRU1fSkFWQVBST0pFQ1Q7CiAJCiAKQEAgLTEzNCw0ICsxMzUsOCBAQAog
CQkJCXRoaXMucGFyZW50LmVxdWFscyhvdGhlci5wYXJlbnQpOwogCX0KKwlwcm90ZWN0ZWQgdm9p
ZCBhcHBlbmRMYW1iZGFEZWxpbWl0ZXIoU3RyaW5nQnVmZmVyIGJ1ZmZlciwgY2hhciBkZWxpbWl0
ZXIpIHsKKwkJYnVmZmVyLmFwcGVuZChKRU1fTEFNQkRBX0VTQ0FQRSk7CisJCWJ1ZmZlci5hcHBl
bmQoZGVsaW1pdGVyKTsKKwl9CiAJcHJvdGVjdGVkIHZvaWQgZXNjYXBlTWVtZW50b05hbWUoU3Ry
aW5nQnVmZmVyIGJ1ZmZlciwgU3RyaW5nIG1lbWVudG9OYW1lKSB7CiAJCWZvciAoaW50IGkgPSAw
LCBsZW5ndGggPSBtZW1lbnRvTmFtZS5sZW5ndGgoKTsgaSA8IGxlbmd0aDsgaSsrKSB7CmRpZmYg
LS1naXQgbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvTGFtYmRhRXhwcmVzc2lv
bi5qYXZhIG1vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0xhbWJkYUV4cHJlc3Np
b24uamF2YQppbmRleCA5NWFlMTVhLi4yMjEyYzQyIDEwMDY0NAotLS0gbW9kZWwvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvcmUvTGFtYmRhRXhwcmVzc2lvbi5qYXZhCisrKyBtb2RlbC9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9MYW1iZGFFeHByZXNzaW9uLmphdmEKQEAgLTEzOCw3
ICsxMzgsNyBAQAogCQlpZiAobWVtb2l6ZVBhcmVudCkgCiAJCQkoKEphdmFFbGVtZW50KWdldFBh
cmVudCgpKS5nZXRIYW5kbGVNZW1lbnRvKGJ1ZmYpOwotCQlidWZmLmFwcGVuZChnZXRIYW5kbGVN
ZW1lbnRvRGVsaW1pdGVyKCkpOworCQlhcHBlbmRMYW1iZGFEZWxpbWl0ZXIoYnVmZiwgZ2V0SGFu
ZGxlTWVtZW50b0RlbGltaXRlcigpKTsKIAkJZXNjYXBlTWVtZW50b05hbWUoYnVmZiwgdGhpcy5u
YW1lKTsKLQkJYnVmZi5hcHBlbmQoSkVNX1NUUklORyk7CisJCWFwcGVuZExhbWJkYURlbGltaXRl
cihidWZmLCBKRU1fU1RSSU5HKTsKIAkJZXNjYXBlTWVtZW50b05hbWUoYnVmZiwgdGhpcy5pbnRl
cnBoYXNlKTsKIAkJYnVmZi5hcHBlbmQoSkVNX0NPVU5UKTsKZGlmZiAtLWdpdCBtb2RlbC9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9MYW1iZGFNZXRob2QuamF2YSBtb2RlbC9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29yZS9MYW1iZGFNZXRob2QuamF2YQppbmRleCAzZTE1NWI3Li40
ZjhhN2ZmIDEwMDY0NAotLS0gbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvTGFt
YmRhTWV0aG9kLmphdmEKKysrIG1vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0xh
bWJkYU1ldGhvZC5qYXZhCkBAIC0xMzgsMTggKzEzOCwxNyBAQAogCQlpZiAobWVtb2l6ZVBhcmVu
dCkKIAkJCSgoSmF2YUVsZW1lbnQpIGdldFBhcmVudCgpKS5nZXRIYW5kbGVNZW1lbnRvKGJ1ZmYp
OwotCQljaGFyIGRlbGltaXRlciA9IGdldEhhbmRsZU1lbWVudG9EZWxpbWl0ZXIoKTsKLQkJYnVm
Zi5hcHBlbmQoZGVsaW1pdGVyKTsKKwkJYXBwZW5kTGFtYmRhRGVsaW1pdGVyKGJ1ZmYsIGdldEhh
bmRsZU1lbWVudG9EZWxpbWl0ZXIoKSk7CiAJCWVzY2FwZU1lbWVudG9OYW1lKGJ1ZmYsIGdldEVs
ZW1lbnROYW1lKCkpOwogCQlidWZmLmFwcGVuZChKRU1fQ09VTlQpOwogCQlidWZmLmFwcGVuZCh0
aGlzLnBhcmFtZXRlclR5cGVzLmxlbmd0aCk7CiAJCWZvciAoaW50IGkgPSAwLCBsZW5ndGggPSB0
aGlzLnBhcmFtZXRlclR5cGVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7Ci0JCQlidWZmLmFw
cGVuZChKRU1fU1RSSU5HKTsKKwkJCWFwcGVuZExhbWJkYURlbGltaXRlcihidWZmLCBKRU1fU1RS
SU5HKTsKIAkJCWVzY2FwZU1lbWVudG9OYW1lKGJ1ZmYsIHRoaXMucGFyYW1ldGVyVHlwZXNbaV0p
OwotCQkJYnVmZi5hcHBlbmQoSkVNX1NUUklORyk7CisJCQlhcHBlbmRMYW1iZGFEZWxpbWl0ZXIo
YnVmZiwgSkVNX1NUUklORyk7CiAJCQllc2NhcGVNZW1lbnRvTmFtZShidWZmLCB0aGlzLnBhcmFt
ZXRlck5hbWVTdHJpbmdzW2ldKTsKIAkJfQotCQlidWZmLmFwcGVuZChKRU1fU1RSSU5HKTsKKwkJ
YXBwZW5kTGFtYmRhRGVsaW1pdGVyKGJ1ZmYsIEpFTV9TVFJJTkcpOwogCQllc2NhcGVNZW1lbnRv
TmFtZShidWZmLCB0aGlzLnJldHVyblR5cGVTdHJpbmcpOwotCQlidWZmLmFwcGVuZChKRU1fU1RS
SU5HKTsKKwkJYXBwZW5kTGFtYmRhRGVsaW1pdGVyKGJ1ZmYsIEpFTV9TVFJJTkcpOwogCQllc2Nh
cGVNZW1lbnRvTmFtZShidWZmLCB0aGlzLmtleSk7CiAJCUlMb2NhbFZhcmlhYmxlW10gYXJndW1l
bnRzID0gdGhpcy5lbGVtZW50SW5mby5hcmd1bWVudHM7CmRpZmYgLS1naXQgbW9kZWwvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvcmUvdXRpbC9NZW1lbnRvVG9rZW5pemVyLmphdmEgbW9kZWwv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvdXRpbC9NZW1lbnRvVG9rZW5pemVyLmphdmEK
aW5kZXggNTI5YzY1Zi4uNWY4ODc3NSAxMDA2NDQKLS0tIG1vZGVsL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb3JlL3V0aWwvTWVtZW50b1Rva2VuaXplci5qYXZhCisrKyBtb2RlbC9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29yZS91dGlsL01lbWVudG9Ub2tlbml6ZXIuamF2YQpAQCAtNTgs
NCArNTgsMTggQEAKIAkJCQlyZXR1cm4gQ09VTlQ7CiAJCQljYXNlIEphdmFFbGVtZW50LkpFTV9K
QVZBUFJPSkVDVDoKKwkJCQlpZiAodGhpcy5pbmRleCA8IHRoaXMubGVuZ3RoKSB7CisJCQkJCWNo
YXIgbmV4dENoYXIgPSB0aGlzLm1lbWVudG9bdGhpcy5pbmRleCsrXTsKKwkJCQkJc3dpdGNoKG5l
eHRDaGFyKSB7CisJCQkJCQljYXNlIEphdmFFbGVtZW50LkpFTV9MQU1CREFfRVhQUkVTU0lPTjoK
KwkJCQkJCQlyZXR1cm4gTEFNQkRBX0VYUFJFU1NJT047CisJCQkJCQljYXNlIEphdmFFbGVtZW50
LkpFTV9MQU1CREFfTUVUSE9EOgorCQkJCQkJCXJldHVybiBMQU1CREFfTUVUSE9EOworCQkJCQkJ
Y2FzZSBKYXZhRWxlbWVudC5KRU1fU1RSSU5HOgorCQkJCQkJCXJldHVybiBTVFJJTkc7CisJCQkJ
CQlkZWZhdWx0OgorCQkJCQkJCXRoaXMuaW5kZXgtLTsKKwkJCQkJCQlicmVhazsKKwkJCQkJfQor
CQkJCX0KIAkJCQlyZXR1cm4gSkFWQVBST0pFQ1Q7CiAJCQljYXNlIEphdmFFbGVtZW50LkpFTV9Q
QUNLQUdFRlJBR01FTlRST09UOg==
</data>

          </attachment>
      

    </bug>

</bugzilla>