<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>421543</bug_id>
          
          <creation_ts>2013-11-12 10:57:00 -0500</creation_ts>
          <short_desc>[1.8][compiler] Compiler fails to recognize default method being turned into abstract by subtytpe</short_desc>
          <delta_ts>2013-11-19 14:01:14 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>380501</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>jarthana</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2329222</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-11-12 10:57:02 -0500</bug_when>
    <thetext>BETA_JAVA8:

The following program correctly triggers an error: 

The type X must implement the inherited abstract method J.foo()

// --
interface I  {
	default void foo() {}
}

interface J extends I {
	void foo();
}
public class X implements J {
}

However, if the types are generic, we don&apos;t issue an error:

// --
interface I &lt;T&gt; {
	default void foo(T t) {}
}

interface J extends I&lt;J&gt; {
	void foo(J t);
}
public class X implements J {
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2329226</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-11-12 11:04:23 -0500</bug_when>
    <thetext>I released two regressions tests (one disabled) here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=58f7143be75deb274bc31e6b1b222d6530d0388b

I&apos;ll take a quick look and if it is not too involved, will fix it myself.
Otherwise, will assign to Stephan.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2329269</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-11-12 11:58:55 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #1)

&gt; I&apos;ll take a quick look and if it is not too involved, will fix it myself.
&gt; Otherwise, will assign to Stephan.

Stephan, thanks for taking a look. You have much more current familiarity
with this piece.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2329473</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-11-12 20:25:48 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #2)

&gt; Stephan, thanks for taking a look. You have much more current familiarity
&gt; with this piece.

Alternately, if you can tell me what the values for

skip[], isOverridden[] and isInherited[] are supposed to be given a
MethodBinding[] of [ default void foo(), abstract void foo() ] I can
continue to work on it too.

I think these should be

skip [] = [true, false]
isOverridden [] = [true, false]
isInherited[true, true]

Is that correct ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2329563</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-11-13 04:48:46 -0500</bug_when>
    <thetext>I also released an additional disabled test org.eclipse.jdt.core.tests.compiler.regression.InterfaceMethodsTest._testBug421543b()
that shows two problems. Bridge method is getting emitted in X it could be 
emitted in J for efficiency reasons.

Also the compiled file triggers a verify error. Constant pool entry
contains MethodRef instead of InterfaceMethodRef. Also should be using
invokeInterface instead of invokespecial ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2330106</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-11-14 05:40:36 -0500</bug_when>
    <thetext>I&apos;ll take a look today.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2330107</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-11-14 05:43:05 -0500</bug_when>
    <thetext>I notice that MV15.isSkippableOrOverridden calls isInterfaceMethodImplemented()
which carries a caveat: &quot;returns false if a method is implemented that needs a 
bridge method&quot; - That is basically a broken API. Something to be wary of.
  

(In reply to Stephan Herrmann from comment #5)
&gt; I&apos;ll take a look today.

Thanks!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2330146</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-11-14 07:31:29 -0500</bug_when>
    <thetext>Experiments indicate that fixing this may introduce a secondary error
in InterfaceMethodsTest.testBridge01:

2. ERROR in PurebredCatShopImpl.java (at line 8)
	interface PurebredCatShop extends CatShop {}
	          ^^^^^^^^^^^^^^^
Duplicate methods named getPets with the parameters () and () are defined by the type CatShop

The primary error is (in class CatShop):

1. ERROR in PurebredCatShopImpl.java (at line 6)
	default &lt;V extends Pet&gt; List&lt;? extends Cat&gt; getPets() { return null; }
	                                            ^^^^^^^^^
Name clash: The method getPets() of type CatShop has the same erasure as getPets() of type PetShop but does not override it

Do you think the secondary error is acceptable?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2330151</commentid>
    <comment_count>8</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-11-14 07:39:49 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #7)
&gt; Experiments indicate that fixing this may introduce a secondary error
&gt; in InterfaceMethodsTest.testBridge01:

Probably a red herring. Properly applying the patch from bug 410325
seems to be all we need for the problem in comment 0.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2330157</commentid>
    <comment_count>9</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-11-14 08:08:38 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #8)

&gt; Probably a red herring. Properly applying the patch from bug 410325
&gt; seems to be all we need for the problem in comment 0.

Did you mean there was a problem in cherry picking this commit ? 
I searched through several pages of commit logs on BETA_JAVA8
branch and don&apos;t see the commit for bug 410325 at all.

Jay, what would explain this ? Did we ever selective cherry pick from master ??</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2330178</commentid>
    <comment_count>10</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-11-14 08:47:13 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #4)
&gt; I also released an additional disabled test
&gt; org.eclipse.jdt.core.tests.compiler.regression.InterfaceMethodsTest.
&gt; _testBug421543b()
&gt; that shows two problems. Bridge method is getting emitted in X it could be 
&gt; emitted in J for efficiency reasons.

I&apos;ll check this later, need to align with Spec Part J which has
JVMS 4.9.2
 &quot;Each invokespecial instruction must name ..., or a method in a direct
  superinterface of the current class or interface.&quot;

 
&gt; Also the compiled file triggers a verify error. Constant pool entry
&gt; contains MethodRef instead of InterfaceMethodRef. Also should be using
&gt; invokeInterface instead of invokespecial ?

CodeStream.invoke(byte, int, int, char[], char[], char[])
assumes that InterfaceMethodRef is only needed when 
opcode == Opcodes.OPC_invokeinterface 

For super-calls to default methods this assumption is broken: as of 
class file version 52.0 we can use invokespecial with an InterfaceMethodRef.
Thus we need to pass in more information to see whether an InterfaceMethodRef
must be created.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2330179</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-11-14 08:50:32 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #10)

&gt; &gt; _testBug421543b()
&gt; &gt; that shows two problems. Bridge method is getting emitted in X it could be 
&gt; &gt; emitted in J for efficiency reasons.
&gt; 
&gt; I&apos;ll check this later, need to align with Spec Part J which has
&gt; JVMS 4.9.2
&gt;  &quot;Each invokespecial instruction must name ..., or a method in a direct
&gt;   superinterface of the current class or interface.&quot;

By all means. Please feel free to spawn a follow up, If it is only efficiency
that is a factor it can be taken up later after more pressing work is tended
to.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2330235</commentid>
    <comment_count>12</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-11-14 10:12:24 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #10)
&gt; (In reply to Srikanth Sankaran from comment #4)
&gt; &gt; Also the compiled file triggers a verify error. Constant pool entry
&gt; &gt; contains MethodRef instead of InterfaceMethodRef. Also should be using
&gt; &gt; invokeInterface instead of invokespecial ?
&gt; 
&gt; CodeStream.invoke(byte, int, int, char[], char[], char[])
&gt; assumes that InterfaceMethodRef is only needed when 
&gt; opcode == Opcodes.OPC_invokeinterface 
&gt; 
&gt; For super-calls to default methods this assumption is broken: as of 
&gt; class file version 52.0 we can use invokespecial with an InterfaceMethodRef.
&gt; Thus we need to pass in more information to see whether an InterfaceMethodRef
&gt; must be created.

Fix for this part has been released for BETA_JAVA8 via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=a575ae7d7233e0fd45c0767401c5464135620572</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2330241</commentid>
    <comment_count>13</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-11-14 10:16:59 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #11)
&gt; (In reply to Stephan Herrmann from comment #10)
&gt; 
&gt; &gt; &gt; _testBug421543b()
&gt; &gt; &gt; that shows two problems. Bridge method is getting emitted in X it could be 
&gt; &gt; &gt; emitted in J for efficiency reasons.
&gt; &gt; 
&gt; &gt; I&apos;ll check this later, need to align with Spec Part J which has
&gt; &gt; JVMS 4.9.2
&gt; &gt;  &quot;Each invokespecial instruction must name ..., or a method in a direct
&gt; &gt;   superinterface of the current class or interface.&quot;
&gt; 
&gt; By all means. Please feel free to spawn a follow up, If it is only efficiency
&gt; that is a factor it can be taken up later after more pressing work is tended
&gt; to.

-&gt; bug 421747.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2331929</commentid>
    <comment_count>14</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-11-19 10:41:59 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #8)
&gt; (In reply to Stephan Herrmann from comment #7)
&gt; &gt; Experiments indicate that fixing this may introduce a secondary error
&gt; &gt; in InterfaceMethodsTest.testBridge01:
&gt; 
&gt; Probably a red herring. Properly applying the patch from bug 410325
&gt; seems to be all we need for the problem in comment 0.

Yep, after applying the patch from bug 410325 an BETA_JAVA8 the new testBug421543a() runs green. Enabled via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=4106ed4f2c445aec08a08761ce48c9289a12d1a9

So with one part fixed from bug 410325, a verify error fixed as of comment 12 and some more postponed to bug 421747 all should be taken care of.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2332014</commentid>
    <comment_count>15</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-11-19 13:32:14 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #14)

&gt; Yep, after applying the patch from bug 410325 an BETA_JAVA8 the new
&gt; testBug421543a() runs green. Enabled via

This breaks the builds. With the new uninterned type comparison error :)
Fixed here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=af0e25a1d5ee864ea84d164d70f77532a60cf58e

Please upgrade to 4.3.1 + BETA_JAVA8 updates for development :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2332025</commentid>
    <comment_count>16</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-11-19 14:01:14 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #15)
&gt; Please upgrade to 4.3.1 + BETA_JAVA8 updates for development :)

Sorry, I have everything installed, simply launched the wrong installation :(

Should probably start deleting some of my 20 Eclipse installations...</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>