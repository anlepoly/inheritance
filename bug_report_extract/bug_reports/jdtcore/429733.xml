<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>429733</bug_id>
          
          <creation_ts>2014-03-06 01:56:00 -0500</creation_ts>
          <short_desc>[1.8][bytecode] Bad type on operand stack</short_desc>
          <delta_ts>2014-03-08 12:42:58 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Mac OS X</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Daniel Dietrich">daniel.dietrich</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>jarthana</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="61830"
          type_id="1"
          status="+"
          setter="stephan.herrmann"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2372232</commentid>
    <comment_count>0</comment_count>
    <who name="Daniel Dietrich">daniel.dietrich</who>
    <bug_when>2014-03-06 01:56:54 -0500</bug_when>
    <thetext>Running this snipped in Eclipse JAVA_BETA8 produces an error (see below). Running it on the command-line with jdk8 works fine.

public class Main {
	
	public static void main(String[] args) {
		test(new Some&lt;&gt;(1.1d));
	}

	static &lt;S&gt; void test(Option&lt;S&gt; value) {
	}
	
	static interface Option&lt;T&gt; {
	}
	
	static class Some&lt;T&gt; implements Option&lt;T&gt; {
		Some(T value) {
		}
	}

}

Exception in thread &quot;main&quot; java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    Main.main([Ljava/lang/String;)V @7: invokespecial
  Reason:
    Type double_2nd (current frame, stack[3]) is not assignable to &apos;java/lang/Object&apos;
  Current Frame:
    bci: @7
    flags: { }
    locals: { &apos;[Ljava/lang/String;&apos; }
    stack: { uninitialized 0, uninitialized 0, double, double_2nd }
  Bytecode:
    0000000: bb00 1059 1400 12b7 0014 b800 17b1     

	at java.lang.Class.getDeclaredMethods0(Native Method)
	at java.lang.Class.privateGetDeclaredMethods(Class.java:2688)
	at java.lang.Class.getMethod0(Class.java:2937)
	at java.lang.Class.getMethod(Class.java:1771)
	at sun.launcher.LauncherHelper.validateMainClass(LauncherHelper.java:544)
	at sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:526)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372240</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-06 02:48:08 -0500</bug_when>
    <thetext>Thanks Daniel, I&apos;ll take a look. Do you happen to know (readily) if this
is a recent regression ? Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372274</commentid>
    <comment_count>2</comment_count>
    <who name="Daniel Dietrich">daniel.dietrich</who>
    <bug_when>2014-03-06 04:01:02 -0500</bug_when>
    <thetext>Should be - I updated the beta8 plugin right before bug submission.

Beside this item the jdt plugins feel pretty stable to me. Thx for your great work!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372277</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-06 04:05:19 -0500</bug_when>
    <thetext>(In reply to Daniel Dietrich from comment #2)
&gt; Should be - I updated the beta8 plugin right before bug submission.
&gt; 
&gt; Beside this item the jdt plugins feel pretty stable to me. Thx for your
&gt; great work!

Thanks, you are very welcome. 

ATM, a fix for the present defect is in plan for GA. Analysis underway.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372279</commentid>
    <comment_count>4</comment_count>
    <who name="Daniel Dietrich">daniel.dietrich</who>
    <bug_when>2014-03-06 04:11:49 -0500</bug_when>
    <thetext>Great :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372325</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-06 05:32:55 -0500</bug_when>
    <thetext>Stephan, I don&apos;t see a call to resolvePart3. 

ASTNode.resolvePolyExpressionArguments(Invocation, MethodBinding, TypeBinding[], Scope) returns immediately right at the top at innersNeedUpdate() call.

I think we should also proactively check the case of other poly expressions
(MS, ECC) to see if they suffer from the same problem.

I have released (short-circuited-for-1.8 test at) org.eclipse.jdt.core.tests.compiler.regression.GenericsRegressionTest.test429733()

This covers only AE though.

Thanks for taking a look.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372327</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-06 05:33:22 -0500</bug_when>
    <thetext>Basically computeConversions call is short circuited.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372333</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-06 05:44:35 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #5)

&gt; I think we should also proactively check the case of other poly expressions
&gt; (MS, ECC) to see if they suffer from the same problem.

Stephan, could you review the additional tests I released for MS and ECC (these
pass as is) to see if they adequately test the equivalent scenario (and if not
mend suitably) ? Thanks.

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=35063ce5d9a09463d0cd8cba0e3ead1e4b545071</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372504</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-06 10:39:14 -0500</bug_when>
    <thetext>Should resolvePart2 be calling resolvePart3 automatically under the right
circumstances ? Just wondering.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372608</commentid>
    <comment_count>9</comment_count>
      <attachid>240612</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-06 13:46:40 -0500</bug_when>
    <thetext>Created attachment 240612
Plausible patch

Stephan, please take a look, passes all Java 8 tests.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372610</commentid>
    <comment_count>10</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-06 13:49:48 -0500</bug_when>
    <thetext>I wasn&apos;t totally sure whether this is the best place the final bits of
resolution that are missing or if it should happen inside the block
after the comment: 

// apply inference results onto the allocation type of inner diamonds:

Proceed to release if all is well. Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373391</commentid>
    <comment_count>11</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-08 12:11:43 -0500</bug_when>
    <thetext>While retesting a slightly updated patch, time to answer some questions:

(In reply to Srikanth Sankaran from comment #5)
&gt; Stephan, I don&apos;t see a call to resolvePart3.

I see. That&apos;s a bug, yes.

&gt; I think we should also proactively check the case of other poly expressions
&gt; (MS, ECC) to see if they suffer from the same problem.
&gt; 
&gt; I have released (short-circuited-for-1.8 test at)
&gt; org.eclipse.jdt.core.tests.compiler.regression.GenericsRegressionTest.
&gt; test429733()
&gt; 
&gt; This covers only AE though.

The problem cannot be reproduced for MS or ECC, because those directly call checkInvocationArguments from within resolveType(..). No way to escape this :)

The problem is rooted in the splitting of AE.resolveType(..) into three parts.

(In reply to Srikanth Sankaran from comment #6)
&gt; Basically computeConversions call is short circuited.

Right, and that is called from checkInvocationArgument(s).

(In reply to Srikanth Sankaran from comment #8)
&gt; Should resolvePart2 be calling resolvePart3 automatically under the right
&gt; circumstances ? Just wondering.

The purpose of resolvePart2 is to be able to do tentative resolves, while we still haven&apos;t determined the final target type. The method cannot determine by itself, in which context it is invoked, viz. if it is OK to proceed to resolvePart3. Instead I inspected all callers of resolvePart2 (via binding()):
 - 3 calls are from within inference: must not call resolvePart3
 - 2 appear during finalization of inference and have a subsequent call
   to checkAgainstFinalTargetType() (incl. this patch :) )
 - 1 also appears during finalization of inference but is on a branch
   where we know the the invocation is not poly -&gt; not a diamond, hence
   not performing chopped resolve.

(In reply to Srikanth Sankaran from comment #10)
&gt; I wasn&apos;t totally sure whether this is the best place the final bits of
&gt; resolution that are missing or if it should happen inside the block
&gt; after the comment: 
&gt; 
&gt; // apply inference results onto the allocation type of inner diamonds:

Your patch is already pretty hot, but the alternative you mention is on-the-nail, so that&apos;s what I&apos;m currently re-testing.
Explanation:
 - rebindInnerPolies treats all poly expressions that participated as inner inferences in the current inference (at any connected level of nesting)
 - acceptPendingPolyArguments additionally treats those direct invocation arguments, that may require some updates, too.

My intention is to give rebindInnerPolies the main responsibility, because this one is aware of the results of the composite inference. Calling setExpectedType() is the only help that acceptPendingPolyArguments needs to provide (only here we know the position inside the argument list). Ill add a comment to the code.

I&apos;ll release once tests are done.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373395</commentid>
    <comment_count>12</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-08 12:42:58 -0500</bug_when>
    <thetext>released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=2820b43f038a3bcfacbc2797064d7e5f6a2cb56e</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>240612</attachid>
            <date>2014-03-06 13:46:00 -0500</date>
            <delta_ts>2014-03-06 13:46:40 -0500</delta_ts>
            <desc>Plausible patch</desc>
            <filename>Alloc.patch</filename>
            <type>text/plain</type>
            <size>1901</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9v
cmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVn
cmVzc2lvblRlc3QuamF2YQppbmRleCBiMjNlNTk4Li44Y2RjYWNiIDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25UZXN0LmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pk
dC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVzdC5q
YXZhCkBAIC00MjY1LDggKzQyNjUsNiBAQAogcHVibGljIHZvaWQgdGVzdDQyOTczMygpIHsKIAlp
ZiAodGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV83KQogCQly
ZXR1cm47IC8vIHVzZXMgZGlhbW9uZC4KLQlpZiAodGhpcy5jb21wbGlhbmNlTGV2ZWwgPT0gQ2xh
c3NGaWxlQ29uc3RhbnRzLkpESzFfOCkKLQkJcmV0dXJuOwogCXJ1bkNvbmZvcm1UZXN0KAogCQlu
ZXcgU3RyaW5nW10gewogCQkJIlguamF2YSIsCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0lu
ZmVyZW5jZUNvbnRleHQxOC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9JbmZlcmVuY2VDb250ZXh0MTgu
amF2YQppbmRleCA0ZTFmNDZmLi45NzEzM2UyIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0lu
ZmVyZW5jZUNvbnRleHQxOC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvSW5mZXJlbmNlQ29udGV4
dDE4LmphdmEKQEAgLTI3LDYgKzI3LDcgQEAKIAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3Jl
LmNvbXBpbGVyLkNoYXJPcGVyYXRpb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFs
LmNvbXBpbGVyLmFzdC5BU1ROb2RlOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b21waWxlci5hc3QuQWxsb2NhdGlvbkV4cHJlc3Npb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmludGVybmFsLmNvbXBpbGVyLmFzdC5Db25kaXRpb25hbEV4cHJlc3Npb247CiBpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5FeHByZXNzaW9uOwogaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuRnVuY3Rpb25hbEV4cHJlc3Npb247
CkBAIC0xNDk4LDYgKzE0OTksOCBAQAogCQkJCQl9CiAJCQkJfSBlbHNlIHsKIAkJCQkJZXhwcmVz
c2lvbi5zZXRFeHBlY3RlZFR5cGUodGFyZ2V0VHlwZSk7CisJCQkJCWlmIChleHByZXNzaW9uIGlu
c3RhbmNlb2YgQWxsb2NhdGlvbkV4cHJlc3Npb24pCisJCQkJCQlleHByZXNzaW9uLmNoZWNrQWdh
aW5zdEZpbmFsVGFyZ2V0VHlwZSh0YXJnZXRUeXBlLCB0aGlzLnNjb3BlKTsJCiAJCQkJfQogCQkJ
fSBlbHNlIHsKIAkJCQlleHByZXNzaW9uLmNoZWNrQWdhaW5zdEZpbmFsVGFyZ2V0VHlwZSh0YXJn
ZXRUeXBlLCB0aGlzLnNjb3BlKTs=
</data>

          </attachment>
      

    </bug>

</bugzilla>