<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>434442</bug_id>
          
          <creation_ts>2014-05-08 12:24:00 -0400</creation_ts>
          <short_desc>ClassFormatError when using Enums in Java 8 Default interface methods</short_desc>
          <delta_ts>2014-11-07 11:40:06 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>4.4 RC2</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Kurt Leistentritt">kurt.leistentritt</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>bugreports</cc>
    
    <cc>habrin92</cc>
    
    <cc>jarthana</cc>
    
    <cc>manpalat</cc>
    
    <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
    
    <cc>tom.rodriguez</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="62466"
          type_id="1"
          status="+"
          setter="stephan.herrmann"
    />
    <flag name="review"
          id="62467"
          type_id="1"
          status="+"
          setter="manpalat"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2398967</commentid>
    <comment_count>0</comment_count>
      <attachid>242860</attachid>
    <who name="Kurt Leistentritt">kurt.leistentritt</who>
    <bug_when>2014-05-08 12:24:56 -0400</bug_when>
    <thetext>Created attachment 242860
simple switch with enums

Exception in thread &quot;main&quot; java.lang.ClassFormatError: Illegal field modifiers in class ecj/tests/I: 0x100A
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:760)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:455)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:73)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:367)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:361)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:360)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:760)
	at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	at java.net.URLClassLoader.defineClass(URLClassLoader.java:455)
	at java.net.URLClassLoader.access$100(URLClassLoader.java:73)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:367)
	at java.net.URLClassLoader$1.run(URLClassLoader.java:361)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.net.URLClassLoader.findClass(URLClassLoader.java:360)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:308)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	at sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:495)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404055</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-20 06:22:01 -0400</bug_when>
    <thetext>After fixing Bug 433906 that example produces:

java.lang.ClassFormatError: Illegal field modifiers in class ExFunction: 0x1018
	at java.lang.ClassLoader.defineClass1(Native Method)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:760)
	at java.lang.ClassLoader.defineClass(ClassLoader.java:642)

Is the JVM having trouble with synthetic (0x1000) interface fields in general???

For example 0 I could see as an excuse that Interfaces don&apos;t have non-constant fields (see that in 0x100A the final flag is missing). But for 0x1018 I don&apos;t see any reasons for rejecting...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404059</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-20 06:29:00 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #1)
&gt; After fixing Bug 433906 that example produces:

Oops, it&apos;s not particular to that example, but to the single change I made, replacing
   Objects.requireNonNull(before);
by
   assert before != null;

The field in question is
    static final boolean $assertionsDisabled;
    flags: ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC

By comparison, javac 8 puts this field into a dedicated anonymous class.
So, yes, even computed static final fields are not constants in the JVM sense of the word. So we do generate illegal code :(</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404060</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-20 06:31:36 -0400</bug_when>
    <thetext>Jay, this may have broader scope than original thought?

Whenever some code requires to generate synthetic fields, the strategy needs to be updated for default methods, which cannot put fields into their declaring type :(</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404061</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-20 06:38:56 -0400</bug_when>
    <thetext>From JVMS 4.5:

&quot;All fields of interfaces must have their ACC_PUBLIC, ACC_STATIC, and ACC_FINAL flags set; they may have their ACC_SYNTHETIC flag set and must not have any of the other flags in Table 4.4 set (JLS 9.3).&quot;

Public is missing in both our examples, in comment 0 also final is missing.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404062</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-20 06:41:53 -0400</bug_when>
    <thetext>The example using assert can indeed be fixed by generating

  public static final boolean $assertionsDisabled;
    flags: ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC

:)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404069</commentid>
    <comment_count>6</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-20 06:55:53 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #1)
&gt; After fixing Bug 433906 that example produces:

I didn&apos;t understand - I see bug 433906 still open?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404084</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-20 07:32:27 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #6)
&gt; (In reply to Stephan Herrmann from comment #1)
&gt; &gt; After fixing Bug 433906 that example produces:
&gt; 
&gt; I didn&apos;t understand - I see bug 433906 still open?

Sorry, it&apos;s fixed in my workspace, only. Patch has been uploaded just now.

But the issue from that bug can be reproduced easily just by:

public interface Foo {
  default Object test(Object a) {
    assert a != null; // triggers creation of bogus synthetic field
    return a;
  }
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404197</commentid>
    <comment_count>8</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-20 09:34:23 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #5)
&gt; The example using assert can indeed be fixed by generating
&gt; 
&gt;   public static final boolean $assertionsDisabled;
&gt;     flags: ACC_PUBLIC, ACC_STATIC, ACC_FINAL, ACC_SYNTHETIC
&gt; 
&gt; :)

Yep, I can confirm adding the public to modifiers helps. 

Sasi, can you look at this for RC2? You can start by looking at SourceTypeBinding#addSyntheticFieldForAssert where we create the synthetic field binding.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404218</commentid>
    <comment_count>9</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-20 09:49:59 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #7)
&gt; Sorry, it&apos;s fixed in my workspace, only. Patch has been uploaded just now.
&gt; 
&gt; But the issue from that bug can be reproduced easily just by:
&gt; 
&gt; public interface Foo {
&gt;   default Object test(Object a) {
&gt;     assert a != null; // triggers creation of bogus synthetic field
&gt;     return a;
&gt;   }
&gt; }

Sorry, I must say I am confused, did you mean to say you will be fixing that particular issue via bug 433906?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404289</commentid>
    <comment_count>10</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-20 10:55:36 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #9)
&gt; (In reply to Stephan Herrmann from comment #7)
&gt; &gt; Sorry, it&apos;s fixed in my workspace, only. Patch has been uploaded just now.
&gt; &gt; 
&gt; &gt; But the issue from that bug can be reproduced easily just by:
&gt; &gt; 
&gt; &gt; public interface Foo {
&gt; &gt;   default Object test(Object a) {
&gt; &gt;     assert a != null; // triggers creation of bogus synthetic field
&gt; &gt;     return a;
&gt; &gt;   }
&gt; &gt; }
&gt; 
&gt; Sorry, I must say I am confused, did you mean to say you will be fixing that
&gt; particular issue via bug 433906?

No, no :) sorry for ambiguous description ...

In bug 433906 I have a patch to fix that null issue.
No changes regarding synthetic fields.

The only connection: I had a test variant in bug 433906 that required the null fix and then surfaced the synth-field issue.

Clearer now?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404449</commentid>
    <comment_count>11</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-20 13:45:30 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #10)
 
&gt; No, no :) sorry for ambiguous description ...
&gt; 
&gt; In bug 433906 I have a patch to fix that null issue.
&gt; No changes regarding synthetic fields.
&gt; 
&gt; The only connection: I had a test variant in bug 433906 that required the
&gt; null fix and then surfaced the synth-field issue.
&gt; 
&gt; Clearer now?

Sorry, my bad. I was too lazy to go over the other bug :) 
It&apos;s clear now.

Sasi, let&apos;s handle the other case as well here, which seems more straight forward than the one reported in comment #1.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404630</commentid>
    <comment_count>12</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-21 02:36:18 -0400</bug_when>
    <thetext>Going by the following para, a particular synthetic method we create should also get public:

All interface methods must have their ACC_ABSTRACT and ACC_PUBLIC flags set; they may have their ACC_VARARGS, ACC_BRIDGE and ACC_SYNTHETIC flags set and must not have any of the other flags in Table 4.5 set (JLS 9.4). 

The synthetic method in question:

static synthetic int[] $SWITCH_TABLE$Letter();</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404702</commentid>
    <comment_count>13</comment_count>
      <attachid>243323</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-21 04:58:56 -0400</bug_when>
    <thetext>Created attachment 243323
Proposed fix

The fix simply uses public and final as applicable only for the following cases:
 
1. Synthetic field for assert in interfaces
2. Synthetic field for enum switch in interfaces
3. Synthetic method for enum switch in interfaces

Tests are still running.

Stephan, can you please review. TIA!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404796</commentid>
    <comment_count>14</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-21 07:47:56 -0400</bug_when>
    <thetext>All tests pass</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404879</commentid>
    <comment_count>15</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-21 09:40:09 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #13)
&gt; Stephan, can you please review. TIA!

Sure, will do later today.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2405532</commentid>
    <comment_count>16</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-22 07:43:36 -0400</bug_when>
    <thetext>Patch looks good.

+1</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2405586</commentid>
    <comment_count>17</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-22 08:42:29 -0400</bug_when>
    <thetext>Released for 4.4 RC2 via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=9d4d144eeab514c396e252f897178d49b4ecb5c3</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2406553</commentid>
    <comment_count>18</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-23 17:05:45 -0400</bug_when>
    <thetext>*** Bug 435664 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2406872</commentid>
    <comment_count>19</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-05-26 01:31:41 -0400</bug_when>
    <thetext>Verified for Eclipse Luna 4.4RC2 Build id: I20140525-2000.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2424841</commentid>
    <comment_count>20</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-07-07 00:49:00 -0400</bug_when>
    <thetext>*** Bug 435707 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472625</commentid>
    <comment_count>21</comment_count>
    <who name="Tom Rodriguez">tom.rodriguez</who>
    <bug_when>2014-10-27 15:39:58 -0400</bug_when>
    <thetext>Doesn&apos;t making the enum table public allow anyone to change it?  final only applies to the field, not the contents of the field.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2478466</commentid>
    <comment_count>22</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-11-07 02:40:22 -0500</bug_when>
    <thetext>(In reply to Tom Rodriguez from comment #21)
&gt; Doesn&apos;t making the enum table public allow anyone to change it?  final only
&gt; applies to the field, not the contents of the field.

Good point, how is it in javac?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2479061</commentid>
    <comment_count>23</comment_count>
    <who name="Tom Rodriguez">tom.rodriguez</who>
    <bug_when>2014-11-07 11:40:06 -0500</bug_when>
    <thetext>I believe they create a static inner class to hold the extra fields instead of changing the access modifiers.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>242860</attachid>
            <date>2014-05-08 12:24:00 -0400</date>
            <delta_ts>2014-05-08 12:24:56 -0400</delta_ts>
            <desc>simple switch with enums</desc>
            <filename>C.java</filename>
            <type>application/octet-stream</type>
            <size>522</size>
            <attacher name="Kurt Leistentritt">kurt.leistentritt</attacher>
            
              <data encoding="base64">cGFja2FnZSBlY2oudGVzdHM7DQoNCmludGVyZmFjZSBJDQp7DQogIHB1YmxpYyBlbnVtIExldHRl
cg0KICB7DQogICAgQSwgQjsNCiAgfQ0KICANCiAgcHVibGljIGRlZmF1bHQgdm9pZCB0ZXN0KExl
dHRlciBsZXR0ZXIpDQogIHsNCiAgICBzd2l0Y2ggKGxldHRlcikNCiAgICB7DQogICAgICBjYXNl
IEE6DQogICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbigiQSIpOw0KICAgICAgICBicmVhazsNCiAg
ICAgIGNhc2UgQjoNCiAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKCJCIik7DQogICAgICAgIGJy
ZWFrOw0KICAgIH0NCiAgfQ0KfQ0KDQpwdWJsaWMgY2xhc3MgQyBpbXBsZW1lbnRzIEkNCnsNCiAg
cHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykNCiAgew0KICAgIHRyeXsNCiAg
ICBDIGMgPSBuZXcgQygpOw0KICAgIGMudGVzdChMZXR0ZXIuQSk7DQogICAgfQ0KICAgIGNhdGNo
IChFeGNlcHRpb24gZSkNCiAgICB7DQogICAgICBlLnByaW50U3RhY2tUcmFjZSgpOw0KICAgIH0N
CiAgfQ0KfQ0K
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>243323</attachid>
            <date>2014-05-21 04:58:00 -0400</date>
            <delta_ts>2014-05-21 04:58:56 -0400</delta_ts>
            <desc>Proposed fix</desc>
            <filename>Bug-434442.patch</filename>
            <type>text/plain</type>
            <size>5047</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMAojUCBvcmcuZWNsaXBzZS5qZHQuY29yZS50
ZXN0cy5jb21waWxlcgpkaWZmIC0tZ2l0IHNyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9j
b21waWxlci9yZWdyZXNzaW9uL0Fzc2VydGlvblRlc3QuamF2YSBzcmMvb3JnL2VjbGlwc2UvamR0
L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9Bc3NlcnRpb25UZXN0LmphdmEKaW5kZXgg
MmI2MDFlMC4uOWJjOTc4YyAxMDA2NDQKLS0tIHNyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0
cy9jb21waWxlci9yZWdyZXNzaW9uL0Fzc2VydGlvblRlc3QuamF2YQorKysgc3JjL29yZy9lY2xp
cHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vQXNzZXJ0aW9uVGVzdC5qYXZh
CkBAIC0xLDQgKzEsNCBAQAogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAo
YykgMjAwMCwgMjAxMCBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAo
YykgMjAwMCwgMjAxNCBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMg
cmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAq
IGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGlj
IExpY2Vuc2UgdjEuMApAQCAtMTAsNCArMTAsNiBAQAogICoqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiov
CiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyLnJlZ3Jlc3Npb247
CisKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuY2xhc3NmbXQuQ2xh
c3NGaWxlQ29uc3RhbnRzOwogCiBpbXBvcnQganVuaXQuZnJhbWV3b3JrLlRlc3Q7CkBAIC02MTgs
MyArNjIwLDIwIEBACiAJCQkiLS0tLS0tLS0tLVxuIik7CiAJfQorCXB1YmxpYyB2b2lkIHRlc3Qw
MjMoKSB7CisJCWlmICh0aGlzLmNvbXBsaWFuY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5K
REsxXzgpCisJCQlyZXR1cm47CisJCXRoaXMucnVuQ29uZm9ybVRlc3QobmV3IFN0cmluZ1tdIHsi
WC5qYXZhIiwgCisJCQkJImludGVyZmFjZSBGb28ge1xuIiArCisJCQkJIiAgZGVmYXVsdCBPYmpl
Y3QgdGVzdChPYmplY3QgYSkge1xuIiArCisJCQkJIiAgICBhc3NlcnQgYSAhPSBudWxsOyAvLyB0
cmlnZ2VycyBjcmVhdGlvbiBvZiBib2d1cyBzeW50aGV0aWMgZmllbGRcbiIgKworCQkJCSIgICAg
cmV0dXJuIGE7XG4iICsKKwkJCQkiICB9XG4iICsKKwkJCQkifVxuIiArCisJCQkJInB1YmxpYyBj
bGFzcyBYIGltcGxlbWVudHMgRm9vIHtcbiIgKworCQkJCSIJcHVibGljIHN0YXRpYyB2b2lkIG1h
aW4oU3RyaW5nW10gYXJncykge1xuIiArCisJCQkJIgkJbmV3IFgoKS50ZXN0KFwiXCIpO1xuIiAr
CisJCQkJIgkJU3lzdGVtLm91dC5wcmludGxuKFwiSGVsbG9cIik7XG4iICsKKwkJCQkiCX1cbiIg
KworCQkJCSJ9XG4ifSwgIkhlbGxvIik7CisJfQogfQpkaWZmIC0tZ2l0IHNyYy9vcmcvZWNsaXBz
ZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0VudW1UZXN0LmphdmEgc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vRW51bVRlc3QuamF2
YQppbmRleCBhNWJlOGIyLi5jYzZiZWRiIDEwMDY0NAotLS0gc3JjL29yZy9lY2xpcHNlL2pkdC9j
b3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vRW51bVRlc3QuamF2YQorKysgc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vRW51bVRlc3QuamF2YQpA
QCAtNzA4MiwzICs3MDgyLDM4IEBACiAJCW9wdGlvbnMpOwogfQorcHVibGljIHZvaWQgdGVzdDQz
NDQ0MigpIHsKKwlpZiAodGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMu
SkRLMV84KQorCQlyZXR1cm47CisJdGhpcy5ydW5Db25mb3JtVGVzdChuZXcgU3RyaW5nW10gewor
CQkJIlguamF2YSIsCisJCQkiaW50ZXJmYWNlIEkge1xuIiArCisJCQkiCXB1YmxpYyBlbnVtIExl
dHRlciB7XG4iICsKKwkJCSIgIAkJQSwgQjtcbiIgKworCQkJIgl9XG4iICsKKwkJCSIgIHB1Ymxp
YyBkZWZhdWx0IHZvaWQgdGVzdChMZXR0ZXIgbGV0dGVyKSB7XG4iICsKKwkJCSIgICAgc3dpdGNo
IChsZXR0ZXIpIHtcbiIgKworCQkJIiAgICAgIGNhc2UgQTpcbiIgKworCQkJIiAgICAgICAgU3lz
dGVtLm91dC5wcmludGxuKFwiQVwiKTtcbiIgKworCQkJIiAgICAgICAgYnJlYWs7XG4iICsKKwkJ
CSIgICAgICBjYXNlIEI6XG4iICsKKwkJCSIgICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihcIkJc
Iik7XG4iICsKKwkJCSIgICAgICAgIGJyZWFrO1xuIiArCisJCQkiICAgIH1cbiIgKworCQkJIiAg
fVxuIiArCisJCQkifVxuIiArCisJCQkiXG4iICsKKwkJCSJwdWJsaWMgY2xhc3MgWCBpbXBsZW1l
bnRzIEkge1xuIiArCisJCQkiICBwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdz
KSB7XG4iICsKKwkJCSIJICB0cnl7XG4iICsKKwkJCSIJCSAgWCB4ID0gbmV3IFgoKTtcbiIgKwor
CQkJIgkJICB4LnRlc3QoTGV0dGVyLkEpO1xuIiArCisJCQkiCSAgfVxuIiArCisJCQkiICAgIGNh
dGNoIChFeGNlcHRpb24gZSkge1xuIiArCisJCQkiICAgICAgZS5wcmludFN0YWNrVHJhY2UoKTtc
biIgKworCQkJIiAgICB9XG4iICsKKwkJCSIgIH1cbiIgKworCQkJIn0gXG4iICsKKwkJCSJcbiIK
Kwl9KTsKK30KIH0KI1Agb3JnLmVjbGlwc2UuamR0LmNvcmUKZGlmZiAtLWdpdCBjb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1NvdXJjZVR5cGVCaW5kaW5n
LmphdmEgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9T
b3VyY2VUeXBlQmluZGluZy5qYXZhCmluZGV4IDU3MmY3MDMuLjkxNTQ0MjYgMTAwNjQ0Ci0tLSBj
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1NvdXJjZVR5
cGVCaW5kaW5nLmphdmEKKysrIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9sb29rdXAvU291cmNlVHlwZUJpbmRpbmcuamF2YQpAQCAtMzcyLDUgKzM3Miw1IEBACiAJ
CQlUeXBlQ29uc3RhbnRzLlNZTlRIRVRJQ19BU1NFUlRfRElTQUJMRUQsCiAJCQlUeXBlQmluZGlu
Zy5CT09MRUFOLAotCQkJQ2xhc3NGaWxlQ29uc3RhbnRzLkFjY0RlZmF1bHQgfCBDbGFzc0ZpbGVD
b25zdGFudHMuQWNjU3RhdGljIHwgQ2xhc3NGaWxlQ29uc3RhbnRzLkFjY1N5bnRoZXRpYyB8IENs
YXNzRmlsZUNvbnN0YW50cy5BY2NGaW5hbCwKKwkJCShpc0ludGVyZmFjZSgpID8gQ2xhc3NGaWxl
Q29uc3RhbnRzLkFjY1B1YmxpYyA6IENsYXNzRmlsZUNvbnN0YW50cy5BY2NEZWZhdWx0KSB8IENs
YXNzRmlsZUNvbnN0YW50cy5BY2NTdGF0aWMgfCBDbGFzc0ZpbGVDb25zdGFudHMuQWNjU3ludGhl
dGljIHwgQ2xhc3NGaWxlQ29uc3RhbnRzLkFjY0ZpbmFsLAogCQkJdGhpcywKIAkJCUNvbnN0YW50
Lk5vdEFDb25zdGFudCwKQEAgLTUxMiw1ICs1MTIsNSBAQAogCQkJZmllbGROYW1lLAogCQkJdGhp
cy5zY29wZS5jcmVhdGVBcnJheVR5cGUoVHlwZUJpbmRpbmcuSU5ULDEpLAotCQkJQ2xhc3NGaWxl
Q29uc3RhbnRzLkFjY1ByaXZhdGUgfCBDbGFzc0ZpbGVDb25zdGFudHMuQWNjU3RhdGljIHwgQ2xh
c3NGaWxlQ29uc3RhbnRzLkFjY1N5bnRoZXRpYywKKwkJCShpc0ludGVyZmFjZSgpID8gKENsYXNz
RmlsZUNvbnN0YW50cy5BY2NQdWJsaWMgfCBDbGFzc0ZpbGVDb25zdGFudHMuQWNjRmluYWwpIDog
Q2xhc3NGaWxlQ29uc3RhbnRzLkFjY1ByaXZhdGUpIHwgQ2xhc3NGaWxlQ29uc3RhbnRzLkFjY1N0
YXRpYyB8IENsYXNzRmlsZUNvbnN0YW50cy5BY2NTeW50aGV0aWMsCiAJCQl0aGlzLAogCQkJQ29u
c3RhbnQuTm90QUNvbnN0YW50LApkaWZmIC0tZ2l0IGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9sb29rdXAvU3ludGhldGljTWV0aG9kQmluZGluZy5qYXZhIGNvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU3ludGhldGljTWV0
aG9kQmluZGluZy5qYXZhCmluZGV4IDc4YzExMmUuLmJjNDlkMTAgMTAwNjQ0Ci0tLSBjb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1N5bnRoZXRpY01ldGhv
ZEJpbmRpbmcuamF2YQorKysgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2xvb2t1cC9TeW50aGV0aWNNZXRob2RCaW5kaW5nLmphdmEKQEAgLTE2Myw1ICsxNjMsNSBA
QAogCiAJcHVibGljIFN5bnRoZXRpY01ldGhvZEJpbmRpbmcoRmllbGRCaW5kaW5nIHRhcmdldEZp
ZWxkLCBSZWZlcmVuY2VCaW5kaW5nIGRlY2xhcmluZ0NsYXNzLCBUeXBlQmluZGluZyBlbnVtQmlu
ZGluZywgY2hhcltdIHNlbGVjdG9yKSB7Ci0JCXRoaXMubW9kaWZpZXJzID0gQ2xhc3NGaWxlQ29u
c3RhbnRzLkFjY0RlZmF1bHQgfCBDbGFzc0ZpbGVDb25zdGFudHMuQWNjU3RhdGljIHwgQ2xhc3NG
aWxlQ29uc3RhbnRzLkFjY1N5bnRoZXRpYzsKKwkJdGhpcy5tb2RpZmllcnMgPSAoZGVjbGFyaW5n
Q2xhc3MuaXNJbnRlcmZhY2UoKSA/IENsYXNzRmlsZUNvbnN0YW50cy5BY2NQdWJsaWMgOiBDbGFz
c0ZpbGVDb25zdGFudHMuQWNjRGVmYXVsdCkgfCBDbGFzc0ZpbGVDb25zdGFudHMuQWNjU3RhdGlj
IHwgQ2xhc3NGaWxlQ29uc3RhbnRzLkFjY1N5bnRoZXRpYzsKIAkJdGhpcy50YWdCaXRzIHw9IChU
YWdCaXRzLkFubm90YXRpb25SZXNvbHZlZCB8IFRhZ0JpdHMuRGVwcmVjYXRlZEFubm90YXRpb25S
ZXNvbHZlZCk7CiAJCVNvdXJjZVR5cGVCaW5kaW5nIGRlY2xhcmluZ1NvdXJjZVR5cGUgPSAoU291
cmNlVHlwZUJpbmRpbmcpIGRlY2xhcmluZ0NsYXNzOw==
</data>

          </attachment>
      

    </bug>

</bugzilla>