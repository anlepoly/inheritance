<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>461706</bug_id>
          
          <creation_ts>2015-03-09 09:01:00 -0400</creation_ts>
          <short_desc>[1.8][compiler] &quot;Unnecessary cast&quot; problems for necessary cast in lambda expression</short_desc>
          <delta_ts>2015-04-24 20:49:10 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4.1</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          <see_also>https://git.eclipse.org/r/44553</see_also>
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.5 M7</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Alexander Tissen">at</reporter>
          <assigned_to name="Sasikanth Bharadwaj">saammana</assigned_to>
          <cc>jarthana</cc>
    
    <cc>manpalat</cc>
    
    <cc>markus_keller</cc>
    
    <cc>noopur_gupta</cc>
    
    <cc>shankhba</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2528321</commentid>
    <comment_count>0</comment_count>
    <who name="Alexander Tissen">at</who>
    <bug_when>2015-03-09 09:01:02 -0400</bug_when>
    <thetext>If I call the cleanup-feature for the following code then the cast 
x -&gt; (ICondition) x
is removed and the function is reduced to Identity: x -&gt; x which causes Compiler-Errors in the subsequent reduce invokation. Obviously the cast is NOT unneccessary, since the code works fine with the cast but cant be compiled without.


public class Bug {

	private static class AndCondition implements ICondition {

		public AndCondition(ICondition cond1, ICondition cond2) {
			// todo
		}
	}

	private static class SimpleCondition implements ICondition {

	}

	private static interface ICondition {
		ICondition TRUE = new SimpleCondition();

		default ICondition and(final ICondition cond) {
			return new AndCondition(this, cond);
		}
	}

	public static void main(final String[] args) {
		final List&lt;SimpleCondition&gt; conditions = new ArrayList&lt;&gt;();

		conditions.stream()
				.map(x -&gt; (ICondition) x)
				.reduce((x, y) -&gt; x.and(y))
				.orElse(ICondition.TRUE);
	}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2528899</commentid>
    <comment_count>1</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-03-09 10:28:18 -0400</bug_when>
    <thetext>Moving to UI for investigation.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2533479</commentid>
    <comment_count>2</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2015-03-18 05:59:22 -0400</bug_when>
    <thetext>Back to Core. The compiler produces an invalid problem &quot;Unnecessary cast from Bug.SimpleCondition to Bug.ICondition&quot;. All the Quick Fix / Clean Up does is to remove the cast if the compiler reports a problem.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2535878</commentid>
    <comment_count>3</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-03-23 09:51:41 -0400</bug_when>
    <thetext>Sasi, please take a look. Might have to relax the checks made for bug 441731 perhaps?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2536243</commentid>
    <comment_count>4</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-03-24 00:39:28 -0400</bug_when>
    <thetext>It might also got something to do with CastExpression.checkNeedForAssignedCast(BlockScope, TypeBinding, CastExpression).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2537027</commentid>
    <comment_count>5</comment_count>
    <who name="Eclipse Genie">genie</who>
    <bug_when>2015-03-25 02:28:36 -0400</bug_when>
    <thetext>New Gerrit change created: https://git.eclipse.org/r/44553</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2538194</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-03-26 17:25:39 -0400</bug_when>
    <thetext>Looking at the code changes, the proposed solutions seems fine.

Unfortunately, I have a counter example of sorts:

//---
import java.util.List;
import java.util.function.Function;

public class Bug461706 {
	&lt;T extends Number&gt; List&lt;T&gt; apply (Function&lt;T, T&gt; func) {
		return null;
	}
	&lt;E&gt; E identity(E a) {
		return a;
	}	
	void test() {
		Integer i = apply (x -&gt; identity((Integer)x)).get(0);
	}
}
//---

We still report as unnecessary (it is a cast Integer -&gt; Integer!), but removing the cast creates a compile error!!

A fully precise analysis seems to require to rerun type inference with the cast removed, because the cast may have been necessary to create the situation where it is deemed unnecessary.

Still the proposed change probably improves the situation.


To analyse just the situation of &quot;return (CastType)expr;&quot;:

- This situation is not prone to the trick I did above, because that trick only works if the lambda return is a poly expression, which a cast is not (only a poly expression will feed its inner type information into inference via C-set construction in 18.5.2).

- with &quot;return (CastType)expr;&quot; the information about CastType is evaluated already during reduction, but CastType only appears on the LHS of a S -&gt; T compatibility constraint. This appears to be why &quot;(Integer)x&quot; doesn&apos;t let the above example compile (S=Integer, T=Number).


One solution would be to make a weaker warning &quot;cast may be unnecessary&quot;, so that UI can indeed trigger the rerun of inference to find out if it is really unnecessary. The weaker form would be reported for any type that was &quot;touched&quot; by type inference (not sure we can easily detect his, yet, but that&apos;s a technical problem not a conceptual one).

Or, UI could refuse to remove any casts inside a lambda, when running in cleanup mode.

Well, for Mars just avoiding this one warning may be the best we can do. Perhaps we&apos;d want to check if the lambda has elided argument types, because for typed lambdas we probably don&apos;t want to change anything.


One more thing: javac rejects my counter example. We except it since - you guessed it - 4.5M3.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2542875</commentid>
    <comment_count>7</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2015-04-07 08:09:07 -0400</bug_when>
    <thetext>(In reply to comment #6)
&gt; 
&gt; Perhaps we&apos;d want to check if the lambda has elided argument types, because for typed
&gt; lambdas we probably don&apos;t want to change anything.
&gt; 
Just curious why ... wouldn&apos;t it be better to keep the behavior same in both cases? Whether inferred or user provided, the cast should be reported as unnecessary only when the types used are not the same?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2544414</commentid>
    <comment_count>8</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-04-09 12:37:58 -0400</bug_when>
    <thetext>(In reply to Sasikanth Bharadwaj from comment #7)
&gt; (In reply to comment #6)
&gt; &gt; 
&gt; &gt; Perhaps we&apos;d want to check if the lambda has elided argument types, because for typed
&gt; &gt; lambdas we probably don&apos;t want to change anything.
&gt; &gt; 
&gt; Just curious why ... wouldn&apos;t it be better to keep the behavior same in both
&gt; cases? Whether inferred or user provided, the cast should be reported as
&gt; unnecessary only when the types used are not the same?

My idea was: when a lambda has elided argument types a cast may be necessary to help type inference find the desired solution. After that the cast may *appear* to be unnecessary, which it is not.
For typed lambdas I wouldn&apos;t expect this kind of feedback.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2544592</commentid>
    <comment_count>9</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2015-04-10 02:17:57 -0400</bug_when>
    <thetext>Thanks Stephan. Added the check for type elided lambda and released via
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=e254cb1235fced696c16505589db91831c0df710

Created bug 464352 to track the other case from comment 6</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2551677</commentid>
    <comment_count>10</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2015-04-24 20:49:10 -0400</bug_when>
    <thetext>Verified for 4.5M7 using I20150421-0800 build.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>