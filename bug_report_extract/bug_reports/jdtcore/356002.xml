<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>356002</bug_id>
          
          <creation_ts>2011-08-27 09:05:00 -0400</creation_ts>
          <short_desc>VerifyError &quot;Inconsistent stackmap frames&quot; for switch-string statement with nested for-loop</short_desc>
          <delta_ts>2012-12-17 08:51:33 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>3.6.2+J7</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="A. Bargull">andrebargull</reporter>
          <assigned_to name="Olivier Thomann">Olivier_Thomann</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>daniel_megert</cc>
    
    <cc>jarthana</cc>
    
    <cc>Olivier_Thomann</cc>
          
          <votes>0</votes>

      

      

      <flag name="pmc_approved"
          id="45381"
          type_id="2"
          status="+"
          setter="daniel_megert"
    />
    <flag name="review"
          id="45382"
          type_id="1"
          status="+"
          setter="jarthana"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1985253</commentid>
    <comment_count>0</comment_count>
    <who name="A. Bargull">andrebargull</who>
    <bug_when>2011-08-27 09:05:54 -0400</bug_when>
    <thetext>Build Identifier: M20110825-0847

Executing the following test case will result in a VerifyError &quot;Inconsistent stackmap frames at branch target&quot;.

Environment:
- Eclipse 3.7.1 (M20110825-0847)
- JDK7

Stacktrace:
---
Exception in thread &quot;main&quot; java.lang.VerifyError: Inconsistent stackmap frames at branch target 42 in method example.Testcase.normalize()V at offset 39
	at java.lang.Class.getDeclaredMethods0(Native Method)
	at java.lang.Class.privateGetDeclaredMethods(Class.java:2442)
	at java.lang.Class.getMethod0(Class.java:2685)
	at java.lang.Class.getMethod(Class.java:1620)
	at sun.launcher.LauncherHelper.getMainMethod(LauncherHelper.java:484)
	at sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:476)
---

---
public class Testcase {
    public static void main(String args[]) { }

    public static void normalize() {
        int k;
        switch (&quot;&quot;) {
        case &quot;&quot;:
            for (int j = 0; j &lt; 0;) { break; }
            k = 0;
        }
    }
}
---

Reproducible: Always</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1985280</commentid>
    <comment_count>1</comment_count>
    <who name="A. Bargull">andrebargull</who>
    <bug_when>2011-08-27 12:56:49 -0400</bug_when>
    <thetext>Simplified test case:
---
public static void normalize0() {
    switch (&quot;&quot;) {
    default:
    {
        int j = 0;
        if (j &lt; 0) ;
    }
        return;
    }
}
---</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1985411</commentid>
    <comment_count>2</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-08-28 19:16:28 -0400</bug_when>
    <thetext>Reproduced with latest in 3.7.maintenance.
I am investigating. This might be a candidate for 3.7.1 as it is a verify error. Verify errors are severe issues.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1985717</commentid>
    <comment_count>3</comment_count>
      <attachid>202328</attachid>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-08-29 10:35:20 -0400</bug_when>
    <thetext>Created attachment 202328
Proposed fix + regression tests

Two things:
1) The secret local must be created before the switch&apos;s statements are resolved. If one of them is a block that defines more locals, the locals overlap and it returns a VerifyError.
2) When there is no cases statements, the value generated by the invoke hashcode call must be popped from the stack. Otherwise we &quot;keep&quot; a value on the stack after the switch statement is done. This tends to generate bigger stack map frames.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1985722</commentid>
    <comment_count>4</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-08-29 10:37:15 -0400</bug_when>
    <thetext>Daniel, pmc approval is required for 3.7.1 release.
Jay, please review asap.

Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1985752</commentid>
    <comment_count>5</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2011-08-29 10:56:12 -0400</bug_when>
    <thetext>+1. This needs to be fixed for 3.7.1.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1985853</commentid>
    <comment_count>6</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2011-08-29 12:58:28 -0400</bug_when>
    <thetext>Patch looks good to me</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1985873</commentid>
    <comment_count>7</comment_count>
      <attachid>202347</attachid>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-08-29 13:24:21 -0400</bug_when>
    <thetext>Created attachment 202347
Proposed fix + regression tests (3.7.x)

Same patch for 3.7.1 where the error message is slightly different from 3.8.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1985874</commentid>
    <comment_count>8</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-08-29 13:24:47 -0400</bug_when>
    <thetext>This affects the tests only. Not the code itself.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1986554</commentid>
    <comment_count>9</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-08-30 13:32:02 -0400</bug_when>
    <thetext>Released for 3.7.1RC3 and 3.8M2.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1988922</commentid>
    <comment_count>10</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2011-09-05 05:43:38 -0400</bug_when>
    <thetext>Verified for 3.7.1 with build M20110831-1030.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1993524</commentid>
    <comment_count>11</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-09-14 12:27:46 -0400</bug_when>
    <thetext>Verified for 3.8M2 using build I20110911-2000.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2195238</commentid>
    <comment_count>12</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-12-17 08:49:14 -0500</bug_when>
    <thetext>For the record, this fix was also released in R3_6_maintenance_Java7 via commit 85bffda76894743d59fada2a6e096ed63bf7a359</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>202328</attachid>
            <date>2011-08-29 10:35:00 -0400</date>
            <delta_ts>2011-08-29 10:35:20 -0400</delta_ts>
            <desc>Proposed fix + regression tests</desc>
            <filename>patch_356002.txt</filename>
            <type>text/plain</type>
            <size>6701</size>
            <attacher name="Olivier Thomann">Olivier_Thomann</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMA0KI1Agb3JnLmVjbGlwc2UuamR0LmNvcmUN
CkluZGV4OiBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1N3
aXRjaFN0YXRlbWVudC5qYXZhDQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09DQpSQ1MgZmlsZTogL2N2c3Jvb3QvZWNsaXBz
ZS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvYXN0L1N3aXRjaFN0YXRlbWVudC5qYXZhLHYNCnJldHJpZXZpbmcgcmV2aXNpb24g
MS44MA0KZGlmZiAtdSAtcjEuODAgU3dpdGNoU3RhdGVtZW50LmphdmENCi0tLSBjb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1N3aXRjaFN0YXRlbWVudC5qYXZh
CTI4IEp1bCAyMDExIDE3OjA2OjU5IC0wMDAwCTEuODANCisrKyBjb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1N3aXRjaFN0YXRlbWVudC5qYXZhCTI5IEF1ZyAy
MDExIDE0OjMxOjMwIC0wMDAwDQpAQCAtMTc1LDcgKzE3NSw2IEBADQogCQkJfQ0KIA0KIAkJCWZp
bmFsIGJvb2xlYW4gaGFzQ2FzZXMgPSB0aGlzLmNhc2VDb3VudCAhPSAwOw0KLQkJCWZpbmFsIGJv
b2xlYW4gdmFsdWVSZXF1aXJlZCA9IHRoaXMuZXhwcmVzc2lvbi5jb25zdGFudCA9PSBDb25zdGFu
dC5Ob3RBQ29uc3RhbnQgfHwgaGFzQ2FzZXM7DQogDQogCQkJU3RyaW5nU3dpdGNoQ2FzZSBbXSBz
dHJpbmdDYXNlcyA9IG5ldyBTdHJpbmdTd2l0Y2hDYXNlW3RoaXMuY2FzZUNvdW50XTsgLy8gbWF5
IGhhdmUgdG8gc2hyaW5rIGxhdGVyIGlmIG11bHRpcGxlIHN0cmluZ3MgaGFzaCB0byBzYW1lIGNv
ZGUuDQogCQkJQnJhbmNoTGFiZWxbXSBzb3VyY2VDYXNlTGFiZWxzID0gbmV3IEJyYW5jaExhYmVs
W3RoaXMuY2FzZUNvdW50XTsNCkBAIC0yNDIsNyArMjQxLDcgQEANCiAJCQkJCWNvZGVTdHJlYW0u
aWZuZShzdHJpbmdDYXNlc1tpXS5sYWJlbCk7DQogCQkJCX0NCiAJCQkJY29kZVN0cmVhbS5nb3Rv
XyhkZWZhdWx0QnJhbmNoTGFiZWwpOw0KLQkJCX0gZWxzZSBpZiAodmFsdWVSZXF1aXJlZCkgew0K
KwkJCX0gZWxzZSB7DQogCQkJCWNvZGVTdHJlYW0ucG9wKCk7DQogCQkJfQ0KIA0KQEAgLTQ3NCw2
ICs0NzMsMTUgQEANCiAJCQkJCWV4cHJlc3Npb25UeXBlID0gbnVsbDsgLy8gZmF1bHQtdG9sZXJh
bmNlOiBpZ25vcmUgdHlwZSBtaXNtYXRjaCBmcm9tIGNvbnN0YW50cyBmcm9tIGhlcmVvbg0KIAkJ
CQl9DQogCQkJfQ0KKwkJCWlmIChpc1N0cmluZ1N3aXRjaCkgew0KKwkJCQkvLyB0aGUgc2VjcmV0
IHZhcmlhYmxlIHNob3VsZCBiZSBjcmVhdGVkIGJlZm9yZSBpdGVyYXRpbmcgb3ZlciB0aGUgc3dp
dGNoJ3Mgc3RhdGVtZW50cyB0aGF0IGNvdWxkDQorCQkJCS8vIGNyZWF0ZSBtb3JlIGxvY2Fscy4g
VGhpcyBtdXN0IGJlIGRvbmUgdG8gcHJldmVudCBvdmVybGFwcGluZyBvZiBsb2NhbHMNCisJCQkJ
Ly8gU2VlIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNTYw
MDINCisJCQkJdGhpcy5kaXNwYXRjaFN0cmluZ0NvcHkgID0gbmV3IExvY2FsVmFyaWFibGVCaW5k
aW5nKFNlY3JldFN0cmluZ1ZhcmlhYmxlTmFtZSwgdXBwZXJTY29wZS5nZXRKYXZhTGFuZ1N0cmlu
ZygpLCBDbGFzc0ZpbGVDb25zdGFudHMuQWNjRGVmYXVsdCwgZmFsc2UpOw0KKwkJCQl1cHBlclNj
b3BlLmFkZExvY2FsVmFyaWFibGUodGhpcy5kaXNwYXRjaFN0cmluZ0NvcHkpOw0KKwkJCQl0aGlz
LmRpc3BhdGNoU3RyaW5nQ29weS5zZXRDb25zdGFudChDb25zdGFudC5Ob3RBQ29uc3RhbnQpOw0K
KwkJCQl0aGlzLmRpc3BhdGNoU3RyaW5nQ29weS51c2VGbGFnID0gTG9jYWxWYXJpYWJsZUJpbmRp
bmcuVVNFRDsNCisJCQl9DQogCQkJaWYgKHRoaXMuc3RhdGVtZW50cyAhPSBudWxsKSB7DQogCQkJ
CXRoaXMuc2NvcGUgPSBuZXcgQmxvY2tTY29wZSh1cHBlclNjb3BlKTsNCiAJCQkJaW50IGxlbmd0
aDsNCkBAIC01MjIsMTIgKzUzMCw2IEBADQogCQkJCQl1cHBlclNjb3BlLnByb2JsZW1SZXBvcnRl
cigpLnVuZG9jdW1lbnRlZEVtcHR5QmxvY2sodGhpcy5ibG9ja1N0YXJ0LCB0aGlzLnNvdXJjZUVu
ZCk7DQogCQkJCX0NCiAJCQl9DQotCQkJaWYgKGlzU3RyaW5nU3dpdGNoKSB7DQotCQkJCXRoaXMu
ZGlzcGF0Y2hTdHJpbmdDb3B5ICA9IG5ldyBMb2NhbFZhcmlhYmxlQmluZGluZyhTZWNyZXRTdHJp
bmdWYXJpYWJsZU5hbWUsIHVwcGVyU2NvcGUuZ2V0SmF2YUxhbmdTdHJpbmcoKSwgQ2xhc3NGaWxl
Q29uc3RhbnRzLkFjY0RlZmF1bHQsIGZhbHNlKTsNCi0JCQkJdXBwZXJTY29wZS5hZGRMb2NhbFZh
cmlhYmxlKHRoaXMuZGlzcGF0Y2hTdHJpbmdDb3B5KTsNCi0JCQkJdGhpcy5kaXNwYXRjaFN0cmlu
Z0NvcHkuc2V0Q29uc3RhbnQoQ29uc3RhbnQuTm90QUNvbnN0YW50KTsNCi0JCQkJdGhpcy5kaXNw
YXRjaFN0cmluZ0NvcHkudXNlRmxhZyA9IExvY2FsVmFyaWFibGVCaW5kaW5nLlVTRUQ7DQotCQkJ
fQ0KIAkJCS8vIGZvciBlbnVtIHN3aXRjaCwgY2hlY2sgaWYgYWxsIGNvbnN0YW50cyBhcmUgYWNj
b3VudGVkIGZvciAoaWYgbm8gZGVmYXVsdCkNCiAJCQlpZiAoaXNFbnVtU3dpdGNoICYmIHRoaXMu
ZGVmYXVsdENhc2UgPT0gbnVsbA0KIAkJCQkJJiYgdXBwZXJTY29wZS5jb21waWxlck9wdGlvbnMo
KS5nZXRTZXZlcml0eShDb21waWxlck9wdGlvbnMuSW5jb21wbGV0ZUVudW1Td2l0Y2gpICE9IFBy
b2JsZW1TZXZlcml0aWVzLklnbm9yZSkgew0KI1Agb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMu
Y29tcGlsZXINCkluZGV4OiBzcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIv
cmVncmVzc2lvbi9Td2l0Y2hUZXN0LmphdmENCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NClJDUyBmaWxlOiAvY3Zzcm9v
dC9lY2xpcHNlL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1N3aXRjaFRlc3QuamF2YSx2
DQpyZXRyaWV2aW5nIHJldmlzaW9uIDEuMjkNCmRpZmYgLXUgLXIxLjI5IFN3aXRjaFRlc3QuamF2
YQ0KLS0tIHNyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9u
L1N3aXRjaFRlc3QuamF2YQk5IEF1ZyAyMDExIDE0OjMyOjQ0IC0wMDAwCTEuMjkNCisrKyBzcmMv
b3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9Td2l0Y2hUZXN0
LmphdmEJMjkgQXVnIDIwMTEgMTQ6MzE6MzAgLTAwMDANCkBAIC0zMCw2ICszMCw3IEBADQogDQog
c3RhdGljIHsNCiAvLwlURVNUU19OVU1CRVJTID0gbmV3IGludFtdIHsgMjIgfTsNCisvLwlURVNU
U19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7ICJ0ZXN0Rm9yMzU2MDAyIiwgInRlc3RGb3IzNTYwMDJf
MiIsICJ0ZXN0Rm9yMzU2MDAyXzMiIH07DQogfQ0KIHB1YmxpYyBTd2l0Y2hUZXN0KFN0cmluZyBu
YW1lKSB7DQogCXN1cGVyKG5hbWUpOw0KQEAgLTIwMjksNiArMjAzMCwxMDkgQEANCiAJCQkJCQkJ
CQkJICJET05FIik7DQogCX0NCiB9DQorcHVibGljIHZvaWQgdGVzdEZvcjM1NjAwMigpIHsNCisJ
U3RyaW5nIGVycm9yTXNnID0gCQkNCisJCQkiLS0tLS0tLS0tLVxuIiArIA0KKwkJCSIxLiBFUlJP
UiBpbiBYLmphdmEgKGF0IGxpbmUgNilcbiIgKyANCisJCQkiCXN3aXRjaCAoZm9vKCkpIHtcbiIg
KyANCisJCQkiCSAgICAgICAgXl5eXl5cbiIgKyANCisJCQkiQ2Fubm90IHN3aXRjaCBvbiBhIHZh
bHVlIG9mIHR5cGUgU3RyaW5nIGZvciBzb3VyY2UgbGV2ZWwgYmVsb3cgMS43LiBPbmx5IGNvbnZl
cnRpYmxlIGludCB2YWx1ZXMgb3IgZW51bSB2YXJpYWJsZXMgYXJlIHBlcm1pdHRlZFxuIiArIA0K
KwkJCSItLS0tLS0tLS0tXG4iOw0KKwkNCisJU3RyaW5nIFtdIHNvdXJjZUZpbGVzID0gDQorCQlu
ZXcgU3RyaW5nW10gew0KKwkJIlguamF2YSIsDQorCQkicHVibGljIGNsYXNzIFgge1xuIiArIA0K
KwkJIglwcml2YXRlIHN0YXRpYyBTdHJpbmcgZm9vKCkge1xuIiArIA0KKwkJIgkJcmV0dXJuIFwi
XCI7XG4iICsgDQorCQkiCX1cbiIgKyANCisJCSIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3Ry
aW5nW10gYXJncykge1xuIiArIA0KKwkJIgkJc3dpdGNoIChmb28oKSkge1xuIiArIA0KKwkJIgkJ
CWRlZmF1bHQ6IHtcbiIgKyANCisJCSIJCQkJaW50IGogPSAwO1xuIiArIA0KKwkJIgkJCQlpZiAo
aiA8PSAwKVxuIiArIA0KKwkJIgkJCQkJU3lzdGVtLm91dC5wcmludGxuKFwiRE9ORVwiKTtcbiIg
Kw0KKwkJIgkJCX1cbiIgKyANCisJCSIJCQlyZXR1cm47XG4iICsgDQorCQkiCQl9XG4iICsgDQor
CQkiCX1cbiIgKyANCisJCSJ9IiwNCisJfTsNCisJaWYgKHRoaXMuY29tcGxpYW5jZUxldmVsIDwg
SkRLTGV2ZWxTdXBwb3J0aW5nU3RyaW5nU3dpdGNoKSB7DQorCQl0aGlzLnJ1bk5lZ2F0aXZlVGVz
dChzb3VyY2VGaWxlcywgZXJyb3JNc2cpOw0KKwl9IGVsc2Ugew0KKwkJdGhpcy5ydW5Db25mb3Jt
VGVzdChzb3VyY2VGaWxlcywgIkRPTkUiKTsNCisJfQ0KK30NCitwdWJsaWMgdm9pZCB0ZXN0Rm9y
MzU2MDAyXzIoKSB7DQorCVN0cmluZyBlcnJvck1zZyA9IAkJDQorCQkJIi0tLS0tLS0tLS1cbiIg
KyANCisJCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDMpXG4iICsgDQorCQkJIglzd2l0
Y2ggKFwiXCIpIHtcbiIgKyANCisJCQkiCSAgICAgICAgXl5cbiIgKyANCisJCQkiQ2Fubm90IHN3
aXRjaCBvbiBhIHZhbHVlIG9mIHR5cGUgU3RyaW5nIGZvciBzb3VyY2UgbGV2ZWwgYmVsb3cgMS43
LiBPbmx5IGNvbnZlcnRpYmxlIGludCB2YWx1ZXMgb3IgZW51bSB2YXJpYWJsZXMgYXJlIHBlcm1p
dHRlZFxuIiArIA0KKwkJCSItLS0tLS0tLS0tXG4iOw0KKwkNCisJU3RyaW5nIFtdIHNvdXJjZUZp
bGVzID0gDQorCQluZXcgU3RyaW5nW10gew0KKwkJIlguamF2YSIsDQorCQkicHVibGljIGNsYXNz
IFgge1xuIiArIA0KKwkJIglwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7
XG4iICsgDQorCQkiCQlzd2l0Y2ggKFwiXCIpIHtcbiIgKyANCisJCSIJCQlkZWZhdWx0OiB7XG4i
ICsgDQorCQkiCQkJCWludCBqID0gMDtcbiIgKyANCisJCSIJCQkJaWYgKGogPD0gMClcbiIgKyAN
CisJCSIJCQkJCVN5c3RlbS5vdXQucHJpbnRsbihcIkRPTkVcIik7XG4iICsNCisJCSIJCQl9XG4i
ICsgDQorCQkiCQkJcmV0dXJuO1xuIiArIA0KKwkJIgkJfVxuIiArIA0KKwkJIgl9XG4iICsgDQor
CQkifSIsDQorCX07DQorCWlmICh0aGlzLmNvbXBsaWFuY2VMZXZlbCA8IEpES0xldmVsU3VwcG9y
dGluZ1N0cmluZ1N3aXRjaCkgew0KKwkJdGhpcy5ydW5OZWdhdGl2ZVRlc3Qoc291cmNlRmlsZXMs
IGVycm9yTXNnKTsNCisJfSBlbHNlIHsNCisJCXRoaXMucnVuQ29uZm9ybVRlc3Qoc291cmNlRmls
ZXMsICJET05FIik7DQorCX0NCit9DQorcHVibGljIHZvaWQgdGVzdEZvcjM1NjAwMl8zKCkgew0K
KwlTdHJpbmcgZXJyb3JNc2cgPQ0KKwkJCSItLS0tLS0tLS0tXG4iICsgDQorCQkJIjEuIEVSUk9S
IGluIFguamF2YSAoYXQgbGluZSA3KVxuIiArIA0KKwkJCSIJc3dpdGNoIChmb28oKSkge1xuIiAr
IA0KKwkJCSIJICAgICAgICBeXl5eXlxuIiArIA0KKwkJCSJDYW5ub3Qgc3dpdGNoIG9uIGEgdmFs
dWUgb2YgdHlwZSBTdHJpbmcgZm9yIHNvdXJjZSBsZXZlbCBiZWxvdyAxLjcuIE9ubHkgY29udmVy
dGlibGUgaW50IHZhbHVlcyBvciBlbnVtIHZhcmlhYmxlcyBhcmUgcGVybWl0dGVkXG4iICsgDQor
CQkJIi0tLS0tLS0tLS1cbiI7DQorCQ0KKwlTdHJpbmcgW10gc291cmNlRmlsZXMgPQ0KKwkJbmV3
IFN0cmluZ1tdIHsNCisJCSJYLmphdmEiLA0KKwkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKyANCisJ
CSIJcHJpdmF0ZSBzdGF0aWMgU3RyaW5nIGZvbygpIHtcbiIgKyANCisJCSIJCXJldHVybiBudWxs
O1xuIiArIA0KKwkJIgl9XG4iICsgDQorCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmlu
Z1tdIGFyZ3MpIHtcbiIgKw0KKwkJIgkJdHJ5IHtcbiIgKw0KKwkJIgkJCXN3aXRjaCAoZm9vKCkp
IHtcbiIgKyANCisJCSIJCQkJZGVmYXVsdDoge1xuIiArIA0KKwkJIgkJCQkJaW50IGogPSAwO1xu
IiArIA0KKwkJIgkJCQkJaWYgKGogPD0gMClcbiIgKyANCisJCSIJCQkJCQk7XG4iICsNCisJCSIJ
CQkJfVxuIiArIA0KKwkJIgkJCQlyZXR1cm47XG4iICsgDQorCQkiCQkJfVxuIiArIA0KKwkJIgkJ
fSBjYXRjaChOdWxsUG9pbnRlckV4Y2VwdGlvbiBlKSB7XG4iICsNCisJCSIJCQlTeXN0ZW0ub3V0
LnByaW50bG4oXCJET05FXCIpO1xuIiArDQorCQkiCQl9XG4iICsNCisJCSIJfVxuIiArIA0KKwkJ
In0iLA0KKwl9Ow0KKwlpZiAodGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBKREtMZXZlbFN1cHBvcnRp
bmdTdHJpbmdTd2l0Y2gpIHsNCisJCXRoaXMucnVuTmVnYXRpdmVUZXN0KHNvdXJjZUZpbGVzLCBl
cnJvck1zZyk7DQorCX0gZWxzZSB7DQorCQl0aGlzLnJ1bkNvbmZvcm1UZXN0KHNvdXJjZUZpbGVz
LCAiRE9ORSIpOw0KKwl9DQorfQ0KIHB1YmxpYyBzdGF0aWMgQ2xhc3MgdGVzdENsYXNzKCkgew0K
IAlyZXR1cm4gU3dpdGNoVGVzdC5jbGFzczsNCiB9DQo=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>202347</attachid>
            <date>2011-08-29 13:24:00 -0400</date>
            <delta_ts>2011-08-29 13:24:21 -0400</delta_ts>
            <desc>Proposed fix + regression tests (3.7.x)</desc>
            <filename>patch_356002_37x.txt</filename>
            <type>text/plain</type>
            <size>7613</size>
            <attacher name="Olivier Thomann">Olivier_Thomann</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMA0KI1Agb3JnLmVjbGlwc2UuamR0LmNvcmUN
CkluZGV4OiBidWlsZG5vdGVzX2pkdC1jb3JlLmh0bWwNCj09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NClJDUyBmaWxlOiAv
Y3Zzcm9vdC9lY2xpcHNlL29yZy5lY2xpcHNlLmpkdC5jb3JlL2J1aWxkbm90ZXNfamR0LWNvcmUu
aHRtbCx2DQpyZXRyaWV2aW5nIHJldmlzaW9uIDEuNzg2MC4yLjIzDQpkaWZmIC11IC1yMS43ODYw
LjIuMjMgYnVpbGRub3Rlc19qZHQtY29yZS5odG1sDQotLS0gYnVpbGRub3Rlc19qZHQtY29yZS5o
dG1sCTI5IEF1ZyAyMDExIDE2OjM5OjQxIC0wMDAwCTEuNzg2MC4yLjIzDQorKysgYnVpbGRub3Rl
c19qZHQtY29yZS5odG1sCTI5IEF1ZyAyMDExIDE3OjIzOjE3IC0wMDAwDQpAQCAtNTEsNyArNTEs
OSBAQA0KIDxoMj5XaGF0J3MgbmV3IGluIHRoaXMgZHJvcDwvaDI+DQogDQogPGgzPlByb2JsZW0g
UmVwb3J0cyBGaXhlZDwvaDM+DQotPGEgaHJlZj0iaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1
Z3Mvc2hvd19idWcuY2dpP2lkPTM1MDA5NSI+MzUwMDk1PC9hPg0KKzxhIGhyZWY9Imh0dHBzOi8v
YnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNTYwMDIiPjM1NjAwMjwvYT4N
CitWZXJpZnlFcnJvciAmcXVvdDtJbmNvbnNpc3RlbnQgc3RhY2ttYXAgZnJhbWVzJnF1b3Q7IGZv
ciBzd2l0Y2gtc3RyaW5nIHN0YXRlbWVudCB3aXRoIG5lc3RlZCBmb3ItbG9vcA0KKzxicj48YSBo
cmVmPSJodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzUwMDk1
Ij4zNTAwOTU8L2E+DQogVGhlIDIwMDB0aCAoMC1iYXNlZCkgZW51bSBjb25zdGFudCBpcyBudWxs
DQogDQogPGEgbmFtZT0idl9CNzVfUjM3eCI+PC9hPg0KSW5kZXg6IGNvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvU3dpdGNoU3RhdGVtZW50LmphdmENCj09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT0NClJDUyBmaWxlOiAvY3Zzcm9vdC9lY2xpcHNlL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvU3dpdGNoU3RhdGVt
ZW50LmphdmEsdg0KcmV0cmlldmluZyByZXZpc2lvbiAxLjc5LjQuMQ0KZGlmZiAtdSAtcjEuNzku
NC4xIFN3aXRjaFN0YXRlbWVudC5qYXZhDQotLS0gY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2FzdC9Td2l0Y2hTdGF0ZW1lbnQuamF2YQkyOCBKdWwgMjAxMSAxNzo1
MjoxNiAtMDAwMAkxLjc5LjQuMQ0KKysrIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hc3QvU3dpdGNoU3RhdGVtZW50LmphdmEJMjkgQXVnIDIwMTEgMTc6MjM6MTcg
LTAwMDANCkBAIC0xNzUsNyArMTc1LDYgQEANCiAJCQl9DQogDQogCQkJZmluYWwgYm9vbGVhbiBo
YXNDYXNlcyA9IHRoaXMuY2FzZUNvdW50ICE9IDA7DQotCQkJZmluYWwgYm9vbGVhbiB2YWx1ZVJl
cXVpcmVkID0gdGhpcy5leHByZXNzaW9uLmNvbnN0YW50ID09IENvbnN0YW50Lk5vdEFDb25zdGFu
dCB8fCBoYXNDYXNlczsNCiANCiAJCQlTdHJpbmdTd2l0Y2hDYXNlIFtdIHN0cmluZ0Nhc2VzID0g
bmV3IFN0cmluZ1N3aXRjaENhc2VbdGhpcy5jYXNlQ291bnRdOyAvLyBtYXkgaGF2ZSB0byBzaHJp
bmsgbGF0ZXIgaWYgbXVsdGlwbGUgc3RyaW5ncyBoYXNoIHRvIHNhbWUgY29kZS4NCiAJCQlCcmFu
Y2hMYWJlbFtdIHNvdXJjZUNhc2VMYWJlbHMgPSBuZXcgQnJhbmNoTGFiZWxbdGhpcy5jYXNlQ291
bnRdOw0KQEAgLTI0Miw3ICsyNDEsNyBAQA0KIAkJCQkJY29kZVN0cmVhbS5pZm5lKHN0cmluZ0Nh
c2VzW2ldLmxhYmVsKTsNCiAJCQkJfQ0KIAkJCQljb2RlU3RyZWFtLmdvdG9fKGRlZmF1bHRCcmFu
Y2hMYWJlbCk7DQotCQkJfSBlbHNlIGlmICh2YWx1ZVJlcXVpcmVkKSB7DQorCQkJfSBlbHNlIHsN
CiAJCQkJY29kZVN0cmVhbS5wb3AoKTsNCiAJCQl9DQogDQpAQCAtNDc0LDYgKzQ3MywxNSBAQA0K
IAkJCQkJZXhwcmVzc2lvblR5cGUgPSBudWxsOyAvLyBmYXVsdC10b2xlcmFuY2U6IGlnbm9yZSB0
eXBlIG1pc21hdGNoIGZyb20gY29uc3RhbnRzIGZyb20gaGVyZW9uDQogCQkJCX0NCiAJCQl9DQor
CQkJaWYgKGlzU3RyaW5nU3dpdGNoKSB7DQorCQkJCS8vIHRoZSBzZWNyZXQgdmFyaWFibGUgc2hv
dWxkIGJlIGNyZWF0ZWQgYmVmb3JlIGl0ZXJhdGluZyBvdmVyIHRoZSBzd2l0Y2gncyBzdGF0ZW1l
bnRzIHRoYXQgY291bGQNCisJCQkJLy8gY3JlYXRlIG1vcmUgbG9jYWxzLiBUaGlzIG11c3QgYmUg
ZG9uZSB0byBwcmV2ZW50IG92ZXJsYXBwaW5nIG9mIGxvY2Fscw0KKwkJCQkvLyBTZWUgaHR0cHM6
Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM1NjAwMg0KKwkJCQl0aGlz
LmRpc3BhdGNoU3RyaW5nQ29weSAgPSBuZXcgTG9jYWxWYXJpYWJsZUJpbmRpbmcoU2VjcmV0U3Ry
aW5nVmFyaWFibGVOYW1lLCB1cHBlclNjb3BlLmdldEphdmFMYW5nU3RyaW5nKCksIENsYXNzRmls
ZUNvbnN0YW50cy5BY2NEZWZhdWx0LCBmYWxzZSk7DQorCQkJCXVwcGVyU2NvcGUuYWRkTG9jYWxW
YXJpYWJsZSh0aGlzLmRpc3BhdGNoU3RyaW5nQ29weSk7DQorCQkJCXRoaXMuZGlzcGF0Y2hTdHJp
bmdDb3B5LnNldENvbnN0YW50KENvbnN0YW50Lk5vdEFDb25zdGFudCk7DQorCQkJCXRoaXMuZGlz
cGF0Y2hTdHJpbmdDb3B5LnVzZUZsYWcgPSBMb2NhbFZhcmlhYmxlQmluZGluZy5VU0VEOw0KKwkJ
CX0NCiAJCQlpZiAodGhpcy5zdGF0ZW1lbnRzICE9IG51bGwpIHsNCiAJCQkJdGhpcy5zY29wZSA9
IG5ldyBCbG9ja1Njb3BlKHVwcGVyU2NvcGUpOw0KIAkJCQlpbnQgbGVuZ3RoOw0KQEAgLTUyMiwx
MiArNTMwLDYgQEANCiAJCQkJCXVwcGVyU2NvcGUucHJvYmxlbVJlcG9ydGVyKCkudW5kb2N1bWVu
dGVkRW1wdHlCbG9jayh0aGlzLmJsb2NrU3RhcnQsIHRoaXMuc291cmNlRW5kKTsNCiAJCQkJfQ0K
IAkJCX0NCi0JCQlpZiAoaXNTdHJpbmdTd2l0Y2gpIHsNCi0JCQkJdGhpcy5kaXNwYXRjaFN0cmlu
Z0NvcHkgID0gbmV3IExvY2FsVmFyaWFibGVCaW5kaW5nKFNlY3JldFN0cmluZ1ZhcmlhYmxlTmFt
ZSwgdXBwZXJTY29wZS5nZXRKYXZhTGFuZ1N0cmluZygpLCBDbGFzc0ZpbGVDb25zdGFudHMuQWNj
RGVmYXVsdCwgZmFsc2UpOw0KLQkJCQl1cHBlclNjb3BlLmFkZExvY2FsVmFyaWFibGUodGhpcy5k
aXNwYXRjaFN0cmluZ0NvcHkpOw0KLQkJCQl0aGlzLmRpc3BhdGNoU3RyaW5nQ29weS5zZXRDb25z
dGFudChDb25zdGFudC5Ob3RBQ29uc3RhbnQpOw0KLQkJCQl0aGlzLmRpc3BhdGNoU3RyaW5nQ29w
eS51c2VGbGFnID0gTG9jYWxWYXJpYWJsZUJpbmRpbmcuVVNFRDsNCi0JCQl9DQogCQkJLy8gZm9y
IGVudW0gc3dpdGNoLCBjaGVjayBpZiBhbGwgY29uc3RhbnRzIGFyZSBhY2NvdW50ZWQgZm9yIChp
ZiBubyBkZWZhdWx0KQ0KIAkJCWlmIChpc0VudW1Td2l0Y2ggJiYgdGhpcy5kZWZhdWx0Q2FzZSA9
PSBudWxsDQogCQkJCQkmJiB1cHBlclNjb3BlLmNvbXBpbGVyT3B0aW9ucygpLmdldFNldmVyaXR5
KENvbXBpbGVyT3B0aW9ucy5JbmNvbXBsZXRlRW51bVN3aXRjaCkgIT0gUHJvYmxlbVNldmVyaXRp
ZXMuSWdub3JlKSB7DQojUCBvcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlcg0KSW5k
ZXg6IHNyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1N3
aXRjaFRlc3QuamF2YQ0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PQ0KUkNTIGZpbGU6IC9jdnNyb290L2VjbGlwc2Uvb3Jn
LmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vU3dpdGNoVGVzdC5qYXZhLHYNCnJldHJpZXZpbmcg
cmV2aXNpb24gMS4yNy40LjENCmRpZmYgLXUgLXIxLjI3LjQuMSBTd2l0Y2hUZXN0LmphdmENCi0t
LSBzcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9Td2l0
Y2hUZXN0LmphdmEJMjggSnVsIDIwMTEgMTc6NTI6MDUgLTAwMDAJMS4yNy40LjENCisrKyBzcmMv
b3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9Td2l0Y2hUZXN0
LmphdmEJMjkgQXVnIDIwMTEgMTc6MjM6MTggLTAwMDANCkBAIC0zMCw2ICszMCw3IEBADQogDQog
c3RhdGljIHsNCiAvLwlURVNUU19OVU1CRVJTID0gbmV3IGludFtdIHsgMjIgfTsNCisvLwlURVNU
U19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7ICJ0ZXN0Rm9yMzU2MDAyIiwgInRlc3RGb3IzNTYwMDJf
MiIsICJ0ZXN0Rm9yMzU2MDAyXzMiIH07DQogfQ0KIHB1YmxpYyBTd2l0Y2hUZXN0KFN0cmluZyBu
YW1lKSB7DQogCXN1cGVyKG5hbWUpOw0KQEAgLTIwMjksNiArMjAzMCwxMDkgQEANCiAJCQkJCQkJ
CQkJICJET05FIik7DQogCX0NCiB9DQorcHVibGljIHZvaWQgdGVzdEZvcjM1NjAwMigpIHsNCisJ
U3RyaW5nIGVycm9yTXNnID0gCQkNCisJCQkiLS0tLS0tLS0tLVxuIiArIA0KKwkJCSIxLiBFUlJP
UiBpbiBYLmphdmEgKGF0IGxpbmUgNilcbiIgKyANCisJCQkiCXN3aXRjaCAoZm9vKCkpIHtcbiIg
KyANCisJCQkiCSAgICAgICAgXl5eXl5cbiIgKyANCisJCQkiQ2Fubm90IHN3aXRjaCBvbiBhIHZh
bHVlIG9mIHR5cGUgU3RyaW5nIGZvciBzb3VyY2UgbGV2ZWwgYmVsb3cgMS43LiBPbmx5IGNvbnZl
cnRpYmxlIGludCB2YWx1ZXMgb3IgZW51bSBjb25zdGFudHMgYXJlIHBlcm1pdHRlZFxuIiArIA0K
KwkJCSItLS0tLS0tLS0tXG4iOw0KKwkNCisJU3RyaW5nIFtdIHNvdXJjZUZpbGVzID0gDQorCQlu
ZXcgU3RyaW5nW10gew0KKwkJIlguamF2YSIsDQorCQkicHVibGljIGNsYXNzIFgge1xuIiArIA0K
KwkJIglwcml2YXRlIHN0YXRpYyBTdHJpbmcgZm9vKCkge1xuIiArIA0KKwkJIgkJcmV0dXJuIFwi
XCI7XG4iICsgDQorCQkiCX1cbiIgKyANCisJCSIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3Ry
aW5nW10gYXJncykge1xuIiArIA0KKwkJIgkJc3dpdGNoIChmb28oKSkge1xuIiArIA0KKwkJIgkJ
CWRlZmF1bHQ6IHtcbiIgKyANCisJCSIJCQkJaW50IGogPSAwO1xuIiArIA0KKwkJIgkJCQlpZiAo
aiA8PSAwKVxuIiArIA0KKwkJIgkJCQkJU3lzdGVtLm91dC5wcmludGxuKFwiRE9ORVwiKTtcbiIg
Kw0KKwkJIgkJCX1cbiIgKyANCisJCSIJCQlyZXR1cm47XG4iICsgDQorCQkiCQl9XG4iICsgDQor
CQkiCX1cbiIgKyANCisJCSJ9IiwNCisJfTsNCisJaWYgKHRoaXMuY29tcGxpYW5jZUxldmVsIDwg
SkRLTGV2ZWxTdXBwb3J0aW5nU3RyaW5nU3dpdGNoKSB7DQorCQl0aGlzLnJ1bk5lZ2F0aXZlVGVz
dChzb3VyY2VGaWxlcywgZXJyb3JNc2cpOw0KKwl9IGVsc2Ugew0KKwkJdGhpcy5ydW5Db25mb3Jt
VGVzdChzb3VyY2VGaWxlcywgIkRPTkUiKTsNCisJfQ0KK30NCitwdWJsaWMgdm9pZCB0ZXN0Rm9y
MzU2MDAyXzIoKSB7DQorCVN0cmluZyBlcnJvck1zZyA9IAkJDQorCQkJIi0tLS0tLS0tLS1cbiIg
KyANCisJCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDMpXG4iICsgDQorCQkJIglzd2l0
Y2ggKFwiXCIpIHtcbiIgKyANCisJCQkiCSAgICAgICAgXl5cbiIgKyANCisJCQkiQ2Fubm90IHN3
aXRjaCBvbiBhIHZhbHVlIG9mIHR5cGUgU3RyaW5nIGZvciBzb3VyY2UgbGV2ZWwgYmVsb3cgMS43
LiBPbmx5IGNvbnZlcnRpYmxlIGludCB2YWx1ZXMgb3IgZW51bSBjb25zdGFudHMgYXJlIHBlcm1p
dHRlZFxuIiArIA0KKwkJCSItLS0tLS0tLS0tXG4iOw0KKwkNCisJU3RyaW5nIFtdIHNvdXJjZUZp
bGVzID0gDQorCQluZXcgU3RyaW5nW10gew0KKwkJIlguamF2YSIsDQorCQkicHVibGljIGNsYXNz
IFgge1xuIiArIA0KKwkJIglwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7
XG4iICsgDQorCQkiCQlzd2l0Y2ggKFwiXCIpIHtcbiIgKyANCisJCSIJCQlkZWZhdWx0OiB7XG4i
ICsgDQorCQkiCQkJCWludCBqID0gMDtcbiIgKyANCisJCSIJCQkJaWYgKGogPD0gMClcbiIgKyAN
CisJCSIJCQkJCVN5c3RlbS5vdXQucHJpbnRsbihcIkRPTkVcIik7XG4iICsNCisJCSIJCQl9XG4i
ICsgDQorCQkiCQkJcmV0dXJuO1xuIiArIA0KKwkJIgkJfVxuIiArIA0KKwkJIgl9XG4iICsgDQor
CQkifSIsDQorCX07DQorCWlmICh0aGlzLmNvbXBsaWFuY2VMZXZlbCA8IEpES0xldmVsU3VwcG9y
dGluZ1N0cmluZ1N3aXRjaCkgew0KKwkJdGhpcy5ydW5OZWdhdGl2ZVRlc3Qoc291cmNlRmlsZXMs
IGVycm9yTXNnKTsNCisJfSBlbHNlIHsNCisJCXRoaXMucnVuQ29uZm9ybVRlc3Qoc291cmNlRmls
ZXMsICJET05FIik7DQorCX0NCit9DQorcHVibGljIHZvaWQgdGVzdEZvcjM1NjAwMl8zKCkgew0K
KwlTdHJpbmcgZXJyb3JNc2cgPQ0KKwkJCSItLS0tLS0tLS0tXG4iICsgDQorCQkJIjEuIEVSUk9S
IGluIFguamF2YSAoYXQgbGluZSA3KVxuIiArIA0KKwkJCSIJc3dpdGNoIChmb28oKSkge1xuIiAr
IA0KKwkJCSIJICAgICAgICBeXl5eXlxuIiArIA0KKwkJCSJDYW5ub3Qgc3dpdGNoIG9uIGEgdmFs
dWUgb2YgdHlwZSBTdHJpbmcgZm9yIHNvdXJjZSBsZXZlbCBiZWxvdyAxLjcuIE9ubHkgY29udmVy
dGlibGUgaW50IHZhbHVlcyBvciBlbnVtIGNvbnN0YW50cyBhcmUgcGVybWl0dGVkXG4iICsgDQor
CQkJIi0tLS0tLS0tLS1cbiI7DQorCQ0KKwlTdHJpbmcgW10gc291cmNlRmlsZXMgPQ0KKwkJbmV3
IFN0cmluZ1tdIHsNCisJCSJYLmphdmEiLA0KKwkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKyANCisJ
CSIJcHJpdmF0ZSBzdGF0aWMgU3RyaW5nIGZvbygpIHtcbiIgKyANCisJCSIJCXJldHVybiBudWxs
O1xuIiArIA0KKwkJIgl9XG4iICsgDQorCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmlu
Z1tdIGFyZ3MpIHtcbiIgKw0KKwkJIgkJdHJ5IHtcbiIgKw0KKwkJIgkJCXN3aXRjaCAoZm9vKCkp
IHtcbiIgKyANCisJCSIJCQkJZGVmYXVsdDoge1xuIiArIA0KKwkJIgkJCQkJaW50IGogPSAwO1xu
IiArIA0KKwkJIgkJCQkJaWYgKGogPD0gMClcbiIgKyANCisJCSIJCQkJCQk7XG4iICsNCisJCSIJ
CQkJfVxuIiArIA0KKwkJIgkJCQlyZXR1cm47XG4iICsgDQorCQkiCQkJfVxuIiArIA0KKwkJIgkJ
fSBjYXRjaChOdWxsUG9pbnRlckV4Y2VwdGlvbiBlKSB7XG4iICsNCisJCSIJCQlTeXN0ZW0ub3V0
LnByaW50bG4oXCJET05FXCIpO1xuIiArDQorCQkiCQl9XG4iICsNCisJCSIJfVxuIiArIA0KKwkJ
In0iLA0KKwl9Ow0KKwlpZiAodGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBKREtMZXZlbFN1cHBvcnRp
bmdTdHJpbmdTd2l0Y2gpIHsNCisJCXRoaXMucnVuTmVnYXRpdmVUZXN0KHNvdXJjZUZpbGVzLCBl
cnJvck1zZyk7DQorCX0gZWxzZSB7DQorCQl0aGlzLnJ1bkNvbmZvcm1UZXN0KHNvdXJjZUZpbGVz
LCAiRE9ORSIpOw0KKwl9DQorfQ0KIHB1YmxpYyBzdGF0aWMgQ2xhc3MgdGVzdENsYXNzKCkgew0K
IAlyZXR1cm4gU3dpdGNoVGVzdC5jbGFzczsNCiB9DQo=
</data>

          </attachment>
      

    </bug>

</bugzilla>