<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>417759</bug_id>
          
          <creation_ts>2013-09-21 13:40:00 -0400</creation_ts>
          <short_desc>[1.8][null] NPE during null analysis</short_desc>
          <delta_ts>2013-09-22 13:50:00 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>shankhba</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2309520</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-09-21 13:40:54 -0400</bug_when>
    <thetext>BETA_JAVA8:

Following program causes the compiler to cause an NPE:

// --
import java.lang.annotation.ElementType;
import java.lang.annotation.Target;

import org.eclipse.jdt.annotation.NonNull;

@Target(ElementType.TYPE_USE)
@interface TypeAnnotation {
	
}
public class X&lt;T&gt; {
   class Y {}
	void foo(@NonNull X&lt;@NonNull ?&gt; l) { 
	}	
	public static void main(String[] args) {
		X&lt;String&gt; s = new X&lt;&gt;();
                s.foo(s); 
	}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2309599</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-09-22 13:50:00 -0400</bug_when>
    <thetext>My bad, beginner&apos;s mistake actually, thanks for catching!

Test &amp; fix released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=a51f0328f1978f4c547fe994573879b0bcceba88

I left a TODO in the code because we still need to decide a few things about where and when we will accept and interpret null annotations, notably, what happens if a wildcard / a type variable has multiple null-annotated bounds?
This would not be very useful, but the exact rules have yet to be defined. I&apos;ll address those issues via bug 392238.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>