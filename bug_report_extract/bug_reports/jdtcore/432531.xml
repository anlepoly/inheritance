<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>432531</bug_id>
          
          <creation_ts>2014-04-10 11:13:00 -0400</creation_ts>
          <short_desc>[1.8] VerifyError with anonymous subclass inside of lambda expression in the superclass constructor call</short_desc>
          <delta_ts>2014-09-17 00:40:36 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.4 M7</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Viliam Anirud">viliam</reporter>
          <assigned_to name="Sasikanth Bharadwaj">saammana</assigned_to>
          <cc>jarthana</cc>
    
    <cc>saammana</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="62123"
          type_id="1"
          status="+"
          setter="srikanth_sankaran"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2387573</commentid>
    <comment_count>0</comment_count>
    <who name="Viliam Anirud">viliam</who>
    <bug_when>2014-04-10 11:13:31 -0400</bug_when>
    <thetext>The following class will not load with due to:

Exception in thread &quot;main&quot; java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    Y.&lt;init&gt;()V @2: invokedynamic
  Reason:
    Type uninitializedThis (current frame, stack[1]) is not assignable to &apos;Y&apos;
  Current Frame:
    bci: @2
    flags: { flagThisUninit }
    locals: { uninitializedThis }
    stack: { uninitializedThis, uninitializedThis }
  Bytecode:
    0000000: 2a2a ba00 0b00 00b7 000c b1            

	at java.lang.Class.getDeclaredMethods0(Native Method)
	at java.lang.Class.privateGetDeclaredMethods(Class.java:2688)
	at java.lang.Class.getMethod0(Class.java:2937)
	at java.lang.Class.getMethod(Class.java:1771)
	at sun.launcher.LauncherHelper.validateMainClass(LauncherHelper.java:544)
	at sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:526)




The class:

import java.util.function.Supplier;

class E {
	E(Supplier&lt;Object&gt; factory) { }
}

public class Y extends E {
	Y() {
		super(() -&gt; new Object() {
		});
	}
	public static void main(String[] args) {
		new Y();
	}
}



If I convert the lambda to anonymous class, it works.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2388526</commentid>
    <comment_count>1</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-04-14 01:48:19 -0400</bug_when>
    <thetext>The Lamda Expression looks to capture the instance of the type which is not available in a constructor call.
The methods BlockScope.addAnonymousType and BlockScope.addLocalType should check for lambda.scope.isConstructorCall in addition to lambda.scope.isStatic.
Here&apos;s another variant of the same example using local type that would result in the same error.

import java.util.function.Supplier;

class E {
	E(Supplier&lt;Object&gt; factory) { }
}

public class Y extends E {
	Y() {
		super( () -&gt; {
			class Z extends E {
				Z() {
					super(new Supplier&lt;Object&gt;() {
						@Override
						public Object get() {
							// TODO Auto-generated method stub
							return new Object();
						}
					});
				}
			} 
			return new Z();
			});
	}
	public static void main(String[] args) {
		new Y();
	}
}

This example, however, results in the following compile error when javac is used
cannot reference this before supertype constructor has been called

while it compiles fine with the proposed fix, so need to investigate the spec before concluding on this one</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2391114</commentid>
    <comment_count>2</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-04-22 02:54:09 -0400</bug_when>
    <thetext>My contribution for this defect fix complies with http://www.eclipse.org/legal/CoO.php</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2392417</commentid>
    <comment_count>3</comment_count>
      <attachid>242280</attachid>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-04-24 06:51:21 -0400</bug_when>
    <thetext>Created attachment 242280
patch</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2392419</commentid>
    <comment_count>4</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-04-24 06:55:47 -0400</bug_when>
    <thetext>Patch with the proposed changes and tests attached. However, as per section 15.9.2 in the spec, it looks like we should report compile time error for the case mentioned in comment 1. This is not addressed in this patch and should be tracked in a separate issue. All java8 tests pass with these changes. Srikanth, please review</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2394402</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-04-29 02:27:31 -0400</bug_when>
    <thetext>Patch looks good. Released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=6db956e315c3bc503c9af7fee328ba723339fc27.

Thanks Sasi.

Please raise a new bug for the comment#1 case. Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2394492</commentid>
    <comment_count>6</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-04-29 04:50:41 -0400</bug_when>
    <thetext>Created bug 433735 for the case mentioned in comment #1</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2395184</commentid>
    <comment_count>7</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-04-30 02:58:14 -0400</bug_when>
    <thetext>Verified for 4.4 M7 with build I20140429-2000</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2452846</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-17 00:40:36 -0400</bug_when>
    <thetext>Two observations: 

(1) We should never add a test whose output differs from the reference 
compiler&apos;s output unless we are very sure we are right and javac is wrong. 
Test LE.test432531a is encoding wrong behavior. I have moved it to be a negative
test with https://bugs.eclipse.org/bugs/show_bug.cgi?id=433735 being fixed.

(2) The current treatment of anonymous classes brought in by the present fix
is not totally accurate. Per 15.9.5.1 we should be looking at superbinding to
see if it is one of enclosing types to see if the lambda should capture instance.
However, I am willing/inclined to leave it as is as I think field/method access and/or emulation path should catch these problems.

Sorry I didn&apos;t catch these earlier.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>242280</attachid>
            <date>2014-04-24 06:51:00 -0400</date>
            <delta_ts>2014-04-24 06:51:21 -0400</delta_ts>
            <desc>patch</desc>
            <filename>432531_eclipse.jdt.coreandtests.patch</filename>
            <type>text/plain</type>
            <size>3258</size>
            <attacher name="Sasikanth Bharadwaj">saammana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0xhbWJkYUV4cHJlc3Np
b25zVGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhRXhwcmVz
c2lvbnNUZXN0LmphdmEKaW5kZXggNjE5ZmRmMS4uNzA3YmVlYiAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rl
c3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9j
b3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEK
QEAgLTQzNjAsNiArNDM2MCw1MiBAQAogCQkJIn0iCiAJfSk7CiB9CisvLyBodHRwczovL2J1Z3Mu
ZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDMyNTMxIFsxLjhdIFZlcmlmeUVycm9y
IHdpdGggYW5vbnltb3VzIHN1YmNsYXNzIGluc2lkZSBvZiBsYW1iZGEgZXhwcmVzc2lvbiBpbiB0
aGUgc3VwZXJjbGFzcyBjb25zdHJ1Y3RvciBjYWxsCitwdWJsaWMgdm9pZCB0ZXN0NDMyNTMxKCkg
eworCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWS5qYXZhIiwg
CisJCQkiaW1wb3J0IGphdmEudXRpbC5mdW5jdGlvbi5TdXBwbGllcjtcbiIgKyAKKwkJCSJjbGFz
cyBFIHtcbiIgKyAKKwkJCSIJRShTdXBwbGllcjxPYmplY3Q+IGZhY3RvcnkpIHsgfVxuIiArIAor
CQkJIn1cbiIgKyAKKwkJCSJwdWJsaWMgY2xhc3MgWSBleHRlbmRzIEUge1xuIiArIAorCQkJIglZ
KCkge1xuIiArIAorCQkJIgkJc3VwZXIoKCkgLT4gbmV3IE9iamVjdCgpIHtcbiIgKyAKKwkJCSIJ
CX0pO1xuIiArIAorCQkJIgl9XG4iICsgCisJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0
cmluZ1tdIGFyZ3MpIHtcbiIgKyAKKwkJCSIJCW5ldyBZKCk7XG4iICsgCisJCQkiCX1cbiIgKyAK
KwkJCSJ9IgorCX0pOworfQorLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19i
dWcuY2dpP2lkPTQzMjUzMSBbMS44XSBWZXJpZnlFcnJvciB3aXRoIGFub255bW91cyBzdWJjbGFz
cyBpbnNpZGUgb2YgbGFtYmRhIGV4cHJlc3Npb24gaW4gdGhlIHN1cGVyY2xhc3MgY29uc3RydWN0
b3IgY2FsbAorcHVibGljIHZvaWQgdGVzdDQzMjUzMWEoKSB7CisJdGhpcy5ydW5Db25mb3JtVGVz
dCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJZLmphdmEiLCAKKwkJCSJpbXBvcnQgamF2YS51dGls
LmZ1bmN0aW9uLlN1cHBsaWVyO1xuIiArIAorCQkJImNsYXNzIEUge1xuIiArIAorCQkJIglFKFN1
cHBsaWVyPE9iamVjdD4gZmFjdG9yeSkgeyB9XG4iICsgCisJCQkifVxuIiArIAorCQkJInB1Ymxp
YyBjbGFzcyBZIGV4dGVuZHMgRSB7XG4iICsgCisJCQkiCVkoKSB7XG4iICsgCisJCQkiCQlzdXBl
ciggKCkgLT4ge1xuIiArIAorCQkJIgkJCWNsYXNzIFogZXh0ZW5kcyBFIHtcbiIgKyAKKwkJCSIJ
CQkJWigpIHtcbiIgKyAKKwkJCSIJCQkJCXN1cGVyKCgpIC0+IG5ldyBPYmplY3QoKSk7XG4iICsg
CisJCQkiCQkJCX1cbiIgKyAKKwkJCSIJCQl9XG4iICsgCisJCQkiCQkJcmV0dXJuIG5ldyBaKCk7
XG4iICsgCisJCQkiCQkJfSk7XG4iICsgCisJCQkiCX1cbiIgKyAKKwkJCSIJcHVibGljIHN0YXRp
YyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuIiArIAorCQkJIgkJbmV3IFkoKTtcbiIgKyAK
KwkJCSIJfVxuIiArIAorCQkJIn0iCisJfSk7Cit9CiBwdWJsaWMgc3RhdGljIENsYXNzIHRlc3RD
bGFzcygpIHsKIAlyZXR1cm4gTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmNsYXNzOwogfQpkaWZmIC0t
Z2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9CbG9ja1Njb3BlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0Jsb2Nr
U2NvcGUuamF2YQppbmRleCAzZDMxMjlhLi43OGMxZTViIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9v
a3VwL0Jsb2NrU2NvcGUuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0Jsb2NrU2NvcGUuamF2YQpA
QCAtMTAzLDcgKzEwMyw3IEBACiAJTWV0aG9kU2NvcGUgbWV0aG9kU2NvcGUgPSBtZXRob2RTY29w
ZSgpOwogCXdoaWxlIChtZXRob2RTY29wZSAhPSBudWxsICYmIG1ldGhvZFNjb3BlLnJlZmVyZW5j
ZUNvbnRleHQgaW5zdGFuY2VvZiBMYW1iZGFFeHByZXNzaW9uKSB7CiAJCUxhbWJkYUV4cHJlc3Np
b24gbGFtYmRhID0gKExhbWJkYUV4cHJlc3Npb24pIG1ldGhvZFNjb3BlLnJlZmVyZW5jZUNvbnRl
eHQ7Ci0JCWlmICghbGFtYmRhLnNjb3BlLmlzU3RhdGljKSB7CisJCWlmICghbGFtYmRhLnNjb3Bl
LmlzU3RhdGljICYmICFsYW1iZGEuc2NvcGUuaXNDb25zdHJ1Y3RvckNhbGwpIHsKIAkJCWxhbWJk
YS5zaG91bGRDYXB0dXJlSW5zdGFuY2UgPSB0cnVlOwogCQl9CiAJCW1ldGhvZFNjb3BlID0gbWV0
aG9kU2NvcGUuZW5jbG9zaW5nTWV0aG9kU2NvcGUoKTsKQEAgLTEyMSw3ICsxMjEsNyBAQAogCU1l
dGhvZFNjb3BlIG1ldGhvZFNjb3BlID0gbWV0aG9kU2NvcGUoKTsKIAl3aGlsZSAobWV0aG9kU2Nv
cGUgIT0gbnVsbCAmJiBtZXRob2RTY29wZS5yZWZlcmVuY2VDb250ZXh0IGluc3RhbmNlb2YgTGFt
YmRhRXhwcmVzc2lvbikgewogCQlMYW1iZGFFeHByZXNzaW9uIGxhbWJkYSA9IChMYW1iZGFFeHBy
ZXNzaW9uKSBtZXRob2RTY29wZS5yZWZlcmVuY2VDb250ZXh0OwotCQlpZiAoIWxhbWJkYS5zY29w
ZS5pc1N0YXRpYykgeworCQlpZiAoIWxhbWJkYS5zY29wZS5pc1N0YXRpYyAmJiAhbGFtYmRhLnNj
b3BlLmlzQ29uc3RydWN0b3JDYWxsKSB7CiAJCQlsYW1iZGEuc2hvdWxkQ2FwdHVyZUluc3RhbmNl
ID0gdHJ1ZTsKIAkJfQogCQltZXRob2RTY29wZSA9IG1ldGhvZFNjb3BlLmVuY2xvc2luZ01ldGhv
ZFNjb3BlKCk7
</data>

          </attachment>
      

    </bug>

</bugzilla>