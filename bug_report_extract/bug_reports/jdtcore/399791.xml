<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>399791</bug_id>
          
          <creation_ts>2013-02-02 23:14:00 -0500</creation_ts>
          <short_desc>[1.8][dom ast] AST APIs should support code carrying interfaces (static &amp; default methods)</short_desc>
          <delta_ts>2013-04-11 14:46:34 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          <dependson>399780</dependson>
          <blocked>399790</blocked>
    
    <blocked>403985</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>markus_keller</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="56203"
          type_id="1"
          status="+"
          setter="srikanth_sankaran"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2211414</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-02 23:14:51 -0500</bug_when>
    <thetext>BETA_JAVA8:

Interfaces can have default methods and static methods beginning Java 8.
We should stop tagging the AST as being malformed (see org.eclipse.jdt.core.dom.ASTConverter.buildBodyDeclarations(TypeDeclaration, AbstractTypeDeclaration, boolean)) and add tests to verify that the construction
looks ok.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2212154</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-05 03:50:03 -0500</bug_when>
    <thetext>Jay, please take a look</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2231914</commentid>
    <comment_count>2</comment_count>
      <attachid>228477</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-03-15 08:33:05 -0400</bug_when>
    <thetext>Created attachment 228477
Patch - WIP

Patch with test - a work in progress.

We probably need to create new modifier constants in org.eclipse.jdt.core.dom.Modifier for &apos;default&apos;. This bug isn&apos;t necessarily blocked by that. But it would be nice to get this specific question answered: Are default methods to be declared explicitly with the &apos;default&apos; keyword&apos; or can it be inferred also by the presence of a body, lack of abstract and such?

Stephan, has this been finalized? Thanks for chipping in!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2231932</commentid>
    <comment_count>3</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-03-15 08:49:31 -0400</bug_when>
    <thetext>Another piece of information:

As of JDK 8 b76 looking at the disassembled code, &apos;default&apos; keyword doesn&apos;t make it to the class file. The same case with ECJ as of now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2231943</commentid>
    <comment_count>4</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-03-15 09:05:44 -0400</bug_when>
    <thetext>Markus,

Looks like the class file constants are not being redefined to include default as a modifier and the mere presence of a body for the interface method (in the absence of static modifier) signals a default method - what would you like to see here from a client side perspective on the DOM/AST side? On the compiler AST side we have a modifier bit that is JDT/Core specific that is outside of the 16 flag bits reserved for class file flags.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2232163</commentid>
    <comment_count>5</comment_count>
      <attachid>228492</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-03-15 13:11:37 -0400</bug_when>
    <thetext>Created attachment 228492
Updated patch

Patch includes new Modifier constant for default. 

Documentation still need to be updated in a couple of places:

1. In the AST#newModifiers() where we specify the order of the modifiers is consistent with JLS recommendation.
2. Javadoc for Modifier specifies org.eclipse.jdt.core.Flags - the new modifier will need to make it to the Flags as well. I will raise a new defect for handling Java model side of things.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2232169</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-15 13:15:35 -0400</bug_when>
    <thetext>Does the AST for an interface with method body continue to get tagged as 
MALFORMED at JLS levels &lt; 8 ? It doesn&apos;t look like it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2232472</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-03-16 20:42:18 -0400</bug_when>
    <thetext>It seems you found the relevant information already, but let me confirm:


(In reply to comment #2)
&gt; ... But it would be nice to get this specific question
&gt; answered: Are default methods to be declared explicitly with the &apos;default&apos;
&gt; keyword&apos; or can it be inferred also by the presence of a body, lack of
&gt; abstract and such?

At source level default methods require the &apos;default&apos; modifier.

(In reply to comment #3)
&gt; Another piece of information:
&gt; 
&gt; As of JDK 8 b76 looking at the disassembled code, &apos;default&apos; keyword doesn&apos;t
&gt; make it to the class file. The same case with ECJ as of now.

A byte-code level flag bit for &apos;default&apos; has not been defined.
So when reading a default method from byte-code, the modifier is indeed
inferred from the lack of &apos;abstract&apos; (inside an interface).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2232560</commentid>
    <comment_count>8</comment_count>
      <attachid>228543</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-03-17 11:57:55 -0400</bug_when>
    <thetext>Created attachment 228543
Updated patch

Added a new test for JLS4 level and reo-introduced the MALFORMED error for levels below JLS8.

Tests are still running and patch still has the documentation issues I mentioned earlier. Another point to note is that I am intentionally not marking the AST node as malformed when the interface method has both &apos;default&apos; and &apos;static&apos; as keywords even though they method would have a compilation error. I guess we don&apos;t have to transform every compilation error into a malformed AST, do we?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2232814</commentid>
    <comment_count>9</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-03-18 08:23:00 -0400</bug_when>
    <thetext>(In reply to comment #4 / comment #5)
I agree it makes sense to have Modifier.DEFAULT and Flags.AccDefaultFlag (the latter with proper warnings to avoid confusion with the existing AccDefault).

But I would use a different constant. If the access_flags in the class file format is ever changed to u4, then it will most likely use 0x10000 as the next value. Since our value will become API, I think it&apos;s safer to use 0x80000000.

And the Javadocs of Modifer, Flags and the new constants need to point out that these are not values from the VM spec.


(In reply to comment #8)
&gt; I guess we don&apos;t have to transform every compilation
&gt; error into a malformed AST, do we?

Correct. From the Javadoc of ASTNode.MALFORMED: &quot;The standard parser (ASTParser) sets this flag on a node to indicate a syntax error detected in the vicinity.&quot;

We only set MALFORMED if the source is not completely representable in the AST.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2234682</commentid>
    <comment_count>10</comment_count>
      <attachid>228812</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-03-21 03:05:42 -0400</bug_when>
    <thetext>Created attachment 228812
Updated patch

Updated the value for the new modifier constant and made the suggested changes to the documentation. For now, I have only added a a new flag to Flags. I will raise a new bug to cover the other aspects in the java model area, like adding isDefault() method, test etc.

Markus, when you said a different value for default, did you mean only the modifier constant or should we apply it all the way to ExtraCompilerModifiers#AccDefaultMethod? Thanks for clarifying.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2234693</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-21 03:41:15 -0400</bug_when>
    <thetext>(In reply to comment #10)

&gt; Markus, when you said a different value for default, did you mean only the
&gt; modifier constant or should we apply it all the way to
&gt; ExtraCompilerModifiers#AccDefaultMethod? 

(jumping in) The latter is not API, but an constant internal to the compiler.
Jay, let me know when this is ready for review and I can review
it. For any rewrite work, please raise a separate bug. Thanks,</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2234701</commentid>
    <comment_count>12</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-03-21 03:59:07 -0400</bug_when>
    <thetext>Srikanth, please review the last patch. I don&apos;t think this would require any ast rewrite work. In any case, I will add new tests via bug 403985 to ensure default methods are taken care of.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2234817</commentid>
    <comment_count>13</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-03-21 07:26:10 -0400</bug_when>
    <thetext>&gt; ExtraCompilerModifiers#AccDefaultMethod?
Yes, I would also change this to ASTNode.Bit32, so that Flags#AccDefaultFlag gets the same value. It&apos;s always good to minimize surprises by using the same values internally and externally.

The Flags class also needs an isDefaultFlag(int) method. With a note in the Javadoc that this is not about default (package) access visibility.

Both Flags and Modifier class Javadocs still need something like
&quot;(except for {@link #AccDefaultFlag/DEFAULT})&quot;.

BTW: When looking at ExtraCompilerModifiers, I also saw AccJustFlag. It&apos;s not used in many places, but the usage in SourceElementNotifier#notifySourceElementRequestor(AbstractMethodDeclaration, ..)
looks like it strips off the &quot;default&quot; flag.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2234852</commentid>
    <comment_count>14</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-03-21 08:29:41 -0400</bug_when>
    <thetext>(In reply to comment #10)
&gt; I will raise a new bug to cover the other aspects in the java model
&gt; area, like adding isDefault() method, test etc.

(In reply to comment #13)
&gt; The Flags class also needs an isDefaultFlag(int) method. With a note in the
&gt; Javadoc that this is not about default (package) access visibility.


That&apos;s why I used names like AccDefaultMethod and 
MethodBinding.isDefaultMethod()

I assume we *don&apos;t* want to rename all existing isDefault() to isPackage()
right?


(In reply to comment #13)
&gt; &gt; ExtraCompilerModifiers#AccDefaultMethod?
&gt; Yes, I would also change this to ASTNode.Bit32, so that Flags#AccDefaultFlag
&gt; gets the same value. It&apos;s always good to minimize surprises by using the
&gt; same values internally and externally.

I probably missed some discussion: what&apos;s wrong with Bit17?


(In reply to comment #13)
&gt; BTW: When looking at ExtraCompilerModifiers, I also saw AccJustFlag. It&apos;s
&gt; not used in many places, but the usage in
&gt; SourceElementNotifier#notifySourceElementRequestor(AbstractMethodDeclaration,
&gt; ..)
&gt; looks like it strips off the &quot;default&quot; flag.

Mh, I&apos;m not sure if the documentation of AccJustFlag is still appropriate.
It indicates that this mask is used to filter those bits that are also
represented in the class file. AccDefaultMethod is not one of them.
OTOH I see the mask used as capturing all those flags that are relevant
by the SPEC and should thus be considered during various checks and
conversions. If the latter is what we want the mask to mean then, yes,
AccDefaultMethod should be included.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2234924</commentid>
    <comment_count>15</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-03-21 10:24:22 -0400</bug_when>
    <thetext>&gt; That&apos;s why I used names like AccDefaultMethod and 
&gt; MethodBinding.isDefaultMethod()

I missed that, and I like the &quot;DefaultMethod&quot; term. I.e. use Flags#AccDefaultMethod and Flags#isDefaultMethod(int). In Modifier, I would keep &quot;default&quot;, since this is more about the keyword, and since &quot;default&quot; is not yet used there.

&gt; I assume we *don&apos;t* want to rename all existing isDefault() to isPackage()
&gt; right?

I only found these 3, which are all internal, and only the first one has references:
org.eclipse.jdt.internal.compiler.lookup.MethodBinding.isDefault()
org.eclipse.jdt.internal.compiler.lookup.FieldBinding.isDefault()
org.eclipse.jdt.internal.compiler.lookup.ReferenceBinding.isDefault()

I&apos;m not against renaming these (but they can also stay).

&gt; I probably missed some discussion: what&apos;s wrong with Bit17?

See comment 9, paragraph 2. Not a real issue right now, but I&apos;d like to be careful, and I don&apos;t think Bit32 is any worse than Bit17. But since my argumentation is also just guesswork, I could also live with Bit17 if anyone sees reasons for using that one.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2234932</commentid>
    <comment_count>16</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-21 10:38:31 -0400</bug_when>
    <thetext>(In reply to comment #15)

&gt; &gt; I probably missed some discussion: what&apos;s wrong with Bit17?
&gt; 
&gt; See comment 9, paragraph 2. Not a real issue right now, but I&apos;d like to be
&gt; careful, and I don&apos;t think Bit32 is any worse than Bit17. But since my
&gt; argumentation is also just guesswork, I could also live with Bit17 if anyone
&gt; sees reasons for using that one.

It is difficult to make predictions especially about the future, but I would
venture that if a 2 byte bit vector runs out of bits, the logical approach
would be to define additional storage, not to widen the original storage.
This line of thinking does not change anything in the present discourse.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2235353</commentid>
    <comment_count>17</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-03-22 04:44:17 -0400</bug_when>
    <thetext>(In reply to comment #16)
&gt; It is difficult to make predictions especially about the future, but I would
&gt; venture that if a 2 byte bit vector runs out of bits, the logical approach
&gt; would be to define additional storage, not to widen the original storage.
&gt; This line of thinking does not change anything in the present discourse.

If my understanding is correct, we want to continue to use Bit17, don&apos;t we?

Srikanth, do you have any additional review comments? Or would you prefer a new patch with the changes we have discussed so far?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2236057</commentid>
    <comment_count>18</comment_count>
      <attachid>228981</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-03-25 04:57:43 -0400</bug_when>
    <thetext>Created attachment 228981
Updated patch

Patch with Markus&apos;s review comments (javadoc updates). Also went back to the Bit17 for default flag.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2238474</commentid>
    <comment_count>19</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-04-02 03:43:56 -0400</bug_when>
    <thetext>Suggest rename Flags.AccDefaultFlag to be AccDefaultMethod. I don&apos;t have a 
firm opinion about the bit used. Since Markus&apos;s last comment indicates he is
OK with the present choice, let us go with it. This can be revisited later before
the release if needed. Please remember to update all javadoc references also.
Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2238483</commentid>
    <comment_count>20</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-04-02 04:15:16 -0400</bug_when>
    <thetext>Released with the change mentioned above:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=29530aea390a72e4225d01267051bcdef2bb5cd8</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2242726</commentid>
    <comment_count>21</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-04-11 14:46:34 -0400</bug_when>
    <thetext>Quite a few of the discussed changes were missing in BETA_JAVA8.

Fixed that, cleaned up Javadocs, and also acknowledged that Flags#AccDeprecated doesn&apos;t use a JVMS-defined value.

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=ac894da9b0ea3c039ce6982330527517abe54897</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>228477</attachid>
            <date>2013-03-15 08:33:00 -0400</date>
            <delta_ts>2013-03-15 13:11:37 -0400</delta_ts>
            <desc>Patch - WIP</desc>
            <filename>Fix-for-bug-399791.patch</filename>
            <type>text/plain</type>
            <size>3233</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9kb20vQVNUQ29udmVydGVyMThUZXN0LmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
ZG9tL0FTVENvbnZlcnRlcjE4VGVzdC5qYXZhCmluZGV4IDc1MTRiZjMuLmMzOWM1NTAgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9kb20vQVNUQ29udmVydGVyMThUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Rv
bS9BU1RDb252ZXJ0ZXIxOFRlc3QuamF2YQpAQCAtMTgyOSw0ICsxODI5LDMyIEBACiAJCWFzc2Vy
dEVxdWFscygiVHlwZSBzaG91bGQgYmUgbWFsZm9ybWVkIiwgQVNUTm9kZS5NQUxGT1JNRUQsICht
ZXRob2QuZ2V0RmxhZ3MoKSAmIEFTVE5vZGUuTUFMRk9STUVEKSk7CiAJfQorCS8vIGh0dHBzOi8v
YnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zOTk3OTEKKwlwdWJsaWMgdm9p
ZCB0ZXN0QnVnMzk5NzkxKCkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbiB7CisJCVN0cmluZyBj
b250ZW50cyA9CisJCQkicHVibGljIGludGVyZmFjZSBYIHtcbiIgKworCQkJIglzdGF0aWMgdm9p
ZCBmb28oKXt9XG4iICsKKwkJCSIgICBkZWZhdWx0IHZvaWQgZm9vKGludCBpKXt9XG4iICsKKwkJ
CSJ9XG4iOworCQl0aGlzLndvcmtpbmdDb3B5ID0gZ2V0V29ya2luZ0NvcHkoIi9Db252ZXJ0ZXIx
OC9zcmMvWC5qYXZhIiwgZmFsc2UpOworCQlBU1ROb2RlIG5vZGUgPSBidWlsZEFTVChjb250ZW50
cywgdGhpcy53b3JraW5nQ29weSk7CisJCWFzc2VydEVxdWFscygiTm90IGEgY29tcGlsYXRpb24g
dW5pdCIsIEFTVE5vZGUuQ09NUElMQVRJT05fVU5JVCwgbm9kZS5nZXROb2RlVHlwZSgpKTsKKwkJ
Q29tcGlsYXRpb25Vbml0IHVuaXQgPSAoQ29tcGlsYXRpb25Vbml0KSBub2RlOworCQlUeXBlRGVj
bGFyYXRpb24gdHlwZSA9ICAoVHlwZURlY2xhcmF0aW9uKSB1bml0LnR5cGVzKCkuZ2V0KDApOwor
CQlub2RlID0gKEFTVE5vZGUpIHR5cGUuYm9keURlY2xhcmF0aW9ucygpLmdldCgwKTsKKwkJYXNz
ZXJ0RXF1YWxzKCJOb3QgYSBtZXRob2QgRGVjbGFyYXRpb24iLCBBU1ROb2RlLk1FVEhPRF9ERUNM
QVJBVElPTiwgbm9kZS5nZXROb2RlVHlwZSgpKTsKKwkJTWV0aG9kRGVjbGFyYXRpb24gbWV0aG9k
ID0gKE1ldGhvZERlY2xhcmF0aW9uKSBub2RlOworCQlhc3NlcnRFcXVhbHMoIlR5cGUgc2hvdWxk
IG5vdCBiZSBtYWxmb3JtZWQiLCAwLCAobWV0aG9kLmdldEZsYWdzKCkgJiBBU1ROb2RlLk1BTEZP
Uk1FRCkpOworCQlMaXN0IG1vZGlmaWVycyA9IG1ldGhvZC5tb2RpZmllcnMoKTsKKwkJYXNzZXJ0
RXF1YWxzKCJJbmNvcnJlY3Qgbm8gb2YgbW9kZmllcnMiLCAxLCBtb2RpZmllcnMuc2l6ZSgpKTsK
KwkJTW9kaWZpZXIgbW9kaWZpZXIgPSAoTW9kaWZpZXIpIG1vZGlmaWVycy5nZXQoMCk7CisJCWFz
c2VydFNhbWUoIkluY29ycmVjdCBtb2RpZmllciBrZXl3b3JkIiwgTW9kaWZpZXIuTW9kaWZpZXJL
ZXl3b3JkLlNUQVRJQ19LRVlXT1JELCBtb2RpZmllci5nZXRLZXl3b3JkKCkpOwogCisJCW1ldGhv
ZCA9IChNZXRob2REZWNsYXJhdGlvbikgdHlwZS5ib2R5RGVjbGFyYXRpb25zKCkuZ2V0KDEpOwor
CQlhc3NlcnRFcXVhbHMoIlR5cGUgc2hvdWxkIG5vdCBiZSBtYWxmb3JtZWQiLCAwLCAobWV0aG9k
LmdldEZsYWdzKCkgJiBBU1ROb2RlLk1BTEZPUk1FRCkpOworCisJCW1vZGlmaWVycyA9IG1ldGhv
ZC5tb2RpZmllcnMoKTsKKwkJYXNzZXJ0RXF1YWxzKCJJbmNvcnJlY3Qgbm8gb2YgbW9kZmllcnMi
LCAxLCBtb2RpZmllcnMuc2l6ZSgpKTsKKwkJbW9kaWZpZXIgPSAoTW9kaWZpZXIpIG1vZGlmaWVy
cy5nZXQoMCk7CisJCWFzc2VydFNhbWUoIkluY29ycmVjdCBtb2RpZmllciBrZXl3b3JkIiwgTW9k
aWZpZXIuTW9kaWZpZXJLZXl3b3JkLlNUQVRJQ19LRVlXT1JELCBtb2RpZmllci5nZXRLZXl3b3Jk
KCkpOworCX0KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNs
aXBzZS9qZHQvY29yZS9kb20vQVNUQ29udmVydGVyLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FTVENvbnZlcnRlci5qYXZhCmluZGV4IGQw
ZjJkNzEuLmJiOWY0ZTkgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcv
ZWNsaXBzZS9qZHQvY29yZS9kb20vQVNUQ29udmVydGVyLmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1RDb252ZXJ0ZXIuamF2YQpA
QCAtNTk5LDkgKzU5OSwxMSBAQAogCQkJCX0KIAkJCX0KLQkJCWlmIChibG9jayAhPSBudWxsCi0J
CQkJCSYmIChNb2RpZmllci5pc0Fic3RyYWN0KG1ldGhvZERlY2wuZ2V0TW9kaWZpZXJzKCkpCi0J
CQkJCQkJfHwgTW9kaWZpZXIuaXNOYXRpdmUobWV0aG9kRGVjbC5nZXRNb2RpZmllcnMoKSkKLQkJ
CQkJCQl8fCBpc0ludGVyZmFjZSkpIHsKLQkJCQltZXRob2REZWNsLnNldEZsYWdzKG1ldGhvZERl
Y2wuZ2V0RmxhZ3MoKSB8IEFTVE5vZGUuTUFMRk9STUVEKTsKKwkJCWlmIChibG9jayAhPSBudWxs
ICYmIGlzSW50ZXJmYWNlKSB7CisJCQkJaW50IG1vZCA9IG1ldGhvZERlY2wuZ2V0TW9kaWZpZXJz
KCk7CisJCQkJLy8gVE9ETzogUXVlc3Rpb25zIHN0aWxsIHJlbWFpbiByZWdhcmRpbmcgdGhlIHVz
YWdlIG9mICdkZWZhdWx0JyBmb3IgaW50ZXJmYWNlIG1ldGhvZHMuCisJCQkJLy8gUHJvYmFibHkg
bmV3IE1vZGlmaWVyIGNvbnN0YW50cyBhcmUgcmVxdWlyZWQ7IGZvciBub3cgdXNlIEV4dHJhQ29t
cGlsZXJNb2RpZmllcnMuQWNjRGVmYXVsdE1ldGhvZCBiaXQKKwkJCQlpZiAoKG1vZCAmIChNb2Rp
Zmllci5BQlNUUkFDVCB8IE1vZGlmaWVyLk5BVElWRSkpICE9IDAgfHwgKG1vZCAmIChNb2RpZmll
ci5TVEFUSUMgfCBFeHRyYUNvbXBpbGVyTW9kaWZpZXJzLkFjY0RlZmF1bHRNZXRob2QpKSA9PSAw
KSB7CisJCQkJCW1ldGhvZERlY2wuc2V0RmxhZ3MobWV0aG9kRGVjbC5nZXRGbGFncygpIHwgQVNU
Tm9kZS5NQUxGT1JNRUQpOworCQkJCX0KIAkJCX0KIAkJfSBlbHNlIHs=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>228492</attachid>
            <date>2013-03-15 13:11:00 -0400</date>
            <delta_ts>2013-03-17 11:57:55 -0400</delta_ts>
            <desc>Updated patch</desc>
            <filename>Fix-for-bug-399791.patch</filename>
            <type>text/plain</type>
            <size>7826</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9kb20vQVNUQ29udmVydGVyMThUZXN0LmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
ZG9tL0FTVENvbnZlcnRlcjE4VGVzdC5qYXZhCmluZGV4IDc1MTRiZjMuLjA0MTI5ZjUgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9kb20vQVNUQ29udmVydGVyMThUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Rv
bS9BU1RDb252ZXJ0ZXIxOFRlc3QuamF2YQpAQCAtMTgyOSw0ICsxODI5LDMyIEBACiAJCWFzc2Vy
dEVxdWFscygiVHlwZSBzaG91bGQgYmUgbWFsZm9ybWVkIiwgQVNUTm9kZS5NQUxGT1JNRUQsICht
ZXRob2QuZ2V0RmxhZ3MoKSAmIEFTVE5vZGUuTUFMRk9STUVEKSk7CiAJfQorCS8vIGh0dHBzOi8v
YnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zOTk3OTEKKwlwdWJsaWMgdm9p
ZCB0ZXN0QnVnMzk5NzkxKCkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbiB7CisJCVN0cmluZyBj
b250ZW50cyA9CisJCQkicHVibGljIGludGVyZmFjZSBYIHtcbiIgKworCQkJIglzdGF0aWMgdm9p
ZCBmb28oKXt9XG4iICsKKwkJCSIgICBkZWZhdWx0IHZvaWQgZm9vKGludCBpKXt9XG4iICsKKwkJ
CSJ9XG4iOworCQl0aGlzLndvcmtpbmdDb3B5ID0gZ2V0V29ya2luZ0NvcHkoIi9Db252ZXJ0ZXIx
OC9zcmMvWC5qYXZhIiwgZmFsc2UpOworCQlBU1ROb2RlIG5vZGUgPSBidWlsZEFTVChjb250ZW50
cywgdGhpcy53b3JraW5nQ29weSk7CisJCWFzc2VydEVxdWFscygiTm90IGEgY29tcGlsYXRpb24g
dW5pdCIsIEFTVE5vZGUuQ09NUElMQVRJT05fVU5JVCwgbm9kZS5nZXROb2RlVHlwZSgpKTsKKwkJ
Q29tcGlsYXRpb25Vbml0IHVuaXQgPSAoQ29tcGlsYXRpb25Vbml0KSBub2RlOworCQlUeXBlRGVj
bGFyYXRpb24gdHlwZSA9ICAoVHlwZURlY2xhcmF0aW9uKSB1bml0LnR5cGVzKCkuZ2V0KDApOwor
CQlub2RlID0gKEFTVE5vZGUpIHR5cGUuYm9keURlY2xhcmF0aW9ucygpLmdldCgwKTsKKwkJYXNz
ZXJ0RXF1YWxzKCJOb3QgYSBtZXRob2QgRGVjbGFyYXRpb24iLCBBU1ROb2RlLk1FVEhPRF9ERUNM
QVJBVElPTiwgbm9kZS5nZXROb2RlVHlwZSgpKTsKKwkJTWV0aG9kRGVjbGFyYXRpb24gbWV0aG9k
ID0gKE1ldGhvZERlY2xhcmF0aW9uKSBub2RlOworCQlhc3NlcnRFcXVhbHMoIlR5cGUgc2hvdWxk
IG5vdCBiZSBtYWxmb3JtZWQiLCAwLCAobWV0aG9kLmdldEZsYWdzKCkgJiBBU1ROb2RlLk1BTEZP
Uk1FRCkpOworCQlMaXN0IG1vZGlmaWVycyA9IG1ldGhvZC5tb2RpZmllcnMoKTsKKwkJYXNzZXJ0
RXF1YWxzKCJJbmNvcnJlY3Qgbm8gb2YgbW9kZmllcnMiLCAxLCBtb2RpZmllcnMuc2l6ZSgpKTsK
KwkJTW9kaWZpZXIgbW9kaWZpZXIgPSAoTW9kaWZpZXIpIG1vZGlmaWVycy5nZXQoMCk7CisJCWFz
c2VydFNhbWUoIkluY29ycmVjdCBtb2RpZmllciBrZXl3b3JkIiwgTW9kaWZpZXIuTW9kaWZpZXJL
ZXl3b3JkLlNUQVRJQ19LRVlXT1JELCBtb2RpZmllci5nZXRLZXl3b3JkKCkpOwogCisJCW1ldGhv
ZCA9IChNZXRob2REZWNsYXJhdGlvbikgdHlwZS5ib2R5RGVjbGFyYXRpb25zKCkuZ2V0KDEpOwor
CQlhc3NlcnRFcXVhbHMoIlR5cGUgc2hvdWxkIG5vdCBiZSBtYWxmb3JtZWQiLCAwLCAobWV0aG9k
LmdldEZsYWdzKCkgJiBBU1ROb2RlLk1BTEZPUk1FRCkpOworCisJCW1vZGlmaWVycyA9IG1ldGhv
ZC5tb2RpZmllcnMoKTsKKwkJYXNzZXJ0RXF1YWxzKCJJbmNvcnJlY3Qgbm8gb2YgbW9kZmllcnMi
LCAxLCBtb2RpZmllcnMuc2l6ZSgpKTsKKwkJbW9kaWZpZXIgPSAoTW9kaWZpZXIpIG1vZGlmaWVy
cy5nZXQoMCk7CisJCWFzc2VydFNhbWUoIkluY29ycmVjdCBtb2RpZmllciBrZXl3b3JkIiwgTW9k
aWZpZXIuTW9kaWZpZXJLZXl3b3JkLkRFRkFVTFRfS0VZV09SRCwgbW9kaWZpZXIuZ2V0S2V5d29y
ZCgpKTsKKwl9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2Rl
bC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvZG9tL0FTVFRlc3QuamF2YSBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0
cy9kb20vQVNUVGVzdC5qYXZhCmluZGV4IDQyYjIxY2MuLjg2ODRlOGYgMTAwNjQ0Ci0tLSBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90
ZXN0cy9kb20vQVNUVGVzdC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1v
ZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9kb20vQVNUVGVzdC5qYXZhCkBAIC01
NjAyLDUgKzU2MDIsNiBAQAogCQkJCXRoaXMuYXN0Lm5ld01vZGlmaWVyKE1vZGlmaWVyLk1vZGlm
aWVyS2V5d29yZC5UUkFOU0lFTlRfS0VZV09SRCksCiAJCQkJdGhpcy5hc3QubmV3TW9kaWZpZXIo
TW9kaWZpZXIuTW9kaWZpZXJLZXl3b3JkLlZPTEFUSUxFX0tFWVdPUkQpLAotCQkJCXRoaXMuYXN0
Lm5ld01vZGlmaWVyKE1vZGlmaWVyLk1vZGlmaWVyS2V5d29yZC5TVFJJQ1RGUF9LRVlXT1JEKQor
CQkJCXRoaXMuYXN0Lm5ld01vZGlmaWVyKE1vZGlmaWVyLk1vZGlmaWVyS2V5d29yZC5TVFJJQ1RG
UF9LRVlXT1JEKSwKKwkJCQl0aGlzLmFzdC5uZXdNb2RpZmllcihNb2RpZmllci5Nb2RpZmllcktl
eXdvcmQuREVGQVVMVF9LRVlXT1JEKQogCQl9OwogCQlyZXR1cm4gYWxsTW9kczsKQEAgLTg1MTgs
NCArODUxOSw1IEBACiAJCWFzc2VydFRydWUoTW9kaWZpZXIuTW9kaWZpZXJLZXl3b3JkLlZPTEFU
SUxFX0tFWVdPUkQudG9TdHJpbmcoKS5lcXVhbHMoInZvbGF0aWxlIikpOyAvLyROT04tTkxTLTEk
CiAJCWFzc2VydFRydWUoTW9kaWZpZXIuTW9kaWZpZXJLZXl3b3JkLlNUUklDVEZQX0tFWVdPUkQu
dG9TdHJpbmcoKS5lcXVhbHMoInN0cmljdGZwIikpOyAvLyROT04tTkxTLTEkCisJCWFzc2VydFRy
dWUoTW9kaWZpZXIuTW9kaWZpZXJLZXl3b3JkLkRFRkFVTFRfS0VZV09SRC50b1N0cmluZygpLmVx
dWFscygiZGVmYXVsdCIpKTsgLy8kTk9OLU5MUy0xJAogCiAJCWZpbmFsIE1vZGlmaWVyLk1vZGlm
aWVyS2V5d29yZFtdIGtub3duID0gewpAQCAtODUzMSw0ICs4NTMzLDUgQEAKIAkJCU1vZGlmaWVy
Lk1vZGlmaWVyS2V5d29yZC5WT0xBVElMRV9LRVlXT1JELAogCQkJTW9kaWZpZXIuTW9kaWZpZXJL
ZXl3b3JkLlNUUklDVEZQX0tFWVdPUkQsCisJCQlNb2RpZmllci5Nb2RpZmllcktleXdvcmQuREVG
QVVMVF9LRVlXT1JECiAJCX07CiAKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Rv
bS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vQVNULmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FTVC5qYXZhCmluZGV4IDhmM2UzMmMuLmY1
ZmVlMmUgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9q
ZHQvY29yZS9kb20vQVNULmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL2RvbS9BU1QuamF2YQpAQCAtMTc1Miw1ICsxNzUyLDUgQEAKIAkgKiBy
ZXF1ZXN0ZWQgdGhlIG1vZGlmaWVycyBub2RlcyB3aWxsIGFwcGVhciBpbiB0aGUgZm9sbG93aW5n
IG9yZGVyOgogCSAqIHB1YmxpYywgcHJvdGVjdGVkLCBwcml2YXRlLCBhYnN0cmFjdCwgc3RhdGlj
LCBmaW5hbCwgc3luY2hyb25pemVkLAotCSAqIG5hdGl2ZSwgc3RyaWN0ZnAsIHRyYW5zaWVudCwg
dm9sYXRpbGUuIFRoaXMgb3JkZXIgaXMgY29uc2lzdGVudAorCSAqIG5hdGl2ZSwgc3RyaWN0ZnAs
IHRyYW5zaWVudCwgdm9sYXRpbGUsIGRlZmF1bHQuIFRoaXMgb3JkZXIgaXMgY29uc2lzdGVudAog
CSAqIHdpdGggdGhlIHJlY29tbWVuZGF0aW9ucyBpbiBKTFMyIDguMS4xLCA4LjMuMSwgYW5kIDgu
NC4zLgogCSAqCkBAIC0xODAwLDQgKzE4MDAsNyBAQAogCQkJcmVzdWx0LmFkZChuZXdNb2RpZmll
cihNb2RpZmllci5Nb2RpZmllcktleXdvcmQuVk9MQVRJTEVfS0VZV09SRCkpOwogCQl9CisJCWlm
IChNb2RpZmllci5pc0RlZmF1bHQoZmxhZ3MpKSB7CisJCQlyZXN1bHQuYWRkKG5ld01vZGlmaWVy
KE1vZGlmaWVyLk1vZGlmaWVyS2V5d29yZC5ERUZBVUxUX0tFWVdPUkQpKTsKKwkJfQogCQlyZXR1
cm4gcmVzdWx0OwogCX0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcv
ZWNsaXBzZS9qZHQvY29yZS9kb20vQVNUQ29udmVydGVyLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FTVENvbnZlcnRlci5qYXZhCmluZGV4
IGQwZjJkNzEuLmQ1MzNmNmYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9v
cmcvZWNsaXBzZS9qZHQvY29yZS9kb20vQVNUQ29udmVydGVyLmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1RDb252ZXJ0ZXIuamF2
YQpAQCAtNTk5LDkgKzU5OSw5IEBACiAJCQkJfQogCQkJfQotCQkJaWYgKGJsb2NrICE9IG51bGwK
LQkJCQkJJiYgKE1vZGlmaWVyLmlzQWJzdHJhY3QobWV0aG9kRGVjbC5nZXRNb2RpZmllcnMoKSkK
LQkJCQkJCQl8fCBNb2RpZmllci5pc05hdGl2ZShtZXRob2REZWNsLmdldE1vZGlmaWVycygpKQot
CQkJCQkJCXx8IGlzSW50ZXJmYWNlKSkgewotCQkJCW1ldGhvZERlY2wuc2V0RmxhZ3MobWV0aG9k
RGVjbC5nZXRGbGFncygpIHwgQVNUTm9kZS5NQUxGT1JNRUQpOworCQkJaWYgKGJsb2NrICE9IG51
bGwpIHsKKwkJCQlpZiAoKG1ldGhvZERlY2xhcmF0aW9uLm1vZGlmaWVycyAmIChDbGFzc0ZpbGVD
b25zdGFudHMuQWNjQWJzdHJhY3QgfCBDbGFzc0ZpbGVDb25zdGFudHMuQWNjTmF0aXZlKSkgIT0g
MAorCQkJCQkJfHwgKGlzSW50ZXJmYWNlICYmIChtZXRob2REZWNsYXJhdGlvbi5tb2RpZmllcnMg
JiAoQ2xhc3NGaWxlQ29uc3RhbnRzLkFjY1N0YXRpYyB8IEV4dHJhQ29tcGlsZXJNb2RpZmllcnMu
QWNjRGVmYXVsdE1ldGhvZCkpID09IDApKSB7CisJCQkJCW1ldGhvZERlY2wuc2V0RmxhZ3MobWV0
aG9kRGVjbC5nZXRGbGFncygpIHwgQVNUTm9kZS5NQUxGT1JNRUQpOworCQkJCX0KIAkJCX0KIAkJ
fSBlbHNlIHsKQEAgLTQ4MTEsNCArNDgxMSw3IEBACiAJCQkJCQltb2RpZmllciA9IGNyZWF0ZU1v
ZGlmaWVyKE1vZGlmaWVyLk1vZGlmaWVyS2V5d29yZC5TVFJJQ1RGUF9LRVlXT1JEKTsKIAkJCQkJ
CWJyZWFrOworCQkJCQljYXNlIFRlcm1pbmFsVG9rZW5zLlRva2VuTmFtZWRlZmF1bHQ6CisJCQkJ
CQltb2RpZmllciA9IGNyZWF0ZU1vZGlmaWVyKE1vZGlmaWVyLk1vZGlmaWVyS2V5d29yZC5ERUZB
VUxUX0tFWVdPUkQpOworCQkJCQkJYnJlYWs7CiAJCQkJCWNhc2UgVGVybWluYWxUb2tlbnMuVG9r
ZW5OYW1lQVQgOgogCQkJCQkJLy8gd2UgaGF2ZSBhbiBhbm5vdGF0aW9uCmRpZmYgLS1naXQgYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL01vZGlmaWVy
LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9t
L01vZGlmaWVyLmphdmEKaW5kZXggNjNmYmViMC4uZWU0MzY2NSAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9Nb2RpZmllci5qYXZh
CisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20v
TW9kaWZpZXIuamF2YQpAQCAtMzIsNCArMzIsNSBAQAogICogICAgPGI+dm9sYXRpbGU8L2I+CiAg
KiAgICA8Yj5zdHJpY3RmcDwvYj4KKyAqICAgIDxiPmRlZmF1bHQ8L2I+CiAgKiA8L3ByZT4KICAq
IDxwPgpAQCAtODksNCArOTAsMTEgQEAKIAkJLyoqICJ2b2xhdGlsZSIgbW9kaWZpZXIgd2l0aCBm
bGFnIHZhbHVlIHtAbGluayBNb2RpZmllciNWT0xBVElMRX0uICovCiAJCXB1YmxpYyBzdGF0aWMg
ZmluYWwgTW9kaWZpZXJLZXl3b3JkIFZPTEFUSUxFX0tFWVdPUkQgPSBuZXcgTW9kaWZpZXJLZXl3
b3JkKCJ2b2xhdGlsZSIsIFZPTEFUSUxFKTsvLyROT04tTkxTLTEkCisKKwkJLyoqCisJCSAqICJk
ZWZhdWx0IiBtb2RpZmllciB3aXRoIGZsYWcgdmFsdWUge0BsaW5rIE1vZGlmaWVyI0RFRkFVTFR9
LgorCQkgKiBAc2luY2UgMy45CisJCSAqLworCQlwdWJsaWMgc3RhdGljIGZpbmFsIE1vZGlmaWVy
S2V5d29yZCBERUZBVUxUX0tFWVdPUkQgPSBuZXcgTW9kaWZpZXJLZXl3b3JkKCJkZWZhdWx0Iiwg
REVGQVVMVCk7Ly8kTk9OLU5MUy0xJAorCiAJCXN0YXRpYyB7CiAJCQlLRVlXT1JEUyA9IG5ldyBI
YXNoTWFwKDIwKTsKQEAgLTEwMiw1ICsxMTAsNiBAQAogCQkJCQlUUkFOU0lFTlRfS0VZV09SRCwK
IAkJCQkJVk9MQVRJTEVfS0VZV09SRCwKLQkJCQkJU1RSSUNURlBfS0VZV09SRAorCQkJCQlTVFJJ
Q1RGUF9LRVlXT1JELAorCQkJCQlERUZBVUxUX0tFWVdPUkQKIAkJCQl9OwogCQkJZm9yIChpbnQg
aSA9IDA7IGkgPCBvcHMubGVuZ3RoOyBpKyspIHsKQEAgLTI5Myw0ICszMDIsMTEgQEAKIAlwdWJs
aWMgc3RhdGljIGZpbmFsIGludCBWT0xBVElMRSA9IDB4MDA0MDsKIAorCS8qKgorCSAqICJkZWZh
dWx0IiBtb2RpZmllciBjb25zdGFudCAoYml0IG1hc2spLgorCSAqIEFwcGxpY2FibGUgb25seSB0
byBtZXRob2RzLgorCSAqIEBzaW5jZSAzLjkKKwkgKi8KKwlwdWJsaWMgc3RhdGljIGZpbmFsIGlu
dCBERUZBVUxUID0gMHgxMDAwMDsKKwogCXN0YXRpYyB7CiAJCUxpc3QgcHJvcGVyeUxpc3QgPSBu
ZXcgQXJyYXlMaXN0KDIpOwpAQCAtNDQxLDQgKzQ1NywxNyBAQAogCXB1YmxpYyBzdGF0aWMgYm9v
bGVhbiBpc1ZvbGF0aWxlKGludCBmbGFncykgewogCQlyZXR1cm4gKGZsYWdzICYgVk9MQVRJTEUp
ICE9IDA7CisJfQorCisJLyoqCisJICogUmV0dXJucyB3aGV0aGVyIHRoZSBnaXZlbiBmbGFncyBp
bmNsdWRlcyB0aGUgImRlZmF1bHQiIG1vZGlmaWVyLgorCSAqIEFwcGxpY2FibGUgb25seSB0byBt
ZXRob2RzLgorCSAqCisJICogQHBhcmFtIGZsYWdzIHRoZSBtb2RpZmllciBmbGFncworCSAqIEBy
ZXR1cm4gPGNvZGU+dHJ1ZTwvY29kZT4gaWYgdGhlIDxjb2RlPkRFRkFVTFQ8L2NvZGU+IGJpdCBp
cyBzZXQKKwkgKiBhbmQgPGNvZGU+ZmFsc2U8L2NvZGU+IG90aGVyd2lzZQorCSAqIEBzaW5jZSAz
LjkKKwkgKi8KKwlwdWJsaWMgc3RhdGljIGJvb2xlYW4gaXNEZWZhdWx0KGludCBmbGFncykgewor
CQlyZXR1cm4gKGZsYWdzICYgREVGQVVMVCkgIT0gMDsKIAl9CiAKQEAgLTY2NCw0ICs2OTMsMTMg
QEAKIAl9CiAKKwkvKioKKwkgKiBBbnN3ZXIgdHJ1ZSBpZiB0aGUgcmVjZWl2ZXIgaXMgdGhlIGRl
ZmF1bHQgbW9kaWZpZXIsIGZhbHNlIG90aGVyd2lzZS4KKwkgKiBAcmV0dXJuIHRydWUgaWYgdGhl
IHJlY2VpdmVyIGlzIHRoZSBkZWZhdWx0IG1vZGlmaWVyLCBmYWxzZSBvdGhlcndpc2UKKwkgKiBA
c2luY2UgMy45CisJICovCisJcHVibGljIGJvb2xlYW4gaXNEZWZhdWx0KCkgeworCQlyZXR1cm4g
dGhpcy5tb2RpZmllcktleXdvcmQgPT0gTW9kaWZpZXJLZXl3b3JkLkRFRkFVTFRfS0VZV09SRDsK
Kwl9CisKIAkvKiAob21pdCBqYXZhZG9jIGZvciB0aGlzIG1ldGhvZCkKIAkgKiBNZXRob2QgZGVj
bGFyZWQgb24gQVNUTm9kZS4=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="0"
              isprivate="0"
          >
            <attachid>228543</attachid>
            <date>2013-03-17 11:57:00 -0400</date>
            <delta_ts>2013-03-21 03:05:42 -0400</delta_ts>
            <desc>Updated patch</desc>
            <filename>Fix-for-bug-399791.patch</filename>
            <type>application/octet-stream</type>
            <size>10751</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9kb20vQVNUQ29udmVydGVyMTdUZXN0LmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
ZG9tL0FTVENvbnZlcnRlcjE3VGVzdC5qYXZhCmluZGV4IDFjZTBkNTAuLjFjZTA3ZmEgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9kb20vQVNUQ29udmVydGVyMTdUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Rv
bS9BU1RDb252ZXJ0ZXIxN1Rlc3QuamF2YQpAQCAtMSw4ICsxLDEyIEBACiAvKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDExIElCTSBDb3Jwb3JhdGlvbiBh
bmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBh
bmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUg
YWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0
ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBh
bmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdAogICogaHR0cDovL3d3
dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKKyAqCisgKiBUaGlzIGlzIGFuIGltcGxl
bWVudGF0aW9uIG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVy
IHRoZSBKYXZhCisgKiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFi
bGUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBjb2Rl
IGlzIG5vdCBjb21wYXRpYmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KICAq
CiAgKiBDb250cmlidXRvcnM6CkBAIC0zOSw0ICs0Myw1IEBACiBpbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmNvcmUuZG9tLklUeXBlQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5k
b20uSVZhcmlhYmxlQmluZGluZzsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uTWV0
aG9kRGVjbGFyYXRpb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLk1ldGhvZElu
dm9jYXRpb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLk51bWJlckxpdGVyYWw7
CkBAIC00NSw0ICs1MCw1IEBACiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuZG9tLlRyeVN0
YXRlbWVudDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uVHlwZTsKK2ltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuY29yZS5kb20uVHlwZURlY2xhcmF0aW9uOwogaW1wb3J0IG9yZy5lY2xp
cHNlLmpkdC5jb3JlLmRvbS5WYXJpYWJsZURlY2xhcmF0aW9uRnJhZ21lbnQ7CiBpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmNvcmUuZG9tLlZhcmlhYmxlRGVjbGFyYXRpb25TdGF0ZW1lbnQ7CkBAIC03
ODgsMyArNzk0LDI1IEBACiAJCWFzc2VydEVxdWFscygiV3Jvbmcgc2l6ZSIsIDIsIG1ldGhvZHMu
bGVuZ3RoKTsKIAl9CisJLyoKKwkgKiBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93
X2J1Zy5jZ2k/aWQ9Mzk5NzkxCisJICovCisJcHVibGljIHZvaWQgdGVzdDAwMjEoKSB0aHJvd3Mg
SmF2YU1vZGVsRXhjZXB0aW9uIHsKKwkJU3RyaW5nIGNvbnRlbnRzID0KKwkJCQkicHVibGljIGlu
dGVyZmFjZSBYIHtcbiIgKworCQkJCSIJc3RhdGljIHZvaWQgZm9vKCl7fVxuIiArCisJCQkJIiAg
IGRlZmF1bHQgdm9pZCBmb28oaW50IGkpe31cbiIgKworCQkJCSJ9XG4iOworCQkJdGhpcy53b3Jr
aW5nQ29weSA9IGdldFdvcmtpbmdDb3B5KCIvQ29udmVydGVyMTcvc3JjL1guamF2YSIsIGZhbHNl
KTsKKwkJCUFTVE5vZGUgbm9kZSA9IGJ1aWxkQVNUKGNvbnRlbnRzLCB0aGlzLndvcmtpbmdDb3B5
LCBmYWxzZSk7CisJCQlhc3NlcnRFcXVhbHMoIk5vdCBhIGNvbXBpbGF0aW9uIHVuaXQiLCBBU1RO
b2RlLkNPTVBJTEFUSU9OX1VOSVQsIG5vZGUuZ2V0Tm9kZVR5cGUoKSk7CisJCQlDb21waWxhdGlv
blVuaXQgdW5pdCA9IChDb21waWxhdGlvblVuaXQpIG5vZGU7CisJCQlUeXBlRGVjbGFyYXRpb24g
dHlwZSA9ICAoVHlwZURlY2xhcmF0aW9uKSB1bml0LnR5cGVzKCkuZ2V0KDApOworCQkJbm9kZSA9
IChBU1ROb2RlKSB0eXBlLmJvZHlEZWNsYXJhdGlvbnMoKS5nZXQoMCk7CisJCQlhc3NlcnRFcXVh
bHMoIk5vdCBhIG1ldGhvZCBEZWNsYXJhdGlvbiIsIEFTVE5vZGUuTUVUSE9EX0RFQ0xBUkFUSU9O
LCBub2RlLmdldE5vZGVUeXBlKCkpOworCQkJTWV0aG9kRGVjbGFyYXRpb24gbWV0aG9kID0gKE1l
dGhvZERlY2xhcmF0aW9uKSBub2RlOworCQkJYXNzZXJ0RXF1YWxzKCJNZXRob2Qgc2hvdWxkIGJl
IG1hbGZvcm1lZCIsIEFTVE5vZGUuTUFMRk9STUVELCAobWV0aG9kLmdldEZsYWdzKCkgJiBBU1RO
b2RlLk1BTEZPUk1FRCkpOworCisJCQltZXRob2QgPSAoTWV0aG9kRGVjbGFyYXRpb24pIHR5cGUu
Ym9keURlY2xhcmF0aW9ucygpLmdldCgxKTsKKwkJCWFzc2VydEVxdWFscygiTWV0aG9kIHNob3Vs
ZCBiZSBtYWxmb3JtZWQiLCBBU1ROb2RlLk1BTEZPUk1FRCwgKG1ldGhvZC5nZXRGbGFncygpICYg
QVNUTm9kZS5NQUxGT1JNRUQpKTsKKwl9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvZG9tL0FTVENv
bnZlcnRlcjE4VGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3Jj
L29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2RvbS9BU1RDb252ZXJ0ZXIxOFRlc3QuamF2YQpp
bmRleCA3NTE0YmYzLi4yOWQ1MDA1IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50
ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvZG9tL0FTVENvbnZlcnRl
cjE4VGVzdC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9v
cmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9kb20vQVNUQ29udmVydGVyMThUZXN0LmphdmEKQEAg
LTE4MjksNCArMTgyOSwzMiBAQAogCQlhc3NlcnRFcXVhbHMoIlR5cGUgc2hvdWxkIGJlIG1hbGZv
cm1lZCIsIEFTVE5vZGUuTUFMRk9STUVELCAobWV0aG9kLmdldEZsYWdzKCkgJiBBU1ROb2RlLk1B
TEZPUk1FRCkpOwogCX0KKwkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1
Zy5jZ2k/aWQ9Mzk5NzkxCisJcHVibGljIHZvaWQgdGVzdEJ1ZzM5OTc5MSgpIHRocm93cyBKYXZh
TW9kZWxFeGNlcHRpb24geworCQlTdHJpbmcgY29udGVudHMgPQorCQkJInB1YmxpYyBpbnRlcmZh
Y2UgWCB7XG4iICsKKwkJCSIJc3RhdGljIHZvaWQgZm9vKCl7fVxuIiArCisJCQkiICAgZGVmYXVs
dCB2b2lkIGZvbyhpbnQgaSl7fVxuIiArCisJCQkifVxuIjsKKwkJdGhpcy53b3JraW5nQ29weSA9
IGdldFdvcmtpbmdDb3B5KCIvQ29udmVydGVyMTgvc3JjL1guamF2YSIsIGZhbHNlKTsKKwkJQVNU
Tm9kZSBub2RlID0gYnVpbGRBU1QoY29udGVudHMsIHRoaXMud29ya2luZ0NvcHkpOworCQlhc3Nl
cnRFcXVhbHMoIk5vdCBhIGNvbXBpbGF0aW9uIHVuaXQiLCBBU1ROb2RlLkNPTVBJTEFUSU9OX1VO
SVQsIG5vZGUuZ2V0Tm9kZVR5cGUoKSk7CisJCUNvbXBpbGF0aW9uVW5pdCB1bml0ID0gKENvbXBp
bGF0aW9uVW5pdCkgbm9kZTsKKwkJVHlwZURlY2xhcmF0aW9uIHR5cGUgPSAgKFR5cGVEZWNsYXJh
dGlvbikgdW5pdC50eXBlcygpLmdldCgwKTsKKwkJbm9kZSA9IChBU1ROb2RlKSB0eXBlLmJvZHlE
ZWNsYXJhdGlvbnMoKS5nZXQoMCk7CisJCWFzc2VydEVxdWFscygiTm90IGEgbWV0aG9kIERlY2xh
cmF0aW9uIiwgQVNUTm9kZS5NRVRIT0RfREVDTEFSQVRJT04sIG5vZGUuZ2V0Tm9kZVR5cGUoKSk7
CisJCU1ldGhvZERlY2xhcmF0aW9uIG1ldGhvZCA9IChNZXRob2REZWNsYXJhdGlvbikgbm9kZTsK
KwkJYXNzZXJ0RXF1YWxzKCJNZXRob2Qgc2hvdWxkIG5vdCBiZSBtYWxmb3JtZWQiLCAwLCAobWV0
aG9kLmdldEZsYWdzKCkgJiBBU1ROb2RlLk1BTEZPUk1FRCkpOworCQlMaXN0IG1vZGlmaWVycyA9
IG1ldGhvZC5tb2RpZmllcnMoKTsKKwkJYXNzZXJ0RXF1YWxzKCJJbmNvcnJlY3Qgbm8gb2YgbW9k
ZmllcnMiLCAxLCBtb2RpZmllcnMuc2l6ZSgpKTsKKwkJTW9kaWZpZXIgbW9kaWZpZXIgPSAoTW9k
aWZpZXIpIG1vZGlmaWVycy5nZXQoMCk7CisJCWFzc2VydFNhbWUoIkluY29ycmVjdCBtb2RpZmll
ciBrZXl3b3JkIiwgTW9kaWZpZXIuTW9kaWZpZXJLZXl3b3JkLlNUQVRJQ19LRVlXT1JELCBtb2Rp
Zmllci5nZXRLZXl3b3JkKCkpOwogCisJCW1ldGhvZCA9IChNZXRob2REZWNsYXJhdGlvbikgdHlw
ZS5ib2R5RGVjbGFyYXRpb25zKCkuZ2V0KDEpOworCQlhc3NlcnRFcXVhbHMoIk1ldGhvZCBzaG91
bGQgbm90IGJlIG1hbGZvcm1lZCIsIDAsIChtZXRob2QuZ2V0RmxhZ3MoKSAmIEFTVE5vZGUuTUFM
Rk9STUVEKSk7CisKKwkJbW9kaWZpZXJzID0gbWV0aG9kLm1vZGlmaWVycygpOworCQlhc3NlcnRF
cXVhbHMoIkluY29ycmVjdCBubyBvZiBtb2RmaWVycyIsIDEsIG1vZGlmaWVycy5zaXplKCkpOwor
CQltb2RpZmllciA9IChNb2RpZmllcikgbW9kaWZpZXJzLmdldCgwKTsKKwkJYXNzZXJ0U2FtZSgi
SW5jb3JyZWN0IG1vZGlmaWVyIGtleXdvcmQiLCBNb2RpZmllci5Nb2RpZmllcktleXdvcmQuREVG
QVVMVF9LRVlXT1JELCBtb2RpZmllci5nZXRLZXl3b3JkKCkpOworCX0KIH0KZGlmZiAtLWdpdCBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29y
ZS90ZXN0cy9kb20vQVNUVGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9k
ZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2RvbS9BU1RUZXN0LmphdmEKaW5kZXgg
NDJiMjFjYy4uODY4NGU4ZiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMu
bW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2RvbS9BU1RUZXN0LmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9j
b3JlL3Rlc3RzL2RvbS9BU1RUZXN0LmphdmEKQEAgLTU2MDIsNSArNTYwMiw2IEBACiAJCQkJdGhp
cy5hc3QubmV3TW9kaWZpZXIoTW9kaWZpZXIuTW9kaWZpZXJLZXl3b3JkLlRSQU5TSUVOVF9LRVlX
T1JEKSwKIAkJCQl0aGlzLmFzdC5uZXdNb2RpZmllcihNb2RpZmllci5Nb2RpZmllcktleXdvcmQu
Vk9MQVRJTEVfS0VZV09SRCksCi0JCQkJdGhpcy5hc3QubmV3TW9kaWZpZXIoTW9kaWZpZXIuTW9k
aWZpZXJLZXl3b3JkLlNUUklDVEZQX0tFWVdPUkQpCisJCQkJdGhpcy5hc3QubmV3TW9kaWZpZXIo
TW9kaWZpZXIuTW9kaWZpZXJLZXl3b3JkLlNUUklDVEZQX0tFWVdPUkQpLAorCQkJCXRoaXMuYXN0
Lm5ld01vZGlmaWVyKE1vZGlmaWVyLk1vZGlmaWVyS2V5d29yZC5ERUZBVUxUX0tFWVdPUkQpCiAJ
CX07CiAJCXJldHVybiBhbGxNb2RzOwpAQCAtODUxOCw0ICs4NTE5LDUgQEAKIAkJYXNzZXJ0VHJ1
ZShNb2RpZmllci5Nb2RpZmllcktleXdvcmQuVk9MQVRJTEVfS0VZV09SRC50b1N0cmluZygpLmVx
dWFscygidm9sYXRpbGUiKSk7IC8vJE5PTi1OTFMtMSQKIAkJYXNzZXJ0VHJ1ZShNb2RpZmllci5N
b2RpZmllcktleXdvcmQuU1RSSUNURlBfS0VZV09SRC50b1N0cmluZygpLmVxdWFscygic3RyaWN0
ZnAiKSk7IC8vJE5PTi1OTFMtMSQKKwkJYXNzZXJ0VHJ1ZShNb2RpZmllci5Nb2RpZmllcktleXdv
cmQuREVGQVVMVF9LRVlXT1JELnRvU3RyaW5nKCkuZXF1YWxzKCJkZWZhdWx0IikpOyAvLyROT04t
TkxTLTEkCiAKIAkJZmluYWwgTW9kaWZpZXIuTW9kaWZpZXJLZXl3b3JkW10ga25vd24gPSB7CkBA
IC04NTMxLDQgKzg1MzMsNSBAQAogCQkJTW9kaWZpZXIuTW9kaWZpZXJLZXl3b3JkLlZPTEFUSUxF
X0tFWVdPUkQsCiAJCQlNb2RpZmllci5Nb2RpZmllcktleXdvcmQuU1RSSUNURlBfS0VZV09SRCwK
KwkJCU1vZGlmaWVyLk1vZGlmaWVyS2V5d29yZC5ERUZBVUxUX0tFWVdPUkQKIAkJfTsKIApkaWZm
IC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2Rv
bS9BU1QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29y
ZS9kb20vQVNULmphdmEKaW5kZXggOGYzZTMyYy4uZjVmZWUyZSAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1QuamF2YQorKysg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FTVC5q
YXZhCkBAIC0xNzUyLDUgKzE3NTIsNSBAQAogCSAqIHJlcXVlc3RlZCB0aGUgbW9kaWZpZXJzIG5v
ZGVzIHdpbGwgYXBwZWFyIGluIHRoZSBmb2xsb3dpbmcgb3JkZXI6CiAJICogcHVibGljLCBwcm90
ZWN0ZWQsIHByaXZhdGUsIGFic3RyYWN0LCBzdGF0aWMsIGZpbmFsLCBzeW5jaHJvbml6ZWQsCi0J
ICogbmF0aXZlLCBzdHJpY3RmcCwgdHJhbnNpZW50LCB2b2xhdGlsZS4gVGhpcyBvcmRlciBpcyBj
b25zaXN0ZW50CisJICogbmF0aXZlLCBzdHJpY3RmcCwgdHJhbnNpZW50LCB2b2xhdGlsZSwgZGVm
YXVsdC4gVGhpcyBvcmRlciBpcyBjb25zaXN0ZW50CiAJICogd2l0aCB0aGUgcmVjb21tZW5kYXRp
b25zIGluIEpMUzIgOC4xLjEsIDguMy4xLCBhbmQgOC40LjMuCiAJICoKQEAgLTE4MDAsNCArMTgw
MCw3IEBACiAJCQlyZXN1bHQuYWRkKG5ld01vZGlmaWVyKE1vZGlmaWVyLk1vZGlmaWVyS2V5d29y
ZC5WT0xBVElMRV9LRVlXT1JEKSk7CiAJCX0KKwkJaWYgKE1vZGlmaWVyLmlzRGVmYXVsdChmbGFn
cykpIHsKKwkJCXJlc3VsdC5hZGQobmV3TW9kaWZpZXIoTW9kaWZpZXIuTW9kaWZpZXJLZXl3b3Jk
LkRFRkFVTFRfS0VZV09SRCkpOworCQl9CiAJCXJldHVybiByZXN1bHQ7CiAJfQpkaWZmIC0tZ2l0
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1RD
b252ZXJ0ZXIuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQv
Y29yZS9kb20vQVNUQ29udmVydGVyLmphdmEKaW5kZXggZDBmMmQ3MS4uNjEwNWEyOSAxMDA2NDQK
LS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9B
U1RDb252ZXJ0ZXIuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlw
c2UvamR0L2NvcmUvZG9tL0FTVENvbnZlcnRlci5qYXZhCkBAIC01OTksOSArNTk5LDEwIEBACiAJ
CQkJfQogCQkJfQotCQkJaWYgKGJsb2NrICE9IG51bGwKLQkJCQkJJiYgKE1vZGlmaWVyLmlzQWJz
dHJhY3QobWV0aG9kRGVjbC5nZXRNb2RpZmllcnMoKSkKLQkJCQkJCQl8fCBNb2RpZmllci5pc05h
dGl2ZShtZXRob2REZWNsLmdldE1vZGlmaWVycygpKQotCQkJCQkJCXx8IGlzSW50ZXJmYWNlKSkg
ewotCQkJCW1ldGhvZERlY2wuc2V0RmxhZ3MobWV0aG9kRGVjbC5nZXRGbGFncygpIHwgQVNUTm9k
ZS5NQUxGT1JNRUQpOworCQkJaWYgKGJsb2NrICE9IG51bGwpIHsKKwkJCQlpZiAoKG1ldGhvZERl
Y2xhcmF0aW9uLm1vZGlmaWVycyAmIChDbGFzc0ZpbGVDb25zdGFudHMuQWNjQWJzdHJhY3QgfCBD
bGFzc0ZpbGVDb25zdGFudHMuQWNjTmF0aXZlKSkgIT0gMAorCQkJCQkJfHwgKGlzSW50ZXJmYWNl
ICYmICh0aGlzLmFzdC5hcGlMZXZlbCA8IEFTVC5KTFM4IHx8CisJCQkJCQkJKG1ldGhvZERlY2xh
cmF0aW9uLm1vZGlmaWVycyAmIChDbGFzc0ZpbGVDb25zdGFudHMuQWNjU3RhdGljIHwgRXh0cmFD
b21waWxlck1vZGlmaWVycy5BY2NEZWZhdWx0TWV0aG9kKSkgPT0gMCkpKSB7CisJCQkJCW1ldGhv
ZERlY2wuc2V0RmxhZ3MobWV0aG9kRGVjbC5nZXRGbGFncygpIHwgQVNUTm9kZS5NQUxGT1JNRUQp
OworCQkJCX0KIAkJCX0KIAkJfSBlbHNlIHsKQEAgLTQ4MTEsNCArNDgxMiw3IEBACiAJCQkJCQlt
b2RpZmllciA9IGNyZWF0ZU1vZGlmaWVyKE1vZGlmaWVyLk1vZGlmaWVyS2V5d29yZC5TVFJJQ1RG
UF9LRVlXT1JEKTsKIAkJCQkJCWJyZWFrOworCQkJCQljYXNlIFRlcm1pbmFsVG9rZW5zLlRva2Vu
TmFtZWRlZmF1bHQ6CisJCQkJCQltb2RpZmllciA9IGNyZWF0ZU1vZGlmaWVyKE1vZGlmaWVyLk1v
ZGlmaWVyS2V5d29yZC5ERUZBVUxUX0tFWVdPUkQpOworCQkJCQkJYnJlYWs7CiAJCQkJCWNhc2Ug
VGVybWluYWxUb2tlbnMuVG9rZW5OYW1lQVQgOgogCQkJCQkJLy8gd2UgaGF2ZSBhbiBhbm5vdGF0
aW9uCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0
L2NvcmUvZG9tL01vZGlmaWVyLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2Vj
bGlwc2UvamR0L2NvcmUvZG9tL01vZGlmaWVyLmphdmEKaW5kZXggNjNmYmViMC4uZWU0MzY2NSAx
MDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L2RvbS9Nb2RpZmllci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNs
aXBzZS9qZHQvY29yZS9kb20vTW9kaWZpZXIuamF2YQpAQCAtMzIsNCArMzIsNSBAQAogICogICAg
PGI+dm9sYXRpbGU8L2I+CiAgKiAgICA8Yj5zdHJpY3RmcDwvYj4KKyAqICAgIDxiPmRlZmF1bHQ8
L2I+CiAgKiA8L3ByZT4KICAqIDxwPgpAQCAtODksNCArOTAsMTEgQEAKIAkJLyoqICJ2b2xhdGls
ZSIgbW9kaWZpZXIgd2l0aCBmbGFnIHZhbHVlIHtAbGluayBNb2RpZmllciNWT0xBVElMRX0uICov
CiAJCXB1YmxpYyBzdGF0aWMgZmluYWwgTW9kaWZpZXJLZXl3b3JkIFZPTEFUSUxFX0tFWVdPUkQg
PSBuZXcgTW9kaWZpZXJLZXl3b3JkKCJ2b2xhdGlsZSIsIFZPTEFUSUxFKTsvLyROT04tTkxTLTEk
CisKKwkJLyoqCisJCSAqICJkZWZhdWx0IiBtb2RpZmllciB3aXRoIGZsYWcgdmFsdWUge0BsaW5r
IE1vZGlmaWVyI0RFRkFVTFR9LgorCQkgKiBAc2luY2UgMy45CisJCSAqLworCQlwdWJsaWMgc3Rh
dGljIGZpbmFsIE1vZGlmaWVyS2V5d29yZCBERUZBVUxUX0tFWVdPUkQgPSBuZXcgTW9kaWZpZXJL
ZXl3b3JkKCJkZWZhdWx0IiwgREVGQVVMVCk7Ly8kTk9OLU5MUy0xJAorCiAJCXN0YXRpYyB7CiAJ
CQlLRVlXT1JEUyA9IG5ldyBIYXNoTWFwKDIwKTsKQEAgLTEwMiw1ICsxMTAsNiBAQAogCQkJCQlU
UkFOU0lFTlRfS0VZV09SRCwKIAkJCQkJVk9MQVRJTEVfS0VZV09SRCwKLQkJCQkJU1RSSUNURlBf
S0VZV09SRAorCQkJCQlTVFJJQ1RGUF9LRVlXT1JELAorCQkJCQlERUZBVUxUX0tFWVdPUkQKIAkJ
CQl9OwogCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBvcHMubGVuZ3RoOyBpKyspIHsKQEAgLTI5Myw0
ICszMDIsMTEgQEAKIAlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBWT0xBVElMRSA9IDB4MDA0MDsK
IAorCS8qKgorCSAqICJkZWZhdWx0IiBtb2RpZmllciBjb25zdGFudCAoYml0IG1hc2spLgorCSAq
IEFwcGxpY2FibGUgb25seSB0byBtZXRob2RzLgorCSAqIEBzaW5jZSAzLjkKKwkgKi8KKwlwdWJs
aWMgc3RhdGljIGZpbmFsIGludCBERUZBVUxUID0gMHgxMDAwMDsKKwogCXN0YXRpYyB7CiAJCUxp
c3QgcHJvcGVyeUxpc3QgPSBuZXcgQXJyYXlMaXN0KDIpOwpAQCAtNDQxLDQgKzQ1NywxNyBAQAog
CXB1YmxpYyBzdGF0aWMgYm9vbGVhbiBpc1ZvbGF0aWxlKGludCBmbGFncykgewogCQlyZXR1cm4g
KGZsYWdzICYgVk9MQVRJTEUpICE9IDA7CisJfQorCisJLyoqCisJICogUmV0dXJucyB3aGV0aGVy
IHRoZSBnaXZlbiBmbGFncyBpbmNsdWRlcyB0aGUgImRlZmF1bHQiIG1vZGlmaWVyLgorCSAqIEFw
cGxpY2FibGUgb25seSB0byBtZXRob2RzLgorCSAqCisJICogQHBhcmFtIGZsYWdzIHRoZSBtb2Rp
ZmllciBmbGFncworCSAqIEByZXR1cm4gPGNvZGU+dHJ1ZTwvY29kZT4gaWYgdGhlIDxjb2RlPkRF
RkFVTFQ8L2NvZGU+IGJpdCBpcyBzZXQKKwkgKiBhbmQgPGNvZGU+ZmFsc2U8L2NvZGU+IG90aGVy
d2lzZQorCSAqIEBzaW5jZSAzLjkKKwkgKi8KKwlwdWJsaWMgc3RhdGljIGJvb2xlYW4gaXNEZWZh
dWx0KGludCBmbGFncykgeworCQlyZXR1cm4gKGZsYWdzICYgREVGQVVMVCkgIT0gMDsKIAl9CiAK
QEAgLTY2NCw0ICs2OTMsMTMgQEAKIAl9CiAKKwkvKioKKwkgKiBBbnN3ZXIgdHJ1ZSBpZiB0aGUg
cmVjZWl2ZXIgaXMgdGhlIGRlZmF1bHQgbW9kaWZpZXIsIGZhbHNlIG90aGVyd2lzZS4KKwkgKiBA
cmV0dXJuIHRydWUgaWYgdGhlIHJlY2VpdmVyIGlzIHRoZSBkZWZhdWx0IG1vZGlmaWVyLCBmYWxz
ZSBvdGhlcndpc2UKKwkgKiBAc2luY2UgMy45CisJICovCisJcHVibGljIGJvb2xlYW4gaXNEZWZh
dWx0KCkgeworCQlyZXR1cm4gdGhpcy5tb2RpZmllcktleXdvcmQgPT0gTW9kaWZpZXJLZXl3b3Jk
LkRFRkFVTFRfS0VZV09SRDsKKwl9CisKIAkvKiAob21pdCBqYXZhZG9jIGZvciB0aGlzIG1ldGhv
ZCkKIAkgKiBNZXRob2QgZGVjbGFyZWQgb24gQVNUTm9kZS4=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>228812</attachid>
            <date>2013-03-21 03:05:00 -0400</date>
            <delta_ts>2013-03-25 04:57:43 -0400</delta_ts>
            <desc>Updated patch</desc>
            <filename>Fix-for-bug-399791.patch</filename>
            <type>text/plain</type>
            <size>11539</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9kb20vQVNUQ29udmVydGVyMTdUZXN0LmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
ZG9tL0FTVENvbnZlcnRlcjE3VGVzdC5qYXZhCmluZGV4IDA5ZmIyMjMuLjkyYTcwOGIgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9kb20vQVNUQ29udmVydGVyMTdUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Rv
bS9BU1RDb252ZXJ0ZXIxN1Rlc3QuamF2YQpAQCAtOTQyLDMgKzk0MiwyNSBAQAogCQlhc3NlcnRO
dWxsKGJpbmRpbmcpOwkKIAl9CisJLyoKKwkgKiBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVn
cy9zaG93X2J1Zy5jZ2k/aWQ9Mzk5NzkxCisJICovCisJcHVibGljIHZvaWQgdGVzdDAwMjEoKSB0
aHJvd3MgSmF2YU1vZGVsRXhjZXB0aW9uIHsKKwkJU3RyaW5nIGNvbnRlbnRzID0KKwkJCQkicHVi
bGljIGludGVyZmFjZSBYIHtcbiIgKworCQkJCSIJc3RhdGljIHZvaWQgZm9vKCl7fVxuIiArCisJ
CQkJIiAgIGRlZmF1bHQgdm9pZCBmb28oaW50IGkpe31cbiIgKworCQkJCSJ9XG4iOworCQkJdGhp
cy53b3JraW5nQ29weSA9IGdldFdvcmtpbmdDb3B5KCIvQ29udmVydGVyMTcvc3JjL1guamF2YSIs
IGZhbHNlKTsKKwkJCUFTVE5vZGUgbm9kZSA9IGJ1aWxkQVNUKGNvbnRlbnRzLCB0aGlzLndvcmtp
bmdDb3B5LCBmYWxzZSk7CisJCQlhc3NlcnRFcXVhbHMoIk5vdCBhIGNvbXBpbGF0aW9uIHVuaXQi
LCBBU1ROb2RlLkNPTVBJTEFUSU9OX1VOSVQsIG5vZGUuZ2V0Tm9kZVR5cGUoKSk7CisJCQlDb21w
aWxhdGlvblVuaXQgdW5pdCA9IChDb21waWxhdGlvblVuaXQpIG5vZGU7CisJCQlUeXBlRGVjbGFy
YXRpb24gdHlwZSA9ICAoVHlwZURlY2xhcmF0aW9uKSB1bml0LnR5cGVzKCkuZ2V0KDApOworCQkJ
bm9kZSA9IChBU1ROb2RlKSB0eXBlLmJvZHlEZWNsYXJhdGlvbnMoKS5nZXQoMCk7CisJCQlhc3Nl
cnRFcXVhbHMoIk5vdCBhIG1ldGhvZCBEZWNsYXJhdGlvbiIsIEFTVE5vZGUuTUVUSE9EX0RFQ0xB
UkFUSU9OLCBub2RlLmdldE5vZGVUeXBlKCkpOworCQkJTWV0aG9kRGVjbGFyYXRpb24gbWV0aG9k
ID0gKE1ldGhvZERlY2xhcmF0aW9uKSBub2RlOworCQkJYXNzZXJ0RXF1YWxzKCJNZXRob2Qgc2hv
dWxkIGJlIG1hbGZvcm1lZCIsIEFTVE5vZGUuTUFMRk9STUVELCAobWV0aG9kLmdldEZsYWdzKCkg
JiBBU1ROb2RlLk1BTEZPUk1FRCkpOworCisJCQltZXRob2QgPSAoTWV0aG9kRGVjbGFyYXRpb24p
IHR5cGUuYm9keURlY2xhcmF0aW9ucygpLmdldCgxKTsKKwkJCWFzc2VydEVxdWFscygiTWV0aG9k
IHNob3VsZCBiZSBtYWxmb3JtZWQiLCBBU1ROb2RlLk1BTEZPUk1FRCwgKG1ldGhvZC5nZXRGbGFn
cygpICYgQVNUTm9kZS5NQUxGT1JNRUQpKTsKKwl9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvZG9t
L0FTVENvbnZlcnRlcjE4VGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9k
ZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2RvbS9BU1RDb252ZXJ0ZXIxOFRlc3Qu
amF2YQppbmRleCAzZjMwYWQ3Li5iMjE4ZjQwIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvZG9tL0FTVENv
bnZlcnRlcjE4VGVzdC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVs
L3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9kb20vQVNUQ29udmVydGVyMThUZXN0Lmph
dmEKQEAgLTE4OTcsNCArMTg5Nyw0MiBAQAogCQlhc3NlcnRFcXVhbHMoIlJlZHVjZUludCIsIGJp
bmRpbmcuZ2V0TmFtZSgpKTsKIAl9CisJLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mv
c2hvd19idWcuY2dpP2lkPTM5OTc5MQorCXB1YmxpYyB2b2lkIHRlc3RCdWczOTk3OTEoKSB0aHJv
d3MgSmF2YU1vZGVsRXhjZXB0aW9uIHsKKwkJU3RyaW5nIGNvbnRlbnRzID0KKwkJCSJwdWJsaWMg
aW50ZXJmYWNlIFgge1xuIiArCisJCQkiCXN0YXRpYyB2b2lkIGZvbygpe31cbiIgKworCQkJIiAg
IHB1YmxpYyBkZWZhdWx0IHZvaWQgZm9vKGludCBpKXt9XG4iICsKKwkJCSIgICBuYXRpdmUgdm9p
ZCBmb28oZmxvYXQgZil7fVxuIiArCisJCQkiICAgYWJzdHJhY3Qgdm9pZCBmb28obG9uZyBsKXt9
XG4iICsKKwkJCSJ9XG4iOworCQl0aGlzLndvcmtpbmdDb3B5ID0gZ2V0V29ya2luZ0NvcHkoIi9D
b252ZXJ0ZXIxOC9zcmMvWC5qYXZhIiwgZmFsc2UpOworCQlBU1ROb2RlIG5vZGUgPSBidWlsZEFT
VChjb250ZW50cywgdGhpcy53b3JraW5nQ29weSwgZmFsc2UpOworCQlhc3NlcnRFcXVhbHMoIk5v
dCBhIGNvbXBpbGF0aW9uIHVuaXQiLCBBU1ROb2RlLkNPTVBJTEFUSU9OX1VOSVQsIG5vZGUuZ2V0
Tm9kZVR5cGUoKSk7CisJCUNvbXBpbGF0aW9uVW5pdCB1bml0ID0gKENvbXBpbGF0aW9uVW5pdCkg
bm9kZTsKKwkJVHlwZURlY2xhcmF0aW9uIHR5cGUgPSAgKFR5cGVEZWNsYXJhdGlvbikgdW5pdC50
eXBlcygpLmdldCgwKTsKKwkJbm9kZSA9IChBU1ROb2RlKSB0eXBlLmJvZHlEZWNsYXJhdGlvbnMo
KS5nZXQoMCk7CisJCWFzc2VydEVxdWFscygiTm90IGEgbWV0aG9kIERlY2xhcmF0aW9uIiwgQVNU
Tm9kZS5NRVRIT0RfREVDTEFSQVRJT04sIG5vZGUuZ2V0Tm9kZVR5cGUoKSk7CisJCU1ldGhvZERl
Y2xhcmF0aW9uIG1ldGhvZCA9IChNZXRob2REZWNsYXJhdGlvbikgbm9kZTsKKwkJYXNzZXJ0RXF1
YWxzKCJNZXRob2Qgc2hvdWxkIG5vdCBiZSBtYWxmb3JtZWQiLCAwLCAobWV0aG9kLmdldEZsYWdz
KCkgJiBBU1ROb2RlLk1BTEZPUk1FRCkpOworCQlMaXN0IG1vZGlmaWVycyA9IG1ldGhvZC5tb2Rp
ZmllcnMoKTsKKwkJYXNzZXJ0RXF1YWxzKCJJbmNvcnJlY3Qgbm8gb2YgbW9kZmllcnMiLCAxLCBt
b2RpZmllcnMuc2l6ZSgpKTsKKwkJTW9kaWZpZXIgbW9kaWZpZXIgPSAoTW9kaWZpZXIpIG1vZGlm
aWVycy5nZXQoMCk7CisJCWFzc2VydFNhbWUoIkluY29ycmVjdCBtb2RpZmllciBrZXl3b3JkIiwg
TW9kaWZpZXIuTW9kaWZpZXJLZXl3b3JkLlNUQVRJQ19LRVlXT1JELCBtb2RpZmllci5nZXRLZXl3
b3JkKCkpOwogCisJCW1ldGhvZCA9IChNZXRob2REZWNsYXJhdGlvbikgdHlwZS5ib2R5RGVjbGFy
YXRpb25zKCkuZ2V0KDEpOworCQlhc3NlcnRFcXVhbHMoIk1ldGhvZCBzaG91bGQgbm90IGJlIG1h
bGZvcm1lZCIsIDAsIChtZXRob2QuZ2V0RmxhZ3MoKSAmIEFTVE5vZGUuTUFMRk9STUVEKSk7CisK
KwkJbW9kaWZpZXJzID0gbWV0aG9kLm1vZGlmaWVycygpOworCQlhc3NlcnRFcXVhbHMoIkluY29y
cmVjdCBubyBvZiBtb2RmaWVycyIsIDIsIG1vZGlmaWVycy5zaXplKCkpOworCQltb2RpZmllciA9
IChNb2RpZmllcikgbW9kaWZpZXJzLmdldCgxKTsKKwkJYXNzZXJ0U2FtZSgiSW5jb3JyZWN0IG1v
ZGlmaWVyIGtleXdvcmQiLCBNb2RpZmllci5Nb2RpZmllcktleXdvcmQuREVGQVVMVF9LRVlXT1JE
LCBtb2RpZmllci5nZXRLZXl3b3JkKCkpOworCQlhc3NlcnRUcnVlKCJJbmNvcnJlY3QgbW9kaWZp
ZXIiLCBtb2RpZmllci5pc0RlZmF1bHQoKSk7CisJCWFzc2VydEVxdWFscygiSW5jb3JyZWN0IEFT
VCIsICJwdWJsaWMgZGVmYXVsdCB2b2lkIGZvbyhpbnQgaSl7XG59XG4iLCBtZXRob2QudG9TdHJp
bmcoKSk7CisKKwkJbWV0aG9kID0gKE1ldGhvZERlY2xhcmF0aW9uKSB0eXBlLmJvZHlEZWNsYXJh
dGlvbnMoKS5nZXQoMik7CisJCWFzc2VydEVxdWFscygiTWV0aG9kIHNob3VsZCBiZSBtYWxmb3Jt
ZWQiLCBBU1ROb2RlLk1BTEZPUk1FRCwgKG1ldGhvZC5nZXRGbGFncygpICYgQVNUTm9kZS5NQUxG
T1JNRUQpKTsKKworCQltZXRob2QgPSAoTWV0aG9kRGVjbGFyYXRpb24pIHR5cGUuYm9keURlY2xh
cmF0aW9ucygpLmdldCgzKTsKKwkJYXNzZXJ0RXF1YWxzKCJNZXRob2Qgc2hvdWxkIGJlIG1hbGZv
cm1lZCIsIEFTVE5vZGUuTUFMRk9STUVELCAobWV0aG9kLmdldEZsYWdzKCkgJiBBU1ROb2RlLk1B
TEZPUk1FRCkpOworCX0KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3Rz
Lm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9kb20vQVNUVGVzdC5qYXZhIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L3Rlc3RzL2RvbS9BU1RUZXN0LmphdmEKaW5kZXggNDJiMjFjYy4uODY4NGU4ZiAxMDA2NDQKLS0t
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9j
b3JlL3Rlc3RzL2RvbS9BU1RUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVz
dHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2RvbS9BU1RUZXN0LmphdmEK
QEAgLTU2MDIsNSArNTYwMiw2IEBACiAJCQkJdGhpcy5hc3QubmV3TW9kaWZpZXIoTW9kaWZpZXIu
TW9kaWZpZXJLZXl3b3JkLlRSQU5TSUVOVF9LRVlXT1JEKSwKIAkJCQl0aGlzLmFzdC5uZXdNb2Rp
ZmllcihNb2RpZmllci5Nb2RpZmllcktleXdvcmQuVk9MQVRJTEVfS0VZV09SRCksCi0JCQkJdGhp
cy5hc3QubmV3TW9kaWZpZXIoTW9kaWZpZXIuTW9kaWZpZXJLZXl3b3JkLlNUUklDVEZQX0tFWVdP
UkQpCisJCQkJdGhpcy5hc3QubmV3TW9kaWZpZXIoTW9kaWZpZXIuTW9kaWZpZXJLZXl3b3JkLlNU
UklDVEZQX0tFWVdPUkQpLAorCQkJCXRoaXMuYXN0Lm5ld01vZGlmaWVyKE1vZGlmaWVyLk1vZGlm
aWVyS2V5d29yZC5ERUZBVUxUX0tFWVdPUkQpCiAJCX07CiAJCXJldHVybiBhbGxNb2RzOwpAQCAt
ODUxOCw0ICs4NTE5LDUgQEAKIAkJYXNzZXJ0VHJ1ZShNb2RpZmllci5Nb2RpZmllcktleXdvcmQu
Vk9MQVRJTEVfS0VZV09SRC50b1N0cmluZygpLmVxdWFscygidm9sYXRpbGUiKSk7IC8vJE5PTi1O
TFMtMSQKIAkJYXNzZXJ0VHJ1ZShNb2RpZmllci5Nb2RpZmllcktleXdvcmQuU1RSSUNURlBfS0VZ
V09SRC50b1N0cmluZygpLmVxdWFscygic3RyaWN0ZnAiKSk7IC8vJE5PTi1OTFMtMSQKKwkJYXNz
ZXJ0VHJ1ZShNb2RpZmllci5Nb2RpZmllcktleXdvcmQuREVGQVVMVF9LRVlXT1JELnRvU3RyaW5n
KCkuZXF1YWxzKCJkZWZhdWx0IikpOyAvLyROT04tTkxTLTEkCiAKIAkJZmluYWwgTW9kaWZpZXIu
TW9kaWZpZXJLZXl3b3JkW10ga25vd24gPSB7CkBAIC04NTMxLDQgKzg1MzMsNSBAQAogCQkJTW9k
aWZpZXIuTW9kaWZpZXJLZXl3b3JkLlZPTEFUSUxFX0tFWVdPUkQsCiAJCQlNb2RpZmllci5Nb2Rp
ZmllcktleXdvcmQuU1RSSUNURlBfS0VZV09SRCwKKwkJCU1vZGlmaWVyLk1vZGlmaWVyS2V5d29y
ZC5ERUZBVUxUX0tFWVdPUkQKIAkJfTsKIApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1QuamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vQVNULmphdmEKaW5kZXggOGYzZTMy
Yy4uZjVmZWUyZSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xp
cHNlL2pkdC9jb3JlL2RvbS9BU1QuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20v
b3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FTVC5qYXZhCkBAIC0xNzUyLDUgKzE3NTIsNSBAQAog
CSAqIHJlcXVlc3RlZCB0aGUgbW9kaWZpZXJzIG5vZGVzIHdpbGwgYXBwZWFyIGluIHRoZSBmb2xs
b3dpbmcgb3JkZXI6CiAJICogcHVibGljLCBwcm90ZWN0ZWQsIHByaXZhdGUsIGFic3RyYWN0LCBz
dGF0aWMsIGZpbmFsLCBzeW5jaHJvbml6ZWQsCi0JICogbmF0aXZlLCBzdHJpY3RmcCwgdHJhbnNp
ZW50LCB2b2xhdGlsZS4gVGhpcyBvcmRlciBpcyBjb25zaXN0ZW50CisJICogbmF0aXZlLCBzdHJp
Y3RmcCwgdHJhbnNpZW50LCB2b2xhdGlsZSwgZGVmYXVsdC4gVGhpcyBvcmRlciBpcyBjb25zaXN0
ZW50CiAJICogd2l0aCB0aGUgcmVjb21tZW5kYXRpb25zIGluIEpMUzIgOC4xLjEsIDguMy4xLCBh
bmQgOC40LjMuCiAJICoKQEAgLTE4MDAsNCArMTgwMCw3IEBACiAJCQlyZXN1bHQuYWRkKG5ld01v
ZGlmaWVyKE1vZGlmaWVyLk1vZGlmaWVyS2V5d29yZC5WT0xBVElMRV9LRVlXT1JEKSk7CiAJCX0K
KwkJaWYgKE1vZGlmaWVyLmlzRGVmYXVsdChmbGFncykpIHsKKwkJCXJlc3VsdC5hZGQobmV3TW9k
aWZpZXIoTW9kaWZpZXIuTW9kaWZpZXJLZXl3b3JkLkRFRkFVTFRfS0VZV09SRCkpOworCQl9CiAJ
CXJldHVybiByZXN1bHQ7CiAJfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9t
L29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1RDb252ZXJ0ZXIuamF2YSBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vQVNUQ29udmVydGVyLmphdmEK
aW5kZXggY2Q5NGQ3Zi4uNTViZGRmNCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
ZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1RDb252ZXJ0ZXIuamF2YQorKysgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FTVENvbnZlcnRl
ci5qYXZhCkBAIC02MDMsOSArNjAzLDEwIEBACiAJCQkJfQogCQkJfQotCQkJaWYgKGJsb2NrICE9
IG51bGwKLQkJCQkJJiYgKE1vZGlmaWVyLmlzQWJzdHJhY3QobWV0aG9kRGVjbC5nZXRNb2RpZmll
cnMoKSkKLQkJCQkJCQl8fCBNb2RpZmllci5pc05hdGl2ZShtZXRob2REZWNsLmdldE1vZGlmaWVy
cygpKQotCQkJCQkJCXx8IGlzSW50ZXJmYWNlKSkgewotCQkJCW1ldGhvZERlY2wuc2V0RmxhZ3Mo
bWV0aG9kRGVjbC5nZXRGbGFncygpIHwgQVNUTm9kZS5NQUxGT1JNRUQpOworCQkJaWYgKGJsb2Nr
ICE9IG51bGwpIHsKKwkJCQlpZiAoKG1ldGhvZERlY2xhcmF0aW9uLm1vZGlmaWVycyAmIChDbGFz
c0ZpbGVDb25zdGFudHMuQWNjQWJzdHJhY3QgfCBDbGFzc0ZpbGVDb25zdGFudHMuQWNjTmF0aXZl
KSkgIT0gMAorCQkJCQkJfHwgKGlzSW50ZXJmYWNlICYmICh0aGlzLmFzdC5hcGlMZXZlbCA8IEFT
VC5KTFM4IHx8CisJCQkJCQkJKG1ldGhvZERlY2xhcmF0aW9uLm1vZGlmaWVycyAmIChDbGFzc0Zp
bGVDb25zdGFudHMuQWNjU3RhdGljIHwgRXh0cmFDb21waWxlck1vZGlmaWVycy5BY2NEZWZhdWx0
TWV0aG9kKSkgPT0gMCkpKSB7CisJCQkJCW1ldGhvZERlY2wuc2V0RmxhZ3MobWV0aG9kRGVjbC5n
ZXRGbGFncygpIHwgQVNUTm9kZS5NQUxGT1JNRUQpOworCQkJCX0KIAkJCX0KIAkJfSBlbHNlIHsK
QEAgLTQ4MzUsNCArNDgzNiw3IEBACiAJCQkJCQltb2RpZmllciA9IGNyZWF0ZU1vZGlmaWVyKE1v
ZGlmaWVyLk1vZGlmaWVyS2V5d29yZC5TVFJJQ1RGUF9LRVlXT1JEKTsKIAkJCQkJCWJyZWFrOwor
CQkJCQljYXNlIFRlcm1pbmFsVG9rZW5zLlRva2VuTmFtZWRlZmF1bHQ6CisJCQkJCQltb2RpZmll
ciA9IGNyZWF0ZU1vZGlmaWVyKE1vZGlmaWVyLk1vZGlmaWVyS2V5d29yZC5ERUZBVUxUX0tFWVdP
UkQpOworCQkJCQkJYnJlYWs7CiAJCQkJCWNhc2UgVGVybWluYWxUb2tlbnMuVG9rZW5OYW1lQVQg
OgogCQkJCQkJLy8gd2UgaGF2ZSBhbiBhbm5vdGF0aW9uCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL01vZGlmaWVyLmphdmEgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL01vZGlmaWVy
LmphdmEKaW5kZXggNjNmYmViMC4uY2Q0ODYzNCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9Nb2RpZmllci5qYXZhCisrKyBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vTW9kaWZpZXIu
amF2YQpAQCAtMzIsOCArMzIsMTAgQEAKICAqICAgIDxiPnZvbGF0aWxlPC9iPgogICogICAgPGI+
c3RyaWN0ZnA8L2I+CisgKiAgICA8Yj5kZWZhdWx0PC9iPgogICogPC9wcmU+CiAgKiA8cD4KLSAq
IFRoZSBudW1lcmljIHZhbHVlcyBvZiB0aGVzZSBmbGFncyBtYXRjaCB0aGUgb25lcyBmb3IgY2xh
c3MKLSAqIGZpbGVzIGFzIGRlc2NyaWJlZCBpbiB0aGUgSmF2YSBWaXJ0dWFsIE1hY2hpbmUgU3Bl
Y2lmaWNhdGlvbi4KKyAqIFRoZSBudW1lcmljIHZhbHVlcyBvZiB0aGVzZSBmbGFncywgYmFycmlu
ZyA8Y29kZT5kZWZhdWx0PC9jb2RlPiwgbWF0Y2ggdGhlIG9uZXMgZm9yIGNsYXNzCisgKiBmaWxl
cyBhcyBkZXNjcmliZWQgaW4gdGhlIEphdmEgVmlydHVhbCBNYWNoaW5lIFNwZWNpZmljYXRpb24u
IFRoZSB2YWx1ZSBvZiA8Y29kZT5kZWZhdWx0PC9jb2RlPgorICogaXMgaW50ZXJuYWwgYW5kIGlz
IG5vdCBzcGVjaWZpZWQgaW4gdGhlIEphdmEgVmlydHVhbCBNYWNoaW5lIFNwZWNpZmljYXRpb24u
CiAgKiBOb3RlIHRoYXQgSmF2YSBtb2RlbCBjbGFzcyB7QGxpbmsgb3JnLmVjbGlwc2UuamR0LmNv
cmUuRmxhZ3N9IGFsc28KICAqIHByb3ZpZGVzIHRoZSBzYW1lIGNvbnN0YW50cyBhcyB0aGlzIGNs
YXNzLgpAQCAtODksNCArOTEsMTIgQEAKIAkJLyoqICJ2b2xhdGlsZSIgbW9kaWZpZXIgd2l0aCBm
bGFnIHZhbHVlIHtAbGluayBNb2RpZmllciNWT0xBVElMRX0uICovCiAJCXB1YmxpYyBzdGF0aWMg
ZmluYWwgTW9kaWZpZXJLZXl3b3JkIFZPTEFUSUxFX0tFWVdPUkQgPSBuZXcgTW9kaWZpZXJLZXl3
b3JkKCJ2b2xhdGlsZSIsIFZPTEFUSUxFKTsvLyROT04tTkxTLTEkCisKKwkJLyoqCisJCSAqICJk
ZWZhdWx0IiBtb2RpZmllciB3aXRoIGZsYWcgdmFsdWUge0BsaW5rIE1vZGlmaWVyI0RFRkFVTFR9
LiBOb3RlIHRoYXQgdGhlIHZhbHVlIG9mIHRoZSBtb2RpZmllciBpcworCQkgKiBpbnRlcm5hbCBh
bmQgaXMgbm90IHNwZWNpZmllZCBpbiB0aGUgSmF2YSBWaXJ0dWFsIE1hY2hpbmUgU3BlY2lmaWNh
dGlvbi4KKwkJICogQHNpbmNlIDMuOQorCQkgKi8KKwkJcHVibGljIHN0YXRpYyBmaW5hbCBNb2Rp
ZmllcktleXdvcmQgREVGQVVMVF9LRVlXT1JEID0gbmV3IE1vZGlmaWVyS2V5d29yZCgiZGVmYXVs
dCIsIERFRkFVTFQpOy8vJE5PTi1OTFMtMSQKKwogCQlzdGF0aWMgewogCQkJS0VZV09SRFMgPSBu
ZXcgSGFzaE1hcCgyMCk7CkBAIC0xMDIsNSArMTEyLDYgQEAKIAkJCQkJVFJBTlNJRU5UX0tFWVdP
UkQsCiAJCQkJCVZPTEFUSUxFX0tFWVdPUkQsCi0JCQkJCVNUUklDVEZQX0tFWVdPUkQKKwkJCQkJ
U1RSSUNURlBfS0VZV09SRCwKKwkJCQkJREVGQVVMVF9LRVlXT1JECiAJCQkJfTsKIAkJCWZvciAo
aW50IGkgPSAwOyBpIDwgb3BzLmxlbmd0aDsgaSsrKSB7CkBAIC0yOTMsNCArMzA0LDE0IEBACiAJ
cHVibGljIHN0YXRpYyBmaW5hbCBpbnQgVk9MQVRJTEUgPSAweDAwNDA7CiAKKwkvKioKKwkgKiAi
ZGVmYXVsdCIgbW9kaWZpZXIgY29uc3RhbnQgKGJpdCBtYXNrKS4KKwkgKiBBcHBsaWNhYmxlIG9u
bHkgdG8gbWV0aG9kcy4KKwkgKgorCSAqIE5vdGUgdGhhdCB0aGUgdmFsdWUgb2YgdGhlIGZsYWcg
aXMgaW50ZXJuYWwgYW5kIGlzIG5vdAorCSAqIHNwZWNpZmllZCBpbiB0aGUgSmF2YSBWaXJ0dWFs
IE1hY2hpbmUgU3BlY2lmaWNhdGlvbi4KKwkgKiBAc2luY2UgMy45CisJICovCisJcHVibGljIHN0
YXRpYyBmaW5hbCBpbnQgREVGQVVMVCA9IDB4ODAwMDAwMDA7CisKIAlzdGF0aWMgewogCQlMaXN0
IHByb3BlcnlMaXN0ID0gbmV3IEFycmF5TGlzdCgyKTsKQEAgLTQ0MSw0ICs0NjIsMTcgQEAKIAlw
dWJsaWMgc3RhdGljIGJvb2xlYW4gaXNWb2xhdGlsZShpbnQgZmxhZ3MpIHsKIAkJcmV0dXJuIChm
bGFncyAmIFZPTEFUSUxFKSAhPSAwOworCX0KKworCS8qKgorCSAqIFJldHVybnMgd2hldGhlciB0
aGUgZ2l2ZW4gZmxhZ3MgaW5jbHVkZXMgdGhlICJkZWZhdWx0IiBtb2RpZmllci4KKwkgKiBBcHBs
aWNhYmxlIG9ubHkgdG8gbWV0aG9kcy4KKwkgKgorCSAqIEBwYXJhbSBmbGFncyB0aGUgbW9kaWZp
ZXIgZmxhZ3MKKwkgKiBAcmV0dXJuIDxjb2RlPnRydWU8L2NvZGU+IGlmIHRoZSA8Y29kZT5ERUZB
VUxUPC9jb2RlPiBiaXQgaXMgc2V0CisJICogYW5kIDxjb2RlPmZhbHNlPC9jb2RlPiBvdGhlcndp
c2UKKwkgKiBAc2luY2UgMy45CisJICovCisJcHVibGljIHN0YXRpYyBib29sZWFuIGlzRGVmYXVs
dChpbnQgZmxhZ3MpIHsKKwkJcmV0dXJuIChmbGFncyAmIERFRkFVTFQpICE9IDA7CiAJfQogCkBA
IC02NjQsNCArNjk4LDEzIEBACiAJfQogCisJLyoqCisJICogQW5zd2VyIHRydWUgaWYgdGhlIHJl
Y2VpdmVyIGlzIHRoZSBkZWZhdWx0IG1vZGlmaWVyLCBmYWxzZSBvdGhlcndpc2UuCisJICogQHJl
dHVybiB0cnVlIGlmIHRoZSByZWNlaXZlciBpcyB0aGUgZGVmYXVsdCBtb2RpZmllciwgZmFsc2Ug
b3RoZXJ3aXNlCisJICogQHNpbmNlIDMuOQorCSAqLworCXB1YmxpYyBib29sZWFuIGlzRGVmYXVs
dCgpIHsKKwkJcmV0dXJuIHRoaXMubW9kaWZpZXJLZXl3b3JkID09IE1vZGlmaWVyS2V5d29yZC5E
RUZBVUxUX0tFWVdPUkQ7CisJfQorCiAJLyogKG9taXQgamF2YWRvYyBmb3IgdGhpcyBtZXRob2Qp
CiAJICogTWV0aG9kIGRlY2xhcmVkIG9uIEFTVE5vZGUuCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvY29yZS9GbGFncy5qYXZhIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2NvcmUvRmxhZ3MuamF2YQppbmRl
eCAxNmE3ZTg2Li43NjMzMTY3IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2Rl
bC9vcmcvZWNsaXBzZS9qZHQvY29yZS9GbGFncy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9jb3JlL0ZsYWdzLmphdmEKQEAgLTE0LDQgKzE0LDUg
QEAKIAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5jbGFzc2ZtdC5D
bGFzc0ZpbGVDb25zdGFudHM7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBp
bGVyLmxvb2t1cC5FeHRyYUNvbXBpbGVyTW9kaWZpZXJzOwogCiAvKioKQEAgLTE0NCw0ICsxNDUs
MTIgQEAKIAogCS8qKgorCSAqIERlZmF1bHQgcHJvcGVydHkgZmxhZyAoYWRkZWQgaW4gSjJTRSAx
LjgpLgorCSAqIE5vdGUgdGhhdCB0aGUgZmxhZydzIHZhbHVlIGlzIGludGVybmFsIGFuZCBpcyBu
b3QgZGVmaW5lZCBpbiB0aGUKKwkgKiBWaXJ0dWFsIE1hY2hpbmUgc3BlY2lmaWNhdGlvbi4KKwkg
KiBAc2luY2UgMy45CisJICovCisJcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgQWNjRGVmYXVsdEZs
YWcgPSBFeHRyYUNvbXBpbGVyTW9kaWZpZXJzLkFjY0RlZmF1bHRNZXRob2Q7CisKKwkvKioKIAkg
KiBOb3QgaW5zdGFudGlhYmxlLgogCSAqLw==
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>228981</attachid>
            <date>2013-03-25 04:57:00 -0400</date>
            <delta_ts>2013-03-25 04:57:43 -0400</delta_ts>
            <desc>Updated patch</desc>
            <filename>Fix-for-bug-399791.patch</filename>
            <type>text/plain</type>
            <size>14784</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9kb20vQVNUQ29udmVydGVyMTdUZXN0LmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
ZG9tL0FTVENvbnZlcnRlcjE3VGVzdC5qYXZhCmluZGV4IDA5ZmIyMjMuLjkyYTcwOGIgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9kb20vQVNUQ29udmVydGVyMTdUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Rv
bS9BU1RDb252ZXJ0ZXIxN1Rlc3QuamF2YQpAQCAtOTQyLDMgKzk0MiwyNSBAQAogCQlhc3NlcnRO
dWxsKGJpbmRpbmcpOwkKIAl9CisJLyoKKwkgKiBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVn
cy9zaG93X2J1Zy5jZ2k/aWQ9Mzk5NzkxCisJICovCisJcHVibGljIHZvaWQgdGVzdDAwMjEoKSB0
aHJvd3MgSmF2YU1vZGVsRXhjZXB0aW9uIHsKKwkJU3RyaW5nIGNvbnRlbnRzID0KKwkJCQkicHVi
bGljIGludGVyZmFjZSBYIHtcbiIgKworCQkJCSIJc3RhdGljIHZvaWQgZm9vKCl7fVxuIiArCisJ
CQkJIiAgIGRlZmF1bHQgdm9pZCBmb28oaW50IGkpe31cbiIgKworCQkJCSJ9XG4iOworCQkJdGhp
cy53b3JraW5nQ29weSA9IGdldFdvcmtpbmdDb3B5KCIvQ29udmVydGVyMTcvc3JjL1guamF2YSIs
IGZhbHNlKTsKKwkJCUFTVE5vZGUgbm9kZSA9IGJ1aWxkQVNUKGNvbnRlbnRzLCB0aGlzLndvcmtp
bmdDb3B5LCBmYWxzZSk7CisJCQlhc3NlcnRFcXVhbHMoIk5vdCBhIGNvbXBpbGF0aW9uIHVuaXQi
LCBBU1ROb2RlLkNPTVBJTEFUSU9OX1VOSVQsIG5vZGUuZ2V0Tm9kZVR5cGUoKSk7CisJCQlDb21w
aWxhdGlvblVuaXQgdW5pdCA9IChDb21waWxhdGlvblVuaXQpIG5vZGU7CisJCQlUeXBlRGVjbGFy
YXRpb24gdHlwZSA9ICAoVHlwZURlY2xhcmF0aW9uKSB1bml0LnR5cGVzKCkuZ2V0KDApOworCQkJ
bm9kZSA9IChBU1ROb2RlKSB0eXBlLmJvZHlEZWNsYXJhdGlvbnMoKS5nZXQoMCk7CisJCQlhc3Nl
cnRFcXVhbHMoIk5vdCBhIG1ldGhvZCBEZWNsYXJhdGlvbiIsIEFTVE5vZGUuTUVUSE9EX0RFQ0xB
UkFUSU9OLCBub2RlLmdldE5vZGVUeXBlKCkpOworCQkJTWV0aG9kRGVjbGFyYXRpb24gbWV0aG9k
ID0gKE1ldGhvZERlY2xhcmF0aW9uKSBub2RlOworCQkJYXNzZXJ0RXF1YWxzKCJNZXRob2Qgc2hv
dWxkIGJlIG1hbGZvcm1lZCIsIEFTVE5vZGUuTUFMRk9STUVELCAobWV0aG9kLmdldEZsYWdzKCkg
JiBBU1ROb2RlLk1BTEZPUk1FRCkpOworCisJCQltZXRob2QgPSAoTWV0aG9kRGVjbGFyYXRpb24p
IHR5cGUuYm9keURlY2xhcmF0aW9ucygpLmdldCgxKTsKKwkJCWFzc2VydEVxdWFscygiTWV0aG9k
IHNob3VsZCBiZSBtYWxmb3JtZWQiLCBBU1ROb2RlLk1BTEZPUk1FRCwgKG1ldGhvZC5nZXRGbGFn
cygpICYgQVNUTm9kZS5NQUxGT1JNRUQpKTsKKwl9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvZG9t
L0FTVENvbnZlcnRlcjE4VGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9k
ZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2RvbS9BU1RDb252ZXJ0ZXIxOFRlc3Qu
amF2YQppbmRleCAzZjMwYWQ3Li5mYjUwZDczIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvZG9tL0FTVENv
bnZlcnRlcjE4VGVzdC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVs
L3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9kb20vQVNUQ29udmVydGVyMThUZXN0Lmph
dmEKQEAgLTE4OTcsNCArMTg5Nyw0MiBAQAogCQlhc3NlcnRFcXVhbHMoIlJlZHVjZUludCIsIGJp
bmRpbmcuZ2V0TmFtZSgpKTsKIAl9CisJLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mv
c2hvd19idWcuY2dpP2lkPTM5OTc5MQorCXB1YmxpYyB2b2lkIHRlc3RCdWczOTk3OTEoKSB0aHJv
d3MgSmF2YU1vZGVsRXhjZXB0aW9uIHsKKwkJU3RyaW5nIGNvbnRlbnRzID0KKwkJCSJwdWJsaWMg
aW50ZXJmYWNlIFgge1xuIiArCisJCQkiCXN0YXRpYyB2b2lkIGZvbygpe31cbiIgKworCQkJIiAg
IHB1YmxpYyBkZWZhdWx0IHZvaWQgZm9vKGludCBpKXt9XG4iICsKKwkJCSIgICBuYXRpdmUgdm9p
ZCBmb28oZmxvYXQgZil7fVxuIiArCisJCQkiICAgYWJzdHJhY3Qgdm9pZCBmb28obG9uZyBsKXt9
XG4iICsKKwkJCSJ9XG4iOworCQl0aGlzLndvcmtpbmdDb3B5ID0gZ2V0V29ya2luZ0NvcHkoIi9D
b252ZXJ0ZXIxOC9zcmMvWC5qYXZhIiwgZmFsc2UpOworCQlBU1ROb2RlIG5vZGUgPSBidWlsZEFT
VChjb250ZW50cywgdGhpcy53b3JraW5nQ29weSwgZmFsc2UpOworCQlhc3NlcnRFcXVhbHMoIk5v
dCBhIGNvbXBpbGF0aW9uIHVuaXQiLCBBU1ROb2RlLkNPTVBJTEFUSU9OX1VOSVQsIG5vZGUuZ2V0
Tm9kZVR5cGUoKSk7CisJCUNvbXBpbGF0aW9uVW5pdCB1bml0ID0gKENvbXBpbGF0aW9uVW5pdCkg
bm9kZTsKKwkJVHlwZURlY2xhcmF0aW9uIHR5cGUgPSAgKFR5cGVEZWNsYXJhdGlvbikgdW5pdC50
eXBlcygpLmdldCgwKTsKKwkJbm9kZSA9IChBU1ROb2RlKSB0eXBlLmJvZHlEZWNsYXJhdGlvbnMo
KS5nZXQoMCk7CisJCWFzc2VydEVxdWFscygiTm90IGEgbWV0aG9kIERlY2xhcmF0aW9uIiwgQVNU
Tm9kZS5NRVRIT0RfREVDTEFSQVRJT04sIG5vZGUuZ2V0Tm9kZVR5cGUoKSk7CisJCU1ldGhvZERl
Y2xhcmF0aW9uIG1ldGhvZCA9IChNZXRob2REZWNsYXJhdGlvbikgbm9kZTsKKwkJYXNzZXJ0RXF1
YWxzKCJNZXRob2Qgc2hvdWxkIG5vdCBiZSBtYWxmb3JtZWQiLCAwLCAobWV0aG9kLmdldEZsYWdz
KCkgJiBBU1ROb2RlLk1BTEZPUk1FRCkpOworCQlMaXN0IG1vZGlmaWVycyA9IG1ldGhvZC5tb2Rp
ZmllcnMoKTsKKwkJYXNzZXJ0RXF1YWxzKCJJbmNvcnJlY3Qgbm8gb2YgbW9kZmllcnMiLCAxLCBt
b2RpZmllcnMuc2l6ZSgpKTsKKwkJTW9kaWZpZXIgbW9kaWZpZXIgPSAoTW9kaWZpZXIpIG1vZGlm
aWVycy5nZXQoMCk7CisJCWFzc2VydFNhbWUoIkluY29ycmVjdCBtb2RpZmllciBrZXl3b3JkIiwg
TW9kaWZpZXIuTW9kaWZpZXJLZXl3b3JkLlNUQVRJQ19LRVlXT1JELCBtb2RpZmllci5nZXRLZXl3
b3JkKCkpOwogCisJCW1ldGhvZCA9IChNZXRob2REZWNsYXJhdGlvbikgdHlwZS5ib2R5RGVjbGFy
YXRpb25zKCkuZ2V0KDEpOworCQlhc3NlcnRFcXVhbHMoIk1ldGhvZCBzaG91bGQgbm90IGJlIG1h
bGZvcm1lZCIsIDAsIChtZXRob2QuZ2V0RmxhZ3MoKSAmIEFTVE5vZGUuTUFMRk9STUVEKSk7CisK
KwkJbW9kaWZpZXJzID0gbWV0aG9kLm1vZGlmaWVycygpOworCQlhc3NlcnRFcXVhbHMoIkluY29y
cmVjdCBubyBvZiBtb2RmaWVycyIsIDIsIG1vZGlmaWVycy5zaXplKCkpOworCQltb2RpZmllciA9
IChNb2RpZmllcikgbW9kaWZpZXJzLmdldCgxKTsKKwkJYXNzZXJ0U2FtZSgiSW5jb3JyZWN0IG1v
ZGlmaWVyIGtleXdvcmQiLCBNb2RpZmllci5Nb2RpZmllcktleXdvcmQuREVGQVVMVF9LRVlXT1JE
LCBtb2RpZmllci5nZXRLZXl3b3JkKCkpOworCQlhc3NlcnRUcnVlKCJJbmNvcnJlY3QgbW9kaWZp
ZXIiLCBtb2RpZmllci5pc0RlZmF1bHRNZXRob2QoKSk7CisJCWFzc2VydEVxdWFscygiSW5jb3Jy
ZWN0IEFTVCIsICJwdWJsaWMgZGVmYXVsdCB2b2lkIGZvbyhpbnQgaSl7XG59XG4iLCBtZXRob2Qu
dG9TdHJpbmcoKSk7CisKKwkJbWV0aG9kID0gKE1ldGhvZERlY2xhcmF0aW9uKSB0eXBlLmJvZHlE
ZWNsYXJhdGlvbnMoKS5nZXQoMik7CisJCWFzc2VydEVxdWFscygiTWV0aG9kIHNob3VsZCBiZSBt
YWxmb3JtZWQiLCBBU1ROb2RlLk1BTEZPUk1FRCwgKG1ldGhvZC5nZXRGbGFncygpICYgQVNUTm9k
ZS5NQUxGT1JNRUQpKTsKKworCQltZXRob2QgPSAoTWV0aG9kRGVjbGFyYXRpb24pIHR5cGUuYm9k
eURlY2xhcmF0aW9ucygpLmdldCgzKTsKKwkJYXNzZXJ0RXF1YWxzKCJNZXRob2Qgc2hvdWxkIGJl
IG1hbGZvcm1lZCIsIEFTVE5vZGUuTUFMRk9STUVELCAobWV0aG9kLmdldEZsYWdzKCkgJiBBU1RO
b2RlLk1BTEZPUk1FRCkpOworCX0KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
LnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9kb20vQVNUVGVzdC5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pk
dC9jb3JlL3Rlc3RzL2RvbS9BU1RUZXN0LmphdmEKaW5kZXggNDJiMjFjYy4uODY4NGU4ZiAxMDA2
NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNl
L2pkdC9jb3JlL3Rlc3RzL2RvbS9BU1RUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2RvbS9BU1RUZXN0
LmphdmEKQEAgLTU2MDIsNSArNTYwMiw2IEBACiAJCQkJdGhpcy5hc3QubmV3TW9kaWZpZXIoTW9k
aWZpZXIuTW9kaWZpZXJLZXl3b3JkLlRSQU5TSUVOVF9LRVlXT1JEKSwKIAkJCQl0aGlzLmFzdC5u
ZXdNb2RpZmllcihNb2RpZmllci5Nb2RpZmllcktleXdvcmQuVk9MQVRJTEVfS0VZV09SRCksCi0J
CQkJdGhpcy5hc3QubmV3TW9kaWZpZXIoTW9kaWZpZXIuTW9kaWZpZXJLZXl3b3JkLlNUUklDVEZQ
X0tFWVdPUkQpCisJCQkJdGhpcy5hc3QubmV3TW9kaWZpZXIoTW9kaWZpZXIuTW9kaWZpZXJLZXl3
b3JkLlNUUklDVEZQX0tFWVdPUkQpLAorCQkJCXRoaXMuYXN0Lm5ld01vZGlmaWVyKE1vZGlmaWVy
Lk1vZGlmaWVyS2V5d29yZC5ERUZBVUxUX0tFWVdPUkQpCiAJCX07CiAJCXJldHVybiBhbGxNb2Rz
OwpAQCAtODUxOCw0ICs4NTE5LDUgQEAKIAkJYXNzZXJ0VHJ1ZShNb2RpZmllci5Nb2RpZmllcktl
eXdvcmQuVk9MQVRJTEVfS0VZV09SRC50b1N0cmluZygpLmVxdWFscygidm9sYXRpbGUiKSk7IC8v
JE5PTi1OTFMtMSQKIAkJYXNzZXJ0VHJ1ZShNb2RpZmllci5Nb2RpZmllcktleXdvcmQuU1RSSUNU
RlBfS0VZV09SRC50b1N0cmluZygpLmVxdWFscygic3RyaWN0ZnAiKSk7IC8vJE5PTi1OTFMtMSQK
KwkJYXNzZXJ0VHJ1ZShNb2RpZmllci5Nb2RpZmllcktleXdvcmQuREVGQVVMVF9LRVlXT1JELnRv
U3RyaW5nKCkuZXF1YWxzKCJkZWZhdWx0IikpOyAvLyROT04tTkxTLTEkCiAKIAkJZmluYWwgTW9k
aWZpZXIuTW9kaWZpZXJLZXl3b3JkW10ga25vd24gPSB7CkBAIC04NTMxLDQgKzg1MzMsNSBAQAog
CQkJTW9kaWZpZXIuTW9kaWZpZXJLZXl3b3JkLlZPTEFUSUxFX0tFWVdPUkQsCiAJCQlNb2RpZmll
ci5Nb2RpZmllcktleXdvcmQuU1RSSUNURlBfS0VZV09SRCwKKwkJCU1vZGlmaWVyLk1vZGlmaWVy
S2V5d29yZC5ERUZBVUxUX0tFWVdPUkQKIAkJfTsKIApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1QuamF2YSBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vQVNULmphdmEKaW5kZXgg
OGYzZTMyYy4uZjQ2MGI3OCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1QuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FTVC5qYXZhCkBAIC0xNzUyLDUgKzE3NTIs
NSBAQAogCSAqIHJlcXVlc3RlZCB0aGUgbW9kaWZpZXJzIG5vZGVzIHdpbGwgYXBwZWFyIGluIHRo
ZSBmb2xsb3dpbmcgb3JkZXI6CiAJICogcHVibGljLCBwcm90ZWN0ZWQsIHByaXZhdGUsIGFic3Ry
YWN0LCBzdGF0aWMsIGZpbmFsLCBzeW5jaHJvbml6ZWQsCi0JICogbmF0aXZlLCBzdHJpY3RmcCwg
dHJhbnNpZW50LCB2b2xhdGlsZS4gVGhpcyBvcmRlciBpcyBjb25zaXN0ZW50CisJICogbmF0aXZl
LCBzdHJpY3RmcCwgdHJhbnNpZW50LCB2b2xhdGlsZSwgZGVmYXVsdC4gVGhpcyBvcmRlciBpcyBj
b25zaXN0ZW50CiAJICogd2l0aCB0aGUgcmVjb21tZW5kYXRpb25zIGluIEpMUzIgOC4xLjEsIDgu
My4xLCBhbmQgOC40LjMuCiAJICoKQEAgLTE4MDAsNCArMTgwMCw3IEBACiAJCQlyZXN1bHQuYWRk
KG5ld01vZGlmaWVyKE1vZGlmaWVyLk1vZGlmaWVyS2V5d29yZC5WT0xBVElMRV9LRVlXT1JEKSk7
CiAJCX0KKwkJaWYgKE1vZGlmaWVyLmlzRGVmYXVsdE1ldGhvZChmbGFncykpIHsKKwkJCXJlc3Vs
dC5hZGQobmV3TW9kaWZpZXIoTW9kaWZpZXIuTW9kaWZpZXJLZXl3b3JkLkRFRkFVTFRfS0VZV09S
RCkpOworCQl9CiAJCXJldHVybiByZXN1bHQ7CiAJfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1RDb252ZXJ0ZXIuamF2YSBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vQVNUQ29u
dmVydGVyLmphdmEKaW5kZXggY2Q5NGQ3Zi4uNTViZGRmNCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1RDb252ZXJ0ZXIuamF2
YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9t
L0FTVENvbnZlcnRlci5qYXZhCkBAIC02MDMsOSArNjAzLDEwIEBACiAJCQkJfQogCQkJfQotCQkJ
aWYgKGJsb2NrICE9IG51bGwKLQkJCQkJJiYgKE1vZGlmaWVyLmlzQWJzdHJhY3QobWV0aG9kRGVj
bC5nZXRNb2RpZmllcnMoKSkKLQkJCQkJCQl8fCBNb2RpZmllci5pc05hdGl2ZShtZXRob2REZWNs
LmdldE1vZGlmaWVycygpKQotCQkJCQkJCXx8IGlzSW50ZXJmYWNlKSkgewotCQkJCW1ldGhvZERl
Y2wuc2V0RmxhZ3MobWV0aG9kRGVjbC5nZXRGbGFncygpIHwgQVNUTm9kZS5NQUxGT1JNRUQpOwor
CQkJaWYgKGJsb2NrICE9IG51bGwpIHsKKwkJCQlpZiAoKG1ldGhvZERlY2xhcmF0aW9uLm1vZGlm
aWVycyAmIChDbGFzc0ZpbGVDb25zdGFudHMuQWNjQWJzdHJhY3QgfCBDbGFzc0ZpbGVDb25zdGFu
dHMuQWNjTmF0aXZlKSkgIT0gMAorCQkJCQkJfHwgKGlzSW50ZXJmYWNlICYmICh0aGlzLmFzdC5h
cGlMZXZlbCA8IEFTVC5KTFM4IHx8CisJCQkJCQkJKG1ldGhvZERlY2xhcmF0aW9uLm1vZGlmaWVy
cyAmIChDbGFzc0ZpbGVDb25zdGFudHMuQWNjU3RhdGljIHwgRXh0cmFDb21waWxlck1vZGlmaWVy
cy5BY2NEZWZhdWx0TWV0aG9kKSkgPT0gMCkpKSB7CisJCQkJCW1ldGhvZERlY2wuc2V0RmxhZ3Mo
bWV0aG9kRGVjbC5nZXRGbGFncygpIHwgQVNUTm9kZS5NQUxGT1JNRUQpOworCQkJCX0KIAkJCX0K
IAkJfSBlbHNlIHsKQEAgLTQ4MzUsNCArNDgzNiw3IEBACiAJCQkJCQltb2RpZmllciA9IGNyZWF0
ZU1vZGlmaWVyKE1vZGlmaWVyLk1vZGlmaWVyS2V5d29yZC5TVFJJQ1RGUF9LRVlXT1JEKTsKIAkJ
CQkJCWJyZWFrOworCQkJCQljYXNlIFRlcm1pbmFsVG9rZW5zLlRva2VuTmFtZWRlZmF1bHQ6CisJ
CQkJCQltb2RpZmllciA9IGNyZWF0ZU1vZGlmaWVyKE1vZGlmaWVyLk1vZGlmaWVyS2V5d29yZC5E
RUZBVUxUX0tFWVdPUkQpOworCQkJCQkJYnJlYWs7CiAJCQkJCWNhc2UgVGVybWluYWxUb2tlbnMu
VG9rZW5OYW1lQVQgOgogCQkJCQkJLy8gd2UgaGF2ZSBhbiBhbm5vdGF0aW9uCmRpZmYgLS1naXQg
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL01vZGlm
aWVyLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUv
ZG9tL01vZGlmaWVyLmphdmEKaW5kZXggNjNmYmViMC4uNGRkY2FiMiAxMDA2NDQKLS0tIGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9Nb2RpZmllci5q
YXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9k
b20vTW9kaWZpZXIuamF2YQpAQCAtMSw4ICsxLDEyIEBACiAvKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KgotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEwIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJz
LgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJz
LgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55
aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0
aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlz
IGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdAogICogaHR0cDovL3d3dy5lY2xpcHNl
Lm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKKyAqCisgKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9u
IG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVyIHRoZSBKYXZh
CisgKiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFibGUgZm9yIHRl
c3RpbmcgYW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBjb2RlIGlzIG5vdCBj
b21wYXRpYmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KICAqCiAgKiBDb250
cmlidXRvcnM6CkBAIC0zMiwxMCArMzYsMTIgQEAKICAqICAgIDxiPnZvbGF0aWxlPC9iPgogICog
ICAgPGI+c3RyaWN0ZnA8L2I+CisgKiAgICA8Yj5kZWZhdWx0PC9iPgogICogPC9wcmU+CiAgKiA8
cD4KICAqIFRoZSBudW1lcmljIHZhbHVlcyBvZiB0aGVzZSBmbGFncyBtYXRjaCB0aGUgb25lcyBm
b3IgY2xhc3MKLSAqIGZpbGVzIGFzIGRlc2NyaWJlZCBpbiB0aGUgSmF2YSBWaXJ0dWFsIE1hY2hp
bmUgU3BlY2lmaWNhdGlvbi4KLSAqIE5vdGUgdGhhdCBKYXZhIG1vZGVsIGNsYXNzIHtAbGluayBv
cmcuZWNsaXBzZS5qZHQuY29yZS5GbGFnc30gYWxzbwotICogcHJvdmlkZXMgdGhlIHNhbWUgY29u
c3RhbnRzIGFzIHRoaXMgY2xhc3MuCisgKiBmaWxlcyBhcyBkZXNjcmliZWQgaW4gdGhlIEphdmEg
VmlydHVhbCBNYWNoaW5lIFNwZWNpZmljYXRpb24KKyAqIChleGNlcHQgZm9yIHtAbGluayAjREVG
QVVMVH0pLiBOb3RlIHRoYXQgSmF2YSBtb2RlbCBjbGFzcworICoge0BsaW5rIG9yZy5lY2xpcHNl
LmpkdC5jb3JlLkZsYWdzfSBhbHNvIHByb3ZpZGVzIHRoZSBzYW1lCisgKiBjb25zdGFudHMgYXMg
dGhpcyBjbGFzcy4KICAqIDwvcD4KICAqCkBAIC04OSw0ICs5NSwxMiBAQAogCQkvKiogInZvbGF0
aWxlIiBtb2RpZmllciB3aXRoIGZsYWcgdmFsdWUge0BsaW5rIE1vZGlmaWVyI1ZPTEFUSUxFfS4g
Ki8KIAkJcHVibGljIHN0YXRpYyBmaW5hbCBNb2RpZmllcktleXdvcmQgVk9MQVRJTEVfS0VZV09S
RCA9IG5ldyBNb2RpZmllcktleXdvcmQoInZvbGF0aWxlIiwgVk9MQVRJTEUpOy8vJE5PTi1OTFMt
MSQKKworCQkvKioKKwkJICogImRlZmF1bHQiIG1vZGlmaWVyIHdpdGggZmxhZyB2YWx1ZSB7QGxp
bmsgTW9kaWZpZXIjREVGQVVMVH0uIE5vdGUgdGhhdCB0aGUgdmFsdWUgb2YgdGhlIG1vZGlmaWVy
IGlzCisJCSAqIGludGVybmFsIGFuZCBpcyBub3Qgc3BlY2lmaWVkIGluIHRoZSBKYXZhIFZpcnR1
YWwgTWFjaGluZSBTcGVjaWZpY2F0aW9uLgorCQkgKiBAc2luY2UgMy45CisJCSAqLworCQlwdWJs
aWMgc3RhdGljIGZpbmFsIE1vZGlmaWVyS2V5d29yZCBERUZBVUxUX0tFWVdPUkQgPSBuZXcgTW9k
aWZpZXJLZXl3b3JkKCJkZWZhdWx0IiwgREVGQVVMVCk7Ly8kTk9OLU5MUy0xJAorCiAJCXN0YXRp
YyB7CiAJCQlLRVlXT1JEUyA9IG5ldyBIYXNoTWFwKDIwKTsKQEAgLTEwMiw1ICsxMTYsNiBAQAog
CQkJCQlUUkFOU0lFTlRfS0VZV09SRCwKIAkJCQkJVk9MQVRJTEVfS0VZV09SRCwKLQkJCQkJU1RS
SUNURlBfS0VZV09SRAorCQkJCQlTVFJJQ1RGUF9LRVlXT1JELAorCQkJCQlERUZBVUxUX0tFWVdP
UkQKIAkJCQl9OwogCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBvcHMubGVuZ3RoOyBpKyspIHsKQEAg
LTI5Myw0ICszMDgsMTQgQEAKIAlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBWT0xBVElMRSA9IDB4
MDA0MDsKIAorCS8qKgorCSAqICJkZWZhdWx0IiBtb2RpZmllciBjb25zdGFudCAoYml0IG1hc2sp
LgorCSAqIEFwcGxpY2FibGUgb25seSB0byBtZXRob2RzLgorCSAqCisJICogTm90ZSB0aGF0IHRo
ZSB2YWx1ZSBvZiB0aGUgZmxhZyBpcyBpbnRlcm5hbCBhbmQgaXMgbm90CisJICogc3BlY2lmaWVk
IGluIHRoZSBKYXZhIFZpcnR1YWwgTWFjaGluZSBTcGVjaWZpY2F0aW9uLgorCSAqIEBzaW5jZSAz
LjkKKwkgKi8KKwlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBERUZBVUxUID0gMHgxMDAwMDsKKwog
CXN0YXRpYyB7CiAJCUxpc3QgcHJvcGVyeUxpc3QgPSBuZXcgQXJyYXlMaXN0KDIpOwpAQCAtNDQx
LDQgKzQ2NiwxNyBAQAogCXB1YmxpYyBzdGF0aWMgYm9vbGVhbiBpc1ZvbGF0aWxlKGludCBmbGFn
cykgewogCQlyZXR1cm4gKGZsYWdzICYgVk9MQVRJTEUpICE9IDA7CisJfQorCisJLyoqCisJICog
UmV0dXJucyB3aGV0aGVyIHRoZSBnaXZlbiBmbGFncyBpbmNsdWRlcyB0aGUgImRlZmF1bHQiIG1v
ZGlmaWVyLgorCSAqIEFwcGxpY2FibGUgb25seSB0byBtZXRob2RzLgorCSAqCisJICogQHBhcmFt
IGZsYWdzIHRoZSBtb2RpZmllciBmbGFncworCSAqIEByZXR1cm4gPGNvZGU+dHJ1ZTwvY29kZT4g
aWYgdGhlIDxjb2RlPkRFRkFVTFQ8L2NvZGU+IGJpdCBpcyBzZXQKKwkgKiBhbmQgPGNvZGU+ZmFs
c2U8L2NvZGU+IG90aGVyd2lzZQorCSAqIEBzaW5jZSAzLjkKKwkgKi8KKwlwdWJsaWMgc3RhdGlj
IGJvb2xlYW4gaXNEZWZhdWx0TWV0aG9kKGludCBmbGFncykgeworCQlyZXR1cm4gKGZsYWdzICYg
REVGQVVMVCkgIT0gMDsKIAl9CiAKQEAgLTY2NCw0ICs3MDIsMTMgQEAKIAl9CiAKKwkvKioKKwkg
KiBBbnN3ZXIgdHJ1ZSBpZiB0aGUgcmVjZWl2ZXIgaXMgdGhlIGRlZmF1bHQgbW9kaWZpZXIsIGZh
bHNlIG90aGVyd2lzZS4KKwkgKiBAcmV0dXJuIHRydWUgaWYgdGhlIHJlY2VpdmVyIGlzIHRoZSBk
ZWZhdWx0IG1vZGlmaWVyLCBmYWxzZSBvdGhlcndpc2UKKwkgKiBAc2luY2UgMy45CisJICovCisJ
cHVibGljIGJvb2xlYW4gaXNEZWZhdWx0TWV0aG9kKCkgeworCQlyZXR1cm4gdGhpcy5tb2RpZmll
cktleXdvcmQgPT0gTW9kaWZpZXJLZXl3b3JkLkRFRkFVTFRfS0VZV09SRDsKKwl9CisKIAkvKiAo
b21pdCBqYXZhZG9jIGZvciB0aGlzIG1ldGhvZCkKIAkgKiBNZXRob2QgZGVjbGFyZWQgb24gQVNU
Tm9kZS4KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNl
L2pkdC9jb3JlL0ZsYWdzLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNs
aXBzZS9qZHQvY29yZS9GbGFncy5qYXZhCmluZGV4IDE2YTdlODYuLjA5OTJiZDcgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9jb3JlL0ZsYWdz
LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2Nv
cmUvRmxhZ3MuamF2YQpAQCAtMSw4ICsxLDEyIEBACiAvKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgot
ICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDA4IElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgor
ICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgog
ICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5n
IG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUg
RWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRp
c3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdAogICogaHR0cDovL3d3dy5lY2xpcHNlLm9y
Zy9sZWdhbC9lcGwtdjEwLmh0bWwKKyAqCisgKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9m
IGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVyIHRoZSBKYXZhCisg
KiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFibGUgZm9yIHRlc3Rp
bmcgYW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBjb2RlIGlzIG5vdCBjb21w
YXRpYmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KICAqCiAgKiBDb250cmli
dXRvcnM6CkBAIC0xNCw0ICsxOCw1IEBACiAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJu
YWwuY29tcGlsZXIuY2xhc3NmbXQuQ2xhc3NGaWxlQ29uc3RhbnRzOworaW1wb3J0IG9yZy5lY2xp
cHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuRXh0cmFDb21waWxlck1vZGlmaWVyczsK
IAogLyoqCkBAIC0yMiw3ICsyNyw4IEBACiAgKiA8cD4KICAqIE5vdGUgdGhhdCB0aGUgbnVtZXJp
YyB2YWx1ZXMgb2YgdGhlc2UgZmxhZ3MgbWF0Y2ggdGhlIG9uZXMgZm9yIGNsYXNzIGZpbGVzCi0g
KiBhcyBkZXNjcmliZWQgaW4gdGhlIEphdmEgVmlydHVhbCBNYWNoaW5lIFNwZWNpZmljYXRpb24u
IFRoZSBBU1QgY2xhc3MKLSAqIDxjb2RlPk1vZGlmaWVyPC9jb2RlPiBwcm92aWRlcyB0aGUgc2Ft
ZSBmdW5jdGlvbmFsaXR5IGFzIHRoaXMgY2xhc3MsIG9ubHkgaW4KLSAqIHRoZSA8Y29kZT5vcmcu
ZWNsaXBzZS5qZHQuY29yZS5kb208L2NvZGU+IHBhY2thZ2UuCisgKiBhcyBkZXNjcmliZWQgaW4g
dGhlIEphdmEgVmlydHVhbCBNYWNoaW5lIFNwZWNpZmljYXRpb24gKGV4Y2VwdCBmb3IKKyAqIHtA
bGluayAjQWNjRGVmYXVsdEZsYWd9KS4gVGhlIEFTVCBjbGFzcyA8Y29kZT5Nb2RpZmllcjwvY29k
ZT4gcHJvdmlkZXMKKyAqIHRoZSBzYW1lIGZ1bmN0aW9uYWxpdHkgYXMgdGhpcyBjbGFzcywgb25s
eSBpbiB0aGUKKyAqIDxjb2RlPm9yZy5lY2xpcHNlLmpkdC5jb3JlLmRvbTwvY29kZT4gcGFja2Fn
ZS4KICAqIDwvcD4KICAqCkBAIC0xNDIsNCArMTQ4LDEyIEBACiAJICovCiAJcHVibGljIHN0YXRp
YyBmaW5hbCBpbnQgQWNjQW5ub3RhdGlvbiA9IENsYXNzRmlsZUNvbnN0YW50cy5BY2NBbm5vdGF0
aW9uOworCisJLyoqCisJICogRGVmYXVsdCBwcm9wZXJ0eSBmbGFnIChhZGRlZCBpbiBKMlNFIDEu
OCkuCisJICogTm90ZSB0aGF0IHRoZSBmbGFnJ3MgdmFsdWUgaXMgaW50ZXJuYWwgYW5kIGlzIG5v
dCBkZWZpbmVkIGluIHRoZQorCSAqIFZpcnR1YWwgTWFjaGluZSBzcGVjaWZpY2F0aW9uLgorCSAq
IEBzaW5jZSAzLjkKKwkgKi8KKwlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBBY2NEZWZhdWx0Rmxh
ZyA9IEV4dHJhQ29tcGlsZXJNb2RpZmllcnMuQWNjRGVmYXVsdE1ldGhvZDsKIAogCS8qKgpAQCAt
MzUzLDQgKzM2NywxNyBAQAogCiAJLyoqCisJICogUmV0dXJucyB3aGV0aGVyIHRoZSBnaXZlbiBp
bnRlZ2VyIGhhcyB0aGUgPGNvZGU+QWNjRGVmYXVsdEZsYWc8L2NvZGU+CisJICogYml0IHNldC4g
Tm90ZSB0aGF0IHRoaXMgZmxhZyByZXByZXNlbnRzIHRoZSB1c2FnZSBvZiB0aGUgJ2RlZmF1bHQn
IGtleXdvcmQKKwkgKiBvbiBhIG1ldGhvZCBhbmQgc2hvdWxkIG5vdCBiZSBjb25mdXNlZCB3aXRo
IHRoZSBkZWZhdWx0IGFjY2VzcyB2aXNpYmlsaXR5LgorCSAqCisJICogQHJldHVybiA8Y29kZT50
cnVlPC9jb2RlPiBpZiB0aGUgPGNvZGU+QWNjRGVmYXVsdEZsYWc8L2NvZGU+IGZsYWcgaXMgaW5j
bHVkZWQKKwkgKiBAc2VlICNBY2NEZWZhdWx0RmxhZworCSAqIEBzaW5jZSAzLjkKKwkgKi8KKwlw
dWJsaWMgc3RhdGljIGJvb2xlYW4gaXNEZWZhdWx0TWV0aG9kKGludCBmbGFncykgeworCQlyZXR1
cm4gKGZsYWdzICYgQWNjRGVmYXVsdEZsYWcpICE9IDA7CisJfQorCisJLyoqCiAJICogUmV0dXJu
cyBhIHN0YW5kYXJkIHN0cmluZyBkZXNjcmliaW5nIHRoZSBnaXZlbiBtb2RpZmllciBmbGFncy4K
IAkgKiBPbmx5IG1vZGlmaWVyIGZsYWdzIGFyZSBpbmNsdWRlZCBpbiB0aGUgb3V0cHV0OyBkZXBy
ZWNhdGVkLApAQCAtMzYyLDQgKzM4OSw1IEBACiAJICogICA8Y29kZT5zdGF0aWM8L2NvZGU+CiAJ
ICogICA8Y29kZT5hYnN0cmFjdDwvY29kZT4gPGNvZGU+ZmluYWw8L2NvZGU+IDxjb2RlPm5hdGl2
ZTwvY29kZT4gPGNvZGU+c3luY2hyb25pemVkPC9jb2RlPiA8Y29kZT50cmFuc2llbnQ8L2NvZGU+
IDxjb2RlPnZvbGF0aWxlPC9jb2RlPiA8Y29kZT5zdHJpY3RmcDwvY29kZT4KKwkgKiAgIDxjb2Rl
PmRlZmF1bHQ8L2NvZGU+CiAJICogPC9wcmU+CiAJICogVGhpcyBpcyBhIGNvbXByb21pc2UgYmV0
d2VlbiB0aGUgb3JkZXJzIHNwZWNpZmllZCBpbiBzZWN0aW9ucyA4LjEuMSwKQEAgLTQxMyw1ICs0
NDEsNiBAQAogCQlpZiAoaXNTdHJpY3RmcChmbGFncykpCiAJCQlzYi5hcHBlbmQoInN0cmljdGZw
ICIpOyAvLyROT04tTkxTLTEkCi0KKwkJaWYgKGlzRGVmYXVsdE1ldGhvZChmbGFncykpCisJCQlz
Yi5hcHBlbmQoImRlZmF1bHQgIik7IC8vJE5PTi1OTFMtMSQKIAkJaW50IGxlbiA9IHNiLmxlbmd0
aCgpOwogCQlpZiAobGVuID09IDAp
</data>

          </attachment>
      

    </bug>

</bugzilla>