<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>426676</bug_id>
          
          <creation_ts>2014-01-26 16:58:00 -0500</creation_ts>
          <short_desc>[1.8][compiler] Wrong generic method type inferred from lambda expression</short_desc>
          <delta_ts>2014-01-28 17:06:13 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 8</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>424053</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Lukas Eder">lukas.eder</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>loskutov</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2354667</commentid>
    <comment_count>0</comment_count>
    <who name="Lukas Eder">lukas.eder</who>
    <bug_when>2014-01-26 16:58:32 -0500</bug_when>
    <thetext>I&apos;m using the BETA distribution from here, along with Eclipse Kepler 4.3.1:
http://wiki.eclipse.org/JDT/Eclipse_Java_8_Support_(BETA)

This program does not compile with Eclipse&apos;s Java 8 compiler:

    import java.util.Arrays;
    import java.util.function.Supplier;
    import java.util.stream.Stream;
    
    
    public class Test {
        public static void main(String[] args) throws Exception {
            // Type inference works on map call.
            Stream&lt;String&gt; s1 =
            Arrays.stream(new Integer[] { 1, 2 })
                  .map(i -&gt; i.toString());
            
            // Type inference doesn&apos;t work on map call.
            Stream&lt;String&gt; s2 =
            Arrays.stream(new Integer[] { 1, 2 })
                  .map(i -&gt; i.toString())
                  .distinct();
        }
    }

It seems that the compiler cannot infer the generic method type &lt;R&gt; on Stream.map(), and infers Object instead of String. As a workaround I can write this:

            Stream&lt;String&gt; s2 =
            Arrays.stream(new Integer[] { 1, 2 })
                  .&lt;String&gt;map(i -&gt; i.toString())
                  .distinct();

Another workaround is this:

            Stream&lt;String&gt; s2 =
            Arrays.stream(new Integer[] { 1, 2 })
                  .map((Function&lt;Integer, String&gt;)(i -&gt; i.toString()))
                  .distinct();

Which is similar to the problem described here (which works as expected in my environment, though): https://bugs.eclipse.org/bugs/show_bug.cgi?id=425460

The original program compiles with javac using build jdk-8-ea-bin-b121-windows-x64-20_dec_2013</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2355629</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-28 14:35:44 -0500</bug_when>
    <thetext>Thanks, this report was very helpful:

This was a bug deep inside the inference engine: 18.5.2 defines the notions &quot;input variable&quot; and &quot;output variable&quot;, the implementation of which depends on a new method TypeBinding.collectInferenceVariables(Set).

It turned out that a couple of subclasses of TypeBinding were simply lacking overrides for this (similarly also for mentionsAny(..)).

As a result we included too many constraints during IC18.findBottomSet(), which caused wrong substitution of inference variables on those constraints created in IC18.inferInvocationType(BoundSet, ..).

Test &amp; fix released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=eeb0d779ca54bfa774f6270ba7624121d1e2d305</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2355682</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-28 17:06:13 -0500</bug_when>
    <thetext>*** Bug 425063 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>