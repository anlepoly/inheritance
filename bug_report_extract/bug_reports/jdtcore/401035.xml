<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>401035</bug_id>
          
          <creation_ts>2013-02-18 01:44:00 -0500</creation_ts>
          <short_desc>[1.8] A few tests have started failing recently</short_desc>
          <delta_ts>2013-02-18 11:18:06 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2217872</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-18 01:44:04 -0500</bug_when>
    <thetext>BETA_JAVA8: 

org.eclipse.jdt.core.tests.compiler.parser.GenericDietRecoveryTest.test0025()
and
org.eclipse.jdt.core.tests.model.ReconcilerTests.testMethodWithError01()
have started failing since yesterday.

At least on the first, I could see that if I roll back the clock to
before c4baf766be166b04f595eec5cebbd2a64f399daa the problem goes away.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2217873</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-18 01:44:28 -0500</bug_when>
    <thetext>Stephan, thanks in advance.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2217930</commentid>
    <comment_count>2</comment_count>
      <attachid>227184</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-02-18 04:05:28 -0500</bug_when>
    <thetext>Created attachment 227184
Proposed test adjustments</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2217941</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-02-18 04:14:13 -0500</bug_when>
    <thetext>Both changes witness the fact that since Bug 383973 we now recover more information, viz. we no longer forget method modifiers during certain scenarii of recovery.

For GenericDietRecoveryTest I&apos;m sure the change is an improvement.
The changes in ReconcilerTests could use a glance by a second pair of eye balls, since we seem to see a residue of accidental differences.
I split the failing test into one with changed expected output, and another one where I tweaked the input to meet the original expectation.

Tests are running.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2217973</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-02-18 05:00:24 -0500</bug_when>
    <thetext>The completion parser still gives the old result for GenericDietRecoveryTest.
I&apos;ll take a look whether this is a hint at some undesirable inconsistency.

Other than that tests are happy.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2218073</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-02-18 07:58:05 -0500</bug_when>
    <thetext>Here&apos;s the difference between regular and completion parsers:
The former initializes annotationRecoveryActivated to true, that latter to false.
This has an effect inside checkAndSetModifiers():

	if (this.currentElement != null &amp;&amp; this.annotationRecoveryActivated) {
		this.currentElement.addModifier(flag, this.modifiersSourceStart);
	}

During completion this is where we lose the modifier.
I&apos;m ambivalent how to handle this:
- We might just remove the check for annotationRecoveryActivated (here and in consumePushCombineModifiers()).
  I see now relevant gain in skipping this trivial step -&gt; both parsers would behave the same.
- We might just adjust the test expectation.
  I see no relevant loss for completion parser in not having this modifier (though it might be difficult to show that the modifier is completely irrelevant)
  -&gt; tests would be happy again and one fewer change in the Parser.

Does anyone have a preference one way or other?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2218088</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-18 08:06:41 -0500</bug_when>
    <thetext>(In reply to comment #5)
&gt; Here&apos;s the difference between regular and completion parsers:
&gt; The former initializes annotationRecoveryActivated to true, that latter to
&gt; false.
&gt; This has an effect inside checkAndSetModifiers():
&gt; 
&gt; 	if (this.currentElement != null &amp;&amp; this.annotationRecoveryActivated) {
&gt; 		this.currentElement.addModifier(flag, this.modifiersSourceStart);
&gt; 	}
&gt; 
&gt; During completion this is where we lose the modifier.
&gt; I&apos;m ambivalent how to handle this:
&gt; - We might just remove the check for annotationRecoveryActivated (here and
&gt; in consumePushCombineModifiers()).

Why don&apos;t we just override this method in CompletionParser ? This method
was recently added and it is in effect doing what checkAndSetModifiers is
doing but it is not convenient to call it at that point due to various 
side effects.

We should logically override it to mimic all modifiers being funnelled
through checkAndSetModifiers.

That said, I am puzzled why this failure didn&apos;t show up earlier in my
testing - Why now only after your change ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2218098</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-02-18 08:28:52 -0500</bug_when>
    <thetext>(In reply to comment #6)
&gt; &gt; I&apos;m ambivalent how to handle this:
&gt; &gt; - We might just remove the check for annotationRecoveryActivated (here and
&gt; &gt; in consumePushCombineModifiers()).
&gt; 
&gt; Why don&apos;t we just override this method in CompletionParser ? This method
&gt; was recently added and it is in effect doing what checkAndSetModifiers is
&gt; doing but it is not convenient to call it at that point due to various 
&gt; side effects.

To make sure we&apos;re on the same page: in the test in question it&apos;s the old
checkAndSetModifiers() that behaves differently for both parsers.

For the matter at hand I&apos;d consider overriding as too much attention for
a marginal issue :), my question is only if annotationRecoveryActivated
should control whether or not modifier flags are skipped, too.
The check is already there, and I&apos;m just considering to remove it.
(So that annotationRecoveryActivated only affects consumeAnnotationName()).

OTOH, overriding the new method consumePushCombineModifiers() as to
set CompletionParser.hasUnusedModifiers = true is probably a good idea,
but that&apos;s a different story and I don&apos;t have a test for this topic.
(Cf. CompletionParser.checkAndSetModifiers()).


&gt; That said, I am puzzled why this failure didn&apos;t show up earlier in my
&gt; testing - Why now only after your change ?

Before my change some modifiers were simply dropped, unless also annotations
had been recovered. This wasn&apos;t all that bad, but with default methods we
were getting undesirable secondary errors if AccDefaultMethod was missing.
That&apos;s why I took care to make recovery of modifiers more complete.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2218099</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-18 08:38:07 -0500</bug_when>
    <thetext>(In reply to comment #7)

&gt; To make sure we&apos;re on the same page: in the test in question it&apos;s the old
&gt; checkAndSetModifiers() that behaves differently for both parsers.

OK, I think I understand it now.

&gt; The check is already there, and I&apos;m just considering to remove it.

OK, seems reasonable.

&gt; OTOH, overriding the new method consumePushCombineModifiers() as to
&gt; set CompletionParser.hasUnusedModifiers = true is probably a good idea,

Could you please ? Now that you are touching somewhat related code. I am
fine with the proof of correctness being just your review with no additional 
test to establish it, if it cannot be ascertained readily how to test it
- Essentially, we want the same behavior if the special
provision for consuming default was not put in place and each modifier
marched its way through checkAndSet*. Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2218189</commentid>
    <comment_count>9</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-02-18 11:18:06 -0500</bug_when>
    <thetext>Fix released via commit 5abbc9ddba0809fbf49d16dc724883e6fc17121c

Here&apos;s what I ended up doing:
* split ReconcilerTests.testMethodWithError01() into two:
  - one with adjusted expectation
  - one with tweaked input to meet the old expectation
* adjust expectation in GenericDietRecoveryTest.test0025()
  - do expect recovery of the modifier &quot;public&quot;
* change Parser as to handle modifier flags during recovery even if annotationRecoveryActivated is false
  -&gt; this makes CompletionParser consistent with the regular parser after the change in bug 383973.
* added overriding CompletionParser.consumePushCombineModifiers() to mimic a corresponding override of checkAndSetModifiers()
  -&gt; establish consistency regarding CompletionParser#hasUnusedModifiers, proof by intuition :)
* run all JDT/Core tests</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>227184</attachid>
            <date>2013-02-18 04:05:00 -0500</date>
            <delta_ts>2013-02-18 04:05:28 -0500</delta_ts>
            <desc>Proposed test adjustments</desc>
            <filename>clipboard.txt</filename>
            <type>text/plain</type>
            <size>3280</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9wYXJzZXIvR2VuZXJpY0RpZXRSZWNvdmVy
eVRlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9wYXJzZXIvR2VuZXJpY0RpZXRSZWNvdmVy
eVRlc3QuamF2YQppbmRleCA1MDdjZjM2Li4yNzdiYTM5IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
Y29tcGlsZXIvcGFyc2VyL0dlbmVyaWNEaWV0UmVjb3ZlcnlUZXN0LmphdmEKKysrIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rl
c3RzL2NvbXBpbGVyL3BhcnNlci9HZW5lcmljRGlldFJlY292ZXJ5VGVzdC5qYXZhCkBAIC0xMTgx
LDcgKzExODEsNyBAQAogCVN0cmluZyBleHBlY3RlZERpZXRVbml0VG9TdHJpbmcgPQogCQkiaW1w
b3J0IGphdmEudXRpbC4qO1xuIiArCiAJCSJwdWJsaWMgaW50ZXJmYWNlIFg8VD4ge1xuIiArCi0J
CSIgIDxLPk1hcDxLLCBUPiBmb28oKTtcbiIgKworCQkiICBwdWJsaWMgPEs+TWFwPEssIFQ+IGZv
bygpO1xuIiArCiAJCSJ9XG4iOwogCiAJU3RyaW5nIGV4cGVjdGVkRGlldFBsdXNCb2R5VW5pdFRv
U3RyaW5nID0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3Ny
Yy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9tb2RlbC9SZWNvbmNpbGVyVGVzdHMuamF2YSBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29y
ZS90ZXN0cy9tb2RlbC9SZWNvbmNpbGVyVGVzdHMuamF2YQppbmRleCA1MmE2OTNmLi4zMDc4MGQw
IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2Vj
bGlwc2UvamR0L2NvcmUvdGVzdHMvbW9kZWwvUmVjb25jaWxlclRlc3RzLmphdmEKKysrIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rl
c3RzL21vZGVsL1JlY29uY2lsZXJUZXN0cy5qYXZhCkBAIC0yMTE0LDggKzIxMTQsNyBAQAogCXRo
aXMud29ya2luZ0NvcHkucmVjb25jaWxlKElDb21waWxhdGlvblVuaXQuTk9fQVNULCBmYWxzZSwg
bnVsbCwgbnVsbCk7CiAJYXNzZXJ0V29ya2luZ0NvcHlEZWx0YXMoCiAJCSJVbmV4cGVjdGVkIGRl
bHRhIGFmdGVyIHN5bnRheCBlcnJvciIsCi0JCSJYWypdOiB7Q0hJTERSRU4gfCBGSU5FIEdSQUlO
RUR9XG4iICsKLQkJIglmb28oKVsqXToge01PRElGSUVSUyBDSEFOR0VEfSIKKwkJIltXb3JraW5n
IGNvcHldIFguamF2YVsqXToge0NPTlRFTlQgfCBGSU5FIEdSQUlORUR9IgogCSk7CiAJYXNzZXJ0
UHJvYmxlbXMoCiAJCSJVbmV4cGVjdGVkIHByb2JsZW1zIiwKQEAgLTIxNDAsNiArMjEzOSw2MCBA
QAogCXRoaXMud29ya2luZ0NvcHkucmVjb25jaWxlKElDb21waWxhdGlvblVuaXQuTk9fQVNULCBm
YWxzZSwgbnVsbCwgbnVsbCk7CiAJYXNzZXJ0V29ya2luZ0NvcHlEZWx0YXMoCiAJCSJVbmV4cGVj
dGVkIGRlbHRhIGFmdGVyIGZpeGluZyBzeW50YXggZXJyb3IiLAorCQkiW1dvcmtpbmcgY29weV0g
WC5qYXZhWypdOiB7Q09OVEVOVCB8IEZJTkUgR1JBSU5FRH0iCisJKTsKKwlhc3NlcnRQcm9ibGVt
cygKKwkJIlVuZXhwZWN0ZWQgcHJvYmxlbXMiLAorCQkiLS0tLS0tLS0tLVxuIiArCisJCSIxLiBX
QVJOSU5HIGluIC9SZWNvbmNpbGVyL3NyYy9wMS9YLmphdmEgKGF0IGxpbmUgMilcbiIgKworCQki
CWltcG9ydCBwMi4qO1xuIiArCisJCSIJICAgICAgIF5eXG4iICsKKwkJIlRoZSBpbXBvcnQgcDIg
aXMgbmV2ZXIgdXNlZFxuIiArCisJCSItLS0tLS0tLS0tXG4iCisJKTsKK30KKy8qKgorICogSW50
cm9kdWNlcyBhIHN5bnRheCBlcnJvciBpbiB0aGUgbW9kaWZpZXJzIG9mIGEgbWV0aG9kLgorICog
VmFyaWFudCB0byBmb3JjZSB0aGUgZXhwZWN0ZWQgbW9kaWZpZXIgY2hhbmdlLgorICovCitwdWJs
aWMgdm9pZCB0ZXN0TWV0aG9kV2l0aEVycm9yMDFhKCkgdGhyb3dzIENvcmVFeGNlcHRpb24gewor
CS8vIEludHJvZHVjZSBzeW50YXggZXJyb3IKKwlzZXRXb3JraW5nQ29weUNvbnRlbnRzKAorCQki
cGFja2FnZSBwMTtcbiIgKworCQkiaW1wb3J0IHAyLio7XG4iICsKKwkJInB1YmxpYyBjbGFzcyBY
IHtcbiIgKworCQkiICBwdWJsaWNfIHZvaWQgZm9vKCkge1xuIiArCisJCSIgIH1cbiIgKworCQki
fSIpOworCXRoaXMud29ya2luZ0NvcHkucmVjb25jaWxlKElDb21waWxhdGlvblVuaXQuTk9fQVNU
LCBmYWxzZSwgbnVsbCwgbnVsbCk7CisJYXNzZXJ0V29ya2luZ0NvcHlEZWx0YXMoCisJCSJVbmV4
cGVjdGVkIGRlbHRhIGFmdGVyIHN5bnRheCBlcnJvciIsCisJCSJYWypdOiB7Q0hJTERSRU4gfCBG
SU5FIEdSQUlORUR9XG4iICsKKwkJIglmb28oKVsqXToge01PRElGSUVSUyBDSEFOR0VEfSIKKwkp
OworCWFzc2VydFByb2JsZW1zKAorCQkiVW5leHBlY3RlZCBwcm9ibGVtcyIsCisJCSItLS0tLS0t
LS0tXG4iICsgCisJCSIxLiBFUlJPUiBpbiAvUmVjb25jaWxlci9zcmMvcDEvWC5qYXZhIChhdCBs
aW5lIDQpXG4iICsgCisJCSIJcHVibGljXyB2b2lkIGZvbygpIHtcbiIgKyAKKwkJIgleXl5eXl5e
XG4iICsgCisJCSJTeW50YXggZXJyb3Igb24gdG9rZW4gXCJwdWJsaWNfXCIsIHB1YmxpYyBleHBl
Y3RlZFxuIiArIAorCQkiLS0tLS0tLS0tLVxuIgorCSk7CisKKwkvLyBGaXggdGhlIHN5bnRheCBl
cnJvcgorCWNsZWFyRGVsdGFzKCk7CisJU3RyaW5nIGNvbnRlbnRzID0KKwkJInBhY2thZ2UgcDE7
XG4iICsKKwkJImltcG9ydCBwMi4qO1xuIiArCisJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJ
IiAgcHVibGljIHZvaWQgZm9vKCkge1xuIiArCisJCSIgIH1cbiIgKworCQkifSI7CisJc2V0V29y
a2luZ0NvcHlDb250ZW50cyhjb250ZW50cyk7CisJdGhpcy53b3JraW5nQ29weS5yZWNvbmNpbGUo
SUNvbXBpbGF0aW9uVW5pdC5OT19BU1QsIGZhbHNlLCBudWxsLCBudWxsKTsKKwlhc3NlcnRXb3Jr
aW5nQ29weURlbHRhcygKKwkJIlVuZXhwZWN0ZWQgZGVsdGEgYWZ0ZXIgZml4aW5nIHN5bnRheCBl
cnJvciIsCiAJCSJYWypdOiB7Q0hJTERSRU4gfCBGSU5FIEdSQUlORUR9XG4iICsKIAkJIglmb28o
KVsqXToge01PRElGSUVSUyBDSEFOR0VEfSIKIAkpOw==
</data>

          </attachment>
      

    </bug>

</bugzilla>