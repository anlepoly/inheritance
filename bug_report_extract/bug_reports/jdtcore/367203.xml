<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>367203</bug_id>
          
          <creation_ts>2011-12-20 10:52:00 -0500</creation_ts>
          <short_desc>[compiler][null] detect assigning null to nonnull argument</short_desc>
          <delta_ts>2012-01-23 03:23:38 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>Other</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>3.8 M5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Stephan Herrmann">stephan.herrmann</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2043033</commentid>
    <comment_count>0</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-20 10:52:54 -0500</bug_when>
    <thetext>From bug 367154 comment 1:
&gt; Is this case already captured in a bug?
&gt; 
&gt; @NonNullByDefault
&gt; public class ShowNPE2 {     
&gt;      public Object foo(Object o1, final boolean b) {
&gt;          o1 = null;   // MISSING NPE warning
&gt;         System.out.println(o1.toString());   
&gt;         return null;  // Correct warning
&gt; 
&gt;     }
&gt; }

This test reveals an obvious omission inside 
AbstractMethodDeclaration.addParameternonNullAnnotation
which can be easily fixed: update the tagBits of argument.binding.

I should also add a test for the inverse:
arg is nonnull from default, passed to a method requiring nonnull.
Expecting this to fail currently, too.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2043108</commentid>
    <comment_count>1</comment_count>
      <attachid>208637</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-20 13:03:25 -0500</bug_when>
    <thetext>Created attachment 208637
tests &amp; fix

(In reply to comment #0)
&gt; This test reveals an obvious omission inside 
&gt; AbstractMethodDeclaration.addParameternonNullAnnotation
&gt; which can be easily fixed: update the tagBits of argument.binding.

The patch does this at the call site in MethodBinding.fillInDefaultNonNullness
 
&gt; I should also add a test for the inverse:
&gt; arg is nonnull from default, passed to a method requiring nonnull.
&gt; Expecting this to fail currently, too.

Test has been added, my prediction was wrong, though: this case was
already handled via AbstractMethodDeclaration.analyseArguments()
(which uses MethodBinding.parameterNonNullness instead of tagBits).

Aggressive tests are currently running.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2043150</commentid>
    <comment_count>2</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-12-20 14:35:48 -0500</bug_when>
    <thetext>(In reply to comment #1)
&gt; &gt; I should also add a test for the inverse:
&gt; &gt; arg is nonnull from default, passed to a method requiring nonnull.
&gt; &gt; Expecting this to fail currently, too.
&gt; 
&gt; Test has been added, my prediction was wrong, though: this case was
&gt; already handled via AbstractMethodDeclaration.analyseArguments()
&gt; (which uses MethodBinding.parameterNonNullness instead of tagBits).

Yes, we&apos;d already tested this particular case.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2043202</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-20 17:03:59 -0500</bug_when>
    <thetext>Released for 3.8 M5 via commit 3a3faf3d0aa82cf2ed2b8375e651ef0b429b1314</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2054227</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-23 03:23:38 -0500</bug_when>
    <thetext>Verified for 3.8 M5 using build id: I20120122-2000</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>208637</attachid>
            <date>2011-12-20 13:03:00 -0500</date>
            <delta_ts>2011-12-20 13:03:25 -0500</delta_ts>
            <desc>tests &amp; fix</desc>
            <filename>Bug_367203.patch</filename>
            <type>text/plain</type>
            <size>4698</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxBbm5vdGF0aW9u
VGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbEFubm90YXRpb25U
ZXN0LmphdmEKaW5kZXggMzg1YjljMi4uMGE4YWY2YiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Nv
bXBpbGVyL3JlZ3Jlc3Npb24vTnVsbEFubm90YXRpb25UZXN0LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3Rz
L2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbEFubm90YXRpb25UZXN0LmphdmEKQEAgLTY1NSw2ICs2
NTUsNTUgQEAKIAkJdGhpcy5MSUJTLAogCQl0cnVlIC8qIHNob3VsZEZsdXNoKi8pOwogfQorLy8g
QnVnwqAzNjcyMDMgLSBbY29tcGlsZXJdW251bGxdIGRldGVjdCBhc3NpZ25pbmcgbnVsbCB0byBu
b25udWxsIGFyZ3VtZW50CitwdWJsaWMgdm9pZCB0ZXN0X25vbm51bGxfYXJndW1lbnRfMDAxKCkg
eworCXJ1bk5lZ2F0aXZlVGVzdFdpdGhMaWJzKAorCQkJbmV3IFN0cmluZ1tdIHsKKwkJCQkiU2hv
d05QRTIuamF2YSIsCisJCQkJImltcG9ydCBvcmcuZWNsaXBzZS5qZHQuYW5ub3RhdGlvbi5Ob25O
dWxsQnlEZWZhdWx0O1xuIiArIAorCQkJCSJATm9uTnVsbEJ5RGVmYXVsdFxuIiArIAorCQkJCSJw
dWJsaWMgY2xhc3MgU2hvd05QRTIge1xuIiArIAorCQkJCSIgICAgIHB1YmxpYyBPYmplY3QgZm9v
KE9iamVjdCBvMSwgZmluYWwgYm9vbGVhbiBiKSB7XG4iICsgCisJCQkJIiAgICAgICAgIG8xID0g
bnVsbDsgICAvLyBleHBlY3QgTlBFIGVycm9yXG4iICsgCisJCQkJIiAgICAgICAgIFN5c3RlbS5v
dXQucHJpbnRsbihvMS50b1N0cmluZygpKTsgICBcbiIgKyAKKwkJCQkiICAgICAgICAgcmV0dXJu
IG51bGw7ICAvLyBleHBlY3QgTlBFIGVycm9yXG4iICsgCisJCQkJIiAgICB9XG4iICsgCisJCQkJ
In0iCisJCQl9LAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCSIxLiBFUlJPUiBpbiBTaG93TlBF
Mi5qYXZhIChhdCBsaW5lIDUpXG4iICsgCisJCQkiCW8xID0gbnVsbDsgICAvLyBleHBlY3QgTlBF
IGVycm9yXG4iICsgCisJCQkiCSAgICAgXl5eXlxuIiArIAorCQkJIlR5cGUgbWlzbWF0Y2g6IHJl
cXVpcmVkIFwnQE5vbk51bGwgT2JqZWN0XCcgYnV0IHRoZSBwcm92aWRlZCB2YWx1ZSBpcyBudWxs
XG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJIjIuIEVSUk9SIGluIFNob3dOUEUyLmph
dmEgKGF0IGxpbmUgNylcbiIgKyAKKwkJCSIJcmV0dXJuIG51bGw7ICAvLyBleHBlY3QgTlBFIGVy
cm9yXG4iICsgCisJCQkiCSAgICAgICBeXl5eXG4iICsgCisJCQkiVHlwZSBtaXNtYXRjaDogcmVx
dWlyZWQgXCdATm9uTnVsbCBPYmplY3RcJyBidXQgdGhlIHByb3ZpZGVkIHZhbHVlIGlzIG51bGxc
biIgKyAKKwkJCSItLS0tLS0tLS0tXG4iKTsKK30KKy8vIEJ1Z8KgMzY3MjAzIC0gW2NvbXBpbGVy
XVtudWxsXSBkZXRlY3QgYXNzaWduaW5nIG51bGwgdG8gbm9ubnVsbCBhcmd1bWVudAorcHVibGlj
IHZvaWQgdGVzdF9ub25udWxsX2FyZ3VtZW50XzAwMigpIHsKKwlydW5OZWdhdGl2ZVRlc3RXaXRo
TGlicygKKwkJCW5ldyBTdHJpbmdbXSB7CisJCQkJIlNob3dOUEUyLmphdmEiLAorCQkJCSJpbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTm9uTnVsbEJ5RGVmYXVsdDtcbiIgKyAKKwkJ
CQkiQE5vbk51bGxCeURlZmF1bHRcbiIgKyAKKwkJCQkicHVibGljIGNsYXNzIFNob3dOUEUyIHtc
biIgKyAKKwkJCQkiICAgIHB1YmxpYyBPYmplY3QgZm9vKE9iamVjdCBvMSwgZmluYWwgYm9vbGVh
biBiKSB7XG4iICsgCisJCQkJIiAgICAgICAgYmFyKG8xKTsgLy8gZXhwZWN0aW5nIG5vIHByb2Js
ZW1cbiIgKyAKKwkJCQkiICAgICAgICByZXR1cm4gbnVsbDsgIC8vIGV4cGVjdCBOUEUgZXJyb3Jc
biIgKyAKKwkJCQkiICAgIH1cbiIgKworCQkJCSIgICAgdm9pZCBiYXIoT2JqZWN0IG8yKSB7fVxu
IiArIAorCQkJCSJ9IgorCQkJfSwKKwkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkiMS4gRVJST1Ig
aW4gU2hvd05QRTIuamF2YSAoYXQgbGluZSA2KVxuIiArIAorCQkJIglyZXR1cm4gbnVsbDsgIC8v
IGV4cGVjdCBOUEUgZXJyb3JcbiIgKyAKKwkJCSIJICAgICAgIF5eXl5cbiIgKyAKKwkJCSJUeXBl
IG1pc21hdGNoOiByZXF1aXJlZCBcJ0BOb25OdWxsIE9iamVjdFwnIGJ1dCB0aGUgcHJvdmlkZWQg
dmFsdWUgaXMgbnVsbFxuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIpOworfQogLy8gYXNzaWduaW5n
IHBvdGVudGlhbCBudWxsIHRvIGEgbm9ubnVsbCBsb2NhbCB2YXJpYWJsZQogcHVibGljIHZvaWQg
dGVzdF9ub25udWxsX2xvY2FsXzAwMSgpIHsKIAlydW5OZWdhdGl2ZVRlc3QoCmRpZmYgLS1naXQg
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvYXN0L0Fic3RyYWN0TWV0aG9kRGVjbGFyYXRpb24uamF2YSBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3Qv
QWJzdHJhY3RNZXRob2REZWNsYXJhdGlvbi5qYXZhCmluZGV4IGY2ZDk4ZmQuLmUwMDUzMGIgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9hc3QvQWJzdHJhY3RNZXRob2REZWNsYXJhdGlvbi5qYXZhCisrKyBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hc3QvQWJzdHJhY3RNZXRob2REZWNsYXJhdGlvbi5qYXZhCkBAIC04Myw4ICs4Myw3
IEBACiAJICogTWF0ZXJpYWxpemUgYSBudWxsIHBhcmFtZXRlciBhbm5vdGF0aW9uIHRoYXQgaGFz
IGJlZW4gYWRkZWQgZnJvbSB0aGUgY3VycmVudCBkZWZhdWx0LAogCSAqIGluIG9yZGVyIHRvIGVu
c3VyZSB0aGF0IHRoaXMgYW5ub3RhdGlvbiB3aWxsIGJlIGdlbmVyYXRlZCBpbnRvIHRoZSAuY2xh
c3MgZmlsZSwgdG9vLgogCSAqLwotCXB1YmxpYyB2b2lkIGFkZFBhcmFtZXRlck5vbk51bGxBbm5v
dGF0aW9uKGludCBpLCBSZWZlcmVuY2VCaW5kaW5nIGFubm90YXRpb25CaW5kaW5nKSB7Ci0JCUFy
Z3VtZW50IGFyZ3VtZW50ID0gdGhpcy5hcmd1bWVudHNbaV07CisJcHVibGljIHZvaWQgYWRkUGFy
YW1ldGVyTm9uTnVsbEFubm90YXRpb24oQXJndW1lbnQgYXJndW1lbnQsIFJlZmVyZW5jZUJpbmRp
bmcgYW5ub3RhdGlvbkJpbmRpbmcpIHsKIAkJaWYgKGFyZ3VtZW50LnR5cGUgIT0gbnVsbCkgLy8g
bnVsbCBoYXBwZW5zIGZvciBjb25zdHJ1Y3RvcnMgb2YgYW5vbnltb3VzIGNsYXNzZXMKIAkJCWFy
Z3VtZW50LmFubm90YXRpb25zID0gYWRkQW5ub3RhdGlvbihhcmd1bWVudC50eXBlLCBhcmd1bWVu
dC5hbm5vdGF0aW9ucywgYW5ub3RhdGlvbkJpbmRpbmcpOwogCX0KZGlmZiAtLWdpdCBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9sb29rdXAvTWV0aG9kQmluZGluZy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9NZXRob2RCaW5kaW5n
LmphdmEKaW5kZXggMGUxMTQwZC4uMzRkNDFkNSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9N
ZXRob2RCaW5kaW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9NZXRob2RCaW5kaW5nLmphdmEK
QEAgLTQ1OCw4ICs0NTgsMTEgQEAKIAkJaWYgKHRoaXMucGFyYW1ldGVyTm9uTnVsbG5lc3NbaV0g
PT0gbnVsbCkgewogCQkJYWRkZWQgPSB0cnVlOwogCQkJdGhpcy5wYXJhbWV0ZXJOb25OdWxsbmVz
c1tpXSA9IEJvb2xlYW4uVFJVRTsKLQkJCWlmIChzb3VyY2VNZXRob2QgIT0gbnVsbCkKLQkJCQlz
b3VyY2VNZXRob2QuYWRkUGFyYW1ldGVyTm9uTnVsbEFubm90YXRpb24oaSwgKFJlZmVyZW5jZUJp
bmRpbmcpYW5ub3RhdGlvbkJpbmRpbmcpOworCQkJaWYgKHNvdXJjZU1ldGhvZCAhPSBudWxsKSB7
CisJCQkJQXJndW1lbnQgYXJndW1lbnQgPSBzb3VyY2VNZXRob2QuYXJndW1lbnRzW2ldOworCQkJ
CXNvdXJjZU1ldGhvZC5hZGRQYXJhbWV0ZXJOb25OdWxsQW5ub3RhdGlvbihhcmd1bWVudCwgKFJl
ZmVyZW5jZUJpbmRpbmcpYW5ub3RhdGlvbkJpbmRpbmcpOworCQkJCWFyZ3VtZW50LmJpbmRpbmcu
dGFnQml0cyB8PSBUYWdCaXRzLkFubm90YXRpb25Ob25OdWxsOworCQkJfQogCQl9IGVsc2UgaWYg
KHRoaXMucGFyYW1ldGVyTm9uTnVsbG5lc3NbaV0uYm9vbGVhblZhbHVlKCkpIHsKIAkJCXNvdXJj
ZU1ldGhvZC5zY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5udWxsQW5ub3RhdGlvbklzUmVkdW5kYW50
KHNvdXJjZU1ldGhvZCwgaSk7CiAJCX0K
</data>

          </attachment>
      

    </bug>

</bugzilla>