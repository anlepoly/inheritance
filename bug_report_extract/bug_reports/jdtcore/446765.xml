<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>446765</bug_id>
          
          <creation_ts>2014-10-12 13:51:00 -0400</creation_ts>
          <short_desc>[1.8][content assist] Completion does not work with both lambdas and anonymous classes in the picture</short_desc>
          <delta_ts>2015-01-21 00:35:59 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.5</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Mac OS X</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>blocker</bug_severity>
          <target_milestone>4.4.2</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Doug Schaefer">dschaefer</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>jarthana</cc>
    
    <cc>Sebastian.Zarnekow</cc>
    
    <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2463416</commentid>
    <comment_count>0</comment_count>
    <who name="Doug Schaefer">dschaefer</who>
    <bug_when>2014-10-12 13:51:09 -0400</bug_when>
    <thetext>I have a mass of lambdas and internal classes that I&apos;m working with. It&apos;s reached a point now where I get the following stack overflow.

This is with org.eclipse.jdt.core 3.10.0.v20140902-026

&quot;main&quot; #1 prio=6 os_prio=31 tid=0x0000000102807800 nid=0x707 runnable [0x00007fff5f87b000]
   java.lang.Thread.State: RUNNABLE
        at org.eclipse.jdt.internal.core.JavaElement.hashCode(JavaElement.java:510)
        at org.eclipse.jdt.internal.core.JavaElement.hashCode(JavaElement.java:510)
        at org.eclipse.jdt.internal.core.SourceMethod.hashCode(SourceMethod.java:202)
        at org.eclipse.jdt.internal.core.JavaElement.hashCode(JavaElement.java:510)
        at org.eclipse.jdt.internal.core.JavaElement.hashCode(JavaElement.java:510)
        at org.eclipse.jdt.internal.core.SourceMethod.hashCode(SourceMethod.java:202)
        at org.eclipse.jdt.internal.core.JavaElement.hashCode(JavaElement.java:510)
        at org.eclipse.jdt.internal.core.JavaElement.hashCode(JavaElement.java:510)
        at org.eclipse.jdt.internal.core.SourceMethod.hashCode(SourceMethod.java:202)
        at org.eclipse.jdt.internal.core.JavaElement.hashCode(JavaElement.java:510)
....</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2463497</commentid>
    <comment_count>1</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-10-12 18:31:32 -0400</bug_when>
    <thetext>Please see: Bug 446773.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2463531</commentid>
    <comment_count>2</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-10-12 23:51:54 -0400</bug_when>
    <thetext>Hi Doug,
Is this bug from the same project as Bug 446773?

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2463532</commentid>
    <comment_count>3</comment_count>
    <who name="Doug Schaefer">dschaefer</who>
    <bug_when>2014-10-12 23:55:42 -0400</bug_when>
    <thetext>Same project. Yes. This one was with content assist turned on. The other one was after I turned it off but did an Control Click on one of the functions.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2463534</commentid>
    <comment_count>4</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-10-12 23:57:54 -0400</bug_when>
    <thetext>(In reply to Doug Schaefer from comment #3)
&gt; Same project. 

Does 4.5 M2 help :-) if the scenario is reproducible?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2463535</commentid>
    <comment_count>5</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-10-12 23:59:11 -0400</bug_when>
    <thetext>(In reply to Doug Schaefer from comment #3)
&gt; This one was with content assist turned on. 

Since this is with content assist can you please post the code snippet. 

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2465039</commentid>
    <comment_count>6</comment_count>
    <who name="Doug Schaefer">dschaefer</who>
    <bug_when>2014-10-14 16:55:56 -0400</bug_when>
    <thetext>M2 does help, no stack overflow, but content assist rarely returns anything. We are working towards a deadline tomorrow. Will try and get a reproducible code snippit I can share after that.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2465073</commentid>
    <comment_count>7</comment_count>
    <who name="Doug Schaefer">dschaefer</who>
    <bug_when>2014-10-14 21:55:35 -0400</bug_when>
    <thetext>Ugh, bad news. I just got the stack overflow on 4.5 :(.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2466771</commentid>
    <comment_count>8</comment_count>
      <attachid>247946</attachid>
    <who name="Doug Schaefer">dschaefer</who>
    <bug_when>2014-10-16 14:06:25 -0400</bug_when>
    <thetext>Created attachment 247946
Reproducable project

Stack overflows are pretty easy to reproduce as it turns out. I&apos;ve attached a sample project showing the code pattern we are using. Content assist in the Test class at line 23 gives you one. The stack looks different than the one I reported in our product project, but I have a feeling the cases are all the same.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2466773</commentid>
    <comment_count>9</comment_count>
    <who name="Doug Schaefer">dschaefer</who>
    <bug_when>2014-10-16 14:10:03 -0400</bug_when>
    <thetext>BTW, I am using the Eclipse for Java IDE and Code Recommenders is reporting the error but the stack looks like it is coming from JDT.

The overflow happens in Luna. I don&apos;t see it in Mars, but then it&apos;s also not finding the foo I&apos;m trying to complete to.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2466774</commentid>
    <comment_count>10</comment_count>
      <attachid>247947</attachid>
    <who name="Doug Schaefer">dschaefer</who>
    <bug_when>2014-10-16 14:16:12 -0400</bug_when>
    <thetext>Created attachment 247947
More complete example

Here&apos;s a more complete example. content assist on line 31 of Test causes a completion error.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2467040</commentid>
    <comment_count>11</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-10-17 02:39:49 -0400</bug_when>
    <thetext>(In reply to Doug Schaefer from comment #10)
Hi Doug,
Thanks a lot for the examples. I am sorry but I not able to reproduce the hang either on Luna 4.4.1 or Mars 4.5 M2. I think it has something to do with the references to classes from

import org.vertx.java.core.AsyncResult;
import org.vertx.java.core.Handler; 

Is it possible for you to construct a example by having the code for AsyncResult
or Handler included as part of the project. 

I tried constructing those classes (my project had just one error : the error on the variable response., as you have already mentioned in your comment), but as said earlier could not reproduce the hang.


I tried both the examples. Let us work on the example: &quot;More complete example&quot;.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2467231</commentid>
    <comment_count>12</comment_count>
    <who name="Doug Schaefer">dschaefer</who>
    <bug_when>2014-10-17 08:49:37 -0400</bug_when>
    <thetext>The example is complete. That&apos;s why I mentioned I&apos;m using the Java IDE. It has m2e which loads the dependencies automatically for you. AsyncResult is from Vert.x.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2468195</commentid>
    <comment_count>13</comment_count>
    <who name="Doug Schaefer">dschaefer</who>
    <bug_when>2014-10-20 12:29:54 -0400</bug_when>
    <thetext>Any progress on this? It&apos;s really hurting our ability to work on this project. Be happy to try out any attempted fixes.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2468359</commentid>
    <comment_count>14</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-20 19:45:07 -0400</bug_when>
    <thetext>(In reply to Doug Schaefer from comment #13)
&gt; Any progress on this? It&apos;s really hurting our ability to work on this
&gt; project. Be happy to try out any attempted fixes.

Let us sette on M2 for analyzing this and resolving this. Any considerations
for backports can be discussed later.

If you will provide a plain Java project with missing classes stubbed out
suitably - i.e if I can see all the concerned methods and types, I can work
on this on a priority basis and get a fix in for M3 which is very close 
(end of this month)

ATM on Mars HEAD, I don&apos;t see any hangs, I do see completion failure at
respose. and foo, but I need to see the HttpClient and other missing classes
and I don&apos;t know how to get them.

I don&apos;t use m2e, a plain Java project with stubbed out classes would be the
best. Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2468360</commentid>
    <comment_count>15</comment_count>
    <who name="Doug Schaefer">dschaefer</who>
    <bug_when>2014-10-20 19:50:42 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #14)
&gt; (In reply to Doug Schaefer from comment #13)
&gt; &gt; Any progress on this? It&apos;s really hurting our ability to work on this
&gt; &gt; project. Be happy to try out any attempted fixes.
&gt; 
&gt; Let us sette on M2 for analyzing this and resolving this. Any considerations
&gt; for backports can be discussed later.
&gt; 
&gt; If you will provide a plain Java project with missing classes stubbed out
&gt; suitably - i.e if I can see all the concerned methods and types, I can work
&gt; on this on a priority basis and get a fix in for M3 which is very close 
&gt; (end of this month)
&gt; 
&gt; ATM on Mars HEAD, I don&apos;t see any hangs, I do see completion failure at
&gt; respose. and foo, but I need to see the HttpClient and other missing classes
&gt; and I don&apos;t know how to get them.
&gt; 
&gt; I don&apos;t use m2e, a plain Java project with stubbed out classes would be the
&gt; best. Thanks.

Why not install m2e? All this stuff is open source and part of Eclipse just like JDT is. I don&apos;t want to waste time setting up fake classes that may or may not exhibit the problem when the real ones are easily accessible.

We&apos;re happy to work against Mars and help test with nightly builds.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2468361</commentid>
    <comment_count>16</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-20 20:01:19 -0400</bug_when>
    <thetext>(In reply to Doug Schaefer from comment #15)

&gt; &gt; I don&apos;t use m2e, a plain Java project with stubbed out classes would be the
&gt; &gt; best. Thanks.
&gt; 
&gt; Why not install m2e? All this stuff is open source and part of Eclipse just
&gt; like JDT is. I don&apos;t want to waste time setting up fake classes that may or
&gt; may not exhibit the problem when the real ones are easily accessible.

I don&apos;t want to waste time setting up m2e. I&apos;ll see if other JDT/Core
committers can help with that suggestion.

Shankha, please try Doug&apos;s suggestion and if you are able to able to get
a test case for me as a plain Java project, I can fix this for M3.

&gt; We&apos;re happy to work against Mars and help test with nightly builds.

Thanks, BTW, M2 fixed a dozen or more code completion issues for Java 8
which are not yet on Luna SR maintenance builds.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2468364</commentid>
    <comment_count>17</comment_count>
    <who name="Doug Schaefer">dschaefer</who>
    <bug_when>2014-10-20 20:11:53 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #16)
&gt; (In reply to Doug Schaefer from comment #15)
&gt; I don&apos;t want to waste time setting up m2e. I&apos;ll see if other JDT/Core
&gt; committers can help with that suggestion.

That&apos;s too bad. It&apos;s a great opportunity to test JDT using the same environment your users are using.
 
&gt; Shankha, please try Doug&apos;s suggestion and if you are able to able to get
&gt; a test case for me as a plain Java project, I can fix this for M3.
&gt; 
&gt; &gt; We&apos;re happy to work against Mars and help test with nightly builds.
&gt; 
&gt; Thanks, BTW, M2 fixed a dozen or more code completion issues for Java 8
&gt; which are not yet on Luna SR maintenance builds.

I&apos;m on M2 now. I still see issues, including hangs. Certainly not as often but they do happen. I&apos;ve had to turn off code completion to work on the section of code similar to what I&apos;ve attached here. It&apos;s funny how you realize how much you rely on something once it&apos;s gone.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2468371</commentid>
    <comment_count>18</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-20 21:35:18 -0400</bug_when>
    <thetext>(In reply to Doug Schaefer from comment #17)

&gt; That&apos;s too bad. It&apos;s a great opportunity to test JDT using the same
&gt; environment your users are using.

Eclipse users are all over the plugin mapscape. A committer can&apos;t be installing
all the plugins and clutter up his/her desktop.

Note: I am not saying it is unreasonable to expect the project bug triaging
person to follow simple instructions to install some plugin if they are indeed simple steps to extract a test case. 

So let us wait for Shankha&apos;s help.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2468373</commentid>
    <comment_count>19</comment_count>
    <who name="Doug Schaefer">dschaefer</who>
    <bug_when>2014-10-20 21:45:18 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #18)
&gt; (In reply to Doug Schaefer from comment #17)
&gt; 
&gt; &gt; That&apos;s too bad. It&apos;s a great opportunity to test JDT using the same
&gt; &gt; environment your users are using.
&gt; 
&gt; Eclipse users are all over the plugin mapscape. A committer can&apos;t be
&gt; installing
&gt; all the plugins and clutter up his/her desktop.

Sure, but the 840,000 people that have downloaded the Luna SR-1 Eclipse IDE for Java have m2e. I expect a lot of them use it. And my biggest fear is that lots of them start running into this bug.

&gt; So let us wait for Shankha&apos;s help.

Agreed. :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2468663</commentid>
    <comment_count>20</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-10-21 08:39:33 -0400</bug_when>
    <thetext>Hi Doug,
I tried installing m2e on top of eclipse and then import a maven project.
It fails with error message [1].

1) Does the download from (https://www.eclipse.org/downloads/packages/eclipse-ide-java-developers/lunasr1) works as it is for Maven projects or one has to install anything else on top of that?

I tried out the following:


2) Luna SR 4.4.1 (http://download.eclipse.org/eclipse/downloads/index.html) +
Maven Integration For Eclipse (Luna) 1.5.0 (from Eclipse Market Place).


3) Luna SR 4.4.1 (http://download.eclipse.org/eclipse/downloads/index.html) +
  m2e - Maven Integration for Eclipse (includes Incubating components)	1.5.0.20140606-0033	org.eclipse.m2e.feature.feature.group	Eclipse.org - m2e 

form 

http://download.eclipse.org/technology/m2e/releases

4) Luna SR 4.4.1 (http://download.eclipse.org/eclipse/downloads/index.html) +
    m2e - Maven Integration for Eclipse (includes Incubating components)	1.5.0.20140606-0033 

from

Luna - http://download.eclipse.org/releases/luna

 
===
Error Message:

1. The selected wizard could not be started.
Plug-in org.eclipse.m2e.core.ui was unable to load class org.eclipse.m2e.core.ui.internal.wizards.MavenImportWizard.
An error occurred while automatically activating bundle org.eclipse.m2e.core.ui (300).

===

Thanks for your help.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2468669</commentid>
    <comment_count>21</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-21 08:45:29 -0400</bug_when>
    <thetext>To my knowledge, Shankha has spent several hours trying various builds and
options. At this point, we are going to need a fuller test case. Since you
have the dependencies set up already in your workspace, please provide an
attachment that we can simply import and observe the problem. TIA.

It does not have to be stubbed out with fake types/methods - it does not
even have to be minimal test case - we can reduce it - but that looks like
the best we can offer ATM.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2468701</commentid>
    <comment_count>22</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-10-21 09:26:37 -0400</bug_when>
    <thetext>I am able to see a NPE without m2e and maven stuff on 4.5 M2. 
I do not see a stack overflow.

I will post the example soon.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2468728</commentid>
    <comment_count>23</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-10-21 09:49:02 -0400</bug_when>
    <thetext>This is with latest tip code 4.5 M2.

Example:
// Stepper.java
===
public class Test {

	void test() {
		new Stepper&lt;Void&gt;(r -&gt; {
			if (r.failed()) {
				System.err.println(r.cause());
			} else {
				System.out.println(&quot;worked&quot;);
			}
		}) {
			private int foo;

			private void run() {
				run(
						() -&gt; step1(),
						() -&gt; step2()
						);
			}
			
			private void step1() {
				foo = 1;
				HttpClient client = VertxFactory.newVertx().createHttpClient();

// **********************************************************************
// PLEASE SEE HERE
// **********************************************************************
				client.request(&quot;PUT&quot;, &quot;/blah&quot;, response -&gt; {
					if (response.)  // [1] Content Assist after response.
				});
			}
		}.run();
	}
	
	void somethingElse() {
		
	}
	
}
===
//AsyncResult.java
public interface AsyncResult&lt;T&gt; {}

//Handler.java
public interface Handler&lt;E&gt; {
	void	handle(E event);
}

====

Stack Trace:
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.resolveTypesFor(SourceTypeBinding.java:1853)
	at org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.methods(SourceTypeBinding.java:1466)
	at org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.faultInTypesForFieldsAndMethods(SourceTypeBinding.java:854)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.buildAnonymousTypeBinding(ClassScope.java:112)
	at org.eclipse.jdt.internal.compiler.lookup.BlockScope.addAnonymousType(BlockScope.java:94)
	at org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression.resolveTypeForQualifiedAllocationExpression(QualifiedAllocationExpression.java:538)
	at org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression.resolveType(QualifiedAllocationExpression.java:283)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1020)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:620)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:306)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:530)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1207)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1320)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:590)
	at org.eclipse.jdt.internal.codeassist.CompletionEngine.complete(CompletionEngine.java:1920)
	at org.eclipse.jdt.internal.core.Openable.codeComplete(Openable.java:131)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:357)
	at org.eclipse.jdt.internal.core.CompilationUnit.codeComplete(CompilationUnit.java:345)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(JavaCompletionProposalComputer.java:244)
	at org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.computeCompletionProposals(JavaCompletionProposalComputer.java:206)
	at org.eclipse.jdt.internal.ui.text.java.JavaTypeCompletionProposalComputer.computeCompletionProposals(JavaTypeCompletionProposalComputer.java:63)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalComputerDescriptor.computeCompletionProposals(CompletionProposalComputerDescriptor.java:333)
	at org.eclipse.jdt.internal.ui.text.java.CompletionProposalCategory.computeCompletionProposals(CompletionProposalCategory.java:337)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.collectProposals(ContentAssistProcessor.java:325)
	at org.eclipse.jdt.internal.ui.text.java.ContentAssistProcessor.computeCompletionProposals(ContentAssistProcessor.java:282)
	at org.eclipse.jface.text.contentassist.ContentAssistant.computeCompletionProposals(ContentAssistant.java:1861)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.computeProposals(CompletionProposalPopup.java:573)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.access$16(CompletionProposalPopup.java:570)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup$2.run(CompletionProposalPopup.java:505)
	at org.eclipse.swt.custom.BusyIndicator.showWhile(BusyIndicator.java:70)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2468745</commentid>
    <comment_count>24</comment_count>
    <who name="Doug Schaefer">dschaefer</who>
    <bug_when>2014-10-21 10:12:53 -0400</bug_when>
    <thetext>I just tested importing this zip file and had no problems. I don&apos;t understand why you guys are.

I&apos;m starting with the most popular Eclipse package, the Eclipse IDE for Java, of which JDT is a fundamental part, that I downloaded from here: https://www.eclipse.org/downloads. I then Import..., General -&gt; Existing Projects into Workspace, selected the project2.zip file I attached here and imported the doug.test.java8 project.

The build then kicked off and all my dependencies were downloaded. They don&apos;t go into your workspace but in your local maven repository.

At any rate, if you guys can&apos;t figure out m2e, you could just download Vert.x from it&apos;s download site and add the jars to the project. http://vertx.io/downloads.html</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2468748</commentid>
    <comment_count>25</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-10-21 10:14:28 -0400</bug_when>
    <thetext>Sorry, did not post the complete example. This is a reduced example of the test 
case which Doug had posted (More Complete Example).
Ignore the test case part in Comment 23.

// AsyncResult.java 
public interface AsyncResult&lt;T&gt; {}

// Handler.java 
public interface Handler&lt;E&gt; {
	void	handle(E event);
} 

// Stepper.java
public class Stepper&lt;T&gt; {

	public interface Step&lt;T&gt; {
		void run();
	}

	
	private Step&lt;T&gt;[] steps;
	private int current;

	public Stepper(Handler&lt;AsyncResult&lt;T&gt;&gt; handler) {
		
	}

	@SafeVarargs
	public final void run(Step&lt;T&gt; ... steps) {
		this.steps = steps;
		steps[0].run();
	}

	public void next() {
		if (++current &gt;= steps.length) {
			error(&quot;No more steps&quot;);
		} else {
			try {
				steps[current].run();
			} catch (Throwable e) {
				error(e);
			}
		}
	}

	public void done(T result) {
		
	}

	public void error(String errorMessage) {
		
	}

	public void error(Throwable error) {
		
	}

}

// Test.java
public class Test {

	void test() {
		new Stepper&lt;Void&gt;(r -&gt; {
			if (r.failed()) {
				System.err.println(r.cause());
			} else {
				System.out.println(&quot;worked&quot;);
			}
		}) {
			private int foo;

			private void run() {
				run(
						() -&gt; step1(),
						() -&gt; step2()
						);
			}
			
// ******************************************************************

 PLEASE SEE HERE
// ******************************************************************
			private void step1() {
				foo = 1; // [1]
				HttpClient client = VertxFactory.newVertx().createHttpClient();
				client.request(&quot;PUT&quot;, &quot;/blah&quot;, response -&gt; {
					if (response.) // [2]
				});
			}
		}.run();
	}
	
	void somethingElse() {
		
	}
	
} 

================================

[1] Content assist on foo leads to StackOverflow on 4.4.1.
[2] Content assist on response. leads to NPE.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2468749</commentid>
    <comment_count>26</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-10-21 10:15:08 -0400</bug_when>
    <thetext>With 4.4.1 I see both the errors: stackoverflow and NPE.
Doug mentions as comments in the test case.

Location of StackOverflow:

Test.java:
Line No: 20
private void step1() {
foo = 1; // After foo Content assist



===
//  Stackoverflow

at org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse(MessageSend.java:1005)
	at org.eclipse.jdt.internal.compiler.ast.IfStatement.traverse(IfStatement.java:279)
	at org.eclipse.jdt.internal.compiler.ast.Block.traverse(Block.java:141)
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.traverse(LambdaExpression.java:645)
	at org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression.traverse(QualifiedAllocationExpression.java:600)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:347)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse(TypeDeclaration.java:1434)
	at org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression.traverse(QualifiedAllocationExpression.java:603)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:347)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse(TypeDeclaration.java:1434)
	at org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression.traverse(QualifiedAllocationExpression.java:603)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:347)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse(TypeDeclaration.java:1434)
	at org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression.traverse(QualifiedAllocationExpression.java:603)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:347)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse(TypeDeclaration.java:1434)
	at org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression.traverse(QualifiedAllocationExpression.java:603)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:347)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse(TypeDeclaration.java:1434)
	at org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression.traverse(QualifiedAllocationExpression.java:603)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:347)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse(TypeDeclaration.java:1434)
	at org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression.traverse(QualifiedAllocationExpression.java:603)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:347)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse(TypeDeclaration.java:1434)
	at org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression.traverse(QualifiedAllocationExpression.java:603)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.traverse(MethodDeclaration.java:347)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.traverse(TypeDeclaration.java:1434)
	at org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression.traverse(QualifiedAllocationExpression.java:603)

...  Continues.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2468776</commentid>
    <comment_count>27</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-21 10:43:15 -0400</bug_when>
    <thetext>(In reply to Doug Schaefer from comment #24)
&gt; I just tested importing this zip file and had no problems. I don&apos;t
&gt; understand why you guys are.

[...]

&gt; At any rate, if you guys can&apos;t figure out m2e, 

With all due respect, 

I am sorry to say that I find your attitude irksome. You can
try to helpful in the time you spew out patronizing verbiage.

That is blunt, I am sorry, I&apos;ll get back to trying to fix the
problem now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2468796</commentid>
    <comment_count>28</comment_count>
    <who name="Doug Schaefer">dschaefer</who>
    <bug_when>2014-10-21 11:11:56 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #27)
&gt; With all due respect, 
&gt; 
&gt; I am sorry to say that I find your attitude irksome. You can
&gt; try to helpful in the time you spew out patronizing verbiage.
&gt; 
&gt; That is blunt, I am sorry, I&apos;ll get back to trying to fix the
&gt; problem now.

Apologies. Certainly not personal. Just a bit frustrated and scared. This bug has pretty major implications on the Eclipse eco-system which has all of us in the community leadership on edge these days.

Thanks for your help and as soon as you have a fix, I&apos;ll be happy to test.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2468844</commentid>
    <comment_count>29</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-21 12:39:06 -0400</bug_when>
    <thetext>(In reply to shankha banerjee from comment #26)

Two points:

(1 

[...]

org.eclipse.jdt.internal.compiler.ast.MessageSend.traverse(MessageSend.java:
&gt; 1005)
&gt; 	at
&gt; org.eclipse.jdt.internal.compiler.ast.IfStatement.traverse(IfStatement.java:
&gt; 279)
&gt; 	at org.eclipse.jdt.internal.compiler.ast.Block.traverse(Block.java:141)
&gt; 	at
&gt; org.eclipse.jdt.internal.compiler.ast.LambdaExpression.
&gt; traverse(LambdaExpression.java:645)
&gt; 	at
&gt; org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression.

This is the same bug as https://bugs.eclipse.org/bugs/show_bug.cgi?id=438952
So is fixed.

However this is not the same stack as comment#0. Since comment#0 does
not specify what operation led to that stack overflow, it is hard to
know whether that problem is fixed or not.

(2) I can see the NPE with the code snippet you have provided, but that
is not enough to really solve and test whether code completion works
fine at response|

Without having at least a stubbed out version of HttpClient  class and its request method(s) the lambda cannot be resolved as we have no idea what
its functional interface target type is.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2468850</commentid>
    <comment_count>30</comment_count>
    <who name="Sebastian Zarnekow">Sebastian.Zarnekow</who>
    <bug_when>2014-10-21 12:43:03 -0400</bug_when>
    <thetext>HttpClient is here, but you probably know that already.
https://github.com/eclipse/vert.x/blob/master/vertx-core/src/main/java/io/vertx/core/http/HttpClient.java</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2469040</commentid>
    <comment_count>31</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-10-21 19:11:01 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #29)
&gt; 
&gt; (2) I can see the NPE with the code snippet you have provided, but that
&gt; is not enough to really solve and test whether code completion works
&gt; fine at response|
&gt; 
&gt; Without having at least a stubbed out version of HttpClient  class and its
&gt; request method(s) the lambda cannot be resolved as we have no idea what
&gt; its functional interface target type is.

I will try and get a test case with HttpClient included as part of the project.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2469087</commentid>
    <comment_count>32</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-10-22 01:40:37 -0400</bug_when>
    <thetext>Reduced test case for NPE:

// Test.java
class Stepper&lt;T&gt; {
	public interface Step&lt;T&gt; {
		void run();
	}
	public Stepper(Handler&lt;AsyncResult&lt;T&gt;&gt; handler) {}

	@SafeVarargs
	public final void run(Step&lt;T&gt; ... steps) {}
}

interface AsyncResult&lt;T&gt; {}

interface Handler&lt;E&gt; {
	void handle(E event);
}

class Z {
	void foo() {}
}

interface I {
	void foo(Z z);
}

class Y {
	void request(I i) {}
}

public class Test {
	void test() {
		new Stepper&lt;Void&gt;(r -&gt; {}) {
			private void step1() {
				Y y = new Y();
				y.request(response -&gt; {
					if (response.)
				});
			}
		}.run();		
	}	
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2469088</commentid>
    <comment_count>33</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-10-22 01:42:06 -0400</bug_when>
    <thetext>Things pending: 

1) Test case for the StackOverFlow mentioned in Comment 0.
2) Test case for the StackOverflow mentioned in Comment 26.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2469090</commentid>
    <comment_count>34</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-10-22 02:03:12 -0400</bug_when>
    <thetext>Although not very useful for the current bug, example test case for the StackOverFlow in Comment 26.

interface AsyncResult&lt;T&gt; {
	boolean failed();
}

interface Handler&lt;E&gt; {
	void	handle(E event);
}  

class Stepper&lt;T&gt; {
	public interface Step&lt;T&gt; {
		void run();
	}
	public Stepper(Handler&lt;AsyncResult&lt;T&gt;&gt; handler) {}
	@SafeVarargs
	public final void run(Step&lt;T&gt; ... steps) {}
	public void next() {}
	public void done(T result) {}
}

public class Test {
	void test() {
		new Stepper&lt;Void&gt;(r -&gt; {
			if (r.failed())
				System.err.println();
		}) {
			private int foo;
			private void step1() {
//***
				foo = 1;  // Code complete after foo
//***
			}
		}.run();
	}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2469094</commentid>
    <comment_count>35</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-10-22 02:19:56 -0400</bug_when>
    <thetext>(In reply to shankha banerjee from comment #34)
The StackOverFlow happens only with 4.4.1 and not with 4.5M2.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2469706</commentid>
    <comment_count>36</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-10-22 09:32:39 -0400</bug_when>
    <thetext>Okay. I was able to run the project (More Complete Example) on 4.4.1 (Base SR1 + Maven Plugins installed on top of that) and the eclipse Java IDE downloaded from https://www.eclipse.org/downloads as mentioned in Comment 24.

The StackOverFlow is what I saw in Comment 26 and the one in Comment 0.

Just to repeat we do not see the StackOverFlow on 4.5 M2. Please see Comment 29.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2469732</commentid>
    <comment_count>37</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-22 09:41:18 -0400</bug_when>
    <thetext>(In reply to shankha banerjee from comment #36)
&gt; Okay. I was able to run the project (More Complete Example) on 4.4.1 (Base
&gt; SR1 + Maven Plugins installed on top of that) and the eclipse Java IDE
&gt; downloaded from https://www.eclipse.org/downloads as mentioned in Comment 24.
&gt; 
&gt; The StackOverFlow is what I saw in Comment 26 and the one in Comment 0.
&gt; 
&gt; Just to repeat we do not see the StackOverFlow on 4.5 M2. Please see Comment
&gt; 29.

So what operation did you have to do to trigger the stack trace from comment#0?

It is great that you have the full set up. I nearly have a fix for the 
completion failure for the comment#32 case.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2469735</commentid>
    <comment_count>38</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-10-22 09:49:09 -0400</bug_when>
    <thetext>(In reply to shankha banerjee from comment #36)
&gt; The StackOverFlow is what I saw in Comment 26 and the one in Comment 0.
&gt; 

I meant not the one in Comment 0.

(In reply to Srikanth Sankaran from comment #37)
&gt; So what operation did you have to do to trigger the stack trace from
&gt; comment#0?

Sorry for the confusion.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2470429</commentid>
    <comment_count>39</comment_count>
      <attachid>248125</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-23 08:12:44 -0400</bug_when>
    <thetext>Created attachment 248125
Patch under consideration.

Completion works fine with this patch on top of master. 

Shankha, could you please test against the real/full test case ? Please
also verify that code selection (hover or ctrl+click or F3) works alright.
TIA.

Completion tests are all green, I am running all tests now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2470431</commentid>
    <comment_count>40</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-23 08:15:08 -0400</bug_when>
    <thetext>Basically due to bad interaction between anonymous class recovery and
lambda recovery, we end up with a totally incorrect parse tree. 

Now for the test case in comment#32, the recovered parse tree looks
clean: 

interface I {
  void foo(X x);
}
public class X {
  static X xField;
  public X() {
  }
  &lt;clinit&gt;() {
  }
  static X goo(String s) {
  }
  static void goo(I i) {
  }
  public static void main(String[] args) {
    X xLocal;
    {
      {
        goo((&lt;no type&gt; xyz) -&gt; {
  X xLambdaLocal;
  System.out.println(&lt;CompleteOnName:xyz.&gt;);
});
      }
    }
  }
};</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2470447</commentid>
    <comment_count>41</comment_count>
    <who name="Doug Schaefer">dschaefer</who>
    <bug_when>2014-10-23 08:51:41 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #40)
&gt; Basically due to bad interaction between anonymous class recovery and
&gt; lambda recovery, we end up with a totally incorrect parse tree. 

Cool. Yes, it was definitely the combination of anonymous classes and lambdas that triggered this. It&apos;s also what makes Java 8 so much nicer to use for async programming with Vert.x. Thanks!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2470459</commentid>
    <comment_count>42</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-10-23 09:04:07 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #39)
&gt; Created attachment 248125 [details]
&gt; Patch under consideration.

Patch is good for both the projects: (1) Reproducible project (2) More complete example.

No NPE or StackOverFlow for both the projects.
Content Assist also produces the correct results for both locations mentioned in project 2 and the location mentioned in project 1.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2470461</commentid>
    <comment_count>43</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-23 09:07:20 -0400</bug_when>
    <thetext>(In reply to shankha banerjee from comment #42)
&gt; (In reply to Srikanth Sankaran from comment #39)
&gt; &gt; Created attachment 248125 [details]
&gt; &gt; Patch under consideration.
&gt; 
&gt; Patch is good for both the projects: (1) Reproducible project (2) More
&gt; complete example.
&gt; 
&gt; No NPE or StackOverFlow for both the projects.
&gt; Content Assist also produces the correct results for both locations
&gt; mentioned in project 2 and the location mentioned in project 1.

Thanks for confirming Shankha, I am seeing about 9 tests failing when running
all tests - looking into it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2470464</commentid>
    <comment_count>44</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-10-23 09:15:28 -0400</bug_when>
    <thetext>Code selection (hover, ctrl+click, F3) works fine on both the projects.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2470486</commentid>
    <comment_count>45</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-23 09:37:35 -0400</bug_when>
    <thetext>(In reply to shankha banerjee from comment #44)
&gt; Code selection (hover, ctrl+click, F3) works fine on both the projects.

Great, thanks, fix and tests released here for Luna M3: 
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=e060e0428f7f92647e77ad8da2c7818eb4c4e3a7

(the 9 failures were all due to the same one line inadvertent and incorrect
non-essential change)

I&apos;ll leave this bug and https://bugs.eclipse.org/bugs/show_bug.cgi?id=446773
open until it is verified at reporter end. 

Doug, please grab the next nightly build and give it a spin. TIA. If you are
in too much of a hurry, you can set up a JDT/core workspace and apply the
patch and try :)

(BTW, code completion with lambdas has some unsolvable problems. If a lambda
is an argument to a generic method call, some times it is impossible to
provide completion proposals as there could be a chicken and egg situation
that is not resolvable readily. Lambda result expressions + body influence type inference and the inferred method influences the elided lambda&apos;s 
argument types.)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2470489</commentid>
    <comment_count>46</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-23 09:39:12 -0400</bug_when>
    <thetext>(In reply to Sebastian Zarnekow from comment #30)
&gt; HttpClient is here, but you probably know that already.
&gt; https://github.com/eclipse/vert.x/blob/master/vertx-core/src/main/java/io/
&gt; vertx/core/http/HttpClient.java

Thanks Sebastian !</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2470522</commentid>
    <comment_count>47</comment_count>
    <who name="Doug Schaefer">dschaefer</who>
    <bug_when>2014-10-23 10:24:54 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #45)
&gt; Doug, please grab the next nightly build and give it a spin. TIA. If you are
&gt; in too much of a hurry, you can set up a JDT/core workspace and apply the
&gt; patch and try :)

Cool. I&apos;ll get that going now and let you know.

&gt; (BTW, code completion with lambdas has some unsolvable problems. If a lambda
&gt; is an argument to a generic method call, some times it is impossible to
&gt; provide completion proposals as there could be a chicken and egg situation
&gt; that is not resolvable readily. Lambda result expressions + body influence
&gt; type inference and the inferred method influences the elided lambda&apos;s 
&gt; argument types.)

I think I&apos;m OK with that. If I see any where I&apos;m sure it could be figured out, I&apos;ll raise bugs. But there certainly are cases where you can&apos;t.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2470566</commentid>
    <comment_count>48</comment_count>
    <who name="Doug Schaefer">dschaefer</who>
    <bug_when>2014-10-23 11:21:45 -0400</bug_when>
    <thetext>Excellent! I no longer get the exception and get good completions on most of the things in the methods in the anonymous class.

I think there is a place where I should be getting content assist but I&apos;m not. In the call to the constructor for Stepper in my Test class, I pass in a lambda that takes an argument &apos;r&apos;. The only valid argument is AsyncResult&lt;T&gt; so I was expecting things like r.fail to complete to r.failed(). Do you guys see that too?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2470568</commentid>
    <comment_count>49</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-10-23 11:29:01 -0400</bug_when>
    <thetext>(In reply to Doug Schaefer from comment #48)
&gt; In the call to the constructor for Stepper in my Test class, I pass in
&gt; a lambda that takes an argument &apos;r&apos;. The only valid argument is
&gt; AsyncResult&lt;T&gt; so I was expecting things like r.fail to complete to
&gt; r.failed(). Do you guys see that too?

Yes I don&apos;t see any code completion after r.fail or even for r.  .

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2470583</commentid>
    <comment_count>50</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-23 11:41:05 -0400</bug_when>
    <thetext>(In reply to shankha banerjee from comment #49)
&gt; (In reply to Doug Schaefer from comment #48)
&gt; &gt; In the call to the constructor for Stepper in my Test class, I pass in
&gt; &gt; a lambda that takes an argument &apos;r&apos;. The only valid argument is
&gt; &gt; AsyncResult&lt;T&gt; so I was expecting things like r.fail to complete to
&gt; &gt; r.failed(). Do you guys see that too?
&gt; 
&gt; Yes I don&apos;t see any code completion after r.fail or even for r.  .

We have several open bugs in completion in anonymous classes.
In particular, I think this is likely the same as https://bugs.eclipse.org/bugs/show_bug.cgi?id=336620

Also see 

https://bugs.eclipse.org/bugs/show_bug.cgi?id=395604
https://bugs.eclipse.org/bugs/show_bug.cgi?id=413094
https://bugs.eclipse.org/bugs/show_bug.cgi?id=291040
https://bugs.eclipse.org/bugs/show_bug.cgi?id=367612
https://bugs.eclipse.org/bugs/show_bug.cgi?id=369353
https://bugs.eclipse.org/bugs/show_bug.cgi?id=246550

So, I&apos;ll add this snippet to the most relevant bug from the above as an
additional test case.

(There has been no owner for code assist for many months now, I am a
compiler expert who dived in to add support for code completion for
lambdas and method references for Java 8 as otherwise the IDE would
have been unusable, but I have very little time for code assist issues
other than if we hang, crash, burn, format user&apos;s hard disk ... etc)

Thanks for confirming the fix Doug.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2470591</commentid>
    <comment_count>51</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-10-23 11:51:11 -0400</bug_when>
    <thetext>Hi Doug,
You mentioned in Comment 7 about a StackOverFlow. 
Could you please confirm that also goes away with the Patch.

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2470725</commentid>
    <comment_count>52</comment_count>
    <who name="Doug Schaefer">dschaefer</who>
    <bug_when>2014-10-23 15:32:23 -0400</bug_when>
    <thetext>(In reply to shankha banerjee from comment #51)
&gt; Hi Doug,
&gt; You mentioned in Comment 7 about a StackOverFlow. 
&gt; Could you please confirm that also goes away with the Patch.
&gt; 
&gt; Thanks

I don&apos;t see any errors. As expected the one fix seems to have fixed both problems. Thanks!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2470729</commentid>
    <comment_count>53</comment_count>
    <who name="Doug Schaefer">dschaefer</who>
    <bug_when>2014-10-23 15:38:04 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #50)
&gt; (In reply to shankha banerjee from comment #49)
&gt; &gt; (In reply to Doug Schaefer from comment #48)
&gt; &gt; &gt; In the call to the constructor for Stepper in my Test class, I pass in
&gt; &gt; &gt; a lambda that takes an argument &apos;r&apos;. The only valid argument is
&gt; &gt; &gt; AsyncResult&lt;T&gt; so I was expecting things like r.fail to complete to
&gt; &gt; &gt; r.failed(). Do you guys see that too?
&gt; &gt; 
&gt; &gt; Yes I don&apos;t see any code completion after r.fail or even for r.  .
&gt; 
&gt; We have several open bugs in completion in anonymous classes.
&gt; In particular, I think this is likely the same as
&gt; https://bugs.eclipse.org/bugs/show_bug.cgi?id=336620
&gt;
&gt; Thanks for confirming the fix Doug.

OK, I&apos;ll follow the other bug for the content assist issue.

Aside from that, everything looks good. I&apos;ll start using the new nightly build and then M3 in production and see if I see anything else. Thanks for all your great help and the speed at which you fixed this!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472133</commentid>
    <comment_count>54</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-10-27 02:39:25 -0400</bug_when>
    <thetext>+1 for 4.4.2. Reopening.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2473187</commentid>
    <comment_count>55</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-10-29 01:15:12 -0400</bug_when>
    <thetext>I am marking it verified for 4.5 M3.
Verified for 4.5 M3 using  I20141027-2000 build.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2477781</commentid>
    <comment_count>56</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-06 05:33:35 -0500</bug_when>
    <thetext>This fix will take a while to be backported to 4.4.2 since we (almost) finished
backporting fixes upto 4.5 M2 just now and would like to wait for field
testing worth several weeks for changes made to M3 before considering them
for 4.4.2.

Reverting the status to RESOLVED for 4.5 M3 with whiteboard set to
4.4.2 candidate - this can be reopened just in time during the next
wave of backports.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2477783</commentid>
    <comment_count>57</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-06 05:34:20 -0500</bug_when>
    <thetext>Per comment#53 verified for 4.5 M3.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2487964</commentid>
    <comment_count>58</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-11-24 05:15:59 -0500</bug_when>
    <thetext>I am not yet sure, but this is going go need Bug 435219, Bug 435682 and Bug 430667 back ported too as I see too much dependency going on between them. We&apos;ll see.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2488523</commentid>
    <comment_count>59</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-11-24 23:47:00 -0500</bug_when>
    <thetext>Back ported to 4.4.2 via commits:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=R4_4_maintenance&amp;id=a680ca60d16731e2dde37a727a8e79193a2c6f03

and 

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=R4_4_maintenance&amp;id=d042fe9255d43d4c622c9c687e766081bab98ab9</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2508212</commentid>
    <comment_count>60</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2015-01-21 00:35:59 -0500</bug_when>
    <thetext>Verified for 442 using build M-4.4.2RC1-201501141500</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>247946</attachid>
            <date>2014-10-16 14:06:00 -0400</date>
            <delta_ts>2014-10-16 14:06:25 -0400</delta_ts>
            <desc>Reproducable project</desc>
            <filename>project.zip</filename>
            <type>application/zip</type>
            <size>10440</size>
            <attacher name="Doug Schaefer">dschaefer</attacher>
            
              <data encoding="base64">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
AAAAAAAAAAAAAAAAGQAcAGRvdWcudGVzdC5qYXZhOC9zcmMvbWFpbi9VVAkAAy4BQFRjCEBUdXgL
AAEE+AEAAAQUAAAAUEsDBAoAAAAAACZtUEUAAAAAAAAAAAAAAAAeABwAZG91Zy50ZXN0LmphdmE4
L3NyYy9tYWluL2phdmEvVVQJAAM3A0BUYwhAVHV4CwABBPgBAAAEFAAAAFBLAwQKAAAAAAAmbVBF
AAAAAAAAAAAAAAAAIwAcAGRvdWcudGVzdC5qYXZhOC9zcmMvbWFpbi9qYXZhL2RvdWcvVVQJAAM3
A0BUYwhAVHV4CwABBPgBAAAEFAAAAFBLAwQKAAAAAAAmbVBFAAAAAAAAAAAAAAAAKAAcAGRvdWcu
dGVzdC5qYXZhOC9zcmMvbWFpbi9qYXZhL2RvdWcvdGVzdC9VVAkAAzcDQFRjCEBUdXgLAAEE+AEA
AAQUAAAAUEsDBAoAAAAAADVvUEUAAAAAAAAAAAAAAAAuABwAZG91Zy50ZXN0LmphdmE4L3NyYy9t
YWluL2phdmEvZG91Zy90ZXN0L2phdmE4L1VUCQADFQdAVGMIQFR1eAsAAQT4AQAABBQAAABQSwME
FAAAAAgA4G5QRVBqz2QhAQAAKAMAADkAHABkb3VnLnRlc3QuamF2YTgvc3JjL21haW4vamF2YS9k
b3VnL3Rlc3QvamF2YTgvUmVzdWx0LmphdmFVVAkAA3QGQFT/BkBUdXgLAAEE+AEAAAQUAAAAlZLB
TsMwDIbP7VOYWyehnJEGCA5cAaG9QJq6XSBLKifphlDfnXRpt3bthLj+9v/5t5Oaiy9eIRTGV8yh
deyTN/xunaZyVxtyYKhiDZI7HAtMGEL2bL+1+EDrlQuNtc+VFCAUtxaier95hOBXuEPtLIz6u8pP
miY1yYY7hFJqrmAD1NMuC1sye54rBCQytO6ccVzEZYNzFahJ4rbSsijAw5kZ9SMhyNorFcR2zpoO
i0hZQtY7ozXKARmaQeMeXoP4bqR2SC8HgbWTRmerbmw7i9TPngbqV1tK1O9we3mIf6x7nb4EWQw4
utjTW/gMJAs8wYaMPY7QedLnMFdMp3UE9xan3nHiuTU3RiHXYL0QiAUWC+bhrf6ElFyqZcLNmNCm
v1BLAwQUAAAACADDblBFX8HXeXIBAACLAwAAOgAcAGRvdWcudGVzdC5qYXZhOC9zcmMvbWFpbi9q
YXZhL2RvdWcvdGVzdC9qYXZhOC9TdGVwcGVyLmphdmFVVAkAAz4GQFQBB0BUdXgLAAEE+AEAAAQU
AAAAjZIxb8IwEIXn5FecmIyQrI6VoKjdurRDQV0QgzGXxK2xo7MTQBX/vUls0lBVlCGSL/f8vXeX
lEJ+ihxha6uce3Sef4ha3E/TVO1KSx4s5bxG8oeuwaUl5E/uaOQbukr76TXdszBbjdTAymqjlQSp
hXOw8FiWSLPlHL7SNIk9ZTxSJiR2/dBMktqqLVBl2HiaJqdWTaoWHiFTRmiIDrNBoubmHIqzc6+P
0NUaXHNyg05jDLIiQtNM08eJIdk/DuMupS+U4/ENPAzc28SPC5HhuyBBuevxIX4/3XlkznnIN+B2
dUM95066w+puzS/2Ergd0eDBs0BQGbDJJI4H80jhGk3uiyBJkMgSG71a2DVfLShGLTc5AWqHQeXp
GA7RPzJ/UrRyKbwsgC0Lsnux0QgYPaIJRmHaPb9zb61BtgTqthwuxlXG5TKDe+g/AovCv1YQ7Bae
lMlD8YLONX/6Ddi26idgF5eveA1mbusbfIIuEk/pN1BLAwQUAAAACABScFBF903vuPEAAADUAQAA
NwAcAGRvdWcudGVzdC5qYXZhOC9zcmMvbWFpbi9qYXZhL2RvdWcvdGVzdC9qYXZhOC9UZXN0Lmph
dmFVVAkAAzsIQFQ8CEBUdXgLAAEE+AEAAAQUAAAAfZDbTgMhEIav4SkmewVRaeyVSWtfosZ7ZGcr
FoFw2MaYfXdnV9SaJr0hc/j4Z/6J2hz1AaEP9aAK5qLe9KgfNpzH+uKsAeN0zvBEHfjknI3B9jBz
QlLOmMcT7AvGiGn7TL2dSHC3W1rMDiCSGrR12Av5zTO2/8gF3xWmpGKyvjhPkNE1IzGbGZkAXcb/
eKjlF+9OIR2x7xpNz9TEiRh1QSAOhhDIxVlxWT1VL342meMlYIxqtDVNivdC3l4U10K22t9MdqHd
vjf1IcBqBSb4grQNHdHSCV8x4XWBtZBXnJMpeIQObmZ7Z/7V4ovyiU/8C1BLAwQKAAAAAAAPbFBF
AAAAAAAAAAAAAAAAIwAcAGRvdWcudGVzdC5qYXZhOC9zcmMvbWFpbi9yZXNvdXJjZXMvVVQJAAMu
AUBUYwhAVHV4CwABBPgBAAAEFAAAAFBLAwQKAAAAAAAPbFBFAAAAAAAAAAAAAAAAGQAcAGRvdWcu
dGVzdC5qYXZhOC9zcmMvdGVzdC9VVAkAAy4BQFRjCEBUdXgLAAEE+AEAAAQUAAAAUEsDBAoAAAAA
AA9sUEUAAAAAAAAAAAAAAAAeABwAZG91Zy50ZXN0LmphdmE4L3NyYy90ZXN0L2phdmEvVVQJAAMu
AUBUYwhAVHV4CwABBPgBAAAEFAAAAFBLAwQKAAAAAAAPbFBFAAAAAAAAAAAAAAAAIwAcAGRvdWcu
dGVzdC5qYXZhOC9zcmMvdGVzdC9yZXNvdXJjZXMvVVQJAAMuAUBUYwhAVHV4CwABBPgBAAAEFAAA
AFBLAwQKAAAAAAATbFBFAAAAAAAAAAAAAAAAFwAcAGRvdWcudGVzdC5qYXZhOC90YXJnZXQvVVQJ
AAM1AUBUYwhAVHV4CwABBPgBAAAEFAAAAFBLAwQKAAAAAAAob1BFAAAAAAAAAAAAAAAAHwAcAGRv
dWcudGVzdC5qYXZhOC90YXJnZXQvY2xhc3Nlcy9VVAkAA/wGQFRjCEBUdXgLAAEE+AEAAAQUAAAA
UEsDBAoAAAAAAChvUEUAAAAAAAAAAAAAAAAkABwAZG91Zy50ZXN0LmphdmE4L3RhcmdldC9jbGFz
c2VzL2RvdWcvVVQJAAP8BkBUYwhAVHV4CwABBPgBAAAEFAAAAFBLAwQKAAAAAAAob1BFAAAAAAAA
AAAAAAAAKQAcAGRvdWcudGVzdC5qYXZhOC90YXJnZXQvY2xhc3Nlcy9kb3VnL3Rlc3QvVVQJAAP8
BkBUYwhAVHV4CwABBPgBAAAEFAAAAFBLAwQKAAAAAABScFBFAAAAAAAAAAAAAAAALwAcAGRvdWcu
dGVzdC5qYXZhOC90YXJnZXQvY2xhc3Nlcy9kb3VnL3Rlc3QvamF2YTgvVVQJAAM8CEBUYwhAVHV4
CwABBPgBAAAEFAAAAFBLAwQUAAAACAAob1BFpPQBENsCAACrBgAAOwAcAGRvdWcudGVzdC5qYXZh
OC90YXJnZXQvY2xhc3Nlcy9kb3VnL3Rlc3QvamF2YTgvUmVzdWx0LmNsYXNzVVQJAAP8BkBU/AZA
VHV4CwABBPgBAAAEFAAAAJVU204TURRdp7ehNy5tKUgpBfEyLZdR44NRQkKMPiESaWr0bZgey0Dt
kOkMwi/4LTxoIiHRRN8k8aPUfc6MY0unQR96Zs/eZ6+1ztpn+uPn568A7uOugghDsWm5Lc3hXUfb
14/0B9oL3nXbjoIYw7jIaG2909Ke7+5zg7IJhoplt7QjbjvHskMzLJtrG92TjuG1MiRsP8htXkZ4
xJDcMVsd3XFtzhCt1ykT57Zt2QyTPdvre7b1Tt9tc6on1syO6azTBnUQsNqgDSrhiCD22GryFKLI
ZZBFngjUaiMJ6sxAwYiIpjJII8Mwtml2+Jb7dpfbdcEj1FqG3m7otine/WTM2TO7DNOb4T6RumJ/
28nhn9bykJ41ErtOjdNq6HmrDQXzDHN/a1tuu71tmR2H20+ODX7omFYnhQpyDNkdRzcOnumHklPB
DYZ8CChDLcS6IfQMJeHn0GpBrYbNNa5WvWkautslxqm+bb3zTHZdw+C8yZtyQK9pgG90sy1eUzuW
axv8qSk0pz2/VgUKw9Za/eEg73rIsa64oJ7/WKDLEKVfHBHkxO2gOElfRgQpeqc7QrHIZTFKOa8y
hnF6HlAUoedY7RwTtaUzFGrsDMWPlIpimtYcYrSmaE1TY4YAsrhGmaLXhhmUABl5tLN9tXJQS1FN
CJijVRC/94lLgnjpAukvqLw6x8I3wV8QSqSImBQxg4SEiVHrCCZozWMSBcpP9ogpBWJK8syeGPH0
akLMdYnDfhFERAFTsEgJoetmYMwtqc+lKNpvzHKIMVNSYZJUjBKD0DLvtQ0YIyKhKnKlRXnfope0
hwUS2LDZzNJaJglzJKEiJWR8Ok/CbF+mLM+r4HZwXlWSbUhyIF77hMKHgCIhk4s9sPEB2HgAW0XN
194LV7wMp/4j3BKWfbhtHy4t4C4Qj51GT4Pb4YGu9ICmB0DTPfOnL0X8e66Eo38PRb/3f+gRrEpv
Nd/jO78BUEsDBBQAAAAIAChvUEXCw23JuAAAAAoBAABBABwAZG91Zy50ZXN0LmphdmE4L3Rhcmdl
dC9jbGFzc2VzL2RvdWcvdGVzdC9qYXZhOC9TdGVwcGVyJFN0ZXAuY2xhc3NVVAkAA/wGQFQlCEBU
dXgLAAEE+AEAAAQUAAAAdU67CsJAEJzVmJj47GwsLWLjNRaiYiMIgmARsT/1CAnhEi4XP87CD/Cj
xDuxUtxiZpjdWebxvN0BTNHzUCMML3kVMy1KzVJ+5TMWaVEUQo0se3AIfeuzjMuY7U+pOGtCXVXS
YDg+EoIor9RZbJJMENqf9MRmCH6UxJLrSplVuDzMd9+vFqtfy3zZSinUOuNlKUoPHcLgT0uCY5VL
MHVgh0zjBlyj6vAM1tCE/+YALcMB7G0bXdd/AVBLAwQUAAAACAAob1BFHTpolskDAABDCAAAPAAc
AGRvdWcudGVzdC5qYXZhOC90YXJnZXQvY2xhc3Nlcy9kb3VnL3Rlc3QvamF2YTgvU3RlcHBlci5j
bGFzc1VUCQAD/AZAVCUIQFR1eAsAAQT4AQAABBQAAACNVO1SE1cYfg4JhIQ1YpCPSESkVPKhLNW0
tZDSItWCDagkw4ytP7qEY1gbdpndjdXL6CX0l/3rjJaxzngBXlSnz9ndxARD7GROzjn7vud9Ps67
+/7ff94BKKISw4DA5L7drOuedD39ifHUuKlXPHl0JJ0YogKj6pHeMKy6fm/viax5ArEDw9pvSEfg
Ytl26vpT6XjP/KN6zXakvhGEVwTiFbNuGV7TkQK3++WWegbX3OdWbUe6zYZXqlZXVvkTGHTJzhW4
9Ev5FN7zambmfP+MoCTl1JqOIy0KE5sCQyXTMr1VgdlsX3G5XYGNvin/W5MqFV2392UCEYxpSOK8
QCSb241DYELDIIYEzpZNS243D/ekUzX2GjQ0VbZrRmPXcEy1Dx9GvQOT5qRPU069E93nnh+1zs6c
dqjlVMRpWgJz2U84r/QsfCIpKKky0ztNyzMP5a7pmqSxZlm2Z3imbVHGZPlD91WMx5KkDafurihj
PtMQR2IEn2MhhisCmX5wGi4qU6OWfOapw3kNGs4M46rAmW179pA3M+v3VYLBRQ06lthp0nFsdvl4
tpOG55hWncxV5nWVeUNgqjOjeuDYvytHmRTDlwJjPWJsNo7xnsfIqeIZtd+2jKPWre7bljxBJHgb
fQuHsnRTgX3L2z1pQ9BrCZTwnWqt5RGsYT2GWwLTfZpXww9YZuXgVefC8cuorvuIAhuD+Al+TzYV
wpLC+kmt6Izme7glXdeoy+7ToZMCiYrddGryjqmAtPDaFlWiQLZUXf4YcbUXCW3TsqSz3jBcV7J3
oqoQLvOWIvzWRZBS7xF3Me4GMMzB9mnvRzjYEVyrnCTOch9ERnGO8x5XA5wT+WOk8oXXGH/pV53k
f9JHGEWUmXHiTHE3EWQjjQuAvwrQp7timXZsmLE/2KQzrBXgXsJsyOYyZ8XhUcghqfDnCpHrbzAv
cJLHBKtNUslUB49km0cyVK14aJyDmOJBr3Ge/wrpL1ZS54r5h6+Qi/7682vk8q8w9+5PaPlU4W9c
e4EL6gFHLqDxAvFynpEvXrJGBnlcYz9EfV4zvqJpjPF5mhoz1JanukUqu4H5Dp7FkOciNXyFr7t4
FkOeNzmGEcncj6E4yMg3WG7f1YrP/jFxVbUU2Y2/Relh4Rirb/D9QIdXCT9jgfnZDvxU26cUbuNO
132l2velYj8yJtRnInSsxptSWekW5lsUFe7GMe72hC4Q9moHdLoNnUYZW13S0+0r4tcmBHzUQ2Rv
JJ35S6eI1E+Y3BIZwbZv6L3Q2Pt44NcT/NwK7AzF/wNQSwMEFAAAAAgAUnBQRUEL1CZlAQAAPAIA
ADkAHABkb3VnLnRlc3QuamF2YTgvdGFyZ2V0L2NsYXNzZXMvZG91Zy90ZXN0L2phdmE4L1Rlc3Qu
Y2xhc3NVVAkAAzwIQFQ8CEBUdXgLAAEE+AEAAAQUAAAAdZFNTwIxEIanfFNREEE8Vk5ojHvhYMR4
8Ou00QNI4rEsDRa7LekWoj/JoycSTfTujzK2K4gY3cNMp/POs7Pvvn88vwJAE7aykEBQ6avxwDMs
Mt6QTuiB17HHLKQQlFztCSoH3lVvyAKDIHPEJTfHCJKNnS6C1KnqMwxJyBcgDRkERZ9LdjkOe0x3
aE8wBGVfBVR0qeaunl2mzC2PEGz6f7275frxDiULXOxwrrXSOSgjeLyWmkVKTFifBCoccUENV5KM
tLL4MDokON9+kIbeE+aG9giXEdOG1Od7nLFAUE2N0lGdGBVTBDOMLG07V1n2f8DW8viJUMFd21DD
QiZNhDEUoeK8qSKoNvzFx7SN5nLQcibithrrgF1w50zeObDvdLAN1mZwT8KerL02Zm3l2YxsTu9O
IfcUt7GNmfgyCSs2Fr4ENq/GgLXv4aZVuB5+geJNeX0KG2+/CLUfBDwj2F8Vq2qfUEsDBAoAAAAA
ABNsUEUAAAAAAAAAAAAAAAAkABwAZG91Zy50ZXN0LmphdmE4L3RhcmdldC90ZXN0LWNsYXNzZXMv
VVQJAAM1AUBUYwhAVHV4CwABBPgBAAAEFAAAAFBLAQIeAwoAAAAAABZsUEUAAAAAAAAAAAAAAAAQ
ABgAAAAAAAAAEADtQQAAAABkb3VnLnRlc3QuamF2YTgvVVQFAAM7AUBUdXgLAAEE+AEAAAQUAAAA
UEsBAh4DFAAAAAgAKG9QRavywVBLAQAAdQUAABoAGAAAAAAAAQAAAKSBSgAAAGRvdWcudGVzdC5q
YXZhOC8uY2xhc3NwYXRoVVQFAAP7BkBUdXgLAAEE+AEAAAQUAAAAUEsBAh4DFAAAAAgAEmxQRYqB
5RHYAAAAIAIAABgAGAAAAAAAAQAAAKSB6QEAAGRvdWcudGVzdC5qYXZhOC8ucHJvamVjdFVUBQAD
NAFAVHV4CwABBPgBAAAEFAAAAFBLAQIeAwoAAAAAABNsUEUAAAAAAAAAAAAAAAAaABgAAAAAAAAA
EADtQRMDAABkb3VnLnRlc3QuamF2YTgvLnNldHRpbmdzL1VUBQADNgFAVHV4CwABBPgBAAAEFAAA
AFBLAQIeAxQAAAAIAChvUEVjOke6cgAAAO4AAAA0ABgAAAAAAAEAAACkgWcDAABkb3VnLnRlc3Qu
amF2YTgvLnNldHRpbmdzL29yZy5lY2xpcHNlLmpkdC5jb3JlLnByZWZzVVQFAAP7BkBUdXgLAAEE
+AEAAAQUAAAAUEsBAh4DFAAAAAgAD2xQRWOYLItIAAAAVgAAADQAGAAAAAAAAQAAAKSBRwQAAGRv
dWcudGVzdC5qYXZhOC8uc2V0dGluZ3Mvb3JnLmVjbGlwc2UubTJlLmNvcmUucHJlZnNVVAUAAy4B
QFR1eAsAAQT4AQAABBQAAABQSwECHgMUAAAACAAib1BF3o1yOHYBAACmAwAAFwAYAAAAAAABAAAA
pIH9BAAAZG91Zy50ZXN0LmphdmE4L3BvbS54bWxVVAUAA+8GQFR1eAsAAQT4AQAABBQAAABQSwEC
HgMKAAAAAAAPbFBFAAAAAAAAAAAAAAAAFAAYAAAAAAAAABAA7UHEBgAAZG91Zy50ZXN0LmphdmE4
L3NyYy9VVAUAAy4BQFR1eAsAAQT4AQAABBQAAABQSwECHgMKAAAAAAAPbFBFAAAAAAAAAAAAAAAA
GQAYAAAAAAAAABAA7UESBwAAZG91Zy50ZXN0LmphdmE4L3NyYy9tYWluL1VUBQADLgFAVHV4CwAB
BPgBAAAEFAAAAFBLAQIeAwoAAAAAACZtUEUAAAAAAAAAAAAAAAAeABgAAAAAAAAAEADtQWUHAABk
b3VnLnRlc3QuamF2YTgvc3JjL21haW4vamF2YS9VVAUAAzcDQFR1eAsAAQT4AQAABBQAAABQSwEC
HgMKAAAAAAAmbVBFAAAAAAAAAAAAAAAAIwAYAAAAAAAAABAA7UG9BwAAZG91Zy50ZXN0LmphdmE4
L3NyYy9tYWluL2phdmEvZG91Zy9VVAUAAzcDQFR1eAsAAQT4AQAABBQAAABQSwECHgMKAAAAAAAm
bVBFAAAAAAAAAAAAAAAAKAAYAAAAAAAAABAA7UEaCAAAZG91Zy50ZXN0LmphdmE4L3NyYy9tYWlu
L2phdmEvZG91Zy90ZXN0L1VUBQADNwNAVHV4CwABBPgBAAAEFAAAAFBLAQIeAwoAAAAAADVvUEUA
AAAAAAAAAAAAAAAuABgAAAAAAAAAEADtQXwIAABkb3VnLnRlc3QuamF2YTgvc3JjL21haW4vamF2
YS9kb3VnL3Rlc3QvamF2YTgvVVQFAAMVB0BUdXgLAAEE+AEAAAQUAAAAUEsBAh4DFAAAAAgA4G5Q
RVBqz2QhAQAAKAMAADkAGAAAAAAAAQAAAKSB5AgAAGRvdWcudGVzdC5qYXZhOC9zcmMvbWFpbi9q
YXZhL2RvdWcvdGVzdC9qYXZhOC9SZXN1bHQuamF2YVVUBQADdAZAVHV4CwABBPgBAAAEFAAAAFBL
AQIeAxQAAAAIAMNuUEVfwdd5cgEAAIsDAAA6ABgAAAAAAAEAAACkgXgKAABkb3VnLnRlc3QuamF2
YTgvc3JjL21haW4vamF2YS9kb3VnL3Rlc3QvamF2YTgvU3RlcHBlci5qYXZhVVQFAAM+BkBUdXgL
AAEE+AEAAAQUAAAAUEsBAh4DFAAAAAgAUnBQRfdN77jxAAAA1AEAADcAGAAAAAAAAQAAAKSBXgwA
AGRvdWcudGVzdC5qYXZhOC9zcmMvbWFpbi9qYXZhL2RvdWcvdGVzdC9qYXZhOC9UZXN0LmphdmFV
VAUAAzsIQFR1eAsAAQT4AQAABBQAAABQSwECHgMKAAAAAAAPbFBFAAAAAAAAAAAAAAAAIwAYAAAA
AAAAABAA7UHADQAAZG91Zy50ZXN0LmphdmE4L3NyYy9tYWluL3Jlc291cmNlcy9VVAUAAy4BQFR1
eAsAAQT4AQAABBQAAABQSwECHgMKAAAAAAAPbFBFAAAAAAAAAAAAAAAAGQAYAAAAAAAAABAA7UEd
DgAAZG91Zy50ZXN0LmphdmE4L3NyYy90ZXN0L1VUBQADLgFAVHV4CwABBPgBAAAEFAAAAFBLAQIe
AwoAAAAAAA9sUEUAAAAAAAAAAAAAAAAeABgAAAAAAAAAEADtQXAOAABkb3VnLnRlc3QuamF2YTgv
c3JjL3Rlc3QvamF2YS9VVAUAAy4BQFR1eAsAAQT4AQAABBQAAABQSwECHgMKAAAAAAAPbFBFAAAA
AAAAAAAAAAAAIwAYAAAAAAAAABAA7UHIDgAAZG91Zy50ZXN0LmphdmE4L3NyYy90ZXN0L3Jlc291
cmNlcy9VVAUAAy4BQFR1eAsAAQT4AQAABBQAAABQSwECHgMKAAAAAAATbFBFAAAAAAAAAAAAAAAA
FwAYAAAAAAAAABAA7UElDwAAZG91Zy50ZXN0LmphdmE4L3RhcmdldC9VVAUAAzUBQFR1eAsAAQT4
AQAABBQAAABQSwECHgMKAAAAAAAob1BFAAAAAAAAAAAAAAAAHwAYAAAAAAAAABAA7UF2DwAAZG91
Zy50ZXN0LmphdmE4L3RhcmdldC9jbGFzc2VzL1VUBQAD/AZAVHV4CwABBPgBAAAEFAAAAFBLAQIe
AwoAAAAAAChvUEUAAAAAAAAAAAAAAAAkABgAAAAAAAAAEADtQc8PAABkb3VnLnRlc3QuamF2YTgv
dGFyZ2V0L2NsYXNzZXMvZG91Zy9VVAUAA/wGQFR1eAsAAQT4AQAABBQAAABQSwECHgMKAAAAAAAo
b1BFAAAAAAAAAAAAAAAAKQAYAAAAAAAAABAA7UEtEAAAZG91Zy50ZXN0LmphdmE4L3RhcmdldC9j
bGFzc2VzL2RvdWcvdGVzdC9VVAUAA/wGQFR1eAsAAQT4AQAABBQAAABQSwECHgMKAAAAAABScFBF
AAAAAAAAAAAAAAAALwAYAAAAAAAAABAA7UGQEAAAZG91Zy50ZXN0LmphdmE4L3RhcmdldC9jbGFz
c2VzL2RvdWcvdGVzdC9qYXZhOC9VVAUAAzwIQFR1eAsAAQT4AQAABBQAAABQSwECHgMUAAAACAAo
b1BFpPQBENsCAACrBgAAOwAYAAAAAAAAAAAApIH5EAAAZG91Zy50ZXN0LmphdmE4L3RhcmdldC9j
bGFzc2VzL2RvdWcvdGVzdC9qYXZhOC9SZXN1bHQuY2xhc3NVVAUAA/wGQFR1eAsAAQT4AQAABBQA
AABQSwECHgMUAAAACAAob1BFwsNtybgAAAAKAQAAQQAYAAAAAAAAAAAApIFJFAAAZG91Zy50ZXN0
LmphdmE4L3RhcmdldC9jbGFzc2VzL2RvdWcvdGVzdC9qYXZhOC9TdGVwcGVyJFN0ZXAuY2xhc3NV
VAUAA/wGQFR1eAsAAQT4AQAABBQAAABQSwECHgMUAAAACAAob1BFHTpolskDAABDCAAAPAAYAAAA
AAAAAAAApIF8FQAAZG91Zy50ZXN0LmphdmE4L3RhcmdldC9jbGFzc2VzL2RvdWcvdGVzdC9qYXZh
OC9TdGVwcGVyLmNsYXNzVVQFAAP8BkBUdXgLAAEE+AEAAAQUAAAAUEsBAh4DFAAAAAgAUnBQRUEL
1CZlAQAAPAIAADkAGAAAAAAAAAAAAKSBuxkAAGRvdWcudGVzdC5qYXZhOC90YXJnZXQvY2xhc3Nl
cy9kb3VnL3Rlc3QvamF2YTgvVGVzdC5jbGFzc1VUBQADPAhAVHV4CwABBPgBAAAEFAAAAFBLAQIe
AwoAAAAAABNsUEUAAAAAAAAAAAAAAAAkABgAAAAAAAAAEADtQZMbAABkb3VnLnRlc3QuamF2YTgv
dGFyZ2V0L3Rlc3QtY2xhc3Nlcy9VVAUAAzUBQFR1eAsAAQT4AQAABBQAAABQSwUGAAAAAB4AHgDB
DAAA8RsAAAAA
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>247947</attachid>
            <date>2014-10-16 14:16:00 -0400</date>
            <delta_ts>2014-10-16 14:16:12 -0400</delta_ts>
            <desc>More complete example</desc>
            <filename>project2.zip</filename>
            <type>application/zip</type>
            <size>10681</size>
            <attacher name="Doug Schaefer">dschaefer</attacher>
            
              <data encoding="base64">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
AAAAAAAAAAAAAAAAGQAcAGRvdWcudGVzdC5qYXZhOC9zcmMvbWFpbi9VVAkAAy4BQFQzC0BUdXgL
AAEE+AEAAAQUAAAAUEsDBAoAAAAAACZtUEUAAAAAAAAAAAAAAAAeABwAZG91Zy50ZXN0LmphdmE4
L3NyYy9tYWluL2phdmEvVVQJAAM3A0BUMwtAVHV4CwABBPgBAAAEFAAAAFBLAwQKAAAAAAAmbVBF
AAAAAAAAAAAAAAAAIwAcAGRvdWcudGVzdC5qYXZhOC9zcmMvbWFpbi9qYXZhL2RvdWcvVVQJAAM3
A0BUMwtAVHV4CwABBPgBAAAEFAAAAFBLAwQKAAAAAAAmbVBFAAAAAAAAAAAAAAAAKAAcAGRvdWcu
dGVzdC5qYXZhOC9zcmMvbWFpbi9qYXZhL2RvdWcvdGVzdC9VVAkAAzcDQFQzC0BUdXgLAAEE+AEA
AAQUAAAAUEsDBAoAAAAAADVvUEUAAAAAAAAAAAAAAAAuABwAZG91Zy50ZXN0LmphdmE4L3NyYy9t
YWluL2phdmEvZG91Zy90ZXN0L2phdmE4L1VUCQADFQdAVDMLQFR1eAsAAQT4AQAABBQAAABQSwME
FAAAAAgA4G5QRVBqz2QhAQAAKAMAADkAHABkb3VnLnRlc3QuamF2YTgvc3JjL21haW4vamF2YS9k
b3VnL3Rlc3QvamF2YTgvUmVzdWx0LmphdmFVVAkAA3QGQFRjCEBUdXgLAAEE+AEAAAQUAAAAlZLB
TsMwDIbP7VOYWyehnJEGCA5cAaG9QJq6XSBLKifphlDfnXRpt3bthLj+9v/5t5Oaiy9eIRTGV8yh
deyTN/xunaZyVxtyYKhiDZI7HAtMGEL2bL+1+EDrlQuNtc+VFCAUtxaier95hOBXuEPtLIz6u8pP
miY1yYY7hFJqrmAD1NMuC1sye54rBCQytO6ccVzEZYNzFahJ4rbSsijAw5kZ9SMhyNorFcR2zpoO
i0hZQtY7ozXKARmaQeMeXoP4bqR2SC8HgbWTRmerbmw7i9TPngbqV1tK1O9we3mIf6x7nb4EWQw4
utjTW/gMJAs8wYaMPY7QedLnMFdMp3UE9xan3nHiuTU3RiHXYL0QiAUWC+bhrf6ElFyqZcLNmNCm
v1BLAwQUAAAACADDblBFX8HXeXIBAACLAwAAOgAcAGRvdWcudGVzdC5qYXZhOC9zcmMvbWFpbi9q
YXZhL2RvdWcvdGVzdC9qYXZhOC9TdGVwcGVyLmphdmFVVAkAAz4GQFRQCkBUdXgLAAEE+AEAAAQU
AAAAjZIxb8IwEIXn5FecmIyQrI6VoKjdurRDQV0QgzGXxK2xo7MTQBX/vUls0lBVlCGSL/f8vXeX
lEJ+ihxha6uce3Sef4ha3E/TVO1KSx4s5bxG8oeuwaUl5E/uaOQbukr76TXdszBbjdTAymqjlQSp
hXOw8FiWSLPlHL7SNIk9ZTxSJiR2/dBMktqqLVBl2HiaJqdWTaoWHiFTRmiIDrNBoubmHIqzc6+P
0NUaXHNyg05jDLIiQtNM08eJIdk/DuMupS+U4/ENPAzc28SPC5HhuyBBuevxIX4/3XlkznnIN+B2
dUM95066w+puzS/2Ergd0eDBs0BQGbDJJI4H80jhGk3uiyBJkMgSG71a2DVfLShGLTc5AWqHQeXp
GA7RPzJ/UrRyKbwsgC0Lsnux0QgYPaIJRmHaPb9zb61BtgTqthwuxlXG5TKDe+g/AovCv1YQ7Bae
lMlD8YLONX/6Ddi26idgF5eveA1mbusbfIIuEk/pN1BLAwQUAAAACADXcVBFMNk3gbABAADFAwAA
NwAcAGRvdWcudGVzdC5qYXZhOC9zcmMvbWFpbi9qYXZhL2RvdWcvdGVzdC9qYXZhOC9UZXN0Lmph
dmFVVAkAAxULQFQVC0BUdXgLAAEE+AEAAAQUAAAAlVJNb9swDD3Lv4LwSUY7Be2pQNZehg077DD0
667adKJVljSJTloU+e+lZTXp1qFDL7ZIPpKPfAy6vdcrhM6PK0WYSP3SG322rCozBB8JfFypDUZ6
yAHV+ojqdrK/6ZZ8fFy+B1wTBfWdP1+sQUcfwV7i75HpfCwlBe8SMvkw3lnTQmt1SnDNdeCpqsTG
mw6mIWXDthAOt3BFGALGz7ccu5ARPl3kkDA9yKh6bSx2spnxQlw9JsJBYYwqROPIOga1ekzImOUE
2QHahH/C/Uh7eL318R67uqD5syvFGbHRhMA46L3nKV45M/U4OvnCZHrnhxDsY9bcKZzI5viN81Q2
xXfoKd7ULumlOveHczhZwmIBrXfE2wVepeFFGge0RhhM11kE309cwTv4MTrNVfiewLNQvfXblGsd
BGI98u8cXl+QYhmyLRvVRmRGhww5UxZzoorzUcj65811fQz14s7qNT9iUX6vXtGvuFUD/xhE94Rx
n6ogy5hAOwYOwSIZnoqV9jFX3P1ve6eyeUf2eaM1HE37KlMlPyCtjVt9tdMBHS5CZaXZZquc7V/Y
3GmO76pnUEsDBAoAAAAAAA9sUEUAAAAAAAAAAAAAAAAjABwAZG91Zy50ZXN0LmphdmE4L3NyYy9t
YWluL3Jlc291cmNlcy9VVAkAAy4BQFQzC0BUdXgLAAEE+AEAAAQUAAAAUEsDBAoAAAAAAA9sUEUA
AAAAAAAAAAAAAAAZABwAZG91Zy50ZXN0LmphdmE4L3NyYy90ZXN0L1VUCQADLgFAVDMLQFR1eAsA
AQT4AQAABBQAAABQSwMECgAAAAAAD2xQRQAAAAAAAAAAAAAAAB4AHABkb3VnLnRlc3QuamF2YTgv
c3JjL3Rlc3QvamF2YS9VVAkAAy4BQFQzC0BUdXgLAAEE+AEAAAQUAAAAUEsDBAoAAAAAAA9sUEUA
AAAAAAAAAAAAAAAjABwAZG91Zy50ZXN0LmphdmE4L3NyYy90ZXN0L3Jlc291cmNlcy9VVAkAAy4B
QFQzC0BUdXgLAAEE+AEAAAQUAAAAUEsDBAoAAAAAABNsUEUAAAAAAAAAAAAAAAAXABwAZG91Zy50
ZXN0LmphdmE4L3RhcmdldC9VVAkAAzUBQFQzC0BUdXgLAAEE+AEAAAQUAAAAUEsDBAoAAAAAAChv
UEUAAAAAAAAAAAAAAAAfABwAZG91Zy50ZXN0LmphdmE4L3RhcmdldC9jbGFzc2VzL1VUCQAD/AZA
VDMLQFR1eAsAAQT4AQAABBQAAABQSwMECgAAAAAAKG9QRQAAAAAAAAAAAAAAACQAHABkb3VnLnRl
c3QuamF2YTgvdGFyZ2V0L2NsYXNzZXMvZG91Zy9VVAkAA/wGQFQzC0BUdXgLAAEE+AEAAAQUAAAA
UEsDBAoAAAAAAChvUEUAAAAAAAAAAAAAAAApABwAZG91Zy50ZXN0LmphdmE4L3RhcmdldC9jbGFz
c2VzL2RvdWcvdGVzdC9VVAkAA/wGQFQzC0BUdXgLAAEE+AEAAAQUAAAAUEsDBAoAAAAAANdxUEUA
AAAAAAAAAAAAAAAvABwAZG91Zy50ZXN0LmphdmE4L3RhcmdldC9jbGFzc2VzL2RvdWcvdGVzdC9q
YXZhOC9VVAkAAxULQFQzC0BUdXgLAAEE+AEAAAQUAAAAUEsDBBQAAAAIAChvUEWk9AEQ2wIAAKsG
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
RQAAAAAAAAAAAAAAABkAGAAAAAAAAAAQAO1BEgcAAGRvdWcudGVzdC5qYXZhOC9zcmMvbWFpbi9V
VAUAAy4BQFR1eAsAAQT4AQAABBQAAABQSwECHgMKAAAAAAAmbVBFAAAAAAAAAAAAAAAAHgAYAAAA
AAAAABAA7UFlBwAAZG91Zy50ZXN0LmphdmE4L3NyYy9tYWluL2phdmEvVVQFAAM3A0BUdXgLAAEE
+AEAAAQUAAAAUEsBAh4DCgAAAAAAJm1QRQAAAAAAAAAAAAAAACMAGAAAAAAAAAAQAO1BvQcAAGRv
dWcudGVzdC5qYXZhOC9zcmMvbWFpbi9qYXZhL2RvdWcvVVQFAAM3A0BUdXgLAAEE+AEAAAQUAAAA
UEsBAh4DCgAAAAAAJm1QRQAAAAAAAAAAAAAAACgAGAAAAAAAAAAQAO1BGggAAGRvdWcudGVzdC5q
YXZhOC9zcmMvbWFpbi9qYXZhL2RvdWcvdGVzdC9VVAUAAzcDQFR1eAsAAQT4AQAABBQAAABQSwEC
HgMKAAAAAAA1b1BFAAAAAAAAAAAAAAAALgAYAAAAAAAAABAA7UF8CAAAZG91Zy50ZXN0LmphdmE4
L3NyYy9tYWluL2phdmEvZG91Zy90ZXN0L2phdmE4L1VUBQADFQdAVHV4CwABBPgBAAAEFAAAAFBL
AQIeAxQAAAAIAOBuUEVQas9kIQEAACgDAAA5ABgAAAAAAAEAAACkgeQIAABkb3VnLnRlc3QuamF2
YTgvc3JjL21haW4vamF2YS9kb3VnL3Rlc3QvamF2YTgvUmVzdWx0LmphdmFVVAUAA3QGQFR1eAsA
AQT4AQAABBQAAABQSwECHgMUAAAACADDblBFX8HXeXIBAACLAwAAOgAYAAAAAAABAAAApIF4CgAA
ZG91Zy50ZXN0LmphdmE4L3NyYy9tYWluL2phdmEvZG91Zy90ZXN0L2phdmE4L1N0ZXBwZXIuamF2
YVVUBQADPgZAVHV4CwABBPgBAAAEFAAAAFBLAQIeAxQAAAAIANdxUEUw2TeBsAEAAMUDAAA3ABgA
AAAAAAEAAACkgV4MAABkb3VnLnRlc3QuamF2YTgvc3JjL21haW4vamF2YS9kb3VnL3Rlc3QvamF2
YTgvVGVzdC5qYXZhVVQFAAMVC0BUdXgLAAEE+AEAAAQUAAAAUEsBAh4DCgAAAAAAD2xQRQAAAAAA
AAAAAAAAACMAGAAAAAAAAAAQAO1Bfw4AAGRvdWcudGVzdC5qYXZhOC9zcmMvbWFpbi9yZXNvdXJj
ZXMvVVQFAAMuAUBUdXgLAAEE+AEAAAQUAAAAUEsBAh4DCgAAAAAAD2xQRQAAAAAAAAAAAAAAABkA
GAAAAAAAAAAQAO1B3A4AAGRvdWcudGVzdC5qYXZhOC9zcmMvdGVzdC9VVAUAAy4BQFR1eAsAAQT4
AQAABBQAAABQSwECHgMKAAAAAAAPbFBFAAAAAAAAAAAAAAAAHgAYAAAAAAAAABAA7UEvDwAAZG91
Zy50ZXN0LmphdmE4L3NyYy90ZXN0L2phdmEvVVQFAAMuAUBUdXgLAAEE+AEAAAQUAAAAUEsBAh4D
CgAAAAAAD2xQRQAAAAAAAAAAAAAAACMAGAAAAAAAAAAQAO1Bhw8AAGRvdWcudGVzdC5qYXZhOC9z
cmMvdGVzdC9yZXNvdXJjZXMvVVQFAAMuAUBUdXgLAAEE+AEAAAQUAAAAUEsBAh4DCgAAAAAAE2xQ
RQAAAAAAAAAAAAAAABcAGAAAAAAAAAAQAO1B5A8AAGRvdWcudGVzdC5qYXZhOC90YXJnZXQvVVQF
AAM1AUBUdXgLAAEE+AEAAAQUAAAAUEsBAh4DCgAAAAAAKG9QRQAAAAAAAAAAAAAAAB8AGAAAAAAA
AAAQAO1BNRAAAGRvdWcudGVzdC5qYXZhOC90YXJnZXQvY2xhc3Nlcy9VVAUAA/wGQFR1eAsAAQT4
AQAABBQAAABQSwECHgMKAAAAAAAob1BFAAAAAAAAAAAAAAAAJAAYAAAAAAAAABAA7UGOEAAAZG91
Zy50ZXN0LmphdmE4L3RhcmdldC9jbGFzc2VzL2RvdWcvVVQFAAP8BkBUdXgLAAEE+AEAAAQUAAAA
UEsBAh4DCgAAAAAAKG9QRQAAAAAAAAAAAAAAACkAGAAAAAAAAAAQAO1B7BAAAGRvdWcudGVzdC5q
YXZhOC90YXJnZXQvY2xhc3Nlcy9kb3VnL3Rlc3QvVVQFAAP8BkBUdXgLAAEE+AEAAAQUAAAAUEsB
Ah4DCgAAAAAA13FQRQAAAAAAAAAAAAAAAC8AGAAAAAAAAAAQAO1BTxEAAGRvdWcudGVzdC5qYXZh
OC90YXJnZXQvY2xhc3Nlcy9kb3VnL3Rlc3QvamF2YTgvVVQFAAMVC0BUdXgLAAEE+AEAAAQUAAAA
UEsBAh4DFAAAAAgAKG9QRaT0ARDbAgAAqwYAADsAGAAAAAAAAAAAAKSBuBEAAGRvdWcudGVzdC5q
YXZhOC90YXJnZXQvY2xhc3Nlcy9kb3VnL3Rlc3QvamF2YTgvUmVzdWx0LmNsYXNzVVQFAAP8BkBU
dXgLAAEE+AEAAAQUAAAAUEsBAh4DFAAAAAgAKG9QRcLDbcm4AAAACgEAAEEAGAAAAAAAAAAAAKSB
CBUAAGRvdWcudGVzdC5qYXZhOC90YXJnZXQvY2xhc3Nlcy9kb3VnL3Rlc3QvamF2YTgvU3RlcHBl
ciRTdGVwLmNsYXNzVVQFAAP8BkBUdXgLAAEE+AEAAAQUAAAAUEsBAh4DFAAAAAgAKG9QRR06aJbJ
AwAAQwgAADwAGAAAAAAAAAAAAKSBOxYAAGRvdWcudGVzdC5qYXZhOC90YXJnZXQvY2xhc3Nlcy9k
b3VnL3Rlc3QvamF2YTgvU3RlcHBlci5jbGFzc1VUBQAD/AZAVHV4CwABBPgBAAAEFAAAAFBLAQIe
AxQAAAAIANdxUEXZizXJlwEAAJQCAAA5ABgAAAAAAAAAAACkgXoaAABkb3VnLnRlc3QuamF2YTgv
dGFyZ2V0L2NsYXNzZXMvZG91Zy90ZXN0L2phdmE4L1Rlc3QuY2xhc3NVVAUAAxULQFR1eAsAAQT4
AQAABBQAAABQSwECHgMKAAAAAAATbFBFAAAAAAAAAAAAAAAAJAAYAAAAAAAAABAA7UGEHAAAZG91
Zy50ZXN0LmphdmE4L3RhcmdldC90ZXN0LWNsYXNzZXMvVVQFAAM1AUBUdXgLAAEE+AEAAAQUAAAA
UEsFBgAAAAAeAB4AwQwAAOIcAAAAAA==
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>248125</attachid>
            <date>2014-10-23 08:12:00 -0400</date>
            <delta_ts>2014-10-23 08:12:44 -0400</delta_ts>
            <desc>Patch under consideration.</desc>
            <filename>446765.patch</filename>
            <type>text/plain</type>
            <size>34443</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9wYXJzZXIvQ29tcGxldGlvblBhcnNlclRl
c3QxOC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3BhcnNlci9Db21wbGV0aW9uUGFyc2VyVGVz
dDE4LmphdmEKaW5kZXggYmJhNDlmYS4uYTFjZGJlZiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Nv
bXBpbGVyL3BhcnNlci9Db21wbGV0aW9uUGFyc2VyVGVzdDE4LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3Rz
L2NvbXBpbGVyL3BhcnNlci9Db21wbGV0aW9uUGFyc2VyVGVzdDE4LmphdmEKQEAgLTE3MTAsNyAr
MTcxMCw2IEBACiAJCQkJImRpZXQgYXN0Iik7CiB9CiAvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5v
cmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDM4OTUyLCBbMS44XVtjb250ZW50IGFzc2lzdF0gU3Rh
Y2tPdmVyZmxvd0Vycm9yIGF0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3Qu
U2luZ2xlVHlwZVJlZmVyZW5jZS50cmF2ZXJzZShTaW5nbGVUeXBlUmVmZXJlbmNlLmphdmE6MTA4
KSAKLS8vIEZJWE1FOiBSZWNvdmVyZWQgcGFyc2UgdHJlZSBpc24ndCBxdWl0ZSBjb3JyZWN0LCBi
dXQgaXMgaGFybWxlc3MuCiBwdWJsaWMgdm9pZCB0ZXN0NDM4OTUyKCkgewogCVN0cmluZyBzdHJp
bmcgPSAKIAkJCSJpbXBvcnQgamF2YS51dGlsLmZ1bmN0aW9uLlN1cHBsaWVyO1xuIiArCkBAIC0x
NzM4LDIyICsxNzM3LDcgQEAKIAkJCQkJImNsYXNzIFNPIHtcbiIgKyAKIAkJCQkJIiAge1xuIiAr
IAogCQkJCQkiICAgIGludCBTdXBwbGllcjtcbiIgKyAKLQkJCQkJIiAgICBuZXcgU08oKSB7XG4i
ICsgCi0JCQkJCSIgICAgICB7XG4iICsgCi0JCQkJCSIgICAgICB9XG4iICsgCi0JCQkJCSIgICAg
ICB2b2lkIHRlc3QoKSB7XG4iICsgCi0JCQkJCSIgICAgICAgIDxDb21wbGV0ZU9uTmFtZTo+O1xu
IiArIAotCQkJCQkiICAgICAgfVxuIiArIAotCQkJCQkiICAgICAgdm9pZCB0ZXN0KCkge1xuIiAr
IAotCQkJCQkiICAgICAgICA8Q29tcGxldGVPbk5hbWU6PjtcbiIgKyAKLQkJCQkJIiAgICAgIH1c
biIgKyAKLQkJCQkJIiAgICB9O1xuIiArIAogCQkJCQkiICAgIG02ID0gKCkgLT4gbmV3IFNPKCkg
e1xuIiArIAotCQkJCQkiICB7XG4iICsgCi0JCQkJCSIgIH1cbiIgKyAKLQkJCQkJIiAgdm9pZCB0
ZXN0KCkge1xuIiArIAotCQkJCQkiICAgIDxDb21wbGV0ZU9uTmFtZTo+O1xuIiArIAotCQkJCQki
ICB9XG4iICsgCiAJCQkJCSIgIHZvaWQgdGVzdCgpIHtcbiIgKyAKIAkJCQkJIiAgICA8Q29tcGxl
dGVPbk5hbWU6PjtcbiIgKyAKIAkJCQkJIiAgfVxuIiArIApAQCAtMjA2OCw0ICsyMDUyLDIzMCBA
QAogCQkJCWV4cGVjdGVkUmVwbGFjZWRTb3VyY2UsCiAJCQkJImRpZXQgYXN0Iik7CiB9CisvLyBo
dHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDQ2NzY1LCAKK3B1
YmxpYyB2b2lkIHRlc3Q0NDY3NjUoKSB7CisJCQlTdHJpbmcgc3RyaW5nID0gCisJCQkJCSJjbGFz
cyBTdGVwcGVyPFQ+IHtcbiIgKworCQkJCQkiICAgIHB1YmxpYyBpbnRlcmZhY2UgU3RlcDxUPiB7
XG4iICsKKwkJCQkJIiAgICAgICAgdm9pZCBydW4oKTtcbiIgKworCQkJCQkiICAgIH1cbiIgKwor
CQkJCQkiICAgIHB1YmxpYyBTdGVwcGVyKEhhbmRsZXI8QXN5bmNSZXN1bHQ8VD4+IGhhbmRsZXIp
IHt9XG4iICsKKwkJCQkJIlxuIiArCisJCQkJCSIgICAgQFNhZmVWYXJhcmdzXG4iICsKKwkJCQkJ
IiAgICBwdWJsaWMgZmluYWwgdm9pZCBydW4oU3RlcDxUPiAuLi4gc3RlcHMpIHt9XG4iICsKKwkJ
CQkJIn1cbiIgKworCQkJCQkiaW50ZXJmYWNlIEFzeW5jUmVzdWx0PFQ+IHt9XG4iICsKKwkJCQkJ
ImludGVyZmFjZSBIYW5kbGVyPEU+IHtcbiIgKworCQkJCQkiICAgIHZvaWQgaGFuZGxlKEUgZXZl
bnQpO1xuIiArCisJCQkJCSJ9XG4iICsKKwkJCQkJImNsYXNzIFoge1xuIiArCisJCQkJCSIgICAg
dm9pZCBmb28oKSB7fVxuIiArCisJCQkJCSJ9XG4iICsKKwkJCQkJImludGVyZmFjZSBJIHtcbiIg
KworCQkJCQkiICAgIHZvaWQgZm9vKFogeik7XG4iICsKKwkJCQkJIn1cbiIgKworCQkJCQkiY2xh
c3MgWSB7XG4iICsKKwkJCQkJIiAgICB2b2lkIHJlcXVlc3QoSSBpKSB7fVxuIiArCisJCQkJCSJ9
XG4iICsKKwkJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJCQkiICAgIHZvaWQgdGVzdCgp
IHtcbiIgKworCQkJCQkiICAgICAgICBuZXcgU3RlcHBlcjxWb2lkPihyIC0+IHt9KSB7XG4iICsK
KwkJCQkJIiAgICAgICAgICAgIHByaXZhdGUgdm9pZCBzdGVwMSgpIHtcbiIgKworCQkJCQkiICAg
ICAgICAgICAgICAgIFkgeSA9IG5ldyBZKCk7XG4iICsKKwkJCQkJIiAgICAgICAgICAgICAgICB5
LnJlcXVlc3QocmVzcG9uc2UgLT4ge1xuIiArCisJCQkJCSIgICAgICAgICAgICAgICAgICAgIGlm
IChyZXNwb25zZS4pXG4iICsKKwkJCQkJIiAgICAgICAgICAgICAgICB9KTtcbiIgKworCQkJCQki
ICAgICAgICAgICAgfVxuIiArCisJCQkJCSIgICAgICAgIH0ucnVuKCk7ICAgICAgICBcbiIgKwor
CQkJCQkiICAgIH0gICAgXG4iICsKKwkJCQkJIn1cbiI7CisJCQkJCQorCQkJU3RyaW5nIGNvbXBs
ZXRlQmVoaW5kID0gInJlc3BvbnNlLiI7CisJCQlpbnQgY3Vyc29yTG9jYXRpb24gPSBzdHJpbmcu
aW5kZXhPZihjb21wbGV0ZUJlaGluZCkgKyBjb21wbGV0ZUJlaGluZC5sZW5ndGgoKSAtIDE7CisK
KwkJCVN0cmluZyBleHBlY3RlZENvbXBsZXRpb25Ob2RlVG9TdHJpbmcgPSAiPENvbXBsZXRlT25O
YW1lOnJlc3BvbnNlLj4iOworCQkJU3RyaW5nIGV4cGVjdGVkUGFyZW50Tm9kZVRvU3RyaW5nID0g
ImlmICg8Q29tcGxldGVPbk5hbWU6cmVzcG9uc2UuPilcbiIgKyAKKwkJCQkJCQkJCQkJCSIgICAg
OyI7CisJCQlTdHJpbmcgY29tcGxldGlvbklkZW50aWZpZXIgPSAiIjsKKwkJCVN0cmluZyBleHBl
Y3RlZFJlcGxhY2VkU291cmNlID0gInJlc3BvbnNlLiI7CisJCQlTdHJpbmcgZXhwZWN0ZWRVbml0
RGlzcGxheVN0cmluZyA9CisJCQkJCSJjbGFzcyBTdGVwcGVyPFQ+IHtcbiIgKyAKKwkJCQkJIiAg
cHVibGljIGludGVyZmFjZSBTdGVwPFQ+IHtcbiIgKyAKKwkJCQkJIiAgICB2b2lkIHJ1bigpO1xu
IiArIAorCQkJCQkiICB9XG4iICsgCisJCQkJCSIgIHB1YmxpYyBTdGVwcGVyKEhhbmRsZXI8QXN5
bmNSZXN1bHQ8VD4+IGhhbmRsZXIpIHtcbiIgKyAKKwkJCQkJIiAgfVxuIiArIAorCQkJCQkiICBw
dWJsaWMgZmluYWwgQFNhZmVWYXJhcmdzIHZvaWQgcnVuKFN0ZXA8VD4uLi4gc3RlcHMpIHtcbiIg
KyAKKwkJCQkJIiAgfVxuIiArIAorCQkJCQkifVxuIiArIAorCQkJCQkiaW50ZXJmYWNlIEFzeW5j
UmVzdWx0PFQ+IHtcbiIgKyAKKwkJCQkJIn1cbiIgKyAKKwkJCQkJImludGVyZmFjZSBIYW5kbGVy
PEU+IHtcbiIgKyAKKwkJCQkJIiAgdm9pZCBoYW5kbGUoRSBldmVudCk7XG4iICsgCisJCQkJCSJ9
XG4iICsgCisJCQkJCSJjbGFzcyBaIHtcbiIgKyAKKwkJCQkJIiAgWigpIHtcbiIgKyAKKwkJCQkJ
IiAgfVxuIiArIAorCQkJCQkiICB2b2lkIGZvbygpIHtcbiIgKyAKKwkJCQkJIiAgfVxuIiArIAor
CQkJCQkifVxuIiArIAorCQkJCQkiaW50ZXJmYWNlIEkge1xuIiArIAorCQkJCQkiICB2b2lkIGZv
byhaIHopO1xuIiArIAorCQkJCQkifVxuIiArIAorCQkJCQkiY2xhc3MgWSB7XG4iICsgCisJCQkJ
CSIgIFkoKSB7XG4iICsgCisJCQkJCSIgIH1cbiIgKyAKKwkJCQkJIiAgdm9pZCByZXF1ZXN0KEkg
aSkge1xuIiArIAorCQkJCQkiICB9XG4iICsgCisJCQkJCSJ9XG4iICsgCisJCQkJCSJwdWJsaWMg
Y2xhc3MgWCB7XG4iICsgCisJCQkJCSIgIHB1YmxpYyBYKCkge1xuIiArIAorCQkJCQkiICB9XG4i
ICsgCisJCQkJCSIgIHZvaWQgdGVzdCgpIHtcbiIgKyAKKwkJCQkJIiAgICBuZXcgU3RlcHBlcjxW
b2lkPigoPG5vIHR5cGU+IHIpIC0+IHtcbiIgKyAKKwkJCQkJIn0pIHtcbiIgKyAKKwkJCQkJIiAg
ICAgIHByaXZhdGUgdm9pZCBzdGVwMSgpIHtcbiIgKyAKKwkJCQkJIiAgICAgICAgWSB5O1xuIiAr
IAorCQkJCQkiICAgICAgICB5LnJlcXVlc3QoKDxubyB0eXBlPiByZXNwb25zZSkgLT4ge1xuIiAr
IAorCQkJCQkiICA8Q29tcGxldGVPbk5hbWU6cmVzcG9uc2UuPjtcbiIgKyAKKwkJCQkJIn0pO1xu
IiArIAorCQkJCQkiICAgICAgfVxuIiArIAorCQkJCQkiICAgIH07XG4iICsgCisJCQkJCSIgIH1c
biIgKyAKKwkJCQkJIn1cbiI7CisKKwkJCWNoZWNrTWV0aG9kUGFyc2UoCisJCQkJc3RyaW5nLnRv
Q2hhckFycmF5KCksCisJCQkJY3Vyc29yTG9jYXRpb24sCisJCQkJZXhwZWN0ZWRDb21wbGV0aW9u
Tm9kZVRvU3RyaW5nLAorCQkJCWV4cGVjdGVkUGFyZW50Tm9kZVRvU3RyaW5nLAorCQkJCWV4cGVj
dGVkVW5pdERpc3BsYXlTdHJpbmcsCisJCQkJY29tcGxldGlvbklkZW50aWZpZXIsCisJCQkJZXhw
ZWN0ZWRSZXBsYWNlZFNvdXJjZSwKKwkJCQkiZGlldCBhc3QiKTsKK30KKy8vIGh0dHBzOi8vYnVn
cy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00Mjg3MzUsICBbMS44XVthc3Npc3Rd
IE1pc3NpbmcgY29tcGxldGlvbiBwcm9wb3NhbHMgaW5zaWRlIGxhbWJkYSBib2R5IGV4cHJlc3Np
b24gLSBvdGhlciB0aGFuIGZpcnN0IHRva2VuCitwdWJsaWMgdm9pZCB0ZXN0NDI4NzM1aCgpICB7
CisJU3RyaW5nIHN0cmluZyA9IAorCQkJImltcG9ydCBqYXZhLnV0aWwuTGlzdDtcbiIgKworCQkJ
ImNsYXNzIFBlcnNvbiB7XG4iICsKKwkJCSIgICBTdHJpbmcgZ2V0TGFzdE5hbWUoKSB7IHJldHVy
biBudWxsOyB9XG4iICsKKwkJCSJ9XG4iICsKKwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJ
CSIgICB2b2lkIHRlc3QyKExpc3Q8UGVyc29uPiBwZW9wbGUpIHtcbiIgKworCQkJIiAgICAgICBw
ZW9wbGUuc29ydCgoeCx5KSAtPiB7XG4iICsKKwkJCSIgICAgICAgICAgICAgIGlmICh0cnVlKSBy
ZXR1cm4gXCJcIiArIHguZ2V0KTsgXG4iICsKKwkJCSIgICAgICAgICAgICAgIGVsc2UgcmV0dXJu
IFwiXCI7XG4iICsKKwkJCSIgICB9XG4iICsKKwkJCSJ9XG4iOworCQkJCisJU3RyaW5nIGNvbXBs
ZXRlQmVoaW5kID0gInguZ2V0IjsKKwlpbnQgY3Vyc29yTG9jYXRpb24gPSBzdHJpbmcuaW5kZXhP
Zihjb21wbGV0ZUJlaGluZCkgKyBjb21wbGV0ZUJlaGluZC5sZW5ndGgoKSAtIDE7CisKKwlTdHJp
bmcgZXhwZWN0ZWRDb21wbGV0aW9uTm9kZVRvU3RyaW5nID0gIjxDb21wbGV0ZU9uTmFtZTp4Lmdl
dD4iOworCVN0cmluZyBleHBlY3RlZFBhcmVudE5vZGVUb1N0cmluZyA9ICIoXCJcIiArIDxDb21w
bGV0ZU9uTmFtZTp4LmdldD4pIjsKKwlTdHJpbmcgY29tcGxldGlvbklkZW50aWZpZXIgPSAiZ2V0
IjsKKwlTdHJpbmcgZXhwZWN0ZWRSZXBsYWNlZFNvdXJjZSA9ICJ4LmdldCI7CisJU3RyaW5nIGV4
cGVjdGVkVW5pdERpc3BsYXlTdHJpbmcgPQorCQkJImltcG9ydCBqYXZhLnV0aWwuTGlzdDtcbiIg
KyAKKwkJCSJjbGFzcyBQZXJzb24ge1xuIiArIAorCQkJIiAgUGVyc29uKCkge1xuIiArIAorCQkJ
IiAgfVxuIiArIAorCQkJIiAgU3RyaW5nIGdldExhc3ROYW1lKCkge1xuIiArIAorCQkJIiAgfVxu
IiArIAorCQkJIn1cbiIgKyAKKwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsgCisJCQkiICBwdWJs
aWMgWCgpIHtcbiIgKyAKKwkJCSIgIH1cbiIgKyAKKwkJCSIgIHZvaWQgdGVzdDIoTGlzdDxQZXJz
b24+IHBlb3BsZSkge1xuIiArIAorCQkJIiAgICBwZW9wbGUuc29ydCgoPG5vIHR5cGU+IHgsIDxu
byB0eXBlPiB5KSAtPiB7XG4iICsgCisJCQkiICBpZiAodHJ1ZSlcbiIgKyAKKwkJCSIgICAgICBy
ZXR1cm4gKFwiXCIgKyA8Q29tcGxldGVPbk5hbWU6eC5nZXQ+KTtcbiIgKyAKKwkJCSIgIDtcbiIg
KyAKKwkJCSIgIHJldHVybiBcIlwiO1xuIiArIAorCQkJIn0pO1xuIiArIAorCQkJIiAgfVxuIiAr
IAorCQkJIn1cbiI7CisKKwljaGVja01ldGhvZFBhcnNlKAorCQlzdHJpbmcudG9DaGFyQXJyYXko
KSwKKwkJY3Vyc29yTG9jYXRpb24sCisJCWV4cGVjdGVkQ29tcGxldGlvbk5vZGVUb1N0cmluZywK
KwkJZXhwZWN0ZWRQYXJlbnROb2RlVG9TdHJpbmcsCisJCWV4cGVjdGVkVW5pdERpc3BsYXlTdHJp
bmcsCisJCWNvbXBsZXRpb25JZGVudGlmaWVyLAorCQlleHBlY3RlZFJlcGxhY2VkU291cmNlLAor
CQkiZGlldCBhc3QiKTsKK30KKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3df
YnVnLmNnaT9pZD00MjI0NjgsIFsxLjhdW2Fzc2lzdF0gQ29kZSBhc3Npc3QgaXNzdWVzIHdpdGgg
dHlwZSBlbGlkZWQgbGFtYmRhIHBhcmFtZXRlcnMKK3B1YmxpYyB2b2lkIHRlc3Q0MjI0NjgoKSB7
IC8vIGNvbXB1dGluZyB2aXNpYmxlIGVsZW1lbnRzIGluIGxhbWJkYSBzY29wZS4KKwlTdHJpbmcg
c3RyaW5nID0gCisJCQkiaW50ZXJmYWNlIEkge1xuIiArCisJCQkiCXZvaWQgZm9vKFggeCk7XG4i
ICsKKwkJCSJ9XG4iICsKKwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCSIJc3RhdGljIFgg
eEZpZWxkO1xuIiArCisJCQkiCXN0YXRpYyBYIGdvbyhTdHJpbmcgcykge1xuIiArCisJCQkiICAg
ICAgIHJldHVybiBudWxsO1xuIiArCisJCQkiCX1cbiIgKworCQkJIglzdGF0aWMgdm9pZCBnb28o
SSBpKSB7XG4iICsKKwkJCSIJfVxuIiArCisJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0
cmluZ1tdIGFyZ3MpIHtcbiIgKworCQkJIiAgICAgICBYIHhMb2NhbCA9IG51bGw7XG4iICsKKwkJ
CSIgICAgICAgYXJncyA9IG51bGw7XG4iICsKKwkJCSIgICAgICAgaWYgKGFyZ3MgIT0gbnVsbCkg
e1xuIiArCisJCQkiICAgICAgICAgICB4RmllbGQgPSBudWxsO1xuIiArCisJCQkiICAgICAgIGVs
c2UgXG4iICsKKwkJCSIgICAgICAgICAgIHhGaWVsZCA9IG51bGw7XG4iICsKKwkJCSIgICAgICAg
d2hpbGUgKHRydWUpO1xuIiArCisJCQkiCQlnb28oKHh5eikgLT4ge1xuIiArCisJCQkiICAgICAg
ICAgICBYIHhMYW1iZGFMb2NhbCA9IG51bGw7XG4iICsKKwkJCSIJCQlTeXN0ZW0ub3V0LnByaW50
bG4oeHl6LilcbiIgKworCQkJIgkJfSk7XG4iICsKKwkJCSIJfVxuIiArCisJCQkifVxuIjsKKwlT
dHJpbmcgY29tcGxldGVCZWhpbmQgPSAieHl6LiI7CisJaW50IGN1cnNvckxvY2F0aW9uID0gc3Ry
aW5nLmluZGV4T2YoY29tcGxldGVCZWhpbmQpICsgY29tcGxldGVCZWhpbmQubGVuZ3RoKCkgLSAx
OworCisJU3RyaW5nIGV4cGVjdGVkQ29tcGxldGlvbk5vZGVUb1N0cmluZyA9ICI8Q29tcGxldGVP
bk5hbWU6eHl6Lj4iOworCVN0cmluZyBleHBlY3RlZFBhcmVudE5vZGVUb1N0cmluZyA9ICJTeXN0
ZW0ub3V0LnByaW50bG4oPENvbXBsZXRlT25OYW1lOnh5ei4+KSI7CisJU3RyaW5nIGNvbXBsZXRp
b25JZGVudGlmaWVyID0gIiI7CisJU3RyaW5nIGV4cGVjdGVkUmVwbGFjZWRTb3VyY2UgPSAieHl6
LiI7CisJU3RyaW5nIGV4cGVjdGVkVW5pdERpc3BsYXlTdHJpbmcgPQorCQkJImludGVyZmFjZSBJ
IHtcbiIgKyAKKwkJCSIgIHZvaWQgZm9vKFggeCk7XG4iICsgCisJCQkifVxuIiArIAorCQkJInB1
YmxpYyBjbGFzcyBYIHtcbiIgKyAKKwkJCSIgIHN0YXRpYyBYIHhGaWVsZDtcbiIgKyAKKwkJCSIg
IHB1YmxpYyBYKCkge1xuIiArIAorCQkJIiAgfVxuIiArIAorCQkJIiAgPGNsaW5pdD4oKSB7XG4i
ICsgCisJCQkiICB9XG4iICsgCisJCQkiICBzdGF0aWMgWCBnb28oU3RyaW5nIHMpIHtcbiIgKyAK
KwkJCSIgIH1cbiIgKyAKKwkJCSIgIHN0YXRpYyB2b2lkIGdvbyhJIGkpIHtcbiIgKyAKKwkJCSIg
IH1cbiIgKyAKKwkJCSIgIHB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtc
biIgKyAKKwkJCSIgICAgWCB4TG9jYWw7XG4iICsgCisJCQkiICAgIHtcbiIgKyAKKwkJCSIgICAg
ICB7XG4iICsgCisJCQkiICAgICAgICBnb28oKDxubyB0eXBlPiB4eXopIC0+IHtcbiIgKyAKKwkJ
CSIgIFggeExhbWJkYUxvY2FsO1xuIiArIAorCQkJIiAgU3lzdGVtLm91dC5wcmludGxuKDxDb21w
bGV0ZU9uTmFtZTp4eXouPik7XG4iICsgCisJCQkifSk7XG4iICsgCisJCQkiICAgICAgfVxuIiAr
IAorCQkJIiAgICB9XG4iICsgCisJCQkiICB9XG4iICsgCisJCQkifVxuIjsKKworCWNoZWNrTWV0
aG9kUGFyc2UoCisJCXN0cmluZy50b0NoYXJBcnJheSgpLAorCQljdXJzb3JMb2NhdGlvbiwKKwkJ
ZXhwZWN0ZWRDb21wbGV0aW9uTm9kZVRvU3RyaW5nLAorCQlleHBlY3RlZFBhcmVudE5vZGVUb1N0
cmluZywKKwkJZXhwZWN0ZWRVbml0RGlzcGxheVN0cmluZywKKwkJY29tcGxldGlvbklkZW50aWZp
ZXIsCisJCWV4cGVjdGVkUmVwbGFjZWRTb3VyY2UsCisJCSJkaWV0IGFzdCIpOworfQogfQpkaWZm
IC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNl
L2pkdC9jb3JlL3Rlc3RzL21vZGVsL0NvbXBsZXRpb25UZXN0czE4LmphdmEgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvbW9k
ZWwvQ29tcGxldGlvblRlc3RzMTguamF2YQppbmRleCBjNGI1ZGE5Li4wZGYzNGYxIDEwMDY0NAot
LS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0
L2NvcmUvdGVzdHMvbW9kZWwvQ29tcGxldGlvblRlc3RzMTguamF2YQorKysgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvbW9k
ZWwvQ29tcGxldGlvblRlc3RzMTguamF2YQpAQCAtNjg5LDggKzY4OSw5IEBACiAJCQkiZXhwZWN0
ZWRUeXBlc0tleXM9e1osQyxJLEosRixELFtDLExqYXZhL2xhbmcvU3RyaW5nOyxMamF2YS9sYW5n
L09iamVjdDt9XG4iICsKIAkJCSJjb21wbGV0aW9uIHRva2VuIGxvY2F0aW9uPVVOS05PV05cbiIg
KwogCQkJInZpc2libGVFbGVtZW50cz17XG4iICsKKwkJCSIJeExhbWJkYUxvY2FsIFtpbiBtYWlu
KFN0cmluZ1tdKSBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4g
W2luIHNyYyBbaW4gQ29tcGxldGlvbl1dXV1dXSxcbiIgKworCQkJIgl4eXogW2luIG1haW4oU3Ry
aW5nW10pIFtpbiBYIFtpbiBbV29ya2luZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4g
c3JjIFtpbiBDb21wbGV0aW9uXV1dXV1dLFxuIiArCiAJCQkiCXhMb2NhbCBbaW4gbWFpbihTdHJp
bmdbXSkgW2luIFggW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBz
cmMgW2luIENvbXBsZXRpb25dXV1dXV0sXG4iICsKLQkgICAgICAgICIJeExhbWJkYUxvY2FsIFtp
biBtYWluKFN0cmluZ1tdKSBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0gWC5qYXZhIFtpbiA8ZGVm
YXVsdD4gW2luIHNyYyBbaW4gQ29tcGxldGlvbl1dXV1dXSxcbiIgKwogCQkJIgl4RmllbGQge2tl
eT1MWDsueEZpZWxkKUxYO30gW2luIFggW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRl
ZmF1bHQ+IFtpbiBzcmMgW2luIENvbXBsZXRpb25dXV1dXSxcbiIgKwogCQkJIglnb28oU3RyaW5n
KSB7a2V5PUxYOy5nb28oTGphdmEvbGFuZy9TdHJpbmc7KUxYO30gW2luIFggW2luIFtXb3JraW5n
IGNvcHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2luIENvbXBsZXRpb25dXV1dXSxc
biIgKwogCQkJIn0iICwgcmVxdWVzdG9yLmdldENvbnRleHQoKSk7CmRpZmYgLS1naXQgYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb2RlYXNzaXN0L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb2Rl
YXNzaXN0L0ludGVybmFsRXh0ZW5kZWRDb21wbGV0aW9uQ29udGV4dC5qYXZhIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29kZWFzc2lzdC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29kZWFzc2lz
dC9JbnRlcm5hbEV4dGVuZGVkQ29tcGxldGlvbkNvbnRleHQuamF2YQppbmRleCA2YTAyZDNiLi5k
NzQ2NjVmIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb2RlYXNzaXN0L29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb2RlYXNzaXN0L0ludGVybmFsRXh0ZW5kZWRDb21wbGV0aW9u
Q29udGV4dC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvZGVhc3Npc3Qvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvZGVhc3Npc3QvSW50ZXJuYWxFeHRlbmRlZENvbXBsZXRpb25D
b250ZXh0LmphdmEKQEAgLTE5LDYgKzE5LDcgQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29y
ZS5JSmF2YUVsZW1lbnQ7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuSVR5cGVSb290Owog
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLkphdmFNb2RlbEV4Y2VwdGlvbjsKK2ltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuY29yZS5TaWduYXR1cmU7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNv
cmUuV29ya2luZ0NvcHlPd25lcjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxl
ci5DaGFyT3BlcmF0aW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb2RlYXNz
aXN0LmNvbXBsZXRlLkNvbXBsZXRpb25Ob2RlRGV0ZWN0b3I7CkBAIC0yNjEsNyArMjYyLDcgQEAK
IAkJTG9jYWxEZWNsYXJhdGlvbiBsb2NhbCA9IGJpbmRpbmcuZGVjbGFyYXRpb247CiAKIAkJSmF2
YUVsZW1lbnQgcGFyZW50ID0gbnVsbDsKLQkJUmVmZXJlbmNlQ29udGV4dCByZWZlcmVuY2VDb250
ZXh0ID0gYmluZGluZy5kZWNsYXJpbmdTY29wZS5yZWZlcmVuY2VDb250ZXh0KCk7CisJCVJlZmVy
ZW5jZUNvbnRleHQgcmVmZXJlbmNlQ29udGV4dCA9IGJpbmRpbmcuZGVjbGFyaW5nU2NvcGUuaXNM
YW1iZGFTdWJzY29wZSgpID8gYmluZGluZy5kZWNsYXJpbmdTY29wZS5uYW1lZE1ldGhvZFNjb3Bl
KCkucmVmZXJlbmNlQ29udGV4dCgpIDogYmluZGluZy5kZWNsYXJpbmdTY29wZS5yZWZlcmVuY2VD
b250ZXh0KCk7CiAJCWlmIChyZWZlcmVuY2VDb250ZXh0IGluc3RhbmNlb2YgQWJzdHJhY3RNZXRo
b2REZWNsYXJhdGlvbikgewogCQkJQWJzdHJhY3RNZXRob2REZWNsYXJhdGlvbiBtZXRob2REZWNs
YXJhdGlvbiA9IChBYnN0cmFjdE1ldGhvZERlY2xhcmF0aW9uKSByZWZlcmVuY2VDb250ZXh0Owog
CQkJcGFyZW50ID0gdGhpcy5nZXRKYXZhRWxlbWVudE9mQ29tcGlsYXRpb25Vbml0KG1ldGhvZERl
Y2xhcmF0aW9uLCBtZXRob2REZWNsYXJhdGlvbi5iaW5kaW5nKTsKQEAgLTI4MSw3ICsyODIsNyBA
QAogCQkJCWxvY2FsLmRlY2xhcmF0aW9uU291cmNlRW5kLAogCQkJCWxvY2FsLnNvdXJjZVN0YXJ0
LAogCQkJCWxvY2FsLnNvdXJjZUVuZCwKLQkJCQlVdGlsLnR5cGVTaWduYXR1cmUobG9jYWwudHlw
ZSksCisJCQkJbG9jYWwudHlwZSA9PSBudWxsID8gU2lnbmF0dXJlLmNyZWF0ZVR5cGVTaWduYXR1
cmUoYmluZGluZy50eXBlLnJlYWRhYmxlTmFtZSgpLCB0cnVlKSA6IFV0aWwudHlwZVNpZ25hdHVy
ZShsb2NhbC50eXBlKSwKIAkJCQliaW5kaW5nLmRlY2xhcmF0aW9uLmFubm90YXRpb25zLAogCQkJ
CWxvY2FsLm1vZGlmaWVycywKIAkJCQlsb2NhbC5nZXRLaW5kKCkgPT0gQWJzdHJhY3RWYXJpYWJs
ZURlY2xhcmF0aW9uLlBBUkFNRVRFUik7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb2RlYXNzaXN0L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb2RlYXNzaXN0L2NvbXBsZXRl
L0NvbXBsZXRpb25QYXJzZXIuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvZGVhc3Npc3Qv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvZGVhc3Npc3QvY29tcGxldGUvQ29tcGxldGlvblBh
cnNlci5qYXZhCmluZGV4IDI2ZjUxYjYuLmM3NDVmNWUgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvZGVhc3Npc3Qvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvZGVhc3Npc3Qv
Y29tcGxldGUvQ29tcGxldGlvblBhcnNlci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvZGVhc3Npc3Qvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvZGVhc3Npc3QvY29tcGxldGUv
Q29tcGxldGlvblBhcnNlci5qYXZhCkBAIC0yNDI2LDggKzI0MjYsMTcgQEAKIAkgICBkZWNpZGUg
d2hldGhlciB0byBjYWxsIGNvbnRhY3ROb2RlTGlzdHMuIFNlZSBQYXJzZXIuY29uc3VtZUJsb2Nr
U3RhdGVtZW50KHMpIAogCSovCiAJaWYgKHRoaXMuc2hvdWxkU3RhY2tBc3Npc3ROb2RlICYmIHRo
aXMuYXNzaXN0Tm9kZSAhPSBudWxsKQotCQl0aGlzLmFzdFN0YWNrW3RoaXMuYXN0UHRyXSA9IHRo
aXMuYXNzaXN0Tm9kZTsKKwkJdGhpcy5hc3RTdGFja1t0aGlzLmFzdFB0cl0gPSB0aGlzLmFzc2lz
dE5vZGVQYXJlbnQgaW5zdGFuY2VvZiBNZXNzYWdlU2VuZCA/IHRoaXMuYXNzaXN0Tm9kZVBhcmVu
dCA6IHRoaXMuYXNzaXN0Tm9kZTsKIAl0aGlzLnNob3VsZFN0YWNrQXNzaXN0Tm9kZSA9IGZhbHNl
OworfQorQE92ZXJyaWRlCitwcm90ZWN0ZWQgdm9pZCBjb25zdW1lQmxvY2tTdGF0ZW1lbnQoKSB7
CisJc3VwZXIuY29uc3VtZUJsb2NrU3RhdGVtZW50KCk7CisJaWYgKHRoaXMuc2hvdWxkU3RhY2tB
c3Npc3ROb2RlICYmIHRoaXMuYXNzaXN0Tm9kZSAhPSBudWxsKSB7CisJCVN0YXRlbWVudCBzdG10
ID0gKFN0YXRlbWVudCkgdGhpcy5hc3RTdGFja1t0aGlzLmFzdFB0cl07CisJCWlmIChzdG10LnNv
dXJjZVN0YXJ0IDw9IHRoaXMuYXNzaXN0Tm9kZS5zb3VyY2VTdGFydCAmJiBzdG10LnNvdXJjZUVu
ZCA+PSB0aGlzLmFzc2lzdE5vZGUuc291cmNlRW5kKQorCQkJdGhpcy5zaG91bGRTdGFja0Fzc2lz
dE5vZGUgPSBmYWxzZTsKKwl9CiB9CiBwcm90ZWN0ZWQgdm9pZCBjb25zdW1lRW5oYW5jZWRGb3JT
dGF0ZW1lbnQoKSB7CiAJc3VwZXIuY29uc3VtZUVuaGFuY2VkRm9yU3RhdGVtZW50KCk7CkBAIC0y
NjA4LDggKzI2MTcsNiBAQAogCQlpZiAodGhpcy5jdXJyZW50RWxlbWVudCAhPSBudWxsKSB7CiAJ
CQl0aGlzLnJlc3RhcnRSZWNvdmVyeSA9IHRydWU7CiAJCX0KLQkJaWYgKCFpc0luc2lkZU1ldGhv
ZCgpKQotCQkJcG9wRWxlbWVudChLX0ZJRUxEX0lOSVRJQUxJWkVSX0RFTElNSVRFUik7CiAJfQog
fQogcHJvdGVjdGVkIHZvaWQgY29uc3VtZUV4aXRWYXJpYWJsZVdpdGhvdXRJbml0aWFsaXphdGlv
bigpIHsKQEAgLTMyNjgsNiArMzI3NSwxMyBAQAogCXN1cGVyLmNvbnN1bWVMYWJlbCgpOwogCXB1
c2hPbkxhYmVsU3RhY2sodGhpcy5pZGVudGlmaWVyU3RhY2tbdGhpcy5pZGVudGlmaWVyUHRyXSk7
CiAJdGhpcy5wdXNoT25FbGVtZW50U3RhY2soS19MQUJFTCwgdGhpcy5sYWJlbFB0cik7Cit9CitA
T3ZlcnJpZGUKK3Byb3RlY3RlZCB2b2lkIGNvbnN1bWVMYW1iZGFFeHByZXNzaW9uKCkgeworCXN1
cGVyLmNvbnN1bWVMYW1iZGFFeHByZXNzaW9uKCk7CisJRXhwcmVzc2lvbiBleHByZXNzaW9uID0g
dGhpcy5leHByZXNzaW9uU3RhY2tbdGhpcy5leHByZXNzaW9uUHRyXTsKKwlpZiAodGhpcy5hc3Np
c3ROb2RlID09IG51bGwgfHwgISh0aGlzLmFzc2lzdE5vZGUuc291cmNlU3RhcnQgPj0gZXhwcmVz
c2lvbi5zb3VyY2VTdGFydCAmJiB0aGlzLmFzc2lzdE5vZGUuc291cmNlRW5kIDw9IGV4cHJlc3Np
b24uc291cmNlRW5kKSkKKwkJcG9wRWxlbWVudChLX0xBTUJEQV9FWFBSRVNTSU9OX0RFTElNSVRF
Uik7CiB9CiBwcm90ZWN0ZWQgdm9pZCBjb25zdW1lTWFya2VyQW5ub3RhdGlvbihib29sZWFuIGlz
VHlwZUFubm90YXRpb24pIHsKIAlpZiAodGhpcy50b3BLbm93bkVsZW1lbnRLaW5kKENPTVBMRVRJ
T05fT1JfQVNTSVNUX1BBUlNFUikgPT0gS19CRVRXRUVOX0FOTk9UQVRJT05fTkFNRV9BTkRfUlBB
UkVOICYmCkBAIC01MTUzLDYgKzUxNjcsMTEgQEAKIAl0aGlzLnNob3VsZFN0YWNrQXNzaXN0Tm9k
ZSA9IHRydWU7CiB9CiAKK0BPdmVycmlkZQorcHJvdGVjdGVkIGJvb2xlYW4gYXNzaXN0Tm9kZU5l
ZWRzU3RhY2tpbmcoKSB7CisJcmV0dXJuIHRoaXMuc2hvdWxkU3RhY2tBc3Npc3ROb2RlOworfQor
CiBwdWJsaWMgIFN0cmluZyB0b1N0cmluZygpIHsKIAlTdHJpbmdCdWZmZXIgYnVmZmVyID0gbmV3
IFN0cmluZ0J1ZmZlcigpOwogCWJ1ZmZlci5hcHBlbmQoImVsZW1lbnRLaW5kU3RhY2sgOiBpbnRb
XSA9IHsiKTsgLy8kTk9OLU5MUy0xJApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29kZWFzc2lzdC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29kZWFzc2lzdC9pbXBsL0Fzc2lz
dFBhcnNlci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29kZWFzc2lzdC9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29kZWFzc2lzdC9pbXBsL0Fzc2lzdFBhcnNlci5qYXZhCmluZGV4IDIy
M2U1ZjMuLjlkMDgzZjQgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvZGVhc3Np
c3Qvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvZGVhc3Npc3QvaW1wbC9Bc3Npc3RQYXJzZXIu
amF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb2RlYXNzaXN0L29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb2RlYXNzaXN0L2ltcGwvQXNzaXN0UGFyc2VyLmphdmEKQEAgLTIzMiw3ICsy
MzIsNyBAQAogCQkJCQlicmVhazsKIAkJCQl9CiAJCQkJaWYgKHRoaXMuYmxvY2tTdGFydHNbal0g
IT0gbGFzdFN0YXJ0KXsgLy8gYXZvaWQgbXVsdGlwbGUgYmxvY2sgaWYgYXQgc2FtZSBwb3NpdGlv
bgotCQkJCQlibG9jayA9IG5ldyBCbG9jaygwLCBsYXN0Tm9kZSBpbnN0YW5jZW9mIExhbWJkYUV4
cHJlc3Npb24pOworCQkJCQlibG9jayA9IG5ldyBCbG9jaygwKTsKIAkJCQkJYmxvY2suc291cmNl
U3RhcnQgPSBsYXN0U3RhcnQgPSB0aGlzLmJsb2NrU3RhcnRzW2pdOwogCQkJCQllbGVtZW50ID0g
ZWxlbWVudC5hZGQoYmxvY2ssIDEpOwogCQkJCX0KQEAgLTMzMyw4ICszMzMsMTEgQEAKIAkJCXRo
aXMubGFzdENoZWNrUG9pbnQgPSBpbXBvcnRSZWYuZGVjbGFyYXRpb25Tb3VyY2VFbmQgKyAxOwog
CQl9CiAJfQotCWlmICh0aGlzLmN1cnJlbnRUb2tlbiA9PSBUb2tlbk5hbWVSQlJBQ0UgJiYgIWlz
SW5kaXJlY3RseUluc2lkZUxhbWJkYUV4cHJlc3Npb24oKSkgewotCQl0aGlzLmN1cnJlbnRUb2tl
biA9IDA7IC8vIGNsb3NpbmcgYnJhY2UgaGFzIGFscmVhZHkgYmVlbiB0YWtlbiBjYXJlIG9mCisJ
aWYgKHRoaXMuY3VycmVudFRva2VuID09IFRva2VuTmFtZVJCUkFDRSkgeworCQkgaWYgKGlzSW5k
aXJlY3RseUluc2lkZUxhbWJkYUV4cHJlc3Npb24oKSkKKwkJCSB0aGlzLmlnbm9yZU5leHRDbG9z
aW5nQnJhY2UgPSB0cnVlOworCQkgZWxzZSAKKwkJCSB0aGlzLmN1cnJlbnRUb2tlbiA9IDA7IC8v
IGNsb3NpbmcgYnJhY2UgaGFzIGFscmVhZHkgYmVlbiB0YWtlbiBjYXJlIG9mCiAJfQogCiAJLyog
bWlnaHQgbmVlZCBzb21lIGV4dHJhIGJsb2NrIChhZnRlciB0aGUgbGFzdCByZWR1Y2VkIG5vZGUp
ICovCkBAIC0zNDQsNyArMzQ3LDcgQEAKIAlmb3IgKGludCBqID0gYmxvY2tJbmRleDsgaiA8PSB0
aGlzLnJlYWxCbG9ja1B0cjsgaisrKXsKIAkJaWYgKHRoaXMuYmxvY2tTdGFydHNbal0gPj0gMCkg
ewogCQkJaWYgKCh0aGlzLmJsb2NrU3RhcnRzW2pdIDwgcG9zIHx8IGNyZWF0ZUxhbWJkYUJsb2Nr
KSAmJiAodGhpcy5ibG9ja1N0YXJ0c1tqXSAhPSBsYXN0U3RhcnQpKXsgLy8gYXZvaWQgbXVsdGlw
bGUgYmxvY2sgaWYgYXQgc2FtZSBwb3NpdGlvbgotCQkJCWJsb2NrID0gbmV3IEJsb2NrKDAsIGNy
ZWF0ZUxhbWJkYUJsb2NrKTsKKwkJCQlibG9jayA9IG5ldyBCbG9jaygwKTsKIAkJCQlibG9jay5z
b3VyY2VTdGFydCA9IGxhc3RTdGFydCA9IHRoaXMuYmxvY2tTdGFydHNbal07CiAJCQkJZWxlbWVu
dCA9IGVsZW1lbnQuYWRkKGJsb2NrLCAxKTsKIAkJCQljcmVhdGVMYW1iZGFCbG9jayA9IGZhbHNl
OwpAQCAtNDc3LDE0ICs0ODAsMTUgQEAKIAkJCSAgIFNlZSBhbHNvIHRoYXQgdGhpcyBjb25jZXJu
IGRvZXMgbm90IGFyaXNlIGluIHRoZSBjYXNlIG9mIGZpZWxkL2xvY2FsIGluaXRpYWxpemF0aW9u
IHNpbmNlIHRoZSBpbml0aWFsaXplciBpcyByZXBsYWNlZCB3aXRoIGZ1bGwgdHJlZSBieSBjb25z
dW1lRXhpdFZhcmlhYmxlV2l0aEluaXRpYWxpemF0aW9uLgogCQkJKi8KIAkJCVJlY292ZXJlZEJs
b2NrIHJlY292ZXJlZEJsb2NrID0gKFJlY292ZXJlZEJsb2NrKSAodGhpcy5jdXJyZW50RWxlbWVu
dCBpbnN0YW5jZW9mIFJlY292ZXJlZEJsb2NrID8gdGhpcy5jdXJyZW50RWxlbWVudCA6IAotCQkJ
CSh0aGlzLmN1cnJlbnRFbGVtZW50LnBhcmVudCBpbnN0YW5jZW9mIFJlY292ZXJlZEJsb2NrKSA/
IHRoaXMuY3VycmVudEVsZW1lbnQucGFyZW50IDogbnVsbCk7CisJCQkJKHRoaXMuY3VycmVudEVs
ZW1lbnQucGFyZW50IGluc3RhbmNlb2YgUmVjb3ZlcmVkQmxvY2spID8gdGhpcy5jdXJyZW50RWxl
bWVudC5wYXJlbnQgOiAKKwkJCQkJdGhpcy5jdXJyZW50RWxlbWVudCBpbnN0YW5jZW9mIFJlY292
ZXJlZE1ldGhvZCA/ICgoUmVjb3ZlcmVkTWV0aG9kKSB0aGlzLmN1cnJlbnRFbGVtZW50KS5tZXRo
b2RCb2R5IDogbnVsbCk7CiAJCQlpZiAocmVjb3ZlcmVkQmxvY2sgIT0gbnVsbCkgewogCQkJCVJl
Y292ZXJlZFN0YXRlbWVudCByZWNvdmVyZWRTdGF0ZW1lbnQgPSByZWNvdmVyZWRCbG9jay5zdGF0
ZW1lbnRDb3VudCA+IDAgPyByZWNvdmVyZWRCbG9jay5zdGF0ZW1lbnRzW3JlY292ZXJlZEJsb2Nr
LnN0YXRlbWVudENvdW50IC0gMV0gOiBudWxsOwogCQkJCUFTVE5vZGUgcGFyc2VUcmVlID0gcmVj
b3ZlcmVkU3RhdGVtZW50ICE9IG51bGwgPyByZWNvdmVyZWRTdGF0ZW1lbnQudXBkYXRlZFN0YXRl
bWVudCgwLCBuZXcgSGFzaFNldCgpKSA6IG51bGw7CiAJCQkJaWYgKHBhcnNlVHJlZSAhPSBudWxs
KSB7CiAJCQkJCWlmICgocGFyc2VUcmVlLnNvdXJjZVN0YXJ0ID09IDAgfHwgcGFyc2VUcmVlLnNv
dXJjZUVuZCA9PSAwKSB8fCAocGFyc2VUcmVlLnNvdXJjZVN0YXJ0ID49IHN0YXRlbWVudFN0YXJ0
ICYmIHBhcnNlVHJlZS5zb3VyY2VFbmQgPD0gc3RhdGVtZW50RW5kKSkgewotCQkJCQkJcmVjb3Zl
cmVkQmxvY2suc3RhdGVtZW50c1stLXJlY292ZXJlZEJsb2NrLnN0YXRlbWVudENvdW50XSA9IG51
bGw7Ci0JCQkJCQl0aGlzLmN1cnJlbnRFbGVtZW50ID0gcmVjb3ZlcmVkQmxvY2s7CisJCQkJCQly
ZWNvdmVyZWRCbG9jay5zdGF0ZW1lbnRzW3JlY292ZXJlZEJsb2NrLnN0YXRlbWVudENvdW50IC0g
MV0gPSBuZXcgUmVjb3ZlcmVkU3RhdGVtZW50KHN0YXRlbWVudCwgcmVjb3ZlcmVkQmxvY2ssIDAp
OworCQkJCQkJc3RhdGVtZW50ID0gbnVsbDsKIAkJCQkJfSBlbHNlIGlmIChyZWNvdmVyZWRTdGF0
ZW1lbnQgaW5zdGFuY2VvZiBSZWNvdmVyZWRMb2NhbFZhcmlhYmxlICYmIHN0YXRlbWVudCBpbnN0
YW5jZW9mIEV4cHJlc3Npb24pIHsKIAkJCQkJCVJlY292ZXJlZExvY2FsVmFyaWFibGUgbG9jYWwg
PSAoUmVjb3ZlcmVkTG9jYWxWYXJpYWJsZSkgcmVjb3ZlcmVkU3RhdGVtZW50OwogCQkJCQkJaWYg
KGxvY2FsLmxvY2FsRGVjbGFyYXRpb24gIT0gbnVsbCAmJiBsb2NhbC5sb2NhbERlY2xhcmF0aW9u
LmluaXRpYWxpemF0aW9uICE9IG51bGwpIHsKQEAgLTc5Myw2ICs3OTcsNyBAQAogCS8vIGlmIHdl
IGFyZSBub3QgaW4gYSBtZXRob2QgKGkuZS4gd2Ugd2VyZSBub3QgaW4gYSBsb2NhbCB2YXJpYWJs
ZSBpbml0aWFsaXplcikKIAkvLyB0aGVuIHdlIGFyZSBleGl0aW5nIGEgZmllbGQgaW5pdGlhbGl6
ZXIKIAlpZiAoIWlzSW5zaWRlTWV0aG9kKCkpIHsKKwkJcG9wVW50aWxFbGVtZW50KEtfRklFTERf
SU5JVElBTElaRVJfREVMSU1JVEVSKTsKIAkJcG9wRWxlbWVudChLX0ZJRUxEX0lOSVRJQUxJWkVS
X0RFTElNSVRFUik7CiAJfQogfQpAQCAtMTY5NywxMiArMTcwMiw3IEBACiAJCXJldHVybjsKIAkK
IAlpbnQgc3RhY2tQb2ludGVyID0gdGhpcy5lbGVtZW50UHRyOwotCQotCWlmICh0aGlzLmVsZW1l
bnRLaW5kU3RhY2tbc3RhY2tQb2ludGVyXSA9PSBLX0xBTUJEQV9FWFBSRVNTSU9OX0RFTElNSVRF
UikgewotCQlpZiAoa2luZCA9PSBLX0ZJRUxEX0lOSVRJQUxJWkVSX0RFTElNSVRFUikgLy8gd2Fp
dCB1bnRpbCBsYW1iZGEgaXMgcmVkdWNlZC4KLQkJCXJldHVybjsKLQl9Ci0JCisKIAlpZiAoa2lu
ZCAhPSBLX0xBTUJEQV9FWFBSRVNTSU9OX0RFTElNSVRFUikgewogCQl3aGlsZSAodGhpcy5lbGVt
ZW50S2luZFN0YWNrW3N0YWNrUG9pbnRlcl0gPT0gS19MQU1CREFfRVhQUkVTU0lPTl9ERUxJTUlU
RVIpIHsKIAkJCXN0YWNrUG9pbnRlciAtLTsKQEAgLTE4ODcsNiArMTg4Nyw4IEBACiAJCQkJcmV0
dXJuIG1vZGU7CiAJCQkvLyBlbHNlIGZhbGwgdGhyb3VnaCBhbmQgUkVTVEFSVAogCQl9IGVsc2Ug
eworCQkJaWYgKHRoaXMuY3VycmVudFRva2VuID09IFRva2VuTmFtZUxCUkFDRSkKKwkJCQl0aGlz
Lmlnbm9yZU5leHRPcGVuaW5nQnJhY2UgPSB0cnVlOyAgLy8gYWxyZWFkeSBhY2NvdW50ZWQgZm9y
IGluIHJlY292ZXJ5IHRva2VuIGNoZWNrLgogCQkJcmV0dXJuIFJFU1VNRTsKIAkJfQogCX0KZGlm
ZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvZGVhc3Npc3Qvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvZGVhc3Npc3Qvc2VsZWN0L1NlbGVjdGlvblBhcnNlci5qYXZhIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29kZWFzc2lzdC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29kZWFz
c2lzdC9zZWxlY3QvU2VsZWN0aW9uUGFyc2VyLmphdmEKaW5kZXggMTk2ODI2NC4uZDcyYzUxYSAx
MDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29kZWFzc2lzdC9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29kZWFzc2lzdC9zZWxlY3QvU2VsZWN0aW9uUGFyc2VyLmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29kZWFzc2lzdC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29kZWFzc2lzdC9zZWxlY3QvU2VsZWN0aW9uUGFyc2VyLmphdmEKQEAgLTExOCw4ICsxMTgsMTQg
QEAKIAkJCQl0aGlzLmN1cnJlbnRFbGVtZW50ID0gdGhpcy5jdXJyZW50RWxlbWVudC5hZGQoc3Rh
dGVtZW50LCAwKTsKIAkJCX0KIAkJfQotCQlpZiAoIWlzSW5kaXJlY3RseUluc2lkZUxhbWJkYUV4
cHJlc3Npb24oKSkKKwkJaWYgKGlzSW5kaXJlY3RseUluc2lkZUxhbWJkYUV4cHJlc3Npb24oKSkg
eworCQkJaWYgKHRoaXMuY3VycmVudFRva2VuID09IFRva2VuTmFtZUxCUkFDRSkKKwkJCQl0aGlz
Lmlnbm9yZU5leHRPcGVuaW5nQnJhY2UgPSB0cnVlOworCQkJZWxzZSBpZiAodGhpcy5jdXJyZW50
VG9rZW4gPT0gVG9rZW5OYW1lUkJSQUNFKQorCQkJCXRoaXMuaWdub3JlTmV4dENsb3NpbmdCcmFj
ZSA9IHRydWU7CisJCX0gZWxzZSB7CiAJCQl0aGlzLmN1cnJlbnRUb2tlbiA9IDA7IC8vIGdpdmVu
IHdlIGFyZSBub3Qgb24gYW4gZW9mLCB3ZSBkbyBub3Qgd2FudCBzaWRlIGVmZmVjdHMgY2F1c2Vk
IGJ5IGxvb2tlZC1haGVhZCB0b2tlbgorCQl9CiAJfQogfQogcHJpdmF0ZSB2b2lkIGJ1aWxkTW9y
ZUNvbXBsZXRpb25Db250ZXh0KEV4cHJlc3Npb24gZXhwcmVzc2lvbikgewpAQCAtNTUyLDggKzU1
OCwxMCBAQAogCWlmICghdGhpcy5kaWV0KXsKIAkJdGhpcy5yZXN0YXJ0UmVjb3ZlcnkJPSB0cnVl
OwkvLyBmb3JjZSB0byByZXN0YXJ0IGluIHJlY292ZXJ5IG1vZGUKIAkJdGhpcy5sYXN0SWdub3Jl
ZFRva2VuID0gLTE7Ci0JCWlmICghaXNJbmRpcmVjdGx5SW5zaWRlTGFtYmRhRXhwcmVzc2lvbigp
KQotCQkJdGhpcy5jdXJyZW50VG9rZW4gPSAwOyAvLyBvcGVuaW5nIGJyYWNlIGFscmVhZHkgdGFr
ZW4gaW50byBhY2NvdW50CisJCWlmIChpc0luZGlyZWN0bHlJbnNpZGVMYW1iZGFFeHByZXNzaW9u
KCkpCisJCQl0aGlzLmlnbm9yZU5leHRPcGVuaW5nQnJhY2UgPSB0cnVlOworCQllbHNlIAorCQkJ
dGhpcy5jdXJyZW50VG9rZW4gPSAwOyAvLyBvcGVuaW5nIGJyYWNlIGFscmVhZHkgdGFrZW4gaW50
byBhY2NvdW50LgogCQl0aGlzLmhhc1JlcG9ydGVkRXJyb3IgPSB0cnVlOwogCX0KIApAQCAtNTYz
LDggKzU3MSwxMCBAQAogCWlmICh0aGlzLmN1cnJlbnRFbGVtZW50ICE9IG51bGwpewogCQl0aGlz
Lmxhc3RDaGVja1BvaW50ID0gYW5vbnltb3VzVHlwZS5ib2R5U3RhcnQ7CiAJCXRoaXMuY3VycmVu
dEVsZW1lbnQgPSB0aGlzLmN1cnJlbnRFbGVtZW50LmFkZChhbm9ueW1vdXNUeXBlLCAwKTsKLQkJ
aWYgKCFpc0luZGlyZWN0bHlJbnNpZGVMYW1iZGFFeHByZXNzaW9uKCkpCi0JCQl0aGlzLmN1cnJl
bnRUb2tlbiA9IDA7IC8vIG9wZW5pbmcgYnJhY2UgYWxyZWFkeSB0YWtlbiBpbnRvIGFjY291bnQK
KwkJaWYgKGlzSW5kaXJlY3RseUluc2lkZUxhbWJkYUV4cHJlc3Npb24oKSkKKwkJCXRoaXMuaWdu
b3JlTmV4dE9wZW5pbmdCcmFjZSA9IHRydWU7CisJCWVsc2UgCisJCQl0aGlzLmN1cnJlbnRUb2tl
biA9IDA7IC8vIG9wZW5pbmcgYnJhY2UgYWxyZWFkeSB0YWtlbiBpbnRvIGFjY291bnQuCiAJCXRo
aXMubGFzdElnbm9yZWRUb2tlbiA9IC0xOwogCX0KIH0KQEAgLTc2OSw2ICs3NzksOCBAQAogCQkJ
dGhpcy5leHByZXNzaW9uU3RhY2tbdGhpcy5leHByZXNzaW9uUHRyXSA9IG5ldyBTZWxlY3Rpb25P
bkxhbWJkYUV4cHJlc3Npb24oZXhwcmVzc2lvbik7CiAJCX0KIAl9CisJaWYgKCEodGhpcy5zZWxl
Y3Rpb25TdGFydCA+PSBleHByZXNzaW9uLnNvdXJjZVN0YXJ0ICYmIHRoaXMuc2VsZWN0aW9uRW5k
IDw9IGV4cHJlc3Npb24uc291cmNlRW5kKSkKKwkJcG9wRWxlbWVudChLX0xBTUJEQV9FWFBSRVNT
SU9OX0RFTElNSVRFUik7CiB9CiBAT3ZlcnJpZGUKIHByb3RlY3RlZCB2b2lkIGNvbnN1bWVSZWZl
cmVuY2VFeHByZXNzaW9uKFJlZmVyZW5jZUV4cHJlc3Npb24gcmVmZXJlbmNlRXhwcmVzc2lvbikg
ewpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9CbG9jay5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9CbG9jay5q
YXZhCmluZGV4IDE5YzkxMmMuLmU3YWY4MmYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQmxvY2su
amF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L0Jsb2NrLmphdmEKQEAgLTI3LDEyICsyNyw3IEBACiAJcHVi
bGljIGludCBleHBsaWNpdERlY2xhcmF0aW9uczsKIAkvLyB0aGUgbnVtYmVyIG9mIGV4cGxpY2l0
IGRlY2xhcmF0aW9uICwgdXNlZCB0byBjcmVhdGUgc2NvcGUKIAlwdWJsaWMgQmxvY2tTY29wZSBz
Y29wZTsKLQlwdWJsaWMgYm9vbGVhbiBsYW1iZGFCb2R5OwogCi1wdWJsaWMgQmxvY2soaW50IGV4
cGxpY2l0RGVjbGFyYXRpb25zLCBib29sZWFuIGxhbWJkYUJvZHkpIHsKLQl0aGlzLmV4cGxpY2l0
RGVjbGFyYXRpb25zID0gZXhwbGljaXREZWNsYXJhdGlvbnM7Ci0JdGhpcy5sYW1iZGFCb2R5ID0g
bGFtYmRhQm9keTsKLX0KIHB1YmxpYyBCbG9jayhpbnQgZXhwbGljaXREZWNsYXJhdGlvbnMpIHsK
IAl0aGlzLmV4cGxpY2l0RGVjbGFyYXRpb25zID0gZXhwbGljaXREZWNsYXJhdGlvbnM7CiB9CmRp
ZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L0xhbWJkYUV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3Qv
TGFtYmRhRXhwcmVzc2lvbi5qYXZhCmluZGV4IGNjMjA4NzcuLjU4ZmFlYTkgMTAwNjQ0Ci0tLSBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFtYmRh
RXhwcmVzc2lvbi5qYXZhCkBAIC0xMjAsNyArMTIwLDcgQEAKIAlwcml2YXRlIFNldCB0aHJvd25F
eGNlcHRpb25zOwogCXB1YmxpYyBjaGFyW10gdGV4dDsgIC8vIHNvdXJjZSByZXByZXNlbnRhdGlv
biBvZiB0aGUgbGFtYmRhLgogCXByaXZhdGUgc3RhdGljIGZpbmFsIFN5bnRoZXRpY0FyZ3VtZW50
QmluZGluZyBbXSBOT19TWU5USEVUSUNfQVJHVU1FTlRTID0gbmV3IFN5bnRoZXRpY0FyZ3VtZW50
QmluZGluZ1swXTsKLQlwcml2YXRlIHN0YXRpYyBmaW5hbCBCbG9jayBOT19CT0RZID0gbmV3IEJs
b2NrKDAsIHRydWUpOworCXByaXZhdGUgc3RhdGljIGZpbmFsIEJsb2NrIE5PX0JPRFkgPSBuZXcg
QmxvY2soMCk7CiAKIAlwdWJsaWMgTGFtYmRhRXhwcmVzc2lvbihDb21waWxhdGlvblJlc3VsdCBj
b21waWxhdGlvblJlc3VsdCwgYm9vbGVhbiBhc3Npc3ROb2RlLCBib29sZWFuIHJlcXVpcmVzR2Vu
ZXJpY1NpZ25hdHVyZSkgewogCQlzdXBlcihjb21waWxhdGlvblJlc3VsdCk7CmRpZmYgLS1naXQg
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvcGFyc2VyL0NvbW1pdFJvbGxiYWNrUGFyc2VyLmphdmEgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcGFyc2Vy
L0NvbW1pdFJvbGxiYWNrUGFyc2VyLmphdmEKaW5kZXggZWMzMDM2ZC4uYWMwOWU2OCAxMDA2NDQK
LS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL3BhcnNlci9Db21taXRSb2xsYmFja1BhcnNlci5qYXZhCisrKyBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9wYXJzZXIvQ29tbWl0Um9sbGJhY2tQYXJzZXIuamF2YQpAQCAtNTYsMjggKzU2LDI4IEBACiAJ
Ly8gV2UgZ2V0IGhlcmUgb24gcmVhbCBzeW50YXggZXJyb3Igb3Igc3ludGF4IGVycm9yIHRyaWdn
ZXJlZCBieSBmYWtlIEVPRiBhdCBjb21wbGV0aW9uIHNpdGUsIG5ldmVyIGR1ZSB0byB0cmlnZ2Vy
ZWQgcmVjb3ZlcnkuCiAJcHJvdGVjdGVkIGludCBmYWxsQmFja1RvU3ByaW5nRm9yd2FyZChTdGF0
ZW1lbnQgdW51c2VkKSB7CiAJCWludCBuZXh0VG9rZW47Ci0JCWJvb2xlYW4gYXRDb21wbGV0aW9u
U2l0ZSA9IGZhbHNlOwogCQlpbnQgYXV0b21hdG9uU3RhdGUgPSBhdXRvbWF0b25TdGF0ZSgpOwog
CQkJCQogCQkvLyBJZiB0cmlnZ2VyZWQgZmFrZSBFT0YgYXQgY29tcGxldGlvbiBzaXRlLCBzZWUg
aWYgdGhlIHJlYWwgbmV4dCB0b2tlbiB3b3VsZCBoYXZlIHBhc3NlZCBtdXN0ZXIuCiAJCWlmICh0
aGlzLmN1cnJlbnRUb2tlbiA9PSBUb2tlbk5hbWVFT0YpIHsKIAkJCWlmICh0aGlzLnNjYW5uZXIu
ZW9mUG9zaXRpb24gPCB0aGlzLnNjYW5uZXIuc291cmNlLmxlbmd0aCkgewotCQkJCWF0Q29tcGxl
dGlvblNpdGUgPSB0cnVlOworCQkJCXNob3VsZFN0YWNrQXNzaXN0Tm9kZSgpOwogCQkJCXRoaXMu
c2Nhbm5lci5lb2ZQb3NpdGlvbiA9IHRoaXMuc2Nhbm5lci5zb3VyY2UubGVuZ3RoOwogCQkJCW5l
eHRUb2tlbiA9IGdldE5leHRUb2tlbigpOwogCQkJCWlmIChhdXRvbWF0b25XaWxsU2hpZnQobmV4
dFRva2VuLCBhdXRvbWF0b25TdGF0ZSkpIHsKIAkJCQkJdGhpcy5jdXJyZW50VG9rZW4gPSBuZXh0
VG9rZW47CiAJCQkJCXJldHVybiBSRVNVTUU7CiAJCQkJfQorCQkJCXRoaXMuc2Nhbm5lci51bmdl
dFRva2VuKG5leHRUb2tlbik7IC8vIHNwaXQgb3V0IHdoYXQgaGFzIGJlZW4gYml0dGVuIG1vcmUg
dGhhbiB3ZSBjYW4gY2hldy4KIAkJCX0gZWxzZSB7Ci0JCQkJbmV4dFRva2VuID0gVG9rZW5OYW1l
RU9GOworCQkJCXJldHVybiBIQUxUOyAvLyBkb24ndCBrbm93IGhvdyB0byBwcm9jZWVkLgogCQkJ
fQogCQl9IGVsc2UgewogCQkJbmV4dFRva2VuID0gdGhpcy5jdXJyZW50VG9rZW47CisJCQl0aGlz
LnNjYW5uZXIudW5nZXRUb2tlbihuZXh0VG9rZW4pOworCQkJaWYgKG5leHRUb2tlbiA9PSBUb2tl
bk5hbWVSQlJBQ0UpCisJCQkJaWdub3JlTmV4dENsb3NpbmdCcmFjZSgpOyAvLyBoYXZpbmcgdW5n
b3R0ZW4gaXQsIHJlY292ZXJ5VG9rZW5DaGVjayB3aWxsIHNlZSB0aGlzIGFnYWluLiAKIAkJfQot
CQlpZiAobmV4dFRva2VuID09IFRva2VuTmFtZUVPRikKLQkJCXJldHVybiBIQUxUOyAvLyBkb24n
dCBrbm93IGhvdyB0byBwcm9jZWVkLgotCQl0aGlzLnNjYW5uZXIudW5nZXRUb2tlbihuZXh0VG9r
ZW4pOyAvLyBzcGl0IG91dCB3aGF0IGhhcyBiZWVuIGJpdHRlbiBtb3JlIHRoYW4gd2UgY2FuIGNo
ZXcuCiAJCS8vIE9LLCBuZXh0IHRva2VuIGlzIG5vIGdvb2QgdG8gcmVzdW1lICJpbiBwbGFjZSIs
IGF0dGVtcHQgc29tZSBsb2NhbCByZXBhaXIuIEZJWE1FOiBuZWVkIHRvIG1ha2Ugc3VyZSB3ZSBk
b24ndCBnZXQgc3R1Y2sga2VlcCByZWR1Y2luZyBlbXB0eSBzdGF0ZW1lbnRzICEhCiAJCWZvciAo
aW50IGkgPSAwLCBsZW5ndGggPSBSRUNPVkVSWV9UT0tFTlMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBp
KyspIHsKIAkJCWlmIChhdXRvbWF0b25XaWxsU2hpZnQoUkVDT1ZFUllfVE9LRU5TW2ldLCBhdXRv
bWF0b25TdGF0ZSkpIHsKQEAgLTkwLDE1ICs5MCwyMiBAQAogCQkJcmV0dXJuIFJFU1RBUlQ7CiAK
IAkJdGhpcy5jb3B5U3RhdGUodGhpcy5zbmFwU2hvdCk7Ci0JCWlmIChhdENvbXBsZXRpb25TaXRl
KSB7CisJCWlmIChhc3Npc3ROb2RlTmVlZHNTdGFja2luZygpKSB7CiAJCQl0aGlzLmN1cnJlbnRU
b2tlbiA9IFRva2VuTmFtZVNFTUlDT0xPTjsKLQkJCXNob3VsZFN0YWNrQXNzaXN0Tm9kZSgpOwog
CQkJcmV0dXJuIFJFU1VNRTsKIAkJfQogCQl0aGlzLmN1cnJlbnRUb2tlbiA9IHRoaXMuc2Nhbm5l
ci5mYXN0Rm9yd2FyZCh1bnVzZWQpOwogCQlyZXR1cm4gUkVTVU1FOwogCX0KIAorCXByb3RlY3Rl
ZCB2b2lkIGlnbm9yZU5leHRDbG9zaW5nQnJhY2UoKSB7CisJCXJldHVybjsKKwl9CisKKwlwcm90
ZWN0ZWQgYm9vbGVhbiBhc3Npc3ROb2RlTmVlZHNTdGFja2luZygpIHsKKwkJcmV0dXJuIGZhbHNl
OworCX0KKwogCXB1YmxpYyBhYnN0cmFjdCBpbnQgYXV0b21hdG9uU3RhdGUoKTsKIAogCXB1Ymxp
YyBhYnN0cmFjdCBib29sZWFuIGF1dG9tYXRvbldpbGxTaGlmdChpbnQgbmV4dFRva2VuLCBpbnQg
bGFzdEFjdGlvbik7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcGFyc2VyL1BhcnNlci5qYXZhIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL3BhcnNlci9QYXJzZXIuamF2YQppbmRleCA1ZDllZjQwLi45ZjMyMzQ4IDEwMDY0NAotLS0g
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvcGFyc2VyL1BhcnNlci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wYXJzZXIvUGFyc2VyLmph
dmEKQEAgLTk0Miw2ICs5NDIsNyBAQAogCXByb3RlY3RlZCBpbnQgaWRlbnRpZmllclB0cjsKIAlw
cm90ZWN0ZWQgY2hhcltdW10gaWRlbnRpZmllclN0YWNrOwogCXByb3RlY3RlZCBib29sZWFuIGln
bm9yZU5leHRPcGVuaW5nQnJhY2U7CisJcHJvdGVjdGVkIGJvb2xlYW4gaWdub3JlTmV4dENsb3Np
bmdCcmFjZTsKIAogCS8vcG9zaXRpb25zICwgZGltZW5zaW9ucyAsIC4uLi4gKGludCBzdGFja3Mp
CiAJcHJvdGVjdGVkIGludCBpbnRQdHI7CkBAIC0xNTM5LDcgKzE1NDAsOSBAQAogCQl0aGlzLmxh
c3RDaGVja1BvaW50ID0gYW5vbnltb3VzVHlwZS5ib2R5U3RhcnQgPSB0aGlzLnNjYW5uZXIuY3Vy
cmVudFBvc2l0aW9uOwogCQl0aGlzLmN1cnJlbnRFbGVtZW50ID0gdGhpcy5jdXJyZW50RWxlbWVu
dC5hZGQoYW5vbnltb3VzVHlwZSwgMCk7CiAJCXRoaXMubGFzdElnbm9yZWRUb2tlbiA9IC0xOwot
CQlpZiAoIWlzSW5kaXJlY3RseUluc2lkZUxhbWJkYUV4cHJlc3Npb24oKSkKKwkJaWYgKGlzSW5k
aXJlY3RseUluc2lkZUxhbWJkYUV4cHJlc3Npb24oKSkKKwkJCXRoaXMuaWdub3JlTmV4dE9wZW5p
bmdCcmFjZSA9IHRydWU7CisJCWVsc2UKIAkJCXRoaXMuY3VycmVudFRva2VuID0gMDsgLy8gb3Bl
bmluZyBicmFjZSBhbHJlYWR5IHRha2VuIGludG8gYWNjb3VudAogCQlyZXR1cm47CiAJfQpAQCAt
MzQ3Myw3ICszNDc2LDkgQEAKIAkJdGhpcy5sYXN0Q2hlY2tQb2ludCA9IGFub255bW91c1R5cGUu
Ym9keVN0YXJ0OwogCQl0aGlzLmN1cnJlbnRFbGVtZW50ID0gdGhpcy5jdXJyZW50RWxlbWVudC5h
ZGQoYW5vbnltb3VzVHlwZSwgMCk7CiAJCWlmICghKHRoaXMuY3VycmVudEVsZW1lbnQgaW5zdGFu
Y2VvZiBSZWNvdmVyZWRBbm5vdGF0aW9uKSkgewotCQkJaWYgKCFpc0luZGlyZWN0bHlJbnNpZGVM
YW1iZGFFeHByZXNzaW9uKCkpCisJCQlpZiAoaXNJbmRpcmVjdGx5SW5zaWRlTGFtYmRhRXhwcmVz
c2lvbigpKQorCQkJCXRoaXMuaWdub3JlTmV4dE9wZW5pbmdCcmFjZSA9IHRydWU7CisJCQllbHNl
IAogCQkJCXRoaXMuY3VycmVudFRva2VuID0gMDsgLy8gb3BlbmluZyBicmFjZSBhbHJlYWR5IHRh
a2VuIGludG8gYWNjb3VudAogCQl9IGVsc2UgewogCQkJdGhpcy5pZ25vcmVOZXh0T3BlbmluZ0Jy
YWNlID0gdHJ1ZTsKQEAgLTM2NzUsOCArMzY4MCwxMCBAQAogCSAgCXRoaXMuY3VycmVudEVsZW1l
bnQgPSB0aGlzLmN1cnJlbnRFbGVtZW50LmFkZChhbm9ueW1vdXNUeXBlLCAwKTsKICAgICAgIAl0
aGlzLmxhc3RDaGVja1BvaW50ID0gYW5vbnltb3VzVHlwZS5ib2R5U3RhcnQ7CiAgICAgICAgIHRo
aXMubGFzdElnbm9yZWRUb2tlbiA9IC0xOwotICAgICAgICBpZiAoIWlzSW5kaXJlY3RseUluc2lk
ZUxhbWJkYUV4cHJlc3Npb24oKSkKLSAgICAgICAgCXRoaXMuY3VycmVudFRva2VuID0gMDsgLy8g
b3BlbmluZyBicmFjZSBhbHJlYWR5IHRha2VuIGludG8gYWNjb3VudAorICAgICAgICBpZiAoaXNJ
bmRpcmVjdGx5SW5zaWRlTGFtYmRhRXhwcmVzc2lvbigpKQorCQkJdGhpcy5pZ25vcmVOZXh0T3Bl
bmluZ0JyYWNlID0gdHJ1ZTsKKwkJZWxzZQorCQkJdGhpcy5jdXJyZW50VG9rZW4gPSAwOyAvLyBv
cGVuaW5nIGJyYWNlIGFscmVhZHkgdGFrZW4gaW50byBhY2NvdW50CiAJICB9IGVsc2UgewogCSAg
CSAgaWYodGhpcy5jdXJyZW50VG9rZW4gPT0gVG9rZW5OYW1lU0VNSUNPTE9OKSB7CiAJCSAgCVJl
Y292ZXJlZFR5cGUgY3VycmVudFR5cGUgPSBjdXJyZW50UmVjb3ZlcnlUeXBlKCk7CkBAIC04MDIw
LDcgKzgwMjcsNiBAQAogCQkJYm9keS5zb3VyY2VTdGFydCA9IG9sZEJvZHkuc291cmNlU3RhcnQ7
CiAJCQlib2R5LnNvdXJjZUVuZCA9IG9sZEJvZHkuc291cmNlRW5kOwogCQl9Ci0JCSgoQmxvY2sp
IGJvZHkpLmxhbWJkYUJvZHkgPSB0cnVlOyAvLyBmb3IgY29uc2lzdGVuY3kncyBzYWtlcy4KIAl9
CiAKIAlMYW1iZGFFeHByZXNzaW9uIGxleHAgPSAoTGFtYmRhRXhwcmVzc2lvbikgdGhpcy5hc3RT
dGFja1t0aGlzLmFzdFB0ci0tXTsKQEAgLTEwNTQzLDYgKzEwNTQ5LDExIEBACiAJfQogCXJldHVy
biBmYWxzZTsKIH0KKworQE92ZXJyaWRlCitwcm90ZWN0ZWQgdm9pZCBpZ25vcmVOZXh0Q2xvc2lu
Z0JyYWNlKCkgeworCXRoaXMuaWdub3JlTmV4dENsb3NpbmdCcmFjZSA9IHRydWU7Cit9CiBwcm90
ZWN0ZWQgdm9pZCBpZ25vcmVFeHByZXNzaW9uQXNzaWdubWVudCgpIHsKIAkvLyBBc3NpZ25tZW50
IDo6PSBJbnZhbGlkQXJyYXlJbml0aWFsaXplckFzc2lnbmVtZW50CiAJLy8gZW5jb2RlZCBvcGVy
YXRvciB3b3VsZCBiZTogdGhpcy5pbnRTdGFja1t0aGlzLmludFB0cl0KQEAgLTEyMTQ4LDkgKzEy
MTU5LDE0IEBACiAJCQkJdGhpcy5yZXN0YXJ0UmVjb3ZlcnkgPSB0cnVlOyAvLyBvcGVuaW5nIGJy
YWNlIGRldGVjdGVkCiAJCQkJdGhpcy5jdXJyZW50RWxlbWVudCA9IG5ld0VsZW1lbnQ7CiAJCQl9
CisJCQl0aGlzLmlnbm9yZU5leHRPcGVuaW5nQnJhY2UgPSBmYWxzZTsKIAkJCWJyZWFrOwogCiAJ
CWNhc2UgVG9rZW5OYW1lUkJSQUNFIDoKKwkJCWlmICh0aGlzLmlnbm9yZU5leHRDbG9zaW5nQnJh
Y2UpIHsKKwkJCQl0aGlzLmlnbm9yZU5leHRDbG9zaW5nQnJhY2UgPSBmYWxzZTsKKwkJCQlicmVh
azsKKwkJCX0KIAkJCXRoaXMuckJyYWNlU3RhcnQgPSB0aGlzLnNjYW5uZXIuc3RhcnRQb3NpdGlv
biAtIDE7CiAJCQl0aGlzLnJCcmFjZUVuZCA9IHRoaXMuc2Nhbm5lci5jdXJyZW50UG9zaXRpb24g
LSAxOwogCQkJdGhpcy5lbmRQb3NpdGlvbiA9IGZsdXNoQ29tbWVudHNEZWZpbmVkUHJpb3JUbyh0
aGlzLnJCcmFjZUVuZCk7CkBAIC0xMjE4MSw3ICsxMjE5Nyw2IEBACiAJCQlicmVhazsKIAkJfQog
CX0KLQl0aGlzLmlnbm9yZU5leHRPcGVuaW5nQnJhY2UgPSBmYWxzZTsKIH0KIC8vIEEgUCBJCiBw
cm90ZWN0ZWQgdm9pZCByZXBvcnRTeW50YXhFcnJvcnMoYm9vbGVhbiBpc0RpZXRQYXJzZSwgaW50
IG9sZEZpcnN0VG9rZW4pIHsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wYXJzZXIvUmVjb3ZlcmVkQmxv
Y2suamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9wYXJzZXIvUmVjb3ZlcmVkQmxvY2suamF2YQppbmRleCA4NjM4Yzli
Li41OGMyZWY0IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcGFyc2VyL1JlY292ZXJlZEJsb2NrLmphdmEK
KysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL3BhcnNlci9SZWNvdmVyZWRCbG9jay5qYXZhCkBAIC0xOCw3ICsxOCw2IEBA
CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5BU1ROb2RlOwog
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuQmxvY2s7CiBpbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5GaWVsZERlY2xhcmF0aW9u
OwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuTGFtYmRhRXhw
cmVzc2lvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0Lkxv
Y2FsRGVjbGFyYXRpb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVy
LmFzdC5TdGF0ZW1lbnQ7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVy
LmFzdC5UeXBlRGVjbGFyYXRpb247CkBAIC0xNTUsOSArMTU0LDYgQEAKICAqLwogcHVibGljIFJl
Y292ZXJlZEVsZW1lbnQgYWRkKFN0YXRlbWVudCBzdG10LCBpbnQgYnJhY2tldEJhbGFuY2VWYWx1
ZSwgYm9vbGVhbiBkZWxlZ2F0ZWRCeVBhcmVudCkgewogCQotCWlmIChzdG10IGluc3RhbmNlb2Yg
TGFtYmRhRXhwcmVzc2lvbikgLy8gbGFtYmRhcyBhcmUgcmVjb3ZlcmVkIHVwIHRvIHRoZSBjb250
YWluaW5nIHN0YXRlbWVudCBhbnl3YXlzLgotCQlyZXR1cm4gdGhpczsKLQkKIAlyZXNldFBlbmRp
bmdNb2RpZmllcnMoKTsKIAogCS8qIGRvIG5vdCBjb25zaWRlciBhIG5lc3RlZCBibG9jayBzdGFy
dGluZyBwYXNzZWQgdGhlIGJsb2NrIGVuZCAoaWYgc2V0KQpAQCAtMjkyLDExICsyODgsNiBAQAog
CS8vIGlmIGJsb2NrIHdhcyBub3QgbWFya2VkIHRvIGJlIHByZXNlcnZlZCBvciBlbXB0eSwgdGhl
biBpZ25vcmUgaXQKIAlpZiAoIXRoaXMucHJlc2VydmVDb250ZW50IHx8IHRoaXMuc3RhdGVtZW50
Q291bnQgPT0gMCkgcmV0dXJuIG51bGw7CiAJCi0JLyogSWYgdGhpcyBibG9jayBzdGFuZHMgZm9y
IHRoZSBsYW1iZGEgYm9keSwgdHJhc2ggdGhlIGNvbnRlbnRzLiBMYW1iZGEgZXhwcmVzc2lvbnMg
YXJlIHJlY292ZXJlZCBhcyBwYXJ0IG9mIHRoZSBlbmNsb3Npbmcgc3RhdGVtZW50LgotCSAgIFdl
IHN0aWxsIGhhdmUgbGVmdCBpbiBhIGJsb2NrIGhlcmUgdG8gbWFrZSBzdXJlIHRoYXQgY29udGFp
bmVkIGVsZW1lbnRzIGNhbiBiZSB0cmFwcGVkIGFuZCB0b3NzZWQgb3V0LgotCSovCi0JaWYgKHRo
aXMuYmxvY2tEZWNsYXJhdGlvbi5sYW1iZGFCb2R5KSByZXR1cm4gbnVsbDsgCi0KIAlTdGF0ZW1l
bnRbXSB1cGRhdGVkU3RhdGVtZW50cyA9IG5ldyBTdGF0ZW1lbnRbdGhpcy5zdGF0ZW1lbnRDb3Vu
dF07CiAJaW50IHVwZGF0ZWRDb3VudCA9IDA7CiAKQEAgLTMzNyw5ICszMjgsMTkgQEAKIAlpbnQg
bGFzdEVuZCA9IHRoaXMuYmxvY2tEZWNsYXJhdGlvbi5zb3VyY2VTdGFydDsKIAogCS8vIG9ubHkg
Y29sbGVjdCB0aGUgbm9uLW51bGwgdXBkYXRlZCBzdGF0ZW1lbnRzCisJbmV4dDoKIAlmb3IgKGlu
dCBpID0gMDsgaSA8IHRoaXMuc3RhdGVtZW50Q291bnQ7IGkrKyl7CiAJCVN0YXRlbWVudCB1cGRh
dGVkU3RhdGVtZW50ID0gdGhpcy5zdGF0ZW1lbnRzW2ldLnVwZGF0ZWRTdGF0ZW1lbnQoZGVwdGgs
IGtub3duVHlwZXMpOwotCQlpZiAodXBkYXRlZFN0YXRlbWVudCAhPSBudWxsKXsKKwkJaWYgKHVw
ZGF0ZWRTdGF0ZW1lbnQgIT0gbnVsbCkgeworCQkJZm9yIChpbnQgaiA9IDA7IGogPCBpOyBqKysp
IHsKKwkJCQlpZiAodXBkYXRlZFN0YXRlbWVudHNbal0gaW5zdGFuY2VvZiBMb2NhbERlY2xhcmF0
aW9uKSB7CisJCQkJCUxvY2FsRGVjbGFyYXRpb24gbG9jYWwgPSAoTG9jYWxEZWNsYXJhdGlvbikg
dXBkYXRlZFN0YXRlbWVudHNbal07CisJCQkJCWlmIChsb2NhbC5pbml0aWFsaXphdGlvbiAhPSBu
dWxsKSB7CisJCQkJCQlpZiAodXBkYXRlZFN0YXRlbWVudC5zb3VyY2VTdGFydCA+PSBsb2NhbC5p
bml0aWFsaXphdGlvbi5zb3VyY2VTdGFydCAmJiB1cGRhdGVkU3RhdGVtZW50LnNvdXJjZUVuZCA8
PSBsb2NhbC5pbml0aWFsaXphdGlvbi5zb3VyY2VFbmQpCisJCQkJCQkJY29udGludWUgbmV4dDsK
KwkJCQkJfQorCQkJCX0KKwkJCX0KIAkJCXVwZGF0ZWRTdGF0ZW1lbnRzW3VwZGF0ZWRDb3VudCsr
XSA9IHVwZGF0ZWRTdGF0ZW1lbnQ7CiAJCQkKIAkJCWlmICh1cGRhdGVkU3RhdGVtZW50IGluc3Rh
bmNlb2YgTG9jYWxEZWNsYXJhdGlvbikgewpAQCAtNDI1LDQyICs0MjYsNiBAQAogCiAJdXBkYXRl
ZEJsb2NrKDAsIG5ldyBIYXNoU2V0KCkpOwogfQotLyoKLSAqIFJlYnVpbGQgYSBmbGF0dGVuZWQg
YmxvY2sgZnJvbSB0aGUgbmVzdGVkIHN0cnVjdHVyZSB3aGljaCBpcyBpbiBzY29wZQotICovCi1w
dWJsaWMgU3RhdGVtZW50IHVwZGF0ZVN0YXRlbWVudChpbnQgZGVwdGgsIFNldCBrbm93blR5cGVz
KXsKLQotCS8vIGlmIGJsb2NrIHdhcyBjbG9zZWQgb3IgZW1wdHksIHRoZW4gaWdub3JlIGl0Ci0J
aWYgKHRoaXMuYmxvY2tEZWNsYXJhdGlvbi5zb3VyY2VFbmQgIT0gMCB8fCB0aGlzLnN0YXRlbWVu
dENvdW50ID09IDApIHJldHVybiBudWxsOwotCQotCS8qIElmIHRoaXMgYmxvY2sgc3RhbmRzIGZv
ciB0aGUgbGFtYmRhIGJvZHksIHRyYXNoIHRoZSBjb250ZW50cy4gTGFtYmRhIGV4cHJlc3Npb25z
IGFyZSByZWNvdmVyZWQgYXMgcGFydCBvZiB0aGUgZW5jbG9zaW5nIHN0YXRlbWVudC4KLQkgICBX
ZSBzdGlsbCBoYXZlIGxlZnQgaW4gYSBibG9jayBoZXJlIHRvIG1ha2Ugc3VyZSB0aGF0IGNvbnRh
aW5lZCBlbGVtZW50cyBjYW4gYmUgdHJhcHBlZCBhbmQgdG9zc2VkIG91dC4KLQkqLwotCWlmICh0
aGlzLmJsb2NrRGVjbGFyYXRpb24ubGFtYmRhQm9keSkgcmV0dXJuIG51bGw7IAotCi0JU3RhdGVt
ZW50W10gdXBkYXRlZFN0YXRlbWVudHMgPSBuZXcgU3RhdGVtZW50W3RoaXMuc3RhdGVtZW50Q291
bnRdOwotCWludCB1cGRhdGVkQ291bnQgPSAwOwotCi0JLy8gb25seSBjb2xsZWN0IHRoZSBub24t
bnVsbCB1cGRhdGVkIHN0YXRlbWVudHMKLQlmb3IgKGludCBpID0gMDsgaSA8IHRoaXMuc3RhdGVt
ZW50Q291bnQ7IGkrKyl7Ci0JCVN0YXRlbWVudCB1cGRhdGVkU3RhdGVtZW50ID0gdGhpcy5zdGF0
ZW1lbnRzW2ldLnVwZGF0ZWRTdGF0ZW1lbnQoZGVwdGgsIGtub3duVHlwZXMpOwotCQlpZiAodXBk
YXRlZFN0YXRlbWVudCAhPSBudWxsKXsKLQkJCXVwZGF0ZWRTdGF0ZW1lbnRzW3VwZGF0ZWRDb3Vu
dCsrXSA9IHVwZGF0ZWRTdGF0ZW1lbnQ7Ci0JCX0KLQl9Ci0JaWYgKHVwZGF0ZWRDb3VudCA9PSAw
KSByZXR1cm4gbnVsbDsgLy8gbm90IGludGVyZXN0aW5nIGJsb2NrCi0KLQkvLyByZXNpemUgc3Rh
dGVtZW50IGNvbGxlY3Rpb24gaWYgbmVjZXNzYXJ5Ci0JaWYgKHVwZGF0ZWRDb3VudCAhPSB0aGlz
LnN0YXRlbWVudENvdW50KXsKLQkJdGhpcy5ibG9ja0RlY2xhcmF0aW9uLnN0YXRlbWVudHMgPSBu
ZXcgU3RhdGVtZW50W3VwZGF0ZWRDb3VudF07Ci0JCVN5c3RlbS5hcnJheWNvcHkodXBkYXRlZFN0
YXRlbWVudHMsIDAsIHRoaXMuYmxvY2tEZWNsYXJhdGlvbi5zdGF0ZW1lbnRzLCAwLCB1cGRhdGVk
Q291bnQpOwotCX0gZWxzZSB7Ci0JCXRoaXMuYmxvY2tEZWNsYXJhdGlvbi5zdGF0ZW1lbnRzID0g
dXBkYXRlZFN0YXRlbWVudHM7Ci0JfQotCi0JcmV0dXJuIHRoaXMuYmxvY2tEZWNsYXJhdGlvbjsK
LX0KLQogLyoKICAqIFJlY29yZCBhIGZpZWxkIGRlY2xhcmF0aW9uCiAgKi8KZGlmZiAtLWdpdCBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9wYXJzZXIvUmVjb3ZlcmVkVHlwZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3BhcnNlci9SZWNvdmVy
ZWRUeXBlLmphdmEKaW5kZXggODYzOGY4YS4uZGY4YzVhMCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Bh
cnNlci9SZWNvdmVyZWRUeXBlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3BhcnNlci9SZWNvdmVyZWRUeXBl
LmphdmEKQEAgLTU3OSwxMiArNTc5LDIwIEBACiAJCQl0aGlzLm1ldGhvZHNbdGhpcy5tZXRob2RD
b3VudCAtIDFdLm1ldGhvZERlY2xhcmF0aW9uLmRlY2xhcmF0aW9uU291cmNlRW5kID0gYm9keUVu
ZFZhbHVlOwogCQkJdGhpcy5tZXRob2RzW3RoaXMubWV0aG9kQ291bnQgLSAxXS5tZXRob2REZWNs
YXJhdGlvbi5ib2R5RW5kID0gYm9keUVuZFZhbHVlOwogCQl9CisJCWludCB0b3RhbE1ldGhvZHMg
PSBleGlzdGluZ0NvdW50OworCQluZXh0OgogCQlmb3IgKGludCBpID0gMDsgaSA8IHRoaXMubWV0
aG9kQ291bnQ7IGkrKyl7CisJCQlmb3IgKGludCBqID0gMDsgaiA8IGV4aXN0aW5nQ291bnQ7IGor
KykgeworCQkJCWlmIChtZXRob2REZWNsYXJhdGlvbnNbal0gPT0gdGhpcy5tZXRob2RzW2ldLm1l
dGhvZERlY2xhcmF0aW9uKQorCQkJCQljb250aW51ZSBuZXh0OworCQkJfQogCQkJQWJzdHJhY3RN
ZXRob2REZWNsYXJhdGlvbiB1cGRhdGVkTWV0aG9kID0gdGhpcy5tZXRob2RzW2ldLnVwZGF0ZWRN
ZXRob2REZWNsYXJhdGlvbihkZXB0aCwga25vd25UeXBlcyk7CiAJCQlpZiAodXBkYXRlZE1ldGhv
ZC5pc0NvbnN0cnVjdG9yKCkpIGhhc1JlY292ZXJlZENvbnN0cnVjdG9yID0gdHJ1ZTsKIAkJCWlm
ICh1cGRhdGVkTWV0aG9kLmlzQWJzdHJhY3QoKSkgaGFzQWJzdHJhY3RNZXRob2RzID0gdHJ1ZTsK
LQkJCW1ldGhvZERlY2xhcmF0aW9uc1tleGlzdGluZ0NvdW50ICsgaV0gPSB1cGRhdGVkTWV0aG9k
OworCQkJbWV0aG9kRGVjbGFyYXRpb25zW3RvdGFsTWV0aG9kcyArK10gPSB1cGRhdGVkTWV0aG9k
OwogCQl9CisJCWlmICh0b3RhbE1ldGhvZHMgIT0gbWV0aG9kRGVjbGFyYXRpb25zLmxlbmd0aCkK
KwkJCVN5c3RlbS5hcnJheWNvcHkobWV0aG9kRGVjbGFyYXRpb25zLCAwLCBtZXRob2REZWNsYXJh
dGlvbnMgPSBuZXcgQWJzdHJhY3RNZXRob2REZWNsYXJhdGlvblt0b3RhbE1ldGhvZHNdLCAwLCB0
b3RhbE1ldGhvZHMpOwogCQl0aGlzLnR5cGVEZWNsYXJhdGlvbi5tZXRob2RzID0gbWV0aG9kRGVj
bGFyYXRpb25zOwogCQlpZihtZXRob2REZWNsYXJhdGlvbnNbbWV0aG9kRGVjbGFyYXRpb25zLmxl
bmd0aCAtIDFdLmRlY2xhcmF0aW9uU291cmNlRW5kID4gbGFzdEVuZCkgewogCQkJbGFzdEVuZCA9
IG1ldGhvZERlY2xhcmF0aW9uc1ttZXRob2REZWNsYXJhdGlvbnMubGVuZ3RoIC0gMV0uZGVjbGFy
YXRpb25Tb3VyY2VFbmQ7
</data>

          </attachment>
      

    </bug>

</bugzilla>