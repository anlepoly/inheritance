<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>421628</bug_id>
          
          <creation_ts>2013-11-13 09:58:00 -0500</creation_ts>
          <short_desc>[1.8][dom ast][api] document new rules for ITypeBinding equality</short_desc>
          <delta_ts>2014-01-27 17:24:54 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P2</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          <dependson>409586</dependson>
    
    <dependson>425741</dependson>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Markus Keller">markus_keller</reporter>
          <assigned_to name="Markus Keller">markus_keller</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>manju656</cc>
    
    <cc>noopur_gupta</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2329708</commentid>
    <comment_count>0</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-11-13 09:58:16 -0500</bug_when>
    <thetext>Document the new rules for ITypeBinding equality that have been established by bug 409586.

Javadocs of IBinding#equals(..), #isEqualTo(..), and #getKey() need updates. You may want to keep the general IBindings APIs and just add a reference to the ITypeBinding APIs, where the special rules for ITypeBindings can be explained at the level they apply to.

There&apos;s no need to special-case pre-JLS8 AST levels. The behavior for such ASTs is unchanged, and the special rules collapse to the old rules as soon as type annotations are out of the picture.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2329983</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-11-13 23:10:06 -0500</bug_when>
    <thetext>You will agree it makes for expediency to have you own this ;-), I am happy
to answer questions or offer background. If you disagree, feel free to assign
it back.

Looking at the present javadoc, I find the sentence &quot;Within the context of a 
single cluster of bindings, each binding is represented by a distinct object.&quot;
problematic. I don&apos;t know what &quot;cluster&quot; and &quot;context&quot; mean here or where they
are defined. Also the word &quot;distinct&quot; _arguably_ conveys the exact opposite 
meaning it is supposed to convey. I wonder if it would have been better worded:
&quot;Within the ... every reference to the same type is represented by the same 
type binding object&quot;

For JLS8, this is what we might say:

Within the same &quot;___&quot; (should this be &quot;binding environment&quot; ? We basically
want to use the right term to say ASTs created against the same internal
LookupEnvironment because caching/recycling/reuse is specific to LE), every
reference to a particular unannotated type is represented by the same type 
binding object, while the type binding object will naturally be different
for two unannotated but disparate types.
 
Within the same &quot;____&quot;, the compiler and AST APIs make &quot;best case effort&quot; to 
share the type binding objects for &quot;equally annotated types&quot;, but no guarantees
are made and so clients should not depend on this. For example == comparison may
fail when the type binding objects that represent &quot;@NonNull @ReadOnly&quot; String 
and &quot;@ReadOnly @NonNull String&quot; are compared with it. isEqualTo is the correct
way to compare underlying types ignoring any annotations.

---------------

Notes on the compiler side (these are for background and may not make sense
to document)

At the moment sharing of compiler type bindings happens on the following
basis

    - Unannotated type uses reuse the binding corresponding to declaration.
    - Marker annotated types and other types annotated such that all attributes
      default to default values are the candidates for sharing - As of today.
    - This scheme is order sensitive - @NonNull @Readonly will result
      in a different binding than @Readonly @NonNull - which is perhaps as
      it should be. The Java model APIs mention annotation order in some of
      their documentation.
    - We have plans to generalize sharing for SMA and NA - See 
      https://bugs.eclipse.org/bugs/show_bug.cgi?id=420040, but even when
      this is implemented (not a priority right now), on the compiler side
      we would like not to make guarantees. There are some tricky issues in
      sharing annotation bindings originating from source and binaries.
      (we would like to continue avoid eager resolution of member value pairs)

Let me know if you need more in the way of background on compiler 
implementation.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2329985</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-11-13 23:30:50 -0500</bug_when>
    <thetext>Also a quick note that method bindings could also differ for parameterized
types.

X&lt;String&gt;.foo() and X&lt;@NonNull String&gt;.foo() will not have the same method
binding because they are seen to be two different parameterizations.

For non-parameterized types, X.foo() and @NonNull X.foo() today have the
same method binding. But given https://bugs.eclipse.org/bugs/show_bug.cgi?id=418981
is not implemented (not a priority)

    X&lt;String&gt;.foo() and @NonNull X&lt;String&gt;.foo() will have different method
bindings.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2355148</commentid>
    <comment_count>3</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-01-27 17:24:54 -0500</bug_when>
    <thetext>Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=67477b0856fe5c7ef8dbf44885f837fd7ffcb0c3 and http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=641f1c4bb35d7a1ed42a954deff417eac24d11cb

I found this quite hard to describe clearly without going into too many implementation details. If anybody has a better proposal, please speak up.

I also noticed that omitting type annotation from getKey() makes it hard to compare type-annotated bindings across different clusters of bindings. If we later find that wee need that functionality, then we probably have to add IBinding#getAnnotatedKey(). We also don&apos;t have an API to get a type binding List&lt;String&gt; from a given binding List&lt;@A String&gt;. We will file follow-up bugs if we have actual use cases for these queries.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>