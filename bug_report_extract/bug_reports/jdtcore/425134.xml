<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>425134</bug_id>
          
          <creation_ts>2014-01-08 15:42:00 -0500</creation_ts>
          <short_desc>[1.8][model] Implement IJavaElements for lambda expression</short_desc>
          <delta_ts>2014-03-07 05:46:03 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P2</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>423123</blocked>
    
    <blocked>400905</blocked>
    
    <blocked>424101</blocked>
    
    <blocked>427082</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Markus Keller">markus_keller</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>jarthana</cc>
    
    <cc>manju656</cc>
    
    <cc>manpalat</cc>
    
    <cc>Michael_Rennie</cc>
    
    <cc>noopur_gupta</cc>
    
    <cc>sarika.sinha</cc>
    
    <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="61777"
          type_id="1"
          status="?"
          setter="srikanth_sankaran"
          requestee="jarthana"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2347164</commentid>
    <comment_count>0</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-01-08 15:42:02 -0500</bug_when>
    <thetext>For many IDE functionalities, we need an IJavaElement for a lambda expression:

- CodeSelect should resolve the lambda element when the caret is on the &apos;-&gt;&apos;. Currently, there&apos;s no easy way to see the contract of the functional interface method that the lambda implements. We should show a Javadoc hover for lambdas.

- (Quick) Type Hierarchy should include all implementations of a functional interface (bug 423123); ITypeHierarchyChangedListener should notify of changes.

- Reference search matches should show up in a &apos;lambda&apos; element, not in the element that contains the lambda expression.

- The parent of a lambda parameter (ILocalVariable) should be the lambda element, not the enclosing element.

About the only place where lambdas are not relevant for the UI is in IJavaElement#getChildren(), since we don&apos;t intend to show lambdas in the Outline (but we can also filter them out in the UI if that&apos;s easier).

Lambdas share many properties of IType and IMethod, but on the other hand also don&apos;t support some of their methods. E.g. IType#create*(*) doesn&apos;t make sense, the ISourceManipulation methods can just throw a JME, the type name will be &quot;&quot; (like for anonymous types) and the name range will be null.

The API of ITypeHierarchy looks like we need at least an IType for a lambda.

For existing Java model clients, the best solution would be to have an IType as well as an IMethod for a lambda expression (rather than a new kind of IJavaElement or only an IType but not an IMethod).

If it reduces the implementation effort, we can also try to treat lambda elements as pseudo-elements like ILocalVariable , ITypeParameter, IAnnotation, which are not part of IJavaElementDeltas, and which are not returned by getChildren().</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2360509</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-08 00:38:20 -0500</bug_when>
    <thetext>Markus, is this a must fix for GA ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2364125</commentid>
    <comment_count>2</comment_count>
    <who name="Sarika Sinha">sarika.sinha</who>
    <bug_when>2014-02-17 01:30:27 -0500</bug_when>
    <thetext>This blocks bug 427082.
private static I3 m1() {
		I3 i3a= i -&gt; {
			int x= 100;
			return i+x;
		};
		return i3a;
	}

Java model returns m1() as the parent for ILocalVariable x, JDT debug expects the parent as Lambda expression.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2364432</commentid>
    <comment_count>3</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-02-17 10:30:11 -0500</bug_when>
    <thetext>I&apos;d say it&apos;s a &quot;must fix&quot;, but with lower priority than compiler errors. I.e. we really need it for a good IDE experience, but if the tradeoff is gaps in the compiler, then I&apos;d rather compromise on the IDE side.

And if we don&apos;t get it done in the next 2-3 weeks, we will have trouble adopting the Java model changes in the UI in time for GA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2364447</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-17 10:44:40 -0500</bug_when>
    <thetext>(In reply to Markus Keller from comment #3)
&gt; I&apos;d say it&apos;s a &quot;must fix&quot;, but with lower priority than compiler errors.
&gt; I.e. we really need it for a good IDE experience, but if the tradeoff is
&gt; gaps in the compiler, then I&apos;d rather compromise on the IDE side.
&gt; 
&gt; And if we don&apos;t get it done in the next 2-3 weeks, we will have trouble
&gt; adopting the Java model changes in the UI in time for GA.

Thanks for weighing in Markus (welcome back!).

The compiler side of the house is totally under control and can be
managed at this point by Stephan and I - so Jay can be freed up to
totally devote to this task.

Jay, let us proceed on the basis that this is must fix for Java 8 GA. TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2364503</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-17 13:01:43 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #4)

&gt; &gt; And if we don&apos;t get it done in the next 2-3 weeks, we will have trouble
&gt; &gt; adopting the Java model changes in the UI in time for GA.

[...]

&gt; Jay, let us proceed on the basis that this is must fix for Java 8 GA. TIA.

Jay, let us make early draft patches available (when possible) to UI &amp; Debug 
for testing and feedback - as long as we call out it is work in progress with 
a known set of limitations/problems, it leaves the UI/Debug teams with the 
choice to try adoption sooner than if we chose to make available only a 
finished solution.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2365439</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-19 08:01:56 -0500</bug_when>
    <thetext>*** Bug 424101 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2365960</commentid>
    <comment_count>7</comment_count>
      <attachid>240150</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-02-20 07:08:59 -0500</bug_when>
    <thetext>Created attachment 240150
Patch - a WIP

This patch introduces LambdaExpression in java model and adds code in SelectionRequester to insert it between the LocalVariable and Method.

1. Hover displays the lambda (as anonymous type). But at the moment clicking on Functional interface type doesn&apos;t open the type&apos;s javadoc in certain scenarios. This is mainly because LambdaExpression is an IJavaElement#TYPE and when we reconstruct from memento, we end up creating a SourceType and not LambdaExpression and trouble starts there as SourceType looks for element info, which doesn&apos;t exist.

2. When a lambda parameter (or it&apos;s reference) is selected, java element view correctly displays the LocalVariable element and LambdaExpression as it&apos;s parent.

The search result or a lambda param reference still appear attached to the method.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2366160</commentid>
    <comment_count>8</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-02-20 11:34:23 -0500</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #7)
&gt; This is mainly because LambdaExpression is an IJavaElement#TYPE
&gt; and when we reconstruct from memento, we end up creating a SourceType and
&gt; not LambdaExpression and trouble starts there as SourceType looks for
&gt; element info, which doesn&apos;t exist.

That observation was wrong. What happens is somewhere along the path of finding the element for the referenced functional interface, we hit the ast converter, which has no idea of lambda (because we don&apos;t store them in the model) and as a result we never get the correct element. Need to find out if we can work around this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2366400</commentid>
    <comment_count>9</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-20 19:11:23 -0500</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #8)

&gt; That observation was wrong. What happens is somewhere along the path of
&gt; finding the element for the referenced functional interface, we hit the ast
&gt; converter, which has no idea of lambda (because we don&apos;t store them in the
&gt; model) and as a result we never get the correct element. Need to find out if
&gt; we can work around this.

Given we have the hammer, doesn&apos;t this look like a nail to you ? :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2367397</commentid>
    <comment_count>10</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-02-24 01:41:43 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #9)
&gt; Given we have the hammer, doesn&apos;t this look like a nail to you ? :)

For the records, what Srikanth implied here was to mark the compilation unit info with a flag that we are dealing with lambdas here so the SourceTypeConverter can do a full parse instead of constructing the ast from java elements. But ...

This doesn&apos;t seem to help either.  All roads seem to hit the same block - that the AST we get do not yet have the bindings and we have no way of finding what the lambda expression is implementing (i.e. in the complex case where the lamdba is a method argument).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2367399</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-24 01:48:24 -0500</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #10)
&gt; (In reply to Srikanth Sankaran from comment #9)
&gt; &gt; Given we have the hammer, doesn&apos;t this look like a nail to you ? :)

&gt; This doesn&apos;t seem to help either.  All roads seem to hit the same block -
&gt; that the AST we get do not yet have the bindings and we have no way of
&gt; finding what the lambda expression is implementing (i.e. in the complex case
&gt; where the lamdba is a method argument).

We need to resolve the AST. https://bugs.eclipse.org/bugs/show_bug.cgi?id=400905
is also about the same issue. I&apos;ll share a patch for that later today - there
could be elements leverageable from there.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2368630</commentid>
    <comment_count>12</comment_count>
      <attachid>240321</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-02-26 04:46:23 -0500</bug_when>
    <thetext>Created attachment 240321
Updated patch

This gets rid of ILambdaExpression and LambdaElementInfo. Also fixes the issue with navigating to the functional interface declaration from hover. LambdaExpression element need to be merged with bug 400905.

The NPE is still present. One way to deal with it would be to resolve the CompilationUnit before SourceElementNotifier kicks in.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2369255</commentid>
    <comment_count>13</comment_count>
      <attachid>240362</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-02-27 06:40:17 -0500</bug_when>
    <thetext>Created attachment 240362
Updated patch

Previous patch synched up with latest changes with bug 400905.

Things appear to work in UI but some unit tests are failing in Resolve18Tests, because in this patch I create LambdaExpression element before it was resolved and hence have incorrect ordinal (and effectively incorrect occurrence count).

There are also other failures because I am setting the element&apos;s name as &quot;&quot; instead of &quot;&lt;lambda&gt;&quot; because this takes care of many existing things on the UI side.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2369256</commentid>
    <comment_count>14</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-02-27 06:44:22 -0500</bug_when>
    <thetext>Srikanth, looks like relying on LambdaExpression#ordinal to compute occurrence count will create problems with code select, because what the selection requester gets is a dummy LambdaExpression which will always have ordinal value of &apos;1&apos;. Any idea?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2369260</commentid>
    <comment_count>15</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-02-27 06:54:21 -0500</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #14)
&gt; Srikanth, looks like relying on LambdaExpression#ordinal to compute
&gt; occurrence count will create problems with code select, because what the
&gt; selection requester gets is a dummy LambdaExpression which will always have
&gt; ordinal value of &apos;1&apos;. Any idea?

The problem with making occurrence count derive from &apos;ordinal&apos; is in the following case where we have both lambdas and anonymous types mixed, the occurrence count will not be contiguous. One way out I can think of is to differentiate a lambda element from an anonymous type by coming up with a new token and different memento string for lambda element. Will investigate to see if there will issues with this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2369262</commentid>
    <comment_count>16</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-02-27 06:55:54 -0500</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #15)
&gt; The problem with making occurrence count derive from &apos;ordinal&apos; is in the
&gt; following case where we have both lambdas and anonymous types mixed, the
&gt; occurrence count will not be contiguous. One way out I can think of is to
&gt; differentiate a lambda element from an anonymous type by coming up with a
&gt; new token and different memento string for lambda element. Will investigate
&gt; to see if there will issues with this.

If it wasn&apos;t clear, this will allow us to recreate a LambdaExpression element and NOT a SourceType element (as it&apos;s the case with the last patch) from a hover link.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2369282</commentid>
    <comment_count>17</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-27 07:55:05 -0500</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #13)

&gt; There are also other failures because I am setting the element&apos;s name as &quot;&quot;
&gt; instead of &quot;&lt;lambda&gt;&quot; because this takes care of many existing things on the
&gt; UI side.

Could you elaborate what are these existing things that get taken care of ? 

(In reply to Jayaprakash Arthanareeswaran from comment #14)
&gt; Srikanth, looks like relying on LambdaExpression#ordinal to compute
&gt; occurrence count will create problems with code select, because what the
&gt; selection requester gets is a dummy LambdaExpression which will always have
&gt; ordinal value of &apos;1&apos;. Any idea?

What exactly is the origin of this dummy node ? 

(In reply to Jayaprakash Arthanareeswaran from comment #15)
&gt; The problem with making occurrence count derive from &apos;ordinal&apos; is in the
&gt; following case where we have both lambdas and anonymous types mixed, the
&gt; occurrence count will not be contiguous. 

This happens perhaps because you reset the name from &lt;lambda&gt; to &quot;&quot; and that
clashes with anonymous types. The way the lambda ordinals are computed they
are unique and so there will never be a clash among lambdas or between lambdas
and anonymous types.

(In reply to Jayaprakash Arthanareeswaran from comment #16)
&gt; If it wasn&apos;t clear, this will allow us to recreate a LambdaExpression
&gt; element and NOT a SourceType element (as it&apos;s the case with the last patch)
&gt; from a hover link.

I don&apos;t yet understand this, will study the patch in detail.

I was leaning towards the suggestion in the last para of comment#0 where
we would fabricate them on the fly, only if they feature somewhere in the
chain between focus element and the CU.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2369332</commentid>
    <comment_count>18</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-02-27 09:40:00 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #17)
&gt; (In reply to Jayaprakash Arthanareeswaran from comment #13)
&gt; 
&gt; &gt; There are also other failures because I am setting the element&apos;s name as &quot;&quot;
&gt; &gt; instead of &quot;&lt;lambda&gt;&quot; because this takes care of many existing things on the
&gt; &gt; UI side.
&gt; 
&gt; Could you elaborate what are these existing things that get taken care of ? 

When the element is an IType and with name as empty string, it&apos;s treated as an anonymous and presented accordingly in the UI, such as hover etc.


&gt; (In reply to Jayaprakash Arthanareeswaran from comment #14)
&gt; &gt; Srikanth, looks like relying on LambdaExpression#ordinal to compute
&gt; &gt; occurrence count will create problems with code select, because what the
&gt; &gt; selection requester gets is a dummy LambdaExpression which will always have
&gt; &gt; ordinal value of &apos;1&apos;. Any idea?
&gt; 
&gt; What exactly is the origin of this dummy node ? 

I think this originates from SelectionEngine where, depending on the case, we insert one of SelectionOn* nodes and resolve the unit so we get notified with a SelectionNodeFound exception. So, when this happens, regardless of how many lambdas or anonymous types we have in a method, the SelectionRequestor#acceptLocalVariable always sees just one lambda, which contains the parameter we are dealing with. As a result the java element we create will always have 1 as occurrence count.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2369351</commentid>
    <comment_count>19</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-27 09:59:34 -0500</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #18)

&gt; When the element is an IType and with name as empty string, it&apos;s treated as
&gt; an anonymous and presented accordingly in the UI, such as hover etc.

I&apos;ll take a look at this. I don&apos;t yet have the picture of what you describe
in my mind, but a lambda should be rendered as a lambda.

&gt; I think this originates from SelectionEngine where, depending on the case,
&gt; we insert one of SelectionOn* nodes and resolve the unit so we get notified
&gt; with a SelectionNodeFound exception. So, when this happens, regardless of
&gt; how many lambdas or anonymous types we have in a method, the
&gt; SelectionRequestor#acceptLocalVariable always sees just one lambda, which
&gt; contains the parameter we are dealing with. As a result the java element we
&gt; create will always have 1 as occurrence count.

I see. I think you are running into this problem only because you are trying
to store in the model and/or recreate from memento string - I think we can
safely punt on this support. At least for now.

More after I study in detail.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2369522</commentid>
    <comment_count>20</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-27 16:47:19 -0500</bug_when>
    <thetext>(In reply to Markus Keller from comment #0)
&gt; For many IDE functionalities, we need an IJavaElement for a lambda
&gt; expression:
&gt; 
&gt; - CodeSelect should resolve the lambda element when the caret is on the
&gt; &apos;-&gt;&apos;. Currently, there&apos;s no easy way to see the contract of the functional
&gt; interface method that the lambda implements. We should show a Javadoc hover
&gt; for lambdas.

This is completed in https://bugs.eclipse.org/bugs/show_bug.cgi?id=429262

&gt; - (Quick) Type Hierarchy should include all implementations of a functional
&gt; interface (bug 423123); ITypeHierarchyChangedListener should notify of
&gt; changes.

Well, hierarchy + search work is mostly complete in https://bugs.eclipse.org/bugs/show_bug.cgi?id=400905, but I am not sure of
the ITypeHierarchyChangedListener part - I am not familiar with this.
What exactly did you have in mind.

&gt; - Reference search matches should show up in a &apos;lambda&apos; element, not in the
&gt; element that contains the lambda expression.
&gt; 
&gt; - The parent of a lambda parameter (ILocalVariable) should be the lambda
&gt; element, not the enclosing element.

These are in progress and I agree these should be done - just a curiosity
question: How/what is it impacting if anything today ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2369587</commentid>
    <comment_count>21</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-02-28 02:37:09 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #20)
&gt; &gt; - The parent of a lambda parameter (ILocalVariable) should be the lambda
&gt; &gt; element, not the enclosing element.
&gt; 
&gt; These are in progress and I agree these should be done - just a curiosity
&gt; question: How/what is it impacting if anything today ?

We also need to decide how we want to represent the lambda element on hover? My initial idea was to present it just like an anonymous (new I{}...). Or are other thoughts?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2369681</commentid>
    <comment_count>22</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-28 05:48:20 -0500</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #21)

&gt; We also need to decide how we want to represent the lambda element on hover?
&gt; My initial idea was to present it just like an anonymous (new I{}...). Or
&gt; are other thoughts?

I have a patch in the works that changes things from:

abc [in foo() [in X [in [Working copy] X.java [in &lt;default&gt; [in src [in Resolve]]]]]]

to 

abc [in lambda$1(int) [in &lt;lambda&gt; [in foo() [in X [in [Working copy] X.java [in &lt;default&gt; [in src [in Resolve]]]]]]]]

I think it is useless to encode the lambda method name as lambda$1(int) - we may
as well mention the SAM selector ?

&lt;lambda&gt; as a type name again is not very useful. I don&apos;t think we should make
it appear as an anonymous class, that it is a lambda should be clear to the user.

I wonder if we should do something like:

abc [in apply(String) [in (Function) [in foo() [in X [in [Working copy] X.java [in &lt;default&gt; [in src [in Resolve]]]]]]]]</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2369696</commentid>
    <comment_count>23</comment_count>
      <attachid>240396</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-28 06:11:54 -0500</bug_when>
    <thetext>Created attachment 240396
Another approach

This patch fabricates and inserts lambda elements at the right place when the
focus element is a local variable of the lambda. (Lambda local types (!) will
still need to be handled.

Jay, please review.

A note: Only upward traversal from the focus element to ICU will find the
lambda. You can&apos;s ask the lambda for its children for example.

Such support is not planned now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2369771</commentid>
    <comment_count>24</comment_count>
      <attachid>240400</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-28 09:11:19 -0500</bug_when>
    <thetext>Created attachment 240400
Latest patch using another approach</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2369773</commentid>
    <comment_count>25</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-28 09:13:47 -0500</bug_when>
    <thetext>Failing tests have been correct, an NPE has been fixed.

I think this addresses the remaining needs of comment#0, Jay, please review.
TIA. (This is mostly same as last patch - if you have started review using
earlier version, continuing with that is good enough)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2369929</commentid>
    <comment_count>26</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-02-28 13:38:15 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #24)
&gt; Created attachment 240400 [details]
&gt; Latest patch using another approach

Some comments:

1. As I said earlier, we should decide how we want to represent the lambda as a Java model element. With the patch, the ILocalVariable gets a SourceMethod as a parent. I haven&apos;t yet investigated, but surprised that it&apos;s a SourceMethod even though LambdaExpression is a SourceType. This results in following problems:
 (i) Hovering and clicking on &quot;lambda$2&quot; throws up an exception because the method element doesn&apos;t have a corresponding element info.
 (ii) Java element view has the SourceMethod as the LocalVariable&apos;s parent. But several elements inside the SourceMethod element have wrong ranges and errors.

2. There is something wrong with LambdaExpression#ordinal is computed. Consider the following case:

	public static void main(String[] args) {
		goo((x) -&gt; {
			int y = 3;
			return x * y;
		});
		FunctionalInterface i2 = (y) -&gt; {
			return y * 3;
		};
		FunctionalInterface j1 = (z) -&gt; { 
			return z * 3; 
		};
	}


Hovering over both (y) and (z) bring up &quot;..lambda$2(int)&quot;. Hovering over any of x, y or Z inside the lambda body always show lambda$1.

Continuing to review...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2370046</commentid>
    <comment_count>27</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-28 19:08:11 -0500</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #26)

&gt; 1. As I said earlier, we should decide how we want to represent the lambda
&gt; as a Java model element. With the patch, the ILocalVariable gets a
&gt; SourceMethod as a parent. I haven&apos;t yet investigated, but surprised that
&gt; it&apos;s a SourceMethod even though LambdaExpression is a SourceType. This
&gt; results in following problems:

It should not be LambdaExpression, the SourceType. It should be LambdaMethod
which is not yet written: as planned in 
https://bugs.eclipse.org/bugs/show_bug.cgi?id=400905#c27, I&apos;ll work on it.

&gt;  (i) Hovering and clicking on &quot;lambda$2&quot; throws up an exception because the
&gt; method element doesn&apos;t have a corresponding element info.

This should get addressed as part of that exercise.

&gt;  (ii) Java element view has the SourceMethod as the LocalVariable&apos;s parent.
&gt; But several elements inside the SourceMethod element have wrong ranges and
&gt; errors.

I need to see how to reproduce this. Basically the plan is not to support
getChildren on a LambdaMethod

&gt; 2. There is something wrong with LambdaExpression#ordinal is computed.
&gt; Consider the following case:
&gt; 
&gt; 	public static void main(String[] args) {
&gt; 		goo((x) -&gt; {
&gt; 			int y = 3;
&gt; 			return x * y;
&gt; 		});
&gt; 		FunctionalInterface i2 = (y) -&gt; {
&gt; 			return y * 3;
&gt; 		};
&gt; 		FunctionalInterface j1 = (z) -&gt; { 
&gt; 			return z * 3; 
&gt; 		};
&gt; 	}
&gt; 
&gt; 
&gt; Hovering over both (y) and (z) bring up &quot;..lambda$2(int)&quot;. Hovering over any
&gt; of x, y or Z inside the lambda body always show lambda$1.
&gt; 
&gt; Continuing to review...

I&apos;ll take a look, Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2370087</commentid>
    <comment_count>28</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-01 04:36:27 -0500</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #26)

&gt; Hovering over both (y) and (z) bring up &quot;..lambda$2(int)&quot;. Hovering over any
&gt; of x, y or Z inside the lambda body always show lambda$1.

It could be very confusing for a user - but there is a method behind the madness.
The selection parser adds only those nodes that are relevant to the selection
process. So some lambdas are missing - shifting the ordinal numbers around from
what would be expected.

Fix should be simple - get rid of the useless lambda@&lt;no&gt; format and move
to the format proposed in comment#22.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2370152</commentid>
    <comment_count>29</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-01 17:15:17 -0500</bug_when>
    <thetext>See https://bugs.eclipse.org/bugs/show_bug.cgi?id=400905#c19 and
https://bugs.eclipse.org/bugs/show_bug.cgi?id=400905#37.

That issue needs to be handled on behalf of this ticket.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2370153</commentid>
    <comment_count>30</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-01 17:18:44 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #29)
&gt; See https://bugs.eclipse.org/bugs/show_bug.cgi?id=400905#c19 and
&gt; https://bugs.eclipse.org/bugs/show_bug.cgi?id=400905#37.
&gt; 
&gt; That issue needs to be handled on behalf of this ticket.

Also https://bugs.eclipse.org/bugs/show_bug.cgi?id=400905#c29</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2370548</commentid>
    <comment_count>31</comment_count>
      <attachid>240462</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-03 09:31:20 -0500</bug_when>
    <thetext>Created attachment 240462
Patch ready for review.

Jay, please review. I would like to release it today after a round of
high level review. I&apos;ll leave the bug open so we can accommodate review
comments and follow ups and then close eventually. TIA.

Note: Tests are still being remastered to match the new format.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2370680</commentid>
    <comment_count>32</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-03-03 12:11:34 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #31)
&gt; Created attachment 240462 [details]
&gt; Patch ready for review.

I played around with the patch in place and things look good. Some comments:

1) When hovering over a lambda parameter and then clicking on &quot;Lambda(FunctionalInterface)&quot; where the view takes us to is not consistent. When LHS is a field, the view changes to the field&apos;s doc but in case of local variable, it is the enclosing method. I think we need to be consistent. 

2) I don&apos;t know if this is a problem, but the LambdaExpression and enclosed LambdaMethod (which is the only child element) have the same source ranges. I am not sure if it&apos;s a problem from client&apos;s perspective. Markus might know better.

Rest all look good to me. I didn&apos;t review the code, though.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2370738</commentid>
    <comment_count>33</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-03 14:11:02 -0500</bug_when>
    <thetext>Implementation and tests released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=aacce274176303cc524a6360232ca1201922c452.

(In reply to Jayaprakash Arthanareeswaran from comment #32)
&gt; 1) When hovering over a lambda parameter and then clicking on
&gt; &quot;Lambda(FunctionalInterface)&quot; where the view takes us to is not consistent.
&gt; When LHS is a field, the view changes to the field&apos;s doc but in case of
&gt; local variable, it is the enclosing method. I think we need to be
&gt; consistent. 

I found the behavior inconsistent alright - but I couldn&apos;t quite figure out
what is expected. Please test some more and raise follow up bugs as required.

&gt; 2) I don&apos;t know if this is a problem, but the LambdaExpression and enclosed
&gt; LambdaMethod (which is the only child element) have the same source ranges.
&gt; I am not sure if it&apos;s a problem from client&apos;s perspective. Markus might know
&gt; better.

That is OK, they are one and the same. They are modelled separately as IType
and IMethod for client convenience.

&gt; Rest all look good to me. I didn&apos;t review the code, though.

Please do and let us follow up in fresh CRs. Thanks!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2370741</commentid>
    <comment_count>34</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-03 14:12:54 -0500</bug_when>
    <thetext>UI team: the work on search, index, hierarchy, model and selection and their
interplay with each other should be considered complete and ready for integration.

Thanks for early testing.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372916</commentid>
    <comment_count>35</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2014-03-07 05:46:03 -0500</bug_when>
    <thetext>Verified as working for Eclipse + Java 8 RC2 using Kepler SR2 + Eclipse Java Development Tools Patch for Java 8 Support (BETA) 1.0.0.v20140306-1935. Verification done by code checking as ui bits are not yet available at RC2.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>240150</attachid>
            <date>2014-02-20 07:08:00 -0500</date>
            <delta_ts>2014-02-26 04:46:23 -0500</delta_ts>
            <desc>Patch - a WIP</desc>
            <filename>Bug-425134-B.patch</filename>
            <type>text/plain</type>
            <size>17896</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9tb2RlbC9SZXNvbHZlVGVzdHMxOC5qYXZhIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21v
ZGVsL1Jlc29sdmVUZXN0czE4LmphdmEKaW5kZXggYTc3Y2QzMi4uYmUwMGUxMCAxMDA2NDQKLS0t
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9j
b3JlL3Rlc3RzL21vZGVsL1Jlc29sdmVUZXN0czE4LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21vZGVsL1Jl
c29sdmVUZXN0czE4LmphdmEKQEAgLTI5LDUgKzI5LDUgQEAKIAogc3RhdGljIHsKLQkvLyBURVNU
U19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7ICJ0ZXN0MDAyMyIgfTsKKy8vCSBURVNUU19OQU1FUyA9
IG5ldyBTdHJpbmdbXSB7ICJ0ZXN0NDIyNDY4YiIgfTsKIAkvLyBURVNUU19OVU1CRVJTID0gbmV3
IGludFtdIHsgMTI0IH07CiAJLy8gVEVTVFNfUkFOR0UgPSBuZXcgaW50W10geyAxNiwgLTEgfTsK
QEAgLTcxOSw1ICs3MTksNSBAQAogCWFzc2VydEVsZW1lbnRzRXF1YWwoCiAJCSJVbmV4cGVjdGVk
IGVsZW1lbnRzIiwKLQkJInh5eiBbaW4gZm9vKCkgW2luIFggW2luIFtXb3JraW5nIGNvcHldIFgu
amF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV0iLAorCQkieHl6IFtp
biA8YW5vbnltb3VzICMxPiBbaW4gZm9vKCkgW2luIFggW2luIFtXb3JraW5nIGNvcHldIFguamF2
YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV1dIiwKIAkJZWxlbWVudHMK
IAkpOwpAQCAtNzQ0LDUgKzc0NCw1IEBACiAJYXNzZXJ0RWxlbWVudHNFcXVhbCgKIAkJIlVuZXhw
ZWN0ZWQgZWxlbWVudHMiLAotCQkiYWJjIFtpbiBmb28oKSBbaW4gWCBbaW4gW1dvcmtpbmcgY29w
eV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXSIsCisJCSJh
YmMgW2luIDxhbm9ueW1vdXMgIzE+IFtpbiBmb28oKSBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0g
WC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXV0iLAogCQllbGVt
ZW50cwogCSk7CkBAIC03NjcsNSArNzY3LDUgQEAKIAlhc3NlcnRFbGVtZW50c0VxdWFsKAogCQki
VW5leHBlY3RlZCBlbGVtZW50cyIsCi0JCSJhYmMgW2luIGkgW2luIFggW2luIFtXb3JraW5nIGNv
cHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV0iLAorCQki
YWJjIFtpbiA8YW5vbnltb3VzICMxPiBbaW4gaSBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0gWC5q
YXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXV0iLAogCQllbGVtZW50
cwogCSk7CkBAIC03OTUsNSArNzk1LDUgQEAKIAlhc3NlcnRFbGVtZW50c0VxdWFsKAogCQkiVW5l
eHBlY3RlZCBlbGVtZW50cyIsCi0JCSJhYmMgW2luIG1haW4oU3RyaW5nW10pIFtpbiBYIFtpbiBb
V29ya2luZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1d
XV1dIiwKKwkJImFiYyBbaW4gPGFub255bW91cyAjMT4gW2luIG1haW4oU3RyaW5nW10pIFtpbiBY
IFtpbiBbV29ya2luZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNv
bHZlXV1dXV1dXSIsCiAJCWVsZW1lbnRzCiAJKTsKQEAgLTgyMyw1ICs4MjMsNSBAQAogCWFzc2Vy
dEVsZW1lbnRzRXF1YWwoCiAJCSJVbmV4cGVjdGVkIGVsZW1lbnRzIiwKLQkJInh5eiBbaW4gbWFp
bihTdHJpbmdbXSkgW2luIFggW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1bHQ+
IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV0iLAorCQkieHl6IFtpbiA8YW5vbnltb3VzICMxPiBb
aW4gbWFpbihTdHJpbmdbXSkgW2luIFggW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRl
ZmF1bHQ+IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV1dIiwKIAkJZWxlbWVudHMKIAkpOwpAQCAt
ODg5LDUgKzg4OSw1IEBACiAJYXNzZXJ0RWxlbWVudHNFcXVhbCgKIAkJIlVuZXhwZWN0ZWQgZWxl
bWVudHMiLAotCQkienl4IFtpbiBmeCBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0gWC5qYXZhIFtp
biA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXSIsCisJCSJ6eXggW2luIDxhbm9u
eW1vdXMgIzE+IFtpbiBmeCBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0gWC5qYXZhIFtpbiA8ZGVm
YXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXV0iLAogCQllbGVtZW50cwogCSk7CkBAIC05
MjIsNSArOTIyLDUgQEAKIAlhc3NlcnRFbGVtZW50c0VxdWFsKAogCQkiVW5leHBlY3RlZCBlbGVt
ZW50cyIsCi0JCSJ4eXogW2luIG1haW4oU3RyaW5nW10pIFtpbiBYIFtpbiBbV29ya2luZyBjb3B5
XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1dXV1dIiwKKwkJInh5
eiBbaW4gPGFub255bW91cyAjMT4gW2luIG1haW4oU3RyaW5nW10pIFtpbiBYIFtpbiBbV29ya2lu
ZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1dXV1dXSIs
CiAJCWVsZW1lbnRzCiAJKTsKQEAgLTk1Nyw1ICs5NTcsNSBAQAogCWFzc2VydEVsZW1lbnRzRXF1
YWwoCiAJCSJVbmV4cGVjdGVkIGVsZW1lbnRzIiwKLQkJImhpaiBbaW4gbWFpbihTdHJpbmdbXSkg
W2luIFggW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2lu
IFJlc29sdmVdXV1dXV0iLAorCQkiaGlqIFtpbiA8YW5vbnltb3VzICMxPiBbaW4gbWFpbihTdHJp
bmdbXSkgW2luIFggW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBz
cmMgW2luIFJlc29sdmVdXV1dXV1dIiwKIAkJZWxlbWVudHMKIAkpOwpAQCAtOTkzLDUgKzk5Myw1
IEBACiAJYXNzZXJ0RWxlbWVudHNFcXVhbCgKIAkJIlVuZXhwZWN0ZWQgZWxlbWVudHMiLAotCQki
aGlqIFtpbiBtYWluKFN0cmluZ1tdKSBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0gWC5qYXZhIFtp
biA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXSIsCisJCSJoaWogW2luIDxhbm9u
eW1vdXMgIzE+IFtpbiBtYWluKFN0cmluZ1tdKSBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0gWC5q
YXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXV0iLAogCQllbGVtZW50
cwogCSk7CkBAIC0xNDMyLDUgKzE0MzIsNSBAQAogCWFzc2VydEVsZW1lbnRzRXF1YWwoCiAJCSJV
bmV4cGVjdGVkIGVsZW1lbnRzIiwKLQkJImZpcnN0IFtpbiBpIFtpbiBYIFtpbiBbV29ya2luZyBj
b3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1dXV1dIiwKKwkJ
ImZpcnN0IFtpbiA8YW5vbnltb3VzICMxPiBbaW4gaSBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0g
WC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXV0iLAogCQllbGVt
ZW50cwogCSk7CkBAIC0xNDU1LDUgKzE0NTUsNSBAQAogCWFzc2VydEVsZW1lbnRzRXF1YWwoCiAJ
CSJVbmV4cGVjdGVkIGVsZW1lbnRzIiwKLQkJImZpcnN0IFtpbiBpIFtpbiBYIFtpbiBbV29ya2lu
ZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1dXV1dIiwK
KwkJImZpcnN0IFtpbiA8YW5vbnltb3VzICMxPiBbaW4gaSBbaW4gWCBbaW4gW1dvcmtpbmcgY29w
eV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXV0iLAogCQll
bGVtZW50cwogCSk7CkBAIC0xNDc4LDUgKzE0NzgsNSBAQAogCWFzc2VydEVsZW1lbnRzRXF1YWwo
CiAJCSJVbmV4cGVjdGVkIGVsZW1lbnRzIiwKLQkJInNlY29uZCBbaW4gaSBbaW4gWCBbaW4gW1dv
cmtpbmcgY29weV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1d
XSIsCisJCSJzZWNvbmQgW2luIDxhbm9ueW1vdXMgIzE+IFtpbiBpIFtpbiBYIFtpbiBbV29ya2lu
ZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1dXV1dXSIs
CiAJCWVsZW1lbnRzCiAJKTsKQEAgLTE0OTMsNCArMTQ5Myw1IEBACiAJCQkiCXB1YmxpYyBzdGF0
aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKwogCQkJIgkJZ29vKCh4KSAtPiAoeSkg
LT4gKHopIC0+IHouZm9vKChwKSAtPiBwKSk7XG4iICsKKwkJCSIJCUkgaSA9IG5ldyBJKCl7IHB1
YmxpYyBJIGZvbyhJIHgpIHtyZXR1cm4gbnVsbDt9IH07XG4iICsKIAkJCSIJfVxuIiArCiAJCQki
fSBcbiIpOwpAQCAtMTUwNCw1ICsxNTA1LDUgQEAKIAlhc3NlcnRFbGVtZW50c0VxdWFsKAogCQki
VW5leHBlY3RlZCBlbGVtZW50cyIsCi0JCSJ5IFtpbiBtYWluKFN0cmluZ1tdKSBbaW4gWCBbaW4g
W1dvcmtpbmcgY29weV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1d
XV1dXSIsCisJCSJ5IFtpbiA8YW5vbnltb3VzICMxPiBbaW4gbWFpbihTdHJpbmdbXSkgW2luIFgg
W2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2luIFJlc29s
dmVdXV1dXV1dIiwKIAkJZWxlbWVudHMKIAkpOwpAQCAtMTUzMCw1ICsxNTMxLDUgQEAKIAlhc3Nl
cnRFbGVtZW50c0VxdWFsKAogCQkiVW5leHBlY3RlZCBlbGVtZW50cyIsCi0JCSJ5IFtpbiBtYWlu
KFN0cmluZ1tdKSBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4g
W2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXSIsCisJCSJ5IFtpbiA8YW5vbnltb3VzICMxPiBbaW4g
bWFpbihTdHJpbmdbXSkgW2luIFggW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1
bHQ+IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV1dIiwKIAkJZWxlbWVudHMKIAkpOwpAQCAtMTU5
NCw1ICsxNTk1LDUgQEAKIAlhc3NlcnRFbGVtZW50c0VxdWFsKAogCQkiVW5leHBlY3RlZCBlbGVt
ZW50cyIsCi0JCSJxIFtpbiBtYWluKFN0cmluZ1tdKSBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0g
WC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXSIsCisJCSJxIFtp
biA8YW5vbnltb3VzICMxPiBbaW4gbWFpbihTdHJpbmdbXSkgW2luIFggW2luIFtXb3JraW5nIGNv
cHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV1dIiwKIAkJ
ZWxlbWVudHMKIAkpOwpAQCAtMTYyOSw1ICsxNjMwLDUgQEAKIAlhc3NlcnRFbGVtZW50c0VxdWFs
KAogCQkiVW5leHBlY3RlZCBlbGVtZW50cyIsCi0JCSJ4IFtpbiBtYWluKFN0cmluZ1tdKSBbaW4g
WCBbaW4gW1dvcmtpbmcgY29weV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVz
b2x2ZV1dXV1dXSIsCisJCSJ4IFtpbiA8YW5vbnltb3VzICMxPiBbaW4gbWFpbihTdHJpbmdbXSkg
W2luIFggW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2lu
IFJlc29sdmVdXV1dXV1dIiwKIAkJZWxlbWVudHMKIAkpOwpAQCAtMTc4OCw1ICsxNzg5LDUgQEAK
IAlhc3NlcnRFbGVtZW50c0VxdWFsKAogCQkiVW5leHBlY3RlZCBlbGVtZW50cyIsCi0JCSJ2MSBb
aW4gcHJvY2Vzc0phcihQYXRoKSBbaW4gSW5zaXN0ZW50Q2FwdHVyZSBbaW4gW1dvcmtpbmcgY29w
eV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXSIsCisJCSJ2
MSBbaW4gPGFub255bW91cyAjMT4gW2luIHByb2Nlc3NKYXIoUGF0aCkgW2luIEluc2lzdGVudENh
cHR1cmUgW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2lu
IFJlc29sdmVdXV1dXV1dIiwKIAkJZWxlbWVudHMsCiAJCXRydWUKQEAgLTE4NTMsNSArMTg1NCw1
IEBACiAJYXNzZXJ0RWxlbWVudHNFcXVhbCgKIAkJIlVuZXhwZWN0ZWQgZWxlbWVudHMiLAotCQki
djIgW2luIHByb2Nlc3NKYXIoUGF0aCkgW2luIEluc2lzdGVudENhcHR1cmUgW2luIFtXb3JraW5n
IGNvcHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV0iLAor
CQkidjIgW2luIDxhbm9ueW1vdXMgIzE+IFtpbiBwcm9jZXNzSmFyKFBhdGgpIFtpbiBJbnNpc3Rl
bnRDYXB0dXJlIFtpbiBbV29ya2luZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3Jj
IFtpbiBSZXNvbHZlXV1dXV1dXSIsCiAJCWVsZW1lbnRzLAogCQl0cnVlCkBAIC0xOTE4LDUgKzE5
MTksNSBAQAogCWFzc2VydEVsZW1lbnRzRXF1YWwoCiAJCSJVbmV4cGVjdGVkIGVsZW1lbnRzIiwK
LQkJInMxIFtpbiB3aXRoV2lsZGNhcmQoU3RyZWFtPD8gZXh0ZW5kcyBTdHJpbmc+KSBbaW4gSW5z
aXN0ZW50Q2FwdHVyZSBbaW4gW1dvcmtpbmcgY29weV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2lu
IHNyYyBbaW4gUmVzb2x2ZV1dXV1dXSIsCisJCSJzMSBbaW4gPGFub255bW91cyAjMT4gW2luIHdp
dGhXaWxkY2FyZChTdHJlYW08PyBleHRlbmRzIFN0cmluZz4pIFtpbiBJbnNpc3RlbnRDYXB0dXJl
IFtpbiBbV29ya2luZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNv
bHZlXV1dXV1dXSIsCiAJCWVsZW1lbnRzLAogCQl0cnVlCkBAIC0xOTgzLDUgKzE5ODQsNSBAQAog
CWFzc2VydEVsZW1lbnRzRXF1YWwoCiAJCSJVbmV4cGVjdGVkIGVsZW1lbnRzIiwKLQkJInMyIFtp
biB3aXRob3V0V2lsZGNhcmQoU3RyZWFtPFN0cmluZz4pIFtpbiBJbnNpc3RlbnRDYXB0dXJlIFtp
biBbV29ya2luZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZl
XV1dXV1dIiwKKwkJInMyIFtpbiA8YW5vbnltb3VzICMxPiBbaW4gd2l0aG91dFdpbGRjYXJkKFN0
cmVhbTxTdHJpbmc+KSBbaW4gSW5zaXN0ZW50Q2FwdHVyZSBbaW4gW1dvcmtpbmcgY29weV0gWC5q
YXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXV0iLAogCQllbGVtZW50
cywKIAkJdHJ1ZQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2Vj
bGlwc2UvamR0L2NvcmUvSUxhbWJkYUV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9jb3JlL0lMYW1iZGFFeHByZXNzaW9uLmphdmEKbmV3
IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMC4uNWQyNzg1YQotLS0gL2Rldi9udWxsCisr
KyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9jb3JlL0lMYW1i
ZGFFeHByZXNzaW9uLmphdmEKQEAgLTAsMCArMSwzMCBAQAorLyoqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioKKyAqIENvcHlyaWdodCAoYykgMjAxNCBJQk0gQ29ycG9yYXRpb24uCisgKiBBbGwgcmlnaHRz
IHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCisg
KiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1Ymxp
YyBMaWNlbnNlIHYxLjAKKyAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBh
bmQgaXMgYXZhaWxhYmxlIGF0CisgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12
MTAuaHRtbAorICogCisgKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGFuIGVhcmx5LWRy
YWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVyIHRoZSBKYXZhCisgKiBDb21tdW5pdHkg
UHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFibGUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1
YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBjb2RlIGlzIG5vdCBjb21wYXRpYmxlIHdpdGgg
YW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KKyAqIAorICogQ29udHJpYnV0b3JzOgorICog
ICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgorICoq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKiovCisKK3BhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmNvcmU7CisK
Ky8qKgorICogQHNpbmNlIDMuOSBCRVRBX0pBVkE4CisgKi8KK3B1YmxpYyBpbnRlcmZhY2UgSUxh
bWJkYUV4cHJlc3Npb24gZXh0ZW5kcyBJVHlwZSB7CisJCisJaW50IGdldE51bWJlck9mUGFyYW1l
dGVycygpOworCisJSUxvY2FsVmFyaWFibGVbXSBnZXRQYXJhbWV0ZXJzKCkgdGhyb3dzIEphdmFN
b2RlbEV4Y2VwdGlvbjsKKworCVN0cmluZ1tdIGdldFBhcmFtZXRlck5hbWVzKCkgdGhyb3dzIEph
dmFNb2RlbEV4Y2VwdGlvbjsKKworCVN0cmluZ1tdIGdldFBhcmFtZXRlclR5cGVzKCkgdGhyb3dz
IEphdmFNb2RlbEV4Y2VwdGlvbjsKK30KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0xhbWJkYUVsZW1lbnRJbmZvLmph
dmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29yZS9MYW1iZGFFbGVtZW50SW5mby5qYXZhCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAw
MDAwMDAuLmFlZDAwZTQKLS0tIC9kZXYvbnVsbAorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9t
b2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9MYW1iZGFFbGVtZW50SW5mby5qYXZh
CkBAIC0wLDAgKzEsMjQgQEAKKy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCisgKiBDb3B5cmlnaHQg
KGMpIDIwMTQgSUJNIENvcnBvcmF0aW9uLgorICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBw
cm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscworICogYXJlIG1hZGUgYXZhaWxh
YmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCisg
KiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBh
dAorICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKKyAqCisgKiBU
aGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24g
ZGV2ZWxvcGVkIHVuZGVyIHRoZSBKYXZhCisgKiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQg
aXMgbWFkZSBhdmFpbGFibGUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAq
IG9ubHkuIFRoZSBjb2RlIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24g
b2YgdGhlIEpDUC4KKyAqIAorICogQ29udHJpYnV0b3JzOgorICogICAgIElCTSBDb3Jwb3JhdGlv
biAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgorICoqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KiovCitwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlOworCitpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmNvcmUuSUxvY2FsVmFyaWFibGU7CisKK3B1YmxpYyBjbGFzcyBMYW1iZGFF
bGVtZW50SW5mbyBleHRlbmRzIFNvdXJjZVR5cGVFbGVtZW50SW5mbyB7CisJcHJvdGVjdGVkIElM
b2NhbFZhcmlhYmxlW10gYXJndW1lbnRzOworCXByb3RlY3RlZCBjaGFyW11bXSBhcmd1bWVudE5h
bWVzOworCXB1YmxpYyBMYW1iZGFFbGVtZW50SW5mbygpIHsKKwl9Cit9CmRpZmYgLS1naXQgYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9M
YW1iZGFFeHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29yZS9MYW1iZGFFeHByZXNzaW9uLmphdmEKbmV3IGZpbGUgbW9k
ZSAxMDA2NDQKaW5kZXggMDAwMDAwMC4uMDQwZDk3MwotLS0gL2Rldi9udWxsCisrKyBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0xhbWJk
YUV4cHJlc3Npb24uamF2YQpAQCAtMCwwICsxLDEyNiBAQAorLyoqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioKKyAqIENvcHlyaWdodCAoYykgMjAxNCBJQk0gQ29ycG9yYXRpb24uCisgKiBBbGwgcmlnaHRz
IHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCisg
KiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1Ymxp
YyBMaWNlbnNlIHYxLjAKKyAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBh
bmQgaXMgYXZhaWxhYmxlIGF0CisgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12
MTAuaHRtbAorICogCisgKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGFuIGVhcmx5LWRy
YWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVyIHRoZSBKYXZhCisgKiBDb21tdW5pdHkg
UHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFibGUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1
YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBjb2RlIGlzIG5vdCBjb21wYXRpYmxlIHdpdGgg
YW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KKyAqIAorICogQ29udHJpYnV0b3JzOgorICog
ICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgorICoq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKiovCitwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b3JlOworCitpbXBvcnQgb3JnLmVjbGlwc2UuY29yZS5yZXNvdXJjZXMuSVJlc291cmNlOworaW1w
b3J0IG9yZy5lY2xpcHNlLmNvcmUucnVudGltZS5JUGF0aDsKK2ltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuY29yZS5JSmF2YUVsZW1lbnQ7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuSUxhbWJk
YUV4cHJlc3Npb247CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuSUxvY2FsVmFyaWFibGU7
CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuSU1lbWJlcjsKK2ltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuY29yZS5JU291cmNlUmFuZ2U7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuSVR5
cGVQYXJhbWV0ZXI7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuSmF2YU1vZGVsRXhjZXB0
aW9uOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLlNvdXJjZVJhbmdlOworaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLkNoYXJPcGVyYXRpb247CisKK3B1YmxpYyBjbGFz
cyBMYW1iZGFFeHByZXNzaW9uIGV4dGVuZHMgU291cmNlVHlwZSBpbXBsZW1lbnRzIElMYW1iZGFF
eHByZXNzaW9uIHsKKwkKKwlzdGF0aWMgZmluYWwgSUxhbWJkYUV4cHJlc3Npb25bXSBOT19MQU1C
REFTID0gbmV3IElMYW1iZGFFeHByZXNzaW9uWzBdOworCQorCWludCBkZWNsYXJhdGlvblNvdXJj
ZVN0YXJ0LCBkZWNsYXJhdGlvblNvdXJjZUVuZDsKKwlTdHJpbmdbXSBwYXJhbWV0ZXJUeXBlczsK
KwlTdHJpbmdbXSBwYXJhbWV0ZXJOYW1lczsKKwlTdHJpbmdbXSBzdXBlckludGVyZmFjZVNpZ247
CisJcHJpdmF0ZSBMYW1iZGFFeHByZXNzaW9uKEphdmFFbGVtZW50IHBhcmVudCkgeworCQlzdXBl
cihwYXJlbnQsIG5ldyBTdHJpbmcoQ2hhck9wZXJhdGlvbi5OT19DSEFSKSk7CisJfQorCXByb3Rl
Y3RlZCBMYW1iZGFFeHByZXNzaW9uKEphdmFFbGVtZW50IHBhcmVudCwgCisJCQkJCQkJCVN0cmlu
Z1tdIHBhcmFtZXRlclR5cGVzLCAKKwkJCQkJCQkJU3RyaW5nW10gcGFyYW1ldGVyTmFtZXMsIAor
CQkJCQkJCQlTdHJpbmcgc3VwZXJJbnRlcmZhY2UsCisJCQkJCQkJCWludCBkZWNsYXJhdGlvblNv
dXJjZVN0YXJ0LCAKKwkJCQkJCQkJaW50IGRlY2xhcmF0aW9uU291cmNlRW5kKSB7CisJCXRoaXMo
cGFyZW50KTsKKwkJaWYgKHBhcmFtZXRlclR5cGVzLmxlbmd0aCAhPSAwICYmIHBhcmFtZXRlclR5
cGVzLmxlbmd0aCAhPSBwYXJhbWV0ZXJOYW1lcy5sZW5ndGgpIHsKKwkJCS8vIFRPRE8gSGFuZGxl
IHRoaXMKKwkJfQorCQl0aGlzLmRlY2xhcmF0aW9uU291cmNlU3RhcnQgPSBkZWNsYXJhdGlvblNv
dXJjZVN0YXJ0OworCQl0aGlzLmRlY2xhcmF0aW9uU291cmNlRW5kID0gZGVjbGFyYXRpb25Tb3Vy
Y2VFbmQ7CisJCXRoaXMucGFyYW1ldGVyTmFtZXMgPSBwYXJhbWV0ZXJOYW1lczsKKwkJdGhpcy5w
YXJhbWV0ZXJUeXBlcyA9IHBhcmFtZXRlclR5cGVzOworCQl0aGlzLnN1cGVySW50ZXJmYWNlU2ln
biA9IG5ldyBTdHJpbmdbXXtzdXBlckludGVyZmFjZX07CisJfQorCS8qKgorCSAqIEBzZWUgSUph
dmFFbGVtZW50CisJICovCisJcHVibGljIGludCBnZXRFbGVtZW50VHlwZSgpIHsKKwkJcmV0dXJu
IFRZUEU7CisJfQorCUBPdmVycmlkZQorCXB1YmxpYyBpbnQgZ2V0TnVtYmVyT2ZQYXJhbWV0ZXJz
KCkgeworCQlyZXR1cm4gdGhpcy5wYXJhbWV0ZXJOYW1lcyA9PSBudWxsID8gMCA6IHRoaXMucGFy
YW1ldGVyTmFtZXMubGVuZ3RoOworCX0KKwlwdWJsaWMgYm9vbGVhbiBleGlzdHMoKSB7CisJCXJl
dHVybiB0aGlzLnBhcmVudC5leGlzdHMoKTsKKwl9CisJQE92ZXJyaWRlCisJcHVibGljIElMb2Nh
bFZhcmlhYmxlW10gZ2V0UGFyYW1ldGVycygpIHRocm93cyBKYXZhTW9kZWxFeGNlcHRpb24gewor
CQlJTG9jYWxWYXJpYWJsZVtdIGFyZ3VtZW50cyA9ICgoTGFtYmRhRWxlbWVudEluZm8pIGdldEVs
ZW1lbnRJbmZvKCkpLmFyZ3VtZW50czsKKwkJaWYgKGFyZ3VtZW50cyA9PSBudWxsKQorCQkJcmV0
dXJuIExvY2FsVmFyaWFibGUuTk9fTE9DQUxfVkFSSUFCTEVTOworCQlyZXR1cm4gYXJndW1lbnRz
OworCX0KKwkKKwlwdWJsaWMgU3RyaW5nW10gZ2V0U3VwZXJJbnRlcmZhY2VUeXBlU2lnbmF0dXJl
cygpIHRocm93cyBKYXZhTW9kZWxFeGNlcHRpb24geworCQlyZXR1cm4gdGhpcy5zdXBlckludGVy
ZmFjZVNpZ247CisJfQorCXB1YmxpYyBTdHJpbmdbXSBnZXRQYXJhbWV0ZXJOYW1lcygpIHRocm93
cyBKYXZhTW9kZWxFeGNlcHRpb24geworCQlyZXR1cm4gdGhpcy5wYXJhbWV0ZXJOYW1lczsKKwl9
CisJcHVibGljIFN0cmluZ1tdIGdldFBhcmFtZXRlclR5cGVzKCkgeworCQlyZXR1cm4gdGhpcy5w
YXJhbWV0ZXJUeXBlczsKKwl9CisJCisJcHVibGljIElNZW1iZXIgZ2V0RGVjbGFyaW5nTWVtYmVy
KCkgeworCQlyZXR1cm4gKElNZW1iZXIpIHRoaXMucGFyZW50OworCX0KKwlwdWJsaWMgSVBhdGgg
Z2V0UGF0aCgpIHsKKwkJcmV0dXJuIHRoaXMucGFyZW50LmdldFBhdGgoKTsKKwl9CisJcHVibGlj
IElSZXNvdXJjZSByZXNvdXJjZSgpIHsKKwkJcmV0dXJuIHRoaXMucGFyZW50LnJlc291cmNlKCk7
CisJfQorCXB1YmxpYyBJU291cmNlUmFuZ2UgZ2V0U291cmNlUmFuZ2UoKSB0aHJvd3MgSmF2YU1v
ZGVsRXhjZXB0aW9uIHsKKwkJaWYgKHRoaXMuZGVjbGFyYXRpb25Tb3VyY2VFbmQgPT0gLTEpIHsK
KwkJCVNvdXJjZU1hcHBlciBtYXBwZXI9IGdldFNvdXJjZU1hcHBlcigpOworCQkJaWYgKG1hcHBl
ciAhPSBudWxsKSB7CisJCQkJLy8gZW5zdXJlIHRoZSBjbGFzcyBmaWxlJ3MgYnVmZmVyIGlzIG9w
ZW4gc28gdGhhdCBzb3VyY2UgcmFuZ2VzIGFyZSBjb21wdXRlZAorCQkJCUNsYXNzRmlsZSBjbGFz
c0ZpbGUgPSAoQ2xhc3NGaWxlKWdldENsYXNzRmlsZSgpOworCQkJCWlmIChjbGFzc0ZpbGUgIT0g
bnVsbCkgeworCQkJCQljbGFzc0ZpbGUuZ2V0QnVmZmVyKCk7CisJCQkJCXJldHVybiBtYXBwZXIu
Z2V0U291cmNlUmFuZ2UodGhpcyk7CisJCQkJfQorCQkJfQorCQkJcmV0dXJuIFNvdXJjZU1hcHBl
ci5VTktOT1dOX1JBTkdFOworCQl9CisJCXJldHVybiBuZXcgU291cmNlUmFuZ2UodGhpcy5kZWNs
YXJhdGlvblNvdXJjZVN0YXJ0LCB0aGlzLmRlY2xhcmF0aW9uU291cmNlRW5kLXRoaXMuZGVjbGFy
YXRpb25Tb3VyY2VTdGFydCsxKTsKKwl9CisJcHVibGljIElUeXBlUGFyYW1ldGVyW10gZ2V0VHlw
ZVBhcmFtZXRlcnMoKSB0aHJvd3MgSmF2YU1vZGVsRXhjZXB0aW9uIHsKKwkJLy8gVE9PRDoKKwkJ
cmV0dXJuIFR5cGVQYXJhbWV0ZXIuTk9fVFlQRV9QQVJBTUVURVJTOworCX0KKworCXB1YmxpYyBT
dHJpbmdbXSBnZXRUeXBlUGFyYW1ldGVyU2lnbmF0dXJlcygpIHRocm93cyBKYXZhTW9kZWxFeGNl
cHRpb24geworCQlyZXR1cm4gbnVsbDsKKwl9CisJcHVibGljIElUeXBlUGFyYW1ldGVyIGdldFR5
cGVQYXJhbWV0ZXIoU3RyaW5nIHR5cGVQYXJhbWV0ZXJOYW1lKSB7CisJCXJldHVybiBudWxsOyAv
LyBUT0RPCisJfQorCXB1YmxpYyBib29sZWFuIGlzU3RydWN0dXJlS25vd24oKSB0aHJvd3MgSmF2
YU1vZGVsRXhjZXB0aW9uIHsKKwkJcmV0dXJuIHRydWU7CisJfQorfQorCmRpZmYgLS1naXQgYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9T
ZWxlY3Rpb25SZXF1ZXN0b3IuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL1NlbGVjdGlvblJlcXVlc3Rvci5qYXZhCmluZGV4IGYy
MjQ2NjguLjdlYjM2MmYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL1NlbGVjdGlvblJlcXVlc3Rvci5qYXZhCisrKyBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3Jl
L1NlbGVjdGlvblJlcXVlc3Rvci5qYXZhCkBAIC0xLDQgKzEsNCBAQAogLyoqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5k
IG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxNCBJQk0gQ29ycG9yYXRpb24gYW5k
IG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFj
Y29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVy
bXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMApAQCAtMjgsOCArMjgsMTEgQEAK
IGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5KYXZhTW9kZWxFeGNlcHRpb247CiBpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmNvcmUuU2lnbmF0dXJlOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5j
b3JlLmNvbXBpbGVyLio7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuQ2F0
ZWdvcml6ZWRQcm9ibGVtOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLkNo
YXJPcGVyYXRpb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvZGVhc3Npc3Qu
SVNlbGVjdGlvblJlcXVlc3RvcjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29k
ZWFzc2lzdC5TZWxlY3Rpb25FbmdpbmU7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFs
LmNvbXBpbGVyLmFzdC5BYnN0cmFjdFZhcmlhYmxlRGVjbGFyYXRpb247CitpbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5Bcmd1bWVudDsKK2ltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkxhbWJkYUV4cHJlc3Npb247CiBpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5Mb2NhbERlY2xhcmF0aW9uOwog
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5jbGFzc2ZtdC5DbGFzc0Zp
bGVDb25zdGFudHM7CkBAIC0zOCw0ICs0MSw1IEBACiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0Lmlu
dGVybmFsLmNvbXBpbGVyLmxvb2t1cC5Mb2NhbFZhcmlhYmxlQmluZGluZzsKIGltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLk1ldGhvZEJpbmRpbmc7CitpbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5NZXRob2RTY29wZTsK
IGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlBhcmFtZXRl
cml6ZWRUeXBlQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIubG9va3VwLlJlZmVyZW5jZUJpbmRpbmc7CkBAIC00NDgsNCArNDUyLDMwIEBACiAJTG9jYWxE
ZWNsYXJhdGlvbiBsb2NhbCA9IGJpbmRpbmcuZGVjbGFyYXRpb247CiAJSUphdmFFbGVtZW50IHBh
cmVudCA9IGZpbmRMb2NhbEVsZW1lbnQobG9jYWwuc291cmNlU3RhcnQpOyAvLyBmaW5kTG9jYWxF
bGVtZW50KCkgY2Fubm90IGZpbmQgbG9jYWwgdmFyaWFibGUKKwlpZighKHBhcmVudCBpbnN0YW5j
ZW9mIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLkxhbWJkYUV4cHJlc3Npb24pICYmIGJp
bmRpbmcuZGVjbGFyaW5nU2NvcGUuaXNMYW1iZGFTdWJzY29wZSgpKSB7CisJCU1ldGhvZFNjb3Bl
IHNjb3BlID0gYmluZGluZy5kZWNsYXJpbmdTY29wZS5tZXRob2RTY29wZSgpOworCQlMYW1iZGFF
eHByZXNzaW9uIGxhbWJkYSA9IChMYW1iZGFFeHByZXNzaW9uKSBzY29wZS5yZWZlcmVuY2VDb250
ZXh0OworCQlBcmd1bWVudFtdIGFyZ3VtZW50cyA9IGxhbWJkYS5hcmd1bWVudHMoKTsKKwkJaW50
IGxlbmd0aCA9IGFyZ3VtZW50cyA9PSBudWxsID8gMCA6IGFyZ3VtZW50cy5sZW5ndGg7CisJCVN0
cmluZ1tdIGFyZ05hbWVzID0gbnVsbDsKKwkJU3RyaW5nW10gYXJnVHlwZXMgPSBudWxsOworCQlp
ZiAobGVuZ3RoID4gMCkgeworCQkJYXJnTmFtZXMgPSBuZXcgU3RyaW5nW2xlbmd0aF07CisJCQlh
cmdUeXBlcyA9IG5ldyBTdHJpbmdbbGVuZ3RoXTsKKwkJCWZvcihpbnQgaSA9IDA7IGkgPCBhcmd1
bWVudHMubGVuZ3RoOyBpKyspIHsKKwkJCQlBcmd1bWVudCBhcmd1bWVudCA9IGFyZ3VtZW50c1tp
XTsKKwkJCQlhcmdOYW1lc1tpXSA9IG5ldyBTdHJpbmcoYXJndW1lbnQubmFtZSk7CisJCQkJaWYg
KGFyZ3VtZW50LnR5cGUgIT0gbnVsbCkgeworCQkJCQlhcmdUeXBlc1tpXSA9IG5ldyBTdHJpbmco
Q2hhck9wZXJhdGlvbi5jb25jYXRXaXRoKGFyZ3VtZW50LnR5cGUuZ2V0UGFyYW1ldGVyaXplZFR5
cGVOYW1lKCksICcuJykpOworCQkJCX0KKwkJCX0KKwkJfSBlbHNlIHsKKwkJCWFyZ05hbWVzID0g
bmV3IFN0cmluZ1swXTsKKwkJCWFyZ1R5cGVzID0gbmV3IFN0cmluZ1swXTsKKwkJfQorCQlTdHJp
bmcgdHlwZVNpZ25hdHVyZSA9IFNpZ25hdHVyZS5jcmVhdGVUeXBlU2lnbmF0dXJlKGxhbWJkYS5y
ZXNvbHZlZFR5cGUucmVhZGFibGVOYW1lKCksIGZhbHNlKTsKKwkJb3JnLmVjbGlwc2UuamR0Lmlu
dGVybmFsLmNvcmUuTGFtYmRhRXhwcmVzc2lvbiBsYW1iZGFFbGVtZW50ID0gCisJCQkJbmV3IG9y
Zy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLkxhbWJkYUV4cHJlc3Npb24oKEphdmFFbGVtZW50
KXBhcmVudCwgYXJnVHlwZXMsIGFyZ05hbWVzLCB0eXBlU2lnbmF0dXJlLCBsYW1iZGEuc291cmNl
U3RhcnQsIGxhbWJkYS5zb3VyY2VFbmQpOworCQlwYXJlbnQgPSBsYW1iZGFFbGVtZW50OworCX0K
IAlMb2NhbFZhcmlhYmxlIGxvY2FsVmFyID0gbnVsbDsKIAlpZihwYXJlbnQgIT0gbnVsbCkgew==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>240321</attachid>
            <date>2014-02-26 04:46:00 -0500</date>
            <delta_ts>2014-02-27 06:40:17 -0500</delta_ts>
            <desc>Updated patch</desc>
            <filename>Bug-425134--18model-Implement-IJavaElements-for-lamb.patch</filename>
            <type>text/plain</type>
            <size>32591</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9tb2RlbC9SZXNvbHZlVGVzdHMxOC5qYXZhIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21v
ZGVsL1Jlc29sdmVUZXN0czE4LmphdmEKaW5kZXggYTc3Y2QzMi4uMTI2NzM2NiAxMDA2NDQKLS0t
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9j
b3JlL3Rlc3RzL21vZGVsL1Jlc29sdmVUZXN0czE4LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21vZGVsL1Jl
c29sdmVUZXN0czE4LmphdmEKQEAgLTI5LDUgKzI5LDUgQEAKIAogc3RhdGljIHsKLQkvLyBURVNU
U19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7ICJ0ZXN0MDAyMyIgfTsKKy8vCSBURVNUU19OQU1FUyA9
IG5ldyBTdHJpbmdbXSB7ICJ0ZXN0NDIyNDY4YiIgfTsKIAkvLyBURVNUU19OVU1CRVJTID0gbmV3
IGludFtdIHsgMTI0IH07CiAJLy8gVEVTVFNfUkFOR0UgPSBuZXcgaW50W10geyAxNiwgLTEgfTsK
QEAgLTcxOSw1ICs3MTksNSBAQAogCWFzc2VydEVsZW1lbnRzRXF1YWwoCiAJCSJVbmV4cGVjdGVk
IGVsZW1lbnRzIiwKLQkJInh5eiBbaW4gZm9vKCkgW2luIFggW2luIFtXb3JraW5nIGNvcHldIFgu
amF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV0iLAorCQkieHl6IFtp
biA8YW5vbnltb3VzICMxPiBbaW4gZm9vKCkgW2luIFggW2luIFtXb3JraW5nIGNvcHldIFguamF2
YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV1dIiwKIAkJZWxlbWVudHMK
IAkpOwpAQCAtNzQ0LDUgKzc0NCw1IEBACiAJYXNzZXJ0RWxlbWVudHNFcXVhbCgKIAkJIlVuZXhw
ZWN0ZWQgZWxlbWVudHMiLAotCQkiYWJjIFtpbiBmb28oKSBbaW4gWCBbaW4gW1dvcmtpbmcgY29w
eV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXSIsCisJCSJh
YmMgW2luIDxhbm9ueW1vdXMgIzE+IFtpbiBmb28oKSBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0g
WC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXV0iLAogCQllbGVt
ZW50cwogCSk7CkBAIC03NjcsNSArNzY3LDUgQEAKIAlhc3NlcnRFbGVtZW50c0VxdWFsKAogCQki
VW5leHBlY3RlZCBlbGVtZW50cyIsCi0JCSJhYmMgW2luIGkgW2luIFggW2luIFtXb3JraW5nIGNv
cHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV0iLAorCQki
YWJjIFtpbiA8YW5vbnltb3VzICMxPiBbaW4gaSBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0gWC5q
YXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXV0iLAogCQllbGVtZW50
cwogCSk7CkBAIC03OTUsNSArNzk1LDUgQEAKIAlhc3NlcnRFbGVtZW50c0VxdWFsKAogCQkiVW5l
eHBlY3RlZCBlbGVtZW50cyIsCi0JCSJhYmMgW2luIG1haW4oU3RyaW5nW10pIFtpbiBYIFtpbiBb
V29ya2luZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1d
XV1dIiwKKwkJImFiYyBbaW4gPGFub255bW91cyAjMz4gW2luIG1haW4oU3RyaW5nW10pIFtpbiBY
IFtpbiBbV29ya2luZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNv
bHZlXV1dXV1dXSIsCiAJCWVsZW1lbnRzCiAJKTsKQEAgLTgyMyw1ICs4MjMsNSBAQAogCWFzc2Vy
dEVsZW1lbnRzRXF1YWwoCiAJCSJVbmV4cGVjdGVkIGVsZW1lbnRzIiwKLQkJInh5eiBbaW4gbWFp
bihTdHJpbmdbXSkgW2luIFggW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1bHQ+
IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV0iLAorCQkieHl6IFtpbiA8YW5vbnltb3VzICMyPiBb
aW4gbWFpbihTdHJpbmdbXSkgW2luIFggW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRl
ZmF1bHQ+IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV1dIiwKIAkJZWxlbWVudHMKIAkpOwpAQCAt
ODg5LDUgKzg4OSw1IEBACiAJYXNzZXJ0RWxlbWVudHNFcXVhbCgKIAkJIlVuZXhwZWN0ZWQgZWxl
bWVudHMiLAotCQkienl4IFtpbiBmeCBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0gWC5qYXZhIFtp
biA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXSIsCisJCSJ6eXggW2luIDxhbm9u
eW1vdXMgIzI+IFtpbiBmeCBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0gWC5qYXZhIFtpbiA8ZGVm
YXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXV0iLAogCQllbGVtZW50cwogCSk7CkBAIC05
MjIsNSArOTIyLDUgQEAKIAlhc3NlcnRFbGVtZW50c0VxdWFsKAogCQkiVW5leHBlY3RlZCBlbGVt
ZW50cyIsCi0JCSJ4eXogW2luIG1haW4oU3RyaW5nW10pIFtpbiBYIFtpbiBbV29ya2luZyBjb3B5
XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1dXV1dIiwKKwkJInh5
eiBbaW4gPGFub255bW91cyAjMj4gW2luIG1haW4oU3RyaW5nW10pIFtpbiBYIFtpbiBbV29ya2lu
ZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1dXV1dXSIs
CiAJCWVsZW1lbnRzCiAJKTsKQEAgLTk1Nyw1ICs5NTcsNSBAQAogCWFzc2VydEVsZW1lbnRzRXF1
YWwoCiAJCSJVbmV4cGVjdGVkIGVsZW1lbnRzIiwKLQkJImhpaiBbaW4gbWFpbihTdHJpbmdbXSkg
W2luIFggW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2lu
IFJlc29sdmVdXV1dXV0iLAorCQkiaGlqIFtpbiA8YW5vbnltb3VzICMzPiBbaW4gbWFpbihTdHJp
bmdbXSkgW2luIFggW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBz
cmMgW2luIFJlc29sdmVdXV1dXV1dIiwKIAkJZWxlbWVudHMKIAkpOwpAQCAtOTkzLDUgKzk5Myw1
IEBACiAJYXNzZXJ0RWxlbWVudHNFcXVhbCgKIAkJIlVuZXhwZWN0ZWQgZWxlbWVudHMiLAotCQki
aGlqIFtpbiBtYWluKFN0cmluZ1tdKSBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0gWC5qYXZhIFtp
biA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXSIsCisJCSJoaWogW2luIDxhbm9u
eW1vdXMgIzM+IFtpbiBtYWluKFN0cmluZ1tdKSBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0gWC5q
YXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXV0iLAogCQllbGVtZW50
cwogCSk7CkBAIC0xNDMyLDUgKzE0MzIsNSBAQAogCWFzc2VydEVsZW1lbnRzRXF1YWwoCiAJCSJV
bmV4cGVjdGVkIGVsZW1lbnRzIiwKLQkJImZpcnN0IFtpbiBpIFtpbiBYIFtpbiBbV29ya2luZyBj
b3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1dXV1dIiwKKwkJ
ImZpcnN0IFtpbiA8YW5vbnltb3VzICMxPiBbaW4gaSBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0g
WC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXV0iLAogCQllbGVt
ZW50cwogCSk7CkBAIC0xNDU1LDUgKzE0NTUsNSBAQAogCWFzc2VydEVsZW1lbnRzRXF1YWwoCiAJ
CSJVbmV4cGVjdGVkIGVsZW1lbnRzIiwKLQkJImZpcnN0IFtpbiBpIFtpbiBYIFtpbiBbV29ya2lu
ZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1dXV1dIiwK
KwkJImZpcnN0IFtpbiA8YW5vbnltb3VzICMxPiBbaW4gaSBbaW4gWCBbaW4gW1dvcmtpbmcgY29w
eV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXV0iLAogCQll
bGVtZW50cwogCSk7CkBAIC0xNDc4LDUgKzE0NzgsNSBAQAogCWFzc2VydEVsZW1lbnRzRXF1YWwo
CiAJCSJVbmV4cGVjdGVkIGVsZW1lbnRzIiwKLQkJInNlY29uZCBbaW4gaSBbaW4gWCBbaW4gW1dv
cmtpbmcgY29weV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1d
XSIsCisJCSJzZWNvbmQgW2luIDxhbm9ueW1vdXMgIzE+IFtpbiBpIFtpbiBYIFtpbiBbV29ya2lu
ZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1dXV1dXSIs
CiAJCWVsZW1lbnRzCiAJKTsKQEAgLTE0OTMsNCArMTQ5Myw1IEBACiAJCQkiCXB1YmxpYyBzdGF0
aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKwogCQkJIgkJZ29vKCh4KSAtPiAoeSkg
LT4gKHopIC0+IHouZm9vKChwKSAtPiBwKSk7XG4iICsKKwkJCSIJCUkgaSA9IG5ldyBJKCl7IHB1
YmxpYyBJIGZvbyhJIHgpIHtyZXR1cm4gbnVsbDt9IH07XG4iICsKIAkJCSIJfVxuIiArCiAJCQki
fSBcbiIpOwpAQCAtMTUwNCw1ICsxNTA1LDUgQEAKIAlhc3NlcnRFbGVtZW50c0VxdWFsKAogCQki
VW5leHBlY3RlZCBlbGVtZW50cyIsCi0JCSJ5IFtpbiBtYWluKFN0cmluZ1tdKSBbaW4gWCBbaW4g
W1dvcmtpbmcgY29weV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1d
XV1dXSIsCisJCSJ5IFtpbiA8YW5vbnltb3VzICMyPiBbaW4gbWFpbihTdHJpbmdbXSkgW2luIFgg
W2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2luIFJlc29s
dmVdXV1dXV1dIiwKIAkJZWxlbWVudHMKIAkpOwpAQCAtMTUzMCw1ICsxNTMxLDUgQEAKIAlhc3Nl
cnRFbGVtZW50c0VxdWFsKAogCQkiVW5leHBlY3RlZCBlbGVtZW50cyIsCi0JCSJ5IFtpbiBtYWlu
KFN0cmluZ1tdKSBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4g
W2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXSIsCisJCSJ5IFtpbiA8YW5vbnltb3VzICMyPiBbaW4g
bWFpbihTdHJpbmdbXSkgW2luIFggW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1
bHQ+IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV1dIiwKIAkJZWxlbWVudHMKIAkpOwpAQCAtMTU5
NCw1ICsxNTk1LDUgQEAKIAlhc3NlcnRFbGVtZW50c0VxdWFsKAogCQkiVW5leHBlY3RlZCBlbGVt
ZW50cyIsCi0JCSJxIFtpbiBtYWluKFN0cmluZ1tdKSBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0g
WC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXSIsCisJCSJxIFtp
biA8YW5vbnltb3VzICMzPiBbaW4gbWFpbihTdHJpbmdbXSkgW2luIFggW2luIFtXb3JraW5nIGNv
cHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV1dIiwKIAkJ
ZWxlbWVudHMKIAkpOwpAQCAtMTYyOSw1ICsxNjMwLDUgQEAKIAlhc3NlcnRFbGVtZW50c0VxdWFs
KAogCQkiVW5leHBlY3RlZCBlbGVtZW50cyIsCi0JCSJ4IFtpbiBtYWluKFN0cmluZ1tdKSBbaW4g
WCBbaW4gW1dvcmtpbmcgY29weV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVz
b2x2ZV1dXV1dXSIsCisJCSJ4IFtpbiA8YW5vbnltb3VzICMxPiBbaW4gbWFpbihTdHJpbmdbXSkg
W2luIFggW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2lu
IFJlc29sdmVdXV1dXV1dIiwKIAkJZWxlbWVudHMKIAkpOwpAQCAtMTc4OCw1ICsxNzg5LDUgQEAK
IAlhc3NlcnRFbGVtZW50c0VxdWFsKAogCQkiVW5leHBlY3RlZCBlbGVtZW50cyIsCi0JCSJ2MSBb
aW4gcHJvY2Vzc0phcihQYXRoKSBbaW4gSW5zaXN0ZW50Q2FwdHVyZSBbaW4gW1dvcmtpbmcgY29w
eV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXSIsCisJCSJ2
MSBbaW4gPGFub255bW91cyAjMj4gW2luIHByb2Nlc3NKYXIoUGF0aCkgW2luIEluc2lzdGVudENh
cHR1cmUgW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2lu
IFJlc29sdmVdXV1dXV1dIiwKIAkJZWxlbWVudHMsCiAJCXRydWUKQEAgLTE4NTMsNSArMTg1NCw1
IEBACiAJYXNzZXJ0RWxlbWVudHNFcXVhbCgKIAkJIlVuZXhwZWN0ZWQgZWxlbWVudHMiLAotCQki
djIgW2luIHByb2Nlc3NKYXIoUGF0aCkgW2luIEluc2lzdGVudENhcHR1cmUgW2luIFtXb3JraW5n
IGNvcHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV0iLAor
CQkidjIgW2luIDxhbm9ueW1vdXMgIzM+IFtpbiBwcm9jZXNzSmFyKFBhdGgpIFtpbiBJbnNpc3Rl
bnRDYXB0dXJlIFtpbiBbV29ya2luZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3Jj
IFtpbiBSZXNvbHZlXV1dXV1dXSIsCiAJCWVsZW1lbnRzLAogCQl0cnVlCkBAIC0xOTE4LDUgKzE5
MTksNSBAQAogCWFzc2VydEVsZW1lbnRzRXF1YWwoCiAJCSJVbmV4cGVjdGVkIGVsZW1lbnRzIiwK
LQkJInMxIFtpbiB3aXRoV2lsZGNhcmQoU3RyZWFtPD8gZXh0ZW5kcyBTdHJpbmc+KSBbaW4gSW5z
aXN0ZW50Q2FwdHVyZSBbaW4gW1dvcmtpbmcgY29weV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2lu
IHNyYyBbaW4gUmVzb2x2ZV1dXV1dXSIsCisJCSJzMSBbaW4gPGFub255bW91cyAjMT4gW2luIHdp
dGhXaWxkY2FyZChTdHJlYW08PyBleHRlbmRzIFN0cmluZz4pIFtpbiBJbnNpc3RlbnRDYXB0dXJl
IFtpbiBbV29ya2luZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNv
bHZlXV1dXV1dXSIsCiAJCWVsZW1lbnRzLAogCQl0cnVlCkBAIC0xOTgzLDUgKzE5ODQsNSBAQAog
CWFzc2VydEVsZW1lbnRzRXF1YWwoCiAJCSJVbmV4cGVjdGVkIGVsZW1lbnRzIiwKLQkJInMyIFtp
biB3aXRob3V0V2lsZGNhcmQoU3RyZWFtPFN0cmluZz4pIFtpbiBJbnNpc3RlbnRDYXB0dXJlIFtp
biBbV29ya2luZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZl
XV1dXV1dIiwKKwkJInMyIFtpbiA8YW5vbnltb3VzICMxPiBbaW4gd2l0aG91dFdpbGRjYXJkKFN0
cmVhbTxTdHJpbmc+KSBbaW4gSW5zaXN0ZW50Q2FwdHVyZSBbaW4gW1dvcmtpbmcgY29weV0gWC5q
YXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXV0iLAogCQllbGVtZW50
cywKIAkJdHJ1ZQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29kZWFzc2lzdC9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29kZWFzc2lzdC9TZWxlY3Rpb25FbmdpbmUuamF2YSBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvZGVhc3Npc3Qvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvZGVhc3Npc3QvU2VsZWN0aW9uRW5naW5lLmphdmEKaW5kZXggYTRhZGQ4OC4uN2Y5ODZkOCAx
MDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29kZWFzc2lzdC9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29kZWFzc2lzdC9TZWxlY3Rpb25FbmdpbmUuamF2YQorKysgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb2RlYXNzaXN0L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb2RlYXNz
aXN0L1NlbGVjdGlvbkVuZ2luZS5qYXZhCkBAIC0xLDQgKzEsNCBAQAogLyoqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5k
IG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxNCBJQk0gQ29ycG9yYXRpb24gYW5k
IG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFj
Y29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVy
bXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMApAQCAtNTksNCArNTksNSBAQAog
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLnNlYXJjaC5UeXBlTmFtZU1hdGNo
UmVxdWVzdG9yV3JhcHBlcjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS51
dGlsLkFTVE5vZGVGaW5kZXI7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvcmUu
dXRpbC5BU1ROb2RlRmluZGVyLkFTVE5vZGVTZWFyY2hSZXN1bHQ7CiBpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvcmUudXRpbC5IYXNoU2V0T2ZDaGFyQXJyYXlBcnJheTsKIApAQCAt
MTM4OSw2ICsxMzkwLDE5IEBACiAJCQkJCQlTeXN0ZW0ub3V0LnByaW50bG4ocGFyc2VkVW5pdC50
b1N0cmluZygpKTsKIAkJCQkJfQotCQkJCQkvLyBmaW5kIHRoZSB0eXBlIGRlY2xhcmF0aW9uIHRo
YXQgY29ycmVzcG9uZHMgdG8gdGhlIG9yaWdpbmFsIHNvdXJjZSB0eXBlCi0JCQkJCXR5cGVEZWNs
YXJhdGlvbiA9IG5ldyBBU1ROb2RlRmluZGVyKHBhcnNlZFVuaXQpLmZpbmRUeXBlKGNvbnRleHQp
OworCisJCQkJCUFTVE5vZGVTZWFyY2hSZXN1bHQgc2VhcmNoUmVzdWx0ID0gbmV3IEFTVE5vZGVG
aW5kZXIocGFyc2VkVW5pdCkuZmluZFR5cGUoY29udGV4dCk7CisJCQkJCWlmIChzZWFyY2hSZXN1
bHQudHlwZSAhPSBudWxsKSB7CisJCQkJCQl0eXBlRGVjbGFyYXRpb24gPSBzZWFyY2hSZXN1bHQu
dHlwZTsKKwkJCQkJfSBlbHNlIGlmIChzZWFyY2hSZXN1bHQubGFtYmRhICE9IG51bGwpIHsKKwkJ
CQkJCXJlc3VsdC5jb21waWxhdGlvblVuaXQgPSAoSUNvbXBpbGF0aW9uVW5pdCkgY3U7CisJCQkJ
CQl0aGlzLmxvb2t1cEVudmlyb25tZW50LmJ1aWxkVHlwZUJpbmRpbmdzKHBhcnNlZFVuaXQsIG51
bGwgLypubyBhY2Nlc3MgcmVzdHJpY3Rpb24qLyk7CisJCQkJCQlpZiAoKHRoaXMudW5pdFNjb3Bl
ID0gcGFyc2VkVW5pdC5zY29wZSkgIT0gbnVsbCkgeworCQkJCQkJCXRoaXMubG9va3VwRW52aXJv
bm1lbnQuY29tcGxldGVUeXBlQmluZGluZ3MocGFyc2VkVW5pdCwgdHJ1ZSk7CisJCQkJCQkJLy8g
cmVzb2x2ZQorCQkJCQkJCXBhcnNlZFVuaXQuc2NvcGUuZmF1bHRJblR5cGVzKCk7CisJCQkJCQkJ
cGFyc2VkVW5pdC5yZXNvbHZlKCk7CisJCQkJCQl9CisJCQkJCQlzZWxlY3RGcm9tKHNlYXJjaFJl
c3VsdC5sYW1iZGEuZXhwZWN0ZWRUeXBlKCksIHBhcnNlZFVuaXQsIGZhbHNlKTsKKwkJCQkJfQog
CQkJCX0KIAkJCX0gZWxzZSB7IC8vIGJpbmFyeSB0eXBlCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcGFy
c2VyL1BhcnNlci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3BhcnNlci9QYXJzZXIuamF2YQppbmRleCA2NTBkZDc3
Li5hOTBiZjBkIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcGFyc2VyL1BhcnNlci5qYXZhCisrKyBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9wYXJzZXIvUGFyc2VyLmphdmEKQEAgLTc5NzMsNCArNzk3Myw1IEBACiAJCXByb2JsZW1S
ZXBvcnRlcigpLmxhbWJkYUV4cHJlc3Npb25zTm90QmVsb3cxOChsZXhwKTsKIAl9CisJbWFya0Vu
Y2xvc2luZ01lbWJlcldpdGhMb2NhbFR5cGUoKTsKIAlwdXNoT25FeHByZXNzaW9uU3RhY2sobGV4
cCk7CiAJaWYgKHRoaXMuY3VycmVudEVsZW1lbnQgIT0gbnVsbCkgewpkaWZmIC0tZ2l0IGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L0lTb3VyY2VFbGVtZW50UmVxdWVzdG9yLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2Rl
bC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvSVNvdXJjZUVsZW1lbnRSZXF1ZXN0
b3IuamF2YQppbmRleCA2OWYzMTNhLi5kOTY1ZmIwIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvSVNvdXJjZUVs
ZW1lbnRSZXF1ZXN0b3IuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvSVNvdXJjZUVsZW1lbnRSZXF1ZXN0b3IuamF2
YQpAQCAtMSw0ICsxLDQgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQg
KGMpIDIwMDAsIDIwMTMgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQg
KGMpIDIwMDAsIDIwMTQgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRz
IHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAg
KiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1Ymxp
YyBMaWNlbnNlIHYxLjAKQEAgLTUyLDQgKzUyLDUgQEAKIAogCXB1YmxpYyBzdGF0aWMgY2xhc3Mg
VHlwZUluZm8geworCQlwdWJsaWMgYm9vbGVhbiBpc0xhbWJkYTsKIAkJcHVibGljIGJvb2xlYW4g
dHlwZUFubm90YXRlZDsKIAkJcHVibGljIGludCBkZWNsYXJhdGlvblN0YXJ0OwpAQCAtMTAxLDUg
KzEwMiw0IEBACiAJCXB1YmxpYyBQYXJhbWV0ZXJJbmZvW10gcGFyYW1ldGVySW5mb3M7CiAJfQot
CiAJcHVibGljIHN0YXRpYyBjbGFzcyBQYXJhbWV0ZXJJbmZvIHsKIAkJcHVibGljIGludCBtb2Rp
ZmllcnM7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvU291cmNlRWxlbWVudE5vdGlmaWVyLmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
U291cmNlRWxlbWVudE5vdGlmaWVyLmphdmEKaW5kZXggMjIwODM2NS4uNGFhMGUwOSAxMDA2NDQK
LS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL1NvdXJjZUVsZW1lbnROb3RpZmllci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9Tb3VyY2VFbGVt
ZW50Tm90aWZpZXIuamF2YQpAQCAtMSw0ICsxLDQgQEAKIC8qKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
Ci0gKiBDb3B5cmlnaHQgKGMpIDIwMDgsIDIwMTMgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMu
CisgKiBDb3B5cmlnaHQgKGMpIDIwMDgsIDIwMTQgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMu
CiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlp
bmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRo
ZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKQEAgLTIwLDQgKzIwLDUgQEAKIGltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5DaGFyT3BlcmF0aW9uOwogaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5JU291cmNlRWxlbWVudFJlcXVlc3Rvci5QYXJh
bWV0ZXJJbmZvOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5JU291
cmNlRWxlbWVudFJlcXVlc3Rvci5UeXBlSW5mbzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50
ZXJuYWwuY29tcGlsZXIuSVNvdXJjZUVsZW1lbnRSZXF1ZXN0b3IuVHlwZVBhcmFtZXRlckluZm87
CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5BU1ROb2RlOwpA
QCAtNDAsNCArNDEsNSBAQAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxl
ci5hc3QuSW1wb3J0UmVmZXJlbmNlOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b21waWxlci5hc3QuSW5pdGlhbGl6ZXI7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFs
LmNvbXBpbGVyLmFzdC5MYW1iZGFFeHByZXNzaW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5p
bnRlcm5hbC5jb21waWxlci5hc3QuTWVzc2FnZVNlbmQ7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmludGVybmFsLmNvbXBpbGVyLmFzdC5NZXRob2REZWNsYXJhdGlvbjsKQEAgLTUyLDQgKzU0LDUg
QEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkV4dHJh
Q29tcGlsZXJNb2RpZmllcnM7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBp
bGVyLmxvb2t1cC5NZXRob2RTY29wZTsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwu
Y29tcGlsZXIubG9va3VwLlR5cGVCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRl
cm5hbC5jb21waWxlci5sb29rdXAuVHlwZUNvbnN0YW50czsKIGltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIudXRpbC5IYXNodGFibGVPZk9iamVjdFRvSW50OwpAQCAtODYs
NCArODksOCBAQAogCQkJcmV0dXJuIGZhbHNlOyAvLyBkb24ndCB2aXNpdCBtZW1iZXJzIGFzIHRo
aXMgd2FzIGRvbmUgZHVyaW5nIG5vdGlmeVNvdXJjZUVsZW1lbnRSZXF1ZXN0b3IoLi4uKQogCQl9
CisJCXB1YmxpYyBib29sZWFuIHZpc2l0KExhbWJkYUV4cHJlc3Npb24gZXhwcmVzc2lvbiwgQmxv
Y2tTY29wZSBzY29wZSkgeworCQkJcHJvY2Vzc0xhbWJkYShleHByZXNzaW9uLCBleHByZXNzaW9u
LmV4cGVjdGVkVHlwZSgpKTsKKwkJCXJldHVybiB0cnVlOworCQl9CiAJfQogCkBAIC0xMTAsNCAr
MTE3LDE1IEBACiAJdGhpcy5uZXN0ZWRUeXBlSW5kZXggPSAwOwogfQorcHJvdGVjdGVkIHZvaWQg
cHJvY2Vzc0xhbWJkYShMYW1iZGFFeHByZXNzaW9uIGxhbWJkYUV4cHJlc3Npb24sIFR5cGVCaW5k
aW5nIHR5cGUpIHsKKwlUeXBlSW5mbyBjdXJyZW50ID0gbmV3IFR5cGVJbmZvKCk7CisJY3VycmVu
dC5uYW1lID0gQ2hhck9wZXJhdGlvbi5OT19DSEFSOworCWN1cnJlbnQuaXNMYW1iZGEgPSB0cnVl
OworCWN1cnJlbnQuYW5vbnltb3VzTWVtYmVyID0gdHJ1ZTsKKwljdXJyZW50LmRlY2xhcmF0aW9u
U3RhcnQgPSBsYW1iZGFFeHByZXNzaW9uLnNvdXJjZVN0YXJ0OworCWN1cnJlbnQubmFtZVNvdXJj
ZVN0YXJ0ID0gbGFtYmRhRXhwcmVzc2lvbi5zb3VyY2VTdGFydDsKKwljdXJyZW50Lm5hbWVTb3Vy
Y2VFbmQgPSBsYW1iZGFFeHByZXNzaW9uLnNvdXJjZUVuZDsKKwl0aGlzLnJlcXVlc3Rvci5lbnRl
clR5cGUoY3VycmVudCk7CisJdGhpcy5yZXF1ZXN0b3IuZXhpdFR5cGUobGFtYmRhRXhwcmVzc2lv
bi5zb3VyY2VFbmQpOworfQogcHJvdGVjdGVkIE9iamVjdFtdW10gZ2V0QXJndW1lbnRJbmZvcyhB
cmd1bWVudFtdIGFyZ3VtZW50cykgewogCWludCBhcmd1bWVudExlbmd0aCA9IGFyZ3VtZW50cy5s
ZW5ndGg7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcGFyc2VyL1NvdXJjZVR5cGVDb252ZXJ0ZXIuamF2YSBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9wYXJzZXIvU291cmNlVHlwZUNvbnZlcnRlci5qYXZhCmluZGV4IDQ3MWZmNjAuLmJlMWYx
NTEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9wYXJzZXIvU291cmNlVHlwZUNvbnZlcnRlci5qYXZhCisrKyBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9wYXJzZXIvU291cmNlVHlwZUNvbnZlcnRlci5qYXZhCkBAIC0xMjAsNyArMTIwLDggQEAK
IAkJb3JnLmVjbGlwc2UuamR0LmNvcmUuSUNvbXBpbGF0aW9uVW5pdCBjdUhhbmRsZSA9IHRvcExl
dmVsVHlwZUluZm8uZ2V0SGFuZGxlKCkuZ2V0Q29tcGlsYXRpb25Vbml0KCk7CiAJCXRoaXMuY3Ug
PSAoSUNvbXBpbGF0aW9uVW5pdCkgY3VIYW5kbGU7Ci0KKwkJQ29tcGlsYXRpb25Vbml0RWxlbWVu
dEluZm8gdW5pdEluZm8gPSAoQ29tcGlsYXRpb25Vbml0RWxlbWVudEluZm8pICgoSmF2YUVsZW1l
bnQpdGhpcy5jdSkuZ2V0RWxlbWVudEluZm8oKTsKIAkJaWYgKHRoaXMuaGFzMV81Q29tcGxpYW5j
ZSAmJiAKLQkJCQkoKENvbXBpbGF0aW9uVW5pdEVsZW1lbnRJbmZvKSAoKEphdmFFbGVtZW50KSB0
aGlzLmN1KS5nZXRFbGVtZW50SW5mbygpKS5hbm5vdGF0aW9uTnVtYmVyID49IENvbXBpbGF0aW9u
VW5pdEVsZW1lbnRJbmZvLkFOTk9UQVRJT05fVEhSRVNIT0xEX0ZPUl9ESUVUX1BBUlNFKSB7CisJ
CQkJKHVuaXRJbmZvLmFubm90YXRpb25OdW1iZXIgPj0gQ29tcGlsYXRpb25Vbml0RWxlbWVudElu
Zm8uQU5OT1RBVElPTl9USFJFU0hPTERfRk9SX0RJRVRfUEFSU0UgfHwKKwkJCQl1bml0SW5mby5s
YW1iZGFzUHJlc2VudCkpIHsKIAkJCS8vIElmIG1vcmUgdGhhbiAxMCBhbm5vdGF0aW9ucywgZGll
dCBwYXJzZSBhcyB0aGlzIGlzIGZhc3RlciwgYnV0IG5vdCBpZgogCQkJLy8gdGhlIGNsaWVudCB3
YW50cyBsb2NhbCBhbmQgYW5vbnltb3VzIHR5cGVzIHRvIGJlIGNvbnZlcnRlZCAoaHR0cHM6Ly9i
dWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTI1NDczOCkKZGlmZiAtLWdpdCBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3Jl
L0NvbXBpbGF0aW9uVW5pdEVsZW1lbnRJbmZvLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9t
b2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9Db21waWxhdGlvblVuaXRFbGVtZW50
SW5mby5qYXZhCmluZGV4IDJmNjhiY2MuLmRlZTY3NGMgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0NvbXBpbGF0aW9u
VW5pdEVsZW1lbnRJbmZvLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvQ29tcGlsYXRpb25Vbml0RWxlbWVudEluZm8uamF2
YQpAQCAtNDEsNCArNDEsOSBAQAogCXB1YmxpYyBpbnQgYW5ub3RhdGlvbk51bWJlciA9IDA7CiAK
KwkvKgorCSAqIEluZGljYXRlcyB3aGV0aGVyIHRoZXJlIGFyZSBsYW1iZGEgZXhwcmVzc2lvbnMg
aW5zaWRlIHRoaXMgY29tcGlsYXRpb24gdW5pdAorCSAqLworCXB1YmxpYyBib29sZWFuIGxhbWJk
YXNQcmVzZW50ID0gZmFsc2U7CisKIC8qKgogICogUmV0dXJucyB0aGUgbGVuZ3RoIG9mIHRoZSBz
b3VyY2Ugc3RyaW5nLgpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvQ29tcGlsYXRpb25Vbml0U3RydWN0dXJlUmVxdWVz
dG9yLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29yZS9Db21waWxhdGlvblVuaXRTdHJ1Y3R1cmVSZXF1ZXN0b3IuamF2YQppbmRleCBk
MGY4YmM0Li45Njg5YTAwIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9Db21waWxhdGlvblVuaXRTdHJ1Y3R1cmVSZXF1
ZXN0b3IuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29yZS9Db21waWxhdGlvblVuaXRTdHJ1Y3R1cmVSZXF1ZXN0b3IuamF2YQpA
QCAtMSw0ICsxLDQgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMp
IDIwMDAsIDIwMTMgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMp
IDIwMDAsIDIwMTQgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJl
c2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBh
cmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBM
aWNlbnNlIHYxLjAKQEAgLTI1Niw0ICsyNTYsOCBAQAogcHJvdGVjdGVkIFNvdXJjZVR5cGUgY3Jl
YXRlVHlwZUhhbmRsZShKYXZhRWxlbWVudCBwYXJlbnQsIFR5cGVJbmZvIHR5cGVJbmZvKSB7CiAJ
U3RyaW5nIG5hbWVTdHJpbmc9IG5ldyBTdHJpbmcodHlwZUluZm8ubmFtZSk7CisJaWYgKHR5cGVJ
bmZvLmlzTGFtYmRhKSB7CisJCXRoaXMudW5pdEluZm8ubGFtYmRhc1ByZXNlbnQgPSB0cnVlOwor
CQlyZXR1cm4gbmV3IExhbWJkYUV4cHJlc3Npb24ocGFyZW50KTsKKwl9CiAJcmV0dXJuIG5ldyBT
b3VyY2VUeXBlKHBhcmVudCwgbmFtZVN0cmluZyk7CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9KYXZhRWxlbWVu
dC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvcmUvSmF2YUVsZW1lbnQuamF2YQppbmRleCA5ZmQyZDQ3Li5iMTg1MWQxIDEwMDY0NAot
LS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29yZS9KYXZhRWxlbWVudC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0phdmFFbGVtZW50LmphdmEKQEAgLTEsOCArMSwx
MiBAQAogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAx
MyBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAx
NCBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRo
aXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2
YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEu
MAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFi
bGUgYXQKICAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCisgKgor
ICogVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBhbiBlYXJseS1kcmFmdCBzcGVjaWZpY2F0
aW9uIGRldmVsb3BlZCB1bmRlciB0aGUgSmF2YQorICogQ29tbXVuaXR5IFByb2Nlc3MgKEpDUCkg
YW5kIGlzIG1hZGUgYXZhaWxhYmxlIGZvciB0ZXN0aW5nIGFuZCBldmFsdWF0aW9uIHB1cnBvc2Vz
CisgKiBvbmx5LiBUaGUgY29kZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGFueSBzcGVjaWZpY2F0
aW9uIG9mIHRoZSBKQ1AuCiAgKgogICogQ29udHJpYnV0b3JzOgpAQCAtMzk3LDUgKzQwMSw1IEBA
CiAJCQkJCQkJLy8gcG9zaXRpb24gaW4gZmllbGQncyB0eXBlOiB1c2UgZmlyc3QgZmllbGQKIAkJ
CQkJCQlyZXR1cm4gY2FuZGlkYXRlLmdldFNvdXJjZUVsZW1lbnRBdChwb3NpdGlvbik7Ci0JCQkJ
CQl9IGVsc2UgaWYgKGNoaWxkIGluc3RhbmNlb2YgSVBhcmVudCkgeworCQkJCQkJfSBlbHNlIGlm
IChjaGlsZCBpbnN0YW5jZW9mIElQYXJlbnQgJiYgIShjaGlsZCBpbnN0YW5jZW9mIExhbWJkYUV4
cHJlc3Npb24pKSB7CiAJCQkJCQkJcmV0dXJuIGNoaWxkLmdldFNvdXJjZUVsZW1lbnRBdChwb3Np
dGlvbik7CiAJCQkJCQl9IGVsc2UgewpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
bW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvTGFtYmRhRXhwcmVzc2lvbi5qYXZh
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
cmUvTGFtYmRhRXhwcmVzc2lvbi5qYXZhCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAw
MDAuLmNlOGEwZDQKLS0tIC9kZXYvbnVsbAorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2Rl
bC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9MYW1iZGFFeHByZXNzaW9uLmphdmEKQEAg
LTAsMCArMSw4MSBAQAorLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKKyAqIENvcHlyaWdodCAoYykg
MjAxNCBJQk0gQ29ycG9yYXRpb24uCisgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dy
YW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCisgKiBhcmUgbWFkZSBhdmFpbGFibGUg
dW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKKyAqIHdo
aWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0Cisg
KiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbAorICogCisgKiBUaGlz
IGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2
ZWxvcGVkIHVuZGVyIHRoZSBKYXZhCisgKiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMg
bWFkZSBhdmFpbGFibGUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9u
bHkuIFRoZSBjb2RlIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24gb2Yg
dGhlIEpDUC4KKyAqIAorICogQ29udHJpYnV0b3JzOgorICogICAgIElCTSBDb3Jwb3JhdGlvbiAt
IGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgorICoqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiov
CitwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlOworCitpbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmNvcmUuSUphdmFFbGVtZW50OworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3Jl
LklNZXRob2Q7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuSVR5cGVQYXJhbWV0ZXI7Citp
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuSmF2YU1vZGVsRXhjZXB0aW9uOworaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLkNoYXJPcGVyYXRpb247CisKK3B1YmxpYyBjbGFz
cyBMYW1iZGFFeHByZXNzaW9uIGV4dGVuZHMgU291cmNlVHlwZSB7CisJCisvLwlpbnQgZGVjbGFy
YXRpb25Tb3VyY2VTdGFydCwgZGVjbGFyYXRpb25Tb3VyY2VFbmQ7CisJU3RyaW5nW10gc3VwZXJJ
bnRlcmZhY2VTaWduOworCVN0cmluZ1tdIHBhcmFtZXRlclR5cGVzOworCVN0cmluZyBtZXRob2RT
ZWxlY3RvcjsgCisJcHVibGljIExhbWJkYUV4cHJlc3Npb24oSmF2YUVsZW1lbnQgcGFyZW50KSB7
CisJCXN1cGVyKHBhcmVudCwgbmV3IFN0cmluZyhDaGFyT3BlcmF0aW9uLk5PX0NIQVIpKTsKKwl9
CisJcHVibGljIExhbWJkYUV4cHJlc3Npb24oSmF2YUVsZW1lbnQgcGFyZW50LCBTdHJpbmcgbWV0
aG9kTmFtZSwgU3RyaW5nW10gc3VwZXJJbnRlcmZhY2VTaWcsIFN0cmluZ1tdIHBhcmFtZXRlclR5
cGVzLCBpbnQgZGVjbFN0YXJ0LCBpbnQgZGVjbEVuZCkgeworCQlzdXBlcihwYXJlbnQsIG5ldyBT
dHJpbmcoQ2hhck9wZXJhdGlvbi5OT19DSEFSKSk7CisJCXRoaXMuc3VwZXJJbnRlcmZhY2VTaWdu
ID0gc3VwZXJJbnRlcmZhY2VTaWc7CisJCXRoaXMubWV0aG9kU2VsZWN0b3IgPSBtZXRob2ROYW1l
OworCQlpZiAocGFyYW1ldGVyVHlwZXMgPT0gbnVsbCkgeworCQkJdGhpcy5wYXJhbWV0ZXJUeXBl
cz0gQ2hhck9wZXJhdGlvbi5OT19TVFJJTkdTOworCQl9IGVsc2UgeworCQkJdGhpcy5wYXJhbWV0
ZXJUeXBlcz0gcGFyYW1ldGVyVHlwZXM7CisJCX0KKwl9CisJLyoqCisJICogQHNlZSBJSmF2YUVs
ZW1lbnQKKwkgKi8KKwlwdWJsaWMgaW50IGdldEVsZW1lbnRUeXBlKCkgeworCQlyZXR1cm4gVFlQ
RTsKKwl9CisJLyoqCisJICogQHNlZSBKYXZhRWxlbWVudCNnZXRIYW5kbGVNZW1lbnRvKCkKKwkg
Ki8KKworCXB1YmxpYyBib29sZWFuIGV4aXN0cygpIHsKKwkJcmV0dXJuIHRoaXMucGFyZW50LmV4
aXN0cygpOworCX0KKwkvKioKKwkgKiBAc2VlIElNZXRob2QKKwkgKi8KKwlwdWJsaWMgaW50IGdl
dE51bWJlck9mUGFyYW1ldGVycygpIHsKKwkJcmV0dXJuIHRoaXMucGFyYW1ldGVyVHlwZXMgPT0g
bnVsbCA/IDAgOiB0aGlzLnBhcmFtZXRlclR5cGVzLmxlbmd0aDsKKwl9CisJLyoqCisJICogQHNl
ZSBJTWV0aG9kCisJICovCisJcHVibGljIFN0cmluZ1tdIGdldFBhcmFtZXRlck5hbWVzKCkgdGhy
b3dzIEphdmFNb2RlbEV4Y2VwdGlvbiB7CisJCXJldHVybiBDaGFyT3BlcmF0aW9uLk5PX1NUUklO
R1M7CisJfQorCS8qKgorCSAqIEBzZWUgSU1ldGhvZAorCSAqLworCXB1YmxpYyBTdHJpbmdbXSBn
ZXRQYXJhbWV0ZXJUeXBlcygpIHsKKwkJcmV0dXJuIHRoaXMucGFyYW1ldGVyVHlwZXM7CisJfQor
CisJcHVibGljIElUeXBlUGFyYW1ldGVyIGdldFR5cGVQYXJhbWV0ZXIoU3RyaW5nIHR5cGVQYXJh
bWV0ZXJOYW1lKSB7CisJCXJldHVybiBuZXcgVHlwZVBhcmFtZXRlcih0aGlzLCB0eXBlUGFyYW1l
dGVyTmFtZSk7CisJfQorCXB1YmxpYyBTdHJpbmdbXSBnZXRTdXBlckludGVyZmFjZVR5cGVTaWdu
YXR1cmVzKCkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbiB7CisJCXJldHVybiB0aGlzLnN1cGVy
SW50ZXJmYWNlU2lnbjsKKwl9Cit9CisKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL1NlbGVjdGlvblJlcXVlc3Rvci5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvcmUvU2VsZWN0aW9uUmVxdWVzdG9yLmphdmEKaW5kZXggZjIyNDY2OC4uYmY5ZTMxMiAxMDA2
NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvcmUvU2VsZWN0aW9uUmVxdWVzdG9yLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvU2VsZWN0aW9uUmVxdWVzdG9y
LmphdmEKQEAgLTEsNCArMSw0IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJp
Z2h0IChjKSAyMDAwLCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJp
Z2h0IChjKSAyMDAwLCAyMDE0IElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJp
Z2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFs
cwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQ
dWJsaWMgTGljZW5zZSB2MS4wCkBAIC0yOCw4ICsyOCwxMSBAQAogaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5jb3JlLkphdmFNb2RlbEV4Y2VwdGlvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29y
ZS5TaWduYXR1cmU7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuKjsKK2lt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5DYXRlZ29yaXplZFByb2JsZW07Citp
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuQ2hhck9wZXJhdGlvbjsKIGltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29kZWFzc2lzdC5JU2VsZWN0aW9uUmVxdWVzdG9y
OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb2RlYXNzaXN0LlNlbGVjdGlvbkVu
Z2luZTsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkFic3Ry
YWN0VmFyaWFibGVEZWNsYXJhdGlvbjsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwu
Y29tcGlsZXIuYXN0LkFyZ3VtZW50OworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b21waWxlci5hc3QuTGFtYmRhRXhwcmVzc2lvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50
ZXJuYWwuY29tcGlsZXIuYXN0LkxvY2FsRGVjbGFyYXRpb247CiBpbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvbXBpbGVyLmNsYXNzZm10LkNsYXNzRmlsZUNvbnN0YW50czsKQEAgLTM4
LDQgKzQxLDUgQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9v
a3VwLkxvY2FsVmFyaWFibGVCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5h
bC5jb21waWxlci5sb29rdXAuTWV0aG9kQmluZGluZzsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIubG9va3VwLk1ldGhvZFNjb3BlOwogaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nOwog
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUmVmZXJlbmNl
QmluZGluZzsKQEAgLTQ0OCw0ICs0NTIsMzggQEAKIAlMb2NhbERlY2xhcmF0aW9uIGxvY2FsID0g
YmluZGluZy5kZWNsYXJhdGlvbjsKIAlJSmF2YUVsZW1lbnQgcGFyZW50ID0gZmluZExvY2FsRWxl
bWVudChsb2NhbC5zb3VyY2VTdGFydCk7IC8vIGZpbmRMb2NhbEVsZW1lbnQoKSBjYW5ub3QgZmlu
ZCBsb2NhbCB2YXJpYWJsZQorCWlmKGJpbmRpbmcuZGVjbGFyaW5nU2NvcGUuaXNMYW1iZGFTdWJz
Y29wZSgpKSB7CisJCU1ldGhvZFNjb3BlIHNjb3BlID0gYmluZGluZy5kZWNsYXJpbmdTY29wZS5t
ZXRob2RTY29wZSgpOworCQlMYW1iZGFFeHByZXNzaW9uIGxhbWJkYSA9IChMYW1iZGFFeHByZXNz
aW9uKSBzY29wZS5yZWZlcmVuY2VDb250ZXh0OworCQlTdHJpbmdbXSB0eXBlU2lnbmF0dXJlID0g
bmV3IFN0cmluZ1tde1NpZ25hdHVyZS5jcmVhdGVUeXBlU2lnbmF0dXJlKGxhbWJkYS5yZXNvbHZl
ZFR5cGUucmVhZGFibGVOYW1lKCksIGZhbHNlKX07CisJCUFyZ3VtZW50W10gYXJndW1lbnRzID0g
bGFtYmRhLmFyZ3VtZW50cygpOworCQlpbnQgbGVuZ3RoID0gYXJndW1lbnRzID09IG51bGwgPyAw
IDogYXJndW1lbnRzLmxlbmd0aDsKKwkJU3RyaW5nW10gYXJnTmFtZXMgPSBudWxsOworCQlTdHJp
bmdbXSBhcmdUeXBlcyA9IG51bGw7CisJCVN0cmluZyBtZXRob2ROYW1lID0gbmV3IFN0cmluZyhs
YW1iZGEuZGVzY3JpcHRvci5zZWxlY3Rvcik7CisJCWlmIChsZW5ndGggPiAwKSB7CisJCQlhcmdO
YW1lcyA9IG5ldyBTdHJpbmdbbGVuZ3RoXTsKKwkJCWFyZ1R5cGVzID0gbmV3IFN0cmluZ1tsZW5n
dGhdOworCQkJZm9yKGludCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeworCQkJ
CUFyZ3VtZW50IGFyZ3VtZW50ID0gYXJndW1lbnRzW2ldOworCQkJCWFyZ05hbWVzW2ldID0gbmV3
IFN0cmluZyhhcmd1bWVudC5uYW1lKTsKKwkJCQlpZiAoYXJndW1lbnQudHlwZSAhPSBudWxsKSB7
CisJCQkJCWFyZ1R5cGVzW2ldID0gbmV3IFN0cmluZyhDaGFyT3BlcmF0aW9uLmNvbmNhdFdpdGgo
YXJndW1lbnQudHlwZS5nZXRQYXJhbWV0ZXJpemVkVHlwZU5hbWUoKSwgJy4nKSk7CisJCQkJfQor
CQkJfQorCQl9IGVsc2UgeworCQkJYXJnTmFtZXMgPSBuZXcgU3RyaW5nWzBdOworCQkJYXJnVHlw
ZXMgPSBuZXcgU3RyaW5nWzBdOworCQl9CisJCWlmIChwYXJlbnQgaW5zdGFuY2VvZiBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29yZS5MYW1iZGFFeHByZXNzaW9uKSB7CisJCQlvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29yZS5MYW1iZGFFeHByZXNzaW9uIGxhbWJkYUVsZW1lbnQgPSAob3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvcmUuTGFtYmRhRXhwcmVzc2lvbikgcGFyZW50OworCQkJ
bGFtYmRhRWxlbWVudC5zdXBlckludGVyZmFjZVNpZ24gPSB0eXBlU2lnbmF0dXJlOworCQkJbGFt
YmRhRWxlbWVudC5wYXJhbWV0ZXJUeXBlcyA9IGFyZ1R5cGVzOworCQkJbGFtYmRhRWxlbWVudC5t
ZXRob2RTZWxlY3RvciA9IG1ldGhvZE5hbWU7CisJCX0gZWxzZSB7CisJCQlvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29yZS5MYW1iZGFFeHByZXNzaW9uIGxhbWJkYUVsZW1lbnQgPSAKKwkJCQkJ
bmV3IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLkxhbWJkYUV4cHJlc3Npb24oKEphdmFF
bGVtZW50KXBhcmVudCwgbWV0aG9kTmFtZSwgdHlwZVNpZ25hdHVyZSwgYXJnVHlwZXMsIGxhbWJk
YS5zb3VyY2VTdGFydCwgbGFtYmRhLnNvdXJjZUVuZCk7CisJCQlwYXJlbnQgPSBsYW1iZGFFbGVt
ZW50OworCQl9CisJfQogCUxvY2FsVmFyaWFibGUgbG9jYWxWYXIgPSBudWxsOwogCWlmKHBhcmVu
dCAhPSBudWxsKSB7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9oaWVyYXJjaHkvSGllcmFyY2h5UmVzb2x2ZXIuamF2
YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b3JlL2hpZXJhcmNoeS9IaWVyYXJjaHlSZXNvbHZlci5qYXZhCmluZGV4IGJkODRiNGIuLjZhYTJj
YzkgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb3JlL2hpZXJhcmNoeS9IaWVyYXJjaHlSZXNvbHZlci5qYXZhCisrKyBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL2hp
ZXJhcmNoeS9IaWVyYXJjaHlSZXNvbHZlci5qYXZhCkBAIC0xLDQgKzEsNCBAQAogLyoqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRp
b24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxNCBJQk0gQ29ycG9yYXRp
b24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQg
dGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0
aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMApAQCAtNzM2LDUgKzcz
Niw1IEBACiAJCVR5cGVEZWNsYXJhdGlvbiBmb2N1c0xvY2FsVHlwZSA9IG51bGw7CiAJCWlmIChm
b2N1cyAhPSBudWxsICYmIGZvY3VzQmluYXJ5QmluZGluZyA9PSBudWxsICYmIGZvY3VzVW5pdCAh
PSBudWxsICYmICgoTWVtYmVyKWZvY3VzKS5nZXRPdXRlck1vc3RMb2NhbENvbnRleHQoKSAhPSBu
dWxsKSB7Ci0JCQlmb2N1c0xvY2FsVHlwZSA9IG5ldyBBU1ROb2RlRmluZGVyKGZvY3VzVW5pdCku
ZmluZFR5cGUoZm9jdXMpOworCQkJZm9jdXNMb2NhbFR5cGUgPSBuZXcgQVNUTm9kZUZpbmRlcihm
b2N1c1VuaXQpLmZpbmRUeXBlKGZvY3VzKS50eXBlOwogCQl9CiAKZGlmZiAtLWdpdCBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3V0aWwv
QVNUTm9kZUZpbmRlci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvcmUvdXRpbC9BU1ROb2RlRmluZGVyLmphdmEKaW5kZXggNTkzMDBl
MS4uMGFiOGM5ZCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvcmUvdXRpbC9BU1ROb2RlRmluZGVyLmphdmEKKysrIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvdXRp
bC9BU1ROb2RlRmluZGVyLmphdmEKQEAgLTEsOCArMSwxMiBAQAogLyoqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAwOSBJQk0gQ29ycG9yYXRpb24gYW5kIG90
aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxNCBJQk0gQ29ycG9yYXRpb24gYW5kIG90
aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29t
cGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMg
b2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMg
dGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKICAqIGh0dHA6Ly93d3cuZWNs
aXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCisgKgorICogVGhpcyBpcyBhbiBpbXBsZW1lbnRh
dGlvbiBvZiBhbiBlYXJseS1kcmFmdCBzcGVjaWZpY2F0aW9uIGRldmVsb3BlZCB1bmRlciB0aGUg
SmF2YQorICogQ29tbXVuaXR5IFByb2Nlc3MgKEpDUCkgYW5kIGlzIG1hZGUgYXZhaWxhYmxlIGZv
ciB0ZXN0aW5nIGFuZCBldmFsdWF0aW9uIHB1cnBvc2VzCisgKiBvbmx5LiBUaGUgY29kZSBpcyBu
b3QgY29tcGF0aWJsZSB3aXRoIGFueSBzcGVjaWZpY2F0aW9uIG9mIHRoZSBKQ1AuCiAgKgogICog
Q29udHJpYnV0b3JzOgpAQCAtMTIsMTIgKzE2LDcgQEAKIAogaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5jb3JlLio7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuSUphdmFFbGVtZW50OwotaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLklNZXRob2Q7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmNvcmUuSVR5cGU7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuQ2hhck9w
ZXJhdGlvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuQVNUVmlz
aXRvcjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0Lio7Ci1p
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5Db21waWxhdGlvblVu
aXREZWNsYXJhdGlvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
YXN0LlR5cGVEZWNsYXJhdGlvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29t
cGlsZXIubG9va3VwLkJsb2NrU2NvcGU7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFs
LmNvbXBpbGVyLmxvb2t1cC5DbGFzc1Njb3BlOwpAQCAtNDAsNSArMzksNSBAQAogCSAqLwogCXB1
YmxpYyBGaWVsZERlY2xhcmF0aW9uIGZpbmRGaWVsZChJRmllbGQgZmllbGRIYW5kbGUpIHsKLQkJ
VHlwZURlY2xhcmF0aW9uIHR5cGVEZWNsID0gZmluZFR5cGUoKElUeXBlKWZpZWxkSGFuZGxlLmdl
dFBhcmVudCgpKTsKKwkJVHlwZURlY2xhcmF0aW9uIHR5cGVEZWNsID0gZmluZFR5cGUoKElUeXBl
KWZpZWxkSGFuZGxlLmdldFBhcmVudCgpKS50eXBlOwogCQlpZiAodHlwZURlY2wgPT0gbnVsbCkg
cmV0dXJuIG51bGw7CiAJCUZpZWxkRGVjbGFyYXRpb25bXSBmaWVsZHMgPSB0eXBlRGVjbC5maWVs
ZHM7CkBAIC02MCw1ICs1OSw1IEBACiAJICovCiAJcHVibGljIEluaXRpYWxpemVyIGZpbmRJbml0
aWFsaXplcihJSW5pdGlhbGl6ZXIgaW5pdGlhbGl6ZXJIYW5kbGUpIHsKLQkJVHlwZURlY2xhcmF0
aW9uIHR5cGVEZWNsID0gZmluZFR5cGUoKElUeXBlKWluaXRpYWxpemVySGFuZGxlLmdldFBhcmVu
dCgpKTsKKwkJVHlwZURlY2xhcmF0aW9uIHR5cGVEZWNsID0gZmluZFR5cGUoKElUeXBlKWluaXRp
YWxpemVySGFuZGxlLmdldFBhcmVudCgpKS50eXBlOwogCQlpZiAodHlwZURlY2wgPT0gbnVsbCkg
cmV0dXJuIG51bGw7CiAJCUZpZWxkRGVjbGFyYXRpb25bXSBmaWVsZHMgPSB0eXBlRGVjbC5maWVs
ZHM7CkBAIC04MCw1ICs3OSw1IEBACiAJICovCiAJcHVibGljIEFic3RyYWN0TWV0aG9kRGVjbGFy
YXRpb24gZmluZE1ldGhvZChJTWV0aG9kIG1ldGhvZEhhbmRsZSkgewotCQlUeXBlRGVjbGFyYXRp
b24gdHlwZURlY2wgPSBmaW5kVHlwZSgoSVR5cGUpbWV0aG9kSGFuZGxlLmdldFBhcmVudCgpKTsK
KwkJVHlwZURlY2xhcmF0aW9uIHR5cGVEZWNsID0gZmluZFR5cGUoKElUeXBlKW1ldGhvZEhhbmRs
ZS5nZXRQYXJlbnQoKSkudHlwZTsKIAkJaWYgKHR5cGVEZWNsID09IG51bGwpIHJldHVybiBudWxs
OwogCQlBYnN0cmFjdE1ldGhvZERlY2xhcmF0aW9uW10gbWV0aG9kcyA9IHR5cGVEZWNsLm1ldGhv
ZHM7CkBAIC0xMDcsMTAgKzEwNiwxNyBAQAogCQlyZXR1cm4gbnVsbDsKIAl9Ci0KKwlwdWJsaWMg
Y2xhc3MgQVNUTm9kZVNlYXJjaFJlc3VsdCB7CisJCUFTVE5vZGVTZWFyY2hSZXN1bHQoVHlwZURl
Y2xhcmF0aW9uIHR5cGUsIExhbWJkYUV4cHJlc3Npb24gbGFtYmRhKSB7CisJCQl0aGlzLnR5cGUg
PSB0eXBlOworCQkJdGhpcy5sYW1iZGEgPSBsYW1iZGE7CisJCX0KKwkJcHVibGljIFR5cGVEZWNs
YXJhdGlvbiB0eXBlOworCQlwdWJsaWMgTGFtYmRhRXhwcmVzc2lvbiBsYW1iZGE7CisJfQogCS8q
CiAJICogRmluZHMgdGhlIFR5cGVEZWNsYXJhdGlvbiBpbiB0aGUgZ2l2ZW4gYXN0IGNvcnJlc3Bv
bmRpbmcgdG8gdGhlIGdpdmVuIHR5cGUgaGFuZGxlLgogCSAqIFJldHVybnMgbnVsbCBpZiBub3Qg
Zm91bmQuCiAJICovCi0JcHVibGljIFR5cGVEZWNsYXJhdGlvbiBmaW5kVHlwZShJVHlwZSB0eXBl
SGFuZGxlKSB7CisJcHVibGljIEFTVE5vZGVTZWFyY2hSZXN1bHQgZmluZFR5cGUoSVR5cGUgdHlw
ZUhhbmRsZSkgewogCQlJSmF2YUVsZW1lbnQgcGFyZW50ID0gdHlwZUhhbmRsZS5nZXRQYXJlbnQo
KTsKIAkJZmluYWwgY2hhcltdIHR5cGVOYW1lID0gdHlwZUhhbmRsZS5nZXRFbGVtZW50TmFtZSgp
LnRvQ2hhckFycmF5KCk7CkBAIC0xMTksNCArMTI1LDUgQEAKIAkJY2xhc3MgVmlzaXRvciBleHRl
bmRzIEFTVFZpc2l0b3IgewogCQkJVHlwZURlY2xhcmF0aW9uIHJlc3VsdDsKKwkJCUxhbWJkYUV4
cHJlc3Npb24gbGFtYmRhOwogCQkJaW50IGNvdW50ID0gMDsKIAkJCXB1YmxpYyBib29sZWFuIHZp
c2l0KFR5cGVEZWNsYXJhdGlvbiB0eXBlRGVjbGFyYXRpb24sIEJsb2NrU2NvcGUgc2NvcGUpIHsK
QEAgLTEzMyw0ICsxNDAsMTEgQEAKIAkJCQlyZXR1cm4gZmFsc2U7IC8vIHZpc2l0IG9ubHkgb25l
IGxldmVsCiAJCQl9CisJCQlwdWJsaWMgYm9vbGVhbiB2aXNpdChMYW1iZGFFeHByZXNzaW9uIGV4
cHJlc3Npb24sIEJsb2NrU2NvcGUgc2NvcGUpIHsKKwkJCQlpZiAodGhpcy5yZXN1bHQgIT0gbnVs
bCkgcmV0dXJuIGZhbHNlOworCQkJCWlmIChmaW5kQW5vbnltb3VzICYmICsrdGhpcy5jb3VudCA9
PSBvY2N1cmVuY2VDb3VudCkgeworCQkJCQl0aGlzLmxhbWJkYSA9IGV4cHJlc3Npb247CisJCQkJ
fQorCQkJCXJldHVybiBmYWxzZTsKKwkJCX0KIAkJfQogCQlzd2l0Y2ggKHBhcmVudC5nZXRFbGVt
ZW50VHlwZSgpKSB7CkBAIC0xNDEsNSArMTU1LDUgQEAKIAkJCQkJCVR5cGVEZWNsYXJhdGlvbiB0
eXBlID0gdHlwZXNbaV07CiAJCQkJCQlpZiAoQ2hhck9wZXJhdGlvbi5lcXVhbHModHlwZU5hbWUs
IHR5cGUubmFtZSkpIHsKLQkJCQkJCQlyZXR1cm4gdHlwZTsKKwkJCQkJCQlyZXR1cm4gbmV3IEFT
VE5vZGVTZWFyY2hSZXN1bHQodHlwZSwgbnVsbCk7CiAJCQkJCQl9CiAJCQkJCX0KQEAgLTE0Nyw1
ICsxNjEsNSBAQAogCQkJCWJyZWFrOwogCQkJY2FzZSBJSmF2YUVsZW1lbnQuVFlQRToKLQkJCQlU
eXBlRGVjbGFyYXRpb24gcGFyZW50RGVjbCA9IGZpbmRUeXBlKChJVHlwZSlwYXJlbnQpOworCQkJ
CVR5cGVEZWNsYXJhdGlvbiBwYXJlbnREZWNsID0gZmluZFR5cGUoKElUeXBlKXBhcmVudCkudHlw
ZTsKIAkJCQlpZiAocGFyZW50RGVjbCA9PSBudWxsKSByZXR1cm4gbnVsbDsKIAkJCQl0eXBlcyA9
IHBhcmVudERlY2wubWVtYmVyVHlwZXM7CkBAIC0xNTQsNSArMTY4LDUgQEAKIAkJCQkJCVR5cGVE
ZWNsYXJhdGlvbiB0eXBlID0gdHlwZXNbaV07CiAJCQkJCQlpZiAoQ2hhck9wZXJhdGlvbi5lcXVh
bHModHlwZU5hbWUsIHR5cGUubmFtZSkpIHsKLQkJCQkJCQlyZXR1cm4gdHlwZTsKKwkJCQkJCQly
ZXR1cm4gbmV3IEFTVE5vZGVTZWFyY2hSZXN1bHQodHlwZSwgbnVsbCk7CiAJCQkJCQl9CiAJCQkJ
CX0KQEAgLTE2NCw1ICsxNzgsNSBAQAogCQkJCVZpc2l0b3IgdmlzaXRvciA9IG5ldyBWaXNpdG9y
KCk7CiAJCQkJZmllbGREZWNsLnRyYXZlcnNlKHZpc2l0b3IsIG51bGwpOwotCQkJCXJldHVybiB2
aXNpdG9yLnJlc3VsdDsKKwkJCQlyZXR1cm4gbmV3IEFTVE5vZGVTZWFyY2hSZXN1bHQodmlzaXRv
ci5yZXN1bHQsIHZpc2l0b3IubGFtYmRhKTsKIAkJCWNhc2UgSUphdmFFbGVtZW50LklOSVRJQUxJ
WkVSOgogCQkJCUluaXRpYWxpemVyIGluaXRpYWxpemVyID0gZmluZEluaXRpYWxpemVyKChJSW5p
dGlhbGl6ZXIpcGFyZW50KTsKQEAgLTE3MCw1ICsxODQsNSBAQAogCQkJCXZpc2l0b3IgPSBuZXcg
VmlzaXRvcigpOwogCQkJCWluaXRpYWxpemVyLnRyYXZlcnNlKHZpc2l0b3IsIG51bGwpOwotCQkJ
CXJldHVybiB2aXNpdG9yLnJlc3VsdDsKKwkJCQlyZXR1cm4gbmV3IEFTVE5vZGVTZWFyY2hSZXN1
bHQodmlzaXRvci5yZXN1bHQsIHZpc2l0b3IubGFtYmRhKTsKIAkJCWNhc2UgSUphdmFFbGVtZW50
Lk1FVEhPRDoKIAkJCQlBYnN0cmFjdE1ldGhvZERlY2xhcmF0aW9uIG1ldGhvZERlY2wgPSBmaW5k
TWV0aG9kKChJTWV0aG9kKXBhcmVudCk7CkBAIC0xNzYsNSArMTkwLDUgQEAKIAkJCQl2aXNpdG9y
ID0gbmV3IFZpc2l0b3IoKTsKIAkJCQltZXRob2REZWNsLnRyYXZlcnNlKHZpc2l0b3IsIChDbGFz
c1Njb3BlKW51bGwpOwotCQkJCXJldHVybiB2aXNpdG9yLnJlc3VsdDsKKwkJCQlyZXR1cm4gbmV3
IEFTVE5vZGVTZWFyY2hSZXN1bHQodmlzaXRvci5yZXN1bHQsIHZpc2l0b3IubGFtYmRhKTsKIAkJ
fQogCQlyZXR1cm4gbnVsbDsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJj
aC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gvbWF0Y2hpbmcvU3VwZXJUeXBl
TmFtZXNDb2xsZWN0b3IuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gvbWF0Y2hpbmcvU3VwZXJUeXBlTmFtZXNDb2xs
ZWN0b3IuamF2YQppbmRleCAzYjQ1MDk5Li5lOWQ2NmNlIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNoL21h
dGNoaW5nL1N1cGVyVHlwZU5hbWVzQ29sbGVjdG9yLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9tYXRjaGlu
Zy9TdXBlclR5cGVOYW1lc0NvbGxlY3Rvci5qYXZhCkBAIC0xLDggKzEsMTIgQEAKIC8qKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTIgSUJNIENvcnBvcmF0
aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTQgSUJNIENvcnBvcmF0
aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5k
IHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIg
dGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFj
Y29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CiAgKiBodHRw
Oi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbAorICoKKyAqIFRoaXMgaXMgYW4g
aW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQgc3BlY2lmaWNhdGlvbiBkZXZlbG9wZWQg
dW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0eSBQcm9jZXNzIChKQ1ApIGFuZCBpcyBtYWRlIGF2
YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiBwdXJwb3NlcworICogb25seS4gVGhl
IGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkgc3BlY2lmaWNhdGlvbiBvZiB0aGUgSkNQ
LgogICoKICAqIENvbnRyaWJ1dG9yczoKQEAgLTE2Nyw1ICsxNzEsNSBAQAogCQkJCUNvbXBpbGF0
aW9uVW5pdERlY2xhcmF0aW9uIHBhcnNlZFVuaXQgPSBidWlsZEJpbmRpbmdzKHVuaXQsIGlzVG9w
TGV2ZWxPck1lbWJlcik7CiAJCQkJaWYgKHBhcnNlZFVuaXQgIT0gbnVsbCkgewotCQkJCQlUeXBl
RGVjbGFyYXRpb24gdHlwZURlY2wgPSBuZXcgQVNUTm9kZUZpbmRlcihwYXJzZWRVbml0KS5maW5k
VHlwZSh0aGlzLnR5cGUpOworCQkJCQlUeXBlRGVjbGFyYXRpb24gdHlwZURlY2wgPSBuZXcgQVNU
Tm9kZUZpbmRlcihwYXJzZWRVbml0KS5maW5kVHlwZSh0aGlzLnR5cGUpLnR5cGU7CiAJCQkJCWlm
ICh0eXBlRGVjbCAhPSBudWxsICYmIHR5cGVEZWNsLmJpbmRpbmcgIT0gbnVsbCkKIAkJCQkJCWNv
bGxlY3RTdXBlclR5cGVOYW1lcyh0eXBlRGVjbC5iaW5kaW5nLCBudWxsKTs=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>240362</attachid>
            <date>2014-02-27 06:40:00 -0500</date>
            <delta_ts>2014-02-27 06:40:17 -0500</delta_ts>
            <desc>Updated patch</desc>
            <filename>Bug-425134--18model-Implement-IJavaElements-for-lamb.patch</filename>
            <type>text/plain</type>
            <size>28675</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9tb2RlbC9SZXNvbHZlVGVzdHMxOC5qYXZhIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21v
ZGVsL1Jlc29sdmVUZXN0czE4LmphdmEKaW5kZXggYTc3Y2QzMi4uMTI2NzM2NiAxMDA2NDQKLS0t
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9j
b3JlL3Rlc3RzL21vZGVsL1Jlc29sdmVUZXN0czE4LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21vZGVsL1Jl
c29sdmVUZXN0czE4LmphdmEKQEAgLTI5LDUgKzI5LDUgQEAKIAogc3RhdGljIHsKLQkvLyBURVNU
U19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7ICJ0ZXN0MDAyMyIgfTsKKy8vCSBURVNUU19OQU1FUyA9
IG5ldyBTdHJpbmdbXSB7ICJ0ZXN0NDIyNDY4YiIgfTsKIAkvLyBURVNUU19OVU1CRVJTID0gbmV3
IGludFtdIHsgMTI0IH07CiAJLy8gVEVTVFNfUkFOR0UgPSBuZXcgaW50W10geyAxNiwgLTEgfTsK
QEAgLTcxOSw1ICs3MTksNSBAQAogCWFzc2VydEVsZW1lbnRzRXF1YWwoCiAJCSJVbmV4cGVjdGVk
IGVsZW1lbnRzIiwKLQkJInh5eiBbaW4gZm9vKCkgW2luIFggW2luIFtXb3JraW5nIGNvcHldIFgu
amF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV0iLAorCQkieHl6IFtp
biA8YW5vbnltb3VzICMxPiBbaW4gZm9vKCkgW2luIFggW2luIFtXb3JraW5nIGNvcHldIFguamF2
YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV1dIiwKIAkJZWxlbWVudHMK
IAkpOwpAQCAtNzQ0LDUgKzc0NCw1IEBACiAJYXNzZXJ0RWxlbWVudHNFcXVhbCgKIAkJIlVuZXhw
ZWN0ZWQgZWxlbWVudHMiLAotCQkiYWJjIFtpbiBmb28oKSBbaW4gWCBbaW4gW1dvcmtpbmcgY29w
eV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXSIsCisJCSJh
YmMgW2luIDxhbm9ueW1vdXMgIzE+IFtpbiBmb28oKSBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0g
WC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXV0iLAogCQllbGVt
ZW50cwogCSk7CkBAIC03NjcsNSArNzY3LDUgQEAKIAlhc3NlcnRFbGVtZW50c0VxdWFsKAogCQki
VW5leHBlY3RlZCBlbGVtZW50cyIsCi0JCSJhYmMgW2luIGkgW2luIFggW2luIFtXb3JraW5nIGNv
cHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV0iLAorCQki
YWJjIFtpbiA8YW5vbnltb3VzICMxPiBbaW4gaSBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0gWC5q
YXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXV0iLAogCQllbGVtZW50
cwogCSk7CkBAIC03OTUsNSArNzk1LDUgQEAKIAlhc3NlcnRFbGVtZW50c0VxdWFsKAogCQkiVW5l
eHBlY3RlZCBlbGVtZW50cyIsCi0JCSJhYmMgW2luIG1haW4oU3RyaW5nW10pIFtpbiBYIFtpbiBb
V29ya2luZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1d
XV1dIiwKKwkJImFiYyBbaW4gPGFub255bW91cyAjMz4gW2luIG1haW4oU3RyaW5nW10pIFtpbiBY
IFtpbiBbV29ya2luZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNv
bHZlXV1dXV1dXSIsCiAJCWVsZW1lbnRzCiAJKTsKQEAgLTgyMyw1ICs4MjMsNSBAQAogCWFzc2Vy
dEVsZW1lbnRzRXF1YWwoCiAJCSJVbmV4cGVjdGVkIGVsZW1lbnRzIiwKLQkJInh5eiBbaW4gbWFp
bihTdHJpbmdbXSkgW2luIFggW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1bHQ+
IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV0iLAorCQkieHl6IFtpbiA8YW5vbnltb3VzICMyPiBb
aW4gbWFpbihTdHJpbmdbXSkgW2luIFggW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRl
ZmF1bHQ+IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV1dIiwKIAkJZWxlbWVudHMKIAkpOwpAQCAt
ODg5LDUgKzg4OSw1IEBACiAJYXNzZXJ0RWxlbWVudHNFcXVhbCgKIAkJIlVuZXhwZWN0ZWQgZWxl
bWVudHMiLAotCQkienl4IFtpbiBmeCBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0gWC5qYXZhIFtp
biA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXSIsCisJCSJ6eXggW2luIDxhbm9u
eW1vdXMgIzI+IFtpbiBmeCBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0gWC5qYXZhIFtpbiA8ZGVm
YXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXV0iLAogCQllbGVtZW50cwogCSk7CkBAIC05
MjIsNSArOTIyLDUgQEAKIAlhc3NlcnRFbGVtZW50c0VxdWFsKAogCQkiVW5leHBlY3RlZCBlbGVt
ZW50cyIsCi0JCSJ4eXogW2luIG1haW4oU3RyaW5nW10pIFtpbiBYIFtpbiBbV29ya2luZyBjb3B5
XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1dXV1dIiwKKwkJInh5
eiBbaW4gPGFub255bW91cyAjMj4gW2luIG1haW4oU3RyaW5nW10pIFtpbiBYIFtpbiBbV29ya2lu
ZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1dXV1dXSIs
CiAJCWVsZW1lbnRzCiAJKTsKQEAgLTk1Nyw1ICs5NTcsNSBAQAogCWFzc2VydEVsZW1lbnRzRXF1
YWwoCiAJCSJVbmV4cGVjdGVkIGVsZW1lbnRzIiwKLQkJImhpaiBbaW4gbWFpbihTdHJpbmdbXSkg
W2luIFggW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2lu
IFJlc29sdmVdXV1dXV0iLAorCQkiaGlqIFtpbiA8YW5vbnltb3VzICMzPiBbaW4gbWFpbihTdHJp
bmdbXSkgW2luIFggW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBz
cmMgW2luIFJlc29sdmVdXV1dXV1dIiwKIAkJZWxlbWVudHMKIAkpOwpAQCAtOTkzLDUgKzk5Myw1
IEBACiAJYXNzZXJ0RWxlbWVudHNFcXVhbCgKIAkJIlVuZXhwZWN0ZWQgZWxlbWVudHMiLAotCQki
aGlqIFtpbiBtYWluKFN0cmluZ1tdKSBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0gWC5qYXZhIFtp
biA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXSIsCisJCSJoaWogW2luIDxhbm9u
eW1vdXMgIzM+IFtpbiBtYWluKFN0cmluZ1tdKSBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0gWC5q
YXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXV0iLAogCQllbGVtZW50
cwogCSk7CkBAIC0xNDMyLDUgKzE0MzIsNSBAQAogCWFzc2VydEVsZW1lbnRzRXF1YWwoCiAJCSJV
bmV4cGVjdGVkIGVsZW1lbnRzIiwKLQkJImZpcnN0IFtpbiBpIFtpbiBYIFtpbiBbV29ya2luZyBj
b3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1dXV1dIiwKKwkJ
ImZpcnN0IFtpbiA8YW5vbnltb3VzICMxPiBbaW4gaSBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0g
WC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXV0iLAogCQllbGVt
ZW50cwogCSk7CkBAIC0xNDU1LDUgKzE0NTUsNSBAQAogCWFzc2VydEVsZW1lbnRzRXF1YWwoCiAJ
CSJVbmV4cGVjdGVkIGVsZW1lbnRzIiwKLQkJImZpcnN0IFtpbiBpIFtpbiBYIFtpbiBbV29ya2lu
ZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1dXV1dIiwK
KwkJImZpcnN0IFtpbiA8YW5vbnltb3VzICMxPiBbaW4gaSBbaW4gWCBbaW4gW1dvcmtpbmcgY29w
eV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXV0iLAogCQll
bGVtZW50cwogCSk7CkBAIC0xNDc4LDUgKzE0NzgsNSBAQAogCWFzc2VydEVsZW1lbnRzRXF1YWwo
CiAJCSJVbmV4cGVjdGVkIGVsZW1lbnRzIiwKLQkJInNlY29uZCBbaW4gaSBbaW4gWCBbaW4gW1dv
cmtpbmcgY29weV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1d
XSIsCisJCSJzZWNvbmQgW2luIDxhbm9ueW1vdXMgIzE+IFtpbiBpIFtpbiBYIFtpbiBbV29ya2lu
ZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1dXV1dXSIs
CiAJCWVsZW1lbnRzCiAJKTsKQEAgLTE0OTMsNCArMTQ5Myw1IEBACiAJCQkiCXB1YmxpYyBzdGF0
aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKwogCQkJIgkJZ29vKCh4KSAtPiAoeSkg
LT4gKHopIC0+IHouZm9vKChwKSAtPiBwKSk7XG4iICsKKwkJCSIJCUkgaSA9IG5ldyBJKCl7IHB1
YmxpYyBJIGZvbyhJIHgpIHtyZXR1cm4gbnVsbDt9IH07XG4iICsKIAkJCSIJfVxuIiArCiAJCQki
fSBcbiIpOwpAQCAtMTUwNCw1ICsxNTA1LDUgQEAKIAlhc3NlcnRFbGVtZW50c0VxdWFsKAogCQki
VW5leHBlY3RlZCBlbGVtZW50cyIsCi0JCSJ5IFtpbiBtYWluKFN0cmluZ1tdKSBbaW4gWCBbaW4g
W1dvcmtpbmcgY29weV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1d
XV1dXSIsCisJCSJ5IFtpbiA8YW5vbnltb3VzICMyPiBbaW4gbWFpbihTdHJpbmdbXSkgW2luIFgg
W2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2luIFJlc29s
dmVdXV1dXV1dIiwKIAkJZWxlbWVudHMKIAkpOwpAQCAtMTUzMCw1ICsxNTMxLDUgQEAKIAlhc3Nl
cnRFbGVtZW50c0VxdWFsKAogCQkiVW5leHBlY3RlZCBlbGVtZW50cyIsCi0JCSJ5IFtpbiBtYWlu
KFN0cmluZ1tdKSBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4g
W2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXSIsCisJCSJ5IFtpbiA8YW5vbnltb3VzICMyPiBbaW4g
bWFpbihTdHJpbmdbXSkgW2luIFggW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1
bHQ+IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV1dIiwKIAkJZWxlbWVudHMKIAkpOwpAQCAtMTU5
NCw1ICsxNTk1LDUgQEAKIAlhc3NlcnRFbGVtZW50c0VxdWFsKAogCQkiVW5leHBlY3RlZCBlbGVt
ZW50cyIsCi0JCSJxIFtpbiBtYWluKFN0cmluZ1tdKSBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0g
WC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXSIsCisJCSJxIFtp
biA8YW5vbnltb3VzICMzPiBbaW4gbWFpbihTdHJpbmdbXSkgW2luIFggW2luIFtXb3JraW5nIGNv
cHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV1dIiwKIAkJ
ZWxlbWVudHMKIAkpOwpAQCAtMTYyOSw1ICsxNjMwLDUgQEAKIAlhc3NlcnRFbGVtZW50c0VxdWFs
KAogCQkiVW5leHBlY3RlZCBlbGVtZW50cyIsCi0JCSJ4IFtpbiBtYWluKFN0cmluZ1tdKSBbaW4g
WCBbaW4gW1dvcmtpbmcgY29weV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVz
b2x2ZV1dXV1dXSIsCisJCSJ4IFtpbiA8YW5vbnltb3VzICMxPiBbaW4gbWFpbihTdHJpbmdbXSkg
W2luIFggW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2lu
IFJlc29sdmVdXV1dXV1dIiwKIAkJZWxlbWVudHMKIAkpOwpAQCAtMTc4OCw1ICsxNzg5LDUgQEAK
IAlhc3NlcnRFbGVtZW50c0VxdWFsKAogCQkiVW5leHBlY3RlZCBlbGVtZW50cyIsCi0JCSJ2MSBb
aW4gcHJvY2Vzc0phcihQYXRoKSBbaW4gSW5zaXN0ZW50Q2FwdHVyZSBbaW4gW1dvcmtpbmcgY29w
eV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXSIsCisJCSJ2
MSBbaW4gPGFub255bW91cyAjMj4gW2luIHByb2Nlc3NKYXIoUGF0aCkgW2luIEluc2lzdGVudENh
cHR1cmUgW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2lu
IFJlc29sdmVdXV1dXV1dIiwKIAkJZWxlbWVudHMsCiAJCXRydWUKQEAgLTE4NTMsNSArMTg1NCw1
IEBACiAJYXNzZXJ0RWxlbWVudHNFcXVhbCgKIAkJIlVuZXhwZWN0ZWQgZWxlbWVudHMiLAotCQki
djIgW2luIHByb2Nlc3NKYXIoUGF0aCkgW2luIEluc2lzdGVudENhcHR1cmUgW2luIFtXb3JraW5n
IGNvcHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV0iLAor
CQkidjIgW2luIDxhbm9ueW1vdXMgIzM+IFtpbiBwcm9jZXNzSmFyKFBhdGgpIFtpbiBJbnNpc3Rl
bnRDYXB0dXJlIFtpbiBbV29ya2luZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3Jj
IFtpbiBSZXNvbHZlXV1dXV1dXSIsCiAJCWVsZW1lbnRzLAogCQl0cnVlCkBAIC0xOTE4LDUgKzE5
MTksNSBAQAogCWFzc2VydEVsZW1lbnRzRXF1YWwoCiAJCSJVbmV4cGVjdGVkIGVsZW1lbnRzIiwK
LQkJInMxIFtpbiB3aXRoV2lsZGNhcmQoU3RyZWFtPD8gZXh0ZW5kcyBTdHJpbmc+KSBbaW4gSW5z
aXN0ZW50Q2FwdHVyZSBbaW4gW1dvcmtpbmcgY29weV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2lu
IHNyYyBbaW4gUmVzb2x2ZV1dXV1dXSIsCisJCSJzMSBbaW4gPGFub255bW91cyAjMT4gW2luIHdp
dGhXaWxkY2FyZChTdHJlYW08PyBleHRlbmRzIFN0cmluZz4pIFtpbiBJbnNpc3RlbnRDYXB0dXJl
IFtpbiBbV29ya2luZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNv
bHZlXV1dXV1dXSIsCiAJCWVsZW1lbnRzLAogCQl0cnVlCkBAIC0xOTgzLDUgKzE5ODQsNSBAQAog
CWFzc2VydEVsZW1lbnRzRXF1YWwoCiAJCSJVbmV4cGVjdGVkIGVsZW1lbnRzIiwKLQkJInMyIFtp
biB3aXRob3V0V2lsZGNhcmQoU3RyZWFtPFN0cmluZz4pIFtpbiBJbnNpc3RlbnRDYXB0dXJlIFtp
biBbV29ya2luZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZl
XV1dXV1dIiwKKwkJInMyIFtpbiA8YW5vbnltb3VzICMxPiBbaW4gd2l0aG91dFdpbGRjYXJkKFN0
cmVhbTxTdHJpbmc+KSBbaW4gSW5zaXN0ZW50Q2FwdHVyZSBbaW4gW1dvcmtpbmcgY29weV0gWC5q
YXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXV0iLAogCQllbGVtZW50
cywKIAkJdHJ1ZQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29kZWFzc2lzdC9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29kZWFzc2lzdC9TZWxlY3Rpb25FbmdpbmUuamF2YSBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvZGVhc3Npc3Qvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvZGVhc3Npc3QvU2VsZWN0aW9uRW5naW5lLmphdmEKaW5kZXggYTRhZGQ4OC4uN2Y5ODZkOCAx
MDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29kZWFzc2lzdC9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29kZWFzc2lzdC9TZWxlY3Rpb25FbmdpbmUuamF2YQorKysgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb2RlYXNzaXN0L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb2RlYXNz
aXN0L1NlbGVjdGlvbkVuZ2luZS5qYXZhCkBAIC0xLDQgKzEsNCBAQAogLyoqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5k
IG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxNCBJQk0gQ29ycG9yYXRpb24gYW5k
IG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFj
Y29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVy
bXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMApAQCAtNTksNCArNTksNSBAQAog
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLnNlYXJjaC5UeXBlTmFtZU1hdGNo
UmVxdWVzdG9yV3JhcHBlcjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS51
dGlsLkFTVE5vZGVGaW5kZXI7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvcmUu
dXRpbC5BU1ROb2RlRmluZGVyLkFTVE5vZGVTZWFyY2hSZXN1bHQ7CiBpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvcmUudXRpbC5IYXNoU2V0T2ZDaGFyQXJyYXlBcnJheTsKIApAQCAt
MTM4OSw2ICsxMzkwLDE5IEBACiAJCQkJCQlTeXN0ZW0ub3V0LnByaW50bG4ocGFyc2VkVW5pdC50
b1N0cmluZygpKTsKIAkJCQkJfQotCQkJCQkvLyBmaW5kIHRoZSB0eXBlIGRlY2xhcmF0aW9uIHRo
YXQgY29ycmVzcG9uZHMgdG8gdGhlIG9yaWdpbmFsIHNvdXJjZSB0eXBlCi0JCQkJCXR5cGVEZWNs
YXJhdGlvbiA9IG5ldyBBU1ROb2RlRmluZGVyKHBhcnNlZFVuaXQpLmZpbmRUeXBlKGNvbnRleHQp
OworCisJCQkJCUFTVE5vZGVTZWFyY2hSZXN1bHQgc2VhcmNoUmVzdWx0ID0gbmV3IEFTVE5vZGVG
aW5kZXIocGFyc2VkVW5pdCkuZmluZFR5cGUoY29udGV4dCk7CisJCQkJCWlmIChzZWFyY2hSZXN1
bHQudHlwZSAhPSBudWxsKSB7CisJCQkJCQl0eXBlRGVjbGFyYXRpb24gPSBzZWFyY2hSZXN1bHQu
dHlwZTsKKwkJCQkJfSBlbHNlIGlmIChzZWFyY2hSZXN1bHQubGFtYmRhICE9IG51bGwpIHsKKwkJ
CQkJCXJlc3VsdC5jb21waWxhdGlvblVuaXQgPSAoSUNvbXBpbGF0aW9uVW5pdCkgY3U7CisJCQkJ
CQl0aGlzLmxvb2t1cEVudmlyb25tZW50LmJ1aWxkVHlwZUJpbmRpbmdzKHBhcnNlZFVuaXQsIG51
bGwgLypubyBhY2Nlc3MgcmVzdHJpY3Rpb24qLyk7CisJCQkJCQlpZiAoKHRoaXMudW5pdFNjb3Bl
ID0gcGFyc2VkVW5pdC5zY29wZSkgIT0gbnVsbCkgeworCQkJCQkJCXRoaXMubG9va3VwRW52aXJv
bm1lbnQuY29tcGxldGVUeXBlQmluZGluZ3MocGFyc2VkVW5pdCwgdHJ1ZSk7CisJCQkJCQkJLy8g
cmVzb2x2ZQorCQkJCQkJCXBhcnNlZFVuaXQuc2NvcGUuZmF1bHRJblR5cGVzKCk7CisJCQkJCQkJ
cGFyc2VkVW5pdC5yZXNvbHZlKCk7CisJCQkJCQl9CisJCQkJCQlzZWxlY3RGcm9tKHNlYXJjaFJl
c3VsdC5sYW1iZGEuZXhwZWN0ZWRUeXBlKCksIHBhcnNlZFVuaXQsIGZhbHNlKTsKKwkJCQkJfQog
CQkJCX0KIAkJCX0gZWxzZSB7IC8vIGJpbmFyeSB0eXBlCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcGFy
c2VyL1BhcnNlci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3BhcnNlci9QYXJzZXIuamF2YQppbmRleCA0OTFjYWVk
Li5lZTljOGFiIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcGFyc2VyL1BhcnNlci5qYXZhCisrKyBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9wYXJzZXIvUGFyc2VyLmphdmEKQEAgLTc5NzMsNCArNzk3Myw1IEBACiAJCXByb2JsZW1S
ZXBvcnRlcigpLmxhbWJkYUV4cHJlc3Npb25zTm90QmVsb3cxOChsZXhwKTsKIAl9CisJbWFya0Vu
Y2xvc2luZ01lbWJlcldpdGhMb2NhbFR5cGUoKTsKIAlwdXNoT25FeHByZXNzaW9uU3RhY2sobGV4
cCk7CiAJaWYgKHRoaXMuY3VycmVudEVsZW1lbnQgIT0gbnVsbCkgewpkaWZmIC0tZ2l0IGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L0lTb3VyY2VFbGVtZW50UmVxdWVzdG9yLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2Rl
bC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvSVNvdXJjZUVsZW1lbnRSZXF1ZXN0
b3IuamF2YQppbmRleCA2OWYzMTNhLi42YzFmMjVkIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvSVNvdXJjZUVs
ZW1lbnRSZXF1ZXN0b3IuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvSVNvdXJjZUVsZW1lbnRSZXF1ZXN0b3IuamF2
YQpAQCAtMSw0ICsxLDQgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQg
KGMpIDIwMDAsIDIwMTMgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQg
KGMpIDIwMDAsIDIwMTQgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRz
IHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAg
KiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1Ymxp
YyBMaWNlbnNlIHYxLjAKQEAgLTIzLDQgKzIzLDUgQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIuYXN0LkZpZWxkRGVjbGFyYXRpb247CiBpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5JbXBvcnRSZWZlcmVuY2U7CitpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5MYW1iZGFFeHByZXNzaW9uOwogaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuVHlwZURlY2xhcmF0aW9u
OwogCkBAIC01Miw0ICs1Myw1IEBACiAKIAlwdWJsaWMgc3RhdGljIGNsYXNzIFR5cGVJbmZvIHsK
KwkJcHVibGljIExhbWJkYUV4cHJlc3Npb24gbGFtYmRhOwogCQlwdWJsaWMgYm9vbGVhbiB0eXBl
QW5ub3RhdGVkOwogCQlwdWJsaWMgaW50IGRlY2xhcmF0aW9uU3RhcnQ7CkBAIC0xMDEsNSArMTAz
LDQgQEAKIAkJcHVibGljIFBhcmFtZXRlckluZm9bXSBwYXJhbWV0ZXJJbmZvczsKIAl9Ci0KIAlw
dWJsaWMgc3RhdGljIGNsYXNzIFBhcmFtZXRlckluZm8gewogCQlwdWJsaWMgaW50IG1vZGlmaWVy
czsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9Tb3VyY2VFbGVtZW50Tm90aWZpZXIuamF2YSBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9Tb3Vy
Y2VFbGVtZW50Tm90aWZpZXIuamF2YQppbmRleCAyMjA4MzY1Li42MGY0NWQ3IDEwMDY0NAotLS0g
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvU291cmNlRWxlbWVudE5vdGlmaWVyLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL1NvdXJjZUVsZW1lbnRO
b3RpZmllci5qYXZhCkBAIC0xLDQgKzEsNCBAQAogLyoqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAq
IENvcHlyaWdodCAoYykgMjAwOCwgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAq
IENvcHlyaWdodCAoYykgMjAwOCwgMjAxNCBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAq
IEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBt
YXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVj
bGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMApAQCAtMjAsNCArMjAsNSBAQAogaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLkNoYXJPcGVyYXRpb247CiBpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvbXBpbGVyLklTb3VyY2VFbGVtZW50UmVxdWVzdG9yLlBhcmFtZXRl
ckluZm87CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLklTb3VyY2VF
bGVtZW50UmVxdWVzdG9yLlR5cGVJbmZvOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5h
bC5jb21waWxlci5JU291cmNlRWxlbWVudFJlcXVlc3Rvci5UeXBlUGFyYW1ldGVySW5mbzsKIGlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkFTVE5vZGU7CkBAIC00
MCw0ICs0MSw1IEBACiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFz
dC5JbXBvcnRSZWZlcmVuY2U7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBp
bGVyLmFzdC5Jbml0aWFsaXplcjsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29t
cGlsZXIuYXN0LkxhbWJkYUV4cHJlc3Npb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVy
bmFsLmNvbXBpbGVyLmFzdC5NZXNzYWdlU2VuZDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50
ZXJuYWwuY29tcGlsZXIuYXN0Lk1ldGhvZERlY2xhcmF0aW9uOwpAQCAtNTIsNCArNTQsNSBAQAog
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuRXh0cmFDb21w
aWxlck1vZGlmaWVyczsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
bG9va3VwLk1ldGhvZFNjb3BlOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21w
aWxlci5sb29rdXAuVHlwZUJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFs
LmNvbXBpbGVyLmxvb2t1cC5UeXBlQ29uc3RhbnRzOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5p
bnRlcm5hbC5jb21waWxlci51dGlsLkhhc2h0YWJsZU9mT2JqZWN0VG9JbnQ7CkBAIC04Niw0ICs4
OSw4IEBACiAJCQlyZXR1cm4gZmFsc2U7IC8vIGRvbid0IHZpc2l0IG1lbWJlcnMgYXMgdGhpcyB3
YXMgZG9uZSBkdXJpbmcgbm90aWZ5U291cmNlRWxlbWVudFJlcXVlc3RvciguLi4pCiAJCX0KKwkJ
cHVibGljIGJvb2xlYW4gdmlzaXQoTGFtYmRhRXhwcmVzc2lvbiBleHByZXNzaW9uLCBCbG9ja1Nj
b3BlIHNjb3BlKSB7CisJCQlwcm9jZXNzTGFtYmRhKGV4cHJlc3Npb24sIGV4cHJlc3Npb24uZXhw
ZWN0ZWRUeXBlKCkpOworCQkJcmV0dXJuIHRydWU7CisJCX0KIAl9CiAKQEAgLTExMCw0ICsxMTcs
MTIgQEAKIAl0aGlzLm5lc3RlZFR5cGVJbmRleCA9IDA7CiB9Citwcm90ZWN0ZWQgdm9pZCBwcm9j
ZXNzTGFtYmRhKExhbWJkYUV4cHJlc3Npb24gbGFtYmRhRXhwcmVzc2lvbiwgVHlwZUJpbmRpbmcg
dHlwZSkgeworCVR5cGVJbmZvIGN1cnJlbnQgPSBuZXcgVHlwZUluZm8oKTsKKwljdXJyZW50Lm5h
bWUgPSBDaGFyT3BlcmF0aW9uLk5PX0NIQVI7CisJY3VycmVudC5sYW1iZGEgPSBsYW1iZGFFeHBy
ZXNzaW9uOworCWN1cnJlbnQuYW5vbnltb3VzTWVtYmVyID0gdHJ1ZTsKKwl0aGlzLnJlcXVlc3Rv
ci5lbnRlclR5cGUoY3VycmVudCk7CisJdGhpcy5yZXF1ZXN0b3IuZXhpdFR5cGUobGFtYmRhRXhw
cmVzc2lvbi5zb3VyY2VFbmQpOworfQogcHJvdGVjdGVkIE9iamVjdFtdW10gZ2V0QXJndW1lbnRJ
bmZvcyhBcmd1bWVudFtdIGFyZ3VtZW50cykgewogCWludCBhcmd1bWVudExlbmd0aCA9IGFyZ3Vt
ZW50cy5sZW5ndGg7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9Db21waWxhdGlvblVuaXRTdHJ1Y3R1cmVSZXF1ZXN0
b3IuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb3JlL0NvbXBpbGF0aW9uVW5pdFN0cnVjdHVyZVJlcXVlc3Rvci5qYXZhCmluZGV4IGQw
ZjhiYzQuLjM4MTQyYzYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0NvbXBpbGF0aW9uVW5pdFN0cnVjdHVyZVJlcXVl
c3Rvci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb3JlL0NvbXBpbGF0aW9uVW5pdFN0cnVjdHVyZVJlcXVlc3Rvci5qYXZhCkBA
IC0xLDQgKzEsNCBAQAogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykg
MjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykg
MjAwMCwgMjAxNCBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVz
ZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFy
ZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExp
Y2Vuc2UgdjEuMApAQCAtMjU2LDQgKzI1Niw4IEBACiBwcm90ZWN0ZWQgU291cmNlVHlwZSBjcmVh
dGVUeXBlSGFuZGxlKEphdmFFbGVtZW50IHBhcmVudCwgVHlwZUluZm8gdHlwZUluZm8pIHsKIAlT
dHJpbmcgbmFtZVN0cmluZz0gbmV3IFN0cmluZyh0eXBlSW5mby5uYW1lKTsKKwlpZiAodHlwZUlu
Zm8ubGFtYmRhICE9IG51bGwpIHsKKwkJTGFtYmRhRXhwcmVzc2lvbiB0eXBlID0gbmV3IExhbWJk
YUV4cHJlc3Npb24ocGFyZW50LCB0eXBlSW5mby5sYW1iZGEpOworCQlyZXR1cm4gdHlwZTsKKwl9
CiAJcmV0dXJuIG5ldyBTb3VyY2VUeXBlKHBhcmVudCwgbmFtZVN0cmluZyk7CiB9CmRpZmYgLS1n
aXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29yZS9KYXZhRWxlbWVudC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvcmUvSmF2YUVsZW1lbnQuamF2YQppbmRleCA5ZmQyZDQ3Li5i
MTg1MWQxIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29yZS9KYXZhRWxlbWVudC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0phdmFFbGVtZW50Lmph
dmEKQEAgLTEsOCArMSwxMiBAQAogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdo
dCAoYykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdo
dCAoYykgMjAwMCwgMjAxNCBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAqIEFsbCByaWdo
dHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMK
ICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVi
bGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24s
IGFuZCBpcyBhdmFpbGFibGUgYXQKICAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBs
LXYxMC5odG1sCisgKgorICogVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBhbiBlYXJseS1k
cmFmdCBzcGVjaWZpY2F0aW9uIGRldmVsb3BlZCB1bmRlciB0aGUgSmF2YQorICogQ29tbXVuaXR5
IFByb2Nlc3MgKEpDUCkgYW5kIGlzIG1hZGUgYXZhaWxhYmxlIGZvciB0ZXN0aW5nIGFuZCBldmFs
dWF0aW9uIHB1cnBvc2VzCisgKiBvbmx5LiBUaGUgY29kZSBpcyBub3QgY29tcGF0aWJsZSB3aXRo
IGFueSBzcGVjaWZpY2F0aW9uIG9mIHRoZSBKQ1AuCiAgKgogICogQ29udHJpYnV0b3JzOgpAQCAt
Mzk3LDUgKzQwMSw1IEBACiAJCQkJCQkJLy8gcG9zaXRpb24gaW4gZmllbGQncyB0eXBlOiB1c2Ug
Zmlyc3QgZmllbGQKIAkJCQkJCQlyZXR1cm4gY2FuZGlkYXRlLmdldFNvdXJjZUVsZW1lbnRBdChw
b3NpdGlvbik7Ci0JCQkJCQl9IGVsc2UgaWYgKGNoaWxkIGluc3RhbmNlb2YgSVBhcmVudCkgewor
CQkJCQkJfSBlbHNlIGlmIChjaGlsZCBpbnN0YW5jZW9mIElQYXJlbnQgJiYgIShjaGlsZCBpbnN0
YW5jZW9mIExhbWJkYUV4cHJlc3Npb24pKSB7CiAJCQkJCQkJcmV0dXJuIGNoaWxkLmdldFNvdXJj
ZUVsZW1lbnRBdChwb3NpdGlvbik7CiAJCQkJCQl9IGVsc2UgewpkaWZmIC0tZ2l0IGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvTGFtYmRh
RXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvcmUvTGFtYmRhRXhwcmVzc2lvbi5qYXZhCmluZGV4IGM5MzQ3ZmYuLmQy
N2I3ZjYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb3JlL0xhbWJkYUV4cHJlc3Npb24uamF2YQorKysgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9MYW1iZGFFeHBy
ZXNzaW9uLmphdmEKQEAgLTI2LDYgKzI2LDggQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29y
ZS5JVHlwZVBhcmFtZXRlcjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5KYXZhTW9kZWxF
eGNlcHRpb247CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuU2lnbmF0dXJlOwogaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5jb3JlLlNvdXJjZVJhbmdlOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5jb3JlLldvcmtpbmdDb3B5T3duZXI7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuY29t
cGlsZXIuQ2hhck9wZXJhdGlvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29t
cGlsZXIubG9va3VwLkJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNv
bXBpbGVyLmxvb2t1cC5UeXBlQmluZGluZzsKQEAgLTM1LDcgKzM3LDggQEAKIAlvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkxhbWJkYUV4cHJlc3Npb24gbGFtYmRhRXhwcmVz
c2lvbjsKIAlTb3VyY2VNZXRob2QgbGFtYmRhTWV0aG9kOworCVN0cmluZ1tdIHN1cGVySW50ZXJm
YWNlU2lnbjsKIAkKIAlwdWJsaWMgTGFtYmRhRXhwcmVzc2lvbihKYXZhRWxlbWVudCBwYXJlbnQs
IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuTGFtYmRhRXhwcmVzc2lvbiBs
YW1iZGFFeHByZXNzaW9uKSB7Ci0JCXN1cGVyKHBhcmVudCwgbmV3IFN0cmluZygiPGxhbWJkYT4i
KSk7IC8vJE5PTi1OTFMtMSQKKwkJc3VwZXIocGFyZW50LCBuZXcgU3RyaW5nKENoYXJPcGVyYXRp
b24uTk9fQ0hBUikpOwogCQl0aGlzLmxhbWJkYUV4cHJlc3Npb24gPSBsYW1iZGFFeHByZXNzaW9u
OwogCQl0aGlzLm9jY3VycmVuY2VDb3VudCA9IGxhbWJkYUV4cHJlc3Npb24ub3JkaW5hbDsKQEAg
LTc0LDUgKzc3LDUgQEAKIAlAT3ZlcnJpZGUKIAlwdWJsaWMgYm9vbGVhbiBleGlzdHMoKSB7Ci0J
CXJldHVybiB0cnVlOworCQlyZXR1cm4gdGhpcy5wYXJlbnQuZXhpc3RzKCk7CiAJfQogCkBAIC04
MCw5ICs4Myw0IEBACiAJcHVibGljIGludCBnZXRFbGVtZW50VHlwZSgpIHsKIAkJcmV0dXJuIFRZ
UEU7Ci0JfQotCi0JQE92ZXJyaWRlCi0JcHVibGljIFN0cmluZyBnZXRIYW5kbGVJZGVudGlmaWVy
KCkgewotCQlyZXR1cm4gbnVsbDsgLy8gVE9ETwogCX0KIApAQCAtMTg5LDkgKzE4Nyw0IEBACiAK
IAlAT3ZlcnJpZGUKLQlwdWJsaWMgU3RyaW5nIGdldEVsZW1lbnROYW1lKCkgewotCQlyZXR1cm4g
bmV3IFN0cmluZygiPGxhbWJkYT4iKTsgLy8kTk9OLU5MUy0xJAotCX0KLQotCUBPdmVycmlkZQog
CXB1YmxpYyBJRmllbGQgZ2V0RmllbGQoU3RyaW5nIGZpZWxkTmFtZSkgewogCQlyZXR1cm4gbnVs
bDsKQEAgLTI0OCw0ICsyNDEsMTEgQEAKIAlAT3ZlcnJpZGUKIAlwdWJsaWMgU3RyaW5nW10gZ2V0
U3VwZXJJbnRlcmZhY2VUeXBlU2lnbmF0dXJlcygpIHRocm93cyBKYXZhTW9kZWxFeGNlcHRpb24g
eworCQlpZiAodGhpcy5zdXBlckludGVyZmFjZVNpZ24gIT0gbnVsbCkgeworCQkJcmV0dXJuIHRo
aXMuc3VwZXJJbnRlcmZhY2VTaWduOworCQl9CisJCWlmICh0aGlzLmxhbWJkYUV4cHJlc3Npb24g
IT0gbnVsbCAmJiB0aGlzLmxhbWJkYUV4cHJlc3Npb24ucmVzb2x2ZWRUeXBlICE9IG51bGwpIHsK
KwkJCWNoYXJbXSBzdXBlckludGVyZmFjZU5hbWUgID0gdGhpcy5sYW1iZGFFeHByZXNzaW9uLnJl
c29sdmVkVHlwZS5yZWFkYWJsZU5hbWUoKTsKKwkJCXJldHVybiB0aGlzLnN1cGVySW50ZXJmYWNl
U2lnbiA9IG5ldyBTdHJpbmdbXXsoU2lnbmF0dXJlLmNyZWF0ZVR5cGVTaWduYXR1cmUoc3VwZXJJ
bnRlcmZhY2VOYW1lLCBmYWxzZSkpfTsKKwkJfQogCQl0aHJvdyBuZXcgSmF2YU1vZGVsRXhjZXB0
aW9uKG5ldyBKYXZhTW9kZWxTdGF0dXMoSUphdmFNb2RlbFN0YXR1c0NvbnN0YW50cy5SRUFEX09O
TFksIHRoaXMpKTsKIAl9CkBAIC0zNDIsMiArMzQyLDMgQEAKIAogfQorCmRpZmYgLS1naXQgYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9T
ZWxlY3Rpb25SZXF1ZXN0b3IuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL1NlbGVjdGlvblJlcXVlc3Rvci5qYXZhCmluZGV4IGYy
MjQ2NjguLjMwODEzMjcgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL1NlbGVjdGlvblJlcXVlc3Rvci5qYXZhCisrKyBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3Jl
L1NlbGVjdGlvblJlcXVlc3Rvci5qYXZhCkBAIC0xLDQgKzEsNCBAQAogLyoqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5k
IG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxNCBJQk0gQ29ycG9yYXRpb24gYW5k
IG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFj
Y29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVy
bXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMApAQCAtMjgsOCArMjgsMTAgQEAK
IGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5KYXZhTW9kZWxFeGNlcHRpb247CiBpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmNvcmUuU2lnbmF0dXJlOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5j
b3JlLmNvbXBpbGVyLio7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuQ2F0
ZWdvcml6ZWRQcm9ibGVtOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLkNo
YXJPcGVyYXRpb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvZGVhc3Npc3Qu
SVNlbGVjdGlvblJlcXVlc3RvcjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29k
ZWFzc2lzdC5TZWxlY3Rpb25FbmdpbmU7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFs
LmNvbXBpbGVyLmFzdC5BYnN0cmFjdFZhcmlhYmxlRGVjbGFyYXRpb247CitpbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5MYW1iZGFFeHByZXNzaW9uOwogaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuTG9jYWxEZWNsYXJhdGlvbjsK
IGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuY2xhc3NmbXQuQ2xhc3NG
aWxlQ29uc3RhbnRzOwpAQCAtMzgsNCArNDAsNSBAQAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5p
bnRlcm5hbC5jb21waWxlci5sb29rdXAuTG9jYWxWYXJpYWJsZUJpbmRpbmc7CiBpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5NZXRob2RCaW5kaW5nOworaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuTWV0aG9kU2NvcGU7
CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5QYXJhbWV0
ZXJpemVkVHlwZUJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBp
bGVyLmxvb2t1cC5SZWZlcmVuY2VCaW5kaW5nOwpAQCAtNDQ4LDQgKzQ1MSwxMyBAQAogCUxvY2Fs
RGVjbGFyYXRpb24gbG9jYWwgPSBiaW5kaW5nLmRlY2xhcmF0aW9uOwogCUlKYXZhRWxlbWVudCBw
YXJlbnQgPSBmaW5kTG9jYWxFbGVtZW50KGxvY2FsLnNvdXJjZVN0YXJ0KTsgLy8gZmluZExvY2Fs
RWxlbWVudCgpIGNhbm5vdCBmaW5kIGxvY2FsIHZhcmlhYmxlCisJaWYoYmluZGluZy5kZWNsYXJp
bmdTY29wZS5pc0xhbWJkYVN1YnNjb3BlKCkpIHsKKwkJTWV0aG9kU2NvcGUgc2NvcGUgPSBiaW5k
aW5nLmRlY2xhcmluZ1Njb3BlLm1ldGhvZFNjb3BlKCk7CisJCUxhbWJkYUV4cHJlc3Npb24gbGFt
YmRhID0gKExhbWJkYUV4cHJlc3Npb24pIHNjb3BlLnJlZmVyZW5jZUNvbnRleHQ7CisJCWlmIChw
YXJlbnQgaW5zdGFuY2VvZiBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS5MYW1iZGFFeHBy
ZXNzaW9uKSB7CisJCQkoKG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLkxhbWJkYUV4cHJl
c3Npb24pIHBhcmVudCkubGFtYmRhRXhwcmVzc2lvbiA9IGxhbWJkYTsKKwkJfSBlbHNlIHsKKwkJ
CXBhcmVudCA9IG5ldyBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS5MYW1iZGFFeHByZXNz
aW9uKChKYXZhRWxlbWVudCkgcGFyZW50LCBsYW1iZGEpOworCQl9CisJfQogCUxvY2FsVmFyaWFi
bGUgbG9jYWxWYXIgPSBudWxsOwogCWlmKHBhcmVudCAhPSBudWxsKSB7CmRpZmYgLS1naXQgYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9o
aWVyYXJjaHkvSGllcmFyY2h5UmVzb2x2ZXIuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21v
ZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL2hpZXJhcmNoeS9IaWVyYXJjaHlSZXNv
bHZlci5qYXZhCmluZGV4IGFmMzBmMGIuLjljMjc1Y2MgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL2hpZXJhcmNoeS9I
aWVyYXJjaHlSZXNvbHZlci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL2hpZXJhcmNoeS9IaWVyYXJjaHlSZXNvbHZlci5q
YXZhCkBAIC03NjEsNSArNzYxLDUgQEAKIAkJVHlwZURlY2xhcmF0aW9uIGZvY3VzTG9jYWxUeXBl
ID0gbnVsbDsKIAkJaWYgKGZvY3VzICE9IG51bGwgJiYgZm9jdXNCaW5hcnlCaW5kaW5nID09IG51
bGwgJiYgZm9jdXNVbml0ICE9IG51bGwgJiYgKChNZW1iZXIpZm9jdXMpLmdldE91dGVyTW9zdExv
Y2FsQ29udGV4dCgpICE9IG51bGwpIHsKLQkJCWZvY3VzTG9jYWxUeXBlID0gbmV3IEFTVE5vZGVG
aW5kZXIoZm9jdXNVbml0KS5maW5kVHlwZShmb2N1cyk7CisJCQlmb2N1c0xvY2FsVHlwZSA9IG5l
dyBBU1ROb2RlRmluZGVyKGZvY3VzVW5pdCkuZmluZFR5cGUoZm9jdXMpLnR5cGU7CiAJCX0KIApk
aWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvcmUvdXRpbC9BU1ROb2RlRmluZGVyLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS91dGlsL0FTVE5vZGVGaW5kZXIu
amF2YQppbmRleCA1OTMwMGUxLi4wYWI4YzlkIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS91dGlsL0FTVE5vZGVGaW5k
ZXIuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29yZS91dGlsL0FTVE5vZGVGaW5kZXIuamF2YQpAQCAtMSw4ICsxLDEyIEBACiAv
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDA5IElCTSBD
b3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDE0IElCTSBD
b3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9n
cmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxl
IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3
aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdAog
ICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKKyAqCisgKiBUaGlz
IGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2
ZWxvcGVkIHVuZGVyIHRoZSBKYXZhCisgKiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMg
bWFkZSBhdmFpbGFibGUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9u
bHkuIFRoZSBjb2RlIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24gb2Yg
dGhlIEpDUC4KICAqCiAgKiBDb250cmlidXRvcnM6CkBAIC0xMiwxMiArMTYsNyBAQAogCiBpbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuKjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5J
SmF2YUVsZW1lbnQ7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuSU1ldGhvZDsKLWltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuY29yZS5JVHlwZTsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29y
ZS5jb21waWxlci5DaGFyT3BlcmF0aW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5h
bC5jb21waWxlci5BU1RWaXNpdG9yOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b21waWxlci5hc3QuKjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
YXN0LkNvbXBpbGF0aW9uVW5pdERlY2xhcmF0aW9uOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5p
bnRlcm5hbC5jb21waWxlci5hc3QuVHlwZURlY2xhcmF0aW9uOwogaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuQmxvY2tTY29wZTsKIGltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkNsYXNzU2NvcGU7CkBAIC00MCw1ICsz
OSw1IEBACiAJICovCiAJcHVibGljIEZpZWxkRGVjbGFyYXRpb24gZmluZEZpZWxkKElGaWVsZCBm
aWVsZEhhbmRsZSkgewotCQlUeXBlRGVjbGFyYXRpb24gdHlwZURlY2wgPSBmaW5kVHlwZSgoSVR5
cGUpZmllbGRIYW5kbGUuZ2V0UGFyZW50KCkpOworCQlUeXBlRGVjbGFyYXRpb24gdHlwZURlY2wg
PSBmaW5kVHlwZSgoSVR5cGUpZmllbGRIYW5kbGUuZ2V0UGFyZW50KCkpLnR5cGU7CiAJCWlmICh0
eXBlRGVjbCA9PSBudWxsKSByZXR1cm4gbnVsbDsKIAkJRmllbGREZWNsYXJhdGlvbltdIGZpZWxk
cyA9IHR5cGVEZWNsLmZpZWxkczsKQEAgLTYwLDUgKzU5LDUgQEAKIAkgKi8KIAlwdWJsaWMgSW5p
dGlhbGl6ZXIgZmluZEluaXRpYWxpemVyKElJbml0aWFsaXplciBpbml0aWFsaXplckhhbmRsZSkg
ewotCQlUeXBlRGVjbGFyYXRpb24gdHlwZURlY2wgPSBmaW5kVHlwZSgoSVR5cGUpaW5pdGlhbGl6
ZXJIYW5kbGUuZ2V0UGFyZW50KCkpOworCQlUeXBlRGVjbGFyYXRpb24gdHlwZURlY2wgPSBmaW5k
VHlwZSgoSVR5cGUpaW5pdGlhbGl6ZXJIYW5kbGUuZ2V0UGFyZW50KCkpLnR5cGU7CiAJCWlmICh0
eXBlRGVjbCA9PSBudWxsKSByZXR1cm4gbnVsbDsKIAkJRmllbGREZWNsYXJhdGlvbltdIGZpZWxk
cyA9IHR5cGVEZWNsLmZpZWxkczsKQEAgLTgwLDUgKzc5LDUgQEAKIAkgKi8KIAlwdWJsaWMgQWJz
dHJhY3RNZXRob2REZWNsYXJhdGlvbiBmaW5kTWV0aG9kKElNZXRob2QgbWV0aG9kSGFuZGxlKSB7
Ci0JCVR5cGVEZWNsYXJhdGlvbiB0eXBlRGVjbCA9IGZpbmRUeXBlKChJVHlwZSltZXRob2RIYW5k
bGUuZ2V0UGFyZW50KCkpOworCQlUeXBlRGVjbGFyYXRpb24gdHlwZURlY2wgPSBmaW5kVHlwZSgo
SVR5cGUpbWV0aG9kSGFuZGxlLmdldFBhcmVudCgpKS50eXBlOwogCQlpZiAodHlwZURlY2wgPT0g
bnVsbCkgcmV0dXJuIG51bGw7CiAJCUFic3RyYWN0TWV0aG9kRGVjbGFyYXRpb25bXSBtZXRob2Rz
ID0gdHlwZURlY2wubWV0aG9kczsKQEAgLTEwNywxMCArMTA2LDE3IEBACiAJCXJldHVybiBudWxs
OwogCX0KLQorCXB1YmxpYyBjbGFzcyBBU1ROb2RlU2VhcmNoUmVzdWx0IHsKKwkJQVNUTm9kZVNl
YXJjaFJlc3VsdChUeXBlRGVjbGFyYXRpb24gdHlwZSwgTGFtYmRhRXhwcmVzc2lvbiBsYW1iZGEp
IHsKKwkJCXRoaXMudHlwZSA9IHR5cGU7CisJCQl0aGlzLmxhbWJkYSA9IGxhbWJkYTsKKwkJfQor
CQlwdWJsaWMgVHlwZURlY2xhcmF0aW9uIHR5cGU7CisJCXB1YmxpYyBMYW1iZGFFeHByZXNzaW9u
IGxhbWJkYTsKKwl9CiAJLyoKIAkgKiBGaW5kcyB0aGUgVHlwZURlY2xhcmF0aW9uIGluIHRoZSBn
aXZlbiBhc3QgY29ycmVzcG9uZGluZyB0byB0aGUgZ2l2ZW4gdHlwZSBoYW5kbGUuCiAJICogUmV0
dXJucyBudWxsIGlmIG5vdCBmb3VuZC4KIAkgKi8KLQlwdWJsaWMgVHlwZURlY2xhcmF0aW9uIGZp
bmRUeXBlKElUeXBlIHR5cGVIYW5kbGUpIHsKKwlwdWJsaWMgQVNUTm9kZVNlYXJjaFJlc3VsdCBm
aW5kVHlwZShJVHlwZSB0eXBlSGFuZGxlKSB7CiAJCUlKYXZhRWxlbWVudCBwYXJlbnQgPSB0eXBl
SGFuZGxlLmdldFBhcmVudCgpOwogCQlmaW5hbCBjaGFyW10gdHlwZU5hbWUgPSB0eXBlSGFuZGxl
LmdldEVsZW1lbnROYW1lKCkudG9DaGFyQXJyYXkoKTsKQEAgLTExOSw0ICsxMjUsNSBAQAogCQlj
bGFzcyBWaXNpdG9yIGV4dGVuZHMgQVNUVmlzaXRvciB7CiAJCQlUeXBlRGVjbGFyYXRpb24gcmVz
dWx0OworCQkJTGFtYmRhRXhwcmVzc2lvbiBsYW1iZGE7CiAJCQlpbnQgY291bnQgPSAwOwogCQkJ
cHVibGljIGJvb2xlYW4gdmlzaXQoVHlwZURlY2xhcmF0aW9uIHR5cGVEZWNsYXJhdGlvbiwgQmxv
Y2tTY29wZSBzY29wZSkgewpAQCAtMTMzLDQgKzE0MCwxMSBAQAogCQkJCXJldHVybiBmYWxzZTsg
Ly8gdmlzaXQgb25seSBvbmUgbGV2ZWwKIAkJCX0KKwkJCXB1YmxpYyBib29sZWFuIHZpc2l0KExh
bWJkYUV4cHJlc3Npb24gZXhwcmVzc2lvbiwgQmxvY2tTY29wZSBzY29wZSkgeworCQkJCWlmICh0
aGlzLnJlc3VsdCAhPSBudWxsKSByZXR1cm4gZmFsc2U7CisJCQkJaWYgKGZpbmRBbm9ueW1vdXMg
JiYgKyt0aGlzLmNvdW50ID09IG9jY3VyZW5jZUNvdW50KSB7CisJCQkJCXRoaXMubGFtYmRhID0g
ZXhwcmVzc2lvbjsKKwkJCQl9CisJCQkJcmV0dXJuIGZhbHNlOworCQkJfQogCQl9CiAJCXN3aXRj
aCAocGFyZW50LmdldEVsZW1lbnRUeXBlKCkpIHsKQEAgLTE0MSw1ICsxNTUsNSBAQAogCQkJCQkJ
VHlwZURlY2xhcmF0aW9uIHR5cGUgPSB0eXBlc1tpXTsKIAkJCQkJCWlmIChDaGFyT3BlcmF0aW9u
LmVxdWFscyh0eXBlTmFtZSwgdHlwZS5uYW1lKSkgewotCQkJCQkJCXJldHVybiB0eXBlOworCQkJ
CQkJCXJldHVybiBuZXcgQVNUTm9kZVNlYXJjaFJlc3VsdCh0eXBlLCBudWxsKTsKIAkJCQkJCX0K
IAkJCQkJfQpAQCAtMTQ3LDUgKzE2MSw1IEBACiAJCQkJYnJlYWs7CiAJCQljYXNlIElKYXZhRWxl
bWVudC5UWVBFOgotCQkJCVR5cGVEZWNsYXJhdGlvbiBwYXJlbnREZWNsID0gZmluZFR5cGUoKElU
eXBlKXBhcmVudCk7CisJCQkJVHlwZURlY2xhcmF0aW9uIHBhcmVudERlY2wgPSBmaW5kVHlwZSgo
SVR5cGUpcGFyZW50KS50eXBlOwogCQkJCWlmIChwYXJlbnREZWNsID09IG51bGwpIHJldHVybiBu
dWxsOwogCQkJCXR5cGVzID0gcGFyZW50RGVjbC5tZW1iZXJUeXBlczsKQEAgLTE1NCw1ICsxNjgs
NSBAQAogCQkJCQkJVHlwZURlY2xhcmF0aW9uIHR5cGUgPSB0eXBlc1tpXTsKIAkJCQkJCWlmIChD
aGFyT3BlcmF0aW9uLmVxdWFscyh0eXBlTmFtZSwgdHlwZS5uYW1lKSkgewotCQkJCQkJCXJldHVy
biB0eXBlOworCQkJCQkJCXJldHVybiBuZXcgQVNUTm9kZVNlYXJjaFJlc3VsdCh0eXBlLCBudWxs
KTsKIAkJCQkJCX0KIAkJCQkJfQpAQCAtMTY0LDUgKzE3OCw1IEBACiAJCQkJVmlzaXRvciB2aXNp
dG9yID0gbmV3IFZpc2l0b3IoKTsKIAkJCQlmaWVsZERlY2wudHJhdmVyc2UodmlzaXRvciwgbnVs
bCk7Ci0JCQkJcmV0dXJuIHZpc2l0b3IucmVzdWx0OworCQkJCXJldHVybiBuZXcgQVNUTm9kZVNl
YXJjaFJlc3VsdCh2aXNpdG9yLnJlc3VsdCwgdmlzaXRvci5sYW1iZGEpOwogCQkJY2FzZSBJSmF2
YUVsZW1lbnQuSU5JVElBTElaRVI6CiAJCQkJSW5pdGlhbGl6ZXIgaW5pdGlhbGl6ZXIgPSBmaW5k
SW5pdGlhbGl6ZXIoKElJbml0aWFsaXplcilwYXJlbnQpOwpAQCAtMTcwLDUgKzE4NCw1IEBACiAJ
CQkJdmlzaXRvciA9IG5ldyBWaXNpdG9yKCk7CiAJCQkJaW5pdGlhbGl6ZXIudHJhdmVyc2Uodmlz
aXRvciwgbnVsbCk7Ci0JCQkJcmV0dXJuIHZpc2l0b3IucmVzdWx0OworCQkJCXJldHVybiBuZXcg
QVNUTm9kZVNlYXJjaFJlc3VsdCh2aXNpdG9yLnJlc3VsdCwgdmlzaXRvci5sYW1iZGEpOwogCQkJ
Y2FzZSBJSmF2YUVsZW1lbnQuTUVUSE9EOgogCQkJCUFic3RyYWN0TWV0aG9kRGVjbGFyYXRpb24g
bWV0aG9kRGVjbCA9IGZpbmRNZXRob2QoKElNZXRob2QpcGFyZW50KTsKQEAgLTE3Niw1ICsxOTAs
NSBAQAogCQkJCXZpc2l0b3IgPSBuZXcgVmlzaXRvcigpOwogCQkJCW1ldGhvZERlY2wudHJhdmVy
c2UodmlzaXRvciwgKENsYXNzU2NvcGUpbnVsbCk7Ci0JCQkJcmV0dXJuIHZpc2l0b3IucmVzdWx0
OworCQkJCXJldHVybiBuZXcgQVNUTm9kZVNlYXJjaFJlc3VsdCh2aXNpdG9yLnJlc3VsdCwgdmlz
aXRvci5sYW1iZGEpOwogCQl9CiAJCXJldHVybiBudWxsOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9t
YXRjaGluZy9TdXBlclR5cGVOYW1lc0NvbGxlY3Rvci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9tYXRjaGluZy9T
dXBlclR5cGVOYW1lc0NvbGxlY3Rvci5qYXZhCmluZGV4IDNiNDUwOTkuLmU5ZDY2Y2UgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29yZS9zZWFyY2gvbWF0Y2hpbmcvU3VwZXJUeXBlTmFtZXNDb2xsZWN0b3IuamF2YQorKysg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
cmUvc2VhcmNoL21hdGNoaW5nL1N1cGVyVHlwZU5hbWVzQ29sbGVjdG9yLmphdmEKQEAgLTEsOCAr
MSwxMiBAQAogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwg
MjAxMiBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwg
MjAxNCBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQu
IFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRl
IGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2Ug
djEuMAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFp
bGFibGUgYXQKICAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCisg
KgorICogVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBhbiBlYXJseS1kcmFmdCBzcGVjaWZp
Y2F0aW9uIGRldmVsb3BlZCB1bmRlciB0aGUgSmF2YQorICogQ29tbXVuaXR5IFByb2Nlc3MgKEpD
UCkgYW5kIGlzIG1hZGUgYXZhaWxhYmxlIGZvciB0ZXN0aW5nIGFuZCBldmFsdWF0aW9uIHB1cnBv
c2VzCisgKiBvbmx5LiBUaGUgY29kZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGFueSBzcGVjaWZp
Y2F0aW9uIG9mIHRoZSBKQ1AuCiAgKgogICogQ29udHJpYnV0b3JzOgpAQCAtMTY3LDUgKzE3MSw1
IEBACiAJCQkJQ29tcGlsYXRpb25Vbml0RGVjbGFyYXRpb24gcGFyc2VkVW5pdCA9IGJ1aWxkQmlu
ZGluZ3ModW5pdCwgaXNUb3BMZXZlbE9yTWVtYmVyKTsKIAkJCQlpZiAocGFyc2VkVW5pdCAhPSBu
dWxsKSB7Ci0JCQkJCVR5cGVEZWNsYXJhdGlvbiB0eXBlRGVjbCA9IG5ldyBBU1ROb2RlRmluZGVy
KHBhcnNlZFVuaXQpLmZpbmRUeXBlKHRoaXMudHlwZSk7CisJCQkJCVR5cGVEZWNsYXJhdGlvbiB0
eXBlRGVjbCA9IG5ldyBBU1ROb2RlRmluZGVyKHBhcnNlZFVuaXQpLmZpbmRUeXBlKHRoaXMudHlw
ZSkudHlwZTsKIAkJCQkJaWYgKHR5cGVEZWNsICE9IG51bGwgJiYgdHlwZURlY2wuYmluZGluZyAh
PSBudWxsKQogCQkJCQkJY29sbGVjdFN1cGVyVHlwZU5hbWVzKHR5cGVEZWNsLmJpbmRpbmcsIG51
bGwpOw==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>240396</attachid>
            <date>2014-02-28 06:11:00 -0500</date>
            <delta_ts>2014-02-28 09:12:08 -0500</delta_ts>
            <desc>Another approach</desc>
            <filename>JM.patch</filename>
            <type>text/plain</type>
            <size>5692</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvZGVhc3Npc3Qvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvZGVhc3Npc3QvU2VsZWN0aW9uRW5naW5lLmphdmEgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb2RlYXNzaXN0L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb2RlYXNzaXN0
L1NlbGVjdGlvbkVuZ2luZS5qYXZhCmluZGV4IGM3NjlmMTEuLjY2MzU2NTYgMTAwNjQ0Ci0tLSBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvZGVhc3Npc3Qvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvZGVhc3Npc3QvU2VsZWN0aW9uRW5naW5lLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29kZWFzc2lzdC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29kZWFzc2lzdC9TZWxlY3Rp
b25FbmdpbmUuamF2YQpAQCAtOTc3LDcgKzk3Nyw3IEBACiAJCQkJCQkJCQlTeXN0ZW0ub3V0LnBy
aW50bG4oZS5iaW5kaW5nLnRvU3RyaW5nKCkpOwogCQkJCQkJCQl9CiAJCQkJCQkJCS8vIGlmIG51
bGwgdGhlbiB3ZSBmb3VuZCBhIHByb2JsZW0gaW4gdGhlIHNlbGVjdGlvbiBub2RlCi0JCQkJCQkJ
CXNlbGVjdEZyb20oZS5iaW5kaW5nLCBwYXJzZWRVbml0LCBlLmlzRGVjbGFyYXRpb24pOworCQkJ
CQkJCQlzZWxlY3RGcm9tKGUuYmluZGluZywgcGFyc2VkVW5pdCwgc291cmNlVW5pdCwgZS5pc0Rl
Y2xhcmF0aW9uKTsKIAkJCQkJCQl9CiAJCQkJCQl9CiAJCQkJCX0KQEAgLTEwODIsNiArMTA4Miw5
IEBACiAJfQogCiAJcHJpdmF0ZSB2b2lkIHNlbGVjdEZyb20oQmluZGluZyBiaW5kaW5nLCBDb21w
aWxhdGlvblVuaXREZWNsYXJhdGlvbiBwYXJzZWRVbml0LCBib29sZWFuIGlzRGVjbGFyYXRpb24p
IHsKKwkJc2VsZWN0RnJvbShiaW5kaW5nLCBwYXJzZWRVbml0LCBudWxsLCBpc0RlY2xhcmF0aW9u
KTsKKwl9CisJcHJpdmF0ZSB2b2lkIHNlbGVjdEZyb20oQmluZGluZyBiaW5kaW5nLCBDb21waWxh
dGlvblVuaXREZWNsYXJhdGlvbiBwYXJzZWRVbml0LCBJQ29tcGlsYXRpb25Vbml0IHVuaXQsIGJv
b2xlYW4gaXNEZWNsYXJhdGlvbikgewogCQlpZihiaW5kaW5nIGluc3RhbmNlb2YgVHlwZVZhcmlh
YmxlQmluZGluZykgewogCQkJVHlwZVZhcmlhYmxlQmluZGluZyB0eXBlVmFyaWFibGVCaW5kaW5n
ID0gKFR5cGVWYXJpYWJsZUJpbmRpbmcpIGJpbmRpbmc7CiAJCQlCaW5kaW5nIGVuY2xvc2luZ0Vs
ZW1lbnQgPSB0eXBlVmFyaWFibGVCaW5kaW5nLmRlY2xhcmluZ0VsZW1lbnQ7CkBAIC0xMjYyLDcg
KzEyNjUsNyBAQAogCQkJfQogCQl9IGVsc2UgaWYgKGJpbmRpbmcgaW5zdGFuY2VvZiBMb2NhbFZh
cmlhYmxlQmluZGluZykgewogCQkJaWYgKHRoaXMucmVxdWVzdG9yIGluc3RhbmNlb2YgU2VsZWN0
aW9uUmVxdWVzdG9yKSB7Ci0JCQkJKChTZWxlY3Rpb25SZXF1ZXN0b3IpdGhpcy5yZXF1ZXN0b3Ip
LmFjY2VwdExvY2FsVmFyaWFibGUoKExvY2FsVmFyaWFibGVCaW5kaW5nKWJpbmRpbmcpOworCQkJ
CSgoU2VsZWN0aW9uUmVxdWVzdG9yKXRoaXMucmVxdWVzdG9yKS5hY2NlcHRMb2NhbFZhcmlhYmxl
KChMb2NhbFZhcmlhYmxlQmluZGluZyliaW5kaW5nLCB1bml0KTsKIAkJCQl0aGlzLmFjY2VwdGVk
QW5zd2VyID0gdHJ1ZTsKIAkJCX0gZWxzZSB7CiAJCQkJLy8gb3BlbiBvbiB0aGUgdHlwZSBvZiB0
aGUgdmFyaWFibGUKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0phdmFFbGVtZW50LmphdmEgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9KYXZhRWxlbWVudC5q
YXZhCmluZGV4IDlmZDJkNDcuLjljOTczZTEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0phdmFFbGVtZW50LmphdmEK
KysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvcmUvSmF2YUVsZW1lbnQuamF2YQpAQCAtNjksNiArNjksNyBAQAogCXB1YmxpYyBzdGF0aWMg
ZmluYWwgY2hhciBKRU1fTE9DQUxWQVJJQUJMRSA9ICdAJzsKIAlwdWJsaWMgc3RhdGljIGZpbmFs
IGNoYXIgSkVNX1RZUEVfUEFSQU1FVEVSID0gJ10nOwogCXB1YmxpYyBzdGF0aWMgZmluYWwgY2hh
ciBKRU1fQU5OT1RBVElPTiA9ICd9JzsKKwlwdWJsaWMgc3RhdGljIGZpbmFsIGNoYXIgSkVNX0xB
TUJEQV9FWFBSRVNTSU9OID0gJz4nOwogCiAJLyoqCiAJICogVGhpcyBlbGVtZW50J3MgcGFyZW50
LCBvciA8Y29kZT5udWxsPC9jb2RlPiBpZiB0aGlzCkBAIC0xNDksNiArMTUwLDcgQEAKIAkJCQlj
YXNlIEpFTV9MT0NBTFZBUklBQkxFOgogCQkJCWNhc2UgSkVNX1RZUEVfUEFSQU1FVEVSOgogCQkJ
CWNhc2UgSkVNX0FOTk9UQVRJT046CisJCQkJY2FzZSBKRU1fTEFNQkRBX0VYUFJFU1NJT046CiAJ
CQkJCWJ1ZmZlci5hcHBlbmQoSkVNX0VTQ0FQRSk7CiAJCQl9CiAJCQlidWZmZXIuYXBwZW5kKGNo
YXJhY3Rlcik7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29yZS9MYW1iZGFFeHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9MYW1iZGFFeHBy
ZXNzaW9uLmphdmEKaW5kZXggYzA2MWQwYS4uYzM1ZDkzYyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvTGFtYmRhRXhw
cmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb3JlL0xhbWJkYUV4cHJlc3Npb24uamF2YQpAQCAtODAsMTIgKzgwLDE2
IEBACiAJcHVibGljIGludCBnZXRFbGVtZW50VHlwZSgpIHsKIAkJcmV0dXJuIFRZUEU7CiAJfQot
CisJCiAJQE92ZXJyaWRlCiAJcHVibGljIFN0cmluZyBnZXRIYW5kbGVJZGVudGlmaWVyKCkgewot
CQlyZXR1cm4gbnVsbDsgLy8gVE9ETworCQlyZXR1cm4gc3VwZXIuZ2V0SGFuZGxlSWRlbnRpZmll
cigpOwogCX0KLQorCQorCXByb3RlY3RlZCBjaGFyIGdldEhhbmRsZU1lbWVudG9EZWxpbWl0ZXIo
KSB7CisJCXJldHVybiBKYXZhRWxlbWVudC5KRU1fTEFNQkRBX0VYUFJFU1NJT047CisJfQorCQog
CUBPdmVycmlkZQogCXB1YmxpYyBib29sZWFuIGlzUmVhZE9ubHkoKSB7CiAJCXJldHVybiB0cnVl
OwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvcmUvU2VsZWN0aW9uUmVxdWVzdG9yLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9TZWxlY3Rpb25SZXF1ZXN0
b3IuamF2YQppbmRleCBmMjI0NjY4Li5kZTM5NjZjIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9TZWxlY3Rpb25SZXF1
ZXN0b3IuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29yZS9TZWxlY3Rpb25SZXF1ZXN0b3IuamF2YQpAQCAtMTUsNiArMTUsOCBA
QAogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZTsKIAogaW1wb3J0IGphdmEu
dXRpbC5BcnJheUxpc3Q7CitpbXBvcnQgamF2YS51dGlsLkhhc2hNYXA7CitpbXBvcnQgamF2YS51
dGlsLkhhc2hTZXQ7CiAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5GbGFnczsKIGltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuY29yZS5JQ29tcGlsYXRpb25Vbml0OwpAQCAtNDQ0LDkgKzQ0Niwx
NiBAQAogCQl9CiAJfQogfQotcHVibGljIHZvaWQgYWNjZXB0TG9jYWxWYXJpYWJsZShMb2NhbFZh
cmlhYmxlQmluZGluZyBiaW5kaW5nKSB7CitwdWJsaWMgdm9pZCBhY2NlcHRMb2NhbFZhcmlhYmxl
KExvY2FsVmFyaWFibGVCaW5kaW5nIGJpbmRpbmcsIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b21waWxlci5lbnYuSUNvbXBpbGF0aW9uVW5pdCB1bml0KSB7CiAJTG9jYWxEZWNsYXJhdGlvbiBs
b2NhbCA9IGJpbmRpbmcuZGVjbGFyYXRpb247Ci0JSUphdmFFbGVtZW50IHBhcmVudCA9IGZpbmRM
b2NhbEVsZW1lbnQobG9jYWwuc291cmNlU3RhcnQpOyAvLyBmaW5kTG9jYWxFbGVtZW50KCkgY2Fu
bm90IGZpbmQgbG9jYWwgdmFyaWFibGUKKwlJSmF2YUVsZW1lbnQgcGFyZW50ID0gbnVsbDsKKwlp
ZiAoYmluZGluZy5kZWNsYXJpbmdTY29wZS5pc0xhbWJkYVN1YnNjb3BlKCkgJiYgdW5pdCBpbnN0
YW5jZW9mIElDb21waWxhdGlvblVuaXQpIHsKKwkJSGFzaFNldCBleGlzdGluZ0VsZW1lbnRzID0g
bmV3IEhhc2hTZXQoKTsKKwkJSGFzaE1hcCBrbm93blNjb3BlcyA9IG5ldyBIYXNoTWFwKCk7CisJ
CXBhcmVudCA9IHRoaXMuaGFuZGxlRmFjdG9yeS5jcmVhdGVFbGVtZW50KGJpbmRpbmcuZGVjbGFy
aW5nU2NvcGUsIGxvY2FsLnNvdXJjZVN0YXJ0LCAoSUNvbXBpbGF0aW9uVW5pdCkgdW5pdCwgZXhp
c3RpbmdFbGVtZW50cywga25vd25TY29wZXMpOworCX0gZWxzZSB7CQkKKwkJcGFyZW50ID0gZmlu
ZExvY2FsRWxlbWVudChsb2NhbC5zb3VyY2VTdGFydCk7IC8vIGZpbmRMb2NhbEVsZW1lbnQoKSBj
YW5ub3QgZmluZCBsb2NhbCB2YXJpYWJsZQorCX0KIAlMb2NhbFZhcmlhYmxlIGxvY2FsVmFyID0g
bnVsbDsKIAlpZihwYXJlbnQgIT0gbnVsbCkgewogCQlsb2NhbFZhciA9IG5ldyBMb2NhbFZhcmlh
YmxlKApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvcmUvdXRpbC9IYW5kbGVGYWN0b3J5LmphdmEgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS91dGlsL0hhbmRsZUZh
Y3RvcnkuamF2YQppbmRleCA1YmQ0M2UwLi4wMTUyZDdiIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS91dGlsL0hhbmRs
ZUZhY3RvcnkuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29yZS91dGlsL0hhbmRsZUZhY3RvcnkuamF2YQpAQCAtMTczLDcgKzE3
Myw3IEBACiAJLyoqCiAJICogQ3JlYXRlIGhhbmRsZSBieSBhZGRpbmcgY2hpbGQgdG8gcGFyZW50
IG9idGFpbmVkIGJ5IHJlY3Vyc2luZyBpbnRvIHBhcmVudCBzY29wZXMuCiAJICovCi0JcHJpdmF0
ZSBJSmF2YUVsZW1lbnQgY3JlYXRlRWxlbWVudChTY29wZSBzY29wZSwgaW50IGVsZW1lbnRQb3Np
dGlvbiwgSUNvbXBpbGF0aW9uVW5pdCB1bml0LCBIYXNoU2V0IGV4aXN0aW5nRWxlbWVudHMsIEhh
c2hNYXAga25vd25TY29wZXMpIHsKKwlwdWJsaWMgSUphdmFFbGVtZW50IGNyZWF0ZUVsZW1lbnQo
U2NvcGUgc2NvcGUsIGludCBlbGVtZW50UG9zaXRpb24sIElDb21waWxhdGlvblVuaXQgdW5pdCwg
SGFzaFNldCBleGlzdGluZ0VsZW1lbnRzLCBIYXNoTWFwIGtub3duU2NvcGVzKSB7CiAJCUlKYXZh
RWxlbWVudCBuZXdFbGVtZW50ID0gKElKYXZhRWxlbWVudClrbm93blNjb3Blcy5nZXQoc2NvcGUp
OwogCQlpZiAobmV3RWxlbWVudCAhPSBudWxsKSByZXR1cm4gbmV3RWxlbWVudDsKIA==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>240400</attachid>
            <date>2014-02-28 09:11:00 -0500</date>
            <delta_ts>2014-03-03 09:31:20 -0500</delta_ts>
            <desc>Latest patch using another approach</desc>
            <filename>JM.patch</filename>
            <type>text/plain</type>
            <size>17350</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9tb2RlbC9NZW1lbnRvVGVzdHMuamF2YSBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9tb2Rl
bC9NZW1lbnRvVGVzdHMuamF2YQppbmRleCAzMjIyYmI5Li5lYmY3MDE0IDEwMDY0NAotLS0gYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvbW9kZWwvTWVtZW50b1Rlc3RzLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUu
dGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21vZGVsL01lbWVudG9U
ZXN0cy5qYXZhCkBAIC0xLDEwICsxLDE0IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICog
Q29weXJpZ2h0IChjKSAyMDAwLCAyMDEwIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICog
Q29weXJpZ2h0IChjKSAyMDAwLCAyMDE0IElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICog
QWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1h
dGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNs
aXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3Ry
aWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdAogICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9s
ZWdhbC9lcGwtdjEwLmh0bWwKICAqCisgKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGFu
IGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVyIHRoZSBKYXZhCisgKiBD
b21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFibGUgZm9yIHRlc3Rpbmcg
YW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBjb2RlIGlzIG5vdCBjb21wYXRp
YmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KKyAqIAogICogQ29udHJpYnV0
b3JzOgogICogICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRh
dGlvbgogICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCkBAIC0yNTEsNyArMjU1LDcgQEAKIAlJVHlw
ZSB0eXBlID0gZ2V0Q2xhc3NGaWxlKCIvUC9saWIvcC9YLmNsYXNzIikuZ2V0VHlwZSgpOwogCUlN
ZXRob2QgbWV0aG9kID0gdHlwZS5nZXRNZXRob2QoImZvbyIsIG5ldyBTdHJpbmdbXSB7IkxqYXZh
LnV0aWwuQ29sbGVjdGlvbjwqPjsifSk7CiAJYXNzZXJ0TWVtZW50bygKLQkJIj1QL2xpYjxwKFgu
Y2xhc3NbWH5mb29+TGphdmEudXRpbC5Db2xsZWN0aW9uXFw8Kj47IiwKKwkJIj1QL2xpYjxwKFgu
Y2xhc3NbWH5mb29+TGphdmEudXRpbC5Db2xsZWN0aW9uXFw8KlxcPjsiLAogCQltZXRob2QpOwog
fQogCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3Jn
L2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvbW9kZWwvUmVzb2x2ZVRlc3RzMTguamF2YSBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0
cy9tb2RlbC9SZXNvbHZlVGVzdHMxOC5qYXZhCmluZGV4IGU4YzM0NTEuLjA2NmIzZTAgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9tb2RlbC9SZXNvbHZlVGVzdHMxOC5qYXZhCisrKyBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9tb2Rl
bC9SZXNvbHZlVGVzdHMxOC5qYXZhCkBAIC03MTgsNyArNzE4LDcgQEAKIAlJSmF2YUVsZW1lbnRb
XSBlbGVtZW50cyA9IHRoaXMud2MuY29kZVNlbGVjdChzdGFydCwgbGVuZ3RoKTsKIAlhc3NlcnRF
bGVtZW50c0VxdWFsKAogCQkiVW5leHBlY3RlZCBlbGVtZW50cyIsCi0JCSJ4eXogW2luIGZvbygp
IFtpbiBYIFtpbiBbV29ya2luZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtp
biBSZXNvbHZlXV1dXV1dIiwKKwkJInh5eiBbaW4gbGFtYmRhJDEoaW50KSBbaW4gPGxhbWJkYT4g
W2luIGZvbygpIFtpbiBYIFtpbiBbV29ya2luZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBb
aW4gc3JjIFtpbiBSZXNvbHZlXV1dXV1dXV0iLAogCQllbGVtZW50cwogCSk7CiB9CkBAIC03NDMs
NyArNzQzLDcgQEAKIAlJSmF2YUVsZW1lbnRbXSBlbGVtZW50cyA9IHRoaXMud2MuY29kZVNlbGVj
dChzdGFydCwgbGVuZ3RoKTsKIAlhc3NlcnRFbGVtZW50c0VxdWFsKAogCQkiVW5leHBlY3RlZCBl
bGVtZW50cyIsCi0JCSJhYmMgW2luIGZvbygpIFtpbiBYIFtpbiBbV29ya2luZyBjb3B5XSBYLmph
dmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1dXV1dIiwKKwkJImFiYyBbaW4g
bGFtYmRhJDEoaW50KSBbaW4gPGxhbWJkYT4gW2luIGZvbygpIFtpbiBYIFtpbiBbV29ya2luZyBj
b3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1dXV1dXV0iLAog
CQllbGVtZW50cwogCSk7CiB9CkBAIC03NjYsNyArNzY2LDcgQEAKIAlJSmF2YUVsZW1lbnRbXSBl
bGVtZW50cyA9IHRoaXMud2MuY29kZVNlbGVjdChzdGFydCwgbGVuZ3RoKTsKIAlhc3NlcnRFbGVt
ZW50c0VxdWFsKAogCQkiVW5leHBlY3RlZCBlbGVtZW50cyIsCi0JCSJhYmMgW2luIGkgW2luIFgg
W2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2luIFJlc29s
dmVdXV1dXV0iLAorCQkiYWJjIFtpbiBsYW1iZGEkMShpbnQpIFtpbiA8bGFtYmRhPiBbaW4gaSBb
aW4gWCBbaW4gW1dvcmtpbmcgY29weV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4g
UmVzb2x2ZV1dXV1dXV1dIiwKIAkJZWxlbWVudHMKIAkpOwogfQpAQCAtNzk0LDcgKzc5NCw3IEBA
CiAJSUphdmFFbGVtZW50W10gZWxlbWVudHMgPSB0aGlzLndjLmNvZGVTZWxlY3Qoc3RhcnQsIGxl
bmd0aCk7CiAJYXNzZXJ0RWxlbWVudHNFcXVhbCgKIAkJIlVuZXhwZWN0ZWQgZWxlbWVudHMiLAot
CQkiYWJjIFtpbiBtYWluKFN0cmluZ1tdKSBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0gWC5qYXZh
IFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXSIsCisJCSJhYmMgW2luIGxh
bWJkYSQzKEkpIFtpbiA8bGFtYmRhPiMzIFtpbiBsYW1iZGEkMihJKSBbaW4gPGxhbWJkYT4jMiBb
aW4gbGFtYmRhJDEoSSkgW2luIDxsYW1iZGE+IFtpbiBtYWluKFN0cmluZ1tdKSBbaW4gWCBbaW4g
W1dvcmtpbmcgY29weV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1d
XV1dXV1dXV1dXSIsCiAJCWVsZW1lbnRzCiAJKTsKIH0KQEAgLTgyMiw3ICs4MjIsNyBAQAogCUlK
YXZhRWxlbWVudFtdIGVsZW1lbnRzID0gdGhpcy53Yy5jb2RlU2VsZWN0KHN0YXJ0LCBsZW5ndGgp
OwogCWFzc2VydEVsZW1lbnRzRXF1YWwoCiAJCSJVbmV4cGVjdGVkIGVsZW1lbnRzIiwKLQkJInh5
eiBbaW4gbWFpbihTdHJpbmdbXSkgW2luIFggW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4g
PGRlZmF1bHQ+IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV0iLAorCQkieHl6IFtpbiBsYW1iZGEk
MihJKSBbaW4gPGxhbWJkYT4jMiBbaW4gbGFtYmRhJDEoSSkgW2luIDxsYW1iZGE+IFtpbiBtYWlu
KFN0cmluZ1tdKSBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4g
W2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXV1dXV0iLAogCQllbGVtZW50cwogCSk7CiB9CkBAIC04
ODgsNyArODg4LDcgQEAKIAlJSmF2YUVsZW1lbnRbXSBlbGVtZW50cyA9IHRoaXMud2MuY29kZVNl
bGVjdChzdGFydCwgbGVuZ3RoKTsKIAlhc3NlcnRFbGVtZW50c0VxdWFsKAogCQkiVW5leHBlY3Rl
ZCBlbGVtZW50cyIsCi0JCSJ6eXggW2luIGZ4IFtpbiBYIFtpbiBbV29ya2luZyBjb3B5XSBYLmph
dmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1dXV1dIiwKKwkJInp5eCBbaW4g
bGFtYmRhJDQoSSkgW2luIDxsYW1iZGE+IzQgW2luIGxhbWJkYSQzKEkpIFtpbiA8bGFtYmRhPiMz
IFtpbiBmeCBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2lu
IHNyYyBbaW4gUmVzb2x2ZV1dXV1dXV1dXV0iLAogCQllbGVtZW50cwogCSk7CiB9CkBAIC05MjEs
NyArOTIxLDcgQEAKIAlJSmF2YUVsZW1lbnRbXSBlbGVtZW50cyA9IHRoaXMud2MuY29kZVNlbGVj
dChzdGFydCwgbGVuZ3RoKTsKIAlhc3NlcnRFbGVtZW50c0VxdWFsKAogCQkiVW5leHBlY3RlZCBl
bGVtZW50cyIsCi0JCSJ4eXogW2luIG1haW4oU3RyaW5nW10pIFtpbiBYIFtpbiBbV29ya2luZyBj
b3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1dXV1dIiwKKwkJ
Inh5eiBbaW4gbGFtYmRhJDQoSSkgW2luIDxsYW1iZGE+IzQgW2luIGxhbWJkYSQzKEkpIFtpbiA8
bGFtYmRhPiMzIFtpbiBtYWluKFN0cmluZ1tdKSBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0gWC5q
YXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXV1dXV0iLAogCQllbGVt
ZW50cwogCSk7CiB9CkBAIC05NTYsNyArOTU2LDcgQEAKIAlJSmF2YUVsZW1lbnRbXSBlbGVtZW50
cyA9IHRoaXMud2MuY29kZVNlbGVjdChzdGFydCwgbGVuZ3RoKTsKIAlhc3NlcnRFbGVtZW50c0Vx
dWFsKAogCQkiVW5leHBlY3RlZCBlbGVtZW50cyIsCi0JCSJoaWogW2luIG1haW4oU3RyaW5nW10p
IFtpbiBYIFtpbiBbV29ya2luZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtp
biBSZXNvbHZlXV1dXV1dIiwKKwkJImhpaiBbaW4gbGFtYmRhJDMoSSkgW2luIDxsYW1iZGE+IzMg
W2luIGxhbWJkYSQyKEkpIFtpbiA8bGFtYmRhPiMyIFtpbiBtYWluKFN0cmluZ1tdKSBbaW4gWCBb
aW4gW1dvcmtpbmcgY29weV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2
ZV1dXV1dXV1dXV0iLAogCQllbGVtZW50cwogCSk7CiB9CkBAIC05OTIsNyArOTkyLDcgQEAKIAlJ
SmF2YUVsZW1lbnRbXSBlbGVtZW50cyA9IHRoaXMud2MuY29kZVNlbGVjdChzdGFydCwgbGVuZ3Ro
KTsKIAlhc3NlcnRFbGVtZW50c0VxdWFsKAogCQkiVW5leHBlY3RlZCBlbGVtZW50cyIsCi0JCSJo
aWogW2luIG1haW4oU3RyaW5nW10pIFtpbiBYIFtpbiBbV29ya2luZyBjb3B5XSBYLmphdmEgW2lu
IDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1dXV1dIiwKKwkJImhpaiBbaW4gbGFtYmRh
JDMoSSkgW2luIDxsYW1iZGE+IzMgW2luIGxhbWJkYSQyKEkpIFtpbiA8bGFtYmRhPiMyIFtpbiBt
YWluKFN0cmluZ1tdKSBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0gWC5qYXZhIFtpbiA8ZGVmYXVs
dD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXV1dXV0iLAogCQllbGVtZW50cwogCSk7CiB9CkBA
IC0xNDMxLDcgKzE0MzEsNyBAQAogCUlKYXZhRWxlbWVudFtdIGVsZW1lbnRzID0gdGhpcy53Yy5j
b2RlU2VsZWN0KHN0YXJ0LCBsZW5ndGgpOwogCWFzc2VydEVsZW1lbnRzRXF1YWwoCiAJCSJVbmV4
cGVjdGVkIGVsZW1lbnRzIiwKLQkJImZpcnN0IFtpbiBpIFtpbiBYIFtpbiBbV29ya2luZyBjb3B5
XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1dXV1dIiwKKwkJImZp
cnN0IFtpbiBsYW1iZGEkMShpbnQsIGludCkgW2luIDxsYW1iZGE+IFtpbiBpIFtpbiBYIFtpbiBb
V29ya2luZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1d
XV1dXV0iLAogCQllbGVtZW50cwogCSk7CiB9CkBAIC0xNDU0LDcgKzE0NTQsNyBAQAogCUlKYXZh
RWxlbWVudFtdIGVsZW1lbnRzID0gdGhpcy53Yy5jb2RlU2VsZWN0KHN0YXJ0LCBsZW5ndGgpOwog
CWFzc2VydEVsZW1lbnRzRXF1YWwoCiAJCSJVbmV4cGVjdGVkIGVsZW1lbnRzIiwKLQkJImZpcnN0
IFtpbiBpIFtpbiBYIFtpbiBbV29ya2luZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4g
c3JjIFtpbiBSZXNvbHZlXV1dXV1dIiwKKwkJImZpcnN0IFtpbiBsYW1iZGEkMShYLCBqYXZhL2xh
bmcvT2JqZWN0KSBbaW4gPGxhbWJkYT4gW2luIGkgW2luIFggW2luIFtXb3JraW5nIGNvcHldIFgu
amF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV1dXSIsCiAJCWVsZW1l
bnRzCiAJKTsKIH0KQEAgLTE0NzcsNyArMTQ3Nyw3IEBACiAJSUphdmFFbGVtZW50W10gZWxlbWVu
dHMgPSB0aGlzLndjLmNvZGVTZWxlY3Qoc3RhcnQsIGxlbmd0aCk7CiAJYXNzZXJ0RWxlbWVudHNF
cXVhbCgKIAkJIlVuZXhwZWN0ZWQgZWxlbWVudHMiLAotCQkic2Vjb25kIFtpbiBpIFtpbiBYIFtp
biBbV29ya2luZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZl
XV1dXV1dIiwKKwkJInNlY29uZCBbaW4gbGFtYmRhJDEoWCwgamF2YS9sYW5nL09iamVjdCkgW2lu
IDxsYW1iZGE+IFtpbiBpIFtpbiBYIFtpbiBbV29ya2luZyBjb3B5XSBYLmphdmEgW2luIDxkZWZh
dWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1dXV1dXV0iLAogCQllbGVtZW50cwogCSk7CiB9CkBA
IC0xNTAzLDcgKzE1MDMsNyBAQAogCUlKYXZhRWxlbWVudFtdIGVsZW1lbnRzID0gdGhpcy53Yy5j
b2RlU2VsZWN0KHN0YXJ0LCBsZW5ndGgpOwogCWFzc2VydEVsZW1lbnRzRXF1YWwoCiAJCSJVbmV4
cGVjdGVkIGVsZW1lbnRzIiwKLQkJInkgW2luIG1haW4oU3RyaW5nW10pIFtpbiBYIFtpbiBbV29y
a2luZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1dXV1d
IiwKKwkJInkgW2luIGxhbWJkYSQ1KEkpIFtpbiA8bGFtYmRhPiM1IFtpbiBsYW1iZGEkNChJKSBb
aW4gPGxhbWJkYT4jNCBbaW4gbWFpbihTdHJpbmdbXSkgW2luIFggW2luIFtXb3JraW5nIGNvcHld
IFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV1dXV1dIiwKIAkJ
ZWxlbWVudHMKIAkpOwogfQpAQCAtMTUyOSw3ICsxNTI5LDcgQEAKIAlJSmF2YUVsZW1lbnRbXSBl
bGVtZW50cyA9IHRoaXMud2MuY29kZVNlbGVjdChzdGFydCwgbGVuZ3RoKTsKIAlhc3NlcnRFbGVt
ZW50c0VxdWFsKAogCQkiVW5leHBlY3RlZCBlbGVtZW50cyIsCi0JCSJ5IFtpbiBtYWluKFN0cmlu
Z1tdKSBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNy
YyBbaW4gUmVzb2x2ZV1dXV1dXSIsCisJCSJ5IFtpbiBsYW1iZGEkNShJKSBbaW4gPGxhbWJkYT4j
NSBbaW4gbGFtYmRhJDQoSSkgW2luIDxsYW1iZGE+IzQgW2luIG1haW4oU3RyaW5nW10pIFtpbiBY
IFtpbiBbV29ya2luZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNv
bHZlXV1dXV1dXV1dXSIsCiAJCWVsZW1lbnRzCiAJKTsKIH0KQEAgLTE1OTMsNyArMTU5Myw3IEBA
CiAJSUphdmFFbGVtZW50W10gZWxlbWVudHMgPSB0aGlzLndjLmNvZGVTZWxlY3Qoc3RhcnQsIGxl
bmd0aCk7CiAJYXNzZXJ0RWxlbWVudHNFcXVhbCgKIAkJIlVuZXhwZWN0ZWQgZWxlbWVudHMiLAot
CQkicSBbaW4gbWFpbihTdHJpbmdbXSkgW2luIFggW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBb
aW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV0iLAorCQkicSBbaW4gbGFtYmRh
JDMoamF2YS9sYW5nL1N0cmluZywgaW50KSBbaW4gPGxhbWJkYT4jMyBbaW4gbGFtYmRhJDIoamF2
YS9sYW5nL1N0cmluZywgamF2YS9sYW5nL1N0cmluZykgW2luIDxsYW1iZGE+IzIgW2luIGxhbWJk
YSQxKGphdmEvbGFuZy9TdHJpbmcsIGphdmEvbGFuZy9TdHJpbmcpIFtpbiA8bGFtYmRhPiBbaW4g
bWFpbihTdHJpbmdbXSkgW2luIFggW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1
bHQ+IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV1dXV1dXV0iLAogCQllbGVtZW50cwogCSk7CiB9
CkBAIC0xNjI4LDcgKzE2MjgsNyBAQAogCUlKYXZhRWxlbWVudFtdIGVsZW1lbnRzID0gdGhpcy53
Yy5jb2RlU2VsZWN0KHN0YXJ0LCBsZW5ndGgpOwogCWFzc2VydEVsZW1lbnRzRXF1YWwoCiAJCSJV
bmV4cGVjdGVkIGVsZW1lbnRzIiwKLQkJInggW2luIG1haW4oU3RyaW5nW10pIFtpbiBYIFtpbiBb
V29ya2luZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1d
XV1dIiwKKwkJInggW2luIGxhbWJkYSQxKGphdmEvbGFuZy9TdHJpbmcsIGphdmEvbGFuZy9JbnRl
Z2VyKSBbaW4gPGxhbWJkYT4gW2luIG1haW4oU3RyaW5nW10pIFtpbiBYIFtpbiBbV29ya2luZyBj
b3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1dXV1dXV0iLAog
CQllbGVtZW50cwogCSk7CiB9CkBAIC0xNzg3LDcgKzE3ODcsNyBAQAogCUlKYXZhRWxlbWVudFtd
IGVsZW1lbnRzID0gdGhpcy53Yy5jb2RlU2VsZWN0KHN0YXJ0LCBsZW5ndGgpOwogCWFzc2VydEVs
ZW1lbnRzRXF1YWwoCiAJCSJVbmV4cGVjdGVkIGVsZW1lbnRzIiwKLQkJInYxIFtpbiBwcm9jZXNz
SmFyKFBhdGgpIFtpbiBJbnNpc3RlbnRDYXB0dXJlIFtpbiBbV29ya2luZyBjb3B5XSBYLmphdmEg
W2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1dXV1dIiwKKwkJInYxIFtpbiBsYW1i
ZGEkMShqYXZhL2xhbmcvU3RyaW5nKSBbaW4gPGxhbWJkYT4gW2luIHByb2Nlc3NKYXIoUGF0aCkg
W2luIEluc2lzdGVudENhcHR1cmUgW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1
bHQ+IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV1dXSIsCiAJCWVsZW1lbnRzLAogCQl0cnVlCiAJ
KTsKQEAgLTE4NTIsNyArMTg1Miw3IEBACiAJSUphdmFFbGVtZW50W10gZWxlbWVudHMgPSB0aGlz
LndjLmNvZGVTZWxlY3Qoc3RhcnQsIGxlbmd0aCk7CiAJYXNzZXJ0RWxlbWVudHNFcXVhbCgKIAkJ
IlVuZXhwZWN0ZWQgZWxlbWVudHMiLAotCQkidjIgW2luIHByb2Nlc3NKYXIoUGF0aCkgW2luIElu
c2lzdGVudENhcHR1cmUgW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtp
biBzcmMgW2luIFJlc29sdmVdXV1dXV0iLAorCQkidjIgW2luIGxhbWJkYSQxKGphdmEvbGFuZy9T
dHJpbmcpIFtpbiA8bGFtYmRhPiBbaW4gcHJvY2Vzc0phcihQYXRoKSBbaW4gSW5zaXN0ZW50Q2Fw
dHVyZSBbaW4gW1dvcmtpbmcgY29weV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4g
UmVzb2x2ZV1dXV1dXV1dIiwKIAkJZWxlbWVudHMsCiAJCXRydWUKIAkpOwpAQCAtMTkxNyw3ICsx
OTE3LDcgQEAKIAlJSmF2YUVsZW1lbnRbXSBlbGVtZW50cyA9IHRoaXMud2MuY29kZVNlbGVjdChz
dGFydCwgbGVuZ3RoKTsKIAlhc3NlcnRFbGVtZW50c0VxdWFsKAogCQkiVW5leHBlY3RlZCBlbGVt
ZW50cyIsCi0JCSJzMSBbaW4gd2l0aFdpbGRjYXJkKFN0cmVhbTw/IGV4dGVuZHMgU3RyaW5nPikg
W2luIEluc2lzdGVudENhcHR1cmUgW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1
bHQ+IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV0iLAorCQkiczEgW2luIGxhbWJkYSQxKGphdmEv
bGFuZy9TdHJpbmcpIFtpbiA8bGFtYmRhPiBbaW4gd2l0aFdpbGRjYXJkKFN0cmVhbTw/IGV4dGVu
ZHMgU3RyaW5nPikgW2luIEluc2lzdGVudENhcHR1cmUgW2luIFtXb3JraW5nIGNvcHldIFguamF2
YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV1dXSIsCiAJCWVsZW1lbnRz
LAogCQl0cnVlCiAJKTsKQEAgLTE5ODIsNyArMTk4Miw3IEBACiAJSUphdmFFbGVtZW50W10gZWxl
bWVudHMgPSB0aGlzLndjLmNvZGVTZWxlY3Qoc3RhcnQsIGxlbmd0aCk7CiAJYXNzZXJ0RWxlbWVu
dHNFcXVhbCgKIAkJIlVuZXhwZWN0ZWQgZWxlbWVudHMiLAotCQkiczIgW2luIHdpdGhvdXRXaWxk
Y2FyZChTdHJlYW08U3RyaW5nPikgW2luIEluc2lzdGVudENhcHR1cmUgW2luIFtXb3JraW5nIGNv
cHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV0iLAorCQki
czIgW2luIGxhbWJkYSQxKGphdmEvbGFuZy9TdHJpbmcpIFtpbiA8bGFtYmRhPiBbaW4gd2l0aG91
dFdpbGRjYXJkKFN0cmVhbTxTdHJpbmc+KSBbaW4gSW5zaXN0ZW50Q2FwdHVyZSBbaW4gW1dvcmtp
bmcgY29weV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXV1d
IiwKIAkJZWxlbWVudHMsCiAJCXRydWUKIAkpOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29kZWFzc2lzdC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29kZWFzc2lzdC9TZWxl
Y3Rpb25FbmdpbmUuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvZGVhc3Npc3Qvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvZGVhc3Npc3QvU2VsZWN0aW9uRW5naW5lLmphdmEKaW5kZXgg
Yzc2OWYxMS4uZDQyNTJiMyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29kZWFz
c2lzdC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29kZWFzc2lzdC9TZWxlY3Rpb25FbmdpbmUu
amF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb2RlYXNzaXN0L29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb2RlYXNzaXN0L1NlbGVjdGlvbkVuZ2luZS5qYXZhCkBAIC05NzcsNyArOTc3
LDcgQEAKIAkJCQkJCQkJCVN5c3RlbS5vdXQucHJpbnRsbihlLmJpbmRpbmcudG9TdHJpbmcoKSk7
CiAJCQkJCQkJCX0KIAkJCQkJCQkJLy8gaWYgbnVsbCB0aGVuIHdlIGZvdW5kIGEgcHJvYmxlbSBp
biB0aGUgc2VsZWN0aW9uIG5vZGUKLQkJCQkJCQkJc2VsZWN0RnJvbShlLmJpbmRpbmcsIHBhcnNl
ZFVuaXQsIGUuaXNEZWNsYXJhdGlvbik7CisJCQkJCQkJCXNlbGVjdEZyb20oZS5iaW5kaW5nLCBw
YXJzZWRVbml0LCBzb3VyY2VVbml0LCBlLmlzRGVjbGFyYXRpb24pOwogCQkJCQkJCX0KIAkJCQkJ
CX0KIAkJCQkJfQpAQCAtMTA4Miw2ICsxMDgyLDkgQEAKIAl9CiAKIAlwcml2YXRlIHZvaWQgc2Vs
ZWN0RnJvbShCaW5kaW5nIGJpbmRpbmcsIENvbXBpbGF0aW9uVW5pdERlY2xhcmF0aW9uIHBhcnNl
ZFVuaXQsIGJvb2xlYW4gaXNEZWNsYXJhdGlvbikgeworCQlzZWxlY3RGcm9tKGJpbmRpbmcsIHBh
cnNlZFVuaXQsIG51bGwsIGlzRGVjbGFyYXRpb24pOworCX0KKwlwcml2YXRlIHZvaWQgc2VsZWN0
RnJvbShCaW5kaW5nIGJpbmRpbmcsIENvbXBpbGF0aW9uVW5pdERlY2xhcmF0aW9uIHBhcnNlZFVu
aXQsIElDb21waWxhdGlvblVuaXQgdW5pdCwgYm9vbGVhbiBpc0RlY2xhcmF0aW9uKSB7CiAJCWlm
KGJpbmRpbmcgaW5zdGFuY2VvZiBUeXBlVmFyaWFibGVCaW5kaW5nKSB7CiAJCQlUeXBlVmFyaWFi
bGVCaW5kaW5nIHR5cGVWYXJpYWJsZUJpbmRpbmcgPSAoVHlwZVZhcmlhYmxlQmluZGluZykgYmlu
ZGluZzsKIAkJCUJpbmRpbmcgZW5jbG9zaW5nRWxlbWVudCA9IHR5cGVWYXJpYWJsZUJpbmRpbmcu
ZGVjbGFyaW5nRWxlbWVudDsKQEAgLTEyNjIsNyArMTI2NSw3IEBACiAJCQl9CiAJCX0gZWxzZSBp
ZiAoYmluZGluZyBpbnN0YW5jZW9mIExvY2FsVmFyaWFibGVCaW5kaW5nKSB7CiAJCQlpZiAodGhp
cy5yZXF1ZXN0b3IgaW5zdGFuY2VvZiBTZWxlY3Rpb25SZXF1ZXN0b3IpIHsKLQkJCQkoKFNlbGVj
dGlvblJlcXVlc3Rvcil0aGlzLnJlcXVlc3RvcikuYWNjZXB0TG9jYWxWYXJpYWJsZSgoTG9jYWxW
YXJpYWJsZUJpbmRpbmcpYmluZGluZyk7CisJCQkJKChTZWxlY3Rpb25SZXF1ZXN0b3IpdGhpcy5y
ZXF1ZXN0b3IpLmFjY2VwdExvY2FsVmFyaWFibGUoKExvY2FsVmFyaWFibGVCaW5kaW5nKWJpbmRp
bmcsIHVuaXQpOwogCQkJCXRoaXMuYWNjZXB0ZWRBbnN3ZXIgPSB0cnVlOwogCQkJfSBlbHNlIHsK
IAkJCQkvLyBvcGVuIG9uIHRoZSB0eXBlIG9mIHRoZSB2YXJpYWJsZQpAQCAtMTM4MSwxNSArMTM4
NCw2IEBACiAJCQkJdHlwZU5hbWUgPSBTaWduYXR1cmUudG9DaGFyQXJyYXkodHlwZVNpZyk7CiAJ
CQl9CiAKLQkJCS8vIGZpbmQgdGhlIG91dGVyIG1vc3QgdHlwZQotCQkJSVR5cGUgb3V0ZXJUeXBl
ID0gY29udGV4dDsKLQkJCUlUeXBlIHBhcmVudCA9IGNvbnRleHQuZ2V0RGVjbGFyaW5nVHlwZSgp
OwotCQkJd2hpbGUgKHBhcmVudCAhPSBudWxsKSB7Ci0JCQkJb3V0ZXJUeXBlID0gcGFyZW50Owot
CQkJCXBhcmVudCA9IHBhcmVudC5nZXREZWNsYXJpbmdUeXBlKCk7Ci0JCQl9Ci0KLQkJCS8vIGNv
bXB1dGUgcGFyc2UgdHJlZSBmb3IgdGhpcyBtb3N0IG91dGVyIHR5cGUKIAkJCUNvbXBpbGF0aW9u
VW5pdERlY2xhcmF0aW9uIHBhcnNlZFVuaXQgPSBudWxsOwogCQkJVHlwZURlY2xhcmF0aW9uIHR5
cGVEZWNsYXJhdGlvbiA9IG51bGw7CiAJCQlvcmcuZWNsaXBzZS5qZHQuY29yZS5JQ29tcGlsYXRp
b25Vbml0IGN1ID0gY29udGV4dC5nZXRDb21waWxhdGlvblVuaXQoKTsKQEAgLTE0MDAsOCArMTM5
NCw3IEBACiAJCQkgCWZvciAoaW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKIAkJCQkJdG9w
TGV2ZWxJbmZvc1tpXSA9IChTb3VyY2VUeXBlRWxlbWVudEluZm8pICgoU291cmNlVHlwZSl0b3BM
ZXZlbFR5cGVzW2ldKS5nZXRFbGVtZW50SW5mbygpOwogCQkJCX0KLQkJCQlJU291cmNlVHlwZSBv
dXRlclR5cGVJbmZvID0gKElTb3VyY2VUeXBlKSAoKFNvdXJjZVR5cGUpIG91dGVyVHlwZSkuZ2V0
RWxlbWVudEluZm8oKTsKLQkJCQlDb21waWxhdGlvblJlc3VsdCByZXN1bHQgPSBuZXcgQ29tcGls
YXRpb25SZXN1bHQob3V0ZXJUeXBlSW5mby5nZXRGaWxlTmFtZSgpLCAxLCAxLCB0aGlzLmNvbXBp
bGVyT3B0aW9ucy5tYXhQcm9ibGVtc1BlclVuaXQpOworCQkJCUNvbXBpbGF0aW9uUmVzdWx0IHJl
c3VsdCA9IG5ldyBDb21waWxhdGlvblJlc3VsdCgob3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNv
bXBpbGVyLmVudi5JQ29tcGlsYXRpb25Vbml0KSBjdSwgMSwgMSwgdGhpcy5jb21waWxlck9wdGlv
bnMubWF4UHJvYmxlbXNQZXJVbml0KTsKIAkJCQlpbnQgZmxhZ3MgPSBTb3VyY2VUeXBlQ29udmVy
dGVyLkZJRUxEX0FORF9NRVRIT0QgfCBTb3VyY2VUeXBlQ29udmVydGVyLk1FTUJFUl9UWVBFOwog
CQkJCWlmIChjb250ZXh0LmlzQW5vbnltb3VzKCkgfHwgY29udGV4dC5pc0xvY2FsKCkpCiAJCQkJ
CWZsYWdzIHw9IFNvdXJjZVR5cGVDb252ZXJ0ZXIuTE9DQUxfVFlQRTsKZGlmZiAtLWdpdCBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0ph
dmFFbGVtZW50LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29yZS9KYXZhRWxlbWVudC5qYXZhCmluZGV4IDlmZDJkNDcuLjljOTczZTEg
MTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb3JlL0phdmFFbGVtZW50LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
bW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvSmF2YUVsZW1lbnQuamF2YQpAQCAt
NjksNiArNjksNyBAQAogCXB1YmxpYyBzdGF0aWMgZmluYWwgY2hhciBKRU1fTE9DQUxWQVJJQUJM
RSA9ICdAJzsKIAlwdWJsaWMgc3RhdGljIGZpbmFsIGNoYXIgSkVNX1RZUEVfUEFSQU1FVEVSID0g
J10nOwogCXB1YmxpYyBzdGF0aWMgZmluYWwgY2hhciBKRU1fQU5OT1RBVElPTiA9ICd9JzsKKwlw
dWJsaWMgc3RhdGljIGZpbmFsIGNoYXIgSkVNX0xBTUJEQV9FWFBSRVNTSU9OID0gJz4nOwogCiAJ
LyoqCiAJICogVGhpcyBlbGVtZW50J3MgcGFyZW50LCBvciA8Y29kZT5udWxsPC9jb2RlPiBpZiB0
aGlzCkBAIC0xNDksNiArMTUwLDcgQEAKIAkJCQljYXNlIEpFTV9MT0NBTFZBUklBQkxFOgogCQkJ
CWNhc2UgSkVNX1RZUEVfUEFSQU1FVEVSOgogCQkJCWNhc2UgSkVNX0FOTk9UQVRJT046CisJCQkJ
Y2FzZSBKRU1fTEFNQkRBX0VYUFJFU1NJT046CiAJCQkJCWJ1ZmZlci5hcHBlbmQoSkVNX0VTQ0FQ
RSk7CiAJCQl9CiAJCQlidWZmZXIuYXBwZW5kKGNoYXJhY3Rlcik7CmRpZmYgLS1naXQgYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9MYW1i
ZGFFeHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29yZS9MYW1iZGFFeHByZXNzaW9uLmphdmEKaW5kZXggYzA2MWQwYS4u
YzM1ZDkzYyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvcmUvTGFtYmRhRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0xhbWJkYUV4
cHJlc3Npb24uamF2YQpAQCAtODAsMTIgKzgwLDE2IEBACiAJcHVibGljIGludCBnZXRFbGVtZW50
VHlwZSgpIHsKIAkJcmV0dXJuIFRZUEU7CiAJfQotCisJCiAJQE92ZXJyaWRlCiAJcHVibGljIFN0
cmluZyBnZXRIYW5kbGVJZGVudGlmaWVyKCkgewotCQlyZXR1cm4gbnVsbDsgLy8gVE9ETworCQly
ZXR1cm4gc3VwZXIuZ2V0SGFuZGxlSWRlbnRpZmllcigpOwogCX0KLQorCQorCXByb3RlY3RlZCBj
aGFyIGdldEhhbmRsZU1lbWVudG9EZWxpbWl0ZXIoKSB7CisJCXJldHVybiBKYXZhRWxlbWVudC5K
RU1fTEFNQkRBX0VYUFJFU1NJT047CisJfQorCQogCUBPdmVycmlkZQogCXB1YmxpYyBib29sZWFu
IGlzUmVhZE9ubHkoKSB7CiAJCXJldHVybiB0cnVlOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvU2VsZWN0aW9uUmVx
dWVzdG9yLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29yZS9TZWxlY3Rpb25SZXF1ZXN0b3IuamF2YQppbmRleCBmMjI0NjY4Li5kZTM5
NjZjIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29yZS9TZWxlY3Rpb25SZXF1ZXN0b3IuamF2YQorKysgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9TZWxlY3Rpb25S
ZXF1ZXN0b3IuamF2YQpAQCAtMTUsNiArMTUsOCBAQAogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29yZTsKIAogaW1wb3J0IGphdmEudXRpbC5BcnJheUxpc3Q7CitpbXBvcnQgamF2
YS51dGlsLkhhc2hNYXA7CitpbXBvcnQgamF2YS51dGlsLkhhc2hTZXQ7CiAKIGltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuY29yZS5GbGFnczsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5JQ29t
cGlsYXRpb25Vbml0OwpAQCAtNDQ0LDkgKzQ0NiwxNiBAQAogCQl9CiAJfQogfQotcHVibGljIHZv
aWQgYWNjZXB0TG9jYWxWYXJpYWJsZShMb2NhbFZhcmlhYmxlQmluZGluZyBiaW5kaW5nKSB7Citw
dWJsaWMgdm9pZCBhY2NlcHRMb2NhbFZhcmlhYmxlKExvY2FsVmFyaWFibGVCaW5kaW5nIGJpbmRp
bmcsIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5lbnYuSUNvbXBpbGF0aW9uVW5p
dCB1bml0KSB7CiAJTG9jYWxEZWNsYXJhdGlvbiBsb2NhbCA9IGJpbmRpbmcuZGVjbGFyYXRpb247
Ci0JSUphdmFFbGVtZW50IHBhcmVudCA9IGZpbmRMb2NhbEVsZW1lbnQobG9jYWwuc291cmNlU3Rh
cnQpOyAvLyBmaW5kTG9jYWxFbGVtZW50KCkgY2Fubm90IGZpbmQgbG9jYWwgdmFyaWFibGUKKwlJ
SmF2YUVsZW1lbnQgcGFyZW50ID0gbnVsbDsKKwlpZiAoYmluZGluZy5kZWNsYXJpbmdTY29wZS5p
c0xhbWJkYVN1YnNjb3BlKCkgJiYgdW5pdCBpbnN0YW5jZW9mIElDb21waWxhdGlvblVuaXQpIHsK
KwkJSGFzaFNldCBleGlzdGluZ0VsZW1lbnRzID0gbmV3IEhhc2hTZXQoKTsKKwkJSGFzaE1hcCBr
bm93blNjb3BlcyA9IG5ldyBIYXNoTWFwKCk7CisJCXBhcmVudCA9IHRoaXMuaGFuZGxlRmFjdG9y
eS5jcmVhdGVFbGVtZW50KGJpbmRpbmcuZGVjbGFyaW5nU2NvcGUsIGxvY2FsLnNvdXJjZVN0YXJ0
LCAoSUNvbXBpbGF0aW9uVW5pdCkgdW5pdCwgZXhpc3RpbmdFbGVtZW50cywga25vd25TY29wZXMp
OworCX0gZWxzZSB7CQkKKwkJcGFyZW50ID0gZmluZExvY2FsRWxlbWVudChsb2NhbC5zb3VyY2VT
dGFydCk7IC8vIGZpbmRMb2NhbEVsZW1lbnQoKSBjYW5ub3QgZmluZCBsb2NhbCB2YXJpYWJsZQor
CX0KIAlMb2NhbFZhcmlhYmxlIGxvY2FsVmFyID0gbnVsbDsKIAlpZihwYXJlbnQgIT0gbnVsbCkg
ewogCQlsb2NhbFZhciA9IG5ldyBMb2NhbFZhcmlhYmxlKApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvdXRpbC9IYW5k
bGVGYWN0b3J5LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29yZS91dGlsL0hhbmRsZUZhY3RvcnkuamF2YQppbmRleCA1YmQ0M2UwLi4w
MTUyZDdiIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29yZS91dGlsL0hhbmRsZUZhY3RvcnkuamF2YQorKysgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS91dGlsL0hh
bmRsZUZhY3RvcnkuamF2YQpAQCAtMTczLDcgKzE3Myw3IEBACiAJLyoqCiAJICogQ3JlYXRlIGhh
bmRsZSBieSBhZGRpbmcgY2hpbGQgdG8gcGFyZW50IG9idGFpbmVkIGJ5IHJlY3Vyc2luZyBpbnRv
IHBhcmVudCBzY29wZXMuCiAJICovCi0JcHJpdmF0ZSBJSmF2YUVsZW1lbnQgY3JlYXRlRWxlbWVu
dChTY29wZSBzY29wZSwgaW50IGVsZW1lbnRQb3NpdGlvbiwgSUNvbXBpbGF0aW9uVW5pdCB1bml0
LCBIYXNoU2V0IGV4aXN0aW5nRWxlbWVudHMsIEhhc2hNYXAga25vd25TY29wZXMpIHsKKwlwdWJs
aWMgSUphdmFFbGVtZW50IGNyZWF0ZUVsZW1lbnQoU2NvcGUgc2NvcGUsIGludCBlbGVtZW50UG9z
aXRpb24sIElDb21waWxhdGlvblVuaXQgdW5pdCwgSGFzaFNldCBleGlzdGluZ0VsZW1lbnRzLCBI
YXNoTWFwIGtub3duU2NvcGVzKSB7CiAJCUlKYXZhRWxlbWVudCBuZXdFbGVtZW50ID0gKElKYXZh
RWxlbWVudClrbm93blNjb3Blcy5nZXQoc2NvcGUpOwogCQlpZiAobmV3RWxlbWVudCAhPSBudWxs
KSByZXR1cm4gbmV3RWxlbWVudDsKIA==
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>240462</attachid>
            <date>2014-03-03 09:31:00 -0500</date>
            <delta_ts>2014-03-03 09:31:20 -0500</delta_ts>
            <desc>Patch ready for review.</desc>
            <filename>Patch-for-review.patch</filename>
            <type>text/plain</type>
            <size>53950</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9tb2RlbC9BYnN0cmFjdEphdmFTZWFyY2hUZXN0cy5qYXZhIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L3Rlc3RzL21vZGVsL0Fic3RyYWN0SmF2YVNlYXJjaFRlc3RzLmphdmEKaW5kZXggNTVjMzk3OS4u
MjRlMmM4NCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3Jj
L29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21vZGVsL0Fic3RyYWN0SmF2YVNlYXJjaFRlc3Rz
LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xp
cHNlL2pkdC9jb3JlL3Rlc3RzL21vZGVsL0Fic3RyYWN0SmF2YVNlYXJjaFRlc3RzLmphdmEKQEAg
LTI3LDYgKzI3LDcgQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
RXh0cmFGbGFnczsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuZW52
LkFjY2Vzc1Jlc3RyaWN0aW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21w
aWxlci5wcm9ibGVtLkFib3J0Q29tcGlsYXRpb25Vbml0OworaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5pbnRlcm5hbC5jb3JlLkxhbWJkYUV4cHJlc3Npb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmludGVybmFsLmNvcmUuTWVtYmVyOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b3JlLlBhY2thZ2VGcmFnbWVudDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29y
ZS5Tb3VyY2VSZWZFbGVtZW50OwpAQCAtNTI5LDEwICs1MzAsMTAgQEAKIAkJCX0gZWxzZSB7CiAJ
CQkJdGhpcy5saW5lLmFwcGVuZCh0eXBlTmFtZSk7CiAJCQl9Ci0JCQlpZiAoaXNMb2NhbCkgewor
CQkJaWYgKGlzTG9jYWwgJiYgISh0eXBlIGluc3RhbmNlb2YgTGFtYmRhRXhwcmVzc2lvbikpIHsg
Ly8gZG9uJ3Qgd2FudCBvY2N1cnJlbmNlIGNvdW50cyBmb3IgbGFtYmRhcy4gaXQgY2FuIGJlIGNv
bmZ1c2luZyBhdCBiZXN0LCBhcyBub3QgYWxsIGFyZSBidWlsdC4KIAkJCQl0aGlzLmxpbmUuYXBw
ZW5kKCIjIik7CiAJCQkJdGhpcy5saW5lLmFwcGVuZCgoKFNvdXJjZVJlZkVsZW1lbnQpdHlwZSku
b2NjdXJyZW5jZUNvdW50KTsKLQkJCX0KKwkJCX0gCiAJCX0KIAkJcHJvdGVjdGVkIElKYXZhRWxl
bWVudCBnZXRFbGVtZW50KFNlYXJjaE1hdGNoIHNlYXJjaE1hdGNoKSB7CiAJCQlyZXR1cm4gKElK
YXZhRWxlbWVudCkgc2VhcmNoTWF0Y2guZ2V0RWxlbWVudCgpOwpkaWZmIC0tZ2l0IGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3Rz
L21vZGVsL0phdmFTZWFyY2hCdWdzOFRlc3RzLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50
ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvbW9kZWwvSmF2YVNlYXJj
aEJ1Z3M4VGVzdHMuamF2YQppbmRleCAwNzIwZDMyLi4wMjhlN2FiIDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVz
dHMvbW9kZWwvSmF2YVNlYXJjaEJ1Z3M4VGVzdHMuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvbW9kZWwvSmF2
YVNlYXJjaEJ1Z3M4VGVzdHMuamF2YQpAQCAtMjQ0NCw4ICsyNDQ0LDggQEAKIAlzZWFyY2gobWV0
aG9kLCBERUNMQVJBVElPTlMsIEVYQUNUX1JVTEUpOwogCWFzc2VydFNlYXJjaFJlc3VsdHMoCiAJ
CQkic3JjL2I0MDA5MDUvWC5qYXZhIGludCBiNDAwOTA1LkkuZm9vKCkgW2Zvb10gRVhBQ1RfTUFU
Q0hcbiIgKwotCQkJInNyYy9iNDAwOTA1L1guamF2YSBpbnQgdm9pZCBiNDAwOTA1LlgubWFpbihT
dHJpbmdbXSk6PGxhbWJkYT4jMS5sYW1iZGEkMSgpIFsoKSAtPl0gRVhBQ1RfTUFUQ0hcbiIgKwkJ
CQotCQkJInNyYy9iNDAwOTA1L1guamF2YSBpbnQgdm9pZCBiNDAwOTA1LlguZG9pdCgpOjxsYW1i
ZGE+IzIubGFtYmRhJDIoKSBbKCkgLT5dIEVYQUNUX01BVENIIik7CQorCQkJInNyYy9iNDAwOTA1
L1guamF2YSBpbnQgdm9pZCBiNDAwOTA1LlgubWFpbihTdHJpbmdbXSk6TGFtYmRhKEkpLmZvbygp
IFsoKSAtPl0gRVhBQ1RfTUFUQ0hcbiIgKwkJCQorCQkJInNyYy9iNDAwOTA1L1guamF2YSBpbnQg
dm9pZCBiNDAwOTA1LlguZG9pdCgpOkxhbWJkYShJKS5mb28oKSBbKCkgLT5dIEVYQUNUX01BVENI
Iik7CQogfQogLyoqCiAgKiBAYnVnIDQwMDkwNQpAQCAtMjQ4NSwxMCArMjQ4NSwxMCBAQAogCXNl
YXJjaChtZXRob2QsIERFQ0xBUkFUSU9OUywgRVhBQ1RfUlVMRSk7CiAJYXNzZXJ0U2VhcmNoUmVz
dWx0cygKIAkJCSJzcmMvYjQwMDkwNS9JLmphdmEgaW50IGI0MDA5MDUuSS5mb28oKSBbZm9vXSBF
WEFDVF9NQVRDSFxuIiArIAotCQkJInNyYy9iNDAwOTA1L1guamF2YSBpbnQgdm9pZCBiNDAwOTA1
LlgubWFpbihTdHJpbmdbXSk6PGxhbWJkYT4jMS5sYW1iZGEkMSgpIFsoKSAtPl0gRVhBQ1RfTUFU
Q0hcbiIgKyAKLQkJCSJzcmMvYjQwMDkwNS9YLmphdmEgaW50IHZvaWQgYjQwMDkwNS5YLm1haW4o
U3RyaW5nW10pOjxsYW1iZGE+IzIubGFtYmRhJDIoKSBbKCkgIC0+XSBFWEFDVF9NQVRDSFxuIiAr
IAotCQkJInNyYy9iNDAwOTA1L1guamF2YSBpbnQgdm9pZCBiNDAwOTA1LlgubWFpbihTdHJpbmdb
XSk6PGxhbWJkYT4jMy5sYW1iZGEkMygpIFsoKS0+XSBFWEFDVF9NQVRDSFxuIiArIAotCQkJInNy
Yy9iNDAwOTA1L1guamF2YSBpbnQgSSBiNDAwOTA1LlguYmFyKCk6PGxhbWJkYT4jNC5sYW1iZGEk
NCgpIFsoKSAtPl0gRVhBQ1RfTUFUQ0giKTsJCisJCQkic3JjL2I0MDA5MDUvWC5qYXZhIGludCB2
b2lkIGI0MDA5MDUuWC5tYWluKFN0cmluZ1tdKTpMYW1iZGEoSSkuZm9vKCkgWygpIC0+XSBFWEFD
VF9NQVRDSFxuIiArIAorCQkJInNyYy9iNDAwOTA1L1guamF2YSBpbnQgdm9pZCBiNDAwOTA1Llgu
bWFpbihTdHJpbmdbXSk6TGFtYmRhKEkpLmZvbygpIFsoKSAgLT5dIEVYQUNUX01BVENIXG4iICsg
CisJCQkic3JjL2I0MDA5MDUvWC5qYXZhIGludCB2b2lkIGI0MDA5MDUuWC5tYWluKFN0cmluZ1td
KTpMYW1iZGEoSSkuZm9vKCkgWygpLT5dIEVYQUNUX01BVENIXG4iICsgCisJCQkic3JjL2I0MDA5
MDUvWC5qYXZhIGludCBJIGI0MDA5MDUuWC5iYXIoKTpMYW1iZGEoSSkuZm9vKCkgWygpIC0+XSBF
WEFDVF9NQVRDSCIpOwkKIH0KIC8qKgogICogQGJ1ZyA0MDA5MDUKQEAgLTI1MjIsOSArMjUyMiw5
IEBACiAJc2VhcmNoKG1ldGhvZCwgREVDTEFSQVRJT05TLCBFWEFDVF9SVUxFKTsKIAlhc3NlcnRT
ZWFyY2hSZXN1bHRzKAogCQkJInNyYy9iNDAwOTA1L0kuamF2YSBib29sZWFuIGI0MDA5MDUuSS5m
b28oWSkgW2Zvb10gRVhBQ1RfTUFUQ0hcbiIgKyAKLQkJCSJzcmMvYjQwMDkwNS9YLmphdmEgYm9v
bGVhbiB2b2lkIGI0MDA5MDUuWC5tYWluKFN0cmluZ1tdKTo8bGFtYmRhPiMxLmxhbWJkYSQxKGI0
MDA5MDUvWSkgW3ktPl0gRVhBQ1RfTUFUQ0hcbiIgKyAKLQkJCSJzcmMvYjQwMDkwNS9YLmphdmEg
Ym9vbGVhbiB2b2lkIGI0MDA5MDUuWC5tYWluKFN0cmluZ1tdKTo8bGFtYmRhPiMyLmxhbWJkYSQy
KGI0MDA5MDUvWSkgW3kgLT5dIEVYQUNUX01BVENIXG4iICsgCi0JCQkic3JjL2I0MDA5MDUvWC5q
YXZhIGJvb2xlYW4gdm9pZCBiNDAwOTA1LlgubWFpbihTdHJpbmdbXSk6PGxhbWJkYT4jMy5sYW1i
ZGEkMyhiNDAwOTA1L1kpIFt5ICAtPl0gRVhBQ1RfTUFUQ0giCisJCQkic3JjL2I0MDA5MDUvWC5q
YXZhIGJvb2xlYW4gdm9pZCBiNDAwOTA1LlgubWFpbihTdHJpbmdbXSk6TGFtYmRhKEkpLmZvbyhi
NDAwOTA1L1kpIFt5LT5dIEVYQUNUX01BVENIXG4iICsgCisJCQkic3JjL2I0MDA5MDUvWC5qYXZh
IGJvb2xlYW4gdm9pZCBiNDAwOTA1LlgubWFpbihTdHJpbmdbXSk6TGFtYmRhKEkpLmZvbyhiNDAw
OTA1L1kpIFt5IC0+XSBFWEFDVF9NQVRDSFxuIiArIAorCQkJInNyYy9iNDAwOTA1L1guamF2YSBi
b29sZWFuIHZvaWQgYjQwMDkwNS5YLm1haW4oU3RyaW5nW10pOkxhbWJkYShJKS5mb28oYjQwMDkw
NS9ZKSBbeSAgLT5dIEVYQUNUX01BVENIIgogCSk7CQogfQogLyoqCmRpZmYgLS1naXQgYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVz
dHMvbW9kZWwvTWVtZW50b1Rlc3RzLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5t
b2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvbW9kZWwvTWVtZW50b1Rlc3RzLmph
dmEKaW5kZXggMzIyMmJiOS4uZWJmNzAxNCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21vZGVsL01lbWVu
dG9UZXN0cy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9v
cmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9tb2RlbC9NZW1lbnRvVGVzdHMuamF2YQpAQCAtMSwx
MCArMSwxNCBAQAogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAw
MCwgMjAxMCBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAw
MCwgMjAxNCBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2
ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBt
YWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vu
c2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBh
dmFpbGFibGUgYXQKICAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1s
CiAgKgorICogVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBhbiBlYXJseS1kcmFmdCBzcGVj
aWZpY2F0aW9uIGRldmVsb3BlZCB1bmRlciB0aGUgSmF2YQorICogQ29tbXVuaXR5IFByb2Nlc3Mg
KEpDUCkgYW5kIGlzIG1hZGUgYXZhaWxhYmxlIGZvciB0ZXN0aW5nIGFuZCBldmFsdWF0aW9uIHB1
cnBvc2VzCisgKiBvbmx5LiBUaGUgY29kZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGFueSBzcGVj
aWZpY2F0aW9uIG9mIHRoZSBKQ1AuCisgKiAKICAqIENvbnRyaWJ1dG9yczoKICAqICAgICBJQk0g
Q29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24KICAqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqLwpAQCAtMjUxLDcgKzI1NSw3IEBACiAJSVR5cGUgdHlwZSA9IGdldENsYXNz
RmlsZSgiL1AvbGliL3AvWC5jbGFzcyIpLmdldFR5cGUoKTsKIAlJTWV0aG9kIG1ldGhvZCA9IHR5
cGUuZ2V0TWV0aG9kKCJmb28iLCBuZXcgU3RyaW5nW10geyJMamF2YS51dGlsLkNvbGxlY3Rpb248
Kj47In0pOwogCWFzc2VydE1lbWVudG8oCi0JCSI9UC9saWI8cChYLmNsYXNzW1h+Zm9vfkxqYXZh
LnV0aWwuQ29sbGVjdGlvblxcPCo+OyIsCisJCSI9UC9saWI8cChYLmNsYXNzW1h+Zm9vfkxqYXZh
LnV0aWwuQ29sbGVjdGlvblxcPCpcXD47IiwKIAkJbWV0aG9kKTsKIH0KIApkaWZmIC0tZ2l0IGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L3Rlc3RzL21vZGVsL1Jlc29sdmVUZXN0czE4LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50
ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvbW9kZWwvUmVzb2x2ZVRl
c3RzMTguamF2YQppbmRleCBlOGMzNDUxLi4zZjgwMTEwIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvbW9k
ZWwvUmVzb2x2ZVRlc3RzMTguamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5t
b2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvbW9kZWwvUmVzb2x2ZVRlc3RzMTgu
amF2YQpAQCAtNzE4LDcgKzcxOCw3IEBACiAJSUphdmFFbGVtZW50W10gZWxlbWVudHMgPSB0aGlz
LndjLmNvZGVTZWxlY3Qoc3RhcnQsIGxlbmd0aCk7CiAJYXNzZXJ0RWxlbWVudHNFcXVhbCgKIAkJ
IlVuZXhwZWN0ZWQgZWxlbWVudHMiLAotCQkieHl6IFtpbiBmb28oKSBbaW4gWCBbaW4gW1dvcmtp
bmcgY29weV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXSIs
CisJCSJ4eXogW2luIGZvbyhpbnQpIFtpbiA8bGFtYmRhPiBbaW4gZm9vKCkgW2luIFggW2luIFtX
b3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2luIFJlc29sdmVdXV1d
XV1dXSIsCiAJCWVsZW1lbnRzCiAJKTsKIH0KQEAgLTc0Myw3ICs3NDMsNyBAQAogCUlKYXZhRWxl
bWVudFtdIGVsZW1lbnRzID0gdGhpcy53Yy5jb2RlU2VsZWN0KHN0YXJ0LCBsZW5ndGgpOwogCWFz
c2VydEVsZW1lbnRzRXF1YWwoCiAJCSJVbmV4cGVjdGVkIGVsZW1lbnRzIiwKLQkJImFiYyBbaW4g
Zm9vKCkgW2luIFggW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBz
cmMgW2luIFJlc29sdmVdXV1dXV0iLAorCQkiYWJjIFtpbiBmb28oaW50KSBbaW4gPGxhbWJkYT4g
W2luIGZvbygpIFtpbiBYIFtpbiBbV29ya2luZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBb
aW4gc3JjIFtpbiBSZXNvbHZlXV1dXV1dXV0iLAogCQllbGVtZW50cwogCSk7CiB9CkBAIC03NjYs
NyArNzY2LDcgQEAKIAlJSmF2YUVsZW1lbnRbXSBlbGVtZW50cyA9IHRoaXMud2MuY29kZVNlbGVj
dChzdGFydCwgbGVuZ3RoKTsKIAlhc3NlcnRFbGVtZW50c0VxdWFsKAogCQkiVW5leHBlY3RlZCBl
bGVtZW50cyIsCi0JCSJhYmMgW2luIGkgW2luIFggW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBb
aW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV0iLAorCQkiYWJjIFtpbiBmb28o
aW50KSBbaW4gPGxhbWJkYT4gW2luIGkgW2luIFggW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBb
aW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV1dXSIsCiAJCWVsZW1lbnRzCiAJ
KTsKIH0KQEAgLTc5NCw3ICs3OTQsNyBAQAogCUlKYXZhRWxlbWVudFtdIGVsZW1lbnRzID0gdGhp
cy53Yy5jb2RlU2VsZWN0KHN0YXJ0LCBsZW5ndGgpOwogCWFzc2VydEVsZW1lbnRzRXF1YWwoCiAJ
CSJVbmV4cGVjdGVkIGVsZW1lbnRzIiwKLQkJImFiYyBbaW4gbWFpbihTdHJpbmdbXSkgW2luIFgg
W2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2luIFJlc29s
dmVdXV1dXV0iLAorCQkiYWJjIFtpbiBkb2l0KEkpIFtpbiA8bGFtYmRhPiMzIFtpbiBkb2l0KEkp
IFtpbiA8bGFtYmRhPiMyIFtpbiBkb2l0KEkpIFtpbiA8bGFtYmRhPiBbaW4gbWFpbihTdHJpbmdb
XSkgW2luIFggW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMg
W2luIFJlc29sdmVdXV1dXV1dXV1dXV0iLAogCQllbGVtZW50cwogCSk7CiB9CkBAIC04MjIsNyAr
ODIyLDcgQEAKIAlJSmF2YUVsZW1lbnRbXSBlbGVtZW50cyA9IHRoaXMud2MuY29kZVNlbGVjdChz
dGFydCwgbGVuZ3RoKTsKIAlhc3NlcnRFbGVtZW50c0VxdWFsKAogCQkiVW5leHBlY3RlZCBlbGVt
ZW50cyIsCi0JCSJ4eXogW2luIG1haW4oU3RyaW5nW10pIFtpbiBYIFtpbiBbV29ya2luZyBjb3B5
XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1dXV1dIiwKKwkJInh5
eiBbaW4gZG9pdChJKSBbaW4gPGxhbWJkYT4jMiBbaW4gZG9pdChJKSBbaW4gPGxhbWJkYT4gW2lu
IG1haW4oU3RyaW5nW10pIFtpbiBYIFtpbiBbV29ya2luZyBjb3B5XSBYLmphdmEgW2luIDxkZWZh
dWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1dXV1dXV1dXSIsCiAJCWVsZW1lbnRzCiAJKTsKIH0K
QEAgLTg4OCw3ICs4ODgsNyBAQAogCUlKYXZhRWxlbWVudFtdIGVsZW1lbnRzID0gdGhpcy53Yy5j
b2RlU2VsZWN0KHN0YXJ0LCBsZW5ndGgpOwogCWFzc2VydEVsZW1lbnRzRXF1YWwoCiAJCSJVbmV4
cGVjdGVkIGVsZW1lbnRzIiwKLQkJInp5eCBbaW4gZnggW2luIFggW2luIFtXb3JraW5nIGNvcHld
IFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV0iLAorCQkienl4
IFtpbiBkb2l0KEkpIFtpbiA8bGFtYmRhPiM0IFtpbiBkb2l0KEkpIFtpbiA8bGFtYmRhPiMzIFtp
biBmeCBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNy
YyBbaW4gUmVzb2x2ZV1dXV1dXV1dXV0iLAogCQllbGVtZW50cwogCSk7CiB9CkBAIC05MjEsNyAr
OTIxLDcgQEAKIAlJSmF2YUVsZW1lbnRbXSBlbGVtZW50cyA9IHRoaXMud2MuY29kZVNlbGVjdChz
dGFydCwgbGVuZ3RoKTsKIAlhc3NlcnRFbGVtZW50c0VxdWFsKAogCQkiVW5leHBlY3RlZCBlbGVt
ZW50cyIsCi0JCSJ4eXogW2luIG1haW4oU3RyaW5nW10pIFtpbiBYIFtpbiBbV29ya2luZyBjb3B5
XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1dXV1dIiwKKwkJInh5
eiBbaW4gZG9pdChJKSBbaW4gPGxhbWJkYT4jNCBbaW4gZG9pdChJKSBbaW4gPGxhbWJkYT4jMyBb
aW4gbWFpbihTdHJpbmdbXSkgW2luIFggW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRl
ZmF1bHQ+IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV1dXV1dIiwKIAkJZWxlbWVudHMKIAkpOwog
fQpAQCAtOTU2LDcgKzk1Niw3IEBACiAJSUphdmFFbGVtZW50W10gZWxlbWVudHMgPSB0aGlzLndj
LmNvZGVTZWxlY3Qoc3RhcnQsIGxlbmd0aCk7CiAJYXNzZXJ0RWxlbWVudHNFcXVhbCgKIAkJIlVu
ZXhwZWN0ZWQgZWxlbWVudHMiLAotCQkiaGlqIFtpbiBtYWluKFN0cmluZ1tdKSBbaW4gWCBbaW4g
W1dvcmtpbmcgY29weV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1d
XV1dXSIsCisJCSJoaWogW2luIGRvaXQoSSkgW2luIDxsYW1iZGE+IzMgW2luIGRvaXQoSSkgW2lu
IDxsYW1iZGE+IzIgW2luIG1haW4oU3RyaW5nW10pIFtpbiBYIFtpbiBbV29ya2luZyBjb3B5XSBY
LmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1dXV1dXV1dXSIsCiAJCWVs
ZW1lbnRzCiAJKTsKIH0KQEAgLTk5Miw3ICs5OTIsNyBAQAogCUlKYXZhRWxlbWVudFtdIGVsZW1l
bnRzID0gdGhpcy53Yy5jb2RlU2VsZWN0KHN0YXJ0LCBsZW5ndGgpOwogCWFzc2VydEVsZW1lbnRz
RXF1YWwoCiAJCSJVbmV4cGVjdGVkIGVsZW1lbnRzIiwKLQkJImhpaiBbaW4gbWFpbihTdHJpbmdb
XSkgW2luIFggW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMg
W2luIFJlc29sdmVdXV1dXV0iLAorCQkiaGlqIFtpbiBkb2l0KEkpIFtpbiA8bGFtYmRhPiMzIFtp
biBkb2l0KEkpIFtpbiA8bGFtYmRhPiMyIFtpbiBtYWluKFN0cmluZ1tdKSBbaW4gWCBbaW4gW1dv
cmtpbmcgY29weV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1d
XV1dXV0iLAogCQllbGVtZW50cwogCSk7CiB9CkBAIC0xNDMxLDcgKzE0MzEsNyBAQAogCUlKYXZh
RWxlbWVudFtdIGVsZW1lbnRzID0gdGhpcy53Yy5jb2RlU2VsZWN0KHN0YXJ0LCBsZW5ndGgpOwog
CWFzc2VydEVsZW1lbnRzRXF1YWwoCiAJCSJVbmV4cGVjdGVkIGVsZW1lbnRzIiwKLQkJImZpcnN0
IFtpbiBpIFtpbiBYIFtpbiBbV29ya2luZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4g
c3JjIFtpbiBSZXNvbHZlXV1dXV1dIiwKKwkJImZpcnN0IFtpbiBmb28oaW50LCBpbnQpIFtpbiA8
bGFtYmRhPiBbaW4gaSBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0gWC5qYXZhIFtpbiA8ZGVmYXVs
dD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXV1dIiwKIAkJZWxlbWVudHMKIAkpOwogfQpAQCAt
MTQ1NCw3ICsxNDU0LDcgQEAKIAlJSmF2YUVsZW1lbnRbXSBlbGVtZW50cyA9IHRoaXMud2MuY29k
ZVNlbGVjdChzdGFydCwgbGVuZ3RoKTsKIAlhc3NlcnRFbGVtZW50c0VxdWFsKAogCQkiVW5leHBl
Y3RlZCBlbGVtZW50cyIsCi0JCSJmaXJzdCBbaW4gaSBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0g
WC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXSIsCisJCSJmaXJz
dCBbaW4gZm9vKFgsIGphdmEvbGFuZy9PYmplY3QpIFtpbiA8bGFtYmRhPiBbaW4gaSBbaW4gWCBb
aW4gW1dvcmtpbmcgY29weV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2
ZV1dXV1dXV1dIiwKIAkJZWxlbWVudHMKIAkpOwogfQpAQCAtMTQ3Nyw3ICsxNDc3LDcgQEAKIAlJ
SmF2YUVsZW1lbnRbXSBlbGVtZW50cyA9IHRoaXMud2MuY29kZVNlbGVjdChzdGFydCwgbGVuZ3Ro
KTsKIAlhc3NlcnRFbGVtZW50c0VxdWFsKAogCQkiVW5leHBlY3RlZCBlbGVtZW50cyIsCi0JCSJz
ZWNvbmQgW2luIGkgW2luIFggW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1bHQ+
IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV0iLAorCQkic2Vjb25kIFtpbiBmb28oWCwgamF2YS9s
YW5nL09iamVjdCkgW2luIDxsYW1iZGE+IFtpbiBpIFtpbiBYIFtpbiBbV29ya2luZyBjb3B5XSBY
LmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1dXV1dXV0iLAogCQllbGVt
ZW50cwogCSk7CiB9CkBAIC0xNTAzLDcgKzE1MDMsNyBAQAogCUlKYXZhRWxlbWVudFtdIGVsZW1l
bnRzID0gdGhpcy53Yy5jb2RlU2VsZWN0KHN0YXJ0LCBsZW5ndGgpOwogCWFzc2VydEVsZW1lbnRz
RXF1YWwoCiAJCSJVbmV4cGVjdGVkIGVsZW1lbnRzIiwKLQkJInkgW2luIG1haW4oU3RyaW5nW10p
IFtpbiBYIFtpbiBbV29ya2luZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtp
biBSZXNvbHZlXV1dXV1dIiwKKwkJInkgW2luIGZvbyhJKSBbaW4gPGxhbWJkYT4jNSBbaW4gZm9v
KEkpIFtpbiA8bGFtYmRhPiM0IFtpbiBtYWluKFN0cmluZ1tdKSBbaW4gWCBbaW4gW1dvcmtpbmcg
Y29weV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXV1dXV0i
LAogCQllbGVtZW50cwogCSk7CiB9CkBAIC0xNTI5LDcgKzE1MjksNyBAQAogCUlKYXZhRWxlbWVu
dFtdIGVsZW1lbnRzID0gdGhpcy53Yy5jb2RlU2VsZWN0KHN0YXJ0LCBsZW5ndGgpOwogCWFzc2Vy
dEVsZW1lbnRzRXF1YWwoCiAJCSJVbmV4cGVjdGVkIGVsZW1lbnRzIiwKLQkJInkgW2luIG1haW4o
U3RyaW5nW10pIFtpbiBYIFtpbiBbV29ya2luZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBb
aW4gc3JjIFtpbiBSZXNvbHZlXV1dXV1dIiwKKwkJInkgW2luIGZvbyhJKSBbaW4gPGxhbWJkYT4j
NSBbaW4gZm9vKEkpIFtpbiA8bGFtYmRhPiM0IFtpbiBtYWluKFN0cmluZ1tdKSBbaW4gWCBbaW4g
W1dvcmtpbmcgY29weV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1d
XV1dXV1dXV0iLAogCQllbGVtZW50cwogCSk7CiB9CkBAIC0xNTkzLDcgKzE1OTMsNyBAQAogCUlK
YXZhRWxlbWVudFtdIGVsZW1lbnRzID0gdGhpcy53Yy5jb2RlU2VsZWN0KHN0YXJ0LCBsZW5ndGgp
OwogCWFzc2VydEVsZW1lbnRzRXF1YWwoCiAJCSJVbmV4cGVjdGVkIGVsZW1lbnRzIiwKLQkJInEg
W2luIG1haW4oU3RyaW5nW10pIFtpbiBYIFtpbiBbV29ya2luZyBjb3B5XSBYLmphdmEgW2luIDxk
ZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1dXV1dIiwKKwkJInEgW2luIGZvbyhqYXZhL2xh
bmcvU3RyaW5nLCBpbnQpIFtpbiA8bGFtYmRhPiMzIFtpbiBmb28oamF2YS9sYW5nL1N0cmluZywg
amF2YS9sYW5nL1N0cmluZykgW2luIDxsYW1iZGE+IzIgW2luIGZvbyhqYXZhL2xhbmcvU3RyaW5n
LCBqYXZhL2xhbmcvU3RyaW5nKSBbaW4gPGxhbWJkYT4gW2luIG1haW4oU3RyaW5nW10pIFtpbiBY
IFtpbiBbV29ya2luZyBjb3B5XSBYLmphdmEgW2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNv
bHZlXV1dXV1dXV1dXV1dIiwKIAkJZWxlbWVudHMKIAkpOwogfQpAQCAtMTYyOCw3ICsxNjI4LDcg
QEAKIAlJSmF2YUVsZW1lbnRbXSBlbGVtZW50cyA9IHRoaXMud2MuY29kZVNlbGVjdChzdGFydCwg
bGVuZ3RoKTsKIAlhc3NlcnRFbGVtZW50c0VxdWFsKAogCQkiVW5leHBlY3RlZCBlbGVtZW50cyIs
Ci0JCSJ4IFtpbiBtYWluKFN0cmluZ1tdKSBbaW4gWCBbaW4gW1dvcmtpbmcgY29weV0gWC5qYXZh
IFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXSIsCisJCSJ4IFtpbiBmb28o
amF2YS9sYW5nL1N0cmluZywgamF2YS9sYW5nL0ludGVnZXIpIFtpbiA8bGFtYmRhPiBbaW4gbWFp
bihTdHJpbmdbXSkgW2luIFggW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1bHQ+
IFtpbiBzcmMgW2luIFJlc29sdmVdXV1dXV1dXSIsCiAJCWVsZW1lbnRzCiAJKTsKIH0KQEAgLTE3
ODcsNyArMTc4Nyw3IEBACiAJSUphdmFFbGVtZW50W10gZWxlbWVudHMgPSB0aGlzLndjLmNvZGVT
ZWxlY3Qoc3RhcnQsIGxlbmd0aCk7CiAJYXNzZXJ0RWxlbWVudHNFcXVhbCgKIAkJIlVuZXhwZWN0
ZWQgZWxlbWVudHMiLAotCQkidjEgW2luIHByb2Nlc3NKYXIoUGF0aCkgW2luIEluc2lzdGVudENh
cHR1cmUgW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2lu
IFJlc29sdmVdXV1dXV0iLAorCQkidjEgW2luIGFwcGx5KGphdmEvbGFuZy9TdHJpbmcpIFtpbiA8
bGFtYmRhPiBbaW4gcHJvY2Vzc0phcihQYXRoKSBbaW4gSW5zaXN0ZW50Q2FwdHVyZSBbaW4gW1dv
cmtpbmcgY29weV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1d
XV1dIiwKIAkJZWxlbWVudHMsCiAJCXRydWUKIAkpOwpAQCAtMTg1Miw3ICsxODUyLDcgQEAKIAlJ
SmF2YUVsZW1lbnRbXSBlbGVtZW50cyA9IHRoaXMud2MuY29kZVNlbGVjdChzdGFydCwgbGVuZ3Ro
KTsKIAlhc3NlcnRFbGVtZW50c0VxdWFsKAogCQkiVW5leHBlY3RlZCBlbGVtZW50cyIsCi0JCSJ2
MiBbaW4gcHJvY2Vzc0phcihQYXRoKSBbaW4gSW5zaXN0ZW50Q2FwdHVyZSBbaW4gW1dvcmtpbmcg
Y29weV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXSIsCisJ
CSJ2MiBbaW4gYXBwbHkoamF2YS9sYW5nL1N0cmluZykgW2luIDxsYW1iZGE+IFtpbiBwcm9jZXNz
SmFyKFBhdGgpIFtpbiBJbnNpc3RlbnRDYXB0dXJlIFtpbiBbV29ya2luZyBjb3B5XSBYLmphdmEg
W2luIDxkZWZhdWx0PiBbaW4gc3JjIFtpbiBSZXNvbHZlXV1dXV1dXV0iLAogCQllbGVtZW50cywK
IAkJdHJ1ZQogCSk7CkBAIC0xOTE3LDcgKzE5MTcsNyBAQAogCUlKYXZhRWxlbWVudFtdIGVsZW1l
bnRzID0gdGhpcy53Yy5jb2RlU2VsZWN0KHN0YXJ0LCBsZW5ndGgpOwogCWFzc2VydEVsZW1lbnRz
RXF1YWwoCiAJCSJVbmV4cGVjdGVkIGVsZW1lbnRzIiwKLQkJInMxIFtpbiB3aXRoV2lsZGNhcmQo
U3RyZWFtPD8gZXh0ZW5kcyBTdHJpbmc+KSBbaW4gSW5zaXN0ZW50Q2FwdHVyZSBbaW4gW1dvcmtp
bmcgY29weV0gWC5qYXZhIFtpbiA8ZGVmYXVsdD4gW2luIHNyYyBbaW4gUmVzb2x2ZV1dXV1dXSIs
CisJCSJzMSBbaW4gYWNjZXB0KGphdmEvbGFuZy9TdHJpbmcpIFtpbiA8bGFtYmRhPiBbaW4gd2l0
aFdpbGRjYXJkKFN0cmVhbTw/IGV4dGVuZHMgU3RyaW5nPikgW2luIEluc2lzdGVudENhcHR1cmUg
W2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMgW2luIFJlc29s
dmVdXV1dXV1dXSIsCiAJCWVsZW1lbnRzLAogCQl0cnVlCiAJKTsKQEAgLTE5ODIsNyArMTk4Miw3
IEBACiAJSUphdmFFbGVtZW50W10gZWxlbWVudHMgPSB0aGlzLndjLmNvZGVTZWxlY3Qoc3RhcnQs
IGxlbmd0aCk7CiAJYXNzZXJ0RWxlbWVudHNFcXVhbCgKIAkJIlVuZXhwZWN0ZWQgZWxlbWVudHMi
LAotCQkiczIgW2luIHdpdGhvdXRXaWxkY2FyZChTdHJlYW08U3RyaW5nPikgW2luIEluc2lzdGVu
dENhcHR1cmUgW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBzcmMg
W2luIFJlc29sdmVdXV1dXV0iLAorCQkiczIgW2luIGFjY2VwdChqYXZhL2xhbmcvU3RyaW5nKSBb
aW4gPGxhbWJkYT4gW2luIHdpdGhvdXRXaWxkY2FyZChTdHJlYW08U3RyaW5nPikgW2luIEluc2lz
dGVudENhcHR1cmUgW2luIFtXb3JraW5nIGNvcHldIFguamF2YSBbaW4gPGRlZmF1bHQ+IFtpbiBz
cmMgW2luIFJlc29sdmVdXV1dXV1dXSIsCiAJCWVsZW1lbnRzLAogCQl0cnVlCiAJKTsKZGlmZiAt
LWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvZGVhc3Npc3Qvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvZGVhc3Npc3QvU2VsZWN0aW9uRW5naW5lLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb2RlYXNzaXN0L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb2RlYXNzaXN0L1NlbGVj
dGlvbkVuZ2luZS5qYXZhCmluZGV4IGM3NjlmMTEuLmQ0MjUyYjMgMTAwNjQ0Ci0tLSBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvZGVhc3Npc3Qvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvZGVh
c3Npc3QvU2VsZWN0aW9uRW5naW5lLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29k
ZWFzc2lzdC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29kZWFzc2lzdC9TZWxlY3Rpb25Fbmdp
bmUuamF2YQpAQCAtOTc3LDcgKzk3Nyw3IEBACiAJCQkJCQkJCQlTeXN0ZW0ub3V0LnByaW50bG4o
ZS5iaW5kaW5nLnRvU3RyaW5nKCkpOwogCQkJCQkJCQl9CiAJCQkJCQkJCS8vIGlmIG51bGwgdGhl
biB3ZSBmb3VuZCBhIHByb2JsZW0gaW4gdGhlIHNlbGVjdGlvbiBub2RlCi0JCQkJCQkJCXNlbGVj
dEZyb20oZS5iaW5kaW5nLCBwYXJzZWRVbml0LCBlLmlzRGVjbGFyYXRpb24pOworCQkJCQkJCQlz
ZWxlY3RGcm9tKGUuYmluZGluZywgcGFyc2VkVW5pdCwgc291cmNlVW5pdCwgZS5pc0RlY2xhcmF0
aW9uKTsKIAkJCQkJCQl9CiAJCQkJCQl9CiAJCQkJCX0KQEAgLTEwODIsNiArMTA4Miw5IEBACiAJ
fQogCiAJcHJpdmF0ZSB2b2lkIHNlbGVjdEZyb20oQmluZGluZyBiaW5kaW5nLCBDb21waWxhdGlv
blVuaXREZWNsYXJhdGlvbiBwYXJzZWRVbml0LCBib29sZWFuIGlzRGVjbGFyYXRpb24pIHsKKwkJ
c2VsZWN0RnJvbShiaW5kaW5nLCBwYXJzZWRVbml0LCBudWxsLCBpc0RlY2xhcmF0aW9uKTsKKwl9
CisJcHJpdmF0ZSB2b2lkIHNlbGVjdEZyb20oQmluZGluZyBiaW5kaW5nLCBDb21waWxhdGlvblVu
aXREZWNsYXJhdGlvbiBwYXJzZWRVbml0LCBJQ29tcGlsYXRpb25Vbml0IHVuaXQsIGJvb2xlYW4g
aXNEZWNsYXJhdGlvbikgewogCQlpZihiaW5kaW5nIGluc3RhbmNlb2YgVHlwZVZhcmlhYmxlQmlu
ZGluZykgewogCQkJVHlwZVZhcmlhYmxlQmluZGluZyB0eXBlVmFyaWFibGVCaW5kaW5nID0gKFR5
cGVWYXJpYWJsZUJpbmRpbmcpIGJpbmRpbmc7CiAJCQlCaW5kaW5nIGVuY2xvc2luZ0VsZW1lbnQg
PSB0eXBlVmFyaWFibGVCaW5kaW5nLmRlY2xhcmluZ0VsZW1lbnQ7CkBAIC0xMjYyLDcgKzEyNjUs
NyBAQAogCQkJfQogCQl9IGVsc2UgaWYgKGJpbmRpbmcgaW5zdGFuY2VvZiBMb2NhbFZhcmlhYmxl
QmluZGluZykgewogCQkJaWYgKHRoaXMucmVxdWVzdG9yIGluc3RhbmNlb2YgU2VsZWN0aW9uUmVx
dWVzdG9yKSB7Ci0JCQkJKChTZWxlY3Rpb25SZXF1ZXN0b3IpdGhpcy5yZXF1ZXN0b3IpLmFjY2Vw
dExvY2FsVmFyaWFibGUoKExvY2FsVmFyaWFibGVCaW5kaW5nKWJpbmRpbmcpOworCQkJCSgoU2Vs
ZWN0aW9uUmVxdWVzdG9yKXRoaXMucmVxdWVzdG9yKS5hY2NlcHRMb2NhbFZhcmlhYmxlKChMb2Nh
bFZhcmlhYmxlQmluZGluZyliaW5kaW5nLCB1bml0KTsKIAkJCQl0aGlzLmFjY2VwdGVkQW5zd2Vy
ID0gdHJ1ZTsKIAkJCX0gZWxzZSB7CiAJCQkJLy8gb3BlbiBvbiB0aGUgdHlwZSBvZiB0aGUgdmFy
aWFibGUKQEAgLTEzODEsMTUgKzEzODQsNiBAQAogCQkJCXR5cGVOYW1lID0gU2lnbmF0dXJlLnRv
Q2hhckFycmF5KHR5cGVTaWcpOwogCQkJfQogCi0JCQkvLyBmaW5kIHRoZSBvdXRlciBtb3N0IHR5
cGUKLQkJCUlUeXBlIG91dGVyVHlwZSA9IGNvbnRleHQ7Ci0JCQlJVHlwZSBwYXJlbnQgPSBjb250
ZXh0LmdldERlY2xhcmluZ1R5cGUoKTsKLQkJCXdoaWxlIChwYXJlbnQgIT0gbnVsbCkgewotCQkJ
CW91dGVyVHlwZSA9IHBhcmVudDsKLQkJCQlwYXJlbnQgPSBwYXJlbnQuZ2V0RGVjbGFyaW5nVHlw
ZSgpOwotCQkJfQotCi0JCQkvLyBjb21wdXRlIHBhcnNlIHRyZWUgZm9yIHRoaXMgbW9zdCBvdXRl
ciB0eXBlCiAJCQlDb21waWxhdGlvblVuaXREZWNsYXJhdGlvbiBwYXJzZWRVbml0ID0gbnVsbDsK
IAkJCVR5cGVEZWNsYXJhdGlvbiB0eXBlRGVjbGFyYXRpb24gPSBudWxsOwogCQkJb3JnLmVjbGlw
c2UuamR0LmNvcmUuSUNvbXBpbGF0aW9uVW5pdCBjdSA9IGNvbnRleHQuZ2V0Q29tcGlsYXRpb25V
bml0KCk7CkBAIC0xNDAwLDggKzEzOTQsNyBAQAogCQkJIAlmb3IgKGludCBpID0gMDsgaSA8IGxl
bmd0aDsgaSsrKSB7CiAJCQkJCXRvcExldmVsSW5mb3NbaV0gPSAoU291cmNlVHlwZUVsZW1lbnRJ
bmZvKSAoKFNvdXJjZVR5cGUpdG9wTGV2ZWxUeXBlc1tpXSkuZ2V0RWxlbWVudEluZm8oKTsKIAkJ
CQl9Ci0JCQkJSVNvdXJjZVR5cGUgb3V0ZXJUeXBlSW5mbyA9IChJU291cmNlVHlwZSkgKChTb3Vy
Y2VUeXBlKSBvdXRlclR5cGUpLmdldEVsZW1lbnRJbmZvKCk7Ci0JCQkJQ29tcGlsYXRpb25SZXN1
bHQgcmVzdWx0ID0gbmV3IENvbXBpbGF0aW9uUmVzdWx0KG91dGVyVHlwZUluZm8uZ2V0RmlsZU5h
bWUoKSwgMSwgMSwgdGhpcy5jb21waWxlck9wdGlvbnMubWF4UHJvYmxlbXNQZXJVbml0KTsKKwkJ
CQlDb21waWxhdGlvblJlc3VsdCByZXN1bHQgPSBuZXcgQ29tcGlsYXRpb25SZXN1bHQoKG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5lbnYuSUNvbXBpbGF0aW9uVW5pdCkgY3UsIDEs
IDEsIHRoaXMuY29tcGlsZXJPcHRpb25zLm1heFByb2JsZW1zUGVyVW5pdCk7CiAJCQkJaW50IGZs
YWdzID0gU291cmNlVHlwZUNvbnZlcnRlci5GSUVMRF9BTkRfTUVUSE9EIHwgU291cmNlVHlwZUNv
bnZlcnRlci5NRU1CRVJfVFlQRTsKIAkJCQlpZiAoY29udGV4dC5pc0Fub255bW91cygpIHx8IGNv
bnRleHQuaXNMb2NhbCgpKQogCQkJCQlmbGFncyB8PSBTb3VyY2VUeXBlQ29udmVydGVyLkxPQ0FM
X1RZUEU7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0xhbWJkYUV4cHJlc3Npb24uamF2YSBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhCmluZGV4IDE0ZmYzM2YuLjhhZDYwZTEgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhCkBAIC05NSw3ICs5NSw3IEBACiBwdWJsaWMgY2xhc3Mg
TGFtYmRhRXhwcmVzc2lvbiBleHRlbmRzIEZ1bmN0aW9uYWxFeHByZXNzaW9uIGltcGxlbWVudHMg
UmVmZXJlbmNlQ29udGV4dCwgUHJvYmxlbVNldmVyaXRpZXMgewogCXB1YmxpYyBBcmd1bWVudCBb
XSBhcmd1bWVudHM7CiAJcHJpdmF0ZSBUeXBlQmluZGluZyBbXSBhcmd1bWVudFR5cGVzOwotCXBy
aXZhdGUgaW50IGFycm93UG9zaXRpb247CisJcHVibGljIGludCBhcnJvd1Bvc2l0aW9uOwogCXB1
YmxpYyBTdGF0ZW1lbnQgYm9keTsKIAlwdWJsaWMgYm9vbGVhbiBoYXNQYXJlbnRoZXNlczsKIAlw
dWJsaWMgTWV0aG9kU2NvcGUgc2NvcGU7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9KYXZhRWxlbWVudC5qYXZhIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUv
SmF2YUVsZW1lbnQuamF2YQppbmRleCA2OTg3YzAwLi5hMmU4MmEyIDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9KYXZh
RWxlbWVudC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb3JlL0phdmFFbGVtZW50LmphdmEKQEAgLTY5LDYgKzY5LDEwIEBACiAJ
cHVibGljIHN0YXRpYyBmaW5hbCBjaGFyIEpFTV9MT0NBTFZBUklBQkxFID0gJ0AnOwogCXB1Ymxp
YyBzdGF0aWMgZmluYWwgY2hhciBKRU1fVFlQRV9QQVJBTUVURVIgPSAnXSc7CiAJcHVibGljIHN0
YXRpYyBmaW5hbCBjaGFyIEpFTV9BTk5PVEFUSU9OID0gJ30nOworCXB1YmxpYyBzdGF0aWMgZmlu
YWwgY2hhciBKRU1fTEFNQkRBX0VYUFJFU1NJT04gPSAnPic7CisJcHVibGljIHN0YXRpYyBmaW5h
bCBjaGFyIEpFTV9MQU1CREFfTUVUSE9EID0gJyonOworCXB1YmxpYyBzdGF0aWMgZmluYWwgY2hh
ciBKRU1fU1RSSU5HID0gJyInOworCQogCiAJLyoqCiAJICogVGhpcyBlbGVtZW50J3MgcGFyZW50
LCBvciA8Y29kZT5udWxsPC9jb2RlPiBpZiB0aGlzCkBAIC0xNDksNiArMTUzLDkgQEAKIAkJCQlj
YXNlIEpFTV9MT0NBTFZBUklBQkxFOgogCQkJCWNhc2UgSkVNX1RZUEVfUEFSQU1FVEVSOgogCQkJ
CWNhc2UgSkVNX0FOTk9UQVRJT046CisJCQkJY2FzZSBKRU1fTEFNQkRBX0VYUFJFU1NJT046CisJ
CQkJY2FzZSBKRU1fTEFNQkRBX01FVEhPRDoKKwkJCQljYXNlIEpFTV9TVFJJTkc6CiAJCQkJCWJ1
ZmZlci5hcHBlbmQoSkVNX0VTQ0FQRSk7CiAJCQl9CiAJCQlidWZmZXIuYXBwZW5kKGNoYXJhY3Rl
cik7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29yZS9MYW1iZGFFeHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9MYW1iZGFFeHByZXNzaW9u
LmphdmEKaW5kZXggYzA2MWQwYS4uZDFhZjIwNCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvTGFtYmRhRXhwcmVzc2lv
bi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb3JlL0xhbWJkYUV4cHJlc3Npb24uamF2YQpAQCAtMTUsMzI5ICsxNSwxNjIgQEAK
IHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvcmU7CiAKIGltcG9ydCBvcmcuZWNs
aXBzZS5jb3JlLnJ1bnRpbWUuSVByb2dyZXNzTW9uaXRvcjsKLWltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuY29yZS5JQW5ub3RhdGlvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5JRmllbGQ7
Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuSUluaXRpYWxpemVyOwogaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5jb3JlLklKYXZhRWxlbWVudDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29y
ZS5JSmF2YU1vZGVsU3RhdHVzQ29uc3RhbnRzOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3Jl
LklMb2NhbFZhcmlhYmxlOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLklNZXRob2Q7Ci1p
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuSVNvdXJjZVJhbmdlOwotaW1wb3J0IG9yZy5lY2xp
cHNlLmpkdC5jb3JlLklUeXBlOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLklUeXBlUGFy
YW1ldGVyOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLkphdmFNb2RlbEV4Y2VwdGlvbjsK
LWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5Tb3VyY2VSYW5nZTsKIGltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuY29yZS5Xb3JraW5nQ29weU93bmVyOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5p
bnRlcm5hbC5jb21waWxlci5sb29rdXAuQmluZGluZzsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlR5cGVCaW5kaW5nOworaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5pbnRlcm5hbC5jb3JlLnV0aWwuTWVtZW50b1Rva2VuaXplcjsKK2ltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29yZS51dGlsLlV0aWw7CiAKIHB1YmxpYyBjbGFzcyBMYW1iZGFF
eHByZXNzaW9uIGV4dGVuZHMgU291cmNlVHlwZSB7CiAKLQlvcmcuZWNsaXBzZS5qZHQuaW50ZXJu
YWwuY29tcGlsZXIuYXN0LkxhbWJkYUV4cHJlc3Npb24gbGFtYmRhRXhwcmVzc2lvbjsKLQlTb3Vy
Y2VNZXRob2QgbGFtYmRhTWV0aG9kOworCVNvdXJjZVR5cGVFbGVtZW50SW5mbyBlbGVtZW50SW5m
bzsKKwlMYW1iZGFNZXRob2QgbGFtYmRhTWV0aG9kOwogCQorCS8vIFRoZXNlIGZpZWxkcyBjb3Vs
ZCBiZSBtYXRlcmlhbGl6ZWQgZnJvbSBlbGVtZW50SW5mbywgYnV0IGZvciBlYXNlIG9mIHVzZSBz
dGFzaGVkIGhlcmUgCisJcHJpdmF0ZSBpbnQgc291cmNlU3RhcnQ7CisJcHJpdmF0ZSBpbnQgc291
cmNlRW5kOworCXByaXZhdGUgaW50IGFycm93UG9zaXRpb247CisJcHJpdmF0ZSBTdHJpbmcgaW50
ZXJwaGFzZTsKKwkKKwkKKwkvLyBDb25zdHJ1Y3Rpb24gZnJvbSBBU1Qgbm9kZQogCXB1YmxpYyBM
YW1iZGFFeHByZXNzaW9uKEphdmFFbGVtZW50IHBhcmVudCwgb3JnLmVjbGlwc2UuamR0LmludGVy
bmFsLmNvbXBpbGVyLmFzdC5MYW1iZGFFeHByZXNzaW9uIGxhbWJkYUV4cHJlc3Npb24pIHsKLQkJ
c3VwZXIocGFyZW50LCBuZXcgU3RyaW5nKCI8bGFtYmRhPiIpKTsgLy8kTk9OLU5MUy0xJAotCQl0
aGlzLmxhbWJkYUV4cHJlc3Npb24gPSBsYW1iZGFFeHByZXNzaW9uOwotCQl0aGlzLm9jY3VycmVu
Y2VDb3VudCA9IGxhbWJkYUV4cHJlc3Npb24ub3JkaW5hbDsKKwkJc3VwZXIocGFyZW50LCBuZXcg
U3RyaW5nKCJMYW1iZGEoIikgKyBuZXcgU3RyaW5nKGxhbWJkYUV4cHJlc3Npb24uZGVzY3JpcHRv
ci5kZWNsYXJpbmdDbGFzcy5zb3VyY2VOYW1lKCkpICsgJyknKTsgLy8kTk9OLU5MUy0xJAorCQl0
aGlzLnNvdXJjZVN0YXJ0ID0gbGFtYmRhRXhwcmVzc2lvbi5zb3VyY2VTdGFydDsKKwkJdGhpcy5z
b3VyY2VFbmQgPSBsYW1iZGFFeHByZXNzaW9uLnNvdXJjZUVuZDsKKwkJdGhpcy5hcnJvd1Bvc2l0
aW9uID0gbGFtYmRhRXhwcmVzc2lvbi5hcnJvd1Bvc2l0aW9uOworCQl0aGlzLmludGVycGhhc2Ug
PSBuZXcgU3RyaW5nKGxhbWJkYUV4cHJlc3Npb24uZGVzY3JpcHRvci5kZWNsYXJpbmdDbGFzcy5z
b3VyY2VOYW1lKCkpOworCQl0aGlzLmVsZW1lbnRJbmZvID0gbWFrZVR5cGVFbGVtZW50SW5mbyh0
aGlzLCB0aGlzLmludGVycGhhc2UsIHRoaXMuc291cmNlU3RhcnQsIHRoaXMuc291cmNlRW5kLCB0
aGlzLmFycm93UG9zaXRpb24pOyAKKwkJdGhpcy5sYW1iZGFNZXRob2QgPSBMYW1iZGFNZXRob2Qu
bWFrZSh0aGlzLCBsYW1iZGFFeHByZXNzaW9uKTsKKwkJdGhpcy5lbGVtZW50SW5mby5jaGlsZHJl
biA9IG5ldyBJSmF2YUVsZW1lbnRbXSB7IHRoaXMubGFtYmRhTWV0aG9kIH07CiAJfQogCQotCUBP
dmVycmlkZQotCXB1YmxpYyBTdHJpbmdbXSBnZXRDYXRlZ29yaWVzKCkgdGhyb3dzIEphdmFNb2Rl
bEV4Y2VwdGlvbiB7Ci0JCXRocm93IG5ldyBKYXZhTW9kZWxFeGNlcHRpb24obmV3IEphdmFNb2Rl
bFN0YXR1cyhJSmF2YU1vZGVsU3RhdHVzQ29uc3RhbnRzLlJFQURfT05MWSwgdGhpcykpOyAvLyBU
T0RPOiB3aGF0IHRoZSBoZWNrIGlzIHRoaXMgc3VwcG9zZWQgdG8gYmUgPyAKLQl9Ci0KLQlAT3Zl
cnJpZGUKLQlwdWJsaWMgaW50IGdldEZsYWdzKCkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbiB7
Ci0JCXJldHVybiB0aGlzLmxhbWJkYUV4cHJlc3Npb24uYmluZGluZy5tb2RpZmllcnM7IC8vIFRP
RE8KLQl9Ci0KLQlAT3ZlcnJpZGUKLQlwdWJsaWMgSVNvdXJjZVJhbmdlIGdldEphdmFkb2NSYW5n
ZSgpIHRocm93cyBKYXZhTW9kZWxFeGNlcHRpb24gewotCQlyZXR1cm4gbnVsbDsKLQl9Ci0KLQlA
T3ZlcnJpZGUKLQlwdWJsaWMgYm9vbGVhbiBpc0JpbmFyeSgpIHsKLQkJcmV0dXJuIGZhbHNlOwot
CX0KLQotCUBPdmVycmlkZQotCXB1YmxpYyBPYmplY3QgZ2V0RWxlbWVudEluZm8oKSB0aHJvd3Mg
SmF2YU1vZGVsRXhjZXB0aW9uIHsKLQkJcmV0dXJuIG5ldyBMYW1iZGFUeXBlRWxlbWVudEluZm8o
dGhpcyk7CisJLy8gQ29uc3RydWN0aW9uIGZyb20gbWVtZW50bworCXB1YmxpYyBMYW1iZGFFeHBy
ZXNzaW9uKEphdmFFbGVtZW50IHBhcmVudCwgU3RyaW5nIG5hbWUsIFN0cmluZyBpbnRlcnBoYXNl
LCBpbnQgc291cmNlU3RhcnQsIGludCBzb3VyY2VFbmQsIGludCBhcnJvd1Bvc2l0aW9uKSB7CisJ
CXN1cGVyKHBhcmVudCwgbmFtZSk7CisJCXRoaXMuc291cmNlU3RhcnQgPSBzb3VyY2VTdGFydDsK
KwkJdGhpcy5zb3VyY2VFbmQgPSBzb3VyY2VFbmQ7CisJCXRoaXMuYXJyb3dQb3NpdGlvbiA9IGFy
cm93UG9zaXRpb247CisJCXRoaXMuaW50ZXJwaGFzZSA9IGludGVycGhhc2U7CisJCXRoaXMuZWxl
bWVudEluZm8gPSBtYWtlVHlwZUVsZW1lbnRJbmZvKHRoaXMsIGludGVycGhhc2UsIHRoaXMuc291
cmNlU3RhcnQgPSBzb3VyY2VTdGFydCwgc291cmNlRW5kLCBhcnJvd1Bvc2l0aW9uKTsKKwkJLy8g
TWV0aG9kIGlzIGluIHRoZSBwcm9jZXNzIG9mIGJlaW5nIGZhYnJpY2F0ZWQsIHdpbGwgYmUgYXR0
YWNoZWQgc2hvcnRseS4KIAl9CiAJCi0JQE92ZXJyaWRlCisJLy8gTGFtYmRhIGV4cHJlc3Npb24g
aXMgbm90IGJhY2tlZCBieSBtb2RlbCwgZmFicmljYXRlIGVsZW1lbnQgaW5mb3JtYXRpb24gc3Ry
dWN0dXJlIGFuZCBzdGFzaCBpdC4KKwlzdGF0aWMgcHJpdmF0ZSBTb3VyY2VUeXBlRWxlbWVudElu
Zm8gbWFrZVR5cGVFbGVtZW50SW5mbyAoTGFtYmRhRXhwcmVzc2lvbiBoYW5kbGUsIFN0cmluZyBp
bnRlcnBoYXNlLCBpbnQgc291cmNlU3RhcnQsIGludCBzb3VyY2VFbmQsIGludCBhcnJvd1Bvc2l0
aW9uKSB7CisJCQorCQlTb3VyY2VUeXBlRWxlbWVudEluZm8gZWxlbWVudEluZm8gPSBuZXcgU291
cmNlVHlwZUVsZW1lbnRJbmZvKCk7CisJCQorCQllbGVtZW50SW5mby5zZXRGbGFncygwKTsKKwkJ
ZWxlbWVudEluZm8uc2V0SGFuZGxlKGhhbmRsZSk7CisJCWVsZW1lbnRJbmZvLnNldFNvdXJjZVJh
bmdlU3RhcnQoc291cmNlU3RhcnQpOworCQllbGVtZW50SW5mby5zZXRTb3VyY2VSYW5nZUVuZChz
b3VyY2VFbmQpOworCQkKKwkJZWxlbWVudEluZm8uc2V0TmFtZVNvdXJjZVN0YXJ0KHNvdXJjZVN0
YXJ0KTsKKwkJZWxlbWVudEluZm8uc2V0TmFtZVNvdXJjZUVuZChhcnJvd1Bvc2l0aW9uKTsKKwkJ
ZWxlbWVudEluZm8uc2V0U3VwZXJjbGFzc05hbWUobnVsbCk7CisJCWVsZW1lbnRJbmZvLmFkZENh
dGVnb3JpZXMoaGFuZGxlLCBudWxsKTsKKwkJCisJCUphdmFNb2RlbE1hbmFnZXIgbWFuYWdlciA9
IEphdmFNb2RlbE1hbmFnZXIuZ2V0SmF2YU1vZGVsTWFuYWdlcigpOworCQljaGFyW11bXSBzdXBl
cmludGVyZmFjZXMgPSBuZXcgY2hhciBbXVtdIHsgbWFuYWdlci5pbnRlcm4oaW50ZXJwaGFzZS50
b0NoYXJBcnJheSgpKSB9OyAvLyBkcm9wcyBtYXJrZXIgaW50ZXJmYWNlcyAtIHRvIGZpeC4KKwkJ
ZWxlbWVudEluZm8uc2V0U3VwZXJJbnRlcmZhY2VOYW1lcyhzdXBlcmludGVyZmFjZXMpOworCQly
ZXR1cm4gZWxlbWVudEluZm87CisJfQorCQorCXByb3RlY3RlZCB2b2lkIGNsb3NpbmcoT2JqZWN0
IGluZm8pIHRocm93cyBKYXZhTW9kZWxFeGNlcHRpb24geworCQkvLyBub3RoaW5nIHRvIGRvLCBu
b3QgYmFja2VkIGJ5IG1vZGVsIEFUTS4KKwl9CisJCisJcHVibGljIGJvb2xlYW4gZXF1YWxzKE9i
amVjdCBvKSB7CisJCXJldHVybiBvIGluc3RhbmNlb2YgTGFtYmRhRXhwcmVzc2lvbiAmJiAoKExh
bWJkYUV4cHJlc3Npb24pIG8pLnNvdXJjZVN0YXJ0ID09IHRoaXMuc291cmNlU3RhcnQgJiYgc3Vw
ZXIuZXF1YWxzKG8pOworCX0KKwkKKwlwdWJsaWMgaW50IGhhc2hDb2RlKCkgeworCQlyZXR1cm4g
VXRpbC5jb21iaW5lSGFzaENvZGVzKHN1cGVyLmhhc2hDb2RlKCksIHRoaXMuc291cmNlU3RhcnQp
OworCX0KKwkKIAlwdWJsaWMgT2JqZWN0IGdldEVsZW1lbnRJbmZvKElQcm9ncmVzc01vbml0b3Ig
bW9uaXRvcikgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbiB7Ci0JCXJldHVybiBuZXcgTGFtYmRh
VHlwZUVsZW1lbnRJbmZvKHRoaXMpOworCQlyZXR1cm4gdGhpcy5lbGVtZW50SW5mbzsKKwl9CisK
Kwlwcm90ZWN0ZWQgY2hhciBnZXRIYW5kbGVNZW1lbnRvRGVsaW1pdGVyKCkgeworCQlyZXR1cm4g
SmF2YUVsZW1lbnQuSkVNX0xBTUJEQV9FWFBSRVNTSU9OOwogCX0KIAkKLQlAT3ZlcnJpZGUKLQlw
dWJsaWMgYm9vbGVhbiBleGlzdHMoKSB7Ci0JCXJldHVybiB0cnVlOworCS8qCisJICogQHNlZSBK
YXZhRWxlbWVudCNnZXRIYW5kbGVNZW1lbnRvKFN0cmluZ0J1ZmZlcikKKwkgKi8KKwlwcm90ZWN0
ZWQgdm9pZCBnZXRIYW5kbGVNZW1lbnRvKFN0cmluZ0J1ZmZlciBidWZmKSB7CisJCSgoSmF2YUVs
ZW1lbnQpZ2V0UGFyZW50KCkpLmdldEhhbmRsZU1lbWVudG8oYnVmZik7CisJCWJ1ZmYuYXBwZW5k
KGdldEhhbmRsZU1lbWVudG9EZWxpbWl0ZXIoKSk7CisJCWVzY2FwZU1lbWVudG9OYW1lKGJ1ZmYs
IHRoaXMubmFtZSk7CisJCWJ1ZmYuYXBwZW5kKEpFTV9TVFJJTkcpOworCQllc2NhcGVNZW1lbnRv
TmFtZShidWZmLCB0aGlzLmludGVycGhhc2UpOworCQlidWZmLmFwcGVuZChKRU1fQ09VTlQpOwor
CQlidWZmLmFwcGVuZCh0aGlzLnNvdXJjZVN0YXJ0KTsKKwkJYnVmZi5hcHBlbmQoSkVNX0NPVU5U
KTsKKwkJYnVmZi5hcHBlbmQodGhpcy5zb3VyY2VFbmQpOworCQlidWZmLmFwcGVuZChKRU1fQ09V
TlQpOworCQlidWZmLmFwcGVuZCh0aGlzLmFycm93UG9zaXRpb24pOwogCX0KKwkKKwlwdWJsaWMg
SUphdmFFbGVtZW50IGdldEhhbmRsZUZyb21NZW1lbnRvKFN0cmluZyB0b2tlbiwgTWVtZW50b1Rv
a2VuaXplciBtZW1lbnRvLCBXb3JraW5nQ29weU93bmVyIHdvcmtpbmdDb3B5T3duZXIpIHsKIAot
CUBPdmVycmlkZQotCXB1YmxpYyBpbnQgZ2V0RWxlbWVudFR5cGUoKSB7Ci0JCXJldHVybiBUWVBF
OworCQlpZiAodG9rZW4uY2hhckF0KDApICE9IEpFTV9MQU1CREFfTUVUSE9EKQorCQkJcmV0dXJu
IG51bGw7CisJCQorCQkvLyAtLS0tCisJCWlmICghbWVtZW50by5oYXNNb3JlVG9rZW5zKCkpIHJl
dHVybiB0aGlzOworCQlTdHJpbmcgc2VsZWN0b3IgPSBtZW1lbnRvLm5leHRUb2tlbigpOworCQlp
ZiAoIW1lbWVudG8uaGFzTW9yZVRva2VucygpIHx8IG1lbWVudG8ubmV4dFRva2VuKCkuY2hhckF0
KDApICE9IEpFTV9DT1VOVCkgcmV0dXJuIHRoaXM7CisJCWlmICghbWVtZW50by5oYXNNb3JlVG9r
ZW5zKCkpIHJldHVybiB0aGlzOworCQlpbnQgbGVuZ3RoID0gSW50ZWdlci5wYXJzZUludChtZW1l
bnRvLm5leHRUb2tlbigpKTsKKwkJU3RyaW5nIFtdIHBhcmFtZXRlclR5cGVzID0gbmV3IFN0cmlu
Z1tsZW5ndGhdOworCQlTdHJpbmcgW10gcGFyYW1ldGVyTmFtZXMgPSBuZXcgU3RyaW5nW2xlbmd0
aF07CisJCWZvciAoaW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKKwkJCWlmICghbWVtZW50
by5oYXNNb3JlVG9rZW5zKCkgfHwgbWVtZW50by5uZXh0VG9rZW4oKS5jaGFyQXQoMCkgIT0gSkVN
X1NUUklORykgcmV0dXJuIHRoaXM7CisJCQlwYXJhbWV0ZXJUeXBlc1tpXSA9IG1lbWVudG8ubmV4
dFRva2VuKCk7CisJCQlpZiAoIW1lbWVudG8uaGFzTW9yZVRva2VucygpIHx8IG1lbWVudG8ubmV4
dFRva2VuKCkuY2hhckF0KDApICE9IEpFTV9TVFJJTkcpIHJldHVybiB0aGlzOworCQkJcGFyYW1l
dGVyTmFtZXNbaV0gPSBtZW1lbnRvLm5leHRUb2tlbigpOworCQl9CisJCWlmICghbWVtZW50by5o
YXNNb3JlVG9rZW5zKCkgfHwgbWVtZW50by5uZXh0VG9rZW4oKS5jaGFyQXQoMCkgIT0gSkVNX1NU
UklORykgcmV0dXJuIHRoaXM7CisJCVN0cmluZyByZXR1cm5UeXBlID0gbWVtZW50by5uZXh0VG9r
ZW4oKTsKKwkJaWYgKCFtZW1lbnRvLmhhc01vcmVUb2tlbnMoKSB8fCBtZW1lbnRvLm5leHRUb2tl
bigpLmNoYXJBdCgwKSAhPSBKRU1fU1RSSU5HKSByZXR1cm4gdGhpczsKKwkJU3RyaW5nIGtleSA9
IG1lbWVudG8ubmV4dFRva2VuKCk7CisJCXRoaXMubGFtYmRhTWV0aG9kID0gTGFtYmRhTWV0aG9k
Lm1ha2UodGhpcywgc2VsZWN0b3IsIGtleSwgdGhpcy5zb3VyY2VTdGFydCwgdGhpcy5zb3VyY2VF
bmQsIHRoaXMuYXJyb3dQb3NpdGlvbiwgcGFyYW1ldGVyVHlwZXMsIHBhcmFtZXRlck5hbWVzLCBy
ZXR1cm5UeXBlKTsKKwkJSUxvY2FsVmFyaWFibGUgW10gcGFyYW1ldGVycyA9IG5ldyBJTG9jYWxW
YXJpYWJsZVtsZW5ndGhdOworCQlmb3IgKGludCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CisJ
CQlwYXJhbWV0ZXJzW2ldID0gKElMb2NhbFZhcmlhYmxlKSB0aGlzLmxhbWJkYU1ldGhvZC5nZXRI
YW5kbGVGcm9tTWVtZW50byhtZW1lbnRvLCB3b3JraW5nQ29weU93bmVyKTsKKwkJfQorCQl0aGlz
LmxhbWJkYU1ldGhvZC5lbGVtZW50SW5mby5hcmd1bWVudHMgID0gcGFyYW1ldGVyczsKKwkJdGhp
cy5lbGVtZW50SW5mby5jaGlsZHJlbiA9IG5ldyBJSmF2YUVsZW1lbnRbXSB7IHRoaXMubGFtYmRh
TWV0aG9kIH07CisJCXJldHVybiB0aGlzLmxhbWJkYU1ldGhvZDsKIAl9Ci0KLQlAT3ZlcnJpZGUK
LQlwdWJsaWMgU3RyaW5nIGdldEhhbmRsZUlkZW50aWZpZXIoKSB7Ci0JCXJldHVybiBudWxsOyAv
LyBUT0RPCi0JfQotCi0JQE92ZXJyaWRlCisJCiAJcHVibGljIGJvb2xlYW4gaXNSZWFkT25seSgp
IHsKIAkJcmV0dXJuIHRydWU7CiAJfQogCi0JQE92ZXJyaWRlCi0JcHVibGljIGJvb2xlYW4gaXNT
dHJ1Y3R1cmVLbm93bigpIHRocm93cyBKYXZhTW9kZWxFeGNlcHRpb24gewotCQlyZXR1cm4gdHJ1
ZTsKLQl9Ci0KLQlAT3ZlcnJpZGUKLQlwdWJsaWMgU3RyaW5nIGdldFNvdXJjZSgpIHRocm93cyBK
YXZhTW9kZWxFeGNlcHRpb24gewotCQl0aHJvdyBuZXcgSmF2YU1vZGVsRXhjZXB0aW9uKG5ldyBK
YXZhTW9kZWxTdGF0dXMoSUphdmFNb2RlbFN0YXR1c0NvbnN0YW50cy5SRUFEX09OTFksIHRoaXMp
KTsKLQl9Ci0KLQlAT3ZlcnJpZGUKLQlwdWJsaWMgSVNvdXJjZVJhbmdlIGdldFNvdXJjZVJhbmdl
KCkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbiB7Ci0JCXJldHVybiBuZXcgU291cmNlUmFuZ2Uo
dGhpcy5sYW1iZGFFeHByZXNzaW9uLnNvdXJjZVN0YXJ0LCB0aGlzLmxhbWJkYUV4cHJlc3Npb24u
c291cmNlRW5kIC0gdGhpcy5sYW1iZGFFeHByZXNzaW9uLnNvdXJjZVN0YXJ0ICsgMSk7Ci0JfQot
Ci0JQE92ZXJyaWRlCi0JcHVibGljIElTb3VyY2VSYW5nZSBnZXROYW1lUmFuZ2UoKSB0aHJvd3Mg
SmF2YU1vZGVsRXhjZXB0aW9uIHsKLQkJcmV0dXJuIG5ldyBTb3VyY2VSYW5nZSh0aGlzLmxhbWJk
YUV4cHJlc3Npb24uc291cmNlU3RhcnQsIHRoaXMubGFtYmRhRXhwcmVzc2lvbi5hcnJvd1Bvc2l0
aW9uKCkgLSB0aGlzLmxhbWJkYUV4cHJlc3Npb24uc291cmNlU3RhcnQgKyAxKTsKLQl9Ci0KLQlA
T3ZlcnJpZGUKLQlwdWJsaWMgdm9pZCBjb3B5KElKYXZhRWxlbWVudCBjb250YWluZXIsIElKYXZh
RWxlbWVudCBzaWJsaW5nLCBTdHJpbmcgcmVuYW1lLCBib29sZWFuIHJlcGxhY2UsCi0JCQlJUHJv
Z3Jlc3NNb25pdG9yIG1vbml0b3IpIHRocm93cyBKYXZhTW9kZWxFeGNlcHRpb24gewotCQl0aHJv
dyBuZXcgSmF2YU1vZGVsRXhjZXB0aW9uKG5ldyBKYXZhTW9kZWxTdGF0dXMoSUphdmFNb2RlbFN0
YXR1c0NvbnN0YW50cy5SRUFEX09OTFksIHRoaXMpKTsKLQl9Ci0KLQlAT3ZlcnJpZGUKLQlwdWJs
aWMgdm9pZCBkZWxldGUoYm9vbGVhbiBmb3JjZSwgSVByb2dyZXNzTW9uaXRvciBtb25pdG9yKSB0
aHJvd3MgSmF2YU1vZGVsRXhjZXB0aW9uIHsKLQkJdGhyb3cgbmV3IEphdmFNb2RlbEV4Y2VwdGlv
bihuZXcgSmF2YU1vZGVsU3RhdHVzKElKYXZhTW9kZWxTdGF0dXNDb25zdGFudHMuUkVBRF9PTkxZ
LCB0aGlzKSk7Ci0JfQotCi0JQE92ZXJyaWRlCi0JcHVibGljIHZvaWQgbW92ZShJSmF2YUVsZW1l
bnQgY29udGFpbmVyLCBJSmF2YUVsZW1lbnQgc2libGluZywgU3RyaW5nIHJlbmFtZSwgYm9vbGVh
biByZXBsYWNlLAotCQkJSVByb2dyZXNzTW9uaXRvciBtb25pdG9yKSB0aHJvd3MgSmF2YU1vZGVs
RXhjZXB0aW9uIHsKLQkJdGhyb3cgbmV3IEphdmFNb2RlbEV4Y2VwdGlvbihuZXcgSmF2YU1vZGVs
U3RhdHVzKElKYXZhTW9kZWxTdGF0dXNDb25zdGFudHMuUkVBRF9PTkxZLCB0aGlzKSk7Ci0JfQot
Ci0JQE92ZXJyaWRlCi0JcHVibGljIHZvaWQgcmVuYW1lKFN0cmluZyBuZXdOYW1lLCBib29sZWFu
IHJlcGxhY2UsIElQcm9ncmVzc01vbml0b3IgbW9uaXRvcikgdGhyb3dzIEphdmFNb2RlbEV4Y2Vw
dGlvbiB7Ci0JCXRocm93IG5ldyBKYXZhTW9kZWxFeGNlcHRpb24obmV3IEphdmFNb2RlbFN0YXR1
cyhJSmF2YU1vZGVsU3RhdHVzQ29uc3RhbnRzLlJFQURfT05MWSwgdGhpcykpOwotCX0KLQotCUBP
dmVycmlkZQogCXB1YmxpYyBJSmF2YUVsZW1lbnRbXSBnZXRDaGlsZHJlbigpIHRocm93cyBKYXZh
TW9kZWxFeGNlcHRpb24gewotCQl0aHJvdyBuZXcgSmF2YU1vZGVsRXhjZXB0aW9uKG5ldyBKYXZh
TW9kZWxTdGF0dXMoSUphdmFNb2RlbFN0YXR1c0NvbnN0YW50cy5SRUFEX09OTFksIHRoaXMpKTsK
KwkJcmV0dXJuIG5ldyBJSmF2YUVsZW1lbnRbXSB7IHRoaXMubGFtYmRhTWV0aG9kIH07CiAJfQog
Ci0JQE92ZXJyaWRlCi0JcHVibGljIGJvb2xlYW4gaGFzQ2hpbGRyZW4oKSB0aHJvd3MgSmF2YU1v
ZGVsRXhjZXB0aW9uIHsKLQkJdGhyb3cgbmV3IEphdmFNb2RlbEV4Y2VwdGlvbihuZXcgSmF2YU1v
ZGVsU3RhdHVzKElKYXZhTW9kZWxTdGF0dXNDb25zdGFudHMuUkVBRF9PTkxZLCB0aGlzKSk7Ci0J
fQotCi0JQE92ZXJyaWRlCi0JcHVibGljIElBbm5vdGF0aW9uIGdldEFubm90YXRpb24oU3RyaW5n
IGFubm90YXRpb25OYW1lKSB7Ci0JCXJldHVybiBudWxsOwotCX0KLQotCUBPdmVycmlkZQotCXB1
YmxpYyBJQW5ub3RhdGlvbltdIGdldEFubm90YXRpb25zKCkgdGhyb3dzIEphdmFNb2RlbEV4Y2Vw
dGlvbiB7Ci0JCXRocm93IG5ldyBKYXZhTW9kZWxFeGNlcHRpb24obmV3IEphdmFNb2RlbFN0YXR1
cyhJSmF2YU1vZGVsU3RhdHVzQ29uc3RhbnRzLlJFQURfT05MWSwgdGhpcykpOwotCX0KLQotCUBP
dmVycmlkZQotCXB1YmxpYyBJRmllbGQgY3JlYXRlRmllbGQoU3RyaW5nIGNvbnRlbnRzLCBJSmF2
YUVsZW1lbnQgc2libGluZywgYm9vbGVhbiBmb3JjZSwgSVByb2dyZXNzTW9uaXRvciBtb25pdG9y
KQotCQkJdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbiB7Ci0JCXRocm93IG5ldyBKYXZhTW9kZWxF
eGNlcHRpb24obmV3IEphdmFNb2RlbFN0YXR1cyhJSmF2YU1vZGVsU3RhdHVzQ29uc3RhbnRzLlJF
QURfT05MWSwgdGhpcykpOwotCX0KLQotCUBPdmVycmlkZQotCXB1YmxpYyBJSW5pdGlhbGl6ZXIg
Y3JlYXRlSW5pdGlhbGl6ZXIoU3RyaW5nIGNvbnRlbnRzLCBJSmF2YUVsZW1lbnQgc2libGluZywg
SVByb2dyZXNzTW9uaXRvciBtb25pdG9yKQotCQkJdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbiB7
Ci0JCXRocm93IG5ldyBKYXZhTW9kZWxFeGNlcHRpb24obmV3IEphdmFNb2RlbFN0YXR1cyhJSmF2
YU1vZGVsU3RhdHVzQ29uc3RhbnRzLlJFQURfT05MWSwgdGhpcykpOwotCX0KLQotCUBPdmVycmlk
ZQotCXB1YmxpYyBJTWV0aG9kIGNyZWF0ZU1ldGhvZChTdHJpbmcgY29udGVudHMsIElKYXZhRWxl
bWVudCBzaWJsaW5nLCBib29sZWFuIGZvcmNlLCBJUHJvZ3Jlc3NNb25pdG9yIG1vbml0b3IpCi0J
CQl0aHJvd3MgSmF2YU1vZGVsRXhjZXB0aW9uIHsKLQkJdGhyb3cgbmV3IEphdmFNb2RlbEV4Y2Vw
dGlvbihuZXcgSmF2YU1vZGVsU3RhdHVzKElKYXZhTW9kZWxTdGF0dXNDb25zdGFudHMuUkVBRF9P
TkxZLCB0aGlzKSk7Ci0JfQotCi0JQE92ZXJyaWRlCi0JcHVibGljIElUeXBlIGNyZWF0ZVR5cGUo
U3RyaW5nIGNvbnRlbnRzLCBJSmF2YUVsZW1lbnQgc2libGluZywgYm9vbGVhbiBmb3JjZSwgSVBy
b2dyZXNzTW9uaXRvciBtb25pdG9yKQotCQkJdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbiB7Ci0J
CXRocm93IG5ldyBKYXZhTW9kZWxFeGNlcHRpb24obmV3IEphdmFNb2RlbFN0YXR1cyhJSmF2YU1v
ZGVsU3RhdHVzQ29uc3RhbnRzLlJFQURfT05MWSwgdGhpcykpOwotCX0KLQotCUBPdmVycmlkZQot
CXB1YmxpYyBJTWV0aG9kW10gZmluZE1ldGhvZHMoSU1ldGhvZCBtZXRob2QpIHsKLQkJcmV0dXJu
IG51bGw7Ci0JfQotCi0JQE92ZXJyaWRlCi0JcHVibGljIElKYXZhRWxlbWVudFtdIGdldENoaWxk
cmVuRm9yQ2F0ZWdvcnkoU3RyaW5nIGNhdGVnb3J5KSB0aHJvd3MgSmF2YU1vZGVsRXhjZXB0aW9u
IHsKLQkJdGhyb3cgbmV3IEphdmFNb2RlbEV4Y2VwdGlvbihuZXcgSmF2YU1vZGVsU3RhdHVzKElK
YXZhTW9kZWxTdGF0dXNDb25zdGFudHMuUkVBRF9PTkxZLCB0aGlzKSk7Ci0JfQotCi0JQE92ZXJy
aWRlCi0JcHVibGljIFN0cmluZyBnZXRFbGVtZW50TmFtZSgpIHsKLQkJcmV0dXJuIG5ldyBTdHJp
bmcoIjxsYW1iZGE+Iik7IC8vJE5PTi1OTFMtMSQKLQl9Ci0KLQlAT3ZlcnJpZGUKLQlwdWJsaWMg
SUZpZWxkIGdldEZpZWxkKFN0cmluZyBmaWVsZE5hbWUpIHsKLQkJcmV0dXJuIG51bGw7Ci0JfQot
Ci0JQE92ZXJyaWRlCi0JcHVibGljIElGaWVsZFtdIGdldEZpZWxkcygpIHRocm93cyBKYXZhTW9k
ZWxFeGNlcHRpb24gewotCQlyZXR1cm4gbmV3IElGaWVsZFswXTsKLQl9Ci0KLQlAT3ZlcnJpZGUK
LQlwdWJsaWMgSUluaXRpYWxpemVyIGdldEluaXRpYWxpemVyKGludCBva2t1cnJlbmNlQ291bnQp
IHsKLQkJcmV0dXJuIG51bGw7Ci0JfQotCi0JQE92ZXJyaWRlCi0JcHVibGljIElJbml0aWFsaXpl
cltdIGdldEluaXRpYWxpemVycygpIHRocm93cyBKYXZhTW9kZWxFeGNlcHRpb24gewotCQlyZXR1
cm4gbmV3IElJbml0aWFsaXplclswXTsKLQl9Ci0KLQlAT3ZlcnJpZGUKLQlwdWJsaWMgSU1ldGhv
ZCBnZXRNZXRob2QoU3RyaW5nIHNlbGVjdG9yLCBTdHJpbmdbXSBwYXJhbWV0ZXJUeXBlU2lnbmF0
dXJlcykgewotCQlyZXR1cm4gbmV3IFNvdXJjZU1ldGhvZCh0aGlzLCBzZWxlY3RvciwgcGFyYW1l
dGVyVHlwZVNpZ25hdHVyZXMpOwotCX0KLQkKLQlwdWJsaWMgU291cmNlTWV0aG9kIGdldE1ldGhv
ZCgpIHsKLQkJaWYgKHRoaXMubGFtYmRhTWV0aG9kICE9IG51bGwpCi0JCQlyZXR1cm4gdGhpcy5s
YW1iZGFNZXRob2Q7Ci0JCQotCQlUeXBlQmluZGluZyBbXSBhcmd2ID0gdGhpcy5sYW1iZGFFeHBy
ZXNzaW9uLmFyZ3VtZW50c1R5cGVFbGlkZWQoKSA/IHRoaXMubGFtYmRhRXhwcmVzc2lvbi5kZXNj
cmlwdG9yLnBhcmFtZXRlcnMgOiB0aGlzLmxhbWJkYUV4cHJlc3Npb24uYXJndW1lbnRUeXBlcygp
OyAKLQkJaW50IGFyZ2MgPSBhcmd2Lmxlbmd0aDsKLQkJU3RyaW5nW10gcGFyYW1ldGVyVHlwZVNp
Z25hdHVyZXMgPSBuZXcgU3RyaW5nW2FyZ2NdOwotCQlmb3IgKGludCBpID0gMDsgaSA8IGFyZ2M7
IGkrKykgewotCQkJcGFyYW1ldGVyVHlwZVNpZ25hdHVyZXNbaV0gPSBuZXcgU3RyaW5nKGFyZ3Zb
aV0uc2lnbmF0dXJlKCkpOwotCQl9Ci0JCXJldHVybiB0aGlzLmxhbWJkYU1ldGhvZCA9IG5ldyBT
b3VyY2VNZXRob2QodGhpcywgbmV3IFN0cmluZyh0aGlzLmxhbWJkYUV4cHJlc3Npb24uYmluZGlu
Zy5zZWxlY3RvciksIHBhcmFtZXRlclR5cGVTaWduYXR1cmVzKTsgCi0JfQotCi0JQE92ZXJyaWRl
Ci0JcHVibGljIElNZXRob2RbXSBnZXRNZXRob2RzKCkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlv
biB7Ci0JCXJldHVybiBuZXcgSU1ldGhvZFtdIHsgZ2V0TWV0aG9kKCkgfTsKLQl9Ci0KLQlAT3Zl
cnJpZGUKLQlwdWJsaWMgU3RyaW5nIGdldFN1cGVyY2xhc3NOYW1lKCkgdGhyb3dzIEphdmFNb2Rl
bEV4Y2VwdGlvbiB7Ci0JCXRocm93IG5ldyBKYXZhTW9kZWxFeGNlcHRpb24obmV3IEphdmFNb2Rl
bFN0YXR1cyhJSmF2YU1vZGVsU3RhdHVzQ29uc3RhbnRzLlJFQURfT05MWSwgdGhpcykpOwotCX0K
LQotCUBPdmVycmlkZQotCXB1YmxpYyBTdHJpbmcgZ2V0U3VwZXJjbGFzc1R5cGVTaWduYXR1cmUo
KSB0aHJvd3MgSmF2YU1vZGVsRXhjZXB0aW9uIHsKLQkJdGhyb3cgbmV3IEphdmFNb2RlbEV4Y2Vw
dGlvbihuZXcgSmF2YU1vZGVsU3RhdHVzKElKYXZhTW9kZWxTdGF0dXNDb25zdGFudHMuUkVBRF9P
TkxZLCB0aGlzKSk7Ci0JfQotCi0JQE92ZXJyaWRlCi0JcHVibGljIFN0cmluZ1tdIGdldFN1cGVy
SW50ZXJmYWNlVHlwZVNpZ25hdHVyZXMoKSB0aHJvd3MgSmF2YU1vZGVsRXhjZXB0aW9uIHsKLQkJ
dGhyb3cgbmV3IEphdmFNb2RlbEV4Y2VwdGlvbihuZXcgSmF2YU1vZGVsU3RhdHVzKElKYXZhTW9k
ZWxTdGF0dXNDb25zdGFudHMuUkVBRF9PTkxZLCB0aGlzKSk7Ci0JfQotCi0JQE92ZXJyaWRlCi0J
cHVibGljIFN0cmluZ1tdIGdldFN1cGVySW50ZXJmYWNlTmFtZXMoKSB0aHJvd3MgSmF2YU1vZGVs
RXhjZXB0aW9uIHsKLQkJdGhyb3cgbmV3IEphdmFNb2RlbEV4Y2VwdGlvbihuZXcgSmF2YU1vZGVs
U3RhdHVzKElKYXZhTW9kZWxTdGF0dXNDb25zdGFudHMuUkVBRF9PTkxZLCB0aGlzKSk7Ci0JfQot
Ci0JQE92ZXJyaWRlCi0JcHVibGljIFN0cmluZ1tdIGdldFR5cGVQYXJhbWV0ZXJTaWduYXR1cmVz
KCkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbiB7Ci0JCXRocm93IG5ldyBKYXZhTW9kZWxFeGNl
cHRpb24obmV3IEphdmFNb2RlbFN0YXR1cyhJSmF2YU1vZGVsU3RhdHVzQ29uc3RhbnRzLlJFQURf
T05MWSwgdGhpcykpOwotCX0KLQotCUBPdmVycmlkZQotCXB1YmxpYyBJVHlwZVBhcmFtZXRlcltd
IGdldFR5cGVQYXJhbWV0ZXJzKCkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbiB7Ci0JCXRocm93
IG5ldyBKYXZhTW9kZWxFeGNlcHRpb24obmV3IEphdmFNb2RlbFN0YXR1cyhJSmF2YU1vZGVsU3Rh
dHVzQ29uc3RhbnRzLlJFQURfT05MWSwgdGhpcykpOwotCX0KLQotCUBPdmVycmlkZQotCXB1Ymxp
YyBJVHlwZSBnZXRUeXBlKFN0cmluZyB0eXBlTmFtZSkgewotCQlyZXR1cm4gbnVsbDsKLQl9Ci0K
LQlAT3ZlcnJpZGUKLQlwdWJsaWMgSVR5cGVQYXJhbWV0ZXIgZ2V0VHlwZVBhcmFtZXRlcihTdHJp
bmcgdHlwZVBhcmFtZXRlck5hbWUpIHsKLQkJcmV0dXJuIG51bGw7Ci0JfQotCi0JQE92ZXJyaWRl
Ci0JcHVibGljIFN0cmluZyBnZXRUeXBlUXVhbGlmaWVkTmFtZSgpIHsKLQkJcmV0dXJuIG51bGw7
Ci0JfQotCi0JQE92ZXJyaWRlCi0JcHVibGljIElUeXBlW10gZ2V0VHlwZXMoKSB0aHJvd3MgSmF2
YU1vZGVsRXhjZXB0aW9uIHsKLQkJdGhyb3cgbmV3IEphdmFNb2RlbEV4Y2VwdGlvbihuZXcgSmF2
YU1vZGVsU3RhdHVzKElKYXZhTW9kZWxTdGF0dXNDb25zdGFudHMuUkVBRF9PTkxZLCB0aGlzKSk7
Ci0JfQotCi0JQE92ZXJyaWRlCi0JcHVibGljIGJvb2xlYW4gaXNBbm9ueW1vdXMoKSB7Ci0JCXJl
dHVybiB0cnVlOwotCX0KLQotCUBPdmVycmlkZQotCXB1YmxpYyBib29sZWFuIGlzQ2xhc3MoKSB0
aHJvd3MgSmF2YU1vZGVsRXhjZXB0aW9uIHsKLQkJcmV0dXJuIHRydWU7Ci0JfQotCi0JQE92ZXJy
aWRlCi0JcHVibGljIGJvb2xlYW4gaXNFbnVtKCkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbiB7
Ci0JCXJldHVybiBmYWxzZTsKLQl9Ci0KLQlAT3ZlcnJpZGUKLQlwdWJsaWMgYm9vbGVhbiBpc0lu
dGVyZmFjZSgpIHRocm93cyBKYXZhTW9kZWxFeGNlcHRpb24gewotCQlyZXR1cm4gZmFsc2U7Ci0J
fQotCi0JQE92ZXJyaWRlCi0JcHVibGljIGJvb2xlYW4gaXNBbm5vdGF0aW9uKCkgdGhyb3dzIEph
dmFNb2RlbEV4Y2VwdGlvbiB7Ci0JCXJldHVybiBmYWxzZTsKLQl9Ci0KLQlAT3ZlcnJpZGUKIAlw
dWJsaWMgYm9vbGVhbiBpc0xvY2FsKCkgewogCQlyZXR1cm4gdHJ1ZTsKIAl9CiAKLQlAT3ZlcnJp
ZGUKLQlwdWJsaWMgYm9vbGVhbiBpc01lbWJlcigpICB7Ci0JCXJldHVybiBmYWxzZTsKLQl9Ci0K
LQlAT3ZlcnJpZGUKIAlwdWJsaWMgSmF2YUVsZW1lbnQgcmVzb2x2ZWQoQmluZGluZyBiaW5kaW5n
KSB7CiAJCXJldHVybiB0aGlzOwogCX0KIAkKLQlAT3ZlcnJpZGUKIAlwdWJsaWMgYm9vbGVhbiBp
c1Jlc29sdmVkKCkgewogCQlyZXR1cm4gdHJ1ZTsKIAl9CiAKLQlAT3ZlcnJpZGUKLQlwdWJsaWMg
U3RyaW5nW11bXSByZXNvbHZlVHlwZShTdHJpbmcgdHlwZU5hbWUpIHRocm93cyBKYXZhTW9kZWxF
eGNlcHRpb24gewotCQl0aHJvdyBuZXcgSmF2YU1vZGVsRXhjZXB0aW9uKG5ldyBKYXZhTW9kZWxT
dGF0dXMoSUphdmFNb2RlbFN0YXR1c0NvbnN0YW50cy5SRUFEX09OTFksIHRoaXMpKTsKKwlwdWJs
aWMgSU1ldGhvZCBnZXRNZXRob2QoKSB7CisJCXJldHVybiB0aGlzLmxhbWJkYU1ldGhvZDsKIAl9
Ci0KLQlAT3ZlcnJpZGUKLQlwdWJsaWMgU3RyaW5nW11bXSByZXNvbHZlVHlwZShTdHJpbmcgdHlw
ZU5hbWUsIFdvcmtpbmdDb3B5T3duZXIgb3duZXIpIHRocm93cyBKYXZhTW9kZWxFeGNlcHRpb24g
ewotCQl0aHJvdyBuZXcgSmF2YU1vZGVsRXhjZXB0aW9uKG5ldyBKYXZhTW9kZWxTdGF0dXMoSUph
dmFNb2RlbFN0YXR1c0NvbnN0YW50cy5SRUFEX09OTFksIHRoaXMpKTsKLQl9Ci0KLX0KK30KXCBO
byBuZXdsaW5lIGF0IGVuZCBvZiBmaWxlCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9MYW1iZGFNZXRob2QuamF2YSBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3Jl
L0xhbWJkYU1ldGhvZC5qYXZhCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAuLjk2
ODRiYTYKLS0tIC9kZXYvbnVsbAorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9MYW1iZGFNZXRob2QuamF2YQpAQCAtMCwwICsxLDE1
MyBAQAorLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioKKyAqIENvcHlyaWdodCAoYykgMjAxNCBJQk0g
Q29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJv
Z3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKKyAqIGFyZSBtYWRlIGF2YWlsYWJs
ZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAorICog
d2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQK
KyAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCisgKgorICogVGhp
cyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBhbiBlYXJseS1kcmFmdCBzcGVjaWZpY2F0aW9uIGRl
dmVsb3BlZCB1bmRlciB0aGUgSmF2YQorICogQ29tbXVuaXR5IFByb2Nlc3MgKEpDUCkgYW5kIGlz
IG1hZGUgYXZhaWxhYmxlIGZvciB0ZXN0aW5nIGFuZCBldmFsdWF0aW9uIHB1cnBvc2VzCisgKiBv
bmx5LiBUaGUgY29kZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGFueSBzcGVjaWZpY2F0aW9uIG9m
IHRoZSBKQ1AuCisgKgorICogQ29udHJpYnV0b3JzOgorICogICAgIElCTSBDb3Jwb3JhdGlvbiAt
IGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgorICoqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiov
CisKK3BhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvcmU7CisKK2ltcG9ydCBvcmcu
ZWNsaXBzZS5jb3JlLnJ1bnRpbWUuSVByb2dyZXNzTW9uaXRvcjsKK2ltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuY29yZS5JTG9jYWxWYXJpYWJsZTsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5K
YXZhTW9kZWxFeGNlcHRpb247CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuU2lnbmF0dXJl
OworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLkNoYXJPcGVyYXRpb247Citp
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5Bcmd1bWVudDsKK2lt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkJpbmRpbmc7Citp
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvcmUudXRpbC5VdGlsOworCitwdWJsaWMg
Y2xhc3MgTGFtYmRhTWV0aG9kIGV4dGVuZHMgU291cmNlTWV0aG9kIHsKKworCXByaXZhdGUgaW50
IHNvdXJjZVN0YXJ0OyAvLyBjYWNoZWQgZm9yIGVhc2Ugb2YgdXNlIGluIGhhc2hjb2RlL2VxdWFs
cy4KKwlwcml2YXRlIFN0cmluZyBbXSBwYXJhbWV0ZXJOYW1lU3RyaW5nczsKKwlwcml2YXRlIFN0
cmluZyByZXR1cm5UeXBlU3RyaW5nOworCVNvdXJjZU1ldGhvZEVsZW1lbnRJbmZvIGVsZW1lbnRJ
bmZvOworCXByaXZhdGUgU3RyaW5nIGtleTsKKwkKKwlwdWJsaWMgTGFtYmRhTWV0aG9kKEphdmFF
bGVtZW50IHBhcmVudCwgU3RyaW5nIG5hbWUsIFN0cmluZyBrZXksIGludCBzb3VyY2VTdGFydCwg
U3RyaW5nIFtdIHBhcmFtZXRlclR5cGVzLCBTdHJpbmcgW10gcGFyYW1ldGVyTmFtZXMsIFN0cmlu
ZyByZXR1cm5UeXBlLCBTb3VyY2VNZXRob2RFbGVtZW50SW5mbyBlbGVtZW50SW5mbykgeworCQlz
dXBlcihwYXJlbnQsIG5hbWUsIHBhcmFtZXRlclR5cGVzKTsKKwkJdGhpcy5zb3VyY2VTdGFydCA9
IHNvdXJjZVN0YXJ0OworCQl0aGlzLnBhcmFtZXRlck5hbWVTdHJpbmdzID0gcGFyYW1ldGVyTmFt
ZXM7CisJCXRoaXMucmV0dXJuVHlwZVN0cmluZyA9IHJldHVyblR5cGU7CisJCXRoaXMuZWxlbWVu
dEluZm8gPSBlbGVtZW50SW5mbzsKKwkJdGhpcy5rZXkgPSBrZXk7CisJfQorCQorCXB1YmxpYyBz
dGF0aWMgTGFtYmRhTWV0aG9kIG1ha2UoSmF2YUVsZW1lbnQgcGFyZW50LCBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkxhbWJkYUV4cHJlc3Npb24gbGFtYmRhRXhwcmVzc2lv
bikgeworCQlpbnQgbGVuZ3RoOworCQlKYXZhTW9kZWxNYW5hZ2VyIG1hbmFnZXIgPSBKYXZhTW9k
ZWxNYW5hZ2VyLmdldEphdmFNb2RlbE1hbmFnZXIoKTsKKwkJU3RyaW5nIFtdIHBhcmFtZXRlclR5
cGVzID0gbmV3IFN0cmluZ1tsZW5ndGggPSBsYW1iZGFFeHByZXNzaW9uLmRlc2NyaXB0b3IucGFy
YW1ldGVycy5sZW5ndGhdOworCQlmb3IgKGludCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKQorCQkJ
cGFyYW1ldGVyVHlwZXNbaV0gPSBtYW5hZ2VyLmludGVybihuZXcgU3RyaW5nKGxhbWJkYUV4cHJl
c3Npb24uZGVzY3JpcHRvci5wYXJhbWV0ZXJzW2ldLnNpZ25hdHVyZSgpKSk7CisJCVN0cmluZyBb
XSBwYXJhbWV0ZXJOYW1lcyA9IG5ldyBTdHJpbmdbbGVuZ3RoXTsKKwkJZm9yIChpbnQgaSA9IDA7
IGkgPCBsZW5ndGg7IGkrKykKKwkJCXBhcmFtZXRlck5hbWVzW2ldID0gbWFuYWdlci5pbnRlcm4o
bmV3IFN0cmluZyhsYW1iZGFFeHByZXNzaW9uLmFyZ3VtZW50c1tpXS5uYW1lKSk7CisJCVN0cmlu
ZyByZXR1cm5UeXBlID0gbWFuYWdlci5pbnRlcm4obmV3IFN0cmluZyhTaWduYXR1cmUudG9DaGFy
QXJyYXkobGFtYmRhRXhwcmVzc2lvbi5kZXNjcmlwdG9yLnJldHVyblR5cGUuc2lnbmF0dXJlKCkp
KSk7CisJCVN0cmluZyBzZWxlY3RvciA9IG1hbmFnZXIuaW50ZXJuKG5ldyBTdHJpbmcobGFtYmRh
RXhwcmVzc2lvbi5kZXNjcmlwdG9yLnNlbGVjdG9yKSk7CisJCVN0cmluZyBrZXkgPSBuZXcgU3Ry
aW5nKGxhbWJkYUV4cHJlc3Npb24uZGVzY3JpcHRvci5jb21wdXRlVW5pcXVlS2V5KCkpOworCQlM
YW1iZGFNZXRob2QgbGFtYmRhTWV0aG9kID0gbWFrZShwYXJlbnQsIHNlbGVjdG9yLCBrZXksIGxh
bWJkYUV4cHJlc3Npb24uc291cmNlU3RhcnQsIGxhbWJkYUV4cHJlc3Npb24uc291cmNlRW5kLCBs
YW1iZGFFeHByZXNzaW9uLmFycm93UG9zaXRpb24sIHBhcmFtZXRlclR5cGVzLCBwYXJhbWV0ZXJO
YW1lcywgcmV0dXJuVHlwZSk7CisJCUlMb2NhbFZhcmlhYmxlIFtdIHBhcmFtZXRlcnMgPSBuZXcg
SUxvY2FsVmFyaWFibGVbbGVuZ3RoID0gbGFtYmRhRXhwcmVzc2lvbi5hcmd1bWVudHMubGVuZ3Ro
XTsKKwkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgeworCQkJQXJndW1lbnQgYXJn
dW1lbnQgPSBsYW1iZGFFeHByZXNzaW9uLmFyZ3VtZW50c1tpXTsKKwkJCVN0cmluZyBzaWduYXR1
cmUgPSBtYW5hZ2VyLmludGVybihuZXcgU3RyaW5nKGxhbWJkYUV4cHJlc3Npb24uZGVzY3JpcHRv
ci5wYXJhbWV0ZXJzW2ldLnNpZ25hdHVyZSgpKSk7CisJCQlwYXJhbWV0ZXJzW2ldID0gbmV3IExv
Y2FsVmFyaWFibGUoCisJCQkJCWxhbWJkYU1ldGhvZCwKKwkJCQkJbmV3IFN0cmluZyhhcmd1bWVu
dC5uYW1lKSwKKwkJCQkJYXJndW1lbnQuZGVjbGFyYXRpb25Tb3VyY2VTdGFydCwKKwkJCQkJYXJn
dW1lbnQuZGVjbGFyYXRpb25Tb3VyY2VFbmQsCisJCQkJCWFyZ3VtZW50LnNvdXJjZVN0YXJ0LAor
CQkJCQlhcmd1bWVudC5zb3VyY2VFbmQsCisJCQkJCXNpZ25hdHVyZSwKKwkJCQkJbnVsbCwgLy8g
d2UgYXJlIG5vdCBob29raW5nIHVwIGFyZ3VtZW50LmFubm90YXRpb25zIEFUTSwKKwkJCQkJYXJn
dW1lbnQubW9kaWZpZXJzLAorCQkJCQl0cnVlKTsKKwkJfQorCQlsYW1iZGFNZXRob2QuZWxlbWVu
dEluZm8uYXJndW1lbnRzID0gcGFyYW1ldGVyczsKKwkJcmV0dXJuIGxhbWJkYU1ldGhvZDsKKwl9
CisJCisJcHVibGljIHN0YXRpYyBMYW1iZGFNZXRob2QgbWFrZShKYXZhRWxlbWVudCBwYXJlbnQs
IFN0cmluZyBzZWxlY3RvciwgU3RyaW5nIGtleSwgaW50IHNvdXJjZVN0YXJ0LCBpbnQgc291cmNl
RW5kLCBpbnQgYXJyb3dQb3NpdGlvbiwgU3RyaW5nIFtdIHBhcmFtZXRlclR5cGVzLCBTdHJpbmcg
W10gcGFyYW1ldGVyTmFtZXMsIFN0cmluZyByZXR1cm5UeXBlKSB7CisJCVNvdXJjZU1ldGhvZElu
Zm8gaW5mbyA9IG5ldyBTb3VyY2VNZXRob2RJbmZvKCk7CisJCWluZm8uc2V0U291cmNlUmFuZ2VT
dGFydChzb3VyY2VTdGFydCk7CisJCWluZm8uc2V0U291cmNlUmFuZ2VFbmQoc291cmNlRW5kKTsK
KwkJaW5mby5zZXRGbGFncygwKTsKKwkJaW5mby5zZXROYW1lU291cmNlU3RhcnQoc291cmNlU3Rh
cnQpOworCQlpbmZvLnNldE5hbWVTb3VyY2VFbmQoYXJyb3dQb3NpdGlvbik7CisJCUphdmFNb2Rl
bE1hbmFnZXIgbWFuYWdlciA9IEphdmFNb2RlbE1hbmFnZXIuZ2V0SmF2YU1vZGVsTWFuYWdlcigp
OworCQlpbnQgbGVuZ3RoOworCQljaGFyW11bXSBhcmd1bWVudE5hbWVzID0gbmV3IGNoYXJbbGVu
Z3RoID0gcGFyYW1ldGVyTmFtZXMubGVuZ3RoXVtdOworCQlmb3IgKGludCBpID0gMDsgaSA8IGxl
bmd0aDsgaSsrKQorCQkJYXJndW1lbnROYW1lc1tpXSA9IG1hbmFnZXIuaW50ZXJuKHBhcmFtZXRl
ck5hbWVzW2ldLnRvQ2hhckFycmF5KCkpOworCQlpbmZvLnNldEFyZ3VtZW50TmFtZXMoYXJndW1l
bnROYW1lcyk7CisJCWluZm8uc2V0UmV0dXJuVHlwZShtYW5hZ2VyLmludGVybihyZXR1cm5UeXBl
LnRvQ2hhckFycmF5KCkpKTsKKwkJaW5mby5zZXRFeGNlcHRpb25UeXBlTmFtZXMoQ2hhck9wZXJh
dGlvbi5OT19DSEFSX0NIQVIpOworCQlpbmZvLmFyZ3VtZW50cyA9IG51bGw7IC8vIHdpbGwgYmUg
dXBkYXRlZCBzaG9ydGx5LCBwYXJlbnQgaGFzIHRvIGNvbWUgaW50byBleGlzdGVuY2UgZmlyc3Qu
CisJCXJldHVybiBuZXcgTGFtYmRhTWV0aG9kKHBhcmVudCwgc2VsZWN0b3IsIGtleSwgc291cmNl
U3RhcnQsIHBhcmFtZXRlclR5cGVzLCBwYXJhbWV0ZXJOYW1lcywgcmV0dXJuVHlwZSwgaW5mbyk7
CisJfQorCisJcHJvdGVjdGVkIHZvaWQgY2xvc2luZyhPYmplY3QgaW5mbykgeworCQkvLyBub3Ro
aW5nIHRvIGRvLgorCX0KKwkKKwlwdWJsaWMgYm9vbGVhbiBlcXVhbHMoT2JqZWN0IG8pIHsKKwkJ
aWYgKCEobyBpbnN0YW5jZW9mIExhbWJkYU1ldGhvZCkpIHJldHVybiBmYWxzZTsKKwkJTGFtYmRh
TWV0aG9kIHRoYXQgPSAoTGFtYmRhTWV0aG9kKSBvOworCQlyZXR1cm4gc3VwZXIuZXF1YWxzKG8p
ICYmIHRoaXMuc291cmNlU3RhcnQgPT0gdGhhdC5zb3VyY2VTdGFydDsKKwl9CisKKwlwdWJsaWMg
T2JqZWN0IGdldEVsZW1lbnRJbmZvKElQcm9ncmVzc01vbml0b3IgbW9uaXRvcikgdGhyb3dzIEph
dmFNb2RlbEV4Y2VwdGlvbiB7CisJCXJldHVybiB0aGlzLmVsZW1lbnRJbmZvOworCX0KKwkKKwlw
dWJsaWMgdm9pZCBnZXRIYW5kbGVNZW1lbnRvKFN0cmluZ0J1ZmZlciBidWZmKSB7CisJCSgoSmF2
YUVsZW1lbnQpIGdldFBhcmVudCgpKS5nZXRIYW5kbGVNZW1lbnRvKGJ1ZmYpOworCQljaGFyIGRl
bGltaXRlciA9IGdldEhhbmRsZU1lbWVudG9EZWxpbWl0ZXIoKTsKKwkJYnVmZi5hcHBlbmQoZGVs
aW1pdGVyKTsKKwkJZXNjYXBlTWVtZW50b05hbWUoYnVmZiwgZ2V0RWxlbWVudE5hbWUoKSk7CisJ
CWJ1ZmYuYXBwZW5kKEpFTV9DT1VOVCk7CisJCWJ1ZmYuYXBwZW5kKHRoaXMucGFyYW1ldGVyVHlw
ZXMubGVuZ3RoKTsKKwkJZm9yIChpbnQgaSA9IDAsIGxlbmd0aCA9IHRoaXMucGFyYW1ldGVyVHlw
ZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKKwkJCWJ1ZmYuYXBwZW5kKEpFTV9TVFJJTkcp
OworCQkJYnVmZi5hcHBlbmQodGhpcy5wYXJhbWV0ZXJUeXBlc1tpXSk7CisJCQlidWZmLmFwcGVu
ZChKRU1fU1RSSU5HKTsKKwkJCWJ1ZmYuYXBwZW5kKHRoaXMucGFyYW1ldGVyTmFtZVN0cmluZ3Nb
aV0pOworCQl9CisJCWJ1ZmYuYXBwZW5kKEpFTV9TVFJJTkcpOworCQlidWZmLmFwcGVuZCh0aGlz
LnJldHVyblR5cGVTdHJpbmcpOworCQlidWZmLmFwcGVuZChKRU1fU1RSSU5HKTsKKwkJYnVmZi5h
cHBlbmQodGhpcy5rZXkpOworCQlJTG9jYWxWYXJpYWJsZVtdIGFyZ3VtZW50cyA9IHRoaXMuZWxl
bWVudEluZm8uYXJndW1lbnRzOworCQlmb3IgKGludCBpID0gMCwgbGVuZ3RoID0gYXJndW1lbnRz
Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7CisJCQlMb2NhbFZhcmlhYmxlIGxvY2FsID0gKExv
Y2FsVmFyaWFibGUpIGFyZ3VtZW50c1tpXTsKKwkJCWxvY2FsLmdldEhhbmRsZU1lbWVudG8oYnVm
ZiwgZmFsc2UpOworCQl9CisJfQorCQorCXByb3RlY3RlZCBjaGFyIGdldEhhbmRsZU1lbWVudG9E
ZWxpbWl0ZXIoKSB7CisJCXJldHVybiBKYXZhRWxlbWVudC5KRU1fTEFNQkRBX01FVEhPRDsKKwl9
CisJCisJcHVibGljIFN0cmluZyBnZXRLZXkoKSB7CisJCXJldHVybiB0aGlzLmtleTsKKwl9CisJ
CisJcHVibGljIGludCBoYXNoQ29kZSgpIHsKKwkgICByZXR1cm4gVXRpbC5jb21iaW5lSGFzaENv
ZGVzKHN1cGVyLmhhc2hDb2RlKCksIHRoaXMuc291cmNlU3RhcnQpOworCX0KKwkKKwlwdWJsaWMg
Ym9vbGVhbiBpc1Jlc29sdmVkKCkgeworCQlyZXR1cm4gdHJ1ZTsgIC8vIHdlIG1haW50YWluIGVu
b3VnaCBpbmZvcm1hdGlvbiBzbyBhcyBub3QgdG8gbmVlZCBhbm90aGVyIGxheWVyIG9mIGFic3Ry
YWN0aW9uLgorCX0KKwkKKwlwdWJsaWMgSmF2YUVsZW1lbnQgcmVzb2x2ZWQoQmluZGluZyBiaW5k
aW5nKSB7CisJCXJldHVybiB0aGlzOworCX0KK30KXCBObyBuZXdsaW5lIGF0IGVuZCBvZiBmaWxl
CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29yZS9MYW1iZGFUeXBlRWxlbWVudEluZm8uamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0xhbWJkYVR5cGVFbGVt
ZW50SW5mby5qYXZhCmRlbGV0ZWQgZmlsZSBtb2RlIDEwMDY0NAppbmRleCA3ODZhMDhiLi4wMDAw
MDAwCi0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb3JlL0xhbWJkYVR5cGVFbGVtZW50SW5mby5qYXZhCisrKyAvZGV2L251bGwKQEAgLTEs
MTA3ICswLDAgQEAKLS8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIw
MTQgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCi0gKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBU
aGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCi0gKiBhcmUgbWFkZSBh
dmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYx
LjAKLSAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxh
YmxlIGF0Ci0gKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbAotICog
Ci0gKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmlj
YXRpb24gZGV2ZWxvcGVkIHVuZGVyIHRoZSBKYXZhCi0gKiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQ
KSBhbmQgaXMgbWFkZSBhdmFpbGFibGUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gcHVycG9z
ZXMKLSAqIG9ubHkuIFRoZSBjb2RlIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggYW55IHNwZWNpZmlj
YXRpb24gb2YgdGhlIEpDUC4KLSAqCi0gKiBDb250cmlidXRvcnM6Ci0gKiAgICAgSUJNIENvcnBv
cmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCi0gKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKi8KLXBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvcmU7Ci0KLWltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuY29yZS4qOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmNv
bXBpbGVyLkNoYXJPcGVyYXRpb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNv
bXBpbGVyLmVudi5JU291cmNlRmllbGQ7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFs
LmNvbXBpbGVyLmVudi5JU291cmNlTWV0aG9kOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRl
cm5hbC5jb21waWxlci5lbnYuSVNvdXJjZVR5cGU7Ci0KLS8qKgotICogRWxlbWVudCBpbmZvIGZv
ciBhbiBMYW1iZGFFeHByZXNzaW9uIGVsZW1lbnQgdGhhdCBvcmlnaW5hdGVkIGZyb20gc291cmNl
LgotICovCi1wdWJsaWMgY2xhc3MgTGFtYmRhVHlwZUVsZW1lbnRJbmZvIGV4dGVuZHMgU291cmNl
VHlwZUVsZW1lbnRJbmZvIHsKLQotCXByb3RlY3RlZCBMYW1iZGFFeHByZXNzaW9uIGxhbWJkYUhh
bmRsZSA9IG51bGw7Ci0JCi0JcHVibGljIExhbWJkYVR5cGVFbGVtZW50SW5mbyhMYW1iZGFFeHBy
ZXNzaW9uIGhhbmRsZSkgewotCQl0aGlzLmxhbWJkYUhhbmRsZSA9IGhhbmRsZTsKLQkJc2V0U291
cmNlUmFuZ2VTdGFydChoYW5kbGUubGFtYmRhRXhwcmVzc2lvbi5zb3VyY2VTdGFydCk7Ci0JCXNl
dFNvdXJjZVJhbmdlRW5kKGhhbmRsZS5sYW1iZGFFeHByZXNzaW9uLnNvdXJjZUVuZCk7Ci0JfQot
Ci0JcHVibGljIElKYXZhRWxlbWVudFtdIGdldENoaWxkcmVuKCkgewotCQlyZXR1cm4gbmV3IElK
YXZhRWxlbWVudCBbXSB7IHRoaXMubGFtYmRhSGFuZGxlLmdldE1ldGhvZCgpIH07Ci0JfQotCi0J
cHVibGljIElTb3VyY2VUeXBlIGdldEVuY2xvc2luZ1R5cGUoKSB7IC8vIEZJWE1FCi0JCUlKYXZh
RWxlbWVudCBwYXJlbnQ9IHRoaXMubGFtYmRhSGFuZGxlLmdldFBhcmVudCgpOwotCQlpZiAocGFy
ZW50ICE9IG51bGwgJiYgcGFyZW50LmdldEVsZW1lbnRUeXBlKCkgPT0gSUphdmFFbGVtZW50LlRZ
UEUpIHsKLQkJCXRyeSB7Ci0JCQkJcmV0dXJuIChJU291cmNlVHlwZSkoKEphdmFFbGVtZW50KXBh
cmVudCkuZ2V0RWxlbWVudEluZm8oKTsKLQkJCX0gY2F0Y2ggKEphdmFNb2RlbEV4Y2VwdGlvbiBl
KSB7Ci0JCQkJcmV0dXJuIG51bGw7Ci0JCQl9Ci0JCX0gZWxzZSB7Ci0JCQlyZXR1cm4gbnVsbDsK
LQkJfQotCX0KLQotCXB1YmxpYyBJU291cmNlRmllbGRbXSBnZXRGaWVsZHMoKSB7Ci0JCXJldHVy
biBuZXcgSVNvdXJjZUZpZWxkWzBdOwotCX0KLQotCXB1YmxpYyBjaGFyW10gZ2V0RmlsZU5hbWUo
KSB7Ci0JCXJldHVybiB0aGlzLmxhbWJkYUhhbmRsZS5nZXRQYXRoKCkudG9TdHJpbmcoKS50b0No
YXJBcnJheSgpOwotCX0KLQotCXB1YmxpYyBjaGFyW11bXSBnZXRJbnRlcmZhY2VOYW1lcygpIHsK
LQkJcmV0dXJuIG5ldyBjaGFyW11bXSB7IHRoaXMubGFtYmRhSGFuZGxlLmxhbWJkYUV4cHJlc3Np
b24uZGVzY3JpcHRvci5kZWNsYXJpbmdDbGFzcy5zb3VyY2VOYW1lKCkgfTsKLQl9Ci0KLQlwdWJs
aWMgSVNvdXJjZVR5cGVbXSBnZXRNZW1iZXJUeXBlcygpIHsKLQkJcmV0dXJuIG5ldyBJU291cmNl
VHlwZVswXTsKLQl9Ci0KLQlwdWJsaWMgSVNvdXJjZU1ldGhvZFtdIGdldE1ldGhvZHMoKSB7Ci0J
CUlTb3VyY2VNZXRob2QgW10gbWV0aG9kcyA9IG5ldyBJU291cmNlTWV0aG9kWzFdOwotCQlTb3Vy
Y2VNZXRob2Qgc291cmNlTWV0aG9kID0gdGhpcy5sYW1iZGFIYW5kbGUuZ2V0TWV0aG9kKCk7Ci0J
CXRyeSB7Ci0JCQltZXRob2RzWzBdID0gKElTb3VyY2VNZXRob2QpIHNvdXJjZU1ldGhvZC5nZXRF
bGVtZW50SW5mbygpOwotCQl9IGNhdGNoIChKYXZhTW9kZWxFeGNlcHRpb24gZSkgewotCQkJLy8g
aWdub3JlCi0JCX0KLQkJcmV0dXJuIG1ldGhvZHM7Ci0JfQotCQotCXB1YmxpYyBjaGFyW10gZ2V0
TmFtZSgpIHsKLQkJcmV0dXJuIHRoaXMubGFtYmRhSGFuZGxlLmdldEVsZW1lbnROYW1lKCkudG9D
aGFyQXJyYXkoKTsKLQl9Ci0KLQlwdWJsaWMgY2hhcltdIGdldFN1cGVyY2xhc3NOYW1lKCkgewot
CQlyZXR1cm4gIk9iamVjdCIudG9DaGFyQXJyYXkoKTsgLy8kTk9OLU5MUy0xJAotCX0KLQotCXB1
YmxpYyBjaGFyW11bXVtdIGdldFR5cGVQYXJhbWV0ZXJCb3VuZHMoKSB7Ci0JCXJldHVybiBuZXcg
Y2hhclswXVtdW107Ci0JfQotCi0JcHVibGljIGNoYXJbXVtdIGdldFR5cGVQYXJhbWV0ZXJOYW1l
cygpIHsKLQkJcmV0dXJuIENoYXJPcGVyYXRpb24uTk9fQ0hBUl9DSEFSOwotCX0KLQotCXB1Ymxp
YyBib29sZWFuIGlzQmluYXJ5VHlwZSgpIHsKLQkJcmV0dXJuIGZhbHNlOwotCX0KLQotCXB1Ymxp
YyBTdHJpbmcgdG9TdHJpbmcoKSB7Ci0JCXJldHVybiAiSW5mbyBmb3IgIiArIHRoaXMubGFtYmRh
SGFuZGxlLnRvU3RyaW5nKCk7IC8vJE5PTi1OTFMtMSQKLQl9Ci0KLQlwdWJsaWMgSVR5cGUgZ2V0
SGFuZGxlKCkgewotCQlyZXR1cm4gdGhpcy5sYW1iZGFIYW5kbGU7Ci0JfQotfQpcIE5vIG5ld2xp
bmUgYXQgZW5kIG9mIGZpbGUKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVs
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0xvY2FsVmFyaWFibGUuamF2YSBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0xvY2Fs
VmFyaWFibGUuamF2YQppbmRleCBiMzIwYWQwLi5jNGRlNjg1IDEwMDY0NAotLS0gYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9Mb2NhbFZh
cmlhYmxlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvcmUvTG9jYWxWYXJpYWJsZS5qYXZhCkBAIC0yNjgsNyArMjY4LDEyIEBA
CiAJICogQHNlZSBKYXZhRWxlbWVudCNnZXRIYW5kbGVNZW1lbnRvKFN0cmluZ0J1ZmZlcikKIAkg
Ki8KIAlwcm90ZWN0ZWQgdm9pZCBnZXRIYW5kbGVNZW1lbnRvKFN0cmluZ0J1ZmZlciBidWZmKSB7
Ci0JCSgoSmF2YUVsZW1lbnQpZ2V0UGFyZW50KCkpLmdldEhhbmRsZU1lbWVudG8oYnVmZik7CisJ
CWdldEhhbmRsZU1lbWVudG8oYnVmZiwgdHJ1ZSk7CisJfQorCQorCXByb3RlY3RlZCB2b2lkIGdl
dEhhbmRsZU1lbWVudG8oU3RyaW5nQnVmZmVyIGJ1ZmYsIGJvb2xlYW4gbWVtb2l6ZVBhcmVudCkg
eworCQlpZiAobWVtb2l6ZVBhcmVudCkgCisJCQkoKEphdmFFbGVtZW50KWdldFBhcmVudCgpKS5n
ZXRIYW5kbGVNZW1lbnRvKGJ1ZmYpOwogCQlidWZmLmFwcGVuZChnZXRIYW5kbGVNZW1lbnRvRGVs
aW1pdGVyKCkpOwogCQlidWZmLmFwcGVuZCh0aGlzLm5hbWUpOwogCQlidWZmLmFwcGVuZChKRU1f
Q09VTlQpOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvcmUvTWVtYmVyLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9t
b2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9NZW1iZXIuamF2YQppbmRleCBjM2Ey
MTU5Li5kYTZkODgzIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9NZW1iZXIuamF2YQorKysgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9NZW1iZXIuamF2YQpA
QCAtMTY2LDggKzE2Niw2IEBACiAgKiBAc2VlIElNZW1iZXIKICAqLwogcHVibGljIGludCBnZXRG
bGFncygpIHRocm93cyBKYXZhTW9kZWxFeGNlcHRpb24gewotCWlmICh0aGlzLnBhcmVudCBpbnN0
YW5jZW9mIExhbWJkYUV4cHJlc3Npb24pCi0JCXJldHVybiAwOwogCU1lbWJlckVsZW1lbnRJbmZv
IGluZm8gPSAoTWVtYmVyRWxlbWVudEluZm8pIGdldEVsZW1lbnRJbmZvKCk7CiAJcmV0dXJuIGlu
Zm8uZ2V0TW9kaWZpZXJzKCk7CiB9CkBAIC0xNzgsNiArMTc2LDI2IEBACiAJc3dpdGNoICh0b2tl
bi5jaGFyQXQoMCkpIHsKIAkJY2FzZSBKRU1fQ09VTlQ6CiAJCQlyZXR1cm4gZ2V0SGFuZGxlVXBk
YXRpbmdDb3VudEZyb21NZW1lbnRvKG1lbWVudG8sIHdvcmtpbmdDb3B5T3duZXIpOworCQljYXNl
IEpFTV9MQU1CREFfRVhQUkVTU0lPTjoKKwkJCWlmICghbWVtZW50by5oYXNNb3JlVG9rZW5zKCkp
IHJldHVybiB0aGlzOworCQkJU3RyaW5nIG5hbWUgPSBtZW1lbnRvLm5leHRUb2tlbigpOworCQkJ
aWYgKCFtZW1lbnRvLmhhc01vcmVUb2tlbnMoKSB8fCBtZW1lbnRvLm5leHRUb2tlbigpICE9IE1l
bWVudG9Ub2tlbml6ZXIuU1RSSU5HKQorCQkJCXJldHVybiB0aGlzOworCQkJaWYgKCFtZW1lbnRv
Lmhhc01vcmVUb2tlbnMoKSkgcmV0dXJuIHRoaXM7CisJCQlTdHJpbmcgaW50ZXJwaGFzZSA9IG1l
bWVudG8ubmV4dFRva2VuKCk7CisJCQlpZiAoIW1lbWVudG8uaGFzTW9yZVRva2VucygpIHx8IG1l
bWVudG8ubmV4dFRva2VuKCkgIT0gTWVtZW50b1Rva2VuaXplci5DT1VOVCkgCisJCQkJcmV0dXJu
IHRoaXM7CisJCQlpbnQgc291cmNlU3RhcnQgPSBJbnRlZ2VyLnBhcnNlSW50KG1lbWVudG8ubmV4
dFRva2VuKCkpOworCQkJaWYgKCFtZW1lbnRvLmhhc01vcmVUb2tlbnMoKSB8fCBtZW1lbnRvLm5l
eHRUb2tlbigpICE9IE1lbWVudG9Ub2tlbml6ZXIuQ09VTlQpIAorCQkJCXJldHVybiB0aGlzOwor
CQkJaW50IHNvdXJjZUVuZCA9IEludGVnZXIucGFyc2VJbnQobWVtZW50by5uZXh0VG9rZW4oKSk7
CisJCQlpZiAoIW1lbWVudG8uaGFzTW9yZVRva2VucygpIHx8IG1lbWVudG8ubmV4dFRva2VuKCkg
IT0gTWVtZW50b1Rva2VuaXplci5DT1VOVCkgCisJCQkJcmV0dXJuIHRoaXM7CisJCQlpbnQgYXJy
b3dQb3NpdGlvbiA9IEludGVnZXIucGFyc2VJbnQobWVtZW50by5uZXh0VG9rZW4oKSk7CisJCQlp
ZiAoIW1lbWVudG8uaGFzTW9yZVRva2VucygpIHx8IG1lbWVudG8ubmV4dFRva2VuKCkgIT0gTWVt
ZW50b1Rva2VuaXplci5MQU1CREFfTUVUSE9EKSAKKwkJCQlyZXR1cm4gdGhpczsKKwkJCUxhbWJk
YUV4cHJlc3Npb24gZXhwcmVzc2lvbiA9IG5ldyBMYW1iZGFFeHByZXNzaW9uKHRoaXMsIG5hbWUs
IGludGVycGhhc2UsIHNvdXJjZVN0YXJ0LCBzb3VyY2VFbmQsIGFycm93UG9zaXRpb24pOworCQkJ
cmV0dXJuIGV4cHJlc3Npb24uZ2V0SGFuZGxlRnJvbU1lbWVudG8odG9rZW4sIG1lbWVudG8sIHdv
cmtpbmdDb3B5T3duZXIpOwogCQljYXNlIEpFTV9UWVBFOgogCQkJU3RyaW5nIHR5cGVOYW1lOwog
CQkJaWYgKG1lbWVudG8uaGFzTW9yZVRva2VucygpKSB7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9TZWxlY3Rpb25S
ZXF1ZXN0b3IuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb3JlL1NlbGVjdGlvblJlcXVlc3Rvci5qYXZhCmluZGV4IGYyMjQ2NjguLmRl
Mzk2NmMgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb3JlL1NlbGVjdGlvblJlcXVlc3Rvci5qYXZhCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL1NlbGVjdGlv
blJlcXVlc3Rvci5qYXZhCkBAIC0xNSw2ICsxNSw4IEBACiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpk
dC5pbnRlcm5hbC5jb3JlOwogCiBpbXBvcnQgamF2YS51dGlsLkFycmF5TGlzdDsKK2ltcG9ydCBq
YXZhLnV0aWwuSGFzaE1hcDsKK2ltcG9ydCBqYXZhLnV0aWwuSGFzaFNldDsKIAogaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5jb3JlLkZsYWdzOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLklD
b21waWxhdGlvblVuaXQ7CkBAIC00NDQsOSArNDQ2LDE2IEBACiAJCX0KIAl9CiB9Ci1wdWJsaWMg
dm9pZCBhY2NlcHRMb2NhbFZhcmlhYmxlKExvY2FsVmFyaWFibGVCaW5kaW5nIGJpbmRpbmcpIHsK
K3B1YmxpYyB2b2lkIGFjY2VwdExvY2FsVmFyaWFibGUoTG9jYWxWYXJpYWJsZUJpbmRpbmcgYmlu
ZGluZywgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmVudi5JQ29tcGlsYXRpb25V
bml0IHVuaXQpIHsKIAlMb2NhbERlY2xhcmF0aW9uIGxvY2FsID0gYmluZGluZy5kZWNsYXJhdGlv
bjsKLQlJSmF2YUVsZW1lbnQgcGFyZW50ID0gZmluZExvY2FsRWxlbWVudChsb2NhbC5zb3VyY2VT
dGFydCk7IC8vIGZpbmRMb2NhbEVsZW1lbnQoKSBjYW5ub3QgZmluZCBsb2NhbCB2YXJpYWJsZQor
CUlKYXZhRWxlbWVudCBwYXJlbnQgPSBudWxsOworCWlmIChiaW5kaW5nLmRlY2xhcmluZ1Njb3Bl
LmlzTGFtYmRhU3Vic2NvcGUoKSAmJiB1bml0IGluc3RhbmNlb2YgSUNvbXBpbGF0aW9uVW5pdCkg
eworCQlIYXNoU2V0IGV4aXN0aW5nRWxlbWVudHMgPSBuZXcgSGFzaFNldCgpOworCQlIYXNoTWFw
IGtub3duU2NvcGVzID0gbmV3IEhhc2hNYXAoKTsKKwkJcGFyZW50ID0gdGhpcy5oYW5kbGVGYWN0
b3J5LmNyZWF0ZUVsZW1lbnQoYmluZGluZy5kZWNsYXJpbmdTY29wZSwgbG9jYWwuc291cmNlU3Rh
cnQsIChJQ29tcGlsYXRpb25Vbml0KSB1bml0LCBleGlzdGluZ0VsZW1lbnRzLCBrbm93blNjb3Bl
cyk7CisJfSBlbHNlIHsJCQorCQlwYXJlbnQgPSBmaW5kTG9jYWxFbGVtZW50KGxvY2FsLnNvdXJj
ZVN0YXJ0KTsgLy8gZmluZExvY2FsRWxlbWVudCgpIGNhbm5vdCBmaW5kIGxvY2FsIHZhcmlhYmxl
CisJfQogCUxvY2FsVmFyaWFibGUgbG9jYWxWYXIgPSBudWxsOwogCWlmKHBhcmVudCAhPSBudWxs
KSB7CiAJCWxvY2FsVmFyID0gbmV3IExvY2FsVmFyaWFibGUoCmRpZmYgLS1naXQgYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9Tb3VyY2VN
ZXRob2QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb3JlL1NvdXJjZU1ldGhvZC5qYXZhCmluZGV4IGQ0MmEyMWIuLjAwMDI2YWIgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb3JlL1NvdXJjZU1ldGhvZC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21v
ZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL1NvdXJjZU1ldGhvZC5qYXZhCkBAIC0x
ODUsMTAgKzE4NSw2IEBACiAgKiBAc2VlIElNZXRob2QKICAqLwogcHVibGljIFN0cmluZyBnZXRS
ZXR1cm5UeXBlKCkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbiB7Ci0JaWYgKHRoaXMucGFyZW50
IGluc3RhbmNlb2YgTGFtYmRhRXhwcmVzc2lvbikgewotCQlMYW1iZGFFeHByZXNzaW9uIGxlID0g
KExhbWJkYUV4cHJlc3Npb24pIHRoaXMucGFyZW50OwotCQlyZXR1cm4gbmV3IFN0cmluZyhsZS5s
YW1iZGFFeHByZXNzaW9uLmRlc2NyaXB0b3IucmV0dXJuVHlwZS5zaWduYXR1cmUoKSk7Ci0JfQog
CVNvdXJjZU1ldGhvZEVsZW1lbnRJbmZvIGluZm8gPSAoU291cmNlTWV0aG9kRWxlbWVudEluZm8p
IGdldEVsZW1lbnRJbmZvKCk7CiAJcmV0dXJuIFNpZ25hdHVyZS5jcmVhdGVUeXBlU2lnbmF0dXJl
KGluZm8uZ2V0UmV0dXJuVHlwZU5hbWUoKSwgZmFsc2UpOwogfQpkaWZmIC0tZ2l0IGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvU291cmNl
VHlwZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvcmUvU291cmNlVHlwZS5qYXZhCmluZGV4IDJhZjVhMGMuLjc5NDczMTUgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb3JlL1NvdXJjZVR5cGUuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9Tb3VyY2VUeXBlLmphdmEKQEAgLTMzNiw2ICsz
MzYsNyBAQAogCQkJcGFyYW1zLnRvQXJyYXkocGFyYW1ldGVycyk7CiAJCQlKYXZhRWxlbWVudCBt
ZXRob2QgPSAoSmF2YUVsZW1lbnQpZ2V0TWV0aG9kKHNlbGVjdG9yLCBwYXJhbWV0ZXJzKTsKIAkJ
CXN3aXRjaCAodG9rZW4uY2hhckF0KDApKSB7CisJCQkJY2FzZSBKRU1fTEFNQkRBX0VYUFJFU1NJ
T046CiAJCQkJY2FzZSBKRU1fVFlQRToKIAkJCQljYXNlIEpFTV9UWVBFX1BBUkFNRVRFUjoKIAkJ
CQljYXNlIEpFTV9MT0NBTFZBUklBQkxFOgpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvdXRpbC9IYW5kbGVGYWN0b3J5
LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29yZS91dGlsL0hhbmRsZUZhY3RvcnkuamF2YQppbmRleCA1YTEwODlmLi4xN2I2MGVhIDEw
MDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29yZS91dGlsL0hhbmRsZUZhY3RvcnkuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS91dGlsL0hhbmRsZUZhY3Rv
cnkuamF2YQpAQCAtMTczLDcgKzE3Myw3IEBACiAJLyoqCiAJICogQ3JlYXRlIGhhbmRsZSBieSBh
ZGRpbmcgY2hpbGQgdG8gcGFyZW50IG9idGFpbmVkIGJ5IHJlY3Vyc2luZyBpbnRvIHBhcmVudCBz
Y29wZXMuCiAJICovCi0JcHJpdmF0ZSBJSmF2YUVsZW1lbnQgY3JlYXRlRWxlbWVudChTY29wZSBz
Y29wZSwgaW50IGVsZW1lbnRQb3NpdGlvbiwgSUNvbXBpbGF0aW9uVW5pdCB1bml0LCBIYXNoU2V0
IGV4aXN0aW5nRWxlbWVudHMsIEhhc2hNYXAga25vd25TY29wZXMpIHsKKwlwdWJsaWMgSUphdmFF
bGVtZW50IGNyZWF0ZUVsZW1lbnQoU2NvcGUgc2NvcGUsIGludCBlbGVtZW50UG9zaXRpb24sIElD
b21waWxhdGlvblVuaXQgdW5pdCwgSGFzaFNldCBleGlzdGluZ0VsZW1lbnRzLCBIYXNoTWFwIGtu
b3duU2NvcGVzKSB7CiAJCUlKYXZhRWxlbWVudCBuZXdFbGVtZW50ID0gKElKYXZhRWxlbWVudClr
bm93blNjb3Blcy5nZXQoc2NvcGUpOwogCQlpZiAobmV3RWxlbWVudCAhPSBudWxsKSByZXR1cm4g
bmV3RWxlbWVudDsKIApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvdXRpbC9NZW1lbnRvVG9rZW5pemVyLmphdmEgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS91
dGlsL01lbWVudG9Ub2tlbml6ZXIuamF2YQppbmRleCA4NmY5NmYyLi41MjljNjVmIDEwMDY0NAot
LS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29yZS91dGlsL01lbWVudG9Ub2tlbml6ZXIuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS91dGlsL01lbWVudG9Ub2tlbml6
ZXIuamF2YQpAQCAtMjgsNiArMjgsOSBAQAogCXB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIExP
Q0FMVkFSSUFCTEUgPSBDaGFyYWN0ZXIudG9TdHJpbmcoSmF2YUVsZW1lbnQuSkVNX0xPQ0FMVkFS
SUFCTEUpOwogCXB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIFRZUEVfUEFSQU1FVEVSID0gQ2hh
cmFjdGVyLnRvU3RyaW5nKEphdmFFbGVtZW50LkpFTV9UWVBFX1BBUkFNRVRFUik7CiAJcHVibGlj
IHN0YXRpYyBmaW5hbCBTdHJpbmcgQU5OT1RBVElPTiA9IENoYXJhY3Rlci50b1N0cmluZyhKYXZh
RWxlbWVudC5KRU1fQU5OT1RBVElPTik7CisJcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgTEFN
QkRBX0VYUFJFU1NJT04gPSBDaGFyYWN0ZXIudG9TdHJpbmcoSmF2YUVsZW1lbnQuSkVNX0xBTUJE
QV9FWFBSRVNTSU9OKTsKKwlwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBMQU1CREFfTUVUSE9E
ID0gQ2hhcmFjdGVyLnRvU3RyaW5nKEphdmFFbGVtZW50LkpFTV9MQU1CREFfTUVUSE9EKTsKKwlw
dWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBTVFJJTkcgPSBDaGFyYWN0ZXIudG9TdHJpbmcoSmF2
YUVsZW1lbnQuSkVNX1NUUklORyk7CiAKIAlwcml2YXRlIGZpbmFsIGNoYXJbXSBtZW1lbnRvOwog
CXByaXZhdGUgZmluYWwgaW50IGxlbmd0aDsKQEAgLTc1LDYgKzc4LDEyIEBACiAJCQkJcmV0dXJu
IFBBQ0tBR0VERUNMQVJBVElPTjsKIAkJCWNhc2UgSmF2YUVsZW1lbnQuSkVNX0lNUE9SVERFQ0xB
UkFUSU9OOgogCQkJCXJldHVybiBJTVBPUlRERUNMQVJBVElPTjsKKwkJCWNhc2UgSmF2YUVsZW1l
bnQuSkVNX0xBTUJEQV9FWFBSRVNTSU9OOgorCQkJCXJldHVybiBMQU1CREFfRVhQUkVTU0lPTjsK
KwkJCWNhc2UgSmF2YUVsZW1lbnQuSkVNX0xBTUJEQV9NRVRIT0Q6CisJCQkJcmV0dXJuIExBTUJE
QV9NRVRIT0Q7CisJCQljYXNlIEphdmFFbGVtZW50LkpFTV9TVFJJTkc6CisJCQkJcmV0dXJuIFNU
UklORzsKIAkJCWNhc2UgSmF2YUVsZW1lbnQuSkVNX0xPQ0FMVkFSSUFCTEU6CiAJCQkJcmV0dXJu
IExPQ0FMVkFSSUFCTEU7CiAJCQljYXNlIEphdmFFbGVtZW50LkpFTV9UWVBFX1BBUkFNRVRFUjoK
QEAgLTEwMiw2ICsxMTEsOSBAQAogCQkJCWNhc2UgSmF2YUVsZW1lbnQuSkVNX1BBQ0tBR0VERUNM
QVJBVElPTjoKIAkJCQljYXNlIEphdmFFbGVtZW50LkpFTV9JTVBPUlRERUNMQVJBVElPTjoKIAkJ
CQljYXNlIEphdmFFbGVtZW50LkpFTV9MT0NBTFZBUklBQkxFOgorCQkJCWNhc2UgSmF2YUVsZW1l
bnQuSkVNX0xBTUJEQV9FWFBSRVNTSU9OOgorCQkJCWNhc2UgSmF2YUVsZW1lbnQuSkVNX0xBTUJE
QV9NRVRIT0Q6CQorCQkJCWNhc2UgSmF2YUVsZW1lbnQuSkVNX1NUUklORzoKIAkJCQljYXNlIEph
dmFFbGVtZW50LkpFTV9UWVBFX1BBUkFNRVRFUjoKIAkJCQljYXNlIEphdmFFbGVtZW50LkpFTV9B
Tk5PVEFUSU9OOgogCQkJCQlicmVhayBsb29wOw==
</data>

          </attachment>
      

    </bug>

</bugzilla>