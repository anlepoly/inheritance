<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>427072</bug_id>
          
          <creation_ts>2014-01-30 23:46:00 -0500</creation_ts>
          <short_desc>[1.8][compiler] Regression since fix of bug 423505: Method is ambiguous for type X</short_desc>
          <delta_ts>2014-01-31 04:01:04 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>jarthana</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2356947</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-30 23:46:35 -0500</bug_when>
    <thetext>We don&apos;t compile this code anymore:

// --
interface I {
    Object m(X t);
}
interface J extends I {
}
class X {
    int foo()  { return 0; }
    int test() {
        return foo(X::foo);
    }
    int foo(I i) {return 0;}
    int foo(J j) { return 1;}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2356964</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-31 02:08:58 -0500</bug_when>
    <thetext>I have this under control, know the problem, have a fix. Will take over.
Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2356980</commentid>
    <comment_count>2</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-01-31 02:58:31 -0500</bug_when>
    <thetext>When you testing the fix, please consider this slightly different test case as well:

    int foo1()  { return 0; }
    int foo2()  { return 0; }
    int test(boolean b) {
        return foo(b ? X::foo1 : X::foo2);
    }

Note the ternary in this code.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2357001</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-31 03:57:33 -0500</bug_when>
    <thetext>Fix and tests released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=e6d1c8eac73b65997182b9feaba7e190099afd1a.

Note to self: Write junits for even obviously correctly functioning code,
not just for where we need to discriminate based on the new spec :(</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>