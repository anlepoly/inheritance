<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>399224</bug_id>
          
          <creation_ts>2013-01-28 02:57:00 -0500</creation_ts>
          <short_desc>[1.8][compiler][internal] Implement TypeBinding.getSingleAbstractMethod</short_desc>
          <delta_ts>2013-02-06 07:47:13 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          <dependson>399263</dependson>
          <blocked>382701</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>jarthana</cc>
    
    <cc>jesper</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2208379</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-01-28 02:57:30 -0500</bug_when>
    <thetext>BETA_JAVA8:

From https://bugs.eclipse.org/bugs/show_bug.cgi?id=382701#c17:

// Stuff ...

(2) Implementation of a skeleton method for TypeBinding#getSingleAbstractMethod
(returns null or a PMB) and ReferenceBinding#getSingleAbstractMethod. The 
latter could at this point return null for non-interfaces and for interfaces
could ignore inheritance, object method redefinitions etc. If no single method
could be found, this method should ideally return a ProblemMethodBinding
with ProblemReasons set to NoSuchSingleAbstractMethod. 

// Stuff ...

While that bug will put in place the skeleton, the present one is tighten
the implementation and take care of all the myriad details.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2208380</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-01-28 02:57:58 -0500</bug_when>
    <thetext>Anirbhan, please follow up on a priority basis.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2208451</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-01-28 05:56:56 -0500</bug_when>
    <thetext>This work would be greatly simplified if we could turn org.eclipse.jdt.internal.compiler.lookup.MethodVerifier.doesMethodOverride(MethodBinding, MethodBinding) into a static method. This will have quite a bit of ripples
but I think it would save us huge trouble and is worth trying instead of
duplicating code.

org.eclipse.jdt.internal.compiler.lookup.Scope.getJavaLangObject() would
also come in handy.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2208454</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-01-28 06:01:42 -0500</bug_when>
    <thetext>(In reply to comment #2)
&gt; This work would be greatly simplified if we could turn
&gt; org.eclipse.jdt.internal.compiler.lookup.MethodVerifier.
&gt; doesMethodOverride(MethodBinding, MethodBinding) into a static method.

We may have to tunnel scope/environment through a bunch of methods.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2208478</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-01-28 07:10:32 -0500</bug_when>
    <thetext>(In reply to comment #2)
&gt; This work would be greatly simplified if we could turn
&gt; org.eclipse.jdt.internal.compiler.lookup.MethodVerifier.
&gt; doesMethodOverride(MethodBinding, MethodBinding) into a static method. This
&gt; will have quite a bit of ripples
&gt; but I think it would save us huge trouble and is worth trying instead of
&gt; duplicating code.

Actually, this is a bit tricky. We never instantiate MethodVerifier anymore
and MethodVerifier and MethodVerifier15 should be merged ideally into
MethodVerifier itself, but now may not be the right time for that task 
and unless we merge them, method dispatch will break for those methods 
converted to static since all clients typically use MethodVerifier as the reference/handle.

So we need to take a look at the set of methods that need to be turned into
static ones, look at their call sites to see if anyone super calls them, inline
the code in those places, if not delete the instance method altogether and
bubble up the MethodVerifier15&apos;s implementation to the super class.

// ----------

A simpler approach would simply be to instantiate a method verifier and
invoke the doesMethodOverride call on it. The only problem is that method
verifier&apos;s various methods expect to operate on a source type, but I am fairly
certain the code paths we need would not rely irreconcilably on the type
field.

Still, the original plan of converting them into statics would be the
most rigorous way of satisfying ourselves that there are no side effects.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2208566</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-01-28 09:27:19 -0500</bug_when>
    <thetext>(In reply to comment #2)
&gt; This work would be greatly simplified if we could turn
&gt; org.eclipse.jdt.internal.compiler.lookup.MethodVerifier.
&gt; doesMethodOverride(MethodBinding, MethodBinding) into a static method.

Raised bug 399263 to track this. Anirbhan, please follow up.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2209058</commentid>
    <comment_count>6</comment_count>
    <who name="ANIRBAN CHAKRABORTY">anchakrk</who>
    <bug_when>2013-01-29 00:25:44 -0500</bug_when>
    <thetext>Hello,
Provided the skeleton (as specified in this bug) to Srikanth. Working on making the functional interface verifier more exxhaustive.
Thanks
Anirban</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2210934</commentid>
    <comment_count>7</comment_count>
      <attachid>226440</attachid>
    <who name="ANIRBAN CHAKRABORTY">anchakrk</who>
    <bug_when>2013-02-01 02:10:37 -0500</bug_when>
    <thetext>Created attachment 226440
getSingleAbstractMethod is doing override check

Hello,
This patch enriches getSingleAbstractMethod to use the override check. This patch passes the regression with no failure.
Thanks
Anirban</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2211023</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-01 06:30:27 -0500</bug_when>
    <thetext>(In reply to comment #7)
&gt; Created attachment 226440 [details]
&gt; getSingleAbstractMethod is doing override check
&gt; 
&gt; Hello,
&gt; This patch enriches getSingleAbstractMethod to use the override check. This
&gt; patch passes the regression with no failure.
&gt; Thanks
&gt; Anirban

Anirban, There are a bunch of problems with this patch both major and minor.

(1) The patch does not apply. Always pull from repository before creating
a patch.
(2) The method completely ignores super types and fails even for basic tests:
The following program should fail since I is NOT a functional interface, but
the patch incorrectly tags it as a functional interface:

// ---
interface J {
	void another();
}
interface I extends J {
	void doit();
}
public class X {
	static void foo() {
		I i = this::foo;
	}
}

javac correctly complains:
C:\jtests&gt;C:\work\lambda-8-b74-windows-x64-21_jan_2013\bin\javac -cp c:\jtests X
.java
X.java:9: error: incompatible types: I is not a functional interface
                I i = () -&gt; {}; // new
                      ^
    multiple non-overriding abstract methods found in interface I
1 error

(3) Overriding is a concept that occurs across class boundaries. A class&apos;s
methods cannot override each other, so much of the code there is suspect.

(4) for(int indx = 0; indx &lt; methodArray.length ; indx++):
would have been better with index variable being &apos;i&apos; and the length extracted
into a local variable instead of being computed afresh each time - it is
loop invariant.

(5) The algorithm could be constructed so it can terminate way earlier.

(6) You need to add junits. Without tests, no code can be released.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2211452</commentid>
    <comment_count>9</comment_count>
      <attachid>226481</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-03 09:35:45 -0500</bug_when>
    <thetext>Created attachment 226481
Alternate work in progress - minimally tested</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2211485</commentid>
    <comment_count>10</comment_count>
      <attachid>226483</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-03 14:55:02 -0500</bug_when>
    <thetext>Created attachment 226483
Alternate patch - more evolved.

Except for intersection types in casts for which grammar support is lacking
this patch should do the trick for computation of functional descriptor.

Tests are still lacking.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2211536</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-04 03:44:13 -0500</bug_when>
    <thetext>Released the implementation via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=5138a70372af4817aefdd3da44dfadf7f7557bf3.

Leaving this bug open until tests are written and released.

This work computes the functional descriptor of a functional interface and
the parameterization of a functional interface.

Intersection types will be dealt with in bug 399773.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2212900</commentid>
    <comment_count>12</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-06 07:45:41 -0500</bug_when>
    <thetext>Fix and tests released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=0848b8a6a9afff16623dfc6b0821adb833326b41</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>226440</attachid>
            <date>2013-02-01 02:10:00 -0500</date>
            <delta_ts>2013-02-06 07:47:13 -0500</delta_ts>
            <desc>getSingleAbstractMethod is doing override check</desc>
            <filename>overridecheck399224_eclipse.jdt.core.patch</filename>
            <type>text/plain</type>
            <size>3727</size>
            <attacher name="ANIRBAN CHAKRABORTY">anchakrk</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUHJvYmxlbVJlYXNvbnMuamF2YSBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9s
b29rdXAvUHJvYmxlbVJlYXNvbnMuamF2YQppbmRleCA0MzczNjg3Li4yYWY3MDRlIDEwMDY0NAot
LS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvbG9va3VwL1Byb2JsZW1SZWFzb25zLmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1
cC9Qcm9ibGVtUmVhc29ucy5qYXZhCkBAIC0yNiw2ICsyNiw3IEBACiAJZmluYWwgaW50IFBhcmFt
ZXRlcml6ZWRNZXRob2RUeXBlTWlzbWF0Y2ggPSAxMjsgLy8gZm9yIGdlbmVyaWMgbWV0aG9kCiAJ
ZmluYWwgaW50IFR5cGVBcmd1bWVudHNGb3JSYXdHZW5lcmljTWV0aG9kID0gMTM7IC8vIGZvciBn
ZW5lcmljIG1ldGhvZAogCWZpbmFsIGludCBJbnZhbGlkVHlwZUZvclN0YXRpY0ltcG9ydCA9IDE0
OwogCWZpbmFsIGludCBJbnZhbGlkVHlwZUZvckF1dG9NYW5hZ2VkUmVzb3VyY2UgPSAxNTsKIAlm
aW5hbCBpbnQgVmFyYXJnc0VsZW1lbnRUeXBlTm90VmlzaWJsZSA9IDE2OworCWZpbmFsIGludCBO
b1N1Y2hTaW5nbGVBYnN0cmFjdE1ldGhvZCA9IDE3OwogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xv
b2t1cC9SZWZlcmVuY2VCaW5kaW5nLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1JlZmVyZW5jZUJpbmRp
bmcuamF2YQppbmRleCA3M2UwMWJkLi4wOGIzMjNkIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3Vw
L1JlZmVyZW5jZUJpbmRpbmcuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1JlZmVyZW5jZUJpbmRp
bmcuamF2YQpAQCAtMjcsMTAgKzI3LDExIEBACiAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29y
ZS5jb21waWxlci5DaGFyT3BlcmF0aW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5h
bC5jb21waWxlci5hc3QuTWV0aG9kRGVjbGFyYXRpb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmludGVybmFsLmNvbXBpbGVyLmNsYXNzZm10LkNsYXNzRmlsZUNvbnN0YW50czsKIGltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIudXRpbC5TaW1wbGVMb29rdXBUYWJsZTsK
K2ltcG9ydCBqYXZhLnV0aWwuKjsKIAogLyoKIE5vdCBhbGwgZmllbGRzIGRlZmluZWQgYnkgdGhp
cyB0eXBlICgmIGl0cyBzdWJjbGFzc2VzKSBhcmUgaW5pdGlhbGl6ZWQgd2hlbiBpdCBpcyBjcmVh
dGVkLgogU29tZSBhcmUgaW5pdGlhbGl6ZWQgb25seSB3aGVuIG5lZWRlZC4KIApAQCAtMTU2OSw5
ICsxNTcwLDQ5IEBACiAJfQogCWludCBsID0gVHlwZUNvbnN0YW50cy5PVEhFUl9XUkFQUEVSX0NM
T1NFQUJMRVMubGVuZ3RoOwogCWZvciAoaW50IGkgPSAwOyBpIDwgbDsgaSsrKSB7CiAJCWlmIChD
aGFyT3BlcmF0aW9uLmVxdWFscyh0aGlzLmNvbXBvdW5kTmFtZSwgVHlwZUNvbnN0YW50cy5PVEhF
Ul9XUkFQUEVSX0NMT1NFQUJMRVNbaV0pKQogCQkJcmV0dXJuIFR5cGVJZHMuQml0V3JhcHBlckNs
b3NlYWJsZTsKKwkJCiAJfQkKIAlyZXR1cm4gMDsKIH0KKworcHVibGljIE1ldGhvZEJpbmRpbmcg
Z2V0U2luZ2xlQWJzdHJhY3RNZXRob2QoU2NvcGUgc2NvcGUpIHsKKwlpZiAodGhpcy5pc0ludGVy
ZmFjZSgpKSB7CisJCU1ldGhvZEJpbmRpbmcgW10gbWV0aG9kQXJyYXkgPSBtZXRob2RzKCk7CisJ
CWlmKG1ldGhvZEFycmF5ICE9IG51bGwgJiYgbWV0aG9kQXJyYXkubGVuZ3RoID09IDEpeworCQkJ
cmV0dXJuIG1ldGhvZEFycmF5WzBdOworCQl9CisJCWVsc2UgeworCQkJU2V0IHRlbXBNZXRob2RT
ZXQgPSBuZXcgSGFzaFNldCgpOworCQkJZm9yKGludCBpbmR4ID0gMDsgaW5keCA8IG1ldGhvZEFy
cmF5Lmxlbmd0aCA7IGluZHgrKykgeworCQkJCXRlbXBNZXRob2RTZXQuYWRkKG1ldGhvZEFycmF5
W2luZHhdKTsKKwkJCX0KKwkJCVNldCByZW1vdmVTZXQgPSBuZXcgSGFzaFNldCgpOworCQkJZm9y
KGludCBpbmR4ID0gMDsgaW5keCA8IG1ldGhvZEFycmF5Lmxlbmd0aCA7IGluZHgrKykgeworCQkJ
CU1ldGhvZEJpbmRpbmcgbWIgPSBtZXRob2RBcnJheVtpbmR4XTsKKwkJCQlpZih0ZW1wTWV0aG9k
U2V0LmNvbnRhaW5zKG1iKSkgeworCQkJCQlyZW1vdmVTZXQuY2xlYXIoKTsKKwkJCQkJSXRlcmF0
b3IgaXRlciA9IHRlbXBNZXRob2RTZXQuaXRlcmF0b3IoKTsKKwkJCQkJd2hpbGUoaXRlci5oYXNO
ZXh0KCkpIHsKKwkJCQkJCU1ldGhvZEJpbmRpbmcgbWIxID0gKE1ldGhvZEJpbmRpbmcpaXRlci5u
ZXh0KCk7CisJCQkJCQlpZihtYiAhPSBtYjEgICYmICBNZXRob2RWZXJpZmllci5kb2VzTWV0aG9k
T3ZlcnJpZGUobWIsIG1iMSwgc2NvcGUuZW52aXJvbm1lbnQoKSkpIHsKKwkJCQkJCQlyZW1vdmVT
ZXQuYWRkKG1iMSk7CisJCQkJCQl9CisJCQkJCX0KKwkJCQkJdGVtcE1ldGhvZFNldC5yZW1vdmVB
bGwocmVtb3ZlU2V0KTsKKwkJCQl9CisJCQl9CisJCQlpZih0ZW1wTWV0aG9kU2V0LnNpemUoKSA9
PSAxKSB7CisJCQkJcmV0dXJuIChNZXRob2RCaW5kaW5nKSB0ZW1wTWV0aG9kU2V0Lml0ZXJhdG9y
KCkubmV4dCgpOworCQkJfQorCQkJZWxzZSB7CisJCQkJcmV0dXJuIG5ldyBQcm9ibGVtTWV0aG9k
QmluZGluZyhDaGFyT3BlcmF0aW9uLk5PX0NIQVIsIG51bGwsIFByb2JsZW1SZWFzb25zLk5vU3Vj
aFNpbmdsZUFic3RyYWN0TWV0aG9kKTsKKwkJCX0KKwkJfQorCX0KKwllbHNlIAorCQlyZXR1cm4g
bnVsbDsKKwogfQorfQpcIE5vIG5ld2xpbmUgYXQgZW5kIG9mIGZpbGUKZGlmZiAtLWdpdCBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9sb29rdXAvVHlwZUJpbmRpbmcuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvVHlwZUJpbmRpbmcu
amF2YQppbmRleCAxMGQzZTQ4Li5lMmE1M2YxIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1R5
cGVCaW5kaW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9UeXBlQmluZGluZy5qYXZhCkBAIC0x
MjIzLDYgKzEyMjMsMTAgQEAKIH0KIAogcHVibGljIFR5cGVWYXJpYWJsZUJpbmRpbmdbXSB0eXBl
VmFyaWFibGVzKCkgewogCXJldHVybiBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTOwogfQorCitw
dWJsaWMgTWV0aG9kQmluZGluZyBnZXRTaW5nbGVBYnN0cmFjdE1ldGhvZChTY29wZSBzY29wZSkg
eworCXJldHVybiBudWxsOworfQogfQ==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>226481</attachid>
            <date>2013-02-03 09:35:00 -0500</date>
            <delta_ts>2013-02-03 14:53:08 -0500</delta_ts>
            <desc>Alternate work in progress - minimally tested</desc>
            <filename>patch.txt</filename>
            <type>text/plain</type>
            <size>16688</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvRnVuY3Rpb25hbEV4cHJlc3Npb24uamF2YSBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hc3QvRnVuY3Rpb25hbEV4cHJlc3Npb24uamF2YQppbmRleCA1MzAwOGVkLi4xYmM4OGY3IDEw
MDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L0Z1bmN0aW9uYWxFeHByZXNzaW9uLmphdmEKKysrIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9GdW5jdGlvbmFsRXhwcmVzc2lvbi5qYXZhCkBAIC00Nyw3ICs0Nyw3IEBACiAJCiAJ
cHVibGljIC8qIEBOb25OdWxsICovIFR5cGVCaW5kaW5nIHJlc29sdmVUeXBlKEJsb2NrU2NvcGUg
YmxvY2tTY29wZSkgewogCQl0aGlzLmNvbnN0YW50ID0gQ29uc3RhbnQuTm90QUNvbnN0YW50Owot
CQl0aGlzLnNpbmdsZUFic3RyYWN0TWV0aG9kID0gdGhpcy5leHBlY3RlZFR5cGUgPT0gbnVsbCA/
IG51bGwgOiB0aGlzLmV4cGVjdGVkVHlwZS5nZXRTaW5nbGVBYnN0cmFjdE1ldGhvZCgpOworCQl0
aGlzLnNpbmdsZUFic3RyYWN0TWV0aG9kID0gdGhpcy5leHBlY3RlZFR5cGUgPT0gbnVsbCA/IG51
bGwgOiB0aGlzLmV4cGVjdGVkVHlwZS5nZXRTaW5nbGVBYnN0cmFjdE1ldGhvZChibG9ja1Njb3Bl
KTsKIAkJaWYgKHRoaXMuc2luZ2xlQWJzdHJhY3RNZXRob2QgPT0gbnVsbCB8fCAhdGhpcy5zaW5n
bGVBYnN0cmFjdE1ldGhvZC5pc1ZhbGlkQmluZGluZygpKSB7CiAJCQlibG9ja1Njb3BlLnByb2Js
ZW1SZXBvcnRlcigpLnRhcmdldFR5cGVJc05vdEFGdW5jdGlvbmFsSW50ZXJmYWNlKHRoaXMpOwog
CQkJY2hhciBbXVtdIG5hbWUgPSB0aGlzLmV4cGVjdGVkVHlwZSA9PSBudWxsID8gQ2hhck9wZXJh
dGlvbi5OT19DSEFSX0NIQVIgOiBDaGFyT3BlcmF0aW9uLnNwbGl0T24oJy4nLCB0aGlzLmV4cGVj
dGVkVHlwZS5zaG9ydFJlYWRhYmxlTmFtZSgpKTsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAv
TWV0aG9kQmluZGluZy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9NZXRob2RCaW5kaW5nLmphdmEKaW5k
ZXggMzUyZTI3OS4uMTZjNzhiYSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9NZXRob2RCaW5k
aW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9NZXRob2RCaW5kaW5nLmphdmEKQEAgLTExODMs
NCArMTE4MywxNyBAQAogCQlyZXR1cm4gZmFsc2U7CiAJcmV0dXJuIHRoaXMuZGVjbGFyaW5nQ2xh
c3MuaGFzTm9uTnVsbERlZmF1bHQoKTsKIH0KKworcHVibGljIGJvb2xlYW4gcmVkZWNsYXJlc1B1
YmxpY09iamVjdE1ldGhvZChTY29wZSBzY29wZSkgeworCVJlZmVyZW5jZUJpbmRpbmcgamF2YUxh
bmdPYmplY3QgPSBzY29wZS5nZXRKYXZhTGFuZ09iamVjdCgpOworCU1ldGhvZEJpbmRpbmcgW10g
bWV0aG9kcyA9IGphdmFMYW5nT2JqZWN0LmdldE1ldGhvZHModGhpcy5zZWxlY3Rvcik7CisJZm9y
IChpbnQgaSA9IDAsIGxlbmd0aCA9IG1ldGhvZHMgPT0gbnVsbCA/IDAgOiBtZXRob2RzLmxlbmd0
aDsgaSA8IGxlbmd0aDsgaSsrKSB7CisJCWZpbmFsIE1ldGhvZEJpbmRpbmcgbWV0aG9kID0gbWV0
aG9kc1tpXTsKKwkJaWYgKG1ldGhvZC5wYXJhbWV0ZXJzLmxlbmd0aCAhPSB0aGlzLnBhcmFtZXRl
cnMubGVuZ3RoKSAKKwkJCWNvbnRpbnVlOworCQlpZiAoTWV0aG9kVmVyaWZpZXIuZG9lc01ldGhv
ZE92ZXJyaWRlKHRoaXMsIG1ldGhvZCwgc2NvcGUuZW52aXJvbm1lbnQoKSkpIAorCQkJcmV0dXJu
IHRydWU7CisJfQorCXJldHVybiBmYWxzZTsKK30KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29r
dXAvTWV0aG9kVmVyaWZpZXIuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvTWV0aG9kVmVyaWZpZXIuamF2
YQppbmRleCBiYjkxYjM3Li4yZjI2MGM4IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL01ldGhv
ZFZlcmlmaWVyLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9NZXRob2RWZXJpZmllci5qYXZhCkBA
IC0zOSw4ICszOSw3IEBACiAJSGFzaHRhYmxlT2ZPYmplY3QgaW5oZXJpdGVkTWV0aG9kczsKIAlI
YXNodGFibGVPZk9iamVjdCBjdXJyZW50TWV0aG9kczsKIAlMb29rdXBFbnZpcm9ubWVudCBlbnZp
cm9ubWVudDsKLQlwcml2YXRlIGJvb2xlYW4gYWxsb3dDb21wYXRpYmxlUmV0dXJuVHlwZXM7Ci0v
KgorCS8qCiBCaW5kaW5nIGNyZWF0aW9uIGlzIHJlc3BvbnNpYmxlIGZvciByZXBvcnRpbmcgYWxs
IHByb2JsZW1zIHdpdGggdHlwZXM6CiAJLSBhbGwgbW9kaWZpZXIgcHJvYmxlbXMgKGR1cGxpY2F0
ZXMgJiBtdWx0aXBsZSB2aXNpYmlsaXR5IG1vZGlmaWVycyArIGluY29tcGF0aWJsZSBjb21iaW5h
dGlvbnMgLSBhYnN0cmFjdC9maW5hbCkKIAkJLSBwbHVzIGludmFsaWQgbW9kaWZpZXJzIGdpdmVu
IHRoZSBjb250ZXh0ICh0aGUgdmVyaWZpZXIgZGlkIG5vdCBkbyB0aGlzIGJlZm9yZSkKQEAgLTYz
LDkgKzYyLDYgQEAKIAl0aGlzLmluaGVyaXRlZE1ldGhvZHMgPSBudWxsOwogCXRoaXMuY3VycmVu
dE1ldGhvZHMgPSBudWxsOwogCXRoaXMuZW52aXJvbm1lbnQgPSBlbnZpcm9ubWVudDsKLQl0aGlz
LmFsbG93Q29tcGF0aWJsZVJldHVyblR5cGVzID0KLQkJZW52aXJvbm1lbnQuZ2xvYmFsT3B0aW9u
cy5jb21wbGlhbmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNQotCQkJJiYgZW52
aXJvbm1lbnQuZ2xvYmFsT3B0aW9ucy5zb3VyY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5K
REsxXzU7CiB9CiBib29sZWFuIGFyZU1ldGhvZHNDb21wYXRpYmxlKE1ldGhvZEJpbmRpbmcgb25l
LCBNZXRob2RCaW5kaW5nIHR3bykgewogCXJldHVybiBhcmVNZXRob2RzQ29tcGF0aWJsZShvbmUs
IHR3bywgdGhpcy5lbnZpcm9ubWVudCk7CkBAIC04MSwyNiArNzcsMjEgQEAKIAlyZXR1cm4gaXNQ
YXJhbWV0ZXJTdWJzaWduYXR1cmUob25lLCB0d28sIGVudmlyb25tZW50KTsKIH0KIGJvb2xlYW4g
YXJlUmV0dXJuVHlwZXNDb21wYXRpYmxlKE1ldGhvZEJpbmRpbmcgb25lLCBNZXRob2RCaW5kaW5n
IHR3bykgewotCWlmIChvbmUucmV0dXJuVHlwZSA9PSB0d28ucmV0dXJuVHlwZSkgcmV0dXJuIHRy
dWU7Ci0KLQlpZiAoYXJlVHlwZXNFcXVhbChvbmUucmV0dXJuVHlwZSwgdHdvLnJldHVyblR5cGUp
KSByZXR1cm4gdHJ1ZTsKLQotCS8vIHdoZW4gc291cmNlTGV2ZWwgPCAxLjUgYnV0IGNvbXBsaWFu
Y2UgPj0gMS41LCBhbGxvdyByZXR1cm4gdHlwZXMgaW4gYmluYXJpZXMgdG8gYmUgY29tcGF0aWJs
ZSBpbnN0ZWFkIG9mIGp1c3QgZXF1YWwKLQlpZiAodGhpcy5hbGxvd0NvbXBhdGlibGVSZXR1cm5U
eXBlcyAmJgotCQkJb25lLmRlY2xhcmluZ0NsYXNzIGluc3RhbmNlb2YgQmluYXJ5VHlwZUJpbmRp
bmcgJiYKLQkJCXR3by5kZWNsYXJpbmdDbGFzcyBpbnN0YW5jZW9mIEJpbmFyeVR5cGVCaW5kaW5n
KSB7Ci0JCXJldHVybiBhcmVSZXR1cm5UeXBlc0NvbXBhdGlibGUwKG9uZSwgdHdvKTsKLQl9Ci0J
cmV0dXJuIGZhbHNlOworCXJldHVybiBhcmVSZXR1cm5UeXBlc0NvbXBhdGlibGUob25lLCB0d28s
IHRoaXMudHlwZS5zY29wZS5lbnZpcm9ubWVudCgpKTsKIH0KLWJvb2xlYW4gYXJlUmV0dXJuVHlw
ZXNDb21wYXRpYmxlMChNZXRob2RCaW5kaW5nIG9uZSwgTWV0aG9kQmluZGluZyB0d28pIHsKLQkv
LyBzaG9ydCBpcyBjb21wYXRpYmxlIHdpdGggaW50LCBidXQgYXMgZmFyIGFzIGNvdmFyaWFuY2Ug
aXMgY29uY2VybmVkLCBpdHMgbm90Ci0JaWYgKG9uZS5yZXR1cm5UeXBlLmlzQmFzZVR5cGUoKSkg
cmV0dXJuIGZhbHNlOworc3RhdGljIGJvb2xlYW4gYXJlUmV0dXJuVHlwZXNDb21wYXRpYmxlKE1l
dGhvZEJpbmRpbmcgb25lLCBNZXRob2RCaW5kaW5nIHR3bywgTG9va3VwRW52aXJvbm1lbnQgZW52
aXJvbm1lbnQpIHsKKwlpZiAob25lLnJldHVyblR5cGUgPT0gdHdvLnJldHVyblR5cGUpIHJldHVy
biB0cnVlOworCWlmIChlbnZpcm9ubWVudC5nbG9iYWxPcHRpb25zLnNvdXJjZUxldmVsID49IENs
YXNzRmlsZUNvbnN0YW50cy5KREsxXzUpIHsKKwkJLy8gc2hvcnQgaXMgY29tcGF0aWJsZSB3aXRo
IGludCwgYnV0IGFzIGZhciBhcyBjb3ZhcmlhbmNlIGlzIGNvbmNlcm5lZCwgaXRzIG5vdAorCQlp
ZiAob25lLnJldHVyblR5cGUuaXNCYXNlVHlwZSgpKSByZXR1cm4gZmFsc2U7CiAKLQlpZiAoIW9u
ZS5kZWNsYXJpbmdDbGFzcy5pc0ludGVyZmFjZSgpICYmIG9uZS5kZWNsYXJpbmdDbGFzcy5pZCA9
PSBUeXBlSWRzLlRfSmF2YUxhbmdPYmplY3QpCi0JCXJldHVybiB0d28ucmV0dXJuVHlwZS5pc0Nv
bXBhdGlibGVXaXRoKG9uZS5yZXR1cm5UeXBlKTsgLy8gaW50ZXJmYWNlIG1ldGhvZHMgaW5oZXJp
dCBmcm9tIE9iamVjdAorCQlpZiAoIW9uZS5kZWNsYXJpbmdDbGFzcy5pc0ludGVyZmFjZSgpICYm
IG9uZS5kZWNsYXJpbmdDbGFzcy5pZCA9PSBUeXBlSWRzLlRfSmF2YUxhbmdPYmplY3QpCisJCQly
ZXR1cm4gdHdvLnJldHVyblR5cGUuaXNDb21wYXRpYmxlV2l0aChvbmUucmV0dXJuVHlwZSk7IC8v
IGludGVyZmFjZSBtZXRob2RzIGluaGVyaXQgZnJvbSBPYmplY3QKIAotCXJldHVybiBvbmUucmV0
dXJuVHlwZS5pc0NvbXBhdGlibGVXaXRoKHR3by5yZXR1cm5UeXBlKTsKKwkJcmV0dXJuIG9uZS5y
ZXR1cm5UeXBlLmlzQ29tcGF0aWJsZVdpdGgodHdvLnJldHVyblR5cGUpOworCX0gZWxzZSB7CisJ
CXJldHVybiBhcmVUeXBlc0VxdWFsKG9uZS5yZXR1cm5UeXBlLmVyYXN1cmUoKSwgdHdvLnJldHVy
blR5cGUuZXJhc3VyZSgpKTsKKwl9CiB9CiBib29sZWFuIGNhblNraXBJbmhlcml0ZWRNZXRob2Rz
KCkgewogCWlmICh0aGlzLnR5cGUuc3VwZXJjbGFzcygpICE9IG51bGwgJiYgdGhpcy50eXBlLnN1
cGVyY2xhc3MoKS5pc0Fic3RyYWN0KCkpCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL01ldGhv
ZFZlcmlmaWVyMTUuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvTWV0aG9kVmVyaWZpZXIxNS5qYXZhCmlu
ZGV4IDJhYTZmMTAuLmMxYzNlZmYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvTWV0aG9kVmVy
aWZpZXIxNS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvTWV0aG9kVmVyaWZpZXIxNS5qYXZhCkBA
IC00MCwxNCArNDAsNiBAQAogTWV0aG9kVmVyaWZpZXIxNShMb29rdXBFbnZpcm9ubWVudCBlbnZp
cm9ubWVudCkgewogCXN1cGVyKGVudmlyb25tZW50KTsKIH0KLWJvb2xlYW4gYXJlUmV0dXJuVHlw
ZXNDb21wYXRpYmxlKE1ldGhvZEJpbmRpbmcgb25lLCBNZXRob2RCaW5kaW5nIHR3bykgewotCWlm
IChvbmUucmV0dXJuVHlwZSA9PSB0d28ucmV0dXJuVHlwZSkgcmV0dXJuIHRydWU7Ci0JaWYgKHRo
aXMudHlwZS5zY29wZS5jb21waWxlck9wdGlvbnMoKS5zb3VyY2VMZXZlbCA+PSBDbGFzc0ZpbGVD
b25zdGFudHMuSkRLMV81KSB7Ci0JCXJldHVybiBhcmVSZXR1cm5UeXBlc0NvbXBhdGlibGUwKG9u
ZSwgdHdvKTsKLQl9IGVsc2UgewotCQlyZXR1cm4gYXJlVHlwZXNFcXVhbChvbmUucmV0dXJuVHlw
ZS5lcmFzdXJlKCksIHR3by5yZXR1cm5UeXBlLmVyYXN1cmUoKSk7Ci0JfQotfQogLy8gR2l2ZW4g
YG92ZXJyaWRpbmdNZXRob2QnIHdoaWNoIG92ZXJyaWRlcyBgaW5oZXJpdGVkTWV0aG9kJyBhbnN3
ZXIgd2hldGhlciBzb21lIHN1YmNsYXNzIG1ldGhvZCB0aGF0CiAvLyBkaWZmZXJzIGluIGVyYXN1
cmUgZnJvbSBvdmVycmlkaW5nTWV0aG9kIGNvdWxkIG92ZXJyaWRlIGBpbmhlcml0ZWRNZXRob2Qn
CiBwcm90ZWN0ZWQgYm9vbGVhbiBjYW5PdmVycmlkaW5nTWV0aG9kRGlmZmVySW5FcmFzdXJlKE1l
dGhvZEJpbmRpbmcgb3ZlcnJpZGluZ01ldGhvZCwgTWV0aG9kQmluZGluZyBpbmhlcml0ZWRNZXRo
b2QpIHsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUmVmZXJlbmNlQmluZGluZy5qYXZhIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2xvb2t1cC9SZWZlcmVuY2VCaW5kaW5nLmphdmEKaW5kZXggNTBlMTY4ZC4uNzYyMzI5
YiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9SZWZlcmVuY2VCaW5kaW5nLmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2xvb2t1cC9SZWZlcmVuY2VCaW5kaW5nLmphdmEKQEAgLTI4LDYgKzI4LDcgQEAKIGlt
cG9ydCBqYXZhLnV0aWwuQ29tcGFyYXRvcjsKIAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3Jl
LmNvbXBpbGVyLkNoYXJPcGVyYXRpb247CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuY29t
cGlsZXIuSW52YWxpZElucHV0RXhjZXB0aW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRl
cm5hbC5jb21waWxlci5hc3QuTWV0aG9kRGVjbGFyYXRpb247CiBpbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvbXBpbGVyLmNsYXNzZm10LkNsYXNzRmlsZUNvbnN0YW50czsKIGltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIudXRpbC5TaW1wbGVMb29rdXBUYWJs
ZTsKQEAgLTE1NzgsMTUgKzE1NzksMTc3IEBACiAJcmV0dXJuIDA7CiB9CiAKLXB1YmxpYyBNZXRo
b2RCaW5kaW5nIGdldFNpbmdsZUFic3RyYWN0TWV0aG9kKCkgeworCitwcml2YXRlIE1ldGhvZEJp
bmRpbmcgW10gZ2V0SW50ZXJmYWNlQWJzdHJhY3RDb250cmFjdHMoU2NvcGUgc2NvcGUpIHRocm93
cyBJbnZhbGlkSW5wdXRFeGNlcHRpb24geworCQorCWlmICghaXNJbnRlcmZhY2UoKSB8fCAhaXNW
YWxpZEJpbmRpbmcoKSkgeworCQl0aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCJOb3Qg
YSBmdW5jdGlvbmFsIGludGVyZmFjZSIpOyAvLyROT04tTkxTLTEkCisJfQorCQorCU1ldGhvZEJp
bmRpbmcgW10gbWV0aG9kcyA9IG1ldGhvZHMoKTsKKwlNZXRob2RCaW5kaW5nIFtdIGNvbnRyYWN0
cyA9IG5ldyBNZXRob2RCaW5kaW5nWzBdOworCWludCBjb250cmFjdHNDb3VudCA9IDA7CisJaW50
IGNvbnRyYWN0c0xlbmd0aCA9IDA7CisJTWV0aG9kQmluZGluZyBhQ29udHJhY3QgPSBudWxsOwor
CWludCBjb250cmFjdFBhcmFtZXRlckxlbmd0aCA9IDA7CisJY2hhciBbXSBjb250cmFjdFNlbGVj
dG9yID0gbnVsbDsKKwkKKwlmb3IgKGludCBpID0gMCwgbGVuZ3RoID0gbWV0aG9kcyA9PSBudWxs
ID8gMCA6IG1ldGhvZHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKKwkJZmluYWwgTWV0aG9k
QmluZGluZyBtZXRob2QgPSBtZXRob2RzW2ldOworCQlpZiAoIW1ldGhvZC5pc0Fic3RyYWN0KCkg
fHwgbWV0aG9kLnJlZGVjbGFyZXNQdWJsaWNPYmplY3RNZXRob2Qoc2NvcGUpKSBjb250aW51ZTsg
Ly8gc2tpcHMgc3RhdGljcywgZGVmYXVsdHMsIHB1YmxpYyBvYmplY3QgbWV0aG9kcyAuLi4KKwkJ
ZmluYWwgYm9vbGVhbiB2YWxpZEJpbmRpbmcgPSBtZXRob2QuaXNWYWxpZEJpbmRpbmcoKTsKKwkJ
aWYgKGFDb250cmFjdCA9PSBudWxsICYmIHZhbGlkQmluZGluZykgeworCQkJYUNvbnRyYWN0ID0g
bWV0aG9kOworCQkJY29udHJhY3RQYXJhbWV0ZXJMZW5ndGggPSBhQ29udHJhY3QucGFyYW1ldGVy
cy5sZW5ndGg7CisJCQljb250cmFjdFNlbGVjdG9yID0gYUNvbnRyYWN0LnNlbGVjdG9yOworCQl9
IGVsc2UgeworCQkJaWYgKCF2YWxpZEJpbmRpbmcgfHwgbWV0aG9kLnBhcmFtZXRlcnMubGVuZ3Ro
ICE9IGNvbnRyYWN0UGFyYW1ldGVyTGVuZ3RoIHx8ICFDaGFyT3BlcmF0aW9uLmVxdWFscyhjb250
cmFjdFNlbGVjdG9yLCBtZXRob2Quc2VsZWN0b3IpKSB7CisJCQkJdGhyb3cgbmV3IEludmFsaWRJ
bnB1dEV4Y2VwdGlvbigiTm90IGEgZnVuY3Rpb25hbCBpbnRlcmZhY2UiKTsgLy8kTk9OLU5MUy0x
JAorCQkJfQorCQl9CisJCWlmIChjb250cmFjdHNDb3VudCA9PSBjb250cmFjdHNMZW5ndGgpIHsK
KwkJCVN5c3RlbS5hcnJheWNvcHkoY29udHJhY3RzLCAwLCBjb250cmFjdHMgPSBuZXcgTWV0aG9k
QmluZGluZ1tjb250cmFjdHNMZW5ndGggKz0gMTZdLCAwLCBjb250cmFjdHNDb3VudCk7CisJCX0K
KwkJY29udHJhY3RzW2NvbnRyYWN0c0NvdW50KytdID0gbWV0aG9kOworCX0KKwlSZWZlcmVuY2VC
aW5kaW5nIFtdIHN1cGVySW50ZXJmYWNlcyA9IHN1cGVySW50ZXJmYWNlcygpOworCWZvciAoaW50
IGkgPSAwLCBsZW5ndGggPSBzdXBlckludGVyZmFjZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKysp
IHsKKwkJTWV0aG9kQmluZGluZyBbXSBzdXBlckludGVyZmFjZUNvbnRyYWN0cyA9IHN1cGVySW50
ZXJmYWNlc1tpXS5nZXRJbnRlcmZhY2VBYnN0cmFjdENvbnRyYWN0cyhzY29wZSk7CisJCWZpbmFs
IGludCBzdXBlckludGVyZmFjZUNvbnRyYWN0c0xlbmd0aCA9IHN1cGVySW50ZXJmYWNlQ29udHJh
Y3RzID09IG51bGwgID8gMCA6IHN1cGVySW50ZXJmYWNlQ29udHJhY3RzLmxlbmd0aDsKKwkJCisJ
CWlmIChzdXBlckludGVyZmFjZUNvbnRyYWN0c0xlbmd0aCA9PSAwKSBjb250aW51ZTsKKwkJaWYg
KGFDb250cmFjdCA9PSBudWxsKSB7CisJCQlhQ29udHJhY3QgPSBzdXBlckludGVyZmFjZUNvbnRy
YWN0c1swXTsKKwkJCWNvbnRyYWN0UGFyYW1ldGVyTGVuZ3RoID0gYUNvbnRyYWN0LnBhcmFtZXRl
cnMubGVuZ3RoOworCQkJY29udHJhY3RTZWxlY3RvciA9IGFDb250cmFjdC5zZWxlY3RvcjsKKwkJ
CWNvbnRyYWN0cyA9IHN1cGVySW50ZXJmYWNlQ29udHJhY3RzOworCQkJY29udHJhY3RzQ291bnQg
PSBjb250cmFjdHNMZW5ndGggPSBzdXBlckludGVyZmFjZUNvbnRyYWN0c0xlbmd0aDsKKwkJfSBl
bHNlIHsKKwkJCWlmIChzdXBlckludGVyZmFjZUNvbnRyYWN0c1swXS5wYXJhbWV0ZXJzLmxlbmd0
aCAhPSBjb250cmFjdFBhcmFtZXRlckxlbmd0aCB8fCAhQ2hhck9wZXJhdGlvbi5lcXVhbHMoY29u
dHJhY3RTZWxlY3Rvciwgc3VwZXJJbnRlcmZhY2VDb250cmFjdHNbMF0uc2VsZWN0b3IpKSB7CisJ
CQkJdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigiTm90IGEgZnVuY3Rpb25hbCBpbnRl
cmZhY2UiKTsgLy8kTk9OLU5MUy0xJAorCQkJfQorCQkJaWYgKGNvbnRyYWN0c0xlbmd0aCA8IGNv
bnRyYWN0c0NvdW50ICsgc3VwZXJJbnRlcmZhY2VDb250cmFjdHNMZW5ndGgpIHsKKwkJCQlTeXN0
ZW0uYXJyYXljb3B5KGNvbnRyYWN0cywgMCwgY29udHJhY3RzID0gbmV3IE1ldGhvZEJpbmRpbmdb
Y29udHJhY3RzTGVuZ3RoID0gY29udHJhY3RzQ291bnQgKyBzdXBlckludGVyZmFjZUNvbnRyYWN0
c0xlbmd0aF0sIDAsIGNvbnRyYWN0c0NvdW50KTsKKwkJCX0KKwkJCVN5c3RlbS5hcnJheWNvcHko
c3VwZXJJbnRlcmZhY2VDb250cmFjdHMsIDAsIGNvbnRyYWN0cywgY29udHJhY3RzQ291bnQsCXN1
cGVySW50ZXJmYWNlQ29udHJhY3RzTGVuZ3RoKTsKKwkJCWNvbnRyYWN0c0NvdW50ICs9IHN1cGVy
SW50ZXJmYWNlQ29udHJhY3RzTGVuZ3RoOworCQl9CisJfQorCWlmIChjb250cmFjdHNDb3VudCA8
IGNvbnRyYWN0c0xlbmd0aCkgeworCQlTeXN0ZW0uYXJyYXljb3B5KGNvbnRyYWN0cywgMCwgY29u
dHJhY3RzID0gbmV3IE1ldGhvZEJpbmRpbmdbY29udHJhY3RzQ291bnRdLCAwLCBjb250cmFjdHND
b3VudCk7CisJfQorCXJldHVybiBjb250cmFjdHM7Cit9CitwdWJsaWMgTWV0aG9kQmluZGluZyBn
ZXRTaW5nbGVBYnN0cmFjdE1ldGhvZChTY29wZSBzY29wZSkgewogCQogCWlmICh0aGlzLnNpbmds
ZUFic3RyYWN0TWV0aG9kICE9IG51bGwpIHsKIAkJcmV0dXJuIHRoaXMuc2luZ2xlQWJzdHJhY3RN
ZXRob2Q7CiAJfQotCU1ldGhvZEJpbmRpbmcgW10gbWV0aG9kczsKLQlpZiAoIWlzSW50ZXJmYWNl
KCkgfHwgKG1ldGhvZHMgPSBtZXRob2RzKCkpLmxlbmd0aCAhPSAxKSB7CisKKwlNZXRob2RCaW5k
aW5nW10gbWV0aG9kcyA9IG51bGw7CisJdHJ5IHsKKwkJbWV0aG9kcyA9IGdldEludGVyZmFjZUFi
c3RyYWN0Q29udHJhY3RzKHNjb3BlKTsKKwl9IGNhdGNoIChJbnZhbGlkSW5wdXRFeGNlcHRpb24g
ZSkgewogCQlyZXR1cm4gdGhpcy5zaW5nbGVBYnN0cmFjdE1ldGhvZCA9IG5ldyBQcm9ibGVtTWV0
aG9kQmluZGluZyhUeXBlQ29uc3RhbnRzLkFOT05ZTU9VU19NRVRIT0QsIG51bGwsIFByb2JsZW1S
ZWFzb25zLk5vU3VjaFNpbmdsZUFic3RyYWN0TWV0aG9kKTsKIAl9Ci0JcmV0dXJuIHRoaXMuc2lu
Z2xlQWJzdHJhY3RNZXRob2QgPSBtZXRob2RzWzBdOworCWlmIChtZXRob2RzICE9IG51bGwgJiYg
bWV0aG9kcy5sZW5ndGggPT0gMSkKKwkJcmV0dXJuIHRoaXMuc2luZ2xlQWJzdHJhY3RNZXRob2Qg
PSBtZXRob2RzWzBdOworCQorCWZpbmFsIExvb2t1cEVudmlyb25tZW50IGVudmlyb25tZW50ID0g
c2NvcGUuZW52aXJvbm1lbnQoKTsKKwlib29sZWFuIGdlbmVyaWNNZXRob2RTZWVuID0gZmFsc2U7
CisJbmV4dDpmb3IgKGludCBpID0gMCwgbGVuZ3RoID0gbWV0aG9kcy5sZW5ndGg7IGkgPCBsZW5n
dGg7IGkrKykgeworCQlNZXRob2RCaW5kaW5nIG1ldGhvZCA9IG1ldGhvZHNbaV0sIG90aGVyTWV0
aG9kID0gbnVsbDsKKwkJaWYgKG1ldGhvZC50eXBlVmFyaWFibGVzICE9IEJpbmRpbmcuTk9fVFlQ
RV9WQVJJQUJMRVMpCisJCQlnZW5lcmljTWV0aG9kU2VlbiA9IHRydWU7CisJCWZvciAoaW50IGog
PSAwOyBqIDwgbGVuZ3RoOyBqKyspIHsKKwkJCWlmIChpID09IGopIGNvbnRpbnVlOworCQkJb3Ro
ZXJNZXRob2QgPSBtZXRob2RzW2pdOworCQkJaWYgKG90aGVyTWV0aG9kLnR5cGVWYXJpYWJsZXMg
IT0gQmluZGluZy5OT19UWVBFX1ZBUklBQkxFUykKKwkJCQlnZW5lcmljTWV0aG9kU2VlbiA9IHRy
dWU7CisJCQlpZiAoIU1ldGhvZFZlcmlmaWVyLmlzUGFyYW1ldGVyU3Vic2lnbmF0dXJlKG1ldGhv
ZCwgb3RoZXJNZXRob2QsIGVudmlyb25tZW50KSB8fCAhTWV0aG9kVmVyaWZpZXIuYXJlUmV0dXJu
VHlwZXNDb21wYXRpYmxlKG1ldGhvZCwgb3RoZXJNZXRob2QsIGVudmlyb25tZW50KSkgCisJCQkJ
Y29udGludWUgbmV4dDsgCisJCX0KKwkJLy8gSWYgd2UgcmVhY2ggaGVyZSwgd2UgZm91bmQgYSBt
ZXRob2QgdGhhdCBpcyBvdmVycmlkZSBlcXVpdmFsZW50IHdpdGggZXZlcnkgb3RoZXIgbWV0aG9k
IGFuZCBpcyBhbHNvIHJldHVybiB0eXBlIHN1YnN0aXR1dGFibGUuIENvbXB1dGUga29zaGVyIGV4
Y2VwdGlvbnMgbm93IC4uLgorCQlSZWZlcmVuY2VCaW5kaW5nIFtdIGV4Y2VwdGlvbnMgPSBuZXcg
UmVmZXJlbmNlQmluZGluZ1swXTsKKwkJaW50IGV4Y2VwdGlvbnNDb3VudCA9IDAsIGV4Y2VwdGlv
bnNMZW5ndGggPSAwOworCQlmaW5hbCBNZXRob2RCaW5kaW5nIHRoZUFic3RyYWN0TWV0aG9kID0g
bWV0aG9kOworCQlib29sZWFuIHNob3VsZEVyYXNlVGhyb3dzID0gdGhlQWJzdHJhY3RNZXRob2Qu
dHlwZVZhcmlhYmxlcyA9PSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTICYmIGdlbmVyaWNNZXRo
b2RTZWVuOworCQlib29sZWFuIHNob3VsZEFkYXB0VGhyb3dzID0gdGhlQWJzdHJhY3RNZXRob2Qu
dHlwZVZhcmlhYmxlcyAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTOworCQlTdWJzdGl0dXRp
b24gYWRwYXRvciA9IG51bGw7CisJCWZpbmFsIGludCB0eXBlVmFyaWFibGVMZW5ndGggPSB0aGVB
YnN0cmFjdE1ldGhvZC50eXBlVmFyaWFibGVzLmxlbmd0aDsKKwkJZmluYWwgVHlwZVZhcmlhYmxl
QmluZGluZyBbXVtdIGFkYXB0YXRpb24gPSBzaG91bGRBZGFwdFRocm93cyA/IG5ldyBUeXBlVmFy
aWFibGVCaW5kaW5nWzJdW3R5cGVWYXJpYWJsZUxlbmd0aF0gOiBudWxsOworCQlpZiAoc2hvdWxk
QWRhcHRUaHJvd3MpIHsKKwkJCWZvciAoaW50IHR2ID0gMDsgdHYgPCB0eXBlVmFyaWFibGVMZW5n
dGg7IHR2KyspIHsKKwkJCQlhZGFwdGF0aW9uWzFdW3R2XSA9IHRoZUFic3RyYWN0TWV0aG9kLnR5
cGVWYXJpYWJsZXNbdHZdOworCQkJfQorCQkJYWRwYXRvciA9IG5ldyBTdWJzdGl0dXRpb24oKSB7
CisJCQkJcHVibGljIFR5cGVCaW5kaW5nIHN1YnN0aXR1dGUoVHlwZVZhcmlhYmxlQmluZGluZyB0
eXBlVmFyaWFibGUpIHsKKwkJCQkJZm9yIChpbnQgdHYgPSAwOyB0diA8IHR5cGVWYXJpYWJsZUxl
bmd0aDsgdHYrKykgeworCQkJCQkJaWYgKGFkYXB0YXRpb25bMF1bdHZdID09IHR5cGVWYXJpYWJs
ZSkKKwkJCQkJCQlyZXR1cm4gYWRhcHRhdGlvblsxXVt0dl07CisJCQkJCX0KKwkJCQkJcmV0dXJu
IHR5cGVWYXJpYWJsZTsKKwkJCQl9CisJCQkJCisJCQkJcHVibGljIGJvb2xlYW4gaXNSYXdTdWJz
dGl0dXRpb24oKSB7CisJCQkJCXJldHVybiBmYWxzZTsKKwkJCQl9CisJCQkJCisJCQkJcHVibGlj
IExvb2t1cEVudmlyb25tZW50IGVudmlyb25tZW50KCkgeworCQkJCQlyZXR1cm4gZW52aXJvbm1l
bnQ7CisJCQkJfQorCQkJfTsKKwkJfQorCQlub25lOmZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkr
KykgeworCQkJbWV0aG9kID0gbWV0aG9kc1tpXTsKKwkJCVJlZmVyZW5jZUJpbmRpbmdbXSBtZXRo
b2RUaHJvd25FeGNlcHRpb25zID0gbWV0aG9kLnRocm93bkV4Y2VwdGlvbnM7CisJCQlpbnQgbWV0
aG9kRXhjZXB0aW9uc0xlbmd0aCA9IG1ldGhvZFRocm93bkV4Y2VwdGlvbnMgPT0gbnVsbCA/IDA6
IG1ldGhvZFRocm93bkV4Y2VwdGlvbnMubGVuZ3RoOworCQkJaWYgKG1ldGhvZEV4Y2VwdGlvbnNM
ZW5ndGggPT0gMCkgYnJlYWsgbm9uZTsKKwkJCWlmIChzaG91bGRBZGFwdFRocm93cyAmJiBtZXRo
b2QgIT0gdGhlQWJzdHJhY3RNZXRob2QpIHsKKwkJCQlmb3IgKGludCB0diA9IDA7IHR2IDwgdHlw
ZVZhcmlhYmxlTGVuZ3RoOyB0disrKQorCQkJCQlhZGFwdGF0aW9uWzBdW3R2XSA9IG1ldGhvZC50
eXBlVmFyaWFibGVzW3R2XTsKKwkJCQltZXRob2RUaHJvd25FeGNlcHRpb25zID0gU2NvcGUuc3Vi
c3RpdHV0ZShhZHBhdG9yLCBtZXRob2RUaHJvd25FeGNlcHRpb25zKTsKKwkJCX0KKwkJCW5leHRF
eGNlcHRpb246IGZvciAoaW50IGogPSAwOyBqIDwgbWV0aG9kRXhjZXB0aW9uc0xlbmd0aDsgaisr
KSB7CisJCQkJUmVmZXJlbmNlQmluZGluZyBtZXRob2RFeGNlcHRpb24gPSBtZXRob2RUaHJvd25F
eGNlcHRpb25zW2pdOworCQkJCWlmIChzaG91bGRFcmFzZVRocm93cykKKwkJCQkJbWV0aG9kRXhj
ZXB0aW9uID0gKFJlZmVyZW5jZUJpbmRpbmcpIG1ldGhvZEV4Y2VwdGlvbi5lcmFzdXJlKCk7CisJ
CQkJbmV4dE1ldGhvZDogZm9yIChpbnQgayA9IDA7IGsgPCBsZW5ndGg7IGsrKykgeworCQkJCQlp
ZiAoaSA9PSBrKSBjb250aW51ZTsKKwkJCQkJb3RoZXJNZXRob2QgPSBtZXRob2RzW2tdOworCQkJ
CQlSZWZlcmVuY2VCaW5kaW5nW10gb3RoZXJNZXRob2RUaHJvd25FeGNlcHRpb25zID0gb3RoZXJN
ZXRob2QudGhyb3duRXhjZXB0aW9uczsKKwkJCQkJaW50IG90aGVyRXhjZXB0aW9uc0xlbmd0aCA9
ICBvdGhlck1ldGhvZFRocm93bkV4Y2VwdGlvbnMgPT0gbnVsbCA/IDAgOiBvdGhlck1ldGhvZFRo
cm93bkV4Y2VwdGlvbnMubGVuZ3RoOworCQkJCQlpZiAob3RoZXJFeGNlcHRpb25zTGVuZ3RoID09
IDApIGJyZWFrIG5vbmU7CisJCQkJCWlmIChzaG91bGRBZGFwdFRocm93cyAmJiBvdGhlck1ldGhv
ZCAhPSB0aGVBYnN0cmFjdE1ldGhvZCkgeworCQkJCQkJZm9yIChpbnQgdHYgPSAwOyB0diA8IHR5
cGVWYXJpYWJsZUxlbmd0aDsgdHYrKykKKwkJCQkJCQlhZGFwdGF0aW9uWzBdW3R2XSA9IG90aGVy
TWV0aG9kLnR5cGVWYXJpYWJsZXNbdHZdOworCQkJCQkJb3RoZXJNZXRob2RUaHJvd25FeGNlcHRp
b25zID0gU2NvcGUuc3Vic3RpdHV0ZShhZHBhdG9yLCBvdGhlck1ldGhvZFRocm93bkV4Y2VwdGlv
bnMpOworCQkJCQl9CisJCQkJCWZvciAoaW50IGwgPSAwOyBsIDwgb3RoZXJFeGNlcHRpb25zTGVu
Z3RoOyBsKyspIHsKKwkJCQkJCVJlZmVyZW5jZUJpbmRpbmcgb3RoZXJFeGNlcHRpb24gPSBvdGhl
ck1ldGhvZFRocm93bkV4Y2VwdGlvbnNbbF07CisJCQkJCQlpZiAoc2hvdWxkRXJhc2VUaHJvd3Mp
CisJCQkJCQkJb3RoZXJFeGNlcHRpb24gPSAoUmVmZXJlbmNlQmluZGluZykgb3RoZXJFeGNlcHRp
b24uZXJhc3VyZSgpOworCQkJCQkJaWYgKG1ldGhvZEV4Y2VwdGlvbi5pc0NvbXBhdGlibGVXaXRo
KG90aGVyRXhjZXB0aW9uKSkKKwkJCQkJCQljb250aW51ZSBuZXh0TWV0aG9kOworCQkJCQl9CisJ
CQkJCWNvbnRpbnVlIG5leHRFeGNlcHRpb247CisJCQkJfQorCQkJCS8vIElmIHdlIHJlYWNoIGhl
cmUsIG1ldGhvZCBleGNlcHRpb24gb3IgaXRzIHN1cGVyIHR5cGUgaXMgY292ZXJlZCBieSBldmVy
eSB0aHJvd3MgY2xhdXNlLgorCQkJCWlmIChleGNlcHRpb25zQ291bnQgPT0gZXhjZXB0aW9uc0xl
bmd0aCkgeworCQkJCQlTeXN0ZW0uYXJyYXljb3B5KGV4Y2VwdGlvbnMsIDAsIGV4Y2VwdGlvbnMg
PSBuZXcgUmVmZXJlbmNlQmluZGluZ1tleGNlcHRpb25zTGVuZ3RoICs9IDE2XSwgMCwgZXhjZXB0
aW9uc0NvdW50KTsKKwkJCQl9CisJCQkJZXhjZXB0aW9uc1tleGNlcHRpb25zQ291bnQrK10gPSBt
ZXRob2RFeGNlcHRpb247CisJCQl9CisJCX0KKwkJdGhpcy5zaW5nbGVBYnN0cmFjdE1ldGhvZCA9
IG5ldyBNZXRob2RCaW5kaW5nKHRoZUFic3RyYWN0TWV0aG9kLm1vZGlmaWVycywgCisJCQkJdGhl
QWJzdHJhY3RNZXRob2Quc2VsZWN0b3IsIAorCQkJCXRoZUFic3RyYWN0TWV0aG9kLnJldHVyblR5
cGUsIAorCQkJCXRoZUFic3RyYWN0TWV0aG9kLnBhcmFtZXRlcnMsIAorCQkJCWV4Y2VwdGlvbnMs
IAorCQkJCXRoZUFic3RyYWN0TWV0aG9kLmRlY2xhcmluZ0NsYXNzKTsKKwkgICAgdGhpcy5zaW5n
bGVBYnN0cmFjdE1ldGhvZC50eXBlVmFyaWFibGVzID0gdGhlQWJzdHJhY3RNZXRob2QudHlwZVZh
cmlhYmxlczsKKwkJcmV0dXJuIHRoaXMuc2luZ2xlQWJzdHJhY3RNZXRob2Q7CisJfQorCXJldHVy
biB0aGlzLnNpbmdsZUFic3RyYWN0TWV0aG9kID0gbmV3IFByb2JsZW1NZXRob2RCaW5kaW5nKFR5
cGVDb25zdGFudHMuQU5PTllNT1VTX01FVEhPRCwgbnVsbCwgUHJvYmxlbVJlYXNvbnMuTm9TdWNo
U2luZ2xlQWJzdHJhY3RNZXRob2QpOwogfQogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9U
eXBlQmluZGluZy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9UeXBlQmluZGluZy5qYXZhCmluZGV4IGQ3
MzcyMzAuLjM1ZDlmYTAgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvVHlwZUJpbmRpbmcuamF2
YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvbG9va3VwL1R5cGVCaW5kaW5nLmphdmEKQEAgLTEyMzAsMTAgKzEyMzAs
MTEgQEAKIAogLyoqCiAgKiBSZXR1cm4gdGhlIHNpbmdsZSBhYnN0cmFjdCBtZXRob2Qgb2YgYSBm
dW5jdGlvbmFsIGludGVyZmFjZSwgb3IgbnVsbCwgaWYgdGhlIHJlY2VpdmVyIGlzIG5vdCBhIGZ1
bmN0aW9uYWwgaW50ZXJmYWNlIGFzIGRlZmluZWQgaW4gSkxTIDkuOC4KKyAqIEBwYXJhbSBzY29w
ZSBzY29wZQogICogIAogICogQHJldHVybiBUaGUgc2luZ2xlIGFic3RyYWN0IG1ldGhvZCBvZiBh
IGZ1bmN0aW9uYWwgaW50ZXJmYWNlLCBvciBudWxsLCBpZiB0aGUgcmVjZWl2ZXIgaXMgbm90IGEg
ZnVuY3Rpb25hbCBpbnRlcmZhY2UuIAogICovCi1wdWJsaWMgTWV0aG9kQmluZGluZyBnZXRTaW5n
bGVBYnN0cmFjdE1ldGhvZCgpIHsKK3B1YmxpYyBNZXRob2RCaW5kaW5nIGdldFNpbmdsZUFic3Ry
YWN0TWV0aG9kKFNjb3BlIHNjb3BlKSB7CiAJcmV0dXJuIG51bGw7CiB9CiA=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>226483</attachid>
            <date>2013-02-03 14:55:00 -0500</date>
            <delta_ts>2013-02-06 07:46:08 -0500</delta_ts>
            <desc>Alternate patch - more evolved.</desc>
            <filename>patch.txt</filename>
            <type>text/plain</type>
            <size>20908</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvRnVuY3Rpb25hbEV4cHJlc3Npb24uamF2YSBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hc3QvRnVuY3Rpb25hbEV4cHJlc3Npb24uamF2YQppbmRleCA1MzAwOGVkLi4xYmM4OGY3IDEw
MDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L0Z1bmN0aW9uYWxFeHByZXNzaW9uLmphdmEKKysrIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9GdW5jdGlvbmFsRXhwcmVzc2lvbi5qYXZhCkBAIC00Nyw3ICs0Nyw3IEBACiAJCiAJ
cHVibGljIC8qIEBOb25OdWxsICovIFR5cGVCaW5kaW5nIHJlc29sdmVUeXBlKEJsb2NrU2NvcGUg
YmxvY2tTY29wZSkgewogCQl0aGlzLmNvbnN0YW50ID0gQ29uc3RhbnQuTm90QUNvbnN0YW50Owot
CQl0aGlzLnNpbmdsZUFic3RyYWN0TWV0aG9kID0gdGhpcy5leHBlY3RlZFR5cGUgPT0gbnVsbCA/
IG51bGwgOiB0aGlzLmV4cGVjdGVkVHlwZS5nZXRTaW5nbGVBYnN0cmFjdE1ldGhvZCgpOworCQl0
aGlzLnNpbmdsZUFic3RyYWN0TWV0aG9kID0gdGhpcy5leHBlY3RlZFR5cGUgPT0gbnVsbCA/IG51
bGwgOiB0aGlzLmV4cGVjdGVkVHlwZS5nZXRTaW5nbGVBYnN0cmFjdE1ldGhvZChibG9ja1Njb3Bl
KTsKIAkJaWYgKHRoaXMuc2luZ2xlQWJzdHJhY3RNZXRob2QgPT0gbnVsbCB8fCAhdGhpcy5zaW5n
bGVBYnN0cmFjdE1ldGhvZC5pc1ZhbGlkQmluZGluZygpKSB7CiAJCQlibG9ja1Njb3BlLnByb2Js
ZW1SZXBvcnRlcigpLnRhcmdldFR5cGVJc05vdEFGdW5jdGlvbmFsSW50ZXJmYWNlKHRoaXMpOwog
CQkJY2hhciBbXVtdIG5hbWUgPSB0aGlzLmV4cGVjdGVkVHlwZSA9PSBudWxsID8gQ2hhck9wZXJh
dGlvbi5OT19DSEFSX0NIQVIgOiBDaGFyT3BlcmF0aW9uLnNwbGl0T24oJy4nLCB0aGlzLmV4cGVj
dGVkVHlwZS5zaG9ydFJlYWRhYmxlTmFtZSgpKTsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAv
TWV0aG9kQmluZGluZy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9NZXRob2RCaW5kaW5nLmphdmEKaW5k
ZXggMzUyZTI3OS4uZmIzNDk2NyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9NZXRob2RCaW5k
aW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9NZXRob2RCaW5kaW5nLmphdmEKQEAgLTEsNSAr
MSw1IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDAwLCAy
MDEyIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAy
MDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4g
VGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUg
YXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2
MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWls
YWJsZSBhdApAQCAtMTE4Myw0ICsxMTgzLDE3IEBACiAJCXJldHVybiBmYWxzZTsKIAlyZXR1cm4g
dGhpcy5kZWNsYXJpbmdDbGFzcy5oYXNOb25OdWxsRGVmYXVsdCgpOwogfQorCitwdWJsaWMgYm9v
bGVhbiByZWRlY2xhcmVzUHVibGljT2JqZWN0TWV0aG9kKFNjb3BlIHNjb3BlKSB7CisJUmVmZXJl
bmNlQmluZGluZyBqYXZhTGFuZ09iamVjdCA9IHNjb3BlLmdldEphdmFMYW5nT2JqZWN0KCk7CisJ
TWV0aG9kQmluZGluZyBbXSBtZXRob2RzID0gamF2YUxhbmdPYmplY3QuZ2V0TWV0aG9kcyh0aGlz
LnNlbGVjdG9yKTsKKwlmb3IgKGludCBpID0gMCwgbGVuZ3RoID0gbWV0aG9kcyA9PSBudWxsID8g
MCA6IG1ldGhvZHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKKwkJZmluYWwgTWV0aG9kQmlu
ZGluZyBtZXRob2QgPSBtZXRob2RzW2ldOworCQlpZiAobWV0aG9kLnBhcmFtZXRlcnMubGVuZ3Ro
ICE9IHRoaXMucGFyYW1ldGVycy5sZW5ndGgpIAorCQkJY29udGludWU7CisJCWlmIChNZXRob2RW
ZXJpZmllci5kb2VzTWV0aG9kT3ZlcnJpZGUodGhpcywgbWV0aG9kLCBzY29wZS5lbnZpcm9ubWVu
dCgpKSkgCisJCQlyZXR1cm4gdHJ1ZTsKKwl9CisJcmV0dXJuIGZhbHNlOworfQogfQpkaWZmIC0t
Z2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9NZXRob2RWZXJpZmllci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9N
ZXRob2RWZXJpZmllci5qYXZhCmluZGV4IGJiOTFiMzcuLjJmMjYwYzggMTAwNjQ0Ci0tLSBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9sb29rdXAvTWV0aG9kVmVyaWZpZXIuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL01ldGhv
ZFZlcmlmaWVyLmphdmEKQEAgLTM5LDggKzM5LDcgQEAKIAlIYXNodGFibGVPZk9iamVjdCBpbmhl
cml0ZWRNZXRob2RzOwogCUhhc2h0YWJsZU9mT2JqZWN0IGN1cnJlbnRNZXRob2RzOwogCUxvb2t1
cEVudmlyb25tZW50IGVudmlyb25tZW50OwotCXByaXZhdGUgYm9vbGVhbiBhbGxvd0NvbXBhdGli
bGVSZXR1cm5UeXBlczsKLS8qCisJLyoKIEJpbmRpbmcgY3JlYXRpb24gaXMgcmVzcG9uc2libGUg
Zm9yIHJlcG9ydGluZyBhbGwgcHJvYmxlbXMgd2l0aCB0eXBlczoKIAktIGFsbCBtb2RpZmllciBw
cm9ibGVtcyAoZHVwbGljYXRlcyAmIG11bHRpcGxlIHZpc2liaWxpdHkgbW9kaWZpZXJzICsgaW5j
b21wYXRpYmxlIGNvbWJpbmF0aW9ucyAtIGFic3RyYWN0L2ZpbmFsKQogCQktIHBsdXMgaW52YWxp
ZCBtb2RpZmllcnMgZ2l2ZW4gdGhlIGNvbnRleHQgKHRoZSB2ZXJpZmllciBkaWQgbm90IGRvIHRo
aXMgYmVmb3JlKQpAQCAtNjMsOSArNjIsNiBAQAogCXRoaXMuaW5oZXJpdGVkTWV0aG9kcyA9IG51
bGw7CiAJdGhpcy5jdXJyZW50TWV0aG9kcyA9IG51bGw7CiAJdGhpcy5lbnZpcm9ubWVudCA9IGVu
dmlyb25tZW50OwotCXRoaXMuYWxsb3dDb21wYXRpYmxlUmV0dXJuVHlwZXMgPQotCQllbnZpcm9u
bWVudC5nbG9iYWxPcHRpb25zLmNvbXBsaWFuY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMu
SkRLMV81Ci0JCQkmJiBlbnZpcm9ubWVudC5nbG9iYWxPcHRpb25zLnNvdXJjZUxldmVsIDwgQ2xh
c3NGaWxlQ29uc3RhbnRzLkpESzFfNTsKIH0KIGJvb2xlYW4gYXJlTWV0aG9kc0NvbXBhdGlibGUo
TWV0aG9kQmluZGluZyBvbmUsIE1ldGhvZEJpbmRpbmcgdHdvKSB7CiAJcmV0dXJuIGFyZU1ldGhv
ZHNDb21wYXRpYmxlKG9uZSwgdHdvLCB0aGlzLmVudmlyb25tZW50KTsKQEAgLTgxLDI2ICs3Nywy
MSBAQAogCXJldHVybiBpc1BhcmFtZXRlclN1YnNpZ25hdHVyZShvbmUsIHR3bywgZW52aXJvbm1l
bnQpOwogfQogYm9vbGVhbiBhcmVSZXR1cm5UeXBlc0NvbXBhdGlibGUoTWV0aG9kQmluZGluZyBv
bmUsIE1ldGhvZEJpbmRpbmcgdHdvKSB7Ci0JaWYgKG9uZS5yZXR1cm5UeXBlID09IHR3by5yZXR1
cm5UeXBlKSByZXR1cm4gdHJ1ZTsKLQotCWlmIChhcmVUeXBlc0VxdWFsKG9uZS5yZXR1cm5UeXBl
LCB0d28ucmV0dXJuVHlwZSkpIHJldHVybiB0cnVlOwotCi0JLy8gd2hlbiBzb3VyY2VMZXZlbCA8
IDEuNSBidXQgY29tcGxpYW5jZSA+PSAxLjUsIGFsbG93IHJldHVybiB0eXBlcyBpbiBiaW5hcmll
cyB0byBiZSBjb21wYXRpYmxlIGluc3RlYWQgb2YganVzdCBlcXVhbAotCWlmICh0aGlzLmFsbG93
Q29tcGF0aWJsZVJldHVyblR5cGVzICYmCi0JCQlvbmUuZGVjbGFyaW5nQ2xhc3MgaW5zdGFuY2Vv
ZiBCaW5hcnlUeXBlQmluZGluZyAmJgotCQkJdHdvLmRlY2xhcmluZ0NsYXNzIGluc3RhbmNlb2Yg
QmluYXJ5VHlwZUJpbmRpbmcpIHsKLQkJcmV0dXJuIGFyZVJldHVyblR5cGVzQ29tcGF0aWJsZTAo
b25lLCB0d28pOwotCX0KLQlyZXR1cm4gZmFsc2U7CisJcmV0dXJuIGFyZVJldHVyblR5cGVzQ29t
cGF0aWJsZShvbmUsIHR3bywgdGhpcy50eXBlLnNjb3BlLmVudmlyb25tZW50KCkpOwogfQotYm9v
bGVhbiBhcmVSZXR1cm5UeXBlc0NvbXBhdGlibGUwKE1ldGhvZEJpbmRpbmcgb25lLCBNZXRob2RC
aW5kaW5nIHR3bykgewotCS8vIHNob3J0IGlzIGNvbXBhdGlibGUgd2l0aCBpbnQsIGJ1dCBhcyBm
YXIgYXMgY292YXJpYW5jZSBpcyBjb25jZXJuZWQsIGl0cyBub3QKLQlpZiAob25lLnJldHVyblR5
cGUuaXNCYXNlVHlwZSgpKSByZXR1cm4gZmFsc2U7CitzdGF0aWMgYm9vbGVhbiBhcmVSZXR1cm5U
eXBlc0NvbXBhdGlibGUoTWV0aG9kQmluZGluZyBvbmUsIE1ldGhvZEJpbmRpbmcgdHdvLCBMb29r
dXBFbnZpcm9ubWVudCBlbnZpcm9ubWVudCkgeworCWlmIChvbmUucmV0dXJuVHlwZSA9PSB0d28u
cmV0dXJuVHlwZSkgcmV0dXJuIHRydWU7CisJaWYgKGVudmlyb25tZW50Lmdsb2JhbE9wdGlvbnMu
c291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNSkgeworCQkvLyBzaG9ydCBp
cyBjb21wYXRpYmxlIHdpdGggaW50LCBidXQgYXMgZmFyIGFzIGNvdmFyaWFuY2UgaXMgY29uY2Vy
bmVkLCBpdHMgbm90CisJCWlmIChvbmUucmV0dXJuVHlwZS5pc0Jhc2VUeXBlKCkpIHJldHVybiBm
YWxzZTsKIAotCWlmICghb25lLmRlY2xhcmluZ0NsYXNzLmlzSW50ZXJmYWNlKCkgJiYgb25lLmRl
Y2xhcmluZ0NsYXNzLmlkID09IFR5cGVJZHMuVF9KYXZhTGFuZ09iamVjdCkKLQkJcmV0dXJuIHR3
by5yZXR1cm5UeXBlLmlzQ29tcGF0aWJsZVdpdGgob25lLnJldHVyblR5cGUpOyAvLyBpbnRlcmZh
Y2UgbWV0aG9kcyBpbmhlcml0IGZyb20gT2JqZWN0CisJCWlmICghb25lLmRlY2xhcmluZ0NsYXNz
LmlzSW50ZXJmYWNlKCkgJiYgb25lLmRlY2xhcmluZ0NsYXNzLmlkID09IFR5cGVJZHMuVF9KYXZh
TGFuZ09iamVjdCkKKwkJCXJldHVybiB0d28ucmV0dXJuVHlwZS5pc0NvbXBhdGlibGVXaXRoKG9u
ZS5yZXR1cm5UeXBlKTsgLy8gaW50ZXJmYWNlIG1ldGhvZHMgaW5oZXJpdCBmcm9tIE9iamVjdAog
Ci0JcmV0dXJuIG9uZS5yZXR1cm5UeXBlLmlzQ29tcGF0aWJsZVdpdGgodHdvLnJldHVyblR5cGUp
OworCQlyZXR1cm4gb25lLnJldHVyblR5cGUuaXNDb21wYXRpYmxlV2l0aCh0d28ucmV0dXJuVHlw
ZSk7CisJfSBlbHNlIHsKKwkJcmV0dXJuIGFyZVR5cGVzRXF1YWwob25lLnJldHVyblR5cGUuZXJh
c3VyZSgpLCB0d28ucmV0dXJuVHlwZS5lcmFzdXJlKCkpOworCX0KIH0KIGJvb2xlYW4gY2FuU2tp
cEluaGVyaXRlZE1ldGhvZHMoKSB7CiAJaWYgKHRoaXMudHlwZS5zdXBlcmNsYXNzKCkgIT0gbnVs
bCAmJiB0aGlzLnR5cGUuc3VwZXJjbGFzcygpLmlzQWJzdHJhY3QoKSkKZGlmZiAtLWdpdCBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9sb29rdXAvTWV0aG9kVmVyaWZpZXIxNS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9NZXRob2RW
ZXJpZmllcjE1LmphdmEKaW5kZXggMmFhNmYxMC4uYzFjM2VmZiAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2xvb2t1cC9NZXRob2RWZXJpZmllcjE1LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9NZXRob2RW
ZXJpZmllcjE1LmphdmEKQEAgLTQwLDE0ICs0MCw2IEBACiBNZXRob2RWZXJpZmllcjE1KExvb2t1
cEVudmlyb25tZW50IGVudmlyb25tZW50KSB7CiAJc3VwZXIoZW52aXJvbm1lbnQpOwogfQotYm9v
bGVhbiBhcmVSZXR1cm5UeXBlc0NvbXBhdGlibGUoTWV0aG9kQmluZGluZyBvbmUsIE1ldGhvZEJp
bmRpbmcgdHdvKSB7Ci0JaWYgKG9uZS5yZXR1cm5UeXBlID09IHR3by5yZXR1cm5UeXBlKSByZXR1
cm4gdHJ1ZTsKLQlpZiAodGhpcy50eXBlLnNjb3BlLmNvbXBpbGVyT3B0aW9ucygpLnNvdXJjZUxl
dmVsID49IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzUpIHsKLQkJcmV0dXJuIGFyZVJldHVyblR5
cGVzQ29tcGF0aWJsZTAob25lLCB0d28pOwotCX0gZWxzZSB7Ci0JCXJldHVybiBhcmVUeXBlc0Vx
dWFsKG9uZS5yZXR1cm5UeXBlLmVyYXN1cmUoKSwgdHdvLnJldHVyblR5cGUuZXJhc3VyZSgpKTsK
LQl9Ci19CiAvLyBHaXZlbiBgb3ZlcnJpZGluZ01ldGhvZCcgd2hpY2ggb3ZlcnJpZGVzIGBpbmhl
cml0ZWRNZXRob2QnIGFuc3dlciB3aGV0aGVyIHNvbWUgc3ViY2xhc3MgbWV0aG9kIHRoYXQKIC8v
IGRpZmZlcnMgaW4gZXJhc3VyZSBmcm9tIG92ZXJyaWRpbmdNZXRob2QgY291bGQgb3ZlcnJpZGUg
YGluaGVyaXRlZE1ldGhvZCcKIHByb3RlY3RlZCBib29sZWFuIGNhbk92ZXJyaWRpbmdNZXRob2RE
aWZmZXJJbkVyYXN1cmUoTWV0aG9kQmluZGluZyBvdmVycmlkaW5nTWV0aG9kLCBNZXRob2RCaW5k
aW5nIGluaGVyaXRlZE1ldGhvZCkgewpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9QYXJhbWV0
ZXJpemVkVHlwZUJpbmRpbmcuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUGFyYW1ldGVyaXplZFR5cGVC
aW5kaW5nLmphdmEKaW5kZXggYjk5YjA0NC4uZWE4ZjhiMSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xv
b2t1cC9QYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Bh
cmFtZXRlcml6ZWRUeXBlQmluZGluZy5qYXZhCkBAIC0xLDUgKzEsNSBAQAogLyoqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwNSwgMjAxMiBJQk0gQ29ycG9yYXRpb24g
YW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwNSwgMjAxMyBJQk0gQ29ycG9yYXRpb24g
YW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhl
IGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUg
dGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21w
YW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKQEAgLTExNDcsNCAr
MTE0Nyw2NSBAQAogCXB1YmxpYyBGaWVsZEJpbmRpbmdbXSB1blJlc29sdmVkRmllbGRzKCkgewog
CQlyZXR1cm4gdGhpcy5maWVsZHM7CiAJfQorCXB1YmxpYyBNZXRob2RCaW5kaW5nIGdldFNpbmds
ZUFic3RyYWN0TWV0aG9kKGZpbmFsIFNjb3BlIHNjb3BlKSB7CisJCU1ldGhvZEJpbmRpbmcgdGhl
QWJzdHJhY3RNZXRob2QgPSB0aGlzLmdlbmVyaWNUeXBlKCkuZ2V0U2luZ2xlQWJzdHJhY3RNZXRo
b2Qoc2NvcGUpOworCQlpZiAodGhlQWJzdHJhY3RNZXRob2QgPT0gbnVsbCB8fCAhdGhlQWJzdHJh
Y3RNZXRob2QuaXNWYWxpZEJpbmRpbmcoKSkKKwkJCXJldHVybiB0aGVBYnN0cmFjdE1ldGhvZDsK
KwkJCisJCVR5cGVCaW5kaW5nIFtdIHR5cGVBcmd1bWVudHMgPSB0aGlzLmFyZ3VtZW50czsgLy8g
QTEgLi4uIEFuIAorCQlUeXBlVmFyaWFibGVCaW5kaW5nIFtdIHR5cGVQYXJhbWV0ZXJzID0gdGhp
cy5nZW5lcmljVHlwZSgpLnR5cGVWYXJpYWJsZXMoKTsgLy8gUDEgLi4uIFBuCisJCVR5cGVCaW5k
aW5nIFtdIHR5cGVzID0gbmV3IFR5cGVCaW5kaW5nW3R5cGVBcmd1bWVudHMubGVuZ3RoXTsgIC8v
IFQxIC4uLiBUbgorCQlmb3IgKGludCBpID0gMCwgbGVuZ3RoID0gdHlwZUFyZ3VtZW50cy5sZW5n
dGg7IGkgPCBsZW5ndGg7IGkrKykgeworCQkJVHlwZUJpbmRpbmcgdHlwZUFyZ3VtZW50ID0gdHlw
ZUFyZ3VtZW50c1tpXTsKKwkJCXN3aXRjaCAodHlwZUFyZ3VtZW50LmtpbmQoKSkgeworCQkJCWNh
c2UgQmluZGluZy5XSUxEQ0FSRF9UWVBFIDoKKwkJCQkJV2lsZGNhcmRCaW5kaW5nIHdpbGRjYXJk
ID0gKFdpbGRjYXJkQmluZGluZykgdHlwZUFyZ3VtZW50OworCQkJCQlzd2l0Y2god2lsZGNhcmQu
Ym91bmRLaW5kKSB7CisJICAgIAkJCQljYXNlIFdpbGRjYXJkLkVYVEVORFMgOgorCSAgICAJCQkJ
Y2FzZSBXaWxkY2FyZC5TVVBFUiA6CisJICAgIAkJCQkJdHlwZXNbaV0gPSB3aWxkY2FyZC5ib3Vu
ZDsKKwkgICAgCQkJCQlicmVhazsKKwkgICAgCQkJCWNhc2UgV2lsZGNhcmQuVU5CT1VORCA6CisJ
ICAgIAkJCQkJLy8gaWYgUGkgaGFzIHVwcGVyIGJvdW5kIEJpIHRoYXQgbWVudGlvbnMgbm9uZSBv
ZiBQMS4uLlBuLCB0aGVuIFRpID0gQmk7IG90aGVyd2lzZSwgVGkgPSBPYmplY3QKKwkgICAgCQkJ
CQlmaW5hbCBUeXBlQmluZGluZyB1cHBlckJvdW5kID0gdHlwZVBhcmFtZXRlcnNbaV0uZmlyc3RC
b3VuZDsKKwkJCQkJCQlpZiAodXBwZXJCb3VuZCA9PSBudWxsIHx8IHR5cGVQYXJhbWV0ZXJzTWVu
dGlvbmVkKHVwcGVyQm91bmQpKSB7CisJICAgIAkJCQkJCXR5cGVzW2ldID0gc2NvcGUuZ2V0SmF2
YUxhbmdPYmplY3QoKTsKKwkgICAgCQkJCQl9IGVsc2UgeworCSAgICAJCQkJCQl0eXBlc1tpXSA9
IHVwcGVyQm91bmQ7CisJICAgIAkJCQkJfQorCSAgICAJCQkJCWJyZWFrOworCQkJCQl9CisJCQkJ
CWJyZWFrOworCQkJCWRlZmF1bHQgOgorCQkJCQl0eXBlc1tpXSA9IHR5cGVBcmd1bWVudDsKKwkJ
CQkJYnJlYWs7CisJCQl9CisJCQlpZiAodHlwZVBhcmFtZXRlcnNbaV0uYm91bmRDaGVjayhudWxs
LCB0eXBlc1tpXSkgIT0gVHlwZUNvbnN0YW50cy5PSykKKwkJCQlyZXR1cm4gdGhpcy5zaW5nbGVB
YnN0cmFjdE1ldGhvZCA9IG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZyhUeXBlQ29uc3RhbnRzLkFO
T05ZTU9VU19NRVRIT0QsIG51bGwsIFByb2JsZW1SZWFzb25zLk5vU3VjaFNpbmdsZUFic3RyYWN0
TWV0aG9kKTsKKwkJfQorCQlQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgcGFyYW1ldGVyaXplZFR5
cGUgPSBzY29wZS5lbnZpcm9ubWVudCgpLmNyZWF0ZVBhcmFtZXRlcml6ZWRUeXBlKGdlbmVyaWNU
eXBlKCksIHR5cGVzLCB0aGlzLmVuY2xvc2luZ1R5cGUpOworCQlyZXR1cm4gdGhpcy5zaW5nbGVB
YnN0cmFjdE1ldGhvZCA9IG5ldyBQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZyhwYXJhbWV0ZXJp
emVkVHlwZSwgdGhlQWJzdHJhY3RNZXRob2QpOworCX0KKworCXByaXZhdGUgYm9vbGVhbiB0eXBl
UGFyYW1ldGVyc01lbnRpb25lZChUeXBlQmluZGluZyB1cHBlckJvdW5kKSB7CisJCWNsYXNzIE1l
bnRpb25MaXN0ZW5lciBpbXBsZW1lbnRzIFN1YnN0aXR1dGlvbiB7CisJCQlwcml2YXRlIGJvb2xl
YW4gdHlwZVBhcmFtZXRlcnNNZW50aW9uZWQgPSBmYWxzZTsKKwkJCXB1YmxpYyBUeXBlQmluZGlu
ZyBzdWJzdGl0dXRlKFR5cGVWYXJpYWJsZUJpbmRpbmcgdHlwZVZhcmlhYmxlKSB7CisJCQkJdGhp
cy50eXBlUGFyYW1ldGVyc01lbnRpb25lZCA9IHRydWU7CisJCQkJcmV0dXJuIHR5cGVWYXJpYWJs
ZTsKKwkJCX0KKwkJCXB1YmxpYyBib29sZWFuIGlzUmF3U3Vic3RpdHV0aW9uKCkgeworCQkJCXJl
dHVybiBmYWxzZTsKKwkJCX0KKwkJCXB1YmxpYyBMb29rdXBFbnZpcm9ubWVudCBlbnZpcm9ubWVu
dCgpIHsKKwkJCQlyZXR1cm4gbnVsbDsKKwkJCX0KKwkJCXB1YmxpYyBib29sZWFuIHR5cGVQYXJh
bWV0ZXJzTWVudGlvbmVkKCkgeworCQkJCXJldHVybiB0aGlzLnR5cGVQYXJhbWV0ZXJzTWVudGlv
bmVkOworCQkJfQorCQl9CisJCU1lbnRpb25MaXN0ZW5lciBtZW50aW9uTGlzdGVuZXIgPSBuZXcg
TWVudGlvbkxpc3RlbmVyKCk7CisJCVNjb3BlLnN1YnN0aXR1dGUobWVudGlvbkxpc3RlbmVyLCB1
cHBlckJvdW5kKTsKKwkJcmV0dXJuIG1lbnRpb25MaXN0ZW5lci50eXBlUGFyYW1ldGVyc01lbnRp
b25lZCgpOworCX0KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUmVmZXJlbmNlQmluZGlu
Zy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2xvb2t1cC9SZWZlcmVuY2VCaW5kaW5nLmphdmEKaW5kZXggNTBlMTY4
ZC4uNDA0MTkzNyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9SZWZlcmVuY2VCaW5kaW5nLmph
dmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2xvb2t1cC9SZWZlcmVuY2VCaW5kaW5nLmphdmEKQEAgLTI4LDYgKzI4
LDcgQEAKIGltcG9ydCBqYXZhLnV0aWwuQ29tcGFyYXRvcjsKIAogaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5jb3JlLmNvbXBpbGVyLkNoYXJPcGVyYXRpb247CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmNvcmUuY29tcGlsZXIuSW52YWxpZElucHV0RXhjZXB0aW9uOwogaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuTWV0aG9kRGVjbGFyYXRpb247CiBpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmNsYXNzZm10LkNsYXNzRmlsZUNvbnN0YW50
czsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIudXRpbC5TaW1wbGVM
b29rdXBUYWJsZTsKQEAgLTU2LDcgKzU3LDcgQEAKIAlwcml2YXRlIFNpbXBsZUxvb2t1cFRhYmxl
IGNvbXBhdGlibGVDYWNoZTsKIAogCWludCB0eXBlQml0czsgLy8gYWRkaXRpb25hbCBiaXRzIGNo
YXJhY3Rlcml6aW5nIHRoaXMgdHlwZQotCXByaXZhdGUgTWV0aG9kQmluZGluZyBzaW5nbGVBYnN0
cmFjdE1ldGhvZDsKKwlwcm90ZWN0ZWQgTWV0aG9kQmluZGluZyBzaW5nbGVBYnN0cmFjdE1ldGhv
ZDsKIAogCXB1YmxpYyBzdGF0aWMgZmluYWwgUmVmZXJlbmNlQmluZGluZyBMVUJfR0VORVJJQyA9
IG5ldyBSZWZlcmVuY2VCaW5kaW5nKCkgeyAvKiB1c2VkIGZvciBsdWIgY29tcHV0YXRpb24gKi8K
IAkJcHVibGljIGJvb2xlYW4gaGFzVHlwZUJpdChpbnQgYml0KSB7IHJldHVybiBmYWxzZTsgfQpA
QCAtMTU3OCwxNSArMTU3OSwxNjcgQEAKIAlyZXR1cm4gMDsKIH0KIAotcHVibGljIE1ldGhvZEJp
bmRpbmcgZ2V0U2luZ2xlQWJzdHJhY3RNZXRob2QoKSB7CisKK3ByaXZhdGUgTWV0aG9kQmluZGlu
ZyBbXSBnZXRJbnRlcmZhY2VBYnN0cmFjdENvbnRyYWN0cyhTY29wZSBzY29wZSkgdGhyb3dzIElu
dmFsaWRJbnB1dEV4Y2VwdGlvbiB7CisJCisJaWYgKCFpc0ludGVyZmFjZSgpIHx8ICFpc1ZhbGlk
QmluZGluZygpKSB7CisJCXRocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oIk5vdCBhIGZ1
bmN0aW9uYWwgaW50ZXJmYWNlIik7IC8vJE5PTi1OTFMtMSQKKwl9CisJCisJTWV0aG9kQmluZGlu
ZyBbXSBtZXRob2RzID0gbWV0aG9kcygpOworCU1ldGhvZEJpbmRpbmcgW10gY29udHJhY3RzID0g
bmV3IE1ldGhvZEJpbmRpbmdbMF07CisJaW50IGNvbnRyYWN0c0NvdW50ID0gMDsKKwlpbnQgY29u
dHJhY3RzTGVuZ3RoID0gMDsKKwlNZXRob2RCaW5kaW5nIGFDb250cmFjdCA9IG51bGw7CisJaW50
IGNvbnRyYWN0UGFyYW1ldGVyTGVuZ3RoID0gMDsKKwljaGFyIFtdIGNvbnRyYWN0U2VsZWN0b3Ig
PSBudWxsOworCQorCWZvciAoaW50IGkgPSAwLCBsZW5ndGggPSBtZXRob2RzID09IG51bGwgPyAw
IDogbWV0aG9kcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgeworCQlmaW5hbCBNZXRob2RCaW5k
aW5nIG1ldGhvZCA9IG1ldGhvZHNbaV07CisJCWlmICghbWV0aG9kLmlzQWJzdHJhY3QoKSB8fCBt
ZXRob2QucmVkZWNsYXJlc1B1YmxpY09iamVjdE1ldGhvZChzY29wZSkpIGNvbnRpbnVlOyAvLyBz
a2lwcyBzdGF0aWNzLCBkZWZhdWx0cywgcHVibGljIG9iamVjdCBtZXRob2RzIC4uLgorCQlmaW5h
bCBib29sZWFuIHZhbGlkQmluZGluZyA9IG1ldGhvZC5pc1ZhbGlkQmluZGluZygpOworCQlpZiAo
YUNvbnRyYWN0ID09IG51bGwgJiYgdmFsaWRCaW5kaW5nKSB7CisJCQlhQ29udHJhY3QgPSBtZXRo
b2Q7CisJCQljb250cmFjdFBhcmFtZXRlckxlbmd0aCA9IGFDb250cmFjdC5wYXJhbWV0ZXJzLmxl
bmd0aDsKKwkJCWNvbnRyYWN0U2VsZWN0b3IgPSBhQ29udHJhY3Quc2VsZWN0b3I7CisJCX0gZWxz
ZSB7CisJCQlpZiAoIXZhbGlkQmluZGluZyB8fCBtZXRob2QucGFyYW1ldGVycy5sZW5ndGggIT0g
Y29udHJhY3RQYXJhbWV0ZXJMZW5ndGggfHwgIUNoYXJPcGVyYXRpb24uZXF1YWxzKGNvbnRyYWN0
U2VsZWN0b3IsIG1ldGhvZC5zZWxlY3RvcikpIHsKKwkJCQl0aHJvdyBuZXcgSW52YWxpZElucHV0
RXhjZXB0aW9uKCJOb3QgYSBmdW5jdGlvbmFsIGludGVyZmFjZSIpOyAvLyROT04tTkxTLTEkCisJ
CQl9CisJCX0KKwkJaWYgKGNvbnRyYWN0c0NvdW50ID09IGNvbnRyYWN0c0xlbmd0aCkgeworCQkJ
U3lzdGVtLmFycmF5Y29weShjb250cmFjdHMsIDAsIGNvbnRyYWN0cyA9IG5ldyBNZXRob2RCaW5k
aW5nW2NvbnRyYWN0c0xlbmd0aCArPSAxNl0sIDAsIGNvbnRyYWN0c0NvdW50KTsKKwkJfQorCQlj
b250cmFjdHNbY29udHJhY3RzQ291bnQrK10gPSBtZXRob2Q7CisJfQorCVJlZmVyZW5jZUJpbmRp
bmcgW10gc3VwZXJJbnRlcmZhY2VzID0gc3VwZXJJbnRlcmZhY2VzKCk7CisJZm9yIChpbnQgaSA9
IDAsIGxlbmd0aCA9IHN1cGVySW50ZXJmYWNlcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgewor
CQlNZXRob2RCaW5kaW5nIFtdIHN1cGVySW50ZXJmYWNlQ29udHJhY3RzID0gc3VwZXJJbnRlcmZh
Y2VzW2ldLmdldEludGVyZmFjZUFic3RyYWN0Q29udHJhY3RzKHNjb3BlKTsKKwkJZmluYWwgaW50
IHN1cGVySW50ZXJmYWNlQ29udHJhY3RzTGVuZ3RoID0gc3VwZXJJbnRlcmZhY2VDb250cmFjdHMg
PT0gbnVsbCAgPyAwIDogc3VwZXJJbnRlcmZhY2VDb250cmFjdHMubGVuZ3RoOworCQkKKwkJaWYg
KHN1cGVySW50ZXJmYWNlQ29udHJhY3RzTGVuZ3RoID09IDApIGNvbnRpbnVlOworCQlpZiAoYUNv
bnRyYWN0ID09IG51bGwpIHsKKwkJCWFDb250cmFjdCA9IHN1cGVySW50ZXJmYWNlQ29udHJhY3Rz
WzBdOworCQkJY29udHJhY3RQYXJhbWV0ZXJMZW5ndGggPSBhQ29udHJhY3QucGFyYW1ldGVycy5s
ZW5ndGg7CisJCQljb250cmFjdFNlbGVjdG9yID0gYUNvbnRyYWN0LnNlbGVjdG9yOworCQkJY29u
dHJhY3RzID0gc3VwZXJJbnRlcmZhY2VDb250cmFjdHM7CisJCQljb250cmFjdHNDb3VudCA9IGNv
bnRyYWN0c0xlbmd0aCA9IHN1cGVySW50ZXJmYWNlQ29udHJhY3RzTGVuZ3RoOworCQl9IGVsc2Ug
eworCQkJaWYgKHN1cGVySW50ZXJmYWNlQ29udHJhY3RzWzBdLnBhcmFtZXRlcnMubGVuZ3RoICE9
IGNvbnRyYWN0UGFyYW1ldGVyTGVuZ3RoIHx8ICFDaGFyT3BlcmF0aW9uLmVxdWFscyhjb250cmFj
dFNlbGVjdG9yLCBzdXBlckludGVyZmFjZUNvbnRyYWN0c1swXS5zZWxlY3RvcikpIHsKKwkJCQl0
aHJvdyBuZXcgSW52YWxpZElucHV0RXhjZXB0aW9uKCJOb3QgYSBmdW5jdGlvbmFsIGludGVyZmFj
ZSIpOyAvLyROT04tTkxTLTEkCisJCQl9CisJCQlpZiAoY29udHJhY3RzTGVuZ3RoIDwgY29udHJh
Y3RzQ291bnQgKyBzdXBlckludGVyZmFjZUNvbnRyYWN0c0xlbmd0aCkgeworCQkJCVN5c3RlbS5h
cnJheWNvcHkoY29udHJhY3RzLCAwLCBjb250cmFjdHMgPSBuZXcgTWV0aG9kQmluZGluZ1tjb250
cmFjdHNMZW5ndGggPSBjb250cmFjdHNDb3VudCArIHN1cGVySW50ZXJmYWNlQ29udHJhY3RzTGVu
Z3RoXSwgMCwgY29udHJhY3RzQ291bnQpOworCQkJfQorCQkJU3lzdGVtLmFycmF5Y29weShzdXBl
ckludGVyZmFjZUNvbnRyYWN0cywgMCwgY29udHJhY3RzLCBjb250cmFjdHNDb3VudCwJc3VwZXJJ
bnRlcmZhY2VDb250cmFjdHNMZW5ndGgpOworCQkJY29udHJhY3RzQ291bnQgKz0gc3VwZXJJbnRl
cmZhY2VDb250cmFjdHNMZW5ndGg7CisJCX0KKwl9CisJaWYgKGNvbnRyYWN0c0NvdW50IDwgY29u
dHJhY3RzTGVuZ3RoKSB7CisJCVN5c3RlbS5hcnJheWNvcHkoY29udHJhY3RzLCAwLCBjb250cmFj
dHMgPSBuZXcgTWV0aG9kQmluZGluZ1tjb250cmFjdHNDb3VudF0sIDAsIGNvbnRyYWN0c0NvdW50
KTsKKwl9CisJcmV0dXJuIGNvbnRyYWN0czsKK30KK3B1YmxpYyBNZXRob2RCaW5kaW5nIGdldFNp
bmdsZUFic3RyYWN0TWV0aG9kKFNjb3BlIHNjb3BlKSB7CiAJCiAJaWYgKHRoaXMuc2luZ2xlQWJz
dHJhY3RNZXRob2QgIT0gbnVsbCkgewogCQlyZXR1cm4gdGhpcy5zaW5nbGVBYnN0cmFjdE1ldGhv
ZDsKIAl9Ci0JTWV0aG9kQmluZGluZyBbXSBtZXRob2RzOwotCWlmICghaXNJbnRlcmZhY2UoKSB8
fCAobWV0aG9kcyA9IG1ldGhvZHMoKSkubGVuZ3RoICE9IDEpIHsKKworCU1ldGhvZEJpbmRpbmdb
XSBtZXRob2RzID0gbnVsbDsKKwl0cnkgeworCQltZXRob2RzID0gZ2V0SW50ZXJmYWNlQWJzdHJh
Y3RDb250cmFjdHMoc2NvcGUpOworCX0gY2F0Y2ggKEludmFsaWRJbnB1dEV4Y2VwdGlvbiBlKSB7
CiAJCXJldHVybiB0aGlzLnNpbmdsZUFic3RyYWN0TWV0aG9kID0gbmV3IFByb2JsZW1NZXRob2RC
aW5kaW5nKFR5cGVDb25zdGFudHMuQU5PTllNT1VTX01FVEhPRCwgbnVsbCwgUHJvYmxlbVJlYXNv
bnMuTm9TdWNoU2luZ2xlQWJzdHJhY3RNZXRob2QpOwogCX0KLQlyZXR1cm4gdGhpcy5zaW5nbGVB
YnN0cmFjdE1ldGhvZCA9IG1ldGhvZHNbMF07CisJaWYgKG1ldGhvZHMgIT0gbnVsbCAmJiBtZXRo
b2RzLmxlbmd0aCA9PSAxKQorCQlyZXR1cm4gdGhpcy5zaW5nbGVBYnN0cmFjdE1ldGhvZCA9IG1l
dGhvZHNbMF07CisJCisJZmluYWwgTG9va3VwRW52aXJvbm1lbnQgZW52aXJvbm1lbnQgPSBzY29w
ZS5lbnZpcm9ubWVudCgpOworCWJvb2xlYW4gZ2VuZXJpY01ldGhvZFNlZW4gPSBmYWxzZTsKKwlu
ZXh0OmZvciAoaW50IGkgPSAwLCBsZW5ndGggPSBtZXRob2RzLmxlbmd0aDsgaSA8IGxlbmd0aDsg
aSsrKSB7CisJCU1ldGhvZEJpbmRpbmcgbWV0aG9kID0gbWV0aG9kc1tpXSwgb3RoZXJNZXRob2Qg
PSBudWxsOworCQlpZiAobWV0aG9kLnR5cGVWYXJpYWJsZXMgIT0gQmluZGluZy5OT19UWVBFX1ZB
UklBQkxFUykKKwkJCWdlbmVyaWNNZXRob2RTZWVuID0gdHJ1ZTsKKwkJZm9yIChpbnQgaiA9IDA7
IGogPCBsZW5ndGg7IGorKykgeworCQkJaWYgKGkgPT0gaikgY29udGludWU7CisJCQlvdGhlck1l
dGhvZCA9IG1ldGhvZHNbal07CisJCQlpZiAob3RoZXJNZXRob2QudHlwZVZhcmlhYmxlcyAhPSBC
aW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTKQorCQkJCWdlbmVyaWNNZXRob2RTZWVuID0gdHJ1ZTsK
KwkJCWlmICghTWV0aG9kVmVyaWZpZXIuaXNQYXJhbWV0ZXJTdWJzaWduYXR1cmUobWV0aG9kLCBv
dGhlck1ldGhvZCwgZW52aXJvbm1lbnQpIHx8ICFNZXRob2RWZXJpZmllci5hcmVSZXR1cm5UeXBl
c0NvbXBhdGlibGUobWV0aG9kLCBvdGhlck1ldGhvZCwgZW52aXJvbm1lbnQpKSAKKwkJCQljb250
aW51ZSBuZXh0OyAKKwkJfQorCQkvLyBJZiB3ZSByZWFjaCBoZXJlLCB3ZSBmb3VuZCBhIG1ldGhv
ZCB0aGF0IGlzIG92ZXJyaWRlIGVxdWl2YWxlbnQgd2l0aCBldmVyeSBvdGhlciBtZXRob2QgYW5k
IGlzIGFsc28gcmV0dXJuIHR5cGUgc3Vic3RpdHV0YWJsZS4gQ29tcHV0ZSBrb3NoZXIgZXhjZXB0
aW9ucyBub3cgLi4uCisJCVJlZmVyZW5jZUJpbmRpbmcgW10gZXhjZXB0aW9ucyA9IG5ldyBSZWZl
cmVuY2VCaW5kaW5nWzBdOworCQlpbnQgZXhjZXB0aW9uc0NvdW50ID0gMCwgZXhjZXB0aW9uc0xl
bmd0aCA9IDA7CisJCWZpbmFsIE1ldGhvZEJpbmRpbmcgdGhlQWJzdHJhY3RNZXRob2QgPSBtZXRo
b2Q7CisJCWJvb2xlYW4gc2hvdWxkRXJhc2VUaHJvd3MgPSB0aGVBYnN0cmFjdE1ldGhvZC50eXBl
VmFyaWFibGVzID09IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMgJiYgZ2VuZXJpY01ldGhvZFNl
ZW47CisJCWJvb2xlYW4gc2hvdWxkQWRhcHRUaHJvd3MgPSB0aGVBYnN0cmFjdE1ldGhvZC50eXBl
VmFyaWFibGVzICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVM7CisJCWZpbmFsIGludCB0eXBl
VmFyaWFibGVMZW5ndGggPSB0aGVBYnN0cmFjdE1ldGhvZC50eXBlVmFyaWFibGVzLmxlbmd0aDsK
KwkJCisJCW5vbmU6Zm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CisJCQltZXRob2QgPSBt
ZXRob2RzW2ldOworCQkJUmVmZXJlbmNlQmluZGluZ1tdIG1ldGhvZFRocm93bkV4Y2VwdGlvbnMg
PSBtZXRob2QudGhyb3duRXhjZXB0aW9uczsKKwkJCWludCBtZXRob2RFeGNlcHRpb25zTGVuZ3Ro
ID0gbWV0aG9kVGhyb3duRXhjZXB0aW9ucyA9PSBudWxsID8gMDogbWV0aG9kVGhyb3duRXhjZXB0
aW9ucy5sZW5ndGg7CisJCQlpZiAobWV0aG9kRXhjZXB0aW9uc0xlbmd0aCA9PSAwKSBicmVhayBu
b25lOworCQkJaWYgKHNob3VsZEFkYXB0VGhyb3dzICYmIG1ldGhvZCAhPSB0aGVBYnN0cmFjdE1l
dGhvZCkgeworCQkJCVN5c3RlbS5hcnJheWNvcHkobWV0aG9kVGhyb3duRXhjZXB0aW9ucywgMCwg
bWV0aG9kVGhyb3duRXhjZXB0aW9ucyA9IG5ldyBSZWZlcmVuY2VCaW5kaW5nW21ldGhvZEV4Y2Vw
dGlvbnNMZW5ndGhdLCAwLCBtZXRob2RFeGNlcHRpb25zTGVuZ3RoKTsKKwkJCQlmb3IgKGludCB0
diA9IDA7IHR2IDwgdHlwZVZhcmlhYmxlTGVuZ3RoOyB0disrKSB7CisJCQkJCWlmIChtZXRob2RU
aHJvd25FeGNlcHRpb25zW3R2XSBpbnN0YW5jZW9mIFR5cGVWYXJpYWJsZUJpbmRpbmcpIHsKKwkJ
CQkJCW1ldGhvZFRocm93bkV4Y2VwdGlvbnNbdHZdID0gdGhlQWJzdHJhY3RNZXRob2QudHlwZVZh
cmlhYmxlc1t0dl07CisJCQkJCX0KKwkJCQl9CisJCQl9CisJCQluZXh0RXhjZXB0aW9uOiBmb3Ig
KGludCBqID0gMDsgaiA8IG1ldGhvZEV4Y2VwdGlvbnNMZW5ndGg7IGorKykgeworCQkJCVJlZmVy
ZW5jZUJpbmRpbmcgbWV0aG9kRXhjZXB0aW9uID0gbWV0aG9kVGhyb3duRXhjZXB0aW9uc1tqXTsK
KwkJCQlpZiAoc2hvdWxkRXJhc2VUaHJvd3MpCisJCQkJCW1ldGhvZEV4Y2VwdGlvbiA9IChSZWZl
cmVuY2VCaW5kaW5nKSBtZXRob2RFeGNlcHRpb24uZXJhc3VyZSgpOworCQkJCW5leHRNZXRob2Q6
IGZvciAoaW50IGsgPSAwOyBrIDwgbGVuZ3RoOyBrKyspIHsKKwkJCQkJaWYgKGkgPT0gaykgY29u
dGludWU7CisJCQkJCW90aGVyTWV0aG9kID0gbWV0aG9kc1trXTsKKwkJCQkJUmVmZXJlbmNlQmlu
ZGluZ1tdIG90aGVyTWV0aG9kVGhyb3duRXhjZXB0aW9ucyA9IG90aGVyTWV0aG9kLnRocm93bkV4
Y2VwdGlvbnM7CisJCQkJCWludCBvdGhlck1ldGhvZEV4Y2VwdGlvbnNMZW5ndGggPSAgb3RoZXJN
ZXRob2RUaHJvd25FeGNlcHRpb25zID09IG51bGwgPyAwIDogb3RoZXJNZXRob2RUaHJvd25FeGNl
cHRpb25zLmxlbmd0aDsKKwkJCQkJaWYgKG90aGVyTWV0aG9kRXhjZXB0aW9uc0xlbmd0aCA9PSAw
KSBicmVhayBub25lOworCQkJCQlpZiAoc2hvdWxkQWRhcHRUaHJvd3MgJiYgb3RoZXJNZXRob2Qg
IT0gdGhlQWJzdHJhY3RNZXRob2QpIHsKKwkJCQkJCVN5c3RlbS5hcnJheWNvcHkob3RoZXJNZXRo
b2RUaHJvd25FeGNlcHRpb25zLCAKKwkJCQkJCQkJMCwgCisJCQkJCQkJCW90aGVyTWV0aG9kVGhy
b3duRXhjZXB0aW9ucyA9IG5ldyBSZWZlcmVuY2VCaW5kaW5nW290aGVyTWV0aG9kRXhjZXB0aW9u
c0xlbmd0aF0sIAorCQkJCQkJCQkwLCAKKwkJCQkJCQkJb3RoZXJNZXRob2RFeGNlcHRpb25zTGVu
Z3RoKTsKKwkJCQkJCWZvciAoaW50IHR2ID0gMDsgdHYgPCB0eXBlVmFyaWFibGVMZW5ndGg7IHR2
KyspIHsKKwkJCQkJCQlpZiAob3RoZXJNZXRob2RUaHJvd25FeGNlcHRpb25zW3R2XSBpbnN0YW5j
ZW9mIFR5cGVWYXJpYWJsZUJpbmRpbmcpIHsKKwkJCQkJCQkJb3RoZXJNZXRob2RUaHJvd25FeGNl
cHRpb25zW3R2XSA9IHRoZUFic3RyYWN0TWV0aG9kLnR5cGVWYXJpYWJsZXNbdHZdOworCQkJCQkJ
CX0KKwkJCQkJCX0KKwkJCQkJfQorCQkJCQlmb3IgKGludCBsID0gMDsgbCA8IG90aGVyTWV0aG9k
RXhjZXB0aW9uc0xlbmd0aDsgbCsrKSB7CisJCQkJCQlSZWZlcmVuY2VCaW5kaW5nIG90aGVyRXhj
ZXB0aW9uID0gb3RoZXJNZXRob2RUaHJvd25FeGNlcHRpb25zW2xdOworCQkJCQkJaWYgKHNob3Vs
ZEVyYXNlVGhyb3dzKQorCQkJCQkJCW90aGVyRXhjZXB0aW9uID0gKFJlZmVyZW5jZUJpbmRpbmcp
IG90aGVyRXhjZXB0aW9uLmVyYXN1cmUoKTsKKwkJCQkJCWlmIChtZXRob2RFeGNlcHRpb24uaXND
b21wYXRpYmxlV2l0aChvdGhlckV4Y2VwdGlvbikpCisJCQkJCQkJY29udGludWUgbmV4dE1ldGhv
ZDsKKwkJCQkJfQorCQkJCQljb250aW51ZSBuZXh0RXhjZXB0aW9uOworCQkJCX0KKwkJCQkvLyBJ
ZiB3ZSByZWFjaCBoZXJlLCBtZXRob2QgZXhjZXB0aW9uIG9yIGl0cyBzdXBlciB0eXBlIGlzIGNv
dmVyZWQgYnkgZXZlcnkgdGhyb3dzIGNsYXVzZS4KKwkJCQlpZiAoZXhjZXB0aW9uc0NvdW50ID09
IGV4Y2VwdGlvbnNMZW5ndGgpIHsKKwkJCQkJU3lzdGVtLmFycmF5Y29weShleGNlcHRpb25zLCAw
LCBleGNlcHRpb25zID0gbmV3IFJlZmVyZW5jZUJpbmRpbmdbZXhjZXB0aW9uc0xlbmd0aCArPSAx
Nl0sIDAsIGV4Y2VwdGlvbnNDb3VudCk7CisJCQkJfQorCQkJCWV4Y2VwdGlvbnNbZXhjZXB0aW9u
c0NvdW50KytdID0gbWV0aG9kRXhjZXB0aW9uOworCQkJfQorCQl9CisJCWlmIChleGNlcHRpb25z
Q291bnQgIT0gZXhjZXB0aW9uc0xlbmd0aCkgeworCQkJU3lzdGVtLmFycmF5Y29weShleGNlcHRp
b25zLCAwLCBleGNlcHRpb25zID0gbmV3IFJlZmVyZW5jZUJpbmRpbmdbZXhjZXB0aW9uc0NvdW50
XSwgMCwgZXhjZXB0aW9uc0NvdW50KTsKKwkJfQorCQl0aGlzLnNpbmdsZUFic3RyYWN0TWV0aG9k
ID0gbmV3IE1ldGhvZEJpbmRpbmcodGhlQWJzdHJhY3RNZXRob2QubW9kaWZpZXJzLCAKKwkJCQl0
aGVBYnN0cmFjdE1ldGhvZC5zZWxlY3RvciwgCisJCQkJdGhlQWJzdHJhY3RNZXRob2QucmV0dXJu
VHlwZSwgCisJCQkJdGhlQWJzdHJhY3RNZXRob2QucGFyYW1ldGVycywgCisJCQkJZXhjZXB0aW9u
cywgCisJCQkJdGhlQWJzdHJhY3RNZXRob2QuZGVjbGFyaW5nQ2xhc3MpOworCSAgICB0aGlzLnNp
bmdsZUFic3RyYWN0TWV0aG9kLnR5cGVWYXJpYWJsZXMgPSB0aGVBYnN0cmFjdE1ldGhvZC50eXBl
VmFyaWFibGVzOworCQlyZXR1cm4gdGhpcy5zaW5nbGVBYnN0cmFjdE1ldGhvZDsKKwl9CisJcmV0
dXJuIHRoaXMuc2luZ2xlQWJzdHJhY3RNZXRob2QgPSBuZXcgUHJvYmxlbU1ldGhvZEJpbmRpbmco
VHlwZUNvbnN0YW50cy5BTk9OWU1PVVNfTUVUSE9ELCBudWxsLCBQcm9ibGVtUmVhc29ucy5Ob1N1
Y2hTaW5nbGVBYnN0cmFjdE1ldGhvZCk7CiB9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3Vw
L1R5cGVCaW5kaW5nLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1R5cGVCaW5kaW5nLmphdmEKaW5kZXgg
ZDczNzIzMC4uMzVkOWZhMCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9UeXBlQmluZGluZy5q
YXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9sb29rdXAvVHlwZUJpbmRpbmcuamF2YQpAQCAtMTIzMCwxMCArMTIz
MCwxMSBAQAogCiAvKioKICAqIFJldHVybiB0aGUgc2luZ2xlIGFic3RyYWN0IG1ldGhvZCBvZiBh
IGZ1bmN0aW9uYWwgaW50ZXJmYWNlLCBvciBudWxsLCBpZiB0aGUgcmVjZWl2ZXIgaXMgbm90IGEg
ZnVuY3Rpb25hbCBpbnRlcmZhY2UgYXMgZGVmaW5lZCBpbiBKTFMgOS44LgorICogQHBhcmFtIHNj
b3BlIHNjb3BlCiAgKiAgCiAgKiBAcmV0dXJuIFRoZSBzaW5nbGUgYWJzdHJhY3QgbWV0aG9kIG9m
IGEgZnVuY3Rpb25hbCBpbnRlcmZhY2UsIG9yIG51bGwsIGlmIHRoZSByZWNlaXZlciBpcyBub3Qg
YSBmdW5jdGlvbmFsIGludGVyZmFjZS4gCiAgKi8KLXB1YmxpYyBNZXRob2RCaW5kaW5nIGdldFNp
bmdsZUFic3RyYWN0TWV0aG9kKCkgeworcHVibGljIE1ldGhvZEJpbmRpbmcgZ2V0U2luZ2xlQWJz
dHJhY3RNZXRob2QoU2NvcGUgc2NvcGUpIHsKIAlyZXR1cm4gbnVsbDsKIH0KIA==
</data>

          </attachment>
      

    </bug>

</bugzilla>