<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>346038</bug_id>
          
          <creation_ts>2011-05-17 03:23:00 -0400</creation_ts>
          <short_desc>[1.5][compiler] ecj vs. javac differ for methods using vararg parameters of different primitive types</short_desc>
          <delta_ts>2012-06-28 08:07:43 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.7</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>3.8 M4</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Ayushman Jain">amj87.iitr</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>erikj</cc>
    
    <cc>jarthana</cc>
    
    <cc>nhb_web</cc>
    
    <cc>Olivier_Thomann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1931432</commentid>
    <comment_count>0</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-05-17 03:23:59 -0400</bug_when>
    <thetext>The following snippet fails to compile with HEAD. (build I20110514-0800).

package snippet;
class Test {
        public static void foo(int ...i) {}
        public static void foo(double...d) {}
    
        public static void main(String[] args) {
            foo(1, 2, 3);     // foo flagged ambiguous
        }
    }

Eclipse behaviour is consistent with javac 5,6 but with javac7 this has been fixed. See javac bug http://bugs.sun.com/view_bug.do?bug_id=6199075 for detailed explanation.

This needs to be fixed for eclipse compiler as well.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1931647</commentid>
    <comment_count>1</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-05-17 08:42:26 -0400</bug_when>
    <thetext>I would target 3.7.1 to match the Java 7 behavior when the Java 7 support is released.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1973953</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-08-04 00:22:55 -0400</bug_when>
    <thetext>Don&apos;t expect to get to this before 3.8. Retargetting.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2026395</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-15 00:46:31 -0500</bug_when>
    <thetext>While working on this I ran into this case in

org.eclipse.jdt.core.tests.compiler.regression.VarargsTest.test015()

where we have codified the wrong behavior as the expected behavior.
The test case being:

public class X {
	public static void main(String[] s) {
		Y.count(new int[0]);// for some reason this is not ambiguous
	}
}
class Y {
	public static void count(int[] array, int ... values) { System.out.print(1); }
	public static void count(int[] array, int[] ... values) { System.out.print(2); }
}

In fact both javac5 and javac6 match eclipse behavior i.e they don&apos;t
flag the call as ambiguous. Javac7 does report the call as being ambiguous.

Javac7&apos;s behavior is the right one as shown by the following slightly
modified test case:

public class X {
	public static void main(String[] s) {
		Y.count(new int[0]);// for some reason this is not ambiguous
		Y.count(new int[0], 10);  // binds only to 1st count
		Y.count(new int[0], new int[0][0]); // binds only to 2nd count
	}
}
class Y {
	public static void count(int[] array, int ... values) { System.out.print(1); }
	public static void count(int[] array, int[] ... values) { System.out.print(2); }
}

This test case proves that neither is more specific than the other and
so the call is ambiguous.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2027825</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-17 07:30:47 -0500</bug_when>
    <thetext>Combined fix and tests for bug 346039 and bug 346038 have been released into
3.8 stream via 85f48e0f08275e1f81e9995073d5c4f69bfd0707.

Some existing tests had to be remastered - in all instances the behavior
matches JDK 7b147 behavior.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2036240</commentid>
    <comment_count>5</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2011-12-06 06:16:57 -0500</bug_when>
    <thetext>Verified for 3.8M4 with build I20111204-2000.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2109841</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-05-17 22:22:42 -0400</bug_when>
    <thetext>*** Bug 379871 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2130341</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-06-28 08:07:43 -0400</bug_when>
    <thetext>*** Bug 383780 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>