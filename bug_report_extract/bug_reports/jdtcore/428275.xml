<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>428275</bug_id>
          
          <creation_ts>2014-02-15 21:11:00 -0500</creation_ts>
          <short_desc>[1.8][compiler] CCE in InferenceContext18.varArgTypes</short_desc>
          <delta_ts>2014-02-20 23:29:02 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Mac OS X</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P2</priority>
          <bug_severity>critical</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Steve Northover">snorthov</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2363856</commentid>
    <comment_count>0</comment_count>
    <who name="Steve Northover">snorthov</who>
    <bug_when>2014-02-15 21:11:26 -0500</bug_when>
    <thetext>Attempting to compile this file in Eclipse JDK8 produces the exception described in the tile of this bug report:

/*
 * Copyright (c) 2008, 2013 Oracle and/or its affiliates.
 * All rights reserved. Use is subject to license terms.
 *
 * This file is available and licensed under the following license:
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 *  - Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *  - Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the distribution.
 *  - Neither the name of Oracle Corporation nor the names of its
 *    contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
package ensemble.samples.charts.bar.image;


import javafx.application.Application;
import javafx.collections.FXCollections;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.chart.BarChart;
import javafx.scene.chart.CategoryAxis;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.XYChart;
import javafx.stage.Stage;


/**
 * A bar chart that uses CSS to display stacks of car images to indicate data values
 * for categories. 
 *
 * @sampleName Image Bar Chart
 * @preview preview.png
 * @see javafx.scene.chart.BarChart
 * @see javafx.scene.chart.CategoryAxis
 * @see javafx.scene.chart.NumberAxis
 * @playground chart.data
 * 
 * @playground - (name=&quot;xAxis&quot;)
 * @playground xAxis.autoRanging
 * @playground xAxis.gapStartAndEnd
 * @playground xAxis.startMargin
 * @playground xAxis.endMargin
 * 
 * @playground xAxis.animated
 * @playground xAxis.side
 * @playground xAxis.tickLabelFill
 * @playground xAxis.tickLabelGap
 * @playground xAxis.tickLabelRotation (min=-180,max=180,step=1)
 * @playground xAxis.tickLabelsVisible
 * @playground xAxis.tickLength
 * @playground xAxis.tickMarkVisible
 * 
 * @playground - (name=&quot;yAxis&quot;)
 * @playground yAxis.autoRanging
 * @playground yAxis.forceZeroInRange
 * @playground yAxis.lowerBound (min=-100,max=0,step=1)
 * @playground yAxis.upperBound (max=200,step=1)
 * @playground yAxis.tickUnit (step=1)
 * @playground yAxis.minorTickCount (max=16)
 * @playground yAxis.minorTickLength (max=15)
 * @playground yAxis.minorTickVisible
 * 
 * @playground yAxis.animated
 * @playground yAxis.side
 * @playground yAxis.tickLabelFill
 * @playground yAxis.tickLabelGap
 * @playground yAxis.tickLabelRotation (min=-180,max=180,step=1)
 * @playground yAxis.tickLabelsVisible
 * @playground yAxis.tickLength
 * @playground yAxis.tickMarkVisible
 * 
 * @playground - (name=&quot;chart&quot;)
 * @playground chart.horizontalGridLinesVisible
 * @playground chart.horizontalZeroLineVisible
 * @playground chart.verticalGridLinesVisible
 * @playground chart.verticalZeroLineVisible
 * 
 * @playground chart.animated
 * @playground chart.legendSide
 * @playground chart.legendVisible
 * @playground chart.title
 * @playground chart.titleSide
 */
public class ImageBarChartApp extends Application {
    
    private BarChart chart;
    private CategoryAxis xAxis;
    private NumberAxis yAxis;

    public Parent createContent() {
        xAxis = new CategoryAxis();
        yAxis = new NumberAxis();
        chart = new BarChart(xAxis, yAxis);
        chart.setLegendVisible(false);
        chart.getStylesheets().add(ImageBarChartApp.class
                .getResource(&quot;ImageBarChart.css&quot;).toExternalForm());

        chart.getData().add(
                new XYChart.Series&lt;&gt;(&quot;Sales Per Product&quot;,
                    FXCollections.observableArrayList(
                        new XYChart.Data&lt;&gt;(&quot;SUV&quot;, 120),
                        new XYChart.Data&lt;&gt;(&quot;Sedan&quot;, 50),
                        new XYChart.Data&lt;&gt;(&quot;Truck&quot;, 180),
                        new XYChart.Data&lt;&gt;(&quot;Van&quot;, 20)
                    )
                )
        );
        return chart;
    }
    
    
    @Override public void start(Stage primaryStage) throws Exception {
        primaryStage.setScene(new Scene(createContent()));
        primaryStage.show();
    }

    /**
     * Java main for when running without JavaFX launcher
     * @param args command line arguments
     */
    public static void main(String[] args) {
        launch(args);
    }    
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2363857</commentid>
    <comment_count>1</comment_count>
    <who name="Steve Northover">snorthov</who>
    <bug_when>2014-02-15 21:13:06 -0500</bug_when>
    <thetext>Here is the stack trace:

java.lang.ClassCastException: org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding cannot be cast to org.eclipse.jdt.internal.compiler.lookup.ArrayBinding
	at org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.varArgTypes(InferenceContext18.java:1256)
	at org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.addConstraintsToC(InferenceContext18.java:461)
	at org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.addConstraintsToC_OneExpr(InferenceContext18.java:489)
	at org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.addConstraintsToC(InferenceContext18.java:469)
	at org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.inferInvocationType(InferenceContext18.java:397)
	at org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.inferInvocationType(InferenceContext18.java:525)
	at org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.inferInvocationType(InferenceContext18.java:578)
	at org.eclipse.jdt.internal.compiler.ast.ASTNode.resolvePolyExpressionArguments(ASTNode.java:716)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.inferInvocationType(Scope.java:5086)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getConstructor0(Scope.java:2466)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getConstructor(Scope.java:2405)
	at org.eclipse.jdt.internal.compiler.ast.Statement.findConstructorBinding(Statement.java:364)
	at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.resolvePart2(AllocationExpression.java:510)
	at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.binding(AllocationExpression.java:701)
	at org.eclipse.jdt.internal.compiler.ast.ASTNode.resolvePolyExpressionArguments(ASTNode.java:709)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.inferInvocationType(Scope.java:5086)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.mostSpecificMethodBinding(Scope.java:4627)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1904)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1636)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getMethod(Scope.java:2902)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.findMethodBinding(MessageSend.java:867)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:699)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1019)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:618)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:303)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:532)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1211)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1321)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:571)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:1208)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:693)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1187)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:813)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:548)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:541)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:484)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:132)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2363858</commentid>
    <comment_count>2</comment_count>
    <who name="Steve Northover">snorthov</who>
    <bug_when>2014-02-15 21:13:23 -0500</bug_when>
    <thetext>Here is the stack trace:

java.lang.ClassCastException: org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding cannot be cast to org.eclipse.jdt.internal.compiler.lookup.ArrayBinding
	at org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.varArgTypes(InferenceContext18.java:1256)
	at org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.addConstraintsToC(InferenceContext18.java:461)
	at org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.addConstraintsToC_OneExpr(InferenceContext18.java:489)
	at org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.addConstraintsToC(InferenceContext18.java:469)
	at org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.inferInvocationType(InferenceContext18.java:397)
	at org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.inferInvocationType(InferenceContext18.java:525)
	at org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.inferInvocationType(InferenceContext18.java:578)
	at org.eclipse.jdt.internal.compiler.ast.ASTNode.resolvePolyExpressionArguments(ASTNode.java:716)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.inferInvocationType(Scope.java:5086)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getConstructor0(Scope.java:2466)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getConstructor(Scope.java:2405)
	at org.eclipse.jdt.internal.compiler.ast.Statement.findConstructorBinding(Statement.java:364)
	at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.resolvePart2(AllocationExpression.java:510)
	at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.binding(AllocationExpression.java:701)
	at org.eclipse.jdt.internal.compiler.ast.ASTNode.resolvePolyExpressionArguments(ASTNode.java:709)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.inferInvocationType(Scope.java:5086)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.mostSpecificMethodBinding(Scope.java:4627)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1904)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1636)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getMethod(Scope.java:2902)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.findMethodBinding(MessageSend.java:867)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:699)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1019)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:618)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:303)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:532)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1211)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1321)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:571)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:1208)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:693)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1187)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:813)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:548)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:541)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:484)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:132)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2363862</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-15 21:31:11 -0500</bug_when>
    <thetext>Thanks I can reproduce.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2363863</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-15 22:15:13 -0500</bug_when>
    <thetext>Minimal repro:

//---
package p1;

import java.util.List;

public class C1&lt;T1&gt; {

	public static class CInner&lt;T2A,T2B&gt; {
		public CInner(T2A a, T2B b) {}
	}
	
	public static class CInner2&lt;T3A,T3B&gt; {
		public CInner2(String n, List&lt;CInner&lt;T3A,T3B&gt;&gt; arg) {}
	}
	
    public static &lt;E&gt; List&lt;E&gt; getList1(E... items) {
    	return null;
    }
}
//---
import java.util.List;

import p1.C1;

public class Test {
	void test2(List&lt;C1.CInner2&gt; l) {
		l.add(
			new C1.CInner2&lt;&gt;(&quot;a&quot;,
				C1.getList1(new C1.CInner&lt;&gt;(&quot;b&quot;, 13))
			)
		);
	}
}
//---

Should I mention that this snippet is full of unsafe typing??
(raw types plus:
A generic array of C1&lt;T1&gt;.CInner&lt;String,Object&gt; is created for a varargs parameter)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2363900</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-16 05:49:54 -0500</bug_when>
    <thetext>The immediate cause is: compiler believes the inner invocation (new C1.CInner&lt;&gt;()) is varargs, just because the outer is (C1.getList1(..)). This is plain wrong, no excuse why I wrote such code =:-0

The reason we fall back to this bogus rule is, however, that we don&apos;t find the inference context for the inner invocation. Some information get&apos;s lost in the back-and-forth between original methods, synthetic factory methods and the parameterized versions of both. Additionally this list of methods is duplicated because we see the enclosing type in its raw and parameterized variants. In plain words: the same constructor of CInner is represented by probabley more than 10 method bindings.

I&apos;m investigating if we can retrieve the lost inference context for a real solution.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2363912</commentid>
    <comment_count>6</comment_count>
    <who name="Steve Northover">snorthov</who>
    <bug_when>2014-02-16 07:03:53 -0500</bug_when>
    <thetext>FYI: This bug is impacting OpenJFX project builds.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2363919</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-16 07:25:14 -0500</bug_when>
    <thetext>It seems the root cause for confusion is really the inconsistent handling of parameterized static inners of a generic enclosing type. By ensuring that we always represent these as Outer#RAW.Innter&lt;P1,..&gt; I&apos;m able to retrieve the inference context as required -&gt; the bogus fallback is not longer used and no CCE occurs.

Running all tests now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2363929</commentid>
    <comment_count>8</comment_count>
      <attachid>239998</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-16 08:33:13 -0500</bug_when>
    <thetext>Created attachment 239998
Proposed patch

This patch fixes the root cause of this bug.

Posting here for coordination with concurrent changes re Scope.getStaticFactory().

Two locations are adjusted for viewing an enclosing generic type as raw, unless an instance is in scope:
- Scope.getStaticFactory()
- SyntheticFactoryMethodBinding.applyTypeArgumentsOnConstructor()
New helper: AE.hasEnclosingInstanceInScope(), a variant in QAE is still lacking.

The change in AE.updateBindings should increase safety but is not directly related to the business of enclosing-as-raw.

RunAllJava8Tests runs green with this patch</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2363941</commentid>
    <comment_count>9</comment_count>
    <who name="Steve Northover">snorthov</who>
    <bug_when>2014-02-16 09:28:19 -0500</bug_when>
    <thetext>I am using the Eclipse JDK8 update site.  Please let me know when (if) the fix goes in so that I can try it out and get back to you.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2364044</commentid>
    <comment_count>10</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-16 15:24:55 -0500</bug_when>
    <thetext>I released the cleaned up static factory computation on behalf of
https://bugs.eclipse.org/bugs/show_bug.cgi?id=428305.

I&apos;ll shortly review the proposed patch here and absorb what needs to be
absorbed and release it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2364053</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-16 15:56:50 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #10)
&gt; I released the cleaned up static factory computation on behalf of
&gt; https://bugs.eclipse.org/bugs/show_bug.cgi?id=428305.
&gt; 
&gt; I&apos;ll shortly review the proposed patch here and absorb what needs to be
&gt; absorbed and release it.

Looks like only the change to org.eclipse.jdt.internal.compiler.ast.AllocationExpression.updateBindings(MethodBinding, TypeBinding) is required - all others are addressed by the cleaned up
implementation.

Released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=511ebb0693daff19b87539c181be8ce8c5d1d9f3

Stephan, you are welcome to glance through the spruced up factory computation
here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=0b27309efdaba54bffa19e81e0f1e5ae6f176884</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2364082</commentid>
    <comment_count>12</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-16 17:51:46 -0500</bug_when>
    <thetext>Cool, all my workarounds are obsolete :)
Much better!

I just added a final bit of safety for the case we still can&apos;t retrieve an inference context. Now we can be quite sure that this means the given (inner) invocation isn&apos;t participating in inference :)

That part released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=910ddfb0a69780d141bc1b44c0e8d3aabb813532</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2366446</commentid>
    <comment_count>13</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-20 23:29:02 -0500</bug_when>
    <thetext>Verified as working for Eclipse + Java 8 RC1 using Kepler SR1 +   
Eclipse Java Development Tools Patch for Java 8 Support (BETA)	1.0.0.v20140220-2054</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>239998</attachid>
            <date>2014-02-16 08:33:00 -0500</date>
            <delta_ts>2014-02-16 08:33:13 -0500</delta_ts>
            <desc>Proposed patch</desc>
            <filename>Bug-428275--18compiler-CCE-in-InferenceContext18varA.patch</filename>
            <type>text/plain</type>
            <size>8794</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3RfMV84LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmlj
c1JlZ3Jlc3Npb25UZXN0XzFfOC5qYXZhCmluZGV4IDI2MjVlYjQuLjhiMjJhOGYgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3Rf
MV84LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdy
ZXNzaW9uVGVzdF8xXzguamF2YQpAQCAtMjE3Nyw0ICsyMTc3LDQyIEBACiAJCQkifVxuIgogCQl9
KTsKIH0KK3B1YmxpYyB2b2lkIHRlc3RCdWc0MjgyNzUoKSB7CisJcnVuQ29uZm9ybVRlc3QoCisJ
CW5ldyBTdHJpbmdbXSB7CisJCQkicDEvQzEuamF2YSIsCisJCQkicGFja2FnZSBwMTtcbiIgKyAK
KwkJCSJcbiIgKyAKKwkJCSJpbXBvcnQgamF2YS51dGlsLkxpc3Q7XG4iICsgCisJCQkiXG4iICsg
CisJCQkicHVibGljIGNsYXNzIEMxPFQxPiB7XG4iICsgCisJCQkiXG4iICsgCisJCQkiCXB1Ymxp
YyBzdGF0aWMgY2xhc3MgQ0lubmVyPFQyQSxUMkI+IHtcbiIgKyAKKwkJCSIJCXB1YmxpYyBDSW5u
ZXIoVDJBIGEsIFQyQiBiKSB7fVxuIiArIAorCQkJIgl9XG4iICsgCisJCQkiCVxuIiArIAorCQkJ
IglwdWJsaWMgc3RhdGljIGNsYXNzIENJbm5lcjI8VDNBLFQzQj4ge1xuIiArIAorCQkJIgkJcHVi
bGljIENJbm5lcjIoU3RyaW5nIG4sIExpc3Q8Q0lubmVyPFQzQSxUM0I+PiBhcmcpIHt9XG4iICsg
CisJCQkiCX1cbiIgKyAKKwkJCSIJXG4iICsgCisJCQkiICAgIHB1YmxpYyBzdGF0aWMgPEU+IExp
c3Q8RT4gZ2V0TGlzdDEoRS4uLiBpdGVtcykge1xuIiArIAorCQkJIiAgICAJcmV0dXJuIG51bGw7
XG4iICsgCisJCQkiICAgIH1cbiIgKyAKKwkJCSJ9XG4iLAorCQkJIlRlc3QuamF2YSIsCisJCQki
aW1wb3J0IGphdmEudXRpbC5MaXN0O1xuIiArIAorCQkJIlxuIiArIAorCQkJImltcG9ydCBwMS5D
MTtcbiIgKyAKKwkJCSJcbiIgKyAKKwkJCSJwdWJsaWMgY2xhc3MgVGVzdCB7XG4iICsgCisJCQki
CXZvaWQgdGVzdDIoTGlzdDxDMS5DSW5uZXIyPiBsKSB7XG4iICsgCisJCQkiCQlsLmFkZChcbiIg
KyAKKwkJCSIJCQluZXcgQzEuQ0lubmVyMjw+KFwiYVwiLFxuIiArIAorCQkJIgkJCQlDMS5nZXRM
aXN0MShuZXcgQzEuQ0lubmVyPD4oXCJiXCIsIDEzKSlcbiIgKyAKKwkJCSIJCQkpXG4iICsgCisJ
CQkiCQkpO1xuIiArIAorCQkJIgl9XG4iICsgCisJCQkifVxuIgorCQl9KTsKK30KIH0KZGlmZiAt
LWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3Qv
QWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YQppbmRleCAyZmJmMTE4Li4xNDM5MDMxIDEwMDY0NAot
LS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXN0L0FsbG9jYXRpb25FeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fz
dC9BbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCkBAIC03MTcsOCArNzE3LDggQEAKIAogcHVibGlj
IGJvb2xlYW4gdXBkYXRlQmluZGluZ3MoTWV0aG9kQmluZGluZyB1cGRhdGVkQmluZGluZywgVHlw
ZUJpbmRpbmcgdGFyZ2V0VHlwZSkgewogCWJvb2xlYW4gaGFzVXBkYXRlID0gdGhpcy5iaW5kaW5n
ICE9IHVwZGF0ZWRCaW5kaW5nOwotCWlmICh0aGlzLmluZmVyZW5jZUNvbnRleHRzICE9IG51bGwp
IHsKLQkJSW5mZXJlbmNlQ29udGV4dDE4IGN0eCA9IChJbmZlcmVuY2VDb250ZXh0MTgpdGhpcy5p
bmZlcmVuY2VDb250ZXh0cy5yZW1vdmVLZXkodGhpcy5iaW5kaW5nKTsKKwlpZiAodGhpcy5pbmZl
cmVuY2VDb250ZXh0cyAhPSBudWxsICYmIHRoaXMuYmluZGluZy5vcmlnaW5hbCgpID09IHVwZGF0
ZWRCaW5kaW5nLm9yaWdpbmFsKCkpIHsKKwkJSW5mZXJlbmNlQ29udGV4dDE4IGN0eCA9IChJbmZl
cmVuY2VDb250ZXh0MTgpdGhpcy5pbmZlcmVuY2VDb250ZXh0cy5nZXQodGhpcy5iaW5kaW5nKTsK
IAkJaWYgKGN0eCAhPSBudWxsICYmIHVwZGF0ZWRCaW5kaW5nIGluc3RhbmNlb2YgUGFyYW1ldGVy
aXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7CiAJCQl0aGlzLmluZmVyZW5jZUNvbnRleHRzLnB1
dCh1cGRhdGVkQmluZGluZywgY3R4KTsKIAkJCS8vIHNvbHV0aW9uIG1heSBoYXZlIGNvbWUgZnJv
bSBhbiBvdXRlciBpbmZlcmVuY2UsIG1hcmsgbm93IHRoYXQgdGhpcyAoaW5uZXIpIGlzIGRvbmUg
KGJ1dCBub3QgZGVlcCBpbm5lcnMpOgpAQCAtNzM2LDcgKzczNiw4IEBACiAJTWV0aG9kQmluZGlu
ZyBvcmlnaW5hbCA9IG1ldGhvZC5vcmlnaW5hbCgpOwogCWlmIChvcmlnaW5hbCBpbnN0YW5jZW9m
IFN5bnRoZXRpY0ZhY3RvcnlNZXRob2RCaW5kaW5nKSB7CiAJCVN5bnRoZXRpY0ZhY3RvcnlNZXRo
b2RCaW5kaW5nIHN5bnRoT3JpZ2luYWwgPSAoU3ludGhldGljRmFjdG9yeU1ldGhvZEJpbmRpbmcp
b3JpZ2luYWw7Ci0JCVBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5nIHBhcmFtZXRlcml6ZWRDdG9y
ID0gc3ludGhPcmlnaW5hbC5hcHBseVR5cGVBcmd1bWVudHNPbkNvbnN0cnVjdG9yKG1ldGhvZC50
eXBlQXJndW1lbnRzKTsKKwkJUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcgcGFyYW1ldGVyaXpl
ZEN0b3IgPSBzeW50aE9yaWdpbmFsLmFwcGx5VHlwZUFyZ3VtZW50c09uQ29uc3RydWN0b3IoCisJ
CQkJaW5mQ3R4MTguc2NvcGUsIHRoaXMsIG1ldGhvZC50eXBlQXJndW1lbnRzKTsKIAkJdGhpcy5p
bmZlcmVuY2VDb250ZXh0cy5wdXQocGFyYW1ldGVyaXplZEN0b3IsIGluZkN0eDE4KTsKIAl9CiB9
CkBAIC03NjYsNCArNzY3LDE3IEBACiBwdWJsaWMgSW5mZXJlbmNlQ29udGV4dDE4IGZyZXNoSW5m
ZXJlbmNlQ29udGV4dChTY29wZSBzY29wZSkgewogCXJldHVybiBuZXcgSW5mZXJlbmNlQ29udGV4
dDE4KHNjb3BlLCB0aGlzLmFyZ3VtZW50cywgdGhpcyk7CiB9CisKK3B1YmxpYyBib29sZWFuIGhh
c0VuY2xvc2luZ0luc3RhbmNlSW5TY29wZShTY29wZSBzY29wZSwgUmVmZXJlbmNlQmluZGluZyBl
bmNsb3NpbmcpIHsKKwllbmNsb3NpbmcgPSAoUmVmZXJlbmNlQmluZGluZykgZW5jbG9zaW5nLm9y
aWdpbmFsKCk7CisJUmVmZXJlbmNlQmluZGluZyBjdXJyZW50ID0gc2NvcGUuZW5jbG9zaW5nUmVj
ZWl2ZXJUeXBlKCk7CisJd2hpbGUgKGN1cnJlbnQgIT0gbnVsbCkgeworCQlpZiAoVHlwZUJpbmRp
bmcuZXF1YWxzRXF1YWxzKGN1cnJlbnQub3JpZ2luYWwoKSwgZW5jbG9zaW5nKSkKKwkJCXJldHVy
biB0cnVlOworCQlpZiAoY3VycmVudC5pc1N0YXRpYygpKQorCQkJcmV0dXJuIGZhbHNlOworCQlj
dXJyZW50ID0gY3VycmVudC5lbmNsb3NpbmdUeXBlKCk7CisJfQorCXJldHVybiBmYWxzZTsKK30K
IH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvSW5mZXJlbmNlQ29udGV4dDE4LmphdmEgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvbG9va3VwL0luZmVyZW5jZUNvbnRleHQxOC5qYXZhCmluZGV4IDdhOGE5ODkuLmQ3NWZk
NWYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvSW5mZXJlbmNlQ29udGV4dDE4LmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2xvb2t1cC9JbmZlcmVuY2VDb250ZXh0MTguamF2YQpAQCAtMTk2LDcgKzE5Niw3
IEBACiAJcHVibGljIEluZmVyZW5jZUNvbnRleHQxOCBvdXRlckNvbnRleHQ7CiAJcHJpdmF0ZSBB
cnJheUxpc3Q8TWV0aG9kQmluZGluZz4gcHJvYmxlbU1ldGhvZHM7CiAKLQlTY29wZSBzY29wZTsK
KwlwdWJsaWMgU2NvcGUgc2NvcGU7CiAJTG9va3VwRW52aXJvbm1lbnQgZW52aXJvbm1lbnQ7CiAJ
UmVmZXJlbmNlQmluZGluZyBvYmplY3Q7IC8vIGphdmEubGFuZy5PYmplY3QKIAkKZGlmZiAtLWdp
dCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YQpp
bmRleCA1Mjg5ZTNkLi5hOTdhYTJhIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmph
dmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhCkBAIC00ODQyLDcgKzQ4NDIsNyBAQAog
CSAgIHRoYXQgY291bGQgaW5zdGVhZCBiZSBpbnZva2VkIHdpdGggaWRlbnRpY2FsIHJlc3VsdHMu
IFJldHVybiBudWxsIGlmIG5vIGNvbXBhdGlibGUsIHZpc2libGUsIG1vc3Qgc3BlY2lmaWMgbWV0
aG9kCiAJICAgY291bGQgYmUgZm91bmQuIFRoaXMgbWV0aG9kIGlzIG1vZGVsZWQgYWZ0ZXIgU2Nv
cGUuZ2V0Q29uc3RydWN0b3IgYW5kIFNjb3BlLmdldE1ldGhvZC4KIAkgKi8KLQlwdWJsaWMgTWV0
aG9kQmluZGluZyBnZXRTdGF0aWNGYWN0b3J5IChSZWZlcmVuY2VCaW5kaW5nIGFsbG9jYXRpb25U
eXBlLCBSZWZlcmVuY2VCaW5kaW5nIG9yaWdpbmFsRW5jbG9zaW5nVHlwZSwgVHlwZUJpbmRpbmdb
XSBhcmd1bWVudFR5cGVzLCBmaW5hbCBJbnZvY2F0aW9uIGFsbG9jYXRpb25TaXRlKSB7CisJcHVi
bGljIE1ldGhvZEJpbmRpbmcgZ2V0U3RhdGljRmFjdG9yeSAoUmVmZXJlbmNlQmluZGluZyBhbGxv
Y2F0aW9uVHlwZSwgUmVmZXJlbmNlQmluZGluZyBvcmlnaW5hbEVuY2xvc2luZ1R5cGUsIFR5cGVC
aW5kaW5nW10gYXJndW1lbnRUeXBlcywgZmluYWwgQWxsb2NhdGlvbkV4cHJlc3Npb24gYWxsb2Nh
dGlvblNpdGUpIHsKIAkJVHlwZVZhcmlhYmxlQmluZGluZ1tdIGNsYXNzVHlwZVZhcmlhYmxlcyA9
IGFsbG9jYXRpb25UeXBlLnR5cGVWYXJpYWJsZXMoKTsKIAkJaW50IGNsYXNzVHlwZVZhcmlhYmxl
c0FyaXR5ID0gY2xhc3NUeXBlVmFyaWFibGVzLmxlbmd0aDsKIAkJTWV0aG9kQmluZGluZ1tdIG1l
dGhvZHMgPSBhbGxvY2F0aW9uVHlwZS5nZXRNZXRob2RzKFR5cGVDb25zdGFudHMuSU5JVCwgYXJn
dW1lbnRUeXBlcy5sZW5ndGgpOwpAQCAtNDk0MCw3ICs0OTQwLDEwIEBACiAJCQl9CiAJCQkvLyBt
YWtlIHN1cmUgdG8gdXNlIHRoZSBvcmlnaW5hbCBlbmNsb3NpbmcsIHNvIHdlIGRvbid0IGxvb3Nl
IHRoZSBvdXRlciB0eXBlIGluZm9ybWF0aW9uLCB3aGljaCB3ZSBhbHJlYWR5IGhhdmUKIAkJCS8v
IChJIHNhdyB1bmJvdW5kIHR5cGUgdmFyaWFibGVzIGZyb20gZW5jbG9zaW5nIGVudGVyIHR5cGUg
aW5mZXJlbmNlLCB3aGljaCBjYW5ub3QgaGFuZGxlIHN1Y2ggJ2FsaWVuJyB0eXBlIHZhcmlhYmxl
cykuCi0JCQlzdGF0aWNGYWN0b3J5LnJldHVyblR5cGUgPSBlbnZpcm9ubWVudC5jcmVhdGVQYXJh
bWV0ZXJpemVkVHlwZShhbGxvY2F0aW9uVHlwZSwgcmV0dXJuVHlwZVBhcmFtZXRlcnMsIG9yaWdp
bmFsRW5jbG9zaW5nVHlwZSk7CisJCQllbmNsb3NpbmdUeXBlID0gb3JpZ2luYWxFbmNsb3NpbmdU
eXBlOworCQkJaWYgKGVuY2xvc2luZ1R5cGUgIT0gbnVsbCAmJiAhYWxsb2NhdGlvblNpdGUuaGFz
RW5jbG9zaW5nSW5zdGFuY2VJblNjb3BlKHRoaXMsIGVuY2xvc2luZ1R5cGUpKQorCQkJCWVuY2xv
c2luZ1R5cGUgPSAoUmVmZXJlbmNlQmluZGluZykgZW52aXJvbm1lbnQuY29udmVydFRvUmF3VHlw
ZShlbmNsb3NpbmdUeXBlLCB0cnVlKTsKKwkJCXN0YXRpY0ZhY3RvcnkucmV0dXJuVHlwZSA9IGVu
dmlyb25tZW50LmNyZWF0ZVBhcmFtZXRlcml6ZWRUeXBlKGFsbG9jYXRpb25UeXBlLCByZXR1cm5U
eXBlUGFyYW1ldGVycywgZW5jbG9zaW5nVHlwZSk7CiAJCQlzdGF0aWNGYWN0b3J5LnBhcmFtZXRl
cnMgPSBTY29wZS5zdWJzdGl0dXRlKHN1YnN0aXR1dGlvbiwgbWV0aG9kLnBhcmFtZXRlcnMpOwog
CQkJc3RhdGljRmFjdG9yeS50aHJvd25FeGNlcHRpb25zID0gU2NvcGUuc3Vic3RpdHV0ZShzdWJz
dGl0dXRpb24sIG1ldGhvZC50aHJvd25FeGNlcHRpb25zKTsKIAkJCWlmIChzdGF0aWNGYWN0b3J5
LnRocm93bkV4Y2VwdGlvbnMgPT0gbnVsbCkgeyAKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAv
U3ludGhldGljRmFjdG9yeU1ldGhvZEJpbmRpbmcuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU3ludGhl
dGljRmFjdG9yeU1ldGhvZEJpbmRpbmcuamF2YQppbmRleCA2NzE1NWFmLi42ODBiOGQ2IDEwMDY0
NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvbG9va3VwL1N5bnRoZXRpY0ZhY3RvcnlNZXRob2RCaW5kaW5nLmphdmEK
KysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9TeW50aGV0aWNGYWN0b3J5TWV0aG9kQmluZGluZy5qYXZhCkBA
IC0xNCw2ICsxNCw3IEBACiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KIHBhY2thZ2Ugb3JnLmVj
bGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cDsKIAoraW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuQWxsb2NhdGlvbkV4cHJlc3Npb247CiBpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmNsYXNzZm10LkNsYXNzRmlsZUNvbnN0
YW50czsKIAogLyoqCkBAIC0zMiwxMCArMzMsMTUgQEAKIAl9CiAJCiAJLyoqIEFwcGx5IHRoZSBn
aXZlbiB0eXBlIGFyZ3VtZW50cyBvbiB0aGUgKGRlY2xhcmluZyBjbGFzcyBvZiB0aGUpIGFjdHVh
bCBjb25zdHJ1Y3RvciBiZWluZyByZXByZXNlbnRlZCBieSB0aGlzIGZhY3RvcnkgbWV0aG9kLiAq
LwotCXB1YmxpYyBQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluZyBhcHBseVR5cGVBcmd1bWVudHNP
bkNvbnN0cnVjdG9yKFR5cGVCaW5kaW5nW10gdHlwZUFyZ3VtZW50cykgeworCXB1YmxpYyBQYXJh
bWV0ZXJpemVkTWV0aG9kQmluZGluZyBhcHBseVR5cGVBcmd1bWVudHNPbkNvbnN0cnVjdG9yKAor
CQkJCQkJCQlTY29wZSBzY29wZSwgQWxsb2NhdGlvbkV4cHJlc3Npb24gYWxsb2NhdGlvbiwgVHlw
ZUJpbmRpbmdbXSB0eXBlQXJndW1lbnRzKQorCXsKIAkJUmVmZXJlbmNlQmluZGluZyBvcmlnaW5h
bERlY2xhcmluZ0NsYXNzID0gKFJlZmVyZW5jZUJpbmRpbmcpIHRoaXMuZGVjbGFyaW5nQ2xhc3Mu
b3JpZ2luYWwoKTsKLQkJUmVmZXJlbmNlQmluZGluZyBwYXJhbWV0ZXJpemVkVHlwZSA9IHRoaXMu
ZW52aXJvbm1lbnQuY3JlYXRlUGFyYW1ldGVyaXplZFR5cGUob3JpZ2luYWxEZWNsYXJpbmdDbGFz
cywgdHlwZUFyZ3VtZW50cywKLQkJCQkJCQkJCQkJCQkJCQkJCQkJCQlvcmlnaW5hbERlY2xhcmlu
Z0NsYXNzLmVuY2xvc2luZ1R5cGUoKSk7CisJCVJlZmVyZW5jZUJpbmRpbmcgZW5jbG9zaW5nVHlw
ZSA9IG9yaWdpbmFsRGVjbGFyaW5nQ2xhc3MuZW5jbG9zaW5nVHlwZSgpOworCQlpZiAoZW5jbG9z
aW5nVHlwZSAhPSBudWxsICYmICFhbGxvY2F0aW9uLmhhc0VuY2xvc2luZ0luc3RhbmNlSW5TY29w
ZShzY29wZSwgZW5jbG9zaW5nVHlwZSkpCisJCQllbmNsb3NpbmdUeXBlID0gKFJlZmVyZW5jZUJp
bmRpbmcpIHRoaXMuZW52aXJvbm1lbnQuY29udmVydFRvUmF3VHlwZShlbmNsb3NpbmdUeXBlLCB0
cnVlKTsKKwkJUmVmZXJlbmNlQmluZGluZyBwYXJhbWV0ZXJpemVkVHlwZSA9IHRoaXMuZW52aXJv
bm1lbnQuY3JlYXRlUGFyYW1ldGVyaXplZFR5cGUoCisJCQkJCQkJCQkJCQkJb3JpZ2luYWxEZWNs
YXJpbmdDbGFzcywgdHlwZUFyZ3VtZW50cywgZW5jbG9zaW5nVHlwZSk7CiAJCWZvciAoTWV0aG9k
QmluZGluZyBwYXJhbWV0ZXJpemVkTWV0aG9kIDogcGFyYW1ldGVyaXplZFR5cGUubWV0aG9kcygp
KSB7CiAJCQlpZiAocGFyYW1ldGVyaXplZE1ldGhvZC5vcmlnaW5hbCgpID09IHRoaXMuc3RhdGlj
RmFjdG9yeUZvcikKIAkJCQlyZXR1cm4gKFBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5nKSBwYXJh
bWV0ZXJpemVkTWV0aG9kOw==
</data>

          </attachment>
      

    </bug>

</bugzilla>