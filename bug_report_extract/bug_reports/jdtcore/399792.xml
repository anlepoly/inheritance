<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>399792</bug_id>
          
          <creation_ts>2013-02-02 23:20:00 -0500</creation_ts>
          <short_desc>[1.8][dom ast] AST APIs should support casts with intersection types.</short_desc>
          <delta_ts>2013-04-24 12:25:10 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          <dependson>399773</dependson>
          <blocked>399790</blocked>
    
    <blocked>404995</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>jarthana</cc>
    
    <cc>markus_keller</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="56446"
          type_id="1"
          status="?"
          setter="jarthana"
          requestee="srikanth_sankaran"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2211415</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-02 23:20:22 -0500</bug_when>
    <thetext>BETA_JAVA8:

The following is a legal construct in Java 8:

interface I {
    void doit();
}

class X {
    Object o = (I &amp; Serializable) () -&gt; {};
}

AST/APIs need a new facility to capture the additional bounds.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2227405</commentid>
    <comment_count>1</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-03-07 09:05:17 -0500</bug_when>
    <thetext>See also bug 99931, which is about surfacing intersection types in ITypeBindings.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2227419</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-03-07 09:23:00 -0500</bug_when>
    <thetext>Working on bug 400874 I need to create compiler bindings for intersection
types. I was wondering if IntersectionCastTypeBinding could be the right
internal representation for that, in which case we might want to rename
that class?

More specifically, 18.4. requires to create a type bound from a glb,
where Scope.greaterLowerBound() returns ReferenceBinding[] rather than
a single TypeBinding.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2227788</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-07 18:23:39 -0500</bug_when>
    <thetext>(In reply to comment #2)
&gt; Working on bug 400874 I need to create compiler bindings for intersection
&gt; types. I was wondering if IntersectionCastTypeBinding could be the right
&gt; internal representation for that, in which case we might want to rename
&gt; that class?

I don&apos;t see a problem with that. We need to avoid any potential confusion
with org.eclipse.jdt.internal.compiler.lookup.Binding.INTERSECTION_TYPE.
This existing facility is not suitable for your purposes ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2228517</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-09 15:36:43 -0500</bug_when>
    <thetext>(In reply to comment #2)
&gt; Working on bug 400874 I need to create compiler bindings for intersection
&gt; types. I was wondering if IntersectionCastTypeBinding could be the right
&gt; internal representation for that, in which case we might want to rename
&gt; that class?
&gt; 
&gt; More specifically, 18.4. requires to create a type bound from a glb,
&gt; where Scope.greaterLowerBound() returns ReferenceBinding[] rather than
&gt; a single TypeBinding.

Something I just remembered: IntersectionCastTypeBinding does not today
have the ability to have an array type as one of its constituents. The
effect of this limitation, purely as a cast construct is to disallow 
the perfectly legal, but all too pedantic cast: (javac rejects it too)

 X [] x = (X[] &amp; Serializable &amp; Cloneable) new X[0];

I raised this issue with the spec committee just for completeness sakes
but there has been no clarification so far. See https://bugs.eclipse.org/bugs/show_bug.cgi?id=400882.

Notwithstanding that, I though ECJ should allow that cast - but it caused
a lot of ripples - ArrayBinding is not a ReferenceBinding in our scheme of
things. A lot more ripple than I was willing to settle for.

Not sure if this matters for the inference work&apos;s potential use of this
abstraction.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2234903</commentid>
    <comment_count>5</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-03-21 09:43:47 -0400</bug_when>
    <thetext>*** Bug 404003 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2240314</commentid>
    <comment_count>6</comment_count>
      <attachid>229386</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-04-05 13:54:12 -0400</bug_when>
    <thetext>Created attachment 229386
Proposed fix

Patch with new test. A note on the new ast node, IntersectionCastType -  CastIntersectionType sounds better to, although I have kept it the former to keep it consistent with the names of the compiler ast nodes.

Tests are running.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2240389</commentid>
    <comment_count>7</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-04-05 16:20:50 -0400</bug_when>
    <thetext>In Java 8, the intersection type will only be supported in cast expressions. But this may change in later versions of the language. It would certainly be interesting as type of a variable or as method return type.

The DOM node should just be called IntersectionType.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2240391</commentid>
    <comment_count>8</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-04-05 16:27:36 -0400</bug_when>
    <thetext>(In reply to comment #6)
&gt; Tests are running.

All tests pass.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2244597</commentid>
    <comment_count>9</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-04-17 01:50:56 -0400</bug_when>
    <thetext>(In reply to comment #7)
&gt; The DOM node should just be called IntersectionType.

Do you see any problem with IntersectionCastType, other than it being a tad longer? Everywhere I see intersection cast type being used. I think it won&apos;t do any harm in keeping it consistent, would it?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2244841</commentid>
    <comment_count>10</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-04-17 10:24:59 -0400</bug_when>
    <thetext>See comment 7. Internal type names can be changed at any time, but API names are cast in stone.

Since it&apos;s quite probable that intersection types will show up in more locations in the future, we shouldn&apos;t use a restrictive name like &quot;IntersectionCastType&quot; now. That name would be wrong if we wanted to allow intersection types everywhere.

&quot;IntersectionType&quot; has no such restrictions and is in line with other type names such as UnionType. Consistency in API names is more important than consistency with internal implementation. You could also rename the internal IntersectionCastType if you want to align the names.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2244880</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-04-17 11:13:13 -0400</bug_when>
    <thetext>(In reply to comment #10)

&gt; You could also rename the internal
&gt; IntersectionCastType if you want to align the names.

Let us not do this. We already have INTERSECTION_TYPE with different 
isEquivalentTo and isCompatibleWith semantics. I had to introduce a
new binding king INTERSECTION_CAST_TYPE for the new construct.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2244901</commentid>
    <comment_count>12</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-04-17 11:32:10 -0400</bug_when>
    <thetext>&gt; We already have INTERSECTION_TYPE with different 
&gt; isEquivalentTo and isCompatibleWith semantics. I had to introduce a
&gt; new binding king INTERSECTION_CAST_TYPE for the new construct.

Interesting. Is that an implementation detail, or is it a sign that there are actually two different kinds of intersection types that would also have to be kept separate in the ITypeBinding API for bug 99931?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2245512</commentid>
    <comment_count>13</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-04-18 11:57:10 -0400</bug_when>
    <thetext>Released in BETA_JAVA8 with name change suggested by Markus:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=a2a0577109951f3af96b6ee7e6f23d457b52d52d

Srikanth, the bug&apos;s still marked for review. Please review when you have time.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2245997</commentid>
    <comment_count>14</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-04-19 07:19:24 -0400</bug_when>
    <thetext>The previous commit was missing changes in ASTNode#nodeClassForType and DefaultASTVisitor(). DefaultASTVisitor was also missing LambdaExpression and these have been fixed via commit:

1987bebfc0499fe07d643a641d2e74ff184f5cc7</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2248005</commentid>
    <comment_count>15</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-04-24 12:25:10 -0400</bug_when>
    <thetext>I&apos;ve also updated the ASTRewriteAnalyzer: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=e7e2695fe5657cf6f05f673f7f1f6646805752fe</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>229386</attachid>
            <date>2013-04-05 13:54:00 -0400</date>
            <delta_ts>2013-04-05 13:54:12 -0400</delta_ts>
            <desc>Proposed fix</desc>
            <filename>Fix-for-bug-399792.patch</filename>
            <type>text/plain</type>
            <size>18150</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9kb20vQVNUQ29udmVydGVyMThUZXN0LmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
ZG9tL0FTVENvbnZlcnRlcjE4VGVzdC5qYXZhCmluZGV4IDE0MGI1NmIuLjQ3M2E0NjAgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9kb20vQVNUQ29udmVydGVyMThUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Rv
bS9BU1RDb252ZXJ0ZXIxOFRlc3QuamF2YQpAQCAtMTkzNiwzICsxOTM2LDcxIEBACiAJCWFzc2Vy
dEVxdWFscygiTWV0aG9kIHNob3VsZCBiZSBtYWxmb3JtZWQiLCBBU1ROb2RlLk1BTEZPUk1FRCwg
KG1ldGhvZC5nZXRGbGFncygpICYgQVNUTm9kZS5NQUxGT1JNRUQpKTsKIAl9CisJLy8gaHR0cHM6
Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM5OTc5MgorCXB1YmxpYyB2
b2lkIHRlc3RCdWczOTk3OTIoKSB0aHJvd3MgSmF2YU1vZGVsRXhjZXB0aW9uIHsKKwkJU3RyaW5n
IGNvbnRlbnQgPQorCQkJCSJpbXBvcnQgamF2YS5sYW5nLmFubm90YXRpb24uRWxlbWVudFR5cGU7
XG4iICsKKwkJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkJIiAgICAgIE9iamVjdCBvID0g
KEBNYXJrZXIxIEBNYXJrZXIyIFNlcmlhbGl6YWJsZSAmIEBNYXJrZXIyIEBNYXJrZXIzIEkgJiBA
TWFya2VyMyBATWFya2VyMSBKKSAoKSAtPiB7fTsiICsKKwkJCQkifVxuIiArCisJCQkJImludGVy
ZmFjZSBJIHtcbiIgKworCQkJCSIgIHB1YmxpYyB2b2lkIGZvbygpO1xuIiArCisJCQkJIn1cbiIg
KworCQkJCSJpbnRlcmZhY2UgSiB7XG4iICsKKwkJCQkiICBwdWJsaWMgdm9pZCBmb28oKTtcbiIg
KworCQkJCSIgIHB1YmxpYyB2b2lkIGJhcigpO1xuIiArCisJCQkJIn1cbiIgKworCQkJCSJAamF2
YS5sYW5nLmFubm90YXRpb24uVGFyZ2V0IChFbGVtZW50VHlwZS5UWVBFX1VTRSlcbiIgKworCQkJ
CSJAaW50ZXJmYWNlIE1hcmtlciB7fVxuIiArCisJCQkJIkBqYXZhLmxhbmcuYW5ub3RhdGlvbi5U
YXJnZXQgKEVsZW1lbnRUeXBlLlRZUEVfVVNFKVxuIiArCisJCQkJIkBpbnRlcmZhY2UgTWFya2Vy
MiB7fVxuIiArCisJCQkJIkBqYXZhLmxhbmcuYW5ub3RhdGlvbi5UYXJnZXQgKEVsZW1lbnRUeXBl
LlRZUEVfVVNFKVxuIiArCisJCQkJIkBpbnRlcmZhY2UgTWFya2VyMyB7fSI7CisKKwkJdGhpcy53
b3JraW5nQ29weSA9IGdldFdvcmtpbmdDb3B5KCIvQ29udmVydGVyMTgvc3JjL1guamF2YSIsIGZh
bHNlKTsKKwkJQVNUTm9kZSBub2RlID0gYnVpbGRBU1QoY29udGVudCwgdGhpcy53b3JraW5nQ29w
eSwgZmFsc2UpOworCQlhc3NlcnRFcXVhbHMoIk5vdCBhIGNvbXBpbGF0aW9uIHVuaXQiLCBBU1RO
b2RlLkNPTVBJTEFUSU9OX1VOSVQsIG5vZGUuZ2V0Tm9kZVR5cGUoKSk7CisJCUNvbXBpbGF0aW9u
VW5pdCB1bml0ID0gKENvbXBpbGF0aW9uVW5pdCkgbm9kZTsKKwkJVHlwZURlY2xhcmF0aW9uIHR5
cGUgPSAgKFR5cGVEZWNsYXJhdGlvbikgdW5pdC50eXBlcygpLmdldCgwKTsKKwkJbm9kZSA9IChB
U1ROb2RlKSB0eXBlLmJvZHlEZWNsYXJhdGlvbnMoKS5nZXQoMCk7CisJCWFzc2VydEVxdWFscygi
Tm90IGEgZmllbGQgRGVjbGFyYXRpb24iLCBBU1ROb2RlLkZJRUxEX0RFQ0xBUkFUSU9OLCBub2Rl
LmdldE5vZGVUeXBlKCkpOworCQlGaWVsZERlY2xhcmF0aW9uIGZpZWxkID0gKEZpZWxkRGVjbGFy
YXRpb24pIG5vZGU7CisJCWFzc2VydEVxdWFscygiRmllbGQgc2hvdWxkIG5vdCBiZSBtYWxmb3Jt
ZWQiLCAwLCAoZmllbGQuZ2V0RmxhZ3MoKSAmIEFTVE5vZGUuTUFMRk9STUVEKSk7CisKKwkJTGlz
dCBmcmFnbWVudHMgPSBmaWVsZC5mcmFnbWVudHMoKTsKKwkJYXNzZXJ0RXF1YWxzKCJJbmNvcnJl
Y3Qgbm8gb2YgZnJhZ21lbnRzIiwgMSwgZnJhZ21lbnRzLnNpemUoKSk7CisJCVZhcmlhYmxlRGVj
bGFyYXRpb25GcmFnbWVudCBmcmFnbWVudCA9IChWYXJpYWJsZURlY2xhcmF0aW9uRnJhZ21lbnQp
IGZyYWdtZW50cy5nZXQoMCk7CisJCUNhc3RFeHByZXNzaW9uIGNhc3QgPSAoQ2FzdEV4cHJlc3Np
b24pIGZyYWdtZW50LmdldEluaXRpYWxpemVyKCk7CisJCVR5cGUgY2FzdFR5cGUgPSBjYXN0Lmdl
dFR5cGUoKTsKKwkJYXNzZXJ0RXF1YWxzKCJOb3QgYW4gaW50ZXJzZWN0aW9uIGNhc3QgdHlwZSIs
IEFTVE5vZGUuSU5URVJTRUNUSU9OX0NBU1RfVFlQRSwgY2FzdFR5cGUuZ2V0Tm9kZVR5cGUoKSk7
CisJCWFzc2VydEVxdWFscygiVHlwZSBzaG91bGQgbm90IGJlIG1hbGZvcm1lZCIsIDAsIChjYXN0
VHlwZS5nZXRGbGFncygpICYgQVNUTm9kZS5NQUxGT1JNRUQpKTsKKworCQlMaXN0IGludGVyc2Vj
dGlvblR5cGVzID0gKChJbnRlcnNlY3Rpb25DYXN0VHlwZSkgY2FzdFR5cGUpLnR5cGVzKCk7CisJ
CWFzc2VydEVxdWFscygiSW5jb3JyZWN0IG5vIG9mIHR5cGVzIiwgMywgaW50ZXJzZWN0aW9uVHlw
ZXMuc2l6ZSgpKTsKKwkJY2FzdFR5cGUgPSAoVHlwZSkgaW50ZXJzZWN0aW9uVHlwZXMuZ2V0KDAp
OworCQlhc3NlcnRFcXVhbHMoIkluY29ycmVjdCB0eXBlIiwgQVNUTm9kZS5TSU1QTEVfVFlQRSwg
Y2FzdFR5cGUuZ2V0Tm9kZVR5cGUoKSk7CisJCVNpbXBsZU5hbWUgbmFtZSA9IChTaW1wbGVOYW1l
KSAoKFNpbXBsZVR5cGUpIGNhc3RUeXBlKS5nZXROYW1lKCk7CisJCWFzc2VydEVxdWFscygiSW5j
b3JyZWN0IG5hbWUiLCAiU2VyaWFsaXphYmxlIiwgbmFtZS5nZXRJZGVudGlmaWVyKCkpOworCisJ
CUxpc3QgYW5ub3RhdGlvbnMgPSAoKFNpbXBsZVR5cGUpIGNhc3RUeXBlKS5hbm5vdGF0aW9ucygp
OworCQlhc3NlcnRFcXVhbHMoIkluY29ycmVjdCBubyBvZiBhbm5vdGF0aW9ucyIsIDIsIGFubm90
YXRpb25zLnNpemUoKSk7CisJCWFzc2VydEVxdWFscygiSW5jb3JyZWN0IHJlY2VpdmVyIiwgIkBN
YXJrZXIxIEBNYXJrZXIyIFNlcmlhbGl6YWJsZSIsIGNhc3RUeXBlLnRvU3RyaW5nKCkpOworCisJ
CWNhc3RUeXBlID0gKFR5cGUpIGludGVyc2VjdGlvblR5cGVzLmdldCgxKTsKKwkJYXNzZXJ0RXF1
YWxzKCJJbmNvcnJlY3QgdHlwZSIsIEFTVE5vZGUuU0lNUExFX1RZUEUsIGNhc3RUeXBlLmdldE5v
ZGVUeXBlKCkpOworCQluYW1lID0gKFNpbXBsZU5hbWUpICgoU2ltcGxlVHlwZSkgY2FzdFR5cGUp
LmdldE5hbWUoKTsKKwkJYXNzZXJ0RXF1YWxzKCJJbmNvcnJlY3QgbmFtZSIsICJJIiwgbmFtZS5n
ZXRJZGVudGlmaWVyKCkpOworCisJCWFubm90YXRpb25zID0gKChTaW1wbGVUeXBlKSBjYXN0VHlw
ZSkuYW5ub3RhdGlvbnMoKTsKKwkJYXNzZXJ0RXF1YWxzKCJJbmNvcnJlY3Qgbm8gb2YgYW5ub3Rh
dGlvbnMiLCAyLCBhbm5vdGF0aW9ucy5zaXplKCkpOworCQlhc3NlcnRFcXVhbHMoIkluY29ycmVj
dCByZWNlaXZlciIsICJATWFya2VyMiBATWFya2VyMyBJIiwgY2FzdFR5cGUudG9TdHJpbmcoKSk7
CisKKwkJY2FzdFR5cGUgPSAoVHlwZSkgaW50ZXJzZWN0aW9uVHlwZXMuZ2V0KDIpOworCQlhc3Nl
cnRFcXVhbHMoIkluY29ycmVjdCB0eXBlIiwgQVNUTm9kZS5TSU1QTEVfVFlQRSwgY2FzdFR5cGUu
Z2V0Tm9kZVR5cGUoKSk7CisJCW5hbWUgPSAoU2ltcGxlTmFtZSkgKChTaW1wbGVUeXBlKSBjYXN0
VHlwZSkuZ2V0TmFtZSgpOworCQlhc3NlcnRFcXVhbHMoIkluY29ycmVjdCBuYW1lIiwgIkoiLCBu
YW1lLmdldElkZW50aWZpZXIoKSk7CisKKwkJYW5ub3RhdGlvbnMgPSAoKFNpbXBsZVR5cGUpIGNh
c3RUeXBlKS5hbm5vdGF0aW9ucygpOworCQlhc3NlcnRFcXVhbHMoIkluY29ycmVjdCBubyBvZiBh
bm5vdGF0aW9ucyIsIDIsIGFubm90YXRpb25zLnNpemUoKSk7CisJCWFzc2VydEVxdWFscygiSW5j
b3JyZWN0IHJlY2VpdmVyIiwgIkBNYXJrZXIzIEBNYXJrZXIxIEoiLCBjYXN0VHlwZS50b1N0cmlu
ZygpKTsKKwl9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2Vj
bGlwc2UvamR0L2NvcmUvZG9tL0FTVENvbnZlcnRlci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1RDb252ZXJ0ZXIuamF2YQppbmRleCBk
ZjQzOTg3Li5lZGJmYzAwIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3Jn
L2VjbGlwc2UvamR0L2NvcmUvZG9tL0FTVENvbnZlcnRlci5qYXZhCisrKyBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vQVNUQ29udmVydGVyLmphdmEK
QEAgLTM2LDQgKzM2LDUgQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIuYXN0LkFyZ3VtZW50OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxl
ci5hc3QuRm9yZWFjaFN0YXRlbWVudDsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwu
Y29tcGlsZXIuYXN0LkludGVyc2VjdGlvbkNhc3RUeXBlUmVmZXJlbmNlOwogaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuSmF2YWRvY0FyZ3VtZW50RXhwcmVzc2lv
bjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkphdmFkb2NG
aWVsZFJlZmVyZW5jZTsKQEAgLTUxLDQgKzUyLDUgQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIuYXN0LlN0cmluZ0xpdGVyYWxDb25jYXRlbmF0aW9uOwogaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuVHlwZVJlZmVyZW5jZTsKK2lt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LlVuaW9uVHlwZVJlZmVy
ZW5jZTsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LldpbGRj
YXJkOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5jbGFzc2ZtdC5D
bGFzc0ZpbGVDb25zdGFudHM7CkBAIC0zNjcxLDUgKzM2NzMsNSBAQAogCQkJCX0KIAkJCQl0eXBl
ID0gY3VycmVudFR5cGU7Ci0JCQl9IGVsc2UgeworCQkJfSBlbHNlIGlmICh0eXBlUmVmZXJlbmNl
IGluc3RhbmNlb2YgVW5pb25UeXBlUmVmZXJlbmNlKXsKIAkJCQlUeXBlUmVmZXJlbmNlW10gdHlw
ZVJlZmVyZW5jZXMgPSAoKG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuVW5p
b25UeXBlUmVmZXJlbmNlKSB0eXBlUmVmZXJlbmNlKS50eXBlUmVmZXJlbmNlczsKIAkJCQlzd2l0
Y2godGhpcy5hc3QuYXBpTGV2ZWwpIHsKQEAgLTM2OTksNCArMzcwMSwzMiBAQAogCQkJCQkJdHlw
ZS5zZXRTb3VyY2VSYW5nZShzdGFydCwgbGVuZ3RoKTsKIAkJCQl9CisJCQl9IGVsc2UgaWYgKHR5
cGVSZWZlcmVuY2UgaW5zdGFuY2VvZiBJbnRlcnNlY3Rpb25DYXN0VHlwZVJlZmVyZW5jZSkgewor
CQkJCVR5cGVSZWZlcmVuY2VbXSB0eXBlUmVmZXJlbmNlcyA9ICgoSW50ZXJzZWN0aW9uQ2FzdFR5
cGVSZWZlcmVuY2UpIHR5cGVSZWZlcmVuY2UpLnR5cGVSZWZlcmVuY2VzOworCQkJCXN3aXRjaCh0
aGlzLmFzdC5hcGlMZXZlbCkgeworCQkJCQljYXNlIEFTVC5KTFMyX0lOVEVSTkFMIDoKKwkJCQkJ
Y2FzZSBBU1QuSkxTM19JTlRFUk5BTCA6CisJCQkJCWNhc2UgQVNULkpMUzRfSU5URVJOQUwgOgor
CQkJCQkJdHlwZSA9IHRoaXMuY29udmVydFR5cGUodHlwZVJlZmVyZW5jZXNbMF0pOworCQkJCQkJ
aW50IHN0YXJ0ID0gdHlwZVJlZmVyZW5jZS5zb3VyY2VTdGFydDsKKwkJCQkJCWludCBlbmRQb3Np
dGlvbiA9IHR5cGVSZWZlcmVuY2Uuc291cmNlRW5kOworCQkJCQkJbGVuZ3RoID0gZW5kUG9zaXRp
b24gLSBzdGFydCArIDE7CisJCQkJCQl0eXBlLnNldFNvdXJjZVJhbmdlKHN0YXJ0LCBsZW5ndGgp
OworCQkJCQkJdHlwZS5zZXRGbGFncyh0eXBlLmdldEZsYWdzKCkgfCBBU1ROb2RlLk1BTEZPUk1F
RCk7CisJCQkJCQlicmVhazsKKwkJCQkJZGVmYXVsdDoKKwkJCQkJCS8vIGludGVyc2VjdGlvbiB0
eXBlIHJlZmVyZW5jZQorCQkJCQkJZmluYWwgSW50ZXJzZWN0aW9uQ2FzdFR5cGUgY2FzdFR5cGUg
PSBuZXcgSW50ZXJzZWN0aW9uQ2FzdFR5cGUodGhpcy5hc3QpOworCQkJCQkJZm9yIChpbnQgaSA9
IDAsIG1heCA9IHR5cGVSZWZlcmVuY2VzLmxlbmd0aDsgaSA8IG1heDsgaSsrKSB7CisJCQkJCQkJ
Y2FzdFR5cGUudHlwZXMoKS5hZGQodGhpcy5jb252ZXJ0VHlwZSh0eXBlUmVmZXJlbmNlc1tpXSkp
OworCQkJCQkJfQorCQkJCQkJdHlwZSA9IGNhc3RUeXBlOworCQkJCQkJTGlzdCB0eXBlcyA9IGNh
c3RUeXBlLnR5cGVzKCk7CisJCQkJCQlpbnQgc2l6ZSA9IHR5cGVzLnNpemUoKTsKKwkJCQkJCXN0
YXJ0ID0gKChUeXBlKSB0eXBlcy5nZXQoMCkpLmdldFN0YXJ0UG9zaXRpb24oKTsKKwkJCQkJCVR5
cGUgbGFzdFR5cGUgPSAoVHlwZSkgdHlwZXMuZ2V0KHNpemUgLSAxKTsKKwkJCQkJCWVuZFBvc2l0
aW9uID0gbGFzdFR5cGUuZ2V0U3RhcnRQb3NpdGlvbigpICsgbGFzdFR5cGUuZ2V0TGVuZ3RoKCk7
CisJCQkJCQlsZW5ndGggPSBlbmRQb3NpdGlvbiAtIHN0YXJ0OworCQkJCQkJdHlwZS5zZXRTb3Vy
Y2VSYW5nZShzdGFydCwgbGVuZ3RoKTsKKwkJCQl9CiAJCQl9CiAKZGlmZiAtLWdpdCBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vQVNUTWF0Y2hlci5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9B
U1RNYXRjaGVyLmphdmEKaW5kZXggZWIxM2VjNi4uZDE2MGZhZiAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1RNYXRjaGVyLmph
dmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2Rv
bS9BU1RNYXRjaGVyLmphdmEKQEAgLTIzMDgsNCArMjMwOCwyNyBAQAogCSAqICAgPGNvZGU+ZmFs
c2U8L2NvZGU+IGlmIHRoZXkgZG8gbm90IG1hdGNoIG9yIHRoZSBvdGhlciBvYmplY3QgaGFzIGEK
IAkgKiAgIGRpZmZlcmVudCBub2RlIHR5cGUgb3IgaXMgPGNvZGU+bnVsbDwvY29kZT4KKwkgKiBA
c2luY2UgMy45CisJICovCisJcHVibGljIGJvb2xlYW4gbWF0Y2goSW50ZXJzZWN0aW9uQ2FzdFR5
cGUgbm9kZSwgT2JqZWN0IG90aGVyKSB7CisJCWlmICghKG90aGVyIGluc3RhbmNlb2YgSW50ZXJz
ZWN0aW9uQ2FzdFR5cGUpKSB7CisJCQlyZXR1cm4gZmFsc2U7CisJCX0KKwkJSW50ZXJzZWN0aW9u
Q2FzdFR5cGUgbyA9IChJbnRlcnNlY3Rpb25DYXN0VHlwZSkgb3RoZXI7CisJCXJldHVybiBzYWZl
U3VidHJlZUxpc3RNYXRjaChub2RlLnR5cGVzKCksIG8udHlwZXMoKSk7CisJfQorCisJLyoqCisJ
ICogUmV0dXJucyB3aGV0aGVyIHRoZSBnaXZlbiBub2RlIGFuZCB0aGUgb3RoZXIgb2JqZWN0IG1h
dGNoLgorCSAqIDxwPgorCSAqIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIHByb3ZpZGVkIGJ5
IHRoaXMgY2xhc3MgdGVzdHMgd2hldGhlciB0aGUKKwkgKiBvdGhlciBvYmplY3QgaXMgYSBub2Rl
IG9mIHRoZSBzYW1lIHR5cGUgd2l0aCBzdHJ1Y3R1cmFsbHkgaXNvbW9ycGhpYworCSAqIGNoaWxk
IHN1YnRyZWVzLiBTdWJjbGFzc2VzIG1heSBvdmVycmlkZSB0aGlzIG1ldGhvZCBhcyBuZWVkZWQu
CisJICogPC9wPgorCSAqCisJICogQHBhcmFtIG5vZGUgdGhlIG5vZGUKKwkgKiBAcGFyYW0gb3Ro
ZXIgdGhlIG90aGVyIG9iamVjdCwgb3IgPGNvZGU+bnVsbDwvY29kZT4KKwkgKiBAcmV0dXJuIDxj
b2RlPnRydWU8L2NvZGU+IGlmIHRoZSBzdWJ0cmVlIG1hdGNoZXMsIG9yCisJICogICA8Y29kZT5m
YWxzZTwvY29kZT4gaWYgdGhleSBkbyBub3QgbWF0Y2ggb3IgdGhlIG90aGVyIG9iamVjdCBoYXMg
YQorCSAqICAgZGlmZmVyZW50IG5vZGUgdHlwZSBvciBpcyA8Y29kZT5udWxsPC9jb2RlPgogCSAq
LwogCXB1YmxpYyBib29sZWFuIG1hdGNoKFZhcmlhYmxlRGVjbGFyYXRpb25FeHByZXNzaW9uIG5v
ZGUsIE9iamVjdCBvdGhlcikgewpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9t
L29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9BU1ROb2RlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FTVE5vZGUuamF2YQppbmRleCBmN2Rj
OTBjLi41NWM3NDFhIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2Vj
bGlwc2UvamR0L2NvcmUvZG9tL0FTVE5vZGUuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FTVE5vZGUuamF2YQpAQCAtODUyLDQgKzg1
MiwxMyBAQAogCiAJLyoqCisJICogTm9kZSB0eXBlIGNvbnN0YW50IGluZGljYXRpbmcgYSBub2Rl
IG9mIHR5cGUKKwkgKiA8Y29kZT5JbnRlcnNlY3Rpb25DYXN0VHlwZTwvY29kZT4uCisJICoKKwkg
KiBAc2VlIEludGVyc2VjdGlvbkNhc3RUeXBlCisJICogQHNpbmNlIDMuOQorCSAqLworCXB1Ymxp
YyBzdGF0aWMgZmluYWwgaW50IElOVEVSU0VDVElPTl9DQVNUX1RZUEUgPSA4NzsKKworCS8qKgog
CSAqIFJldHVybnMgdGhlIG5vZGUgY2xhc3MgZm9yIHRoZSBjb3JyZXNwb25kaW5nIG5vZGUgdHlw
ZS4KIAkgKgpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNl
L2pkdC9jb3JlL2RvbS9BU1RWaXNpdG9yLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20v
b3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FTVFZpc2l0b3IuamF2YQppbmRleCA0NDJjMmQyLi4x
OGY2YzJhIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2Uv
amR0L2NvcmUvZG9tL0FTVFZpc2l0b3IuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9k
b20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0FTVFZpc2l0b3IuamF2YQpAQCAtMTU0OCw0ICsx
NTQ4LDIxIEBACiAJICogdmlzaXRlZCwgYW5kIDxjb2RlPmZhbHNlPC9jb2RlPiBpZiB0aGUgY2hp
bGRyZW4gb2YgdGhpcyBub2RlIHNob3VsZAogCSAqIGJlIHNraXBwZWQKKwkgKiBAc2luY2UgMy45
CisJICovCisJcHVibGljIGJvb2xlYW4gdmlzaXQoSW50ZXJzZWN0aW9uQ2FzdFR5cGUgbm9kZSkg
eworCQlyZXR1cm4gdHJ1ZTsKKwl9CisKKwkvKioKKwkgKiBWaXNpdHMgdGhlIGdpdmVuIHR5cGUt
c3BlY2lmaWMgQVNUIG5vZGUuCisJICogPHA+CisJICogVGhlIGRlZmF1bHQgaW1wbGVtZW50YXRp
b24gZG9lcyBub3RoaW5nIGFuZCByZXR1cm4gdHJ1ZS4KKwkgKiBTdWJjbGFzc2VzIG1heSByZWlt
cGxlbWVudC4KKwkgKiA8L3A+CisJICoKKwkgKiBAcGFyYW0gbm9kZSB0aGUgbm9kZSB0byB2aXNp
dAorCSAqIEByZXR1cm4gPGNvZGU+dHJ1ZTwvY29kZT4gaWYgdGhlIGNoaWxkcmVuIG9mIHRoaXMg
bm9kZSBzaG91bGQgYmUKKwkgKiB2aXNpdGVkLCBhbmQgPGNvZGU+ZmFsc2U8L2NvZGU+IGlmIHRo
ZSBjaGlsZHJlbiBvZiB0aGlzIG5vZGUgc2hvdWxkCisJICogYmUgc2tpcHBlZAogCSAqLwogCXB1
YmxpYyBib29sZWFuIHZpc2l0KFZhcmlhYmxlRGVjbGFyYXRpb25FeHByZXNzaW9uIG5vZGUpIHsK
QEAgLTI2MjksNCArMjY0NiwxNyBAQAogCSAqCiAJICogQHBhcmFtIG5vZGUgdGhlIG5vZGUgdG8g
dmlzaXQKKwkgKiBAc2luY2UgMy45CisJICovCisJcHVibGljIHZvaWQgZW5kVmlzaXQoSW50ZXJz
ZWN0aW9uQ2FzdFR5cGUgbm9kZSkgeworCQkvLyBkZWZhdWx0IGltcGxlbWVudGF0aW9uOiBkbyBu
b3RoaW5nCisJfQorCisJLyoqCisJICogRW5kIG9mIHZpc2l0IHRoZSBnaXZlbiB0eXBlLXNwZWNp
ZmljIEFTVCBub2RlLgorCSAqIDxwPgorCSAqIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIGRv
ZXMgbm90aGluZy4gU3ViY2xhc3NlcyBtYXkgcmVpbXBsZW1lbnQuCisJICogPC9wPgorCSAqCisJ
ICogQHBhcmFtIG5vZGUgdGhlIG5vZGUgdG8gdmlzaXQKIAkgKi8KIAlwdWJsaWMgdm9pZCBlbmRW
aXNpdChWYXJpYWJsZURlY2xhcmF0aW9uRXhwcmVzc2lvbiBub2RlKSB7CmRpZmYgLS1naXQgYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL0ludGVyc2Vj
dGlvbkNhc3RUeXBlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2Uv
amR0L2NvcmUvZG9tL0ludGVyc2VjdGlvbkNhc3RUeXBlLmphdmEKbmV3IGZpbGUgbW9kZSAxMDA2
NDQKaW5kZXggMDAwMDAwMC4uNjJmNzFhMAotLS0gL2Rldi9udWxsCisrKyBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vSW50ZXJzZWN0aW9uQ2FzdFR5
cGUuamF2YQpAQCAtMCwwICsxLDE3MyBAQAorLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCisgKiBD
b3B5cmlnaHQgKGMpIDIwMTMgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuDQorICogQWxsIHJp
Z2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFs
cw0KKyAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2Ug
UHVibGljIExpY2Vuc2UgdjEuMA0KKyAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0
aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0DQorICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdh
bC9lcGwtdjEwLmh0bWwNCisgKg0KKyAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4g
ZWFybHktZHJhZnQgc3BlY2lmaWNhdGlvbiBkZXZlbG9wZWQgdW5kZXIgdGhlIEphdmENCisgKiBD
b21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFibGUgZm9yIHRlc3Rpbmcg
YW5kIGV2YWx1YXRpb24gcHVycG9zZXMNCisgKiBvbmx5LiBUaGUgY29kZSBpcyBub3QgY29tcGF0
aWJsZSB3aXRoIGFueSBzcGVjaWZpY2F0aW9uIG9mIHRoZSBKQ1AuDQorICoNCisgKiBDb250cmli
dXRvcnM6DQorICogICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1l
bnRhdGlvbg0KKyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLw0KKw0KK3BhY2thZ2Ugb3JnLmVjbGlw
c2UuamR0LmNvcmUuZG9tOw0KKw0KK2ltcG9ydCBqYXZhLnV0aWwuQXJyYXlMaXN0Ow0KK2ltcG9y
dCBqYXZhLnV0aWwuTGlzdDsNCisNCisvKioNCisgKiBUeXBlIG5vZGUgZm9yIGFuIGludGVyc2Vj
dGlvbiB0eXBlIGluIGEgY2FzdCBleHByZXNzaW9uIChhZGRlZCBpbiBKTFM4IEFQSSkuDQorICog
PHByZT4NCisgKiBJbnRlcnNlY3Rpb25DYXN0VHlwZToNCisgKiAgICBUeXBlIDxiPiY8L2I+IFR5
cGUgeyA8Yj4mPC9iPiBUeXBlIH0NCisgKiA8L3ByZT4NCisgKiA8cD4NCisgKiBUaGlzIGtpbmQg
b2Ygbm9kZSBpcyB1c2VkIG9ubHkgaW5zaWRlIGEgY2FzdCBleHByZXNzaW9uLg0KKyAqIDwvcD4N
CisgKg0KKyAqIEBzaW5jZSAzLjkNCisgKiBAbm9pbnN0YW50aWF0ZSBUaGlzIGNsYXNzIGlzIG5v
dCBpbnRlbmRlZCB0byBiZSBpbnN0YW50aWF0ZWQgYnkgY2xpZW50cy4NCisgKi8NCitwdWJsaWMg
Y2xhc3MgSW50ZXJzZWN0aW9uQ2FzdFR5cGUgZXh0ZW5kcyBUeXBlIHsNCisNCisJLyoqDQorCSAq
IFRoZSAidHlwZXMiIHN0cnVjdHVyYWwgcHJvcGVydHkgb2YgdGhpcyBub2RlIHR5cGUgKGVsZW1l
bnQgdHlwZToge0BsaW5rIFR5cGV9KS4NCisJICovDQorCXB1YmxpYyBzdGF0aWMgZmluYWwgQ2hp
bGRMaXN0UHJvcGVydHlEZXNjcmlwdG9yIFRZUEVTX1BST1BFUlRZID0NCisJCW5ldyBDaGlsZExp
c3RQcm9wZXJ0eURlc2NyaXB0b3IoSW50ZXJzZWN0aW9uQ2FzdFR5cGUuY2xhc3MsICJ0eXBlcyIs
IFR5cGUuY2xhc3MsIENZQ0xFX1JJU0spOyAvLyROT04tTkxTLTEkDQorDQorCS8qKg0KKwkgKiBB
IGxpc3Qgb2YgcHJvcGVydHkgZGVzY3JpcHRvcnMgKGVsZW1lbnQgdHlwZToNCisJICoge0BsaW5r
IFN0cnVjdHVyYWxQcm9wZXJ0eURlc2NyaXB0b3J9KSwNCisJICogb3IgbnVsbCBpZiB1bmluaXRp
YWxpemVkLg0KKwkgKi8NCisJcHJpdmF0ZSBzdGF0aWMgZmluYWwgTGlzdCBQUk9QRVJUWV9ERVND
UklQVE9SU184XzA7DQorDQorCXN0YXRpYyB7DQorCQlMaXN0IHByb3BlcnR5TGlzdCA9IG5ldyBB
cnJheUxpc3QoMik7DQorCQljcmVhdGVQcm9wZXJ0eUxpc3QoSW50ZXJzZWN0aW9uQ2FzdFR5cGUu
Y2xhc3MsIHByb3BlcnR5TGlzdCk7DQorCQlhZGRQcm9wZXJ0eShUWVBFU19QUk9QRVJUWSwgcHJv
cGVydHlMaXN0KTsNCisJCVBST1BFUlRZX0RFU0NSSVBUT1JTXzhfMCA9IHJlYXBQcm9wZXJ0eUxp
c3QocHJvcGVydHlMaXN0KTsNCisJfQ0KKw0KKwkvKioNCisJICogUmV0dXJucyBhIGxpc3Qgb2Yg
c3RydWN0dXJhbCBwcm9wZXJ0eSBkZXNjcmlwdG9ycyBmb3IgdGhpcyBub2RlIHR5cGUuDQorCSAq
IENsaWVudHMgbXVzdCBub3QgbW9kaWZ5IHRoZSByZXN1bHQuDQorCSAqDQorCSAqIEBwYXJhbSBh
cGlMZXZlbCB0aGUgQVBJIGxldmVsOyBvbmUgb2YgdGhlDQorCSAqIDxjb2RlPkFTVC5KTFMqPC9j
b2RlPiBjb25zdGFudHMNCisJICogQHJldHVybiBhIGxpc3Qgb2YgcHJvcGVydHkgZGVzY3JpcHRv
cnMgKGVsZW1lbnQgdHlwZToNCisJICoge0BsaW5rIFN0cnVjdHVyYWxQcm9wZXJ0eURlc2NyaXB0
b3J9KQ0KKwkgKi8NCisJcHVibGljIHN0YXRpYyBMaXN0IHByb3BlcnR5RGVzY3JpcHRvcnMoaW50
IGFwaUxldmVsKSB7DQorCQlyZXR1cm4gUFJPUEVSVFlfREVTQ1JJUFRPUlNfOF8wOw0KKwl9DQor
DQorCS8qKg0KKwkgKiBUaGUgbGlzdCBvZiB0eXBlcyAoZWxlbWVudCB0eXBlOiB7QGxpbmsgVHlw
ZX0pLiAgRGVmYXVsdHMgdG8gYW4gZW1wdHkgbGlzdC4NCisJICovDQorCXByaXZhdGUgQVNUTm9k
ZS5Ob2RlTGlzdCB0eXBlcyA9IG5ldyBBU1ROb2RlLk5vZGVMaXN0KFRZUEVTX1BST1BFUlRZKTsN
CisNCisJLyoqDQorCSAqIENyZWF0ZXMgYSBuZXcgdW5wYXJlbnRlZCBub2RlIGZvciBhbiBpbnRl
cnNlY3Rpb24gdHlwZSBvd25lZCBieSB0aGUgZ2l2ZW4gQVNULg0KKwkgKiBCeSBkZWZhdWx0LCBp
dCBoYXMgbm8gdHlwZXMuPHA+DQorCSAqIA0KKwkgKiBOLkIuIFRoaXMgY29uc3RydWN0b3IgaXMg
cGFja2FnZS1wcml2YXRlLg0KKwkgKiA8L3A+DQorCSAqDQorCSAqIEBwYXJhbSBhc3QgdGhlIEFT
VCB0aGF0IGlzIHRvIG93biB0aGlzIG5vZGUNCisJICovDQorCUludGVyc2VjdGlvbkNhc3RUeXBl
KEFTVCBhc3QpIHsNCisJCXN1cGVyKGFzdCk7DQorCQl1bnN1cHBvcnRlZEluMl8zXzQoKTsNCisJ
fQ0KKw0KKwkvKiAob21pdCBqYXZhZG9jIGZvciB0aGlzIG1ldGhvZCkNCisJICogTWV0aG9kIGRl
Y2xhcmVkIG9uIEFTVE5vZGUuDQorCSAqLw0KKwlmaW5hbCBMaXN0IGludGVybmFsU3RydWN0dXJh
bFByb3BlcnRpZXNGb3JUeXBlKGludCBhcGlMZXZlbCkgew0KKwkJcmV0dXJuIHByb3BlcnR5RGVz
Y3JpcHRvcnMoYXBpTGV2ZWwpOw0KKwl9DQorDQorCS8qIChvbWl0IGphdmFkb2MgZm9yIHRoaXMg
bWV0aG9kKQ0KKwkgKiBNZXRob2QgZGVjbGFyZWQgb24gQVNUTm9kZS4NCisJICovDQorCWZpbmFs
IExpc3QgaW50ZXJuYWxHZXRDaGlsZExpc3RQcm9wZXJ0eShDaGlsZExpc3RQcm9wZXJ0eURlc2Ny
aXB0b3IgcHJvcGVydHkpIHsNCisJCWlmIChwcm9wZXJ0eSA9PSBUWVBFU19QUk9QRVJUWSkgew0K
KwkJCXJldHVybiB0eXBlcygpOw0KKwkJfQ0KKwkJLy8gYWxsb3cgZGVmYXVsdCBpbXBsZW1lbnRh
dGlvbiB0byBmbGFnIHRoZSBlcnJvcg0KKwkJcmV0dXJuIHN1cGVyLmludGVybmFsR2V0Q2hpbGRM
aXN0UHJvcGVydHkocHJvcGVydHkpOw0KKwl9DQorDQorCS8qIChvbWl0IGphdmFkb2MgZm9yIHRo
aXMgbWV0aG9kKQ0KKwkgKiBNZXRob2QgZGVjbGFyZWQgb24gQVNUTm9kZS4NCisJICovDQorCWZp
bmFsIGludCBnZXROb2RlVHlwZTAoKSB7DQorCQlyZXR1cm4gSU5URVJTRUNUSU9OX0NBU1RfVFlQ
RTsNCisJfQ0KKw0KKwkvKiAob21pdCBqYXZhZG9jIGZvciB0aGlzIG1ldGhvZCkNCisJICogTWV0
aG9kIGRlY2xhcmVkIG9uIEFTVE5vZGUuDQorCSAqLw0KKwlBU1ROb2RlIGNsb25lMChBU1QgdGFy
Z2V0KSB7DQorCQlJbnRlcnNlY3Rpb25DYXN0VHlwZSByZXN1bHQgPSBuZXcgSW50ZXJzZWN0aW9u
Q2FzdFR5cGUodGFyZ2V0KTsNCisJCXJlc3VsdC5zZXRTb3VyY2VSYW5nZShnZXRTdGFydFBvc2l0
aW9uKCksIGdldExlbmd0aCgpKTsNCisJCXJlc3VsdC50eXBlcygpLmFkZEFsbCgNCisJCQkJQVNU
Tm9kZS5jb3B5U3VidHJlZXModGFyZ2V0LCB0eXBlcygpKSk7DQorCQlyZXR1cm4gcmVzdWx0Ow0K
Kwl9DQorDQorCS8qIChvbWl0IGphdmFkb2MgZm9yIHRoaXMgbWV0aG9kKQ0KKwkgKiBNZXRob2Qg
ZGVjbGFyZWQgb24gQVNUTm9kZS4NCisJICovDQorCWZpbmFsIGJvb2xlYW4gc3VidHJlZU1hdGNo
MChBU1RNYXRjaGVyIG1hdGNoZXIsIE9iamVjdCBvdGhlcikgew0KKwkJLy8gZGlzcGF0Y2ggdG8g
Y29ycmVjdCBvdmVybG9hZGVkIG1hdGNoIG1ldGhvZA0KKwkJcmV0dXJuIG1hdGNoZXIubWF0Y2go
dGhpcywgb3RoZXIpOw0KKwl9DQorDQorCS8qIChvbWl0IGphdmFkb2MgZm9yIHRoaXMgbWV0aG9k
KQ0KKwkgKiBNZXRob2QgZGVjbGFyZWQgb24gQVNUTm9kZS4NCisJICovDQorCXZvaWQgYWNjZXB0
MChBU1RWaXNpdG9yIHZpc2l0b3IpIHsNCisJCWJvb2xlYW4gdmlzaXRDaGlsZHJlbiA9IHZpc2l0
b3IudmlzaXQodGhpcyk7DQorCQlpZiAodmlzaXRDaGlsZHJlbikgew0KKwkJCS8vIHZpc2l0IGNo
aWxkcmVuIGluIG5vcm1hbCBsZWZ0IHRvIHJpZ2h0IHJlYWRpbmcgb3JkZXINCisJCQlhY2NlcHRD
aGlsZHJlbih2aXNpdG9yLCB0aGlzLnR5cGVzKTsNCisJCX0NCisJCXZpc2l0b3IuZW5kVmlzaXQo
dGhpcyk7DQorCX0NCisNCisJLyoqDQorCSAqIFJldHVybnMgdGhlIGxpdmUgb3JkZXJlZCBsaXN0
IG9mIHR5cGVzIGluIHRoaXMgaW50ZXJzZWN0aW9uIHR5cGUuDQorCSAqIEFkZGluZyBhbmQgcmVt
b3Zpbmcgbm9kZXMgZnJvbSB0aGlzIGxpc3QgYWZmZWN0cyB0aGlzIG5vZGUNCisJICogZHluYW1p
Y2FsbHkuIEFsbCBub2RlcyBpbiB0aGlzIGxpc3QgbXVzdCBiZQ0KKwkgKiA8Y29kZT5UeXBlPC9j
b2RlPnM7IGF0dGVtcHRzIHRvIGFkZCBhbnkgb3RoZXINCisJICogdHlwZSBvZiBub2RlIHdpbGwg
dHJpZ2dlciBhbiBleGNlcHRpb24uDQorCSAqDQorCSAqIEByZXR1cm4gdGhlIGxpdmUgbGlzdCBv
ZiB0eXBlcyBpbiB0aGlzIGludGVyc2VjdGlvbiB0eXBlIChlbGVtZW50IHR5cGU6IHtAbGluayBU
eXBlfSkNCisJICovDQorCXB1YmxpYyBMaXN0IHR5cGVzKCkgew0KKwkJcmV0dXJuIHRoaXMudHlw
ZXM7DQorCX0NCisNCisJLyogKG9taXQgamF2YWRvYyBmb3IgdGhpcyBtZXRob2QpDQorCSAqIE1l
dGhvZCBkZWNsYXJlZCBvbiBBU1ROb2RlLg0KKwkgKi8NCisJaW50IG1lbVNpemUoKSB7DQorCQly
ZXR1cm4gQkFTRV9OT0RFX1NJWkUgKyAxICogNDsNCisJfQ0KKw0KKwkvKiAob21pdCBqYXZhZG9j
IGZvciB0aGlzIG1ldGhvZCkNCisJICogTWV0aG9kIGRlY2xhcmVkIG9uIEFTVE5vZGUuDQorCSAq
Lw0KKwlpbnQgdHJlZVNpemUoKSB7DQorCQlyZXR1cm4NCisJCQltZW1TaXplKCkNCisJCQkrIHRo
aXMudHlwZXMubGlzdFNpemUoKTsNCisJfQ0KK30NCisNCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL1R5cGVCaW5kaW5nLmphdmEg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL1R5cGVC
aW5kaW5nLmphdmEKaW5kZXggZDcyMzUzNi4uMTRkZjgzZCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9UeXBlQmluZGluZy5qYXZh
CisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20v
VHlwZUJpbmRpbmcuamF2YQpAQCAtNjY3LDQgKzY2Nyw1IEBACiAJCQljYXNlIEJpbmRpbmcuV0lM
RENBUkRfVFlQRSA6CiAJCQljYXNlIEJpbmRpbmcuSU5URVJTRUNUSU9OX1RZUEU6CisJCQljYXNl
IEJpbmRpbmcuSU5URVJTRUNUSU9OX0NBU1RfVFlQRToKIAkJCQlyZXR1cm4gbnVsbDsKIAkJfQpA
QCAtNzYzLDUgKzc2NCw1IEBACiAJCQkJcmV0dXJuIFN0cmluZy52YWx1ZU9mKGJ1ZmZlcik7CiAJ
CQlkZWZhdWx0IDoKLQkJCQlpZiAoaXNBbm9ueW1vdXMoKSB8fCB0aGlzLmJpbmRpbmcuaXNMb2Nh
bFR5cGUoKSkgeworCQkJCWlmIChpc0Fub255bW91cygpIHx8IHRoaXMuYmluZGluZy5pc0xvY2Fs
VHlwZSgpIHx8IHRoaXMuYmluZGluZy5pc0ludGVyc2VjdGlvbkNhc3RUeXBlKCkpIHsKIAkJCQkJ
cmV0dXJuIE5PX05BTUU7CiAJCQkJfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
ZG9tL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL2RvbS9OYWl2ZUFTVEZsYXR0ZW5lci5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b3JlL2RvbS9OYWl2ZUFTVEZsYXR0ZW5lci5qYXZhCmluZGV4IDc4ODFjNzIuLjhjYTNjODIgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29yZS9kb20vTmFpdmVBU1RGbGF0dGVuZXIuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvZG9tL05haXZlQVNURmxhdHRl
bmVyLmphdmEKQEAgLTE3MjUsNCArMTcyNSwxOSBAQAogCiAJLyoKKwkgKiBAc2VlIEFTVFZpc2l0
b3IjdmlzaXQoSW50ZXJzZWN0aW9uQ2FzdFR5cGUpCisJICogQHNpbmNlIDMuNworCSAqLworCXB1
YmxpYyBib29sZWFuIHZpc2l0KEludGVyc2VjdGlvbkNhc3RUeXBlIG5vZGUpIHsKKwkJZm9yIChJ
dGVyYXRvciBpdCA9IG5vZGUudHlwZXMoKS5pdGVyYXRvcigpOyBpdC5oYXNOZXh0KCk7ICkgewor
CQkJVHlwZSB0ID0gKFR5cGUpIGl0Lm5leHQoKTsKKwkJCXQuYWNjZXB0KHRoaXMpOworCQkJaWYg
KGl0Lmhhc05leHQoKSkgeworCQkJCXRoaXMuYnVmZmVyLmFwcGVuZCgiICYgIik7IC8vJE5PTi1O
TFMtMSQKKwkJCX0KKwkJfQorCQlyZXR1cm4gZmFsc2U7CisJfQorCisJLyoKIAkgKiBAc2VlIEFT
VFZpc2l0b3IjdmlzaXQoVmFyaWFibGVEZWNsYXJhdGlvbkV4cHJlc3Npb24pCiAJICovCmRpZmYg
LS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvcmUvZG9tL3Jld3JpdGUvQVNUUmV3cml0ZUZsYXR0ZW5lci5qYXZhIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL2RvbS9yZXdyaXRlL0FT
VFJld3JpdGVGbGF0dGVuZXIuamF2YQppbmRleCA5YTMwMTQ0Li4wNTE3MDllIDEwMDY0NAotLS0g
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUv
ZG9tL3Jld3JpdGUvQVNUUmV3cml0ZUZsYXR0ZW5lci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9kb20vcmV3cml0ZS9BU1RS
ZXdyaXRlRmxhdHRlbmVyLmphdmEKQEAgLTEwNzksNCArMTA3OSwxMiBAQAogCQogCS8qCisJICog
QHNlZSBBU1RWaXNpdG9yI3Zpc2l0KEludGVyc2VjdGlvbkNhc3RUeXBlKQorCSAqLworCXB1Ymxp
YyBib29sZWFuIHZpc2l0KEludGVyc2VjdGlvbkNhc3RUeXBlIG5vZGUpIHsKKwkJdmlzaXRMaXN0
KG5vZGUsIEludGVyc2VjdGlvbkNhc3RUeXBlLlRZUEVTX1BST1BFUlRZLCAiICYgIiwgVXRpbC5F
TVBUWV9TVFJJTkcsIFV0aWwuRU1QVFlfU1RSSU5HKTsgLy8kTk9OLU5MUy0xJAorCQlyZXR1cm4g
ZmFsc2U7CisJfQorCisJLyoKIAkgKiBAc2VlIEFTVFZpc2l0b3IjdmlzaXQoVmFyaWFibGVEZWNs
YXJhdGlvbkV4cHJlc3Npb24pCiAJICov
</data>

          </attachment>
      

    </bug>

</bugzilla>