<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>416885</bug_id>
          
          <creation_ts>2013-09-10 02:51:00 -0400</creation_ts>
          <short_desc>[compiler][1.8] IncompatibleClassChange error</short_desc>
          <delta_ts>2013-09-18 17:24:07 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Manoj Palat Away Until May 11 2015">manpalat</reporter>
          <assigned_to name="Jesper Moller">jesper</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>jarthana</cc>
    
    <cc>manpalat</cc>
    
    <cc>snorthov</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
    
    <cc>tom.schindl</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="59344"
          type_id="1"
          status="+"
          setter="srikanth_sankaran"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2304675</commentid>
    <comment_count>0</comment_count>
      <attachid>235330</attachid>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2013-09-10 02:51:10 -0400</bug_when>
    <thetext>Created attachment 235330
Test case to reproduce the issue

Exception in thread &quot;main&quot; java.lang.IncompatibleClassChangeError
	at java.lang.invoke.MethodHandleNatives.linkMethodHandleConstant(MethodHandleNatives.java:383)
	at X.main(X.java:4)
Caused by: java.lang.NoSuchMethodException: no such method: java.lang.invoke.LambdaMetafactory.metaFactory(Lookup,String,MethodType,MethodHandle,MethodHandle,MethodType)CallSite/invokeStatic
	at java.lang.invoke.MemberName.makeAccessException(MemberName.java:765)
	at java.lang.invoke.MemberName$Factory.resolveOrFail(MemberName.java:882)
	at java.lang.invoke.MethodHandles$Lookup.resolveOrFail(MethodHandles.java:1019)
	at java.lang.invoke.MethodHandles$Lookup.linkMethodHandleConstant(MethodHandles.java:1284)
	at java.lang.invoke.MethodHandleNatives.linkMethodHandleConstant(MethodHandleNatives.java:381)
	... 1 more
Caused by: java.lang.NoSuchMethodError: java.lang.invoke.LambdaMetafactory.metaFactory(Ljava/lang/invoke/MethodHandles$Lookup;Ljava/lang/String;Ljava/lang/invoke/MethodType;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodHandle;Ljava/lang/invoke/MethodType;)Ljava/lang/invoke/CallSite;
	at java.lang.invoke.MethodHandleNatives.resolve(Native Method)
	at java.lang.invoke.MemberName$Factory.resolve(MemberName.java:854)
	at java.lang.invoke.MemberName$Factory.resolveOrFail(MemberName.java:879)
	... 4 more

Use b104 build on windows for JRE 1.8 to reproduce the issue
As a follow up for bug 413913 
Also see http://dev.eclipse.org/mhonarc/lists/jdt-core-dev/msg02324.html</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2304742</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-09-10 05:14:00 -0400</bug_when>
    <thetext>Jesper, can you take a look ? TIA, I would suggest this be prioritized above
JEP 120 work.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2305240</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-09-11 02:13:16 -0400</bug_when>
    <thetext>Hi Jesper, this is blocking various people from testing early bits.
Let me know if you are unable to work on it this in the next 4-5
days - I&apos;ll take over in that case.

Please see the latest posts in jdt-core-dev for some back ground.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2305283</commentid>
    <comment_count>3</comment_count>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-09-11 04:19:36 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #2)
&gt; Hi Jesper, this is blocking various people from testing early bits.
&gt; Let me know if you are unable to work on it this in the next 4-5
&gt; days - I&apos;ll take over in that case.

I will be working on this from today, and expect to be done soon.

Are we moving to b106 this week - the bug is also against b100, if I&apos;m not mistaken?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2305327</commentid>
    <comment_count>4</comment_count>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-09-11 06:32:19 -0400</bug_when>
    <thetext>I&apos;ve fixed it, will submit a patch as soon as I fix the copyrights.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2305348</commentid>
    <comment_count>5</comment_count>
      <attachid>235380</attachid>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-09-11 07:09:58 -0400</bug_when>
    <thetext>Created attachment 235380
Patch for the Metafactory change

I didn&apos;t use the test source, didn&apos;t need to, since this patch fixes the 70+ test failures which have existed since moving to b100 (I think it was, it was during my vacation). Anything with an invokedynamic failed at runtime.

The patch introduces 23 other test failures since the constant pool indixes got shuffled - I will address those in a separate patch, they are just custodial in nature.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2305447</commentid>
    <comment_count>6</comment_count>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-09-11 10:40:55 -0400</bug_when>
    <thetext>Requesting review for the patch. (Still haven&apos;t fixed the disassembly-comparison regressions, though)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2305470</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-09-11 11:31:27 -0400</bug_when>
    <thetext>Thanks, I&apos;ll review this since I worked with you on lambda code generation
and am familiar with the concerned code.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2305678</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-09-12 02:44:10 -0400</bug_when>
    <thetext>Patch looks good, Thanks Jesper. I would change it so as not to call
getSingleAbstractMethod from LE and RE and instead use this.descriptor
which already caches it.

Please release once the tests are fixed. No need to review test changes
in this case.

As for upgrading, through IBM channels the latest we have access to is
8b104. If all is clean with 8b106, by all means upgrade to that.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2305907</commentid>
    <comment_count>9</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-09-12 10:18:21 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #8)
&gt; As for upgrading, through IBM channels the latest we have access to is
&gt; 8b104. If all is clean with 8b106, by all means upgrade to that.

Has the bug in the Linux JVM be fixed in one of these?
Remember I&apos;m still locked to b92!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2305960</commentid>
    <comment_count>10</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-09-12 11:05:55 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #9)
&gt; (In reply to Srikanth Sankaran from comment #8)
&gt; &gt; As for upgrading, through IBM channels the latest we have access to is
&gt; &gt; 8b104. If all is clean with 8b106, by all means upgrade to that.
&gt; 
&gt; Has the bug in the Linux JVM be fixed in one of these?
&gt; Remember I&apos;m still locked to b92!

Hi Stephan, by the Linux bug you are perhaps to what we observed as &quot;faulty&quot; behavior at 8b100 time ? It is likely that Windows build was lagging Linux 
builds for the API change and we starting hitting it in the windows builds
after 8b100. So in short, there may not be a Linux bug in the VM that is blocking
us - only way to know for sure is to run the tests with Jesper&apos;s patch and
see what comes.

For the record, I am on Windows64, Jesper please call out what platform you
are testing on.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2306088</commentid>
    <comment_count>11</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-09-12 14:40:54 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #10)
&gt; (In reply to Stephan Herrmann from comment #9)
&gt; &gt; (In reply to Srikanth Sankaran from comment #8)
&gt; &gt; &gt; As for upgrading, through IBM channels the latest we have access to is
&gt; &gt; &gt; 8b104. If all is clean with 8b106, by all means upgrade to that.
&gt; &gt; 
&gt; &gt; Has the bug in the Linux JVM be fixed in one of these?
&gt; &gt; Remember I&apos;m still locked to b92!
&gt; 
&gt; Hi Stephan, by the Linux bug you are perhaps to what we observed as &quot;faulty&quot;
&gt; behavior at 8b100 time ?

Indeed.

&gt; It is likely that Windows build was lagging Linux 
&gt; builds for the API change and we starting hitting it in the windows builds
&gt; after 8b100. So in short, there may not be a Linux bug in the VM that is
&gt; blocking us - 

interesting!

&gt; only way to know for sure is to run the tests with Jesper&apos;s patch and
&gt; see what comes.

RunAllJava8Tests with this patch on Linux 32bit with b106 gives a new set of failures (total failures: 26):

1x: an almost normal failure courtesy of bug 414653.
2x: 
  &quot;must implement the inherited abstract method Comparator.thenComparing...&quot;
many:
  disassembled byte code uses a real name instead of lambda$,
  plus metaFactory vs. metafactory in expected results
some more:
  changes in constantpool indices

So it looks like it&apos;s going in the right direction, but perhaps b106 brought yet another set of incompatibilities?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2306108</commentid>
    <comment_count>12</comment_count>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-09-12 15:43:01 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #11)
&gt; RunAllJava8Tests with this patch on Linux 32bit with b106 gives a new set of
&gt; failures (total failures: 26):
&gt; 
&gt; 1x: an almost normal failure courtesy of bug 414653.
&gt; 2x: 
&gt;   &quot;must implement the inherited abstract method Comparator.thenComparing...&quot;
&gt; many:
&gt;   disassembled byte code uses a real name instead of lambda$,
&gt;   plus metaFactory vs. metafactory in expected results
&gt; some more:
&gt;   changes in constantpool indices

They are the ones I&apos;m seeing on b100 (23 in all), and it&apos;s taking a while to fix... 

&gt; So it looks like it&apos;s going in the right direction, but perhaps b106 brought
&gt; yet another set of incompatibilities?

Looks like it.

For the record, I&apos;m on OS X (64 bit).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2306202</commentid>
    <comment_count>13</comment_count>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-09-12 18:40:06 -0400</bug_when>
    <thetext>Released as http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=114d487223299fbb39233b9fa5b4135ee3c694c5

Disclaimer: I&apos;ve only tried this on b100, but judged from Stephans comment, b106 should not be a major setback.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2306257</commentid>
    <comment_count>14</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-09-13 01:36:25 -0400</bug_when>
    <thetext>(In reply to Jesper Moller from comment #13)
&gt; Released as
&gt; http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
&gt; ?h=BETA_JAVA8&amp;id=114d487223299fbb39233b9fa5b4135ee3c694c5

Thanks ! I confirm that on Windows 64, with this patch, all tests are
green against 8b104.

(In reply to Stephan Herrmann from comment #11)

&gt; 2x: 
&gt;   &quot;must implement the inherited abstract method Comparator.thenComparing...&quot;

This is likely only in 8b106 as I am not seeing it on 104.

&gt; many:
&gt;   disassembled byte code uses a real name instead of lambda$,
&gt;   plus metaFactory vs. metafactory in expected results
&gt; some more:
&gt;   changes in constantpool indices

These should have gone away with the test suite fix already released.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2307968</commentid>
    <comment_count>15</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-09-17 13:00:12 -0400</bug_when>
    <thetext>To confirm: RunAllJava8Tests in HEAD of BETA_JAVA8 with b104 I only see these:

&gt; 2x: 
&gt;   &quot;must implement the inherited abstract method Comparator.thenComparing...&quot;

It&apos;s MethodVerifyTest.test331446() f.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2308151</commentid>
    <comment_count>16</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-09-18 01:39:20 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #15)
&gt; To confirm: RunAllJava8Tests in HEAD of BETA_JAVA8 with b104 I only see
&gt; these:

Did you mean 8b106 and 104 ? With 104 on windows all is clean for me and
it is surprising if something is failing on Linux. Could you post a fix
that works for both ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2308152</commentid>
    <comment_count>17</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-09-18 01:43:07 -0400</bug_when>
    <thetext>Is bug 416480 similar to this? I see this fix doesn&apos;t address that one, but stil wondering if they are related.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2308153</commentid>
    <comment_count>18</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-09-18 01:45:49 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #17)
&gt; Is bug 416480 similar to this? I see this fix doesn&apos;t address that one, but
&gt; stil wondering if they are related.

No, they are not, other than the symptom being the same they are unconnected.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2308579</commentid>
    <comment_count>19</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-09-18 17:24:07 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #16)
&gt; (In reply to Stephan Herrmann from comment #15)
&gt; &gt; To confirm: RunAllJava8Tests in HEAD of BETA_JAVA8 with b104 I only see
&gt; &gt; these:
&gt; 
&gt; Did you mean 8b106 and 104 ? 

sorry, too sleepy when I wrote the comment: I meant to say b106.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>235330</attachid>
            <date>2013-09-10 02:51:00 -0400</date>
            <delta_ts>2013-09-10 02:51:10 -0400</delta_ts>
            <desc>Test case to reproduce the issue</desc>
            <filename>file_416885.txt</filename>
            <type>text/plain</type>
            <size>182</size>
            <attacher name="Manoj Palat Away Until May 11 2015">manpalat</attacher>
            
              <data encoding="base64">aW50ZXJmYWNlIEkgeyB2b2lkIGRvaXQoKTsgfQ0KcHVibGljIGNsYXNzIFggew0KICBwdWJsaWMg
c3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7DQoJICBJIHgyID0gKCkgLT4gew0KCQlT
eXN0ZW0ub3V0LnByaW50bG4oIkhlbGxvIFdvcmxkMiIpOyAgDQoJICB9Ow0KCSAgeDIuZG9pdCgp
Ow0KICB9DQp9DQo=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>235380</attachid>
            <date>2013-09-11 07:09:00 -0400</date>
            <delta_ts>2013-09-12 18:40:26 -0400</delta_ts>
            <desc>Patch for the Metafactory change</desc>
            <filename>clipboard.txt</filename>
            <type>text/plain</type>
            <size>7144</size>
            <attacher name="Jesper Moller">jesper</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMAojUCBvcmcuZWNsaXBzZS5qZHQuY29yZQpk
aWZmIC0tZ2l0IGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9DbGFz
c0ZpbGUuamF2YSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvQ2xh
c3NGaWxlLmphdmEKaW5kZXggNTNiODI4NC4uOTA0N2I0NyAxMDA2NDQKLS0tIGNvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9DbGFzc0ZpbGUuamF2YQorKysgY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL0NsYXNzRmlsZS5qYXZhCkBAIC0x
NCw2ICsxNCw3IEBACiAgKiAgICAgSmVzcGVyIFMgTW9sbGVyIC0gQ29udHJpYnV0aW9ucyBmb3IK
ICAqCQkJCQkJCUJ1ZyA0MDUwNjYgLSBbMS44XVtjb21waWxlcl1bY29kZWdlbl0gSW1wbGVtZW50
IGNvZGUgZ2VuZXJhdGlvbiBpbmZyYXN0cnVjdHVyZSBmb3IgSlNSMzM1ICAgICAgICAgICAgIAog
ICoJCQkJCQkJQnVnIDQwNjk4MiAtIFsxLjhdW2NvbXBpbGVyXSBHZW5lcmF0aW9uIG9mIE1ldGhv
ZFBhcmFtZXRlcnMgQXR0cmlidXRlIGluIGNsYXNzZmlsZQorICoJCQkJCQkJQnVnIDQxNjg4NSAt
IFsxLjhdW2NvbXBpbGVyXUluY29tcGF0aWJsZUNsYXNzQ2hhbmdlIGVycm9yIChlZGl0KQogICog
ICAgICAgIEFuZHkgQ2xlbWVudCAoR29QaXZvdGFsLCBJbmMpIGFjbGVtZW50QGdvcGl2b3RhbC5j
b20gLSBDb250cmlidXRpb25zIGZvcgogICogICAgICAgICAgICAgICAgICAgICAgICAgIEJ1ZyAz
ODM2MjQgLSBbMS44XVtjb21waWxlcl0gUmV2aXZlIGNvZGUgZ2VuZXJhdGlvbiBzdXBwb3J0IGZv
ciB0eXBlIGFubm90YXRpb25zIChmcm9tIE9saXZpZXIncyB3b3JrKQogICogICAgICAgICAgICAg
ICAgICAgICAgICAgIEJ1ZyA0MDkyMzYgLSBbMS44XVtjb21waWxlcl0gVHlwZSBhbm5vdGF0aW9u
cyBvbiBpbnRlcnNlY3Rpb24gY2FzdCB0eXBlcyBkcm9wcGVkIGJ5IGNvZGUgZ2VuZXJhdG9yCkBA
IC0yODY5LDcgKzI4NzAsNyBAQAogCQkJdGhpcy5jb250ZW50c1tsb2NhbENvbnRlbnRzT2Zmc2V0
KytdID0gMDsKIAkJCXRoaXMuY29udGVudHNbbG9jYWxDb250ZW50c09mZnNldCsrXSA9IChieXRl
KSAzOwogCQkJCi0JCQlpbnQgZnVuY3Rpb25hbERlc2NyaXB0b3JJbmRleCA9IHRoaXMuY29uc3Rh
bnRQb29sLmxpdGVyYWxJbmRleEZvck1ldGhvZEhhbmRsZShmdW5jdGlvbmFsLmRlc2NyaXB0b3Iu
b3JpZ2luYWwoKSk7CisJCQlpbnQgZnVuY3Rpb25hbERlc2NyaXB0b3JJbmRleCA9IHRoaXMuY29u
c3RhbnRQb29sLmxpdGVyYWxJbmRleEZvck1ldGhvZFR5cGUoZnVuY3Rpb25hbC5kZXNjcmlwdG9y
Lm9yaWdpbmFsKCkuc2lnbmF0dXJlKCkpOwogCQkJdGhpcy5jb250ZW50c1tsb2NhbENvbnRlbnRz
T2Zmc2V0KytdID0gKGJ5dGUpIChmdW5jdGlvbmFsRGVzY3JpcHRvckluZGV4ID4+IDgpOwogCQkJ
dGhpcy5jb250ZW50c1tsb2NhbENvbnRlbnRzT2Zmc2V0KytdID0gKGJ5dGUpIGZ1bmN0aW9uYWxE
ZXNjcmlwdG9ySW5kZXg7CiAKZGlmZiAtLWdpdCBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYXN0L0xhbWJkYUV4cHJlc3Npb24uamF2YSBjb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0xhbWJkYUV4cHJlc3Npb24uamF2YQppbmRl
eCAzYzk4OGFlLi4zMWFlZjJlIDEwMDY0NAotLS0gY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2FzdC9MYW1iZGFFeHByZXNzaW9uLmphdmEKKysrIGNvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZh
CkBAIC0xNCw2ICsxNCw3IEBACiAgKiAgICAgSmVzcGVyIFMgTW9sbGVyIC0gQ29udHJpYnV0aW9u
cyBmb3IKICAqCQkJCQkJCWJ1ZyAzODI3MDEgLSBbMS44XVtjb21waWxlcl0gSW1wbGVtZW50IHNl
bWFudGljIGFuYWx5c2lzIG9mIExhbWJkYSBleHByZXNzaW9ucyAmIFJlZmVyZW5jZSBleHByZXNz
aW9uCiAgKgkJCQkJCQlidWcgMzgyNzIxIC0gWzEuOF1bY29tcGlsZXJdIEVmZmVjdGl2ZWx5IGZp
bmFsIHZhcmlhYmxlcyBuZWVkcyBzcGVjaWFsIHRyZWF0bWVudAorICoJCQkJCQkJQnVnIDQxNjg4
NSAtIFsxLjhdW2NvbXBpbGVyXUluY29tcGF0aWJsZUNsYXNzQ2hhbmdlIGVycm9yIChlZGl0KQog
ICogICAgIFN0ZXBoYW4gSGVycm1hbm4gLSBDb250cmlidXRpb24gZm9yCiAgKgkJCQkJCQlidWcg
NDAxMDMwIC0gWzEuOF1bbnVsbF0gTnVsbCBhbmFseXNpcyBzdXBwb3J0IGZvciBsYW1iZGEgbWV0
aG9kcy4KICAqCQkJCQkJCUJ1ZyAzOTIwOTkgLSBbMS44XVtjb21waWxlcl1bbnVsbF0gQXBwbHkg
bnVsbCBhbm5vdGF0aW9uIG9uIHR5cGVzIGZvciBudWxsIGFuYWx5c2lzCkBAIC0xMTYsNyArMTE3
LDEwIEBACiAJCXNpZ25hdHVyZS5hcHBlbmQoJyknKTsKIAkJc2lnbmF0dXJlLmFwcGVuZCh0aGlz
LmV4cGVjdGVkVHlwZS5zaWduYXR1cmUoKSk7CiAJCWludCBpbnZva2VEeW5hbWljTnVtYmVyID0g
Y29kZVN0cmVhbS5jbGFzc0ZpbGUucmVjb3JkQm9vdHN0cmFwTWV0aG9kKHRoaXMpOwotCQljb2Rl
U3RyZWFtLmludm9rZUR5bmFtaWMoaW52b2tlRHluYW1pY051bWJlciwgKHRoaXMuc2hvdWxkQ2Fw
dHVyZUluc3RhbmNlID8gMSA6IDApICsgdGhpcy5vdXRlckxvY2FsVmFyaWFibGVzU2xvdFNpemUs
IDEsIFR5cGVDb25zdGFudHMuQU5PTllNT1VTX01FVEhPRCwgc2lnbmF0dXJlLnRvU3RyaW5nKCku
dG9DaGFyQXJyYXkoKSk7CisJCQorCQlmaW5hbCBNZXRob2RCaW5kaW5nIHNhbSA9IHRoaXMuZXhw
ZWN0ZWRUeXBlLmdldFNpbmdsZUFic3RyYWN0TWV0aG9kKHRoaXMuZW5jbG9zaW5nU2NvcGUpOwor
CQkKKwkJY29kZVN0cmVhbS5pbnZva2VEeW5hbWljKGludm9rZUR5bmFtaWNOdW1iZXIsICh0aGlz
LnNob3VsZENhcHR1cmVJbnN0YW5jZSA/IDEgOiAwKSArIHRoaXMub3V0ZXJMb2NhbFZhcmlhYmxl
c1Nsb3RTaXplLCAxLCBzYW0uc2VsZWN0b3IsIHNpZ25hdHVyZS50b1N0cmluZygpLnRvQ2hhckFy
cmF5KCkpOwogCQljb2RlU3RyZWFtLnJlY29yZFBvc2l0aW9uc0Zyb20ocGMsIHRoaXMuc291cmNl
U3RhcnQpOwkJCiAJfQogCmRpZmYgLS1naXQgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2FzdC9SZWZlcmVuY2VFeHByZXNzaW9uLmphdmEgY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9SZWZlcmVuY2VFeHByZXNzaW9uLmphdmEK
aW5kZXggZGMyMzA5ZC4uNDIyZDM2ZSAxMDA2NDQKLS0tIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvUmVmZXJlbmNlRXhwcmVzc2lvbi5qYXZhCisrKyBjb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVyZW5jZUV4cHJl
c3Npb24uamF2YQpAQCAtMTQsNiArMTQsNyBAQAogICogICAgIEplc3BlciBTIE1vbGxlciAtIENv
bnRyaWJ1dGlvbnMgZm9yCiAgKgkJCQkJCQlidWcgMzgyNzAxIC0gWzEuOF1bY29tcGlsZXJdIElt
cGxlbWVudCBzZW1hbnRpYyBhbmFseXNpcyBvZiBMYW1iZGEgZXhwcmVzc2lvbnMgJiBSZWZlcmVu
Y2UgZXhwcmVzc2lvbgogICogICAgICAgICAgICAgICAgICAgICAgICAgIEJ1ZyAzODQ2ODcgLSBb
MS44XSBXaWxkY2FyZCB0eXBlIGFyZ3VtZW50cyBzaG91bGQgYmUgcmVqZWN0ZWQgZm9yIGxhbWJk
YSBhbmQgcmVmZXJlbmNlIGV4cHJlc3Npb25zCisgKgkJCQkJCQlCdWcgNDE2ODg1IC0gWzEuOF1b
Y29tcGlsZXJdSW5jb21wYXRpYmxlQ2xhc3NDaGFuZ2UgZXJyb3IgKGVkaXQpCiAgKgkgICBTdGVw
aGFuIEhlcnJtYW5uIC0gQ29udHJpYnV0aW9uIGZvcgogICoJCQkJCQkJYnVnIDQwMjAyOCAtIFsx
LjhdW2NvbXBpbGVyXSBudWxsIGFuYWx5c2lzIGZvciByZWZlcmVuY2UgZXhwcmVzc2lvbnMgCiAg
KgkJCQkJCQlidWcgNDA0NjQ5IC0gWzEuOF1bY29tcGlsZXJdIGRldGVjdCBpbGxlZ2FsIHJlZmVy
ZW5jZSB0byBpbmRpcmVjdCBvciByZWR1bmRhbnQgc3VwZXIgdmlhIEkuc3VwZXIubSgpIHN5bnRh
eApAQCAtNTgsNyArNTksNiBAQAogCiBwdWJsaWMgY2xhc3MgUmVmZXJlbmNlRXhwcmVzc2lvbiBl
eHRlbmRzIEZ1bmN0aW9uYWxFeHByZXNzaW9uIGltcGxlbWVudHMgSW52b2NhdGlvblNpdGUgewog
CQotCXByaXZhdGUgc3RhdGljIGNoYXIgW10gTEFNQkRBID0geyAnbCcsICdhJywgJ20nLCAnYics
ICdkJywgJ2EnIH07CiAJcHVibGljIEV4cHJlc3Npb24gbGhzOwogCXB1YmxpYyBUeXBlUmVmZXJl
bmNlIFtdIHR5cGVBcmd1bWVudHM7CiAJcHVibGljIGNoYXIgW10gc2VsZWN0b3I7CkBAIC0xNTQs
NyArMTU0LDkgQEAKIAkJYnVmZmVyLmFwcGVuZCh0aGlzLnJlc29sdmVkVHlwZS5jb25zdGFudFBv
b2xOYW1lKCkpOwogCQlidWZmZXIuYXBwZW5kKCc7Jyk7CiAJCWludCBpbnZva2VEeW5hbWljTnVt
YmVyID0gY29kZVN0cmVhbS5jbGFzc0ZpbGUucmVjb3JkQm9vdHN0cmFwTWV0aG9kKHRoaXMpOwot
CQljb2RlU3RyZWFtLmludm9rZUR5bmFtaWMoaW52b2tlRHluYW1pY051bWJlciwgYXJndW1lbnRz
U2l6ZSwgMSwgTEFNQkRBLCBidWZmZXIudG9TdHJpbmcoKS50b0NoYXJBcnJheSgpLCAKKwkJZmlu
YWwgTWV0aG9kQmluZGluZyBzYW0gPSB0aGlzLmV4cGVjdGVkVHlwZS5nZXRTaW5nbGVBYnN0cmFj
dE1ldGhvZCh0aGlzLmVuY2xvc2luZ1Njb3BlKTsKKworCQljb2RlU3RyZWFtLmludm9rZUR5bmFt
aWMoaW52b2tlRHluYW1pY051bWJlciwgYXJndW1lbnRzU2l6ZSwgMSwgc2FtLnNlbGVjdG9yLCBi
dWZmZXIudG9TdHJpbmcoKS50b0NoYXJBcnJheSgpLCAKIAkJCQl0aGlzLmlzQ29uc3RydWN0b3JS
ZWZlcmVuY2UoKSwgKHRoaXMubGhzIGluc3RhbmNlb2YgVHlwZVJlZmVyZW5jZT8gKFR5cGVSZWZl
cmVuY2UpIHRoaXMubGhzIDogbnVsbCksIHRoaXMudHlwZUFyZ3VtZW50cyk7CiAJCWNvZGVTdHJl
YW0ucmVjb3JkUG9zaXRpb25zRnJvbShwYywgdGhpcy5zb3VyY2VTdGFydCk7CiAJfQpkaWZmIC0t
Z2l0IGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9jb2RlZ2VuL0Nv
bnN0YW50UG9vbC5qYXZhIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9jb2RlZ2VuL0NvbnN0YW50UG9vbC5qYXZhCmluZGV4IDU5NDkxZTguLjg1MjQ2ZDIgMTAwNjQ0
Ci0tLSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvY29kZWdlbi9D
b25zdGFudFBvb2wuamF2YQorKysgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2NvZGVnZW4vQ29uc3RhbnRQb29sLmphdmEKQEAgLTE0LDYgKzE0LDcgQEAKICAqICAg
ICBKZXNwZXIgUyBNb2xsZXIgLSBDb250cmlidXRpb25zIGZvcgogICoJCQkJCQkJQnVnIDQwNTA2
NiAtIFsxLjhdW2NvbXBpbGVyXVtjb2RlZ2VuXSBJbXBsZW1lbnQgY29kZSBnZW5lcmF0aW9uIGlu
ZnJhc3RydWN0dXJlIGZvciBKU1IzMzUgICAgICAgIAogICoJCQkJCQkJQnVnIDQwNjk4MiAtIFsx
LjhdW2NvbXBpbGVyXSBHZW5lcmF0aW9uIG9mIE1ldGhvZFBhcmFtZXRlcnMgQXR0cmlidXRlIGlu
IGNsYXNzZmlsZQorICoJCQkJCQkJQnVnIDQxNjg4NSAtIFsxLjhdW2NvbXBpbGVyXUluY29tcGF0
aWJsZUNsYXNzQ2hhbmdlIGVycm9yIChlZGl0KQogICoqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCiBw
YWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5jb2RlZ2VuOwogCkBAIC0y
NjAsOCArMjYxLDggQEAKIAkvLyBqYXZhIDcgamF2YS5sYW5nLmludm9rZS5NZXRob2RIYW5kbGUu
aW52b2tlRXhhY3QoLi4pL2ludm9rZUdlbmVyaWMoLi4pCiAJcHVibGljIHN0YXRpYyBmaW5hbCBj
aGFyW10gSkFWQV9MQU5HX0lOVk9LRV9NRVRIT0RIQU5ETEVfUE9MWU1PUlBISUNTSUdOQVRVUkUg
PSAiTGphdmEvbGFuZy9pbnZva2UvTWV0aG9kSGFuZGxlJFBvbHltb3JwaGljU2lnbmF0dXJlOyIu
dG9DaGFyQXJyYXkoKTsgLy8kTk9OLU5MUy0xJAogCS8vIEphdmEgOCBsYW1iZGEgc3VwcG9ydAot
CXB1YmxpYyBzdGF0aWMgZmluYWwgY2hhcltdIE1FVEFGQUNUT1JZID0gIm1ldGFGYWN0b3J5Ii50
b0NoYXJBcnJheSgpOyAvLyROT04tTkxTLTEkCi0JcHVibGljIHN0YXRpYyBmaW5hbCBjaGFyW10g
SkFWQV9MQU5HX0lOVk9LRV9MQU1CREFNRVRBRkFDVE9SWV9NRVRBRkFDVE9SWV9TSUdOQVRVUkUg
PSAiKExqYXZhL2xhbmcvaW52b2tlL01ldGhvZEhhbmRsZXMkTG9va3VwO0xqYXZhL2xhbmcvU3Ry
aW5nO0xqYXZhL2xhbmcvaW52b2tlL01ldGhvZFR5cGU7TGphdmEvbGFuZy9pbnZva2UvTWV0aG9k
SGFuZGxlO0xqYXZhL2xhbmcvaW52b2tlL01ldGhvZEhhbmRsZTtMamF2YS9sYW5nL2ludm9rZS9N
ZXRob2RUeXBlOylMamF2YS9sYW5nL2ludm9rZS9DYWxsU2l0ZTsiLnRvQ2hhckFycmF5KCk7IC8v
JE5PTi1OTFMtMSQKKwlwdWJsaWMgc3RhdGljIGZpbmFsIGNoYXJbXSBNRVRBRkFDVE9SWSA9ICJt
ZXRhZmFjdG9yeSIudG9DaGFyQXJyYXkoKTsgLy8kTk9OLU5MUy0xJAorCXB1YmxpYyBzdGF0aWMg
ZmluYWwgY2hhcltdIEpBVkFfTEFOR19JTlZPS0VfTEFNQkRBTUVUQUZBQ1RPUllfTUVUQUZBQ1RP
UllfU0lHTkFUVVJFID0gIihMamF2YS9sYW5nL2ludm9rZS9NZXRob2RIYW5kbGVzJExvb2t1cDtM
amF2YS9sYW5nL1N0cmluZztMamF2YS9sYW5nL2ludm9rZS9NZXRob2RUeXBlO0xqYXZhL2xhbmcv
aW52b2tlL01ldGhvZFR5cGU7TGphdmEvbGFuZy9pbnZva2UvTWV0aG9kSGFuZGxlO0xqYXZhL2xh
bmcvaW52b2tlL01ldGhvZFR5cGU7KUxqYXZhL2xhbmcvaW52b2tlL0NhbGxTaXRlOyIudG9DaGFy
QXJyYXkoKTsgLy8kTk9OLU5MUy0xJAogCiAJcHVibGljIHN0YXRpYyBmaW5hbCBjaGFyW10gSGFz
aENvZGUgPSAiaGFzaENvZGUiLnRvQ2hhckFycmF5KCk7IC8vJE5PTi1OTFMtMSQKIAlwdWJsaWMg
c3RhdGljIGZpbmFsIGNoYXJbXSBIYXNoQ29kZVNpZ25hdHVyZSA9ICIoKUkiLnRvQ2hhckFycmF5
KCk7IC8vJE5PTi1OTFMtMSQ7IA==
</data>

          </attachment>
      

    </bug>

</bugzilla>