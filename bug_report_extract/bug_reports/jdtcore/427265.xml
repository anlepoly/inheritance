<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>427265</bug_id>
          
          <creation_ts>2014-02-03 08:21:00 -0500</creation_ts>
          <short_desc>[1.8][compiler] Type inference with anonymous classes</short_desc>
          <delta_ts>2014-02-21 07:00:35 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Mac OS X</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>427059</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Vasyl Stashuk">vasyl.stashuk</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>sarika.sinha</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2357916</commentid>
    <comment_count>0</comment_count>
    <who name="Vasyl Stashuk">vasyl.stashuk</who>
    <bug_when>2014-02-03 08:21:52 -0500</bug_when>
    <thetext>Following doesn&apos;t compile:

List&lt;PriceOption&gt; availableOptions = new ArrayList&lt;&gt;();

availableOptions.stream()
                        .map(p -&gt; new Object() { })
                        .collect(toList());

I suspect type inference doesn&apos;t work well with anonymous classes.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2357920</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-03 08:33:37 -0500</bug_when>
    <thetext>Could you please a full, but small example please ? Even if it may appear
trivial to do it, a reporter providing it eliminates all guesswork and
will help speed up a fix. Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2357922</commentid>
    <comment_count>2</comment_count>
    <who name="Vasyl Stashuk">vasyl.stashuk</who>
    <bug_when>2014-02-03 08:38:10 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #1)
&gt; Could you please a full, but small example please ? Even if it may appear
&gt; trivial to do it, a reporter providing it eliminates all guesswork and
&gt; will help speed up a fix. Thanks.

Sure:

     public static void main(String[] args) {
		List&lt;String&gt; ss = Arrays.asList(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;);
		
		ss.stream().map(s -&gt; new Object() { });
	}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2357950</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-03 09:15:40 -0500</bug_when>
    <thetext>Full test that can be pasted into package explorer:

// --
import java.util.Arrays;
import java.util.List;

public class X {
public static void main(String[] args) {
		List&lt;String&gt; ss = Arrays.asList(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;);
		
		ss.stream().map(s -&gt; new Object() { });
	}
}
// --
We issue a weird error: &quot;Type mismatch: cannot convert from &quot; (sic)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2358281</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-03 20:10:08 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #3)
&gt; We issue a weird error: &quot;Type mismatch: cannot convert from &quot; (sic)

Well, how do you name the unnamed? :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2359757</commentid>
    <comment_count>5</comment_count>
      <attachid>239709</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-06 12:48:26 -0500</bug_when>
    <thetext>Created attachment 239709
Plausible patch

The final target type comes out to be 

Function&lt;? super java.lang.String,? extends java.lang.Object() {}&gt;

an impossible parameterization.

Not quite sure this is the best fix or it is without side effects.

Stephan, please take a look. (junit included)

I ran only RunOnlyJava8Tests (green)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2360619</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-08 17:55:57 -0500</bug_when>
    <thetext>The patch is plausible and very efficient, indeed.

Let me still document the little excursion I took when pondering the issue:

I&apos;m slightly unsettled by seeing that the spec part G has no mention at all of anonymous classes. I&apos;d be more at ease if we&apos;d find a solution that wouldn&apos;t require our own inventions at the core of the inference engine.

You probably saw the two types that we tried to mention as incompatible: those are two identical copies of the one anonymous class, copied via LE.getResolvedCopyForInferenceTargeting().

I assume that without the copying we wouldn&apos;t see any problem. How can we convince ourselves that the patch only compensates the artifacts from copying the lambda, without producing or hiding further problems?

- We&apos;d get into further trouble if the copied anonymous class could leak elsewhere, but I guess other than via a type bound no type binding will escape the inference to other parts of the compiler.

- By replacing the anon. class with its superclass, do we lose any information that could be needed elsewhere during type checking? For an anonymous class: no, since they&apos;re unmentionable, nobody will ever require that exact type. For a named local class? I&apos;m getting a headache trying to invent an example for this, but here&apos;s a wild one:

    void m() {
        List&lt;String&gt; ss = Arrays.asList(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;);
        
        ss.stream().map(s -&gt; {
          class L1 {};
          class L2 {
            L1 mm(L1 l) { return l;}
          }
          return new L2().mm(new L1());
        }).forEach(e -&gt; System.out.println(e));
    }

Even with the patch we get:

1. ERROR in /tmp/t/X.java (at line 19)
        return new L2().mm(new L1());
               ^^^^^^^^^^^^^^^^^^^^^
Type mismatch: cannot convert from L1 to L1

But the bug is just a various on the above; we should simply check isLocalType() instead of isAnonymousType(). Seems to fix this one.

Next, what if we derive from an interface, not a class? Extend and implement at the same time?

I should stop here: Inner classes inside a lambda is an unlikely thing to begin with. For straight-forward cases doing the isLocalType() trick in TypeBound fixes the bug. We should probably say this is good enough for now.


To stop my own procrastination I&apos;ve released the patch with the mentioned slight modification: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=6024db2244852bf1a14f4a11a2132399927fa015

Please let me know if you think the above discussion calls for further action...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2360629</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-08 19:49:40 -0500</bug_when>
    <thetext>Arrgh. my modification caused regressions: the patch must only affect local classes defined inside a lambda. Fixed via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=d1facd69b9dc2127e7162415007081afa0f4348b

Now we should be good.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2360639</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-08 22:58:06 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #6)

I think anonymous classes are handled adequately now. I overlooked the local
type case - good catch.

&gt; We should probably say this is good enough for now.

Agreed. I raised https://bugs.eclipse.org/bugs/show_bug.cgi?id=427742
targetting 4.4. Unless we hear real complaints from beta testers, we
can consider this closed for GA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2366498</commentid>
    <comment_count>9</comment_count>
    <who name="Sarika Sinha">sarika.sinha</who>
    <bug_when>2014-02-21 01:40:25 -0500</bug_when>
    <thetext>Verified as working for Eclipse + Java 8 RC1 using Kepler SR2(RC4) +   
Eclipse Java Development Tools Patch for Java 8 Support (BETA)	
1.0.0.v20140220-2054</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>239709</attachid>
            <date>2014-02-06 12:48:00 -0500</date>
            <delta_ts>2014-02-06 12:49:09 -0500</delta_ts>
            <desc>Plausible patch</desc>
            <filename>anonymous.patch</filename>
            <type>text/plain</type>
            <size>2372</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRh
RXhwcmVzc2lvbnNUZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxl
ci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OZWdh
dGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCmluZGV4IDI3M2IzOTMuLmYwYWE2MWEgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRhRXhw
cmVzc2lvbnNUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGls
ZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVn
YXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YQpAQCAtODM4Nyw2ICs4Mzg3LDIyIEBACiAJ
CSJUaGUgdGFyZ2V0IHR5cGUgb2YgdGhpcyBleHByZXNzaW9uIG11c3QgYmUgYSBmdW5jdGlvbmFs
IGludGVyZmFjZVxuIiArIAogCQkiLS0tLS0tLS0tLVxuIik7CiB9CisvLyBodHRwczovL2J1Z3Mu
ZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDI3MjY1LCAtIFsxLjhdW2NvbXBpbGVy
XSBUeXBlIGluZmVyZW5jZSB3aXRoIGFub255bW91cyBjbGFzc2VzIAorcHVibGljIHZvaWQgdGVz
dDQyNzI2NSgpIHsKKwlydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5q
YXZhIiwKKwkJCSJpbXBvcnQgamF2YS51dGlsLkFycmF5cztcbiIgKworCQkJImltcG9ydCBqYXZh
LnV0aWwuTGlzdDtcbiIgKworCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJIiAgICBwdWJs
aWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsKKwkJCSIJICAgICBMaXN0
PFN0cmluZz4gc3MgPSBBcnJheXMuYXNMaXN0KFwiMVwiLCBcIjJcIiwgXCIzXCIpO1xuIiArCisJ
CQkiCSAgICAgc3Muc3RyZWFtKCkubWFwKHMgLT4gbmV3IE9iamVjdCgpIHt9KTtcbiIgKworCQkJ
IiAgICB9XG4iICsKKwkJCSJ9XG4iCisJCX0sCisJCSIiKTsKK30KIHB1YmxpYyBzdGF0aWMgQ2xh
c3MgdGVzdENsYXNzKCkgewogCXJldHVybiBOZWdhdGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5j
bGFzczsKIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvVHlwZUJvdW5kLmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvbG9va3VwL1R5cGVCb3VuZC5qYXZhCmluZGV4IDUxOGVmZGUuLmEyMzFhMjYgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9sb29rdXAvVHlwZUJvdW5kLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9UeXBl
Qm91bmQuamF2YQpAQCAtMzIsMTMgKzMyLDEzIEBACiAJLyoqIENyZWF0ZSBhIHRydWUgdHlwZSBi
b3VuZCBvciBhIGRlcGVuZGVuY3kuICovCiAJVHlwZUJvdW5kKEluZmVyZW5jZVZhcmlhYmxlIGlu
ZmVyZW5jZVZhcmlhYmxlLCBUeXBlQmluZGluZyB0eXBlQmluZGluZywgaW50IHJlbGF0aW9uKSB7
CiAJCXRoaXMubGVmdCA9IGluZmVyZW5jZVZhcmlhYmxlOwotCQl0aGlzLnJpZ2h0ID0gdHlwZUJp
bmRpbmc7CisJCXRoaXMucmlnaHQgPSB0eXBlQmluZGluZyAhPSBudWxsICYmIHR5cGVCaW5kaW5n
LmlzQW5vbnltb3VzVHlwZSgpID8gdHlwZUJpbmRpbmcuc3VwZXJjbGFzcygpIDogdHlwZUJpbmRp
bmc7CiAJCXRoaXMucmVsYXRpb24gPSByZWxhdGlvbjsKIAl9CiAJCiAJVHlwZUJvdW5kKEluZmVy
ZW5jZVZhcmlhYmxlIGluZmVyZW5jZVZhcmlhYmxlLCBUeXBlQmluZGluZyB0eXBlQmluZGluZywg
aW50IHJlbGF0aW9uLCBib29sZWFuIGlzU29mdCkgewogCQl0aGlzLmxlZnQgPSBpbmZlcmVuY2VW
YXJpYWJsZTsKLQkJdGhpcy5yaWdodCA9IHR5cGVCaW5kaW5nOworCQl0aGlzLnJpZ2h0ID0gdHlw
ZUJpbmRpbmcgIT0gbnVsbCAmJiB0eXBlQmluZGluZy5pc0Fub255bW91c1R5cGUoKSA/IHR5cGVC
aW5kaW5nLnN1cGVyY2xhc3MoKSA6IHR5cGVCaW5kaW5nOwogCQl0aGlzLnJlbGF0aW9uID0gcmVs
YXRpb247CiAJCXRoaXMuaXNTb2Z0ID0gaXNTb2Z0OwogCX0=
</data>

          </attachment>
      

    </bug>

</bugzilla>