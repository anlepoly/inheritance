<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>402819</bug_id>
          
          <creation_ts>2013-03-09 14:28:00 -0500</creation_ts>
          <short_desc>[1.8][formatter] No effect with formatting when cast operator contains intersection of types.</short_desc>
          <delta_ts>2013-03-20 23:53:23 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>400830</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Jesper Moller">jesper</assigned_to>
          
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2228506</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-09 14:28:13 -0500</bug_when>
    <thetext>BETA_JAVA8:

The following program fails to get formatted properly. If you change
the intersection type cast to a normal cast, all is well:

// ----
import java.io.Serializable;
interface I {
	void doit();
}
class X {
	void foo(   int x   ,     int   y ) {}
	I i = (I       &amp;       Serializable   ) () -&gt; {};
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2228507</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-09 14:28:42 -0500</bug_when>
    <thetext>Jesper, Thanks for following up.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2234565</commentid>
    <comment_count>2</comment_count>
      <attachid>228752</attachid>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-03-20 20:22:09 -0400</bug_when>
    <thetext>Created attachment 228752
Test and patch for this

Note that I don&apos;t really like to continue the pattern of inserting 2 lexically identical method implementations for BlockScope and MethodScope, but I guess that&apos;s a case for a different bug.
Since the scopes are going to be null for formatting anyway, we could just delegate to one from the other, couldn&apos;t we?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2234646</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-03-20 23:53:23 -0400</bug_when>
    <thetext>(In reply to comment #2)
&gt; Created attachment 228752 [details]
&gt; Test and patch for this
&gt; 
&gt; Note that I don&apos;t really like to continue the pattern of inserting 2
&gt; lexically identical method implementations for BlockScope and MethodScope,
&gt; but I guess that&apos;s a case for a different bug.

I think you meant BlockScope and ClassScope. I got rid of the latter format visit
method for IntersectionCastTypeReference since it will never be entered.
IntersectionTypeReference can only in a occur in a cast and a cast can
only occur in a MethodScope (which is a BlockScope). See that CastExpression
defines a single traverse method that traverses only in BlockScope.

(we create MethodScopes for field initialization, static blocks and initializer
blocks)

(I also replaced the implementation of ClassScope travese method in IntersectionCastTypeReference with a throw of UOE.)

(In future, please also throw in a few 308 style annotations here and
there in formatter tests - it doesn&apos;t hurt to test them in various contexts)

Patch is good. Fix and tests released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=79363a0cf2877d51c36b4085a9d2b719b103bf6c

Thanks Jesper.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>228752</attachid>
            <date>2013-03-20 20:22:00 -0400</date>
            <delta_ts>2013-03-20 20:22:09 -0400</delta_ts>
            <desc>Test and patch for this</desc>
            <filename>clipboard.txt</filename>
            <type>text/plain</type>
            <size>6945</size>
            <attacher name="Jesper Moller">jesper</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9mb3JtYXR0ZXIvRm9ybWF0dGVySlNSMzM1VGVzdHMuamF2YSBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29y
ZS90ZXN0cy9mb3JtYXR0ZXIvRm9ybWF0dGVySlNSMzM1VGVzdHMuamF2YQppbmRleCAxN2FhZmI5
Li44NDMyZjNjIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvZm9ybWF0dGVyL0Zvcm1hdHRlckpTUjMzNVRl
c3RzLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Zvcm1hdHRlci9Gb3JtYXR0ZXJKU1IzMzVUZXN0cy5qYXZh
CkBAIC0xMSw2ICsxMSw3IEBACiAgKiAKICAqIENvbnRyaWJ1dG9yczoKICAqICAgICBKZXNwZXIg
U3RlZW4gTW9sbGVyIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCisgKiAgICAgICAg
ICAgICAgICAgICAgICAgICAgIENvbnRyaWJ1dGlvbiBmb3IgYnVnIDQwMjgxOQogICoqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKiovCiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmZvcm1h
dHRlcjsKIApAQCAtMTgyLDQgKzE4Myw4IEBAIHB1YmxpYyBjbGFzcyBGb3JtYXR0ZXJKU1IzMzVU
ZXN0cyBleHRlbmRzIEFic3RyYWN0SmF2YU1vZGVsVGVzdHMgewogCQlydW5UZXN0KCJ0ZXN0TWV0
aG9kUmVmZXJlbmNlIiwgIkEuamF2YSIpOy8vJE5PTi1OTFMtMSQgLy8kTk9OLU5MUy0yJAogCX0K
IAorCXB1YmxpYyB2b2lkIHRlc3RCdWc0MDI4MTkoKSB7CisJCXJ1blRlc3QoInRlc3RCdWdzIiwg
IkJ1ZzQwMjgxOS5qYXZhIik7Ly8kTk9OLU5MUy0xJCAvLyROT04tTkxTLTIkCisJfQorCiB9CmRp
ZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC93b3Jrc3BhY2UvRm9y
bWF0dGVySlNSMzM1L3Rlc3RCdWdzL0J1ZzQwMjgxOV9pbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUudGVzdHMubW9kZWwvd29ya3NwYWNlL0Zvcm1hdHRlckpTUjMzNS90ZXN0QnVncy9CdWc0
MDI4MTlfaW4uamF2YQpuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwLi4yZjU1ZjBh
Ci0tLSAvZGV2L251bGwKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvd29y
a3NwYWNlL0Zvcm1hdHRlckpTUjMzNS90ZXN0QnVncy9CdWc0MDI4MTlfaW4uamF2YQpAQCAtMCww
ICsxLDEyIEBACitwYWNrYWdlIHAxLnAyLnRlc3Q7CisKK2ltcG9ydCBqYXZhLmlvLlNlcmlhbGl6
YWJsZTsKK2ludGVyZmFjZSBJIHsKKwl2b2lkIGRvaXQoKTsKK30KK2NsYXNzIEJ1ZzQwMjgxOSB7
CisJTnVtYmVyIG4gPSAoU2VyaWFsaXphYmxlICYgIE51bWJlciApIExvbmcucGFyc2VJbnQoIjAi
KTsKKwkKKwl2b2lkIGZvbyggICBpbnQgeCAgICwgICAgIGludCAgIHkgKSB7fQorCUkgaSA9IChJ
ICAgICAgICYgICAgICAgU2VyaWFsaXphYmxlICAgKSAoKSAtPiB7fTsKK30KZGlmZiAtLWdpdCBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3dvcmtzcGFjZS9Gb3JtYXR0ZXJKU1Iz
MzUvdGVzdEJ1Z3MvQnVnNDAyODE5X291dC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVz
dHMubW9kZWwvd29ya3NwYWNlL0Zvcm1hdHRlckpTUjMzNS90ZXN0QnVncy9CdWc0MDI4MTlfb3V0
LmphdmEKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMC4uMmE3ZTMzZAotLS0gL2Rl
di9udWxsCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3dvcmtzcGFjZS9G
b3JtYXR0ZXJKU1IzMzUvdGVzdEJ1Z3MvQnVnNDAyODE5X291dC5qYXZhCkBAIC0wLDAgKzEsMTcg
QEAKK3BhY2thZ2UgcDEucDIudGVzdDsKKworaW1wb3J0IGphdmEuaW8uU2VyaWFsaXphYmxlOwor
CitpbnRlcmZhY2UgSSB7CisJdm9pZCBkb2l0KCk7Cit9CisKK2NsYXNzIEJ1ZzQwMjgxOSB7CisJ
TnVtYmVyIG4gPSAoU2VyaWFsaXphYmxlICYgTnVtYmVyKSBMb25nLnBhcnNlSW50KCIwIik7CisK
Kwl2b2lkIGZvbyhpbnQgeCwgaW50IHkpIHsKKwl9CisKKwlJIGkgPSAoSSAmIFNlcmlhbGl6YWJs
ZSkgKCkgLT4geworCX07Cit9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9mb3Jt
YXR0ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Zvcm1hdHRlci9Db2RlRm9ybWF0dGVyVmlz
aXRvci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZm9ybWF0dGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9mb3JtYXR0ZXIvQ29kZUZvcm1hdHRlclZpc2l0b3IuamF2YQppbmRleCA1YzA0
MzNlLi40MDUwNTRhIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9mb3JtYXR0ZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Zvcm1hdHRlci9Db2RlRm9ybWF0dGVyVmlzaXRvci5q
YXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Zvcm1hdHRlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvZm9ybWF0dGVyL0NvZGVGb3JtYXR0ZXJWaXNpdG9yLmphdmEKQEAgLTE1LDYgKzE1
LDcgQEAKICAqICAgICBOYW5kYSBGaXJkYXVzaSAtIENvbnRyaWJ1dGlvbiBmb3IgYnVnIDI5ODg0
NAogICogICAgIEplc3BlciBTIE1vbGxlciAtIENvbnRyaWJ1dGlvbiBmb3IgYnVnIDQwMjE3Mwog
ICogICAgICAgICAgICAgICAgICAgICAgIENvbnRyaWJ1dGlvbiBmb3IgYnVnIDQwMjE3NAorICog
ICAgICAgICAgICAgICAgICAgICAgIENvbnRyaWJ1dGlvbiBmb3IgYnVnIDQwMjgxOQogICogICAg
ICAgICAgICAgICAgICAgICAgIENvbnRyaWJ1dGlvbiBmb3IgYnVnIDQwMjg5MgogICoqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKiovCiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5mb3JtYXR0
ZXI7CkBAIC01Nyw4ICs1OCw2IEBAIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29t
cGlsZXIuYXN0LkNvbXBvdW5kQXNzaWdubWVudDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50
ZXJuYWwuY29tcGlsZXIuYXN0LkNvbmRpdGlvbmFsRXhwcmVzc2lvbjsKIGltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkNvbnN0cnVjdG9yRGVjbGFyYXRpb247CiBp
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5Db250aW51ZVN0YXRl
bWVudDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkxhbWJk
YUV4cHJlc3Npb247Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFz
dC5VbmlvblR5cGVSZWZlcmVuY2U7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNv
bXBpbGVyLmFzdC5Eb1N0YXRlbWVudDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwu
Y29tcGlsZXIuYXN0LkRvdWJsZUxpdGVyYWw7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVy
bmFsLmNvbXBpbGVyLmFzdC5FbXB0eVN0YXRlbWVudDsKQEAgLTc2LDcgKzc1LDkgQEAgaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuSW1wb3J0UmVmZXJlbmNlOwog
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuSW5pdGlhbGl6ZXI7
CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5JbnN0YW5jZU9m
RXhwcmVzc2lvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0
LkludExpdGVyYWw7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFz
dC5JbnRlcnNlY3Rpb25DYXN0VHlwZVJlZmVyZW5jZTsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIuYXN0LkxhYmVsZWRTdGF0ZW1lbnQ7CitpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5MYW1iZGFFeHByZXNzaW9uOwogaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuTG9jYWxEZWNsYXJhdGlvbjsKIGlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkxvbmdMaXRlcmFsOwog
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuTWFya2VyQW5ub3Rh
dGlvbjsKQEAgLTExNCw2ICsxMTUsNyBAQCBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFs
LmNvbXBpbGVyLmFzdC5UeXBlRGVjbGFyYXRpb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0Lmlu
dGVybmFsLmNvbXBpbGVyLmFzdC5UeXBlUGFyYW1ldGVyOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5pbnRlcm5hbC5jb21waWxlci5hc3QuVHlwZVJlZmVyZW5jZTsKIGltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LlVuYXJ5RXhwcmVzc2lvbjsKK2ltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LlVuaW9uVHlwZVJlZmVyZW5jZTsKIGlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LldoaWxlU3RhdGVtZW50
OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuV2lsZGNhcmQ7
CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmNsYXNzZm10LkNsYXNz
RmlsZUNvbnN0YW50czsKQEAgLTQyMjksNiArNDIzMSw0MiBAQCBwdWJsaWMgY2xhc3MgQ29kZUZv
cm1hdHRlclZpc2l0b3IgZXh0ZW5kcyBBU1RWaXNpdG9yIHsKIAl9CiAKIAkvKioKKwkgKiBAc2Vl
IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5BU1RWaXNpdG9yI3Zpc2l0KG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuSW50ZXJzZWN0aW9uQ2FzdFR5cGVSZWZl
cmVuY2UsIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuQmxvY2tTY29w
ZSkKKwkgKi8KKwlwdWJsaWMgYm9vbGVhbiB2aXNpdChJbnRlcnNlY3Rpb25DYXN0VHlwZVJlZmVy
ZW5jZSBpbnRlcnNlY3Rpb25DYXN0VHlwZVJlZmVyZW5jZSwgQmxvY2tTY29wZSBzY29wZSkgewor
CQlpbnQgbGVuZ3RoID0gaW50ZXJzZWN0aW9uQ2FzdFR5cGVSZWZlcmVuY2UudHlwZVJlZmVyZW5j
ZXMgPT0gbnVsbCA/IDAgOiBpbnRlcnNlY3Rpb25DYXN0VHlwZVJlZmVyZW5jZS50eXBlUmVmZXJl
bmNlcy5sZW5ndGg7CisJCWZvciAoaW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKKwkJCWlu
dGVyc2VjdGlvbkNhc3RUeXBlUmVmZXJlbmNlLnR5cGVSZWZlcmVuY2VzW2ldLnRyYXZlcnNlKHRo
aXMsIHNjb3BlKTsKKwkJCWlmIChpICE9IGxlbmd0aCAtIDEpIHsKKwkJCQkvLyBCb3Jyb3dpbmcg
dGhlIGZvcm1hdHRpbmcgb3B0aW9uIGZyb20gYmluYXJ5IG9wZXJhdG9ycworCQkJCXRoaXMuc2Ny
aWJlLnByaW50TmV4dFRva2VuKFRlcm1pbmFsVG9rZW5zLlRva2VuTmFtZUFORCwgdGhpcy5wcmVm
ZXJlbmNlcy5pbnNlcnRfc3BhY2VfYmVmb3JlX2JpbmFyeV9vcGVyYXRvcik7CisJCQkJaWYgKHRo
aXMucHJlZmVyZW5jZXMuaW5zZXJ0X3NwYWNlX2FmdGVyX2JpbmFyeV9vcGVyYXRvcikgeworCQkJ
CQl0aGlzLnNjcmliZS5zcGFjZSgpOworCQkJCX0KKwkJCX0KKwkJfQorCQlyZXR1cm4gZmFsc2U7
CisJfQorCisJLyoqCisJICogQHNlZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
QVNUVmlzaXRvciN2aXNpdChvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0Lklu
dGVyc2VjdGlvbkNhc3RUeXBlUmVmZXJlbmNlLCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29t
cGlsZXIubG9va3VwLkNsYXNzU2NvcGUpCisJICovCisJcHVibGljIGJvb2xlYW4gdmlzaXQoSW50
ZXJzZWN0aW9uQ2FzdFR5cGVSZWZlcmVuY2UgaW50ZXJzZWN0aW9uQ2FzdFR5cGVSZWZlcmVuY2Us
IENsYXNzU2NvcGUgc2NvcGUpIHsKKwkJaW50IGxlbmd0aCA9IGludGVyc2VjdGlvbkNhc3RUeXBl
UmVmZXJlbmNlLnR5cGVSZWZlcmVuY2VzID09IG51bGwgPyAwIDogaW50ZXJzZWN0aW9uQ2FzdFR5
cGVSZWZlcmVuY2UudHlwZVJlZmVyZW5jZXMubGVuZ3RoOworCQlmb3IgKGludCBpID0gMDsgaSA8
IGxlbmd0aDsgaSsrKSB7CisJCQlpbnRlcnNlY3Rpb25DYXN0VHlwZVJlZmVyZW5jZS50eXBlUmVm
ZXJlbmNlc1tpXS50cmF2ZXJzZSh0aGlzLCBzY29wZSk7CisJCQlpZiAoaSAhPSBsZW5ndGggLSAx
KSB7CisJCQkJLy8gQm9ycm93aW5nIHRoZSBmb3JtYXR0aW5nIG9wdGlvbiBmcm9tIGJpbmFyeSBv
cGVyYXRvcnMKKwkJCQl0aGlzLnNjcmliZS5wcmludE5leHRUb2tlbihUZXJtaW5hbFRva2Vucy5U
b2tlbk5hbWVBTkQsIHRoaXMucHJlZmVyZW5jZXMuaW5zZXJ0X3NwYWNlX2JlZm9yZV9iaW5hcnlf
b3BlcmF0b3IpOworCQkJCWlmICh0aGlzLnByZWZlcmVuY2VzLmluc2VydF9zcGFjZV9hZnRlcl9i
aW5hcnlfb3BlcmF0b3IpIHsKKwkJCQkJdGhpcy5zY3JpYmUuc3BhY2UoKTsKKwkJCQl9CisJCQl9
CisJCX0KKwkJcmV0dXJuIGZhbHNlOworCX0KKworCS8qKgogCSAqIEBzZWUgb3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvbXBpbGVyLkFTVFZpc2l0b3IjdmlzaXQob3JnLmVjbGlwc2UuamR0Lmlu
dGVybmFsLmNvbXBpbGVyLmFzdC5Jbml0aWFsaXplciwgb3JnLmVjbGlwc2UuamR0LmludGVybmFs
LmNvbXBpbGVyLmxvb2t1cC5NZXRob2RTY29wZSkKIAkgKi8KIAlwdWJsaWMgYm9vbGVhbiB2aXNp
dChJbml0aWFsaXplciBpbml0aWFsaXplciwgTWV0aG9kU2NvcGUgc2NvcGUpIHsK
</data>

          </attachment>
      

    </bug>

</bugzilla>