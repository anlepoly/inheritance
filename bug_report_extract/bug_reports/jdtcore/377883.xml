<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>377883</bug_id>
          
          <creation_ts>2012-04-27 05:31:00 -0400</creation_ts>
          <short_desc>NPE on open Call Hierarchy</short_desc>
          <delta_ts>2014-01-21 05:16:18 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Mac OS X - Carbon (unsup.)</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.4 M5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Sebastian Zarnekow">Sebastian.Zarnekow</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>anchakrk</cc>
    
    <cc>chris.leon</cc>
    
    <cc>cradspieler</cc>
    
    <cc>diogosantana</cc>
    
    <cc>jarthana</cc>
    
    <cc>marc-andre.laperle</cc>
    
    <cc>s</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
    
    <cc>tparker</cc>
          
          <votes>4</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2099450</commentid>
    <comment_count>0</comment_count>
    <who name="Sebastian Zarnekow">Sebastian.Zarnekow</who>
    <bug_when>2012-04-27 05:31:18 -0400</bug_when>
    <thetext>Unfortunately I&apos;ve no save repro for the exception below. What I tried to fix this is a clean build and deleting the contents from the metadata of my workspace. Both without success. I don&apos;t see any error markers in my workspace.

Version info (why tis the build-id different from the v-date in the version?)
Eclipse Java Development Tools

Version: 3.8.0.v20111130-1318-8-8lFpEFNOfwRe0lvGVLmVw9B15B
Build id: I20120314-1800

Message from the newsgroup:

Recently I got the following exception when I tried to use the call hierarchy. I don&apos;t get an error dialog but a message in the error log instead. No callers are found though there are some. Is there something that I can do on my machine to fix that / the index / the project config / whatever may have caused that?

Thanks in advance,
Sebastian

java.lang.NullPointerException
    at org.eclipse.jdt.internal.core.search.matching.ClasspathSourceDirectory.directoryTable(ClasspathSourceDirectory.java:44)
    at org.eclipse.jdt.internal.core.search.matching.ClasspathSourceDirectory.findClass(ClasspathSourceDirectory.java:84)
    at org.eclipse.jdt.internal.core.search.matching.JavaSearchNameEnvironment.findClass(JavaSearchNameEnvironment.java:146)
    at org.eclipse.jdt.internal.core.search.matching.JavaSearchNameEnvironment.findType(JavaSearchNameEnvironment.java:185)
    at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:145)
    at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getTypeOrPackage(PackageBinding.java:197)
    at org.eclipse.jdt.internal.compiler.lookup.Scope.getTypeOrPackage(Scope.java:2787)
    at org.eclipse.jdt.internal.compiler.lookup.Scope.getType(Scope.java:2505)
    at org.eclipse.jdt.internal.core.search.matching.MatchLocator.getType(MatchLocator.java:899)
    at org.eclipse.jdt.internal.core.search.matching.MatchLocator.getMethodBinding0(MatchLocator.java:955)
    at org.eclipse.jdt.internal.core.search.matching.MatchLocator.getMethodBinding(MatchLocator.java:907)
    at org.eclipse.jdt.internal.core.search.matching.MethodLocator.matchMethod(MethodLocator.java:290)
    at org.eclipse.jdt.internal.core.search.matching.MethodLocator.resolveLevel(MethodLocator.java:616)
    at org.eclipse.jdt.internal.core.search.matching.ClassFileMatchLocator.locateMatches(ClassFileMatchLocator.java:209)
    at org.eclipse.jdt.internal.core.search.matching.MatchLocator.process(MatchLocator.java:1697)
    at org.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches(MatchLocator.java:1141)
    at org.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches(MatchLocator.java:1182)
    at org.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches(MatchLocator.java:1299)
    at org.eclipse.jdt.internal.core.search.JavaSearchParticipant.locateMatches(JavaSearchParticipant.java:95)
    at org.eclipse.jdt.internal.core.search.BasicSearchEngine.findMatches(BasicSearchEngine.java:231)
    at org.eclipse.jdt.internal.core.search.BasicSearchEngine.search(BasicSearchEngine.java:515)
    at org.eclipse.jdt.core.search.SearchEngine.search(SearchEngine.java:584)
    at org.eclipse.jdt.internal.corext.callhierarchy.CallerMethodWrapper.findChildren(CallerMethodWrapper.java:155)
    at org.eclipse.jdt.internal.corext.callhierarchy.MethodWrapper.performSearch(MethodWrapper.java:301)
    at org.eclipse.jdt.internal.corext.callhierarchy.MethodWrapper.doFindChildren(MethodWrapper.java:232)
    at org.eclipse.jdt.internal.corext.callhierarchy.MethodWrapper.getCalls(MethodWrapper.java:84)
    at org.eclipse.jdt.internal.ui.callhierarchy.DeferredMethodWrapper.getCalls(DeferredMethodWrapper.java:65)
    at org.eclipse.jdt.internal.ui.callhierarchy.DeferredMethodWrapper.fetchDeferredChildren(DeferredMethodWrapper.java:79)
    at org.eclipse.ui.progress.DeferredTreeContentManager$1.run(DeferredTreeContentManager.java:235)
    at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2099626</commentid>
    <comment_count>1</comment_count>
    <who name="Sebastian Zarnekow">Sebastian.Zarnekow</who>
    <bug_when>2012-04-27 10:29:32 -0400</bug_when>
    <thetext>Is there anything that I can try to diagnose the problematic project / cached data (if any)?..

What I tried so far:
Close all projects and open only the one with the problematic method declaration. 

Close eclipse, delete stuff from .metadata in org.eclipse.jdt.core and org.eclipse.core.resource/...jdt and restart eclipse.

Is there an easy way to debug the situation on my site?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2099760</commentid>
    <comment_count>2</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-04-27 13:01:06 -0400</bug_when>
    <thetext>(In reply to comment #1)
&gt; Is there anything that I can try to diagnose the problematic project / cached
&gt; data (if any)?..
&gt; 
&gt; What I tried so far:
&gt; Close all projects and open only the one with the problematic method
&gt; declaration. 
&gt; 
&gt; Close eclipse, delete stuff from .metadata in org.eclipse.jdt.core and
&gt; org.eclipse.core.resource/...jdt and restart eclipse.
&gt; 
&gt; Is there an easy way to debug the situation on my site?
This shouldn&apos;t be a temporary problem. I think it is the problematic method. What is the name of the method you are looking for? Is that method in a jar? If you could locate that and give me the jar, it will help to reproduce.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2099764</commentid>
    <comment_count>3</comment_count>
    <who name="Sebastian Zarnekow">Sebastian.Zarnekow</who>
    <bug_when>2012-04-27 13:06:15 -0400</bug_when>
    <thetext>It&apos;s QualifiedName#append from http://git.eclipse.org/c/tmf/org.eclipse.xtext.git/tree/plugins/org.eclipse.xtext/src/org/eclipse/xtext/naming/QualifiedName.java

I get the exception with #append(QualifiedName) as well as with #append(String). 

Interestingly, if I do a Find References on those methods I get a lot of potential matches in all sorts of archives. Don&apos;t know if that indicates something or if it is expected behavior.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2149663</commentid>
    <comment_count>4</comment_count>
    <who name="Chris Leon">chris.leon</who>
    <bug_when>2012-08-17 16:28:37 -0400</bug_when>
    <thetext>I&apos;m getting the same exception, when I expand a call hierarchy to see callers of an implementation of org.eclipse.core.runtime.jobs.Job.run(IProgressMonitor).  Also, I get the same exception when I do reference searches for callers of that implementation.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2156303</commentid>
    <comment_count>5</comment_count>
    <who name="Stephanos Piperoglou">s</who>
    <bug_when>2012-09-05 09:08:59 -0400</bug_when>
    <thetext>I&apos;m getting the same error. Exactly identical stack trace whenever I try to do a call hierarchy or refactor&gt;rename on a specific (I&apos;ve only found the one) method in my project. Other methods, even in the same class, seem to work OK. Unfortunately can&apos;t provide a standalone test case as it only seems to happen in my project. Please let me know if there&apos;s anything I can do to get more debugging information.

java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.search.matching.ClasspathSourceDirectory.directoryTable(ClasspathSourceDirectory.java:44)
	at org.eclipse.jdt.internal.core.search.matching.ClasspathSourceDirectory.findClass(ClasspathSourceDirectory.java:84)
	at org.eclipse.jdt.internal.core.search.matching.JavaSearchNameEnvironment.findClass(JavaSearchNameEnvironment.java:146)
	at org.eclipse.jdt.internal.core.search.matching.JavaSearchNameEnvironment.findType(JavaSearchNameEnvironment.java:185)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:145)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getTypeOrPackage(PackageBinding.java:197)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getTypeOrPackage(Scope.java:2787)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getType(Scope.java:2505)
	at org.eclipse.jdt.internal.core.search.matching.MatchLocator.getType(MatchLocator.java:899)
	at org.eclipse.jdt.internal.core.search.matching.MatchLocator.getMethodBinding0(MatchLocator.java:955)
	at org.eclipse.jdt.internal.core.search.matching.MatchLocator.getMethodBinding(MatchLocator.java:907)
	at org.eclipse.jdt.internal.core.search.matching.MethodLocator.matchMethod(MethodLocator.java:327)
	at org.eclipse.jdt.internal.core.search.matching.MethodLocator.resolveLevel(MethodLocator.java:664)
	at org.eclipse.jdt.internal.core.search.matching.ClassFileMatchLocator.locateMatches(ClassFileMatchLocator.java:209)
	at org.eclipse.jdt.internal.core.search.matching.MatchLocator.process(MatchLocator.java:1697)
	at org.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches(MatchLocator.java:1141)
	at org.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches(MatchLocator.java:1182)
	at org.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches(MatchLocator.java:1299)
	at org.eclipse.jdt.internal.core.search.JavaSearchParticipant.locateMatches(JavaSearchParticipant.java:95)
	at org.eclipse.jdt.internal.core.search.BasicSearchEngine.findMatches(BasicSearchEngine.java:231)
	at org.eclipse.jdt.internal.core.search.BasicSearchEngine.search(BasicSearchEngine.java:515)
	at org.eclipse.jdt.core.search.SearchEngine.search(SearchEngine.java:584)
	at org.eclipse.jdt.internal.corext.callhierarchy.CallerMethodWrapper.findChildren(CallerMethodWrapper.java:155)
	at org.eclipse.jdt.internal.corext.callhierarchy.MethodWrapper.performSearch(MethodWrapper.java:301)
	at org.eclipse.jdt.internal.corext.callhierarchy.MethodWrapper.doFindChildren(MethodWrapper.java:232)
	at org.eclipse.jdt.internal.corext.callhierarchy.MethodWrapper.getCalls(MethodWrapper.java:84)
	at org.eclipse.jdt.internal.ui.callhierarchy.DeferredMethodWrapper.getCalls(DeferredMethodWrapper.java:65)
	at org.eclipse.jdt.internal.ui.callhierarchy.DeferredMethodWrapper.fetchDeferredChildren(DeferredMethodWrapper.java:79)
	at org.eclipse.ui.progress.DeferredTreeContentManager$1.run(DeferredTreeContentManager.java:235)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2163389</commentid>
    <comment_count>6</comment_count>
    <who name="Marc-Andre Laperle">marc-andre.laperle</who>
    <bug_when>2012-09-22 15:18:58 -0400</bug_when>
    <thetext>Just got the same exception, I get it every time I open hierarchy on org.eclipse.e4.core.internal.contexts.EclipseContext.set(String name, Object value)

I have org.eclipse.ui.workbench imported from git (master) in my workspace. EclipseContext.class is opened from ui.workbench&apos;s plug-in dependencies.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2319888</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-10-17 17:11:42 -0400</bug_when>
    <thetext>*** Bug 419767 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2319909</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-17 18:26:43 -0400</bug_when>
    <thetext>*** Bug 401272 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2319910</commentid>
    <comment_count>9</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-17 18:28:43 -0400</bug_when>
    <thetext>Anirban, please fix this for M3, this is gather a unch of duplicates.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2323789</commentid>
    <comment_count>10</comment_count>
    <who name="ANIRBAN CHAKRABORTY">anchakrk</who>
    <bug_when>2013-10-28 01:06:23 -0400</bug_when>
    <thetext>Hello,
The bug is not reproducible this side.
I have studied the &apos;directoryTable&apos; method, and there might be a way of suppressing all the indirections by null check, but that will only be a brute force fix, not going into the root of the issue (which would still be lying around).
So, postponing, this for now till the next release.
Thanks
Anirban</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2323790</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-28 01:14:59 -0400</bug_when>
    <thetext>(In reply to Marc-Andre Laperle from comment #6)
&gt; Just got the same exception, I get it every time I open hierarchy on
&gt; org.eclipse.e4.core.internal.contexts.EclipseContext.set(String name, Object
&gt; value)

Anirban, just confirming - are you not able to reproduce with this scenario ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2323792</commentid>
    <comment_count>12</comment_count>
    <who name="ANIRBAN CHAKRABORTY">anchakrk</who>
    <bug_when>2013-10-28 01:49:12 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #11)
&gt; (In reply to Marc-Andre Laperle from comment #6)
&gt; &gt; Just got the same exception, I get it every time I open hierarchy on
&gt; &gt; org.eclipse.e4.core.internal.contexts.EclipseContext.set(String name, Object
&gt; &gt; value)
&gt; 
&gt; Anirban, just confirming - are you not able to reproduce with this scenario ?

For this bug, true.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2335492</commentid>
    <comment_count>13</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-11-28 08:22:06 -0500</bug_when>
    <thetext>Assuming that line number differences are just a matter for JDT versions, here is another repro (on top of the one in bug 401272):

JDT/Core, branch sherrmann/NewTypeAnalysis today&apos;s HEAD.
Select org.eclipse.jdt.internal.compiler.lookup.BoundSet.ThreeSets.copy(boolean)
Invoke refactoring &quot;Change Method Signature&quot;
Remove the only parameter.
Click Preview
Watch the exception:

Caused by: java.lang.NullPointerException
	at org.eclipse.jdt.internal.core.search.matching.ClasspathSourceDirectory.directoryTable(ClasspathSourceDirectory.java:52)
	at org.eclipse.jdt.internal.core.search.matching.ClasspathSourceDirectory.findClass(ClasspathSourceDirectory.java:109)
	at org.eclipse.jdt.internal.core.search.matching.JavaSearchNameEnvironment.findClass(JavaSearchNameEnvironment.java:146)
	at org.eclipse.jdt.internal.core.search.matching.JavaSearchNameEnvironment.findType(JavaSearchNameEnvironment.java:185)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:158)
	at org.eclipse.jdt.internal.compiler.lookup.PackageBinding.getTypeOrPackage(PackageBinding.java:205)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getTypeOrPackage(Scope.java:2900)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getType(Scope.java:2659)
	at org.eclipse.jdt.internal.core.search.matching.MatchLocator.getType(MatchLocator.java:903)
	at org.eclipse.jdt.internal.core.search.matching.MatchLocator.getMethodBinding0(MatchLocator.java:959)
	at org.eclipse.jdt.internal.core.search.matching.MatchLocator.getMethodBinding(MatchLocator.java:911)
	at org.eclipse.jdt.internal.core.search.matching.MethodLocator.matchMethod(MethodLocator.java:327)
	at org.eclipse.jdt.internal.core.search.matching.MethodLocator.resolveLevel(MethodLocator.java:664)
	at org.eclipse.jdt.internal.core.search.matching.ClassFileMatchLocator.locateMatches(ClassFileMatchLocator.java:209)
	at org.eclipse.jdt.internal.core.search.matching.MatchLocator.process(MatchLocator.java:1703)
	at org.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches(MatchLocator.java:1147)
	at org.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches(MatchLocator.java:1188)
	at org.eclipse.jdt.internal.core.search.matching.MatchLocator.locateMatches(MatchLocator.java:1320)
	at org.eclipse.jdt.internal.core.search.JavaSearchParticipant.locateMatches(JavaSearchParticipant.java:95)
	at org.eclipse.jdt.internal.core.search.BasicSearchEngine.findMatches(BasicSearchEngine.java:231)
	at org.eclipse.jdt.internal.core.search.BasicSearchEngine.search(BasicSearchEngine.java:515)
	at org.eclipse.jdt.core.search.SearchEngine.search(SearchEngine.java:584)
	at org.eclipse.jdt.internal.corext.refactoring.RefactoringSearchEngine.internalSearch(RefactoringSearchEngine.java:143)
	at org.eclipse.jdt.internal.corext.refactoring.RefactoringSearchEngine.search(RefactoringSearchEngine.java:130)
	at org.eclipse.jdt.internal.corext.refactoring.structure.ChangeSignatureProcessor.findOccurrences(ChangeSignatureProcessor.java:1622)
	at org.eclipse.jdt.internal.corext.refactoring.structure.ChangeSignatureProcessor.checkFinalConditions(ChangeSignatureProcessor.java:835)
	at org.eclipse.ltk.core.refactoring.participants.ProcessorBasedRefactoring.checkFinalConditions(ProcessorBasedRefactoring.java:224)
	at org.eclipse.ltk.core.refactoring.CheckConditionsOperation.run(CheckConditionsOperation.java:85)
	at org.eclipse.ltk.core.refactoring.CreateChangeOperation.run(CreateChangeOperation.java:121)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2345)
	at org.eclipse.ltk.internal.ui.refactoring.WorkbenchRunnableAdapter.run(WorkbenchRunnableAdapter.java:87)
	at org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:121)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2338498</commentid>
    <comment_count>14</comment_count>
    <who name="ANIRBAN CHAKRABORTY">anchakrk</who>
    <bug_when>2013-12-06 01:55:35 -0500</bug_when>
    <thetext>Hello,
This bug is still not reproducible for me.
I have tried the suggestions in the various comments, and several variations of those.
I&apos;ll wait for a while till there is some concrete info, or I myself bump into this, when I&apos;ll fix that immediately. I&apos;ll really appreciate if some concrete information is available.
I have also studied the function ClasspathSourceDirectory.directoryTable, but there are several possible locations from which this might be triggered (as the line number keeps changing). So, is difficult to do variable-value-backtracking either.
Thanks
Anirban</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2339157</commentid>
    <comment_count>15</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-08 17:59:48 -0500</bug_when>
    <thetext>Regarding reproduction: alas, I see that my own repro doesn&apos;t work in a fresh workspace (although I could see it several times in a row).

Regarding line numbers: ClasspathSourceDirectory.java:52 in the BETA_JAVA8 version that I was using is this line:
  SimpleLookupTable dirTable = (SimpleLookupTable) this.directoryCache.get(qualifiedPackageName);

I checked that the same was at line number 44 in the version of May 2009, which remained unchanged until July 2012.

So let&apos;s assume that indeed #directoryCache is the offending reference.

This field is properly initialized in the constructor and only has two more write accesses:
- reset() - this one is kosher, too
- cleanup() - this one assigns null, likely has a finger in the pie

Given that all call stacks show the MatchLocator we&apos;re looking at one of two call chains:

- ClasspathSourceDirectory.cleanup()
- NameEnvironment.cleanup()
- MatchLocator.initialize()

- ClasspathSourceDirectory.cleanup()
- NameEnvironment.cleanup()
- MatchLocator.locateMatches()

We are looking for one of two possible bugs:
- MatchLocator is accessing its NameEnvironment (and thus its
  ClasspathSourceDirectory) after cleanup
- A reference to either NameEnvironment or ClasspathSourceDirectory has
  leaked to another client / to a different thread

Looking at the code all seems to be well encapsulated, the following fields are only locally accessed:
- ClasspathSourceDirectory#directoryCache
- JavaSearchNameEnvironment#locations
- MatchLocator#nameEnvironment, shared only with the local LookupEnvironment

Here&apos;s an exception:
- NameEnvironment#binaryLocations - is accessed from JavaBuilder and State
This field is one candidate where the suspected cleanup() is sent, but in the MatchLocator scenario we don&apos;t seem to have a plain NameEnvironment.


Is anyone aware of any source of concurrency in this area? I can see none.

Any sharing of name environments? 

I don&apos;t believe the exception stack traces will reveal more information. S.o. was able to get hold of a (indirect) reference to a cleanup&apos;d ClasspathSourceDirectory and or JavaSearchNameEnvironment.

My guess is that this happens in the initial stanza of MatchLocator.initialize()

If s.o. could (concurrently?) grab the #nameEnvironment between cleanup() and fresh assignment, that instance would be FUBAR.

Although I don&apos;t see the source of concurrency, we could just guess and put those three lines into a synchronized block, to make swapping of the name environment an atomic operation. Shouldn&apos;t hurt anyway, I&apos;d say...


Point against: The problem was more sticky than concurrency problems typically are ... I wonder if anybody saw the same problem persist across an Eclipse restart cycle???</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2340580</commentid>
    <comment_count>16</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-12-11 10:50:14 -0500</bug_when>
    <thetext>Ran out of time, moving to M5.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2340831</commentid>
    <comment_count>17</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-11 18:49:07 -0500</bug_when>
    <thetext>Actually, this similar Groovy-Eclipse bug gives a very promising explanation: http://jira.codehaus.org/browse/GRECLIPSE-1521?focusedCommentId=315908&amp;page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-315908

As I interpret that bug an AST node may keep a scope-&gt;environment-&gt;nameEnvironment ... chain longer than expected and use the environment for lookup past its best-before date.

The AST-&gt;scope reference is the link that&apos;s supposed to be severed at the end of compile. Let&apos;s look for any such reference that doesn&apos;t play by the rule.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2344017</commentid>
    <comment_count>18</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-19 13:32:57 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #17)
&gt; The AST-&gt;scope reference is the link that&apos;s supposed to be severed at the
&gt; end of compile. Let&apos;s look for any such reference that doesn&apos;t play by the
&gt; rule.

As per bug 401272 comment 16 I found the leaking reference: not AST-&gt;scope but MatchLocator.unitScope.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2351498</commentid>
    <comment_count>19</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-18 12:19:41 -0500</bug_when>
    <thetext>An NPE with several duplicates calls for action. Given all the analysis we already have here and in bug 401272 the tricky part was only in creating a reproducing JUnit.

I managed to do so (see also comments inside JavaSearchBugsTests2.testBug401272()). Backed by this test the fix was close to trivial.

Released for 4.4 M5 via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=730ec55536b5ef142bbace222c0f6429c2cdd532</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2352300</commentid>
    <comment_count>20</comment_count>
    <who name="ANIRBAN CHAKRABORTY">anchakrk</who>
    <bug_when>2014-01-21 05:16:18 -0500</bug_when>
    <thetext>Verified for 4.4 M5 with build I20140120-2000-win32-x86_64</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>