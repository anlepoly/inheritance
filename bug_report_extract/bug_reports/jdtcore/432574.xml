<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>432574</bug_id>
          
          <creation_ts>2014-04-10 22:49:00 -0400</creation_ts>
          <short_desc>[1.8][compiler] Bogus compiler errors with annotations on ellipsis in lambda expression</short_desc>
          <delta_ts>2014-12-24 03:55:43 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.5 M5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Manju Mathew">manju656</reporter>
          <assigned_to name="Szymon Ptaszkiewicz">szymon.ptaszkiewicz</assigned_to>
          <cc>jarthana</cc>
    
    <cc>manpalat</cc>
    
    <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
    
    <cc>szymon.ptaszkiewicz</cc>
          <qa_contact name="Stephan Herrmann">stephan.herrmann</qa_contact>
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2387846</commentid>
    <comment_count>0</comment_count>
    <who name="Manju Mathew">manju656</who>
    <bug_when>2014-04-10 22:49:40 -0400</bug_when>
    <thetext>Below code snippet was executed successfully using Java 1.8 b132 using javac, but it shows multiple compiler errors in Eclipse.

import java.lang.annotation.ElementType;
import java.lang.annotation.Target;

public class C2 {

	FI22 fi33= (String @T1[] @T1... x) -&gt; {};
	
	private void boo() {
				
		FI22 fi333= (String @T1[] @T1... x) -&gt; {};
	}
	public static void main(String[] args) {
		System.out.println(&quot;Compiled and Executed using javac!&quot;);
	}
}

interface FI22 {
	void foo(String[]... x);
}

@Target(ElementType.TYPE_USE)
@interface T1 {
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2388166</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-04-11 13:02:00 -0400</bug_when>
    <thetext>Wow, parser doesn&apos;t like type annotation on &quot;...&quot; in parameter list of lambda.

(And it gets badly out of sync reporting 12 secondary errors, too).

This is surprising since lambdas use the same NT FormalParameterListopt as is used for methods. 

Is some vanguard parser getting confused?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2389110</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-04-15 05:32:58 -0400</bug_when>
    <thetext>Thanks Manju. This is an interesting problem. It has a fairly easy fix, but I would
defer it to 4.5 unless we hear from some users. Combination of lambda + type
annotation + variable arity tells me this may be a while, but who knows.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2445942</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-01 04:11:10 -0400</bug_when>
    <thetext>Don&apos;t expect to get to this anytime soon.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2487587</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-11-23 09:26:28 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #2)
&gt; It has a fairly easy fix

Can you give a hint, please? :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2489569</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-27 01:19:38 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #4)
&gt; (In reply to Srikanth Sankaran from comment #2)
&gt; &gt; It has a fairly easy fix
&gt; 
&gt; Can you give a hint, please? :)

Grrr, my mind is blank now, &quot;For this, I must have found a truly wonderful fix, 
but the margin must have been too small to contain it.&quot; :-( Sincere apologies.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2489710</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-11-27 07:13:24 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #5)
&gt; (In reply to Stephan Herrmann from comment #4)
&gt; &gt; (In reply to Srikanth Sankaran from comment #2)
&gt; &gt; &gt; It has a fairly easy fix
&gt; &gt; 
&gt; &gt; Can you give a hint, please? :)
&gt; 
&gt; Grrr, my mind is blank now, &quot;For this, I must have found a truly wonderful
&gt; fix, 
&gt; but the margin must have been too small to contain it.&quot; :-( Sincere
&gt; apologies.

Thanks, Pierre :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2493948</commentid>
    <comment_count>7</comment_count>
    <who name="Szymon Ptaszkiewicz">szymon.ptaszkiewicz</who>
    <bug_when>2014-12-08 10:16:18 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #1)
&gt; Wow, parser doesn&apos;t like type annotation on &quot;...&quot; in parameter list of
&gt; lambda.
&gt; 
&gt; (And it gets badly out of sync reporting 12 secondary errors, too).
&gt; 
&gt; This is surprising since lambdas use the same NT FormalParameterListopt as
&gt; is used for methods. 
&gt; 
&gt; Is some vanguard parser getting confused?

I had a look at this and it seems that the first problem that occurs during parsing is that we get

Shift        - (()

instead of

Shift        - (BeginLambda)

which should probably come before Shift        - (() if the beginning of lambda was correctly disambiguated. Disambiguation is done by lookahead parsing using VanguardParser. Inside VanguardParser if we reach type annotation on ellipsis, we would need another disambiguation. However, VanguardParser does not perform any disambiguation, so disambiguating type annotation on ellipsis fails and so the whole disambiguation of the beginning of lambda fails. It is likely the reason why lambda is not correctly identified in the snippet from comment 0.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2494007</commentid>
    <comment_count>8</comment_count>
    <who name="Szymon Ptaszkiewicz">szymon.ptaszkiewicz</who>
    <bug_when>2014-12-08 11:18:35 -0500</bug_when>
    <thetext>I have verified that if I cheat inside Scanner.disambiguatedToken(int) and pretend that the disambiguated token is TokenNameBeginLambda in the right moment, then parsing finishes successfully and there are no errors.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2494605</commentid>
    <comment_count>9</comment_count>
    <who name="Szymon Ptaszkiewicz">szymon.ptaszkiewicz</who>
    <bug_when>2014-12-09 10:24:09 -0500</bug_when>
    <thetext>Here is a patch that solves the problem by resolving disambiguation within another disambiguation:

https://git.eclipse.org/r/#/c/37875/

I am not sure if this is anywhere close to what Pierre had in mind but it looks fairly simple. If the fix looks good, please let me know where I should put a test for that and I will add it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2494899</commentid>
    <comment_count>10</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-12-09 18:50:08 -0500</bug_when>
    <thetext>Hi Szymon,

Since Pierre de Fermat isn&apos;t with the team any longer :) your patch is highly welcomed. Let&apos;s see who is first to have a look at it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2495082</commentid>
    <comment_count>11</comment_count>
    <who name="Szymon Ptaszkiewicz">szymon.ptaszkiewicz</who>
    <bug_when>2014-12-10 05:09:45 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #10)
&gt; Hi Szymon,
&gt; 
&gt; Since Pierre de Fermat isn&apos;t with the team any longer :) your patch is
&gt; highly welcomed. Let&apos;s see who is first to have a look at it.

Thanks! I will look around at the JDT/Core bugzilla if there are other low-hanging fruits ;)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2496864</commentid>
    <comment_count>12</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-12-15 01:09:09 -0500</bug_when>
    <thetext>(In reply to Szymon Ptaszkiewicz from comment #9)
&gt; Here is a patch that solves the problem by resolving disambiguation within
&gt; another disambiguation:
&gt; 
&gt; https://git.eclipse.org/r/#/c/37875/
&gt; 
&gt; I am not sure if this is anywhere close to what Pierre had in mind but it
&gt; looks fairly simple. If the fix looks good, please let me know where I
&gt; should put a test for that and I will add it.

I guess I will leave the real review to Stephan or perhaps Sasi, as I am not very familiar with this part of the code at all. Not that I have a reason to think but getNextToken() being the busiest part of our code, we should make sure that performance of the parser is not affected. At this point, all I can tell is this patch introduces three new warnings about a local variable hiding a field.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2497089</commentid>
    <comment_count>13</comment_count>
    <who name="Szymon Ptaszkiewicz">szymon.ptaszkiewicz</who>
    <bug_when>2014-12-15 08:47:04 -0500</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #12)
&gt; I guess I will leave the real review to Stephan or perhaps Sasi, as I am not
&gt; very familiar with this part of the code at all. Not that I have a reason to
&gt; think but getNextToken() being the busiest part of our code, we should make
&gt; sure that performance of the parser is not affected.

The change affects only VanguardScanner.getNextToken() which is used only when there is a need for token disambiguation. The additional work added there is limited only to the case that really needs additional disambiguation which is type annotation on ellipsis in parameter list of lambda (see the check with Goal.LambdaParameterListGoal). If we are not disambiguating lambda parameter list, there is no additional work.

&gt; At this point, all I can tell is this patch introduces three new warnings about
&gt; a local variable hiding a field.

I have just double-checked and I don&apos;t see any new warnings and there are no new variables that hide any field. Are you sure this is about this change?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2497421</commentid>
    <comment_count>14</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-12-16 05:17:54 -0500</bug_when>
    <thetext>(In reply to Szymon Ptaszkiewicz from comment #13)
&gt; I have just double-checked and I don&apos;t see any new warnings and there are no
&gt; new variables that hide any field. Are you sure this is about this change?

I recall Srikanth complaining about my eye sight, so I could be wrong. Nevertheless, I do see the warnings in RecoveryScanner#getNextToken0 because your fix changed the visibility of Scanner#nextToken.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2497453</commentid>
    <comment_count>15</comment_count>
    <who name="Szymon Ptaszkiewicz">szymon.ptaszkiewicz</who>
    <bug_when>2014-12-16 06:01:16 -0500</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #14)
&gt; (In reply to Szymon Ptaszkiewicz from comment #13)
&gt; &gt; I have just double-checked and I don&apos;t see any new warnings and there are no
&gt; &gt; new variables that hide any field. Are you sure this is about this change?
&gt; 
&gt; I recall Srikanth complaining about my eye sight, so I could be wrong.
&gt; Nevertheless, I do see the warnings in RecoveryScanner#getNextToken0 because
&gt; your fix changed the visibility of Scanner#nextToken.

You are right! I haven&apos;t seen those warnings before. New warnings are definitely unwanted although in this case they seem to be harmless. I am not sure if we should change it so I will wait for review and adjust the fix as advised. Thank you for noticing the warnings, I guess there is nothing wrong with your eye sight :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2497810</commentid>
    <comment_count>16</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-12-16 17:03:14 -0500</bug_when>
    <thetext>Patch looks good to me.

Performance-wise I can confirm a low footprint: the additional code is executed only by a small number of our existing tests.

I was briefly wondering whether other combinations of ambiguity could nest, but looking at the list of Scanner.Goal;s I could find none. In particular, 3 nested parsers seems to be the hard upper limit.

As for the new warnings I suggest to rename the (existing) local variables in RecoveryScanner to, e.g., pendingToken (since the name of our game is &quot;disambiguation&quot; to begin with :) ).

Finally, I suggest you work the new test into org.eclipse.jdt.core.tests.compiler.parser.TypeAnnotationSyntaxTest.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2498057</commentid>
    <comment_count>17</comment_count>
    <who name="Szymon Ptaszkiewicz">szymon.ptaszkiewicz</who>
    <bug_when>2014-12-17 08:20:13 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #16)

Thank you for the feedback. I have pushed updated patch set with the recommended changes.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2498631</commentid>
    <comment_count>18</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-12-18 09:11:58 -0500</bug_when>
    <thetext>(In reply to Szymon Ptaszkiewicz from comment #17)
&gt; (In reply to Stephan Herrmann from comment #16)
&gt; 
&gt; Thank you for the feedback. I have pushed updated patch set with the
&gt; recommended changes.

Hudson an me agreed to the patch, released for 4.5 M5 via commit af6229e1f4eaf7439cdd509f508e69eff4ec6844.

Thanks!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2500446</commentid>
    <comment_count>19</comment_count>
    <who name="Szymon Ptaszkiewicz">szymon.ptaszkiewicz</who>
    <bug_when>2014-12-24 03:55:43 -0500</bug_when>
    <thetext>Verified in I20141223-0800.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>