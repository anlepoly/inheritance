<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>426515</bug_id>
          
          <creation_ts>2014-01-23 16:25:00 -0500</creation_ts>
          <short_desc>[1.8][dom ast] Bindings from reconciler are sometimes missing type annotations</short_desc>
          <delta_ts>2014-02-21 05:27:25 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Markus Keller">markus_keller</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>manju656</cc>
    
    <cc>manpalat</cc>
    
    <cc>noopur_gupta</cc>
    
    <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2353853</commentid>
    <comment_count>0</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-01-23 16:25:09 -0500</bug_when>
    <thetext>Bindings from reconciler are sometimes missing type annotations.

- launch a clean runtime workspace with a 1.8 JRE
- copy all the code below to the clipboard and paste it into the Package Explorer in one batch
- put the caret after &quot;bug.imports.Outer.getInner();&quot; and press Ctrl+1, Enter

=&gt; The created field type is &quot;@A(1) Outer&lt;Random&gt;.Inner&lt;Date&gt; inner&quot;, which misses most of the type annotations.

The problem is that the AST from the SharedASTProvider is missing these type annotations in the binding for the ...getInner() expression. This can also be seen in the ASTView if you switch to &quot;Use SharedASTProvider.getAST&quot; or &quot;Use ICompilationUnit.reconcile&quot;.

Workaround to get correct bindings: Switch to another Java editor and then switch back. In this case, an ASTParser is used to feed the SharedASTProvider. If you modify the active editor, then the bindings become wrong again.


=============================
package bug.imports;

import java.lang.annotation.ElementType;
import java.lang.annotation.Target;

@Target(ElementType.TYPE_USE)  
public @interface A {
    int value() default 0;
}

package bug.imports;

public class Outer&lt;O&gt; {
    public class Inner&lt;I&gt; {
    }
    
    public static @A(1) Outer&lt;java.util.@A(2) Random&gt;.@A(3) Inner&lt;java.util.@A(4) Date&gt; getInner() {
        return null;
    }
}

package bug.imports;

public class Client {
//    class Random {}
//    class Date {}
//    class Outer {}
//    class Inner {}
//    class A {}
    
    void foo() {
        bug.imports.Outer.getInner();
    }
}

======================================</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2355268</commentid>
    <comment_count>1</comment_count>
    <who name="Manju Mathew">manju656</who>
    <bug_when>2014-01-28 04:06:43 -0500</bug_when>
    <thetext>I came across the below scenario:
@Target({ TYPE_USE })
public @interface ReadOnly {

}

public interface I1 {
	public @ReadOnly String bar2(@ReadOnly String s, @ReadOnly List l1, @ReadOnly List&lt;String&gt; l2);
}


public class A implements I1, InnerA { //Invoke quick assist here


	}
interface InnerA{
public @ReadOnly String bar1(@ReadOnly String s, @ReadOnly List&lt;Object&gt; l1, @ReadOnly List&lt;String&gt; l2);
}

When Add UnImplemented method quick fix is invoked, the methods from I1 do not carry the type annotation. Found that ITypeBinding#getDeclaredMethods()do not have the type annottaion. Will this case be handled with this bug or should a separate bug be raised?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2355290</commentid>
    <comment_count>2</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-01-28 04:51:58 -0500</bug_when>
    <thetext>(In reply to Manju Mathew from comment #1)
&gt; Will this
&gt; case be handled with this bug or should a separate bug be raised?

I don&apos;t know at the moment. I will raise a separate bug if required later.

For the original reported issue, it looks like the ITypeBinding is holding onto a RawTypeBinding. I will investigate further.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2355352</commentid>
    <comment_count>3</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-01-28 06:56:30 -0500</bug_when>
    <thetext>(In reply to Manju Mathew from comment #1)
&gt; When Add UnImplemented method quick fix is invoked, the methods from I1 do
&gt; not carry the type annotation. Found that
&gt; ITypeBinding#getDeclaredMethods()do not have the type annottaion. Will this
&gt; case be handled with this bug or should a separate bug be raised?

I don&apos;t know if I am doing the right thing, but I can see the type annotations being picked both for return type as well as parameters. What result are you seeing?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2355359</commentid>
    <comment_count>4</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-01-28 07:22:51 -0500</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #3)
&gt; I don&apos;t know if I am doing the right thing, but I can see the type
&gt; annotations being picked both for return type as well as parameters. What
&gt; result are you seeing?

I didn&apos;t put all the classes/interfaces in separate CUs. Does it matter?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2355364</commentid>
    <comment_count>5</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-01-28 07:27:22 -0500</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #4)
&gt; I didn&apos;t put all the classes/interfaces in separate CUs. Does it matter?

It might well be. I see the same behavior for the issue reported in comment #0 as well. If the method being invoked comes from the same compilation unit, the local-variable/field gets all the type annotations. But not so when it comes from a different file.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2355500</commentid>
    <comment_count>6</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-01-28 11:04:26 -0500</bug_when>
    <thetext>Here&apos;s what happens when ASTParser#createAST() is called:

When the CU is being constructed, it takes the following path:

	CommentRecorderParser(Parser).parse(MethodDeclaration, CompilationUnitDeclaration) 
	MethodDeclaration.parseStatements() line: 188	
	TypeDeclaration.parseMethods() line: 877	
	CommentRecorderParser(Parser).getMethodBodies() line: 10026	
	CompilationUnitResolver.resolve() line: 1163	
	CompilationUnitResolver.resolve() line: 693	
	ASTParser.internalCreateAST() line: 1187	
	ASTParser.createAST() line: 813	

When the method is declared in another CU, the statement nodes are constructed without the annotations.

Srikanth, any idea what might be going on?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2355710</commentid>
    <comment_count>7</comment_count>
    <who name="Manju Mathew">manju656</who>
    <bug_when>2014-01-28 18:19:15 -0500</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #5)
&gt; (In reply to Jayaprakash Arthanareeswaran from comment #4)
&gt; &gt; I didn&apos;t put all the classes/interfaces in separate CUs. Does it matter?

The annotation interface ReadOnly and I1 should be in its own separate CU were as InnerA is declared within class A. 

&gt; It might well be. I see the same behavior for the issue reported in comment
&gt; #0 as well. If the method being invoked comes from the same compilation
&gt; unit, the local-variable/field gets all the type annotations. But not so
&gt; when it comes from a different file.
Right, methods from InnerA carries all the annotation but I1 do not. But if we replace the ReadOnly annotation with org.eclipse.jdt.annotation.NonNull or Nullable annotations in I1, then the type binding contain the required annotation. The problem seems to be with user defined annotations.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2355739</commentid>
    <comment_count>8</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-01-29 00:31:15 -0500</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #6)
&gt; Srikanth, any idea what might be going on?

Why am I not surprised. The signature of the java model says it all:

char[] ISourceMethod.getReturnTypeName()

Obviously when the source type converter reconstruct the ast, it will never have the annotations. But bug 405843 should have addressed this by setting TypeInfo#typeAnnotated and thus using the parser instead of SourceTypeConverter. But obviously there&apos;s some scenario where it&apos;s not working as expected. Continuing to investigate.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2355742</commentid>
    <comment_count>9</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-01-29 01:05:33 -0500</bug_when>
    <thetext>I can make the testcase from comment #0 pass when I add 10 or more annotations to Outer. However, it doesn&apos;t work when there is a presence of a type annotation. I noticed that the TypeDeclaration, MethodDeclaration etc. that SourceElementNotifier receives do not have the HasTypeAnnotations bit set, nor do the declarations have their bindings resolved.

Srikanth, any idea?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2356370</commentid>
    <comment_count>10</comment_count>
      <attachid>239461</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-30 00:56:09 -0500</bug_when>
    <thetext>Created attachment 239461
Patch that works but not automation tested.

Jay, thanks for a clear and correct analysis. Just one nit: It is not that 
annotations were missing in SEP parsed file, but the HastTypeAnnotations bit 
is getting set in MethodDeclaration.resolveStatements() - too late/unreachable 
for clients that don&apos;t call resolve.

Please take it forward by (a) adding junit, (b) removing the line 199 of
MethodDeclaration.java and making sure nothing breaks. TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2356371</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-30 00:57:54 -0500</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #9)

&gt;nor do the declarations have their bindings resolved.

This is by client request.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2356377</commentid>
    <comment_count>12</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-30 01:30:59 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #10)

&gt; Please take it forward by (a) adding junit, (b) removing the line 199 of
&gt; MethodDeclaration.java and making sure nothing breaks. TIA.

I may have mispoken - ignore (b) - it is harmless anyways.

If coming up with a junit is going to take time due to SR2 testing or other
tasks:

    - Please release the patch after eyeballing the changes and verifying the fix,
so UI work can be unblocked.
    - Lower importance to normal.
    - Leave the bug open until a junit is available.

Thanks!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2356412</commentid>
    <comment_count>13</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-01-30 03:32:38 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #10)
&gt; Created attachment 239461 [details]
&gt; Patch that works but not automation tested.

All existing tests pass and the fix has been released via:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=673c0ef3c8529bb5f21f9c2d4f6ecb473d4a323c

I will keep the bug open and look to add new tests in a day or two.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2357058</commentid>
    <comment_count>14</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-01-31 05:17:18 -0500</bug_when>
    <thetext>(In reply to Manju Mathew from comment #1)
&gt; I came across the below scenario:

Manju, this appears to be working as expected now. I can see that the type annotations are being brought into the implemented method.

But I found a bigger problem. Now the reconciler complains that the overridden method has the same erasure but doesn&apos;t override it. Will raise a separate bug for this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2357070</commentid>
    <comment_count>15</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-01-31 05:37:37 -0500</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #14)
&gt; But I found a bigger problem. Now the reconciler complains that the
&gt; overridden method has the same erasure but doesn&apos;t override it. Will raise a
&gt; separate bug for this.

If found relevant, we can use this bug itself, as it&apos;s still open.

The following files should be in their own files:

I1.java
public interface I1 {
	public String bar2( String s, @Marker List l1, List&lt;String&gt; l2);
}

-------------
A.java

public class A implements I1 {

	@Override
	public String bar2(String s, @Marker List l1, List&lt;String&gt; l2) {
		return null;
	}
}

Doing a clean build, you can notice there&apos;s no error. But when you touch A.java in the editor, the reconciler reports error.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2357091</commentid>
    <comment_count>16</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-31 05:45:46 -0500</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #15)
&gt; (In reply to Jayaprakash Arthanareeswaran from comment #14)
&gt; &gt; But I found a bigger problem. Now the reconciler complains that the
&gt; &gt; overridden method has the same erasure but doesn&apos;t override it. Will raise a
&gt; &gt; separate bug for this.
&gt; 
&gt; If found relevant, we can use this bug itself, as it&apos;s still open.

No, it is better to raise a different bug. 

See also: https://bugs.eclipse.org/bugs/show_bug.cgi?id=330537#c3</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2357105</commentid>
    <comment_count>17</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-01-31 06:05:50 -0500</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #15)
&gt; If found relevant, we can use this bug itself, as it&apos;s still open.

Just wanted to confirm this is not a recent one. I can confirm now that this has nothing to do with this bug or recent commit. I have raised bug 427105.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2358298</commentid>
    <comment_count>18</comment_count>
    <who name="Manju Mathew">manju656</who>
    <bug_when>2014-02-03 23:21:24 -0500</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #14)
&gt; Manju, this appears to be working as expected now. I can see that the type
&gt; annotations are being brought into the implemented method.

After pulling changes i tested and it did not work as expected. Hence raised bug 427337 to track it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2358919</commentid>
    <comment_count>19</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-02-05 03:17:24 -0500</bug_when>
    <thetext>Regression test released via:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=87b34be930dd9e470c5a81364392c915d2db0f45</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2366636</commentid>
    <comment_count>20</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-02-21 05:27:10 -0500</bug_when>
    <thetext>Following instructions as specified in Comment 0 all the type annotations are correctly created with the local field variable.
@A(1)
Outer&lt;@A(2) Random&gt;.@A(3) Inner&lt;@A(4) Date&gt; inner</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2366638</commentid>
    <comment_count>21</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-02-21 05:27:25 -0500</bug_when>
    <thetext>Verified as working for Eclipse + Java 8 RC1 Eclipse Kepler 4.3.2(RC4) Build id: M20140212-0800 +  
Eclipse Java Development Tools Patch for Java 8 Support (BETA)	
1.0.0.v20140220-2054.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>239461</attachid>
            <date>2014-01-30 00:56:00 -0500</date>
            <delta_ts>2014-01-30 00:56:09 -0500</delta_ts>
            <desc>Patch that works but not automation tested.</desc>
            <filename>Jay.patch</filename>
            <type>text/plain</type>
            <size>2991</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvZGVhc3Npc3Qvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvZGVhc3Npc3QvY29tcGxldGUvQ29tcGxldGlvblBhcnNlci5qYXZhIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29kZWFzc2lzdC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29kZWFzc2lzdC9jb21wbGV0ZS9Db21wbGV0aW9uUGFyc2VyLmphdmEKaW5kZXggMjc2MzJlNC4u
NTRhMjYyNiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29kZWFzc2lzdC9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29kZWFzc2lzdC9jb21wbGV0ZS9Db21wbGV0aW9uUGFyc2Vy
LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29kZWFzc2lzdC9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29kZWFzc2lzdC9jb21wbGV0ZS9Db21wbGV0aW9uUGFyc2VyLmphdmEKQEAg
LTMwMjQsNiArMzAyNCw3IEBACiAJCXRoaXMuaWRlbnRpZmllckxlbmd0aFB0ci0tOwogCQkvL3R5
cGUKIAkJbWQucmV0dXJuVHlwZSA9IGdldFR5cGVSZWZlcmVuY2UodGhpcy5pbnRTdGFja1t0aGlz
LmludFB0ci0tXSk7CisJCW1kLmJpdHMgfD0gKG1kLnJldHVyblR5cGUuYml0cyAmIEFTVE5vZGUu
SGFzVHlwZUFubm90YXRpb25zKTsKIAkJLy9tb2RpZmllcnMKIAkJbWQuZGVjbGFyYXRpb25Tb3Vy
Y2VTdGFydCA9IHRoaXMuaW50U3RhY2tbdGhpcy5pbnRQdHItLV07CiAJCW1kLm1vZGlmaWVycyA9
IHRoaXMuaW50U3RhY2tbdGhpcy5pbnRQdHItLV07CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcGFyc2Vy
L1BhcnNlci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL3BhcnNlci9QYXJzZXIuamF2YQppbmRleCBhMzRmMDM3Li45
MWRmNTQzIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcGFyc2VyL1BhcnNlci5qYXZhCisrKyBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9wYXJzZXIvUGFyc2VyLmphdmEKQEAgLTQ5OTQsNiArNDk5NCw3IEBACiAJaWYgKGV4dGVuZGVk
RGltZW5zaW9ucyAhPSAwKSB7CiAJCW1kLnNvdXJjZUVuZCA9IHRoaXMuZW5kUG9zaXRpb247CiAJ
CW1kLnJldHVyblR5cGUgPSBhdWdtZW50VHlwZVdpdGhBZGRpdGlvbmFsRGltZW5zaW9ucyhtZC5y
ZXR1cm5UeXBlLCBleHRlbmRlZERpbWVuc2lvbnMsIGdldEFubm90YXRpb25zT25EaW1lbnNpb25z
KGV4dGVuZGVkRGltZW5zaW9ucyksIGZhbHNlKTsKKwkJbWQuYml0cyB8PSAobWQucmV0dXJuVHlw
ZS5iaXRzICYgQVNUTm9kZS5IYXNUeXBlQW5ub3RhdGlvbnMpOwogCQlpZiAodGhpcy5jdXJyZW50
VG9rZW4gPT0gVG9rZW5OYW1lTEJSQUNFKXsKIAkJCW1kLmJvZHlTdGFydCA9IHRoaXMuZW5kUG9z
aXRpb24gKyAxOwogCQl9CkBAIC01MDIxLDYgKzUwMjIsNyBAQAogCXRoaXMuaWRlbnRpZmllckxl
bmd0aFB0ci0tOwogCS8vdHlwZQogCW1kLnJldHVyblR5cGUgPSBnZXRUeXBlUmVmZXJlbmNlKHRo
aXMuaW50U3RhY2tbdGhpcy5pbnRQdHItLV0pOworCW1kLmJpdHMgfD0gKG1kLnJldHVyblR5cGUu
Yml0cyAmIEFTVE5vZGUuSGFzVHlwZUFubm90YXRpb25zKTsKIAkvL21vZGlmaWVycwogCW1kLmRl
Y2xhcmF0aW9uU291cmNlU3RhcnQgPSB0aGlzLmludFN0YWNrW3RoaXMuaW50UHRyLS1dOwogCW1k
Lm1vZGlmaWVycyA9IHRoaXMuaW50U3RhY2tbdGhpcy5pbnRQdHItLV07CmRpZmYgLS1naXQgYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvRG9jdW1lbnRFbGVtZW50UGFyc2VyLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2Rl
bC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvRG9jdW1lbnRFbGVtZW50UGFyc2Vy
LmphdmEKaW5kZXggYzA1YmE5Ny4uZmUzMTYxOSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL0RvY3VtZW50RWxl
bWVudFBhcnNlci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9Eb2N1bWVudEVsZW1lbnRQYXJzZXIuamF2YQpAQCAt
MTAzMiw2ICsxMDMyLDcgQEAKIAlpZiAoZXh0ZW5kZWREaW1zICE9IDApIHsKIAkJbWQuc291cmNl
RW5kID0gdGhpcy5lbmRQb3NpdGlvbjsKIAkJbWQucmV0dXJuVHlwZSA9IGF1Z21lbnRUeXBlV2l0
aEFkZGl0aW9uYWxEaW1lbnNpb25zKG1kLnJldHVyblR5cGUsIGV4dGVuZGVkRGltcywgZ2V0QW5u
b3RhdGlvbnNPbkRpbWVuc2lvbnMoZXh0ZW5kZWREaW1zKSwgZmFsc2UpOworCQltZC5iaXRzIHw9
IChtZC5yZXR1cm5UeXBlLmJpdHMgJiBBU1ROb2RlLkhhc1R5cGVBbm5vdGF0aW9ucyk7CiAJCWlm
ICh0aGlzLmN1cnJlbnRUb2tlbiA9PSBUb2tlbk5hbWVMQlJBQ0UpIHsKIAkJCW1kLmJvZHlTdGFy
dCA9IHRoaXMuZW5kUG9zaXRpb24gKyAxOwogCQl9CkBAIC0xMDUxLDYgKzEwNTIsNyBAQAogCXRo
aXMuaWRlbnRpZmllckxlbmd0aFB0ci0tOwogCS8vdHlwZQogCW1kLnJldHVyblR5cGUgPSBnZXRU
eXBlUmVmZXJlbmNlKHRoaXMudHlwZURpbXMgPSB0aGlzLmludFN0YWNrW3RoaXMuaW50UHRyLS1d
KTsKKwltZC5iaXRzIHw9IChtZC5yZXR1cm5UeXBlLmJpdHMgJiBBU1ROb2RlLkhhc1R5cGVBbm5v
dGF0aW9ucyk7CiAJLy9tb2RpZmllcnMKIAltZC5kZWNsYXJhdGlvblNvdXJjZVN0YXJ0ID0gdGhp
cy5pbnRTdGFja1t0aGlzLmludFB0ci0tXTsKIAltZC5tb2RpZmllcnNTb3VyY2VTdGFydCA9IHRo
aXMuaW50U3RhY2tbdGhpcy5pbnRQdHItLV07
</data>

          </attachment>
      

    </bug>

</bugzilla>