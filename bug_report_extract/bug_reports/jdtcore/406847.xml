<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>406847</bug_id>
          
          <creation_ts>2013-04-29 17:28:00 -0400</creation_ts>
          <short_desc>[1.8] lambda code compiles but then produces IncompatibleClassChangeError when run</short_desc>
          <delta_ts>2013-04-30 01:49:25 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Mac OS X</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>400875</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Andrew Clement">aclement</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2250117</commentid>
    <comment_count>0</comment_count>
    <who name="Andrew Clement">aclement</who>
    <bug_when>2013-04-29 17:28:48 -0400</bug_when>
    <thetext>Following on from bug 406846, once I got it compiling, this testcase (for LambdaExpressionsTest):

public void test045() {
  this.runConformTest(
    new String[] {
      &quot;C.java&quot;,
      &quot;import java.util.*;\n&quot; +
      &quot;public class C {\n&quot; +
      &quot;  public static &lt;E&gt; void printItem(E value, int index) {\n&quot; +
      &quot;    String output = String.format(\&quot;%d -&gt; %s\&quot;, index, value);\n&quot; +
      &quot;    System.out.println(output);\n&quot; +
      &quot;  }\n&quot; +
      &quot;  public static void main(String[] argv) {\n&quot; +
      &quot;    List&lt;String&gt; list = Arrays.asList(\&quot;A\&quot;,\&quot;B\&quot;,\&quot;C\&quot;);\n&quot; +
      &quot;    eachWithIndex(list,C::printItem);\n&quot; +
      &quot;  }\n&quot; +
      &quot;  interface ItemWithIndexVisitor&lt;E&gt; {\n&quot; +
      &quot;    public void visit(E item, int index);\n&quot; +
      &quot;  }\n&quot; +
      &quot;  public static &lt;E&gt; void eachWithIndex(List&lt;E&gt; list, ItemWithIndexVisitor&lt;E&gt; visitor) {\n&quot; +
      &quot;    for (int i = 0; i &lt; list.size(); i++) {\n&quot; +
      &quot;         visitor.visit(list.get(i), i);\n&quot; +
      &quot;    }\n&quot; +
      &quot;  }\n&quot; +
      &quot;}\n&quot;
    },&quot;XXX&quot;);
}

(expected output is not complete)
It compiles but fails to run with:

junit.framework.AssertionFailedError: Unexpected error running resulting class file for C.java:
--[START]--
java.lang.IncompatibleClassChangeError
	at java.lang.invoke.MethodHandleNatives.linkMethodHandleConstant(MethodHandleNatives.java:383)
	at C.main(C.java:9)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:487)
	at ---[END]---

Same code works fine with javac (b81). Should produce the output:

0 -&gt; A
1 -&gt; B
2 -&gt; C</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2250129</commentid>
    <comment_count>1</comment_count>
    <who name="Andrew Clement">aclement</who>
    <bug_when>2013-04-29 17:54:04 -0400</bug_when>
    <thetext>Simplified version that also fails in the same way:

public void test045() {
  this.runConformTest(
    new String[] {
      &quot;C.java&quot;,
      &quot;import java.util.*;\n&quot; +
      &quot;public class C {\n&quot; +
    		  
      &quot;  public static &lt;E&gt; void printItem(E value) {}\n&quot; +

      &quot;  public static void main(String[] argv) {\n&quot; +
      &quot;    List&lt;String&gt; list = null;\n&quot; +
      &quot;    eachWithIndex(list, C::printItem);\n&quot; +
      &quot;  }\n&quot; +
      
      &quot;  interface ItemWithIndexVisitor&lt;E&gt; {\n&quot; +
      &quot;    public void visit(E item);\n&quot; +
      &quot;  }\n&quot; +
      
      &quot;  public static &lt;E&gt; void eachWithIndex(List&lt;E&gt; list, ItemWithIndexVisitor&lt;E&gt; visitor) {}\n&quot; +
      
      &quot;}\n&quot;
    }, &quot;XXX&quot;);
}

Removing the use of generics will make the problem disappear.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2250191</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-04-30 00:02:05 -0400</bug_when>
    <thetext>Thanks for the report and test Andy. I&apos;ll take a look.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2250199</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-04-30 00:43:22 -0400</bug_when>
    <thetext>Fix and test available here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=af1ea81bab121d034ebf70cf019e30160796d6c1</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2250209</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-04-30 01:49:25 -0400</bug_when>
    <thetext>Most tests I have added for code generation are artificial - realistic code
examples that show a problem (or even right behavior) are welcome. But please
bear in mind that overload resolution (bug 400871) and inference project
(bug 400874) are still open. Thanks Andy.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>