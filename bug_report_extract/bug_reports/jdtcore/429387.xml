<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>429387</bug_id>
          
          <creation_ts>2014-03-01 13:01:00 -0500</creation_ts>
          <short_desc>[1.8][compiler] AIOOBE in AbstractMethodDeclaration.createArgumentBindings</short_desc>
          <delta_ts>2014-03-07 06:29:05 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 8</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Timo Kinnunen">timo.kinnunen</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>manpalat</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2370132</commentid>
    <comment_count>0</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-03-01 13:01:43 -0500</bug_when>
    <thetext>This non-compiling method snippet copy-pasted from a larger class still causes the same ArrayIndexOutOfBoundsExceptions being thrown. Easiest reduction by far, ever! The code:

package aioobe_oejica_AbstractMethodDeclaration_createArgumentBindings_line_107;

import java.util.function.BiFunction;
import java.util.function.Supplier;
import java.util.function.ToIntFunction;
import java.util.stream.IntStream;
import java.util.stream.Stream;

public interface Foo {
static &lt;BT, T extends BT, IS extends IntStream, E extends Exception&gt; IntStreamy&lt;E&gt;
internalFlatMapToInt(Functionish&lt;BT, IS, E&gt; mapper,
Class&lt;E&gt; classOfE,
Supplier&lt;Stream&lt;T&gt;&gt; maker) {
BiFunction&lt;Stream&lt;T&gt;, ToIntFunction&lt;BT&gt;, IntStream&gt; func = (Stream&lt;T&gt; t, ToIntFunction&lt;BT, IS&gt; m) -&gt; t.flatmmapToInt(m);
return IntStreamy.fromFlatMap(func, mapper, classOfE, maker);
}
}

The installation:
eclipse.buildId=4.4.0.I20140123-1600
java.version=1.8.0
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Command-line arguments:  -os win32 -ws win32 -arch x86_64 -data C:\Users\Timo\workspace

The stack trace:
java.lang.ArrayIndexOutOfBoundsException: 0
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.createArgumentBindings(AbstractMethodDeclaration.java:107)
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.resolveType(LambdaExpression.java:393)
	at org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.resolve(LocalDeclaration.java:251)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:623)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:303)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:533)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1211)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1321)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:591)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:1208)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:693)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1187)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:813)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:549)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:542)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:485)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:132)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:53)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2370133</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-01 13:03:49 -0500</bug_when>
    <thetext>Thanks Timo, I&apos;ll follow up.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2370137</commentid>
    <comment_count>2</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-03-01 13:24:29 -0500</bug_when>
    <thetext>Thanks, a shorter repro:

import java.util.function.BiFunction;
import java.util.function.ToIntFunction;
public interface Foo {
BiFunction&lt;Stream&lt;T&gt;, Function&lt;BT,IS&gt;, IntStream&gt; func =
(Stream&lt;T&gt; t, ToIntFunction&lt;BT,IS&gt; m) -&gt; t.flatMapToInt(m);
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2370157</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-01 18:07:31 -0500</bug_when>
    <thetext>Annotation based null analysis is required. Stephan, thanks for taking
a look.

Disabled test here: org.eclipse.jdt.core.tests.compiler.regression.NullTypeAnnotationTest._test429387()</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2370171</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-01 22:33:35 -0500</bug_when>
    <thetext>I released a fix and test short circuiting the argument binding creation when
the lambda is broken. This avoids the NPE, but results in a secondary error
about m not being defined. 

The equivalent problem does not arise for anonymous classes - only because of
some combination of fortuitous circumstances - I think we can live with the
secondary error at least for now.

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=ee44380e8d52a97dffe90bb61e33a1e5ccfb30e8

Stephan, if you wish to please amend the fix - I am fine with leaving it as is.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372951</commentid>
    <comment_count>5</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2014-03-07 06:29:05 -0500</bug_when>
    <thetext>Verified as working for Eclipse + Java 8 RC2 using Kepler SR2 + Eclipse Java Development Tools Patch for Java 8 Support (BETA)1.0.0.v20140306-1935</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>