<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>405125</bug_id>
          
          <creation_ts>2013-04-08 01:30:00 -0400</creation_ts>
          <short_desc>[1.8][code assist] static members of an interface appearing after the declaration of a static member lambda expression are not being suggested.</short_desc>
          <delta_ts>2013-12-13 06:11:50 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>402079</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="ANIRBAN CHAKRABORTY">anchakrk</reporter>
          <assigned_to name="ANIRBAN CHAKRABORTY">anchakrk</assigned_to>
          <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2240730</commentid>
    <comment_count>0</comment_count>
    <who name="ANIRBAN CHAKRABORTY">anchakrk</who>
    <bug_when>2013-04-08 01:30:56 -0400</bug_when>
    <thetext>public interface Foo { 
	int run(int s1, int s2); 
}

interface X {
	

    static Foo f = (int s5, int s6) -&gt; x&lt;ctrl-space&gt;
    static int x1 = 2;
}

x1 should have been suggested in assist; but not happening that way.

Thanks
Anirban</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2240732</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-04-08 01:39:16 -0400</bug_when>
    <thetext>(In reply to comment #0)

&gt; x1 should have been suggested in assist; but not happening that way.

x1 should not be suggested there. It would lead it to a compile error:
&quot;Cannot reference a field before it is defined&quot;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2240740</commentid>
    <comment_count>2</comment_count>
    <who name="ANIRBAN CHAKRABORTY">anchakrk</who>
    <bug_when>2013-04-08 01:57:22 -0400</bug_when>
    <thetext>(In reply to comment #1)
&gt; (In reply to comment #0)
&gt; 
&gt; &gt; x1 should have been suggested in assist; but not happening that way.
&gt; 
&gt; x1 should not be suggested there. It would lead it to a compile error:
&gt; &quot;Cannot reference a field before it is defined&quot;

Hello Srikanth,
Thanks for the comment.
I thought, though, that all the members of an interface are at the &apos;same level&apos;; i.e, the inherent sequentiality that is there in a method body, is not present here, and hence the sequentiality that is considered while suggesting in a metod body, should be done away with here.
E.g, the following program compiles just fine:

public interface Foo { 
	int run(int s1, int s2); 
}

interface X {
	

    static Foo f = (int x5, int x2) -&gt; x1;
    static int x1 = 2;
}



Thanks
Anirban</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2240744</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-04-08 02:11:29 -0400</bug_when>
    <thetext>(In reply to comment #2)

&gt; E.g, the following program compiles just fine:
&gt; 
&gt; public interface Foo { 
&gt; 	int run(int s1, int s2); 
&gt; }
&gt; 
&gt; interface X {
&gt; 	
&gt; 
&gt;     static Foo f = (int x5, int x2) -&gt; x1;
&gt;     static int x1 = 2;
&gt; }

Should it compile fine ? 

The following generates two errors with both eclipse and javac 8b81.

interface Foo { 
    int run(int s1, int s2); 
}

interface X {


    static Foo f = foo(x1);
    static int x = x1;
    static int x1 = 2;

   static Foo foo(int x) {
	return null;
   }
}

The snippet you have posted compiles fine with eclipse, but crashes 8b81.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2240747</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-04-08 02:22:39 -0400</bug_when>
    <thetext>(In reply to comment #3)

&gt; Should it compile fine ? 

I think this is a bug in the eclipse compiler that it compiles this code with
an illegal forward reference. Bug may be in org.eclipse.jdt.internal.compiler.ast.SingleNameReference.checkFieldAccess(BlockScope). Please open a fresh bug against the compiler with the test case from
comment#2. 

Also note that solely relying on eclipse compiler behavior even as it being
developed to make judgments about the language will be a mistake. We also have 
to take into account the spec and the reference compiler. Also relying on 
one&apos;s intuition (the argument in comment#2 about the &quot;same level&quot;) can lead to
trouble.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2328568</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-11-11 00:13:57 -0500</bug_when>
    <thetext>Please follow up on the potential compiler bug alluded to in comment#4</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2331085</commentid>
    <comment_count>6</comment_count>
    <who name="ANIRBAN CHAKRABORTY">anchakrk</who>
    <bug_when>2013-11-17 22:31:01 -0500</bug_when>
    <thetext>Hello,

It seems both eclipse compiler and javac compiles the following code silently.

public interface Foo { 
	int run(int s1, int s2); 
}

interface X {
	

    static Foo f = (int x5, int x2) -&gt; x1;
    static int x1 = 2;
}



Invalidating the current bug, and filing a new bug for this (for records).

Thanks
Anirban</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2331086</commentid>
    <comment_count>7</comment_count>
    <who name="ANIRBAN CHAKRABORTY">anchakrk</who>
    <bug_when>2013-11-17 22:36:06 -0500</bug_when>
    <thetext> 
&gt; Invalidating the current bug, and filing a new bug for this (for records).

Not raising a compiler bug just now. Will raise later, if needed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2331089</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-11-17 22:46:20 -0500</bug_when>
    <thetext>I found a scenario and raised a bug: https://bugs.eclipse.org/bugs/show_bug.cgi?id=421926.

As to whether the present bug itself: It is not truly invalid. We should offer 
the completion proposal if it is not indeed a true forward reference. i.e, we
should offer proposals for subsequent static members iff such proposals would 
not in fact lead to compile errors. This could be a bit tricky.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2331090</commentid>
    <comment_count>9</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-11-17 22:49:04 -0500</bug_when>
    <thetext>Anirban, My bad. I apologize for the going back and forth and incorrect advice in
between. It happens sometimes with corner cases :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2331092</commentid>
    <comment_count>10</comment_count>
    <who name="ANIRBAN CHAKRABORTY">anchakrk</who>
    <bug_when>2013-11-17 23:21:47 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #9)
&gt; Anirban, My bad. I apologize for the going back and forth and incorrect
&gt; advice in
&gt; between. It happens sometimes with corner cases :)

No problem at all. I&apos;ll fix the bug.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2337234</commentid>
    <comment_count>11</comment_count>
      <attachid>237977</attachid>
    <who name="ANIRBAN CHAKRABORTY">anchakrk</who>
    <bug_when>2013-12-03 15:53:44 -0500</bug_when>
    <thetext>Created attachment 237977
Patch

Parent attached.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2337235</commentid>
    <comment_count>12</comment_count>
    <who name="ANIRBAN CHAKRABORTY">anchakrk</who>
    <bug_when>2013-12-03 15:55:05 -0500</bug_when>
    <thetext>Assist node parent attached.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2341491</commentid>
    <comment_count>13</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-12-13 06:11:50 -0500</bug_when>
    <thetext>Thanks for the patch Anirban. I picked up the tests - the issue was already
fixed by my patch for elided parameter support.

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=5ef6e5922904c18fe755d75c8b62a6c8d0b08d67

Please note: There is a new home for assist tests specific to Java8:

CompletionParserTests18.java
CompletionTests18.java
ResolveTests18.java
RunOnlyAssistTests18.java.

BTW, what is testBug405125b testing exactly ?</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>237977</attachid>
            <date>2013-12-03 15:53:00 -0500</date>
            <delta_ts>2013-12-03 15:53:44 -0500</delta_ts>
            <desc>Patch</desc>
            <filename>Bug-405125.patch</filename>
            <type>text/plain</type>
            <size>5448</size>
            <attacher name="ANIRBAN CHAKRABORTY">anchakrk</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9tb2RlbC9Db21wbGV0aW9uVGVzdHMyLmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
bW9kZWwvQ29tcGxldGlvblRlc3RzMi5qYXZhCmluZGV4IDFjNjkzMDMuLmQyYjQwZWYgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9tb2RlbC9Db21wbGV0aW9uVGVzdHMyLmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21v
ZGVsL0NvbXBsZXRpb25UZXN0czIuamF2YQpAQCAtMywxMCArMywxNCBAQAogICogQWxsIHJpZ2h0
cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwog
ICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJs
aWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwg
YW5kIGlzIGF2YWlsYWJsZSBhdAogICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwt
djEwLmh0bWwKICAqCisgKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGFuIGVhcmx5LWRy
YWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVyIHRoZSBKYXZhCisgKiBDb21tdW5pdHkg
UHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFibGUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1
YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBjb2RlIGlzIG5vdCBjb21wYXRpYmxlIHdpdGgg
YW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KKyAqIAogICogQ29udHJpYnV0b3JzOgogICog
ICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgogICoq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKiovCiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3Rz
Lm1vZGVsOwogCkBAIC02MTMzLDYgKzYxMzcsODQgQEAKIAkgICAgCiAJfSBmaW5hbGx5IHsKIAkJ
ZGVsZXRlUHJvamVjdCgiUCIpOwogCX0KIH0KKy8vIEJ1ZyA0MDUxMjUgLSBbMS44XVtjb2RlIGFz
c2lzdF0gc3RhdGljIG1lbWJlcnMgb2YgYW4gaW50ZXJmYWNlIGFwcGVhcmluZyBhZnRlciB0aGUg
ZGVjbGFyYXRpb24gb2YgYSBzdGF0aWMgbWVtYmVyIGxhbWJkYSBleHByZXNzaW9uIGFyZSBub3Qg
YmVpbmcgc3VnZ2VzdGVkLgorLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19i
dWcuY2dpP2lkPTQwNTEyNQorcHVibGljIHZvaWQgdGVzdEJ1ZzQwNTEyNWEoKSB0aHJvd3MgQ29y
ZUV4Y2VwdGlvbiB7CisJdHJ5IHsKKwkJLy8gQ3JlYXRlIHByb2plY3QgYW5kIGphcgorCQlJSmF2
YVByb2plY3QgcCA9IGNyZWF0ZUphdmFQcm9qZWN0KCJQIiwgbmV3IFN0cmluZ1tdIHsic3JjIn0s
IG5ldyBTdHJpbmdbXXsiSkNMX0xJQiJ9LCAiYmluIik7CisJCWNyZWF0ZUZvbGRlcigiL1Avc3Jj
L3AiKTsKKwkJcmVmcmVzaChwKTsKKwkJLy8gQ3JlYXRlIHdvcmtpbmcgY29weQorCQl0aGlzLndv
cmtpbmdDb3BpZXMgPSBuZXcgSUNvbXBpbGF0aW9uVW5pdFsxXTsKKwkJdGhpcy53b3JraW5nQ29w
aWVzWzBdID0gZ2V0V29ya2luZ0NvcHkoCisJCQkJIi9QL3NyYy9wL0Zvby5qYXZhIiwKKwkJCQki
cHVibGljIGludGVyZmFjZSBGb28ge1xuIiArCisJCQkJIglpbnQgcnVuKGludCBzMSwgaW50IHMy
KTtcbiIgKworCQkJCSJ9XG4iICsKKwkJCQkiaW50ZXJmYWNlIEIge1xuIiArCisJCQkJIglzdGF0
aWMgRm9vIGYgPSAoaW50IHg1LCBpbnQgeDIpIC0+IHR3XG4iICsKKwkJCQkiCXN0YXRpYyBpbnQg
eDQgPSAzO1xuIiArCisJCQkJIiAgCXN0YXRpYyBpbnQgdHdvICgpIHsgcmV0dXJuIDI7IH1cbiIg
KworCQkJCSJ9Iik7CisKKwkJLy8gZG8gY29tcGxldGlvbgorCQlDb21wbGV0aW9uVGVzdHNSZXF1
ZXN0b3IyIHJlcXVlc3RvciA9IG5ldyBDb21wbGV0aW9uVGVzdHNSZXF1ZXN0b3IyKHRydWUpOwor
CQlyZXF1ZXN0b3Iuc2V0UmVxdWlyZUV4dGVuZGVkQ29udGV4dCh0cnVlKTsKKwkJcmVxdWVzdG9y
LnNldENvbXB1dGVWaXNpYmxlRWxlbWVudHModHJ1ZSk7CisJCXJlcXVlc3Rvci5hbGxvd0FsbFJl
cXVpcmVkUHJvcG9zYWxzKCk7CisJCU51bGxQcm9ncmVzc01vbml0b3IgbW9uaXRvciA9IG5ldyBO
dWxsUHJvZ3Jlc3NNb25pdG9yKCk7CisKKwkgICAgU3RyaW5nIHN0ciA9IHRoaXMud29ya2luZ0Nv
cGllc1swXS5nZXRTb3VyY2UoKTsKKwkgICAgU3RyaW5nIGNvbXBsZXRlQmVoaW5kID0gIihpbnQg
eDUsIGludCB4MikgLT4gdHciOworCSAgICBpbnQgY3Vyc29yTG9jYXRpb24gPSBzdHIubGFzdElu
ZGV4T2YoY29tcGxldGVCZWhpbmQpICsgY29tcGxldGVCZWhpbmQubGVuZ3RoKCk7CisJICAgIHRo
aXMud29ya2luZ0NvcGllc1swXS5jb2RlQ29tcGxldGUoY3Vyc29yTG9jYXRpb24sIHJlcXVlc3Rv
ciwgdGhpcy53Y093bmVyLCBtb25pdG9yKTsKKwkgICAgCisJICAgIGFzc2VydFJlc3VsdHMoCisJ
ICAgIAkidHdvW01FVEhPRF9SRUZde3R3bygpLCBMcC5COywgKClJLCB0d28sIG51bGwsIDI3fSIs
CisJICAgIAlyZXF1ZXN0b3IuZ2V0UmVzdWx0cygpKTsKKwl9IGZpbmFsbHkgeworCQlkZWxldGVQ
cm9qZWN0KCJQIik7CisJfQorfQorcHVibGljIHZvaWQgdGVzdEJ1ZzQwNTEyNWIoKSB0aHJvd3Mg
Q29yZUV4Y2VwdGlvbiB7CisJdHJ5IHsKKwkJLy8gQ3JlYXRlIHByb2plY3QgYW5kIGphcgorCQlJ
SmF2YVByb2plY3QgcCA9IGNyZWF0ZUphdmFQcm9qZWN0KCJQIiwgbmV3IFN0cmluZ1tdIHsic3Jj
In0sIG5ldyBTdHJpbmdbXXsiSkNMX0xJQiJ9LCAiYmluIik7CisJCWNyZWF0ZUZvbGRlcigiL1Av
c3JjL3AiKTsKKwkJcmVmcmVzaChwKTsKKwkJLy8gQ3JlYXRlIHdvcmtpbmcgY29weQorCQl0aGlz
LndvcmtpbmdDb3BpZXMgPSBuZXcgSUNvbXBpbGF0aW9uVW5pdFsxXTsKKwkJdGhpcy53b3JraW5n
Q29waWVzWzBdID0gZ2V0V29ya2luZ0NvcHkoCisJCQkJIi9QL3NyYy9wL0Zvby5qYXZhIiwKKwkJ
CQkicHVibGljIGludGVyZmFjZSBGb28ge1xuIiArCisJCQkJIglpbnQgcnVuKGludCBzMSwgaW50
IHMyKTtcbiIgKworCQkJCSJ9XG4iICsKKwkJCQkiaW50ZXJmYWNlIEIge1xuIiArCisJCQkJIglz
dGF0aWMgRm9vIGYgPSAoaW50IHg1LCBpbnQgeDIpIC0+IGFub3RcbiIgKworCQkJCSIJc3RhdGlj
IGludCBhbm90aGVyID0gMztcbiIgKworCQkJCSIgIAlzdGF0aWMgaW50IHR3byAoKSB7IHJldHVy
biAyOyB9XG4iICsKKwkJCQkifSIpOworCisJCS8vIGRvIGNvbXBsZXRpb24KKwkJQ29tcGxldGlv
blRlc3RzUmVxdWVzdG9yMiByZXF1ZXN0b3IgPSBuZXcgQ29tcGxldGlvblRlc3RzUmVxdWVzdG9y
Mih0cnVlKTsKKwkJcmVxdWVzdG9yLnNldFJlcXVpcmVFeHRlbmRlZENvbnRleHQodHJ1ZSk7CisJ
CXJlcXVlc3Rvci5zZXRDb21wdXRlVmlzaWJsZUVsZW1lbnRzKHRydWUpOworCQlyZXF1ZXN0b3Iu
YWxsb3dBbGxSZXF1aXJlZFByb3Bvc2FscygpOworCQlOdWxsUHJvZ3Jlc3NNb25pdG9yIG1vbml0
b3IgPSBuZXcgTnVsbFByb2dyZXNzTW9uaXRvcigpOworCisJICAgIFN0cmluZyBzdHIgPSB0aGlz
LndvcmtpbmdDb3BpZXNbMF0uZ2V0U291cmNlKCk7CisJICAgIFN0cmluZyBjb21wbGV0ZUJlaGlu
ZCA9ICIoaW50IHg1LCBpbnQgeDIpIC0+IHR3IjsKKwkgICAgaW50IGN1cnNvckxvY2F0aW9uID0g
c3RyLmxhc3RJbmRleE9mKGNvbXBsZXRlQmVoaW5kKSArIGNvbXBsZXRlQmVoaW5kLmxlbmd0aCgp
OworCSAgICB0aGlzLndvcmtpbmdDb3BpZXNbMF0uY29kZUNvbXBsZXRlKGN1cnNvckxvY2F0aW9u
LCByZXF1ZXN0b3IsIHRoaXMud2NPd25lciwgbW9uaXRvcik7CisJICAgIAorCSAgICBhc3NlcnRS
ZXN1bHRzKAorCSAgICAJImV4dGVuZHNbS0VZV09SRF17ZXh0ZW5kcywgbnVsbCwgbnVsbCwgZXh0
ZW5kcywgbnVsbCwgMjR9IiwKKwkgICAgCXJlcXVlc3Rvci5nZXRSZXN1bHRzKCkpOworCX0gZmlu
YWxseSB7CisJCWRlbGV0ZVByb2plY3QoIlAiKTsKKwl9Cit9CiB9CmRpZmYgLS1naXQgYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb2RlYXNzaXN0L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb2Rl
YXNzaXN0L2NvbXBsZXRlL0NvbXBsZXRpb25QYXJzZXIuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvZGVhc3Npc3Qvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvZGVhc3Npc3QvY29tcGxl
dGUvQ29tcGxldGlvblBhcnNlci5qYXZhCmluZGV4IGI4Y2JjMGUuLmE4NDdiMjcgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvZGVhc3Npc3Qvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvZGVhc3Npc3QvY29tcGxldGUvQ29tcGxldGlvblBhcnNlci5qYXZhCisrKyBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvZGVhc3Npc3Qvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvZGVh
c3Npc3QvY29tcGxldGUvQ29tcGxldGlvblBhcnNlci5qYXZhCkBAIC0zMzE0LDEwICszMzE0LDE3
IEBACiB9CiBwcm90ZWN0ZWQgdm9pZCBjb25zdW1lUmVzdG9yZURpZXQoKSB7CiAJc3VwZXIuY29u
c3VtZVJlc3RvcmVEaWV0KCk7CiAJaWYgKGlzSW5zaWRlTWV0aG9kKCkpIHsKIAkJcG9wRWxlbWVu
dChLX0xPQ0FMX0lOSVRJQUxJWkVSX0RFTElNSVRFUik7CisJfSBlbHNlIHsKKwkJaWYgKHRoaXMu
Y3VycmVudEVsZW1lbnQgIT0gbnVsbCAmJiB0aGlzLmN1cnJlbnRFbGVtZW50IGluc3RhbmNlb2Yg
UmVjb3ZlcmVkRmllbGQgJiYgdGhpcy5hc3Npc3ROb2RlUGFyZW50ID09IG51bGwpIHsKKwkJCUZp
ZWxkRGVjbGFyYXRpb24gZmQgPSAoKFJlY292ZXJlZEZpZWxkKSh0aGlzLmN1cnJlbnRFbGVtZW50
KSkuZmllbGREZWNsYXJhdGlvbjsKKwkJCWlmIChmZC5pbml0aWFsaXphdGlvbiAhPSBudWxsICYm
IGZkLmluaXRpYWxpemF0aW9uIGluc3RhbmNlb2YgTGFtYmRhRXhwcmVzc2lvbikgeworCQkJCXRo
aXMuYXNzaXN0Tm9kZVBhcmVudCA9IGZkOworCQkJfQorCQl9CiAJfQogfQogcHJvdGVjdGVkIHZv
aWQgY29uc3VtZVNpbmdsZU1lbWJlckFubm90YXRpb24oYm9vbGVhbiBpc1R5cGVBbm5vdGF0aW9u
KSB7CiAJaWYgKHRoaXMudG9wS25vd25FbGVtZW50S2luZChDT01QTEVUSU9OX09SX0FTU0lTVF9Q
QVJTRVIpID09IEtfQkVUV0VFTl9BTk5PVEFUSU9OX05BTUVfQU5EX1JQQVJFTiAmJgogCQkJKHRo
aXMudG9wS25vd25FbGVtZW50SW5mbyhDT01QTEVUSU9OX09SX0FTU0lTVF9QQVJTRVIpICYgQU5O
T1RBVElPTl9OQU1FX0NPTVBMRVRJT04pICE9IDAgKSB7
</data>
<flag name="review"
          id="60047"
          type_id="6"
          status="?"
          setter="anchakrk"
    />
          </attachment>
      

    </bug>

</bugzilla>