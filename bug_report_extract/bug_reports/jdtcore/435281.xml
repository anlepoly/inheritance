<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>435281</bug_id>
          
          <creation_ts>2014-05-20 08:00:00 -0400</creation_ts>
          <short_desc>[1.8][code assist] No import or completion proposal for anonymous class inside lambda</short_desc>
          <delta_ts>2014-11-18 05:40:01 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.5 M2</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Noopur Gupta">noopur_gupta</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>jarthana</cc>
    
    <cc>manpalat</cc>
    
    <cc>markus_keller</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2404104</commentid>
    <comment_count>0</comment_count>
    <who name="Noopur Gupta">noopur_gupta</who>
    <bug_when>2014-05-20 08:00:09 -0400</bug_when>
    <thetext>Place the following files in respective packages:

////////////////////////////////
package p4a;

@FunctionalInterface
public interface FI1&lt;R&gt; {
    public R foo1();
}

////////////////////////////////
package p4a;

@FunctionalInterface
public interface FI2 {
    public void foo2();
}
////////////////////////////////
package p4b;

import p4a.FI1;

public class Test {
	{
                new FI2() {};
		FI1 fi1 = () -&gt; new FI2() {
		    @Override
		    public void foo2() {}
		};
	}
}

////////////////////////////////

In class Test, hover on the error at second &apos;FI2&apos;. No quick fix is provided to import &apos;FI2&apos;.

Also, see bug 434884 comment #3:
org.eclipse.jdt.internal.ui.text.correction.SimilarElementsRequestor#findSimilarElement(ICompilationUnit, Name, int) does get an anonymous class completion proposal with the caret after the first &quot;new FI2&quot;, but not after the second one inside the lambda.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2451874</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-15 12:38:25 -0400</bug_when>
    <thetext>(In reply to Noopur Gupta from comment #0)

&gt; In class Test, hover on the error at second &apos;FI2&apos;. No quick fix is provided
&gt; to import &apos;FI2&apos;.

Why ? 

We need a starting point for analyzing this in Core.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2452254</commentid>
    <comment_count>2</comment_count>
    <who name="Noopur Gupta">noopur_gupta</who>
    <bug_when>2014-09-16 06:18:10 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #1)
&gt; (In reply to Noopur Gupta from comment #0)
&gt; &gt; In class Test, hover on the error at second &apos;FI2&apos;. No quick fix is provided
&gt; &gt; to import &apos;FI2&apos;.
&gt; 
&gt; Why ? 
&gt; 
&gt; We need a starting point for analyzing this in Core.

Probably similar to why we don&apos;t get an anonymous class completion proposal with the caret after the second &quot;new FI2&quot;.

The code in JDT UI that invokes ICodeAssist#codeComplete after Ctrl+space at the end of second &quot;new FI2&quot; and does not receive any proposals back is:

org.eclipse.jdt.internal.ui.text.java.JavaCompletionProposalComputer.internalComputeCompletionProposals(int offset, JavaContentAssistInvocationContext context) - line 244:
unit.codeComplete(offset, collector, fTimeoutProgressMonitor);</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2452791</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-16 19:17:47 -0400</bug_when>
    <thetext>Considering the plan for 4.5 M3, I don&apos;t expect to get to this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2453269</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-17 14:20:08 -0400</bug_when>
    <thetext>What the heck, I went ahead and fixed this anyways :)

Basically there was an IndexOutOfBoundsException that was being silently
swallowed. Now completion and quick fix work OK.

Fix and tests here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=0a42969cf5af4836de11a0ddb17424701edec007


(In reply to Noopur Gupta from comment #0)
&gt; Also, see bug 434884 comment #3:
&gt; org.eclipse.jdt.internal.ui.text.correction.
&gt; SimilarElementsRequestor#findSimilarElement(ICompilationUnit, Name, int)
&gt; does get an anonymous class completion proposal with the caret after the
&gt; first &quot;new FI2&quot;, but not after the second one inside the lambda.

If this is still a problem, please open a separate bug. It is unrelated.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2453674</commentid>
    <comment_count>5</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-09-18 09:02:44 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #4)
&gt; (In reply to Noopur Gupta from comment #0)
&gt; &gt; Also, see bug 434884 comment #3:
&gt; &gt; org.eclipse.jdt.internal.ui.text.correction.
&gt; &gt; SimilarElementsRequestor#findSimilarElement(ICompilationUnit, Name, int)
&gt; &gt; does get an anonymous class completion proposal with the caret after the
&gt; &gt; first &quot;new FI2&quot;, but not after the second one inside the lambda.
&gt; 
&gt; If this is still a problem, please open a separate bug. It is unrelated.

This seems to work too.

Verified for Mars 4.5 M2 with build I20140918-0330.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2483274</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-11-14 17:12:56 -0500</bug_when>
    <thetext>Srikanth, while running the test introduced here against Object Teams I wonder, how it could ever pass:

We have this import

   import p4a.FI1;

But FI1 is created as

   &quot;/Completion/src/FI1.java&quot;

So, in my observation the import is not resolved, since no PackageFragment &quot;p4a&quot; exists. Next, the lambda has a MissingTypeBinding as its target type and resolving doesn&apos;t reach the point where CompletionOnSingleTypeReference could fire CompletionNodeFound.


Do you have any explanation how the test could possibly pass?

If I correct the paths of FI1.java and FI2.java all is fine.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2484575</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-17 22:59:02 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #6)

&gt; Do you have any explanation how the test could possibly pass?

[...]

&gt; If I correct the paths of FI1.java and FI2.java all is fine.

As the test is written, I see a throw of CompletionNodeFound with
astNode set to &lt;CompleteOnType:FI2&gt;, with its resolved type set to null.
this looks ok to me.

Could you raise a follow up defect if needed with specifics called out
if something is amiss ? TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2484748</commentid>
    <comment_count>8</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-11-18 05:40:01 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #7)
&gt; (In reply to Stephan Herrmann from comment #6)
&gt; 
&gt; &gt; Do you have any explanation how the test could possibly pass?
&gt; 
&gt; [...]
&gt; 
&gt; &gt; If I correct the paths of FI1.java and FI2.java all is fine.
&gt; 
&gt; As the test is written, I see a throw of CompletionNodeFound with
&gt; astNode set to &lt;CompleteOnType:FI2&gt;, with its resolved type set to null.
&gt; this looks ok to me.

I was expecting the test to fail because it contains (resolve) errors that would prevent the lambda from ever being resolved (unresolved target type).
Call it a second order bug: it works but I had no clue why.
 
&gt; Could you raise a follow up defect if needed with specifics called out
&gt; if something is amiss ? TIA.

After a little more debugging I filed bug 452039.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>