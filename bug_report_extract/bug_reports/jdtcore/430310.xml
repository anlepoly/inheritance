<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>430310</bug_id>
          
          <creation_ts>2014-03-13 13:48:00 -0400</creation_ts>
          <short_desc>[1.8][compiler] Functional interface incorrectly rejected as not being.</short_desc>
          <delta_ts>2014-03-14 10:58:57 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3.2</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Mac OS X</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords>core</keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Jason Zaugg">jzaugg</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>jarthana</cc>
    
    <cc>jzaugg</cc>
    
    <cc>markus_keller</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2375674</commentid>
    <comment_count>0</comment_count>
    <who name="Jason Zaugg">jzaugg</who>
    <bug_when>2014-03-13 13:48:03 -0400</bug_when>
    <thetext>interface Func1&lt;T1, R&gt; {
        R apply(T1 v1);
        void other();
    }
    @FunctionalInterface // spurious error: F1&lt;T, R&gt; is not a functional interface
    interface F1&lt;T1, R&gt; extends Func1&lt;T1, R&gt; {
        default void other() {}
    }

or more simply:

    @FunctionalInterface // spurious error: F2&lt;T, R&gt; is not a functional interface
    interface F2&lt;T1, R&gt; extends Func1&lt;T1, R&gt; {
    	R apply(T1 v1);
        default void other() {}
    }

Tested with:

  Version: Kepler Service Release 1
  Build id: 20130919-0819

  Eclipse Java Development Tools Patch for Java 8 Support (BETA)	1.0.0.v20140312-1826	org.eclipse.jdt.java8patch.feature.group	Eclipse.org</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375678</commentid>
    <comment_count>1</comment_count>
    <who name="Jason Zaugg">jzaugg</who>
    <bug_when>2014-03-13 13:54:37 -0400</bug_when>
    <thetext>Sorry, my second &quot;more simply&quot; example is misleading.

In the straight forward case:

    @FunctionalInterface
    interface F3&lt;T1, T2, R&gt; {
    	R apply(T1 v1, T2 v2);
        default void other() {}
    }

no error is issued.

The bug is limited to the case where a default method overrides an abstract method from a super-interface.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375688</commentid>
    <comment_count>2</comment_count>
    <who name="Jason Zaugg">jzaugg</who>
    <bug_when>2014-03-13 14:14:46 -0400</bug_when>
    <thetext>I think this is a duplicate of https://bugs.eclipse.org/bugs/show_bug.cgi?id=423467.

But I&apos;m not sure how to tell if the fix for that bug, https://github.com/eclipse/eclipse.jdt.core/commit/02ca7d63ca, is included in v20140312-1826.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375787</commentid>
    <comment_count>3</comment_count>
    <who name="Jason Zaugg">jzaugg</who>
    <bug_when>2014-03-13 17:59:51 -0400</bug_when>
    <thetext>I&apos;ve just figured out, from http://git.eclipse.org/c/platform/eclipse.platform.releng.aggregator.git/commit/?id=7aa0f79a30d3f0cc859460c8280e2fb2fbd9665a, that my build does contain the fix for  https://bugs.eclipse.org/bugs/show_bug.cgi?id=423467.

The test case from that ticket works okay in my installation.

However, this report is slightly different: the abstract method and the overiden default methods are not overloaded.


In summary:

package scala.runtime.test;

// Okay, fixed in https://bugs.eclipse.org/bugs/show_bug.cgi?id=423467
interface I1 {
	int foo(String s);
}

@FunctionalInterface
interface A1 extends I1 {
	@Override
	default int foo(String s) {
		return -1;
	}

	int foo(java.io.Serializable s);
}

// Spurious &quot;A2 is not a functional interface&quot;
// pending https://bugs.eclipse.org/bugs/show_bug.cgi?id=430310
// Okay, fixed in https://bugs.eclipse.org/bugs/show_bug.cgi?id=423467
interface I2 {
	int foo(String s);
}

@FunctionalInterface
interface A2 extends I2 {
	@Override
	default int foo(String s) {
		return -1;
	}

	int bar(java.io.Serializable s);
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375821</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-13 19:55:22 -0400</bug_when>
    <thetext>I&apos;ll take a look. Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375840</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-13 23:13:54 -0400</bug_when>
    <thetext>Jason, thanks for the defect report - this is not a recent regression, but a
problem that has existed for ever - one can say the fix for https://bugs.eclipse.org/bugs/show_bug.cgi?id=423467 was incomplete and did
not handle all cases it should have handled.

I am evaluating a fix.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375841</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-13 23:16:12 -0400</bug_when>
    <thetext>Changed the title to reflect the real problem. It is not that default
methods get counted - the problem stems from the incorrect handling of
a non-functional super interface type - we incorrectly conclude subtypes
cannot be functional either - which is wrong.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375842</commentid>
    <comment_count>7</comment_count>
      <attachid>240885</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-14 01:01:27 -0400</bug_when>
    <thetext>Created attachment 240885
Patch under consideration</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375874</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-14 04:15:14 -0400</bug_when>
    <thetext>All tests are green. Jay is doing some additional testing ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375875</commentid>
    <comment_count>9</comment_count>
    <who name="Jason Zaugg">jzaugg</who>
    <bug_when>2014-03-14 04:24:12 -0400</bug_when>
    <thetext>Thanks for the fast turnaround time, Srikanth! Much appreciated.

BTW, the context for this bug is our efforts at Typesafe to create a set of functional interfaces deriving from `scala.FunctionN`. Example usage: https://github.com/retronym/java-8-function1/blob/master/src/test/java/scala/runtime/test/Test.java

I temporarily worked around this bug by changing the functional interfaces to a form recognised JDT, and found that everything else is working perfectly, including lambda type parameter inference in arguments to the overloaded `func` method. Well done!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2375944</commentid>
    <comment_count>10</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-14 06:00:25 -0400</bug_when>
    <thetext>(In reply to Jason Zaugg from comment #9)
&gt; Thanks for the fast turnaround time, Srikanth! Much appreciated.
&gt; 
&gt; BTW, the context for this bug is our efforts at Typesafe to create a set of
&gt; functional interfaces deriving from `scala.FunctionN`. Example usage:
&gt; https://github.com/retronym/java-8-function1/blob/master/src/test/java/scala/
&gt; runtime/test/Test.java

Sound interesting.

&gt; I temporarily worked around this bug by changing the functional interfaces
&gt; to a form recognised JDT, and found that everything else is working
&gt; perfectly, including lambda type parameter inference in arguments to the
&gt; overloaded `func` method. Well done!

Thanks a lot for the feedback - much appreciated.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2376081</commentid>
    <comment_count>11</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-03-14 10:58:57 -0400</bug_when>
    <thetext>Pushed the fix via:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=a1df1743aeff71de75237f6e50af470ebbed4600</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>240885</attachid>
            <date>2014-03-14 01:01:00 -0400</date>
            <delta_ts>2014-03-14 01:01:27 -0400</delta_ts>
            <desc>Patch under consideration</desc>
            <filename>fi.patch</filename>
            <type>text/plain</type>
            <size>10318</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0xhbWJkYUV4cHJlc3Np
b25zVGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhRXhwcmVz
c2lvbnNUZXN0LmphdmEKaW5kZXggN2U1YzZiNi4uYjZhNWVmMSAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rl
c3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9j
b3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEK
QEAgLTQwMTcsNiArNDAxNyw4OSBAQAogCQkJfSwKIAkJCSJudWxsIik7CiB9CisvLyBodHRwczov
L2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDMwMzEwLCBbMS44XVtjb21w
aWxlcl0gRnVuY3Rpb25hbCBpbnRlcmZhY2UgaW5jb3JyZWN0bHkgcmVqZWN0ZWQgYXMgbm90IGJl
aW5nLgorcHVibGljIHZvaWQgdGVzdDQzMDMxMCgpIHsKKwl0aGlzLnJ1bkNvbmZvcm1UZXN0KAor
CQkJbmV3IFN0cmluZ1tdIHsKKwkJCQkiWC5qYXZhIiwKKwkJCQkiaW50ZXJmYWNlIEZ1bmMxPFQx
LCBSPiB7XG4iICsKKwkJCQkiICAgICAgICBSIGFwcGx5KFQxIHYxKTtcbiIgKworCQkJCSIgICAg
ICAgIHZvaWQgb3RoZXIoKTtcbiIgKworCQkJCSJ9XG4iICsKKwkJCQkiQEZ1bmN0aW9uYWxJbnRl
cmZhY2UgLy8gc3B1cmlvdXMgZXJyb3I6IEYxPFQsIFI+IGlzIG5vdCBhIGZ1bmN0aW9uYWwgaW50
ZXJmYWNlXG4iICsKKwkJCQkicHVibGljIGludGVyZmFjZSBYPFQxLCBSPiBleHRlbmRzIEZ1bmMx
PFQxLCBSPiB7XG4iICsKKwkJCQkiCWRlZmF1bHQgdm9pZCBvdGhlcigpIHt9XG4iICsKKwkJCQki
ICAgcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nIFtdIGFyZ3MpIHtcbiIgKworCQkJCSIg
ICAgICAgU3lzdGVtLm91dC5wcmludGxuKFwiT0tcIik7XG4iICsKKwkJCQkiICAgfVxuIiArCisJ
CQkJIn1cbiIKKwkJCX0sCisJCQkiT0siKTsKK30KKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9y
Zy9idWdzL3Nob3dfYnVnLmNnaT9pZD00MzAzMTAsIFsxLjhdW2NvbXBpbGVyXSBGdW5jdGlvbmFs
IGludGVyZmFjZSBpbmNvcnJlY3RseSByZWplY3RlZCBhcyBub3QgYmVpbmcuCitwdWJsaWMgdm9p
ZCB0ZXN0NDMwMzEwYSgpIHsKKwl0aGlzLnJ1bkNvbmZvcm1UZXN0KAorCQkJbmV3IFN0cmluZ1td
IHsKKwkJCQkiWC5qYXZhIiwKKwkJCQkiQEZ1bmN0aW9uYWxJbnRlcmZhY2VcbiIgKworCQkJCSJw
dWJsaWMgaW50ZXJmYWNlIFg8VDEsIFQyLCBSPiB7XG4iICsKKwkJCQkiICAgIFIgYXBwbHkoVDEg
djEsIFQyIHYyKTtcbiIgKworCQkJCSIgICAgZGVmYXVsdCB2b2lkIG90aGVyKCkge31cbiIgKwor
CQkJCSIgICAgcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuIiArCisJ
CQkJIiAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKFwiT0tcIik7XG4iICsKKwkJCQkiICAgIH1c
biIgKworCQkJCSJ9XG4iCisJCQl9LAorCQkJIk9LIik7Cit9CisvLyBodHRwczovL2J1Z3MuZWNs
aXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDMwMzEwLCBbMS44XVtjb21waWxlcl0gRnVu
Y3Rpb25hbCBpbnRlcmZhY2UgaW5jb3JyZWN0bHkgcmVqZWN0ZWQgYXMgbm90IGJlaW5nLgorcHVi
bGljIHZvaWQgdGVzdDQzMDMxMGIoKSB7CisJdGhpcy5ydW5Db25mb3JtVGVzdCgKKwkJCW5ldyBT
dHJpbmdbXSB7CisJCQkJIlguamF2YSIsCisJCQkJImludGVyZmFjZSBJMSB7XG4iICsKKwkJCQki
CWludCBmb28oU3RyaW5nIHMpO1xuIiArCisJCQkJIn1cbiIgKworCQkJCSJARnVuY3Rpb25hbElu
dGVyZmFjZVxuIiArCisJCQkJImludGVyZmFjZSBBMSBleHRlbmRzIEkxIHtcbiIgKworCQkJCSIJ
QE92ZXJyaWRlXG4iICsKKwkJCQkiCWRlZmF1bHQgaW50IGZvbyhTdHJpbmcgcykge1xuIiArCisJ
CQkJIgkJcmV0dXJuIC0xO1xuIiArCisJCQkJIgl9XG4iICsKKwkJCQkiCWludCBmb28oamF2YS5p
by5TZXJpYWxpemFibGUgcyk7XG4iICsKKwkJCQkifVxuIiArCisJCQkJInB1YmxpYyBjbGFzcyBY
IHtcbiIgKworCQkJCSIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xu
IiArCisJCQkJIgkJU3lzdGVtLm91dC5wcmludGxuKFwiT0tcIik7XG4iICsKKwkJCQkiCX1cbiIg
KworCQkJCSJ9XG4iCisJCQl9LAorCQkJIk9LIik7Cit9CisvLyBodHRwczovL2J1Z3MuZWNsaXBz
ZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDMwMzEwLCBbMS44XVtjb21waWxlcl0gRnVuY3Rp
b25hbCBpbnRlcmZhY2UgaW5jb3JyZWN0bHkgcmVqZWN0ZWQgYXMgbm90IGJlaW5nLgorcHVibGlj
IHZvaWQgdGVzdDQzMDMxMGMoKSB7CisJdGhpcy5ydW5Db25mb3JtVGVzdCgKKwkJCW5ldyBTdHJp
bmdbXSB7CisJCQkJIlguamF2YSIsCisJCQkJImludGVyZmFjZSBJMiB7XG4iICsKKwkJCQkiCWlu
dCBmb28oU3RyaW5nIHMpO1xuIiArCisJCQkJIn1cbiIgKworCQkJCSJARnVuY3Rpb25hbEludGVy
ZmFjZVxuIiArCisJCQkJImludGVyZmFjZSBBMiBleHRlbmRzIEkyIHtcbiIgKworCQkJCSIJQE92
ZXJyaWRlXG4iICsKKwkJCQkiCWRlZmF1bHQgaW50IGZvbyhTdHJpbmcgcykge1xuIiArCisJCQkJ
IgkJcmV0dXJuIC0xO1xuIiArCisJCQkJIgl9XG4iICsKKwkJCQkiCWludCBiYXIoamF2YS5pby5T
ZXJpYWxpemFibGUgcyk7XG4iICsKKwkJCQkifVxuIiArCisJCQkJInB1YmxpYyBjbGFzcyBYIHtc
biIgKworCQkJCSIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuIiAr
CisJCQkJIgkJU3lzdGVtLm91dC5wcmludGxuKFwiT0tcIik7XG4iICsKKwkJCQkiCX1cbiIgKwor
CQkJCSJ9XG4iCisJCQl9LAorCQkJIk9LIik7Cit9CiAKIHB1YmxpYyBzdGF0aWMgQ2xhc3MgdGVz
dENsYXNzKCkgewogCXJldHVybiBMYW1iZGFFeHByZXNzaW9uc1Rlc3QuY2xhc3M7CmRpZmYgLS1n
aXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2Uv
amR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OZWdhdGl2ZUxhbWJkYUV4cHJlc3Np
b25zVGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVnYXRpdmVMYW1i
ZGFFeHByZXNzaW9uc1Rlc3QuamF2YQppbmRleCAzNzI3ZGJjLi5jNTNjNzY5IDEwMDY0NAotLS0g
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0
L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OZWdhdGl2ZUxhbWJkYUV4cHJlc3Npb25z
VGVzdC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9v
cmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFt
YmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKQEAgLTg5NjMsNiArODk2MywzMCBAQAogCQkJIlVuaGFu
ZGxlZCBleGNlcHRpb24gdHlwZSBFeGNlcHRpb25cbiIgKyAKIAkJCSItLS0tLS0tLS0tXG4iKTsK
IH0KKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00MzAz
MTAsIFsxLjhdW2NvbXBpbGVyXSBGdW5jdGlvbmFsIGludGVyZmFjZSBpbmNvcnJlY3RseSByZWpl
Y3RlZCBhcyBub3QgYmVpbmcuCitwdWJsaWMgdm9pZCB0ZXN0NDMwMzEwKCkgeworCXRoaXMucnVu
TmVnYXRpdmVUZXN0KAorCQkJbmV3IFN0cmluZ1tdIHsKKwkJCQkiWC5qYXZhIiwKKwkJCQkiaW50
ZXJmYWNlIEZ1bmMxPFQxLCBSPiB7XG4iICsKKwkJCQkiICAgICAgICBSIGFwcGx5KFQxIHYxKTtc
biIgKworCQkJCSIgICAgICAgIHZvaWQgb3RoZXIoKTtcbiIgKworCQkJCSJ9XG4iICsKKwkJCQki
QEZ1bmN0aW9uYWxJbnRlcmZhY2UgLy8gc3B1cmlvdXMgZXJyb3I6IEYxPFQsIFI+IGlzIG5vdCBh
IGZ1bmN0aW9uYWwgaW50ZXJmYWNlXG4iICsKKwkJCQkiaW50ZXJmYWNlIEYxPFQxLCBSPiBleHRl
bmRzIEZ1bmMxPFQxLCBSPiB7XG4iICsKKwkJCQkiCWRlZmF1bHQgdm9pZCBvdGhlcigpIHt9XG4i
ICsKKwkJCQkifVxuIiArCisJCQkJIkBGdW5jdGlvbmFsSW50ZXJmYWNlXG4iICsKKwkJCQkiaW50
ZXJmYWNlIEYyPFQxLCBSPiBleHRlbmRzIEZ1bmMxPFQxLCBSPiB7XG4iICsKKwkJCQkifVxuIgor
CQkJfSwKKwkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBs
aW5lIDEwKVxuIiArIAorCQkJIglpbnRlcmZhY2UgRjI8VDEsIFI+IGV4dGVuZHMgRnVuYzE8VDEs
IFI+IHtcbiIgKyAKKwkJCSIJICAgICAgICAgIF5eXG4iICsgCisJCQkiSW52YWxpZCBcJ0BGdW5j
dGlvbmFsSW50ZXJmYWNlXCcgYW5ub3RhdGlvbjsgRjI8VDEsUj4gaXMgbm90IGEgZnVuY3Rpb25h
bCBpbnRlcmZhY2VcbiIgKyAKKwkJCSItLS0tLS0tLS0tXG4iKTsKK30KIHB1YmxpYyBzdGF0aWMg
Q2xhc3MgdGVzdENsYXNzKCkgewogCXJldHVybiBOZWdhdGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVz
dC5jbGFzczsKIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUmVmZXJlbmNlQmluZGluZy5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9SZWZlcmVuY2VCaW5kaW5nLmphdmEKaW5kZXggNzU5MzNmZi4u
ZDNhNmFiMCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9SZWZlcmVuY2VCaW5kaW5nLmphdmEK
KysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9SZWZlcmVuY2VCaW5kaW5nLmphdmEKQEAgLTE4NjcsNDggKzE4
NjcsMjkgQEAKIAlpbnQgY29udHJhY3RzQ291bnQgPSAwOwogCWludCBjb250cmFjdHNMZW5ndGgg
PSAwOwogCQotCS8vIC0tIHRoZSBmb2xsb3dpbmcgYXJlIHVzZWQgZm9yIGVhcmx5IHRlcm1pbmF0
aW9uLgotCU1ldGhvZEJpbmRpbmcgYUNvbnRyYWN0ID0gbnVsbDsKLQlpbnQgY29udHJhY3RQYXJh
bWV0ZXJMZW5ndGggPSAwOwotCWNoYXIgW10gY29udHJhY3RTZWxlY3RvciA9IG51bGw7Ci0JLy8g
LS0tCi0JCiAJUmVmZXJlbmNlQmluZGluZyBbXSBzdXBlckludGVyZmFjZXMgPSBzdXBlckludGVy
ZmFjZXMoKTsKIAlmb3IgKGludCBpID0gMCwgbGVuZ3RoID0gc3VwZXJJbnRlcmZhY2VzLmxlbmd0
aDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAJCU1ldGhvZEJpbmRpbmcgW10gc3VwZXJJbnRlcmZhY2VD
b250cmFjdHMgPSBzdXBlckludGVyZmFjZXNbaV0uZ2V0SW50ZXJmYWNlQWJzdHJhY3RDb250cmFj
dHMoc2NvcGUpOwogCQlmaW5hbCBpbnQgc3VwZXJJbnRlcmZhY2VDb250cmFjdHNMZW5ndGggPSBz
dXBlckludGVyZmFjZUNvbnRyYWN0cyA9PSBudWxsICA/IDAgOiBzdXBlckludGVyZmFjZUNvbnRy
YWN0cy5sZW5ndGg7Ci0JCQogCQlpZiAoc3VwZXJJbnRlcmZhY2VDb250cmFjdHNMZW5ndGggPT0g
MCkgY29udGludWU7Ci0JCWlmIChhQ29udHJhY3QgPT0gbnVsbCkgewotCQkJYUNvbnRyYWN0ID0g
c3VwZXJJbnRlcmZhY2VDb250cmFjdHNbMF07Ci0JCQljb250cmFjdFBhcmFtZXRlckxlbmd0aCA9
IGFDb250cmFjdC5wYXJhbWV0ZXJzLmxlbmd0aDsKLQkJCWNvbnRyYWN0U2VsZWN0b3IgPSBhQ29u
dHJhY3Quc2VsZWN0b3I7Ci0JCQljb250cmFjdHMgPSBzdXBlckludGVyZmFjZUNvbnRyYWN0czsK
LQkJCWNvbnRyYWN0c0NvdW50ID0gY29udHJhY3RzTGVuZ3RoID0gc3VwZXJJbnRlcmZhY2VDb250
cmFjdHNMZW5ndGg7Ci0JCX0gZWxzZSB7Ci0JCQlpZiAoc3VwZXJJbnRlcmZhY2VDb250cmFjdHNb
MF0ucGFyYW1ldGVycy5sZW5ndGggIT0gY29udHJhY3RQYXJhbWV0ZXJMZW5ndGggfHwgIUNoYXJP
cGVyYXRpb24uZXF1YWxzKGNvbnRyYWN0U2VsZWN0b3IsIHN1cGVySW50ZXJmYWNlQ29udHJhY3Rz
WzBdLnNlbGVjdG9yKSkgewotCQkJCXRocm93IG5ldyBJbnZhbGlkSW5wdXRFeGNlcHRpb24oIk5v
dCBhIGZ1bmN0aW9uYWwgaW50ZXJmYWNlIik7IC8vJE5PTi1OTFMtMSQKLQkJCX0KLQkJCWlmIChj
b250cmFjdHNMZW5ndGggPCBjb250cmFjdHNDb3VudCArIHN1cGVySW50ZXJmYWNlQ29udHJhY3Rz
TGVuZ3RoKSB7Ci0JCQkJU3lzdGVtLmFycmF5Y29weShjb250cmFjdHMsIDAsIGNvbnRyYWN0cyA9
IG5ldyBNZXRob2RCaW5kaW5nW2NvbnRyYWN0c0xlbmd0aCA9IGNvbnRyYWN0c0NvdW50ICsgc3Vw
ZXJJbnRlcmZhY2VDb250cmFjdHNMZW5ndGhdLCAwLCBjb250cmFjdHNDb3VudCk7Ci0JCQl9Ci0J
CQlTeXN0ZW0uYXJyYXljb3B5KHN1cGVySW50ZXJmYWNlQ29udHJhY3RzLCAwLCBjb250cmFjdHMs
IGNvbnRyYWN0c0NvdW50LAlzdXBlckludGVyZmFjZUNvbnRyYWN0c0xlbmd0aCk7Ci0JCQljb250
cmFjdHNDb3VudCArPSBzdXBlckludGVyZmFjZUNvbnRyYWN0c0xlbmd0aDsKKwkJaWYgKGNvbnRy
YWN0c0xlbmd0aCA8IGNvbnRyYWN0c0NvdW50ICsgc3VwZXJJbnRlcmZhY2VDb250cmFjdHNMZW5n
dGgpIHsKKwkJCVN5c3RlbS5hcnJheWNvcHkoY29udHJhY3RzLCAwLCBjb250cmFjdHMgPSBuZXcg
TWV0aG9kQmluZGluZ1tjb250cmFjdHNMZW5ndGggPSBjb250cmFjdHNDb3VudCArIHN1cGVySW50
ZXJmYWNlQ29udHJhY3RzTGVuZ3RoXSwgMCwgY29udHJhY3RzQ291bnQpOwogCQl9CisJCVN5c3Rl
bS5hcnJheWNvcHkoc3VwZXJJbnRlcmZhY2VDb250cmFjdHMsIDAsIGNvbnRyYWN0cywgY29udHJh
Y3RzQ291bnQsCXN1cGVySW50ZXJmYWNlQ29udHJhY3RzTGVuZ3RoKTsKKwkJY29udHJhY3RzQ291
bnQgKz0gc3VwZXJJbnRlcmZhY2VDb250cmFjdHNMZW5ndGg7CiAJfQorCiAJZm9yIChpbnQgaSA9
IDAsIGxlbmd0aCA9IG1ldGhvZHMgPT0gbnVsbCA/IDAgOiBtZXRob2RzLmxlbmd0aDsgaSA8IGxl
bmd0aDsgaSsrKSB7CiAJCWZpbmFsIE1ldGhvZEJpbmRpbmcgbWV0aG9kID0gbWV0aG9kc1tpXTsK
LQkJaWYgKG1ldGhvZC5pc1N0YXRpYygpIHx8IG1ldGhvZC5yZWRlY2xhcmVzUHVibGljT2JqZWN0
TWV0aG9kKHNjb3BlKSkgY29udGludWU7CisJCWlmIChtZXRob2QgPT0gbnVsbCB8fCBtZXRob2Qu
aXNTdGF0aWMoKSB8fCBtZXRob2QucmVkZWNsYXJlc1B1YmxpY09iamVjdE1ldGhvZChzY29wZSkp
IAorCQkJY29udGludWU7CisJCWlmICghbWV0aG9kLmlzVmFsaWRCaW5kaW5nKCkpIAorCQkJdGhy
b3cgbmV3IEludmFsaWRJbnB1dEV4Y2VwdGlvbigiTm90IGEgZnVuY3Rpb25hbCBpbnRlcmZhY2Ui
KTsgLy8kTk9OLU5MUy0xJAogCQlpZiAobWV0aG9kLmlzRGVmYXVsdE1ldGhvZCgpKSB7CiAJCQlm
b3IgKGludCBqID0gMDsgaiA8IGNvbnRyYWN0c0NvdW50OyBqKyspIHsKIAkJCQlpZiAoY29udHJh
Y3RzW2pdID09IG51bGwpCiAJCQkJCWNvbnRpbnVlOwogCQkJCWlmIChNZXRob2RWZXJpZmllci5k
b2VzTWV0aG9kT3ZlcnJpZGUobWV0aG9kLCBjb250cmFjdHNbal0sIHNjb3BlLmVudmlyb25tZW50
KCkpKSB7Ci0JCQkJCWlmIChhQ29udHJhY3QgPT0gY29udHJhY3RzW2pdKSB7Ci0JCQkJCQlhQ29u
dHJhY3QgPSBudWxsOwotCQkJCQkJY29udHJhY3RQYXJhbWV0ZXJMZW5ndGggPSAwOwotCQkJCQkJ
Y29udHJhY3RTZWxlY3RvciA9IG51bGw7Ci0JCQkJCX0KIAkJCQkJY29udHJhY3RzQ291bnQtLTsK
IAkJCQkJLy8gYWJzdHJhY3QgbWV0aG9kIGZyb20gc3VwZXIgdHlwZSByZW5kZXJlZCBkZWZhdWx0
IGJ5IHByZXNlbnQgaW50ZXJmYWNlID09PiBjb250cmFjdHNbal0gPSBudWxsOwogCQkJCQlpZiAo
aiA8IGNvbnRyYWN0c0NvdW50KQpAQCAtMTkxNiwxNiArMTg5Nyw2IEBACiAJCQkJfQogCQkJfQog
CQkJY29udGludWU7IC8vIHNraXAgZGVmYXVsdCBtZXRob2QgaXRzZWxmCi0JCX0KLQkJZmluYWwg
Ym9vbGVhbiB2YWxpZEJpbmRpbmcgPSBtZXRob2QuaXNWYWxpZEJpbmRpbmcoKTsKLQkJaWYgKGFD
b250cmFjdCA9PSBudWxsICYmIHZhbGlkQmluZGluZykgewotCQkJYUNvbnRyYWN0ID0gbWV0aG9k
OwotCQkJY29udHJhY3RQYXJhbWV0ZXJMZW5ndGggPSBhQ29udHJhY3QucGFyYW1ldGVycy5sZW5n
dGg7Ci0JCQljb250cmFjdFNlbGVjdG9yID0gYUNvbnRyYWN0LnNlbGVjdG9yOwotCQl9IGVsc2Ug
ewotCQkJaWYgKCF2YWxpZEJpbmRpbmcgfHwgbWV0aG9kLnBhcmFtZXRlcnMubGVuZ3RoICE9IGNv
bnRyYWN0UGFyYW1ldGVyTGVuZ3RoIHx8ICFDaGFyT3BlcmF0aW9uLmVxdWFscyhjb250cmFjdFNl
bGVjdG9yLCBtZXRob2Quc2VsZWN0b3IpKSB7Ci0JCQkJdGhyb3cgbmV3IEludmFsaWRJbnB1dEV4
Y2VwdGlvbigiTm90IGEgZnVuY3Rpb25hbCBpbnRlcmZhY2UiKTsgLy8kTk9OLU5MUy0xJAotCQkJ
fQogCQl9CiAJCWlmIChjb250cmFjdHNDb3VudCA9PSBjb250cmFjdHNMZW5ndGgpIHsKIAkJCVN5
c3RlbS5hcnJheWNvcHkoY29udHJhY3RzLCAwLCBjb250cmFjdHMgPSBuZXcgTWV0aG9kQmluZGlu
Z1tjb250cmFjdHNMZW5ndGggKz0gMTZdLCAwLCBjb250cmFjdHNDb3VudCk7CkBAIC0xOTUyLDE1
ICsxOTIzLDMyIEBACiAJTWV0aG9kQmluZGluZ1tdIG1ldGhvZHMgPSBudWxsOwogCXRyeSB7CiAJ
CW1ldGhvZHMgPSBnZXRJbnRlcmZhY2VBYnN0cmFjdENvbnRyYWN0cyhzY29wZSk7CisJCWlmICht
ZXRob2RzID09IG51bGwgfHwgbWV0aG9kcy5sZW5ndGggPT0gMCkKKwkJCXJldHVybiB0aGlzLnNp
bmdsZUFic3RyYWN0TWV0aG9kW2luZGV4XSA9IHNhbVByb2JsZW1CaW5kaW5nOworCQlpbnQgY29u
dHJhY3RQYXJhbWV0ZXJMZW5ndGggPSAwOworCQljaGFyIFtdIGNvbnRyYWN0U2VsZWN0b3IgPSBu
dWxsOworCQlmb3IgKGludCBpID0gMCwgbGVuZ3RoID0gbWV0aG9kcy5sZW5ndGg7IGkgPCBsZW5n
dGg7IGkrKykgeworCQkJTWV0aG9kQmluZGluZyBtZXRob2QgPSBtZXRob2RzW2ldOworCQkJaWYg
KG1ldGhvZCA9PSBudWxsKSBjb250aW51ZTsKKwkJCWlmIChjb250cmFjdFNlbGVjdG9yID09IG51
bGwpIHsKKwkJCQljb250cmFjdFNlbGVjdG9yID0gbWV0aG9kLnNlbGVjdG9yOworCQkJCWNvbnRy
YWN0UGFyYW1ldGVyTGVuZ3RoID0gbWV0aG9kLnBhcmFtZXRlcnMgPT0gbnVsbCA/IDAgOiBtZXRo
b2QucGFyYW1ldGVycy5sZW5ndGg7CisJCQl9IGVsc2UgeworCQkJCWludCBtZXRob2RQYXJhbWV0
ZXJMZW5ndGggPSBtZXRob2QucGFyYW1ldGVycyA9PSBudWxsID8gMCA6IG1ldGhvZC5wYXJhbWV0
ZXJzLmxlbmd0aDsKKwkJCQlpZiAobWV0aG9kUGFyYW1ldGVyTGVuZ3RoICE9IGNvbnRyYWN0UGFy
YW1ldGVyTGVuZ3RoIHx8ICFDaGFyT3BlcmF0aW9uLmVxdWFscyhtZXRob2Quc2VsZWN0b3IsIGNv
bnRyYWN0U2VsZWN0b3IpKQorCQkJCQlyZXR1cm4gdGhpcy5zaW5nbGVBYnN0cmFjdE1ldGhvZFtp
bmRleF0gPSBzYW1Qcm9ibGVtQmluZGluZzsKKwkJCX0KKwkJfQogCX0gY2F0Y2ggKEludmFsaWRJ
bnB1dEV4Y2VwdGlvbiBlKSB7CiAJCXJldHVybiB0aGlzLnNpbmdsZUFic3RyYWN0TWV0aG9kW2lu
ZGV4XSA9IHNhbVByb2JsZW1CaW5kaW5nOwogCX0KLQlpZiAobWV0aG9kcyAhPSBudWxsICYmIG1l
dGhvZHMubGVuZ3RoID09IDEpCisJaWYgKG1ldGhvZHMubGVuZ3RoID09IDEpCiAJCXJldHVybiB0
aGlzLnNpbmdsZUFic3RyYWN0TWV0aG9kW2luZGV4XSA9IG1ldGhvZHNbMF07CiAJCiAJZmluYWwg
TG9va3VwRW52aXJvbm1lbnQgZW52aXJvbm1lbnQgPSBzY29wZS5lbnZpcm9ubWVudCgpOwogCWJv
b2xlYW4gZ2VuZXJpY01ldGhvZFNlZW4gPSBmYWxzZTsKIAlpbnQgbGVuZ3RoID0gbWV0aG9kcy5s
ZW5ndGg7CisJCiAJbmV4dDpmb3IgKGludCBpID0gbGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHsK
IAkJTWV0aG9kQmluZGluZyBtZXRob2QgPSBtZXRob2RzW2ldLCBvdGhlck1ldGhvZCA9IG51bGw7
CiAJCWlmIChtZXRob2QudHlwZVZhcmlhYmxlcyAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVT
KQ==
</data>

          </attachment>
      

    </bug>

</bugzilla>