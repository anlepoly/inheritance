<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>434374</bug_id>
          
          <creation_ts>2014-05-07 16:13:00 -0400</creation_ts>
          <short_desc>Nullpointer analysis completely broken in M7</short_desc>
          <delta_ts>2014-05-19 05:42:51 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Mac OS X</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>critical</bug_severity>
          <target_milestone>4.4 RC1</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Schindl">tom.schindl</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>jarthana</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="62225"
          type_id="1"
          status="+"
          setter="jarthana"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2398532</commentid>
    <comment_count>0</comment_count>
      <attachid>242814</attachid>
    <who name="Thomas Schindl">tom.schindl</who>
    <bug_when>2014-05-07 16:13:18 -0400</bug_when>
    <thetext>Created attachment 242814
sample project

At the moment you turn on NPE analysis you get strange errors</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2398569</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-07 17:10:45 -0400</bug_when>
    <thetext>To make sure we&apos;re on the same page, I&apos;m seeing two errors reported:

Null type mismatch: required &apos;@NonNull T&apos; but the provided value is null	TestGeneric.java	/TestJ8Plugin/src/bal	line 8	Java Problem

The method adapt(@Nullable Object, @NonNull Class&lt;A&gt;, AdapterService.ValueAccess...) from AdapterServiceImpl cannot implement the corresponding method from AdapterService due to incompatible nullness constraints	AdapterServiceImpl.java	/TestJ8Plugin/src/bal	line 20	Java Problem


The first one indicates that bug 430150 is incomplete in that it doesn&apos;t respect the @NonNull, that should indeed overrule the extra strict mode for type variables.

I don&apos;t immediately see why the second error is reported. Most likely unrelated, in which case I will address that one in a separate bug.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2398571</commentid>
    <comment_count>2</comment_count>
    <who name="Thomas Schindl">tom.schindl</who>
    <bug_when>2014-05-07 17:15:24 -0400</bug_when>
    <thetext>Correct I see those 2 errors - BTW both problems do NOT show up in M6+JDT8-Patch-Feature - they have been introduced since then!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2398579</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-07 18:11:23 -0400</bug_when>
    <thetext>Both problems are actually related, both are a consequence of the fix for bug 430150. 

I have a fix under test for the second problem, the first should be even easier to fix.

Thanks for the report, BTW!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2398834</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-08 09:09:14 -0400</bug_when>
    <thetext>wait a minute:

	@NonNull
	public T test() {
		return null;
	}

are you sure you meant to say @NonNull and return null?

This compiles fine:

	public @Nullable T test() {
		return null;
	}

(type annotations before modifiers is not recommended, btw)

For this case I overeagerly admitted we have a bug, but now I don&apos;t see one anymore. Am I missing anything?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2398835</commentid>
    <comment_count>5</comment_count>
    <who name="Thomas Schindl">tom.schindl</who>
    <bug_when>2014-05-08 09:10:38 -0400</bug_when>
    <thetext>Correct - too late in the night ;-)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2398837</commentid>
    <comment_count>6</comment_count>
    <who name="Thomas Schindl">tom.schindl</who>
    <bug_when>2014-05-08 09:13:10 -0400</bug_when>
    <thetext>but this fails as well:

package npeanaylsis;


public class TestGeneric&lt;T&gt; {
	public T test() {
		return null;
	}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2398842</commentid>
    <comment_count>7</comment_count>
    <who name="Thomas Schindl">tom.schindl</who>
    <bug_when>2014-05-08 09:14:53 -0400</bug_when>
    <thetext>give me:

Null type mismatch (type annotations): &apos;null&apos; is not compatible to the free type variable &apos;T&apos;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2398861</commentid>
    <comment_count>8</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-08 09:43:11 -0400</bug_when>
    <thetext>(In reply to Thomas Schindl from comment #6)
&gt; but this fails as well:
&gt; 
&gt; package npeanaylsis;
&gt; 
&gt; 
&gt; public class TestGeneric&lt;T&gt; {
&gt; 	public T test() {
&gt; 		return null;
&gt; 	}
&gt; }

Exactly, and that&apos;s intentional and unavoidable if you want to allow clients to use any type &quot;TestGeneric&lt;@NonNull Foo&gt;&quot; - they would not be happy (read: kill you :) ) if test() returns null on that type where T equals &quot;@NonNull Foo&quot;.

See bug 430150 and also slide #19 of https://www.eclipsecon.org/na2014/sites/default/files/slides/JDTEmbracesTypeAnnotations.pdf</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2398864</commentid>
    <comment_count>9</comment_count>
    <who name="Thomas Schindl">tom.schindl</who>
    <bug_when>2014-05-08 09:47:31 -0400</bug_when>
    <thetext>so if i turn null analysis in my project I need to annotate ANY method which returns null with @Nullable - I could buy that if i would have used

@NonNullByDefault
public class TestGeneric&lt;T&gt; {


but I have not!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2398867</commentid>
    <comment_count>10</comment_count>
    <who name="Thomas Schindl">tom.schindl</who>
    <bug_when>2014-05-08 09:49:28 -0400</bug_when>
    <thetext>and just as an addition:

package npeanaylsis;

public class TestGeneric&lt;T&gt; {
	public &lt;T&gt; test() {
		return null;
	}
	
	public String test2() {
		return null;
	}
}



is fine as well but one is not allowed to return null when generic arguments are involved - so IMHO there is a bug</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2398890</commentid>
    <comment_count>11</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-08 10:09:35 -0400</bug_when>
    <thetext>(In reply to Thomas Schindl from comment #9)
&gt; so if i turn null analysis in my project I need to annotate ANY method which
&gt; returns null with @Nullable - 

No, only methods with a return type of a type variable with no null constraint.

Please do read the linked bug if you want to further discuss this.



(In reply to Thomas Schindl from comment #10)
&gt; and just as an addition:
&gt; 
&gt; package npeanaylsis;
&gt; 
&gt; public class TestGeneric&lt;T&gt; {
&gt; 	public &lt;T&gt; test() {
&gt; 		return null;
&gt; 	}
&gt; 	
&gt; 	public String test2() {
&gt; 		return null;
&gt; 	}
&gt; }
&gt; 
&gt; 
&gt; 
&gt; is fine as well but one is not allowed to return null when generic arguments
&gt; are involved - so IMHO there is a bug

The difference between String and T is:
- String: I don&apos;t care about nullness (and leave all the risks to clients)
- T: I allow you (my clients) to specify nullness constraints (either way)

The stricter checking is the foundation for using null annotations on type arguments.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2398891</commentid>
    <comment_count>12</comment_count>
      <attachid>242849</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-08 10:11:15 -0400</bug_when>
    <thetext>Created attachment 242849
patch under test

This patch fixes the issue regarding method overriding, second problem mentioned in comment 1.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2398906</commentid>
    <comment_count>13</comment_count>
      <attachid>242852</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-08 10:28:19 -0400</bug_when>
    <thetext>Created attachment 242852
updated patch

The patch after massage to work well at 1.7-</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2398915</commentid>
    <comment_count>14</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-08 10:38:04 -0400</bug_when>
    <thetext>Jay, I believe this should be fixed for RC1.

Description of the change:

The stricter checking from bug 430150 requires that we detect identical type variables of required and provided types. However, when checking method overriding, each method introduces its own type parameters and hence we cannot directly detect identity.

To remedy, I augment the signature of NAM.analyse(..) by an argument &quot;providedSubstitute&quot; which maps the provided type into the realm of the required type (inherited method vs. overriding method). If regular identity check fails, check against the providedSubstitute (inside NAM.areSameTypes()) detects the identity as desired.

The enhanced version of NAM.analyse() is invoked only from INAV.checkNullSpecInheritance(), where substitution is performed using the type variables corresponding to the required type together with the provided type. Directions provided/required are inverse between parameter checking and return checking. Additionally we still need to pass the unsubstituted provided type, because only this type has the accurate null type annotations on it.

By being called only from INAV.checkNullSpecInheritance(), none of this code is executed when null annotations analysis is disabled.

All tests are currently running.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2398940</commentid>
    <comment_count>15</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-08 11:19:13 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #14)
&gt; All tests are currently running.

RunJDTCoreTests is green.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2398970</commentid>
    <comment_count>16</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-08 12:26:11 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #13)
&gt; Created attachment 242852 [details]
&gt; updated patch

Patch looks good to me. +1 for RC1.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2398974</commentid>
    <comment_count>17</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-08 12:37:27 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #16)
&gt; (In reply to Stephan Herrmann from comment #13)
&gt; &gt; Created attachment 242852 [details]
&gt; &gt; updated patch
&gt; 
&gt; Patch looks good to me. +1 for RC1.

Thanks.

Released for 4.4 RC1 via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=6eea20ade3a92e767b892a10ecaadeddc013ba12

The patch fixes the second issue mentioned in comment 1 and contains positive and negative test variants regarding the first issue.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2400185</commentid>
    <comment_count>18</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-05-12 07:29:43 -0400</bug_when>
    <thetext>This was going to go to bug 430150 but since it&apos;s been closed for a week already I&apos;ll add it here:

		HashMap&lt;@NonNull String, @NonNull String&gt; map = new HashMap&lt;&gt;();
		@NonNull String string = map.get(&quot;no such key&quot;);
		System.out.println(string.length());

It seems wrong to me that client code can dictate the internal and external null-policy for generic classes. And it leads to a contradiction:

	static &lt;E&gt; E get(ConcurrentHashMap&lt;String, E&gt; map, String key) {
		E e = map.get(key);
		if(e != null) {
			return e;
		}
		// Redundant null check: The variable e can only be null at this location
		if(e == null) {
			return null;
		}
		return e;
	}

The warning claims the variable e to be null but what if the client declared the type @NonNull? Any comparisons against null using a free type variable should get a warning just like returning a null does, which implies that such type variables have to be made Nullable (or the comparison to null doesn&apos;t make sense), which implies that free type variables should be considered Nullable by default.

This all means that the correct way to write MyMap from bug 430150 comment 18 is actually this:
//---
import java.util.*;
import org.eclipse.jdt.annotation.*;

public class MyMap&lt;K,V&gt; extends HashMap&lt;K,V&gt; {
	@Override
	public @Nullable V get(Object key) {
		return null;
	}
}
//---
import java.util.*;
import org.eclipse.jdt.annotation.*;

public class Client {
	public static void main(String[] args) {
		Map&lt;String, @NonNull String&gt; map = new MyMap&lt;&gt;();
		System.out.println(map.get(&quot;&quot;).toUpperCase());
	}
}
//---
This leaves an open question: what should the type of map.get(&quot;&quot;) in the above be? It should &quot;obviously&quot; be @Nullable String, but the types disagree and the current ECJ accepts both @Nullable String and @NonNull String.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2403520</commentid>
    <comment_count>19</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-05-19 05:10:22 -0400</bug_when>
    <thetext>Verified for 4.4 RC1 using I20140518-2000 build</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>242814</attachid>
            <date>2014-05-07 16:13:00 -0400</date>
            <delta_ts>2014-05-07 16:13:18 -0400</delta_ts>
            <desc>sample project</desc>
            <filename>project.zip</filename>
            <type>application/zip</type>
            <size>6771</size>
            <attacher name="Thomas Schindl">tom.schindl</attacher>
            
              <data encoding="base64">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
dWdpbi9iaW4vYmFsL1Rlc3RHZW5lcmljLmNsYXNzZZBNS8NAEIbfTb9rtR/WqngSPKQezMWTLYEi
KEKoYEPvm3SpW9JNSTYF/5WeBA/+AH+UOKlR+rGHmdl3Z5552a/vj08A1zgtwWCoezywXBHre6FE
JP0S8gyNGV9yK+Bqaj16M+FrhmJfKqlthpzZHTPkb8OJqCKHSg0FFInjSCWGydwTkcu9QDC0nNDn
wZhHMr1nYl4/y5ih6Wyt7TF0NvtfFn8zne3mvuv27F4KI42hbXadbcP0WhnJqeI6iQhRMLs0w3D2
lCgt5+JBLWUsiT5QKtRcy1CRqwsnjKaW8AO5iIU1m2iL/z9bw1ANkyAgSHUUJpEv7mRqrrHm6yp1
wWD23ZtdQ/auhHPQfyI9BlX0jxRLdBtQZpQLl+8ov1GRQ5Vi8VfEHsVaVtewT/lgQ6lTJmdo0lxr
BT9EO5s/opyusLMVBnvd4pfX+MYO38j4BjqreJxtOPkBUEsHCHR1r5hZAQAAWAIAAFBLAwQUAAgI
CAA5r6dEAAAAAAAAAAAAAAAAHQAAAFRlc3RKOFBsdWdpbi9idWlsZC5wcm9wZXJ0aWVzK84vLUpO
1dNTsFUoLkrW58ovLSkoLQHzkzLz9LmAhF5mXnJOaUpqMVDM1zXEUdfTz01fJ4ZLARXocQEAUEsH
CB907fk8AAAATAAAAFBLAwQUAAgICAB0sadEAAAAAAAAAAAAAAAAKAAAAFRlc3RKOFBsdWdpbi9z
cmMvYmFsL0FkYXB0ZXJTZXJ2aWNlLmphdmHNVMFu2zAMPcdfwWNbpHK73bYgi1cMw4ChLZBid1lm
bbWyZEhygmDov4+SHMfJdtiGDpgOQSTxPZLv0covXndlcAE3pttZWTcezsQ5vLm6fgsf0fm1Ub2X
RjPugesKjG/QOhYQhVIQEQ4sOrQbrBg8NNJBZ01teRsBFA9cCNN2XO+krqHlHq3kygUObpEOKgrZ
cKl4qRB6XaGNMIprHZjHuPkklOwcwn1fKingqxSoabu5ZleBaNtI0YyJJDoCUSWVdN7KMrYwj/XQ
4SEX9wHbeN+9y/PtdsswZWHG1rnCmqscO3W5ub5ijW8VBSepdCI11r0LB2E9mBbWopG6UrDwpmUu
bVYlqegOKi7hEqSWnhSA4v5LqqntFLaoPQ9BxPi6K886Lp55jVBy9T7LKJ2xHqjHsd+nyjOutUkV
sFujb3tFsb8RSnFBS+LN0yStaRTInb0lSpktuWGAV7wLQ0TtO881RYRDHScK/K7DMFVUazJYarL/
kVNUEXBo97Tfs1lINAtGNCieQaYBGVkFpSgxpcMqJInDxG2NPuaJ2Piz6niYU2d6K/CufELh4/lk
BWy6B3MIGICJ9GHPeQI7Tbmy6HurYSFMhUtve1zk8W9oIZGfFD8HVDTkCfBI38weEfjybDZoVRqj
kIAEjmKdrfauQGrqqMM5rAZ/4UZx5xYflpNGzsnIUeDI9rME/5OmCbThqsdCCHQO3SkuXoa3gW6P
jIhv0zAmQ2fGDmpr0mdiTwyjeYctd0AzC51xTpLCgxOj4qMpi2IJRcL9oR/F1I85fDv0xhg7bvXI
rXtrNrKipy+1GlyKwe54Wg5f1oQ5fFaJKDB9Ru/DWx0EihTpOP0Okj/jLu1PHBrPpyonC34lboyl
4qYKjhLeLeEOSIhY6Nko05qeX6qOMsX+/3Xdf1NicpIuU5Gzl+wl+wFQSwcInZycn7sCAAC3BwAA
UEsDBBQACAgIAHyxp0QAAAAAAAAAAAAAAAAsAAAAVGVzdEo4UGx1Z2luL3NyYy9iYWwvQWRhcHRl
clNlcnZpY2VJbXBsLmphdmGtUsFu2zAMPcdfwWNbJHKy3bogi9fuUGBoCjTYnZYZW50sGRKdIBj6
76OtNtl6WoHyRunx8fGR+dXHRgZXcOO7YzB1w3ChL+HTfPEZvlHkR297Nt4pZEBXgeeGQlRDRWEt
jBURAkUKe6oUbBsToQu+DtiOBYIH1Nq3HbqjcTW0yBQM2jhwYCB5qASyR2OxtAS9qyiMZYJrI/jd
mHzX1nSR4KEvrdHww2hyku4Xaj4QHRqjm1MjQ1GKREllIgdTjiNMRz3yeO6FPNQ2zN11nh8OB0Wp
i/Khzi3VaHPq7Gy/mKuGWyvgZJVLpD7E6+FhiK1v4VE3xlUWluxbFVOyLsXFeHZxBTMwzrA4AMXD
XdLUdpZacowDSBg/NvKsQ/0La4IS7Zcsk3Y+MMiMp3mfKlbonE8K1L13970V7H9ABTd4KbxZnk7p
lnbYW34z1usiscJONgvDxcgSpUD0paVqizFCkQCP6f9OSM5Mb3/hd5ZN1ps9hWAqyiYvRKX3ltCB
RjfiL9avMmFTPpFmiL4PmlIyhfXLwHAzKFh+XQFjqIm3x44upcdkkuew3dxuoJCtz2pyFOSMK2iJ
G19B5L4UUCDug4OdHLf4MXn+V9tJw0nmslhBkQx5p8Lib4VT+Im2p0JrilEpBftzSvH9+t24epH/
nP0BUEsHCBChxLDzAQAAagQAAFBLAwQUAAgICADwsKdEAAAAAAAAAAAAAAAAJQAAAFRlc3RKOFBs
dWdpbi9zcmMvYmFsL1Rlc3RHZW5lcmljLmphdmEtzDEOwjAMQNE5PoVHWHIBEGJj65QLuMGqDMaJ
EmeqencK6vyffqX8poVxJr2AfGppjqUtkbNK7RxfT49kVpxcisWp2DR0pwB1zCoZs1LvmLj7g42b
5Gu64QrhflAIB0zoOzqdfzE09tEM7f8KG2zwBVBLBwgZnIR/cQAAAIkAAABQSwECFAAUAAgICABZ
sadEl0v6Z80AAABxAQAAFwAAAAAAAAAAAAAAAAAAAAAAVGVzdEo4UGx1Z2luLy5jbGFzc3BhdGhQ
SwECFAAUAAgICABIrqdEPICuZOcAAACFAgAAFQAAAAAAAAAAAAAAAAASAQAAVGVzdEo4UGx1Z2lu
Ly5wcm9qZWN0UEsBAhQAFAAICAgAWbGnRF1xQG6zBAAAAxoAADEAAAAAAAAAAAAAAAAAPAIAAFRl
c3RKOFBsdWdpbi8uc2V0dGluZ3Mvb3JnLmVjbGlwc2UuamR0LmNvcmUucHJlZnNQSwECFAAUAAgI
CABZsadE0LOSyp4AAAD+AAAAIQAAAAAAAAAAAAAAAABOBwAAVGVzdEo4UGx1Z2luL01FVEEtSU5G
L01BTklGRVNULk1GUEsBAhQAFAAICAgAdLGnRGwu5bc9AQAAdAIAADUAAAAAAAAAAAAAAAAAOwgA
AFRlc3RKOFBsdWdpbi9iaW4vYmFsL0FkYXB0ZXJTZXJ2aWNlJFZhbHVlQWNjZXNzLmNsYXNzUEsB
AhQAFAAICAgAdLGnRJoscMtVAQAA4AIAACkAAAAAAAAAAAAAAAAA2wkAAFRlc3RKOFBsdWdpbi9i
aW4vYmFsL0FkYXB0ZXJTZXJ2aWNlLmNsYXNzUEsBAhQAFAAICAgAfLGnRDWfsEo4AgAAJAUAAC0A
AAAAAAAAAAAAAAAAhwsAAFRlc3RKOFBsdWdpbi9iaW4vYmFsL0FkYXB0ZXJTZXJ2aWNlSW1wbC5j
bGFzc1BLAQIUABQACAgIAFqxp0R0da+YWQEAAFgCAAAmAAAAAAAAAAAAAAAAABoOAABUZXN0SjhQ
bHVnaW4vYmluL2JhbC9UZXN0R2VuZXJpYy5jbGFzc1BLAQIUABQACAgIADmvp0QfdO35PAAAAEwA
AAAdAAAAAAAAAAAAAAAAAMcPAABUZXN0SjhQbHVnaW4vYnVpbGQucHJvcGVydGllc1BLAQIUABQA
CAgIAHSxp0SdnJyfuwIAALcHAAAoAAAAAAAAAAAAAAAAAE4QAABUZXN0SjhQbHVnaW4vc3JjL2Jh
bC9BZGFwdGVyU2VydmljZS5qYXZhUEsBAhQAFAAICAgAfLGnRBChxLDzAQAAagQAACwAAAAAAAAA
AAAAAAAAXxMAAFRlc3RKOFBsdWdpbi9zcmMvYmFsL0FkYXB0ZXJTZXJ2aWNlSW1wbC5qYXZhUEsB
AhQAFAAICAgA8LCnRBmchH9xAAAAiQAAACUAAAAAAAAAAAAAAAAArBUAAFRlc3RKOFBsdWdpbi9z
cmMvYmFsL1Rlc3RHZW5lcmljLmphdmFQSwUGAAAAAAwADADtAwAAcBYAAAAA
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>242849</attachid>
            <date>2014-05-08 10:11:00 -0400</date>
            <delta_ts>2014-05-08 10:28:19 -0400</delta_ts>
            <desc>patch under test</desc>
            <filename>Bug-434374--Nullpointer-analysis-completely-broken-i.patch</filename>
            <type>text/plain</type>
            <size>13938</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxBbm5vdGF0aW9u
VGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbEFubm90YXRpb25U
ZXN0LmphdmEKaW5kZXggM2VmYjY5Ni4uZTBiMDJhYSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Nv
bXBpbGVyL3JlZ3Jlc3Npb24vTnVsbEFubm90YXRpb25UZXN0LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3Rz
L2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbEFubm90YXRpb25UZXN0LmphdmEKQEAgLTcyOTQsNCAr
NzI5NCwxMzkgQEAKIAkJIlBvdGVudGlhbCBudWxsIHBvaW50ZXIgYWNjZXNzOiBUaGlzIGV4cHJl
c3Npb24gb2YgdHlwZSBCb29sZWFuIG1heSBiZSBudWxsIGJ1dCByZXF1aXJlcyBhdXRvLXVuYm94
aW5nXG4iICsgCiAJCSItLS0tLS0tLS0tXG4iKTsKIH0KK3B1YmxpYyB2b2lkIHRlc3RCdWc0MzQz
NzQoKSB7CisJcnVuQ29uZm9ybVRlc3RXaXRoTGlicygKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJi
YWwvQWRhcHRlclNlcnZpY2UuamF2YSIsCisJCQkiLyoqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiIg
KyAKKwkJCSIgKiBDb3B5cmlnaHQgKGMpIDIwMTMgQmVzdFNvbHV0aW9uLmF0IGFuZCBvdGhlcnMu
XG4iICsgCisJCQkiICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUg
YWNjb21wYW55aW5nIG1hdGVyaWFsc1xuIiArIAorCQkJIiAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1
bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMFxuIiArIAor
CQkJIiAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxh
YmxlIGF0XG4iICsgCisJCQkiICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEw
Lmh0bWxcbiIgKyAKKwkJCSIgKlxuIiArIAorCQkJIiAqIENvbnRyaWJ1dG9yczpcbiIgKyAKKwkJ
CSIgKiAgICAgVG9tIFNjaGluZGwgPHRvbS5zY2hpbmRsQGJlc3Rzb2x1dGlvbi5hdD4gLSBpbml0
aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb25cbiIgKyAKKwkJCSIgKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKi9cbiIgKyAKKwkJCSJwYWNrYWdlIGJhbDtcbiIgKyAKKwkJCSJcbiIgKyAKKwkJCSJpbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTm9uTnVsbDtcbiIgKyAKKwkJCSJpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTnVsbGFibGU7XG4iICsgCisJCQkicHVibGljIGlu
dGVyZmFjZSBBZGFwdGVyU2VydmljZSB7XG4iICsgCisJCQkiCXB1YmxpYyBib29sZWFuIGNhbkFk
YXB0KEBOdWxsYWJsZSBPYmplY3Qgc291cmNlT2JqZWN0LCBATm9uTnVsbCBDbGFzczw/PiB0YXJn
ZXRUeXBlKTtcbiIgKyAKKwkJCSJcbiIgKyAKKwkJCSIJQE51bGxhYmxlXG4iICsgCisJCQkiCXB1
YmxpYyA8QT4gQSBhZGFwdChATnVsbGFibGUgT2JqZWN0IHNvdXJjZU9iamVjdCwgQE5vbk51bGwg
Q2xhc3M8QT4gdGFyZ2V0VHlwZSwgVmFsdWVBY2Nlc3MuLi4gdmFsdWVBY2Nlc3Nlcyk7XG4iICsg
CisJCQkiXG4iICsgCisJCQkiCXB1YmxpYyBpbnRlcmZhY2UgVmFsdWVBY2Nlc3Mge1xuIiArIAor
CQkJIgkJQE51bGxhYmxlXG4iICsgCisJCQkiCQlwdWJsaWMgPE8+IE8gZ2V0VmFsdWUoQE5vbk51
bGwgU3RyaW5nIGtleSk7XG4iICsgCisJCQkiXG4iICsgCisJCQkiCQlATnVsbGFibGVcbiIgKyAK
KwkJCSIJCXB1YmxpYyA8Tz4gTyBnZXRWYWx1ZShATm9uTnVsbCBDbGFzczxPPiBrZXkpO1xuIiAr
IAorCQkJIgl9XG4iICsgCisJCQkifVxuIiwKKwkJCSJiYWwvQWRhcHRlclNlcnZpY2VJbXBsLmph
dmEiLAorCQkJIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4iICsgCisJCQkiICogQ29weXJpZ2h0
IChjKSAyMDEzIEJlc3RTb2x1dGlvbi5hdCBhbmQgb3RoZXJzLlxuIiArIAorCQkJIiAqIEFsbCBy
aWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlh
bHNcbiIgKyAKKwkJCSIgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRo
ZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjBcbiIgKyAKKwkJCSIgKiB3aGljaCBhY2NvbXBh
bmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdFxuIiArIAorCQkJIiAq
IGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sXG4iICsgCisJCQkiICpc
biIgKyAKKwkJCSIgKiBDb250cmlidXRvcnM6XG4iICsgCisJCQkiICogICAgIFRvbSBTY2hpbmRs
IDx0b20uc2NoaW5kbEBiZXN0c29sdXRpb24uYXQ+IC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVu
dGF0aW9uXG4iICsgCisJCQkiICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4iICsgCisJCQkicGFj
a2FnZSBiYWw7XG4iICsgCisJCQkiXG4iICsgCisJCQkiaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5h
bm5vdGF0aW9uLk5vbk51bGw7XG4iICsgCisJCQkiaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5hbm5v
dGF0aW9uLk51bGxhYmxlO1xuIiArIAorCQkJIlxuIiArIAorCQkJInB1YmxpYyBjbGFzcyBBZGFw
dGVyU2VydmljZUltcGwgaW1wbGVtZW50cyBBZGFwdGVyU2VydmljZSB7XG4iICsgCisJCQkiXG4i
ICsgCisJCQkiCUBPdmVycmlkZVxuIiArIAorCQkJIglwdWJsaWMgYm9vbGVhbiBjYW5BZGFwdChA
TnVsbGFibGUgT2JqZWN0IHNvdXJjZU9iamVjdCwgQE5vbk51bGwgQ2xhc3M8Pz4gdGFyZ2V0VHlw
ZSkge1xuIiArIAorCQkJIgkJcmV0dXJuIGZhbHNlO1xuIiArIAorCQkJIgl9XG4iICsgCisJCQki
XG4iICsgCisJCQkiCUBPdmVycmlkZVxuIiArIAorCQkJIglATnVsbGFibGVcbiIgKyAKKwkJCSIJ
cHVibGljIDxBPiBBIGFkYXB0KEBOdWxsYWJsZSBPYmplY3Qgc291cmNlT2JqZWN0LCBATm9uTnVs
bCBDbGFzczxBPiB0YXJnZXRUeXBlLCBWYWx1ZUFjY2Vzcy4uLiB2YWx1ZUFjY2Vzc2VzKSB7XG4i
ICsgCisJCQkiCQlyZXR1cm4gbnVsbDtcbiIgKyAKKwkJCSIJfVxuIiArIAorCQkJIn1cbiIKKwkJ
fSwKKwkJZ2V0Q29tcGlsZXJPcHRpb25zKCksCisJCSIiKTsKK30KKy8vIHRlc3QgcmV0dXJuIHR5
cGUgY29tcGF0aWJpbGl0eQorcHVibGljIHZvaWQgdGVzdEJ1ZzQzNDM3NGEoKSB7CisJcnVuQ29u
Zm9ybVRlc3RXaXRoTGlicygKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJidWc0MzQzNzQvQWRhcHRl
clNlcnZpY2UuamF2YSIsCisJCQkicGFja2FnZSBidWc0MzQzNzQ7XG4iICsgCisJCQkiXG4iICsg
CisJCQkiaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uLio7XG4iICsgCisJCQkiXG4i
ICsgCisJCQkicHVibGljIGludGVyZmFjZSBBZGFwdGVyU2VydmljZSB7XG4iICsgCisJCQkiCXB1
YmxpYyA8QT4gQE5vbk51bGwgQ2xhc3M8QT4gZ2V0Q2xhc3NPZkEoQSBvYmplY3QpO1xuIiArIAor
CQkJIlxuIiArIAorCQkJIn1cbiIsCisJCQkiYnVnNDM0Mzc0L0FkYXB0ZXJTZXJ2aWNlSW1wbC5q
YXZhIiwKKwkJCSJwYWNrYWdlIGJ1ZzQzNDM3NDtcbiIgKyAKKwkJCSJcbiIgKyAKKwkJCSJpbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTm9uTnVsbDtcbiIgKyAKKwkJCSJcbiIgKyAK
KwkJCSJwdWJsaWMgY2xhc3MgQWRhcHRlclNlcnZpY2VJbXBsIGltcGxlbWVudHMgQWRhcHRlclNl
cnZpY2Uge1xuIiArIAorCQkJIlxuIiArIAorCQkJIglAT3ZlcnJpZGVcbiIgKyAKKwkJCSIJcHVi
bGljIDxBPiBATm9uTnVsbCBDbGFzczxBPiBnZXRDbGFzc09mQShBIG9iamVjdCkge1xuIiArIAor
CQkJIgkJdGhyb3cgbmV3IFJ1bnRpbWVFeGNlcHRpb24oKTtcbiIgKyAKKwkJCSIJfVxuIiArIAor
CQkJIlxuIiArIAorCQkJIn1cbiIKKwkJfSwKKwkJZ2V0Q29tcGlsZXJPcHRpb25zKCksCisJCSIi
KTsKK30KKy8vIG9yaWdpbmFsIChicm9rZW4pIHRlc3QgKHNlY29uZCBwYXJ0KToKK3B1YmxpYyB2
b2lkIHRlc3RCdWc0MzQzNzRiKCkgeworCXJ1bk5lZ2F0aXZlVGVzdFdpdGhMaWJzKAorCQluZXcg
U3RyaW5nW10geworCQkJImJhbC9UZXN0R2VuZXJpYy5qYXZhIiwKKwkJCSJwYWNrYWdlIGJhbDtc
biIgKyAKKwkJCSJpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTm9uTnVsbDtcbiIg
KyAKKwkJCSJcbiIgKyAKKwkJCSJwdWJsaWMgY2xhc3MgVGVzdEdlbmVyaWM8VD4ge1xuIiArIAor
CQkJIglATm9uTnVsbFxuIiArIAorCQkJIglwdWJsaWMgVCB0ZXN0KCkge1xuIiArIAorCQkJIgkJ
cmV0dXJuIG51bGw7XG4iICsgCisJCQkiCX1cbiIgKyAKKwkJCSJ9XG4iCisJCX0sCisJCWdldENv
bXBpbGVyT3B0aW9ucygpLAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiMS4gRVJST1IgaW4gYmFs
XFxUZXN0R2VuZXJpYy5qYXZhIChhdCBsaW5lIDcpXG4iICsgCisJCSIJcmV0dXJuIG51bGw7XG4i
ICsgCisJCSIJICAgICAgIF5eXl5cbiIgKyAKKwkJIk51bGwgdHlwZSBtaXNtYXRjaDogcmVxdWly
ZWQgXCdATm9uTnVsbCBUXCcgYnV0IHRoZSBwcm92aWRlZCB2YWx1ZSBpcyBudWxsXG4iICsgCisJ
CSItLS0tLS0tLS0tXG4iKTsKK30KKy8vIHJlY3RpZmllZCB0ZXN0OgorcHVibGljIHZvaWQgdGVz
dEJ1ZzQzNDM3NGMoKSB7CisJcnVuQ29uZm9ybVRlc3RXaXRoTGlicygKKwkJbmV3IFN0cmluZ1td
IHsKKwkJCSJiYWwvVGVzdEdlbmVyaWMuamF2YSIsCisJCQkicGFja2FnZSBiYWw7XG4iICsgCisJ
CQkiaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uLk51bGxhYmxlO1xuIiArIAorCQkJ
IlxuIiArIAorCQkJInB1YmxpYyBjbGFzcyBUZXN0R2VuZXJpYzxUPiB7XG4iICsgCisJCQkiCXB1
YmxpYyBATnVsbGFibGUgVCB0ZXN0KCkge1xuIiArIAorCQkJIgkJcmV0dXJuIG51bGw7XG4iICsg
CisJCQkiCX1cbiIgKyAKKwkJCSJ9XG4iCisJCX0sCisJCWdldENvbXBpbGVyT3B0aW9ucygpLAor
CQkiIik7Cit9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L051bGxBbm5vdGF0aW9uTWF0Y2hp
bmcuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9hc3QvTnVsbEFubm90YXRpb25NYXRjaGluZy5qYXZhCmluZGV4IDJj
MWE5NTAuLmI3YzljZDUgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTnVsbEFubm90YXRpb25NYXRj
aGluZy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTnVsbEFubm90YXRpb25NYXRjaGluZy5qYXZhCkBA
IC0xNSw2ICsxNSw3IEBACiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVy
LmZsb3cuRmxvd0luZm87CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVy
LmltcGwuQ29tcGlsZXJPcHRpb25zOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b21waWxlci5sb29rdXAuQXJyYXlCaW5kaW5nOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRl
cm5hbC5jb21waWxlci5sb29rdXAuQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50
ZXJuYWwuY29tcGlsZXIubG9va3VwLkJsb2NrU2NvcGU7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5DYXB0dXJlQmluZGluZzsKIGltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkludm9jYXRpb25TaXRlOwpAQCAtMTE0
LDE0ICsxMTUsMjMgQEAKIAkgKiBAcmV0dXJuIGEgc3RhdHVzIG9iamVjdCByZXByZXNlbnRpbmcg
dGhlIHNldmVyaXR5IG9mIG1pc21hdGNoaW5nIHBsdXMgb3B0aW9uYWxseSBhIHN1cGVydHlwZSBo
aW50CiAJICovCiAJcHVibGljIHN0YXRpYyBOdWxsQW5ub3RhdGlvbk1hdGNoaW5nIGFuYWx5c2Uo
VHlwZUJpbmRpbmcgcmVxdWlyZWRUeXBlLCBUeXBlQmluZGluZyBwcm92aWRlZFR5cGUsIGludCBu
dWxsU3RhdHVzKSB7Ci0JCXJldHVybiBhbmFseXNlKHJlcXVpcmVkVHlwZSwgcHJvdmlkZWRUeXBl
LCBudWxsU3RhdHVzLCBmYWxzZSk7CisJCXJldHVybiBhbmFseXNlKHJlcXVpcmVkVHlwZSwgcHJv
dmlkZWRUeXBlLCBudWxsLCBudWxsU3RhdHVzLCBmYWxzZSk7CiAJfQotCS8vIGFkZGl0aW9uYWwg
cGFyYW1ldGVyIHN0cmljdDogaWYgdHJ1ZSB3ZSBkbyBub3QgdG9sZXJhdGUgaW5jb21wYXRpYmx5
IG1pc3NpbmcgYW5ub3RhdGlvbnMgb24gdHlwZSBwYXJhbWV0ZXJzIChmb3Igb3ZlcnJpZGluZyBh
bmFseXNpcykKLQlwdWJsaWMgc3RhdGljIE51bGxBbm5vdGF0aW9uTWF0Y2hpbmcgYW5hbHlzZShU
eXBlQmluZGluZyByZXF1aXJlZFR5cGUsIFR5cGVCaW5kaW5nIHByb3ZpZGVkVHlwZSwgaW50IG51
bGxTdGF0dXMsIGJvb2xlYW4gc3RyaWN0KSB7CisJLyoqCisJICogRmluZCBhbnkgbWlzbWF0Y2hl
cyBiZXR3ZWVuIHRoZSB0d28gZ2l2ZW4gdHlwZXMsIHdoaWNoIGFyZSBjYXVzZWQgYnkgbnVsbCB0
eXBlIGFubm90YXRpb25zLgorCSAqIEBwYXJhbSByZXF1aXJlZFR5cGUKKwkgKiBAcGFyYW0gcHJv
dmlkZWRUeXBlCisJICogQHBhcmFtIHByb3ZpZGVkU3Vic3RpdHV0ZSBpbiBpbmhlcml0YW5jZSBz
aXR1YXRpb25zIHRoaXMgbWFwcyB0aGUgcHJvdmlkZWRUeXBlIGludG8gdGhlIHJlYWxtIG9mIHRo
ZSBzdWJjbGFzcywgbmVlZGVkIGZvciBUVkIgaWRlbnRpdHkgY2hlY2tzLgorCSAqIAkJUGFzcyBu
dWxsIGlmIG5vdCBpbnRlcmVzdGVkIGluIHRoZXNlIGFkZGVkIGNoZWNrcy4KKwkgKiBAcGFyYW0g
bnVsbFN0YXR1cyB3ZSBhcmUgb25seSBpbnRlcmVzdGVkIGluIE5VTEwgb3IgTk9OX05VTEwsIC0x
IGluZGljYXRlcyB0aGF0IHdlIGFyZSBpbiBhIHJlY3Vyc2lvbiwgd2hlcmUgZmxvdyBpbmZvIGlz
IGlnbm9yZWQKKwkgKiBAcGFyYW0gc3RyaWN0IGlmIHRydWUgd2UgZG8gbm90IHRvbGVyYXRlIGlu
Y29tcGF0aWJseSBtaXNzaW5nIGFubm90YXRpb25zIG9uIHR5cGUgcGFyYW1ldGVycyAoZm9yIG92
ZXJyaWRpbmcgYW5hbHlzaXMpCisJICogQHJldHVybiBhIHN0YXR1cyBvYmplY3QgcmVwcmVzZW50
aW5nIHRoZSBzZXZlcml0eSBvZiBtaXNtYXRjaGluZyBwbHVzIG9wdGlvbmFsbHkgYSBzdXBlcnR5
cGUgaGludAorCSAqLworCXB1YmxpYyBzdGF0aWMgTnVsbEFubm90YXRpb25NYXRjaGluZyBhbmFs
eXNlKFR5cGVCaW5kaW5nIHJlcXVpcmVkVHlwZSwgVHlwZUJpbmRpbmcgcHJvdmlkZWRUeXBlLCBU
eXBlQmluZGluZyBwcm92aWRlZFN1YnN0aXR1dGUsIGludCBudWxsU3RhdHVzLCBib29sZWFuIHN0
cmljdCkgewogCQlpbnQgc2V2ZXJpdHkgPSAwOwogCQlUeXBlQmluZGluZyBzdXBlclR5cGVIaW50
ID0gbnVsbDsKIAkJTnVsbEFubm90YXRpb25NYXRjaGluZyBva1N0YXR1cyA9IE51bGxBbm5vdGF0
aW9uTWF0Y2hpbmcuTlVMTF9BTk5PVEFUSU9OU19PSzsKLQkJaWYgKGFyZVNhbWVUeXBlcyhyZXF1
aXJlZFR5cGUsIHByb3ZpZGVkVHlwZSkpIC8vIGZvciB0eXBlIHZhcmlhYmxlIGlkZW50aXR5IChh
bmQgYXMgc2hvcnRjdXQgZm9yIG90aGVycykKKwkJaWYgKGFyZVNhbWVUeXBlcyhyZXF1aXJlZFR5
cGUsIHByb3ZpZGVkVHlwZSwgcHJvdmlkZWRTdWJzdGl0dXRlKSkgLy8gZm9yIHR5cGUgdmFyaWFi
bGUgaWRlbnRpdHkgKGFuZCBhcyBzaG9ydGN1dCBmb3Igb3RoZXJzKQogCQkJcmV0dXJuIG9rU3Rh
dHVzOwogCQlpZiAocmVxdWlyZWRUeXBlIGluc3RhbmNlb2YgQXJyYXlCaW5kaW5nKSB7CiAJCQls
b25nW10gcmVxdWlyZWREaW1zVGFnQml0cyA9ICgoQXJyYXlCaW5kaW5nKXJlcXVpcmVkVHlwZSku
bnVsbFRhZ0JpdHNQZXJEaW1lbnNpb247CkBAIC0xNjQsOSArMTc0LDExIEBACiAJCQkJaWYgKHJl
cXVpcmVkVHlwZS5pc1BhcmFtZXRlcml6ZWRUeXBlKCkgICYmIHByb3ZpZGVkU3VwZXIgaW5zdGFu
Y2VvZiBQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpIHsgLy8gVE9ETyhzdGVwaGFuKTogaGFuZGxl
IHByb3ZpZGVkVHlwZS5pc1JhdygpCiAJCQkJCVR5cGVCaW5kaW5nW10gcmVxdWlyZWRBcmd1bWVu
dHMgPSAoKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZykgcmVxdWlyZWRUeXBlKS5hcmd1bWVudHM7
CiAJCQkJCVR5cGVCaW5kaW5nW10gcHJvdmlkZWRBcmd1bWVudHMgPSAoKFBhcmFtZXRlcml6ZWRU
eXBlQmluZGluZykgcHJvdmlkZWRTdXBlcikuYXJndW1lbnRzOworCQkJCQlUeXBlQmluZGluZ1td
IHByb3ZpZGVkU3Vic3RpdHV0ZXMgPSAocHJvdmlkZWRTdWJzdGl0dXRlIGluc3RhbmNlb2YgUGFy
YW1ldGVyaXplZFR5cGVCaW5kaW5nKSA/ICgoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nKXByb3Zp
ZGVkU3Vic3RpdHV0ZSkuYXJndW1lbnRzIDogbnVsbDsKIAkJCQkJaWYgKHJlcXVpcmVkQXJndW1l
bnRzICE9IG51bGwgJiYgcHJvdmlkZWRBcmd1bWVudHMgIT0gbnVsbCAmJiByZXF1aXJlZEFyZ3Vt
ZW50cy5sZW5ndGggPT0gcHJvdmlkZWRBcmd1bWVudHMubGVuZ3RoKSB7CiAJCQkJCQlmb3IgKGlu
dCBpID0gMDsgaSA8IHJlcXVpcmVkQXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7Ci0JCQkJCQkJTnVs
bEFubm90YXRpb25NYXRjaGluZyBzdGF0dXMgPSBhbmFseXNlKHJlcXVpcmVkQXJndW1lbnRzW2ld
LCBwcm92aWRlZEFyZ3VtZW50c1tpXSwgLTEsIHN0cmljdCk7CisJCQkJCQkJVHlwZUJpbmRpbmcg
cHJvdmlkZWRBcmdTdWJzdGl0dXRlID0gcHJvdmlkZWRTdWJzdGl0dXRlcyAhPSBudWxsID8gcHJv
dmlkZWRTdWJzdGl0dXRlc1tpXSA6IG51bGw7CisJCQkJCQkJTnVsbEFubm90YXRpb25NYXRjaGlu
ZyBzdGF0dXMgPSBhbmFseXNlKHJlcXVpcmVkQXJndW1lbnRzW2ldLCBwcm92aWRlZEFyZ3VtZW50
c1tpXSwgcHJvdmlkZWRBcmdTdWJzdGl0dXRlLCAtMSwgc3RyaWN0KTsKIAkJCQkJCQlzZXZlcml0
eSA9IE1hdGgubWF4KHNldmVyaXR5LCBzdGF0dXMuc2V2ZXJpdHkpOwogCQkJCQkJCWlmIChzZXZl
cml0eSA9PSAyKQogCQkJCQkJCQlyZXR1cm4gbmV3IE51bGxBbm5vdGF0aW9uTWF0Y2hpbmcoc2V2
ZXJpdHksIG51bGxTdGF0dXMsIHN1cGVyVHlwZUhpbnQpOwpAQCAtMTc2LDcgKzE4OCw4IEBACiAJ
CQkJVHlwZUJpbmRpbmcgcmVxdWlyZWRFbmNsb3NpbmcgPSByZXF1aXJlZFR5cGUuZW5jbG9zaW5n
VHlwZSgpOwogCQkJCVR5cGVCaW5kaW5nIHByb3ZpZGVkRW5jbG9zaW5nID0gcHJvdmlkZWRUeXBl
LmVuY2xvc2luZ1R5cGUoKTsKIAkJCQlpZiAocmVxdWlyZWRFbmNsb3NpbmcgIT0gbnVsbCAmJiBw
cm92aWRlZEVuY2xvc2luZyAhPSBudWxsKSB7Ci0JCQkJCU51bGxBbm5vdGF0aW9uTWF0Y2hpbmcg
c3RhdHVzID0gYW5hbHlzZShyZXF1aXJlZEVuY2xvc2luZywgcHJvdmlkZWRFbmNsb3NpbmcsIC0x
LCBzdHJpY3QpOworCQkJCQlUeXBlQmluZGluZyBwcm92aWRlZEVuY2xTdWJzdGl0dXRlID0gcHJv
dmlkZWRTdWJzdGl0dXRlICE9IG51bGwgPyBwcm92aWRlZFN1YnN0aXR1dGUuZW5jbG9zaW5nVHlw
ZSgpIDogbnVsbDsKKwkJCQkJTnVsbEFubm90YXRpb25NYXRjaGluZyBzdGF0dXMgPSBhbmFseXNl
KHJlcXVpcmVkRW5jbG9zaW5nLCBwcm92aWRlZEVuY2xvc2luZywgcHJvdmlkZWRFbmNsU3Vic3Rp
dHV0ZSwgLTEsIHN0cmljdCk7CiAJCQkJCXNldmVyaXR5ID0gTWF0aC5tYXgoc2V2ZXJpdHksIHN0
YXR1cy5zZXZlcml0eSk7CiAJCQkJfQogCQkJfQpAQCAtMTg3LDcgKzIwMCw3IEBACiAJfQogCiAJ
LyoqIEFyZSBib3RoIHR5cGVzIGlkZW50aWNhbCB3cnQgdGhlIHVuYW5ub3RhdGVkIHR5cGUgYW5k
IGFueSBudWxsIHR5cGUgYW5ub3RhdGlvbnM/IE9ubHkgdW5zdHJ1Y3R1cmVkIHR5cGVzIGFyZSBj
b25zaWRlcmVkLiAqLwotCXByb3RlY3RlZCBzdGF0aWMgYm9vbGVhbiBhcmVTYW1lVHlwZXMoVHlw
ZUJpbmRpbmcgcmVxdWlyZWRUeXBlLCBUeXBlQmluZGluZyBwcm92aWRlZFR5cGUpIHsKKwlwcm90
ZWN0ZWQgc3RhdGljIGJvb2xlYW4gYXJlU2FtZVR5cGVzKFR5cGVCaW5kaW5nIHJlcXVpcmVkVHlw
ZSwgVHlwZUJpbmRpbmcgcHJvdmlkZWRUeXBlLCBUeXBlQmluZGluZyBwcm92aWRlZFN1YnN0aXR1
dGUpIHsKIAkJaWYgKHJlcXVpcmVkVHlwZSA9PSBwcm92aWRlZFR5cGUpICAvLyRJREVOVElUWS1D
T01QQVJJU09OJCAvLyBzaG9ydCBjdXQgZm9yIHJlYWxseS1yZWFsbHktc2FtZSB0eXBlcwogCQkJ
cmV0dXJuIHRydWU7CiAJCWlmIChyZXF1aXJlZFR5cGUuaXNQYXJhbWV0ZXJpemVkVHlwZSgpIHx8
IHJlcXVpcmVkVHlwZS5pc0FycmF5VHlwZSgpKQpAQCAtMTk2LDggKzIwOSwxMCBAQAogCQkJaWYg
KHJlcXVpcmVkVHlwZSBpbnN0YW5jZW9mIENhcHR1cmVCaW5kaW5nKSB7CiAJCQkJLy8gd2hlbiBw
cm92aWRpbmcgdGhlIGxvd2VyIGJvdW5kIG9mIHRoZSByZXF1aXJlZCB0eXBlIHdoZXJlIGRlZmlu
aXRlbHkgZmluZToKIAkJCQlUeXBlQmluZGluZyBsb3dlckJvdW5kID0gKChDYXB0dXJlQmluZGlu
ZylyZXF1aXJlZFR5cGUpLmxvd2VyQm91bmQ7Ci0JCQkJaWYgKGxvd2VyQm91bmQgIT0gbnVsbCAm
JiBhcmVTYW1lVHlwZXMobG93ZXJCb3VuZCwgcHJvdmlkZWRUeXBlKSkKKwkJCQlpZiAobG93ZXJC
b3VuZCAhPSBudWxsICYmIGFyZVNhbWVUeXBlcyhsb3dlckJvdW5kLCBwcm92aWRlZFR5cGUsIHBy
b3ZpZGVkU3Vic3RpdHV0ZSkpCiAJCQkJCXJldHVybiB0cnVlOworCQkJfSBlbHNlIGlmIChyZXF1
aXJlZFR5cGUua2luZCgpID09IEJpbmRpbmcuVFlQRV9QQVJBTUVURVIgJiYgcmVxdWlyZWRUeXBl
ID09IHByb3ZpZGVkU3Vic3RpdHV0ZSkgeyAvLyRJREVOVElUWS1DT01QQVJJU09OJAorCQkJCXJl
dHVybiB0cnVlOwogCQkJfQogCQkJcmV0dXJuIGZhbHNlOwogCQl9CmRpZmYgLS1naXQgYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvbG9va3VwL0ltcGxpY2l0TnVsbEFubm90YXRpb25WZXJpZmllci5qYXZhIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xv
b2t1cC9JbXBsaWNpdE51bGxBbm5vdGF0aW9uVmVyaWZpZXIuamF2YQppbmRleCBiZWI4MjJiLi4w
MzU1YTgzIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0ltcGxpY2l0TnVsbEFubm90YXRpb25W
ZXJpZmllci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvSW1wbGljaXROdWxsQW5ub3RhdGlvblZl
cmlmaWVyLmphdmEKQEAgLTI4MSw3ICsyODEsMTMgQEAKIAkJCQkJfQogCQkJCX0KIAkJCQlpZiAo
dXNlVHlwZUFubm90YXRpb25zKSB7Ci0JCQkJCWlmIChOdWxsQW5ub3RhdGlvbk1hdGNoaW5nLmFu
YWx5c2UoaW5oZXJpdGVkTWV0aG9kLnJldHVyblR5cGUsIGN1cnJlbnRNZXRob2QucmV0dXJuVHlw
ZSwgMCwgdHJ1ZSkuaXNBbnlNaXNtYXRjaCgpKSB7CisJCQkJCVR5cGVCaW5kaW5nIHN1YnN0aXR1
dGVSZXR1cm5UeXBlID0gbnVsbDsgLy8gZm9yIFRWQiBpZGVudGl0eSBjaGVja3MgaW5zaWRlIE51
bGxBbm5vdGF0aW9uTWF0Y2hpbmcuYW5hbHl6ZSgpCisJCQkJCVR5cGVWYXJpYWJsZUJpbmRpbmdb
XSB0eXBlVmFyaWFibGVzID0gaW5oZXJpdGVkTWV0aG9kLnR5cGVWYXJpYWJsZXM7CisJCQkJCWlm
ICh0eXBlVmFyaWFibGVzICE9IG51bGwgJiYgY3VycmVudE1ldGhvZC5yZXR1cm5UeXBlLmlkICE9
IFR5cGVJZHMuVF92b2lkKSB7CisJCQkJCQlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRp
bmcgc3Vic3RpdHV0ZSA9IHRoaXMuZW52aXJvbm1lbnQuY3JlYXRlUGFyYW1ldGVyaXplZEdlbmVy
aWNNZXRob2QoY3VycmVudE1ldGhvZCwgdHlwZVZhcmlhYmxlcyk7CisJCQkJCQlzdWJzdGl0dXRl
UmV0dXJuVHlwZSA9IHN1YnN0aXR1dGUucmV0dXJuVHlwZTsKKwkJCQkJfQorCQkJCQlpZiAoTnVs
bEFubm90YXRpb25NYXRjaGluZy5hbmFseXNlKGluaGVyaXRlZE1ldGhvZC5yZXR1cm5UeXBlLCBj
dXJyZW50TWV0aG9kLnJldHVyblR5cGUsIHN1YnN0aXR1dGVSZXR1cm5UeXBlLCAwLCB0cnVlKS5p
c0FueU1pc21hdGNoKCkpIHsKIAkJCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmNhbm5vdElt
cGxlbWVudEluY29tcGF0aWJsZU51bGxuZXNzKGN1cnJlbnRNZXRob2QsIGluaGVyaXRlZE1ldGhv
ZCwgdXNlVHlwZUFubm90YXRpb25zKTsKIAkJCQkJCXJldHVybjsKIAkJCQkJfQpAQCAtMjkwLDYg
KzI5NiwxNSBAQAogCQl9CiAKIAkJLy8gcGFyYW1ldGVyczoKKwkJVHlwZUJpbmRpbmdbXSBzdWJz
dGl0dXRlUGFyYW1ldGVycyA9IG51bGw7IC8vIGZvciBUVkIgaWRlbnRpdHkgY2hlY2tzIGluc2lk
ZSBOdWxsQW5ub3RhdGlvbk1hdGNoaW5nLmFuYWx5emUoKQorCQlpZiAoc2hvdWxkQ29tcGxhaW4p
IHsKKwkJCVR5cGVWYXJpYWJsZUJpbmRpbmdbXSB0eXBlVmFyaWFibGVzID0gY3VycmVudE1ldGhv
ZC50eXBlVmFyaWFibGVzOworCQkJaWYgKHR5cGVWYXJpYWJsZXMgIT0gQmluZGluZy5OT19UWVBF
X1ZBUklBQkxFUykgeworCQkJCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBzdWJz
dGl0dXRlID0gdGhpcy5lbnZpcm9ubWVudC5jcmVhdGVQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhv
ZChpbmhlcml0ZWRNZXRob2QsIHR5cGVWYXJpYWJsZXMpOworCQkJCXN1YnN0aXR1dGVQYXJhbWV0
ZXJzID0gc3Vic3RpdHV0ZS5wYXJhbWV0ZXJzOworCQkJfQorCQl9CisKIAkJQXJndW1lbnRbXSBj
dXJyZW50QXJndW1lbnRzID0gc3JjTWV0aG9kID09IG51bGwgPyBudWxsIDogc3JjTWV0aG9kLmFy
Z3VtZW50czsKIAogCQlpbnQgbGVuZ3RoID0gMDsKQEAgLTM4OCw3ICs0MDMsOCBAQAogCQkJCQl9
CiAJCQkJfSAKIAkJCQlpZiAodXNlVHlwZUFubm90YXRpb25zKSB7Ci0JCQkJCWlmIChOdWxsQW5u
b3RhdGlvbk1hdGNoaW5nLmFuYWx5c2UoY3VycmVudE1ldGhvZC5wYXJhbWV0ZXJzW2ldLCBpbmhl
cml0ZWRNZXRob2QucGFyYW1ldGVyc1tpXSwgMCwgdHJ1ZSkuaXNBbnlNaXNtYXRjaCgpKSB7CisJ
CQkJCVR5cGVCaW5kaW5nIHN1YnN0aXR1dGVQYXJhbWV0ZXIgPSBzdWJzdGl0dXRlUGFyYW1ldGVy
cyAhPSBudWxsID8gc3Vic3RpdHV0ZVBhcmFtZXRlcnNbaV0gOiBudWxsOworCQkJCQlpZiAoTnVs
bEFubm90YXRpb25NYXRjaGluZy5hbmFseXNlKGN1cnJlbnRNZXRob2QucGFyYW1ldGVyc1tpXSwg
aW5oZXJpdGVkTWV0aG9kLnBhcmFtZXRlcnNbaV0sIHN1YnN0aXR1dGVQYXJhbWV0ZXIsIDAsIHRy
dWUpLmlzQW55TWlzbWF0Y2goKSkgewogCQkJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuY2Fu
bm90SW1wbGVtZW50SW5jb21wYXRpYmxlTnVsbG5lc3MoY3VycmVudE1ldGhvZCwgaW5oZXJpdGVk
TWV0aG9kLCBmYWxzZSk7CiAJCQkJCX0KIAkJCQl9
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>242852</attachid>
            <date>2014-05-08 10:28:00 -0400</date>
            <delta_ts>2014-05-08 10:28:19 -0400</delta_ts>
            <desc>updated patch</desc>
            <filename>Bug-434374--Nullpointer-analysis-completely-broken-i.patch</filename>
            <type>text/plain</type>
            <size>15540</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxBbm5vdGF0aW9u
VGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbEFubm90YXRpb25U
ZXN0LmphdmEKaW5kZXggM2VmYjY5Ni4uMjY0YWJkMiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Nv
bXBpbGVyL3JlZ3Jlc3Npb24vTnVsbEFubm90YXRpb25UZXN0LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3Rz
L2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbEFubm90YXRpb25UZXN0LmphdmEKQEAgLTcyOTQsNCAr
NzI5NCwxNDYgQEAKIAkJIlBvdGVudGlhbCBudWxsIHBvaW50ZXIgYWNjZXNzOiBUaGlzIGV4cHJl
c3Npb24gb2YgdHlwZSBCb29sZWFuIG1heSBiZSBudWxsIGJ1dCByZXF1aXJlcyBhdXRvLXVuYm94
aW5nXG4iICsgCiAJCSItLS0tLS0tLS0tXG4iKTsKIH0KK3B1YmxpYyB2b2lkIHRlc3RCdWc0MzQz
NzQoKSB7CisJcnVuQ29uZm9ybVRlc3RXaXRoTGlicygKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJi
YWwvQWRhcHRlclNlcnZpY2UuamF2YSIsCisJCQkiLyoqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbiIg
KyAKKwkJCSIgKiBDb3B5cmlnaHQgKGMpIDIwMTMgQmVzdFNvbHV0aW9uLmF0IGFuZCBvdGhlcnMu
XG4iICsgCisJCQkiICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUg
YWNjb21wYW55aW5nIG1hdGVyaWFsc1xuIiArIAorCQkJIiAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1
bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMFxuIiArIAor
CQkJIiAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxh
YmxlIGF0XG4iICsgCisJCQkiICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEw
Lmh0bWxcbiIgKyAKKwkJCSIgKlxuIiArIAorCQkJIiAqIENvbnRyaWJ1dG9yczpcbiIgKyAKKwkJ
CSIgKiAgICAgVG9tIFNjaGluZGwgPHRvbS5zY2hpbmRsQGJlc3Rzb2x1dGlvbi5hdD4gLSBpbml0
aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb25cbiIgKyAKKwkJCSIgKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKi9cbiIgKyAKKwkJCSJwYWNrYWdlIGJhbDtcbiIgKyAKKwkJCSJcbiIgKyAKKwkJCSJpbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTm9uTnVsbDtcbiIgKyAKKwkJCSJpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTnVsbGFibGU7XG4iICsgCisJCQkicHVibGljIGlu
dGVyZmFjZSBBZGFwdGVyU2VydmljZSB7XG4iICsgCisJCQkiCXB1YmxpYyBib29sZWFuIGNhbkFk
YXB0KEBOdWxsYWJsZSBPYmplY3Qgc291cmNlT2JqZWN0LCBATm9uTnVsbCBDbGFzczw/PiB0YXJn
ZXRUeXBlKTtcbiIgKyAKKwkJCSJcbiIgKyAKKwkJCSIJQE51bGxhYmxlXG4iICsgCisJCQkiCXB1
YmxpYyA8QT4gQSBhZGFwdChATnVsbGFibGUgT2JqZWN0IHNvdXJjZU9iamVjdCwgQE5vbk51bGwg
Q2xhc3M8QT4gdGFyZ2V0VHlwZSwgVmFsdWVBY2Nlc3MuLi4gdmFsdWVBY2Nlc3Nlcyk7XG4iICsg
CisJCQkiXG4iICsgCisJCQkiCXB1YmxpYyBpbnRlcmZhY2UgVmFsdWVBY2Nlc3Mge1xuIiArIAor
CQkJIgkJQE51bGxhYmxlXG4iICsgCisJCQkiCQlwdWJsaWMgPE8+IE8gZ2V0VmFsdWUoQE5vbk51
bGwgU3RyaW5nIGtleSk7XG4iICsgCisJCQkiXG4iICsgCisJCQkiCQlATnVsbGFibGVcbiIgKyAK
KwkJCSIJCXB1YmxpYyA8Tz4gTyBnZXRWYWx1ZShATm9uTnVsbCBDbGFzczxPPiBrZXkpO1xuIiAr
IAorCQkJIgl9XG4iICsgCisJCQkifVxuIiwKKwkJCSJiYWwvQWRhcHRlclNlcnZpY2VJbXBsLmph
dmEiLAorCQkJIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4iICsgCisJCQkiICogQ29weXJpZ2h0
IChjKSAyMDEzIEJlc3RTb2x1dGlvbi5hdCBhbmQgb3RoZXJzLlxuIiArIAorCQkJIiAqIEFsbCBy
aWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlh
bHNcbiIgKyAKKwkJCSIgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRo
ZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjBcbiIgKyAKKwkJCSIgKiB3aGljaCBhY2NvbXBh
bmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdFxuIiArIAorCQkJIiAq
IGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sXG4iICsgCisJCQkiICpc
biIgKyAKKwkJCSIgKiBDb250cmlidXRvcnM6XG4iICsgCisJCQkiICogICAgIFRvbSBTY2hpbmRs
IDx0b20uc2NoaW5kbEBiZXN0c29sdXRpb24uYXQ+IC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVu
dGF0aW9uXG4iICsgCisJCQkiICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4iICsgCisJCQkicGFj
a2FnZSBiYWw7XG4iICsgCisJCQkiXG4iICsgCisJCQkiaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5h
bm5vdGF0aW9uLk5vbk51bGw7XG4iICsgCisJCQkiaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5hbm5v
dGF0aW9uLk51bGxhYmxlO1xuIiArIAorCQkJIlxuIiArIAorCQkJInB1YmxpYyBjbGFzcyBBZGFw
dGVyU2VydmljZUltcGwgaW1wbGVtZW50cyBBZGFwdGVyU2VydmljZSB7XG4iICsgCisJCQkiXG4i
ICsgCisJCQkodGhpcy5jb21wbGlhbmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFf
NgorCQkJPyAiCUBPdmVycmlkZVxuIgorCQkJOiAiIikgKworCQkJIglwdWJsaWMgYm9vbGVhbiBj
YW5BZGFwdChATnVsbGFibGUgT2JqZWN0IHNvdXJjZU9iamVjdCwgQE5vbk51bGwgQ2xhc3M8Pz4g
dGFyZ2V0VHlwZSkge1xuIiArIAorCQkJIgkJcmV0dXJuIGZhbHNlO1xuIiArIAorCQkJIgl9XG4i
ICsgCisJCQkiXG4iICsgCisJCQkodGhpcy5jb21wbGlhbmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29u
c3RhbnRzLkpESzFfNgorCQkJPyAiCUBPdmVycmlkZVxuIgorCQkJOiAiIikgKworCQkJIglATnVs
bGFibGVcbiIgKyAKKwkJCSIJcHVibGljIDxBPiBBIGFkYXB0KEBOdWxsYWJsZSBPYmplY3Qgc291
cmNlT2JqZWN0LCBATm9uTnVsbCBDbGFzczxBPiB0YXJnZXRUeXBlLCBWYWx1ZUFjY2Vzcy4uLiB2
YWx1ZUFjY2Vzc2VzKSB7XG4iICsgCisJCQkiCQlyZXR1cm4gbnVsbDtcbiIgKyAKKwkJCSIJfVxu
IiArIAorCQkJIn1cbiIKKwkJfSwKKwkJZ2V0Q29tcGlsZXJPcHRpb25zKCksCisJCSIiKTsKK30K
Ky8vIHRlc3QgcmV0dXJuIHR5cGUgY29tcGF0aWJpbGl0eQorcHVibGljIHZvaWQgdGVzdEJ1ZzQz
NDM3NGEoKSB7CisJcnVuQ29uZm9ybVRlc3RXaXRoTGlicygKKwkJbmV3IFN0cmluZ1tdIHsKKwkJ
CSJidWc0MzQzNzQvQWRhcHRlclNlcnZpY2UuamF2YSIsCisJCQkicGFja2FnZSBidWc0MzQzNzQ7
XG4iICsgCisJCQkiXG4iICsgCisJCQkiaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9u
Lio7XG4iICsgCisJCQkiXG4iICsgCisJCQkicHVibGljIGludGVyZmFjZSBBZGFwdGVyU2Vydmlj
ZSB7XG4iICsgCisJCQkiCXB1YmxpYyBATm9uTnVsbCA8QT4gQ2xhc3M8QT4gZ2V0Q2xhc3NPZkEo
QSBvYmplY3QpO1xuIiArIAorCQkJIlxuIiArIAorCQkJIn1cbiIsCisJCQkiYnVnNDM0Mzc0L0Fk
YXB0ZXJTZXJ2aWNlSW1wbC5qYXZhIiwKKwkJCSJwYWNrYWdlIGJ1ZzQzNDM3NDtcbiIgKyAKKwkJ
CSJcbiIgKyAKKwkJCSJpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTm9uTnVsbDtc
biIgKyAKKwkJCSJcbiIgKyAKKwkJCSJwdWJsaWMgY2xhc3MgQWRhcHRlclNlcnZpY2VJbXBsIGlt
cGxlbWVudHMgQWRhcHRlclNlcnZpY2Uge1xuIiArIAorCQkJIlxuIiArCisJCQkodGhpcy5jb21w
bGlhbmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNgorCQkJPyAiCUBPdmVycmlk
ZVxuIgorCQkJOiAiIikgKworCQkJIglATm9uTnVsbFxuIiArIAorCQkJIglwdWJsaWMgPEE+IENs
YXNzPEE+IGdldENsYXNzT2ZBKEEgb2JqZWN0KSB7XG4iICsgCisJCQkiCQl0aHJvdyBuZXcgUnVu
dGltZUV4Y2VwdGlvbigpO1xuIiArIAorCQkJIgl9XG4iICsgCisJCQkiXG4iICsgCisJCQkifVxu
IgorCQl9LAorCQlnZXRDb21waWxlck9wdGlvbnMoKSwKKwkJIiIpOworfQorLy8gb3JpZ2luYWwg
KGJyb2tlbikgdGVzdCAoc2Vjb25kIHBhcnQpOgorcHVibGljIHZvaWQgdGVzdEJ1ZzQzNDM3NGIo
KSB7CisJcnVuTmVnYXRpdmVUZXN0V2l0aExpYnMoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiYmFs
L1Rlc3RHZW5lcmljLmphdmEiLAorCQkJInBhY2thZ2UgYmFsO1xuIiArIAorCQkJImltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuYW5ub3RhdGlvbi5Ob25OdWxsO1xuIiArIAorCQkJIlxuIiArIAorCQkJ
InB1YmxpYyBjbGFzcyBUZXN0R2VuZXJpYzxUPiB7XG4iICsgCisJCQkiCUBOb25OdWxsXG4iICsg
CisJCQkiCXB1YmxpYyBUIHRlc3QoKSB7XG4iICsgCisJCQkiCQlyZXR1cm4gbnVsbDtcbiIgKyAK
KwkJCSIJfVxuIiArIAorCQkJIn1cbiIKKwkJfSwKKwkJZ2V0Q29tcGlsZXJPcHRpb25zKCksCisJ
CSItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJPUiBpbiBiYWxcXFRlc3RHZW5lcmljLmphdmEg
KGF0IGxpbmUgNylcbiIgKyAKKwkJIglyZXR1cm4gbnVsbDtcbiIgKyAKKwkJIgkgICAgICAgXl5e
XlxuIiArIAorCQkiTnVsbCB0eXBlIG1pc21hdGNoOiByZXF1aXJlZCBcJ0BOb25OdWxsIFRcJyBi
dXQgdGhlIHByb3ZpZGVkIHZhbHVlIGlzIG51bGxcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIpOwor
fQorLy8gcmVjdGlmaWVkIHRlc3Q6CitwdWJsaWMgdm9pZCB0ZXN0QnVnNDM0Mzc0YygpIHsKKwly
dW5Db25mb3JtVGVzdFdpdGhMaWJzKAorCQluZXcgU3RyaW5nW10geworCQkJImJhbC9UZXN0R2Vu
ZXJpYy5qYXZhIiwKKwkJCSJwYWNrYWdlIGJhbDtcbiIgKyAKKwkJCSJpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmFubm90YXRpb24uTnVsbGFibGU7XG4iICsgCisJCQkiXG4iICsgCisJCQkicHVibGlj
IGNsYXNzIFRlc3RHZW5lcmljPFQ+IHtcbiIgKyAKKwkJCSIJcHVibGljIEBOdWxsYWJsZSBUIHRl
c3QoKSB7XG4iICsgCisJCQkiCQlyZXR1cm4gbnVsbDtcbiIgKyAKKwkJCSIJfVxuIiArIAorCQkJ
In1cbiIKKwkJfSwKKwkJZ2V0Q29tcGlsZXJPcHRpb25zKCksCisJCSIiKTsKK30KIH0KZGlmZiAt
LWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hc3QvTnVsbEFubm90YXRpb25NYXRjaGluZy5qYXZhIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fz
dC9OdWxsQW5ub3RhdGlvbk1hdGNoaW5nLmphdmEKaW5kZXggMmMxYTk1MC4uYjdjOWNkNSAxMDA2
NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2FzdC9OdWxsQW5ub3RhdGlvbk1hdGNoaW5nLmphdmEKKysrIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9OdWxsQW5ub3RhdGlvbk1hdGNoaW5nLmphdmEKQEAgLTE1LDYgKzE1LDcgQEAKIGlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuZmxvdy5GbG93SW5mbzsKIGlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuaW1wbC5Db21waWxlck9wdGlv
bnM7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5BcnJh
eUJpbmRpbmc7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1
cC5CaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29r
dXAuQmxvY2tTY29wZTsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
bG9va3VwLkNhcHR1cmVCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b21waWxlci5sb29rdXAuSW52b2NhdGlvblNpdGU7CkBAIC0xMTQsMTQgKzExNSwyMyBAQAogCSAq
IEByZXR1cm4gYSBzdGF0dXMgb2JqZWN0IHJlcHJlc2VudGluZyB0aGUgc2V2ZXJpdHkgb2YgbWlz
bWF0Y2hpbmcgcGx1cyBvcHRpb25hbGx5IGEgc3VwZXJ0eXBlIGhpbnQKIAkgKi8KIAlwdWJsaWMg
c3RhdGljIE51bGxBbm5vdGF0aW9uTWF0Y2hpbmcgYW5hbHlzZShUeXBlQmluZGluZyByZXF1aXJl
ZFR5cGUsIFR5cGVCaW5kaW5nIHByb3ZpZGVkVHlwZSwgaW50IG51bGxTdGF0dXMpIHsKLQkJcmV0
dXJuIGFuYWx5c2UocmVxdWlyZWRUeXBlLCBwcm92aWRlZFR5cGUsIG51bGxTdGF0dXMsIGZhbHNl
KTsKKwkJcmV0dXJuIGFuYWx5c2UocmVxdWlyZWRUeXBlLCBwcm92aWRlZFR5cGUsIG51bGwsIG51
bGxTdGF0dXMsIGZhbHNlKTsKIAl9Ci0JLy8gYWRkaXRpb25hbCBwYXJhbWV0ZXIgc3RyaWN0OiBp
ZiB0cnVlIHdlIGRvIG5vdCB0b2xlcmF0ZSBpbmNvbXBhdGlibHkgbWlzc2luZyBhbm5vdGF0aW9u
cyBvbiB0eXBlIHBhcmFtZXRlcnMgKGZvciBvdmVycmlkaW5nIGFuYWx5c2lzKQotCXB1YmxpYyBz
dGF0aWMgTnVsbEFubm90YXRpb25NYXRjaGluZyBhbmFseXNlKFR5cGVCaW5kaW5nIHJlcXVpcmVk
VHlwZSwgVHlwZUJpbmRpbmcgcHJvdmlkZWRUeXBlLCBpbnQgbnVsbFN0YXR1cywgYm9vbGVhbiBz
dHJpY3QpIHsKKwkvKioKKwkgKiBGaW5kIGFueSBtaXNtYXRjaGVzIGJldHdlZW4gdGhlIHR3byBn
aXZlbiB0eXBlcywgd2hpY2ggYXJlIGNhdXNlZCBieSBudWxsIHR5cGUgYW5ub3RhdGlvbnMuCisJ
ICogQHBhcmFtIHJlcXVpcmVkVHlwZQorCSAqIEBwYXJhbSBwcm92aWRlZFR5cGUKKwkgKiBAcGFy
YW0gcHJvdmlkZWRTdWJzdGl0dXRlIGluIGluaGVyaXRhbmNlIHNpdHVhdGlvbnMgdGhpcyBtYXBz
IHRoZSBwcm92aWRlZFR5cGUgaW50byB0aGUgcmVhbG0gb2YgdGhlIHN1YmNsYXNzLCBuZWVkZWQg
Zm9yIFRWQiBpZGVudGl0eSBjaGVja3MuCisJICogCQlQYXNzIG51bGwgaWYgbm90IGludGVyZXN0
ZWQgaW4gdGhlc2UgYWRkZWQgY2hlY2tzLgorCSAqIEBwYXJhbSBudWxsU3RhdHVzIHdlIGFyZSBv
bmx5IGludGVyZXN0ZWQgaW4gTlVMTCBvciBOT05fTlVMTCwgLTEgaW5kaWNhdGVzIHRoYXQgd2Ug
YXJlIGluIGEgcmVjdXJzaW9uLCB3aGVyZSBmbG93IGluZm8gaXMgaWdub3JlZAorCSAqIEBwYXJh
bSBzdHJpY3QgaWYgdHJ1ZSB3ZSBkbyBub3QgdG9sZXJhdGUgaW5jb21wYXRpYmx5IG1pc3Npbmcg
YW5ub3RhdGlvbnMgb24gdHlwZSBwYXJhbWV0ZXJzIChmb3Igb3ZlcnJpZGluZyBhbmFseXNpcykK
KwkgKiBAcmV0dXJuIGEgc3RhdHVzIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIHNldmVyaXR5IG9m
IG1pc21hdGNoaW5nIHBsdXMgb3B0aW9uYWxseSBhIHN1cGVydHlwZSBoaW50CisJICovCisJcHVi
bGljIHN0YXRpYyBOdWxsQW5ub3RhdGlvbk1hdGNoaW5nIGFuYWx5c2UoVHlwZUJpbmRpbmcgcmVx
dWlyZWRUeXBlLCBUeXBlQmluZGluZyBwcm92aWRlZFR5cGUsIFR5cGVCaW5kaW5nIHByb3ZpZGVk
U3Vic3RpdHV0ZSwgaW50IG51bGxTdGF0dXMsIGJvb2xlYW4gc3RyaWN0KSB7CiAJCWludCBzZXZl
cml0eSA9IDA7CiAJCVR5cGVCaW5kaW5nIHN1cGVyVHlwZUhpbnQgPSBudWxsOwogCQlOdWxsQW5u
b3RhdGlvbk1hdGNoaW5nIG9rU3RhdHVzID0gTnVsbEFubm90YXRpb25NYXRjaGluZy5OVUxMX0FO
Tk9UQVRJT05TX09LOwotCQlpZiAoYXJlU2FtZVR5cGVzKHJlcXVpcmVkVHlwZSwgcHJvdmlkZWRU
eXBlKSkgLy8gZm9yIHR5cGUgdmFyaWFibGUgaWRlbnRpdHkgKGFuZCBhcyBzaG9ydGN1dCBmb3Ig
b3RoZXJzKQorCQlpZiAoYXJlU2FtZVR5cGVzKHJlcXVpcmVkVHlwZSwgcHJvdmlkZWRUeXBlLCBw
cm92aWRlZFN1YnN0aXR1dGUpKSAvLyBmb3IgdHlwZSB2YXJpYWJsZSBpZGVudGl0eSAoYW5kIGFz
IHNob3J0Y3V0IGZvciBvdGhlcnMpCiAJCQlyZXR1cm4gb2tTdGF0dXM7CiAJCWlmIChyZXF1aXJl
ZFR5cGUgaW5zdGFuY2VvZiBBcnJheUJpbmRpbmcpIHsKIAkJCWxvbmdbXSByZXF1aXJlZERpbXNU
YWdCaXRzID0gKChBcnJheUJpbmRpbmcpcmVxdWlyZWRUeXBlKS5udWxsVGFnQml0c1BlckRpbWVu
c2lvbjsKQEAgLTE2NCw5ICsxNzQsMTEgQEAKIAkJCQlpZiAocmVxdWlyZWRUeXBlLmlzUGFyYW1l
dGVyaXplZFR5cGUoKSAgJiYgcHJvdmlkZWRTdXBlciBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRU
eXBlQmluZGluZykgeyAvLyBUT0RPKHN0ZXBoYW4pOiBoYW5kbGUgcHJvdmlkZWRUeXBlLmlzUmF3
KCkKIAkJCQkJVHlwZUJpbmRpbmdbXSByZXF1aXJlZEFyZ3VtZW50cyA9ICgoUGFyYW1ldGVyaXpl
ZFR5cGVCaW5kaW5nKSByZXF1aXJlZFR5cGUpLmFyZ3VtZW50czsKIAkJCQkJVHlwZUJpbmRpbmdb
XSBwcm92aWRlZEFyZ3VtZW50cyA9ICgoUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nKSBwcm92aWRl
ZFN1cGVyKS5hcmd1bWVudHM7CisJCQkJCVR5cGVCaW5kaW5nW10gcHJvdmlkZWRTdWJzdGl0dXRl
cyA9IChwcm92aWRlZFN1YnN0aXR1dGUgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkVHlwZUJpbmRp
bmcpID8gKChQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcpcHJvdmlkZWRTdWJzdGl0dXRlKS5hcmd1
bWVudHMgOiBudWxsOwogCQkJCQlpZiAocmVxdWlyZWRBcmd1bWVudHMgIT0gbnVsbCAmJiBwcm92
aWRlZEFyZ3VtZW50cyAhPSBudWxsICYmIHJlcXVpcmVkQXJndW1lbnRzLmxlbmd0aCA9PSBwcm92
aWRlZEFyZ3VtZW50cy5sZW5ndGgpIHsKIAkJCQkJCWZvciAoaW50IGkgPSAwOyBpIDwgcmVxdWly
ZWRBcmd1bWVudHMubGVuZ3RoOyBpKyspIHsKLQkJCQkJCQlOdWxsQW5ub3RhdGlvbk1hdGNoaW5n
IHN0YXR1cyA9IGFuYWx5c2UocmVxdWlyZWRBcmd1bWVudHNbaV0sIHByb3ZpZGVkQXJndW1lbnRz
W2ldLCAtMSwgc3RyaWN0KTsKKwkJCQkJCQlUeXBlQmluZGluZyBwcm92aWRlZEFyZ1N1YnN0aXR1
dGUgPSBwcm92aWRlZFN1YnN0aXR1dGVzICE9IG51bGwgPyBwcm92aWRlZFN1YnN0aXR1dGVzW2ld
IDogbnVsbDsKKwkJCQkJCQlOdWxsQW5ub3RhdGlvbk1hdGNoaW5nIHN0YXR1cyA9IGFuYWx5c2Uo
cmVxdWlyZWRBcmd1bWVudHNbaV0sIHByb3ZpZGVkQXJndW1lbnRzW2ldLCBwcm92aWRlZEFyZ1N1
YnN0aXR1dGUsIC0xLCBzdHJpY3QpOwogCQkJCQkJCXNldmVyaXR5ID0gTWF0aC5tYXgoc2V2ZXJp
dHksIHN0YXR1cy5zZXZlcml0eSk7CiAJCQkJCQkJaWYgKHNldmVyaXR5ID09IDIpCiAJCQkJCQkJ
CXJldHVybiBuZXcgTnVsbEFubm90YXRpb25NYXRjaGluZyhzZXZlcml0eSwgbnVsbFN0YXR1cywg
c3VwZXJUeXBlSGludCk7CkBAIC0xNzYsNyArMTg4LDggQEAKIAkJCQlUeXBlQmluZGluZyByZXF1
aXJlZEVuY2xvc2luZyA9IHJlcXVpcmVkVHlwZS5lbmNsb3NpbmdUeXBlKCk7CiAJCQkJVHlwZUJp
bmRpbmcgcHJvdmlkZWRFbmNsb3NpbmcgPSBwcm92aWRlZFR5cGUuZW5jbG9zaW5nVHlwZSgpOwog
CQkJCWlmIChyZXF1aXJlZEVuY2xvc2luZyAhPSBudWxsICYmIHByb3ZpZGVkRW5jbG9zaW5nICE9
IG51bGwpIHsKLQkJCQkJTnVsbEFubm90YXRpb25NYXRjaGluZyBzdGF0dXMgPSBhbmFseXNlKHJl
cXVpcmVkRW5jbG9zaW5nLCBwcm92aWRlZEVuY2xvc2luZywgLTEsIHN0cmljdCk7CisJCQkJCVR5
cGVCaW5kaW5nIHByb3ZpZGVkRW5jbFN1YnN0aXR1dGUgPSBwcm92aWRlZFN1YnN0aXR1dGUgIT0g
bnVsbCA/IHByb3ZpZGVkU3Vic3RpdHV0ZS5lbmNsb3NpbmdUeXBlKCkgOiBudWxsOworCQkJCQlO
dWxsQW5ub3RhdGlvbk1hdGNoaW5nIHN0YXR1cyA9IGFuYWx5c2UocmVxdWlyZWRFbmNsb3Npbmcs
IHByb3ZpZGVkRW5jbG9zaW5nLCBwcm92aWRlZEVuY2xTdWJzdGl0dXRlLCAtMSwgc3RyaWN0KTsK
IAkJCQkJc2V2ZXJpdHkgPSBNYXRoLm1heChzZXZlcml0eSwgc3RhdHVzLnNldmVyaXR5KTsKIAkJ
CQl9CiAJCQl9CkBAIC0xODcsNyArMjAwLDcgQEAKIAl9CiAKIAkvKiogQXJlIGJvdGggdHlwZXMg
aWRlbnRpY2FsIHdydCB0aGUgdW5hbm5vdGF0ZWQgdHlwZSBhbmQgYW55IG51bGwgdHlwZSBhbm5v
dGF0aW9ucz8gT25seSB1bnN0cnVjdHVyZWQgdHlwZXMgYXJlIGNvbnNpZGVyZWQuICovCi0JcHJv
dGVjdGVkIHN0YXRpYyBib29sZWFuIGFyZVNhbWVUeXBlcyhUeXBlQmluZGluZyByZXF1aXJlZFR5
cGUsIFR5cGVCaW5kaW5nIHByb3ZpZGVkVHlwZSkgeworCXByb3RlY3RlZCBzdGF0aWMgYm9vbGVh
biBhcmVTYW1lVHlwZXMoVHlwZUJpbmRpbmcgcmVxdWlyZWRUeXBlLCBUeXBlQmluZGluZyBwcm92
aWRlZFR5cGUsIFR5cGVCaW5kaW5nIHByb3ZpZGVkU3Vic3RpdHV0ZSkgewogCQlpZiAocmVxdWly
ZWRUeXBlID09IHByb3ZpZGVkVHlwZSkgIC8vJElERU5USVRZLUNPTVBBUklTT04kIC8vIHNob3J0
IGN1dCBmb3IgcmVhbGx5LXJlYWxseS1zYW1lIHR5cGVzCiAJCQlyZXR1cm4gdHJ1ZTsKIAkJaWYg
KHJlcXVpcmVkVHlwZS5pc1BhcmFtZXRlcml6ZWRUeXBlKCkgfHwgcmVxdWlyZWRUeXBlLmlzQXJy
YXlUeXBlKCkpCkBAIC0xOTYsOCArMjA5LDEwIEBACiAJCQlpZiAocmVxdWlyZWRUeXBlIGluc3Rh
bmNlb2YgQ2FwdHVyZUJpbmRpbmcpIHsKIAkJCQkvLyB3aGVuIHByb3ZpZGluZyB0aGUgbG93ZXIg
Ym91bmQgb2YgdGhlIHJlcXVpcmVkIHR5cGUgd2hlcmUgZGVmaW5pdGVseSBmaW5lOgogCQkJCVR5
cGVCaW5kaW5nIGxvd2VyQm91bmQgPSAoKENhcHR1cmVCaW5kaW5nKXJlcXVpcmVkVHlwZSkubG93
ZXJCb3VuZDsKLQkJCQlpZiAobG93ZXJCb3VuZCAhPSBudWxsICYmIGFyZVNhbWVUeXBlcyhsb3dl
ckJvdW5kLCBwcm92aWRlZFR5cGUpKQorCQkJCWlmIChsb3dlckJvdW5kICE9IG51bGwgJiYgYXJl
U2FtZVR5cGVzKGxvd2VyQm91bmQsIHByb3ZpZGVkVHlwZSwgcHJvdmlkZWRTdWJzdGl0dXRlKSkK
IAkJCQkJcmV0dXJuIHRydWU7CisJCQl9IGVsc2UgaWYgKHJlcXVpcmVkVHlwZS5raW5kKCkgPT0g
QmluZGluZy5UWVBFX1BBUkFNRVRFUiAmJiByZXF1aXJlZFR5cGUgPT0gcHJvdmlkZWRTdWJzdGl0
dXRlKSB7IC8vJElERU5USVRZLUNPTVBBUklTT04kCisJCQkJcmV0dXJuIHRydWU7CiAJCQl9CiAJ
CQlyZXR1cm4gZmFsc2U7CiAJCX0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvSW1wbGljaXRO
dWxsQW5ub3RhdGlvblZlcmlmaWVyLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0ltcGxpY2l0TnVsbEFu
bm90YXRpb25WZXJpZmllci5qYXZhCmluZGV4IGJlYjgyMmIuLjAzNTVhODMgMTAwNjQ0Ci0tLSBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9sb29rdXAvSW1wbGljaXROdWxsQW5ub3RhdGlvblZlcmlmaWVyLmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2xvb2t1cC9JbXBsaWNpdE51bGxBbm5vdGF0aW9uVmVyaWZpZXIuamF2YQpAQCAtMjgx
LDcgKzI4MSwxMyBAQAogCQkJCQl9CiAJCQkJfQogCQkJCWlmICh1c2VUeXBlQW5ub3RhdGlvbnMp
IHsKLQkJCQkJaWYgKE51bGxBbm5vdGF0aW9uTWF0Y2hpbmcuYW5hbHlzZShpbmhlcml0ZWRNZXRo
b2QucmV0dXJuVHlwZSwgY3VycmVudE1ldGhvZC5yZXR1cm5UeXBlLCAwLCB0cnVlKS5pc0FueU1p
c21hdGNoKCkpIHsKKwkJCQkJVHlwZUJpbmRpbmcgc3Vic3RpdHV0ZVJldHVyblR5cGUgPSBudWxs
OyAvLyBmb3IgVFZCIGlkZW50aXR5IGNoZWNrcyBpbnNpZGUgTnVsbEFubm90YXRpb25NYXRjaGlu
Zy5hbmFseXplKCkKKwkJCQkJVHlwZVZhcmlhYmxlQmluZGluZ1tdIHR5cGVWYXJpYWJsZXMgPSBp
bmhlcml0ZWRNZXRob2QudHlwZVZhcmlhYmxlczsKKwkJCQkJaWYgKHR5cGVWYXJpYWJsZXMgIT0g
bnVsbCAmJiBjdXJyZW50TWV0aG9kLnJldHVyblR5cGUuaWQgIT0gVHlwZUlkcy5UX3ZvaWQpIHsK
KwkJCQkJCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBzdWJzdGl0dXRlID0gdGhp
cy5lbnZpcm9ubWVudC5jcmVhdGVQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChjdXJyZW50TWV0
aG9kLCB0eXBlVmFyaWFibGVzKTsKKwkJCQkJCXN1YnN0aXR1dGVSZXR1cm5UeXBlID0gc3Vic3Rp
dHV0ZS5yZXR1cm5UeXBlOworCQkJCQl9CisJCQkJCWlmIChOdWxsQW5ub3RhdGlvbk1hdGNoaW5n
LmFuYWx5c2UoaW5oZXJpdGVkTWV0aG9kLnJldHVyblR5cGUsIGN1cnJlbnRNZXRob2QucmV0dXJu
VHlwZSwgc3Vic3RpdHV0ZVJldHVyblR5cGUsIDAsIHRydWUpLmlzQW55TWlzbWF0Y2goKSkgewog
CQkJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuY2Fubm90SW1wbGVtZW50SW5jb21wYXRpYmxl
TnVsbG5lc3MoY3VycmVudE1ldGhvZCwgaW5oZXJpdGVkTWV0aG9kLCB1c2VUeXBlQW5ub3RhdGlv
bnMpOwogCQkJCQkJcmV0dXJuOwogCQkJCQl9CkBAIC0yOTAsNiArMjk2LDE1IEBACiAJCX0KIAog
CQkvLyBwYXJhbWV0ZXJzOgorCQlUeXBlQmluZGluZ1tdIHN1YnN0aXR1dGVQYXJhbWV0ZXJzID0g
bnVsbDsgLy8gZm9yIFRWQiBpZGVudGl0eSBjaGVja3MgaW5zaWRlIE51bGxBbm5vdGF0aW9uTWF0
Y2hpbmcuYW5hbHl6ZSgpCisJCWlmIChzaG91bGRDb21wbGFpbikgeworCQkJVHlwZVZhcmlhYmxl
QmluZGluZ1tdIHR5cGVWYXJpYWJsZXMgPSBjdXJyZW50TWV0aG9kLnR5cGVWYXJpYWJsZXM7CisJ
CQlpZiAodHlwZVZhcmlhYmxlcyAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVTKSB7CisJCQkJ
UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIHN1YnN0aXR1dGUgPSB0aGlzLmVudmly
b25tZW50LmNyZWF0ZVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kKGluaGVyaXRlZE1ldGhvZCwg
dHlwZVZhcmlhYmxlcyk7CisJCQkJc3Vic3RpdHV0ZVBhcmFtZXRlcnMgPSBzdWJzdGl0dXRlLnBh
cmFtZXRlcnM7CisJCQl9CisJCX0KKwogCQlBcmd1bWVudFtdIGN1cnJlbnRBcmd1bWVudHMgPSBz
cmNNZXRob2QgPT0gbnVsbCA/IG51bGwgOiBzcmNNZXRob2QuYXJndW1lbnRzOwogCiAJCWludCBs
ZW5ndGggPSAwOwpAQCAtMzg4LDcgKzQwMyw4IEBACiAJCQkJCX0KIAkJCQl9IAogCQkJCWlmICh1
c2VUeXBlQW5ub3RhdGlvbnMpIHsKLQkJCQkJaWYgKE51bGxBbm5vdGF0aW9uTWF0Y2hpbmcuYW5h
bHlzZShjdXJyZW50TWV0aG9kLnBhcmFtZXRlcnNbaV0sIGluaGVyaXRlZE1ldGhvZC5wYXJhbWV0
ZXJzW2ldLCAwLCB0cnVlKS5pc0FueU1pc21hdGNoKCkpIHsKKwkJCQkJVHlwZUJpbmRpbmcgc3Vi
c3RpdHV0ZVBhcmFtZXRlciA9IHN1YnN0aXR1dGVQYXJhbWV0ZXJzICE9IG51bGwgPyBzdWJzdGl0
dXRlUGFyYW1ldGVyc1tpXSA6IG51bGw7CisJCQkJCWlmIChOdWxsQW5ub3RhdGlvbk1hdGNoaW5n
LmFuYWx5c2UoY3VycmVudE1ldGhvZC5wYXJhbWV0ZXJzW2ldLCBpbmhlcml0ZWRNZXRob2QucGFy
YW1ldGVyc1tpXSwgc3Vic3RpdHV0ZVBhcmFtZXRlciwgMCwgdHJ1ZSkuaXNBbnlNaXNtYXRjaCgp
KSB7CiAJCQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5jYW5ub3RJbXBsZW1lbnRJbmNvbXBh
dGlibGVOdWxsbmVzcyhjdXJyZW50TWV0aG9kLCBpbmhlcml0ZWRNZXRob2QsIGZhbHNlKTsKIAkJ
CQkJfQogCQkJCX0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL1Byb2JsZW1SZXBvcnRlci5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxlbVJlcG9ydGVyLmphdmEKaW5kZXggZGE2M2E2Yi4u
ZjU3MGZiMiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxlbVJlcG9ydGVyLmphdmEK
KysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxlbVJlcG9ydGVyLmphdmEKQEAgLTkxNTQsNyArOTE1
NCw4IEBACiB9CiBwdWJsaWMgdm9pZCBudWxsaXR5TWlzbWF0Y2hJc051bGwoRXhwcmVzc2lvbiBl
eHByZXNzaW9uLCBUeXBlQmluZGluZyByZXF1aXJlZFR5cGUpIHsKIAlpbnQgcHJvYmxlbUlkID0g
SVByb2JsZW0uUmVxdWlyZWROb25OdWxsQnV0UHJvdmlkZWROdWxsOwotCWlmIChyZXF1aXJlZFR5
cGUuaXNUeXBlVmFyaWFibGUoKSAmJiAhcmVxdWlyZWRUeXBlLmhhc051bGxUeXBlQW5ub3RhdGlv
bnMoKSkKKwlib29sZWFuIGJlbG93MTggPSB0aGlzLm9wdGlvbnMuc291cmNlTGV2ZWwgPCBDbGFz
c0ZpbGVDb25zdGFudHMuSkRLMV84OworCWlmICghYmVsb3cxOCAmJiByZXF1aXJlZFR5cGUuaXNU
eXBlVmFyaWFibGUoKSAmJiAhcmVxdWlyZWRUeXBlLmhhc051bGxUeXBlQW5ub3RhdGlvbnMoKSkK
IAkJcHJvYmxlbUlkID0gSVByb2JsZW0uTnVsbE5vdENvbXBhdGlibGVUb0ZyZWVUeXBlVmFyaWFi
bGU7CiAJaWYgKHJlcXVpcmVkVHlwZSBpbnN0YW5jZW9mIENhcHR1cmVCaW5kaW5nKSB7CiAJCUNh
cHR1cmVCaW5kaW5nIGNhcHR1cmUgPSAoQ2FwdHVyZUJpbmRpbmcpIHJlcXVpcmVkVHlwZTsKQEAg
LTkxNjMsNyArOTE2NCw3IEBACiAJfQogCVN0cmluZ1tdIGFyZ3VtZW50czsKIAlTdHJpbmdbXSBh
cmd1bWVudHNTaG9ydDsKLQlpZiAodGhpcy5vcHRpb25zLnNvdXJjZUxldmVsIDwgQ2xhc3NGaWxl
Q29uc3RhbnRzLkpESzFfOCkgeworCWlmIChiZWxvdzE4KSB7CiAJCWFyZ3VtZW50cyAgICAgID0g
bmV3IFN0cmluZ1tdIHsgYW5ub3RhdGVkVHlwZU5hbWUocmVxdWlyZWRUeXBlLCB0aGlzLm9wdGlv
bnMubm9uTnVsbEFubm90YXRpb25OYW1lKSB9OwogCQlhcmd1bWVudHNTaG9ydCA9IG5ldyBTdHJp
bmdbXSB7IHNob3J0QW5ub3RhdGVkVHlwZU5hbWUocmVxdWlyZWRUeXBlLCB0aGlzLm9wdGlvbnMu
bm9uTnVsbEFubm90YXRpb25OYW1lKSB9OwogCX0gZWxzZSB7
</data>

          </attachment>
      

    </bug>

</bugzilla>