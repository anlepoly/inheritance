<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>370930</bug_id>
          
          <creation_ts>2012-02-08 05:37:00 -0500</creation_ts>
          <short_desc>NonNull annotation not considered for enhanced for loops</short_desc>
          <delta_ts>2012-03-12 04:39:29 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Mac OS X - Carbon (unsup.)</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>3.8 M6</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Sebastian Zarnekow">Sebastian.Zarnekow</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2062625</commentid>
    <comment_count>0</comment_count>
    <who name="Sebastian Zarnekow">Sebastian.Zarnekow</who>
    <bug_when>2012-02-08 05:37:23 -0500</bug_when>
    <thetext>import java.util.Collections;
import java.util.List;

import org.eclipse.jdt.annotation.NonNull;


public class C {

	void loop() {
		List&lt;String&gt; list = Collections.emptyList();
		for(@NonNull String s: list) {
			expectNonNull(s);
		}
	}
	
	void expectNonNull(@NonNull String s) {}
	
}

gives 

Potential type mismatch: required &apos;@NonNull String&apos; but nullness of the provided value is unknown

on

expectNonNull(s);</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2062661</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-02-08 07:49:33 -0500</bug_when>
    <thetext>It would appear the right behavior is for this warning to not show
up. But there should be a warning in the preceding line since there
is no syntax to annotate a collection as containing only @NonNull
elements and so as the cursor advances there is no non null guarantee
that can be enforced by the null annotation processor.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2062662</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-02-08 07:51:05 -0500</bug_when>
    <thetext>The other construct that allows a local to be declared works alright:

//--------------
import org.eclipse.jdt.annotation.NonNull;


public class X implements AutoCloseable {

	@NonNull X[] x = null;
    public static void main(String[] args) {
		try (@NonNull X x = boo()) {
			goo(x);
		}
	}

    static X boo() {
    	return null;
    }
    static void goo(@NonNull X x) {
    	
    }

	@Override
	public void close()  {
	}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2062750</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-02-08 10:14:18 -0500</bug_when>
    <thetext>(In reply to comment #1)
&gt; It would appear the right behavior is for this warning to not show
&gt; up. But there should be a warning in the preceding line since there
&gt; is no syntax to annotate a collection as containing only @NonNull
&gt; elements and so as the cursor advances there is no non null guarantee
&gt; that can be enforced by the null annotation processor.

I agree. 
Should be easy to fix for M6</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2065802</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-02-14 16:50:25 -0500</bug_when>
    <thetext>Fixed for 3.8 M6 via commit d137239e9d64b43b4573cdfef965a2c47040a54e

Normally, the annotation on the local variable declaration is analyzed as part of the initialization/assignment.
The bug happened because in this particular case we have no AST representing an assignment to the local variable.

As a side effect of fixing the bug, we now see another warning against &quot;for(@NonNull String s: list)&quot;, where list is a &apos;List&lt;String&gt;&apos;:
   Potential type mismatch: required &apos;@NonNull String&apos; but nullness of the provided value is unknown.
Until we have JSR 308 we cannot say &apos;List&lt;@NonNull String&gt;&apos; so the elements have the legacy type String, which is not safely assignable to &apos;@NonNull String&apos;.
Just mentioning so nobody is surprised about the new outcome.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2078527</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-12 04:39:29 -0400</bug_when>
    <thetext>Verified for 3.8 M6 using Build id: I20120306-0800</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>