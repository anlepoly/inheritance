<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>443596</bug_id>
          
          <creation_ts>2014-09-09 08:56:00 -0400</creation_ts>
          <short_desc>[1.8][compiler] Failure for overload resolution in case of Generics and Varags</short_desc>
          <delta_ts>2015-03-10 04:35:16 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.5</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard>4.4.2 candidate</status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.5 M3</target_milestone>
          <dependson>448795</dependson>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="shankha banerjee">shankhba</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>ignacio</cc>
    
    <cc>jarthana</cc>
    
    <cc>mail</cc>
    
    <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>1</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2449248</commentid>
    <comment_count>0</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-09-09 08:56:55 -0400</bug_when>
    <thetext>Please see Bug 437973 Comment 17.

public final class Collections2 {
    static interface Predicate&lt;T&gt; { boolean test(T object); }
    public static &lt;T&gt; Predicate&lt;T&gt; in(Predicate&lt;? extends T&gt; arg) { return null; }
    public static &lt;T&gt; Predicate&lt;T&gt; and(Predicate&lt;? super T&gt;... arg) { return null; }
    public static &lt;T&gt; Predicate&lt;T&gt; and(Predicate&lt;? super T&gt; arg0, Predicate&lt;? super T&gt; arg1) { return null; }
    static class FilteredCollection&lt;E&gt; {
        Predicate&lt;? super E&gt; predicate;
        public void error(Predicate&lt;?&gt; arg) { and(predicate, in(arg)); } // no compile
    }
}

---

1. WARNING in Collections2.java (at line 4)\r\n
	public static &lt;T&gt; Predicate&lt;T&gt; and(Predicate&lt;? super T&gt;... arg) { return null; }\r\n
	                                                           ^^^\n
Type safety: Potential heap pollution via varargs parameter arg\n


2. ERROR in Collections2.java (at line 8)\r\n
	public void error(Predicate&lt;?&gt; arg) { and(predicate, in(arg)); } // no compile\r\n
	                                      ^^^\n
The method and(Collections2.Predicate&lt;capture#1-of ? super E&gt;, Collections2.Predicate&lt;capture#2-of ?&gt;) is undefined for the type Collections2.FilteredCollection&lt;E&gt;\n


---

javac 1.8 compiles the code without any issues.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2449254</commentid>
    <comment_count>1</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-09-09 09:02:24 -0400</bug_when>
    <thetext>Working on the bug.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2453279</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-17 14:36:46 -0400</bug_when>
    <thetext>See https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2456825</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-26 13:39:03 -0400</bug_when>
    <thetext>Sorry for grabbing this, this problem goes away with a small fix made deep in
the inference engine on behalf of https://bugs.eclipse.org/bugs/show_bug.cgi?id=428177 in this commit: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=48bf00145f70fca24101eaac33adc5d495f9e595.

I released a junit for the present bug in http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=c127c3482b92bbf9848e1835d9270166a3395d66

*** This bug has been marked as a duplicate of bug 428177 ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2459609</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-03 01:30:58 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #3)

&gt; I released a junit for the present bug in
&gt; http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
&gt; ?id=c127c3482b92bbf9848e1835d9270166a3395d66

I disabled this test for now since https://bugs.eclipse.org/bugs/show_bug.cgi?id=432605 and https://bugs.eclipse.org/bugs/show_bug.cgi?id=428177 got reopened
with a revert of the fix.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471868</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-25 23:02:01 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #4)
&gt; (In reply to Srikanth Sankaran from comment #3)
&gt; 
&gt; &gt; I released a junit for the present bug in
&gt; &gt; http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
&gt; &gt; ?id=c127c3482b92bbf9848e1835d9270166a3395d66
&gt; 
&gt; I disabled this test for now since
&gt; https://bugs.eclipse.org/bugs/show_bug.cgi?id=432605 and
&gt; https://bugs.eclipse.org/bugs/show_bug.cgi?id=428177 got reopened
&gt; with a revert of the fix.

The fix considered for https://bugs.eclipse.org/bugs/show_bug.cgi?id=432605
and https://bugs.eclipse.org/bugs/show_bug.cgi?id=428177 and so is withdrawn.

Given this bug was judged to be a duplicate based on the inappropriate fix
seemingly making this problem go away, the duplicate tagging is suspect.
Upon closer study, I find that to be not just suspect, but wrong.

Reopening. I have a fix under test.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471893</commentid>
    <comment_count>6</comment_count>
      <attachid>248187</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-26 06:10:54 -0400</bug_when>
    <thetext>Created attachment 248187
Fix for bug 443596 + bug 448795 + bug 447767

Attached patch is in consideration and fixes the three bugs mentioned.
There are intricate dependencies which call for unified solution</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472094</commentid>
    <comment_count>7</comment_count>
      <attachid>248192</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-26 22:45:22 -0400</bug_when>
    <thetext>Created attachment 248192
Same patch synched with master</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472099</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-26 23:33:10 -0400</bug_when>
    <thetext>Stephan, this is a must fix for M3 - I don&apos;t have the heart to ask for a
code review, given how much demands have been placed on you during M3.
I&apos;ll let you take a call on whether you want to still review for M3 or
at leisure later.

I&apos;ll organize a fresh round of elaborate testing with all the three pending 
patches (the one here + https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444 +
https://bugs.eclipse.org/bugs/show_bug.cgi?id=444334) (JRE, SDK, other IBN
teams ...) given the volume of changes since the last round of such testing.

Here is what this fix is trying to do and the rationale why it is a must fix 
for M3.

The test case here exposes a serious issue with https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444 as it exists on master
today that being:

On master while inferring the outer call to and() we find ourselves in
Scope.mSMB with two visible candidates:

(1) Predicate&lt;capture#1-of ? super E &amp; capture#2-of ?&gt; and(Predicate&lt;? super capture#1-of ? super E &amp; capture#2-of ?&gt;[]) 

and 

(2) Predicate&lt;capture#1-of ? super E &amp; capture#2-of ?&gt; and(Predicate&lt;? super capture#1-of ? super E &amp; capture#2-of ?&gt;, Predicate&lt;? super capture#1-of ? super E &amp; capture#2-of ?&gt;) 

Scope.mSMB calls parameterCompatibilityLevel(method, TypeBinding [])

and this correctly eliminates the first one as being incompatible and
INCORRECTLY disqualifies the second one as being incompatible too
leading to a compile error.

Analyzing why this incorrect incompatibility arises:

Answering:

Predicate&lt;capture#1-of ? super E&gt;.isCompatibleWith(Predicate&lt;? super capture#1-of ? super E &amp; capture#2-of ?&gt;) 

translates into a check 

(capture#1-of ? super E &amp; capture#2-of ?).fSOF(&lt;E&gt;)

and this fails. I am not yet sure if this is connected to the 
CaptureBinding.initializeBounds problem being discussed in 
https://bugs.eclipse.org/bugs/show_bug.cgi?id=441905, but perhaps it
is the case - it is going to require a lot more time to fix the
infrastructure issues to make isCompatible answer true correctly.

I am overcoming this problem by simply obtaining the compatibility
level from inference kind, but that requires a fix for 
https://bugs.eclipse.org/bugs/show_bug.cgi?id=448795 as simply answering
CHECK_LOOSE as we do on master is wrong for this solution.

The new method Scope.parameterCompatibilityLevel(MethodBinding, 
TypeBinding[], InvocationSite)

implements the mapping between inference kind and compatibility levels.

However this method cannot simply directly map them as we may have
arguments not pertinent to applicability in the picture and we may
have done only applicability inference and have only a PPGMB and
some of the arguments could be blatantly mismatched (some tests introduced
for https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444 start failing
with a simple map from inference kind to compatibility level)

The behavior on master (and erstwhile master with the original F &amp; G
integration) is an interesting mix - Scope.cCM would forego post
inference applicability checks, 

but if we ever get into Scope.mSMB (on both master and erstwhile master)

we would do full compatibility checks.

This dual approaches exposes problems due to ICTB not being fully
hooked in TB.fSOF and TB.isTypeArgumentContainedBy.

Now with Scope.parameterCompatibilityLevel(MethodBinding, 
TypeBinding[], InvocationSite) we implement a consistent &amp; 
coherent policy for compatibility checks post inference.

Scope.cCM will completely trust inference - this could mean a method
with incompatibilities due to arguments not pertinent to applicability
when only applicability was inferred could be found by findMethod().
=&gt; No change from master and erstwhile master.

Scope.mSMB will trust inference and skip compatibility checks for
all argument expressions that are NOT functional type expressions.
For functional type expressions, we check compatibility with the
safety net of consulting the shallow original to weed out cases where
a type variable of the method is a parameter to the method at the
position where the argument expression is a functional type.

Implementing these in the new method results in a *much* cleaner solution
compared to my earlier attempts to do this in 
org.eclipse.jdt.internal.compiler.lookup.Scope.parameterCompatibilityLevel(MethodBinding, TypeBinding[], boolean)

(which I withdrew in https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444#c128)

So now with this change in place, we get past Scope.mSMB, but the story
does not end there and we come to the part why this is a must fix for
M3.

We infer the outer method to be:

Predicate&lt;capture#1-of ? super E &amp; capture#2-of ?&gt; and(Predicate&lt;? super capture#1-of ? super E &amp; capture#2-of ?&gt;, Predicate&lt;? super capture#1-of ? super E &amp; capture#2-of ?&gt;) 

when (re) resolving the inner poly expression in(arg) against its
eventual target type:

outer call establishes the target type of Predicate&lt;? super capture#1-of ? super E &amp; capture#2-of ?&gt; and now

in()&apos;s re-inference fails to due to a bug in TB.fSOF not considering
ICTBs !!! The fix for that itself is straightforward, but this test case
shows that

due to infrastructure issues around ICTB not being hooked up fully,
re-inference could fail against proper eventual target types when it should
not.

Given the present master strategy triggers and will trigger reinference till
https://bugs.eclipse.org/bugs/show_bug.cgi?id=448794 is implemented, this
is an exposure.

Hence the present fix.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472102</commentid>
    <comment_count>9</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-26 23:37:53 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #8)

&gt; Scope.cCM will completely trust inference - this could mean a method
&gt; with incompatibilities due to arguments not pertinent to applicability
&gt; when only applicability was inferred could be found by findMethod().
&gt; =&gt; No change from master and erstwhile master.

To be clear, such incompatible methods will never ever result in wrong
program being compiled. I.e it is a case of not choosing to trigger an
early failure. Downstream we will reject such incompatible methods.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472103</commentid>
    <comment_count>10</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-26 23:39:12 -0400</bug_when>
    <thetext>https://bugs.eclipse.org/bugs/show_bug.cgi?id=443596#c8 was a long
explanation - but actually the patch itself is very simple and can
be reviewed with in an hour&apos;s time. However this can come per your
convenience.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472105</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-26 23:56:11 -0400</bug_when>
    <thetext>Working on this problem has actually been helpful to ponder some
&quot;philosophical&quot; questions:

    - what does it mean to say &quot;trust inference&quot; ? 
    - to what degree can we trust inference ? 
    - if we want to boost our trust what needs to be done ?

Documenting connections to: https://bugs.eclipse.org/bugs/show_bug.cgi?id=426537

In that bug we took the approach that inference can produce a solution
that cannot be fully trusted and we need to apply post inference compatibility
checks to weed out incorrect results produced by inference.

There is no doubt that the test case in https://bugs.eclipse.org/bugs/show_bug.cgi?id=426537 must be rejected,
it is produced by inference.

So how did we get there ? 

Inference (assuming is bug free otherwise) can produce solutions that are
only as trustworthy as the &apos;outside-infrastructure-that-it-depends-on-to-
produce-those-solutions&apos; are trustworthy.

If isCompatibleWith would answer true to J#RAW &lt;= J&lt;?&gt; and this is used
by inference, our bets can&apos;t be high.

BUT, 

this whole situation emerges because inference engine breaks down larger
questions into smaller and ever smaller questions and even if the
infrastructure answers wrongly to one of smaller questions, we can still
ask the larger question at a later point in the engine.

If after solution, we revisit every CTF produced during inference that
we sliced and diced into ever smaller constraints during original visitation
and with instantiations produced by resolve applied ask the proper types
of the macro level CTFs if their original constraint is still true and
rejected the solution, we could reach a stage inference engine will
never produce a solution that is wrong.

We don&apos;t ask those larger questions inside the engine. Which is what
make it necessary to ask them post inference.

The present bug also has other connections to 
https://bugs.eclipse.org/bugs/show_bug.cgi?id=426537. If you look
at the &quot;solution&quot; in MessageSend.findMethodBinding, it carefully
side steps a bunch of scenarios with captures and ICTB&apos;s

They should have been tacked head on right then to uncover the
real problems - which is what we are hitting now - and again the present
approach is side step them (well, not totally true since TB.fSOF has
a fix for ICTB)) rather than tackle them head on - but it is too late
for M3.

I&apos;ll look into them for M4 for sure.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472107</commentid>
    <comment_count>12</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-27 00:13:48 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #11)

&gt; If after solution, we revisit every CTF produced during inference that
&gt; we sliced and diced into ever smaller constraints during original visitation
&gt; and with instantiations produced by resolve applied ask the proper types
&gt; of the macro level CTFs if their original constraint is still true and
&gt; rejected the solution, we could reach a stage inference engine will
&gt; never produce a solution that is wrong.
&gt; 
&gt; We don&apos;t ask those larger questions inside the engine. Which is what
&gt; make it necessary to ask them post inference.

I&apos;ll prototype this for M4 for https://bugs.eclipse.org/bugs/show_bug.cgi?id=426537 - this could be the rigorous solution and the hack at that
bug could be withdrawn.

I don&apos;t see the extra post resolution rechecks constituting a performance
problem - after call isCompatibleWith caches the results.

As an added bonus, I see this exercise as a way to expose every weak
link the outside infrastructure - that today we don&apos;t run into because
the test cases we have not exercising them (with the inferred method being
an inner poly of an outer poly)

Overall in summary, the patch here leaves us in a very clean. consistent
and coherent state with respect to compatibility checks post inference.

It is &quot;safe&quot; relative to master because we perform only a subset of checks
relative to master (only functional types) and not more.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472110</commentid>
    <comment_count>13</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-27 00:24:31 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #11)

&gt; If isCompatibleWith would answer true to J#RAW &lt;= J&lt;?&gt; and this is used
&gt; by inference, our bets can&apos;t be high.

I meant J#RAW &lt;: J&lt;?&gt;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472406</commentid>
    <comment_count>14</comment_count>
      <attachid>248209</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-27 09:58:23 -0400</bug_when>
    <thetext>Created attachment 248209
Same patch synched with master + more tests

Fix for Fix for bug 443596 + bug 448795 + bug 447767</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472407</commentid>
    <comment_count>15</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-27 10:01:48 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #12)

&gt; Overall in summary, the patch here leaves us in a very clean. consistent
&gt; and coherent state with respect to compatibility checks post inference.

See also https://bugs.eclipse.org/bugs/show_bug.cgi?id=448954#c1 onwards.

&gt; It is &quot;safe&quot; relative to master because we perform only a subset of checks
&gt; relative to master (only functional types) and not more.

It is slightly &quot;safer&quot; since we also look for unresolved type variables of 
the generic method furnishing target type for functional expressions.

(I&apos;ll move over all &quot;philosohical&quot; discussions about trusting inference
to https://bugs.eclipse.org/bugs/show_bug.cgi?id=426537)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472542</commentid>
    <comment_count>16</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-27 13:00:18 -0400</bug_when>
    <thetext>Grrr. Type inference calls new ICTB in a bunch of places - that is bad.

It should instead do environment.createIntersectionCastType().

This fails to intern types and causes incompatibility. Also I found the
place in TB.isTACB where I need to make changes for proper type argument
containment detection for ICTB.

Will update the patch shortly.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472569</commentid>
    <comment_count>17</comment_count>
      <attachid>248211</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-27 13:50:29 -0400</bug_when>
    <thetext>Created attachment 248211
Revised patch interning ICTBs</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472572</commentid>
    <comment_count>18</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-27 13:54:07 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #17)
&gt; Created attachment 248211 [details]
&gt; Revised patch interning ICTBs

Good news. With this patch even if
Scope.parameterCompatibilityLevel(MethodBinding, TypeBinding[], InvocationSite)
does not short circuit non-functional arguments compatibility all is well.
So my worry that reinference of inner polies may fail due to &quot;infrastructure&quot;
issues is eliminated by the fix to TB.fSOF and TB.iSTACB not handling ICTB.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472673</commentid>
    <comment_count>19</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-27 18:15:44 -0400</bug_when>
    <thetext>Cumulative fix with tests for bug 443596 + bug 448795 + bug 447767

released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=5a11933bf440021c4c92ce580c9967dadb549d6e</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2473179</commentid>
    <comment_count>20</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-10-29 00:37:46 -0400</bug_when>
    <thetext>Verified for 4.5 M3 using I20141028-2000 build</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2486794</commentid>
    <comment_count>21</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-11-20 23:39:34 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #19)
&gt; Cumulative fix with tests for bug 443596 + bug 448795 + bug 447767
&gt; 
&gt; released here:
&gt; http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
&gt; ?id=5a11933bf440021c4c92ce580c9967dadb549d6e

Srikanth, can you please confirm if this is the only commit that needs to be back ported? Thanks!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2489567</commentid>
    <comment_count>22</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-27 01:08:26 -0500</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #21)
&gt; (In reply to Srikanth Sankaran from comment #19)
&gt; &gt; Cumulative fix with tests for bug 443596 + bug 448795 + bug 447767
&gt; &gt; 
&gt; &gt; released here:
&gt; &gt; http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
&gt; &gt; ?id=5a11933bf440021c4c92ce580c9967dadb549d6e
&gt; 
&gt; Srikanth, can you please confirm if this is the only commit that needs to be
&gt; back ported? Thanks!

I am not sure.

I think this very likely depends on the big rewrite of the integration between
F &amp; G. In any case, we should test this black box with this patch and see.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2489570</commentid>
    <comment_count>23</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-11-27 01:21:02 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #22)
&gt; I think this very likely depends on the big rewrite of the integration
&gt; between
&gt; F &amp; G. In any case, we should test this black box with this patch and see.

Indeed, as observed on bug 444334, comment #22, the patch as is can&apos;t be applied. Needs to be looked at closely to recreate the patch for 4.4.2.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2529232</commentid>
    <comment_count>24</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2015-03-10 04:35:16 -0400</bug_when>
    <thetext>*** Bug 461627 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>248187</attachid>
            <date>2014-10-26 06:10:00 -0400</date>
            <delta_ts>2014-10-26 22:45:22 -0400</delta_ts>
            <desc>Fix for bug 443596 + bug 448795 + bug 447767</desc>
            <filename>threefixes.patch</filename>
            <type>text/plain</type>
            <size>18283</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9v
cmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVn
cmVzc2lvblRlc3QuamF2YQppbmRleCA3NTNjYjY5Li44NjRiMDRlIDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25UZXN0LmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pk
dC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVzdC5q
YXZhCkBAIC01NDgxLDkgKzU0ODEsOCBAQAogCQkgICAiIik7CiB9CiAvLyBodHRwczovL2J1Z3Mu
ZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDQzNTk2LCBbMS44XVtjb21waWxlcl0g
RmFpbHVyZSBmb3Igb3ZlcmxvYWQgcmVzb2x1dGlvbiBpbiBjYXNlIG9mIEdlbmVyaWNzIGFuZCBW
YXJhZ3MgCi1wdWJsaWMgdm9pZCBfdGVzdDQ0MzU5NigpIHsKLQlpZiAodGhpcy5jb21wbGlhbmNl
TGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNykKLQkJdGhpcy5ydW5OZWdhdGl2ZVRl
c3QoCitwdWJsaWMgdm9pZCB0ZXN0NDQzNTk2KCkgeworCXRoaXMucnVuTmVnYXRpdmVUZXN0KAog
CQkgICBuZXcgU3RyaW5nW10gewogCQkJICAgIlguamF2YSIsCiAJCQkgICAicHVibGljIGZpbmFs
IGNsYXNzIFgge1xuIiArCkBAIC01NDk3LDEyICs1NDk2LDEzIEBACiAJCQkgICAiICAgIH1cbiIg
KwogCQkJICAgIn1cbiIsCiAJCSAgIH0sCi0JCSAgICItLS0tLS0tLS0tXG4iICsgCi0JCQkiMS4g
V0FSTklORyBpbiBYLmphdmEgKGF0IGxpbmUgNClcbiIgKyAKLQkJCSIJcHVibGljIHN0YXRpYyA8
VD4gUHJlZGljYXRlPFQ+IGFuZChQcmVkaWNhdGU8PyBzdXBlciBUPi4uLiBhcmcpIHsgcmV0dXJu
IG51bGw7IH1cbiIgKyAKLQkJCSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICBeXl5cbiIgKyAKLQkJCSJUeXBlIHNhZmV0eTogUG90ZW50
aWFsIGhlYXAgcG9sbHV0aW9uIHZpYSB2YXJhcmdzIHBhcmFtZXRlciBhcmdcbiIgKyAKLQkJCSIt
LS0tLS0tLS0tXG4iKTsKKwkJICAgdGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25z
dGFudHMuSkRLMV83ID8gCisJCSAgICIiIDogIi0tLS0tLS0tLS1cbiIgKyAKKwkJCQkiMS4gV0FS
TklORyBpbiBYLmphdmEgKGF0IGxpbmUgNClcbiIgKyAKKwkJCQkiCXB1YmxpYyBzdGF0aWMgPFQ+
IFByZWRpY2F0ZTxUPiBhbmQoUHJlZGljYXRlPD8gc3VwZXIgVD4uLi4gYXJnKSB7IHJldHVybiBu
dWxsOyB9XG4iICsgCisJCQkJIgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgIF5eXlxuIiArIAorCQkJCSJUeXBlIHNhZmV0eTogUG90ZW50
aWFsIGhlYXAgcG9sbHV0aW9uIHZpYSB2YXJhcmdzIHBhcmFtZXRlciBhcmdcbiIgKyAKKwkJCQki
LS0tLS0tLS0tLVxuIik7CiB9CiAvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93
X2J1Zy5jZ2k/aWQ9NDQ2MjIzLCBbMS44XVtjb21waWxlcl0gSmF2YTggZ2VuZXJpY3MgZWNsaXBz
ZSBkb2Vzbid0IGNvbXBpbGUgIAogcHVibGljIHZvaWQgdGVzdDQ0NjIyMygpIHsKQEAgLTU2MzUs
NSArNTYzNSw4OSBAQAogCQkJIlR5cGUgc2FmZXR5OiBQb3RlbnRpYWwgaGVhcCBwb2xsdXRpb24g
dmlhIHZhcmFyZ3MgcGFyYW1ldGVyIHdvcmtlcnNcbiIgKyAKIAkJCSItLS0tLS0tLS0tXG4iKTsK
IH0KKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00NDg3
OTUsIFsxLjhdW2NvbXBpbGVyXSBJbmZlcmVuY2Ugc2hvdWxkIGRpc2NyaW1pbmF0ZSBiZXR3ZWVu
IHN0cmljdCBhbmQgbG9vc2UgbW9kZXMgICAKK3B1YmxpYyB2b2lkIHRlc3Q0NDg3OTUoKSB7CisJ
CXRoaXMucnVuTmVnYXRpdmVUZXN0KAorCQkgICBuZXcgU3RyaW5nW10geworCQkJICAgIlguamF2
YSIsCisJCQkgICAicHVibGljIGNsYXNzIFg8VD4ge1xuIiArCisJCQkgICAiCXN0YXRpYyA8VD4g
VCBlbGVtZW50KFQgW10gdGEpIHtcbiIgKworCQkJICAgIgkJcmV0dXJuIHRhWzBdO1xuIiArCisJ
CQkgICAiCX1cbiIgKworCQkJICAgIglwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBh
cmdzKSB7XG4iICsKKwkJCSAgICIJCWludCB4ID0gZWxlbWVudChuZXcgaW50IFtdIHsgMTIzNCB9
KTtcbiIgKyAgLy8gY2hlY2sgdGhhdCBhdXRvYm94aW5nIGRvZXMgbm90IGtpY2sgaW4gZm9yIGFy
cmF5cywgaS5lIGVuZ2luZSBzaG91bGQgbm90IHNsaXAgaW50byBsb29zZSBtb2RlLgorCQkJICAg
Igl9XG4iICsKKwkJCSAgICJ9XG4iLAorCQkgICB9LAorCQkgICAiLS0tLS0tLS0tLVxuIiArIAor
CQkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA2KVxuIiArIAorCQkJIglpbnQgeCA9IGVs
ZW1lbnQobmV3IGludCBbXSB7IDEyMzQgfSk7XG4iICsgCisJCQkiCSAgICAgICAgXl5eXl5eXlxu
IiArIAorCQkJIlRoZSBtZXRob2QgZWxlbWVudChUW10pIGluIHRoZSB0eXBlIFg8VD4gaXMgbm90
IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKGludFtdKVxuIiArIAorCQkJIi0tLS0tLS0t
LS1cbiIpOworfQorLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dp
P2lkPTQ0ODc5NSwgWzEuOF1bY29tcGlsZXJdIEluZmVyZW5jZSBzaG91bGQgZGlzY3JpbWluYXRl
IGJldHdlZW4gc3RyaWN0IGFuZCBsb29zZSBtb2RlcyAgIAorcHVibGljIHZvaWQgdGVzdDQ0ODc5
NWEoKSB7CisJCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCSAgIG5ldyBTdHJpbmdbXSB7CisJCQkg
ICAiWC5qYXZhIiwKKwkJCSAgICJwdWJsaWMgY2xhc3MgWDxUPiB7XG4iICsKKwkJCSAgICIJc3Rh
dGljIDxUPiBUIGVsZW1lbnQoaW50IHgsIFQgdCkge1xuIiArCisJCQkgICAiCQlTeXN0ZW0ub3V0
LnByaW50bG4oXCJTdHJpY3RcIik7XG4iICsKKwkJCSAgICIJCXJldHVybiB0O1xuIiArCisJCQkg
ICAiCX1cbiIgKworCQkJICAgIglzdGF0aWMgPFQ+IFQgZWxlbWVudChUIHQxLCBUIHQyKSB7XG4i
ICsKKwkJCSAgICIJCVN5c3RlbS5vdXQucHJpbnRsbihcIkxvb3NlXCIpO1xuIiArCisJCQkgICAi
CQlyZXR1cm4gdDI7XG4iICsKKwkJCSAgICIJfVxuIiArCisJCQkgICAiCXB1YmxpYyBzdGF0aWMg
dm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKworCQkJICAgIgkJaW50IHggPSBlbGVtZW50
KDEwLCBuZXcgSW50ZWdlcigyMCkpO1xuIiArCisJCQkgICAiCX1cbiIgKworCQkJICAgIn1cbiIs
CisJCSAgIH0sCisJCSAgICJTdHJpY3QiKTsKK30KKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9y
Zy9idWdzL3Nob3dfYnVnLmNnaT9pZD00NDg3OTUsIFsxLjhdW2NvbXBpbGVyXSBJbmZlcmVuY2Ug
c2hvdWxkIGRpc2NyaW1pbmF0ZSBiZXR3ZWVuIHN0cmljdCBhbmQgbG9vc2UgbW9kZXMgICAKK3B1
YmxpYyB2b2lkIHRlc3Q0NDg3OTViKCkgeworCQl0aGlzLnJ1bkNvbmZvcm1UZXN0KAorCQkgICBu
ZXcgU3RyaW5nW10geworCQkJICAgIlguamF2YSIsCisJCQkgICAicHVibGljIGNsYXNzIFg8VD4g
e1xuIiArCisJCQkgICAiCXN0YXRpYyBpbnQgZWxlbWVudChpbnQgeCwgSW50ZWdlciB0KSB7XG4i
ICsKKwkJCSAgICIJCVN5c3RlbS5vdXQucHJpbnRsbihcIm5vbi1nZW5lcmljXCIpO1xuIiArCisJ
CQkgICAiCQlyZXR1cm4gdDtcbiIgKworCQkJICAgIgl9XG4iICsKKwkJCSAgICIJc3RhdGljIDxU
PiBUIGVsZW1lbnQoaW50IHQxLCBUIHQyKSB7XG4iICsKKwkJCSAgICIJCVN5c3RlbS5vdXQucHJp
bnRsbihcImdlbmVyaWNcIik7XG4iICsKKwkJCSAgICIJCXJldHVybiB0MjtcbiIgKworCQkJICAg
Igl9XG4iICsKKwkJCSAgICIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykg
e1xuIiArCisJCQkgICAiCQlpbnQgeCA9IGVsZW1lbnQoMTAsIG5ldyBJbnRlZ2VyKDIwKSk7XG4i
ICsKKwkJCSAgICIJfVxuIiArCisJCQkgICAifVxuIiwKKwkJICAgfSwKKwkJICAgIm5vbi1nZW5l
cmljIik7Cit9CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/
aWQ9NDQ4Nzk1LCBbMS44XVtjb21waWxlcl0gSW5mZXJlbmNlIHNob3VsZCBkaXNjcmltaW5hdGUg
YmV0d2VlbiBzdHJpY3QgYW5kIGxvb3NlIG1vZGVzICAgCitwdWJsaWMgdm9pZCB0ZXN0NDQ4Nzk1
YygpIHsKKwkJdGhpcy5ydW5Db25mb3JtVGVzdCgKKwkJICAgbmV3IFN0cmluZ1tdIHsKKwkJCSAg
ICJYLmphdmEiLAorCQkJICAgInB1YmxpYyBjbGFzcyBYPFQ+IHtcbiIgKworCQkJICAgIglzdGF0
aWMgaW50IGVsZW1lbnQoSW50ZWdlciB4LCBJbnRlZ2VyIHQpIHtcbiIgKworCQkJICAgIgkJU3lz
dGVtLm91dC5wcmludGxuKFwibm9uLWdlbmVyaWNcIik7XG4iICsKKwkJCSAgICIJCXJldHVybiB0
O1xuIiArCisJCQkgICAiCX1cbiIgKworCQkJICAgIglzdGF0aWMgPFQ+IFQgZWxlbWVudChpbnQg
dDEsIFQgdDIpIHtcbiIgKworCQkJICAgIgkJU3lzdGVtLm91dC5wcmludGxuKFwiZ2VuZXJpY1wi
KTtcbiIgKworCQkJICAgIgkJcmV0dXJuIHQyO1xuIiArCisJCQkgICAiCX1cbiIgKworCQkJICAg
IglwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsKKwkJCSAgICIJ
CWludCB4ID0gZWxlbWVudCgxMCwgbmV3IEludGVnZXIoMjApKTtcbiIgKworCQkJICAgIgl9XG4i
ICsKKwkJCSAgICJ9XG4iLAorCQkgICB9LAorCQkgICAiZ2VuZXJpYyIpOworfQogfQogCmRpZmYg
LS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlw
c2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25U
ZXN0XzFfOC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdy
ZXNzaW9uVGVzdF8xXzguamF2YQppbmRleCBmNTU0MmZmLi44NmE5ZjkwIDEwMDY0NAotLS0gYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2Nv
cmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25UZXN0XzFfOC5q
YXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lv
blRlc3RfMV84LmphdmEKQEAgLTQ3NjcsNCArNDc2NywyOSBAQAogCQl9LCAKIAkJIiIpOwogfQor
Ly8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQ0Nzc2Nywg
WzEuOF1bY29tcGlsZXJdIFNwdXJpb3VzIG1ldGhvZCBub3QgYXBwbGljYWJsZSBlcnJvciBkdWUg
dG8gaW50ZXJhY3Rpb24gYmV0d2VlbiBvdmVybG9hZCByZXNvbHV0aW9uIGFuZCB0eXBlIGluZmVy
ZW5jZQorcHVibGljIHZvaWQgdGVzdDQ0Nzc2NygpIHsKKwl0aGlzLnJ1bkNvbmZvcm1UZXN0KAor
CQluZXcgU3RyaW5nW10geworCQkJIlguamF2YSIsCisJCQkiaW50ZXJmYWNlIEkge1xuIiArCisJ
CQkiCXZvaWQgYmFyKFN0cmluZyB0KTtcbiIgKworCQkJIn1cbiIgKworCQkJInB1YmxpYyBjbGFz
cyBYPFQ+IHtcbiIgKworCQkJIglYKFN0cmluZyB4KSB7fVxuIiArCisJCQkiCVgoVCB4KSB7IFxu
IiArCisJCQkiCQlTeXN0ZW0ub3V0LnByaW50bG4oXCJIZXJlXCIpO1xuIiArCisJCQkiCX1cbiIg
KworCQkJIglYKFQgeCwgU3RyaW5nIC4uLnN0cmluZ3MpIHt9XG4iICsKKwkJCSIJcHVibGljIHZv
aWQgb25lKFg8ST4gYyl7fVxuIiArCisJCQkiCXB1YmxpYyB2b2lkIHR3bygpIHtcbiIgKworCQkJ
IgkJb25lKG5ldyBYPD4oKFN0cmluZyBzKSAtPiB7IH0pKTtcbiIgKworCQkJIgl9XG4iICsKKwkJ
CSIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuIiArCisJCQkiCQlu
ZXcgWChcIlwiKS50d28oKTtcbiIgKworCQkJIgl9XG4iICsKKwkJCSJ9XG4iLAorCQl9LCAKKwkJ
IkhlcmUiKTsKK30KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3RyYWludFR5cGVG
b3JtdWxhLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRUeXBlRm9ybXVsYS5qYXZhCmlu
ZGV4IGFjMmNiYTAuLjVmYzgwZWIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3RyYWlu
dFR5cGVGb3JtdWxhLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50VHlwZUZvcm11
bGEuamF2YQpAQCAtNjQsMTAgKzY0LDE0IEBACiAJCQkJcmV0dXJuIHRoaXMubGVmdC5pc0NvbXBh
dGlibGVXaXRoKHRoaXMucmlnaHQsIGluZmVyZW5jZUNvbnRleHQuc2NvcGUpIHx8IHRoaXMubGVm
dC5pc0JveGluZ0NvbXBhdGlibGVXaXRoKHRoaXMucmlnaHQsIGluZmVyZW5jZUNvbnRleHQuc2Nv
cGUpID8gVFJVRSA6IEZBTFNFOwogCQkJfQogCQkJaWYgKHRoaXMubGVmdC5pc1ByaW1pdGl2ZVR5
cGUoKSkgeworCQkJCWlmIChpbmZlcmVuY2VDb250ZXh0LmluZmVyZW5jZUtpbmQgPT0gSW5mZXJl
bmNlQ29udGV4dDE4LkNIRUNLX1NUUklDVCkKKwkJCQkJaW5mZXJlbmNlQ29udGV4dC5pbmZlcmVu
Y2VLaW5kID0gSW5mZXJlbmNlQ29udGV4dDE4LkNIRUNLX0xPT1NFOwogCQkJCVR5cGVCaW5kaW5n
IHNQcmltZSA9IGluZmVyZW5jZUNvbnRleHQuZW52aXJvbm1lbnQuY29tcHV0ZUJveGluZ1R5cGUo
dGhpcy5sZWZ0KTsKIAkJCQlyZXR1cm4gQ29uc3RyYWludFR5cGVGb3JtdWxhLmNyZWF0ZShzUHJp
bWUsIHRoaXMucmlnaHQsIENPTVBBVElCTEUsIHRoaXMuaXNTb2Z0KTsKIAkJCX0KIAkJCWlmICh0
aGlzLnJpZ2h0LmlzUHJpbWl0aXZlVHlwZSgpKSB7CisJCQkJaWYgKGluZmVyZW5jZUNvbnRleHQu
aW5mZXJlbmNlS2luZCA9PSBJbmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tfU1RSSUNUKQorCQkJCQlp
bmZlcmVuY2VDb250ZXh0LmluZmVyZW5jZUtpbmQgPSBJbmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tf
TE9PU0U7CiAJCQkJVHlwZUJpbmRpbmcgdFByaW1lID0gaW5mZXJlbmNlQ29udGV4dC5lbnZpcm9u
bWVudC5jb21wdXRlQm94aW5nVHlwZSh0aGlzLnJpZ2h0KTsKIAkJCQlyZXR1cm4gQ29uc3RyYWlu
dFR5cGVGb3JtdWxhLmNyZWF0ZSh0aGlzLmxlZnQsIHRQcmltZSwgU0FNRSwgdGhpcy5pc1NvZnQp
OwogCQkJfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9JbmZlcmVuY2VDb250ZXh0MTguamF2
YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9sb29rdXAvSW5mZXJlbmNlQ29udGV4dDE4LmphdmEKaW5kZXggOWFmZjFjMi4u
MjAyNDZkOCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9JbmZlcmVuY2VDb250ZXh0MTguamF2
YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVyZW5jZUNvbnRleHQxOC5qYXZhCkBAIC0xNTcsNiAr
MTU3LDcgQEAKIAlSZWZlcmVuY2VCaW5kaW5nIG9iamVjdDsgLy8gamF2YS5sYW5nLk9iamVjdAog
CXB1YmxpYyBCb3VuZFNldCBiMjsKIAkKKwlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBDSEVDS19V
TktOT1dOID0gMDsKIAlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBDSEVDS19TVFJJQ1QgPSAxOwog
CXB1YmxpYyBzdGF0aWMgZmluYWwgaW50IENIRUNLX0xPT1NFID0gMjsKIAlwdWJsaWMgc3RhdGlj
IGZpbmFsIGludCBDSEVDS19WQVJBUkcgPSAzOwpAQCAtMjMwLDcgKzIzMSw2IEBACiAKIAkvKiog
SkxTIDE4LjUuMTogY29tcHV0ZSBib3VuZHMgZnJvbSBmb3JtYWwgYW5kIGFjdHVhbCBwYXJhbWV0
ZXJzLiAqLwogCXB1YmxpYyB2b2lkIGNyZWF0ZUluaXRpYWxDb25zdHJhaW50c0ZvclBhcmFtZXRl
cnMoVHlwZUJpbmRpbmdbXSBwYXJhbWV0ZXJzLCBib29sZWFuIGNoZWNrVmFyYXJnLCBUeXBlQmlu
ZGluZyB2YXJBcmdzVHlwZSwgTWV0aG9kQmluZGluZyBtZXRob2QpIHsKLQkJLy8gVE9ETyBkaXNj
cmltaW5hdGUgc3RyaWN0IHZzLiBsb29zZSBpbnZvY2F0aW9ucwogCQlpZiAodGhpcy5pbnZvY2F0
aW9uQXJndW1lbnRzID09IG51bGwpCiAJCQlyZXR1cm47CiAJCWludCBsZW4gPSBjaGVja1ZhcmFy
ZyA/IHBhcmFtZXRlcnMubGVuZ3RoIC0gMSA6IE1hdGgubWluKHBhcmFtZXRlcnMubGVuZ3RoLCB0
aGlzLmludm9jYXRpb25Bcmd1bWVudHMubGVuZ3RoKTsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29r
dXAvUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nLmphdmEgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3Vw
L1BhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5qYXZhCmluZGV4IGRiNmM5MGMuLmEz
M2M3ZmQgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRo
b2RCaW5kaW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9QYXJhbWV0ZXJpemVkR2VuZXJpY01l
dGhvZEJpbmRpbmcuamF2YQpAQCAtMTYxLDExICsxNjEsMjUgQEAKIAkJCiAJCVBhcmFtZXRlcml6
ZWRHZW5lcmljTWV0aG9kQmluZGluZyBtZXRob2RTdWJzdGl0dXRlID0gbnVsbDsKIAkJVHlwZVZh
cmlhYmxlQmluZGluZ1tdIHR5cGVWYXJpYWJsZXMgPSBvcmlnaW5hbE1ldGhvZC50eXBlVmFyaWFi
bGVzOwotCQlJbmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4MTggPSBudWxsOworCQlJbmZlcmVuY2VD
b250ZXh0MTggaW5mQ3R4MTggPSBpbnZvY2F0aW9uU2l0ZS5mcmVzaEluZmVyZW5jZUNvbnRleHQo
c2NvcGUpOwogCQlUeXBlQmluZGluZ1tdIHBhcmFtZXRlcnMgPSBvcmlnaW5hbE1ldGhvZC5wYXJh
bWV0ZXJzOwotCQlpbmZDdHgxOCA9IGludm9jYXRpb25TaXRlLmZyZXNoSW5mZXJlbmNlQ29udGV4
dChzY29wZSk7CiAJCUNvbXBpbGVyT3B0aW9ucyBjb21waWxlck9wdGlvbnMgPSBzY29wZS5jb21w
aWxlck9wdGlvbnMoKTsKIAkJYm9vbGVhbiBpbnZvY2F0aW9uVHlwZUluZmVycmVkID0gZmFsc2U7
CisJCWJvb2xlYW4gcmVxdWlyZUJveGluZyA9IGZhbHNlOworCQkKKwkJLy8gU2VlIGlmIHdlIHNo
b3VsZCBzdGFydCBpbiBsb29zZSBpbmZlcmVuY2UgbW9kZS4KKwkJVHlwZUJpbmRpbmcgW10gYXJn
dW1lbnRzQ29weSA9IG5ldyBUeXBlQmluZGluZ1thcmd1bWVudHMubGVuZ3RoXTsKKwkJZm9yIChp
bnQgaSA9IDAsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsIHBhcmFtZXRlcnNMZW5ndGggPSBw
YXJhbWV0ZXJzLmxlbmd0aCA7IGkgPCBsZW5ndGg7IGkrKykgeworCQkJVHlwZUJpbmRpbmcgcGFy
YW1ldGVyID0gaSA8IHBhcmFtZXRlcnNMZW5ndGggPyBwYXJhbWV0ZXJzW2ldIDogcGFyYW1ldGVy
c1twYXJhbWV0ZXJzTGVuZ3RoIC0gMV07CisJCQlmaW5hbCBUeXBlQmluZGluZyBhcmd1bWVudCA9
IGFyZ3VtZW50c1tpXTsKKwkJCWlmIChhcmd1bWVudC5pc1ByaW1pdGl2ZVR5cGUoKSAhPSBwYXJh
bWV0ZXIuaXNQcmltaXRpdmVUeXBlKCkpIHsgLy8gU2NvcGUuY0NNIGluY29ycmVjdGx5IGJ1dCBo
YXJtbGVzc2x5IHVzZXMgaXNCYXNlVHlwZSB3aGljaCBhbnN3ZXJzIHRydWUgZm9yIG51bGwuCisJ
CQkJYXJndW1lbnRzQ29weVtpXSA9IHNjb3BlLmVudmlyb25tZW50KCkuY29tcHV0ZUJveGluZ1R5
cGUoYXJndW1lbnQpOworCQkJCXJlcXVpcmVCb3hpbmcgPSB0cnVlOyAvLyBjYW4ndCBiZSBzdHJp
Y3QgbW9kZSwgbmVlZHMgYXQgbGVhc3QgbG9vc2UuCisJCQl9IGVsc2UgeworCQkJCWFyZ3VtZW50
c0NvcHlbaV0gPSBhcmd1bWVudDsKKwkJCX0KKwkJfQorCQlhcmd1bWVudHMgPSBhcmd1bWVudHND
b3B5OyAvLyBlaXRoZXIgd2F5LCB0aGlzIGFsbG93cyB0aGUgZW5naW5lIHRvIHVwZGF0ZSBhcmd1
bWVudHMgd2l0aG91dCBoYXJtaW5nIHRoZSBjYWxsZXJzLiAKIAkJCiAJCXRyeSB7CiAJCQlCb3Vu
ZFNldCBwcm92aXNpb25hbFJlc3VsdCA9IG51bGw7CkBAIC0xNzQsNyArMTg4LDcgQEAKIAkJCWZp
bmFsIGJvb2xlYW4gaXNQb2x5RXhwcmVzc2lvbiA9IGludm9jYXRpb25TaXRlIGluc3RhbmNlb2Yg
RXhwcmVzc2lvbiAmJiAoKEV4cHJlc3Npb24paW52b2NhdGlvblNpdGUpLmlzUG9seUV4cHJlc3Np
b24ob3JpZ2luYWxNZXRob2QpOwogCQkJYm9vbGVhbiBpc0RpYW1vbmQgPSBpc1BvbHlFeHByZXNz
aW9uICYmIG9yaWdpbmFsTWV0aG9kLmlzQ29uc3RydWN0b3IoKTsKIAkJCWlmIChhcmd1bWVudHMu
bGVuZ3RoID09IHBhcmFtZXRlcnMubGVuZ3RoKSB7Ci0JCQkJaW5mQ3R4MTguaW5mZXJlbmNlS2lu
ZCA9IEluZmVyZW5jZUNvbnRleHQxOC5DSEVDS19MT09TRTsgLy8gVE9ETzogdmFsaWRhdGUgaWYg
MiBwaGFzZSBjaGVja2luZyAoc3RyaWN0L2xvb3NlICsgdmFyYXJnKSBpcyBzdWZmaWNpZW50Lgor
CQkJCWluZkN0eDE4LmluZmVyZW5jZUtpbmQgPSByZXF1aXJlQm94aW5nID8gSW5mZXJlbmNlQ29u
dGV4dDE4LkNIRUNLX0xPT1NFIDogSW5mZXJlbmNlQ29udGV4dDE4LkNIRUNLX1NUUklDVDsgLy8g
ZW5naW5lIG1heSBzdGlsbCBzbGlwIGludG8gbG9vc2UgbW9kZSBhbmQgYWRqdXN0IGxldmVsLgog
CQkJCWluZkN0eDE4LmluZmVySW52b2NhdGlvbkFwcGxpY2FiaWxpdHkob3JpZ2luYWxNZXRob2Qs
IGFyZ3VtZW50cywgaXNEaWFtb25kKTsKIAkJCQlyZXN1bHQgPSBpbmZDdHgxOC5zb2x2ZSh0cnVl
KTsKIAkJCX0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YSBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9s
b29rdXAvU2NvcGUuamF2YQppbmRleCAzZjkxYzQ4Li45NzFhZDg2IDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvbG9va3VwL1Njb3BlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhCkBAIC03
MTMsMjAgKzcxMywyMCBAQAogCQkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93
X2J1Zy5jZ2k/aWQ9MzMwNDM1LCBpbmZlcmVuY2Ugc2hvdWxkIGtpY2sgaW4gb25seSBhdCBzb3Vy
Y2UgMS41KwogCQlpZiAodHlwZVZhcmlhYmxlcyAhPSBCaW5kaW5nLk5PX1RZUEVfVkFSSUFCTEVT
ICYmIGNvbXBpbGVyT3B0aW9ucy5zb3VyY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRL
MV81KSB7IC8vIGdlbmVyaWMgbWV0aG9kCiAJCQlUeXBlQmluZGluZ1tdIG5ld0FyZ3MgPSBudWxs
OwotCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBhcmdMZW5ndGg7IGkrKykgewotCQkJCVR5cGVCaW5k
aW5nIHBhcmFtID0gaSA8IHBhcmFtTGVuZ3RoID8gcGFyYW1ldGVyc1tpXSA6IHBhcmFtZXRlcnNb
cGFyYW1MZW5ndGggLSAxXTsKLQkJCQlpZiAoYXJndW1lbnRzW2ldLmlzQmFzZVR5cGUoKSAhPSBw
YXJhbS5pc0Jhc2VUeXBlKCkpIHsKLQkJCQkJaWYgKG5ld0FyZ3MgPT0gbnVsbCkgewotCQkJCQkJ
bmV3QXJncyA9IG5ldyBUeXBlQmluZGluZ1thcmdMZW5ndGhdOwotCQkJCQkJU3lzdGVtLmFycmF5
Y29weShhcmd1bWVudHMsIDAsIG5ld0FyZ3MsIDAsIGFyZ0xlbmd0aCk7CisJCQlpZiAoY29tcGls
ZXJPcHRpb25zLnNvdXJjZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCB8fCBnZW5l
cmljVHlwZUFyZ3VtZW50cyAhPSBudWxsKSB7IC8vIGZvciAxLjgrIGluZmVycmVkIGNhbGxzLCB3
ZSBkbyB0aGlzIGluc2lkZSBQR01CLmNDTTE4LgorCQkJCWZvciAoaW50IGkgPSAwOyBpIDwgYXJn
TGVuZ3RoOyBpKyspIHsKKwkJCQkJVHlwZUJpbmRpbmcgcGFyYW0gPSBpIDwgcGFyYW1MZW5ndGgg
PyBwYXJhbWV0ZXJzW2ldIDogcGFyYW1ldGVyc1twYXJhbUxlbmd0aCAtIDFdOworCQkJCQlpZiAo
YXJndW1lbnRzW2ldLmlzQmFzZVR5cGUoKSAhPSBwYXJhbS5pc0Jhc2VUeXBlKCkpIHsKKwkJCQkJ
CWlmIChuZXdBcmdzID09IG51bGwpIHsKKwkJCQkJCQluZXdBcmdzID0gbmV3IFR5cGVCaW5kaW5n
W2FyZ0xlbmd0aF07CisJCQkJCQkJU3lzdGVtLmFycmF5Y29weShhcmd1bWVudHMsIDAsIG5ld0Fy
Z3MsIDAsIGFyZ0xlbmd0aCk7CisJCQkJCQl9CisJCQkJCQluZXdBcmdzW2ldID0gZW52aXJvbm1l
bnQoKS5jb21wdXRlQm94aW5nVHlwZShhcmd1bWVudHNbaV0pOwogCQkJCQl9Ci0JCQkJCW5ld0Fy
Z3NbaV0gPSBlbnZpcm9ubWVudCgpLmNvbXB1dGVCb3hpbmdUeXBlKGFyZ3VtZW50c1tpXSk7CiAJ
CQkJfQogCQkJfQogCQkJaWYgKG5ld0FyZ3MgIT0gbnVsbCkKIAkJCQlhcmd1bWVudHMgPSBuZXdB
cmdzOwotCQkJZWxzZSAgLy8gZW5zdXJlIHRoYXQgY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoKSBi
ZWxvdyBjYW4gdXBkYXRlIGFyZ3VtZW50cyB3aXRob3V0IGhhcm1pbmcgb3VyIGNhbGxlcjogKFRP
RE86IGFsd2F5cyBjb3B5IGJlZm9yZSB0aGUgbG9vcD8gb25seSBpbiAxLjg/KQotCQkJCVN5c3Rl
bS5hcnJheWNvcHkoYXJndW1lbnRzLCAwLCBhcmd1bWVudHM9bmV3IFR5cGVCaW5kaW5nW2FyZ0xl
bmd0aF0sIDAsIGFyZ0xlbmd0aCk7CiAJCQltZXRob2QgPSBQYXJhbWV0ZXJpemVkR2VuZXJpY01l
dGhvZEJpbmRpbmcuY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kLCBhcmd1bWVudHMsIHRo
aXMsIGludm9jYXRpb25TaXRlKTsKIAkJCWlmIChtZXRob2QgPT0gbnVsbCkgcmV0dXJuIG51bGw7
IC8vIGluY29tcGF0aWJsZQogCQkJaWYgKCFtZXRob2QuaXNWYWxpZEJpbmRpbmcoKSkgcmV0dXJu
IG1ldGhvZDsgLy8gYm91bmQgY2hlY2sgaXNzdWUgaXMgdGFraW5nIHByZWNlZGVuY2UKQEAgLTQy
MzIsNyArNDIzMiw3IEBACiAJCWludFtdIGNvbXBhdGliaWxpdHlMZXZlbHMgPSBuZXcgaW50W3Zp
c2libGVTaXplXTsKIAkJaW50IGNvbXBhdGlibGVDb3VudCA9IDA7CiAJCWZvciAoaW50IGkgPSAw
OyBpIDwgdmlzaWJsZVNpemU7IGkrKykKLQkJCWlmICgoY29tcGF0aWJpbGl0eUxldmVsc1tpXSA9
IHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbCh2aXNpYmxlW2ldLCBhcmd1bWVudFR5cGVzKSkg
IT0gTk9UX0NPTVBBVElCTEUpIHsKKwkJCWlmICgoY29tcGF0aWJpbGl0eUxldmVsc1tpXSA9IHBh
cmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbCh2aXNpYmxlW2ldLCBhcmd1bWVudFR5cGVzLCBpbnZv
Y2F0aW9uU2l0ZSkpICE9IE5PVF9DT01QQVRJQkxFKSB7CiAJCQkJaWYgKGkgIT0gY29tcGF0aWJs
ZUNvdW50KSB7CiAJCQkJCXZpc2libGVbY29tcGF0aWJsZUNvdW50XSA9IHZpc2libGVbaV07CiAJ
CQkJCWNvbXBhdGliaWxpdHlMZXZlbHNbY29tcGF0aWJsZUNvdW50XSA9IGNvbXBhdGliaWxpdHlM
ZXZlbHNbaV07CkBAIC00MjY1LDcgKzQyNjUsNiBAQAogCQkJCWludCBsZXZlbGogPSBjb21wYXRp
YmlsaXR5TGV2ZWxzW2pdOwogCQkJCW5leHRLOiBmb3IgKGludCBrID0gMDsgayA8IHZpc2libGVT
aXplOyBrKyspIHsKIAkJCQkJaWYgKGogPT0gaykgY29udGludWU7Ci0JCQkJCS8vIFRPRE8gZG8g
d2Ugd2FudCB0byBjaGVjayBleGlzdGluZyBpbmZlcmVuY2UgY29udGV4dHMgd2hldGhlciB0aGV5
IGNhbiB0ZWxsIHVzIGJldHRlciBhYm91dCB0aGUgdXNlZCBpbmZlcmVuY2VLaW5kPwogCQkJCQlp
bnQgbGV2ZWxrID0gY29tcGF0aWJpbGl0eUxldmVsc1trXTsKIAkJCQkJaWYgKGxldmVsaiA+IC0x
ICYmIGxldmVsayA+IC0xICYmIGxldmVsaiAhPSBsZXZlbGspIHsKIAkJCQkJCWlmIChsZXZlbGog
PCBsZXZlbGspCkBAIC00NTc2LDYgKzQ1NzUsNTEgQEAKIAkJfSB3aGlsZSAoc2NvcGUgIT0gbnVs
bCk7CiAJCXJldHVybiBsYXN0TWV0aG9kU2NvcGU7IC8vIG1heSBhbnN3ZXIgbnVsbCBpZiBubyBt
ZXRob2QgYXJvdW5kCiAJfQorCQorCS8vIFZlcnNpb24gdGhhdCBqdXN0IGFuc3dlcnMgYmFzZWQg
b24gaW5mZXJlbmNlIGtpbmQgKGF0IDEuOCspIHdoZW4gYXZhaWxhYmxlLgorCXB1YmxpYyBpbnQg
cGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBUeXBlQmlu
ZGluZ1tdIGFyZ3VtZW50cywgSW52b2NhdGlvblNpdGUgc2l0ZSkgeworCQlpZiAoY29tcGlsZXJP
cHRpb25zKCkuc291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCAmJiBtZXRo
b2QgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIHsKKwkJCWlu
dCBpbmZlcmVuY2VLaW5kID0gSW5mZXJlbmNlQ29udGV4dDE4LkNIRUNLX1VOS05PV047CisJCQlJ
bmZlcmVuY2VDb250ZXh0MTggY29udGV4dCA9IG51bGw7CisJCQlpZiAoc2l0ZSBpbnN0YW5jZW9m
IEludm9jYXRpb24pIHsKKwkJCQlJbnZvY2F0aW9uIGludm9jYXRpb24gPSAoSW52b2NhdGlvbikg
c2l0ZTsKKwkJCQljb250ZXh0ID0gaW52b2NhdGlvbi5nZXRJbmZlcmVuY2VDb250ZXh0KChQYXJh
bWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIG1ldGhvZCk7CisJCQkJaWYgKGNvbnRleHQg
IT0gbnVsbCkKKwkJCQkJaW5mZXJlbmNlS2luZCA9IGNvbnRleHQuaW5mZXJlbmNlS2luZDsKKwkJ
CX0gZWxzZSBpZiAoc2l0ZSBpbnN0YW5jZW9mIFJlZmVyZW5jZUV4cHJlc3Npb24pIHsKKwkJCQlp
bmZlcmVuY2VLaW5kID0gKChSZWZlcmVuY2VFeHByZXNzaW9uKSBzaXRlKS5pbmZlcmVuY2VLaW5k
OworCQkJfQorCQkJLyogMS44KyBQb3N0IGluZmVyZW5jZSBjb21wYXRpYmlsaXR5IGNoZWNrIHBv
bGljeTogRm9yIG5vbi1mdW5jdGlvbmFsLXR5cGUgYXJndW1lbnRzLCB0cnVzdCBpbmZlcmVuY2Uu
IEZvciBmdW5jdGlvbmFsIHR5cGUgYXJndW1lbnRzIGFwcGx5IGNvbXBhdGliaWxpdHkgY2hlY2tz
IGFzIGluZmVyZW5jZQorCQkJICAgZW5naW5lIG1heSBub3QgaGF2ZSBjaGVja2VkIGFyZ3VtZW50
cyB0aGF0IGFyZSBub3QgcGVydGluZW50IHRvIGFwcGxpY2FiaWxpdHkuIE9uZSBjb21wbGljYXRp
b24gdG8gZGVhbCB3aXRoIGlzIHdoZW4gdGhlIGdlbmVyaWMgbWV0aG9kJ3MgcGFyYW1ldGVyIGlz
IGl0cyBvd24gdHlwZSB2YXJpYWJsZSAKKwkJCSAgIGFuZCBvbmx5IGFwcGxpY2FiaWxpdHkgd2Fz
IGluZmVycmVkIGFuZCBhcHBsaWNhYmlsaXR5IGluZmVyZW5jZSBpbnN0YW50aWF0ZWQgaXQgd2l0
aCBqbE8gZHVlIHRvIGxhY2sgb2YgdXBwZXIgYm91bmRzIGluIHRoZSBib3VuZCBzZXQuCisJCQkq
LworCQkJaWYgKHNpdGUgaW5zdGFuY2VvZiBJbnZvY2F0aW9uICYmIGNvbnRleHQgIT0gbnVsbCkg
eyAvLyB0aGlzIGJsb2NrIGNhbiBiZSByZWFkaWx5IHNlZW4gdG8gYmUgbm90IHJlbGV2YW50IGZv
ciByZWZlcmVuY2UgZXhwcmVzc2lvbnMKKwkJCQlNZXRob2RCaW5kaW5nIHNoYWxsb3dPcmlnaW5h
bCA9IG1ldGhvZC5zaGFsbG93T3JpZ2luYWwoKTsKKwkJCQlmb3IgKGludCBpID0gMCwgbGVuZ3Ro
ID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7CisJCQkJCVR5cGVCaW5kaW5n
IGFyZ3VtZW50ID0gYXJndW1lbnRzW2ldOworCQkJCQlpZiAoIWFyZ3VtZW50LmlzRnVuY3Rpb25h
bFR5cGUoKSkKKwkJCQkJCWNvbnRpbnVlOworCQkJCQlUeXBlQmluZGluZyBwYXJhbWV0ZXIgPSBJ
bmZlcmVuY2VDb250ZXh0MTguZ2V0UGFyYW1ldGVyKG1ldGhvZC5wYXJhbWV0ZXJzLCBpLCBjb250
ZXh0LmlzVmFyQXJncygpKTsKKwkJCQkJaWYgKGFyZ3VtZW50LmlzQ29tcGF0aWJsZVdpdGgocGFy
YW1ldGVyLCB0aGlzKSkKKwkJCQkJCWNvbnRpbnVlOworCQkJCQlUeXBlQmluZGluZyBzaGFsbG93
UGFyYW1ldGVyID0gSW5mZXJlbmNlQ29udGV4dDE4LmdldFBhcmFtZXRlcihzaGFsbG93T3JpZ2lu
YWwucGFyYW1ldGVycywgaSwgY29udGV4dC5pc1ZhckFyZ3MoKSk7CisJCQkJCWlmIChzaGFsbG93
UGFyYW1ldGVyLmlzUGVydGluZW50VG9BcHBsaWNhYmlsaXR5KGFyZ3VtZW50LCBzaGFsbG93T3Jp
Z2luYWwpKQorCQkJCQkJcmV0dXJuIE5PVF9DT01QQVRJQkxFOworCQkJCX0KKwkJCX0KKwkJCXN3
aXRjaCAoaW5mZXJlbmNlS2luZCkgeworCQkJCWNhc2UgSW5mZXJlbmNlQ29udGV4dDE4LkNIRUNL
X1NUUklDVDoKKwkJCQkJcmV0dXJuIENPTVBBVElCTEU7CisJCQkJY2FzZSBJbmZlcmVuY2VDb250
ZXh0MTguQ0hFQ0tfTE9PU0U6CisJCQkJCXJldHVybiBBVVRPQk9YX0NPTVBBVElCTEU7CisJCQkJ
Y2FzZSBJbmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tfVkFSQVJHOgorCQkJCQlyZXR1cm4gVkFSQVJH
U19DT01QQVRJQkxFOworCQkJCWRlZmF1bHQ6CisJCQkJCWJyZWFrOworCQkJCX0KKwkJfQorCQly
ZXR1cm4gcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKG1ldGhvZCwgYXJndW1lbnRzLCBmYWxz
ZSk7CisJfQogCiAJcHVibGljIGludCBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwoTWV0aG9k
QmluZGluZyBtZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRzKSB7CiAJCXJldHVybiBwYXJh
bWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwobWV0aG9kLCBhcmd1bWVudHMsIGZhbHNlKTsKZGlmZiAt
LWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9sb29rdXAvVHlwZUJpbmRpbmcuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvVHlw
ZUJpbmRpbmcuamF2YQppbmRleCAwYmIwZGI2Li40NmI0MjBjIDEwMDY0NAotLS0gYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
bG9va3VwL1R5cGVCaW5kaW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9UeXBlQmluZGluZy5q
YXZhCkBAIC00NDEsNiArNDQxLDE2IEBACiAJCQkJCX0KIAkJCQl9CiAJCQl9CisJCQlicmVhazsK
KwkJY2FzZSBCaW5kaW5nLklOVEVSU0VDVElPTl9DQVNUX1RZUEU6CisJCQlJbnRlcnNlY3Rpb25D
YXN0VHlwZUJpbmRpbmcgaWN0YiA9IChJbnRlcnNlY3Rpb25DYXN0VHlwZUJpbmRpbmcpIHRoaXM7
CisJCQlSZWZlcmVuY2VCaW5kaW5nW10gaW50ZXJzZWN0aW5nVHlwZXMgPSBpY3RiLmdldEludGVy
c2VjdGluZ1R5cGVzKCk7CisJCQlmb3IgKGludCBpID0gMCwgbGVuZ3RoID0gaW50ZXJzZWN0aW5n
VHlwZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKKwkJCQlUeXBlQmluZGluZyBzdXBlclR5
cGUgPSBpbnRlcnNlY3RpbmdUeXBlc1tpXS5maW5kU3VwZXJUeXBlT3JpZ2luYXRpbmdGcm9tKG90
aGVyVHlwZSk7CisJCQkJaWYgKHN1cGVyVHlwZSAhPSBudWxsKQorCQkJCQlyZXR1cm4gc3VwZXJU
eXBlOworCQkJfQorCQkJYnJlYWs7CiAJfQogCXJldHVybiBudWxsOwogfQ==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>248192</attachid>
            <date>2014-10-26 22:45:00 -0400</date>
            <delta_ts>2014-10-27 09:58:23 -0400</delta_ts>
            <desc>Same patch synched with master</desc>
            <filename>threefixes.patch</filename>
            <type>text/plain</type>
            <size>17637</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9v
cmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVn
cmVzc2lvblRlc3QuamF2YQppbmRleCBkMTYyYTVmLi5jZGIxMjJlIDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25UZXN0LmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pk
dC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVzdC5q
YXZhCkBAIC01NDgxLDkgKzU0ODEsOCBAQAogCQkgICAiIik7CiB9CiAvLyBodHRwczovL2J1Z3Mu
ZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDQzNTk2LCBbMS44XVtjb21waWxlcl0g
RmFpbHVyZSBmb3Igb3ZlcmxvYWQgcmVzb2x1dGlvbiBpbiBjYXNlIG9mIEdlbmVyaWNzIGFuZCBW
YXJhZ3MgCi1wdWJsaWMgdm9pZCBfdGVzdDQ0MzU5NigpIHsKLQlpZiAodGhpcy5jb21wbGlhbmNl
TGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNykKLQkJdGhpcy5ydW5OZWdhdGl2ZVRl
c3QoCitwdWJsaWMgdm9pZCB0ZXN0NDQzNTk2KCkgeworCXRoaXMucnVuTmVnYXRpdmVUZXN0KAog
CQkgICBuZXcgU3RyaW5nW10gewogCQkJICAgIlguamF2YSIsCiAJCQkgICAicHVibGljIGZpbmFs
IGNsYXNzIFgge1xuIiArCkBAIC01NDk3LDYgKzU0OTYsOCBAQAogCQkJICAgIiAgICB9XG4iICsK
IAkJCSAgICJ9XG4iLAogCQkgICB9LAorCQkgICB0aGlzLmNvbXBsaWFuY2VMZXZlbCA8IENsYXNz
RmlsZUNvbnN0YW50cy5KREsxXzcgPworCQkgICAiIiA6IAkgICAKIAkJICAgIi0tLS0tLS0tLS1c
biIgKyAKIAkJCSIxLiBXQVJOSU5HIGluIFguamF2YSAoYXQgbGluZSA0KVxuIiArIAogCQkJIglw
dWJsaWMgc3RhdGljIDxUPiBQcmVkaWNhdGU8VD4gYW5kKFByZWRpY2F0ZTw/IHN1cGVyIFQ+Li4u
IGFyZykgeyByZXR1cm4gbnVsbDsgfVxuIiArIApAQCAtNTY1Niw1ICs1NjU3LDg5IEBACiAJCQki
VHlwZSBzYWZldHk6IFBvdGVudGlhbCBoZWFwIHBvbGx1dGlvbiB2aWEgdmFyYXJncyBwYXJhbWV0
ZXIgd29ya2Vyc1xuIiArIAogCQkJIi0tLS0tLS0tLS1cbiIpOwogfQorLy8gaHR0cHM6Ly9idWdz
LmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQ0ODc5NSwgWzEuOF1bY29tcGlsZXJd
IEluZmVyZW5jZSBzaG91bGQgZGlzY3JpbWluYXRlIGJldHdlZW4gc3RyaWN0IGFuZCBsb29zZSBt
b2RlcyAgIAorcHVibGljIHZvaWQgdGVzdDQ0ODc5NSgpIHsKKwkJdGhpcy5ydW5OZWdhdGl2ZVRl
c3QoCisJCSAgIG5ldyBTdHJpbmdbXSB7CisJCQkgICAiWC5qYXZhIiwKKwkJCSAgICJwdWJsaWMg
Y2xhc3MgWDxUPiB7XG4iICsKKwkJCSAgICIJc3RhdGljIDxUPiBUIGVsZW1lbnQoVCBbXSB0YSkg
e1xuIiArCisJCQkgICAiCQlyZXR1cm4gdGFbMF07XG4iICsKKwkJCSAgICIJfVxuIiArCisJCQkg
ICAiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKworCQkJICAg
IgkJaW50IHggPSBlbGVtZW50KG5ldyBpbnQgW10geyAxMjM0IH0pO1xuIiArICAvLyBjaGVjayB0
aGF0IGF1dG9ib3hpbmcgZG9lcyBub3Qga2ljayBpbiBmb3IgYXJyYXlzLCBpLmUgZW5naW5lIHNo
b3VsZCBub3Qgc2xpcCBpbnRvIGxvb3NlIG1vZGUuCisJCQkgICAiCX1cbiIgKworCQkJICAgIn1c
biIsCisJCSAgIH0sCisJCSAgICItLS0tLS0tLS0tXG4iICsgCisJCQkiMS4gRVJST1IgaW4gWC5q
YXZhIChhdCBsaW5lIDYpXG4iICsgCisJCQkiCWludCB4ID0gZWxlbWVudChuZXcgaW50IFtdIHsg
MTIzNCB9KTtcbiIgKyAKKwkJCSIJICAgICAgICBeXl5eXl5eXG4iICsgCisJCQkiVGhlIG1ldGhv
ZCBlbGVtZW50KFRbXSkgaW4gdGhlIHR5cGUgWDxUPiBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhl
IGFyZ3VtZW50cyAoaW50W10pXG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIik7Cit9CisvLyBodHRw
czovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDQ4Nzk1LCBbMS44XVtj
b21waWxlcl0gSW5mZXJlbmNlIHNob3VsZCBkaXNjcmltaW5hdGUgYmV0d2VlbiBzdHJpY3QgYW5k
IGxvb3NlIG1vZGVzICAgCitwdWJsaWMgdm9pZCB0ZXN0NDQ4Nzk1YSgpIHsKKwkJdGhpcy5ydW5D
b25mb3JtVGVzdCgKKwkJICAgbmV3IFN0cmluZ1tdIHsKKwkJCSAgICJYLmphdmEiLAorCQkJICAg
InB1YmxpYyBjbGFzcyBYPFQ+IHtcbiIgKworCQkJICAgIglzdGF0aWMgPFQ+IFQgZWxlbWVudChp
bnQgeCwgVCB0KSB7XG4iICsKKwkJCSAgICIJCVN5c3RlbS5vdXQucHJpbnRsbihcIlN0cmljdFwi
KTtcbiIgKworCQkJICAgIgkJcmV0dXJuIHQ7XG4iICsKKwkJCSAgICIJfVxuIiArCisJCQkgICAi
CXN0YXRpYyA8VD4gVCBlbGVtZW50KFQgdDEsIFQgdDIpIHtcbiIgKworCQkJICAgIgkJU3lzdGVt
Lm91dC5wcmludGxuKFwiTG9vc2VcIik7XG4iICsKKwkJCSAgICIJCXJldHVybiB0MjtcbiIgKwor
CQkJICAgIgl9XG4iICsKKwkJCSAgICIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10g
YXJncykge1xuIiArCisJCQkgICAiCQlpbnQgeCA9IGVsZW1lbnQoMTAsIG5ldyBJbnRlZ2VyKDIw
KSk7XG4iICsKKwkJCSAgICIJfVxuIiArCisJCQkgICAifVxuIiwKKwkJICAgfSwKKwkJICAgIlN0
cmljdCIpOworfQorLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dp
P2lkPTQ0ODc5NSwgWzEuOF1bY29tcGlsZXJdIEluZmVyZW5jZSBzaG91bGQgZGlzY3JpbWluYXRl
IGJldHdlZW4gc3RyaWN0IGFuZCBsb29zZSBtb2RlcyAgIAorcHVibGljIHZvaWQgdGVzdDQ0ODc5
NWIoKSB7CisJCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCSAgIG5ldyBTdHJpbmdbXSB7CisJCQkg
ICAiWC5qYXZhIiwKKwkJCSAgICJwdWJsaWMgY2xhc3MgWDxUPiB7XG4iICsKKwkJCSAgICIJc3Rh
dGljIGludCBlbGVtZW50KGludCB4LCBJbnRlZ2VyIHQpIHtcbiIgKworCQkJICAgIgkJU3lzdGVt
Lm91dC5wcmludGxuKFwibm9uLWdlbmVyaWNcIik7XG4iICsKKwkJCSAgICIJCXJldHVybiB0O1xu
IiArCisJCQkgICAiCX1cbiIgKworCQkJICAgIglzdGF0aWMgPFQ+IFQgZWxlbWVudChpbnQgdDEs
IFQgdDIpIHtcbiIgKworCQkJICAgIgkJU3lzdGVtLm91dC5wcmludGxuKFwiZ2VuZXJpY1wiKTtc
biIgKworCQkJICAgIgkJcmV0dXJuIHQyO1xuIiArCisJCQkgICAiCX1cbiIgKworCQkJICAgIglw
dWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsKKwkJCSAgICIJCWlu
dCB4ID0gZWxlbWVudCgxMCwgbmV3IEludGVnZXIoMjApKTtcbiIgKworCQkJICAgIgl9XG4iICsK
KwkJCSAgICJ9XG4iLAorCQkgICB9LAorCQkgICAibm9uLWdlbmVyaWMiKTsKK30KKy8vIGh0dHBz
Oi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00NDg3OTUsIFsxLjhdW2Nv
bXBpbGVyXSBJbmZlcmVuY2Ugc2hvdWxkIGRpc2NyaW1pbmF0ZSBiZXR3ZWVuIHN0cmljdCBhbmQg
bG9vc2UgbW9kZXMgICAKK3B1YmxpYyB2b2lkIHRlc3Q0NDg3OTVjKCkgeworCQl0aGlzLnJ1bkNv
bmZvcm1UZXN0KAorCQkgICBuZXcgU3RyaW5nW10geworCQkJICAgIlguamF2YSIsCisJCQkgICAi
cHVibGljIGNsYXNzIFg8VD4ge1xuIiArCisJCQkgICAiCXN0YXRpYyBpbnQgZWxlbWVudChJbnRl
Z2VyIHgsIEludGVnZXIgdCkge1xuIiArCisJCQkgICAiCQlTeXN0ZW0ub3V0LnByaW50bG4oXCJu
b24tZ2VuZXJpY1wiKTtcbiIgKworCQkJICAgIgkJcmV0dXJuIHQ7XG4iICsKKwkJCSAgICIJfVxu
IiArCisJCQkgICAiCXN0YXRpYyA8VD4gVCBlbGVtZW50KGludCB0MSwgVCB0Mikge1xuIiArCisJ
CQkgICAiCQlTeXN0ZW0ub3V0LnByaW50bG4oXCJnZW5lcmljXCIpO1xuIiArCisJCQkgICAiCQly
ZXR1cm4gdDI7XG4iICsKKwkJCSAgICIJfVxuIiArCisJCQkgICAiCXB1YmxpYyBzdGF0aWMgdm9p
ZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKworCQkJICAgIgkJaW50IHggPSBlbGVtZW50KDEw
LCBuZXcgSW50ZWdlcigyMCkpO1xuIiArCisJCQkgICAiCX1cbiIgKworCQkJICAgIn1cbiIsCisJ
CSAgIH0sCisJCSAgICJnZW5lcmljIik7Cit9CiB9CiAKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9j
b21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3RfMV84LmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25UZXN0XzFfOC5qYXZh
CmluZGV4IGY1NTQyZmYuLjg2YTlmOTAgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
LnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9y
ZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3RfMV84LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3Rz
L2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVzdF8xXzguamF2YQpAQCAt
NDc2Nyw0ICs0NzY3LDI5IEBACiAJCX0sIAogCQkiIik7CiB9CisvLyBodHRwczovL2J1Z3MuZWNs
aXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDQ3NzY3LCBbMS44XVtjb21waWxlcl0gU3B1
cmlvdXMgbWV0aG9kIG5vdCBhcHBsaWNhYmxlIGVycm9yIGR1ZSB0byBpbnRlcmFjdGlvbiBiZXR3
ZWVuIG92ZXJsb2FkIHJlc29sdXRpb24gYW5kIHR5cGUgaW5mZXJlbmNlCitwdWJsaWMgdm9pZCB0
ZXN0NDQ3NzY3KCkgeworCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJ
CQkiWC5qYXZhIiwKKwkJCSJpbnRlcmZhY2UgSSB7XG4iICsKKwkJCSIJdm9pZCBiYXIoU3RyaW5n
IHQpO1xuIiArCisJCQkifVxuIiArCisJCQkicHVibGljIGNsYXNzIFg8VD4ge1xuIiArCisJCQki
CVgoU3RyaW5nIHgpIHt9XG4iICsKKwkJCSIJWChUIHgpIHsgXG4iICsKKwkJCSIJCVN5c3RlbS5v
dXQucHJpbnRsbihcIkhlcmVcIik7XG4iICsKKwkJCSIJfVxuIiArCisJCQkiCVgoVCB4LCBTdHJp
bmcgLi4uc3RyaW5ncykge31cbiIgKworCQkJIglwdWJsaWMgdm9pZCBvbmUoWDxJPiBjKXt9XG4i
ICsKKwkJCSIJcHVibGljIHZvaWQgdHdvKCkge1xuIiArCisJCQkiCQlvbmUobmV3IFg8PigoU3Ry
aW5nIHMpIC0+IHsgfSkpO1xuIiArCisJCQkiCX1cbiIgKworCQkJIglwdWJsaWMgc3RhdGljIHZv
aWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsKKwkJCSIJCW5ldyBYKFwiXCIpLnR3bygpO1xu
IiArCisJCQkiCX1cbiIgKworCQkJIn1cbiIsCisJCX0sIAorCQkiSGVyZSIpOworfQogfQpkaWZm
IC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50VHlwZUZvcm11bGEuamF2YSBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9sb29rdXAvQ29uc3RyYWludFR5cGVGb3JtdWxhLmphdmEKaW5kZXggYWMyY2JhMC4uNWZjODBl
YiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50VHlwZUZvcm11bGEuamF2YQor
KysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRUeXBlRm9ybXVsYS5qYXZhCkBAIC02NCwxMCAr
NjQsMTQgQEAKIAkJCQlyZXR1cm4gdGhpcy5sZWZ0LmlzQ29tcGF0aWJsZVdpdGgodGhpcy5yaWdo
dCwgaW5mZXJlbmNlQ29udGV4dC5zY29wZSkgfHwgdGhpcy5sZWZ0LmlzQm94aW5nQ29tcGF0aWJs
ZVdpdGgodGhpcy5yaWdodCwgaW5mZXJlbmNlQ29udGV4dC5zY29wZSkgPyBUUlVFIDogRkFMU0U7
CiAJCQl9CiAJCQlpZiAodGhpcy5sZWZ0LmlzUHJpbWl0aXZlVHlwZSgpKSB7CisJCQkJaWYgKGlu
ZmVyZW5jZUNvbnRleHQuaW5mZXJlbmNlS2luZCA9PSBJbmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tf
U1RSSUNUKQorCQkJCQlpbmZlcmVuY2VDb250ZXh0LmluZmVyZW5jZUtpbmQgPSBJbmZlcmVuY2VD
b250ZXh0MTguQ0hFQ0tfTE9PU0U7CiAJCQkJVHlwZUJpbmRpbmcgc1ByaW1lID0gaW5mZXJlbmNl
Q29udGV4dC5lbnZpcm9ubWVudC5jb21wdXRlQm94aW5nVHlwZSh0aGlzLmxlZnQpOwogCQkJCXJl
dHVybiBDb25zdHJhaW50VHlwZUZvcm11bGEuY3JlYXRlKHNQcmltZSwgdGhpcy5yaWdodCwgQ09N
UEFUSUJMRSwgdGhpcy5pc1NvZnQpOwogCQkJfQogCQkJaWYgKHRoaXMucmlnaHQuaXNQcmltaXRp
dmVUeXBlKCkpIHsKKwkJCQlpZiAoaW5mZXJlbmNlQ29udGV4dC5pbmZlcmVuY2VLaW5kID09IElu
ZmVyZW5jZUNvbnRleHQxOC5DSEVDS19TVFJJQ1QpCisJCQkJCWluZmVyZW5jZUNvbnRleHQuaW5m
ZXJlbmNlS2luZCA9IEluZmVyZW5jZUNvbnRleHQxOC5DSEVDS19MT09TRTsKIAkJCQlUeXBlQmlu
ZGluZyB0UHJpbWUgPSBpbmZlcmVuY2VDb250ZXh0LmVudmlyb25tZW50LmNvbXB1dGVCb3hpbmdU
eXBlKHRoaXMucmlnaHQpOwogCQkJCXJldHVybiBDb25zdHJhaW50VHlwZUZvcm11bGEuY3JlYXRl
KHRoaXMubGVmdCwgdFByaW1lLCBTQU1FLCB0aGlzLmlzU29mdCk7CiAJCQl9CmRpZmYgLS1naXQg
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvbG9va3VwL0luZmVyZW5jZUNvbnRleHQxOC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9J
bmZlcmVuY2VDb250ZXh0MTguamF2YQppbmRleCA5YWZmMWMyLi4yMDI0NmQ4IDEwMDY0NAotLS0g
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvbG9va3VwL0luZmVyZW5jZUNvbnRleHQxOC5qYXZhCisrKyBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29r
dXAvSW5mZXJlbmNlQ29udGV4dDE4LmphdmEKQEAgLTE1Nyw2ICsxNTcsNyBAQAogCVJlZmVyZW5j
ZUJpbmRpbmcgb2JqZWN0OyAvLyBqYXZhLmxhbmcuT2JqZWN0CiAJcHVibGljIEJvdW5kU2V0IGIy
OwogCQorCXB1YmxpYyBzdGF0aWMgZmluYWwgaW50IENIRUNLX1VOS05PV04gPSAwOwogCXB1Ymxp
YyBzdGF0aWMgZmluYWwgaW50IENIRUNLX1NUUklDVCA9IDE7CiAJcHVibGljIHN0YXRpYyBmaW5h
bCBpbnQgQ0hFQ0tfTE9PU0UgPSAyOwogCXB1YmxpYyBzdGF0aWMgZmluYWwgaW50IENIRUNLX1ZB
UkFSRyA9IDM7CkBAIC0yMzAsNyArMjMxLDYgQEAKIAogCS8qKiBKTFMgMTguNS4xOiBjb21wdXRl
IGJvdW5kcyBmcm9tIGZvcm1hbCBhbmQgYWN0dWFsIHBhcmFtZXRlcnMuICovCiAJcHVibGljIHZv
aWQgY3JlYXRlSW5pdGlhbENvbnN0cmFpbnRzRm9yUGFyYW1ldGVycyhUeXBlQmluZGluZ1tdIHBh
cmFtZXRlcnMsIGJvb2xlYW4gY2hlY2tWYXJhcmcsIFR5cGVCaW5kaW5nIHZhckFyZ3NUeXBlLCBN
ZXRob2RCaW5kaW5nIG1ldGhvZCkgewotCQkvLyBUT0RPIGRpc2NyaW1pbmF0ZSBzdHJpY3QgdnMu
IGxvb3NlIGludm9jYXRpb25zCiAJCWlmICh0aGlzLmludm9jYXRpb25Bcmd1bWVudHMgPT0gbnVs
bCkKIAkJCXJldHVybjsKIAkJaW50IGxlbiA9IGNoZWNrVmFyYXJnID8gcGFyYW1ldGVycy5sZW5n
dGggLSAxIDogTWF0aC5taW4ocGFyYW1ldGVycy5sZW5ndGgsIHRoaXMuaW52b2NhdGlvbkFyZ3Vt
ZW50cy5sZW5ndGgpOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9QYXJhbWV0ZXJpemVkR2Vu
ZXJpY01ldGhvZEJpbmRpbmcuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUGFyYW1ldGVyaXplZEdlbmVy
aWNNZXRob2RCaW5kaW5nLmphdmEKaW5kZXggZGI2YzkwYy4uYTMzYzdmZCAxMDA2NDQKLS0tIGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2xvb2t1cC9QYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcuamF2YQorKysg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvbG9va3VwL1BhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5qYXZhCkBA
IC0xNjEsMTEgKzE2MSwyNSBAQAogCQkKIAkJUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5k
aW5nIG1ldGhvZFN1YnN0aXR1dGUgPSBudWxsOwogCQlUeXBlVmFyaWFibGVCaW5kaW5nW10gdHlw
ZVZhcmlhYmxlcyA9IG9yaWdpbmFsTWV0aG9kLnR5cGVWYXJpYWJsZXM7Ci0JCUluZmVyZW5jZUNv
bnRleHQxOCBpbmZDdHgxOCA9IG51bGw7CisJCUluZmVyZW5jZUNvbnRleHQxOCBpbmZDdHgxOCA9
IGludm9jYXRpb25TaXRlLmZyZXNoSW5mZXJlbmNlQ29udGV4dChzY29wZSk7CiAJCVR5cGVCaW5k
aW5nW10gcGFyYW1ldGVycyA9IG9yaWdpbmFsTWV0aG9kLnBhcmFtZXRlcnM7Ci0JCWluZkN0eDE4
ID0gaW52b2NhdGlvblNpdGUuZnJlc2hJbmZlcmVuY2VDb250ZXh0KHNjb3BlKTsKIAkJQ29tcGls
ZXJPcHRpb25zIGNvbXBpbGVyT3B0aW9ucyA9IHNjb3BlLmNvbXBpbGVyT3B0aW9ucygpOwogCQli
b29sZWFuIGludm9jYXRpb25UeXBlSW5mZXJyZWQgPSBmYWxzZTsKKwkJYm9vbGVhbiByZXF1aXJl
Qm94aW5nID0gZmFsc2U7CisJCQorCQkvLyBTZWUgaWYgd2Ugc2hvdWxkIHN0YXJ0IGluIGxvb3Nl
IGluZmVyZW5jZSBtb2RlLgorCQlUeXBlQmluZGluZyBbXSBhcmd1bWVudHNDb3B5ID0gbmV3IFR5
cGVCaW5kaW5nW2FyZ3VtZW50cy5sZW5ndGhdOworCQlmb3IgKGludCBpID0gMCwgbGVuZ3RoID0g
YXJndW1lbnRzLmxlbmd0aCwgcGFyYW1ldGVyc0xlbmd0aCA9IHBhcmFtZXRlcnMubGVuZ3RoIDsg
aSA8IGxlbmd0aDsgaSsrKSB7CisJCQlUeXBlQmluZGluZyBwYXJhbWV0ZXIgPSBpIDwgcGFyYW1l
dGVyc0xlbmd0aCA/IHBhcmFtZXRlcnNbaV0gOiBwYXJhbWV0ZXJzW3BhcmFtZXRlcnNMZW5ndGgg
LSAxXTsKKwkJCWZpbmFsIFR5cGVCaW5kaW5nIGFyZ3VtZW50ID0gYXJndW1lbnRzW2ldOworCQkJ
aWYgKGFyZ3VtZW50LmlzUHJpbWl0aXZlVHlwZSgpICE9IHBhcmFtZXRlci5pc1ByaW1pdGl2ZVR5
cGUoKSkgeyAvLyBTY29wZS5jQ00gaW5jb3JyZWN0bHkgYnV0IGhhcm1sZXNzbHkgdXNlcyBpc0Jh
c2VUeXBlIHdoaWNoIGFuc3dlcnMgdHJ1ZSBmb3IgbnVsbC4KKwkJCQlhcmd1bWVudHNDb3B5W2ld
ID0gc2NvcGUuZW52aXJvbm1lbnQoKS5jb21wdXRlQm94aW5nVHlwZShhcmd1bWVudCk7CisJCQkJ
cmVxdWlyZUJveGluZyA9IHRydWU7IC8vIGNhbid0IGJlIHN0cmljdCBtb2RlLCBuZWVkcyBhdCBs
ZWFzdCBsb29zZS4KKwkJCX0gZWxzZSB7CisJCQkJYXJndW1lbnRzQ29weVtpXSA9IGFyZ3VtZW50
OworCQkJfQorCQl9CisJCWFyZ3VtZW50cyA9IGFyZ3VtZW50c0NvcHk7IC8vIGVpdGhlciB3YXks
IHRoaXMgYWxsb3dzIHRoZSBlbmdpbmUgdG8gdXBkYXRlIGFyZ3VtZW50cyB3aXRob3V0IGhhcm1p
bmcgdGhlIGNhbGxlcnMuIAogCQkKIAkJdHJ5IHsKIAkJCUJvdW5kU2V0IHByb3Zpc2lvbmFsUmVz
dWx0ID0gbnVsbDsKQEAgLTE3NCw3ICsxODgsNyBAQAogCQkJZmluYWwgYm9vbGVhbiBpc1BvbHlF
eHByZXNzaW9uID0gaW52b2NhdGlvblNpdGUgaW5zdGFuY2VvZiBFeHByZXNzaW9uICYmICgoRXhw
cmVzc2lvbilpbnZvY2F0aW9uU2l0ZSkuaXNQb2x5RXhwcmVzc2lvbihvcmlnaW5hbE1ldGhvZCk7
CiAJCQlib29sZWFuIGlzRGlhbW9uZCA9IGlzUG9seUV4cHJlc3Npb24gJiYgb3JpZ2luYWxNZXRo
b2QuaXNDb25zdHJ1Y3RvcigpOwogCQkJaWYgKGFyZ3VtZW50cy5sZW5ndGggPT0gcGFyYW1ldGVy
cy5sZW5ndGgpIHsKLQkJCQlpbmZDdHgxOC5pbmZlcmVuY2VLaW5kID0gSW5mZXJlbmNlQ29udGV4
dDE4LkNIRUNLX0xPT1NFOyAvLyBUT0RPOiB2YWxpZGF0ZSBpZiAyIHBoYXNlIGNoZWNraW5nIChz
dHJpY3QvbG9vc2UgKyB2YXJhcmcpIGlzIHN1ZmZpY2llbnQuCisJCQkJaW5mQ3R4MTguaW5mZXJl
bmNlS2luZCA9IHJlcXVpcmVCb3hpbmcgPyBJbmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tfTE9PU0Ug
OiBJbmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tfU1RSSUNUOyAvLyBlbmdpbmUgbWF5IHN0aWxsIHNs
aXAgaW50byBsb29zZSBtb2RlIGFuZCBhZGp1c3QgbGV2ZWwuCiAJCQkJaW5mQ3R4MTguaW5mZXJJ
bnZvY2F0aW9uQXBwbGljYWJpbGl0eShvcmlnaW5hbE1ldGhvZCwgYXJndW1lbnRzLCBpc0RpYW1v
bmQpOwogCQkJCXJlc3VsdCA9IGluZkN0eDE4LnNvbHZlKHRydWUpOwogCQkJfQpkaWZmIC0tZ2l0
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhCmlu
ZGV4IDNmOTFjNDguLjk3MWFkODYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2
YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEKQEAgLTcxMywyMCArNzEzLDIwIEBACiAJ
CS8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zMzA0MzUs
IGluZmVyZW5jZSBzaG91bGQga2ljayBpbiBvbmx5IGF0IHNvdXJjZSAxLjUrCiAJCWlmICh0eXBl
VmFyaWFibGVzICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMgJiYgY29tcGlsZXJPcHRpb25z
LnNvdXJjZUxldmVsID49IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzUpIHsgLy8gZ2VuZXJpYyBt
ZXRob2QKIAkJCVR5cGVCaW5kaW5nW10gbmV3QXJncyA9IG51bGw7Ci0JCQlmb3IgKGludCBpID0g
MDsgaSA8IGFyZ0xlbmd0aDsgaSsrKSB7Ci0JCQkJVHlwZUJpbmRpbmcgcGFyYW0gPSBpIDwgcGFy
YW1MZW5ndGggPyBwYXJhbWV0ZXJzW2ldIDogcGFyYW1ldGVyc1twYXJhbUxlbmd0aCAtIDFdOwot
CQkJCWlmIChhcmd1bWVudHNbaV0uaXNCYXNlVHlwZSgpICE9IHBhcmFtLmlzQmFzZVR5cGUoKSkg
ewotCQkJCQlpZiAobmV3QXJncyA9PSBudWxsKSB7Ci0JCQkJCQluZXdBcmdzID0gbmV3IFR5cGVC
aW5kaW5nW2FyZ0xlbmd0aF07Ci0JCQkJCQlTeXN0ZW0uYXJyYXljb3B5KGFyZ3VtZW50cywgMCwg
bmV3QXJncywgMCwgYXJnTGVuZ3RoKTsKKwkJCWlmIChjb21waWxlck9wdGlvbnMuc291cmNlTGV2
ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84IHx8IGdlbmVyaWNUeXBlQXJndW1lbnRzICE9
IG51bGwpIHsgLy8gZm9yIDEuOCsgaW5mZXJyZWQgY2FsbHMsIHdlIGRvIHRoaXMgaW5zaWRlIFBH
TUIuY0NNMTguCisJCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBhcmdMZW5ndGg7IGkrKykgeworCQkJ
CQlUeXBlQmluZGluZyBwYXJhbSA9IGkgPCBwYXJhbUxlbmd0aCA/IHBhcmFtZXRlcnNbaV0gOiBw
YXJhbWV0ZXJzW3BhcmFtTGVuZ3RoIC0gMV07CisJCQkJCWlmIChhcmd1bWVudHNbaV0uaXNCYXNl
VHlwZSgpICE9IHBhcmFtLmlzQmFzZVR5cGUoKSkgeworCQkJCQkJaWYgKG5ld0FyZ3MgPT0gbnVs
bCkgeworCQkJCQkJCW5ld0FyZ3MgPSBuZXcgVHlwZUJpbmRpbmdbYXJnTGVuZ3RoXTsKKwkJCQkJ
CQlTeXN0ZW0uYXJyYXljb3B5KGFyZ3VtZW50cywgMCwgbmV3QXJncywgMCwgYXJnTGVuZ3RoKTsK
KwkJCQkJCX0KKwkJCQkJCW5ld0FyZ3NbaV0gPSBlbnZpcm9ubWVudCgpLmNvbXB1dGVCb3hpbmdU
eXBlKGFyZ3VtZW50c1tpXSk7CiAJCQkJCX0KLQkJCQkJbmV3QXJnc1tpXSA9IGVudmlyb25tZW50
KCkuY29tcHV0ZUJveGluZ1R5cGUoYXJndW1lbnRzW2ldKTsKIAkJCQl9CiAJCQl9CiAJCQlpZiAo
bmV3QXJncyAhPSBudWxsKQogCQkJCWFyZ3VtZW50cyA9IG5ld0FyZ3M7Ci0JCQllbHNlICAvLyBl
bnN1cmUgdGhhdCBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZCgpIGJlbG93IGNhbiB1cGRhdGUgYXJn
dW1lbnRzIHdpdGhvdXQgaGFybWluZyBvdXIgY2FsbGVyOiAoVE9ETzogYWx3YXlzIGNvcHkgYmVm
b3JlIHRoZSBsb29wPyBvbmx5IGluIDEuOD8pCi0JCQkJU3lzdGVtLmFycmF5Y29weShhcmd1bWVu
dHMsIDAsIGFyZ3VtZW50cz1uZXcgVHlwZUJpbmRpbmdbYXJnTGVuZ3RoXSwgMCwgYXJnTGVuZ3Ro
KTsKIAkJCW1ldGhvZCA9IFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5jb21wdXRl
Q29tcGF0aWJsZU1ldGhvZChtZXRob2QsIGFyZ3VtZW50cywgdGhpcywgaW52b2NhdGlvblNpdGUp
OwogCQkJaWYgKG1ldGhvZCA9PSBudWxsKSByZXR1cm4gbnVsbDsgLy8gaW5jb21wYXRpYmxlCiAJ
CQlpZiAoIW1ldGhvZC5pc1ZhbGlkQmluZGluZygpKSByZXR1cm4gbWV0aG9kOyAvLyBib3VuZCBj
aGVjayBpc3N1ZSBpcyB0YWtpbmcgcHJlY2VkZW5jZQpAQCAtNDIzMiw3ICs0MjMyLDcgQEAKIAkJ
aW50W10gY29tcGF0aWJpbGl0eUxldmVscyA9IG5ldyBpbnRbdmlzaWJsZVNpemVdOwogCQlpbnQg
Y29tcGF0aWJsZUNvdW50ID0gMDsKIAkJZm9yIChpbnQgaSA9IDA7IGkgPCB2aXNpYmxlU2l6ZTsg
aSsrKQotCQkJaWYgKChjb21wYXRpYmlsaXR5TGV2ZWxzW2ldID0gcGFyYW1ldGVyQ29tcGF0aWJp
bGl0eUxldmVsKHZpc2libGVbaV0sIGFyZ3VtZW50VHlwZXMpKSAhPSBOT1RfQ09NUEFUSUJMRSkg
eworCQkJaWYgKChjb21wYXRpYmlsaXR5TGV2ZWxzW2ldID0gcGFyYW1ldGVyQ29tcGF0aWJpbGl0
eUxldmVsKHZpc2libGVbaV0sIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlKSkgIT0gTk9U
X0NPTVBBVElCTEUpIHsKIAkJCQlpZiAoaSAhPSBjb21wYXRpYmxlQ291bnQpIHsKIAkJCQkJdmlz
aWJsZVtjb21wYXRpYmxlQ291bnRdID0gdmlzaWJsZVtpXTsKIAkJCQkJY29tcGF0aWJpbGl0eUxl
dmVsc1tjb21wYXRpYmxlQ291bnRdID0gY29tcGF0aWJpbGl0eUxldmVsc1tpXTsKQEAgLTQyNjUs
NyArNDI2NSw2IEBACiAJCQkJaW50IGxldmVsaiA9IGNvbXBhdGliaWxpdHlMZXZlbHNbal07CiAJ
CQkJbmV4dEs6IGZvciAoaW50IGsgPSAwOyBrIDwgdmlzaWJsZVNpemU7IGsrKykgewogCQkJCQlp
ZiAoaiA9PSBrKSBjb250aW51ZTsKLQkJCQkJLy8gVE9ETyBkbyB3ZSB3YW50IHRvIGNoZWNrIGV4
aXN0aW5nIGluZmVyZW5jZSBjb250ZXh0cyB3aGV0aGVyIHRoZXkgY2FuIHRlbGwgdXMgYmV0dGVy
IGFib3V0IHRoZSB1c2VkIGluZmVyZW5jZUtpbmQ/CiAJCQkJCWludCBsZXZlbGsgPSBjb21wYXRp
YmlsaXR5TGV2ZWxzW2tdOwogCQkJCQlpZiAobGV2ZWxqID4gLTEgJiYgbGV2ZWxrID4gLTEgJiYg
bGV2ZWxqICE9IGxldmVsaykgewogCQkJCQkJaWYgKGxldmVsaiA8IGxldmVsaykKQEAgLTQ1NzYs
NiArNDU3NSw1MSBAQAogCQl9IHdoaWxlIChzY29wZSAhPSBudWxsKTsKIAkJcmV0dXJuIGxhc3RN
ZXRob2RTY29wZTsgLy8gbWF5IGFuc3dlciBudWxsIGlmIG5vIG1ldGhvZCBhcm91bmQKIAl9CisJ
CisJLy8gVmVyc2lvbiB0aGF0IGp1c3QgYW5zd2VycyBiYXNlZCBvbiBpbmZlcmVuY2Uga2luZCAo
YXQgMS44Kykgd2hlbiBhdmFpbGFibGUuCisJcHVibGljIGludCBwYXJhbWV0ZXJDb21wYXRpYmls
aXR5TGV2ZWwoTWV0aG9kQmluZGluZyBtZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRzLCBJ
bnZvY2F0aW9uU2l0ZSBzaXRlKSB7CisJCWlmIChjb21waWxlck9wdGlvbnMoKS5zb3VyY2VMZXZl
bCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84ICYmIG1ldGhvZCBpbnN0YW5jZW9mIFBhcmFt
ZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgeworCQkJaW50IGluZmVyZW5jZUtpbmQgPSBJ
bmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tfVU5LTk9XTjsKKwkJCUluZmVyZW5jZUNvbnRleHQxOCBj
b250ZXh0ID0gbnVsbDsKKwkJCWlmIChzaXRlIGluc3RhbmNlb2YgSW52b2NhdGlvbikgeworCQkJ
CUludm9jYXRpb24gaW52b2NhdGlvbiA9IChJbnZvY2F0aW9uKSBzaXRlOworCQkJCWNvbnRleHQg
PSBpbnZvY2F0aW9uLmdldEluZmVyZW5jZUNvbnRleHQoKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0
aG9kQmluZGluZykgbWV0aG9kKTsKKwkJCQlpZiAoY29udGV4dCAhPSBudWxsKQorCQkJCQlpbmZl
cmVuY2VLaW5kID0gY29udGV4dC5pbmZlcmVuY2VLaW5kOworCQkJfSBlbHNlIGlmIChzaXRlIGlu
c3RhbmNlb2YgUmVmZXJlbmNlRXhwcmVzc2lvbikgeworCQkJCWluZmVyZW5jZUtpbmQgPSAoKFJl
ZmVyZW5jZUV4cHJlc3Npb24pIHNpdGUpLmluZmVyZW5jZUtpbmQ7CisJCQl9CisJCQkvKiAxLjgr
IFBvc3QgaW5mZXJlbmNlIGNvbXBhdGliaWxpdHkgY2hlY2sgcG9saWN5OiBGb3Igbm9uLWZ1bmN0
aW9uYWwtdHlwZSBhcmd1bWVudHMsIHRydXN0IGluZmVyZW5jZS4gRm9yIGZ1bmN0aW9uYWwgdHlw
ZSBhcmd1bWVudHMgYXBwbHkgY29tcGF0aWJpbGl0eSBjaGVja3MgYXMgaW5mZXJlbmNlCisJCQkg
ICBlbmdpbmUgbWF5IG5vdCBoYXZlIGNoZWNrZWQgYXJndW1lbnRzIHRoYXQgYXJlIG5vdCBwZXJ0
aW5lbnQgdG8gYXBwbGljYWJpbGl0eS4gT25lIGNvbXBsaWNhdGlvbiB0byBkZWFsIHdpdGggaXMg
d2hlbiB0aGUgZ2VuZXJpYyBtZXRob2QncyBwYXJhbWV0ZXIgaXMgaXRzIG93biB0eXBlIHZhcmlh
YmxlIAorCQkJICAgYW5kIG9ubHkgYXBwbGljYWJpbGl0eSB3YXMgaW5mZXJyZWQgYW5kIGFwcGxp
Y2FiaWxpdHkgaW5mZXJlbmNlIGluc3RhbnRpYXRlZCBpdCB3aXRoIGpsTyBkdWUgdG8gbGFjayBv
ZiB1cHBlciBib3VuZHMgaW4gdGhlIGJvdW5kIHNldC4KKwkJCSovCisJCQlpZiAoc2l0ZSBpbnN0
YW5jZW9mIEludm9jYXRpb24gJiYgY29udGV4dCAhPSBudWxsKSB7IC8vIHRoaXMgYmxvY2sgY2Fu
IGJlIHJlYWRpbHkgc2VlbiB0byBiZSBub3QgcmVsZXZhbnQgZm9yIHJlZmVyZW5jZSBleHByZXNz
aW9ucworCQkJCU1ldGhvZEJpbmRpbmcgc2hhbGxvd09yaWdpbmFsID0gbWV0aG9kLnNoYWxsb3dP
cmlnaW5hbCgpOworCQkJCWZvciAoaW50IGkgPSAwLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3Ro
OyBpIDwgbGVuZ3RoOyBpKyspIHsKKwkJCQkJVHlwZUJpbmRpbmcgYXJndW1lbnQgPSBhcmd1bWVu
dHNbaV07CisJCQkJCWlmICghYXJndW1lbnQuaXNGdW5jdGlvbmFsVHlwZSgpKQorCQkJCQkJY29u
dGludWU7CisJCQkJCVR5cGVCaW5kaW5nIHBhcmFtZXRlciA9IEluZmVyZW5jZUNvbnRleHQxOC5n
ZXRQYXJhbWV0ZXIobWV0aG9kLnBhcmFtZXRlcnMsIGksIGNvbnRleHQuaXNWYXJBcmdzKCkpOwor
CQkJCQlpZiAoYXJndW1lbnQuaXNDb21wYXRpYmxlV2l0aChwYXJhbWV0ZXIsIHRoaXMpKQorCQkJ
CQkJY29udGludWU7CisJCQkJCVR5cGVCaW5kaW5nIHNoYWxsb3dQYXJhbWV0ZXIgPSBJbmZlcmVu
Y2VDb250ZXh0MTguZ2V0UGFyYW1ldGVyKHNoYWxsb3dPcmlnaW5hbC5wYXJhbWV0ZXJzLCBpLCBj
b250ZXh0LmlzVmFyQXJncygpKTsKKwkJCQkJaWYgKHNoYWxsb3dQYXJhbWV0ZXIuaXNQZXJ0aW5l
bnRUb0FwcGxpY2FiaWxpdHkoYXJndW1lbnQsIHNoYWxsb3dPcmlnaW5hbCkpCisJCQkJCQlyZXR1
cm4gTk9UX0NPTVBBVElCTEU7CisJCQkJfQorCQkJfQorCQkJc3dpdGNoIChpbmZlcmVuY2VLaW5k
KSB7CisJCQkJY2FzZSBJbmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tfU1RSSUNUOgorCQkJCQlyZXR1
cm4gQ09NUEFUSUJMRTsKKwkJCQljYXNlIEluZmVyZW5jZUNvbnRleHQxOC5DSEVDS19MT09TRToK
KwkJCQkJcmV0dXJuIEFVVE9CT1hfQ09NUEFUSUJMRTsKKwkJCQljYXNlIEluZmVyZW5jZUNvbnRl
eHQxOC5DSEVDS19WQVJBUkc6CisJCQkJCXJldHVybiBWQVJBUkdTX0NPTVBBVElCTEU7CisJCQkJ
ZGVmYXVsdDoKKwkJCQkJYnJlYWs7CisJCQkJfQorCQl9CisJCXJldHVybiBwYXJhbWV0ZXJDb21w
YXRpYmlsaXR5TGV2ZWwobWV0aG9kLCBhcmd1bWVudHMsIGZhbHNlKTsKKwl9CiAKIAlwdWJsaWMg
aW50IHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChNZXRob2RCaW5kaW5nIG1ldGhvZCwgVHlw
ZUJpbmRpbmdbXSBhcmd1bWVudHMpIHsKIAkJcmV0dXJuIHBhcmFtZXRlckNvbXBhdGliaWxpdHlM
ZXZlbChtZXRob2QsIGFyZ3VtZW50cywgZmFsc2UpOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1
cC9UeXBlQmluZGluZy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9UeXBlQmluZGluZy5qYXZhCmluZGV4
IDBiYjBkYjYuLjQ2YjQyMGMgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvVHlwZUJpbmRpbmcu
amF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1R5cGVCaW5kaW5nLmphdmEKQEAgLTQ0MSw2ICs0NDEs
MTYgQEAKIAkJCQkJfQogCQkJCX0KIAkJCX0KKwkJCWJyZWFrOworCQljYXNlIEJpbmRpbmcuSU5U
RVJTRUNUSU9OX0NBU1RfVFlQRToKKwkJCUludGVyc2VjdGlvbkNhc3RUeXBlQmluZGluZyBpY3Ri
ID0gKEludGVyc2VjdGlvbkNhc3RUeXBlQmluZGluZykgdGhpczsKKwkJCVJlZmVyZW5jZUJpbmRp
bmdbXSBpbnRlcnNlY3RpbmdUeXBlcyA9IGljdGIuZ2V0SW50ZXJzZWN0aW5nVHlwZXMoKTsKKwkJ
CWZvciAoaW50IGkgPSAwLCBsZW5ndGggPSBpbnRlcnNlY3RpbmdUeXBlcy5sZW5ndGg7IGkgPCBs
ZW5ndGg7IGkrKykgeworCQkJCVR5cGVCaW5kaW5nIHN1cGVyVHlwZSA9IGludGVyc2VjdGluZ1R5
cGVzW2ldLmZpbmRTdXBlclR5cGVPcmlnaW5hdGluZ0Zyb20ob3RoZXJUeXBlKTsKKwkJCQlpZiAo
c3VwZXJUeXBlICE9IG51bGwpCisJCQkJCXJldHVybiBzdXBlclR5cGU7CisJCQl9CisJCQlicmVh
azsKIAl9CiAJcmV0dXJuIG51bGw7CiB9
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>248209</attachid>
            <date>2014-10-27 09:58:00 -0400</date>
            <delta_ts>2014-10-27 13:50:29 -0400</delta_ts>
            <desc>Same patch synched with master + more tests</desc>
            <filename>threefixes.patch</filename>
            <type>text/plain</type>
            <size>22961</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9v
cmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVn
cmVzc2lvblRlc3QuamF2YQppbmRleCBkMTYyYTVmLi5jZGIxMjJlIDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25UZXN0LmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pk
dC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVzdC5q
YXZhCkBAIC01NDgxLDkgKzU0ODEsOCBAQAogCQkgICAiIik7CiB9CiAvLyBodHRwczovL2J1Z3Mu
ZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDQzNTk2LCBbMS44XVtjb21waWxlcl0g
RmFpbHVyZSBmb3Igb3ZlcmxvYWQgcmVzb2x1dGlvbiBpbiBjYXNlIG9mIEdlbmVyaWNzIGFuZCBW
YXJhZ3MgCi1wdWJsaWMgdm9pZCBfdGVzdDQ0MzU5NigpIHsKLQlpZiAodGhpcy5jb21wbGlhbmNl
TGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNykKLQkJdGhpcy5ydW5OZWdhdGl2ZVRl
c3QoCitwdWJsaWMgdm9pZCB0ZXN0NDQzNTk2KCkgeworCXRoaXMucnVuTmVnYXRpdmVUZXN0KAog
CQkgICBuZXcgU3RyaW5nW10gewogCQkJICAgIlguamF2YSIsCiAJCQkgICAicHVibGljIGZpbmFs
IGNsYXNzIFgge1xuIiArCkBAIC01NDk3LDYgKzU0OTYsOCBAQAogCQkJICAgIiAgICB9XG4iICsK
IAkJCSAgICJ9XG4iLAogCQkgICB9LAorCQkgICB0aGlzLmNvbXBsaWFuY2VMZXZlbCA8IENsYXNz
RmlsZUNvbnN0YW50cy5KREsxXzcgPworCQkgICAiIiA6IAkgICAKIAkJICAgIi0tLS0tLS0tLS1c
biIgKyAKIAkJCSIxLiBXQVJOSU5HIGluIFguamF2YSAoYXQgbGluZSA0KVxuIiArIAogCQkJIglw
dWJsaWMgc3RhdGljIDxUPiBQcmVkaWNhdGU8VD4gYW5kKFByZWRpY2F0ZTw/IHN1cGVyIFQ+Li4u
IGFyZykgeyByZXR1cm4gbnVsbDsgfVxuIiArIApAQCAtNTY1Niw1ICs1NjU3LDg5IEBACiAJCQki
VHlwZSBzYWZldHk6IFBvdGVudGlhbCBoZWFwIHBvbGx1dGlvbiB2aWEgdmFyYXJncyBwYXJhbWV0
ZXIgd29ya2Vyc1xuIiArIAogCQkJIi0tLS0tLS0tLS1cbiIpOwogfQorLy8gaHR0cHM6Ly9idWdz
LmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQ0ODc5NSwgWzEuOF1bY29tcGlsZXJd
IEluZmVyZW5jZSBzaG91bGQgZGlzY3JpbWluYXRlIGJldHdlZW4gc3RyaWN0IGFuZCBsb29zZSBt
b2RlcyAgIAorcHVibGljIHZvaWQgdGVzdDQ0ODc5NSgpIHsKKwkJdGhpcy5ydW5OZWdhdGl2ZVRl
c3QoCisJCSAgIG5ldyBTdHJpbmdbXSB7CisJCQkgICAiWC5qYXZhIiwKKwkJCSAgICJwdWJsaWMg
Y2xhc3MgWDxUPiB7XG4iICsKKwkJCSAgICIJc3RhdGljIDxUPiBUIGVsZW1lbnQoVCBbXSB0YSkg
e1xuIiArCisJCQkgICAiCQlyZXR1cm4gdGFbMF07XG4iICsKKwkJCSAgICIJfVxuIiArCisJCQkg
ICAiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKworCQkJICAg
IgkJaW50IHggPSBlbGVtZW50KG5ldyBpbnQgW10geyAxMjM0IH0pO1xuIiArICAvLyBjaGVjayB0
aGF0IGF1dG9ib3hpbmcgZG9lcyBub3Qga2ljayBpbiBmb3IgYXJyYXlzLCBpLmUgZW5naW5lIHNo
b3VsZCBub3Qgc2xpcCBpbnRvIGxvb3NlIG1vZGUuCisJCQkgICAiCX1cbiIgKworCQkJICAgIn1c
biIsCisJCSAgIH0sCisJCSAgICItLS0tLS0tLS0tXG4iICsgCisJCQkiMS4gRVJST1IgaW4gWC5q
YXZhIChhdCBsaW5lIDYpXG4iICsgCisJCQkiCWludCB4ID0gZWxlbWVudChuZXcgaW50IFtdIHsg
MTIzNCB9KTtcbiIgKyAKKwkJCSIJICAgICAgICBeXl5eXl5eXG4iICsgCisJCQkiVGhlIG1ldGhv
ZCBlbGVtZW50KFRbXSkgaW4gdGhlIHR5cGUgWDxUPiBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhl
IGFyZ3VtZW50cyAoaW50W10pXG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIik7Cit9CisvLyBodHRw
czovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDQ4Nzk1LCBbMS44XVtj
b21waWxlcl0gSW5mZXJlbmNlIHNob3VsZCBkaXNjcmltaW5hdGUgYmV0d2VlbiBzdHJpY3QgYW5k
IGxvb3NlIG1vZGVzICAgCitwdWJsaWMgdm9pZCB0ZXN0NDQ4Nzk1YSgpIHsKKwkJdGhpcy5ydW5D
b25mb3JtVGVzdCgKKwkJICAgbmV3IFN0cmluZ1tdIHsKKwkJCSAgICJYLmphdmEiLAorCQkJICAg
InB1YmxpYyBjbGFzcyBYPFQ+IHtcbiIgKworCQkJICAgIglzdGF0aWMgPFQ+IFQgZWxlbWVudChp
bnQgeCwgVCB0KSB7XG4iICsKKwkJCSAgICIJCVN5c3RlbS5vdXQucHJpbnRsbihcIlN0cmljdFwi
KTtcbiIgKworCQkJICAgIgkJcmV0dXJuIHQ7XG4iICsKKwkJCSAgICIJfVxuIiArCisJCQkgICAi
CXN0YXRpYyA8VD4gVCBlbGVtZW50KFQgdDEsIFQgdDIpIHtcbiIgKworCQkJICAgIgkJU3lzdGVt
Lm91dC5wcmludGxuKFwiTG9vc2VcIik7XG4iICsKKwkJCSAgICIJCXJldHVybiB0MjtcbiIgKwor
CQkJICAgIgl9XG4iICsKKwkJCSAgICIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10g
YXJncykge1xuIiArCisJCQkgICAiCQlpbnQgeCA9IGVsZW1lbnQoMTAsIG5ldyBJbnRlZ2VyKDIw
KSk7XG4iICsKKwkJCSAgICIJfVxuIiArCisJCQkgICAifVxuIiwKKwkJICAgfSwKKwkJICAgIlN0
cmljdCIpOworfQorLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dp
P2lkPTQ0ODc5NSwgWzEuOF1bY29tcGlsZXJdIEluZmVyZW5jZSBzaG91bGQgZGlzY3JpbWluYXRl
IGJldHdlZW4gc3RyaWN0IGFuZCBsb29zZSBtb2RlcyAgIAorcHVibGljIHZvaWQgdGVzdDQ0ODc5
NWIoKSB7CisJCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCSAgIG5ldyBTdHJpbmdbXSB7CisJCQkg
ICAiWC5qYXZhIiwKKwkJCSAgICJwdWJsaWMgY2xhc3MgWDxUPiB7XG4iICsKKwkJCSAgICIJc3Rh
dGljIGludCBlbGVtZW50KGludCB4LCBJbnRlZ2VyIHQpIHtcbiIgKworCQkJICAgIgkJU3lzdGVt
Lm91dC5wcmludGxuKFwibm9uLWdlbmVyaWNcIik7XG4iICsKKwkJCSAgICIJCXJldHVybiB0O1xu
IiArCisJCQkgICAiCX1cbiIgKworCQkJICAgIglzdGF0aWMgPFQ+IFQgZWxlbWVudChpbnQgdDEs
IFQgdDIpIHtcbiIgKworCQkJICAgIgkJU3lzdGVtLm91dC5wcmludGxuKFwiZ2VuZXJpY1wiKTtc
biIgKworCQkJICAgIgkJcmV0dXJuIHQyO1xuIiArCisJCQkgICAiCX1cbiIgKworCQkJICAgIglw
dWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsKKwkJCSAgICIJCWlu
dCB4ID0gZWxlbWVudCgxMCwgbmV3IEludGVnZXIoMjApKTtcbiIgKworCQkJICAgIgl9XG4iICsK
KwkJCSAgICJ9XG4iLAorCQkgICB9LAorCQkgICAibm9uLWdlbmVyaWMiKTsKK30KKy8vIGh0dHBz
Oi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00NDg3OTUsIFsxLjhdW2Nv
bXBpbGVyXSBJbmZlcmVuY2Ugc2hvdWxkIGRpc2NyaW1pbmF0ZSBiZXR3ZWVuIHN0cmljdCBhbmQg
bG9vc2UgbW9kZXMgICAKK3B1YmxpYyB2b2lkIHRlc3Q0NDg3OTVjKCkgeworCQl0aGlzLnJ1bkNv
bmZvcm1UZXN0KAorCQkgICBuZXcgU3RyaW5nW10geworCQkJICAgIlguamF2YSIsCisJCQkgICAi
cHVibGljIGNsYXNzIFg8VD4ge1xuIiArCisJCQkgICAiCXN0YXRpYyBpbnQgZWxlbWVudChJbnRl
Z2VyIHgsIEludGVnZXIgdCkge1xuIiArCisJCQkgICAiCQlTeXN0ZW0ub3V0LnByaW50bG4oXCJu
b24tZ2VuZXJpY1wiKTtcbiIgKworCQkJICAgIgkJcmV0dXJuIHQ7XG4iICsKKwkJCSAgICIJfVxu
IiArCisJCQkgICAiCXN0YXRpYyA8VD4gVCBlbGVtZW50KGludCB0MSwgVCB0Mikge1xuIiArCisJ
CQkgICAiCQlTeXN0ZW0ub3V0LnByaW50bG4oXCJnZW5lcmljXCIpO1xuIiArCisJCQkgICAiCQly
ZXR1cm4gdDI7XG4iICsKKwkJCSAgICIJfVxuIiArCisJCQkgICAiCXB1YmxpYyBzdGF0aWMgdm9p
ZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKworCQkJICAgIgkJaW50IHggPSBlbGVtZW50KDEw
LCBuZXcgSW50ZWdlcigyMCkpO1xuIiArCisJCQkgICAiCX1cbiIgKworCQkJICAgIn1cbiIsCisJ
CSAgIH0sCisJCSAgICJnZW5lcmljIik7Cit9CiB9CiAKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9j
b21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3RfMV84LmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25UZXN0XzFfOC5qYXZh
CmluZGV4IGY1NTQyZmYuLjg2YTlmOTAgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
LnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9y
ZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3RfMV84LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3Rz
L2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVzdF8xXzguamF2YQpAQCAt
NDc2Nyw0ICs0NzY3LDI5IEBACiAJCX0sIAogCQkiIik7CiB9CisvLyBodHRwczovL2J1Z3MuZWNs
aXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDQ3NzY3LCBbMS44XVtjb21waWxlcl0gU3B1
cmlvdXMgbWV0aG9kIG5vdCBhcHBsaWNhYmxlIGVycm9yIGR1ZSB0byBpbnRlcmFjdGlvbiBiZXR3
ZWVuIG92ZXJsb2FkIHJlc29sdXRpb24gYW5kIHR5cGUgaW5mZXJlbmNlCitwdWJsaWMgdm9pZCB0
ZXN0NDQ3NzY3KCkgeworCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJ
CQkiWC5qYXZhIiwKKwkJCSJpbnRlcmZhY2UgSSB7XG4iICsKKwkJCSIJdm9pZCBiYXIoU3RyaW5n
IHQpO1xuIiArCisJCQkifVxuIiArCisJCQkicHVibGljIGNsYXNzIFg8VD4ge1xuIiArCisJCQki
CVgoU3RyaW5nIHgpIHt9XG4iICsKKwkJCSIJWChUIHgpIHsgXG4iICsKKwkJCSIJCVN5c3RlbS5v
dXQucHJpbnRsbihcIkhlcmVcIik7XG4iICsKKwkJCSIJfVxuIiArCisJCQkiCVgoVCB4LCBTdHJp
bmcgLi4uc3RyaW5ncykge31cbiIgKworCQkJIglwdWJsaWMgdm9pZCBvbmUoWDxJPiBjKXt9XG4i
ICsKKwkJCSIJcHVibGljIHZvaWQgdHdvKCkge1xuIiArCisJCQkiCQlvbmUobmV3IFg8PigoU3Ry
aW5nIHMpIC0+IHsgfSkpO1xuIiArCisJCQkiCX1cbiIgKworCQkJIglwdWJsaWMgc3RhdGljIHZv
aWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsKKwkJCSIJCW5ldyBYKFwiXCIpLnR3bygpO1xu
IiArCisJCQkiCX1cbiIgKworCQkJIn1cbiIsCisJCX0sIAorCQkiSGVyZSIpOworfQogfQpkaWZm
IC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xp
cHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhUmVncmVzc2lvblRl
c3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0xhbWJkYVJlZ3Jlc3Npb25U
ZXN0LmphdmEKaW5kZXggMDcyZmQwYy4uOTYyM2RmOSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Nv
bXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhUmVncmVzc2lvblRlc3QuamF2YQorKysgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVz
dHMvY29tcGlsZXIvcmVncmVzc2lvbi9MYW1iZGFSZWdyZXNzaW9uVGVzdC5qYXZhCkBAIC0xOTEs
NyArMTkxLDE0NyBAQAogCSJjYXNlMjogUnVubmFibGVcbiIgKyAKIAkiY2FzZTI6IFJ1bm5hYmxl
Iik7CiB9CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9
NDQ3NzY3LCBbMS44XVtjb21waWxlcl0gU3B1cmlvdXMgbWV0aG9kIG5vdCBhcHBsaWNhYmxlIGVy
cm9yIGR1ZSB0byBpbnRlcmFjdGlvbiBiZXR3ZWVuIG92ZXJsb2FkIHJlc29sdXRpb24gYW5kIHR5
cGUgaW5mZXJlbmNlIAorcHVibGljIHZvaWQgdGVzdDQ0Nzc2NygpIHsKKwl0aGlzLnJ1bkNvbmZv
cm1UZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJIlguamF2YSIsIAorCQkJImludGVyZmFjZSBJ
PFQsIFUsIFY+IHtcbiIgKworCQkJIglUIGdvbyhVIHUsIFYgdik7XG4iICsKKwkJCSJ9XG4iICsK
KwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCSIJc3RhdGljIDxULCBVLCBWPiBUIGZvbyhU
IHQsIFUgdSwgViB2KSB7XG4iICsKKwkJCSIgICAgICAgU3lzdGVtLm91dC5wcmludGxuKFwiV3Jv
bmchXCIpO1xuIiArCisJCQkiICAgICAgIHJldHVybiBudWxsO1xuIiArCisJCQkiICAgfVxuIiAr
CisJCQkiCXN0YXRpYyA8VCwgVSwgVj4gViBmb28oVCB0LCBVIHUsIEk8VCwgVSwgVj4gaSkge1xu
IiArCisJCQkiCQlTeXN0ZW0ub3V0LnByaW50bG4oXCJSaWdodCFcIik7XG4iICsKKwkJCSIgICAg
ICAgcmV0dXJuIG51bGw7XG4iICsKKwkJCSIJfVxuIiArCisJCQkiCXB1YmxpYyBzdGF0aWMgdm9p
ZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKworCQkJIgkJU3RyaW5nIHMgPSBnb28oZm9vKFwi
U3RyaW5nXCIsIFwiU3RyaW5nXCIsICh1LCB2KSAtPiB2KSk7XG4iICsKKwkJCSIJfVxuIiArCisJ
CQkiCXN0YXRpYyA8VD4gVCBnb28oVCB0KSB7XG4iICsKKwkJCSIJICAgIHJldHVybiB0OwlcbiIg
KworCQkJIgl9XG4iICsKKwkJCSJ9XG4iCisJfSwKKwkiUmlnaHQhIik7Cit9CisvLyBodHRwczov
L2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDQ3NzY3LCBbMS44XVtjb21w
aWxlcl0gU3B1cmlvdXMgbWV0aG9kIG5vdCBhcHBsaWNhYmxlIGVycm9yIGR1ZSB0byBpbnRlcmFj
dGlvbiBiZXR3ZWVuIG92ZXJsb2FkIHJlc29sdXRpb24gYW5kIHR5cGUgaW5mZXJlbmNlIAorcHVi
bGljIHZvaWQgdGVzdDQ0Nzc2N2EoKSB7CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBT
dHJpbmdbXSB7CisJCQkiWC5qYXZhIiwgCisJCQkiaW50ZXJmYWNlIEk8VCwgVSwgVj4ge1xuIiAr
CisJCQkiCVQgZ29vKFUgdSwgViB2KTtcbiIgKworCQkJIn1cbiIgKworCQkJInB1YmxpYyBjbGFz
cyBYIHtcbiIgKworCQkJIglzdGF0aWMgPFQsIFUsIFY+IFQgZm9vKFQgdCwgVSB1LCBJPFQsIFUs
IFY+IGkpIHtcbiIgKworCQkJIgkJcmV0dXJuIG51bGw7XG4iICsKKwkJCSIJfVxuIiArCisJCQki
CXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKworCQkJIgkJU3Ry
aW5nIHMgPSBnb28oZm9vKFwiU3RyaW5nXCIsIFwiU3RyaW5nXCIsICh1LCB2KSAtPiB2KSk7XG4i
ICsKKwkJCSIJfVxuIiArCisJCQkiCXN0YXRpYyA8VD4gVCBnb28oVCB0KSB7XG4iICsKKwkJCSIJ
ICAgIHJldHVybiB0OwlcbiIgKworCQkJIgl9XG4iICsKKwkJCSJ9XG4iCisJfSwKKwkiLS0tLS0t
LS0tLVxuIiArIAorCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgOSlcbiIgKyAKKwkiCVN0
cmluZyBzID0gZ29vKGZvbyhcIlN0cmluZ1wiLCBcIlN0cmluZ1wiLCAodSwgdikgLT4gdikpO1xu
IiArIAorCSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
IF5cbiIgKyAKKwkiVHlwZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBPYmplY3QgdG8g
U3RyaW5nXG4iICsgCisJIi0tLS0tLS0tLS1cbiIpOworfQorLy8gaHR0cHM6Ly9idWdzLmVjbGlw
c2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQ0Nzc2NywgWzEuOF1bY29tcGlsZXJdIFNwdXJp
b3VzIG1ldGhvZCBub3QgYXBwbGljYWJsZSBlcnJvciBkdWUgdG8gaW50ZXJhY3Rpb24gYmV0d2Vl
biBvdmVybG9hZCByZXNvbHV0aW9uIGFuZCB0eXBlIGluZmVyZW5jZSAKK3B1YmxpYyB2b2lkIHRl
c3Q0NDc3NjdiKCkgeworCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJ
CQkiWC5qYXZhIiwgCisJCQkiaW50ZXJmYWNlIEk8VCwgVSwgVj4ge1xuIiArCisJCQkiCVQgZ29v
KFUgdSwgViB2KTtcbiIgKworCQkJIn1cbiIgKworCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKwor
CQkJIglzdGF0aWMgU3RyaW5nIGdvbyhTdHJpbmcgcywgU3RyaW5nIHMyKSB7XG4iICsKKwkJCSIJ
CXJldHVybiBudWxsO1xuIiArCisJCQkiCX1cbiIgKworCQkJIglzdGF0aWMgPFQsIFUsIFY+IFYg
Zm9vKFQgdCwgVSB1LCBJPFQsIFUsIFY+IGkpIHtcbiIgKworCQkJIgkJU3lzdGVtLm91dC5wcmlu
dGxuKFwiUmlnaHQhXCIpO1xuIiArCisJCQkiCQlyZXR1cm4gbnVsbDtcbiIgKworCQkJIgl9XG4i
ICsKKwkJCSIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuIiArCisJ
CQkiCQlTdHJpbmcgcyA9IGdvbyhmb28oXCJTdHJpbmdcIiwgXCJTdHJpbmdcIiwgWDo6Z29vKSk7
XG4iICsKKwkJCSIJfVxuIiArCisJCQkiCXN0YXRpYyA8VD4gVCBnb28oVCB0KSB7XG4iICsKKwkJ
CSIJICAgIHJldHVybiB0OwlcbiIgKworCQkJIgl9XG4iICsKKwkJCSJ9XG4iCisJfSwKKwkiUmln
aHQhIik7Cit9CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/
aWQ9NDQ3NzY3LCBbMS44XVtjb21waWxlcl0gU3B1cmlvdXMgbWV0aG9kIG5vdCBhcHBsaWNhYmxl
IGVycm9yIGR1ZSB0byBpbnRlcmFjdGlvbiBiZXR3ZWVuIG92ZXJsb2FkIHJlc29sdXRpb24gYW5k
IHR5cGUgaW5mZXJlbmNlIAorcHVibGljIHZvaWQgdGVzdDQ0Nzc2N2MoKSB7CisJdGhpcy5ydW5D
b25mb3JtVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJYLmphdmEiLCAKKwkJCSJpbnRlcmZh
Y2UgSTxULCBVLCBWPiB7XG4iICsKKwkJCSIJVCBnb28oVSB1LCBWIHYpO1xuIiArCisJCQkifVxu
IiArCisJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkiCXN0YXRpYyBTdHJpbmcgZ29vKFN0
cmluZyBzLCBTdHJpbmcgczIpIHtcbiIgKworCQkJIgkJcmV0dXJuIG51bGw7XG4iICsKKwkJCSIJ
fVxuIiArCisJCQkiCXN0YXRpYyA8VCwgVSwgVj4gVCBmb28oVCB0LCBVIHUsIFYgdikge1xuIiAr
CisJCQkiICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihcIldyb25nIVwiKTtcbiIgKworCQkJIiAg
ICAgICByZXR1cm4gbnVsbDtcbiIgKworCQkJIiAgIH1cbiIgKworCQkJIglzdGF0aWMgPFQsIFUs
IFY+IFYgZm9vKFQgdCwgVSB1LCBJPFQsIFUsIFY+IGkpIHtcbiIgKworCQkJIgkJU3lzdGVtLm91
dC5wcmludGxuKFwiUmlnaHQhXCIpO1xuIiArCisJCQkiCQlyZXR1cm4gbnVsbDtcbiIgKworCQkJ
Igl9XG4iICsKKwkJCSIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xu
IiArCisJCQkiCQlTdHJpbmcgcyA9IGdvbyhmb28oXCJTdHJpbmdcIiwgXCJTdHJpbmdcIiwgWDo6
Z29vKSk7XG4iICsKKwkJCSIJfVxuIiArCisJCQkiCXN0YXRpYyA8VD4gVCBnb28oVCB0KSB7XG4i
ICsKKwkJCSIJICAgIHJldHVybiB0OwlcbiIgKworCQkJIgl9XG4iICsKKwkJCSJ9XG4iCisJfSwK
KwkiUmlnaHQhIik7Cit9CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1
Zy5jZ2k/aWQ9NDQ3NzY3LCBbMS44XVtjb21waWxlcl0gU3B1cmlvdXMgbWV0aG9kIG5vdCBhcHBs
aWNhYmxlIGVycm9yIGR1ZSB0byBpbnRlcmFjdGlvbiBiZXR3ZWVuIG92ZXJsb2FkIHJlc29sdXRp
b24gYW5kIHR5cGUgaW5mZXJlbmNlIAorcHVibGljIHZvaWQgdGVzdDQ0Nzc2N2QoKSB7CisJdGhp
cy5ydW5Db25mb3JtVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJYLmphdmEiLCAKKwkJCSJp
bnRlcmZhY2UgSTxULCBVLCBWPiB7XG4iICsKKwkJCSIJVCBnb28oVSB1LCBWIHYpO1xuIiArCisJ
CQkifVxuIiArCisJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkiCXN0YXRpYyBTdHJpbmcg
Z29vKFN0cmluZyBzLCBTdHJpbmcgczIpIHtcbiIgKworCQkJIgkJcmV0dXJuIG51bGw7XG4iICsK
KwkJCSIJfVxuIiArCisJCQkiCXN0YXRpYyA8VCwgVSwgVj4gVCBmb28oVCB0LCBVIHUsIFYgdikg
e1xuIiArCisJCQkiICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oXCJXcm9uZyFcIik7XG4iICsK
KwkJCSIgICAgICAgIHJldHVybiBudWxsO1xuIiArCisJCQkiICAgfVxuIiArCisJCQkiCXN0YXRp
YyA8VCwgVSwgVj4gViBmb28oVCB0LCBVIHUsIEk8VCwgVSwgVj4gaSkge1xuIiArCisJCQkiCQlT
eXN0ZW0ub3V0LnByaW50bG4oXCJSaWdodCFcIik7XG4iICsKKwkJCSIJCXJldHVybiBudWxsO1xu
IiArCisJCQkiCX1cbiIgKworCQkJIglwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBh
cmdzKSB7XG4iICsKKwkJCSIJCVN0cmluZyBzID0gZ29vKGZvbyhcIlN0cmluZ1wiLCBcIlN0cmlu
Z1wiLCBYOjpnb28pKTtcbiIgKworCQkJIgl9XG4iICsKKwkJCSIJc3RhdGljIDxUPiBUIGdvbyhU
IHQpIHtcbiIgKworCQkJIgkgICAgcmV0dXJuIHQ7CVxuIiArCisJCQkiCX1cbiIgKworCQkJIn1c
biIKKwl9LAorCSJSaWdodCEiKTsKK30KIHB1YmxpYyBzdGF0aWMgQ2xhc3MgdGVzdENsYXNzKCkg
ewogCXJldHVybiBMYW1iZGFSZWdyZXNzaW9uVGVzdC5jbGFzczsKIH0KLX0KK30KXCBObyBuZXds
aW5lIGF0IGVuZCBvZiBmaWxlCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRU
eXBlRm9ybXVsYS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50VHlwZUZvcm11bGEuamF2
YQppbmRleCBmZDk4ODQzLi40ZTc5OTRhIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0
cmFpbnRUeXBlRm9ybXVsYS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3RyYWludFR5cGVG
b3JtdWxhLmphdmEKQEAgLTY0LDEwICs2NCwxNCBAQAogCQkJCXJldHVybiB0aGlzLmxlZnQuaXND
b21wYXRpYmxlV2l0aCh0aGlzLnJpZ2h0LCBpbmZlcmVuY2VDb250ZXh0LnNjb3BlKSB8fCB0aGlz
LmxlZnQuaXNCb3hpbmdDb21wYXRpYmxlV2l0aCh0aGlzLnJpZ2h0LCBpbmZlcmVuY2VDb250ZXh0
LnNjb3BlKSA/IFRSVUUgOiBGQUxTRTsKIAkJCX0KIAkJCWlmICh0aGlzLmxlZnQuaXNQcmltaXRp
dmVUeXBlKCkpIHsKKwkJCQlpZiAoaW5mZXJlbmNlQ29udGV4dC5pbmZlcmVuY2VLaW5kID09IElu
ZmVyZW5jZUNvbnRleHQxOC5DSEVDS19TVFJJQ1QpCisJCQkJCWluZmVyZW5jZUNvbnRleHQuaW5m
ZXJlbmNlS2luZCA9IEluZmVyZW5jZUNvbnRleHQxOC5DSEVDS19MT09TRTsKIAkJCQlUeXBlQmlu
ZGluZyBzUHJpbWUgPSBpbmZlcmVuY2VDb250ZXh0LmVudmlyb25tZW50LmNvbXB1dGVCb3hpbmdU
eXBlKHRoaXMubGVmdCk7CiAJCQkJcmV0dXJuIENvbnN0cmFpbnRUeXBlRm9ybXVsYS5jcmVhdGUo
c1ByaW1lLCB0aGlzLnJpZ2h0LCBDT01QQVRJQkxFLCB0aGlzLmlzU29mdCk7CiAJCQl9CiAJCQlp
ZiAodGhpcy5yaWdodC5pc1ByaW1pdGl2ZVR5cGUoKSkgeworCQkJCWlmIChpbmZlcmVuY2VDb250
ZXh0LmluZmVyZW5jZUtpbmQgPT0gSW5mZXJlbmNlQ29udGV4dDE4LkNIRUNLX1NUUklDVCkKKwkJ
CQkJaW5mZXJlbmNlQ29udGV4dC5pbmZlcmVuY2VLaW5kID0gSW5mZXJlbmNlQ29udGV4dDE4LkNI
RUNLX0xPT1NFOwogCQkJCVR5cGVCaW5kaW5nIHRQcmltZSA9IGluZmVyZW5jZUNvbnRleHQuZW52
aXJvbm1lbnQuY29tcHV0ZUJveGluZ1R5cGUodGhpcy5yaWdodCk7CiAJCQkJcmV0dXJuIENvbnN0
cmFpbnRUeXBlRm9ybXVsYS5jcmVhdGUodGhpcy5sZWZ0LCB0UHJpbWUsIFNBTUUsIHRoaXMuaXNT
b2Z0KTsKIAkJCX0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvSW5mZXJlbmNlQ29udGV4dDE4
LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVyZW5jZUNvbnRleHQxOC5qYXZhCmluZGV4IDM3N2Jk
NTIuLjkxMjg2NzIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvSW5mZXJlbmNlQ29udGV4dDE4
LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9JbmZlcmVuY2VDb250ZXh0MTguamF2YQpAQCAtMTYw
LDYgKzE2MCw3IEBACiAJUmVmZXJlbmNlQmluZGluZyBvYmplY3Q7IC8vIGphdmEubGFuZy5PYmpl
Y3QKIAlwdWJsaWMgQm91bmRTZXQgYjI7CiAJCisJcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgQ0hF
Q0tfVU5LTk9XTiA9IDA7CiAJcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgQ0hFQ0tfU1RSSUNUID0g
MTsKIAlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBDSEVDS19MT09TRSA9IDI7CiAJcHVibGljIHN0
YXRpYyBmaW5hbCBpbnQgQ0hFQ0tfVkFSQVJHID0gMzsKQEAgLTIzMyw3ICsyMzQsNiBAQAogCiAJ
LyoqIEpMUyAxOC41LjE6IGNvbXB1dGUgYm91bmRzIGZyb20gZm9ybWFsIGFuZCBhY3R1YWwgcGFy
YW1ldGVycy4gKi8KIAlwdWJsaWMgdm9pZCBjcmVhdGVJbml0aWFsQ29uc3RyYWludHNGb3JQYXJh
bWV0ZXJzKFR5cGVCaW5kaW5nW10gcGFyYW1ldGVycywgYm9vbGVhbiBjaGVja1ZhcmFyZywgVHlw
ZUJpbmRpbmcgdmFyQXJnc1R5cGUsIE1ldGhvZEJpbmRpbmcgbWV0aG9kKSB7Ci0JCS8vIFRPRE8g
ZGlzY3JpbWluYXRlIHN0cmljdCB2cy4gbG9vc2UgaW52b2NhdGlvbnMKIAkJaWYgKHRoaXMuaW52
b2NhdGlvbkFyZ3VtZW50cyA9PSBudWxsKQogCQkJcmV0dXJuOwogCQlpbnQgbGVuID0gY2hlY2tW
YXJhcmcgPyBwYXJhbWV0ZXJzLmxlbmd0aCAtIDEgOiBNYXRoLm1pbihwYXJhbWV0ZXJzLmxlbmd0
aCwgdGhpcy5pbnZvY2F0aW9uQXJndW1lbnRzLmxlbmd0aCk7CmRpZmYgLS1naXQgYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
bG9va3VwL1BhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5qYXZhIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xv
b2t1cC9QYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcuamF2YQppbmRleCBkYjZjOTBj
Li5hMzNjN2ZkIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1BhcmFtZXRlcml6ZWRHZW5lcmlj
TWV0aG9kQmluZGluZy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUGFyYW1ldGVyaXplZEdlbmVy
aWNNZXRob2RCaW5kaW5nLmphdmEKQEAgLTE2MSwxMSArMTYxLDI1IEBACiAJCQogCQlQYXJhbWV0
ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgbWV0aG9kU3Vic3RpdHV0ZSA9IG51bGw7CiAJCVR5
cGVWYXJpYWJsZUJpbmRpbmdbXSB0eXBlVmFyaWFibGVzID0gb3JpZ2luYWxNZXRob2QudHlwZVZh
cmlhYmxlczsKLQkJSW5mZXJlbmNlQ29udGV4dDE4IGluZkN0eDE4ID0gbnVsbDsKKwkJSW5mZXJl
bmNlQ29udGV4dDE4IGluZkN0eDE4ID0gaW52b2NhdGlvblNpdGUuZnJlc2hJbmZlcmVuY2VDb250
ZXh0KHNjb3BlKTsKIAkJVHlwZUJpbmRpbmdbXSBwYXJhbWV0ZXJzID0gb3JpZ2luYWxNZXRob2Qu
cGFyYW1ldGVyczsKLQkJaW5mQ3R4MTggPSBpbnZvY2F0aW9uU2l0ZS5mcmVzaEluZmVyZW5jZUNv
bnRleHQoc2NvcGUpOwogCQlDb21waWxlck9wdGlvbnMgY29tcGlsZXJPcHRpb25zID0gc2NvcGUu
Y29tcGlsZXJPcHRpb25zKCk7CiAJCWJvb2xlYW4gaW52b2NhdGlvblR5cGVJbmZlcnJlZCA9IGZh
bHNlOworCQlib29sZWFuIHJlcXVpcmVCb3hpbmcgPSBmYWxzZTsKKwkJCisJCS8vIFNlZSBpZiB3
ZSBzaG91bGQgc3RhcnQgaW4gbG9vc2UgaW5mZXJlbmNlIG1vZGUuCisJCVR5cGVCaW5kaW5nIFtd
IGFyZ3VtZW50c0NvcHkgPSBuZXcgVHlwZUJpbmRpbmdbYXJndW1lbnRzLmxlbmd0aF07CisJCWZv
ciAoaW50IGkgPSAwLCBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLCBwYXJhbWV0ZXJzTGVuZ3Ro
ID0gcGFyYW1ldGVycy5sZW5ndGggOyBpIDwgbGVuZ3RoOyBpKyspIHsKKwkJCVR5cGVCaW5kaW5n
IHBhcmFtZXRlciA9IGkgPCBwYXJhbWV0ZXJzTGVuZ3RoID8gcGFyYW1ldGVyc1tpXSA6IHBhcmFt
ZXRlcnNbcGFyYW1ldGVyc0xlbmd0aCAtIDFdOworCQkJZmluYWwgVHlwZUJpbmRpbmcgYXJndW1l
bnQgPSBhcmd1bWVudHNbaV07CisJCQlpZiAoYXJndW1lbnQuaXNQcmltaXRpdmVUeXBlKCkgIT0g
cGFyYW1ldGVyLmlzUHJpbWl0aXZlVHlwZSgpKSB7IC8vIFNjb3BlLmNDTSBpbmNvcnJlY3RseSBi
dXQgaGFybWxlc3NseSB1c2VzIGlzQmFzZVR5cGUgd2hpY2ggYW5zd2VycyB0cnVlIGZvciBudWxs
LgorCQkJCWFyZ3VtZW50c0NvcHlbaV0gPSBzY29wZS5lbnZpcm9ubWVudCgpLmNvbXB1dGVCb3hp
bmdUeXBlKGFyZ3VtZW50KTsKKwkJCQlyZXF1aXJlQm94aW5nID0gdHJ1ZTsgLy8gY2FuJ3QgYmUg
c3RyaWN0IG1vZGUsIG5lZWRzIGF0IGxlYXN0IGxvb3NlLgorCQkJfSBlbHNlIHsKKwkJCQlhcmd1
bWVudHNDb3B5W2ldID0gYXJndW1lbnQ7CisJCQl9CisJCX0KKwkJYXJndW1lbnRzID0gYXJndW1l
bnRzQ29weTsgLy8gZWl0aGVyIHdheSwgdGhpcyBhbGxvd3MgdGhlIGVuZ2luZSB0byB1cGRhdGUg
YXJndW1lbnRzIHdpdGhvdXQgaGFybWluZyB0aGUgY2FsbGVycy4gCiAJCQogCQl0cnkgewogCQkJ
Qm91bmRTZXQgcHJvdmlzaW9uYWxSZXN1bHQgPSBudWxsOwpAQCAtMTc0LDcgKzE4OCw3IEBACiAJ
CQlmaW5hbCBib29sZWFuIGlzUG9seUV4cHJlc3Npb24gPSBpbnZvY2F0aW9uU2l0ZSBpbnN0YW5j
ZW9mIEV4cHJlc3Npb24gJiYgKChFeHByZXNzaW9uKWludm9jYXRpb25TaXRlKS5pc1BvbHlFeHBy
ZXNzaW9uKG9yaWdpbmFsTWV0aG9kKTsKIAkJCWJvb2xlYW4gaXNEaWFtb25kID0gaXNQb2x5RXhw
cmVzc2lvbiAmJiBvcmlnaW5hbE1ldGhvZC5pc0NvbnN0cnVjdG9yKCk7CiAJCQlpZiAoYXJndW1l
bnRzLmxlbmd0aCA9PSBwYXJhbWV0ZXJzLmxlbmd0aCkgewotCQkJCWluZkN0eDE4LmluZmVyZW5j
ZUtpbmQgPSBJbmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tfTE9PU0U7IC8vIFRPRE86IHZhbGlkYXRl
IGlmIDIgcGhhc2UgY2hlY2tpbmcgKHN0cmljdC9sb29zZSArIHZhcmFyZykgaXMgc3VmZmljaWVu
dC4KKwkJCQlpbmZDdHgxOC5pbmZlcmVuY2VLaW5kID0gcmVxdWlyZUJveGluZyA/IEluZmVyZW5j
ZUNvbnRleHQxOC5DSEVDS19MT09TRSA6IEluZmVyZW5jZUNvbnRleHQxOC5DSEVDS19TVFJJQ1Q7
IC8vIGVuZ2luZSBtYXkgc3RpbGwgc2xpcCBpbnRvIGxvb3NlIG1vZGUgYW5kIGFkanVzdCBsZXZl
bC4KIAkJCQlpbmZDdHgxOC5pbmZlckludm9jYXRpb25BcHBsaWNhYmlsaXR5KG9yaWdpbmFsTWV0
aG9kLCBhcmd1bWVudHMsIGlzRGlhbW9uZCk7CiAJCQkJcmVzdWx0ID0gaW5mQ3R4MTguc29sdmUo
dHJ1ZSk7CiAJCQl9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvbG9va3VwL1Njb3BlLmphdmEKaW5kZXggM2Y5MWM0OC4uOTcxYWQ4NiAxMDA2NDQKLS0tIGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YQpA
QCAtNzEzLDIwICs3MTMsMjAgQEAKIAkJLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mv
c2hvd19idWcuY2dpP2lkPTMzMDQzNSwgaW5mZXJlbmNlIHNob3VsZCBraWNrIGluIG9ubHkgYXQg
c291cmNlIDEuNSsKIAkJaWYgKHR5cGVWYXJpYWJsZXMgIT0gQmluZGluZy5OT19UWVBFX1ZBUklB
QkxFUyAmJiBjb21waWxlck9wdGlvbnMuc291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRz
LkpESzFfNSkgeyAvLyBnZW5lcmljIG1ldGhvZAogCQkJVHlwZUJpbmRpbmdbXSBuZXdBcmdzID0g
bnVsbDsKLQkJCWZvciAoaW50IGkgPSAwOyBpIDwgYXJnTGVuZ3RoOyBpKyspIHsKLQkJCQlUeXBl
QmluZGluZyBwYXJhbSA9IGkgPCBwYXJhbUxlbmd0aCA/IHBhcmFtZXRlcnNbaV0gOiBwYXJhbWV0
ZXJzW3BhcmFtTGVuZ3RoIC0gMV07Ci0JCQkJaWYgKGFyZ3VtZW50c1tpXS5pc0Jhc2VUeXBlKCkg
IT0gcGFyYW0uaXNCYXNlVHlwZSgpKSB7Ci0JCQkJCWlmIChuZXdBcmdzID09IG51bGwpIHsKLQkJ
CQkJCW5ld0FyZ3MgPSBuZXcgVHlwZUJpbmRpbmdbYXJnTGVuZ3RoXTsKLQkJCQkJCVN5c3RlbS5h
cnJheWNvcHkoYXJndW1lbnRzLCAwLCBuZXdBcmdzLCAwLCBhcmdMZW5ndGgpOworCQkJaWYgKGNv
bXBpbGVyT3B0aW9ucy5zb3VyY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzggfHwg
Z2VuZXJpY1R5cGVBcmd1bWVudHMgIT0gbnVsbCkgeyAvLyBmb3IgMS44KyBpbmZlcnJlZCBjYWxs
cywgd2UgZG8gdGhpcyBpbnNpZGUgUEdNQi5jQ00xOC4KKwkJCQlmb3IgKGludCBpID0gMDsgaSA8
IGFyZ0xlbmd0aDsgaSsrKSB7CisJCQkJCVR5cGVCaW5kaW5nIHBhcmFtID0gaSA8IHBhcmFtTGVu
Z3RoID8gcGFyYW1ldGVyc1tpXSA6IHBhcmFtZXRlcnNbcGFyYW1MZW5ndGggLSAxXTsKKwkJCQkJ
aWYgKGFyZ3VtZW50c1tpXS5pc0Jhc2VUeXBlKCkgIT0gcGFyYW0uaXNCYXNlVHlwZSgpKSB7CisJ
CQkJCQlpZiAobmV3QXJncyA9PSBudWxsKSB7CisJCQkJCQkJbmV3QXJncyA9IG5ldyBUeXBlQmlu
ZGluZ1thcmdMZW5ndGhdOworCQkJCQkJCVN5c3RlbS5hcnJheWNvcHkoYXJndW1lbnRzLCAwLCBu
ZXdBcmdzLCAwLCBhcmdMZW5ndGgpOworCQkJCQkJfQorCQkJCQkJbmV3QXJnc1tpXSA9IGVudmly
b25tZW50KCkuY29tcHV0ZUJveGluZ1R5cGUoYXJndW1lbnRzW2ldKTsKIAkJCQkJfQotCQkJCQlu
ZXdBcmdzW2ldID0gZW52aXJvbm1lbnQoKS5jb21wdXRlQm94aW5nVHlwZShhcmd1bWVudHNbaV0p
OwogCQkJCX0KIAkJCX0KIAkJCWlmIChuZXdBcmdzICE9IG51bGwpCiAJCQkJYXJndW1lbnRzID0g
bmV3QXJnczsKLQkJCWVsc2UgIC8vIGVuc3VyZSB0aGF0IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9k
KCkgYmVsb3cgY2FuIHVwZGF0ZSBhcmd1bWVudHMgd2l0aG91dCBoYXJtaW5nIG91ciBjYWxsZXI6
IChUT0RPOiBhbHdheXMgY29weSBiZWZvcmUgdGhlIGxvb3A/IG9ubHkgaW4gMS44PykKLQkJCQlT
eXN0ZW0uYXJyYXljb3B5KGFyZ3VtZW50cywgMCwgYXJndW1lbnRzPW5ldyBUeXBlQmluZGluZ1th
cmdMZW5ndGhdLCAwLCBhcmdMZW5ndGgpOwogCQkJbWV0aG9kID0gUGFyYW1ldGVyaXplZEdlbmVy
aWNNZXRob2RCaW5kaW5nLmNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhvZCwgYXJndW1lbnRz
LCB0aGlzLCBpbnZvY2F0aW9uU2l0ZSk7CiAJCQlpZiAobWV0aG9kID09IG51bGwpIHJldHVybiBu
dWxsOyAvLyBpbmNvbXBhdGlibGUKIAkJCWlmICghbWV0aG9kLmlzVmFsaWRCaW5kaW5nKCkpIHJl
dHVybiBtZXRob2Q7IC8vIGJvdW5kIGNoZWNrIGlzc3VlIGlzIHRha2luZyBwcmVjZWRlbmNlCkBA
IC00MjMyLDcgKzQyMzIsNyBAQAogCQlpbnRbXSBjb21wYXRpYmlsaXR5TGV2ZWxzID0gbmV3IGlu
dFt2aXNpYmxlU2l6ZV07CiAJCWludCBjb21wYXRpYmxlQ291bnQgPSAwOwogCQlmb3IgKGludCBp
ID0gMDsgaSA8IHZpc2libGVTaXplOyBpKyspCi0JCQlpZiAoKGNvbXBhdGliaWxpdHlMZXZlbHNb
aV0gPSBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwodmlzaWJsZVtpXSwgYXJndW1lbnRUeXBl
cykpICE9IE5PVF9DT01QQVRJQkxFKSB7CisJCQlpZiAoKGNvbXBhdGliaWxpdHlMZXZlbHNbaV0g
PSBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwodmlzaWJsZVtpXSwgYXJndW1lbnRUeXBlcywg
aW52b2NhdGlvblNpdGUpKSAhPSBOT1RfQ09NUEFUSUJMRSkgewogCQkJCWlmIChpICE9IGNvbXBh
dGlibGVDb3VudCkgewogCQkJCQl2aXNpYmxlW2NvbXBhdGlibGVDb3VudF0gPSB2aXNpYmxlW2ld
OwogCQkJCQljb21wYXRpYmlsaXR5TGV2ZWxzW2NvbXBhdGlibGVDb3VudF0gPSBjb21wYXRpYmls
aXR5TGV2ZWxzW2ldOwpAQCAtNDI2NSw3ICs0MjY1LDYgQEAKIAkJCQlpbnQgbGV2ZWxqID0gY29t
cGF0aWJpbGl0eUxldmVsc1tqXTsKIAkJCQluZXh0SzogZm9yIChpbnQgayA9IDA7IGsgPCB2aXNp
YmxlU2l6ZTsgaysrKSB7CiAJCQkJCWlmIChqID09IGspIGNvbnRpbnVlOwotCQkJCQkvLyBUT0RP
IGRvIHdlIHdhbnQgdG8gY2hlY2sgZXhpc3RpbmcgaW5mZXJlbmNlIGNvbnRleHRzIHdoZXRoZXIg
dGhleSBjYW4gdGVsbCB1cyBiZXR0ZXIgYWJvdXQgdGhlIHVzZWQgaW5mZXJlbmNlS2luZD8KIAkJ
CQkJaW50IGxldmVsayA9IGNvbXBhdGliaWxpdHlMZXZlbHNba107CiAJCQkJCWlmIChsZXZlbGog
PiAtMSAmJiBsZXZlbGsgPiAtMSAmJiBsZXZlbGogIT0gbGV2ZWxrKSB7CiAJCQkJCQlpZiAobGV2
ZWxqIDwgbGV2ZWxrKQpAQCAtNDU3Niw2ICs0NTc1LDUxIEBACiAJCX0gd2hpbGUgKHNjb3BlICE9
IG51bGwpOwogCQlyZXR1cm4gbGFzdE1ldGhvZFNjb3BlOyAvLyBtYXkgYW5zd2VyIG51bGwgaWYg
bm8gbWV0aG9kIGFyb3VuZAogCX0KKwkKKwkvLyBWZXJzaW9uIHRoYXQganVzdCBhbnN3ZXJzIGJh
c2VkIG9uIGluZmVyZW5jZSBraW5kIChhdCAxLjgrKSB3aGVuIGF2YWlsYWJsZS4KKwlwdWJsaWMg
aW50IHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChNZXRob2RCaW5kaW5nIG1ldGhvZCwgVHlw
ZUJpbmRpbmdbXSBhcmd1bWVudHMsIEludm9jYXRpb25TaXRlIHNpdGUpIHsKKwkJaWYgKGNvbXBp
bGVyT3B0aW9ucygpLnNvdXJjZUxldmVsID49IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzggJiYg
bWV0aG9kIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7CisJ
CQlpbnQgaW5mZXJlbmNlS2luZCA9IEluZmVyZW5jZUNvbnRleHQxOC5DSEVDS19VTktOT1dOOwor
CQkJSW5mZXJlbmNlQ29udGV4dDE4IGNvbnRleHQgPSBudWxsOworCQkJaWYgKHNpdGUgaW5zdGFu
Y2VvZiBJbnZvY2F0aW9uKSB7CisJCQkJSW52b2NhdGlvbiBpbnZvY2F0aW9uID0gKEludm9jYXRp
b24pIHNpdGU7CisJCQkJY29udGV4dCA9IGludm9jYXRpb24uZ2V0SW5mZXJlbmNlQ29udGV4dCgo
UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSBtZXRob2QpOworCQkJCWlmIChjb250
ZXh0ICE9IG51bGwpCisJCQkJCWluZmVyZW5jZUtpbmQgPSBjb250ZXh0LmluZmVyZW5jZUtpbmQ7
CisJCQl9IGVsc2UgaWYgKHNpdGUgaW5zdGFuY2VvZiBSZWZlcmVuY2VFeHByZXNzaW9uKSB7CisJ
CQkJaW5mZXJlbmNlS2luZCA9ICgoUmVmZXJlbmNlRXhwcmVzc2lvbikgc2l0ZSkuaW5mZXJlbmNl
S2luZDsKKwkJCX0KKwkJCS8qIDEuOCsgUG9zdCBpbmZlcmVuY2UgY29tcGF0aWJpbGl0eSBjaGVj
ayBwb2xpY3k6IEZvciBub24tZnVuY3Rpb25hbC10eXBlIGFyZ3VtZW50cywgdHJ1c3QgaW5mZXJl
bmNlLiBGb3IgZnVuY3Rpb25hbCB0eXBlIGFyZ3VtZW50cyBhcHBseSBjb21wYXRpYmlsaXR5IGNo
ZWNrcyBhcyBpbmZlcmVuY2UKKwkJCSAgIGVuZ2luZSBtYXkgbm90IGhhdmUgY2hlY2tlZCBhcmd1
bWVudHMgdGhhdCBhcmUgbm90IHBlcnRpbmVudCB0byBhcHBsaWNhYmlsaXR5LiBPbmUgY29tcGxp
Y2F0aW9uIHRvIGRlYWwgd2l0aCBpcyB3aGVuIHRoZSBnZW5lcmljIG1ldGhvZCdzIHBhcmFtZXRl
ciBpcyBpdHMgb3duIHR5cGUgdmFyaWFibGUgCisJCQkgICBhbmQgb25seSBhcHBsaWNhYmlsaXR5
IHdhcyBpbmZlcnJlZCBhbmQgYXBwbGljYWJpbGl0eSBpbmZlcmVuY2UgaW5zdGFudGlhdGVkIGl0
IHdpdGggamxPIGR1ZSB0byBsYWNrIG9mIHVwcGVyIGJvdW5kcyBpbiB0aGUgYm91bmQgc2V0Lgor
CQkJKi8KKwkJCWlmIChzaXRlIGluc3RhbmNlb2YgSW52b2NhdGlvbiAmJiBjb250ZXh0ICE9IG51
bGwpIHsgLy8gdGhpcyBibG9jayBjYW4gYmUgcmVhZGlseSBzZWVuIHRvIGJlIG5vdCByZWxldmFu
dCBmb3IgcmVmZXJlbmNlIGV4cHJlc3Npb25zCisJCQkJTWV0aG9kQmluZGluZyBzaGFsbG93T3Jp
Z2luYWwgPSBtZXRob2Quc2hhbGxvd09yaWdpbmFsKCk7CisJCQkJZm9yIChpbnQgaSA9IDAsIGxl
bmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgeworCQkJCQlUeXBlQmlu
ZGluZyBhcmd1bWVudCA9IGFyZ3VtZW50c1tpXTsKKwkJCQkJaWYgKCFhcmd1bWVudC5pc0Z1bmN0
aW9uYWxUeXBlKCkpCisJCQkJCQljb250aW51ZTsKKwkJCQkJVHlwZUJpbmRpbmcgcGFyYW1ldGVy
ID0gSW5mZXJlbmNlQ29udGV4dDE4LmdldFBhcmFtZXRlcihtZXRob2QucGFyYW1ldGVycywgaSwg
Y29udGV4dC5pc1ZhckFyZ3MoKSk7CisJCQkJCWlmIChhcmd1bWVudC5pc0NvbXBhdGlibGVXaXRo
KHBhcmFtZXRlciwgdGhpcykpCisJCQkJCQljb250aW51ZTsKKwkJCQkJVHlwZUJpbmRpbmcgc2hh
bGxvd1BhcmFtZXRlciA9IEluZmVyZW5jZUNvbnRleHQxOC5nZXRQYXJhbWV0ZXIoc2hhbGxvd09y
aWdpbmFsLnBhcmFtZXRlcnMsIGksIGNvbnRleHQuaXNWYXJBcmdzKCkpOworCQkJCQlpZiAoc2hh
bGxvd1BhcmFtZXRlci5pc1BlcnRpbmVudFRvQXBwbGljYWJpbGl0eShhcmd1bWVudCwgc2hhbGxv
d09yaWdpbmFsKSkKKwkJCQkJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKKwkJCQl9CisJCQl9CisJ
CQlzd2l0Y2ggKGluZmVyZW5jZUtpbmQpIHsKKwkJCQljYXNlIEluZmVyZW5jZUNvbnRleHQxOC5D
SEVDS19TVFJJQ1Q6CisJCQkJCXJldHVybiBDT01QQVRJQkxFOworCQkJCWNhc2UgSW5mZXJlbmNl
Q29udGV4dDE4LkNIRUNLX0xPT1NFOgorCQkJCQlyZXR1cm4gQVVUT0JPWF9DT01QQVRJQkxFOwor
CQkJCWNhc2UgSW5mZXJlbmNlQ29udGV4dDE4LkNIRUNLX1ZBUkFSRzoKKwkJCQkJcmV0dXJuIFZB
UkFSR1NfQ09NUEFUSUJMRTsKKwkJCQlkZWZhdWx0OgorCQkJCQlicmVhazsKKwkJCQl9CisJCX0K
KwkJcmV0dXJuIHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChtZXRob2QsIGFyZ3VtZW50cywg
ZmFsc2UpOworCX0KIAogCXB1YmxpYyBpbnQgcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKE1l
dGhvZEJpbmRpbmcgbWV0aG9kLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50cykgewogCQlyZXR1cm4g
cGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKG1ldGhvZCwgYXJndW1lbnRzLCBmYWxzZSk7CmRp
ZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1R5cGVCaW5kaW5nLmphdmEgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3Vw
L1R5cGVCaW5kaW5nLmphdmEKaW5kZXggNDhhYWJkNi4uNWNmY2JmNCAxMDA2NDQKLS0tIGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2xvb2t1cC9UeXBlQmluZGluZy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvVHlwZUJpbmRp
bmcuamF2YQpAQCAtNDQxLDYgKzQ0MSwxNiBAQAogCQkJCQl9CiAJCQkJfQogCQkJfQorCQkJYnJl
YWs7CisJCWNhc2UgQmluZGluZy5JTlRFUlNFQ1RJT05fQ0FTVF9UWVBFOgorCQkJSW50ZXJzZWN0
aW9uQ2FzdFR5cGVCaW5kaW5nIGljdGIgPSAoSW50ZXJzZWN0aW9uQ2FzdFR5cGVCaW5kaW5nKSB0
aGlzOworCQkJUmVmZXJlbmNlQmluZGluZ1tdIGludGVyc2VjdGluZ1R5cGVzID0gaWN0Yi5nZXRJ
bnRlcnNlY3RpbmdUeXBlcygpOworCQkJZm9yIChpbnQgaSA9IDAsIGxlbmd0aCA9IGludGVyc2Vj
dGluZ1R5cGVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7CisJCQkJVHlwZUJpbmRpbmcgc3Vw
ZXJUeXBlID0gaW50ZXJzZWN0aW5nVHlwZXNbaV0uZmluZFN1cGVyVHlwZU9yaWdpbmF0aW5nRnJv
bShvdGhlclR5cGUpOworCQkJCWlmIChzdXBlclR5cGUgIT0gbnVsbCkKKwkJCQkJcmV0dXJuIHN1
cGVyVHlwZTsKKwkJCX0KKwkJCWJyZWFrOwogCX0KIAlyZXR1cm4gbnVsbDsKIH0=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>248211</attachid>
            <date>2014-10-27 13:50:00 -0400</date>
            <delta_ts>2014-10-27 13:50:29 -0400</delta_ts>
            <desc>Revised patch interning ICTBs</desc>
            <filename>threefixes.patch</filename>
            <type>text/plain</type>
            <size>28073</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9v
cmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVn
cmVzc2lvblRlc3QuamF2YQppbmRleCBkMTYyYTVmLi5jZGIxMjJlIDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25UZXN0LmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pk
dC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVzdC5q
YXZhCkBAIC01NDgxLDkgKzU0ODEsOCBAQAogCQkgICAiIik7CiB9CiAvLyBodHRwczovL2J1Z3Mu
ZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDQzNTk2LCBbMS44XVtjb21waWxlcl0g
RmFpbHVyZSBmb3Igb3ZlcmxvYWQgcmVzb2x1dGlvbiBpbiBjYXNlIG9mIEdlbmVyaWNzIGFuZCBW
YXJhZ3MgCi1wdWJsaWMgdm9pZCBfdGVzdDQ0MzU5NigpIHsKLQlpZiAodGhpcy5jb21wbGlhbmNl
TGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNykKLQkJdGhpcy5ydW5OZWdhdGl2ZVRl
c3QoCitwdWJsaWMgdm9pZCB0ZXN0NDQzNTk2KCkgeworCXRoaXMucnVuTmVnYXRpdmVUZXN0KAog
CQkgICBuZXcgU3RyaW5nW10gewogCQkJICAgIlguamF2YSIsCiAJCQkgICAicHVibGljIGZpbmFs
IGNsYXNzIFgge1xuIiArCkBAIC01NDk3LDYgKzU0OTYsOCBAQAogCQkJICAgIiAgICB9XG4iICsK
IAkJCSAgICJ9XG4iLAogCQkgICB9LAorCQkgICB0aGlzLmNvbXBsaWFuY2VMZXZlbCA8IENsYXNz
RmlsZUNvbnN0YW50cy5KREsxXzcgPworCQkgICAiIiA6IAkgICAKIAkJICAgIi0tLS0tLS0tLS1c
biIgKyAKIAkJCSIxLiBXQVJOSU5HIGluIFguamF2YSAoYXQgbGluZSA0KVxuIiArIAogCQkJIglw
dWJsaWMgc3RhdGljIDxUPiBQcmVkaWNhdGU8VD4gYW5kKFByZWRpY2F0ZTw/IHN1cGVyIFQ+Li4u
IGFyZykgeyByZXR1cm4gbnVsbDsgfVxuIiArIApAQCAtNTY1Niw1ICs1NjU3LDg5IEBACiAJCQki
VHlwZSBzYWZldHk6IFBvdGVudGlhbCBoZWFwIHBvbGx1dGlvbiB2aWEgdmFyYXJncyBwYXJhbWV0
ZXIgd29ya2Vyc1xuIiArIAogCQkJIi0tLS0tLS0tLS1cbiIpOwogfQorLy8gaHR0cHM6Ly9idWdz
LmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQ0ODc5NSwgWzEuOF1bY29tcGlsZXJd
IEluZmVyZW5jZSBzaG91bGQgZGlzY3JpbWluYXRlIGJldHdlZW4gc3RyaWN0IGFuZCBsb29zZSBt
b2RlcyAgIAorcHVibGljIHZvaWQgdGVzdDQ0ODc5NSgpIHsKKwkJdGhpcy5ydW5OZWdhdGl2ZVRl
c3QoCisJCSAgIG5ldyBTdHJpbmdbXSB7CisJCQkgICAiWC5qYXZhIiwKKwkJCSAgICJwdWJsaWMg
Y2xhc3MgWDxUPiB7XG4iICsKKwkJCSAgICIJc3RhdGljIDxUPiBUIGVsZW1lbnQoVCBbXSB0YSkg
e1xuIiArCisJCQkgICAiCQlyZXR1cm4gdGFbMF07XG4iICsKKwkJCSAgICIJfVxuIiArCisJCQkg
ICAiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKworCQkJICAg
IgkJaW50IHggPSBlbGVtZW50KG5ldyBpbnQgW10geyAxMjM0IH0pO1xuIiArICAvLyBjaGVjayB0
aGF0IGF1dG9ib3hpbmcgZG9lcyBub3Qga2ljayBpbiBmb3IgYXJyYXlzLCBpLmUgZW5naW5lIHNo
b3VsZCBub3Qgc2xpcCBpbnRvIGxvb3NlIG1vZGUuCisJCQkgICAiCX1cbiIgKworCQkJICAgIn1c
biIsCisJCSAgIH0sCisJCSAgICItLS0tLS0tLS0tXG4iICsgCisJCQkiMS4gRVJST1IgaW4gWC5q
YXZhIChhdCBsaW5lIDYpXG4iICsgCisJCQkiCWludCB4ID0gZWxlbWVudChuZXcgaW50IFtdIHsg
MTIzNCB9KTtcbiIgKyAKKwkJCSIJICAgICAgICBeXl5eXl5eXG4iICsgCisJCQkiVGhlIG1ldGhv
ZCBlbGVtZW50KFRbXSkgaW4gdGhlIHR5cGUgWDxUPiBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhl
IGFyZ3VtZW50cyAoaW50W10pXG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIik7Cit9CisvLyBodHRw
czovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDQ4Nzk1LCBbMS44XVtj
b21waWxlcl0gSW5mZXJlbmNlIHNob3VsZCBkaXNjcmltaW5hdGUgYmV0d2VlbiBzdHJpY3QgYW5k
IGxvb3NlIG1vZGVzICAgCitwdWJsaWMgdm9pZCB0ZXN0NDQ4Nzk1YSgpIHsKKwkJdGhpcy5ydW5D
b25mb3JtVGVzdCgKKwkJICAgbmV3IFN0cmluZ1tdIHsKKwkJCSAgICJYLmphdmEiLAorCQkJICAg
InB1YmxpYyBjbGFzcyBYPFQ+IHtcbiIgKworCQkJICAgIglzdGF0aWMgPFQ+IFQgZWxlbWVudChp
bnQgeCwgVCB0KSB7XG4iICsKKwkJCSAgICIJCVN5c3RlbS5vdXQucHJpbnRsbihcIlN0cmljdFwi
KTtcbiIgKworCQkJICAgIgkJcmV0dXJuIHQ7XG4iICsKKwkJCSAgICIJfVxuIiArCisJCQkgICAi
CXN0YXRpYyA8VD4gVCBlbGVtZW50KFQgdDEsIFQgdDIpIHtcbiIgKworCQkJICAgIgkJU3lzdGVt
Lm91dC5wcmludGxuKFwiTG9vc2VcIik7XG4iICsKKwkJCSAgICIJCXJldHVybiB0MjtcbiIgKwor
CQkJICAgIgl9XG4iICsKKwkJCSAgICIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10g
YXJncykge1xuIiArCisJCQkgICAiCQlpbnQgeCA9IGVsZW1lbnQoMTAsIG5ldyBJbnRlZ2VyKDIw
KSk7XG4iICsKKwkJCSAgICIJfVxuIiArCisJCQkgICAifVxuIiwKKwkJICAgfSwKKwkJICAgIlN0
cmljdCIpOworfQorLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dp
P2lkPTQ0ODc5NSwgWzEuOF1bY29tcGlsZXJdIEluZmVyZW5jZSBzaG91bGQgZGlzY3JpbWluYXRl
IGJldHdlZW4gc3RyaWN0IGFuZCBsb29zZSBtb2RlcyAgIAorcHVibGljIHZvaWQgdGVzdDQ0ODc5
NWIoKSB7CisJCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCSAgIG5ldyBTdHJpbmdbXSB7CisJCQkg
ICAiWC5qYXZhIiwKKwkJCSAgICJwdWJsaWMgY2xhc3MgWDxUPiB7XG4iICsKKwkJCSAgICIJc3Rh
dGljIGludCBlbGVtZW50KGludCB4LCBJbnRlZ2VyIHQpIHtcbiIgKworCQkJICAgIgkJU3lzdGVt
Lm91dC5wcmludGxuKFwibm9uLWdlbmVyaWNcIik7XG4iICsKKwkJCSAgICIJCXJldHVybiB0O1xu
IiArCisJCQkgICAiCX1cbiIgKworCQkJICAgIglzdGF0aWMgPFQ+IFQgZWxlbWVudChpbnQgdDEs
IFQgdDIpIHtcbiIgKworCQkJICAgIgkJU3lzdGVtLm91dC5wcmludGxuKFwiZ2VuZXJpY1wiKTtc
biIgKworCQkJICAgIgkJcmV0dXJuIHQyO1xuIiArCisJCQkgICAiCX1cbiIgKworCQkJICAgIglw
dWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsKKwkJCSAgICIJCWlu
dCB4ID0gZWxlbWVudCgxMCwgbmV3IEludGVnZXIoMjApKTtcbiIgKworCQkJICAgIgl9XG4iICsK
KwkJCSAgICJ9XG4iLAorCQkgICB9LAorCQkgICAibm9uLWdlbmVyaWMiKTsKK30KKy8vIGh0dHBz
Oi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00NDg3OTUsIFsxLjhdW2Nv
bXBpbGVyXSBJbmZlcmVuY2Ugc2hvdWxkIGRpc2NyaW1pbmF0ZSBiZXR3ZWVuIHN0cmljdCBhbmQg
bG9vc2UgbW9kZXMgICAKK3B1YmxpYyB2b2lkIHRlc3Q0NDg3OTVjKCkgeworCQl0aGlzLnJ1bkNv
bmZvcm1UZXN0KAorCQkgICBuZXcgU3RyaW5nW10geworCQkJICAgIlguamF2YSIsCisJCQkgICAi
cHVibGljIGNsYXNzIFg8VD4ge1xuIiArCisJCQkgICAiCXN0YXRpYyBpbnQgZWxlbWVudChJbnRl
Z2VyIHgsIEludGVnZXIgdCkge1xuIiArCisJCQkgICAiCQlTeXN0ZW0ub3V0LnByaW50bG4oXCJu
b24tZ2VuZXJpY1wiKTtcbiIgKworCQkJICAgIgkJcmV0dXJuIHQ7XG4iICsKKwkJCSAgICIJfVxu
IiArCisJCQkgICAiCXN0YXRpYyA8VD4gVCBlbGVtZW50KGludCB0MSwgVCB0Mikge1xuIiArCisJ
CQkgICAiCQlTeXN0ZW0ub3V0LnByaW50bG4oXCJnZW5lcmljXCIpO1xuIiArCisJCQkgICAiCQly
ZXR1cm4gdDI7XG4iICsKKwkJCSAgICIJfVxuIiArCisJCQkgICAiCXB1YmxpYyBzdGF0aWMgdm9p
ZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKworCQkJICAgIgkJaW50IHggPSBlbGVtZW50KDEw
LCBuZXcgSW50ZWdlcigyMCkpO1xuIiArCisJCQkgICAiCX1cbiIgKworCQkJICAgIn1cbiIsCisJ
CSAgIH0sCisJCSAgICJnZW5lcmljIik7Cit9CiB9CiAKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9j
b21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3RfMV84LmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25UZXN0XzFfOC5qYXZh
CmluZGV4IGY1NTQyZmYuLjg2YTlmOTAgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
LnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9y
ZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3RfMV84LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3Rz
L2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVzdF8xXzguamF2YQpAQCAt
NDc2Nyw0ICs0NzY3LDI5IEBACiAJCX0sIAogCQkiIik7CiB9CisvLyBodHRwczovL2J1Z3MuZWNs
aXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDQ3NzY3LCBbMS44XVtjb21waWxlcl0gU3B1
cmlvdXMgbWV0aG9kIG5vdCBhcHBsaWNhYmxlIGVycm9yIGR1ZSB0byBpbnRlcmFjdGlvbiBiZXR3
ZWVuIG92ZXJsb2FkIHJlc29sdXRpb24gYW5kIHR5cGUgaW5mZXJlbmNlCitwdWJsaWMgdm9pZCB0
ZXN0NDQ3NzY3KCkgeworCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJ
CQkiWC5qYXZhIiwKKwkJCSJpbnRlcmZhY2UgSSB7XG4iICsKKwkJCSIJdm9pZCBiYXIoU3RyaW5n
IHQpO1xuIiArCisJCQkifVxuIiArCisJCQkicHVibGljIGNsYXNzIFg8VD4ge1xuIiArCisJCQki
CVgoU3RyaW5nIHgpIHt9XG4iICsKKwkJCSIJWChUIHgpIHsgXG4iICsKKwkJCSIJCVN5c3RlbS5v
dXQucHJpbnRsbihcIkhlcmVcIik7XG4iICsKKwkJCSIJfVxuIiArCisJCQkiCVgoVCB4LCBTdHJp
bmcgLi4uc3RyaW5ncykge31cbiIgKworCQkJIglwdWJsaWMgdm9pZCBvbmUoWDxJPiBjKXt9XG4i
ICsKKwkJCSIJcHVibGljIHZvaWQgdHdvKCkge1xuIiArCisJCQkiCQlvbmUobmV3IFg8PigoU3Ry
aW5nIHMpIC0+IHsgfSkpO1xuIiArCisJCQkiCX1cbiIgKworCQkJIglwdWJsaWMgc3RhdGljIHZv
aWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsKKwkJCSIJCW5ldyBYKFwiXCIpLnR3bygpO1xu
IiArCisJCQkiCX1cbiIgKworCQkJIn1cbiIsCisJCX0sIAorCQkiSGVyZSIpOworfQogfQpkaWZm
IC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xp
cHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhUmVncmVzc2lvblRl
c3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0xhbWJkYVJlZ3Jlc3Npb25U
ZXN0LmphdmEKaW5kZXggMDcyZmQwYy4uOTYyM2RmOSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Nv
bXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhUmVncmVzc2lvblRlc3QuamF2YQorKysgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVz
dHMvY29tcGlsZXIvcmVncmVzc2lvbi9MYW1iZGFSZWdyZXNzaW9uVGVzdC5qYXZhCkBAIC0xOTEs
NyArMTkxLDE0NyBAQAogCSJjYXNlMjogUnVubmFibGVcbiIgKyAKIAkiY2FzZTI6IFJ1bm5hYmxl
Iik7CiB9CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9
NDQ3NzY3LCBbMS44XVtjb21waWxlcl0gU3B1cmlvdXMgbWV0aG9kIG5vdCBhcHBsaWNhYmxlIGVy
cm9yIGR1ZSB0byBpbnRlcmFjdGlvbiBiZXR3ZWVuIG92ZXJsb2FkIHJlc29sdXRpb24gYW5kIHR5
cGUgaW5mZXJlbmNlIAorcHVibGljIHZvaWQgdGVzdDQ0Nzc2NygpIHsKKwl0aGlzLnJ1bkNvbmZv
cm1UZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJIlguamF2YSIsIAorCQkJImludGVyZmFjZSBJ
PFQsIFUsIFY+IHtcbiIgKworCQkJIglUIGdvbyhVIHUsIFYgdik7XG4iICsKKwkJCSJ9XG4iICsK
KwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCSIJc3RhdGljIDxULCBVLCBWPiBUIGZvbyhU
IHQsIFUgdSwgViB2KSB7XG4iICsKKwkJCSIgICAgICAgU3lzdGVtLm91dC5wcmludGxuKFwiV3Jv
bmchXCIpO1xuIiArCisJCQkiICAgICAgIHJldHVybiBudWxsO1xuIiArCisJCQkiICAgfVxuIiAr
CisJCQkiCXN0YXRpYyA8VCwgVSwgVj4gViBmb28oVCB0LCBVIHUsIEk8VCwgVSwgVj4gaSkge1xu
IiArCisJCQkiCQlTeXN0ZW0ub3V0LnByaW50bG4oXCJSaWdodCFcIik7XG4iICsKKwkJCSIgICAg
ICAgcmV0dXJuIG51bGw7XG4iICsKKwkJCSIJfVxuIiArCisJCQkiCXB1YmxpYyBzdGF0aWMgdm9p
ZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKworCQkJIgkJU3RyaW5nIHMgPSBnb28oZm9vKFwi
U3RyaW5nXCIsIFwiU3RyaW5nXCIsICh1LCB2KSAtPiB2KSk7XG4iICsKKwkJCSIJfVxuIiArCisJ
CQkiCXN0YXRpYyA8VD4gVCBnb28oVCB0KSB7XG4iICsKKwkJCSIJICAgIHJldHVybiB0OwlcbiIg
KworCQkJIgl9XG4iICsKKwkJCSJ9XG4iCisJfSwKKwkiUmlnaHQhIik7Cit9CisvLyBodHRwczov
L2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDQ3NzY3LCBbMS44XVtjb21w
aWxlcl0gU3B1cmlvdXMgbWV0aG9kIG5vdCBhcHBsaWNhYmxlIGVycm9yIGR1ZSB0byBpbnRlcmFj
dGlvbiBiZXR3ZWVuIG92ZXJsb2FkIHJlc29sdXRpb24gYW5kIHR5cGUgaW5mZXJlbmNlIAorcHVi
bGljIHZvaWQgdGVzdDQ0Nzc2N2EoKSB7CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBT
dHJpbmdbXSB7CisJCQkiWC5qYXZhIiwgCisJCQkiaW50ZXJmYWNlIEk8VCwgVSwgVj4ge1xuIiAr
CisJCQkiCVQgZ29vKFUgdSwgViB2KTtcbiIgKworCQkJIn1cbiIgKworCQkJInB1YmxpYyBjbGFz
cyBYIHtcbiIgKworCQkJIglzdGF0aWMgPFQsIFUsIFY+IFQgZm9vKFQgdCwgVSB1LCBJPFQsIFUs
IFY+IGkpIHtcbiIgKworCQkJIgkJcmV0dXJuIG51bGw7XG4iICsKKwkJCSIJfVxuIiArCisJCQki
CXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKworCQkJIgkJU3Ry
aW5nIHMgPSBnb28oZm9vKFwiU3RyaW5nXCIsIFwiU3RyaW5nXCIsICh1LCB2KSAtPiB2KSk7XG4i
ICsKKwkJCSIJfVxuIiArCisJCQkiCXN0YXRpYyA8VD4gVCBnb28oVCB0KSB7XG4iICsKKwkJCSIJ
ICAgIHJldHVybiB0OwlcbiIgKworCQkJIgl9XG4iICsKKwkJCSJ9XG4iCisJfSwKKwkiLS0tLS0t
LS0tLVxuIiArIAorCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgOSlcbiIgKyAKKwkiCVN0
cmluZyBzID0gZ29vKGZvbyhcIlN0cmluZ1wiLCBcIlN0cmluZ1wiLCAodSwgdikgLT4gdikpO1xu
IiArIAorCSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
IF5cbiIgKyAKKwkiVHlwZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBPYmplY3QgdG8g
U3RyaW5nXG4iICsgCisJIi0tLS0tLS0tLS1cbiIpOworfQorLy8gaHR0cHM6Ly9idWdzLmVjbGlw
c2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQ0Nzc2NywgWzEuOF1bY29tcGlsZXJdIFNwdXJp
b3VzIG1ldGhvZCBub3QgYXBwbGljYWJsZSBlcnJvciBkdWUgdG8gaW50ZXJhY3Rpb24gYmV0d2Vl
biBvdmVybG9hZCByZXNvbHV0aW9uIGFuZCB0eXBlIGluZmVyZW5jZSAKK3B1YmxpYyB2b2lkIHRl
c3Q0NDc3NjdiKCkgeworCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJ
CQkiWC5qYXZhIiwgCisJCQkiaW50ZXJmYWNlIEk8VCwgVSwgVj4ge1xuIiArCisJCQkiCVQgZ29v
KFUgdSwgViB2KTtcbiIgKworCQkJIn1cbiIgKworCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKwor
CQkJIglzdGF0aWMgU3RyaW5nIGdvbyhTdHJpbmcgcywgU3RyaW5nIHMyKSB7XG4iICsKKwkJCSIJ
CXJldHVybiBudWxsO1xuIiArCisJCQkiCX1cbiIgKworCQkJIglzdGF0aWMgPFQsIFUsIFY+IFYg
Zm9vKFQgdCwgVSB1LCBJPFQsIFUsIFY+IGkpIHtcbiIgKworCQkJIgkJU3lzdGVtLm91dC5wcmlu
dGxuKFwiUmlnaHQhXCIpO1xuIiArCisJCQkiCQlyZXR1cm4gbnVsbDtcbiIgKworCQkJIgl9XG4i
ICsKKwkJCSIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuIiArCisJ
CQkiCQlTdHJpbmcgcyA9IGdvbyhmb28oXCJTdHJpbmdcIiwgXCJTdHJpbmdcIiwgWDo6Z29vKSk7
XG4iICsKKwkJCSIJfVxuIiArCisJCQkiCXN0YXRpYyA8VD4gVCBnb28oVCB0KSB7XG4iICsKKwkJ
CSIJICAgIHJldHVybiB0OwlcbiIgKworCQkJIgl9XG4iICsKKwkJCSJ9XG4iCisJfSwKKwkiUmln
aHQhIik7Cit9CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/
aWQ9NDQ3NzY3LCBbMS44XVtjb21waWxlcl0gU3B1cmlvdXMgbWV0aG9kIG5vdCBhcHBsaWNhYmxl
IGVycm9yIGR1ZSB0byBpbnRlcmFjdGlvbiBiZXR3ZWVuIG92ZXJsb2FkIHJlc29sdXRpb24gYW5k
IHR5cGUgaW5mZXJlbmNlIAorcHVibGljIHZvaWQgdGVzdDQ0Nzc2N2MoKSB7CisJdGhpcy5ydW5D
b25mb3JtVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJYLmphdmEiLCAKKwkJCSJpbnRlcmZh
Y2UgSTxULCBVLCBWPiB7XG4iICsKKwkJCSIJVCBnb28oVSB1LCBWIHYpO1xuIiArCisJCQkifVxu
IiArCisJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkiCXN0YXRpYyBTdHJpbmcgZ29vKFN0
cmluZyBzLCBTdHJpbmcgczIpIHtcbiIgKworCQkJIgkJcmV0dXJuIG51bGw7XG4iICsKKwkJCSIJ
fVxuIiArCisJCQkiCXN0YXRpYyA8VCwgVSwgVj4gVCBmb28oVCB0LCBVIHUsIFYgdikge1xuIiAr
CisJCQkiICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihcIldyb25nIVwiKTtcbiIgKworCQkJIiAg
ICAgICByZXR1cm4gbnVsbDtcbiIgKworCQkJIiAgIH1cbiIgKworCQkJIglzdGF0aWMgPFQsIFUs
IFY+IFYgZm9vKFQgdCwgVSB1LCBJPFQsIFUsIFY+IGkpIHtcbiIgKworCQkJIgkJU3lzdGVtLm91
dC5wcmludGxuKFwiUmlnaHQhXCIpO1xuIiArCisJCQkiCQlyZXR1cm4gbnVsbDtcbiIgKworCQkJ
Igl9XG4iICsKKwkJCSIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xu
IiArCisJCQkiCQlTdHJpbmcgcyA9IGdvbyhmb28oXCJTdHJpbmdcIiwgXCJTdHJpbmdcIiwgWDo6
Z29vKSk7XG4iICsKKwkJCSIJfVxuIiArCisJCQkiCXN0YXRpYyA8VD4gVCBnb28oVCB0KSB7XG4i
ICsKKwkJCSIJICAgIHJldHVybiB0OwlcbiIgKworCQkJIgl9XG4iICsKKwkJCSJ9XG4iCisJfSwK
KwkiUmlnaHQhIik7Cit9CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1
Zy5jZ2k/aWQ9NDQ3NzY3LCBbMS44XVtjb21waWxlcl0gU3B1cmlvdXMgbWV0aG9kIG5vdCBhcHBs
aWNhYmxlIGVycm9yIGR1ZSB0byBpbnRlcmFjdGlvbiBiZXR3ZWVuIG92ZXJsb2FkIHJlc29sdXRp
b24gYW5kIHR5cGUgaW5mZXJlbmNlIAorcHVibGljIHZvaWQgdGVzdDQ0Nzc2N2QoKSB7CisJdGhp
cy5ydW5Db25mb3JtVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJYLmphdmEiLCAKKwkJCSJp
bnRlcmZhY2UgSTxULCBVLCBWPiB7XG4iICsKKwkJCSIJVCBnb28oVSB1LCBWIHYpO1xuIiArCisJ
CQkifVxuIiArCisJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkiCXN0YXRpYyBTdHJpbmcg
Z29vKFN0cmluZyBzLCBTdHJpbmcgczIpIHtcbiIgKworCQkJIgkJcmV0dXJuIG51bGw7XG4iICsK
KwkJCSIJfVxuIiArCisJCQkiCXN0YXRpYyA8VCwgVSwgVj4gVCBmb28oVCB0LCBVIHUsIFYgdikg
e1xuIiArCisJCQkiICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oXCJXcm9uZyFcIik7XG4iICsK
KwkJCSIgICAgICAgIHJldHVybiBudWxsO1xuIiArCisJCQkiICAgfVxuIiArCisJCQkiCXN0YXRp
YyA8VCwgVSwgVj4gViBmb28oVCB0LCBVIHUsIEk8VCwgVSwgVj4gaSkge1xuIiArCisJCQkiCQlT
eXN0ZW0ub3V0LnByaW50bG4oXCJSaWdodCFcIik7XG4iICsKKwkJCSIJCXJldHVybiBudWxsO1xu
IiArCisJCQkiCX1cbiIgKworCQkJIglwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBh
cmdzKSB7XG4iICsKKwkJCSIJCVN0cmluZyBzID0gZ29vKGZvbyhcIlN0cmluZ1wiLCBcIlN0cmlu
Z1wiLCBYOjpnb28pKTtcbiIgKworCQkJIgl9XG4iICsKKwkJCSIJc3RhdGljIDxUPiBUIGdvbyhU
IHQpIHtcbiIgKworCQkJIgkgICAgcmV0dXJuIHQ7CVxuIiArCisJCQkiCX1cbiIgKworCQkJIn1c
biIKKwl9LAorCSJSaWdodCEiKTsKK30KIHB1YmxpYyBzdGF0aWMgQ2xhc3MgdGVzdENsYXNzKCkg
ewogCXJldHVybiBMYW1iZGFSZWdyZXNzaW9uVGVzdC5jbGFzczsKIH0KLX0KK30KXCBObyBuZXds
aW5lIGF0IGVuZCBvZiBmaWxlCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0JvdW5kU2V0Lmph
dmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvbG9va3VwL0JvdW5kU2V0LmphdmEKaW5kZXggZDA1YzBkYi4uOTg2MGQwOCAx
MDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Cb3VuZFNldC5qYXZhCisrKyBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29r
dXAvQm91bmRTZXQuamF2YQpAQCAtNjU2LDcgKzY1Niw3IEBACiAJCQkJCQkJCQkJUmVmZXJlbmNl
QmluZGluZ1tdIGFsbEJvdW5kcyA9IG5ldyBSZWZlcmVuY2VCaW5kaW5nW25dOwogCQkJCQkJCQkJ
CWFsbEJvdW5kc1swXSA9IChSZWZlcmVuY2VCaW5kaW5nKSBiaTE7IC8vIFRPRE8gaXMgdGhpcyBz
YWZlPwogCQkJCQkJCQkJCVN5c3RlbS5hcnJheWNvcHkob3RoZXJCb3VuZHMsIDAsIGFsbEJvdW5k
cywgMSwgbi0xKTsKLQkJCQkJCQkJCQliaSA9IG5ldyBJbnRlcnNlY3Rpb25DYXN0VHlwZUJpbmRp
bmcoYWxsQm91bmRzLCBjb250ZXh0LmVudmlyb25tZW50KTsKKwkJCQkJCQkJCQliaSA9IGNvbnRl
eHQuZW52aXJvbm1lbnQuY3JlYXRlSW50ZXJzZWN0aW9uQ2FzdFR5cGUoYWxsQm91bmRzKTsKIAkJ
CQkJCQkJCX0KIAkJCQkJCQkJCWFkZFR5cGVCb3VuZHNGcm9tV2lsZGNhcmRCb3VuZChjb250ZXh0
LCB0aGV0YSwgd2lsZGNhcmRCaW5kaW5nLmJvdW5kS2luZCwgdCwgciwgYmkpOwogCQkJCQkJCQkJ
Ly8JCQkJCQkJCQkJaWYgKG90aGVyQm91bmRzICE9IG51bGwpIHsKZGlmZiAtLWdpdCBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9sb29rdXAvQ2FwdHVyZUJpbmRpbmcxOC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9DYXB0dXJlQmlu
ZGluZzE4LmphdmEKaW5kZXggYjc0Mzk0Mi4uZTNhMzFkNyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xv
b2t1cC9DYXB0dXJlQmluZGluZzE4LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9DYXB0dXJlQmlu
ZGluZzE4LmphdmEKQEAgLTkyLDcgKzkyLDcgQEAKIAkJCX0KIAkJCWlmICghbXVsdGlwbGVFcmFz
dXJlcykKIAkJCQlyZXR1cm4gZXJhc3VyZXNbMF07Ci0JCQlyZXR1cm4gbmV3IEludGVyc2VjdGlv
bkNhc3RUeXBlQmluZGluZyhlcmFzdXJlcywgdGhpcy5lbnZpcm9ubWVudCk7CisJCQlyZXR1cm4g
dGhpcy5lbnZpcm9ubWVudC5jcmVhdGVJbnRlcnNlY3Rpb25DYXN0VHlwZShlcmFzdXJlcyk7CiAJ
CX0KIAkJcmV0dXJuIHN1cGVyLmVyYXN1cmUoKTsKIAl9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9v
a3VwL0NvbnN0cmFpbnRUeXBlRm9ybXVsYS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50
VHlwZUZvcm11bGEuamF2YQppbmRleCBmZDk4ODQzLi40ZTc5OTRhIDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvbG9va3VwL0NvbnN0cmFpbnRUeXBlRm9ybXVsYS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAv
Q29uc3RyYWludFR5cGVGb3JtdWxhLmphdmEKQEAgLTY0LDEwICs2NCwxNCBAQAogCQkJCXJldHVy
biB0aGlzLmxlZnQuaXNDb21wYXRpYmxlV2l0aCh0aGlzLnJpZ2h0LCBpbmZlcmVuY2VDb250ZXh0
LnNjb3BlKSB8fCB0aGlzLmxlZnQuaXNCb3hpbmdDb21wYXRpYmxlV2l0aCh0aGlzLnJpZ2h0LCBp
bmZlcmVuY2VDb250ZXh0LnNjb3BlKSA/IFRSVUUgOiBGQUxTRTsKIAkJCX0KIAkJCWlmICh0aGlz
LmxlZnQuaXNQcmltaXRpdmVUeXBlKCkpIHsKKwkJCQlpZiAoaW5mZXJlbmNlQ29udGV4dC5pbmZl
cmVuY2VLaW5kID09IEluZmVyZW5jZUNvbnRleHQxOC5DSEVDS19TVFJJQ1QpCisJCQkJCWluZmVy
ZW5jZUNvbnRleHQuaW5mZXJlbmNlS2luZCA9IEluZmVyZW5jZUNvbnRleHQxOC5DSEVDS19MT09T
RTsKIAkJCQlUeXBlQmluZGluZyBzUHJpbWUgPSBpbmZlcmVuY2VDb250ZXh0LmVudmlyb25tZW50
LmNvbXB1dGVCb3hpbmdUeXBlKHRoaXMubGVmdCk7CiAJCQkJcmV0dXJuIENvbnN0cmFpbnRUeXBl
Rm9ybXVsYS5jcmVhdGUoc1ByaW1lLCB0aGlzLnJpZ2h0LCBDT01QQVRJQkxFLCB0aGlzLmlzU29m
dCk7CiAJCQl9CiAJCQlpZiAodGhpcy5yaWdodC5pc1ByaW1pdGl2ZVR5cGUoKSkgeworCQkJCWlm
IChpbmZlcmVuY2VDb250ZXh0LmluZmVyZW5jZUtpbmQgPT0gSW5mZXJlbmNlQ29udGV4dDE4LkNI
RUNLX1NUUklDVCkKKwkJCQkJaW5mZXJlbmNlQ29udGV4dC5pbmZlcmVuY2VLaW5kID0gSW5mZXJl
bmNlQ29udGV4dDE4LkNIRUNLX0xPT1NFOwogCQkJCVR5cGVCaW5kaW5nIHRQcmltZSA9IGluZmVy
ZW5jZUNvbnRleHQuZW52aXJvbm1lbnQuY29tcHV0ZUJveGluZ1R5cGUodGhpcy5yaWdodCk7CiAJ
CQkJcmV0dXJuIENvbnN0cmFpbnRUeXBlRm9ybXVsYS5jcmVhdGUodGhpcy5sZWZ0LCB0UHJpbWUs
IFNBTUUsIHRoaXMuaXNTb2Z0KTsKIAkJCX0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvSW5m
ZXJlbmNlQ29udGV4dDE4LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVyZW5jZUNvbnRleHQxOC5q
YXZhCmluZGV4IDM3N2JkNTIuLjMwY2VlMTUgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvSW5m
ZXJlbmNlQ29udGV4dDE4LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9JbmZlcmVuY2VDb250ZXh0
MTguamF2YQpAQCAtMTYwLDYgKzE2MCw3IEBACiAJUmVmZXJlbmNlQmluZGluZyBvYmplY3Q7IC8v
IGphdmEubGFuZy5PYmplY3QKIAlwdWJsaWMgQm91bmRTZXQgYjI7CiAJCisJcHVibGljIHN0YXRp
YyBmaW5hbCBpbnQgQ0hFQ0tfVU5LTk9XTiA9IDA7CiAJcHVibGljIHN0YXRpYyBmaW5hbCBpbnQg
Q0hFQ0tfU1RSSUNUID0gMTsKIAlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBDSEVDS19MT09TRSA9
IDI7CiAJcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgQ0hFQ0tfVkFSQVJHID0gMzsKQEAgLTIzMyw3
ICsyMzQsNiBAQAogCiAJLyoqIEpMUyAxOC41LjE6IGNvbXB1dGUgYm91bmRzIGZyb20gZm9ybWFs
IGFuZCBhY3R1YWwgcGFyYW1ldGVycy4gKi8KIAlwdWJsaWMgdm9pZCBjcmVhdGVJbml0aWFsQ29u
c3RyYWludHNGb3JQYXJhbWV0ZXJzKFR5cGVCaW5kaW5nW10gcGFyYW1ldGVycywgYm9vbGVhbiBj
aGVja1ZhcmFyZywgVHlwZUJpbmRpbmcgdmFyQXJnc1R5cGUsIE1ldGhvZEJpbmRpbmcgbWV0aG9k
KSB7Ci0JCS8vIFRPRE8gZGlzY3JpbWluYXRlIHN0cmljdCB2cy4gbG9vc2UgaW52b2NhdGlvbnMK
IAkJaWYgKHRoaXMuaW52b2NhdGlvbkFyZ3VtZW50cyA9PSBudWxsKQogCQkJcmV0dXJuOwogCQlp
bnQgbGVuID0gY2hlY2tWYXJhcmcgPyBwYXJhbWV0ZXJzLmxlbmd0aCAtIDEgOiBNYXRoLm1pbihw
YXJhbWV0ZXJzLmxlbmd0aCwgdGhpcy5pbnZvY2F0aW9uQXJndW1lbnRzLmxlbmd0aCk7CkBAIC05
MTksNyArOTE5LDcgQEAKIAkJCQkJCQkJCQkJfSBlbHNlIGlmIChnbGJzLmxlbmd0aCA9PSAxKSB7
CiAJCQkJCQkJCQkJCQlnbGIgPSBnbGJzWzBdOwogCQkJCQkJCQkJCQl9IGVsc2UgewotCQkJCQkJ
CQkJCQkJSW50ZXJzZWN0aW9uQ2FzdFR5cGVCaW5kaW5nIGludGVyc2VjdGlvbiA9IG5ldyBJbnRl
cnNlY3Rpb25DYXN0VHlwZUJpbmRpbmcoZ2xicywgdGhpcy5lbnZpcm9ubWVudCk7CisJCQkJCQkJ
CQkJCQlJbnRlcnNlY3Rpb25DYXN0VHlwZUJpbmRpbmcgaW50ZXJzZWN0aW9uID0gKEludGVyc2Vj
dGlvbkNhc3RUeXBlQmluZGluZykgdGhpcy5lbnZpcm9ubWVudC5jcmVhdGVJbnRlcnNlY3Rpb25D
YXN0VHlwZShnbGJzKTsKIAkJCQkJCQkJCQkJCWlmICghUmVmZXJlbmNlQmluZGluZy5pc0NvbnNp
c3RlbnRJbnRlcnNlY3Rpb24oaW50ZXJzZWN0aW9uLmludGVyc2VjdGluZ1R5cGVzKSkgewogCQkJ
CQkJCQkJCQkJCXRtcEJvdW5kU2V0ID0gcHJldkJvdW5kU2V0OyAvLyBjbGVhbiB1cAogCQkJCQkJ
CQkJCQkJCWJyZWFrIHZhcmlhYmxlczsgLy8gYW5kIHN0YXJ0IG92ZXIKZGlmZiAtLWdpdCBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9sb29rdXAvUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nLmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvbG9va3VwL1BhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5qYXZhCmluZGV4IGRi
NmM5MGMuLmEzM2M3ZmQgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUGFyYW1ldGVyaXplZEdl
bmVyaWNNZXRob2RCaW5kaW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9QYXJhbWV0ZXJpemVk
R2VuZXJpY01ldGhvZEJpbmRpbmcuamF2YQpAQCAtMTYxLDExICsxNjEsMjUgQEAKIAkJCiAJCVBh
cmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBtZXRob2RTdWJzdGl0dXRlID0gbnVsbDsK
IAkJVHlwZVZhcmlhYmxlQmluZGluZ1tdIHR5cGVWYXJpYWJsZXMgPSBvcmlnaW5hbE1ldGhvZC50
eXBlVmFyaWFibGVzOwotCQlJbmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4MTggPSBudWxsOworCQlJ
bmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4MTggPSBpbnZvY2F0aW9uU2l0ZS5mcmVzaEluZmVyZW5j
ZUNvbnRleHQoc2NvcGUpOwogCQlUeXBlQmluZGluZ1tdIHBhcmFtZXRlcnMgPSBvcmlnaW5hbE1l
dGhvZC5wYXJhbWV0ZXJzOwotCQlpbmZDdHgxOCA9IGludm9jYXRpb25TaXRlLmZyZXNoSW5mZXJl
bmNlQ29udGV4dChzY29wZSk7CiAJCUNvbXBpbGVyT3B0aW9ucyBjb21waWxlck9wdGlvbnMgPSBz
Y29wZS5jb21waWxlck9wdGlvbnMoKTsKIAkJYm9vbGVhbiBpbnZvY2F0aW9uVHlwZUluZmVycmVk
ID0gZmFsc2U7CisJCWJvb2xlYW4gcmVxdWlyZUJveGluZyA9IGZhbHNlOworCQkKKwkJLy8gU2Vl
IGlmIHdlIHNob3VsZCBzdGFydCBpbiBsb29zZSBpbmZlcmVuY2UgbW9kZS4KKwkJVHlwZUJpbmRp
bmcgW10gYXJndW1lbnRzQ29weSA9IG5ldyBUeXBlQmluZGluZ1thcmd1bWVudHMubGVuZ3RoXTsK
KwkJZm9yIChpbnQgaSA9IDAsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsIHBhcmFtZXRlcnNM
ZW5ndGggPSBwYXJhbWV0ZXJzLmxlbmd0aCA7IGkgPCBsZW5ndGg7IGkrKykgeworCQkJVHlwZUJp
bmRpbmcgcGFyYW1ldGVyID0gaSA8IHBhcmFtZXRlcnNMZW5ndGggPyBwYXJhbWV0ZXJzW2ldIDog
cGFyYW1ldGVyc1twYXJhbWV0ZXJzTGVuZ3RoIC0gMV07CisJCQlmaW5hbCBUeXBlQmluZGluZyBh
cmd1bWVudCA9IGFyZ3VtZW50c1tpXTsKKwkJCWlmIChhcmd1bWVudC5pc1ByaW1pdGl2ZVR5cGUo
KSAhPSBwYXJhbWV0ZXIuaXNQcmltaXRpdmVUeXBlKCkpIHsgLy8gU2NvcGUuY0NNIGluY29ycmVj
dGx5IGJ1dCBoYXJtbGVzc2x5IHVzZXMgaXNCYXNlVHlwZSB3aGljaCBhbnN3ZXJzIHRydWUgZm9y
IG51bGwuCisJCQkJYXJndW1lbnRzQ29weVtpXSA9IHNjb3BlLmVudmlyb25tZW50KCkuY29tcHV0
ZUJveGluZ1R5cGUoYXJndW1lbnQpOworCQkJCXJlcXVpcmVCb3hpbmcgPSB0cnVlOyAvLyBjYW4n
dCBiZSBzdHJpY3QgbW9kZSwgbmVlZHMgYXQgbGVhc3QgbG9vc2UuCisJCQl9IGVsc2UgeworCQkJ
CWFyZ3VtZW50c0NvcHlbaV0gPSBhcmd1bWVudDsKKwkJCX0KKwkJfQorCQlhcmd1bWVudHMgPSBh
cmd1bWVudHNDb3B5OyAvLyBlaXRoZXIgd2F5LCB0aGlzIGFsbG93cyB0aGUgZW5naW5lIHRvIHVw
ZGF0ZSBhcmd1bWVudHMgd2l0aG91dCBoYXJtaW5nIHRoZSBjYWxsZXJzLiAKIAkJCiAJCXRyeSB7
CiAJCQlCb3VuZFNldCBwcm92aXNpb25hbFJlc3VsdCA9IG51bGw7CkBAIC0xNzQsNyArMTg4LDcg
QEAKIAkJCWZpbmFsIGJvb2xlYW4gaXNQb2x5RXhwcmVzc2lvbiA9IGludm9jYXRpb25TaXRlIGlu
c3RhbmNlb2YgRXhwcmVzc2lvbiAmJiAoKEV4cHJlc3Npb24paW52b2NhdGlvblNpdGUpLmlzUG9s
eUV4cHJlc3Npb24ob3JpZ2luYWxNZXRob2QpOwogCQkJYm9vbGVhbiBpc0RpYW1vbmQgPSBpc1Bv
bHlFeHByZXNzaW9uICYmIG9yaWdpbmFsTWV0aG9kLmlzQ29uc3RydWN0b3IoKTsKIAkJCWlmIChh
cmd1bWVudHMubGVuZ3RoID09IHBhcmFtZXRlcnMubGVuZ3RoKSB7Ci0JCQkJaW5mQ3R4MTguaW5m
ZXJlbmNlS2luZCA9IEluZmVyZW5jZUNvbnRleHQxOC5DSEVDS19MT09TRTsgLy8gVE9ETzogdmFs
aWRhdGUgaWYgMiBwaGFzZSBjaGVja2luZyAoc3RyaWN0L2xvb3NlICsgdmFyYXJnKSBpcyBzdWZm
aWNpZW50LgorCQkJCWluZkN0eDE4LmluZmVyZW5jZUtpbmQgPSByZXF1aXJlQm94aW5nID8gSW5m
ZXJlbmNlQ29udGV4dDE4LkNIRUNLX0xPT1NFIDogSW5mZXJlbmNlQ29udGV4dDE4LkNIRUNLX1NU
UklDVDsgLy8gZW5naW5lIG1heSBzdGlsbCBzbGlwIGludG8gbG9vc2UgbW9kZSBhbmQgYWRqdXN0
IGxldmVsLgogCQkJCWluZkN0eDE4LmluZmVySW52b2NhdGlvbkFwcGxpY2FiaWxpdHkob3JpZ2lu
YWxNZXRob2QsIGFyZ3VtZW50cywgaXNEaWFtb25kKTsKIAkJCQlyZXN1bHQgPSBpbmZDdHgxOC5z
b2x2ZSh0cnVlKTsKIAkJCX0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUGFyYW1ldGVyaXpl
ZFR5cGVCaW5kaW5nLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1BhcmFtZXRlcml6ZWRUeXBlQmluZGlu
Zy5qYXZhCmluZGV4IGFiN2MzYjEuLmU4ZmNjMjIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAv
UGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9QYXJhbWV0
ZXJpemVkVHlwZUJpbmRpbmcuamF2YQpAQCAtMTQ4Niw3ICsxNDg2LDcgQEAKIAkJCQkJCQl0cnkg
ewogCQkJCQkJCQlSZWZlcmVuY2VCaW5kaW5nW10gcmVmcyA9IG5ldyBSZWZlcmVuY2VCaW5kaW5n
W2dsYi5sZW5ndGhdOwogCQkJCQkJCQlTeXN0ZW0uYXJyYXljb3B5KGdsYiwgMCwgcmVmcywgMCwg
Z2xiLmxlbmd0aCk7IC8vIFRPRE86IGlmIGFuIGFycmF5IHR5cGUgcGx1cyBtb3JlIHR5cGVzIGdl
dCBoZXJlLCB3ZSBnZXQgQXJyYXlTdG9yZUV4Y2VwdGlvbiEKLQkJCQkJCQkJdHlwZXNbaV0gPSBu
ZXcgSW50ZXJzZWN0aW9uQ2FzdFR5cGVCaW5kaW5nKHJlZnMsIHRoaXMuZW52aXJvbm1lbnQpOwor
CQkJCQkJCQl0eXBlc1tpXSA9IHRoaXMuZW52aXJvbm1lbnQuY3JlYXRlSW50ZXJzZWN0aW9uQ2Fz
dFR5cGUocmVmcyk7CiAJCQkJCQkJfSBjYXRjaCAoQXJyYXlTdG9yZUV4Y2VwdGlvbiBhc2UpIHsK
IAkJCQkJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZ2VuZXJpY0luZmVyZW5jZUVycm9yKCJD
YW5ub3QgY29tcHV0ZSBnbGIgb2YgIitBcnJheXMudG9TdHJpbmcoZ2xiKSwgbnVsbCk7IC8vJE5P
Ti1OTFMtMSQKIAkJCQkJCQkJcmV0dXJuIG51bGw7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3Vw
L1Njb3BlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEKaW5kZXggM2Y5MWM0OC4uOTcx
YWQ4NiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9s
b29rdXAvU2NvcGUuamF2YQpAQCAtNzEzLDIwICs3MTMsMjAgQEAKIAkJLy8gaHR0cHM6Ly9idWdz
LmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTMzMDQzNSwgaW5mZXJlbmNlIHNob3Vs
ZCBraWNrIGluIG9ubHkgYXQgc291cmNlIDEuNSsKIAkJaWYgKHR5cGVWYXJpYWJsZXMgIT0gQmlu
ZGluZy5OT19UWVBFX1ZBUklBQkxFUyAmJiBjb21waWxlck9wdGlvbnMuc291cmNlTGV2ZWwgPj0g
Q2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNSkgeyAvLyBnZW5lcmljIG1ldGhvZAogCQkJVHlwZUJp
bmRpbmdbXSBuZXdBcmdzID0gbnVsbDsKLQkJCWZvciAoaW50IGkgPSAwOyBpIDwgYXJnTGVuZ3Ro
OyBpKyspIHsKLQkJCQlUeXBlQmluZGluZyBwYXJhbSA9IGkgPCBwYXJhbUxlbmd0aCA/IHBhcmFt
ZXRlcnNbaV0gOiBwYXJhbWV0ZXJzW3BhcmFtTGVuZ3RoIC0gMV07Ci0JCQkJaWYgKGFyZ3VtZW50
c1tpXS5pc0Jhc2VUeXBlKCkgIT0gcGFyYW0uaXNCYXNlVHlwZSgpKSB7Ci0JCQkJCWlmIChuZXdB
cmdzID09IG51bGwpIHsKLQkJCQkJCW5ld0FyZ3MgPSBuZXcgVHlwZUJpbmRpbmdbYXJnTGVuZ3Ro
XTsKLQkJCQkJCVN5c3RlbS5hcnJheWNvcHkoYXJndW1lbnRzLCAwLCBuZXdBcmdzLCAwLCBhcmdM
ZW5ndGgpOworCQkJaWYgKGNvbXBpbGVyT3B0aW9ucy5zb3VyY2VMZXZlbCA8IENsYXNzRmlsZUNv
bnN0YW50cy5KREsxXzggfHwgZ2VuZXJpY1R5cGVBcmd1bWVudHMgIT0gbnVsbCkgeyAvLyBmb3Ig
MS44KyBpbmZlcnJlZCBjYWxscywgd2UgZG8gdGhpcyBpbnNpZGUgUEdNQi5jQ00xOC4KKwkJCQlm
b3IgKGludCBpID0gMDsgaSA8IGFyZ0xlbmd0aDsgaSsrKSB7CisJCQkJCVR5cGVCaW5kaW5nIHBh
cmFtID0gaSA8IHBhcmFtTGVuZ3RoID8gcGFyYW1ldGVyc1tpXSA6IHBhcmFtZXRlcnNbcGFyYW1M
ZW5ndGggLSAxXTsKKwkJCQkJaWYgKGFyZ3VtZW50c1tpXS5pc0Jhc2VUeXBlKCkgIT0gcGFyYW0u
aXNCYXNlVHlwZSgpKSB7CisJCQkJCQlpZiAobmV3QXJncyA9PSBudWxsKSB7CisJCQkJCQkJbmV3
QXJncyA9IG5ldyBUeXBlQmluZGluZ1thcmdMZW5ndGhdOworCQkJCQkJCVN5c3RlbS5hcnJheWNv
cHkoYXJndW1lbnRzLCAwLCBuZXdBcmdzLCAwLCBhcmdMZW5ndGgpOworCQkJCQkJfQorCQkJCQkJ
bmV3QXJnc1tpXSA9IGVudmlyb25tZW50KCkuY29tcHV0ZUJveGluZ1R5cGUoYXJndW1lbnRzW2ld
KTsKIAkJCQkJfQotCQkJCQluZXdBcmdzW2ldID0gZW52aXJvbm1lbnQoKS5jb21wdXRlQm94aW5n
VHlwZShhcmd1bWVudHNbaV0pOwogCQkJCX0KIAkJCX0KIAkJCWlmIChuZXdBcmdzICE9IG51bGwp
CiAJCQkJYXJndW1lbnRzID0gbmV3QXJnczsKLQkJCWVsc2UgIC8vIGVuc3VyZSB0aGF0IGNvbXB1
dGVDb21wYXRpYmxlTWV0aG9kKCkgYmVsb3cgY2FuIHVwZGF0ZSBhcmd1bWVudHMgd2l0aG91dCBo
YXJtaW5nIG91ciBjYWxsZXI6IChUT0RPOiBhbHdheXMgY29weSBiZWZvcmUgdGhlIGxvb3A/IG9u
bHkgaW4gMS44PykKLQkJCQlTeXN0ZW0uYXJyYXljb3B5KGFyZ3VtZW50cywgMCwgYXJndW1lbnRz
PW5ldyBUeXBlQmluZGluZ1thcmdMZW5ndGhdLCAwLCBhcmdMZW5ndGgpOwogCQkJbWV0aG9kID0g
UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nLmNvbXB1dGVDb21wYXRpYmxlTWV0aG9k
KG1ldGhvZCwgYXJndW1lbnRzLCB0aGlzLCBpbnZvY2F0aW9uU2l0ZSk7CiAJCQlpZiAobWV0aG9k
ID09IG51bGwpIHJldHVybiBudWxsOyAvLyBpbmNvbXBhdGlibGUKIAkJCWlmICghbWV0aG9kLmlz
VmFsaWRCaW5kaW5nKCkpIHJldHVybiBtZXRob2Q7IC8vIGJvdW5kIGNoZWNrIGlzc3VlIGlzIHRh
a2luZyBwcmVjZWRlbmNlCkBAIC00MjMyLDcgKzQyMzIsNyBAQAogCQlpbnRbXSBjb21wYXRpYmls
aXR5TGV2ZWxzID0gbmV3IGludFt2aXNpYmxlU2l6ZV07CiAJCWludCBjb21wYXRpYmxlQ291bnQg
PSAwOwogCQlmb3IgKGludCBpID0gMDsgaSA8IHZpc2libGVTaXplOyBpKyspCi0JCQlpZiAoKGNv
bXBhdGliaWxpdHlMZXZlbHNbaV0gPSBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwodmlzaWJs
ZVtpXSwgYXJndW1lbnRUeXBlcykpICE9IE5PVF9DT01QQVRJQkxFKSB7CisJCQlpZiAoKGNvbXBh
dGliaWxpdHlMZXZlbHNbaV0gPSBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwodmlzaWJsZVtp
XSwgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUpKSAhPSBOT1RfQ09NUEFUSUJMRSkgewog
CQkJCWlmIChpICE9IGNvbXBhdGlibGVDb3VudCkgewogCQkJCQl2aXNpYmxlW2NvbXBhdGlibGVD
b3VudF0gPSB2aXNpYmxlW2ldOwogCQkJCQljb21wYXRpYmlsaXR5TGV2ZWxzW2NvbXBhdGlibGVD
b3VudF0gPSBjb21wYXRpYmlsaXR5TGV2ZWxzW2ldOwpAQCAtNDI2NSw3ICs0MjY1LDYgQEAKIAkJ
CQlpbnQgbGV2ZWxqID0gY29tcGF0aWJpbGl0eUxldmVsc1tqXTsKIAkJCQluZXh0SzogZm9yIChp
bnQgayA9IDA7IGsgPCB2aXNpYmxlU2l6ZTsgaysrKSB7CiAJCQkJCWlmIChqID09IGspIGNvbnRp
bnVlOwotCQkJCQkvLyBUT0RPIGRvIHdlIHdhbnQgdG8gY2hlY2sgZXhpc3RpbmcgaW5mZXJlbmNl
IGNvbnRleHRzIHdoZXRoZXIgdGhleSBjYW4gdGVsbCB1cyBiZXR0ZXIgYWJvdXQgdGhlIHVzZWQg
aW5mZXJlbmNlS2luZD8KIAkJCQkJaW50IGxldmVsayA9IGNvbXBhdGliaWxpdHlMZXZlbHNba107
CiAJCQkJCWlmIChsZXZlbGogPiAtMSAmJiBsZXZlbGsgPiAtMSAmJiBsZXZlbGogIT0gbGV2ZWxr
KSB7CiAJCQkJCQlpZiAobGV2ZWxqIDwgbGV2ZWxrKQpAQCAtNDU3Niw2ICs0NTc1LDUxIEBACiAJ
CX0gd2hpbGUgKHNjb3BlICE9IG51bGwpOwogCQlyZXR1cm4gbGFzdE1ldGhvZFNjb3BlOyAvLyBt
YXkgYW5zd2VyIG51bGwgaWYgbm8gbWV0aG9kIGFyb3VuZAogCX0KKwkKKwkvLyBWZXJzaW9uIHRo
YXQganVzdCBhbnN3ZXJzIGJhc2VkIG9uIGluZmVyZW5jZSBraW5kIChhdCAxLjgrKSB3aGVuIGF2
YWlsYWJsZS4KKwlwdWJsaWMgaW50IHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChNZXRob2RC
aW5kaW5nIG1ldGhvZCwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudHMsIEludm9jYXRpb25TaXRlIHNp
dGUpIHsKKwkJaWYgKGNvbXBpbGVyT3B0aW9ucygpLnNvdXJjZUxldmVsID49IENsYXNzRmlsZUNv
bnN0YW50cy5KREsxXzggJiYgbWV0aG9kIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNN
ZXRob2RCaW5kaW5nKSB7CisJCQlpbnQgaW5mZXJlbmNlS2luZCA9IEluZmVyZW5jZUNvbnRleHQx
OC5DSEVDS19VTktOT1dOOworCQkJSW5mZXJlbmNlQ29udGV4dDE4IGNvbnRleHQgPSBudWxsOwor
CQkJaWYgKHNpdGUgaW5zdGFuY2VvZiBJbnZvY2F0aW9uKSB7CisJCQkJSW52b2NhdGlvbiBpbnZv
Y2F0aW9uID0gKEludm9jYXRpb24pIHNpdGU7CisJCQkJY29udGV4dCA9IGludm9jYXRpb24uZ2V0
SW5mZXJlbmNlQ29udGV4dCgoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSBtZXRo
b2QpOworCQkJCWlmIChjb250ZXh0ICE9IG51bGwpCisJCQkJCWluZmVyZW5jZUtpbmQgPSBjb250
ZXh0LmluZmVyZW5jZUtpbmQ7CisJCQl9IGVsc2UgaWYgKHNpdGUgaW5zdGFuY2VvZiBSZWZlcmVu
Y2VFeHByZXNzaW9uKSB7CisJCQkJaW5mZXJlbmNlS2luZCA9ICgoUmVmZXJlbmNlRXhwcmVzc2lv
bikgc2l0ZSkuaW5mZXJlbmNlS2luZDsKKwkJCX0KKwkJCS8qIDEuOCsgUG9zdCBpbmZlcmVuY2Ug
Y29tcGF0aWJpbGl0eSBjaGVjayBwb2xpY3k6IEZvciBub24tZnVuY3Rpb25hbC10eXBlIGFyZ3Vt
ZW50cywgdHJ1c3QgaW5mZXJlbmNlLiBGb3IgZnVuY3Rpb25hbCB0eXBlIGFyZ3VtZW50cyBhcHBs
eSBjb21wYXRpYmlsaXR5IGNoZWNrcyBhcyBpbmZlcmVuY2UKKwkJCSAgIGVuZ2luZSBtYXkgbm90
IGhhdmUgY2hlY2tlZCBhcmd1bWVudHMgdGhhdCBhcmUgbm90IHBlcnRpbmVudCB0byBhcHBsaWNh
YmlsaXR5LiBPbmUgY29tcGxpY2F0aW9uIHRvIGRlYWwgd2l0aCBpcyB3aGVuIHRoZSBnZW5lcmlj
IG1ldGhvZCdzIHBhcmFtZXRlciBpcyBpdHMgb3duIHR5cGUgdmFyaWFibGUgCisJCQkgICBhbmQg
b25seSBhcHBsaWNhYmlsaXR5IHdhcyBpbmZlcnJlZCBhbmQgYXBwbGljYWJpbGl0eSBpbmZlcmVu
Y2UgaW5zdGFudGlhdGVkIGl0IHdpdGggamxPIGR1ZSB0byBsYWNrIG9mIHVwcGVyIGJvdW5kcyBp
biB0aGUgYm91bmQgc2V0LgorCQkJKi8KKwkJCWlmIChzaXRlIGluc3RhbmNlb2YgSW52b2NhdGlv
biAmJiBjb250ZXh0ICE9IG51bGwpIHsgLy8gdGhpcyBibG9jayBjYW4gYmUgcmVhZGlseSBzZWVu
IHRvIGJlIG5vdCByZWxldmFudCBmb3IgcmVmZXJlbmNlIGV4cHJlc3Npb25zCisJCQkJTWV0aG9k
QmluZGluZyBzaGFsbG93T3JpZ2luYWwgPSBtZXRob2Quc2hhbGxvd09yaWdpbmFsKCk7CisJCQkJ
Zm9yIChpbnQgaSA9IDAsIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkr
KykgeworCQkJCQlUeXBlQmluZGluZyBhcmd1bWVudCA9IGFyZ3VtZW50c1tpXTsKKwkJCQkJaWYg
KCFhcmd1bWVudC5pc0Z1bmN0aW9uYWxUeXBlKCkpCisJCQkJCQljb250aW51ZTsKKwkJCQkJVHlw
ZUJpbmRpbmcgcGFyYW1ldGVyID0gSW5mZXJlbmNlQ29udGV4dDE4LmdldFBhcmFtZXRlcihtZXRo
b2QucGFyYW1ldGVycywgaSwgY29udGV4dC5pc1ZhckFyZ3MoKSk7CisJCQkJCWlmIChhcmd1bWVu
dC5pc0NvbXBhdGlibGVXaXRoKHBhcmFtZXRlciwgdGhpcykpCisJCQkJCQljb250aW51ZTsKKwkJ
CQkJVHlwZUJpbmRpbmcgc2hhbGxvd1BhcmFtZXRlciA9IEluZmVyZW5jZUNvbnRleHQxOC5nZXRQ
YXJhbWV0ZXIoc2hhbGxvd09yaWdpbmFsLnBhcmFtZXRlcnMsIGksIGNvbnRleHQuaXNWYXJBcmdz
KCkpOworCQkJCQlpZiAoc2hhbGxvd1BhcmFtZXRlci5pc1BlcnRpbmVudFRvQXBwbGljYWJpbGl0
eShhcmd1bWVudCwgc2hhbGxvd09yaWdpbmFsKSkKKwkJCQkJCXJldHVybiBOT1RfQ09NUEFUSUJM
RTsKKwkJCQl9CisJCQl9CisJCQlzd2l0Y2ggKGluZmVyZW5jZUtpbmQpIHsKKwkJCQljYXNlIElu
ZmVyZW5jZUNvbnRleHQxOC5DSEVDS19TVFJJQ1Q6CisJCQkJCXJldHVybiBDT01QQVRJQkxFOwor
CQkJCWNhc2UgSW5mZXJlbmNlQ29udGV4dDE4LkNIRUNLX0xPT1NFOgorCQkJCQlyZXR1cm4gQVVU
T0JPWF9DT01QQVRJQkxFOworCQkJCWNhc2UgSW5mZXJlbmNlQ29udGV4dDE4LkNIRUNLX1ZBUkFS
RzoKKwkJCQkJcmV0dXJuIFZBUkFSR1NfQ09NUEFUSUJMRTsKKwkJCQlkZWZhdWx0OgorCQkJCQli
cmVhazsKKwkJCQl9CisJCX0KKwkJcmV0dXJuIHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbCht
ZXRob2QsIGFyZ3VtZW50cywgZmFsc2UpOworCX0KIAogCXB1YmxpYyBpbnQgcGFyYW1ldGVyQ29t
cGF0aWJpbGl0eUxldmVsKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBUeXBlQmluZGluZ1tdIGFyZ3Vt
ZW50cykgewogCQlyZXR1cm4gcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsKG1ldGhvZCwgYXJn
dW1lbnRzLCBmYWxzZSk7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1R5cGVCaW5kaW5nLmph
dmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvbG9va3VwL1R5cGVCaW5kaW5nLmphdmEKaW5kZXggNDhhYWJkNi4uZTBjMTkw
MiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9UeXBlQmluZGluZy5qYXZhCisrKyBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9sb29rdXAvVHlwZUJpbmRpbmcuamF2YQpAQCAtNDQxLDYgKzQ0MSwxNiBAQAogCQkJCQl9CiAJ
CQkJfQogCQkJfQorCQkJYnJlYWs7CisJCWNhc2UgQmluZGluZy5JTlRFUlNFQ1RJT05fQ0FTVF9U
WVBFOgorCQkJSW50ZXJzZWN0aW9uQ2FzdFR5cGVCaW5kaW5nIGljdGIgPSAoSW50ZXJzZWN0aW9u
Q2FzdFR5cGVCaW5kaW5nKSB0aGlzOworCQkJUmVmZXJlbmNlQmluZGluZ1tdIGludGVyc2VjdGlu
Z1R5cGVzID0gaWN0Yi5nZXRJbnRlcnNlY3RpbmdUeXBlcygpOworCQkJZm9yIChpbnQgaSA9IDAs
IGxlbmd0aCA9IGludGVyc2VjdGluZ1R5cGVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7CisJ
CQkJVHlwZUJpbmRpbmcgc3VwZXJUeXBlID0gaW50ZXJzZWN0aW5nVHlwZXNbaV0uZmluZFN1cGVy
VHlwZU9yaWdpbmF0aW5nRnJvbShvdGhlclR5cGUpOworCQkJCWlmIChzdXBlclR5cGUgIT0gbnVs
bCkKKwkJCQkJcmV0dXJuIHN1cGVyVHlwZTsKKwkJCX0KKwkJCWJyZWFrOwogCX0KIAlyZXR1cm4g
bnVsbDsKIH0KQEAgLTEyNTIsNiArMTI2MiwxMiBAQAogCQkJVHlwZUJpbmRpbmcgb3RoZXJCb3Vu
ZCA9IG90aGVyV2lsZGNhcmQuYm91bmQ7CiAJCQlzd2l0Y2ggKG90aGVyV2lsZGNhcmQuYm91bmRL
aW5kKSB7CiAJCQkJY2FzZSBXaWxkY2FyZC5FWFRFTkRTOgorCQkJCQlpZiAob3RoZXJCb3VuZCBp
bnN0YW5jZW9mIEludGVyc2VjdGlvbkNhc3RUeXBlQmluZGluZykgeworCQkJCQkJVHlwZUJpbmRp
bmcgW10gaW50ZXJzZWN0aW5nVHlwZXMgPSAoKEludGVyc2VjdGlvbkNhc3RUeXBlQmluZGluZykg
b3RoZXJCb3VuZCkuaW50ZXJzZWN0aW5nVHlwZXM7CisJCQkJCQlmb3IgKGludCBpID0gMCwgbGVu
Z3RoID0gaW50ZXJzZWN0aW5nVHlwZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspCisJCQkJCQkJ
aWYgKFR5cGVCaW5kaW5nLmVxdWFsc0VxdWFscyhpbnRlcnNlY3RpbmdUeXBlc1tpXSwgdGhpcykp
CisJCQkJCQkJCXJldHVybiB0cnVlOworCQkJCQl9CiAJCQkJCWlmIChUeXBlQmluZGluZy5lcXVh
bHNFcXVhbHMob3RoZXJCb3VuZCwgdGhpcykpCiAJCQkJCQlyZXR1cm4gdHJ1ZTsgLy8gPyBleHRl
bmRzIFQgIDw9ICA/IGV4dGVuZHMgPyBleHRlbmRzIFQKIAkJCQkJaWYgKHVwcGVyQm91bmQgPT0g
bnVsbCkKQEAgLTEyNjQsNiArMTI4MCwxMiBAQAogCQkJCQlyZXR1cm4gdXBwZXJCb3VuZC5pc0Nv
bXBhdGlibGVXaXRoKG90aGVyQm91bmQpOwogCiAJCQkJY2FzZSBXaWxkY2FyZC5TVVBFUjoKKwkJ
CQkJaWYgKG90aGVyQm91bmQgaW5zdGFuY2VvZiBJbnRlcnNlY3Rpb25DYXN0VHlwZUJpbmRpbmcp
IHsKKwkJCQkJCVR5cGVCaW5kaW5nIFtdIGludGVyc2VjdGluZ1R5cGVzID0gKChJbnRlcnNlY3Rp
b25DYXN0VHlwZUJpbmRpbmcpIG90aGVyQm91bmQpLmludGVyc2VjdGluZ1R5cGVzOworCQkJCQkJ
Zm9yIChpbnQgaSA9IDAsIGxlbmd0aCA9IGludGVyc2VjdGluZ1R5cGVzLmxlbmd0aDsgaSA8IGxl
bmd0aDsgaSsrKQorCQkJCQkJCWlmIChUeXBlQmluZGluZy5lcXVhbHNFcXVhbHMoaW50ZXJzZWN0
aW5nVHlwZXNbaV0sIHRoaXMpKQorCQkJCQkJCQlyZXR1cm4gdHJ1ZTsKKwkJCQkJfQogCQkJCQlp
ZiAoVHlwZUJpbmRpbmcuZXF1YWxzRXF1YWxzKG90aGVyQm91bmQsIHRoaXMpKQogCQkJCQkJcmV0
dXJuIHRydWU7IC8vID8gc3VwZXIgVCAgPD0gID8gc3VwZXIgPyBzdXBlciBUCiAJCQkJCWlmIChs
b3dlckJvdW5kID09IG51bGwpCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1dpbGRjYXJkQmlu
ZGluZy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9XaWxkY2FyZEJpbmRpbmcuamF2YQppbmRleCBiYzVk
ZGU5Li42MDMxZjYzIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1dpbGRjYXJkQmluZGluZy5q
YXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9sb29rdXAvV2lsZGNhcmRCaW5kaW5nLmphdmEKQEAgLTg3LDcgKzg3
LDcgQEAKIAkJfSBjYXRjaCAoQXJyYXlTdG9yZUV4Y2VwdGlvbiBhc2UpIHsKIAkJCXJldHVybiB0
aGlzLmJvdW5kOwogCQl9Ci0JCXJldHVybiBuZXcgSW50ZXJzZWN0aW9uQ2FzdFR5cGVCaW5kaW5n
KGFsbEJvdW5kcywgdGhpcy5lbnZpcm9ubWVudCk7CisJCXJldHVybiB0aGlzLmVudmlyb25tZW50
LmNyZWF0ZUludGVyc2VjdGlvbkNhc3RUeXBlKGFsbEJvdW5kcyk7CiAJfQogCiAJcHVibGljIFJl
ZmVyZW5jZUJpbmRpbmcgYWN0dWFsVHlwZSgpIHs=
</data>

          </attachment>
      

    </bug>

</bugzilla>