<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>419057</bug_id>
          
          <creation_ts>2013-10-09 12:37:00 -0400</creation_ts>
          <short_desc>ITypeBinding#getModifiers() misses implicit &quot;static&quot; for class member interface</short_desc>
          <delta_ts>2013-11-05 00:15:36 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Markus Keller">markus_keller</reporter>
          <assigned_to name="ANIRBAN CHAKRABORTY">anchakrk</assigned_to>
          <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="59864"
          type_id="1"
          status="+"
          setter="srikanth_sankaran"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2316329</commentid>
    <comment_count>0</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-10-09 12:37:11 -0400</bug_when>
    <thetext>master and BETA_JAVA8

ITypeBinding#getModifiers() misses the implicit &quot;static&quot; modifier for member interfaces of a class:

public class C {
	interface IC {} // implicitly static, see JLS7 8.5.1
}

(If you wonder about the reference to JLS7 8.5.1, then you may have an old version of JLS7 that contains a section 8.5.2 and a bogus 8.5.1 that said IC would be implicitly public -- that part has been removed again).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2316490</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-10 00:04:46 -0400</bug_when>
    <thetext>Anirban, since you are working on the modifier problem to do with
default/abstract, you could take a look at this one too.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2325952</commentid>
    <comment_count>2</comment_count>
      <attachid>237158</attachid>
    <who name="ANIRBAN CHAKRABORTY">anchakrk</who>
    <bug_when>2013-11-03 01:42:27 -0500</bug_when>
    <thetext>Created attachment 237158
Solution and testcase

Solution and testcase attached</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2325953</commentid>
    <comment_count>3</comment_count>
    <who name="ANIRBAN CHAKRABORTY">anchakrk</who>
    <bug_when>2013-11-03 01:46:14 -0500</bug_when>
    <thetext>The section 8.5.1 of JLS 7 states that :
A member interface is implicitly static (9.1.1). It is permitted for the declaration of a member interface to redundantly specify the static modifier.

So, an interface, which is a member of another interface or class is automatically made static.
Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2326158</commentid>
    <comment_count>4</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-11-04 07:03:32 -0500</bug_when>
    <thetext>(In reply to ANIRBAN CHAKRABORTY from comment #2)
I may be totally wrong, but I wonder why the &quot;implicitly static&quot; state is not set at same place as 9.5 is implemented, i.e. at the very end of org.eclipse.jdt.internal.compiler.lookup.ClassScope#checkAndSetModifiers().</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2326358</commentid>
    <comment_count>5</comment_count>
    <who name="ANIRBAN CHAKRABORTY">anchakrk</who>
    <bug_when>2013-11-04 13:17:04 -0500</bug_when>
    <thetext>(In reply to Markus Keller from comment #4)
&gt; (In reply to ANIRBAN CHAKRABORTY from comment #2)
&gt; I may be totally wrong, but I wonder why the &quot;implicitly static&quot; state is
&gt; not set at same place as 9.5 is implemented, i.e. at the very end of
&gt; org.eclipse.jdt.internal.compiler.lookup.ClassScope#checkAndSetModifiers().

Hello Markus,

Thanks for reviewing the patch.

The reasons I set the static bit in parser are:
(1) I wanted to set this as early as possible, so that any subsequent decisions taken on the basis of the static nature of this interface, as of today, or any future possible code, they come correct. And, anyway, certain decisions are being taken at that place in parser on the basis of the member nature of this interface; so I decided to put that there.
(2) That a member interface will be static is a very plain-vanilla inference, as per the JLS, devoid of any other conditionality. If I see the call-tree of the checkAndSetModifiers(), the callers of this method higher up in the tree are not always called unconditionally. This puts a conditionality constraint to something which is pretty much unconditional as per the JLS. The parser flow is a much more (if not fully) unconditional flow - one just cannot bypass the parser. So, I thought this might be an appropriate place.

Please let me know if You agree with this argument; I don&apos;t mind shifting the setting of static bit to the checkAndSetModifiers() if that is more appropriate.

Thanks
Anirban</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2326377</commentid>
    <comment_count>6</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-11-04 14:10:42 -0500</bug_when>
    <thetext>(In reply to ANIRBAN CHAKRABORTY from comment #5)
Thanks for the explanations. I don&apos;t know the compiler code well enough to tell which place is the best. I just don&apos;t think it&apos;s good to handle two very similar paragraphs of the spec so far apart. Maybe the condition in checkAndSetModifiers() should also be moved into the Parser class then?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2326531</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-11-05 00:14:14 -0500</bug_when>
    <thetext>Fix and tests released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=c33f41f43558cbfed253266a4a366ce7c1f4e32c

I moved the code to ClassScope.checkAnd*() method - this is the right place
for this change - I don&apos;t see it being called only conditionally.

I raised a follow up bug (pre-existing)
https://bugs.eclipse.org/bugs/show_bug.cgi?id=421040</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2326532</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-11-05 00:15:36 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #7)

&gt; I moved the code to ClassScope.checkAnd*() method - this is the right place
&gt; for this change - I don&apos;t see it being called only conditionally.

This also allowed me to get rid of the changes made to three suites as part
of prior patch.

I don&apos;t think the new tests quite belong where they have been added, but I
let that slide.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>237158</attachid>
            <date>2013-11-03 01:42:00 -0500</date>
            <delta_ts>2013-11-03 01:42:27 -0500</delta_ts>
            <desc>Solution and testcase</desc>
            <filename>Bug-419057-master.patch</filename>
            <type>text/plain</type>
            <size>11635</size>
            <attacher name="ANIRBAN CHAKRABORTY">anchakrk</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9wYXJzZXIvQ29tcGxldGlvblBhcnNlclRl
c3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9wYXJzZXIvQ29tcGxldGlvblBhcnNlclRlc3Qu
amF2YQppbmRleCAxNDlhY2JkLi41OWI0ZGFkIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGls
ZXIvcGFyc2VyL0NvbXBsZXRpb25QYXJzZXJUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBp
bGVyL3BhcnNlci9Db21wbGV0aW9uUGFyc2VyVGVzdC5qYXZhCkBAIC0xLDcgKzEsNyBAQAogLyoq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMSBJQk0gQ29y
cG9yYXRpb24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMyBJQk0gQ29y
cG9yYXRpb24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3Jh
bSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1
bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hp
Y2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKICAq
IGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCiAgKiAKQEAgLTYzOCwx
MSArNjM4LDExIEBACiAJaW50IGN1cnNvckxvY2F0aW9uID0gc3RyLmluZGV4T2YoY29tcGxldGVC
ZWhpbmQpICsgY29tcGxldGVCZWhpbmQubGVuZ3RoKCkgLSAxOwogCVN0cmluZyBleHBlY3RlZFVu
aXREaXNwbGF5U3RyaW5nID0KIAkJInBhY2thZ2UgcDtcbiIgKwogCQkiaW1wb3J0IGphdmEudXRp
bC5WZWN0b3I7XG4iICsKIAkJInB1YmxpYyBjbGFzcyBCQyB7XG4iICsKLQkJIiAgaW50ZXJmYWNl
IENvbnN0YW50cyB7XG4iICsKKwkJIiAgc3RhdGljIGludGVyZmFjZSBDb25zdGFudHMge1xuIiAr
CiAJCSIgICAgaW50IE9LO1xuIiArCiAJCSIgICAgaW50IENBTkNFTDtcbiIgKwogCQkiICAgIDxj
bGluaXQ+KCkge1xuIiArCiAJCSIgICAgfVxuIiArCiAJCSIgIH1cbiIgKwpAQCAtNjk0LDExICs2
OTQsMTEgQEAKIAlpbnQgY3Vyc29yTG9jYXRpb24gPSBzdHIuaW5kZXhPZihjb21wbGV0ZUJlaGlu
ZCkgKyBjb21wbGV0ZUJlaGluZC5sZW5ndGgoKSAtIDE7CiAJU3RyaW5nIGV4cGVjdGVkVW5pdERp
c3BsYXlTdHJpbmcgPQogCQkicGFja2FnZSBwO1xuIiArCiAJCSJpbXBvcnQgamF2YS51dGlsLlZl
Y3RvcjtcbiIgKwogCQkicHVibGljIGNsYXNzIEJDIHtcbiIgKwotCQkiICBpbnRlcmZhY2UgQ29u
c3RhbnRzIHtcbiIgKworCQkiICBzdGF0aWMgaW50ZXJmYWNlIENvbnN0YW50cyB7XG4iICsKIAkJ
IiAgICBpbnQgT0s7XG4iICsKIAkJIiAgICBpbnQgQ0FOQ0VMO1xuIiArCiAJCSIgICAgPGNsaW5p
dD4oKSB7XG4iICsKIAkJIiAgICB9XG4iICsKIAkJIiAgfVxuIiArCkBAIC03NTAsMTEgKzc1MCwx
MSBAQAogCWludCBjdXJzb3JMb2NhdGlvbiA9IHN0ci5pbmRleE9mKGNvbXBsZXRlQmVoaW5kKSAr
IGNvbXBsZXRlQmVoaW5kLmxlbmd0aCgpIC0gMTsKIAlTdHJpbmcgZXhwZWN0ZWRVbml0RGlzcGxh
eVN0cmluZyA9CiAJCSJwYWNrYWdlIHA7XG4iICsKIAkJImltcG9ydCBqYXZhLnV0aWwuVmVjdG9y
O1xuIiArCiAJCSJwdWJsaWMgY2xhc3MgQkMge1xuIiArCi0JCSIgIGludGVyZmFjZSBDb25zdGFu
dHMge1xuIiArCisJCSIgIHN0YXRpYyBpbnRlcmZhY2UgQ29uc3RhbnRzIHtcbiIgKwogCQkiICAg
IGludCBPSztcbiIgKwogCQkiICAgIGludCBDQU5DRUw7XG4iICsKIAkJIiAgICA8Y2xpbml0Pigp
IHtcbiIgKwogCQkiICAgIH1cbiIgKwogCQkiICB9XG4iICsKQEAgLTg2NjYsMTEgKzg2NjYsMTEg
QEAKIAlTdHJpbmcgZXhwZWN0ZWRVbml0RGlzcGxheVN0cmluZyA9CiAJCSJpbXBvcnQgamF2YS5s
YW5nLmFubm90YXRpb24uQW5ub3RhdGlvbjtcbiIgKyAKIAkJImludGVyZmFjZSBJbiB7XG4iICsg
CiAJCSJ9XG4iICsgCiAJCSJpbnRlcmZhY2UgSW5uIHtcbiIgKyAKLQkJIiAgaW50ZXJmYWNlIElu
bjIge1xuIiArIAorCQkiICBzdGF0aWMgaW50ZXJmYWNlIElubjIge1xuIiArIAogCQkiICB9XG4i
ICsgCiAJCSIgIEBpbnRlcmZhY2UgSW5Bbm5vdCB7XG4iICsgCiAJCSIgIH1cbiIgKyAKIAkJIn1c
biIgKyAKIAkJIkBpbnRlcmZhY2UgSW5uQW5ub3Qge1xuIiArIApkaWZmIC0tZ2l0IGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rl
c3RzL2NvbXBpbGVyL3BhcnNlci9Tb3VyY2VFbGVtZW50UGFyc2VyVGVzdC5qYXZhIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rl
c3RzL2NvbXBpbGVyL3BhcnNlci9Tb3VyY2VFbGVtZW50UGFyc2VyVGVzdC5qYXZhCmluZGV4IDVh
YzYwZWQuLjcyM2Q2Y2UgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNv
bXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9wYXJzZXIvU291
cmNlRWxlbWVudFBhcnNlclRlc3QuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0
cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcGFyc2Vy
L1NvdXJjZUVsZW1lbnRQYXJzZXJUZXN0LmphdmEKQEAgLTEsNyArMSw3IEBACiAvKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEwIElCTSBDb3Jwb3JhdGlv
biBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEzIElCTSBDb3Jwb3JhdGlv
biBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0
aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRo
ZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2Nv
bXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdAogICogaHR0cDov
L3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKICAqCkBAIC01MzU2LDExICs1MzU2
LDExIEBACiAJCSJpbXBvcnQgamF2YS51dGlsLkNvbGxlY3Rpb247XG4iICsgCiAJCSJwdWJsaWMg
Y2xhc3MgWCB7XG4iICsgCiAJCSIJcHVibGljIGFic3RyYWN0IGNsYXNzIEFic3RyYWN0RGF0YSB7
XG4iICsgCiAJCSIJCWphdmEubGFuZy5PYmplY3QoMClcbiIgKyAKIAkJIgl9XG4iICsgCi0JCSIJ
cHVibGljIGludGVyZmFjZSBJU2NhbGFyRGF0YSB7XG4iICsgCisJCSIJcHVibGljIHN0YXRpYyBp
bnRlcmZhY2UgSVNjYWxhckRhdGEge1xuIiArIAogCQkiCX1cbiIgKyAKIAkJIglwcml2YXRlIHN0
YXRpYyBpbnRlcmZhY2UgVmFsdWVPYmplY3RQcm9wZXJ0eUl0ZXJhdG9yIHtcbiIgKyAKIAkJIgkJ
cHVibGljIHZvaWQgaXRlcmF0ZU9uVmFsdWVPYmplY3RQcm9wZXJ0eShJU2NhbGFyRGF0YTxUPiBz
Y2FsYXJPYmplY3QsIFQgdmFsdWVPYmplY3QsIENsYXNzPD8+IHZhbHVlT2JqZWN0VHlwZSwgU3Ry
aW5nIG5hbWUsIENsYXNzPD8+IHNjYWxhclR5cGUsICkgdGhyb3dzIEV4Y2VwdGlvbiwge31cbiIg
KyAKIAkJIgl9XG4iICsgCiAJCSIJamF2YS5sYW5nLk9iamVjdCgwKVxuIiArIApkaWZmIC0tZ2l0
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pk
dC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3BhcnNlci9TdGF0ZW1lbnRSZWNvdmVyeVRlc3QuamF2YSBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQv
Y29yZS90ZXN0cy9jb21waWxlci9wYXJzZXIvU3RhdGVtZW50UmVjb3ZlcnlUZXN0LmphdmEKaW5k
ZXggMDFhMzU3ZC4uMDhjZWVmZiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVz
dHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3BhcnNl
ci9TdGF0ZW1lbnRSZWNvdmVyeVRlc3QuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50
ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcGFy
c2VyL1N0YXRlbWVudFJlY292ZXJ5VGVzdC5qYXZhCkBAIC0xLDcgKzEsNyBAQAogLyoqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMSBJQk0gQ29ycG9yYXRp
b24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRp
b24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQg
dGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0
aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNj
b21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKICAqIGh0dHA6
Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCiAgKgpAQCAtMzA1NywxMyArMzA1
NywxMyBAQAogfQogcHVibGljIHZvaWQgdGVzdDAwMzgoKSB7CiAJU3RyaW5nIHMgPQogCQkicGFj
a2FnZSBwMTsJCQkJCQkJCQkJXG4iKwogCQkJInB1YmxpYyBjbGFzcyBBIHsJCQkJCQkJCQlcbiIr
Ci0JCQkiCXB1YmxpYyBpbnRlcmZhY2UgQiB7CQkJCQkJCVxuIisKKwkJCSIJcHVibGljIHN0YXRp
YyBpbnRlcmZhY2UgQiB7CQkJCQkJCVxuIisKIAkJCSIJCXB1YmxpYyBhYnN0cmFjdCB2b2lkIGFN
ZXRob2QgKGludCBBKTsJCVxuIisKLQkJCSIJCXB1YmxpYyBpbnRlcmZhY2UgQyB7CQkJCQkJXG4i
KworCQkJIgkJcHVibGljIHN0YXRpYyBpbnRlcmZhY2UgQyB7CQkJCQkJXG4iKwogCQkJIgkJCXB1
YmxpYyBhYnN0cmFjdCB2b2lkIGFub3RoZXJNZXRob2QoaW50IEEpO1xuIisKIAkJCSIJCX0JCQkJ
CQkJCQkJCVxuIisKIAkJCSIJfQkJCQkJCQkJCQkJCVxuIisKIAkJCSIJcHVibGljIGNsYXNzIGFD
bGFzcyBpbXBsZW1lbnRzIEIsIEIuQyB7CQkJXG4iKwogCQkJIgkJcHVibGljIHZvaWQgYU1ldGhv
ZCAoaW50IEEpIHsJCQkJXG4iKwpAQCAtMzA3NiwxMiArMzA3NiwxMiBAQAogCQkJIn0iOwogCiAJ
U3RyaW5nIGV4cGVjdGVkRGlldFVuaXRUb1N0cmluZyA9CiAJCSJwYWNrYWdlIHAxO1xuIiArCiAJ
CSJwdWJsaWMgY2xhc3MgQSB7XG4iICsKLQkJIiAgcHVibGljIGludGVyZmFjZSBCIHtcbiIgKwot
CQkiICAgIHB1YmxpYyBpbnRlcmZhY2UgQyB7XG4iICsKKwkJIiAgcHVibGljIHN0YXRpYyBpbnRl
cmZhY2UgQiB7XG4iICsKKwkJIiAgICBwdWJsaWMgc3RhdGljIGludGVyZmFjZSBDIHtcbiIgKwog
CQkiICAgICAgcHVibGljIGFic3RyYWN0IHZvaWQgYW5vdGhlck1ldGhvZChpbnQgQSk7XG4iICsK
IAkJIiAgICB9XG4iICsKIAkJIiAgICBwdWJsaWMgYWJzdHJhY3Qgdm9pZCBhTWV0aG9kKGludCBB
KTtcbiIgKwogCQkiICB9XG4iICsKIAkJIiAgcHVibGljIGNsYXNzIGFDbGFzcyBpbXBsZW1lbnRz
IEIsIEIuQyB7XG4iICsKQEAgLTMxMDAsMTIgKzMxMDAsMTIgQEAKIAkJZXhwZWN0ZWREaWV0VW5p
dFRvU3RyaW5nOwogCiAJU3RyaW5nIGV4cGVjdGVkRGlldFBsdXNCb2R5VW5pdFRvU3RyaW5nID0K
IAkJInBhY2thZ2UgcDE7XG4iICsKIAkJInB1YmxpYyBjbGFzcyBBIHtcbiIgKwotCQkiICBwdWJs
aWMgaW50ZXJmYWNlIEIge1xuIiArCi0JCSIgICAgcHVibGljIGludGVyZmFjZSBDIHtcbiIgKwor
CQkiICBwdWJsaWMgc3RhdGljIGludGVyZmFjZSBCIHtcbiIgKworCQkiICAgIHB1YmxpYyBzdGF0
aWMgaW50ZXJmYWNlIEMge1xuIiArCiAJCSIgICAgICBwdWJsaWMgYWJzdHJhY3Qgdm9pZCBhbm90
aGVyTWV0aG9kKGludCBBKTtcbiIgKwogCQkiICAgIH1cbiIgKwogCQkiICAgIHB1YmxpYyBhYnN0
cmFjdCB2b2lkIGFNZXRob2QoaW50IEEpO1xuIiArCiAJCSIgIH1cbiIgKwogCQkiICBwdWJsaWMg
Y2xhc3MgYUNsYXNzIGltcGxlbWVudHMgQiwgQi5DIHtcbiIgKwpAQCAtMzEyNCwxMiArMzEyNCwx
MiBAQAogCQkifVxuIjsKIAogCVN0cmluZyBleHBlY3RlZERpZXRQbHVzQm9keVdpdGhTdGF0ZW1l
bnRSZWNvdmVyeVVuaXRUb1N0cmluZyA9CiAJCSJwYWNrYWdlIHAxO1xuIiArCiAJCSJwdWJsaWMg
Y2xhc3MgQSB7XG4iICsKLQkJIiAgcHVibGljIGludGVyZmFjZSBCIHtcbiIgKwotCQkiICAgIHB1
YmxpYyBpbnRlcmZhY2UgQyB7XG4iICsKKwkJIiAgcHVibGljIHN0YXRpYyBpbnRlcmZhY2UgQiB7
XG4iICsKKwkJIiAgICBwdWJsaWMgc3RhdGljIGludGVyZmFjZSBDIHtcbiIgKwogCQkiICAgICAg
cHVibGljIGFic3RyYWN0IHZvaWQgYW5vdGhlck1ldGhvZChpbnQgQSk7XG4iICsKIAkJIiAgICB9
XG4iICsKIAkJIiAgICBwdWJsaWMgYWJzdHJhY3Qgdm9pZCBhTWV0aG9kKGludCBBKTtcbiIgKwog
CQkiICB9XG4iICsKIAkJIiAgcHVibGljIGNsYXNzIGFDbGFzcyBpbXBsZW1lbnRzIEIsIEIuQyB7
XG4iICsKQEAgLTMxNTEsMTIgKzMxNTEsMTIgQEAKIAkJIn1cbiI7CiAKIAlTdHJpbmcgZXhwZWN0
ZWRGdWxsVW5pdFRvU3RyaW5nID0KIAkJInBhY2thZ2UgcDE7XG4iICsKIAkJInB1YmxpYyBjbGFz
cyBBIHtcbiIgKwotCQkiICBwdWJsaWMgaW50ZXJmYWNlIEIge1xuIiArCi0JCSIgICAgcHVibGlj
IGludGVyZmFjZSBDIHtcbiIgKworCQkiICBwdWJsaWMgc3RhdGljIGludGVyZmFjZSBCIHtcbiIg
KworCQkiICAgIHB1YmxpYyBzdGF0aWMgaW50ZXJmYWNlIEMge1xuIiArCiAJCSIgICAgICBwdWJs
aWMgYWJzdHJhY3Qgdm9pZCBhbm90aGVyTWV0aG9kKGludCBBKTtcbiIgKwogCQkiICAgIH1cbiIg
KwogCQkiICAgIHB1YmxpYyBhYnN0cmFjdCB2b2lkIGFNZXRob2QoaW50IEEpO1xuIiArCiAJCSIg
IH1cbiIgKwogCQkiICBwdWJsaWMgY2xhc3MgYUNsYXNzIGltcGxlbWVudHMgQiwgQi5DIHtcbiIg
KwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL3Jld3JpdGUvZGVzY3JpYmluZy9BU1RSZXdyaXRpbmdUeXBl
RGVjbFRlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9yZXdyaXRlL2Rlc2NyaWJpbmcvQVNUUmV3cml0aW5nVHlw
ZURlY2xUZXN0LmphdmEKaW5kZXggZjg2ZmE0Zi4uYjRkYTJiYSAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3Rz
L3Jld3JpdGUvZGVzY3JpYmluZy9BU1RSZXdyaXRpbmdUeXBlRGVjbFRlc3QuamF2YQorKysgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvcmV3cml0ZS9kZXNjcmliaW5nL0FTVFJld3JpdGluZ1R5cGVEZWNsVGVzdC5qYXZhCkBA
IC0xOSwxMCArMTksMTEgQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5KYXZhQ29yZTsK
IGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uKjsKIGltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuY29yZS5kb20ucmV3cml0ZS5BU1RSZXdyaXRlOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5j
b3JlLmRvbS5yZXdyaXRlLkxpc3RSZXdyaXRlOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3Jl
LmZvcm1hdHRlci5EZWZhdWx0Q29kZUZvcm1hdHRlckNvbnN0YW50czsKK2ltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuY29yZS5kb20uSVR5cGVCaW5kaW5nOwogCiBwdWJsaWMgY2xhc3MgQVNUUmV3cml0
aW5nVHlwZURlY2xUZXN0IGV4dGVuZHMgQVNUUmV3cml0aW5nVGVzdCB7CiAKIAlwcml2YXRlIHN0
YXRpYyBmaW5hbCBDbGFzcyBUSElTPSBBU1RSZXdyaXRpbmdUeXBlRGVjbFRlc3QuY2xhc3M7CiAK
QEAgLTE2NzcsOCArMTY3OCw0MCBAQAogCQlidWYuYXBwZW5kKCJ9XG4iKTsKIAkJYXNzZXJ0RXF1
YWxTdHJpbmcocHJldmlldywgYnVmLnRvU3RyaW5nKCkpOwogCiAJfQogCi0KKwkvLyBCdWcgNDE5
MDU3IC0gSVR5cGVCaW5kaW5nI2dldE1vZGlmaWVycygpIG1pc3NlcyBpbXBsaWNpdCAic3RhdGlj
IiBmb3IgY2xhc3MgbWVtYmVyIGludGVyZmFjZSAKKwkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5v
cmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDE5MDU3CisJcHVibGljIHZvaWQgdGVzdEJ1ZzQxOTA1
N2EoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJSVBhY2thZ2VGcmFnbWVudCBwYWNrMT0gdGhpcy5z
b3VyY2VGb2xkZXIuY3JlYXRlUGFja2FnZUZyYWdtZW50KCJ0ZXN0MSIsIGZhbHNlLCBudWxsKTsK
KwkJU3RyaW5nQnVmZmVyIGJ1Zj0gbmV3IFN0cmluZ0J1ZmZlcigpOworCQlidWYuYXBwZW5kKCJw
YWNrYWdlIHRlc3QxO1xuIik7CisJCWJ1Zi5hcHBlbmQoInB1YmxpYyBjbGFzcyBDIHtcbiIpOwor
CQlidWYuYXBwZW5kKCIgICAgaW50ZXJmYWNlIElDIHt9XG4iKTsKKwkJYnVmLmFwcGVuZCgifVxu
Iik7CisJCUlDb21waWxhdGlvblVuaXQgY3U9IHBhY2sxLmNyZWF0ZUNvbXBpbGF0aW9uVW5pdCgi
Qy5qYXZhIiwgYnVmLnRvU3RyaW5nKCksIGZhbHNlLCBudWxsKTsKKwkJQ29tcGlsYXRpb25Vbml0
IGFzdFJvb3Q9IGNyZWF0ZUFTVChBU1QuSkxTNCwgY3UsIHRydWUsIGZhbHNlKTsKKwkJTGlzdCB0
eXBlcyA9IGFzdFJvb3QudHlwZXMoKTsKKwkJVHlwZURlY2xhcmF0aW9uIHR5cGVEZWNsYXJhdGlv
biA9ICgoKFR5cGVEZWNsYXJhdGlvbikgdHlwZXMuZ2V0KDApKS5nZXRUeXBlcygpKVswXTsKKwkJ
SVR5cGVCaW5kaW5nIGlUeXBlQmluZGluZyA9IHR5cGVEZWNsYXJhdGlvbi5yZXNvbHZlQmluZGlu
ZygpOworCQlhc3NlcnRUcnVlKChpVHlwZUJpbmRpbmcuZ2V0TW9kaWZpZXJzKCkgJiBNb2RpZmll
ci5TVEFUSUMpICE9IDApOworCX0KKwlwdWJsaWMgdm9pZCB0ZXN0QnVnNDE5MDU3YigpIHRocm93
cyBFeGNlcHRpb24geworCQlJUGFja2FnZUZyYWdtZW50IHBhY2sxPSB0aGlzLnNvdXJjZUZvbGRl
ci5jcmVhdGVQYWNrYWdlRnJhZ21lbnQoInRlc3QxIiwgZmFsc2UsIG51bGwpOworCQlTdHJpbmdC
dWZmZXIgYnVmPSBuZXcgU3RyaW5nQnVmZmVyKCk7CisJCWJ1Zi5hcHBlbmQoInBhY2thZ2UgdGVz
dDE7XG4iKTsKKwkJYnVmLmFwcGVuZCgicHVibGljIGludGVyZmFjZSBDIHtcbiIpOworCQlidWYu
YXBwZW5kKCIgICAgaW50ZXJmYWNlIElDIHt9XG4iKTsKKwkJYnVmLmFwcGVuZCgifVxuIik7CisJ
CUlDb21waWxhdGlvblVuaXQgY3U9IHBhY2sxLmNyZWF0ZUNvbXBpbGF0aW9uVW5pdCgiQy5qYXZh
IiwgYnVmLnRvU3RyaW5nKCksIGZhbHNlLCBudWxsKTsKKwkJQ29tcGlsYXRpb25Vbml0IGFzdFJv
b3Q9IGNyZWF0ZUFTVChBU1QuSkxTNCwgY3UsIHRydWUsIGZhbHNlKTsKKwkJTGlzdCB0eXBlcyA9
IGFzdFJvb3QudHlwZXMoKTsKKwkJVHlwZURlY2xhcmF0aW9uIG91dGVyVHlwZURlY2xhcmF0aW9u
ID0gKFR5cGVEZWNsYXJhdGlvbikgdHlwZXMuZ2V0KDApOworCQlUeXBlRGVjbGFyYXRpb24gbWVt
YmVyVHlwZURlY2xhcmF0aW9uID0gKG91dGVyVHlwZURlY2xhcmF0aW9uLmdldFR5cGVzKCkpWzBd
OworCQlJVHlwZUJpbmRpbmcgb3V0ZXJUeXBlQmluZGluZyA9IG91dGVyVHlwZURlY2xhcmF0aW9u
LnJlc29sdmVCaW5kaW5nKCk7CisJCWFzc2VydFRydWUoKG91dGVyVHlwZUJpbmRpbmcuZ2V0TW9k
aWZpZXJzKCkgJiBNb2RpZmllci5TVEFUSUMpID09IDApOworCQlJVHlwZUJpbmRpbmcgbWVtYmVy
VHlwZUJpbmRpbmcgPSBtZW1iZXJUeXBlRGVjbGFyYXRpb24ucmVzb2x2ZUJpbmRpbmcoKTsKKwkJ
YXNzZXJ0VHJ1ZSgobWVtYmVyVHlwZUJpbmRpbmcuZ2V0TW9kaWZpZXJzKCkgJiBNb2RpZmllci5T
VEFUSUMpICE9IDApOworCX0KIAogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3BhcnNlci9QYXJzZXIu
amF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9wYXJzZXIvUGFyc2VyLmphdmEKaW5kZXggNjNjODI1MC4uNDg5NDM0OSAx
MDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL3BhcnNlci9QYXJzZXIuamF2YQorKysgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcGFyc2Vy
L1BhcnNlci5qYXZhCkBAIC00MTg3LDE0ICs0MTg3LDE4IEBACiAJaWYgKHR5cGVEZWNsLm1vZGlm
aWVyc1NvdXJjZVN0YXJ0ID49IDApIHsKIAkJdHlwZURlY2wuZGVjbGFyYXRpb25Tb3VyY2VTdGFy
dCA9IHR5cGVEZWNsLm1vZGlmaWVyc1NvdXJjZVN0YXJ0OwogCX0KIAogCS8vIFN0b3JlIHNlY29u
ZGFyeSBpbmZvCi0JaWYgKCh0eXBlRGVjbC5iaXRzICYgQVNUTm9kZS5Jc01lbWJlclR5cGUpID09
IDAgJiYgKHR5cGVEZWNsLmJpdHMgJiBBU1ROb2RlLklzTG9jYWxUeXBlKSA9PSAwKSB7Ci0JCWlm
ICh0aGlzLmNvbXBpbGF0aW9uVW5pdCAhPSBudWxsICYmICFDaGFyT3BlcmF0aW9uLmVxdWFscyh0
eXBlRGVjbC5uYW1lLCB0aGlzLmNvbXBpbGF0aW9uVW5pdC5nZXRNYWluVHlwZU5hbWUoKSkpIHsK
LQkJCXR5cGVEZWNsLmJpdHMgfD0gQVNUTm9kZS5Jc1NlY29uZGFyeVR5cGU7CisJaWYgKCh0eXBl
RGVjbC5iaXRzICYgQVNUTm9kZS5Jc01lbWJlclR5cGUpID09IDApIHsKKwkJaWYgKCh0eXBlRGVj
bC5iaXRzICYgQVNUTm9kZS5Jc0xvY2FsVHlwZSkgPT0gMCkgeworCQkJaWYgKHRoaXMuY29tcGls
YXRpb25Vbml0ICE9IG51bGwgJiYgIUNoYXJPcGVyYXRpb24uZXF1YWxzKHR5cGVEZWNsLm5hbWUs
IHRoaXMuY29tcGlsYXRpb25Vbml0LmdldE1haW5UeXBlTmFtZSgpKSkgeworCQkJCXR5cGVEZWNs
LmJpdHMgfD0gQVNUTm9kZS5Jc1NlY29uZGFyeVR5cGU7CisJCQl9CiAJCX0KKwl9IGVsc2Ugewor
CQl0eXBlRGVjbC5tb2RpZmllcnMgfD0gQ2xhc3NGaWxlQ29uc3RhbnRzLkFjY1N0YXRpYzsKIAl9
CiAKIAkvLyBjb25zdW1lIGFubm90YXRpb25zCiAJaW50IGxlbmd0aDsKIAlpZiAoKGxlbmd0aCA9
IHRoaXMuZXhwcmVzc2lvbkxlbmd0aFN0YWNrW3RoaXMuZXhwcmVzc2lvbkxlbmd0aFB0ci0tXSkg
IT0gMCkgew==
</data>
<flag name="review"
          id="59863"
          type_id="6"
          status="?"
          setter="anchakrk"
    />
          </attachment>
      

    </bug>

</bugzilla>