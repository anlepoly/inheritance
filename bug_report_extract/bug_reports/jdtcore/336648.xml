<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>336648</bug_id>
          
          <creation_ts>2011-02-08 15:00:00 -0500</creation_ts>
          <short_desc>wrong compiler problem &quot;The value of the local variable xxx is not used&quot;</short_desc>
          <delta_ts>2012-01-29 19:56:11 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.7</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Mac OS X</op_sys>
          <bug_status>REOPENED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard>3.9 candidate</status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>---</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Markus Keller">markus_keller</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>deepakazad</cc>
    
    <cc>Olivier_Thomann</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="39262"
          type_id="1"
          status="+"
          setter="amj87.iitr"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1880107</commentid>
    <comment_count>0</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2011-02-08 15:00:45 -0500</bug_when>
    <thetext>I20110124-1800

Wrong compiler problem &quot;The value of the local variable xxx is not used&quot; if there&apos;s a real compile error later:

public class Test {
	void foo(String m) {
		
		// wrong &quot;The value of the local variable message is not used&quot;:
		final String message= m;
		
		new Runnable() {
			public void run() {
				if (&quot;x&quot;.equals(message)) {
					bug(); // undefined method
				}
			}
		}.run();
	}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1880245</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-02-08 22:00:23 -0500</bug_when>
    <thetext>I&apos;ll take a look.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1883420</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-02-15 00:55:38 -0500</bug_when>
    <thetext>Released disabled junit test via org.eclipse.jdt.core.tests.compiler.regression.ProgrammingProblemsTest._test0058()

Turns out the local variable&apos;s use is recorded in code generation. Given we
don&apos;t generate code for the class with the error, the only use of the local
is missed resulting in the warning. I&apos;ll see how best to handle this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1883445</commentid>
    <comment_count>3</comment_count>
      <attachid>188976</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-02-15 03:18:37 -0500</bug_when>
    <thetext>Created attachment 188976
Proposed patch</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1883446</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-02-15 03:19:49 -0500</bug_when>
    <thetext>Passes all tests, Ayush please review, TIA.

See also https://bugs.eclipse.org/bugs/show_bug.cgi?id=95909</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1884057</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-02-16 03:22:57 -0500</bug_when>
    <thetext>Released in HEAD for 3.7 M6</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1885142</commentid>
    <comment_count>6</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-02-17 14:41:47 -0500</bug_when>
    <thetext>Patch looks good. Although initially I thought that its too harsh to stop reporting variable unused problem when there&apos;s any error in the code, I observed that this is being done anyways by the use of ignoreFurtherInvestigation flag which gets set on the method whenever an error is encountered. And because of this flag being set, no analysis takes place for the method in question. So this bug can only occur in the kind of case as reported i.e. an inner method inside an anonymous class has the error, and gets marked with ignoreFurtherInvestigation, but the outer method does not. So in the outer method&apos;s analysis, we dont analyse the inner method, and hence dont encounter the usage of &apos;message&apos; inside the inner method. So its better to not report unused warnings when such a scenario occurs.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1894229</commentid>
    <comment_count>7</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-03-07 10:23:05 -0500</bug_when>
    <thetext>Verified for 3.7M6 using build I20110301-1537</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1925249</commentid>
    <comment_count>8</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-05-06 10:45:29 -0400</bug_when>
    <thetext>OK, given that it is not possible to fix all cases (see bug 343621) with this fix, we should revert it for 3.7.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1925259</commentid>
    <comment_count>9</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-05-06 10:56:23 -0400</bug_when>
    <thetext>The right way to fix it would be to check if the current method contains errors. We don&apos;t have an easy way to check this right now. The &quot;usage&quot; of the message is only checked really late in the code generation when outer locals are injected into the code generation of the anonymous class.
Since there is a problem with that code, the outer local variable emulation is never done.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2057709</commentid>
    <comment_count>10</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-01-29 07:00:52 -0500</bug_when>
    <thetext>(In reply to comment #9)
&gt; The right way to fix it would be to check if the current method contains
&gt; errors. We don&apos;t have an easy way to check this right now. The &quot;usage&quot; of the
&gt; message is only checked really late in the code generation when outer locals
&gt; are injected into the code generation of the anonymous class.
&gt; Since there is a problem with that code, the outer local variable emulation is
&gt; never done.

A think the cleanest way of fixing this would be to move usage analysis from generateCode to analyseCode, see bug 328830. The latter bug, however, should
better be addressed in some M1 or M2 at the latest, IMHO.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2057807</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-29 19:56:11 -0500</bug_when>
    <thetext>(In reply to comment #10)
&gt; (In reply to comment #9)
&gt; &gt; The right way to fix it would be to check if the current method contains
&gt; &gt; errors. We don&apos;t have an easy way to check this right now. The &quot;usage&quot; of the
&gt; &gt; message is only checked really late in the code generation when outer locals
&gt; &gt; are injected into the code generation of the anonymous class.
&gt; &gt; Since there is a problem with that code, the outer local variable emulation is
&gt; &gt; never done.
&gt; 
&gt; A think the cleanest way of fixing this would be to move usage analysis from
&gt; generateCode to analyseCode, see bug 328830. The latter bug, however, should
&gt; better be addressed in some M1 or M2 at the latest, IMHO.

Concur with Stephan. Moving it out of 3.8 and tagging as plan candidate for 3.9.
Thanks Stephan.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>188976</attachid>
            <date>2011-02-15 03:18:00 -0500</date>
            <delta_ts>2011-02-15 03:18:37 -0500</delta_ts>
            <desc>Proposed patch</desc>
            <filename>patch.txt</filename>
            <type>text/plain</type>
            <size>7396</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMA0KI1Agb3JnLmVjbGlwc2UuamR0LmNvcmUN
CkluZGV4OiBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3Vw
L0Jsb2NrU2NvcGUuamF2YQ0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KUkNTIGZpbGU6IC9jdnNyb290L2VjbGlwc2Uv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2xvb2t1cC9CbG9ja1Njb3BlLmphdmEsdg0KcmV0cmlldmluZyByZXZpc2lvbiAxLjEy
Mw0KZGlmZiAtdSAtcjEuMTIzIEJsb2NrU2NvcGUuamF2YQ0KLS0tIGNvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQmxvY2tTY29wZS5qYXZhCTE3IERlYyAy
MDEwIDA5OjM4OjU5IC0wMDAwCTEuMTIzDQorKysgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2xvb2t1cC9CbG9ja1Njb3BlLmphdmEJMTUgRmViIDIwMTEgMDg6MTU6
MzYgLTAwMDANCkBAIC0xLDUgKzEsNSBAQA0KIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQotICog
Q29weXJpZ2h0IChjKSAyMDAwLCAyMDEwIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLg0KKyAq
IENvcHlyaWdodCAoYykgMjAwMCwgMjAxMSBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4NCiAg
KiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcg
bWF0ZXJpYWxzDQogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUg
RWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wDQogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBk
aXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQNCkBAIC0xOTksNyArMTk5LDEwIEBADQog
CQkJCSYmICgobG9jYWwuZGVjbGFyYXRpb24uYml0cyAmIEFTVE5vZGUuSXNMb2NhbERlY2xhcmF0
aW9uUmVhY2hhYmxlKSAhPSAwKSkgeyAvLyBkZWNsYXJhdGlvbiBpcyByZWFjaGFibGUNCiANCiAJ
CQkJaWYgKCEobG9jYWwuZGVjbGFyYXRpb24gaW5zdGFuY2VvZiBBcmd1bWVudCkpIC8vIGRvIG5v
dCByZXBvcnQgdW51c2VkIGNhdGNoIGFyZ3VtZW50cw0KLQkJCQkJcHJvYmxlbVJlcG9ydGVyKCku
dW51c2VkTG9jYWxWYXJpYWJsZShsb2NhbC5kZWNsYXJhdGlvbik7DQorCQkJCQkvLyBodHRwczov
L2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzM2NjQ4DQorCQkJCQlpZiAo
IXRoaXMucmVmZXJlbmNlQ29tcGlsYXRpb25Vbml0KCkuY29tcGlsYXRpb25SZXN1bHQuaGFzRXJy
b3JzKCkpIHsNCisJCQkJCQlwcm9ibGVtUmVwb3J0ZXIoKS51bnVzZWRMb2NhbFZhcmlhYmxlKGxv
Y2FsLmRlY2xhcmF0aW9uKTsNCisJCQkJCX0NCiAJCQl9DQogDQogCQkJLy8gY291bGQgYmUgb3B0
aW1pemVkIG91dCwgYnV0IGRvZXMgbmVlZCB0byBwcmVzZXJ2ZSB1bnJlYWQgdmFyaWFibGVzID8N
CiNQIG9yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzDQpJbmRleDogRWNsaXBzZSBKYXZhIFRlc3Rz
IENvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0
aXZlVGVzdC5qYXZhDQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09DQpSQ1MgZmlsZTogL2hvbWUvY3ZzL251bWJhdC9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy9FY2xpcHNlIEphdmEgVGVzdHMgQ29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVnYXRpdmVUZXN0LmphdmEsdg0K
cmV0cmlldmluZyByZXZpc2lvbiAxLjM0Mw0KZGlmZiAtdSAtcjEuMzQzIE5lZ2F0aXZlVGVzdC5q
YXZhDQotLS0gRWNsaXBzZSBKYXZhIFRlc3RzIENvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC90ZXN0
cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlVGVzdC5qYXZhCTIzIE9jdCAyMDEwIDAwOjE4
OjQ0IC0wMDAwCTEuMzQzDQorKysgRWNsaXBzZSBKYXZhIFRlc3RzIENvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlVGVzdC5qYXZhCTE1IEZl
YiAyMDExIDA4OjE2OjExIC0wMDAwDQpAQCAtMSw1ICsxLDUgQEANCiAvKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKg0KLSAqIENvcHlyaWdodCAoYykgMjAwNSwgMjAxMCBJQk0gQ29ycG9yYXRpb24gYW5k
IG90aGVycy4NCisgKiBDb3B5cmlnaHQgKGMpIDIwMDUsIDIwMTEgSUJNIENvcnBvcmF0aW9uIGFu
ZCBvdGhlcnMuDQogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUg
YWNjb21wYW55aW5nIG1hdGVyaWFscw0KICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUg
dGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMA0KICAqIHdoaWNoIGFjY29t
cGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0DQpAQCAtMTE1Mzks
NjIgKzExNTM5LDU2IEBADQogCQkiCSAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4i
ICsgDQogCQkiRGVhZCBjb2RlXG4iICsgDQogCQkiLS0tLS0tLS0tLVxuIiArIA0KLQkJIjMuIFdB
Uk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDI4KVxuIiArIA0KLQkJIglPYmplY3Qgb2JqID0gXCJk
dW1teVwiOwlcbiIgKyANCi0JCSIJICAgICAgIF5eXlxuIiArIA0KLQkJIlRoZSB2YWx1ZSBvZiB0
aGUgbG9jYWwgdmFyaWFibGUgb2JqIGlzIG5vdCB1c2VkXG4iICsgDQotCQkiLS0tLS0tLS0tLVxu
IiArIA0KLQkJIjQuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDM2KVxuIiArIA0KKwkJIjMu
IFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDM2KVxuIiArIA0KIAkJIglpZiAoZmFsc2UpIHsJ
XG4iICsgDQogCQkiCQkJZG9pdChvYmopOyAvL3RoaXMgaXMgREVGSU5JVEVMWSB1bnJlYWNoYWJs
ZSBjb2RlLCBidXQgaXMgbm90IHJlY29nbml6ZWQgYXMgc3VjaAlcbiIgKyANCiAJCSIJCX0JXG4i
ICsgDQogCQkiCSAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4i
ICsgDQogCQkiRGVhZCBjb2RlXG4iICsgDQogCQkiLS0tLS0tLS0tLVxuIiArIA0KLQkJIjUuIEVS
Uk9SIGluIFguamF2YSAoYXQgbGluZSA0NClcbiIgKyANCisJCSI0LiBFUlJPUiBpbiBYLmphdmEg
KGF0IGxpbmUgNDQpXG4iICsgDQogCQkiCXdoaWxlIChmYWxzZSkgewlcbiIgKyANCiAJCSIJCQlk
b2l0KG9iaik7IC8vdGhpcyBpcyBERUZJTklURUxZIHVucmVhY2hhYmxlIGNvZGUsIGFuZCBpcyBy
ZWNvZ25pemVkIGFzIHN1Y2gsIHdpdGggZXJyb3IJXG4iICsgDQogCQkiCQl9CVxuIiArIA0KIAkJ
IgkgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
XG4iICsgDQogCQkiVW5yZWFjaGFibGUgY29kZVxuIiArIA0KIAkJIi0tLS0tLS0tLS1cbiIgKyAN
Ci0JCSI2LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNDgpXG4iICsgDQorCQkiNS4gRVJST1Ig
aW4gWC5qYXZhIChhdCBsaW5lIDQ4KVxuIiArIA0KIAkJIgl3aGlsZSAoRkFMU0UpIHsJXG4iICsg
DQogCQkiCQkJZG9pdChvYmopOyAvL3RoaXMgaXMgY29uZGl0aW9ubmFsbHkgdW5yZWFjaGFibGUg
Y29kZSwgYnV0IGlzIHJlY29nbml6ZWQgYXMgZGVmaW5pdGVseSB1bnJlYWNoZWFibGUgY29kZSwg
d2l0aCBlcnJvcglcbiIgKyANCiAJCSIJCX0JXG4iICsgDQogCQkiCSAgICAgICAgICAgICAgXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXG4iICsgDQogCQkiVW5yZWFjaGFibGUgY29kZVxuIiArIA0KIAkJIi0tLS0tLS0t
LS1cbiIgKyANCi0JCSI3LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNTIpXG4iICsgDQorCQki
Ni4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDUyKVxuIiArIA0KIAkJIglmb3IgKDsgZmFsc2U7
KSB7CVxuIiArIA0KIAkJIgkJCWRvaXQob2JqKTsgLy90aGlzIGlzIERFRklOSVRFTFkgdW5yZWFj
aGFibGUgY29kZSwgYnV0IGlzIHJlY29nbml6ZWQgYXMgZGVmaW5pdGVseSB1bnJlYWNoZWFibGUg
Y29kZSwgd2l0aCBlcnJvcglcbiIgKyANCiAJCSIJCX0JXG4iICsgDQogCQkiCSAgICAgICAgICAg
ICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXG4iICsgDQogCQkiVW5yZWFjaGFibGUgY29kZVxuIiArIA0KIAkJIi0tLS0t
LS0tLS1cbiIgKyANCi0JCSI4LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNTYpXG4iICsgDQor
CQkiNy4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDU2KVxuIiArIA0KIAkJIglmb3IgKDsgRkFM
U0U7KSB7CVxuIiArIA0KIAkJIgkJCWRvaXQob2JqKTsgLy90aGlzIGlzIGNvbmRpdGlvbm5hbGx5
IHVucmVhY2hhYmxlIGNvZGUsIGJ1dCBpcyByZWNvZ25pemVkIGFzIGRlZmluaXRlbHkgdW5yZWFj
aGVhYmxlIGNvZGUsIHdpdGggZXJyb3IgCVxuIiArIA0KIAkJIgkJfQlcbiIgKyANCiAJCSIJICAg
ICAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIA0KIAkJIlVucmVhY2hhYmxlIGNvZGVcbiIg
KyANCiAJCSItLS0tLS0tLS0tXG4iICsgDQotCQkiOS4gV0FSTklORyBpbiBYLmphdmEgKGF0IGxp
bmUgNjApXG4iICsgDQorCQkiOC4gV0FSTklORyBpbiBYLmphdmEgKGF0IGxpbmUgNjApXG4iICsg
DQogCQkiCWludCBpID0gKGZhbHNlID8gZG9pdChcIjBcIikgOiBkb2l0KFwiMVwiKSk7CVxuIiAr
IA0KIAkJIgkgICAgICAgICAgICAgICAgIF5eXl5eXl5eXlxuIiArIA0KIAkJIkRlYWQgY29kZVxu
IiArIA0KIAkJIi0tLS0tLS0tLS1cbiIgKyANCi0JCSIxMC4gV0FSTklORyBpbiBYLmphdmEgKGF0
IGxpbmUgNzcpXG4iICsgDQorCQkiOS4gV0FSTklORyBpbiBYLmphdmEgKGF0IGxpbmUgNzcpXG4i
ICsgDQogCQkiCWRvaXQob2JqKTsgLy90aGlzIGlzIGNvbmRpdGlvbm5hbGx5IHVucmVhY2hhYmxl
IGNvZGUJXG4iICsgDQogCQkiCV5eXl5eXl5eXlxuIiArIA0KIAkJIkRlYWQgY29kZVxuIiArIA0K
IAkJIi0tLS0tLS0tLS1cbiIgKyANCi0JCSIxMS4gV0FSTklORyBpbiBYLmphdmEgKGF0IGxpbmUg
OTEpXG4iICsgDQorCQkiMTAuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDkxKVxuIiArIA0K
IAkJIglkb2l0KG9iaik7IC8vdGhpcyBpcyBERUZJTklURUxZIHVucmVhY2hhYmxlIGNvZGUJXG4i
ICsgDQogCQkiCV5eXl5eXl5eXlxuIiArIA0KIAkJIkRlYWQgY29kZVxuIiArIA0KLQkJIi0tLS0t
LS0tLS1cbiINCi0sDQorCQkiLS0tLS0tLS0tLVxuIiwNCiAJCW51bGwsDQogCQl0cnVlLA0KIAkJ
Y3VzdG9tT3B0aW9ucyk7DQojUCBvcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlcg0K
SW5kZXg6IHNyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9u
L1Byb2dyYW1taW5nUHJvYmxlbXNUZXN0LmphdmENCj09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NClJDUyBmaWxlOiAvY3Zz
cm9vdC9lY2xpcHNlL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1Byb2dyYW1taW5nUHJv
YmxlbXNUZXN0LmphdmEsdg0KcmV0cmlldmluZyByZXZpc2lvbiAxLjMwDQpkaWZmIC11IC1yMS4z
MCBQcm9ncmFtbWluZ1Byb2JsZW1zVGVzdC5qYXZhDQotLS0gc3JjL29yZy9lY2xpcHNlL2pkdC9j
b3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vUHJvZ3JhbW1pbmdQcm9ibGVtc1Rlc3QuamF2
YQkxNSBGZWIgMjAxMSAwNTo1MzoyNSAtMDAwMAkxLjMwDQorKysgc3JjL29yZy9lY2xpcHNlL2pk
dC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vUHJvZ3JhbW1pbmdQcm9ibGVtc1Rlc3Qu
amF2YQkxNSBGZWIgMjAxMSAwODoxNjoxOSAtMDAwMA0KQEAgLTIyODAsOSArMjI4MCw3IEBADQog
CQludWxsKTsNCiB9DQogLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcu
Y2dpP2lkPTMzNjY0OA0KLXB1YmxpYyB2b2lkIF90ZXN0MDA1OCgpIHsNCi0JaWYgKHRoaXMuY29t
cGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNSkNCi0JCXJldHVybjsNCitw
dWJsaWMgdm9pZCB0ZXN0MDA1OCgpIHsNCiAJTWFwIGN1c3RvbU9wdGlvbnMgPSBnZXRDb21waWxl
ck9wdGlvbnMoKTsNCiAJY3VzdG9tT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9S
ZXBvcnRVbnVzZWRMb2NhbCwgQ29tcGlsZXJPcHRpb25zLldBUk5JTkcpOw0KIAl0aGlzLnJ1bk5l
Z2F0aXZlVGVzdCgNCkBAIC0yMzAyLDEyICsyMzAwLDcgQEANCiAJCQkJIn1cbiINCiAJCQl9LA0K
IAkJCSItLS0tLS0tLS0tXG4iICsgDQotCQkJIjEuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5l
IDMpXG4iICsgDQotCQkJIglmaW5hbCBTdHJpbmcgbWVzc2FnZT0gbTtcbiIgKyANCi0JCQkiCSAg
ICAgICAgICAgICBeXl5eXl5eXG4iICsgDQotCQkJIlRoZSB2YWx1ZSBvZiB0aGUgbG9jYWwgdmFy
aWFibGUgbWVzc2FnZSBpcyBub3QgdXNlZFxuIiArIA0KLQkJCSItLS0tLS0tLS0tXG4iICsgDQot
CQkJIjIuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA3KVxuIiArIA0KKwkJCSIxLiBFUlJPUiBp
biBYLmphdmEgKGF0IGxpbmUgNylcbiIgKyANCiAJCQkiCWJ1ZygpOyAvLyB1bmRlZmluZWQgbWV0
aG9kXG4iICsgDQogCQkJIgleXl5cbiIgKyANCiAJCQkiVGhlIG1ldGhvZCBidWcoKSBpcyB1bmRl
ZmluZWQgZm9yIHRoZSB0eXBlIG5ldyBSdW5uYWJsZSgpe31cbiIgKyANCg==
</data>

          </attachment>
      

    </bug>

</bugzilla>