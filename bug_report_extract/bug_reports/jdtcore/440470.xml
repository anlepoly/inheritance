<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>440470</bug_id>
          
          <creation_ts>2014-07-25 22:55:00 -0400</creation_ts>
          <short_desc>debugger source lookup is much slower than 4.3</short_desc>
          <delta_ts>2015-02-16 08:56:38 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          <see_also>https://bugs.eclipse.org/bugs/show_bug.cgi?id=442923</see_also>
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords>performance</keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>3.6.2+J7</target_milestone>
          <dependson>410207</dependson>
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Lee Breisacher">leebreisacher</reporter>
          <assigned_to name="Markus Keller">markus_keller</assigned_to>
          <cc>bcclo</cc>
    
    <cc>daniel_megert</cc>
    
    <cc>dmigowski</cc>
    
    <cc>garydgregory</cc>
    
    <cc>jarthana</cc>
    
    <cc>jspring</cc>
    
    <cc>markus_keller</cc>
    
    <cc>Michael_Rennie</cc>
    
    <cc>nsv13</cc>
    
    <cc>odh14</cc>
    
    <cc>sarika.sinha</cc>
    
    <cc>Sebastian.Dietrich</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
    
    <cc>szymon.ptaszkiewicz</cc>
    
    <cc>thomas.harrer</cc>
    
    <cc>tparker</cc>
    
    <cc>zerodeath</cc>
          
          <votes>6</votes>

      

      

      <flag name="pmc_approved"
          id="63361"
          type_id="2"
          status="+"
          setter="daniel_megert"
    />
    <flag name="review"
          id="63371"
          type_id="1"
          status="+"
          setter="stephan.herrmann"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2432200</commentid>
    <comment_count>0</comment_count>
    <who name="Lee Breisacher">leebreisacher</who>
    <bug_when>2014-07-25 22:55:37 -0400</bug_when>
    <thetext>I have a project with a rather long classpath, more than 400 entries. When the debugger first stops at a breakpoint, it takes more than 30 seconds before it shows the source. I used visualvm to capture some thread dumps during that 30 seconds, and most of them look like this:

&quot;Worker-54&quot; #503 prio=5 os_prio=0 tid=0x000000001a794800 nid=0x41ce4 runnable [0x00000000327de000]
   java.lang.Thread.State: RUNNABLE
	at java.io.WinNTFileSystem.getLastModifiedTime(Native Method)
	at java.io.File.lastModified(Unknown Source)
	at java.util.zip.ZipFile.&lt;init&gt;(Unknown Source)
	at java.util.zip.ZipFile.&lt;init&gt;(Unknown Source)
	at java.util.zip.ZipFile.&lt;init&gt;(Unknown Source)
	at org.eclipse.jdt.internal.core.JavaModelManager.getZipFile(JavaModelManager.java:2712)
	at org.eclipse.jdt.internal.core.util.Util.getJdkLevel(Util.java:846)
	at org.eclipse.jdt.internal.core.JarPackageFragmentRoot.&lt;init&gt;(JarPackageFragmentRoot.java:76)
	at org.eclipse.jdt.internal.core.JavaProject.getPackageFragmentRoot(JavaProject.java:1810)
	at org.eclipse.jdt.internal.core.JavaProject.computePackageFragmentRoots(JavaProject.java:615)
	at org.eclipse.jdt.internal.core.JavaProject.computePackageFragmentRoots(JavaProject.java:708)
	at org.eclipse.jdt.internal.core.JavaProject.computePackageFragmentRoots(JavaProject.java:672)
	at org.eclipse.jdt.internal.core.JavaProject.getAllPackageFragmentRoots(JavaProject.java:1430)
	at org.eclipse.jdt.internal.core.JavaProject.getAllPackageFragmentRoots(JavaProject.java:1425)
	at org.eclipse.jdt.internal.core.JavaProject.findPackageFragmentRoot0(JavaProject.java:1228)
	at org.eclipse.jdt.internal.core.JavaProject.findPackageFragmentRoot(JavaProject.java:1220)
	at org.eclipse.jdt.internal.launching.JavaSourceLookupUtil.getPackageFragmentRoot(JavaSourceLookupUtil.java:157)
	at org.eclipse.jdt.internal.launching.JavaSourceLookupUtil.translate(JavaSourceLookupUtil.java:57)
	at org.eclipse.jdt.launching.JavaRuntime.getSourceContainers(JavaRuntime.java:2449)
	at org.eclipse.jdt.launching.sourcelookup.containers.JavaSourcePathComputer.computeSourceContainers(JavaSourcePathComputer.java:58)
	at org.eclipse.debug.internal.core.sourcelookup.SourcePathComputer.computeSourceContainers(SourcePathComputer.java:71)
	at org.eclipse.debug.core.sourcelookup.containers.DefaultSourceContainer.createSourceContainers(DefaultSourceContainer.java:117)
	at org.eclipse.debug.core.sourcelookup.containers.CompositeSourceContainer.getSourceContainers(CompositeSourceContainer.java:133)
	- locked &lt;0x00000000fa6ee7a8&gt; (a org.eclipse.debug.core.sourcelookup.containers.DefaultSourceContainer)
	at org.eclipse.debug.core.sourcelookup.containers.CompositeSourceContainer.findSourceElements(CompositeSourceContainer.java:48)
	at org.eclipse.debug.core.sourcelookup.AbstractSourceLookupParticipant.findSourceElements(AbstractSourceLookupParticipant.java:70)
	at org.eclipse.debug.core.sourcelookup.AbstractSourceLookupDirector$SourceLookupQuery.run(AbstractSourceLookupDirector.java:142)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.debug.core.sourcelookup.AbstractSourceLookupDirector.doSourceLookup(AbstractSourceLookupDirector.java:505)
	at org.eclipse.debug.core.sourcelookup.AbstractSourceLookupDirector.getSourceElement(AbstractSourceLookupDirector.java:785)
	at org.eclipse.debug.internal.ui.sourcelookup.SourceLookupFacility.lookup(SourceLookupFacility.java:346)
	- locked &lt;0x00000000ae4fd858&gt; (a org.eclipse.debug.internal.ui.sourcelookup.SourceLookupFacility$LRU)
	at org.eclipse.debug.internal.ui.sourcelookup.SourceLookupFacility$SourceLookupJob.run(SourceLookupFacility.java:737)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)

When I do the exact same thing with the exact same project in eclipse 4.3.x, the source lookup takes just a second or so - very fast. 

I suspect the problem is in the JarPackageFragmentRoot constructor where it is calling Util.getJdkLevel -- it looks like older versions of JarPackageFragmentRoot didn&apos;t have that, but I&apos;m just speculating -- I don&apos;t really know that much about it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2432201</commentid>
    <comment_count>1</comment_count>
    <who name="Gary D. Gregory">garydgregory</who>
    <bug_when>2014-07-26 00:11:46 -0400</bug_when>
    <thetext>I am experiencing the same problem.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2432450</commentid>
    <comment_count>2</comment_count>
    <who name="Sarika Sinha">sarika.sinha</who>
    <bug_when>2014-07-28 05:26:49 -0400</bug_when>
    <thetext>*** Bug 440517 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2433483</commentid>
    <comment_count>3</comment_count>
    <who name="Sarika Sinha">sarika.sinha</who>
    <bug_when>2014-07-30 05:34:38 -0400</bug_when>
    <thetext>looks like same as bug 439450

Lee, can you confirm if debugger is fast in projects without libs ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2433587</commentid>
    <comment_count>4</comment_count>
    <who name="Daniel Migowski">dmigowski</who>
    <bug_when>2014-07-30 08:42:00 -0400</bug_when>
    <thetext>I wonder why there has to be a zip file lookup in the first place. I believed the jar files would have been indexed anyway long before one starts to debug the code, so why would one want to do a lookup into the jar files now? Even if the source can be found in the source folders of the project and they are at the top of the build path...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2433602</commentid>
    <comment_count>5</comment_count>
    <who name="Lee Breisacher">leebreisacher</who>
    <bug_when>2014-07-30 09:03:12 -0400</bug_when>
    <thetext>Oh yeah, sorry I meant to say that, Yes indeed the debugger is fast on a project without libs. 

(In reply to Sarika Sinha from comment #3)
&gt; looks like same as bug 439450
&gt; 
&gt; Lee, can you confirm if debugger is fast in projects without libs ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2433917</commentid>
    <comment_count>6</comment_count>
    <who name="Sarika Sinha">sarika.sinha</who>
    <bug_when>2014-07-30 23:51:50 -0400</bug_when>
    <thetext>*** Bug 439450 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2435957</commentid>
    <comment_count>7</comment_count>
    <who name="NSV">nsv13</who>
    <bug_when>2014-08-05 14:57:16 -0400</bug_when>
    <thetext>I have the exact same problem on Centos 6.

On big project the debug is very slow.
On &quot;normal&quot; project the debug is very quick</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2444065</commentid>
    <comment_count>8</comment_count>
    <who name="t h">thomas.harrer</who>
    <bug_when>2014-08-27 04:25:46 -0400</bug_when>
    <thetext>No problem with 4.3, with 4.4 the debugger is extreme slow.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2444973</commentid>
    <comment_count>9</comment_count>
    <who name="Michael Rennie">Michael_Rennie</who>
    <bug_when>2014-08-28 11:00:25 -0400</bug_when>
    <thetext>(In reply to t h from comment #8)
&gt; No problem with 4.3, with 4.4 the debugger is extreme slow.

I wonder too, if bug 437193 was causing some of this slow-down. As part of the fix for that bug we got rid of one entire layer of (UI)Jobs.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2445488</commentid>
    <comment_count>10</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2014-08-29 09:54:28 -0400</bug_when>
    <thetext>(In reply to Michael Rennie from comment #9)
&gt; (In reply to t h from comment #8)
&gt; &gt; No problem with 4.3, with 4.4 the debugger is extreme slow.
&gt; 
&gt; I wonder too, if bug 437193 was causing some of this slow-down. As part of
&gt; the fix for that bug we got rid of one entire layer of (UI)Jobs.

If so, we have to fix this in 4.4.x too.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2445502</commentid>
    <comment_count>11</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-08-29 10:18:17 -0400</bug_when>
    <thetext>I&apos;m pretty sure the regression is due to the fix for bug 410207. Moving to JDT Core.

Like every IJavaElement, JarPackageFragmentRoot is supposed to be a *handle*, i.e. it should be very lightweight and its creation should not depend on availability of the referenced element.

The JarPackageFragmentRoot#complianceLevel field is unnecessary. This value should be computed in #computeChildren(..). I&apos;m preparing a patch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2445513</commentid>
    <comment_count>12</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-08-29 10:35:15 -0400</bug_when>
    <thetext>Is this the same performance regression that has been fixed via bug 441726?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2445517</commentid>
    <comment_count>13</comment_count>
      <attachid>246547</attachid>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-08-29 10:48:36 -0400</bug_when>
    <thetext>Created attachment 246547
Fix

Looks like there&apos;s already a workaround for this regression in master, see bug 441726. I think the solution chosen in that bug is wrong. Having to maintain yet another cache is unnecessary and fragile.

Here&apos;s a straightforward fix that just moves the computation of the complianceLevel back to where it should be.

This patch needs to be tested with the scenarios of this bug, bug 410207, bug 441726, and their dups.
After that, it needs to be backported to all branches that received bug 410207.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2445522</commentid>
    <comment_count>14</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2014-08-29 10:51:33 -0400</bug_when>
    <thetext>+1 to fix this in 4.4.1 and below.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2445534</commentid>
    <comment_count>15</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-08-29 11:17:42 -0400</bug_when>
    <thetext>I&apos;m sorry the regression occurred in the first place,
but how can moving initialization to a slightly later point help scenarios
like refreshing the package explorer (bug 441726 comment 0)?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2445537</commentid>
    <comment_count>16</comment_count>
    <who name="Szymon Ptaszkiewicz">szymon.ptaszkiewicz</who>
    <bug_when>2014-08-29 11:26:42 -0400</bug_when>
    <thetext>If the regression is caused by the bad fix for bug 410207, then it is my fault, sorry.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2445545</commentid>
    <comment_count>17</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-08-29 11:39:25 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #15)
&gt; but how can moving initialization to a slightly later point help scenarios
&gt; like refreshing the package explorer (bug 441726 comment 0)?

It&apos;s all about the expected cost of operations:

The expected cost of a handle creation is negligible. That&apos;s why we can create new JarPackageFragmentRoot objects all the time.

On the other hand, we only call JarPackageFragmentRoot#computeChildren(..) when we&apos;re ready to pay the price for opening the JAR and reading its contents. The implementation of computeChildren(..) opens the ZipFile anyway (via getJar()), so the detection of the class file level is almost free there. The ZipFile is cached by the JavaModelManager.

If everything works as it should, then the children of a JarPackageFragmentRoot should be cached in a JavaElementInfo (here: JavaProjectElementInfo) and should only be re-computed when the Jar has been touched or when the element info cache overflows.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2445598</commentid>
    <comment_count>18</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-08-29 13:35:56 -0400</bug_when>
    <thetext>I&apos;ve verified that comment 13 fixes bug 441726. It brings that performance test back to 4.3.2 level, and it&apos;s a bit better than what&apos;s in master.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2445603</commentid>
    <comment_count>19</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-08-29 13:56:56 -0400</bug_when>
    <thetext>(In reply to Markus Keller from comment #17)

Thanks for explaining!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2445676</commentid>
    <comment_count>20</comment_count>
    <who name="Terry Parker">tparker</who>
    <bug_when>2014-08-29 17:29:46 -0400</bug_when>
    <thetext>(In reply to Markus Keller from comment #18)
&gt; I&apos;ve verified that comment 13 fixes bug 441726. It brings that performance
&gt; test back to 4.3.2 level, and it&apos;s a bit better than what&apos;s in master.

I verified that as well. Somehow when evaluating bug 441726, I convinced myself that object/handle creation and JarPackageFragmentRoot#computeChildren() invocations were on the order of 1:1. Before reading your explanation I reinvestigated and saw I was mistaken. I support rolling back that change and implementing this one.

I also agree that having to maintain yet another cache is not good. My team has submitted several patches that fixed JDT caching problems, and we continue to find areas where caches are incorrectly evicted or underutilized. There appear to be too many caches, they are uncoordinated, and they are difficult to discover. I opened bug 442924, &quot;Rationalize jar-related caches&quot;, where we can discuss the issue and try to make some progress.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2445862</commentid>
    <comment_count>21</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-08-31 19:36:17 -0400</bug_when>
    <thetext>Thanks for the confirmation, Terry. I agree the current caching strategies are not as clear as they could/should be. Re &quot;who&apos;s to blame&quot;: I think pretty much everybody involved can take a share, yours truly included.

I&apos;ve verified that comment 13 still fixes bug 410207 as well.

I&apos;ve reverted bug 441726 and committed comment 13 in master: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=d35306cb5dcf7e4ac666fd0505f3086f50241fb2</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2445877</commentid>
    <comment_count>22</comment_count>
    <who name="Gary D. Gregory">garydgregory</who>
    <bug_when>2014-08-31 22:39:48 -0400</bug_when>
    <thetext>Will this make it in time for 4.4.1?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2446009</commentid>
    <comment_count>23</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-09-01 06:42:09 -0400</bug_when>
    <thetext>(In reply to Gary D. Gregory from comment #22)
&gt; Will this make it in time for 4.4.1?

Yes. N20140831-2000 already contains the fix. I&apos;m running on that build now, and others could test it too (or test tomorrow&apos;s I-build).

Jay, please review the fix for R4_4_maintenance and the other branches where bug 410207 was released.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2446054</commentid>
    <comment_count>24</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-09-01 08:42:10 -0400</bug_when>
    <thetext>Srikanth/Stephan, can you please review this for 4.4.1? I don&apos;t expect to be able to get to this today. TIA!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2446151</commentid>
    <comment_count>25</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-09-01 18:44:15 -0400</bug_when>
    <thetext>From looking at the code and reading comments here, I can confirm that http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=d35306cb5dcf7e4ac666fd0505f3086f50241fb2 is a very straight-forward and clean improvement on top of bug 410207.

I also checked that the sibling changes in PackageFragmentRoot and PackageFragmentRootInfo already perform their work during computeFolderChildren and computeFolderNonJavaResources, resp., good.

I did not dive into details of why bug 441726 would be inferior, except for aspect of clarity of design.

I also did not perform any performance measurements, trusting that comment 18 and comment 20 already sufficiently back this aspect.

Under these reservations I&apos;m in favor of back porting to 4.4.1 and below.


BTW: I&apos;m right now looking at poor performance of an Xtext-based tool, which is caused by this exact performance bug. As soon as we have a Luna-based build with this patch I can give it some real-world testing in that context.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2446186</commentid>
    <comment_count>26</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-09-02 00:50:25 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #25)
&gt; From looking at the code and reading comments here, I can confirm that
&gt; http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
&gt; ?id=d35306cb5dcf7e4ac666fd0505f3086f50241fb2 is a very straight-forward and
&gt; clean improvement on top of bug 410207.

Thanks Stephan. I will release this for 4.4.1 in a bit.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2446258</commentid>
    <comment_count>27</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-09-02 04:36:49 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #26)
&gt; Thanks Stephan. I will release this for 4.4.1 in a bit.

It&apos;s here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=R4_4_maintenance&amp;id=5781fc0d3b262a5bc6ee6e12f16976ad6642c6ae

Stephan, for the records, can you please grant the +1 for the review.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2446263</commentid>
    <comment_count>28</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-09-02 04:51:56 -0400</bug_when>
    <thetext>Resolving</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2446345</commentid>
    <comment_count>29</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-09-02 07:36:48 -0400</bug_when>
    <thetext>(In reply to Markus Keller from comment #13)
&gt; it needs to be backported to all branches that received bug 410207.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2446401</commentid>
    <comment_count>30</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-09-02 09:07:54 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #27)
&gt; Stephan, for the records, can you please grant the +1 for the review.

sure</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2446774</commentid>
    <comment_count>31</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-09-02 18:53:21 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #25)
&gt; BTW: I&apos;m right now looking at poor performance of an Xtext-based tool, which
&gt; is caused by this exact performance bug. As soon as we have a Luna-based
&gt; build with this patch I can give it some real-world testing in that context.

Quick test in the context of that Xtext-based tool:
Using build M20140902-1430 a full build for one particular project went down from 6 min to 2 min. Great!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454595</commentid>
    <comment_count>32</comment_count>
    <who name="Claudio Bottai">bcclo</who>
    <bug_when>2014-09-21 17:47:43 -0400</bug_when>
    <thetext>Siete penosi</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2455096</commentid>
    <comment_count>33</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-09-23 00:18:11 -0400</bug_when>
    <thetext>Backported in R4_3_maintenance:
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=R4_3_maintenance&amp;id=4fcbe6b2b83836ba917473ab868964bb3274bf91

And R3_8_maintenance:
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=R3_8_maintenance&amp;id=aa07712f054e28ee243ed0acc633b38d78178dc7</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2455165</commentid>
    <comment_count>34</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-09-23 04:57:54 -0400</bug_when>
    <thetext>And in R3_7_maintenance:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=R3_7_maintenance&amp;id=cfc66021f700bf87dae5ce885c77781de04bcdf8

and in R3_6_maintenance_Java7:
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=R3_6_maintenance_Java7&amp;id=d945115702aaa61b428514d49a58fc83ca27c039

Tagged and maps files updated too.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2455166</commentid>
    <comment_count>35</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-09-23 05:02:33 -0400</bug_when>
    <thetext>As per comment #31, marking as verified.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2455744</commentid>
    <comment_count>36</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-09-24 07:53:20 -0400</bug_when>
    <thetext>*** Bug 443590 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2459762</commentid>
    <comment_count>37</comment_count>
    <who name="Michael Rennie">Michael_Rennie</who>
    <bug_when>2014-10-03 09:53:29 -0400</bug_when>
    <thetext>*** Bug 365394 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>246547</attachid>
            <date>2014-08-29 10:48:00 -0400</date>
            <delta_ts>2014-08-29 10:48:36 -0400</delta_ts>
            <desc>Fix</desc>
            <filename>eclipse.jdt.core.patch</filename>
            <type>text/plain</type>
            <size>3344</size>
            <attacher name="Markus Keller">markus_keller</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMAojUCBvcmcuZWNsaXBzZS5qZHQuY29yZQpk
aWZmIC0tZ2l0IG1vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0phclBhY2thZ2VG
cmFnbWVudFJvb3QuamF2YSBtb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9KYXJQ
YWNrYWdlRnJhZ21lbnRSb290LmphdmEKaW5kZXggMDlmMzM2NS4uNzhhNjZiNCAxMDA2NDQKLS0t
IG1vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0phclBhY2thZ2VGcmFnbWVudFJv
b3QuamF2YQorKysgbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvSmFyUGFja2Fn
ZUZyYWdtZW50Um9vdC5qYXZhCkBAIC00MiwxMSArNDIsNiBAQAogCXByaXZhdGUgZmluYWwgc3Rh
dGljIEFycmF5TGlzdCBFTVBUWV9MSVNUID0gbmV3IEFycmF5TGlzdCgpOwogCiAJLyoqCi0JICog
Q29tcGlsZXIgY29tcGxpYW5jZSBsZXZlbCB0aGF0IHdhcyB1c2VkIHRvIHByb2R1Y2UgdGhlIGph
ci4KLQkgKi8KLQlwcm90ZWN0ZWQgZmluYWwgU3RyaW5nIGNvbXBsaWFuY2VMZXZlbDsKLQotCS8q
KgogCSAqIFRoZSBwYXRoIHRvIHRoZSBqYXIgZmlsZQogCSAqIChhIHdvcmtzcGFjZSByZWxhdGl2
ZSBwYXRoIGlmIHRoZSBqYXIgaXMgaW50ZXJuYWwsCiAJICogb3IgYW4gT1MgcGF0aCBpZiB0aGUg
amFyIGlzIGV4dGVybmFsKQpAQCAtNjEsOSArNTYsNiBAQAogCXByb3RlY3RlZCBKYXJQYWNrYWdl
RnJhZ21lbnRSb290KElQYXRoIGV4dGVybmFsSmFyUGF0aCwgSmF2YVByb2plY3QgcHJvamVjdCkg
ewogCQlzdXBlcihudWxsLCBwcm9qZWN0KTsKIAkJdGhpcy5qYXJQYXRoID0gZXh0ZXJuYWxKYXJQ
YXRoOwotCQlPYmplY3QgZmlsZSA9IEphdmFNb2RlbC5nZXRUYXJnZXQoZ2V0UGF0aCgpLCB0cnVl
KTsKLQkJbG9uZyBsZXZlbCA9IFV0aWwuZ2V0SmRrTGV2ZWwoZmlsZSk7Ci0JCXRoaXMuY29tcGxp
YW5jZUxldmVsID0gQ29tcGlsZXJPcHRpb25zLnZlcnNpb25Gcm9tSmRrTGV2ZWwobGV2ZWwpOwog
CX0KIAkvKioKIAkgKiBDb25zdHJ1Y3RzIGEgcGFja2FnZSBmcmFnbWVudCByb290IHdoaWNoIGlz
IHRoZSByb290IG9mIHRoZSBKYXZhIHBhY2thZ2UgZGlyZWN0b3J5IGhpZXJhcmNoeQpAQCAtNzIs
OSArNjQsNiBAQAogCXByb3RlY3RlZCBKYXJQYWNrYWdlRnJhZ21lbnRSb290KElSZXNvdXJjZSBy
ZXNvdXJjZSwgSmF2YVByb2plY3QgcHJvamVjdCkgewogCQlzdXBlcihyZXNvdXJjZSwgcHJvamVj
dCk7CiAJCXRoaXMuamFyUGF0aCA9IHJlc291cmNlLmdldEZ1bGxQYXRoKCk7Ci0JCU9iamVjdCBm
aWxlID0gSmF2YU1vZGVsLmdldFRhcmdldChnZXRQYXRoKCksIHRydWUpOwotCQlsb25nIGxldmVs
ID0gVXRpbC5nZXRKZGtMZXZlbChmaWxlKTsKLQkJdGhpcy5jb21wbGlhbmNlTGV2ZWwgPSBDb21w
aWxlck9wdGlvbnMudmVyc2lvbkZyb21KZGtMZXZlbChsZXZlbCk7CiAJfQogCiAJLyoqCkBAIC04
Nyw2ICs3Niw5IEBACiAJCUlKYXZhRWxlbWVudFtdIGNoaWxkcmVuOwogCQlaaXBGaWxlIGphciA9
IG51bGw7CiAJCXRyeSB7CisJCQlPYmplY3QgZmlsZSA9IEphdmFNb2RlbC5nZXRUYXJnZXQoZ2V0
UGF0aCgpLCB0cnVlKTsKKwkJCWxvbmcgbGV2ZWwgPSBVdGlsLmdldEpka0xldmVsKGZpbGUpOwor
CQkJU3RyaW5nIGNvbXBsaWFuY2UgPSBDb21waWxlck9wdGlvbnMudmVyc2lvbkZyb21KZGtMZXZl
bChsZXZlbCk7CiAJCQlqYXIgPSBnZXRKYXIoKTsKIAogCQkJLy8gYWx3YXlzIGNyZWF0ZSB0aGUg
ZGVmYXVsdCBwYWNrYWdlCkBAIC05NCw3ICs4Niw3IEBACiAKIAkJCWZvciAoRW51bWVyYXRpb24g
ZT0gamFyLmVudHJpZXMoKTsgZS5oYXNNb3JlRWxlbWVudHMoKTspIHsKIAkJCQlaaXBFbnRyeSBt
ZW1iZXI9IChaaXBFbnRyeSkgZS5uZXh0RWxlbWVudCgpOwotCQkJCWluaXRSYXdQYWNrYWdlSW5m
byhyYXdQYWNrYWdlSW5mbywgbWVtYmVyLmdldE5hbWUoKSwgbWVtYmVyLmlzRGlyZWN0b3J5KCkp
OworCQkJCWluaXRSYXdQYWNrYWdlSW5mbyhyYXdQYWNrYWdlSW5mbywgbWVtYmVyLmdldE5hbWUo
KSwgbWVtYmVyLmlzRGlyZWN0b3J5KCksIGNvbXBsaWFuY2UpOwogCQkJfQogCiAJCQkvLyBsb29w
IHRocm91Z2ggYWxsIG9mIHJlZmVyZW5jZWQgcGFja2FnZXMsIGNyZWF0aW5nIHBhY2thZ2UgZnJh
Z21lbnRzIGlmIG5lY2Vzc2FyeQpAQCAtMjIxLDcgKzIxMyw3IEBACiAJcHVibGljIGludCBoYXNo
Q29kZSgpIHsKIAkJcmV0dXJuIHRoaXMuamFyUGF0aC5oYXNoQ29kZSgpOwogCX0KLQlwcml2YXRl
IHZvaWQgaW5pdFJhd1BhY2thZ2VJbmZvKEhhc2h0YWJsZU9mQXJyYXlUb09iamVjdCByYXdQYWNr
YWdlSW5mbywgU3RyaW5nIGVudHJ5TmFtZSwgYm9vbGVhbiBpc0RpcmVjdG9yeSkgeworCXByaXZh
dGUgdm9pZCBpbml0UmF3UGFja2FnZUluZm8oSGFzaHRhYmxlT2ZBcnJheVRvT2JqZWN0IHJhd1Bh
Y2thZ2VJbmZvLCBTdHJpbmcgZW50cnlOYW1lLCBib29sZWFuIGlzRGlyZWN0b3J5LCBTdHJpbmcg
Y29tcGxpYW5jZSkgewogCQlpbnQgbGFzdFNlcGFyYXRvciA9IGlzRGlyZWN0b3J5ID8gZW50cnlO
YW1lLmxlbmd0aCgpLTEgOiBlbnRyeU5hbWUubGFzdEluZGV4T2YoJy8nKTsKIAkJU3RyaW5nW10g
cGtnTmFtZSA9IFV0aWwuc3BsaXRPbignLycsIGVudHJ5TmFtZSwgMCwgbGFzdFNlcGFyYXRvcik7
CiAJCVN0cmluZ1tdIGV4aXN0aW5nID0gbnVsbDsKQEAgLTIzNSw4ICsyMjcsNyBAQAogCQlKYXZh
TW9kZWxNYW5hZ2VyIG1hbmFnZXIgPSBKYXZhTW9kZWxNYW5hZ2VyLmdldEphdmFNb2RlbE1hbmFn
ZXIoKTsKIAkJZm9yIChpbnQgaSA9IGV4aXN0aW5nTGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsK
IAkJCS8vIHNvdXJjZUxldmVsIG11c3QgYmUgbnVsbCBiZWNhdXNlIHdlIGtub3cgbm90aGluZyBh
Ym91dCBpdCBiYXNlZCBvbiBhIGphciBmaWxlCi0JCQkvLyBjb21wbGlhbmNlTGV2ZWwgY2FuIGJl
IHJldHJpZXZlZCBmcm9tIGEgamFyIGZpbGUKLQkJCWlmIChVdGlsLmlzVmFsaWRGb2xkZXJOYW1l
Rm9yUGFja2FnZShwa2dOYW1lW2ldLCBudWxsLCB0aGlzLmNvbXBsaWFuY2VMZXZlbCkpIHsKKwkJ
CWlmIChVdGlsLmlzVmFsaWRGb2xkZXJOYW1lRm9yUGFja2FnZShwa2dOYW1lW2ldLCBudWxsLCBj
b21wbGlhbmNlKSkgewogCQkJCVN5c3RlbS5hcnJheWNvcHkoZXhpc3RpbmcsIDAsIGV4aXN0aW5n
ID0gbmV3IFN0cmluZ1tpKzFdLCAwLCBpKTsKIAkJCQlleGlzdGluZ1tpXSA9IG1hbmFnZXIuaW50
ZXJuKHBrZ05hbWVbaV0pOwogCQkJCXJhd1BhY2thZ2VJbmZvLnB1dChleGlzdGluZywgbmV3IEFy
cmF5TGlzdFtdIHsgRU1QVFlfTElTVCwgRU1QVFlfTElTVCB9KTs=
</data>

          </attachment>
      

    </bug>

</bugzilla>