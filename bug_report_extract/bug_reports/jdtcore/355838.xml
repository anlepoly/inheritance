<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>355838</bug_id>
          
          <creation_ts>2011-08-25 09:58:00 -0400</creation_ts>
          <short_desc>[compiler] ecj compiles the code that javac6 rejects</short_desc>
          <delta_ts>2011-10-24 02:25:06 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.7.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>3.8 M3</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Satyam Kandula">satyam.kandula</reporter>
          <assigned_to name="Ayushman Jain">amj87.iitr</assigned_to>
          <cc>Olivier_Thomann</cc>
    
    <cc>pwebster</cc>
    
    <cc>remy.suen</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="45332"
          type_id="1"
          status="+"
          setter="srikanth_sankaran"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1984434</commentid>
    <comment_count>0</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-08-25 09:58:39 -0400</bug_when>
    <thetext>This is a FUP of bug 317719. This is the test that Ayush mentioned in bug 317719 comment 36. I have modified the code to use the function too
###########
package p;
import java.util.ArrayList;
import java.util.List;

public class ErasureBug {       

    public String output(List&lt;String&gt; integers) {
        System.out.println(&quot;In List&lt;String&gt;&quot;);
        return &quot;&quot;;   
    }      

    public void output(List doubles) {  
         System.out.println(&quot;In List#RawType&quot;);
        return; 
    } 
    public static void main(String[] args) {
        new ErasureBug().output(new ArrayList());
    } 
}
########
javac6 gives an error here, but ecj doesn&apos;t complain when the project compliance is 1.6.Not giving an error is ok, but in this example, the runtime differ from what is expected otherwise and hence we should better fix it.
If the compiler doesn&apos;t report an error, I will expect the call to output which takes the rawtype, but with ecj the call is going to List&lt;String&gt;.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1984866</commentid>
    <comment_count>1</comment_count>
      <attachid>202217</attachid>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-08-26 06:45:33 -0400</bug_when>
    <thetext>Created attachment 202217
proposed fix v1.0

I believe all&apos;s not well with the way we compare erasure of one method against the signature of another. This is because what we actually want to check is that if one method is foo(List&lt;String&gt;), and another is foo(List). erasure of first is foo(List), same as the second foo. But with the current approach when we compare params[index].erasure != params[index] , we actually end up comparing List&lt;E&gt; with List.

This patch tries to fix that. Passes all tests apart from one, which is a dup of the reported case here.
Srikanth, what do you think?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1988850</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-09-05 02:30:25 -0400</bug_when>
    <thetext>(In reply to comment #1)
&gt; Created attachment 202217 [details]
&gt; proposed fix v1.0
&gt; 
&gt; I believe all&apos;s not well with the way we compare erasure of one method against
&gt; the signature of another. This is because what we actually want to check is
&gt; that if one method is foo(List&lt;String&gt;), and another is foo(List). erasure of
&gt; first is foo(List), same as the second foo. But with the current approach when
&gt; we compare params[index].erasure != params[index] , we actually end up
&gt; comparing List&lt;E&gt; with List.
&gt; 
&gt; This patch tries to fix that. Passes all tests apart from one, which is a dup
&gt; of the reported case here.
&gt; Srikanth, what do you think?

(1) Can you please check whether the unrestored part of code from
https://bugs.eclipse.org/bugs/attachment.cgi?id=146981 (essentially
the changes to MethodBinding.java as others have been restored over
two passes) has any effect on this bug without your patch ? 

(2) Can you check what was eclipse&apos;s behavior on this before Kent&apos;s
original changes went in ? If things matched javac, why and how ? 
If things didn&apos;t match javac, then did it match HEAD without your
patch ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1998349</commentid>
    <comment_count>3</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-09-22 13:02:41 -0400</bug_when>
    <thetext>(In reply to comment #2)
&gt; (1) Can you please check whether the unrestored part of code from
&gt; https://bugs.eclipse.org/bugs/attachment.cgi?id=146981 (essentially
&gt; the changes to MethodBinding.java as others have been restored over
&gt; two passes) has any effect on this bug without your patch ? 
No. I tried, but those changes don&apos;t have any effect.

&gt; (2) Can you check what was eclipse&apos;s behavior on this before Kent&apos;s
&gt; original changes went in ? If things matched javac, why and how ? 
&gt; If things didn&apos;t match javac, then did it match HEAD without your
&gt; patch ?

I tried 3.5.2 and he behaviour matches the current HEAD behaviour i.e. both are incompatible with javac6.

I still stand by my analysis in comment 1.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1999573</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-09-26 05:27:42 -0400</bug_when>
    <thetext>Patch looks ok to me.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2002079</commentid>
    <comment_count>5</comment_count>
      <attachid>204248</attachid>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-09-29 02:28:26 -0400</bug_when>
    <thetext>Created attachment 204248
fix + tests

Added regression test and updated a previous test to the new behavior (matches javac6 now)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2002080</commentid>
    <comment_count>6</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-09-29 02:29:19 -0400</bug_when>
    <thetext>Released commit 7cddbfa7d184b903e6606f21236d46be8958fe44 into HEAD for 3.8M3</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2015116</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-10-24 02:25:06 -0400</bug_when>
    <thetext>Verified for 3.8 M3 using build id: N20111022-2000</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>202217</attachid>
            <date>2011-08-26 06:45:00 -0400</date>
            <delta_ts>2011-09-29 02:28:26 -0400</delta_ts>
            <desc>proposed fix v1.0</desc>
            <filename>patch355838.txt</filename>
            <type>text/plain</type>
            <size>2180</size>
            <attacher name="Ayushman Jain">amj87.iitr</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMA0KI1Agb3JnLmVjbGlwc2UuamR0LmNvcmUN
CkluZGV4OiBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3Vw
L1NvdXJjZVR5cGVCaW5kaW5nLmphdmENCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NClJDUyBmaWxlOiAvY3Zzcm9vdC9l
Y2xpcHNlL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9sb29rdXAvU291cmNlVHlwZUJpbmRpbmcuamF2YSx2DQpyZXRyaWV2aW5n
IHJldmlzaW9uIDEuMTg5LjIuMw0KZGlmZiAtdSAtcjEuMTg5LjIuMyBTb3VyY2VUeXBlQmluZGlu
Zy5qYXZhDQotLS0gY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xv
b2t1cC9Tb3VyY2VUeXBlQmluZGluZy5qYXZhCTE4IEF1ZyAyMDExIDEwOjAyOjI0IC0wMDAwCTEu
MTg5LjIuMw0KKysrIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9s
b29rdXAvU291cmNlVHlwZUJpbmRpbmcuamF2YQkyNiBBdWcgMjAxMSAxMDo0MTowNCAtMDAwMA0K
QEAgLTEyMzMsOCArMTIzMywxNiBAQA0KIAkJCQkJCQkJCWludCBpbmRleCA9IHBMZW5ndGg7DQog
CQkJCQkJCQkJLy8gaXMgZXJhc3VyZSBvZiBzaWduYXR1cmUgb2YgbTIgc2FtZSBhcyBzaWduYXR1
cmUgb2YgbTE/DQogCQkJCQkJCQkJZm9yICg7IC0taW5kZXggPj0gMDspIHsNCi0JCQkJCQkJCQkJ
aWYgKHBhcmFtczFbaW5kZXhdICE9IHBhcmFtczJbaW5kZXhdLmVyYXN1cmUoKSkNCi0JCQkJCQkJ
CQkJCWJyZWFrOw0KKwkJCQkJCQkJCQlpZiAocGFyYW1zMVtpbmRleF0gIT0gcGFyYW1zMltpbmRl
eF0uZXJhc3VyZSgpKSB7DQorCQkJCQkJCQkJCQkvLyBJZiBvbmUgb2YgdGhlbSBpcyBhIHJhdyB0
eXBlDQorCQkJCQkJCQkJCQlpZiAocGFyYW1zMVtpbmRleF0gaW5zdGFuY2VvZiBSYXdUeXBlQmlu
ZGluZykgew0KKwkJCQkJCQkJCQkJCWlmIChwYXJhbXMyW2luZGV4XS5lcmFzdXJlKCkgIT0gKChS
YXdUeXBlQmluZGluZylwYXJhbXMxW2luZGV4XSkuYWN0dWFsVHlwZSgpKSB7DQorCQkJCQkJCQkJ
CQkJCWJyZWFrOw0KKwkJCQkJCQkJCQkJCX0NCisJCQkJCQkJCQkJCX0gZWxzZSAgew0KKwkJCQkJ
CQkJCQkJCWJyZWFrOw0KKwkJCQkJCQkJCQkJfQ0KKwkJCQkJCQkJCQl9DQogCQkJCQkJCQkJCWlm
IChwYXJhbXMxW2luZGV4XSA9PSBwYXJhbXMyW2luZGV4XSkgew0KIAkJCQkJCQkJCQkJVHlwZUJp
bmRpbmcgdHlwZSA9IHBhcmFtczFbaW5kZXhdLmxlYWZDb21wb25lbnRUeXBlKCk7DQogCQkJCQkJ
CQkJCQlpZiAodHlwZSBpbnN0YW5jZW9mIFNvdXJjZVR5cGVCaW5kaW5nICYmIHR5cGUudHlwZVZh
cmlhYmxlcygpICE9IEJpbmRpbmcuTk9fVFlQRV9WQVJJQUJMRVMpIHsNCkBAIC0xMjQ2LDggKzEy
NTQsMTYgQEANCiAJCQkJCQkJCQlpZiAoaW5kZXggPj0gMCAmJiBpbmRleCA8IHBMZW5ndGgpIHsN
CiAJCQkJCQkJCQkJLy8gaXMgZXJhc3VyZSBvZiBzaWduYXR1cmUgb2YgbTEgc2FtZSBhcyBzaWdu
YXR1cmUgb2YgbTI/DQogCQkJCQkJCQkJCWZvciAoaW5kZXggPSBwTGVuZ3RoOyAtLWluZGV4ID49
IDA7KQ0KLQkJCQkJCQkJCQkJaWYgKHBhcmFtczFbaW5kZXhdLmVyYXN1cmUoKSAhPSBwYXJhbXMy
W2luZGV4XSkNCi0JCQkJCQkJCQkJCQlicmVhazsNCisJCQkJCQkJCQkJCWlmIChwYXJhbXMxW2lu
ZGV4XS5lcmFzdXJlKCkgIT0gcGFyYW1zMltpbmRleF0pIHsNCisJCQkJCQkJCQkJCQkvLyBJZiBv
bmUgb2YgdGhlbSBpcyBhIHJhdyB0eXBlDQorCQkJCQkJCQkJCQkJaWYgKHBhcmFtczJbaW5kZXhd
IGluc3RhbmNlb2YgUmF3VHlwZUJpbmRpbmcpIHsNCisJCQkJCQkJCQkJCQkJaWYgKHBhcmFtczFb
aW5kZXhdLmVyYXN1cmUoKSAhPSAoKFJhd1R5cGVCaW5kaW5nKXBhcmFtczJbaW5kZXhdKS5hY3R1
YWxUeXBlKCkpIHsNCisJCQkJCQkJCQkJCQkJCWJyZWFrOw0KKwkJCQkJCQkJCQkJCQl9DQorCQkJ
CQkJCQkJCQkJfSBlbHNlICB7DQorCQkJCQkJCQkJCQkJCWJyZWFrOw0KKwkJCQkJCQkJCQkJCX0N
CisJCQkJCQkJCQkJCX0NCiAJCQkJCQkJCQkJDQogCQkJCQkJCQkJfQ0KIAkJCQkJCQkJCWlmIChp
bmRleCA+PSAwKSB7DQo=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>204248</attachid>
            <date>2011-09-29 02:28:00 -0400</date>
            <delta_ts>2011-09-29 02:28:26 -0400</delta_ts>
            <desc>fix + tests</desc>
            <filename>HEAD--Fixed-bug-355838-compiler-ecj-compiles-the-cod.patch</filename>
            <type>text/plain</type>
            <size>6870</size>
            <attacher name="Ayushman Jain">amj87.iitr</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL01ldGhvZFZlcmlmeVRl
c3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL01ldGhvZFZlcmlmeVRlc3Qu
amF2YQppbmRleCA2ZWIxMjk5Li4wZGViODk0IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGls
ZXIvcmVncmVzc2lvbi9NZXRob2RWZXJpZnlUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBp
bGVyL3JlZ3Jlc3Npb24vTWV0aG9kVmVyaWZ5VGVzdC5qYXZhCkBAIC0xMTIzOSwyNCArMTEyMzks
NyBAQAogLy9odHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9Mjg1
MDg4CiBwdWJsaWMgdm9pZCB0ZXN0MjAwKCkgewogCU1hcCBvcHRpb25zID0gZ2V0Q29tcGlsZXJP
cHRpb25zKCk7Ci0JU3RyaW5nIGNvbXBsaWFuY2UgPSAoU3RyaW5nKSBvcHRpb25zLmdldChKYXZh
Q29yZS5DT01QSUxFUl9DT01QTElBTkNFKTsKLQlTdHJpbmcgZXJyb3JNZXNzYWdlID0gY29tcGxp
YW5jZSA9PSBKYXZhQ29yZS5WRVJTSU9OXzFfNiA/Ci0JCQkiLS0tLS0tLS0tLVxuIiArIAotCQkJ
IjEuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDMpXG4iICsgCi0JCQkiCWludCBmb28oQ29s
bGVjdGlvbiBiYXIpIHsgcmV0dXJuIDA7IH1cbiIgKyAKLQkJCSIJICAgIF5eXl5eXl5eXl5eXl5e
Xl5eXl5cbiIgKyAKLQkJCSJNZXRob2QgZm9vKENvbGxlY3Rpb24pIGhhcyB0aGUgc2FtZSBlcmFz
dXJlIGZvbyhDb2xsZWN0aW9uPEU+KSBhcyBhbm90aGVyIG1ldGhvZCBpbiB0eXBlIFhcbiIgKyAK
LQkJCSItLS0tLS0tLS0tXG4iICsgCi0JCQkiMi4gV0FSTklORyBpbiBYLmphdmEgKGF0IGxpbmUg
MylcbiIgKyAKLQkJCSIJaW50IGZvbyhDb2xsZWN0aW9uIGJhcikgeyByZXR1cm4gMDsgfVxuIiAr
IAotCQkJIgkgICAgICAgIF5eXl5eXl5eXl5cbiIgKyAKLQkJCSJDb2xsZWN0aW9uIGlzIGEgcmF3
IHR5cGUuIFJlZmVyZW5jZXMgdG8gZ2VuZXJpYyB0eXBlIENvbGxlY3Rpb248RT4gc2hvdWxkIGJl
IHBhcmFtZXRlcml6ZWRcbiIgKyAKLQkJCSItLS0tLS0tLS0tXG4iICsgCi0JCQkiMy4gV0FSTklO
RyBpbiBYLmphdmEgKGF0IGxpbmUgNClcbiIgKyAKLQkJCSIJZG91YmxlIGZvbyhDb2xsZWN0aW9u
PFN0cmluZz4gYmFyKSB7cmV0dXJuIDA7IH1cbiIgKyAKLQkJCSIJICAgICAgIF5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXlxuIiArIAotCQkJIk1ldGhvZCBmb28oQ29sbGVjdGlvbjxTdHJpbmc+
KSBoYXMgdGhlIHNhbWUgZXJhc3VyZSBmb28oQ29sbGVjdGlvbjxFPikgYXMgYW5vdGhlciBtZXRo
b2QgaW4gdHlwZSBYXG4iICsgCi0JCQkiLS0tLS0tLS0tLVxuIiA6CisJU3RyaW5nIGVycm9yTWVz
c2FnZSA9CiAJCQkJIi0tLS0tLS0tLS1cbiIgKyAKIAkJCQkiMS4gRVJST1IgaW4gWC5qYXZhIChh
dCBsaW5lIDMpXG4iICsgCiAJCQkJIglpbnQgZm9vKENvbGxlY3Rpb24gYmFyKSB7IHJldHVybiAw
OyB9XG4iICsgCkBAIC0xMzUxMiw0ICsxMzQ5NSw1MCBAQAogCQkiTmFtZSBjbGFzaDogVGhlIG1l
dGhvZCBmb28oQTxJbnRlZ2VyPikgb2YgdHlwZSBTdWIgaGFzIHRoZSBzYW1lIGVyYXN1cmUgYXMg
Zm9vKEE8TnVtYmVyPikgb2YgdHlwZSBTdXBlciBidXQgZG9lcyBub3QgaGlkZSBpdFxuIiArIAog
CQkiLS0tLS0tLS0tLVxuIik7CiB9CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9z
aG93X2J1Zy5jZ2k/aWQ9MzU1ODM4CitwdWJsaWMgdm9pZCB0ZXN0QnVnMzU1ODM4KCkgdGhyb3dz
IEV4Y2VwdGlvbiB7CisJU3RyaW5nIG91dHB1dCA9IAkJCisJCQkiLS0tLS0tLS0tLVxuIiArIAor
CQkJIjEuIEVSUk9SIGluIEVyYXN1cmVCdWcuamF2YSAoYXQgbGluZSA0KVxuIiArIAorCQkJIglw
dWJsaWMgU3RyaW5nIG91dHB1dChMaXN0PFN0cmluZz4gaW50ZWdlcnMpIHtcbiIgKyAKKwkJCSIJ
ICAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkJIk1l
dGhvZCBvdXRwdXQoTGlzdDxTdHJpbmc+KSBoYXMgdGhlIHNhbWUgZXJhc3VyZSBvdXRwdXQoTGlz
dDxFPikgYXMgYW5vdGhlciBtZXRob2QgaW4gdHlwZSBFcmFzdXJlQnVnXG4iICsgCisJCQkiLS0t
LS0tLS0tLVxuIiArIAorCQkJIjIuIEVSUk9SIGluIEVyYXN1cmVCdWcuamF2YSAoYXQgbGluZSA3
KVxuIiArIAorCQkJIglwdWJsaWMgU3RyaW5nIG91dHB1dChMaXN0IGRvdWJsZXMpIHtcbiIgKyAK
KwkJCSIJICAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkJIk1ldGhv
ZCBvdXRwdXQoTGlzdCkgaGFzIHRoZSBzYW1lIGVyYXN1cmUgb3V0cHV0KExpc3Q8RT4pIGFzIGFu
b3RoZXIgbWV0aG9kIGluIHR5cGUgRXJhc3VyZUJ1Z1xuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIg
KyAKKwkJCSIzLiBXQVJOSU5HIGluIEVyYXN1cmVCdWcuamF2YSAoYXQgbGluZSA3KVxuIiArIAor
CQkJIglwdWJsaWMgU3RyaW5nIG91dHB1dChMaXN0IGRvdWJsZXMpIHtcbiIgKyAKKwkJCSIJICAg
ICAgICAgICAgICAgICAgICAgXl5eXlxuIiArIAorCQkJIkxpc3QgaXMgYSByYXcgdHlwZS4gUmVm
ZXJlbmNlcyB0byBnZW5lcmljIHR5cGUgTGlzdDxFPiBzaG91bGQgYmUgcGFyYW1ldGVyaXplZFxu
IiArIAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCSI0LiBXQVJOSU5HIGluIEVyYXN1cmVCdWcu
amF2YSAoYXQgbGluZSAxMClcbiIgKyAKKwkJCSIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3Ry
aW5nW10gYXJncykgeyBuZXcgRXJhc3VyZUJ1ZygpLm91dHB1dChuZXcgQXJyYXlMaXN0KCkpOyB9
XG4iICsgCisJCQkiCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCQkiVHlwZSBzYWZl
dHk6IFRoZSBleHByZXNzaW9uIG9mIHR5cGUgQXJyYXlMaXN0IG5lZWRzIHVuY2hlY2tlZCBjb252
ZXJzaW9uIHRvIGNvbmZvcm0gdG8gTGlzdDxTdHJpbmc+XG4iICsgCisJCQkiLS0tLS0tLS0tLVxu
IiArIAorCQkJIjUuIFdBUk5JTkcgaW4gRXJhc3VyZUJ1Zy5qYXZhIChhdCBsaW5lIDEwKVxuIiAr
IAorCQkJIglwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7IG5ldyBFcmFz
dXJlQnVnKCkub3V0cHV0KG5ldyBBcnJheUxpc3QoKSk7IH1cbiIgKyAKKwkJCSIJICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgXl5eXl5eXl5eXG4iICsgCisJCQkiQXJyYXlMaXN0IGlzIGEgcmF3IHR5cGUuIFJlZmVyZW5j
ZXMgdG8gZ2VuZXJpYyB0eXBlIEFycmF5TGlzdDxFPiBzaG91bGQgYmUgcGFyYW1ldGVyaXplZFxu
IiArIAorCQkJIi0tLS0tLS0tLS1cbiI7CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBT
dHJpbmdbXSB7CisJCQkiRXJhc3VyZUJ1Zy5qYXZhIiwKKwkJCSJpbXBvcnQgamF2YS51dGlsLkFy
cmF5TGlzdDtcbiIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuTGlzdDtcbiIgKworCQkJInB1Ymxp
YyBjbGFzcyBFcmFzdXJlQnVnIHtcbiIgKworCQkJIiAgICBwdWJsaWMgU3RyaW5nIG91dHB1dChM
aXN0PFN0cmluZz4gaW50ZWdlcnMpIHtcbiIgKworCQkJIgkJcmV0dXJuIFwiMVwiO1xuIiArCisJ
CQkiCSB9XG4iICsKKwkJCSIgICAgcHVibGljIFN0cmluZyBvdXRwdXQoTGlzdCBkb3VibGVzKSB7
XG4iICsKKwkJCSIJCXJldHVybiBcIjJcIjtcbiIgKworCQkJIgkgfVxuIiArCisJCQkiCSBwdWJs
aWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7IG5ldyBFcmFzdXJlQnVnKCkub3V0
cHV0KG5ldyBBcnJheUxpc3QoKSk7IH1cbiIgKworCQkJIn1cbiIKKwkJfSwKKwkJb3V0cHV0KTsK
K30KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2J1aWxkbm90ZXNfamR0LWNv
cmUuaHRtbCBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2J1aWxkbm90ZXNfamR0LWNvcmUuaHRtbApp
bmRleCA5MGVhZjFlLi40YTBmZTQ2IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9i
dWlsZG5vdGVzX2pkdC1jb3JlLmh0bWwKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvYnVpbGRu
b3Rlc19qZHQtY29yZS5odG1sCkBAIC01Miw3ICs1Miw5IEBACiA8aDI+V2hhdCdzIG5ldyBpbiB0
aGlzIGRyb3A8L2gyPgogCiA8aDM+UHJvYmxlbSBSZXBvcnRzIEZpeGVkPC9oMz4KLTxhIGhyZWY9
Imh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNDkzMjYiPjM0
OTMyNjwvYT4KKzxhIGhyZWY9Imh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVn
LmNnaT9pZD0zNTU4MzgiPjM1NTgzODwvYT4KK1tjb21waWxlcl0gZWNqIGNvbXBpbGVzIHRoZSBj
b2RlIHRoYXQgamF2YWM2IHJlamVjdHMKKzxicj48YSBocmVmPSJodHRwczovL2J1Z3MuZWNsaXBz
ZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzQ5MzI2Ij4zNDkzMjY8L2E+CiBbMS43XSBuZXcg
d2FybmluZyBmb3IgbWlzc2luZyB0cnktd2l0aC1yZXNvdXJjZXMKIDxicj48YSBocmVmPSJodHRw
czovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzU0NTAyIj4zNTQ1MDI8
L2E+CiBJbmNvcnJlY3QgQ29tcGlsZXIgV2FybmluZzogJnF1b3Q7TWV0aG9kIGNhbiBiZSBkZWNs
YXJlZCBhcyBzdGF0aWMmcXVvdDsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU291cmNlVHlw
ZUJpbmRpbmcuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU291cmNlVHlwZUJpbmRpbmcuamF2YQppbmRl
eCBiMzQ2OTA4Li5kMWY5Y2Y0IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1NvdXJjZVR5cGVC
aW5kaW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Tb3VyY2VUeXBlQmluZGluZy5qYXZhCkBA
IC0xMjQwLDggKzEyNDAsMTYgQEAKIAkJCQkJCQkJCWludCBpbmRleCA9IHBMZW5ndGg7CiAJCQkJ
CQkJCQkvLyBpcyBlcmFzdXJlIG9mIHNpZ25hdHVyZSBvZiBtMiBzYW1lIGFzIHNpZ25hdHVyZSBv
ZiBtMT8KIAkJCQkJCQkJCWZvciAoOyAtLWluZGV4ID49IDA7KSB7Ci0JCQkJCQkJCQkJaWYgKHBh
cmFtczFbaW5kZXhdICE9IHBhcmFtczJbaW5kZXhdLmVyYXN1cmUoKSkKLQkJCQkJCQkJCQkJYnJl
YWs7CisJCQkJCQkJCQkJaWYgKHBhcmFtczFbaW5kZXhdICE9IHBhcmFtczJbaW5kZXhdLmVyYXN1
cmUoKSkgeworCQkJCQkJCQkJCQkvLyBJZiBvbmUgb2YgdGhlbSBpcyBhIHJhdyB0eXBlCisJCQkJ
CQkJCQkJCWlmIChwYXJhbXMxW2luZGV4XSBpbnN0YW5jZW9mIFJhd1R5cGVCaW5kaW5nKSB7CisJ
CQkJCQkJCQkJCQlpZiAocGFyYW1zMltpbmRleF0uZXJhc3VyZSgpICE9ICgoUmF3VHlwZUJpbmRp
bmcpcGFyYW1zMVtpbmRleF0pLmFjdHVhbFR5cGUoKSkgeworCQkJCQkJCQkJCQkJCWJyZWFrOwor
CQkJCQkJCQkJCQkJfQorCQkJCQkJCQkJCQl9IGVsc2UgIHsKKwkJCQkJCQkJCQkJCWJyZWFrOwor
CQkJCQkJCQkJCQl9CisJCQkJCQkJCQkJfQogCQkJCQkJCQkJCWlmIChwYXJhbXMxW2luZGV4XSA9
PSBwYXJhbXMyW2luZGV4XSkgewogCQkJCQkJCQkJCQlUeXBlQmluZGluZyB0eXBlID0gcGFyYW1z
MVtpbmRleF0ubGVhZkNvbXBvbmVudFR5cGUoKTsKIAkJCQkJCQkJCQkJaWYgKHR5cGUgaW5zdGFu
Y2VvZiBTb3VyY2VUeXBlQmluZGluZyAmJiB0eXBlLnR5cGVWYXJpYWJsZXMoKSAhPSBCaW5kaW5n
Lk5PX1RZUEVfVkFSSUFCTEVTKSB7CkBAIC0xMjUzLDggKzEyNjEsMTYgQEAKIAkJCQkJCQkJCWlm
IChpbmRleCA+PSAwICYmIGluZGV4IDwgcExlbmd0aCkgewogCQkJCQkJCQkJCS8vIGlzIGVyYXN1
cmUgb2Ygc2lnbmF0dXJlIG9mIG0xIHNhbWUgYXMgc2lnbmF0dXJlIG9mIG0yPwogCQkJCQkJCQkJ
CWZvciAoaW5kZXggPSBwTGVuZ3RoOyAtLWluZGV4ID49IDA7KQotCQkJCQkJCQkJCQlpZiAocGFy
YW1zMVtpbmRleF0uZXJhc3VyZSgpICE9IHBhcmFtczJbaW5kZXhdKQotCQkJCQkJCQkJCQkJYnJl
YWs7CisJCQkJCQkJCQkJCWlmIChwYXJhbXMxW2luZGV4XS5lcmFzdXJlKCkgIT0gcGFyYW1zMltp
bmRleF0pIHsKKwkJCQkJCQkJCQkJCS8vIElmIG9uZSBvZiB0aGVtIGlzIGEgcmF3IHR5cGUKKwkJ
CQkJCQkJCQkJCWlmIChwYXJhbXMyW2luZGV4XSBpbnN0YW5jZW9mIFJhd1R5cGVCaW5kaW5nKSB7
CisJCQkJCQkJCQkJCQkJaWYgKHBhcmFtczFbaW5kZXhdLmVyYXN1cmUoKSAhPSAoKFJhd1R5cGVC
aW5kaW5nKXBhcmFtczJbaW5kZXhdKS5hY3R1YWxUeXBlKCkpIHsKKwkJCQkJCQkJCQkJCQkJYnJl
YWs7CisJCQkJCQkJCQkJCQkJfQorCQkJCQkJCQkJCQkJfSBlbHNlICB7CisJCQkJCQkJCQkJCQkJ
YnJlYWs7CisJCQkJCQkJCQkJCQl9CisJCQkJCQkJCQkJCX0KIAkJCQkJCQkJCQkKIAkJCQkJCQkJ
CX0KIAkJCQkJCQkJCWlmIChpbmRleCA+PSAwKSB7
</data>

          </attachment>
      

    </bug>

</bugzilla>