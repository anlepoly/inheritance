<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>448802</bug_id>
          
          <creation_ts>2014-10-25 00:42:00 -0400</creation_ts>
          <short_desc>[1.8][compiler] Poly invocations interleaved by a impertinent lambda may need some more changes,</short_desc>
          <delta_ts>2014-11-02 01:33:09 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.5</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>WORKSFORME</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.5 M3</target_milestone>
          
          <blocked>448791</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>jarthana</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2471607</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-25 00:42:43 -0400</bug_when>
    <thetext>From https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444#c73

    - For inner invocations interleaved by a lambda, reduce is a nop
as the C set construction code has effectively lifted everything that
needs to be lifted that would amount to B3. We must lift them at C
set construction time because type variables would need substitution with
inference variables before they get on the C set.

NOP may not be the right thing there - 

Merging if (innerCtx == null) and if (innerCtx.stepCompleted &gt;= InferenceContext18.TYPE_INFERRED)  may be the better thing to do.

Also here we don&apos;t distinguish the case of the invocation being interleaved
by a lambda that is not pertinent to applicability.

We should also check this from https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444#c147 about C set construction.

However when a poly invocation is interleaved by a lambda that is not
pertinent to applicability (which means I should check if we are doing
extra/incorrect work when the interleaving lambda *is* pertinent to
applicability of the outer call),  ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472777</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-28 04:18:22 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #0)
&gt; From https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444#c73
&gt; 
&gt;     - For inner invocations interleaved by a lambda, reduce is a nop
&gt; as the C set construction code has effectively lifted everything that
&gt; needs to be lifted that would amount to B3. We must lift them at C
&gt; set construction time because type variables would need substitution with
&gt; inference variables before they get on the C set.
&gt; 
&gt; NOP may not be the right thing there - 
&gt; 
&gt; Merging if (innerCtx == null) and if (innerCtx.stepCompleted &gt;=
&gt; InferenceContext18.TYPE_INFERRED)  may be the better thing to do.

This is already on master.

&gt; Also here we don&apos;t distinguish the case of the invocation being interleaved
&gt; by a lambda that is not pertinent to applicability.

This is the only possibility. If there no interleaving lambda, then the
invocation would/could not have completed invocation type inference.

&gt; We should also check this from
&gt; https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444#c147 about C set
&gt; construction.
&gt; 
&gt; However when a poly invocation is interleaved by a lambda that is not
&gt; pertinent to applicability (which means I should check if we are doing
&gt; extra/incorrect work when the interleaving lambda *is* pertinent to
&gt; applicability of the outer call),  ...

This again is a needed step. 

So there is no action here.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2473915</commentid>
    <comment_count>2</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-10-30 02:53:36 -0400</bug_when>
    <thetext>Verified for 4.5 M3.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2475190</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-02 01:33:09 -0500</bug_when>
    <thetext>I released a unit test here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=b536376175d43bf269f63b23c4d221e67b0fd9ab

By stepping through this test, I am able to confirm that we do the right
thing doing C set construction as well as reduction (i.e no duplicate lifting
of inference variables)</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>