<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>341296</bug_id>
          
          <creation_ts>2011-03-29 19:59:00 -0400</creation_ts>
          <short_desc>.classpath file is read-only, many modifications later and ok, can not write error</short_desc>
          <delta_ts>2012-01-24 11:55:06 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.7</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>3.8 M5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="MG">java97301</reporter>
          <assigned_to name="Markus Keller">markus_keller</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>java97301</cc>
    
    <cc>markus_keller</cc>
    
    <cc>me</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1905513</commentid>
    <comment_count>0</comment_count>
    <who name="MG">java97301</who>
    <bug_when>2011-03-29 19:59:27 -0400</bug_when>
    <thetext>Build Identifier: 20100917-0705

It would be great if instead of telling you at the end of modifying a 100 classpath entries and clicking ok and then ignoring all those changes it would either remind you up front or give you the option to overwrite.

Reproducible: Always</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1905532</commentid>
    <comment_count>1</comment_count>
    <who name="Prakash Rangaraj">me</who>
    <bug_when>2011-03-29 22:28:27 -0400</bug_when>
    <thetext>Can you give clear steps to reproduce?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1905944</commentid>
    <comment_count>2</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2011-03-30 11:33:49 -0400</bug_when>
    <thetext>Why is your .classpath file read-only?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2047518</commentid>
    <comment_count>3</comment_count>
    <who name="MG">java97301</who>
    <bug_when>2012-01-08 14:55:29 -0500</bug_when>
    <thetext>The version control system I work with keeps the files readonly on retrieval -
stupid I know.  Anyway I always seem to forget to make the classpath
non-readonly before using the project properties java build path and spending a
bunch of time modifying it only to have eclipse discard my changes when I hit
save as the file is readonly.  

Steps to repro:

1. Make your .classpath file readonly
2. Open your eclipse project
3. Project-&gt;Properties-&gt;Java Build Path-&gt;Remove an entry-&gt;Ok

Error Dialog:

&apos;Setting build path&apos; has encountered a problem.  File projectname/.classpath is read-only.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2047520</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-01-08 15:00:00 -0500</bug_when>
    <thetext>*** Bug 368108 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2047637</commentid>
    <comment_count>5</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2012-01-09 04:24:40 -0500</bug_when>
    <thetext>This works if the team provider implements validateEdit(...) correctly. For example, when using watch/edit mode in CVS, the team provider makes the file writable.

Now, for the case when there is no team provider (i.e. file not shared), validateEdit(...) asks the user, but that only happens if the client provided a context. Currently JDT Core calls validate edit with a &apos;null&apos; context (see e.g. JavaProject.setSharedProperty(String, String).

JDT Core needs to check whether they have a context (e.g. a shell) and if not, whether it makes sense to allow passing such a context by the client.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2047638</commentid>
    <comment_count>6</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2012-01-09 04:25:55 -0500</bug_when>
    <thetext>Marking as minor/P5 since
1. For shared files, the Team Provider should deal with this.
2. Users should not mark the .classpath file read-only themselves.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2047639</commentid>
    <comment_count>7</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2012-01-09 04:26:51 -0500</bug_when>
    <thetext>(In reply to comment #3)
&gt; The version control system I work with keeps the files readonly on retrieval -
&gt; stupid I know.

Please file a bug against the provide of your Team plug-in.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2048022</commentid>
    <comment_count>8</comment_count>
    <who name="MG">java97301</who>
    <bug_when>2012-01-09 16:11:20 -0500</bug_when>
    <thetext>The problem is that I am not using the perforce team provider or managing the revision control via eclipse.  I use the tools provided by the version control vendor and I don&apos;t want to be forced to use an eclipse plugin to manage the revision control.  Ideally I wouldn&apos;t be forced to use this implementation of a rcs where the files are marked readonly but I don&apos;t have that option.

But let&apos;s extend the example out.  Let&apos;s say I create a project, commit to my revision control system, and then get the source, zip and distribute out to the internet.  The files will be readonly and anyone who loads this project into eclipse isn&apos;t going to have the rcs plugin and if they modify the classpath via the ui then they will encounter the same problem.

I agree that the problem isn&apos;t major but if the fix is easy then if you&apos;d consider normal priority I&apos;d appreciate it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2048140</commentid>
    <comment_count>9</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2012-01-10 02:09:55 -0500</bug_when>
    <thetext>&gt; I agree that the problem isn&apos;t major but if the fix is easy

It depends whether JDT Core already has a context somewhere. If not, new APIs need to be define, so that it can be provided.
 
&gt; then if you&apos;d consider normal priority I&apos;d appreciate it.
Sure.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2048511</commentid>
    <comment_count>10</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2012-01-10 14:03:25 -0500</bug_when>
    <thetext>&gt; It depends whether JDT Core already has a context somewhere. If not, new APIs
&gt; need to be define, so that it can be provided.

JDT Core doesn&apos;t have a context, but bug 160905 added a generic IWorkspace.VALIDATE_PROMPT.

Fixed in master with commit ec0896f6be6c41a0353321bffc1f242fe4e5e1b4.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2048823</commentid>
    <comment_count>11</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2012-01-11 06:07:14 -0500</bug_when>
    <thetext>(In reply to comment #10)
&gt; &gt; It depends whether JDT Core already has a context somewhere. If not, new APIs
&gt; &gt; need to be define, so that it can be provided.
&gt; 
&gt; JDT Core doesn&apos;t have a context, but bug 160905 added a generic
&gt; IWorkspace.VALIDATE_PROMPT.
&gt; 
&gt; Fixed in master with commit ec0896f6be6c41a0353321bffc1f242fe4e5e1b4.

Nice!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2055178</commentid>
    <comment_count>12</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-01-24 10:37:33 -0500</bug_when>
    <thetext>This looks good, mostly.

However, on Linux I still succeed to get the project into an inconsistent state:

a) mark .classpath as readonly (chmod 444 .classpath)
b) change the JRE on the projects classpath (using the prj. pref. UI)
c) get a dialog asking whether .classpath should be made writable: GOOD!
d) answer &quot;No&quot;
e) observe the error dialog mentioned in comment 3
f) observe that the package explorer has (most the time(?)) already updated
   the &quot;JRE System Library&quot; whereas the content of .classpath has not been
   changed
g) after an unsuccessful attempt to change JRE from 1.5 to 1.7 the compiler
   actually uses the 1.7 JRE as tested by referring to type AutoCloseable:
   Initially (using 1.5): error
   After unsuccessful attempt to change JRE to 1.7: no error

Is this a known limitation?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2055274</commentid>
    <comment_count>13</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2012-01-24 11:55:06 -0500</bug_when>
    <thetext>I don&apos;t think this a known limitation. Could be fixed in a separate bug if somebody cared enough. This is not a new problem and requires a malicious user.

The call to validateEdit should be pulled to the beginning of SetClasspathOperation#executeOperation(), guarded with this.canChangeResources and the other checks on rscFile in JavaProject#setSharedProperty(..), and the operation should throw a JME if the validation failed.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>