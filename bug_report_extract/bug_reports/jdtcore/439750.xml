<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>439750</bug_id>
          
          <creation_ts>2014-07-16 16:15:00 -0400</creation_ts>
          <short_desc>New compiler option for Unused exception parameter warning/error</short_desc>
          <delta_ts>2015-02-05 11:25:59 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.5</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>4.5 M4</target_milestone>
          
          <blocked>439520</blocked>
    
    <blocked>441933</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Alexandre Montplaisir">alexmonthy</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>jarthana</cc>
    
    <cc>lars.vogel</cc>
    
    <cc>likeluckyjoe</cc>
    
    <cc>manpalat</cc>
    
    <cc>marc-andre.laperle</cc>
    
    <cc>markus_keller</cc>
    
    <cc>max.gilead</cc>
    
    <cc>Sebastian.Zarnekow</cc>
    
    <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2428527</commentid>
    <comment_count>0</comment_count>
    <who name="Alexandre Montplaisir">alexmonthy</who>
    <bug_when>2014-07-16 16:15:49 -0400</bug_when>
    <thetext>Since upgrading to Eclipse 4.5 integration build ID I20140715-0800, the following code snippet now triggers a compiler warning/error:

  try {
    ...
  } catch (Exception e){
    // do nothing
  }

The error is: The value of the exception parameter e is not used

Turning off the setting &quot;Value of parameter is not used&quot; in the compiler settings removes this error. We have that setting enabled, for example to warn of unused parameters in private methods. Is it a design decision to have this setting also apply to exception parameters, or is just a bug?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2428576</commentid>
    <comment_count>1</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-07-16 22:45:11 -0400</bug_when>
    <thetext>It is done on purpose.
Please see Bug 412119.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2428586</commentid>
    <comment_count>2</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-07-17 00:15:41 -0400</bug_when>
    <thetext>Marking as resolved.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2428605</commentid>
    <comment_count>3</comment_count>
    <who name="Sebastian Zarnekow">Sebastian.Zarnekow</who>
    <bug_when>2014-07-17 02:07:01 -0400</bug_when>
    <thetext>I&apos;d like to reopen this one to discuss whether the same preference key should be used for unused parameters on methods - which can be removed by the user - and unused parameters in catch blocks - which are mandatory according to the Java syntax. I don&apos;t think that code like try { .. } catch(Exception e) { .. some comment or some fallback logic .. } is necessarily bad style. Some APIs mandate exceptions to be caught. Could you please reconsider to use a new preference for the new validation?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2428607</commentid>
    <comment_count>4</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-07-17 02:14:16 -0400</bug_when>
    <thetext>(In reply to Sebastian Zarnekow from comment #3)
&gt; I&apos;d like to reopen this one to discuss whether the same preference key
&gt; should be used for unused parameters on methods - which can be removed by
&gt; the user

Good point. Please note we have bug 439520 to cover the quick fix part of it.

(In reply to Sebastian Zarnekow from comment #3)
&gt; I don&apos;t think that code like try { .. }
&gt; catch(Exception e) { .. some comment or some fallback logic .. } is
&gt; necessarily bad style. Some APIs mandate exceptions to be caught. Could you
&gt; please reconsider to use a new preference for the new validation?

I agree with your point. Copying Markus, as he decides on the UI side of preference.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2429245</commentid>
    <comment_count>5</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-07-18 07:50:07 -0400</bug_when>
    <thetext>(In reply to comment #3)
&gt; I&apos;d like to reopen this one to discuss whether the same preference key should be
&gt; used for unused parameters on methods - which can be removed by the user - and
&gt; unused parameters in catch blocks - which are mandatory according to the Java
&gt; syntax.

They are not mandatory in the same way unused method arguments are not mandatory, i.e. if you can freely change the signature of the method to remove an unused argument you can also change it to add the exception to its throws specification.

(In reply to comment #3)
&gt; I don&apos;t think that code like try { .. } catch(Exception e) { .. some
&gt; comment or some fallback logic .. } is necessarily bad style. Some APIs mandate
&gt; exceptions to be caught. Could you please reconsider to use a new preference for
&gt; the new validation?

Yeah, it is bad style. Happily this works as expected and allows for the questionable code to be found easily later:

		try {
			Thread.sleep(10000);
		} catch (@SuppressWarnings(&quot;unused&quot;) InterruptedException e) {
		}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2429598</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-07-21 01:50:51 -0400</bug_when>
    <thetext>Jay, let us raise a new bug against UI, document it here and resolve the
present entry as it does not call for any action in Core as we know it now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2431771</commentid>
    <comment_count>7</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-07-24 14:02:49 -0400</bug_when>
    <thetext>Looking at the Eclipse codebase, I found quite a few places where swallowing the exception is OK.

Example:

        try {
            storeUrl(new URL(&quot;http://www.eclipse.org&quot;));
        } catch (MalformedURLException e) {
        }

Or:

        try {
            // do something risky
            return result;
        } catch (IllegalStateException e) {
            // didn&apos;t work out
        }
        // fall back code / return null...

We have diagnostics for &quot;Undocumented empty block&quot; and for &quot;Unused parameter&quot; (now including exception parameters), which both make sense. But it&apos;s not nice that I have to add two notes like this to make the warnings go away:

        } catch (@SuppressWarnings(&quot;unused&quot;) MalformedURLException e) {
            // can&apos;t happen
        }

Or do something horrible like:

        } catch (MalformedURLException e) {
            e.hashCode();
        }

Can we consider the @SuppressWarnings(&quot;unused&quot;) as documentation for the empty block and at least avoid the second problem?

Or we bite the bullet and add a separate compiler option for unused exception parameters.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2432679</commentid>
    <comment_count>8</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-07-28 13:08:48 -0400</bug_when>
    <thetext>(In reply to comment #7)
&gt; Looking at the Eclipse codebase, I found quite a few places where swallowing the
&gt; exception is OK.

Neither of the examples are convincing.

&gt; Example:
&gt; 
&gt; try {
&gt; storeUrl(new URL(&quot;http://www.eclipse.org&quot;));
&gt; } catch (MalformedURLException e) {
&gt; }

Should be rewritten as 

		try {
			storeUrl(new URL(&quot;http://www.eclipse.org&quot;));
		} catch(MalformedURLException shouldNeverHappen) {
			throw new AssertionError(shouldNeverHappen);
		}

&gt; try {
&gt; // do something risky
&gt; return result;
&gt; } catch (IllegalStateException e) {
&gt; // didn&apos;t work out
&gt; }
&gt; // fall back code / return null...

Can be rewritten as

	private static Object test() {
		Object result;
		try {
			result = doSomethingRisky();
		} catch (@SuppressWarnings(&quot;unused&quot;) IllegalStateException e) {
			result = emptyObject();
		}
		return result;
	}

As rewritten, both of the examples are more explicit about the assertions being made in the code and avoid the warnings about empty blocks (which I personally find to be of little value anyways). The point of warnings is to find questionable and buggy code; I&apos;d say this warning is having a perfect track record so far.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2435454</commentid>
    <comment_count>9</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-08-05 02:57:54 -0400</bug_when>
    <thetext>Looks like we still have a discussion with no conclusion yet. Will take a call during M2.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2439276</commentid>
    <comment_count>10</comment_count>
    <who name="Max Gilead">max.gilead</who>
    <bug_when>2014-08-14 22:59:01 -0400</bug_when>
    <thetext>I strongly disagree with unused catch parameter check being lumped together with the unused parameter setting. I&apos;m not bothered at all whether the catch parameter is used or not -- it all depends on the context. I am, however, bothered about unused method parameters and do want Eclipse to tell me about those.

There are numerous cases where ignoring the catch parameter makes perfect sense. You may or may not agree with some or all of those but for some users this is the preferred way of structuring their code.

IMHO forcing the user to dot their code with @SuppressWarnings(&quot;unused&quot;) is a step backwards in usability as for some (many?) this will be just noise obscuring the actual, useful code.

Obviously some people want those warnings, as indicated by bug 412119, so please implement a separate setting in the compiler warnings/errors section for the people who don&apos;t consider this a valuable information.


A few of examples where not using the exception parameter seems to be reasonable:

1. The exception type is specific enough
try {
    url = new URL(myUrl);
} catch(MalformedURLException e) {
    log(&quot;Invalid URL: &quot;+ myUrl);
    return false;
}

2. The exception can be safely ignored if shorter delay doesn&apos;t change the behaviour of the app
try {
    Thread.sleep(500L);
} catch (final InterruptedException e) {
    //
}

3. The exception type is specific enough
try {
    packageInfo = activity.getPackageManager().getPackageInfo(name, flags);
} catch (final NameNotFoundException e) {
    throw new IllegalArgumentException(&quot;Invalid name: &quot;+ name);
}
(using Android API)

4. We&apos;ve all seen libraries which just throw checked Exceptions, for odd reasons and with no messages whatsoever, didn&apos;t we?
try {
    badlyDesignedLibraryThrowingUselessExceptions.doSomething();
} catch (Exception e) {
    throw new RuntimeException(&quot;Exception while calling BadLibrary&quot;);
}

5. If the connection fails the specific reason doesn&apos;t matter
try {
    conn = (L2CAPConnection)Connector.open(address, Connector.WRITE, true);
} catch (final IOException e) {
    return null;
}
(using JRS82)

6. As above -- all we care about is that the operation failed
RemoteDevice d = ...
try {
    name = d.getFriendlyName(false);
} catch (IOException e) {
    throw new RuntimeException(&quot;Connection to device &quot;+ d +&quot; failed&quot;);
}
(using JRS82)

7. The exception type is not specific at all but in this context it can be thrown for one reason only
try {
    Display.create(pf, attr);
} catch (final LWJGLException e) {
    throw new RuntimeException(&quot;Unable to create display: &quot;+ pf);
}
(with LWJGL)

8. The exception type is specific enough
try {
    myClass = Class.forName(myClassName);
} catch (final ClassNotFoundException e) {
    throw new RuntimeException(&quot;Class not found:&quot;+ myClassName);
}

9. The exception type is specific enough
try {
    return new FileInputStream(f);
} catch (final FileNotFoundException e) {
    return null;
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2439777</commentid>
    <comment_count>11</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-08-18 00:57:22 -0400</bug_when>
    <thetext>I understand the concerns raised and see why people would like to keep these two warning/preference separate. I have raised UI bug 439750 to discuss this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2452203</commentid>
    <comment_count>12</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-09-16 05:02:27 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #11)
&gt; I have raised UI bug 439750 to discuss this.

Correction, the UI part is discussed in bug 441933.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472388</commentid>
    <comment_count>13</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-10-27 09:22:25 -0400</bug_when>
    <thetext>It looks like there&apos;s no general consensus on how useful this diagnostic is. The best we can do at this point is give the user a choice and create a separate compiler option (set to &quot;ignore&quot; by default).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2491447</commentid>
    <comment_count>14</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-12-02 03:30:02 -0500</bug_when>
    <thetext>(In reply to Markus Keller from comment #13)
&gt; It looks like there&apos;s no general consensus on how useful this diagnostic is.
&gt; The best we can do at this point is give the user a choice and create a
&gt; separate compiler option (set to &quot;ignore&quot; by default).

Agree with this, we don&apos;t seem to have consensus on other options.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2491564</commentid>
    <comment_count>15</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-12-02 07:39:55 -0500</bug_when>
    <thetext>Gerrit patch uploaded here:

https://git.eclipse.org/r/#/c/37453/</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2491913</commentid>
    <comment_count>16</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-12-02 22:38:46 -0500</bug_when>
    <thetext>Fix pushed in master:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=f73fdb0a354f2f38e3faeb7d9eceabb3d85530d5</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2494476</commentid>
    <comment_count>17</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2014-12-09 07:16:39 -0500</bug_when>
    <thetext>Verified for Eclipse Mars 4.5 M4 using build  I20141208-0800</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2514697</commentid>
    <comment_count>18</comment_count>
    <who name="Lars Vogel">lars.vogel</who>
    <bug_when>2015-02-05 11:25:59 -0500</bug_when>
    <thetext>*** Bug 448738 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>