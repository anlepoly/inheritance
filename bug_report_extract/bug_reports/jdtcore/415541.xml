<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>415541</bug_id>
          
          <creation_ts>2013-08-21 01:29:00 -0400</creation_ts>
          <short_desc>[1.8][compiler] Type annotations in the body of static initializer get dropped.</short_desc>
          <delta_ts>2013-08-22 12:01:44 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>409235</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Andrew Clement">aclement</assigned_to>
          
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="59101"
          type_id="1"
          status="+"
          setter="srikanth_sankaran"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2297122</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-08-21 01:29:00 -0400</bug_when>
    <thetext>BETA_JAVA8:

From the spec:

&quot;Type annotations in the body of an initializer appear with the code that 
performs the initialization, not on the field that is being initialized. 
Type annotations in the body of instance initializer appear on on
all initial constructors, and type annotations in the body of a class initializer 
appear on the clinit symbol&quot;

for the following program:

// ---

import java.lang.annotation.*;
import static java.lang.annotation.ElementType.*; 
@Target({TYPE_USE}) @interface NonNull { }
class X {

	static {
		new @NonNull Object();
	}
	{
		new @NonNull Object();
	}
	X() {
		
	}
	X (int x) {
		
	}
}


we generate the following code:

&quot;// Compiled from X.java (version 1.8 : 52.0, super bit)\n&quot; + 
		&quot;class X {\n&quot; + 
		&quot;  Constant pool:\n&quot; + 
		&quot;    constant #1 class: #2 X\n&quot; + 
		&quot;    constant #2 utf8: \&quot;X\&quot;\n&quot; + 
		&quot;    constant #3 class: #4 java/lang/Object\n&quot; + 
		&quot;    constant #4 utf8: \&quot;java/lang/Object\&quot;\n&quot; + 
		&quot;    constant #5 utf8: \&quot;&lt;clinit&gt;\&quot;\n&quot; + 
		&quot;    constant #6 utf8: \&quot;()V\&quot;\n&quot; + 
		&quot;    constant #7 utf8: \&quot;Code\&quot;\n&quot; + 
		&quot;    constant #8 method_ref: #3.#9 java/lang/Object.&lt;init&gt; ()V\n&quot; + 
		&quot;    constant #9 name_and_type: #10.#6 &lt;init&gt; ()V\n&quot; + 
		&quot;    constant #10 utf8: \&quot;&lt;init&gt;\&quot;\n&quot; + 
		&quot;    constant #11 utf8: \&quot;LineNumberTable\&quot;\n&quot; + 
		&quot;    constant #12 utf8: \&quot;LocalVariableTable\&quot;\n&quot; + 
		&quot;    constant #13 utf8: \&quot;this\&quot;\n&quot; + 
		&quot;    constant #14 utf8: \&quot;LX;\&quot;\n&quot; + 
		&quot;    constant #15 utf8: \&quot;RuntimeInvisibleTypeAnnotations\&quot;\n&quot; + 
		&quot;    constant #16 utf8: \&quot;LNonNull;\&quot;\n&quot; + 
		&quot;    constant #17 utf8: \&quot;(I)V\&quot;\n&quot; + 
		&quot;    constant #18 utf8: \&quot;x\&quot;\n&quot; + 
		&quot;    constant #19 utf8: \&quot;I\&quot;\n&quot; + 
		&quot;    constant #20 utf8: \&quot;SourceFile\&quot;\n&quot; + 
		&quot;    constant #21 utf8: \&quot;X.java\&quot;\n&quot; + 
		&quot;  \n&quot; + 
		&quot;  // Method descriptor #6 ()V\n&quot; + 
		&quot;  // Stack: 2, Locals: 1\n&quot; + 
		&quot;  static {};\n&quot; + 
		&quot;    0  new java.lang.Object [3]\n&quot; + 
		&quot;    3  dup\n&quot; + 
		&quot;    4  invokespecial java.lang.Object() [8]\n&quot; + 
		&quot;    7  astore_0\n&quot; + 
		&quot;    8  return\n&quot; + 
		&quot;      Line numbers:\n&quot; + 
		&quot;        [pc: 0, line: 6]\n&quot; + 
		&quot;        [pc: 8, line: 7]\n&quot; + 
		&quot;  \n&quot; + 
		&quot;  // Method descriptor #6 ()V\n&quot; + 
		&quot;  // Stack: 1, Locals: 1\n&quot; + 
		&quot;  X();\n&quot; + 
		&quot;     0  aload_0 [this]\n&quot; + 
		&quot;     1  invokespecial java.lang.Object() [8]\n&quot; + 
		&quot;     4  new java.lang.Object [3]\n&quot; + 
		&quot;     7  invokespecial java.lang.Object() [8]\n&quot; + 
		&quot;    10  return\n&quot; + 
		&quot;      Line numbers:\n&quot; + 
		&quot;        [pc: 0, line: 11]\n&quot; + 
		&quot;        [pc: 4, line: 9]\n&quot; + 
		&quot;        [pc: 10, line: 12]\n&quot; + 
		&quot;      Local variable table:\n&quot; + 
		&quot;        [pc: 0, pc: 11] local: this index: 0 type: X\n&quot; + 
		&quot;    RuntimeInvisibleTypeAnnotations: \n&quot; + 
		&quot;      #16 @NonNull(\n&quot; + 
		&quot;        target type = 0x44 NEW\n&quot; + 
		&quot;        offset = 4\n&quot; + 
		&quot;      )\n&quot; + 
		&quot;  \n&quot; + 
		&quot;  // Method descriptor #17 (I)V\n&quot; + 
		&quot;  // Stack: 1, Locals: 2\n&quot; + 
		&quot;  X(int x);\n&quot; + 
		&quot;     0  aload_0 [this]\n&quot; + 
		&quot;     1  invokespecial java.lang.Object() [8]\n&quot; + 
		&quot;     4  new java.lang.Object [3]\n&quot; + 
		&quot;     7  invokespecial java.lang.Object() [8]\n&quot; + 
		&quot;    10  return\n&quot; + 
		&quot;      Line numbers:\n&quot; + 
		&quot;        [pc: 0, line: 13]\n&quot; + 
		&quot;        [pc: 4, line: 9]\n&quot; + 
		&quot;        [pc: 10, line: 14]\n&quot; + 
		&quot;      Local variable table:\n&quot; + 
		&quot;        [pc: 0, pc: 11] local: this index: 0 type: X\n&quot; + 
		&quot;        [pc: 0, pc: 11] local: x index: 1 type: int\n&quot; + 
		&quot;    RuntimeInvisibleTypeAnnotations: \n&quot; + 
		&quot;      #16 @NonNull(\n&quot; + 
		&quot;        target type = 0x44 NEW\n&quot; + 
		&quot;        offset = 4\n&quot; + 
		&quot;      )\n&quot; + 
		&quot;}&quot;

//----------------
This shows two problems in code generation:

(1) Static class initializer code is missing the type annotations attributes.
(2) Checkcast instruction is not emitted - so the fix for bug 409244 may not
be fully effective.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2297123</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-08-21 01:29:34 -0400</bug_when>
    <thetext>Andy, please take a look, TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2297125</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-08-21 01:32:05 -0400</bug_when>
    <thetext>(In reply to comment #0)

[...]

&gt; (2) Checkcast instruction is not emitted - so the fix for bug 409244 may not
&gt; be fully effective.

We may want to have a boolean annotatedCast and use this to short circuit
various smarts to avoid a run time cast. Setting ASTNode.GenerateCheckcast
which was for annotated casts as was done by the fix for bug 409244 itself
is not enough.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2297128</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-08-21 01:42:48 -0400</bug_when>
    <thetext>Regression test available via: org.eclipse.jdt.core.tests.compiler.regression.JSR308SpecSnippetTests.test033()

(This test will need massaging)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2297635</commentid>
    <comment_count>4</comment_count>
      <attachid>234637</attachid>
    <who name="Andrew Clement">aclement</who>
    <bug_when>2013-08-21 17:58:35 -0400</bug_when>
    <thetext>Created attachment 234637
Patch to fix the issue and adjust the test

Switches to a flag for indicating whether a cast is annotated in CastExpression and then uses it to appropriately in the generateCode method.  Adjust the ClassFile to ensure type annotations are attached to clinits. Test modified for new expected output.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2297664</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-08-22 01:31:41 -0400</bug_when>
    <thetext>Thanks Andy, patch looks good. I made one small change folding annotatedCast
into a local instead of a field and released it here: 

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=2f99f11ed182db13b52f83c7f61547c34d00226d</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2297975</commentid>
    <comment_count>6</comment_count>
    <who name="Andrew Clement">aclement</who>
    <bug_when>2013-08-22 12:01:44 -0400</bug_when>
    <thetext>This contribution complies with http://www.eclipse.org/legal/CoO.php</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>234637</attachid>
            <date>2013-08-21 17:58:00 -0400</date>
            <delta_ts>2013-08-21 17:58:35 -0400</delta_ts>
            <desc>Patch to fix the issue and adjust the test</desc>
            <filename>0001-Bug415541.patch</filename>
            <type>text/plain</type>
            <size>10735</size>
            <attacher name="Andrew Clement">aclement</attacher>
            
              <data encoding="base64">RnJvbSAxNjNkNGYyNDk5MGEyODU4NzQ3N2M2ZDEwZjk4NDA2YWUwN2Q1MjllIE1vbiBTZXAgMTcg
MDA6MDA6MDAgMjAwMQpGcm9tOiBBbmR5IENsZW1lbnQgPGFjbGVtZW50QGdvcGl2b3RhbC5jb20+
CkRhdGU6IFdlZCwgMjEgQXVnIDIwMTMgMTQ6NTQ6NDggLTA3MDAKU3ViamVjdDogW1BBVENIXSBC
dWc0MTU1NDEgZml4CgotLS0KIC4uLi9yZWdyZXNzaW9uL0pTUjMwOFNwZWNTbmlwcGV0VGVzdHMu
amF2YSAgICAgICAgIHwgNTIgKysrKysrKysrKysrKysrKy0tLS0tLQogLi4uL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL0NsYXNzRmlsZS5qYXZhICAgfCAgOSArKysrCiAuLi4vamR0L2lu
dGVybmFsL2NvbXBpbGVyL2FzdC9DYXN0RXhwcmVzc2lvbi5qYXZhICB8IDEyICsrLS0tCiAzIGZp
bGVzIGNoYW5nZWQsIDU0IGluc2VydGlvbnMoKyksIDE5IGRlbGV0aW9ucygtKQoKZGlmZiAtLWdp
dCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0pTUjMwOFNwZWNTbmlwcGV0VGVzdHMu
amF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBz
ZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0pTUjMwOFNwZWNTbmlwcGV0VGVz
dHMuamF2YQppbmRleCBlYzMyMThjLi44ZThkZjQ2IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29t
cGlsZXIvcmVncmVzc2lvbi9KU1IzMDhTcGVjU25pcHBldFRlc3RzLmphdmEKKysrIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rl
c3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vSlNSMzA4U3BlY1NuaXBwZXRUZXN0cy5qYXZhCkBAIC0x
MSw3ICsxMSw4IEBACiAgKiAKICAqIENvbnRyaWJ1dG9yczoKICAqICAgICBJQk0gQ29ycG9yYXRp
b24gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24KLSAqIAorICogICAgICAgIEFuZHkg
Q2xlbWVudCAoR29QaXZvdGFsLCBJbmMpIGFjbGVtZW50QGdvcGl2b3RhbC5jb20gLSBDb250cmli
dXRpb25zIGZvcgorICogICAgICAgICAgICAgICAgICAgICAgICAgIEJ1ZyA0MTU1NDEgLSBbMS44
XVtjb21waWxlcl0gVHlwZSBhbm5vdGF0aW9ucyBpbiB0aGUgYm9keSBvZiBzdGF0aWMgaW5pdGlh
bGl6ZXIgZ2V0IGRyb3BwZWQKICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwogcGFja2FnZSBvcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci5yZWdyZXNzaW9uOwogCkBAIC0xMzgwLDcg
KzEzODEsNyBAQCBwdWJsaWMgY2xhc3MgSlNSMzA4U3BlY1NuaXBwZXRUZXN0cyBleHRlbmRzIEFi
c3RyYWN0UmVncmVzc2lvblRlc3QgewogCQljaGVja0Rpc2Fzc2VtYmxlZENsYXNzRmlsZShPVVRQ
VVRfRElSICsgRmlsZS5zZXBhcmF0b3IgKyAiWC5jbGFzcyIsICJYIiwgZXhwZWN0ZWRPdXRwdXQs
IENsYXNzRmlsZUJ5dGVzRGlzYXNzZW1ibGVyLlNZU1RFTSk7CiAJfQogCS8vIFRlc3QgdHlwZSBh
bm5vdGF0aW9ucyBpbiBpbml0aWFsaXplciBjb2RlLgotCXB1YmxpYyB2b2lkIHRlc3QwMzMoKSB0
aHJvd3MgRXhjZXB0aW9uIHsgLy8gV0lMTCBORUVEIFRPIEJFIEFESlVTVEVEIE9OQ0UgaHR0cHM6
Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQxNTU0MSBJUyBGSVhFRC4K
KwlwdWJsaWMgdm9pZCB0ZXN0MDMzKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CiAJCXRoaXMucnVuQ29u
Zm9ybVRlc3QoCiAJCQluZXcgU3RyaW5nW10gewogCQkJCSJYLmphdmEiLApAQCAtMTQwMSw2ICsx
NDAyLDE4IEBAIHB1YmxpYyBjbGFzcyBKU1IzMDhTcGVjU25pcHBldFRlc3RzIGV4dGVuZHMgQWJz
dHJhY3RSZWdyZXNzaW9uVGVzdCB7CiAJCQkJIn1cbiIsCiAJCX0sCiAJCSIiKTsKKwkJLy8gamF2
YWMgYjEwMAorCQkvLyBGb3IgdGhlIGFubm90YXRpb25zIGluIHRoZSBzdGF0aWMgey4uLn0gdGhl
IGNsaW5pdCBoYXM6CisJCS8vCQlSdW50aW1lSW52aXNpYmxlVHlwZUFubm90YXRpb25zOgorCQkv
LwkgICAgICAgIDA6ICMxMSgpOiBDQVNULCBvZmZzZXQ9MCwgdHlwZV9pbmRleD0wCisJCS8vCSAg
ICAgICAgMTogIzExKCk6IE5FVywgb2Zmc2V0PTAKKwkJLy8gamF2YWMgaXMgc2tpcHBpbmcgcHJv
ZHVjdGlvbiBvZiB0aGUgY2FzdCBzbyBvZmZzZXQgaXMgMC4gSkRUIGlzIGN1cnJlbnRseSBhbHdh
eXMgcHJvZHVjaW5nIHRoZQorCQkvLyBjaGVja2Nhc3QgZm9yIGFuIGFubm90YXRlZCBjYXN0IHNv
IHRoZSBvZmZzZXQgaXMgNy4KKwkJCisJCS8vIEZvciB0aGUgYW5ub3RhdGlvbnMgaW4gdGhlIGlu
aXRpYWxpemVyIHsuLi59IHRoZSBjb25zdHJ1Y3RvcnMgYm90aCBoYXZlOgorCQkvLwkgICAgICBS
dW50aW1lSW52aXNpYmxlVHlwZUFubm90YXRpb25zOgorCQkvLwkgICAgICAgICAgMDogIzExKCk6
IE5FVywgb2Zmc2V0PTQKKwogCQlTdHJpbmcgZXhwZWN0ZWRPdXRwdXQgPQogCQkJCSIvLyBDb21w
aWxlZCBmcm9tIFguamF2YSAodmVyc2lvbiAxLjggOiA1Mi4wLCBzdXBlciBiaXQpXG4iICsgCiAJ
CQkJImNsYXNzIFgge1xuIiArIApAQCAtMTQxNywxMCArMTQzMCwxMCBAQCBwdWJsaWMgY2xhc3Mg
SlNSMzA4U3BlY1NuaXBwZXRUZXN0cyBleHRlbmRzIEFic3RyYWN0UmVncmVzc2lvblRlc3Qgewog
CQkJCSIgICAgY29uc3RhbnQgIzEwIHV0Zjg6IFwiPGluaXQ+XCJcbiIgKyAKIAkJCQkiICAgIGNv
bnN0YW50ICMxMSB1dGY4OiBcIkxpbmVOdW1iZXJUYWJsZVwiXG4iICsgCiAJCQkJIiAgICBjb25z
dGFudCAjMTIgdXRmODogXCJMb2NhbFZhcmlhYmxlVGFibGVcIlxuIiArIAotCQkJCSIgICAgY29u
c3RhbnQgIzEzIHV0Zjg6IFwidGhpc1wiXG4iICsgCi0JCQkJIiAgICBjb25zdGFudCAjMTQgdXRm
ODogXCJMWDtcIlxuIiArIAotCQkJCSIgICAgY29uc3RhbnQgIzE1IHV0Zjg6IFwiUnVudGltZUlu
dmlzaWJsZVR5cGVBbm5vdGF0aW9uc1wiXG4iICsgCi0JCQkJIiAgICBjb25zdGFudCAjMTYgdXRm
ODogXCJMTm9uTnVsbDtcIlxuIiArIAorCQkJCSIgICAgY29uc3RhbnQgIzEzIHV0Zjg6IFwiUnVu
dGltZUludmlzaWJsZVR5cGVBbm5vdGF0aW9uc1wiXG4iICsgCisJCQkJIiAgICBjb25zdGFudCAj
MTQgdXRmODogXCJMTm9uTnVsbDtcIlxuIiArIAorCQkJCSIgICAgY29uc3RhbnQgIzE1IHV0Zjg6
IFwidGhpc1wiXG4iICsgCisJCQkJIiAgICBjb25zdGFudCAjMTYgdXRmODogXCJMWDtcIlxuIiAr
IAogCQkJCSIgICAgY29uc3RhbnQgIzE3IHV0Zjg6IFwiKEkpVlwiXG4iICsgCiAJCQkJIiAgICBj
b25zdGFudCAjMTggdXRmODogXCJ4XCJcbiIgKyAKIAkJCQkiICAgIGNvbnN0YW50ICMxOSB1dGY4
OiBcIklcIlxuIiArIApAQCAtMTQzMCwxNCArMTQ0MywyNSBAQCBwdWJsaWMgY2xhc3MgSlNSMzA4
U3BlY1NuaXBwZXRUZXN0cyBleHRlbmRzIEFic3RyYWN0UmVncmVzc2lvblRlc3QgewogCQkJCSIg
IC8vIE1ldGhvZCBkZXNjcmlwdG9yICM2ICgpVlxuIiArIAogCQkJCSIgIC8vIFN0YWNrOiAyLCBM
b2NhbHM6IDFcbiIgKyAKIAkJCQkiICBzdGF0aWMge307XG4iICsgCi0JCQkJIiAgICAwICBuZXcg
amF2YS5sYW5nLk9iamVjdCBbM11cbiIgKyAKLQkJCQkiICAgIDMgIGR1cFxuIiArIAotCQkJCSIg
ICAgNCAgaW52b2tlc3BlY2lhbCBqYXZhLmxhbmcuT2JqZWN0KCkgWzhdXG4iICsgCi0JCQkJIiAg
ICA3ICBhc3RvcmVfMFxuIiArIAotCQkJCSIgICAgOCAgcmV0dXJuXG4iICsgCisJCQkJIiAgICAg
MCAgbmV3IGphdmEubGFuZy5PYmplY3QgWzNdXG4iICsgCisJCQkJIiAgICAgMyAgZHVwXG4iICsg
CisJCQkJIiAgICAgNCAgaW52b2tlc3BlY2lhbCBqYXZhLmxhbmcuT2JqZWN0KCkgWzhdXG4iICsg
CisJCQkJIiAgICAgNyAgY2hlY2tjYXN0IGphdmEubGFuZy5PYmplY3QgWzNdXG4iICsgCisJCQkJ
IiAgICAxMCAgYXN0b3JlXzBcbiIgKyAKKwkJCQkiICAgIDExICByZXR1cm5cbiIgKyAKIAkJCQki
ICAgICAgTGluZSBudW1iZXJzOlxuIiArIAogCQkJCSIgICAgICAgIFtwYzogMCwgbGluZTogNl1c
biIgKyAKLQkJCQkiICAgICAgICBbcGM6IDgsIGxpbmU6IDddXG4iICsgCisJCQkJIiAgICAgICAg
W3BjOiAxMSwgbGluZTogN11cbiIgKyAKKwkJCQkiICAgIFJ1bnRpbWVJbnZpc2libGVUeXBlQW5u
b3RhdGlvbnM6IFxuIiArIAorCQkJCSIgICAgICAjMTQgQE5vbk51bGwoXG4iICsgCisJCQkJIiAg
ICAgICAgdGFyZ2V0IHR5cGUgPSAweDQ0IE5FV1xuIiArIAorCQkJCSIgICAgICAgIG9mZnNldCA9
IDBcbiIgKyAKKwkJCQkiICAgICAgKVxuIiArIAorCQkJCSIgICAgICAjMTQgQE5vbk51bGwoXG4i
ICsgCisJCQkJIiAgICAgICAgdGFyZ2V0IHR5cGUgPSAweDQ3IENBU1RcbiIgKyAKKwkJCQkiICAg
ICAgICBvZmZzZXQgPSA3XG4iICsgCisJCQkJIiAgICAgICAgdHlwZSBhcmd1bWVudCBpbmRleCA9
IDBcbiIgKyAKKwkJCQkiICAgICAgKVxuIiArIAogCQkJCSIgIFxuIiArIAogCQkJCSIgIC8vIE1l
dGhvZCBkZXNjcmlwdG9yICM2ICgpVlxuIiArIAogCQkJCSIgIC8vIFN0YWNrOiAxLCBMb2NhbHM6
IDFcbiIgKyAKQEAgLTE0NTQsNyArMTQ3OCw3IEBAIHB1YmxpYyBjbGFzcyBKU1IzMDhTcGVjU25p
cHBldFRlc3RzIGV4dGVuZHMgQWJzdHJhY3RSZWdyZXNzaW9uVGVzdCB7CiAJCQkJIiAgICAgIExv
Y2FsIHZhcmlhYmxlIHRhYmxlOlxuIiArIAogCQkJCSIgICAgICAgIFtwYzogMCwgcGM6IDExXSBs
b2NhbDogdGhpcyBpbmRleDogMCB0eXBlOiBYXG4iICsgCiAJCQkJIiAgICBSdW50aW1lSW52aXNp
YmxlVHlwZUFubm90YXRpb25zOiBcbiIgKyAKLQkJCQkiICAgICAgIzE2IEBOb25OdWxsKFxuIiAr
IAorCQkJCSIgICAgICAjMTQgQE5vbk51bGwoXG4iICsgCiAJCQkJIiAgICAgICAgdGFyZ2V0IHR5
cGUgPSAweDQ0IE5FV1xuIiArIAogCQkJCSIgICAgICAgIG9mZnNldCA9IDRcbiIgKyAKIAkJCQki
ICAgICAgKVxuIiArIApAQCAtMTQ3NSw3ICsxNDk5LDcgQEAgcHVibGljIGNsYXNzIEpTUjMwOFNw
ZWNTbmlwcGV0VGVzdHMgZXh0ZW5kcyBBYnN0cmFjdFJlZ3Jlc3Npb25UZXN0IHsKIAkJCQkiICAg
ICAgICBbcGM6IDAsIHBjOiAxMV0gbG9jYWw6IHRoaXMgaW5kZXg6IDAgdHlwZTogWFxuIiArIAog
CQkJCSIgICAgICAgIFtwYzogMCwgcGM6IDExXSBsb2NhbDogeCBpbmRleDogMSB0eXBlOiBpbnRc
biIgKyAKIAkJCQkiICAgIFJ1bnRpbWVJbnZpc2libGVUeXBlQW5ub3RhdGlvbnM6IFxuIiArIAot
CQkJCSIgICAgICAjMTYgQE5vbk51bGwoXG4iICsgCisJCQkJIiAgICAgICMxNCBATm9uTnVsbChc
biIgKyAKIAkJCQkiICAgICAgICB0YXJnZXQgdHlwZSA9IDB4NDQgTkVXXG4iICsgCiAJCQkJIiAg
ICAgICAgb2Zmc2V0ID0gNFxuIiArIAogCQkJCSIgICAgICApXG4iICsgCmRpZmYgLS1naXQgYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvQ2xhc3NGaWxlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvQ2xhc3NGaWxlLmphdmEKaW5kZXggZGM1NWIz
ZC4uZGNhNjYzMyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL0NsYXNzRmlsZS5qYXZhCisrKyBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9DbGFzc0ZpbGUuamF2YQpAQCAtMTcsNiArMTcsNyBAQAogICogICAgICAgICAgICAgICAgICAg
ICAgICAgIEJ1ZyAzODM2MjQgLSBbMS44XVtjb21waWxlcl0gUmV2aXZlIGNvZGUgZ2VuZXJhdGlv
biBzdXBwb3J0IGZvciB0eXBlIGFubm90YXRpb25zIChmcm9tIE9saXZpZXIncyB3b3JrKQogICog
ICAgICAgICAgICAgICAgICAgICAgICAgIEJ1ZyA0MDkyMzYgLSBbMS44XVtjb21waWxlcl0gVHlw
ZSBhbm5vdGF0aW9ucyBvbiBpbnRlcnNlY3Rpb24gY2FzdCB0eXBlcyBkcm9wcGVkIGJ5IGNvZGUg
Z2VuZXJhdG9yCiAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgQnVnIDQwOTI0NiAtIFsxLjhd
W2NvbXBpbGVyXSBUeXBlIGFubm90YXRpb25zIG9uIGNhdGNoIHBhcmFtZXRlcnMgbm90IGhhbmRs
ZWQgcHJvcGVybHkKKyAqICAgICAgICAgICAgICAgICAgICAgICAgICBCdWcgNDE1NTQxIC0gWzEu
OF1bY29tcGlsZXJdIFR5cGUgYW5ub3RhdGlvbnMgaW4gdGhlIGJvZHkgb2Ygc3RhdGljIGluaXRp
YWxpemVyIGdldCBkcm9wcGVkCiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KIHBhY2thZ2Ugb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyOwogCkBAIC0xNTYyLDYgKzE1NjMsMTAgQEAg
cHVibGljIGNsYXNzIENsYXNzRmlsZSBpbXBsZW1lbnRzIFR5cGVDb25zdGFudHMsIFR5cGVJZHMg
ewogCQkJCQl0cnVlKTsKIAkJfQogCisJCWlmICgodGhpcy5wcm9kdWNlQXR0cmlidXRlcyAmIENs
YXNzRmlsZUNvbnN0YW50cy5BVFRSX1RZUEVfQU5OT1RBVElPTikgIT0gMCkgeworCQkJYXR0cmli
dXRlc051bWJlciArPSBnZW5lcmF0ZVR5cGVBbm5vdGF0aW9uc09uQ29kZUF0dHJpYnV0ZSgpOwor
CQl9CisKIAkJLy8gdXBkYXRlIHRoZSBudW1iZXIgb2YgYXR0cmlidXRlcwogCQkvLyBlbnN1cmUg
Zmlyc3QgdGhhdCB0aGVyZSBpcyBlbm91Z2ggc3BhY2UgYXZhaWxhYmxlIGluc2lkZSB0aGUgY29u
dGVudHMgYXJyYXkKIAkJaWYgKGNvZGVBdHRyaWJ1dGVBdHRyaWJ1dGVPZmZzZXQgKyAyID49IHRo
aXMuY29udGVudHMubGVuZ3RoKSB7CkBAIC0xNjcyLDYgKzE2NzcsMTAgQEAgcHVibGljIGNsYXNz
IENsYXNzRmlsZSBpbXBsZW1lbnRzIFR5cGVDb25zdGFudHMsIFR5cGVJZHMgewogCQkJCQl0cnVl
KTsKIAkJfQogCisJCWlmICgodGhpcy5wcm9kdWNlQXR0cmlidXRlcyAmIENsYXNzRmlsZUNvbnN0
YW50cy5BVFRSX1RZUEVfQU5OT1RBVElPTikgIT0gMCkgeworCQkJYXR0cmlidXRlc051bWJlciAr
PSBnZW5lcmF0ZVR5cGVBbm5vdGF0aW9uc09uQ29kZUF0dHJpYnV0ZSgpOworCQl9CisJCQogCQkv
LyB1cGRhdGUgdGhlIG51bWJlciBvZiBhdHRyaWJ1dGVzCiAJCS8vIGVuc3VyZSBmaXJzdCB0aGF0
IHRoZXJlIGlzIGVub3VnaCBzcGFjZSBhdmFpbGFibGUgaW5zaWRlIHRoZSBjb250ZW50cyBhcnJh
eQogCQlpZiAoY29kZUF0dHJpYnV0ZUF0dHJpYnV0ZU9mZnNldCArIDIgPj0gdGhpcy5jb250ZW50
cy5sZW5ndGgpIHsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQ2FzdEV4cHJlc3Npb24uamF2YSBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hc3QvQ2FzdEV4cHJlc3Npb24uamF2YQppbmRleCAyNDJjNGJhLi5mNTZkYjY3IDEw
MDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L0Nhc3RFeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fz
dC9DYXN0RXhwcmVzc2lvbi5qYXZhCkBAIC0xOSw2ICsxOSw4IEBACiAgKgkJCQkJCQkJYnVnIDM4
MzM2OCAtIFtjb21waWxlcl1bbnVsbF0gc3ludGFjdGljIG51bGwgYW5hbHlzaXMgZm9yIGZpZWxk
IHJlZmVyZW5jZXMKICAqCQkJCQkJCQlidWcgNDAxMDE3IC0gW2NvbXBpbGVyXVtudWxsXSBjYXN0
ZWQgcmVmZXJlbmNlIHRvIEBOdWxsYWJsZSBmaWVsZCBsYWNrcyBhIHdhcm5pbmcKICAqCQkJCQkJ
CQlidWcgNDAwNzYxIC0gW2NvbXBpbGVyXVtudWxsXSBudWxsIG1heSBiZSByZXR1cm4gYXMgYm9v
bGVhbiB3aXRob3V0IGEgZGlhZ25vc3RpYworICogICAgICAgIEFuZHkgQ2xlbWVudCAoR29QaXZv
dGFsLCBJbmMpIGFjbGVtZW50QGdvcGl2b3RhbC5jb20gLSBDb250cmlidXRpb25zIGZvcgorICog
ICAgICAgICAgICAgICAgICAgICAgICAgIEJ1ZyA0MTU1NDEgLSBbMS44XVtjb21waWxlcl0gVHlw
ZSBhbm5vdGF0aW9ucyBpbiB0aGUgYm9keSBvZiBzdGF0aWMgaW5pdGlhbGl6ZXIgZ2V0IGRyb3Bw
ZWQKICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqLwogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50
ZXJuYWwuY29tcGlsZXIuYXN0OwogCkBAIC01MSwxNCArNTMsMTQgQEAgcHVibGljIGNsYXNzIENh
c3RFeHByZXNzaW9uIGV4dGVuZHMgRXhwcmVzc2lvbiB7CiAJcHVibGljIEV4cHJlc3Npb24gZXhw
cmVzc2lvbjsKIAlwdWJsaWMgVHlwZVJlZmVyZW5jZSB0eXBlOwogCXB1YmxpYyBUeXBlQmluZGlu
ZyBleHBlY3RlZFR5cGU7IC8vIHdoZW4gYXNzaWdubWVudCBjb252ZXJzaW9uIHRvIGEgZ2l2ZW4g
ZXhwZWN0ZWQgdHlwZTogU3RyaW5nIHMgPSAoU3RyaW5nKSB0OworCXB1YmxpYyBib29sZWFuIGFu
bm90YXRlZENhc3Q7CiAKIC8vZXhwcmVzc2lvbi5pbXBsaWNpdENvbnZlcnNpb24gaG9sZHMgdGhl
IGNhc3QgZm9yIGJhc2VUeXBlIGNhc3RpbmcKIHB1YmxpYyBDYXN0RXhwcmVzc2lvbihFeHByZXNz
aW9uIGV4cHJlc3Npb24sIFR5cGVSZWZlcmVuY2UgdHlwZSkgewogCXRoaXMuZXhwcmVzc2lvbiA9
IGV4cHJlc3Npb247CiAJdGhpcy50eXBlID0gdHlwZTsKIAl0eXBlLmJpdHMgfD0gQVNUTm9kZS5J
Z25vcmVSYXdUeXBlQ2hlY2s7IC8vIG5vIG5lZWQgdG8gd29ycnkgYWJvdXQgcmF3IHR5cGUgdXNh
Z2UKLQlpZiAoKHRoaXMudHlwZS5iaXRzICYgQVNUTm9kZS5IYXNUeXBlQW5ub3RhdGlvbnMpICE9
IDApCi0JCXRoaXMuYml0cyB8PSBBU1ROb2RlLkdlbmVyYXRlQ2hlY2tjYXN0OworCXRoaXMuYW5u
b3RhdGVkQ2FzdCA9ICh0aGlzLnR5cGUuYml0cyAmIEFTVE5vZGUuSGFzVHlwZUFubm90YXRpb25z
KSAhPSAwOwogfQogCiBwdWJsaWMgRmxvd0luZm8gYW5hbHlzZUNvZGUoQmxvY2tTY29wZSBjdXJy
ZW50U2NvcGUsIEZsb3dDb250ZXh0IGZsb3dDb250ZXh0LCBGbG93SW5mbyBmbG93SW5mbykgewpA
QCAtNDI0LDkgKzQyNiw5IEBAIHB1YmxpYyB2b2lkIGdlbmVyYXRlQ29kZShCbG9ja1Njb3BlIGN1
cnJlbnRTY29wZSwgQ29kZVN0cmVhbSBjb2RlU3RyZWFtLCBib29sZWFuCiAJaW50IHBjID0gY29k
ZVN0cmVhbS5wb3NpdGlvbjsKIAlib29sZWFuIG5lZWRSdW50aW1lQ2hlY2tjYXN0ID0gKHRoaXMu
Yml0cyAmIEFTVE5vZGUuR2VuZXJhdGVDaGVja2Nhc3QpICE9IDA7CiAJaWYgKHRoaXMuY29uc3Rh
bnQgIT0gQ29uc3RhbnQuTm90QUNvbnN0YW50KSB7Ci0JCWlmICh2YWx1ZVJlcXVpcmVkIHx8IG5l
ZWRSdW50aW1lQ2hlY2tjYXN0KSB7IC8vIEFkZGVkIGZvcjogMUYxVzlJRzogSVZKQ09NOldJTk5U
IC0gQ29tcGlsZXIgb21pdHMgY2FzdGluZyBjaGVjaworCQlpZiAodmFsdWVSZXF1aXJlZCB8fCBu
ZWVkUnVudGltZUNoZWNrY2FzdCB8fCB0aGlzLmFubm90YXRlZENhc3QpIHsgLy8gQWRkZWQgZm9y
OiAxRjFXOUlHOiBJVkpDT006V0lOTlQgLSBDb21waWxlciBvbWl0cyBjYXN0aW5nIGNoZWNrCiAJ
CQljb2RlU3RyZWFtLmdlbmVyYXRlQ29uc3RhbnQodGhpcy5jb25zdGFudCwgdGhpcy5pbXBsaWNp
dENvbnZlcnNpb24pOwotCQkJaWYgKG5lZWRSdW50aW1lQ2hlY2tjYXN0KSB7CisJCQlpZiAobmVl
ZFJ1bnRpbWVDaGVja2Nhc3QgfHwgdGhpcy5hbm5vdGF0ZWRDYXN0KSB7CiAJCQkJY29kZVN0cmVh
bS5jaGVja2Nhc3QodGhpcy50eXBlLCB0aGlzLnJlc29sdmVkVHlwZSk7CiAJCQl9CiAJCQlpZiAo
IXZhbHVlUmVxdWlyZWQpIHsKQEAgLTQzOCw3ICs0NDAsNyBAQCBwdWJsaWMgdm9pZCBnZW5lcmF0
ZUNvZGUoQmxvY2tTY29wZSBjdXJyZW50U2NvcGUsIENvZGVTdHJlYW0gY29kZVN0cmVhbSwgYm9v
bGVhbgogCQlyZXR1cm47CiAJfQogCXRoaXMuZXhwcmVzc2lvbi5nZW5lcmF0ZUNvZGUoY3VycmVu
dFNjb3BlLCBjb2RlU3RyZWFtLCB2YWx1ZVJlcXVpcmVkIHx8IG5lZWRSdW50aW1lQ2hlY2tjYXN0
KTsKLQlpZiAobmVlZFJ1bnRpbWVDaGVja2Nhc3QgJiYgdGhpcy5leHByZXNzaW9uLnBvc3RDb252
ZXJzaW9uVHlwZShjdXJyZW50U2NvcGUpICE9IHRoaXMucmVzb2x2ZWRUeXBlLmVyYXN1cmUoKSkg
eyAvLyBubyBuZWVkIHRvIGlzc3VlIGEgY2hlY2tjYXN0IGlmIGFscmVhZHkgZG9uZSBhcyBnZW5l
cmljQ2FzdAorCWlmICh0aGlzLmFubm90YXRlZENhc3QgfHwgKG5lZWRSdW50aW1lQ2hlY2tjYXN0
ICYmIHRoaXMuZXhwcmVzc2lvbi5wb3N0Q29udmVyc2lvblR5cGUoY3VycmVudFNjb3BlKSAhPSB0
aGlzLnJlc29sdmVkVHlwZS5lcmFzdXJlKCkpKSB7IC8vIG5vIG5lZWQgdG8gaXNzdWUgYSBjaGVj
a2Nhc3QgaWYgYWxyZWFkeSBkb25lIGFzIGdlbmVyaWNDYXN0CiAJCWNvZGVTdHJlYW0uY2hlY2tj
YXN0KHRoaXMudHlwZSwgdGhpcy5yZXNvbHZlZFR5cGUpOwogCX0KIAlpZiAodmFsdWVSZXF1aXJl
ZCkgewotLSAKMS43LjExLjIKCg==
</data>

          </attachment>
      

    </bug>

</bugzilla>