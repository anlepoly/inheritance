<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>432614</bug_id>
          
          <creation_ts>2014-04-11 07:58:00 -0400</creation_ts>
          <short_desc>[1.8] LambdaExpression#resolveMethodBinding() gives parameter type annotation from SAM</short_desc>
          <delta_ts>2014-10-09 07:19:45 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.5 M2</target_milestone>
          
          <blocked>432578</blocked>
    
    <blocked>417801</blocked>
    
    <blocked>446442</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Noopur Gupta">noopur_gupta</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>jarthana</cc>
    
    <cc>markus_keller</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2388022</commentid>
    <comment_count>0</comment_count>
    <who name="Noopur Gupta">noopur_gupta</who>
    <bug_when>2014-04-11 07:58:05 -0400</bug_when>
    <thetext>package test.one;

import java.lang.annotation.ElementType;
import java.lang.annotation.Target;

public class C1 {
	FI fi1= (@T2 int i) -&gt; {};
}

interface FI {
	void foo(@T1 int i);
}

@Target(ElementType.TYPE_USE) @interface T1 {}
@Target(ElementType.TYPE_USE) @interface T2 {}
-------------------------------------------------------------

In the above example, lambdaExpression.resolveMethodBinding().getParameterTypes()[0] for the lambda expression, gives &quot;@T1 int&quot;.
It should be &quot;@T2 int&quot;. 
&quot;@T1 int&quot; is the type of the parameter in SAM.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2398779</commentid>
    <comment_count>1</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-08 07:40:15 -0400</bug_when>
    <thetext>I see this code in LambdaExpression:

this.actualMethodBinding = new MethodBinding(this.binding.modifiers, this.binding.selector, this.binding.returnType, 
						this.binding instanceof SyntheticMethodBinding ? this.descriptor.parameters : this.binding.parameters,  // retain any faults in parameter list.
								this.binding.thrownExceptions, this.binding.declaringClass);


Basically, we are taking the parameters from the LambdaExpression#descriptor. The descriptor is referring to this:

   public abstract void foo(@T1 int) 

while LambdaExpression@binding is:

   private static void lambda$0(@T2 int)

Now I am not quite sure what the correct behavior is. Srikanth, what do you think?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2398830</commentid>
    <comment_count>2</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-08 09:03:33 -0400</bug_when>
    <thetext>Srikanth, please take it forward.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2398904</commentid>
    <comment_count>3</comment_count>
      <attachid>242851</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-08 10:27:04 -0400</bug_when>
    <thetext>Created attachment 242851
Testcase

Test case for scenario reported in comment #0, we can use this should we accept the current behavior as bug.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2399182</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-05-09 01:32:34 -0400</bug_when>
    <thetext>Sasi, I won&apos;t have time today and I am off after that, please take a look.
FYI, this is tagged for RC1. Thanks!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2401570</commentid>
    <comment_count>5</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-14 08:57:00 -0400</bug_when>
    <thetext>Sasi, you can prioritize this below your other RC1 bugs. The UI bug depending on this has been moved out of Luna.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2435430</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-08-05 01:52:34 -0400</bug_when>
    <thetext>Retargetting to M2, as I don&apos;t expect to finish work on these before this week&apos;s build(s)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2437524</commentid>
    <comment_count>7</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-08-11 08:00:48 -0400</bug_when>
    <thetext>Annotations are not the only strange thing about the synthetic lambda$n(..) method. It&apos;s also static and private. But the interesting property of the LambdaExpression&apos;s method would be that it implements the functional interface.

I think this bug can be marked as dup of bug 429813.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2437659</commentid>
    <comment_count>8</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-08-11 12:20:15 -0400</bug_when>
    <thetext>Looks like there&apos;s too much riding on LambdaExpression#getMethodBinding(). I suggest we use the LambdaExpression#descriptor for use in DOM and Java model side and leave the rest as is.

Srikanth, what&apos;s your take on this?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2437856</commentid>
    <comment_count>9</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-08-12 04:36:30 -0400</bug_when>
    <thetext>There&apos;s a testcase in JDT Core with the following code:

  LambdaExpression lambdaExpression = (LambdaExpression)expression;
  VariableDeclaration variableDeclaration = (VariableDeclaration) lambdaExpression.parameters().get(0);
  IVariableBinding variableBinding = variableDeclaration.resolveBinding();
  IMethodBinding methodBinding = lambdaExpression.resolveMethodBinding();
  String methodKey = ((IBinding) methodBinding).getKey();
  String variableKey = ((IBinding) variableBinding).getKey();
  assertTrue(variableKey.regionMatches(0, methodKey, 0, methodKey.length()));

Obviously this fails when I change the method binding to represent the SAM, because LambdaExpression#parameters() contains the argument list from the lambda, but we are comparing it with the SAM&apos;s source range. The doc for LambdaExpression#parameters has this:

/**
 * Returns the live ordered list of formal parameters of this lambda expression.
 * Note that all elements must be of the same type, either
 * ...
 */

Suggestions/thoughts?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2438281</commentid>
    <comment_count>10</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-08-13 00:55:35 -0400</bug_when>
    <thetext>We will keep this bug for addressing the mixed up parameters and bug 429813 for deciding/fixing what to expose to the client.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2438376</commentid>
    <comment_count>11</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-08-13 05:26:08 -0400</bug_when>
    <thetext>The issue reported in comment #0 has been fixed via:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=dc9a89d9f844d31b09ec158bf347daa2976701f3</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2452988</commentid>
    <comment_count>12</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-09-17 06:23:51 -0400</bug_when>
    <thetext>Verified fixed for 4.5 M2 using I20140916-2000 build</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>242851</attachid>
            <date>2014-05-08 10:27:00 -0400</date>
            <delta_ts>2014-05-08 10:27:04 -0400</delta_ts>
            <desc>Testcase</desc>
            <filename>Testcase-for-bug-432614.patch</filename>
            <type>text/plain</type>
            <size>1789</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMAojUCBvcmcuZWNsaXBzZS5qZHQuY29yZS50
ZXN0cy5tb2RlbApkaWZmIC0tZ2l0IHNyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9kb20v
QVNUQ29udmVydGVyMThUZXN0LmphdmEgc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Rv
bS9BU1RDb252ZXJ0ZXIxOFRlc3QuamF2YQppbmRleCBlMmQ0ZjEzLi5mOTIyN2VkIDEwMDY0NAot
LS0gc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2RvbS9BU1RDb252ZXJ0ZXIxOFRlc3Qu
amF2YQorKysgc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2RvbS9BU1RDb252ZXJ0ZXIx
OFRlc3QuamF2YQpAQCAtNDM2MywzICs0MzYzLDMwIEBACiAJfQogfQorLy8gaHR0cHM6Ly9idWdz
LmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQzMjYxNAorcHVibGljIHZvaWQgdGVz
dDQzMjYxNCgpIHRocm93cyBKYXZhTW9kZWxFeGNlcHRpb24geworCXRoaXMud29ya2luZ0NvcHkg
PSBnZXRXb3JraW5nQ29weSgiL0NvbnZlcnRlcjE4L3NyYy9YLmphdmEiLAorCQkJdHJ1ZS8qIHJl
c29sdmUgKi8pOworCVN0cmluZyBjb250ZW50cyA9IAorCQkJImltcG9ydCBqYXZhLmxhbmcuYW5u
b3RhdGlvbi5FbGVtZW50VHlwZTtcbiIgKworCQkJImltcG9ydCBqYXZhLmxhbmcuYW5ub3RhdGlv
bi5UYXJnZXQ7XG4iICsKKwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCSIgICBGSSBmaTEg
PSAoQFQyIGludCBpKSAtPiB7fTtcbiIgKworCQkJIn1cbiIgKworCQkJImludGVyZmFjZSBGSSB7
XG4iICsKKwkJCSIJdm9pZCBmb28oQFQxIGludCBpKTtcbiIgKworCQkJIn1cbiIgKworCQkJIkBU
YXJnZXQoRWxlbWVudFR5cGUuVFlQRV9VU0UpIEBpbnRlcmZhY2UgVDEge31cbiIgKworCQkJIkBU
YXJnZXQoRWxlbWVudFR5cGUuVFlQRV9VU0UpIEBpbnRlcmZhY2UgVDIge31cbiI7CisJQ29tcGls
YXRpb25Vbml0IGN1ID0gKENvbXBpbGF0aW9uVW5pdCkgYnVpbGRBU1QoY29udGVudHMsIHRoaXMu
d29ya2luZ0NvcHkpOworCVR5cGVEZWNsYXJhdGlvbiB0eXBlZGVjbGFyYXRpb24gPSAoVHlwZURl
Y2xhcmF0aW9uKSBnZXRBU1ROb2RlKGN1LCAwKTsKKwlGaWVsZERlY2xhcmF0aW9uIGZpZWxkRGVj
bGFyYXRpb24gPSAoRmllbGREZWNsYXJhdGlvbikgdHlwZWRlY2xhcmF0aW9uLmJvZHlEZWNsYXJh
dGlvbnMoKS5nZXQoMCk7CisJVmFyaWFibGVEZWNsYXJhdGlvbkZyYWdtZW50IGZyYWdtZW50ID0g
KFZhcmlhYmxlRGVjbGFyYXRpb25GcmFnbWVudClmaWVsZERlY2xhcmF0aW9uLmZyYWdtZW50cygp
LmdldCgwKTsKKwlFeHByZXNzaW9uIGV4cHJlc3Npb24gPSBmcmFnbWVudC5nZXRJbml0aWFsaXpl
cigpOworCWFzc2VydFRydWUoZXhwcmVzc2lvbiBpbnN0YW5jZW9mIExhbWJkYUV4cHJlc3Npb24p
OworCUxhbWJkYUV4cHJlc3Npb24gbGFtYmRhRXhwcmVzc2lvbiA9IChMYW1iZGFFeHByZXNzaW9u
KWV4cHJlc3Npb247CisJSU1ldGhvZEJpbmRpbmcgbWV0aG9kQmluZGluZyA9IGxhbWJkYUV4cHJl
c3Npb24ucmVzb2x2ZU1ldGhvZEJpbmRpbmcoKTsKKwlJVHlwZUJpbmRpbmdbXSBwYXJhbXMgPSBt
ZXRob2RCaW5kaW5nLmdldFBhcmFtZXRlclR5cGVzKCk7CisJYXNzZXJ0RXF1YWxzKCJJbmNvcnJl
Y3Qgbm8gb2YgcGFyYW1ldGVyIHR5cGVzIiwgMSwgcGFyYW1zLmxlbmd0aCk7CisJYXNzZXJ0RXF1
YWxzKCJJbmNvcnJlY3QgcGFyYW1ldGVyIHR5cGUgYmluZGluZyIsICJAVDIgaW50IiwgcGFyYW1z
WzBdLnRvU3RyaW5nKCkpOworfQogfQ==
</data>

          </attachment>
      

    </bug>

</bugzilla>