<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>448028</bug_id>
          
          <creation_ts>2014-10-21 05:14:00 -0400</creation_ts>
          <short_desc>[1.8][compiler] cannot infer type arguments where 1.7 does</short_desc>
          <delta_ts>2015-01-16 14:37:11 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.5</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.5 M3</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="kurt Mising name">kurt2002</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>kurt2002</cc>
    
    <cc>manpalat</cc>
    
    <cc>parth.patel</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="63653"
          type_id="1"
          status="+"
          setter="stephan.herrmann"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2468517</commentid>
    <comment_count>0</comment_count>
    <who name="kurt Mising name">kurt2002</who>
    <bug_when>2014-10-21 05:14:36 -0400</bug_when>
    <thetext>Version: Luna SR1 (4.4.1)
Build id: M20140925-0400

and

Version: Mars (4.5)
Build id: I20140918-0330


In the following example the method err1() compiles ok when using JDK Compilance 1.7 but issues an error when set to 1.8:

package e44.j8.err;

public class F {

  public static interface I {/*empty*/}

  public static class C
    implements I {/*empty*/}

  public static class W&lt;T extends I&gt;
    implements I {

    // --- problem is triggered only, when there is a vararg-parameter
    public W(final T t, final Object... o) {
      super();
    }
  }

  // --- needed to trigger problem
  public static final &lt;T&gt; T inspect(final T t) {
    return t;
  }

  // --- this compiles ok when having JDK Compilance set to 1.7 !
  public static final W&lt;C&gt; err1() {
    final C c = new C();
    final Object o = new Object();
    return inspect(new W&lt;&gt;(c, o)); // - ERROR: Cannot infer type arguments for W&lt;&gt; F.java
  }

  public static final W&lt;C&gt; wrn1() {
    final C c = new C();
    final Object o = new Object();
    // --- giving the type-parameter yields a warning
    // --- comparing that to the error of method err1() it does not make much sense
    return inspect(new W&lt;C&gt;(c, o)); // - WARNING: Redundant specification of type arguments &lt;F.C&gt; F.java
  }

  public static final W&lt;C&gt; ok1() {
    final C c = new C();
    // --- no extra vararg-paramaeter
    return inspect(new W&lt;&gt;(c)); // - OK
  }

  public static final W&lt;C&gt; ok2() {
    final C c = new C();
    final Object o = new Object();
    // --- no check-method
    return new W&lt;&gt;(c, o); // - OK
  }

  public static final W&lt;C&gt; ok3() {
    final C c = new C();
    // --- no check-method
    return new W&lt;&gt;(c); // - OK
  }

  public static final W&lt;C&gt; ok4() {
    final C c = new C();
    final Object o = new Object();
    // --- this also compiles (my solution for now)
    final W&lt;C&gt; w = new W&lt;&gt;(c, o);
    return inspect(w);
  }
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2468528</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-21 05:21:48 -0400</bug_when>
    <thetext>Thanks, I&apos;ll take a look.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2468586</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-21 07:07:34 -0400</bug_when>
    <thetext>When the nested poly expression is a not a PGMB, we are using the outer
context&apos;s inference kind incorrectly for the inner method. I have a fix
under test.

I had noticed this possibility while working on C set construction for
lambda interleaved poly invocations for https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444 and left a FIXME
note there. Cleaned that up as well as the bug in CEF.reduce that is impacting
the current test case.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2468628</commentid>
    <comment_count>3</comment_count>
      <attachid>248044</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-21 07:57:58 -0400</bug_when>
    <thetext>Created attachment 248044
Proposed patch</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2468633</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-21 08:02:15 -0400</bug_when>
    <thetext>This patch is on top of

    - The &quot;Correct merged patch&quot; for bug 437444
    - the patch at https://bugs.eclipse.org/bugs/show_bug.cgi?id=430686
    - the patch at https://bugs.eclipse.org/bugs/show_bug.cgi?id=440019

applied in that order.

While working on this bug, I learnt something new. A PGMB can be manufactured
without ever entering inference - by Scope.findExactMethod. Such PGMBs will
have no inference context - I think this is what this code block in
CEF.reduce is working around:

if (innerCtx == null) { // no inference -&gt; assume it wasn&apos;t really poly after all
							TypeBinding exprType = this.left.resolvedType;
							if (exprType == null || !exprType.isValidBinding())
								return FALSE;
							return ConstraintTypeFormula.create(exprType, this.right, COMPATIBLE, this.isSoft);
						}

It is not that it is not really a poly - it simply was not inferred.

I don&apos;t know of any ill effects of not lifting the constraints from such
PGMBs, but this is something to watch for.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471336</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-24 10:48:37 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #4)
&gt; It is not that it is not really a poly - it simply was not inferred.
&gt; 
&gt; I don&apos;t know of any ill effects of not lifting the constraints from such
&gt; PGMBs, but this is something to watch for.

Can we call it &quot;unnecessarily poly&quot;? 

If getExactMethod() returns non-null, doesn&apos;t this indicate that resolution is independent of a target type? Instead of further constraints we get the ready proper types, which we leverage by a straight-forward compatibility constraint.
But don&apos;t tell this to Stephan, he&apos;ll cry that this is extra-constitutional :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472011</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-26 15:24:28 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #2)
&gt; When the nested poly expression is a not a PGMB, we are using the outer
&gt; context&apos;s inference kind incorrectly for the inner method. I have a fix
&gt; under test.
&gt; 
&gt; I had noticed this possibility while working on C set construction for
&gt; lambda interleaved poly invocations for
&gt; https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444 and left a FIXME
&gt; note there. Cleaned that up as well as the bug in CEF.reduce that is
&gt; impacting
&gt; the current test case.

Patch and explanation make sense to me.

Just one question: is it safe to call parameterCompatibilityLevel() in the middle of reduction? Could this potentially leak inference variables into places where we don&apos;t want them? The argument of getInferenceKind() is called &quot;nonGenericMethod&quot; but technically we only know it&apos;s not a PGMB, right? Could it still be a PMB with inference variables from its declaring class? Would that hurt?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472062</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-26 19:42:35 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #6)

&gt; Patch and explanation make sense to me.
&gt; 
&gt; Just one question: is it safe to call parameterCompatibilityLevel() in the
&gt; middle of reduction? Could this potentially leak inference variables into
&gt; places where we don&apos;t want them? The argument of getInferenceKind() is
&gt; called &quot;nonGenericMethod&quot; but technically we only know it&apos;s not a PGMB,
&gt; right? Could it still be a PMB with inference variables from its declaring
&gt; class? Would that hurt?

No, We are safe there - the only possibility there is a non-generic constructor
materialized by AE.inferConstructorOfElidedParameterizedType() and this cannot
have inference variables.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472066</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-26 20:01:14 -0400</bug_when>
    <thetext>Thanks Stephan, fix and tests are here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=4e63b50ba3ef9bcdccdff9a2ea673562f37143e4</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472769</commentid>
    <comment_count>9</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2014-10-28 04:09:25 -0400</bug_when>
    <thetext>Verified Fixed for Eclipse Mars 4.5M3 Build id: I20141027-2000</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2506867</commentid>
    <comment_count>10</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-01-16 14:37:11 -0500</bug_when>
    <thetext>*** Bug 457660 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>248044</attachid>
            <date>2014-10-21 07:57:00 -0400</date>
            <delta_ts>2014-10-21 07:57:58 -0400</delta_ts>
            <desc>Proposed patch</desc>
            <filename>448028.patch</filename>
            <type>text/plain</type>
            <size>8058</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3RfMV83LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmlj
c1JlZ3Jlc3Npb25UZXN0XzFfNy5qYXZhCmluZGV4IGJlOWE4YmYuLmRiYzE0ZTkgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3Rf
MV83LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdy
ZXNzaW9uVGVzdF8xXzcuamF2YQpAQCAtMjY3Nyw2ICsyNjc3LDg1IEBACiAJCX0sCiAJCSJFeHBl
Y3RlZCBDQ0UiKTsKIH0KKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVn
LmNnaT9pZD00NDgwMjgsIFsxLjhdIDEuOCBjYW5ub3QgaW5mZXIgdHlwZSBhcmd1bWVudHMgd2hl
cmUgMS43IGRvZXMgCitwdWJsaWMgdm9pZCB0ZXN0NDQ4MDI4KCkgeworCU1hcCBjdXN0b21PcHRp
b25zID0gZ2V0Q29tcGlsZXJPcHRpb25zKCk7CisJY3VzdG9tT3B0aW9ucy5wdXQoQ29tcGlsZXJP
cHRpb25zLk9QVElPTl9SZXBvcnRSZWR1bmRhbnRTcGVjaWZpY2F0aW9uT2ZUeXBlQXJndW1lbnRz
LCBDb21waWxlck9wdGlvbnMuRVJST1IpOwkKKwl0aGlzLnJ1bk5lZ2F0aXZlVGVzdCgKKwkJICAg
bmV3IFN0cmluZ1tdIHsKKwkJCSAgICJYLmphdmEiLAorCQkJICAgInB1YmxpYyBjbGFzcyBYIHtc
biIgKworCQkJICAgIlxuIiArCisJCQkgICAiICBwdWJsaWMgc3RhdGljIGludGVyZmFjZSBJIHsv
KmVtcHR5Ki99XG4iICsKKwkJCSAgICJcbiIgKworCQkJICAgIiAgcHVibGljIHN0YXRpYyBjbGFz
cyBDXG4iICsKKwkJCSAgICIgICAgaW1wbGVtZW50cyBJIHsvKmVtcHR5Ki99XG4iICsKKwkJCSAg
ICJcbiIgKworCQkJICAgIiAgcHVibGljIHN0YXRpYyBjbGFzcyBXPFQgZXh0ZW5kcyBJPlxuIiAr
CisJCQkgICAiICAgIGltcGxlbWVudHMgSSB7XG4iICsKKwkJCSAgICJcbiIgKworCQkJICAgIiAg
ICAvLyAtLS0gcHJvYmxlbSBpcyB0cmlnZ2VyZWQgb25seSwgd2hlbiB0aGVyZSBpcyBhIHZhcmFy
Zy1wYXJhbWV0ZXJcbiIgKworCQkJICAgIiAgICBwdWJsaWMgVyhmaW5hbCBUIHQsIGZpbmFsIE9i
amVjdC4uLiBvKSB7XG4iICsKKwkJCSAgICIgICAgICBzdXBlcigpO1xuIiArCisJCQkgICAiICAg
IH1cbiIgKworCQkJICAgIiAgfVxuIiArCisJCQkgICAiXG4iICsKKwkJCSAgICIgIC8vIC0tLSBu
ZWVkZWQgdG8gdHJpZ2dlciBwcm9ibGVtXG4iICsKKwkJCSAgICIgIHB1YmxpYyBzdGF0aWMgZmlu
YWwgPFQ+IFQgaW5zcGVjdChmaW5hbCBUIHQpIHtcbiIgKworCQkJICAgIiAgICByZXR1cm4gdDtc
biIgKworCQkJICAgIiAgfVxuIiArCisJCQkgICAiXG4iICsKKwkJCSAgICIgIC8vIC0tLSB0aGlz
IGNvbXBpbGVzIG9rIHdoZW4gaGF2aW5nIEpESyBDb21waWxhbmNlIHNldCB0byAxLjcgIVxuIiAr
CisJCQkgICAiICBwdWJsaWMgc3RhdGljIGZpbmFsIFc8Qz4gZXJyMSgpIHtcbiIgKworCQkJICAg
IiAgICBmaW5hbCBDIGMgPSBuZXcgQygpO1xuIiArCisJCQkgICAiICAgIGZpbmFsIE9iamVjdCBv
ID0gbmV3IE9iamVjdCgpO1xuIiArCisJCQkgICAiICAgIHJldHVybiBpbnNwZWN0KG5ldyBXPD4o
YywgbykpOyAvLyAtIEVSUk9SOiBDYW5ub3QgaW5mZXIgdHlwZSBhcmd1bWVudHMgZm9yIFc8PiBG
LmphdmFcbiIgKworCQkJICAgIiAgfVxuIiArCisJCQkgICAiXG4iICsKKwkJCSAgICIgIHB1Ymxp
YyBzdGF0aWMgZmluYWwgVzxDPiB3cm4xKCkge1xuIiArCisJCQkgICAiICAgIGZpbmFsIEMgYyA9
IG5ldyBDKCk7XG4iICsKKwkJCSAgICIgICAgZmluYWwgT2JqZWN0IG8gPSBuZXcgT2JqZWN0KCk7
XG4iICsKKwkJCSAgICIgICAgLy8gLS0tIGdpdmluZyB0aGUgdHlwZS1wYXJhbWV0ZXIgeWllbGRz
IGEgd2FybmluZ1xuIiArCisJCQkgICAiICAgIC8vIC0tLSBjb21wYXJpbmcgdGhhdCB0byB0aGUg
ZXJyb3Igb2YgbWV0aG9kIGVycjEoKSBpdCBkb2VzIG5vdCBtYWtlIG11Y2ggc2Vuc2VcbiIgKwor
CQkJICAgIiAgICByZXR1cm4gaW5zcGVjdChuZXcgVzxDPihjLCBvKSk7IC8vIC0gV0FSTklORzog
UmVkdW5kYW50IHNwZWNpZmljYXRpb24gb2YgdHlwZSBhcmd1bWVudHMgPEYuQz4gRi5qYXZhXG4i
ICsKKwkJCSAgICIgIH1cbiIgKworCQkJICAgIlxuIiArCisJCQkgICAiICBwdWJsaWMgc3RhdGlj
IGZpbmFsIFc8Qz4gb2sxKCkge1xuIiArCisJCQkgICAiICAgIGZpbmFsIEMgYyA9IG5ldyBDKCk7
XG4iICsKKwkJCSAgICIgICAgLy8gLS0tIG5vIGV4dHJhIHZhcmFyZy1wYXJhbWFldGVyXG4iICsK
KwkJCSAgICIgICAgcmV0dXJuIGluc3BlY3QobmV3IFc8PihjKSk7IC8vIC0gT0tcbiIgKworCQkJ
ICAgIiAgfVxuIiArCisJCQkgICAiXG4iICsKKwkJCSAgICIgIHB1YmxpYyBzdGF0aWMgZmluYWwg
VzxDPiBvazIoKSB7XG4iICsKKwkJCSAgICIgICAgZmluYWwgQyBjID0gbmV3IEMoKTtcbiIgKwor
CQkJICAgIiAgICBmaW5hbCBPYmplY3QgbyA9IG5ldyBPYmplY3QoKTtcbiIgKworCQkJICAgIiAg
ICAvLyAtLS0gbm8gY2hlY2stbWV0aG9kXG4iICsKKwkJCSAgICIgICAgcmV0dXJuIG5ldyBXPD4o
Yywgbyk7IC8vIC0gT0tcbiIgKworCQkJICAgIiAgfVxuIiArCisJCQkgICAiXG4iICsKKwkJCSAg
ICIgIHB1YmxpYyBzdGF0aWMgZmluYWwgVzxDPiBvazMoKSB7XG4iICsKKwkJCSAgICIgICAgZmlu
YWwgQyBjID0gbmV3IEMoKTtcbiIgKworCQkJICAgIiAgICAvLyAtLS0gbm8gY2hlY2stbWV0aG9k
XG4iICsKKwkJCSAgICIgICAgcmV0dXJuIG5ldyBXPD4oYyk7IC8vIC0gT0tcbiIgKworCQkJICAg
IiAgfVxuIiArCisJCQkgICAiXG4iICsKKwkJCSAgICIgIHB1YmxpYyBzdGF0aWMgZmluYWwgVzxD
PiBvazQoKSB7XG4iICsKKwkJCSAgICIgICAgZmluYWwgQyBjID0gbmV3IEMoKTtcbiIgKworCQkJ
ICAgIiAgICBmaW5hbCBPYmplY3QgbyA9IG5ldyBPYmplY3QoKTtcbiIgKworCQkJICAgIiAgICAv
LyAtLS0gdGhpcyBhbHNvIGNvbXBpbGVzIChteSBzb2x1dGlvbiBmb3Igbm93KVxuIiArCisJCQkg
ICAiICAgIGZpbmFsIFc8Qz4gdyA9IG5ldyBXPD4oYywgbyk7XG4iICsKKwkJCSAgICIgICAgcmV0
dXJuIGluc3BlY3Qodyk7XG4iICsKKwkJCSAgICIgIH1cbiIgKworCQkJICAgIn1cbiIsCisJCSAg
IH0sCisJCSAgICItLS0tLS0tLS0tXG4iICsgCisJCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBs
aW5lIDM0KVxuIiArIAorCQkJIglyZXR1cm4gaW5zcGVjdChuZXcgVzxDPihjLCBvKSk7IC8vIC0g
V0FSTklORzogUmVkdW5kYW50IHNwZWNpZmljYXRpb24gb2YgdHlwZSBhcmd1bWVudHMgPEYuQz4g
Ri5qYXZhXG4iICsgCisJCQkiCSAgICAgICAgICAgICAgICAgICBeXG4iICsgCisJCQkiUmVkdW5k
YW50IHNwZWNpZmljYXRpb24gb2YgdHlwZSBhcmd1bWVudHMgPFguQz5cbiIgKyAKKwkJCSItLS0t
LS0tLS0tXG4iLCAKKwkJCW51bGwsIGZhbHNlLCBjdXN0b21PcHRpb25zKTsKK30KIHB1YmxpYyBz
dGF0aWMgQ2xhc3MgdGVzdENsYXNzKCkgewogCXJldHVybiBHZW5lcmljc1JlZ3Jlc3Npb25UZXN0
XzFfNy5jbGFzczsKIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3RyYWludEV4cHJl
c3Npb25Gb3JtdWxhLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRFeHByZXNzaW9uRm9y
bXVsYS5qYXZhCmluZGV4IDI4MjA2MzguLmEzYjU2NDUgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29r
dXAvQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9D
b25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEuamF2YQpAQCAtOTQsNiArOTQsOCBAQAogCQkJCQkJ
CXJldHVybiBUUlVFOwogCQkJCQkJfQogCQkJCQkJaW5mZXJlbmNlQ29udGV4dC5pbmZlcmVuY2VL
aW5kID0gaW5uZXJDdHguaW5mZXJlbmNlS2luZDsKKwkJCQkJfSBlbHNlIHsKKwkJCQkJCWluZmVy
ZW5jZUNvbnRleHQuaW5mZXJlbmNlS2luZCA9IGluZmVyZW5jZUNvbnRleHQuZ2V0SW5mZXJlbmNl
S2luZChwcmV2aW91c01ldGhvZCwgYXJndW1lbnRUeXBlcyk7CiAJCQkJCX0KIAkJCQkJYm9vbGVh
biBpc0RpYW1vbmQgPSBtZXRob2QuaXNDb25zdHJ1Y3RvcigpICYmIHRoaXMubGVmdC5pc1BvbHlF
eHByZXNzaW9uKG1ldGhvZCk7CiAJCQkJCWluZmVySW52b2NhdGlvbkFwcGxpY2FiaWxpdHkoaW5m
ZXJlbmNlQ29udGV4dCwgbWV0aG9kLCBhcmd1bWVudFR5cGVzLCBpc0RpYW1vbmQsIGluZmVyZW5j
ZUNvbnRleHQuaW5mZXJlbmNlS2luZCk7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVy
ZW5jZUNvbnRleHQxOC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9JbmZlcmVuY2VDb250ZXh0MTguamF2
YQppbmRleCA1ODVhOWUzLi44OTJlMzg3IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVy
ZW5jZUNvbnRleHQxOC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvSW5mZXJlbmNlQ29udGV4dDE4
LmphdmEKQEAgLTQ3MCwzMCArNDcwLDI2IEBACiAJCQlpZiAoaW5uZXJNZXRob2QgPT0gbnVsbCkK
IAkJCQlyZXR1cm4gdHJ1ZTsgCQkgIC8vIC0+IHByb2NlZWQgd2l0aCBubyBuZXcgQyBzZXQgZWxl
bWVudHMuCiAJCQkKKwkJCUV4cHJlc3Npb25bXSBhcmd1bWVudHMgPSBpbnZvY2F0aW9uLmFyZ3Vt
ZW50cygpOworCQkJVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzID0gYXJndW1lbnRzID09IG51
bGwgPyBCaW5kaW5nLk5PX1BBUkFNRVRFUlMgOiBuZXcgVHlwZUJpbmRpbmdbYXJndW1lbnRzLmxl
bmd0aF07CisJCQlmb3IgKGludCBpID0gMDsgaSA8IGFyZ3VtZW50VHlwZXMubGVuZ3RoOyBpKysp
CisJCQkJYXJndW1lbnRUeXBlc1tpXSA9IGFyZ3VtZW50c1tpXS5yZXNvbHZlZFR5cGU7CisJCQlp
bnQgYXBwbGljYWJpbGl0eUtpbmQ7CisJCQlJbmZlcmVuY2VDb250ZXh0MTggaW5uZXJDb250ZXh0
ID0gbnVsbDsKKwkJCWlmIChpbm5lck1ldGhvZCBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5l
cmljTWV0aG9kQmluZGluZykKKwkJCQkgaW5uZXJDb250ZXh0ID0gaW52b2NhdGlvbi5nZXRJbmZl
cmVuY2VDb250ZXh0KChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIGlubmVyTWV0
aG9kKTsKKwkJCWFwcGxpY2FiaWxpdHlLaW5kID0gaW5uZXJDb250ZXh0ICE9IG51bGwgPyBpbm5l
ckNvbnRleHQuaW5mZXJlbmNlS2luZCA6IGdldEluZmVyZW5jZUtpbmQoaW5uZXJNZXRob2QsIGFy
Z3VtZW50VHlwZXMpOworCQkJCiAJCQlpZiAoaW50ZXJsZWF2ZWQpIHsKIAkJCQlNZXRob2RCaW5k
aW5nIHNoYWxsb3dNZXRob2QgPSBpbm5lck1ldGhvZC5zaGFsbG93T3JpZ2luYWwoKTsKIAkJCQlT
dXNwZW5kZWRJbmZlcmVuY2VSZWNvcmQgcHJldkludm9jYXRpb24gPSBlbnRlclBvbHlJbnZvY2F0
aW9uKGludm9jYXRpb24sIGludm9jYXRpb24uYXJndW1lbnRzKCkpOwogCQkJCXRyeSB7Ci0JCQkJ
CUV4cHJlc3Npb25bXSBhcmd1bWVudHMgPSBpbnZvY2F0aW9uLmFyZ3VtZW50cygpOwotCQkJCQlU
eXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMgPSBhcmd1bWVudHMgPT0gbnVsbCA/IEJpbmRpbmcu
Tk9fUEFSQU1FVEVSUyA6IG5ldyBUeXBlQmluZGluZ1thcmd1bWVudHMubGVuZ3RoXTsKLQkJCQkJ
Zm9yIChpbnQgaSA9IDA7IGkgPCBhcmd1bWVudFR5cGVzLmxlbmd0aDsgaSsrKQotCQkJCQkJYXJn
dW1lbnRUeXBlc1tpXSA9IGFyZ3VtZW50c1tpXS5yZXNvbHZlZFR5cGU7Ci0JCQkJCWlmIChpbm5l
ck1ldGhvZCBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgewot
CQkJCQkJSW5mZXJlbmNlQ29udGV4dDE4IGlubmVyQ3R4ID0gaW52b2NhdGlvbi5nZXRJbmZlcmVu
Y2VDb250ZXh0KChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIGlubmVyTWV0aG9k
KTsKLQkJCQkJCXRoaXMuaW5mZXJlbmNlS2luZCA9IGlubmVyQ3R4LmluZmVyZW5jZUtpbmQ7Ci0J
CQkJCX0KKwkJCQkJdGhpcy5pbmZlcmVuY2VLaW5kID0gYXBwbGljYWJpbGl0eUtpbmQ7CiAJCQkJ
CWluZmVySW52b2NhdGlvbkFwcGxpY2FiaWxpdHkoc2hhbGxvd01ldGhvZCwgYXJndW1lbnRUeXBl
cywgc2hhbGxvd01ldGhvZC5pc0NvbnN0cnVjdG9yKCkpOwogCQkJCQlpZiAoIUNvbnN0cmFpbnRF
eHByZXNzaW9uRm9ybXVsYS5pbmZlclBvbHlJbnZvY2F0aW9uVHlwZSh0aGlzLCBpbnZvY2F0aW9u
LCBzdWJzdEYsIHNoYWxsb3dNZXRob2QpKQogCQkJCQkJcmV0dXJuIGZhbHNlOwogCQkJCX0gZmlu
YWxseSB7CiAJCQkJCXJlc3VtZVN1c3BlbmRlZEluZmVyZW5jZShwcmV2SW52b2NhdGlvbik7Ci0J
CQkJfQotCQkJfQotCQkJaW50IGFwcGxpY2FiaWxpdHlLaW5kID0gQ0hFQ0tfTE9PU0U7ICAvLyBG
SVhNRSwgZm9yIDw+IHJlc29sdmluZyB0byBhIG5vbi1nZW5lcmljIG1ldGhvZCwgdGhpcyBuZWVk
IHRvIGJlIGNvbXB1dGVkLgotCQkJaWYgKGlubmVyTWV0aG9kIGluc3RhbmNlb2YgUGFyYW1ldGVy
aXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7Ci0JCQkJSW5mZXJlbmNlQ29udGV4dDE4IGlubmVy
Q3R4ID0gaW52b2NhdGlvbi5nZXRJbmZlcmVuY2VDb250ZXh0KChQYXJhbWV0ZXJpemVkTWV0aG9k
QmluZGluZykgaW5uZXJNZXRob2QpOwotCQkJCWlmIChpbm5lckN0eCAhPSBudWxsKSB7Ci0JCQkJ
CWFwcGxpY2FiaWxpdHlLaW5kID0gaW5uZXJDdHguaW5mZXJlbmNlS2luZDsKIAkJCQl9CiAJCQl9
CiAJCQlyZXR1cm4gYWRkQ29uc3RyYWludHNUb0MoaW52b2NhdGlvbi5hcmd1bWVudHMoKSwgYywg
aW5uZXJNZXRob2QuZ2VuZXJpY01ldGhvZCgpLCBhcHBsaWNhYmlsaXR5S2luZCwgaW50ZXJsZWF2
ZWQpOwpAQCAtNTA1LDYgKzUwMSwxOCBAQAogCQlyZXR1cm4gdHJ1ZTsKIAl9CiAKKwkKKwlwcm90
ZWN0ZWQgaW50IGdldEluZmVyZW5jZUtpbmQoTWV0aG9kQmluZGluZyBub25HZW5lcmljTWV0aG9k
LCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMpIHsKKwkJc3dpdGNoICh0aGlzLnNjb3BlLnBh
cmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChub25HZW5lcmljTWV0aG9kLCBhcmd1bWVudFR5cGVz
KSkgeworCQkJY2FzZSBTY29wZS5BVVRPQk9YX0NPTVBBVElCTEU6CisJCQkJcmV0dXJuIENIRUNL
X0xPT1NFOworCQkJY2FzZSBTY29wZS5WQVJBUkdTX0NPTVBBVElCTEU6CisJCQkJcmV0dXJuIENI
RUNLX1ZBUkFSRzsKKwkJCWRlZmF1bHQ6CisJCQkJcmV0dXJuIENIRUNLX1NUUklDVDsKKwkJfQor
CX0KKwogCXB1YmxpYyBib29sZWFuIGhhc1Jlc3VsdEZvcihUeXBlQmluZGluZyB0YXJnZXRUeXBl
KSB7CiAJCWlmICh0YXJnZXRUeXBlID09IG51bGwpCiAJCQlyZXR1cm4gdGhpcy5zdGVwQ29tcGxl
dGVkID49IFRZUEVfSU5GRVJSRUQ7
</data>

          </attachment>
      

    </bug>

</bugzilla>