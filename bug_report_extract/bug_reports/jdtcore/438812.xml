<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>438812</bug_id>
          
          <creation_ts>2014-07-03 06:34:00 -0400</creation_ts>
          <short_desc>Missing bridge methods in indirect child classes with ECJ 3.10.0</short_desc>
          <delta_ts>2015-01-28 01:24:15 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.4.1</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Emmanuel Bourg">ebourg</reporter>
          <assigned_to name="Sasikanth Bharadwaj">saammana</assigned_to>
          <cc>jarthana</cc>
    
    <cc>manpalat</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="63163"
          type_id="1"
          status="+"
          setter="srikanth_sankaran"
    />
    <flag name="review"
          id="63167"
          type_id="1"
          status="?"
          setter="srikanth_sankaran"
          requestee="stephan.herrmann"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2423951</commentid>
    <comment_count>0</comment_count>
    <who name="Emmanuel Bourg">ebourg</who>
    <bug_when>2014-07-03 06:34:45 -0400</bug_when>
    <thetext>ECJ 3.10.0 (JDT 4.4) no longer generates the bridge methods expected when a method defined in an interface is overridden with a different return type in its indirect child classes.

For example, with the following code:

    public interface A {
        Iterable getIterable();
    }
    
    class B implements A {
        public Collection getIterable() { return null; }
    }
    
    class C extends B {
        public List getIterable() { return null; }
    }

According to javap, ECJ 3.9.0 and javac generate these class files:

    public interface A {
      public abstract java.lang.Iterable getIterable();
    }

    class B implements A {
      B();
      public java.util.Collection getIterable();
      public java.lang.Iterable getIterable();
    }

    class C extends B {
      C();
      public java.util.List getIterable();
      public java.lang.Iterable getIterable();
      public java.util.Collection getIterable();
    }

with ECJ 3.10.0 we now get:

    public interface A {
      public abstract java.lang.Iterable getIterable();
    }

    class B implements A {
      B();
      public java.util.Collection getIterable();
      public java.lang.Iterable getIterable();
    }

    class C extends B {
      C();
      public java.util.List getIterable();
      public java.util.Collection getIterable();
    }

The bridge method returning an Iterable is missing from C.class. It&apos;s only present in the .class file of its direct child B.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2424337</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-07-03 21:13:12 -0400</bug_when>
    <thetext>Sasi, please take a look. Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2428609</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-07-17 02:15:23 -0400</bug_when>
    <thetext>I can see two side effects for not generating the bridge in C 

(1) Performance impact. There will be two bridges involved and two virtual calls involved in  

X x = new C(); 
x.getIterable(); 

(2) Reflection based code would yield different results

Emmanuel, for our understanding, what exactly is your concern here ? Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2428622</commentid>
    <comment_count>3</comment_count>
    <who name="Emmanuel Bourg">ebourg</who>
    <bug_when>2014-07-17 02:56:09 -0400</bug_when>
    <thetext>We found this issue after upgrading ECJ in Debian. ECJ is used to compile GCJ, the Java part of GCC, and the new version broke the build:

https://bugs.debian.org/753315

The .class files generated by ECJ are transformed into native code, and the native counterpart of the StringBuffer class is missing the method declarations from the Appendable interface, which later breaks the compilation.

GCJ might look like an anachronism today, it&apos;s stuck with the Java 5 API and doesn&apos;t evolve anymore, but it&apos;s still an important infrastructure element as it is used to bootstrap OpenJDK.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2430676</commentid>
    <comment_count>4</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-07-23 05:39:27 -0400</bug_when>
    <thetext>MethodVerifier15.isInterfaceMethodImplemented() says
// caveat: returns false if a method is implemented that needs a bridge method
and explicitly excludes the bridge is inherited case by
			|| (TypeBinding.notEquals(this.type, existingMethod.declaringClass) 			// ... not if inheriting the bridge situation from a superclass
					&amp;&amp; !existingMethod.declaringClass.isInterface()

This results in the interface method being excluded from inherited methods in computeInheritMethods() thereby resulting in the bridge method not being generated in C
Removing this condition solves the problem but results in tests GenericTypeTest.test0987() &amp; GenericTypeTest.test0988() to fail. 

The condition was added as part of http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=ba04cb6ba4b5497c184d335aa777690304f7e67a for bug 391376
But subsequently, as per bug 404690, this seems to be addressed by alternative means and this particular change does not seem to be required

The reason for the test failure is that the errors expected are not the same as the errors reported. However, the expected errors are not the same as what javac reports either. Trying to find out what prompted this deviation.
With the proposed change, we are more aligned with javac. Srikanth, can you shed some light on what is the right behavior w.r.t these two tests?
Thanks in advance</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2435485</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-08-05 04:14:45 -0400</bug_when>
    <thetext>Moving it to M2, expect to still release in time for 4.4.1</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2437474</commentid>
    <comment_count>6</comment_count>
      <attachid>245871</attachid>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-08-11 05:51:01 -0400</bug_when>
    <thetext>Created attachment 245871
Fix, and tests (new and updated)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2437475</commentid>
    <comment_count>7</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-08-11 05:51:30 -0400</bug_when>
    <thetext>My contribution for this defect fix complies with http://www.eclipse.org/legal/CoO.php</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2437479</commentid>
    <comment_count>8</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-08-11 05:54:26 -0400</bug_when>
    <thetext>Patch with proposed fix and tests attached. Instead of removing the (seemingly unnecessary) check, it has been moved. 
Updated the failing tests to reflect current behavior as well as added the new test. All tests pass. Srikanth, please review.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2437521</commentid>
    <comment_count>9</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-08-11 07:50:24 -0400</bug_when>
    <thetext>Looks good. Thanks Sasi. Released here for master: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=acc8bb9a2c395d7f5684b514d1321ba6377e97fd.

Jay, we need this for 4.4.1 as this is a regression. Do you agree ? 

Stephan, request you to look through the code changes - fairly simple
delta</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2437522</commentid>
    <comment_count>10</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-08-11 07:51:38 -0400</bug_when>
    <thetext>Requesting additional review in preparation for backport.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2437542</commentid>
    <comment_count>11</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-08-11 08:24:14 -0400</bug_when>
    <thetext>+1 for back port</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2437543</commentid>
    <comment_count>12</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-08-11 08:25:18 -0400</bug_when>
    <thetext>For the record the change in diagnostics for the two GTT tests actually
bring us more in line wiht javac. That is good news.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2437803</commentid>
    <comment_count>13</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-08-11 20:45:47 -0400</bug_when>
    <thetext>Jay, your muscle memory is impaired :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2437816</commentid>
    <comment_count>14</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-08-12 01:30:42 -0400</bug_when>
    <thetext>Thanks Jay - released here for 4.4.1: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=R4_4_maintenance&amp;id=303c4341e5fa502701d7e0cd259bde5e73069cd3</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2444639</commentid>
    <comment_count>15</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2014-08-28 01:45:57 -0400</bug_when>
    <thetext>Verified for Eclipse Luna SR1 4.4.1 Build id: M20140827-0800</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2511118</commentid>
    <comment_count>16</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-01-28 01:24:15 -0500</bug_when>
    <thetext>Verified for 4.5 M5 with build I20150127-0900</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>245871</attachid>
            <date>2014-08-11 05:51:00 -0400</date>
            <delta_ts>2014-08-11 05:51:01 -0400</delta_ts>
            <desc>Fix, and tests (new and updated)</desc>
            <filename>Fix-and-Tests-for-bug438812.patch</filename>
            <type>text/plain</type>
            <size>6499</size>
            <attacher name="Sasikanth Bharadwaj">saammana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNUeXBlVGVz
dC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xp
cHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0Lmph
dmEKaW5kZXggYjdmYTg0Mi4uYmMxN2NhYSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0LmphdmEKQEAgLTMyODE1LDE5ICszMjgxNSwyOSBA
QAogLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTE0MDY0
MwogcHVibGljIHZvaWQgdGVzdDA5ODcoKSB7CiAJU3RyaW5nIGV4cGVjdGVkT3V0cHV0ID0gbmV3
IENvbXBpbGVyT3B0aW9ucyhnZXRDb21waWxlck9wdGlvbnMoKSkuc291cmNlTGV2ZWwgPCBDbGFz
c0ZpbGVDb25zdGFudHMuSkRLMV82Ci0gICAgPwkiLS0tLS0tLS0tLVxuIiArIAotCQkiMS4gRVJS
T1IgaW4gWC5qYXZhIChhdCBsaW5lIDExKVxuIiArIAorICAgID8JIi0tLS0tLS0tLS1cbiIgKwor
CQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDcpXG4iICsgCisJCSIJYWJzdHJhY3QgY2xh
c3MgR0xpbmtFbGVtZW50VmlldzxNLENNPiBleHRlbmRzIEFic3RyYWN0TGlua1ZpZXc8TT4ge31c
biIgKyAKKwkJIgkgICAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCSJUaGUg
cmV0dXJuIHR5cGVzIGFyZSBpbmNvbXBhdGlibGUgZm9yIHRoZSBpbmhlcml0ZWQgbWV0aG9kcyBF
ZGl0UGFydC5nZXRWaWV3ZXIoKSwgQWJzdHJhY3RMaW5rVmlldzxNPi5nZXRWaWV3ZXIoKVxuIiAr
IAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDEx
KVxuIiArIAogCQkiCXB1YmxpYyBJU2hlZXRWaWV3ZXIgZ2V0Vmlld2VyKCkgeyByZXR1cm4gbnVs
bDsgfQlcbiIgKyAKIAkJIgkgICAgICAgXl5eXl5eXl5eXl5eXG4iICsgCiAJCSJUaGUgcmV0dXJu
IHR5cGUgaXMgaW5jb21wYXRpYmxlIHdpdGggRWRpdFBhcnQuZ2V0Vmlld2VyKClcbiIgKyAKIAkJ
Ii0tLS0tLS0tLS1cbiIgKyAKLQkJIjIuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMSlcbiIg
KyAKKwkJIjMuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMSlcbiIgKyAKIAkJIglwdWJsaWMg
SVNoZWV0Vmlld2VyIGdldFZpZXdlcigpIHsgcmV0dXJuIG51bGw7IH0JXG4iICsgCiAJCSIJICAg
ICAgICAgICAgICAgICAgICBeXl5eXl5eXl5eXlxuIiArIAogCQkiVGhlIG1ldGhvZCBnZXRWaWV3
ZXIoKSBvZiB0eXBlIEFic3RyYWN0TGlua1ZpZXc8TT4gbXVzdCBvdmVycmlkZSBhIHN1cGVyY2xh
c3MgbWV0aG9kXG4iICsgCiAJCSItLS0tLS0tLS0tXG4iCi0gICAgOgkJIi0tLS0tLS0tLS1cbiIg
KyAKLQkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMSlcbiIgKyAKKyAgICA6CSItLS0t
LS0tLS0tXG4iICsgCisJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNylcbiIgKyAKKwkJ
IglhYnN0cmFjdCBjbGFzcyBHTGlua0VsZW1lbnRWaWV3PE0sQ00+IGV4dGVuZHMgQWJzdHJhY3RM
aW5rVmlldzxNPiB7fVxuIiArIAorCQkiCSAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5c
biIgKyAKKwkJIlRoZSByZXR1cm4gdHlwZXMgYXJlIGluY29tcGF0aWJsZSBmb3IgdGhlIGluaGVy
aXRlZCBtZXRob2RzIEVkaXRQYXJ0LmdldFZpZXdlcigpLCBBYnN0cmFjdExpbmtWaWV3PE0+Lmdl
dFZpZXdlcigpXG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIyLiBFUlJPUiBpbiBYLmph
dmEgKGF0IGxpbmUgMTEpXG4iICsgCiAJCSIJcHVibGljIElTaGVldFZpZXdlciBnZXRWaWV3ZXIo
KSB7IHJldHVybiBudWxsOyB9CVxuIiArIAogCQkiCSAgICAgICBeXl5eXl5eXl5eXl5cbiIgKyAK
IAkJIlRoZSByZXR1cm4gdHlwZSBpcyBpbmNvbXBhdGlibGUgd2l0aCBFZGl0UGFydC5nZXRWaWV3
ZXIoKVxuIiArIApAQCAtMzI5MTYsNyArMzI5MjYsMTIgQEAKIAkJCQkifSIsIC8vID09PT09PT09
PT09PT09PT09CiAJCQl9LAogCQkJIi0tLS0tLS0tLS1cbiIgKwotCQkJIjEuIEVSUk9SIGluIFgu
amF2YSAoYXQgbGluZSAxMSlcbiIgKyAKKwkJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUg
NylcbiIgKyAKKwkJCSIJYWJzdHJhY3QgY2xhc3MgR0xpbmtFbGVtZW50VmlldzxNLENNPiBleHRl
bmRzIEFic3RyYWN0TGlua1ZpZXc8TT4ge31cbiIgKyAKKwkJCSIJICAgICAgICAgICAgICAgXl5e
Xl5eXl5eXl5eXl5eXlxuIiArIAorCQkJIlRoZSByZXR1cm4gdHlwZXMgYXJlIGluY29tcGF0aWJs
ZSBmb3IgdGhlIGluaGVyaXRlZCBtZXRob2RzIElMaW5rVmlld0VsZW1lbnQuZ2V0Vmlld2VyKCks
IEVkaXRQYXJ0LmdldFZpZXdlcigpLCBBYnN0cmFjdExpbmtWaWV3PE0+LmdldFZpZXdlcigpXG4i
ICsgCisJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJIjIuIEVSUk9SIGluIFguamF2YSAoYXQgbGlu
ZSAxMSlcbiIgKyAKIAkJCSIJcHVibGljIFNoZWV0Vmlld2VyIGdldFZpZXdlcigpIHsgcmV0dXJu
IG51bGw7IH0JXG4iICsgCiAJCQkiCSAgICAgICBeXl5eXl5eXl5eXlxuIiArIAogCQkJIlRoZSBy
ZXR1cm4gdHlwZSBpcyBpbmNvbXBhdGlibGUgd2l0aCBBYnN0cmFjdEVkaXRQYXJ0LmdldFZpZXdl
cigpXG4iICsgCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxl
ci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9NZXRo
b2RWZXJpZnlUZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9NZXRob2RW
ZXJpZnlUZXN0LmphdmEKaW5kZXggZmNkYmQ4Yi4uYWU4MzU3YiAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rl
c3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTWV0aG9kVmVyaWZ5VGVzdC5qYXZhCisrKyBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90
ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL01ldGhvZFZlcmlmeVRlc3QuamF2YQpAQCAtMTQwNzks
NCArMTQwNzksMzkgQEAKIAkJfSwKIAkJIkNDQyIpOwogfQorLy8gaHR0cHM6Ly9idWdzLmVjbGlw
c2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQzODgxMiwgTWlzc2luZyBicmlkZ2UgbWV0aG9k
cyBpbiBpbmRpcmVjdCBjaGlsZCBjbGFzc2VzIHdpdGggRUNKIDMuMTAuMAorcHVibGljIHZvaWQg
dGVzdEJ1ZzQzODgxMigpIHRocm93cyBFeGNlcHRpb24geworCXRoaXMucnVuQ29uZm9ybVRlc3Qo
CisJCW5ldyBTdHJpbmdbXSB7CisJCQkiQS5qYXZhIiwKKwkJCSJpbXBvcnQgamF2YS51dGlsLkNv
bGxlY3Rpb247XG4iICsgCisJCQkiaW1wb3J0IGphdmEudXRpbC5MaXN0O1xuIiArIAorCQkJIlxu
IiArIAorCQkJInB1YmxpYyBpbnRlcmZhY2UgQSB7XG4iICsgCisJCQkiICAgIEl0ZXJhYmxlIGdl
dEl0ZXJhYmxlKCk7XG4iICsgCisJCQkifVxuIiArIAorCQkJIlxuIiArIAorCQkJImNsYXNzIEIg
aW1wbGVtZW50cyBBIHtcbiIgKyAKKwkJCSIgICAgcHVibGljIENvbGxlY3Rpb24gZ2V0SXRlcmFi
bGUoKSB7IHJldHVybiBudWxsOyB9XG4iICsgCisJCQkifVxuIiArIAorCQkJIlxuIiArIAorCQkJ
ImNsYXNzIEMgZXh0ZW5kcyBCIHtcbiIgKyAKKwkJCSIgICAgcHVibGljIExpc3QgZ2V0SXRlcmFi
bGUoKSB7IHJldHVybiBudWxsOyB9XG4iICsgCisJCQkifSIsCisJCX0sCisJCSIiKTsKKwlTdHJp
bmcgZXhwZWN0ZWRPdXRwdXQgPSAiICBwdWJsaWMgYnJpZGdlIHN5bnRoZXRpYyBqYXZhLmxhbmcu
SXRlcmFibGUgZ2V0SXRlcmFibGUoKTsiOworCisJRmlsZSBmID0gbmV3IEZpbGUoT1VUUFVUX0RJ
UiArIEZpbGUuc2VwYXJhdG9yICsgIkMuY2xhc3MiKTsKKwlieXRlW10gY2xhc3NGaWxlQnl0ZXMg
PSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIudXRpbC5VdGlsLmdldEZpbGVCeXRl
Q29udGVudChmKTsKKwlDbGFzc0ZpbGVCeXRlc0Rpc2Fzc2VtYmxlciBkaXNhc3NlbWJsZXIgPSBU
b29sRmFjdG9yeS5jcmVhdGVEZWZhdWx0Q2xhc3NGaWxlQnl0ZXNEaXNhc3NlbWJsZXIoKTsKKwlT
dHJpbmcgcmVzdWx0ID0gZGlzYXNzZW1ibGVyLmRpc2Fzc2VtYmxlKGNsYXNzRmlsZUJ5dGVzLCAi
XG4iLCBDbGFzc0ZpbGVCeXRlc0Rpc2Fzc2VtYmxlci5ERVRBSUxFRCk7CisJaW50IGluZGV4ID0g
cmVzdWx0LmluZGV4T2YoZXhwZWN0ZWRPdXRwdXQpOworCWlmIChpbmRleCA9PSAtMSB8fCBleHBl
Y3RlZE91dHB1dC5sZW5ndGgoKSA9PSAwKSB7CisJCVN5c3RlbS5vdXQucHJpbnRsbihVdGlsLmRp
c3BsYXlTdHJpbmcocmVzdWx0LCAzKSk7CisJfQorCWlmIChpbmRleCA9PSAtMSkgeworCQlhc3Nl
cnRFcXVhbHMoIldyb25nIGNvbnRlbnRzIiwgZXhwZWN0ZWRPdXRwdXQsIHJlc3VsdCk7CisJfQor
fQogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9NZXRob2RWZXJpZmllcjE1LmphdmEgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvbG9va3VwL01ldGhvZFZlcmlmaWVyMTUuamF2YQppbmRleCA0ZjE5NmJjLi5hYTdjMWUz
IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL01ldGhvZFZlcmlmaWVyMTUuamF2YQorKysgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvbG9va3VwL01ldGhvZFZlcmlmaWVyMTUuamF2YQpAQCAtOTUzLDExICs5NTMsMTUgQEAK
IAkJcmV0dXJuIGZhbHNlOyAvLyBtdXN0IGhvbGQgb250byBQYXJhbWV0ZXJpemVkTWV0aG9kIHRv
IHNlZSBpZiBhIGJyaWRnZSBtZXRob2QgaXMgbmVjZXNzYXJ5CiAKIAlpbmhlcml0ZWRNZXRob2Qg
PSBjb21wdXRlU3Vic3RpdHV0ZU1ldGhvZChpbmhlcml0ZWRNZXRob2QsIGV4aXN0aW5nTWV0aG9k
KTsKLQlyZXR1cm4gaW5oZXJpdGVkTWV0aG9kICE9IG51bGwKLQkJJiYgKFR5cGVCaW5kaW5nLmVx
dWFsc0VxdWFscyhpbmhlcml0ZWRNZXRob2QucmV0dXJuVHlwZSwgZXhpc3RpbmdNZXRob2QucmV0
dXJuVHlwZSkJLy8gbmVlZCB0byBrZWVwIGFyb3VuZCB0byBwcm9kdWNlIGJyaWRnZSBtZXRob2Rz
PyAuLi4KLQkJCXx8IChUeXBlQmluZGluZy5ub3RFcXVhbHModGhpcy50eXBlLCBleGlzdGluZ01l
dGhvZC5kZWNsYXJpbmdDbGFzcykgCQkJLy8gLi4uIG5vdCBpZiBpbmhlcml0aW5nIHRoZSBicmlk
Z2Ugc2l0dWF0aW9uIGZyb20gYSBzdXBlcmNsYXNzCi0JCQkJCSYmICFleGlzdGluZ01ldGhvZC5k
ZWNsYXJpbmdDbGFzcy5pc0ludGVyZmFjZSgpKSkKLQkJJiYgZG9lc01ldGhvZE92ZXJyaWRlKGV4
aXN0aW5nTWV0aG9kLCBpbmhlcml0ZWRNZXRob2QpOworCWlmIChpbmhlcml0ZWRNZXRob2QgPT0g
bnVsbAorCQkJfHwgVHlwZUJpbmRpbmcubm90RXF1YWxzKGluaGVyaXRlZE1ldGhvZC5yZXR1cm5U
eXBlLCBleGlzdGluZ01ldGhvZC5yZXR1cm5UeXBlKSkgLy8gbmVlZCB0byBrZWVwIGFyb3VuZCB0
byBwcm9kdWNlIGJyaWRnZSBtZXRob2RzPyAuLi4KKwkJcmV0dXJuIGZhbHNlOworCisJaWYgKCFk
b2VzTWV0aG9kT3ZlcnJpZGUoZXhpc3RpbmdNZXRob2QsIGluaGVyaXRlZE1ldGhvZCkpCisJCXJl
dHVybiBmYWxzZTsKKworCXJldHVybiBUeXBlQmluZGluZy5ub3RFcXVhbHModGhpcy50eXBlLCBl
eGlzdGluZ01ldGhvZC5kZWNsYXJpbmdDbGFzcykgLy8gLi4uIG5vdCBpZiBpbmhlcml0aW5nIHRo
ZSBicmlkZ2Ugc2l0dWF0aW9uIGZyb20gYSBzdXBlcmNsYXNzCisJCQkmJiAhZXhpc3RpbmdNZXRo
b2QuZGVjbGFyaW5nQ2xhc3MuaXNJbnRlcmZhY2UoKTsKIH0KIHB1YmxpYyBib29sZWFuIGlzTWV0
aG9kU3Vic2lnbmF0dXJlKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBNZXRob2RCaW5kaW5nIGluaGVy
aXRlZE1ldGhvZCkgewogCWlmICghb3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuQ2hhck9w
ZXJhdGlvbi5lcXVhbHMobWV0aG9kLnNlbGVjdG9yLCBpbmhlcml0ZWRNZXRob2Quc2VsZWN0b3Ip
KQ==
</data>

          </attachment>
      

    </bug>

</bugzilla>