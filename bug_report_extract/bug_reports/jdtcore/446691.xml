<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>446691</bug_id>
          
          <creation_ts>2014-10-10 13:26:00 -0400</creation_ts>
          <short_desc>[1.8][compiler] NullPointerException in SingleNameReference.analyseCode</short_desc>
          <delta_ts>2015-03-18 09:54:21 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.5</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          <see_also>https://git.eclipse.org/r/43981</see_also>
    
    <see_also>https://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=43fe9833d3888d631be4e6223fc8e7423f9681c2</see_also>
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.5 M6</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Chris Hubick">chris</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>fabiano</cc>
    
    <cc>frank</cc>
    
    <cc>james</cc>
    
    <cc>jarthana</cc>
    
    <cc>jspitman</cc>
    
    <cc>manpalat</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
    
    <cc>trapper</cc>
          
          <votes>2</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2463052</commentid>
    <comment_count>0</comment_count>
    <who name="Chris Hubick">chris</who>
    <bug_when>2014-10-10 13:26:59 -0400</bug_when>
    <thetext>&gt; java.lang.NullPointerException
&gt; 	at org.eclipse.jdt.internal.compiler.ast.SingleNameReference.analyseCode(SingleNameReference.java:186)
&gt; 	at org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode(MessageSend.java:123)
&gt; 	at org.eclipse.jdt.internal.compiler.ast.BinaryExpression.analyseCode(BinaryExpression.java:66)
&gt; 	at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.analyseCode(AllocationExpression.java:117)
&gt; 	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.analyseCode(LambdaExpression.java:487)
&gt; 	at org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode(MessageSend.java:173)
&gt; 	at org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.analyseCode(LocalDeclaration.java:88)
&gt; 	at org.eclipse.jdt.internal.compiler.ast.Block.analyseCode(Block.java:48)
&gt; 	at org.eclipse.jdt.internal.compiler.ast.IfStatement.analyseCode(IfStatement.java:133)
&gt; 	at org.eclipse.jdt.internal.compiler.ast.Block.analyseCode(Block.java:48)
&gt; 	at org.eclipse.jdt.internal.compiler.ast.TryStatement.analyseCode(TryStatement.java:165)
&gt; 	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.analyseCode(ConstructorDeclaration.java:176)
&gt; 	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.internalAnalyseCode(TypeDeclaration.java:733)
&gt; 	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode(TypeDeclaration.java:261)
&gt; 	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.analyseCode(CompilationUnitDeclaration.java:118)
&gt; 	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:1207)
&gt; 	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:689)
&gt; 	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1183)
&gt; 	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:809)
&gt; 	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
&gt; 	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
&gt; 	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
&gt; 	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
&gt; 	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
&gt; 	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
&gt; 	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
&gt; 	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
&gt; 	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:273)
&gt; 	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:83)
&gt; 	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
&gt; 	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:367)
&gt; 	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:349)
&gt; 	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:372)
&gt; 	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:332)
&gt; 	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)

eclipse.buildId=4.5.0.I20140918-0330
java.version=1.8.0_11
java.vendor=Oracle Corporation
BootLoader constants: OS=linux, ARCH=x86_64, WS=gtk, NL=en_US
Framework arguments:  -product org.eclipse.epp.package.jee.product
Command-line arguments:  -os linux -ws gtk -arch x86_64 -product org.eclipse.epp.package.jee.product

I didn&apos;t see this under 4.4.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2463338</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-11 20:17:13 -0400</bug_when>
    <thetext>Are you able to provide a test case ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2463343</commentid>
    <comment_count>2</comment_count>
    <who name="Chris Hubick">chris</who>
    <bug_when>2014-10-11 20:39:43 -0400</bug_when>
    <thetext>I don&apos;t have time right now to attempt reducing this to a test case, sorry :(</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2480282</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-10 20:23:48 -0500</bug_when>
    <thetext>(In reply to Chris Hubick from comment #2)
&gt; I don&apos;t have time right now to attempt reducing this to a test case, sorry :(

Does this still show up with Mars M3 ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2480862</commentid>
    <comment_count>4</comment_count>
    <who name="Chris Hubick">chris</who>
    <bug_when>2014-11-11 14:10:39 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #3)
&gt; Does this still show up with Mars M3 ?

At this moment my build is bombing out on Bug 443870 somewhere first, so I don&apos;t know how to tell if this would still be an issue if that weren&apos;t the case (plus, I&apos;ve also been seeing Bug 435413).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2498288</commentid>
    <comment_count>5</comment_count>
    <who name="Chris Hubick">chris</who>
    <bug_when>2014-12-17 16:26:51 -0500</bug_when>
    <thetext>
Are you able to reproduce with this?

&gt; import java.util.*;
&gt; 
&gt; public class Test {
&gt;   protected final Integer myInt;
&gt; 
&gt;   public Test() {
&gt;     myInt = Integer.valueOf(0);
&gt;     try {
&gt;       Optional.empty().orElseThrow(() -&gt; new IllegalArgumentException(myInt.toString()));
&gt;     } catch (IllegalArgumentException e) {
&gt;       throw new RuntimeException();
&gt;     }
&gt;     return;
&gt;   }
&gt; 
&gt; }</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2498340</commentid>
    <comment_count>6</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-12-17 21:52:39 -0500</bug_when>
    <thetext>(In reply to Chris Hubick from comment #5)
&gt; Are you able to reproduce with this?

I see the problem on master. Shankha, will investigate this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2505659</commentid>
    <comment_count>7</comment_count>
    <who name="Chris Hubick">chris</who>
    <bug_when>2015-01-14 11:16:56 -0500</bug_when>
    <thetext>Still present in I20150113-0800.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2525024</commentid>
    <comment_count>8</comment_count>
    <who name="James Baldassari">james</who>
    <bug_when>2015-02-27 13:32:20 -0500</bug_when>
    <thetext>Here&apos;s another simple example and also a couple of workarounds for anyone affected by this bug.

This is similar to Chris Hubick&apos;s example, but the following is one of the simplest examples I could find that triggers the Eclipse compiler NPE:

public class Boom {
  private final String field;
  public Boom(String arg) {
    this.field = arg;
    try {
      java.util.function.Supplier&lt;String&gt; supplier = () -&gt; field;
    } catch (Exception e) {
      
    }
  }
}

The three things that are key to triggering the NPE are that the lambda is accessing the member variable &apos;field&apos;, &apos;field&apos; is marked final, and also that the lambda is in a try block.

The first workaround is to move the lamba outside of the try block.  So, for example, the following does not crash:

public class Boom {
  private final String field;
  public Boom(String arg) {
    this.field = arg;
    java.util.function.Supplier&lt;String&gt; supplier = () -&gt; field;
    try {
      supplier.get();
    } catch (Exception e) {
      
    }
  }
}

The second workaround is to simply use the local variable &apos;arg&apos; instead of the member variable &apos;field&apos;.  This also works:

public class Boom {
  private final String field;
  public Boom(String arg) {
    this.field = arg;
    try {
      java.util.function.Supplier&lt;String&gt; supplier = () -&gt; arg;
    } catch (Exception e) {
      
    }
  }
}

The third workaround is to remove the final keyword from the member variable:

public class Boom {
  private String field;
  public Boom(String arg) {
    this.field = arg;
    try {
      java.util.function.Supplier&lt;String&gt; supplier = () -&gt; field;
    } catch (Exception e) {
      
    }
  }
}

Anyway, hope that helps someone, and I&apos;m looking forward to this bug getting fixed :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2525035</commentid>
    <comment_count>9</comment_count>
    <who name="James Baldassari">james</who>
    <bug_when>2015-02-27 14:15:39 -0500</bug_when>
    <thetext>Forgot to mention that I tested the above on: Luna Service Release 2 RC3 (4.4.2)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2526101</commentid>
    <comment_count>10</comment_count>
    <who name="martin trzicky">trapper</who>
    <bug_when>2015-03-03 08:39:09 -0500</bug_when>
    <thetext>I can confirm this bug in just released Eclipse 4.4.2 (Luna SR2) and for me it is a blocker. It works in 4.4.1 (Luna SR1a).

Environment:
eclipse.buildId=4.4.2.M20150204-1700
java.version=1.8.0_31
java.vendor=Oracle Corporation</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2526122</commentid>
    <comment_count>11</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-03-03 09:11:05 -0500</bug_when>
    <thetext>(In reply to martin trzicky from comment #10)
&gt; I can confirm this bug in just released Eclipse 4.4.2 (Luna SR2) and for me
&gt; it is a blocker. It works in 4.4.1 (Luna SR1a).

Did you try the workaround suggested by James in comment #8?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2526190</commentid>
    <comment_count>12</comment_count>
    <who name="martin trzicky">trapper</who>
    <bug_when>2015-03-03 10:52:26 -0500</bug_when>
    <thetext>(In reply to Jay Arthanareeswaran from comment #11)
&gt; (In reply to martin trzicky from comment #10)
&gt; &gt; I can confirm this bug in just released Eclipse 4.4.2 (Luna SR2) and for me
&gt; &gt; it is a blocker. It works in 4.4.1 (Luna SR1a).
&gt; 
&gt; Did you try the workaround suggested by James in comment #8?

Yes, those sample workarounds work, but it is not easily applicable on our large project with developers using different IDEs. 

BTW, here is mine stack, if it helps:
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.SingleNameReference.analyseCode(SingleNameReference.java:186)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode(MessageSend.java:125)
	at org.eclipse.jdt.internal.compiler.ast.Expression.analyseCode(Expression.java:245)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode(MessageSend.java:125)
	at org.eclipse.jdt.internal.compiler.ast.Block.analyseCode(Block.java:43)
	at org.eclipse.jdt.internal.compiler.ast.IfStatement.analyseCode(IfStatement.java:105)
	at org.eclipse.jdt.internal.compiler.ast.Block.analyseCode(Block.java:43)
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.analyseCode(LambdaExpression.java:508)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode(MessageSend.java:175)
	at org.eclipse.jdt.internal.compiler.ast.Block.analyseCode(Block.java:43)
	at org.eclipse.jdt.internal.compiler.ast.IfStatement.analyseCode(IfStatement.java:105)
	at org.eclipse.jdt.internal.compiler.ast.Block.analyseCode(Block.java:43)
	at org.eclipse.jdt.internal.compiler.ast.WhileStatement.analyseCode(WhileStatement.java:120)
	at org.eclipse.jdt.internal.compiler.ast.Block.analyseCode(Block.java:43)
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.analyseCode(LambdaExpression.java:508)
	at org.eclipse.jdt.internal.compiler.ast.CastExpression.analyseCode(CastExpression.java:71)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode(MessageSend.java:175)
	at org.eclipse.jdt.internal.compiler.ast.ConstructorDeclaration.analyseCode(ConstructorDeclaration.java:176)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.internalAnalyseCode(TypeDeclaration.java:733)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode(TypeDeclaration.java:261)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.analyseCode(CompilationUnitDeclaration.java:118)
	at org.eclipse.jdt.internal.compiler.Compiler.process(Compiler.java:776)
	at org.eclipse.jdt.internal.compiler.ProcessTaskManager.run(ProcessTaskManager.java:137)
	at java.lang.Thread.run(Thread.java:745)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2531399</commentid>
    <comment_count>13</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-03-14 13:51:45 -0400</bug_when>
    <thetext>Shankha, do we know what&apos;s causing the exception?
Is it indeed triggered by null analysis as the bug title suggests?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2532010</commentid>
    <comment_count>14</comment_count>
    <who name="Frank Ulbricht">frank</who>
    <bug_when>2015-03-16 09:50:55 -0400</bug_when>
    <thetext>I encountered the same or similar problem with the 4.4.2 release. The following code causes a NPE:

package test;

import java.util.logging.Logger;

public class Main {

	private static final Logger LOG = Logger.getLogger(&quot;test&quot;);
	private final static String value;

	static {
		try {
			LOG.info(() -&gt; String.format(&quot;Value is: %s&quot;, value));
		} catch (final Exception ex) {
			throw new ExceptionInInitializerError(ex);
		}
	}
}

If you assign an initial value to &quot;value&quot; everything works fine.

The stacktrace is:

!ENTRY org.eclipse.jdt.ui 4 0 2015-03-16 14:48:05.859
!MESSAGE Error in JDT Core during AST creation
!STACK 0
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.SingleNameReference.analyseCode(SingleNameReference.java:186)
	at org.eclipse.jdt.internal.compiler.ast.SingleNameReference.analyseCode(SingleNameReference.java:173)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode(MessageSend.java:175)
	at org.eclipse.jdt.internal.compiler.ast.LambdaExpression.analyseCode(LambdaExpression.java:508)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode(MessageSend.java:175)
	at org.eclipse.jdt.internal.compiler.ast.Block.analyseCode(Block.java:43)
	at org.eclipse.jdt.internal.compiler.ast.TryStatement.analyseCode(TryStatement.java:165)
	at org.eclipse.jdt.internal.compiler.ast.Block.analyseCode(Block.java:43)
	at org.eclipse.jdt.internal.compiler.ast.Initializer.analyseCode(Initializer.java:41)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.internalAnalyseCode(TypeDeclaration.java:683)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode(TypeDeclaration.java:261)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.analyseCode(CompilationUnitDeclaration.java:118)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:1207)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:689)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1183)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:809)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2532450</commentid>
    <comment_count>15</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-03-16 20:48:35 -0400</bug_when>
    <thetext>I have a simple fix, let&apos;s see what Hudson thinks of it.
Explanation will follow.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2532451</commentid>
    <comment_count>16</comment_count>
    <who name="Eclipse Genie">genie</who>
    <bug_when>2015-03-16 20:49:28 -0400</bug_when>
    <thetext>New Gerrit change created: https://git.eclipse.org/r/43981</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2532573</commentid>
    <comment_count>17</comment_count>
    <who name="Eclipse Genie">genie</who>
    <bug_when>2015-03-17 04:46:02 -0400</bug_when>
    <thetext>Gerrit change https://git.eclipse.org/r/43981 was merged to [master].
Commit: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=43fe9833d3888d631be4e6223fc8e7423f9681c2</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2532744</commentid>
    <comment_count>18</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-03-17 07:23:12 -0400</bug_when>
    <thetext>Investigation results for posterity:

In bug 360328 I implemented that methods are analysed with a flow context that potentially has a parent flow context. This change alone had created regressions which were fixed by changing many loops over flowContext.parent to stop when hitting the boundary of a method or type (using FlowContext.getLocalParent()).

This latter change had been applied to a dozen or so locations, in the understanding that we only avoid to follow a link which prior to that bug was absent anyway. This was wrong for one location: FlowContext.getInitsForFinalBlankInitializationCheck() which *always* needs to navigate to the declaring class for a given field access.

The effect was: we stopped the parent traversal too early, returned null and that null caused NPE. null is in fact unacceptable here. Reverting to fuller traversal ensures we find the necessary inits.


While playing with the examples in this bug I was puzzled about one difference between lambda and anonymous local class: bug 462344. Did we discuss that difference in any previous bug?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2533078</commentid>
    <comment_count>19</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-03-17 12:39:47 -0400</bug_when>
    <thetext>*** Bug 462391 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2533635</commentid>
    <comment_count>20</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2015-03-18 09:54:21 -0400</bug_when>
    <thetext>Verified for Eclipse Mars 4.5 M6 Build id: I20150317-2000</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>