<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>391707</bug_id>
          
          <creation_ts>2012-10-11 14:53:00 -0400</creation_ts>
          <short_desc>Javadoc summary of IJavaProject#findType(String) should mention that it does not find secondary types in compilation unit</short_desc>
          <delta_ts>2012-10-30 11:45:27 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.2.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>trivial</bug_severity>
          <target_milestone>4.3 M3</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Felix L J Mayer">felix.mayer</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>pbenedict</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2170711</commentid>
    <comment_count>0</comment_count>
    <who name="Felix L J Mayer">felix.mayer</who>
    <bug_when>2012-10-11 14:53:09 -0400</bug_when>
    <thetext>It seems that the JDT no longer finds secondary types in an compilation unit. I am pretty sure this used to work, but in 3.7 and 4.2.1 it doesn&apos;t.

My Eclipse plug-in uses the qualified name returned by org.eclipse.jdt.core.IType#getFullyQualifiedName() to find the same type again later with org.eclipse.jdt.core.IJavaProject#findType(String). This works for the primary type in a compilation unit, but not any secondary top-level types.

Is my description clear enough? Do you need additional materials?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2170871</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-10-11 23:33:12 -0400</bug_when>
    <thetext>Jay, please take a look. If a regression, we must fix asap and backport to
3.8.2</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2170911</commentid>
    <comment_count>2</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-10-12 02:41:45 -0400</bug_when>
    <thetext>To get the secondary types, you have to use the following API:

org.eclipse.jdt.core.IJavaProject.findType(String, WorkingCopyOwner, IProgressMonitor)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2171068</commentid>
    <comment_count>3</comment_count>
    <who name="Felix L J Mayer">felix.mayer</who>
    <bug_when>2012-10-12 09:17:11 -0400</bug_when>
    <thetext>Okay, I was using the wrong API (or maybe it was redefined).

But why does the default API not find secondary types? It&apos;s not like you can identify them from their qualified name. Are there performance reasons?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2171559</commentid>
    <comment_count>4</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-10-14 22:29:18 -0400</bug_when>
    <thetext>(In reply to comment #3)
&gt; Okay, I was using the wrong API (or maybe it was redefined).
&gt; 
&gt; But why does the default API not find secondary types? It&apos;s not like you can
&gt; identify them from their qualified name. Are there performance reasons?

The new API was introduced as part of fix to bug 118789 and as discussed on that bug, performance appears to have been a big motivation for the new API. Also look at bug 36032, which says findType doesn&apos;t find the secondary types.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2171781</commentid>
    <comment_count>5</comment_count>
    <who name="Paul Benedict">pbenedict</who>
    <bug_when>2012-10-15 10:04:35 -0400</bug_when>
    <thetext>JavaDoc uses the first sentence as the method summary. All the new APIs say in their summary that secondary types will be looked at; the original #findType(String) does not. If you read the whole description of the original, you will see it excludes secondary types.

However, I would fault the JavaDoc for stuffing that fact deep into the method description. I think the first sentence should be explicit with this fact: &quot;Returns the first type (excluding secondary types) found following this project&apos;s classpath with the given fully qualified name or null if none is found.&quot;

Just a trivial update but I think it would help at first glance.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2172180</commentid>
    <comment_count>6</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-10-16 02:19:42 -0400</bug_when>
    <thetext>(In reply to comment #5)
&gt; Just a trivial update but I think it would help at first glance.

I guess it can be argued both ways.
Dani, what to you think?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2172313</commentid>
    <comment_count>7</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2012-10-16 06:37:19 -0400</bug_when>
    <thetext>(In reply to comment #6)
&gt; (In reply to comment #5)
&gt; &gt; Just a trivial update but I think it would help at first glance.
&gt; 
&gt; I guess it can be argued both ways.
&gt; Dani, what to you think?

It doesn&apos;t hurt to clarify this in the first sentence.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2172327</commentid>
    <comment_count>8</comment_count>
      <attachid>222390</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-10-16 07:33:59 -0400</bug_when>
    <thetext>Created attachment 222390
Javadoc updates

The patch updates the javadoc for all the four findType methods to mention &quot;(excluding secondary types)&quot; in the first paragraph. I have also made some tiny grammar corrections in those and the other findType methods.

I will release the fix shortly.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2172358</commentid>
    <comment_count>9</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-10-16 08:38:22 -0400</bug_when>
    <thetext>(In reply to comment #8)
&gt; I will release the fix shortly.

Done, it&apos;s here: 
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=6543ce51629b1130701339a6bcbd6b37248d667e</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2172360</commentid>
    <comment_count>10</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-10-16 08:39:26 -0400</bug_when>
    <thetext>Marking as resolved.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2177529</commentid>
    <comment_count>11</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-10-30 11:45:27 -0400</bug_when>
    <thetext>Verified for 4.3 M3 by code inspection.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>222390</attachid>
            <date>2012-10-16 07:33:00 -0400</date>
            <delta_ts>2012-10-16 07:33:59 -0400</delta_ts>
            <desc>Javadoc updates</desc>
            <filename>Fix-for-bug-391707.patch</filename>
            <type>text/plain</type>
            <size>5503</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9j
b3JlL0lKYXZhUHJvamVjdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2Vj
bGlwc2UvamR0L2NvcmUvSUphdmFQcm9qZWN0LmphdmEKaW5kZXggNjQ5MzVhMi4uZjk0ZDk3ZCAx
MDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2Nv
cmUvSUphdmFQcm9qZWN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3Jn
L2VjbGlwc2UvamR0L2NvcmUvSUphdmFQcm9qZWN0LmphdmEKQEAgLTI0MSwxMSArMjQxLDExIEBA
CiAJSVBhY2thZ2VGcmFnbWVudFJvb3RbXSBmaW5kUGFja2FnZUZyYWdtZW50Um9vdHMoSUNsYXNz
cGF0aEVudHJ5IGVudHJ5KTsKIAkvKioKLQkgKiBSZXR1cm5zIHRoZSBmaXJzdCB0eXBlIGZvdW5k
IGZvbGxvd2luZyB0aGlzIHByb2plY3QncyBjbGFzc3BhdGgKLQkgKiB3aXRoIHRoZSBnaXZlbiBm
dWxseSBxdWFsaWZpZWQgbmFtZSBvciA8Y29kZT5udWxsPC9jb2RlPiBpZiBub25lIGlzIGZvdW5k
LgorCSAqIFJldHVybnMgdGhlIGZpcnN0IHR5cGUgKGV4Y2x1ZGluZyBzZWNvbmRhcnkgdHlwZXMp
IGZvdW5kIGZvbGxvd2luZyB0aGlzIHByb2plY3QncyAKKwkgKiBjbGFzc3BhdGggd2l0aCB0aGUg
Z2l2ZW4gZnVsbHkgcXVhbGlmaWVkIG5hbWUgb3IgPGNvZGU+bnVsbDwvY29kZT4gaWYgbm9uZSBp
cyBmb3VuZC4KIAkgKiBUaGUgZnVsbHkgcXVhbGlmaWVkIG5hbWUgaXMgYSBkb3Qtc2VwYXJhdGVk
IG5hbWUuIEZvciBleGFtcGxlLAogCSAqIGEgY2xhc3MgQiBkZWZpbmVkIGFzIGEgbWVtYmVyIHR5
cGUgb2YgYSBjbGFzcyBBIGluIHBhY2thZ2UgeC55IHNob3VsZCBoYXZlIGEKIAkgKiB0aGUgZnVs
bHkgcXVhbGlmaWVkIG5hbWUgIngueS5BLkIiLgogCSAqCi0JICogTm90ZSB0aGF0IGluIG9yZGVy
IHRvIGJlIGZvdW5kLCBhIHR5cGUgbmFtZSAob3IgaXRzIHRvcGxldmVsIGVuY2xvc2luZworCSAq
IE5vdGUgdGhhdCBpbiBvcmRlciB0byBiZSBmb3VuZCwgYSB0eXBlIG5hbWUgKG9yIGl0cyB0b3Ag
bGV2ZWwgZW5jbG9zaW5nCiAJICogdHlwZSBuYW1lKSBtdXN0IG1hdGNoIGl0cyBjb3JyZXNwb25k
aW5nIGNvbXBpbGF0aW9uIHVuaXQgbmFtZS4gQXMgYQogCSAqIGNvbnNlcXVlbmNlLCBzZWNvbmRh
cnkgdHlwZXMgY2Fubm90IGJlIGZvdW5kIHVzaW5nIHRoaXMgZnVuY3Rpb25hbGl0eS4KQEAgLTI2
Miw2ICsyNjIsNiBAQAogCUlUeXBlIGZpbmRUeXBlKFN0cmluZyBmdWxseVF1YWxpZmllZE5hbWUp
IHRocm93cyBKYXZhTW9kZWxFeGNlcHRpb247CiAJLyoqCi0JICogU2FtZSBmdW5jdGlvbmFsaXR5
IGFzIHtAbGluayAjZmluZFR5cGUoU3RyaW5nKX0gYnV0IGFsc28gbG9vayBmb3Igc2Vjb25kYXJ5
Ci0JICogdHlwZXMgaWYgZ2l2ZW4gbmFtZSBkb2VzIG5vdCBtYXRjaCBhIGNvbXBpbGF0aW9uIHVu
aXQgbmFtZS4KKwkgKiBTYW1lIGZ1bmN0aW9uYWxpdHkgYXMge0BsaW5rICNmaW5kVHlwZShTdHJp
bmcpfSBidXQgYWxzbyBsb29rcyBmb3Igc2Vjb25kYXJ5CisJICogdHlwZXMgaWYgdGhlIGdpdmVu
IG5hbWUgZG9lcyBub3QgbWF0Y2ggYSBjb21waWxhdGlvbiB1bml0IG5hbWUuCiAJICoKIAkgKiBA
cGFyYW0gZnVsbHlRdWFsaWZpZWROYW1lIHRoZSBnaXZlbiBmdWxseSBxdWFsaWZpZWQgbmFtZQpA
QCAtMjc3LDYgKzI3Nyw2IEBACiAJSVR5cGUgZmluZFR5cGUoU3RyaW5nIGZ1bGx5UXVhbGlmaWVk
TmFtZSwgSVByb2dyZXNzTW9uaXRvciBwcm9ncmVzc01vbml0b3IpIHRocm93cyBKYXZhTW9kZWxF
eGNlcHRpb247CiAJLyoqCi0JICogUmV0dXJucyB0aGUgZmlyc3QgdHlwZSBmb3VuZCBmb2xsb3dp
bmcgdGhpcyBwcm9qZWN0J3MgY2xhc3NwYXRoCi0JICogd2l0aCB0aGUgZ2l2ZW4gZnVsbHkgcXVh
bGlmaWVkIG5hbWUgb3IgPGNvZGU+bnVsbDwvY29kZT4gaWYgbm9uZSBpcyBmb3VuZC4KKwkgKiBS
ZXR1cm5zIHRoZSBmaXJzdCB0eXBlIChleGNsdWRpbmcgc2Vjb25kYXJ5IHR5cGVzKSBmb3VuZCBm
b2xsb3dpbmcgdGhpcyBwcm9qZWN0J3MgCisJICogY2xhc3NwYXRoIHdpdGggdGhlIGdpdmVuIGZ1
bGx5IHF1YWxpZmllZCBuYW1lIG9yIDxjb2RlPm51bGw8L2NvZGU+IGlmIG5vbmUgaXMgZm91bmQu
CiAJICogVGhlIGZ1bGx5IHF1YWxpZmllZCBuYW1lIGlzIGEgZG90LXNlcGFyYXRlZCBuYW1lLiBG
b3IgZXhhbXBsZSwKIAkgKiBhIGNsYXNzIEIgZGVmaW5lZCBhcyBhIG1lbWJlciB0eXBlIG9mIGEg
Y2xhc3MgQSBpbiBwYWNrYWdlIHgueSBzaG91bGQgaGF2ZSBhCkBAIC0yODUsNSArMjg1LDUgQEAK
IAkgKiBvd25lci4KIAkgKgotCSAqIE5vdGUgdGhhdCBpbiBvcmRlciB0byBiZSBmb3VuZCwgYSB0
eXBlIG5hbWUgKG9yIGl0cyB0b3BsZXZlbCBlbmNsb3NpbmcKKwkgKiBOb3RlIHRoYXQgaW4gb3Jk
ZXIgdG8gYmUgZm91bmQsIGEgdHlwZSBuYW1lIChvciBpdHMgdG9wIGxldmVsIGVuY2xvc2luZwog
CSAqIHR5cGUgbmFtZSkgbXVzdCBtYXRjaCBpdHMgY29ycmVzcG9uZGluZyBjb21waWxhdGlvbiB1
bml0IG5hbWUuIEFzIGEKIAkgKiBjb25zZXF1ZW5jZSwgc2Vjb25kYXJ5IHR5cGVzIGNhbm5vdCBi
ZSBmb3VuZCB1c2luZyB0aGlzIGZ1bmN0aW9uYWxpdHkuCkBAIC0zMDMsNSArMzAzLDUgQEAKIAkv
KioKIAkgKiBTYW1lIGZ1bmN0aW9uYWxpdHkgYXMge0BsaW5rICNmaW5kVHlwZShTdHJpbmcsIFdv
cmtpbmdDb3B5T3duZXIpfQotCSAqIGJ1dCBhbHNvIGxvb2sgZm9yIHNlY29uZGFyeSB0eXBlcyBp
ZiBnaXZlbiBuYW1lIGRvZXMgbm90IG1hdGNoCisJICogYnV0IGFsc28gbG9va3MgZm9yIHNlY29u
ZGFyeSB0eXBlcyBpZiB0aGUgZ2l2ZW4gbmFtZSBkb2VzIG5vdCBtYXRjaAogCSAqIGEgY29tcGls
YXRpb24gdW5pdCBuYW1lLgogCSAqCkBAIC0zMTksNiArMzE5LDYgQEAKIAlJVHlwZSBmaW5kVHlw
ZShTdHJpbmcgZnVsbHlRdWFsaWZpZWROYW1lLCBXb3JraW5nQ29weU93bmVyIG93bmVyLCBJUHJv
Z3Jlc3NNb25pdG9yIHByb2dyZXNzTW9uaXRvcikgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbjsK
IAkvKioKLQkgKiBSZXR1cm5zIHRoZSBmaXJzdCB0eXBlIGZvdW5kIGZvbGxvd2luZyB0aGlzIHBy
b2plY3QncyBjbGFzc3BhdGgKLQkgKiB3aXRoIHRoZSBnaXZlbiBwYWNrYWdlIG5hbWUgYW5kIHR5
cGUgcXVhbGlmaWVkIG5hbWUKKwkgKiBSZXR1cm5zIHRoZSBmaXJzdCB0eXBlIChleGNsdWRpbmcg
c2Vjb25kYXJ5IHR5cGVzKSBmb3VuZCBmb2xsb3dpbmcgdGhpcworCSAqIHByb2plY3QncyBjbGFz
c3BhdGggd2l0aCB0aGUgZ2l2ZW4gcGFja2FnZSBuYW1lIGFuZCB0eXBlIHF1YWxpZmllZCBuYW1l
CiAJICogb3IgPGNvZGU+bnVsbDwvY29kZT4gaWYgbm9uZSBpcyBmb3VuZC4KIAkgKiBUaGUgcGFj
a2FnZSBuYW1lIGlzIGEgZG90LXNlcGFyYXRlZCBuYW1lLgpAQCAtMzI3LDUgKzMyNyw1IEBACiAJ
ICogdHlwZSBxdWFsaWZpZWQgbmFtZSAiQS5CIi4KIAkgKgotCSAqIE5vdGUgdGhhdCBpbiBvcmRl
ciB0byBiZSBmb3VuZCwgYSB0eXBlIG5hbWUgKG9yIGl0cyB0b3BsZXZlbCBlbmNsb3NpbmcKKwkg
KiBOb3RlIHRoYXQgaW4gb3JkZXIgdG8gYmUgZm91bmQsIGEgdHlwZSBuYW1lIChvciBpdHMgdG9w
IGxldmVsIGVuY2xvc2luZwogCSAqIHR5cGUgbmFtZSkgbXVzdCBtYXRjaCBpdHMgY29ycmVzcG9u
ZGluZyBjb21waWxhdGlvbiB1bml0IG5hbWUuIEFzIGEKIAkgKiBjb25zZXF1ZW5jZSwgc2Vjb25k
YXJ5IHR5cGVzIGNhbm5vdCBiZSBmb3VuZCB1c2luZyB0aGlzIGZ1bmN0aW9uYWxpdHkuCkBAIC0z
NDUsNiArMzQ1LDYgQEAKIAlJVHlwZSBmaW5kVHlwZShTdHJpbmcgcGFja2FnZU5hbWUsIFN0cmlu
ZyB0eXBlUXVhbGlmaWVkTmFtZSkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbjsKIAkvKioKLQkg
KiBTYW1lIGZ1bmN0aW9uYWxpdHkgYXMge0BsaW5rICNmaW5kVHlwZShTdHJpbmcsIFN0cmluZyl9
IGJ1dCBhbHNvIGxvb2sgZm9yCi0JICogc2Vjb25kYXJ5IHR5cGVzIGlmIGdpdmVuIG5hbWUgZG9l
cyBub3QgbWF0Y2ggYSBjb21waWxhdGlvbiB1bml0IG5hbWUuCisJICogU2FtZSBmdW5jdGlvbmFs
aXR5IGFzIHtAbGluayAjZmluZFR5cGUoU3RyaW5nLCBTdHJpbmcpfSBidXQgYWxzbyBsb29rcyBm
b3IKKwkgKiBzZWNvbmRhcnkgdHlwZXMgaWYgdGhlIGdpdmVuIG5hbWUgZG9lcyBub3QgbWF0Y2gg
YSBjb21waWxhdGlvbiB1bml0IG5hbWUuCiAJICoKIAkgKiBAcGFyYW0gcGFja2FnZU5hbWUgdGhl
IGdpdmVuIHBhY2thZ2UgbmFtZQpAQCAtMzYxLDYgKzM2MSw2IEBACiAJSVR5cGUgZmluZFR5cGUo
U3RyaW5nIHBhY2thZ2VOYW1lLCBTdHJpbmcgdHlwZVF1YWxpZmllZE5hbWUsIElQcm9ncmVzc01v
bml0b3IgcHJvZ3Jlc3NNb25pdG9yKSB0aHJvd3MgSmF2YU1vZGVsRXhjZXB0aW9uOwogCS8qKgot
CSAqIFJldHVybnMgdGhlIGZpcnN0IHR5cGUgZm91bmQgZm9sbG93aW5nIHRoaXMgcHJvamVjdCdz
IGNsYXNzcGF0aAotCSAqIHdpdGggdGhlIGdpdmVuIHBhY2thZ2UgbmFtZSBhbmQgdHlwZSBxdWFs
aWZpZWQgbmFtZQorCSAqIFJldHVybnMgdGhlIGZpcnN0IHR5cGUgKGV4Y2x1ZGluZyBzZWNvbmRh
cnkgdHlwZXMpIGZvdW5kIGZvbGxvd2luZyB0aGlzIAorCSAqIHByb2plY3QncyBjbGFzc3BhdGgg
d2l0aCB0aGUgZ2l2ZW4gcGFja2FnZSBuYW1lIGFuZCB0eXBlIHF1YWxpZmllZCBuYW1lCiAJICog
b3IgPGNvZGU+bnVsbDwvY29kZT4gaWYgbm9uZSBpcyBmb3VuZC4KIAkgKiBUaGUgcGFja2FnZSBu
YW1lIGlzIGEgZG90LXNlcGFyYXRlZCBuYW1lLgpAQCAtMzcxLDUgKzM3MSw1IEBACiAJICogb3du
ZXIuCiAJICoKLQkgKiBOb3RlIHRoYXQgaW4gb3JkZXIgdG8gYmUgZm91bmQsIGEgdHlwZSBuYW1l
IChvciBpdHMgdG9wbGV2ZWwgZW5jbG9zaW5nCisJICogTm90ZSB0aGF0IGluIG9yZGVyIHRvIGJl
IGZvdW5kLCBhIHR5cGUgbmFtZSAob3IgaXRzIHRvcCBsZXZlbCBlbmNsb3NpbmcKIAkgKiB0eXBl
IG5hbWUpIG11c3QgbWF0Y2ggaXRzIGNvcnJlc3BvbmRpbmcgY29tcGlsYXRpb24gdW5pdCBuYW1l
LiBBcyBhCiAJICogY29uc2VxdWVuY2UsIHNlY29uZGFyeSB0eXBlcyBjYW5ub3QgYmUgZm91bmQg
dXNpbmcgdGhpcyBmdW5jdGlvbmFsaXR5LgpAQCAtMzkxLDUgKzM5MSw1IEBACiAJLyoqCiAJICog
U2FtZSBmdW5jdGlvbmFsaXR5IGFzIHtAbGluayAjZmluZFR5cGUoU3RyaW5nLCBTdHJpbmcsIFdv
cmtpbmdDb3B5T3duZXIpfQotCSAqIGJ1dCBhbHNvIGxvb2sgZm9yIHNlY29uZGFyeSB0eXBlcyBp
ZiBnaXZlbiBuYW1lIGRvZXMgbm90IG1hdGNoIGEgY29tcGlsYXRpb24gdW5pdCBuYW1lLgorCSAq
IGJ1dCBhbHNvIGxvb2tzIGZvciBzZWNvbmRhcnkgdHlwZXMgaWYgdGhlIGdpdmVuIG5hbWUgZG9l
cyBub3QgbWF0Y2ggYSBjb21waWxhdGlvbiB1bml0IG5hbWUuCiAJICoKIAkgKiBAcGFyYW0gcGFj
a2FnZU5hbWUgdGhlIGdpdmVuIHBhY2thZ2UgbmFtZQ==
</data>

          </attachment>
      

    </bug>

</bugzilla>