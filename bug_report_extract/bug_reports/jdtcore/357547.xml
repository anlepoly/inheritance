<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>357547</bug_id>
          
          <creation_ts>2011-09-13 15:30:00 -0400</creation_ts>
          <short_desc>[search] Search for method references is returning methods as overriden even if the superclass&apos;s method is only package-visible</short_desc>
          <delta_ts>2012-04-30 04:17:23 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>3.8 M7</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Gustavo Soares">gsoares</reporter>
          <assigned_to name="Satyam Kandula">satyam.kandula</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>jarthana</cc>
    
    <cc>markus_keller</cc>
    
    <cc>Olivier_Thomann</cc>
    
    <cc>samrat.dhillon</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="50000"
          type_id="1"
          status="+"
          setter="amj87.iitr"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1992986</commentid>
    <comment_count>0</comment_count>
    <who name="Gustavo Soares">gsoares</who>
    <bug_when>2011-09-13 15:30:23 -0400</bug_when>
    <thetext>Build Identifier: 20110615-0604

The change method signature refactoring introduces a compilation error. 

Reproducible: Always

Steps to Reproduce:
1. Create the classes
package p2;
public class C {
}
package p1;
import p2.*;
public class B extends A {
  long k(){
    return 0;
  }
}
package p2;
public class A {
  long k(){
    return 1;
  }
  public long m(){
    return new A().k();
  }
}
2. Apply the change method signature refactoring to add a &quot;int&quot; parameter to B.k
package p1;
import p2.*;
public class B extends A {
  long k(int i){
    return 0;
  }
}

package p2;
public class C {
}

package p2;
public class A {
  long k(){
    return 1;
  }
  public long m(){
    return new A().k(0);
  }
}
3. The resulting program does not compile</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1994083</commentid>
    <comment_count>1</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2011-09-15 08:59:59 -0400</bug_when>
    <thetext>This is a bug in the search engine: A search for references to p1.B.k() should not find a match in p2.A.m(), since the package-visible p2.A.k() is *not* overridden by p1.B.k().</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1994243</commentid>
    <comment_count>2</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-09-15 11:08:12 -0400</bug_when>
    <thetext>Satyam, please investigate.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2073215</commentid>
    <comment_count>3</comment_count>
      <attachid>211840</attachid>
    <who name="Samrat Dhillon">samrat.dhillon</who>
    <bug_when>2012-02-29 15:26:21 -0500</bug_when>
    <thetext>Created attachment 211840
proposed patch for this bug

I found that the root cause is probably in org.eclipse.jdt.core/search/org/eclipse/jdt/internal/core/search/matching/MethodLocator.java  isVirtualInvoke. I may not have fixed it in the best way. Basically checking if the method is private or if it is default and not in the same package then it is not a virtual invoke</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2075133</commentid>
    <comment_count>4</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-03-05 05:40:33 -0500</bug_when>
    <thetext>Samrat, Thanks for the patch. The patch contains the changes required to fix the problem and that it is correct. It doesn&apos;t take care of null declaration qualification, which could be optional during search.

Do you want to fix this completely? If so, please try to fix this and try to get the testcase too. Otherwise, I could take this to completeness shortly. 

Thanks again.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2075263</commentid>
    <comment_count>5</comment_count>
    <who name="Samrat Dhillon">samrat.dhillon</who>
    <bug_when>2012-03-05 09:37:45 -0500</bug_when>
    <thetext>(In reply to comment #4)
&gt; Samrat, Thanks for the patch. The patch contains the changes required to fix
&gt; the problem and that it is correct. It doesn&apos;t take care of null declaration
&gt; qualification, which could be optional during search.
&gt; 
&gt; Do you want to fix this completely? If so, please try to fix this and try to
&gt; get the testcase too. Otherwise, I could take this to completeness shortly. 
&gt; 
&gt; Thanks again.

Satyam, can you please clarify a bit more. I am not sure if understand you correctly when you say &quot;It doesn&apos;t take care of null declaration
 qualification, which could be optional during search.&quot;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2075792</commentid>
    <comment_count>6</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-03-06 06:28:43 -0500</bug_when>
    <thetext>(In reply to comment #5)
&gt; Satyam, can you please clarify a bit more. I am not sure if understand you
&gt; correctly when you say &quot;It doesn&apos;t take care of null declaration
&gt;  qualification, which could be optional during search.&quot;
If you do a Java search for references to &lt;Type&gt;.&lt;Method&gt;(), without qualifying &lt;Type&gt; at all, the this.pattern.declaringQualification could be null and there could be problems with the current patch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2076726</commentid>
    <comment_count>7</comment_count>
    <who name="Samrat Dhillon">samrat.dhillon</who>
    <bug_when>2012-03-07 11:48:55 -0500</bug_when>
    <thetext>(In reply to comment #6)
&gt; (In reply to comment #5)
&gt; &gt; Satyam, can you please clarify a bit more. I am not sure if understand you
&gt; &gt; correctly when you say &quot;It doesn&apos;t take care of null declaration
&gt; &gt;  qualification, which could be optional during search.&quot;
&gt; If you do a Java search for references to &lt;Type&gt;.&lt;Method&gt;(), without qualifying
&gt; &lt;Type&gt; at all, the this.pattern.declaringQualification could be null and there
&gt; could be problems with the current patch.

I think eclipse is not going in that path. If you do Java search for method references without specifying the type, mustResolve in MatchLocator.reportMatching is always set to false and hence MethodLocator.resolveLevel is never called. If you still think the patch needs tweaking please go ahead :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2090954</commentid>
    <comment_count>8</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-04-09 02:03:58 -0400</bug_when>
    <thetext>(In reply to comment #7)
&gt; (In reply to comment #6)
&gt; &gt; (In reply to comment #5)
&gt; &gt; &gt; Satyam, can you please clarify a bit more. I am not sure if understand you
&gt; &gt; &gt; correctly when you say &quot;It doesn&apos;t take care of null declaration
&gt; &gt; &gt;  qualification, which could be optional during search.&quot;
&gt; &gt; If you do a Java search for references to &lt;Type&gt;.&lt;Method&gt;(), without qualifying
&gt; &gt; &lt;Type&gt; at all, the this.pattern.declaringQualification could be null and there
&gt; &gt; could be problems with the current patch.
&gt; 
&gt; I think eclipse is not going in that path. If you do Java search for method
&gt; references without specifying the type, mustResolve in
&gt; MatchLocator.reportMatching is always set to false and hence
&gt; MethodLocator.resolveLevel is never called. If you still think the patch needs
&gt; tweaking please go ahead :)
Actually mentioning the type partially would run into this path. Fixing this seems to get more involved. Will attach a patch shortly.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2090988</commentid>
    <comment_count>9</comment_count>
      <attachid>213744</attachid>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-04-09 06:50:58 -0400</bug_when>
    <thetext>Created attachment 213744
Proposed patch</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2090989</commentid>
    <comment_count>10</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-04-09 06:52:18 -0400</bug_when>
    <thetext>Ayush, Can you review?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2095737</commentid>
    <comment_count>11</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-04-19 06:57:59 -0400</bug_when>
    <thetext>(In reply to comment #10)
&gt; Ayush, Can you review?

I have a few comments:
- copyrights need to be added to MatchLocator.

- In testBug357547c, A.k() - looks like u intended to make it default but made it public

- testBug357547b passes without the fix. Also, even if I change k() to public in A and B, it still does not return me any references. Does p*B.k() not include p1.B.k()? TO test more I created two more classes pp.ppB and pp.ppA with other things same as comment 0. Search for refs to p*B.k() should atleast return the call in ppA.m(), no?

- i think the condition added i.e. this.pattern.focus != null is always false in all the tests, which basically wipes out the effect of the other two conditions adjoing it. Is there a test case when focus is not null?

- Probably an existing problem: comment 0 example - right click on k() declared in B and search for declarations yields both B.k() and A.k(). However, search pattern is p1.B.k(). Why should A.k() be shown. When i search for p1.B.k from &quot;java search&quot; dialog i get only B.k() which looks correct.

- [unrelated] I get a warning on B.k() from comment 0 - The method B.k() does not override the inherited method from A since it is private to a different package. Quick fix offered is &apos;change visibility of A.k to default&apos;. This is wrong. Will file a new UI bug for this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2095833</commentid>
    <comment_count>12</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-04-19 09:42:00 -0400</bug_when>
    <thetext>(In reply to comment #11)
Hi Ayush, Thanks for the review. 

&gt; I have a few comments:
&gt; - copyrights need to be added to MatchLocator.
There is not change in MatchLocator. Are you talking about something else? 

&gt; 
&gt; - In testBug357547c, A.k() - looks like u intended to make it default but made
&gt; it public
That is true. I will change it. 

&gt; 
&gt; - testBug357547b passes without the fix. Also, even if I change k() to public
&gt; in A and B, it still does not return me any references. Does p*B.k() not
&gt; include p1.B.k()? TO test more I created two more classes pp.ppB and pp.ppA
&gt; with other things same as comment 0. Search for refs to p*B.k() should atleast
&gt; return the call in ppA.m(), no?
There looks like some other problem too. I will find that out. search for p*.B.k() works good. 

&gt; 
&gt; - i think the condition added i.e. this.pattern.focus != null is always false
&gt; in all the tests, which basically wipes out the effect of the other two
&gt; conditions adjoing it. Is there a test case when focus is not null?
testBug357547a is for that. 

&gt; 
&gt; - Probably an existing problem: comment 0 example - right click on k() declared
&gt; in B and search for declarations yields both B.k() and A.k(). However, search
&gt; pattern is p1.B.k(). Why should A.k() be shown. When i search for p1.B.k from
&gt; &quot;java search&quot; dialog i get only B.k() which looks correct.
We should look at the package even in case of declarations. I will look at it. However, we intentionally report the B.k() adding some flavours to the search results. 


&gt; - [unrelated] I get a warning on B.k() from comment 0 - The method B.k() does
&gt; not override the inherited method from A since it is private to a different
&gt; package. Quick fix offered is &apos;change visibility of A.k to default&apos;. This is
&gt; wrong. Will file a new UI bug for this.
I don&apos;t think this is wrong.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2095917</commentid>
    <comment_count>13</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-04-19 11:12:22 -0400</bug_when>
    <thetext>(In reply to comment #12)
&gt; (In reply to comment #11)
&gt; Hi Ayush, Thanks for the review. 
&gt; 
&gt; &gt; I have a few comments:
&gt; &gt; - copyrights need to be added to MatchLocator.
&gt; There is not change in MatchLocator. Are you talking about something else? 
Sorry I meant MethodLocator, where Samrat had submitted the initial fix.

&gt; &gt; 
&gt; &gt; - i think the condition added i.e. this.pattern.focus != null is always false
&gt; &gt; in all the tests, which basically wipes out the effect of the other two
&gt; &gt; conditions adjoing it. Is there a test case when focus is not null?
&gt; testBug357547a is for that. 
Oops yes I missed it

&gt; &gt; - [unrelated] I get a warning on B.k() from comment 0 - The method B.k() does
&gt; &gt; not override the inherited method from A since it is private to a different
&gt; &gt; package. Quick fix offered is &apos;change visibility of A.k to default&apos;. This is
&gt; &gt; wrong. Will file a new UI bug for this.
&gt; I don&apos;t think this is wrong.
Why not? The quick fix does not fix the problem, so its bogus, right?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2096183</commentid>
    <comment_count>14</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-04-20 01:14:00 -0400</bug_when>
    <thetext>(In reply to comment #13)
&gt; Sorry I meant MethodLocator, where Samrat had submitted the initial fix.
Samrat, can you give your copyright message. I would like to add in the file. 


&gt; &gt; &gt; - [unrelated] I get a warning on B.k() from comment 0 - The method B.k() does
&gt; &gt; &gt; not override the inherited method from A since it is private to a different
&gt; &gt; &gt; package. Quick fix offered is &apos;change visibility of A.k to default&apos;. This is
&gt; &gt; &gt; wrong. Will file a new UI bug for this.
&gt; &gt; I don&apos;t think this is wrong.
&gt; Why not? The quick fix does not fix the problem, so its bogus, right?
You are right. I didn&apos;t look at the message properly. It is a bug.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2096186</commentid>
    <comment_count>15</comment_count>
      <attachid>214284</attachid>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-04-20 01:21:56 -0400</bug_when>
    <thetext>Created attachment 214284
Updated patch

Updated according to Ayush&apos;s comments. 
- Made the change for search for declarations also to take care of the default, when a search pattern is used. Added a test for this. 
- Updated the tests (testBug357547b and testBug357547c) accoding to the comments. 
- Didn&apos;t fix the &apos;p*B&apos; type reference problem mentioned for testBug357547b, as it is a separate issue.

Ayush, please have a look at this. Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2096189</commentid>
    <comment_count>16</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-04-20 01:28:18 -0400</bug_when>
    <thetext>(In reply to comment #14)
&gt; (In reply to comment #13)
&gt; &gt; Sorry I meant MethodLocator, where Samrat had submitted the initial fix.
&gt; Samrat, can you give your copyright message. I would like to add in the file.
Samrat, the format is this:
Your Name &lt;email@example.com&gt; - Bug Title - https://bugs.eclipse.org/BUG_NUMBER

&gt; &gt; &gt; &gt; - [unrelated] I get a warning on B.k() from comment 0 - The method B.k() does
&gt; &gt; &gt; &gt; not override the inherited method from A since it is private to a different
&gt; &gt; &gt; &gt; package. Quick fix offered is &apos;change visibility of A.k to default&apos;. This is
&gt; &gt; &gt; &gt; wrong. Will file a new UI bug for this.
Opened bug 377243</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2096193</commentid>
    <comment_count>17</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-04-20 01:42:20 -0400</bug_when>
    <thetext>(In reply to comment #15)
&gt; Created attachment 214284 [details]
&gt; Updated patch
&gt; 
&gt; Updated according to Ayush&apos;s comments. 
&gt; - Made the change for search for declarations also to take care of the default,
&gt; when a search pattern is used. Added a test for this. 
&gt; - Updated the tests (testBug357547b and testBug357547c) accoding to the
&gt; comments. 
&gt; - Didn&apos;t fix the &apos;p*B&apos; type reference problem mentioned for testBug357547b, as
&gt; it is a separate issue.
&gt; 
&gt; Ayush, please have a look at this. Thanks.
Wrong patch.. will update with the new patch shortly.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2096240</commentid>
    <comment_count>18</comment_count>
      <attachid>214290</attachid>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-04-20 03:58:02 -0400</bug_when>
    <thetext>Created attachment 214290
Updated patch

Correct Patch as for comment 15</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2096421</commentid>
    <comment_count>19</comment_count>
    <who name="Samrat Dhillon">samrat.dhillon</who>
    <bug_when>2012-04-20 09:54:05 -0400</bug_when>
    <thetext>(In reply to comment #18)
&gt; Created attachment 214290 [details]
&gt; Updated patch
&gt; 
&gt; Correct Patch as for comment 15

Hi Satyam here is my copyright message.

Samrat Dhillon samrat.dhillon@gmail.com - Search for method references is returning methods as overriden even if the superclass&apos;s method is only package-visible - https://bugs.eclipse.org/357547</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2096857</commentid>
    <comment_count>20</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-04-23 01:10:16 -0400</bug_when>
    <thetext>+1. 
The two remaining issues can be handled in separate bugs:
- p*B.k() problem
- the second last point in comment 11</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2096884</commentid>
    <comment_count>21</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-04-23 02:19:11 -0400</bug_when>
    <thetext>(In reply to comment #20)
&gt; +1. 
&gt; The two remaining issues can be handled in separate bugs:
&gt; - p*B.k() problem
&gt; - the second last point in comment 11
Thanks Ayush for the review. 
Released this patch on master via commit 4f8b41427e5710e37012dc18560acc142566864b and commit 474e0db6559546cf5ac1476d3c4eb203e5f714e7</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2100298</commentid>
    <comment_count>22</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-04-30 04:16:05 -0400</bug_when>
    <thetext>(In reply to comment #20)
&gt; +1. 
&gt; The two remaining issues can be handled in separate bugs:
&gt; - p*B.k() problem

I get the desired result if I use p*.B.k() - note the &apos;.&apos; after the &apos;*&apos;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2100299</commentid>
    <comment_count>23</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-04-30 04:17:23 -0400</bug_when>
    <thetext>The fix for the bug as reported in comment #0 has been verified with build I20120429-1800</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>211840</attachid>
            <date>2012-02-29 15:26:00 -0500</date>
            <delta_ts>2012-04-09 06:50:58 -0400</delta_ts>
            <desc>proposed patch for this bug</desc>
            <filename>Bug357547.patch</filename>
            <type>text/plain</type>
            <size>880</size>
            <attacher name="Samrat Dhillon">samrat.dhillon</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29yZS9zZWFyY2gvbWF0Y2hpbmcvTWV0aG9kTG9jYXRvci5qYXZhIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJj
aC9tYXRjaGluZy9NZXRob2RMb2NhdG9yLmphdmENCmluZGV4IDliNDg5MzguLjJlYWRmOTEgMTAw
NjQ0DQotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvcmUvc2VhcmNoL21hdGNoaW5nL01ldGhvZExvY2F0b3IuamF2YQ0KKysrIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3Nl
YXJjaC9tYXRjaGluZy9NZXRob2RMb2NhdG9yLmphdmENCkBAIC0xMDksNyArMTA5LDcgQEANCiAg
KiB0aGlzIG1lc3NhZ2Ugc2VuZCBvciBub3QuDQogICovDQogcHJvdGVjdGVkIGJvb2xlYW4gaXNW
aXJ0dWFsSW52b2tlKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBNZXNzYWdlU2VuZCBtZXNzYWdlU2Vu
ZCkgew0KLQlyZXR1cm4gIW1ldGhvZC5pc1N0YXRpYygpICYmICFtZXRob2QuaXNQcml2YXRlKCkg
JiYgIW1lc3NhZ2VTZW5kLmlzU3VwZXJBY2Nlc3MoKTsNCisJcmV0dXJuICFtZXRob2QuaXNTdGF0
aWMoKSAmJiAhKG1ldGhvZC5pc1ByaXZhdGUoKSB8fCAobWV0aG9kLmlzRGVmYXVsdCgpICYmICFD
aGFyT3BlcmF0aW9uLmVxdWFscyhtZXRob2QuZGVjbGFyaW5nQ2xhc3MucXVhbGlmaWVkUGFja2Fn
ZU5hbWUoKSx0aGlzLnBhdHRlcm4uZGVjbGFyaW5nUXVhbGlmaWNhdGlvbikpKSYmICFtZXNzYWdl
U2VuZC5pc1N1cGVyQWNjZXNzKCk7DQogfQ==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>213744</attachid>
            <date>2012-04-09 06:50:00 -0400</date>
            <delta_ts>2012-04-20 01:21:56 -0400</delta_ts>
            <desc>Proposed patch</desc>
            <filename>patch.txt</filename>
            <type>text/plain</type>
            <size>20072</size>
            <attacher name="Satyam Kandula">satyam.kandula</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9tb2RlbC9KYXZhU2VhcmNoQnVnc1Rlc3RzMi5qYXZhIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rl
c3RzL21vZGVsL0phdmFTZWFyY2hCdWdzVGVzdHMyLmphdmEKaW5kZXggMDA1MmY3YS4uZDI4MTVi
YSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21vZGVsL0phdmFTZWFyY2hCdWdzVGVzdHMyLmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9j
b3JlL3Rlc3RzL21vZGVsL0phdmFTZWFyY2hCdWdzVGVzdHMyLmphdmEKQEAgLTM3LDcgKzM3LDcg
QEAKIAl9CiAJCiAJc3RhdGljIHsKLQkJLy9URVNUU19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7InRl
c3RCdWcxMjM4MzYifTsKKwkJLy9URVNUU19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7InRlc3RCdWcz
NTc1NDdmIn07CiAJfQogCiAJcHVibGljIHN0YXRpYyBUZXN0IHN1aXRlKCkgewpAQCAtNDgxLDQg
KzQ4MSwyNTAgQEAKIAkJCWRlbGV0ZVByb2plY3QoIlAiKTsKIAkJfQogCX0KKwkKKwkvKioKKwkg
KiBAYnVnIDM1NzU0NzogW3NlYXJjaF0gU2VhcmNoIGZvciBtZXRob2QgcmVmZXJlbmNlcyBpcyBy
ZXR1cm5pbmcgbWV0aG9kcyBhcyBvdmVycmlkZW4gZXZlbiBpZiB0aGUgc3VwZXJjbGFzcydzIG1l
dGhvZCBpcyBvbmx5IHBhY2thZ2UtdmlzaWJsZQorCSAqIEB0ZXN0IFNlYXJjaCBmb3IgYSBub24t
b3ZlcnJpZGVuIG1ldGhvZCBiZWNhdXNlIG9mIHBhY2thZ2UgdmlzaWJpbGl0eSBzaG91bGQgbm90
IGJlIGZvdW5kCisJICogQHNlZSAiaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19i
dWcuY2dpP2lkPTM1NzU0NyIKKwkgKi8KKwlwdWJsaWMgdm9pZCB0ZXN0QnVnMzU3NTQ3YSgpIHRo
cm93cyBDb3JlRXhjZXB0aW9uIHsKKwkJSUphdmFQcm9qZWN0IHByb2plY3QgPSBudWxsOworCQl0
cnkKKwkJeworCQkJcHJvamVjdCA9IGNyZWF0ZUphdmFQcm9qZWN0KCJQIik7CisJCQljcmVhdGVG
b2xkZXIoIi9QL3AxIik7CisJCQljcmVhdGVGaWxlKCIvUC9wMS9CLmphdmEiLAorCQkJCQkicGFj
a2FnZSBwMTtcbiIgKworCQkJCQkiaW1wb3J0IHAyLio7XG4iICsKKwkJCQkJInB1YmxpYyBjbGFz
cyBCIGV4dGVuZHMgQSB7XG4iICsKKwkJCQkJImxvbmcgaygpe1xuIiArCisJCQkJCSJyZXR1cm4g
MDtcbiIgKworCQkJICAJCSJ9XG4iICsKKwkJCQkJIn1cbiIpOworCQkJY3JlYXRlRm9sZGVyKCIv
UC9wMiIpOworCQkJY3JlYXRlRmlsZSgiL1AvcDIvQS5qYXZhIiwKKwkJCQkJInBhY2thZ2UgcDI7
XG4iICsKKwkJCQkJInB1YmxpYyBjbGFzcyBBIHtcbiIgKworCQkJCQkibG9uZyBrKCl7XG4iICsK
KwkJCQkJInJldHVybiAwO1xuIiArCisJCQkgIAkJIn1cbiIgKworCQkJICAJCSJwdWJsaWMgbG9u
ZyBtKCl7XG4iKworCQkJICAJCSJyZXR1cm4gbmV3IEEoKS5rKCk7XG4iICsKKwkJCSAgCQkifVxu
IisKKwkJCQkJIn1cbiIpOworCQkJSVR5cGUgdHlwZSA9IGdldENvbXBpbGF0aW9uVW5pdCgiL1Av
cDEvQi5qYXZhIikuZ2V0VHlwZSgiQiIpOworCQkJSU1ldGhvZCBtZXRob2QgPSB0eXBlLmdldE1l
dGhvZCgiayIsIG5ldyBTdHJpbmdbXXt9KTsKKwkJCXNlYXJjaChtZXRob2QsIFJFRkVSRU5DRVMs
IEVYQUNUX1JVTEUsIFNlYXJjaEVuZ2luZS5jcmVhdGVXb3Jrc3BhY2VTY29wZSgpLCB0aGlzLnJl
c3VsdENvbGxlY3Rvcik7CisJCQlhc3NlcnRTZWFyY2hSZXN1bHRzKCJTaG91bGQgbm90IGdldCBh
bnkgcmVzdWx0cyIsICIiLCB0aGlzLnJlc3VsdENvbGxlY3Rvcik7CisJCX0gZmluYWxseSB7CisJ
CQlkZWxldGVQcm9qZWN0KHByb2plY3QpOworCQl9CisJfQorCQorCS8vIHNlYXJjaCBmb3IgdGhl
IG1ldGhvZCBuYW1lIHNob3VsZCBhbHNvIG5vdCByZXR1cm4gbWF0Y2hlcyBpZiBub3Qtb3ZlcnJp
ZGVuIGJlY2F1c2Ugb2YgcGFja2FnZS12aXNpYmxlCisJcHVibGljIHZvaWQgdGVzdEJ1ZzM1NzU0
N2IoKSB0aHJvd3MgQ29yZUV4Y2VwdGlvbiB7CisJCUlKYXZhUHJvamVjdCBwcm9qZWN0ID0gbnVs
bDsKKwkJdHJ5CisJCXsKKwkJCXByb2plY3QgPSBjcmVhdGVKYXZhUHJvamVjdCgiUCIpOworCQkJ
Y3JlYXRlRm9sZGVyKCIvUC9wMSIpOworCQkJY3JlYXRlRmlsZSgiL1AvcDEvQi5qYXZhIiwKKwkJ
CQkJInBhY2thZ2UgcDE7XG4iICsKKwkJCQkJImltcG9ydCBwMi4qO1xuIiArCisJCQkJCSJwdWJs
aWMgY2xhc3MgQiBleHRlbmRzIEEge1xuIiArCisJCQkJCSJsb25nIGsoKXtcbiIgKworCQkJCQki
cmV0dXJuIDA7XG4iICsKKwkJCSAgCQkifVxuIiArCisJCQkJCSJ9XG4iKTsKKwkJCWNyZWF0ZUZv
bGRlcigiL1AvcDIiKTsKKwkJCWNyZWF0ZUZpbGUoIi9QL3AyL0EuamF2YSIsCisJCQkJCSJwYWNr
YWdlIHAyO1xuIiArCisJCQkJCSJwdWJsaWMgY2xhc3MgQSB7XG4iICsKKwkJCQkJImxvbmcgaygp
e1xuIiArCisJCQkJCSJyZXR1cm4gMDtcbiIgKworCQkJICAJCSJ9XG4iICsKKwkJCSAgCQkicHVi
bGljIGxvbmcgbSgpe1xuIisKKwkJCSAgCQkicmV0dXJuIG5ldyBBKCkuaygpO1xuIiArCisJCQkg
IAkJIn1cbiIrCisJCQkJCSJ9XG4iKTsKKwkJCXdhaXRVbnRpbEluZGV4ZXNSZWFkeSgpOworCQkJ
Ly8gc2VhcmNoCisJCQlTZWFyY2hQYXR0ZXJuIHBhdHRlcm4gPSBTZWFyY2hQYXR0ZXJuLmNyZWF0
ZVBhdHRlcm4oInAqQi5rKCkiLCBNRVRIT0QsIFJFRkVSRU5DRVMsIEVYQUNUX1JVTEUpOworCQkJ
c2VhcmNoKHBhdHRlcm4sIFNlYXJjaEVuZ2luZS5jcmVhdGVKYXZhU2VhcmNoU2NvcGUobmV3IElK
YXZhRWxlbWVudFtdIHsgcHJvamVjdCB9KSwgdGhpcy5yZXN1bHRDb2xsZWN0b3IpOworCQkJYXNz
ZXJ0U2VhcmNoUmVzdWx0cygiU2hvdWxkIG5vdCBnZXQgYW55IHJlc3VsdHMiLCAiIiwgdGhpcy5y
ZXN1bHRDb2xsZWN0b3IpOworCQl9IGZpbmFsbHkgeworCQkJZGVsZXRlUHJvamVjdChwcm9qZWN0
KTsKKwkJfQorCX0KKwkKKwkvLyBzZWFyY2ggZm9yIHRoZSBtZXRob2QgbmFtZSBzaG91bGQgcmV0
dXJuIHRoZSBtYXRjaCBpZiBzYW1lIHBhY2thZ2UgCisJcHVibGljIHZvaWQgdGVzdEJ1ZzM1NzU0
N2MoKSB0aHJvd3MgQ29yZUV4Y2VwdGlvbiB7CisJCUlKYXZhUHJvamVjdCBwcm9qZWN0ID0gbnVs
bDsKKwkJdHJ5CisJCXsKKwkJCXByb2plY3QgPSBjcmVhdGVKYXZhUHJvamVjdCgiUCIpOworCQkJ
Y3JlYXRlRm9sZGVyKCIvUC9wMiIpOworCQkJY3JlYXRlRmlsZSgiL1AvcDIvQi5qYXZhIiwKKwkJ
CQkJInBhY2thZ2UgcDI7XG4iICsKKwkJCQkJInB1YmxpYyBjbGFzcyBCIGV4dGVuZHMgQSB7XG4i
ICsKKwkJCQkJImxvbmcgaygpe1xuIiArCisJCQkJCSJyZXR1cm4gMDtcbiIgKworCQkJICAJCSJ9
XG4iICsKKwkJCQkJIn1cbiIpOworCQkJY3JlYXRlRmlsZSgiL1AvcDIvQS5qYXZhIiwKKwkJCQkJ
InBhY2thZ2UgcDI7XG4iICsKKwkJCQkJInB1YmxpYyBjbGFzcyBBIHtcbiIgKworCQkJCQkicHVi
bGljIGxvbmcgaygpe1xuIiArCisJCQkJCSJyZXR1cm4gMDtcbiIgKworCQkJICAJCSJ9XG4iICsK
KwkJCSAgCQkicHVibGljIGxvbmcgbSgpe1xuIisKKwkJCSAgCQkicmV0dXJuIG5ldyBBKCkuaygp
O1xuIiArCisJCQkgIAkJIn1cbiIrCisJCQkJCSJ9XG4iKTsKKwkJCXdhaXRVbnRpbEluZGV4ZXNS
ZWFkeSgpOworCQkJLy8gc2VhcmNoCisJCQlTZWFyY2hQYXR0ZXJuIHBhdHRlcm4gPSBTZWFyY2hQ
YXR0ZXJuLmNyZWF0ZVBhdHRlcm4oIkIuaygpIiwgTUVUSE9ELCBSRUZFUkVOQ0VTLCBFWEFDVF9S
VUxFKTsKKwkJCXNlYXJjaChwYXR0ZXJuLCBTZWFyY2hFbmdpbmUuY3JlYXRlSmF2YVNlYXJjaFNj
b3BlKG5ldyBJSmF2YUVsZW1lbnRbXSB7IHByb2plY3QgfSksIHRoaXMucmVzdWx0Q29sbGVjdG9y
KTsKKwkJCWFzc2VydFNlYXJjaFJlc3VsdHMoIldyb25nIHJlc3VsdHMiLCAicDIvQS5qYXZhIGxv
bmcgcDIuQS5tKCkgW2soKV0gRVhBQ1RfTUFUQ0giLCB0aGlzLnJlc3VsdENvbGxlY3Rvcik7CisJ
CX0gZmluYWxseSB7CisJCQlkZWxldGVQcm9qZWN0KHByb2plY3QpOworCQl9CisJfQorCQorCS8v
cHJlc2VuY2Ugb2Ygc2FtZSBuYW1lIGluIHRoZSBwYWNrYWdlIHNob3VsZCBub3QgZWZmZWN0IHRo
ZSByZXN1bHQKKwlwdWJsaWMgdm9pZCB0ZXN0QnVnMzU3NTQ3ZCgpIHRocm93cyBDb3JlRXhjZXB0
aW9uIHsKKwkJSUphdmFQcm9qZWN0IHByb2plY3QgPSBudWxsOworCQl0cnkKKwkJeworCQkJcHJv
amVjdCA9IGNyZWF0ZUphdmFQcm9qZWN0KCJQIik7CisJCQljcmVhdGVGb2xkZXIoIi9QL3AxIik7
CisJCQljcmVhdGVGaWxlKCIvUC9wMS9CLmphdmEiLAorCQkJCQkicGFja2FnZSBwMTtcbiIgKwor
CQkJCQkiaW1wb3J0IHAyLio7XG4iICsKKwkJCQkJInB1YmxpYyBjbGFzcyBCIGV4dGVuZHMgQSB7
XG4iICsKKwkJCQkJImxvbmcgaygpe1xuIiArCisJCQkJCSJyZXR1cm4gMDtcbiIgKworCQkJICAJ
CSJ9XG4iICsKKwkJCQkJIn1cbiIpOworCQkJY3JlYXRlRm9sZGVyKCIvUC9wMiIpOworCQkJY3Jl
YXRlRmlsZSgiL1AvcDIvQS5qYXZhIiwKKwkJCQkJInBhY2thZ2UgcDI7XG4iICsKKwkJCQkJInB1
YmxpYyBjbGFzcyBBeyBcbiIgKworCQkJCQkibG9uZyBrKCl7XG4iICsKKwkJCQkJInJldHVybiAw
O1xuIiArCisJCQkgIAkJIn1cbiIgKworCQkJICAJCSJwdWJsaWMgbG9uZyBtKCl7XG4iKworCQkJ
ICAJCSJyZXR1cm4gbmV3IEEoKS5rKCk7XG4iICsKKwkJCSAgCQkifVxuIisKKwkJCQkJIn1cbiIp
OworCQkJY3JlYXRlRmlsZSgiL1AvcDIvQi5qYXZhIiwKKwkJCQkJInBhY2thZ2UgcDI7XG4iICsK
KwkJCQkJInB1YmxpYyBjbGFzcyBCIHtcbiIgKworCQkJCQkifVxuIik7CisJCQl3YWl0VW50aWxJ
bmRleGVzUmVhZHkoKTsKKwkJCS8vIHNlYXJjaAorCQkJU2VhcmNoUGF0dGVybiBwYXR0ZXJuID0g
U2VhcmNoUGF0dGVybi5jcmVhdGVQYXR0ZXJuKCJCLmsoKSIsIE1FVEhPRCwgUkVGRVJFTkNFUywg
RVhBQ1RfUlVMRSk7CisJCQlzZWFyY2gocGF0dGVybiwgU2VhcmNoRW5naW5lLmNyZWF0ZUphdmFT
ZWFyY2hTY29wZShuZXcgSUphdmFFbGVtZW50W10geyBwcm9qZWN0IH0pLCB0aGlzLnJlc3VsdENv
bGxlY3Rvcik7CisJCQlhc3NlcnRTZWFyY2hSZXN1bHRzKCJTaG91bGQgbm90IGdldCBhbnkgcmVz
dWx0cyIsICIiLCB0aGlzLnJlc3VsdENvbGxlY3Rvcik7CisJCX0gZmluYWxseSB7CisJCQlkZWxl
dGVQcm9qZWN0KHByb2plY3QpOworCQl9CisJfQorCQorCS8vIHNlYXJjaCBmb3IgdGhlIG1ldGhv
ZCBuYW1lIHNob3VsZCBhbHNvIG5vdCByZXR1cm4gbWF0Y2hlcyBpZiBub3Qtb3ZlcnJpZGVuIGJl
Y2F1c2Ugb2YgcGFja2FnZS12aXNpYmxlCisJLy8gZXZlbiBpZiB0aGV5IGFyZSBpbiBqYXJzCisJ
cHVibGljIHZvaWQgdGVzdEJ1ZzM1NzU0N2UoKSB0aHJvd3MgQ29yZUV4Y2VwdGlvbiwgSU9FeGNl
cHRpb24geworCQlJSmF2YVByb2plY3QgcHJvamVjdCA9IG51bGw7CisJCXRyeQorCQl7CisJCQlw
cm9qZWN0ID0gY3JlYXRlSmF2YVByb2plY3QoIlAiLCBuZXcgU3RyaW5nW10geyIifSwgbmV3IFN0
cmluZ1tdIHsgIi9QL2xpYjM1NzU0Ny5qYXIiLCAiSkNMMTVfTElCIiB9LCAiIiwgIjEuNSIpOwor
CQkJb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMudXRpbC5VdGlsLmNyZWF0ZUphcihuZXcgU3Ry
aW5nW10geworCQkJCQkicDIvQS5qYXZhIiwKKwkJCQkJInBhY2thZ2UgcDI7XG4iICsgCisJCQkJ
CSJwdWJsaWMgY2xhc3MgQXt9XG4iIH0sIAorCQkJCQlwcm9qZWN0LmdldFByb2plY3QoKS5nZXRM
b2NhdGlvbigpLmFwcGVuZCgibGliU3R1ZmYuamFyIikudG9PU1N0cmluZygpLCAiMS41Iik7CisJ
CQkKKwkJCW9yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLnV0aWwuVXRpbC5jcmVhdGVKYXIoCisJ
CQkJCW5ldyBTdHJpbmdbXSB7CisJCQkJCQkicDEvQi5qYXZhIiwKKwkJCQkJCSJwYWNrYWdlIHAx
O1xuIisKKwkJCQkJCSJpbXBvcnQgcDIuKjtcbiIrCisJCQkJCQkicHVibGljIGNsYXNzIEIgZXh0
ZW5kcyBBIHtcbiIgKworCQkJCQkJImxvbmcgaygpe1xuIiArCisJCQkJCQkicmV0dXJuIDA7XG4i
ICsKKwkJCQkJCSJ9XG4iICsgCisJCQkJCQkifVxuIn0sCisJCQkJCW51bGwsCisJCQkJCXByb2pl
Y3QuZ2V0UHJvamVjdCgpLmdldExvY2F0aW9uKCkuYXBwZW5kKCJsaWIzNTc1NDcuamFyIikudG9P
U1N0cmluZygpLAorCQkJCQluZXcgU3RyaW5nW10geyBwcm9qZWN0LmdldFByb2plY3QoKS5nZXRM
b2NhdGlvbigpLmFwcGVuZCgibGliU3R1ZmYuamFyIikudG9PU1N0cmluZygpIH0sCisJCQkJCSIx
LjUiKTsKKwkJCXJlZnJlc2gocHJvamVjdCk7CisJCQljcmVhdGVGb2xkZXIoIi9QL3AyIik7CisJ
CQljcmVhdGVGaWxlKCIvUC9wMi9BLmphdmEiLAorCQkJCQkicGFja2FnZSBwMjtcbiIgKworCQkJ
CQkicHVibGljIGNsYXNzIEEge1xuIiArCisJCQkJCSJsb25nIGsoKXtcbiIgKworCQkJCQkicmV0
dXJuIDA7XG4iICsKKwkJCSAgCQkifVxuIiArCisJCQkgIAkJInB1YmxpYyBsb25nIG0oKXtcbiIr
CisJCQkgIAkJInJldHVybiBuZXcgQSgpLmsoKTtcbiIgKworCQkJICAJCSJ9XG4iKworCQkJCQki
fVxuIik7CisJCQl3YWl0VW50aWxJbmRleGVzUmVhZHkoKTsKKwkJCS8vIHNlYXJjaAorCQkJU2Vh
cmNoUGF0dGVybiBwYXR0ZXJuID0gU2VhcmNoUGF0dGVybi5jcmVhdGVQYXR0ZXJuKCJCLmsoKSIs
IE1FVEhPRCwgUkVGRVJFTkNFUywgRVhBQ1RfUlVMRSk7CisJCQlzZWFyY2gocGF0dGVybiwgU2Vh
cmNoRW5naW5lLmNyZWF0ZUphdmFTZWFyY2hTY29wZShuZXcgSUphdmFFbGVtZW50W10geyBwcm9q
ZWN0IH0sIElKYXZhU2VhcmNoU2NvcGUuQVBQTElDQVRJT05fTElCUkFSSUVTIHwgSUphdmFTZWFy
Y2hTY29wZS5TT1VSQ0VTKSwgdGhpcy5yZXN1bHRDb2xsZWN0b3IpOworCQkJYXNzZXJ0U2VhcmNo
UmVzdWx0cygiV3JvbmcgcmVzdWx0cyIsICIiLCB0aGlzLnJlc3VsdENvbGxlY3Rvcik7CisJCX0g
ZmluYWxseSB7CisJCQlkZWxldGVQcm9qZWN0KHByb2plY3QpOworCQl9CisJfQorCS8vIHNlYXJj
aCBmb3IgdGhlIG1ldGhvZCBuYW1lIHNob3VsZCBhbHNvIG5vdCByZXR1cm4gbWF0Y2hlcyBpZiBu
b3Qtb3ZlcnJpZGVuIGJlY2F1c2Ugb2YgcGFja2FnZS12aXNpYmxlCisJLy8gZXZlbiBpZiB0aGV5
IGFyZSBpbiBqYXJzCisJcHVibGljIHZvaWQgdGVzdEJ1ZzM1NzU0N2YoKSB0aHJvd3MgQ29yZUV4
Y2VwdGlvbiwgSU9FeGNlcHRpb24geworCQlJSmF2YVByb2plY3QgcHJvamVjdCA9IG51bGw7CisJ
CXRyeQorCQl7CisJCQlwcm9qZWN0ID0gY3JlYXRlSmF2YVByb2plY3QoIlAiLCBuZXcgU3RyaW5n
W10geyIifSwgbmV3IFN0cmluZ1tdIHsgIi9QL2xpYjM1NzU0Ny5qYXIiLCAiSkNMMTVfTElCIiB9
LCAiIiwgIjEuNSIpOworCQkJb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMudXRpbC5VdGlsLmNy
ZWF0ZUphcihuZXcgU3RyaW5nW10geworCQkJCQkicDIvQS5qYXZhIiwKKwkJCQkJInBhY2thZ2Ug
cDI7XG4iICsgCisJCQkJCSJwdWJsaWMgY2xhc3MgQXt9XG4iIH0sIAorCQkJCQlwcm9qZWN0Lmdl
dFByb2plY3QoKS5nZXRMb2NhdGlvbigpLmFwcGVuZCgibGliU3R1ZmYuamFyIikudG9PU1N0cmlu
ZygpLCAiMS41Iik7CisJCQkKKwkJCW9yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLnV0aWwuVXRp
bC5jcmVhdGVKYXIoCisJCQkJCW5ldyBTdHJpbmdbXSB7CisJCQkJCQkicDIvQi5qYXZhIiwKKwkJ
CQkJCSJwYWNrYWdlIHAyO1xuIiArCisJCQkJCQkiaW1wb3J0IHAyLio7XG4iICsKKwkJCQkJCSJw
dWJsaWMgY2xhc3MgQiBleHRlbmRzIEEge1xuIiArCisJCQkJCQkibG9uZyBrKCl7XG4iICsKKwkJ
CQkJCSJyZXR1cm4gMDtcbiIgKworCQkJCQkJIn1cbiIgKyAKKwkJCQkJCSJ9XG4ifSwKKwkJCQkJ
bnVsbCwKKwkJCQkJcHJvamVjdC5nZXRQcm9qZWN0KCkuZ2V0TG9jYXRpb24oKS5hcHBlbmQoImxp
YjM1NzU0Ny5qYXIiKS50b09TU3RyaW5nKCksCisJCQkJCW5ldyBTdHJpbmdbXSB7IHByb2plY3Qu
Z2V0UHJvamVjdCgpLmdldExvY2F0aW9uKCkuYXBwZW5kKCJsaWJTdHVmZi5qYXIiKS50b09TU3Ry
aW5nKCkgfSwKKwkJCQkJIjEuNSIpOworCQkJcmVmcmVzaChwcm9qZWN0KTsKKwkJCWNyZWF0ZUZv
bGRlcigiL1AvcDIiKTsKKwkJCWNyZWF0ZUZpbGUoIi9QL3AyL0EuamF2YSIsCisJCQkJCSJwYWNr
YWdlIHAyO1xuIiArCisJCQkJCSJwdWJsaWMgY2xhc3MgQSB7XG4iICsKKwkJCQkJImxvbmcgaygp
e1xuIiArCisJCQkJCSJyZXR1cm4gMDtcbiIgKworCQkJICAJCSJ9XG4iICsKKwkJCSAgCQkicHVi
bGljIGxvbmcgbSgpe1xuIisKKwkJCSAgCQkicmV0dXJuIG5ldyBBKCkuaygpO1xuIiArCisJCQkg
IAkJIn1cbiIrCisJCQkJCSJ9XG4iKTsKKwkJCXdhaXRVbnRpbEluZGV4ZXNSZWFkeSgpOworCQkJ
Ly8gc2VhcmNoCisJCQlTZWFyY2hQYXR0ZXJuIHBhdHRlcm4gPSBTZWFyY2hQYXR0ZXJuLmNyZWF0
ZVBhdHRlcm4oIkIuaygpIiwgTUVUSE9ELCBSRUZFUkVOQ0VTLCBFWEFDVF9SVUxFKTsKKwkJCXNl
YXJjaChwYXR0ZXJuLCBTZWFyY2hFbmdpbmUuY3JlYXRlSmF2YVNlYXJjaFNjb3BlKG5ldyBJSmF2
YUVsZW1lbnRbXSB7IHByb2plY3QgfSwgSUphdmFTZWFyY2hTY29wZS5BUFBMSUNBVElPTl9MSUJS
QVJJRVMgfCBJSmF2YVNlYXJjaFNjb3BlLlNPVVJDRVMpLCB0aGlzLnJlc3VsdENvbGxlY3Rvcik7
CisJCQlhc3NlcnRTZWFyY2hSZXN1bHRzKCJXcm9uZyByZXN1bHRzIiwgInAyL0EuamF2YSBsb25n
IHAyLkEubSgpIFtrKCldIEVYQUNUX01BVENIIiwgdGhpcy5yZXN1bHRDb2xsZWN0b3IpOworCQl9
IGZpbmFsbHkgeworCQkJZGVsZXRlUHJvamVjdChwcm9qZWN0KTsKKwkJfQorCX0KIH0KZGlmZiAt
LWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29yZS9zZWFyY2gvbWF0Y2hpbmcvTWV0aG9kTG9jYXRvci5qYXZhIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9tYXRj
aGluZy9NZXRob2RMb2NhdG9yLmphdmEKaW5kZXggOWI0ODkzOC4uYmMxZmE5MiAxMDA2NDQKLS0t
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b3JlL3NlYXJjaC9tYXRjaGluZy9NZXRob2RMb2NhdG9yLmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9tYXRj
aGluZy9NZXRob2RMb2NhdG9yLmphdmEKQEAgLTMxLDkgKzMxLDE3IEBACiAvL2V4dHJhIHJlZmVy
ZW5jZSBpbmZvCiBwdWJsaWMgY2hhcltdW11bXSBhbGxTdXBlckRlY2xhcmluZ1R5cGVOYW1lczsK
IAorLy8gVGhpcyBpcyBzZXQgb25seSBpZiBmb2N1cyBpcyBudWxsLiBJbiB0aGVzZSBjYXNlcwor
Ly8gaXQgd2lsbCBiZSBoYXJkIHRvIGRldGVybWluZSBpZiB0aGUgc3VwZXIgY2xhc3MgaXMgb2Yg
dGhlIHNhbWUgcGFja2FnZQorLy8gYXQgYSBsYXR0ZXIgcG9pbnQuIEhlbmNlLCB0aGlzIGFycmF5
IGlzIGNyZWF0ZWQgd2l0aCBhbGwgdGhlIHN1cGVyIGNsYXNzIAorLy8gbmFtZXMgb2YgdGhlIHNh
bWUgcGFja2FnZSBuYW1lIGFzIG9mIHRoZSBtYXRjaGluZyBjbGFzcyBuYW1lLgorLy8gU2VlIGh0
dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNTc1NDcKK3ByaXZh
dGUgY2hhcltdW11bXSBzYW1lUGtnU3VwZXJEZWNsYXJpbmdUeXBlTmFtZXM7CisKIHByaXZhdGUg
TWF0Y2hMb2NhdG9yIG1hdGNoTG9jYXRvcjsKIC8vbWV0aG9kIGRlY2xhcmF0aW9ucyB3aGljaCBw
YXJhbWV0ZXJzIHZlcmlmaWNhdGlvbiBmYWlsCiBwcml2YXRlIEhhc2hNYXAgbWV0aG9kRGVjbGFy
YXRpb25zV2l0aEludmFsaWRQYXJhbSA9IG5ldyBIYXNoTWFwKCk7CisKIAogcHVibGljIE1ldGhv
ZExvY2F0b3IoTWV0aG9kUGF0dGVybiBwYXR0ZXJuKSB7CiAJc3VwZXIocGF0dGVybik7CkBAIC03
NSwxNCArODMsMTYgQEAKIAkJc3RhcnQgPSBTeXN0ZW0uY3VycmVudFRpbWVNaWxsaXMoKTsKIAl9
CiAJdHJ5IHsKLQkJdGhpcy5hbGxTdXBlckRlY2xhcmluZ1R5cGVOYW1lcyA9CisJCVN1cGVyVHlw
ZU5hbWVzQ29sbGVjdG9yIG5hbWVzQ29sbGVjdG9yID0gCiAJCQluZXcgU3VwZXJUeXBlTmFtZXND
b2xsZWN0b3IoCiAJCQkJdGhpcy5wYXR0ZXJuLAogCQkJCXRoaXMucGF0dGVybi5kZWNsYXJpbmdT
aW1wbGVOYW1lLAogCQkJCXRoaXMucGF0dGVybi5kZWNsYXJpbmdRdWFsaWZpY2F0aW9uLAogCQkJ
CWxvY2F0b3IsCiAJCQkJdGhpcy5wYXR0ZXJuLmRlY2xhcmluZ1R5cGUsCi0JCQkJbG9jYXRvci5w
cm9ncmVzc01vbml0b3IpLmNvbGxlY3QoKTsKKwkJCQlsb2NhdG9yLnByb2dyZXNzTW9uaXRvcik7
CisJCXRoaXMuYWxsU3VwZXJEZWNsYXJpbmdUeXBlTmFtZXMgPSBuYW1lc0NvbGxlY3Rvci5jb2xs
ZWN0KCk7CisJCXRoaXMuc2FtZVBrZ1N1cGVyRGVjbGFyaW5nVHlwZU5hbWVzID0gbmFtZXNDb2xs
ZWN0b3IuZ2V0U2FtZVBhY2thZ2VTdXBlclR5cGVOYW1lcygpOwogCQl0aGlzLm1hdGNoTG9jYXRv
ciA9IGxvY2F0b3I7CQogCX0gY2F0Y2ggKEphdmFNb2RlbEV4Y2VwdGlvbiBlKSB7CiAJCS8vIGlu
YWNjdXJhdGUgbWF0Y2hlcyB3aWxsIGJlIGZvdW5kCkBAIC0xMDksNyArMTE5LDkgQEAKICAqIHRo
aXMgbWVzc2FnZSBzZW5kIG9yIG5vdC4KICAqLwogcHJvdGVjdGVkIGJvb2xlYW4gaXNWaXJ0dWFs
SW52b2tlKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBNZXNzYWdlU2VuZCBtZXNzYWdlU2VuZCkgewot
CXJldHVybiAhbWV0aG9kLmlzU3RhdGljKCkgJiYgIW1ldGhvZC5pc1ByaXZhdGUoKSAmJiAhbWVz
c2FnZVNlbmQuaXNTdXBlckFjY2VzcygpOworCQlyZXR1cm4gIW1ldGhvZC5pc1N0YXRpYygpICYm
ICFtZXRob2QuaXNQcml2YXRlKCkgJiYgIW1lc3NhZ2VTZW5kLmlzU3VwZXJBY2Nlc3MoKQorCQkJ
CSYmICEobWV0aG9kLmlzRGVmYXVsdCgpICYmIHRoaXMucGF0dGVybi5mb2N1cyAhPSBudWxsICYm
IAorCQkJCSFDaGFyT3BlcmF0aW9uLmVxdWFscyh0aGlzLnBhdHRlcm4uZGVjbGFyaW5nUXVhbGlm
aWNhdGlvbiwgbWV0aG9kLmRlY2xhcmluZ0NsYXNzLnF1YWxpZmllZFBhY2thZ2VOYW1lKCkpKTsK
IH0KIHB1YmxpYyBpbnQgbWF0Y2goQVNUTm9kZSBub2RlLCBNYXRjaGluZ05vZGVTZXQgbm9kZVNl
dCkgewogCWludCBkZWNsYXJhdGlvbnNMZXZlbCA9IElNUE9TU0lCTEVfTUFUQ0g7CkBAIC02Njks
OSArNjgxLDEwIEBACiAJCQlpZiAobWV0aG9kLmRlY2xhcmluZ0NsYXNzID09IG51bGwgfHwgdGhp
cy5hbGxTdXBlckRlY2xhcmluZ1R5cGVOYW1lcyA9PSBudWxsKSB7CiAJCQkJZGVjbGFyaW5nTGV2
ZWwgPSBJTkFDQ1VSQVRFX01BVENIOwogCQkJfSBlbHNlIHsKLQkJCQlpZiAocmVzb2x2ZUxldmVs
QXNTdXBlckludm9jYXRpb24obWV0aG9kUmVjZWl2ZXJUeXBlLCBtZXRob2QucGFyYW1ldGVycywg
dHJ1ZSkpIHsKLQkJCQkJZGVjbGFyaW5nTGV2ZWwgPSBtZXRob2RMZXZlbCAvLyBzaW5jZSB0aGlz
IGlzIGFuIEFDQ1VSQVRFX01BVENIIHNvIHJldHVybiB0aGUgcG9zc2libHkgd2Vha2VyIG1hdGNo
Ci0JCQkJCQl8IFNVUEVSX0lOVk9DQVRJT05fRkxBVk9SOyAvLyB0aGlzIGlzIGFuIG92ZXJyaWRk
ZW4gbWV0aG9kID0+IGFkZCBmbGF2b3IgdG8gcmV0dXJuZWQgbGV2ZWwKKwkJCQljaGFyW11bXVtd
IHN1cGVyVHlwZU5hbWVzID0gKG1ldGhvZC5pc0RlZmF1bHQoKSAmJiB0aGlzLnBhdHRlcm4uZm9j
dXMgPT0gbnVsbCkgPyB0aGlzLnNhbWVQa2dTdXBlckRlY2xhcmluZ1R5cGVOYW1lczogdGhpcy5h
bGxTdXBlckRlY2xhcmluZ1R5cGVOYW1lczsKKwkJCQlpZiAoc3VwZXJUeXBlTmFtZXMgIT0gbnVs
bCAmJiByZXNvbHZlTGV2ZWxBc1N1cGVySW52b2NhdGlvbihtZXRob2RSZWNlaXZlclR5cGUsIG1l
dGhvZC5wYXJhbWV0ZXJzLCBzdXBlclR5cGVOYW1lcywgdHJ1ZSkpIHsKKwkJCQkJCWRlY2xhcmlu
Z0xldmVsID0gbWV0aG9kTGV2ZWwgLy8gc2luY2UgdGhpcyBpcyBhbiBBQ0NVUkFURV9NQVRDSCBz
byByZXR1cm4gdGhlIHBvc3NpYmx5IHdlYWtlciBtYXRjaAorCQkJCQkJCXwgU1VQRVJfSU5WT0NB
VElPTl9GTEFWT1I7IC8vIHRoaXMgaXMgYW4gb3ZlcnJpZGRlbiBtZXRob2QgPT4gYWRkIGZsYXZv
ciB0byByZXR1cm5lZCBsZXZlbAogCQkJCX0KIAkJCX0KIAkJfQpAQCAtNzQ1LDEwICs3NTgsMTAg
QEAKICAqIFJldHVybiB3aGV0aGVyIHRoZSBnaXZlbiB0eXBlIGJpbmRpbmcgb3Igb25lIG9mIGl0
cyBwb3NzaWJsZSBzdXBlciBpbnRlcmZhY2VzCiAgKiBtYXRjaGVzIGEgdHlwZSBpbiB0aGUgZGVj
bGFyaW5nIHR5cGUgbmFtZXMgaGllcmFyY2h5LgogICovCi1wcml2YXRlIGJvb2xlYW4gcmVzb2x2
ZUxldmVsQXNTdXBlckludm9jYXRpb24oUmVmZXJlbmNlQmluZGluZyB0eXBlLCBUeXBlQmluZGlu
Z1tdIGFyZ3VtZW50VHlwZXMsIGJvb2xlYW4gbWV0aG9kQWxyZWFkeVZlcmlmaWVkKSB7Citwcml2
YXRlIGJvb2xlYW4gcmVzb2x2ZUxldmVsQXNTdXBlckludm9jYXRpb24oUmVmZXJlbmNlQmluZGlu
ZyB0eXBlLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMsIGNoYXJbXVtdW10gc3VwZXJUeXBl
TmFtZXMsIGJvb2xlYW4gbWV0aG9kQWxyZWFkeVZlcmlmaWVkKSB7CiAJY2hhcltdW10gY29tcG91
bmROYW1lID0gdHlwZS5jb21wb3VuZE5hbWU7Ci0JZm9yIChpbnQgaSA9IDAsIG1heCA9IHRoaXMu
YWxsU3VwZXJEZWNsYXJpbmdUeXBlTmFtZXMubGVuZ3RoOyBpIDwgbWF4OyBpKyspIHsKLQkJaWYg
KENoYXJPcGVyYXRpb24uZXF1YWxzKHRoaXMuYWxsU3VwZXJEZWNsYXJpbmdUeXBlTmFtZXNbaV0s
IGNvbXBvdW5kTmFtZSkpIHsKKwlmb3IgKGludCBpID0gMCwgbWF4ID0gc3VwZXJUeXBlTmFtZXMu
bGVuZ3RoOyBpIDwgbWF4OyBpKyspIHsKKwkJaWYgKENoYXJPcGVyYXRpb24uZXF1YWxzKHN1cGVy
VHlwZU5hbWVzW2ldLCBjb21wb3VuZE5hbWUpKSB7CiAJCQkvLyBuZWVkIHRvIHZlcmlmeSBpZiB0
aGUgdHlwZSBpbXBsZW1lbnRzIHRoZSBwYXR0ZXJuIG1ldGhvZAogCQkJaWYgKG1ldGhvZEFscmVh
ZHlWZXJpZmllZCkgcmV0dXJuIHRydWU7IC8vIGFscmVhZHkgdmVyaWZpZWQgYmVmb3JlIGVudGVy
IGludG8gdGhpcyBtZXRob2QgKHNlZSByZXNvbHZlTGV2ZWwoTWVzc2FnZVNlbmQpKQogCQkJTWV0
aG9kQmluZGluZ1tdIG1ldGhvZHMgPSB0eXBlLmdldE1ldGhvZHModGhpcy5wYXR0ZXJuLnNlbGVj
dG9yKTsKQEAgLTc4MCw3ICs3OTMsNyBAQAogCQlSZWZlcmVuY2VCaW5kaW5nW10gaW50ZXJmYWNl
cyA9IHR5cGUuc3VwZXJJbnRlcmZhY2VzKCk7CiAJCWlmIChpbnRlcmZhY2VzID09IG51bGwpIHJl
dHVybiBmYWxzZTsKIAkJZm9yIChpbnQgaSA9IDA7IGkgPCBpbnRlcmZhY2VzLmxlbmd0aDsgaSsr
KSB7Ci0JCQlpZiAocmVzb2x2ZUxldmVsQXNTdXBlckludm9jYXRpb24oaW50ZXJmYWNlc1tpXSwg
YXJndW1lbnRUeXBlcywgZmFsc2UpKSB7CisJCQlpZiAocmVzb2x2ZUxldmVsQXNTdXBlckludm9j
YXRpb24oaW50ZXJmYWNlc1tpXSwgYXJndW1lbnRUeXBlcywgc3VwZXJUeXBlTmFtZXMsIGZhbHNl
KSkgewogCQkJCXJldHVybiB0cnVlOwogCQkJfQogCQl9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNoL21h
dGNoaW5nL1N1cGVyVHlwZU5hbWVzQ29sbGVjdG9yLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNoL21hdGNoaW5nL1N1
cGVyVHlwZU5hbWVzQ29sbGVjdG9yLmphdmEKaW5kZXggOGVhZTg3MC4uN2ZjNmYxZiAxMDA2NDQK
LS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb3JlL3NlYXJjaC9tYXRjaGluZy9TdXBlclR5cGVOYW1lc0NvbGxlY3Rvci5qYXZhCisrKyBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29y
ZS9zZWFyY2gvbWF0Y2hpbmcvU3VwZXJUeXBlTmFtZXNDb2xsZWN0b3IuamF2YQpAQCAtMSw1ICsx
LDUgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIw
MDggSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIw
MTIgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBU
aGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBh
dmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYx
LjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxh
YmxlIGF0CkBAIC0xMyw3ICsxMyw2IEBACiBpbXBvcnQgb3JnLmVjbGlwc2UuY29yZS5ydW50aW1l
LklQcm9ncmVzc01vbml0b3I7CiBpbXBvcnQgb3JnLmVjbGlwc2UuY29yZS5ydW50aW1lLlN1YlBy
b2dyZXNzTW9uaXRvcjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS4qOwotaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5jb3JlLklDb21waWxhdGlvblVuaXQ7CiBpbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmNvcmUuY29tcGlsZXIuQ2hhck9wZXJhdGlvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
Y29yZS5zZWFyY2guKjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
QVNUVmlzaXRvcjsKQEAgLTQ1LDE5ICs0NCwxOSBAQAogCQlwdWJsaWMgYm9vbGVhbiB2aXNpdChU
eXBlRGVjbGFyYXRpb24gdHlwZURlY2xhcmF0aW9uLCBCbG9ja1Njb3BlIHNjb3BlKSB7CiAJCQlS
ZWZlcmVuY2VCaW5kaW5nIGJpbmRpbmcgPSB0eXBlRGVjbGFyYXRpb24uYmluZGluZzsKIAkJCWlm
IChTdXBlclR5cGVOYW1lc0NvbGxlY3Rvci50aGlzLm1hdGNoZXMoYmluZGluZykpCi0JCQkJY29s
bGVjdFN1cGVyVHlwZU5hbWVzKGJpbmRpbmcpOworCQkJCWNvbGxlY3RTdXBlclR5cGVOYW1lcyhi
aW5kaW5nLCBiaW5kaW5nLmNvbXBvdW5kTmFtZSk7CiAJCQlyZXR1cm4gdHJ1ZTsKIAkJfQogCQlw
dWJsaWMgYm9vbGVhbiB2aXNpdChUeXBlRGVjbGFyYXRpb24gdHlwZURlY2xhcmF0aW9uLCBDb21w
aWxhdGlvblVuaXRTY29wZSBzY29wZSkgewogCQkJUmVmZXJlbmNlQmluZGluZyBiaW5kaW5nID0g
dHlwZURlY2xhcmF0aW9uLmJpbmRpbmc7CiAJCQlpZiAoU3VwZXJUeXBlTmFtZXNDb2xsZWN0b3Iu
dGhpcy5tYXRjaGVzKGJpbmRpbmcpKQotCQkJCWNvbGxlY3RTdXBlclR5cGVOYW1lcyhiaW5kaW5n
KTsKKwkJCQljb2xsZWN0U3VwZXJUeXBlTmFtZXMoYmluZGluZywgYmluZGluZy5jb21wb3VuZE5h
bWUpOwogCQkJcmV0dXJuIHRydWU7CiAJCX0KIAkJcHVibGljIGJvb2xlYW4gdmlzaXQoVHlwZURl
Y2xhcmF0aW9uIG1lbWJlclR5cGVEZWNsYXJhdGlvbiwgQ2xhc3NTY29wZSBzY29wZSkgewogCQkJ
UmVmZXJlbmNlQmluZGluZyBiaW5kaW5nID0gbWVtYmVyVHlwZURlY2xhcmF0aW9uLmJpbmRpbmc7
CiAJCQlpZiAoU3VwZXJUeXBlTmFtZXNDb2xsZWN0b3IudGhpcy5tYXRjaGVzKGJpbmRpbmcpKQot
CQkJCWNvbGxlY3RTdXBlclR5cGVOYW1lcyhiaW5kaW5nKTsKKwkJCQljb2xsZWN0U3VwZXJUeXBl
TmFtZXMoYmluZGluZywgYmluZGluZy5jb21wb3VuZE5hbWUpOwogCQkJcmV0dXJuIHRydWU7CiAJ
CX0KIAkJcHVibGljIGJvb2xlYW4gdmlzaXQoRmllbGREZWNsYXJhdGlvbiBmaWVsZERlY2xhcmF0
aW9uLCBNZXRob2RTY29wZSBzY29wZSkgewpAQCAtODIsNiArODEsOSBAQAogY2hhcltdW11bXSBy
ZXN1bHQ7CiBpbnQgcmVzdWx0SW5kZXg7CiAKK2NoYXJbXVtdW10gc2FtZVBhY2thZ2VTdXBlclR5
cGVOYW1lOyAvLyBzZXQgb25seSBpZiBmb2N1cyBpcyBudWxsCitpbnQgc2FtZVBhY2thZ2VJbmRl
eDsKKwogcHVibGljIFN1cGVyVHlwZU5hbWVzQ29sbGVjdG9yKAogCVNlYXJjaFBhdHRlcm4gcGF0
dGVybiwKIAljaGFyW10gdHlwZVNpbXBsZU5hbWUsCkBAIC05OCw2ICsxMDAsMjEgQEAKIAl0aGlz
LnByb2dyZXNzTW9uaXRvciA9IHByb2dyZXNzTW9uaXRvcjsKIH0KIAorcHJpdmF0ZSBib29sZWFu
IGFkZElmU2FtZVBhY2thZ2UoY2hhcltdW10gY29tcG91bmROYW1lLCBjaGFyW11bXSBwYXRoKSB7
CisJaWYgKGNvbXBvdW5kTmFtZS5sZW5ndGggIT0gcGF0aC5sZW5ndGgpIHJldHVybiBmYWxzZTsK
KwlpbnQgcmVzdWx0TGVuZ3RoID0gdGhpcy5zYW1lUGFja2FnZVN1cGVyVHlwZU5hbWUubGVuZ3Ro
OworCWZvciAoaW50IGkgPSAwOyBpIDwgcmVzdWx0TGVuZ3RoOyBpKyspCisJCWlmIChDaGFyT3Bl
cmF0aW9uLmVxdWFscyh0aGlzLnNhbWVQYWNrYWdlU3VwZXJUeXBlTmFtZVtpXSwgY29tcG91bmRO
YW1lKSkgcmV0dXJuIGZhbHNlOyAvLyBhbHJlYWR5IGtub3duCisJCisJZm9yIChpbnQgaSA9IDAs
IGxlbmd0aCA9IGNvbXBvdW5kTmFtZS5sZW5ndGggLSAxOyBpIDwgbGVuZ3RoOyBpICsrKSB7CisJ
CWlmICghQ2hhck9wZXJhdGlvbi5lcXVhbHMoY29tcG91bmROYW1lW2ldLCBwYXRoW2ldKSkgcmV0
dXJuIGZhbHNlOworCX0KKwlpZiAocmVzdWx0TGVuZ3RoID09IHRoaXMuc2FtZVBhY2thZ2VJbmRl
eCkKKwkJU3lzdGVtLmFycmF5Y29weSh0aGlzLnNhbWVQYWNrYWdlU3VwZXJUeXBlTmFtZSwgMCwg
dGhpcy5zYW1lUGFja2FnZVN1cGVyVHlwZU5hbWUgPSBuZXcgY2hhcltyZXN1bHRMZW5ndGgqMl1b
XVtdLCAwLCByZXN1bHRMZW5ndGgpOworCXRoaXMuc2FtZVBhY2thZ2VTdXBlclR5cGVOYW1lW3Ro
aXMuc2FtZVBhY2thZ2VJbmRleCsrXSA9IGNvbXBvdW5kTmFtZTsKKwlyZXR1cm4gdHJ1ZTsKK30K
KwogcHJvdGVjdGVkIHZvaWQgYWRkVG9SZXN1bHQoY2hhcltdW10gY29tcG91bmROYW1lKSB7CiAJ
aW50IHJlc3VsdExlbmd0aCA9IHRoaXMucmVzdWx0Lmxlbmd0aDsKIAlmb3IgKGludCBpID0gMDsg
aSA8IHJlc3VsdExlbmd0aDsgaSsrKQpAQCAtMTA3LDYgKzEyNCw3IEBACiAJCVN5c3RlbS5hcnJh
eWNvcHkodGhpcy5yZXN1bHQsIDAsIHRoaXMucmVzdWx0ID0gbmV3IGNoYXJbcmVzdWx0TGVuZ3Ro
KjJdW11bXSwgMCwgcmVzdWx0TGVuZ3RoKTsKIAl0aGlzLnJlc3VsdFt0aGlzLnJlc3VsdEluZGV4
KytdID0gY29tcG91bmROYW1lOwogfQorCiAvKgogICogUGFyc2UgdGhlIGdpdmVuIGNvbXBpYXRp
b24gdW5pdCBhbmQgYnVpbGQgaXRzIHR5cGUgYmluZGluZ3MuCiAgKi8KQEAgLTE0MSw3ICsxNTks
NyBAQAogCQkJaWYgKHRoaXMudHlwZS5pc0JpbmFyeSgpKSB7CiAJCQkJQmluYXJ5VHlwZUJpbmRp
bmcgYmluZGluZyA9IHRoaXMubG9jYXRvci5jYWNoZUJpbmFyeVR5cGUodGhpcy50eXBlLCBudWxs
KTsKIAkJCQlpZiAoYmluZGluZyAhPSBudWxsKQotCQkJCQljb2xsZWN0U3VwZXJUeXBlTmFtZXMo
YmluZGluZyk7CisJCQkJCWNvbGxlY3RTdXBlclR5cGVOYW1lcyhiaW5kaW5nLCBudWxsKTsKIAkJ
CX0gZWxzZSB7CiAJCQkJSUNvbXBpbGF0aW9uVW5pdCB1bml0ID0gdGhpcy50eXBlLmdldENvbXBp
bGF0aW9uVW5pdCgpOwogCQkJCVNvdXJjZVR5cGUgc291cmNlVHlwZSA9IChTb3VyY2VUeXBlKSB0
aGlzLnR5cGU7CkBAIC0xNTAsNyArMTY4LDcgQEAKIAkJCQlpZiAocGFyc2VkVW5pdCAhPSBudWxs
KSB7CiAJCQkJCVR5cGVEZWNsYXJhdGlvbiB0eXBlRGVjbCA9IG5ldyBBU1ROb2RlRmluZGVyKHBh
cnNlZFVuaXQpLmZpbmRUeXBlKHRoaXMudHlwZSk7CiAJCQkJCWlmICh0eXBlRGVjbCAhPSBudWxs
ICYmIHR5cGVEZWNsLmJpbmRpbmcgIT0gbnVsbCkKLQkJCQkJCWNvbGxlY3RTdXBlclR5cGVOYW1l
cyh0eXBlRGVjbC5iaW5kaW5nKTsKKwkJCQkJCWNvbGxlY3RTdXBlclR5cGVOYW1lcyh0eXBlRGVj
bC5iaW5kaW5nLCBudWxsKTsKIAkJCQl9CiAJCQl9CiAJCX0gY2F0Y2ggKEFib3J0Q29tcGlsYXRp
b24gZSkgewpAQCAtMTcxLDYgKzE4OSw3IEBACiAJVXRpbC5zb3J0KHBhdGhzKTsgLy8gc29ydCBi
eSBwcm9qZWN0cwogCUphdmFQcm9qZWN0IHByZXZpb3VzUHJvamVjdCA9IG51bGw7CiAJdGhpcy5y
ZXN1bHQgPSBuZXcgY2hhclsxXVtdW107CisJdGhpcy5zYW1lUGFja2FnZVN1cGVyVHlwZU5hbWUg
PSBuZXcgY2hhclsxXVtdW107CiAJdGhpcy5yZXN1bHRJbmRleCA9IDA7CiAJZm9yIChpbnQgaSA9
IDAsIGxlbmd0aCA9IHBhdGhzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAJCXRyeSB7CkBA
IC0xOTEsNyArMjEwLDcgQEAKIAkJCQlJQ2xhc3NGaWxlIGNsYXNzRmlsZSA9IChJQ2xhc3NGaWxl
KSBvcGVuYWJsZTsKIAkJCQlCaW5hcnlUeXBlQmluZGluZyBiaW5kaW5nID0gdGhpcy5sb2NhdG9y
LmNhY2hlQmluYXJ5VHlwZShjbGFzc0ZpbGUuZ2V0VHlwZSgpLCBudWxsKTsKIAkJCQlpZiAobWF0
Y2hlcyhiaW5kaW5nKSkKLQkJCQkJY29sbGVjdFN1cGVyVHlwZU5hbWVzKGJpbmRpbmcpOworCQkJ
CQljb2xsZWN0U3VwZXJUeXBlTmFtZXMoYmluZGluZywgYmluZGluZy5jb21wb3VuZE5hbWUpOwog
CQkJfQogCQl9IGNhdGNoIChBYm9ydENvbXBpbGF0aW9uIGUpIHsKIAkJCS8vIGlnbm9yZTogY29u
dGludWUgd2l0aCBuZXh0IGVsZW1lbnQKQEAgLTIwNiwxMSArMjI1LDE1IEBACiAvKioKICAqIENv
bGxlY3RzIHRoZSBuYW1lcyBvZiBhbGwgdGhlIHN1cGVydHlwZXMgb2YgdGhlIGdpdmVuIHR5cGUu
CiAgKi8KLXByb3RlY3RlZCB2b2lkIGNvbGxlY3RTdXBlclR5cGVOYW1lcyhSZWZlcmVuY2VCaW5k
aW5nIGJpbmRpbmcpIHsKK3Byb3RlY3RlZCB2b2lkIGNvbGxlY3RTdXBlclR5cGVOYW1lcyhSZWZl
cmVuY2VCaW5kaW5nIGJpbmRpbmcsIGNoYXJbXVtdIHBhdGgpIHsKIAlSZWZlcmVuY2VCaW5kaW5n
IHN1cGVyY2xhc3MgPSBiaW5kaW5nLnN1cGVyY2xhc3MoKTsKKwlpZiAocGF0aCAhPSBudWxsKSB7
CisJCWJvb2xlYW4gc2FtZVBhY2thZ2UgPSBhZGRJZlNhbWVQYWNrYWdlKHN1cGVyY2xhc3MuY29t
cG91bmROYW1lLCBwYXRoKTsKKwkJaWYgKCFzYW1lUGFja2FnZSkgcGF0aCA9IG51bGw7CisJfQog
CWlmIChzdXBlcmNsYXNzICE9IG51bGwpIHsKIAkJYWRkVG9SZXN1bHQoc3VwZXJjbGFzcy5jb21w
b3VuZE5hbWUpOwotCQljb2xsZWN0U3VwZXJUeXBlTmFtZXMoc3VwZXJjbGFzcyk7CisJCWNvbGxl
Y3RTdXBlclR5cGVOYW1lcyhzdXBlcmNsYXNzLCBudWxsKTsKIAl9CiAKIAlSZWZlcmVuY2VCaW5k
aW5nW10gaW50ZXJmYWNlcyA9IGJpbmRpbmcuc3VwZXJJbnRlcmZhY2VzKCk7CkBAIC0yMTgsNyAr
MjQxLDcgQEAKIAkJZm9yIChpbnQgaSA9IDA7IGkgPCBpbnRlcmZhY2VzLmxlbmd0aDsgaSsrKSB7
CiAJCQlSZWZlcmVuY2VCaW5kaW5nIGludGVyZmFjZUJpbmRpbmcgPSBpbnRlcmZhY2VzW2ldOwog
CQkJYWRkVG9SZXN1bHQoaW50ZXJmYWNlQmluZGluZy5jb21wb3VuZE5hbWUpOwotCQkJY29sbGVj
dFN1cGVyVHlwZU5hbWVzKGludGVyZmFjZUJpbmRpbmcpOworCQkJY29sbGVjdFN1cGVyVHlwZU5h
bWVzKGludGVyZmFjZUJpbmRpbmcsIG51bGwpOwogCQl9CiAJfQogfQpAQCAtMjU0LDYgKzI3Nyw5
IEBACiAJCXRoaXMucHJvZ3Jlc3NNb25pdG9yID09IG51bGwgPyBudWxsIDogbmV3IFN1YlByb2dy
ZXNzTW9uaXRvcih0aGlzLnByb2dyZXNzTW9uaXRvciwgMTAwKSk7CiAJcmV0dXJuIHBhdGhDb2xs
ZWN0b3IuZ2V0UGF0aHMoKTsKIH0KK3B1YmxpYyBjaGFyW11bXVtdIGdldFNhbWVQYWNrYWdlU3Vw
ZXJUeXBlTmFtZXMoKSB7CisJcmV0dXJuIHRoaXMuc2FtZVBhY2thZ2VTdXBlclR5cGVOYW1lOwor
fQogcHJvdGVjdGVkIGJvb2xlYW4gbWF0Y2hlcyhjaGFyW11bXSBjb21wb3VuZE5hbWUpIHsKIAlp
bnQgbGVuZ3RoID0gY29tcG91bmROYW1lLmxlbmd0aDsKIAlpZiAobGVuZ3RoID09IDApIHJldHVy
biBmYWxzZTs=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>214284</attachid>
            <date>2012-04-20 01:21:00 -0400</date>
            <delta_ts>2012-04-20 03:58:02 -0400</delta_ts>
            <desc>Updated patch</desc>
            <filename>patch.txt</filename>
            <type>text/plain</type>
            <size>20072</size>
            <attacher name="Satyam Kandula">satyam.kandula</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9tb2RlbC9KYXZhU2VhcmNoQnVnc1Rlc3RzMi5qYXZhIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rl
c3RzL21vZGVsL0phdmFTZWFyY2hCdWdzVGVzdHMyLmphdmEKaW5kZXggMDA1MmY3YS4uZDI4MTVi
YSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21vZGVsL0phdmFTZWFyY2hCdWdzVGVzdHMyLmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9j
b3JlL3Rlc3RzL21vZGVsL0phdmFTZWFyY2hCdWdzVGVzdHMyLmphdmEKQEAgLTM3LDcgKzM3LDcg
QEAKIAl9CiAJCiAJc3RhdGljIHsKLQkJLy9URVNUU19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7InRl
c3RCdWcxMjM4MzYifTsKKwkJLy9URVNUU19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7InRlc3RCdWcz
NTc1NDdmIn07CiAJfQogCiAJcHVibGljIHN0YXRpYyBUZXN0IHN1aXRlKCkgewpAQCAtNDgxLDQg
KzQ4MSwyNTAgQEAKIAkJCWRlbGV0ZVByb2plY3QoIlAiKTsKIAkJfQogCX0KKwkKKwkvKioKKwkg
KiBAYnVnIDM1NzU0NzogW3NlYXJjaF0gU2VhcmNoIGZvciBtZXRob2QgcmVmZXJlbmNlcyBpcyBy
ZXR1cm5pbmcgbWV0aG9kcyBhcyBvdmVycmlkZW4gZXZlbiBpZiB0aGUgc3VwZXJjbGFzcydzIG1l
dGhvZCBpcyBvbmx5IHBhY2thZ2UtdmlzaWJsZQorCSAqIEB0ZXN0IFNlYXJjaCBmb3IgYSBub24t
b3ZlcnJpZGVuIG1ldGhvZCBiZWNhdXNlIG9mIHBhY2thZ2UgdmlzaWJpbGl0eSBzaG91bGQgbm90
IGJlIGZvdW5kCisJICogQHNlZSAiaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19i
dWcuY2dpP2lkPTM1NzU0NyIKKwkgKi8KKwlwdWJsaWMgdm9pZCB0ZXN0QnVnMzU3NTQ3YSgpIHRo
cm93cyBDb3JlRXhjZXB0aW9uIHsKKwkJSUphdmFQcm9qZWN0IHByb2plY3QgPSBudWxsOworCQl0
cnkKKwkJeworCQkJcHJvamVjdCA9IGNyZWF0ZUphdmFQcm9qZWN0KCJQIik7CisJCQljcmVhdGVG
b2xkZXIoIi9QL3AxIik7CisJCQljcmVhdGVGaWxlKCIvUC9wMS9CLmphdmEiLAorCQkJCQkicGFj
a2FnZSBwMTtcbiIgKworCQkJCQkiaW1wb3J0IHAyLio7XG4iICsKKwkJCQkJInB1YmxpYyBjbGFz
cyBCIGV4dGVuZHMgQSB7XG4iICsKKwkJCQkJImxvbmcgaygpe1xuIiArCisJCQkJCSJyZXR1cm4g
MDtcbiIgKworCQkJICAJCSJ9XG4iICsKKwkJCQkJIn1cbiIpOworCQkJY3JlYXRlRm9sZGVyKCIv
UC9wMiIpOworCQkJY3JlYXRlRmlsZSgiL1AvcDIvQS5qYXZhIiwKKwkJCQkJInBhY2thZ2UgcDI7
XG4iICsKKwkJCQkJInB1YmxpYyBjbGFzcyBBIHtcbiIgKworCQkJCQkibG9uZyBrKCl7XG4iICsK
KwkJCQkJInJldHVybiAwO1xuIiArCisJCQkgIAkJIn1cbiIgKworCQkJICAJCSJwdWJsaWMgbG9u
ZyBtKCl7XG4iKworCQkJICAJCSJyZXR1cm4gbmV3IEEoKS5rKCk7XG4iICsKKwkJCSAgCQkifVxu
IisKKwkJCQkJIn1cbiIpOworCQkJSVR5cGUgdHlwZSA9IGdldENvbXBpbGF0aW9uVW5pdCgiL1Av
cDEvQi5qYXZhIikuZ2V0VHlwZSgiQiIpOworCQkJSU1ldGhvZCBtZXRob2QgPSB0eXBlLmdldE1l
dGhvZCgiayIsIG5ldyBTdHJpbmdbXXt9KTsKKwkJCXNlYXJjaChtZXRob2QsIFJFRkVSRU5DRVMs
IEVYQUNUX1JVTEUsIFNlYXJjaEVuZ2luZS5jcmVhdGVXb3Jrc3BhY2VTY29wZSgpLCB0aGlzLnJl
c3VsdENvbGxlY3Rvcik7CisJCQlhc3NlcnRTZWFyY2hSZXN1bHRzKCJTaG91bGQgbm90IGdldCBh
bnkgcmVzdWx0cyIsICIiLCB0aGlzLnJlc3VsdENvbGxlY3Rvcik7CisJCX0gZmluYWxseSB7CisJ
CQlkZWxldGVQcm9qZWN0KHByb2plY3QpOworCQl9CisJfQorCQorCS8vIHNlYXJjaCBmb3IgdGhl
IG1ldGhvZCBuYW1lIHNob3VsZCBhbHNvIG5vdCByZXR1cm4gbWF0Y2hlcyBpZiBub3Qtb3ZlcnJp
ZGVuIGJlY2F1c2Ugb2YgcGFja2FnZS12aXNpYmxlCisJcHVibGljIHZvaWQgdGVzdEJ1ZzM1NzU0
N2IoKSB0aHJvd3MgQ29yZUV4Y2VwdGlvbiB7CisJCUlKYXZhUHJvamVjdCBwcm9qZWN0ID0gbnVs
bDsKKwkJdHJ5CisJCXsKKwkJCXByb2plY3QgPSBjcmVhdGVKYXZhUHJvamVjdCgiUCIpOworCQkJ
Y3JlYXRlRm9sZGVyKCIvUC9wMSIpOworCQkJY3JlYXRlRmlsZSgiL1AvcDEvQi5qYXZhIiwKKwkJ
CQkJInBhY2thZ2UgcDE7XG4iICsKKwkJCQkJImltcG9ydCBwMi4qO1xuIiArCisJCQkJCSJwdWJs
aWMgY2xhc3MgQiBleHRlbmRzIEEge1xuIiArCisJCQkJCSJsb25nIGsoKXtcbiIgKworCQkJCQki
cmV0dXJuIDA7XG4iICsKKwkJCSAgCQkifVxuIiArCisJCQkJCSJ9XG4iKTsKKwkJCWNyZWF0ZUZv
bGRlcigiL1AvcDIiKTsKKwkJCWNyZWF0ZUZpbGUoIi9QL3AyL0EuamF2YSIsCisJCQkJCSJwYWNr
YWdlIHAyO1xuIiArCisJCQkJCSJwdWJsaWMgY2xhc3MgQSB7XG4iICsKKwkJCQkJImxvbmcgaygp
e1xuIiArCisJCQkJCSJyZXR1cm4gMDtcbiIgKworCQkJICAJCSJ9XG4iICsKKwkJCSAgCQkicHVi
bGljIGxvbmcgbSgpe1xuIisKKwkJCSAgCQkicmV0dXJuIG5ldyBBKCkuaygpO1xuIiArCisJCQkg
IAkJIn1cbiIrCisJCQkJCSJ9XG4iKTsKKwkJCXdhaXRVbnRpbEluZGV4ZXNSZWFkeSgpOworCQkJ
Ly8gc2VhcmNoCisJCQlTZWFyY2hQYXR0ZXJuIHBhdHRlcm4gPSBTZWFyY2hQYXR0ZXJuLmNyZWF0
ZVBhdHRlcm4oInAqQi5rKCkiLCBNRVRIT0QsIFJFRkVSRU5DRVMsIEVYQUNUX1JVTEUpOworCQkJ
c2VhcmNoKHBhdHRlcm4sIFNlYXJjaEVuZ2luZS5jcmVhdGVKYXZhU2VhcmNoU2NvcGUobmV3IElK
YXZhRWxlbWVudFtdIHsgcHJvamVjdCB9KSwgdGhpcy5yZXN1bHRDb2xsZWN0b3IpOworCQkJYXNz
ZXJ0U2VhcmNoUmVzdWx0cygiU2hvdWxkIG5vdCBnZXQgYW55IHJlc3VsdHMiLCAiIiwgdGhpcy5y
ZXN1bHRDb2xsZWN0b3IpOworCQl9IGZpbmFsbHkgeworCQkJZGVsZXRlUHJvamVjdChwcm9qZWN0
KTsKKwkJfQorCX0KKwkKKwkvLyBzZWFyY2ggZm9yIHRoZSBtZXRob2QgbmFtZSBzaG91bGQgcmV0
dXJuIHRoZSBtYXRjaCBpZiBzYW1lIHBhY2thZ2UgCisJcHVibGljIHZvaWQgdGVzdEJ1ZzM1NzU0
N2MoKSB0aHJvd3MgQ29yZUV4Y2VwdGlvbiB7CisJCUlKYXZhUHJvamVjdCBwcm9qZWN0ID0gbnVs
bDsKKwkJdHJ5CisJCXsKKwkJCXByb2plY3QgPSBjcmVhdGVKYXZhUHJvamVjdCgiUCIpOworCQkJ
Y3JlYXRlRm9sZGVyKCIvUC9wMiIpOworCQkJY3JlYXRlRmlsZSgiL1AvcDIvQi5qYXZhIiwKKwkJ
CQkJInBhY2thZ2UgcDI7XG4iICsKKwkJCQkJInB1YmxpYyBjbGFzcyBCIGV4dGVuZHMgQSB7XG4i
ICsKKwkJCQkJImxvbmcgaygpe1xuIiArCisJCQkJCSJyZXR1cm4gMDtcbiIgKworCQkJICAJCSJ9
XG4iICsKKwkJCQkJIn1cbiIpOworCQkJY3JlYXRlRmlsZSgiL1AvcDIvQS5qYXZhIiwKKwkJCQkJ
InBhY2thZ2UgcDI7XG4iICsKKwkJCQkJInB1YmxpYyBjbGFzcyBBIHtcbiIgKworCQkJCQkicHVi
bGljIGxvbmcgaygpe1xuIiArCisJCQkJCSJyZXR1cm4gMDtcbiIgKworCQkJICAJCSJ9XG4iICsK
KwkJCSAgCQkicHVibGljIGxvbmcgbSgpe1xuIisKKwkJCSAgCQkicmV0dXJuIG5ldyBBKCkuaygp
O1xuIiArCisJCQkgIAkJIn1cbiIrCisJCQkJCSJ9XG4iKTsKKwkJCXdhaXRVbnRpbEluZGV4ZXNS
ZWFkeSgpOworCQkJLy8gc2VhcmNoCisJCQlTZWFyY2hQYXR0ZXJuIHBhdHRlcm4gPSBTZWFyY2hQ
YXR0ZXJuLmNyZWF0ZVBhdHRlcm4oIkIuaygpIiwgTUVUSE9ELCBSRUZFUkVOQ0VTLCBFWEFDVF9S
VUxFKTsKKwkJCXNlYXJjaChwYXR0ZXJuLCBTZWFyY2hFbmdpbmUuY3JlYXRlSmF2YVNlYXJjaFNj
b3BlKG5ldyBJSmF2YUVsZW1lbnRbXSB7IHByb2plY3QgfSksIHRoaXMucmVzdWx0Q29sbGVjdG9y
KTsKKwkJCWFzc2VydFNlYXJjaFJlc3VsdHMoIldyb25nIHJlc3VsdHMiLCAicDIvQS5qYXZhIGxv
bmcgcDIuQS5tKCkgW2soKV0gRVhBQ1RfTUFUQ0giLCB0aGlzLnJlc3VsdENvbGxlY3Rvcik7CisJ
CX0gZmluYWxseSB7CisJCQlkZWxldGVQcm9qZWN0KHByb2plY3QpOworCQl9CisJfQorCQorCS8v
cHJlc2VuY2Ugb2Ygc2FtZSBuYW1lIGluIHRoZSBwYWNrYWdlIHNob3VsZCBub3QgZWZmZWN0IHRo
ZSByZXN1bHQKKwlwdWJsaWMgdm9pZCB0ZXN0QnVnMzU3NTQ3ZCgpIHRocm93cyBDb3JlRXhjZXB0
aW9uIHsKKwkJSUphdmFQcm9qZWN0IHByb2plY3QgPSBudWxsOworCQl0cnkKKwkJeworCQkJcHJv
amVjdCA9IGNyZWF0ZUphdmFQcm9qZWN0KCJQIik7CisJCQljcmVhdGVGb2xkZXIoIi9QL3AxIik7
CisJCQljcmVhdGVGaWxlKCIvUC9wMS9CLmphdmEiLAorCQkJCQkicGFja2FnZSBwMTtcbiIgKwor
CQkJCQkiaW1wb3J0IHAyLio7XG4iICsKKwkJCQkJInB1YmxpYyBjbGFzcyBCIGV4dGVuZHMgQSB7
XG4iICsKKwkJCQkJImxvbmcgaygpe1xuIiArCisJCQkJCSJyZXR1cm4gMDtcbiIgKworCQkJICAJ
CSJ9XG4iICsKKwkJCQkJIn1cbiIpOworCQkJY3JlYXRlRm9sZGVyKCIvUC9wMiIpOworCQkJY3Jl
YXRlRmlsZSgiL1AvcDIvQS5qYXZhIiwKKwkJCQkJInBhY2thZ2UgcDI7XG4iICsKKwkJCQkJInB1
YmxpYyBjbGFzcyBBeyBcbiIgKworCQkJCQkibG9uZyBrKCl7XG4iICsKKwkJCQkJInJldHVybiAw
O1xuIiArCisJCQkgIAkJIn1cbiIgKworCQkJICAJCSJwdWJsaWMgbG9uZyBtKCl7XG4iKworCQkJ
ICAJCSJyZXR1cm4gbmV3IEEoKS5rKCk7XG4iICsKKwkJCSAgCQkifVxuIisKKwkJCQkJIn1cbiIp
OworCQkJY3JlYXRlRmlsZSgiL1AvcDIvQi5qYXZhIiwKKwkJCQkJInBhY2thZ2UgcDI7XG4iICsK
KwkJCQkJInB1YmxpYyBjbGFzcyBCIHtcbiIgKworCQkJCQkifVxuIik7CisJCQl3YWl0VW50aWxJ
bmRleGVzUmVhZHkoKTsKKwkJCS8vIHNlYXJjaAorCQkJU2VhcmNoUGF0dGVybiBwYXR0ZXJuID0g
U2VhcmNoUGF0dGVybi5jcmVhdGVQYXR0ZXJuKCJCLmsoKSIsIE1FVEhPRCwgUkVGRVJFTkNFUywg
RVhBQ1RfUlVMRSk7CisJCQlzZWFyY2gocGF0dGVybiwgU2VhcmNoRW5naW5lLmNyZWF0ZUphdmFT
ZWFyY2hTY29wZShuZXcgSUphdmFFbGVtZW50W10geyBwcm9qZWN0IH0pLCB0aGlzLnJlc3VsdENv
bGxlY3Rvcik7CisJCQlhc3NlcnRTZWFyY2hSZXN1bHRzKCJTaG91bGQgbm90IGdldCBhbnkgcmVz
dWx0cyIsICIiLCB0aGlzLnJlc3VsdENvbGxlY3Rvcik7CisJCX0gZmluYWxseSB7CisJCQlkZWxl
dGVQcm9qZWN0KHByb2plY3QpOworCQl9CisJfQorCQorCS8vIHNlYXJjaCBmb3IgdGhlIG1ldGhv
ZCBuYW1lIHNob3VsZCBhbHNvIG5vdCByZXR1cm4gbWF0Y2hlcyBpZiBub3Qtb3ZlcnJpZGVuIGJl
Y2F1c2Ugb2YgcGFja2FnZS12aXNpYmxlCisJLy8gZXZlbiBpZiB0aGV5IGFyZSBpbiBqYXJzCisJ
cHVibGljIHZvaWQgdGVzdEJ1ZzM1NzU0N2UoKSB0aHJvd3MgQ29yZUV4Y2VwdGlvbiwgSU9FeGNl
cHRpb24geworCQlJSmF2YVByb2plY3QgcHJvamVjdCA9IG51bGw7CisJCXRyeQorCQl7CisJCQlw
cm9qZWN0ID0gY3JlYXRlSmF2YVByb2plY3QoIlAiLCBuZXcgU3RyaW5nW10geyIifSwgbmV3IFN0
cmluZ1tdIHsgIi9QL2xpYjM1NzU0Ny5qYXIiLCAiSkNMMTVfTElCIiB9LCAiIiwgIjEuNSIpOwor
CQkJb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMudXRpbC5VdGlsLmNyZWF0ZUphcihuZXcgU3Ry
aW5nW10geworCQkJCQkicDIvQS5qYXZhIiwKKwkJCQkJInBhY2thZ2UgcDI7XG4iICsgCisJCQkJ
CSJwdWJsaWMgY2xhc3MgQXt9XG4iIH0sIAorCQkJCQlwcm9qZWN0LmdldFByb2plY3QoKS5nZXRM
b2NhdGlvbigpLmFwcGVuZCgibGliU3R1ZmYuamFyIikudG9PU1N0cmluZygpLCAiMS41Iik7CisJ
CQkKKwkJCW9yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLnV0aWwuVXRpbC5jcmVhdGVKYXIoCisJ
CQkJCW5ldyBTdHJpbmdbXSB7CisJCQkJCQkicDEvQi5qYXZhIiwKKwkJCQkJCSJwYWNrYWdlIHAx
O1xuIisKKwkJCQkJCSJpbXBvcnQgcDIuKjtcbiIrCisJCQkJCQkicHVibGljIGNsYXNzIEIgZXh0
ZW5kcyBBIHtcbiIgKworCQkJCQkJImxvbmcgaygpe1xuIiArCisJCQkJCQkicmV0dXJuIDA7XG4i
ICsKKwkJCQkJCSJ9XG4iICsgCisJCQkJCQkifVxuIn0sCisJCQkJCW51bGwsCisJCQkJCXByb2pl
Y3QuZ2V0UHJvamVjdCgpLmdldExvY2F0aW9uKCkuYXBwZW5kKCJsaWIzNTc1NDcuamFyIikudG9P
U1N0cmluZygpLAorCQkJCQluZXcgU3RyaW5nW10geyBwcm9qZWN0LmdldFByb2plY3QoKS5nZXRM
b2NhdGlvbigpLmFwcGVuZCgibGliU3R1ZmYuamFyIikudG9PU1N0cmluZygpIH0sCisJCQkJCSIx
LjUiKTsKKwkJCXJlZnJlc2gocHJvamVjdCk7CisJCQljcmVhdGVGb2xkZXIoIi9QL3AyIik7CisJ
CQljcmVhdGVGaWxlKCIvUC9wMi9BLmphdmEiLAorCQkJCQkicGFja2FnZSBwMjtcbiIgKworCQkJ
CQkicHVibGljIGNsYXNzIEEge1xuIiArCisJCQkJCSJsb25nIGsoKXtcbiIgKworCQkJCQkicmV0
dXJuIDA7XG4iICsKKwkJCSAgCQkifVxuIiArCisJCQkgIAkJInB1YmxpYyBsb25nIG0oKXtcbiIr
CisJCQkgIAkJInJldHVybiBuZXcgQSgpLmsoKTtcbiIgKworCQkJICAJCSJ9XG4iKworCQkJCQki
fVxuIik7CisJCQl3YWl0VW50aWxJbmRleGVzUmVhZHkoKTsKKwkJCS8vIHNlYXJjaAorCQkJU2Vh
cmNoUGF0dGVybiBwYXR0ZXJuID0gU2VhcmNoUGF0dGVybi5jcmVhdGVQYXR0ZXJuKCJCLmsoKSIs
IE1FVEhPRCwgUkVGRVJFTkNFUywgRVhBQ1RfUlVMRSk7CisJCQlzZWFyY2gocGF0dGVybiwgU2Vh
cmNoRW5naW5lLmNyZWF0ZUphdmFTZWFyY2hTY29wZShuZXcgSUphdmFFbGVtZW50W10geyBwcm9q
ZWN0IH0sIElKYXZhU2VhcmNoU2NvcGUuQVBQTElDQVRJT05fTElCUkFSSUVTIHwgSUphdmFTZWFy
Y2hTY29wZS5TT1VSQ0VTKSwgdGhpcy5yZXN1bHRDb2xsZWN0b3IpOworCQkJYXNzZXJ0U2VhcmNo
UmVzdWx0cygiV3JvbmcgcmVzdWx0cyIsICIiLCB0aGlzLnJlc3VsdENvbGxlY3Rvcik7CisJCX0g
ZmluYWxseSB7CisJCQlkZWxldGVQcm9qZWN0KHByb2plY3QpOworCQl9CisJfQorCS8vIHNlYXJj
aCBmb3IgdGhlIG1ldGhvZCBuYW1lIHNob3VsZCBhbHNvIG5vdCByZXR1cm4gbWF0Y2hlcyBpZiBu
b3Qtb3ZlcnJpZGVuIGJlY2F1c2Ugb2YgcGFja2FnZS12aXNpYmxlCisJLy8gZXZlbiBpZiB0aGV5
IGFyZSBpbiBqYXJzCisJcHVibGljIHZvaWQgdGVzdEJ1ZzM1NzU0N2YoKSB0aHJvd3MgQ29yZUV4
Y2VwdGlvbiwgSU9FeGNlcHRpb24geworCQlJSmF2YVByb2plY3QgcHJvamVjdCA9IG51bGw7CisJ
CXRyeQorCQl7CisJCQlwcm9qZWN0ID0gY3JlYXRlSmF2YVByb2plY3QoIlAiLCBuZXcgU3RyaW5n
W10geyIifSwgbmV3IFN0cmluZ1tdIHsgIi9QL2xpYjM1NzU0Ny5qYXIiLCAiSkNMMTVfTElCIiB9
LCAiIiwgIjEuNSIpOworCQkJb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMudXRpbC5VdGlsLmNy
ZWF0ZUphcihuZXcgU3RyaW5nW10geworCQkJCQkicDIvQS5qYXZhIiwKKwkJCQkJInBhY2thZ2Ug
cDI7XG4iICsgCisJCQkJCSJwdWJsaWMgY2xhc3MgQXt9XG4iIH0sIAorCQkJCQlwcm9qZWN0Lmdl
dFByb2plY3QoKS5nZXRMb2NhdGlvbigpLmFwcGVuZCgibGliU3R1ZmYuamFyIikudG9PU1N0cmlu
ZygpLCAiMS41Iik7CisJCQkKKwkJCW9yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLnV0aWwuVXRp
bC5jcmVhdGVKYXIoCisJCQkJCW5ldyBTdHJpbmdbXSB7CisJCQkJCQkicDIvQi5qYXZhIiwKKwkJ
CQkJCSJwYWNrYWdlIHAyO1xuIiArCisJCQkJCQkiaW1wb3J0IHAyLio7XG4iICsKKwkJCQkJCSJw
dWJsaWMgY2xhc3MgQiBleHRlbmRzIEEge1xuIiArCisJCQkJCQkibG9uZyBrKCl7XG4iICsKKwkJ
CQkJCSJyZXR1cm4gMDtcbiIgKworCQkJCQkJIn1cbiIgKyAKKwkJCQkJCSJ9XG4ifSwKKwkJCQkJ
bnVsbCwKKwkJCQkJcHJvamVjdC5nZXRQcm9qZWN0KCkuZ2V0TG9jYXRpb24oKS5hcHBlbmQoImxp
YjM1NzU0Ny5qYXIiKS50b09TU3RyaW5nKCksCisJCQkJCW5ldyBTdHJpbmdbXSB7IHByb2plY3Qu
Z2V0UHJvamVjdCgpLmdldExvY2F0aW9uKCkuYXBwZW5kKCJsaWJTdHVmZi5qYXIiKS50b09TU3Ry
aW5nKCkgfSwKKwkJCQkJIjEuNSIpOworCQkJcmVmcmVzaChwcm9qZWN0KTsKKwkJCWNyZWF0ZUZv
bGRlcigiL1AvcDIiKTsKKwkJCWNyZWF0ZUZpbGUoIi9QL3AyL0EuamF2YSIsCisJCQkJCSJwYWNr
YWdlIHAyO1xuIiArCisJCQkJCSJwdWJsaWMgY2xhc3MgQSB7XG4iICsKKwkJCQkJImxvbmcgaygp
e1xuIiArCisJCQkJCSJyZXR1cm4gMDtcbiIgKworCQkJICAJCSJ9XG4iICsKKwkJCSAgCQkicHVi
bGljIGxvbmcgbSgpe1xuIisKKwkJCSAgCQkicmV0dXJuIG5ldyBBKCkuaygpO1xuIiArCisJCQkg
IAkJIn1cbiIrCisJCQkJCSJ9XG4iKTsKKwkJCXdhaXRVbnRpbEluZGV4ZXNSZWFkeSgpOworCQkJ
Ly8gc2VhcmNoCisJCQlTZWFyY2hQYXR0ZXJuIHBhdHRlcm4gPSBTZWFyY2hQYXR0ZXJuLmNyZWF0
ZVBhdHRlcm4oIkIuaygpIiwgTUVUSE9ELCBSRUZFUkVOQ0VTLCBFWEFDVF9SVUxFKTsKKwkJCXNl
YXJjaChwYXR0ZXJuLCBTZWFyY2hFbmdpbmUuY3JlYXRlSmF2YVNlYXJjaFNjb3BlKG5ldyBJSmF2
YUVsZW1lbnRbXSB7IHByb2plY3QgfSwgSUphdmFTZWFyY2hTY29wZS5BUFBMSUNBVElPTl9MSUJS
QVJJRVMgfCBJSmF2YVNlYXJjaFNjb3BlLlNPVVJDRVMpLCB0aGlzLnJlc3VsdENvbGxlY3Rvcik7
CisJCQlhc3NlcnRTZWFyY2hSZXN1bHRzKCJXcm9uZyByZXN1bHRzIiwgInAyL0EuamF2YSBsb25n
IHAyLkEubSgpIFtrKCldIEVYQUNUX01BVENIIiwgdGhpcy5yZXN1bHRDb2xsZWN0b3IpOworCQl9
IGZpbmFsbHkgeworCQkJZGVsZXRlUHJvamVjdChwcm9qZWN0KTsKKwkJfQorCX0KIH0KZGlmZiAt
LWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29yZS9zZWFyY2gvbWF0Y2hpbmcvTWV0aG9kTG9jYXRvci5qYXZhIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9tYXRj
aGluZy9NZXRob2RMb2NhdG9yLmphdmEKaW5kZXggOWI0ODkzOC4uYmMxZmE5MiAxMDA2NDQKLS0t
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b3JlL3NlYXJjaC9tYXRjaGluZy9NZXRob2RMb2NhdG9yLmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9tYXRj
aGluZy9NZXRob2RMb2NhdG9yLmphdmEKQEAgLTMxLDkgKzMxLDE3IEBACiAvL2V4dHJhIHJlZmVy
ZW5jZSBpbmZvCiBwdWJsaWMgY2hhcltdW11bXSBhbGxTdXBlckRlY2xhcmluZ1R5cGVOYW1lczsK
IAorLy8gVGhpcyBpcyBzZXQgb25seSBpZiBmb2N1cyBpcyBudWxsLiBJbiB0aGVzZSBjYXNlcwor
Ly8gaXQgd2lsbCBiZSBoYXJkIHRvIGRldGVybWluZSBpZiB0aGUgc3VwZXIgY2xhc3MgaXMgb2Yg
dGhlIHNhbWUgcGFja2FnZQorLy8gYXQgYSBsYXR0ZXIgcG9pbnQuIEhlbmNlLCB0aGlzIGFycmF5
IGlzIGNyZWF0ZWQgd2l0aCBhbGwgdGhlIHN1cGVyIGNsYXNzIAorLy8gbmFtZXMgb2YgdGhlIHNh
bWUgcGFja2FnZSBuYW1lIGFzIG9mIHRoZSBtYXRjaGluZyBjbGFzcyBuYW1lLgorLy8gU2VlIGh0
dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNTc1NDcKK3ByaXZh
dGUgY2hhcltdW11bXSBzYW1lUGtnU3VwZXJEZWNsYXJpbmdUeXBlTmFtZXM7CisKIHByaXZhdGUg
TWF0Y2hMb2NhdG9yIG1hdGNoTG9jYXRvcjsKIC8vbWV0aG9kIGRlY2xhcmF0aW9ucyB3aGljaCBw
YXJhbWV0ZXJzIHZlcmlmaWNhdGlvbiBmYWlsCiBwcml2YXRlIEhhc2hNYXAgbWV0aG9kRGVjbGFy
YXRpb25zV2l0aEludmFsaWRQYXJhbSA9IG5ldyBIYXNoTWFwKCk7CisKIAogcHVibGljIE1ldGhv
ZExvY2F0b3IoTWV0aG9kUGF0dGVybiBwYXR0ZXJuKSB7CiAJc3VwZXIocGF0dGVybik7CkBAIC03
NSwxNCArODMsMTYgQEAKIAkJc3RhcnQgPSBTeXN0ZW0uY3VycmVudFRpbWVNaWxsaXMoKTsKIAl9
CiAJdHJ5IHsKLQkJdGhpcy5hbGxTdXBlckRlY2xhcmluZ1R5cGVOYW1lcyA9CisJCVN1cGVyVHlw
ZU5hbWVzQ29sbGVjdG9yIG5hbWVzQ29sbGVjdG9yID0gCiAJCQluZXcgU3VwZXJUeXBlTmFtZXND
b2xsZWN0b3IoCiAJCQkJdGhpcy5wYXR0ZXJuLAogCQkJCXRoaXMucGF0dGVybi5kZWNsYXJpbmdT
aW1wbGVOYW1lLAogCQkJCXRoaXMucGF0dGVybi5kZWNsYXJpbmdRdWFsaWZpY2F0aW9uLAogCQkJ
CWxvY2F0b3IsCiAJCQkJdGhpcy5wYXR0ZXJuLmRlY2xhcmluZ1R5cGUsCi0JCQkJbG9jYXRvci5w
cm9ncmVzc01vbml0b3IpLmNvbGxlY3QoKTsKKwkJCQlsb2NhdG9yLnByb2dyZXNzTW9uaXRvcik7
CisJCXRoaXMuYWxsU3VwZXJEZWNsYXJpbmdUeXBlTmFtZXMgPSBuYW1lc0NvbGxlY3Rvci5jb2xs
ZWN0KCk7CisJCXRoaXMuc2FtZVBrZ1N1cGVyRGVjbGFyaW5nVHlwZU5hbWVzID0gbmFtZXNDb2xs
ZWN0b3IuZ2V0U2FtZVBhY2thZ2VTdXBlclR5cGVOYW1lcygpOwogCQl0aGlzLm1hdGNoTG9jYXRv
ciA9IGxvY2F0b3I7CQogCX0gY2F0Y2ggKEphdmFNb2RlbEV4Y2VwdGlvbiBlKSB7CiAJCS8vIGlu
YWNjdXJhdGUgbWF0Y2hlcyB3aWxsIGJlIGZvdW5kCkBAIC0xMDksNyArMTE5LDkgQEAKICAqIHRo
aXMgbWVzc2FnZSBzZW5kIG9yIG5vdC4KICAqLwogcHJvdGVjdGVkIGJvb2xlYW4gaXNWaXJ0dWFs
SW52b2tlKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBNZXNzYWdlU2VuZCBtZXNzYWdlU2VuZCkgewot
CXJldHVybiAhbWV0aG9kLmlzU3RhdGljKCkgJiYgIW1ldGhvZC5pc1ByaXZhdGUoKSAmJiAhbWVz
c2FnZVNlbmQuaXNTdXBlckFjY2VzcygpOworCQlyZXR1cm4gIW1ldGhvZC5pc1N0YXRpYygpICYm
ICFtZXRob2QuaXNQcml2YXRlKCkgJiYgIW1lc3NhZ2VTZW5kLmlzU3VwZXJBY2Nlc3MoKQorCQkJ
CSYmICEobWV0aG9kLmlzRGVmYXVsdCgpICYmIHRoaXMucGF0dGVybi5mb2N1cyAhPSBudWxsICYm
IAorCQkJCSFDaGFyT3BlcmF0aW9uLmVxdWFscyh0aGlzLnBhdHRlcm4uZGVjbGFyaW5nUXVhbGlm
aWNhdGlvbiwgbWV0aG9kLmRlY2xhcmluZ0NsYXNzLnF1YWxpZmllZFBhY2thZ2VOYW1lKCkpKTsK
IH0KIHB1YmxpYyBpbnQgbWF0Y2goQVNUTm9kZSBub2RlLCBNYXRjaGluZ05vZGVTZXQgbm9kZVNl
dCkgewogCWludCBkZWNsYXJhdGlvbnNMZXZlbCA9IElNUE9TU0lCTEVfTUFUQ0g7CkBAIC02Njks
OSArNjgxLDEwIEBACiAJCQlpZiAobWV0aG9kLmRlY2xhcmluZ0NsYXNzID09IG51bGwgfHwgdGhp
cy5hbGxTdXBlckRlY2xhcmluZ1R5cGVOYW1lcyA9PSBudWxsKSB7CiAJCQkJZGVjbGFyaW5nTGV2
ZWwgPSBJTkFDQ1VSQVRFX01BVENIOwogCQkJfSBlbHNlIHsKLQkJCQlpZiAocmVzb2x2ZUxldmVs
QXNTdXBlckludm9jYXRpb24obWV0aG9kUmVjZWl2ZXJUeXBlLCBtZXRob2QucGFyYW1ldGVycywg
dHJ1ZSkpIHsKLQkJCQkJZGVjbGFyaW5nTGV2ZWwgPSBtZXRob2RMZXZlbCAvLyBzaW5jZSB0aGlz
IGlzIGFuIEFDQ1VSQVRFX01BVENIIHNvIHJldHVybiB0aGUgcG9zc2libHkgd2Vha2VyIG1hdGNo
Ci0JCQkJCQl8IFNVUEVSX0lOVk9DQVRJT05fRkxBVk9SOyAvLyB0aGlzIGlzIGFuIG92ZXJyaWRk
ZW4gbWV0aG9kID0+IGFkZCBmbGF2b3IgdG8gcmV0dXJuZWQgbGV2ZWwKKwkJCQljaGFyW11bXVtd
IHN1cGVyVHlwZU5hbWVzID0gKG1ldGhvZC5pc0RlZmF1bHQoKSAmJiB0aGlzLnBhdHRlcm4uZm9j
dXMgPT0gbnVsbCkgPyB0aGlzLnNhbWVQa2dTdXBlckRlY2xhcmluZ1R5cGVOYW1lczogdGhpcy5h
bGxTdXBlckRlY2xhcmluZ1R5cGVOYW1lczsKKwkJCQlpZiAoc3VwZXJUeXBlTmFtZXMgIT0gbnVs
bCAmJiByZXNvbHZlTGV2ZWxBc1N1cGVySW52b2NhdGlvbihtZXRob2RSZWNlaXZlclR5cGUsIG1l
dGhvZC5wYXJhbWV0ZXJzLCBzdXBlclR5cGVOYW1lcywgdHJ1ZSkpIHsKKwkJCQkJCWRlY2xhcmlu
Z0xldmVsID0gbWV0aG9kTGV2ZWwgLy8gc2luY2UgdGhpcyBpcyBhbiBBQ0NVUkFURV9NQVRDSCBz
byByZXR1cm4gdGhlIHBvc3NpYmx5IHdlYWtlciBtYXRjaAorCQkJCQkJCXwgU1VQRVJfSU5WT0NB
VElPTl9GTEFWT1I7IC8vIHRoaXMgaXMgYW4gb3ZlcnJpZGRlbiBtZXRob2QgPT4gYWRkIGZsYXZv
ciB0byByZXR1cm5lZCBsZXZlbAogCQkJCX0KIAkJCX0KIAkJfQpAQCAtNzQ1LDEwICs3NTgsMTAg
QEAKICAqIFJldHVybiB3aGV0aGVyIHRoZSBnaXZlbiB0eXBlIGJpbmRpbmcgb3Igb25lIG9mIGl0
cyBwb3NzaWJsZSBzdXBlciBpbnRlcmZhY2VzCiAgKiBtYXRjaGVzIGEgdHlwZSBpbiB0aGUgZGVj
bGFyaW5nIHR5cGUgbmFtZXMgaGllcmFyY2h5LgogICovCi1wcml2YXRlIGJvb2xlYW4gcmVzb2x2
ZUxldmVsQXNTdXBlckludm9jYXRpb24oUmVmZXJlbmNlQmluZGluZyB0eXBlLCBUeXBlQmluZGlu
Z1tdIGFyZ3VtZW50VHlwZXMsIGJvb2xlYW4gbWV0aG9kQWxyZWFkeVZlcmlmaWVkKSB7Citwcml2
YXRlIGJvb2xlYW4gcmVzb2x2ZUxldmVsQXNTdXBlckludm9jYXRpb24oUmVmZXJlbmNlQmluZGlu
ZyB0eXBlLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMsIGNoYXJbXVtdW10gc3VwZXJUeXBl
TmFtZXMsIGJvb2xlYW4gbWV0aG9kQWxyZWFkeVZlcmlmaWVkKSB7CiAJY2hhcltdW10gY29tcG91
bmROYW1lID0gdHlwZS5jb21wb3VuZE5hbWU7Ci0JZm9yIChpbnQgaSA9IDAsIG1heCA9IHRoaXMu
YWxsU3VwZXJEZWNsYXJpbmdUeXBlTmFtZXMubGVuZ3RoOyBpIDwgbWF4OyBpKyspIHsKLQkJaWYg
KENoYXJPcGVyYXRpb24uZXF1YWxzKHRoaXMuYWxsU3VwZXJEZWNsYXJpbmdUeXBlTmFtZXNbaV0s
IGNvbXBvdW5kTmFtZSkpIHsKKwlmb3IgKGludCBpID0gMCwgbWF4ID0gc3VwZXJUeXBlTmFtZXMu
bGVuZ3RoOyBpIDwgbWF4OyBpKyspIHsKKwkJaWYgKENoYXJPcGVyYXRpb24uZXF1YWxzKHN1cGVy
VHlwZU5hbWVzW2ldLCBjb21wb3VuZE5hbWUpKSB7CiAJCQkvLyBuZWVkIHRvIHZlcmlmeSBpZiB0
aGUgdHlwZSBpbXBsZW1lbnRzIHRoZSBwYXR0ZXJuIG1ldGhvZAogCQkJaWYgKG1ldGhvZEFscmVh
ZHlWZXJpZmllZCkgcmV0dXJuIHRydWU7IC8vIGFscmVhZHkgdmVyaWZpZWQgYmVmb3JlIGVudGVy
IGludG8gdGhpcyBtZXRob2QgKHNlZSByZXNvbHZlTGV2ZWwoTWVzc2FnZVNlbmQpKQogCQkJTWV0
aG9kQmluZGluZ1tdIG1ldGhvZHMgPSB0eXBlLmdldE1ldGhvZHModGhpcy5wYXR0ZXJuLnNlbGVj
dG9yKTsKQEAgLTc4MCw3ICs3OTMsNyBAQAogCQlSZWZlcmVuY2VCaW5kaW5nW10gaW50ZXJmYWNl
cyA9IHR5cGUuc3VwZXJJbnRlcmZhY2VzKCk7CiAJCWlmIChpbnRlcmZhY2VzID09IG51bGwpIHJl
dHVybiBmYWxzZTsKIAkJZm9yIChpbnQgaSA9IDA7IGkgPCBpbnRlcmZhY2VzLmxlbmd0aDsgaSsr
KSB7Ci0JCQlpZiAocmVzb2x2ZUxldmVsQXNTdXBlckludm9jYXRpb24oaW50ZXJmYWNlc1tpXSwg
YXJndW1lbnRUeXBlcywgZmFsc2UpKSB7CisJCQlpZiAocmVzb2x2ZUxldmVsQXNTdXBlckludm9j
YXRpb24oaW50ZXJmYWNlc1tpXSwgYXJndW1lbnRUeXBlcywgc3VwZXJUeXBlTmFtZXMsIGZhbHNl
KSkgewogCQkJCXJldHVybiB0cnVlOwogCQkJfQogCQl9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNoL21h
dGNoaW5nL1N1cGVyVHlwZU5hbWVzQ29sbGVjdG9yLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvc2VhcmNoL21hdGNoaW5nL1N1
cGVyVHlwZU5hbWVzQ29sbGVjdG9yLmphdmEKaW5kZXggOGVhZTg3MC4uN2ZjNmYxZiAxMDA2NDQK
LS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb3JlL3NlYXJjaC9tYXRjaGluZy9TdXBlclR5cGVOYW1lc0NvbGxlY3Rvci5qYXZhCisrKyBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29y
ZS9zZWFyY2gvbWF0Y2hpbmcvU3VwZXJUeXBlTmFtZXNDb2xsZWN0b3IuamF2YQpAQCAtMSw1ICsx
LDUgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIw
MDggSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIw
MTIgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBU
aGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBh
dmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYx
LjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxh
YmxlIGF0CkBAIC0xMyw3ICsxMyw2IEBACiBpbXBvcnQgb3JnLmVjbGlwc2UuY29yZS5ydW50aW1l
LklQcm9ncmVzc01vbml0b3I7CiBpbXBvcnQgb3JnLmVjbGlwc2UuY29yZS5ydW50aW1lLlN1YlBy
b2dyZXNzTW9uaXRvcjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS4qOwotaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5jb3JlLklDb21waWxhdGlvblVuaXQ7CiBpbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmNvcmUuY29tcGlsZXIuQ2hhck9wZXJhdGlvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
Y29yZS5zZWFyY2guKjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
QVNUVmlzaXRvcjsKQEAgLTQ1LDE5ICs0NCwxOSBAQAogCQlwdWJsaWMgYm9vbGVhbiB2aXNpdChU
eXBlRGVjbGFyYXRpb24gdHlwZURlY2xhcmF0aW9uLCBCbG9ja1Njb3BlIHNjb3BlKSB7CiAJCQlS
ZWZlcmVuY2VCaW5kaW5nIGJpbmRpbmcgPSB0eXBlRGVjbGFyYXRpb24uYmluZGluZzsKIAkJCWlm
IChTdXBlclR5cGVOYW1lc0NvbGxlY3Rvci50aGlzLm1hdGNoZXMoYmluZGluZykpCi0JCQkJY29s
bGVjdFN1cGVyVHlwZU5hbWVzKGJpbmRpbmcpOworCQkJCWNvbGxlY3RTdXBlclR5cGVOYW1lcyhi
aW5kaW5nLCBiaW5kaW5nLmNvbXBvdW5kTmFtZSk7CiAJCQlyZXR1cm4gdHJ1ZTsKIAkJfQogCQlw
dWJsaWMgYm9vbGVhbiB2aXNpdChUeXBlRGVjbGFyYXRpb24gdHlwZURlY2xhcmF0aW9uLCBDb21w
aWxhdGlvblVuaXRTY29wZSBzY29wZSkgewogCQkJUmVmZXJlbmNlQmluZGluZyBiaW5kaW5nID0g
dHlwZURlY2xhcmF0aW9uLmJpbmRpbmc7CiAJCQlpZiAoU3VwZXJUeXBlTmFtZXNDb2xsZWN0b3Iu
dGhpcy5tYXRjaGVzKGJpbmRpbmcpKQotCQkJCWNvbGxlY3RTdXBlclR5cGVOYW1lcyhiaW5kaW5n
KTsKKwkJCQljb2xsZWN0U3VwZXJUeXBlTmFtZXMoYmluZGluZywgYmluZGluZy5jb21wb3VuZE5h
bWUpOwogCQkJcmV0dXJuIHRydWU7CiAJCX0KIAkJcHVibGljIGJvb2xlYW4gdmlzaXQoVHlwZURl
Y2xhcmF0aW9uIG1lbWJlclR5cGVEZWNsYXJhdGlvbiwgQ2xhc3NTY29wZSBzY29wZSkgewogCQkJ
UmVmZXJlbmNlQmluZGluZyBiaW5kaW5nID0gbWVtYmVyVHlwZURlY2xhcmF0aW9uLmJpbmRpbmc7
CiAJCQlpZiAoU3VwZXJUeXBlTmFtZXNDb2xsZWN0b3IudGhpcy5tYXRjaGVzKGJpbmRpbmcpKQot
CQkJCWNvbGxlY3RTdXBlclR5cGVOYW1lcyhiaW5kaW5nKTsKKwkJCQljb2xsZWN0U3VwZXJUeXBl
TmFtZXMoYmluZGluZywgYmluZGluZy5jb21wb3VuZE5hbWUpOwogCQkJcmV0dXJuIHRydWU7CiAJ
CX0KIAkJcHVibGljIGJvb2xlYW4gdmlzaXQoRmllbGREZWNsYXJhdGlvbiBmaWVsZERlY2xhcmF0
aW9uLCBNZXRob2RTY29wZSBzY29wZSkgewpAQCAtODIsNiArODEsOSBAQAogY2hhcltdW11bXSBy
ZXN1bHQ7CiBpbnQgcmVzdWx0SW5kZXg7CiAKK2NoYXJbXVtdW10gc2FtZVBhY2thZ2VTdXBlclR5
cGVOYW1lOyAvLyBzZXQgb25seSBpZiBmb2N1cyBpcyBudWxsCitpbnQgc2FtZVBhY2thZ2VJbmRl
eDsKKwogcHVibGljIFN1cGVyVHlwZU5hbWVzQ29sbGVjdG9yKAogCVNlYXJjaFBhdHRlcm4gcGF0
dGVybiwKIAljaGFyW10gdHlwZVNpbXBsZU5hbWUsCkBAIC05OCw2ICsxMDAsMjEgQEAKIAl0aGlz
LnByb2dyZXNzTW9uaXRvciA9IHByb2dyZXNzTW9uaXRvcjsKIH0KIAorcHJpdmF0ZSBib29sZWFu
IGFkZElmU2FtZVBhY2thZ2UoY2hhcltdW10gY29tcG91bmROYW1lLCBjaGFyW11bXSBwYXRoKSB7
CisJaWYgKGNvbXBvdW5kTmFtZS5sZW5ndGggIT0gcGF0aC5sZW5ndGgpIHJldHVybiBmYWxzZTsK
KwlpbnQgcmVzdWx0TGVuZ3RoID0gdGhpcy5zYW1lUGFja2FnZVN1cGVyVHlwZU5hbWUubGVuZ3Ro
OworCWZvciAoaW50IGkgPSAwOyBpIDwgcmVzdWx0TGVuZ3RoOyBpKyspCisJCWlmIChDaGFyT3Bl
cmF0aW9uLmVxdWFscyh0aGlzLnNhbWVQYWNrYWdlU3VwZXJUeXBlTmFtZVtpXSwgY29tcG91bmRO
YW1lKSkgcmV0dXJuIGZhbHNlOyAvLyBhbHJlYWR5IGtub3duCisJCisJZm9yIChpbnQgaSA9IDAs
IGxlbmd0aCA9IGNvbXBvdW5kTmFtZS5sZW5ndGggLSAxOyBpIDwgbGVuZ3RoOyBpICsrKSB7CisJ
CWlmICghQ2hhck9wZXJhdGlvbi5lcXVhbHMoY29tcG91bmROYW1lW2ldLCBwYXRoW2ldKSkgcmV0
dXJuIGZhbHNlOworCX0KKwlpZiAocmVzdWx0TGVuZ3RoID09IHRoaXMuc2FtZVBhY2thZ2VJbmRl
eCkKKwkJU3lzdGVtLmFycmF5Y29weSh0aGlzLnNhbWVQYWNrYWdlU3VwZXJUeXBlTmFtZSwgMCwg
dGhpcy5zYW1lUGFja2FnZVN1cGVyVHlwZU5hbWUgPSBuZXcgY2hhcltyZXN1bHRMZW5ndGgqMl1b
XVtdLCAwLCByZXN1bHRMZW5ndGgpOworCXRoaXMuc2FtZVBhY2thZ2VTdXBlclR5cGVOYW1lW3Ro
aXMuc2FtZVBhY2thZ2VJbmRleCsrXSA9IGNvbXBvdW5kTmFtZTsKKwlyZXR1cm4gdHJ1ZTsKK30K
KwogcHJvdGVjdGVkIHZvaWQgYWRkVG9SZXN1bHQoY2hhcltdW10gY29tcG91bmROYW1lKSB7CiAJ
aW50IHJlc3VsdExlbmd0aCA9IHRoaXMucmVzdWx0Lmxlbmd0aDsKIAlmb3IgKGludCBpID0gMDsg
aSA8IHJlc3VsdExlbmd0aDsgaSsrKQpAQCAtMTA3LDYgKzEyNCw3IEBACiAJCVN5c3RlbS5hcnJh
eWNvcHkodGhpcy5yZXN1bHQsIDAsIHRoaXMucmVzdWx0ID0gbmV3IGNoYXJbcmVzdWx0TGVuZ3Ro
KjJdW11bXSwgMCwgcmVzdWx0TGVuZ3RoKTsKIAl0aGlzLnJlc3VsdFt0aGlzLnJlc3VsdEluZGV4
KytdID0gY29tcG91bmROYW1lOwogfQorCiAvKgogICogUGFyc2UgdGhlIGdpdmVuIGNvbXBpYXRp
b24gdW5pdCBhbmQgYnVpbGQgaXRzIHR5cGUgYmluZGluZ3MuCiAgKi8KQEAgLTE0MSw3ICsxNTks
NyBAQAogCQkJaWYgKHRoaXMudHlwZS5pc0JpbmFyeSgpKSB7CiAJCQkJQmluYXJ5VHlwZUJpbmRp
bmcgYmluZGluZyA9IHRoaXMubG9jYXRvci5jYWNoZUJpbmFyeVR5cGUodGhpcy50eXBlLCBudWxs
KTsKIAkJCQlpZiAoYmluZGluZyAhPSBudWxsKQotCQkJCQljb2xsZWN0U3VwZXJUeXBlTmFtZXMo
YmluZGluZyk7CisJCQkJCWNvbGxlY3RTdXBlclR5cGVOYW1lcyhiaW5kaW5nLCBudWxsKTsKIAkJ
CX0gZWxzZSB7CiAJCQkJSUNvbXBpbGF0aW9uVW5pdCB1bml0ID0gdGhpcy50eXBlLmdldENvbXBp
bGF0aW9uVW5pdCgpOwogCQkJCVNvdXJjZVR5cGUgc291cmNlVHlwZSA9IChTb3VyY2VUeXBlKSB0
aGlzLnR5cGU7CkBAIC0xNTAsNyArMTY4LDcgQEAKIAkJCQlpZiAocGFyc2VkVW5pdCAhPSBudWxs
KSB7CiAJCQkJCVR5cGVEZWNsYXJhdGlvbiB0eXBlRGVjbCA9IG5ldyBBU1ROb2RlRmluZGVyKHBh
cnNlZFVuaXQpLmZpbmRUeXBlKHRoaXMudHlwZSk7CiAJCQkJCWlmICh0eXBlRGVjbCAhPSBudWxs
ICYmIHR5cGVEZWNsLmJpbmRpbmcgIT0gbnVsbCkKLQkJCQkJCWNvbGxlY3RTdXBlclR5cGVOYW1l
cyh0eXBlRGVjbC5iaW5kaW5nKTsKKwkJCQkJCWNvbGxlY3RTdXBlclR5cGVOYW1lcyh0eXBlRGVj
bC5iaW5kaW5nLCBudWxsKTsKIAkJCQl9CiAJCQl9CiAJCX0gY2F0Y2ggKEFib3J0Q29tcGlsYXRp
b24gZSkgewpAQCAtMTcxLDYgKzE4OSw3IEBACiAJVXRpbC5zb3J0KHBhdGhzKTsgLy8gc29ydCBi
eSBwcm9qZWN0cwogCUphdmFQcm9qZWN0IHByZXZpb3VzUHJvamVjdCA9IG51bGw7CiAJdGhpcy5y
ZXN1bHQgPSBuZXcgY2hhclsxXVtdW107CisJdGhpcy5zYW1lUGFja2FnZVN1cGVyVHlwZU5hbWUg
PSBuZXcgY2hhclsxXVtdW107CiAJdGhpcy5yZXN1bHRJbmRleCA9IDA7CiAJZm9yIChpbnQgaSA9
IDAsIGxlbmd0aCA9IHBhdGhzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAJCXRyeSB7CkBA
IC0xOTEsNyArMjEwLDcgQEAKIAkJCQlJQ2xhc3NGaWxlIGNsYXNzRmlsZSA9IChJQ2xhc3NGaWxl
KSBvcGVuYWJsZTsKIAkJCQlCaW5hcnlUeXBlQmluZGluZyBiaW5kaW5nID0gdGhpcy5sb2NhdG9y
LmNhY2hlQmluYXJ5VHlwZShjbGFzc0ZpbGUuZ2V0VHlwZSgpLCBudWxsKTsKIAkJCQlpZiAobWF0
Y2hlcyhiaW5kaW5nKSkKLQkJCQkJY29sbGVjdFN1cGVyVHlwZU5hbWVzKGJpbmRpbmcpOworCQkJ
CQljb2xsZWN0U3VwZXJUeXBlTmFtZXMoYmluZGluZywgYmluZGluZy5jb21wb3VuZE5hbWUpOwog
CQkJfQogCQl9IGNhdGNoIChBYm9ydENvbXBpbGF0aW9uIGUpIHsKIAkJCS8vIGlnbm9yZTogY29u
dGludWUgd2l0aCBuZXh0IGVsZW1lbnQKQEAgLTIwNiwxMSArMjI1LDE1IEBACiAvKioKICAqIENv
bGxlY3RzIHRoZSBuYW1lcyBvZiBhbGwgdGhlIHN1cGVydHlwZXMgb2YgdGhlIGdpdmVuIHR5cGUu
CiAgKi8KLXByb3RlY3RlZCB2b2lkIGNvbGxlY3RTdXBlclR5cGVOYW1lcyhSZWZlcmVuY2VCaW5k
aW5nIGJpbmRpbmcpIHsKK3Byb3RlY3RlZCB2b2lkIGNvbGxlY3RTdXBlclR5cGVOYW1lcyhSZWZl
cmVuY2VCaW5kaW5nIGJpbmRpbmcsIGNoYXJbXVtdIHBhdGgpIHsKIAlSZWZlcmVuY2VCaW5kaW5n
IHN1cGVyY2xhc3MgPSBiaW5kaW5nLnN1cGVyY2xhc3MoKTsKKwlpZiAocGF0aCAhPSBudWxsKSB7
CisJCWJvb2xlYW4gc2FtZVBhY2thZ2UgPSBhZGRJZlNhbWVQYWNrYWdlKHN1cGVyY2xhc3MuY29t
cG91bmROYW1lLCBwYXRoKTsKKwkJaWYgKCFzYW1lUGFja2FnZSkgcGF0aCA9IG51bGw7CisJfQog
CWlmIChzdXBlcmNsYXNzICE9IG51bGwpIHsKIAkJYWRkVG9SZXN1bHQoc3VwZXJjbGFzcy5jb21w
b3VuZE5hbWUpOwotCQljb2xsZWN0U3VwZXJUeXBlTmFtZXMoc3VwZXJjbGFzcyk7CisJCWNvbGxl
Y3RTdXBlclR5cGVOYW1lcyhzdXBlcmNsYXNzLCBudWxsKTsKIAl9CiAKIAlSZWZlcmVuY2VCaW5k
aW5nW10gaW50ZXJmYWNlcyA9IGJpbmRpbmcuc3VwZXJJbnRlcmZhY2VzKCk7CkBAIC0yMTgsNyAr
MjQxLDcgQEAKIAkJZm9yIChpbnQgaSA9IDA7IGkgPCBpbnRlcmZhY2VzLmxlbmd0aDsgaSsrKSB7
CiAJCQlSZWZlcmVuY2VCaW5kaW5nIGludGVyZmFjZUJpbmRpbmcgPSBpbnRlcmZhY2VzW2ldOwog
CQkJYWRkVG9SZXN1bHQoaW50ZXJmYWNlQmluZGluZy5jb21wb3VuZE5hbWUpOwotCQkJY29sbGVj
dFN1cGVyVHlwZU5hbWVzKGludGVyZmFjZUJpbmRpbmcpOworCQkJY29sbGVjdFN1cGVyVHlwZU5h
bWVzKGludGVyZmFjZUJpbmRpbmcsIG51bGwpOwogCQl9CiAJfQogfQpAQCAtMjU0LDYgKzI3Nyw5
IEBACiAJCXRoaXMucHJvZ3Jlc3NNb25pdG9yID09IG51bGwgPyBudWxsIDogbmV3IFN1YlByb2dy
ZXNzTW9uaXRvcih0aGlzLnByb2dyZXNzTW9uaXRvciwgMTAwKSk7CiAJcmV0dXJuIHBhdGhDb2xs
ZWN0b3IuZ2V0UGF0aHMoKTsKIH0KK3B1YmxpYyBjaGFyW11bXVtdIGdldFNhbWVQYWNrYWdlU3Vw
ZXJUeXBlTmFtZXMoKSB7CisJcmV0dXJuIHRoaXMuc2FtZVBhY2thZ2VTdXBlclR5cGVOYW1lOwor
fQogcHJvdGVjdGVkIGJvb2xlYW4gbWF0Y2hlcyhjaGFyW11bXSBjb21wb3VuZE5hbWUpIHsKIAlp
bnQgbGVuZ3RoID0gY29tcG91bmROYW1lLmxlbmd0aDsKIAlpZiAobGVuZ3RoID09IDApIHJldHVy
biBmYWxzZTs=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>214290</attachid>
            <date>2012-04-20 03:58:00 -0400</date>
            <delta_ts>2012-04-20 03:58:02 -0400</delta_ts>
            <desc>Updated patch</desc>
            <filename>patch.txt</filename>
            <type>text/plain</type>
            <size>24806</size>
            <attacher name="Satyam Kandula">satyam.kandula</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9tb2RlbC9KYXZhU2VhcmNoQnVnc1Rlc3RzMi5qYXZhIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rl
c3RzL21vZGVsL0phdmFTZWFyY2hCdWdzVGVzdHMyLmphdmEKaW5kZXggYWUzMjNkYy4uY2RlOGFh
MCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21vZGVsL0phdmFTZWFyY2hCdWdzVGVzdHMyLmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9j
b3JlL3Rlc3RzL21vZGVsL0phdmFTZWFyY2hCdWdzVGVzdHMyLmphdmEKQEAgLTYwNCw0ICs2MDQs
Mjk1IEBACiAJCWRlbGV0ZVByb2plY3QoIlAiKTsKIAl9CiAJfQorCS8qKgorCSAqIEBidWcgMzU3
NTQ3OiBbc2VhcmNoXSBTZWFyY2ggZm9yIG1ldGhvZCByZWZlcmVuY2VzIGlzIHJldHVybmluZyBt
ZXRob2RzIGFzIG92ZXJyaWRlbiBldmVuIGlmIHRoZSBzdXBlcmNsYXNzJ3MgbWV0aG9kIGlzIG9u
bHkgcGFja2FnZS12aXNpYmxlCisJICogQHRlc3QgU2VhcmNoIGZvciBhIG5vbi1vdmVycmlkZW4g
bWV0aG9kIGJlY2F1c2Ugb2YgcGFja2FnZSB2aXNpYmlsaXR5IHNob3VsZCBub3QgYmUgZm91bmQK
KwkgKiBAc2VlICJodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9
MzU3NTQ3IgorCSAqLworCXB1YmxpYyB2b2lkIHRlc3RCdWczNTc1NDdhKCkgdGhyb3dzIENvcmVF
eGNlcHRpb24geworCQlJSmF2YVByb2plY3QgcHJvamVjdCA9IG51bGw7CisJCXRyeQorCQl7CisJ
CQlwcm9qZWN0ID0gY3JlYXRlSmF2YVByb2plY3QoIlAiKTsKKwkJCWNyZWF0ZUZvbGRlcigiL1Av
cDEiKTsKKwkJCWNyZWF0ZUZpbGUoIi9QL3AxL0IuamF2YSIsCisJCQkJCSJwYWNrYWdlIHAxO1xu
IiArCisJCQkJCSJpbXBvcnQgcDIuKjtcbiIgKworCQkJCQkicHVibGljIGNsYXNzIEIgZXh0ZW5k
cyBBIHtcbiIgKworCQkJCQkibG9uZyBrKCl7XG4iICsKKwkJCQkJInJldHVybiAwO1xuIiArCisJ
CQkgIAkJIn1cbiIgKworCQkJCQkifVxuIik7CisJCQljcmVhdGVGb2xkZXIoIi9QL3AyIik7CisJ
CQljcmVhdGVGaWxlKCIvUC9wMi9BLmphdmEiLAorCQkJCQkicGFja2FnZSBwMjtcbiIgKworCQkJ
CQkicHVibGljIGNsYXNzIEEge1xuIiArCisJCQkJCSJsb25nIGsoKXtcbiIgKworCQkJCQkicmV0
dXJuIDA7XG4iICsKKwkJCSAgCQkifVxuIiArCisJCQkgIAkJInB1YmxpYyBsb25nIG0oKXtcbiIr
CisJCQkgIAkJInJldHVybiBuZXcgQSgpLmsoKTtcbiIgKworCQkJICAJCSJ9XG4iKworCQkJCQki
fVxuIik7CisJCQlJVHlwZSB0eXBlID0gZ2V0Q29tcGlsYXRpb25Vbml0KCIvUC9wMS9CLmphdmEi
KS5nZXRUeXBlKCJCIik7CisJCQlJTWV0aG9kIG1ldGhvZCA9IHR5cGUuZ2V0TWV0aG9kKCJrIiwg
bmV3IFN0cmluZ1tde30pOworCQkJc2VhcmNoKG1ldGhvZCwgUkVGRVJFTkNFUywgRVhBQ1RfUlVM
RSwgU2VhcmNoRW5naW5lLmNyZWF0ZVdvcmtzcGFjZVNjb3BlKCksIHRoaXMucmVzdWx0Q29sbGVj
dG9yKTsKKwkJCWFzc2VydFNlYXJjaFJlc3VsdHMoIlNob3VsZCBub3QgZ2V0IGFueSByZXN1bHRz
IiwgIiIsIHRoaXMucmVzdWx0Q29sbGVjdG9yKTsKKwkJfSBmaW5hbGx5IHsKKwkJCWRlbGV0ZVBy
b2plY3QocHJvamVjdCk7CisJCX0KKwl9CisJCisJLy8gc2VhcmNoIGZvciB0aGUgbWV0aG9kIG5h
bWUgc2hvdWxkIGFsc28gbm90IHJldHVybiBtYXRjaGVzIGlmIG5vdC1vdmVycmlkZW4gYmVjYXVz
ZSBvZiBwYWNrYWdlLXZpc2libGUKKwlwdWJsaWMgdm9pZCB0ZXN0QnVnMzU3NTQ3YigpIHRocm93
cyBDb3JlRXhjZXB0aW9uIHsKKwkJSUphdmFQcm9qZWN0IHByb2plY3QgPSBudWxsOworCQl0cnkK
KwkJeworCQkJcHJvamVjdCA9IGNyZWF0ZUphdmFQcm9qZWN0KCJQIik7CisJCQljcmVhdGVGb2xk
ZXIoIi9QL3AxIik7CisJCQljcmVhdGVGaWxlKCIvUC9wMS9CLmphdmEiLAorCQkJCQkicGFja2Fn
ZSBwMTtcbiIgKworCQkJCQkiaW1wb3J0IHAyLio7XG4iICsKKwkJCQkJInB1YmxpYyBjbGFzcyBC
IGV4dGVuZHMgQSB7XG4iICsKKwkJCQkJImxvbmcgaygpe1xuIiArCisJCQkJCSJyZXR1cm4gMDtc
biIgKworCQkJICAJCSJ9XG4iICsKKwkJCQkJIn1cbiIpOworCQkJY3JlYXRlRm9sZGVyKCIvUC9w
MiIpOworCQkJY3JlYXRlRmlsZSgiL1AvcDIvQS5qYXZhIiwKKwkJCQkJInBhY2thZ2UgcDI7XG4i
ICsKKwkJCQkJInB1YmxpYyBjbGFzcyBBIHtcbiIgKworCQkJCQkibG9uZyBrKCl7XG4iICsKKwkJ
CQkJInJldHVybiAwO1xuIiArCisJCQkgIAkJIn1cbiIgKworCQkJICAJCSJwdWJsaWMgbG9uZyBt
KCl7XG4iKworCQkJICAJCSJyZXR1cm4gbmV3IEEoKS5rKCk7XG4iICsKKwkJCSAgCQkifVxuIisK
KwkJCQkJIn1cbiIpOworCQkJd2FpdFVudGlsSW5kZXhlc1JlYWR5KCk7CisJCQkvLyBzZWFyY2gK
KwkJCVNlYXJjaFBhdHRlcm4gcGF0dGVybiA9IFNlYXJjaFBhdHRlcm4uY3JlYXRlUGF0dGVybigi
cCouQi5rKCkiLCBNRVRIT0QsIFJFRkVSRU5DRVMgLCAwICk7CisJCQlzZWFyY2gocGF0dGVybiwg
U2VhcmNoRW5naW5lLmNyZWF0ZUphdmFTZWFyY2hTY29wZShuZXcgSUphdmFFbGVtZW50W10geyBw
cm9qZWN0IH0pLCB0aGlzLnJlc3VsdENvbGxlY3Rvcik7CisJCQlhc3NlcnRTZWFyY2hSZXN1bHRz
KCJTaG91bGQgbm90IGdldCBhbnkgcmVzdWx0cyIsICIiLCB0aGlzLnJlc3VsdENvbGxlY3Rvcik7
CisJCX0gZmluYWxseSB7CisJCQlkZWxldGVQcm9qZWN0KHByb2plY3QpOworCQl9CisJfQorCQor
CS8vIHNlYXJjaCBmb3IgdGhlIG1ldGhvZCBuYW1lIHNob3VsZCByZXR1cm4gdGhlIG1hdGNoIGlm
IHNhbWUgcGFja2FnZSAKKwlwdWJsaWMgdm9pZCB0ZXN0QnVnMzU3NTQ3YygpIHRocm93cyBDb3Jl
RXhjZXB0aW9uIHsKKwkJSUphdmFQcm9qZWN0IHByb2plY3QgPSBudWxsOworCQl0cnkKKwkJewor
CQkJcHJvamVjdCA9IGNyZWF0ZUphdmFQcm9qZWN0KCJQIik7CisJCQljcmVhdGVGb2xkZXIoIi9Q
L3AyIik7CisJCQljcmVhdGVGaWxlKCIvUC9wMi9CLmphdmEiLAorCQkJCQkicGFja2FnZSBwMjtc
biIgKworCQkJCQkicHVibGljIGNsYXNzIEIgZXh0ZW5kcyBBIHtcbiIgKworCQkJCQkibG9uZyBr
KCl7XG4iICsKKwkJCQkJInJldHVybiAwO1xuIiArCisJCQkgIAkJIn1cbiIgKworCQkJCQkifVxu
Iik7CisJCQljcmVhdGVGaWxlKCIvUC9wMi9BLmphdmEiLAorCQkJCQkicGFja2FnZSBwMjtcbiIg
KworCQkJCQkicHVibGljIGNsYXNzIEEge1xuIiArCisJCQkJCSJsb25nIGsoKXtcbiIgKworCQkJ
CQkicmV0dXJuIDA7XG4iICsKKwkJCSAgCQkifVxuIiArCisJCQkgIAkJInB1YmxpYyBsb25nIG0o
KXtcbiIrCisJCQkgIAkJInJldHVybiBuZXcgQSgpLmsoKTtcbiIgKworCQkJICAJCSJ9XG4iKwor
CQkJCQkifVxuIik7CisJCQl3YWl0VW50aWxJbmRleGVzUmVhZHkoKTsKKwkJCS8vIHNlYXJjaAor
CQkJU2VhcmNoUGF0dGVybiBwYXR0ZXJuID0gU2VhcmNoUGF0dGVybi5jcmVhdGVQYXR0ZXJuKCJC
LmsoKSIsIE1FVEhPRCwgUkVGRVJFTkNFUywgRVhBQ1RfUlVMRSk7CisJCQlzZWFyY2gocGF0dGVy
biwgU2VhcmNoRW5naW5lLmNyZWF0ZUphdmFTZWFyY2hTY29wZShuZXcgSUphdmFFbGVtZW50W10g
eyBwcm9qZWN0IH0pLCB0aGlzLnJlc3VsdENvbGxlY3Rvcik7CisJCQlhc3NlcnRTZWFyY2hSZXN1
bHRzKCJXcm9uZyByZXN1bHRzIiwgInAyL0EuamF2YSBsb25nIHAyLkEubSgpIFtrKCldIEVYQUNU
X01BVENIIiwgdGhpcy5yZXN1bHRDb2xsZWN0b3IpOworCQl9IGZpbmFsbHkgeworCQkJZGVsZXRl
UHJvamVjdChwcm9qZWN0KTsKKwkJfQorCX0KKwkKKwkKKwlwdWJsaWMgdm9pZCB0ZXN0QnVnMzU3
NTQ3ZCgpIHRocm93cyBDb3JlRXhjZXB0aW9uIHsKKwkJSUphdmFQcm9qZWN0IHByb2plY3QgPSBu
dWxsOworCQl0cnkKKwkJeworCQkJcHJvamVjdCA9IGNyZWF0ZUphdmFQcm9qZWN0KCJQIik7CisJ
CQljcmVhdGVGb2xkZXIoIi9QL3AxIik7CisJCQljcmVhdGVGaWxlKCIvUC9wMS9CLmphdmEiLAor
CQkJCQkicGFja2FnZSBwMTtcbiIgKworCQkJCQkiaW1wb3J0IHAyLio7XG4iICsKKwkJCQkJInB1
YmxpYyBjbGFzcyBCIGV4dGVuZHMgQSB7XG4iICsKKwkJCQkJImxvbmcgaygpe1xuIiArCisJCQkJ
CSJyZXR1cm4gMDtcbiIgKworCQkJICAJCSJ9XG4iICsKKwkJCQkJIn1cbiIpOworCQkJY3JlYXRl
Rm9sZGVyKCIvUC9wMiIpOworCQkJY3JlYXRlRmlsZSgiL1AvcDIvQS5qYXZhIiwKKwkJCQkJInBh
Y2thZ2UgcDI7XG4iICsKKwkJCQkJInB1YmxpYyBjbGFzcyBBeyBcbiIgKworCQkJCQkibG9uZyBr
KCl7XG4iICsKKwkJCQkJInJldHVybiAwO1xuIiArCisJCQkgIAkJIn1cbiIgKworCQkJICAJCSJw
dWJsaWMgbG9uZyBtKCl7XG4iKworCQkJICAJCSJyZXR1cm4gbmV3IEEoKS5rKCk7XG4iICsKKwkJ
CSAgCQkifVxuIisKKwkJCQkJIn1cbiIpOworCQkJY3JlYXRlRmlsZSgiL1AvcDIvQi5qYXZhIiwK
KwkJCQkJInBhY2thZ2UgcDI7XG4iICsKKwkJCQkJInB1YmxpYyBjbGFzcyBCIHtcbiIgKworCQkJ
CQkifVxuIik7CisJCQl3YWl0VW50aWxJbmRleGVzUmVhZHkoKTsKKwkJCS8vIHNlYXJjaAorCQkJ
U2VhcmNoUGF0dGVybiBwYXR0ZXJuID0gU2VhcmNoUGF0dGVybi5jcmVhdGVQYXR0ZXJuKCJCLmso
KSIsIE1FVEhPRCwgUkVGRVJFTkNFUywgRVhBQ1RfUlVMRSk7CisJCQlzZWFyY2gocGF0dGVybiwg
U2VhcmNoRW5naW5lLmNyZWF0ZUphdmFTZWFyY2hTY29wZShuZXcgSUphdmFFbGVtZW50W10geyBw
cm9qZWN0IH0pLCB0aGlzLnJlc3VsdENvbGxlY3Rvcik7CisJCQlhc3NlcnRTZWFyY2hSZXN1bHRz
KCJTaG91bGQgbm90IGdldCBhbnkgcmVzdWx0cyIsICIiLCB0aGlzLnJlc3VsdENvbGxlY3Rvcik7
CisJCX0gZmluYWxseSB7CisJCQlkZWxldGVQcm9qZWN0KHByb2plY3QpOworCQl9CisJfQorCS8v
IHNlYXJjaCBmb3IgdGhlIG1ldGhvZCBuYW1lIHNob3VsZCBhbHNvIG5vdCByZXR1cm4gbWF0Y2hl
cyBpZiBub3Qtb3ZlcnJpZGVuIGJlY2F1c2Ugb2YgcGFja2FnZS12aXNpYmxlCisJLy8gZXZlbiBp
ZiB0aGV5IGFyZSBpbiBqYXJzCisJcHVibGljIHZvaWQgdGVzdEJ1ZzM1NzU0N2UoKSB0aHJvd3Mg
Q29yZUV4Y2VwdGlvbiwgSU9FeGNlcHRpb24geworCQlJSmF2YVByb2plY3QgcHJvamVjdCA9IG51
bGw7CisJCXRyeQorCQl7CisJCQlwcm9qZWN0ID0gY3JlYXRlSmF2YVByb2plY3QoIlAiLCBuZXcg
U3RyaW5nW10geyIifSwgbmV3IFN0cmluZ1tdIHsgIi9QL2xpYjM1NzU0Ny5qYXIiLCAiSkNMMTVf
TElCIiB9LCAiIiwgIjEuNSIpOworCQkJb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMudXRpbC5V
dGlsLmNyZWF0ZUphcihuZXcgU3RyaW5nW10geworCQkJCQkicDIvQS5qYXZhIiwKKwkJCQkJInBh
Y2thZ2UgcDI7XG4iICsgCisJCQkJCSJwdWJsaWMgY2xhc3MgQXt9XG4iIH0sIAorCQkJCQlwcm9q
ZWN0LmdldFByb2plY3QoKS5nZXRMb2NhdGlvbigpLmFwcGVuZCgibGliU3R1ZmYuamFyIikudG9P
U1N0cmluZygpLCAiMS41Iik7CisJCQkKKwkJCW9yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLnV0
aWwuVXRpbC5jcmVhdGVKYXIoCisJCQkJCW5ldyBTdHJpbmdbXSB7CisJCQkJCQkicDEvQi5qYXZh
IiwKKwkJCQkJCSJwYWNrYWdlIHAxO1xuIisKKwkJCQkJCSJpbXBvcnQgcDIuKjtcbiIrCisJCQkJ
CQkicHVibGljIGNsYXNzIEIgZXh0ZW5kcyBBIHtcbiIgKworCQkJCQkJImxvbmcgaygpe1xuIiAr
CisJCQkJCQkicmV0dXJuIDA7XG4iICsKKwkJCQkJCSJ9XG4iICsgCisJCQkJCQkifVxuIn0sCisJ
CQkJCW51bGwsCisJCQkJCXByb2plY3QuZ2V0UHJvamVjdCgpLmdldExvY2F0aW9uKCkuYXBwZW5k
KCJsaWIzNTc1NDcuamFyIikudG9PU1N0cmluZygpLAorCQkJCQluZXcgU3RyaW5nW10geyBwcm9q
ZWN0LmdldFByb2plY3QoKS5nZXRMb2NhdGlvbigpLmFwcGVuZCgibGliU3R1ZmYuamFyIikudG9P
U1N0cmluZygpIH0sCisJCQkJCSIxLjUiKTsKKwkJCXJlZnJlc2gocHJvamVjdCk7CisJCQljcmVh
dGVGb2xkZXIoIi9QL3AyIik7CisJCQljcmVhdGVGaWxlKCIvUC9wMi9BLmphdmEiLAorCQkJCQki
cGFja2FnZSBwMjtcbiIgKworCQkJCQkicHVibGljIGNsYXNzIEEge1xuIiArCisJCQkJCSJsb25n
IGsoKXtcbiIgKworCQkJCQkicmV0dXJuIDA7XG4iICsKKwkJCSAgCQkifVxuIiArCisJCQkgIAkJ
InB1YmxpYyBsb25nIG0oKXtcbiIrCisJCQkgIAkJInJldHVybiBuZXcgQSgpLmsoKTtcbiIgKwor
CQkJICAJCSJ9XG4iKworCQkJCQkifVxuIik7CisJCQl3YWl0VW50aWxJbmRleGVzUmVhZHkoKTsK
KwkJCS8vIHNlYXJjaAorCQkJU2VhcmNoUGF0dGVybiBwYXR0ZXJuID0gU2VhcmNoUGF0dGVybi5j
cmVhdGVQYXR0ZXJuKCJCLmsoKSIsIE1FVEhPRCwgUkVGRVJFTkNFUywgRVhBQ1RfUlVMRSk7CisJ
CQlzZWFyY2gocGF0dGVybiwgU2VhcmNoRW5naW5lLmNyZWF0ZUphdmFTZWFyY2hTY29wZShuZXcg
SUphdmFFbGVtZW50W10geyBwcm9qZWN0IH0sIElKYXZhU2VhcmNoU2NvcGUuQVBQTElDQVRJT05f
TElCUkFSSUVTIHwgSUphdmFTZWFyY2hTY29wZS5TT1VSQ0VTKSwgdGhpcy5yZXN1bHRDb2xsZWN0
b3IpOworCQkJYXNzZXJ0U2VhcmNoUmVzdWx0cygiV3JvbmcgcmVzdWx0cyIsICIiLCB0aGlzLnJl
c3VsdENvbGxlY3Rvcik7CisJCX0gZmluYWxseSB7CisJCQlkZWxldGVQcm9qZWN0KHByb2plY3Qp
OworCQl9CisJfQorCS8vIHNlYXJjaCBmb3IgdGhlIG1ldGhvZCBuYW1lIHNob3VsZCBhbHNvIG5v
dCByZXR1cm4gbWF0Y2hlcyBpZiBub3Qtb3ZlcnJpZGVuIGJlY2F1c2Ugb2YgcGFja2FnZS12aXNp
YmxlCisJLy8gZXZlbiBpZiB0aGV5IGFyZSBpbiBqYXJzCisJcHVibGljIHZvaWQgdGVzdEJ1ZzM1
NzU0N2YoKSB0aHJvd3MgQ29yZUV4Y2VwdGlvbiwgSU9FeGNlcHRpb24geworCQlJSmF2YVByb2pl
Y3QgcHJvamVjdCA9IG51bGw7CisJCXRyeQorCQl7CisJCQlwcm9qZWN0ID0gY3JlYXRlSmF2YVBy
b2plY3QoIlAiLCBuZXcgU3RyaW5nW10geyIifSwgbmV3IFN0cmluZ1tdIHsgIi9QL2xpYjM1NzU0
Ny5qYXIiLCAiSkNMMTVfTElCIiB9LCAiIiwgIjEuNSIpOworCQkJb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMudXRpbC5VdGlsLmNyZWF0ZUphcihuZXcgU3RyaW5nW10geworCQkJCQkicDIvQS5q
YXZhIiwKKwkJCQkJInBhY2thZ2UgcDI7XG4iICsgCisJCQkJCSJwdWJsaWMgY2xhc3MgQXt9XG4i
IH0sIAorCQkJCQlwcm9qZWN0LmdldFByb2plY3QoKS5nZXRMb2NhdGlvbigpLmFwcGVuZCgibGli
U3R1ZmYuamFyIikudG9PU1N0cmluZygpLCAiMS41Iik7CisJCQkKKwkJCW9yZy5lY2xpcHNlLmpk
dC5jb3JlLnRlc3RzLnV0aWwuVXRpbC5jcmVhdGVKYXIoCisJCQkJCW5ldyBTdHJpbmdbXSB7CisJ
CQkJCQkicDIvQi5qYXZhIiwKKwkJCQkJCSJwYWNrYWdlIHAyO1xuIiArCisJCQkJCQkiaW1wb3J0
IHAyLio7XG4iICsKKwkJCQkJCSJwdWJsaWMgY2xhc3MgQiBleHRlbmRzIEEge1xuIiArCisJCQkJ
CQkibG9uZyBrKCl7XG4iICsKKwkJCQkJCSJyZXR1cm4gMDtcbiIgKworCQkJCQkJIn1cbiIgKyAK
KwkJCQkJCSJ9XG4ifSwKKwkJCQkJbnVsbCwKKwkJCQkJcHJvamVjdC5nZXRQcm9qZWN0KCkuZ2V0
TG9jYXRpb24oKS5hcHBlbmQoImxpYjM1NzU0Ny5qYXIiKS50b09TU3RyaW5nKCksCisJCQkJCW5l
dyBTdHJpbmdbXSB7IHByb2plY3QuZ2V0UHJvamVjdCgpLmdldExvY2F0aW9uKCkuYXBwZW5kKCJs
aWJTdHVmZi5qYXIiKS50b09TU3RyaW5nKCkgfSwKKwkJCQkJIjEuNSIpOworCQkJcmVmcmVzaChw
cm9qZWN0KTsKKwkJCWNyZWF0ZUZvbGRlcigiL1AvcDIiKTsKKwkJCWNyZWF0ZUZpbGUoIi9QL3Ay
L0EuamF2YSIsCisJCQkJCSJwYWNrYWdlIHAyO1xuIiArCisJCQkJCSJwdWJsaWMgY2xhc3MgQSB7
XG4iICsKKwkJCQkJImxvbmcgaygpe1xuIiArCisJCQkJCSJyZXR1cm4gMDtcbiIgKworCQkJICAJ
CSJ9XG4iICsKKwkJCSAgCQkicHVibGljIGxvbmcgbSgpe1xuIisKKwkJCSAgCQkicmV0dXJuIG5l
dyBBKCkuaygpO1xuIiArCisJCQkgIAkJIn1cbiIrCisJCQkJCSJ9XG4iKTsKKwkJCXdhaXRVbnRp
bEluZGV4ZXNSZWFkeSgpOworCQkJLy8gc2VhcmNoCisJCQlTZWFyY2hQYXR0ZXJuIHBhdHRlcm4g
PSBTZWFyY2hQYXR0ZXJuLmNyZWF0ZVBhdHRlcm4oIkIuaygpIiwgTUVUSE9ELCBSRUZFUkVOQ0VT
LCBFWEFDVF9SVUxFKTsKKwkJCXNlYXJjaChwYXR0ZXJuLCBTZWFyY2hFbmdpbmUuY3JlYXRlSmF2
YVNlYXJjaFNjb3BlKG5ldyBJSmF2YUVsZW1lbnRbXSB7IHByb2plY3QgfSwgSUphdmFTZWFyY2hT
Y29wZS5BUFBMSUNBVElPTl9MSUJSQVJJRVMgfCBJSmF2YVNlYXJjaFNjb3BlLlNPVVJDRVMpLCB0
aGlzLnJlc3VsdENvbGxlY3Rvcik7CisJCQlhc3NlcnRTZWFyY2hSZXN1bHRzKCJXcm9uZyByZXN1
bHRzIiwgInAyL0EuamF2YSBsb25nIHAyLkEubSgpIFtrKCldIEVYQUNUX01BVENIIiwgdGhpcy5y
ZXN1bHRDb2xsZWN0b3IpOworCQl9IGZpbmFsbHkgeworCQkJZGVsZXRlUHJvamVjdChwcm9qZWN0
KTsKKwkJfQorCX0KKwkKKwkvLyBzZWFyY2ggZm9yIGRlY2xhcmF0aW9ucyBhbHNvIHNob3VsZCB0
YWtlIGNhcmUgb2YgZGVmYXVsdAorCXB1YmxpYyB2b2lkIHRlc3RCdWczNTc1NDdnKCkgdGhyb3dz
IENvcmVFeGNlcHRpb24geworCQlJSmF2YVByb2plY3QgcHJvamVjdCA9IG51bGw7CisJCXRyeQor
CQl7CisJCQlwcm9qZWN0ID0gY3JlYXRlSmF2YVByb2plY3QoIlAiKTsKKwkJCWNyZWF0ZUZvbGRl
cigiL1AvcDEiKTsKKwkJCWNyZWF0ZUZpbGUoIi9QL3AxL0IuamF2YSIsCisJCQkJCSJwYWNrYWdl
IHAxO1xuIiArCisJCQkJCSJpbXBvcnQgcDIuKjtcbiIgKworCQkJCQkicHVibGljIGNsYXNzIEIg
ZXh0ZW5kcyBBIHtcbiIgKworCQkJCQkibG9uZyBrKGludCBhKXtcbiIgKworCQkJCQkicmV0dXJu
IDA7XG4iICsKKwkJCSAgCQkifVxuIiArCisJCQkJCSJ9XG4iKTsKKwkJCWNyZWF0ZUZpbGUoIi9Q
L3AxL0MuamF2YSIsCisJCQkJCSJwYWNrYWdlIHAxO1xuIiArCisJCQkJCSJwdWJsaWMgY2xhc3Mg
QyBleHRlbmRzIEIge1xuIiArCisJCQkJCSJsb25nIGsoaW50IGEpe1xuIiArCisJCQkJCSJyZXR1
cm4gMDtcbiIgKworCQkJICAJCSJ9XG4iICsKKwkJCQkJIn1cbiIpOworCQkJY3JlYXRlRm9sZGVy
KCIvUC9wMiIpOworCQkJY3JlYXRlRmlsZSgiL1AvcDIvQS5qYXZhIiwKKwkJCQkJInBhY2thZ2Ug
cDI7XG4iICsKKwkJCQkJInB1YmxpYyBjbGFzcyBBeyBcbiIgKworCQkJCQkibG9uZyBrKGludCBh
KXtcbiIgKworCQkJCQkicmV0dXJuIDA7XG4iICsKKwkJCSAgCQkifVxuIiArCisJCQkgIAkJInB1
YmxpYyBsb25nIG0oKXtcbiIrCisJCQkgIAkJInJldHVybiBuZXcgQSgpLmsoMCk7XG4iICsKKwkJ
CSAgCQkifVxuIisKKwkJCQkJIn1cbiIpOworCQkJY3JlYXRlRmlsZSgiL1AvcDIvQi5qYXZhIiwK
KwkJCQkJInBhY2thZ2UgcDI7XG4iICsKKwkJCQkJInB1YmxpYyBjbGFzcyBCIHtcbiIgKworCQkJ
CQkifVxuIik7CisJCQl3YWl0VW50aWxJbmRleGVzUmVhZHkoKTsKKwkJCS8vIHNlYXJjaAorCQkJ
U2VhcmNoUGF0dGVybiBwYXR0ZXJuID0gU2VhcmNoUGF0dGVybi5jcmVhdGVQYXR0ZXJuKCJBLmso
aW50KSIsIE1FVEhPRCwgREVDTEFSQVRJT05TLCBFWEFDVF9SVUxFKTsKKwkJCXNlYXJjaChwYXR0
ZXJuLCBTZWFyY2hFbmdpbmUuY3JlYXRlSmF2YVNlYXJjaFNjb3BlKG5ldyBJSmF2YUVsZW1lbnRb
XSB7IHByb2plY3QgfSksIHRoaXMucmVzdWx0Q29sbGVjdG9yKTsKKwkJCWFzc2VydFNlYXJjaFJl
c3VsdHMoIldyb25nIHJlc3VsdHMiLCAicDIvQS5qYXZhIGxvbmcgcDIuQS5rKGludCkgW2tdIEVY
QUNUX01BVENIIiwgdGhpcy5yZXN1bHRDb2xsZWN0b3IpOworCQl9IGZpbmFsbHkgeworCQkJZGVs
ZXRlUHJvamVjdChwcm9qZWN0KTsKKwkJfQorCX0KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gvbWF0
Y2hpbmcvTWV0aG9kTG9jYXRvci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9tYXRjaGluZy9NZXRob2RMb2NhdG9y
LmphdmEKaW5kZXggOWI0ODkzOC4uY2FhM2Y3OSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9tYXRjaGlu
Zy9NZXRob2RMb2NhdG9yLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3NlYXJjaC9tYXRjaGluZy9NZXRob2RMb2NhdG9y
LmphdmEKQEAgLTMxLDkgKzMxLDE3IEBACiAvL2V4dHJhIHJlZmVyZW5jZSBpbmZvCiBwdWJsaWMg
Y2hhcltdW11bXSBhbGxTdXBlckRlY2xhcmluZ1R5cGVOYW1lczsKIAorLy8gVGhpcyBpcyBzZXQg
b25seSBpZiBmb2N1cyBpcyBudWxsLiBJbiB0aGVzZSBjYXNlcworLy8gaXQgd2lsbCBiZSBoYXJk
IHRvIGRldGVybWluZSBpZiB0aGUgc3VwZXIgY2xhc3MgaXMgb2YgdGhlIHNhbWUgcGFja2FnZQor
Ly8gYXQgYSBsYXR0ZXIgcG9pbnQuIEhlbmNlLCB0aGlzIGFycmF5IGlzIGNyZWF0ZWQgd2l0aCBh
bGwgdGhlIHN1cGVyIGNsYXNzIAorLy8gbmFtZXMgb2YgdGhlIHNhbWUgcGFja2FnZSBuYW1lIGFz
IG9mIHRoZSBtYXRjaGluZyBjbGFzcyBuYW1lLgorLy8gU2VlIGh0dHBzOi8vYnVncy5lY2xpcHNl
Lm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNTc1NDcKK3ByaXZhdGUgY2hhcltdW11bXSBzYW1l
UGtnU3VwZXJEZWNsYXJpbmdUeXBlTmFtZXM7CisKIHByaXZhdGUgTWF0Y2hMb2NhdG9yIG1hdGNo
TG9jYXRvcjsKIC8vbWV0aG9kIGRlY2xhcmF0aW9ucyB3aGljaCBwYXJhbWV0ZXJzIHZlcmlmaWNh
dGlvbiBmYWlsCiBwcml2YXRlIEhhc2hNYXAgbWV0aG9kRGVjbGFyYXRpb25zV2l0aEludmFsaWRQ
YXJhbSA9IG5ldyBIYXNoTWFwKCk7CisKIAogcHVibGljIE1ldGhvZExvY2F0b3IoTWV0aG9kUGF0
dGVybiBwYXR0ZXJuKSB7CiAJc3VwZXIocGF0dGVybik7CkBAIC03NSwxNCArODMsMTYgQEAKIAkJ
c3RhcnQgPSBTeXN0ZW0uY3VycmVudFRpbWVNaWxsaXMoKTsKIAl9CiAJdHJ5IHsKLQkJdGhpcy5h
bGxTdXBlckRlY2xhcmluZ1R5cGVOYW1lcyA9CisJCVN1cGVyVHlwZU5hbWVzQ29sbGVjdG9yIG5h
bWVzQ29sbGVjdG9yID0gCiAJCQluZXcgU3VwZXJUeXBlTmFtZXNDb2xsZWN0b3IoCiAJCQkJdGhp
cy5wYXR0ZXJuLAogCQkJCXRoaXMucGF0dGVybi5kZWNsYXJpbmdTaW1wbGVOYW1lLAogCQkJCXRo
aXMucGF0dGVybi5kZWNsYXJpbmdRdWFsaWZpY2F0aW9uLAogCQkJCWxvY2F0b3IsCiAJCQkJdGhp
cy5wYXR0ZXJuLmRlY2xhcmluZ1R5cGUsCi0JCQkJbG9jYXRvci5wcm9ncmVzc01vbml0b3IpLmNv
bGxlY3QoKTsKKwkJCQlsb2NhdG9yLnByb2dyZXNzTW9uaXRvcik7CisJCXRoaXMuYWxsU3VwZXJE
ZWNsYXJpbmdUeXBlTmFtZXMgPSBuYW1lc0NvbGxlY3Rvci5jb2xsZWN0KCk7CisJCXRoaXMuc2Ft
ZVBrZ1N1cGVyRGVjbGFyaW5nVHlwZU5hbWVzID0gbmFtZXNDb2xsZWN0b3IuZ2V0U2FtZVBhY2th
Z2VTdXBlclR5cGVOYW1lcygpOwogCQl0aGlzLm1hdGNoTG9jYXRvciA9IGxvY2F0b3I7CQogCX0g
Y2F0Y2ggKEphdmFNb2RlbEV4Y2VwdGlvbiBlKSB7CiAJCS8vIGluYWNjdXJhdGUgbWF0Y2hlcyB3
aWxsIGJlIGZvdW5kCkBAIC0xMDksNyArMTE5LDkgQEAKICAqIHRoaXMgbWVzc2FnZSBzZW5kIG9y
IG5vdC4KICAqLwogcHJvdGVjdGVkIGJvb2xlYW4gaXNWaXJ0dWFsSW52b2tlKE1ldGhvZEJpbmRp
bmcgbWV0aG9kLCBNZXNzYWdlU2VuZCBtZXNzYWdlU2VuZCkgewotCXJldHVybiAhbWV0aG9kLmlz
U3RhdGljKCkgJiYgIW1ldGhvZC5pc1ByaXZhdGUoKSAmJiAhbWVzc2FnZVNlbmQuaXNTdXBlckFj
Y2VzcygpOworCQlyZXR1cm4gIW1ldGhvZC5pc1N0YXRpYygpICYmICFtZXRob2QuaXNQcml2YXRl
KCkgJiYgIW1lc3NhZ2VTZW5kLmlzU3VwZXJBY2Nlc3MoKQorCQkJCSYmICEobWV0aG9kLmlzRGVm
YXVsdCgpICYmIHRoaXMucGF0dGVybi5mb2N1cyAhPSBudWxsICYmIAorCQkJCSFDaGFyT3BlcmF0
aW9uLmVxdWFscyh0aGlzLnBhdHRlcm4uZGVjbGFyaW5nUXVhbGlmaWNhdGlvbiwgbWV0aG9kLmRl
Y2xhcmluZ0NsYXNzLnF1YWxpZmllZFBhY2thZ2VOYW1lKCkpKTsKIH0KIHB1YmxpYyBpbnQgbWF0
Y2goQVNUTm9kZSBub2RlLCBNYXRjaGluZ05vZGVTZXQgbm9kZVNldCkgewogCWludCBkZWNsYXJh
dGlvbnNMZXZlbCA9IElNUE9TU0lCTEVfTUFUQ0g7CkBAIC02MzEsNyArNjQzLDcgQEAKIAkJc3Vi
VHlwZSA9IENoYXJPcGVyYXRpb24uY29tcGFyZVdpdGgodGhpcy5wYXR0ZXJuLmRlY2xhcmluZ1F1
YWxpZmljYXRpb24sIG1ldGhvZC5kZWNsYXJpbmdDbGFzcy5mUGFja2FnZS5zaG9ydFJlYWRhYmxl
TmFtZSgpKSA9PSAwOwogCX0KIAlpbnQgZGVjbGFyaW5nTGV2ZWwgPSBzdWJUeXBlCi0JCT8gcmVz
b2x2ZUxldmVsQXNTdWJ0eXBlKHRoaXMucGF0dGVybi5kZWNsYXJpbmdTaW1wbGVOYW1lLCB0aGlz
LnBhdHRlcm4uZGVjbGFyaW5nUXVhbGlmaWNhdGlvbiwgbWV0aG9kLmRlY2xhcmluZ0NsYXNzLCBt
ZXRob2Quc2VsZWN0b3IsIG51bGwpCisJCT8gcmVzb2x2ZUxldmVsQXNTdWJ0eXBlKHRoaXMucGF0
dGVybi5kZWNsYXJpbmdTaW1wbGVOYW1lLCB0aGlzLnBhdHRlcm4uZGVjbGFyaW5nUXVhbGlmaWNh
dGlvbiwgbWV0aG9kLmRlY2xhcmluZ0NsYXNzLCBtZXRob2Quc2VsZWN0b3IsIG51bGwsIG1ldGhv
ZC5kZWNsYXJpbmdDbGFzcy5xdWFsaWZpZWRQYWNrYWdlTmFtZSgpLCBtZXRob2QuaXNEZWZhdWx0
KCkpCiAJCTogcmVzb2x2ZUxldmVsRm9yVHlwZSh0aGlzLnBhdHRlcm4uZGVjbGFyaW5nU2ltcGxl
TmFtZSwgdGhpcy5wYXR0ZXJuLmRlY2xhcmluZ1F1YWxpZmljYXRpb24sIG1ldGhvZC5kZWNsYXJp
bmdDbGFzcyk7CiAJcmV0dXJuIChtZXRob2RMZXZlbCAmIE1BVENIX0xFVkVMX01BU0spID4gKGRl
Y2xhcmluZ0xldmVsICYgTUFUQ0hfTEVWRUxfTUFTSykgPyBkZWNsYXJpbmdMZXZlbCA6IG1ldGhv
ZExldmVsOyAvLyByZXR1cm4gdGhlIHdlYWtlciBtYXRjaAogfQpAQCAtNjY0LDE0ICs2NzYsMTUg
QEAKIAlpbnQgZGVjbGFyaW5nTGV2ZWw7CiAJaWYgKGlzVmlydHVhbEludm9rZShtZXRob2QsIG1l
c3NhZ2VTZW5kKSAmJiAobWVzc2FnZVNlbmQuYWN0dWFsUmVjZWl2ZXJUeXBlIGluc3RhbmNlb2Yg
UmVmZXJlbmNlQmluZGluZykpIHsKIAkJUmVmZXJlbmNlQmluZGluZyBtZXRob2RSZWNlaXZlclR5
cGUgPSAoUmVmZXJlbmNlQmluZGluZykgbWVzc2FnZVNlbmQuYWN0dWFsUmVjZWl2ZXJUeXBlOwot
CQlkZWNsYXJpbmdMZXZlbCA9IHJlc29sdmVMZXZlbEFzU3VidHlwZSh0aGlzLnBhdHRlcm4uZGVj
bGFyaW5nU2ltcGxlTmFtZSwgdGhpcy5wYXR0ZXJuLmRlY2xhcmluZ1F1YWxpZmljYXRpb24sIG1l
dGhvZFJlY2VpdmVyVHlwZSwgbWV0aG9kLnNlbGVjdG9yLCBtZXRob2QucGFyYW1ldGVycyk7CisJ
CWRlY2xhcmluZ0xldmVsID0gcmVzb2x2ZUxldmVsQXNTdWJ0eXBlKHRoaXMucGF0dGVybi5kZWNs
YXJpbmdTaW1wbGVOYW1lLCB0aGlzLnBhdHRlcm4uZGVjbGFyaW5nUXVhbGlmaWNhdGlvbiwgbWV0
aG9kUmVjZWl2ZXJUeXBlLCBtZXRob2Quc2VsZWN0b3IsIG1ldGhvZC5wYXJhbWV0ZXJzLCBtZXRo
b2RSZWNlaXZlclR5cGUucXVhbGlmaWVkUGFja2FnZU5hbWUoKSwgbWV0aG9kLmlzRGVmYXVsdCgp
KTsKIAkJaWYgKGRlY2xhcmluZ0xldmVsID09IElNUE9TU0lCTEVfTUFUQ0gpIHsKIAkJCWlmICht
ZXRob2QuZGVjbGFyaW5nQ2xhc3MgPT0gbnVsbCB8fCB0aGlzLmFsbFN1cGVyRGVjbGFyaW5nVHlw
ZU5hbWVzID09IG51bGwpIHsKIAkJCQlkZWNsYXJpbmdMZXZlbCA9IElOQUNDVVJBVEVfTUFUQ0g7
CiAJCQl9IGVsc2UgewotCQkJCWlmIChyZXNvbHZlTGV2ZWxBc1N1cGVySW52b2NhdGlvbihtZXRo
b2RSZWNlaXZlclR5cGUsIG1ldGhvZC5wYXJhbWV0ZXJzLCB0cnVlKSkgewotCQkJCQlkZWNsYXJp
bmdMZXZlbCA9IG1ldGhvZExldmVsIC8vIHNpbmNlIHRoaXMgaXMgYW4gQUNDVVJBVEVfTUFUQ0gg
c28gcmV0dXJuIHRoZSBwb3NzaWJseSB3ZWFrZXIgbWF0Y2gKLQkJCQkJCXwgU1VQRVJfSU5WT0NB
VElPTl9GTEFWT1I7IC8vIHRoaXMgaXMgYW4gb3ZlcnJpZGRlbiBtZXRob2QgPT4gYWRkIGZsYXZv
ciB0byByZXR1cm5lZCBsZXZlbAorCQkJCWNoYXJbXVtdW10gc3VwZXJUeXBlTmFtZXMgPSAobWV0
aG9kLmlzRGVmYXVsdCgpICYmIHRoaXMucGF0dGVybi5mb2N1cyA9PSBudWxsKSA/IHRoaXMuc2Ft
ZVBrZ1N1cGVyRGVjbGFyaW5nVHlwZU5hbWVzOiB0aGlzLmFsbFN1cGVyRGVjbGFyaW5nVHlwZU5h
bWVzOworCQkJCWlmIChzdXBlclR5cGVOYW1lcyAhPSBudWxsICYmIHJlc29sdmVMZXZlbEFzU3Vw
ZXJJbnZvY2F0aW9uKG1ldGhvZFJlY2VpdmVyVHlwZSwgbWV0aG9kLnBhcmFtZXRlcnMsIHN1cGVy
VHlwZU5hbWVzLCB0cnVlKSkgeworCQkJCQkJZGVjbGFyaW5nTGV2ZWwgPSBtZXRob2RMZXZlbCAv
LyBzaW5jZSB0aGlzIGlzIGFuIEFDQ1VSQVRFX01BVENIIHNvIHJldHVybiB0aGUgcG9zc2libHkg
d2Vha2VyIG1hdGNoCisJCQkJCQkJfCBTVVBFUl9JTlZPQ0FUSU9OX0ZMQVZPUjsgLy8gdGhpcyBp
cyBhbiBvdmVycmlkZGVuIG1ldGhvZCA9PiBhZGQgZmxhdm9yIHRvIHJldHVybmVkIGxldmVsCiAJ
CQkJfQogCQkJfQogCQl9CkBAIC02OTIsMTEgKzcwNSwxNCBAQAogICogUmV0dXJucyBJTkFDQ1VS
QVRFX01BVENIIGlmIHJlc29sdmUgZmFpbHMKICAqIFJldHVybnMgSU1QT1NTSUJMRV9NQVRDSCBp
ZiBpdCBkb2Vzbid0LgogICovCi1wcm90ZWN0ZWQgaW50IHJlc29sdmVMZXZlbEFzU3VidHlwZShj
aGFyW10gc2ltcGxlUGF0dGVybiwgY2hhcltdIHF1YWxpZmllZFBhdHRlcm4sIFJlZmVyZW5jZUJp
bmRpbmcgdHlwZSwgY2hhcltdIG1ldGhvZE5hbWUsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBl
cykgeworcHJvdGVjdGVkIGludCByZXNvbHZlTGV2ZWxBc1N1YnR5cGUoY2hhcltdIHNpbXBsZVBh
dHRlcm4sIGNoYXJbXSBxdWFsaWZpZWRQYXR0ZXJuLCBSZWZlcmVuY2VCaW5kaW5nIHR5cGUsIGNo
YXJbXSBtZXRob2ROYW1lLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMsIGNoYXJbXSBwYWNr
YWdlTmFtZSwgYm9vbGVhbiBpc0RlZmF1bHQpIHsKIAlpZiAodHlwZSA9PSBudWxsKSByZXR1cm4g
SU5BQ0NVUkFURV9NQVRDSDsKIAogCWludCBsZXZlbCA9IHJlc29sdmVMZXZlbEZvclR5cGUoc2lt
cGxlUGF0dGVybiwgcXVhbGlmaWVkUGF0dGVybiwgdHlwZSk7CiAJaWYgKGxldmVsICE9IElNUE9T
U0lCTEVfTUFUQ0gpIHsKKwkJaWYgKGlzRGVmYXVsdCAmJiAhQ2hhck9wZXJhdGlvbi5lcXVhbHMo
cGFja2FnZU5hbWUsIHR5cGUucXVhbGlmaWVkUGFja2FnZU5hbWUoKSkpIHsKKwkJCXJldHVybiBJ
TVBPU1NJQkxFX01BVENIOworCQl9CiAJCU1ldGhvZEJpbmRpbmcgbWV0aG9kID0gYXJndW1lbnRU
eXBlcyA9PSBudWxsID8gbnVsbCA6IGdldE1ldGhvZEJpbmRpbmcodHlwZSwgbWV0aG9kTmFtZSwg
YXJndW1lbnRUeXBlcyk7CiAJCWlmICgoKG1ldGhvZCAhPSBudWxsICYmICFtZXRob2QuaXNBYnN0
cmFjdCgpKSB8fCAhdHlwZS5pc0Fic3RyYWN0KCkpICYmICF0eXBlLmlzSW50ZXJmYWNlKCkpIHsg
Ly8gaWYgY29uY3JldGUsIHRoZW4gbWV0aG9kIGlzIG92ZXJyaWRkZW4KIAkJCWxldmVsIHw9IE9W
RVJSSURERU5fTUVUSE9EX0ZMQVZPUjsKQEAgLTcwNiw3ICs3MjIsNyBAQAogCiAJLy8gbWF0Y2hl
cyBzdXBlcmNsYXNzCiAJaWYgKCF0eXBlLmlzSW50ZXJmYWNlKCkgJiYgIUNoYXJPcGVyYXRpb24u
ZXF1YWxzKHR5cGUuY29tcG91bmROYW1lLCBUeXBlQ29uc3RhbnRzLkpBVkFfTEFOR19PQkpFQ1Qp
KSB7Ci0JCWxldmVsID0gcmVzb2x2ZUxldmVsQXNTdWJ0eXBlKHNpbXBsZVBhdHRlcm4sIHF1YWxp
ZmllZFBhdHRlcm4sIHR5cGUuc3VwZXJjbGFzcygpLCBtZXRob2ROYW1lLCBhcmd1bWVudFR5cGVz
KTsKKwkJbGV2ZWwgPSByZXNvbHZlTGV2ZWxBc1N1YnR5cGUoc2ltcGxlUGF0dGVybiwgcXVhbGlm
aWVkUGF0dGVybiwgdHlwZS5zdXBlcmNsYXNzKCksIG1ldGhvZE5hbWUsIGFyZ3VtZW50VHlwZXMs
IHBhY2thZ2VOYW1lLCBpc0RlZmF1bHQpOwogCQlpZiAobGV2ZWwgIT0gSU1QT1NTSUJMRV9NQVRD
SCkgewogCQkJaWYgKGFyZ3VtZW50VHlwZXMgIT0gbnVsbCkgewogCQkJCS8vIG5lZWQgdG8gdmVy
aWZ5IGlmIG1ldGhvZCBtYXkgYmUgb3ZlcnJpZGRlbgpAQCAtNzMwLDcgKzc0Niw3IEBACiAJUmVm
ZXJlbmNlQmluZGluZ1tdIGludGVyZmFjZXMgPSB0eXBlLnN1cGVySW50ZXJmYWNlcygpOwogCWlm
IChpbnRlcmZhY2VzID09IG51bGwpIHJldHVybiBJTkFDQ1VSQVRFX01BVENIOwogCWZvciAoaW50
IGkgPSAwOyBpIDwgaW50ZXJmYWNlcy5sZW5ndGg7IGkrKykgewotCQlsZXZlbCA9IHJlc29sdmVM
ZXZlbEFzU3VidHlwZShzaW1wbGVQYXR0ZXJuLCBxdWFsaWZpZWRQYXR0ZXJuLCBpbnRlcmZhY2Vz
W2ldLCBtZXRob2ROYW1lLCBudWxsKTsKKwkJbGV2ZWwgPSByZXNvbHZlTGV2ZWxBc1N1YnR5cGUo
c2ltcGxlUGF0dGVybiwgcXVhbGlmaWVkUGF0dGVybiwgaW50ZXJmYWNlc1tpXSwgbWV0aG9kTmFt
ZSwgbnVsbCwgcGFja2FnZU5hbWUsIGlzRGVmYXVsdCk7CiAJCWlmIChsZXZlbCAhPSBJTVBPU1NJ
QkxFX01BVENIKSB7CiAJCQlpZiAoIXR5cGUuaXNBYnN0cmFjdCgpICYmICF0eXBlLmlzSW50ZXJm
YWNlKCkpIHsgLy8gaWYgY29uY3JldGUgY2xhc3MsIHRoZW4gbWV0aG9kIGlzIG92ZXJyaWRkZW4K
IAkJCQlsZXZlbCB8PSBPVkVSUklEREVOX01FVEhPRF9GTEFWT1I7CkBAIC03NDUsMTAgKzc2MSwx
MCBAQAogICogUmV0dXJuIHdoZXRoZXIgdGhlIGdpdmVuIHR5cGUgYmluZGluZyBvciBvbmUgb2Yg
aXRzIHBvc3NpYmxlIHN1cGVyIGludGVyZmFjZXMKICAqIG1hdGNoZXMgYSB0eXBlIGluIHRoZSBk
ZWNsYXJpbmcgdHlwZSBuYW1lcyBoaWVyYXJjaHkuCiAgKi8KLXByaXZhdGUgYm9vbGVhbiByZXNv
bHZlTGV2ZWxBc1N1cGVySW52b2NhdGlvbihSZWZlcmVuY2VCaW5kaW5nIHR5cGUsIFR5cGVCaW5k
aW5nW10gYXJndW1lbnRUeXBlcywgYm9vbGVhbiBtZXRob2RBbHJlYWR5VmVyaWZpZWQpIHsKK3By
aXZhdGUgYm9vbGVhbiByZXNvbHZlTGV2ZWxBc1N1cGVySW52b2NhdGlvbihSZWZlcmVuY2VCaW5k
aW5nIHR5cGUsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcywgY2hhcltdW11bXSBzdXBlclR5
cGVOYW1lcywgYm9vbGVhbiBtZXRob2RBbHJlYWR5VmVyaWZpZWQpIHsKIAljaGFyW11bXSBjb21w
b3VuZE5hbWUgPSB0eXBlLmNvbXBvdW5kTmFtZTsKLQlmb3IgKGludCBpID0gMCwgbWF4ID0gdGhp
cy5hbGxTdXBlckRlY2xhcmluZ1R5cGVOYW1lcy5sZW5ndGg7IGkgPCBtYXg7IGkrKykgewotCQlp
ZiAoQ2hhck9wZXJhdGlvbi5lcXVhbHModGhpcy5hbGxTdXBlckRlY2xhcmluZ1R5cGVOYW1lc1tp
XSwgY29tcG91bmROYW1lKSkgeworCWZvciAoaW50IGkgPSAwLCBtYXggPSBzdXBlclR5cGVOYW1l
cy5sZW5ndGg7IGkgPCBtYXg7IGkrKykgeworCQlpZiAoQ2hhck9wZXJhdGlvbi5lcXVhbHMoc3Vw
ZXJUeXBlTmFtZXNbaV0sIGNvbXBvdW5kTmFtZSkpIHsKIAkJCS8vIG5lZWQgdG8gdmVyaWZ5IGlm
IHRoZSB0eXBlIGltcGxlbWVudHMgdGhlIHBhdHRlcm4gbWV0aG9kCiAJCQlpZiAobWV0aG9kQWxy
ZWFkeVZlcmlmaWVkKSByZXR1cm4gdHJ1ZTsgLy8gYWxyZWFkeSB2ZXJpZmllZCBiZWZvcmUgZW50
ZXIgaW50byB0aGlzIG1ldGhvZCAoc2VlIHJlc29sdmVMZXZlbChNZXNzYWdlU2VuZCkpCiAJCQlN
ZXRob2RCaW5kaW5nW10gbWV0aG9kcyA9IHR5cGUuZ2V0TWV0aG9kcyh0aGlzLnBhdHRlcm4uc2Vs
ZWN0b3IpOwpAQCAtNzgwLDcgKzc5Niw3IEBACiAJCVJlZmVyZW5jZUJpbmRpbmdbXSBpbnRlcmZh
Y2VzID0gdHlwZS5zdXBlckludGVyZmFjZXMoKTsKIAkJaWYgKGludGVyZmFjZXMgPT0gbnVsbCkg
cmV0dXJuIGZhbHNlOwogCQlmb3IgKGludCBpID0gMDsgaSA8IGludGVyZmFjZXMubGVuZ3RoOyBp
KyspIHsKLQkJCWlmIChyZXNvbHZlTGV2ZWxBc1N1cGVySW52b2NhdGlvbihpbnRlcmZhY2VzW2ld
LCBhcmd1bWVudFR5cGVzLCBmYWxzZSkpIHsKKwkJCWlmIChyZXNvbHZlTGV2ZWxBc1N1cGVySW52
b2NhdGlvbihpbnRlcmZhY2VzW2ldLCBhcmd1bWVudFR5cGVzLCBzdXBlclR5cGVOYW1lcywgZmFs
c2UpKSB7CiAJCQkJcmV0dXJuIHRydWU7CiAJCQl9CiAJCX0KZGlmZiAtLWdpdCBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gv
bWF0Y2hpbmcvU3VwZXJUeXBlTmFtZXNDb2xsZWN0b3IuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL3NlYXJjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9zZWFyY2gvbWF0Y2hpbmcv
U3VwZXJUeXBlTmFtZXNDb2xsZWN0b3IuamF2YQppbmRleCA4ZWFlODcwLi43ZmM2ZjFmIDEwMDY0
NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9zZWFyY2gvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvcmUvc2VhcmNoL21hdGNoaW5nL1N1cGVyVHlwZU5hbWVzQ29sbGVjdG9yLmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvc2VhcmNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b3JlL3NlYXJjaC9tYXRjaGluZy9TdXBlclR5cGVOYW1lc0NvbGxlY3Rvci5qYXZhCkBAIC0xLDUg
KzEsNSBAQAogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwg
MjAwOCBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwg
MjAxMiBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQu
IFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRl
IGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2Ug
djEuMAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFp
bGFibGUgYXQKQEAgLTEzLDcgKzEzLDYgQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5jb3JlLnJ1bnRp
bWUuSVByb2dyZXNzTW9uaXRvcjsKIGltcG9ydCBvcmcuZWNsaXBzZS5jb3JlLnJ1bnRpbWUuU3Vi
UHJvZ3Jlc3NNb25pdG9yOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLio7Ci1pbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmNvcmUuSUNvbXBpbGF0aW9uVW5pdDsKIGltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuY29yZS5jb21waWxlci5DaGFyT3BlcmF0aW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5jb3JlLnNlYXJjaC4qOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxl
ci5BU1RWaXNpdG9yOwpAQCAtNDUsMTkgKzQ0LDE5IEBACiAJCXB1YmxpYyBib29sZWFuIHZpc2l0
KFR5cGVEZWNsYXJhdGlvbiB0eXBlRGVjbGFyYXRpb24sIEJsb2NrU2NvcGUgc2NvcGUpIHsKIAkJ
CVJlZmVyZW5jZUJpbmRpbmcgYmluZGluZyA9IHR5cGVEZWNsYXJhdGlvbi5iaW5kaW5nOwogCQkJ
aWYgKFN1cGVyVHlwZU5hbWVzQ29sbGVjdG9yLnRoaXMubWF0Y2hlcyhiaW5kaW5nKSkKLQkJCQlj
b2xsZWN0U3VwZXJUeXBlTmFtZXMoYmluZGluZyk7CisJCQkJY29sbGVjdFN1cGVyVHlwZU5hbWVz
KGJpbmRpbmcsIGJpbmRpbmcuY29tcG91bmROYW1lKTsKIAkJCXJldHVybiB0cnVlOwogCQl9CiAJ
CXB1YmxpYyBib29sZWFuIHZpc2l0KFR5cGVEZWNsYXJhdGlvbiB0eXBlRGVjbGFyYXRpb24sIENv
bXBpbGF0aW9uVW5pdFNjb3BlIHNjb3BlKSB7CiAJCQlSZWZlcmVuY2VCaW5kaW5nIGJpbmRpbmcg
PSB0eXBlRGVjbGFyYXRpb24uYmluZGluZzsKIAkJCWlmIChTdXBlclR5cGVOYW1lc0NvbGxlY3Rv
ci50aGlzLm1hdGNoZXMoYmluZGluZykpCi0JCQkJY29sbGVjdFN1cGVyVHlwZU5hbWVzKGJpbmRp
bmcpOworCQkJCWNvbGxlY3RTdXBlclR5cGVOYW1lcyhiaW5kaW5nLCBiaW5kaW5nLmNvbXBvdW5k
TmFtZSk7CiAJCQlyZXR1cm4gdHJ1ZTsKIAkJfQogCQlwdWJsaWMgYm9vbGVhbiB2aXNpdChUeXBl
RGVjbGFyYXRpb24gbWVtYmVyVHlwZURlY2xhcmF0aW9uLCBDbGFzc1Njb3BlIHNjb3BlKSB7CiAJ
CQlSZWZlcmVuY2VCaW5kaW5nIGJpbmRpbmcgPSBtZW1iZXJUeXBlRGVjbGFyYXRpb24uYmluZGlu
ZzsKIAkJCWlmIChTdXBlclR5cGVOYW1lc0NvbGxlY3Rvci50aGlzLm1hdGNoZXMoYmluZGluZykp
Ci0JCQkJY29sbGVjdFN1cGVyVHlwZU5hbWVzKGJpbmRpbmcpOworCQkJCWNvbGxlY3RTdXBlclR5
cGVOYW1lcyhiaW5kaW5nLCBiaW5kaW5nLmNvbXBvdW5kTmFtZSk7CiAJCQlyZXR1cm4gdHJ1ZTsK
IAkJfQogCQlwdWJsaWMgYm9vbGVhbiB2aXNpdChGaWVsZERlY2xhcmF0aW9uIGZpZWxkRGVjbGFy
YXRpb24sIE1ldGhvZFNjb3BlIHNjb3BlKSB7CkBAIC04Miw2ICs4MSw5IEBACiBjaGFyW11bXVtd
IHJlc3VsdDsKIGludCByZXN1bHRJbmRleDsKIAorY2hhcltdW11bXSBzYW1lUGFja2FnZVN1cGVy
VHlwZU5hbWU7IC8vIHNldCBvbmx5IGlmIGZvY3VzIGlzIG51bGwKK2ludCBzYW1lUGFja2FnZUlu
ZGV4OworCiBwdWJsaWMgU3VwZXJUeXBlTmFtZXNDb2xsZWN0b3IoCiAJU2VhcmNoUGF0dGVybiBw
YXR0ZXJuLAogCWNoYXJbXSB0eXBlU2ltcGxlTmFtZSwKQEAgLTk4LDYgKzEwMCwyMSBAQAogCXRo
aXMucHJvZ3Jlc3NNb25pdG9yID0gcHJvZ3Jlc3NNb25pdG9yOwogfQogCitwcml2YXRlIGJvb2xl
YW4gYWRkSWZTYW1lUGFja2FnZShjaGFyW11bXSBjb21wb3VuZE5hbWUsIGNoYXJbXVtdIHBhdGgp
IHsKKwlpZiAoY29tcG91bmROYW1lLmxlbmd0aCAhPSBwYXRoLmxlbmd0aCkgcmV0dXJuIGZhbHNl
OworCWludCByZXN1bHRMZW5ndGggPSB0aGlzLnNhbWVQYWNrYWdlU3VwZXJUeXBlTmFtZS5sZW5n
dGg7CisJZm9yIChpbnQgaSA9IDA7IGkgPCByZXN1bHRMZW5ndGg7IGkrKykKKwkJaWYgKENoYXJP
cGVyYXRpb24uZXF1YWxzKHRoaXMuc2FtZVBhY2thZ2VTdXBlclR5cGVOYW1lW2ldLCBjb21wb3Vu
ZE5hbWUpKSByZXR1cm4gZmFsc2U7IC8vIGFscmVhZHkga25vd24KKwkKKwlmb3IgKGludCBpID0g
MCwgbGVuZ3RoID0gY29tcG91bmROYW1lLmxlbmd0aCAtIDE7IGkgPCBsZW5ndGg7IGkgKyspIHsK
KwkJaWYgKCFDaGFyT3BlcmF0aW9uLmVxdWFscyhjb21wb3VuZE5hbWVbaV0sIHBhdGhbaV0pKSBy
ZXR1cm4gZmFsc2U7CisJfQorCWlmIChyZXN1bHRMZW5ndGggPT0gdGhpcy5zYW1lUGFja2FnZUlu
ZGV4KQorCQlTeXN0ZW0uYXJyYXljb3B5KHRoaXMuc2FtZVBhY2thZ2VTdXBlclR5cGVOYW1lLCAw
LCB0aGlzLnNhbWVQYWNrYWdlU3VwZXJUeXBlTmFtZSA9IG5ldyBjaGFyW3Jlc3VsdExlbmd0aCoy
XVtdW10sIDAsIHJlc3VsdExlbmd0aCk7CisJdGhpcy5zYW1lUGFja2FnZVN1cGVyVHlwZU5hbWVb
dGhpcy5zYW1lUGFja2FnZUluZGV4KytdID0gY29tcG91bmROYW1lOworCXJldHVybiB0cnVlOwor
fQorCiBwcm90ZWN0ZWQgdm9pZCBhZGRUb1Jlc3VsdChjaGFyW11bXSBjb21wb3VuZE5hbWUpIHsK
IAlpbnQgcmVzdWx0TGVuZ3RoID0gdGhpcy5yZXN1bHQubGVuZ3RoOwogCWZvciAoaW50IGkgPSAw
OyBpIDwgcmVzdWx0TGVuZ3RoOyBpKyspCkBAIC0xMDcsNiArMTI0LDcgQEAKIAkJU3lzdGVtLmFy
cmF5Y29weSh0aGlzLnJlc3VsdCwgMCwgdGhpcy5yZXN1bHQgPSBuZXcgY2hhcltyZXN1bHRMZW5n
dGgqMl1bXVtdLCAwLCByZXN1bHRMZW5ndGgpOwogCXRoaXMucmVzdWx0W3RoaXMucmVzdWx0SW5k
ZXgrK10gPSBjb21wb3VuZE5hbWU7CiB9CisKIC8qCiAgKiBQYXJzZSB0aGUgZ2l2ZW4gY29tcGlh
dGlvbiB1bml0IGFuZCBidWlsZCBpdHMgdHlwZSBiaW5kaW5ncy4KICAqLwpAQCAtMTQxLDcgKzE1
OSw3IEBACiAJCQlpZiAodGhpcy50eXBlLmlzQmluYXJ5KCkpIHsKIAkJCQlCaW5hcnlUeXBlQmlu
ZGluZyBiaW5kaW5nID0gdGhpcy5sb2NhdG9yLmNhY2hlQmluYXJ5VHlwZSh0aGlzLnR5cGUsIG51
bGwpOwogCQkJCWlmIChiaW5kaW5nICE9IG51bGwpCi0JCQkJCWNvbGxlY3RTdXBlclR5cGVOYW1l
cyhiaW5kaW5nKTsKKwkJCQkJY29sbGVjdFN1cGVyVHlwZU5hbWVzKGJpbmRpbmcsIG51bGwpOwog
CQkJfSBlbHNlIHsKIAkJCQlJQ29tcGlsYXRpb25Vbml0IHVuaXQgPSB0aGlzLnR5cGUuZ2V0Q29t
cGlsYXRpb25Vbml0KCk7CiAJCQkJU291cmNlVHlwZSBzb3VyY2VUeXBlID0gKFNvdXJjZVR5cGUp
IHRoaXMudHlwZTsKQEAgLTE1MCw3ICsxNjgsNyBAQAogCQkJCWlmIChwYXJzZWRVbml0ICE9IG51
bGwpIHsKIAkJCQkJVHlwZURlY2xhcmF0aW9uIHR5cGVEZWNsID0gbmV3IEFTVE5vZGVGaW5kZXIo
cGFyc2VkVW5pdCkuZmluZFR5cGUodGhpcy50eXBlKTsKIAkJCQkJaWYgKHR5cGVEZWNsICE9IG51
bGwgJiYgdHlwZURlY2wuYmluZGluZyAhPSBudWxsKQotCQkJCQkJY29sbGVjdFN1cGVyVHlwZU5h
bWVzKHR5cGVEZWNsLmJpbmRpbmcpOworCQkJCQkJY29sbGVjdFN1cGVyVHlwZU5hbWVzKHR5cGVE
ZWNsLmJpbmRpbmcsIG51bGwpOwogCQkJCX0KIAkJCX0KIAkJfSBjYXRjaCAoQWJvcnRDb21waWxh
dGlvbiBlKSB7CkBAIC0xNzEsNiArMTg5LDcgQEAKIAlVdGlsLnNvcnQocGF0aHMpOyAvLyBzb3J0
IGJ5IHByb2plY3RzCiAJSmF2YVByb2plY3QgcHJldmlvdXNQcm9qZWN0ID0gbnVsbDsKIAl0aGlz
LnJlc3VsdCA9IG5ldyBjaGFyWzFdW11bXTsKKwl0aGlzLnNhbWVQYWNrYWdlU3VwZXJUeXBlTmFt
ZSA9IG5ldyBjaGFyWzFdW11bXTsKIAl0aGlzLnJlc3VsdEluZGV4ID0gMDsKIAlmb3IgKGludCBp
ID0gMCwgbGVuZ3RoID0gcGF0aHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKIAkJdHJ5IHsK
QEAgLTE5MSw3ICsyMTAsNyBAQAogCQkJCUlDbGFzc0ZpbGUgY2xhc3NGaWxlID0gKElDbGFzc0Zp
bGUpIG9wZW5hYmxlOwogCQkJCUJpbmFyeVR5cGVCaW5kaW5nIGJpbmRpbmcgPSB0aGlzLmxvY2F0
b3IuY2FjaGVCaW5hcnlUeXBlKGNsYXNzRmlsZS5nZXRUeXBlKCksIG51bGwpOwogCQkJCWlmICht
YXRjaGVzKGJpbmRpbmcpKQotCQkJCQljb2xsZWN0U3VwZXJUeXBlTmFtZXMoYmluZGluZyk7CisJ
CQkJCWNvbGxlY3RTdXBlclR5cGVOYW1lcyhiaW5kaW5nLCBiaW5kaW5nLmNvbXBvdW5kTmFtZSk7
CiAJCQl9CiAJCX0gY2F0Y2ggKEFib3J0Q29tcGlsYXRpb24gZSkgewogCQkJLy8gaWdub3JlOiBj
b250aW51ZSB3aXRoIG5leHQgZWxlbWVudApAQCAtMjA2LDExICsyMjUsMTUgQEAKIC8qKgogICog
Q29sbGVjdHMgdGhlIG5hbWVzIG9mIGFsbCB0aGUgc3VwZXJ0eXBlcyBvZiB0aGUgZ2l2ZW4gdHlw
ZS4KICAqLwotcHJvdGVjdGVkIHZvaWQgY29sbGVjdFN1cGVyVHlwZU5hbWVzKFJlZmVyZW5jZUJp
bmRpbmcgYmluZGluZykgeworcHJvdGVjdGVkIHZvaWQgY29sbGVjdFN1cGVyVHlwZU5hbWVzKFJl
ZmVyZW5jZUJpbmRpbmcgYmluZGluZywgY2hhcltdW10gcGF0aCkgewogCVJlZmVyZW5jZUJpbmRp
bmcgc3VwZXJjbGFzcyA9IGJpbmRpbmcuc3VwZXJjbGFzcygpOworCWlmIChwYXRoICE9IG51bGwp
IHsKKwkJYm9vbGVhbiBzYW1lUGFja2FnZSA9IGFkZElmU2FtZVBhY2thZ2Uoc3VwZXJjbGFzcy5j
b21wb3VuZE5hbWUsIHBhdGgpOworCQlpZiAoIXNhbWVQYWNrYWdlKSBwYXRoID0gbnVsbDsKKwl9
CiAJaWYgKHN1cGVyY2xhc3MgIT0gbnVsbCkgewogCQlhZGRUb1Jlc3VsdChzdXBlcmNsYXNzLmNv
bXBvdW5kTmFtZSk7Ci0JCWNvbGxlY3RTdXBlclR5cGVOYW1lcyhzdXBlcmNsYXNzKTsKKwkJY29s
bGVjdFN1cGVyVHlwZU5hbWVzKHN1cGVyY2xhc3MsIG51bGwpOwogCX0KIAogCVJlZmVyZW5jZUJp
bmRpbmdbXSBpbnRlcmZhY2VzID0gYmluZGluZy5zdXBlckludGVyZmFjZXMoKTsKQEAgLTIxOCw3
ICsyNDEsNyBAQAogCQlmb3IgKGludCBpID0gMDsgaSA8IGludGVyZmFjZXMubGVuZ3RoOyBpKysp
IHsKIAkJCVJlZmVyZW5jZUJpbmRpbmcgaW50ZXJmYWNlQmluZGluZyA9IGludGVyZmFjZXNbaV07
CiAJCQlhZGRUb1Jlc3VsdChpbnRlcmZhY2VCaW5kaW5nLmNvbXBvdW5kTmFtZSk7Ci0JCQljb2xs
ZWN0U3VwZXJUeXBlTmFtZXMoaW50ZXJmYWNlQmluZGluZyk7CisJCQljb2xsZWN0U3VwZXJUeXBl
TmFtZXMoaW50ZXJmYWNlQmluZGluZywgbnVsbCk7CiAJCX0KIAl9CiB9CkBAIC0yNTQsNiArMjc3
LDkgQEAKIAkJdGhpcy5wcm9ncmVzc01vbml0b3IgPT0gbnVsbCA/IG51bGwgOiBuZXcgU3ViUHJv
Z3Jlc3NNb25pdG9yKHRoaXMucHJvZ3Jlc3NNb25pdG9yLCAxMDApKTsKIAlyZXR1cm4gcGF0aENv
bGxlY3Rvci5nZXRQYXRocygpOwogfQorcHVibGljIGNoYXJbXVtdW10gZ2V0U2FtZVBhY2thZ2VT
dXBlclR5cGVOYW1lcygpIHsKKwlyZXR1cm4gdGhpcy5zYW1lUGFja2FnZVN1cGVyVHlwZU5hbWU7
Cit9CiBwcm90ZWN0ZWQgYm9vbGVhbiBtYXRjaGVzKGNoYXJbXVtdIGNvbXBvdW5kTmFtZSkgewog
CWludCBsZW5ndGggPSBjb21wb3VuZE5hbWUubGVuZ3RoOwogCWlmIChsZW5ndGggPT0gMCkgcmV0
dXJuIGZhbHNlOwo=
</data>

          </attachment>
      

    </bug>

</bugzilla>