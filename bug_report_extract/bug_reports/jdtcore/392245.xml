<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>392245</bug_id>
          
          <creation_ts>2012-10-17 18:30:00 -0400</creation_ts>
          <short_desc>[1.8][compiler][null] Define whether / how @NonNullByDefault applies to TYPE_USE locations</short_desc>
          <delta_ts>2014-03-10 14:48:41 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>392099</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Stephan Herrmann">stephan.herrmann</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>chalin</cc>
    
    <cc>jarthana</cc>
    
    <cc>markus_keller</cc>
    
    <cc>mernst</cc>
    
    <cc>Sebastian.Zarnekow</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="61846"
          type_id="1"
          status="+"
          setter="jarthana"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2173275</commentid>
    <comment_count>0</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-10-17 18:30:18 -0400</bug_when>
    <thetext>From bug 392099 comment 4:
&gt; How will @NonNullByDefault be applied to TYPE_USE annotations?

Repeating my own comment:

Tricky case is
  @NonNullByDefault
  void takeList(List&lt;String&gt; list) { }

Worst case scenario: we may have to introduce another parameter to the @NonNullByDefault annotation, s.t. like:
  @NonNullByDefault(location={PARAMETER, TYPE_USE})

Assuming, we&apos;ll have this parameter, what should be its default?
Then if we agree on the default and agree that this default makes sense *always*, we can spare the parameter :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2185859</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-11-20 17:31:06 -0500</bug_when>
    <thetext>Here&apos;s a new twist to this bug:

Depending on the final decision regarding bug 392099 comment 17 we may end up having *only* TYPE_USE null annotations at level 1.8.

This needn&apos;t and shouldn&apos;t bring any changes in semantics, but in that light it would look funny to use s.t. like &quot;@NonNullByDefault(location=PARAMETER)&quot; despite the fact that @NonNull is no longer an annotation for parameters, but only for types (in the positions of parameters, ...).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2217018</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-02-14 14:32:50 -0500</bug_when>
    <thetext>See also bug 400420 for pre 1.8 times.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2367245</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-22 16:13:23 -0500</bug_when>
    <thetext>Let me collect some aspects for null-defaults that potentially are of interest for fine-tuning (see also prev. disc. in bug 400420 comment 9):

Coarse grained location 
-----------------------
(distinctions that would already apply to SE5 annotations):

 - method parameter
 - method return
 - field

Separating the default for fields from the rest has been explicitly requested, I&apos;m not particular sure if parameters and return need separate treatment, probably not.
Defaults for local variables is explicitly *not* desired. Here inference does a better job than a default possibly could.

 - public methods
 - non-public methods

I can&apos;t recall any request (I think scientific publications mention this distinction, but I don&apos;t have a reference at hand). I&apos;d consider this as a possible future extension. For the time being we might just try to avoid any incompatible design decisions.

Other locations like type parameter declaration, superclass, superinterfaces are possible candidates, too. However, I don&apos;t believe that a default could help here, and after all, these are much smaller in number than other kinds of type uses. Defaults are intended to reduce the sheer number of necessary annotations; not much to be gained by defaults for &quot;extends&quot; clause etc.

Explicitly not affected by defaults will be casts and instanceof expressions.


File grained location
---------------------
Each type use to which a @NonNullByDefault could possibly apply, may be structured
 - type arguments
 - type argument bounds
 - array dimensions &amp; leaf type

I assume that normally users will expect the default to apply to the outer type only, i.e, not to type arguments &amp; bounds, and only to the outermost dimension of an array type.

Considering, however, the effort of writing 
  Map&lt;@NonNull String, @NonNull Person&gt;
at each occurrence, suggests that defaults would be very useful also in this realm.

Theoretically, it could be interesting to control the depth of types, so that nested generics (at a given depth) could be excluded from the default. But the potential gain may not balance the complexity this would bring. Perhaps s.t. for the future, not for now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2367247</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-22 16:47:43 -0500</bug_when>
    <thetext>Given the above analysis (comments welcome, of course), what kind of annotation design would possibly meet those requirements?


One design option is to treat coarse/fine grained topics as orthogonal, so the annotation should have two independent attributes.

Coarse grain:
-------------
As a low-cost version we could indeed use the existing ElementType enum, but
- this contains more elements than make sense in our case
- we cannot add more elements (now or in the future)
- the constant METHOD is actually a bad match for saying &quot;return type&quot; :)

Hence, I propose we introduce our own TypeLocation type, s.t. like

  public enum TypeLocation { PARAMETER, RETURN_TYPE, FIELD }

If later we want to distinguish more (e.g., public/non-public) this might be added using new constants. Of course, if we want to be very specific, just one enumeration is not a very rich model, but for the sake of usability / comprehensibility I wouldn&apos;t suggest more complexity than this enum.


Given an annotation attribute of type TypeLocation, we no longer need the boolean value, since
  @NonNullByDefault(false)
will be written as
  @NonNullByDefault(locations={})


Fine grain:
-----------

We certainly don&apos;t want the full wealth of the &apos;target_type&apos; as of JVMS 4.7.20-A.  And no official enum exists for that anyway.

My first guess would be to use s.t. like

    public enum TypeAnnotationTarget {
	TYPE_PARAMETER, TYPE_BOUND, TYPE_ARGUMENT, ARRAY_DETAIL;
    }

----

Putting the above together, we&apos;d have s.t. like this annotation declaration:

@Documented
@Retention(RetentionPolicy.CLASS)
@Target({ PACKAGE, TYPE, METHOD, CONSTRUCTOR, FIELD })
public @interface NonNullByDefault {
	TypeLocation[] value() default { PARAMETER, RETURN_TYPE, FIELD };
	TypeAnnotationTarget[] detail() default {};
}

By way of the attribute defaults a plain @NonNullByDefault would have the same meaning as in previous versions. Using the standard name &apos;value&apos; for the first argument allows the @NonNullByDefault(false) idiom to be written as @NonNullByDefault({}).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2367250</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-22 17:16:52 -0500</bug_when>
    <thetext>The model of two orthogonal attributes relies on the assumption that null-defaults should only ever apply to locations mentioned in the first (TypeLocation) attribute.

We might want to briefly challenge this assumption, e.g. by asking: is flow analysis really strong enough to infer nullness at all type details? What if we have:

  List&lt;@NonNull Person&gt; persons() { ... }
  List&lt;@Nullable Person&gt; maybePersons() { ... }
  
  List&lt;Person&gt; l = b ? persons() : maybePersons();

Can flow analysis make any sense of this?

Ideally I&apos;d like to flag such code as bogus, because strictly speaking variable &apos;l&apos; would change its type depending on the value of b, but this will surely offend _some_ users (I&apos;m not predicting their number :) ).

Asked differently, what rules would allow us to infer null annotations for type details in a way that those annotations don&apos;t need to be explicitly mentioned in most cases?

We might borrow from the concept of effectively final locals: we could start resolution with the hypothesis that all assignments to a variable have the same nullness type details (so &apos;l&apos; could be List&lt;@NonNull Person&gt; or null, but never List&lt;@Nullable Person&gt;). If this hypothesis holds during resolution of the entire method body we&apos;re good. If, OTOH, we encounter two assignments with different nullness type details, the type is inferred as having unspecified nullness for its details.

_Should_ we come to the conclusion that for type details we still need many annotations even on local variables, than we might consider using default nullness on type details regardless of the (coarse grain) location.
This could be encoded by blending both enums into one.

My current thinking, however, is that the top-priority regarding locals should be to make nullness type details inferrable, and discourage too much variance in this regard (e.g., flag &apos;l&apos; above as erroneous indeed).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2367349</commentid>
    <comment_count>6</comment_count>
    <who name="Michael Ernst">mernst</who>
    <bug_when>2014-02-23 19:56:47 -0500</bug_when>
    <thetext>@NonNull remains the most useful default for every location, both because that is the common case and for compatibility across the source code.  So, @NonNullByDefault should apply to these locations that you mentioned:
 - type arguments
 - type argument bounds
 - array dimensions &amp; leaf type
A programmer can override these wherever desired.

On the other hand, there are a few places that should not be defaulted to @NonNull, because inference can do a better job.  You already mentioned local variables.  Here is a more complete list of the locations that should not be defaulted to @NonNull:
  casts
  local variables, including resource variables in the try-with-resources construct
  instanceof
Also, these locations should not be defaulted to @NonNull for consistency with the programmer-specified intention:
  implicit upper bounds

The Checker Framework calls the above policy &quot;CLIMB to top&quot;, and its manual explains the rationale for these choices: http://types.cs.washington.edu/checker-framework/current/checkers-manual.html#climb-to-top .

These choices work well for the Checker Framework, so Eclipse can take advantage of that experience.  (The Checker Framework tried two other defaulting strategies in the past, but they didn&apos;t work as well as CLIMB-to-top.)  It will also benefit users for the different @NonNull annotations to be treated consistently by different tools.  It would be unfortunate for the defaulting rules to differ between Eclipse, IntelliJ, the Checker Framework, etc.

I don&apos;t have a strong preference as to the syntax to express the defaults, so long as the CLIMB-to-top policy is expressible.  It should probably be the default, too.  The link above shows how the Checker Framework expresses this default.


I don&apos;t see any benefit to making the defaults different for public vs. private methods.  The same thing goes for changing the default at some level of generic arguments.  Both of those seem merely confusing.  They would lead to confusion as the programmer refactored, and they would complicate refactoring tools.


I&apos;m not very fond of your  &quot;fine-grained&quot; vs. &quot;coarse-grained&quot; terminology (and I think you aren&apos;t either; it was just a strawman for discussion.)  For one thing, the names are not very informative.  Equally importantly, they seem to me to address different, orthogonal issues, but the current names imply that fine-grained would refine coarse-grained.


I agree that this code needs to be flagged as bogus:
  List&lt;Person&gt; l = b ? persons() : maybePersons();</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2368160</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-25 09:11:49 -0500</bug_when>
    <thetext>Thanks for weighing in, Mike!

I think there&apos;s much convergence already. Before going into detail I should ask one question, where I&apos;m not sure whether we speak of the same:

If, e.g., the default affects type arguments but not locals, what does this mean for a type argument in a local variable declaration? Is it affected (because all type arguments are affected) or not (because local variables are left alone)?

My idea is indeed a master-detail concept, where the option for local variables would override the option for type arguments in this example. As you disagree with the &quot;coarse/fine-grained&quot; terminology (which is a strawman, indeed), could this be more than a matter of names?

Let&apos;s take maybe the example of fields because these are more likely to be affected by nonnull default than locals: what rationale exists, when selecting default for type arguments but not for fields to interpret
  List&lt;Person&gt; personField;
one way or the other (List&lt;Person&gt; vs. List&lt;@NonNull Person&gt;).

Thinking about this example, I&apos;m surprised to realize that the @NonNull type argument is actually easier to guarantee than the &apos;@NonNull List&apos; part would be. Interesting ... so the combination List&lt;@NonNull Person&gt; does make sense in a way. OTOH, I&apos;m anticipating users who want to express &quot;just leave me alone with any @NonNull business on any of my (field|locals)&quot;. Would that be a reasonable request, or should we convince them otherwise?


BTW, I couldn&apos;t find the definition of your type DefaultLocation. What options does it provide?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2370207</commentid>
    <comment_count>8</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-02 08:51:51 -0500</bug_when>
    <thetext>After thinking more about defaults on type arguments, I&apos;m now convinced that such defaults should apply everywhere, i.e. if you say
   @NonNullByDefault({...,TYPE_ARGUMENT,...})
   ...
   List&lt;Person&gt;
the type argument should be interpreted as &apos;@NonNull Person&apos;, no matter _where_ in the code this type occurs.
Rationale: (I) It would be unnecessarily difficult to assign values between different locations, if types have different specification simply due to how the null default is applied. (II) Reasons why fields, parameters, locals should be treated separately only really concern the entire value (can it be null or not?), not the details of its type.

Next via bug 429384 I ensured that upper and lower bounds correctly consider null annotations, e.g.,
OK:
   List&lt;? super @NonNull Person&gt; l1 = new ArrayList&lt;@Nullable Person&gt;();
ERROR:
   List&lt;? extends @NonNull Person&gt; l2 = new ArrayList&lt;@Nullable Person&gt;();
This transports the inherent asymmetry between upper and lower bounds into the matter at hand. So if we apply a @NonNull default on all type bounds, it has the following implications for lower bounds:
- no effective constraint added, the type parameter can still match the corresponding @Nullable type
- this default, however, implies a change from &quot;legacy&quot; types, where we only report  &quot;unchecked&quot; warnings to fully specified types where problems are reported as errors.



At this point it indeed suffices to define @NonNullByDefault roughly like this:

@Target({ PACKAGE, TYPE, METHOD, CONSTRUCTOR })
public @interface NonNullByDefault {
	DefaultLocation value() default { PARAMETER, RETURN_TYPE, FIELD, TYPE_ARGUMENT, TYPE_BOUND };
}


Three questions remain: 
(A) Do we want to admit this annotation to more locations?
(B) What are the exact values of enum DefaultLocation?
(C) What is the default for the &apos;value&apos; attribute?


Ad (A):
I imagine that for interfacing with legacy code, it would be useful to turn off defaults in various locations, so I want to be able to express the following, no matter where this code would occur:
  @NonNullByDefault({}) List&lt;Person&gt; l = getPersonsFromLegacyAPI();
Thus I&apos;d like to add to the above list:
  FIELD, CONSTRUCTOR, LOCAL_VARIABLE
as locations where the @NonNullByDefault can be specified. I don&apos;t expect this to be used for positively defining defaults (should happen at higher levels), but for cancelling defaults from outer scopes.

Ad (B):
My list currently is:
 - PARAMETER (method parameter declaration)
 - RETURN_TYPE
 - FIELD
 - TYPE_PARAMETER (declaration in a class or method declaration)
 - TYPE_BOUND
 - TYPE_ARGUMENT
 - ARRAY_ELEMENTS (at any dimension except the top level array itself)

I see one special case that should not normally be subject to the default: application of a type parameter as a type argument:
  &lt;T&gt; List&lt;T&gt; singleton(T t)
Here it would be bad to imply that the return type is List&lt;@NonNull T&gt;. If T itself is unconstrained so should be its applications. We could accommodate this by adding one more constant to DefaultLocation:
 - TYPE_PARAMETER_USE
which would mainly serve the purpose of documenting that this animal is not covered by any of the other constants. I prefer this approach over hiding such details in the javadoc of the other constants.

More constants can be added later, if desired, e.g., CAST (a faithful implementation of which would require to generate additional runtime checks, which, however, is a no go for ecj), LOCAL_VARIABLE (not recommended) etc.

Maybe I should add that wildcards do accept null annotations, but I would never put them under the control of @NonNullByDefault, i.e., &quot;@NonNull ?&quot; is s.t. you can write explicitly (interesting, e.g., if a wildcard has multiple bounds), but it will never be achieved by using @NonNullByDefault.

Ad (C):
Here my proposal is:

  { PARAMETER, RETURN_TYPE, FIELD, TYPE_PAREMETER, TYPE_BOUND, TYPE_ARGUMENT }

From the proposed constants this only omits ARRAY_ELEMENTS and TYPE_PARAMETER_USE.

The elements covered by the CLIMB-to-top rule are excluded as we wouldn&apos;t even have a constant representing those locations :) (could be added later, but certainly not to be included in the default).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2370208</commentid>
    <comment_count>9</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-02 09:16:57 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #8)

TLDR;

Here&apos;s my proposal for @NonNullByDefault for the upcoming release (minus javadoc, to be added once the proposal gets an initial +1):

public enum DefaultLocation {
	PARAMETER,
	RETURN_TYPE,
	FIELD,
	TYPE_PARAMETER,
	TYPE_BOUND,
	TYPE_ARGUMENT,
	TYPE_PARAMETER_USE,
	ARRAY_ELEMENTS
}

@Documented
@Retention(RetentionPolicy.CLASS)
@Target({ PACKAGE, TYPE, METHOD, CONSTRUCTOR, FIELD, LOCAL_VARIABLE })
public @interface NonNullByDefault {
    DefaultLocation value() default { PARAMETER, RETURN_TYPE, FIELD, TYPE_PAREMETER, TYPE_BOUND, TYPE_ARGUMENT };
}


If nested contexts have @NonNullByDefault annotations with different attribute values, the inner most applicable default takes over completely, i.e., lists of DefaultLocation will *never* be merged / filtered in any way, but completely override.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372038</commentid>
    <comment_count>10</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-03-05 14:15:28 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #9)
This direction is fine for me if it matches the available research results.

The type of NonNullByDefault#value() should be DefaultLocation[].
Please spell-check TYPE_PAREMETER.
Shouldn&apos;t ARRAY_ELEMENTS be called ARRAY_COMPONENTS by the nomenclature in JLS8 10? ARRAY_CONTENTS would also be OK.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372120</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-05 18:17:29 -0500</bug_when>
    <thetext>(In reply to Markus Keller from comment #10)
&gt; (In reply to Stephan Herrmann from comment #9)
&gt; This direction is fine for me if it matches the available research results.
&gt; 
&gt; The type of NonNullByDefault#value() should be DefaultLocation[].
&gt; Please spell-check TYPE_PAREMETER.
&gt; Shouldn&apos;t ARRAY_ELEMENTS be called ARRAY_COMPONENTS by the nomenclature in
&gt; JLS8 10? ARRAY_CONTENTS would also be OK.

Thanks for weighing in Markus and Mike.

Stephan, I have studied this and have no objections to the proposal. Please 
proceed. Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372136</commentid>
    <comment_count>12</comment_count>
      <attachid>240568</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-05 19:40:36 -0500</bug_when>
    <thetext>Created attachment 240568
DefaultLocation with javadoc</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372140</commentid>
    <comment_count>13</comment_count>
      <attachid>240569</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-05 19:55:43 -0500</bug_when>
    <thetext>Created attachment 240569
NonNullByDefault with javadoc

Thanks all,

I&apos;ve uploaded the two files DefaultLocation.java (new) and NonNullByDefault.java (updated) with javadoc.

I adopted the name ARRAY_CONTENTS, thanks Markus!

To prevent premature introduction of any constants which might turn out to be unsound I omitted TYPE_PARAMETER_USE for now. The name wasn&apos;t chosen very well, and in the end it felt more consistent to just mention wildcards and type variable use as never being affected by the default.

Also listing TYPE_PARAMETER as part of the default was bogus, since it would overrule the exclusion of implicit bounds (according to the CLIMB-to-top rule).


Once more, comments are welcome. I will also give it another round of proof-reading tomorrow.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373300</commentid>
    <comment_count>14</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-07 20:27:31 -0500</bug_when>
    <thetext>Per private communication from Stephan, we are doing this just after Java 8 GA.
Adjusting target to reflect that.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373372</commentid>
    <comment_count>15</comment_count>
      <attachid>240682</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-08 10:27:41 -0500</bug_when>
    <thetext>Created attachment 240682
annotation update with minimal changes in the compiler

Please consider this patch for BETA_JAVA8 GA.

It updates the annotations so we don&apos;t have to make breaking API changes just after releasing 2.0.0 of the annotation bundle.

Adjustment in the compiler: alternatively interpret an empty annotation argument ({}) in the same way as we interpreted &quot;false&quot; in the old model, viz. as canceling defaults from outer scopes (both source and binary types).

Adjustment in tests: when testing against 1.8 replace &quot;@NonNullByDefault(false)&quot; with &quot;@NonNullByDefault({})&quot;. Updated test jars will follow in a sec.

Additional warning: when explicitly using some of the new detail arguments, the compiler currently issues this warning:
&quot;Arguments controling the details of the nullness default are not yet evaluated by the analysis.&quot;

This is to be removed, once we release the real implementation.

A test for the new warning has been added.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373373</commentid>
    <comment_count>16</comment_count>
      <attachid>240683</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-08 10:29:13 -0500</bug_when>
    <thetext>Created attachment 240683
Test jar

Test jar (1/2) to be placed into org.eclipse.jdt.core.tests.compiler/workspace</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373374</commentid>
    <comment_count>17</comment_count>
      <attachid>240684</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-08 10:30:18 -0500</bug_when>
    <thetext>Created attachment 240684
Test jar (2)

Test jar (2/2) to be placed into org.eclipse.jdt.core.tests.compiler/workspace</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373376</commentid>
    <comment_count>18</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-08 10:39:30 -0500</bug_when>
    <thetext>Jay, thanks also for reviewing the changes.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373430</commentid>
    <comment_count>19</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-03-08 22:04:07 -0500</bug_when>
    <thetext>+1 for the patch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373434</commentid>
    <comment_count>20</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-08 22:24:47 -0500</bug_when>
    <thetext>Stephan, proceed to release - I tried releasing it, but noticed that the
new test is passing without the jars being downloaded and placed in the
right directories suggested - so didn&apos;t want to take a chance committing
some operator error. Thanks. (not saying this indicates a problem)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373508</commentid>
    <comment_count>21</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-09 10:25:00 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #20)
&gt; Stephan, proceed to release - I tried releasing it, but noticed that the
&gt; new test is passing without the jars being downloaded and placed in the
&gt; right directories suggested - so didn&apos;t want to take a chance committing
&gt; some operator error. Thanks. (not saying this indicates a problem)

Tests passing without the updated jars indicates we leniently accept the old annotation from class files, which I believe is good. Just the new code paths wouldn&apos;t be exercised during tests without the new jars.

The patch has been released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=1fd3c9fc562cda07c874ee80cb4f5d32730433f0

I filed a new bug 429958 for the compiler part of evaluating the new annotation details (targeting 4.4 M7). Thus the current bug regarding update of the annotations themselves is resolved.

Thanks!


PS: I converted the +1 from comment 19 into a review +, I hope you don&apos;t mind this little protocol violation :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373983</commentid>
    <comment_count>22</comment_count>
    <who name="Michael Ernst">mernst</who>
    <bug_when>2014-03-10 14:09:38 -0400</bug_when>
    <thetext>(Sorry for the slow response; much of this goes to junk mail because I&apos;m not interested in the implementation details, only the specification.) 

&gt; If, e.g., the default affects type arguments but not locals, what does this
&gt; mean for a type argument in a local variable declaration? Is it affected
&gt; (because all type arguments are affected) or not (because local variables are
&gt; left alone)?

By &quot;locals&quot;, I meant the top-level type.  Type arguments are not treated
differently depending on the location where they appear.

&gt; After thinking more about defaults on type arguments, I&apos;m now convinced
&gt; that such defaults should apply everywhere, i.e. if you say
&gt;    @NonNullByDefault({...,TYPE_ARGUMENT,...})
&gt;    ...
&gt;    List&lt;Person&gt;
&gt; the type argument should be interpreted as &apos;@NonNull Person&apos;, no matter
&gt; _where_ in the code this type occurs.

Right, we agree.

&gt; I&apos;m anticipating users who want to express &quot;just leave me alone
&gt; with any @NonNull business on any of my (field|locals)&quot;.

If a user doesn&apos;t want to use any automated checking for null pointer
errors, then they don&apos;t have to use the system.  If that is not what you
are talking about, then I think I&apos;m not understanding what you mean by
&quot;just leave me alone&quot;; can you make that more specific so that we can have
a discussion about it?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2373995</commentid>
    <comment_count>23</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-10 14:48:41 -0400</bug_when>
    <thetext>(In reply to Michael Ernst from comment #22)
&gt;(Sorry for the slow response; much of this goes to junk mail because I&apos;m not 
&gt; interested in the implementation details, only the specification.) 

Yea, sorry for the volume of bugzilla mails. That&apos;s BTW one reason why I separated compiler issues into their own bug 429958  :)

The released &quot;specification&quot; in terms of documented annotations can be found here:
- http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/tree/org.eclipse.jdt.annotation/src/org/eclipse/jdt/annotation/DefaultLocation.java?h=BETA_JAVA8&amp;id=1fd3c9fc562cda07c874ee80cb4f5d32730433f0
- http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/tree/org.eclipse.jdt.annotation/src/org/eclipse/jdt/annotation/NonNullByDefault.java?h=BETA_JAVA8&amp;id=1fd3c9fc562cda07c874ee80cb4f5d32730433f0


&gt; &gt; I&apos;m anticipating users who want to express &quot;just leave me alone
&gt; &gt; with any @NonNull business on any of my (field|locals)&quot;.
&gt; 
&gt; If a user doesn&apos;t want to use any automated checking for null pointer
&gt; errors, then they don&apos;t have to use the system.  If that is not what you
&gt; are talking about, then I think I&apos;m not understanding what you mean by
&gt; &quot;just leave me alone&quot;; can you make that more specific so that we can have
&gt; a discussion about it?

You dropped the important part of that ficticious citation :)
  &quot;... on any of my (fields|locals)&quot;

I was expecting that some users might prefer to continue using null annotations as contracts on method signatures and only there.

But since all this is speculation and since I came to agree with your version, let&apos;s just wait what users _will_ complain about (they will find something, I&apos;m sure) :)</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="0"
              isprivate="0"
          >
            <attachid>240568</attachid>
            <date>2014-03-05 19:40:00 -0500</date>
            <delta_ts>2014-03-08 10:27:41 -0500</delta_ts>
            <desc>DefaultLocation with javadoc</desc>
            <filename>DefaultLocation.java</filename>
            <type>text/plain</type>
            <size>4550</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioKICogQ29weXJpZ2h0IChjKSAyMDE0IFN0ZXBoYW4gSGVy
cm1hbm4gYW5kIG90aGVycy4KICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFu
ZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIg
dGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICogd2hpY2ggYWNj
b21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKICogaHR0cDov
L3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKICoKICogVGhpcyBpcyBhbiBpbXBs
ZW1lbnRhdGlvbiBvZiBhbiBlYXJseS1kcmFmdCBzcGVjaWZpY2F0aW9uIGRldmVsb3BlZCB1bmRl
ciB0aGUgSmF2YQogKiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFi
bGUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gcHVycG9zZXMKICogb25seS4gVGhlIGNvZGUg
aXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkgc3BlY2lmaWNhdGlvbiBvZiB0aGUgSkNQLgogKgog
KiBDb250cmlidXRvcnM6CiAqICAgICBTdGVwaGFuIEhlcnJtYW5uIC0gaW5pdGlhbCBBUEkgYW5k
IGltcGxlbWVudGF0aW9uCiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwpwYWNrYWdlIG9yZy5lY2xp
cHNlLmpkdC5hbm5vdGF0aW9uOwoKLyoqCiAqIExvY2F0aW9ucyB0aGF0IGNhbiBiZSBhZmZlY3Rl
ZCBieSBhIHtAbGluayBOb25OdWxsQnlEZWZhdWx0fSBhbm5vdGF0aW9uLgogKiBFYWNoIGNvbnN0
YW50IG9mIHRoaXMgZW51bSBkZXNjcmliZXMgYSBzcGVjaWZpYyBraW5kIG9mIHR5cGUgdXNlLgog
KiBXaWxkY2FyZHMgYW5kIHRoZSB1c2Ugb2YgdHlwZSB2YXJpYWJsZXMgYXJlIGFsd2F5cyBleGNs
dWRlZCBmcm9tIHtAbGluayBOb25OdWxsQnlEZWZhdWx0fS4KICogQHNpbmNlIDIuMAogKi8KcHVi
bGljIGVudW0gRGVmYXVsdExvY2F0aW9uIHsKCQoJLyoqCgkgKiBEZWZpbmVzIHRoYXQgYSBnaXZl
biB7QGxpbmsgTm9uTnVsbEJ5RGVmYXVsdH0gYW5ub3RhdGlvbiBzaG91bGQgYWZmZWN0IGFsbCB1
bmFubm90YXRlZAoJICogcGFyYW1ldGVycyBvZiBhbnkgbWV0aG9kIG9yIGNvbnN0cnVjdG9yIHdp
dGhpbiB0aGUgc2NvcGUgb2YgdGhlIGFubm90YXRlZCBkZWNsYXJhdGlvbi4KCSAqIAoJICogPGgy
PkV4YW1wbGU8L2gyPgoJICogPHByZT4gQE5vbk51bGxCeURlZmF1bHQoUEFSQU1FVEVSKQoJICog
aW50ZXJmYWNlIFggewoJICogICAgIHZvaWQgcHJpbnQoTnVtYmVyIG4pOwoJICogfTwvcHJlPgoJ
ICogPHA+CgkgKiBIZXJlIDxjb2RlPk51bWJlcjwvY29kZT4gd2lsbCBiZSBpbnRlcnByZXRlZCBh
cyA8Y29kZT5ATm9uTnVsbCBOdW1iZXI8L2NvZGU+LgoJICogPC9wPgoJICovCglQQVJBTUVURVIs
CgkKCS8qKgoJICogRGVmaW5lcyB0aGF0IGEgZ2l2ZW4ge0BsaW5rIE5vbk51bGxCeURlZmF1bHR9
IGFubm90YXRpb24gc2hvdWxkIGFmZmVjdCBhbGwgdW5hbm5vdGF0ZWQKCSAqIG1ldGhvZCByZXR1
cm4gdHlwZXMgd2l0aGluIHRoZSBzY29wZSBvZiB0aGUgYW5ub3RhdGVkIGRlY2xhcmF0aW9uLgoJ
ICogCgkgKiA8aDI+RXhhbXBsZTwvaDI+CgkgKiA8cHJlPiBATm9uTnVsbEJ5RGVmYXVsdChSRVRV
Uk5fVFlQRSkKCSAqIGludGVyZmFjZSBYIHsKCSAqICAgICBOdW1iZXIgZ2V0TnVtYmVyKCk7Cgkg
KiB9PC9wcmU+CgkgKiA8cD4KCSAqIEhlcmUgPGNvZGU+TnVtYmVyPC9jb2RlPiB3aWxsIGJlIGlu
dGVycHJldGVkIGFzIDxjb2RlPkBOb25OdWxsIE51bWJlcjwvY29kZT4uCgkgKiA8L3A+CgkgKi8K
CVJFVFVSTl9UWVBFLAoJCgkvKioKCSAqIERlZmluZXMgdGhhdCBhIGdpdmVuIHtAbGluayBOb25O
dWxsQnlEZWZhdWx0fSBhbm5vdGF0aW9uIHNob3VsZCBhZmZlY3QgYWxsIHVuYW5ub3RhdGVkCgkg
KiBmaWVsZCB0eXBlcyB3aXRoaW4gdGhlIHNjb3BlIG9mIHRoZSBhbm5vdGF0ZWQgZGVjbGFyYXRp
b24uCgkgKiAKCSAqIDxoMj5FeGFtcGxlPC9oMj4KCSAqIDxwcmU+IEBOb25OdWxsQnlEZWZhdWx0
KEZJRUxEKQoJICogY2xhc3MgWCB7CgkgKiAgICAgTnVtYmVyIG51bWJlciA9IEludGVnZXIuTUFY
X1ZBTFVFOwoJICogfTwvcHJlPgoJICogPHA+CgkgKiBIZXJlIDxjb2RlPk51bWJlcjwvY29kZT4g
d2lsbCBiZSBpbnRlcnByZXRlZCBhcyA8Y29kZT5ATm9uTnVsbCBOdW1iZXI8L2NvZGU+LgoJICog
PC9wPgoJICovCglGSUVMRCwKCQoJLyoqCgkgKiBEZWZpbmVzIHRoYXQgYSBnaXZlbiB7QGxpbmsg
Tm9uTnVsbEJ5RGVmYXVsdH0gYW5ub3RhdGlvbiBzaG91bGQgYWZmZWN0IGFsbCB1bmFubm90YXRl
ZAoJICogdHlwZSBwYXJhbWV0ZXIgZGVjbGFyYXRpb25zIHdpdGhpbiB0aGUgc2NvcGUgb2YgdGhl
IGFubm90YXRlZCBkZWNsYXJhdGlvbi4KCSAqIAoJICogPGgyPkV4YW1wbGU8L2gyPgoJICogPHBy
ZT4gQE5vbk51bGxCeURlZmF1bHQoVFlQRV9QQVJBTUVURVIpCgkgKiBjbGFzcyBYIHsKCSAqICAg
ICAmbHQ7VCZndDsgVCBpZGVudGl0eShUIHQpIHsgcmV0dXJuIHQ7IH0KCSAqIH08L3ByZT4KCSAq
IDxwPgoJICogSGVyZSA8Y29kZT4mbHQ7VCZndDs8L2NvZGU+IHdpbGwgYmUgaW50ZXJwcmV0ZWQg
YXMgPGNvZGU+Jmx0O0BOb25OdWxsIFQmZ3Q7PC9jb2RlPi4KCSAqIDwvcD4KCSAqLwoJVFlQRV9Q
QVJBTUVURVIsCgkKCS8qKgoJICogRGVmaW5lcyB0aGF0IGEgZ2l2ZW4ge0BsaW5rIE5vbk51bGxC
eURlZmF1bHR9IGFubm90YXRpb24gc2hvdWxkIGFmZmVjdCBhbGwgdW5hbm5vdGF0ZWQKCSAqIGV4
cGxpY2l0IHR5cGUgYm91bmRzIHdpdGhpbiB0aGUgc2NvcGUgb2YgdGhlIGFubm90YXRlZCBkZWNs
YXJhdGlvbi4KCSAqIAoJICogPGgyPkV4YW1wbGU8L2gyPgoJICogPHByZT4gQE5vbk51bGxCeURl
ZmF1bHQoUkVUVVJOX1RZUEUpCgkgKiBpbnRlcmZhY2UgWCB7CgkgKiAgICAgJmx0O1QgZXh0ZW5k
cyBOdW1iZXImZ3Q7IHZvaWQgcHJvY2VzcyhUIHQsIExpc3QmbHQ7PyBzdXBlciBOdW1iZXImZ3Q7
IGwpOwoJICogfTwvcHJlPgoJICogPHA+CgkgKiBIZXJlIGJvdGggb2NjdXJyZW5jZXMgb2YgPGNv
ZGU+TnVtYmVyPC9jb2RlPiB3aWxsIGJlIGludGVycHJldGVkIGFzIDxjb2RlPkBOb25OdWxsIE51
bWJlcjwvY29kZT4uCgkgKiA8L3A+CgkgKi8KCVRZUEVfQk9VTkQsCgkKCS8qKgoJICogRGVmaW5l
cyB0aGF0IGEgZ2l2ZW4ge0BsaW5rIE5vbk51bGxCeURlZmF1bHR9IGFubm90YXRpb24gc2hvdWxk
IGFmZmVjdCBhbGwgdW5hbm5vdGF0ZWQKCSAqIHR5cGUgYXJndW1lbnRzIHdpdGhpbiB0aGUgc2Nv
cGUgb2YgdGhlIGFubm90YXRlZCBkZWNsYXJhdGlvbiAoZXhjZXB0IHdpbGRjYXJkcyBhbmQKCSAq
IHR5cGUgdmFyaWFibGVzKS4KCSAqIAoJICogPGgyPkV4YW1wbGU8L2gyPgoJICogPHByZT4gQE5v
bk51bGxCeURlZmF1bHQoVFlQRV9BUkdVTUVOVCkKCSAqIGludGVyZmFjZSBYJmx0O1QmZ3Q7IHsK
CSAqICAgICB2b2lkIHByb2Nlc3MoTGlzdCZsdDtUJmd0OyB0bCwgTGlzdCZsdDtOdW1iZXImZ3Q7
IG5sKTsKCSAqIH08L3ByZT4KCSAqIDxwPgoJICogSGVyZSA8Y29kZT5OdW1iZXI8L2NvZGU+IHdp
bGwgYmUgaW50ZXJwcmV0ZWQgYXMgPGNvZGU+QE5vbk51bGwgTnVtYmVyPC9jb2RlPiwKCSAqIGJ1
dCB0aGUgdXNlIG9mIHR5cGUgdmFyaWFibGUgPGNvZGU+VDwvY29kZT4gaXMgbm90IGFmZmVjdGVk
LgoJICogPC9wPgoJICovCglUWVBFX0FSR1VNRU5ULAoKCS8qKgoJICogRGVmaW5lcyB0aGF0IGEg
Z2l2ZW4ge0BsaW5rIE5vbk51bGxCeURlZmF1bHR9IGFubm90YXRpb24gc2hvdWxkIGFmZmVjdCBh
bGwgdW5hbm5vdGF0ZWQKCSAqIGFycmF5IGNvbXBvbmVudHMgd2l0aGluIHRoZSBzY29wZSBvZiB0
aGUgYW5ub3RhdGVkIGRlY2xhcmF0aW9uLgoJICogCgkgKiA8aDI+RXhhbXBsZTwvaDI+CgkgKiA8
cHJlPiBATm9uTnVsbEJ5RGVmYXVsdChBUlJBWV9DT05URU5UUykKCSAqIGludGVyZmFjZSBYIHsK
CSAqICAgICBOdW1iZXJbXSBuMTsKCSAqICAgICBOdW1iZXJbXVtdIG4yOwoJICogfTwvcHJlPgoJ
ICogPHA+CgkgKiBUaGVzZSBkZWNsYXJhdGlvbnMgYXJlIGludGVycHJldGVkIGFzOgoJICogPHBy
ZT4gICAgJiM2NDtOb25OdWxsIE51bWJlciBbXSBuMTsKCSAqICAgICYjNjQ7Tm9uTnVsbCBOdW1i
ZXIgW10gQE5vbk51bGxbXSBuMjs8L3ByZT4KCSAqIEkuZS4sIGJvdGggZmllbGRzIGNhbiBzdGls
bCBiZSA8Y29kZT5udWxsPC9jb2RlPiAoc2VlIHRoZSB1bmFubm90YXRlZCBsZWZ0LW1vc3QgcGFp
cgoJICogb2YgYnJhY2tldHMpIGJ1dCBub25lIG9mIHRoZSA8ZW0+Y29udGVudHM8L2VtPiBvZiB0
aGVzZSBhcnJheXMgaXMgYWxsb3dlZCB0byBiZSAKCSAqIDxjb2RlPm51bGw8L2NvZGU+IChhdCBh
bnkgZGltZW5zaW9uKS4KCSAqIDwvcD4KCSAqLwoJQVJSQVlfQ09OVEVOVFMKfQo=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="0"
              isprivate="0"
          >
            <attachid>240569</attachid>
            <date>2014-03-05 19:55:00 -0500</date>
            <delta_ts>2014-03-08 10:27:41 -0500</delta_ts>
            <desc>NonNullByDefault with javadoc</desc>
            <filename>NonNullByDefault.java</filename>
            <type>text/plain</type>
            <size>3095</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioKICogQ29weXJpZ2h0IChjKSAyMDExLCAyMDE0IFN0ZXBo
YW4gSGVycm1hbm4gYW5kIG90aGVycy4KICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9n
cmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogKiBhcmUgbWFkZSBhdmFpbGFibGUg
dW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICogd2hp
Y2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKICog
aHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKICoKICogVGhpcyBpcyBh
biBpbXBsZW1lbnRhdGlvbiBvZiBhbiBlYXJseS1kcmFmdCBzcGVjaWZpY2F0aW9uIGRldmVsb3Bl
ZCB1bmRlciB0aGUgSmF2YQogKiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBh
dmFpbGFibGUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gcHVycG9zZXMKICogb25seS4gVGhl
IGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkgc3BlY2lmaWNhdGlvbiBvZiB0aGUgSkNQ
LgogKgogKiBDb250cmlidXRvcnM6CiAqICAgICBTdGVwaGFuIEhlcnJtYW5uIC0gaW5pdGlhbCBB
UEkgYW5kIGltcGxlbWVudGF0aW9uCiAqICAgICBJQk0gQ29ycG9yYXRpb24gLSBidWcgZml4ZXMK
ICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKiovCnBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmFubm90YXRp
b247CgppbXBvcnQgamF2YS5sYW5nLmFubm90YXRpb24uRWxlbWVudFR5cGU7CmltcG9ydCBzdGF0
aWMgb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uRGVmYXVsdExvY2F0aW9uLio7CgppbXBvcnQg
amF2YS5sYW5nLmFubm90YXRpb24uRG9jdW1lbnRlZDsKaW1wb3J0IGphdmEubGFuZy5hbm5vdGF0
aW9uLlJldGVudGlvbjsKaW1wb3J0IGphdmEubGFuZy5hbm5vdGF0aW9uLlJldGVudGlvblBvbGlj
eTsKaW1wb3J0IGphdmEubGFuZy5hbm5vdGF0aW9uLlRhcmdldDsKIAovKioKICogQXBwbHlpbmcg
dGhpcyBhbm5vdGF0aW9uIHRvIGEgZGVjbGFyYXRpb24gaGFzIHRoZSBlZmZlY3QgdGhhdCB0eXBl
IHJlZmVyZW5jZXMsCiAqIHdoaWNoIGFyZSBwYXJ0IG9mIHRoZSBkZWNsYXJhdGlvbiwgYW5kIGZv
ciB3aGljaCBhIG51bGwgYW5ub3RhdGlvbiBpcyBvdGhlcndpc2UgbGFja2luZywKICogc2hvdWxk
IGJlIGNvbnNpZGVyZWQgYXMge0BsaW5rIE5vbk51bGwgQE5vbk51bGx9LgogKiA8ZGw+CiAqIDxk
dD5Mb2NhdGlvbnM8L2R0PgogKiA8ZGQ+VGhpcyBhbm5vdGF0aW9uIGlzIHBlcm1pdHRlZCBmb3Ig
dGhlc2UgZGVjbGFyYXRpb25zOgogKiB7QGxpbmsgRWxlbWVudFR5cGUjUEFDS0FHRSBQQUNLQUdF
fSwge0BsaW5rIEVsZW1lbnRUeXBlI1RZUEUgVFlQRX0sIAogKiB7QGxpbmsgRWxlbWVudFR5cGUj
TUVUSE9EIE1FVEhPRH0sIHtAbGluayBFbGVtZW50VHlwZSNDT05TVFJVQ1RPUiBDT05TVFJVQ1RP
Un0sCiAqIHtAbGluayBFbGVtZW50VHlwZSNGSUVMRCBGSUVMRH0sIHtAbGluayBFbGVtZW50VHlw
ZSNMT0NBTF9WQVJJQUJMRSBMT0NBTF9WQVJJQUJMRX0uPC9kZD4KICogPGR0PkZpbmUgdHVuaW5n
PC9kdD4KICogPGRkPlRoZSBleGFjdCBlZmZlY3QgaXMgZnVydGhlciBjb250cm9sbGVkIGJ5IHRo
ZSBhdHRyaWJ1dGUge0BsaW5rICN2YWx1ZX0sIHNwZWNpZnlpbmcgd2hhdCAKICoga2luZHMgb2Yg
bG9jYXRpb25zIHdpdGhpbiB0aGUgZ2l2ZW4gZGVjbGFyYXRpb24gd2lsbCBiZSBhZmZlY3RlZC4g
U2VlIHtAbGluayBEZWZhdWx0TG9jYXRpb259CiAqIGZvciB0aGUgbWVhbmluZyBvZiB0aGUgYXZh
aWxhYmxlIHZhbHVlcy48L2RkPgogKiA8ZHQ+TmVzdGVkIGRlZmF1bHRzPC9kdD4KICogPGRkPklm
IHRoaXMgYW5ub3RhdGlvbiBpcyBhcHBsaWVkIHRvIGEgZGVjbGFyYXRpb24gdGhhdCBpcyBhbHJl
YWR5IGFmZmVjdGVkIGJ5IHRoZSBzYW1lCiAqIGFubm90YXRpb24gYXQgYW4gZW5jbG9zaW5nIHNj
b3BlLCB0aGUgaW5uZXIgYW5ub3RhdGlvbiA8ZW0+cmVwbGFjZXM8L2VtPiB0aGUgZWZmZWN0IG9m
IHRoZQogKiBvdXRlciBhbm5vdGF0aW9uIGZvciB0aGUgc2NvcGUgb2YgdGhlIGlubmVyIGRlY2xh
cmF0aW9uLjwvZGQ+CiAqIDxkdD5DYW5jZWxpbmcgYSBkZWZhdWx0PC9kdD4KICogPGRkPkluIHBh
cnRpY3VsYXIsIHNwZWNpZnlpbmcgYW4gZW1wdHkgdmFsdWUgKDxjb2RlPnt9PC9jb2RlPikgZm9y
IHRoZSB7QGxpbmsgI3ZhbHVlfQogKiBhdHRyaWJ1dGUgaGFzIHRoZSBlZmZlY3Qgb2YgY2FuY2Vs
aW5nIGFueSBudWxsIGRlZmF1bHRzIHRoYXQgbWlnaHQgYmUgZGVmaW5lZCBmb3IgYW55CiAqIGVu
Y2xvc2luZyBzY29wZS48L2RkPgogKiA8L2RsPgogKiA8cD4KICogTm90ZSB0aGF0IGZvciBhcHBs
eWluZyBhbiBhbm5vdGF0aW9uIHRvIGEgcGFja2FnZSwgYSBmaWxlIGJ5IHRoZSBuYW1lCiAqIDxj
b2RlPnBhY2thZ2UtaW5mby5qYXZhPC9jb2RlPiBpcyB1c2VkLgogKiA8L3A+CiAqIEBzaW5jZSAx
LjAKICovCkBEb2N1bWVudGVkCkBSZXRlbnRpb24oUmV0ZW50aW9uUG9saWN5LkNMQVNTKQpAVGFy
Z2V0KHsgRWxlbWVudFR5cGUuUEFDS0FHRSwgRWxlbWVudFR5cGUuVFlQRSwgRWxlbWVudFR5cGUu
TUVUSE9ELCBFbGVtZW50VHlwZS5DT05TVFJVQ1RPUiwgRWxlbWVudFR5cGUuRklFTEQsIEVsZW1l
bnRUeXBlLkxPQ0FMX1ZBUklBQkxFIH0pCnB1YmxpYyBAaW50ZXJmYWNlIE5vbk51bGxCeURlZmF1
bHQgewoJLyoqCgkgKiBTcGVjaWZpZXMgdGhlIHNldCBvZiBsb2NhdGlvbnMgd2l0aGluIHRoZSBh
bm5vdGF0ZWQgZGVjbGFyYXRpb24gdGhhdCBzaG91bGQgYmUgYWZmZWN0ZWQgYnkgdGhlIG5vbm51
bGwgZGVmYXVsdC4KCSAqIEBzaW5jZSAyLjAKCSAqLwoJRGVmYXVsdExvY2F0aW9uW10gdmFsdWUo
KSBkZWZhdWx0IHsgUEFSQU1FVEVSLCBSRVRVUk5fVFlQRSwgRklFTEQsIFRZUEVfQk9VTkQsIFRZ
UEVfQVJHVU1FTlQgfTsKfQo=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>240682</attachid>
            <date>2014-03-08 10:27:00 -0500</date>
            <delta_ts>2014-03-08 10:27:41 -0500</delta_ts>
            <desc>annotation update with minimal changes in the compiler</desc>
            <filename>Bug-392245--18compilernull-Define-whether---how-NonN.patch</filename>
            <type>text/plain</type>
            <size>24346</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvYW5ub3RhdGlvbi9EZWZhdWx0TG9jYXRpb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5hbm5v
dGF0aW9uL3NyYy9vcmcvZWNsaXBzZS9qZHQvYW5ub3RhdGlvbi9EZWZhdWx0TG9jYXRpb24uamF2
YQpuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwLi5mYmVlYTllCi0tLSAvZGV2L251
bGwKKysrIGIvb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24vc3JjL29yZy9lY2xpcHNlL2pkdC9h
bm5vdGF0aW9uL0RlZmF1bHRMb2NhdGlvbi5qYXZhCkBAIC0wLDAgKzEsMTM3IEBACisvKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKgorICogQ29weXJpZ2h0IChjKSAyMDE0IFN0ZXBoYW4gSGVycm1hbm4g
YW5kIG90aGVycy4KKyAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhl
IGFjY29tcGFueWluZyBtYXRlcmlhbHMKKyAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUg
dGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAorICogd2hpY2ggYWNjb21w
YW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKKyAqIGh0dHA6Ly93
d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCisgKgorICogVGhpcyBpcyBhbiBpbXBs
ZW1lbnRhdGlvbiBvZiBhbiBlYXJseS1kcmFmdCBzcGVjaWZpY2F0aW9uIGRldmVsb3BlZCB1bmRl
ciB0aGUgSmF2YQorICogQ29tbXVuaXR5IFByb2Nlc3MgKEpDUCkgYW5kIGlzIG1hZGUgYXZhaWxh
YmxlIGZvciB0ZXN0aW5nIGFuZCBldmFsdWF0aW9uIHB1cnBvc2VzCisgKiBvbmx5LiBUaGUgY29k
ZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGFueSBzcGVjaWZpY2F0aW9uIG9mIHRoZSBKQ1AuCisg
KgorICogQ29udHJpYnV0b3JzOgorICogICAgIFN0ZXBoYW4gSGVycm1hbm4gLSBpbml0aWFsIEFQ
SSBhbmQgaW1wbGVtZW50YXRpb24KKyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLworcGFja2FnZSBv
cmcuZWNsaXBzZS5qZHQuYW5ub3RhdGlvbjsKKworLyoqCisgKiBMb2NhdGlvbnMgdGhhdCBjYW4g
YmUgYWZmZWN0ZWQgYnkgYSB7QGxpbmsgTm9uTnVsbEJ5RGVmYXVsdH0gYW5ub3RhdGlvbi4KKyAq
IEVhY2ggY29uc3RhbnQgb2YgdGhpcyBlbnVtIGRlc2NyaWJlcyBhIHNwZWNpZmljIGtpbmQgb2Yg
dHlwZSB1c2UuCisgKiBXaWxkY2FyZHMgYW5kIHRoZSB1c2Ugb2YgdHlwZSB2YXJpYWJsZXMgYXJl
IGFsd2F5cyBleGNsdWRlZCBmcm9tIHtAbGluayBOb25OdWxsQnlEZWZhdWx0fS4KKyAqIEBzaW5j
ZSAyLjAKKyAqLworcHVibGljIGVudW0gRGVmYXVsdExvY2F0aW9uIHsKKwkKKwkvKioKKwkgKiBE
ZWZpbmVzIHRoYXQgYSBnaXZlbiB7QGxpbmsgTm9uTnVsbEJ5RGVmYXVsdH0gYW5ub3RhdGlvbiBz
aG91bGQgYWZmZWN0IGFsbCB1bmFubm90YXRlZAorCSAqIHBhcmFtZXRlcnMgb2YgYW55IG1ldGhv
ZCBvciBjb25zdHJ1Y3RvciB3aXRoaW4gdGhlIHNjb3BlIG9mIHRoZSBhbm5vdGF0ZWQgZGVjbGFy
YXRpb24uCisJICogCisJICogPGgyPkV4YW1wbGU8L2gyPgorCSAqIDxwcmU+IEBOb25OdWxsQnlE
ZWZhdWx0KFBBUkFNRVRFUikKKwkgKiBpbnRlcmZhY2UgWCB7CisJICogICAgIHZvaWQgcHJpbnQo
TnVtYmVyIG4pOworCSAqIH08L3ByZT4KKwkgKiA8cD4KKwkgKiBIZXJlIDxjb2RlPk51bWJlcjwv
Y29kZT4gd2lsbCBiZSBpbnRlcnByZXRlZCBhcyA8Y29kZT5ATm9uTnVsbCBOdW1iZXI8L2NvZGU+
LgorCSAqIDwvcD4KKwkgKi8KKwlQQVJBTUVURVIsCisJCisJLyoqCisJICogRGVmaW5lcyB0aGF0
IGEgZ2l2ZW4ge0BsaW5rIE5vbk51bGxCeURlZmF1bHR9IGFubm90YXRpb24gc2hvdWxkIGFmZmVj
dCBhbGwgdW5hbm5vdGF0ZWQKKwkgKiBtZXRob2QgcmV0dXJuIHR5cGVzIHdpdGhpbiB0aGUgc2Nv
cGUgb2YgdGhlIGFubm90YXRlZCBkZWNsYXJhdGlvbi4KKwkgKiAKKwkgKiA8aDI+RXhhbXBsZTwv
aDI+CisJICogPHByZT4gQE5vbk51bGxCeURlZmF1bHQoUkVUVVJOX1RZUEUpCisJICogaW50ZXJm
YWNlIFggeworCSAqICAgICBOdW1iZXIgZ2V0TnVtYmVyKCk7CisJICogfTwvcHJlPgorCSAqIDxw
PgorCSAqIEhlcmUgPGNvZGU+TnVtYmVyPC9jb2RlPiB3aWxsIGJlIGludGVycHJldGVkIGFzIDxj
b2RlPkBOb25OdWxsIE51bWJlcjwvY29kZT4uCisJICogPC9wPgorCSAqLworCVJFVFVSTl9UWVBF
LAorCQorCS8qKgorCSAqIERlZmluZXMgdGhhdCBhIGdpdmVuIHtAbGluayBOb25OdWxsQnlEZWZh
dWx0fSBhbm5vdGF0aW9uIHNob3VsZCBhZmZlY3QgYWxsIHVuYW5ub3RhdGVkCisJICogZmllbGQg
dHlwZXMgd2l0aGluIHRoZSBzY29wZSBvZiB0aGUgYW5ub3RhdGVkIGRlY2xhcmF0aW9uLgorCSAq
IAorCSAqIDxoMj5FeGFtcGxlPC9oMj4KKwkgKiA8cHJlPiBATm9uTnVsbEJ5RGVmYXVsdChGSUVM
RCkKKwkgKiBjbGFzcyBYIHsKKwkgKiAgICAgTnVtYmVyIG51bWJlciA9IEludGVnZXIuTUFYX1ZB
TFVFOworCSAqIH08L3ByZT4KKwkgKiA8cD4KKwkgKiBIZXJlIDxjb2RlPk51bWJlcjwvY29kZT4g
d2lsbCBiZSBpbnRlcnByZXRlZCBhcyA8Y29kZT5ATm9uTnVsbCBOdW1iZXI8L2NvZGU+LgorCSAq
IDwvcD4KKwkgKi8KKwlGSUVMRCwKKwkKKwkvKioKKwkgKiBEZWZpbmVzIHRoYXQgYSBnaXZlbiB7
QGxpbmsgTm9uTnVsbEJ5RGVmYXVsdH0gYW5ub3RhdGlvbiBzaG91bGQgYWZmZWN0IGFsbCB1bmFu
bm90YXRlZAorCSAqIHR5cGUgcGFyYW1ldGVyIGRlY2xhcmF0aW9ucyB3aXRoaW4gdGhlIHNjb3Bl
IG9mIHRoZSBhbm5vdGF0ZWQgZGVjbGFyYXRpb24uCisJICogCisJICogPGgyPkV4YW1wbGU8L2gy
PgorCSAqIDxwcmU+IEBOb25OdWxsQnlEZWZhdWx0KFRZUEVfUEFSQU1FVEVSKQorCSAqIGNsYXNz
IFggeworCSAqICAgICAmbHQ7VCZndDsgVCBpZGVudGl0eShUIHQpIHsgcmV0dXJuIHQ7IH0KKwkg
KiB9PC9wcmU+CisJICogPHA+CisJICogSGVyZSA8Y29kZT4mbHQ7VCZndDs8L2NvZGU+IHdpbGwg
YmUgaW50ZXJwcmV0ZWQgYXMgPGNvZGU+Jmx0O0BOb25OdWxsIFQmZ3Q7PC9jb2RlPi4KKwkgKiA8
L3A+CisJICovCisJVFlQRV9QQVJBTUVURVIsCisJCisJLyoqCisJICogRGVmaW5lcyB0aGF0IGEg
Z2l2ZW4ge0BsaW5rIE5vbk51bGxCeURlZmF1bHR9IGFubm90YXRpb24gc2hvdWxkIGFmZmVjdCBh
bGwgdW5hbm5vdGF0ZWQKKwkgKiBleHBsaWNpdCB0eXBlIGJvdW5kcyB3aXRoaW4gdGhlIHNjb3Bl
IG9mIHRoZSBhbm5vdGF0ZWQgZGVjbGFyYXRpb24uCisJICogCisJICogPGgyPkV4YW1wbGU8L2gy
PgorCSAqIDxwcmU+IEBOb25OdWxsQnlEZWZhdWx0KFRZUEVfQk9VTkQpCisJICogaW50ZXJmYWNl
IFggeworCSAqICAgICAmbHQ7VCBleHRlbmRzIE51bWJlciZndDsgdm9pZCBwcm9jZXNzKFQgdCwg
TGlzdCZsdDs/IHN1cGVyIE51bWJlciZndDsgbCk7CisJICogfTwvcHJlPgorCSAqIDxwPgorCSAq
IEhlcmUgYm90aCBvY2N1cnJlbmNlcyBvZiA8Y29kZT5OdW1iZXI8L2NvZGU+IHdpbGwgYmUgaW50
ZXJwcmV0ZWQgYXMgPGNvZGU+QE5vbk51bGwgTnVtYmVyPC9jb2RlPi4KKwkgKiA8L3A+CisJICov
CisJVFlQRV9CT1VORCwKKwkKKwkvKioKKwkgKiBEZWZpbmVzIHRoYXQgYSBnaXZlbiB7QGxpbmsg
Tm9uTnVsbEJ5RGVmYXVsdH0gYW5ub3RhdGlvbiBzaG91bGQgYWZmZWN0IGFsbCB1bmFubm90YXRl
ZAorCSAqIHR5cGUgYXJndW1lbnRzIHdpdGhpbiB0aGUgc2NvcGUgb2YgdGhlIGFubm90YXRlZCBk
ZWNsYXJhdGlvbiAoZXhjZXB0IHdpbGRjYXJkcyBhbmQKKwkgKiB0eXBlIHZhcmlhYmxlcykuCisJ
ICogCisJICogPGgyPkV4YW1wbGU8L2gyPgorCSAqIDxwcmU+IEBOb25OdWxsQnlEZWZhdWx0KFRZ
UEVfQVJHVU1FTlQpCisJICogaW50ZXJmYWNlIFgmbHQ7VCZndDsgeworCSAqICAgICB2b2lkIHBy
b2Nlc3MoTGlzdCZsdDtUJmd0OyB0bCwgTGlzdCZsdDtOdW1iZXImZ3Q7IG5sKTsKKwkgKiB9PC9w
cmU+CisJICogPHA+CisJICogSGVyZSA8Y29kZT5OdW1iZXI8L2NvZGU+IHdpbGwgYmUgaW50ZXJw
cmV0ZWQgYXMgPGNvZGU+QE5vbk51bGwgTnVtYmVyPC9jb2RlPiwKKwkgKiBidXQgdGhlIHVzZSBv
ZiB0eXBlIHZhcmlhYmxlIDxjb2RlPlQ8L2NvZGU+IGlzIG5vdCBhZmZlY3RlZC4KKwkgKiA8L3A+
CisJICovCisJVFlQRV9BUkdVTUVOVCwKKworCS8qKgorCSAqIERlZmluZXMgdGhhdCBhIGdpdmVu
IHtAbGluayBOb25OdWxsQnlEZWZhdWx0fSBhbm5vdGF0aW9uIHNob3VsZCBhZmZlY3QgYWxsIHVu
YW5ub3RhdGVkCisJICogYXJyYXkgY29tcG9uZW50cyB3aXRoaW4gdGhlIHNjb3BlIG9mIHRoZSBh
bm5vdGF0ZWQgZGVjbGFyYXRpb24uCisJICogCisJICogPGgyPkV4YW1wbGU8L2gyPgorCSAqIDxw
cmU+IEBOb25OdWxsQnlEZWZhdWx0KEFSUkFZX0NPTlRFTlRTKQorCSAqIGludGVyZmFjZSBYIHsK
KwkgKiAgICAgTnVtYmVyW10gbjE7CisJICogICAgIE51bWJlcltdW10gbjI7CisJICogfTwvcHJl
PgorCSAqIDxwPgorCSAqIFRoZXNlIGRlY2xhcmF0aW9ucyBhcmUgaW50ZXJwcmV0ZWQgYXM6CisJ
ICogPHByZT4gICAgJiM2NDtOb25OdWxsIE51bWJlciBbXSBuMTsKKwkgKiAgICAmIzY0O05vbk51
bGwgTnVtYmVyIFtdIEBOb25OdWxsW10gbjI7PC9wcmU+CisJICogSS5lLiwgYm90aCBmaWVsZHMg
Y2FuIHN0aWxsIGJlIDxjb2RlPm51bGw8L2NvZGU+IChzZWUgdGhlIHVuYW5ub3RhdGVkIGxlZnQt
bW9zdCBwYWlyCisJICogb2YgYnJhY2tldHMpIGJ1dCBub25lIG9mIHRoZSA8ZW0+Y29udGVudHM8
L2VtPiBvZiB0aGVzZSBhcnJheXMgaXMgYWxsb3dlZCB0byBiZSAKKwkgKiA8Y29kZT5udWxsPC9j
b2RlPiAoYXQgYW55IGRpbWVuc2lvbikuCisJICogPC9wPgorCSAqLworCUFSUkFZX0NPTlRFTlRT
Cit9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuYW5ub3RhdGlvbi9zcmMvb3JnL2VjbGlw
c2UvamR0L2Fubm90YXRpb24vTm9uTnVsbEJ5RGVmYXVsdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0
LmFubm90YXRpb24vc3JjL29yZy9lY2xpcHNlL2pkdC9hbm5vdGF0aW9uL05vbk51bGxCeURlZmF1
bHQuamF2YQppbmRleCAxZTgxYjA1Li5kYTJjNzVlIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5q
ZHQuYW5ub3RhdGlvbi9zcmMvb3JnL2VjbGlwc2UvamR0L2Fubm90YXRpb24vTm9uTnVsbEJ5RGVm
YXVsdC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uL3NyYy9vcmcvZWNsaXBz
ZS9qZHQvYW5ub3RhdGlvbi9Ob25OdWxsQnlEZWZhdWx0LmphdmEKQEAgLTEsOSArMSwxMyBAQAog
LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAxMSwgMjAxMyBTdGVw
aGFuIEhlcnJtYW5uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMTEsIDIwMTQgU3Rl
cGhhbiBIZXJybWFubiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBw
cm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxh
YmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAg
KiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBh
dAogICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKKyAqCisgKiBU
aGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24g
ZGV2ZWxvcGVkIHVuZGVyIHRoZSBKYXZhCisgKiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQg
aXMgbWFkZSBhdmFpbGFibGUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAq
IG9ubHkuIFRoZSBjb2RlIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24g
b2YgdGhlIEpDUC4KICAqCiAgKiBDb250cmlidXRvcnM6CiAgKiAgICAgU3RlcGhhbiBIZXJybWFu
biAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgpAQCAtMTEsMTAgKzE1LDggQEAKICAq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqLwogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuYW5ub3RhdGlv
bjsKIAotaW1wb3J0IHN0YXRpYyBqYXZhLmxhbmcuYW5ub3RhdGlvbi5FbGVtZW50VHlwZS5DT05T
VFJVQ1RPUjsKLWltcG9ydCBzdGF0aWMgamF2YS5sYW5nLmFubm90YXRpb24uRWxlbWVudFR5cGUu
TUVUSE9EOwotaW1wb3J0IHN0YXRpYyBqYXZhLmxhbmcuYW5ub3RhdGlvbi5FbGVtZW50VHlwZS5Q
QUNLQUdFOwotaW1wb3J0IHN0YXRpYyBqYXZhLmxhbmcuYW5ub3RhdGlvbi5FbGVtZW50VHlwZS5U
WVBFOworaW1wb3J0IGphdmEubGFuZy5hbm5vdGF0aW9uLkVsZW1lbnRUeXBlOworaW1wb3J0IHN0
YXRpYyBvcmcuZWNsaXBzZS5qZHQuYW5ub3RhdGlvbi5EZWZhdWx0TG9jYXRpb24uKjsKIAogaW1w
b3J0IGphdmEubGFuZy5hbm5vdGF0aW9uLkRvY3VtZW50ZWQ7CiBpbXBvcnQgamF2YS5sYW5nLmFu
bm90YXRpb24uUmV0ZW50aW9uOwpAQCAtMjIsMzggKzI0LDQxIEBACiBpbXBvcnQgamF2YS5sYW5n
LmFubm90YXRpb24uVGFyZ2V0OwogIAogLyoqCi0gKiBUaGlzIGFubm90YXRpb24gY2FuIGJlIGFw
cGxpZWQgdG8gYSBwYWNrYWdlLCB0eXBlLCBtZXRob2Qgb3IgY29uc3RydWN0b3IgaW4gb3JkZXIg
dG8gCi0gKiBkZWZpbmUgdGhhdCBjb250YWluZWQgZW50aXRpZXMgZm9yIHdoaWNoIGEgbnVsbCBh
bm5vdGF0aW9uIGlzIG90aGVyd2lzZSBsYWNraW5nCi0gKiBzaG91bGQgYmUgY29uc2lkZXJlZCBh
cyB7QGxpbmsgTm9uTnVsbCBATm9uTnVsbH0uIEVudGl0aWVzIGFmZmVjdGVkIGJ5Ci0gKiA8Y29k
ZT5ATm9uTnVsbEJ5RGVmYXVsdDwvY29kZT4gYXJlOgotICogPHVsPgotICogPGxpPm1ldGhvZCBy
ZXR1cm4gdmFsdWVzPC9saT4KLSAqIDxsaT5wYXJhbWV0ZXJzIG9mIGEgbWV0aG9kIG9yIGNvbnN0
cnVjdG9yPC9saT4KLSAqIDxsaT5maWVsZHMuPC9saT4KLSAqIDwvdWw+Ci0gKiBMb2NhbCB2YXJp
YWJsZXMgYXJlIDxlbT5ub3Q8L2VtPiBhZmZlY3RlZC4KKyAqIEFwcGx5aW5nIHRoaXMgYW5ub3Rh
dGlvbiB0byBhIGRlY2xhcmF0aW9uIGhhcyB0aGUgZWZmZWN0IHRoYXQgdHlwZSByZWZlcmVuY2Vz
LAorICogd2hpY2ggYXJlIGNvbnRhaW5lZCBpbiB0aGUgZGVjbGFyYXRpb24sIGFuZCBmb3Igd2hp
Y2ggYSBudWxsIGFubm90YXRpb24gaXMgb3RoZXJ3aXNlIGxhY2tpbmcsCisgKiBzaG91bGQgYmUg
Y29uc2lkZXJlZCBhcyB7QGxpbmsgTm9uTnVsbCBATm9uTnVsbH0uCiAgKiA8ZGw+Ci0gKiA8ZHQ+
Q2FuY2VsaW5nIGEgZGVmYXVsdDwvZHQ+Ci0gKiA8ZGQ+QnkgdXNpbmcgYSA8Y29kZT5ATm9uTnVs
bEJ5RGVmYXVsdDwvY29kZT4gYW5ub3RhdGlvbiB3aXRoIHRoZSBhcmd1bWVudCA8Y29kZT5mYWxz
ZTwvY29kZT4sCi0gKiBhIGRlZmF1bHQgZnJvbSBhbnkgZW5jbG9zaW5nIHNjb3BlIGNhbiBiZSBj
YW5jZWxlZCBmb3IgdGhlIGVsZW1lbnQgYmVpbmcgYW5ub3RhdGVkLgorICogPGR0PkxvY2F0aW9u
czwvZHQ+CisgKiA8ZGQ+VGhpcyBhbm5vdGF0aW9uIGlzIHBlcm1pdHRlZCBmb3IgdGhlc2UgZGVj
bGFyYXRpb25zOgorICoge0BsaW5rIEVsZW1lbnRUeXBlI1BBQ0tBR0UgUEFDS0FHRX0sIHtAbGlu
ayBFbGVtZW50VHlwZSNUWVBFIFRZUEV9LCAKKyAqIHtAbGluayBFbGVtZW50VHlwZSNNRVRIT0Qg
TUVUSE9EfSwge0BsaW5rIEVsZW1lbnRUeXBlI0NPTlNUUlVDVE9SIENPTlNUUlVDVE9SfSwKKyAq
IHtAbGluayBFbGVtZW50VHlwZSNGSUVMRCBGSUVMRH0sIHtAbGluayBFbGVtZW50VHlwZSNMT0NB
TF9WQVJJQUJMRSBMT0NBTF9WQVJJQUJMRX0uPC9kZD4KKyAqIDxkdD5GaW5lIHR1bmluZzwvZHQ+
CisgKiA8ZGQ+VGhlIGV4YWN0IGVmZmVjdCBpcyBmdXJ0aGVyIGNvbnRyb2xsZWQgYnkgdGhlIGF0
dHJpYnV0ZSB7QGxpbmsgI3ZhbHVlfSwgc3BlY2lmeWluZyB3aGF0IAorICoga2luZHMgb2YgbG9j
YXRpb25zIHdpdGhpbiB0aGUgZ2l2ZW4gZGVjbGFyYXRpb24gd2lsbCBiZSBhZmZlY3RlZC4gU2Vl
IHtAbGluayBEZWZhdWx0TG9jYXRpb259CisgKiBmb3IgdGhlIG1lYW5pbmcgb2YgdGhlIGF2YWls
YWJsZSB2YWx1ZXMuPC9kZD4KICAqIDxkdD5OZXN0ZWQgZGVmYXVsdHM8L2R0PgotICogPGRkPklm
IGEgPGNvZGU+QE5vbk51bGxCeURlZmF1bHQ8L2NvZGU+Ci0gKiBhbm5vdGF0aW9uIGlzIHVzZWQg
d2l0aGluIHRoZSBzY29wZSBvZiBhbm90aGVyIDxjb2RlPkBOb25OdWxsQnlEZWZhdWx0PC9jb2Rl
PgotICogYW5ub3RhdGlvbiwgdGhlIGlubmVybW9zdCBhbm5vdGF0aW9uIGRlZmluZXMgdGhlCi0g
KiBkZWZhdWx0IGFwcGxpY2FibGUgYXQgYW55IGdpdmVuIHBvc2l0aW9uIChkZXBlbmRpbmcgb24g
dGhlIHBhcmFtZXRlciB7QGxpbmsgI3ZhbHVlKCl9KS48L2RkPgorICogPGRkPklmIHRoaXMgYW5u
b3RhdGlvbiBpcyBhcHBsaWVkIHRvIGEgZGVjbGFyYXRpb24gdGhhdCBpcyBhbHJlYWR5IGFmZmVj
dGVkIGJ5IHRoZSBzYW1lCisgKiBhbm5vdGF0aW9uIGF0IGFuIGVuY2xvc2luZyBzY29wZSwgdGhl
IGlubmVyIGFubm90YXRpb24gPGVtPnJlcGxhY2VzPC9lbT4gdGhlIGVmZmVjdCBvZiB0aGUKKyAq
IG91dGVyIGFubm90YXRpb24gZm9yIHRoZSBzY29wZSBvZiB0aGUgaW5uZXIgZGVjbGFyYXRpb24u
PC9kZD4KKyAqIDxkdD5DYW5jZWxpbmcgYSBkZWZhdWx0PC9kdD4KKyAqIDxkZD5JbiBwYXJ0aWN1
bGFyLCBzcGVjaWZ5aW5nIGFuIGVtcHR5IHZhbHVlICg8Y29kZT57fTwvY29kZT4pIGZvciB0aGUg
e0BsaW5rICN2YWx1ZX0KKyAqIGF0dHJpYnV0ZSBoYXMgdGhlIGVmZmVjdCBvZiBjYW5jZWxpbmcg
YW55IG51bGwgZGVmYXVsdHMgdGhhdCBtaWdodCBiZSBkZWZpbmVkIGZvciBhbnkKKyAqIGVuY2xv
c2luZyBzY29wZS48L2RkPgogICogPC9kbD4KKyAqIDxwPgogICogTm90ZSB0aGF0IGZvciBhcHBs
eWluZyBhbiBhbm5vdGF0aW9uIHRvIGEgcGFja2FnZSwgYSBmaWxlIGJ5IHRoZSBuYW1lCiAgKiA8
Y29kZT5wYWNrYWdlLWluZm8uamF2YTwvY29kZT4gaXMgdXNlZC4KLSAqIAorICogPC9wPgogICog
QHNpbmNlIDEuMAogICovCiBARG9jdW1lbnRlZAogQFJldGVudGlvbihSZXRlbnRpb25Qb2xpY3ku
Q0xBU1MpCi1AVGFyZ2V0KHsgUEFDS0FHRSwgVFlQRSwgTUVUSE9ELCBDT05TVFJVQ1RPUiB9KQor
QFRhcmdldCh7IEVsZW1lbnRUeXBlLlBBQ0tBR0UsIEVsZW1lbnRUeXBlLlRZUEUsIEVsZW1lbnRU
eXBlLk1FVEhPRCwgRWxlbWVudFR5cGUuQ09OU1RSVUNUT1IsIEVsZW1lbnRUeXBlLkZJRUxELCBF
bGVtZW50VHlwZS5MT0NBTF9WQVJJQUJMRSB9KQogcHVibGljIEBpbnRlcmZhY2UgTm9uTnVsbEJ5
RGVmYXVsdCB7CiAJLyoqCi0JICogV2hlbiBwYXJhbWV0ZXJpemVkIHdpdGggPGNvZGU+ZmFsc2U8
L2NvZGU+LCB0aGUgYW5ub3RhdGlvbiBzcGVjaWZpZXMgdGhhdCB0aGUgY3VycmVudCBlbGVtZW50
IHNob3VsZCBub3QgYXBwbHkKLQkgKiBhbnkgZGVmYXVsdCB0byB1bi1hbm5vdGF0ZWQgdHlwZXMu
CisJICogU3BlY2lmaWVzIHRoZSBzZXQgb2YgbG9jYXRpb25zIHdpdGhpbiB0aGUgYW5ub3RhdGVk
IGRlY2xhcmF0aW9uIHRoYXQgc2hvdWxkIGJlIGFmZmVjdGVkIGJ5IHRoZSBub25udWxsIGRlZmF1
bHQuCisJICogQHNpbmNlIDIuMAogCSAqLwotCWJvb2xlYW4gdmFsdWUoKSBkZWZhdWx0IHRydWU7
CisJRGVmYXVsdExvY2F0aW9uW10gdmFsdWUoKSBkZWZhdWx0IHsgUEFSQU1FVEVSLCBSRVRVUk5f
VFlQRSwgRklFTEQsIFRZUEVfQk9VTkQsIFRZUEVfQVJHVU1FTlQgfTsKIH0KZGlmZiAtLWdpdCBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQv
Y29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0NvbXBpbGVySW52b2NhdGlvblRlc3RzLmph
dmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2Uv
amR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9Db21waWxlckludm9jYXRpb25UZXN0
cy5qYXZhCmluZGV4IDAyOGUwYmMuLjdmYjUzZWIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21w
aWxlci9yZWdyZXNzaW9uL0NvbXBpbGVySW52b2NhdGlvblRlc3RzLmphdmEKKysrIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rl
c3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vQ29tcGlsZXJJbnZvY2F0aW9uVGVzdHMuamF2YQpAQCAt
ODIzLDYgKzgyMyw3IEBACiAJCWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0KCJOb25HZW5l
cmljQ29uc3RydWN0b3IiLCBuZXcgUHJvYmxlbUF0dHJpYnV0ZXMoQ2F0ZWdvcml6ZWRQcm9ibGVt
LkNBVF9UWVBFKSk7CiAJCWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0KCJOb25HZW5lcmlj
TWV0aG9kIiwgbmV3IFByb2JsZW1BdHRyaWJ1dGVzKENhdGVnb3JpemVkUHJvYmxlbS5DQVRfVFlQ
RSkpOwogCQlleHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiTm9uR2VuZXJpY1R5cGUiLCBu
ZXcgUHJvYmxlbUF0dHJpYnV0ZXMoQ2F0ZWdvcml6ZWRQcm9ibGVtLkNBVF9UWVBFKSk7CisJCWV4
cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0KCJOb25OdWxsRGVmYXVsdERldGFpbElzTm90RXZh
bHVhdGVkIiwgbmV3IFByb2JsZW1BdHRyaWJ1dGVzKENhdGVnb3JpemVkUHJvYmxlbS5DQVRfSU5U
RVJOQUwpKTsKIAkJZXhwZWN0ZWRQcm9ibGVtQXR0cmlidXRlcy5wdXQoIk5vbk51bGxFeHByZXNz
aW9uQ29tcGFyaXNvbllpZWxkc0ZhbHNlIiwgbmV3IFByb2JsZW1BdHRyaWJ1dGVzKENhdGVnb3Jp
emVkUHJvYmxlbS5DQVRfUE9URU5USUFMX1BST0dSQU1NSU5HX1BST0JMRU0pKTsKIAkJZXhwZWN0
ZWRQcm9ibGVtQXR0cmlidXRlcy5wdXQoIk5vbk51bGxNZXNzYWdlU2VuZENvbXBhcmlzb25ZaWVs
ZHNGYWxzZSIsIG5ldyBQcm9ibGVtQXR0cmlidXRlcyhDYXRlZ29yaXplZFByb2JsZW0uQ0FUX1BP
VEVOVElBTF9QUk9HUkFNTUlOR19QUk9CTEVNKSk7CiAJCWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0
ZXMucHV0KCJOb25OdWxsU3BlY2RGaWVsZENvbXBhcmlzb25ZaWVsZHNGYWxzZSIsIG5ldyBQcm9i
bGVtQXR0cmlidXRlcyhDYXRlZ29yaXplZFByb2JsZW0uQ0FUX1BPVEVOVElBTF9QUk9HUkFNTUlO
R19QUk9CTEVNKSk7CkBAIC0xNjM5LDYgKzE2NDAsNyBAQAogCQlleHBlY3RlZFByb2JsZW1BdHRy
aWJ1dGVzLnB1dCgiTm9uR2VuZXJpY0NvbnN0cnVjdG9yIiwgU0tJUCk7CiAJCWV4cGVjdGVkUHJv
YmxlbUF0dHJpYnV0ZXMucHV0KCJOb25HZW5lcmljTWV0aG9kIiwgU0tJUCk7CiAJCWV4cGVjdGVk
UHJvYmxlbUF0dHJpYnV0ZXMucHV0KCJOb25HZW5lcmljVHlwZSIsIFNLSVApOworCQlleHBlY3Rl
ZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiTm9uTnVsbERlZmF1bHREZXRhaWxJc05vdEV2YWx1YXRl
ZCIsIFNLSVApOwogCQlleHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiTm9uTnVsbEV4cHJl
c3Npb25Db21wYXJpc29uWWllbGRzRmFsc2UiLCBuZXcgUHJvYmxlbUF0dHJpYnV0ZXMoSmF2YUNv
cmUuQ09NUElMRVJfUEJfUkVEVU5EQU5UX05VTExfQ0hFQ0spKTsKIAkJZXhwZWN0ZWRQcm9ibGVt
QXR0cmlidXRlcy5wdXQoIk5vbk51bGxTcGVjZEZpZWxkQ29tcGFyaXNvbllpZWxkc0ZhbHNlIiwg
bmV3IFByb2JsZW1BdHRyaWJ1dGVzKEphdmFDb3JlLkNPTVBJTEVSX1BCX1JFRFVOREFOVF9OVUxM
X0NIRUNLKSk7CiAJCWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0KCJOb25OdWxsTG9jYWxW
YXJpYWJsZUNvbXBhcmlzb25ZaWVsZHNGYWxzZSIsIG5ldyBQcm9ibGVtQXR0cmlidXRlcyhKYXZh
Q29yZS5DT01QSUxFUl9QQl9SRURVTkRBTlRfTlVMTF9DSEVDSykpOwpkaWZmIC0tZ2l0IGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbEFubm90YXRpb25UZXN0LmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OdWxsQW5ub3RhdGlvblRlc3QuamF2YQppbmRleCBi
OTYyY2JlLi5iYTEzNWI3IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5j
b21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lv
bi9OdWxsQW5ub3RhdGlvblRlc3QuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0
cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVz
c2lvbi9OdWxsQW5ub3RhdGlvblRlc3QuamF2YQpAQCAtMTE2LDYgKzExNiwxMiBAQAogCQkJCTog
IiI7CiB9CiAKK1N0cmluZyBjYW5jZW5Ob25OdWxsQnlEZWZhdWx0KCkgeworCXJldHVybiB0aGlz
LmNvbXBsaWFuY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzgKKwkJCQk/ICIgICAg
QE5vbk51bGxCeURlZmF1bHQoZmFsc2UpXG4iCisJCQkJOiAiICAgIEBOb25OdWxsQnlEZWZhdWx0
KHt9KVxuIjsKK30KKwogLyoqCiAgKiBAZGVwcmVjYXRlZAogICovCkBAIC0yNjEzLDcgKzI2MTks
NyBAQAogCQkJIkBOb25OdWxsQnlEZWZhdWx0XG4iICsKIAkJCSJwdWJsaWMgY2xhc3MgWSBleHRl
bmRzIHAxLlgge1xuIiArCiAJCQkiICAgIEBPdmVycmlkZVxuIiArCi0JCQkiICAgIEBOb25OdWxs
QnlEZWZhdWx0KGZhbHNlKVxuIiArCisJCQljYW5jZW5Ob25OdWxsQnlEZWZhdWx0KCkgKwogCQkJ
IiAgICBwcm90ZWN0ZWQgT2JqZWN0IGdldE9iamVjdChPYmplY3Qgbykge1xuIiArCiAJCQkiICAg
ICAgICBpZiAoby50b1N0cmluZygpLmxlbmd0aCgpID09IDApXG4iICsgLy8gZGVyZWZlcmVuY2Ug
d2l0aG91dCBhIHdhcm5pbmcKIAkJCSIJICAgICAgICByZXR1cm4gbnVsbDtcbiIgKyAvLyByZXR1
cm4gbnVsbCB3aXRob3V0IGEgd2FybmluZwpAQCAtMjY0Myw3ICsyNjQ5LDcgQEAKIAkJCSJpbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uKjtcbiIgKwogCQkJIkBOb25OdWxsQnlEZWZh
dWx0XG4iICsKIAkJCSJwdWJsaWMgY2xhc3MgWSB7IFxuIiArCi0JCQkiICAgIEBOb25OdWxsQnlE
ZWZhdWx0KGZhbHNlKVxuIiArCisJCQljYW5jZW5Ob25OdWxsQnlEZWZhdWx0KCkgKwogCQkJIiAg
ICBzdGF0aWMgY2xhc3MgWiBleHRlbmRzIHAxLlgge1xuIiArCiAJCQkiICAgICAgICBAT3ZlcnJp
ZGVcbiIgKwogCQkJIiAgICAgICAgcHJvdGVjdGVkIE9iamVjdCBnZXRPYmplY3QoT2JqZWN0IG8p
IHtcbiIgKwpAQCAtNTU3OSw3ICs1NTg1LDcgQEAKIAogcGFja2FnZSBpMjsKIGltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuYW5ub3RhdGlvbi5Ob25OdWxsQnlEZWZhdWx0OwotQE5vbk51bGxCeURlZmF1
bHQoZmFsc2UpCitATm9uTnVsbEJ5RGVmYXVsdCh7fSkKIHB1YmxpYyBpbnRlcmZhY2UgSTJBIHsK
ICAgICBPYmplY3QgbTEoT2JqZWN0IGExKTsKICAgICBTdHJpbmcgbTIoT2JqZWN0IGEyKTsKZGlm
ZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxUeXBlQW5ub3RhdGlv
blRlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxUeXBlQW5ub3Rh
dGlvblRlc3QuamF2YQppbmRleCA5ZjYwYTJhLi45MGU1NjBkIDEwMDY0NAotLS0gYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVz
dHMvY29tcGlsZXIvcmVncmVzc2lvbi9OdWxsVHlwZUFubm90YXRpb25UZXN0LmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9j
b3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbFR5cGVBbm5vdGF0aW9uVGVzdC5qYXZh
CkBAIC00MzAzLDQgKzQzMDMsMjkgQEAKIAkJIkludFN0cmVhbXkgY2Fubm90IGJlIHJlc29sdmVk
XG4iICsgCiAJCSItLS0tLS0tLS0tXG4iKTsKIH0KK3B1YmxpYyB2b2lkIHRlc3RCdWczOTIyNDVf
dG1wX3dhcm5pbmcoKSB7CisJcnVuTmVnYXRpdmVUZXN0V2l0aExpYnMoCisJCW5ldyBTdHJpbmdb
XSB7CisJCQkiWC5qYXZhIiwKKwkJCSJpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24u
KjtcbiIgKworCQkJIkBOb25OdWxsQnlEZWZhdWx0KERlZmF1bHRMb2NhdGlvbi5UWVBFX0FSR1VN
RU5UKVxuIiArCisJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkiCXZvaWQgbShPYmplY3Qg
bykge31cbiIgKworCQkJIgl2b2lkIHRlc3QoKSB7XG4iICsKKwkJCSIJCW0obnVsbCk7IC8vIEVS
UlxuIiArIC8vIHNpbmNlIEBOb25OdWxsQnlEZWZhdWx0IGlzIHN0aWxsIGludGVycHJldGVkIGFz
IGFsbCBvciBub3RoaW5nCisJCQkiCX1cbiIgKworCQkJIn1cbiIKKwkJfSwKKwkJIi0tLS0tLS0t
LS1cbiIgKyAKKwkJIjEuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDIpXG4iICsgCisJCSIJ
QE5vbk51bGxCeURlZmF1bHQoRGVmYXVsdExvY2F0aW9uLlRZUEVfQVJHVU1FTlQpXG4iICsgCisJ
CSIJICAgICAgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5cbiIgKyAK
KwkJIkFyZ3VtZW50cyBjb250cm9saW5nIHRoZSBkZXRhaWxzIG9mIHRoZSBudWxsbmVzcyBkZWZh
dWx0IGFyZSBub3QgeWV0IGV2YWx1YXRlZCBieSB0aGUgYW5hbHlzaXMuXG4iICsgCisJCSItLS0t
LS0tLS0tXG4iICsgCisJCSIyLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNilcbiIgKyAKKwkJ
IgltKG51bGwpOyAvLyBFUlJcbiIgKyAKKwkJIgkgIF5eXl5cbiIgKyAKKwkJIk51bGwgdHlwZSBt
aXNtYXRjaDogcmVxdWlyZWQgXCdATm9uTnVsbCBPYmplY3RcJyBidXQgdGhlIHByb3ZpZGVkIHZh
bHVlIGlzIG51bGxcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIpOworfQogfQpkaWZmIC0tZ2l0IGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvd29ya3NwYWNlL1Rlc3QzNzQxMjlf
MS44LmphciBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3dvcmtzcGFjZS9U
ZXN0Mzc0MTI5XzEuOC5qYXIKaW5kZXggZmJiNjVmYi4uODE1ODQ4ZiAxMDA2NDQKLS0tIGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvd29ya3NwYWNlL1Rlc3QzNzQxMjlfMS44
LmphcgorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci93b3Jrc3BhY2Uv
VGVzdDM3NDEyOV8xLjguamFyCkJpbmFyeSBmaWxlcyBkaWZmZXIKZGlmZiAtLWdpdCBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3dvcmtzcGFjZS9UZXN0Mzg4MjgxXzEuOC5q
YXIgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci93b3Jrc3BhY2UvVGVzdDM4
ODI4MV8xLjguamFyCmluZGV4IDlkMzY2NTguLjY2MTMwMWMgMTAwNjQ0Ci0tLSBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3dvcmtzcGFjZS9UZXN0Mzg4MjgxXzEuOC5qYXIK
KysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvd29ya3NwYWNlL1Rlc3Qz
ODgyODFfMS44LmphcgpCaW5hcnkgZmlsZXMgZGlmZmVyCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvY29yZS9jb21waWxlci9JUHJvYmxl
bS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2Nv
cmUvY29tcGlsZXIvSVByb2JsZW0uamF2YQppbmRleCAyYTk1ZTA0Li41ZjJkOWIzIDEwMDY0NAot
LS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvY29yZS9j
b21waWxlci9JUHJvYmxlbS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9jb3JlL2NvbXBpbGVyL0lQcm9ibGVtLmphdmEKQEAgLTE5Myw2ICsx
OTMsNyBAQAogICoJCQkJCQkJCQlDb250cmFkaWN0b3J5TnVsbEFubm90YXRpb25zT25Cb3VuZAog
ICoJCQkJCQkJCQlVbnNhZmVOdWxsbmVzc0Nhc3QKICAqCQkJCQkJCQkJQ29udHJhZGljdG9yeU51
bGxBbm5vdGF0aW9uc0luZmVycmVkCisgKgkJCQkJCQkJCU5vbk51bGxEZWZhdWx0RGV0YWlsSXNO
b3RFdmFsdWF0ZWQKICAqICAgICAgSmVzcGVyIFMgTW9sbGVyICAtIGFkZGVkIHRoZSBmb2xsb3dp
bmcgY29uc3RhbnRzCiAgKgkJCQkJCQkJCVRhcmdldFR5cGVOb3RBRnVuY3Rpb25hbEludGVyZmFj
ZQogICoJCQkJCQkJCQlPdXRlckxvY2FsTXVzdEJlRWZmZWN0aXZlbHlGaW5hbApAQCAtMTc3OSw2
ICsxNzgwLDggQEAKIAlpbnQgQ29udHJhZGljdG9yeU51bGxBbm5vdGF0aW9uc0luZmVycmVkID0g
SW50ZXJuYWwgKyA5NjY7CiAJLyoqIEBzaW5jZSAzLjkgQkVUQV9KQVZBOCAqLwogCWludCBVbnNh
ZmVOdWxsbmVzc0Nhc3QgPSBJbnRlcm5hbCArIDk2NzsKKwkvKiogQHNpbmNlIDMuOSBCRVRBX0pB
VkE4ICovCisJaW50IE5vbk51bGxEZWZhdWx0RGV0YWlsSXNOb3RFdmFsdWF0ZWQgPSA5Njg7CiAK
IAkvLyBKYXZhIDggd29yawogCS8qKiBAc2luY2UgMy45IEJFVEFfSkFWQTggKi8KZGlmZiAtLWdp
dCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hc3QvQW5ub3RhdGlvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Bbm5vdGF0aW9uLmph
dmEKaW5kZXggODBiZTM0NS4uNzk0MDVjMSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Bbm5vdGF0
aW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Bbm5vdGF0aW9uLmphdmEKQEAgLTIxLDYgKzIxLDcg
QEAKICAqCQkJCQkJCQlCdWcgNDE1ODUwIC0gWzEuOF0gRW5zdXJlIFJ1bkpEVENvcmVUZXN0cyBj
YW4gY29wZSB3aXRoIG51bGwgYW5ub3RhdGlvbnMgZW5hYmxlZAogICoJCQkJCQkJCUJ1ZyA0MTcy
OTUgLSBbMS44W1tudWxsXSBNYXNzYWdlIHR5cGUgYW5ub3RhdGVkIG51bGwgYW5hbHlzaXMgdG8g
Z2VsIHdlbGwgd2l0aCBkZWVwIGVuY29kZWQgdHlwZSBiaW5kaW5ncy4KICAqCQkJCQkJCQlCdWcg
NDI0NzI4IC0gWzEuOF1bbnVsbF0gVW5leHBlY3RlZCBlcnJvcjogVGhlIG51bGxuZXNzIGFubm90
YXRpb24gJ1hYWFgnIGlzIG5vdCBhcHBsaWNhYmxlIGF0IHRoaXMgbG9jYXRpb24KKyAqCQkJCQkJ
CQlCdWcgMzkyMjQ1IC0gWzEuOF1bY29tcGlsZXJdW251bGxdIERlZmluZSB3aGV0aGVyIC8gaG93
IEBOb25OdWxsQnlEZWZhdWx0IGFwcGxpZXMgdG8gVFlQRV9VU0UgbG9jYXRpb25zCiAgKiAgICAg
ICAgQW5keSBDbGVtZW50IChHb1Bpdm90YWwsIEluYykgYWNsZW1lbnRAZ29waXZvdGFsLmNvbSAt
IENvbnRyaWJ1dGlvbnMgZm9yCiAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgQnVnIDM4MzYy
NCAtIFsxLjhdW2NvbXBpbGVyXSBSZXZpdmUgY29kZSBnZW5lcmF0aW9uIHN1cHBvcnQgZm9yIHR5
cGUgYW5ub3RhdGlvbnMgKGZyb20gT2xpdmllcidzIHdvcmspCiAgKiAgICAgICAgICAgICAgICAg
ICAgICAgICAgQnVnIDQwOTUxNyAtIFsxLjhdW2NvbXBpbGVyXSBUeXBlIGFubm90YXRpb24gcHJv
YmxlbXMgb24gbW9yZSBlbGFib3JhdGUgYXJyYXkgcmVmZXJlbmNlcwpAQCAtMzkxLDEyICszOTIs
MjEgQEAKIAkJCQl0YWdCaXRzIHw9IFRhZ0JpdHMuQW5ub3RhdGlvbk5vbk51bGw7CiAJCQkJYnJl
YWs7CiAJCQljYXNlIFR5cGVJZHMuVF9Db25maWd1cmVkQW5ub3RhdGlvbk5vbk51bGxCeURlZmF1
bHQgOgotCQkJCWlmICh2YWx1ZUF0dHJpYnV0ZSAhPSBudWxsIAotCQkJCQkmJiB2YWx1ZUF0dHJp
YnV0ZS52YWx1ZSBpbnN0YW5jZW9mIEZhbHNlTGl0ZXJhbCkgCi0JCQkJewotCQkJCQkvLyBwYXJh
bWV0ZXIgJ2ZhbHNlJyBtZWFuczogdGhpcyBhbm5vdGF0aW9uIGNhbmNlbHMgYW55IGRlZmF1bHRz
Ci0JCQkJCXRhZ0JpdHMgfD0gVGFnQml0cy5Bbm5vdGF0aW9uTnVsbFVuc3BlY2lmaWVkQnlEZWZh
dWx0OwotCQkJCQlicmVhazsKKwkJCQlpZiAodmFsdWVBdHRyaWJ1dGUgIT0gbnVsbCkgeworCQkJ
CQlpZiAodmFsdWVBdHRyaWJ1dGUudmFsdWUgaW5zdGFuY2VvZiBGYWxzZUxpdGVyYWwpIHsKKwkJ
CQkJCS8vIHBhcmFtZXRlciAnZmFsc2UnIG1lYW5zOiB0aGlzIGFubm90YXRpb24gY2FuY2VscyBh
bnkgZGVmYXVsdHMKKwkJCQkJCXRhZ0JpdHMgfD0gVGFnQml0cy5Bbm5vdGF0aW9uTnVsbFVuc3Bl
Y2lmaWVkQnlEZWZhdWx0OworCQkJCQkJYnJlYWs7CisJCQkJCX0gZWxzZSBpZiAodmFsdWVBdHRy
aWJ1dGUuY29tcGlsZXJFbGVtZW50UGFpciAhPSBudWxsKSB7CisJCQkJCQlPYmplY3QgdmFsdWUg
PSB2YWx1ZUF0dHJpYnV0ZS5jb21waWxlckVsZW1lbnRQYWlyLnZhbHVlOworCQkJCQkJaWYgKHZh
bHVlIGluc3RhbmNlb2YgT2JqZWN0W10gJiYgKChPYmplY3RbXSl2YWx1ZSkubGVuZ3RoID09IDAp
IHsKKwkJCQkJCQkvLyBlbXB0eSBwYXJhbWV0ZXIgbWVhbnM6IHRoaXMgYW5ub3RhdGlvbiBjYW5j
ZWxzIGFueSBkZWZhdWx0cworCQkJCQkJCXRhZ0JpdHMgfD0gVGFnQml0cy5Bbm5vdGF0aW9uTnVs
bFVuc3BlY2lmaWVkQnlEZWZhdWx0OworCQkJCQkJCWJyZWFrOworCQkJCQkJfSBlbHNlIHsKKwkJ
CQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5ub25OdWxsRGVmYXVsdERldGFpbE5vdEV2YWx1
YXRlZCh2YWx1ZUF0dHJpYnV0ZSk7CisJCQkJCQl9CisJCQkJCX0KIAkJCQl9CiAJCQkJdGFnQml0
cyB8PSBUYWdCaXRzLkFubm90YXRpb25Ob25OdWxsQnlEZWZhdWx0OwogCQkJCWJyZWFrOwpkaWZm
IC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2xvb2t1cC9CaW5hcnlUeXBlQmluZGluZy5qYXZhIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xv
b2t1cC9CaW5hcnlUeXBlQmluZGluZy5qYXZhCmluZGV4IGFjNDJiZTMuLjNlZWYwMTcgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9sb29rdXAvQmluYXJ5VHlwZUJpbmRpbmcuamF2YQorKysgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
bG9va3VwL0JpbmFyeVR5cGVCaW5kaW5nLmphdmEKQEAgLTI3LDYgKzI3LDcgQEAKICAqCQkJCQkJ
CQlCdWcgNDE1ODUwIC0gWzEuOF0gRW5zdXJlIFJ1bkpEVENvcmVUZXN0cyBjYW4gY29wZSB3aXRo
IG51bGwgYW5ub3RhdGlvbnMgZW5hYmxlZAogICoJCQkJCQkJCUJ1ZyA0MTcyOTUgLSBbMS44W1tu
dWxsXSBNYXNzYWdlIHR5cGUgYW5ub3RhdGVkIG51bGwgYW5hbHlzaXMgdG8gZ2VsIHdlbGwgd2l0
aCBkZWVwIGVuY29kZWQgdHlwZSBiaW5kaW5ncy4KICAqCQkJCQkJCQlCdWcgNDI3MTk5IC0gWzEu
OF1bcmVzb3VyY2VdIGF2b2lkIHJlc291cmNlIGxlYWsgd2FybmluZ3Mgb24gU3RyZWFtcyB0aGF0
IGhhdmUgbm8gcmVzb3VyY2UKKyAqCQkJCQkJCQlCdWcgMzkyMjQ1IC0gWzEuOF1bY29tcGlsZXJd
W251bGxdIERlZmluZSB3aGV0aGVyIC8gaG93IEBOb25OdWxsQnlEZWZhdWx0IGFwcGxpZXMgdG8g
VFlQRV9VU0UgbG9jYXRpb25zCiAgKiAgICBKZXNwZXIgU3RlZW4gTW9sbGVyIC0gQ29udHJpYnV0
aW9ucyBmb3IKICAqCQkJCQkJCQlCdWcgNDEyMTUwIFsxLjhdIFtjb21waWxlcl0gRW5hYmxlIHJl
ZmxlY3RlZCBwYXJhbWV0ZXIgbmFtZXMgZHVyaW5nIGFubm90YXRpb24gcHJvY2Vzc2luZwogICoJ
CQkJCQkJCUJ1ZyA0MTIxNTMgLSBbMS44XVtjb21waWxlcl0gQ2hlY2sgdmFsaWRpdHkgb2YgYW5u
b3RhdGlvbnMgd2hpY2ggbWF5IGJlIHJlcGVhdGFibGUKQEAgLTE2MDIsNiArMTYwMywxMSBAQAog
CQkJCQkJYW5ub3RhdGlvbkJpdCA9IFRhZ0JpdHMuQW5ub3RhdGlvbk51bGxVbnNwZWNpZmllZEJ5
RGVmYXVsdDsKIAkJCQkJCW51bGxuZXNzID0gTlVMTF9VTlNQRUNJRklFRF9CWV9ERUZBVUxUOwog
CQkJCQkJYnJlYWs7CisJCQkJCX0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBPYmplY3RbXSAm
JiAoKE9iamVjdFtdKXZhbHVlKS5sZW5ndGggPT0gMCkgeworCQkJCQkJLy8gcGFyYW1ldGVyIGlz
ICd7fSc6IHRoaXMgbWVhbnMgd2UgY2FuY2VsIGRlZmF1bHRzIGZyb20gb3V0ZXIgc2NvcGVzOgor
CQkJCQkJYW5ub3RhdGlvbkJpdCA9IFRhZ0JpdHMuQW5ub3RhdGlvbk51bGxVbnNwZWNpZmllZEJ5
RGVmYXVsdDsKKwkJCQkJCW51bGxuZXNzID0gTlVMTF9VTlNQRUNJRklFRF9CWV9ERUZBVUxUOwor
CQkJCQkJYnJlYWs7CiAJCQkJCX0KIAkJCQl9CiAJCQkJYW5ub3RhdGlvbkJpdCA9IFRhZ0JpdHMu
QW5ub3RhdGlvbk5vbk51bGxCeURlZmF1bHQ7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9Q
cm9ibGVtUmVwb3J0ZXIuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL1Byb2JsZW1SZXBvcnRlci5qYXZh
CmluZGV4IDU4YTM5OWEuLmE4MjdlZGQgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL1Byb2Js
ZW1SZXBvcnRlci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL1Byb2JsZW1SZXBvcnRlci5qYXZh
CkBAIC01MCw2ICs1MCw3IEBACiAgKgkJCQkJCQkJQnVnIDQyODI5NCAtIFsxLjhdW2NvbXBpbGVy
XSBUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVydCBmcm9tIExpc3Q8T2JqZWN0PiB0byBDb2xs
ZWN0aW9uPE9iamVjdFtdPgogICoJCQkJCQkJCUJ1ZyA0MjgzNjYgLSBbMS44XSBbY29tcGlsZXJd
IFRoZSBtZXRob2QgdmFsdWVBdChPYnNlcnZhYmxlTGlzdDxPYmplY3Q+LCBpbnQpIGlzIGFtYmln
dW91cyBmb3IgdGhlIHR5cGUgQmluZGluZ3MKICAqCQkJCQkJCQlCdWcgNDE2MTkwIC0gWzEuOF1b
bnVsbF0gZGV0ZWN0IGluY29tcGF0aWJsZSBvdmVycmlkZXMgZHVlIHRvIG51bGwgdHlwZSBhbm5v
dGF0aW9ucworICoJCQkJCQkJCUJ1ZyAzOTIyNDUgLSBbMS44XVtjb21waWxlcl1bbnVsbF0gRGVm
aW5lIHdoZXRoZXIgLyBob3cgQE5vbk51bGxCeURlZmF1bHQgYXBwbGllcyB0byBUWVBFX1VTRSBs
b2NhdGlvbnMKICAqICAgICAgSmVzcGVyIFMgTW9sbGVyIDxqZXNwZXJAc2Vsc2thYmV0Lm9yZz4g
LSAgQ29udHJpYnV0aW9ucyBmb3IKICAqCQkJCQkJCQlidWcgMzgyNzAxIC0gWzEuOF1bY29tcGls
ZXJdIEltcGxlbWVudCBzZW1hbnRpYyBhbmFseXNpcyBvZiBMYW1iZGEgZXhwcmVzc2lvbnMgJiBS
ZWZlcmVuY2UgZXhwcmVzc2lvbgogICoJCQkJCQkJCWJ1ZyAzODI3MjEgLSBbMS44XVtjb21waWxl
cl0gRWZmZWN0aXZlbHkgZmluYWwgdmFyaWFibGVzIG5lZWRzIHNwZWNpYWwgdHJlYXRtZW50CkBA
IC05NDQzLDYgKzk0NDQsMTAgQEAKIAl0aGlzLmhhbmRsZShwcm9ibGVtSWQsIGFyZ3MsIHNob3J0
QXJncywgc3RhcnQsIGVuZCk7CiB9CiAKK3B1YmxpYyB2b2lkIG5vbk51bGxEZWZhdWx0RGV0YWls
Tm90RXZhbHVhdGVkKEFTVE5vZGUgbG9jYXRpb24pIHsKKwl0aGlzLmhhbmRsZShJUHJvYmxlbS5O
b25OdWxsRGVmYXVsdERldGFpbElzTm90RXZhbHVhdGVkLCBOb0FyZ3VtZW50LCBOb0FyZ3VtZW50
LCBQcm9ibGVtU2V2ZXJpdGllcy5XYXJuaW5nLCBsb2NhdGlvbi5zb3VyY2VTdGFydCwgbG9jYXRp
b24uc291cmNlRW5kKTsKK30KKwogcHVibGljIHZvaWQgY29udHJhZGljdG9yeU51bGxBbm5vdGF0
aW9ucyhBbm5vdGF0aW9uIGFubm90YXRpb24pIHsKIAljb250cmFkaWN0b3J5TnVsbEFubm90YXRp
b25zKGFubm90YXRpb24uc291cmNlU3RhcnQsIGFubm90YXRpb24uc291cmNlRW5kKTsKIH0KZGlm
ZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9wcm9ibGVtL21lc3NhZ2VzLnByb3BlcnRpZXMgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJv
YmxlbS9tZXNzYWdlcy5wcm9wZXJ0aWVzCmluZGV4IDQzY2EwZWEuLmI5MzgyYzAgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9wcm9ibGVtL21lc3NhZ2VzLnByb3BlcnRpZXMKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2Js
ZW0vbWVzc2FnZXMucHJvcGVydGllcwpAQCAtNDAsNiArNDAsNyBAQAogIwkJCQkJCQlCdWcgNDI0
NjM3IC0gWzEuOF1bY29tcGlsZXJdW251bGxdIEFJT09CIGluIFJlZmVyZW5jZUV4cHJlc3Npb24u
cmVzb2x2ZVR5cGUgd2l0aCBhIG1ldGhvZCByZWZlcmVuY2UgdG8gRmlsZXM6OndhbGsKICMJCQkJ
CQkJQnVnIDQxODc0MyAtIFsxLjhdW251bGxdIGNvbnRyYWRpY3RvcnkgYW5ub3RhdGlvbnMgb24g
aW52b2NhdGlvbiBvZiBnZW5lcmljIG1ldGhvZCBub3QgcmVwb3J0ZWQKICMJCQkJCQkJQnVnIDQx
NjE5MCAtIFsxLjhdW251bGxdIGRldGVjdCBpbmNvbXBhdGlibGUgb3ZlcnJpZGVzIGR1ZSB0byBu
dWxsIHR5cGUgYW5ub3RhdGlvbnMKKyMJCQkJCQkJQnVnIDM5MjI0NSAtIFsxLjhdW2NvbXBpbGVy
XVtudWxsXSBEZWZpbmUgd2hldGhlciAvIGhvdyBATm9uTnVsbEJ5RGVmYXVsdCBhcHBsaWVzIHRv
IFRZUEVfVVNFIGxvY2F0aW9ucwogIwkJSmVzcGVyIFMgTW9sbGVyIDxqZXNwZXJAc2Vsc2thYmV0
Lm9yZz4gLSBDb250cmlidXRpb25zIGZvcgogIwkJCQkJCQlidWcgMzgyNzAxIC0gWzEuOF1bY29t
cGlsZXJdIEltcGxlbWVudCBzZW1hbnRpYyBhbmFseXNpcyBvZiBMYW1iZGEgZXhwcmVzc2lvbnMg
JiBSZWZlcmVuY2UgZXhwcmVzc2lvbgogIwkJCQkJCQlidWcgMzg0NTY3IC0gWzEuNV1bY29tcGls
ZXJdIENvbXBpbGVyIGFjY2VwdHMgaWxsZWdhbCBtb2RpZmllcnMgb24gcGFja2FnZSBkZWNsYXJh
dGlvbgpAQCAtODE5LDYgKzgyMCw3IEBACiA5NjUgPSBUaGlzIG51bGxuZXNzIGFubm90YXRpb24g
Y29uZmxpY3RzIHdpdGggYSAnJ0B7MH0nJyBhbm5vdGF0aW9uIHdoaWNoIGlzIGVmZmVjdGl2ZSBv
biB0aGUgc2FtZSB0eXBlIHBhcmFtZXRlciAKIDk2NiA9IENvbnRyYWRpY3RvcnkgbnVsbCBhbm5v
dGF0aW9uczogbWV0aG9kIHdhcyBpbmZlcnJlZCBhcyAnJ3syfSB7M30oezR9KScnLCBidXQgb25s
eSBvbmUgb2YgJydAezB9JycgYW5kICcnQHsxfScnIGNhbiBiZSBlZmZlY3RpdmUgYXQgYW55IGxv
Y2F0aW9uCiA5NjcgPSBOdWxsIHR5cGUgc2FmZXR5OiBVbmNoZWNrZWQgY2FzdCBmcm9tIHswfSB0
byB7MX0KKzk2OCA9IEFyZ3VtZW50cyBjb250cm9saW5nIHRoZSBkZXRhaWxzIG9mIHRoZSBudWxs
bmVzcyBkZWZhdWx0IGFyZSBub3QgeWV0IGV2YWx1YXRlZCBieSB0aGUgYW5hbHlzaXMuCiAKICMg
SmF2YSA4CiAxMDAxID0gU3ludGF4IGVycm9yLCBtb2RpZmllcnMgYW5kIGFubm90YXRpb25zIGFy
ZSBub3QgYWxsb3dlZCBmb3IgdGhlIGxhbWJkYSBwYXJhbWV0ZXIgezB9IGFzIGl0cyB0eXBlIGlz
IGVsaWRlZA==
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>240683</attachid>
            <date>2014-03-08 10:29:00 -0500</date>
            <delta_ts>2014-03-08 10:29:13 -0500</delta_ts>
            <desc>Test jar</desc>
            <filename>Test374129_1.8.jar</filename>
            <type>application/x-java-archive</type>
            <size>3674</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">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
bGFzc1BLBQYAAAAACQAJAEsCAAD5CwAAAAA=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>240684</attachid>
            <date>2014-03-08 10:30:00 -0500</date>
            <delta_ts>2014-03-08 10:30:18 -0500</delta_ts>
            <desc>Test jar (2)</desc>
            <filename>Test388281_1.8.jar</filename>
            <type>application/x-java-archive</type>
            <size>3213</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">UEsDBBQACAgIAL0FaEQAAAAAAAAAAAAAAAAUAAQATUVUQS1JTkYvTUFOSUZFU1QuTUb+ygAA803M
y0xLLS7RDUstKs7Mz7NSMNQz4OXi5QIAUEsHCLJ/Au4bAAAAGQAAAFBLAwQUAAgICAClBWhEAAAA
AAAAAAAAAAAACgAAAGMvQzIuY2xhc3OFkM9Kw0AQxr9Ns91ao9Va6/+DF2ktGBpEkIqXgCAEPVR6
38albmkSiKnPpRcFDz6ADyXOpkGkFjzsfLuz3/xmdz6/3j8AnOJAwGKwQ9f3BGyGtbF8ku5ExiP3
djhWYSZQZuDac689hvKFjnV2yVBqtQdU5if3qooSlh0IVBhqgY7VzTQaqvRODieKoR4koZwMZKrN
uUja2YN+JFpg2vYYrKjLcNQK5nv32n9T5JZdw110E3n/c/pZquNRzzx7y8E2dhgqWTLLMjRaC7ym
J5Gr/WSahupKmz8I3zsxRhyCxkGL0zyN0iAoLtHJJWWk/PgN1RfaWHAolvOkhRWKzsyAVdRIafxY
L4rPSC3j6zzPVdp5ZXN2W1SaXR0becMGNgvGecHgnVc05zHiF4b/YDh2C8xe7t//BlBLBwg9mkJB
NwEAACoCAABQSwMEFAAICAgAoQVoRAAAAAAAAAAAAAAAAAoAAABjL0MxLmNsYXNzlZLbSsNAEIb/
TdOmrdHWej63HmqqYoh4IVREqAhCUaHS+7SGuiVNJKaCb6VeKHjhA/hQ4mwSSrWKepE57cw3O7N5
e395BbCLLQUSg9zUK4YCmSHbNm9N3Tadln7WaFtNX0GCIcb1E4bEPne4f0CuVqpTUcW9tNKIYUiF
giRDpsod67TbaVjehdmwLYZc1W2adt30uPCjoOxf8RuiVUXTMoPUMRiKWvVr53JpMJTCGCYUjH+6
aO3uxrc6KiYxRXdzuz7DRFjKXf3c445f8z3L7JTFZWdUzGKOIem7FOVOi2Fc6+8URil3AUsKFhnG
vkGpyKPAoFyLkO1QQ20QIZYkmYZYw8AgYuyd38eOSIJD2XvfZP9pbVTvGkIQJF1zu17TOubiLZSK
sS2yUQCtjr44/RUyaXpQkinydNKMdHzjGekHMiSoJBNBUMIwSTVMwAgypOltMBoVH1GGJDIekdt8
wvQT5tl9j5EOzmTS8YAzGeZGHGEtYyVov4q1fxCTpFM/EIsRMYv1iHgYjE6EPk44nRow8uFpjyFB
CxjCKpElkb0ReJsfUEsHCPqVaFukAQAAVwMAAFBLAwQUAAgICABmBWhEAAAAAAAAAAAAAAAACQAA
AGkvSS5jbGFzc42Qz0rDQBDGv0nbpKl/6kG8elGpF5cWD0JPvQiBomB9gW1cwobtbkk2hb5aDz6A
DyWdLUXwD+ocdpj5fTPMfm/vm1cAt+gniAgtLbIEbcJJKVdSGGkL8TgvVe4J0WJIuBpMv5Lx9fcW
4fypsV4vVGZXutZzo57XSzWx1nnptbM14XLqqkKo3OhlrUT54oX8wOKhMUbyFG+6+FXnbJCOw3mj
v8+b+UrbgtV3Pwj/+bPezDVVru61UYQ4uwmSmMDmIUSL3esg5jrhqo/ojFMXOAVSBGt7OPgM0x3s
7mAHh3uYgvaT3DjiN8LxFlBLBwjE8+7+6gAAAK4BAABQSwMEFAAICAgAiQVoRAAAAAAAAAAAAAAA
ABUAAABpMi9wYWNrYWdlLWluZm8uY2xhc3NNi0EOwUAYhd8ULTbY2DhDTSJ2VkQkEqmEE0zH32Zq
zDTttImrWTiAQ4kiEW/xvcX33uN5uwOYoxfAYxioGc+FPIuUQmUSG6DNMMxELbgWJuX7OCPpGPpH
WxWSNkoTw+j/MX2PGSaHyjh1oa2pValiTUtjrBNOWVMyhDtbpJykVnlJPDs5Ln6aR9ZEldar65oS
UWm3GAMMLXzjofOhj6BpvzFd4AVQSwcIQcnIhKUAAADGAAAAUEsDBBQACAgIAJkFaEQAAAAAAAAA
AAAAAAAMAAAAaTIvSTJBLmNsYXNzhY8xSwNBEIXfXMxdTDSkTy+m0MXDzioigYOQgCmtNud47LHZ
lbvdA/+aRX5AflTIrkUKLRyYGXjvK947HL/3AB4xzpAQUpWLIp9nuCBMatlJoaWpxHpbc+kIye6B
cHO7/O08zf5Kkc7/pzeuUaYK9HBjfVPyQmkmDEKI+wgRpq/eOLXjwnSqVVvNc2Osk05Z0xLulrap
BJdafbYs6ncn5NkWK2tWXuvnrxf+kF7HTP1Oas8pgdBDnCQ07SNFbJxhEBVc/twhRuGPAnkV9voN
OAFQSwcIPtgfH9EAAAAtAQAAUEsDBBQACAgIAJIFaEQAAAAAAAAAAAAAAAALAAAAaTIvSUkuY2xh
c3M79W/XPgYGBhMGbnYGJkYG1kwjfU9PdgYWRgaBrMSyRP2cxLx0ff+krNTkEnYGNkYG5kx9T0YG
plxDRgYLDR90JdaYIppIQsElRZl56daMDFzB+aVFyalumTmpjAzsnp56IDVA04HmAzEr0EGMQBew
M3CAWAycQJKJgQsAUEsHCA/wXs98AAAAqwAAAFBLAwQUAAgICACOBWhEAAAAAAAAAAAAAAAACwAA
AGkyL0kyLmNsYXNzO/Vv1z4GBgYTBm52BiZGBtZMI31PI3YGFkYGgazEskT9nMS8dH3/pKzU5BJG
BqZcQ0YGNQ0fdBlrTUwhkGojwqqDS4oy89KBqrmC80uLklPdMnNSGRnYPY30QGrYGBkYGZgZQIAJ
6CRWBjYGkNPYGTiAIowMnCBxBi4AUEsHCOhGkph7AAAAxAAAAFBLAwQUAAgICABYBWhEAAAAAAAA
AAAAAAAACAAAAC5wcm9qZWN0dZBNDsIgFITX9hRN9xarmy4oXWi8gPUACC8NpvwEaOPxhRYba+Ju
Zt48PgC3LznkE1gntGqKqjwUOSimuVB9U9y7674uWpJhY/UTmL+AY1YYH8ok22FFJZAOnD/V9bGu
MJqDMGBaSlCeYPRRIUxnuKjRt3mMYuA3AyyY5M5hjSoeg4TRti+BDcI4KJ/cl0zbIOhE5z7YFR4W
qO3HSHWLRRuP0Q8hBekCgeZHC0t10f/Zyzyi5148a11f37j5tDdQSwcIklS6Rb8AAABxAQAAUEsD
BBQACAgIAGAFaEQAAAAAAAAAAAAAAAAKAAAALmNsYXNzcGF0aH2QQU8CQQyFz/IrNnNnVm4cdiHG
rIkkYgKrV1M6dRkdOptph8i/d4kSjai3tvnavveq+dsuFHtK4iPXZmIvTUGM0XnuavPQ3oynZj4b
VRhApAfdzkYXXw2xpkPx6tnVRhKa4jj8KMs/QYx8AmPqLGHwvZB9cWoDZMbt8NouVs3T9f2yvbpd
NqvyJ+dZKTEE62iTO5v95yYlu1ZgB8k93rWHnsoF7GHdjCd2+qsijLuNZwJEEkk5kNTmGYKQOXd1
pgKYo4IOwf3jNmbts55uDM+ObFV+y/MdUEsHCDGU5l3XAAAAgwEAAFBLAQIUABQACAgIAL0FaESy
fwLuGwAAABkAAAAUAAQAAAAAAAAAAAAAAAAAAABNRVRBLUlORi9NQU5JRkVTVC5NRv7KAABQSwEC
FAAUAAgICAClBWhEPZpCQTcBAAAqAgAACgAAAAAAAAAAAAAAAABhAAAAYy9DMi5jbGFzc1BLAQIU
ABQACAgIAKEFaET6lWhbpAEAAFcDAAAKAAAAAAAAAAAAAAAAANABAABjL0MxLmNsYXNzUEsBAhQA
FAAICAgAZgVoRMTz7v7qAAAArgEAAAkAAAAAAAAAAAAAAAAArAMAAGkvSS5jbGFzc1BLAQIUABQA
CAgIAIkFaERByciEpQAAAMYAAAAVAAAAAAAAAAAAAAAAAM0EAABpMi9wYWNrYWdlLWluZm8uY2xh
c3NQSwECFAAUAAgICACZBWhEPtgfH9EAAAAtAQAADAAAAAAAAAAAAAAAAAC1BQAAaTIvSTJBLmNs
YXNzUEsBAhQAFAAICAgAkgVoRA/wXs98AAAAqwAAAAsAAAAAAAAAAAAAAAAAwAYAAGkyL0lJLmNs
YXNzUEsBAhQAFAAICAgAjgVoROhGkph7AAAAxAAAAAsAAAAAAAAAAAAAAAAAdQcAAGkyL0kyLmNs
YXNzUEsBAhQAFAAICAgAWAVoRJJUukW/AAAAcQEAAAgAAAAAAAAAAAAAAAAAKQgAAC5wcm9qZWN0
UEsBAhQAFAAICAgAYAVoRDGU5l3XAAAAgwEAAAoAAAAAAAAAAAAAAAAAHgkAAC5jbGFzc3BhdGhQ
SwUGAAAAAAoACgBKAgAALQoAAAAA
</data>

          </attachment>
      

    </bug>

</bugzilla>