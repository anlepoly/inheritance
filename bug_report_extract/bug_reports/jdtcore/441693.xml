<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>441693</bug_id>
          
          <creation_ts>2014-08-13 09:44:00 -0400</creation_ts>
          <short_desc>[1.8][null] Bogus warning for type argument annotated with @NonNull</short_desc>
          <delta_ts>2014-09-17 06:00:40 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.5 M2</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Clovis Seragiotto">clovis.seragiotto</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>clovis.seragiotto</cc>
    
    <cc>jarthana</cc>
    
    <cc>manpalat</cc>
    
    <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2438499</commentid>
    <comment_count>0</comment_count>
    <who name="Clovis Seragiotto">clovis.seragiotto</who>
    <bug_when>2014-08-13 09:44:47 -0400</bug_when>
    <thetext>In the program below, the method requireNonNull is invoked with 

@Nullable Iterable&lt;@NonNull String&gt; 

as argument, and therefore the returned value is 

@NonNull Iterable&lt;@NonNull String&gt;. 

Assigning the returned value to the field iterable is therefore safe.

With Annotation-based null analysis enabled and &quot;Unchecked conversion from non-annotated type to @NonNull type&quot; set to warning, the null analysis issues a bogus warning: &quot;The expression of type &apos;@NonNull Iterable&lt;String&gt;&apos; needs unchecked conversion to conform to &apos;@NonNull Iterable&lt;@NonNull String&gt;&apos;&quot; at the line marked with (*)


package foo.bar;

import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jdt.annotation.NonNullByDefault;
import org.eclipse.jdt.annotation.Nullable;

@NonNullByDefault({})
public abstract class Foo {
    
    abstract &lt;T&gt; @NonNull T requireNonNull(@Nullable T obj);
    
    @NonNull Iterable&lt;@NonNull String&gt; iterable;
    
    Foo(@Nullable Iterable&lt;@NonNull String&gt; iterable) {
        this.iterable = requireNonNull(iterable); // (*)
    }
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2438952</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-08-14 05:54:29 -0400</bug_when>
    <thetext>Thanks for the report, I&apos;ll take a look.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2438965</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-08-14 06:11:17 -0400</bug_when>
    <thetext>It&apos;s what I thought it is:

When creating &quot;the @NonNull variant of T&quot; 
using T=@Nullable Iterable&lt;@NonNull String&gt;
we not only drop the outer @Nullable (OK)
but also the inner @NonNull (NOK).

I&apos;m currently investigating whether all seven sites calling type.unannotated(true) actually require removal only of the toplevel annotation or whether we&apos;ll need another parameter in that method...

Depending on the result the fix can be quite simple.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2439147</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-08-14 11:53:42 -0400</bug_when>
    <thetext>Released for 4.5 M2 via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=8913fe5c78a14de5e97c4d6b801f5ed8424bf8a8

The patch looks bigger than might be expected, but much of it is just due to the divorce of two diverging methods:

- TypeBinding.unannotated()
  with this change basically back to the simple version before bug 438458.

- TypeBinding.withoutToplevelNullAnnotations()
  new method for shallow manipulation of null type annotations


See also bug 441797 for an issue discovered during work on this bug.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2439169</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-08-14 12:42:52 -0400</bug_when>
    <thetext>*** Bug 441338 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2452588</commentid>
    <comment_count>5</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-09-16 11:50:39 -0400</bug_when>
    <thetext>Verified for Mars 4.5M2 using I20140915-2000 build.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>