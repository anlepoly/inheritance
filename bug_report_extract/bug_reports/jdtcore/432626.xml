<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>432626</bug_id>
          
          <creation_ts>2014-04-11 09:55:00 -0400</creation_ts>
          <short_desc>[1.8] Type mismatch error after removing redundant type arguments</short_desc>
          <delta_ts>2014-10-29 01:10:01 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 8</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.5 M3</target_milestone>
          <dependson>444891</dependson>
          <blocked>428061</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Timo Kinnunen">timo.kinnunen</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2388082</commentid>
    <comment_count>0</comment_count>
      <attachid>241891</attachid>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-04-11 09:55:34 -0400</bug_when>
    <thetext>Created attachment 241891
Example code showing the bug before and after

This bug may be a duplicate of either bug 432605 or bug 432619 but it involves a compiler warning so maybe not. 

Using the attached code, it shows two versions of the same method. The first one has redundant type arguments on the indicated line, which causes a warning to be shown, which is fine. 

The second version is the same method after using Quick Assist to remove the arguments. The second version doesn&apos;t compile with ECJ but both versions compile with javac.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2394795</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-04-29 09:50:33 -0400</bug_when>
    <thetext>Path to the point were inference fails:

- during invocation type inference for terminalAsCollected(..)
- we found BoundSet.condition18_5_2_bullet_3_3_1(..) to answer true
- hence we perform resolving according to 18.5.2 bullet 3.3,
  i.e., &quot;then  is resolved in B2...&quot;
- to resolve  we determine the set of dependent variables to [M#2, K#4, K#9]
- first attempt of resolution fails
- during second attempt we create fresh type variables
- when incorporating the new constraints we bail out at
  &lt;Z#0-M#2 extends Map&lt;Z#1-K#4,D#5&gt; &amp; Map&lt;Z#1-K#4,ArrayList&lt;T&gt;&gt;&gt; :&gt; HashMap&lt;K#9,V#10&gt;
  
The LHS is a CaptureBinding18 with two upper bounds and no lower bound,
the RHS is a non-proper PTB.

To normalize the constraint into a subtype constraint swap sides, so
 S = HashMap&lt;K#9,V#10&gt;
 T = &lt;Z#0-M#2 extends Map&lt;Z#1-K#4,D#5&gt; &amp; Map&lt;Z#1-K#4,ArrayList&lt;T&gt;&gt;&gt;
Apply 18.2.3: &quot;If T is a type variable, .. Otherwise ... Otherwise false&quot;

End of story.

At this point the current boundset contains 38 constraints and bounds. Checking for each of these if they&apos;re correct is not feasible (under time constraints).

Next I made a quick experiment, whether resolving just M#2 instead of the set [M#2, K#4, K#9] makes a difference, but it doesn&apos;t.

Looks like ECJ is behaving as designed.

I&apos;ll give it one more shot for 4.4 (not M7). At least we shouldn&apos;t suggest to remove type arguments if removal leads to a compile error :-/</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2394939</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-04-29 11:57:35 -0400</bug_when>
    <thetext>Disabled test has been released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=2cc3eedf97567eb10fbd2185cfb7c5012b127add</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404379</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-20 12:24:39 -0400</bug_when>
    <thetext>Ran out of time for Luna.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2434392</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-07-31 15:30:35 -0400</bug_when>
    <thetext>Needs one more round of scrutiny before we can either fix or report against javac.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2451421</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-09-14 09:13:12 -0400</bug_when>
    <thetext>I ran two more experiments of guessing why javac might accept this program.

(1) 
I had the gist that this constraint was involved in the trouble (K#4 being involved in the failing constraint):
  capture#5-of ? extends K &lt;: K#4
So I figured, javac might be doing some unsolicited uncapturing here. I modified reduction so that instead we produce the simpler
  K &lt;: K#4
Even with this tweak, however, we fail at a constraint of the same shape:
  &lt;Z#2-M#7 extends Map&lt;Z#1-K#4,D#5&gt; &amp; Map&lt;Z#1-K#4,ArrayList&lt;T&gt;&gt;&gt; :&gt; java.util.HashMap&lt;K#9,V#10&gt;


(2)
Looking at the constraint where we fail (see comment 1), it struck me as funny that we should see K#9 in a constraint, although we are in the middle of substituting all of [M#2, K#4, K#9]

I found an asymmetry in 18.4, where for upper bounds we apply substitution theta, whereas lower bounds are used unsubstituted. In fact we do not consider one particular lower bound because it refers to that inference variable K#9.

I tweaked BoundSet.lowerBounds to consider the same substitution theta as is used for upper bounds, two versions tried: (a) use substitution only for checking isProperType(), (b) also answer the substituted type. I actually found a note by Dan Smith relating to this exact bullet:
  &quot;One thing that needs tweaking (a known issue) is the use of lub in 18.4.  The inputs to lub might not be fully defined types -- they might involve type variables whose bounds we are in the middle of instantiating.  So I need to back off a bit on what we can do there, probably only taking the lub of the proper lower bounds.&quot;
This was at the times of SPEC 0.6.3. I believe the current SPEC is the result of this exact consideration.
(Does javac not implement that spec change?).

I applied my teaks, but with both versions resolution still fails, now at
  &lt;Z#1-K#4 extends java.lang.Object&gt; = &lt;Z#3-K#9 extends java.lang.Object&gt;

Distinct type variables are never equal, so we answer FALSE.
To avoid this situation the SPEC would need a device for collapsing equal inference variables (we know that &quot;K#4 = K#9&quot;) before creating fresh type variables.
I don&apos;s see such device in the SPEC, though.


I&apos;m running out of ideas why javac might accept this program, hence feeding this bug into the pipeline of bug 428061.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2451423</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-09-14 09:19:01 -0400</bug_when>
    <thetext>PS: I do see the strange warning re redundant type arguments. The problem here is: we only have local information of the allocation new HashMap&lt;K, ArrayList&lt;T&gt;&gt;(), at what point we already know the target type HashMap&lt;K,ArrayList&lt;T&gt;&gt; and see that explicit type arguments don&apos;t seem to add more information.

I see no easy way for finding out that these exact type arguments contributed to outer inference which in fact established that exact target type. IOW:
 - explicit type arguments create specific target type
 - target type indicates that type arguments are redundant, 
but without type arguments we never find that target type... tricky ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2453440</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-18 00:01:40 -0400</bug_when>
    <thetext>Targetting for 4.5 M3. While ATM ownership is left unchanged, Stephan is under
time constraint during this window, so I will likely take this over or assign to someone else to load balance later on.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2456792</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-26 12:03:52 -0400</bug_when>
    <thetext>Most likely a duplicate of bug 444891, I&apos;ll investigate,</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2461294</commentid>
    <comment_count>9</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-07 23:17:03 -0400</bug_when>
    <thetext>I believe we are hitting https://bugs.eclipse.org/bugs/show_bug.cgi?id=444891
in this too. 

The return expression of this lambda:

(left, right) -&gt; combined(left, right)))

which is a poly expression must contribute to the C set and presently it
does not.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2463219</commentid>
    <comment_count>10</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-11 01:06:16 -0400</bug_when>
    <thetext>Smaller example: 

// --
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Collector;
import java.util.stream.Collectors;

public interface X {
	static &lt;T, K&gt; Map&lt;K, ArrayList&lt;T&gt;&gt; terminalAsMapToList(Function&lt;? super T, ? extends K&gt; classifier)  {
		return terminalAsCollected(Collectors.groupingBy(
			  classifier,
			  () -&gt; new HashMap&lt;&gt;(),
			  (Collector&lt;T,ArrayList&lt;T&gt;,ArrayList&lt;T&gt;&gt;) null));
	}
	static &lt;T, M&gt; M terminalAsCollected(Collector&lt;T, ?, M&gt; collector) {
		return null;
	}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2463249</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-11 05:57:54 -0400</bug_when>
    <thetext>Fix and tests posted for review at https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444#c64</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2463250</commentid>
    <comment_count>12</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-11 05:59:46 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #1)
&gt; Path to the point were inference fails:
&gt; 
&gt; - during invocation type inference for terminalAsCollected(..)
&gt; - we found BoundSet.condition18_5_2_bullet_3_3_1(..) to answer true


See https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444#c64, it should
actually answer false for this test case.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2463263</commentid>
    <comment_count>13</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-11 09:22:05 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #12)
&gt; (In reply to Stephan Herrmann from comment #1)
&gt; &gt; Path to the point were inference fails:
&gt; &gt; 
&gt; &gt; - during invocation type inference for terminalAsCollected(..)
&gt; &gt; - we found BoundSet.condition18_5_2_bullet_3_3_1(..) to answer true
&gt; 
&gt; 
&gt; See https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444#c64, it should
&gt; actually answer false for this test case.

I made a note in bug 428061 comment 8.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471743</commentid>
    <comment_count>14</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-25 09:13:04 -0400</bug_when>
    <thetext>In bug 437444, BoundSet.condition18_5_2_bullet_3_3_1() applies a bit of hand-waving why we need to perform some extra instantiations.

IIRC this issue will be re-visited by another bug on top. When all dust has settled, we should re-check if the final version is backed by the spec.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471744</commentid>
    <comment_count>15</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-25 09:19:00 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #14)
&gt; In bug 437444, BoundSet.condition18_5_2_bullet_3_3_1() applies a bit of
&gt; hand-waving why we need to perform some extra instantiations.
&gt; 
&gt; IIRC this issue will be re-visited by another bug on top. When all dust has
&gt; settled, we should re-check if the final version is backed by the spec.

In patch https://bugs.eclipse.org/bugs/attachment.cgi?id=248174 posted as
&quot;Addendum to incorporate review comments&quot; at 
https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444

the applyInstantiation method and its calls are withdrawn and we now check
for supers[0] and supers[1] being proper types as suggested by
https://bugs.openjdk.java.net/browse/JDK-8056092</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471752</commentid>
    <comment_count>16</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-10-25 09:36:27 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #15)
&gt; (In reply to Stephan Herrmann from comment #14)
&gt; &gt; In bug 437444, BoundSet.condition18_5_2_bullet_3_3_1() applies a bit of
&gt; &gt; hand-waving why we need to perform some extra instantiations.
&gt; &gt; 
&gt; &gt; IIRC this issue will be re-visited by another bug on top. When all dust has
&gt; &gt; settled, we should re-check if the final version is backed by the spec.
&gt; 
&gt; In patch https://bugs.eclipse.org/bugs/attachment.cgi?id=248174 posted as
&gt; &quot;Addendum to incorporate review comments&quot; at 
&gt; https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444
&gt; 
&gt; the applyInstantiation method and its calls are withdrawn and we now check
&gt; for supers[0] and supers[1] being proper types as suggested by
&gt; https://bugs.openjdk.java.net/browse/JDK-8056092

Thanks, one more item resolved!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2471784</commentid>
    <comment_count>17</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-25 11:58:14 -0400</bug_when>
    <thetext>Fix and tests included as a part of http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=f357f309273e0bfe8345ff708d18fa83c6a34931 made on behalf of 
https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2473185</commentid>
    <comment_count>18</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-10-29 01:10:01 -0400</bug_when>
    <thetext>Verified for 4.5 M3 using  I20141027-2000 build.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>241891</attachid>
            <date>2014-04-11 09:55:00 -0400</date>
            <delta_ts>2014-04-11 09:55:34 -0400</delta_ts>
            <desc>Example code showing the bug before and after</desc>
            <filename>StreamInterface2.java</filename>
            <type>text/plain</type>
            <size>2168</size>
            <attacher name="Timo Kinnunen">timo.kinnunen</attacher>
            
              <data encoding="base64">cGFja2FnZSBzbmlwcGV0OwoKaW1wb3J0IGphdmEudXRpbC5BcnJheUxpc3Q7CmltcG9ydCBqYXZh
LnV0aWwuSGFzaE1hcDsKaW1wb3J0IGphdmEudXRpbC5NYXA7CmltcG9ydCBqYXZhLnV0aWwuZnVu
Y3Rpb24uRnVuY3Rpb247CmltcG9ydCBqYXZhLnV0aWwuZnVuY3Rpb24uU3VwcGxpZXI7CmltcG9y
dCBqYXZhLnV0aWwuc3RyZWFtLkNvbGxlY3RvcjsKaW1wb3J0IGphdmEudXRpbC5zdHJlYW0uQ29s
bGVjdG9yczsKaW1wb3J0IGphdmEudXRpbC5zdHJlYW0uU3RyZWFtOwoKcHVibGljIGludGVyZmFj
ZSBTdHJlYW1JbnRlcmZhY2UyIHsKCglzdGF0aWMgPFQsIEUgZXh0ZW5kcyBFeGNlcHRpb24sIEs+
IE1hcDxLLCBBcnJheUxpc3Q8VD4+IHRlcm1pbmFsQXNNYXBUb0xpc3QoCgkgIEZ1bmN0aW9uPD8g
c3VwZXIgVCwgPyBleHRlbmRzIEs+IGNsYXNzaWZpZXIsCgkgIFN1cHBsaWVyPFN0cmVhbTxUPj4g
c3VwcGxpZXIsCgkgIENsYXNzPEU+IGNsYXNzT2ZFKSB0aHJvd3MgRSB7CgkJcmV0dXJuIHRlcm1p
bmFsQXNDb2xsZWN0ZWQoY2xhc3NPZkUsIENvbGxlY3RvcnMuZ3JvdXBpbmdCeSgKCQkJICBjbGFz
c2lmaWVyLAoJCQkgIC8vVGhpcyBpcyBPSzoKCQkJICAvL1JlZHVuZGFudCBzcGVjaWZpY2F0aW9u
IG9mIHR5cGUgYXJndW1lbnRzIDxLLCBBcnJheUxpc3Q8VD4+CgkJCSAgKCkgLT4gbmV3IEhhc2hN
YXA8SywgQXJyYXlMaXN0PFQ+PigpLAoJCQkgIENvbGxlY3Rvci48VCwgQXJyYXlMaXN0PFQ+PiBv
ZigKCQkJICAgICgpIC0+IG5ldyBBcnJheUxpc3Q8PigpLAoJCQkgICAgKGxlZnQsIHZhbHVlKSAt
PiBsZWZ0LmFkZCh2YWx1ZSksCgkJCSAgICAobGVmdCwgcmlnaHQpIC0+IGNvbWJpbmVkKGxlZnQs
IHJpZ2h0KSkpLCBzdXBwbGllcik7Cgl9CglzdGF0aWMgPFQsIEUgZXh0ZW5kcyBFeGNlcHRpb24s
IEs+IE1hcDxLLCBBcnJheUxpc3Q8VD4+IHRlcm1pbmFsQXNNYXBUb0xpc3QyKAoJICBGdW5jdGlv
bjw/IHN1cGVyIFQsID8gZXh0ZW5kcyBLPiBjbGFzc2lmaWVyLAoJICBTdXBwbGllcjxTdHJlYW08
VD4+IHN1cHBsaWVyLAoJICBDbGFzczxFPiBjbGFzc09mRSkgdGhyb3dzIEUgewoJCS8vQWZ0ZXIg
cmVtb3ZpbmcgdHlwZSBhcmd1bWVudHMsIEVDSiBzaG93cyBlcnJvciwgamF2YWMgZG9lc24ndDoK
CQkvL1R5cGUgbWlzbWF0Y2g6IGNhbm5vdCBjb252ZXJ0IGZyb20gSGFzaE1hcDxjYXB0dXJlIzIt
b2YgPyBleHRlbmRzIEssQXJyYXlMaXN0PFQ+PiB0byBNYXA8SyxBcnJheUxpc3Q8VD4+CgkJcmV0
dXJuIHRlcm1pbmFsQXNDb2xsZWN0ZWQoY2xhc3NPZkUsIENvbGxlY3RvcnMuZ3JvdXBpbmdCeSgK
CQkJICBjbGFzc2lmaWVyLAoJCQkgICgpIC0+IG5ldyBIYXNoTWFwPD4oKSwKCQkJICBDb2xsZWN0
b3IuPFQsIEFycmF5TGlzdDxUPj4gb2YoCgkJCSAgICAoKSAtPiBuZXcgQXJyYXlMaXN0PD4oKSwK
CQkJICAgIChsZWZ0LCB2YWx1ZSkgLT4gbGVmdC5hZGQodmFsdWUpLAoJCQkgICAgKGxlZnQsIHJp
Z2h0KSAtPiBjb21iaW5lZChsZWZ0LCByaWdodCkpKSwgc3VwcGxpZXIpOwoJfQoJc3RhdGljIDxF
IGV4dGVuZHMgRXhjZXB0aW9uLCBULCBNPiBNIHRlcm1pbmFsQXNDb2xsZWN0ZWQoCgkgIENsYXNz
PEU+IGNsYXNzT2ZFLAoJICBDb2xsZWN0b3I8VCwgPywgTT4gY29sbGVjdG9yLAoJICBTdXBwbGll
cjxTdHJlYW08VD4+IHN1cHBsaWVyKSB0aHJvd3MgRSB7CgkJdHJ5KFN0cmVhbTxUPiBzID0gc3Vw
cGxpZXIuZ2V0KCkpIHsKCQkJcmV0dXJuIHMuY29sbGVjdChjb2xsZWN0b3IpOwoJCX0gY2F0Y2go
UnVudGltZUV4Y2VwdGlvbiBlKSB7CgkJCXRocm93IHVud3JhcENhdXNlKGNsYXNzT2ZFLCBlKTsK
CQl9Cgl9CglzdGF0aWMgPEUgZXh0ZW5kcyBFeGNlcHRpb24+IEUgdW53cmFwQ2F1c2UoQ2xhc3M8
RT4gY2xhc3NPZkUsIFJ1bnRpbWVFeGNlcHRpb24gZSkgdGhyb3dzIEUgewoJCVRocm93YWJsZSBj
YXVzZSA9IGUuZ2V0Q2F1c2UoKTsKCQlpZihjbGFzc09mRS5pc0luc3RhbmNlKGNhdXNlKSA9PSBm
YWxzZSkgewoJCQl0aHJvdyBlOwoJCX0KCQl0aHJvdyBjbGFzc09mRS5jYXN0KGNhdXNlKTsKCX0K
CXN0YXRpYyA8VD4gQXJyYXlMaXN0PFQ+IGNvbWJpbmVkKEFycmF5TGlzdDxUPiBsZWZ0LCBBcnJh
eUxpc3Q8VD4gcmlnaHQpIHsKCQlsZWZ0LmFkZEFsbChyaWdodCk7CgkJcmV0dXJuIGxlZnQ7Cgl9
fQo=
</data>

          </attachment>
      

    </bug>

</bugzilla>