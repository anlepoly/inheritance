<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>456508</bug_id>
          
          <creation_ts>2015-01-02 05:58:00 -0500</creation_ts>
          <short_desc>Unexpected RHS PolyTypeBinding for: &lt;code-snippet&gt;</short_desc>
          <delta_ts>2015-01-28 01:02:23 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>4.5 M5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Emond Papegaaij">emond.papegaaij</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>jarthana</cc>
    
    <cc>shankhba</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2501476</commentid>
    <comment_count>0</comment_count>
      <attachid>249682</attachid>
    <who name="Emond Papegaaij">emond.papegaaij</who>
    <bug_when>2015-01-02 05:58:06 -0500</bug_when>
    <thetext>Created attachment 249682
showcase for the internal error

A regression in the 1.8 compiler causes an internal error when combining varargs and type-inference. With the compiler level set to 1.7, the code compiles fine.

The attached project triggers the following internal error:
java.lang.IllegalStateException: Unexpected RHS PolyTypeBinding for: new QueryAtom&lt;&gt;(PGroepAccount_.account)
	at org.eclipse.jdt.internal.compiler.lookup.ConstraintTypeFormula.reduceSubType(ConstraintTypeFormula.java:315)
	at org.eclipse.jdt.internal.compiler.lookup.ConstraintTypeFormula.reduce(ConstraintTypeFormula.java:94)
	at org.eclipse.jdt.internal.compiler.lookup.BoundSet.reduceOneConstraint(BoundSet.java:749)
	at org.eclipse.jdt.internal.compiler.lookup.BoundSet.reduceOneConstraint(BoundSet.java:760)
	at org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.reduceAndIncorporate(InferenceContext18.java:913)
	at org.eclipse.jdt.internal.compiler.lookup.ConstraintExpressionFormula.inferPolyInvocationType(ConstraintExpressionFormula.java:412)
	at org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.inferInvocationType(InferenceContext18.java:390)
	at org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.inferInvocationType(InferenceContext18.java:525)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.inferInvocationType(Scope.java:5150)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getStaticFactory(Scope.java:5068)
	at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.inferElidedTypes(AllocationExpression.java:581)
	at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.resolvePart2(AllocationExpression.java:497)
	at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.binding(AllocationExpression.java:706)
	at org.eclipse.jdt.internal.compiler.lookup.ConstraintExpressionFormula.reduce(ConstraintExpressionFormula.java:80)
	at org.eclipse.jdt.internal.compiler.lookup.BoundSet.reduceOneConstraint(BoundSet.java:749)
	at org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.reduce(InferenceContext18.java:867)
	at org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.solve(InferenceContext18.java:843)
	at org.eclipse.jdt.internal.compiler.lookup.ParameterizedGenericMethodBinding.computeCompatibleMethod(ParameterizedGenericMethodBinding.java:117)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:739)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:695)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1761)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1662)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getImplicitMethod(Scope.java:2621)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.findMethodBinding(MessageSend.java:866)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:698)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1020)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:619)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:299)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:529)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1207)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1320)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:587)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:1204)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:689)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1183)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:809)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:83)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:367)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:349)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:372)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:332)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2501523</commentid>
    <comment_count>1</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2015-01-02 08:21:05 -0500</bug_when>
    <thetext>The issue is reproducible with 4.5 M2.

javac 1.8 compiles the code with few warnings.

ecj tip: 
2. ERROR in C:\Work\4.5M4-Dec10\testcases\java8\src\java8\Test.java (at line 6)
        recordFilter(new SubqueryIn&lt;&gt;(new QueryAtom&lt;&gt;(PGroepAccount_.account)));
        ^^^^^^^^^^^^
The method recordFilter(SubqueryIn&lt;?,P&gt;) in the type Test is not applicable for the arguments (new SubqueryIn&lt;&gt;(new QueryAtom&lt;&gt;(PGroepAccount_.account)))
----------
3. ERROR in C:\Work\4.5M4-Dec10\testcases\java8\src\java8\Test.java (at line 6)
        recordFilter(new SubqueryIn&lt;&gt;(new QueryAtom&lt;&gt;(PGroepAccount_.account)));
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Cannot infer type arguments for SubqueryIn&lt;&gt;
----------

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2501533</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-01-02 09:03:30 -0500</bug_when>
    <thetext>(In reply to shankha banerjee from comment #1)
&gt; The issue is reproducible with 4.5 M2.

You seem to observe a different problem than comment 0.

Do you see the IllegalStateException as well?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2501535</commentid>
    <comment_count>3</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2015-01-02 09:16:45 -0500</bug_when>
    <thetext>Hi Stephan,
I do see the same error (Comment 0) with 4.5 M2. 

I do not see the error (Comment 0) with tip code but a different error (Comment 2).

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2501825</commentid>
    <comment_count>4</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-01-05 00:21:11 -0500</bug_when>
    <thetext>The bug happens on the tip of R4_4_maintenance but not on master. One possibility is that this got fixed as part of the alternate integration effort (bug 437444). If that&apos;s indeed the case, we are out of luck for including this for 4.4.2.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2502170</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-01-05 18:01:57 -0500</bug_when>
    <thetext>(In reply to Jay Arthanareeswaran from comment #4)
&gt; The bug happens on the tip of R4_4_maintenance but not on master. One
&gt; possibility is that this got fixed as part of the alternate integration
&gt; effort (bug 437444). If that&apos;s indeed the case, we are out of luck for
&gt; including this for 4.4.2.

To be precise, the bug disappeared with commit 0492d8e41c1aba4d81d43f5d644f4506ed10c8ab - titled:
  Workaround for Bug 432682 - [1.8][compiler] Type mismatch error with
lambda expression

That workaround was later reverted, the issue was then moved to Bug 444891, which as you guessed correctly was finally subsumed in bug 437444 :(

Do you want me to investigate if a standalone, simpler fix for this exception is possible?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2502217</commentid>
    <comment_count>6</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-01-05 22:37:55 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #5)
&gt; Do you want me to investigate if a standalone, simpler fix for this
&gt; exception is possible?

Thanks for the offer, Stephan! I was never going to say &apos;No&apos;, was I :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2502359</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-01-06 08:25:31 -0500</bug_when>
    <thetext>I have a draft point-fix for 4.4.2, tried to push it to gerrit, but
   HEAD -&gt; refs/for/R4_4_maintenance
answered
   [remote rejected]

Is this expected?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2502410</commentid>
    <comment_count>8</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-01-06 10:06:55 -0500</bug_when>
    <thetext>OK, I tried two things:

(1) Avoid the situation by the following stanza at the top of ConstraintExpressionFormula.inferPolyInvocationType():

  if (targetType instanceof PolyTypeBinding) {
      Expression expression = ((PolyTypeBinding)targetType).expression;
      if (expression == inferenceContext.currentInvocation &amp;&amp; expression instanceof AllocationExpression) {
          MethodBinding binding = ((AllocationExpression)expression).binding;
          if (binding != null)
              targetType = binding.declaringClass;
      }
  }

with this we go from throwing ISE to complaining:
----------
1. ERROR in Test.java (at line 9)
   recordFilter(new SubqueryIn&lt;&gt;(new QueryAtom&lt;&gt;(account)));
   ^^^^^^^^^^^^
The method recordFilter(SubqueryIn&lt;?,P&gt;) in the type Test is not applicable for the arguments (new SubqueryIn&lt;&gt;(new QueryAtom&lt;&gt;(account)))
----------
2. ERROR in Test.java (at line 9)
   recordFilter(new SubqueryIn&lt;&gt;(new QueryAtom&lt;&gt;(account)));
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
The constructor SubqueryIn&lt;Object,P&gt;(QueryAtom&lt;PGroepAccount,PAccount&gt;) is undefined
----------
3. ERROR in Test.java (at line 9)
   recordFilter(new SubqueryIn&lt;&gt;(new QueryAtom&lt;&gt;(account)));
                                 ^^^^^^^^^^^^^^^^^^^^^^^^
Cannot infer type arguments for QueryAtom&lt;&gt;
----------


(2) Inventing a way to handle the PolyTypeBinding in the unexpected situation right when it happens:

  case Binding.POLY_TYPE:
    return new ConstraintExpressionFormula(((PolyTypeBinding)superCandidate).expression, subCandidate, SUPERTYPE);

This lets us complain:

----------
1. ERROR in Test.java (at line 9)
   recordFilter(new SubqueryIn&lt;&gt;(new QueryAtom&lt;&gt;(account)));
   ^^^^^^^^^^^^
The method recordFilter(SubqueryIn&lt;?,P&gt;) in the type Test is not applicable for the arguments (new SubqueryIn&lt;&gt;(new QueryAtom&lt;&gt;(account)))
----------
2. WARNING in Test.java (at line 9)
   recordFilter(new SubqueryIn&lt;&gt;(new QueryAtom&lt;&gt;(account)));
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Type safety: A generic array of QueryAtom&lt;Object,P&gt; is created for a varargs parameter
----------

(In this case we&apos;d need to check if creating a ConstraintExpressionFormula from a ConstraintTypeFormula qualified as reduction, or if this bears the risk of non-termination; I&apos;d argue that unpealing the PolyTypeBinding *is* progress because we are removing one level of uncertainty).

Probably neither is perfect, seeing that we accept that code at 1.7.
But throwing ISE is probably worse (unless we argue that ISE is more transparent for users than reporting bogus errors).


I should probably analyse the issue against HEAD, to figure out, what will be the correct treatment moving forward...


One more observation: I saw ConstraintExpressionFormula.reduce() work with a previousMethod being a ProblemMethodBinding, without even noticing the problem. Not sure if this can possibly do any good.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2502415</commentid>
    <comment_count>9</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-01-06 10:15:47 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #7)
&gt; I have a draft point-fix for 4.4.2, tried to push it to gerrit, but
&gt;    HEAD -&gt; refs/for/R4_4_maintenance
&gt; answered
&gt;    [remote rejected]
&gt; 
&gt; Is this expected?

Never tried. Something to do with this git configuration:

remote.Gerrit.push=HEAD:refs/for/master ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2502422</commentid>
    <comment_count>10</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-01-06 10:26:44 -0500</bug_when>
    <thetext>(In reply to Jay Arthanareeswaran from comment #9)
&gt; (In reply to Stephan Herrmann from comment #7)
&gt; &gt; I have a draft point-fix for 4.4.2, tried to push it to gerrit, but
&gt; &gt;    HEAD -&gt; refs/for/R4_4_maintenance
&gt; &gt; answered
&gt; &gt;    [remote rejected]
&gt; &gt; 
&gt; &gt; Is this expected?
&gt; 
&gt; Never tried. Something to do with this git configuration:
&gt; 
&gt; remote.Gerrit.push=HEAD:refs/for/master ?

Probably some PEBKAC :-/
Trying this again with variant (2) it now worked:

https://git.eclipse.org/r/39046

I had added a second remote &quot;gerrit-4.4.x&quot; with 
  remote.gerrit-4.4.x.push=HEAD:refs/for/R4_4_maintenance

Not sure if that was needed or what made the difference.
Anyway, hudson is building the correct commit now ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2502446</commentid>
    <comment_count>11</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-01-06 10:56:38 -0500</bug_when>
    <thetext>Here&apos;s another twist:

master already has a similar snippet for handling the PolyTypeBinding in this exact code location. So I thought, safest would be to just backport that paragraph, which seems to be well isolated from the rest of the containing commit (should&apos;ve checked this in the very first place), BUT:
That back ported version lets the test from this bug throw StackOverflow!
(Which in fact is inference&apos;s way to encode this kind of non-termination during reduction).

Is that same snippet dangerous also in master? I dunno, this test doesn&apos;t trigger the snippet in master, which seems to have both: avoidance *and* handling of PolyTypeBinding.


@Jay: from this flood of attempts do you already have a preference towards 4.4.2? I guess, &quot;do nothing&quot; is still a candidate for 4.4.2?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2502453</commentid>
    <comment_count>12</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-01-06 11:10:21 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #11)
&gt; Here&apos;s another twist:
&gt; 
&gt; master already has a similar snippet for handling the PolyTypeBinding in
&gt; this exact code location. So I thought, safest would be to just backport
&gt; that paragraph, which seems to be well isolated from the rest of the
&gt; containing commit (should&apos;ve checked this in the very first place), BUT:
&gt; That back ported version lets the test from this bug throw StackOverflow!

Mystery resolved: the snippet unconditionally used a method&apos;s returnType where for constructors we should use the declaringClass instead.
-&gt; Need to apply this in master
-&gt; This makes the backported paragraph our candidate (3) for 4.4.2
(while (0) is &quot;do nothing&quot; :) ).

Still none of these attempts lets us accept the program (back to analysing this in master).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2502455</commentid>
    <comment_count>13</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-01-06 11:15:40 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #10)
&gt; Anyway, hudson is building the correct commit now ...

Something&apos;s amiss with o.e.j.annotation on hudson @ R4_4_maintenance: NullTypeAnnotationTest and StackMapAttributeTest fail when trying to access this bundle (fails at all compliance levels, so concerns v1.1 and v2.0).

But running these two suites locally is not a problem - probably easier than trying to fix the 4.4.2 build.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2502493</commentid>
    <comment_count>14</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-01-06 13:32:53 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #13)
&gt; (In reply to Stephan Herrmann from comment #10)
&gt; &gt; Anyway, hudson is building the correct commit now ...
&gt; 
&gt; Something&apos;s amiss with o.e.j.annotation on hudson @ R4_4_maintenance:
&gt; NullTypeAnnotationTest and StackMapAttributeTest fail when trying to access
&gt; this bundle (fails at all compliance levels, so concerns v1.1 and v2.0).
&gt; 
&gt; But running these two suites locally is not a problem - probably easier than
&gt; trying to fix the 4.4.2 build.

backporting Bug 441983 looks promising:
-&gt; https://hudson.eclipse.org/platform/job/eclipse.jdt.core-Gerrit/42/

Just missed to do the same for tests.builder, too.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2506199</commentid>
    <comment_count>15</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-01-15 11:01:00 -0500</bug_when>
    <thetext>In master the example is rejected because a diamond expression leaks a ParameterizedTypeBinding with zero type arguments into inference. This breaks when we compare QueryAtom against QueryAtom&lt;PGroepAccount,PAccount&gt;[] to determine the inference kind (strict vs. varargs). By falling back to &apos;strict&apos; we create unreducible constraints and hence fail.

While I have a patch under test, this is probably getting too involved for 4.4.2. So, for 4.4.2 from all the options discussed above, throwing ISE may be the least evil. Throwing SOE is worse, and rejecting the program for bad reasons is probably worse, too. Simply showing that we have a bug here is at least more transparent than wrong behavior without an exception, IMHO.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2506263</commentid>
    <comment_count>16</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-01-15 12:14:49 -0500</bug_when>
    <thetext>(In reply to comment #6)
&gt; (In reply to Stephan Herrmann from comment #5)
&gt; &gt; Do you want me to investigate if a standalone, simpler fix for this
&gt; &gt; exception is possible?
&gt; 
&gt; Thanks for the offer, Stephan! I was never going to say &apos;No&apos;, was I :)

Finally some simple and positive news: in https://git.eclipse.org/r/#/c/39046/ I have a simple solution that fixes both issues:
- ISE is fixed by back porting just one small paragraph from bug 437444.
- bogus compile errors are fixed by a simple solution for comment 15.

Hudson only found one unrelated error - same as in bug 445147 comment 9

Type checking against a ParameterizedTypeBinding with zero type arguments is doomed, so if this happens in other situations, no good can come from it. The proposed patch only tweaks one specific aspect of a type that was created from this diamond situation: ignore argument types during PTB.isEquivalentTo(). Thus I minimized the impact / risk.

Recommendation: let Sasi review this patch from the referenced gerrit for inclusion in 4.4.1.

I&apos;ll go ahead and test &amp; release the second part for 4.5 M5.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2506291</commentid>
    <comment_count>17</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-01-15 12:52:15 -0500</bug_when>
    <thetext>(In reply to comment #16)
&gt; I&apos;ll go ahead and test &amp; release the second part for 4.5 M5.

This is being tested via https://git.eclipse.org/r/39696 where I applied a slight variant of the previous solution: fix-up type bindings right when they are resolved via a diamond type reference (both of Parameterized{Single,Qualified}TypeReference - which will then affect QualifiedAllocationExpression as well).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2507041</commentid>
    <comment_count>18</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-01-18 10:50:41 -0500</bug_when>
    <thetext>Released for 4.5 M5 via commit 246965b39748e3da2ea49457412592390c45caa5 :

- the simple solution for comment 15.

- fixed the omission re return types of constructors mentioned in comment 12

- adjusted CompletionTests, since signatures of diamond types are not more reliably rendered using &quot;&lt;&gt;&quot; (not sure why this didn&apos;t happen previously).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2511114</commentid>
    <comment_count>19</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-01-28 01:02:23 -0500</bug_when>
    <thetext>Verified for 4.5 M5 with build I20150127-0900</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>249682</attachid>
            <date>2015-01-02 05:58:00 -0500</date>
            <delta_ts>2015-01-02 05:58:06 -0500</delta_ts>
            <desc>showcase for the internal error</desc>
            <filename>java8-bug.tar.gz</filename>
            <type>application/gzip</type>
            <size>1236</size>
            <attacher name="Emond Papegaaij">emond.papegaaij</attacher>
            
              <data encoding="base64">H4sIAAl4plQAA+2a33ObRhDH9Wr9FYye7JkEgQTCM5bkcdOkY0/rupGa6VvmBGsFBR3kONx6Mv7f
uwcISdj64VRCabyfFw640x7a+97uHUzYHTtt1vaKgTiOrY6mYxuLxxk1s2XZpuW0Oq1OzTBbNh40
e7/dykhiyYSm1SIWwZgxf7Ki3qb7/1Mmqf91N2BxHDH5aR82lIM7HWul/y3LmfnfaBsO+h/LRk0z
9tGZMi/c/93zf6aBdgci9kPea5i60dCAu6Hn83Gv8efw3evTxnm/3i0GSL9+ND8BLsW99tnnXq8R
C7ehqYtZsbmyohvyWcVQjHVwAz+KQZ94Ug9Ywt1PaFq/ev/245vfr4cXl9dv3zfL9XwuQXAW6B6M
krGe+HlLEPpAMu4x4X34bXgfQfMKx/fg7WtTP13TozCRUSJnnRr5XNXtNhee+dBu2hu5/iMRTsCV
+7GxSf+2bZX1bzpt0n8VbKv/fID8DLEr/EhiZaUmzqbQT4dQt5mWlcLC6RTF1Uf95CW8mDePVbm5
eDJK/MAbRODiSX72BpuhhtWF3EJZ/m4osIBm0/ogCuPYgIlxoqzG2Wlz6bzbLFnIL+QdQGsyEZBV
zcqrbWf3lem0nvqtonnxjEv/16F9/RSZ/nHC3mMO+Iz8z2irema7bVqU/1XB3P+Tva0EnpP/t+x0
/m9T/l8NZf//kYC4v5DhNJ3jdmNjU/w37c7c/2Yb/e+Ypknxvwoi5n5mY9BS75/V61EyCnxXS1Nf
rRgM3eEr7aavfa0f5feLO8cDTBSSgIkLKYU/SiR0z7U4iUBoWRuVP5+olg/1h+8yAr5syvp/5M4d
zAOb9G84Rf5v4gKgZrQMtQ1E+q+AFfpPF9i3zAXtsb7/eqUN1VzwcOi+E/+dsv5vfhEhRBeuGyZc
ftxNEpDq31qt/5ZhF/FfzQV4wWhT/K+EFfpno1gK5so8EVgeFQt5AP55Eg93YYDH4KnZYqkpZgR5
qa+xrHBGacEhWav/Ha0BNunfsJ15/q/yBNNxDNr/r4S1+f/SYKh/JaX+eJT1P4R4V7Iv2JT/t1vF
/o+F2QDqv2M4FP8rYa3+1WDAYF9E+7vQ9zTug7zk6cxwnC7sjwS4ofDe+QGuGY45/K0NktEXtUFw
ybv99MJ8I6F/XMow8zTg5OTkTO0RoC0RSnAleFr3pp+ZXDKw8OPn6Q4Dw9+lHYZv5FH8323oT9m4
/rdb8/iPwkf9dxxa/1fC+vhPof9H59H+XzG77m4G2Lz/P1//Wx2lf6fl2KT/Klir/4VQO0hD7cLK
f37veB7d01q6rmtxflddjSk4f7/k3//EIKXPx/Gh3//Ovv+x2vT+txLK/n/yc5dIwG387TY2zP+m
abbn/lfvf1umRe9/q2Hma+ViEMBdiPXZ12Bm/cnR4IbTyA9AYMGDMXDd54HP4SoWP93jyg0v9oCz
UQDelu3RAWOQNwGTt6GY9kz9dMuGCU9i8H4NXRb08AFiEHewsek0CnyGz7mFnezrUvVw18l0BKKH
RkEwuclI3k716wMTvvovntc0DhPhAi54t26Hq2a0MtUxbIOQlx5w6d/62GUQIhRbNgaeTJ/ZNOtp
+l8eeigTBEEQBEEQBEEQBEEQBEEQBEEQBEEQxIvlX/bE3zcAUAAA
</data>

          </attachment>
      

    </bug>

</bugzilla>