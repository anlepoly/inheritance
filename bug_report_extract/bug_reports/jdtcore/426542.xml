<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>426542</bug_id>
          
          <creation_ts>2014-01-24 03:15:00 -0500</creation_ts>
          <short_desc>[1.8] Most specific method not picked when one method has intersection type as type parameter</short_desc>
          <delta_ts>2014-02-21 03:46:30 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Jay Arthanareeswaran">jarthana</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>manpalat</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2353989</commentid>
    <comment_count>0</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-01-24 03:15:35 -0500</bug_when>
    <thetext>Here&apos;s my testcase:

public class X {
	
	&lt;T extends Comparable &amp; Serializable&gt; void foo(T o1) {
	}

	&lt;T extends Serializable&gt; void foo(T o1) {
	}

	void bar() {
		foo((Comparable &amp; Serializable)0); // [1] not applicable for error
		foo(0); // [2] ambiguous for type error
	}
}

As demonstrated by the following code, if you add a type argument to Comparable, the second error goes away.

public class X {
	
	&lt;T extends Comparable&lt;T&gt; &amp; Serializable&gt; void foo(T o1) {
	}

	&lt;T extends Serializable&gt; void foo(T o1) {
	}

	void bar() {
		foo(0); // No issues here
	}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2356382</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-30 01:50:03 -0500</bug_when>
    <thetext>Let me take a swipe at this one - At first site, I doubt that inference has
a finger in the pie - it may all be part F, with some missing implementation
details in ICTB. If G is involved will reassign.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2356520</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-30 06:09:40 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #1)

Stephan, thanks for taking over - I need to start also owning bugs in
this part of the world, will do so - just not right yet, hopefully pretty
soon,</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2361648</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-11 10:38:57 -0500</bug_when>
    <thetext>Deep inside type inference I found a gem: an IntersectionCastTypeBinding is (said to be) not compatible to itself :)

Fixed straight-forwardly by implementing comparison of two intersection types: to ensure compatibility regarding all types in &apos;right&apos;: for each type Ri in right, left must have a type Lj that is conform to Ri.
So much for the theory, practically, all cases I&apos;ve seen so far are already handled if we do a TypeBinding.equalsEquals() check at the beginning :)

Doing both checks should yield a complete solution.


Released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=7693b6034c5b487d7e3d22ce3120cc397666c014</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2366535</commentid>
    <comment_count>4</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2014-02-21 03:46:30 -0500</bug_when>
    <thetext>Verified as working for Eclipse + Java 8 RC1 using Kepler SR2(RC4) +   
Eclipse Java Development Tools Patch for Java 8 Support (BETA)   
1.0.0.v20140220-2054</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>