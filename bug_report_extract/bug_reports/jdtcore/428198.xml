<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>428198</bug_id>
          
          <creation_ts>2014-02-14 08:46:00 -0500</creation_ts>
          <short_desc>[1.8][compiler] Type mismatch: cannot convert error from unchecked conversion with @SuppressWarnings</short_desc>
          <delta_ts>2014-02-21 00:12:11 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 8</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          <dependson>428264</dependson>
          <blocked>428203</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Timo Kinnunen">timo.kinnunen</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>jarthana</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2363458</commentid>
    <comment_count>0</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-02-14 08:46:00 -0500</bug_when>
    <thetext>Test case from compiling Eclipse source code at source and target level 1.8:

interface BundleRevision {}
interface BundleDescription extends BundleRevision {}
public class Snippet {
  static Collection&lt;BundleRevision&gt; test(BundleDescription[] triggers) {
    @SuppressWarnings(&quot;unchecked&quot;)
    Collection&lt;BundleRevision&gt; triggerRevisions =
    //Type mismatch: cannot convert from Collection&lt;Object&gt; to Collection&lt;BundleRevision&gt;
      Collections
        .unmodifiableCollection(triggers == null ? Collections.EMPTY_LIST
        : Arrays.asList((BundleRevision[]) triggers));
    return triggerRevisions;
  }
}

This is with the latest official BETA_JAVA8 plugins.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2363475</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-14 09:38:35 -0500</bug_when>
    <thetext>Hi Timo, That was going to be our next project, as seems to be the trend you are
one step ahead of us :)

We already validated that we are able to build all of Eclipse SDK using
BETA_JAVA8 compiler at the current/prevailing project compliance levels.

Boosting everything to 1.8 and compiling SDK is a good test.

Since it looks like you have this set up going: How many build issues are
you seeing ? Error list would be appreciated - if you could attach it.

It is proving to be a match between the tireless defect reporter and the tireless
defect fixer, I am sure Stephan will be the winner - but viewed in the right 
perspective, we will all be winners, appreciate your time, effort and interest !</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2363570</commentid>
    <comment_count>2</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-02-14 12:22:14 -0500</bug_when>
    <thetext>(In reply to comment #1)

&gt; Since it looks like you have this set up going: How many build issues are
&gt; you seeing ? Error list would be appreciated - if you could attach it.

I only have at the ready those projects and their dependencies that needed for building the BETA_JAVA8 plugins, but of these 47 projects ranging from eclipse.jdt.core to rt.equinox.framework, and I have to say I wasn&apos;t expecting quite this result, but this is the only error.

I guess it makes sense because the code isn&apos;t really pushing the limits of the language and its compilers :) This one only does so because the way it&apos;s written isn&apos;t quite wrong per se but it&apos;s not really quite right either.

A full SDK test might uncover one or two more errors, but not that much more, I&apos;d now guess.

&gt; It is proving to be a match between the tireless defect reporter and the
&gt; tireless
&gt; defect fixer, I am sure Stephan will be the winner - but viewed in the right
&gt; perspective, we will all be winners

That&apos;s my thinking as well!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2363572</commentid>
    <comment_count>3</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-02-14 12:34:15 -0500</bug_when>
    <thetext>(In reply to comment #2)

&gt; This one only does so because the way it&apos;s written
&gt; isn&apos;t quite wrong per se but it&apos;s not really quite right either.

Instead of:

@SuppressWarnings(&quot;unchecked&quot;) 
Collection&lt;BundleRevision&gt; triggerRevisions = 
Collections.unmodifiableCollection(triggers == null ? Collections.EMPTY_LIST : Arrays.asList((BundleRevision[]) triggers));

it could be written as:

Collection&lt;BundleRevision&gt; triggerRevisions = 
triggers == null ? Collections.emptyList() : Collections.unmodifiableCollection(Arrays.asList(triggers));</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2363783</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-15 10:33:41 -0500</bug_when>
    <thetext>(In reply to Timo Kinnunen from comment #3)
&gt; (In reply to comment #2)
&gt; 
&gt; &gt; This one only does so because the way it&apos;s written
&gt; &gt; isn&apos;t quite wrong per se but it&apos;s not really quite right either.
&gt; 
&gt; Instead of:
&gt; 
&gt; @SuppressWarnings(&quot;unchecked&quot;) 
&gt; Collection&lt;BundleRevision&gt; triggerRevisions = 
&gt; Collections.unmodifiableCollection(triggers == null ? Collections.EMPTY_LIST
&gt; : Arrays.asList((BundleRevision[]) triggers));
&gt; 
&gt; it could be written as:
&gt; 
&gt; Collection&lt;BundleRevision&gt; triggerRevisions = 
&gt; triggers == null ? Collections.emptyList() :
&gt; Collections.unmodifiableCollection(Arrays.asList(triggers));

Exactly!!

&lt;rant&gt;
Most trouble with inference results from using raw types. I&apos;m thinking of charging a fee for any bugfix relating to raw types. Java 1.4 code translated by a Java 8 compiler - it makes no sense to support that legacy style 10 years after.
&lt;/rant&gt;

I&apos;m currently investigating two issues:

This one should also compile
    Collection&lt;BundleRevision&gt; triggerRevisions =
      Collections
        .unmodifiableCollection(triggers == null ? Collections.emptyList()
        : Arrays.asList((BundleRevision[]) triggers));
This fails inside ConditionalExpression.checkAgainstFinalTargetType() where the valueIfTrue has an unfinished inference which should be brought to completion here.


The initial example enters inference mode with unchecked conversions: In 18.5.2 we go into &quot;If unchecked conversion was necessary for the method to be applicable in 18.5.1 ...&quot;
The next bullets start with &quot;Otherwise&quot;, which means in unchecked mode we don&apos;t produce the subsequent constraints incl. R   T. If we deliberately ignore that chain of &quot;otherwise&quot;, we do produce that constraint and inference succeeds. Seeing javac accept the program, we may have to make this little bend to the spec&apos;d behavior.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2363828</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-15 16:52:43 -0500</bug_when>
    <thetext>The first issue (unfinished inference) is fixed by implementing MessageSend.checkAgainstFinalTargetType(TypeBinding targetType) as checking for unfinished inference and, if found, doing the typical stanza of inferInvocationType(), updateBindings() and resolvePolyExpressionArguments().

The other issue (target type not respected after unchecked conversion was detected) I&apos;ve reported to the EG list [1]. After finding that even a JRE class suffers from this issue (is not acceptable according to my strict interpretation of the spec) I aligned ecj with javac, despite the spec.

Let&apos;s see if my post to the EG list yields an answer that would require me to change the implementation.

For now I consider the resolved, tests &amp; fix have been released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=c4bbe81e5ffd7d180da7485d9b35d8dbf9b1703c

[1] http://mail.openjdk.java.net/pipermail/lambda-spec-experts/2014-February/000507.html</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2364530</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-17 14:28:03 -0500</bug_when>
    <thetext>(In reply to Timo Kinnunen from comment #2)
&gt; (In reply to comment #1)
&gt; 
&gt; &gt; Since it looks like you have this set up going: How many build issues are
&gt; &gt; you seeing ? Error list would be appreciated - if you could attach it.
&gt; 
&gt; I only have at the ready those projects and their dependencies that needed
&gt; for building the BETA_JAVA8 plugins, but of these 47 projects ranging from
&gt; eclipse.jdt.core to rt.equinox.framework, and I have to say I wasn&apos;t
&gt; expecting quite this result, but this is the only error.

Could you describe the setup/process you used to do this ? What are these
47 projects ? Did you manually boost the source/compliance levels for
each of them ? 

In general in the past my attempts at creating source projects by importing 
the entire SDK&apos;s project set from the target platform has always resulted in 
various errors about execution environments, missing pieces etc.

&gt; I guess it makes sense because the code isn&apos;t really pushing the limits of
&gt; the language and its compilers :) 

Let us not forget, Java 8 is not only about lambdas and type annotations.
The inference scheme is much more complex enough that we resorted to a clean
from the scratch implementation rather than evolving the older one - I have
heard that Sun did the same thing - in fact I believe they prototyped more
than one solution. So any code that calls generic methods whether from the
library or projects is testing the new type inference infrastructure.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2364578</commentid>
    <comment_count>7</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-02-17 16:56:45 -0500</bug_when>
    <thetext>(In reply to comment #6)
&gt; (In reply to Timo Kinnunen from comment #2)
&gt; &gt; (In reply to comment #1)
&gt; &gt;
&gt; Could you describe the setup/process you used to do this ? What are these
&gt; 47 projects ? Did you manually boost the source/compliance levels for
&gt; each of them ?

The 47 have accumulated over time, starting from JDT Core and JDT UI and their dependencies. Over time I&apos;ve added the plugins needed for building BETA_JAVA8 support and any other plugins that I&apos;ve needed to run in debugger with local variables included.

The process has been going like this:
1) From a Wiki or other source, obtain a list of root projects and the list of repositories they belong to.
2) Clone each repository without importing the projects yet.
3) For all repos, import all of the projects but no sub-projects into one working set. Close all the imported projects before moving to the next repo.
4) Once all projects are imported and closed, select the original root projects and move them to a new working set and open them.
5) Move all projects that also got opened in the first working set to the new working set as well.
6) Fix build errors, more on this below.
7) If any projects are missing dependencies, repeat the process from step 1 for them.

Eventually, hopefully, everything compiles and a new equilibrium has been attained.

&gt; In general in the past my attempts at creating source projects by importing
&gt; the entire SDK&apos;s project set from the target platform has always resulted in
&gt; various errors about execution environments, missing pieces etc.

I&apos;ve noticed that too. The best and easiest way to deal with these for me has been to open each project&apos;s MANIFEST.MF, remove all existing BREEs on Overview tab, add the BREE that matches the JDK in use and then clicking &quot;Update classpath settings&quot;. I also check that the order of entries in .classpath didn&apos;t get changed by this. Quick Diff against a git revision helps here a lot.

In addition, twiddling with Target Platform, API Baseline, API Use scans, turning errors into warnings, cleaning all projects and restarting the workspace may be required.

&gt; &gt; I guess it makes sense because the code isn&apos;t really pushing the limits of
&gt; &gt; the language and its compilers :)
&gt; 
&gt; Let us not forget, Java 8 is not only about lambdas and type annotations.
&gt; The inference scheme is much more complex enough that we resorted to a clean
&gt; from the scratch implementation rather than evolving the older one - I have
&gt; heard that Sun did the same thing - in fact I believe they prototyped more
&gt; than one solution. So any code that calls generic methods whether from the
&gt; library or projects is testing the new type inference infrastructure.

That&apos;s true and it&apos;s better to be safe than sorry. Let me rephrase that previous comment a bit to say that based on not having observed any widespread breakage due to Java 8 changes in existing language feature implementations I&apos;m guessing that these features are covered by existing test suites quite well. And likewise is the case with the SDK codebase, at least for those parts which don&apos;t target very old or very new language levels. I would expect regressions rather than previously unknown defects, and not that many of those in the end either, but it&apos;d be good to know for certain.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2366465</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-21 00:12:11 -0500</bug_when>
    <thetext>Verified as working for Eclipse + Java 8 RC1 using Kepler SR1 +   
Eclipse Java Development Tools Patch for Java 8 Support (BETA)	1.0.0.v20140220-2054</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>