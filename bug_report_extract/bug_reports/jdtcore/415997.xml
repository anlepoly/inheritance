<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>415997</bug_id>
          
          <creation_ts>2013-08-27 22:21:00 -0400</creation_ts>
          <short_desc>java.lang.VerifyError: Expecting a stackmap frame at branch target</short_desc>
          <delta_ts>2013-10-30 10:45:07 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8.2</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.4 M3</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Adrian Leonhard">adrianleonhard</reporter>
          <assigned_to name="ANIRBAN CHAKRABORTY">anchakrk</assigned_to>
          <cc>jarthana</cc>
    
    <cc>Olivier_Thomann</cc>
    
    <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="59364"
          type_id="1"
          status="-"
          setter="srikanth_sankaran"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2299793</commentid>
    <comment_count>0</comment_count>
    <who name="Adrian Leonhard">adrianleonhard</who>
    <bug_when>2013-08-27 22:21:15 -0400</bug_when>
    <thetext>The following code:
public class Bug {
	public static void main(String[] args) throws Exception {
		System.out.println(ParseExpr11());
	}

	static final public Object ParseExpr11() throws Exception {
		Object expr;
		Object op = null;
		expr = ParseVarExpr();
		if (op == null) {
			if (true)
				return expr;
		}
		{
			throw new Exception(&quot;++/-- not supported in TUD Bantam Java.&quot;);
		}
	}

	private static Object ParseVarExpr() {
		// TODO Auto-generated method stub
		return &quot;test&quot;;
	}
}

throws 
Exception in thread &quot;main&quot; java.lang.VerifyError: Expecting a stackmap frame at branch target 12 in method Bug.ParseExpr11()Ljava/lang/Object; at offset 7
	at java.lang.Class.getDeclaredMethods0(Native Method)
	at java.lang.Class.privateGetDeclaredMethods(Class.java:2451)
	at java.lang.Class.getMethod0(Class.java:2694)
	at java.lang.Class.getMethod(Class.java:1622)
	at sun.launcher.LauncherHelper.getMainMethod(LauncherHelper.java:494)
	at sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:486)


Expected: &quot;test&quot;


It is generated by JavaCC, which is why the formatting/syntax sucks.
Works fine with javac.

-- Configuration Details --
Product: Eclipse 1.5.2.20130110-1126 (org.eclipse.epp.package.jee.product)
Installed Features:
 org.eclipse.jdt 3.8.2.v20130116-090414-8-8nFu3FNOfwKLRuqgXKIy9z0I83</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2301102</commentid>
    <comment_count>1</comment_count>
    <who name="Walter Harley">eclipse</who>
    <bug_when>2013-08-30 02:13:58 -0400</bug_when>
    <thetext>Hi, Adrian.  I understand that you don&apos;t have control over the formatting because it is generated code.  However, have you tried to whittle this down to figure out what aspect of the code is causing the problem?  It certainly appears to be very simple code.

Also, since this appears to be a compiler bug (at least as reported), can you clarify what Java compliance you are compiling with?  And, what JVM are you attempting to run it with?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2301128</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-08-30 02:53:03 -0400</bug_when>
    <thetext>Reproduced. Anirban, please take a look. This is a code generation problem.

JVMS (http://docs.oracle.com/javase/specs/jvms/se7/jvms7.pdf)
4.7.4 for a description of the StackMapTable Attribute.

Minimal test case:

// --
public class X {
	public static void main(String[] args) throws Exception {
	}

	void f() {
		Object o = null;
		if (o == null)
			if (true)
				return;
		
	}
}

After fix, verify against the reported case.

Often times these problems are due to bad live ranges for locals and or
flow analysis issues.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2301131</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-08-30 02:55:12 -0400</bug_when>
    <thetext>(In reply to comment #2)

&gt; Minimal test case:

Given how trivial this test case is, I suspect this is a regression recently
introduced. One way to make progress is to find out a version that worked and
the code it generated and when/how it started going bad.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2301135</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-08-30 03:10:11 -0400</bug_when>
    <thetext>(In reply to comment #2)

&gt; Minimal test case:

Even smaller:

// --
public class X {
	public static void main(String[] args) {
		Object o = null;
		if (o == null)
			if (true)
				return;
	}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2301137</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-08-30 03:13:26 -0400</bug_when>
    <thetext>Many times these problems arise because the shape of operand stack looks 
different at the beginning of a certain basic block based on how it is 
reached - Verification passing is dependent on the operand stack matching the stack map table entry irrespective of the path taken to reach a basic block.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2301138</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-08-30 03:16:55 -0400</bug_when>
    <thetext>(In reply to comment #1)
&gt; Hi, Adrian.  I understand that you don&apos;t have control over the formatting
&gt; because it is generated code.  However, have you tried to whittle this down
&gt; to figure out what aspect of the code is causing the problem?  It certainly
&gt; appears to be very simple code.

Often times, machine generated code looks very different from human written
code in subtle ways - humans won&apos;t write this code ! So it won&apos;t be surprising
if this is not a regression also.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2303499</commentid>
    <comment_count>7</comment_count>
    <who name="ANIRBAN CHAKRABORTY">anchakrk</who>
    <bug_when>2013-09-06 01:09:03 -0400</bug_when>
    <thetext>Hello,
As per my investigation, following the is problem:

1) The class file generated by eclipse, has an instruction:
          3  ifnonnull 7

when, there is no instruction number &apos;7&apos;. Hence it is giving illegal jump location error.

2) The previous situation is caused because of the following reason:
Refer to the minimal testcase in comment#4. There is no return path in the &apos;else&apos; leg of the outer &apos;if&apos; block. Hence the instruction no. &apos;7&apos;, which is supposed to be in the &apos;else&apos; leg of the outer &apos;if&apos; block does not get (code)-generated. Hence is the absence of that instruction in the class file, and error.

3) The problem does not end there, for the original testcase in the description section. For this testcase, the last block of the ParseExpr11() method is eliminaed as unreachable code, and no code gets generated for that. Hence, in spite of there having nontrivial code after the &apos;if&apos; block, there is still no return path, with the same argument as presented in (2). Hence incorrect jump location and subsequent error.


I&apos;m working on the solution. Expect a patch from me in a day.

Thanks
Anirban</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2304039</commentid>
    <comment_count>8</comment_count>
      <attachid>235277</attachid>
    <who name="ANIRBAN CHAKRABORTY">anchakrk</who>
    <bug_when>2013-09-08 03:52:54 -0400</bug_when>
    <thetext>Created attachment 235277
Patch for the fix

Patch for the fix</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2307074</commentid>
    <comment_count>9</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-09-16 04:18:13 -0400</bug_when>
    <thetext>Moving to 4.4 M3 as we almost ran out of time for M2.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2309563</commentid>
    <comment_count>10</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-09-22 03:27:27 -0400</bug_when>
    <thetext>Hello Anirban, thanks for the patch - I think the proposed fix looks very
complicated and incorrect too. I&apos;ll shortly attach an alternate solution.

Basically the problem comes from incorrect control flow analysis.

For the test case:

public static void main(String[] args) {
    Object o = null;
    if (o == null)
        if (true)
            return;
}

at the } of main, flowinfo (in MethodDeclaration#analyzeCode) comes out with
tagBits set to FlowInfo.UNREACHABLE_OR_DEAD: This is wrong, it should be set
to FlowInfo.UNREACHABLE_BY_NULLANALYSIS.

When this is corrected, the following pre-existing code in the same
method kicks in and generates a &quot;free&quot; return which could serve as the
branch target. 

if ((returnTypeBinding == TypeBinding.VOID) || isAbstract()) {
    if ((flowInfo.tagBits &amp; FlowInfo.UNREACHABLE_OR_DEAD) == 0) {
        this.bits |= ASTNode.NeedFreeReturn;
    }
}

A few years ago, we decided to split null analysis based reachability
conclusions from control flow based reachability determinations. We had
bugs in null analysis at that time that were causing us to make incorrect
assumptions about what is reachable and what is not and this was causing
grief.

As a result, we should treat ASTNode#IsElseStatementUnreachable and ASTNode#IsThenStatementUnreachable, as computed by either of null analysis
and control flow analysis and not as solely computed by the latter.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2309567</commentid>
    <comment_count>11</comment_count>
      <attachid>235691</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-09-22 04:59:45 -0400</bug_when>
    <thetext>Created attachment 235691
Alternate fix.

Anirban, please take a look and let me know if you agree.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2309575</commentid>
    <comment_count>12</comment_count>
    <who name="ANIRBAN CHAKRABORTY">anchakrk</who>
    <bug_when>2013-09-22 07:53:33 -0400</bug_when>
    <thetext>Hello Srikanth,
I agree with the patch.
Thanks
Anirban</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2309577</commentid>
    <comment_count>13</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-09-22 08:15:25 -0400</bug_when>
    <thetext>Stephan, any comments before commit ? It is just a 4 line fix replicated
in an additional place, if you have a moment, please look through, TIA</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2309595</commentid>
    <comment_count>14</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-09-22 11:44:07 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #13)
&gt; Stephan, any comments before commit ? It is just a 4 line fix replicated
&gt; in an additional place, if you have a moment, please look through, TIA

Patch looks good. Two remarks still:

- I can&apos;t see a reason for copying the merged info, as I don&apos;t see any
  relevant sharing happening.

- There&apos;s a distance between setting and reading IsThenStatementUnreachable,
  where other operations on thenFlowInfo happen in between.
  This is OK under the assumption that the bit is not reset between those two
  points. From all I can see the assumption is sound and we should be fine :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2309636</commentid>
    <comment_count>15</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-09-23 00:27:11 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #14)

&gt; - I can&apos;t see a reason for copying the merged info,

There was a good reason for that called paranoia :) Anyways, I have removed
the copy and tests are green. Released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=17b8ab7bd612d2abf48004e9edb4e0d158359c34</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2324736</commentid>
    <comment_count>16</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2013-10-30 03:00:07 -0400</bug_when>
    <thetext>Checked the test cases in 
https://bugs.eclipse.org/bugs/show_bug.cgi?id=415997#c0
https://bugs.eclipse.org/bugs/show_bug.cgi?id=415997#c2
https://bugs.eclipse.org/bugs/show_bug.cgi?id=415997#c4

Verified for 4.4 M3  using  build I20131028-2000</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>235277</attachid>
            <date>2013-09-08 03:52:00 -0400</date>
            <delta_ts>2013-09-08 03:52:54 -0400</delta_ts>
            <desc>Patch for the fix</desc>
            <filename>Bug-415997--master.patch</filename>
            <type>text/plain</type>
            <size>8076</size>
            <attacher name="ANIRBAN CHAKRABORTY">anchakrk</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0Zsb3dBbmFseXNpc1Rl
c3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0Zsb3dBbmFseXNpc1Rlc3Qu
amF2YQppbmRleCA5N2UwMmFmLi5lNTIxODkyIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGls
ZXIvcmVncmVzc2lvbi9GbG93QW5hbHlzaXNUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBp
bGVyL3JlZ3Jlc3Npb24vRmxvd0FuYWx5c2lzVGVzdC5qYXZhCkBAIC0yNjM3LDEwICsyNjM3LDcx
IEBACiAJCQkJIgl9XG4iICsgCiAJCQkJIn0iCiAJCQl9LCAKIAkJCSIiKTsKIH0KKy8vIGh0dHBz
Oi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00MTU5OTcKKy8vIEJ1ZyA0
MTU5OTcgLSBqYXZhLmxhbmcuVmVyaWZ5RXJyb3I6IEV4cGVjdGluZyBhIHN0YWNrbWFwIGZyYW1l
IGF0IGJyYW5jaCB0YXJnZXQgCitwdWJsaWMgdm9pZCB0ZXN0QnVnNDE1OTk3YSgpIHsKKwl0aGlz
LnJ1bkNvbmZvcm1UZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJIlguamF2YSIsCisJCQkicHVi
bGljIGNsYXNzIFgge1xuIiArCisJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1td
IGFyZ3MpIHtcbiIgKworCQkJIgkJT2JqZWN0IG8gPSBudWxsO1xuIiArCisJCQkiCQlpZiAobyA9
PSBudWxsKVxuIiArCisJCQkiCQkJaWYgKHRydWUpXG4iICsKKwkJCSIJCQkJcmV0dXJuO1xuIiAr
CisJCQkiCX1cbiIgKworCQkJIn0iCisJCX0sCisJCSIiKTsKK30KK3B1YmxpYyB2b2lkIHRlc3RC
dWc0MTU5OTdiKCkgeworCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJ
CQkiWC5qYXZhIiwKKwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCSIJcHVibGljIHN0YXRp
YyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuIiArCisJCQkiCQlPYmplY3QgbyA9IG51bGw7
XG4iICsKKwkJCSIJCWlmIChvID09IG51bGwpIHt9XG4iICsKKwkJCSIJCWVsc2VcbiIgKworCQkJ
IgkJCWlmICh0cnVlKVxuIiArCisJCQkiCQkJCXJldHVybjtcbiIgKworCQkJIgl9XG4iICsKKwkJ
CSJ9IgorCQl9LAorCQkiIik7Cit9CitwdWJsaWMgdm9pZCB0ZXN0QnVnNDE1OTk3YygpIHsKKwl0
aGlzLnJ1bkNvbmZvcm1UZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJIlguamF2YSIsCisJCQki
cHVibGljIGNsYXNzIFgge1xuIiArCisJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmlu
Z1tdIGFyZ3MpIHRocm93cyBFeGNlcHRpb24ge1xuIiArCisJCQkiCQlTeXN0ZW0ub3V0LnByaW50
bG4oUGFyc2VFeHByMTEoKSk7XG4iICsKKwkJCSIJfVxuIiArCisJCQkiCXN0YXRpYyBmaW5hbCBw
dWJsaWMgT2JqZWN0IFBhcnNlRXhwcjExKCkgdGhyb3dzIEV4Y2VwdGlvbiB7XG4iICsKKwkJCSIJ
CU9iamVjdCBleHByO1xuIiArCisJCQkiCQlPYmplY3Qgb3AgPSBudWxsO1xuIiArCisJCQkiCQll
eHByID0gUGFyc2VWYXJFeHByKCk7XG4iICsKKwkJCSIJCWlmIChvcCA9PSBudWxsKSB7XG4iICsK
KwkJCSIJCQlpZiAodHJ1ZSlcbiIgKworCQkJIgkJCQlyZXR1cm4gZXhwcjtcbiIgKworCQkJIgkJ
fVxuIiArCisJCQkiCQl7XG4iICsKKwkJCSIJCQl0aHJvdyBuZXcgRXhjZXB0aW9uKFwiKysvLS0g
bm90IHN1cHBvcnRlZCBpbiBUVUQgQmFudGFtIEphdmEuXCIpO1xuIiArCisJCQkiCQl9XG4iICsK
KwkJCSIJfVxuIiArCisJCQkiCXByaXZhdGUgc3RhdGljIE9iamVjdCBQYXJzZVZhckV4cHIoKSB7
XG4iICsKKwkJCSIJCS8vIFRPRE8gQXV0by1nZW5lcmF0ZWQgbWV0aG9kIHN0dWJcbiIgKworCQkJ
IgkJcmV0dXJuIFwidGVzdFwiO1xuIiArCisJCQkiCX1cbiIgKworCQkJIn0iCisJCX0sCisJCSJ0
ZXN0Iik7Cit9CiBwdWJsaWMgc3RhdGljIENsYXNzIHRlc3RDbGFzcygpIHsKIAlyZXR1cm4gRmxv
d0FuYWx5c2lzVGVzdC5jbGFzczsKIH0KIH0KIApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BYnN0
cmFjdE1ldGhvZERlY2xhcmF0aW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Fic3RyYWN0TWV0aG9kRGVj
bGFyYXRpb24uamF2YQppbmRleCBhZjY5N2RkLi45ODE0ZTUwIDEwMDY0NAotLS0gYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
YXN0L0Fic3RyYWN0TWV0aG9kRGVjbGFyYXRpb24uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Fic3Ry
YWN0TWV0aG9kRGVjbGFyYXRpb24uamF2YQpAQCAtMjc2LDE5ICsyNzYsMzIgQEAKIAkJCQkJTG9j
YWxWYXJpYWJsZUJpbmRpbmcgYXJnQmluZGluZzsKIAkJCQkJY29kZVN0cmVhbS5hZGRWaXNpYmxl
TG9jYWxWYXJpYWJsZShhcmdCaW5kaW5nID0gdGhpcy5hcmd1bWVudHNbaV0uYmluZGluZyk7CiAJ
CQkJCWFyZ0JpbmRpbmcucmVjb3JkSW5pdGlhbGl6YXRpb25TdGFydFBDKDApOwogCQkJCX0KIAkJ
CX0KKwkJCWJvb2xlYW4gZnJlZWx5UmV0dXJuZWQgPSBmYWxzZTsKIAkJCWlmICh0aGlzLnN0YXRl
bWVudHMgIT0gbnVsbCkgewotCQkJCWZvciAoaW50IGkgPSAwLCBtYXggPSB0aGlzLnN0YXRlbWVu
dHMubGVuZ3RoOyBpIDwgbWF4OyBpKyspCisJCQkJZm9yIChpbnQgaSA9IDAsIG1heCA9IHRoaXMu
c3RhdGVtZW50cy5sZW5ndGg7IGkgPCBtYXg7IGkrKykgewogCQkJCQl0aGlzLnN0YXRlbWVudHNb
aV0uZ2VuZXJhdGVDb2RlKHRoaXMuc2NvcGUsIGNvZGVTdHJlYW0pOworCQkJCQlpZiAoKHRoaXMu
c3RhdGVtZW50c1tpXS5iaXRzICYgQVNUTm9kZS5Jc1JlYWNoYWJsZSkgIT0gMCkgeworCQkJCQkJ
ZnJlZWx5UmV0dXJuZWQgPSBmYWxzZTsKKwkJCQkJCWlmICh0aGlzLnN0YXRlbWVudHNbaV0ubmVl
ZFJldHVyblBhdGhBZnRlclRoaXNTdGF0ZW1lbnQoKSkgeworCQkJCQkJCWlmIChpID09IG1heCAt
IDEgfHwgKGkgPCBtYXggLTEgJiYgKHRoaXMuc3RhdGVtZW50c1tpKzFdLmJpdHMgJiBBU1ROb2Rl
LklzUmVhY2hhYmxlKSA9PSAwKSkgeworCQkJCQkJCQlpZiAoISh0aGlzLnN0YXRlbWVudHNbaV0g
aW5zdGFuY2VvZiBSZXR1cm5TdGF0ZW1lbnQpKSB7CisJCQkJCQkJCQlnZW5lcmF0ZVJldHVybkJ5
dGVDb2RlKHRoaXMuc2NvcGUsIGNvZGVTdHJlYW0pOworCQkJCQkJCQkJZnJlZWx5UmV0dXJuZWQg
PSB0cnVlOworCQkJCQkJCQl9CisJCQkJCQkJfQorCQkJCQkJfQorCQkJCQl9CisJCQkJfQkKIAkJ
CX0KIAkJCS8vIGlmIGEgcHJvYmxlbSBnb3QgcmVwb3J0ZWQgZHVyaW5nIGNvZGUgZ2VuLCB0aGVu
IHRyaWdnZXIgcHJvYmxlbSBtZXRob2QgY3JlYXRpb24KIAkJCWlmICh0aGlzLmlnbm9yZUZ1cnRo
ZXJJbnZlc3RpZ2F0aW9uKSB7CiAJCQkJdGhyb3cgbmV3IEFib3J0TWV0aG9kKHRoaXMuc2NvcGUu
cmVmZXJlbmNlQ29tcGlsYXRpb25Vbml0KCkuY29tcGlsYXRpb25SZXN1bHQsIG51bGwpOwogCQkJ
fQotCQkJaWYgKCh0aGlzLmJpdHMgJiBBU1ROb2RlLk5lZWRGcmVlUmV0dXJuKSAhPSAwKSB7CisJ
CQlpZiAoKHRoaXMuYml0cyAmIEFTVE5vZGUuTmVlZEZyZWVSZXR1cm4pICE9IDAgJiYgIWZyZWVs
eVJldHVybmVkKSB7CiAJCQkJY29kZVN0cmVhbS5yZXR1cm5fKCk7CiAJCQl9CiAJCQkvLyBsb2Nh
bCB2YXJpYWJsZSBhdHRyaWJ1dGVzCiAJCQljb2RlU3RyZWFtLmV4aXRVc2VyU2NvcGUodGhpcy5z
Y29wZSk7CiAJCQljb2RlU3RyZWFtLnJlY29yZFBvc2l0aW9uc0Zyb20oMCwgdGhpcy5kZWNsYXJh
dGlvblNvdXJjZUVuZCk7CkBAIC01NDEsNiArNTU0LDExIEBACiAJCQkJCXRoaXMuc2NvcGUudmFs
aWRhdGVOdWxsQW5ub3RhdGlvbihudWxsQW5ub3RhdGlvblRhZ0JpdCwgdGhpcy5hcmd1bWVudHNb
aV0udHlwZSwgdGhpcy5hcmd1bWVudHNbaV0uYW5ub3RhdGlvbnMpOwogCQkJCX0KIAkJCX0KIAkJ
fQogCX0KKworCXB1YmxpYyB2b2lkIGdlbmVyYXRlUmV0dXJuQnl0ZUNvZGUgKEJsb2NrU2NvcGUg
YmxvY2tTY29wZSwgQ29kZVN0cmVhbSBjb2RlU3RyZWFtKSB7CisJCS8vIG5vIGNvZGUgZm9yIGFi
c3RyYWN0IG1ldGhvZAorCX0KIH0KKwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9JZlN0YXRlbWVu
dC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2FzdC9JZlN0YXRlbWVudC5qYXZhCmluZGV4IDI1NGZmNzEuLmFjZTE3
ZTggMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvSWZTdGF0ZW1lbnQuamF2YQorKysgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
YXN0L0lmU3RhdGVtZW50LmphdmEKQEAgLTI4Miw2ICsyODIsMTUgQEAKIAkJaWYgKHRoaXMuZWxz
ZVN0YXRlbWVudCAhPSBudWxsKQogCQkJdGhpcy5lbHNlU3RhdGVtZW50LnRyYXZlcnNlKHZpc2l0
b3IsIGJsb2NrU2NvcGUpOwogCX0KIAl2aXNpdG9yLmVuZFZpc2l0KHRoaXMsIGJsb2NrU2NvcGUp
OwogfQorcHVibGljIGJvb2xlYW4gbmVlZFJldHVyblBhdGhBZnRlclRoaXNTdGF0ZW1lbnQgKCkg
eworCWlmICgodGhpcy5iaXRzICYgQVNUTm9kZS5Jc1RoZW5TdGF0ZW1lbnRVbnJlYWNoYWJsZSkg
IT0gMCkgeworCQlyZXR1cm4gdHJ1ZTsKKwl9CisJZWxzZSBpZiAoKHRoaXMuYml0cyAmIEFTVE5v
ZGUuSXNFbHNlU3RhdGVtZW50VW5yZWFjaGFibGUpICE9IDApIHsKKwkJcmV0dXJuIHRydWU7CisJ
fQorCXJldHVybiBmYWxzZTsKK30KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTWV0aG9kRGVj
bGFyYXRpb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTWV0aG9kRGVjbGFyYXRpb24uamF2YQppbmRleCAz
Njc1YjQ2Li4zZTkwYjQ0IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L01ldGhvZERlY2xhcmF0aW9u
LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2FzdC9NZXRob2REZWNsYXJhdGlvbi5qYXZhCkBAIC0yMCwxNCAr
MjAsMTcgQEAKIAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLkNoYXJPcGVy
YXRpb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLkFTVFZpc2l0
b3I7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLkNvbXBpbGF0aW9u
UmVzdWx0OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5jbGFzc2Zt
dC5DbGFzc0ZpbGVDb25zdGFudHM7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNv
bXBpbGVyLmNvZGVnZW4uQ29kZVN0cmVhbTsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJu
YWwuY29tcGlsZXIuZmxvdy5FeGNlcHRpb25IYW5kbGluZ0Zsb3dDb250ZXh0OwogaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5mbG93LkZsb3dDb250ZXh0OwogaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5mbG93LkZsb3dJbmZvOwogaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5pbXBsLkNvbXBpbGVyT3B0aW9uczsK
K2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkJhc2VUeXBl
QmluZGluZzsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3Vw
LkJsb2NrU2NvcGU7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxv
b2t1cC5DbGFzc1Njb3BlOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxl
ci5sb29rdXAuRXh0cmFDb21waWxlck1vZGlmaWVyczsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkxvY2FsVHlwZUJpbmRpbmc7CiBpbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5NZW1iZXJUeXBlQmluZGluZzsKIGlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlRhZ0JpdHM7CkBA
IC0zMjMsNiArMzI2LDE4IEBACiAJCXN1cGVyLnZhbGlkYXRlTnVsbEFubm90YXRpb25zKCk7CiAJ
CS8vIG51bGwtYW5ub3RhdGlvbnMgb24gdGhlIHJldHVybiB0eXBlPwogCQlpZiAodGhpcy5iaW5k
aW5nICE9IG51bGwpCiAJCQl0aGlzLnNjb3BlLnZhbGlkYXRlTnVsbEFubm90YXRpb24odGhpcy5i
aW5kaW5nLnRhZ0JpdHMsIHRoaXMucmV0dXJuVHlwZSwgdGhpcy5hbm5vdGF0aW9ucyk7CiAJfQor
CXB1YmxpYyB2b2lkIGdlbmVyYXRlUmV0dXJuQnl0ZUNvZGUgKEJsb2NrU2NvcGUgY3VycmVudFNj
b3BlLCBDb2RlU3RyZWFtIGNvZGVTdHJlYW0pIHsKKwkJVHlwZUJpbmRpbmcgYiA9IHRoaXMucmV0
dXJuVHlwZS5yZXNvbHZlZFR5cGU7CisJCWlmIChiID09IFR5cGVCaW5kaW5nLlZPSUQpIHsKKwkJ
CWNvZGVTdHJlYW0ucmV0dXJuXygpOworCQl9CisJCWVsc2UgaWYgKGIgaW5zdGFuY2VvZiBCYXNl
VHlwZUJpbmRpbmcpIHsKKwkJCShuZXcgUmV0dXJuU3RhdGVtZW50KEludExpdGVyYWwuT25lLCAt
MSwgLTEpKS5nZW5lcmF0ZUNvZGUoY3VycmVudFNjb3BlLCBjb2RlU3RyZWFtKTsKKwkJfQorCQll
bHNlIHsKKwkJCShuZXcgUmV0dXJuU3RhdGVtZW50KG5ldyBOdWxsTGl0ZXJhbCgtMSwgLTEpLCAt
MSwgLTEpKS5nZW5lcmF0ZUNvZGUoY3VycmVudFNjb3BlLCBjb2RlU3RyZWFtKTsKKwkJfQorCX0K
IH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvU3RhdGVtZW50LmphdmEgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1N0
YXRlbWVudC5qYXZhCmluZGV4IGFjNjU0MmQuLmY2MjEyNDcgMTAwNjQ0Ci0tLSBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvU3RhdGVtZW50LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9TdGF0ZW1lbnQuamF2YQpAQCAtMjY0
LDYgKzI2NCwxMCBAQAogICogQHNlZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
bG9va3VwLkludm9jYXRpb25TaXRlI2V4cGVjdGVkVHlwZSgpCiAgKi8KIHB1YmxpYyBUeXBlQmlu
ZGluZyBleHBlY3RlZFR5cGUoKSB7CiAJcmV0dXJuIG51bGw7CiB9CisvLyBUaGlzIG1ldGhvZCBz
aG91bGQgb25seSBiZSBjYWxsZWQgYWZ0ZXIgYW5hbHlzaXMgaXMgb3ZlciwgdHlwaWNhbGx5IGR1
cmluZyBjb2RlIGdlbmVyYXRpb24KK3B1YmxpYyBib29sZWFuIG5lZWRSZXR1cm5QYXRoQWZ0ZXJU
aGlzU3RhdGVtZW50ICgpIHsKKwlyZXR1cm4gZmFsc2U7Cit9CiB9
</data>
<flag name="review"
          id="59318"
          type_id="6"
          status="?"
          setter="anchakrk"
    />
          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>235691</attachid>
            <date>2013-09-22 04:59:00 -0400</date>
            <delta_ts>2013-09-22 04:59:45 -0400</delta_ts>
            <desc>Alternate fix.</desc>
            <filename>verifyerror.patch</filename>
            <type>text/plain</type>
            <size>5183</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0Zsb3dBbmFseXNpc1Rl
c3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0Zsb3dBbmFseXNpc1Rlc3Qu
amF2YQppbmRleCA5N2UwMmFmLi5lNTIxODkyIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGls
ZXIvcmVncmVzc2lvbi9GbG93QW5hbHlzaXNUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBp
bGVyL3JlZ3Jlc3Npb24vRmxvd0FuYWx5c2lzVGVzdC5qYXZhCkBAIC0yNjM5LDYgKzI2MzksNjcg
QEAKIAkJCX0sIAogCQkJIiIpOwogfQorLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mv
c2hvd19idWcuY2dpP2lkPTQxNTk5NworLy8gQnVnIDQxNTk5NyAtIGphdmEubGFuZy5WZXJpZnlF
cnJvcjogRXhwZWN0aW5nIGEgc3RhY2ttYXAgZnJhbWUgYXQgYnJhbmNoIHRhcmdldCAKK3B1Ymxp
YyB2b2lkIHRlc3RCdWc0MTU5OTdhKCkgeworCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCW5ldyBT
dHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCSIJ
cHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykge1xuIiArCisJCQkiCQlPYmpl
Y3QgbyA9IG51bGw7XG4iICsKKwkJCSIJCWlmIChvID09IG51bGwpXG4iICsKKwkJCSIJCQlpZiAo
dHJ1ZSlcbiIgKworCQkJIgkJCQlyZXR1cm47XG4iICsKKwkJCSIJfVxuIiArCisJCQkifSIKKwkJ
fSwKKwkJIiIpOworfQorcHVibGljIHZvaWQgdGVzdEJ1ZzQxNTk5N2IoKSB7CisJdGhpcy5ydW5D
b25mb3JtVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJYLmphdmEiLAorCQkJInB1YmxpYyBj
bGFzcyBYIHtcbiIgKworCQkJIglwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdz
KSB7XG4iICsKKwkJCSIJCU9iamVjdCBvID0gbnVsbDtcbiIgKworCQkJIgkJaWYgKG8gPT0gbnVs
bCkge31cbiIgKworCQkJIgkJZWxzZVxuIiArCisJCQkiCQkJaWYgKHRydWUpXG4iICsKKwkJCSIJ
CQkJcmV0dXJuO1xuIiArCisJCQkiCX1cbiIgKworCQkJIn0iCisJCX0sCisJCSIiKTsKK30KK3B1
YmxpYyB2b2lkIHRlc3RCdWc0MTU5OTdjKCkgeworCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCW5l
dyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJ
CSIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gYXJncykgdGhyb3dzIEV4Y2VwdGlv
biB7XG4iICsKKwkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihQYXJzZUV4cHIxMSgpKTtcbiIgKwor
CQkJIgl9XG4iICsKKwkJCSIJc3RhdGljIGZpbmFsIHB1YmxpYyBPYmplY3QgUGFyc2VFeHByMTEo
KSB0aHJvd3MgRXhjZXB0aW9uIHtcbiIgKworCQkJIgkJT2JqZWN0IGV4cHI7XG4iICsKKwkJCSIJ
CU9iamVjdCBvcCA9IG51bGw7XG4iICsKKwkJCSIJCWV4cHIgPSBQYXJzZVZhckV4cHIoKTtcbiIg
KworCQkJIgkJaWYgKG9wID09IG51bGwpIHtcbiIgKworCQkJIgkJCWlmICh0cnVlKVxuIiArCisJ
CQkiCQkJCXJldHVybiBleHByO1xuIiArCisJCQkiCQl9XG4iICsKKwkJCSIJCXtcbiIgKworCQkJ
IgkJCXRocm93IG5ldyBFeGNlcHRpb24oXCIrKy8tLSBub3Qgc3VwcG9ydGVkIGluIFRVRCBCYW50
YW0gSmF2YS5cIik7XG4iICsKKwkJCSIJCX1cbiIgKworCQkJIgl9XG4iICsKKwkJCSIJcHJpdmF0
ZSBzdGF0aWMgT2JqZWN0IFBhcnNlVmFyRXhwcigpIHtcbiIgKworCQkJIgkJLy8gVE9ETyBBdXRv
LWdlbmVyYXRlZCBtZXRob2Qgc3R1YlxuIiArCisJCQkiCQlyZXR1cm4gXCJ0ZXN0XCI7XG4iICsK
KwkJCSIJfVxuIiArCisJCQkifSIKKwkJfSwKKwkJInRlc3QiKTsKK30KIHB1YmxpYyBzdGF0aWMg
Q2xhc3MgdGVzdENsYXNzKCkgewogCXJldHVybiBGbG93QW5hbHlzaXNUZXN0LmNsYXNzOwogfQpk
aWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BU1ROb2RlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FTVE5vZGUu
amF2YQppbmRleCBiZTc0NmRkLi4xOTRmMzZiIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FTVE5v
ZGUuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FTVE5vZGUuamF2YQpAQCAtMjEwLDggKzIxMCw4IEBA
CiAJLy8gZm9yIGlmIHN0YXRlbWVudAogCXB1YmxpYyBzdGF0aWMgZmluYWwgaW50IElzRWxzZUlm
U3RhdGVtZW50ID0gQml0MzA7CiAJcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgVGhlbkV4aXQgPSBC
aXQzMTsKLQlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBJc0Vsc2VTdGF0ZW1lbnRVbnJlYWNoYWJs
ZSA9IEJpdDg7Ci0JcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgSXNUaGVuU3RhdGVtZW50VW5yZWFj
aGFibGUgPSBCaXQ5OworCXB1YmxpYyBzdGF0aWMgZmluYWwgaW50IElzRWxzZVN0YXRlbWVudFVu
cmVhY2hhYmxlID0gQml0ODsgLy8gYnkgY29udHJvbCBmbG93IGFuYWx5c2lzIG9yIG51bGwgYW5h
bHlzaXMuCisJcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgSXNUaGVuU3RhdGVtZW50VW5yZWFjaGFi
bGUgPSBCaXQ5OyAvLyBieSBjb250cm9sIGZsb3cgYW5hbHlzaXMgb3IgbnVsbCBhbmFseXNpcwog
CiAJLy8gZm9yIHR5cGUgcmVmZXJlbmNlCiAJcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgSXNTdXBl
clR5cGUgPSBCaXQ1OwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Zsb3cvRmxvd0luZm8uamF2YSBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9mbG93L0Zsb3dJbmZvLmphdmEKaW5kZXggY2IzZmE4ZC4uY2ZmNmM4YyAxMDA2NDQKLS0t
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2Zsb3cvRmxvd0luZm8uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvZmxvdy9GbG93SW5mby5q
YXZhCkBAIC01MzIsNyArNTMyLDEyIEBACiAJCS8vIGlmIGEgdmFyaWFibGUgaXMgb25seSBpbml0
aWFsaXplZCBpbiBvbmUgYnJhbmNoIGFuZCBub3QgaW5pdGlhbGl6ZWQgaW4gdGhlIG90aGVyLAog
CQkvLyB0aGVuIHdlIG5lZWQgdG8gY2FzdCBhIGRvdWJ0IG9uIGl0cyBpbml0aWFsaXphdGlvbiBp
biB0aGUgbWVyZ2VkIGluZm8KIAkJbWVyZ2VkSW5mby5kZWZpbml0ZUluaXRzICY9IGluaXRzV2hl
bkZhbHNlLnVuY29uZGl0aW9uYWxDb3B5KCkuZGVmaW5pdGVJbml0czsKLQkJCisJCS8vIGh0dHBz
Oi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00MTU5OTcsIGNsYXNzaWZ5
IHVucmVhY2hhYmlsaXR5IHByZWNpc2VseSwgSXNFbHNlU3RhdGVtZW50VW5yZWFjaGFibGUgY291
bGQgYmUgZHVlIHRvIG51bGwgYW5hbHlzaXMKKwkJaWYgKChtZXJnZWRJbmZvLnRhZ0JpdHMgJiBG
bG93SW5mby5VTlJFQUNIQUJMRV9PUl9ERUFEKSAhPSAwICYmIChpbml0c1doZW5GYWxzZS50YWdC
aXRzICYgRmxvd0luZm8uVU5SRUFDSEFCTEUpID09IEZsb3dJbmZvLlVOUkVBQ0hBQkxFX0JZX05V
TExBTkFMWVNJUykgeworCQkJbWVyZ2VkSW5mbyA9IChVbmNvbmRpdGlvbmFsRmxvd0luZm8pIG1l
cmdlZEluZm8uY29weSgpOworCQkJbWVyZ2VkSW5mby50YWdCaXRzICY9IH5VTlJFQUNIQUJMRV9P
Ul9ERUFEOworCQkJbWVyZ2VkSW5mby50YWdCaXRzIHw9IFVOUkVBQ0hBQkxFX0JZX05VTExBTkFM
WVNJUzsKKwkJfQogCX0KIAllbHNlIGlmICgoZmxvd0luZm8udGFnQml0cyAmIEZsb3dJbmZvLlVO
UkVBQ0hBQkxFKSA9PSAwICYmCiAJCQkoaWZTdGF0ZW1lbnQuYml0cyAmIEFTVE5vZGUuSXNUaGVu
U3RhdGVtZW50VW5yZWFjaGFibGUpICE9IDAgJiYgaW5pdHNXaGVuVHJ1ZSAhPSBGbG93SW5mby5E
RUFEX0VORApAQCAtNTQ4LDYgKzU1MywxMiBAQAogCQkvLyBpZiBhIHZhcmlhYmxlIGlzIG9ubHkg
aW5pdGlhbGl6ZWQgaW4gb25lIGJyYW5jaCBhbmQgbm90IGluaXRpYWxpemVkIGluIHRoZSBvdGhl
ciwKIAkJLy8gdGhlbiB3ZSBuZWVkIHRvIGNhc3QgYSBkb3VidCBvbiBpdHMgaW5pdGlhbGl6YXRp
b24gaW4gdGhlIG1lcmdlZCBpbmZvCiAJCW1lcmdlZEluZm8uZGVmaW5pdGVJbml0cyAmPSBpbml0
c1doZW5UcnVlLnVuY29uZGl0aW9uYWxDb3B5KCkuZGVmaW5pdGVJbml0czsKKwkJLy8gaHR0cHM6
Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQxNTk5NywgY2xhc3NpZnkg
dW5yZWFjaGFiaWxpdHkgcHJlY2lzZWx5LCBJc1RoZW5TdGF0ZW1lbnRVbnJlYWNoYWJsZSBjb3Vs
ZCBiZSBkdWUgdG8gbnVsbCBhbmFseXNpcworCQlpZiAoKG1lcmdlZEluZm8udGFnQml0cyAmIEZs
b3dJbmZvLlVOUkVBQ0hBQkxFX09SX0RFQUQpICE9IDAgJiYgKGluaXRzV2hlblRydWUudGFnQml0
cyAmIEZsb3dJbmZvLlVOUkVBQ0hBQkxFKSA9PSBGbG93SW5mby5VTlJFQUNIQUJMRV9CWV9OVUxM
QU5BTFlTSVMpIHsKKwkJCW1lcmdlZEluZm8gPSAgKFVuY29uZGl0aW9uYWxGbG93SW5mbykgbWVy
Z2VkSW5mby5jb3B5KCk7CisJCQltZXJnZWRJbmZvLnRhZ0JpdHMgJj0gflVOUkVBQ0hBQkxFX09S
X0RFQUQ7CisJCQltZXJnZWRJbmZvLnRhZ0JpdHMgfD0gVU5SRUFDSEFCTEVfQllfTlVMTEFOQUxZ
U0lTOworCQl9CiAJfQogCWVsc2UgewogCQltZXJnZWRJbmZvID0gaW5pdHNXaGVuVHJ1ZS4=
</data>

          </attachment>
      

    </bug>

</bugzilla>