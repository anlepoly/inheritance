<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>428352</bug_id>
          
          <creation_ts>2014-02-17 08:33:00 -0500</creation_ts>
          <short_desc>[1.8][compiler] Resolution errors don&apos;t always surface</short_desc>
          <delta_ts>2014-02-20 23:00:48 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 8</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Timo Kinnunen">timo.kinnunen</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2364328</commentid>
    <comment_count>0</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-02-17 08:33:01 -0500</bug_when>
    <thetext>This happens with the latest BETA_JAVA8 plugins built from HEAD. One more for bug 428305 ?

What steps will reproduce the problem?
1. The source below gives NPEs when the second addAll3-method call is uncommented in editor.


-- Error Details --
Date: Mon Feb 17 15:25:28 EET 2014
Message: Exception occurred during problem detection:
----------------------------------- SOURCE BEGIN -------------------------------------
package npe_oejica_AllocationExpression_analyseCode_line105;

import java.util.Collection;
import java.util.List;
import java.util.function.Consumer;
import java.util.function.Function;

class OperationsPile&lt;B&gt; {
  OperationsPile(Function&lt;B, ?&gt; handler) {}

  private static &lt;T&gt; void addAll3(Collection&lt;T&gt; c, T t) {}

  static &lt;S&gt; void adaad3(List&lt;OperationsPile&lt;?&gt;&gt; combined, Consumer&lt;S&gt; handler) {
    addAll3(combined, new OperationsPile&lt;&gt;(null));
    addAll3(combined, new OperationsPile&lt;&gt;(handler));
  }
}

----------------------------------- SOURCE END -------------------------------------
Severity: Error
Product: Eclipse SDK 4.3.1.v20130911-1000 (org.eclipse.sdk.ide)
Plugin: org.eclipse.jdt.core
Session Data:
eclipse.buildId=4.3.0.M20130911-1000
java.version=1.8.0
java.vendor=Oracle Corporation
BootLoader constants: OS=win32, ARCH=x86_64, WS=win32, NL=en_US
Command-line arguments:  -os win32 -ws win32 -arch x86_64

Exception Stack Trace:
java.lang.NullPointerException
	at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.analyseCode(AllocationExpression.java:105)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.analyseCode(MessageSend.java:174)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.analyseCode(MethodDeclaration.java:128)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.internalAnalyseCode(TypeDeclaration.java:741)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode(TypeDeclaration.java:265)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.analyseCode(CompilationUnitDeclaration.java:120)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:924)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:196)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:522)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1083)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:729)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:789)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1248)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2364429</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-17 10:28:15 -0500</bug_when>
    <thetext>Thanks Timo, could reproduce on HEAD (BTW, the update site seems to be
stuck on 13th Feb - we are working on it.)

No this is not connected to &lt;&gt; loose ends. The diamond is cut, polished and
shiny now - we hope !

Stephan, I don&apos;t see a call to AE.resolvePart3.

I have seen this before that errors in type inference do not always surface
and the compiler proceeds to flow analysis and/or code generation with bindings
set to null. Let us use this bug to scan for such patterns.

Disabled test released here: GenericsRegressionTest_1_8._test428352()

Thanks for taking a look.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2364465</commentid>
    <comment_count>2</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-02-17 11:24:11 -0500</bug_when>
    <thetext>(In reply to comment #1)
&gt; Thanks Timo, could reproduce on HEAD (BTW, the update site seems to be
&gt; stuck on 13th Feb - we are working on it.)

I had to modify my own fork quite a bit 2 days ago to get things building again. The changes from that are here: https://github.com/Overruler/eclipse-java8/commit/0cb647222a4fb7e76c02b14d00954a6d239722f3

I also changed all involved projects to use BREE 1.8 which seemed to help immediately. That might have papered over some of the build problems, though.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2364577</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-17 16:53:58 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #1)
&gt; Thanks Timo, could reproduce on HEAD (BTW, the update site seems to be
&gt; stuck on 13th Feb - we are working on it.)
&gt; 
&gt; No this is not connected to &lt;&gt; loose ends. The diamond is cut, polished and
&gt; shiny now - we hope !
&gt; 
&gt; Stephan, I don&apos;t see a call to AE.resolvePart3.
&gt; 
&gt; I have seen this before that errors in type inference do not always surface
&gt; and the compiler proceeds to flow analysis and/or code generation with
&gt; bindings
&gt; set to null. Let us use this bug to scan for such patterns.
&gt; 
&gt; Disabled test released here: GenericsRegressionTest_1_8._test428352()
&gt; 
&gt; Thanks for taking a look.

Right, AE.resolvePart2 returns null and this event is silently ignored :)

I&apos;m working on turning this into proper error messages - for those situations where we know this is the last call - no further resolutions attempts to come.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2364618</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-17 20:02:28 -0500</bug_when>
    <thetext>While previously I was shy to report errors from type inference, because its not trivial to say, if a problem is definite or just one failed attempt among many attempts.

For this example IC18.acceptPendingPolyArguments() was the point where the failing AE.resolvePart2() was triggered and this looks like a good point in time for error reporting, because everything inside rebindInnerPolies is definitely the final word.

For this I extended Invocation.binding(..) with two more arguments to distinguish final from intermediate attempts, plus a scope for error reporting - the signature changed caused some ripples, but the required changes could be made quite mechanically.

So far I could observe this situation only for diamond constructors, but I implemented the change so that similar patterns for MS or ECC are covered, too.

So, if we detect a problem with inferring elided types, that will be reported.
If we have a ProblemMethodBinding, that will be reported, too.
For the unexpected case of having just a null binding and no further information, I report an (internal) genericInferenceError, just so we see if this ever gets triggered.

The patch also contains correction of an embarrassing misuse of indices (the &quot;i&quot; in rebindInnerPolies is *not* a parameter index =:-0).

Released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=dd10489904dda11a1b9c522a71a4705b9646605e</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2366441</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-20 23:00:48 -0500</bug_when>
    <thetext>Verified as working for Eclipse + Java 8 RC1 using Kepler SR1 +   
Eclipse Java Development Tools Patch for Java 8 Support (BETA)	1.0.0.v20140220-2054	org.eclipse.jdt.java8patch.feature.group	Eclipse.org</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>