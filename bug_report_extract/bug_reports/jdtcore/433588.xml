<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>433588</bug_id>
          
          <creation_ts>2014-04-27 08:45:00 -0400</creation_ts>
          <short_desc>[1.8][compiler] ECJ compiles an ambiguous call in the presence of an unrelated unused method.</short_desc>
          <delta_ts>2015-01-20 04:11:00 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 8</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.4.2</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Timo Kinnunen">timo.kinnunen</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>jarthana</cc>
    
    <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2393566</commentid>
    <comment_count>0</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-04-27 08:45:00 -0400</bug_when>
    <thetext>This is making my head hurt. This bug report was supposed to be about mark occurrences and find references disagreeing about whether a method was called or not but I must have made a mistake preparing the test case because it turned into this instead.

Using this code:

package mark.occurrences.find.references;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.function.Consumer;
import java.util.stream.Stream;

public class Disagree {

	private interface StreamyBase&lt;T, E extends Exception&gt; {

		@SuppressWarnings(&quot;unused&quot;)
		default void forEachOrdered(Consumer&lt;? super T&gt; action) throws E {}
	}
	abstract private static class AbstractStream&lt;T, E extends Exception, STREAM, SELF extends AbstractStream&lt;T, E, STREAM, SELF, CONSUMER&gt;, CONSUMER&gt;
	  implements StreamyBase&lt;T, E&gt; {

		@SuppressWarnings(&quot;unused&quot;)
		public void forEachOrdered(CONSUMER action) throws E {}
		// remove this method with a warning about it being unused:
		public final @SafeVarargs void forEachOrdered(Consumer&lt;? super T&gt; action, Consumer&lt;? super T&gt;... actions) throws E {}
	}
	private static class UnStream&lt;T&gt; extends
	  AbstractStream&lt;T, RuntimeException, Stream&lt;T&gt;, UnStream&lt;T&gt;, Consumer&lt;? super T&gt;&gt; {}
	private static class IOStream&lt;T&gt; extends
	  AbstractStream&lt;T, IOException, Stream&lt;T&gt;, IOStream&lt;T&gt;, IOConsumer&lt;? super T&gt;&gt; {}
	@FunctionalInterface
	private interface ExConsumer&lt;T, E extends Exception&gt; {

		void accept(T t1) throws E;
	}
	@FunctionalInterface
	private interface IOConsumer&lt;T&gt; extends ExConsumer&lt;T, IOException&gt; {}

	public static void tests1(IOStream&lt;String&gt; lines1, UnStream&lt;String&gt; lines2) throws IOException {
		IOConsumer&lt;? super String&gt; action = s -&gt; Files.isHidden(Paths.get(s));
		Consumer&lt;? super String&gt; action2 = s -&gt; System.out.println(s);
		lines1.forEachOrdered(action);
		lines1.forEachOrdered(action2);
		lines2.forEachOrdered(action2);
		// After removal these two become ambiguous:
		lines1.forEachOrdered(s -&gt; Files.isHidden(Paths.get(s)));
		lines1.forEachOrdered(s -&gt; System.out.println(s));
	}
}

Removing the method indicated in the code above causes two of the forEachOrdered method calls to become ambiguous.

Is there an undiagnosed problem in the code? Or is an unused method that is acting as a tie-breaker truly unused? You decide!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2393569</commentid>
    <comment_count>1</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-04-27 08:51:16 -0400</bug_when>
    <thetext>Those two @SuppressWarnings(&quot;unused&quot;) annotations should not be important, I only added them to take care of the warnings about the arguments and the thrown exceptions being unused. They are not unused in the full version.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2393742</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-04-28 02:55:05 -0400</bug_when>
    <thetext>Sasi, please take a look. Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2419225</commentid>
    <comment_count>3</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-06-23 07:40:26 -0400</bug_when>
    <thetext>The method forEachOrdered() is indeed ambiguous - the interface method expecting a Consumer &amp; the class method expecting a CONSUMER (type variable, which is bound to IOConsumer, which has no relation to Consumer). 

here&apos;s what javac reports

Disagree.java:42: error: reference to forEachOrdered is ambiguous

                lines1.forEachOrdered(s -&gt; Files.isHidden(Paths.get(s)));
                      ^
  both method forEachOrdered(Consumer&lt;? super T&gt;) in StreamyBase and method forEachOrdered(CONSUMER) in AbstractStream match
  where T,CONSUMER are type-variables:
    T extends Object declared in interface StreamyBase
    CONSUMER extends Object declared in class AbstractStream

What&apos;s interesting is that eclipse accepts this when the other method in the class is present. while javac still rejects it. Scope.mostSpecificMethodBinding() ends up with two candidates when the varargs method is removed, whereas when it is present, it picks one of the 2 candidates as the winner. This is happening because of this code in
Scope.mostSpecificMethodBinding()

if (isJdk18 &amp;&amp; invocationSite instanceof Invocation) {
				InnerInferenceHelper innerInferenceHelper = ((Invocation)invocationSite).innerInferenceHelper();
				if (innerInferenceHelper != null)
					argTypes = innerInferenceHelper.getArgumentTypesForCandidate(visible[i], argumentTypes);
			}
			if ((compatibilityLevels[i] = parameterCompatibilityLevel(visible[i], argTypes)) != NOT_COMPATIBLE) {
				if (i != compatibleCount) {
					visible[compatibleCount] = visible[i];
					compatibilityLevels[compatibleCount] = compatibilityLevels[i];
				}
				compatibleCount++;
			}

When the varargs method is present, there is no innerInferenceHelper, argTypes is regular TypeBinding, and one of the methods is found as NOT_COMPATIBLE, where as when the varargs method is removed, the innerInferenceHelper return PolyTypeBinding for argTypes, both methods are found to be compatible, leading to an ambiguous error being reported. 

Need to investigate further what brings about this difference in behavior</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2419740</commentid>
    <comment_count>4</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-06-24 06:24:35 -0400</bug_when>
    <thetext>Ok, so here&apos;s what&apos;s happening

When the varargs method is present

1. There are two candidates for the method forEachOrdered Scope.findMethod0 - line 1754
2. Both are compatible and visible, so we try to choose the mostSpecificMethodBinding() between these two - line 1932
3. This process eliminates the varargs method as less specific, sees that there&apos;s exactly one match and completes the invocation type inference - line 4468
4. Once this is done, we proceed to looking up interface methods - line 1936
5. This results in an additional candidate from the interface, so we try to choose the most specific method between these two now - line 1305
6. Since type inference for the invocation is complete, we are able to eliminate the interface method as it&apos;s arguments are not compatible with the invocation - line 4389

When the varargs method isn&apos;t around, 

1. We find only one candidate for the method forEachOrdered
2. We directly proceed to looking up interface methods with this candidate - line 1769
3 As before, this results in an additional candidate from the interface, so we try to choose the most specific method between these two now
4. Since type inference for this invocation isn&apos;t done yet, we end up deciding that neither is more specific than the other and report an ambiguous method error

So, there are two issues that need to be addressed here
Problem 1 - The behavior should be same in both cases, we either accept the invocation in both cases or reject it
Problem 2 - What is the right thing to do? accept/reject?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2437310</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-08-09 09:17:13 -0400</bug_when>
    <thetext>Sasi, can you add a word, why inference is complete in one situation and incomplete in the other?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2439854</commentid>
    <comment_count>6</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-08-18 05:11:23 -0400</bug_when>
    <thetext>(In reply to comment #5)
&gt; Sasi, can you add a word, why inference is complete in one situation and
&gt; incomplete in the other?
It wasn&apos;t invoked in the latter case. 

In case 1, when the varargs method is present, 
1. We find two compatible methods in the class and look for most specific method among these two.
2. One is compatible while the other is varargs-compatible, so we discard the varargs method and invoke type inference for the invocation with the remaining candidate method
3. Once this is complete, we lookup interface methods. There is one applicable method in the interface, but that is discarded because the expected argument type is IOConsumer, while the interface method argument is of type Consumer

In case 2, when varargs method is not present
1. We find only one applicable method in the class, and proceed to interface method lookup
2. We find another applicable method in the interface and neither can be discarded as less specific, so we report ambiguity

So, we are invoking type inference before we have the full set of applicable methods, resulting in this inconsistent behavior</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2451711</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-15 08:52:59 -0400</bug_when>
    <thetext>The problem is that mostSpecificMethodBinding call does not amount to the fat
lady singing - After that we consider default abstract methods and if we find
some compatible methods, we could have to run mostSpecificMethodBinding  again.

What is presently happening is upon interim calls to mostSpecificMethodBinding 
we call ASTNode.resolvePolyExpressionArguments from Scope.inferInvocationType
which blows away the inner helper.

That also makes me wonder if the call to ASTNode.resolvePolyExpressionArguments
itself is misplaced as the resolved method could change subsequently.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2451754</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-15 09:52:03 -0400</bug_when>
    <thetext>I&apos;ll take over this one to allow Sasi to work on shape analysis.

I ave a patch under test, that fixes this problem and also ensures that
mostSpecificMethodBinding is called just once thereby avoiding adverse
side effects like resolving poly expression arguments against the wrong
(less specific) method.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2451755</commentid>
    <comment_count>9</comment_count>
      <attachid>247070</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-15 09:56:40 -0400</bug_when>
    <thetext>Created attachment 247070
Patch under test

This is fairly involved change in critical portions of overload resolution
code - not suitable for release on milestone week - hence the move to M3.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2451821</commentid>
    <comment_count>10</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-15 11:19:56 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #9)
&gt; Created attachment 247070 [details]
&gt; Patch under test

All tests pass, I&apos;ll release the patch right after M2 is out of the door.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2451823</commentid>
    <comment_count>11</comment_count>
      <attachid>247077</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-15 11:21:35 -0400</bug_when>
    <thetext>Created attachment 247077
Proposed patch</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2452087</commentid>
    <comment_count>12</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-15 22:12:02 -0400</bug_when>
    <thetext>After carefully reviewing the patch once more, I decided to release the fix and
tests for 4.5 M2 here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=108cd17345619c887ab9a0af6e6482c84a0cbd69

Thanks for the report Timo.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2452862</commentid>
    <comment_count>13</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-09-17 02:08:01 -0400</bug_when>
    <thetext>Verified fixed for 4.5 M2 using I20140916-2000 build</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2473661</commentid>
    <comment_count>14</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-10-29 13:10:09 -0400</bug_when>
    <thetext>Srikanth, I am considering this for 4.4.2 However, one particular test (MethodVerifyTest#test202) is failing in 4.4.2 with this patch:

----------\n
1. WARNING in SubClass.java (at line 4)\r\n
	abstract class AbstractSuperClass&lt;T1 extends AbstractSuperClass&gt; implements MyInterface&lt;T1&gt; {\r\n
	                                             ^^^^^^^^^^^^^^^^^^\n
AbstractSuperClass is a raw type. References to generic type AbstractSuperClass&lt;T1&gt; should be parameterized\n
----------\n
2. ERROR in SubClass.java (at line 9)\r\n
	return super.testMe(o);\r\n
	       ^^^^^^^^^^^^^^^\n
Cannot directly invoke the abstract method testMe(SubClass) for the type MyInterface&lt;SubClass&gt;\n
----------\n

Got some clue? Is there some dependency that is missing?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2473701</commentid>
    <comment_count>15</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-10-29 15:17:54 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #14)
&gt; Got some clue? Is there some dependency that is missing?

I think it&apos;s the fix for bug 428845. I will confirm when the tests finish.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2473768</commentid>
    <comment_count>16</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-29 19:46:34 -0400</bug_when>
    <thetext>Jay, a final test that this back porting exercise is done properly would
be if using 4.4.2 HEAD sources + these files from master branch from the last commit that was made for M2:

	LambdaExpressionSyntaxTest.class,
	NegativeLambdaExpressionsTest.class,
	LambdaExpressionsTest.class,
	LambdaRegressionTest.class,
	SerializableLambdaTest.class,
	OverloadResolutionTest8.class,
	JSR335ClassFileTest.class,
	NegativeTypeAnnotationTest.class,
	TypeAnnotationSyntaxTest.class,
	ReferenceExpressionSyntaxTest.class,
	InterfaceMethodsTest.class,
	ComplianceDiagnoseTest.class,
	GrammarCoverageTests308.class,
	NullTypeAnnotationTest.class,
	CompilerInvocationTests.class,
	ExpressionContextTests.class,
	FlowAnalysisTest8.class,
	FormatterJSR335Tests.class,
	FormatterJSR308Tests.class,
	FormatterBugs18Tests.class,
	JavaSearchBugs8Tests.class,
	TypeAnnotationTest.class,
	JSR308SpecSnippetTests.class,
	Deprecated18Test.class,
	MethodParametersAttributeTest.class,
	ClassFileReaderTest_1_8.class,
	RepeatableAnnotationTest.class,
	ResolveTests18.class,
	CompletionParserTest18.class,
	SelectionParserTest18.class,
	CompletionTests18.class,
	GenericsRegressionTest_1_8.class,
	IncrementalTests18.class,
	ConditionalExpressionTest.class,
	Unicode18Test.class,
	JavaElement8Tests.class,
	TypeAnnotationsConverterTest.class,
	ASTConverterTestAST8_2.class,
	ASTConverterAST8Test.class,
	ASTConverterBugsTestJLS8.class,
	ASTConverter15JLS8Test.class,
	ASTConverter18Test.class,
	ASTRewritingTest.class,
	TypeBindingTests308.class

we pass all tests.

Perhaps a script could be written to copy these files from a workspace
reset to the last commit of M2 into a 4.4.2 candidate workspace.

Then when running the tests if we notice some failures that indicates
some thing was not backported - we can investigate and see if that was
a conscious choice or not.

I *strongly* recommend we do this. If you don&apos;t have the cycles, delegating
to someone in the team and getting it done would be a good idea.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2473876</commentid>
    <comment_count>17</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-10-30 01:42:06 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #16)
&gt; Jay, a final test that this back porting exercise is done properly would
&gt; be if using 4.4.2 HEAD sources + these files from master branch from the
&gt; last commit that was made for M2:

I am afraid this won&apos;t work. I believe we left out few fixes from M1 and might do from M2 list too. So, there is a chance that those tests, if taken from master, will fail, right?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2473880</commentid>
    <comment_count>18</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-30 01:46:58 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #17)
&gt; (In reply to Srikanth Sankaran from comment #16)
&gt; &gt; Jay, a final test that this back porting exercise is done properly would
&gt; &gt; be if using 4.4.2 HEAD sources + these files from master branch from the
&gt; &gt; last commit that was made for M2:
&gt; 
&gt; I am afraid this won&apos;t work. I believe we left out few fixes from M1 and
&gt; might do from M2 list too. So, there is a chance that those tests, if taken
&gt; from master, will fail, right?

But that would be a good checkpoint isn&apos;t it ? If we see say 15 tests are 
failing and track back the bugs for which those tests were added to double
check that they were all not backported by conscious choice as opposed to
oversight ? I&apos;ll let you decide - if you think this is too heavy weight, then
feel free to skip the recommended step.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2473894</commentid>
    <comment_count>19</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-10-30 02:14:33 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #18)
&gt; But that would be a good checkpoint isn&apos;t it ? If we see say 15 tests are 
&gt; failing and track back the bugs for which those tests were added to double
&gt; check that they were all not backported by conscious choice as opposed to
&gt; oversight ? I&apos;ll let you decide - if you think this is too heavy weight, then
&gt; feel free to skip the recommended step.

Sounds like worth a try. If the number of left out fixes is less, this shouldn&apos;t be an issue.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2473895</commentid>
    <comment_count>20</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-10-30 02:14:55 -0400</bug_when>
    <thetext>Reopening for back porting.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2475022</commentid>
    <comment_count>21</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-11-01 07:10:40 -0400</bug_when>
    <thetext>Would this issue still be relevant if we backport bug 437444?
To me, much of the problem analysis sounds like artifacts from the old F &amp; G integration, no?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2475049</commentid>
    <comment_count>22</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-01 07:24:45 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #21)
&gt; Would this issue still be relevant if we backport bug 437444?
&gt; To me, much of the problem analysis sounds like artifacts from the old F &amp; G
&gt; integration, no?

That sounds right, but we are intentionally stopping the present back port
effort at what got fixed for M2 and considering M3 fixes for back ports only
after a full month of field testing of M3.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2477684</commentid>
    <comment_count>23</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-11-06 03:45:29 -0500</bug_when>
    <thetext>Released in R4_4_maintenance via commit(s):

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=R4_4_maintenance&amp;id=2fb464b2c86fe20fa47eec94ed163db8b8758b1e</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2507714</commentid>
    <comment_count>24</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2015-01-20 04:11:00 -0500</bug_when>
    <thetext>Verified for 4.4.2 RC1 using build M20150114-1500.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>247070</attachid>
            <date>2014-09-15 09:56:00 -0400</date>
            <delta_ts>2014-09-15 11:21:35 -0400</delta_ts>
            <desc>Patch under test</desc>
            <filename>Patch.patch</filename>
            <type>text/plain</type>
            <size>14969</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRh
RXhwcmVzc2lvbnNUZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxl
ci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OZWdh
dGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCmluZGV4IDc3MGNlZjYuLmMxM2MwMTQgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRhRXhw
cmVzc2lvbnNUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGls
ZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVn
YXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YQpAQCAtOTM2MCw2ICs5MzYwLDEzNyBAQAog
CQkiVGhlIGZpbmFsIGZpZWxkIFgueCBjYW5ub3QgYmUgYXNzaWduZWRcbiIgKyAKIAkJIi0tLS0t
LS0tLS1cbiIpOwogfQorLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcu
Y2dpP2lkPTQzMzU4OCwgWzEuOF1bY29tcGlsZXJdIEVDSiBjb21waWxlcyBhbiBhbWJpZ3VvdXMg
Y2FsbCBpbiB0aGUgcHJlc2VuY2Ugb2YgYW4gdW5yZWxhdGVkIHVudXNlZCBtZXRob2QuCitwdWJs
aWMgdm9pZCB0ZXN0NDMzNTg4KCkgeworCXRoaXMucnVuTmVnYXRpdmVUZXN0KAorCQluZXcgU3Ry
aW5nW10geworCQkJIlguamF2YSIsCisJCQkiaW1wb3J0IGphdmEuaW8uSU9FeGNlcHRpb247XG4i
ICsKKwkJCSJpbXBvcnQgamF2YS5uaW8uZmlsZS5GaWxlcztcbiIgKworCQkJImltcG9ydCBqYXZh
Lm5pby5maWxlLlBhdGhzO1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5mdW5jdGlvbi5Db25z
dW1lcjtcbiIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuc3RyZWFtLlN0cmVhbTtcbiIgKworCQkJ
InB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJIglwcml2YXRlIGludGVyZmFjZSBTdHJlYW15QmFz
ZTxULCBFIGV4dGVuZHMgRXhjZXB0aW9uPiB7XG4iICsKKwkJCSIJCUBTdXBwcmVzc1dhcm5pbmdz
KFwidW51c2VkXCIpXG4iICsKKwkJCSIJCWRlZmF1bHQgdm9pZCBmb3JFYWNoT3JkZXJlZChDb25z
dW1lcjw/IHN1cGVyIFQ+IGFjdGlvbikgdGhyb3dzIEUge31cbiIgKworCQkJIgl9XG4iICsKKwkJ
CSIJYWJzdHJhY3QgcHJpdmF0ZSBzdGF0aWMgY2xhc3MgQWJzdHJhY3RTdHJlYW08VCwgRSBleHRl
bmRzIEV4Y2VwdGlvbiwgU1RSRUFNLCBTRUxGIGV4dGVuZHMgQWJzdHJhY3RTdHJlYW08VCwgRSwg
U1RSRUFNLCBTRUxGLCBDT05TVU1FUj4sIENPTlNVTUVSPiBpbXBsZW1lbnRzIFN0cmVhbXlCYXNl
PFQsIEU+IHtcbiIgKworCQkJIgkJQFN1cHByZXNzV2FybmluZ3MoXCJ1bnVzZWRcIilcbiIgKwor
CQkJIgkJcHVibGljIHZvaWQgZm9yRWFjaE9yZGVyZWQoQ09OU1VNRVIgYWN0aW9uKSB0aHJvd3Mg
RSB7fVxuIiArCisJCQkiCQkvLyByZW1vdmUgdGhpcyBtZXRob2Qgd2l0aCBhIHdhcm5pbmcgYWJv
dXQgaXQgYmVpbmcgdW51c2VkOlxuIiArCisJCQkiCQlwdWJsaWMgZmluYWwgQFNhZmVWYXJhcmdz
IHZvaWQgZm9yRWFjaE9yZGVyZWQoQ29uc3VtZXI8PyBzdXBlciBUPiBhY3Rpb24sIENvbnN1bWVy
PD8gc3VwZXIgVD4uLi4gYWN0aW9ucykgdGhyb3dzIEUge31cbiIgKworCQkJIgl9XG4iICsKKwkJ
CSIJcHJpdmF0ZSBzdGF0aWMgY2xhc3MgVW5TdHJlYW08VD4gZXh0ZW5kcyBBYnN0cmFjdFN0cmVh
bTxULCBSdW50aW1lRXhjZXB0aW9uLCBTdHJlYW08VD4sIFVuU3RyZWFtPFQ+LCBDb25zdW1lcjw/
IHN1cGVyIFQ+PiB7fVxuIiArCisJCQkiCXByaXZhdGUgc3RhdGljIGNsYXNzIElPU3RyZWFtPFQ+
IGV4dGVuZHMgQWJzdHJhY3RTdHJlYW08VCwgSU9FeGNlcHRpb24sIFN0cmVhbTxUPiwgSU9TdHJl
YW08VD4sIElPQ29uc3VtZXI8PyBzdXBlciBUPj4ge31cbiIgKworCQkJIglARnVuY3Rpb25hbElu
dGVyZmFjZVxuIiArCisJCQkiCXByaXZhdGUgaW50ZXJmYWNlIEV4Q29uc3VtZXI8VCwgRSBleHRl
bmRzIEV4Y2VwdGlvbj4ge1xuIiArCisJCQkiCQl2b2lkIGFjY2VwdChUIHQxKSB0aHJvd3MgRTtc
biIgKworCQkJIgl9XG4iICsKKwkJCSIJQEZ1bmN0aW9uYWxJbnRlcmZhY2VcbiIgKworCQkJIglw
cml2YXRlIGludGVyZmFjZSBJT0NvbnN1bWVyPFQ+IGV4dGVuZHMgRXhDb25zdW1lcjxULCBJT0V4
Y2VwdGlvbj4ge31cbiIgKworCQkJIglwdWJsaWMgc3RhdGljIHZvaWQgdGVzdHMxKElPU3RyZWFt
PFN0cmluZz4gbGluZXMxLCBVblN0cmVhbTxTdHJpbmc+IGxpbmVzMikgdGhyb3dzIElPRXhjZXB0
aW9uIHtcbiIgKworCQkJIgkJSU9Db25zdW1lcjw/IHN1cGVyIFN0cmluZz4gYWN0aW9uID0gcyAt
PiBGaWxlcy5pc0hpZGRlbihQYXRocy5nZXQocykpO1xuIiArCisJCQkiCQlDb25zdW1lcjw/IHN1
cGVyIFN0cmluZz4gYWN0aW9uMiA9IHMgLT4gU3lzdGVtLm91dC5wcmludGxuKHMpO1xuIiArCisJ
CQkiCQkvLyBBZnRlciByZW1vdmFsIHRoZXNlIHR3byBiZWNvbWUgYW1iaWd1b3VzOlxuIiArCisJ
CQkiCQlsaW5lczEuZm9yRWFjaE9yZGVyZWQocyAtPiBGaWxlcy5pc0hpZGRlbihQYXRocy5nZXQo
cykpKTtcbiIgKworCQkJIgkJbGluZXMxLmZvckVhY2hPcmRlcmVkKHMgLT4gU3lzdGVtLm91dC5w
cmludGxuKHMpKTtcbiIgKworCQkJIgkJbGluZXMxLmZvckVhY2hPcmRlcmVkKGFjdGlvbik7XG4i
ICsKKwkJCSIJCWxpbmVzMS5mb3JFYWNoT3JkZXJlZChhY3Rpb24yKTtcbiIgKworCQkJIgkJbGlu
ZXMyLmZvckVhY2hPcmRlcmVkKGFjdGlvbjIpO1xuIiArCisJCQkiCX1cbiIgKworCQkJIn1cbiIK
KwkJfSwKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjEuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBs
aW5lIDE1KVxuIiArIAorCQkiCXB1YmxpYyBmaW5hbCBAU2FmZVZhcmFyZ3Mgdm9pZCBmb3JFYWNo
T3JkZXJlZChDb25zdW1lcjw/IHN1cGVyIFQ+IGFjdGlvbiwgQ29uc3VtZXI8PyBzdXBlciBUPi4u
LiBhY3Rpb25zKSB0aHJvd3MgRSB7fVxuIiArIAorCQkiCSAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkiVGhlIG1ldGhvZCBm
b3JFYWNoT3JkZXJlZChDb25zdW1lcjw/IHN1cGVyIFQ+LCBDb25zdW1lcjw/IHN1cGVyIFQ+Li4u
KSBmcm9tIHRoZSB0eXBlIFguQWJzdHJhY3RTdHJlYW08VCxFLFNUUkVBTSxTRUxGLENPTlNVTUVS
PiBpcyBuZXZlciB1c2VkIGxvY2FsbHlcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjIu
IFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDE3KVxuIiArIAorCQkiCXByaXZhdGUgc3RhdGlj
IGNsYXNzIFVuU3RyZWFtPFQ+IGV4dGVuZHMgQWJzdHJhY3RTdHJlYW08VCwgUnVudGltZUV4Y2Vw
dGlvbiwgU3RyZWFtPFQ+LCBVblN0cmVhbTxUPiwgQ29uc3VtZXI8PyBzdXBlciBUPj4ge31cbiIg
KyAKKwkJIgkgICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXlxuIiArIAorCQkiQWNjZXNzIHRv
IGVuY2xvc2luZyBjb25zdHJ1Y3RvciBYLkFic3RyYWN0U3RyZWFtPFQsRSxTVFJFQU0sU0VMRixD
T05TVU1FUj4oKSBpcyBlbXVsYXRlZCBieSBhIHN5bnRoZXRpYyBhY2Nlc3NvciBtZXRob2RcbiIg
KyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjMuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5l
IDE4KVxuIiArIAorCQkiCXByaXZhdGUgc3RhdGljIGNsYXNzIElPU3RyZWFtPFQ+IGV4dGVuZHMg
QWJzdHJhY3RTdHJlYW08VCwgSU9FeGNlcHRpb24sIFN0cmVhbTxUPiwgSU9TdHJlYW08VD4sIElP
Q29uc3VtZXI8PyBzdXBlciBUPj4ge31cbiIgKyAKKwkJIgkgICAgICAgICAgICAgICAgICAgICBe
Xl5eXl5eXlxuIiArIAorCQkiQWNjZXNzIHRvIGVuY2xvc2luZyBjb25zdHJ1Y3RvciBYLkFic3Ry
YWN0U3RyZWFtPFQsRSxTVFJFQU0sU0VMRixDT05TVU1FUj4oKSBpcyBlbXVsYXRlZCBieSBhIHN5
bnRoZXRpYyBhY2Nlc3NvciBtZXRob2RcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjQu
IEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAyOSlcbiIgKyAKKwkJIglsaW5lczEuZm9yRWFjaE9y
ZGVyZWQocyAtPiBGaWxlcy5pc0hpZGRlbihQYXRocy5nZXQocykpKTtcbiIgKyAKKwkJIgkgICAg
ICAgXl5eXl5eXl5eXl5eXl5cbiIgKyAKKwkJIlRoZSBtZXRob2QgZm9yRWFjaE9yZGVyZWQoWC5J
T0NvbnN1bWVyPD8gc3VwZXIgU3RyaW5nPikgaXMgYW1iaWd1b3VzIGZvciB0aGUgdHlwZSBYLklP
U3RyZWFtPFN0cmluZz5cbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjUuIEVSUk9SIGlu
IFguamF2YSAoYXQgbGluZSAzMClcbiIgKyAKKwkJIglsaW5lczEuZm9yRWFjaE9yZGVyZWQocyAt
PiBTeXN0ZW0ub3V0LnByaW50bG4ocykpO1xuIiArIAorCQkiCSAgICAgICBeXl5eXl5eXl5eXl5e
XlxuIiArIAorCQkiVGhlIG1ldGhvZCBmb3JFYWNoT3JkZXJlZChYLklPQ29uc3VtZXI8PyBzdXBl
ciBTdHJpbmc+KSBpcyBhbWJpZ3VvdXMgZm9yIHRoZSB0eXBlIFguSU9TdHJlYW08U3RyaW5nPlxu
IiArIAorCQkiLS0tLS0tLS0tLVxuIik7Cit9CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcv
YnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDMzNTg4LCBbMS44XVtjb21waWxlcl0gRUNKIGNvbXBpbGVz
IGFuIGFtYmlndW91cyBjYWxsIGluIHRoZSBwcmVzZW5jZSBvZiBhbiB1bnJlbGF0ZWQgdW51c2Vk
IG1ldGhvZC4KK3B1YmxpYyB2b2lkIHRlc3Q0MzM1ODhhKCkgeworCXRoaXMucnVuTmVnYXRpdmVU
ZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJIlguamF2YSIsCisJCQkiaW1wb3J0IGphdmEuaW8u
SU9FeGNlcHRpb247XG4iICsKKwkJCSJpbXBvcnQgamF2YS5uaW8uZmlsZS5GaWxlcztcbiIgKwor
CQkJImltcG9ydCBqYXZhLm5pby5maWxlLlBhdGhzO1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRp
bC5mdW5jdGlvbi5Db25zdW1lcjtcbiIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuc3RyZWFtLlN0
cmVhbTtcbiIgKworCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJIglwcml2YXRlIGludGVy
ZmFjZSBTdHJlYW15QmFzZTxULCBFIGV4dGVuZHMgRXhjZXB0aW9uPiB7XG4iICsKKwkJCSIJCUBT
dXBwcmVzc1dhcm5pbmdzKFwidW51c2VkXCIpXG4iICsKKwkJCSIJCWRlZmF1bHQgdm9pZCBmb3JF
YWNoT3JkZXJlZChDb25zdW1lcjw/IHN1cGVyIFQ+IGFjdGlvbikgdGhyb3dzIEUge31cbiIgKwor
CQkJIgl9XG4iICsKKwkJCSIJYWJzdHJhY3QgcHJpdmF0ZSBzdGF0aWMgY2xhc3MgQWJzdHJhY3RT
dHJlYW08VCwgRSBleHRlbmRzIEV4Y2VwdGlvbiwgU1RSRUFNLCBTRUxGIGV4dGVuZHMgQWJzdHJh
Y3RTdHJlYW08VCwgRSwgU1RSRUFNLCBTRUxGLCBDT05TVU1FUj4sIENPTlNVTUVSPiBpbXBsZW1l
bnRzIFN0cmVhbXlCYXNlPFQsIEU+IHtcbiIgKworCQkJIgkJQFN1cHByZXNzV2FybmluZ3MoXCJ1
bnVzZWRcIilcbiIgKworCQkJIgkJcHVibGljIHZvaWQgZm9yRWFjaE9yZGVyZWQoQ09OU1VNRVIg
YWN0aW9uKSB0aHJvd3MgRSB7fVxuIiArCisJCQkiCQkvLyByZW1vdmUgdGhpcyBtZXRob2Qgd2l0
aCBhIHdhcm5pbmcgYWJvdXQgaXQgYmVpbmcgdW51c2VkOlxuIiArCisJCQkiCQkvLyBwdWJsaWMg
ZmluYWwgQFNhZmVWYXJhcmdzIHZvaWQgZm9yRWFjaE9yZGVyZWQoQ29uc3VtZXI8PyBzdXBlciBU
PiBhY3Rpb24sIENvbnN1bWVyPD8gc3VwZXIgVD4uLi4gYWN0aW9ucykgdGhyb3dzIEUge31cbiIg
KworCQkJIgl9XG4iICsKKwkJCSIJcHJpdmF0ZSBzdGF0aWMgY2xhc3MgVW5TdHJlYW08VD4gZXh0
ZW5kcyBBYnN0cmFjdFN0cmVhbTxULCBSdW50aW1lRXhjZXB0aW9uLCBTdHJlYW08VD4sIFVuU3Ry
ZWFtPFQ+LCBDb25zdW1lcjw/IHN1cGVyIFQ+PiB7fVxuIiArCisJCQkiCXByaXZhdGUgc3RhdGlj
IGNsYXNzIElPU3RyZWFtPFQ+IGV4dGVuZHMgQWJzdHJhY3RTdHJlYW08VCwgSU9FeGNlcHRpb24s
IFN0cmVhbTxUPiwgSU9TdHJlYW08VD4sIElPQ29uc3VtZXI8PyBzdXBlciBUPj4ge31cbiIgKwor
CQkJIglARnVuY3Rpb25hbEludGVyZmFjZVxuIiArCisJCQkiCXByaXZhdGUgaW50ZXJmYWNlIEV4
Q29uc3VtZXI8VCwgRSBleHRlbmRzIEV4Y2VwdGlvbj4ge1xuIiArCisJCQkiCQl2b2lkIGFjY2Vw
dChUIHQxKSB0aHJvd3MgRTtcbiIgKworCQkJIgl9XG4iICsKKwkJCSIJQEZ1bmN0aW9uYWxJbnRl
cmZhY2VcbiIgKworCQkJIglwcml2YXRlIGludGVyZmFjZSBJT0NvbnN1bWVyPFQ+IGV4dGVuZHMg
RXhDb25zdW1lcjxULCBJT0V4Y2VwdGlvbj4ge31cbiIgKworCQkJIglwdWJsaWMgc3RhdGljIHZv
aWQgdGVzdHMxKElPU3RyZWFtPFN0cmluZz4gbGluZXMxLCBVblN0cmVhbTxTdHJpbmc+IGxpbmVz
MikgdGhyb3dzIElPRXhjZXB0aW9uIHtcbiIgKworCQkJIgkJSU9Db25zdW1lcjw/IHN1cGVyIFN0
cmluZz4gYWN0aW9uID0gcyAtPiBGaWxlcy5pc0hpZGRlbihQYXRocy5nZXQocykpO1xuIiArCisJ
CQkiCQlDb25zdW1lcjw/IHN1cGVyIFN0cmluZz4gYWN0aW9uMiA9IHMgLT4gU3lzdGVtLm91dC5w
cmludGxuKHMpO1xuIiArCisJCQkiCQkvLyBBZnRlciByZW1vdmFsIHRoZXNlIHR3byBiZWNvbWUg
YW1iaWd1b3VzOlxuIiArCisJCQkiCQlsaW5lczEuZm9yRWFjaE9yZGVyZWQocyAtPiBGaWxlcy5p
c0hpZGRlbihQYXRocy5nZXQocykpKTtcbiIgKworCQkJIgkJbGluZXMxLmZvckVhY2hPcmRlcmVk
KHMgLT4gU3lzdGVtLm91dC5wcmludGxuKHMpKTtcbiIgKworCQkJIgkJbGluZXMxLmZvckVhY2hP
cmRlcmVkKGFjdGlvbik7XG4iICsKKwkJCSIJCWxpbmVzMS5mb3JFYWNoT3JkZXJlZChhY3Rpb24y
KTtcbiIgKworCQkJIgkJbGluZXMyLmZvckVhY2hPcmRlcmVkKGFjdGlvbjIpO1xuIiArCisJCQki
CX1cbiIgKworCQkJIn1cbiIKKwkJfSwKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjEuIFdBUk5J
TkcgaW4gWC5qYXZhIChhdCBsaW5lIDE3KVxuIiArIAorCQkiCXByaXZhdGUgc3RhdGljIGNsYXNz
IFVuU3RyZWFtPFQ+IGV4dGVuZHMgQWJzdHJhY3RTdHJlYW08VCwgUnVudGltZUV4Y2VwdGlvbiwg
U3RyZWFtPFQ+LCBVblN0cmVhbTxUPiwgQ29uc3VtZXI8PyBzdXBlciBUPj4ge31cbiIgKyAKKwkJ
IgkgICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXlxuIiArIAorCQkiQWNjZXNzIHRvIGVuY2xv
c2luZyBjb25zdHJ1Y3RvciBYLkFic3RyYWN0U3RyZWFtPFQsRSxTVFJFQU0sU0VMRixDT05TVU1F
Uj4oKSBpcyBlbXVsYXRlZCBieSBhIHN5bnRoZXRpYyBhY2Nlc3NvciBtZXRob2RcbiIgKyAKKwkJ
Ii0tLS0tLS0tLS1cbiIgKyAKKwkJIjIuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDE4KVxu
IiArIAorCQkiCXByaXZhdGUgc3RhdGljIGNsYXNzIElPU3RyZWFtPFQ+IGV4dGVuZHMgQWJzdHJh
Y3RTdHJlYW08VCwgSU9FeGNlcHRpb24sIFN0cmVhbTxUPiwgSU9TdHJlYW08VD4sIElPQ29uc3Vt
ZXI8PyBzdXBlciBUPj4ge31cbiIgKyAKKwkJIgkgICAgICAgICAgICAgICAgICAgICBeXl5eXl5e
XlxuIiArIAorCQkiQWNjZXNzIHRvIGVuY2xvc2luZyBjb25zdHJ1Y3RvciBYLkFic3RyYWN0U3Ry
ZWFtPFQsRSxTVFJFQU0sU0VMRixDT05TVU1FUj4oKSBpcyBlbXVsYXRlZCBieSBhIHN5bnRoZXRp
YyBhY2Nlc3NvciBtZXRob2RcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjMuIEVSUk9S
IGluIFguamF2YSAoYXQgbGluZSAyOSlcbiIgKyAKKwkJIglsaW5lczEuZm9yRWFjaE9yZGVyZWQo
cyAtPiBGaWxlcy5pc0hpZGRlbihQYXRocy5nZXQocykpKTtcbiIgKyAKKwkJIgkgICAgICAgXl5e
Xl5eXl5eXl5eXl5cbiIgKyAKKwkJIlRoZSBtZXRob2QgZm9yRWFjaE9yZGVyZWQoWC5JT0NvbnN1
bWVyPD8gc3VwZXIgU3RyaW5nPikgaXMgYW1iaWd1b3VzIGZvciB0aGUgdHlwZSBYLklPU3RyZWFt
PFN0cmluZz5cbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjQuIEVSUk9SIGluIFguamF2
YSAoYXQgbGluZSAzMClcbiIgKyAKKwkJIglsaW5lczEuZm9yRWFjaE9yZGVyZWQocyAtPiBTeXN0
ZW0ub3V0LnByaW50bG4ocykpO1xuIiArIAorCQkiCSAgICAgICBeXl5eXl5eXl5eXl5eXlxuIiAr
IAorCQkiVGhlIG1ldGhvZCBmb3JFYWNoT3JkZXJlZChYLklPQ29uc3VtZXI8PyBzdXBlciBTdHJp
bmc+KSBpcyBhbWJpZ3VvdXMgZm9yIHRoZSB0eXBlIFguSU9TdHJlYW08U3RyaW5nPlxuIiArIAor
CQkiLS0tLS0tLS0tLVxuIik7Cit9CiBwdWJsaWMgc3RhdGljIENsYXNzIHRlc3RDbGFzcygpIHsK
IAlyZXR1cm4gTmVnYXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuY2xhc3M7CiB9CmRpZmYgLS1n
aXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEK
aW5kZXggMWYxNjU1Ny4uMDk5NmVlZCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5q
YXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YQpAQCAtMTI0Myw3ICsxMjQzLDcgQEAK
IAkJSW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUsCiAJCVJlZmVyZW5jZUJpbmRpbmcgY2xh
c3NIaWVyYXJjaHlTdGFydCwKIAkJT2JqZWN0VmVjdG9yIGZvdW5kLAotCQlNZXRob2RCaW5kaW5n
IGNvbmNyZXRlTWF0Y2gpIHsKKwkJTWV0aG9kQmluZGluZyBbXSBjb25jcmV0ZU1hdGNoZXMpIHsK
IAogCQlpbnQgc3RhcnRGb3VuZFNpemUgPSBmb3VuZC5zaXplOwogCQlmaW5hbCBib29sZWFuIHNv
dXJjZUxldmVsMTggPSB0aGlzLmNvbXBpbGVyT3B0aW9ucygpLnNvdXJjZUxldmVsID49IENsYXNz
RmlsZUNvbnN0YW50cy5KREsxXzg7CkBAIC0xMjUzLDEwICsxMjUzLDE0IEBACiAJCQlmaW5kTWV0
aG9kSW5TdXBlckludGVyZmFjZXMoY3VycmVudFR5cGUsIHNlbGVjdG9yLCBmb3VuZCwgdmlzaXRl
ZFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSk7CiAJCQljdXJyZW50VHlwZSA9IGN1cnJlbnRUeXBlLnN1
cGVyY2xhc3MoKTsKIAkJfQotCQlNZXRob2RCaW5kaW5nW10gY2FuZGlkYXRlcyA9IG51bGw7Ci0J
CWludCBjYW5kaWRhdGVzQ291bnQgPSAwOwotCQlNZXRob2RCaW5kaW5nIHByb2JsZW1NZXRob2Qg
PSBudWxsOworCQkKKwkJaW50IGNhbmRpZGF0ZXNDb3VudCA9IGNvbmNyZXRlTWF0Y2hlcyA9PSBu
dWxsID8gMCA6IGNvbmNyZXRlTWF0Y2hlcy5sZW5ndGg7CiAJCWludCBmb3VuZFNpemUgPSBmb3Vu
ZC5zaXplOworCQlNZXRob2RCaW5kaW5nW10gY2FuZGlkYXRlcyA9IG5ldyBNZXRob2RCaW5kaW5n
W2ZvdW5kU2l6ZSAtIHN0YXJ0Rm91bmRTaXplICsgY2FuZGlkYXRlc0NvdW50XTsKKwkJaWYgKGNv
bmNyZXRlTWF0Y2hlcyAhPSBudWxsKQorCQkJU3lzdGVtLmFycmF5Y29weShjb25jcmV0ZU1hdGNo
ZXMsIDAsIGNhbmRpZGF0ZXMsIDAsIGNhbmRpZGF0ZXNDb3VudCk7CisJCQorCQlNZXRob2RCaW5k
aW5nIHByb2JsZW1NZXRob2QgPSBudWxsOwogCQlpZiAoZm91bmRTaXplID4gc3RhcnRGb3VuZFNp
emUpIHsKIAkJCS8vIGFyZ3VtZW50IHR5cGUgY29tcGF0aWJpbGl0eSBjaGVjawogCQkJZmluYWwg
TWV0aG9kVmVyaWZpZXIgbWV0aG9kVmVyaWZpZXIgPSBlbnZpcm9ubWVudCgpLm1ldGhvZFZlcmlm
aWVyKCk7CkBAIC0xMjY2LDkgKzEyNzAsMTEgQEAKIAkJCQlNZXRob2RCaW5kaW5nIGNvbXBhdGli
bGVNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2RCaW5kaW5nLCBhcmd1bWVu
dFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSwgQVBQTElDQUJJTElUWSk7CiAJCQkJaWYgKGNvbXBhdGli
bGVNZXRob2QgIT0gbnVsbCkgewogCQkJCQlpZiAoY29tcGF0aWJsZU1ldGhvZC5pc1ZhbGlkQmlu
ZGluZygpKSB7Ci0JCQkJCQlpZiAoY29uY3JldGVNYXRjaCAhPSBudWxsKSB7Ci0JCQkJCQkJaWYg
KG1ldGhvZFZlcmlmaWVyLmFyZU1ldGhvZHNDb21wYXRpYmxlKGNvbmNyZXRlTWF0Y2gsIGNvbXBh
dGlibGVNZXRob2QpKQotCQkJCQkJCQljb250aW51ZTsgLy8gY2FuIHNraXAgdGhpcyBtZXRob2Qg
c2luY2UgY29uY3JldGVNYXRjaCBvdmVycmlkZXMgaXQKKwkJCQkJCWlmIChjb25jcmV0ZU1hdGNo
ZXMgIT0gbnVsbCkgeworCQkJCQkJCWZvciAoaW50IGogPSAwLCBsZW5ndGggPSBjb25jcmV0ZU1h
dGNoZXMubGVuZ3RoOyBqIDwgbGVuZ3RoOyBqKyspIHsKKwkJCQkJCQkJaWYgKG1ldGhvZFZlcmlm
aWVyLmFyZU1ldGhvZHNDb21wYXRpYmxlKGNvbmNyZXRlTWF0Y2hlc1tqXSwgY29tcGF0aWJsZU1l
dGhvZCkpCisJCQkJCQkJCQljb250aW51ZTsgLy8gY2FuIHNraXAgdGhpcyBtZXRob2Qgc2luY2Ug
Y29uY3JldGVNYXRjaCBvdmVycmlkZXMgaXQKKwkJCQkJCQl9CiAJCQkJCQl9CiAJCQkJCQlpZiAo
c291cmNlTGV2ZWwxOCB8fCAhKGNvbXBhdGlibGVNZXRob2QuaXNWYXJhcmdzKCkgJiYgY29tcGF0
aWJsZU1ldGhvZCBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykp
IHsKIAkJCQkJCQlmb3IgKGludCBqID0gMDsgaiA8IHN0YXJ0Rm91bmRTaXplOyBqKyspIHsKQEAg
LTEyNzcsMTEgKzEyODMsNiBAQAogCQkJCQkJCQkJY29udGludWUgbmV4dDsgLy8gY2FuIHNraXAg
dGhpcyBtZXRob2Qgc2luY2UgY2xhc3NNZXRob2Qgb3ZlcnJpZGVzIGl0CiAJCQkJCQkJfQogCQkJ
CQkJfQotCQkJCQkJaWYgKGNhbmRpZGF0ZXNDb3VudCA9PSAwKSB7Ci0JCQkJCQkJY2FuZGlkYXRl
cyA9IG5ldyBNZXRob2RCaW5kaW5nW2ZvdW5kU2l6ZSAtIHN0YXJ0Rm91bmRTaXplICsgMV07Ci0J
CQkJCQkJaWYgKGNvbmNyZXRlTWF0Y2ggIT0gbnVsbCkKLQkJCQkJCQkJY2FuZGlkYXRlc1tjYW5k
aWRhdGVzQ291bnQrK10gPSBjb25jcmV0ZU1hdGNoOwotCQkJCQkJfQogCQkJCQkJY2FuZGlkYXRl
c1tjYW5kaWRhdGVzQ291bnQrK10gPSBjb21wYXRpYmxlTWV0aG9kOwogCQkJCQl9IGVsc2UgaWYg
KHByb2JsZW1NZXRob2QgPT0gbnVsbCkgewogCQkJCQkJcHJvYmxlbU1ldGhvZCA9IGNvbXBhdGli
bGVNZXRob2Q7CkBAIC0xMjg5LDEzICsxMjkwLDEzIEBACiAJCQkJfQogCQkJfQogCQl9Ci0KKwkJ
TWV0aG9kQmluZGluZyBjb25jcmV0ZU1hdGNoID0gbnVsbDsKIAkJaWYgKGNhbmRpZGF0ZXNDb3Vu
dCA8IDIpIHsKLQkJCWlmIChjb25jcmV0ZU1hdGNoID09IG51bGwpIHsKKwkJCWlmIChjb25jcmV0
ZU1hdGNoZXMgPT0gbnVsbCkgewogCQkJCWlmIChjYW5kaWRhdGVzQ291bnQgPT0gMCkKIAkJCQkJ
cmV0dXJuIHByb2JsZW1NZXRob2Q7IC8vIGNhbiBiZSBudWxsCi0JCQkJY29uY3JldGVNYXRjaCA9
IGNhbmRpZGF0ZXNbMF07CiAJCQl9CisJCQljb25jcmV0ZU1hdGNoID0gY2FuZGlkYXRlc1swXTsK
IAkJCS8vIDEuODogR2l2ZSBpbmZlcmVuY2UgYSBjaGFuY2UgdG8gcGVyZm9ybSBvdXRzdGFuZGlu
ZyB0YXNrcyAoMTguNS4yKToKIAkJCWNvbmNyZXRlTWF0Y2ggPSBpbmZlckludm9jYXRpb25UeXBl
KGludm9jYXRpb25TaXRlLCBjb25jcmV0ZU1hdGNoLCBhcmd1bWVudFR5cGVzKTsKIAkJCWlmIChj
b25jcmV0ZU1hdGNoICE9IG51bGwpCkBAIC0xNzY4LDcgKzE3NjksNyBAQAogCQkJCQkJaWYgKGZv
dW5kU2l6ZSA9PSAxICYmIGNvbXBhdGlibGVNZXRob2QuY2FuQmVTZWVuQnkocmVjZWl2ZXJUeXBl
LCBpbnZvY2F0aW9uU2l0ZSwgdGhpcykpIHsKIAkJCQkJCQkvLyByZXR1cm4gdGhlIHNpbmdsZSB2
aXNpYmxlIG1hdGNoIG5vdwogCQkJCQkJCWlmIChzZWFyY2hGb3JEZWZhdWx0QWJzdHJhY3RNZXRo
b2QpCi0JCQkJCQkJCXJldHVybiBmaW5kRGVmYXVsdEFic3RyYWN0TWV0aG9kKHJlY2VpdmVyVHlw
ZSwgc2VsZWN0b3IsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlLCBjbGFzc0hpZXJhcmNo
eVN0YXJ0LCBmb3VuZCwgY29tcGF0aWJsZU1ldGhvZCk7CisJCQkJCQkJCXJldHVybiBmaW5kRGVm
YXVsdEFic3RyYWN0TWV0aG9kKHJlY2VpdmVyVHlwZSwgc2VsZWN0b3IsIGFyZ3VtZW50VHlwZXMs
IGludm9jYXRpb25TaXRlLCBjbGFzc0hpZXJhcmNoeVN0YXJ0LCBmb3VuZCwgbmV3IE1ldGhvZEJp
bmRpbmcgW10ge2NvbXBhdGlibGVNZXRob2R9KTsKIC8vID09PT0gMS44OiBGaW5hbGl6ZSB0eXBl
IGluZmVyZW5jZSBvZiBnZW5lcmljIG1ldGhvZHM6ID09PT0KIAkJCQkJCQlNZXRob2RCaW5kaW5n
IGltcHJvdmVkID0gaW5mZXJJbnZvY2F0aW9uVHlwZShpbnZvY2F0aW9uU2l0ZSwgY29tcGF0aWJs
ZU1ldGhvZCwgYXJndW1lbnRUeXBlcyk7CiAJCQkJCQkJaWYgKGltcHJvdmVkICE9IG51bGwgJiYg
aW1wcm92ZWQuaXNWYWxpZEJpbmRpbmcoKSkgewpAQCAtMTg3NCw2ICsxODc1LDkgQEAKIAkJCQl2
aXNpYmxlc0NvdW50Kys7CiAJCQl9CiAJCX0KKwkJaWYgKHZpc2libGVzQ291bnQgIT0gY2FuZGlk
YXRlcy5sZW5ndGgpCisJCQlTeXN0ZW0uYXJyYXljb3B5KGNhbmRpZGF0ZXMsIDAsIGNhbmRpZGF0
ZXMgPSBuZXcgTWV0aG9kQmluZGluZ1t2aXNpYmxlc0NvdW50XSwgMCwgdmlzaWJsZXNDb3VudCk7
CisJCQogCQlzd2l0Y2ggKHZpc2libGVzQ291bnQpIHsKIAkJCWNhc2UgMCA6CiAJCQkJTWV0aG9k
QmluZGluZyBpbnRlcmZhY2VNZXRob2QgPQpAQCAtMTg4NCw3ICsxODg4LDcgQEAKIAkJCQkJCWNh
bmRpZGF0ZS5pc1N0YXRpYygpICYmIGNhbmRpZGF0ZS5kZWNsYXJpbmdDbGFzcy5pc0ludGVyZmFj
ZSgpID8gUHJvYmxlbVJlYXNvbnMuTm9uU3RhdGljT3JBbGllblR5cGVSZWNlaXZlciA6IFByb2Js
ZW1SZWFzb25zLk5vdFZpc2libGUpOwogCQkJY2FzZSAxIDoKIAkJCQlpZiAoc2VhcmNoRm9yRGVm
YXVsdEFic3RyYWN0TWV0aG9kKQotCQkJCQlyZXR1cm4gZmluZERlZmF1bHRBYnN0cmFjdE1ldGhv
ZChyZWNlaXZlclR5cGUsIHNlbGVjdG9yLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSwg
Y2xhc3NIaWVyYXJjaHlTdGFydCwgZm91bmQsIGNhbmRpZGF0ZXNbMF0pOworCQkJCQlyZXR1cm4g
ZmluZERlZmF1bHRBYnN0cmFjdE1ldGhvZChyZWNlaXZlclR5cGUsIHNlbGVjdG9yLCBhcmd1bWVu
dFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSwgY2xhc3NIaWVyYXJjaHlTdGFydCwgZm91bmQsIG5ldyBN
ZXRob2RCaW5kaW5nIFtdIHsgY2FuZGlkYXRlc1swXSB9KTsKIAkJCQkvLyAxLjg6IEdpdmUgaW5m
ZXJlbmNlIGEgY2hhbmNlIHRvIHBlcmZvcm0gb3V0c3RhbmRpbmcgdGFza3MgKDE4LjUuMik6CiAJ
CQkJY2FuZGlkYXRlID0gaW5mZXJJbnZvY2F0aW9uVHlwZShpbnZvY2F0aW9uU2l0ZSwgY2FuZGlk
YXRlc1swXSwgYXJndW1lbnRUeXBlcyk7CiAJCQkJaWYgKGNhbmRpZGF0ZSAhPSBudWxsKQpAQCAt
MTkzMiwxNyArMTkzNiw4IEBACiAJCQkJcmV0dXJuIG1vc3RTcGVjaWZpY01ldGhvZEJpbmRpbmco
c3RhdGljQ2FuZGlkYXRlcywgc3RhdGljQ291bnQsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25T
aXRlLCByZWNlaXZlclR5cGUpOwogCQl9CiAKLQkJTWV0aG9kQmluZGluZyBtb3N0U3BlY2lmaWNN
ZXRob2QgPSBtb3N0U3BlY2lmaWNNZXRob2RCaW5kaW5nKGNhbmRpZGF0ZXMsIHZpc2libGVzQ291
bnQsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlLCByZWNlaXZlclR5cGUpOwotCQlpZiAo
c2VhcmNoRm9yRGVmYXVsdEFic3RyYWN0TWV0aG9kKSB7IC8vIHNlYXJjaCBpbnRlcmZhY2VzIGZv
ciBhIGJldHRlciBtYXRjaAotCQkJaWYgKG1vc3RTcGVjaWZpY01ldGhvZC5pc1ZhbGlkQmluZGlu
ZygpKQotCQkJCS8vIHNlZSBpZiB0aGVyZSBpcyBhIGJldHRlciBtYXRjaCBpbiB0aGUgaW50ZXJm
YWNlcyAtIHNlZSBBdXRvQm94aW5nVGVzdCA5OSwgTG9va3VwVGVzdCM4MQotCQkJCXJldHVybiBm
aW5kRGVmYXVsdEFic3RyYWN0TWV0aG9kKHJlY2VpdmVyVHlwZSwgc2VsZWN0b3IsIGFyZ3VtZW50
VHlwZXMsIGludm9jYXRpb25TaXRlLCBjbGFzc0hpZXJhcmNoeVN0YXJ0LCBmb3VuZCwgbW9zdFNw
ZWNpZmljTWV0aG9kKTsKLQkJCS8vIHNlZSBpZiB0aGVyZSBpcyBhIG1hdGNoIGluIHRoZSBpbnRl
cmZhY2VzIC0gc2VlIExvb2t1cFRlc3QjODQKLQkJCU1ldGhvZEJpbmRpbmcgaW50ZXJmYWNlTWV0
aG9kID0gZmluZERlZmF1bHRBYnN0cmFjdE1ldGhvZChyZWNlaXZlclR5cGUsIHNlbGVjdG9yLCBh
cmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSwgY2xhc3NIaWVyYXJjaHlTdGFydCwgZm91bmQs
IG51bGwpOwotCQkJaWYgKGludGVyZmFjZU1ldGhvZCAhPSBudWxsICYmIGludGVyZmFjZU1ldGhv
ZC5pc1ZhbGlkQmluZGluZygpIC8qIGVsc2UgcmV0dXJuIHRoZSBzYW1lIGVycm9yIGFzIGJlZm9y
ZSAqLykKLQkJCQlyZXR1cm4gaW50ZXJmYWNlTWV0aG9kOwotCQl9Ci0JCXJldHVybiBtb3N0U3Bl
Y2lmaWNNZXRob2Q7CisJCXJldHVybiBzZWFyY2hGb3JEZWZhdWx0QWJzdHJhY3RNZXRob2QgPyBm
aW5kRGVmYXVsdEFic3RyYWN0TWV0aG9kKHJlY2VpdmVyVHlwZSwgc2VsZWN0b3IsIGFyZ3VtZW50
VHlwZXMsIGludm9jYXRpb25TaXRlLCBjbGFzc0hpZXJhcmNoeVN0YXJ0LCBmb3VuZCwgY2FuZGlk
YXRlcykKKwkJCQkJCQkJCQkJICA6IG1vc3RTcGVjaWZpY01ldGhvZEJpbmRpbmcoY2FuZGlkYXRl
cywgdmlzaWJsZXNDb3VudCwgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUsIHJlY2VpdmVy
VHlwZSk7CiAJfQogCiAJLy8gSW50ZXJuYWwgdXNlIG9ubHk=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>247077</attachid>
            <date>2014-09-15 11:21:00 -0400</date>
            <delta_ts>2014-09-15 11:21:35 -0400</delta_ts>
            <desc>Proposed patch</desc>
            <filename>Patch.patch</filename>
            <type>text/plain</type>
            <size>14995</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRh
RXhwcmVzc2lvbnNUZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxl
ci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OZWdh
dGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCmluZGV4IDc3MGNlZjYuLmMxM2MwMTQgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRhRXhw
cmVzc2lvbnNUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGls
ZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVn
YXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YQpAQCAtOTM2MCw2ICs5MzYwLDEzNyBAQAog
CQkiVGhlIGZpbmFsIGZpZWxkIFgueCBjYW5ub3QgYmUgYXNzaWduZWRcbiIgKyAKIAkJIi0tLS0t
LS0tLS1cbiIpOwogfQorLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcu
Y2dpP2lkPTQzMzU4OCwgWzEuOF1bY29tcGlsZXJdIEVDSiBjb21waWxlcyBhbiBhbWJpZ3VvdXMg
Y2FsbCBpbiB0aGUgcHJlc2VuY2Ugb2YgYW4gdW5yZWxhdGVkIHVudXNlZCBtZXRob2QuCitwdWJs
aWMgdm9pZCB0ZXN0NDMzNTg4KCkgeworCXRoaXMucnVuTmVnYXRpdmVUZXN0KAorCQluZXcgU3Ry
aW5nW10geworCQkJIlguamF2YSIsCisJCQkiaW1wb3J0IGphdmEuaW8uSU9FeGNlcHRpb247XG4i
ICsKKwkJCSJpbXBvcnQgamF2YS5uaW8uZmlsZS5GaWxlcztcbiIgKworCQkJImltcG9ydCBqYXZh
Lm5pby5maWxlLlBhdGhzO1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRpbC5mdW5jdGlvbi5Db25z
dW1lcjtcbiIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuc3RyZWFtLlN0cmVhbTtcbiIgKworCQkJ
InB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJIglwcml2YXRlIGludGVyZmFjZSBTdHJlYW15QmFz
ZTxULCBFIGV4dGVuZHMgRXhjZXB0aW9uPiB7XG4iICsKKwkJCSIJCUBTdXBwcmVzc1dhcm5pbmdz
KFwidW51c2VkXCIpXG4iICsKKwkJCSIJCWRlZmF1bHQgdm9pZCBmb3JFYWNoT3JkZXJlZChDb25z
dW1lcjw/IHN1cGVyIFQ+IGFjdGlvbikgdGhyb3dzIEUge31cbiIgKworCQkJIgl9XG4iICsKKwkJ
CSIJYWJzdHJhY3QgcHJpdmF0ZSBzdGF0aWMgY2xhc3MgQWJzdHJhY3RTdHJlYW08VCwgRSBleHRl
bmRzIEV4Y2VwdGlvbiwgU1RSRUFNLCBTRUxGIGV4dGVuZHMgQWJzdHJhY3RTdHJlYW08VCwgRSwg
U1RSRUFNLCBTRUxGLCBDT05TVU1FUj4sIENPTlNVTUVSPiBpbXBsZW1lbnRzIFN0cmVhbXlCYXNl
PFQsIEU+IHtcbiIgKworCQkJIgkJQFN1cHByZXNzV2FybmluZ3MoXCJ1bnVzZWRcIilcbiIgKwor
CQkJIgkJcHVibGljIHZvaWQgZm9yRWFjaE9yZGVyZWQoQ09OU1VNRVIgYWN0aW9uKSB0aHJvd3Mg
RSB7fVxuIiArCisJCQkiCQkvLyByZW1vdmUgdGhpcyBtZXRob2Qgd2l0aCBhIHdhcm5pbmcgYWJv
dXQgaXQgYmVpbmcgdW51c2VkOlxuIiArCisJCQkiCQlwdWJsaWMgZmluYWwgQFNhZmVWYXJhcmdz
IHZvaWQgZm9yRWFjaE9yZGVyZWQoQ29uc3VtZXI8PyBzdXBlciBUPiBhY3Rpb24sIENvbnN1bWVy
PD8gc3VwZXIgVD4uLi4gYWN0aW9ucykgdGhyb3dzIEUge31cbiIgKworCQkJIgl9XG4iICsKKwkJ
CSIJcHJpdmF0ZSBzdGF0aWMgY2xhc3MgVW5TdHJlYW08VD4gZXh0ZW5kcyBBYnN0cmFjdFN0cmVh
bTxULCBSdW50aW1lRXhjZXB0aW9uLCBTdHJlYW08VD4sIFVuU3RyZWFtPFQ+LCBDb25zdW1lcjw/
IHN1cGVyIFQ+PiB7fVxuIiArCisJCQkiCXByaXZhdGUgc3RhdGljIGNsYXNzIElPU3RyZWFtPFQ+
IGV4dGVuZHMgQWJzdHJhY3RTdHJlYW08VCwgSU9FeGNlcHRpb24sIFN0cmVhbTxUPiwgSU9TdHJl
YW08VD4sIElPQ29uc3VtZXI8PyBzdXBlciBUPj4ge31cbiIgKworCQkJIglARnVuY3Rpb25hbElu
dGVyZmFjZVxuIiArCisJCQkiCXByaXZhdGUgaW50ZXJmYWNlIEV4Q29uc3VtZXI8VCwgRSBleHRl
bmRzIEV4Y2VwdGlvbj4ge1xuIiArCisJCQkiCQl2b2lkIGFjY2VwdChUIHQxKSB0aHJvd3MgRTtc
biIgKworCQkJIgl9XG4iICsKKwkJCSIJQEZ1bmN0aW9uYWxJbnRlcmZhY2VcbiIgKworCQkJIglw
cml2YXRlIGludGVyZmFjZSBJT0NvbnN1bWVyPFQ+IGV4dGVuZHMgRXhDb25zdW1lcjxULCBJT0V4
Y2VwdGlvbj4ge31cbiIgKworCQkJIglwdWJsaWMgc3RhdGljIHZvaWQgdGVzdHMxKElPU3RyZWFt
PFN0cmluZz4gbGluZXMxLCBVblN0cmVhbTxTdHJpbmc+IGxpbmVzMikgdGhyb3dzIElPRXhjZXB0
aW9uIHtcbiIgKworCQkJIgkJSU9Db25zdW1lcjw/IHN1cGVyIFN0cmluZz4gYWN0aW9uID0gcyAt
PiBGaWxlcy5pc0hpZGRlbihQYXRocy5nZXQocykpO1xuIiArCisJCQkiCQlDb25zdW1lcjw/IHN1
cGVyIFN0cmluZz4gYWN0aW9uMiA9IHMgLT4gU3lzdGVtLm91dC5wcmludGxuKHMpO1xuIiArCisJ
CQkiCQkvLyBBZnRlciByZW1vdmFsIHRoZXNlIHR3byBiZWNvbWUgYW1iaWd1b3VzOlxuIiArCisJ
CQkiCQlsaW5lczEuZm9yRWFjaE9yZGVyZWQocyAtPiBGaWxlcy5pc0hpZGRlbihQYXRocy5nZXQo
cykpKTtcbiIgKworCQkJIgkJbGluZXMxLmZvckVhY2hPcmRlcmVkKHMgLT4gU3lzdGVtLm91dC5w
cmludGxuKHMpKTtcbiIgKworCQkJIgkJbGluZXMxLmZvckVhY2hPcmRlcmVkKGFjdGlvbik7XG4i
ICsKKwkJCSIJCWxpbmVzMS5mb3JFYWNoT3JkZXJlZChhY3Rpb24yKTtcbiIgKworCQkJIgkJbGlu
ZXMyLmZvckVhY2hPcmRlcmVkKGFjdGlvbjIpO1xuIiArCisJCQkiCX1cbiIgKworCQkJIn1cbiIK
KwkJfSwKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjEuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBs
aW5lIDE1KVxuIiArIAorCQkiCXB1YmxpYyBmaW5hbCBAU2FmZVZhcmFyZ3Mgdm9pZCBmb3JFYWNo
T3JkZXJlZChDb25zdW1lcjw/IHN1cGVyIFQ+IGFjdGlvbiwgQ29uc3VtZXI8PyBzdXBlciBUPi4u
LiBhY3Rpb25zKSB0aHJvd3MgRSB7fVxuIiArIAorCQkiCSAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkiVGhlIG1ldGhvZCBm
b3JFYWNoT3JkZXJlZChDb25zdW1lcjw/IHN1cGVyIFQ+LCBDb25zdW1lcjw/IHN1cGVyIFQ+Li4u
KSBmcm9tIHRoZSB0eXBlIFguQWJzdHJhY3RTdHJlYW08VCxFLFNUUkVBTSxTRUxGLENPTlNVTUVS
PiBpcyBuZXZlciB1c2VkIGxvY2FsbHlcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjIu
IFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDE3KVxuIiArIAorCQkiCXByaXZhdGUgc3RhdGlj
IGNsYXNzIFVuU3RyZWFtPFQ+IGV4dGVuZHMgQWJzdHJhY3RTdHJlYW08VCwgUnVudGltZUV4Y2Vw
dGlvbiwgU3RyZWFtPFQ+LCBVblN0cmVhbTxUPiwgQ29uc3VtZXI8PyBzdXBlciBUPj4ge31cbiIg
KyAKKwkJIgkgICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXlxuIiArIAorCQkiQWNjZXNzIHRv
IGVuY2xvc2luZyBjb25zdHJ1Y3RvciBYLkFic3RyYWN0U3RyZWFtPFQsRSxTVFJFQU0sU0VMRixD
T05TVU1FUj4oKSBpcyBlbXVsYXRlZCBieSBhIHN5bnRoZXRpYyBhY2Nlc3NvciBtZXRob2RcbiIg
KyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjMuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5l
IDE4KVxuIiArIAorCQkiCXByaXZhdGUgc3RhdGljIGNsYXNzIElPU3RyZWFtPFQ+IGV4dGVuZHMg
QWJzdHJhY3RTdHJlYW08VCwgSU9FeGNlcHRpb24sIFN0cmVhbTxUPiwgSU9TdHJlYW08VD4sIElP
Q29uc3VtZXI8PyBzdXBlciBUPj4ge31cbiIgKyAKKwkJIgkgICAgICAgICAgICAgICAgICAgICBe
Xl5eXl5eXlxuIiArIAorCQkiQWNjZXNzIHRvIGVuY2xvc2luZyBjb25zdHJ1Y3RvciBYLkFic3Ry
YWN0U3RyZWFtPFQsRSxTVFJFQU0sU0VMRixDT05TVU1FUj4oKSBpcyBlbXVsYXRlZCBieSBhIHN5
bnRoZXRpYyBhY2Nlc3NvciBtZXRob2RcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjQu
IEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAyOSlcbiIgKyAKKwkJIglsaW5lczEuZm9yRWFjaE9y
ZGVyZWQocyAtPiBGaWxlcy5pc0hpZGRlbihQYXRocy5nZXQocykpKTtcbiIgKyAKKwkJIgkgICAg
ICAgXl5eXl5eXl5eXl5eXl5cbiIgKyAKKwkJIlRoZSBtZXRob2QgZm9yRWFjaE9yZGVyZWQoWC5J
T0NvbnN1bWVyPD8gc3VwZXIgU3RyaW5nPikgaXMgYW1iaWd1b3VzIGZvciB0aGUgdHlwZSBYLklP
U3RyZWFtPFN0cmluZz5cbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjUuIEVSUk9SIGlu
IFguamF2YSAoYXQgbGluZSAzMClcbiIgKyAKKwkJIglsaW5lczEuZm9yRWFjaE9yZGVyZWQocyAt
PiBTeXN0ZW0ub3V0LnByaW50bG4ocykpO1xuIiArIAorCQkiCSAgICAgICBeXl5eXl5eXl5eXl5e
XlxuIiArIAorCQkiVGhlIG1ldGhvZCBmb3JFYWNoT3JkZXJlZChYLklPQ29uc3VtZXI8PyBzdXBl
ciBTdHJpbmc+KSBpcyBhbWJpZ3VvdXMgZm9yIHRoZSB0eXBlIFguSU9TdHJlYW08U3RyaW5nPlxu
IiArIAorCQkiLS0tLS0tLS0tLVxuIik7Cit9CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcv
YnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDMzNTg4LCBbMS44XVtjb21waWxlcl0gRUNKIGNvbXBpbGVz
IGFuIGFtYmlndW91cyBjYWxsIGluIHRoZSBwcmVzZW5jZSBvZiBhbiB1bnJlbGF0ZWQgdW51c2Vk
IG1ldGhvZC4KK3B1YmxpYyB2b2lkIHRlc3Q0MzM1ODhhKCkgeworCXRoaXMucnVuTmVnYXRpdmVU
ZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJIlguamF2YSIsCisJCQkiaW1wb3J0IGphdmEuaW8u
SU9FeGNlcHRpb247XG4iICsKKwkJCSJpbXBvcnQgamF2YS5uaW8uZmlsZS5GaWxlcztcbiIgKwor
CQkJImltcG9ydCBqYXZhLm5pby5maWxlLlBhdGhzO1xuIiArCisJCQkiaW1wb3J0IGphdmEudXRp
bC5mdW5jdGlvbi5Db25zdW1lcjtcbiIgKworCQkJImltcG9ydCBqYXZhLnV0aWwuc3RyZWFtLlN0
cmVhbTtcbiIgKworCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJIglwcml2YXRlIGludGVy
ZmFjZSBTdHJlYW15QmFzZTxULCBFIGV4dGVuZHMgRXhjZXB0aW9uPiB7XG4iICsKKwkJCSIJCUBT
dXBwcmVzc1dhcm5pbmdzKFwidW51c2VkXCIpXG4iICsKKwkJCSIJCWRlZmF1bHQgdm9pZCBmb3JF
YWNoT3JkZXJlZChDb25zdW1lcjw/IHN1cGVyIFQ+IGFjdGlvbikgdGhyb3dzIEUge31cbiIgKwor
CQkJIgl9XG4iICsKKwkJCSIJYWJzdHJhY3QgcHJpdmF0ZSBzdGF0aWMgY2xhc3MgQWJzdHJhY3RT
dHJlYW08VCwgRSBleHRlbmRzIEV4Y2VwdGlvbiwgU1RSRUFNLCBTRUxGIGV4dGVuZHMgQWJzdHJh
Y3RTdHJlYW08VCwgRSwgU1RSRUFNLCBTRUxGLCBDT05TVU1FUj4sIENPTlNVTUVSPiBpbXBsZW1l
bnRzIFN0cmVhbXlCYXNlPFQsIEU+IHtcbiIgKworCQkJIgkJQFN1cHByZXNzV2FybmluZ3MoXCJ1
bnVzZWRcIilcbiIgKworCQkJIgkJcHVibGljIHZvaWQgZm9yRWFjaE9yZGVyZWQoQ09OU1VNRVIg
YWN0aW9uKSB0aHJvd3MgRSB7fVxuIiArCisJCQkiCQkvLyByZW1vdmUgdGhpcyBtZXRob2Qgd2l0
aCBhIHdhcm5pbmcgYWJvdXQgaXQgYmVpbmcgdW51c2VkOlxuIiArCisJCQkiCQkvLyBwdWJsaWMg
ZmluYWwgQFNhZmVWYXJhcmdzIHZvaWQgZm9yRWFjaE9yZGVyZWQoQ29uc3VtZXI8PyBzdXBlciBU
PiBhY3Rpb24sIENvbnN1bWVyPD8gc3VwZXIgVD4uLi4gYWN0aW9ucykgdGhyb3dzIEUge31cbiIg
KworCQkJIgl9XG4iICsKKwkJCSIJcHJpdmF0ZSBzdGF0aWMgY2xhc3MgVW5TdHJlYW08VD4gZXh0
ZW5kcyBBYnN0cmFjdFN0cmVhbTxULCBSdW50aW1lRXhjZXB0aW9uLCBTdHJlYW08VD4sIFVuU3Ry
ZWFtPFQ+LCBDb25zdW1lcjw/IHN1cGVyIFQ+PiB7fVxuIiArCisJCQkiCXByaXZhdGUgc3RhdGlj
IGNsYXNzIElPU3RyZWFtPFQ+IGV4dGVuZHMgQWJzdHJhY3RTdHJlYW08VCwgSU9FeGNlcHRpb24s
IFN0cmVhbTxUPiwgSU9TdHJlYW08VD4sIElPQ29uc3VtZXI8PyBzdXBlciBUPj4ge31cbiIgKwor
CQkJIglARnVuY3Rpb25hbEludGVyZmFjZVxuIiArCisJCQkiCXByaXZhdGUgaW50ZXJmYWNlIEV4
Q29uc3VtZXI8VCwgRSBleHRlbmRzIEV4Y2VwdGlvbj4ge1xuIiArCisJCQkiCQl2b2lkIGFjY2Vw
dChUIHQxKSB0aHJvd3MgRTtcbiIgKworCQkJIgl9XG4iICsKKwkJCSIJQEZ1bmN0aW9uYWxJbnRl
cmZhY2VcbiIgKworCQkJIglwcml2YXRlIGludGVyZmFjZSBJT0NvbnN1bWVyPFQ+IGV4dGVuZHMg
RXhDb25zdW1lcjxULCBJT0V4Y2VwdGlvbj4ge31cbiIgKworCQkJIglwdWJsaWMgc3RhdGljIHZv
aWQgdGVzdHMxKElPU3RyZWFtPFN0cmluZz4gbGluZXMxLCBVblN0cmVhbTxTdHJpbmc+IGxpbmVz
MikgdGhyb3dzIElPRXhjZXB0aW9uIHtcbiIgKworCQkJIgkJSU9Db25zdW1lcjw/IHN1cGVyIFN0
cmluZz4gYWN0aW9uID0gcyAtPiBGaWxlcy5pc0hpZGRlbihQYXRocy5nZXQocykpO1xuIiArCisJ
CQkiCQlDb25zdW1lcjw/IHN1cGVyIFN0cmluZz4gYWN0aW9uMiA9IHMgLT4gU3lzdGVtLm91dC5w
cmludGxuKHMpO1xuIiArCisJCQkiCQkvLyBBZnRlciByZW1vdmFsIHRoZXNlIHR3byBiZWNvbWUg
YW1iaWd1b3VzOlxuIiArCisJCQkiCQlsaW5lczEuZm9yRWFjaE9yZGVyZWQocyAtPiBGaWxlcy5p
c0hpZGRlbihQYXRocy5nZXQocykpKTtcbiIgKworCQkJIgkJbGluZXMxLmZvckVhY2hPcmRlcmVk
KHMgLT4gU3lzdGVtLm91dC5wcmludGxuKHMpKTtcbiIgKworCQkJIgkJbGluZXMxLmZvckVhY2hP
cmRlcmVkKGFjdGlvbik7XG4iICsKKwkJCSIJCWxpbmVzMS5mb3JFYWNoT3JkZXJlZChhY3Rpb24y
KTtcbiIgKworCQkJIgkJbGluZXMyLmZvckVhY2hPcmRlcmVkKGFjdGlvbjIpO1xuIiArCisJCQki
CX1cbiIgKworCQkJIn1cbiIKKwkJfSwKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjEuIFdBUk5J
TkcgaW4gWC5qYXZhIChhdCBsaW5lIDE3KVxuIiArIAorCQkiCXByaXZhdGUgc3RhdGljIGNsYXNz
IFVuU3RyZWFtPFQ+IGV4dGVuZHMgQWJzdHJhY3RTdHJlYW08VCwgUnVudGltZUV4Y2VwdGlvbiwg
U3RyZWFtPFQ+LCBVblN0cmVhbTxUPiwgQ29uc3VtZXI8PyBzdXBlciBUPj4ge31cbiIgKyAKKwkJ
IgkgICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXlxuIiArIAorCQkiQWNjZXNzIHRvIGVuY2xv
c2luZyBjb25zdHJ1Y3RvciBYLkFic3RyYWN0U3RyZWFtPFQsRSxTVFJFQU0sU0VMRixDT05TVU1F
Uj4oKSBpcyBlbXVsYXRlZCBieSBhIHN5bnRoZXRpYyBhY2Nlc3NvciBtZXRob2RcbiIgKyAKKwkJ
Ii0tLS0tLS0tLS1cbiIgKyAKKwkJIjIuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDE4KVxu
IiArIAorCQkiCXByaXZhdGUgc3RhdGljIGNsYXNzIElPU3RyZWFtPFQ+IGV4dGVuZHMgQWJzdHJh
Y3RTdHJlYW08VCwgSU9FeGNlcHRpb24sIFN0cmVhbTxUPiwgSU9TdHJlYW08VD4sIElPQ29uc3Vt
ZXI8PyBzdXBlciBUPj4ge31cbiIgKyAKKwkJIgkgICAgICAgICAgICAgICAgICAgICBeXl5eXl5e
XlxuIiArIAorCQkiQWNjZXNzIHRvIGVuY2xvc2luZyBjb25zdHJ1Y3RvciBYLkFic3RyYWN0U3Ry
ZWFtPFQsRSxTVFJFQU0sU0VMRixDT05TVU1FUj4oKSBpcyBlbXVsYXRlZCBieSBhIHN5bnRoZXRp
YyBhY2Nlc3NvciBtZXRob2RcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjMuIEVSUk9S
IGluIFguamF2YSAoYXQgbGluZSAyOSlcbiIgKyAKKwkJIglsaW5lczEuZm9yRWFjaE9yZGVyZWQo
cyAtPiBGaWxlcy5pc0hpZGRlbihQYXRocy5nZXQocykpKTtcbiIgKyAKKwkJIgkgICAgICAgXl5e
Xl5eXl5eXl5eXl5cbiIgKyAKKwkJIlRoZSBtZXRob2QgZm9yRWFjaE9yZGVyZWQoWC5JT0NvbnN1
bWVyPD8gc3VwZXIgU3RyaW5nPikgaXMgYW1iaWd1b3VzIGZvciB0aGUgdHlwZSBYLklPU3RyZWFt
PFN0cmluZz5cbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjQuIEVSUk9SIGluIFguamF2
YSAoYXQgbGluZSAzMClcbiIgKyAKKwkJIglsaW5lczEuZm9yRWFjaE9yZGVyZWQocyAtPiBTeXN0
ZW0ub3V0LnByaW50bG4ocykpO1xuIiArIAorCQkiCSAgICAgICBeXl5eXl5eXl5eXl5eXlxuIiAr
IAorCQkiVGhlIG1ldGhvZCBmb3JFYWNoT3JkZXJlZChYLklPQ29uc3VtZXI8PyBzdXBlciBTdHJp
bmc+KSBpcyBhbWJpZ3VvdXMgZm9yIHRoZSB0eXBlIFguSU9TdHJlYW08U3RyaW5nPlxuIiArIAor
CQkiLS0tLS0tLS0tLVxuIik7Cit9CiBwdWJsaWMgc3RhdGljIENsYXNzIHRlc3RDbGFzcygpIHsK
IAlyZXR1cm4gTmVnYXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuY2xhc3M7CiB9CmRpZmYgLS1n
aXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEK
aW5kZXggMWYxNjU1Ny4uMjlhMjhiNCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5q
YXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YQpAQCAtMTI0Myw3ICsxMjQzLDcgQEAK
IAkJSW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUsCiAJCVJlZmVyZW5jZUJpbmRpbmcgY2xh
c3NIaWVyYXJjaHlTdGFydCwKIAkJT2JqZWN0VmVjdG9yIGZvdW5kLAotCQlNZXRob2RCaW5kaW5n
IGNvbmNyZXRlTWF0Y2gpIHsKKwkJTWV0aG9kQmluZGluZyBbXSBjb25jcmV0ZU1hdGNoZXMpIHsK
IAogCQlpbnQgc3RhcnRGb3VuZFNpemUgPSBmb3VuZC5zaXplOwogCQlmaW5hbCBib29sZWFuIHNv
dXJjZUxldmVsMTggPSB0aGlzLmNvbXBpbGVyT3B0aW9ucygpLnNvdXJjZUxldmVsID49IENsYXNz
RmlsZUNvbnN0YW50cy5KREsxXzg7CkBAIC0xMjUzLDEwICsxMjUzLDE0IEBACiAJCQlmaW5kTWV0
aG9kSW5TdXBlckludGVyZmFjZXMoY3VycmVudFR5cGUsIHNlbGVjdG9yLCBmb3VuZCwgdmlzaXRl
ZFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSk7CiAJCQljdXJyZW50VHlwZSA9IGN1cnJlbnRUeXBlLnN1
cGVyY2xhc3MoKTsKIAkJfQotCQlNZXRob2RCaW5kaW5nW10gY2FuZGlkYXRlcyA9IG51bGw7Ci0J
CWludCBjYW5kaWRhdGVzQ291bnQgPSAwOwotCQlNZXRob2RCaW5kaW5nIHByb2JsZW1NZXRob2Qg
PSBudWxsOworCQkKKwkJaW50IGNhbmRpZGF0ZXNDb3VudCA9IGNvbmNyZXRlTWF0Y2hlcyA9PSBu
dWxsID8gMCA6IGNvbmNyZXRlTWF0Y2hlcy5sZW5ndGg7CiAJCWludCBmb3VuZFNpemUgPSBmb3Vu
ZC5zaXplOworCQlNZXRob2RCaW5kaW5nW10gY2FuZGlkYXRlcyA9IG5ldyBNZXRob2RCaW5kaW5n
W2ZvdW5kU2l6ZSAtIHN0YXJ0Rm91bmRTaXplICsgY2FuZGlkYXRlc0NvdW50XTsKKwkJaWYgKGNv
bmNyZXRlTWF0Y2hlcyAhPSBudWxsKQorCQkJU3lzdGVtLmFycmF5Y29weShjb25jcmV0ZU1hdGNo
ZXMsIDAsIGNhbmRpZGF0ZXMsIDAsIGNhbmRpZGF0ZXNDb3VudCk7CisJCQorCQlNZXRob2RCaW5k
aW5nIHByb2JsZW1NZXRob2QgPSBudWxsOwogCQlpZiAoZm91bmRTaXplID4gc3RhcnRGb3VuZFNp
emUpIHsKIAkJCS8vIGFyZ3VtZW50IHR5cGUgY29tcGF0aWJpbGl0eSBjaGVjawogCQkJZmluYWwg
TWV0aG9kVmVyaWZpZXIgbWV0aG9kVmVyaWZpZXIgPSBlbnZpcm9ubWVudCgpLm1ldGhvZFZlcmlm
aWVyKCk7CkBAIC0xMjY2LDkgKzEyNzAsMTEgQEAKIAkJCQlNZXRob2RCaW5kaW5nIGNvbXBhdGli
bGVNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2RCaW5kaW5nLCBhcmd1bWVu
dFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSwgQVBQTElDQUJJTElUWSk7CiAJCQkJaWYgKGNvbXBhdGli
bGVNZXRob2QgIT0gbnVsbCkgewogCQkJCQlpZiAoY29tcGF0aWJsZU1ldGhvZC5pc1ZhbGlkQmlu
ZGluZygpKSB7Ci0JCQkJCQlpZiAoY29uY3JldGVNYXRjaCAhPSBudWxsKSB7Ci0JCQkJCQkJaWYg
KG1ldGhvZFZlcmlmaWVyLmFyZU1ldGhvZHNDb21wYXRpYmxlKGNvbmNyZXRlTWF0Y2gsIGNvbXBh
dGlibGVNZXRob2QpKQotCQkJCQkJCQljb250aW51ZTsgLy8gY2FuIHNraXAgdGhpcyBtZXRob2Qg
c2luY2UgY29uY3JldGVNYXRjaCBvdmVycmlkZXMgaXQKKwkJCQkJCWlmIChjb25jcmV0ZU1hdGNo
ZXMgIT0gbnVsbCkgeworCQkJCQkJCWZvciAoaW50IGogPSAwLCBsZW5ndGggPSBjb25jcmV0ZU1h
dGNoZXMubGVuZ3RoOyBqIDwgbGVuZ3RoOyBqKyspIHsKKwkJCQkJCQkJaWYgKG1ldGhvZFZlcmlm
aWVyLmFyZU1ldGhvZHNDb21wYXRpYmxlKGNvbmNyZXRlTWF0Y2hlc1tqXSwgY29tcGF0aWJsZU1l
dGhvZCkpCisJCQkJCQkJCQljb250aW51ZTsgLy8gY2FuIHNraXAgdGhpcyBtZXRob2Qgc2luY2Ug
Y29uY3JldGVNYXRjaCBvdmVycmlkZXMgaXQKKwkJCQkJCQl9CiAJCQkJCQl9CiAJCQkJCQlpZiAo
c291cmNlTGV2ZWwxOCB8fCAhKGNvbXBhdGlibGVNZXRob2QuaXNWYXJhcmdzKCkgJiYgY29tcGF0
aWJsZU1ldGhvZCBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykp
IHsKIAkJCQkJCQlmb3IgKGludCBqID0gMDsgaiA8IHN0YXJ0Rm91bmRTaXplOyBqKyspIHsKQEAg
LTEyNzcsMTEgKzEyODMsNiBAQAogCQkJCQkJCQkJY29udGludWUgbmV4dDsgLy8gY2FuIHNraXAg
dGhpcyBtZXRob2Qgc2luY2UgY2xhc3NNZXRob2Qgb3ZlcnJpZGVzIGl0CiAJCQkJCQkJfQogCQkJ
CQkJfQotCQkJCQkJaWYgKGNhbmRpZGF0ZXNDb3VudCA9PSAwKSB7Ci0JCQkJCQkJY2FuZGlkYXRl
cyA9IG5ldyBNZXRob2RCaW5kaW5nW2ZvdW5kU2l6ZSAtIHN0YXJ0Rm91bmRTaXplICsgMV07Ci0J
CQkJCQkJaWYgKGNvbmNyZXRlTWF0Y2ggIT0gbnVsbCkKLQkJCQkJCQkJY2FuZGlkYXRlc1tjYW5k
aWRhdGVzQ291bnQrK10gPSBjb25jcmV0ZU1hdGNoOwotCQkJCQkJfQogCQkJCQkJY2FuZGlkYXRl
c1tjYW5kaWRhdGVzQ291bnQrK10gPSBjb21wYXRpYmxlTWV0aG9kOwogCQkJCQl9IGVsc2UgaWYg
KHByb2JsZW1NZXRob2QgPT0gbnVsbCkgewogCQkJCQkJcHJvYmxlbU1ldGhvZCA9IGNvbXBhdGli
bGVNZXRob2Q7CkBAIC0xMjg5LDEzICsxMjkwLDEzIEBACiAJCQkJfQogCQkJfQogCQl9Ci0KKwkJ
TWV0aG9kQmluZGluZyBjb25jcmV0ZU1hdGNoID0gbnVsbDsKIAkJaWYgKGNhbmRpZGF0ZXNDb3Vu
dCA8IDIpIHsKLQkJCWlmIChjb25jcmV0ZU1hdGNoID09IG51bGwpIHsKKwkJCWlmIChjb25jcmV0
ZU1hdGNoZXMgPT0gbnVsbCkgewogCQkJCWlmIChjYW5kaWRhdGVzQ291bnQgPT0gMCkKIAkJCQkJ
cmV0dXJuIHByb2JsZW1NZXRob2Q7IC8vIGNhbiBiZSBudWxsCi0JCQkJY29uY3JldGVNYXRjaCA9
IGNhbmRpZGF0ZXNbMF07CiAJCQl9CisJCQljb25jcmV0ZU1hdGNoID0gY2FuZGlkYXRlc1swXTsK
IAkJCS8vIDEuODogR2l2ZSBpbmZlcmVuY2UgYSBjaGFuY2UgdG8gcGVyZm9ybSBvdXRzdGFuZGlu
ZyB0YXNrcyAoMTguNS4yKToKIAkJCWNvbmNyZXRlTWF0Y2ggPSBpbmZlckludm9jYXRpb25UeXBl
KGludm9jYXRpb25TaXRlLCBjb25jcmV0ZU1hdGNoLCBhcmd1bWVudFR5cGVzKTsKIAkJCWlmIChj
b25jcmV0ZU1hdGNoICE9IG51bGwpCkBAIC0xNzY4LDcgKzE3NjksNyBAQAogCQkJCQkJaWYgKGZv
dW5kU2l6ZSA9PSAxICYmIGNvbXBhdGlibGVNZXRob2QuY2FuQmVTZWVuQnkocmVjZWl2ZXJUeXBl
LCBpbnZvY2F0aW9uU2l0ZSwgdGhpcykpIHsKIAkJCQkJCQkvLyByZXR1cm4gdGhlIHNpbmdsZSB2
aXNpYmxlIG1hdGNoIG5vdwogCQkJCQkJCWlmIChzZWFyY2hGb3JEZWZhdWx0QWJzdHJhY3RNZXRo
b2QpCi0JCQkJCQkJCXJldHVybiBmaW5kRGVmYXVsdEFic3RyYWN0TWV0aG9kKHJlY2VpdmVyVHlw
ZSwgc2VsZWN0b3IsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlLCBjbGFzc0hpZXJhcmNo
eVN0YXJ0LCBmb3VuZCwgY29tcGF0aWJsZU1ldGhvZCk7CisJCQkJCQkJCXJldHVybiBmaW5kRGVm
YXVsdEFic3RyYWN0TWV0aG9kKHJlY2VpdmVyVHlwZSwgc2VsZWN0b3IsIGFyZ3VtZW50VHlwZXMs
IGludm9jYXRpb25TaXRlLCBjbGFzc0hpZXJhcmNoeVN0YXJ0LCBmb3VuZCwgbmV3IE1ldGhvZEJp
bmRpbmcgW10ge2NvbXBhdGlibGVNZXRob2R9KTsKIC8vID09PT0gMS44OiBGaW5hbGl6ZSB0eXBl
IGluZmVyZW5jZSBvZiBnZW5lcmljIG1ldGhvZHM6ID09PT0KIAkJCQkJCQlNZXRob2RCaW5kaW5n
IGltcHJvdmVkID0gaW5mZXJJbnZvY2F0aW9uVHlwZShpbnZvY2F0aW9uU2l0ZSwgY29tcGF0aWJs
ZU1ldGhvZCwgYXJndW1lbnRUeXBlcyk7CiAJCQkJCQkJaWYgKGltcHJvdmVkICE9IG51bGwgJiYg
aW1wcm92ZWQuaXNWYWxpZEJpbmRpbmcoKSkgewpAQCAtMTg3NCw2ICsxODc1LDcgQEAKIAkJCQl2
aXNpYmxlc0NvdW50Kys7CiAJCQl9CiAJCX0KKwkJCiAJCXN3aXRjaCAodmlzaWJsZXNDb3VudCkg
ewogCQkJY2FzZSAwIDoKIAkJCQlNZXRob2RCaW5kaW5nIGludGVyZmFjZU1ldGhvZCA9CkBAIC0x
ODg0LDcgKzE4ODYsNyBAQAogCQkJCQkJY2FuZGlkYXRlLmlzU3RhdGljKCkgJiYgY2FuZGlkYXRl
LmRlY2xhcmluZ0NsYXNzLmlzSW50ZXJmYWNlKCkgPyBQcm9ibGVtUmVhc29ucy5Ob25TdGF0aWNP
ckFsaWVuVHlwZVJlY2VpdmVyIDogUHJvYmxlbVJlYXNvbnMuTm90VmlzaWJsZSk7CiAJCQljYXNl
IDEgOgogCQkJCWlmIChzZWFyY2hGb3JEZWZhdWx0QWJzdHJhY3RNZXRob2QpCi0JCQkJCXJldHVy
biBmaW5kRGVmYXVsdEFic3RyYWN0TWV0aG9kKHJlY2VpdmVyVHlwZSwgc2VsZWN0b3IsIGFyZ3Vt
ZW50VHlwZXMsIGludm9jYXRpb25TaXRlLCBjbGFzc0hpZXJhcmNoeVN0YXJ0LCBmb3VuZCwgY2Fu
ZGlkYXRlc1swXSk7CisJCQkJCXJldHVybiBmaW5kRGVmYXVsdEFic3RyYWN0TWV0aG9kKHJlY2Vp
dmVyVHlwZSwgc2VsZWN0b3IsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlLCBjbGFzc0hp
ZXJhcmNoeVN0YXJ0LCBmb3VuZCwgbmV3IE1ldGhvZEJpbmRpbmcgW10geyBjYW5kaWRhdGVzWzBd
IH0pOwogCQkJCS8vIDEuODogR2l2ZSBpbmZlcmVuY2UgYSBjaGFuY2UgdG8gcGVyZm9ybSBvdXRz
dGFuZGluZyB0YXNrcyAoMTguNS4yKToKIAkJCQljYW5kaWRhdGUgPSBpbmZlckludm9jYXRpb25U
eXBlKGludm9jYXRpb25TaXRlLCBjYW5kaWRhdGVzWzBdLCBhcmd1bWVudFR5cGVzKTsKIAkJCQlp
ZiAoY2FuZGlkYXRlICE9IG51bGwpCkBAIC0xOTMxLDE4ICsxOTMzLDEwIEBACiAJCQlpZiAoc3Rh
dGljQ291bnQgPiAxKQogCQkJCXJldHVybiBtb3N0U3BlY2lmaWNNZXRob2RCaW5kaW5nKHN0YXRp
Y0NhbmRpZGF0ZXMsIHN0YXRpY0NvdW50LCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSwg
cmVjZWl2ZXJUeXBlKTsKIAkJfQotCi0JCU1ldGhvZEJpbmRpbmcgbW9zdFNwZWNpZmljTWV0aG9k
ID0gbW9zdFNwZWNpZmljTWV0aG9kQmluZGluZyhjYW5kaWRhdGVzLCB2aXNpYmxlc0NvdW50LCBh
cmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSwgcmVjZWl2ZXJUeXBlKTsKLQkJaWYgKHNlYXJj
aEZvckRlZmF1bHRBYnN0cmFjdE1ldGhvZCkgeyAvLyBzZWFyY2ggaW50ZXJmYWNlcyBmb3IgYSBi
ZXR0ZXIgbWF0Y2gKLQkJCWlmIChtb3N0U3BlY2lmaWNNZXRob2QuaXNWYWxpZEJpbmRpbmcoKSkK
LQkJCQkvLyBzZWUgaWYgdGhlcmUgaXMgYSBiZXR0ZXIgbWF0Y2ggaW4gdGhlIGludGVyZmFjZXMg
LSBzZWUgQXV0b0JveGluZ1Rlc3QgOTksIExvb2t1cFRlc3QjODEKLQkJCQlyZXR1cm4gZmluZERl
ZmF1bHRBYnN0cmFjdE1ldGhvZChyZWNlaXZlclR5cGUsIHNlbGVjdG9yLCBhcmd1bWVudFR5cGVz
LCBpbnZvY2F0aW9uU2l0ZSwgY2xhc3NIaWVyYXJjaHlTdGFydCwgZm91bmQsIG1vc3RTcGVjaWZp
Y01ldGhvZCk7Ci0JCQkvLyBzZWUgaWYgdGhlcmUgaXMgYSBtYXRjaCBpbiB0aGUgaW50ZXJmYWNl
cyAtIHNlZSBMb29rdXBUZXN0Izg0Ci0JCQlNZXRob2RCaW5kaW5nIGludGVyZmFjZU1ldGhvZCA9
IGZpbmREZWZhdWx0QWJzdHJhY3RNZXRob2QocmVjZWl2ZXJUeXBlLCBzZWxlY3RvciwgYXJndW1l
bnRUeXBlcywgaW52b2NhdGlvblNpdGUsIGNsYXNzSGllcmFyY2h5U3RhcnQsIGZvdW5kLCBudWxs
KTsKLQkJCWlmIChpbnRlcmZhY2VNZXRob2QgIT0gbnVsbCAmJiBpbnRlcmZhY2VNZXRob2QuaXNW
YWxpZEJpbmRpbmcoKSAvKiBlbHNlIHJldHVybiB0aGUgc2FtZSBlcnJvciBhcyBiZWZvcmUgKi8p
Ci0JCQkJcmV0dXJuIGludGVyZmFjZU1ldGhvZDsKLQkJfQotCQlyZXR1cm4gbW9zdFNwZWNpZmlj
TWV0aG9kOworCQlpZiAodmlzaWJsZXNDb3VudCAhPSBjYW5kaWRhdGVzLmxlbmd0aCkKKwkJCVN5
c3RlbS5hcnJheWNvcHkoY2FuZGlkYXRlcywgMCwgY2FuZGlkYXRlcyA9IG5ldyBNZXRob2RCaW5k
aW5nW3Zpc2libGVzQ291bnRdLCAwLCB2aXNpYmxlc0NvdW50KTsKKwkJcmV0dXJuIHNlYXJjaEZv
ckRlZmF1bHRBYnN0cmFjdE1ldGhvZCA/IGZpbmREZWZhdWx0QWJzdHJhY3RNZXRob2QocmVjZWl2
ZXJUeXBlLCBzZWxlY3RvciwgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUsIGNsYXNzSGll
cmFyY2h5U3RhcnQsIGZvdW5kLCBjYW5kaWRhdGVzKQorCQkJCQkJCQkJCQkgIDogbW9zdFNwZWNp
ZmljTWV0aG9kQmluZGluZyhjYW5kaWRhdGVzLCB2aXNpYmxlc0NvdW50LCBhcmd1bWVudFR5cGVz
LCBpbnZvY2F0aW9uU2l0ZSwgcmVjZWl2ZXJUeXBlKTsKIAl9CiAKIAkvLyBJbnRlcm5hbCB1c2Ug
b25seQ==
</data>

          </attachment>
      

    </bug>

</bugzilla>