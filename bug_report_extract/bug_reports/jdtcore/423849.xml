<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>423849</bug_id>
          
          <creation_ts>2013-12-11 12:46:00 -0500</creation_ts>
          <short_desc>[1.8][compiler] cannot implement java.nio.file.Path because of compiler name clash</short_desc>
          <delta_ts>2013-12-18 22:44:02 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Mac OS X</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="kasper nielsen">kasperni</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2340697</commentid>
    <comment_count>0</comment_count>
    <who name="kasper nielsen">kasperni</who>
    <bug_when>2013-12-11 12:46:24 -0500</bug_when>
    <thetext>It is impossible to extend java.nio.file.Path because of a compiler error

The type MyPath must implement the inherited abstract method Path.register(WatchService, WatchEvent.Kind&lt;?&gt;[], WatchEvent.Modifier...)	

The method register(WatchService, WatchEvent.Kind&lt;?&gt;[], WatchEvent.Modifier...) of type MyPath must override or implement a supertype method

Name clash: The method register(WatchService, WatchEvent.Kind&lt;?&gt;[], WatchEvent.Modifier...) of type MyPath has the same erasure as register(WatchService, WatchEvent.Kind&lt;?&gt;[], WatchEvent.Modifier...) of type Path but does not override it

The following two methods are the culprit

WatchKey register(WatchService watcher, Kind&lt;?&gt;[] events, Modifier... modifiers) throws IOException
WatchKey register(WatchService watcher, Kind&lt;?&gt;... events) throws IOException

---Full Source----
public class MyPath implements Path {

    /** {@inheritDoc} */
    @Override
    public FileSystem getFileSystem() {
        return null;
    }

    /** {@inheritDoc} */
    @Override
    public boolean isAbsolute() {
        return false;
    }

    /** {@inheritDoc} */
    @Override
    public Path getRoot() {
        return null;
    }

    /** {@inheritDoc} */
    @Override
    public Path getFileName() {
        return null;
    }

    /** {@inheritDoc} */
    @Override
    public Path getParent() {
        return null;
    }

    /** {@inheritDoc} */
    @Override
    public int getNameCount() {
        return 0;
    }

    /** {@inheritDoc} */
    @Override
    public Path getName(int index) {
        return null;
    }

    /** {@inheritDoc} */
    @Override
    public Path subpath(int beginIndex, int endIndex) {
        return null;
    }

    /** {@inheritDoc} */
    @Override
    public boolean startsWith(Path other) {
        return false;
    }

    /** {@inheritDoc} */
    @Override
    public boolean startsWith(String other) {
        return false;
    }

    /** {@inheritDoc} */
    @Override
    public boolean endsWith(Path other) {
        return false;
    }

    /** {@inheritDoc} */
    @Override
    public boolean endsWith(String other) {
        return false;
    }

    /** {@inheritDoc} */
    @Override
    public Path normalize() {
        return null;
    }

    /** {@inheritDoc} */
    @Override
    public Path resolve(Path other) {
        return null;
    }

    /** {@inheritDoc} */
    @Override
    public Path resolve(String other) {
        return null;
    }

    /** {@inheritDoc} */
    @Override
    public Path resolveSibling(Path other) {
        return null;
    }

    /** {@inheritDoc} */
    @Override
    public Path resolveSibling(String other) {
        return null;
    }

    /** {@inheritDoc} */
    @Override
    public Path relativize(Path other) {
        return null;
    }

    /** {@inheritDoc} */
    @Override
    public URI toUri() {
        return null;
    }

    /** {@inheritDoc} */
    @Override
    public Path toAbsolutePath() {
        return null;
    }

    /** {@inheritDoc} */
    @Override
    public Path toRealPath(LinkOption... options) throws IOException {
        return null;
    }

    /** {@inheritDoc} */
    @Override
    public File toFile() {
        return null;
    }

    /** {@inheritDoc} */
    @Override
    public WatchKey register(WatchService watcher, Kind&lt;?&gt;[] events, Modifier... modifiers) throws IOException {
        return null;
    }

    /** {@inheritDoc} */
    @Override
    public WatchKey register(WatchService watcher, Kind&lt;?&gt;... events) throws IOException {
        return null;
    }

    /** {@inheritDoc} */
    @Override
    public Iterator&lt;Path&gt; iterator() {
        return null;
    }

    /** {@inheritDoc} */
    @Override
    public int compareTo(Path other) {
        return 0;
    }

}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2341173</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-12-12 11:33:25 -0500</bug_when>
    <thetext>Thanks for taking a look.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2341989</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-12-15 07:48:26 -0500</bug_when>
    <thetext>Problem reproducible on top of BETA_JAVA8: Short test case:

// --
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.WatchEvent.Kind;
import java.nio.file.WatchEvent.Modifier;
import java.nio.file.WatchKey;
import java.nio.file.WatchService;

public abstract class X implements Path {
    @Override
    public WatchKey register(WatchService watcher, Kind&lt;?&gt;[] events, Modifier... modifiers) throws IOException {
        return null;
    }
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2343612</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-12-18 22:07:03 -0500</bug_when>
    <thetext>I&apos;ll take over this one - Looks like TypeSystem is creating two different
ArrayBindings - something about $ in the nested type name is breaking the
type identity.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2343620</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-12-18 22:28:49 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #3)
&gt; I&apos;ll take over this one - Looks like TypeSystem is creating two different
&gt; ArrayBindings - something about $ in the nested type name is breaking the
&gt; type identity.

The ArrayBinding corresponding to the varargs parameter type ends up becoming
a BinaryTypeBinding, while the one from source ends up being a ParameterizedTypeBinding given outer class is parameterized. Fix is to eagerly
resolve the UnresolvedReferenceBinding if it corresponds to an inner type.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2343621</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-12-18 22:44:02 -0500</bug_when>
    <thetext>Thanks Kasper. Fix and test available here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=e77a13c5cfd8a2800f9cc3d46536a8ccdc632a8b</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>