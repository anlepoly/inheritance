<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>423504</bug_id>
          
          <creation_ts>2013-12-07 15:51:00 -0500</creation_ts>
          <short_desc>[1.8] Implement &quot;18.5.3 Functional Interface Parameterization Inference&quot;</short_desc>
          <delta_ts>2013-12-15 14:14:37 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>424053</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Stephan Herrmann">stephan.herrmann</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>jarthana</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2339038</commentid>
    <comment_count>0</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-07 15:51:42 -0500</bug_when>
    <thetext>While work in bug 400874 is reaching the first milestone, the new spec section mentioned in the bug title has not yet been implemented, partly for lack of test cases for this situation.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2341656</commentid>
    <comment_count>1</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-12-13 09:55:53 -0500</bug_when>
    <thetext>Here&apos;s a test case:

public class X  {
  public static void main(String argv[]) {
    I&lt;? extends Collection&lt;String&gt;&gt; sorter = (List&lt;String&gt; m) -&gt; { /* sort */ };
  }
} 

interface I&lt;T&gt; { 
  public void sort(T col);
}

ECJ complains about incompatible parameter (Javac, b116 allows this code).

Note this is also a problem for &apos;super&apos;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2341990</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-12-15 07:55:08 -0500</bug_when>
    <thetext>I think the example in bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=420525
is also the same issue ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2342000</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-15 09:48:31 -0500</bug_when>
    <thetext>@Srikanth, for implementing this part I will have to modify PTB.getSingleAbstractMethod(). Inside that method handling of wildcards seems to refer to some spec, but I couldn&apos;t find which. Is it safe if I *replace* that wildcard handling with an implementation for 18.5.3 or would that conflict with some other rules?

Do you recall which tests required that wildcard handling?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2342002</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-12-15 10:04:15 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #3)
&gt; @Srikanth, for implementing this part I will have to modify
&gt; PTB.getSingleAbstractMethod(). Inside that method handling of wildcards
&gt; seems to refer to some spec, but I couldn&apos;t find which. Is it safe if I
&gt; *replace* that wildcard handling with an implementation for 18.5.3 or would
&gt; that conflict with some other rules?
&gt; 
&gt; Do you recall which tests required that wildcard handling?


The present spec reads:

The targeted function type is derived from the target type as follows:
If the target type is a wildcard-parameterized functional interface, or an intersection that induces a wildcard-parameterized
functional interface, and if the lambda expression has explicit parameter types P1, ..., Pn, then the targeted function type is the
function type of the inferred wildcard instantiation of T for P1, ..., Pn, as defined in 18.5.3

I think before 18.5.3 got introduced, there was a detailed in place specification
in its stead and the present code is implementing it. Yes, it can be safely
replaced as required.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2342005</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-12-15 10:14:52 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #4)

&gt; The present spec reads:
&gt; 
&gt; The targeted function type is derived from the target type as follows:
&gt; If the target type is a wildcard-parameterized functional interface, or an
&gt; intersection that induces a wildcard-parameterized
&gt; functional interface, and if the lambda expression has explicit parameter
&gt; types P1, ..., Pn, then the targeted function type is the
&gt; function type of the inferred wildcard instantiation of T for P1, ..., Pn,
&gt; as defined in 18.5.3
&gt; 
&gt; I think before 18.5.3 got introduced, there was a detailed in place
&gt; specification
&gt; in its stead and the present code is implementing it. Yes, it can be safely
&gt; replaced as required.

From 0.6.1:

The function descriptor of a parameterized functional interface, F&lt;A1...An&gt;, where A1...An are type arguments (4.5.1), is derived as follows. Let P1...Pn be the type parameters of F; types T1...Tn are derived from the type arguments according to the following rules (for 1  i  n):

If Ai is a type, then Ti = Ai.
If Ai is a upper-bounded wildcard ? extends Ui, then Ti = Ui.
If Ai is a lower-bounded wildcard ? super Li, then Ti = Li.
If Ai is an unbound wildcard ?, then if Pi has upper bound Bi that mentions none of P1...Pn, then Ti = Bi; otherwise, Ti = Object.


I think this part got replaced by 18.5.3, probably at 0.6.3 time under the
change log entry:

&quot;Addressed a negative interaction of wildcards with derivation of a function 
type&quot;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2342006</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-12-15 10:21:26 -0500</bug_when>
    <thetext>Sorry, I think I am confusing you more than helping. The code in PTB,
implemented the spec at the time of 0.6.1 - Yes.

I see two passages in the present spec:
----------
9.8:

The function type of a parameterized functional interface, F&lt;A1...An&gt;, where A1...An are type arguments (4.5.1), is derived as follows,
where P1...Pn are the type parameters of F with corresponding bounds B1...Bn.
If one of the type arguments, Ai, is a wildcard, and the corresponding type parameter bound, Bi, mentions one of P1...Pn, the function
type of F&lt;A1...An&gt; is undefined.
Otherwise, types T1...Tn are derived from the type arguments according to the following rules (for 1  i  n):
If Ai is a type, then Ti = Ai.
If Ai is an unbound wildcard ?, then Ti = Bi.
If Ai is a upper-bounded wildcard ? extends Ui, then Ti = glb(Ui, Bi).
If Ai is a lower-bounded wildcard ? super Li, then Ti = Li.
Finally, the function type of F&lt;A1...An&gt; is the result of applying the substitution [P1:=T1, ..., Pn:=Tn] to the function type of interface
F.
--------

15.27.3:

The targeted function type is derived from the target type as follows:
If the target type is a wildcard-parameterized functional interface, or an intersection that induces a wildcard-parameterized
functional interface, and if the lambda expression has explicit parameter types P1, ..., Pn, then the targeted function type is the
function type of the inferred wildcard instantiation of T for P1, ..., Pn, as defined in 18.5.3.
Otherwise, the targeted function type is the function type of T.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2342008</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-12-15 10:29:31 -0500</bug_when>
    <thetext>So looks like there are two things here: 

1. ECJ is implementing old rules for 9.8.
2. 18.5.3 is only for explicit lambdas and we are not yet implementing it.
Can you look into the changes required between comment#5 and comment#6&apos;s
versions of 9.8 ? That could explain why I am seeing descriptor with JLO
mentioned in it in the code selection problem.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2342012</commentid>
    <comment_count>8</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-15 10:50:36 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #7)
&gt; So looks like there are two things here: 
&gt; 
&gt; 1. ECJ is implementing old rules for 9.8.
&gt; 2. 18.5.3 is only for explicit lambdas and we are not yet implementing it.
&gt; Can you look into the changes required between comment#5 and comment#6&apos;s
&gt; versions of 9.8 ?

Mh, so 9.8 is new to me (I just took that part for granted :) ).

Given it says &quot;The function type of a parameterized functional interface&quot; and given that 18.5.3 is inferring the parameterized functional inferface, shouldn&apos;t we first apply 18.5.3 and then 9.8 on top of the result?

I hope I can show you a draft of 18.5.3 soonish.

&gt; That could explain why I am seeing descriptor with JLO
&gt; mentioned in it in the code selection problem.

Indeed, with wildcard handling removed from PTB and not yet in place via 18.5.3 the test for bug 419048 indeed fails. Stay tuned for an update re 18.5.3.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2342018</commentid>
    <comment_count>9</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-12-15 11:08:13 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #8)
&gt; (In reply to Srikanth Sankaran from comment #7)
&gt; &gt; So looks like there are two things here: 
&gt; &gt; 
&gt; &gt; 1. ECJ is implementing old rules for 9.8.
&gt; &gt; 2. 18.5.3 is only for explicit lambdas and we are not yet implementing it.
&gt; &gt; Can you look into the changes required between comment#5 and comment#6&apos;s
&gt; &gt; versions of 9.8 ?
&gt; 
&gt; Mh, so 9.8 is new to me (I just took that part for granted :) ).
&gt; 
&gt; Given it says &quot;The function type of a parameterized functional interface&quot;
&gt; and given that 18.5.3 is inferring the parameterized functional inferface,
&gt; shouldn&apos;t we first apply 18.5.3 and then 9.8 on top of the result?

18.5.3 may only be for explicit lambdas. PTB&apos;s version needs update wrt 9.8
since the rules read different.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2342020</commentid>
    <comment_count>10</comment_count>
      <attachid>238359</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-15 11:53:29 -0500</bug_when>
    <thetext>Created attachment 238359
draft patch

Here&apos;s a draft implementation with request for comments on these issues:

In order to find a point in time where we have all LE.arguments resolved but before checking them against the descriptor I split the loop over arguments into two. Between loops I hooked the inference. Seems to work, but I haven&apos;t checked whether cutting the loop into two is a kosher thing to do.

For the elided case and for ReferenceExpression we still need the old wildcard replacement (perhaps with some update from the spec, haven&apos;t checked). To distinguish situations I added a parameter to getSingleAbstractMethod: boolean replaceWildcards. Only an LE with explicit arguments passes false (only on one call path actually).

I had to adjust some expected results in NegativeLambdaExpressionTest, haven&apos;t checked in depth if the new messages are good.

Does this look like a winning strategy?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2342042</commentid>
    <comment_count>11</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-15 14:14:37 -0500</bug_when>
    <thetext>I updated the implementation of PTB.getSingleAbstractMethod from the new version of 9.8.

Some cleanup of the impl. of 18.5.3.

Included the correction that &quot;inferenceFinished&quot; shouldn&apos;t say true too early.

Pushed everything as http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=799bcf90c7e5ed6ce45339b7f5c6f4ecccd1d29c

I will proceed testing this via other bugs (next in line: bug 420525).</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>238359</attachid>
            <date>2013-12-15 11:53:00 -0500</date>
            <delta_ts>2013-12-15 11:53:29 -0500</delta_ts>
            <desc>draft patch</desc>
            <filename>Bug-423504--18-Implement-1853-Functional-Interface-P.patch</filename>
            <type>text/plain</type>
            <size>28076</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3RfMV84LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmlj
c1JlZ3Jlc3Npb25UZXN0XzFfOC5qYXZhCmluZGV4IGEyOWY3YjMuLmQ1ZGNhYjUgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3Rf
MV84LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdy
ZXNzaW9uVGVzdF8xXzguamF2YQpAQCAtMjEyLDQgKzIxMiwyMiBAQAogCQkiVHlwZSBtaXNtYXRj
aDogY2Fubm90IGNvbnZlcnQgZnJvbSBMaXN0PEZvbzxFPi5TdHVmZjxFPj4gdG8gTGlzdDxDb25z
dW1lcjxFPj5cbiIgKyAKIAkJIi0tLS0tLS0tLS1cbiIpOwogfQorCisvLyBodHRwczovL2J1Z3Mu
ZWNsaXBzZS5vcmcvNDIzNTA0IC0gWzEuOF0gSW1wbGVtZW50ICIxOC41LjMgRnVuY3Rpb25hbCBJ
bnRlcmZhY2UgUGFyYW1ldGVyaXphdGlvbiBJbmZlcmVuY2UiIAorcHVibGljIHZvaWQgdGVzdEJ1
ZzQyMzUwNCgpIHsKKwlydW5Db25mb3JtVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJYLmph
dmEiLAorCQkJImltcG9ydCBqYXZhLnV0aWwuKjtcbiIgKworCQkJInB1YmxpYyBjbGFzcyBYICB7
XG4iICsgCisJCQkiICBwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmcgYXJndltdKSB7XG4i
ICsgCisJCQkiICAgIEk8PyBleHRlbmRzIENvbGxlY3Rpb248U3RyaW5nPj4gc29ydGVyID0gKExp
c3Q8U3RyaW5nPiBtKSAtPiB7IC8qIHNvcnQgKi8gfTtcbiIgKyAKKwkJCSIgIH1cbiIgKyAKKwkJ
CSJ9IFxuIiArIAorCQkJIlxuIiArIAorCQkJImludGVyZmFjZSBJPFQ+IHsgXG4iICsgCisJCQki
ICBwdWJsaWMgdm9pZCBzb3J0KFQgY29sKTtcbiIgKyAKKwkJCSJ9XG4iCisJCX0pOworfQogfQpk
aWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVnYXRpdmVMYW1iZGFF
eHByZXNzaW9uc1Rlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVy
L3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0
aXZlTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKaW5kZXggOTY0YmQyOS4uYzFiNGJlNCAxMDA2
NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xp
cHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVnYXRpdmVMYW1iZGFFeHBy
ZXNzaW9uc1Rlc3QuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxl
ci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OZWdh
dGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCkBAIC0zNjQ3LDcgKzM2NDcsNyBAQAogCQkJ
IjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAzKVxuIiArIAogCQkJIglJPD8sID8sID8+IGkg
PSAoU3RyaW5nIHApIC0+IHsgcmV0dXJuIG51bGw7IH07XG4iICsgCiAJCQkiCSAgICAgICAgICAg
ICAgICBeXl5eXl5cbiIgKyAKLQkJCSJMYW1iZGEgZXhwcmVzc2lvblwncyBwYXJhbWV0ZXIgcCBp
cyBleHBlY3RlZCB0byBiZSBvZiB0eXBlIExpc3Q8PyBleHRlbmRzIExpc3Q8UGFyYW1ldGVyVHlw
ZT4+W11cbiIgKyAKKwkJCSJMYW1iZGEgZXhwcmVzc2lvblwncyBwYXJhbWV0ZXIgcCBpcyBleHBl
Y3RlZCB0byBiZSBvZiB0eXBlIExpc3Q8PyBleHRlbmRzIExpc3Q8Pz4+W11cbiIgKyAKIAkJCSIt
LS0tLS0tLS0tXG4iKTsKIH0KIC8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3df
YnVnLmNnaT9pZD00MDA1NTYsIFsxLjhdW2NvbXBpbGVyXSBWaXNpYmlsaXR5IGNoZWNrcyBhcmUg
bWlzc2luZyBmb3IgbGFtYmRhL3JlZmVyZW5jZSBleHByZXNzaW9ucwpAQCAtMzY4OCw3ICszNjg4
LDcgQEAKIAkJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMylcbiIgKyAKIAkJCSIJSTw/
IGV4dGVuZHMgcC5QYXJhbWV0ZXJUeXBlLCA/IGV4dGVuZHMgcC5FeGNlcHRpb25UeXBlLCA/IGV4
dGVuZHMgcC5SZXR1cm5UeXBlPiBpID0gKFN0cmluZyBwKSAtPiB7IHJldHVybiBudWxsOyB9O1xu
IiArIAogCQkJIgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXl5eXl5eXG4iICsgCi0JCQki
TGFtYmRhIGV4cHJlc3Npb25cJ3MgcGFyYW1ldGVyIHAgaXMgZXhwZWN0ZWQgdG8gYmUgb2YgdHlw
ZSBMaXN0PD8gZXh0ZW5kcyBMaXN0PFBhcmFtZXRlclR5cGU+PltdXG4iICsgCisJCQkiTGFtYmRh
IGV4cHJlc3Npb25cJ3MgcGFyYW1ldGVyIHAgaXMgZXhwZWN0ZWQgdG8gYmUgb2YgdHlwZSBMaXN0
PD8gZXh0ZW5kcyBMaXN0PD8gZXh0ZW5kcyBQYXJhbWV0ZXJUeXBlPj5bXVxuIiArIAogCQkJIi0t
LS0tLS0tLS1cbiIpOwogfQogLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19i
dWcuY2dpP2lkPTQwMDU1NiwgWzEuOF1bY29tcGlsZXJdIFZpc2liaWxpdHkgY2hlY2tzIGFyZSBt
aXNzaW5nIGZvciBsYW1iZGEvcmVmZXJlbmNlIGV4cHJlc3Npb25zCkBAIC0zODUwLDcgKzM4NTAs
NyBAQAogCQkJIjIuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA2KVxuIiArIAogCQkJIglJPD8g
c3VwZXIgUCwgPyBzdXBlciBULCA/IHN1cGVyIFI+IGkgPSAoU3RyaW5nIHApIC0+IHsgcmV0dXJu
IG51bGw7IH07XG4iICsgCiAJCQkiCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICBeXl5eXl5cbiIgKyAKLQkJCSJMYW1iZGEgZXhwcmVzc2lvblwncyBwYXJhbWV0ZXIgcCBp
cyBleHBlY3RlZCB0byBiZSBvZiB0eXBlIExpc3Q8PyBleHRlbmRzIExpc3Q8UD4+W11cbiIgKyAK
KwkJCSJMYW1iZGEgZXhwcmVzc2lvblwncyBwYXJhbWV0ZXIgcCBpcyBleHBlY3RlZCB0byBiZSBv
ZiB0eXBlIExpc3Q8PyBleHRlbmRzIExpc3Q8PyBzdXBlciBQPj5bXVxuIiArIAogCQkJIi0tLS0t
LS0tLS1cbiIpOwogfQogLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcu
Y2dpP2lkPTQwMDU1NiwgWzEuOF1bY29tcGlsZXJdIFZpc2liaWxpdHkgY2hlY2tzIGFyZSBtaXNz
aW5nIGZvciBsYW1iZGEvcmVmZXJlbmNlIGV4cHJlc3Npb25zCkBAIC0zOTA0LDggKzM5MDQsOCBA
QAogCQkJIi0tLS0tLS0tLS1cbiIgKyAKIAkJCSIyLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUg
NilcbiIgKyAKIAkJCSIJSTw/LCA/LCA/PiBpID0gKFN0cmluZyBwKSAtPiB7IHJldHVybiBudWxs
OyB9O1xuIiArIAotCQkJIgkgICAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXG4iICsgCi0JCQki
VGhlIHRhcmdldCB0eXBlIG9mIHRoaXMgZXhwcmVzc2lvbiBpcyBub3QgYSB3ZWxsIGZvcm1lZCBw
YXJhbWV0ZXJpemVkIHR5cGUgZHVlIHRvIGJvdW5kKHMpIG1pc21hdGNoXG4iICsgCisJCQkiCSAg
ICAgICAgICAgICAgICBeXl5eXl5cbiIgKyAKKwkJCSJMYW1iZGEgZXhwcmVzc2lvblwncyBwYXJh
bWV0ZXIgcCBpcyBleHBlY3RlZCB0byBiZSBvZiB0eXBlIExpc3Q8PyBleHRlbmRzIExpc3Q8Pz4+
W11cbiIgKyAKIAkJCSItLS0tLS0tLS0tXG4iKTsKIH0KIC8vIGh0dHBzOi8vYnVncy5lY2xpcHNl
Lm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00MDA1NTYsIFsxLjhdW2NvbXBpbGVyXSBWaXNpYmls
aXR5IGNoZWNrcyBhcmUgbWlzc2luZyBmb3IgbGFtYmRhL3JlZmVyZW5jZSBleHByZXNzaW9ucwpk
aWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2FzdC9GdW5jdGlvbmFsRXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FzdC9GdW5jdGlvbmFsRXhwcmVzc2lvbi5qYXZhCmluZGV4IDY5MzM5NjMuLjlhNzJlNjMgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9hc3QvRnVuY3Rpb25hbEV4cHJlc3Npb24uamF2YQorKysgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvYXN0L0Z1bmN0aW9uYWxFeHByZXNzaW9uLmphdmEKQEAgLTEwMiw3ICsxMDIsNyBAQAogCQkv
LyB3aGVuIGR1cmluZyBpbmZlcmVuY2UgdGhpcyBleHByZXNzaW9uIG1pbWljcyBhcyBhbiBpbnZv
Y2F0aW9uU2l0ZSwKIAkJLy8gd2Ugc2ltdWxhdGUgYW4gKmludm9jYXRpb24qIG9mIHRoaXMgZnVu
Y3Rpb25hbCBleHByZXNzaW9uLAogCQkvLyB3aGVyZSB0aGUgZXhwZWN0ZWQgdHlwZSBvZiB0aGUg
ZXhwcmVzc2lvbiBpcyB0aGUgcmV0dXJuIHR5cGUgb2YgdGhlIHNhbToKLQkJTWV0aG9kQmluZGlu
ZyBzYW0gPSB0aGlzLmV4cGVjdGVkVHlwZS5nZXRTaW5nbGVBYnN0cmFjdE1ldGhvZCh0aGlzLmVu
Y2xvc2luZ1Njb3BlKTsKKwkJTWV0aG9kQmluZGluZyBzYW0gPSB0aGlzLmV4cGVjdGVkVHlwZS5n
ZXRTaW5nbGVBYnN0cmFjdE1ldGhvZCh0aGlzLmVuY2xvc2luZ1Njb3BlLCB0cnVlKTsKIAkJaWYg
KHNhbSAhPSBudWxsKSB7CiAJCQlpZiAoc2FtLmlzQ29uc3RydWN0b3IoKSkKIAkJCQlyZXR1cm4g
c2FtLmRlY2xhcmluZ0NsYXNzOwpAQCAtMTE2LDkgKzExNiwxMSBAQAogCQlyZXR1cm4gdGhpcy5l
eHBlY3RlZFR5cGU7CiAJfQogCQorCWJvb2xlYW4gaGF2ZUV4cGxpY2l0QXJndW1lbnRzKCkgeyBy
ZXR1cm4gZmFsc2U7IH0KKwogCXB1YmxpYyBUeXBlQmluZGluZyByZXNvbHZlVHlwZShCbG9ja1Nj
b3BlIGJsb2NrU2NvcGUpIHsKIAkJdGhpcy5jb25zdGFudCA9IENvbnN0YW50Lk5vdEFDb25zdGFu
dDsKLQkJTWV0aG9kQmluZGluZyBzYW0gPSB0aGlzLmV4cGVjdGVkVHlwZSA9PSBudWxsID8gbnVs
bCA6IHRoaXMuZXhwZWN0ZWRUeXBlLmdldFNpbmdsZUFic3RyYWN0TWV0aG9kKGJsb2NrU2NvcGUp
OworCQlNZXRob2RCaW5kaW5nIHNhbSA9IHRoaXMuZXhwZWN0ZWRUeXBlID09IG51bGwgPyBudWxs
IDogdGhpcy5leHBlY3RlZFR5cGUuZ2V0U2luZ2xlQWJzdHJhY3RNZXRob2QoYmxvY2tTY29wZSwg
IWhhdmVFeHBsaWNpdEFyZ3VtZW50cygpKTsKIAkJaWYgKHNhbSA9PSBudWxsKSB7CiAJCQlibG9j
a1Njb3BlLnByb2JsZW1SZXBvcnRlcigpLnRhcmdldFR5cGVJc05vdEFGdW5jdGlvbmFsSW50ZXJm
YWNlKHRoaXMpOwogCQkJcmV0dXJuIG51bGw7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0xhbWJk
YUV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhCmluZGV4
IGU4N2Q2YzYuLjM2Y2E2NjYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lv
bi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhCkBAIC00MywxMCAr
NDMsMTIgQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3Vw
LkJsb2NrU2NvcGU7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxv
b2t1cC5DbGFzc1Njb3BlOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxl
ci5sb29rdXAuRXh0cmFDb21waWxlck1vZGlmaWVyczsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkluZmVyZW5jZUNvbnRleHQxODsKIGltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkxvY2FsVmFyaWFibGVCaW5kaW5n
OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuTG9va3Vw
RW52aXJvbm1lbnQ7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxv
b2t1cC5NZXRob2RCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21w
aWxlci5sb29rdXAuTWV0aG9kU2NvcGU7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFs
LmNvbXBpbGVyLmxvb2t1cC5QYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmc7CiBpbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5Qb2x5VHlwZUJpbmRpbmc7CiBpbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5SZWZlcmVuY2VCaW5k
aW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuU2Nv
cGU7CkBAIC0xNjksNyArMTcxLDkgQEAKIAkJfQogCQlyZXR1cm4gc3VwZXIua29zaGVyRGVzY3Jp
cHRvcihjdXJyZW50U2NvcGUsIHNhbSwgc2hvdWxkQ2hhdHRlcik7CiAJfQotCQorCisJYm9vbGVh
biBoYXZlRXhwbGljaXRBcmd1bWVudHMoKSB7IHJldHVybiAhYXJndW1lbnRzVHlwZUVsaWRlZCgp
OyB9CisKIAkvKiBUaGlzIGNvZGUgaXMgYXJyYW5nZWQgc28gdGhhdCB3ZSBjYW4gY29udGludWUg
d2l0aCBhcyBtdWNoIGFuYWx5c2lzIGFzIHBvc3NpYmxlIHdoaWxlIGF2b2lkaW5nIAogCSAqIG1p
bmUgZmllbGRzIHRoYXQgd291bGQgcmVzdWx0IGluIGEgc2xldyBvZiBzcHVyaW91cyBtZXNzYWdl
cy4gVGhpcyBtZXRob2QgaXMgYSBtZXJnZXIgb2Y6CiAJICogQHNlZSBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIubG9va3VwLk1ldGhvZFNjb3BlLmNyZWF0ZU1ldGhvZChBYnN0cmFj
dE1ldGhvZERlY2xhcmF0aW9uKQpAQCAtMjU5LDYgKzI2MywzNCBAQAogCQkJCWlmICgocGFyYW1l
dGVyVHlwZS50YWdCaXRzICYgVGFnQml0cy5IYXNNaXNzaW5nVHlwZSkgIT0gMCkgewogCQkJCQl0
aGlzLmJpbmRpbmcudGFnQml0cyB8PSBUYWdCaXRzLkhhc01pc3NpbmdUeXBlOwogCQkJCX0KKwkJ
CX0KKwkJfQorCQlpZiAoIWFyZ3VtZW50c1R5cGVFbGlkZWQgJiYgIWJ1Z2d5QXJndW1lbnRzKSB7
CisJCQlQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgd2l0aFdpbGRDYXJkcyA9IEluZmVyZW5jZUNv
bnRleHQxOC5wYXJhbWV0ZXJpemVkV2l0aFdpbGRjYXJkKHRoaXMuZXhwZWN0ZWRUeXBlKTsKKwkJ
CWlmICh3aXRoV2lsZENhcmRzICE9IG51bGwpIHsKKwkJCQkvLyBpbnZva2UgMTguNS4zIEZ1bmN0
aW9uYWwgSW50ZXJmYWNlIFBhcmFtZXRlcml6YXRpb24gSW5mZXJlbmNlCisJCQkJSW5mZXJlbmNl
Q29udGV4dDE4IGN0eCA9IG5ldyBJbmZlcmVuY2VDb250ZXh0MTgobWV0aG9kU2NvcGUsIG51bGws
IG51bGwpOyAvLyBUT0RPIGN1c3RvbSBjb25zdHJ1Y3Rvcj8KKwkJCQlUeXBlQmluZGluZ1tdIHEg
PSBjdHguY3JlYXRlQm91bmRzRm9yRnVuY3Rpb25hbEludGVyZmFjZVBhcmFtZXRlcml6YXRpb25J
bmZlcmVuY2Uod2l0aFdpbGRDYXJkcyk7CisJCQkJaWYgKHEubGVuZ3RoICE9IHRoaXMuYXJndW1l
bnRzLmxlbmd0aCkgeworCQkJCQkvLyBUT0RPIGZhaWwsIGNhbiB0aGlzIHN0aWxsIGhhcHBlbiBo
ZXJlPworCQkJCX0gZWxzZSB7CisJCQkJCWlmIChjdHgucmVkdWNlV2l0aEVxdWFsaXR5Q29uc3Ry
YWludHModGhpcy5hcmd1bWVudFR5cGVzLCBxKSkgeworCQkJCQkJVHlwZUJpbmRpbmdbXSBhID0g
d2l0aFdpbGRDYXJkcy5hcmd1bWVudHM7CisJCQkJCQlUeXBlQmluZGluZ1tdIGFwcmltZSA9IGN0
eC5nZXRGdW5jdGlvbkludGVyZmFjZUFyZ3VtZW50U29sdXRpb25zKGEpOworCQkJCQkJLy8gVE9E
TyBJZiBGPEEnMSwgLi4uLCBBJ20+IGlzIGEgd2VsbC1mb3JtZWQgdHlwZSwgLi4uCisJCQkJCQlS
ZWZlcmVuY2VCaW5kaW5nIGdlbmVyaWNUeXBlID0gd2l0aFdpbGRDYXJkcy5nZW5lcmljVHlwZSgp
OworCQkJCQkJdGhpcy5yZXNvbHZlZFR5cGUgPSBibG9ja1Njb3BlLmVudmlyb25tZW50KCkuY3Jl
YXRlUGFyYW1ldGVyaXplZFR5cGUoZ2VuZXJpY1R5cGUsIGFwcmltZSwgZ2VuZXJpY1R5cGUuZW5j
bG9zaW5nVHlwZSgpKTsKKwkJCQkJCXRoaXMuZGVzY3JpcHRvciA9IHRoaXMucmVzb2x2ZWRUeXBl
LmdldFNpbmdsZUFic3RyYWN0TWV0aG9kKGJsb2NrU2NvcGUsIGZhbHNlKTsKKwkJCQkJfQorCQkJ
CX0KKwkJCX0KKwkJfQorCQlmb3IgKGludCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CisJCQlB
cmd1bWVudCBhcmd1bWVudCA9IHRoaXMuYXJndW1lbnRzW2ldOworCQkJVHlwZUJpbmRpbmcgcGFy
YW1ldGVyVHlwZTsKKwkJCWZpbmFsIFR5cGVCaW5kaW5nIGV4cGVjdGVkUGFyYW1ldGVyVHlwZSA9
IGhhdmVEZXNjcmlwdG9yICYmIGkgPCB0aGlzLmRlc2NyaXB0b3IucGFyYW1ldGVycy5sZW5ndGgg
PyB0aGlzLmRlc2NyaXB0b3IucGFyYW1ldGVyc1tpXSA6IG51bGw7CisJCQlwYXJhbWV0ZXJUeXBl
ID0gYXJndW1lbnRzVHlwZUVsaWRlZCA/IGV4cGVjdGVkUGFyYW1ldGVyVHlwZSA6IHRoaXMuYXJn
dW1lbnRUeXBlc1tpXTsKKwkJCWlmIChwYXJhbWV0ZXJUeXBlICE9IG51bGwgJiYgcGFyYW1ldGVy
VHlwZSAhPSBUeXBlQmluZGluZy5WT0lEKSB7CiAJCQkJaWYgKGhhdmVEZXNjcmlwdG9yICYmIGV4
cGVjdGVkUGFyYW1ldGVyVHlwZSAhPSBudWxsICYmIHBhcmFtZXRlclR5cGUuaXNWYWxpZEJpbmRp
bmcoKSAmJiBUeXBlQmluZGluZy5ub3RFcXVhbHMocGFyYW1ldGVyVHlwZSwgZXhwZWN0ZWRQYXJh
bWV0ZXJUeXBlKSkgewogCQkJCQl0aGlzLnNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmxhbWJkYVBh
cmFtZXRlclR5cGVNaXNtYXRjaGVkKGFyZ3VtZW50LCBhcmd1bWVudC50eXBlLCBleHBlY3RlZFBh
cmFtZXRlclR5cGUpOwogCQkJCX0KQEAgLTYxMSw3ICs2NDMsNyBAQAogCQogCXB1YmxpYyBib29s
ZWFuIGlzQ29tcGF0aWJsZVdpdGgoZmluYWwgVHlwZUJpbmRpbmcgbGVmdCwgZmluYWwgU2NvcGUg
c29tZVNjb3BlKSB7CiAJCQotCQlmaW5hbCBNZXRob2RCaW5kaW5nIHNhbSA9IGxlZnQuZ2V0U2lu
Z2xlQWJzdHJhY3RNZXRob2QodGhpcy5lbmNsb3NpbmdTY29wZSk7CisJCWZpbmFsIE1ldGhvZEJp
bmRpbmcgc2FtID0gbGVmdC5nZXRTaW5nbGVBYnN0cmFjdE1ldGhvZCh0aGlzLmVuY2xvc2luZ1Nj
b3BlLCB0cnVlKTsKIAkJCiAJCWlmIChzYW0gPT0gbnVsbCB8fCAhc2FtLmlzVmFsaWRCaW5kaW5n
KCkpCiAJCQlyZXR1cm4gZmFsc2U7CkBAIC03NzQsMTEgKzgwNiwxMSBAQAogCQkJcmV0dXJuIGZh
bHNlOwogCQkKIAkJcyA9IHMuY2FwdHVyZSh0aGlzLmVuY2xvc2luZ1Njb3BlLCB0aGlzLnNvdXJj
ZUVuZCk7Ci0JCU1ldGhvZEJpbmRpbmcgc1NhbSA9IHMuZ2V0U2luZ2xlQWJzdHJhY3RNZXRob2Qo
dGhpcy5lbmNsb3NpbmdTY29wZSk7CisJCU1ldGhvZEJpbmRpbmcgc1NhbSA9IHMuZ2V0U2luZ2xl
QWJzdHJhY3RNZXRob2QodGhpcy5lbmNsb3NpbmdTY29wZSwgdHJ1ZSk7CiAJCWlmIChzU2FtID09
IG51bGwgfHwgIXNTYW0uaXNWYWxpZEJpbmRpbmcoKSkKIAkJCXJldHVybiBmYWxzZTsKIAkJVHlw
ZUJpbmRpbmcgcjEgPSBzU2FtLnJldHVyblR5cGU7Ci0JCU1ldGhvZEJpbmRpbmcgdFNhbSA9IHQu
Z2V0U2luZ2xlQWJzdHJhY3RNZXRob2QodGhpcy5lbmNsb3NpbmdTY29wZSk7CisJCU1ldGhvZEJp
bmRpbmcgdFNhbSA9IHQuZ2V0U2luZ2xlQWJzdHJhY3RNZXRob2QodGhpcy5lbmNsb3NpbmdTY29w
ZSwgdHJ1ZSk7CiAJCWlmICh0U2FtID09IG51bGwgfHwgIXRTYW0uaXNWYWxpZEJpbmRpbmcoKSkK
IAkJCXJldHVybiBmYWxzZTsKIAkJVHlwZUJpbmRpbmcgcjIgPSB0U2FtLnJldHVyblR5cGU7CmRp
ZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVyZW5jZUV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvUmVmZXJlbmNlRXhwcmVzc2lvbi5qYXZhCmluZGV4IGM5ZjJkM2QuLjQzYjJkZWMgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hc3QvUmVmZXJlbmNlRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvUmVmZXJlbmNlRXhwcmVzc2lvbi5qYXZhCkBAIC01NDYsNyArNTQ2LDcgQEAKIAkJaWYgKHRh
cmdldFR5cGUgPT0gbnVsbCkgLy8gYXNzdW1lZCB0byBzaWduYWwgYW5vdGhlciBwcmltYXJ5IGVy
cm9yCiAJCQlyZXR1cm4gdHJ1ZTsKIAotCQlmaW5hbCBNZXRob2RCaW5kaW5nIHNhbSA9IHRhcmdl
dFR5cGUuZ2V0U2luZ2xlQWJzdHJhY3RNZXRob2QodGhpcy5lbmNsb3NpbmdTY29wZSk7IC8vIGNh
Y2hlZC9jaGVhcCBjYWxsLgorCQlmaW5hbCBNZXRob2RCaW5kaW5nIHNhbSA9IHRhcmdldFR5cGUu
Z2V0U2luZ2xlQWJzdHJhY3RNZXRob2QodGhpcy5lbmNsb3NpbmdTY29wZSwgdHJ1ZSk7IC8vIGNh
Y2hlZC9jaGVhcCBjYWxsLgogCQkKIAkJaWYgKHNhbSA9PSBudWxsIHx8ICFzYW0uaXNWYWxpZEJp
bmRpbmcoKSkKIAkJCXJldHVybiB0cnVlOwpAQCAtNjI0LDcgKzYyNCw3IEBACiAJCWlmICh0aGlz
Lmhhc0luZmVyZW5jZUZpbmlzaGVkKQogCQkJcmV0dXJuIHRoaXMucmVzb2x2ZWRUeXBlICE9IG51
bGwgPyB0aGlzLnJlc29sdmVkVHlwZS5pc0NvbXBhdGlibGVXaXRoKGxlZnQsIHNjb3BlKSA6IGZh
bHNlOwogCQkvLyAxNS4yOC4yCi0JCWZpbmFsIE1ldGhvZEJpbmRpbmcgc2FtID0gbGVmdC5nZXRT
aW5nbGVBYnN0cmFjdE1ldGhvZCh0aGlzLmVuY2xvc2luZ1Njb3BlKTsKKwkJZmluYWwgTWV0aG9k
QmluZGluZyBzYW0gPSBsZWZ0LmdldFNpbmdsZUFic3RyYWN0TWV0aG9kKHRoaXMuZW5jbG9zaW5n
U2NvcGUsIHRydWUpOwogCQlpZiAoc2FtID09IG51bGwgfHwgIXNhbS5pc1ZhbGlkQmluZGluZygp
KQogCQkJcmV0dXJuIGZhbHNlOwogCQlib29sZWFuIGlzQ29tcGF0aWJsZTsKQEAgLTY1MiwxMiAr
NjUyLDEyIEBACiAJCQlyZXR1cm4gZmFsc2U7CiAJCQogCQlzID0gcy5jYXB0dXJlKHRoaXMuZW5j
bG9zaW5nU2NvcGUsIHRoaXMuc291cmNlRW5kKTsKLQkJTWV0aG9kQmluZGluZyBzU2FtID0gcy5n
ZXRTaW5nbGVBYnN0cmFjdE1ldGhvZCh0aGlzLmVuY2xvc2luZ1Njb3BlKTsKKwkJTWV0aG9kQmlu
ZGluZyBzU2FtID0gcy5nZXRTaW5nbGVBYnN0cmFjdE1ldGhvZCh0aGlzLmVuY2xvc2luZ1Njb3Bl
LCB0cnVlKTsKIAkJaWYgKHNTYW0gPT0gbnVsbCB8fCAhc1NhbS5pc1ZhbGlkQmluZGluZygpKQog
CQkJcmV0dXJuIGZhbHNlOwogCQlUeXBlQmluZGluZyByMSA9IHNTYW0ucmV0dXJuVHlwZTsKIAkJ
Ci0JCU1ldGhvZEJpbmRpbmcgdFNhbSA9IHQuZ2V0U2luZ2xlQWJzdHJhY3RNZXRob2QodGhpcy5l
bmNsb3NpbmdTY29wZSk7CisJCU1ldGhvZEJpbmRpbmcgdFNhbSA9IHQuZ2V0U2luZ2xlQWJzdHJh
Y3RNZXRob2QodGhpcy5lbmNsb3NpbmdTY29wZSwgdHJ1ZSk7CiAJCWlmICh0U2FtID09IG51bGwg
fHwgIXRTYW0uaXNWYWxpZEJpbmRpbmcoKSkKIAkJCXJldHVybiBmYWxzZTsKIAkJVHlwZUJpbmRp
bmcgcjIgPSB0U2FtLnJldHVyblR5cGU7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0
cmFpbnRFeGNlcHRpb25Gb3JtdWxhLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRFeGNl
cHRpb25Gb3JtdWxhLmphdmEKaW5kZXggMzI1ZjZjZC4uNmIyMTA3MyAxMDA2NDQKLS0tIGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2xvb2t1cC9Db25zdHJhaW50RXhjZXB0aW9uRm9ybXVsYS5qYXZhCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9s
b29rdXAvQ29uc3RyYWludEV4Y2VwdGlvbkZvcm11bGEuamF2YQpAQCAtNDgsNyArNDgsNyBAQAog
CQkJU2NvcGUgc2NvcGUgPSBpbmZlcmVuY2VDb250ZXh0LnNjb3BlOwogCQkJaWYgKCF0aGlzLnJp
Z2h0LmlzRnVuY3Rpb25hbEludGVyZmFjZShzY29wZSkpCiAJCQkJcmV0dXJuIEZBTFNFOwotCQkJ
TWV0aG9kQmluZGluZyBzYW0gPSB0aGlzLnJpZ2h0LmdldFNpbmdsZUFic3RyYWN0TWV0aG9kKHNj
b3BlKTsKKwkJCU1ldGhvZEJpbmRpbmcgc2FtID0gdGhpcy5yaWdodC5nZXRTaW5nbGVBYnN0cmFj
dE1ldGhvZChzY29wZSwgdHJ1ZSk7CiAJCQlpZiAoc2FtID09IG51bGwpCiAJCQkJcmV0dXJuIEZB
TFNFOwogCQkJLy8gVE9ETzogdGhpcyBjb25kaXRpb24gaXMgYXdhaXRpbmcgY29uZmlybWF0aW9u
LCBzZWUgaHR0cDovL21haWwub3Blbmpkay5qYXZhLm5ldC9waXBlcm1haWwvbGFtYmRhLXNwZWMt
ZXhwZXJ0cy8yMDEzLURlY2VtYmVyLzAwMDQ1NS5odG1sIApAQCAtMTIzLDcgKzEyMyw3IEBACiAJ
CQl9CiAJCQlpZiAodGhpcy5yaWdodC5pc0Z1bmN0aW9uYWxJbnRlcmZhY2UoY29udGV4dC5zY29w
ZSkpIHsKIAkJCQlMYW1iZGFFeHByZXNzaW9uIGxhbWJkYSA9IChMYW1iZGFFeHByZXNzaW9uKSB0
aGlzLmxlZnQ7Ci0JCQkJTWV0aG9kQmluZGluZyBzYW0gPSB0aGlzLnJpZ2h0LmdldFNpbmdsZUFi
c3RyYWN0TWV0aG9kKGNvbnRleHQuc2NvcGUpOyAvLyBUT0RPIGRlcml2ZSB3aXRoIHRhcmdldCB0
eXBlPworCQkJCU1ldGhvZEJpbmRpbmcgc2FtID0gdGhpcy5yaWdodC5nZXRTaW5nbGVBYnN0cmFj
dE1ldGhvZChjb250ZXh0LnNjb3BlLCB0cnVlKTsgLy8gVE9ETyBkZXJpdmUgd2l0aCB0YXJnZXQg
dHlwZT8KIAkJCQlmaW5hbCBTZXQgdmFyaWFibGVzID0gbmV3IEhhc2hTZXQoKTsKIAkJCQlpZiAo
bGFtYmRhLmFyZ3VtZW50c1R5cGVFbGlkZWQoKSkgewogCQkJCQkvLyBpKQpAQCAtMTQzLDcgKzE0
Myw3IEBACiAJCQkJcmV0dXJuIENvbGxlY3Rpb25zLnNpbmdsZXRvbkxpc3QodGhpcy5yaWdodCk7
CiAJCQl9CiAJCQlpZiAodGhpcy5yaWdodC5pc0Z1bmN0aW9uYWxJbnRlcmZhY2UoY29udGV4dC5z
Y29wZSkpIHsgLy8gVE9ETzogJiYgdGhpcy5sZWZ0IGlzIGluZXhhY3QKLQkJCQlNZXRob2RCaW5k
aW5nIHNhbSA9IHRoaXMucmlnaHQuZ2V0U2luZ2xlQWJzdHJhY3RNZXRob2QoY29udGV4dC5zY29w
ZSk7IC8vIFRPRE8gZGVyaXZlIHdpdGggdGFyZ2V0IHR5cGU/CisJCQkJTWV0aG9kQmluZGluZyBz
YW0gPSB0aGlzLnJpZ2h0LmdldFNpbmdsZUFic3RyYWN0TWV0aG9kKGNvbnRleHQuc2NvcGUsIHRy
dWUpOyAvLyBUT0RPIGRlcml2ZSB3aXRoIHRhcmdldCB0eXBlPwogCQkJCWZpbmFsIFNldCB2YXJp
YWJsZXMgPSBuZXcgSGFzaFNldCgpOwogCQkJCWludCBsZW4gPSBzYW0ucGFyYW1ldGVycy5sZW5n
dGg7CiAJCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW47IGkrKykgewpkaWZmIC0tZ2l0IGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2xvb2t1cC9Db25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEuamF2YSBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29r
dXAvQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhLmphdmEKaW5kZXggZDJmMzkzYS4uOTA1MTcy
MCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEu
amF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYS5qYXZh
CkBAIC0xMTQsNyArMTE0LDcgQEAKIAkJCQlUeXBlQmluZGluZyB0ID0gdGhpcy5yaWdodDsKIAkJ
CQlpZiAoIXQuaXNGdW5jdGlvbmFsSW50ZXJmYWNlKHNjb3BlKSkKIAkJCQkJcmV0dXJuIEZBTFNF
OwotCQkJCU1ldGhvZEJpbmRpbmcgZnVuY3Rpb25UeXBlID0gdC5nZXRTaW5nbGVBYnN0cmFjdE1l
dGhvZChzY29wZSk7CisJCQkJTWV0aG9kQmluZGluZyBmdW5jdGlvblR5cGUgPSB0LmdldFNpbmds
ZUFic3RyYWN0TWV0aG9kKHNjb3BlLCB0cnVlKTsKIAkJCQlpZiAoZnVuY3Rpb25UeXBlID09IG51
bGwpCiAJCQkJCXJldHVybiBGQUxTRTsKIAkJCQlUeXBlQmluZGluZ1tdIHBhcmFtZXRlcnMgPSBm
dW5jdGlvblR5cGUucGFyYW1ldGVyczsKQEAgLTIwMyw3ICsyMDMsNyBAQAogCQkJdGhyb3cgbmV3
IElsbGVnYWxTdGF0ZUV4Y2VwdGlvbigiU2hvdWxkIG5vdCByZWFjaCBoZXJlIHdpdGggVCBiZWlu
ZyBhIHByb3BlciB0eXBlIik7CiAJCWlmICghdC5pc0Z1bmN0aW9uYWxJbnRlcmZhY2UoaW5mZXJl
bmNlQ29udGV4dC5zY29wZSkpCiAJCQlyZXR1cm4gRkFMU0U7Ci0JCU1ldGhvZEJpbmRpbmcgZnVu
Y3Rpb25UeXBlID0gdC5nZXRTaW5nbGVBYnN0cmFjdE1ldGhvZChpbmZlcmVuY2VDb250ZXh0LnNj
b3BlKTsKKwkJTWV0aG9kQmluZGluZyBmdW5jdGlvblR5cGUgPSB0LmdldFNpbmdsZUFic3RyYWN0
TWV0aG9kKGluZmVyZW5jZUNvbnRleHQuc2NvcGUsIHRydWUpOwogCQlpZiAoZnVuY3Rpb25UeXBl
ID09IG51bGwpCiAJCQlyZXR1cm4gRkFMU0U7CiAJCS8vIHBvdGVudGlhbGx5LWFwcGxpY2FibGUg
bWV0aG9kIGZvciB0aGUgbWV0aG9kIHJlZmVyZW5jZSB3aGVuIHRhcmdldGluZyBUICgxNS4yOC4x
KSwKQEAgLTI4Miw3ICsyODIsNyBAQAogCQkJaWYgKHJldHVyblR5cGUgPT0gVHlwZUJpbmRpbmcu
Vk9JRCkKIAkJCQl0aHJvdyBuZXcgSW5mZXJlbmNlRmFpbHVyZUV4Y2VwdGlvbigiZXhwcmVzc2lv
biBoYXMgbm8gdmFsdWUiKTsKIAotCQkJUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIHBhcmFtZXRl
cml6ZWRUeXBlID0gcGFyYW1ldGVyaXplZFdpdGhXaWxkY2FyZChyZXR1cm5UeXBlKTsKKwkJCVBh
cmFtZXRlcml6ZWRUeXBlQmluZGluZyBwYXJhbWV0ZXJpemVkVHlwZSA9IEluZmVyZW5jZUNvbnRl
eHQxOC5wYXJhbWV0ZXJpemVkV2l0aFdpbGRjYXJkKHJldHVyblR5cGUpOwogCQkJaWYgKHBhcmFt
ZXRlcml6ZWRUeXBlICE9IG51bGwpIHsKIAkJCQlUeXBlQmluZGluZ1tdIGFyZ3VtZW50cyA9IHBh
cmFtZXRlcml6ZWRUeXBlLmFyZ3VtZW50czsKIAkJCQlJbmZlcmVuY2VWYXJpYWJsZVtdIGJldGFz
ID0gaW5mZXJlbmNlQ29udGV4dC5hZGRUeXBlVmFyaWFibGVTdWJzdGl0dXRpb25zKGFyZ3VtZW50
cyk7CkBAIC0zMTMsMTggKzMxMyw2IEBACiAJCXJldHVybiB0cnVlOwogCX0KIAotCXByaXZhdGUg
c3RhdGljIFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZyBwYXJhbWV0ZXJpemVkV2l0aFdpbGRjYXJk
KFR5cGVCaW5kaW5nIHJldHVyblR5cGUpIHsKLQkJaWYgKHJldHVyblR5cGUua2luZCgpICE9IEJp
bmRpbmcuUEFSQU1FVEVSSVpFRF9UWVBFKQotCQkJcmV0dXJuIG51bGw7Ci0JCVBhcmFtZXRlcml6
ZWRUeXBlQmluZGluZyBwYXJhbWV0ZXJpemVkVHlwZSA9IChQYXJhbWV0ZXJpemVkVHlwZUJpbmRp
bmcpIHJldHVyblR5cGU7Ci0JCVR5cGVCaW5kaW5nW10gYXJndW1lbnRzID0gcGFyYW1ldGVyaXpl
ZFR5cGUuYXJndW1lbnRzOwotCQlmb3IgKGludCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7
IGkrKykgewotCQkJaWYgKGFyZ3VtZW50c1tpXS5pc1dpbGRjYXJkKCkpCi0JCQkJcmV0dXJuIHBh
cmFtZXRlcml6ZWRUeXBlOwotCQl9Ci0JCXJldHVybiBudWxsOwotCX0KLQogCUNvbGxlY3Rpb24g
aW5wdXRWYXJpYWJsZXMoZmluYWwgSW5mZXJlbmNlQ29udGV4dDE4IGNvbnRleHQpIHsKIAkJLy8g
ZnJvbSAxOC41LjIuCiAJCWlmICh0aGlzLmxlZnQgaW5zdGFuY2VvZiBMYW1iZGFFeHByZXNzaW9u
KSB7CkBAIC0zMzMsNyArMzIxLDcgQEAKIAkJCX0KIAkJCWlmICh0aGlzLnJpZ2h0LmlzRnVuY3Rp
b25hbEludGVyZmFjZShjb250ZXh0LnNjb3BlKSkgewogCQkJCUxhbWJkYUV4cHJlc3Npb24gbGFt
YmRhID0gKExhbWJkYUV4cHJlc3Npb24pIHRoaXMubGVmdDsKLQkJCQlNZXRob2RCaW5kaW5nIHNh
bSA9IHRoaXMucmlnaHQuZ2V0U2luZ2xlQWJzdHJhY3RNZXRob2QoY29udGV4dC5zY29wZSk7IC8v
IFRPRE8gZGVyaXZlIHdpdGggdGFyZ2V0IHR5cGU/CisJCQkJTWV0aG9kQmluZGluZyBzYW0gPSB0
aGlzLnJpZ2h0LmdldFNpbmdsZUFic3RyYWN0TWV0aG9kKGNvbnRleHQuc2NvcGUsIHRydWUpOyAv
LyBUT0RPIGRlcml2ZSB3aXRoIHRhcmdldCB0eXBlPwogCQkJCWZpbmFsIFNldCB2YXJpYWJsZXMg
PSBuZXcgSGFzaFNldCgpOwogCQkJCWlmIChsYW1iZGEuYXJndW1lbnRzVHlwZUVsaWRlZCgpKSB7
CiAJCQkJCS8vIGkpCkBAIC0zNjUsNyArMzUzLDcgQEAKIAkJCQlyZXR1cm4gQ29sbGVjdGlvbnMu
c2luZ2xldG9uTGlzdCh0aGlzLnJpZ2h0KTsKIAkJCX0KIAkJCWlmICh0aGlzLnJpZ2h0LmlzRnVu
Y3Rpb25hbEludGVyZmFjZShjb250ZXh0LnNjb3BlKSAmJiAhdGhpcy5sZWZ0LmlzRXhhY3RNZXRo
b2RSZWZlcmVuY2UoKSkgewotCQkJCU1ldGhvZEJpbmRpbmcgc2FtID0gdGhpcy5yaWdodC5nZXRT
aW5nbGVBYnN0cmFjdE1ldGhvZChjb250ZXh0LnNjb3BlKTsKKwkJCQlNZXRob2RCaW5kaW5nIHNh
bSA9IHRoaXMucmlnaHQuZ2V0U2luZ2xlQWJzdHJhY3RNZXRob2QoY29udGV4dC5zY29wZSwgdHJ1
ZSk7CiAJCQkJZmluYWwgU2V0IHZhcmlhYmxlcyA9IG5ldyBIYXNoU2V0KCk7CiAJCQkJaW50IGxl
biA9IHNhbS5wYXJhbWV0ZXJzLmxlbmd0aDsKIAkJCQlmb3IgKGludCBpID0gMDsgaSA8IGxlbjsg
aSsrKSB7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVyZW5jZUNvbnRleHQxOC5qYXZh
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2xvb2t1cC9JbmZlcmVuY2VDb250ZXh0MTguamF2YQppbmRleCA4ZDkwYTRkLi4z
ZmY1MzFmIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVyZW5jZUNvbnRleHQxOC5qYXZh
CisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9sb29rdXAvSW5mZXJlbmNlQ29udGV4dDE4LmphdmEKQEAgLTI1LDYgKzI1
LDcgQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5DaGFyT3BlcmF0aW9u
OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuRXhwcmVzc2lv
bjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0Lkludm9jYXRp
b247CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5XaWxkY2Fy
ZDsKIAogLyoqCiAgKiBNYWluIGNsYXNzIGZvciBuZXcgdHlwZSBpbmZlcmVuY2UgYXMgcGVyIEpM
Uzggc2VjdCAxOC4KQEAgLTcyMyw2ICs3MjQsNzkgQEAKIAkJdGhpcy5wcm9ibGVtTWV0aG9kcy5h
ZGQocHJvYmxlbU1ldGhvZCk7CiAJfQogCisJcHVibGljIHN0YXRpYyBQYXJhbWV0ZXJpemVkVHlw
ZUJpbmRpbmcgcGFyYW1ldGVyaXplZFdpdGhXaWxkY2FyZChUeXBlQmluZGluZyByZXR1cm5UeXBl
KSB7CisJCWlmIChyZXR1cm5UeXBlID09IG51bGwgfHwgcmV0dXJuVHlwZS5raW5kKCkgIT0gQmlu
ZGluZy5QQVJBTUVURVJJWkVEX1RZUEUpCisJCQlyZXR1cm4gbnVsbDsKKwkJUGFyYW1ldGVyaXpl
ZFR5cGVCaW5kaW5nIHBhcmFtZXRlcml6ZWRUeXBlID0gKFBhcmFtZXRlcml6ZWRUeXBlQmluZGlu
ZykgcmV0dXJuVHlwZTsKKwkJVHlwZUJpbmRpbmdbXSBhcmd1bWVudHMgPSBwYXJhbWV0ZXJpemVk
VHlwZS5hcmd1bWVudHM7CisJCWZvciAoaW50IGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsg
aSsrKSB7CisJCQlpZiAoYXJndW1lbnRzW2ldLmlzV2lsZGNhcmQoKSkKKwkJCQlyZXR1cm4gcGFy
YW1ldGVyaXplZFR5cGU7CisJCX0KKwkJcmV0dXJuIG51bGw7CisJfQorCisJLyoqCisJICogQ3Jl
YXRlIGluaXRpYWwgYm91bmQgc2V0IGZvciAxOC41LjMgRnVuY3Rpb25hbCBJbnRlcmZhY2UgUGFy
YW1ldGVyaXphdGlvbiBJbmZlcmVuY2UKKwkgKiBAcGFyYW0gZnVuY3Rpb25hbEludGVyZmFjZSB0
aGUgZnVuY3Rpb25hbCBpbnRlcmZhY2UgRjxBMSwuLkFtPgorCSAqIEByZXR1cm4gdGhlIHBhcmFt
ZXRlciB0eXBlcyBRMS4uUWsgb2YgdGhlIGZ1bmN0aW9uIHR5cGUgb2YgdGhlIHR5cGUgRjzOsTEs
IC4uLiwgzrFtPiAKKwkgKi8KKwlwdWJsaWMgVHlwZUJpbmRpbmdbXSBjcmVhdGVCb3VuZHNGb3JG
dW5jdGlvbmFsSW50ZXJmYWNlUGFyYW1ldGVyaXphdGlvbkluZmVyZW5jZShQYXJhbWV0ZXJpemVk
VHlwZUJpbmRpbmcgZnVuY3Rpb25hbEludGVyZmFjZSkgeworCQl0aGlzLmN1cnJlbnRCb3VuZHMg
PSBuZXcgQm91bmRTZXQoKTsKKwkJVHlwZUJpbmRpbmdbXSBhID0gZnVuY3Rpb25hbEludGVyZmFj
ZS5hcmd1bWVudHM7CisJCUluZmVyZW5jZVZhcmlhYmxlW10gYWxwaGEgPSBhZGRJbml0aWFsVHlw
ZVZhcmlhYmxlU3Vic3RpdHV0aW9ucyhhKTsKKworCQlmb3IgKGludCBpID0gMDsgaSA8IGEubGVu
Z3RoOyBpKyspIHsKKwkJCVR5cGVCb3VuZCBib3VuZDsKKwkJCWlmIChhW2ldLmtpbmQoKSA9PSBC
aW5kaW5nLldJTERDQVJEX1RZUEUpIHsKKwkJCQlXaWxkY2FyZEJpbmRpbmcgd2lsZGNhcmQgPSAo
V2lsZGNhcmRCaW5kaW5nKSBhW2ldOworCQkJCXN3aXRjaCh3aWxkY2FyZC5ib3VuZEtpbmQpIHsK
KyAgICAJCQkJY2FzZSBXaWxkY2FyZC5FWFRFTkRTIDoKKyAgICAJCQkJCWJvdW5kID0gbmV3IFR5
cGVCb3VuZChhbHBoYVtpXSwgd2lsZGNhcmQuYm91bmQsIFJlZHVjdGlvblJlc3VsdC5TVUJUWVBF
KTsKKyAgICAJCQkJCWJyZWFrOworICAgIAkJCQljYXNlIFdpbGRjYXJkLlNVUEVSIDoKKyAgICAJ
CQkJCWJvdW5kID0gbmV3IFR5cGVCb3VuZChhbHBoYVtpXSwgd2lsZGNhcmQuYm91bmQsIFJlZHVj
dGlvblJlc3VsdC5TVVBFUlRZUEUpOworICAgIAkJCQkJYnJlYWs7CisgICAgCQkJCWNhc2UgV2ls
ZGNhcmQuVU5CT1VORCA6CisgICAgCQkJCQlib3VuZCA9IG5ldyBUeXBlQm91bmQoYWxwaGFbaV0s
IHRoaXMub2JqZWN0LCBSZWR1Y3Rpb25SZXN1bHQuU1VCVFlQRSk7CisgICAgCQkJCQlicmVhazsK
KyAgICAJCQkJZGVmYXVsdDoKKyAgICAJCQkJCWNvbnRpbnVlOyAvLyBjYW5ub3QKKwkJCQl9CisJ
CQl9IGVsc2UgeworCQkJCWJvdW5kID0gbmV3IFR5cGVCb3VuZChhbHBoYVtpXSwgYVtpXSwgUmVk
dWN0aW9uUmVzdWx0LlNBTUUpOworCQkJfQorCQkJdGhpcy5jdXJyZW50Qm91bmRzLmFkZEJvdW5k
KGJvdW5kKTsKKwkJfQorCQlUeXBlQmluZGluZyBmYWxwaGEgPSBzdWJzdGl0dXRlKGZ1bmN0aW9u
YWxJbnRlcmZhY2UpOworCQlyZXR1cm4gZmFscGhhLmdldFNpbmdsZUFic3RyYWN0TWV0aG9kKHRo
aXMuc2NvcGUsIHRydWUpLnBhcmFtZXRlcnM7CisJfQorCisJcHVibGljIGJvb2xlYW4gcmVkdWNl
V2l0aEVxdWFsaXR5Q29uc3RyYWludHMoVHlwZUJpbmRpbmdbXSBwLCBUeXBlQmluZGluZ1tdIHEp
IHsKKwkJZm9yIChpbnQgaSA9IDA7IGkgPCBwLmxlbmd0aDsgaSsrKSB7CisJCQl0cnkgeworCQkJ
CXRoaXMucmVkdWNlQW5kSW5jb3Jwb3JhdGUobmV3IENvbnN0cmFpbnRUeXBlRm9ybXVsYShwW2ld
LCBxW2ldLCBSZWR1Y3Rpb25SZXN1bHQuU0FNRSkpOworCQkJfSBjYXRjaCAoSW5mZXJlbmNlRmFp
bHVyZUV4Y2VwdGlvbiBlKSB7CisJCQkJcmV0dXJuIGZhbHNlOworCQkJfQorCQl9CisJCXJldHVy
biB0cnVlOworCX0KKworCXB1YmxpYyBUeXBlQmluZGluZ1tdIGdldEZ1bmN0aW9uSW50ZXJmYWNl
QXJndW1lbnRTb2x1dGlvbnMoVHlwZUJpbmRpbmdbXSBhKSB7CisJCWludCBtID0gYS5sZW5ndGg7
CisJCVR5cGVCaW5kaW5nW10gYXByaW1lID0gbmV3IFR5cGVCaW5kaW5nW21dOworCQlmb3IgKGlu
dCBpID0gMDsgaSA8IHRoaXMuaW5mZXJlbmNlVmFyaWFibGVzLmxlbmd0aDsgaSsrKSB7CisJCQlJ
bmZlcmVuY2VWYXJpYWJsZSBhbHBoYWkgPSB0aGlzLmluZmVyZW5jZVZhcmlhYmxlc1tpXTsKKwkJ
CVR5cGVCaW5kaW5nIHQgPSB0aGlzLmN1cnJlbnRCb3VuZHMuZ2V0SW5zdGFudGlhdGlvbihhbHBo
YWkpOworCQkJaWYgKHQgIT0gbnVsbCkKKwkJCQlhcHJpbWVbaV0gPSB0OworCQkJZWxzZQorCQkJ
CWFwcmltZVtpXSA9IGFbaV07CisJCX0KKwkJcmV0dXJuIGFwcmltZTsKKwl9CisKIAkvLyBJTlRF
UklNOiBpbmZyYXN0cnVjdHVyZSBmb3IgZGV0ZWN0aW5nIGZhaWx1cmVzIGNhdXNlZCBieSBzcGVj
aWZpYyBrbm93biBpbmNvbXBsZXRlbmVzczoKIAlwdWJsaWMgc3RhdGljIHZvaWQgbWlzc2luZ0lt
cGxlbWVudGF0aW9uKFN0cmluZyBtc2cpIHsKIAkJdGhyb3cgbmV3IFVuc3VwcG9ydGVkT3BlcmF0
aW9uRXhjZXB0aW9uKG1zZyk7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0ludGVyc2VjdGlv
bkNhc3RUeXBlQmluZGluZy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9JbnRlcnNlY3Rpb25DYXN0VHlw
ZUJpbmRpbmcuamF2YQppbmRleCA2NzdkMmQ4Li41Mjg4YzRjIDEwMDY0NAotLS0gYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
bG9va3VwL0ludGVyc2VjdGlvbkNhc3RUeXBlQmluZGluZy5qYXZhCisrKyBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29r
dXAvSW50ZXJzZWN0aW9uQ2FzdFR5cGVCaW5kaW5nLmphdmEKQEAgLTMyLDEyICszMiwxMiBAQAog
CQl9CiAJfQogCQotCXB1YmxpYyBNZXRob2RCaW5kaW5nIGdldFNpbmdsZUFic3RyYWN0TWV0aG9k
KFNjb3BlIHNjb3BlKSB7CisJcHVibGljIE1ldGhvZEJpbmRpbmcgZ2V0U2luZ2xlQWJzdHJhY3RN
ZXRob2QoU2NvcGUgc2NvcGUsIGJvb2xlYW4gcmVwbGFjZVdpbGRjYXJkcykgewogCQlpZiAodGhp
cy5zaW5nbGVBYnN0cmFjdE1ldGhvZCAhPSBudWxsKQogCQkJcmV0dXJuIHRoaXMuc2luZ2xlQWJz
dHJhY3RNZXRob2Q7CiAJCU1ldGhvZEJpbmRpbmcgc2FtID0gc2FtUHJvYmxlbUJpbmRpbmc7ICAv
LyBndWlsdHkgdW5sZXNzIHByb3ZlbiBpbm5vY2VudCAhCiAJCWZvciAoaW50IGkgPSAwOyBpIDwg
dGhpcy5sZW5ndGg7IGkrKykgewotCQkJTWV0aG9kQmluZGluZyBtZXRob2QgPSB0aGlzLmludGVy
c2VjdGluZ1R5cGVzW2ldLmdldFNpbmdsZUFic3RyYWN0TWV0aG9kKHNjb3BlKTsKKwkJCU1ldGhv
ZEJpbmRpbmcgbWV0aG9kID0gdGhpcy5pbnRlcnNlY3RpbmdUeXBlc1tpXS5nZXRTaW5nbGVBYnN0
cmFjdE1ldGhvZChzY29wZSwgcmVwbGFjZVdpbGRjYXJkcyk7CiAJCQlpZiAobWV0aG9kICE9IG51
bGwpIHsKIAkJCQlpZiAobWV0aG9kLmlzVmFsaWRCaW5kaW5nKCkpIHsKIAkJCQkJaWYgKHNhbS5p
c1ZhbGlkQmluZGluZygpKQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9QYXJhbWV0ZXJpemVk
VHlwZUJpbmRpbmcuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5n
LmphdmEKaW5kZXggZWUxZmJmMS4uNGFiNmNkOSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Q
YXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1BhcmFtZXRl
cml6ZWRUeXBlQmluZGluZy5qYXZhCkBAIC0xMzE1LDEyICsxMzE1LDEyIEBACiAJcHVibGljIEZp
ZWxkQmluZGluZ1tdIHVuUmVzb2x2ZWRGaWVsZHMoKSB7CiAJCXJldHVybiB0aGlzLmZpZWxkczsK
IAl9Ci0JcHVibGljIE1ldGhvZEJpbmRpbmcgZ2V0U2luZ2xlQWJzdHJhY3RNZXRob2QoZmluYWwg
U2NvcGUgc2NvcGUpIHsKKwlwdWJsaWMgTWV0aG9kQmluZGluZyBnZXRTaW5nbGVBYnN0cmFjdE1l
dGhvZChmaW5hbCBTY29wZSBzY29wZSwgYm9vbGVhbiByZXBsYWNlV2lsZGNhcmRzKSB7CiAJCWlm
ICh0aGlzLnNpbmdsZUFic3RyYWN0TWV0aG9kICE9IG51bGwpIHsKIAkJCXJldHVybiB0aGlzLnNp
bmdsZUFic3RyYWN0TWV0aG9kOwogCQl9CiAJCWZpbmFsIFJlZmVyZW5jZUJpbmRpbmcgZ2VuZXJp
Y1R5cGUgPSBnZW5lcmljVHlwZSgpOwotCQlNZXRob2RCaW5kaW5nIHRoZUFic3RyYWN0TWV0aG9k
ID0gZ2VuZXJpY1R5cGUuZ2V0U2luZ2xlQWJzdHJhY3RNZXRob2Qoc2NvcGUpOworCQlNZXRob2RC
aW5kaW5nIHRoZUFic3RyYWN0TWV0aG9kID0gZ2VuZXJpY1R5cGUuZ2V0U2luZ2xlQWJzdHJhY3RN
ZXRob2Qoc2NvcGUsIHRydWUpOwogCQlpZiAodGhlQWJzdHJhY3RNZXRob2QgPT0gbnVsbCB8fCAh
dGhlQWJzdHJhY3RNZXRob2QuaXNWYWxpZEJpbmRpbmcoKSkKIAkJCXJldHVybiB0aGlzLnNpbmds
ZUFic3RyYWN0TWV0aG9kID0gdGhlQWJzdHJhY3RNZXRob2Q7CiAJCQpAQCAtMTMzMSwyMyArMTMz
MSwyNiBAQAogCQkJVHlwZUJpbmRpbmcgdHlwZUFyZ3VtZW50ID0gdHlwZUFyZ3VtZW50c1tpXTsK
IAkJCXN3aXRjaCAodHlwZUFyZ3VtZW50LmtpbmQoKSkgewogCQkJCWNhc2UgQmluZGluZy5XSUxE
Q0FSRF9UWVBFIDoKLQkJCQkJV2lsZGNhcmRCaW5kaW5nIHdpbGRjYXJkID0gKFdpbGRjYXJkQmlu
ZGluZykgdHlwZUFyZ3VtZW50OwotCQkJCQlzd2l0Y2god2lsZGNhcmQuYm91bmRLaW5kKSB7Ci0J
ICAgIAkJCQljYXNlIFdpbGRjYXJkLkVYVEVORFMgOgotCSAgICAJCQkJY2FzZSBXaWxkY2FyZC5T
VVBFUiA6Ci0JICAgIAkJCQkJdHlwZXNbaV0gPSB3aWxkY2FyZC5ib3VuZDsKLQkgICAgCQkJCQli
cmVhazsKLQkgICAgCQkJCWNhc2UgV2lsZGNhcmQuVU5CT1VORCA6Ci0JICAgIAkJCQkJLy8gaWYg
UGkgaGFzIHVwcGVyIGJvdW5kIEJpIHRoYXQgbWVudGlvbnMgbm9uZSBvZiBQMS4uLlBuLCB0aGVu
IFRpID0gQmk7IG90aGVyd2lzZSwgVGkgPSBPYmplY3QKLQkgICAgCQkJCQlmaW5hbCBUeXBlQmlu
ZGluZyB1cHBlckJvdW5kID0gdHlwZVBhcmFtZXRlcnNbaV0uZmlyc3RCb3VuZDsKLQkJCQkJCQlp
ZiAodXBwZXJCb3VuZCA9PSBudWxsIHx8IHR5cGVQYXJhbWV0ZXJzTWVudGlvbmVkKHVwcGVyQm91
bmQpKSB7Ci0JICAgIAkJCQkJCXR5cGVzW2ldID0gc2NvcGUuZ2V0SmF2YUxhbmdPYmplY3QoKTsK
LQkgICAgCQkJCQl9IGVsc2UgewotCSAgICAJCQkJCQl0eXBlc1tpXSA9IHVwcGVyQm91bmQ7Ci0J
ICAgIAkJCQkJfQotCSAgICAJCQkJCWJyZWFrOworCQkJCQlpZiAocmVwbGFjZVdpbGRjYXJkcykg
eworCQkJCQkJV2lsZGNhcmRCaW5kaW5nIHdpbGRjYXJkID0gKFdpbGRjYXJkQmluZGluZykgdHlw
ZUFyZ3VtZW50OworCQkJCQkJc3dpdGNoKHdpbGRjYXJkLmJvdW5kS2luZCkgeworCQkgICAgCQkJ
CWNhc2UgV2lsZGNhcmQuRVhURU5EUyA6CisJCSAgICAJCQkJY2FzZSBXaWxkY2FyZC5TVVBFUiA6
CisJCSAgICAJCQkJCXR5cGVzW2ldID0gd2lsZGNhcmQuYm91bmQ7CisJCSAgICAJCQkJCWJyZWFr
OworCQkgICAgCQkJCWNhc2UgV2lsZGNhcmQuVU5CT1VORCA6CisJCSAgICAJCQkJCS8vIGlmIFBp
IGhhcyB1cHBlciBib3VuZCBCaSB0aGF0IG1lbnRpb25zIG5vbmUgb2YgUDEuLi5QbiwgdGhlbiBU
aSA9IEJpOyBvdGhlcndpc2UsIFRpID0gT2JqZWN0CisJCSAgICAJCQkJCWZpbmFsIFR5cGVCaW5k
aW5nIHVwcGVyQm91bmQgPSB0eXBlUGFyYW1ldGVyc1tpXS5maXJzdEJvdW5kOworCQkJCQkJCQlp
ZiAodXBwZXJCb3VuZCA9PSBudWxsIHx8IHR5cGVQYXJhbWV0ZXJzTWVudGlvbmVkKHVwcGVyQm91
bmQpKSB7CisJCSAgICAJCQkJCQl0eXBlc1tpXSA9IHNjb3BlLmdldEphdmFMYW5nT2JqZWN0KCk7
CisJCSAgICAJCQkJCX0gZWxzZSB7CisJCSAgICAJCQkJCQl0eXBlc1tpXSA9IHVwcGVyQm91bmQ7
CisJCSAgICAJCQkJCX0KKwkJICAgIAkJCQkJYnJlYWs7CisJCQkJCQl9CisJCQkJCQlicmVhazsK
IAkJCQkJfQotCQkJCQlicmVhazsKKwkJCQkJLy8kRkFMTC1USFJPVUdIJAogCQkJCWRlZmF1bHQg
OgogCQkJCQl0eXBlc1tpXSA9IHR5cGVBcmd1bWVudDsKIAkJCQkJYnJlYWs7CmRpZmYgLS1naXQg
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvbG9va3VwL1Jhd1R5cGVCaW5kaW5nLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Jhd1R5
cGVCaW5kaW5nLmphdmEKaW5kZXggMGZiZWE5Yi4uNmZhMzg1MyAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2xvb2t1cC9SYXdUeXBlQmluZGluZy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUmF3VHlwZUJp
bmRpbmcuamF2YQpAQCAtMTg4LDEyICsxODgsMTIgQEAKIAkJdGhpcy5hcmd1bWVudHMgPSB0eXBl
QXJndW1lbnRzOwogCX0KIAkKLQlwdWJsaWMgTWV0aG9kQmluZGluZyBnZXRTaW5nbGVBYnN0cmFj
dE1ldGhvZChTY29wZSBzY29wZSkgeworCXB1YmxpYyBNZXRob2RCaW5kaW5nIGdldFNpbmdsZUFi
c3RyYWN0TWV0aG9kKFNjb3BlIHNjb3BlLCBib29sZWFuIHJlcGxhY2VXaWxkY2FyZHMpIHsKIAkJ
aWYgKHRoaXMuc2luZ2xlQWJzdHJhY3RNZXRob2QgIT0gbnVsbCkgewogCQkJcmV0dXJuIHRoaXMu
c2luZ2xlQWJzdHJhY3RNZXRob2Q7CiAJCX0KIAkJZmluYWwgUmVmZXJlbmNlQmluZGluZyBnZW5l
cmljVHlwZSA9IGdlbmVyaWNUeXBlKCk7Ci0JCU1ldGhvZEJpbmRpbmcgdGhlQWJzdHJhY3RNZXRo
b2QgPSBnZW5lcmljVHlwZS5nZXRTaW5nbGVBYnN0cmFjdE1ldGhvZChzY29wZSk7CisJCU1ldGhv
ZEJpbmRpbmcgdGhlQWJzdHJhY3RNZXRob2QgPSBnZW5lcmljVHlwZS5nZXRTaW5nbGVBYnN0cmFj
dE1ldGhvZChzY29wZSwgcmVwbGFjZVdpbGRjYXJkcyk7CiAJCWlmICh0aGVBYnN0cmFjdE1ldGhv
ZCA9PSBudWxsIHx8ICF0aGVBYnN0cmFjdE1ldGhvZC5pc1ZhbGlkQmluZGluZygpKQogCQkJcmV0
dXJuIHRoaXMuc2luZ2xlQWJzdHJhY3RNZXRob2QgPSB0aGVBYnN0cmFjdE1ldGhvZDsKIAkJCmRp
ZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1JlZmVyZW5jZUJpbmRpbmcuamF2YSBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9s
b29rdXAvUmVmZXJlbmNlQmluZGluZy5qYXZhCmluZGV4IDc4MWNiMmEuLjFjOWU4Y2YgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9sb29rdXAvUmVmZXJlbmNlQmluZGluZy5qYXZhCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9s
b29rdXAvUmVmZXJlbmNlQmluZGluZy5qYXZhCkBAIC0xMzU4LDcgKzEzNTgsNyBAQAogCiBwdWJs
aWMgYm9vbGVhbiBpc0Z1bmN0aW9uYWxJbnRlcmZhY2UoU2NvcGUgc2NvcGUpIHsKIAlNZXRob2RC
aW5kaW5nIG1ldGhvZDsKLQlyZXR1cm4gaXNJbnRlcmZhY2UoKSAmJiAobWV0aG9kID0gZ2V0U2lu
Z2xlQWJzdHJhY3RNZXRob2Qoc2NvcGUpKSAhPSBudWxsICYmIG1ldGhvZC5pc1ZhbGlkQmluZGlu
ZygpOworCXJldHVybiBpc0ludGVyZmFjZSgpICYmIChtZXRob2QgPSBnZXRTaW5nbGVBYnN0cmFj
dE1ldGhvZChzY29wZSwgdHJ1ZSkpICE9IG51bGwgJiYgbWV0aG9kLmlzVmFsaWRCaW5kaW5nKCk7
CiB9CiAKIC8qKgpAQCAtMTg1MSw3ICsxODUxLDcgQEAKIAl9CiAJcmV0dXJuIGNvbnRyYWN0czsK
IH0KLXB1YmxpYyBNZXRob2RCaW5kaW5nIGdldFNpbmdsZUFic3RyYWN0TWV0aG9kKFNjb3BlIHNj
b3BlKSB7CitwdWJsaWMgTWV0aG9kQmluZGluZyBnZXRTaW5nbGVBYnN0cmFjdE1ldGhvZChTY29w
ZSBzY29wZSwgYm9vbGVhbiByZXBsYWNlV2lsZGNhcmRzKSB7CiAJCiAJaWYgKHRoaXMuc2luZ2xl
QWJzdHJhY3RNZXRob2QgIT0gbnVsbCkgewogCQlyZXR1cm4gdGhpcy5zaW5nbGVBYnN0cmFjdE1l
dGhvZDsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvVHlwZUJpbmRpbmcuamF2YSBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9sb29rdXAvVHlwZUJpbmRpbmcuamF2YQppbmRleCA1ZjBhMTdjLi4wY2QxZDhkIDEwMDY0NAot
LS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvbG9va3VwL1R5cGVCaW5kaW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9U
eXBlQmluZGluZy5qYXZhCkBAIC0xNDIzLDEwICsxNDIzLDExIEBACiAvKioKICAqIFJldHVybiB0
aGUgc2luZ2xlIGFic3RyYWN0IG1ldGhvZCBvZiBhIGZ1bmN0aW9uYWwgaW50ZXJmYWNlLCBvciBu
dWxsLCBpZiB0aGUgcmVjZWl2ZXIgaXMgbm90IGEgZnVuY3Rpb25hbCBpbnRlcmZhY2UgYXMgZGVm
aW5lZCBpbiBKTFMgOS44LgogICogQHBhcmFtIHNjb3BlIHNjb3BlCisgKiBAcGFyYW0gcmVwbGFj
ZVdpbGRjYXJkcyBUT0RPCiAgKiAgCiAgKiBAcmV0dXJuIFRoZSBzaW5nbGUgYWJzdHJhY3QgbWV0
aG9kIG9mIGEgZnVuY3Rpb25hbCBpbnRlcmZhY2UsIG9yIG51bGwsIGlmIHRoZSByZWNlaXZlciBp
cyBub3QgYSBmdW5jdGlvbmFsIGludGVyZmFjZS4gCiAgKi8KLXB1YmxpYyBNZXRob2RCaW5kaW5n
IGdldFNpbmdsZUFic3RyYWN0TWV0aG9kKFNjb3BlIHNjb3BlKSB7CitwdWJsaWMgTWV0aG9kQmlu
ZGluZyBnZXRTaW5nbGVBYnN0cmFjdE1ldGhvZChTY29wZSBzY29wZSwgYm9vbGVhbiByZXBsYWNl
V2lsZGNhcmRzKSB7CiAJcmV0dXJuIG51bGw7CiB9CiA=
</data>

          </attachment>
      

    </bug>

</bugzilla>