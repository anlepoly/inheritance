<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>367154</bug_id>
          
          <creation_ts>2011-12-20 03:37:00 -0500</creation_ts>
          <short_desc>[compiler][null]  Problem in propagating null defaults.</short_desc>
          <delta_ts>2012-01-23 04:22:32 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>3.8 M5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>amj87.iitr</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2042815</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-20 03:37:25 -0500</bug_when>
    <thetext>This is a follow up to bug 365836.

In the following program, I would expect to see an error, but don&apos;t.

import org.eclipse.jdt.annotation.NonNullByDefault;
import org.eclipse.jdt.annotation.Nullable;

@SuppressWarnings(&quot;unused&quot;)
public class X {
     
    public void foo(@Nullable String [] args) {
    	@NonNullByDefault
        class local {
            class Deeply {
                Object zoo() {
                    return null;  // No error here ??
                }
            }
        };
    }
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2042843</commentid>
    <comment_count>1</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-12-20 04:41:06 -0500</bug_when>
    <thetext>Is this case already captured in a bug?

@NonNullByDefault
public class ShowNPE2 {	 
	 public Object foo(Object o1, final boolean b) {
		 o1 = null;   // MISSING NPE warning
		System.out.println(o1.toString());   
		return null;  // Correct warning
		
	}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2042850</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-20 04:51:53 -0500</bug_when>
    <thetext>(In reply to comment #1)
&gt; Is this case already captured in a bug?

I don&apos;t think so. Stephan spawn another bug as needed. TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2043024</commentid>
    <comment_count>3</comment_count>
      <attachid>208628</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-20 10:38:37 -0500</bug_when>
    <thetext>Created attachment 208628
test &amp; fix

(In reply to comment #0)
&gt; This is a follow up to bug 365836.
&gt; 
&gt; In the following program, I would expect to see an error, but don&apos;t.

Thanks. When fixing bug 365836 I wasn&apos;t aware that types nested in local
types are also treated as local types. This implies that enclosingType
and enclosingMethod cannot easily be used to determine lexical scoping.

Obviously, the better strategy is to use scopes for this traversal.
The attached fix does this.
The tiny downside of this approach is that expressions like
scope.referenceContext.binding can yield nulls in various situations,
which all have to be checked.

Test&apos;s are currently running.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2043036</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-20 10:53:49 -0500</bug_when>
    <thetext>(In reply to comment #2)
&gt; (In reply to comment #1)
&gt; &gt; Is this case already captured in a bug?
&gt; 
&gt; I don&apos;t think so. Stephan spawn another bug as needed. TIA.


See bug 367203.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2043093</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-20 12:27:42 -0500</bug_when>
    <thetext>(In reply to comment #3)
&gt; Test&apos;s are currently running.

Aggressive version of all JDT/Core tests (ie., with null analysis
enabled by default) essentially pass 
(except for obvious deviation like in BatchCompilerTest).

Released for 3.8 M5 via commit 191f90d8b8e3d032d6a88890167c13d9311990d0</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2054246</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-23 04:22:32 -0500</bug_when>
    <thetext>Verified for 3.8 M5 using build id: I20120122-2000</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>208628</attachid>
            <date>2011-12-20 10:38:00 -0500</date>
            <delta_ts>2011-12-20 10:38:37 -0500</delta_ts>
            <desc>test &amp; fix</desc>
            <filename>Bug_367154.patch</filename>
            <type>text/plain</type>
            <size>6841</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxBbm5vdGF0aW9u
VGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbEFubm90YXRpb25U
ZXN0LmphdmEKaW5kZXggNjIyN2E4YS4uMzg1YjljMiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Nv
bXBpbGVyL3JlZ3Jlc3Npb24vTnVsbEFubm90YXRpb25UZXN0LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3Rz
L2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbEFubm90YXRpb25UZXN0LmphdmEKQEAgLTUzLDcgKzUz
LDcgQEAKIC8vIFN0YXRpYyBpbml0aWFsaXplciB0byBzcGVjaWZ5IHRlc3RzIHN1YnNldCB1c2lu
ZyBURVNUU18qIHN0YXRpYyB2YXJpYWJsZXMKIC8vIEFsbCBzcGVjaWZpZWQgdGVzdHMgd2hpY2gg
ZG8gbm90IGJlbG9uZyB0byB0aGUgY2xhc3MgYXJlIHNraXBwZWQuLi4KIHN0YXRpYyB7Ci0vLwkJ
VEVTVFNfTkFNRVMgPSBuZXcgU3RyaW5nW10geyAidGVzdF9ub25udWxsX3JldHVybl8wMTQiIH07
CisvLwkJVEVTVFNfTkFNRVMgPSBuZXcgU3RyaW5nW10geyAidGVzdF9kZWZhdWx0X251bGxuZXNz
XzAxNCIgfTsKIC8vCQlURVNUU19OVU1CRVJTID0gbmV3IGludFtdIHsgNTYxIH07CiAvLwkJVEVT
VFNfUkFOR0UgPSBuZXcgaW50W10geyAxLCAyMDQ5IH07CiB9CkBAIC0yNTIxLDYgKzI1MjEsNjYg
QEAKIAkJIlR5cGUgbWlzbWF0Y2g6IHJlcXVpcmVkIFwnQE5vbk51bGwgT2JqZWN0XCcgYnV0IHRo
ZSBwcm92aWRlZCB2YWx1ZSBpcyBudWxsXG4iICsgCiAJCSItLS0tLS0tLS0tXG4iKTsKIH0KKy8v
IGJ1ZyAzNjcxNTQgLSBbY29tcGlsZXJdW251bGxdIFByb2JsZW0gaW4gcHJvcGFnYXRpbmcgbnVs
bCBkZWZhdWx0cy4KK3B1YmxpYyB2b2lkIHRlc3RfZGVmYXVsdF9udWxsbmVzc18wMTQoKSB7CisJ
cnVuTmVnYXRpdmVUZXN0V2l0aExpYnMoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwK
KwkJCSJpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTm9uTnVsbEJ5RGVmYXVsdDtc
biIgKyAKKwkJCSJpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTnVsbGFibGU7XG4i
ICsgCisJCQkiXG4iICsgCisJCQkiQFN1cHByZXNzV2FybmluZ3MoXCJ1bnVzZWRcIilcbiIgKyAK
KwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsgCisJCQkiXG4iICsgCisJCQkiICAgIHB1YmxpYyB2
b2lkIGZvbyhATnVsbGFibGUgU3RyaW5nIFtdIGFyZ3MpIHtcbiIgKyAKKwkJCSIgICAgICAgIEBO
b25OdWxsQnlEZWZhdWx0XG4iICsgCisJCQkiICAgICAgICBjbGFzcyBsb2NhbCB7XG4iICsgCisJ
CQkiICAgICAgICAgICAgY2xhc3MgRGVlcGx5IHtcbiIgKyAKKwkJCSIgICAgICAgICAgICAgICAg
T2JqZWN0IHpvbygpIHtcbiIgKyAKKwkJCSIgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxs
OyAgLy8gZXhwZWN0IGVycm9yIGhlcmVcbiIgKyAKKwkJCSIgICAgICAgICAgICAgICAgfVxuIiAr
IAorCQkJIiAgICAgICAgICAgIH1cbiIgKyAKKwkJCSIgICAgICAgIH07XG4iICsgCisJCQkiICAg
IH1cbiIgKyAKKwkJCSJ9IgorCQl9LAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiMS4gRVJST1Ig
aW4gWC5qYXZhIChhdCBsaW5lIDEyKVxuIiArIAorCQkiCXJldHVybiBudWxsOyAgLy8gZXhwZWN0
IGVycm9yIGhlcmVcbiIgKyAKKwkJIgkgICAgICAgXl5eXlxuIiArIAorCQkiVHlwZSBtaXNtYXRj
aDogcmVxdWlyZWQgXCdATm9uTnVsbCBPYmplY3RcJyBidXQgdGhlIHByb3ZpZGVkIHZhbHVlIGlz
IG51bGxcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIpOworfQorLy8gYnVnIDM2NzE1NCAtIFtjb21w
aWxlcl1bbnVsbF0gUHJvYmxlbSBpbiBwcm9wYWdhdGluZyBudWxsIGRlZmF1bHRzLgorLy8gaW5p
dGlhbGl6ZXIgaW52b2x2ZWQKK3B1YmxpYyB2b2lkIHRlc3RfZGVmYXVsdF9udWxsbmVzc18wMTUo
KSB7CisJcnVuTmVnYXRpdmVUZXN0V2l0aExpYnMoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5q
YXZhIiwKKwkJCSJpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTm9uTnVsbEJ5RGVm
YXVsdDtcbiIgKyAKKwkJCSJpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTnVsbGFi
bGU7XG4iICsgCisJCQkiXG4iICsgCisJCQkiQFN1cHByZXNzV2FybmluZ3MoXCJ1bnVzZWRcIilc
biIgKyAKKwkJCSJATm9uTnVsbEJ5RGVmYXVsdFxuIiArIAorCQkJInB1YmxpYyBjbGFzcyBYIHtc
biIgKyAKKwkJCSIgICAge1xuIiArIAorCQkJIiAgICAgICAgY2xhc3MgbG9jYWwge1xuIiArIAor
CQkJIiAgICAgICAgICAgIGNsYXNzIERlZXBseSB7XG4iICsgCisJCQkiICAgICAgICAgICAgICAg
IE9iamVjdCB6b28oKSB7XG4iICsgCisJCQkiICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVs
bDsgIC8vIGV4cGVjdCBlcnJvciBoZXJlXG4iICsgCisJCQkiICAgICAgICAgICAgICAgIH1cbiIg
KyAKKwkJCSIgICAgICAgICAgICB9XG4iICsgCisJCQkiICAgICAgICB9O1xuIiArIAorCQkJIiAg
ICB9XG4iICsgCisJCQkifSIKKwkJfSwKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjEuIEVSUk9S
IGluIFguamF2YSAoYXQgbGluZSAxMSlcbiIgKyAKKwkJIglyZXR1cm4gbnVsbDsgIC8vIGV4cGVj
dCBlcnJvciBoZXJlXG4iICsgCisJCSIJICAgICAgIF5eXl5cbiIgKyAKKwkJIlR5cGUgbWlzbWF0
Y2g6IHJlcXVpcmVkIFwnQE5vbk51bGwgT2JqZWN0XCcgYnV0IHRoZSBwcm92aWRlZCB2YWx1ZSBp
cyBudWxsXG4iICsgCisJCSItLS0tLS0tLS0tXG4iKTsKK30KIC8vIGEgbm9ubnVsbCB2YXJpYWJs
ZSBpcyBkZXJlZmVyZW5jZWQgaW4gYSBsb29wCiBwdWJsaWMgdm9pZCB0ZXN0X25vbm51bGxfdmFy
X2luX2NvbnN0cm9sX3N0cnVjdHVyZV8xKCkgewogCU1hcCBjdXN0b21PcHRpb25zID0gZ2V0Q29t
cGlsZXJPcHRpb25zKCk7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1NvdXJjZVR5cGVCaW5k
aW5nLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1NvdXJjZVR5cGVCaW5kaW5nLmphdmEKaW5kZXggZTk2
YTFmOS4uYjVlYTBhNiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Tb3VyY2VUeXBlQmluZGlu
Zy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU291cmNlVHlwZUJpbmRpbmcuamF2YQpAQCAtMTYy
MCw3ICsxNjIwLDcgQEAKIAlpZiAobWV0aG9kRGVjbCAhPSBudWxsKSB7CiAJCWlmIChtZXRob2Qu
cGFyYW1ldGVycyAhPSBCaW5kaW5nLk5PX1BBUkFNRVRFUlMpCiAJCQltZXRob2REZWNsLmNyZWF0
ZUFyZ3VtZW50QmluZGluZ3MoKTsKLQkJVHlwZUJpbmRpbmcgYW5ub3RhdGlvbkJpbmRpbmcgPSBm
aW5kRGVmYXVsdE51bGxuZXNzKG1ldGhvZCwgbWV0aG9kRGVjbC5zY29wZS5lbnZpcm9ubWVudCgp
KTsKKwkJVHlwZUJpbmRpbmcgYW5ub3RhdGlvbkJpbmRpbmcgPSBmaW5kRGVmYXVsdE51bGxuZXNz
KG1ldGhvZERlY2wuc2NvcGUsIG1ldGhvZERlY2wuc2NvcGUuZW52aXJvbm1lbnQoKSk7CiAJCWlm
IChhbm5vdGF0aW9uQmluZGluZyAhPSBudWxsICYmIGFubm90YXRpb25CaW5kaW5nLmlkID09IFR5
cGVJZHMuVF9Db25maWd1cmVkQW5ub3RhdGlvbk5vbk51bGwpCiAJCQltZXRob2QuZmlsbEluRGVm
YXVsdE5vbk51bGxuZXNzKGFubm90YXRpb25CaW5kaW5nKTsKIAl9CkBAIC0xNjUyLDM1ICsxNjUy
LDQyIEBACiAgKiA8bGk+dGhlIHN5bnRoZXRpYyB0eXBlIHtAbGluayBSZWZlcmVuY2VCaW5kaW5n
I05VTExfVU5TUEVDSUZJRUR9IGlmIGEgZGVmYXVsdCBmcm9tIG91dGVyIHNjb3BlIGhhcyBiZWVu
IGNhbmNlbGVkPC9saT4KICAqIDxsaT5udWxsIGlmIG5vIGRlZmF1bHQgaGFzIGJlZW4gZGVmaW5l
ZDwvbGk+CiAgKiA8L3VsPgorICogQHBhcmFtIGN1cnJlbnRTY29wZSB3aGVyZSB0byBzdGFydCBz
ZWFyY2ggZm9yIGxleGljYWxseSBlbmNsb3NpbmcgZGVmYXVsdAorICogQHBhcmFtIGVudmlyb25t
ZW50IGdhdGV3YXkgdG8gb3B0aW9ucyBhbmQgY29uZmlndXJlZCBhbm5vdGF0aW9uIHR5cGVzCiAg
Ki8KLXByaXZhdGUgVHlwZUJpbmRpbmcgZmluZERlZmF1bHROdWxsbmVzcyhNZXRob2RCaW5kaW5n
IG1ldGhvZEJpbmRpbmcsIExvb2t1cEVudmlyb25tZW50IGVudmlyb25tZW50KSB7Citwcml2YXRl
IFR5cGVCaW5kaW5nIGZpbmREZWZhdWx0TnVsbG5lc3MoU2NvcGUgY3VycmVudFNjb3BlLCBMb29r
dXBFbnZpcm9ubWVudCBlbnZpcm9ubWVudCkgewogCS8vIGZpbmQgdGhlIGFwcGxpY2FibGUgZGVm
YXVsdCBpbnNpZGUtPm91dDoKIAotCS8vIG1ldGhvZAotCVR5cGVCaW5kaW5nIGFubm90YXRpb25C
aW5kaW5nID0gZW52aXJvbm1lbnQuZ2V0TnVsbEFubm90YXRpb25CaW5kaW5nRnJvbURlZmF1bHQo
bWV0aG9kQmluZGluZy50YWdCaXRzLCB0cnVlLypyZXNvbHZlKi8pOwotCWlmIChhbm5vdGF0aW9u
QmluZGluZyAhPSBudWxsKQotCQlyZXR1cm4gYW5ub3RhdGlvbkJpbmRpbmc7Ci0KLQkvLyB0eXBl
Ci0JUmVmZXJlbmNlQmluZGluZyB0eXBlID0gbWV0aG9kQmluZGluZy5kZWNsYXJpbmdDbGFzczsK
LQlSZWZlcmVuY2VCaW5kaW5nIGN1cnJlbnRUeXBlID0gdHlwZTsKLQl3aGlsZSAoY3VycmVudFR5
cGUgaW5zdGFuY2VvZiBTb3VyY2VUeXBlQmluZGluZykgewotCQlhbm5vdGF0aW9uQmluZGluZyA9
ICgoU291cmNlVHlwZUJpbmRpbmcpIGN1cnJlbnRUeXBlKS5nZXROdWxsbmVzc0RlZmF1bHRBbm5v
dGF0aW9uKCk7Ci0JCWlmIChhbm5vdGF0aW9uQmluZGluZyAhPSBudWxsKQotCQkJcmV0dXJuIGFu
bm90YXRpb25CaW5kaW5nOwotCQlpZiAoY3VycmVudFR5cGUuaXNMb2NhbFR5cGUoKSkgewotCQkJ
Ly8gaWYgZGlyZWN0IGVuY2xvc2luZyBpcyBhIG1ldGhvZCB0cmF2ZWwgdGhhdCB3YXk6Ci0JCQlN
ZXRob2RCaW5kaW5nIGVuY2xvc2luZ01ldGhvZCA9ICgoTG9jYWxUeXBlQmluZGluZyljdXJyZW50
VHlwZSkuZW5jbG9zaW5nTWV0aG9kOwotCQkJaWYgKGVuY2xvc2luZ01ldGhvZCAhPSBudWxsKQot
CQkJCXJldHVybiBmaW5kRGVmYXVsdE51bGxuZXNzKGVuY2xvc2luZ01ldGhvZCwgZW52aXJvbm1l
bnQpOworCVNvdXJjZVR5cGVCaW5kaW5nIGN1cnJlbnRUeXBlID0gbnVsbDsKKwlUeXBlQmluZGlu
ZyBhbm5vdGF0aW9uQmluZGluZzsKKwl3aGlsZSAoY3VycmVudFNjb3BlICE9IG51bGwpIHsKKwkJ
c3dpdGNoIChjdXJyZW50U2NvcGUua2luZCkgeworCQkJY2FzZSBTY29wZS5NRVRIT0RfU0NPUEU6
CisJCQkJQWJzdHJhY3RNZXRob2REZWNsYXJhdGlvbiByZWZlcmVuY2VNZXRob2QgPSAoKE1ldGhv
ZFNjb3BlKWN1cnJlbnRTY29wZSkucmVmZXJlbmNlTWV0aG9kKCk7CisJCQkJaWYgKHJlZmVyZW5j
ZU1ldGhvZCAhPSBudWxsICYmIHJlZmVyZW5jZU1ldGhvZC5iaW5kaW5nICE9IG51bGwpIHsKKwkJ
CQkJYW5ub3RhdGlvbkJpbmRpbmcgPSBlbnZpcm9ubWVudC5nZXROdWxsQW5ub3RhdGlvbkJpbmRp
bmdGcm9tRGVmYXVsdChyZWZlcmVuY2VNZXRob2QuYmluZGluZy50YWdCaXRzLCB0cnVlLypyZXNv
bHZlKi8pOworCQkJCQlpZiAoYW5ub3RhdGlvbkJpbmRpbmcgIT0gbnVsbCkKKwkJCQkJCXJldHVy
biBhbm5vdGF0aW9uQmluZGluZzsKKwkJCQl9CisJCQkJYnJlYWs7CisJCQljYXNlIFNjb3BlLkNM
QVNTX1NDT1BFOgorCQkJCWN1cnJlbnRUeXBlID0gKChDbGFzc1Njb3BlKWN1cnJlbnRTY29wZSku
cmVmZXJlbmNlQ29udGV4dC5iaW5kaW5nOworCQkJCWlmIChjdXJyZW50VHlwZSAhPSBudWxsKSB7
CisJCQkJCWFubm90YXRpb25CaW5kaW5nID0gY3VycmVudFR5cGUuZ2V0TnVsbG5lc3NEZWZhdWx0
QW5ub3RhdGlvbigpOworCQkJCQlpZiAoYW5ub3RhdGlvbkJpbmRpbmcgIT0gbnVsbCkKKwkJCQkJ
CXJldHVybiBhbm5vdGF0aW9uQmluZGluZzsKKwkJCQl9CisJCQkJYnJlYWs7CiAJCX0KLQkJY3Vy
cmVudFR5cGUgPSBjdXJyZW50VHlwZS5lbmNsb3NpbmdUeXBlKCk7CisJCWN1cnJlbnRTY29wZSA9
IGN1cnJlbnRTY29wZS5wYXJlbnQ7CiAJfQogCiAJLy8gcGFja2FnZQotCWFubm90YXRpb25CaW5k
aW5nID0gdHlwZS5nZXRQYWNrYWdlKCkuZ2V0TnVsbG5lc3NEZWZhdWx0QW5ub3RhdGlvbih0aGlz
LnNjb3BlKTsKLQlpZiAoYW5ub3RhdGlvbkJpbmRpbmcgIT0gbnVsbCkKLQkJcmV0dXJuIGFubm90
YXRpb25CaW5kaW5nOworCWlmIChjdXJyZW50VHlwZSAhPSBudWxsKSB7CisJCWFubm90YXRpb25C
aW5kaW5nID0gY3VycmVudFR5cGUuZ2V0UGFja2FnZSgpLmdldE51bGxuZXNzRGVmYXVsdEFubm90
YXRpb24odGhpcy5zY29wZSk7CisJCWlmIChhbm5vdGF0aW9uQmluZGluZyAhPSBudWxsKQorCQkJ
cmV0dXJuIGFubm90YXRpb25CaW5kaW5nOworCX0KIAogCS8vIGdsb2JhbAogCWxvbmcgZGVmYXVs
dE51bGxuZXNzID0gZW52aXJvbm1lbnQuZ2xvYmFsT3B0aW9ucy5kZWZhdWx0Tm9uTnVsbG5lc3M7
Cg==
</data>

          </attachment>
      

    </bug>

</bugzilla>