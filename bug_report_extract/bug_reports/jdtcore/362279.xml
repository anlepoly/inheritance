<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>362279</bug_id>
          
          <creation_ts>2011-10-28 04:23:00 -0400</creation_ts>
          <short_desc>ecj vs. javac differ for automatic boxing of implicitly converted types</short_desc>
          <delta_ts>2012-02-16 23:25:01 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>3.8 M4</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Nico">nicos-eclipse-bugs</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>pwebster</cc>
    
    <cc>remy.suen</cc>
    
    <cc>romandru</cc>
    
    <cc>satyam.kandula</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2018129</commentid>
    <comment_count>0</comment_count>
    <who name="Nico">nicos-eclipse-bugs</who>
    <bug_when>2011-10-28 04:23:29 -0400</bug_when>
    <thetext>Build Identifier: 20110916-0149

The following compiles in eclipse, but not in javac:

Integer i = &apos;a&apos;;

Tested with javac 1.6.0_27 and 1.7.0

Reproducible: Always

Steps to Reproduce:
1. Write the code in eclipse
2. Fail to complile it in javac</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2018132</commentid>
    <comment_count>1</comment_count>
    <who name="Nico">nicos-eclipse-bugs</who>
    <bug_when>2011-10-28 04:26:09 -0400</bug_when>
    <thetext>Also see this Stackoverflow thread for more details from people who know more
about this than me:

http://stackoverflow.com/q/7918134/623612</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2018164</commentid>
    <comment_count>2</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-10-28 05:19:16 -0400</bug_when>
    <thetext>This is a bug. 

JLS chapter 5.2 http://java.sun.com/docs/books/jls/third_edition/html/conversions.html#5.2
says:

Assignment conversion occurs when the value of an expression is assigned (15.26) to a variable: the type of the expression must be converted to the type of the variable. Assignment contexts allow the use of one of the following:
an identity conversion (5.1.1)
1.a widening primitive conversion (5.1.2)
2.a widening reference conversion (5.1.5)
3.a boxing conversion (5.1.7) optionally followed by a widening reference conversion
4.an unboxing conversion (5.1.8) optionally followed by a widening primitive conversion.

In given example, 2 occurs followed by 3. This shouldnt be allowed.

Note that this should be allowed:
Integer i = (int)&apos;a&apos;;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2020530</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-03 00:58:46 -0400</bug_when>
    <thetext>Will consider for this 3.8 M4.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2027123</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-16 04:30:31 -0500</bug_when>
    <thetext>(In reply to comment #2)
&gt; This is a bug. 
&gt; 
&gt; JLS chapter 5.2
&gt; http://java.sun.com/docs/books/jls/third_edition/html/conversions.html#5.2
&gt; says:
&gt; 
&gt; Assignment conversion occurs when the value of an expression is assigned
&gt; (15.26) to a variable: the type of the expression must be converted to the
&gt; type of the variable. Assignment contexts allow the use of one of the
&gt; following:
&gt; an identity conversion (5.1.1)
&gt; 1.a widening primitive conversion (5.1.2)
&gt; 2.a widening reference conversion (5.1.5)
&gt; 3.a boxing conversion (5.1.7) optionally followed by a widening reference
&gt; conversion
&gt; 4.an unboxing conversion (5.1.8) optionally followed by a widening primitive
&gt; conversion.
&gt; 
&gt; In given example, 2 occurs followed by 3. This shouldnt be allowed.

There is some confusion in the numbering/ordering. It appears we apply
a widening primitive conversion, followed by a boxing conversion.

Under investigation.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2027127</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-16 05:13:48 -0500</bug_when>
    <thetext> Here is an expanded test case:

public class X  {
	Integer f = &apos;a&apos;; // Field declaration.
	public Integer main() {
		Integer i = &apos;a&apos;; // local declaration with initialization.
		i = &apos;a&apos;; // assignment
        Integer [] ia = new Integer [] { &apos;a&apos; }; // array initializer.
        switch (i) {
            case &apos;a&apos; :   // case statement
        }
		return &apos;a&apos;; // return statement.
	}
}

javac reports 6 errors, while eclipse compiles this code.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2027128</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-16 05:22:35 -0500</bug_when>
    <thetext>isConstantValueOfTypeAssignableToType call from org.eclipse.jdt.internal.compiler.ast.Statement.isBoxingCompatible(TypeBinding, TypeBinding, Expression, Scope) looks bogus - compare with every other call
to isConstantValueOfTypeAssignableToType.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2027138</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-16 07:32:17 -0500</bug_when>
    <thetext>Actually problems stems from misapplication of the &quot;narrowing primitive conversion
followed by a boxing conversion&quot; rules of 5.2 reproduced below:

In addition, if the expression is a constant expression (15.28) of type byte,
short, char or int :
. A narrowing primitive conversion may be used if the type of the variable is
byte, short, or char, and the value of the constant expression is representable
in the type of the variable.
. A narrowing primitive conversion followed by a boxing conversion may be
used if the type of the variable is :
 Byte and the value of the constant expression is representable in the type
byte.
 Short and the value of the constant expression is representable in the type
short.
 Character and the value of the constant expression is representable in the
type char.

Integer is not one of the target types for which this combo conversion is
defined and permissible.

Patch under test.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2027142</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-16 08:22:05 -0500</bug_when>
    <thetext>This is a long standing problem that dates back to the earliest days of
autoboxing support. This commit 9c357e8e5c2796babe39d59e34a125e96b5dcee2
7 years ago introduced the problem.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2027235</commentid>
    <comment_count>9</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-16 10:22:22 -0500</bug_when>
    <thetext>Fix and tests released on 3.8 stream for M4 via commit 9d0a82ef5a22888c642513ca181ce9549bbdb17a.

No plans to backport this as this is a long standing bug and
not a regression.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2035696</commentid>
    <comment_count>10</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-12-05 09:27:19 -0500</bug_when>
    <thetext>Verified for 3.8M4 using build I20111202-0800</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2067253</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-02-16 23:25:01 -0500</bug_when>
    <thetext>*** Bug 371834 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>