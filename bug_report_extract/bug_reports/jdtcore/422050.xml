<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>422050</bug_id>
          
          <creation_ts>2013-11-19 06:51:00 -0500</creation_ts>
          <short_desc>[1.8][compiler] Overloaded method call with poly-conditional expression rejected by the compiler</short_desc>
          <delta_ts>2013-11-19 07:54:10 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>400871</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>jarthana</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2331773</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-11-19 06:51:23 -0500</bug_when>
    <thetext>BETA_JAVA8: The following program triggers an ambiguity.

// --
interface I { 
	int foo(); 
}
interface J { 
	double foo(); 
}
public class X {
	static int foo(I i) {
		return 0;
	}
	static int foo(J j) {
		return 1;
	}
	public static void main(String argv[]) {
		System.out.println(foo (() -&gt; true ? 0 : 1));
	}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2331795</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-11-19 07:34:31 -0500</bug_when>
    <thetext>Silly mistake with a trivial fix. Subtyping relationship between two types
is best determined with TypeBinding.isCompatibleWith rather than using
TypeBinding.findSupertypeOriginatingFrom as the latter does not work with
relationship between primitive types described by 4.10.1.

Fix under test.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2331806</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-11-19 07:54:10 -0500</bug_when>
    <thetext>Fix and tests released here:
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=e71c12a24430281e16e762ec1f4388b25978109a</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>