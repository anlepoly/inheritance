<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>418537</bug_id>
          
          <creation_ts>2013-10-02 13:36:00 -0400</creation_ts>
          <short_desc>[1.8][null] Fix null type annotation analysis for poly conditional expressions</short_desc>
          <delta_ts>2014-02-21 07:00:36 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>jarthana</cc>
    
    <cc>sarika.sinha</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2313548</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-02 13:36:36 -0400</bug_when>
    <thetext>We have gone back and forth with a few different attempts at this, but no
satisfactory solution so far.

NTAT:_testConditional2 is the disabled test.

I would recommend we explore an option that does not modify the routines
invoked by scope.lowerUpperBound and keep all machinery to support this
outside if possible.

-- We don&apos;t have an issue if types are ==
-- We likely don&apos;t have an issue if lowerUpperBound returns an intersection
type as is (is this true ?)
-- We have an issue when the disparately annotated types collapse into one
of the constituents.

Perhaps we can write a method ConditionalExpression#lowerUpperBound that
would call scope.scope.lowerUpperBound and trap the case where the latter
returns a single type and come up with a solution that would reannotate 
appropriately. This would leave the JLS routines untouched. I think some
incarnations of this may have existed earlier and I may have pruned it
believing a simpler solution could be come up with - sorry if this is the
case.

We need to see if the same issue rears it heads with multi catch blocks.
Jay, please write an annotation processor that would query the type of
a catch parameter - I believe local variables annotations are exposed.

We want to see what the binding that corresponds to the UTC contains
when the constituent type references are equally type annotated and
unequally type annotated.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2315753</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-10-08 12:34:50 -0400</bug_when>
    <thetext>I did have an &quot;external&quot; solution for re-applying annotations after annotation-unaware substitution. After you opted for the deep route for substitution (which meanwhile I&apos;m convinced to be the right approach) I&apos;m still a bit puzzled why &amp; how lub computation should go a different road. Specifically, when computing the lub for two parameterized types with different shapes, then the &quot;external&quot; solution will be hard to get right, I&apos;m afraid.

With
  class MyStringList implements List&lt;@NonNull String&gt; { ... }
what&apos;s the return&apos;s type in
  List&lt;@Nullable String&gt; test(MyStringList l1, List&lt;@Nullable String&gt; l2) {
     return someCondition ? l1 : l2;
  }
?

If we first compute an annotation-unaware lub as List&lt;String&gt; how do we blend the annotations from such disparate locations? Looking just at the two constituents MyStringList and List&lt;@Nullable String&gt; we&apos;re likely to loose the @NonNull from the super interface. We&apos;d have to start asking findSuperTypeOriginatingFrom for another round of analysis, then descend into type details, mh, may be doable after all, but brings its own kind of complexity ...

Anyway, right now this is getting postponed in favour of the new type inference.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2315760</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-08 12:56:52 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #1)

&gt; Anyway, right now this is getting postponed in favour of the new type
&gt; inference.

+1

Or should I say +100 :)

Stephan, admittedly, you have a better grasp of the problem space than I do. 
When this is taken up, I suggest you spend a bounded period of time (say a 
couple of days or so). If no satisfactory solution presents itself, then we 
can either (a) duplicate the routines involved and create an alternate path 
in the presence of null analysis or (b) just say no need for being paranoid
and go forward with the needed modifications and do due diligence via 
code reviews, good coverage tests etc - either is fine with me.

Not sure if I detect a note of frustration: I am not dogmatic about this and
don&apos;t want this to be a frustrating demand on you either ! Obviously this 
feature enjoys even if relatively small, a _very_ dedicated following looking 
at the CR/ER traffic and so deserves all the support.

BTW, just a thought: I wonder what it would mean to use a suitably renamed
IntersectionCastTypeBinding as a wrapper for a set of types that can be
passed around - don&apos;t know yet the full ramifications of integrating this
into the scheme of things.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2315964</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-09 00:21:49 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #1)

&gt; After you opted for the deep route for
&gt; substitution (which meanwhile I&apos;m convinced to be the right approach) I&apos;m
&gt; still a bit puzzled why &amp; how lub computation should go a different road.

For completeness:

The design choice with substitution was because I felt that it was directly
implied by the specification and also because I expected that the substitution
would be expected by annotation processors. Documenting here that the latter
assumption turned out NOT to be the case. As a matter of fact, javax.lang.model
provides no way to query the DeclaredType of a variable element. The javadoc
on javax.lang.model.element.Element.asType() clearly spells out that it is
the generic type that is returned.

For lub computations, they should never get exposed to an annotation processor
since they occur inside method bodies (except for UTR which BTW, I haven&apos;t
yet found a way to expose to annotation processor. The javadoc on javax.lang.model.element.Element.getEnclosedElements() says method elements
don&apos;t enclose anything presently.)

Per earlier comment, if after a bounded period of time exploring solutions,
we decide to take the same road for lub: let us by all means do.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2315965</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-09 00:23:38 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #3)
&gt; Documenting here that the latter
&gt; assumption turned out NOT to be the case. As a matter of fact,
&gt; javax.lang.model
&gt; provides no way to query the DeclaredType of a variable element. The javadoc
&gt; on javax.lang.model.element.Element.asType() clearly spells out that it is
&gt; the generic type that is returned.

org.eclipse.jdt.compiler.apt.tests.processors.elements.Java8ElementProcessor.testTypeAnnotations8() is the relevant test that shows this behavior.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2317781</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-14 07:30:41 -0400</bug_when>
    <thetext>One plausible course of action is to come up with a new abstraction
IntersectionTypeBinding that would subsume the INTERSECTION_TYPE part
of WildcardBinding and all of IntersectionCastTypeBinding and integrate
that into compatibleWith, equivalentTo, Scope.substitute, Substitution.substitute
etc.

An intersection type is not a wildcard - is it ? It is a wildcard
only to the extent of being a type that is &quot;unknown&quot; to be a single
type. I don&apos;t know why the present choice of modelling it as a wildcard
that parameterizes the artificial LUB_GENERIC type was resorted to.

This could be a manageable bit of work - looking at the references to INTERSECTION_TYPE (~50) and isIntersectionType() (~5) that could leave
us with better/cleaner abstractions overall and also serve its purpose
for null annotations in conditional expressions.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2360342</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-07 12:41:47 -0500</bug_when>
    <thetext>Stephan, this problem has become a NOP with http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=a6f21a01110fe95a43760ec08fc8cc1e27e1c4bc

I have enabled the test that stood disabled in NullTypeAnnotationTests.

On the flip side, there are 4 tests failing in NullAnnotationTest, a quick
glance tells me that these are (a) improvements (b) due to the syntactic analysis
not being hooked into the new code I added in CE.analyzeCode - I wasn&apos;t
totally sure of what flowcontext and flowinfo were the most appropriate
to use for each arm of the conditional.

I have disabled these tests: 

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=2ce334f1fc80cd6da653117c6c0cdf8c6f25ae81

Please study/fix the code changes in CE.analyzeCode, test changes in NTAT,
amend suitably, reenable, release and resolve. TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2360609</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-02-08 16:20:42 -0500</bug_when>
    <thetext>I agree that some of the new error messages look better. For the remaining failures I had to invent a location that would know about all relevant information:
- the individual inferred null statuses from both branches
- for assignments the lhs variable, else the full target type (with annots)

Done by making ifTrueNullStatus/ifFalseNullStatus fields of CE. Three locations now drill into the branches of a CE (each method has specific information to check against):
- NullAnnotationMatching.checkAssignment()
- Statement.analyseOneArgument18()
- Statement.checkAgainstNullTypeAnnotation()

This should cover all relevant situations.

Released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=1beaef02926dace59f07acb73879fd00f7c0b3eb</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2366622</commentid>
    <comment_count>8</comment_count>
    <who name="Sarika Sinha">sarika.sinha</who>
    <bug_when>2014-02-21 05:11:12 -0500</bug_when>
    <thetext>Verified as working for Eclipse + Java 8 RC1 using Kepler SR2(RC4) +   
Eclipse Java Development Tools Patch for Java 8 Support (BETA)	
1.0.0.v20140220-2054</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>