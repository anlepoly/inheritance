<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>433586</bug_id>
          
          <creation_ts>2014-04-27 07:12:00 -0400</creation_ts>
          <short_desc>[1.8][null] Converting &lt;? super T&gt; to &lt;T&gt; with method reference causes unchecked conversion warning</short_desc>
          <delta_ts>2014-04-30 19:41:00 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 8</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.4 M7</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Timo Kinnunen">timo.kinnunen</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>jarthana</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2393561</commentid>
    <comment_count>0</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-04-27 07:12:38 -0400</bug_when>
    <thetext>This used to work earlier without warnings:

package nullwarnings;
import java.util.function.Consumer;
public class NullConversionWarning&lt;T&gt; {

	public Consumer&lt;T&gt; peek2(Consumer&lt;? super T&gt; action) {
		// Null type safety: parameter 1 provided via
		// method descriptor Consumer&lt;T&gt;.accept(T) needs
		// unchecked conversion to conform to &apos;capture#of ? super T&apos;
		Consumer&lt;T&gt; action2 = action::accept;
		return action2;
	}
}

Using Eclipse SDK Version: Luna (4.4) Build id: I20140422-0800 and JDT Core built from HEAD yesterday, I think.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2393562</commentid>
    <comment_count>1</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-04-27 07:23:11 -0400</bug_when>
    <thetext>Another example with 2 warnings:

	private void asd(Consumer&lt;? super T&gt; action, T t) {
	  Consumer&lt;T&gt; action2 = t2 -&gt; action.accept(t2);
	  action.accept(t);
	  action2.accept(t);
  }</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2393606</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-04-27 15:43:32 -0400</bug_when>
    <thetext>Before bug 430150 we were too lenient when checking nullness against a free type variable.

I&apos;ll investigate what we can do for 4.4.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2393670</commentid>
    <comment_count>3</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-04-27 21:53:24 -0400</bug_when>
    <thetext>This case feels weird to me. I understand that nullness (and other!) checking can be implemented as hierarchies of types with and without type annotations, and that&apos;s in theory sound. But in this case I&apos;m not concerned with these other hierarchies in general (or nullness in particular), I&apos;m trying to tighten the allowed bounds of one implementation of a functional interface. And still, the warning raises the question: is what I&apos;m doing sound after all? Then again, how could it not be sound, as I&apos;m providing more restricted types to something that is a more permissive recipient of types? But then again again, is that true for the hierarchies that I&apos;m not considering (or which haven&apos;t been written yet)?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2393671</commentid>
    <comment_count>4</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-04-27 22:06:40 -0400</bug_when>
    <thetext>Hmm, maybe the point I&apos;m missing is that these additional type hierarchies shouldn&apos;t remove any edges or nodes in the base type hierarchy, they can only add additional nodes and edges to them. That should result in stable hierarchies.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2394881</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-04-29 11:04:27 -0400</bug_when>
    <thetext>I have a fix under test.

During null checking we need to recognize one more situation 
(T is a TypeVariable):
- required type: capture of ? super T
- provided type: T

In this case the required type cannot have stricter null annotations than the provided type, so all is well by definition :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2394940</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-04-29 11:59:04 -0400</bug_when>
    <thetext>Test and fix released for 4.4 M7 via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=9f431ffaeff623f7af807c93e73853c08afe96f4

Change affects only code paths of null type annotation analysis.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2395166</commentid>
    <comment_count>7</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-04-30 01:55:28 -0400</bug_when>
    <thetext>Verified for 4.4 M7 using I20140429-2000 build</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2395678</commentid>
    <comment_count>8</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-04-30 18:10:02 -0400</bug_when>
    <thetext>Most warning have gone, but this case still shows a warning:

@FunctionalInterface
public interface ExFunction&lt;T, R, E extends Exception&gt; {
	R apply(T t1) throws E;

	default &lt;V&gt;  ExFunction&lt;V, R, E&gt; compose(ExFunction&lt;? super V, ? extends T, E&gt; before) {
		Objects.requireNonNull(before);
		//warning on before.apply(v):
		//Null type safety (type annotations): The expression of type &apos;capture#of ? extends T&apos; needs unchecked conversion to conform to &apos;T&apos;
		return (V v) -&gt; apply(before.apply(v));
	}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2395694</commentid>
    <comment_count>9</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-04-30 19:41:00 -0400</bug_when>
    <thetext>(In reply to Timo Kinnunen from comment #8)

Moved to its own bug: bug 433906</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>