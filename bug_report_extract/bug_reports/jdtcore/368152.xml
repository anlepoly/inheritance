<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>368152</bug_id>
          
          <creation_ts>2012-01-09 08:10:00 -0500</creation_ts>
          <short_desc>ConcurrentModificationException on startup in ExternalFoldersManager.createPendingFolders</short_desc>
          <delta_ts>2012-04-27 11:26:58 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.7.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>3.8 M6</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Martin Oberhuber">martin.oberhuber</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>jarthana</cc>
    
    <cc>Joerg.Thoennes</cc>
    
    <cc>markus_keller</cc>
    
    <cc>remy.suen</cc>
    
    <cc>satyam.kandula</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="47868"
          type_id="1"
          status="+"
          setter="satyam.kandula"
    />
    <flag name="review"
          id="48112"
          type_id="1"
          status="?"
          setter="jarthana"
          requestee="stephan.herrmann"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2047752</commentid>
    <comment_count>0</comment_count>
    <who name="Martin Oberhuber">martin.oberhuber</who>
    <bug_when>2012-01-09 08:10:20 -0500</bug_when>
    <thetext>Build ID: 3.7.1 M20110909-1335

When launching Eclipse with an existing workspace, I got an error dialog

   An internal error occurred during &quot;Initialize Java Tooling&quot;

and following backtrace was listed in the error log:

java.util.ConcurrentModificationException
	at java.util.HashMap$HashIterator.nextEntry(HashMap.java:793)
	at java.util.HashMap$KeyIterator.next(HashMap.java:828)
	at org.eclipse.jdt.internal.core.ExternalFoldersManager.createPendingFolders(ExternalFoldersManager.java:171)
	at org.eclipse.jdt.core.JavaCore.initializeAfterLoad(JavaCore.java:3614)
	at org.eclipse.jdt.internal.ui.InitializeAfterLoadJob$RealJob.run(InitializeAfterLoadJob.java:36)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2047768</commentid>
    <comment_count>1</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-01-09 08:54:07 -0500</bug_when>
    <thetext>Looks like it&apos;s unlikely to be the same thread that is modifying while iterating. Access to pendingFolders might have to be synchronized. I will work on it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2047800</commentid>
    <comment_count>2</comment_count>
      <attachid>209211</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-01-09 09:52:21 -0500</bug_when>
    <thetext>Created attachment 209211
Proposed fix

One of the possible scenario that could have caused this is, classpath getting recomputed, thus forcing a folder being removed or added, while initializAfterLoad is running.

Martin, can you tell me if something changed between eclipse sessions that may have kicked off classpath recomputation, such as like workspace being moved etc.? 

The patch attached should be good enough for the concurrent modifications issues.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2047802</commentid>
    <comment_count>3</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-01-09 09:53:13 -0500</bug_when>
    <thetext>Satyam, could you spare some time to review this. Please note that I have not added any tests.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2047907</commentid>
    <comment_count>4</comment_count>
    <who name="Martin Oberhuber">martin.oberhuber</who>
    <bug_when>2012-01-09 12:06:30 -0500</bug_when>
    <thetext>(In reply to comment #2)
&gt; Martin, can you tell me if something changed between eclipse sessions that may
&gt; have kicked off classpath recomputation, such as like workspace being moved
&gt; etc.? 

Hm... I don&apos;t think so. I definitely 
  - didn&apos;t move my workspace, 
  - didn&apos;t update any files in my workspace since the last launch
and I&apos;m pretty sure I also didn&apos;t change any configuration (like installed host or target platform or JRE).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2049327</commentid>
    <comment_count>5</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-01-12 03:51:13 -0500</bug_when>
    <thetext>(In reply to comment #3)
&gt; Satyam, could you spare some time to review this. Please note that I have not
&gt; added any tests.
The changes look good.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2053309</commentid>
    <comment_count>6</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-01-20 00:11:08 -0500</bug_when>
    <thetext>Thanks, Satyam, I have released the fix in master.

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=de08ae3ac42ace8070739ebb7715adc6c4ed1304</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2053747</commentid>
    <comment_count>7</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2012-01-20 13:54:26 -0500</bug_when>
    <thetext>This caused a deadlock, see bug 369251. Please revert for M5.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2053845</commentid>
    <comment_count>8</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-01-20 15:45:18 -0500</bug_when>
    <thetext>From locking at the stack dump in bug 369251 and this bug&apos;s patch I suppose instead of synchronizing the entire loop we should just fetch a copy of pendingFolders for iteration, wipe the original set and release the lock before starting the actual loop, no?

Alternatively, we would have to acquire all necessary scheduling rules before entering the synchronized block, but that would be more difficult to implement (if it&apos;s possible) because the resources are created only inside the loop AFAICS.

Unfortunately, I wouldn&apos;t immediately know how to test such a change.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2053854</commentid>
    <comment_count>9</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-01-20 15:53:32 -0500</bug_when>
    <thetext>Illustration of comment 8:

	Iterator iterator;
	synchronized (this.pendingFolders) {
		iterator = new ArrayList(this.pendingFolders).iterator();
		this.pendingFolders.clear();
	}
	while (iterator.hasNext()) {
		Object folderPath = iterator.next();
		try {
			createLinkFolder((IPath) folderPath, false, externalFoldersProject, monitor);
		} catch (CoreException e) {
			Util.log(e, &quot;Error while creating a link for external folder :&quot; + folderPath); //$NON-NLS-1$
		}
	}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2053958</commentid>
    <comment_count>10</comment_count>
      <attachid>209869</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-01-20 22:47:54 -0500</bug_when>
    <thetext>Created attachment 209869
Proposed patch

This patch is to revert the previous change and add a new schedule rule while creating the pending folders from JavaCore. The result of this is as follows:

1. Obviously, bug 369251 and the bug reported here get fixed.
2. There is one more scenario where the race condition (similar to the one reported here) might occur - from the JavaProject#addToResult(). However, it happens only in when the user tries to change the classpath when the pending folders get created. 

Keeping the pendingFolders as a synchronizedSet or introducing a schedule rule in the thread executing addToResult() could have handled it (2), but there are two reasons for not doing that:
   a) It&apos;s a rare scenario and is different than what is reported here. We can create a new bug for that.
   b) The JavaProject@addToResult() is often associated with a UI thread, which means it can&apos;t be blocked, which can happen with either of the above mentioned approaches.

Stephan, can you please review this patch? Please also note that I have moved the addFolder and createPendingFolders calls together in JavaCore for simplicity sake. This shouldn&apos;t affect the earlier fix made in that area.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2053959</commentid>
    <comment_count>11</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-01-20 22:56:45 -0500</bug_when>
    <thetext>(In reply to comment #10)
&gt; Created attachment 209869 [details]
&gt; Proposed patch

Another important side effect that I forgot to mention is this: if there is any job that obtains a lock on workspace root, then initializeAfterLoadJob must wait for that job and vice versa. However, the lock itself is obtained for a very short time and not during the entire job. This would address the many concurrent thread issues we faced in this area in the past in a better way.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2053960</commentid>
    <comment_count>12</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-21 00:25:59 -0500</bug_when>
    <thetext>(In reply to comment #10)
&gt; Created attachment 209869 [details]
&gt; Proposed patch
&gt; 
&gt; This patch is to revert the previous change and add a new schedule rule while
&gt; creating the pending folders from JavaCore.

Thanks for putting together an alternate patch quickly.

Just so this is an informed/considered decision, a few questions regarding
the problem outlined in comment#0:

- Is this a ship stopper for M5 ? Or is it something
  that can wait ?
- When did the root cause for the faulty behavior get introduced ?
  Is it a regression, if so which fix caused it ? when ?
  What is the earliest version that shows the faulty behavior ?
- Is there a crisp scenario description for triggering the bug ?
- Are there any workarounds (to prevent triggering) ? How reasonable 
  are they ?
- How likely is the bug&apos;s manifestation (per educated guess) ?

If the comment#0  problem is not due to recent behavior change
it looks like a no-brainer decision to me to opt for a roll back
of the problematic fix and consider the alternate patch for inclusion
in early M6.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2053962</commentid>
    <comment_count>13</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-21 00:29:48 -0500</bug_when>
    <thetext>(In reply to comment #12)

&gt; If the comment#0  problem is not due to recent behavior change
&gt; it looks like a no-brainer decision to me to opt for a roll back
&gt; of the problematic fix and consider the alternate patch for inclusion
&gt; in early M6.

In any case, if we don&apos;t have clear agreement on the new fix
by the time of the Sunday warm up build, we should revert the
problematic fix so as not to block partner project&apos;s testing.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2053968</commentid>
    <comment_count>14</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-01-21 00:47:12 -0500</bug_when>
    <thetext>(In reply to comment #12)
&gt; - Is this a ship stopper for M5 ? Or is it something
&gt;   that can wait ?
    The bug itself is not a show-stopper
&gt; - When did the root cause for the faulty behavior get introduced ?
&gt;   Is it a regression, if so which fix caused it ? when ?
&gt;   What is the earliest version that shows the faulty behavior ?

    The code causing the bug was introduced as part of the fix to bug 320618, which was released in 3.7.

&gt; - Is there a crisp scenario description for triggering the bug ?
&gt; - Are there any workarounds (to prevent triggering) ? How reasonable 
&gt;   are they ?
&gt; - How likely is the bug&apos;s manifestation (per educated guess) ?

    It&apos;s a timing issue and not always reproducible. To reproduce one may have to suspend thread and such. One of the workarounds I can think of is closing and opening the projects again. The bug is likely to manifest when working with large workspace, esp. when something has changed in the workspace between sessions, something like bug 369251, comment #0.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2053975</commentid>
    <comment_count>15</comment_count>
      <attachid>209871</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-01-21 01:15:35 -0500</bug_when>
    <thetext>Created attachment 209871
Updated patch

I have split the previous patch into two parts:

1. Reverting the changes made in the first page; I have already released this under bug 369251 just so that HEAD is clean.
2. This patch, an alternate fix to the bug reported here. Stephan, please review this patch. TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2053989</commentid>
    <comment_count>16</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-21 06:37:28 -0500</bug_when>
    <thetext>(In reply to comment #14)


&gt;     The code causing the bug was introduced as part of the fix to bug 320618,
&gt; which was released in 3.7.

For the record, that was for 3.7 M2. So this bug has been lying
dormant for 16+ months. That makes me think if there is any question
at all around the new fix as it is being reviewed, it can safely
be moved out to early M6.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2054017</commentid>
    <comment_count>17</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-01-21 11:27:52 -0500</bug_when>
    <thetext>(In reply to comment #10)
&gt; Created attachment 209869 [details]
&gt; Proposed patch
&gt; ...
&gt; Stephan, can you please review this patch? 

Honestly, *if this is for M5* I don&apos;t see how I could quickly establish sufficient confidence that the latest patch solves the original problem without causing new issues. Nothing I can judge by a quick look at the code. I&apos;d definitely want to test the patch back to back with the previous state, but for this I would need to reproduce the bug at least *sometimes* in the debugger.

If, however, reverting the previous patch is good enough for M5 and the latest patch shall go into M6 I&apos;ll do my best to collaborate with Jay in understanding how to trigger the problem and based on that understanding: how to fix.

As an aside: should we succeed in deterministically forcing the bug using breakpoints in the debugger, I should be able to create a regression test: I recently made experiments how OT/J can force a given execution order of concurrent executions. Even if that&apos;s not directly deployable to the SDK build, we could run such regression tests locally at certain points in time.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2054020</commentid>
    <comment_count>18</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2012-01-21 11:57:44 -0500</bug_when>
    <thetext>Let&apos;s not hurry here.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2058493</commentid>
    <comment_count>19</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-31 05:01:28 -0500</bug_when>
    <thetext>(In reply to comment #17)
&gt; (In reply to comment #10)
&gt; &gt; Created attachment 209869 [details]
&gt; &gt; Proposed patch
&gt; &gt; ...
&gt; &gt; Stephan, can you please review this patch? 
&gt; 
&gt; Honestly, *if this is for M5* I don&apos;t see how I could quickly establish
&gt; sufficient confidence that the latest patch solves the original problem without
&gt; causing new issues.

Stephan, could you look at this now for inclusion in early M6 ? Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2060401</commentid>
    <comment_count>20</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-02-03 01:40:48 -0500</bug_when>
    <thetext>Satyam, could you also review this please ? TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2061859</commentid>
    <comment_count>21</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-02-07 02:16:53 -0500</bug_when>
    <thetext>Satyam and Stephan, I know you are guys are very busy, sorry for nagging
you on this: We should try and get this in early in the mile stone period,
we have already seen two I builds go by. Seeking your indulgence, TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2062737</commentid>
    <comment_count>22</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-02-08 09:39:15 -0500</bug_when>
    <thetext>(In reply to comment #10)
&gt;    b) The JavaProject@addToResult() is often associated with a UI thread, which
&gt; means it can&apos;t be blocked, which can happen with either of the above mentioned
&gt; approaches.
I see that JavaProject@addToResult() is called from JavaProject#resolveClasspath(). Looking at the call stack, I believe this can be also called from IJavaProject#getResolvedClasspath(...).

I think the logic could be improved to lock only if they are some folders that really need to be created. IMO, this will the most prevalent case.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2065409</commentid>
    <comment_count>23</comment_count>
      <attachid>210971</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-02-14 07:47:35 -0500</bug_when>
    <thetext>Created attachment 210971
new fix

(In reply to comment #22)
&gt; I see that JavaProject@addToResult() is called from
&gt; JavaProject#resolveClasspath(). Looking at the call stack, I believe this can
&gt; be also called from IJavaProject#getResolvedClasspath(...).

Satyam, I can&apos;t confirm that plugins cannot request for classpath resolution before JavaCore#initializeAfterLoad(), even though I haven&apos;t found such a scenario. So, for hypothetical scenarios, I admit we have to consider the other scenario also. The new fix does the following:

1. Obviously the new schedule rule introduced in the previous patch is not mandatory. It could be useful, but not in the context of this bug esp. with the following two changes.
2. The elements of the pendingFolders map are copied to a temporary array and processed and the map is cleared right after copying the elements into the array. This is what Stephan had suggested in his earlier comment.
3. The createLinkFolder calls have been moved out of the synchronized block to keep away the deadlock issue.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2065895</commentid>
    <comment_count>24</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-02-15 01:39:21 -0500</bug_when>
    <thetext>(In reply to comment #23)
&gt; Created attachment 210971 [details]
&gt; new fix
This patch looks good for me. It will fix the current scenario and will also not run into a deadlock.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2066019</commentid>
    <comment_count>25</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-02-15 06:26:24 -0500</bug_when>
    <thetext>(In reply to comment #24)
&gt; This patch looks good for me. It will fix the current scenario and will also
&gt; not run into a deadlock.

Stephan, if you have time, take a look at this patch. I know you are busy and Satyam has already reviewed the patch. Besides the patch is a straight forward one. So, if you don&apos;t have time, that&apos;s okay.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2067242</commentid>
    <comment_count>26</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-02-16 22:54:06 -0500</bug_when>
    <thetext>Thanks, Satyam. Released the fix here: 

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=e4d4ff5013f9df9fd57cdef7bafc039c1cd3f062</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2067247</commentid>
    <comment_count>27</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-02-16 23:11:19 -0500</bug_when>
    <thetext>(In reply to comment #25)
&gt; (In reply to comment #24)
&gt; &gt; This patch looks good for me. It will fix the current scenario and will also
&gt; &gt; not run into a deadlock.
&gt; 
&gt; Stephan, if you have time, take a look at this patch. 

Stephan, despite the resolution you are welcome to look the patch
if you manage to find time for it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2080251</commentid>
    <comment_count>28</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-03-14 06:53:40 -0400</bug_when>
    <thetext>Verified for 3.8M6 using build I20120312-1300</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2099614</commentid>
    <comment_count>29</comment_count>
    <who name="Jrg Thnnes">Joerg.Thoennes</who>
    <bug_when>2012-04-27 10:09:27 -0400</bug_when>
    <thetext>Hello, is this also fixed for 3.7.2?

Currently, I get this error on every startup and have no idea to workaround it.
Does it do any harm?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2099681</commentid>
    <comment_count>30</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2012-04-27 11:26:58 -0400</bug_when>
    <thetext>(In reply to comment #29)
&gt; Hello, is this also fixed for 3.7.2?

Take a look at the &apos;target milestone&apos; to get the answer.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>209211</attachid>
            <date>2012-01-09 09:52:00 -0500</date>
            <delta_ts>2012-01-20 22:47:54 -0500</delta_ts>
            <desc>Proposed fix</desc>
            <filename>bug368152.patch</filename>
            <type>text/plain</type>
            <size>1620</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb3JlL0V4dGVybmFsRm9sZGVyc01hbmFnZXIuamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0V4dGVybmFsRm9sZGVy
c01hbmFnZXIuamF2YQppbmRleCBkNjE1Njk4Li4xOTJkMDk3IDEwMDY0NAotLS0gYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9FeHRlcm5h
bEZvbGRlcnNNYW5hZ2VyLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvRXh0ZXJuYWxGb2xkZXJzTWFuYWdlci5qYXZhCkBA
IC0xMjIsNyArMTIyLDcgQEAKIAkJfSB3aGlsZSAocmVzdWx0LmV4aXN0cygpKTsKIAkJaWYgKHNj
aGVkdWxlRm9yQ3JlYXRpb24pIHsKIAkJCWlmICh0aGlzLnBlbmRpbmdGb2xkZXJzID09IG51bGwp
Ci0JCQkJdGhpcy5wZW5kaW5nRm9sZGVycyA9IG5ldyBIYXNoU2V0KCk7CisJCQkJdGhpcy5wZW5k
aW5nRm9sZGVycyA9IENvbGxlY3Rpb25zLnN5bmNocm9uaXplZFNldChuZXcgSGFzaFNldCgpKTsK
IAkJCXRoaXMucGVuZGluZ0ZvbGRlcnMuYWRkKGV4dGVybmFsRm9sZGVyUGF0aCk7CiAJCX0KIAkJ
a25vd25Gb2xkZXJzLnB1dChleHRlcm5hbEZvbGRlclBhdGgsIHJlc3VsdCk7CkBAIC0xNjYsMTMg
KzE2NiwxNSBAQAogCQljYXRjaChDb3JlRXhjZXB0aW9uIGUpIHsKIAkJCXRocm93IG5ldyBKYXZh
TW9kZWxFeGNlcHRpb24oZSk7CiAJCX0KLQkJSXRlcmF0b3IgaXRlcmF0b3IgPSB0aGlzLnBlbmRp
bmdGb2xkZXJzLml0ZXJhdG9yKCk7Ci0JCXdoaWxlIChpdGVyYXRvci5oYXNOZXh0KCkpIHsKLQkJ
CU9iamVjdCBmb2xkZXJQYXRoID0gaXRlcmF0b3IubmV4dCgpOwotCQkJdHJ5IHsKLQkJCQljcmVh
dGVMaW5rRm9sZGVyKChJUGF0aCkgZm9sZGVyUGF0aCwgZmFsc2UsIGV4dGVybmFsRm9sZGVyc1By
b2plY3QsIG1vbml0b3IpOwotCQkJfSBjYXRjaCAoQ29yZUV4Y2VwdGlvbiBlKSB7Ci0JCQkJVXRp
bC5sb2coZSwgIkVycm9yIHdoaWxlIGNyZWF0aW5nIGEgbGluayBmb3IgZXh0ZXJuYWwgZm9sZGVy
IDoiICsgZm9sZGVyUGF0aCk7IC8vJE5PTi1OTFMtMSQKKwkJc3luY2hyb25pemVkICh0aGlzLnBl
bmRpbmdGb2xkZXJzKSB7CisJCQlJdGVyYXRvciBpdGVyYXRvciA9IHRoaXMucGVuZGluZ0ZvbGRl
cnMuaXRlcmF0b3IoKTsKKwkJCXdoaWxlIChpdGVyYXRvci5oYXNOZXh0KCkpIHsKKwkJCQlPYmpl
Y3QgZm9sZGVyUGF0aCA9IGl0ZXJhdG9yLm5leHQoKTsKKwkJCQl0cnkgeworCQkJCQljcmVhdGVM
aW5rRm9sZGVyKChJUGF0aCkgZm9sZGVyUGF0aCwgZmFsc2UsIGV4dGVybmFsRm9sZGVyc1Byb2pl
Y3QsIG1vbml0b3IpOworCQkJCX0gY2F0Y2ggKENvcmVFeGNlcHRpb24gZSkgeworCQkJCQlVdGls
LmxvZyhlLCAiRXJyb3Igd2hpbGUgY3JlYXRpbmcgYSBsaW5rIGZvciBleHRlcm5hbCBmb2xkZXIg
OiIgKyBmb2xkZXJQYXRoKTsgLy8kTk9OLU5MUy0xJAorCQkJCX0KIAkJCX0KIAkJfQogCQl0aGlz
LnBlbmRpbmdGb2xkZXJzLmNsZWFyKCk7
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>209869</attachid>
            <date>2012-01-20 22:47:00 -0500</date>
            <delta_ts>2012-01-21 01:15:35 -0500</delta_ts>
            <desc>Proposed patch</desc>
            <filename>368152_1.patch</filename>
            <type>text/plain</type>
            <size>4326</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9j
b3JlL0phdmFDb3JlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBz
ZS9qZHQvY29yZS9KYXZhQ29yZS5qYXZhCmluZGV4IDhiMmU4OTYuLjkxYzc2NDMgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9jb3JlL0phdmFD
b3JlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0
L2NvcmUvSmF2YUNvcmUuamF2YQpAQCAtMTAxLDYgKzEwMSw3IEBACiBpbXBvcnQgamF2YS51dGls
Lkhhc2hNYXA7CiBpbXBvcnQgamF2YS51dGlsLkhhc2hTZXQ7CiBpbXBvcnQgamF2YS51dGlsLkhh
c2h0YWJsZTsKK2ltcG9ydCBqYXZhLnV0aWwuSXRlcmF0b3I7CiBpbXBvcnQgamF2YS51dGlsLk1h
cDsKIAogaW1wb3J0IG9yZy5lY2xpcHNlLmNvcmUucnVudGltZS5Db3JlRXhjZXB0aW9uOwpAQCAt
MTE2LDYgKzExNyw3IEBACiBpbXBvcnQgb3JnLmVjbGlwc2UuY29yZS5ydW50aW1lLlF1YWxpZmll
ZE5hbWU7CiBpbXBvcnQgb3JnLmVjbGlwc2UuY29yZS5ydW50aW1lLlN1YlByb2dyZXNzTW9uaXRv
cjsKIGltcG9ydCBvcmcuZWNsaXBzZS5jb3JlLnJ1bnRpbWUuam9icy5JU2NoZWR1bGluZ1J1bGU7
CitpbXBvcnQgb3JnLmVjbGlwc2UuY29yZS5ydW50aW1lLmpvYnMuSm9iOwogCiBpbXBvcnQgb3Jn
LmVjbGlwc2UuY29yZS5yZXNvdXJjZXMuSUNvbnRhaW5lcjsKIGltcG9ydCBvcmcuZWNsaXBzZS5j
b3JlLnJlc291cmNlcy5JRmlsZTsKQEAgLTM4ODgsNiArMzg5MCw3IEBACiAJCQkJbW9uaXRvci5z
dWJUYXNrKE1lc3NhZ2VzLmphdmFtb2RlbF9yZXNldHRpbmdfc291cmNlX2F0dGFjaG1lbnRfcHJv
cGVydGllcyk7CiAJCQlmaW5hbCBJSmF2YVByb2plY3RbXSBwcm9qZWN0cyA9IG1hbmFnZXIuZ2V0
SmF2YU1vZGVsKCkuZ2V0SmF2YVByb2plY3RzKCk7CiAJCQlIYXNoU2V0IHZpc2l0ZWRQYXRocyA9
IG5ldyBIYXNoU2V0KCk7CisJCQlIYXNoU2V0IGV4dGVybmFsUGF0aHMgPSBuZXcgSGFzaFNldCgp
OwogCQkJRXh0ZXJuYWxGb2xkZXJzTWFuYWdlciBleHRlcm5hbEZvbGRlcnNNYW5hZ2VyID0gSmF2
YU1vZGVsTWFuYWdlci5nZXRFeHRlcm5hbE1hbmFnZXIoKTsKIAkJCWZvciAoaW50IGkgPSAwLCBs
ZW5ndGggPSBwcm9qZWN0cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgewogCQkJCUphdmFQcm9q
ZWN0IGphdmFQcm9qZWN0ID0gKEphdmFQcm9qZWN0KSBwcm9qZWN0c1tpXTsKQEAgLTM5MTEsMTkg
KzM5MTQsMzIgQEAKIAkJCQkJCWlmIChlbnRyeS5nZXRFbnRyeUtpbmQoKSA9PSBJQ2xhc3NwYXRo
RW50cnkuQ1BFX0xJQlJBUlkpIHsKIAkJCQkJCQlJUGF0aCBlbnRyeVBhdGggPSBlbnRyeS5nZXRQ
YXRoKCk7CiAJCQkJCQkJaWYgKEV4dGVybmFsRm9sZGVyc01hbmFnZXIuaXNFeHRlcm5hbEZvbGRl
clBhdGgoZW50cnlQYXRoKSAmJiBleHRlcm5hbEZvbGRlcnNNYW5hZ2VyLmdldEZvbGRlcihlbnRy
eVBhdGgpID09IG51bGwpIHsKLQkJCQkJCQkJZXh0ZXJuYWxGb2xkZXJzTWFuYWdlci5hZGRGb2xk
ZXIoZW50cnlQYXRoLCB0cnVlKTsKKwkJCQkJCQkJZXh0ZXJuYWxQYXRocy5hZGQoZW50cnlQYXRo
KTsKIAkJCQkJCQl9CiAJCQkJCQl9CiAJCQkJCX0KIAkJCQl9CiAJCQl9CisJCQkKKwkJCUlTY2hl
ZHVsaW5nUnVsZSBydWxlID0gbnVsbDsKIAkJCXRyeSB7CisJCQkJLy8gVXNlIGEgc2NoZWR1bGUg
cnVsZSB0byBhdm9pZCBhIHJhY2UgY29uZGl0aW9uIChodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcv
YnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzY5MjUxKQorCQkJCXJ1bGUgPSBSZXNvdXJjZXNQbHVnaW4u
Z2V0V29ya3NwYWNlKCkuZ2V0UnVsZUZhY3RvcnkoKS5tb2RpZnlSdWxlKGV4dGVybmFsRm9sZGVy
c01hbmFnZXIuZ2V0RXh0ZXJuYWxGb2xkZXJzUHJvamVjdCgpKTsKKwkJCQlKb2IuZ2V0Sm9iTWFu
YWdlcigpLmJlZ2luUnVsZShydWxlLCBtb25pdG9yKTsKKwkJCQkKKwkJCQlJdGVyYXRvciBleHRl
cm5hbFBhdGhJdGVyID0gZXh0ZXJuYWxQYXRocy5pdGVyYXRvcigpOworCQkJCXdoaWxlIChleHRl
cm5hbFBhdGhJdGVyLmhhc05leHQoKSkgeworCQkJCQlleHRlcm5hbEZvbGRlcnNNYW5hZ2VyLmFk
ZEZvbGRlcigoSVBhdGgpIGV4dGVybmFsUGF0aEl0ZXIubmV4dCgpLCB0cnVlKTsKKwkJCQl9CiAJ
CQkJZXh0ZXJuYWxGb2xkZXJzTWFuYWdlci5jcmVhdGVQZW5kaW5nRm9sZGVycyhtb25pdG9yKTsK
LQkJCX0KLQkJCWNhdGNoKEphdmFNb2RlbEV4Y2VwdGlvbiBqbWUpIHsKKwkJCQkKKwkJCX0gY2F0
Y2ggKEphdmFNb2RlbEV4Y2VwdGlvbiBqbWUpIHsKIAkJCQkvLyBDcmVhdGlvbiBvZiBleHRlcm5h
bCBmb2xkZXIgcHJvamVjdCBmYWlsZWQuIExvZyBpdCBhbmQgY29udGludWU7CiAJCQkJVXRpbC5s
b2coam1lLCAiRXJyb3Igd2hpbGUgcHJvY2Vzc2luZyBleHRlcm5hbCBmb2xkZXJzIik7IC8vJE5P
Ti1OTFMtMSQKKwkJCX0gZmluYWxseSB7CisJCQkJSm9iLmdldEpvYk1hbmFnZXIoKS5lbmRSdWxl
KHJ1bGUpOwogCQkJfQorCQkJCiAJCQkvLyBpbml0aWFsaXplIGRlbHRhIHN0YXRlCiAJCQlpZiAo
bW9uaXRvciAhPSBudWxsKQogCQkJCW1vbml0b3Iuc3ViVGFzayhNZXNzYWdlcy5qYXZhbW9kZWxf
aW5pdGlhbGl6aW5nX2RlbHRhX3N0YXRlKTsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0V4dGVybmFsRm9sZGVyc01h
bmFnZXIuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb3JlL0V4dGVybmFsRm9sZGVyc01hbmFnZXIuamF2YQppbmRleCAxOTJkMDk3Li5k
NjE1Njk4IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29yZS9FeHRlcm5hbEZvbGRlcnNNYW5hZ2VyLmphdmEKKysrIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvRXh0
ZXJuYWxGb2xkZXJzTWFuYWdlci5qYXZhCkBAIC0xMjIsNyArMTIyLDcgQEAKIAkJfSB3aGlsZSAo
cmVzdWx0LmV4aXN0cygpKTsKIAkJaWYgKHNjaGVkdWxlRm9yQ3JlYXRpb24pIHsKIAkJCWlmICh0
aGlzLnBlbmRpbmdGb2xkZXJzID09IG51bGwpCi0JCQkJdGhpcy5wZW5kaW5nRm9sZGVycyA9IENv
bGxlY3Rpb25zLnN5bmNocm9uaXplZFNldChuZXcgSGFzaFNldCgpKTsKKwkJCQl0aGlzLnBlbmRp
bmdGb2xkZXJzID0gbmV3IEhhc2hTZXQoKTsKIAkJCXRoaXMucGVuZGluZ0ZvbGRlcnMuYWRkKGV4
dGVybmFsRm9sZGVyUGF0aCk7CiAJCX0KIAkJa25vd25Gb2xkZXJzLnB1dChleHRlcm5hbEZvbGRl
clBhdGgsIHJlc3VsdCk7CkBAIC0xNjYsMTUgKzE2NiwxMyBAQAogCQljYXRjaChDb3JlRXhjZXB0
aW9uIGUpIHsKIAkJCXRocm93IG5ldyBKYXZhTW9kZWxFeGNlcHRpb24oZSk7CiAJCX0KLQkJc3lu
Y2hyb25pemVkICh0aGlzLnBlbmRpbmdGb2xkZXJzKSB7Ci0JCQlJdGVyYXRvciBpdGVyYXRvciA9
IHRoaXMucGVuZGluZ0ZvbGRlcnMuaXRlcmF0b3IoKTsKLQkJCXdoaWxlIChpdGVyYXRvci5oYXNO
ZXh0KCkpIHsKLQkJCQlPYmplY3QgZm9sZGVyUGF0aCA9IGl0ZXJhdG9yLm5leHQoKTsKLQkJCQl0
cnkgewotCQkJCQljcmVhdGVMaW5rRm9sZGVyKChJUGF0aCkgZm9sZGVyUGF0aCwgZmFsc2UsIGV4
dGVybmFsRm9sZGVyc1Byb2plY3QsIG1vbml0b3IpOwotCQkJCX0gY2F0Y2ggKENvcmVFeGNlcHRp
b24gZSkgewotCQkJCQlVdGlsLmxvZyhlLCAiRXJyb3Igd2hpbGUgY3JlYXRpbmcgYSBsaW5rIGZv
ciBleHRlcm5hbCBmb2xkZXIgOiIgKyBmb2xkZXJQYXRoKTsgLy8kTk9OLU5MUy0xJAotCQkJCX0K
KwkJSXRlcmF0b3IgaXRlcmF0b3IgPSB0aGlzLnBlbmRpbmdGb2xkZXJzLml0ZXJhdG9yKCk7CisJ
CXdoaWxlIChpdGVyYXRvci5oYXNOZXh0KCkpIHsKKwkJCU9iamVjdCBmb2xkZXJQYXRoID0gaXRl
cmF0b3IubmV4dCgpOworCQkJdHJ5IHsKKwkJCQljcmVhdGVMaW5rRm9sZGVyKChJUGF0aCkgZm9s
ZGVyUGF0aCwgZmFsc2UsIGV4dGVybmFsRm9sZGVyc1Byb2plY3QsIG1vbml0b3IpOworCQkJfSBj
YXRjaCAoQ29yZUV4Y2VwdGlvbiBlKSB7CisJCQkJVXRpbC5sb2coZSwgIkVycm9yIHdoaWxlIGNy
ZWF0aW5nIGEgbGluayBmb3IgZXh0ZXJuYWwgZm9sZGVyIDoiICsgZm9sZGVyUGF0aCk7IC8vJE5P
Ti1OTFMtMSQKIAkJCX0KIAkJfQogCQl0aGlzLnBlbmRpbmdGb2xkZXJzLmNsZWFyKCk7
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>209871</attachid>
            <date>2012-01-21 01:15:00 -0500</date>
            <delta_ts>2012-02-14 07:47:35 -0500</delta_ts>
            <desc>Updated patch</desc>
            <filename>bug368152_2.patch</filename>
            <type>text/plain</type>
            <size>2705</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9j
b3JlL0phdmFDb3JlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBz
ZS9qZHQvY29yZS9KYXZhQ29yZS5qYXZhCmluZGV4IDhiMmU4OTYuLjkxYzc2NDMgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9jb3JlL0phdmFD
b3JlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0
L2NvcmUvSmF2YUNvcmUuamF2YQpAQCAtMTAxLDYgKzEwMSw3IEBACiBpbXBvcnQgamF2YS51dGls
Lkhhc2hNYXA7CiBpbXBvcnQgamF2YS51dGlsLkhhc2hTZXQ7CiBpbXBvcnQgamF2YS51dGlsLkhh
c2h0YWJsZTsKK2ltcG9ydCBqYXZhLnV0aWwuSXRlcmF0b3I7CiBpbXBvcnQgamF2YS51dGlsLk1h
cDsKIAogaW1wb3J0IG9yZy5lY2xpcHNlLmNvcmUucnVudGltZS5Db3JlRXhjZXB0aW9uOwpAQCAt
MTE2LDYgKzExNyw3IEBACiBpbXBvcnQgb3JnLmVjbGlwc2UuY29yZS5ydW50aW1lLlF1YWxpZmll
ZE5hbWU7CiBpbXBvcnQgb3JnLmVjbGlwc2UuY29yZS5ydW50aW1lLlN1YlByb2dyZXNzTW9uaXRv
cjsKIGltcG9ydCBvcmcuZWNsaXBzZS5jb3JlLnJ1bnRpbWUuam9icy5JU2NoZWR1bGluZ1J1bGU7
CitpbXBvcnQgb3JnLmVjbGlwc2UuY29yZS5ydW50aW1lLmpvYnMuSm9iOwogCiBpbXBvcnQgb3Jn
LmVjbGlwc2UuY29yZS5yZXNvdXJjZXMuSUNvbnRhaW5lcjsKIGltcG9ydCBvcmcuZWNsaXBzZS5j
b3JlLnJlc291cmNlcy5JRmlsZTsKQEAgLTM4ODgsNiArMzg5MCw3IEBACiAJCQkJbW9uaXRvci5z
dWJUYXNrKE1lc3NhZ2VzLmphdmFtb2RlbF9yZXNldHRpbmdfc291cmNlX2F0dGFjaG1lbnRfcHJv
cGVydGllcyk7CiAJCQlmaW5hbCBJSmF2YVByb2plY3RbXSBwcm9qZWN0cyA9IG1hbmFnZXIuZ2V0
SmF2YU1vZGVsKCkuZ2V0SmF2YVByb2plY3RzKCk7CiAJCQlIYXNoU2V0IHZpc2l0ZWRQYXRocyA9
IG5ldyBIYXNoU2V0KCk7CisJCQlIYXNoU2V0IGV4dGVybmFsUGF0aHMgPSBuZXcgSGFzaFNldCgp
OwogCQkJRXh0ZXJuYWxGb2xkZXJzTWFuYWdlciBleHRlcm5hbEZvbGRlcnNNYW5hZ2VyID0gSmF2
YU1vZGVsTWFuYWdlci5nZXRFeHRlcm5hbE1hbmFnZXIoKTsKIAkJCWZvciAoaW50IGkgPSAwLCBs
ZW5ndGggPSBwcm9qZWN0cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgewogCQkJCUphdmFQcm9q
ZWN0IGphdmFQcm9qZWN0ID0gKEphdmFQcm9qZWN0KSBwcm9qZWN0c1tpXTsKQEAgLTM5MTEsMTkg
KzM5MTQsMzIgQEAKIAkJCQkJCWlmIChlbnRyeS5nZXRFbnRyeUtpbmQoKSA9PSBJQ2xhc3NwYXRo
RW50cnkuQ1BFX0xJQlJBUlkpIHsKIAkJCQkJCQlJUGF0aCBlbnRyeVBhdGggPSBlbnRyeS5nZXRQ
YXRoKCk7CiAJCQkJCQkJaWYgKEV4dGVybmFsRm9sZGVyc01hbmFnZXIuaXNFeHRlcm5hbEZvbGRl
clBhdGgoZW50cnlQYXRoKSAmJiBleHRlcm5hbEZvbGRlcnNNYW5hZ2VyLmdldEZvbGRlcihlbnRy
eVBhdGgpID09IG51bGwpIHsKLQkJCQkJCQkJZXh0ZXJuYWxGb2xkZXJzTWFuYWdlci5hZGRGb2xk
ZXIoZW50cnlQYXRoLCB0cnVlKTsKKwkJCQkJCQkJZXh0ZXJuYWxQYXRocy5hZGQoZW50cnlQYXRo
KTsKIAkJCQkJCQl9CiAJCQkJCQl9CiAJCQkJCX0KIAkJCQl9CiAJCQl9CisJCQkKKwkJCUlTY2hl
ZHVsaW5nUnVsZSBydWxlID0gbnVsbDsKIAkJCXRyeSB7CisJCQkJLy8gVXNlIGEgc2NoZWR1bGUg
cnVsZSB0byBhdm9pZCBhIHJhY2UgY29uZGl0aW9uIChodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcv
YnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzY5MjUxKQorCQkJCXJ1bGUgPSBSZXNvdXJjZXNQbHVnaW4u
Z2V0V29ya3NwYWNlKCkuZ2V0UnVsZUZhY3RvcnkoKS5tb2RpZnlSdWxlKGV4dGVybmFsRm9sZGVy
c01hbmFnZXIuZ2V0RXh0ZXJuYWxGb2xkZXJzUHJvamVjdCgpKTsKKwkJCQlKb2IuZ2V0Sm9iTWFu
YWdlcigpLmJlZ2luUnVsZShydWxlLCBtb25pdG9yKTsKKwkJCQkKKwkJCQlJdGVyYXRvciBleHRl
cm5hbFBhdGhJdGVyID0gZXh0ZXJuYWxQYXRocy5pdGVyYXRvcigpOworCQkJCXdoaWxlIChleHRl
cm5hbFBhdGhJdGVyLmhhc05leHQoKSkgeworCQkJCQlleHRlcm5hbEZvbGRlcnNNYW5hZ2VyLmFk
ZEZvbGRlcigoSVBhdGgpIGV4dGVybmFsUGF0aEl0ZXIubmV4dCgpLCB0cnVlKTsKKwkJCQl9CiAJ
CQkJZXh0ZXJuYWxGb2xkZXJzTWFuYWdlci5jcmVhdGVQZW5kaW5nRm9sZGVycyhtb25pdG9yKTsK
LQkJCX0KLQkJCWNhdGNoKEphdmFNb2RlbEV4Y2VwdGlvbiBqbWUpIHsKKwkJCQkKKwkJCX0gY2F0
Y2ggKEphdmFNb2RlbEV4Y2VwdGlvbiBqbWUpIHsKIAkJCQkvLyBDcmVhdGlvbiBvZiBleHRlcm5h
bCBmb2xkZXIgcHJvamVjdCBmYWlsZWQuIExvZyBpdCBhbmQgY29udGludWU7CiAJCQkJVXRpbC5s
b2coam1lLCAiRXJyb3Igd2hpbGUgcHJvY2Vzc2luZyBleHRlcm5hbCBmb2xkZXJzIik7IC8vJE5P
Ti1OTFMtMSQKKwkJCX0gZmluYWxseSB7CisJCQkJSm9iLmdldEpvYk1hbmFnZXIoKS5lbmRSdWxl
KHJ1bGUpOwogCQkJfQorCQkJCiAJCQkvLyBpbml0aWFsaXplIGRlbHRhIHN0YXRlCiAJCQlpZiAo
bW9uaXRvciAhPSBudWxsKQogCQkJCW1vbml0b3Iuc3ViVGFzayhNZXNzYWdlcy5qYXZhbW9kZWxf
aW5pdGlhbGl6aW5nX2RlbHRhX3N0YXRlKTs=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>210971</attachid>
            <date>2012-02-14 07:47:00 -0500</date>
            <delta_ts>2012-02-14 07:47:35 -0500</delta_ts>
            <desc>new fix</desc>
            <filename>bug368152.patch</filename>
            <type>text/plain</type>
            <size>4732</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9j
b3JlL0phdmFDb3JlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBz
ZS9qZHQvY29yZS9KYXZhQ29yZS5qYXZhCmluZGV4IDkxYzc2NDMuLjhiMmU4OTYgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9jb3JlL0phdmFD
b3JlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0
L2NvcmUvSmF2YUNvcmUuamF2YQpAQCAtMTAxLDcgKzEwMSw2IEBACiBpbXBvcnQgamF2YS51dGls
Lkhhc2hNYXA7CiBpbXBvcnQgamF2YS51dGlsLkhhc2hTZXQ7CiBpbXBvcnQgamF2YS51dGlsLkhh
c2h0YWJsZTsKLWltcG9ydCBqYXZhLnV0aWwuSXRlcmF0b3I7CiBpbXBvcnQgamF2YS51dGlsLk1h
cDsKIAogaW1wb3J0IG9yZy5lY2xpcHNlLmNvcmUucnVudGltZS5Db3JlRXhjZXB0aW9uOwpAQCAt
MTE3LDcgKzExNiw2IEBACiBpbXBvcnQgb3JnLmVjbGlwc2UuY29yZS5ydW50aW1lLlF1YWxpZmll
ZE5hbWU7CiBpbXBvcnQgb3JnLmVjbGlwc2UuY29yZS5ydW50aW1lLlN1YlByb2dyZXNzTW9uaXRv
cjsKIGltcG9ydCBvcmcuZWNsaXBzZS5jb3JlLnJ1bnRpbWUuam9icy5JU2NoZWR1bGluZ1J1bGU7
Ci1pbXBvcnQgb3JnLmVjbGlwc2UuY29yZS5ydW50aW1lLmpvYnMuSm9iOwogCiBpbXBvcnQgb3Jn
LmVjbGlwc2UuY29yZS5yZXNvdXJjZXMuSUNvbnRhaW5lcjsKIGltcG9ydCBvcmcuZWNsaXBzZS5j
b3JlLnJlc291cmNlcy5JRmlsZTsKQEAgLTM4OTAsNyArMzg4OCw2IEBACiAJCQkJbW9uaXRvci5z
dWJUYXNrKE1lc3NhZ2VzLmphdmFtb2RlbF9yZXNldHRpbmdfc291cmNlX2F0dGFjaG1lbnRfcHJv
cGVydGllcyk7CiAJCQlmaW5hbCBJSmF2YVByb2plY3RbXSBwcm9qZWN0cyA9IG1hbmFnZXIuZ2V0
SmF2YU1vZGVsKCkuZ2V0SmF2YVByb2plY3RzKCk7CiAJCQlIYXNoU2V0IHZpc2l0ZWRQYXRocyA9
IG5ldyBIYXNoU2V0KCk7Ci0JCQlIYXNoU2V0IGV4dGVybmFsUGF0aHMgPSBuZXcgSGFzaFNldCgp
OwogCQkJRXh0ZXJuYWxGb2xkZXJzTWFuYWdlciBleHRlcm5hbEZvbGRlcnNNYW5hZ2VyID0gSmF2
YU1vZGVsTWFuYWdlci5nZXRFeHRlcm5hbE1hbmFnZXIoKTsKIAkJCWZvciAoaW50IGkgPSAwLCBs
ZW5ndGggPSBwcm9qZWN0cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgewogCQkJCUphdmFQcm9q
ZWN0IGphdmFQcm9qZWN0ID0gKEphdmFQcm9qZWN0KSBwcm9qZWN0c1tpXTsKQEAgLTM5MTQsMzIg
KzM5MTEsMTkgQEAKIAkJCQkJCWlmIChlbnRyeS5nZXRFbnRyeUtpbmQoKSA9PSBJQ2xhc3NwYXRo
RW50cnkuQ1BFX0xJQlJBUlkpIHsKIAkJCQkJCQlJUGF0aCBlbnRyeVBhdGggPSBlbnRyeS5nZXRQ
YXRoKCk7CiAJCQkJCQkJaWYgKEV4dGVybmFsRm9sZGVyc01hbmFnZXIuaXNFeHRlcm5hbEZvbGRl
clBhdGgoZW50cnlQYXRoKSAmJiBleHRlcm5hbEZvbGRlcnNNYW5hZ2VyLmdldEZvbGRlcihlbnRy
eVBhdGgpID09IG51bGwpIHsKLQkJCQkJCQkJZXh0ZXJuYWxQYXRocy5hZGQoZW50cnlQYXRoKTsK
KwkJCQkJCQkJZXh0ZXJuYWxGb2xkZXJzTWFuYWdlci5hZGRGb2xkZXIoZW50cnlQYXRoLCB0cnVl
KTsKIAkJCQkJCQl9CiAJCQkJCQl9CiAJCQkJCX0KIAkJCQl9CiAJCQl9Ci0JCQkKLQkJCUlTY2hl
ZHVsaW5nUnVsZSBydWxlID0gbnVsbDsKIAkJCXRyeSB7Ci0JCQkJLy8gVXNlIGEgc2NoZWR1bGUg
cnVsZSB0byBhdm9pZCBhIHJhY2UgY29uZGl0aW9uIChodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcv
YnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzY5MjUxKQotCQkJCXJ1bGUgPSBSZXNvdXJjZXNQbHVnaW4u
Z2V0V29ya3NwYWNlKCkuZ2V0UnVsZUZhY3RvcnkoKS5tb2RpZnlSdWxlKGV4dGVybmFsRm9sZGVy
c01hbmFnZXIuZ2V0RXh0ZXJuYWxGb2xkZXJzUHJvamVjdCgpKTsKLQkJCQlKb2IuZ2V0Sm9iTWFu
YWdlcigpLmJlZ2luUnVsZShydWxlLCBtb25pdG9yKTsKLQkJCQkKLQkJCQlJdGVyYXRvciBleHRl
cm5hbFBhdGhJdGVyID0gZXh0ZXJuYWxQYXRocy5pdGVyYXRvcigpOwotCQkJCXdoaWxlIChleHRl
cm5hbFBhdGhJdGVyLmhhc05leHQoKSkgewotCQkJCQlleHRlcm5hbEZvbGRlcnNNYW5hZ2VyLmFk
ZEZvbGRlcigoSVBhdGgpIGV4dGVybmFsUGF0aEl0ZXIubmV4dCgpLCB0cnVlKTsKLQkJCQl9CiAJ
CQkJZXh0ZXJuYWxGb2xkZXJzTWFuYWdlci5jcmVhdGVQZW5kaW5nRm9sZGVycyhtb25pdG9yKTsK
LQkJCQkKLQkJCX0gY2F0Y2ggKEphdmFNb2RlbEV4Y2VwdGlvbiBqbWUpIHsKKwkJCX0KKwkJCWNh
dGNoKEphdmFNb2RlbEV4Y2VwdGlvbiBqbWUpIHsKIAkJCQkvLyBDcmVhdGlvbiBvZiBleHRlcm5h
bCBmb2xkZXIgcHJvamVjdCBmYWlsZWQuIExvZyBpdCBhbmQgY29udGludWU7CiAJCQkJVXRpbC5s
b2coam1lLCAiRXJyb3Igd2hpbGUgcHJvY2Vzc2luZyBleHRlcm5hbCBmb2xkZXJzIik7IC8vJE5P
Ti1OTFMtMSQKLQkJCX0gZmluYWxseSB7Ci0JCQkJSm9iLmdldEpvYk1hbmFnZXIoKS5lbmRSdWxl
KHJ1bGUpOwogCQkJfQotCQkJCiAJCQkvLyBpbml0aWFsaXplIGRlbHRhIHN0YXRlCiAJCQlpZiAo
bW9uaXRvciAhPSBudWxsKQogCQkJCW1vbml0b3Iuc3ViVGFzayhNZXNzYWdlcy5qYXZhbW9kZWxf
aW5pdGlhbGl6aW5nX2RlbHRhX3N0YXRlKTsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0V4dGVybmFsRm9sZGVyc01h
bmFnZXIuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb3JlL0V4dGVybmFsRm9sZGVyc01hbmFnZXIuamF2YQppbmRleCBkNjE1Njk4Li5j
YzM3YjViIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29yZS9FeHRlcm5hbEZvbGRlcnNNYW5hZ2VyLmphdmEKKysrIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvRXh0
ZXJuYWxGb2xkZXJzTWFuYWdlci5qYXZhCkBAIC0xMjIsNyArMTIyLDcgQEAKIAkJfSB3aGlsZSAo
cmVzdWx0LmV4aXN0cygpKTsKIAkJaWYgKHNjaGVkdWxlRm9yQ3JlYXRpb24pIHsKIAkJCWlmICh0
aGlzLnBlbmRpbmdGb2xkZXJzID09IG51bGwpCi0JCQkJdGhpcy5wZW5kaW5nRm9sZGVycyA9IG5l
dyBIYXNoU2V0KCk7CisJCQkJdGhpcy5wZW5kaW5nRm9sZGVycyA9IENvbGxlY3Rpb25zLnN5bmNo
cm9uaXplZFNldChuZXcgSGFzaFNldCgpKTsKIAkJCXRoaXMucGVuZGluZ0ZvbGRlcnMuYWRkKGV4
dGVybmFsRm9sZGVyUGF0aCk7CiAJCX0KIAkJa25vd25Gb2xkZXJzLnB1dChleHRlcm5hbEZvbGRl
clBhdGgsIHJlc3VsdCk7CkBAIC0xNjYsMTYgKzE2NiwyMiBAQAogCQljYXRjaChDb3JlRXhjZXB0
aW9uIGUpIHsKIAkJCXRocm93IG5ldyBKYXZhTW9kZWxFeGNlcHRpb24oZSk7CiAJCX0KLQkJSXRl
cmF0b3IgaXRlcmF0b3IgPSB0aGlzLnBlbmRpbmdGb2xkZXJzLml0ZXJhdG9yKCk7Ci0JCXdoaWxl
IChpdGVyYXRvci5oYXNOZXh0KCkpIHsKLQkJCU9iamVjdCBmb2xkZXJQYXRoID0gaXRlcmF0b3Iu
bmV4dCgpOworCQkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/
aWQ9MzY4MTUyCisJCS8vIFRvIGF2b2lkIHJhY2UgY29uZGl0aW9uIChmcm9tIGFkZEZvbGRlciBh
bmQgcmVtb3ZlRm9sZGVyLCBsb2FkIHRoZSBtYXAgZWxlbWVudHMgaW50byBhbiBhcnJheSBhbmQg
Y2xlYXIgdGhlIG1hcCBpbW1lZGlhdGVseS4KKwkJLy8gVGhlIGNyZWF0ZUxpbmtGb2xkZXIgYmVp
bmcgaW4gdGhlIHN5bmNocm9uaXplZCBibG9jayBjYW4gY2F1c2UgYSBkZWFkbG9jayBhbmQgaGVu
Y2Uga2VlcCBpdCBvdXQgb2YgdGhlIHN5bmNocm9uaXplZCBibG9jay4gCisJCU9iamVjdFtdIGFy
cmF5T2ZGb2xkZXJzID0gbnVsbDsKKwkJc3luY2hyb25pemVkICh0aGlzLnBlbmRpbmdGb2xkZXJz
KSB7CisJCQlhcnJheU9mRm9sZGVycyA9IHRoaXMucGVuZGluZ0ZvbGRlcnMudG9BcnJheSgpOwor
CQkJdGhpcy5wZW5kaW5nRm9sZGVycy5jbGVhcigpOworCQl9CisKKwkJZm9yIChpbnQgaT0wOyBp
IDwgYXJyYXlPZkZvbGRlcnMubGVuZ3RoOyBpKyspIHsKIAkJCXRyeSB7Ci0JCQkJY3JlYXRlTGlu
a0ZvbGRlcigoSVBhdGgpIGZvbGRlclBhdGgsIGZhbHNlLCBleHRlcm5hbEZvbGRlcnNQcm9qZWN0
LCBtb25pdG9yKTsKKwkJCQljcmVhdGVMaW5rRm9sZGVyKChJUGF0aCkgYXJyYXlPZkZvbGRlcnNb
aV0sIGZhbHNlLCBleHRlcm5hbEZvbGRlcnNQcm9qZWN0LCBtb25pdG9yKTsKIAkJCX0gY2F0Y2gg
KENvcmVFeGNlcHRpb24gZSkgewotCQkJCVV0aWwubG9nKGUsICJFcnJvciB3aGlsZSBjcmVhdGlu
ZyBhIGxpbmsgZm9yIGV4dGVybmFsIGZvbGRlciA6IiArIGZvbGRlclBhdGgpOyAvLyROT04tTkxT
LTEkCisJCQkJVXRpbC5sb2coZSwgIkVycm9yIHdoaWxlIGNyZWF0aW5nIGEgbGluayBmb3IgZXh0
ZXJuYWwgZm9sZGVyIDoiICsgYXJyYXlPZkZvbGRlcnNbaV0pOyAvLyROT04tTkxTLTEkCiAJCQl9
CiAJCX0KLQkJdGhpcy5wZW5kaW5nRm9sZGVycy5jbGVhcigpOwogCX0KIAkKIAlwdWJsaWMgdm9p
ZCBjbGVhblVwKElQcm9ncmVzc01vbml0b3IgbW9uaXRvcikgdGhyb3dzIENvcmVFeGNlcHRpb24g
ew==
</data>
<flag name="review"
          id="48604"
          type_id="6"
          status="?"
          setter="jarthana"
    />
          </attachment>
      

    </bug>

</bugzilla>