<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>421797</bug_id>
          
          <creation_ts>2013-11-15 01:35:00 -0500</creation_ts>
          <short_desc>[1.8][compiler] ClassFormatError with default methods &amp; I.super::foo syntax</short_desc>
          <delta_ts>2013-11-15 03:59:39 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>380501</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>jarthana</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2330546</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-11-15 01:35:57 -0500</bug_when>
    <thetext>BETA_JAVA8 

Tested with 8b115:

// --
interface I {
	int m();
	public default int foo() { return 0; }
}

interface T extends I {
	public default int m() { 
		I i = I.super::foo; 
		return i.foo();
	}
}

public class X {
	public static void main(String argv[]) {
		new T(){}.m();
	}
}


triggers an class format error. JVM does not like the synthetic being
a static method.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2330547</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-11-15 01:36:27 -0500</bug_when>
    <thetext>Thanks in advance for taking a look.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2330571</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-11-15 03:36:26 -0500</bug_when>
    <thetext>I realized that this has less to with default methods and more to do with
reference expression code generation which I worked on.

Looks like the combination of static &amp; synthetic is irritating the VM.
Part J is not quite categorical about it though.

For the case at hand, I am now generating a private synthetic method and
having it invoked via MethodHandleRefKindInvokeSpecial.

Patch is under test.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2330577</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-11-15 03:59:39 -0500</bug_when>
    <thetext>Fix and tests available here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=6a493caae74ed7f294c44634abfb786fa2111d3d</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>