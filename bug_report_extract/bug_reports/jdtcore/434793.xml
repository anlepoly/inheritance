<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>434793</bug_id>
          
          <creation_ts>2014-05-13 14:19:00 -0400</creation_ts>
          <short_desc>[1.8][null][compiler] AIOOBE in ParameterizedGenericMethodBinding.substitute when inlining a method</short_desc>
          <delta_ts>2014-05-26 04:47:09 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 8</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.4 RC2</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Timo Kinnunen">timo.kinnunen</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>jarthana</cc>
    
    <cc>manpalat</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="62408"
          type_id="1"
          status="+"
          setter="jarthana"
    />
    <flag name="review"
          id="62428"
          type_id="1"
          status="+"
          setter="manpalat"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2401169</commentid>
    <comment_count>0</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-05-13 14:19:01 -0400</bug_when>
    <thetext>When annotation-based null analysis is enabled and the full JDK with sources is used, activating the Inline Method refactoring on Collectors.toCollection causes an ArrayIndexOutOfBoundsException to be thrown.

To reproduce, using this code:

import java.util.ArrayList;
import java.util.HashSet;
import java.util.function.Function;
import java.util.function.Supplier;
import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public abstract class InternalError&lt;T&gt; {

	public ArrayList&lt;T&gt; toList() {
		// active Inline... command with the caret here--------&gt;|
		Collector&lt;T, ?, ArrayList&lt;T&gt;&gt; collection = Collectors.toCollection(ArrayList&lt;T&gt;::new);
		return terminalAsObj(s -&gt; s.collect(collection), maker());
	}
	public HashSet&lt;T&gt; toSet() {
		Collector&lt;T, ?, HashSet&lt;T&gt;&gt; collection = Collectors.toCollection(HashSet&lt;T&gt;::new);
		return terminalAsObj(s -&gt; s.collect(collection), maker());
	}
	protected abstract Supplier&lt;Stream&lt;T&gt;&gt; maker();
	protected abstract &lt;R&gt; R terminalAsObj(Function&lt;Stream&lt;T&gt;, R&gt; consumption, Supplier&lt;Stream&lt;T&gt;&gt; supplier);
}

Steps:
1. In Preferences -&gt; Java -&gt; Compiler -&gt; Errors/Warnings -&gt; Null analysis, turn on Enable annotation-based null analysis.
2. In Preferences -&gt; Java -&gt; Installed JREs, replace the default JRE with Java 8 JDK.
3. Move caret to the location indicated in the source code and activate the refactoring Inline... from either right-click menu or by pressing Shift+Alt+I.
4. Two error message dialogs are displayed.

Tested with Eclipse SDK Version: Luna (4.4) Build id: I20140510-1500

The stack trace:
Caused by: java.lang.ArrayIndexOutOfBoundsException: 0
	at org.eclipse.jdt.internal.compiler.lookup.ParameterizedGenericMethodBinding.substitute(ParameterizedGenericMethodBinding.java:741)
	at org.eclipse.jdt.internal.compiler.lookup.Scope$Substitutor.substitute(Scope.java:489)
	at org.eclipse.jdt.internal.compiler.lookup.Scope$Substitutor.substitute(Scope.java:518)
	at org.eclipse.jdt.internal.compiler.lookup.Scope$Substitutor.substitute(Scope.java:618)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.substitute(Scope.java:442)
	at org.eclipse.jdt.internal.compiler.lookup.ParameterizedGenericMethodBinding.&lt;init&gt;(ParameterizedGenericMethodBinding.java:500)
	at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.createParameterizedGenericMethod(LookupEnvironment.java:831)
	at org.eclipse.jdt.internal.compiler.lookup.ImplicitNullAnnotationVerifier.checkNullSpecInheritance(ImplicitNullAnnotationVerifier.java:287)
	at org.eclipse.jdt.internal.compiler.lookup.MethodVerifier15.checkNullSpecInheritance(MethodVerifier15.java:418)
	at org.eclipse.jdt.internal.compiler.lookup.MethodVerifier15.checkConcreteInheritedMethod(MethodVerifier15.java:103)
	at org.eclipse.jdt.internal.compiler.lookup.MethodVerifier.checkInheritedMethods(MethodVerifier.java:421)
	at org.eclipse.jdt.internal.compiler.lookup.MethodVerifier15.checkInheritedMethods(MethodVerifier15.java:342)
	at org.eclipse.jdt.internal.compiler.lookup.MethodVerifier15.checkMethods(MethodVerifier15.java:677)
	at org.eclipse.jdt.internal.compiler.lookup.MethodVerifier.verify(MethodVerifier.java:970)
	at org.eclipse.jdt.internal.compiler.lookup.MethodVerifier15.verify(MethodVerifier15.java:999)
	at org.eclipse.jdt.internal.compiler.lookup.MethodVerifier.verify(MethodVerifier.java:979)
	at org.eclipse.jdt.internal.compiler.lookup.SourceTypeBinding.verifyMethods(SourceTypeBinding.java:2507)
	at org.eclipse.jdt.internal.compiler.lookup.ClassScope.buildAnonymousTypeBinding(ClassScope.java:111)
	at org.eclipse.jdt.internal.compiler.lookup.BlockScope.addAnonymousType(BlockScope.java:94)
	at org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression.resolveTypeForQualifiedAllocationExpression(QualifiedAllocationExpression.java:538)
	at org.eclipse.jdt.internal.compiler.ast.QualifiedAllocationExpression.resolveType(QualifiedAllocationExpression.java:283)
	at org.eclipse.jdt.internal.compiler.ast.ReturnStatement.resolve(ReturnStatement.java:331)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:619)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:299)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:529)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1207)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1311)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1106)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1320)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:587)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:1204)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:689)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1183)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:809)
	at org.eclipse.jdt.internal.corext.refactoring.util.RefactoringASTParser.parse(RefactoringASTParser.java:63)
	at org.eclipse.jdt.internal.corext.refactoring.util.RefactoringASTParser.parse(RefactoringASTParser.java:52)
	at org.eclipse.jdt.internal.corext.refactoring.util.RefactoringASTParser.parse(RefactoringASTParser.java:48)
	at org.eclipse.jdt.internal.corext.refactoring.util.RefactoringASTParser.parse(RefactoringASTParser.java:44)
	at org.eclipse.jdt.internal.corext.refactoring.code.InlineMethodRefactoring.resolveSourceProvider(InlineMethodRefactoring.java:426)
	at org.eclipse.jdt.internal.corext.refactoring.code.InlineMethodRefactoring.checkInitialConditions(InlineMethodRefactoring.java:252)
	at org.eclipse.ltk.core.refactoring.CheckConditionsOperation.run(CheckConditionsOperation.java:83)
	at org.eclipse.core.internal.resources.Workspace.run(Workspace.java:2333)
	at org.eclipse.ltk.internal.ui.refactoring.WorkbenchRunnableAdapter.run(WorkbenchRunnableAdapter.java:87)
	at org.eclipse.jface.operation.ModalContext$ModalContextThread.run(ModalContext.java:122)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2401886</commentid>
    <comment_count>1</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-05-14 16:06:41 -0400</bug_when>
    <thetext>Another smaller repro. The same exception also happens when I go to definition for Collections.sort from this method:

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

public class Snippet {
	private static &lt;E&gt; List&lt;E&gt; sorted(Collection&lt;E&gt; keySet) {
		ArrayList&lt;E&gt; arrayList = new ArrayList&lt;&gt;(keySet);
		// The method sort(List&lt;T&gt;) in the type Collections is not applicable for the arguments (ArrayList&lt;E&gt;)
		Collections.sort(arrayList);
		return arrayList;
	}
}

The error message is bogus too, could be related.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2401943</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-14 17:59:00 -0400</bug_when>
    <thetext>(In reply to Timo Kinnunen from comment #1)
&gt; The error message is bogus too, could be related.

Here&apos;s the constraint the lets inference fail:

   E &lt;: java.lang.Comparable&lt;? super T#0&gt;

This seems to be well justified (can you guess what this is derived from?)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2401948</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-14 18:15:15 -0400</bug_when>
    <thetext>(In reply to Timo Kinnunen from comment #1)
&gt; Another smaller repro. The same exception also happens when I go to
&gt; definition for Collections.sort from this method:

This I can reproduce in HEAD. And I seem to see a close-to-trivial fix. Tentatively pulling into RC2.

NB: this appears to be a recent regression.

NB2: the error message mentioned in comment 1 is *not* related to the AIOOBE.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2402030</commentid>
    <comment_count>4</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-05-15 02:54:29 -0400</bug_when>
    <thetext>(In reply to comment #2)
&gt; (In reply to Timo Kinnunen from comment #1)
&gt; &gt; The error message is bogus too, could be related.
&gt; 
&gt; Here&apos;s the constraint the lets inference fail:
&gt; 
&gt; E &lt;: java.lang.Comparable&lt;? super T#0&gt;
&gt; 
&gt; This seems to be well justified (can you guess what this is derived from?)

Oops, you&apos;re absolutely right. I was mislead by the &quot;ArrayList not applicable for List&quot; aspect of the message.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2403334</commentid>
    <comment_count>5</comment_count>
      <attachid>243219</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-18 16:35:41 -0400</bug_when>
    <thetext>Created attachment 243219
Proposed patch

Here&apos;s what happened: 

In ImplicitNullAnnotationVerifier.checkNullSpecInheritance() we compare an override against the corresponding inherited method. In bug 434374 I introduced that type arguments be &quot;normalized&quot; by substituting the type variables of one method into the other.

What I didn&apos;t expect: one of the methods may come in as an instantiated PGMB, which doesn&apos;t answer any type variables. Hence we had a mismatch in number of types during substitution: expected type arguments where not provided =&gt; AIOOBE.

Solution: lookup the type variables from the method&apos;s *original*.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2403335</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-18 16:38:04 -0400</bug_when>
    <thetext>Given the risk of AIOOBE and given the simplicity of the fix, I suggest that we consider this for RC2.

RunJDTCoreTests are green with this patch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404041</commentid>
    <comment_count>7</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-20 05:52:28 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #6)
&gt; Given the risk of AIOOBE and given the simplicity of the fix, I suggest that
&gt; we consider this for RC2.
&gt; 
&gt; RunJDTCoreTests are green with this patch.

Thanks, I found the fix to be simple and safe too.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404310</commentid>
    <comment_count>8</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-20 11:09:25 -0400</bug_when>
    <thetext>Thanks Jay and Manoj,

Released for 4.4 RC2 via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=56cd7be7209c3b63ac72922c3a342e501721fcf5</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2406937</commentid>
    <comment_count>9</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-26 04:47:09 -0400</bug_when>
    <thetext>Verified for 4.4 RC2 with build I20140524-1500</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>243219</attachid>
            <date>2014-05-18 16:35:00 -0400</date>
            <delta_ts>2014-05-18 16:35:41 -0400</delta_ts>
            <desc>Proposed patch</desc>
            <filename>Bug-434793--18nullcompiler-AIOOBE-in-ParameterizedGe.patch</filename>
            <type>text/plain</type>
            <size>3333</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9v
cmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVn
cmVzc2lvblRlc3QuamF2YQppbmRleCBiMWQ2ZWYxLi45MDNlNDQ2IDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25UZXN0LmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pk
dC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVzdC5q
YXZhCkBAIC0yNiw2ICsyNiw3IEBACiAgKgkJCQkJCQkJQnVnIDQzMjYwMyAtIFtjb21waWxlXVsx
LjddIGVjaiByZXBvcnRzIGFuIEVycm9yIHdoaWxlIGphdmFjIGRvZXNuJ3QKICAqCQkJCQkJCQlC
dWcgMzk5NTI3IC0gVHlwZSBpbmZlcmVuY2UgcHJvYmxlbQogICoJCQkJCQkJCUJ1ZyA0MzQ1NzAg
LSBHZW5lcmljIHR5cGUgbWlzbWF0Y2ggZm9yIHBhcmFtZXRyaXplZCBjbGFzcyBhbm5vdGF0aW9u
IGF0dHJpYnV0ZSB3aXRoIGlubmVyIGNsYXNzCisgKgkJCQkJCQkJQnVnIDQzNDc5MyAtIFsxLjhd
W251bGxdW2NvbXBpbGVyXSBBSU9PQkUgaW4gUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5k
aW5nLnN1YnN0aXR1dGUgd2hlbiBpbmxpbmluZyBhIG1ldGhvZAogICoqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKiovCiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyLnJlZ3Jl
c3Npb247CiAKQEAgLTUxNzcsNSArNTE3OCwyNCBAQAogCQkJIn1cbiIKIAkJfSk7CiB9CitwdWJs
aWMgdm9pZCB0ZXN0QnVnNDM0NzkzKCkgeworCU1hcCBvcHRpb25zID0gZ2V0Q29tcGlsZXJPcHRp
b25zKCk7CisJb3B0aW9ucy5wdXQoSmF2YUNvcmUuQ09NUElMRVJfQU5OT1RBVElPTl9OVUxMX0FO
QUxZU0lTLCBKYXZhQ29yZS5FTkFCTEVEKTsKKwlydW5Db25mb3JtVGVzdCgKKwkJbmV3IFN0cmlu
Z1tdIHsKKwkJCSJPdXRlci5qYXZhIiwKKwkJCSJpbXBvcnQgamF2YS51dGlsLio7XG4iICsgCisJ
CQkiXG4iICsgCisJCQkicHVibGljIGNsYXNzIE91dGVyIHtcbiIgKyAKKwkJCSIJcHJpdmF0ZSBz
dGF0aWMgY2xhc3MgU2luZ2xldG9uTGlzdDxFPlxuIiArCisJCQkiCQkJCSBleHRlbmRzIEFic3Ry
YWN0TGlzdDxFPlxuIiArCisJCQkiCQkJCSBpbXBsZW1lbnRzIGphdmEudXRpbC5SYW5kb21BY2Nl
c3MsIGphdmEuaW8uU2VyaWFsaXphYmxlIHtcbiIgKworCQkJIgkJcHVibGljIEUgZ2V0KGludCBp
KSB7IHRocm93IG5ldyBSdW50aW1lRXhjZXB0aW9uKCk7IH1cbiIgKworCQkJIgkJcHVibGljIGlu
dCBzaXplKCkgeyByZXR1cm4gMDsgfVxuIiArIAorCQkJIgl9XG4iICsKKwkJCSJ9XG4iCisJCX0s
CisJCW9wdGlvbnMpOworfQogfQogCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0ltcGxpY2l0
TnVsbEFubm90YXRpb25WZXJpZmllci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9JbXBsaWNpdE51bGxB
bm5vdGF0aW9uVmVyaWZpZXIuamF2YQppbmRleCAwMzU1YTgzLi4zYWYzOWUzIDEwMDY0NAotLS0g
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvbG9va3VwL0ltcGxpY2l0TnVsbEFubm90YXRpb25WZXJpZmllci5qYXZhCisrKyBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9sb29rdXAvSW1wbGljaXROdWxsQW5ub3RhdGlvblZlcmlmaWVyLmphdmEKQEAgLTI4
Miw3ICsyODIsNyBAQAogCQkJCX0KIAkJCQlpZiAodXNlVHlwZUFubm90YXRpb25zKSB7CiAJCQkJ
CVR5cGVCaW5kaW5nIHN1YnN0aXR1dGVSZXR1cm5UeXBlID0gbnVsbDsgLy8gZm9yIFRWQiBpZGVu
dGl0eSBjaGVja3MgaW5zaWRlIE51bGxBbm5vdGF0aW9uTWF0Y2hpbmcuYW5hbHl6ZSgpCi0JCQkJ
CVR5cGVWYXJpYWJsZUJpbmRpbmdbXSB0eXBlVmFyaWFibGVzID0gaW5oZXJpdGVkTWV0aG9kLnR5
cGVWYXJpYWJsZXM7CisJCQkJCVR5cGVWYXJpYWJsZUJpbmRpbmdbXSB0eXBlVmFyaWFibGVzID0g
aW5oZXJpdGVkTWV0aG9kLm9yaWdpbmFsKCkudHlwZVZhcmlhYmxlczsKIAkJCQkJaWYgKHR5cGVW
YXJpYWJsZXMgIT0gbnVsbCAmJiBjdXJyZW50TWV0aG9kLnJldHVyblR5cGUuaWQgIT0gVHlwZUlk
cy5UX3ZvaWQpIHsKIAkJCQkJCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBzdWJz
dGl0dXRlID0gdGhpcy5lbnZpcm9ubWVudC5jcmVhdGVQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhv
ZChjdXJyZW50TWV0aG9kLCB0eXBlVmFyaWFibGVzKTsKIAkJCQkJCXN1YnN0aXR1dGVSZXR1cm5U
eXBlID0gc3Vic3RpdHV0ZS5yZXR1cm5UeXBlOwpAQCAtMjk4LDcgKzI5OCw3IEBACiAJCS8vIHBh
cmFtZXRlcnM6CiAJCVR5cGVCaW5kaW5nW10gc3Vic3RpdHV0ZVBhcmFtZXRlcnMgPSBudWxsOyAv
LyBmb3IgVFZCIGlkZW50aXR5IGNoZWNrcyBpbnNpZGUgTnVsbEFubm90YXRpb25NYXRjaGluZy5h
bmFseXplKCkKIAkJaWYgKHNob3VsZENvbXBsYWluKSB7Ci0JCQlUeXBlVmFyaWFibGVCaW5kaW5n
W10gdHlwZVZhcmlhYmxlcyA9IGN1cnJlbnRNZXRob2QudHlwZVZhcmlhYmxlczsKKwkJCVR5cGVW
YXJpYWJsZUJpbmRpbmdbXSB0eXBlVmFyaWFibGVzID0gY3VycmVudE1ldGhvZC5vcmlnaW5hbCgp
LnR5cGVWYXJpYWJsZXM7CiAJCQlpZiAodHlwZVZhcmlhYmxlcyAhPSBCaW5kaW5nLk5PX1RZUEVf
VkFSSUFCTEVTKSB7CiAJCQkJUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIHN1YnN0
aXR1dGUgPSB0aGlzLmVudmlyb25tZW50LmNyZWF0ZVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9k
KGluaGVyaXRlZE1ldGhvZCwgdHlwZVZhcmlhYmxlcyk7CiAJCQkJc3Vic3RpdHV0ZVBhcmFtZXRl
cnMgPSBzdWJzdGl0dXRlLnBhcmFtZXRlcnM7
</data>

          </attachment>
      

    </bug>

</bugzilla>