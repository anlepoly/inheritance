<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>334119</bug_id>
          
          <creation_ts>2011-01-12 10:20:00 -0500</creation_ts>
          <short_desc>AIOOBE in BindingKeyParser.parseInnerType (was: Copy Qualified Name throws ArrayIndexOutOfBoundsException)</short_desc>
          <delta_ts>2011-01-25 04:04:32 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.7</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows XP</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>3.7 M5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Dani Megert">daniel_megert</reporter>
          <assigned_to name="Ayushman Jain">amj87.iitr</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>deepakazad</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1865894</commentid>
    <comment_count>0</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2011-01-12 10:20:22 -0500</bug_when>
    <thetext>I20110111-0800.

Copy From Clipboard throws ArrayIndexOutOfBoundsException.

1. paste this:
package pp;
public class A$ {
	void a() {
	}
}
2. select &quot;a&quot; in the editor
3. Copy &gt; Copy Qualified Name
STRANGE: sometimes nothing at all happens
4. Copy &gt; Copy Qualified Name
still no feedback but:
!ENTRY org.eclipse.ui 4 0 2011-01-12 15:53:48.908
!MESSAGE Unhandled event loop exception
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: 0
	at org.eclipse.jdt.internal.core.util.BindingKeyParser.parseInnerType(BindingKeyParser.java:734)
	at org.eclipse.jdt.internal.core.util.BindingKeyParser.parse(BindingKeyParser.java:608)
	at org.eclipse.jdt.internal.core.util.BindingKeyParser.parse(BindingKeyParser.java:590)
	at org.eclipse.jdt.core.BindingKey.toSignature(BindingKey.java:305)
	at org.eclipse.jdt.internal.ui.viewsupport.JavaElementLabelComposer.appendMethodLabel(JavaElementLabelComposer.java:322)
	at org.eclipse.jdt.internal.ui.viewsupport.JavaElementLabelComposer.appendElementLabel(JavaElementLabelComposer.java:257)
	at org.eclipse.jdt.ui.JavaElementLabels.getElementLabel(JavaElementLabels.java:510)
	at org.eclipse.jdt.ui.JavaElementLabels.getElementLabel(JavaElementLabels.java:483)
	at org.eclipse.jdt.ui.JavaElementLabels.getTextLabel(JavaElementLabels.java:387)
	at org.eclipse.jdt.internal.ui.actions.CopyQualifiedNameAction.getQualifiedName(CopyQualifiedNameAction.java:261)
	at org.eclipse.jdt.internal.ui.actions.CopyQualifiedNameAction.run(CopyQualifiedNameAction.java:193)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:498)
	at org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:584)
	at org.eclipse.jface.action.ActionContributionItem.access$2(ActionContributionItem.java:501)
	at org.eclipse.jface.action.ActionContributionItem$5.handleEvent(ActionContributionItem.java:411)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1053)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4089)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3680)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2697)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2661)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2495)
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:674)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:667)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:115)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:592)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)

!ENTRY org.eclipse.ui 4 0 2011-01-12 15:53:57.346
!MESSAGE Unhandled event loop exception
!STACK 0
java.lang.ArrayIndexOutOfBoundsException: 0
	at org.eclipse.jdt.internal.core.util.BindingKeyParser.parseInnerType(BindingKeyParser.java:734)
	at org.eclipse.jdt.internal.core.util.BindingKeyParser.parse(BindingKeyParser.java:608)
	at org.eclipse.jdt.internal.core.util.BindingKeyParser.parse(BindingKeyParser.java:590)
	at org.eclipse.jdt.core.BindingKey.isParameterizedType(BindingKey.java:279)
	at org.eclipse.jdt.internal.ui.viewsupport.JavaElementLabelComposer.appendTypeLabel(JavaElementLabelComposer.java:855)
	at org.eclipse.jdt.internal.ui.viewsupport.JavaElementLabelComposer.appendElementLabel(JavaElementLabelComposer.java:272)
	at org.eclipse.jdt.ui.JavaElementLabels.getElementLabel(JavaElementLabels.java:510)
	at org.eclipse.jdt.ui.JavaElementLabels.getElementLabel(JavaElementLabels.java:483)
	at org.eclipse.jdt.ui.JavaElementLabels.getTextLabel(JavaElementLabels.java:387)
	at org.eclipse.jdt.internal.ui.actions.CopyQualifiedNameAction.getQualifiedName(CopyQualifiedNameAction.java:261)
	at org.eclipse.jdt.internal.ui.actions.CopyQualifiedNameAction.run(CopyQualifiedNameAction.java:193)
	at org.eclipse.jface.action.Action.runWithEvent(Action.java:498)
	at org.eclipse.jface.action.ActionContributionItem.handleWidgetSelection(ActionContributionItem.java:584)
	at org.eclipse.jface.action.ActionContributionItem.access$2(ActionContributionItem.java:501)
	at org.eclipse.jface.action.ActionContributionItem$5.handleEvent(ActionContributionItem.java:411)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1053)
	at org.eclipse.swt.widgets.Display.runDeferredEvents(Display.java:4089)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3680)
	at org.eclipse.ui.internal.Workbench.runEventLoop(Workbench.java:2697)
	at org.eclipse.ui.internal.Workbench.runUI(Workbench.java:2661)
	at org.eclipse.ui.internal.Workbench.access$4(Workbench.java:2495)
	at org.eclipse.ui.internal.Workbench$7.run(Workbench.java:674)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:667)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:115)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:344)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:179)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:592)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:622)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:577)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1410)
	at org.eclipse.equinox.launcher.Main.main(Main.java:1386)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1866465</commentid>
    <comment_count>1</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-01-13 02:08:05 -0500</bug_when>
    <thetext>The problem is that JDT/Core assumes everywhere that a $ in the binding key would imply an innner type, and so a binding key such as A$B is always treated as type B enclosed by type A. Because of this whenever there&apos;s actually a $ in the type name, we split the type name at $. 
We should ideally change the representation of binding key for type names containing $ by inserting some escape character (preferably &apos;\&apos;), but this might break a lot of existing things which wouldnt expect a &apos;\&apos; in the binding key.

Specifically in this bug, the problem starts at SourceTypeBinding.computeUniqueKey(boolean). Since here we have the binding we can always query it for binding.isMemberType() and treat the dollar correctly, but then again in BindingKeyParser$Scanner.getNextToken(), we fumble on the dollar!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1866466</commentid>
    <comment_count>2</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-01-13 02:17:23 -0500</bug_when>
    <thetext>(In reply to comment #1)
Just an aferthought, why should java allow specifying a &apos;$&apos; in the name at all. I wish this could be changed. There are other currencies one can use. ;)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1866483</commentid>
    <comment_count>3</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2011-01-13 03:34:10 -0500</bug_when>
    <thetext>(In reply to comment #2)
&gt; (In reply to comment #1)
&gt; Just an aferthought, why should java allow specifying a &apos;$&apos; in the name at all.
&gt; I wish this could be changed. There are other currencies one can use. ;)

The name is indeed discouraged (see new wizard).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1866522</commentid>
    <comment_count>4</comment_count>
    <who name="Deepak Azad">deepakazad</who>
    <bug_when>2011-01-13 04:46:53 -0500</bug_when>
    <thetext>An extreme case

--------------------------------
class $ {
	class $$ extends ${
		class $$$ {
			
		}
	}
}
-------------------------------

Try Copy qualified name, Type Hierarchy on &apos;$$&apos; etc :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1866547</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-01-13 05:46:16 -0500</bug_when>
    <thetext>(In reply to comment #2)
&gt; (In reply to comment #1)
&gt; Just an aferthought, why should java allow specifying a &apos;$&apos; in the name at all.
&gt; I wish this could be changed. There are other currencies one can use. ;)

For Java, &apos;$&apos; is just a normal char, it&apos;s the encoding of inner types
that&apos;s a major PITA introduced in Java 1.1.

Some related bugs: bug 127739, bug 127749, bug 145598.
We&apos;ll be adding workarounds for the rest of our lives :-/
Note that bug 127749 isn&apos;t resolved as of today.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1866571</commentid>
    <comment_count>6</comment_count>
      <attachid>186715</attachid>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-01-13 06:50:30 -0500</bug_when>
    <thetext>Created attachment 186715
proposed fix

This patch takes care of all the above cases by making sure that the generated key from SourceTypeBinding.getUniqueKey() isn&apos;t bad in case of $ occuring in the name.

But this isn&apos;t fullproof. There can be other places that still break because of &apos;$&apos;. Like Stephan said, we could be coming across this forever, unless we add an escape character to the binding key. But since this is exposed to the outside world, doing so would break client code.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1866580</commentid>
    <comment_count>7</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-01-13 07:10:39 -0500</bug_when>
    <thetext>(In reply to comment #6)
&gt; But this isn&apos;t fullproof.

Even with the patch, the following still throws an exception:

class A$$ {
    void a() {
   }
}

at a completely different place:
java.lang.IllegalArgumentException
	at org.eclipse.jdt.core.Signature.getParameterCount(Signature.java:995)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1869792</commentid>
    <comment_count>8</comment_count>
      <attachid>187170</attachid>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-01-20 04:43:26 -0500</bug_when>
    <thetext>Created attachment 187170
proposed fix + regression tests

Same patch with tests.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1870551</commentid>
    <comment_count>9</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-01-21 02:17:46 -0500</bug_when>
    <thetext>Released in HEAD for 3.7M5</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1870552</commentid>
    <comment_count>10</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-01-21 02:18:18 -0500</bug_when>
    <thetext>To verify, use comment 0 and comment 4</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1872203</commentid>
    <comment_count>11</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2011-01-25 04:04:32 -0500</bug_when>
    <thetext>Verified in I20110124-1800.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>186715</attachid>
            <date>2011-01-13 06:50:00 -0500</date>
            <delta_ts>2011-01-20 04:43:26 -0500</delta_ts>
            <desc>proposed fix</desc>
            <filename>patch334119.txt</filename>
            <type>text/plain</type>
            <size>2498</size>
            <attacher name="Ayushman Jain">amj87.iitr</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMA0KI1Agb3JnLmVjbGlwc2UuamR0LmNvcmUN
CkluZGV4OiBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3Vw
L1NvdXJjZVR5cGVCaW5kaW5nLmphdmENCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NClJDUyBmaWxlOiAvY3Zzcm9vdC9l
Y2xpcHNlL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9sb29rdXAvU291cmNlVHlwZUJpbmRpbmcuamF2YSx2DQpyZXRyaWV2aW5n
IHJldmlzaW9uIDEuMTg0DQpkaWZmIC11IC1yMS4xODQgU291cmNlVHlwZUJpbmRpbmcuamF2YQ0K
LS0tIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU291
cmNlVHlwZUJpbmRpbmcuamF2YQk1IEphbiAyMDExIDE5OjU3OjI2IC0wMDAwCTEuMTg0DQorKysg
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Tb3VyY2VU
eXBlQmluZGluZy5qYXZhCTEzIEphbiAyMDExIDEwOjE5OjE3IC0wMDAwDQpAQCAtNjM5LDcgKzYz
OSwxMyBAQA0KIAkJc3RhcnQgPSBDaGFyT3BlcmF0aW9uLmxhc3RJbmRleE9mKCcvJywgdW5pcXVl
S2V5KSArIDE7DQogCQlpZiAoc3RhcnQgPT0gMCkNCiAJCQlzdGFydCA9IDE7IC8vIHN0YXJ0IGFm
dGVyIEwNCi0JCWVuZCA9IENoYXJPcGVyYXRpb24uaW5kZXhPZignJCcsIHVuaXF1ZUtleSwgc3Rh
cnQpOw0KKwkJaWYgKHRoaXMuaXNNZW1iZXJUeXBlKCkpIHsNCisJCQllbmQgPSBDaGFyT3BlcmF0
aW9uLmluZGV4T2YoJyQnLCB1bmlxdWVLZXksIHN0YXJ0KTsNCisJCX0gZWxzZSB7DQorCQkJLy8g
JyQnIGlzIHBhcnQgb2YgdGhlIHR5cGUgbmFtZQ0KKwkJCWVuZCA9IC0xOw0KKwkJfQ0KKwkJLy9p
ZiAoQ2hhck9wZXJhdGlvbi5pbmRleE9mKCc7JywgdW5pcXVlS2V5LCBzdGFydCkgPT0gZW5kMiAr
IDEpDQogCQlpZiAoZW5kID09IC0xKQ0KIAkJCWVuZCA9IENoYXJPcGVyYXRpb24uaW5kZXhPZign
PCcsIHVuaXF1ZUtleSwgc3RhcnQpOw0KIAkJaWYgKGVuZCA9PSAtMSkNCkluZGV4OiBtb2RlbC9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS91dGlsL0JpbmRpbmdLZXlQYXJzZXIuamF2YQ0K
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PQ0KUkNTIGZpbGU6IC9jdnNyb290L2VjbGlwc2Uvb3JnLmVjbGlwc2UuamR0LmNv
cmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvdXRpbC9CaW5kaW5nS2V5UGFy
c2VyLmphdmEsdg0KcmV0cmlldmluZyByZXZpc2lvbiAxLjQxDQpkaWZmIC11IC1yMS40MSBCaW5k
aW5nS2V5UGFyc2VyLmphdmENCi0tLSBtb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29y
ZS91dGlsL0JpbmRpbmdLZXlQYXJzZXIuamF2YQkxOCBNYXIgMjAxMCAxNjoxODo1OCAtMDAwMAkx
LjQxDQorKysgbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvdXRpbC9CaW5kaW5n
S2V5UGFyc2VyLmphdmEJMTMgSmFuIDIwMTEgMTA6MTk6MTcgLTAwMDANCkBAIC0xLDUgKzEsNSBA
QA0KIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqDQotICogQ29weXJpZ2h0IChjKSAyMDA1LCAyMDEw
IElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLg0KKyAqIENvcHlyaWdodCAoYykgMjAwNSwgMjAx
MSBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4NCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBU
aGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzDQogICogYXJlIG1hZGUg
YXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2
MS4wDQogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFp
bGFibGUgYXQNCkBAIC03MzEsNiArNzMxLDkgQEANCiAJCWlmICghdGhpcy5zY2FubmVyLmlzQXRN
ZW1iZXJUeXBlU3RhcnQoKSB8fCB0aGlzLnNjYW5uZXIubmV4dFRva2VuKCkgIT0gU2Nhbm5lci5U
WVBFKQ0KIAkJCXJldHVybjsNCiAJCWNoYXJbXSB0eXBlTmFtZSA9IHRoaXMuc2Nhbm5lci5nZXRU
b2tlblNvdXJjZSgpOw0KKwkJLy8gTWlnaHQgbm90IGFjdHVhbGx5IGJlIGFuIGlubmVyIHR5cGUg
YnV0IGNhbWUgaGVyZSBhcyBhIGNvbnNlcXVlbmNlIG9mICckJyBiZWluZyBwcmVzZW50IGluIHR5
cGUgbmFtZQ0KKwkJaWYgKHR5cGVOYW1lLmxlbmd0aCA9PSAwKQ0KKwkJCXJldHVybjsNCiAJCWlm
IChDaGFyYWN0ZXIuaXNEaWdpdCh0eXBlTmFtZVswXSkpIHsNCiAJCQkvLyBhbm9ueW1vdXMgb3Ig
bG9jYWwgdHlwZQ0KIAkJCWludCBuZXh0VG9rZW4gPSBTY2FubmVyLlRZUEU7DQo=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>187170</attachid>
            <date>2011-01-20 04:43:00 -0500</date>
            <delta_ts>2011-01-20 04:43:26 -0500</delta_ts>
            <desc>proposed fix + regression tests</desc>
            <filename>patch334119.txt</filename>
            <type>text/plain</type>
            <size>4429</size>
            <attacher name="Ayushman Jain">amj87.iitr</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMA0KI1Agb3JnLmVjbGlwc2UuamR0LmNvcmUN
CkluZGV4OiBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3Vw
L1NvdXJjZVR5cGVCaW5kaW5nLmphdmENCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NClJDUyBmaWxlOiAvY3Zzcm9vdC9l
Y2xpcHNlL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9sb29rdXAvU291cmNlVHlwZUJpbmRpbmcuamF2YSx2DQpyZXRyaWV2aW5n
IHJldmlzaW9uIDEuMTg2DQpkaWZmIC11IC1yMS4xODYgU291cmNlVHlwZUJpbmRpbmcuamF2YQ0K
LS0tIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU291
cmNlVHlwZUJpbmRpbmcuamF2YQkxNiBKYW4gMjAxMSAyMjo0MzoyMSAtMDAwMAkxLjE4Ng0KKysr
IGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU291cmNl
VHlwZUJpbmRpbmcuamF2YQkyMCBKYW4gMjAxMSAwOTo0MjoxNiAtMDAwMA0KQEAgLTYzOSw3ICs2
MzksMTIgQEANCiAJCXN0YXJ0ID0gQ2hhck9wZXJhdGlvbi5sYXN0SW5kZXhPZignLycsIHVuaXF1
ZUtleSkgKyAxOw0KIAkJaWYgKHN0YXJ0ID09IDApDQogCQkJc3RhcnQgPSAxOyAvLyBzdGFydCBh
ZnRlciBMDQotCQllbmQgPSBDaGFyT3BlcmF0aW9uLmluZGV4T2YoJyQnLCB1bmlxdWVLZXksIHN0
YXJ0KTsNCisJCWlmICh0aGlzLmlzTWVtYmVyVHlwZSgpKSB7DQorCQkJZW5kID0gQ2hhck9wZXJh
dGlvbi5pbmRleE9mKCckJywgdW5pcXVlS2V5LCBzdGFydCk7DQorCQl9IGVsc2Ugew0KKwkJCS8v
ICckJyBpcyBwYXJ0IG9mIHRoZSB0eXBlIG5hbWUNCisJCQllbmQgPSAtMTsNCisJCX0NCiAJCWlm
IChlbmQgPT0gLTEpDQogCQkJZW5kID0gQ2hhck9wZXJhdGlvbi5pbmRleE9mKCc8JywgdW5pcXVl
S2V5LCBzdGFydCk7DQogCQlpZiAoZW5kID09IC0xKQ0KSW5kZXg6IG1vZGVsL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb3JlL3V0aWwvQmluZGluZ0tleVBhcnNlci5qYXZhDQo9PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
DQpSQ1MgZmlsZTogL2N2c3Jvb3QvZWNsaXBzZS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS91dGlsL0JpbmRpbmdLZXlQYXJzZXIuamF2YSx2
DQpyZXRyaWV2aW5nIHJldmlzaW9uIDEuNDENCmRpZmYgLXUgLXIxLjQxIEJpbmRpbmdLZXlQYXJz
ZXIuamF2YQ0KLS0tIG1vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3V0aWwvQmlu
ZGluZ0tleVBhcnNlci5qYXZhCTE4IE1hciAyMDEwIDE2OjE4OjU4IC0wMDAwCTEuNDENCisrKyBt
b2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS91dGlsL0JpbmRpbmdLZXlQYXJzZXIu
amF2YQkyMCBKYW4gMjAxMSAwOTo0MjoxNiAtMDAwMA0KQEAgLTEsNSArMSw1IEBADQogLyoqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioNCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDUsIDIwMTAgSUJNIENvcnBv
cmF0aW9uIGFuZCBvdGhlcnMuDQorICogQ29weXJpZ2h0IChjKSAyMDA1LCAyMDExIElCTSBDb3Jw
b3JhdGlvbiBhbmQgb3RoZXJzLg0KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3Jh
bSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMNCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUg
dW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjANCiAgKiB3
aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdA0K
QEAgLTczMSw2ICs3MzEsOSBAQA0KIAkJaWYgKCF0aGlzLnNjYW5uZXIuaXNBdE1lbWJlclR5cGVT
dGFydCgpIHx8IHRoaXMuc2Nhbm5lci5uZXh0VG9rZW4oKSAhPSBTY2FubmVyLlRZUEUpDQogCQkJ
cmV0dXJuOw0KIAkJY2hhcltdIHR5cGVOYW1lID0gdGhpcy5zY2FubmVyLmdldFRva2VuU291cmNl
KCk7DQorCQkvLyBNaWdodCBub3QgYWN0dWFsbHkgYmUgYW4gaW5uZXIgdHlwZSBidXQgY2FtZSBo
ZXJlIGFzIGEgY29uc2VxdWVuY2Ugb2YgJyQnIGJlaW5nIHByZXNlbnQgaW4gdHlwZSBuYW1lDQor
CQlpZiAodHlwZU5hbWUubGVuZ3RoID09IDApDQorCQkJcmV0dXJuOw0KIAkJaWYgKENoYXJhY3Rl
ci5pc0RpZ2l0KHR5cGVOYW1lWzBdKSkgew0KIAkJCS8vIGFub255bW91cyBvciBsb2NhbCB0eXBl
DQogCQkJaW50IG5leHRUb2tlbiA9IFNjYW5uZXIuVFlQRTsNCiNQIG9yZy5lY2xpcHNlLmpkdC5j
b3JlLnRlc3RzLm1vZGVsDQpJbmRleDogc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Rv
bS9BU1RDb252ZXJ0ZXIxNVRlc3QuamF2YQ0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KUkNTIGZpbGU6IC9jdnNyb290
L2VjbGlwc2Uvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNl
L2pkdC9jb3JlL3Rlc3RzL2RvbS9BU1RDb252ZXJ0ZXIxNVRlc3QuamF2YSx2DQpyZXRyaWV2aW5n
IHJldmlzaW9uIDEuMzAxDQpkaWZmIC11IC1yMS4zMDEgQVNUQ29udmVydGVyMTVUZXN0LmphdmEN
Ci0tLSBzcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvZG9tL0FTVENvbnZlcnRlcjE1VGVz
dC5qYXZhCTcgSmFuIDIwMTEgMTU6MTA6MjIgLTAwMDAJMS4zMDENCisrKyBzcmMvb3JnL2VjbGlw
c2UvamR0L2NvcmUvdGVzdHMvZG9tL0FTVENvbnZlcnRlcjE1VGVzdC5qYXZhCTIwIEphbiAyMDEx
IDA5OjQyOjE4IC0wMDAwDQpAQCAtMTEyMDAsNCArMTEyMDAsNDAgQEANCiAJCWFzc2VydE5vdE51
bGwoIk5vIGJpbmRpbmciLCBiaW5kaW5nKTsNCiAJCWFzc2VydEVxdWFscygiV3JvbmcgcXVhbGlm
aWVkIG5hbWUiLCAidGVzdDAzNDcuT3V0ZXI8amF2YS5sYW5nLkludGVnZXI+IiwgYmluZGluZy5n
ZXRRdWFsaWZpZWROYW1lKCkpOw0KIAl9DQotfQ0KXCBObyBuZXdsaW5lIGF0IGVuZCBvZiBmaWxl
DQorCQ0KKwkvKg0KKwkgKiBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5j
Z2k/aWQ9MzM0MTE5DQorCSAqIEVuc3VyZXMgdGhhdCBkb2xsYXIgaW4gYSB0eXBlIG5hbWUgaXMg
bm90IGNvbmZ1c2VkIGFzIHRoZSBzdGFydGluZyBvZiBtZW1iZXIgdHlwZQ0KKwkgKi8NCisJcHVi
bGljIHZvaWQgdGVzdDAzNDhhKCkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbiB7DQorCQl0aGlz
LndvcmtpbmdDb3B5ID0gZ2V0V29ya2luZ0NvcHkoIi9Db252ZXJ0ZXIxNS9zcmMvcC9YJFkuamF2
YSIsIHRydWUvKnJlc29sdmUqLyk7DQorCQlBU1ROb2RlIG5vZGUgPSBidWlsZEFTVCgNCisJCQki
cGFja2FnZSBwO1xuIiArDQorCQkJIi8qc3RhcnQqL3B1YmxpYyBjbGFzcyBYJFkge1xuIiArDQor
CQkJIn0vKmVuZCovIiwNCisJCQl0aGlzLndvcmtpbmdDb3B5LA0KKwkJCWZhbHNlKTsNCisJCUlC
aW5kaW5nIGJpbmRpbmcgPSAoKFR5cGVEZWNsYXJhdGlvbikgbm9kZSkucmVzb2x2ZUJpbmRpbmco
KTsNCisJCWFzc2VydEJpbmRpbmdLZXlFcXVhbHMoDQorCQkJCSJMcC9YJFk7IiwJLy8gc2hvdWxk
IG5vdCBiZSBMcC9YJFktWCRZOw0KKwkJCWJpbmRpbmcuZ2V0S2V5KCkpOw0KKwl9DQorCQ0KKwkv
Kg0KKwkgKiBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzM0
MTE5DQorCSAqIEVuc3VyZXMgdGhhdCBkb2xsYXIgaW4gYSB0eXBlIG5hbWUgaXMgbm90IGNvbmZ1
c2VkIGFzIHRoZSBzdGFydGluZyBvZiBtZW1iZXIgdHlwZQ0KKwkgKi8NCisJcHVibGljIHZvaWQg
dGVzdDAzNDhiKCkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlvbiB7DQorCQl0aGlzLndvcmtpbmdD
b3B5ID0gZ2V0V29ya2luZ0NvcHkoIi9Db252ZXJ0ZXIxNS9zcmMvcC9YJC5qYXZhIiwgdHJ1ZS8q
cmVzb2x2ZSovKTsNCisJCUFTVE5vZGUgbm9kZSA9IGJ1aWxkQVNUKA0KKwkJCSJwYWNrYWdlIHA7
XG4iICsNCisJCQkiLypzdGFydCovcHVibGljIGNsYXNzIFgkIHtcbiIgKw0KKwkJCSJ9LyplbmQq
LyIsDQorCQkJdGhpcy53b3JraW5nQ29weSwNCisJCQlmYWxzZSk7DQorCQlJQmluZGluZyBiaW5k
aW5nID0gKChUeXBlRGVjbGFyYXRpb24pIG5vZGUpLnJlc29sdmVCaW5kaW5nKCk7DQorCQlhc3Nl
cnRCaW5kaW5nS2V5RXF1YWxzKA0KKwkJCQkiTHAvWCQ7IiwJLy8gc2hvdWxkIG5vdCBiZSBMcC9Y
JH5YJDsNCisJCQliaW5kaW5nLmdldEtleSgpKTsNCisJfQ0KK30NCg==
</data>

          </attachment>
      

    </bug>

</bugzilla>