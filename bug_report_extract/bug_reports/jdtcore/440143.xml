<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>440143</bug_id>
          
          <creation_ts>2014-07-22 12:20:00 -0400</creation_ts>
          <short_desc>[1.8][null] one more case of contradictory null annotations regarding type variables</short_desc>
          <delta_ts>2014-08-06 02:00:22 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.5 M1</target_milestone>
          
          <blocked>438458</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Stephan Herrmann">stephan.herrmann</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2430406</commentid>
    <comment_count>0</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-07-22 12:20:09 -0400</bug_when>
    <thetext>Example from https://www.eclipse.org/forums/index.php/mv/msg/781138/1384369/#msg_1384369

//---
import org.eclipse.jdt.annotation.*;

public class Test7&lt;@Nullable E&gt; {
	E e;

	@Nullable
	E test() {
		return null;
	}

	@NonNull
	E getNotNull() {
		if (e == null)
			throw new NullPointerException();
		else
			return e;
	}
}
//---

triggers this error against getNotNull():

Contradictory null specification; only one of @NonNull and @Nullable can be specified at any location

Literally speaking this error can be regarded as correct, but we actually want to always consider &apos;@NonNull E&apos; as: &quot;The @NonNull variant of whatever type E represents&quot;.
Hence this program should be legal, too.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2430475</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-07-22 14:42:18 -0400</bug_when>
    <thetext>Released for 4.5 M1 via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=fa4debd5be46821e4afe7fa2082f7a976e89007c

While fixing this I found that typeSystem.getUnannotatedType() does not work for a TVB with declaration-site annotations, because typeSystem expects the naked type at position 0, but actually no unannotated type was registered. Fixed by cloning and registering a TVB before setting type annotations.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2435561</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-08-05 05:23:59 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #0)
&gt; Example from
&gt; https://www.eclipse.org/forums/index.php/mv/msg/781138/1384369/#msg_1384369
&gt; 
&gt; //---
&gt; import org.eclipse.jdt.annotation.*;
&gt; 
&gt; public class Test7&lt;@Nullable E&gt; {
&gt; 	E e;
&gt; 
&gt; 	@Nullable
&gt; 	E test() {
&gt; 		return null;
&gt; 	}
&gt; 
&gt; 	@NonNull
&gt; 	E getNotNull() {
&gt; 		if (e == null)
&gt; 			throw new NullPointerException();
&gt; 		else
&gt; 			return e;
&gt; 	}
&gt; }
&gt; //---
&gt; 
&gt; triggers this error against getNotNull():

Stephan, this program triggers:

Description	Resource	Path	Location	Type
Null type mismatch (type annotations): required &apos;@NonNull E&apos; but this expression has type &apos;@Nullable E&apos;	Test7.java	/P/src	line 16	Java Problem

against the &quot;return e;&quot; - Is this expected (with or without syntactic null
analysis turned on ?)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2435604</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-08-05 06:36:09 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #2)
&gt; (In reply to Stephan Herrmann from comment #0)
&gt; &gt; Example from
&gt; &gt; https://www.eclipse.org/forums/index.php/mv/msg/781138/1384369/#msg_1384369
&gt; &gt; 
&gt; &gt; //---
&gt; &gt; import org.eclipse.jdt.annotation.*;
&gt; &gt; 
&gt; &gt; public class Test7&lt;@Nullable E&gt; {
&gt; &gt; 	E e;
&gt; &gt; 
&gt; &gt; 	@Nullable
&gt; &gt; 	E test() {
&gt; &gt; 		return null;
&gt; &gt; 	}
&gt; &gt; 
&gt; &gt; 	@NonNull
&gt; &gt; 	E getNotNull() {
&gt; &gt; 		if (e == null)
&gt; &gt; 			throw new NullPointerException();
&gt; &gt; 		else
&gt; &gt; 			return e;
&gt; &gt; 	}
&gt; &gt; }
&gt; &gt; //---
&gt; &gt; 
&gt; &gt; triggers this error against getNotNull():
&gt; 
&gt; Stephan, this program triggers:
&gt; 
&gt; Description	Resource	Path	Location	Type
&gt; Null type mismatch (type annotations): required &apos;@NonNull E&apos; but this
&gt; expression has type &apos;@Nullable E&apos;	Test7.java	/P/src	line 16	Java Problem
&gt; 
&gt; against the &quot;return e;&quot; - Is this expected (with or without syntactic null
&gt; analysis turned on ?)

Yes, this is expected.

Applying quick assist &quot;invert if&quot; resolves that issue, the resulting variant is detected by syntactic analysis:

//---
import org.eclipse.jdt.annotation.*;

public class Test7&lt;@Nullable E&gt; {
    E e;

    @Nullable
    E test() {
        return null;
    }

    @NonNull
    E getNotNull() {
        if (e != null)
            return e;
        else
            throw new NullPointerException();
    }
}
//---

I see that saying &quot;has type @Nullable E&quot; is not optimal, since no explicit annotation exists for &apos;e&apos;, but that&apos;s a result of the (necessarily) pessimistic interpretation of free type variables.

I&apos;d argue that the following - though being &quot;more correct&quot; - would be overkill:
  &quot;this expression can have type &apos;@Nullable E&apos;&quot;.

First: users still don&apos;t know what decides whether or not it has that type.

Second: I don&apos;t think we have the information in the compiler to distinguish &quot;has type&quot; vs. &quot;can have type&quot;.

That&apos;s why I believe the current state is &quot;good enough&quot;.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2436080</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-08-06 02:00:22 -0400</bug_when>
    <thetext>Verified for 4.5 M1 using 
Version: Mars (4.5)
Build id: I20140804-2000</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>