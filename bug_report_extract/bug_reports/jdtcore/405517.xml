<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>405517</bug_id>
          
          <creation_ts>2013-04-11 16:15:00 -0400</creation_ts>
          <short_desc>[1.8] IMethod#getFlags() and IMethodBinding#getModifiers(): What about default flags?</short_desc>
          <delta_ts>2013-07-10 10:28:13 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>405704</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Markus Keller">markus_keller</reporter>
          <assigned_to name="Markus Keller">markus_keller</assigned_to>
          <cc>jarthana</cc>
    
    <cc>manju656</cc>
    
    <cc>markus_keller</cc>
    
    <cc>noopur_gupta</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="56530"
          type_id="1"
          status="+"
          setter="jarthana"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2242770</commentid>
    <comment_count>0</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-04-11 16:15:49 -0400</bug_when>
    <thetext>Follow-up to bug 399791. That bug only added API in Flags for AccDefaultMethod, but the flag isn&apos;t actually returned by IMethod#getFlags().

On the other hand IMethod#getFlags() currently includes the unspecified Bit18 (ClassFileConstants.AccAnnotationDefault) for an annotation type method with a default value, e.g. javax.annotation.Generated#date() -- but ONLY if it&apos;s coming from a class file. For source files, it&apos;s masked away in SourceElementNotifier
#notifySourceElementRequestor(AbstractMethodDeclaration, ...)


For IMethod#getFlags() and IMethodBinding#getModifiers(), we need to decide which of these flags to include:

- Flags/ClassFileConstants#AccDeprecated:
included in getFlags(), but not in getModifiers() (spec&apos;d like this)
=&gt; keep it like this

- ClassFileConstants#AccAnnotationDefault (no API yet):
sometimes included in getFlags()
=&gt; needs a new API constant in Flags
=&gt; getFlags(): should always be returned since we may want to show this in the element icon
=&gt; getModifiers(): not necessary; checking IMethodBinding#getDefaultValue() for null is good enough

- Flags/ExtraCompilerModifiers#AccDefaultMethod:
currently not returned anywhere
=&gt; getFlags(): should always be returned since we may want to show this in the element icon; absence of &apos;abstract&apos; is not enough to detect this in source
=&gt; getModifiers(): not necessary; if declaring type is an interface type and IMethodBinding#getModifiers() includes &apos;abstract&apos;, then we know it&apos;s a default method.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2242771</commentid>
    <comment_count>1</comment_count>
      <attachid>229644</attachid>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-04-11 16:17:10 -0400</bug_when>
    <thetext>Created attachment 229644
Fix</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2242772</commentid>
    <comment_count>2</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-04-11 16:18:54 -0400</bug_when>
    <thetext>Srikanth/Jay, is this OK for you?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2242873</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-04-11 23:57:29 -0400</bug_when>
    <thetext>(In reply to comment #2)
&gt; Srikanth/Jay, is this OK for you?

Jay, please take a look, Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2242964</commentid>
    <comment_count>4</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-04-12 05:47:21 -0400</bug_when>
    <thetext>The AccAnnotationDefault changes could theoretically also go into master.
But since nobody complained about this, I don&apos;t think it&apos;s worth the hassle.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2243692</commentid>
    <comment_count>5</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-04-15 09:32:50 -0400</bug_when>
    <thetext>(In reply to comment #2)
&gt; Srikanth/Jay, is this OK for you?

This is fine by me. I also agree with not releasing this for master.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2243715</commentid>
    <comment_count>6</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-04-15 10:21:33 -0400</bug_when>
    <thetext>Thanks, fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=2b0e753de92cc29b7a8b55b07153a9f3b515c0be .

I&apos;ve included a small fix in BinaryMethods: Static methods should not be flagged as default.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2246103</commentid>
    <comment_count>7</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-04-19 09:58:02 -0400</bug_when>
    <thetext>(In reply to comment #0)
&gt; - Flags/ExtraCompilerModifiers#AccDefaultMethod:
&gt; =&gt; getModifiers(): not necessary; if declaring type is an interface type and
&gt; IMethodBinding#getModifiers() includes &apos;abstract&apos;, then we know it&apos;s a
&gt; default method.

Should be: if declaring type is an interface type and IMethodBinding#getModifiers() includes neither of &apos;abstract&apos; and &apos;static&apos;, then we know it&apos;s a default method.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2274526</commentid>
    <comment_count>8</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-06-19 13:24:40 -0400</bug_when>
    <thetext>I&apos;ve added some more Javadoc fixes, mainly to clarify when IMethod#getFlags() returns derived flags: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=6ae5b75e45a8ed1fe5a89bb3aa53c58ea92d4b35</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>229644</attachid>
            <date>2013-04-11 16:17:00 -0400</date>
            <delta_ts>2013-04-11 16:17:10 -0400</delta_ts>
            <desc>Fix</desc>
            <filename>eclipse.jdt.core.patch</filename>
            <type>text/plain</type>
            <size>6761</size>
            <attacher name="Markus Keller">markus_keller</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMAojUCBvcmcuZWNsaXBzZS5qZHQuY29yZQpk
aWZmIC0tZ2l0IG1vZGVsL29yZy9lY2xpcHNlL2pkdC9jb3JlL0ZsYWdzLmphdmEgbW9kZWwvb3Jn
L2VjbGlwc2UvamR0L2NvcmUvRmxhZ3MuamF2YQppbmRleCA1ZTEzNTc5Li5hZTM1OTI4IDEwMDY0
NAotLS0gbW9kZWwvb3JnL2VjbGlwc2UvamR0L2NvcmUvRmxhZ3MuamF2YQorKysgbW9kZWwvb3Jn
L2VjbGlwc2UvamR0L2NvcmUvRmxhZ3MuamF2YQpAQCAtMTU2LDcgKzE1Niw3IEBACiAJcHVibGlj
IHN0YXRpYyBmaW5hbCBpbnQgQWNjQW5ub3RhdGlvbiA9IENsYXNzRmlsZUNvbnN0YW50cy5BY2NB
bm5vdGF0aW9uOwogCiAJLyoqCi0JICogRGVmYXVsdCBtZXRob2QgcHJvcGVydHkgZmxhZyAoYWRk
ZWQgaW4gSjJTRSA4KS4KKwkgKiBEZWZhdWx0IG1ldGhvZCBwcm9wZXJ0eSBmbGFnLgogCSAqIDxw
PgogCSAqIE5vdGUgdGhhdCB0aGlzIGZsYWcncyB2YWx1ZSBpcyBpbnRlcm5hbCBhbmQgaXMgbm90
IGRlZmluZWQgaW4gdGhlCiAJICogVmlydHVhbCBNYWNoaW5lIHNwZWNpZmljYXRpb24uCkBAIC0x
NjUsNiArMTY1LDE3IEBACiAJICovCiAJcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgQWNjRGVmYXVs
dE1ldGhvZCA9IEV4dHJhQ29tcGlsZXJNb2RpZmllcnMuQWNjRGVmYXVsdE1ldGhvZDsKIAorCS8q
KgorCSAqIEFubm90YXRpb24gbWV0aG9kIGRlZmF1bHQgcHJvcGVydHkgZmxhZy4KKwkgKiBVc2Vk
IHRvIGZsYWcgYW5ub3RhdGlvbiB0eXBlIG1ldGhvZHMgdGhhdCBkZWNsYXJlIGEgZGVmYXVsdCB2
YWx1ZS4KKwkgKiA8cD4KKwkgKiBOb3RlIHRoYXQgdGhpcyBmbGFnJ3MgdmFsdWUgaXMgaW50ZXJu
YWwgYW5kIGlzIG5vdCBkZWZpbmVkIGluIHRoZQorCSAqIFZpcnR1YWwgTWFjaGluZSBzcGVjaWZp
Y2F0aW9uLgorCSAqIDwvcD4KKwkgKiBAc2luY2UgMy45CisJICovCisJcHVibGljIHN0YXRpYyBm
aW5hbCBpbnQgQWNjQW5ub3RhdGlvbkRlZmF1bHQgPSBDbGFzc0ZpbGVDb25zdGFudHMuQWNjQW5u
b3RhdGlvbkRlZmF1bHQ7CisJCiAJLyoqCiAJICogTm90IGluc3RhbnRpYWJsZS4KIAkgKi8KQEAg
LTM4OCw2ICszOTksMTggQEAKIAl9CiAKIAkvKioKKwkgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGdp
dmVuIGludGVnZXIgaGFzIHRoZSA8Y29kZT5BY2NBbm5ub3RhdGlvbkRlZmF1bHQ8L2NvZGU+CisJ
ICogYml0IHNldC4KKwkgKgorCSAqIEByZXR1cm4gPGNvZGU+dHJ1ZTwvY29kZT4gaWYgdGhlIDxj
b2RlPkFjY0Fubm90YXRpb25EZWZhdWx0PC9jb2RlPiBmbGFnIGlzIGluY2x1ZGVkCisJICogQHNl
ZSAjQWNjQW5ub3RhdGlvbkRlZmF1bHQKKwkgKiBAc2luY2UgMy45CisJICovCisJcHVibGljIHN0
YXRpYyBib29sZWFuIGlzQW5ubm90YXRpb25EZWZhdWx0KGludCBmbGFncykgeworCQlyZXR1cm4g
KGZsYWdzICYgQWNjQW5ub3RhdGlvbkRlZmF1bHQpICE9IDA7CisJfQorCQorCS8qKgogCSAqIFJl
dHVybnMgYSBzdGFuZGFyZCBzdHJpbmcgZGVzY3JpYmluZyB0aGUgZ2l2ZW4gbW9kaWZpZXIgZmxh
Z3MuCiAJICogT25seSBtb2RpZmllciBmbGFncyBhcmUgaW5jbHVkZWQgaW4gdGhlIG91dHB1dDsg
ZGVwcmVjYXRlZCwKIAkgKiBzeW50aGV0aWMsIGJyaWRnZSwgZXRjLiBmbGFncyBhcmUgaWdub3Jl
ZC4KZGlmZiAtLWdpdCBtb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvU291
cmNlRWxlbWVudE5vdGlmaWVyLmphdmEgbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL1NvdXJjZUVsZW1lbnROb3RpZmllci5qYXZhCmluZGV4IGNlMTk5MDkuLjBlYWZiZmQg
MTAwNjQ0Ci0tLSBtb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvU291cmNl
RWxlbWVudE5vdGlmaWVyLmphdmEKKysrIG1vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9Tb3VyY2VFbGVtZW50Tm90aWZpZXIuamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDgsIDIwMTEgSUJNIENvcnBv
cmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDgsIDIwMTMgSUJNIENvcnBv
cmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0g
YW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5k
ZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNo
IGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC0y
ODQsMTYgKzI4NCwxNiBAQAogCQlzZWxlY3RvclNvdXJjZUVuZCA9IHRoaXMuc291cmNlRW5kcy5n
ZXQobWV0aG9kRGVjbGFyYXRpb24pOwogCQlpZiAoaXNJblJhbmdlKXsKIAkJCWludCBjdXJyZW50
TW9kaWZpZXJzID0gbWV0aG9kRGVjbGFyYXRpb24ubW9kaWZpZXJzOworCQkJY3VycmVudE1vZGlm
aWVycyAmPSBFeHRyYUNvbXBpbGVyTW9kaWZpZXJzLkFjY0p1c3RGbGFnIHwgQ2xhc3NGaWxlQ29u
c3RhbnRzLkFjY0RlcHJlY2F0ZWQ7CiAJCQlpZiAoaXNWYXJBcmdzKQogCQkJCWN1cnJlbnRNb2Rp
ZmllcnMgfD0gQ2xhc3NGaWxlQ29uc3RhbnRzLkFjY1ZhcmFyZ3M7Ci0KLQkJCS8vIHJlbWVtYmVy
IGRlcHJlY2F0aW9uIHNvIGFzIHRvIG5vdCBsb3NlIGl0IGJlbG93Ci0JCQlib29sZWFuIGRlcHJl
Y2F0ZWQgPSAoY3VycmVudE1vZGlmaWVycyAmIENsYXNzRmlsZUNvbnN0YW50cy5BY2NEZXByZWNh
dGVkKSAhPSAwIHx8IGhhc0RlcHJlY2F0ZWRBbm5vdGF0aW9uKG1ldGhvZERlY2xhcmF0aW9uLmFu
bm90YXRpb25zKTsKKwkJCWlmIChoYXNEZXByZWNhdGVkQW5ub3RhdGlvbihtZXRob2REZWNsYXJh
dGlvbi5hbm5vdGF0aW9ucykpCisJCQkJY3VycmVudE1vZGlmaWVycyB8PSBDbGFzc0ZpbGVDb25z
dGFudHMuQWNjRGVwcmVjYXRlZDsKIAogCQkJSVNvdXJjZUVsZW1lbnRSZXF1ZXN0b3IuTWV0aG9k
SW5mbyBtZXRob2RJbmZvID0gbmV3IElTb3VyY2VFbGVtZW50UmVxdWVzdG9yLk1ldGhvZEluZm8o
KTsKIAkJCW1ldGhvZEluZm8uaXNDb25zdHJ1Y3RvciA9IHRydWU7CiAJCQltZXRob2RJbmZvLmRl
Y2xhcmF0aW9uU3RhcnQgPSBtZXRob2REZWNsYXJhdGlvbi5kZWNsYXJhdGlvblNvdXJjZVN0YXJ0
OwotCQkJbWV0aG9kSW5mby5tb2RpZmllcnMgPSBkZXByZWNhdGVkID8gKGN1cnJlbnRNb2RpZmll
cnMgJiBFeHRyYUNvbXBpbGVyTW9kaWZpZXJzLkFjY0p1c3RGbGFnKSB8IENsYXNzRmlsZUNvbnN0
YW50cy5BY2NEZXByZWNhdGVkIDogY3VycmVudE1vZGlmaWVycyAmIEV4dHJhQ29tcGlsZXJNb2Rp
ZmllcnMuQWNjSnVzdEZsYWc7CisJCQltZXRob2RJbmZvLm1vZGlmaWVycyA9IGN1cnJlbnRNb2Rp
ZmllcnM7CiAJCQltZXRob2RJbmZvLm5hbWUgPSBtZXRob2REZWNsYXJhdGlvbi5zZWxlY3RvcjsK
IAkJCW1ldGhvZEluZm8ubmFtZVNvdXJjZVN0YXJ0ID0gbWV0aG9kRGVjbGFyYXRpb24uc291cmNl
U3RhcnQ7CiAJCQltZXRob2RJbmZvLm5hbWVTb3VyY2VFbmQgPSBzZWxlY3RvclNvdXJjZUVuZDsK
QEAgLTM0MCwxMSArMzQwLDExIEBACiAJc2VsZWN0b3JTb3VyY2VFbmQgPSB0aGlzLnNvdXJjZUVu
ZHMuZ2V0KG1ldGhvZERlY2xhcmF0aW9uKTsKIAlpZiAoaXNJblJhbmdlKSB7CiAJCWludCBjdXJy
ZW50TW9kaWZpZXJzID0gbWV0aG9kRGVjbGFyYXRpb24ubW9kaWZpZXJzOworCQljdXJyZW50TW9k
aWZpZXJzICY9IEV4dHJhQ29tcGlsZXJNb2RpZmllcnMuQWNjSnVzdEZsYWcgfCBDbGFzc0ZpbGVD
b25zdGFudHMuQWNjRGVwcmVjYXRlZCB8IENsYXNzRmlsZUNvbnN0YW50cy5BY2NBbm5vdGF0aW9u
RGVmYXVsdCB8IEV4dHJhQ29tcGlsZXJNb2RpZmllcnMuQWNjRGVmYXVsdE1ldGhvZDsKIAkJaWYg
KGlzVmFyQXJncykKIAkJCWN1cnJlbnRNb2RpZmllcnMgfD0gQ2xhc3NGaWxlQ29uc3RhbnRzLkFj
Y1ZhcmFyZ3M7Ci0KLQkJLy8gcmVtZW1iZXIgZGVwcmVjYXRpb24gc28gYXMgdG8gbm90IGxvc2Ug
aXQgYmVsb3cKLQkJYm9vbGVhbiBkZXByZWNhdGVkID0gKGN1cnJlbnRNb2RpZmllcnMgJiBDbGFz
c0ZpbGVDb25zdGFudHMuQWNjRGVwcmVjYXRlZCkgIT0gMCB8fCBoYXNEZXByZWNhdGVkQW5ub3Rh
dGlvbihtZXRob2REZWNsYXJhdGlvbi5hbm5vdGF0aW9ucyk7CisJCWlmIChoYXNEZXByZWNhdGVk
QW5ub3RhdGlvbihtZXRob2REZWNsYXJhdGlvbi5hbm5vdGF0aW9ucykpCisJCQljdXJyZW50TW9k
aWZpZXJzIHw9IENsYXNzRmlsZUNvbnN0YW50cy5BY2NEZXByZWNhdGVkOwogCiAJCVR5cGVSZWZl
cmVuY2UgcmV0dXJuVHlwZSA9IG1ldGhvZERlY2xhcmF0aW9uIGluc3RhbmNlb2YgTWV0aG9kRGVj
bGFyYXRpb24KIAkJCT8gKChNZXRob2REZWNsYXJhdGlvbikgbWV0aG9kRGVjbGFyYXRpb24pLnJl
dHVyblR5cGUKQEAgLTM1Miw3ICszNTIsNyBAQAogCQlJU291cmNlRWxlbWVudFJlcXVlc3Rvci5N
ZXRob2RJbmZvIG1ldGhvZEluZm8gPSBuZXcgSVNvdXJjZUVsZW1lbnRSZXF1ZXN0b3IuTWV0aG9k
SW5mbygpOwogCQltZXRob2RJbmZvLmlzQW5ub3RhdGlvbiA9IG1ldGhvZERlY2xhcmF0aW9uIGlu
c3RhbmNlb2YgQW5ub3RhdGlvbk1ldGhvZERlY2xhcmF0aW9uOwogCQltZXRob2RJbmZvLmRlY2xh
cmF0aW9uU3RhcnQgPSBtZXRob2REZWNsYXJhdGlvbi5kZWNsYXJhdGlvblNvdXJjZVN0YXJ0Owot
CQltZXRob2RJbmZvLm1vZGlmaWVycyA9IGRlcHJlY2F0ZWQgPyAoY3VycmVudE1vZGlmaWVycyAm
IEV4dHJhQ29tcGlsZXJNb2RpZmllcnMuQWNjSnVzdEZsYWcpIHwgQ2xhc3NGaWxlQ29uc3RhbnRz
LkFjY0RlcHJlY2F0ZWQgOiBjdXJyZW50TW9kaWZpZXJzICYgRXh0cmFDb21waWxlck1vZGlmaWVy
cy5BY2NKdXN0RmxhZzsKKwkJbWV0aG9kSW5mby5tb2RpZmllcnMgPSBjdXJyZW50TW9kaWZpZXJz
OwogCQltZXRob2RJbmZvLnJldHVyblR5cGUgPSByZXR1cm5UeXBlID09IG51bGwgPyBudWxsIDog
Q2hhck9wZXJhdGlvbi5jb25jYXRXaXRoKHJldHVyblR5cGUuZ2V0UGFyYW1ldGVyaXplZFR5cGVO
YW1lKCksICcuJyk7CiAJCW1ldGhvZEluZm8ubmFtZSA9IG1ldGhvZERlY2xhcmF0aW9uLnNlbGVj
dG9yOwogCQltZXRob2RJbmZvLm5hbWVTb3VyY2VTdGFydCA9IG1ldGhvZERlY2xhcmF0aW9uLnNv
dXJjZVN0YXJ0OwpkaWZmIC0tZ2l0IG1vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3Jl
L0JpbmFyeU1ldGhvZC5qYXZhIG1vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL0Jp
bmFyeU1ldGhvZC5qYXZhCmluZGV4IDA5ZTY3ZmQuLjBkN2JmMWEgMTAwNjQ0Ci0tLSBtb2RlbC9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9CaW5hcnlNZXRob2QuamF2YQorKysgbW9kZWwv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvQmluYXJ5TWV0aG9kLmphdmEKQEAgLTEsNSAr
MSw1IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDAwLCAy
MDEyIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAy
MDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4g
VGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUg
YXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2
MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWls
YWJsZSBhdApAQCAtMjcsNiArMjcsNyBAQAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5h
bC5jb21waWxlci5lbnYuSUJpbmFyeU1ldGhvZDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50
ZXJuYWwuY29tcGlsZXIuZW52LklCaW5hcnlUeXBlOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5p
bnRlcm5hbC5jb21waWxlci5sb29rdXAuQmluZGluZzsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkV4dHJhQ29tcGlsZXJNb2RpZmllcnM7CiBpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvcmUuSmF2YU1vZGVsTWFuYWdlci5QZXJQcm9qZWN0
SW5mbzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS51dGlsLlV0aWw7CiAK
QEAgLTE5Myw3ICsxOTQsMTAgQEAKICAqLwogcHVibGljIGludCBnZXRGbGFncygpIHRocm93cyBK
YXZhTW9kZWxFeGNlcHRpb24gewogCUlCaW5hcnlNZXRob2QgaW5mbyA9IChJQmluYXJ5TWV0aG9k
KSBnZXRFbGVtZW50SW5mbygpOwotCXJldHVybiBpbmZvLmdldE1vZGlmaWVycygpOworCWludCBt
b2RpZmllcnMgPSBpbmZvLmdldE1vZGlmaWVycygpOworCWlmICgoKElUeXBlKSB0aGlzLnBhcmVu
dCkuaXNJbnRlcmZhY2UoKSAmJiAobW9kaWZpZXJzICYgQ2xhc3NGaWxlQ29uc3RhbnRzLkFjY0Fi
c3RyYWN0KSA9PSAwKQorCQltb2RpZmllcnMgfD0gRXh0cmFDb21waWxlck1vZGlmaWVycy5BY2NE
ZWZhdWx0TWV0aG9kOworCXJldHVybiBtb2RpZmllcnM7CiB9CiAvKgogICogQHNlZSBKYXZhRWxl
bWVudCNnZXRIYW5kbGVNZW1lbnRvKFN0cmluZ0J1ZmZlcik=
</data>

          </attachment>
      

    </bug>

</bugzilla>