<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>367023</bug_id>
          
          <creation_ts>2011-12-17 18:00:00 -0500</creation_ts>
          <short_desc>Error in JDT Core during AST creation</short_desc>
          <delta_ts>2012-01-24 00:02:29 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.7.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Mac OS X - Carbon (unsup.)</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>3.6.2+J7</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Nicolas  Laleve">nicolas.lalevee</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>daniel_megert</cc>
    
    <cc>jarthana</cc>
    
    <cc>Olivier_Thomann</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      <flag name="pmc_approved"
          id="47870"
          type_id="2"
          status="+"
          setter="daniel_megert"
    />
    <flag name="review"
          id="47861"
          type_id="1"
          status="+"
          setter="Olivier_Thomann"
    />
    <flag name="review"
          id="47862"
          type_id="1"
          status="+"
          setter="amj87.iitr"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2042156</commentid>
    <comment_count>0</comment_count>
    <who name="Nicolas  Laleve">nicolas.lalevee</who>
    <bug_when>2011-12-17 18:00:22 -0500</bug_when>
    <thetext>I have decompiled some .class with jad. I made it then a Java project in Eclipse, and the JDT continuously fail to compile with the following error:
Error in JDT Core during AST creation:
java.lang.IllegalArgumentException: info cannot be null
	at org.eclipse.jdt.internal.compiler.codegen.StackMapFrame.addStackItem(StackMapFrame.java:81)
	at org.eclipse.jdt.internal.compiler.ClassFile.traverse(ClassFile.java:4474)
	at org.eclipse.jdt.internal.compiler.ClassFile.generateStackMapTableAttribute(ClassFile.java:3363)
	at org.eclipse.jdt.internal.compiler.ClassFile.completeCodeAttribute(ClassFile.java:1187)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.generateCode(AbstractMethodDeclaration.java:257)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.generateCode(AbstractMethodDeclaration.java:182)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.generateCode(TypeDeclaration.java:543)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.generateCode(TypeDeclaration.java:605)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.generateCode(TypeDeclaration.java:536)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.generateCode(TypeDeclaration.java:612)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.generateCode(CompilationUnitDeclaration.java:360)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:1197)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:681)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1181)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:807)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)


I have been able to isolate the class that make the JDT fails. See it attached.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2042157</commentid>
    <comment_count>1</comment_count>
      <attachid>208520</attachid>
    <who name="Nicolas  Laleve">nicolas.lalevee</who>
    <bug_when>2011-12-17 18:02:05 -0500</bug_when>
    <thetext>Created attachment 208520
TestClass.java</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2042179</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-12-18 06:21:24 -0500</bug_when>
    <thetext>Reproduced on 3.8 M4 and 3.7. Here is a smaller test case: 

public class X {
	void handle() {
		String s;
		label1: do {
			for (;;) {
				s = &quot;&quot;;
				if (s == null) 
					continue label1;
			}
		} while (s != null);
	}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2042367</commentid>
    <comment_count>3</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-12-19 08:59:52 -0500</bug_when>
    <thetext>For the last test case, the local variable ranges are wrong:
  // Method descriptor #6 ()V
  // Stack: 1, Locals: 2
  void handle();
     0  ldc &lt;String &quot;&quot;&gt; [15]
     2  astore_1 [s]
     3  aload_1 [s]
     4  ifnonnull 0
     7  aload_1
     8  ifnonnull 0
    11  return
      Line numbers:
        [pc: 0, line: 6]
        [pc: 3, line: 7]
        [pc: 7, line: 10]
        [pc: 11, line: 11]
      Local variable table:
        [pc: 0, pc: 12] local: this index: 0 type: X
        [pc: 3, pc: 7] local: s index: 1 type: java.lang.String
        [pc: 11, pc: 12] local: s index: 1 type: java.lang.String

s should be initialized from 3 to 12. There is no reason to have a range from 7 to 11 where it is not initialized.
This might come from the optimization to remove goto to the next line.
Investigating. I believe once the range is fixed, the stack map frames should be fine.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2042385</commentid>
    <comment_count>4</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-12-19 09:29:31 -0500</bug_when>
    <thetext>I think it is coming from the fact that this code is called even if the condition is null.
if (this.preCondInitStateIndex != -1) {
codeStream.removeNotDefinitelyAssignedVariables(currentScope, this.preCondInitStateIndex);
}
This should not be called when there is no condition as there is no local to close the time to check the condition. See around line 322 in org.eclipse.jdt.internal.compiler.ast.ForStatement.generateCode(BlockScope, CodeStream).

Adding a null check fixed it. At least the local variable range is right and then the stack maps are properly generated.

The same issue exists with a while(true).
public class X {
    void handle() {
        String s;
        label1: do {
            while(true) {
                s = &quot;&quot;;
                if (s == null) 
                    continue label1;
            }
        } while (s != null);
    }
}
In this case I think the local should be checked to call removeNotDefinitelyAssignedVariables only if the condition is equal to NotAConstant (not an optimized constant expression equals to true or false).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2046481</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-05 04:33:58 -0500</bug_when>
    <thetext>Works alright with 3.6.2 and broken at 3.7.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2046965</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-05 23:21:06 -0500</bug_when>
    <thetext>(In reply to comment #5)
&gt; Works alright with 3.6.2 and broken at 3.7.

I think the ranges have always been suspect, but things work in 3.6.2
since the code generated is different, i.e we didn&apos;t generate code for
statements found to be dead by null analysis. So the code generated at
3.6.2 time  comes out to be:

 0: ldc           #15                 // String 
         2: astore_1      
         3: aload_1       
         4: ifnonnull     0
         7: goto          0
      LineNumberTable:
        line 6: 0
        line 7: 3
        line 5: 7
      LocalVariableTable:
        Start  Length  Slot  Name   Signature
               0      10     0  this   LX;
               3       4     1     s   Ljava/lang/String;
      StackMapTable: number_of_entries = 2
           frame_type = 0 /* same */
           frame_type = 6 /* same */

thereby side stepping the land mine.

Agree with Olivier&apos;s analysis in comment#4, patch will follow shortly.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2046979</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-06 01:49:27 -0500</bug_when>
    <thetext>(In reply to comment #4)

&gt; The same issue exists with a while(true).

[...]

&gt; In this case I think the local should be checked to call
&gt; removeNotDefinitelyAssignedVariables only if the condition is equal to
&gt; NotAConstant (not an optimized constant expression equals to true or false).

More precisely, in both the cases, we should remove not definitely assigned
variables only if the condition is NOT known to be true.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2047049</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-06 05:04:08 -0500</bug_when>
    <thetext>(In reply to comment #6)

&gt; Agree with Olivier&apos;s analysis in comment#4, patch will follow shortly.

(In reply to comment #7)

&gt; &gt; In this case I think the local should be checked to call
&gt; &gt; removeNotDefinitelyAssignedVariables only if the condition is equal to
&gt; &gt; NotAConstant (not an optimized constant expression equals to true or false).
&gt; 
&gt; More precisely, in both the cases, we should remove not definitely assigned
&gt; variables only if the condition is NOT known to be true.

Hmm. Analyzing further, I don&apos;t think this is the issue at all. See that
removing the not definitely assigned as described by the pre-condition
initialization state is _the_ orthodox way of doing things. Skipping these
removals when the condition is trivially determinable to be true at compile
time (as in for(;;) or while(true), for (;true;)) is at best an optimization.
In any case, post the body of inner loop, these assignments that happened
under the true condition would have be readded as per the merged state anyways.

This needs further investigation, but the real bug seems to be in
org.eclipse.jdt.internal.compiler.codegen.BranchLabel.place() where
some very old code mucks around with initialization ranges and messes
them up. (Search for see PR 1GIRQLA: ITPJCORE:ALL)

If we &quot;optimize&quot; the local removal based on the condition being true,
then the ranges are such that this code doesn&apos;t get triggered.

BTW, the original submitter test case fails with IAE all the way back
to 3.4.2 probably even earlier.

I&apos;ll continue to investigate this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2047174</commentid>
    <comment_count>9</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2012-01-06 10:14:39 -0500</bug_when>
    <thetext>Maybe I was not clear with my explanation. Since the condition is optimized (as it is always true), this creates a side-effect on the local initialization ranges.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2047629</commentid>
    <comment_count>10</comment_count>
      <attachid>209189</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-09 04:14:14 -0500</bug_when>
    <thetext>Created attachment 209189
Patch &amp; tests - under test</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2047633</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-09 04:20:11 -0500</bug_when>
    <thetext>After chasing two plausible theories, I finally narrowed
it down to the root cause: The code that evaluates the 
condition at the bottom of the do-while loop is reached
via two pathways. One by free fall through the body of the 
loop and another via a continue in the body of the loop.

The initialization state of variables upon reaching the
condition stage of the loop then is the merger of the
two possible arcs - we were not taking this into consideration 
and treating it as though the body of the loop is the only way
to reach the end of the loop. A one line fixes the problem and 
both comment#0 test case and the much simplified comment#2 test
case now pass with this patch.

Running all JDT/Core tests now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2047710</commentid>
    <comment_count>12</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-09 06:31:48 -0500</bug_when>
    <thetext>Olivier, please take a look, it is a single line change. I am considering this
for 3.7.2 even though it is not a regression.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2047711</commentid>
    <comment_count>13</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-09 06:32:26 -0500</bug_when>
    <thetext>Ayush, please also look through the single line change.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2047723</commentid>
    <comment_count>14</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-09 06:57:36 -0500</bug_when>
    <thetext>(In reply to comment #11)

&gt; Running all JDT/Core tests now.

All tests are green BTW.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2047755</commentid>
    <comment_count>15</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-01-09 08:14:03 -0500</bug_when>
    <thetext>Fix looks good and completes the fix for bug 279183.

Looks safe for backporting as well, though not sure whether we should play with initializations in the RC week. :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2047797</commentid>
    <comment_count>16</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2012-01-09 09:50:12 -0500</bug_when>
    <thetext>(In reply to comment #12)
&gt; Olivier, please take a look, it is a single line change. I am considering this
&gt; for 3.7.2 even though it is not a regression.
Looks good to me.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2047798</commentid>
    <comment_count>17</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2012-01-09 09:51:14 -0500</bug_when>
    <thetext>+1. Code generation failures are serious problems. It can be difficult to find a workaround.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2047811</commentid>
    <comment_count>18</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-09 09:59:34 -0500</bug_when>
    <thetext>Thanks Olivier and Ayush. I have released it for 3.8 M5 via
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=93c94a7685512a759bb72181caf791ff94ebd920.

Dani, do you want this for 3.7.2 ? On the one hand this problem has
existed for a long time, at least since 3.4.2 perhaps even earlier.

On the other, it is bad code generation problem that can be difficult
to work around. The fix looks safe, just a one line change and has been
reviewed by Olivier and Ayush.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2047814</commentid>
    <comment_count>19</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2012-01-09 10:02:23 -0500</bug_when>
    <thetext>(In reply to comment #18)
&gt; Thanks Olivier and Ayush. I have released it for 3.8 M5 via
&gt; http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=93c94a7685512a759bb72181caf791ff94ebd920.
&gt; 
&gt; Dani, do you want this for 3.7.2 ? On the one hand this problem has
&gt; existed for a long time, at least since 3.4.2 perhaps even earlier.
&gt; 
&gt; On the other, it is bad code generation problem that can be difficult
&gt; to work around. The fix looks safe, just a one line change and has been
&gt; reviewed by Olivier and Ayush.

+1 for backport.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2048117</commentid>
    <comment_count>20</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-01-10 00:36:23 -0500</bug_when>
    <thetext>Reopening for backport</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2048120</commentid>
    <comment_count>21</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-01-10 00:38:49 -0500</bug_when>
    <thetext>Released in 3.7 maintenance via commit b57994093099388baf36a2290f9fb387a20e2dc4</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2048134</commentid>
    <comment_count>22</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-01-10 01:47:11 -0500</bug_when>
    <thetext>Released in 3.6.2+Java7 branch via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=R3_6_maintenance_Java7&amp;id=9a77c72a2cb563b0ee2bb28ee4096f7d7e5e97f2</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2048155</commentid>
    <comment_count>23</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2012-01-10 02:47:48 -0500</bug_when>
    <thetext>(In reply to comment #22)
&gt; Released in 3.6.2+Java7 branch via
&gt; http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=R3_6_maintenance_Java7&amp;id=9a77c72a2cb563b0ee2bb28ee4096f7d7e5e97f2

Please not that you still need to do the build input manually (as in contrast to 3.7.2), see bug 364676.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2052652</commentid>
    <comment_count>24</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-01-19 02:29:56 -0500</bug_when>
    <thetext>Verified for 3.7.2 RC2 with build M20120118-0800</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2054841</commentid>
    <comment_count>25</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-01-24 00:02:29 -0500</bug_when>
    <thetext>Verified for 3.8M5 using I20120122-2000</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>208520</attachid>
            <date>2011-12-17 18:02:00 -0500</date>
            <delta_ts>2011-12-18 05:28:27 -0500</delta_ts>
            <desc>TestClass.java</desc>
            <filename>TestClass.java</filename>
            <type>text/plain</type>
            <size>2350</size>
            <attacher name="Nicolas  Laleve">nicolas.lalevee</attacher>
            
              <data encoding="base64">cGFja2FnZSBjb20uYWNtZTsKCmltcG9ydCBqYXZhLnV0aWwuQXJyYXlMaXN0OwppbXBvcnQgamF2
YS51dGlsLkFycmF5czsKaW1wb3J0IGphdmEudXRpbC5JdGVyYXRvcjsKaW1wb3J0IGphdmEudXRp
bC5MaXN0OwppbXBvcnQgamF2YS51dGlsLlByb3BlcnRpZXM7CgppbXBvcnQgb3JnLnczYy5kb20u
KjsKCnB1YmxpYyBjbGFzcyBUZXN0Q2xhc3MgZXh0ZW5kcyBPYmplY3QgewoJcHJpdmF0ZSBzdGF0
aWMgY2xhc3MgSGFuZGxlciBleHRlbmRzIE9iamVjdCB7CgoJCXB1YmxpYyBpbnQgZ2V0U3R1ZmYo
KSB7CgkJCXJldHVybiAxOwoJCX0KCgkJcHVibGljIHZvaWQgaGFuZGxlKEVsZW1lbnQgZWxlbWVu
dCkgewoJCQlQcm9wZXJ0aWVzIHByb3BlcnRpZXMgPSBuZXcgUHJvcGVydGllcygpOwoJCQlOYW1l
ZE5vZGVNYXAgYXR0cyA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlcygpOwoJCQlpZiAoYXR0cyAhPSBu
dWxsKSB7CgkJCQlmb3IgKGludCBhID0gMDsgYSA8IGF0dHMuZ2V0TGVuZ3RoKCk7IGErKykgewoJ
CQkJCU5vZGUgYXR0ID0gYXR0cy5pdGVtKGEpOwoJCQkJCVN0cmluZyBuYW1lID0gYXR0LmdldE5v
ZGVOYW1lKCk7CgkJCQkJU3RyaW5nIHZhbHVlID0gYXR0LmdldE5vZGVWYWx1ZSgpOwoJCQkJCWlm
ICgiZm9vIi5lcXVhbHMobmFtZSkpIHsKCQkJCQkJbmFtZSA9IHZhbHVlOwoJCQkJCX0gZWxzZSB7
CgkJCQkJCWlmICghImJhciIuZXF1YWxzKG5hbWUpKQoJCQkJCQkJY29udGludWU7CgkJCQkJCW5h
bWUgPSB2YWx1ZTsKCQkJCQl9CgkJCQkJcHJvcGVydGllcy5wdXQobmFtZSwgdmFsdWUpOwoJCQkJ
fQoKCQkJfQoJCQlsYWJlbDA6IGRvIHsKCQkJCU5vZGUgbm9kZTsKCQkJCVN0cmluZyBub2RlTmFt
ZTsKCQkJCWxhYmVsMTogZG8gewoJCQkJCWZvciAoSXRlcmF0b3IgaSA9IChuZXcgQXJyYXlMaXN0
KDEpKS5pdGVyYXRvcigpOyBpCgkJCQkJCQkuaGFzTmV4dCgpOyBtZW1iZXJzLmFkZChlcXVhbHMo
bm9kZSkpKSB7CgkJCQkJCW5vZGUgPSAoTm9kZSkgaS5uZXh0KCk7CgkJCQkJCW5vZGVOYW1lID0g
IiIgKyBlcXVhbHMobm9kZS5nZXROb2RlTmFtZSgpKTsKCQkJCQkJaWYgKCEiZm9vIi5lcXVhbHMo
bm9kZU5hbWUpKQoJCQkJCQkJY29udGludWUgbGFiZWwxOwoJCQkJCX0KCgkJCQkJYnJlYWsgbGFi
ZWwwOwoJCQkJfSB3aGlsZSAoISJiYXIiLmVxdWFscyhub2RlTmFtZSkpOwoJCQkJSXRlcmF0b3Ig
aSA9IChuZXcgQXJyYXlMaXN0KDEpKS5pdGVyYXRvcigpOwoJCQkJd2hpbGUgKGkuaGFzTmV4dCgp
KSB7CgkJCQkJTm9kZSBuID0gKE5vZGUpIGkubmV4dCgpOwoJCQkJCVN0cmluZyBuYW1lID0gdG9T
dHJpbmcoKSArIG4uZ2V0Tm9kZU5hbWUoKTsKCQkJCQlpZiAoInd0ZiIuZXF1YWxzKG5hbWUpKSB7
CgkJCQkJCVN0cmluZyBwcm9wZXJ0eU5hbWUgPSAodG9TdHJpbmcoKSArIG4uZ2V0QXR0cmlidXRl
cygpCgkJCQkJCQkJLmdldE5hbWVkSXRlbSgiYnJva2VuIikpLnRyaW0oKTsKCQkJCQkJU3RyaW5n
IHZhbHVlID0gdG9TdHJpbmcoKSArIG47CgkJCQkJCXByb3BlcnRpZXMucHV0KHByb3BlcnR5TmFt
ZSwgdmFsdWUpOwoJCQkJCX0KCQkJCX0KCQkJfSB3aGlsZSAodHJ1ZSk7CgkJCXByb3BlcnRpZXNC
dWlsZGVyLmVxdWFscyhwcm9wZXJ0aWVzKTsKCQkJYnVpbGRlci5lcXVhbHMocHJvcGVydGllc0J1
aWxkZXIuaGFzaENvZGUoKSk7CgkJCWJ1aWxkZXIuZXF1YWxzKG1lbWJlcnMpOwoJCX0KCgkJcHJp
dmF0ZSBmaW5hbCBPYmplY3QgYzsKCQlwcml2YXRlIE9iamVjdCBidWlsZGVyOwoJCXByaXZhdGUg
TGlzdCBtZW1iZXJzOwoJCXByaXZhdGUgT2JqZWN0IHByb3BlcnRpZXNCdWlsZGVyOwoKCQlwdWJs
aWMgSGFuZGxlcihPYmplY3QgYykgewoJCQl0aGlzLmMgPSBjOwoJCQlidWlsZGVyID0gQXJyYXlz
LmFzTGlzdChPYmplY3QuY2xhc3MpOwoJCQlidWlsZGVyLmVxdWFscygiZm9vIik7CgkJCWJ1aWxk
ZXIuZXF1YWxzKCJiYXIiKTsKCQkJbWVtYmVycyA9IG5ldyBBcnJheUxpc3QoKTsKCQkJcHJvcGVy
dGllc0J1aWxkZXIgPSBBcnJheXMuYXNMaXN0KE9iamVjdC5jbGFzcyk7CgkJCU9iamVjdCBiZWFu
RGVmaW5pdGlvbiA9IHByb3BlcnRpZXNCdWlsZGVyLnRvU3RyaW5nKCk7CgkJCU9iamVjdCBob2xk
ZXIgPSBuZXcgU3RyaW5nKCJzdGlybmciKTsKCQkJQXJyYXlzLmFzTGlzdChob2xkZXIsIGMudG9T
dHJpbmcoKSk7CgkJfQoJfQoKCXB1YmxpYyBUZXN0Q2xhc3MoKSB7Cgl9CgoJcHJvdGVjdGVkIE9i
amVjdCBwYXJzZUludGVybmFsKEVsZW1lbnQgZWxlbWVudCwgT2JqZWN0IGMpIHsKCQlIYW5kbGVy
IGggPSBuZXcgSGFuZGxlcihjKTsKCQloLmhhbmRsZShlbGVtZW50KTsKCQlyZXR1cm4gaC5nZXRT
dHVmZigpOwoJfQp9Cg==
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>209189</attachid>
            <date>2012-01-09 04:14:00 -0500</date>
            <delta_ts>2012-01-09 04:14:14 -0500</delta_ts>
            <desc>Patch &amp; tests - under test</desc>
            <filename>patch.txt</filename>
            <type>text/plain</type>
            <size>19507</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1N0YWNrTWFwQXR0cmli
dXRlVGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vU3RhY2tNYXBBdHRy
aWJ1dGVUZXN0LmphdmEKaW5kZXggM2RlOGEyNS4uOGI4M2FmNyAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rl
c3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vU3RhY2tNYXBBdHRyaWJ1dGVUZXN0LmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9j
b3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vU3RhY2tNYXBBdHRyaWJ1dGVUZXN0LmphdmEK
QEAgLTEsNSArMSw1IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChj
KSAyMDA2LCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChj
KSAyMDA2LCAyMDEyIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyBy
ZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICog
YXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMg
TGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5k
IGlzIGF2YWlsYWJsZSBhdApAQCAtNzEzMyw0ICs3MTMzLDQ4NyBAQAogCQkJCX0sCiAJCQkJIlNV
Q0NFU1MiKTsKIAl9CisJLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcu
Y2dpP2lkPTM2NzAyMworCXB1YmxpYyB2b2lkIHRlc3QwNTcoKSB0aHJvd3MgRXhjZXB0aW9uIHsK
KwkJdGhpcy5ydW5Db25mb3JtVGVzdCgKKwkJCQluZXcgU3RyaW5nW10geworCQkJCQkiWC5qYXZh
IiwKKwkJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJCQkiICAgIHB1YmxpYyB2b2lkIHJ1
bigpIHtcbiIgKworCQkJCQkiICAgICAgICBTdHJpbmcgcztcbiIgKworCQkJCQkiICAgICAgICBs
YWJlbDE6IGRvIHtcbiIgKworCQkJCQkiICAgICAgICAgICAgZm9yICg7Oykge1xuIiArCisJCQkJ
CSIgICAgICAgICAgICAgICAgcyA9IFwiXCI7XG4iICsKKwkJCQkJIiAgICAgICAgICAgICAgICBp
ZiAocyA9PSBudWxsKSBcbiIgKworCQkJCQkiICAgICAgICAgICAgICAgICAgICBjb250aW51ZSBs
YWJlbDE7XG4iICsKKwkJCQkJIiAgICAgICAgICAgIH1cbiIgKworCQkJCQkiICAgICAgICB9IHdo
aWxlIChzICE9IG51bGwpO1xuIiArCisJCQkJCSJ9XG4iICsKKwkJCQkJIiAgICBwdWJsaWMgc3Rh
dGljIHZvaWQgbWFpbihTdHJpbmcgW10gYXJncykge1xuIiArCisJCQkJCSIJCVN5c3RlbS5vdXQu
cHJpbnRsbihcIlNVQ0NFU1NcIik7XG4iICsKKwkJCQkJIiAgICB9XG4iICsKKwkJCQkJIn1cbiIs
CisJCQkJfSwKKwkJCQkiU1VDQ0VTUyIpOworCX0KKwkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5v
cmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzY3MDIzCisJcHVibGljIHZvaWQgdGVzdDA1OCgpIHRo
cm93cyBFeGNlcHRpb24geworCQl0aGlzLnJ1bkNvbmZvcm1UZXN0KAorCQkJCW5ldyBTdHJpbmdb
XSB7CisJCQkJCSJYLmphdmEiLAorCQkJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkJCSIg
ICAgcHVibGljIHZvaWQgcnVuKCkge1xuIiArCisJCQkJCSIgICAgICAgIFN0cmluZyBzO1xuIiAr
CisJCQkJCSIgICAgICAgIGxhYmVsMTogZG8ge1xuIiArCisJCQkJCSIgICAgICAgICAgICBmb3Ig
KDt0cnVlOykge1xuIiArCisJCQkJCSIgICAgICAgICAgICAgICAgcyA9IFwiXCI7XG4iICsKKwkJ
CQkJIiAgICAgICAgICAgICAgICBpZiAocyA9PSBudWxsKSBcbiIgKworCQkJCQkiICAgICAgICAg
ICAgICAgICAgICBjb250aW51ZSBsYWJlbDE7XG4iICsKKwkJCQkJIiAgICAgICAgICAgIH1cbiIg
KworCQkJCQkiICAgICAgICB9IHdoaWxlIChzICE9IG51bGwpO1xuIiArCisJCQkJCSJ9XG4iICsK
KwkJCQkJIiAgICBwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmcgW10gYXJncykge1xuIiAr
CisJCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihcIlNVQ0NFU1NcIik7XG4iICsKKwkJCQkJIiAg
ICB9XG4iICsKKwkJCQkJIn1cbiIJCQkJfSwKKwkJCQkiU1VDQ0VTUyIpOworCX0KKwkvLyBodHRw
czovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzY3MDIzCisJcHVibGlj
IHZvaWQgdGVzdDA1OSgpIHRocm93cyBFeGNlcHRpb24geworCQl0aGlzLnJ1bk5lZ2F0aXZlVGVz
dCgKKwkJCQluZXcgU3RyaW5nW10geworCQkJCQkiWC5qYXZhIiwKKwkJCQkJInB1YmxpYyBjbGFz
cyBYIHtcbiIgKworCQkJCQkiICAgIHB1YmxpYyB2b2lkIHJ1bigpIHtcbiIgKworCQkJCQkiICAg
ICAgICBTdHJpbmcgcztcbiIgKworCQkJCQkiICAgICAgICBsYWJlbDE6IGRvIHtcbiIgKworCQkJ
CQkiICAgICAgICAgICAgZm9yICg7ZmFsc2U7KSB7XG4iICsKKwkJCQkJIiAgICAgICAgICAgICAg
ICBzID0gXCJcIjtcbiIgKworCQkJCQkiICAgICAgICAgICAgICAgIGlmIChzID09IG51bGwpIFxu
IiArCisJCQkJCSIgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIGxhYmVsMTtcbiIgKworCQkJ
CQkiICAgICAgICAgICAgfVxuIiArCisJCQkJCSIgICAgICAgIH0gd2hpbGUgKHMgIT0gbnVsbCk7
XG4iICsKKwkJCQkJIn1cbiIgKworCQkJCQkiICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0
cmluZyBbXSBhcmdzKSB7XG4iICsKKwkJCQkJIgkJU3lzdGVtLm91dC5wcmludGxuKFwiU1VDQ0VT
U1wiKTtcbiIgKworCQkJCQkiICAgIH1cbiIgKworCQkJCQkifVxuIgkJCQl9LAorCQkJCQkiLS0t
LS0tLS0tLVxuIiArIAorCQkJCQkiMS4gV0FSTklORyBpbiBYLmphdmEgKGF0IGxpbmUgNClcbiIg
KyAKKwkJCQkJIglsYWJlbDE6IGRvIHtcbiIgKyAKKwkJCQkJIgleXl5eXl5cbiIgKyAKKwkJCQkJ
IlRoZSBsYWJlbCBsYWJlbDEgaXMgbmV2ZXIgZXhwbGljaXRseSByZWZlcmVuY2VkXG4iICsgCisJ
CQkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkJCSIyLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUg
NSlcbiIgKyAKKwkJCQkJIglmb3IgKDtmYWxzZTspIHtcbiIgKyAKKwkJCQkJIiAgICAgICAgICAg
ICAgICBzID0gXCJcIjtcbiIgKyAKKwkJCQkJIiAgICAgICAgICAgICAgICBpZiAocyA9PSBudWxs
KSBcbiIgKyAKKwkJCQkJIiAgICAgICAgICAgICAgICAgICAgY29udGludWUgbGFiZWwxO1xuIiAr
IAorCQkJCQkiICAgICAgICAgICAgfVxuIiArIAorCQkJCQkiCSAgICAgICAgICAgICAgXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCQkJ
CSJVbnJlYWNoYWJsZSBjb2RlXG4iICsgCisJCQkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkJCSIz
LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTApXG4iICsgCisJCQkJCSIJfSB3aGlsZSAocyAh
PSBudWxsKTtcbiIgKyAKKwkJCQkJIgkgICAgICAgICBeXG4iICsgCisJCQkJCSJUaGUgbG9jYWwg
dmFyaWFibGUgcyBtYXkgbm90IGhhdmUgYmVlbiBpbml0aWFsaXplZFxuIiArIAorCQkJCQkJIi0t
LS0tLS0tLS1cbiIpOworCX0JCisJLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hv
d19idWcuY2dpP2lkPTM2NzAyMworCXB1YmxpYyB2b2lkIHRlc3QwNjAoKSB0aHJvd3MgRXhjZXB0
aW9uIHsKKwkJdGhpcy5ydW5Db25mb3JtVGVzdCgKKwkJCQluZXcgU3RyaW5nW10geworCQkJCQki
WC5qYXZhIiwKKwkJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJCQkiICAgIHB1YmxpYyB2
b2lkIHJ1bigpIHtcbiIgKworCQkJCQkiICAgICAgICBTdHJpbmcgcztcbiIgKworCQkJCQkiICAg
ICAgICBsYWJlbDE6IGRvIHtcbiIgKworCQkJCQkiICAgICAgICAgICAgZm9yICg7IDUgPCAxMDsp
IHtcbiIgKworCQkJCQkiICAgICAgICAgICAgICAgIHMgPSBcIlwiO1xuIiArCisJCQkJCSIgICAg
ICAgICAgICAgICAgaWYgKHMgPT0gbnVsbCkgXG4iICsKKwkJCQkJIiAgICAgICAgICAgICAgICAg
ICAgY29udGludWUgbGFiZWwxO1xuIiArCisJCQkJCSIgICAgICAgICAgICB9XG4iICsKKwkJCQkJ
IiAgICAgICAgfSB3aGlsZSAocyAhPSBudWxsKTtcbiIgKworCQkJCQkifVxuIiArCisJCQkJCSIg
ICAgcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nIFtdIGFyZ3MpIHtcbiIgKworCQkJCQki
CQlTeXN0ZW0ub3V0LnByaW50bG4oXCJTVUNDRVNTXCIpO1xuIiArCisJCQkJCSIgICAgfVxuIiAr
CisJCQkJCSJ9XG4iCQkJCX0sCisJCQkJIlNVQ0NFU1MiKTsKKwl9CQorCS8vIGh0dHBzOi8vYnVn
cy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNjcwMjMKKwlwdWJsaWMgdm9pZCB0
ZXN0MDYxKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCXRoaXMucnVuTmVnYXRpdmVUZXN0KAorCQkJ
CW5ldyBTdHJpbmdbXSB7CisJCQkJCSJYLmphdmEiLAorCQkJCQkicHVibGljIGNsYXNzIFgge1xu
IiArCisJCQkJCSIgICAgcHVibGljIHZvaWQgcnVuKCkge1xuIiArCisJCQkJCSIgICAgICAgIGlu
dCBmaXZlID0gNSwgdGVuID0gMTA7XG4iICsKKwkJCQkJIiAgICAgICAgU3RyaW5nIHM7XG4iICsK
KwkJCQkJIiAgICAgICAgbGFiZWwxOiBkbyB7XG4iICsKKwkJCQkJIiAgICAgICAgICAgIGZvciAo
OyBmaXZlIDwgdGVuOykge1xuIiArCisJCQkJCSIgICAgICAgICAgICAgICAgcyA9IFwiXCI7XG4i
ICsKKwkJCQkJIiAgICAgICAgICAgICAgICBpZiAocyA9PSBudWxsKSBcbiIgKworCQkJCQkiICAg
ICAgICAgICAgICAgICAgICBjb250aW51ZSBsYWJlbDE7XG4iICsKKwkJCQkJIiAgICAgICAgICAg
IH1cbiIgKworCQkJCQkiICAgICAgICB9IHdoaWxlIChzICE9IG51bGwpO1xuIiArCisJCQkJCSJ9
XG4iICsKKwkJCQkJIiAgICBwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmcgW10gYXJncykg
e1xuIiArCisJCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihcIlNVQ0NFU1NcIik7XG4iICsKKwkJ
CQkJIiAgICB9XG4iICsKKwkJCQkJIn1cbiIJCQkJfSwKKwkJCQkJIi0tLS0tLS0tLS1cbiIgKyAK
KwkJCQkJIjEuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDkpXG4iICsgCisJCQkJCSIJY29u
dGludWUgbGFiZWwxO1xuIiArIAorCQkJCQkiCV5eXl5eXl5eXl5eXl5eXl5cbiIgKyAKKwkJCQkJ
IkRlYWQgY29kZVxuIiArIAorCQkJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJCQkiMi4gRVJST1Ig
aW4gWC5qYXZhIChhdCBsaW5lIDExKVxuIiArIAorCQkJCQkiCX0gd2hpbGUgKHMgIT0gbnVsbCk7
XG4iICsgCisJCQkJCSIJICAgICAgICAgXlxuIiArIAorCQkJCQkiVGhlIGxvY2FsIHZhcmlhYmxl
IHMgbWF5IG5vdCBoYXZlIGJlZW4gaW5pdGlhbGl6ZWRcbiIgKyAKKwkJCQkJIi0tLS0tLS0tLS1c
biIpOworCX0KKwkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/
aWQ9MzY3MDIzCisJcHVibGljIHZvaWQgdGVzdDA2MigpIHRocm93cyBFeGNlcHRpb24geworCQl0
aGlzLnJ1bkNvbmZvcm1UZXN0KAorCQkJbmV3IFN0cmluZ1tdIHsKKwkJCQkiWC5qYXZhIiwKKwkJ
CQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkJIiAgICBwdWJsaWMgdm9pZCBydW4oKSB7XG4i
ICsKKwkJCQkiICAgICAgICBmaW5hbCBpbnQgZml2ZSA9IDUsIHRlbiA9IDEwO1xuIiArCisJCQkJ
IiAgICAgICAgU3RyaW5nIHM7XG4iICsKKwkJCQkiICAgICAgICBsYWJlbDE6IGRvIHtcbiIgKwor
CQkJCSIgICAgICAgICAgICBmb3IgKDsgZml2ZSA8IHRlbjspIHtcbiIgKworCQkJCSIgICAgICAg
ICAgICAgICAgcyA9IFwiXCI7XG4iICsKKwkJCQkiICAgICAgICAgICAgICAgIGlmIChzID09IG51
bGwpIFxuIiArCisJCQkJIiAgICAgICAgICAgICAgICAgICAgY29udGludWUgbGFiZWwxO1xuIiAr
CisJCQkJIiAgICAgICAgICAgIH1cbiIgKworCQkJCSIgICAgICAgIH0gd2hpbGUgKHMgIT0gbnVs
bCk7XG4iICsKKwkJCQkifVxuIiArCisJCQkJIiAgICBwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihT
dHJpbmcgW10gYXJncykge1xuIiArCisJCQkJIgkJU3lzdGVtLm91dC5wcmludGxuKFwiU1VDQ0VT
U1wiKTtcbiIgKworCQkJCSIgICAgfVxuIiArCisJCQkJIn1cbiIJCQkJfSwKKwkJCSJTVUNDRVNT
Iik7CisJfQorCS8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9p
ZD0zNjcwMjMKKwlwdWJsaWMgdm9pZCB0ZXN0MDYzKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCXRo
aXMucnVuTmVnYXRpdmVUZXN0KAorCQkJbmV3IFN0cmluZ1tdIHsKKwkJCQkiWC5qYXZhIiwKKwkJ
CQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkJIiAgICBwdWJsaWMgdm9pZCBydW4oKSB7XG4i
ICsKKwkJCQkiICAgICAgICBmaW5hbCBpbnQgZml2ZSA9IDUsIHRlbiA9IDEwO1xuIiArCisJCQkJ
IiAgICAgICAgU3RyaW5nIHM7XG4iICsKKwkJCQkiICAgICAgICBsYWJlbDE6IGRvIHtcbiIgKwor
CQkJCSIgICAgICAgICAgICBmb3IgKDsgZml2ZSA+IHRlbjspIHtcbiIgKworCQkJCSIgICAgICAg
ICAgICAgICAgcyA9IFwiXCI7XG4iICsKKwkJCQkiICAgICAgICAgICAgICAgIGlmIChzID09IG51
bGwpIFxuIiArCisJCQkJIiAgICAgICAgICAgICAgICAgICAgY29udGludWUgbGFiZWwxO1xuIiAr
CisJCQkJIiAgICAgICAgICAgIH1cbiIgKworCQkJCSIgICAgICAgIH0gd2hpbGUgKHMgIT0gbnVs
bCk7XG4iICsKKwkJCQkifVxuIiArCisJCQkJIiAgICBwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihT
dHJpbmcgW10gYXJncykge1xuIiArCisJCQkJIgkJU3lzdGVtLm91dC5wcmludGxuKFwiU1VDQ0VT
U1wiKTtcbiIgKworCQkJCSIgICAgfVxuIiArCisJCQkJIn1cbiIJCQkJfSwKKwkJCQkiLS0tLS0t
LS0tLVxuIiArIAorCQkJCSIxLiBXQVJOSU5HIGluIFguamF2YSAoYXQgbGluZSA1KVxuIiArIAor
CQkJCSIJbGFiZWwxOiBkbyB7XG4iICsgCisJCQkJIgleXl5eXl5cbiIgKyAKKwkJCQkiVGhlIGxh
YmVsIGxhYmVsMSBpcyBuZXZlciBleHBsaWNpdGx5IHJlZmVyZW5jZWRcbiIgKyAKKwkJCQkiLS0t
LS0tLS0tLVxuIiArIAorCQkJCSIyLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNilcbiIgKyAK
KwkJCQkiCWZvciAoOyBmaXZlID4gdGVuOykge1xuIiArIAorCQkJCSIgICAgICAgICAgICAgICAg
cyA9IFwiXCI7XG4iICsgCisJCQkJIiAgICAgICAgICAgICAgICBpZiAocyA9PSBudWxsKSBcbiIg
KyAKKwkJCQkiICAgICAgICAgICAgICAgICAgICBjb250aW51ZSBsYWJlbDE7XG4iICsgCisJCQkJ
IiAgICAgICAgICAgIH1cbiIgKyAKKwkJCQkiCSAgICAgICAgICAgICAgICAgICAgXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCQkJIlVu
cmVhY2hhYmxlIGNvZGVcbiIgKyAKKwkJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJCSIzLiBFUlJP
UiBpbiBYLmphdmEgKGF0IGxpbmUgMTEpXG4iICsgCisJCQkJIgl9IHdoaWxlIChzICE9IG51bGwp
O1xuIiArIAorCQkJCSIJICAgICAgICAgXlxuIiArIAorCQkJCSJUaGUgbG9jYWwgdmFyaWFibGUg
cyBtYXkgbm90IGhhdmUgYmVlbiBpbml0aWFsaXplZFxuIiArIAorCQkJCSItLS0tLS0tLS0tXG4i
KTsKKwl9CisJLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lk
PTM2NzAyMworCXB1YmxpYyB2b2lkIHRlc3QwNjQoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJdGhp
cy5ydW5Db25mb3JtVGVzdCgKKwkJCQluZXcgU3RyaW5nW10geworCQkJCQkiWC5qYXZhIiwKKwkJ
CQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJCQkiICAgIHB1YmxpYyB2b2lkIHJ1bigpIHtc
biIgKworCQkJCQkiICAgICAgICBTdHJpbmcgcztcbiIgKworCQkJCQkiICAgICAgICBsYWJlbDE6
IGRvIHtcbiIgKworCQkJCQkiICAgICAgICAgICAgd2hpbGUgKHRydWUpIHtcbiIgKworCQkJCQki
ICAgICAgICAgICAgICAgIHMgPSBcIlwiO1xuIiArCisJCQkJCSIgICAgICAgICAgICAgICAgaWYg
KHMgPT0gbnVsbCkgXG4iICsKKwkJCQkJIiAgICAgICAgICAgICAgICAgICAgY29udGludWUgbGFi
ZWwxO1xuIiArCisJCQkJCSIgICAgICAgICAgICB9XG4iICsKKwkJCQkJIiAgICAgICAgfSB3aGls
ZSAocyAhPSBudWxsKTtcbiIgKworCQkJCQkifVxuIiArCisJCQkJCSIgICAgcHVibGljIHN0YXRp
YyB2b2lkIG1haW4oU3RyaW5nIFtdIGFyZ3MpIHtcbiIgKworCQkJCQkiCQlTeXN0ZW0ub3V0LnBy
aW50bG4oXCJTVUNDRVNTXCIpO1xuIiArCisJCQkJCSIgICAgfVxuIiArCisJCQkJCSJ9XG4iLAor
CQkJCX0sCisJCQkJIlNVQ0NFU1MiKTsKKwl9CisJLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3Jn
L2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM2NzAyMworCXB1YmxpYyB2b2lkIHRlc3QwNjUoKSB0aHJv
d3MgRXhjZXB0aW9uIHsKKwkJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCQkJbmV3IFN0cmluZ1td
IHsKKwkJCQkJIlguamF2YSIsCisJCQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCQkJIiAg
ICBwdWJsaWMgdm9pZCBydW4oKSB7XG4iICsKKwkJCQkJIiAgICAgICAgU3RyaW5nIHM7XG4iICsK
KwkJCQkJIiAgICAgICAgbGFiZWwxOiBkbyB7XG4iICsKKwkJCQkJIiAgICAgICAgICAgIHdoaWxl
IChmYWxzZSkge1xuIiArCisJCQkJCSIgICAgICAgICAgICAgICAgcyA9IFwiXCI7XG4iICsKKwkJ
CQkJIiAgICAgICAgICAgICAgICBpZiAocyA9PSBudWxsKSBcbiIgKworCQkJCQkiICAgICAgICAg
ICAgICAgICAgICBjb250aW51ZSBsYWJlbDE7XG4iICsKKwkJCQkJIiAgICAgICAgICAgIH1cbiIg
KworCQkJCQkiICAgICAgICB9IHdoaWxlIChzICE9IG51bGwpO1xuIiArCisJCQkJCSJ9XG4iICsK
KwkJCQkJIiAgICBwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmcgW10gYXJncykge1xuIiAr
CisJCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihcIlNVQ0NFU1NcIik7XG4iICsKKwkJCQkJIiAg
ICB9XG4iICsKKwkJCQkJIn1cbiIJCQkJfSwKKwkJCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCQkJ
IjEuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDQpXG4iICsgCisJCQkJCSIJbGFiZWwxOiBk
byB7XG4iICsgCisJCQkJCSIJXl5eXl5eXG4iICsgCisJCQkJCSJUaGUgbGFiZWwgbGFiZWwxIGlz
IG5ldmVyIGV4cGxpY2l0bHkgcmVmZXJlbmNlZFxuIiArIAorCQkJCQkiLS0tLS0tLS0tLVxuIiAr
IAorCQkJCQkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDUpXG4iICsgCisJCQkJCSIJd2hp
bGUgKGZhbHNlKSB7XG4iICsgCisJCQkJCSIgICAgICAgICAgICAgICAgcyA9IFwiXCI7XG4iICsg
CisJCQkJCSIgICAgICAgICAgICAgICAgaWYgKHMgPT0gbnVsbCkgXG4iICsgCisJCQkJCSIgICAg
ICAgICAgICAgICAgICAgIGNvbnRpbnVlIGxhYmVsMTtcbiIgKyAKKwkJCQkJIiAgICAgICAgICAg
IH1cbiIgKyAKKwkJCQkJIgkgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkJCQkiVW5yZWFjaGFibGUgY29kZVxu
IiArIAorCQkJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJCQkiMy4gRVJST1IgaW4gWC5qYXZhIChh
dCBsaW5lIDEwKVxuIiArIAorCQkJCQkiCX0gd2hpbGUgKHMgIT0gbnVsbCk7XG4iICsgCisJCQkJ
CSIJICAgICAgICAgXlxuIiArIAorCQkJCQkiVGhlIGxvY2FsIHZhcmlhYmxlIHMgbWF5IG5vdCBo
YXZlIGJlZW4gaW5pdGlhbGl6ZWRcbiIgKyAKKwkJCQkJIi0tLS0tLS0tLS1cbiIpOworCX0KKwkv
LyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzY3MDIzCisJ
cHVibGljIHZvaWQgdGVzdDA2NigpIHRocm93cyBFeGNlcHRpb24geworCQl0aGlzLnJ1bkNvbmZv
cm1UZXN0KAorCQkJCW5ldyBTdHJpbmdbXSB7CisJCQkJCSJYLmphdmEiLAorCQkJCQkicHVibGlj
IGNsYXNzIFgge1xuIiArCisJCQkJCSIgICAgcHVibGljIHZvaWQgcnVuKCkge1xuIiArCisJCQkJ
CSIgICAgICAgIFN0cmluZyBzO1xuIiArCisJCQkJCSIgICAgICAgIGxhYmVsMTogZG8ge1xuIiAr
CisJCQkJCSIgICAgICAgICAgICB3aGlsZSg1IDwgMTApIHtcbiIgKworCQkJCQkiICAgICAgICAg
ICAgICAgIHMgPSBcIlwiO1xuIiArCisJCQkJCSIgICAgICAgICAgICAgICAgaWYgKHMgPT0gbnVs
bCkgXG4iICsKKwkJCQkJIiAgICAgICAgICAgICAgICAgICAgY29udGludWUgbGFiZWwxO1xuIiAr
CisJCQkJCSIgICAgICAgICAgICB9XG4iICsKKwkJCQkJIiAgICAgICAgfSB3aGlsZSAocyAhPSBu
dWxsKTtcbiIgKworCQkJCQkifVxuIiArCisJCQkJCSIgICAgcHVibGljIHN0YXRpYyB2b2lkIG1h
aW4oU3RyaW5nIFtdIGFyZ3MpIHtcbiIgKworCQkJCQkiCQlTeXN0ZW0ub3V0LnByaW50bG4oXCJT
VUNDRVNTXCIpO1xuIiArCisJCQkJCSIgICAgfVxuIiArCisJCQkJCSJ9XG4iCQkJCX0sCisJCQkJ
IlNVQ0NFU1MiKTsKKwl9CQorCS8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3df
YnVnLmNnaT9pZD0zNjcwMjMKKwlwdWJsaWMgdm9pZCB0ZXN0MDY3KCkgdGhyb3dzIEV4Y2VwdGlv
biB7CisJCXRoaXMucnVuTmVnYXRpdmVUZXN0KAorCQkJCW5ldyBTdHJpbmdbXSB7CisJCQkJCSJY
LmphdmEiLAorCQkJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkJCSIgICAgcHVibGljIHZv
aWQgcnVuKCkge1xuIiArCisJCQkJCSIgICAgICAgIGludCBmaXZlID0gNSwgdGVuID0gMTA7XG4i
ICsKKwkJCQkJIiAgICAgICAgU3RyaW5nIHM7XG4iICsKKwkJCQkJIiAgICAgICAgbGFiZWwxOiBk
byB7XG4iICsKKwkJCQkJIiAgICAgICAgICAgIHdoaWxlIChmaXZlIDwgdGVuKSB7XG4iICsKKwkJ
CQkJIiAgICAgICAgICAgICAgICBzID0gXCJcIjtcbiIgKworCQkJCQkiICAgICAgICAgICAgICAg
IGlmIChzID09IG51bGwpIFxuIiArCisJCQkJCSIgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVl
IGxhYmVsMTtcbiIgKworCQkJCQkiICAgICAgICAgICAgfVxuIiArCisJCQkJCSIgICAgICAgIH0g
d2hpbGUgKHMgIT0gbnVsbCk7XG4iICsKKwkJCQkJIn1cbiIgKworCQkJCQkiICAgIHB1YmxpYyBz
dGF0aWMgdm9pZCBtYWluKFN0cmluZyBbXSBhcmdzKSB7XG4iICsKKwkJCQkJIgkJU3lzdGVtLm91
dC5wcmludGxuKFwiU1VDQ0VTU1wiKTtcbiIgKworCQkJCQkiICAgIH1cbiIgKworCQkJCQkifVxu
IgkJCQl9LAorCQkJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJCQkiMS4gV0FSTklORyBpbiBYLmph
dmEgKGF0IGxpbmUgOSlcbiIgKyAKKwkJCQkJIgljb250aW51ZSBsYWJlbDE7XG4iICsgCisJCQkJ
CSIJXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkJCQkiRGVhZCBjb2RlXG4iICsgCisJCQkJCSIt
LS0tLS0tLS0tXG4iICsgCisJCQkJCSIyLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTEpXG4i
ICsgCisJCQkJCSIJfSB3aGlsZSAocyAhPSBudWxsKTtcbiIgKyAKKwkJCQkJIgkgICAgICAgICBe
XG4iICsgCisJCQkJCSJUaGUgbG9jYWwgdmFyaWFibGUgcyBtYXkgbm90IGhhdmUgYmVlbiBpbml0
aWFsaXplZFxuIiArIAorCQkJCQkiLS0tLS0tLS0tLVxuIik7CisJfQorCS8vIGh0dHBzOi8vYnVn
cy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNjcwMjMKKwlwdWJsaWMgdm9pZCB0
ZXN0MDY4KCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCQlu
ZXcgU3RyaW5nW10geworCQkJCSJYLmphdmEiLAorCQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsK
KwkJCQkiICAgIHB1YmxpYyB2b2lkIHJ1bigpIHtcbiIgKworCQkJCSIgICAgICAgIGZpbmFsIGlu
dCBmaXZlID0gNSwgdGVuID0gMTA7XG4iICsKKwkJCQkiICAgICAgICBTdHJpbmcgcztcbiIgKwor
CQkJCSIgICAgICAgIGxhYmVsMTogZG8ge1xuIiArCisJCQkJIiAgICAgICAgICAgIHdoaWxlIChm
aXZlIDwgdGVuKSB7XG4iICsKKwkJCQkiICAgICAgICAgICAgICAgIHMgPSBcIlwiO1xuIiArCisJ
CQkJIiAgICAgICAgICAgICAgICBpZiAocyA9PSBudWxsKSBcbiIgKworCQkJCSIgICAgICAgICAg
ICAgICAgICAgIGNvbnRpbnVlIGxhYmVsMTtcbiIgKworCQkJCSIgICAgICAgICAgICB9XG4iICsK
KwkJCQkiICAgICAgICB9IHdoaWxlIChzICE9IG51bGwpO1xuIiArCisJCQkJIn1cbiIgKworCQkJ
CSIgICAgcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nIFtdIGFyZ3MpIHtcbiIgKworCQkJ
CSIJCVN5c3RlbS5vdXQucHJpbnRsbihcIlNVQ0NFU1NcIik7XG4iICsKKwkJCQkiICAgIH1cbiIg
KworCQkJCSJ9XG4iCQkJCX0sCisJCQkiU1VDQ0VTUyIpOworCX0KKwkvLyBodHRwczovL2J1Z3Mu
ZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzY3MDIzCisJcHVibGljIHZvaWQgdGVz
dDA2OSgpIHRocm93cyBFeGNlcHRpb24geworCQl0aGlzLnJ1bk5lZ2F0aXZlVGVzdCgKKwkJCW5l
dyBTdHJpbmdbXSB7CisJCQkJIlguamF2YSIsCisJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKwor
CQkJCSIgICAgcHVibGljIHZvaWQgcnVuKCkge1xuIiArCisJCQkJIiAgICAgICAgZmluYWwgaW50
IGZpdmUgPSA1LCB0ZW4gPSAxMDtcbiIgKworCQkJCSIgICAgICAgIFN0cmluZyBzO1xuIiArCisJ
CQkJIiAgICAgICAgbGFiZWwxOiBkbyB7XG4iICsKKwkJCQkiICAgICAgICAgICAgd2hpbGUgKGZp
dmUgPiB0ZW4pIHtcbiIgKworCQkJCSIgICAgICAgICAgICAgICAgcyA9IFwiXCI7XG4iICsKKwkJ
CQkiICAgICAgICAgICAgICAgIGlmIChzID09IG51bGwpIFxuIiArCisJCQkJIiAgICAgICAgICAg
ICAgICAgICAgY29udGludWUgbGFiZWwxO1xuIiArCisJCQkJIiAgICAgICAgICAgIH1cbiIgKwor
CQkJCSIgICAgICAgIH0gd2hpbGUgKHMgIT0gbnVsbCk7XG4iICsKKwkJCQkifVxuIiArCisJCQkJ
IiAgICBwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmcgW10gYXJncykge1xuIiArCisJCQkJ
IgkJU3lzdGVtLm91dC5wcmludGxuKFwiU1VDQ0VTU1wiKTtcbiIgKworCQkJCSIgICAgfVxuIiAr
CisJCQkJIn1cbiIJCQkJfSwKKwkJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJCSIxLiBXQVJOSU5H
IGluIFguamF2YSAoYXQgbGluZSA1KVxuIiArIAorCQkJCSIJbGFiZWwxOiBkbyB7XG4iICsgCisJ
CQkJIgleXl5eXl5cbiIgKyAKKwkJCQkiVGhlIGxhYmVsIGxhYmVsMSBpcyBuZXZlciBleHBsaWNp
dGx5IHJlZmVyZW5jZWRcbiIgKyAKKwkJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJCSIyLiBFUlJP
UiBpbiBYLmphdmEgKGF0IGxpbmUgNilcbiIgKyAKKwkJCQkiCXdoaWxlIChmaXZlID4gdGVuKSB7
XG4iICsgCisJCQkJIiAgICAgICAgICAgICAgICBzID0gXCJcIjtcbiIgKyAKKwkJCQkiICAgICAg
ICAgICAgICAgIGlmIChzID09IG51bGwpIFxuIiArIAorCQkJCSIgICAgICAgICAgICAgICAgICAg
IGNvbnRpbnVlIGxhYmVsMTtcbiIgKyAKKwkJCQkiICAgICAgICAgICAgfVxuIiArIAorCQkJCSIJ
ICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXlxuIiArIAorCQkJCSJVbnJlYWNoYWJsZSBjb2RlXG4iICsgCisJCQkJIi0t
LS0tLS0tLS1cbiIgKyAKKwkJCQkiMy4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDExKVxuIiAr
IAorCQkJCSIJfSB3aGlsZSAocyAhPSBudWxsKTtcbiIgKyAKKwkJCQkiCSAgICAgICAgIF5cbiIg
KyAKKwkJCQkiVGhlIGxvY2FsIHZhcmlhYmxlIHMgbWF5IG5vdCBoYXZlIGJlZW4gaW5pdGlhbGl6
ZWRcbiIgKyAKKwkJCQkiLS0tLS0tLS0tLVxuIik7CisJfQorCS8vIGh0dHBzOi8vYnVncy5lY2xp
cHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNjcwMjMKKwlwdWJsaWMgdm9pZCB0ZXN0MDcw
KCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCQluZXcgU3Ry
aW5nW10geworCQkJCSJYLmphdmEiLAorCQkJCSJpbXBvcnQgamF2YS51dGlsLkFycmF5TGlzdDtc
biIgKworCQkJCSJpbXBvcnQgamF2YS51dGlsLkFycmF5cztcbiIgKworCQkJCSJpbXBvcnQgamF2
YS51dGlsLkl0ZXJhdG9yO1xuIiArCisJCQkJImltcG9ydCBqYXZhLnV0aWwuTGlzdDtcbiIgKwor
CQkJCSJpbXBvcnQgamF2YS51dGlsLlByb3BlcnRpZXM7XG4iICsKKwkJCQkiaW1wb3J0IG9yZy53
M2MuZG9tLio7XG4iICsKKwkJCQkicHVibGljIGNsYXNzIFggZXh0ZW5kcyBPYmplY3Qge1xuIiAr
CisJCQkJIiAgICAgICAgcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nIFtdIGFyZ3MpIHtc
biIgKworCQkJCSIgICAgICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4gKFwiU1VDQ0VTU1wiKTtc
biIgKworCQkJCSIgICAgICAgIH1cbiIgKworCQkJCSIJcHJpdmF0ZSBzdGF0aWMgY2xhc3MgSGFu
ZGxlciBleHRlbmRzIE9iamVjdCB7XG4iICsKKwkJCQkiCQlwdWJsaWMgaW50IGdldFN0dWZmKCkg
e1xuIiArCisJCQkJIgkJCXJldHVybiAxO1xuIiArCisJCQkJIgkJfVxuIiArCisJCQkJIgkJcHVi
bGljIHZvaWQgaGFuZGxlKEVsZW1lbnQgZWxlbWVudCkge1xuIiArCisJCQkJIgkJCVByb3BlcnRp
ZXMgcHJvcGVydGllcyA9IG5ldyBQcm9wZXJ0aWVzKCk7XG4iICsKKwkJCQkiCQkJTmFtZWROb2Rl
TWFwIGF0dHMgPSBlbGVtZW50LmdldEF0dHJpYnV0ZXMoKTtcbiIgKworCQkJCSIJCQlpZiAoYXR0
cyAhPSBudWxsKSB7XG4iICsKKwkJCQkiCQkJCWZvciAoaW50IGEgPSAwOyBhIDwgYXR0cy5nZXRM
ZW5ndGgoKTsgYSsrKSB7XG4iICsKKwkJCQkiCQkJCQlOb2RlIGF0dCA9IGF0dHMuaXRlbShhKTtc
biIgKworCQkJCSIJCQkJCVN0cmluZyBuYW1lID0gYXR0LmdldE5vZGVOYW1lKCk7XG4iICsKKwkJ
CQkiCQkJCQlTdHJpbmcgdmFsdWUgPSBhdHQuZ2V0Tm9kZVZhbHVlKCk7XG4iICsKKwkJCQkiCQkJ
CQlpZiAoXCJmb29cIi5lcXVhbHMobmFtZSkpIHtcbiIgKworCQkJCSIJCQkJCQluYW1lID0gdmFs
dWU7XG4iICsKKwkJCQkiCQkJCQl9IGVsc2Uge1xuIiArCisJCQkJIgkJCQkJCWlmICghXCJiYXJc
Ii5lcXVhbHMobmFtZSkpXG4iICsKKwkJCQkiCQkJCQkJCWNvbnRpbnVlO1xuIiArCisJCQkJIgkJ
CQkJCW5hbWUgPSB2YWx1ZTtcbiIgKworCQkJCSIJCQkJCX1cbiIgKworCQkJCSIJCQkJCXByb3Bl
cnRpZXMucHV0KG5hbWUsIHZhbHVlKTtcbiIgKworCQkJCSIJCQkJfVxuIiArCisJCQkJIgkJCX1c
biIgKworCQkJCSIJCQlsYWJlbDA6IGRvIHtcbiIgKworCQkJCSIJCQkJTm9kZSBub2RlO1xuIiAr
CisJCQkJIgkJCQlTdHJpbmcgbm9kZU5hbWU7XG4iICsKKwkJCQkiCQkJCWxhYmVsMTogZG8ge1xu
IiArCisJCQkJIgkJCQkJZm9yIChJdGVyYXRvciBpID0gKG5ldyBBcnJheUxpc3QoMSkpLml0ZXJh
dG9yKCk7IGlcbiIgKworCQkJCSIJCQkJCQkJLmhhc05leHQoKTsgbWVtYmVycy5hZGQoZXF1YWxz
KG5vZGUpKSkge1xuIiArCisJCQkJIgkJCQkJCW5vZGUgPSAoTm9kZSkgaS5uZXh0KCk7XG4iICsK
KwkJCQkiCQkJCQkJbm9kZU5hbWUgPSBcIlwiICsgZXF1YWxzKG5vZGUuZ2V0Tm9kZU5hbWUoKSk7
XG4iICsKKwkJCQkiCQkJCQkJaWYgKCFcImZvb1wiLmVxdWFscyhub2RlTmFtZSkpXG4iICsKKwkJ
CQkiCQkJCQkJCWNvbnRpbnVlIGxhYmVsMTtcbiIgKworCQkJCSIJCQkJCX1cbiIgKworCQkJCSIJ
CQkJCWJyZWFrIGxhYmVsMDtcbiIgKworCQkJCSIJCQkJfSB3aGlsZSAoIVwiYmFyXCIuZXF1YWxz
KG5vZGVOYW1lKSk7XG4iICsKKwkJCQkiCQkJCUl0ZXJhdG9yIGkgPSAobmV3IEFycmF5TGlzdCgx
KSkuaXRlcmF0b3IoKTtcbiIgKworCQkJCSIJCQkJd2hpbGUgKGkuaGFzTmV4dCgpKSB7XG4iICsK
KwkJCQkiCQkJCQlOb2RlIG4gPSAoTm9kZSkgaS5uZXh0KCk7XG4iICsKKwkJCQkiCQkJCQlTdHJp
bmcgbmFtZSA9IHRvU3RyaW5nKCkgKyBuLmdldE5vZGVOYW1lKCk7XG4iICsKKwkJCQkiCQkJCQlp
ZiAoXCJ3dGZcIi5lcXVhbHMobmFtZSkpIHtcbiIgKworCQkJCSIJCQkJCQlTdHJpbmcgcHJvcGVy
dHlOYW1lID0gKHRvU3RyaW5nKCkgKyBuLmdldEF0dHJpYnV0ZXMoKVxuIiArCisJCQkJIgkJCQkJ
CQkJLmdldE5hbWVkSXRlbShcImJyb2tlblwiKSkudHJpbSgpO1xuIiArCisJCQkJIgkJCQkJCVN0
cmluZyB2YWx1ZSA9IHRvU3RyaW5nKCkgKyBuO1xuIiArCisJCQkJIgkJCQkJCXByb3BlcnRpZXMu
cHV0KHByb3BlcnR5TmFtZSwgdmFsdWUpO1xuIiArCisJCQkJIgkJCQkJfVxuIiArCisJCQkJIgkJ
CQl9XG4iICsKKwkJCQkiCQkJfSB3aGlsZSAodHJ1ZSk7XG4iICsKKwkJCQkiCQkJcHJvcGVydGll
c0J1aWxkZXIuZXF1YWxzKHByb3BlcnRpZXMpO1xuIiArCisJCQkJIgkJCWJ1aWxkZXIuZXF1YWxz
KHByb3BlcnRpZXNCdWlsZGVyLmhhc2hDb2RlKCkpO1xuIiArCisJCQkJIgkJCWJ1aWxkZXIuZXF1
YWxzKG1lbWJlcnMpO1xuIiArCisJCQkJIgkJfVxuIiArCisJCQkJIgkJcHJpdmF0ZSBmaW5hbCBP
YmplY3QgYztcbiIgKworCQkJCSIJCXByaXZhdGUgT2JqZWN0IGJ1aWxkZXI7XG4iICsKKwkJCQki
CQlwcml2YXRlIExpc3QgbWVtYmVycztcbiIgKworCQkJCSIJCXByaXZhdGUgT2JqZWN0IHByb3Bl
cnRpZXNCdWlsZGVyO1xuIiArCisJCQkJIgkJcHVibGljIEhhbmRsZXIoT2JqZWN0IGMpIHtcbiIg
KworCQkJCSIJCQl0aGlzLmMgPSBjO1xuIiArCisJCQkJIgkJCWJ1aWxkZXIgPSBBcnJheXMuYXNM
aXN0KE9iamVjdC5jbGFzcyk7XG4iICsKKwkJCQkiCQkJYnVpbGRlci5lcXVhbHMoXCJmb29cIik7
XG4iICsKKwkJCQkiCQkJYnVpbGRlci5lcXVhbHMoXCJiYXJcIik7XG4iICsKKwkJCQkiCQkJbWVt
YmVycyA9IG5ldyBBcnJheUxpc3QoKTtcbiIgKworCQkJCSIJCQlwcm9wZXJ0aWVzQnVpbGRlciA9
IEFycmF5cy5hc0xpc3QoT2JqZWN0LmNsYXNzKTtcbiIgKworCQkJCSIJCQlPYmplY3QgYmVhbkRl
ZmluaXRpb24gPSBwcm9wZXJ0aWVzQnVpbGRlci50b1N0cmluZygpO1xuIiArCisJCQkJIgkJCU9i
amVjdCBob2xkZXIgPSBuZXcgU3RyaW5nKFwic3Rpcm5nXCIpO1xuIiArCisJCQkJIgkJCUFycmF5
cy5hc0xpc3QoaG9sZGVyLCBjLnRvU3RyaW5nKCkpO1xuIiArCisJCQkJIgkJfVxuIiArCisJCQkJ
Igl9XG4iICsKKwkJCQkiCXB1YmxpYyBYKCkge1xuIiArCisJCQkJIgl9XG4iICsKKwkJCQkiCXBy
b3RlY3RlZCBPYmplY3QgcGFyc2VJbnRlcm5hbChFbGVtZW50IGVsZW1lbnQsIE9iamVjdCBjKSB7
XG4iICsKKwkJCQkiCQlIYW5kbGVyIGggPSBuZXcgSGFuZGxlcihjKTtcbiIgKworCQkJCSIJCWgu
aGFuZGxlKGVsZW1lbnQpO1xuIiArCisJCQkJIgkJcmV0dXJuIGguZ2V0U3R1ZmYoKTtcbiIgKwor
CQkJCSIJfVxuIiArCisJCQkJIn1cbiIKKwkJCQl9LAorCQkJCSJTVUNDRVNTIik7CisJfQogfQpk
aWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Eb1N0YXRlbWVudC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Eb1N0
YXRlbWVudC5qYXZhCmluZGV4IDU4MDZjZTguLjc3NGM3YWEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvRG9TdGF0ZW1lbnQuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0RvU3RhdGVtZW50LmphdmEKQEAg
LTEsNSArMSw1IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAy
MDAwLCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAy
MDAwLCAyMDEyIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNl
cnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJl
IG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGlj
ZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlz
IGF2YWlsYWJsZSBhdApAQCAtMTAxLDcgKzEwMSwxMSBAQAogCQkJKHRoaXMuYWN0aW9uID09IG51
bGwKIAkJCQk/IGFjdGlvbkluZm8KIAkJCQk6IChhY3Rpb25JbmZvLm1lcmdlZFdpdGgobG9vcGlu
Z0NvbnRleHQuaW5pdHNPbkNvbnRpbnVlKSkpLmNvcHkoKSk7Ci0JdGhpcy5wcmVDb25kaXRpb25J
bml0U3RhdGVJbmRleCA9IGN1cnJlbnRTY29wZS5tZXRob2RTY29wZSgpLnJlY29yZEluaXRpYWxp
emF0aW9uU3RhdGVzKGFjdGlvbkluZm8pOworCS8qIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9i
dWdzL3Nob3dfYnVnLmNnaT9pZD0zNjcwMjMsIHdlIHJlYWNoIHRoZSBjb25kaXRpb24gYXQgdGhl
IGJvdHRvbSB2aWEgdHdvIGFyY3MsIAorCSAgIG9uZSBieSBmcmVlIGZhbGwgYW5kIGFub3RoZXIg
YnkgY29udGludWluZy4uLiBNZXJnZSBpbml0aWFsaXphdGlvbnMgcHJvcGFnYXRlZCB0aHJvdWdo
IHRoZSB0d28gcGF0aHdheXMsCisJICAgY2YsIHdoaWxlIGFuZCBmb3IgbG9vcHMuCisJKi8KKwl0
aGlzLnByZUNvbmRpdGlvbkluaXRTdGF0ZUluZGV4ID0gY3VycmVudFNjb3BlLm1ldGhvZFNjb3Bl
KCkucmVjb3JkSW5pdGlhbGl6YXRpb25TdGF0ZXMoYWN0aW9uSW5mby5tZXJnZWRXaXRoKGxvb3Bp
bmdDb250ZXh0LmluaXRzT25Db250aW51ZSkpOwogCWlmICghaXNDb25kaXRpb25PcHRpbWl6ZWRG
YWxzZSAmJiB0aGlzLmNvbnRpbnVlTGFiZWwgIT0gbnVsbCkgewogCQlsb29waW5nQ29udGV4dC5j
b21wbGFpbk9uRGVmZXJyZWRGaW5hbENoZWNrcyhjdXJyZW50U2NvcGUsIGNvbmRJbmZvKTsKIAkJ
Y29uZExvb3BDb250ZXh0LmNvbXBsYWluT25EZWZlcnJlZEZpbmFsQ2hlY2tzKGN1cnJlbnRTY29w
ZSwgY29uZEluZm8pOw==
</data>

          </attachment>
      

    </bug>

</bugzilla>