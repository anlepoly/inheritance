<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>361938</bug_id>
          
          <creation_ts>2011-10-25 10:49:00 -0400</creation_ts>
          <short_desc>Formerly working JLS3 parser not working -- Scanner reports com.sun.jdi.InvocationException occurred invoking method.</short_desc>
          <delta_ts>2012-01-19 19:29:21 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.7.1</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>3.6.2+J7</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Missing name">werner</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>daniel_megert</cc>
    
    <cc>Olivier_Thomann</cc>
    
    <cc>satyam.kandula</cc>
    
    <cc>werner</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2016217</commentid>
    <comment_count>0</comment_count>
    <who name="Missing name">werner</who>
    <bug_when>2011-10-25 10:49:58 -0400</bug_when>
    <thetext>Build Identifier: 20110916-0149

I am parsing sourcecode with the help of the ASTParser the following way:

String source = ...

ASTParser parser = ASTParser.newParser(AST.JLS3);
parser.setKind(ASTParser.K_COMPILATION_UNIT);
parser.setSource(source.toCharArray());

Up to Eclipse 3.7 this worked like a charme. Since the last update which introduced JLS4, the parser cannot parse a class it could before. When I open the AST in debugger mode, the scanner variable reports

com.sun.jdi.InvocationException occurred invoking method.

When I switch to JLS4, it parses the sourcecode without any problems and I get my compilation unit just as I did before with JLS3. Since I want my plugin to be used as well by people who haven&apos;t already switched to Eclipse 3.7.1, I cannot use JLS4 but would like to stay with JLS3.

I should note, that no Exception is thrown at the console. The exception is only reported as value of the Scanner. I provide the class on which it fails (this does not happen for all classes) as well.

Reproducible: Always

Steps to Reproduce:
1. Update Eclipse 3.7 to 3.7.1 (Indigo Service Release 1) that brings JLS4
2. Parse source that worked with JLS3 again with JLS3
3. Get InvocationException message in scanner of AST</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2016219</commentid>
    <comment_count>1</comment_count>
      <attachid>205923</attachid>
    <who name="Missing name">werner</who>
    <bug_when>2011-10-25 10:51:31 -0400</bug_when>
    <thetext>Created attachment 205923
The source that cannot be parsed any more by JLS3 but is parsed by JLS4.

The source that cannot be parsed any more by JLS3 but is parsed by JLS4.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2016340</commentid>
    <comment_count>2</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-10-25 12:56:22 -0400</bug_when>
    <thetext>Could you please provide the .log file of your workspace ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2016623</commentid>
    <comment_count>3</comment_count>
      <attachid>205967</attachid>
    <who name="Missing name">werner</who>
    <bug_when>2011-10-26 03:38:58 -0400</bug_when>
    <thetext>Created attachment 205967
Workspace log in case of using JLS3</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2016624</commentid>
    <comment_count>4</comment_count>
      <attachid>205968</attachid>
    <who name="Missing name">werner</who>
    <bug_when>2011-10-26 03:39:15 -0400</bug_when>
    <thetext>Created attachment 205968
Workspace log in case of using JLS4</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2016625</commentid>
    <comment_count>5</comment_count>
    <who name="Missing name">werner</who>
    <bug_when>2011-10-26 03:43:09 -0400</bug_when>
    <thetext>The workspace logs did not reveal anything to me. By the way I noticed, that the Scanner object in the AST very often contains the &quot;com.sun.jdi.InvocationException occurred invoking method&quot; string, also when the class itself is parsed correctly, i.e. the CompilationUnit object created with

compilationUnit = (CompilationUnit) parser.createAST(null);

is shown as the parsed sourcecode in the debugger, while the attached source is shown as something like:

!org.eclipse.jdt.core.dom.CompilationUnit@37423658

When using JLS4, it is shown as sourcecode in the debugger as well.

Hope this helps.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2016734</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-10-26 07:34:20 -0400</bug_when>
    <thetext>(In reply to comment #5)
&gt; The workspace logs did not reveal anything to me. By the way I noticed, that
&gt; the Scanner object in the AST very often contains the
&gt; &quot;com.sun.jdi.InvocationException occurred invoking method&quot; string,

This probably means that the debug print invocation of toString on
the scanner object failed probably due to bad state. May be some
field is null which would result in this message while viewing the
object during debugging and could also indicate the underlying problem
for the subject matter at hand.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2016745</commentid>
    <comment_count>7</comment_count>
    <who name="Missing name">werner</who>
    <bug_when>2011-10-26 08:05:28 -0400</bug_when>
    <thetext>I don&apos;t think the Scanner value is related to this particular problem, since it occurs as well with JLS4. Nevertheless, the source parsed with JLS4 is available as output of the CompilationUnit in debugger while not any more with JLS3.

By the way .. when I walk through the AST of the CompilationUnit, I get the methods contained in the class. Very strange...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2017472</commentid>
    <comment_count>8</comment_count>
    <who name="Missing name">werner</who>
    <bug_when>2011-10-27 06:56:12 -0400</bug_when>
    <thetext>The same problem occurs with Eclipse 4 considering JLS3 and JLS4.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2020620</commentid>
    <comment_count>9</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-03 05:21:33 -0400</bug_when>
    <thetext>(In reply to comment #5)
&gt; The workspace logs did not reveal anything to me. By the way I noticed, that
&gt; the Scanner object in the AST very often contains the
&gt; &quot;com.sun.jdi.InvocationException occurred invoking method&quot; string, also when
&gt; the class itself is parsed correctly, i.e. the CompilationUnit object created
&gt; with

It doesn&apos;t &quot;contain&quot; that string, as I said earlier the debug print toString
method is encountering an NPE due the fact that scanner.source comes out to
be null. You can expand the scanner object and you will be able to view the
members.

&gt; When using JLS4, it is shown as sourcecode in the debugger as well.

I see the same behavior here too, i.e the com.sun.jdi* message shows up
when you view the value of the scanner object in the debugger even in JLS4
using HEAD version.

Will continue to investigate.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2020626</commentid>
    <comment_count>10</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-03 05:31:52 -0400</bug_when>
    <thetext>Just so we are on the same page, can you paste a larger fragment of the
code that you are stepping through and indicating where exactly you attempt
to view the scanner object. Once I have this, I&apos;ll study the behavior
difference between pre-JLS4 days and now to see what brought about this
behavior.

It is not clear to me (yet) that there is a bug here. You are peeking at
internal state of objects while debugging and that visualization operation
is failing due to partially cooked state of objects.

I agree if things can be restored to the earlier state that enabled debugging
then that would be better.

(In reply to comment #0)

&gt; Up to Eclipse 3.7 this worked like a charme. Since the last update which
&gt; introduced JLS4, the parser cannot parse a class it could before. When I open
&gt; the AST in debugger mode, the scanner variable reports
&gt; 
&gt; com.sun.jdi.InvocationException occurred invoking method.

Do you have some clearer evidence that &quot;the parser could not parse a class
it could before&quot; other than this debug print failure.

May be if you paste the larger snippet you are stepping through and indicate
clearly where you are able print the scanner object that you aren&apos;t anymore
able to, I can follow up - Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2020633</commentid>
    <comment_count>11</comment_count>
    <who name="Missing name">werner</who>
    <bug_when>2011-11-03 05:51:07 -0400</bug_when>
    <thetext>&gt; Do you have some clearer evidence that &quot;the parser could not parse a class
&gt; it could before&quot; other than this debug print failure.
&gt; 
&gt; May be if you paste the larger snippet you are stepping through and indicate
&gt; clearly where you are able print the scanner object that you aren&apos;t anymore
&gt; able to, I can follow up - Thanks.

Hello!

Well -- the main failure for me was not the debug print failure (earlier I just thought it may indicate the problem&apos;s source), but that if I create the 

compilationUnit = (CompilationUnit) parser.createAST(null);

and then take a type from it with

BodyDeclaration t = compilationUnit.types().get(0);

the execution of

t.toString();

normally returned the source of the BodyDeclaration object as a string. Since JLS4 is in, with JLS3 it sometimes returns sth. like

&quot;!org.eclipse.jdt.core.dom.CompilationUnit@37423658&quot;

instead of the sourcecode. If I use JLS4, the same code returns me the sourcecode of the declaration as JLS3 did before. This happens e.g. with the earlier attached java file.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2020646</commentid>
    <comment_count>12</comment_count>
      <attachid>206392</attachid>
    <who name="Missing name">werner</who>
    <bug_when>2011-11-03 06:14:49 -0400</bug_when>
    <thetext>Created attachment 206392
Contains an example Eclipse project that demonstrates the problem.

This example project demonstrates the problem on the attached source code. With JLS3 it shows only an object-referece string, while JLS4 shows the source.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2020647</commentid>
    <comment_count>13</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-03 06:16:39 -0400</bug_when>
    <thetext>(In reply to comment #11)

&gt; Well -- the main failure for me was not the debug print failure (earlier I just
&gt; thought it may indicate the problem&apos;s source), but that if I create the 

I see, I understand better now, 

(In reply to comment #12)
&gt; Created attachment 206392 [details]
&gt; Contains an example Eclipse project that demonstrates the problem.

Excellent, thanks, I&apos;ll see what is going on here.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2024416</commentid>
    <comment_count>14</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-10 05:58:01 -0500</bug_when>
    <thetext>org.eclipse.jdt.core.dom.TryStatement.resources() reads:

	public List resources() {
		// more efficient than just calling unsupportedIn2_3() to check
		if (this.resources == null) {
			unsupportedIn2_3();
		}
		return this.resources;
	}

I think this should be:

	public List resources() {
		// more efficient than just calling unsupportedIn2_3() to check
		if (this.resources != null) {
			unsupportedIn2_3();
		}
		return this.resources;
	}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2024429</commentid>
    <comment_count>15</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-10 06:24:58 -0500</bug_when>
    <thetext>All cients of org.eclipse.jdt.internal.core.dom.NaiveASTFlattener are prone to
this bug, which at the moment is fortunately all of org.eclipse.jdt.core.dom.ASTNode.toString() :)

Minimal test case that shows the problem:


public class X {
  X(){
    try {
    } finally {
    }
  }
}

Patch will follow shortly.

If the one character fix stands scrutiny will backport to 3.7.2 also.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2024436</commentid>
    <comment_count>16</comment_count>
      <attachid>206781</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-10 06:50:06 -0500</bug_when>
    <thetext>Created attachment 206781
Patch under test</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2024482</commentid>
    <comment_count>17</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-10 08:17:51 -0500</bug_when>
    <thetext>(In reply to comment #11)
&gt; &gt; Do you have some clearer evidence that &quot;the parser could not parse a class
&gt; &gt; it could before&quot; other than this debug print failure.
&gt; &gt; 
&gt; &gt; May be if you paste the larger snippet you are stepping through and indicate
&gt; &gt; clearly where you are able print the scanner object that you aren&apos;t anymore
&gt; &gt; able to, I can follow up - Thanks.
&gt; 
&gt; Hello!
&gt; 
&gt; Well -- the main failure for me was not the debug print failure (earlier I just
&gt; thought it may indicate the problem&apos;s source), but that if I create the 
&gt; 
&gt; compilationUnit = (CompilationUnit) parser.createAST(null);

Hello, the patch posted fixes this problem which you identify as the main
failure for you.

For the inability to view the scanner object, as requested in comment# 10
please provide a snippet and also identify precisely where you view the
value of the scanner object. Do you notice a difference between JLS3 and
JLS4 in this exercise ? Do you notice a regression compared to earlier
versions ? I am not sure yet there is a problem there.

toString() methods are not always coded defensively, so if they run into
an NPE, you will see the com.sun.jdi.InvocationException.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2024958</commentid>
    <comment_count>18</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-11 02:07:21 -0500</bug_when>
    <thetext>Released for 3.8 M4 via commits: 8ab95da8a0ea0d6e3c8c0619022e89253da6eb42 and
45bb778e6ee242f361e8397463f6e1b0b9b9dfa0 (the latter removing a sysout needlessly
left in)

If you still suspect the com.sun.jdi.InvocationException issue is real problem/
regression, please open a separate bug with clear steps - Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2024960</commentid>
    <comment_count>19</comment_count>
    <who name="Missing name">werner</who>
    <bug_when>2011-11-11 02:19:41 -0500</bug_when>
    <thetext>(In reply to comment #18)
&gt; Released for 3.8 M4 via commits: 8ab95da8a0ea0d6e3c8c0619022e89253da6eb42 and
&gt; 45bb778e6ee242f361e8397463f6e1b0b9b9dfa0 (the latter removing a sysout
&gt; needlessly
&gt; left in)
&gt; 
&gt; If you still suspect the com.sun.jdi.InvocationException issue is real problem/
&gt; regression, please open a separate bug with clear steps - Thanks.

I don&apos;t think the InvocationException issue is a real problem; as I said, it was just a first suspect but obviously not the one responsible.

Thank you for investigating the bug and fixing it.

Cheers!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2024972</commentid>
    <comment_count>20</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-11 03:01:43 -0500</bug_when>
    <thetext>As the fix is a single character change that fixes a blatantly wrong
piece of code, I have also arranged to release this into 3.7.2 and 3.6.2+java7
branches.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2025737</commentid>
    <comment_count>21</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2011-11-14 03:26:43 -0500</bug_when>
    <thetext>(In reply to comment #20)
&gt; As the fix is a single character change that fixes a blatantly wrong
&gt; piece of code, I have also arranged to release this into 3.7.2 and 3.6.2+java7
&gt; branches.

+1.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2035648</commentid>
    <comment_count>22</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-12-05 08:33:07 -0500</bug_when>
    <thetext>I found some more incorrect code which shouldn&apos;t impact any functionality. However, I have opened another bug 365582 to track the incorrect code.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2035650</commentid>
    <comment_count>23</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-12-05 08:33:35 -0500</bug_when>
    <thetext>Verified for 3.8M4 using build I20111202-0800</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2052625</commentid>
    <comment_count>24</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-01-19 00:56:06 -0500</bug_when>
    <thetext>Verified for 3.7.2RC2 using build M20120118-0800</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2053119</commentid>
    <comment_count>25</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2012-01-19 14:33:25 -0500</bug_when>
    <thetext>(In reply to comment #14)
&gt; org.eclipse.jdt.core.dom.TryStatement.resources() reads:
&gt; 
&gt;     public List resources() {
&gt;         // more efficient than just calling unsupportedIn2_3() to check
&gt;         if (this.resources == null) {
&gt;             unsupportedIn2_3();
&gt;         }
&gt;         return this.resources;
&gt;     }
This is actually fine. resources is null only if the ast level is 2 or 3 as this is initialized in the constructor for ast level &gt;= 4.
The real problem is that the resources() call is not within the if that checks for the jls level being &gt;= JLS4 in the naive flattener as Satyam mentioned in bug 365582.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2053197</commentid>
    <comment_count>26</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-19 16:41:02 -0500</bug_when>
    <thetext>(In reply to comment #25)

&gt; This is actually fine. resources is null only if the ast level is 2 or 3 as
&gt; this is initialized in the constructor for ast level &gt;= 4.
&gt; The real problem is that the resources() call is not within the if that checks
&gt; for the jls level being &gt;= JLS4 in the naive flattener as Satyam mentioned in
&gt; bug 365582.

You are right of course, we&apos;ll adopt the fix for bug 365582 at M6 time.
Thanks Olivier.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2053215</commentid>
    <comment_count>27</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-19 16:58:34 -0500</bug_when>
    <thetext>(In reply to comment #26)

&gt; You are right of course, we&apos;ll adopt the fix for bug 365582 at M6 time.

I meant M5 time.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2053272</commentid>
    <comment_count>28</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-19 19:29:21 -0500</bug_when>
    <thetext>(In reply to comment #27)
&gt; (In reply to comment #26)
&gt; 
&gt; &gt; You are right of course, we&apos;ll adopt the fix for bug 365582 at M6 time.
&gt; 
&gt; I meant M5 time.

Released the proper fix for M5.

(In reply to comment #25)

&gt; This is actually fine. resources is null only if the ast level is 2 or 3 as
&gt; this is initialized in the constructor for ast level &gt;= 4.

Yes, indeed, I was led astray by the hang over memory of the compiler
AST having resources set to valid ones even in (ill formed) Java 6
programs.

For the maintenance streams, I&apos;ll leave things as they are as the
probability of this situation acting up are very low, realistically
speaking.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>205923</attachid>
            <date>2011-10-25 10:51:00 -0400</date>
            <delta_ts>2011-10-25 10:51:31 -0400</delta_ts>
            <desc>The source that cannot be parsed any more by JLS3 but is parsed by JLS4.</desc>
            <filename>Stack.java</filename>
            <type>application/octet-stream</type>
            <size>2587</size>
            <attacher name="Missing name">werner</attacher>
            
              <data encoding="base64">LyogICBDb3B5cmlnaHQgMjAwNCBCRUEgU3lzdGVtcywgSW5jLgogKgogKiAgIExpY2Vuc2VkIHVu
ZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSAiTGljZW5zZSIpOwogKiAg
IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUg
TGljZW5zZS4KICogICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKICoK
ICogICAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wCiAqCiAq
ICAgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0
aW5nLCBzb2Z0d2FyZQogKiAgIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3Ry
aWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiAqICAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENP
TkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuCiAqICAgU2Vl
IHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Np
b25zIGFuZAogKiAgIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgogKi8KCnBhY2thZ2Ug
Y29tLmJlYS54bWwuc3RyZWFtLnV0aWw7CgppbXBvcnQgamF2YS51dGlsLkFic3RyYWN0Q29sbGVj
dGlvbjsKaW1wb3J0IGphdmEudXRpbC5FbXB0eVN0YWNrRXhjZXB0aW9uOwppbXBvcnQgamF2YS51
dGlsLkl0ZXJhdG9yOwoKcHVibGljIGZpbmFsIGNsYXNzIFN0YWNrIGV4dGVuZHMgQWJzdHJhY3RD
b2xsZWN0aW9uIHsKICBwcml2YXRlIE9iamVjdFtdIHZhbHVlczsKICBwcml2YXRlIGludCBwb2lu
dGVyOwoKICBwdWJsaWMgU3RhY2soKSB7CiAgICB0aGlzKDE1KTsKICB9CgogIHB1YmxpYyBTdGFj
ayhpbnQgc2l6ZSkgewogICAgaWYgKHNpemUgPCAwKSB0aHJvdyBuZXcgSWxsZWdhbEFyZ3VtZW50
RXhjZXB0aW9uKCk7CiAgICB2YWx1ZXMgPSBuZXcgT2JqZWN0W3NpemVdOwogICAgcG9pbnRlciA9
IDA7CiAgfQoKICBwcml2YXRlIFN0YWNrKE9iamVjdFtdIHZhbHVlcywgaW50IHBvaW50ZXIpIHsK
ICAgIHRoaXMudmFsdWVzID0gdmFsdWVzOwogICAgdGhpcy5wb2ludGVyID0gcG9pbnRlcjsKICB9
CgogIHByaXZhdGUgdm9pZCByZXNpemUoKSB7CiAgICBpZiAocG9pbnRlciA9PSAwKSB7CiAgICAg
IHZhbHVlcyA9IG5ldyBPYmplY3RbMV07CiAgICAgIHJldHVybjsKICAgIH0KICAgIE9iamVjdFtd
IG8gPSBuZXcgT2JqZWN0W3BvaW50ZXIgKiAyXTsKICAgIFN5c3RlbS5hcnJheWNvcHkodmFsdWVz
LCAwLCBvLCAwLCBwb2ludGVyKTsKICAgIHZhbHVlcyA9IG87CiAgfQoKICBwdWJsaWMgYm9vbGVh
biBhZGQoT2JqZWN0IG8pIHsKICAgIHB1c2gobyk7CiAgICByZXR1cm4gdHJ1ZTsKICB9CgogIHB1
YmxpYyB2b2lkIGNsZWFyKCkgewogICAgT2JqZWN0W10gdiA9IHZhbHVlczsKICAgIHdoaWxlIChw
b2ludGVyID4gMCApIHsKICAgICAgdlstLXBvaW50ZXJdID0gbnVsbDsKICAgIH0KICB9CgogIHB1
YmxpYyBib29sZWFuIGlzRW1wdHkoKSB7IHJldHVybiBwb2ludGVyID09IDA7IH0KCiAgcHVibGlj
IEl0ZXJhdG9yIGl0ZXJhdG9yKCkgewogICAgT2JqZWN0W10gbyA9IG5ldyBPYmplY3RbcG9pbnRl
cl07CiAgICBTeXN0ZW0uYXJyYXljb3B5KHZhbHVlcywgMCwgbywgMCwgcG9pbnRlcik7CiAgICBy
ZXR1cm4gbmV3IEFycmF5SXRlcmF0b3Iobyk7CiAgfQoKICBwdWJsaWMgT2JqZWN0IGNsb25lKCkg
ewogICAgT2JqZWN0W10gbmV3VmFsdWVzID0gbmV3IE9iamVjdFtwb2ludGVyXTsKICAgIFN5c3Rl
bS5hcnJheWNvcHkodmFsdWVzLCAwLCBuZXdWYWx1ZXMsIDAsIHBvaW50ZXIpOwogICAgcmV0dXJu
IG5ldyBTdGFjayhuZXdWYWx1ZXMsIHBvaW50ZXIpOyAKICB9CgogIHB1YmxpYyBpbnQgc2l6ZSgp
IHsgcmV0dXJuIHBvaW50ZXI7IH0KCiAgcHVibGljIHZvaWQgcHVzaChPYmplY3QgbykgewogICAg
aWYgKHBvaW50ZXIgPT0gdmFsdWVzLmxlbmd0aCkgcmVzaXplKCk7CiAgICB2YWx1ZXNbcG9pbnRl
cisrXSA9IG87CiAgfQoKICBwdWJsaWMgT2JqZWN0IHBvcCgpIHsKICAgIHRyeSB7CiAgICAgIE9i
amVjdCBvID0gdmFsdWVzWy0tcG9pbnRlcl07CiAgICAgIHZhbHVlc1twb2ludGVyXSA9IG51bGw7
CiAgICAgIHJldHVybiBvOwogICAgfSBjYXRjaCAoQXJyYXlJbmRleE91dE9mQm91bmRzRXhjZXB0
aW9uIGFpb29iZSkgewogICAgICAvLyBNYWtlIHN1cmUgdGhlIHN0YWNrIGNvbnRpbnVlcyB0byBi
ZSB1c2VhYmxlIGV2ZW4gaWYgd2UgcG9wcGVkCiAgICAgIC8vIHRvbyBtYW55LgogICAgICBpZiAo
cG9pbnRlciA8IDApIHBvaW50ZXIgPSAwOwogICAgICB0aHJvdyBuZXcgRW1wdHlTdGFja0V4Y2Vw
dGlvbigpOwogICAgfQogIH0KCiAgcHVibGljIE9iamVjdCBwZWVrKCkgewogICAgdHJ5IHsKICAg
ICAgcmV0dXJuIHZhbHVlc1twb2ludGVyIC0gMV07CiAgICB9IGNhdGNoIChBcnJheUluZGV4T3V0
T2ZCb3VuZHNFeGNlcHRpb24gYWlvb2JlKSB7CiAgICAgIHRocm93IG5ldyBFbXB0eVN0YWNrRXhj
ZXB0aW9uKCk7CiAgICB9CiAgfQp9Cg==
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>205967</attachid>
            <date>2011-10-26 03:38:00 -0400</date>
            <delta_ts>2011-10-26 03:38:58 -0400</delta_ts>
            <desc>Workspace log in case of using JLS3</desc>
            <filename>log_JLS3.txt</filename>
            <type>text/plain</type>
            <size>3575</size>
            <attacher name="Missing name">werner</attacher>
            
              <data encoding="base64">IVNFU1NJT04gMjAxMS0xMC0yNiAwOTozMjoxNC4wOTIgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KZWNsaXBzZS5idWlsZElkPU0yMDExMDkwOS0xMzM1Cmph
dmEudmVyc2lvbj0xLjYuMF8yNgpqYXZhLnZlbmRvcj1BcHBsZSBJbmMuCkJvb3RMb2FkZXIgY29u
c3RhbnRzOiBPUz1tYWNvc3gsIEFSQ0g9eDg2XzY0LCBXUz1jb2NvYSwgTkw9ZGVfREUKRnJhbWV3
b3JrIGFyZ3VtZW50czogIC1wcm9kdWN0IG9yZy5lY2xpcHNlLnBsYXRmb3JtLmlkZQpDb21tYW5k
LWxpbmUgYXJndW1lbnRzOiAgLXByb2R1Y3Qgb3JnLmVjbGlwc2UucGxhdGZvcm0uaWRlIC1kYXRh
IC9Vc2Vycy93ZXJuZXIvRG9jdW1lbnRzL3dvcmtzcGFjZS8uLi9ydW50aW1lLUVjbGlwc2VBcHBs
aWNhdGlvbiAtZGV2IGZpbGU6L1VzZXJzL3dlcm5lci9Eb2N1bWVudHMvd29ya3NwYWNlLy5tZXRh
ZGF0YS8ucGx1Z2lucy9vcmcuZWNsaXBzZS5wZGUuY29yZS9FY2xpcHNlIEFwcGxpY2F0aW9uL2Rl
di5wcm9wZXJ0aWVzIC1vcyBtYWNvc3ggLXdzIGNvY29hIC1hcmNoIHg4Nl82NCAtY29uc29sZUxv
ZwoKIUVOVFJZIG9yZy5lY2xpcHNlLmNvcmUubmV0IDEgMCAyMDExLTEwLTI2IDA5OjMyOjE2Ljg2
MwohTUVTU0FHRSBTeXN0ZW0gcHJvcGVydHkgaHR0cC5ub25Qcm94eUhvc3RzIGhhcyBiZWVuIHNl
dCB0byBsb2NhbHwqLmxvY2FsfDE2OS4yNTQvMTZ8Ki4xNjkuMjU0LzE2IGJ5IGFuIGV4dGVybmFs
IHNvdXJjZS4gVGhpcyB2YWx1ZSB3aWxsIGJlIG92ZXJ3cml0dGVuIHVzaW5nIHRoZSB2YWx1ZXMg
ZnJvbSB0aGUgcHJlZmVyZW5jZXMKCiFFTlRSWSBvcmcuZWNsaXBzZS5qZmFjZSAyIDAgMjAxMS0x
MC0yNiAwOTozMjoyMC42MzEKIU1FU1NBR0UgS2V5YmluZGluZyBjb25mbGljdHMgb2NjdXJyZWQu
ICBUaGV5IG1heSBpbnRlcmZlcmUgd2l0aCBub3JtYWwgYWNjZWxlcmF0b3Igb3BlcmF0aW9uLgoh
U1VCRU5UUlkgMSBvcmcuZWNsaXBzZS5qZmFjZSAyIDAgMjAxMS0xMC0yNiAwOTozMjoyMC42MzEK
IU1FU1NBR0UgQSBjb25mbGljdCBvY2N1cnJlZCBmb3IgQUxUK1NISUZUK0QgUjoKQmluZGluZyhB
TFQrU0hJRlQrRCBSLAoJUGFyYW1ldGVyaXplZENvbW1hbmQoQ29tbWFuZChvcmcuZWNsaXBzZS5y
YXAudWkubGF1bmNoLlJBUExhdW5jaFNob3J0Y3V0LmRlYnVnLERlYnVnIFJBUCBBcHBsaWNhdGlv
biwKCQlEZWJ1ZyBSQVAgQXBwbGljYXRpb24sCgkJQ2F0ZWdvcnkob3JnLmVjbGlwc2UuZGVidWcu
dWkuY2F0ZWdvcnkucnVuLFJ1bi9EZWJ1ZyxSdW4vRGVidWcgY29tbWFuZCBjYXRlZ29yeSx0cnVl
KSwKCQksCgkJLCx0cnVlKSxudWxsKSwKCW9yZy5lY2xpcHNlLnVpLmRlZmF1bHRBY2NlbGVyYXRv
ckNvbmZpZ3VyYXRpb24sCglvcmcuZWNsaXBzZS51aS5jb250ZXh0cy53aW5kb3csLCxzeXN0ZW0p
CkJpbmRpbmcoQUxUK1NISUZUK0QgUiwKCVBhcmFtZXRlcml6ZWRDb21tYW5kKENvbW1hbmQob3Jn
LmVjbGlwc2Uud3N0LnNlcnZlci5sYXVuY2hTaG9ydGN1dC5kZWJ1ZyxEZWJ1ZyBvbiBTZXJ2ZXIs
CgkJRGVidWcgdGhlIGN1cnJlbnQgc2VsZWN0aW9uIG9uIGEgc2VydmVyLAoJCUNhdGVnb3J5KG9y
Zy5lY2xpcHNlLmRlYnVnLnVpLmNhdGVnb3J5LnJ1bixSdW4vRGVidWcsUnVuL0RlYnVnIGNvbW1h
bmQgY2F0ZWdvcnksdHJ1ZSksCgkJLAoJCSwsdHJ1ZSksbnVsbCksCglvcmcuZWNsaXBzZS51aS5k
ZWZhdWx0QWNjZWxlcmF0b3JDb25maWd1cmF0aW9uLAoJb3JnLmVjbGlwc2UudWkuY29udGV4dHMu
d2luZG93LCwsc3lzdGVtKQohU1VCRU5UUlkgMSBvcmcuZWNsaXBzZS5qZmFjZSAyIDAgMjAxMS0x
MC0yNiAwOTozMjoyMC42MzEKIU1FU1NBR0UgQSBjb25mbGljdCBvY2N1cnJlZCBmb3IgQUxUK1NI
SUZUK1ggUjoKQmluZGluZyhBTFQrU0hJRlQrWCBSLAoJUGFyYW1ldGVyaXplZENvbW1hbmQoQ29t
bWFuZChvcmcuZWNsaXBzZS5yYXAudWkubGF1bmNoLlJBUExhdW5jaFNob3J0Y3V0LnJ1bixSdW4g
UkFQIEFwcGxpY2F0aW9uLAoJCVJ1biBSQVAgQXBwbGljYXRpb24sCgkJQ2F0ZWdvcnkob3JnLmVj
bGlwc2UuZGVidWcudWkuY2F0ZWdvcnkucnVuLFJ1bi9EZWJ1ZyxSdW4vRGVidWcgY29tbWFuZCBj
YXRlZ29yeSx0cnVlKSwKCQksCgkJLCx0cnVlKSxudWxsKSwKCW9yZy5lY2xpcHNlLnVpLmRlZmF1
bHRBY2NlbGVyYXRvckNvbmZpZ3VyYXRpb24sCglvcmcuZWNsaXBzZS51aS5jb250ZXh0cy53aW5k
b3csLCxzeXN0ZW0pCkJpbmRpbmcoQUxUK1NISUZUK1ggUiwKCVBhcmFtZXRlcml6ZWRDb21tYW5k
KENvbW1hbmQob3JnLmVjbGlwc2Uud3N0LnNlcnZlci5sYXVuY2hTaG9ydGN1dC5ydW4sUnVuIG9u
IFNlcnZlciwKCQlSdW4gdGhlIGN1cnJlbnQgc2VsZWN0aW9uIG9uIGEgc2VydmVyLAoJCUNhdGVn
b3J5KG9yZy5lY2xpcHNlLmRlYnVnLnVpLmNhdGVnb3J5LnJ1bixSdW4vRGVidWcsUnVuL0RlYnVn
IGNvbW1hbmQgY2F0ZWdvcnksdHJ1ZSksCgkJLAoJCSwsdHJ1ZSksbnVsbCksCglvcmcuZWNsaXBz
ZS51aS5kZWZhdWx0QWNjZWxlcmF0b3JDb25maWd1cmF0aW9uLAoJb3JnLmVjbGlwc2UudWkuY29u
dGV4dHMud2luZG93LCwsc3lzdGVtKQohU1VCRU5UUlkgMSBvcmcuZWNsaXBzZS5qZmFjZSAyIDAg
MjAxMS0xMC0yNiAwOTozMjoyMC42MzIKIU1FU1NBR0UgQSBjb25mbGljdCBvY2N1cnJlZCBmb3Ig
Q09NTUFORCtERUw6CkJpbmRpbmcoQ09NTUFORCtERUwsCglQYXJhbWV0ZXJpemVkQ29tbWFuZChD
b21tYW5kKG9yZy5lY2xpcHNlLmRhdGF0b29scy5zcWx0b29scy5yZXN1bHQucmVtb3ZlSW5zdGFu
Y2UsUmVtb3ZlIFJlc3VsdCwKCQksCgkJQ2F0ZWdvcnkob3JnLmVjbGlwc2UuZGF0YXRvb2xzLnNx
bHRvb2xzLnJlc3VsdC5jYXRlZ29yeSxTUUwgUmVzdWx0cyBWaWV3LG51bGwsdHJ1ZSksCgkJLAoJ
CSwsdHJ1ZSksbnVsbCksCglvcmcuZWNsaXBzZS51aS5kZWZhdWx0QWNjZWxlcmF0b3JDb25maWd1
cmF0aW9uLAoJb3JnLmVjbGlwc2UudWkuY29udGV4dHMud2luZG93LCwsc3lzdGVtKQpCaW5kaW5n
KENPTU1BTkQrREVMLAoJUGFyYW1ldGVyaXplZENvbW1hbmQoQ29tbWFuZChvcmcuZWNsaXBzZS5n
cmFwaGl0aS51aS5pbnRlcm5hbC5hY3Rpb24uUmVtb3ZlQWN0aW9uLFJlbW92ZSwKCQlSZW1vdmUg
c2VsZWN0ZWQgUGljdG9ncmFtIEVsZW1lbnRzLAoJCUNhdGVnb3J5KG9yZy5lY2xpcHNlLmdyYXBo
aXRpLnVpLkdyYXBoaXRpX0NhdGVnb3J5LEVkaXQsR3JhcGhpdGkgRGlhZ3JhbSBFZGl0b3IsdHJ1
ZSksCgkJLAoJCSwsdHJ1ZSksbnVsbCksCglvcmcuZWNsaXBzZS51aS5kZWZhdWx0QWNjZWxlcmF0
b3JDb25maWd1cmF0aW9uLAoJb3JnLmVjbGlwc2UudWkuY29udGV4dHMud2luZG93LCwsc3lzdGVt
KQoKIUVOVFJZIG9yZy5lY2xpcHNlLnVpIDQgNCAyMDExLTEwLTI2IDA5OjMyOjIxLjY0NgohTUVT
U0FHRSBCYWQgZXh0ZW5zaW9uIHNwZWNpZmljYXRpb24KCiFFTlRSWSBvcmcuZWNsaXBzZS5saWJy
YS5mYWNldCA0IDAgMjAxMS0xMC0yNiAwOTozMjoyMS42NDYKIU1FU1NBR0Ugc3RhcnR1cCBjbGFz
cyBtdXN0IGltcGxlbWVudCBvcmcuZWNsaXBzZS51aS5JU3RhcnR1cAo=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>205968</attachid>
            <date>2011-10-26 03:39:00 -0400</date>
            <delta_ts>2011-10-26 03:39:15 -0400</delta_ts>
            <desc>Workspace log in case of using JLS4</desc>
            <filename>log_JLS4.txt</filename>
            <type>text/plain</type>
            <size>3575</size>
            <attacher name="Missing name">werner</attacher>
            
              <data encoding="base64">IVNFU1NJT04gMjAxMS0xMC0yNiAwOTozNjoxNi4wNTAgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KZWNsaXBzZS5idWlsZElkPU0yMDExMDkwOS0xMzM1Cmph
dmEudmVyc2lvbj0xLjYuMF8yNgpqYXZhLnZlbmRvcj1BcHBsZSBJbmMuCkJvb3RMb2FkZXIgY29u
c3RhbnRzOiBPUz1tYWNvc3gsIEFSQ0g9eDg2XzY0LCBXUz1jb2NvYSwgTkw9ZGVfREUKRnJhbWV3
b3JrIGFyZ3VtZW50czogIC1wcm9kdWN0IG9yZy5lY2xpcHNlLnBsYXRmb3JtLmlkZQpDb21tYW5k
LWxpbmUgYXJndW1lbnRzOiAgLXByb2R1Y3Qgb3JnLmVjbGlwc2UucGxhdGZvcm0uaWRlIC1kYXRh
IC9Vc2Vycy93ZXJuZXIvRG9jdW1lbnRzL3dvcmtzcGFjZS8uLi9ydW50aW1lLUVjbGlwc2VBcHBs
aWNhdGlvbiAtZGV2IGZpbGU6L1VzZXJzL3dlcm5lci9Eb2N1bWVudHMvd29ya3NwYWNlLy5tZXRh
ZGF0YS8ucGx1Z2lucy9vcmcuZWNsaXBzZS5wZGUuY29yZS9FY2xpcHNlIEFwcGxpY2F0aW9uL2Rl
di5wcm9wZXJ0aWVzIC1vcyBtYWNvc3ggLXdzIGNvY29hIC1hcmNoIHg4Nl82NCAtY29uc29sZUxv
ZwoKIUVOVFJZIG9yZy5lY2xpcHNlLmNvcmUubmV0IDEgMCAyMDExLTEwLTI2IDA5OjM2OjE4Ljkw
MwohTUVTU0FHRSBTeXN0ZW0gcHJvcGVydHkgaHR0cC5ub25Qcm94eUhvc3RzIGhhcyBiZWVuIHNl
dCB0byBsb2NhbHwqLmxvY2FsfDE2OS4yNTQvMTZ8Ki4xNjkuMjU0LzE2IGJ5IGFuIGV4dGVybmFs
IHNvdXJjZS4gVGhpcyB2YWx1ZSB3aWxsIGJlIG92ZXJ3cml0dGVuIHVzaW5nIHRoZSB2YWx1ZXMg
ZnJvbSB0aGUgcHJlZmVyZW5jZXMKCiFFTlRSWSBvcmcuZWNsaXBzZS5qZmFjZSAyIDAgMjAxMS0x
MC0yNiAwOTozNjoyMi42MDUKIU1FU1NBR0UgS2V5YmluZGluZyBjb25mbGljdHMgb2NjdXJyZWQu
ICBUaGV5IG1heSBpbnRlcmZlcmUgd2l0aCBub3JtYWwgYWNjZWxlcmF0b3Igb3BlcmF0aW9uLgoh
U1VCRU5UUlkgMSBvcmcuZWNsaXBzZS5qZmFjZSAyIDAgMjAxMS0xMC0yNiAwOTozNjoyMi42MDUK
IU1FU1NBR0UgQSBjb25mbGljdCBvY2N1cnJlZCBmb3IgQUxUK1NISUZUK0QgUjoKQmluZGluZyhB
TFQrU0hJRlQrRCBSLAoJUGFyYW1ldGVyaXplZENvbW1hbmQoQ29tbWFuZChvcmcuZWNsaXBzZS5y
YXAudWkubGF1bmNoLlJBUExhdW5jaFNob3J0Y3V0LmRlYnVnLERlYnVnIFJBUCBBcHBsaWNhdGlv
biwKCQlEZWJ1ZyBSQVAgQXBwbGljYXRpb24sCgkJQ2F0ZWdvcnkob3JnLmVjbGlwc2UuZGVidWcu
dWkuY2F0ZWdvcnkucnVuLFJ1bi9EZWJ1ZyxSdW4vRGVidWcgY29tbWFuZCBjYXRlZ29yeSx0cnVl
KSwKCQksCgkJLCx0cnVlKSxudWxsKSwKCW9yZy5lY2xpcHNlLnVpLmRlZmF1bHRBY2NlbGVyYXRv
ckNvbmZpZ3VyYXRpb24sCglvcmcuZWNsaXBzZS51aS5jb250ZXh0cy53aW5kb3csLCxzeXN0ZW0p
CkJpbmRpbmcoQUxUK1NISUZUK0QgUiwKCVBhcmFtZXRlcml6ZWRDb21tYW5kKENvbW1hbmQob3Jn
LmVjbGlwc2Uud3N0LnNlcnZlci5sYXVuY2hTaG9ydGN1dC5kZWJ1ZyxEZWJ1ZyBvbiBTZXJ2ZXIs
CgkJRGVidWcgdGhlIGN1cnJlbnQgc2VsZWN0aW9uIG9uIGEgc2VydmVyLAoJCUNhdGVnb3J5KG9y
Zy5lY2xpcHNlLmRlYnVnLnVpLmNhdGVnb3J5LnJ1bixSdW4vRGVidWcsUnVuL0RlYnVnIGNvbW1h
bmQgY2F0ZWdvcnksdHJ1ZSksCgkJLAoJCSwsdHJ1ZSksbnVsbCksCglvcmcuZWNsaXBzZS51aS5k
ZWZhdWx0QWNjZWxlcmF0b3JDb25maWd1cmF0aW9uLAoJb3JnLmVjbGlwc2UudWkuY29udGV4dHMu
d2luZG93LCwsc3lzdGVtKQohU1VCRU5UUlkgMSBvcmcuZWNsaXBzZS5qZmFjZSAyIDAgMjAxMS0x
MC0yNiAwOTozNjoyMi42MDUKIU1FU1NBR0UgQSBjb25mbGljdCBvY2N1cnJlZCBmb3IgQUxUK1NI
SUZUK1ggUjoKQmluZGluZyhBTFQrU0hJRlQrWCBSLAoJUGFyYW1ldGVyaXplZENvbW1hbmQoQ29t
bWFuZChvcmcuZWNsaXBzZS5yYXAudWkubGF1bmNoLlJBUExhdW5jaFNob3J0Y3V0LnJ1bixSdW4g
UkFQIEFwcGxpY2F0aW9uLAoJCVJ1biBSQVAgQXBwbGljYXRpb24sCgkJQ2F0ZWdvcnkob3JnLmVj
bGlwc2UuZGVidWcudWkuY2F0ZWdvcnkucnVuLFJ1bi9EZWJ1ZyxSdW4vRGVidWcgY29tbWFuZCBj
YXRlZ29yeSx0cnVlKSwKCQksCgkJLCx0cnVlKSxudWxsKSwKCW9yZy5lY2xpcHNlLnVpLmRlZmF1
bHRBY2NlbGVyYXRvckNvbmZpZ3VyYXRpb24sCglvcmcuZWNsaXBzZS51aS5jb250ZXh0cy53aW5k
b3csLCxzeXN0ZW0pCkJpbmRpbmcoQUxUK1NISUZUK1ggUiwKCVBhcmFtZXRlcml6ZWRDb21tYW5k
KENvbW1hbmQob3JnLmVjbGlwc2Uud3N0LnNlcnZlci5sYXVuY2hTaG9ydGN1dC5ydW4sUnVuIG9u
IFNlcnZlciwKCQlSdW4gdGhlIGN1cnJlbnQgc2VsZWN0aW9uIG9uIGEgc2VydmVyLAoJCUNhdGVn
b3J5KG9yZy5lY2xpcHNlLmRlYnVnLnVpLmNhdGVnb3J5LnJ1bixSdW4vRGVidWcsUnVuL0RlYnVn
IGNvbW1hbmQgY2F0ZWdvcnksdHJ1ZSksCgkJLAoJCSwsdHJ1ZSksbnVsbCksCglvcmcuZWNsaXBz
ZS51aS5kZWZhdWx0QWNjZWxlcmF0b3JDb25maWd1cmF0aW9uLAoJb3JnLmVjbGlwc2UudWkuY29u
dGV4dHMud2luZG93LCwsc3lzdGVtKQohU1VCRU5UUlkgMSBvcmcuZWNsaXBzZS5qZmFjZSAyIDAg
MjAxMS0xMC0yNiAwOTozNjoyMi42MDYKIU1FU1NBR0UgQSBjb25mbGljdCBvY2N1cnJlZCBmb3Ig
Q09NTUFORCtERUw6CkJpbmRpbmcoQ09NTUFORCtERUwsCglQYXJhbWV0ZXJpemVkQ29tbWFuZChD
b21tYW5kKG9yZy5lY2xpcHNlLmRhdGF0b29scy5zcWx0b29scy5yZXN1bHQucmVtb3ZlSW5zdGFu
Y2UsUmVtb3ZlIFJlc3VsdCwKCQksCgkJQ2F0ZWdvcnkob3JnLmVjbGlwc2UuZGF0YXRvb2xzLnNx
bHRvb2xzLnJlc3VsdC5jYXRlZ29yeSxTUUwgUmVzdWx0cyBWaWV3LG51bGwsdHJ1ZSksCgkJLAoJ
CSwsdHJ1ZSksbnVsbCksCglvcmcuZWNsaXBzZS51aS5kZWZhdWx0QWNjZWxlcmF0b3JDb25maWd1
cmF0aW9uLAoJb3JnLmVjbGlwc2UudWkuY29udGV4dHMud2luZG93LCwsc3lzdGVtKQpCaW5kaW5n
KENPTU1BTkQrREVMLAoJUGFyYW1ldGVyaXplZENvbW1hbmQoQ29tbWFuZChvcmcuZWNsaXBzZS5n
cmFwaGl0aS51aS5pbnRlcm5hbC5hY3Rpb24uUmVtb3ZlQWN0aW9uLFJlbW92ZSwKCQlSZW1vdmUg
c2VsZWN0ZWQgUGljdG9ncmFtIEVsZW1lbnRzLAoJCUNhdGVnb3J5KG9yZy5lY2xpcHNlLmdyYXBo
aXRpLnVpLkdyYXBoaXRpX0NhdGVnb3J5LEVkaXQsR3JhcGhpdGkgRGlhZ3JhbSBFZGl0b3IsdHJ1
ZSksCgkJLAoJCSwsdHJ1ZSksbnVsbCksCglvcmcuZWNsaXBzZS51aS5kZWZhdWx0QWNjZWxlcmF0
b3JDb25maWd1cmF0aW9uLAoJb3JnLmVjbGlwc2UudWkuY29udGV4dHMud2luZG93LCwsc3lzdGVt
KQoKIUVOVFJZIG9yZy5lY2xpcHNlLnVpIDQgNCAyMDExLTEwLTI2IDA5OjM2OjIzLjY1MQohTUVT
U0FHRSBCYWQgZXh0ZW5zaW9uIHNwZWNpZmljYXRpb24KCiFFTlRSWSBvcmcuZWNsaXBzZS5saWJy
YS5mYWNldCA0IDAgMjAxMS0xMC0yNiAwOTozNjoyMy42NTIKIU1FU1NBR0Ugc3RhcnR1cCBjbGFz
cyBtdXN0IGltcGxlbWVudCBvcmcuZWNsaXBzZS51aS5JU3RhcnR1cAo=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>206392</attachid>
            <date>2011-11-03 06:14:00 -0400</date>
            <delta_ts>2011-11-03 06:14:49 -0400</delta_ts>
            <desc>Contains an example Eclipse project that demonstrates the problem.</desc>
            <filename>ParserProject.zip</filename>
            <type>application/zip</type>
            <size>8983</size>
            <attacher name="Missing name">werner</attacher>
            
              <data encoding="base64">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
WQfH6eVf8FdGdY5SJ/Ae9b1PK/2InqfDMQ1Cw980rNewUcM/CMoV53ngdYT76vFSlM78EyebZbSd
/4iqjJ9KKBZgORpEszYkzkUjmtGor3/hA0oIfDhXk/3BfhtlExfUopirxY8ISSi4jdyqbmN9/Z/h
kfnVPElYCoGGVSHXnDuxoDVUI3wSyPz7R1BLBwj5CcqshwYAAOQMAABQSwMEFAAIAAgA2FhjPwAA
AAAAAAAAAAAAACoAAABjb20uZXhhbXBsZS5wYXJzZXJQcm9qZWN0L2J1aWxkLnByb3BlcnRpZXMr
zi8tSk7V01OwVSguStbnyi8tKSgtAfOTMvP0uYCEXmZeck5pSmoxUKwgpzQdKFKRm6MTw6WACnxd
Qxx1Pf3c9DGl9DCFMpPz84r1uQBQSwcIAiDIo04AAACAAAAAUEsDBBQACAAIANhYYz8AAAAAAAAA
AAAAAAAqAAAAY29tLmV4YW1wbGUucGFyc2VyUHJvamVjdC9pY29ucy9zYW1wbGUuZ2lmc/d0s7BM
FGAQYPjOwOBq53hmw7U/X/7fnPfn/K47357/39l8+9TKZy+evPFwCLx06na2y9zK6Hnza88s7Tmx
ct7Ortwd26Y9r0qbtXbm2aqcCRHmE11Nkkui5gXY5/o5Ja+acDXevWfFrIPy3F6B9mVB7hlV2bMC
PZJ3rrn8/MnbSPfmKK/GCK/K4xv+HtlxP9anqyF3y5rFh5ct2uBqVONtU+5hVRTs0pAYODHCt2rr
upMRnt0xPhOi/VobCtc7WUfevv7Sy7YmzKMryqfv6aOPHlZtgc4TMpO6ivO6o/ymxgXPjQmYHh88
JzKgIyakpayoe8GcbefO3Hz+7E1y5MKrlx89ffI6wKM7MWJRbNiMUL/pKbHrk2PWJkWvSIhalJ6w
LCVuc1jQrOSEpZnpq5Ys/fbo0ftHj16ER67PL9zj7rMov+J2cc3dqPglhaUrK1rfV7V/LG96U1r/
orT+WUnd4+Lah+XNT2ctejNpxgXPoBmVHV/K2z5Ud36t6vhc3vK2vOVVYc3Vjqk/6zrv51Uc6pj5
d8ayv4a2NeFJc54+e/3//3+GUTBwQPEnCyMDQwODDogDyhMMHFsYGDllPDYsONjMUe3TsGHBIVY+
Zb5nCgkKh3rl7aI8AgI2eDM4sJ44cFLpaSefAAdHlUjAsX4xDeeWNwUfGxZ0MCb8ytl5aAmHoJyB
Bs+R5nR/GcviF3MMg4/7zbapZMt6IPSMe5pmyKqIzqQnJwLMay50eC5O451tWP5lT6VxwTFGUdmM
Kx6Jzm4cDDoc/xwLldpYhVR9ajwaUjwPqmlIGXxoUGTuU/Diq4p8mHCYW8FzjsKdM5XFDgwM1gBQ
SwcIkNvzoHgCAADXAwAAUEsDBBQACAAIANhYYz8AAAAAAAAAAAAAAAAkAAAAY29tLmV4YW1wbGUu
cGFyc2VyUHJvamVjdC9wbHVnaW4ueG1sdZLNTsQgEMfv+xSEgycFjR5MpG08+HExMVl9ANqOlYQC
Abru4wttty3tLoc2zPz+88Ww4thKdADrhFYZviO3GIGqdC1Uk+Hvr9ebR1zkO1ZAJYVxMKP35KH3
GNk1QuW7HUKIwdGDiv54G47RQvkMa9uQMQbpBOGVD9QevMP5yLLJNovDkbwEmeE9b40E9NwzKEA4
oQ7CiVJChr3tIHWJOljB+TnnlDJmbUF1Cb/JeRV+Tx8Bw2suhnY91LvzxM8cGG6513YtC0fxFk7a
N6s7sxbTSb0slsZql4ahpwv194Ung9t2UMW3jF9Hh2pII342WCW5c8kYHRkCX4jrtZZemAy/g5T6
Gr2M6/Onraw3dOyq5PaT+9/lQOlyPucyrDTnwdX7rwpPpjsQ00LSaWN6E6PTeod1Z/S0+f9QSwcI
dYhQ6ToBAABEAwAAUEsDBBQACAAIANhYYz8AAAAAAAAAAAAAAAAxAAAAY29tLmV4YW1wbGUucGFy
c2VyUHJvamVjdC9zcmMvdGVzdC9BY3RpdmF0b3IuamF2Ya1UUW/TMBB+Tn7FaeyhrWginiOkDQoo
aCoT256R51xSM9e2bKcbQvvvnOM0XUIRG+IhSnS+77vvO9/FMH7HGgSPzhdpKrZGWw/aNhlyKYzD
7HvNOGYWnW4tfZRbSl+h41YYr21xDNKKzMi2ESo7v3XeMu5vyssuMErXrhFZbdkW77W9y961qpL4
XiuPD0FLvliksIDrDQIxiB2jcsAlcw44JVktHXg6DKWWQoEUNQL/wSUSLE9NeysF7wHnAwFxo6oo
MlEGP9M0yfOu3J6xXKVJT+M88/SqhWISrrwVqoHLi5tP5fpbuYK3cBIaeFJAnp+uv6yX64ur5ZvT
A6PbMIsVCEU8iiPR2qAH97wHfabvU0JYakDSd4Ack96WU0qI5YOwATmbk4XkMdSMsJnSavmZ7Vil
+byLnDnEZ17UKxJm/exv1zQfi9lpUUFEjtK6CwvpdGFW3zv48MDReKFD25PEtQZtFnH7TOpAErVR
d/1GuOK/mtPmH70R8CXWBguqlbJ44pV4nliNzqK1r+hbq+Js/zY3EHPObJf0p5x8OreH+WrQr7Bm
rfRxYJKeaZi7Y1KYAhH2Hqph8aGmJ5SPB7WQtKa+izRih6rD7xfJoiQZO9os5jcHE4ZR57tYXOT+
cORuWveovclPKZichGb9zoYaI99inPfR6m0cktmw3q8jquvNY/oLUEsHCIootJ0GAgAAMgUAAFBL
AwQUAAgACACHWWM/AAAAAAAAAAAAAAAAPAAAAGNvbS5leGFtcGxlLnBhcnNlclByb2plY3Qvc3Jj
L3Rlc3QvYWN0aW9ucy9TYW1wbGVBY3Rpb24uamF2YZ1WS28bNxA+S79ioh5CGSottznVMFDVPlSN
EwWWDB+KIKB2RxKT1XJBcqUIhf97Z0iuXpYNJwdpyeHMN0/OsFLZNzVH8Oi8VJnXpnSX7bZeVsZ6
+KpWSmoj/6pnM7SY36HK0V4eHw/LqvZjb1EtG46Gxdi5xKzQlUP5NfcyMxZlbpZyMJ5cvobpk7Ju
T+WzrNdmWelCsQP3pfanBWYqw+SlHA7C9wXGXKvCzJ38gM5RjG7C9gX+lcY1WieHYyzwefBay+GD
sd+mWGaLB13mZv1avmjyDcHPlUeK8vnZWRvOYFRbcGpZFQjRO9C8WWLpHawbjOYsT/ISJoutQGXN
9w2sdVEw4BQho3R6zGG6AU9seyhlDm5h1qSkDEf3QwkPC4ybmrIF3mp04A3vGM5v9fRord3WhKBw
XxuD43fM6mBUc9qw54TJeNpL/vDvT4cIL8eJ2M7bVT0tdAZZoZyDcYjV4EmoXsaB/9qtyuoVL485
ydSYyHaLc9Iiyzi4GV0nb+vMGyuZeE4I0ZB9E0SXoR+PZFNiFspRCCi6vGfdecqbnddsNZhZiO8S
/cLkYLGy6II3RA1gbym2xdsGz2nvdTlvkrfLK6UxsIe/V4T1F1uXhz6tjCYD6lKku5VUBu9a3m7C
tzXeOI9LaWovKZqlL0rR+RuLwrAtRf6m0+UoEh9VUTmPrQdmusAb5RVcQYlr2D8TF/1+n2RI5LBP
USzCJ4ocngkmPelbgkHIVCpROUd/zcUiutvlrQlM3cjVavHBHTpT2wwHLgKJzvnYU1OV3Bw73W40
LFso++9nmNazZE0gXPR/e/c5nFMYoKyDFcTQD7T1gnwGIXb06I/kjyCobhfeXMGvFzG+TcACVwpV
pMiVKmoczVimB/1eoyma1mpCK1VVYZmLRj4dP2vzI/8lk7LCOBQHiYMYF5LdKvAmHokIzb/zc5iM
bkZ/wB1WBTVR+Od2/DtdJr/g1bvQDzamBop0AsxMjo30dj5AFT9XsCVJMjmuBNEk40a1kVU69O+p
qsVO4P2X69GHT8PbwWQ4+vjl/uNwciwwDhaIaAi5c00RGVirNiLl+WgKUS5cXfhj6hWII1I3ORAr
S8ZuSJZR8osiQp+4NifRpd9UmKpW9Lt7QY84B9NMGkr5sJwZuwwAIrYxlh0v6E6Kbg86E3obdHrR
tJ9R+QiZ8tRgxGRhzVpNqaox1SxGX8KNmVjKfyyNx8NuuJ2nT5vWtjtScZZz7o0P1HVVsw/cznPH
NrOAxYTDhrigrgB6BmvCVaXv0S31cUoxjimLDWnhqwFq5nm4pba6nWE7G+IQ+8E26hrvrqMLJ3rq
MctRg+3B7smx430yVFJkaCZH99LEoDGda1fRBeZRosoNuFBqXLyh0B2HhqbKSpvaFZuApahfZz/h
bNJ0wsd08nQWPqRXQqYyTn0ct2b6lbzkejCWezw5Qe+EUFu0pMfMSufIl4onpONSDlhU6GlYhksA
8Yn3gz5oKvkTDjBZPPMuSCOQ50py4Gr7YiBnH/8HUEsHCOV4O0RzBAAAhwsAAFBLAQIUABQACAAI
ANhYYz9JSvu2zgAAAHEBAAAkAAAAAAAAAAAAAAAAAAAAAABjb20uZXhhbXBsZS5wYXJzZXJQcm9q
ZWN0Ly5jbGFzc3BhdGhQSwECFAAUAAgACAChWWM/2/FwO+wAAACSAgAAIgAAAAAAAAAAAAAAAAAg
AQAAY29tLmV4YW1wbGUucGFyc2VyUHJvamVjdC8ucHJvamVjdFBLAQIUABQACAAIANhYYz9GdKmS
pwAAAIMBAAA+AAAAAAAAAAAAAAAAAFwCAABjb20uZXhhbXBsZS5wYXJzZXJQcm9qZWN0Ly5zZXR0
aW5ncy9vcmcuZWNsaXBzZS5qZHQuY29yZS5wcmVmc1BLAQIUABQACAAIAKFZYz8hHHoF3gAAAHgB
AAAuAAAAAAAAAAAAAAAAAG8DAABjb20uZXhhbXBsZS5wYXJzZXJQcm9qZWN0L01FVEEtSU5GL01B
TklGRVNULk1GUEsBAhQAFAAIAAgAO1ljP05Xp8HbAwAAHAoAACQAAAAAAAAAAAAAAAAAqQQAAGNv
bS5leGFtcGxlLnBhcnNlclByb2plY3QvU3RhY2suamF2YVBLAQIUABQACAAIAKFZYz//OoHKQwIA
AE8EAAAyAAAAAAAAAAAAAAAAANYIAABjb20uZXhhbXBsZS5wYXJzZXJQcm9qZWN0L2Jpbi90ZXN0
L0FjdGl2YXRvci5jbGFzc1BLAQIUABQACAAIAKFZYz/5CcqshwYAAOQMAAA9AAAAAAAAAAAAAAAA
AHkLAABjb20uZXhhbXBsZS5wYXJzZXJQcm9qZWN0L2Jpbi90ZXN0L2FjdGlvbnMvU2FtcGxlQWN0
aW9uLmNsYXNzUEsBAhQAFAAIAAgA2FhjPwIgyKNOAAAAgAAAACoAAAAAAAAAAAAAAAAAaxIAAGNv
bS5leGFtcGxlLnBhcnNlclByb2plY3QvYnVpbGQucHJvcGVydGllc1BLAQIUABQACAAIANhYYz+Q
2/OgeAIAANcDAAAqAAAAAAAAAAAAAAAAABETAABjb20uZXhhbXBsZS5wYXJzZXJQcm9qZWN0L2lj
b25zL3NhbXBsZS5naWZQSwECFAAUAAgACADYWGM/dYhQ6ToBAABEAwAAJAAAAAAAAAAAAAAAAADh
FQAAY29tLmV4YW1wbGUucGFyc2VyUHJvamVjdC9wbHVnaW4ueG1sUEsBAhQAFAAIAAgA2FhjP4oo
tJ0GAgAAMgUAADEAAAAAAAAAAAAAAAAAbRcAAGNvbS5leGFtcGxlLnBhcnNlclByb2plY3Qvc3Jj
L3Rlc3QvQWN0aXZhdG9yLmphdmFQSwECFAAUAAgACACHWWM/5Xg7RHMEAACHCwAAPAAAAAAAAAAA
AAAAAADSGQAAY29tLmV4YW1wbGUucGFyc2VyUHJvamVjdC9zcmMvdGVzdC9hY3Rpb25zL1NhbXBs
ZUFjdGlvbi5qYXZhUEsFBgAAAAAMAAwAUgQAAK8eAAAAAA==
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>206781</attachid>
            <date>2011-11-10 06:50:00 -0500</date>
            <delta_ts>2011-11-10 06:50:06 -0500</delta_ts>
            <desc>Patch under test</desc>
            <filename>patch.txt</filename>
            <type>text/plain</type>
            <size>1927</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9kb20vQVNUQ29udmVydGVyVGVzdEFTVDNfMi5qYXZhIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rl
c3RzL2RvbS9BU1RDb252ZXJ0ZXJUZXN0QVNUM18yLmphdmENCmluZGV4IDA4MGZkODYuLmZhMDZh
NGMgMTAwNjQ0DQotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3Jn
L2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvZG9tL0FTVENvbnZlcnRlclRlc3RBU1QzXzIuamF2YQ0K
KysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pk
dC9jb3JlL3Rlc3RzL2RvbS9BU1RDb252ZXJ0ZXJUZXN0QVNUM18yLmphdmENCkBAIC0xMDYxMyw0
ICsxMDYxMywyMyBAQA0KIAkJYXNzZXJ0RXF1YWxzKCJ3cm9uZyB0YWcgbmFtZSIsICJAbGl0ZXJh
bCIsIGVsZW1lbnQuZ2V0VGFnTmFtZSgpKTsNCiAJCWNoZWNrU291cmNlUmFuZ2UoKFRleHRFbGVt
ZW50KSBlbGVtZW50LmZyYWdtZW50cygpLmdldCgwKSwgIiBzdGFycyoqKiogIiwgc291cmNlKTsN
CiAJfQ0KKwkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9
MzYxOTM4DQorCXB1YmxpYyB2b2lkIHRlc3QwNzIyKCkgdGhyb3dzIEphdmFNb2RlbEV4Y2VwdGlv
biB7DQorCQlTdHJpbmcgc291cmNlID0gInB1YmxpYyBjbGFzcyBYIHtcbiIgKw0KKwkJCQkJCSIg
IFgoKXtcbiIgKw0KKwkJCQkJCSIgICAgdHJ5IHtcbiIgKw0KKwkJCQkJCSIgICAgfVxuIiArDQor
CQkJCQkJIiAgZmluYWxseSB7XG4iICsNCisJCQkJCQkiICAgIH1cbiIgKw0KKwkJCQkJCSIgIH1c
biIgKw0KKwkJCQkJCSJ9XG4iOw0KKwkJDQorCQlBU1RQYXJzZXIgcGFyc2VyID0gQVNUUGFyc2Vy
Lm5ld1BhcnNlcihBU1QuSkxTMyk7DQorCQlwYXJzZXIuc2V0S2luZChBU1RQYXJzZXIuS19DT01Q
SUxBVElPTl9VTklUKTsNCisJCXBhcnNlci5zZXRTb3VyY2Uoc291cmNlLnRvQ2hhckFycmF5KCkp
Ow0KKwkJQ29tcGlsYXRpb25Vbml0IHJlc3VsdENvbXBpbGF0aW9uVW5pdCA9IChDb21waWxhdGlv
blVuaXQpIHBhcnNlci5jcmVhdGVBU1QobnVsbCk7DQorCQlPYmplY3QgbyA9IHJlc3VsdENvbXBp
bGF0aW9uVW5pdC50eXBlcygpLmdldCgwKTsNCisJCVN5c3RlbS5vdXQucHJpbnRsbihvLnRvU3Ry
aW5nKCkpOw0KKwkJYXNzZXJ0RXF1YWxzKG8udG9TdHJpbmcoKSwgc291cmNlKTsNCisJfQ0KIH0N
ClwgTm8gbmV3bGluZSBhdCBlbmQgb2YgZmlsZQ0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2RvbS9vcmcvZWNsaXBzZS9qZHQvY29yZS9kb20vVHJ5U3RhdGVtZW50LmphdmEgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9kb20vb3JnL2VjbGlwc2UvamR0L2NvcmUvZG9tL1RyeVN0YXRl
bWVudC5qYXZhDQppbmRleCBiZDg1OTExLi5iYjRiMzIyIDEwMDY0NA0KLS0tIGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2RvbS9UcnlTdGF0ZW1lbnQuamF2
YQ0KKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZG9tL29yZy9lY2xpcHNlL2pkdC9jb3JlL2Rv
bS9UcnlTdGF0ZW1lbnQuamF2YQ0KQEAgLTM1Miw3ICszNTIsNyBAQA0KIAkgKi8NCiAJcHVibGlj
IExpc3QgcmVzb3VyY2VzKCkgew0KIAkJLy8gbW9yZSBlZmZpY2llbnQgdGhhbiBqdXN0IGNhbGxp
bmcgdW5zdXBwb3J0ZWRJbjJfMygpIHRvIGNoZWNrDQotCQlpZiAodGhpcy5yZXNvdXJjZXMgPT0g
bnVsbCkgew0KKwkJaWYgKHRoaXMucmVzb3VyY2VzICE9IG51bGwpIHsNCiAJCQl1bnN1cHBvcnRl
ZEluMl8zKCk7DQogCQl9DQogCQlyZXR1cm4gdGhpcy5yZXNvdXJjZXM7DQoNCg==
</data>

          </attachment>
      

    </bug>

</bugzilla>