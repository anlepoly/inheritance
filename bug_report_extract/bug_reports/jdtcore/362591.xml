<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>362591</bug_id>
          
          <creation_ts>2011-11-01 15:15:00 -0400</creation_ts>
          <short_desc>VerifyError: Inconsistent stackmap frames</short_desc>
          <delta_ts>2012-02-07 01:10:35 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>3.6.2+J7</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter>gino.pel</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>chrriis</cc>
    
    <cc>daniel_megert</cc>
    
    <cc>gino.pel</cc>
    
    <cc>jarthana</cc>
    
    <cc>Olivier_Thomann</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2019757</commentid>
    <comment_count>0</comment_count>
    <who name="">gino.pel</who>
    <bug_when>2011-11-01 15:15:18 -0400</bug_when>
    <thetext>Build Identifier: 20110916-0149

Java version: JVM build 1.7.0_01-b08
Compiler:  1.7 compliance

Class to reproduce:

public class VerifyErrorTest {

	public static void main(String[] args) {
		testError(3, 4, &quot;d&quot;);
		testNoError(3, 4, &quot;d&quot;);
	}

	public static void testError(Number n0, Number n1, String refValue) {
		Number result = refValue.equals(&quot;ttt&quot;) ? n0 : (n1 == null ? null : n1.intValue());
	}

	public static void testNoError(Number n0, Number n1, String refValue) {
		Number result = null;
		if (refValue.equals(&quot;ttt&quot;)) {
			result = (Integer) n0;
		} else {
			if (n1 == null) {
				result = null;
			} else {
				result = n1.intValue();
			}
		}
	}

}


Result:

Exception in thread &quot;main&quot; java.lang.VerifyError: Inconsistent stackmap frames at branch target 28 in method VerifyErrorTest.testError(Ljava/lang/Number;Ljava/lang/Number;Ljava/lang/String;)V at offset 10
	at java.lang.Class.getDeclaredMethods0(Native Method)
	at java.lang.Class.privateGetDeclaredMethods(Class.java:2442)
	at java.lang.Class.getMethod0(Class.java:2685)
	at java.lang.Class.getMethod(Class.java:1620)
	at sun.launcher.LauncherHelper.getMainMethod(LauncherHelper.java:484)
	at sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:476)


Notes:  

- The method testNoError does not generate this error (workaround).
- This issue may be related to bug 361053 (no way of testing with the HEAD code)



Reproducible: Always

Steps to Reproduce:
1. Create a new java project (java 1.7 compliance).
2. Add the provided class
3. Run</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2019925</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-02 02:38:34 -0400</bug_when>
    <thetext>Reproduced on HEAD, will follow up for 3.8 M4 and once fix is identified
will consider for 3.7.2 also.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2019926</commentid>
    <comment_count>2</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-11-02 02:47:32 -0400</bug_when>
    <thetext>If you&apos;re stuck, please use the VM argument -XX:-UseSplitVerifier to run the program. I confirm that there is no verify error with this option.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2020219</commentid>
    <comment_count>3</comment_count>
      <attachid>206344</attachid>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-11-02 11:27:55 -0400</bug_when>
    <thetext>Created attachment 206344
Proposed fix + regression test

The problem comes from the creation of StackDepthMarker entries at the same location for each conditional expression. The outer one was not recorded and therefore the type on the stack was java.lang.Integer instead of java.lang.Number.

Let me know if you have issues to apply the patch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2020527</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-03 00:42:45 -0400</bug_when>
    <thetext>(In reply to comment #3)

&gt; Let me know if you have issues to apply the patch.

Thanks for the patch, Olivier. I plan to first review the relevant
chapter of the JVM spec and familiarize myself with the architecture
of this verification scheme, After that I&apos;ll study the patch and take
it forward.

(Fortunately the latest edition of the JVM spec for JDK7 documents the
stack map table structure unlike earlier editions where this went unspecified.)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2020663</commentid>
    <comment_count>5</comment_count>
    <who name="Christopher Deckers">chrriis</who>
    <bug_when>2011-11-03 06:42:15 -0400</bug_when>
    <thetext>We have this problem with our (quite big) code base. Because of our automated build (javac) and our Eclipse install, we have no choice but to force compiler version to 1.7 until this gets resolved. We hope this gets fixed in 3.7.2, and that we won&apos;t have to wait for too long for this service release.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2024379</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-10 05:01:26 -0500</bug_when>
    <thetext>(In reply to comment #5)
&gt; We have this problem with our (quite big) code base. Because of our automated
&gt; build (javac) and our Eclipse install, we have no choice but to force compiler
&gt; version to 1.7 until this gets resolved. We hope this gets fixed in 3.7.2, and
&gt; that we won&apos;t have to wait for too long for this service release.

Sorry for the delay on this item. I was busy with a bunch of other
issues. I can now take this up in earnest, study the documentation
and the patch and take it forward. Our plan is to include a fix for
this for 3.7.2 since this is a regression introduced at 3.7.1 time.
3.6.2 + JRE7 or 3.7 + JRE7 work alright. 

Will also need to check on 3.6.2+Java7.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2026420</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-15 02:09:33 -0500</bug_when>
    <thetext>Minimal test case that works well with 3.7 and fails to verify with
3.8 top of branch:

public class X {
    public static void main(String[] args) {
    	Object o = args != null ? args : (args == null ? null : args.length);
    }
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2026436</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-15 03:02:30 -0500</bug_when>
    <thetext>(In reply to comment #6)
&gt; (In reply to comment #5)

&gt; 3.6.2 + JRE7 or 3.7 + JRE7 work alright. 

Keep tripping on this: The bug is long standing, but it manifests only
now as a VM is allowed to fall back on earlier verification strategies
when verifying class files generated for JDK6 (major version 50), while
JDK7 vm is not allowed to fall back when working with a class file generated
for JDK7 (major version 51).

So there is no material difference in the class file produced by eclipse
3.7 and 3.7.1 or 3.8 M3, but there will be a user visible symptom (verify
error) in the latter versions.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2026450</commentid>
    <comment_count>9</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-15 03:24:42 -0500</bug_when>
    <thetext>(In reply to comment #3)

&gt; Let me know if you have issues to apply the patch.

Olivier, what are the changes in TestVerifier.java and
VerifyTests.java for ???</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2026556</commentid>
    <comment_count>10</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-11-15 07:28:25 -0500</bug_when>
    <thetext>(In reply to comment #9)
&gt; Olivier, what are the changes in TestVerifier.java and
&gt; VerifyTests.java for ???
This was to try to reduce the number of warnings inside the console when the tests are running.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2026565</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-15 08:01:23 -0500</bug_when>
    <thetext>(In reply to comment #10)
&gt; (In reply to comment #9)
&gt; &gt; Olivier, what are the changes in TestVerifier.java and
&gt; &gt; VerifyTests.java for ???
&gt; This was to try to reduce the number of warnings inside the console when the
&gt; tests are running.

I see. I caught up with the documentation, reviewed the patch and also studied
the stack map table before and after the patch: Things look good and after a bit
more testing, I&apos;ll be releasing the patch shortly.

Dani, this should go into 3.6.2+java7 and 3.7.2 also as verify errors mean
the program is dead on arrival realistically speaking. (Comment# 2 does give
a workaround.) Let me know your thoughts.

Again, thanks for the patch Olivier.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2026583</commentid>
    <comment_count>12</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-15 08:23:48 -0500</bug_when>
    <thetext>(In reply to comment #11)
&gt; (In reply to comment #10)

&gt; Dani, this should go into 3.6.2+java7 and 3.7.2 also as verify errors mean
&gt; the program is dead on arrival realistically speaking. (Comment# 2 does give
&gt; a workaround.) Let me know your thoughts.

BTW, the material changes are only those in StackMapFrameCodeStream.java,
(~a dozen lines of code) and StackMapAttributeTest.java (~50 lines of test code).
The code in the rest of the files in the patch is not germane to this issue and
are more over not applicable to maintenance branches.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2026633</commentid>
    <comment_count>13</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2011-11-15 09:30:00 -0500</bug_when>
    <thetext>&gt; Dani, this should go into 3.6.2+java7 and 3.7.2 also as verify errors mean
&gt; the program is dead on arrival realistically speaking. (Comment# 2 does give
&gt; a workaround.) Let me know your thoughts.

+1 for backporting.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2027055</commentid>
    <comment_count>14</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-15 23:21:45 -0500</bug_when>
    <thetext>Added a new test to cover the case in comment#7, removed the changes not germane
to this issue from the patch in comment#3 and released fix in 3.8 stream
via commit 524493861edaf12bafa58b5fd6b1f39d5cafdd09.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2027056</commentid>
    <comment_count>15</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-15 23:22:50 -0500</bug_when>
    <thetext>Ayush, could you please release this in the maintenance branches and also
make sure the fix is included in this week&apos;s maintenance build ? TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2027085</commentid>
    <comment_count>16</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-11-16 01:51:34 -0500</bug_when>
    <thetext>Reopening until backported.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2029074</commentid>
    <comment_count>17</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-11-21 00:52:19 -0500</bug_when>
    <thetext>(In reply to comment #10)
&gt; (In reply to comment #9)
&gt; &gt; Olivier, what are the changes in TestVerifier.java and
&gt; &gt; VerifyTests.java for ???
&gt; This was to try to reduce the number of warnings inside the console when the
&gt; tests are running.

I raised a separate bug 364254 for this side issue.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2030620</commentid>
    <comment_count>18</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-11-23 01:59:37 -0500</bug_when>
    <thetext>Released in 3.7 maintenance via commit e75d2e1dc6c4d6085a257406c7d26d4fde4b3631</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2036418</commentid>
    <comment_count>19</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-12-06 09:36:55 -0500</bug_when>
    <thetext>Verified for 3.8M4 using build I20111202-0800.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2037576</commentid>
    <comment_count>20</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-12-08 05:05:40 -0500</bug_when>
    <thetext>Released in 362+java7 branch via commit b75d14e3316776d1f321f4f08efdaaf145fd7019</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2052647</commentid>
    <comment_count>21</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-01-19 01:56:48 -0500</bug_when>
    <thetext>Verified for 3.7.2 with build M20120118-0800</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2061845</commentid>
    <comment_count>22</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-02-07 01:10:35 -0500</bug_when>
    <thetext>(In reply to comment #2)
&gt; If you&apos;re stuck, please use the VM argument -XX:-UseSplitVerifier to run the
&gt; program. I confirm that there is no verify error with this option.

For posterity&apos;s sakes recording here that this workaround does work
at least as of Sun JVM 7b147. However, it is NOT supposed to work and 
does not with IBM JVM.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>206344</attachid>
            <date>2011-11-02 11:27:00 -0400</date>
            <delta_ts>2011-11-02 11:27:55 -0400</delta_ts>
            <desc>Proposed fix + regression test</desc>
            <filename>patch_362591.txt</filename>
            <type>text/plain</type>
            <size>25890</size>
            <attacher name="Olivier Thomann">Olivier_Thomann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1N0YWNrTWFwQXR0cmli
dXRlVGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vU3RhY2tNYXBBdHRy
aWJ1dGVUZXN0LmphdmEKaW5kZXggYWZjNTY4ZS4uZjVmMDM5OSAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rl
c3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vU3RhY2tNYXBBdHRyaWJ1dGVUZXN0LmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9j
b3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vU3RhY2tNYXBBdHRyaWJ1dGVUZXN0LmphdmEK
QEAgLTM0LDcgKzM0LDcgQEAgcHVibGljIGNsYXNzIFN0YWNrTWFwQXR0cmlidXRlVGVzdCBleHRl
bmRzIEFic3RyYWN0UmVncmVzc2lvblRlc3QgewogCXN0YXRpYyB7CiAvLwkJVEVTVFNfUFJFRklY
ID0gInRlc3RCdWc5NTUyMSI7CiAvLwkJVEVTVFNfTkFNRVMgPSBuZXcgU3RyaW5nW10geyAidGVz
dEJ1ZzM1OTQ5NSIgfTsKLS8vCQlURVNUU19OVU1CRVJTID0gbmV3IGludFtdIHsgNTMgfTsKKy8v
CQlURVNUU19OVU1CRVJTID0gbmV3IGludFtdIHsgNTUgfTsKIC8vCQlURVNUU19SQU5HRSA9IG5l
dyBpbnRbXSB7IDIzIC0xLH07CiAJfQogCXB1YmxpYyBzdGF0aWMgVGVzdCBzdWl0ZSgpIHsKQEAg
LTcwMDUsNCArNzAwNSw3NSBAQCBwdWJsaWMgY2xhc3MgU3RhY2tNYXBBdHRyaWJ1dGVUZXN0IGV4
dGVuZHMgQWJzdHJhY3RSZWdyZXNzaW9uVGVzdCB7CiAJCQkJYXNzZXJ0RXF1YWxzKCJXcm9uZyBj
b250ZW50cyIsIGV4cGVjdGVkT3V0cHV0LCBhY3R1YWxPdXRwdXQpOwogCQkJfQogCX0KKworCS8v
IGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNjI1OTEKKwlw
dWJsaWMgdm9pZCB0ZXN0MDU1KCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCXRoaXMucnVuQ29uZm9y
bVRlc3QoCisJCQkJbmV3IFN0cmluZ1tdIHsKKwkJCQkJIlguamF2YSIsCisJCQkJCSJwdWJsaWMg
Y2xhc3MgWCB7XG4iICsgCisJCQkJCSIJcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10g
YXJncykge1xuIiArIAorCQkJCQkiCQl0ZXN0RXJyb3IoMywgNCwgXCJkXCIpO1xuIiArIAorCQkJ
CQkiCX1cbiIgKyAKKwkJCQkJIglwdWJsaWMgc3RhdGljIHZvaWQgdGVzdEVycm9yKE51bWJlciBu
MCwgTnVtYmVyIG4xLCBTdHJpbmcgcmVmVmFsdWUpIHtcbiIgKyAKKwkJCQkJIgkJTnVtYmVyIHJl
c3VsdCA9IHJlZlZhbHVlLmVxdWFscyhcInR0dFwiKSA/IG4wIDogKG4xID09IG51bGwgPyBudWxs
IDogbjEuaW50VmFsdWUoKSk7XG4iICsgCisJCQkJCSIJCVN5c3RlbS5vdXQucHJpbnRsbihTdHJp
bmcudmFsdWVPZihyZXN1bHQpKTtcbiIgKyAKKwkJCQkJIgl9XG4iICsgCisJCQkJCSJ9IiwKKwkJ
CQl9LAorCQkJCSI0Iik7CisKKwkJCUNsYXNzRmlsZUJ5dGVzRGlzYXNzZW1ibGVyIGRpc2Fzc2Vt
YmxlciA9IFRvb2xGYWN0b3J5LmNyZWF0ZURlZmF1bHRDbGFzc0ZpbGVCeXRlc0Rpc2Fzc2VtYmxl
cigpOworCQkJYnl0ZVtdIGNsYXNzRmlsZUJ5dGVzID0gb3JnLmVjbGlwc2UuamR0LmludGVybmFs
LmNvbXBpbGVyLnV0aWwuVXRpbC5nZXRGaWxlQnl0ZUNvbnRlbnQobmV3IEZpbGUoT1VUUFVUX0RJ
UiArIEZpbGUuc2VwYXJhdG9yICArIlguY2xhc3MiKSk7CisJCQlTdHJpbmcgYWN0dWFsT3V0cHV0
ID0KKwkJCQlkaXNhc3NlbWJsZXIuZGlzYXNzZW1ibGUoCisJCQkJCWNsYXNzRmlsZUJ5dGVzLAor
CQkJCQkiXG4iLAorCQkJCQlDbGFzc0ZpbGVCeXRlc0Rpc2Fzc2VtYmxlci5ERVRBSUxFRCk7CisK
KwkJCVN0cmluZyBleHBlY3RlZE91dHB1dCA9CisJCQkJIiAgLy8gTWV0aG9kIGRlc2NyaXB0b3Ig
IzI3IChMamF2YS9sYW5nL051bWJlcjtMamF2YS9sYW5nL051bWJlcjtMamF2YS9sYW5nL1N0cmlu
ZzspVlxuIiArIAorCQkJCSIgIC8vIFN0YWNrOiAyLCBMb2NhbHM6IDRcbiIgKyAKKwkJCQkiICBw
dWJsaWMgc3RhdGljIHZvaWQgdGVzdEVycm9yKGphdmEubGFuZy5OdW1iZXIgbjAsIGphdmEubGFu
Zy5OdW1iZXIgbjEsIGphdmEubGFuZy5TdHJpbmcgcmVmVmFsdWUpO1xuIiArIAorCQkJCSIgICAg
IDAgIGFsb2FkXzIgW3JlZlZhbHVlXVxuIiArIAorCQkJCSIgICAgIDEgIGxkYyA8U3RyaW5nIFwi
dHR0XCI+IFszMF1cbiIgKyAKKwkJCQkiICAgICAzICBpbnZva2V2aXJ0dWFsIGphdmEubGFuZy5T
dHJpbmcuZXF1YWxzKGphdmEubGFuZy5PYmplY3QpIDogYm9vbGVhbiBbMzJdXG4iICsgCisJCQkJ
IiAgICAgNiAgaWZlcSAxM1xuIiArIAorCQkJCSIgICAgIDkgIGFsb2FkXzAgW24wXVxuIiArIAor
CQkJCSIgICAgMTAgIGdvdG8gMjhcbiIgKyAKKwkJCQkiICAgIDEzICBhbG9hZF8xIFtuMV1cbiIg
KyAKKwkJCQkiICAgIDE0ICBpZm5vbm51bGwgMjFcbiIgKyAKKwkJCQkiICAgIDE3ICBhY29uc3Rf
bnVsbFxuIiArIAorCQkJCSIgICAgMTggIGdvdG8gMjhcbiIgKyAKKwkJCQkiICAgIDIxICBhbG9h
ZF8xIFtuMV1cbiIgKyAKKwkJCQkiICAgIDIyICBpbnZva2V2aXJ0dWFsIGphdmEubGFuZy5OdW1i
ZXIuaW50VmFsdWUoKSA6IGludCBbMzhdXG4iICsgCisJCQkJIiAgICAyNSAgaW52b2tlc3RhdGlj
IGphdmEubGFuZy5JbnRlZ2VyLnZhbHVlT2YoaW50KSA6IGphdmEubGFuZy5JbnRlZ2VyIFsxNl1c
biIgKyAKKwkJCQkiICAgIDI4ICBhc3RvcmVfMyBbcmVzdWx0XVxuIiArIAorCQkJCSIgICAgMjkg
IGdldHN0YXRpYyBqYXZhLmxhbmcuU3lzdGVtLm91dCA6IGphdmEuaW8uUHJpbnRTdHJlYW0gWzQ0
XVxuIiArIAorCQkJCSIgICAgMzIgIGFsb2FkXzMgW3Jlc3VsdF1cbiIgKyAKKwkJCQkiICAgIDMz
ICBpbnZva2VzdGF0aWMgamF2YS5sYW5nLlN0cmluZy52YWx1ZU9mKGphdmEubGFuZy5PYmplY3Qp
IDogamF2YS5sYW5nLlN0cmluZyBbNTBdXG4iICsgCisJCQkJIiAgICAzNiAgaW52b2tldmlydHVh
bCBqYXZhLmlvLlByaW50U3RyZWFtLnByaW50bG4oamF2YS5sYW5nLlN0cmluZykgOiB2b2lkIFs1
M11cbiIgKyAKKwkJCQkiICAgIDM5ICByZXR1cm5cbiIgKyAKKwkJCQkiICAgICAgTGluZSBudW1i
ZXJzOlxuIiArIAorCQkJCSIgICAgICAgIFtwYzogMCwgbGluZTogNl1cbiIgKyAKKwkJCQkiICAg
ICAgICBbcGM6IDI5LCBsaW5lOiA3XVxuIiArIAorCQkJCSIgICAgICAgIFtwYzogMzksIGxpbmU6
IDhdXG4iICsgCisJCQkJIiAgICAgIExvY2FsIHZhcmlhYmxlIHRhYmxlOlxuIiArIAorCQkJCSIg
ICAgICAgIFtwYzogMCwgcGM6IDQwXSBsb2NhbDogbjAgaW5kZXg6IDAgdHlwZTogamF2YS5sYW5n
Lk51bWJlclxuIiArIAorCQkJCSIgICAgICAgIFtwYzogMCwgcGM6IDQwXSBsb2NhbDogbjEgaW5k
ZXg6IDEgdHlwZTogamF2YS5sYW5nLk51bWJlclxuIiArIAorCQkJCSIgICAgICAgIFtwYzogMCwg
cGM6IDQwXSBsb2NhbDogcmVmVmFsdWUgaW5kZXg6IDIgdHlwZTogamF2YS5sYW5nLlN0cmluZ1xu
IiArIAorCQkJCSIgICAgICAgIFtwYzogMjksIHBjOiA0MF0gbG9jYWw6IHJlc3VsdCBpbmRleDog
MyB0eXBlOiBqYXZhLmxhbmcuTnVtYmVyXG4iICsgCisJCQkJIiAgICAgIFN0YWNrIG1hcCB0YWJs
ZTogbnVtYmVyIG9mIGZyYW1lcyAzXG4iICsgCisJCQkJIiAgICAgICAgW3BjOiAxMywgc2FtZV1c
biIgKyAKKwkJCQkiICAgICAgICBbcGM6IDIxLCBzYW1lXVxuIiArIAorCQkJCSIgICAgICAgIFtw
YzogMjgsIHNhbWVfbG9jYWxzXzFfc3RhY2tfaXRlbSwgc3RhY2s6IHtqYXZhLmxhbmcuTnVtYmVy
fV1cbiI7CisKKwkJCWludCBpbmRleCA9IGFjdHVhbE91dHB1dC5pbmRleE9mKGV4cGVjdGVkT3V0
cHV0KTsKKwkJCWlmIChpbmRleCA9PSAtMSB8fCBleHBlY3RlZE91dHB1dC5sZW5ndGgoKSA9PSAw
KSB7CisJCQkJU3lzdGVtLm91dC5wcmludGxuKFV0aWwuZGlzcGxheVN0cmluZyhhY3R1YWxPdXRw
dXQsIDIpKTsKKwkJCX0KKwkJCWlmIChpbmRleCA9PSAtMSkgeworCQkJCWFzc2VydEVxdWFscygi
V3JvbmcgY29udGVudHMiLCBleHBlY3RlZE91dHB1dCwgYWN0dWFsT3V0cHV0KTsKKwkJCX0KKwl9
CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMv
b3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvdXRpbC9UZXN0VmVyaWZpZXIuamF2YSBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90
ZXN0cy91dGlsL1Rlc3RWZXJpZmllci5qYXZhCmluZGV4IDk2ZDhjZmIuLjJiNDdhYzkgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBz
ZS9qZHQvY29yZS90ZXN0cy91dGlsL1Rlc3RWZXJpZmllci5qYXZhCisrKyBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy91
dGlsL1Rlc3RWZXJpZmllci5qYXZhCkBAIC0xMTYsNyArMTE2LDcgQEAgcHJpdmF0ZSB2b2lkIGNv
bXBpbGVWZXJpZnlUZXN0cyhTdHJpbmcgdmVyaWZpZXJEaXIpIHsKIAl9CiAJU3RyaW5nIGZpbGVO
YW1lID0gZGlyICsgRmlsZS5zZXBhcmF0b3IgKyBzaW1wbGVOYW1lICsgIi5qYXZhIjsKIAlVdGls
LndyaXRlVG9GaWxlKGdldFZlcmlmeVRlc3RzQ29kZSgpLCBmaWxlTmFtZSk7Ci0JQmF0Y2hDb21w
aWxlci5jb21waWxlKCJcIiIgKyBmaWxlTmFtZSArICJcIiAtZCBcIiIgKyB2ZXJpZmllckRpciAr
ICJcIiAtY2xhc3NwYXRoIFwiIiArIFV0aWwuZ2V0SmF2YUNsYXNzTGlic0FzU3RyaW5nKCkgKyAi
XCIiLCBuZXcgUHJpbnRXcml0ZXIoU3lzdGVtLm91dCksIG5ldyBQcmludFdyaXRlcihTeXN0ZW0u
ZXJyKSwgbnVsbC8qcHJvZ3Jlc3MqLyk7CisJQmF0Y2hDb21waWxlci5jb21waWxlKCJcIiIgKyBm
aWxlTmFtZSArICJcIiAtZCBcIiIgKyB2ZXJpZmllckRpciArICJcIiAtd2FybjotcmVzb3VyY2Ug
LWNsYXNzcGF0aCBcIiIgKyBVdGlsLmdldEphdmFDbGFzc0xpYnNBc1N0cmluZygpICsgIlwiIiwg
bmV3IFByaW50V3JpdGVyKFN5c3RlbS5vdXQpLCBuZXcgUHJpbnRXcml0ZXIoU3lzdGVtLmVyciks
IG51bGwvKnByb2dyZXNzKi8pOwogfQogcHVibGljIHZvaWQgZXhlY3V0ZShTdHJpbmcgY2xhc3NO
YW1lLCBTdHJpbmdbXSBjbGFzc3BhdGhzKSB7CiAJdGhpcy5vdXRwdXRCdWZmZXIgPSBuZXcgU3Ry
aW5nQnVmZmVyKCk7CkBAIC0xNDUsMjIyICsxNDUsMjQzIEBAIHB1YmxpYyBTdHJpbmcgZ2V0RXhl
Y3V0aW9uRXJyb3IoKXsKICAqLwogcHJpdmF0ZSBTdHJpbmcgZ2V0VmVyaWZ5VGVzdHNDb2RlKCkg
ewogCXJldHVybgotCQkiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioiICsKLQkJIiAqIENvcHlyaWdo
dCAoYykgMjAwMCwgMjAwNSBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4iICsKLQkJIiAqIEFs
bCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRl
cmlhbHMiICsKLQkJIiAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhl
IEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMCIgKwotCQkiICogd2hpY2ggYWNjb21wYW5pZXMg
dGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQiICsKLQkJIiAqIGh0dHA6Ly93
d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sIiArCi0JCSIgKiIgKwotCQkiICogQ29u
dHJpYnV0b3JzOiIgKwotCQkiICogICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJIGFu
ZCBpbXBsZW1lbnRhdGlvbiIgKwotCQkiICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovIiArCi0JCSJw
YWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLnV0aWw7XG4iICsKLQkJIlxuIiArCi0J
CSJpbXBvcnQgamF2YS5sYW5nLnJlZmxlY3QuKjtcbiIgKwotCQkiaW1wb3J0IGphdmEuaW8uKjtc
biIgKwotCQkiaW1wb3J0IGphdmEubmV0Lio7XG4iICsKLQkJImltcG9ydCBqYXZhLnV0aWwuKjtc
biIgKwotCQkiXG4iICsKLQkJIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKipcbiIgKwotCQkiICogXG4iICsKLQkJIiAqIElNUE9SVEFOVCBOT1RF
OiBJZiBtb2RpZnlpbmcgdGhpcyBjbGFzcywgY29weSB0aGUgc291cmNlIHRvIFRlc3RWZXJpZmll
ciNnZXRWZXJpZnlUZXN0c0NvZGUoKVxuIiArCi0JCSIgKiAoc2VlIHRoaXMgbWV0aG9kIGZvciBk
ZXRhaWxzKVxuIiArCi0JCSIgKiBcbiIgKwotCQkiICoqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbiIgKwotCQkiXG4iICsKLQkJInB1YmxpYyBj
bGFzcyBWZXJpZnlUZXN0cyB7XG4iICsKLQkJIglpbnQgcG9ydE51bWJlcjtcbiIgKwotCQkiCVNv
Y2tldCBzb2NrZXQ7XG4iICsKLQkJIlxuIiArCi0JCSIvKipcbiIgKwotCQkiICogTk9URTogQ29k
ZSBjb3BpZWQgZnJvbSBqdW5pdC51dGlsLlRlc3RDYXNlQ2xhc3NMb2FkZXIuXG4iICsKLQkJIiAq
XG4iICsKLQkJIiAqIEEgY3VzdG9tIGNsYXNzIGxvYWRlciB3aGljaCBlbmFibGVzIHRoZSByZWxv
YWRpbmdcbiIgKwotCQkiICogb2YgY2xhc3NlcyBmb3IgZWFjaCB0ZXN0IHJ1bi4gVGhlIGNsYXNz
IGxvYWRlclxuIiArCi0JCSIgKiBjYW4gYmUgY29uZmlndXJlZCB3aXRoIGEgbGlzdCBvZiBwYWNr
YWdlIHBhdGhzIHRoYXRcbiIgKwotCQkiICogc2hvdWxkIGJlIGV4Y2x1ZGVkIGZyb20gbG9hZGlu
Zy4gVGhlIGxvYWRpbmdcbiIgKwotCQkiICogb2YgdGhlc2UgcGFja2FnZXMgaXMgZGVsZWdhdGVk
IHRvIHRoZSBzeXN0ZW0gY2xhc3NcbiIgKwotCQkiICogbG9hZGVyLiBUaGV5IHdpbGwgYmUgc2hh
cmVkIGFjcm9zcyB0ZXN0IHJ1bnMuXG4iICsKLQkJIiAqIDxwPlxuIiArCi0JCSIgKiBUaGUgbGlz
dCBvZiBleGNsdWRlZCBwYWNrYWdlIHBhdGhzIGlzIHNwZWNpZmllZCBpblxuIiArCi0JCSIgKiBh
IHByb3BlcnRpZXMgZmlsZSBcImV4Y2x1ZGVkLnByb3BlcnRpZXNcIiB0aGF0IGlzIGxvY2F0ZWQg
aW4gXG4iICsKLQkJIiAqIHRoZSBzYW1lIHBsYWNlIGFzIHRoZSBUZXN0Q2FzZUNsYXNzTG9hZGVy
IGNsYXNzLlxuIiArCi0JCSIgKiA8cD5cbiIgKwotCQkiICogPGI+S25vd24gbGltaXRhdGlvbjo8
L2I+IHRoZSBWZXJpZnlDbGFzc0xvYWRlciBjYW5ub3QgbG9hZCBjbGFzc2VzXG4iICsKLQkJIiAq
IGZyb20gamFyIGZpbGVzLlxuIiArCi0JCSIgKi9cbiIgKwotCQkiXG4iICsKLQkJIlxuIiArCi0J
CSJwdWJsaWMgY2xhc3MgVmVyaWZ5Q2xhc3NMb2FkZXIgZXh0ZW5kcyBDbGFzc0xvYWRlciB7XG4i
ICsKLQkJIgkvKiogc2Nhbm5lZCBjbGFzcyBwYXRoICovXG4iICsKLQkJIglwcml2YXRlIFN0cmlu
Z1tdIGZQYXRoSXRlbXM7XG4iICsKLQkJIglcbiIgKwotCQkiCS8qKiBleGNsdWRlZCBwYXRocyAq
L1xuIiArCi0JCSIJcHJpdmF0ZSBTdHJpbmdbXSBmRXhjbHVkZWQ9IHt9O1xuIiArCi0JCSJcbiIg
KwotCQkiCS8qKlxuIiArCi0JCSIJICogQ29uc3RydWN0cyBhIFZlcmlmeUNsYXNzTG9hZGVyLiBJ
dCBzY2FucyB0aGUgY2xhc3MgcGF0aFxuIiArCi0JCSIJICogYW5kIHRoZSBleGNsdWRlZCBwYWNr
YWdlIHBhdGhzXG4iICsKLQkJIgkgKi9cbiIgKwotCQkiCXB1YmxpYyBWZXJpZnlDbGFzc0xvYWRl
cigpIHtcbiIgKwotCQkiCQlzdXBlcigpO1xuIiArCi0JCSIJCVN0cmluZyBjbGFzc1BhdGg9IFN5
c3RlbS5nZXRQcm9wZXJ0eShcImphdmEuY2xhc3MucGF0aFwiKTtcbiIgKwotCQkiCQlTdHJpbmcg
c2VwYXJhdG9yPSBTeXN0ZW0uZ2V0UHJvcGVydHkoXCJwYXRoLnNlcGFyYXRvclwiKTtcbiIgKwot
CQkiCQlcbiIgKwotCQkiCQkvLyBmaXJzdCBwYXNzOiBjb3VudCBlbGVtZW50c1xuIiArCi0JCSIJ
CVN0cmluZ1Rva2VuaXplciBzdD0gbmV3IFN0cmluZ1Rva2VuaXplcihjbGFzc1BhdGgsIHNlcGFy
YXRvcik7XG4iICsKLQkJIgkJaW50IGk9IDA7XG4iICsKLQkJIgkJd2hpbGUgKHN0Lmhhc01vcmVU
b2tlbnMoKSkge1xuIiArCi0JCSIJCQlzdC5uZXh0VG9rZW4oKTtcbiIgKwotCQkiCQkJaSsrO1xu
IiArCi0JCSIJCX1cbiIgKwotCQkiCQkvLyBzZWNvbmQgcGFzczogc3BsaXRcbiIgKwotCQkiCQlm
UGF0aEl0ZW1zPSBuZXcgU3RyaW5nW2ldO1xuIiArCi0JCSIJCXN0PSBuZXcgU3RyaW5nVG9rZW5p
emVyKGNsYXNzUGF0aCwgc2VwYXJhdG9yKTtcbiIgKwotCQkiCQlpPSAwO1xuIiArCi0JCSIJCXdo
aWxlIChzdC5oYXNNb3JlVG9rZW5zKCkpIHtcbiIgKwotCQkiCQkJZlBhdGhJdGVtc1tpKytdPSBz
dC5uZXh0VG9rZW4oKTtcbiIgKwotCQkiCQl9XG4iICsKLQkJIlxuIiArCi0JCSIJfVxuIiArCi0J
CSIJcHVibGljIGphdmEubmV0LlVSTCBnZXRSZXNvdXJjZShTdHJpbmcgbmFtZSkge1xuIiArCi0J
CSIJCXJldHVybiBDbGFzc0xvYWRlci5nZXRTeXN0ZW1SZXNvdXJjZShuYW1lKTtcbiIgKwotCQki
CX1cbiIgKwotCQkiCXB1YmxpYyBJbnB1dFN0cmVhbSBnZXRSZXNvdXJjZUFzU3RyZWFtKFN0cmlu
ZyBuYW1lKSB7XG4iICsKLQkJIgkJcmV0dXJuIENsYXNzTG9hZGVyLmdldFN5c3RlbVJlc291cmNl
QXNTdHJlYW0obmFtZSk7XG4iICsKLQkJIgl9XG4iICsKLQkJIglwcm90ZWN0ZWQgYm9vbGVhbiBp
c0V4Y2x1ZGVkKFN0cmluZyBuYW1lKSB7XG4iICsKLQkJIgkJLy8gZXhjbHVkZSB0aGUgXCJqYXZh
XCIgcGFja2FnZXMuXG4iICsKLQkJIgkJLy8gVGhleSBhbHdheXMgbmVlZCB0byBiZSBleGNsdWRl
ZCBzbyB0aGF0IHRoZXkgYXJlIGxvYWRlZCBieSB0aGUgc3lzdGVtIGNsYXNzIGxvYWRlclxuIiAr
Ci0JCSIJCWlmIChuYW1lLnN0YXJ0c1dpdGgoXCJqYXZhXCIpKVxuIiArCi0JCSIJCQlyZXR1cm4g
dHJ1ZTtcbiIgKwotCQkiCQkJXG4iICsKLQkJIgkJLy8gZXhjbHVkZSB0aGUgdXNlciBkZWZpbmVk
IHBhY2thZ2UgcGF0aHNcbiIgKwotCQkiCQlmb3IgKGludCBpPSAwOyBpIDwgZkV4Y2x1ZGVkLmxl
bmd0aDsgaSsrKSB7XG4iICsKLQkJIgkJCWlmIChuYW1lLnN0YXJ0c1dpdGgoZkV4Y2x1ZGVkW2ld
KSkge1xuIiArCi0JCSIJCQkJcmV0dXJuIHRydWU7XG4iICsKLQkJIgkJCX1cbiIgKwotCQkiCQl9
XG4iICsKLQkJIgkJcmV0dXJuIGZhbHNlOwlcbiIgKwotCQkiCX1cbiIgKwotCQkiCXB1YmxpYyBz
eW5jaHJvbml6ZWQgQ2xhc3MgbG9hZENsYXNzKFN0cmluZyBuYW1lLCBib29sZWFuIHJlc29sdmUp
XG4iICsKLQkJIgkJdGhyb3dzIENsYXNzTm90Rm91bmRFeGNlcHRpb24ge1xuIiArCi0JCSIJCQlc
biIgKwotCQkiCQlDbGFzcyBjPSBmaW5kTG9hZGVkQ2xhc3MobmFtZSk7XG4iICsKLQkJIgkJaWYg
KGMgIT0gbnVsbClcbiIgKwotCQkiCQkJcmV0dXJuIGM7XG4iICsKLQkJIgkJLy9cbiIgKwotCQki
CQkvLyBEZWxlZ2F0ZSB0aGUgbG9hZGluZyBvZiBleGNsdWRlZCBjbGFzc2VzIHRvIHRoZVxuIiAr
Ci0JCSIJCS8vIHN0YW5kYXJkIGNsYXNzIGxvYWRlci5cbiIgKwotCQkiCQkvL1xuIiArCi0JCSIJ
CWlmIChpc0V4Y2x1ZGVkKG5hbWUpKSB7XG4iICsKLQkJIgkJCXRyeSB7XG4iICsKLQkJIgkJCQlj
PSBmaW5kU3lzdGVtQ2xhc3MobmFtZSk7XG4iICsKLQkJIgkJCQlyZXR1cm4gYztcbiIgKwotCQki
CQkJfSBjYXRjaCAoQ2xhc3NOb3RGb3VuZEV4Y2VwdGlvbiBlKSB7XG4iICsKLQkJIgkJCQkvLyBr
ZWVwIHNlYXJjaGluZ1xuIiArCi0JCSIJCQl9XG4iICsKLQkJIgkJfVxuIiArCi0JCSIJCUZpbGUg
ZmlsZT0gbG9jYXRlKG5hbWUpO1xuIiArCi0JCSIJCWlmIChmaWxlID09IG51bGwpXG4iICsKLQkJ
IgkJCXRocm93IG5ldyBDbGFzc05vdEZvdW5kRXhjZXB0aW9uKCk7XG4iICsKLQkJIgkJYnl0ZSBk
YXRhW109IGxvYWRDbGFzc0RhdGEoZmlsZSk7XG4iICsKLQkJIgkJYz0gZGVmaW5lQ2xhc3MobmFt
ZSwgZGF0YSwgMCwgZGF0YS5sZW5ndGgpO1xuIiArCi0JCSIJCWlmIChyZXNvbHZlKSBcbiIgKwot
CQkiCQkJcmVzb2x2ZUNsYXNzKGMpO1xuIiArCi0JCSIJCXJldHVybiBjO1xuIiArCi0JCSIJfVxu
IiArCi0JCSIJcHJpdmF0ZSBieXRlW10gbG9hZENsYXNzRGF0YShGaWxlIGYpIHRocm93cyBDbGFz
c05vdEZvdW5kRXhjZXB0aW9uIHtcbiIgKwotCQkiCQl0cnkge1xuIiArCi0JCSIJCQkvL1N5c3Rl
bS5vdXQucHJpbnRsbihcImxvYWRpbmc6IFwiK2YuZ2V0UGF0aCgpKTtcbiIgKwotCQkiCQkJRmls
ZUlucHV0U3RyZWFtIHN0cmVhbT0gbmV3IEZpbGVJbnB1dFN0cmVhbShmKTtcbiIgKwotCQkiCQkJ
XG4iICsKLQkJIgkJCXRyeSB7XG4iICsKLQkJIgkJCQlieXRlW10gYj0gbmV3IGJ5dGVbc3RyZWFt
LmF2YWlsYWJsZSgpXTtcbiIgKwotCQkiCQkJCXN0cmVhbS5yZWFkKGIpO1xuIiArCi0JCSIJCQkJ
c3RyZWFtLmNsb3NlKCk7XG4iICsKLQkJIgkJCQlyZXR1cm4gYjtcbiIgKwotCQkiCQkJfVxuIiAr
Ci0JCSIJCQljYXRjaCAoSU9FeGNlcHRpb24gZSkge1xuIiArCi0JCSIJCQkJdGhyb3cgbmV3IENs
YXNzTm90Rm91bmRFeGNlcHRpb24oKTtcbiIgKwotCQkiCQkJfVxuIiArCi0JCSIJCX1cbiIgKwot
CQkiCQljYXRjaCAoRmlsZU5vdEZvdW5kRXhjZXB0aW9uIGUpIHtcbiIgKwotCQkiCQkJdGhyb3cg
bmV3IENsYXNzTm90Rm91bmRFeGNlcHRpb24oKTtcbiIgKwotCQkiCQl9XG4iICsKLQkJIgl9XG4i
ICsKLQkJIgkvKipcbiIgKwotCQkiCSAqIExvY2F0ZSB0aGUgZ2l2ZW4gZmlsZS5cbiIgKwotCQki
CSAqIEByZXR1cm4gUmV0dXJucyBudWxsIGlmIGZpbGUgY291bGRuXCd0IGJlIGZvdW5kLlxuIiAr
Ci0JCSIJICovXG4iICsKLQkJIglwcml2YXRlIEZpbGUgbG9jYXRlKFN0cmluZyBmaWxlTmFtZSkg
eyBcbiIgKwotCQkiCQlpZiAoZmlsZU5hbWUgIT0gbnVsbCkge1xuIiArCi0JCSIJCSAgZmlsZU5h
bWU9IGZpbGVOYW1lLnJlcGxhY2UoXCcuXCcsIFwnL1wnKStcIi5jbGFzc1wiO1xuIiArCi0JCSIJ
CSAgRmlsZSBwYXRoPSBudWxsO1xuIiArCi0JCSIJCQlmb3IgKGludCBpPSAwOyBpIDwgZlBhdGhJ
dGVtcy5sZW5ndGg7IGkrKykge1xuIiArCi0JCSIJCQkJcGF0aD0gbmV3IEZpbGUoZlBhdGhJdGVt
c1tpXSwgZmlsZU5hbWUpO1xuIiArCi0JCSIJCQkJaWYgKHBhdGguZXhpc3RzKCkpXG4iICsKLQkJ
IgkJCQkJcmV0dXJuIHBhdGg7XG4iICsKLQkJIgkJCX1cbiIgKwotCQkiCQl9XG4iICsKLQkJIgkJ
cmV0dXJuIG51bGw7XG4iICsKLQkJIgl9XG4iICsKLQkJIn1cbiIgKwotCQkiCVxuIiArCi0JCSJw
dWJsaWMgdm9pZCBsb2FkQW5kUnVuKFN0cmluZyBjbGFzc05hbWUpIHRocm93cyBUaHJvd2FibGUg
e1xuIiArCi0JCSIJLy9TeXN0ZW0ub3V0LnByaW50bG4oXCJMb2FkaW5nIFwiICsgY2xhc3NOYW1l
ICsgXCIuLi5cIik7XG4iICsKLQkJIglDbGFzcyB0ZXN0Q2xhc3MgPSBuZXcgVmVyaWZ5Q2xhc3NM
b2FkZXIoKS5sb2FkQ2xhc3MoY2xhc3NOYW1lKTtcbiIgKwotCQkiCS8vU3lzdGVtLm91dC5wcmlu
dGxuKFwiTG9hZGVkIFwiICsgY2xhc3NOYW1lKTtcbiIgKwotCQkiCXRyeSB7XG4iICsKLQkJIgkJ
TWV0aG9kIG1haW4gPSB0ZXN0Q2xhc3MuZ2V0TWV0aG9kKFwibWFpblwiLCBuZXcgQ2xhc3NbXSB7
U3RyaW5nW10uY2xhc3N9KTtcbiIgKwotCQkiCQkvL1N5c3RlbS5vdXQucHJpbnRsbihcIlJ1bm5p
bmcgXCIgKyBjbGFzc05hbWUpO1xuIiArCi0JCSIJCW1haW4uaW52b2tlKG51bGwsIG5ldyBPYmpl
Y3RbXSB7bmV3IFN0cmluZ1tdIHt9fSk7XG4iICsKLQkJIgkJLy9TeXN0ZW0ub3V0LnByaW50bG4o
XCJGaW5pc2hlZCBydW5uaW5nIFwiICsgY2xhc3NOYW1lKTtcbiIgKwotCQkiCX0gY2F0Y2ggKE5v
U3VjaE1ldGhvZEV4Y2VwdGlvbiBlKSB7XG4iICsKLQkJIgkJcmV0dXJuO1xuIiArCi0JCSIJfSBj
YXRjaCAoSW52b2NhdGlvblRhcmdldEV4Y2VwdGlvbiBlKSB7XG4iICsKLQkJIgkJdGhyb3cgZS5n
ZXRUYXJnZXRFeGNlcHRpb24oKTtcbiIgKwotCQkiCX1cbiIgKwotCQkifVxuIiArCi0JCSJwdWJs
aWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB0aHJvd3MgSU9FeGNlcHRpb24ge1xu
IiArCi0JCSIJVmVyaWZ5VGVzdHMgdmVyaWZ5ID0gbmV3IFZlcmlmeVRlc3RzKCk7XG4iICsKLQkJ
Igl2ZXJpZnkucG9ydE51bWJlciA9IEludGVnZXIucGFyc2VJbnQoYXJnc1swXSk7XG4iICsKLQkJ
Igl2ZXJpZnkucnVuKCk7XG4iICsKLQkJIn1cbiIgKwotCQkicHVibGljIHZvaWQgcnVuKCkgdGhy
b3dzIElPRXhjZXB0aW9uIHtcbiIgKwotCQkiCVNlcnZlclNvY2tldCBzZXJ2ZXIgPSBuZXcgU2Vy
dmVyU29ja2V0KHRoaXMucG9ydE51bWJlcik7XG4iICsKLQkJIgl0aGlzLnNvY2tldCA9IHNlcnZl
ci5hY2NlcHQoKTtcbiIgKwotCQkiCXRoaXMuc29ja2V0LnNldFRjcE5vRGVsYXkodHJ1ZSk7XG4i
ICsKLQkJIglzZXJ2ZXIuY2xvc2UoKTtcbiIgKwotCQkiXG4iICsKLQkJIglmaW5hbCBEYXRhSW5w
dXRTdHJlYW0gaW4gPSBuZXcgRGF0YUlucHV0U3RyZWFtKHRoaXMuc29ja2V0LmdldElucHV0U3Ry
ZWFtKCkpO1xuIiArCi0JCSIJZmluYWwgRGF0YU91dHB1dFN0cmVhbSBvdXQgPSBuZXcgRGF0YU91
dHB1dFN0cmVhbSh0aGlzLnNvY2tldC5nZXRPdXRwdXRTdHJlYW0oKSk7XG4iICsKLQkJIgl3aGls
ZSAodHJ1ZSkge1xuIiArCi0JCSIJCWZpbmFsIFN0cmluZyBjbGFzc05hbWUgPSBpbi5yZWFkVVRG
KCk7XG4iICsKLQkJIgkJVGhyZWFkIHRocmVhZCA9IG5ldyBUaHJlYWQoKSB7XG4iICsKLQkJIgkJ
CXB1YmxpYyB2b2lkIHJ1bigpIHtcbiIgKwotCQkiCQkJCXRyeSB7XG4iICsKLQkJIgkJCQkJbG9h
ZEFuZFJ1bihjbGFzc05hbWUpO1xuIiArCi0JCSIJCQkJCW91dC53cml0ZUJvb2xlYW4odHJ1ZSk7
XG4iICsKLQkJIgkJCQkJU3lzdGVtLmVyci5wcmludGxuKFZlcmlmeVRlc3RzLmNsYXNzLmdldE5h
bWUoKSk7XG4iICsKLQkJIgkJCQkJU3lzdGVtLm91dC5wcmludGxuKFZlcmlmeVRlc3RzLmNsYXNz
LmdldE5hbWUoKSk7XG4iICsKLQkJIgkJCQl9IGNhdGNoIChUaHJvd2FibGUgZSkge1xuIiArCi0J
CSIJCQkJCWUucHJpbnRTdGFja1RyYWNlKCk7XG4iICsKLQkJIgkJCQkJdHJ5IHtcbiIgKwotCQki
CQkJCQkJU3lzdGVtLmVyci5wcmludGxuKFZlcmlmeVRlc3RzLmNsYXNzLmdldE5hbWUoKSk7XG4i
ICsKLQkJIgkJCQkJCVN5c3RlbS5vdXQucHJpbnRsbihWZXJpZnlUZXN0cy5jbGFzcy5nZXROYW1l
KCkpO1xuIiArCi0JCSIJCQkJCQlvdXQud3JpdGVCb29sZWFuKGZhbHNlKTtcbiIgKwotCQkiCQkJ
CQl9IGNhdGNoIChJT0V4Y2VwdGlvbiBlMSkge1xuIiArCi0JCSIJCQkJCQkvLyBpZ25vcmVcbiIg
KwotCQkiCQkJCQl9XG4iICsKLQkJIgkJCQl9XG4iICsKLQkJIgkJCX1cbiIgKwotCQkiCQl9O1xu
IiArCi0JCSIJCXRocmVhZC5zdGFydCgpO1xuIiArCi0JCSIJfVxuIiArCi0JCSJ9XG4iICsKLQkJ
In1cbiI7CisJCSIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuIiArIAorCQkiICogQ29weXJpZ2h0
IChjKSAyMDAwLCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLlxuIiArIAorCQkiICog
QWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1h
dGVyaWFsc1xuIiArIAorCQkiICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBv
ZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wXG4iICsgCisJCSIgKiB3aGljaCBhY2Nv
bXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdFxuIiArIAorCQki
ICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWxcbiIgKyAKKwkJIiAq
XG4iICsgCisJCSIgKiBDb250cmlidXRvcnM6XG4iICsgCisJCSIgKiAgICAgSUJNIENvcnBvcmF0
aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uXG4iICsgCisJCSIgKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKi9cbiIgKyAKKwkJInBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmNvcmUudGVz
dHMudXRpbDtcbiIgKyAKKwkJIlxuIiArIAorCQkiaW1wb3J0IGphdmEuaW8uRGF0YUlucHV0U3Ry
ZWFtO1xuIiArIAorCQkiaW1wb3J0IGphdmEuaW8uRGF0YU91dHB1dFN0cmVhbTtcbiIgKyAKKwkJ
ImltcG9ydCBqYXZhLmlvLkZpbGU7XG4iICsgCisJCSJpbXBvcnQgamF2YS5pby5GaWxlSW5wdXRT
dHJlYW07XG4iICsgCisJCSJpbXBvcnQgamF2YS5pby5GaWxlTm90Rm91bmRFeGNlcHRpb247XG4i
ICsgCisJCSJpbXBvcnQgamF2YS5pby5JT0V4Y2VwdGlvbjtcbiIgKyAKKwkJImltcG9ydCBqYXZh
LmlvLklucHV0U3RyZWFtO1xuIiArIAorCQkiaW1wb3J0IGphdmEubGFuZy5yZWZsZWN0Lkludm9j
YXRpb25UYXJnZXRFeGNlcHRpb247XG4iICsgCisJCSJpbXBvcnQgamF2YS5sYW5nLnJlZmxlY3Qu
TWV0aG9kO1xuIiArIAorCQkiaW1wb3J0IGphdmEubmV0LlNlcnZlclNvY2tldDtcbiIgKyAKKwkJ
ImltcG9ydCBqYXZhLm5ldC5Tb2NrZXQ7XG4iICsgCisJCSJpbXBvcnQgamF2YS51dGlsLlN0cmlu
Z1Rva2VuaXplcjtcbiIgKyAKKwkJIlxuIiArIAorCQkiLyoqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuIiArIAorCQkiICpcbiIgKyAKKwkJIiAq
IElNUE9SVEFOVCBOT1RFOiBJZiBtb2RpZnlpbmcgdGhpcyBjbGFzcywgY29weSB0aGUgc291cmNl
IHRvIFRlc3RWZXJpZmllciNnZXRWZXJpZnlUZXN0c0NvZGUoKVxuIiArIAorCQkiICogKHNlZSB0
aGlzIG1ldGhvZCBmb3IgZGV0YWlscylcbiIgKyAKKwkJIiAqXG4iICsgCisJCSIgKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuIiArIAorCQki
XG4iICsgCisJCSJwdWJsaWMgY2xhc3MgVmVyaWZ5VGVzdHMge1xuIiArIAorCQkiCWludCBwb3J0
TnVtYmVyO1xuIiArIAorCQkiCVNvY2tldCBzb2NrZXQ7XG4iICsgCisJCSJcbiIgKyAKKwkJIi8q
KlxuIiArIAorCQkiICogTk9URTogQ29kZSBjb3BpZWQgZnJvbSBqdW5pdC51dGlsLlRlc3RDYXNl
Q2xhc3NMb2FkZXIuXG4iICsgCisJCSIgKlxuIiArIAorCQkiICogQSBjdXN0b20gY2xhc3MgbG9h
ZGVyIHdoaWNoIGVuYWJsZXMgdGhlIHJlbG9hZGluZ1xuIiArIAorCQkiICogb2YgY2xhc3NlcyBm
b3IgZWFjaCB0ZXN0IHJ1bi4gVGhlIGNsYXNzIGxvYWRlclxuIiArIAorCQkiICogY2FuIGJlIGNv
bmZpZ3VyZWQgd2l0aCBhIGxpc3Qgb2YgcGFja2FnZSBwYXRocyB0aGF0XG4iICsgCisJCSIgKiBz
aG91bGQgYmUgZXhjbHVkZWQgZnJvbSBsb2FkaW5nLiBUaGUgbG9hZGluZ1xuIiArIAorCQkiICog
b2YgdGhlc2UgcGFja2FnZXMgaXMgZGVsZWdhdGVkIHRvIHRoZSBzeXN0ZW0gY2xhc3NcbiIgKyAK
KwkJIiAqIGxvYWRlci4gVGhleSB3aWxsIGJlIHNoYXJlZCBhY3Jvc3MgdGVzdCBydW5zLlxuIiAr
IAorCQkiICogPHA+XG4iICsgCisJCSIgKiBUaGUgbGlzdCBvZiBleGNsdWRlZCBwYWNrYWdlIHBh
dGhzIGlzIHNwZWNpZmllZCBpblxuIiArIAorCQkiICogYSBwcm9wZXJ0aWVzIGZpbGUgXCJleGNs
dWRlZC5wcm9wZXJ0aWVzXCIgdGhhdCBpcyBsb2NhdGVkIGluXG4iICsgCisJCSIgKiB0aGUgc2Ft
ZSBwbGFjZSBhcyB0aGUgVGVzdENhc2VDbGFzc0xvYWRlciBjbGFzcy5cbiIgKyAKKwkJIiAqIDxw
PlxuIiArIAorCQkiICogPGI+S25vd24gbGltaXRhdGlvbjo8L2I+IHRoZSBWZXJpZnlDbGFzc0xv
YWRlciBjYW5ub3QgbG9hZCBjbGFzc2VzXG4iICsgCisJCSIgKiBmcm9tIGphciBmaWxlcy5cbiIg
KyAKKwkJIiAqL1xuIiArIAorCQkiXG4iICsgCisJCSJcbiIgKyAKKwkJInB1YmxpYyBjbGFzcyBW
ZXJpZnlDbGFzc0xvYWRlciBleHRlbmRzIENsYXNzTG9hZGVyIHtcbiIgKyAKKwkJIgkvKiogc2Nh
bm5lZCBjbGFzcyBwYXRoICovXG4iICsgCisJCSIJcHJpdmF0ZSBTdHJpbmdbXSBwYXRoSXRlbXM7
XG4iICsgCisJCSJcbiIgKyAKKwkJIgkvKiogZXhjbHVkZWQgcGF0aHMgKi9cbiIgKyAKKwkJIglw
cml2YXRlIFN0cmluZ1tdIGV4Y2x1ZGVkPSB7fTtcbiIgKyAKKwkJIlxuIiArIAorCQkiCS8qKlxu
IiArIAorCQkiCSAqIENvbnN0cnVjdHMgYSBWZXJpZnlDbGFzc0xvYWRlci4gSXQgc2NhbnMgdGhl
IGNsYXNzIHBhdGhcbiIgKyAKKwkJIgkgKiBhbmQgdGhlIGV4Y2x1ZGVkIHBhY2thZ2UgcGF0aHNc
biIgKyAKKwkJIgkgKi9cbiIgKyAKKwkJIglwdWJsaWMgVmVyaWZ5Q2xhc3NMb2FkZXIoKSB7XG4i
ICsgCisJCSIJCXN1cGVyKCk7XG4iICsgCisJCSIJCVN0cmluZyBjbGFzc1BhdGg9IFN5c3RlbS5n
ZXRQcm9wZXJ0eShcImphdmEuY2xhc3MucGF0aFwiKTtcbiIgKyAKKwkJIgkJU3RyaW5nIHNlcGFy
YXRvcj0gU3lzdGVtLmdldFByb3BlcnR5KFwicGF0aC5zZXBhcmF0b3JcIik7XG4iICsgCisJCSJc
biIgKyAKKwkJIgkJLy8gZmlyc3QgcGFzczogY291bnQgZWxlbWVudHNcbiIgKyAKKwkJIgkJU3Ry
aW5nVG9rZW5pemVyIHN0PSBuZXcgU3RyaW5nVG9rZW5pemVyKGNsYXNzUGF0aCwgc2VwYXJhdG9y
KTtcbiIgKyAKKwkJIgkJaW50IGk9IDA7XG4iICsgCisJCSIJCXdoaWxlIChzdC5oYXNNb3JlVG9r
ZW5zKCkpIHtcbiIgKyAKKwkJIgkJCXN0Lm5leHRUb2tlbigpO1xuIiArIAorCQkiCQkJaSsrO1xu
IiArIAorCQkiCQl9XG4iICsgCisJCSIJCS8vIHNlY29uZCBwYXNzOiBzcGxpdFxuIiArIAorCQki
CQl0aGlzLnBhdGhJdGVtcz0gbmV3IFN0cmluZ1tpXTtcbiIgKyAKKwkJIgkJc3Q9IG5ldyBTdHJp
bmdUb2tlbml6ZXIoY2xhc3NQYXRoLCBzZXBhcmF0b3IpO1xuIiArIAorCQkiCQlpPSAwO1xuIiAr
IAorCQkiCQl3aGlsZSAoc3QuaGFzTW9yZVRva2VucygpKSB7XG4iICsgCisJCSIJCQl0aGlzLnBh
dGhJdGVtc1tpKytdPSBzdC5uZXh0VG9rZW4oKTtcbiIgKyAKKwkJIgkJfVxuIiArIAorCQkiXG4i
ICsgCisJCSIJfVxuIiArIAorCQkiCXB1YmxpYyBqYXZhLm5ldC5VUkwgZ2V0UmVzb3VyY2UoU3Ry
aW5nIG5hbWUpIHtcbiIgKyAKKwkJIgkJcmV0dXJuIENsYXNzTG9hZGVyLmdldFN5c3RlbVJlc291
cmNlKG5hbWUpO1xuIiArIAorCQkiCX1cbiIgKyAKKwkJIglwdWJsaWMgSW5wdXRTdHJlYW0gZ2V0
UmVzb3VyY2VBc1N0cmVhbShTdHJpbmcgbmFtZSkge1xuIiArIAorCQkiCQlyZXR1cm4gQ2xhc3NM
b2FkZXIuZ2V0U3lzdGVtUmVzb3VyY2VBc1N0cmVhbShuYW1lKTtcbiIgKyAKKwkJIgl9XG4iICsg
CisJCSIJcHJvdGVjdGVkIGJvb2xlYW4gaXNFeGNsdWRlZChTdHJpbmcgbmFtZSkge1xuIiArIAor
CQkiCQkvLyBleGNsdWRlIHRoZSBcImphdmFcIiBwYWNrYWdlcy5cbiIgKyAKKwkJIgkJLy8gVGhl
eSBhbHdheXMgbmVlZCB0byBiZSBleGNsdWRlZCBzbyB0aGF0IHRoZXkgYXJlIGxvYWRlZCBieSB0
aGUgc3lzdGVtIGNsYXNzIGxvYWRlclxuIiArIAorCQkiCQlpZiAobmFtZS5zdGFydHNXaXRoKFwi
amF2YVwiKSlcbiIgKyAKKwkJIgkJCXJldHVybiB0cnVlO1xuIiArIAorCQkiXG4iICsgCisJCSIJ
CS8vIGV4Y2x1ZGUgdGhlIHVzZXIgZGVmaW5lZCBwYWNrYWdlIHBhdGhzXG4iICsgCisJCSIJCWZv
ciAoaW50IGk9IDA7IGkgPCB0aGlzLmV4Y2x1ZGVkLmxlbmd0aDsgaSsrKSB7XG4iICsgCisJCSIJ
CQlpZiAobmFtZS5zdGFydHNXaXRoKHRoaXMuZXhjbHVkZWRbaV0pKSB7XG4iICsgCisJCSIJCQkJ
cmV0dXJuIHRydWU7XG4iICsgCisJCSIJCQl9XG4iICsgCisJCSIJCX1cbiIgKyAKKwkJIgkJcmV0
dXJuIGZhbHNlO1xuIiArIAorCQkiCX1cbiIgKyAKKwkJIglwdWJsaWMgc3luY2hyb25pemVkIENs
YXNzIGxvYWRDbGFzcyhTdHJpbmcgbmFtZSwgYm9vbGVhbiByZXNvbHZlKVxuIiArIAorCQkiCQl0
aHJvd3MgQ2xhc3NOb3RGb3VuZEV4Y2VwdGlvbiB7XG4iICsgCisJCSJcbiIgKyAKKwkJIgkJQ2xh
c3MgYz0gZmluZExvYWRlZENsYXNzKG5hbWUpO1xuIiArIAorCQkiCQlpZiAoYyAhPSBudWxsKVxu
IiArIAorCQkiCQkJcmV0dXJuIGM7XG4iICsgCisJCSIJCS8vXG4iICsgCisJCSIJCS8vIERlbGVn
YXRlIHRoZSBsb2FkaW5nIG9mIGV4Y2x1ZGVkIGNsYXNzZXMgdG8gdGhlXG4iICsgCisJCSIJCS8v
IHN0YW5kYXJkIGNsYXNzIGxvYWRlci5cbiIgKyAKKwkJIgkJLy9cbiIgKyAKKwkJIgkJaWYgKGlz
RXhjbHVkZWQobmFtZSkpIHtcbiIgKyAKKwkJIgkJCXRyeSB7XG4iICsgCisJCSIJCQkJYz0gZmlu
ZFN5c3RlbUNsYXNzKG5hbWUpO1xuIiArIAorCQkiCQkJCXJldHVybiBjO1xuIiArIAorCQkiCQkJ
fSBjYXRjaCAoQ2xhc3NOb3RGb3VuZEV4Y2VwdGlvbiBlKSB7XG4iICsgCisJCSIJCQkJLy8ga2Vl
cCBzZWFyY2hpbmdcbiIgKyAKKwkJIgkJCX1cbiIgKyAKKwkJIgkJfVxuIiArIAorCQkiCQlGaWxl
IGZpbGU9IGxvY2F0ZShuYW1lKTtcbiIgKyAKKwkJIgkJaWYgKGZpbGUgPT0gbnVsbClcbiIgKyAK
KwkJIgkJCXRocm93IG5ldyBDbGFzc05vdEZvdW5kRXhjZXB0aW9uKCk7XG4iICsgCisJCSIJCWJ5
dGUgZGF0YVtdPSBsb2FkQ2xhc3NEYXRhKGZpbGUpO1xuIiArIAorCQkiCQljPSBkZWZpbmVDbGFz
cyhuYW1lLCBkYXRhLCAwLCBkYXRhLmxlbmd0aCk7XG4iICsgCisJCSIJCWlmIChyZXNvbHZlKVxu
IiArIAorCQkiCQkJcmVzb2x2ZUNsYXNzKGMpO1xuIiArIAorCQkiCQlyZXR1cm4gYztcbiIgKyAK
KwkJIgl9XG4iICsgCisJCSIJcHJpdmF0ZSBieXRlW10gbG9hZENsYXNzRGF0YShGaWxlIGYpIHRo
cm93cyBDbGFzc05vdEZvdW5kRXhjZXB0aW9uIHtcbiIgKyAKKwkJIgkJRmlsZUlucHV0U3RyZWFt
IHN0cmVhbSA9IG51bGw7XG4iICsgCisJCSIJCXRyeSB7XG4iICsgCisJCSIJCQkvL1N5c3RlbS5v
dXQucHJpbnRsbihcImxvYWRpbmc6IFwiK2YuZ2V0UGF0aCgpKTtcbiIgKyAKKwkJIgkJCXN0cmVh
bSA9IG5ldyBGaWxlSW5wdXRTdHJlYW0oZik7XG4iICsgCisJCSJcbiIgKyAKKwkJIgkJCXRyeSB7
XG4iICsgCisJCSIJCQkJYnl0ZVtdIGI9IG5ldyBieXRlW3N0cmVhbS5hdmFpbGFibGUoKV07XG4i
ICsgCisJCSIJCQkJc3RyZWFtLnJlYWQoYik7XG4iICsgCisJCSIJCQkJcmV0dXJuIGI7XG4iICsg
CisJCSIJCQl9XG4iICsgCisJCSIJCQljYXRjaCAoSU9FeGNlcHRpb24gZSkge1xuIiArIAorCQki
CQkJCXRocm93IG5ldyBDbGFzc05vdEZvdW5kRXhjZXB0aW9uKCk7XG4iICsgCisJCSIJCQl9XG4i
ICsgCisJCSIJCX1cbiIgKyAKKwkJIgkJY2F0Y2ggKEZpbGVOb3RGb3VuZEV4Y2VwdGlvbiBlKSB7
XG4iICsgCisJCSIJCQl0aHJvdyBuZXcgQ2xhc3NOb3RGb3VuZEV4Y2VwdGlvbigpO1xuIiArIAor
CQkiCQl9IGZpbmFsbHkge1xuIiArIAorCQkiCQkJaWYgKHN0cmVhbSAhPSBudWxsKSB7XG4iICsg
CisJCSIJCQkJdHJ5IHtcbiIgKyAKKwkJIgkJCQkJc3RyZWFtLmNsb3NlKCk7XG4iICsgCisJCSIJ
CQkJfSBjYXRjaCAoSU9FeGNlcHRpb24gZSkge1xuIiArIAorCQkiCQkJCQkvKiBpZ25vcmUgKi9c
biIgKyAKKwkJIgkJCQl9XG4iICsgCisJCSIJCQl9XG4iICsgCisJCSIJCX1cbiIgKyAKKwkJIgl9
XG4iICsgCisJCSIJLyoqXG4iICsgCisJCSIJICogTG9jYXRlIHRoZSBnaXZlbiBmaWxlLlxuIiAr
IAorCQkiCSAqIEByZXR1cm4gUmV0dXJucyBudWxsIGlmIGZpbGUgY291bGRuJ3QgYmUgZm91bmQu
XG4iICsgCisJCSIJICovXG4iICsgCisJCSIJcHJpdmF0ZSBGaWxlIGxvY2F0ZShTdHJpbmcgZmls
ZU5hbWUpIHtcbiIgKyAKKwkJIgkJaWYgKGZpbGVOYW1lICE9IG51bGwpIHtcbiIgKyAKKwkJIgkJ
CWZpbGVOYW1lPSBmaWxlTmFtZS5yZXBsYWNlKCcuJywgJy8nKStcIi5jbGFzc1wiO1xuIiArIAor
CQkiCQkJRmlsZSBwYXRoPSBudWxsO1xuIiArIAorCQkiCQkJZm9yIChpbnQgaT0gMDsgaSA8IHRo
aXMucGF0aEl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4iICsgCisJCSIJCQkJcGF0aD0gbmV3IEZpbGUo
dGhpcy5wYXRoSXRlbXNbaV0sIGZpbGVOYW1lKTtcbiIgKyAKKwkJIgkJCQlpZiAocGF0aC5leGlz
dHMoKSlcbiIgKyAKKwkJIgkJCQkJcmV0dXJuIHBhdGg7XG4iICsgCisJCSIJCQl9XG4iICsgCisJ
CSIJCX1cbiIgKyAKKwkJIgkJcmV0dXJuIG51bGw7XG4iICsgCisJCSIJfVxuIiArIAorCQkifVxu
IiArIAorCQkiXG4iICsgCisJCSJwdWJsaWMgdm9pZCBsb2FkQW5kUnVuKFN0cmluZyBjbGFzc05h
bWUpIHRocm93cyBUaHJvd2FibGUge1xuIiArIAorCQkiCS8vU3lzdGVtLm91dC5wcmludGxuKFwi
TG9hZGluZyBcIiArIGNsYXNzTmFtZSArIFwiLi4uXCIpO1xuIiArIAorCQkiCUNsYXNzIHRlc3RD
bGFzcyA9IG5ldyBWZXJpZnlDbGFzc0xvYWRlcigpLmxvYWRDbGFzcyhjbGFzc05hbWUpO1xuIiAr
IAorCQkiCS8vU3lzdGVtLm91dC5wcmludGxuKFwiTG9hZGVkIFwiICsgY2xhc3NOYW1lKTtcbiIg
KyAKKwkJIgl0cnkge1xuIiArIAorCQkiCQlNZXRob2QgbWFpbiA9IHRlc3RDbGFzcy5nZXRNZXRo
b2QoXCJtYWluXCIsIG5ldyBDbGFzc1tdIHtTdHJpbmdbXS5jbGFzc30pO1xuIiArIAorCQkiCQkv
L1N5c3RlbS5vdXQucHJpbnRsbihcIlJ1bm5pbmcgXCIgKyBjbGFzc05hbWUpO1xuIiArIAorCQki
CQltYWluLmludm9rZShudWxsLCBuZXcgT2JqZWN0W10ge25ldyBTdHJpbmdbXSB7fX0pO1xuIiAr
IAorCQkiCQkvL1N5c3RlbS5vdXQucHJpbnRsbihcIkZpbmlzaGVkIHJ1bm5pbmcgXCIgKyBjbGFz
c05hbWUpO1xuIiArIAorCQkiCX0gY2F0Y2ggKE5vU3VjaE1ldGhvZEV4Y2VwdGlvbiBlKSB7XG4i
ICsgCisJCSIJCXJldHVybjtcbiIgKyAKKwkJIgl9IGNhdGNoIChJbnZvY2F0aW9uVGFyZ2V0RXhj
ZXB0aW9uIGUpIHtcbiIgKyAKKwkJIgkJdGhyb3cgZS5nZXRUYXJnZXRFeGNlcHRpb24oKTtcbiIg
KyAKKwkJIgl9XG4iICsgCisJCSJ9XG4iICsgCisJCSJwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihT
dHJpbmdbXSBhcmdzKSB0aHJvd3MgSU9FeGNlcHRpb24ge1xuIiArIAorCQkiCVZlcmlmeVRlc3Rz
IHZlcmlmeSA9IG5ldyBWZXJpZnlUZXN0cygpO1xuIiArIAorCQkiCXZlcmlmeS5wb3J0TnVtYmVy
ID0gSW50ZWdlci5wYXJzZUludChhcmdzWzBdKTtcbiIgKyAKKwkJIgl2ZXJpZnkucnVuKCk7XG4i
ICsgCisJCSJ9XG4iICsgCisJCSJwdWJsaWMgdm9pZCBydW4oKSB0aHJvd3MgSU9FeGNlcHRpb24g
e1xuIiArIAorCQkiCVNlcnZlclNvY2tldCBzZXJ2ZXIgPSBuZXcgU2VydmVyU29ja2V0KHRoaXMu
cG9ydE51bWJlcik7XG4iICsgCisJCSIJdGhpcy5zb2NrZXQgPSBzZXJ2ZXIuYWNjZXB0KCk7XG4i
ICsgCisJCSIJdGhpcy5zb2NrZXQuc2V0VGNwTm9EZWxheSh0cnVlKTtcbiIgKyAKKwkJIglzZXJ2
ZXIuY2xvc2UoKTtcbiIgKyAKKwkJIlxuIiArIAorCQkiCURhdGFJbnB1dFN0cmVhbSBpbiA9IG5l
dyBEYXRhSW5wdXRTdHJlYW0odGhpcy5zb2NrZXQuZ2V0SW5wdXRTdHJlYW0oKSk7XG4iICsgCisJ
CSIJZmluYWwgRGF0YU91dHB1dFN0cmVhbSBvdXQgPSBuZXcgRGF0YU91dHB1dFN0cmVhbSh0aGlz
LnNvY2tldC5nZXRPdXRwdXRTdHJlYW0oKSk7XG4iICsgCisJCSIJd2hpbGUgKHRydWUpIHtcbiIg
KyAKKwkJIgkJZmluYWwgU3RyaW5nIGNsYXNzTmFtZSA9IGluLnJlYWRVVEYoKTtcbiIgKyAKKwkJ
IgkJVGhyZWFkIHRocmVhZCA9IG5ldyBUaHJlYWQoKSB7XG4iICsgCisJCSIJCQlwdWJsaWMgdm9p
ZCBydW4oKSB7XG4iICsgCisJCSIJCQkJdHJ5IHtcbiIgKyAKKwkJIgkJCQkJbG9hZEFuZFJ1bihj
bGFzc05hbWUpO1xuIiArIAorCQkiCQkJCQlvdXQud3JpdGVCb29sZWFuKHRydWUpO1xuIiArIAor
CQkiCQkJCQlTeXN0ZW0uZXJyLnByaW50bG4oVmVyaWZ5VGVzdHMuY2xhc3MuZ2V0TmFtZSgpKTtc
biIgKyAKKwkJIgkJCQkJU3lzdGVtLm91dC5wcmludGxuKFZlcmlmeVRlc3RzLmNsYXNzLmdldE5h
bWUoKSk7XG4iICsgCisJCSIJCQkJfSBjYXRjaCAoVGhyb3dhYmxlIGUpIHtcbiIgKyAKKwkJIgkJ
CQkJZS5wcmludFN0YWNrVHJhY2UoKTtcbiIgKyAKKwkJIgkJCQkJdHJ5IHtcbiIgKyAKKwkJIgkJ
CQkJCVN5c3RlbS5lcnIucHJpbnRsbihWZXJpZnlUZXN0cy5jbGFzcy5nZXROYW1lKCkpO1xuIiAr
IAorCQkiCQkJCQkJU3lzdGVtLm91dC5wcmludGxuKFZlcmlmeVRlc3RzLmNsYXNzLmdldE5hbWUo
KSk7XG4iICsgCisJCSIJCQkJCQlvdXQud3JpdGVCb29sZWFuKGZhbHNlKTtcbiIgKyAKKwkJIgkJ
CQkJfSBjYXRjaCAoSU9FeGNlcHRpb24gZTEpIHtcbiIgKyAKKwkJIgkJCQkJCWUxLnByaW50U3Rh
Y2tUcmFjZSgpO1xuIiArIAorCQkiCQkJCQl9XG4iICsgCisJCSIJCQkJfVxuIiArIAorCQkiCQkJ
CXRyeSB7XG4iICsgCisJCSIJCQkJCW91dC5mbHVzaCgpO1xuIiArIAorCQkiCQkJCX0gY2F0Y2gg
KElPRXhjZXB0aW9uIGUpIHtcbiIgKyAKKwkJIgkJCQkJZS5wcmludFN0YWNrVHJhY2UoKTtcbiIg
KyAKKwkJIgkJCQl9XG4iICsgCisJCSIJCQl9XG4iICsgCisJCSIJCX07XG4iICsgCisJCSIJCXRo
cmVhZC5zdGFydCgpO1xuIiArIAorCQkiCX1cbiIgKyAKKwkJIn1cbiIgKyAKKwkJIn0iOwogfQog
cHJpdmF0ZSB2b2lkIGxhdW5jaEFuZFJ1bihTdHJpbmcgY2xhc3NOYW1lLCBTdHJpbmdbXSBjbGFz
c3BhdGhzLCBTdHJpbmdbXSBwcm9ncmFtQXJndW1lbnRzLCBTdHJpbmdbXSB2bUFyZ3VtZW50cykg
ewogCS8vIHdlIHdvbid0IHJldXNlIHRoZSB2bSwgc2h1dCB0aGUgZXhpc3Rpbmcgb25lIGlmIHJ1
bm5pbmcKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3Ny
Yy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy91dGlsL1ZlcmlmeVRlc3RzLmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvdXRpbC9WZXJpZnlUZXN0cy5qYXZhCmluZGV4IDVhNjU5MzcuLjQ1NDA0ZjkgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBz
ZS9qZHQvY29yZS90ZXN0cy91dGlsL1ZlcmlmeVRlc3RzLmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL3V0
aWwvVmVyaWZ5VGVzdHMuamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTAgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhl
cnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhl
cnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBh
bnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9m
IHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRo
aXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC0xMCwxMCArMTAsMTggQEAK
ICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqLwogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuY29yZS50
ZXN0cy51dGlsOwogCi1pbXBvcnQgamF2YS5sYW5nLnJlZmxlY3QuKjsKLWltcG9ydCBqYXZhLmlv
Lio7Ci1pbXBvcnQgamF2YS5uZXQuKjsKLWltcG9ydCBqYXZhLnV0aWwuKjsKK2ltcG9ydCBqYXZh
LmlvLkRhdGFJbnB1dFN0cmVhbTsKK2ltcG9ydCBqYXZhLmlvLkRhdGFPdXRwdXRTdHJlYW07Citp
bXBvcnQgamF2YS5pby5GaWxlOworaW1wb3J0IGphdmEuaW8uRmlsZUlucHV0U3RyZWFtOworaW1w
b3J0IGphdmEuaW8uRmlsZU5vdEZvdW5kRXhjZXB0aW9uOworaW1wb3J0IGphdmEuaW8uSU9FeGNl
cHRpb247CitpbXBvcnQgamF2YS5pby5JbnB1dFN0cmVhbTsKK2ltcG9ydCBqYXZhLmxhbmcucmVm
bGVjdC5JbnZvY2F0aW9uVGFyZ2V0RXhjZXB0aW9uOworaW1wb3J0IGphdmEubGFuZy5yZWZsZWN0
Lk1ldGhvZDsKK2ltcG9ydCBqYXZhLm5ldC5TZXJ2ZXJTb2NrZXQ7CitpbXBvcnQgamF2YS5uZXQu
U29ja2V0OworaW1wb3J0IGphdmEudXRpbC5TdHJpbmdUb2tlbml6ZXI7CiAKIC8qKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICAqCmRpZmYgLS1n
aXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvY29kZWdlbi9TdGFja01hcEZyYW1lQ29kZVN0cmVhbS5qYXZhIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2NvZGVnZW4vU3RhY2tNYXBGcmFtZUNvZGVTdHJlYW0uamF2YQppbmRleCAxNGI4ODQ1Li5lNjFj
ZGUzIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvY29kZWdlbi9TdGFja01hcEZyYW1lQ29kZVN0cmVhbS5q
YXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9jb2RlZ2VuL1N0YWNrTWFwRnJhbWVDb2RlU3RyZWFtLmphdmEKQEAg
LTI0OCw4ICsyNDgsMTcgQEAgcHJpdmF0ZSB2b2lkIGFkZFN0YWNrRGVwdGhNYXJrZXIoaW50IHBj
LCBpbnQgZGVsdGEsIFR5cGVCaW5kaW5nIHR5cGVCaW5kaW5nKSB7CiAJCXRoaXMuc3RhY2tEZXB0
aE1hcmtlcnMuYWRkKG5ldyBTdGFja0RlcHRoTWFya2VyKHBjLCBkZWx0YSwgdHlwZUJpbmRpbmcp
KTsKIAl9IGVsc2UgewogCQlpbnQgc2l6ZSA9IHRoaXMuc3RhY2tEZXB0aE1hcmtlcnMuc2l6ZSgp
OwotCQlpZiAoc2l6ZSA9PSAwIHx8ICgoU3RhY2tEZXB0aE1hcmtlcikgdGhpcy5zdGFja0RlcHRo
TWFya2Vycy5nZXQoc2l6ZSAtIDEpKS5wYyAhPSB0aGlzLnBvc2l0aW9uKSB7CisJCWlmIChzaXpl
ID09IDApIHsKIAkJCXRoaXMuc3RhY2tEZXB0aE1hcmtlcnMuYWRkKG5ldyBTdGFja0RlcHRoTWFy
a2VyKHBjLCBkZWx0YSwgdHlwZUJpbmRpbmcpKTsKKwkJfSBlbHNlIHsKKwkJCVN0YWNrRGVwdGhN
YXJrZXIgc3RhY2tEZXB0aE1hcmtlciA9IChTdGFja0RlcHRoTWFya2VyKSB0aGlzLnN0YWNrRGVw
dGhNYXJrZXJzLmdldChzaXplIC0gMSk7CisJCQlpZiAoc3RhY2tEZXB0aE1hcmtlci5wYyAhPSB0
aGlzLnBvc2l0aW9uKSB7CisJCQkJdGhpcy5zdGFja0RlcHRoTWFya2Vycy5hZGQobmV3IFN0YWNr
RGVwdGhNYXJrZXIocGMsIGRlbHRhLCB0eXBlQmluZGluZykpOworCQkJfSBlbHNlIHsKKwkJCQkv
LyBXZSByZXBsYWNlIHRoZSByZWNvcmRlZCBzdGFjayBkZXB0aCBtYXJrZXIgd2l0aCBhIG5ldyB2
YWx1ZSB0aGF0IGNvbnRhaW5zIHRoZSBnaXZlbiB0eXBlQmluZGluZworCQkJCS8vIFRoaXMgY2Fz
ZSBjYW4gaGFwcGVuIHdoZW4gbXVsdGlwbGUgY29uZGl0aW9uYWwgZXhwcmVzc2lvbiBhcmUgbmVz
dGVkIHNlZSBidWcgMzYyNTkxCisJCQkJdGhpcy5zdGFja0RlcHRoTWFya2Vycy5zZXQoc2l6ZSAt
IDEsIG5ldyBTdGFja0RlcHRoTWFya2VyKHBjLCBkZWx0YSwgdHlwZUJpbmRpbmcpKTsKKwkJCX0K
IAkJfQogCX0KIH0K
</data>

          </attachment>
      

    </bug>

</bugzilla>