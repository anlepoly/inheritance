<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>404657</bug_id>
          
          <creation_ts>2013-04-01 04:19:00 -0400</creation_ts>
          <short_desc>[1.8][compiler] Analysis for effectively final variables fails to consider loops</short_desc>
          <delta_ts>2013-08-30 00:55:59 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Stephan Herrmann">stephan.herrmann</reporter>
          <assigned_to name="ANIRBAN CHAKRABORTY">anchakrk</assigned_to>
          <cc>anchakrk</cc>
    
    <cc>jarthana</cc>
    
    <cc>jesper</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="57029"
          type_id="1"
          status="+"
          setter="srikanth_sankaran"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2238229</commentid>
    <comment_count>0</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-04-01 04:19:33 -0400</bug_when>
    <thetext>BETA_JAVA8 follow-up of bug 382721:

The following program is currently accepted (except for the expected
&quot;Missing code implementation in the compiler&quot; during code-gen):

public class EffectivelyFinalInLoop {
	void executeLater(Runnable r) { /*...*/ }
	void test() {
		int n;
		for (int i=0; i&lt;3; i++) {
			n=i;
			executeLater(()-&gt; System.out.println(n));
		}
	}
}

The analysis incorrectly believes that n is assigned only once.

I noticed this by analogy to definite-assignment analysis:
The error duplicateInitializationOfFinalLocal() is triggered from 3 locations:
- SingleNameReference.analyseAssignment()
- FinallyFlowContext.complainOnDeferredChecks()
- LoopingFlowContext.complainOnDeferredFinalChecks()

Of these locations only the first resets IsEffectivelyFinal, whereas
all of them should consider to do so.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2238450</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-04-02 01:07:06 -0400</bug_when>
    <thetext>Jesper, please follow up. TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2238456</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-04-02 02:28:21 -0400</bug_when>
    <thetext>(In reply to comment #1)
&gt; Jesper, please follow up. TIA.

Let me know if you want me to help / step in.
Those deferred checks are an arduous business...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2252548</commentid>
    <comment_count>3</comment_count>
      <attachid>230491</attachid>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2013-05-06 04:37:25 -0400</bug_when>
    <thetext>Created attachment 230491
Attempted patch

This extends the final analysis in loops and finally blocks by adding effectively final variables to flowContext.recordSettingFinal, and then differentiating inside FinallyFlowContext and LoopingFlowContext.

There is still a problem with only one such error being reported per class. I guess this is because the error triggers an AbortException being throw. Is this really necessary?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2253301</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-05-07 08:14:55 -0400</bug_when>
    <thetext>I&apos;ll take a look, though it might be some days before I get to it...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2282239</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-07-09 08:16:44 -0400</bug_when>
    <thetext>Sorry, I meant to look into this much earlier.

While playing with the patch I&apos;m surprised to see how the reported error escalates:
- NameReference.checkEffectiveFinality() throws AbortMethod
- LambdaExpression.generateCode() converts this into throwing AbortType
Ergo: first error of this kind stops code generation for the entire type!! 
Further errors to be detected during codegen go unnoticed.
This doesn&apos;t look right to me.

The AbortMethod has been introduced via bug 382721, was that just a stop-gap measure or is there s.t. deeper for me to understand?

The conversion AbortMethod -&gt; AbortType is from bug 405067.
@Srikanth: do you have a comment on that?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2282245</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-07-09 08:26:52 -0400</bug_when>
    <thetext>Also, here&apos;s a test that&apos;s not analysed correctly:

	void test2() {
		int m;
		try {
		} finally {			
			m=2;
			executeLater(()-&gt; System.out.println(m));
			for (int i=0; i&lt;3; i++) {
				m = 3;
			}
		}
	}

With the patch I get: &quot;Variable m is required to be final or effectively final&quot; against the lambda body, but at that location we should be fine, actually.
This seems to be caused by the way how FlowContext.recordSettingFinal() traverses parents, which seems to be unsuitable for effectively final analysis.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2282594</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-07-10 01:16:16 -0400</bug_when>
    <thetext>(In reply to comment #5)

&gt; The AbortMethod has been introduced via bug 382721, was that just a stop-gap
&gt; measure or is there s.t. deeper for me to understand?

Not sure.

&gt; The conversion AbortMethod -&gt; AbortType is from bug 405067.
&gt; @Srikanth: do you have a comment on that?

Not sure again. See also https://bugs.eclipse.org/bugs/show_bug.cgi?id=406176</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2282595</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-07-10 01:17:13 -0400</bug_when>
    <thetext>(In reply to comment #7)

&gt; Not sure.

&gt; Not sure again. See also https://bugs.eclipse.org/bugs/show_bug.cgi?id=406176

I would treat any issue non-integral to the present subject in a follow up
bug.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2282617</commentid>
    <comment_count>9</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-07-10 03:44:54 -0400</bug_when>
    <thetext>(In reply to comment #6)
&gt; Also, here&apos;s a test that&apos;s not analysed correctly:
&gt; 
&gt; 	void test2() {
&gt; 		int m;
&gt; 		try {
&gt; 		} finally {			
&gt; 			m=2;
&gt; 			executeLater(()-&gt; System.out.println(m));
&gt; 			for (int i=0; i&lt;3; i++) {
&gt; 				m = 3;
&gt; 			}
&gt; 		}
&gt; 	}
&gt; 
&gt; With the patch I get: &quot;Variable m is required to be final or effectively
&gt; final&quot; against the lambda body, but at that location we should be fine,
&gt; actually.
&gt; This seems to be caused by the way how FlowContext.recordSettingFinal()
&gt; traverses parents, which seems to be unsuitable for effectively final
&gt; analysis.

Oops, I think I was blaming the wrong way.
However, removing the enclosing try-finally toggles the error,
which is not correct.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2286766</commentid>
    <comment_count>10</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-07-22 07:23:23 -0400</bug_when>
    <thetext>Jesper, OK to assign to Anirban to take this to closure so you can focus
exclusively on JEP 118 + 120 ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2288990</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-07-29 02:34:38 -0400</bug_when>
    <thetext>I&apos;ll assume the absence of objection implies consent. Anirban, please take this forward.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2298703</commentid>
    <comment_count>12</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-08-25 07:45:49 -0400</bug_when>
    <thetext>(In reply to comment #6)
&gt; Also, here&apos;s a test that&apos;s not analysed correctly:
&gt; 
&gt; 	void test2() {
&gt; 		int m;
&gt; 		try {
&gt; 		} finally {			
&gt; 			m=2;
&gt; 			executeLater(()-&gt; System.out.println(m));
&gt; 			for (int i=0; i&lt;3; i++) {
&gt; 				m = 3;
&gt; 			}
&gt; 		}
&gt; 	}
&gt; 
&gt; With the patch I get: &quot;Variable m is required to be final or effectively
&gt; final&quot; against the lambda body, but at that location we should be fine,
&gt; actually.
&gt; This seems to be caused by the way how FlowContext.recordSettingFinal()
&gt; traverses parents, which seems to be unsuitable for effectively final
&gt; analysis.

Stephan, what exactly did you have in mind ? I think this fuller snippet
below is erroneous. See that 8b100 also complains:

// --
interface I {
	void f();
}
public class X {
void test2() {
		int m;
		try {
		} finally {			
			m=2;
			executeLater(()-&gt; System.out.println(m));
			for (int i=0; i&lt;3; i++) {
				m = 3;
			}
		}
	}
	void executeLater(I i) {}
}
// --

X.java:10: error: local variables referenced from a lambda expression must be fi
nal or effectively final
                        executeLater(()-&gt; System.out.println(m));
                                                             ^
1 error</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2298704</commentid>
    <comment_count>13</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-08-25 07:50:33 -0400</bug_when>
    <thetext>(In reply to comment #12)

&gt; Stephan, what exactly did you have in mind ? I think this fuller snippet
&gt; below is erroneous. See that 8b100 also complains:

Sorry, reading comments piecemeal: I see that comment#9 already clarifies
the position wrt comment#6. However,

(In reply to comment #9)

&gt; Oops, I think I was blaming the wrong way.
&gt; However, removing the enclosing try-finally toggles the error,
&gt; which is not correct.

On HEAD of BETA_JAVA8, removing the try-finally still produces the error,
so I don&apos;t think there is an open issue here ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2298710</commentid>
    <comment_count>14</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-08-25 08:32:20 -0400</bug_when>
    <thetext>(In reply to comment #13)
&gt; On HEAD of BETA_JAVA8, removing the try-finally still produces the error,
&gt; so I don&apos;t think there is an open issue here ?

On HEAD of BETA_JAVA8 the following test produces one error instead of two on my machine:

public void testBug404657() {
	this.runNegativeTest(
		new String[] {
			&quot;X.java&quot;,
			&quot;public class X {\n&quot; +
			&quot;	void executeLater(Runnable r) { /*...*/ }&quot; +
			&quot;  void test1() {\n&quot; + 
			&quot;		int m;\n&quot; + 
			&quot;		try {\n&quot; + 
			&quot;		} finally {\n&quot; + 
			&quot;			m=2;\n&quot; + 
			&quot;			executeLater(()-&gt; System.out.println(\&quot;one\&quot;+m));\n&quot; + 
			&quot;			for (int i=0; i&lt;3; i++) {\n&quot; + 
			&quot;				m = 3;\n&quot; + 
			&quot;			}\n&quot; + 
			&quot;		}\n&quot; + 
			&quot;	}\n&quot; +
			&quot;  void test2() {\n&quot; + 
			&quot;		int m;\n&quot; + 
			&quot;			m=2;\n&quot; + 
			&quot;			executeLater(()-&gt; System.out.println(\&quot;two\&quot;+m));\n&quot; + 
			&quot;			for (int i=0; i&lt;3; i++) {\n&quot; + 
			&quot;				m = 3;\n&quot; + 
			&quot;			}\n&quot; + 
			&quot;	}\n&quot; +
			&quot;}\n&quot;,
		},
		&quot;----------\n&quot; + 
		&quot;1. ERROR in X.java (at line 7)\n&quot; + 
		&quot;	executeLater(()-&gt; System.out.println(\&quot;one\&quot;+m));\n&quot; + 
		&quot;	                                           ^\n&quot; + 
		&quot;Variable m is required to be final or effectively final\n&quot; + 
		&quot;----------\n&quot; + 
		&quot;2. ERROR in X.java (at line 16)\n&quot; + 
		&quot;	executeLater(()-&gt; System.out.println(\&quot;two\&quot;+m));\n&quot; + 
		&quot;	                                           ^\n&quot; + 
		&quot;Variable m is required to be final or effectively final\n&quot; + 
		&quot;----------\n&quot;);
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2298712</commentid>
    <comment_count>15</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-08-25 08:39:06 -0400</bug_when>
    <thetext>(In reply to comment #14)
&gt; (In reply to comment #13)
&gt; &gt; On HEAD of BETA_JAVA8, removing the try-finally still produces the error,
&gt; &gt; so I don&apos;t think there is an open issue here ?
&gt; 
&gt; On HEAD of BETA_JAVA8 the following test produces one error instead of two
&gt; on my machine:

Reproduced. Thanks, I suspect we abort code generation on first at a granularity
that inhibits the second error.

Anirban, if this hypothesis is correct, let us move this issue to a separate
follow up bug (please raise, TIA).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2298829</commentid>
    <comment_count>16</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-08-26 02:56:45 -0400</bug_when>
    <thetext>(In reply to comment #15)
&gt; (In reply to comment #14)
&gt; &gt; (In reply to comment #13)
&gt; &gt; &gt; On HEAD of BETA_JAVA8, removing the try-finally still produces the error,
&gt; &gt; &gt; so I don&apos;t think there is an open issue here ?
&gt; &gt; 
&gt; &gt; On HEAD of BETA_JAVA8 the following test produces one error instead of two
&gt; &gt; on my machine:
&gt; 
&gt; Reproduced. Thanks, I suspect we abort code generation on first at a
&gt; granularity
&gt; that inhibits the second error.

Sorry, guilty again of reading comments in piece meal. https://bugs.eclipse.org/bugs/show_bug.cgi?id=404657#c5 already provides
an analysis is what is happening.

Anirban, could you (a) bring the patch up to date (it does not apply cleanly)
and (b) org.eclipse.jdt.internal.compiler.ast.LambdaExpression.generateCode(ClassScope, ClassFile) make rethrow the AbortMethod instead of manufactutring an AbortType 
(c) run the tests and if all is well post a patch for review ? TIA,</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2300418</commentid>
    <comment_count>17</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-08-29 04:00:58 -0400</bug_when>
    <thetext>(In reply to comment #15)
&gt; (In reply to comment #14)
&gt; &gt; (In reply to comment #13)
&gt; &gt; &gt; On HEAD of BETA_JAVA8, removing the try-finally still produces the error,
&gt; &gt; &gt; so I don&apos;t think there is an open issue here ?
&gt; &gt; 
&gt; &gt; On HEAD of BETA_JAVA8 the following test produces one error instead of two
&gt; &gt; on my machine:
&gt; 
&gt; Reproduced. Thanks, I suspect we abort code generation on first at a
&gt; granularity
&gt; that inhibits the second error.
&gt; 
&gt; Anirban, if this hypothesis is correct, let us move this issue to a separate
&gt; follow up bug (please raise, TIA).

This is the same issue as https://bugs.eclipse.org/bugs/show_bug.cgi?id=406176,
so there is no need to generate a new bug for this. Let us close the present
bug by bringing Jesper&apos;s patch up to date and testing it.

Stephan, Anirban will repost Jesper&apos;s patch after merging it with the
latest changes. Is your review complete ? If so, could you mark the review
flag please ? Otherwise do you want to review afresh once Anirban reposts
a patch ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2300440</commentid>
    <comment_count>18</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-08-29 05:16:11 -0400</bug_when>
    <thetext>Mh, when I created the example in comment 6 I was searching for a witness to a problem I saw in FlowContext.recordSettingFinal(). Apparently, the witness which I found was a red herring, caused only by the AbortType mentioned before.
Since my witness doesn&apos;t show what it was intended to, I need to investigate more, whether the problem I saw in the code is real.

Ergo: my review is still incomplete. Actually, I&apos;d prefer to have the changes requested in comment 16 before continuing the review, OK?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2300513</commentid>
    <comment_count>19</comment_count>
      <attachid>234935</attachid>
    <who name="ANIRBAN CHAKRABORTY">anchakrk</who>
    <bug_when>2013-08-29 07:06:16 -0400</bug_when>
    <thetext>Created attachment 234935
Jesper&apos;s patch, cleaned

Hello,
This is cleaned and applicable version of the patch originally posted by Jesper.
This patch has some regression failures, though, in AssignmentTest (41, 42).

A subsequent patch from me will get those cleaned.

Thanks
Anirban</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2300514</commentid>
    <comment_count>20</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-08-29 07:11:35 -0400</bug_when>
    <thetext>(In reply to comment #18)

&gt; Ergo: my review is still incomplete. Actually, I&apos;d prefer to have the
&gt; changes requested in comment 16 before continuing the review, OK?

Discussing with Anirban the regressions seen by him, required me to look through
the patch - I can complete the review since it is still fresh in my memory.
I&apos;ll make a mental note of this and offload some other review in future to you :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2300758</commentid>
    <comment_count>21</comment_count>
      <attachid>234977</attachid>
    <who name="ANIRBAN CHAKRABORTY">anchakrk</who>
    <bug_when>2013-08-29 12:48:02 -0400</bug_when>
    <thetext>Created attachment 234977
Completion of this bug

Hello,
Please apply this over cleaned Jesper&apos;s patch.
Thanks
Anirban</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2300760</commentid>
    <comment_count>22</comment_count>
    <who name="ANIRBAN CHAKRABORTY">anchakrk</who>
    <bug_when>2013-08-29 12:49:52 -0400</bug_when>
    <thetext>This contribution complies with http://www.eclipse.org/legal/CoO.php</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2301081</commentid>
    <comment_count>23</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-08-30 00:50:07 -0400</bug_when>
    <thetext>(In reply to comment #19)
&gt; Created attachment 234935 [details]
&gt; Jesper&apos;s patch, cleaned
&gt; 
&gt; Hello,
&gt; This is cleaned and applicable version of the patch originally posted by
&gt; Jesper.
&gt; This patch has some regression failures, though, in AssignmentTest (41, 42).

Patch looks good bit for the issue Anirban discovered. Released here:
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=7736b79d5cddbdce7ca86cc5b0c7f1093a423d7e.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2301083</commentid>
    <comment_count>24</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-08-30 00:55:59 -0400</bug_when>
    <thetext>Released Anirban&apos;s fix here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=44977e3b03be3654979e5c18499b69a14e8712d9.

Thanks Jesper, Thanks Anirban</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>230491</attachid>
            <date>2013-05-06 04:37:00 -0400</date>
            <delta_ts>2013-05-06 04:37:25 -0400</delta_ts>
            <desc>Attempted patch</desc>
            <filename>bug404657.patch</filename>
            <type>text/plain</type>
            <size>10944</size>
            <attacher name="Jesper Moller">jesper</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRh
RXhwcmVzc2lvbnNUZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxl
ci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OZWdh
dGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCmluZGV4IGQwMGYwN2EuLjE3NmFiZDIgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRhRXhw
cmVzc2lvbnNUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGls
ZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVn
YXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YQpAQCAtMTUsNiArMTUsNyBAQAogICoJCQkJ
CQkJYnVnIDM4MjcwMSAtIFsxLjhdW2NvbXBpbGVyXSBJbXBsZW1lbnQgc2VtYW50aWMgYW5hbHlz
aXMgb2YgTGFtYmRhIGV4cHJlc3Npb25zICYgUmVmZXJlbmNlIGV4cHJlc3Npb24KICAqCQkJCQkJ
CWJ1ZyAzODI3MjEgLSBbMS44XVtjb21waWxlcl0gRWZmZWN0aXZlbHkgZmluYWwgdmFyaWFibGVz
IG5lZWRzIHNwZWNpYWwgdHJlYXRtZW50CiAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgQnVn
IDM4NDY4NyAtIFsxLjhdIFdpbGRjYXJkIHR5cGUgYXJndW1lbnRzIHNob3VsZCBiZSByZWplY3Rl
ZCBmb3IgbGFtYmRhIGFuZCByZWZlcmVuY2UgZXhwcmVzc2lvbnMKKyAqICAgICAgICAgICAgICAg
ICAgICAgICAgICBCdWcgNDA0NjU3IC0gWzEuOF1bY29tcGlsZXJdIEFuYWx5c2lzIGZvciBlZmZl
Y3RpdmVseSBmaW5hbCB2YXJpYWJsZXMgZmFpbHMgdG8gY29uc2lkZXIgbG9vcHMKICAqICAgICBT
dGVwaGFuIEhlcnJtYW5uIC0gQ29udHJpYnV0aW9uIGZvcgogICoJCQkJCQkJYnVnIDQwNDY0OSAt
IFsxLjhdW2NvbXBpbGVyXSBkZXRlY3QgaWxsZWdhbCByZWZlcmVuY2UgdG8gaW5kaXJlY3Qgb3Ig
cmVkdW5kYW50IHN1cGVyIHZpYSBJLnN1cGVyLm0oKSBzeW50YXgKICAqCQkJCQkJCWJ1ZyA0MDQ3
MjggLSBbMS44XU5QRSBvbiBRdWFsaWZpZWRTdXBlclJlZmVyZW5jZSBlcnJvcgpAQCAtNjUzNCw2
ICs2NTM1LDYzIEBAIHB1YmxpYyB2b2lkIHRlc3Q0MDY3NzMoKSB7CiAJCQljb21waWxlck9wdGlv
bnMgLyogY3VzdG9tIG9wdGlvbnMgKi8KIAkJKTsKIH0KKy8vaHR0cHM6Ly9idWdzLmVjbGlwc2Uu
b3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQwNDY1NyBbMS44XVtjb21waWxlcl0gQW5hbHlzaXMg
Zm9yIGVmZmVjdGl2ZWx5IGZpbmFsIHZhcmlhYmxlcyBmYWlscyB0byBjb25zaWRlciBsb29wcwor
cHVibGljIHZvaWQgdGVzdDQwNDY1N19maW5hbCgpIHsKKwkJdGhpcy5ydW5OZWdhdGl2ZVRlc3Qo
CisJCQluZXcgU3RyaW5nW10geworCQkJCQkiWC5qYXZhIiwgCisJCQkJCSJwdWJsaWMgY2xhc3Mg
WCB7XG4iICsgCisJCQkJCSIgdm9pZCBleGVjdXRlTGF0ZXIoUnVubmFibGUgcikgeyAvKiAuLi4g
Ki9cbiIgKyAKKwkJCQkJIiB9XG4iICsgCisJCQkJCSIgcHVibGljIGludCB0ZXN0RmluYWxseSgp
IHtcbiIgKyAKKwkJCQkJIiAgaW50IG47XG4iICsgCisJCQkJCSIgIHRyeSB7XG4iICsgCisJCQkJ
CSIgICBuID0gNDI7XG4iICsgCisJCQkJCSIgICAgZXhlY3V0ZUxhdGVyKCgpIC0+IFN5c3RlbS5v
dXQucHJpbnRsbihuKSk7IC8vIEVycm9yOiBuIGlzIG5vdCBlZmZlY3RpdmVseSBmaW5hbFxuIiAr
IAorCQkJCQkiICB9IGZpbmFsbHkge1xuIiArIAorCQkJCQkiICAgbiA9IDIzO1xuIiArIAorCQkJ
CQkiICB9XG4iICsgCisJCQkJCSIgIHJldHVybiBuO1xuIiArIAorCQkJCQkiIH1cbiIgKyAKKwkJ
CQkJIlxuIiArIAorCQkJCQkifVxuIiArIAorCQkJCQkiIgorCQkJfSwKKwkJCSItLS0tLS0tLS0t
XG4iICsgCisJCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDgpXG4iICsgCisJCQkiCWV4
ZWN1dGVMYXRlcigoKSAtPiBTeXN0ZW0ub3V0LnByaW50bG4obikpOyAvLyBFcnJvcjogbiBpcyBu
b3QgZWZmZWN0aXZlbHkgZmluYWxcbiIgKyAKKwkJCSIJICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICBeXG4iICsgCisJCQkiVmFyaWFibGUgbiBpcyByZXF1aXJlZCB0byBiZSBm
aW5hbCBvciBlZmZlY3RpdmVseSBmaW5hbFxuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIKKwkJKTsK
K30KKy8vaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQwNDY1
NyBbMS44XVtjb21waWxlcl0gQW5hbHlzaXMgZm9yIGVmZmVjdGl2ZWx5IGZpbmFsIHZhcmlhYmxl
cyBmYWlscyB0byBjb25zaWRlciBsb29wcworcHVibGljIHZvaWQgdGVzdDQwNDY1N19sb29wKCkg
eworCQl0aGlzLnJ1bk5lZ2F0aXZlVGVzdCgKKwkJCW5ldyBTdHJpbmdbXSB7CisJCQkJCSJYLmph
dmEiLCAKKwkJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKyAKKwkJCQkJIiB2b2lkIGV4ZWN1dGVM
YXRlcihSdW5uYWJsZSByKSB7IC8qIC4uLiAqL1xuIiArIAorCQkJCQkiIH1cbiIgKyAKKwkJCQkJ
IiBwdWJsaWMgdm9pZCB0ZXN0TG9vcCgpIHtcbiIgKyAKKwkJCQkJIiAgaW50IG47XG4iICsgCisJ
CQkJCSIgIGZvciAoaW50IGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4iICsgCisJCQkJCSIgICBuID0g
aTtcbiIgKyAKKwkJCQkJIiAgIGV4ZWN1dGVMYXRlcigoKSAtPiBTeXN0ZW0ub3V0LnByaW50bG4o
bikpOyAvLyBFcnJvcjogbiBpcyBub3QgZWZmZWN0aXZlbHkgZmluYWxcbiIgKyAKKwkJCQkJIiAg
fVxuIiArIAorCQkJCQkiIH1cbiIgKyAKKwkJCQkJIlxuIiArIAorCQkJCQkifVxuIiArIAorCQkJ
CQkiIgorCQkJfSwKKwkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkiMS4gRVJST1IgaW4gWC5qYXZh
IChhdCBsaW5lIDgpXG4iICsgCisJCQkiCWV4ZWN1dGVMYXRlcigoKSAtPiBTeXN0ZW0ub3V0LnBy
aW50bG4obikpOyAvLyBFcnJvcjogbiBpcyBub3QgZWZmZWN0aXZlbHkgZmluYWxcbiIgKyAKKwkJ
CSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXG4iICsgCisJCQkiVmFy
aWFibGUgbiBpcyByZXF1aXJlZCB0byBiZSBmaW5hbCBvciBlZmZlY3RpdmVseSBmaW5hbFxuIiAr
IAorCQkJIi0tLS0tLS0tLS1cbiIKKwkJKTsKK30KIHB1YmxpYyBzdGF0aWMgQ2xhc3MgdGVzdENs
YXNzKCkgewogCXJldHVybiBOZWdhdGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5jbGFzczsKIH0K
ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvU2luZ2xlTmFtZVJlZmVyZW5jZS5qYXZhIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FzdC9TaW5nbGVOYW1lUmVmZXJlbmNlLmphdmEKaW5kZXggNDc2NmY2ZC4uYjAzZmY3OSAxMDA2
NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2FzdC9TaW5nbGVOYW1lUmVmZXJlbmNlLmphdmEKKysrIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FzdC9TaW5nbGVOYW1lUmVmZXJlbmNlLmphdmEKQEAgLTE5LDYgKzE5LDcgQEAKICAqICAgICBK
ZXNwZXIgUyBNb2xsZXIgLSA8amVzcGVyQHNlbHNrYWJldC5vcmc+ICAgLSBDb250cmlidXRpb25z
IGZvciAKICAqICAgICAJCQkJCQkJYnVnIDM4MjcyMSAtIFsxLjhdW2NvbXBpbGVyXSBFZmZlY3Rp
dmVseSBmaW5hbCB2YXJpYWJsZXMgbmVlZHMgc3BlY2lhbCB0cmVhdG1lbnQKICAqCQkJCQkJCQli
dWcgMzc4Njc0IC0gIlRoZSBtZXRob2QgY2FuIGJlIGRlY2xhcmVkIGFzIHN0YXRpYyIgaXMgd3Jv
bmcKKyAqCQkJCQkJCQlidWcgNDA0NjU3IC0gWzEuOF1bY29tcGlsZXJdIEFuYWx5c2lzIGZvciBl
ZmZlY3RpdmVseSBmaW5hbCB2YXJpYWJsZXMgZmFpbHMgdG8gY29uc2lkZXIgbG9vcHMKICAqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqLwogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29t
cGlsZXIuYXN0OwogCkBAIC0xNDMsNyArMTQ0LDkgQEAgcHVibGljIEZsb3dJbmZvIGFuYWx5c2VB
c3NpZ25tZW50KEJsb2NrU2NvcGUgY3VycmVudFNjb3BlLCBGbG93Q29udGV4dCBmbG93Q29udGUK
IAkJCQkJY3VycmVudFNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmNhbm5vdFJlZmVyVG9Ob25FZmZl
Y3RpdmVseUZpbmFsT3V0ZXJMb2NhbChsb2NhbEJpbmRpbmcsIHRoaXMpOwogCQkJCX0KIAkJCX0K
LQkJCWlmIChpc0ZpbmFsKSB7CisJCQlpZiAoISBpc0ZpbmFsICYmIChsb2NhbEJpbmRpbmcudGFn
Qml0cyAmIFRhZ0JpdHMuSXNFZmZlY3RpdmVseUZpbmFsKSAhPSAwKSB7CisJCQkJZmxvd0NvbnRl
eHQucmVjb3JkU2V0dGluZ0ZpbmFsKGxvY2FsQmluZGluZywgdGhpcywgZmxvd0luZm8pOworCQkJ
fSBlbHNlIGlmIChpc0ZpbmFsKSB7CiAJCQkJaWYgKCh0aGlzLmJpdHMgJiBBU1ROb2RlLkRlcHRo
TUFTSykgPT0gMCkgewogCQkJCQkvLyB0b2xlcmF0ZSBhc3NpZ25tZW50IHRvIGZpbmFsIGxvY2Fs
IGluIHVucmVhY2hhYmxlIGNvZGUgKDQ1Njc0KQogCQkJCQlpZiAoKGlzUmVhY2hhYmxlICYmIGlz
Q29tcG91bmQpIHx8ICFsb2NhbEJpbmRpbmcuaXNCbGFua0ZpbmFsKCkpewpkaWZmIC0tZ2l0IGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2Zsb3cvRmluYWxseUZsb3dDb250ZXh0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvZmxvdy9GaW5hbGx5
Rmxvd0NvbnRleHQuamF2YQppbmRleCAyZWZjYmQ5Li41NWUxYjYyIDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvZmxvdy9GaW5hbGx5Rmxvd0NvbnRleHQuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvZmxvdy9GaW5hbGx5
Rmxvd0NvbnRleHQuamF2YQpAQCAtMSwxMCArMSwxNCBAQAogLyoqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMiBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVy
cy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVy
cy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFu
eWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2Yg
dGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhp
cyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKICAqIGh0dHA6Ly93d3cuZWNsaXBz
ZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCiAgKgorICogVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlv
biBvZiBhbiBlYXJseS1kcmFmdCBzcGVjaWZpY2F0aW9uIGRldmVsb3BlZCB1bmRlciB0aGUgSmF2
YQorICogQ29tbXVuaXR5IFByb2Nlc3MgKEpDUCkgYW5kIGlzIG1hZGUgYXZhaWxhYmxlIGZvciB0
ZXN0aW5nIGFuZCBldmFsdWF0aW9uIHB1cnBvc2VzCisgKiBvbmx5LiBUaGUgY29kZSBpcyBub3Qg
Y29tcGF0aWJsZSB3aXRoIGFueSBzcGVjaWZpY2F0aW9uIG9mIHRoZSBKQ1AuCisgKiAKICAqIENv
bnRyaWJ1dG9yczoKICAqICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBhbmQgaW1w
bGVtZW50YXRpb24KICAqICAgICBTdGVwaGFuIEhlcnJtYW5uIC0gQ29udHJpYnV0aW9ucyBmb3IK
QEAgLTE0LDYgKzE4LDggQEAKICAqCQkJCQkJCQlidWcgMzY1ODU5IC0gW2NvbXBpbGVyXVtudWxs
XSBkaXN0aW5ndWlzaCB3YXJuaW5ncyBiYXNlZCBvbiBmbG93IGFuYWx5c2lzIHZzLiBudWxsIGFu
bm90YXRpb25zCiAgKgkJCQkJCQkJYnVnIDM4NTYyNiAtIEBOb25OdWxsIGZhaWxzIGFjcm9zcyBs
b29wIGJvdW5kYXJpZXMKICAqCQkJCQkJCQlidWcgMzg4OTk2IC0gW2NvbXBpbGVyXVtyZXNvdXJj
ZV0gSW5jb3JyZWN0ICdwb3RlbnRpYWwgcmVzb3VyY2UgbGVhaycKKyAqICAgICBKZXNwZXIgUyBN
b2xsZXIgLSBDb250cmlidXRpb25zIGZvcgorICoJCQkJCQkJCWJ1ZyA0MDQ2NTcgLSBbMS44XVtj
b21waWxlcl0gQW5hbHlzaXMgZm9yIGVmZmVjdGl2ZWx5IGZpbmFsIHZhcmlhYmxlcyBmYWlscyB0
byBjb25zaWRlciBsb29wcwogICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCiBwYWNrYWdlIG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5mbG93OwogCkBAIC0yNCw2ICszMCw3IEBAIGlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkJsb2NrU2NvcGU7
CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5GaWVsZEJp
bmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5M
b2NhbFZhcmlhYmxlQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29t
cGlsZXIubG9va3VwLlNjb3BlOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21w
aWxlci5sb29rdXAuVGFnQml0czsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29t
cGlsZXIubG9va3VwLlR5cGVCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5h
bC5jb21waWxlci5sb29rdXAuVHlwZUlkczsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJu
YWwuY29tcGlsZXIubG9va3VwLlZhcmlhYmxlQmluZGluZzsKQEAgLTYwLDcgKzY3LDYgQEAgcHVi
bGljIGNsYXNzIEZpbmFsbHlGbG93Q29udGV4dCBleHRlbmRzIEZsb3dDb250ZXh0IHsKICAqIHJl
ZHVuZGFudGx5LgogICovCiBwdWJsaWMgdm9pZCBjb21wbGFpbk9uRGVmZXJyZWRDaGVja3MoRmxv
d0luZm8gZmxvd0luZm8sIEJsb2NrU2NvcGUgc2NvcGUpIHsKLQogCS8vIGNoZWNrIHJlZHVuZGFu
dCBmaW5hbCBhc3NpZ25tZW50cwogCWZvciAoaW50IGkgPSAwOyBpIDwgdGhpcy5hc3NpZ25Db3Vu
dDsgaSsrKSB7CiAJCVZhcmlhYmxlQmluZGluZyB2YXJpYWJsZSA9IHRoaXMuZmluYWxWYXJpYWJs
ZXNbaV07CkBAIC03NiwxMCArODIsMTMgQEAgcHVibGljIHZvaWQgY29tcGxhaW5PbkRlZmVycmVk
Q2hlY2tzKEZsb3dJbmZvIGZsb3dJbmZvLCBCbG9ja1Njb3BlIHNjb3BlKSB7CiAJCX0gZWxzZSB7
CiAJCQkvLyBmaW5hbCBsb2NhbCB2YXJpYWJsZQogCQkJaWYgKGZsb3dJbmZvLmlzUG90ZW50aWFs
bHlBc3NpZ25lZCgoTG9jYWxWYXJpYWJsZUJpbmRpbmcpdmFyaWFibGUpKSB7Ci0JCQkJY29tcGxh
aW5lZCA9IHRydWU7Ci0JCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZHVwbGljYXRlSW5pdGlh
bGl6YXRpb25PZkZpbmFsTG9jYWwoCi0JCQkJCShMb2NhbFZhcmlhYmxlQmluZGluZykgdmFyaWFi
bGUsCi0JCQkJCXRoaXMuZmluYWxBc3NpZ25tZW50c1tpXSk7CisJCQkJdmFyaWFibGUudGFnQml0
cyAmPSB+VGFnQml0cy5Jc0VmZmVjdGl2ZWx5RmluYWw7CisJCQkJaWYgKHZhcmlhYmxlLmlzRmlu
YWwoKSkgeworCQkJCQljb21wbGFpbmVkID0gdHJ1ZTsKKwkJCQkJc2NvcGUucHJvYmxlbVJlcG9y
dGVyKCkuZHVwbGljYXRlSW5pdGlhbGl6YXRpb25PZkZpbmFsTG9jYWwoCisJCQkJCQkoTG9jYWxW
YXJpYWJsZUJpbmRpbmcpIHZhcmlhYmxlLAorCQkJCQkJdGhpcy5maW5hbEFzc2lnbm1lbnRzW2ld
KTsKKwkJCQl9CiAJCQl9CiAJCX0KIAkJLy8gYW55IHJlZmVyZW5jZSByZXBvcnRlZCBhdCB0aGlz
IGxldmVsIGlzIHJlbW92ZWQgZnJvbSB0aGUgcGFyZW50IGNvbnRleHQKZGlmZiAtLWdpdCBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9mbG93L0xvb3BpbmdGbG93Q29udGV4dC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Zsb3cvTG9vcGluZ0Zs
b3dDb250ZXh0LmphdmEKaW5kZXggNWRjZjEzYS4uMjI0YzcxMSAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2Zsb3cvTG9vcGluZ0Zsb3dDb250ZXh0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Zsb3cvTG9vcGluZ0Zs
b3dDb250ZXh0LmphdmEKQEAgLTUsNiArNSwxMCBAQAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhp
cyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKICAqIGh0dHA6Ly93d3cuZWNsaXBz
ZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCiAgKiAKKyAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRp
b24gb2YgYW4gZWFybHktZHJhZnQgc3BlY2lmaWNhdGlvbiBkZXZlbG9wZWQgdW5kZXIgdGhlIEph
dmEKKyAqIENvbW11bml0eSBQcm9jZXNzIChKQ1ApIGFuZCBpcyBtYWRlIGF2YWlsYWJsZSBmb3Ig
dGVzdGluZyBhbmQgZXZhbHVhdGlvbiBwdXJwb3NlcworICogb25seS4gVGhlIGNvZGUgaXMgbm90
IGNvbXBhdGlibGUgd2l0aCBhbnkgc3BlY2lmaWNhdGlvbiBvZiB0aGUgSkNQLgorICogCiAgKiBD
b250cmlidXRvcnM6CiAgKiAgICAgSUJNIENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGlt
cGxlbWVudGF0aW9uCiAgKiAgICAgU3RlcGhhbiBIZXJybWFubiAtIGNvbnRyaWJ1dGlvbnMgZm9y
CkBAIC0xNiw2ICsyMCw4IEBACiAgKgkJCQkJCQkJYnVnIDM4NTYyNiAtIEBOb25OdWxsIGZhaWxz
IGFjcm9zcyBsb29wIGJvdW5kYXJpZXMKICAqCQkJCQkJCQlidWcgMzQ1MzA1IC0gW2NvbXBpbGVy
XVtudWxsXSBDb21waWxlciBtaXNpZGVudGlmaWVzIGEgY2FzZSBvZiAidmFyaWFibGUgY2FuIG9u
bHkgYmUgbnVsbCIKICAqCQkJCQkJCQlidWcgMzc2MjYzIC0gQm9ndXMgIlBvdGVudGlhbCBudWxs
IHBvaW50ZXIgYWNjZXNzIiB3YXJuaW5nCisgKiAgICAgSmVzcGVyIFMgTW9sbGVyIC0gY29udHJp
YnV0aW9ucyBmb3IKKyAqCQkJCQkJCQlidWcgNDA0NjU3IC0gWzEuOF1bY29tcGlsZXJdIEFuYWx5
c2lzIGZvciBlZmZlY3RpdmVseSBmaW5hbCB2YXJpYWJsZXMgZmFpbHMgdG8gY29uc2lkZXIgbG9v
cHMKICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqLwogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50
ZXJuYWwuY29tcGlsZXIuZmxvdzsKIApAQCAtMzEsNiArMzcsNyBAQCBpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5GaWVsZEJpbmRpbmc7CiBpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5Mb2NhbFZhcmlhYmxlQmluZGlu
ZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlJlZmVy
ZW5jZUJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxv
b2t1cC5TY29wZTsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9v
a3VwLlRhZ0JpdHM7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxv
b2t1cC5UeXBlQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIubG9va3VwLlR5cGVJZHM7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBp
bGVyLmxvb2t1cC5WYXJpYWJsZUJpbmRpbmc7CkBAIC0xMTgsMTAgKzEyNSwxMyBAQCBwdWJsaWMg
dm9pZCBjb21wbGFpbk9uRGVmZXJyZWRGaW5hbENoZWNrcyhCbG9ja1Njb3BlIHNjb3BlLCBGbG93
SW5mbyBmbG93SW5mbykgewogCQkJfQogCQl9IGVsc2UgewogCQkJaWYgKGZsb3dJbmZvLmlzUG90
ZW50aWFsbHlBc3NpZ25lZCgoTG9jYWxWYXJpYWJsZUJpbmRpbmcpdmFyaWFibGUpKSB7Ci0JCQkJ
Y29tcGxhaW5lZCA9IHRydWU7Ci0JCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZHVwbGljYXRl
SW5pdGlhbGl6YXRpb25PZkZpbmFsTG9jYWwoCi0JCQkJCShMb2NhbFZhcmlhYmxlQmluZGluZykg
dmFyaWFibGUsCi0JCQkJCXRoaXMuZmluYWxBc3NpZ25tZW50c1tpXSk7CisJCQkJdmFyaWFibGUu
dGFnQml0cyAmPSB+VGFnQml0cy5Jc0VmZmVjdGl2ZWx5RmluYWw7CisJCQkJaWYgKHZhcmlhYmxl
LmlzRmluYWwoKSkgeworCQkJCQljb21wbGFpbmVkID0gdHJ1ZTsKKwkJCQkJc2NvcGUucHJvYmxl
bVJlcG9ydGVyKCkuZHVwbGljYXRlSW5pdGlhbGl6YXRpb25PZkZpbmFsTG9jYWwoCisJCQkJCQko
TG9jYWxWYXJpYWJsZUJpbmRpbmcpIHZhcmlhYmxlLAorCQkJCQkJdGhpcy5maW5hbEFzc2lnbm1l
bnRzW2ldKTsKKwkJCQl9CiAJCQl9CiAJCX0KIAkJLy8gYW55IHJlZmVyZW5jZSByZXBvcnRlZCBh
dCB0aGlzIGxldmVsIGlzIHJlbW92ZWQgZnJvbSB0aGUgcGFyZW50IGNvbnRleHQgd2hlcmUgaXQK
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>234935</attachid>
            <date>2013-08-29 07:06:00 -0400</date>
            <delta_ts>2013-08-29 07:06:16 -0400</delta_ts>
            <desc>Jesper&apos;s patch, cleaned</desc>
            <filename>Bug-404659--Jesper.patch</filename>
            <type>text/plain</type>
            <size>12573</size>
            <attacher name="ANIRBAN CHAKRABORTY">anchakrk</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRh
RXhwcmVzc2lvbnNUZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxl
ci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OZWdh
dGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCmluZGV4IDZmZmE2MjAuLjM2MTU4YmEgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRhRXhw
cmVzc2lvbnNUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGls
ZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVn
YXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YQpAQCAtMTMsMTAgKzEzLDExIEBACiAgKiAg
ICAgSUJNIENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCiAgKiAg
ICAgSmVzcGVyIFMgTW9sbGVyIC0gQ29udHJpYnV0aW9ucyBmb3IKICAqCQkJCQkJCWJ1ZyAzODI3
MDEgLSBbMS44XVtjb21waWxlcl0gSW1wbGVtZW50IHNlbWFudGljIGFuYWx5c2lzIG9mIExhbWJk
YSBleHByZXNzaW9ucyAmIFJlZmVyZW5jZSBleHByZXNzaW9uCiAgKgkJCQkJCQlidWcgMzgyNzIx
IC0gWzEuOF1bY29tcGlsZXJdIEVmZmVjdGl2ZWx5IGZpbmFsIHZhcmlhYmxlcyBuZWVkcyBzcGVj
aWFsIHRyZWF0bWVudAogICogICAgICAgICAgICAgICAgICAgICAgICAgIEJ1ZyAzODQ2ODcgLSBb
MS44XSBXaWxkY2FyZCB0eXBlIGFyZ3VtZW50cyBzaG91bGQgYmUgcmVqZWN0ZWQgZm9yIGxhbWJk
YSBhbmQgcmVmZXJlbmNlIGV4cHJlc3Npb25zCisgKiAgICAgICAgICAgICAgICAgICAgICAgICAg
QnVnIDQwNDY1NyAtIFsxLjhdW2NvbXBpbGVyXSBBbmFseXNpcyBmb3IgZWZmZWN0aXZlbHkgZmlu
YWwgdmFyaWFibGVzIGZhaWxzIHRvIGNvbnNpZGVyIGxvb3BzCiAgKiAgICAgU3RlcGhhbiBIZXJy
bWFubiAtIENvbnRyaWJ1dGlvbiBmb3IKICAqCQkJCQkJCWJ1ZyA0MDQ2NDkgLSBbMS44XVtjb21w
aWxlcl0gZGV0ZWN0IGlsbGVnYWwgcmVmZXJlbmNlIHRvIGluZGlyZWN0IG9yIHJlZHVuZGFudCBz
dXBlciB2aWEgSS5zdXBlci5tKCkgc3ludGF4CiAgKgkJCQkJCQlidWcgNDA0NzI4IC0gWzEuOF1O
UEUgb24gUXVhbGlmaWVkU3VwZXJSZWZlcmVuY2UgZXJyb3IKICAqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqLwogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci5yZWdyZXNz
aW9uOwpAQCAtNzAwNCw5ICs3MDA1LDY2IEBACiAJCW51bGwgLyogbm8gZXh0cmEgY2xhc3MgbGli
cmFyaWVzICovLAogCQl0cnVlIC8qIGZsdXNoIG91dHB1dCBkaXJlY3RvcnkgKi8sCiAJCW51bGwg
LyogY3VzdG9tIG9wdGlvbnMgKi8KIAkpOwogfQorLy9odHRwczovL2J1Z3MuZWNsaXBzZS5vcmcv
YnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDA0NjU3IFsxLjhdW2NvbXBpbGVyXSBBbmFseXNpcyBmb3Ig
ZWZmZWN0aXZlbHkgZmluYWwgdmFyaWFibGVzIGZhaWxzIHRvIGNvbnNpZGVyIGxvb3BzCitwdWJs
aWMgdm9pZCB0ZXN0NDA0NjU3X2ZpbmFsKCkgeworCQl0aGlzLnJ1bk5lZ2F0aXZlVGVzdCgKKwkJ
CW5ldyBTdHJpbmdbXSB7CisJCQkJCSJYLmphdmEiLCAKKwkJCQkJInB1YmxpYyBjbGFzcyBYIHtc
biIgKyAKKwkJCQkJIiB2b2lkIGV4ZWN1dGVMYXRlcihSdW5uYWJsZSByKSB7IC8qIC4uLiAqL1xu
IiArIAorCQkJCQkiIH1cbiIgKyAKKwkJCQkJIiBwdWJsaWMgaW50IHRlc3RGaW5hbGx5KCkge1xu
IiArIAorCQkJCQkiICBpbnQgbjtcbiIgKyAKKwkJCQkJIiAgdHJ5IHtcbiIgKyAKKwkJCQkJIiAg
IG4gPSA0MjtcbiIgKyAKKwkJCQkJIiAgICBleGVjdXRlTGF0ZXIoKCkgLT4gU3lzdGVtLm91dC5w
cmludGxuKG4pKTsgLy8gRXJyb3I6IG4gaXMgbm90IGVmZmVjdGl2ZWx5IGZpbmFsXG4iICsgCisJ
CQkJCSIgIH0gZmluYWxseSB7XG4iICsgCisJCQkJCSIgICBuID0gMjM7XG4iICsgCisJCQkJCSIg
IH1cbiIgKyAKKwkJCQkJIiAgcmV0dXJuIG47XG4iICsgCisJCQkJCSIgfVxuIiArIAorCQkJCQki
XG4iICsgCisJCQkJCSJ9XG4iICsgCisJCQkJCSIiCisJCQl9LAorCQkJIi0tLS0tLS0tLS1cbiIg
KyAKKwkJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgOClcbiIgKyAKKwkJCSIJZXhlY3V0
ZUxhdGVyKCgpIC0+IFN5c3RlbS5vdXQucHJpbnRsbihuKSk7IC8vIEVycm9yOiBuIGlzIG5vdCBl
ZmZlY3RpdmVseSBmaW5hbFxuIiArIAorCQkJIgkgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIF5cbiIgKyAKKwkJCSJWYXJpYWJsZSBuIGlzIHJlcXVpcmVkIHRvIGJlIGZpbmFs
IG9yIGVmZmVjdGl2ZWx5IGZpbmFsXG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIgorCQkpOworfQor
Ly9odHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDA0NjU3IFsx
LjhdW2NvbXBpbGVyXSBBbmFseXNpcyBmb3IgZWZmZWN0aXZlbHkgZmluYWwgdmFyaWFibGVzIGZh
aWxzIHRvIGNvbnNpZGVyIGxvb3BzCitwdWJsaWMgdm9pZCB0ZXN0NDA0NjU3X2xvb3AoKSB7CisJ
CXRoaXMucnVuTmVnYXRpdmVUZXN0KAorCQkJbmV3IFN0cmluZ1tdIHsKKwkJCQkJIlguamF2YSIs
IAorCQkJCQkicHVibGljIGNsYXNzIFgge1xuIiArIAorCQkJCQkiIHZvaWQgZXhlY3V0ZUxhdGVy
KFJ1bm5hYmxlIHIpIHsgLyogLi4uICovXG4iICsgCisJCQkJCSIgfVxuIiArIAorCQkJCQkiIHB1
YmxpYyB2b2lkIHRlc3RMb29wKCkge1xuIiArIAorCQkJCQkiICBpbnQgbjtcbiIgKyAKKwkJCQkJ
IiAgZm9yIChpbnQgaSA9IDA7IGkgPCAzOyBpKyspIHtcbiIgKyAKKwkJCQkJIiAgIG4gPSBpO1xu
IiArIAorCQkJCQkiICAgZXhlY3V0ZUxhdGVyKCgpIC0+IFN5c3RlbS5vdXQucHJpbnRsbihuKSk7
IC8vIEVycm9yOiBuIGlzIG5vdCBlZmZlY3RpdmVseSBmaW5hbFxuIiArIAorCQkJCQkiICB9XG4i
ICsgCisJCQkJCSIgfVxuIiArIAorCQkJCQkiXG4iICsgCisJCQkJCSJ9XG4iICsgCisJCQkJCSIi
CisJCQl9LAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0
IGxpbmUgOClcbiIgKyAKKwkJCSIJZXhlY3V0ZUxhdGVyKCgpIC0+IFN5c3RlbS5vdXQucHJpbnRs
bihuKSk7IC8vIEVycm9yOiBuIGlzIG5vdCBlZmZlY3RpdmVseSBmaW5hbFxuIiArIAorCQkJIgkg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5cbiIgKyAKKwkJCSJWYXJpYWJs
ZSBuIGlzIHJlcXVpcmVkIHRvIGJlIGZpbmFsIG9yIGVmZmVjdGl2ZWx5IGZpbmFsXG4iICsgCisJ
CQkiLS0tLS0tLS0tLVxuIgorCQkpOworfQogcHVibGljIHN0YXRpYyBDbGFzcyB0ZXN0Q2xhc3Mo
KSB7CiAJcmV0dXJuIE5lZ2F0aXZlTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmNsYXNzOwogfQogfQpc
IE5vIG5ld2xpbmUgYXQgZW5kIG9mIGZpbGUKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvU2luZ2xl
TmFtZVJlZmVyZW5jZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9TaW5nbGVOYW1lUmVmZXJlbmNlLmphdmEK
aW5kZXggY2NmYTA4Ni4uZTFlMjVhMiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9TaW5nbGVOYW1l
UmVmZXJlbmNlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9TaW5nbGVOYW1lUmVmZXJlbmNlLmphdmEK
QEAgLTE4LDEwICsxOCwxMSBAQAogICoJCQkJCQkJCWJ1ZyAzODMzNjggLSBbY29tcGlsZXJdW251
bGxdIHN5bnRhY3RpYyBudWxsIGFuYWx5c2lzIGZvciBmaWVsZCByZWZlcmVuY2VzCiAgKgkJCQkJ
CQkJQnVnIDQxMjIwMyAtIFtjb21waWxlcl0gSW50ZXJuYWwgY29tcGlsZXIgZXJyb3I6IGphdmEu
bGFuZy5JbGxlZ2FsQXJndW1lbnRFeGNlcHRpb246IGluZm8gY2Fubm90IGJlIG51bGwKICAqICAg
ICBKZXNwZXIgUyBNb2xsZXIgLSA8amVzcGVyQHNlbHNrYWJldC5vcmc+ICAgLSBDb250cmlidXRp
b25zIGZvciAKICAqICAgICAJCQkJCQkJYnVnIDM4MjcyMSAtIFsxLjhdW2NvbXBpbGVyXSBFZmZl
Y3RpdmVseSBmaW5hbCB2YXJpYWJsZXMgbmVlZHMgc3BlY2lhbCB0cmVhdG1lbnQKICAqCQkJCQkJ
CQlidWcgMzc4Njc0IC0gIlRoZSBtZXRob2QgY2FuIGJlIGRlY2xhcmVkIGFzIHN0YXRpYyIgaXMg
d3JvbmcKKyAqCQkJCQkJCQlidWcgNDA0NjU3IC0gWzEuOF1bY29tcGlsZXJdIEFuYWx5c2lzIGZv
ciBlZmZlY3RpdmVseSBmaW5hbCB2YXJpYWJsZXMgZmFpbHMgdG8gY29uc2lkZXIgbG9vcHMKICAq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqLwogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwu
Y29tcGlsZXIuYXN0OwogCiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuQ2hh
ck9wZXJhdGlvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuQVNU
VmlzaXRvcjsKQEAgLTE0MywxMSArMTQ0LDEzIEBACiAJCQkJbG9jYWxCaW5kaW5nLnRhZ0JpdHMg
Jj0gflRhZ0JpdHMuSXNFZmZlY3RpdmVseUZpbmFsOwogCQkJCWlmICghaXNGaW5hbCAmJiAodGhp
cy5iaXRzICYgQVNUTm9kZS5Jc0NhcHR1cmVkT3V0ZXJMb2NhbCkgIT0gMCkgewogCQkJCQljdXJy
ZW50U2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuY2Fubm90UmVmZXJUb05vbkVmZmVjdGl2ZWx5Rmlu
YWxPdXRlckxvY2FsKGxvY2FsQmluZGluZywgdGhpcyk7CiAJCQkJfQogCQkJfQotCQkJaWYgKGlz
RmluYWwpIHsKKwkJCWlmICghIGlzRmluYWwgJiYgKGxvY2FsQmluZGluZy50YWdCaXRzICYgVGFn
Qml0cy5Jc0VmZmVjdGl2ZWx5RmluYWwpICE9IDApIHsKKwkJCQlmbG93Q29udGV4dC5yZWNvcmRT
ZXR0aW5nRmluYWwobG9jYWxCaW5kaW5nLCB0aGlzLCBmbG93SW5mbyk7CisJCQl9IGVsc2UgaWYg
KGlzRmluYWwpIHsKIAkJCQlpZiAoKHRoaXMuYml0cyAmIEFTVE5vZGUuRGVwdGhNQVNLKSA9PSAw
KSB7CiAJCQkJCS8vIHRvbGVyYXRlIGFzc2lnbm1lbnQgdG8gZmluYWwgbG9jYWwgaW4gdW5yZWFj
aGFibGUgY29kZSAoNDU2NzQpCiAJCQkJCWlmICgoaXNSZWFjaGFibGUgJiYgaXNDb21wb3VuZCkg
fHwgIWxvY2FsQmluZGluZy5pc0JsYW5rRmluYWwoKSl7CiAJCQkJCQljdXJyZW50U2NvcGUucHJv
YmxlbVJlcG9ydGVyKCkuY2Fubm90QXNzaWduVG9GaW5hbExvY2FsKGxvY2FsQmluZGluZywgdGhp
cyk7CiAJCQkJCX0gZWxzZSBpZiAoZmxvd0luZm8uaXNQb3RlbnRpYWxseUFzc2lnbmVkKGxvY2Fs
QmluZGluZykpIHsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9mbG93L0ZpbmFsbHlGbG93Q29udGV4dC5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2Zsb3cvRmluYWxseUZsb3dDb250ZXh0LmphdmEKaW5kZXggZDkxODg3OS4u
YjljZjYyNSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Zsb3cvRmluYWxseUZsb3dDb250ZXh0LmphdmEK
KysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2Zsb3cvRmluYWxseUZsb3dDb250ZXh0LmphdmEKQEAgLTMsMzAgKzMsMzcg
QEAKICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFu
eWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2Yg
dGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhp
cyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKICAqIGh0dHA6Ly93d3cuZWNsaXBz
ZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCiAgKgorICogVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlv
biBvZiBhbiBlYXJseS1kcmFmdCBzcGVjaWZpY2F0aW9uIGRldmVsb3BlZCB1bmRlciB0aGUgSmF2
YQorICogQ29tbXVuaXR5IFByb2Nlc3MgKEpDUCkgYW5kIGlzIG1hZGUgYXZhaWxhYmxlIGZvciB0
ZXN0aW5nIGFuZCBldmFsdWF0aW9uIHB1cnBvc2VzCisgKiBvbmx5LiBUaGUgY29kZSBpcyBub3Qg
Y29tcGF0aWJsZSB3aXRoIGFueSBzcGVjaWZpY2F0aW9uIG9mIHRoZSBKQ1AuCisgKiAKICAqIENv
bnRyaWJ1dG9yczoKICAqICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBhbmQgaW1w
bGVtZW50YXRpb24KICAqICAgICBTdGVwaGFuIEhlcnJtYW5uIC0gQ29udHJpYnV0aW9ucyBmb3IK
ICAqCQkJCQkJCQlidWcgMTg2MzQyIC0gW2NvbXBpbGVyXVtudWxsXSBVc2luZyBhbm5vdGF0aW9u
cyBmb3IgbnVsbCBjaGVja2luZwogICoJCQkJCQkJCWJ1ZyAzNjU1MTkgLSBlZGl0b3JpYWwgY2xl
YW51cCBhZnRlciBidWcgMTg2MzQyIGFuZCBidWcgMzY1Mzg3CiAgKgkJCQkJCQkJYnVnIDM2ODU0
NiAtIFtjb21waWxlcl1bcmVzb3VyY2VdIEF2b2lkIHJlbWFpbmluZyBmYWxzZSBwb3NpdGl2ZXMg
Zm91bmQgd2hlbiBjb21waWxpbmcgdGhlIEVjbGlwc2UgU0RLCiAgKgkJCQkJCQkJYnVnIDM2NTg1
OSAtIFtjb21waWxlcl1bbnVsbF0gZGlzdGluZ3Vpc2ggd2FybmluZ3MgYmFzZWQgb24gZmxvdyBh
bmFseXNpcyB2cy4gbnVsbCBhbm5vdGF0aW9ucwogICoJCQkJCQkJCWJ1ZyAzODU2MjYgLSBATm9u
TnVsbCBmYWlscyBhY3Jvc3MgbG9vcCBib3VuZGFyaWVzCiAgKgkJCQkJCQkJYnVnIDM4ODk5NiAt
IFtjb21waWxlcl1bcmVzb3VyY2VdIEluY29ycmVjdCAncG90ZW50aWFsIHJlc291cmNlIGxlYWsn
CiAgKgkJCQkJCQkJYnVnIDQwMzE0NyAtIFtjb21waWxlcl1bbnVsbF0gRlVQIG9mIGJ1ZyA0MDA3
NjE6IGNvbnNvbGlkYXRlIGludGVyYWN0aW9uIGJldHdlZW4gdW5ib3hpbmcsIE5QRSwgYW5kIGRl
ZmVycmVkIGNoZWNraW5nCisgKiAgICAgSmVzcGVyIFMgTW9sbGVyIC0gQ29udHJpYnV0aW9ucyBm
b3IKKyAqCQkJCQkJCQlidWcgNDA0NjU3IC0gWzEuOF1bY29tcGlsZXJdIEFuYWx5c2lzIGZvciBl
ZmZlY3RpdmVseSBmaW5hbCB2YXJpYWJsZXMgZmFpbHMgdG8gY29uc2lkZXIgbG9vcHMKICAqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqLwogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29t
cGlsZXIuZmxvdzsKIAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5h
c3QuQVNUTm9kZTsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0
LkV4cHJlc3Npb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFz
dC5SZWZlcmVuY2U7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxv
b2t1cC5CbG9ja1Njb3BlOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxl
ci5sb29rdXAuRmllbGRCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b21waWxlci5sb29rdXAuTG9jYWxWYXJpYWJsZUJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5TY29wZTsKK2ltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlRhZ0JpdHM7CiBpbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5UeXBlQmluZGluZzsKIGltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlR5cGVJZHM7CiBpbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5WYXJpYWJsZUJpbmRpbmc7CiAKIC8q
KgpAQCAtNzUsMTQgKzgyLDE3IEBACiAJCQkJc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZHVwbGlj
YXRlSW5pdGlhbGl6YXRpb25PZkJsYW5rRmluYWxGaWVsZCgoRmllbGRCaW5kaW5nKXZhcmlhYmxl
LCB0aGlzLmZpbmFsQXNzaWdubWVudHNbaV0pOwogCQkJfQogCQl9IGVsc2UgewogCQkJLy8gZmlu
YWwgbG9jYWwgdmFyaWFibGUKIAkJCWlmIChmbG93SW5mby5pc1BvdGVudGlhbGx5QXNzaWduZWQo
KExvY2FsVmFyaWFibGVCaW5kaW5nKXZhcmlhYmxlKSkgewotCQkJCWNvbXBsYWluZWQgPSB0cnVl
OwotCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmR1cGxpY2F0ZUluaXRpYWxpemF0aW9uT2ZG
aW5hbExvY2FsKAotCQkJCQkoTG9jYWxWYXJpYWJsZUJpbmRpbmcpIHZhcmlhYmxlLAotCQkJCQl0
aGlzLmZpbmFsQXNzaWdubWVudHNbaV0pOworCQkJCXZhcmlhYmxlLnRhZ0JpdHMgJj0gflRhZ0Jp
dHMuSXNFZmZlY3RpdmVseUZpbmFsOworCQkJCWlmICh2YXJpYWJsZS5pc0ZpbmFsKCkpIHsKKwkJ
CQkJY29tcGxhaW5lZCA9IHRydWU7CisJCQkJCXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmR1cGxp
Y2F0ZUluaXRpYWxpemF0aW9uT2ZGaW5hbExvY2FsKAorCQkJCQkJKExvY2FsVmFyaWFibGVCaW5k
aW5nKSB2YXJpYWJsZSwKKwkJCQkJCXRoaXMuZmluYWxBc3NpZ25tZW50c1tpXSk7CisJCQkJfQog
CQkJfQogCQl9CiAJCS8vIGFueSByZWZlcmVuY2UgcmVwb3J0ZWQgYXQgdGhpcyBsZXZlbCBpcyBy
ZW1vdmVkIGZyb20gdGhlIHBhcmVudCBjb250ZXh0CiAJCS8vIHdoZXJlIGl0IGNvdWxkIGFsc28g
YmUgcmVwb3J0ZWQgYWdhaW4KIAkJaWYgKGNvbXBsYWluZWQpIHsKZGlmZiAtLWdpdCBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9mbG93L0xvb3BpbmdGbG93Q29udGV4dC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Zsb3cvTG9vcGluZ0Zsb3dD
b250ZXh0LmphdmEKaW5kZXggMmJlZmI0NS4uYzM5MjdkMiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Zs
b3cvTG9vcGluZ0Zsb3dDb250ZXh0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Zsb3cvTG9vcGluZ0Zsb3dD
b250ZXh0LmphdmEKQEAgLTMsMTAgKzMsMTQgQEAKICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRo
aXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2
YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEu
MAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFi
bGUgYXQKICAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCiAgKiAK
KyAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQgc3BlY2lmaWNh
dGlvbiBkZXZlbG9wZWQgdW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0eSBQcm9jZXNzIChKQ1Ap
IGFuZCBpcyBtYWRlIGF2YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiBwdXJwb3Nl
cworICogb25seS4gVGhlIGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkgc3BlY2lmaWNh
dGlvbiBvZiB0aGUgSkNQLgorICogCiAgKiBDb250cmlidXRvcnM6CiAgKiAgICAgSUJNIENvcnBv
cmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCiAgKiAgICAgU3RlcGhhbiBI
ZXJybWFubiAtIGNvbnRyaWJ1dGlvbnMgZm9yCiAgKiAgICAgCQkJCQkJCWJ1ZyAzMzY0MjggLSBb
Y29tcGlsZXJdW251bGxdIGJvZ3VzIHdhcm5pbmcgInJlZHVuZGFudCBudWxsIGNoZWNrIiBpbiBj
b25kaXRpb24gb2YgZG8ge30gd2hpbGUoKSBsb29wCiAgKgkJCQkJCQkJYnVnIDE4NjM0MiAtIFtj
b21waWxlcl1bbnVsbF0gVXNpbmcgYW5ub3RhdGlvbnMgZm9yIG51bGwgY2hlY2tpbmcKQEAgLTE2
LDEwICsyMCwxMiBAQAogICoJCQkJCQkJCWJ1ZyAzODU2MjYgLSBATm9uTnVsbCBmYWlscyBhY3Jv
c3MgbG9vcCBib3VuZGFyaWVzCiAgKgkJCQkJCQkJYnVnIDM0NTMwNSAtIFtjb21waWxlcl1bbnVs
bF0gQ29tcGlsZXIgbWlzaWRlbnRpZmllcyBhIGNhc2Ugb2YgInZhcmlhYmxlIGNhbiBvbmx5IGJl
IG51bGwiCiAgKgkJCQkJCQkJYnVnIDM3NjI2MyAtIEJvZ3VzICJQb3RlbnRpYWwgbnVsbCBwb2lu
dGVyIGFjY2VzcyIgd2FybmluZwogICoJCQkJCQkJCWJ1ZyA0MDMxNDcgLSBbY29tcGlsZXJdW251
bGxdIEZVUCBvZiBidWcgNDAwNzYxOiBjb25zb2xpZGF0ZSBpbnRlcmFjdGlvbiBiZXR3ZWVuIHVu
Ym94aW5nLCBOUEUsIGFuZCBkZWZlcnJlZCBjaGVja2luZwogICoJCQkJCQkJCWJ1ZyA0MDYzODQg
LSBJbnRlcm5hbCBlcnJvciB3aXRoIEkyMDEzMDQxMworICogICAgIEplc3BlciBTIE1vbGxlciAt
IGNvbnRyaWJ1dGlvbnMgZm9yCisgKgkJCQkJCQkJYnVnIDQwNDY1NyAtIFsxLjhdW2NvbXBpbGVy
XSBBbmFseXNpcyBmb3IgZWZmZWN0aXZlbHkgZmluYWwgdmFyaWFibGVzIGZhaWxzIHRvIGNvbnNp
ZGVyIGxvb3BzCiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KIHBhY2thZ2Ugb3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvbXBpbGVyLmZsb3c7CiAKIGltcG9ydCBqYXZhLnV0aWwuQXJyYXlMaXN0
OwogCkBAIC0zMSwxMCArMzcsMTEgQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwu
Y29tcGlsZXIubG9va3VwLkJsb2NrU2NvcGU7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVy
bmFsLmNvbXBpbGVyLmxvb2t1cC5GaWVsZEJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5Mb2NhbFZhcmlhYmxlQmluZGluZzsKIGltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlJlZmVyZW5jZUJpbmRpbmc7
CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5TY29wZTsK
K2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlRhZ0JpdHM7
CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5UeXBlQmlu
ZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlR5
cGVJZHM7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5W
YXJpYWJsZUJpbmRpbmc7CiAKIC8qKgpAQCAtMTE4LDE0ICsxMjUsMTcgQEAKIAkJCQkJKEZpZWxk
QmluZGluZykgdmFyaWFibGUsCiAJCQkJCXRoaXMuZmluYWxBc3NpZ25tZW50c1tpXSk7CiAJCQl9
CiAJCX0gZWxzZSB7CiAJCQlpZiAoZmxvd0luZm8uaXNQb3RlbnRpYWxseUFzc2lnbmVkKChMb2Nh
bFZhcmlhYmxlQmluZGluZyl2YXJpYWJsZSkpIHsKLQkJCQljb21wbGFpbmVkID0gdHJ1ZTsKLQkJ
CQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5kdXBsaWNhdGVJbml0aWFsaXphdGlvbk9mRmluYWxM
b2NhbCgKLQkJCQkJKExvY2FsVmFyaWFibGVCaW5kaW5nKSB2YXJpYWJsZSwKLQkJCQkJdGhpcy5m
aW5hbEFzc2lnbm1lbnRzW2ldKTsKKwkJCQl2YXJpYWJsZS50YWdCaXRzICY9IH5UYWdCaXRzLklz
RWZmZWN0aXZlbHlGaW5hbDsKKwkJCQlpZiAodmFyaWFibGUuaXNGaW5hbCgpKSB7CisJCQkJCWNv
bXBsYWluZWQgPSB0cnVlOworCQkJCQlzY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5kdXBsaWNhdGVJ
bml0aWFsaXphdGlvbk9mRmluYWxMb2NhbCgKKwkJCQkJCShMb2NhbFZhcmlhYmxlQmluZGluZykg
dmFyaWFibGUsCisJCQkJCQl0aGlzLmZpbmFsQXNzaWdubWVudHNbaV0pOworCQkJCX0KIAkJCX0K
IAkJfQogCQkvLyBhbnkgcmVmZXJlbmNlIHJlcG9ydGVkIGF0IHRoaXMgbGV2ZWwgaXMgcmVtb3Zl
ZCBmcm9tIHRoZSBwYXJlbnQgY29udGV4dCB3aGVyZSBpdAogCQkvLyBjb3VsZCBhbHNvIGJlIHJl
cG9ydGVkIGFnYWluCiAJCWlmIChjb21wbGFpbmVkKSB7
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>234977</attachid>
            <date>2013-08-29 12:48:00 -0400</date>
            <delta_ts>2013-08-29 12:48:02 -0400</delta_ts>
            <desc>Completion of this bug</desc>
            <filename>Bug-404657.patch</filename>
            <type>text/plain</type>
            <size>1194</size>
            <attacher name="ANIRBAN CHAKRABORTY">anchakrk</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvU2luZ2xlTmFtZVJlZmVyZW5jZS5qYXZhIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FzdC9TaW5nbGVOYW1lUmVmZXJlbmNlLmphdmEKaW5kZXggZTFlMjVhMi4uMzFiOTg0MyAxMDA2
NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2FzdC9TaW5nbGVOYW1lUmVmZXJlbmNlLmphdmEKKysrIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FzdC9TaW5nbGVOYW1lUmVmZXJlbmNlLmphdmEKQEAgLTE0NCwxMSArMTQ0LDExIEBACiAJCQkJ
bG9jYWxCaW5kaW5nLnRhZ0JpdHMgJj0gflRhZ0JpdHMuSXNFZmZlY3RpdmVseUZpbmFsOwogCQkJ
CWlmICghaXNGaW5hbCAmJiAodGhpcy5iaXRzICYgQVNUTm9kZS5Jc0NhcHR1cmVkT3V0ZXJMb2Nh
bCkgIT0gMCkgewogCQkJCQljdXJyZW50U2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuY2Fubm90UmVm
ZXJUb05vbkVmZmVjdGl2ZWx5RmluYWxPdXRlckxvY2FsKGxvY2FsQmluZGluZywgdGhpcyk7CiAJ
CQkJfQogCQkJfQotCQkJaWYgKCEgaXNGaW5hbCAmJiAobG9jYWxCaW5kaW5nLnRhZ0JpdHMgJiBU
YWdCaXRzLklzRWZmZWN0aXZlbHlGaW5hbCkgIT0gMCkgeworCQkJaWYgKCEgaXNGaW5hbCAmJiAo
bG9jYWxCaW5kaW5nLnRhZ0JpdHMgJiBUYWdCaXRzLklzRWZmZWN0aXZlbHlGaW5hbCkgIT0gMCAm
JiAobG9jYWxCaW5kaW5nLnRhZ0JpdHMgJiBUYWdCaXRzLklzQXJndW1lbnQpID09IDApIHsKIAkJ
CQlmbG93Q29udGV4dC5yZWNvcmRTZXR0aW5nRmluYWwobG9jYWxCaW5kaW5nLCB0aGlzLCBmbG93
SW5mbyk7CiAJCQl9IGVsc2UgaWYgKGlzRmluYWwpIHsKIAkJCQlpZiAoKHRoaXMuYml0cyAmIEFT
VE5vZGUuRGVwdGhNQVNLKSA9PSAwKSB7CiAJCQkJCS8vIHRvbGVyYXRlIGFzc2lnbm1lbnQgdG8g
ZmluYWwgbG9jYWwgaW4gdW5yZWFjaGFibGUgY29kZSAoNDU2NzQpCiAJCQkJCWlmICgoaXNSZWFj
aGFibGUgJiYgaXNDb21wb3VuZCkgfHwgIWxvY2FsQmluZGluZy5pc0JsYW5rRmluYWwoKSl7
</data>
<flag name="review"
          id="59216"
          type_id="6"
          status="?"
          setter="anchakrk"
    />
          </attachment>
      

    </bug>

</bugzilla>