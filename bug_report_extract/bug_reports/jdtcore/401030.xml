<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>401030</bug_id>
          
          <creation_ts>2013-02-17 21:54:00 -0500</creation_ts>
          <short_desc>[1.8][null] Null analysis support for lambda methods.</short_desc>
          <delta_ts>2013-02-28 11:27:13 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2217834</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-17 21:54:34 -0500</bug_when>
    <thetext>BETA_JAVA8:

This may be broken. 

LambdaExpression.resolveType is an amalgam of 

MethodScope.createMethod
SourceTypeBinding.resolveTypesFor
AbstractMethodDeclaration.resolve

I may not have hooked up all portions needed for null inheritance/analysis
since some of this code was too dependent on the method binding having an
associated AbstractMethodDeclaration.

In particular, the call to SourceTypeBinding.createArgumentBindings is
not there.

Please see Scope.isLambdaScope, Scope.isLambdaSubscope, scope.namedMethodScope
et al which may help with an alternate implementation.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2217835</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-17 21:55:51 -0500</bug_when>
    <thetext>Stephan, if this calls for restructuring LambdaExpression type, please
request review so I can be sure the changes are in line with others in
pipeline - TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2218402</commentid>
    <comment_count>2</comment_count>
      <attachid>227227</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-02-19 03:20:29 -0500</bug_when>
    <thetext>Created attachment 227227
work in progress</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2218403</commentid>
    <comment_count>3</comment_count>
      <attachid>227228</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-02-19 03:20:33 -0500</bug_when>
    <thetext>Created attachment 227228
mylyn/context/zip</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2218407</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-02-19 03:27:16 -0500</bug_when>
    <thetext>(In reply to comment #2)
&gt; Created attachment 227227
&gt; work in progress

With this patch the signature of a lambda is wired to any null annotations on the implemented SAM type.

Up-to this point I can well work with the existing structure of LambdaExpression and friends.
Still I modified that code to make it easier to compare this code to the various origins where bits and pieces have been copied from:
- revert creative naming
- restore original order of code blocks (concerns the block dealing with declared exceptions)
- add code comments mentioning correspondence to similar code for methods
- added TODOs for sections that were omitted during copy&amp;paste but might be relevant</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2218533</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-19 07:04:05 -0500</bug_when>
    <thetext>(In reply to comment #4)

&gt; - added TODOs for sections that were omitted during copy&amp;paste but might be
&gt; relevant

For the record, here are the comments on the two TODOs:

(1) Erasure is not allowed in ascertainment of parameter identity.
Per 15.27.3:

A lambda expression is congruent with a function descriptor if the 
following are true:

The number of lambda parameters is the same as the number of parameter 
types of the descriptor. If the lambda parameters have explicitly-declared 
types, these types are the same as the parameter types of the descriptor.
This came up earlier in https://bugs.eclipse.org/bugs/show_bug.cgi?id=382701#c41
and Jesper dug up the citation.

(2) Because of (1) we must not issue raw type usage warnings. If raw types
were inadvertently used, it would trigger a compile error anyway. If they
are deliberately used to match the descriptor&apos;s rawness, a warning would
not be actionable and so would be wrong.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2218535</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-02-19 07:10:51 -0500</bug_when>
    <thetext>(In reply to comment #5)
&gt; (In reply to comment #4)
&gt; 
&gt; &gt; - added TODOs for sections that were omitted during copy&amp;paste but might be
&gt; &gt; relevant
&gt; 
&gt; For the record, here are the comments on the two TODOs:

Thanks for clarification.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2221800</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-02-25 16:46:29 -0500</bug_when>
    <thetext>I decided to let lambdas be unaffected by any nullness default, because the lambda itself does never define a contract, only the underlying SAM can do so.
At the flip-side of this coin, I made lambdas inherit the SAM&apos;s null annotation independent of the compiler option which controls this part for regular methods.
Practically this means that lambdas will not normally have null annotations of their own, but are required to implement the SAM&apos;s null contract.

Technically, this implies that lambdas are not handled by ImplicitNullAnnotationVerifier, but instead a much simplified version is given in LambdaExpression#mergeParameterNullAnnotations().

For regular methods, null annotations have to be resolved and interpreted as early as STB.resolveTypesFor() because after that call, message sends against a given message already needed to know about these null annotations. For lambdas this is not an issue as there are no direct callers. Hence it is safe to do all the resolving during LambdaExpression#resolveType().</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2221803</commentid>
    <comment_count>8</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-02-25 16:52:48 -0500</bug_when>
    <thetext>Released via commit de85d73a10e0280a45c9d9fcbbd2b35068e06127.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2221819</commentid>
    <comment_count>9</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-25 18:22:40 -0500</bug_when>
    <thetext>Do we need any analysis for reference expressions ? Once the single compile
time declaration that corresponds to the reference expression is known, does
any contract specified by the descriptor be checked with the chosen method
for conflicting annotations ? (line 221 in ReferenceExpression.java)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2222188</commentid>
    <comment_count>10</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-02-26 12:35:47 -0500</bug_when>
    <thetext>While debugging some other code, I noticed that NPEs were getting
triggered by ReturnStatement.checkAgainstNullAnnotation. This method
has some resilience to catch these and swallow them, but for lambda
returns, this will always trigger an NPE since the reference context
associated with a lambda is not an AMD, so scope.methodScope().referenceMethod()
call will return null.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2223718</commentid>
    <comment_count>11</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-02-28 05:22:57 -0500</bug_when>
    <thetext>(In reply to comment #10)
&gt; While debugging some other code, I noticed that NPEs were getting
&gt; triggered by ReturnStatement.checkAgainstNullAnnotation. This method
&gt; has some resilience to catch these and swallow them, but for lambda
&gt; returns, this will always trigger an NPE since the reference context
&gt; associated with a lambda is not an AMD, so scope.methodScope().referenceMethod()
&gt; call will return null.

Very good catch, thanks.
For the issue at hand this is easily fixed - finally I understand the significance of your reference to Scope.isLambdaScope().
To make things still simpler I&apos;m introducing a MethodScope.getReferenceMethodBinding() to return the appropriate binding for both cases.
I&apos;m taking the opportunity to check other callers of MethodScope.referenceMethod(), if any of those should benefit from the same.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2223738</commentid>
    <comment_count>12</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-02-28 06:13:34 -0500</bug_when>
    <thetext>(In reply to comment #11)
&gt; I&apos;m taking the opportunity to check other callers of
&gt; MethodScope.referenceMethod(), if any of those should benefit from the same.

I found one more occurrence where this is relevant:

Constructor of LocalTypeBinding:
Currently a local class inside a lambda generates a bogus EnclosingMethod attribute, which in fact refers to the enclosing class.
Fixed by using the new MethodScope.getReferenceMethodBinding() also in this location

For one location I couldn&apos;t easily see what&apos;s needed:
HandleFactory.createElement(Scope, int, ICompilationUnit, HashSet, HashMap)

All other callers look good to me.

Running the tests on my patch now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2223784</commentid>
    <comment_count>13</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-02-28 07:57:42 -0500</bug_when>
    <thetext>Fix for ReturnStatement (with similar fix in LocalTypeBinding) has been released via commit 7f980ceab757037c68fa499102c3002c2efaa926.

I still need to ponder on comment 9.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2223959</commentid>
    <comment_count>14</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-02-28 11:27:13 -0500</bug_when>
    <thetext>(In reply to comment #13)
&gt; I still need to ponder on comment 9.

I moved that to a bug of its own (Bug 402028), at what point this bug is ready again for closing.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>227227</attachid>
            <date>2013-02-19 03:20:00 -0500</date>
            <delta_ts>2013-02-19 03:20:29 -0500</delta_ts>
            <desc>work in progress</desc>
            <filename>clipboard.txt</filename>
            <type>text/plain</type>
            <size>19104</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxBbm5vdGF0aW9u
VGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbEFubm90YXRpb25U
ZXN0LmphdmEKaW5kZXggNTI5NzllMy4uMDNkZTU1YiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Nv
bXBpbGVyL3JlZ3Jlc3Npb24vTnVsbEFubm90YXRpb25UZXN0LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3Rz
L2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbEFubm90YXRpb25UZXN0LmphdmEKQEAgLTE3LDYgKzE3
LDcgQEAKIGltcG9ydCBqdW5pdC5mcmFtZXdvcmsuVGVzdDsKIAogaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5jb3JlLkphdmFDb3JlOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21w
aWxlci5jbGFzc2ZtdC5DbGFzc0ZpbGVDb25zdGFudHM7CiAKIC8vIHNlZSBidWcgMTg2MzQyIC0g
W2NvbXBpbGVyXVtudWxsXSBVc2luZyBhbm5vdGF0aW9ucyBmb3IgbnVsbCBjaGVja2luZwogcHVi
bGljIGNsYXNzIE51bGxBbm5vdGF0aW9uVGVzdCBleHRlbmRzIEFic3RyYWN0TnVsbEFubm90YXRp
b25UZXN0IHsKQEAgLTI4LDcgKzI5LDcgQEAKIC8vIFN0YXRpYyBpbml0aWFsaXplciB0byBzcGVj
aWZ5IHRlc3RzIHN1YnNldCB1c2luZyBURVNUU18qIHN0YXRpYyB2YXJpYWJsZXMKIC8vIEFsbCBz
cGVjaWZpZWQgdGVzdHMgd2hpY2ggZG8gbm90IGJlbG9uZyB0byB0aGUgY2xhc3MgYXJlIHNraXBw
ZWQuLi4KIHN0YXRpYyB7Ci0vLwkJVEVTVFNfTkFNRVMgPSBuZXcgU3RyaW5nW10geyAidGVzdF9w
YXJhbWV0ZXJfc3BlY2lmaWNhdGlvbl9pbmhlcml0YW5jZV8wMSIgfTsKKy8vCQlURVNUU19OQU1F
UyA9IG5ldyBTdHJpbmdbXSB7ICJ0ZXN0TGFtYmRhXzAiIH07CiAvLwkJVEVTVFNfTlVNQkVSUyA9
IG5ldyBpbnRbXSB7IDU2MSB9OwogLy8JCVRFU1RTX1JBTkdFID0gbmV3IGludFtdIHsgMSwgMjA0
OSB9OwogfQpAQCAtNTc3Miw2ICs1NzczLDEyMiBAQAogCQkiCSAgICAgIF5eXl5cbiIgKyAKIAkJ
Ik51bGwgdHlwZSBtaXNtYXRjaDogcmVxdWlyZWQgXCdATm9uTnVsbCBPYmplY3RcJyBidXQgdGhl
IHByb3ZpZGVkIHZhbHVlIGlzIG51bGxcbiIgKyAKIAkJIi0tLS0tLS0tLS1cbiIpOyAKLQl9Cit9
CiAKKy8vIExhbWJkYSB3aXRoIGVsaWRlZCBhcmdzIGluaGVyaXRzIG51bGwgY29udHJhY3QgZnJv
bSB0aGUgc3VwZXIgbWV0aG9kCitwdWJsaWMgdm9pZCB0ZXN0TGFtYmRhXzAxKCkgeworCWlmICh0
aGlzLmNvbXBsaWFuY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84KSB7CisJCU1h
cCBjdXN0b21PcHRpb25zID0gZ2V0Q29tcGlsZXJPcHRpb25zKCk7CisJCXJ1bk5lZ2F0aXZlVGVz
dFdpdGhMaWJzKAorCQkJbmV3IFN0cmluZ1tdIHsKKwkJCQkiSVNBTS5qYXZhIiwKKwkJCQkiaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uLio7XG4iICsKKwkJCQkicHVibGljIGludGVy
ZmFjZSBJU0FNIHtcbiIgKworCQkJCSIJQE5vbk51bGwgU3RyaW5nIHRvU3RyaW5nKEBOb25OdWxs
IFN0cmluZyBwcmVmaXgsIEBOdWxsYWJsZSBPYmplY3Qgbyk7XG4iICsKKwkJCQkifVxuIiwKKwkJ
CQkiWC5qYXZhIiwKKwkJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkJIgl2b2lkIHRlc3Qo
KSB7XG4iICsKKwkJCQkiCQlJU0FNIHByaW50ZXIgPSAocCxvKSAtPiBwLmNvbmNhdChvLnRvU3Ry
aW5nKCkpO1xuIiArCisJCQkJIgl9XG4iICsKKwkJCQkifVxuIgorCQkJfSwgCisJCQljdXN0b21P
cHRpb25zLAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCSIxLiBXQVJOSU5HIGluIFguamF2YSAo
YXQgbGluZSAzKVxuIiArIAorCQkJIglJU0FNIHByaW50ZXIgPSAocCxvKSAtPiBwLmNvbmNhdChv
LnRvU3RyaW5nKCkpO1xuIiArIAorCQkJIgkgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCQkiTnVsbCB0eXBlIHNhZmV0eTogVGhlIGV4cHJlc3Np
b24gb2YgdHlwZSBTdHJpbmcgbmVlZHMgdW5jaGVja2VkIGNvbnZlcnNpb24gdG8gY29uZm9ybSB0
byBcJ0BOb25OdWxsIFN0cmluZ1wnXG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJIjIu
IEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAzKVxuIiArIAorCQkJIglJU0FNIHByaW50ZXIgPSAo
cCxvKSAtPiBwLmNvbmNhdChvLnRvU3RyaW5nKCkpO1xuIiArIAorCQkJIgkgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICBeXG4iICsgCisJCQkiUG90ZW50aWFsIG51bGwgcG9pbnRlciBh
Y2Nlc3M6IFRoZSB2YXJpYWJsZSBvIG1heSBiZSBudWxsIGF0IHRoaXMgbG9jYXRpb25cbiIgKyAK
KwkJCSItLS0tLS0tLS0tXG4iKTsKKwl9Cit9CisKKy8vIExhbWJkYSB3aXRoIGRlY2xhcmVkIGFy
Z3MgdmlvbGF0ZXMgbnVsbCBjb250cmFjdCBvZiBzdXBlcgorcHVibGljIHZvaWQgdGVzdExhbWJk
YV8wMigpIHsKKwlpZiAodGhpcy5jb21wbGlhbmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRz
LkpESzFfOCkgeworCQlNYXAgY3VzdG9tT3B0aW9ucyA9IGdldENvbXBpbGVyT3B0aW9ucygpOwor
CQlydW5OZWdhdGl2ZVRlc3RXaXRoTGlicygKKwkJCW5ldyBTdHJpbmdbXSB7CisJCQkJIklTQU0u
amF2YSIsCisJCQkJImltcG9ydCBvcmcuZWNsaXBzZS5qZHQuYW5ub3RhdGlvbi4qO1xuIiArCisJ
CQkJInB1YmxpYyBpbnRlcmZhY2UgSVNBTSB7XG4iICsKKwkJCQkiCXZvaWQgcHJvY2VzcyhATm9u
TnVsbCBPYmplY3Qgbm4sIEBOdWxsYWJsZSBPYmplY3QgbiwgT2JqZWN0IHUpO1xuIiArCisJCQkJ
In1cbiIsCisJCQkJIlguamF2YSIsCisJCQkJImltcG9ydCBvcmcuZWNsaXBzZS5qZHQuYW5ub3Rh
dGlvbi4qO1xuIiArCisJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJCSIJdm9pZCB0ZXN0
KCkge1xuIiArCisJCQkJCQkvLyB0cnkgdG8gb3ZlcnJpZGUsIGlsbGVnYWwgZXhjZXB0IGZvciB1
bmNoYW5nZWQgbzE6CisJCQkJIgkJSVNBTSBwcmludGVyID0gKEBOb25OdWxsICBPYmplY3QgbzEs
IEBOb25OdWxsIAlPYmplY3QgbzIsIEBOb25OdWxsCSBPYmplY3QgbzMpIC0+IFN5c3RlbS5vdXQu
cHJpbnRsbigyKTtcbiIgKworCQkJCSIJfVxuIiArCisJCQkJIn1cbiIKKwkJCX0sIAorCQkJY3Vz
dG9tT3B0aW9ucywKKwkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkiMS4gRVJST1IgaW4gWC5qYXZh
IChhdCBsaW5lIDQpXG4iICsgCisJCQkiCUlTQU0gcHJpbnRlciA9IChATm9uTnVsbCAgT2JqZWN0
IG8xLCBATm9uTnVsbCAJT2JqZWN0IG8yLCBATm9uTnVsbAkgT2JqZWN0IG8zKSAtPiBTeXN0ZW0u
b3V0LnByaW50bG4oMik7XG4iICsgCisJCQkiCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCQkiSWxsZWdhbCByZWRlZmluaXRpb24g
b2YgcGFyYW1ldGVyIG8yLCBpbmhlcml0ZWQgbWV0aG9kIGZyb20gSVNBTSBkZWNsYXJlcyB0aGlz
IHBhcmFtZXRlciBhcyBATnVsbGFibGVcbiIgKyAKKwkJCSItLS0tLS0tLS0tXG4iICsgCisJCQki
Mi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDQpXG4iICsgCisJCQkiCUlTQU0gcHJpbnRlciA9
IChATm9uTnVsbCAgT2JqZWN0IG8xLCBATm9uTnVsbCAJT2JqZWN0IG8yLCBATm9uTnVsbAkgT2Jq
ZWN0IG8zKSAtPiBTeXN0ZW0ub3V0LnByaW50bG4oMik7XG4iICsgCisJCQkiCSAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAJICAgICAgICAgICBeXl5eXl5eXl5e
Xl5eXl5eXG4iICsgCisJCQkiSWxsZWdhbCByZWRlZmluaXRpb24gb2YgcGFyYW1ldGVyIG8zLCBp
bmhlcml0ZWQgbWV0aG9kIGZyb20gSVNBTSBkb2VzIG5vdCBjb25zdHJhaW4gdGhpcyBwYXJhbWV0
ZXJcbiIgKyAKKwkJCSItLS0tLS0tLS0tXG4iKTsKKwl9Cit9CisKKy8vIExhbWJkYSB3aXRoIGRl
Y2xhcmVkIGFyZ3MgaW5oZXJpdHMgLyBtb2RpZmllcyBjb250cmFjdCBvZiBzdXBlcgorcHVibGlj
IHZvaWQgdGVzdExhbWJkYV8wMygpIHsKKwlpZiAodGhpcy5jb21wbGlhbmNlTGV2ZWwgPj0gQ2xh
c3NGaWxlQ29uc3RhbnRzLkpESzFfOCkgeworCQlNYXAgY3VzdG9tT3B0aW9ucyA9IGdldENvbXBp
bGVyT3B0aW9ucygpOworCQlydW5OZWdhdGl2ZVRlc3RXaXRoTGlicygKKwkJCW5ldyBTdHJpbmdb
XSB7CisJCQkJIklTQU0uamF2YSIsCisJCQkJImltcG9ydCBvcmcuZWNsaXBzZS5qZHQuYW5ub3Rh
dGlvbi4qO1xuIiArCisJCQkJInB1YmxpYyBpbnRlcmZhY2UgSVNBTSB7XG4iICsKKwkJCQkiCXZv
aWQgcHJvY2VzcyhATm9uTnVsbCBPYmplY3Qgbm4sIEBOdWxsYWJsZSBPYmplY3QgbiwgT2JqZWN0
IHUpO1xuIiArCisJCQkJIn1cbiIsCisJCQkJIlguamF2YSIsCisJCQkJImltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuYW5ub3RhdGlvbi4qO1xuIiArCisJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKwor
CQkJCSIJdm9pZCB0ZXN0KCkge1xuIiArCisJCQkJCQkvLyBmaWxsLWluIGFsbCBmcm9tIHN1cGVy
OgorCQkJCSIJCUlTQU0gcHJpbnRlcjEgPSAoT2JqZWN0IAkJICBvMSwgCQkJT2JqZWN0IG8yLCAJ
CQkgT2JqZWN0IG8zKSBcbiIgKworCQkJCSIJCQkJCQkJLT4gU3lzdGVtLm91dC5wcmludGxuKG8x
LnRvU3RyaW5nKCkrbzIudG9TdHJpbmcoKStvMy50b1N0cmluZygpKTtcbiIgKworCQkJCQkJLy8g
bGVnYWwgb3ZlcnJpZGVzOiAoaG93ZXZlciwgQE5vbk51bGwgLT4gQE51bGxhYmxlIGlzIHByb2Jh
Ymx5IG5vbnNlbnNlKQorCQkJCSIJCUlTQU0gcHJpbnRlcjMgPSAoQE51bGxhYmxlIE9iamVjdCBv
MSwgQE51bGxhYmxlIE9iamVjdCBvMiwgQE51bGxhYmxlIE9iamVjdCBvMykgXG4iICsKKwkJCQki
CQkJCQkJCS0+IFN5c3RlbS5vdXQucHJpbnRsbihvMS50b1N0cmluZygpK28yLnRvU3RyaW5nKCkr
bzMudG9TdHJpbmcoKSk7XG4iICsKKwkJCQkiCX1cbiIgKworCQkJCSJ9XG4iCisJCQl9LCAKKwkJ
CWN1c3RvbU9wdGlvbnMsCisJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJIjEuIEVSUk9SIGluIFgu
amF2YSAoYXQgbGluZSA1KVxuIiArIAorCQkJIgktPiBTeXN0ZW0ub3V0LnByaW50bG4obzEudG9T
dHJpbmcoKStvMi50b1N0cmluZygpK28zLnRvU3RyaW5nKCkpO1xuIiArIAorCQkJIgkgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXlxuIiArIAorCQkJIlBvdGVudGlhbCBudWxs
IHBvaW50ZXIgYWNjZXNzOiBUaGUgdmFyaWFibGUgbzIgbWF5IGJlIG51bGwgYXQgdGhpcyBsb2Nh
dGlvblxuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCSIyLiBFUlJPUiBpbiBYLmphdmEg
KGF0IGxpbmUgNylcbiIgKyAKKwkJCSIJLT4gU3lzdGVtLm91dC5wcmludGxuKG8xLnRvU3RyaW5n
KCkrbzIudG9TdHJpbmcoKStvMy50b1N0cmluZygpKTtcbiIgKyAKKwkJCSIJICAgICAgICAgICAg
ICAgICAgICAgIF5eXG4iICsgCisJCQkiUG90ZW50aWFsIG51bGwgcG9pbnRlciBhY2Nlc3M6IFRo
ZSB2YXJpYWJsZSBvMSBtYXkgYmUgbnVsbCBhdCB0aGlzIGxvY2F0aW9uXG4iICsgCisJCQkiLS0t
LS0tLS0tLVxuIiArIAorCQkJIjMuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA3KVxuIiArIAor
CQkJIgktPiBTeXN0ZW0ub3V0LnByaW50bG4obzEudG9TdHJpbmcoKStvMi50b1N0cmluZygpK28z
LnRvU3RyaW5nKCkpO1xuIiArIAorCQkJIgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICBeXlxuIiArIAorCQkJIlBvdGVudGlhbCBudWxsIHBvaW50ZXIgYWNjZXNzOiBUaGUgdmFy
aWFibGUgbzIgbWF5IGJlIG51bGwgYXQgdGhpcyBsb2NhdGlvblxuIiArIAorCQkJIi0tLS0tLS0t
LS1cbiIgKyAKKwkJCSI0LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNylcbiIgKyAKKwkJCSIJ
LT4gU3lzdGVtLm91dC5wcmludGxuKG8xLnRvU3RyaW5nKCkrbzIudG9TdHJpbmcoKStvMy50b1N0
cmluZygpKTtcbiIgKyAKKwkJCSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICBeXlxuIiArIAorCQkJIlBvdGVudGlhbCBudWxsIHBvaW50ZXIgYWNjZXNz
OiBUaGUgdmFyaWFibGUgbzMgbWF5IGJlIG51bGwgYXQgdGhpcyBsb2NhdGlvblxuIiArIAorCQkJ
Ii0tLS0tLS0tLS1cbiIpOworCX0KK30KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWJzdHJh
Y3RNZXRob2REZWNsYXJhdGlvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BYnN0cmFjdE1ldGhvZERlY2xh
cmF0aW9uLmphdmEKaW5kZXggODdkYjBlZC4uOWZkMTJiYSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fz
dC9BYnN0cmFjdE1ldGhvZERlY2xhcmF0aW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BYnN0cmFj
dE1ldGhvZERlY2xhcmF0aW9uLmphdmEKQEAgLTg5LDEwICs4OSwxNCBAQAogCSAqIHdlIGNyZWF0
ZSB0aGUgYXJndW1lbnQgYmluZGluZyBhbmQgcmVzb2x2ZSBhbm5vdGF0aW9ucyBpbiBvcmRlciB0
byBjb21wdXRlIG51bGwgYW5ub3RhdGlvbiB0YWdiaXRzLgogCSAqLwogCXB1YmxpYyB2b2lkIGNy
ZWF0ZUFyZ3VtZW50QmluZGluZ3MoKSB7Ci0JCWlmICh0aGlzLmFyZ3VtZW50cyAhPSBudWxsICYm
IHRoaXMuYmluZGluZyAhPSBudWxsKSB7Ci0JCQlmb3IgKGludCBpID0gMCwgbGVuZ3RoID0gdGhp
cy5hcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKLQkJCQlBcmd1bWVudCBhcmd1
bWVudCA9IHRoaXMuYXJndW1lbnRzW2ldOwotCQkJCWFyZ3VtZW50LmNyZWF0ZUJpbmRpbmcodGhp
cy5zY29wZSwgdGhpcy5iaW5kaW5nLnBhcmFtZXRlcnNbaV0pOworCQljcmVhdGVBcmd1bWVudEJp
bmRpbmdzKHRoaXMuYXJndW1lbnRzLCB0aGlzLmJpbmRpbmcsIHRoaXMuc2NvcGUpOworCX0KKwkv
LyB2ZXJzaW9uIGZvciBpbnZvY2F0aW9uIGZyb20gTGFtYmRhRXhwcmVzc2lvbjoKKwlzdGF0aWMg
dm9pZCBjcmVhdGVBcmd1bWVudEJpbmRpbmdzKEFyZ3VtZW50W10gYXJndW1lbnRzLCBNZXRob2RC
aW5kaW5nIGJpbmRpbmcsIE1ldGhvZFNjb3BlIHNjb3BlKSB7CisJCWlmIChhcmd1bWVudHMgIT0g
bnVsbCAmJiBiaW5kaW5nICE9IG51bGwpIHsKKwkJCWZvciAoaW50IGkgPSAwLCBsZW5ndGggPSBh
cmd1bWVudHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKKwkJCQlBcmd1bWVudCBhcmd1bWVu
dCA9IGFyZ3VtZW50c1tpXTsKKwkJCQlhcmd1bWVudC5jcmVhdGVCaW5kaW5nKHNjb3BlLCBiaW5k
aW5nLnBhcmFtZXRlcnNbaV0pOwogCQkJCS8vIGNyZWF0ZUJpbmRpbmcoKSBoYXMgcmVzb2x2ZWQg
YW5ub3RhdGlvbnMsIG5vdyB0cmFuc2ZlciBudWxsbmVzcyBpbmZvIGZyb20gdGhlIGFyZ3VtZW50
IHRvIHRoZSBtZXRob2Q6CiAJCQkJLy8gcHJlZmVyIHR5cGUgYW5ub3RhdGlvbjoKIAkJCQlsb25n
IGFyZ1R5cGVUYWdCaXRzID0gKGFyZ3VtZW50LnR5cGUucmVzb2x2ZWRUeXBlLnRhZ0JpdHMgJiBU
YWdCaXRzLkFubm90YXRpb25OdWxsTUFTSyk7CkBAIC0xMDEsMTEgKzEwNSwxMSBAQAogCQkJCQlh
cmdUeXBlVGFnQml0cyA9IChhcmd1bWVudC5iaW5kaW5nLnRhZ0JpdHMgJiBUYWdCaXRzLkFubm90
YXRpb25OdWxsTUFTSyk7CiAJCQkJfQogCQkJCWlmIChhcmdUeXBlVGFnQml0cyAhPSAwKSB7Ci0J
CQkJCWlmICh0aGlzLmJpbmRpbmcucGFyYW1ldGVyTm9uTnVsbG5lc3MgPT0gbnVsbCkgewotCQkJ
CQkJdGhpcy5iaW5kaW5nLnBhcmFtZXRlck5vbk51bGxuZXNzID0gbmV3IEJvb2xlYW5bdGhpcy5h
cmd1bWVudHMubGVuZ3RoXTsKLQkJCQkJCXRoaXMuYmluZGluZy50YWdCaXRzIHw9IFRhZ0JpdHMu
SXNOdWxsbmVzc0tub3duOworCQkJCQlpZiAoYmluZGluZy5wYXJhbWV0ZXJOb25OdWxsbmVzcyA9
PSBudWxsKSB7CisJCQkJCQliaW5kaW5nLnBhcmFtZXRlck5vbk51bGxuZXNzID0gbmV3IEJvb2xl
YW5bYXJndW1lbnRzLmxlbmd0aF07CisJCQkJCQliaW5kaW5nLnRhZ0JpdHMgfD0gVGFnQml0cy5J
c051bGxuZXNzS25vd247CiAJCQkJCX0KLQkJCQkJdGhpcy5iaW5kaW5nLnBhcmFtZXRlck5vbk51
bGxuZXNzW2ldID0gQm9vbGVhbi52YWx1ZU9mKGFyZ1R5cGVUYWdCaXRzID09IFRhZ0JpdHMuQW5u
b3RhdGlvbk5vbk51bGwpOworCQkJCQliaW5kaW5nLnBhcmFtZXRlck5vbk51bGxuZXNzW2ldID0g
Qm9vbGVhbi52YWx1ZU9mKGFyZ1R5cGVUYWdCaXRzID09IFRhZ0JpdHMuQW5ub3RhdGlvbk5vbk51
bGwpOwogCQkJCX0KIAkJCX0KIAkJfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9MYW1iZGFFeHBy
ZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0xhbWJkYUV4cHJlc3Npb24uamF2YQppbmRleCA2MjQ0
NTk5Li44ZWM0Zjc4IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0xhbWJkYUV4cHJlc3Npb24uamF2
YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYXN0L0xhbWJkYUV4cHJlc3Npb24uamF2YQpAQCAtMzAsNiArMzAsNyBA
QAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuQmluZGlu
ZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkJsb2Nr
U2NvcGU7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5F
eHRyYUNvbXBpbGVyTW9kaWZpZXJzOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b21waWxlci5sb29rdXAuTG9va3VwRW52aXJvbm1lbnQ7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5NZXRob2RCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xp
cHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuTWV0aG9kU2NvcGU7CiBpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5SZWZlcmVuY2VCaW5kaW5nOwpA
QCAtMTExLDMxICsxMTIsNDQgQEAKICAgICAgICAgICAgIAkJcmV0dXJuIG51bGw7IC8vIEZVQkFS
LCBiYWlsIG91dCAuLi4KICAgICAgICAgICAgIH0KIAkJfQotCQkKLQkJYm9vbGVhbiBidWdneUFy
Z3VtZW50cyA9IGZhbHNlOwotCQlpbnQgbGVuZ3RoID0gdGhpcy5hcmd1bWVudHMgPT0gbnVsbCA/
IDAgOiB0aGlzLmFyZ3VtZW50cy5sZW5ndGg7CisKKwkJLy8gLS0tIHNlZSBTVEIucmVzb2x2ZVR5
cGVzRm9yKCk6IC0tLQorCQlSZWZlcmVuY2VCaW5kaW5nIFtdIGV4Y2VwdGlvbnMgPSB0aGlzLmJp
bmRpbmcudGhyb3duRXhjZXB0aW9uczsKKwkJaW50IGxlbmd0aCA9IGV4Y2VwdGlvbnMubGVuZ3Ro
OworCQlmb3IgKGludCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7CisJCQlSZWZlcmVuY2VCaW5k
aW5nIGV4Y2VwdGlvbiA9IGV4Y2VwdGlvbnNbaV07CisJCQlpZiAoKGV4Y2VwdGlvbi50YWdCaXRz
ICYgVGFnQml0cy5IYXNNaXNzaW5nVHlwZSkgIT0gMCkgeworCQkJCXRoaXMuYmluZGluZy50YWdC
aXRzIHw9IFRhZ0JpdHMuSGFzTWlzc2luZ1R5cGU7CisJCQl9CisJCQl0aGlzLmJpbmRpbmcubW9k
aWZpZXJzIHw9IChleGNlcHRpb24ubW9kaWZpZXJzICYgRXh0cmFDb21waWxlck1vZGlmaWVycy5B
Y2NHZW5lcmljU2lnbmF0dXJlKTsKKwkJfQorCQkvLyAtLS0KKworCQlib29sZWFuIGZvdW5kQXJn
UHJvYmxlbSA9IGZhbHNlOworCQlsZW5ndGggPSB0aGlzLmFyZ3VtZW50cyA9PSBudWxsID8gMCA6
IHRoaXMuYXJndW1lbnRzLmxlbmd0aDsKIAkJVHlwZUJpbmRpbmdbXSBuZXdQYXJhbWV0ZXJzID0g
bmV3IFR5cGVCaW5kaW5nW2xlbmd0aF07CiAKLQkJQW5ub3RhdGlvbkJpbmRpbmcgW11bXSBwYXJh
bWV0ZXJBbm5vdGF0aW9ucyA9IG51bGw7CisJCUFubm90YXRpb25CaW5kaW5nIFtdW10gcGFyYW1B
bm5vdGF0aW9ucyA9IG51bGw7CiAJCWZvciAoaW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsK
IAkJCUFyZ3VtZW50IGFyZ3VtZW50ID0gdGhpcy5hcmd1bWVudHNbaV07CisJCQkvLyBzZWUgTWV0
aG9kU2NvcGUuY3JlYXRlTWV0aG9kKCk6CiAJCQlpZiAoYXJndW1lbnQuaXNWYXJBcmdzKCkpIHsK
IAkJCQlpZiAoaSA9PSBsZW5ndGggLSAxKSB7CiAJCQkJCXRoaXMuYmluZGluZy5tb2RpZmllcnMg
fD0gQ2xhc3NGaWxlQ29uc3RhbnRzLkFjY1ZhcmFyZ3M7CiAJCQkJfSBlbHNlIHsKIAkJCQkJdGhp
cy5zY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5pbGxlZ2FsVmFyYXJnSW5MYW1iZGEoYXJndW1lbnQp
OwotCQkJCQlidWdneUFyZ3VtZW50cyA9IHRydWU7CisJCQkJCWZvdW5kQXJnUHJvYmxlbSA9IHRy
dWU7CiAJCQkJfQogCQkJfQotCQkJCi0JCQlUeXBlQmluZGluZyBwYXJhbWV0ZXJUeXBlOwogCQkJ
ZmluYWwgVHlwZUJpbmRpbmcgZXhwZWN0ZWRQYXJhbWV0ZXJUeXBlID0gaGF2ZURlc2NyaXB0b3Ig
JiYgaSA8IHRoaXMuZGVzY3JpcHRvci5wYXJhbWV0ZXJzLmxlbmd0aCA/IHRoaXMuZGVzY3JpcHRv
ci5wYXJhbWV0ZXJzW2ldIDogbnVsbDsKLQkJCXBhcmFtZXRlclR5cGUgPSBhcmd1bWVudHNUeXBl
RWxpZGVkID8gZXhwZWN0ZWRQYXJhbWV0ZXJUeXBlIDogYXJndW1lbnQudHlwZS5yZXNvbHZlVHlw
ZSh0aGlzLnNjb3BlLCB0cnVlIC8qIGNoZWNrIGJvdW5kcyovKTsKKwkJCS8vIC0tLSBtb3N0bHkg
ZnJvbSBTVEIucmVzb2x2ZVR5cGVzRm9yKCk6IC0tLQorCQkJLy8gVE9ETyAoc3RlcGhhbik6IGNv
bnNpZGVyIGRlZmVyUmF3VHlwZUNoZWNrIC8gQVNUTm9kZS5JZ25vcmVSYXdUeXBlQ2hlY2sgKHNl
ZSBTVEIucmVzb2x2ZVR5cGVzRm9yKCkpCisJCQlUeXBlQmluZGluZyBwYXJhbWV0ZXJUeXBlID0g
YXJndW1lbnRzVHlwZUVsaWRlZCA/IGV4cGVjdGVkUGFyYW1ldGVyVHlwZSA6IGFyZ3VtZW50LnR5
cGUucmVzb2x2ZVR5cGUodGhpcy5zY29wZSwgdHJ1ZSAvKiBjaGVjayBib3VuZHMqLyk7CiAJCQlp
ZiAocGFyYW1ldGVyVHlwZSA9PSBudWxsKSB7Ci0JCQkJYnVnZ3lBcmd1bWVudHMgPSB0cnVlOwor
CQkJCWZvdW5kQXJnUHJvYmxlbSA9IHRydWU7CiAJCQl9IGVsc2UgaWYgKHBhcmFtZXRlclR5cGUg
PT0gVHlwZUJpbmRpbmcuVk9JRCkgewogCQkJCXRoaXMuc2NvcGUucHJvYmxlbVJlcG9ydGVyKCku
YXJndW1lbnRUeXBlQ2Fubm90QmVWb2lkKHRoaXMsIGFyZ3VtZW50KTsKLQkJCQlidWdneUFyZ3Vt
ZW50cyA9IHRydWU7CisJCQkJZm91bmRBcmdQcm9ibGVtID0gdHJ1ZTsKIAkJCX0gZWxzZSB7CiAJ
CQkJaWYgKCFwYXJhbWV0ZXJUeXBlLmlzVmFsaWRCaW5kaW5nKCkpIHsKIAkJCQkJdGhpcy5iaW5k
aW5nLnRhZ0JpdHMgfD0gVGFnQml0cy5IYXNVbnJlc29sdmVkQXJndW1lbnRzOwpAQCAtMTQzLDYg
KzE1Nyw3IEBACiAJCQkJaWYgKChwYXJhbWV0ZXJUeXBlLnRhZ0JpdHMgJiBUYWdCaXRzLkhhc01p
c3NpbmdUeXBlKSAhPSAwKSB7CiAJCQkJCXRoaXMuYmluZGluZy50YWdCaXRzIHw9IFRhZ0JpdHMu
SGFzTWlzc2luZ1R5cGU7CiAJCQkJfQorCQkJCS8vIFRPRE8gKHN0ZXBoYW4pOiBjaGVjayB0eXBl
IGlkZW50aXR5IChpcyBhbiBQVEIgLyBlcmFzdXJlIHBhaXIgYWxsb3dlZCBoZXJlPykKIAkJCQlp
ZiAoaGF2ZURlc2NyaXB0b3IgJiYgZXhwZWN0ZWRQYXJhbWV0ZXJUeXBlICE9IG51bGwgJiYgcGFy
YW1ldGVyVHlwZS5pc1ZhbGlkQmluZGluZygpICYmIHBhcmFtZXRlclR5cGUgIT0gZXhwZWN0ZWRQ
YXJhbWV0ZXJUeXBlKSB7CiAJCQkJCXRoaXMuc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkubGFtYmRh
UGFyYW1ldGVyVHlwZU1pc21hdGNoZWQoYXJndW1lbnQsIGFyZ3VtZW50LnR5cGUsIGV4cGVjdGVk
UGFyYW1ldGVyVHlwZSk7CiAJCQkJfQpAQCAtMTUxLDQ0ICsxNjYsMzggQEAKIAkJCQlpZiAobGVh
ZlR5cGUgaW5zdGFuY2VvZiBSZWZlcmVuY2VCaW5kaW5nICYmICgoKFJlZmVyZW5jZUJpbmRpbmcp
IGxlYWZUeXBlKS5tb2RpZmllcnMgJiBFeHRyYUNvbXBpbGVyTW9kaWZpZXJzLkFjY0dlbmVyaWNT
aWduYXR1cmUpICE9IDApCiAJCQkJCXRoaXMuYmluZGluZy5tb2RpZmllcnMgfD0gRXh0cmFDb21w
aWxlck1vZGlmaWVycy5BY2NHZW5lcmljU2lnbmF0dXJlOwogCQkJCW5ld1BhcmFtZXRlcnNbaV0g
PSBwYXJhbWV0ZXJUeXBlOworCQkJCS8vIC0tLSBzaW1pbGFyIHRvIEFNRC5iaW5kQXJndW1lbnRz
KCk6IC0tLQogCQkJCWFyZ3VtZW50LmJpbmQodGhpcy5zY29wZSwgcGFyYW1ldGVyVHlwZSwgZmFs
c2UpOwogCQkJCWlmIChhcmd1bWVudC5hbm5vdGF0aW9ucyAhPSBudWxsKSB7CiAJCQkJCXRoaXMu
YmluZGluZy50YWdCaXRzIHw9IFRhZ0JpdHMuSGFzUGFyYW1ldGVyQW5ub3RhdGlvbnM7Ci0JCQkJ
CWlmIChwYXJhbWV0ZXJBbm5vdGF0aW9ucyA9PSBudWxsKSB7Ci0JCQkJCQlwYXJhbWV0ZXJBbm5v
dGF0aW9ucyA9IG5ldyBBbm5vdGF0aW9uQmluZGluZ1tsZW5ndGhdW107CisJCQkJCWlmIChwYXJh
bUFubm90YXRpb25zID09IG51bGwpIHsKKwkJCQkJCXBhcmFtQW5ub3RhdGlvbnMgPSBuZXcgQW5u
b3RhdGlvbkJpbmRpbmdbbGVuZ3RoXVtdOwogCQkJCQkJZm9yIChpbnQgaiA9IDA7IGogPCBpOyBq
KyspIHsKLQkJCQkJCQlwYXJhbWV0ZXJBbm5vdGF0aW9uc1tqXSA9IEJpbmRpbmcuTk9fQU5OT1RB
VElPTlM7CisJCQkJCQkJcGFyYW1Bbm5vdGF0aW9uc1tqXSA9IEJpbmRpbmcuTk9fQU5OT1RBVElP
TlM7CiAJCQkJCQl9CiAJCQkJCX0KLQkJCQkJcGFyYW1ldGVyQW5ub3RhdGlvbnNbaV0gPSBhcmd1
bWVudC5iaW5kaW5nLmdldEFubm90YXRpb25zKCk7Ci0JCQkJfSBlbHNlIGlmIChwYXJhbWV0ZXJB
bm5vdGF0aW9ucyAhPSBudWxsKSB7Ci0JCQkJCXBhcmFtZXRlckFubm90YXRpb25zW2ldID0gQmlu
ZGluZy5OT19BTk5PVEFUSU9OUzsKKwkJCQkJcGFyYW1Bbm5vdGF0aW9uc1tpXSA9IGFyZ3VtZW50
LmJpbmRpbmcuZ2V0QW5ub3RhdGlvbnMoKTsKKwkJCQl9IGVsc2UgaWYgKHBhcmFtQW5ub3RhdGlv
bnMgIT0gbnVsbCkgeworCQkJCQlwYXJhbUFubm90YXRpb25zW2ldID0gQmluZGluZy5OT19BTk5P
VEFUSU9OUzsKIAkJCQl9CisJCQkJLy8gLS0tCisJCQkJLy8gVE9ETyAoc3RlcGhhbik6IHZhbGlk
YXRlTnVsbEFubm90YXRpb25zKCkKIAkJCX0KIAkJfQogCQkvLyBvbmx5IGFzc2lnbiBwYXJhbWV0
ZXJzIGlmIG5vIHByb2JsZW1zIGFyZSBmb3VuZAotCQlpZiAoIWJ1Z2d5QXJndW1lbnRzKSB7CisJ
CWlmICghZm91bmRBcmdQcm9ibGVtKSB7CiAJCQl0aGlzLmJpbmRpbmcucGFyYW1ldGVycyA9IG5l
d1BhcmFtZXRlcnM7Ci0JCQlpZiAocGFyYW1ldGVyQW5ub3RhdGlvbnMgIT0gbnVsbCkKLQkJCQl0
aGlzLmJpbmRpbmcuc2V0UGFyYW1ldGVyQW5ub3RhdGlvbnMocGFyYW1ldGVyQW5ub3RhdGlvbnMp
OworCQkJLy8gc2VlIEFNRC5iaW5kQXJndW1lbnRzKCk6CisJCQlpZiAocGFyYW1Bbm5vdGF0aW9u
cyAhPSBudWxsKQorCQkJCXRoaXMuYmluZGluZy5zZXRQYXJhbWV0ZXJBbm5vdGF0aW9ucyhwYXJh
bUFubm90YXRpb25zKTsKIAkJfQotCQorCiAJCWlmICghYXJndW1lbnRzVHlwZUVsaWRlZCAmJiB0
aGlzLmJpbmRpbmcuaXNWYXJhcmdzKCkpIHsKIAkJCWlmICghdGhpcy5iaW5kaW5nLnBhcmFtZXRl
cnNbdGhpcy5iaW5kaW5nLnBhcmFtZXRlcnMubGVuZ3RoIC0gMV0uaXNSZWlmaWFibGUoKSkgewog
CQkJCXRoaXMuc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkucG9zc2libGVIZWFwUG9sbHV0aW9uRnJv
bVZhcmFyZyh0aGlzLmFyZ3VtZW50c1t0aGlzLmFyZ3VtZW50cy5sZW5ndGggLSAxXSk7CiAJCQl9
CiAJCX0KIAotCQlSZWZlcmVuY2VCaW5kaW5nIFtdIGV4Y2VwdGlvbnMgPSB0aGlzLmJpbmRpbmcu
dGhyb3duRXhjZXB0aW9uczsKLQkJbGVuZ3RoID0gZXhjZXB0aW9ucy5sZW5ndGg7Ci0JCWZvciAo
aW50IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHsKLQkJCVJlZmVyZW5jZUJpbmRpbmcgZXhjZXB0
aW9uID0gZXhjZXB0aW9uc1tpXTsKLQkJCWlmICgoZXhjZXB0aW9uLnRhZ0JpdHMgJiBUYWdCaXRz
Lkhhc01pc3NpbmdUeXBlKSAhPSAwKSB7Ci0JCQkJdGhpcy5iaW5kaW5nLnRhZ0JpdHMgfD0gVGFn
Qml0cy5IYXNNaXNzaW5nVHlwZTsKLQkJCX0KLQkJCXRoaXMuYmluZGluZy5tb2RpZmllcnMgfD0g
KGV4Y2VwdGlvbi5tb2RpZmllcnMgJiBFeHRyYUNvbXBpbGVyTW9kaWZpZXJzLkFjY0dlbmVyaWNT
aWduYXR1cmUpOwotCQl9Ci0JCQogCQlUeXBlQmluZGluZyByZXR1cm5UeXBlID0gdGhpcy5iaW5k
aW5nLnJldHVyblR5cGU7CiAJCWlmIChyZXR1cm5UeXBlICE9IG51bGwpIHsKIAkJCWlmICgocmV0
dXJuVHlwZS50YWdCaXRzICYgVGFnQml0cy5IYXNNaXNzaW5nVHlwZSkgIT0gMCkgewpAQCAtMTk3
LDEwICsyMDYsMTYgQEAKIAkJCVR5cGVCaW5kaW5nIGxlYWZUeXBlID0gcmV0dXJuVHlwZS5sZWFm
Q29tcG9uZW50VHlwZSgpOwogCQkJaWYgKGxlYWZUeXBlIGluc3RhbmNlb2YgUmVmZXJlbmNlQmlu
ZGluZyAmJiAoKChSZWZlcmVuY2VCaW5kaW5nKSBsZWFmVHlwZSkubW9kaWZpZXJzICYgRXh0cmFD
b21waWxlck1vZGlmaWVycy5BY2NHZW5lcmljU2lnbmF0dXJlKSAhPSAwKQogCQkJCXRoaXMuYmlu
ZGluZy5tb2RpZmllcnMgfD0gRXh0cmFDb21waWxlck1vZGlmaWVycy5BY2NHZW5lcmljU2lnbmF0
dXJlOworCQl9IC8vIFRPRE8gKHN0ZXBoYW4pOiBlbHNlPyAoY2FuIHRoYXQgaGFwcGVuPykKKwor
CQlpZiAoIWFyZ3VtZW50c1R5cGVFbGlkZWQgJiYgYmxvY2tTY29wZS5jb21waWxlck9wdGlvbnMo
KS5pc0Fubm90YXRpb25CYXNlZE51bGxBbmFseXNpc0VuYWJsZWQpIHsKKwkJCUFic3RyYWN0TWV0
aG9kRGVjbGFyYXRpb24uY3JlYXRlQXJndW1lbnRCaW5kaW5ncyh0aGlzLmFyZ3VtZW50cywgdGhp
cy5iaW5kaW5nLCB0aGlzLnNjb3BlKTsKIAkJfQogCiAJCXRoaXMuYmluZGluZy5tb2RpZmllcnMg
Jj0gfkV4dHJhQ29tcGlsZXJNb2RpZmllcnMuQWNjVW5yZXNvbHZlZDsKKwkJLy8gLS0tIGVuZCBv
ZiBzdHVmZiBmcm9tIFNUQi5yZXNvbHZlVHlwZXNGb3IoKSAtLS0KIAkJCisJCS8vIC0tLSBub3Jt
YWwgcmVzb2x2ZVR5cGUoKTogLS0tCiAJCWlmICh0aGlzLmJvZHkgaW5zdGFuY2VvZiBFeHByZXNz
aW9uKSB7CiAJCQlFeHByZXNzaW9uIGV4cHJlc3Npb24gPSAoRXhwcmVzc2lvbikgdGhpcy5ib2R5
OwogCQkJbmV3IFJldHVyblN0YXRlbWVudChleHByZXNzaW9uLCBleHByZXNzaW9uLnNvdXJjZVN0
YXJ0LCBleHByZXNzaW9uLnNvdXJjZUVuZCwgdHJ1ZSkucmVzb2x2ZSh0aGlzLnNjb3BlKTsgLy8g
Oi0pIDstKQpAQCAtMjI5LDggKzI0NCwxNCBAQAogCQkJCQkJdGhpcy5zY29wZSwKIAkJCQkJCUZs
b3dJbmZvLkRFQURfRU5EKTsKIAorCQlib29sZWFuIGlzQW5ub3RhdGlvbkJhc2VkTnVsbEFuYWx5
c2lzRW5hYmxlZCA9IGN1cnJlbnRTY29wZS5jb21waWxlck9wdGlvbnMoKS5pc0Fubm90YXRpb25C
YXNlZE51bGxBbmFseXNpc0VuYWJsZWQ7CisJCWJvb2xlYW4gYXJlQXJndW1lbnRzVHlwZUVsaWRl
ZCA9IGFyZ3VtZW50c1R5cGVFbGlkZWQoKTsKKwkJTWV0aG9kQmluZGluZyBtZXRob2RXaXRoUGFy
YW1ldGVyRGVjbGFyYXRpb24gPSBhcmVBcmd1bWVudHNUeXBlRWxpZGVkID8gdGhpcy5kZXNjcmlw
dG9yIDogdGhpcy5iaW5kaW5nOworCQlpZiAoaXNBbm5vdGF0aW9uQmFzZWROdWxsQW5hbHlzaXNF
bmFibGVkICYmICFhcmVBcmd1bWVudHNUeXBlRWxpZGVkKSB7CisJCQltZXJnZVBhcmFtZXRlck51
bGxBbm5vdGF0aW9ucyhjdXJyZW50U2NvcGUpOworCQl9CiAJCS8vIG51bGxpdHkgYW5kIG1hcmsg
YXMgYXNzaWduZWQKLQkJQWJzdHJhY3RNZXRob2REZWNsYXJhdGlvbi5hbmFseXNlQXJndW1lbnRz
KGxhbWJkYUluZm8sIHRoaXMuYXJndW1lbnRzLCB0aGlzLmJpbmRpbmcpOworCQlBYnN0cmFjdE1l
dGhvZERlY2xhcmF0aW9uLmFuYWx5c2VBcmd1bWVudHMobGFtYmRhSW5mbywgdGhpcy5hcmd1bWVu
dHMsIG1ldGhvZFdpdGhQYXJhbWV0ZXJEZWNsYXJhdGlvbik7CiAKIAkJaWYgKHRoaXMuYXJndW1l
bnRzICE9IG51bGwpIHsKIAkJCWZvciAoaW50IGkgPSAwLCBjb3VudCA9IHRoaXMuYXJndW1lbnRz
Lmxlbmd0aDsgaSA8IGNvdW50OyBpKyspIHsKQEAgLTI1MiwxMCArMjczLDU1IEBACiAJCQkJCXRo
aXMuc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuc2hvdWxkUmV0dXJuKHJldHVyblR5cGVCaW5kaW5n
LCB0aGlzKTsKIAkJCQl9CiAJCQl9CisJCX0gZWxzZSB7IC8vIEV4cHJlc3Npb24KKwkJCWlmIChp
c0Fubm90YXRpb25CYXNlZE51bGxBbmFseXNpc0VuYWJsZWQgJiYgZmxvd0luZm8ucmVhY2hNb2Rl
KCkgPT0gRmxvd0luZm8uUkVBQ0hBQkxFKSB7CisJCQkJRXhwcmVzc2lvbiBleHByZXNzaW9uID0g
KEV4cHJlc3Npb24pdGhpcy5ib2R5OworCQkJCWNoZWNrQWdhaW5zdE51bGxBbm5vdGF0aW9uKGZs
b3dDb250ZXh0LCBleHByZXNzaW9uLCBleHByZXNzaW9uLm51bGxTdGF0dXMoZmxvd0luZm8sIGZs
b3dDb250ZXh0KSk7CisJCQl9CiAJCX0KIAkJcmV0dXJuIGZsb3dJbmZvOwogCX0KIAorCS8vIHBy
ZTogIWFyZ3VtZW50VHlwZUVsaWRlZCgpCisJLy8gdHJ5IHRvIG1lcmdlIG51bGwgYW5ub3RhdGlv
bnMgZnJvbSBkZXNjcmlwdG9yIGludG8gYmluZGluZywKKwkvLyBjb21wbGFpbmluZyBhYm91dCBh
bnkgaW5jb21wYXRpYmlsaXRpZXMgZm91bmQKKwlwcml2YXRlIHZvaWQgbWVyZ2VQYXJhbWV0ZXJO
dWxsQW5ub3RhdGlvbnMoQmxvY2tTY29wZSBjdXJyZW50U2NvcGUpIHsKKwkJaWYgKHRoaXMuZGVz
Y3JpcHRvci5wYXJhbWV0ZXJOb25OdWxsbmVzcyA9PSBudWxsKQorCQkJcmV0dXJuOworCQlpZiAo
dGhpcy5iaW5kaW5nLnBhcmFtZXRlck5vbk51bGxuZXNzID09IG51bGwpIHsKKwkJCXRoaXMuYmlu
ZGluZy5wYXJhbWV0ZXJOb25OdWxsbmVzcyA9IHRoaXMuZGVzY3JpcHRvci5wYXJhbWV0ZXJOb25O
dWxsbmVzczsKKwkJCXJldHVybjsKKwkJfQorCQlCb29sZWFuW10gb3VyTm9uTnVsbG5lc3MgPSB0
aGlzLmJpbmRpbmcucGFyYW1ldGVyTm9uTnVsbG5lc3M7CisJCUJvb2xlYW5bXSBkZXNjTm9uTnVs
bG5lc3MgPSB0aGlzLmRlc2NyaXB0b3IucGFyYW1ldGVyTm9uTnVsbG5lc3M7CisJCWlmIChvdXJO
b25OdWxsbmVzcy5sZW5ndGggIT0gZGVzY05vbk51bGxuZXNzLmxlbmd0aCkKKwkJCXRocm93IG5l
dyBBc3NlcnRpb25FcnJvcigpOyAvLyBGSVhNRSAoc3RlcGhhbikKKwkJTG9va3VwRW52aXJvbm1l
bnQgZW52ID0gY3VycmVudFNjb3BlLmVudmlyb25tZW50KCk7CisJCWludCBsZW4gPSBvdXJOb25O
dWxsbmVzcy5sZW5ndGg7CisJCWZvciAoaW50IGkgPSAwOyBpIDwgbGVuOyBpKyspIHsKKwkJCWlm
IChvdXJOb25OdWxsbmVzc1tpXSA9PSBudWxsKSB7CisJCQkJb3VyTm9uTnVsbG5lc3NbaV0gPSBk
ZXNjTm9uTnVsbG5lc3NbaV07CisJCQl9IGVsc2UgaWYgKG91ck5vbk51bGxuZXNzW2ldICE9IGRl
c2NOb25OdWxsbmVzc1tpXSkgeworCQkJCWlmIChvdXJOb25OdWxsbmVzc1tpXSA9PSBCb29sZWFu
LlRSVUUpIHsgLy8gcmVxdWVzdGVkIEBOb25OdWxsIG5vdCBwcm92aWRlZAorCQkJCQljaGFyW11b
XSBpbmhlcml0ZWRBbm5vdGF0aW9uTmFtZSA9IG51bGw7CisJCQkJCWlmIChkZXNjTm9uTnVsbG5l
c3NbaV0gPT0gQm9vbGVhbi5GQUxTRSkKKwkJCQkJCWluaGVyaXRlZEFubm90YXRpb25OYW1lID0g
ZW52LmdldE51bGxhYmxlQW5ub3RhdGlvbk5hbWUoKTsKKwkJCQkJY3VycmVudFNjb3BlLnByb2Js
ZW1SZXBvcnRlcigpLmlsbGVnYWxSZWRlZmluaXRpb25Ub05vbk51bGxQYXJhbWV0ZXIodGhpcy5h
cmd1bWVudHNbaV0sIHRoaXMuZGVzY3JpcHRvci5kZWNsYXJpbmdDbGFzcywgaW5oZXJpdGVkQW5u
b3RhdGlvbk5hbWUpOworCQkJCX0KKwkJCX0JCQkKKwkJfQorCX0KKworCXZvaWQgY2hlY2tBZ2Fp
bnN0TnVsbEFubm90YXRpb24oRmxvd0NvbnRleHQgZmxvd0NvbnRleHQsIEV4cHJlc3Npb24gZXhw
cmVzc2lvbiwgaW50IG51bGxTdGF0dXMpIHsKKwkJaWYgKG51bGxTdGF0dXMgIT0gRmxvd0luZm8u
Tk9OX05VTEwpIHsKKwkJCS8vIGlmIHdlIGNhbid0IHByb3ZlIG5vbi1udWxsIGNoZWNrIGFnYWlu
c3QgZGVjbGFyZWQgbnVsbC1uZXNzIG9mIHRoZSBkZXNjcmlwdG9yIG1ldGhvZDoKKwkJCS8vIE5v
dGUgdGhhdCB0aGlzLmJpbmRpbmcgbmV2ZXIgaGFzIGEgcmV0dXJuIHR5cGUgZGVjbGFyYXRpb24s
IGFsd2F5cyBpbmhlcml0IG51bGwtbmVzcyBmcm9tIHRoZSBkZXNjcmlwdG9yCisJCQlpZiAoKHRo
aXMuZGVzY3JpcHRvci50YWdCaXRzICYgVGFnQml0cy5Bbm5vdGF0aW9uTm9uTnVsbCkgIT0gMCkg
eworCQkJCWZsb3dDb250ZXh0LnJlY29yZE51bGxpdHlNaXNtYXRjaCh0aGlzLnNjb3BlLCBleHBy
ZXNzaW9uLCBleHByZXNzaW9uLnJlc29sdmVkVHlwZSwgdGhpcy5kZXNjcmlwdG9yLnJldHVyblR5
cGUsIG51bGxTdGF0dXMpOworCQkJfQorCQl9CisJfQorCiAJcHVibGljIFN0cmluZ0J1ZmZlciBw
cmludEV4cHJlc3Npb24oaW50IHRhYiwgU3RyaW5nQnVmZmVyIG91dHB1dCkgewogCQlpbnQgcGFy
ZW50aGVzZXNDb3VudCA9ICh0aGlzLmJpdHMgJiBBU1ROb2RlLlBhcmVudGhlc2l6ZWRNQVNLKSA+
PiBBU1ROb2RlLlBhcmVudGhlc2l6ZWRTSElGVDsKIAkJU3RyaW5nIHN1ZmZpeCA9ICIiOyAvLyRO
T04tTkxTLTEk
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>227228</attachid>
            <date>2013-02-19 03:20:00 -0500</date>
            <delta_ts>2013-02-19 03:20:33 -0500</delta_ts>
            <desc>mylyn/context/zip</desc>
            <filename>mylyn-context.zip</filename>
            <type>application/octet-stream</type>
            <size>8447</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">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
AF4AAACLIAAAAAA=
</data>

          </attachment>
      

    </bug>

</bugzilla>