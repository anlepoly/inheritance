<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>406619</bug_id>
          
          <creation_ts>2013-04-26 03:21:00 -0400</creation_ts>
          <short_desc>[1.8][compiler] Incorrect suggestion that method can be made static.</short_desc>
          <delta_ts>2013-05-08 01:27:55 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="shankha banerjee">shankhba</assigned_to>
          <cc>jarthana</cc>
    
    <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="56976"
          type_id="1"
          status="+"
          setter="srikanth_sankaran"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2248805</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-04-26 03:21:49 -0400</bug_when>
    <thetext>BETA_JAVA8:

I get a hint from the compiler that default method foo of I can be declared
static. Default methods cannot be static.

// ---
interface I {
	default int foo(int x, int y) {
		System.out.println(&quot;I.foo(&quot; + x + &quot;,&quot; + y + &quot;)&quot;);
		return 10;
	}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2248806</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-04-26 03:22:55 -0400</bug_when>
    <thetext>Shankha, this should be easy to fix. Please note that this warning is
disabled by default. You can turn it on by using window + preferences
and searching for static.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2251397</commentid>
    <comment_count>2</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2013-05-02 05:35:20 -0400</bug_when>
    <thetext>Is there a need to add the test case (mentioned in  Description Srikanth Sankaran 2013-04-26 03:21:49 EDT ) to RunAllJava8 tests.

Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2251411</commentid>
    <comment_count>3</comment_count>
      <attachid>230394</attachid>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2013-05-02 06:27:30 -0400</bug_when>
    <thetext>Created attachment 230394
Patch

The issue happens after a call to 

			if (!this.binding.isStatic() &amp;&amp; (this.bits &amp; ASTNode.CanBeStatic) != 0 &amp;&amp; !this.isDefaultMethod()) {
				if(!this.binding.isOverriding() &amp;&amp; !this.binding.isImplementing()) {
					if (this.binding.isPrivate() || this.binding.isFinal() || this.binding.declaringClass.isFinal()) {
						this.scope.problemReporter().methodCanBeDeclaredStatic(this);
					} else {
						this.scope.problemReporter().methodCanBePotentiallyDeclaredStatic(this);
					}
				}

methodCanBePotentiallyDeclaredStatic(this). The solution could have been to 
have the check (!this.isDefaultMethod()) in the else part. In my opinion putting the check at the top (in the if condition) makes sure we do not lead to either of the warnings in case the method is a default method. I do not have a corresponding test case to prove my point. 

Please let me know if a test case should be added in RunAllJava8 tests. 

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2251415</commentid>
    <comment_count>4</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2013-05-02 06:28:57 -0400</bug_when>
    <thetext>RunAllJava8 tests RunAllJDTCoreTests is clean.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2251866</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-05-03 03:15:18 -0400</bug_when>
    <thetext>(In reply to comment #2)
&gt; Is there a need to add the test case (mentioned in  Description Srikanth
&gt; Sankaran 2013-04-26 03:21:49 EDT ) to RunAllJava8 tests.


A test should always accompany every fix that gets released unless it is very
hard to write a test due to concurrency issues. The test should not be added
directly to RunAllJava8 tests - it should in this case be added to InterfaceMethodsTest.java which gets picked up by RunAllJava8Tests</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2251868</commentid>
    <comment_count>6</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2013-05-03 03:16:50 -0400</bug_when>
    <thetext>(In reply to comment #5)
&gt; (In reply to comment #2)
&gt; &gt; Is there a need to add the test case (mentioned in  Description Srikanth
&gt; &gt; Sankaran 2013-04-26 03:21:49 EDT ) to RunAllJava8 tests.
&gt; 
&gt; 
&gt; A test should always accompany every fix that gets released unless it is very
&gt; hard to write a test due to concurrency issues. The test should not be added
&gt; directly to RunAllJava8 tests - it should in this case be added to
&gt; InterfaceMethodsTest.java which gets picked up by RunAllJava8Tests

Okay. I will update the patch with the test and re post it. 

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2253796</commentid>
    <comment_count>7</comment_count>
      <attachid>230625</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-05-08 01:00:24 -0400</bug_when>
    <thetext>Created attachment 230625
Shankha&apos;s patch (posted incorrectly at bug 406859</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2253798</commentid>
    <comment_count>8</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2013-05-08 01:05:15 -0400</bug_when>
    <thetext>Thanks. Sorry about posting it in the wrong attachment. 

I am trying to make the following call:
public void testStaticMethod14() {
		runConformTest(
			new String[] {
				&quot;X.java&quot;,
				&quot;interface X {\n&quot; +
				&quot;	default int foo() {\n&quot; +
				&quot;		return 10;\n&quot; +
				&quot;	}\n&quot; +
				&quot;}\n&quot;,
			},
			new String[] {&quot;-Dcompliance=1.8&quot;});
	}

which in turn  makes a call to 

protected void runConformTest(String[] testFiles, String[] vmArguments) {
		runTest(
			// test directory preparation
			true /* flush output directory */,
			testFiles /* test files */,
			// compiler options
			null /* no class libraries */,
			null /* no custom options */,
			false /* do not perform statements recovery */,
			null /* no custom requestor */,
			// compiler results
			false /* expecting no compiler errors */,
			null /* do not check compiler log */,
			// runtime options
			false /* do not force execution */,
			vmArguments /* vm arguments */,
			// runtime results
			null /* expected output string */,
			null /* do not check error string */,
			// javac options
			JavacTestOptions.DEFAULT /* default javac test options */);
	}

I wish to pass the correct compliance level 1.8 from the interface test method function. 

Thanks</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2253801</commentid>
    <comment_count>9</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-05-08 01:27:55 -0400</bug_when>
    <thetext>Review comments:

(1) In the test, apart from bug link, please also provide the bug title.
(2) I renamed the test from being testStaticMethod14 to test406619.

Fix looks good. I released it here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=1c82ab4ca7a7921e02eb1c1295505414f94bc64d.


Please take a look at how the test has been written. 

If you want a test to be run only at certain level or to be skipped
at some levels, you can do like it is being done in
org.eclipse.jdt.core.tests.compiler.parser.ComplianceDiagnoseTest.testBug399778a
or org.eclipse.jdt.core.tests.compiler.parser.ComplianceDiagnoseTest.testBug399780

But

InterfaceMethodsTest runs already only in 1.8 mode, 

When writing a test, you want to copy + paste if possible from similar tests.
Searching for the message, &quot;can potentially be declared as static&quot; pulls up
some matches in ProblemTypeAndMethodsTests.java. From there I copied a suitable
test to InterfaceMethodsTests.java and modified it.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>230394</attachid>
            <date>2013-05-02 06:27:00 -0400</date>
            <delta_ts>2013-05-08 01:00:24 -0400</delta_ts>
            <desc>Patch</desc>
            <filename>patch.patch</filename>
            <type>text/plain</type>
            <size>1072</size>
            <attacher name="shankha banerjee">shankhba</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvTWV0aG9kRGVjbGFyYXRpb24uamF2YSBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvTWV0aG9kRGVjbGFyYXRpb24uamF2YQppbmRleCBmNmFhY2M3Li5jNjg1MDBkIDEwMDY0NAot
LS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXN0L01ldGhvZERlY2xhcmF0aW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9N
ZXRob2REZWNsYXJhdGlvbi5qYXZhCkBAIC0xNDUsNyArMTQ1LDcgQEAgcHVibGljIGNsYXNzIE1l
dGhvZERlY2xhcmF0aW9uIGV4dGVuZHMgQWJzdHJhY3RNZXRob2REZWNsYXJhdGlvbiB7CiAJCQkv
LyBjaGVjayB1bnVzZWQgcGFyYW1ldGVycwogCQkJdGhpcy5zY29wZS5jaGVja1VudXNlZFBhcmFt
ZXRlcnModGhpcy5iaW5kaW5nKTsKIAkJCS8vIGNoZWNrIGlmIHRoZSBtZXRob2QgY291bGQgaGF2
ZSBiZWVuIHN0YXRpYwotCQkJaWYgKCF0aGlzLmJpbmRpbmcuaXNTdGF0aWMoKSAmJiAodGhpcy5i
aXRzICYgQVNUTm9kZS5DYW5CZVN0YXRpYykgIT0gMCAmJiAhdGhpcy5pc0RlZmF1bHRNZXRob2Qo
KSkgeworCQkJaWYgKCF0aGlzLmJpbmRpbmcuaXNTdGF0aWMoKSAmJiAodGhpcy5iaXRzICYgQVNU
Tm9kZS5DYW5CZVN0YXRpYykgIT0gMCkgewogCQkJCWlmKCF0aGlzLmJpbmRpbmcuaXNPdmVycmlk
aW5nKCkgJiYgIXRoaXMuYmluZGluZy5pc0ltcGxlbWVudGluZygpKSB7CiAJCQkJCWlmICh0aGlz
LmJpbmRpbmcuaXNQcml2YXRlKCkgfHwgdGhpcy5iaW5kaW5nLmlzRmluYWwoKSB8fCB0aGlzLmJp
bmRpbmcuZGVjbGFyaW5nQ2xhc3MuaXNGaW5hbCgpKSB7CiAJCQkJCQl0aGlzLnNjb3BlLnByb2Js
ZW1SZXBvcnRlcigpLm1ldGhvZENhbkJlRGVjbGFyZWRTdGF0aWModGhpcyk7Cg==
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>230625</attachid>
            <date>2013-05-08 01:00:00 -0400</date>
            <delta_ts>2013-05-08 01:00:24 -0400</delta_ts>
            <desc>Shankha&apos;s patch (posted incorrectly at bug 406859</desc>
            <filename>shapatch.txt</filename>
            <type>text/plain</type>
            <size>3802</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0Fic3RyYWN0UmVncmVz
c2lvblRlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9v
cmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0Fic3RyYWN0UmVn
cmVzc2lvblRlc3QuamF2YQ0KaW5kZXggZjAwMTJkYy4uYjBjZmM4NiAxMDA2NDQNCi0tLSBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29y
ZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0Fic3RyYWN0UmVncmVzc2lvblRlc3QuamF2YQ0K
KysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNl
L2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vQWJzdHJhY3RSZWdyZXNzaW9uVGVz
dC5qYXZhDQpAQCAtMTM3MCw2ICsxMzcwLDI4IEBAIHByb3RlY3RlZCBzdGF0aWMgY2xhc3MgSmF2
YWNUZXN0T3B0aW9ucyB7DQogCQkJLy8gamF2YWMgb3B0aW9ucw0KIAkJCUphdmFjVGVzdE9wdGlv
bnMuREVGQVVMVCAvKiBkZWZhdWx0IGphdmFjIHRlc3Qgb3B0aW9ucyAqLyk7DQogCX0NCisJcHJv
dGVjdGVkIHZvaWQgcnVuQ29uZm9ybVRlc3QoU3RyaW5nW10gdGVzdEZpbGVzLCBTdHJpbmdbXSB2
bUFyZ3VtZW50cykgew0KKwkJcnVuVGVzdCgNCisJCQkvLyB0ZXN0IGRpcmVjdG9yeSBwcmVwYXJh
dGlvbg0KKwkJCXRydWUgLyogZmx1c2ggb3V0cHV0IGRpcmVjdG9yeSAqLywNCisJCQl0ZXN0Rmls
ZXMgLyogdGVzdCBmaWxlcyAqLywNCisJCQkvLyBjb21waWxlciBvcHRpb25zDQorCQkJbnVsbCAv
KiBubyBjbGFzcyBsaWJyYXJpZXMgKi8sDQorCQkJbnVsbCAvKiBubyBjdXN0b20gb3B0aW9ucyAq
LywNCisJCQlmYWxzZSAvKiBkbyBub3QgcGVyZm9ybSBzdGF0ZW1lbnRzIHJlY292ZXJ5ICovLA0K
KwkJCW51bGwgLyogbm8gY3VzdG9tIHJlcXVlc3RvciAqLywNCisJCQkvLyBjb21waWxlciByZXN1
bHRzDQorCQkJZmFsc2UgLyogZXhwZWN0aW5nIG5vIGNvbXBpbGVyIGVycm9ycyAqLywNCisJCQlu
dWxsIC8qIGRvIG5vdCBjaGVjayBjb21waWxlciBsb2cgKi8sDQorCQkJLy8gcnVudGltZSBvcHRp
b25zDQorCQkJZmFsc2UgLyogZG8gbm90IGZvcmNlIGV4ZWN1dGlvbiAqLywNCisJCQl2bUFyZ3Vt
ZW50cyAvKiB2bSBhcmd1bWVudHMgKi8sDQorCQkJLy8gcnVudGltZSByZXN1bHRzDQorCQkJbnVs
bCAvKiBleHBlY3RlZCBvdXRwdXQgc3RyaW5nICovLA0KKwkJCW51bGwgLyogZG8gbm90IGNoZWNr
IGVycm9yIHN0cmluZyAqLywNCisJCQkvLyBqYXZhYyBvcHRpb25zDQorCQkJSmF2YWNUZXN0T3B0
aW9ucy5ERUZBVUxUIC8qIGRlZmF1bHQgamF2YWMgdGVzdCBvcHRpb25zICovKTsNCisJfQ0KIAlw
cm90ZWN0ZWQgdm9pZCBydW5Db25mb3JtVGVzdChTdHJpbmdbXSB0ZXN0RmlsZXMsIE1hcCBjdXN0
b21PcHRpb25zKSB7DQogCQlydW5UZXN0KA0KIAkJCS8vIHRlc3QgZGlyZWN0b3J5IHByZXBhcmF0
aW9uDQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3Jj
L29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vSW50ZXJmYWNl
TWV0aG9kc1Rlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3Ny
Yy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0ludGVyZmFj
ZU1ldGhvZHNUZXN0LmphdmENCmluZGV4IGM5ZjA0ZjkuLmE0MTZlNDQgMTAwNjQ0DQotLS0gYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2Nv
cmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9JbnRlcmZhY2VNZXRob2RzVGVzdC5qYXZhDQor
KysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2Uv
amR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9JbnRlcmZhY2VNZXRob2RzVGVzdC5q
YXZhDQpAQCAtMTc0Miw2ICsxNzQyLDE5IEBAIHB1YmxpYyBjbGFzcyBJbnRlcmZhY2VNZXRob2Rz
VGVzdCBleHRlbmRzIEFic3RyYWN0Q29tcGFyYWJsZVRlc3Qgew0KIAkJCQkiQ2Fubm90IHVzZSBz
dXBlciBpbiBhIHN0YXRpYyBjb250ZXh0XG4iICsgDQogCQkJCSItLS0tLS0tLS0tXG4iKTsNCiAJ
fQ0KKyAgICAvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9
NDA2NjE5DQorCXB1YmxpYyB2b2lkIHRlc3RTdGF0aWNNZXRob2QxNCgpIHsNCisJCXJ1bkNvbmZv
cm1UZXN0KA0KKwkJCW5ldyBTdHJpbmdbXSB7DQorCQkJCSJYLmphdmEiLA0KKwkJCQkiaW50ZXJm
YWNlIFgge1xuIiArDQorCQkJCSIJZGVmYXVsdCBpbnQgZm9vKCkge1xuIiArDQorCQkJCSIJCXJl
dHVybiAxMDtcbiIgKw0KKwkJCQkiCX1cbiIgKw0KKwkJCQkifVxuIiwNCisJCQl9LA0KKwkJCW5l
dyBTdHJpbmdbXSB7Ii1EY29tcGxpYW5jZT0xLjgifSk7DQorCX0NCiANCiAJLy8gY2xhc3MgaW1w
bGVtZW50cyBpbnRlcmZhY2Ugd2l0aCBkZWZhdWx0IG1ldGhvZC4gDQogCS8vIC0gc3ludGguIGFj
Y2VzcyBuZWVkZWQgZm9yIHZpc2liaWxpdHkgcmVhc29ucw0KZGlmZiAtLWdpdCBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvTWV0aG9kRGVjbGFyYXRpb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTWV0aG9kRGVjbGFyYXRpb24u
amF2YQ0KaW5kZXggYzY4NTAwZC4uZjZhYWNjNyAxMDA2NDQNCi0tLSBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTWV0
aG9kRGVjbGFyYXRpb24uamF2YQ0KKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9NZXRob2REZWNsYXJhdGlvbi5q
YXZhDQpAQCAtMTQ1LDcgKzE0NSw3IEBAIHB1YmxpYyBjbGFzcyBNZXRob2REZWNsYXJhdGlvbiBl
eHRlbmRzIEFic3RyYWN0TWV0aG9kRGVjbGFyYXRpb24gew0KIAkJCS8vIGNoZWNrIHVudXNlZCBw
YXJhbWV0ZXJzDQogCQkJdGhpcy5zY29wZS5jaGVja1VudXNlZFBhcmFtZXRlcnModGhpcy5iaW5k
aW5nKTsNCiAJCQkvLyBjaGVjayBpZiB0aGUgbWV0aG9kIGNvdWxkIGhhdmUgYmVlbiBzdGF0aWMN
Ci0JCQlpZiAoIXRoaXMuYmluZGluZy5pc1N0YXRpYygpICYmICh0aGlzLmJpdHMgJiBBU1ROb2Rl
LkNhbkJlU3RhdGljKSAhPSAwKSB7DQorCQkJaWYgKCF0aGlzLmJpbmRpbmcuaXNTdGF0aWMoKSAm
JiAodGhpcy5iaXRzICYgQVNUTm9kZS5DYW5CZVN0YXRpYykgIT0gMCAmJiAhdGhpcy5pc0RlZmF1
bHRNZXRob2QoKSkgew0KIAkJCQlpZighdGhpcy5iaW5kaW5nLmlzT3ZlcnJpZGluZygpICYmICF0
aGlzLmJpbmRpbmcuaXNJbXBsZW1lbnRpbmcoKSkgew0KIAkJCQkJaWYgKHRoaXMuYmluZGluZy5p
c1ByaXZhdGUoKSB8fCB0aGlzLmJpbmRpbmcuaXNGaW5hbCgpIHx8IHRoaXMuYmluZGluZy5kZWNs
YXJpbmdDbGFzcy5pc0ZpbmFsKCkpIHsNCiAJCQkJCQl0aGlzLnNjb3BlLnByb2JsZW1SZXBvcnRl
cigpLm1ldGhvZENhbkJlRGVjbGFyZWRTdGF0aWModGhpcyk7DQoNCg==
</data>

          </attachment>
      

    </bug>

</bugzilla>