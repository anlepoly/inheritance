<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>333089</bug_id>
          
          <creation_ts>2010-12-22 08:54:00 -0500</creation_ts>
          <short_desc>[compiler][null]AIOOBE while assigning variable a potentially null value in try/finally</short_desc>
          <delta_ts>2011-02-02 03:24:27 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.7</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows XP</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>3.7 M5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Claudiu Soroiu">csoroiu</reporter>
          <assigned_to name="Ayushman Jain">amj87.iitr</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>Olivier_Thomann</cc>
    
    <cc>satyam.kandula</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1859929</commentid>
    <comment_count>0</comment_count>
    <who name="Claudiu Soroiu">csoroiu</who>
    <bug_when>2010-12-22 08:54:55 -0500</bug_when>
    <thetext>Build Identifier: I20101208-1300

When compiling a branch of the project i&apos;m working on i get the following exception.
This happens with only one branch of the project.
It works with 3.6 Build id: 20100917-0705

Unfortunatelly i cannot extract a version that can cause the problem and cannot paste the project.
Additionally, if this is hard to track I can do some sort of debug or let me know what options can i set to have more debug info during compiling.

java.lang.ArrayIndexOutOfBoundsException: 2
	at org.eclipse.jdt.internal.compiler.flow.UnconditionalFlowInfo.resetNullInfo(UnconditionalFlowInfo.java:1358)
	at org.eclipse.jdt.internal.compiler.flow.FlowInfo.markNullStatus(FlowInfo.java:303)
	at org.eclipse.jdt.internal.compiler.ast.Assignment.analyseCode(Assignment.java:58)
	at org.eclipse.jdt.internal.compiler.ast.Block.analyseCode(Block.java:36)
	at org.eclipse.jdt.internal.compiler.ast.IfStatement.analyseCode(IfStatement.java:99)
	at org.eclipse.jdt.internal.compiler.ast.Block.analyseCode(Block.java:36)
	at org.eclipse.jdt.internal.compiler.ast.IfStatement.analyseCode(IfStatement.java:125)
	at org.eclipse.jdt.internal.compiler.ast.Block.analyseCode(Block.java:36)
	at org.eclipse.jdt.internal.compiler.ast.IfStatement.analyseCode(IfStatement.java:99)
	at org.eclipse.jdt.internal.compiler.ast.Block.analyseCode(Block.java:36)
	at org.eclipse.jdt.internal.compiler.ast.IfStatement.analyseCode(IfStatement.java:125)
	at org.eclipse.jdt.internal.compiler.ast.Block.analyseCode(Block.java:36)
	at org.eclipse.jdt.internal.compiler.ast.IfStatement.analyseCode(IfStatement.java:99)
	at org.eclipse.jdt.internal.compiler.ast.Block.analyseCode(Block.java:36)
	at org.eclipse.jdt.internal.compiler.ast.IfStatement.analyseCode(IfStatement.java:99)
	at org.eclipse.jdt.internal.compiler.ast.Block.analyseCode(Block.java:36)
	at org.eclipse.jdt.internal.compiler.ast.TryStatement.analyseCode(TryStatement.java:102)
	at org.eclipse.jdt.internal.compiler.ast.Block.analyseCode(Block.java:36)
	at org.eclipse.jdt.internal.compiler.ast.IfStatement.analyseCode(IfStatement.java:99)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.analyseCode(MethodDeclaration.java:89)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.internalAnalyseCode(TypeDeclaration.java:695)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.analyseCode(TypeDeclaration.java:253)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.analyseCode(CompilationUnitDeclaration.java:111)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:1184)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:681)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1175)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:801)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:543)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:536)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:479)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:126)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.getOverrideIndicators(OverrideIndicatorLabelDecorator.java:161)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.computeAdornmentFlags(OverrideIndicatorLabelDecorator.java:136)
	at org.eclipse.jdt.ui.OverrideIndicatorLabelDecorator.decorate(OverrideIndicatorLabelDecorator.java:273)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorDefinition.decorate(LightweightDecoratorDefinition.java:269)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager$LightweightRunnable.run(LightweightDecoratorManager.java:81)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.decorate(LightweightDecoratorManager.java:365)
	at org.eclipse.ui.internal.decorators.LightweightDecoratorManager.getDecorations(LightweightDecoratorManager.java:347)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.ensureResultCached(DecorationScheduler.java:371)
	at org.eclipse.ui.internal.decorators.DecorationScheduler$1.run(DecorationScheduler.java:331)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)


Reproducible: Always</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1859932</commentid>
    <comment_count>1</comment_count>
    <who name="Claudiu Soroiu">csoroiu</who>
    <bug_when>2010-12-22 09:00:38 -0500</bug_when>
    <thetext>i was getting the same thing with 3.7M3.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1860074</commentid>
    <comment_count>2</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2010-12-22 11:52:27 -0500</bug_when>
    <thetext>Incidentally, I noticed a scope for an AIOOBE in that part of the code just yesterday. But wasnt sure if there can indeed be a case which could result in one. I think I have a fair idea of how this can be fixed. I&apos;ll provide a patch here in some time. It&apos;ll be great if you can apply it and then see if it works for you. Or you can simply test the next N build.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1860079</commentid>
    <comment_count>3</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2010-12-22 12:00:26 -0500</bug_when>
    <thetext>I guess this can happen when we are trying to reset the null info for a local variable that has not yet been encountered in the analysis. Thats why the extra vector hasn&apos;t grown enough to accomodate it, and now we&apos;re trying to reset a bit that doesnt exist.

I think a simple check 

if (this.extra == null || vectorIndex &gt;= this.extra[2].length)
   return;

in UnconditionalFlowInfo.resetNullInfo(..) should work here and prevent the AIOOBE, as well as a possible NPE.
Stephan, what do you think?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1860133</commentid>
    <comment_count>4</comment_count>
      <attachid>185732</attachid>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2010-12-22 14:55:30 -0500</bug_when>
    <thetext>Created attachment 185732
proposed fix</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1860147</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2010-12-22 15:37:19 -0500</bug_when>
    <thetext>(In reply to comment #3)
&gt; I guess this can happen when we are trying to reset the null info for a local
&gt; variable that has not yet been encountered in the analysis. Thats why the extra
&gt; vector hasn&apos;t grown enough to accomodate it, and now we&apos;re trying to reset a
&gt; bit that doesnt exist.
&gt; 
&gt; I think a simple check 
&gt; 
&gt; if (this.extra == null || vectorIndex &gt;= this.extra[2].length)
&gt;    return;
&gt; 
&gt; in UnconditionalFlowInfo.resetNullInfo(..) should work here and prevent the
&gt; AIOOBE, as well as a possible NPE.
&gt; Stephan, what do you think?

So this is the root cause and fix regarding bug 247564 comment 19?
From a quick glance this looks good to me.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1860262</commentid>
    <comment_count>6</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2010-12-23 05:31:06 -0500</bug_when>
    <thetext>(In reply to comment #5)
&gt; [..]
&gt; So this is the root cause and fix regarding bug 247564 comment 19?
&gt; From a quick glance this looks good to me.

Yeah, that&apos;s right. I guess I&apos;ll go ahead and release it by end of today.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1864550</commentid>
    <comment_count>7</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-01-10 12:50:02 -0500</bug_when>
    <thetext>Ayushman, could you please release the fix for tomorrow&apos;s I-build?
Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1864842</commentid>
    <comment_count>8</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-01-11 01:11:22 -0500</bug_when>
    <thetext>(In reply to comment #7)
&gt; Ayushman, could you please release the fix for tomorrow&apos;s I-build?
&gt; Thanks.

I was waiting for bug 247564, since this fix is also part of the patch for that bug. If I release this, I&apos;ll have to redo that patch for that bug, which Stephan is in the process of reviewing. So its better to wait a couple of days.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1868483</commentid>
    <comment_count>9</comment_count>
      <attachid>186988</attachid>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-01-18 06:07:57 -0500</bug_when>
    <thetext>Created attachment 186988
proposed fix v1.1 + regression tests

Same fix as above in resetNullInfo. Extended the handling of error scenarios (extra array being null or crrent index being greater than array length) to markPotentiallyNullBit(), markPotentiallyUnknownBit(), markPotentiallyNonNullBit() and implemented them in NullInfoRegistry (since here is when the erreneous condition can happen).
Added test in NullReferenceTest</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1868633</commentid>
    <comment_count>10</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-01-18 10:12:43 -0500</bug_when>
    <thetext>(In reply to comment #9)
&gt; Created attachment 186988 [details]
&gt; proposed fix v1.1 + regression tests
&gt; 
&gt; Same fix as above in resetNullInfo. Extended the handling of error scenarios
&gt; (extra array being null or crrent index being greater than array length) to
&gt; markPotentiallyNullBit(), markPotentiallyUnknownBit(),
&gt; markPotentiallyNonNullBit() and implemented them in NullInfoRegistry (since
&gt; here is when the erreneous condition can happen).
&gt; Added test in NullReferenceTest

Ah, so this is where the extra changes in bug 247564 comment 25 come from :)

While the change looks good, I wonder if it&apos;d be better to apply those
extra checks to the super methods in UnconditionalFlowInfo instead.
I couldn&apos;t find a witness for trouble in UnconditionFlowInfo, but that
seems to be based only on a fragile connection: it happens that in the
case of using an UnconditionalFlowInfo always before calling markNullStatus
on some path we call something like markAsComparedEqualToNonNull
or markAsDefinitelyAssigned, which already have the array growing.
I wouldn&apos;t, however, consider this a very robust contract to rely on.

One reason why I&apos;m concerned about those existing methods is that
I actually introduced them and forgot about array growing.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1868637</commentid>
    <comment_count>11</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-01-18 10:18:28 -0500</bug_when>
    <thetext>(In reply to comment #10)
&gt; (In reply to comment #9)
&gt; [..]
&gt; Ah, so this is where the extra changes in bug 247564 comment 25 come from :)
&gt; 
&gt; While the change looks good, I wonder if it&apos;d be better to apply those
&gt; extra checks to the super methods in UnconditionalFlowInfo instead.
&gt; I couldn&apos;t find a witness for trouble in UnconditionFlowInfo, but that
&gt; seems to be based only on a fragile connection: it happens that in the
&gt; case of using an UnconditionalFlowInfo always before calling markNullStatus
&gt; on some path we call something like markAsComparedEqualToNonNull
&gt; or markAsDefinitelyAssigned, which already have the array growing.
&gt; I wouldn&apos;t, however, consider this a very robust contract to rely on.

Exactly! As far as the code stands now, UnconditionalFlowInfo seems pretty safe. And yet, while working on bug 247564, I had added these checks to the super methods in UnconditionalFlowInfo as well, to safegaurd it from future changes. So, I thought I&apos;d just skip those for this bug, and address the only the cause in the NullInfoRegistry. 
Do you think we&apos;d better include the part in UnconditionalFlowInfo in this bug itself, or ok to leave in the patch for bug 247564?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1868650</commentid>
    <comment_count>12</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-01-18 10:30:08 -0500</bug_when>
    <thetext>(In reply to comment #11)
&gt; Exactly! As far as the code stands now, UnconditionalFlowInfo seems pretty
&gt; safe. And yet, while working on bug 247564, I had added these checks to the
&gt; super methods in UnconditionalFlowInfo as well, to safegaurd it from future
&gt; changes. So, I thought I&apos;d just skip those for this bug, and address the only
&gt; the cause in the NullInfoRegistry. 
&gt; Do you think we&apos;d better include the part in UnconditionalFlowInfo in this bug
&gt; itself, or ok to leave in the patch for bug 247564?

I&apos;d prefer to fix the array initialization/growing stuff once (and for all?)
in this bug. And we wouldn&apos;t at all need the markPotentially.. methods in 
NullInforRegistry, no?
Wouldn&apos;t that also make the patch in bug 247564 easier to understand?

But, as long as everything is fixed by the sum of these two bugs, it&apos;s fine
I guess :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1868653</commentid>
    <comment_count>13</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-01-18 10:33:25 -0500</bug_when>
    <thetext>(In reply to comment #12)
&gt; [..]
&gt; I&apos;d prefer to fix the array initialization/growing stuff once (and for all?)
&gt; in this bug.
Ok, lemme put up a new patch here then.

&gt; And we wouldn&apos;t at all need the markPotentially.. methods in 
&gt; NullInforRegistry, no?
Nope. Actually, for NullInfoRegistry we dont have to deal with the indexes 0 and 1 since theyre only for initialization info. But in UnconditionalFlowInfo, we have to deal with these bits too. So, although the difference is subtle, it cant be properly handled simply in UnconditionalFlowInfo.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1868733</commentid>
    <comment_count>14</comment_count>
      <attachid>187020</attachid>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-01-18 12:09:46 -0500</bug_when>
    <thetext>Created attachment 187020
proposed fix v1.2 + regression tests

This patch also adds the safeguards to UnconditionalFlowInfo.mark... methods</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1868745</commentid>
    <comment_count>15</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-01-18 12:35:10 -0500</bug_when>
    <thetext>Ayushman, please update the title to something more meaningful.
Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1869052</commentid>
    <comment_count>16</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-01-19 00:31:14 -0500</bug_when>
    <thetext>Released in HEAD for 3.7M5</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1869067</commentid>
    <comment_count>17</comment_count>
      <attachid>187078</attachid>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-01-19 01:45:35 -0500</bug_when>
    <thetext>Created attachment 187078
patch actually released

This is the patch that actually got released. I&apos;d put the older patch by mistake as v1.2 again.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1872315</commentid>
    <comment_count>18</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-01-25 06:23:27 -0500</bug_when>
    <thetext>Verified for 3.7M5 using build I20110124-1800</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1876879</commentid>
    <comment_count>19</comment_count>
    <who name="Claudiu Soroiu">csoroiu</who>
    <bug_when>2011-02-02 03:24:27 -0500</bug_when>
    <thetext>I confirm that the issue is fixed in 3.7M5 that i just installed.
I do not get he AIOOBE anymore for that target branch.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>185732</attachid>
            <date>2010-12-22 14:55:00 -0500</date>
            <delta_ts>2011-01-18 06:07:57 -0500</delta_ts>
            <desc>proposed fix</desc>
            <filename>patch333089.txt</filename>
            <type>text/plain</type>
            <size>1316</size>
            <attacher name="Ayushman Jain">amj87.iitr</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMA0KI1Agb3JnLmVjbGlwc2UuamR0LmNvcmUN
CkluZGV4OiBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvZmxvdy9V
bmNvbmRpdGlvbmFsRmxvd0luZm8uamF2YQ0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KUkNTIGZpbGU6IC9jdnNyb290
L2VjbGlwc2Uvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2Zsb3cvVW5jb25kaXRpb25hbEZsb3dJbmZvLmphdmEsdg0KcmV0cmll
dmluZyByZXZpc2lvbiAxLjcxDQpkaWZmIC11IC1yMS43MSBVbmNvbmRpdGlvbmFsRmxvd0luZm8u
amF2YQ0KLS0tIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9mbG93
L1VuY29uZGl0aW9uYWxGbG93SW5mby5qYXZhCTE2IERlYyAyMDEwIDEzOjAyOjMwIC0wMDAwCTEu
NzENCisrKyBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvZmxvdy9V
bmNvbmRpdGlvbmFsRmxvd0luZm8uamF2YQkyMiBEZWMgMjAxMCAxOTo1NToxNCAtMDAwMA0KQEAg
LTEzNjcsOCArMTM2NywxMyBAQA0KICAgICAgICAgICAgIHRoaXMubnVsbEJpdDQgJj0gbWFzazsN
CiAgICAgICAgIH0gZWxzZSB7DQogICAgIAkJLy8gdXNlIGV4dHJhIHZlY3Rvcg0KLSAgICAJCWlu
dCB2ZWN0b3JJbmRleCA7DQotICAgIAkJdGhpcy5leHRyYVsyXVt2ZWN0b3JJbmRleCA9IChwb3Np
dGlvbiAvIEJpdENhY2hlU2l6ZSkgLSAxXQ0KKyAgICAJCWludCB2ZWN0b3JJbmRleCA9IChwb3Np
dGlvbiAvIEJpdENhY2hlU2l6ZSkgLSAxOw0KKyAgICAJCWlmICh0aGlzLmV4dHJhID09IG51bGwg
fHwgdmVjdG9ySW5kZXggPj0gdGhpcy5leHRyYVsyXS5sZW5ndGgpIHsNCisgICAgCQkJLy8gaW4g
Y2FzZSB3ZSBhdHRlbXB0IHRvIHJlc2V0IHRoZSBudWxsIGluZm8gb2YgYSB2YXJpYWJsZSB0aGF0
IGhhcyBub3QgYmVlbiBlbmNvdW50ZXJlZA0KKyAgICAJCQkvLyBiZWZvcmUgYW5kIGZvciB3aGlj
aCBubyBudWxsIGJpdHMgZXhpc3QuDQorICAgIAkJCXJldHVybjsNCisgICAgCQl9DQorICAgIAkJ
dGhpcy5leHRyYVsyXVt2ZWN0b3JJbmRleF0NCiAgICAgCQkgICAgJj0gKG1hc2sgPSB+KDFMIDw8
IChwb3NpdGlvbiAlIEJpdENhY2hlU2l6ZSkpKTsNCiAgICAgCQl0aGlzLmV4dHJhWzNdW3ZlY3Rv
ckluZGV4XSAmPSBtYXNrOw0KICAgICAJCXRoaXMuZXh0cmFbNF1bdmVjdG9ySW5kZXhdICY9IG1h
c2s7DQo=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>186988</attachid>
            <date>2011-01-18 06:07:00 -0500</date>
            <delta_ts>2011-01-18 12:09:46 -0500</delta_ts>
            <desc>proposed fix v1.1 + regression tests</desc>
            <filename>patch333089.txt</filename>
            <type>text/plain</type>
            <size>10404</size>
            <attacher name="Ayushman Jain">amj87.iitr</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMA0KI1Agb3JnLmVjbGlwc2UuamR0LmNvcmUN
CkluZGV4OiBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvZmxvdy9O
dWxsSW5mb1JlZ2lzdHJ5LmphdmENCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NClJDUyBmaWxlOiAvY3Zzcm9vdC9lY2xp
cHNlL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9mbG93L051bGxJbmZvUmVnaXN0cnkuamF2YSx2DQpyZXRyaWV2aW5nIHJldmlz
aW9uIDEuMTENCmRpZmYgLXUgLXIxLjExIE51bGxJbmZvUmVnaXN0cnkuamF2YQ0KLS0tIGNvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9mbG93L051bGxJbmZvUmVnaXN0
cnkuamF2YQkxOSBBdWcgMjAxMCAxMDozODo0NiAtMDAwMAkxLjExDQorKysgY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Zsb3cvTnVsbEluZm9SZWdpc3RyeS5qYXZh
CTE4IEphbiAyMDExIDExOjAwOjM5IC0wMDAwDQpAQCAtMSw1ICsxLDUgQEANCiAvKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKg0KLSAqIENvcHlyaWdodCAoYykgMjAwNiwgMjAxMCBJQk0gQ29ycG9yYXRp
b24gYW5kIG90aGVycy4NCisgKiBDb3B5cmlnaHQgKGMpIDIwMDYsIDIwMTEgSUJNIENvcnBvcmF0
aW9uIGFuZCBvdGhlcnMuDQogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFu
ZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscw0KICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRl
ciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMA0KICAqIHdoaWNo
IGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0DQpAQCAt
NDAyLDUgKzQwMiwxNDggQEANCiAJCQlyZXR1cm4gbnVsbFMgKyAiXT4iOyAvLyROT04tTkxTLTEk
DQogCX0NCiB9DQorDQorLyoqDQorICogTWFyayBhIGxvY2FsIGFzIHBvdGVudGlhbGx5IGhhdmlu
ZyBiZWVuIGFzc2lnbmVkIHRvIGFuIHVua25vd24gdmFsdWUuDQorICogQHBhcmFtIGxvY2FsIHRo
ZSBsb2NhbCB0byBtYXJrDQorICovDQorcHVibGljIHZvaWQgbWFya1BvdGVudGlhbGx5VW5rbm93
bkJpdChMb2NhbFZhcmlhYmxlQmluZGluZyBsb2NhbCkgew0KKwkvLyBwcm90ZWN0ZWQgZnJvbSBu
b24tb2JqZWN0IGxvY2FscyBpbiBjYWxsaW5nIG1ldGhvZHMNCisJaWYgKHRoaXMgIT0gREVBRF9F
TkQpIHsNCisJCXRoaXMudGFnQml0cyB8PSBOVUxMX0ZMQUdfTUFTSzsNCisgICAgICAgIGludCBw
b3NpdGlvbjsNCisgICAgICAgIGxvbmcgbWFzazsNCisgICAgICAgIGlmICgocG9zaXRpb24gPSBs
b2NhbC5pZCArIHRoaXMubWF4RmllbGRDb3VudCkgPCBCaXRDYWNoZVNpemUpIHsNCisgICAgICAg
ICAgICAvLyB1c2UgYml0cw0KKyAgICAgICAgCW1hc2sgPSAxTCA8PCBwb3NpdGlvbjsNCisgICAg
ICAgIAlpc1RydWUoKHRoaXMubnVsbEJpdDEgJiBtYXNrKSA9PSAwLCAiQWRkaW5nICd1bmtub3du
JyBtYXJrIGluIHVuZXhwZWN0ZWQgc3RhdGUiKTsgLy8kTk9OLU5MUy0xJA0KKyAgICAgICAgICAg
IHRoaXMubnVsbEJpdDQgfD0gbWFzazsNCisgICAgICAgICAgICBpZiAoQ09WRVJBR0VfVEVTVF9G
TEFHKSB7DQorCQkJCWlmKENvdmVyYWdlVGVzdElkID09IDQ2KSB7DQorCQkJCSAgCXRoaXMubnVs
bEJpdDQgPSB+MDsNCisJCQkJfQ0KKwkJCX0NCisgICAgICAgIH0gZWxzZSB7DQorICAgIAkJLy8g
dXNlIGV4dHJhIHZlY3Rvcg0KKyAgICAJCWludCB2ZWN0b3JJbmRleCA9IChwb3NpdGlvbiAvIEJp
dENhY2hlU2l6ZSkgLSAxOw0KKyAgICAJCWlmICh0aGlzLmV4dHJhID09IG51bGwpIHsNCisgICAg
CQkJaW50IGxlbmd0aCA9IHZlY3RvckluZGV4ICsgMTsNCisgICAgCQkJdGhpcy5leHRyYSA9IG5l
dyBsb25nW2V4dHJhTGVuZ3RoXVtdOw0KKyAgICAJCQlmb3IgKGludCBqID0gMjsgaiA8IGV4dHJh
TGVuZ3RoOyBqKyspIHsNCisgICAgCQkJCXRoaXMuZXh0cmFbal0gPSBuZXcgbG9uZ1tsZW5ndGhd
Ow0KKyAgICAJCQl9DQorICAgIAkJfSBlbHNlIHsNCisgICAgCQkJaW50IG9sZExlbmd0aDsgLy8g
bWlnaHQgbmVlZCB0byBncm93IHRoZSBhcnJheXMNCisgICAgCQkJaWYgKHZlY3RvckluZGV4ID49
IChvbGRMZW5ndGggPSB0aGlzLmV4dHJhWzJdLmxlbmd0aCkpIHsNCisgICAgCQkJCWZvciAoaW50
IGogPSAyOyBqIDwgZXh0cmFMZW5ndGg7IGorKykgew0KKyAgICAJCQkJCVN5c3RlbS5hcnJheWNv
cHkodGhpcy5leHRyYVtqXSwgMCwNCisgICAgCQkJCQkJKHRoaXMuZXh0cmFbal0gPSBuZXcgbG9u
Z1t2ZWN0b3JJbmRleCArIDFdKSwgMCwNCisgICAgCQkJCQkJb2xkTGVuZ3RoKTsNCisgICAgCQkJ
CX0NCisgICAgCQkJfQ0KKyAgICAJCX0NCisgICAgCQltYXNrID0gMUwgPDwgKHBvc2l0aW9uICUg
Qml0Q2FjaGVTaXplKTsNCisgICAgCQlpc1RydWUoKHRoaXMuZXh0cmFbMl1bdmVjdG9ySW5kZXhd
ICYgbWFzaykgPT0gMCwgIkFkZGluZyAndW5rbm93bicgbWFyayBpbiB1bmV4cGVjdGVkIHN0YXRl
Iik7IC8vJE5PTi1OTFMtMSQNCisgICAgCQl0aGlzLmV4dHJhWzVdW3ZlY3RvckluZGV4XSB8PSBt
YXNrOw0KKyAgICAJCWlmIChDT1ZFUkFHRV9URVNUX0ZMQUcpIHsNCisJCQkJaWYoQ292ZXJhZ2VU
ZXN0SWQgPT0gNDcpIHsNCisJCQkJCXRoaXMuZXh0cmFbNV1bdmVjdG9ySW5kZXhdID0gfjA7DQor
CQkJCX0NCisJCQl9DQorICAgIAl9DQorCX0NCit9DQorDQorcHVibGljIHZvaWQgbWFya1BvdGVu
dGlhbGx5TnVsbEJpdChMb2NhbFZhcmlhYmxlQmluZGluZyBsb2NhbCkgew0KKwlpZiAodGhpcyAh
PSBERUFEX0VORCkgew0KKwkJdGhpcy50YWdCaXRzIHw9IE5VTExfRkxBR19NQVNLOw0KKyAgICAg
ICAgaW50IHBvc2l0aW9uOw0KKyAgICAgICAgbG9uZyBtYXNrOw0KKyAgICAgICAgaWYgKChwb3Np
dGlvbiA9IGxvY2FsLmlkICsgdGhpcy5tYXhGaWVsZENvdW50KSA8IEJpdENhY2hlU2l6ZSkgew0K
KyAgICAgICAgICAgIC8vIHVzZSBiaXRzDQorICAgICAgICAJbWFzayA9IDFMIDw8IHBvc2l0aW9u
Ow0KKyAgICAgICAgCWlzVHJ1ZSgodGhpcy5udWxsQml0MSAmIG1hc2spID09IDAsICJBZGRpbmcg
J3BvdGVudGlhbGx5IG51bGwnIG1hcmsgaW4gdW5leHBlY3RlZCBzdGF0ZSIpOyAvLyROT04tTkxT
LTEkDQorICAgICAgICAgICAgdGhpcy5udWxsQml0MiB8PSBtYXNrOw0KKyAgICAgICAgICAgIGlm
IChDT1ZFUkFHRV9URVNUX0ZMQUcpIHsNCisJCQkJaWYoQ292ZXJhZ2VUZXN0SWQgPT0gNDApIHsN
CisJCQkJICAJdGhpcy5udWxsQml0NCA9IH4wOw0KKwkJCQl9DQorCQkJfQ0KKyAgICAgICAgfSBl
bHNlIHsNCisgICAgCQkvLyB1c2UgZXh0cmEgdmVjdG9yDQorICAgIAkJaW50IHZlY3RvckluZGV4
ID0gKHBvc2l0aW9uIC8gQml0Q2FjaGVTaXplKSAtIDE7DQorICAgIAkJaWYgKHRoaXMuZXh0cmEg
PT0gbnVsbCkgew0KKyAgICAJCQlpbnQgbGVuZ3RoID0gdmVjdG9ySW5kZXggKyAxOw0KKyAgICAJ
CQl0aGlzLmV4dHJhID0gbmV3IGxvbmdbZXh0cmFMZW5ndGhdW107DQorICAgIAkJCWZvciAoaW50
IGogPSAyOyBqIDwgZXh0cmFMZW5ndGg7IGorKykgew0KKyAgICAJCQkJdGhpcy5leHRyYVtqXSA9
IG5ldyBsb25nW2xlbmd0aF07DQorICAgIAkJCX0NCisgICAgCQl9IGVsc2Ugew0KKyAgICAJCQlp
bnQgb2xkTGVuZ3RoOyAvLyBtaWdodCBuZWVkIHRvIGdyb3cgdGhlIGFycmF5cw0KKyAgICAJCQlp
ZiAodmVjdG9ySW5kZXggPj0gKG9sZExlbmd0aCA9IHRoaXMuZXh0cmFbMl0ubGVuZ3RoKSkgew0K
KyAgICAJCQkJZm9yIChpbnQgaiA9IDI7IGogPCBleHRyYUxlbmd0aDsgaisrKSB7DQorICAgIAkJ
CQkJU3lzdGVtLmFycmF5Y29weSh0aGlzLmV4dHJhW2pdLCAwLA0KKyAgICAJCQkJCQkodGhpcy5l
eHRyYVtqXSA9IG5ldyBsb25nW3ZlY3RvckluZGV4ICsgMV0pLCAwLA0KKyAgICAJCQkJCQlvbGRM
ZW5ndGgpOw0KKyAgICAJCQkJfQ0KKyAgICAJCQl9DQorICAgIAkJfQ0KKyAgICAJCW1hc2sgPSAx
TCA8PCAocG9zaXRpb24gJSBCaXRDYWNoZVNpemUpOw0KKyAgICAJCXRoaXMuZXh0cmFbM11bdmVj
dG9ySW5kZXhdIHw9IG1hc2s7DQorICAgIAkJaXNUcnVlKCh0aGlzLmV4dHJhWzJdW3ZlY3Rvcklu
ZGV4XSAmIG1hc2spID09IDAsICJBZGRpbmcgJ3BvdGVudGlhbGx5IG51bGwnIG1hcmsgaW4gdW5l
eHBlY3RlZCBzdGF0ZSIpOyAvLyROT04tTkxTLTEkDQorICAgIAkJaWYgKENPVkVSQUdFX1RFU1Rf
RkxBRykgew0KKwkJCQlpZihDb3ZlcmFnZVRlc3RJZCA9PSA0MSkgew0KKwkJCQkJdGhpcy5leHRy
YVs1XVt2ZWN0b3JJbmRleF0gPSB+MDsNCisJCQkJfQ0KKwkJCX0NCisgICAgCX0NCisJfQ0KK30N
CisNCitwdWJsaWMgdm9pZCBtYXJrUG90ZW50aWFsbHlOb25OdWxsQml0KExvY2FsVmFyaWFibGVC
aW5kaW5nIGxvY2FsKSB7DQorCWlmICh0aGlzICE9IERFQURfRU5EKSB7DQorCQl0aGlzLnRhZ0Jp
dHMgfD0gTlVMTF9GTEFHX01BU0s7DQorICAgICAgICBpbnQgcG9zaXRpb247DQorICAgICAgICBs
b25nIG1hc2s7DQorICAgICAgICBpZiAoKHBvc2l0aW9uID0gbG9jYWwuaWQgKyB0aGlzLm1heEZp
ZWxkQ291bnQpIDwgQml0Q2FjaGVTaXplKSB7DQorICAgICAgICAgICAgLy8gdXNlIGJpdHMNCisg
ICAgICAgIAltYXNrID0gMUwgPDwgcG9zaXRpb247DQorICAgICAgICAJaXNUcnVlKCh0aGlzLm51
bGxCaXQxICYgbWFzaykgPT0gMCwgIkFkZGluZyAncG90ZW50aWFsbHkgbm9uLW51bGwnIG1hcmsg
aW4gdW5leHBlY3RlZCBzdGF0ZSIpOyAvLyROT04tTkxTLTEkDQorICAgICAgICAgICAgdGhpcy5u
dWxsQml0MyB8PSBtYXNrOw0KKyAgICAgICAgICAgIGlmIChDT1ZFUkFHRV9URVNUX0ZMQUcpIHsN
CisJCQkJaWYoQ292ZXJhZ2VUZXN0SWQgPT0gNDIpIHsNCisJCQkJICAJdGhpcy5udWxsQml0NCA9
IH4wOw0KKwkJCQl9DQorCQkJfQ0KKyAgICAgICAgfSBlbHNlIHsNCisgICAgCQkvLyB1c2UgZXh0
cmEgdmVjdG9yDQorICAgIAkJaW50IHZlY3RvckluZGV4ICA9IChwb3NpdGlvbiAvIEJpdENhY2hl
U2l6ZSkgLSAxOw0KKyAgICAJCWlmICh0aGlzLmV4dHJhID09IG51bGwpIHsNCisgICAgCQkJaW50
IGxlbmd0aCA9IHZlY3RvckluZGV4ICsgMTsNCisgICAgCQkJdGhpcy5leHRyYSA9IG5ldyBsb25n
W2V4dHJhTGVuZ3RoXVtdOw0KKyAgICAJCQlmb3IgKGludCBqID0gMjsgaiA8IGV4dHJhTGVuZ3Ro
OyBqKyspIHsNCisgICAgCQkJCXRoaXMuZXh0cmFbal0gPSBuZXcgbG9uZ1tsZW5ndGhdOw0KKyAg
ICAJCQl9DQorICAgIAkJfSBlbHNlIHsNCisgICAgCQkJaW50IG9sZExlbmd0aDsgLy8gbWlnaHQg
bmVlZCB0byBncm93IHRoZSBhcnJheXMNCisgICAgCQkJaWYgKHZlY3RvckluZGV4ID49IChvbGRM
ZW5ndGggPSB0aGlzLmV4dHJhWzJdLmxlbmd0aCkpIHsNCisgICAgCQkJCWZvciAoaW50IGogPSAy
OyBqIDwgZXh0cmFMZW5ndGg7IGorKykgew0KKyAgICAJCQkJCVN5c3RlbS5hcnJheWNvcHkodGhp
cy5leHRyYVtqXSwgMCwNCisgICAgCQkJCQkJKHRoaXMuZXh0cmFbal0gPSBuZXcgbG9uZ1t2ZWN0
b3JJbmRleCArIDFdKSwgMCwNCisgICAgCQkJCQkJb2xkTGVuZ3RoKTsNCisgICAgCQkJCX0NCisg
ICAgCQkJfQ0KKyAgICAJCX0NCisgICAgCQltYXNrID0gMUwgPDwgKHBvc2l0aW9uICUgQml0Q2Fj
aGVTaXplKTsNCisgICAgCQlpc1RydWUoKHRoaXMuZXh0cmFbMl1bdmVjdG9ySW5kZXhdICYgbWFz
aykgPT0gMCwgIkFkZGluZyAncG90ZW50aWFsbHkgbm9uLW51bGwnIG1hcmsgaW4gdW5leHBlY3Rl
ZCBzdGF0ZSIpOyAvLyROT04tTkxTLTEkDQorICAgIAkJdGhpcy5leHRyYVs0XVt2ZWN0b3JJbmRl
eF0gfD0gbWFzazsNCisgICAgCQlpZiAoQ09WRVJBR0VfVEVTVF9GTEFHKSB7DQorCQkJCWlmKENv
dmVyYWdlVGVzdElkID09IDQzKSB7DQorCQkJCQl0aGlzLmV4dHJhWzVdW3ZlY3RvckluZGV4XSA9
IH4wOw0KKwkJCQl9DQorCQkJfQ0KKyAgICAJfQ0KKwl9DQorfQ0KIH0NCiANCkluZGV4OiBjb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvZmxvdy9VbmNvbmRpdGlvbmFs
Rmxvd0luZm8uamF2YQ0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PQ0KUkNTIGZpbGU6IC9jdnNyb290L2VjbGlwc2Uvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2Zsb3cvVW5jb25kaXRpb25hbEZsb3dJbmZvLmphdmEsdg0KcmV0cmlldmluZyByZXZpc2lv
biAxLjcxDQpkaWZmIC11IC1yMS43MSBVbmNvbmRpdGlvbmFsRmxvd0luZm8uamF2YQ0KLS0tIGNv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9mbG93L1VuY29uZGl0aW9u
YWxGbG93SW5mby5qYXZhCTE2IERlYyAyMDEwIDEzOjAyOjMwIC0wMDAwCTEuNzENCisrKyBjb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvZmxvdy9VbmNvbmRpdGlvbmFs
Rmxvd0luZm8uamF2YQkxOCBKYW4gMjAxMSAxMTowMDozOSAtMDAwMA0KQEAgLTEsNSArMSw1IEBA
DQogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioNCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTAg
SUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuDQorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEx
IElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLg0KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRo
aXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMNCiAgKiBhcmUgbWFkZSBh
dmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYx
LjANCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWls
YWJsZSBhdA0KQEAgLTk5Niw3ICs5OTYsNyBAQA0KICAqIEByZXR1cm4gPGNvZGU+dHJ1ZTwvY29k
ZT4gaWYgdGhlIGNoZWNrIHBhc3NlcyAoZG9lcyBub3QgcmV0dXJuDQogICogICAgaWYgdGhlIGNo
ZWNrIGZhaWxzKQ0KICAqLw0KLXByaXZhdGUgc3RhdGljIGJvb2xlYW4gaXNUcnVlKGJvb2xlYW4g
ZXhwcmVzc2lvbiwgU3RyaW5nIG1lc3NhZ2UpIHsNCitwcm90ZWN0ZWQgc3RhdGljIGJvb2xlYW4g
aXNUcnVlKGJvb2xlYW4gZXhwcmVzc2lvbiwgU3RyaW5nIG1lc3NhZ2UpIHsNCiAJaWYgKCFleHBy
ZXNzaW9uKQ0KIAkJdGhyb3cgbmV3IEFzc2VydGlvbkZhaWxlZEV4Y2VwdGlvbigiYXNzZXJ0aW9u
IGZhaWxlZDogIiArIG1lc3NhZ2UpOyAvLyROT04tTkxTLTEkDQogCXJldHVybiBleHByZXNzaW9u
Ow0KQEAgLTEzNjcsOCArMTM2NywxMyBAQA0KICAgICAgICAgICAgIHRoaXMubnVsbEJpdDQgJj0g
bWFzazsNCiAgICAgICAgIH0gZWxzZSB7DQogICAgIAkJLy8gdXNlIGV4dHJhIHZlY3Rvcg0KLSAg
ICAJCWludCB2ZWN0b3JJbmRleCA7DQotICAgIAkJdGhpcy5leHRyYVsyXVt2ZWN0b3JJbmRleCA9
IChwb3NpdGlvbiAvIEJpdENhY2hlU2l6ZSkgLSAxXQ0KKyAgICAJCWludCB2ZWN0b3JJbmRleCA9
IChwb3NpdGlvbiAvIEJpdENhY2hlU2l6ZSkgLSAxOw0KKyAgICAJCWlmICh0aGlzLmV4dHJhID09
IG51bGwgfHwgdmVjdG9ySW5kZXggPj0gdGhpcy5leHRyYVsyXS5sZW5ndGgpIHsNCisgICAgCQkJ
Ly8gaW4gY2FzZSB3ZSBhdHRlbXB0IHRvIHJlc2V0IHRoZSBudWxsIGluZm8gb2YgYSB2YXJpYWJs
ZSB0aGF0IGhhcyBub3QgYmVlbiBlbmNvdW50ZXJlZA0KKyAgICAJCQkvLyBiZWZvcmUgYW5kIGZv
ciB3aGljaCBubyBudWxsIGJpdHMgZXhpc3QuDQorICAgIAkJCXJldHVybjsNCisgICAgCQl9DQor
ICAgIAkJdGhpcy5leHRyYVsyXVt2ZWN0b3JJbmRleF0NCiAgICAgCQkgICAgJj0gKG1hc2sgPSB+
KDFMIDw8IChwb3NpdGlvbiAlIEJpdENhY2hlU2l6ZSkpKTsNCiAgICAgCQl0aGlzLmV4dHJhWzNd
W3ZlY3RvckluZGV4XSAmPSBtYXNrOw0KICAgICAJCXRoaXMuZXh0cmFbNF1bdmVjdG9ySW5kZXhd
ICY9IG1hc2s7DQojUCBvcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlcg0KSW5kZXg6
IHNyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxS
ZWZlcmVuY2VUZXN0LmphdmENCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NClJDUyBmaWxlOiAvY3Zzcm9vdC9lY2xpcHNl
L29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQv
Y29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxSZWZlcmVuY2VUZXN0LmphdmEsdg0K
cmV0cmlldmluZyByZXZpc2lvbiAxLjEwOA0KZGlmZiAtdSAtcjEuMTA4IE51bGxSZWZlcmVuY2VU
ZXN0LmphdmENCi0tLSBzcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVn
cmVzc2lvbi9OdWxsUmVmZXJlbmNlVGVzdC5qYXZhCTE4IERlYyAyMDEwIDIyOjA5OjQ4IC0wMDAw
CTEuMTA4DQorKysgc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jl
c3Npb24vTnVsbFJlZmVyZW5jZVRlc3QuamF2YQkxOCBKYW4gMjAxMSAxMTowMDo0MiAtMDAwMA0K
QEAgLTEsNSArMSw1IEBADQogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCi0gKiBDb3B5cmlnaHQg
KGMpIDIwMDUsIDIwMTAgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuDQorICogQ29weXJpZ2h0
IChjKSAyMDA1LCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLg0KICAqIEFsbCByaWdo
dHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMN
CiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1
YmxpYyBMaWNlbnNlIHYxLjANCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlv
biwgYW5kIGlzIGF2YWlsYWJsZSBhdA0KQEAgLTEzODA2LDQgKzEzODA2LDMwIEBADQogCQkiRG9u
ZVxuIiArIA0KIAkJIi0xIik7DQogfQ0KKw0KKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9i
dWdzL3Nob3dfYnVnLmNnaT9pZD0zMzMwODkgDQorLy8gbnVsbCBhbmFseXNpcyAtLSB0byBtYWtl
IHN1cmUgbm8gQUlPT0JFIG9yIE5QRSBpcyB0aHJvd24gd2hpbGUgY2FsbGluZyBVbmNvbmRpdGlv
bmFsRmxvd0luZm8ubWFya051bGxTdGF0dXMoLi4pDQorcHVibGljIHZvaWQgdGVzdEJ1ZzMzMzA4
OSgpIHsNCisJdGhpcy5ydW5Db25mb3JtVGVzdCgNCisJCW5ldyBTdHJpbmdbXSB7DQorCQkJIlgu
amF2YSIsDQorCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKyANCisJCQkiCXB1YmxpYyBzdGF0aWMg
dm9pZCBmb28oT2JqZWN0IHMxKSB7XG4iICsgDQorCSAgICAgICAgIiAgICBpbnQgaTAwLCBpMDEs
IGkwMiwgaTAzLCBpMDQsIGkwNSwgaTA2LCBpMDcsIGkwOCwgaTA5O1xuIiArDQorCSAgICAgICAg
IiAgICBpbnQgaTEwLCBpMTEsIGkxMiwgaTEzLCBpMTQsIGkxNSwgaTE2LCBpMTcsIGkxOCwgaTE5
O1xuIiArDQorCSAgICAgICAgIiAgICBpbnQgaTIwLCBpMjEsIGkyMiwgaTIzLCBpMjQsIGkyNSwg
aTI2LCBpMjcsIGkyOCwgaTI5O1xuIiArDQorCSAgICAgICAgIiAgICBpbnQgaTMwLCBpMzEsIGkz
MiwgaTMzLCBpMzQsIGkzNSwgaTM2LCBpMzcsIGkzOCwgaTM5O1xuIiArDQorCSAgICAgICAgIiAg
ICBpbnQgaTQwLCBpNDEsIGk0MiwgaTQzLCBpNDQsIGk0NSwgaTQ2LCBpNDcsIGk0OCwgaTQ5O1xu
IiArDQorCSAgICAgICAgIiAgICBpbnQgaTUwLCBpNTEsIGk1MiwgaTUzLCBpNTQsIGk1NSwgaTU2
LCBpNTcsIGk1OCwgaTU5O1xuIiArDQorCSAgICAgICAgIiAgICBpbnQgaTYwLCBpNjEsIGk2Miwg
aTYzLCBpNjQsIGk2NSwgaTY2LCBpNjcsIGk2OCwgaTY5O1xuIiArDQorCQkJIgkgT2JqZWN0IGxv
Y2FsMTtcbiIgKyANCisJCQkiCSBpZiAoczEgPT0gbnVsbCl7fVxuIiArIA0KKwkJCSIJIHRyeSB7
IiArDQorCQkJIgkJbG9jYWwxID0gczE7XG4iICsNCisJCQkiCSB9IGZpbmFsbHkge1xuIiArDQor
CQkJIgkgfVxuIiArIA0KKwkJCSIJfVxuIiArIA0KKwkJCSJ9In0sDQorCQkiIik7DQorfQ0KIH0N
ClwgTm8gbmV3bGluZSBhdCBlbmQgb2YgZmlsZQ0K
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>187020</attachid>
            <date>2011-01-18 12:09:00 -0500</date>
            <delta_ts>2011-01-19 01:45:35 -0500</delta_ts>
            <desc>proposed fix v1.2 + regression tests</desc>
            <filename>patch333089.txt</filename>
            <type>text/plain</type>
            <size>10404</size>
            <attacher name="Ayushman Jain">amj87.iitr</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMA0KI1Agb3JnLmVjbGlwc2UuamR0LmNvcmUN
CkluZGV4OiBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvZmxvdy9O
dWxsSW5mb1JlZ2lzdHJ5LmphdmENCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NClJDUyBmaWxlOiAvY3Zzcm9vdC9lY2xp
cHNlL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9mbG93L051bGxJbmZvUmVnaXN0cnkuamF2YSx2DQpyZXRyaWV2aW5nIHJldmlz
aW9uIDEuMTENCmRpZmYgLXUgLXIxLjExIE51bGxJbmZvUmVnaXN0cnkuamF2YQ0KLS0tIGNvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9mbG93L051bGxJbmZvUmVnaXN0
cnkuamF2YQkxOSBBdWcgMjAxMCAxMDozODo0NiAtMDAwMAkxLjExDQorKysgY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Zsb3cvTnVsbEluZm9SZWdpc3RyeS5qYXZh
CTE4IEphbiAyMDExIDExOjAwOjM5IC0wMDAwDQpAQCAtMSw1ICsxLDUgQEANCiAvKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKg0KLSAqIENvcHlyaWdodCAoYykgMjAwNiwgMjAxMCBJQk0gQ29ycG9yYXRp
b24gYW5kIG90aGVycy4NCisgKiBDb3B5cmlnaHQgKGMpIDIwMDYsIDIwMTEgSUJNIENvcnBvcmF0
aW9uIGFuZCBvdGhlcnMuDQogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFu
ZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscw0KICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRl
ciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMA0KICAqIHdoaWNo
IGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0DQpAQCAt
NDAyLDUgKzQwMiwxNDggQEANCiAJCQlyZXR1cm4gbnVsbFMgKyAiXT4iOyAvLyROT04tTkxTLTEk
DQogCX0NCiB9DQorDQorLyoqDQorICogTWFyayBhIGxvY2FsIGFzIHBvdGVudGlhbGx5IGhhdmlu
ZyBiZWVuIGFzc2lnbmVkIHRvIGFuIHVua25vd24gdmFsdWUuDQorICogQHBhcmFtIGxvY2FsIHRo
ZSBsb2NhbCB0byBtYXJrDQorICovDQorcHVibGljIHZvaWQgbWFya1BvdGVudGlhbGx5VW5rbm93
bkJpdChMb2NhbFZhcmlhYmxlQmluZGluZyBsb2NhbCkgew0KKwkvLyBwcm90ZWN0ZWQgZnJvbSBu
b24tb2JqZWN0IGxvY2FscyBpbiBjYWxsaW5nIG1ldGhvZHMNCisJaWYgKHRoaXMgIT0gREVBRF9F
TkQpIHsNCisJCXRoaXMudGFnQml0cyB8PSBOVUxMX0ZMQUdfTUFTSzsNCisgICAgICAgIGludCBw
b3NpdGlvbjsNCisgICAgICAgIGxvbmcgbWFzazsNCisgICAgICAgIGlmICgocG9zaXRpb24gPSBs
b2NhbC5pZCArIHRoaXMubWF4RmllbGRDb3VudCkgPCBCaXRDYWNoZVNpemUpIHsNCisgICAgICAg
ICAgICAvLyB1c2UgYml0cw0KKyAgICAgICAgCW1hc2sgPSAxTCA8PCBwb3NpdGlvbjsNCisgICAg
ICAgIAlpc1RydWUoKHRoaXMubnVsbEJpdDEgJiBtYXNrKSA9PSAwLCAiQWRkaW5nICd1bmtub3du
JyBtYXJrIGluIHVuZXhwZWN0ZWQgc3RhdGUiKTsgLy8kTk9OLU5MUy0xJA0KKyAgICAgICAgICAg
IHRoaXMubnVsbEJpdDQgfD0gbWFzazsNCisgICAgICAgICAgICBpZiAoQ09WRVJBR0VfVEVTVF9G
TEFHKSB7DQorCQkJCWlmKENvdmVyYWdlVGVzdElkID09IDQ2KSB7DQorCQkJCSAgCXRoaXMubnVs
bEJpdDQgPSB+MDsNCisJCQkJfQ0KKwkJCX0NCisgICAgICAgIH0gZWxzZSB7DQorICAgIAkJLy8g
dXNlIGV4dHJhIHZlY3Rvcg0KKyAgICAJCWludCB2ZWN0b3JJbmRleCA9IChwb3NpdGlvbiAvIEJp
dENhY2hlU2l6ZSkgLSAxOw0KKyAgICAJCWlmICh0aGlzLmV4dHJhID09IG51bGwpIHsNCisgICAg
CQkJaW50IGxlbmd0aCA9IHZlY3RvckluZGV4ICsgMTsNCisgICAgCQkJdGhpcy5leHRyYSA9IG5l
dyBsb25nW2V4dHJhTGVuZ3RoXVtdOw0KKyAgICAJCQlmb3IgKGludCBqID0gMjsgaiA8IGV4dHJh
TGVuZ3RoOyBqKyspIHsNCisgICAgCQkJCXRoaXMuZXh0cmFbal0gPSBuZXcgbG9uZ1tsZW5ndGhd
Ow0KKyAgICAJCQl9DQorICAgIAkJfSBlbHNlIHsNCisgICAgCQkJaW50IG9sZExlbmd0aDsgLy8g
bWlnaHQgbmVlZCB0byBncm93IHRoZSBhcnJheXMNCisgICAgCQkJaWYgKHZlY3RvckluZGV4ID49
IChvbGRMZW5ndGggPSB0aGlzLmV4dHJhWzJdLmxlbmd0aCkpIHsNCisgICAgCQkJCWZvciAoaW50
IGogPSAyOyBqIDwgZXh0cmFMZW5ndGg7IGorKykgew0KKyAgICAJCQkJCVN5c3RlbS5hcnJheWNv
cHkodGhpcy5leHRyYVtqXSwgMCwNCisgICAgCQkJCQkJKHRoaXMuZXh0cmFbal0gPSBuZXcgbG9u
Z1t2ZWN0b3JJbmRleCArIDFdKSwgMCwNCisgICAgCQkJCQkJb2xkTGVuZ3RoKTsNCisgICAgCQkJ
CX0NCisgICAgCQkJfQ0KKyAgICAJCX0NCisgICAgCQltYXNrID0gMUwgPDwgKHBvc2l0aW9uICUg
Qml0Q2FjaGVTaXplKTsNCisgICAgCQlpc1RydWUoKHRoaXMuZXh0cmFbMl1bdmVjdG9ySW5kZXhd
ICYgbWFzaykgPT0gMCwgIkFkZGluZyAndW5rbm93bicgbWFyayBpbiB1bmV4cGVjdGVkIHN0YXRl
Iik7IC8vJE5PTi1OTFMtMSQNCisgICAgCQl0aGlzLmV4dHJhWzVdW3ZlY3RvckluZGV4XSB8PSBt
YXNrOw0KKyAgICAJCWlmIChDT1ZFUkFHRV9URVNUX0ZMQUcpIHsNCisJCQkJaWYoQ292ZXJhZ2VU
ZXN0SWQgPT0gNDcpIHsNCisJCQkJCXRoaXMuZXh0cmFbNV1bdmVjdG9ySW5kZXhdID0gfjA7DQor
CQkJCX0NCisJCQl9DQorICAgIAl9DQorCX0NCit9DQorDQorcHVibGljIHZvaWQgbWFya1BvdGVu
dGlhbGx5TnVsbEJpdChMb2NhbFZhcmlhYmxlQmluZGluZyBsb2NhbCkgew0KKwlpZiAodGhpcyAh
PSBERUFEX0VORCkgew0KKwkJdGhpcy50YWdCaXRzIHw9IE5VTExfRkxBR19NQVNLOw0KKyAgICAg
ICAgaW50IHBvc2l0aW9uOw0KKyAgICAgICAgbG9uZyBtYXNrOw0KKyAgICAgICAgaWYgKChwb3Np
dGlvbiA9IGxvY2FsLmlkICsgdGhpcy5tYXhGaWVsZENvdW50KSA8IEJpdENhY2hlU2l6ZSkgew0K
KyAgICAgICAgICAgIC8vIHVzZSBiaXRzDQorICAgICAgICAJbWFzayA9IDFMIDw8IHBvc2l0aW9u
Ow0KKyAgICAgICAgCWlzVHJ1ZSgodGhpcy5udWxsQml0MSAmIG1hc2spID09IDAsICJBZGRpbmcg
J3BvdGVudGlhbGx5IG51bGwnIG1hcmsgaW4gdW5leHBlY3RlZCBzdGF0ZSIpOyAvLyROT04tTkxT
LTEkDQorICAgICAgICAgICAgdGhpcy5udWxsQml0MiB8PSBtYXNrOw0KKyAgICAgICAgICAgIGlm
IChDT1ZFUkFHRV9URVNUX0ZMQUcpIHsNCisJCQkJaWYoQ292ZXJhZ2VUZXN0SWQgPT0gNDApIHsN
CisJCQkJICAJdGhpcy5udWxsQml0NCA9IH4wOw0KKwkJCQl9DQorCQkJfQ0KKyAgICAgICAgfSBl
bHNlIHsNCisgICAgCQkvLyB1c2UgZXh0cmEgdmVjdG9yDQorICAgIAkJaW50IHZlY3RvckluZGV4
ID0gKHBvc2l0aW9uIC8gQml0Q2FjaGVTaXplKSAtIDE7DQorICAgIAkJaWYgKHRoaXMuZXh0cmEg
PT0gbnVsbCkgew0KKyAgICAJCQlpbnQgbGVuZ3RoID0gdmVjdG9ySW5kZXggKyAxOw0KKyAgICAJ
CQl0aGlzLmV4dHJhID0gbmV3IGxvbmdbZXh0cmFMZW5ndGhdW107DQorICAgIAkJCWZvciAoaW50
IGogPSAyOyBqIDwgZXh0cmFMZW5ndGg7IGorKykgew0KKyAgICAJCQkJdGhpcy5leHRyYVtqXSA9
IG5ldyBsb25nW2xlbmd0aF07DQorICAgIAkJCX0NCisgICAgCQl9IGVsc2Ugew0KKyAgICAJCQlp
bnQgb2xkTGVuZ3RoOyAvLyBtaWdodCBuZWVkIHRvIGdyb3cgdGhlIGFycmF5cw0KKyAgICAJCQlp
ZiAodmVjdG9ySW5kZXggPj0gKG9sZExlbmd0aCA9IHRoaXMuZXh0cmFbMl0ubGVuZ3RoKSkgew0K
KyAgICAJCQkJZm9yIChpbnQgaiA9IDI7IGogPCBleHRyYUxlbmd0aDsgaisrKSB7DQorICAgIAkJ
CQkJU3lzdGVtLmFycmF5Y29weSh0aGlzLmV4dHJhW2pdLCAwLA0KKyAgICAJCQkJCQkodGhpcy5l
eHRyYVtqXSA9IG5ldyBsb25nW3ZlY3RvckluZGV4ICsgMV0pLCAwLA0KKyAgICAJCQkJCQlvbGRM
ZW5ndGgpOw0KKyAgICAJCQkJfQ0KKyAgICAJCQl9DQorICAgIAkJfQ0KKyAgICAJCW1hc2sgPSAx
TCA8PCAocG9zaXRpb24gJSBCaXRDYWNoZVNpemUpOw0KKyAgICAJCXRoaXMuZXh0cmFbM11bdmVj
dG9ySW5kZXhdIHw9IG1hc2s7DQorICAgIAkJaXNUcnVlKCh0aGlzLmV4dHJhWzJdW3ZlY3Rvcklu
ZGV4XSAmIG1hc2spID09IDAsICJBZGRpbmcgJ3BvdGVudGlhbGx5IG51bGwnIG1hcmsgaW4gdW5l
eHBlY3RlZCBzdGF0ZSIpOyAvLyROT04tTkxTLTEkDQorICAgIAkJaWYgKENPVkVSQUdFX1RFU1Rf
RkxBRykgew0KKwkJCQlpZihDb3ZlcmFnZVRlc3RJZCA9PSA0MSkgew0KKwkJCQkJdGhpcy5leHRy
YVs1XVt2ZWN0b3JJbmRleF0gPSB+MDsNCisJCQkJfQ0KKwkJCX0NCisgICAgCX0NCisJfQ0KK30N
CisNCitwdWJsaWMgdm9pZCBtYXJrUG90ZW50aWFsbHlOb25OdWxsQml0KExvY2FsVmFyaWFibGVC
aW5kaW5nIGxvY2FsKSB7DQorCWlmICh0aGlzICE9IERFQURfRU5EKSB7DQorCQl0aGlzLnRhZ0Jp
dHMgfD0gTlVMTF9GTEFHX01BU0s7DQorICAgICAgICBpbnQgcG9zaXRpb247DQorICAgICAgICBs
b25nIG1hc2s7DQorICAgICAgICBpZiAoKHBvc2l0aW9uID0gbG9jYWwuaWQgKyB0aGlzLm1heEZp
ZWxkQ291bnQpIDwgQml0Q2FjaGVTaXplKSB7DQorICAgICAgICAgICAgLy8gdXNlIGJpdHMNCisg
ICAgICAgIAltYXNrID0gMUwgPDwgcG9zaXRpb247DQorICAgICAgICAJaXNUcnVlKCh0aGlzLm51
bGxCaXQxICYgbWFzaykgPT0gMCwgIkFkZGluZyAncG90ZW50aWFsbHkgbm9uLW51bGwnIG1hcmsg
aW4gdW5leHBlY3RlZCBzdGF0ZSIpOyAvLyROT04tTkxTLTEkDQorICAgICAgICAgICAgdGhpcy5u
dWxsQml0MyB8PSBtYXNrOw0KKyAgICAgICAgICAgIGlmIChDT1ZFUkFHRV9URVNUX0ZMQUcpIHsN
CisJCQkJaWYoQ292ZXJhZ2VUZXN0SWQgPT0gNDIpIHsNCisJCQkJICAJdGhpcy5udWxsQml0NCA9
IH4wOw0KKwkJCQl9DQorCQkJfQ0KKyAgICAgICAgfSBlbHNlIHsNCisgICAgCQkvLyB1c2UgZXh0
cmEgdmVjdG9yDQorICAgIAkJaW50IHZlY3RvckluZGV4ICA9IChwb3NpdGlvbiAvIEJpdENhY2hl
U2l6ZSkgLSAxOw0KKyAgICAJCWlmICh0aGlzLmV4dHJhID09IG51bGwpIHsNCisgICAgCQkJaW50
IGxlbmd0aCA9IHZlY3RvckluZGV4ICsgMTsNCisgICAgCQkJdGhpcy5leHRyYSA9IG5ldyBsb25n
W2V4dHJhTGVuZ3RoXVtdOw0KKyAgICAJCQlmb3IgKGludCBqID0gMjsgaiA8IGV4dHJhTGVuZ3Ro
OyBqKyspIHsNCisgICAgCQkJCXRoaXMuZXh0cmFbal0gPSBuZXcgbG9uZ1tsZW5ndGhdOw0KKyAg
ICAJCQl9DQorICAgIAkJfSBlbHNlIHsNCisgICAgCQkJaW50IG9sZExlbmd0aDsgLy8gbWlnaHQg
bmVlZCB0byBncm93IHRoZSBhcnJheXMNCisgICAgCQkJaWYgKHZlY3RvckluZGV4ID49IChvbGRM
ZW5ndGggPSB0aGlzLmV4dHJhWzJdLmxlbmd0aCkpIHsNCisgICAgCQkJCWZvciAoaW50IGogPSAy
OyBqIDwgZXh0cmFMZW5ndGg7IGorKykgew0KKyAgICAJCQkJCVN5c3RlbS5hcnJheWNvcHkodGhp
cy5leHRyYVtqXSwgMCwNCisgICAgCQkJCQkJKHRoaXMuZXh0cmFbal0gPSBuZXcgbG9uZ1t2ZWN0
b3JJbmRleCArIDFdKSwgMCwNCisgICAgCQkJCQkJb2xkTGVuZ3RoKTsNCisgICAgCQkJCX0NCisg
ICAgCQkJfQ0KKyAgICAJCX0NCisgICAgCQltYXNrID0gMUwgPDwgKHBvc2l0aW9uICUgQml0Q2Fj
aGVTaXplKTsNCisgICAgCQlpc1RydWUoKHRoaXMuZXh0cmFbMl1bdmVjdG9ySW5kZXhdICYgbWFz
aykgPT0gMCwgIkFkZGluZyAncG90ZW50aWFsbHkgbm9uLW51bGwnIG1hcmsgaW4gdW5leHBlY3Rl
ZCBzdGF0ZSIpOyAvLyROT04tTkxTLTEkDQorICAgIAkJdGhpcy5leHRyYVs0XVt2ZWN0b3JJbmRl
eF0gfD0gbWFzazsNCisgICAgCQlpZiAoQ09WRVJBR0VfVEVTVF9GTEFHKSB7DQorCQkJCWlmKENv
dmVyYWdlVGVzdElkID09IDQzKSB7DQorCQkJCQl0aGlzLmV4dHJhWzVdW3ZlY3RvckluZGV4XSA9
IH4wOw0KKwkJCQl9DQorCQkJfQ0KKyAgICAJfQ0KKwl9DQorfQ0KIH0NCiANCkluZGV4OiBjb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvZmxvdy9VbmNvbmRpdGlvbmFs
Rmxvd0luZm8uamF2YQ0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PQ0KUkNTIGZpbGU6IC9jdnNyb290L2VjbGlwc2Uvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2Zsb3cvVW5jb25kaXRpb25hbEZsb3dJbmZvLmphdmEsdg0KcmV0cmlldmluZyByZXZpc2lv
biAxLjcxDQpkaWZmIC11IC1yMS43MSBVbmNvbmRpdGlvbmFsRmxvd0luZm8uamF2YQ0KLS0tIGNv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9mbG93L1VuY29uZGl0aW9u
YWxGbG93SW5mby5qYXZhCTE2IERlYyAyMDEwIDEzOjAyOjMwIC0wMDAwCTEuNzENCisrKyBjb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvZmxvdy9VbmNvbmRpdGlvbmFs
Rmxvd0luZm8uamF2YQkxOCBKYW4gMjAxMSAxMTowMDozOSAtMDAwMA0KQEAgLTEsNSArMSw1IEBA
DQogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioNCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTAg
SUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuDQorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEx
IElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLg0KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRo
aXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMNCiAgKiBhcmUgbWFkZSBh
dmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYx
LjANCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWls
YWJsZSBhdA0KQEAgLTk5Niw3ICs5OTYsNyBAQA0KICAqIEByZXR1cm4gPGNvZGU+dHJ1ZTwvY29k
ZT4gaWYgdGhlIGNoZWNrIHBhc3NlcyAoZG9lcyBub3QgcmV0dXJuDQogICogICAgaWYgdGhlIGNo
ZWNrIGZhaWxzKQ0KICAqLw0KLXByaXZhdGUgc3RhdGljIGJvb2xlYW4gaXNUcnVlKGJvb2xlYW4g
ZXhwcmVzc2lvbiwgU3RyaW5nIG1lc3NhZ2UpIHsNCitwcm90ZWN0ZWQgc3RhdGljIGJvb2xlYW4g
aXNUcnVlKGJvb2xlYW4gZXhwcmVzc2lvbiwgU3RyaW5nIG1lc3NhZ2UpIHsNCiAJaWYgKCFleHBy
ZXNzaW9uKQ0KIAkJdGhyb3cgbmV3IEFzc2VydGlvbkZhaWxlZEV4Y2VwdGlvbigiYXNzZXJ0aW9u
IGZhaWxlZDogIiArIG1lc3NhZ2UpOyAvLyROT04tTkxTLTEkDQogCXJldHVybiBleHByZXNzaW9u
Ow0KQEAgLTEzNjcsOCArMTM2NywxMyBAQA0KICAgICAgICAgICAgIHRoaXMubnVsbEJpdDQgJj0g
bWFzazsNCiAgICAgICAgIH0gZWxzZSB7DQogICAgIAkJLy8gdXNlIGV4dHJhIHZlY3Rvcg0KLSAg
ICAJCWludCB2ZWN0b3JJbmRleCA7DQotICAgIAkJdGhpcy5leHRyYVsyXVt2ZWN0b3JJbmRleCA9
IChwb3NpdGlvbiAvIEJpdENhY2hlU2l6ZSkgLSAxXQ0KKyAgICAJCWludCB2ZWN0b3JJbmRleCA9
IChwb3NpdGlvbiAvIEJpdENhY2hlU2l6ZSkgLSAxOw0KKyAgICAJCWlmICh0aGlzLmV4dHJhID09
IG51bGwgfHwgdmVjdG9ySW5kZXggPj0gdGhpcy5leHRyYVsyXS5sZW5ndGgpIHsNCisgICAgCQkJ
Ly8gaW4gY2FzZSB3ZSBhdHRlbXB0IHRvIHJlc2V0IHRoZSBudWxsIGluZm8gb2YgYSB2YXJpYWJs
ZSB0aGF0IGhhcyBub3QgYmVlbiBlbmNvdW50ZXJlZA0KKyAgICAJCQkvLyBiZWZvcmUgYW5kIGZv
ciB3aGljaCBubyBudWxsIGJpdHMgZXhpc3QuDQorICAgIAkJCXJldHVybjsNCisgICAgCQl9DQor
ICAgIAkJdGhpcy5leHRyYVsyXVt2ZWN0b3JJbmRleF0NCiAgICAgCQkgICAgJj0gKG1hc2sgPSB+
KDFMIDw8IChwb3NpdGlvbiAlIEJpdENhY2hlU2l6ZSkpKTsNCiAgICAgCQl0aGlzLmV4dHJhWzNd
W3ZlY3RvckluZGV4XSAmPSBtYXNrOw0KICAgICAJCXRoaXMuZXh0cmFbNF1bdmVjdG9ySW5kZXhd
ICY9IG1hc2s7DQojUCBvcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlcg0KSW5kZXg6
IHNyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxS
ZWZlcmVuY2VUZXN0LmphdmENCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NClJDUyBmaWxlOiAvY3Zzcm9vdC9lY2xpcHNl
L29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQv
Y29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxSZWZlcmVuY2VUZXN0LmphdmEsdg0K
cmV0cmlldmluZyByZXZpc2lvbiAxLjEwOA0KZGlmZiAtdSAtcjEuMTA4IE51bGxSZWZlcmVuY2VU
ZXN0LmphdmENCi0tLSBzcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVn
cmVzc2lvbi9OdWxsUmVmZXJlbmNlVGVzdC5qYXZhCTE4IERlYyAyMDEwIDIyOjA5OjQ4IC0wMDAw
CTEuMTA4DQorKysgc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jl
c3Npb24vTnVsbFJlZmVyZW5jZVRlc3QuamF2YQkxOCBKYW4gMjAxMSAxMTowMDo0MiAtMDAwMA0K
QEAgLTEsNSArMSw1IEBADQogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioNCi0gKiBDb3B5cmlnaHQg
KGMpIDIwMDUsIDIwMTAgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuDQorICogQ29weXJpZ2h0
IChjKSAyMDA1LCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLg0KICAqIEFsbCByaWdo
dHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMN
CiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1
YmxpYyBMaWNlbnNlIHYxLjANCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlv
biwgYW5kIGlzIGF2YWlsYWJsZSBhdA0KQEAgLTEzODA2LDQgKzEzODA2LDMwIEBADQogCQkiRG9u
ZVxuIiArIA0KIAkJIi0xIik7DQogfQ0KKw0KKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9i
dWdzL3Nob3dfYnVnLmNnaT9pZD0zMzMwODkgDQorLy8gbnVsbCBhbmFseXNpcyAtLSB0byBtYWtl
IHN1cmUgbm8gQUlPT0JFIG9yIE5QRSBpcyB0aHJvd24gd2hpbGUgY2FsbGluZyBVbmNvbmRpdGlv
bmFsRmxvd0luZm8ubWFya051bGxTdGF0dXMoLi4pDQorcHVibGljIHZvaWQgdGVzdEJ1ZzMzMzA4
OSgpIHsNCisJdGhpcy5ydW5Db25mb3JtVGVzdCgNCisJCW5ldyBTdHJpbmdbXSB7DQorCQkJIlgu
amF2YSIsDQorCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKyANCisJCQkiCXB1YmxpYyBzdGF0aWMg
dm9pZCBmb28oT2JqZWN0IHMxKSB7XG4iICsgDQorCSAgICAgICAgIiAgICBpbnQgaTAwLCBpMDEs
IGkwMiwgaTAzLCBpMDQsIGkwNSwgaTA2LCBpMDcsIGkwOCwgaTA5O1xuIiArDQorCSAgICAgICAg
IiAgICBpbnQgaTEwLCBpMTEsIGkxMiwgaTEzLCBpMTQsIGkxNSwgaTE2LCBpMTcsIGkxOCwgaTE5
O1xuIiArDQorCSAgICAgICAgIiAgICBpbnQgaTIwLCBpMjEsIGkyMiwgaTIzLCBpMjQsIGkyNSwg
aTI2LCBpMjcsIGkyOCwgaTI5O1xuIiArDQorCSAgICAgICAgIiAgICBpbnQgaTMwLCBpMzEsIGkz
MiwgaTMzLCBpMzQsIGkzNSwgaTM2LCBpMzcsIGkzOCwgaTM5O1xuIiArDQorCSAgICAgICAgIiAg
ICBpbnQgaTQwLCBpNDEsIGk0MiwgaTQzLCBpNDQsIGk0NSwgaTQ2LCBpNDcsIGk0OCwgaTQ5O1xu
IiArDQorCSAgICAgICAgIiAgICBpbnQgaTUwLCBpNTEsIGk1MiwgaTUzLCBpNTQsIGk1NSwgaTU2
LCBpNTcsIGk1OCwgaTU5O1xuIiArDQorCSAgICAgICAgIiAgICBpbnQgaTYwLCBpNjEsIGk2Miwg
aTYzLCBpNjQsIGk2NSwgaTY2LCBpNjcsIGk2OCwgaTY5O1xuIiArDQorCQkJIgkgT2JqZWN0IGxv
Y2FsMTtcbiIgKyANCisJCQkiCSBpZiAoczEgPT0gbnVsbCl7fVxuIiArIA0KKwkJCSIJIHRyeSB7
IiArDQorCQkJIgkJbG9jYWwxID0gczE7XG4iICsNCisJCQkiCSB9IGZpbmFsbHkge1xuIiArDQor
CQkJIgkgfVxuIiArIA0KKwkJCSIJfVxuIiArIA0KKwkJCSJ9In0sDQorCQkiIik7DQorfQ0KIH0N
ClwgTm8gbmV3bGluZSBhdCBlbmQgb2YgZmlsZQ0K
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>187078</attachid>
            <date>2011-01-19 01:45:00 -0500</date>
            <delta_ts>2011-01-19 01:45:35 -0500</delta_ts>
            <desc>patch actually released</desc>
            <filename>patch333089.txt</filename>
            <type>text/plain</type>
            <size>13049</size>
            <attacher name="Ayushman Jain">amj87.iitr</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMA0KI1Agb3JnLmVjbGlwc2UuamR0LmNvcmUN
CkluZGV4OiBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvZmxvdy9O
dWxsSW5mb1JlZ2lzdHJ5LmphdmENCj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0NClJDUyBmaWxlOiAvY3Zzcm9vdC9lY2xp
cHNlL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9mbG93L051bGxJbmZvUmVnaXN0cnkuamF2YSx2DQpyZXRyaWV2aW5nIHJldmlz
aW9uIDEuMTENCmRpZmYgLXUgLXIxLjExIE51bGxJbmZvUmVnaXN0cnkuamF2YQ0KLS0tIGNvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9mbG93L051bGxJbmZvUmVnaXN0
cnkuamF2YQkxOSBBdWcgMjAxMCAxMDozODo0NiAtMDAwMAkxLjExDQorKysgY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Zsb3cvTnVsbEluZm9SZWdpc3RyeS5qYXZh
CTE4IEphbiAyMDExIDE3OjA4OjUwIC0wMDAwDQpAQCAtMSw1ICsxLDUgQEANCiAvKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKg0KLSAqIENvcHlyaWdodCAoYykgMjAwNiwgMjAxMCBJQk0gQ29ycG9yYXRp
b24gYW5kIG90aGVycy4NCisgKiBDb3B5cmlnaHQgKGMpIDIwMDYsIDIwMTEgSUJNIENvcnBvcmF0
aW9uIGFuZCBvdGhlcnMuDQogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFu
ZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscw0KICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRl
ciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMA0KICAqIHdoaWNo
IGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0DQpAQCAt
NDAyLDUgKzQwMiwxNDggQEANCiAJCQlyZXR1cm4gbnVsbFMgKyAiXT4iOyAvLyROT04tTkxTLTEk
DQogCX0NCiB9DQorDQorLyoqDQorICogTWFyayBhIGxvY2FsIGFzIHBvdGVudGlhbGx5IGhhdmlu
ZyBiZWVuIGFzc2lnbmVkIHRvIGFuIHVua25vd24gdmFsdWUuDQorICogQHBhcmFtIGxvY2FsIHRo
ZSBsb2NhbCB0byBtYXJrDQorICovDQorcHVibGljIHZvaWQgbWFya1BvdGVudGlhbGx5VW5rbm93
bkJpdChMb2NhbFZhcmlhYmxlQmluZGluZyBsb2NhbCkgew0KKwkvLyBwcm90ZWN0ZWQgZnJvbSBu
b24tb2JqZWN0IGxvY2FscyBpbiBjYWxsaW5nIG1ldGhvZHMNCisJaWYgKHRoaXMgIT0gREVBRF9F
TkQpIHsNCisJCXRoaXMudGFnQml0cyB8PSBOVUxMX0ZMQUdfTUFTSzsNCisgICAgICAgIGludCBw
b3NpdGlvbjsNCisgICAgICAgIGxvbmcgbWFzazsNCisgICAgICAgIGlmICgocG9zaXRpb24gPSBs
b2NhbC5pZCArIHRoaXMubWF4RmllbGRDb3VudCkgPCBCaXRDYWNoZVNpemUpIHsNCisgICAgICAg
ICAgICAvLyB1c2UgYml0cw0KKyAgICAgICAgCW1hc2sgPSAxTCA8PCBwb3NpdGlvbjsNCisgICAg
ICAgIAlpc1RydWUoKHRoaXMubnVsbEJpdDEgJiBtYXNrKSA9PSAwLCAiQWRkaW5nICd1bmtub3du
JyBtYXJrIGluIHVuZXhwZWN0ZWQgc3RhdGUiKTsgLy8kTk9OLU5MUy0xJA0KKyAgICAgICAgICAg
IHRoaXMubnVsbEJpdDQgfD0gbWFzazsNCisgICAgICAgICAgICBpZiAoQ09WRVJBR0VfVEVTVF9G
TEFHKSB7DQorCQkJCWlmKENvdmVyYWdlVGVzdElkID09IDQ2KSB7DQorCQkJCSAgCXRoaXMubnVs
bEJpdDQgPSB+MDsNCisJCQkJfQ0KKwkJCX0NCisgICAgICAgIH0gZWxzZSB7DQorICAgIAkJLy8g
dXNlIGV4dHJhIHZlY3Rvcg0KKyAgICAJCWludCB2ZWN0b3JJbmRleCA9IChwb3NpdGlvbiAvIEJp
dENhY2hlU2l6ZSkgLSAxOw0KKyAgICAJCWlmICh0aGlzLmV4dHJhID09IG51bGwpIHsNCisgICAg
CQkJaW50IGxlbmd0aCA9IHZlY3RvckluZGV4ICsgMTsNCisgICAgCQkJdGhpcy5leHRyYSA9IG5l
dyBsb25nW2V4dHJhTGVuZ3RoXVtdOw0KKyAgICAJCQlmb3IgKGludCBqID0gMjsgaiA8IGV4dHJh
TGVuZ3RoOyBqKyspIHsNCisgICAgCQkJCXRoaXMuZXh0cmFbal0gPSBuZXcgbG9uZ1tsZW5ndGhd
Ow0KKyAgICAJCQl9DQorICAgIAkJfSBlbHNlIHsNCisgICAgCQkJaW50IG9sZExlbmd0aDsgLy8g
bWlnaHQgbmVlZCB0byBncm93IHRoZSBhcnJheXMNCisgICAgCQkJaWYgKHZlY3RvckluZGV4ID49
IChvbGRMZW5ndGggPSB0aGlzLmV4dHJhWzJdLmxlbmd0aCkpIHsNCisgICAgCQkJCWZvciAoaW50
IGogPSAyOyBqIDwgZXh0cmFMZW5ndGg7IGorKykgew0KKyAgICAJCQkJCVN5c3RlbS5hcnJheWNv
cHkodGhpcy5leHRyYVtqXSwgMCwNCisgICAgCQkJCQkJKHRoaXMuZXh0cmFbal0gPSBuZXcgbG9u
Z1t2ZWN0b3JJbmRleCArIDFdKSwgMCwNCisgICAgCQkJCQkJb2xkTGVuZ3RoKTsNCisgICAgCQkJ
CX0NCisgICAgCQkJfQ0KKyAgICAJCX0NCisgICAgCQltYXNrID0gMUwgPDwgKHBvc2l0aW9uICUg
Qml0Q2FjaGVTaXplKTsNCisgICAgCQlpc1RydWUoKHRoaXMuZXh0cmFbMl1bdmVjdG9ySW5kZXhd
ICYgbWFzaykgPT0gMCwgIkFkZGluZyAndW5rbm93bicgbWFyayBpbiB1bmV4cGVjdGVkIHN0YXRl
Iik7IC8vJE5PTi1OTFMtMSQNCisgICAgCQl0aGlzLmV4dHJhWzVdW3ZlY3RvckluZGV4XSB8PSBt
YXNrOw0KKyAgICAJCWlmIChDT1ZFUkFHRV9URVNUX0ZMQUcpIHsNCisJCQkJaWYoQ292ZXJhZ2VU
ZXN0SWQgPT0gNDcpIHsNCisJCQkJCXRoaXMuZXh0cmFbNV1bdmVjdG9ySW5kZXhdID0gfjA7DQor
CQkJCX0NCisJCQl9DQorICAgIAl9DQorCX0NCit9DQorDQorcHVibGljIHZvaWQgbWFya1BvdGVu
dGlhbGx5TnVsbEJpdChMb2NhbFZhcmlhYmxlQmluZGluZyBsb2NhbCkgew0KKwlpZiAodGhpcyAh
PSBERUFEX0VORCkgew0KKwkJdGhpcy50YWdCaXRzIHw9IE5VTExfRkxBR19NQVNLOw0KKyAgICAg
ICAgaW50IHBvc2l0aW9uOw0KKyAgICAgICAgbG9uZyBtYXNrOw0KKyAgICAgICAgaWYgKChwb3Np
dGlvbiA9IGxvY2FsLmlkICsgdGhpcy5tYXhGaWVsZENvdW50KSA8IEJpdENhY2hlU2l6ZSkgew0K
KyAgICAgICAgICAgIC8vIHVzZSBiaXRzDQorICAgICAgICAJbWFzayA9IDFMIDw8IHBvc2l0aW9u
Ow0KKyAgICAgICAgCWlzVHJ1ZSgodGhpcy5udWxsQml0MSAmIG1hc2spID09IDAsICJBZGRpbmcg
J3BvdGVudGlhbGx5IG51bGwnIG1hcmsgaW4gdW5leHBlY3RlZCBzdGF0ZSIpOyAvLyROT04tTkxT
LTEkDQorICAgICAgICAgICAgdGhpcy5udWxsQml0MiB8PSBtYXNrOw0KKyAgICAgICAgICAgIGlm
IChDT1ZFUkFHRV9URVNUX0ZMQUcpIHsNCisJCQkJaWYoQ292ZXJhZ2VUZXN0SWQgPT0gNDApIHsN
CisJCQkJICAJdGhpcy5udWxsQml0NCA9IH4wOw0KKwkJCQl9DQorCQkJfQ0KKyAgICAgICAgfSBl
bHNlIHsNCisgICAgCQkvLyB1c2UgZXh0cmEgdmVjdG9yDQorICAgIAkJaW50IHZlY3RvckluZGV4
ID0gKHBvc2l0aW9uIC8gQml0Q2FjaGVTaXplKSAtIDE7DQorICAgIAkJaWYgKHRoaXMuZXh0cmEg
PT0gbnVsbCkgew0KKyAgICAJCQlpbnQgbGVuZ3RoID0gdmVjdG9ySW5kZXggKyAxOw0KKyAgICAJ
CQl0aGlzLmV4dHJhID0gbmV3IGxvbmdbZXh0cmFMZW5ndGhdW107DQorICAgIAkJCWZvciAoaW50
IGogPSAyOyBqIDwgZXh0cmFMZW5ndGg7IGorKykgew0KKyAgICAJCQkJdGhpcy5leHRyYVtqXSA9
IG5ldyBsb25nW2xlbmd0aF07DQorICAgIAkJCX0NCisgICAgCQl9IGVsc2Ugew0KKyAgICAJCQlp
bnQgb2xkTGVuZ3RoOyAvLyBtaWdodCBuZWVkIHRvIGdyb3cgdGhlIGFycmF5cw0KKyAgICAJCQlp
ZiAodmVjdG9ySW5kZXggPj0gKG9sZExlbmd0aCA9IHRoaXMuZXh0cmFbMl0ubGVuZ3RoKSkgew0K
KyAgICAJCQkJZm9yIChpbnQgaiA9IDI7IGogPCBleHRyYUxlbmd0aDsgaisrKSB7DQorICAgIAkJ
CQkJU3lzdGVtLmFycmF5Y29weSh0aGlzLmV4dHJhW2pdLCAwLA0KKyAgICAJCQkJCQkodGhpcy5l
eHRyYVtqXSA9IG5ldyBsb25nW3ZlY3RvckluZGV4ICsgMV0pLCAwLA0KKyAgICAJCQkJCQlvbGRM
ZW5ndGgpOw0KKyAgICAJCQkJfQ0KKyAgICAJCQl9DQorICAgIAkJfQ0KKyAgICAJCW1hc2sgPSAx
TCA8PCAocG9zaXRpb24gJSBCaXRDYWNoZVNpemUpOw0KKyAgICAJCXRoaXMuZXh0cmFbM11bdmVj
dG9ySW5kZXhdIHw9IG1hc2s7DQorICAgIAkJaXNUcnVlKCh0aGlzLmV4dHJhWzJdW3ZlY3Rvcklu
ZGV4XSAmIG1hc2spID09IDAsICJBZGRpbmcgJ3BvdGVudGlhbGx5IG51bGwnIG1hcmsgaW4gdW5l
eHBlY3RlZCBzdGF0ZSIpOyAvLyROT04tTkxTLTEkDQorICAgIAkJaWYgKENPVkVSQUdFX1RFU1Rf
RkxBRykgew0KKwkJCQlpZihDb3ZlcmFnZVRlc3RJZCA9PSA0MSkgew0KKwkJCQkJdGhpcy5leHRy
YVs1XVt2ZWN0b3JJbmRleF0gPSB+MDsNCisJCQkJfQ0KKwkJCX0NCisgICAgCX0NCisJfQ0KK30N
CisNCitwdWJsaWMgdm9pZCBtYXJrUG90ZW50aWFsbHlOb25OdWxsQml0KExvY2FsVmFyaWFibGVC
aW5kaW5nIGxvY2FsKSB7DQorCWlmICh0aGlzICE9IERFQURfRU5EKSB7DQorCQl0aGlzLnRhZ0Jp
dHMgfD0gTlVMTF9GTEFHX01BU0s7DQorICAgICAgICBpbnQgcG9zaXRpb247DQorICAgICAgICBs
b25nIG1hc2s7DQorICAgICAgICBpZiAoKHBvc2l0aW9uID0gbG9jYWwuaWQgKyB0aGlzLm1heEZp
ZWxkQ291bnQpIDwgQml0Q2FjaGVTaXplKSB7DQorICAgICAgICAgICAgLy8gdXNlIGJpdHMNCisg
ICAgICAgIAltYXNrID0gMUwgPDwgcG9zaXRpb247DQorICAgICAgICAJaXNUcnVlKCh0aGlzLm51
bGxCaXQxICYgbWFzaykgPT0gMCwgIkFkZGluZyAncG90ZW50aWFsbHkgbm9uLW51bGwnIG1hcmsg
aW4gdW5leHBlY3RlZCBzdGF0ZSIpOyAvLyROT04tTkxTLTEkDQorICAgICAgICAgICAgdGhpcy5u
dWxsQml0MyB8PSBtYXNrOw0KKyAgICAgICAgICAgIGlmIChDT1ZFUkFHRV9URVNUX0ZMQUcpIHsN
CisJCQkJaWYoQ292ZXJhZ2VUZXN0SWQgPT0gNDIpIHsNCisJCQkJICAJdGhpcy5udWxsQml0NCA9
IH4wOw0KKwkJCQl9DQorCQkJfQ0KKyAgICAgICAgfSBlbHNlIHsNCisgICAgCQkvLyB1c2UgZXh0
cmEgdmVjdG9yDQorICAgIAkJaW50IHZlY3RvckluZGV4ICA9IChwb3NpdGlvbiAvIEJpdENhY2hl
U2l6ZSkgLSAxOw0KKyAgICAJCWlmICh0aGlzLmV4dHJhID09IG51bGwpIHsNCisgICAgCQkJaW50
IGxlbmd0aCA9IHZlY3RvckluZGV4ICsgMTsNCisgICAgCQkJdGhpcy5leHRyYSA9IG5ldyBsb25n
W2V4dHJhTGVuZ3RoXVtdOw0KKyAgICAJCQlmb3IgKGludCBqID0gMjsgaiA8IGV4dHJhTGVuZ3Ro
OyBqKyspIHsNCisgICAgCQkJCXRoaXMuZXh0cmFbal0gPSBuZXcgbG9uZ1tsZW5ndGhdOw0KKyAg
ICAJCQl9DQorICAgIAkJfSBlbHNlIHsNCisgICAgCQkJaW50IG9sZExlbmd0aDsgLy8gbWlnaHQg
bmVlZCB0byBncm93IHRoZSBhcnJheXMNCisgICAgCQkJaWYgKHZlY3RvckluZGV4ID49IChvbGRM
ZW5ndGggPSB0aGlzLmV4dHJhWzJdLmxlbmd0aCkpIHsNCisgICAgCQkJCWZvciAoaW50IGogPSAy
OyBqIDwgZXh0cmFMZW5ndGg7IGorKykgew0KKyAgICAJCQkJCVN5c3RlbS5hcnJheWNvcHkodGhp
cy5leHRyYVtqXSwgMCwNCisgICAgCQkJCQkJKHRoaXMuZXh0cmFbal0gPSBuZXcgbG9uZ1t2ZWN0
b3JJbmRleCArIDFdKSwgMCwNCisgICAgCQkJCQkJb2xkTGVuZ3RoKTsNCisgICAgCQkJCX0NCisg
ICAgCQkJfQ0KKyAgICAJCX0NCisgICAgCQltYXNrID0gMUwgPDwgKHBvc2l0aW9uICUgQml0Q2Fj
aGVTaXplKTsNCisgICAgCQlpc1RydWUoKHRoaXMuZXh0cmFbMl1bdmVjdG9ySW5kZXhdICYgbWFz
aykgPT0gMCwgIkFkZGluZyAncG90ZW50aWFsbHkgbm9uLW51bGwnIG1hcmsgaW4gdW5leHBlY3Rl
ZCBzdGF0ZSIpOyAvLyROT04tTkxTLTEkDQorICAgIAkJdGhpcy5leHRyYVs0XVt2ZWN0b3JJbmRl
eF0gfD0gbWFzazsNCisgICAgCQlpZiAoQ09WRVJBR0VfVEVTVF9GTEFHKSB7DQorCQkJCWlmKENv
dmVyYWdlVGVzdElkID09IDQzKSB7DQorCQkJCQl0aGlzLmV4dHJhWzVdW3ZlY3RvckluZGV4XSA9
IH4wOw0KKwkJCQl9DQorCQkJfQ0KKyAgICAJfQ0KKwl9DQorfQ0KIH0NCiANCkluZGV4OiBjb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvZmxvdy9VbmNvbmRpdGlvbmFs
Rmxvd0luZm8uamF2YQ0KPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PQ0KUkNTIGZpbGU6IC9jdnNyb290L2VjbGlwc2Uvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2Zsb3cvVW5jb25kaXRpb25hbEZsb3dJbmZvLmphdmEsdg0KcmV0cmlldmluZyByZXZpc2lv
biAxLjcxDQpkaWZmIC11IC1yMS43MSBVbmNvbmRpdGlvbmFsRmxvd0luZm8uamF2YQ0KLS0tIGNv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9mbG93L1VuY29uZGl0aW9u
YWxGbG93SW5mby5qYXZhCTE2IERlYyAyMDEwIDEzOjAyOjMwIC0wMDAwCTEuNzENCisrKyBjb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvZmxvdy9VbmNvbmRpdGlvbmFs
Rmxvd0luZm8uamF2YQkxOCBKYW4gMjAxMSAxNzowODo1MCAtMDAwMA0KQEAgLTEsNSArMSw1IEBA
DQogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioNCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTAg
SUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuDQorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEx
IElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLg0KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRo
aXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMNCiAgKiBhcmUgbWFkZSBh
dmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYx
LjANCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWls
YWJsZSBhdA0KQEAgLTk5Niw3ICs5OTYsNyBAQA0KICAqIEByZXR1cm4gPGNvZGU+dHJ1ZTwvY29k
ZT4gaWYgdGhlIGNoZWNrIHBhc3NlcyAoZG9lcyBub3QgcmV0dXJuDQogICogICAgaWYgdGhlIGNo
ZWNrIGZhaWxzKQ0KICAqLw0KLXByaXZhdGUgc3RhdGljIGJvb2xlYW4gaXNUcnVlKGJvb2xlYW4g
ZXhwcmVzc2lvbiwgU3RyaW5nIG1lc3NhZ2UpIHsNCitwcm90ZWN0ZWQgc3RhdGljIGJvb2xlYW4g
aXNUcnVlKGJvb2xlYW4gZXhwcmVzc2lvbiwgU3RyaW5nIG1lc3NhZ2UpIHsNCiAJaWYgKCFleHBy
ZXNzaW9uKQ0KIAkJdGhyb3cgbmV3IEFzc2VydGlvbkZhaWxlZEV4Y2VwdGlvbigiYXNzZXJ0aW9u
IGZhaWxlZDogIiArIG1lc3NhZ2UpOyAvLyROT04tTkxTLTEkDQogCXJldHVybiBleHByZXNzaW9u
Ow0KQEAgLTEzNjcsOCArMTM2NywxMyBAQA0KICAgICAgICAgICAgIHRoaXMubnVsbEJpdDQgJj0g
bWFzazsNCiAgICAgICAgIH0gZWxzZSB7DQogICAgIAkJLy8gdXNlIGV4dHJhIHZlY3Rvcg0KLSAg
ICAJCWludCB2ZWN0b3JJbmRleCA7DQotICAgIAkJdGhpcy5leHRyYVsyXVt2ZWN0b3JJbmRleCA9
IChwb3NpdGlvbiAvIEJpdENhY2hlU2l6ZSkgLSAxXQ0KKyAgICAJCWludCB2ZWN0b3JJbmRleCA9
IChwb3NpdGlvbiAvIEJpdENhY2hlU2l6ZSkgLSAxOw0KKyAgICAJCWlmICh0aGlzLmV4dHJhID09
IG51bGwgfHwgdmVjdG9ySW5kZXggPj0gdGhpcy5leHRyYVsyXS5sZW5ndGgpIHsNCisgICAgCQkJ
Ly8gaW4gY2FzZSB3ZSBhdHRlbXB0IHRvIHJlc2V0IHRoZSBudWxsIGluZm8gb2YgYSB2YXJpYWJs
ZSB0aGF0IGhhcyBub3QgYmVlbiBlbmNvdW50ZXJlZA0KKyAgICAJCQkvLyBiZWZvcmUgYW5kIGZv
ciB3aGljaCBubyBudWxsIGJpdHMgZXhpc3QuDQorICAgIAkJCXJldHVybjsNCisgICAgCQl9DQor
ICAgIAkJdGhpcy5leHRyYVsyXVt2ZWN0b3JJbmRleF0NCiAgICAgCQkgICAgJj0gKG1hc2sgPSB+
KDFMIDw8IChwb3NpdGlvbiAlIEJpdENhY2hlU2l6ZSkpKTsNCiAgICAgCQl0aGlzLmV4dHJhWzNd
W3ZlY3RvckluZGV4XSAmPSBtYXNrOw0KICAgICAJCXRoaXMuZXh0cmFbNF1bdmVjdG9ySW5kZXhd
ICY9IG1hc2s7DQpAQCAtMTQwMCw2ICsxNDA1LDIzIEBADQogICAgICAgICB9IGVsc2Ugew0KICAg
ICAJCS8vIHVzZSBleHRyYSB2ZWN0b3INCiAgICAgCQlpbnQgdmVjdG9ySW5kZXggPSAocG9zaXRp
b24gLyBCaXRDYWNoZVNpemUpIC0gMTsNCisgICAgCQlpZiAodGhpcy5leHRyYSA9PSBudWxsKSB7
DQorCQkJCWludCBsZW5ndGggPSB2ZWN0b3JJbmRleCArIDE7DQorCQkJCXRoaXMuZXh0cmEgPSBu
ZXcgbG9uZ1tleHRyYUxlbmd0aF1bXTsNCisJCQkJZm9yIChpbnQgaiA9IDA7IGogPCBleHRyYUxl
bmd0aDsgaisrKSB7DQorCQkJCQl0aGlzLmV4dHJhW2pdID0gbmV3IGxvbmdbbGVuZ3RoXTsNCisJ
CQkJfQ0KKwkJCX0NCisJCQllbHNlIHsNCisJCQkJaW50IG9sZExlbmd0aDsgLy8gbWlnaHQgbmVl
ZCB0byBncm93IHRoZSBhcnJheXMNCisJCQkJaWYgKHZlY3RvckluZGV4ID49IChvbGRMZW5ndGgg
PSB0aGlzLmV4dHJhWzBdLmxlbmd0aCkpIHsNCisJCQkJCWZvciAoaW50IGogPSAwOyBqIDwgZXh0
cmFMZW5ndGg7IGorKykgew0KKwkJCQkJCVN5c3RlbS5hcnJheWNvcHkodGhpcy5leHRyYVtqXSwg
MCwNCisJCQkJCQkJKHRoaXMuZXh0cmFbal0gPSBuZXcgbG9uZ1t2ZWN0b3JJbmRleCArIDFdKSwg
MCwNCisJCQkJCQkJb2xkTGVuZ3RoKTsNCisJCQkJCX0NCisJCQkJfQ0KKwkJCX0NCiAgICAgCQlt
YXNrID0gMUwgPDwgKHBvc2l0aW9uICUgQml0Q2FjaGVTaXplKTsNCiAgICAgCQlpc1RydWUoKHRo
aXMuZXh0cmFbMl1bdmVjdG9ySW5kZXhdICYgbWFzaykgPT0gMCwgIkFkZGluZyAndW5rbm93bicg
bWFyayBpbiB1bmV4cGVjdGVkIHN0YXRlIik7IC8vJE5PTi1OTFMtMSQNCiAgICAgCQl0aGlzLmV4
dHJhWzVdW3ZlY3RvckluZGV4XSB8PSBtYXNrOw0KQEAgLTE0MzAsNiArMTQ1MiwyMyBAQA0KICAg
ICAgICAgfSBlbHNlIHsNCiAgICAgCQkvLyB1c2UgZXh0cmEgdmVjdG9yDQogICAgIAkJaW50IHZl
Y3RvckluZGV4ID0gKHBvc2l0aW9uIC8gQml0Q2FjaGVTaXplKSAtIDE7DQorICAgIAkJaWYgKHRo
aXMuZXh0cmEgPT0gbnVsbCkgew0KKwkJCQlpbnQgbGVuZ3RoID0gdmVjdG9ySW5kZXggKyAxOw0K
KwkJCQl0aGlzLmV4dHJhID0gbmV3IGxvbmdbZXh0cmFMZW5ndGhdW107DQorCQkJCWZvciAoaW50
IGogPSAwOyBqIDwgZXh0cmFMZW5ndGg7IGorKykgew0KKwkJCQkJdGhpcy5leHRyYVtqXSA9IG5l
dyBsb25nW2xlbmd0aF07DQorCQkJCX0NCisJCQl9DQorCQkJZWxzZSB7DQorCQkJCWludCBvbGRM
ZW5ndGg7IC8vIG1pZ2h0IG5lZWQgdG8gZ3JvdyB0aGUgYXJyYXlzDQorCQkJCWlmICh2ZWN0b3JJ
bmRleCA+PSAob2xkTGVuZ3RoID0gdGhpcy5leHRyYVswXS5sZW5ndGgpKSB7DQorCQkJCQlmb3Ig
KGludCBqID0gMDsgaiA8IGV4dHJhTGVuZ3RoOyBqKyspIHsNCisJCQkJCQlTeXN0ZW0uYXJyYXlj
b3B5KHRoaXMuZXh0cmFbal0sIDAsDQorCQkJCQkJCSh0aGlzLmV4dHJhW2pdID0gbmV3IGxvbmdb
dmVjdG9ySW5kZXggKyAxXSksIDAsDQorCQkJCQkJCW9sZExlbmd0aCk7DQorCQkJCQl9DQorCQkJ
CX0NCisJCQl9DQogICAgIAkJbWFzayA9IDFMIDw8IChwb3NpdGlvbiAlIEJpdENhY2hlU2l6ZSk7
DQogICAgIAkJdGhpcy5leHRyYVszXVt2ZWN0b3JJbmRleF0gfD0gbWFzazsNCiAgICAgCQlpc1Ry
dWUoKHRoaXMuZXh0cmFbMl1bdmVjdG9ySW5kZXhdICYgbWFzaykgPT0gMCwgIkFkZGluZyAncG90
ZW50aWFsbHkgbnVsbCcgbWFyayBpbiB1bmV4cGVjdGVkIHN0YXRlIik7IC8vJE5PTi1OTFMtMSQN
CkBAIC0xNDYwLDYgKzE0OTksMjMgQEANCiAgICAgICAgIH0gZWxzZSB7DQogICAgIAkJLy8gdXNl
IGV4dHJhIHZlY3Rvcg0KICAgICAJCWludCB2ZWN0b3JJbmRleCAgPSAocG9zaXRpb24gLyBCaXRD
YWNoZVNpemUpIC0gMTsNCisgICAgCQlpZiAodGhpcy5leHRyYSA9PSBudWxsKSB7DQorCQkJCWlu
dCBsZW5ndGggPSB2ZWN0b3JJbmRleCArIDE7DQorCQkJCXRoaXMuZXh0cmEgPSBuZXcgbG9uZ1tl
eHRyYUxlbmd0aF1bXTsNCisJCQkJZm9yIChpbnQgaiA9IDA7IGogPCBleHRyYUxlbmd0aDsgaisr
KSB7DQorCQkJCQl0aGlzLmV4dHJhW2pdID0gbmV3IGxvbmdbbGVuZ3RoXTsNCisJCQkJfQ0KKwkJ
CX0NCisJCQllbHNlIHsNCisJCQkJaW50IG9sZExlbmd0aDsgLy8gbWlnaHQgbmVlZCB0byBncm93
IHRoZSBhcnJheXMNCisJCQkJaWYgKHZlY3RvckluZGV4ID49IChvbGRMZW5ndGggPSB0aGlzLmV4
dHJhWzBdLmxlbmd0aCkpIHsNCisJCQkJCWZvciAoaW50IGogPSAwOyBqIDwgZXh0cmFMZW5ndGg7
IGorKykgew0KKwkJCQkJCVN5c3RlbS5hcnJheWNvcHkodGhpcy5leHRyYVtqXSwgMCwNCisJCQkJ
CQkJKHRoaXMuZXh0cmFbal0gPSBuZXcgbG9uZ1t2ZWN0b3JJbmRleCArIDFdKSwgMCwNCisJCQkJ
CQkJb2xkTGVuZ3RoKTsNCisJCQkJCX0NCisJCQkJfQ0KKwkJCX0NCiAgICAgCQltYXNrID0gMUwg
PDwgKHBvc2l0aW9uICUgQml0Q2FjaGVTaXplKTsNCiAgICAgCQlpc1RydWUoKHRoaXMuZXh0cmFb
Ml1bdmVjdG9ySW5kZXhdICYgbWFzaykgPT0gMCwgIkFkZGluZyAncG90ZW50aWFsbHkgbm9uLW51
bGwnIG1hcmsgaW4gdW5leHBlY3RlZCBzdGF0ZSIpOyAvLyROT04tTkxTLTEkDQogICAgIAkJdGhp
cy5leHRyYVs0XVt2ZWN0b3JJbmRleF0gfD0gbWFzazsNCiNQIG9yZy5lY2xpcHNlLmpkdC5jb3Jl
LnRlc3RzLmNvbXBpbGVyDQpJbmRleDogc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Nv
bXBpbGVyL3JlZ3Jlc3Npb24vTnVsbFJlZmVyZW5jZVRlc3QuamF2YQ0KPT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQ0KUkNT
IGZpbGU6IC9jdnNyb290L2VjbGlwc2Uvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGls
ZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVs
bFJlZmVyZW5jZVRlc3QuamF2YSx2DQpyZXRyaWV2aW5nIHJldmlzaW9uIDEuMTA4DQpkaWZmIC11
IC1yMS4xMDggTnVsbFJlZmVyZW5jZVRlc3QuamF2YQ0KLS0tIHNyYy9vcmcvZWNsaXBzZS9qZHQv
Y29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxSZWZlcmVuY2VUZXN0LmphdmEJMTgg
RGVjIDIwMTAgMjI6MDk6NDggLTAwMDAJMS4xMDgNCisrKyBzcmMvb3JnL2VjbGlwc2UvamR0L2Nv
cmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OdWxsUmVmZXJlbmNlVGVzdC5qYXZhCTE4IEph
biAyMDExIDE3OjA4OjU0IC0wMDAwDQpAQCAtMSw1ICsxLDUgQEANCiAvKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKg0KLSAqIENvcHlyaWdodCAoYykgMjAwNSwgMjAxMCBJQk0gQ29ycG9yYXRpb24gYW5k
IG90aGVycy4NCisgKiBDb3B5cmlnaHQgKGMpIDIwMDUsIDIwMTEgSUJNIENvcnBvcmF0aW9uIGFu
ZCBvdGhlcnMuDQogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUg
YWNjb21wYW55aW5nIG1hdGVyaWFscw0KICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUg
dGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMA0KICAqIHdoaWNoIGFjY29t
cGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0DQpAQCAtMTM4MDYs
NCArMTM4MDYsMzAgQEANCiAJCSJEb25lXG4iICsgDQogCQkiLTEiKTsNCiB9DQorDQorLy8gaHR0
cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTMzMzA4OSANCisvLyBu
dWxsIGFuYWx5c2lzIC0tIHRvIG1ha2Ugc3VyZSBubyBBSU9PQkUgb3IgTlBFIGlzIHRocm93biB3
aGlsZSBjYWxsaW5nIFVuY29uZGl0aW9uYWxGbG93SW5mby5tYXJrTnVsbFN0YXR1cyguLikNCitw
dWJsaWMgdm9pZCB0ZXN0QnVnMzMzMDg5KCkgew0KKwl0aGlzLnJ1bkNvbmZvcm1UZXN0KA0KKwkJ
bmV3IFN0cmluZ1tdIHsNCisJCQkiWC5qYXZhIiwNCisJCQkicHVibGljIGNsYXNzIFgge1xuIiAr
IA0KKwkJCSIJcHVibGljIHN0YXRpYyB2b2lkIGZvbyhPYmplY3QgczEpIHtcbiIgKyANCisJICAg
ICAgICAiICAgIGludCBpMDAsIGkwMSwgaTAyLCBpMDMsIGkwNCwgaTA1LCBpMDYsIGkwNywgaTA4
LCBpMDk7XG4iICsNCisJICAgICAgICAiICAgIGludCBpMTAsIGkxMSwgaTEyLCBpMTMsIGkxNCwg
aTE1LCBpMTYsIGkxNywgaTE4LCBpMTk7XG4iICsNCisJICAgICAgICAiICAgIGludCBpMjAsIGky
MSwgaTIyLCBpMjMsIGkyNCwgaTI1LCBpMjYsIGkyNywgaTI4LCBpMjk7XG4iICsNCisJICAgICAg
ICAiICAgIGludCBpMzAsIGkzMSwgaTMyLCBpMzMsIGkzNCwgaTM1LCBpMzYsIGkzNywgaTM4LCBp
Mzk7XG4iICsNCisJICAgICAgICAiICAgIGludCBpNDAsIGk0MSwgaTQyLCBpNDMsIGk0NCwgaTQ1
LCBpNDYsIGk0NywgaTQ4LCBpNDk7XG4iICsNCisJICAgICAgICAiICAgIGludCBpNTAsIGk1MSwg
aTUyLCBpNTMsIGk1NCwgaTU1LCBpNTYsIGk1NywgaTU4LCBpNTk7XG4iICsNCisJICAgICAgICAi
ICAgIGludCBpNjAsIGk2MSwgaTYyLCBpNjMsIGk2NCwgaTY1LCBpNjYsIGk2NywgaTY4LCBpNjk7
XG4iICsNCisJCQkiCSBPYmplY3QgbG9jYWwxO1xuIiArIA0KKwkJCSIJIGlmIChzMSA9PSBudWxs
KXt9XG4iICsgDQorCQkJIgkgdHJ5IHsiICsNCisJCQkiCQlsb2NhbDEgPSBzMTtcbiIgKw0KKwkJ
CSIJIH0gZmluYWxseSB7XG4iICsNCisJCQkiCSB9XG4iICsgDQorCQkJIgl9XG4iICsgDQorCQkJ
In0ifSwNCisJCSIiKTsNCit9DQogfQ0KXCBObyBuZXdsaW5lIGF0IGVuZCBvZiBmaWxlDQo=
</data>

          </attachment>
      

    </bug>

</bugzilla>