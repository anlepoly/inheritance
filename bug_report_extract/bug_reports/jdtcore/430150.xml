<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>430150</bug_id>
          
          <creation_ts>2014-03-11 17:42:00 -0400</creation_ts>
          <short_desc>[1.8][null] stricter checking against type variables</short_desc>
          <delta_ts>2014-09-16 20:23:20 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.4 M7</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Stephan Herrmann">stephan.herrmann</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>chris</cc>
    
    <cc>daniel_megert</cc>
    
    <cc>jarthana</cc>
    
    <cc>laurie</cc>
    
    <cc>markus_keller</cc>
    
    <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      <flag name="pmc_approved"
          id="62117"
          type_id="2"
          status="+"
          setter="daniel_megert"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2374638</commentid>
    <comment_count>0</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-11 17:42:38 -0400</bug_when>
    <thetext>When writing a generic class as 
   class Foo&lt;T&gt; {
   }
we want to be able to instantiate this class as either
   Foo&lt;@NonNull String&gt; nns;
or
   Foo&lt;@Nullable String&gt; nus;

Inside Foo usage of the type variable T should be checked more strictly to reflect that not only the type but also its nullness is unknown. To enable the desired genericity, dereferencing a T value must assume @Nullable and assignment to a T variable must ensure @NonNull.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2389144</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-04-15 06:42:17 -0400</bug_when>
    <thetext>Want this to stabilize before 4.4</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2391271</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-04-22 08:38:00 -0400</bug_when>
    <thetext>Srikanth, Jay: this is a heads-up that I could use some feedback on a patch coming in a minute.

First, I&apos;m introducing new IProblems after M6, so does this need PMC approval? Second, since I&apos;m tightening the null-checking rules, I want to give you (or others?) a chance to see if this unduly rejects safe code. Last, it wouldn&apos;t hurt if s.o. glances over the verbiage of new/modified error messages.

Background: this is a safety hole in the current checking, which I mentioned in my talk at ECNA. Consider:

//---
import org.eclipse.jdt.annotation.*;

class Foo&lt;T&gt; {
    T provide() { return null; }
}
  
public class Client {
    int test(Foo&lt;@NonNull Number&gt; provider) {
        return provider.provide().intValue();
    }
    public static void main(String[] args) {
        new Client().test(new Foo&lt;@NonNull Number&gt;());
    }
}
//---

We currently accept this program as null-safe, while in fact it throws NPE.


New error message is:

1. ERROR in /tmp/Client.java (at line 4)
        T provide() { return null; }
                             ^^^^
Null type mismatch (type annotations): &apos;null&apos; is not compatible to the free type variable &apos;T&apos;


Variant in case of specific types rather than null:

Null type mismatch (type annotations): required &apos;&apos;{0}&apos;&apos; but this expression has type &apos;&apos;{1}&apos;&apos;, where &apos;&apos;{0}&apos;&apos; is a free type variable

You&apos;ll see more examples in the tests in the patch.


If anyone asks whether/why this is necessary at this late point: I really want to avoid that users get used to the wrong belief that the above coding pattern is safe. They&apos;ll punish me, if compiler says OK and runtime says NPE, and they&apos;ll kill me if I tighten the rules even later than Luna GA ;-P</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2391289</commentid>
    <comment_count>3</comment_count>
      <attachid>242190</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-04-22 09:16:46 -0400</bug_when>
    <thetext>Created attachment 242190
proposed patch

Tests are still running.

Initial testing revealed a few paths that still entered null type analysis even if not enabled, I think adding more guards is always welcomed :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2391431</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-04-22 11:12:04 -0400</bug_when>
    <thetext>Tests are green

Please advise regarding the additional IProblem constants (plus any other comments you might have).

Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2391476</commentid>
    <comment_count>5</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-04-22 12:10:14 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #2)
&gt; First, I&apos;m introducing new IProblems after M6, so does this need PMC
&gt; approval? 

Yes, copying Dani for that.

&gt; Second, since I&apos;m tightening the null-checking rules, I want to
&gt; give you (or others?) a chance to see if this unduly rejects safe code.
&gt; Last, it wouldn&apos;t hurt if s.o. glances over the verbiage of new/modified
&gt; error messages.

I just looked at the message and was curious about the term &apos;free type&apos;. Is this something us or others use already? And any reason why we don&apos;t want to reuse one of the existing message such as this:

Null type mismatch (type annotations): required &apos;@NonNull T&apos; but this expression has type &apos;@Nullable T&apos;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2391520</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-04-22 13:24:59 -0400</bug_when>
    <thetext>Hi Jay,

thanks for your comments

(In reply to Jayaprakash Arthanareeswaran from comment #5)
&gt; I just looked at the message and was curious about the term &apos;free type&apos;.

Oops, bad line break in my comment; intended was: &apos;free type variable&apos;,
where &apos;free&apos; qualifies &apos;variable&apos; :)

&gt; Is
&gt; this something us or others use already? And any reason why we don&apos;t want to
&gt; reuse one of the existing message such as this:
&gt; 
&gt; Null type mismatch (type annotations): required &apos;@NonNull T&apos; but this
&gt; expression has type &apos;@Nullable T&apos;

A type variable without null annotation really is unlike anything we have.
Here&apos;s an example that shows both directions:

//---
import org.eclipse.jdt.annotation.*;
public class TypeVariables&lt;T&gt; {
  @NonNull T toNonNull(T t) {
    return t;
  }
  T fromNullable(@Nullable T t) {
    return t;
  }
}
//---

Without further adjustment you&apos;d get these messages:

----------
1. ERROR in /tmp/TypeVariables.java (at line 4)
        return t;
               ^
Null type safety (type annotations): The expression of type &apos;T&apos; needs unchecked conversion to conform to &apos;@NonNull T&apos;
----------
2. ERROR in /tmp/TypeVariables.java (at line 7)
        return t;
               ^
Null type mismatch (type annotations): required &apos;T&apos; but this expression has type &apos;@Nullable T&apos;
----------

People may likely be confused to see that both methods are in error.

Using the term &apos;free type variable&apos; (or any other to be proposed in its stead) I want to hint at the fact, that null specification is not YET given for &apos;T&apos;, but clients of the generic class WILL perhaps specify that they want T to mean, e.g., &apos;@NonNull String&apos;, at which point the type variable is bound / no longer free.

The second error is more surprising, here we have to tell them, why assigning @Nullable to s.t. that is not (yet) @NonNull is an error.

That&apos;s why I&apos;m augmenting that error message to:

Null type mismatch (type annotations): required &apos;T&apos; but this expression has type &apos;@Nullable T&apos;, where &apos;T&apos; is a free type variable


(A) Is it clearer now?

(B) Do you have a better expression that we could use (while fitting on &lt; 5 lines of text :) )

Long forms:

Null type mismatch (type annotations): The value of type &apos;@Nullable T&apos; is not compatible to the unannotated type variable &apos;T&apos;, because clients may bind the type variable &apos;T&apos; to a &apos;@NonNull&apos; type.

Null type mismatch (type annotations): The value &apos;null&apos; is not compatible to the unannotated type variable &apos;T&apos;, because clients may bind the type variable &apos;T&apos; to a &apos;@NonNull&apos; type.


PS: I really wish we had a &apos;read more ...&apos; link in our error messages, there was a bug for this long long ago ... :)
That would allow us to keep main error messages really short, and still provide sufficient info for the perplexed. Which, btw, is different from what we need for explaining type inference errors (static vs. dynamic error details ...) - sorry for rambling on :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2391675</commentid>
    <comment_count>7</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-04-23 01:18:30 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #6)
&gt; (A) Is it clearer now?

It is, thanks for explaining.

&gt; (B) Do you have a better expression that we could use (while fitting on &lt; 5
&gt; lines of text :) )

No, not with those restrictions :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2391690</commentid>
    <comment_count>8</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2014-04-23 03:22:25 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #5)
&gt; (In reply to Stephan Herrmann from comment #2)
&gt; &gt; First, I&apos;m introducing new IProblems after M6, so does this need PMC
&gt; &gt; approval? 
&gt; 
&gt; Yes, copying Dani for that.

What is the new API? Please post it here including Javadoc. Do the new problems require changes/additions in the UI?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2391971</commentid>
    <comment_count>9</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-04-23 11:40:13 -0400</bug_when>
    <thetext>(In reply to Dani Megert from comment #8)
&gt; What is the new API? Please post it here including Javadoc. Do the new
&gt; problems require changes/additions in the UI?

Two new constants in IProblem:

	/** @since 3.10 */
	int NullNotCompatibleToFreeTypeVariable = 969;
	/** @since 3.10 */
	int NullityMismatchAgainstFreeTypeVariable = 970;

None of the constants in this type have substantial javadoc ...

Possible consumer: quickfixes. In fact, these two constants are just refinements of existing problems, so quickfixes may map them to existing ones, I&apos;ll paste the correspondance later.

So strictly speaking: no UI change *required*, adding the new constant to existing switch cases in the quickfix processor would be nice.

As an aside: we have a 1:1 mapping from constants in IProblem to message texts, where not all textual distinctions may be relevant at the API level. If, hypothetically, we had a mechanisms for defining a problem by ID plus detail, we could include the detail for selecting an error message, and only expose the more coarse grained ID in the API. In that model this API addition would not be needed. Just saying ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2391974</commentid>
    <comment_count>10</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2014-04-23 11:44:52 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #9)
&gt; Possible consumer: quickfixes. In fact, these two constants are just
&gt; refinements of existing problems, so quickfixes may map them to existing
&gt; ones, I&apos;ll paste the correspondance later.
&gt; 
&gt; So strictly speaking: no UI change *required*, adding the new constant to
&gt; existing switch cases in the quickfix processor would be nice.

But if the new constants are refinements, won&apos;t this make existing Quick Fixes useless until the UI is adjusted? Or don&apos;t we have any yet?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2391981</commentid>
    <comment_count>11</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-04-23 11:56:27 -0400</bug_when>
    <thetext>(In reply to Dani Megert from comment #10)
&gt; (In reply to Stephan Herrmann from comment #9)
&gt; &gt; Possible consumer: quickfixes. In fact, these two constants are just
&gt; &gt; refinements of existing problems, so quickfixes may map them to existing
&gt; &gt; ones, I&apos;ll paste the correspondance later.
&gt; &gt; 
&gt; &gt; So strictly speaking: no UI change *required*, adding the new constant to
&gt; &gt; existing switch cases in the quickfix processor would be nice.
&gt; 
&gt; But if the new constants are refinements, won&apos;t this make existing Quick
&gt; Fixes useless until the UI is adjusted? Or don&apos;t we have any yet?

I don&apos;t seem to understand your reasoning.

By refinement I mean: similar problem but more specific explanation for the user. Existing quickfixes like:
- add @SW(&quot;null&quot;)
- mark parameter decl as @NonNull
are applicable in exact the same way for the old and new constants.

I haven&apos;t checked all quickfixes proposed in this context (I don&apos;t have my JDT environment here), so perhaps the new constants will have fewer proposals, but that doesn&apos;t seem to impact the usefulness of these errors, IMHO.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2391990</commentid>
    <comment_count>12</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-04-23 12:13:17 -0400</bug_when>
    <thetext>Maybe I should have been clearer: we&apos;re talking about reporting more errors, not about re-classifying existing ones. That&apos;s why no existing quickfix will be lost, even if adding a constant to an existing switch case would impose a problem.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2392300</commentid>
    <comment_count>13</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2014-04-24 04:26:25 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #12)
&gt; Maybe I should have been clearer: we&apos;re talking about reporting more errors,
&gt; not about re-classifying existing ones. That&apos;s why no existing quickfix will
&gt; be lost, even if adding a constant to an existing switch case would impose a
&gt; problem.

That&apos;s clearer now indeed.

I&apos;ve approved the addition.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2392422</commentid>
    <comment_count>14</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-04-24 07:07:23 -0400</bug_when>
    <thetext>(In reply to Dani Megert from comment #13)
&gt; I&apos;ve approved the addition.

Thanks!

Released for 4.4 M7 via commit http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=cf0fc1d100d6a0dfa353e3125744fa10a50c8d3b</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2394405</commentid>
    <comment_count>15</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-04-29 02:38:35 -0400</bug_when>
    <thetext>We do report the error as shown in Comment 2.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2394406</commentid>
    <comment_count>16</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-04-29 02:38:56 -0400</bug_when>
    <thetext>Verified for 4.4 M7 using I20140427-2030 build.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2396041</commentid>
    <comment_count>17</comment_count>
    <who name="Laurie C">laurie</who>
    <bug_when>2014-05-02 00:26:54 -0400</bug_when>
    <thetext>Hi,

This prevents implementing e.g. java.util.Map, which requires a null return value for some methods. IMO for this test to be correct, it needs to look at instantiations which request @NonNull, to say for example in the java.util.Map case, 

class Key{} class Value{}
Map&lt;@NonNull Key, @NonNull Value&gt; map = new HashMap&lt;&gt;();
&quot;@NonNull Value incompatible with method implementation V HashMap.get(Object)&quot;

In general, I believe the second half of the statement &quot;To enable the desired genericity, dereferencing a T value must assume @Nullable /and assignment to a T variable must ensure @NonNull/.&quot; is not true.

We have custom Map implementations that this test is rejecting, and other class hierarchies that expect @Nullable types are also being rejected.

Cheers

Laurie</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2396362</commentid>
    <comment_count>18</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-02 17:07:17 -0400</bug_when>
    <thetext>(In reply to Laurie C from comment #17)

Hi Laurie,

thanks for chiming in, the basic answer is: when implementing j.u.Map (or when implementing any generic class) it is up to you whether your class has unconstrained or a constrained type parameters.

When your class starts: 
   class MyMap&lt;K,V&gt; implements Map&lt;K,V&gt; {...
then you promise that *any* type is ok for K and for V. This means, &apos;@NonNull String&apos; is an example for a valid substitution for V. With this substitution, get(..) has the return type &apos;@NonNull String&apos; and clients must be allowed to assume that the method will never return null. If it does it is a bug and must be flagged.
Since whole system analysis is not feasible (is that what you suggest?), we must decide who is to blame without looking at the implementation of the respective other side. The rules we have implemented achieve this: we decide to blame the implementer, because for the client ability to specify a &apos;SomeMap&lt;Key,@NonNull String&gt;&apos; is essential to the business.

However, when your class starts:
   class MyMap&lt;K,@Nullable V&gt; implements Map&lt;K,V&gt; { ...
then you restrict the usage of MyMap so that the second type argument must always be a @Nullable type. Now in the implementation of MyMap you are free to let get(..) return null, because V is no longer a &apos;free type variable&apos;.
OTOH, with this declaration, a client trying to instantiate a MyMap&lt;String,@NonNull String&gt; will be flagged, because the type argument &apos;@NonNull String&apos; is incompatible to the constraint on &apos;V&apos;.

Technically, a type parameter &apos;@Nullable V&apos; is equivalent to declaring both an upper and a lower bound. see http://types.cs.washington.edu/checker-framework/current/checker-framework-manual.html#qualifier-is-like-two-bounds


Here&apos;s the full example:
//---
import java.util.*;
import org.eclipse.jdt.annotation.*;

public class MyMap&lt;K,@Nullable V&gt; extends HashMap&lt;K,V&gt; {
	@Override
	public V get(Object key) {
		return null;
	}
}
//---
import java.util.*;
import org.eclipse.jdt.annotation.*;

public class Client {
	public static void main(String[] args) {
		Map&lt;String, @NonNull String&gt; map = new MyMap&lt;String, @NonNull  String&gt;();
		System.out.println(map.get(&quot;&quot;).toUpperCase());
	}
}
//---

Here MyMap is happily accepted by the compiler, whereas the Client is blamed:

Map&lt;String, @NonNull String&gt; map = new MyMap&lt;String, @NonNull  String&gt;();
                                                     ^^^^^^^^^^^^^^^^
Null constraint mismatch: The type &apos;@NonNull String&apos; is not a valid substitute for the type parameter &apos;V&apos; which is constrained as &apos;@Nullable&apos;

HTH</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2452747</commentid>
    <comment_count>19</comment_count>
    <who name="Chris Hubick">chris</who>
    <bug_when>2014-09-16 15:15:43 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #18)
&gt; When your class starts: 
&gt;    class MyMap&lt;K,V&gt; implements Map&lt;K,V&gt; {...
&gt; then you promise that *any* type is ok for K and for V. ...
&gt; &apos;@NonNull String&apos; is an example for a valid substitution for V. With this
&gt; substitution, get(..) has the return type &apos;@NonNull String&apos; and clients must
&gt; be allowed to assume that the method will never return null. If it does it
&gt; is a bug and must be flagged.
&gt; Since whole system analysis is not feasible (is that what you suggest?), we
&gt; must decide who is to blame without looking at the implementation of the
&gt; respective other side. The rules we have implemented achieve this: we decide
&gt; to blame the implementer, because for the client ability to specify a
&gt; &apos;SomeMap&lt;Key,@NonNull String&gt;&apos; is essential to the business.
&gt; 
&gt; However, when your class starts:
&gt;    class MyMap&lt;K,@Nullable V&gt; implements Map&lt;K,V&gt; { ...
&gt; then you restrict the usage of MyMap so that the second type argument must
&gt; always be a @Nullable type. Now in the implementation of MyMap you are free
&gt; to let get(..) return null, because V is no longer a &apos;free type variable&apos;.


So, as it stands today, when implementing a &quot;MyMap&quot; which must also remain unconstrained for use by both @NonNull and @Nullable types, when it comes to implementing get() and friends, one can choose between leaving the return types unconstrained, and get an &quot;Null type mismatch (type annotations): &apos;null&apos; is not compatible to the free type variable &apos;R&apos;&quot; error whenever they return null, or one can annotate get() and friends as returning @Nullable, yielding &quot;The method @Nullable V get(K) from MyMap cannot implement the corresponding method from Map&lt;K,V&gt; due to incompatible nullness constraints.&quot;

Is it safe to assume that annotating get() and friends as returning @Nullable is the correct thing to due, as the resulting incompatibility error is a false one, due to Bug 331651, and will go away once that is implemented, because Map.get() and the like will then be annotated to return @Nullable?

Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2452812</commentid>
    <comment_count>20</comment_count>
    <who name="Laurie C">laurie</who>
    <bug_when>2014-09-16 20:23:20 -0400</bug_when>
    <thetext>Must admit I ended up fixing the get() problem in my code by throwing away my custom classes.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>242190</attachid>
            <date>2014-04-22 09:16:00 -0400</date>
            <delta_ts>2014-04-22 09:16:46 -0400</delta_ts>
            <desc>proposed patch</desc>
            <filename>Bug-430150--18null-stricter-checking-against-type-va.patch</filename>
            <type>text/plain</type>
            <size>35616</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0NvbXBpbGVySW52b2Nh
dGlvblRlc3RzLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMv
b3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9Db21waWxlcklu
dm9jYXRpb25UZXN0cy5qYXZhCmluZGV4IGMwMGNhYWEuLjg4MGJlMGUgMTAwNjQ0Ci0tLSBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29y
ZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0NvbXBpbGVySW52b2NhdGlvblRlc3RzLmphdmEK
KysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNl
L2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vQ29tcGlsZXJJbnZvY2F0aW9uVGVz
dHMuamF2YQpAQCAtMzIsNiArMzIsNyBAQAogICoJCQkJCQkJCUJ1ZyA0MTYzMDcgLSBbMS44XVtj
b21waWxlcl1bbnVsbF0gc3ViY2xhc3Mgd2l0aCB0eXBlIHBhcmFtZXRlciBzdWJzdGl0dXRpb24g
Y29uZnVzZXMgbnVsbCBjaGVja2luZwogICoJCQkJCQkJCUJ1ZyA0MjQ2MzcgLSBbMS44XVtjb21w
aWxlcl1bbnVsbF0gQUlPT0IgaW4gUmVmZXJlbmNlRXhwcmVzc2lvbi5yZXNvbHZlVHlwZSB3aXRo
IGEgbWV0aG9kIHJlZmVyZW5jZSB0byBGaWxlczo6d2FsawogICoJCQkJCQkJCUJ1ZyA0MTg3NDMg
LSBbMS44XVtudWxsXSBjb250cmFkaWN0b3J5IGFubm90YXRpb25zIG9uIGludm9jYXRpb24gb2Yg
Z2VuZXJpYyBtZXRob2Qgbm90IHJlcG9ydGVkCisgKgkJCQkJCQkJQnVnIDQzMDE1MCAtIFsxLjhd
W251bGxdIHN0cmljdGVyIGNoZWNraW5nIGFnYWluc3QgdHlwZSB2YXJpYWJsZXMKICAqICAgICBK
ZXNwZXIgUyBNb2xsZXIgLSBDb250cmlidXRpb25zIGZvcgogICoJCQkJCQkJCWJ1ZyAzODI3MDEg
LSBbMS44XVtjb21waWxlcl0gSW1wbGVtZW50IHNlbWFudGljIGFuYWx5c2lzIG9mIExhbWJkYSBl
eHByZXNzaW9ucyAmIFJlZmVyZW5jZSBleHByZXNzaW9uCiAgKgkJCQkJCQkJYnVnIDM4MjcyMSAt
IFsxLjhdW2NvbXBpbGVyXSBFZmZlY3RpdmVseSBmaW5hbCB2YXJpYWJsZXMgbmVlZHMgc3BlY2lh
bCB0cmVhdG1lbnQKQEAgLTg0MywxMSArODQ0LDEzIEBACiAJCWV4cGVjdGVkUHJvYmxlbUF0dHJp
YnV0ZXMucHV0KCJOdWxsTG9jYWxWYXJpYWJsZUNvbXBhcmlzb25ZaWVsZHNGYWxzZSIsIG5ldyBQ
cm9ibGVtQXR0cmlidXRlcyhDYXRlZ29yaXplZFByb2JsZW0uQ0FUX1BPVEVOVElBTF9QUk9HUkFN
TUlOR19QUk9CTEVNKSk7CiAJCWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0KCJOdWxsTG9j
YWxWYXJpYWJsZUluc3RhbmNlb2ZZaWVsZHNGYWxzZSIsIG5ldyBQcm9ibGVtQXR0cmlidXRlcyhD
YXRlZ29yaXplZFByb2JsZW0uQ0FUX1BPVEVOVElBTF9QUk9HUkFNTUlOR19QUk9CTEVNKSk7CiAJ
CWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0KCJOdWxsTG9jYWxWYXJpYWJsZVJlZmVyZW5j
ZSIsIG5ldyBQcm9ibGVtQXR0cmlidXRlcyhDYXRlZ29yaXplZFByb2JsZW0uQ0FUX1BPVEVOVElB
TF9QUk9HUkFNTUlOR19QUk9CTEVNKSk7CisJCWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0
KCJOdWxsaXR5TWlzbWF0Y2hBZ2FpbnN0RnJlZVR5cGVWYXJpYWJsZSIsIG5ldyBQcm9ibGVtQXR0
cmlidXRlcyhDYXRlZ29yaXplZFByb2JsZW0uQ0FUX1BPVEVOVElBTF9QUk9HUkFNTUlOR19QUk9C
TEVNKSk7CiAJCWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0KCJOdWxsaXR5TWlzbWF0Y2hp
bmdUeXBlQW5ub3RhdGlvbiIsIG5ldyBQcm9ibGVtQXR0cmlidXRlcyhDYXRlZ29yaXplZFByb2Js
ZW0uQ0FUX1BPVEVOVElBTF9QUk9HUkFNTUlOR19QUk9CTEVNKSk7CiAJCWV4cGVjdGVkUHJvYmxl
bUF0dHJpYnV0ZXMucHV0KCJOdWxsaXR5TWlzbWF0Y2hpbmdUeXBlQW5ub3RhdGlvblN1cGVySGlu
dCIsIG5ldyBQcm9ibGVtQXR0cmlidXRlcyhDYXRlZ29yaXplZFByb2JsZW0uQ0FUX1BPVEVOVElB
TF9QUk9HUkFNTUlOR19QUk9CTEVNKSk7CiAJCWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0
KCJOdWxsaXR5TWlzbWF0Y2hUeXBlQXJndW1lbnQiLCBuZXcgUHJvYmxlbUF0dHJpYnV0ZXMoQ2F0
ZWdvcml6ZWRQcm9ibGVtLkNBVF9QT1RFTlRJQUxfUFJPR1JBTU1JTkdfUFJPQkxFTSkpOwogCQll
eHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiTnVsbGl0eVVuY2hlY2tlZFR5cGVBbm5vdGF0
aW9uRGV0YWlsIiwgbmV3IFByb2JsZW1BdHRyaWJ1dGVzKENhdGVnb3JpemVkUHJvYmxlbS5DQVRf
UE9URU5USUFMX1BST0dSQU1NSU5HX1BST0JMRU0pKTsKIAkJZXhwZWN0ZWRQcm9ibGVtQXR0cmli
dXRlcy5wdXQoIk51bGxpdHlVbmNoZWNrZWRUeXBlQW5ub3RhdGlvbkRldGFpbFN1cGVySGludCIs
IG5ldyBQcm9ibGVtQXR0cmlidXRlcyhDYXRlZ29yaXplZFByb2JsZW0uQ0FUX1BPVEVOVElBTF9Q
Uk9HUkFNTUlOR19QUk9CTEVNKSk7CisJCWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0KCJO
dWxsTm90Q29tcGF0aWJsZVRvRnJlZVR5cGVWYXJpYWJsZSIsIG5ldyBQcm9ibGVtQXR0cmlidXRl
cyhDYXRlZ29yaXplZFByb2JsZW0uQ0FUX1BPVEVOVElBTF9QUk9HUkFNTUlOR19QUk9CTEVNKSk7
CiAJCWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0KCJOdWxsU291cmNlU3RyaW5nIiwgbmV3
IFByb2JsZW1BdHRyaWJ1dGVzKENhdGVnb3JpemVkUHJvYmxlbS5DQVRfU1lOVEFYKSk7CiAJCWV4
cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0KCJOdWxsVW5ib3hpbmciLCBuZXcgUHJvYmxlbUF0
dHJpYnV0ZXMoQ2F0ZWdvcml6ZWRQcm9ibGVtLkNBVF9QT1RFTlRJQUxfUFJPR1JBTU1JTkdfUFJP
QkxFTSkpOwogCQlleHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiTnVtZXJpY1ZhbHVlT3V0
T2ZSYW5nZSIsIG5ldyBQcm9ibGVtQXR0cmlidXRlcyhDYXRlZ29yaXplZFByb2JsZW0uQ0FUX0lO
VEVSTkFMKSk7CkBAIC0xNjU2LDYgKzE2NTksNyBAQAogCQlleHBlY3RlZFByb2JsZW1BdHRyaWJ1
dGVzLnB1dCgiTnVsbGFibGVGaWVsZFJlZmVyZW5jZSIsIG5ldyBQcm9ibGVtQXR0cmlidXRlcyhK
YXZhQ29yZS5DT01QSUxFUl9QQl9OVUxMX1JFRkVSRU5DRSkpOwogCQlleHBlY3RlZFByb2JsZW1B
dHRyaWJ1dGVzLnB1dCgiTnVsbEFubm90YXRpb25VbnN1cHBvcnRlZExvY2F0aW9uIiwgU0tJUCk7
CiAJCWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0KCJOdWxsQW5ub3RhdGlvblVuc3VwcG9y
dGVkTG9jYXRpb25BdFR5cGUiLCBTS0lQKTsKKwkJZXhwZWN0ZWRQcm9ibGVtQXR0cmlidXRlcy5w
dXQoIk51bGxpdHlNaXNtYXRjaEFnYWluc3RGcmVlVHlwZVZhcmlhYmxlIiwgbmV3IFByb2JsZW1B
dHRyaWJ1dGVzKEphdmFDb3JlLkNPTVBJTEVSX1BCX05VTExfU1BFQ0lGSUNBVElPTl9WSU9MQVRJ
T04pKTsKIAkJZXhwZWN0ZWRQcm9ibGVtQXR0cmlidXRlcy5wdXQoIk51bGxpdHlNaXNtYXRjaGlu
Z1R5cGVBbm5vdGF0aW9uIiwgbmV3IFByb2JsZW1BdHRyaWJ1dGVzKEphdmFDb3JlLkNPTVBJTEVS
X1BCX05VTExfU1BFQ0lGSUNBVElPTl9WSU9MQVRJT04pKTsKIAkJZXhwZWN0ZWRQcm9ibGVtQXR0
cmlidXRlcy5wdXQoIk51bGxpdHlNaXNtYXRjaGluZ1R5cGVBbm5vdGF0aW9uU3VwZXJIaW50Iiwg
bmV3IFByb2JsZW1BdHRyaWJ1dGVzKEphdmFDb3JlLkNPTVBJTEVSX1BCX05VTExfU1BFQ0lGSUNB
VElPTl9WSU9MQVRJT04pKTsKIAkJZXhwZWN0ZWRQcm9ibGVtQXR0cmlidXRlcy5wdXQoIk51bGxp
dHlNaXNtYXRjaFR5cGVBcmd1bWVudCIsIG5ldyBQcm9ibGVtQXR0cmlidXRlcyhKYXZhQ29yZS5D
T01QSUxFUl9QQl9OVUxMX1NQRUNJRklDQVRJT05fVklPTEFUSU9OKSk7CkBAIC0xNjY1LDYgKzE2
NjksNyBAQAogCQlleHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiTnVsbExvY2FsVmFyaWFi
bGVDb21wYXJpc29uWWllbGRzRmFsc2UiLCBuZXcgUHJvYmxlbUF0dHJpYnV0ZXMoSmF2YUNvcmUu
Q09NUElMRVJfUEJfUkVEVU5EQU5UX05VTExfQ0hFQ0spKTsKIAkJZXhwZWN0ZWRQcm9ibGVtQXR0
cmlidXRlcy5wdXQoIk51bGxMb2NhbFZhcmlhYmxlSW5zdGFuY2VvZllpZWxkc0ZhbHNlIiwgbmV3
IFByb2JsZW1BdHRyaWJ1dGVzKEphdmFDb3JlLkNPTVBJTEVSX1BCX1JFRFVOREFOVF9OVUxMX0NI
RUNLKSk7CiAJCWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0KCJOdWxsTG9jYWxWYXJpYWJs
ZVJlZmVyZW5jZSIsIG5ldyBQcm9ibGVtQXR0cmlidXRlcyhKYXZhQ29yZS5DT01QSUxFUl9QQl9O
VUxMX1JFRkVSRU5DRSkpOworCQlleHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiTnVsbE5v
dENvbXBhdGlibGVUb0ZyZWVUeXBlVmFyaWFibGUiLCBuZXcgUHJvYmxlbUF0dHJpYnV0ZXMoSmF2
YUNvcmUuQ09NUElMRVJfUEJfTlVMTF9TUEVDSUZJQ0FUSU9OX1ZJT0xBVElPTikpOwogCQlleHBl
Y3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiTnVsbFNvdXJjZVN0cmluZyIsIFNLSVApOwogCQll
eHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiTnVsbFVuYm94aW5nIiwgbmV3IFByb2JsZW1B
dHRyaWJ1dGVzKEphdmFDb3JlLkNPTVBJTEVSX1BCX05VTExfUkVGRVJFTkNFKSk7CiAJCWV4cGVj
dGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0KCJOdW1lcmljVmFsdWVPdXRPZlJhbmdlIiwgU0tJUCk7
CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3Jn
L2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OdWxsVHlwZUFubm90
YXRpb25UZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMv
b3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OdWxsVHlwZUFu
bm90YXRpb25UZXN0LmphdmEKaW5kZXggNjE5NzdkNS4uMjQ5MjU1NyAxMDA2NDQKLS0tIGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbFR5cGVBbm5vdGF0aW9uVGVzdC5qYXZhCisr
KyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxUeXBlQW5ub3RhdGlvblRlc3Qu
amF2YQpAQCAtMjI1LDggKzIyNSw5IEBACiAJCQkJICAiaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5h
bm5vdGF0aW9uLio7XG4iICsKIAkJCQkgICJwdWJsaWMgY2xhc3MgQTxYPiB7XG4iICsKIAkJCQkg
ICIgICAgcHVibGljIGNsYXNzIEk8WT4ge1xuIiArCisJCQkJICAiICAgICAgICBYIGFuWDtcbiIg
KwogCQkJCSAgIiAgICAgICAgcHVibGljIFggZm9vKFkgbCkge1xuIiArCi0JCQkJICAiICAgICAg
ICAgICAgcmV0dXJuIG51bGw7XG4iICsKKwkJCQkgICIgICAgICAgICAgICByZXR1cm4gYW5YO1xu
IiArCiAJCQkJICAiICAgICAgICB9XG4iICsKIAkJCQkgICIgICAgfVxuIiArCiAJCQkJICAiICAg
IHZvaWQgYmFyKEE8QE51bGxhYmxlIE9iamVjdD4uSTxATm9uTnVsbCBPYmplY3Q+IGkpIHtcbiIg
KyAvLyBsZWdhbCBpbnN0YW50aWF0aW9uCkBAIC0yMzQsMTIgKzIzNSwxMiBAQAogCQkJCSAgIiAg
ICB9XG4iICsKIAkJCQkgICJ9XG4ifSwKIAkJCSItLS0tLS0tLS0tXG4iICsgCi0JCQkiMS4gRVJS
T1IgaW4gQS5qYXZhIChhdCBsaW5lIDkpXG4iICsgCisJCQkiMS4gRVJST1IgaW4gQS5qYXZhIChh
dCBsaW5lIDEwKVxuIiArIAogCQkJIglATm9uTnVsbCBPYmplY3QgbyA9IGkuZm9vKG51bGwpOyAv
LyBwcm9ibGVtczogYXJndW1lbnQgYW5kIGFzc2lnbm1lbnQgdmlvbGF0ZSBudWxsIGNvbnRyYWN0
c1xuIiArIAogCQkJIgkgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXG4iICsgCiAJCQki
TnVsbCB0eXBlIG1pc21hdGNoICh0eXBlIGFubm90YXRpb25zKTogcmVxdWlyZWQgJ0BOb25OdWxs
IE9iamVjdCcgYnV0IHRoaXMgZXhwcmVzc2lvbiBoYXMgdHlwZSAnQE51bGxhYmxlIE9iamVjdCdc
biIgKyAKIAkJCSItLS0tLS0tLS0tXG4iICsgCi0JCQkiMi4gRVJST1IgaW4gQS5qYXZhIChhdCBs
aW5lIDkpXG4iICsgCisJCQkiMi4gRVJST1IgaW4gQS5qYXZhIChhdCBsaW5lIDEwKVxuIiArIAog
CQkJIglATm9uTnVsbCBPYmplY3QgbyA9IGkuZm9vKG51bGwpOyAvLyBwcm9ibGVtczogYXJndW1l
bnQgYW5kIGFzc2lnbm1lbnQgdmlvbGF0ZSBudWxsIGNvbnRyYWN0c1xuIiArIAogCQkJIgkgICAg
ICAgICAgICAgICAgICAgICAgICAgIF5eXl5cbiIgKyAKIAkJCSJOdWxsIHR5cGUgbWlzbWF0Y2g6
IHJlcXVpcmVkIFwnQE5vbk51bGwgT2JqZWN0XCcgYnV0IHRoZSBwcm92aWRlZCB2YWx1ZSBpcyBu
dWxsXG4iICsgCkBAIC0yNTk0LDEyICsyNTk1LDE3IEBACiAJCQl9LAogCQkJZ2V0Q29tcGlsZXJP
cHRpb25zKCksCiAJCQkiLS0tLS0tLS0tLVxuIiArIAotCQkJIjEuIFdBUk5JTkcgaW4gUG9seU51
bGwuamF2YSAoYXQgbGluZSA5KVxuIiArIAorCQkJIjEuIEVSUk9SIGluIFBvbHlOdWxsLmphdmEg
KGF0IGxpbmUgNylcbiIgKyAKKwkJCSIJPFg+IFggZXh0cmFjdChGdW5jPEBOdWxsYWJsZSBYPiBm
LCBATnVsbGFibGUgWCBzKSB7IHJldHVybiBmLmEocyk7IH1cbiIgKyAKKwkJCSIJICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5c
biIgKyAKKwkJCSJOdWxsIHR5cGUgbWlzbWF0Y2ggKHR5cGUgYW5ub3RhdGlvbnMpOiByZXF1aXJl
ZCBcJ1hcJyBidXQgdGhpcyBleHByZXNzaW9uIGhhcyB0eXBlIFwnQE51bGxhYmxlIFhcJywgd2hl
cmUgJ1gnIGlzIGEgZnJlZSB0eXBlIHZhcmlhYmxlXG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIiAr
IAorCQkJIjIuIFdBUk5JTkcgaW4gUG9seU51bGwuamF2YSAoYXQgbGluZSA5KVxuIiArIAogCQkJ
IglyZXR1cm4gZXh0cmFjdChpIC0+IG5lZWROTihpKSwgXCJvbGFcIik7XG4iICsgCiAJCQkiCSAg
ICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5cbiIgKyAKIAkJCSJOdWxsIHR5cGUg
c2FmZXR5ICh0eXBlIGFubm90YXRpb25zKTogVGhlIGV4cHJlc3Npb24gb2YgdHlwZSBcJ1N0cmlu
Z1wnIG5lZWRzIHVuY2hlY2tlZCBjb252ZXJzaW9uIHRvIGNvbmZvcm0gdG8gXCdATm9uTnVsbCBT
dHJpbmdcJ1xuIiArIAogCQkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJCSIyLiBFUlJPUiBpbiBQb2x5
TnVsbC5qYXZhIChhdCBsaW5lIDkpXG4iICsgCisJCQkiMy4gRVJST1IgaW4gUG9seU51bGwuamF2
YSAoYXQgbGluZSA5KVxuIiArIAogCQkJIglyZXR1cm4gZXh0cmFjdChpIC0+IG5lZWROTihpKSwg
XCJvbGFcIik7XG4iICsgCiAJCQkiCSAgICAgICAgICAgICAgICAgICAgICAgICAgIF5cbiIgKyAK
IAkJCSJOdWxsIHR5cGUgbWlzbWF0Y2ggKHR5cGUgYW5ub3RhdGlvbnMpOiByZXF1aXJlZCBcJ0BO
b25OdWxsIFN0cmluZ1wnIGJ1dCB0aGlzIGV4cHJlc3Npb24gaGFzIHR5cGUgXCdATnVsbGFibGUg
U3RyaW5nXCdcbiIgKyAKQEAgLTI2MjgsNyArMjYzNCwxMiBAQAogCQkJfSwKIAkJCWNvbXBpbGVy
T3B0aW9ucywKIAkJCSItLS0tLS0tLS0tXG4iICsgCi0JCQkiMS4gRVJST1IgaW4gR2VuZXJpY3Mu
amF2YSAoYXQgbGluZSA2KVxuIiArIAorCQkJIjEuIEVSUk9SIGluIEdlbmVyaWNzLmphdmEgKGF0
IGxpbmUgNClcbiIgKyAKKwkJCSIJPFg+IFggbShATnVsbGFibGUgWCBhKSB7IHJldHVybiBudWxs
OyB9XG4iICsgCisJCQkiCSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXl5eXlxuIiAr
IAorCQkJIk51bGwgdHlwZSBtaXNtYXRjaCAodHlwZSBhbm5vdGF0aW9ucyk6IFwnbnVsbFwnIGlz
IG5vdCBjb21wYXRpYmxlIHRvIHRoZSBmcmVlIHR5cGUgdmFyaWFibGUgJ1gnXG4iICsgCisJCQki
LS0tLS0tLS0tLVxuIiArIAorCQkJIjIuIEVSUk9SIGluIEdlbmVyaWNzLmphdmEgKGF0IGxpbmUg
NilcbiIgKyAKIAkJCSIJQE5vbk51bGwgU3RyaW5nIHMgPSBtKGluKTtcbiIgKyAKIAkJCSIJICAg
ICAgICAgICAgICAgICAgICBeXl5eXlxuIiArIAogCQkJIk51bGwgdHlwZSBzYWZldHkgKHR5cGUg
YW5ub3RhdGlvbnMpOiBUaGUgZXhwcmVzc2lvbiBvZiB0eXBlIFwnU3RyaW5nXCcgbmVlZHMgdW5j
aGVja2VkIGNvbnZlcnNpb24gdG8gY29uZm9ybSB0byBcJ0BOb25OdWxsIFN0cmluZ1wnXG4iICsg
CkBAIC0zNTMzLDcgKzM1NDQsNyBAQAogCQkJIk51bGwgdHlwZSBtaXNtYXRjaCAodHlwZSBhbm5v
dGF0aW9ucyk6IHJlcXVpcmVkIFwnQE5vbk51bGwgWDxATm9uTnVsbCA/PlwnIGJ1dCB0aGlzIGV4
cHJlc3Npb24gaGFzIHR5cGUgXCdATm9uTnVsbCBYPEBOdWxsYWJsZSBTdHJpbmc+XCdcbiIgKyAK
IAkJCSItLS0tLS0tLS0tXG4iKTsJCQogCX0KLQlwdWJsaWMgdm9pZCB0ZXN0VHlwZVZhcmlhYmxl
KCkgeworCXB1YmxpYyB2b2lkIHRlc3RUeXBlVmFyaWFibGUxKCkgewogCQlydW5OZWdhdGl2ZVRl
c3RXaXRoTGlicygKIAkJCW5ldyBTdHJpbmdbXSB7CiAJCQkJIlguamF2YSIsCkBAIC0zNTYwLDYg
KzM1NzEsMTUwIEBACiAJCQkiCSAgICAgICAgICAgICBeXl5eXG4iICsgCiAJCQkiTnVsbCB0eXBl
IG1pc21hdGNoOiByZXF1aXJlZCBcJ0BOb25OdWxsIFRcJyBidXQgdGhlIHByb3ZpZGVkIHZhbHVl
IGlzIG51bGxcbiIgKyAKIAkJCSItLS0tLS0tLS0tXG4iKTsJCQorCX0KKwkvLyBmcmVlIHR5cGUg
dmFyaWFibGUgZG9lcyBub3QgZW5zdXJlIEBOb25OdWxsLCBidXQgY2Fubm90IGFjY2VwdCBudWxs
IGVpdGhlciwgdW5ib3VuZGVkIHR5cGUgdmFyaWFibGUKKwlwdWJsaWMgdm9pZCB0ZXN0VHlwZVZh
cmlhYmxlMigpIHsKKwkJcnVuTmVnYXRpdmVUZXN0V2l0aExpYnMoCisJCQluZXcgU3RyaW5nW10g
eworCQkJCSJYLmphdmEiLAorCQkJCSJpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24u
KjtcbiIgKworCQkJCSJwdWJsaWMgY2xhc3MgWDxUPiB7XG4iICsKKwkJCQkiCXZvaWQgY29uc3Vt
ZUFueShUIHQpIHtcbiIgKworCQkJCSIJCWNvbnN1bWUodCk7IC8vIGVycm9yLCB0IGNhbiBiZSBu
dWxsXG4iICsKKwkJCQkiCQljb25zdW1lT2JqZWN0KHQpOyAvLyBlcnJvciwgdCBjYW4gYmUgbnVs
bFxuIiArCisJCQkJIgl9XG4iICsKKwkJCQkiCXZvaWQgY29uc3VtZU51bGxhYmxlKEBOdWxsYWJs
ZSBUIHQpIHtcbiIgKworCQkJCSIJCWNvbnN1bWUodCk7IC8vIGVycm9yLCBib3RoIHNpZGVzIGV4
cGxpY2l0LCBtaXNtYXRjaFxuIiArCisJCQkJIgkJY29uc3VtZU9iamVjdCh0KTsgLy8gZXJyb3Is
IGJvdGggc2lkZXMgZXhwbGljaXQsIG1pc21hdGNoXG4iICsKKwkJCQkiCX1cbiIgKworCQkJCSIJ
dm9pZCBjb25zdW1lKEBOb25OdWxsIFQgdCkge31cbiIgKworCQkJCSIJdm9pZCBjb25zdW1lT2Jq
ZWN0KEBOb25OdWxsIE9iamVjdCBvKSB7fVxuIiArCisJCQkJIglUIHByb2R1Y2UoKSB7XG4iICsK
KwkJCQkiCQlyZXR1cm4gbnVsbDsgLy8gZXJyb3IsIFQgbWF5IG5vdCBhY2NlcHQgbnVsbFxuIiAr
CisJCQkJIgl9XG4iICsKKwkJCQkiCVQgcHJvZHVjZUZyb21OdWxsYWJsZShATnVsbGFibGUgVCB0
KSB7XG4iICsKKwkJCQkiCQlyZXR1cm4gdDsgLy8gZXJyb3IsIFQgbWF5IG5vdCBhY2NlcHQgbnVs
bGFibGVcbiIgKworCQkJCSIJfVxuIiArCisJCQkJIn1cbiIKKwkJCX0sCisJCQlnZXRDb21waWxl
ck9wdGlvbnMoKSwKKwkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkiMS4gV0FSTklORyBpbiBYLmph
dmEgKGF0IGxpbmUgNClcbiIgKyAKKwkJCSIJY29uc3VtZSh0KTsgLy8gZXJyb3IsIHQgY2FuIGJl
IG51bGxcbiIgKyAKKwkJCSIJICAgICAgICBeXG4iICsgCisJCQkiTnVsbCB0eXBlIHNhZmV0eSAo
dHlwZSBhbm5vdGF0aW9ucyk6IFRoZSBleHByZXNzaW9uIG9mIHR5cGUgXCdUXCcgbmVlZHMgdW5j
aGVja2VkIGNvbnZlcnNpb24gdG8gY29uZm9ybSB0byBcJ0BOb25OdWxsIFRcJ1xuIiArIAorCQkJ
Ii0tLS0tLS0tLS1cbiIgKyAKKwkJCSIyLiBXQVJOSU5HIGluIFguamF2YSAoYXQgbGluZSA1KVxu
IiArIAorCQkJIgljb25zdW1lT2JqZWN0KHQpOyAvLyBlcnJvciwgdCBjYW4gYmUgbnVsbFxuIiAr
IAorCQkJIgkgICAgICAgICAgICAgIF5cbiIgKyAKKwkJCSJOdWxsIHR5cGUgc2FmZXR5ICh0eXBl
IGFubm90YXRpb25zKTogVGhlIGV4cHJlc3Npb24gb2YgdHlwZSBcJ1RcJyBuZWVkcyB1bmNoZWNr
ZWQgY29udmVyc2lvbiB0byBjb25mb3JtIHRvIFwnQE5vbk51bGwgT2JqZWN0XCdcbiIgKyAKKwkJ
CSItLS0tLS0tLS0tXG4iICsgCisJCQkiMy4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDgpXG4i
ICsgCisJCQkiCWNvbnN1bWUodCk7IC8vIGVycm9yLCBib3RoIHNpZGVzIGV4cGxpY2l0LCBtaXNt
YXRjaFxuIiArIAorCQkJIgkgICAgICAgIF5cbiIgKyAKKwkJCSJOdWxsIHR5cGUgbWlzbWF0Y2gg
KHR5cGUgYW5ub3RhdGlvbnMpOiByZXF1aXJlZCBcJ0BOb25OdWxsIFRcJyBidXQgdGhpcyBleHBy
ZXNzaW9uIGhhcyB0eXBlIFwnQE51bGxhYmxlIFRcJ1xuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIg
KyAKKwkJCSI0LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgOSlcbiIgKyAKKwkJCSIJY29uc3Vt
ZU9iamVjdCh0KTsgLy8gZXJyb3IsIGJvdGggc2lkZXMgZXhwbGljaXQsIG1pc21hdGNoXG4iICsg
CisJCQkiCSAgICAgICAgICAgICAgXlxuIiArIAorCQkJIk51bGwgdHlwZSBtaXNtYXRjaCAodHlw
ZSBhbm5vdGF0aW9ucyk6IHJlcXVpcmVkIFwnQE5vbk51bGwgT2JqZWN0XCcgYnV0IHRoaXMgZXhw
cmVzc2lvbiBoYXMgdHlwZSBcJ0BOdWxsYWJsZSBUXCdcbiIgKyAKKwkJCSItLS0tLS0tLS0tXG4i
ICsgCisJCQkiNS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDE0KVxuIiArIAorCQkJIglyZXR1
cm4gbnVsbDsgLy8gZXJyb3IsIFQgbWF5IG5vdCBhY2NlcHQgbnVsbFxuIiArIAorCQkJIgkgICAg
ICAgXl5eXlxuIiArIAorCQkJIk51bGwgdHlwZSBtaXNtYXRjaCAodHlwZSBhbm5vdGF0aW9ucyk6
IFwnbnVsbFwnIGlzIG5vdCBjb21wYXRpYmxlIHRvIHRoZSBmcmVlIHR5cGUgdmFyaWFibGUgJ1Qn
XG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJIjYuIEVSUk9SIGluIFguamF2YSAoYXQg
bGluZSAxNylcbiIgKyAKKwkJCSIJcmV0dXJuIHQ7IC8vIGVycm9yLCBUIG1heSBub3QgYWNjZXB0
IG51bGxhYmxlXG4iICsgCisJCQkiCSAgICAgICBeXG4iICsgCisJCQkiTnVsbCB0eXBlIG1pc21h
dGNoICh0eXBlIGFubm90YXRpb25zKTogcmVxdWlyZWQgXCdUXCcgYnV0IHRoaXMgZXhwcmVzc2lv
biBoYXMgdHlwZSBcJ0BOdWxsYWJsZSBUXCcsIHdoZXJlIFwnVFwnIGlzIGEgZnJlZSB0eXBlIHZh
cmlhYmxlXG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIik7CisJfQorCS8vIGZyZWUgdHlwZSB2YXJp
YWJsZSBkb2VzIG5vdCBlbnN1cmUgQE5vbk51bGwsIGJ1dCBjYW5ub3QgYWNjZXB0IG51bGwgZWl0
aGVyLCB0eXBlIHZhcmlhYmxlIHdpdGggdXBwZXIgYm91bmQKKwlwdWJsaWMgdm9pZCB0ZXN0VHlw
ZVZhcmlhYmxlMygpIHsKKwkJcnVuTmVnYXRpdmVUZXN0V2l0aExpYnMoCisJCQluZXcgU3RyaW5n
W10geworCQkJCSJYLmphdmEiLAorCQkJCSJpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmFubm90YXRp
b24uKjtcbiIgKworCQkJCSJwdWJsaWMgY2xhc3MgWDxUIGV4dGVuZHMgTnVtYmVyPiB7XG4iICsK
KwkJCQkiCXZvaWQgY29uc3VtZUFueShUIHQpIHtcbiIgKworCQkJCSIJCWNvbnN1bWUodCk7IC8v
IGVycm9yLCB0IGNhbiBiZSBudWxsXG4iICsKKwkJCQkiCQljb25zdW1lT2JqZWN0KHQpOyAvLyBl
cnJvciwgdCBjYW4gYmUgbnVsbFxuIiArCisJCQkJIgl9XG4iICsKKwkJCQkiCXZvaWQgY29uc3Vt
ZU51bGxhYmxlKEBOdWxsYWJsZSBUIHQpIHtcbiIgKworCQkJCSIJCWNvbnN1bWUodCk7IC8vIGVy
cm9yLCBib3RoIHNpZGVzIGV4cGxpY2l0LCBtaXNtYXRjaFxuIiArCisJCQkJIgkJY29uc3VtZU9i
amVjdCh0KTsgLy8gZXJyb3IsIGJvdGggc2lkZXMgZXhwbGljaXQsIG1pc21hdGNoXG4iICsKKwkJ
CQkiCX1cbiIgKworCQkJCSIJdm9pZCBjb25zdW1lKEBOb25OdWxsIFQgdCkge31cbiIgKworCQkJ
CSIJdm9pZCBjb25zdW1lT2JqZWN0KEBOb25OdWxsIE9iamVjdCBvKSB7fVxuIiArCisJCQkJIglU
IHByb2R1Y2UoKSB7XG4iICsKKwkJCQkiCQlyZXR1cm4gbnVsbDsgLy8gZXJyb3IsIFQgbWF5IG5v
dCBhY2NlcHQgbnVsbFxuIiArCisJCQkJIgl9XG4iICsKKwkJCQkiCVQgcHJvZHVjZUZyb21OdWxs
YWJsZShATnVsbGFibGUgVCB0KSB7XG4iICsKKwkJCQkiCQlyZXR1cm4gdDsgLy8gZXJyb3IsIFQg
bWF5IG5vdCBhY2NlcHQgbnVsbGFibGVcbiIgKworCQkJCSIJfVxuIiArCisJCQkJIn1cbiIKKwkJ
CX0sCisJCQlnZXRDb21waWxlck9wdGlvbnMoKSwKKwkJCSItLS0tLS0tLS0tXG4iICsgCisJCQki
MS4gV0FSTklORyBpbiBYLmphdmEgKGF0IGxpbmUgNClcbiIgKyAKKwkJCSIJY29uc3VtZSh0KTsg
Ly8gZXJyb3IsIHQgY2FuIGJlIG51bGxcbiIgKyAKKwkJCSIJICAgICAgICBeXG4iICsgCisJCQki
TnVsbCB0eXBlIHNhZmV0eSAodHlwZSBhbm5vdGF0aW9ucyk6IFRoZSBleHByZXNzaW9uIG9mIHR5
cGUgXCdUIGV4dGVuZHMgTnVtYmVyXCcgbmVlZHMgdW5jaGVja2VkIGNvbnZlcnNpb24gdG8gY29u
Zm9ybSB0byBcJ0BOb25OdWxsIFQgZXh0ZW5kcyBOdW1iZXJcJ1xuIiArIAorCQkJIi0tLS0tLS0t
LS1cbiIgKyAKKwkJCSIyLiBXQVJOSU5HIGluIFguamF2YSAoYXQgbGluZSA1KVxuIiArIAorCQkJ
Igljb25zdW1lT2JqZWN0KHQpOyAvLyBlcnJvciwgdCBjYW4gYmUgbnVsbFxuIiArIAorCQkJIgkg
ICAgICAgICAgICAgIF5cbiIgKyAKKwkJCSJOdWxsIHR5cGUgc2FmZXR5ICh0eXBlIGFubm90YXRp
b25zKTogVGhlIGV4cHJlc3Npb24gb2YgdHlwZSBcJ1QgZXh0ZW5kcyBOdW1iZXJcJyBuZWVkcyB1
bmNoZWNrZWQgY29udmVyc2lvbiB0byBjb25mb3JtIHRvIFwnQE5vbk51bGwgT2JqZWN0XCdcbiIg
KyAKKwkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkiMy4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5l
IDgpXG4iICsgCisJCQkiCWNvbnN1bWUodCk7IC8vIGVycm9yLCBib3RoIHNpZGVzIGV4cGxpY2l0
LCBtaXNtYXRjaFxuIiArIAorCQkJIgkgICAgICAgIF5cbiIgKyAKKwkJCSJOdWxsIHR5cGUgbWlz
bWF0Y2ggKHR5cGUgYW5ub3RhdGlvbnMpOiByZXF1aXJlZCBcJ0BOb25OdWxsIFQgZXh0ZW5kcyBO
dW1iZXJcJyBidXQgdGhpcyBleHByZXNzaW9uIGhhcyB0eXBlIFwnQE51bGxhYmxlIFQgZXh0ZW5k
cyBOdW1iZXJcJ1xuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCSI0LiBFUlJPUiBpbiBY
LmphdmEgKGF0IGxpbmUgOSlcbiIgKyAKKwkJCSIJY29uc3VtZU9iamVjdCh0KTsgLy8gZXJyb3Is
IGJvdGggc2lkZXMgZXhwbGljaXQsIG1pc21hdGNoXG4iICsgCisJCQkiCSAgICAgICAgICAgICAg
XlxuIiArIAorCQkJIk51bGwgdHlwZSBtaXNtYXRjaCAodHlwZSBhbm5vdGF0aW9ucyk6IHJlcXVp
cmVkIFwnQE5vbk51bGwgT2JqZWN0XCcgYnV0IHRoaXMgZXhwcmVzc2lvbiBoYXMgdHlwZSBcJ0BO
dWxsYWJsZSBUIGV4dGVuZHMgTnVtYmVyXCdcbiIgKyAKKwkJCSItLS0tLS0tLS0tXG4iICsgCisJ
CQkiNS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDE0KVxuIiArIAorCQkJIglyZXR1cm4gbnVs
bDsgLy8gZXJyb3IsIFQgbWF5IG5vdCBhY2NlcHQgbnVsbFxuIiArIAorCQkJIgkgICAgICAgXl5e
XlxuIiArIAorCQkJIk51bGwgdHlwZSBtaXNtYXRjaCAodHlwZSBhbm5vdGF0aW9ucyk6IFwnbnVs
bFwnIGlzIG5vdCBjb21wYXRpYmxlIHRvIHRoZSBmcmVlIHR5cGUgdmFyaWFibGUgXCdUXCdcbiIg
KyAKKwkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkiNi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5l
IDE3KVxuIiArIAorCQkJIglyZXR1cm4gdDsgLy8gZXJyb3IsIFQgbWF5IG5vdCBhY2NlcHQgbnVs
bGFibGVcbiIgKyAKKwkJCSIJICAgICAgIF5cbiIgKyAKKwkJCSJOdWxsIHR5cGUgbWlzbWF0Y2gg
KHR5cGUgYW5ub3RhdGlvbnMpOiByZXF1aXJlZCBcJ1RcJyBidXQgdGhpcyBleHByZXNzaW9uIGhh
cyB0eXBlIFwnQE51bGxhYmxlIFQgZXh0ZW5kcyBOdW1iZXJcJywgd2hlcmUgXCdUXCcgaXMgYSBm
cmVlIHR5cGUgdmFyaWFibGVcbiIgKyAKKwkJCSItLS0tLS0tLS0tXG4iKTsKKwl9CisJLy8gZnJl
ZSB0eXBlIHZhcmlhYmxlIGlzIGNvbXBhdGlibGUgdG8gaXRzZWxmIGV2ZW4gd2l0aCBkaWZmZXJl
bnQgbm90IG51bGwtcmVsYXRlZCB0eXBlIGFubm90YXRpb25zCisJcHVibGljIHZvaWQgdGVzdFR5
cGVWYXJpYWJsZTQoKSB7CisJCXJ1bk5lZ2F0aXZlVGVzdFdpdGhMaWJzKAorCQkJbmV3IFN0cmlu
Z1tdIHsKKwkJCQkiWC5qYXZhIiwKKwkJCQkiaW1wb3J0IGphdmEubGFuZy5hbm5vdGF0aW9uLio7
XG4iICsKKwkJCQkiaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uLio7XG4iICsKKwkJ
CQkiQFRhcmdldChFbGVtZW50VHlwZS5UWVBFX1VTRSkgQGludGVyZmFjZSBUeXBlTWFya2VyIHt9
XG4iICsKKwkJCQkicHVibGljIGNsYXNzIFg8VD4ge1xuIiArCisJCQkJIglUIHBhc3NUaHJvdWdo
MShAVHlwZU1hcmtlciBUIHQpIHtcbiIgKworCQkJCSIJCXJldHVybiB0OyAvLyBPS1xuIiArCisJ
CQkJIgl9XG4iICsKKwkJCQkiCUBUeXBlTWFya2VyIFQgcGFzc1Rocm91Z2gyKFQgdCkge1xuIiAr
CisJCQkJIgkJcmV0dXJuIHQ7IC8vIE9LXG4iICsKKwkJCQkiCX1cbiIgKworCQkJCSIJQFR5cGVN
YXJrZXIgVCBwYXNzVGhyb3VnaDMoQE51bGxhYmxlIEBUeXBlTWFya2VyIFQgdCkge1xuIiArCisJ
CQkJIgkJcmV0dXJuIHQ7IC8vIE5vdCBPS1xuIiArCisJCQkJIgl9XG4iICsKKwkJCQkifVxuIgor
CQkJfSwKKwkJCWdldENvbXBpbGVyT3B0aW9ucygpLAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJ
CSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTIpXG4iICsgCisJCQkiCXJldHVybiB0OyAv
LyBOb3QgT0tcbiIgKyAKKwkJCSIJICAgICAgIF5cbiIgKyAKKwkJCSJOdWxsIHR5cGUgbWlzbWF0
Y2ggKHR5cGUgYW5ub3RhdGlvbnMpOiByZXF1aXJlZCBcJ1RcJyBidXQgdGhpcyBleHByZXNzaW9u
IGhhcyB0eXBlIFwnQE51bGxhYmxlIFRcJywgd2hlcmUgJ1QnIGlzIGEgZnJlZSB0eXBlIHZhcmlh
YmxlXG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIik7CiAJfQogCXB1YmxpYyB2b2lkIHRlc3RTRTdB
bm5vdGF0aW9uQ29weSgpIHsgLy8gd2Ugd2VyZSBkcm9wcGluZyBhbm5vdGF0aW9ucyBoZXJlLCBi
dXQgbnVsbCBhbmFseXNpcyB3b3JrZWQgYWxyZWFkeSBzaW5jZSB0aGUgdGFnYml0cyB3ZXJlIG5v
dCAiZHJvcHBlZCIsIGp1c3QgdGhlIHNhbWUgY2FwdHVyaW5nIGluIGEgdGVzdAogCQlydW5OZWdh
dGl2ZVRlc3RXaXRoTGlicygKQEAgLTQzOTUsOSArNDU1MCw5IEBACiAJCSItLS0tLS0tLS0tXG4i
KTsKIH0KIAotLy8gYXBwbHkgbnVsbCBkZWZhdWx0IHRvIHR5cGUgYXJndW1lbnRzIC0gbm8gZWZm
ZWN0IG9uIHR5cGUgdmFyaWFibGUgb3Igd2lsZGNhcmQ6CisvLyBhcHBseSBudWxsIGRlZmF1bHQg
dG8gdHlwZSBhcmd1bWVudHMgLSBubyBlZmZlY3Qgb24gdHlwZSB2YXJpYWJsZSBvciB3aWxkY2Fy
ZCwgYnV0IGFwcGx5IHN0cmljdCBjaGVja2luZyBhc3N1bWluZyBub3RoaW5nCiBwdWJsaWMgdm9p
ZCB0ZXN0RGVmYXVsdDAxYigpIHsKLQlydW5Db25mb3JtVGVzdFdpdGhMaWJzKAorCXJ1bk5lZ2F0
aXZlVGVzdFdpdGhMaWJzKAogCQluZXcgU3RyaW5nW10gewogCQkJIlguamF2YSIsCiAJCQkiaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uLio7XG4iICsKQEAgLTQ0MDUsMTMgKzQ1NjAs
MzAgQEAKIAkJCSJATm9uTnVsbEJ5RGVmYXVsdChEZWZhdWx0TG9jYXRpb24uVFlQRV9BUkdVTUVO
VClcbiIgKwogCQkJInB1YmxpYyBjbGFzcyBYPFQ+IHtcbiIgKwogCQkJIglMaXN0PFQ+IHRlc3Qo
TGlzdDw/IGV4dGVuZHMgTnVtYmVyPiBpbikge1xuIiArCi0JCQkiCQlpbi5hZGQobnVsbCk7IC8v
IE9LXG4iICsKLQkJCSIJCXJldHVybiBuZXcgQXJyYXlMaXN0PEBOdWxsYWJsZSBUPigpO1xuIiAr
IC8vIFRPRE86IHVuYW5ub3RhdGVkIHR5cGUgdmFyaWFibGUgc2hvdWxkIGJlIHJlZ2FyZGVkIGFz
ICdjb3VsZCBiZSBlaXRoZXInCisJCQkiCQlpbi5hZGQobnVsbCk7IC8vIE5PSywgY2Fubm90IGFz
c3VtZSBudWxsYWJsZVxuIiArCisJCQkiCQluZWVkTk4oaW4uZ2V0KDApKTsgLy8gTk9LLCBjYW5u
b3QgYXNzdW1lIG5vbm51bGxcbiIgKworCQkJIgkJcmV0dXJuIG5ldyBBcnJheUxpc3Q8QE51bGxh
YmxlIFQ+KCk7IC8vIE5PSywgY2Fubm90IGFzc3VtZSBudWxsYWJsZSBmb3IgVCBpbiBMaXN0PFQ+
XG4iICsKIAkJCSIJfVxuIiArCisJCQkiCXZvaWQgbmVlZE5OKEBOb25OdWxsIE51bWJlciBuKSB7
fVxuIiArCiAJCQkifVxuIgogCQl9LAogCQlnZXRDb21waWxlck9wdGlvbnMoKSwKLQkJIiIpOwor
CQkiLS0tLS0tLS0tLVxuIiArIAorCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDYpXG4i
ICsgCisJCSIJaW4uYWRkKG51bGwpOyAvLyBOT0ssIGNhbm5vdCBhc3N1bWUgbnVsbGFibGVcbiIg
KyAKKwkJIgkgICAgICAgXl5eXlxuIiArIAorCQkiTnVsbCB0eXBlIG1pc21hdGNoICh0eXBlIGFu
bm90YXRpb25zKTogXCdudWxsXCcgaXMgbm90IGNvbXBhdGlibGUgdG8gdGhlIGZyZWUgdHlwZSB2
YXJpYWJsZSAnPyBleHRlbmRzIE51bWJlcidcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJ
IjIuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDcpXG4iICsgCisJCSIJbmVlZE5OKGluLmdl
dCgwKSk7IC8vIE5PSywgY2Fubm90IGFzc3VtZSBub25udWxsXG4iICsgCisJCSIJICAgICAgIF5e
Xl5eXl5eXlxuIiArIAorCQkiTnVsbCB0eXBlIHNhZmV0eSAodHlwZSBhbm5vdGF0aW9ucyk6IFRo
ZSBleHByZXNzaW9uIG9mIHR5cGUgXCdjYXB0dXJlI29mID8gZXh0ZW5kcyBOdW1iZXJcJyBuZWVk
cyB1bmNoZWNrZWQgY29udmVyc2lvbiB0byBjb25mb3JtIHRvIFwnQE5vbk51bGwgTnVtYmVyXCdc
biIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjMuIEVSUk9SIGluIFguamF2YSAoYXQgbGlu
ZSA4KVxuIiArIAorCQkiCXJldHVybiBuZXcgQXJyYXlMaXN0PEBOdWxsYWJsZSBUPigpOyAvLyBO
T0ssIGNhbm5vdCBhc3N1bWUgbnVsbGFibGUgZm9yIFQgaW4gTGlzdDxUPlxuIiArIAorCQkiCSAg
ICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCSJOdWxsIHR5cGUgbWlz
bWF0Y2ggKHR5cGUgYW5ub3RhdGlvbnMpOiByZXF1aXJlZCBcJ0xpc3Q8VD5cJyBidXQgdGhpcyBl
eHByZXNzaW9uIGhhcyB0eXBlIFwnQXJyYXlMaXN0PEBOdWxsYWJsZSBUPlwnLCBjb3JyZXNwb25k
aW5nIHN1cGVydHlwZSBpcyBcJ0xpc3Q8QE51bGxhYmxlIFQ+XCdcbiIgKyAKKwkJIi0tLS0tLS0t
LS1cbiIpOwogfQogCiAvLyBhcHBseSBudWxsIGRlZmF1bHQgdG8gcGFyYW1ldGVyczoKZGlmZiAt
LWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L2NvbXBpbGVyL0lQcm9ibGVtLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvY29yZS9jb21waWxlci9JUHJvYmxlbS5qYXZhCmluZGV4IGI2NmQ0MjIu
LmYyMmQ0NjEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL2NvbXBpbGVyL0lQcm9ibGVtLmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2NvcmUvY29tcGlsZXIvSVByb2JsZW0u
amF2YQpAQCAtMTkwLDYgKzE5MCw4IEBACiAgKgkJCQkJCQkJCVVuc2FmZU51bGxuZXNzQ2FzdAog
ICoJCQkJCQkJCQlDb250cmFkaWN0b3J5TnVsbEFubm90YXRpb25zSW5mZXJyZWQKICAqCQkJCQkJ
CQkJTm9uTnVsbERlZmF1bHREZXRhaWxJc05vdEV2YWx1YXRlZAorICoJCQkJCQkJCQlOdWxsTm90
Q29tcGF0aWJsZVRvRnJlZVR5cGVWYXJpYWJsZQorICoJCQkJCQkJCQlOdWxsaXR5TWlzbWF0Y2hB
Z2FpbnN0RnJlZVR5cGVWYXJpYWJsZQogICogICAgICBKZXNwZXIgUyBNb2xsZXIgIC0gYWRkZWQg
dGhlIGZvbGxvd2luZyBjb25zdGFudHMKICAqCQkJCQkJCQkJVGFyZ2V0VHlwZU5vdEFGdW5jdGlv
bmFsSW50ZXJmYWNlCiAgKgkJCQkJCQkJCU91dGVyTG9jYWxNdXN0QmVFZmZlY3RpdmVseUZpbmFs
CkBAIC0xNzc4LDYgKzE3ODAsMTAgQEAKIAlpbnQgVW5zYWZlTnVsbG5lc3NDYXN0ID0gSW50ZXJu
YWwgKyA5Njc7CiAJLyoqIEBzaW5jZSAzLjEwICovCiAJaW50IE5vbk51bGxEZWZhdWx0RGV0YWls
SXNOb3RFdmFsdWF0ZWQgPSA5Njg7IC8vIG5vIGxvbmdlciByZXBvcnRlZAorCS8qKiBAc2luY2Ug
My4xMCAqLworCWludCBOdWxsTm90Q29tcGF0aWJsZVRvRnJlZVR5cGVWYXJpYWJsZSA9IDk2OTsK
KwkvKiogQHNpbmNlIDMuMTAgKi8KKwlpbnQgTnVsbGl0eU1pc21hdGNoQWdhaW5zdEZyZWVUeXBl
VmFyaWFibGUgPSA5NzA7CiAKIAkvLyBKYXZhIDggd29yawogCS8qKiBAc2luY2UgMy4xMCAqLwpk
aWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2FzdC9DYXN0RXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9D
YXN0RXhwcmVzc2lvbi5qYXZhCmluZGV4IGI2MDNiOWUuLjE3MWVmOGQgMTAwNjQ0Ci0tLSBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9hc3QvQ2FzdEV4cHJlc3Npb24uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Nhc3RFeHByZXNz
aW9uLmphdmEKQEAgLTIwLDYgKzIwLDcgQEAKICAqCQkJCQkJCQlCdWcgMzkyMDk5IC0gWzEuOF1b
Y29tcGlsZXJdW251bGxdIEFwcGx5IG51bGwgYW5ub3RhdGlvbiBvbiB0eXBlcyBmb3IgbnVsbCBh
bmFseXNpcwogICoJCQkJCQkJCUJ1ZyA0MDA4NzQgLSBbMS44XVtjb21waWxlcl0gSW5mZXJlbmNl
IGluZnJhc3RydWN0dXJlIHNob3VsZCBldm9sdmUgdG8gbWVldCBKTFM4IDE4LnggKFBhcnQgRyBv
ZiBKU1IzMzUgc3BlYykKICAqCQkJCQkJCQlCdWcgNDI3NDM4IC0gWzEuOF1bY29tcGlsZXJdIE5Q
RSBhdCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkNvbmRpdGlvbmFsRXhw
cmVzc2lvbi5nZW5lcmF0ZUNvZGUoQ29uZGl0aW9uYWxFeHByZXNzaW9uLmphdmE6MjgwKQorICoJ
CQkJCQkJCUJ1ZyA0MzAxNTAgLSBbMS44XVtudWxsXSBzdHJpY3RlciBjaGVja2luZyBhZ2FpbnN0
IHR5cGUgdmFyaWFibGVzCiAgKiAgICAgICAgQW5keSBDbGVtZW50IChHb1Bpdm90YWwsIEluYykg
YWNsZW1lbnRAZ29waXZvdGFsLmNvbSAtIENvbnRyaWJ1dGlvbnMgZm9yCiAgKiAgICAgICAgICAg
ICAgICAgICAgICAgICAgQnVnIDQxNTU0MSAtIFsxLjhdW2NvbXBpbGVyXSBUeXBlIGFubm90YXRp
b25zIGluIHRoZSBib2R5IG9mIHN0YXRpYyBpbml0aWFsaXplciBnZXQgZHJvcHBlZAogICoqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKiovCkBAIC01NDksNyArNTUwLDggQEAKIAlpZiAoY2FzdFR5cGUgIT0g
bnVsbCkgewogCQlpZiAoZXhwcmVzc2lvblR5cGUgIT0gbnVsbCkgewogCi0JCQlib29sZWFuIG51
bGxBbm5vdGF0aW9uTWlzbWF0Y2ggPSBOdWxsQW5ub3RhdGlvbk1hdGNoaW5nLmFuYWx5c2UoY2Fz
dFR5cGUsIGV4cHJlc3Npb25UeXBlLCAtMSkuaXNBbnlNaXNtYXRjaCgpOworCQkJYm9vbGVhbiBu
dWxsQW5ub3RhdGlvbk1pc21hdGNoID0gc2NvcGUuY29tcGlsZXJPcHRpb25zKCkuaXNBbm5vdGF0
aW9uQmFzZWROdWxsQW5hbHlzaXNFbmFibGVkCisJCQkJCSYmIE51bGxBbm5vdGF0aW9uTWF0Y2hp
bmcuYW5hbHlzZShjYXN0VHlwZSwgZXhwcmVzc2lvblR5cGUsIC0xKS5pc0FueU1pc21hdGNoKCk7
CiAKIAkJCWJvb2xlYW4gaXNMZWdhbCA9IGNoZWNrQ2FzdFR5cGVzQ29tcGF0aWJpbGl0eShzY29w
ZSwgY2FzdFR5cGUsIGV4cHJlc3Npb25UeXBlLCB0aGlzLmV4cHJlc3Npb24pOwogCQkJaWYgKGlz
TGVnYWwpIHsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTG9jYWxEZWNsYXJhdGlvbi5qYXZhIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FzdC9Mb2NhbERlY2xhcmF0aW9uLmphdmEKaW5kZXggM2YxZjU4NC4uYWEyMjViYyAx
MDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Mb2NhbERlY2xhcmF0aW9uLmphdmEKKysrIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FzdC9Mb2NhbERlY2xhcmF0aW9uLmphdmEKQEAgLTI0LDYgKzI0LDcgQEAKICAqCQkJCQkJCUJ1
ZyAzOTIyMzggLSBbMS44XVtjb21waWxlcl1bbnVsbF0gRGV0ZWN0IHNlbWFudGljYWxseSBpbnZh
bGlkIG51bGwgdHlwZSBhbm5vdGF0aW9ucwogICoJCQkJCQkJQnVnIDM5MjA5OSAtIFsxLjhdW2Nv
bXBpbGVyXVtudWxsXSBBcHBseSBudWxsIGFubm90YXRpb24gb24gdHlwZXMgZm9yIG51bGwgYW5h
bHlzaXMKICAqCQkJCQkJCUJ1ZyA0Mjc0MzggLSBbMS44XVtjb21waWxlcl0gTlBFIGF0IG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuQ29uZGl0aW9uYWxFeHByZXNzaW9uLmdl
bmVyYXRlQ29kZShDb25kaXRpb25hbEV4cHJlc3Npb24uamF2YToyODApCisgKgkJCQkJCQlCdWcg
NDMwMTUwIC0gWzEuOF1bbnVsbF0gc3RyaWN0ZXIgY2hlY2tpbmcgYWdhaW5zdCB0eXBlIHZhcmlh
YmxlcwogICogICAgIEplc3BlciBTIE1vbGxlciAtIENvbnRyaWJ1dGlvbnMgZm9yCiAgKgkJCQkJ
CQlCdWcgMzc4Njc0IC0gIlRoZSBtZXRob2QgY2FuIGJlIGRlY2xhcmVkIGFzIHN0YXRpYyIgaXMg
d3JvbmcKICAqICAgICAgICBBbmR5IENsZW1lbnQgKEdvUGl2b3RhbCwgSW5jKSBhY2xlbWVudEBn
b3Bpdm90YWwuY29tIC0gQ29udHJpYnV0aW9ucyBmb3IKQEAgLTk4LDcgKzk5LDkgQEAKIAkJdGhp
cy5iaXRzICY9IH5GaXJzdEFzc2lnbm1lbnRUb0xvY2FsOyAgLy8gaW50IGkgPSAoaSA9IDApOwog
CX0KIAlmbG93SW5mby5tYXJrQXNEZWZpbml0ZWx5QXNzaWduZWQodGhpcy5iaW5kaW5nKTsKLQlu
dWxsU3RhdHVzID0gTnVsbEFubm90YXRpb25NYXRjaGluZy5jaGVja0Fzc2lnbm1lbnQoY3VycmVu
dFNjb3BlLCBmbG93Q29udGV4dCwgdGhpcy5iaW5kaW5nLCBudWxsU3RhdHVzLCB0aGlzLmluaXRp
YWxpemF0aW9uLCB0aGlzLmluaXRpYWxpemF0aW9uLnJlc29sdmVkVHlwZSk7CisJaWYgKGN1cnJl
bnRTY29wZS5jb21waWxlck9wdGlvbnMoKS5pc0Fubm90YXRpb25CYXNlZE51bGxBbmFseXNpc0Vu
YWJsZWQpIHsKKwkJbnVsbFN0YXR1cyA9IE51bGxBbm5vdGF0aW9uTWF0Y2hpbmcuY2hlY2tBc3Np
Z25tZW50KGN1cnJlbnRTY29wZSwgZmxvd0NvbnRleHQsIHRoaXMuYmluZGluZywgbnVsbFN0YXR1
cywgdGhpcy5pbml0aWFsaXphdGlvbiwgdGhpcy5pbml0aWFsaXphdGlvbi5yZXNvbHZlZFR5cGUp
OworCX0KIAlpZiAoKHRoaXMuYmluZGluZy50eXBlLnRhZ0JpdHMgJiBUYWdCaXRzLklzQmFzZVR5
cGUpID09IDApIHsKIAkJZmxvd0luZm8ubWFya051bGxTdGF0dXModGhpcy5iaW5kaW5nLCBudWxs
U3RhdHVzKTsKIAkJLy8gbm8gbmVlZCB0byBpbmZvcm0gZW5jbG9zaW5nIHRyeSBibG9jayBzaW5j
ZSBpdHMgbG9jYWxzIHdvbid0IGdldApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9OdWxsQW5ub3Rh
dGlvbk1hdGNoaW5nLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L051bGxBbm5vdGF0aW9uTWF0Y2hpbmcuamF2
YQppbmRleCA3M2U2MGE0Li43NzY0OWI0IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L051bGxBbm5v
dGF0aW9uTWF0Y2hpbmcuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L051bGxBbm5vdGF0aW9uTWF0Y2hp
bmcuamF2YQpAQCAtMTIxLDYgKzEyMSw4IEBACiAJCWludCBzZXZlcml0eSA9IDA7CiAJCVR5cGVC
aW5kaW5nIHN1cGVyVHlwZUhpbnQgPSBudWxsOwogCQlOdWxsQW5ub3RhdGlvbk1hdGNoaW5nIG9r
U3RhdHVzID0gTnVsbEFubm90YXRpb25NYXRjaGluZy5OVUxMX0FOTk9UQVRJT05TX09LOworCQlp
ZiAoYXJlU2FtZVR5cGVzKHJlcXVpcmVkVHlwZSwgcHJvdmlkZWRUeXBlKSkgLy8gZm9yIHR5cGUg
dmFyaWFibGUgaWRlbnRpdHkgKGFuZCBhcyBzaG9ydGN1dCBmb3Igb3RoZXJzKQorCQkJcmV0dXJu
IG9rU3RhdHVzOwogCQlpZiAocmVxdWlyZWRUeXBlIGluc3RhbmNlb2YgQXJyYXlCaW5kaW5nKSB7
CiAJCQlsb25nW10gcmVxdWlyZWREaW1zVGFnQml0cyA9ICgoQXJyYXlCaW5kaW5nKXJlcXVpcmVk
VHlwZSkubnVsbFRhZ0JpdHNQZXJEaW1lbnNpb247CiAJCQlpZiAocmVxdWlyZWREaW1zVGFnQml0
cyAhPSBudWxsKSB7CkBAIC0xNDUsNyArMTQ3LDcgQEAKIAkJCQkJCXJldHVybiBOdWxsQW5ub3Rh
dGlvbk1hdGNoaW5nLk5VTExfQU5OT1RBVElPTlNfTUlTTUFUQ0g7CiAJCQkJfQogCQkJfQotCQl9
IGVsc2UgaWYgKHJlcXVpcmVkVHlwZS5oYXNOdWxsVHlwZUFubm90YXRpb25zKCkgfHwgcHJvdmlk
ZWRUeXBlLmhhc051bGxUeXBlQW5ub3RhdGlvbnMoKSkgeworCQl9IGVsc2UgaWYgKHJlcXVpcmVk
VHlwZS5oYXNOdWxsVHlwZUFubm90YXRpb25zKCkgfHwgcHJvdmlkZWRUeXBlLmhhc051bGxUeXBl
QW5ub3RhdGlvbnMoKSB8fCByZXF1aXJlZFR5cGUuaXNUeXBlVmFyaWFibGUoKSkgewogCQkJbG9u
ZyByZXF1aXJlZEJpdHMgPSByZXF1aXJlZE51bGxUYWdCaXRzKHJlcXVpcmVkVHlwZSk7CiAJCQlp
ZiAocmVxdWlyZWRCaXRzICE9IFRhZ0JpdHMuQW5ub3RhdGlvbk51bGxhYmxlIC8vIG51bGxhYmxl
IGxocyBhY2NlcHRzIGV2ZXJ5dGhpbmcsIC4uLgogCQkJCQl8fCBudWxsU3RhdHVzID09IC0xKSAv
LyBvbmx5IGF0IGRldGFpbC9yZWN1cnNpb24gZXZlbiBudWxsYWJsZSBtdXN0IGJlIG1hdGNoZWQg
ZXhhY3RseQpAQCAtMTg0LDYgKzE4NiwxNyBAQAogCQlyZXR1cm4gbmV3IE51bGxBbm5vdGF0aW9u
TWF0Y2hpbmcoc2V2ZXJpdHksIG51bGxTdGF0dXMsIHN1cGVyVHlwZUhpbnQpOwogCX0KIAorCS8q
KiBBcmUgYm90aCB0eXBlcyBpZGVudGljYWwgd3J0IHRoZSB1bmFubm90YXRlZCB0eXBlIGFuZCBh
bnkgbnVsbCB0eXBlIGFubm90YXRpb25zPyBPbmx5IHVuc3RydWN0dXJlZCB0eXBlcyBhcmUgY29u
c2lkZXJlZC4gKi8KKwlwcm90ZWN0ZWQgc3RhdGljIGJvb2xlYW4gYXJlU2FtZVR5cGVzKFR5cGVC
aW5kaW5nIHJlcXVpcmVkVHlwZSwgVHlwZUJpbmRpbmcgcHJvdmlkZWRUeXBlKSB7CisJCWlmIChy
ZXF1aXJlZFR5cGUgPT0gcHJvdmlkZWRUeXBlKSAgLy8kSURFTlRJVFktQ09NUEFSSVNPTiQgLy8g
c2hvcnQgY3V0IGZvciByZWFsbHktcmVhbGx5LXNhbWUgdHlwZXMKKwkJCXJldHVybiB0cnVlOwor
CQlpZiAocmVxdWlyZWRUeXBlLmlzUGFyYW1ldGVyaXplZFR5cGUoKSB8fCByZXF1aXJlZFR5cGUu
aXNBcnJheVR5cGUoKSkKKwkJCXJldHVybiBmYWxzZTsgLy8gbm90IGFuYWx5c2luZyBkZXRhaWxz
IGhlcmUKKwkJaWYgKFR5cGVCaW5kaW5nLm5vdEVxdWFscyhyZXF1aXJlZFR5cGUsIHByb3ZpZGVk
VHlwZSkpCisJCQlyZXR1cm4gZmFsc2U7CisJCXJldHVybiAocmVxdWlyZWRUeXBlLnRhZ0JpdHMg
JiBUYWdCaXRzLkFubm90YXRpb25OdWxsTUFTSykgPT0gKHByb3ZpZGVkVHlwZS50YWdCaXRzICYg
VGFnQml0cy5Bbm5vdGF0aW9uTnVsbE1BU0spOworCX0KKwogCS8vIGludGVycHJldGluZyAndHlw
ZScgYXMgYSByZXF1aXJlZCB0eXBlLCBjb21wdXRlIHRoZSByZXF1aXJlZCBudWxsIGJpdHMKIAkv
LyB3ZSBpbnNwZWN0IHRoZSBtYWluIHR5cGUgcGx1cyBib3VuZHMgb2YgdHlwZSB2YXJpYWJsZXMg
YW5kIHdpbGRjYXJkcwogCXN0YXRpYyBsb25nIHJlcXVpcmVkTnVsbFRhZ0JpdHMoVHlwZUJpbmRp
bmcgdHlwZSkgewpAQCAtMjEzLDIyICsyMjYsMTcgQEAKIAkJfSAKIAkJCiAJCWlmICh0eXBlLmlz
VHlwZVZhcmlhYmxlKCkpIHsKLQkJCS8vIGFzc3VtZSB3ZSBtdXN0IHJlcXVpcmUgQE5vbk51bGws
IHVubGVzczogKDEpIGxvd2VyIEBOdWxsYWJsZSBib3VuZCwgb3IgKDIpIG5vIG51bGxuZXNzIHNw
ZWNpZmllZAotCQkJVHlwZVZhcmlhYmxlQmluZGluZyB0eXBlVmFyaWFibGUgPSAoVHlwZVZhcmlh
YmxlQmluZGluZyl0eXBlOwotCQkJYm9vbGVhbiBoYXZlTnVsbEJpdHMgPSBmYWxzZTsKKwkJCS8v
IGFzc3VtZSB3ZSBtdXN0IHJlcXVpcmUgQE5vbk51bGwsIHVubGVzcyBsb3dlciBATnVsbGFibGUg
Ym91bmQKKwkJCS8vIChhbm5vdGF0aW9uIGRpcmVjdGx5IG9uIHRoZSBUViBoYXMgYWxyZWFkeSBi
ZWVuIGNoZWNrZWQgYWJvdmUpCiAJCQlpZiAodHlwZS5pc0NhcHR1cmUoKSkgewogCQkJCVR5cGVC
aW5kaW5nIGxvd2VyQm91bmQgPSAoKENhcHR1cmVCaW5kaW5nKSB0eXBlKS5sb3dlckJvdW5kOwog
CQkJCWlmIChsb3dlckJvdW5kICE9IG51bGwpIHsKIAkJCQkJdGFnQml0cyA9IGxvd2VyQm91bmQu
dGFnQml0cyAmIFRhZ0JpdHMuQW5ub3RhdGlvbk51bGxNQVNLOwogCQkJCQlpZiAodGFnQml0cyA9
PSBUYWdCaXRzLkFubm90YXRpb25OdWxsYWJsZSkKLQkJCQkJCXJldHVybiBUYWdCaXRzLkFubm90
YXRpb25OdWxsYWJsZTsgLy8gKDEpIHR5cGUgY2Fubm90IHJlcXVpcmUgQE5vbk51bGwKLQkJCQkJ
aGF2ZU51bGxCaXRzID0gdGFnQml0cyAhPSAwOworCQkJCQkJcmV0dXJuIFRhZ0JpdHMuQW5ub3Rh
dGlvbk51bGxhYmxlOyAvLyB0eXBlIGNhbm5vdCByZXF1aXJlIEBOb25OdWxsCiAJCQkJfQogCQkJ
fQotCQkJaWYgKHR5cGVWYXJpYWJsZS5maXJzdEJvdW5kICE9IG51bGwpCi0JCQkJaGF2ZU51bGxC
aXRzIHw9ICh0eXBlVmFyaWFibGUuZmlyc3RCb3VuZC50YWdCaXRzICYgVGFnQml0cy5Bbm5vdGF0
aW9uTnVsbE1BU0spICE9IDA7Ci0JCQlpZiAoaGF2ZU51bGxCaXRzKQotCQkJCXJldHVybiBUYWdC
aXRzLkFubm90YXRpb25Ob25OdWxsOyAvLyBjb3VsZCByZXF1aXJlIEBOb25OdWxsICh1bmxlc3Mg
KDIpIHVuc3BlY2lmaWVkIG51bGxuZXNzKQorCQkJcmV0dXJuIFRhZ0JpdHMuQW5ub3RhdGlvbk5v
bk51bGw7IC8vIGluc3RhbnRpYXRpb24gY291bGQgcmVxdWlyZSBATm9uTnVsbAogCQl9CiAKIAkJ
cmV0dXJuIDA7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1JldHVyblN0YXRlbWVudC5qYXZhIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FzdC9SZXR1cm5TdGF0ZW1lbnQuamF2YQppbmRleCBmMTkzZTNkLi4wMzhlODYwIDEw
MDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L1JldHVyblN0YXRlbWVudC5qYXZhCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvUmV0dXJuU3RhdGVtZW50LmphdmEKQEAgLTI5LDYgKzI5LDcgQEAKICAqCQkJCQkJCQlCdWcg
NDE2MzA3IC0gWzEuOF1bY29tcGlsZXJdW251bGxdIHN1YmNsYXNzIHdpdGggdHlwZSBwYXJhbWV0
ZXIgc3Vic3RpdHV0aW9uIGNvbmZ1c2VzIG51bGwgY2hlY2tpbmcKICAqCQkJCQkJCQlCdWcgNDE3
NzU4IC0gWzEuOF1bbnVsbF0gTnVsbCBzYWZldHkgY29tcHJvbWlzZSBkdXJpbmcgYXJyYXkgY3Jl
YXRpb24uCiAgKgkJCQkJCQkJQnVnIDQyNzQzOCAtIFsxLjhdW2NvbXBpbGVyXSBOUEUgYXQgb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5Db25kaXRpb25hbEV4cHJlc3Npb24u
Z2VuZXJhdGVDb2RlKENvbmRpdGlvbmFsRXhwcmVzc2lvbi5qYXZhOjI4MCkKKyAqCQkJCQkJCQlC
dWcgNDMwMTUwIC0gWzEuOF1bbnVsbF0gc3RyaWN0ZXIgY2hlY2tpbmcgYWdhaW5zdCB0eXBlIHZh
cmlhYmxlcwogICogICAgIEplc3BlciBTIE1vbGxlciAtIENvbnRyaWJ1dGlvbnMgZm9yCiAgKgkJ
CQkJCQkJYnVnIDM4MjcwMSAtIFsxLjhdW2NvbXBpbGVyXSBJbXBsZW1lbnQgc2VtYW50aWMgYW5h
bHlzaXMgb2YgTGFtYmRhIGV4cHJlc3Npb25zICYgUmVmZXJlbmNlIGV4cHJlc3Npb24KICAqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqLwpAQCAtODEsNyArODIsNyBAQAogCWlmICh0aGlzLmV4cHJlc3Np
b24gIT0gbnVsbCkgewogCQlmbG93SW5mbyA9IHRoaXMuZXhwcmVzc2lvbi5hbmFseXNlQ29kZShj
dXJyZW50U2NvcGUsIGZsb3dDb250ZXh0LCBmbG93SW5mbyk7CiAJCXRoaXMuZXhwcmVzc2lvbi5j
aGVja05QRWJ5VW5ib3hpbmcoY3VycmVudFNjb3BlLCBmbG93Q29udGV4dCwgZmxvd0luZm8pOwot
CQlpZiAoZmxvd0luZm8ucmVhY2hNb2RlKCkgPT0gRmxvd0luZm8uUkVBQ0hBQkxFKQorCQlpZiAo
Zmxvd0luZm8ucmVhY2hNb2RlKCkgPT0gRmxvd0luZm8uUkVBQ0hBQkxFICYmIGN1cnJlbnRTY29w
ZS5jb21waWxlck9wdGlvbnMoKS5pc0Fubm90YXRpb25CYXNlZE51bGxBbmFseXNpc0VuYWJsZWQp
CiAJCQljaGVja0FnYWluc3ROdWxsQW5ub3RhdGlvbihjdXJyZW50U2NvcGUsIGZsb3dDb250ZXh0
LCBmbG93SW5mbyk7CiAJCWlmIChjdXJyZW50U2NvcGUuY29tcGlsZXJPcHRpb25zKCkuYW5hbHlz
ZVJlc291cmNlTGVha3MpIHsKIAkJCUZha2VkVHJhY2tpbmdWYXJpYWJsZSB0cmFja2luZ1Zhcmlh
YmxlID0gRmFrZWRUcmFja2luZ1ZhcmlhYmxlLmdldENsb3NlVHJhY2tpbmdWYXJpYWJsZSh0aGlz
LmV4cHJlc3Npb24sIGZsb3dJbmZvLCBmbG93Q29udGV4dCk7CmRpZmYgLS1naXQgYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
cHJvYmxlbS9Qcm9ibGVtUmVwb3J0ZXIuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL1Byb2JsZW1SZXBv
cnRlci5qYXZhCmluZGV4IDE5NTNkYjUuLjYzNzBmZWIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9i
bGVtL1Byb2JsZW1SZXBvcnRlci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL1Byb2JsZW1SZXBv
cnRlci5qYXZhCkBAIC00OCw2ICs0OCw3IEBACiAgKgkJCQkJCQkJQnVnIDQxNjE5MCAtIFsxLjhd
W251bGxdIGRldGVjdCBpbmNvbXBhdGlibGUgb3ZlcnJpZGVzIGR1ZSB0byBudWxsIHR5cGUgYW5u
b3RhdGlvbnMKICAqCQkJCQkJCQlCdWcgMzkyMjQ1IC0gWzEuOF1bY29tcGlsZXJdW251bGxdIERl
ZmluZSB3aGV0aGVyIC8gaG93IEBOb25OdWxsQnlEZWZhdWx0IGFwcGxpZXMgdG8gVFlQRV9VU0Ug
bG9jYXRpb25zCiAgKgkJCQkJCQkJQnVnIDM5MDg4OSAtIFsxLjhdW2NvbXBpbGVyXSBFdmFsdWF0
ZSBvcHRpb25zIHRvIHN1cHBvcnQgMS43LSBwcm9qZWN0cyBhZ2FpbnN0IDEuOCBKUkUuCisgKgkJ
CQkJCQkJQnVnIDQzMDE1MCAtIFsxLjhdW251bGxdIHN0cmljdGVyIGNoZWNraW5nIGFnYWluc3Qg
dHlwZSB2YXJpYWJsZXMKICAqICAgICAgSmVzcGVyIFMgTW9sbGVyIDxqZXNwZXJAc2Vsc2thYmV0
Lm9yZz4gLSAgQ29udHJpYnV0aW9ucyBmb3IKICAqCQkJCQkJCQlidWcgMzgyNzAxIC0gWzEuOF1b
Y29tcGlsZXJdIEltcGxlbWVudCBzZW1hbnRpYyBhbmFseXNpcyBvZiBMYW1iZGEgZXhwcmVzc2lv
bnMgJiBSZWZlcmVuY2UgZXhwcmVzc2lvbgogICoJCQkJCQkJCWJ1ZyAzODI3MjEgLSBbMS44XVtj
b21waWxlcl0gRWZmZWN0aXZlbHkgZmluYWwgdmFyaWFibGVzIG5lZWRzIHNwZWNpYWwgdHJlYXRt
ZW50CkBAIC0zODksNiArMzkwLDggQEAKIAkJY2FzZSBJUHJvYmxlbS5DYW5ub3RJbXBsZW1lbnRJ
bmNvbXBhdGlibGVOdWxsbmVzczoKIAkJY2FzZSBJUHJvYmxlbS5Db25mbGljdGluZ051bGxBbm5v
dGF0aW9uczoKIAkJY2FzZSBJUHJvYmxlbS5Db25mbGljdGluZ0luaGVyaXRlZE51bGxBbm5vdGF0
aW9uczoKKwkJY2FzZSBJUHJvYmxlbS5OdWxsTm90Q29tcGF0aWJsZVRvRnJlZVR5cGVWYXJpYWJs
ZToKKwkJY2FzZSBJUHJvYmxlbS5OdWxsaXR5TWlzbWF0Y2hBZ2FpbnN0RnJlZVR5cGVWYXJpYWJs
ZToKIAkJY2FzZSBJUHJvYmxlbS5OdWxsaXR5TWlzbWF0Y2hpbmdUeXBlQW5ub3RhdGlvbjoKIAkJ
Y2FzZSBJUHJvYmxlbS5OdWxsaXR5TWlzbWF0Y2hpbmdUeXBlQW5ub3RhdGlvblN1cGVySGludDoK
IAkJY2FzZSBJUHJvYmxlbS5OdWxsaXR5TWlzbWF0Y2hUeXBlQXJndW1lbnQ6CkBAIC05MTUwLDIw
ICs5MTUzLDI3IEBACiAJCW51bGxpdHlNaXNtYXRjaGluZ1R5cGVBbm5vdGF0aW9uKGV4cHJlc3Np
b24sIHByb3ZpZGVkVHlwZSwgcmVxdWlyZWRUeXBlLCBOdWxsQW5ub3RhdGlvbk1hdGNoaW5nLk5V
TExfQU5OT1RBVElPTlNfVU5DSEVDS0VEKTsKIH0KIHB1YmxpYyB2b2lkIG51bGxpdHlNaXNtYXRj
aElzTnVsbChFeHByZXNzaW9uIGV4cHJlc3Npb24sIFR5cGVCaW5kaW5nIHJlcXVpcmVkVHlwZSkg
eworCWludCBwcm9ibGVtSWQgPSBJUHJvYmxlbS5SZXF1aXJlZE5vbk51bGxCdXRQcm92aWRlZE51
bGw7CisJaWYgKHJlcXVpcmVkVHlwZS5pc1R5cGVWYXJpYWJsZSgpICYmICFyZXF1aXJlZFR5cGUu
aGFzTnVsbFR5cGVBbm5vdGF0aW9ucygpKQorCQlwcm9ibGVtSWQgPSBJUHJvYmxlbS5OdWxsTm90
Q29tcGF0aWJsZVRvRnJlZVR5cGVWYXJpYWJsZTsKIAlpZiAocmVxdWlyZWRUeXBlIGluc3RhbmNl
b2YgQ2FwdHVyZUJpbmRpbmcpIHsKIAkJQ2FwdHVyZUJpbmRpbmcgY2FwdHVyZSA9IChDYXB0dXJl
QmluZGluZykgcmVxdWlyZWRUeXBlOwogCQlpZiAoY2FwdHVyZS53aWxkY2FyZCAhPSBudWxsKQog
CQkJcmVxdWlyZWRUeXBlID0gY2FwdHVyZS53aWxkY2FyZDsKIAl9Ci0JaW50IHByb2JsZW1JZCA9
IElQcm9ibGVtLlJlcXVpcmVkTm9uTnVsbEJ1dFByb3ZpZGVkTnVsbDsKIAlTdHJpbmdbXSBhcmd1
bWVudHM7CiAJU3RyaW5nW10gYXJndW1lbnRzU2hvcnQ7CiAJaWYgKHRoaXMub3B0aW9ucy5zb3Vy
Y2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzgpIHsKIAkJYXJndW1lbnRzICAgICAg
PSBuZXcgU3RyaW5nW10geyBhbm5vdGF0ZWRUeXBlTmFtZShyZXF1aXJlZFR5cGUsIHRoaXMub3B0
aW9ucy5ub25OdWxsQW5ub3RhdGlvbk5hbWUpIH07CiAJCWFyZ3VtZW50c1Nob3J0ID0gbmV3IFN0
cmluZ1tdIHsgc2hvcnRBbm5vdGF0ZWRUeXBlTmFtZShyZXF1aXJlZFR5cGUsIHRoaXMub3B0aW9u
cy5ub25OdWxsQW5ub3RhdGlvbk5hbWUpIH07CiAJfSBlbHNlIHsKLQkJYXJndW1lbnRzICAgICAg
PSBuZXcgU3RyaW5nW10geyBuZXcgU3RyaW5nKHJlcXVpcmVkVHlwZS5udWxsQW5ub3RhdGVkUmVh
ZGFibGVOYW1lKHRoaXMub3B0aW9ucywgZmFsc2UpKSB9OwotCQlhcmd1bWVudHNTaG9ydCA9IG5l
dyBTdHJpbmdbXSB7IG5ldyBTdHJpbmcocmVxdWlyZWRUeXBlLm51bGxBbm5vdGF0ZWRSZWFkYWJs
ZU5hbWUodGhpcy5vcHRpb25zLCB0cnVlKSkgfTsKKwkJaWYgKHByb2JsZW1JZCA9PSBJUHJvYmxl
bS5OdWxsTm90Q29tcGF0aWJsZVRvRnJlZVR5cGVWYXJpYWJsZSkgeworCQkJYXJndW1lbnRzICAg
ICAgPSBuZXcgU3RyaW5nW10geyBuZXcgU3RyaW5nKHJlcXVpcmVkVHlwZS5zb3VyY2VOYW1lKCkp
IH07IC8vIGRvbid0IHNob3cgYW55IGJvdW5kcworCQkJYXJndW1lbnRzU2hvcnQgPSBuZXcgU3Ry
aW5nW10geyBuZXcgU3RyaW5nKHJlcXVpcmVkVHlwZS5zb3VyY2VOYW1lKCkpIH07CisJCX0gZWxz
ZSB7CisJCQlhcmd1bWVudHMgICAgICA9IG5ldyBTdHJpbmdbXSB7IG5ldyBTdHJpbmcocmVxdWly
ZWRUeXBlLm51bGxBbm5vdGF0ZWRSZWFkYWJsZU5hbWUodGhpcy5vcHRpb25zLCBmYWxzZSkpIH07
CisJCQlhcmd1bWVudHNTaG9ydCA9IG5ldyBTdHJpbmdbXSB7IG5ldyBTdHJpbmcocmVxdWlyZWRU
eXBlLm51bGxBbm5vdGF0ZWRSZWFkYWJsZU5hbWUodGhpcy5vcHRpb25zLCB0cnVlKSkgIH07CQkJ
CisJCX0KIAl9CiAJdGhpcy5oYW5kbGUocHJvYmxlbUlkLCBhcmd1bWVudHMsIGFyZ3VtZW50c1No
b3J0LCBleHByZXNzaW9uLnNvdXJjZVN0YXJ0LCBleHByZXNzaW9uLnNvdXJjZUVuZCk7CiB9CkBA
IC05Njk1LDIzICs5NzA1LDQ3IEBACiAJU3RyaW5nW10gc2hvcnRBcmd1bWVudHM7CiAJCQogCWlu
dCBwcm9ibGVtSWQgPSAwOworCVN0cmluZyBzdXBlckhpbnQgPSBudWxsOworCVN0cmluZyBzdXBl
ckhpbnRTaG9ydCA9IG51bGw7CiAJaWYgKHN0YXR1cy5zdXBlclR5cGVIaW50ICE9IG51bGwpIHsK
IAkJcHJvYmxlbUlkID0gKHN0YXR1cy5pc1VuY2hlY2tlZCgpCiAJCQk/IElQcm9ibGVtLk51bGxp
dHlVbmNoZWNrZWRUeXBlQW5ub3RhdGlvbkRldGFpbFN1cGVySGludAogCQkJOiBJUHJvYmxlbS5O
dWxsaXR5TWlzbWF0Y2hpbmdUeXBlQW5ub3RhdGlvblN1cGVySGludCk7Ci0JCWFyZ3VtZW50cyAg
ICAgID0gbmV3IFN0cmluZ1tdIHsgbnVsbCwgbnVsbCwgc3RhdHVzLnN1cGVyVHlwZUhpbnROYW1l
KHRoaXMub3B0aW9ucywgZmFsc2UpIH07Ci0JCXNob3J0QXJndW1lbnRzID0gbmV3IFN0cmluZ1td
IHsgbnVsbCwgbnVsbCwgc3RhdHVzLnN1cGVyVHlwZUhpbnROYW1lKHRoaXMub3B0aW9ucywgdHJ1
ZSkgfTsKKwkJc3VwZXJIaW50ID0gc3RhdHVzLnN1cGVyVHlwZUhpbnROYW1lKHRoaXMub3B0aW9u
cywgZmFsc2UpOworCQlzdXBlckhpbnRTaG9ydCA9IHN0YXR1cy5zdXBlclR5cGVIaW50TmFtZSh0
aGlzLm9wdGlvbnMsIHRydWUpOwogCX0gZWxzZSB7CiAJCXByb2JsZW1JZCA9IChzdGF0dXMuaXNV
bmNoZWNrZWQoKQogCQkJPyBJUHJvYmxlbS5OdWxsaXR5VW5jaGVja2VkVHlwZUFubm90YXRpb25E
ZXRhaWwKLQkJCTogSVByb2JsZW0uTnVsbGl0eU1pc21hdGNoaW5nVHlwZUFubm90YXRpb24pOwot
CQlhcmd1bWVudHMgICAgICA9IG5ldyBTdHJpbmdbMl07Ci0JCXNob3J0QXJndW1lbnRzID0gbmV3
IFN0cmluZ1syXTsKKwkJCTogKHJlcXVpcmVkVHlwZS5pc1R5cGVWYXJpYWJsZSgpICYmICFyZXF1
aXJlZFR5cGUuaGFzTnVsbFR5cGVBbm5vdGF0aW9ucygpKQorCQkJCT8gSVByb2JsZW0uTnVsbGl0
eU1pc21hdGNoQWdhaW5zdEZyZWVUeXBlVmFyaWFibGUKKwkJCQk6IElQcm9ibGVtLk51bGxpdHlN
aXNtYXRjaGluZ1R5cGVBbm5vdGF0aW9uKTsKKwkJaWYgKHByb2JsZW1JZCA9PSBJUHJvYmxlbS5O
dWxsaXR5TWlzbWF0Y2hBZ2FpbnN0RnJlZVR5cGVWYXJpYWJsZSkgeworCQkJYXJndW1lbnRzICAg
ICAgPSBuZXcgU3RyaW5nW10geyBudWxsLCBudWxsLCBuZXcgU3RyaW5nKHJlcXVpcmVkVHlwZS5z
b3VyY2VOYW1lKCkpIH07IC8vIGRvbid0IHNob3cgYm91bmRzIGhlcmUKKwkJCXNob3J0QXJndW1l
bnRzID0gbmV3IFN0cmluZ1tdIHsgbnVsbCwgbnVsbCwgbmV3IFN0cmluZyhyZXF1aXJlZFR5cGUu
c291cmNlTmFtZSgpKSB9OworCQl9IGVsc2UgeworCQkJYXJndW1lbnRzICAgICAgPSBuZXcgU3Ry
aW5nWzJdOworCQkJc2hvcnRBcmd1bWVudHMgPSBuZXcgU3RyaW5nWzJdOworCQl9CiAJfQotCWFy
Z3VtZW50c1swXSA9IFN0cmluZy52YWx1ZU9mKHJlcXVpcmVkVHlwZS5udWxsQW5ub3RhdGVkUmVh
ZGFibGVOYW1lKHRoaXMub3B0aW9ucywgZmFsc2UpKTsKLQlhcmd1bWVudHNbMV0gPSBTdHJpbmcu
dmFsdWVPZihwcm92aWRlZFR5cGUubnVsbEFubm90YXRlZFJlYWRhYmxlTmFtZSh0aGlzLm9wdGlv
bnMsIGZhbHNlKSk7Ci0Jc2hvcnRBcmd1bWVudHNbMF0gPSBTdHJpbmcudmFsdWVPZihyZXF1aXJl
ZFR5cGUubnVsbEFubm90YXRlZFJlYWRhYmxlTmFtZSh0aGlzLm9wdGlvbnMsIHRydWUpKTsKLQlz
aG9ydEFyZ3VtZW50c1sxXSA9IFN0cmluZy52YWx1ZU9mKHByb3ZpZGVkVHlwZS5udWxsQW5ub3Rh
dGVkUmVhZGFibGVOYW1lKHRoaXMub3B0aW9ucywgdHJ1ZSkpOworCVN0cmluZyByZXF1aXJlZE5h
bWU7CisJU3RyaW5nIHJlcXVpcmVkTmFtZVNob3J0OworCWlmIChwcm9ibGVtSWQgPT0gSVByb2Js
ZW0uTnVsbGl0eU1pc21hdGNoQWdhaW5zdEZyZWVUeXBlVmFyaWFibGUpIHsKKwkJcmVxdWlyZWRO
YW1lCQk9IG5ldyBTdHJpbmcocmVxdWlyZWRUeXBlLnNvdXJjZU5hbWUoKSk7IC8vIGRvbid0IHNo
b3cgYm91bmRzIGhlcmUKKwkJcmVxdWlyZWROYW1lU2hvcnQgCT0gbmV3IFN0cmluZyhyZXF1aXJl
ZFR5cGUuc291cmNlTmFtZSgpKTsgLy8gZG9uJ3Qgc2hvdyBib3VuZHMgaGVyZQorCX0gZWxzZSB7
CisJCXJlcXVpcmVkTmFtZSAJCT0gbmV3IFN0cmluZyhyZXF1aXJlZFR5cGUubnVsbEFubm90YXRl
ZFJlYWRhYmxlTmFtZSh0aGlzLm9wdGlvbnMsIGZhbHNlKSk7CisJCXJlcXVpcmVkTmFtZVNob3J0
IAk9IG5ldyBTdHJpbmcocmVxdWlyZWRUeXBlLm51bGxBbm5vdGF0ZWRSZWFkYWJsZU5hbWUodGhp
cy5vcHRpb25zLCB0cnVlKSk7CisJfQorCVN0cmluZyBwcm92aWRlZE5hbWUJCSA9IFN0cmluZy52
YWx1ZU9mKHByb3ZpZGVkVHlwZS5udWxsQW5ub3RhdGVkUmVhZGFibGVOYW1lKHRoaXMub3B0aW9u
cywgZmFsc2UpKTsKKwlTdHJpbmcgcHJvdmlkZWROYW1lU2hvcnQgPSBTdHJpbmcudmFsdWVPZihw
cm92aWRlZFR5cGUubnVsbEFubm90YXRlZFJlYWRhYmxlTmFtZSh0aGlzLm9wdGlvbnMsIHRydWUp
KTsKKwkvLyBhc3NlbWJsZSBhcmd1bWVudHM6CisJaWYgKHN1cGVySGludCAhPSBudWxsKSB7CisJ
CWFyZ3VtZW50cyAJCT0gbmV3IFN0cmluZ1tdIHsgcmVxdWlyZWROYW1lLCBwcm92aWRlZE5hbWUs
IHN1cGVySGludCB9OworCQlzaG9ydEFyZ3VtZW50cyAJPSBuZXcgU3RyaW5nW10geyByZXF1aXJl
ZE5hbWVTaG9ydCwgcHJvdmlkZWROYW1lU2hvcnQsIHN1cGVySGludFNob3J0IH07CisJfSBlbHNl
IHsKKwkJYXJndW1lbnRzIAkJPSBuZXcgU3RyaW5nW10geyByZXF1aXJlZE5hbWUsIHByb3ZpZGVk
TmFtZSB9OworCQlzaG9ydEFyZ3VtZW50cyAJPSBuZXcgU3RyaW5nW10geyByZXF1aXJlZE5hbWVT
aG9ydCwgcHJvdmlkZWROYW1lU2hvcnQgfTsKKwl9CiAJdGhpcy5oYW5kbGUocHJvYmxlbUlkLCBh
cmd1bWVudHMsIHNob3J0QXJndW1lbnRzLCBleHByZXNzaW9uLnNvdXJjZVN0YXJ0LCBleHByZXNz
aW9uLnNvdXJjZUVuZCk7CiB9CiAKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL21lc3NhZ2Vz
LnByb3BlcnRpZXMgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9tZXNzYWdlcy5wcm9wZXJ0aWVzCmluZGV4IGVi
NzNkNTUuLmUxYzAwYzIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL21lc3NhZ2VzLnByb3Bl
cnRpZXMKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vbWVzc2FnZXMucHJvcGVydGllcwpAQCAtMzcsNiAr
MzcsNyBAQAogIwkJCQkJCQlCdWcgNDE4NzQzIC0gWzEuOF1bbnVsbF0gY29udHJhZGljdG9yeSBh
bm5vdGF0aW9ucyBvbiBpbnZvY2F0aW9uIG9mIGdlbmVyaWMgbWV0aG9kIG5vdCByZXBvcnRlZAog
IwkJCQkJCQlCdWcgNDE2MTkwIC0gWzEuOF1bbnVsbF0gZGV0ZWN0IGluY29tcGF0aWJsZSBvdmVy
cmlkZXMgZHVlIHRvIG51bGwgdHlwZSBhbm5vdGF0aW9ucwogIwkJCQkJCQlCdWcgMzkyMjQ1IC0g
WzEuOF1bY29tcGlsZXJdW251bGxdIERlZmluZSB3aGV0aGVyIC8gaG93IEBOb25OdWxsQnlEZWZh
dWx0IGFwcGxpZXMgdG8gVFlQRV9VU0UgbG9jYXRpb25zCisjCQkJCQkJCUJ1ZyA0MzAxNTAgLSBb
MS44XVtudWxsXSBzdHJpY3RlciBjaGVja2luZyBhZ2FpbnN0IHR5cGUgdmFyaWFibGVzCiAjCQlK
ZXNwZXIgUyBNb2xsZXIgPGplc3BlckBzZWxza2FiZXQub3JnPiAtIENvbnRyaWJ1dGlvbnMgZm9y
CiAjCQkJCQkJCWJ1ZyAzODI3MDEgLSBbMS44XVtjb21waWxlcl0gSW1wbGVtZW50IHNlbWFudGlj
IGFuYWx5c2lzIG9mIExhbWJkYSBleHByZXNzaW9ucyAmIFJlZmVyZW5jZSBleHByZXNzaW9uCiAj
CQkJCQkJCWJ1ZyAzODQ1NjcgLSBbMS41XVtjb21waWxlcl0gQ29tcGlsZXIgYWNjZXB0cyBpbGxl
Z2FsIG1vZGlmaWVycyBvbiBwYWNrYWdlIGRlY2xhcmF0aW9uCkBAIC04MTcsNiArODE4LDggQEAK
IDk2NiA9IENvbnRyYWRpY3RvcnkgbnVsbCBhbm5vdGF0aW9uczogbWV0aG9kIHdhcyBpbmZlcnJl
ZCBhcyAnJ3syfSB7M30oezR9KScnLCBidXQgb25seSBvbmUgb2YgJydAezB9JycgYW5kICcnQHsx
fScnIGNhbiBiZSBlZmZlY3RpdmUgYXQgYW55IGxvY2F0aW9uCiA5NjcgPSBOdWxsIHR5cGUgc2Fm
ZXR5OiBVbmNoZWNrZWQgY2FzdCBmcm9tIHswfSB0byB7MX0KICM5NjggdGVtcG9yYXJ5IHdhcm5p
bmcgaGFzIGJlZW4gcmVtb3ZlZAorOTY5ID0gTnVsbCB0eXBlIG1pc21hdGNoICh0eXBlIGFubm90
YXRpb25zKTogJ251bGwnIGlzIG5vdCBjb21wYXRpYmxlIHRvIHRoZSBmcmVlIHR5cGUgdmFyaWFi
bGUgJyd7MH0nJworOTcwID0gTnVsbCB0eXBlIG1pc21hdGNoICh0eXBlIGFubm90YXRpb25zKTog
cmVxdWlyZWQgJyd7MH0nJyBidXQgdGhpcyBleHByZXNzaW9uIGhhcyB0eXBlICcnezF9JycsIHdo
ZXJlICcnezB9JycgaXMgYSBmcmVlIHR5cGUgdmFyaWFibGUKIAogIyBKYXZhIDgKIDEwMDEgPSBT
eW50YXggZXJyb3IsIG1vZGlmaWVycyBhbmQgYW5ub3RhdGlvbnMgYXJlIG5vdCBhbGxvd2VkIGZv
ciB0aGUgbGFtYmRhIHBhcmFtZXRlciB7MH0gYXMgaXRzIHR5cGUgaXMgZWxpZGVk
</data>

          </attachment>
      

    </bug>

</bugzilla>