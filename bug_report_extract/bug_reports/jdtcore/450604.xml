<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>450604</bug_id>
          
          <creation_ts>2014-11-07 18:14:00 -0500</creation_ts>
          <short_desc>[1.8] CCE at InferenceContext18.getParameter line 1377, TypeVariableBinding cannot be cast to ArrayBinding</short_desc>
          <delta_ts>2014-12-09 04:56:38 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.5</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 8</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.5 M4</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Timo Kinnunen">timo.kinnunen</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>jarthana</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2479192</commentid>
    <comment_count>0</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-11-07 18:14:17 -0500</bug_when>
    <thetext>This looks like a recent regression. To reproduce, add this code to an editor:

package repro;
import java.io.IOException;
import java.util.List;
import java.util.function.Function;

public class UsedToWork&lt;T, E extends Exception&gt; {
	public static &lt;T&gt; List&lt;T&gt; of(T one) { return null; }
	public @SafeVarargs static &lt;T&gt; List&lt;T&gt; of(T... items) { return null; }
	public static void printDependencyLoops() throws IOException {
		Function&lt;? super String, ? extends List&lt;String&gt;&gt; mapping = UsedToWork::of;
	}
}

The error is logged immediately in the Error Log view.

Tested with Eclipse SDK

Version: Mars (4.5)
Build id: I20141104-0800

Here is the stack trace:
java.lang.ClassCastException: org.eclipse.jdt.internal.compiler.lookup.TypeVariableBinding cannot be cast to org.eclipse.jdt.internal.compiler.lookup.ArrayBinding
	at org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.getParameter(InferenceContext18.java:1377)
	at org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.isMoreSpecificThan(InferenceContext18.java:610)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.mostSpecificMethodBinding(Scope.java:4289)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findDefaultAbstractMethod(Scope.java:1161)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1781)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1520)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getMethod(Scope.java:2791)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.resolveType(ReferenceExpression.java:491)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.internalResolveTentatively(ReferenceExpression.java:738)
	at org.eclipse.jdt.internal.compiler.ast.ReferenceExpression.findCompileTimeMethodTargeting(ReferenceExpression.java:710)
	at org.eclipse.jdt.internal.compiler.lookup.ConstraintExpressionFormula.reduceReferenceExpressionCompatibility(ConstraintExpressionFormula.java:230)
	at org.eclipse.jdt.internal.compiler.lookup.ConstraintExpressionFormula.reduce(ConstraintExpressionFormula.java:186)
	at org.eclipse.jdt.internal.compiler.lookup.BoundSet.reduceOneConstraint(BoundSet.java:840)
	at org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.inferInvocationType(InferenceContext18.java:387)
	at org.eclipse.jdt.internal.compiler.lookup.ParameterizedGenericMethodBinding.computeCompatibleMethod18(ParameterizedGenericMethodBinding.java:216)
	at org.eclipse.jdt.internal.compiler.lookup.ParameterizedGenericMethodBinding.computeCompatibleMethod(ParameterizedGenericMethodBinding.java:80)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:730)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:687)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1619)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1520)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getMethod(Scope.java:2791)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.findMethodBinding(MessageSend.java:880)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:701)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1022)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:621)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:307)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:531)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1207)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1320)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:590)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:929)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:557)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:729)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:789)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2479217</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-07 19:01:22 -0500</bug_when>
    <thetext>Thanks Timo, I&apos;ll folow up.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2479224</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-07 23:28:49 -0500</bug_when>
    <thetext>Problem is that we are not tracking inference kind for reference expressions
on a per candidate basis, but just have a single variable which gets trashed
by further look ups.

I am implementing tracking on a per IC18 basis, but this revives the discussion
around https://bugs.eclipse.org/bugs/show_bug.cgi?id=448797.

With RE implementing:

arguments(),
getInferenceContext()
registerInferenceContext()

it is only missing two methods:

binding() and
registerResult().

It is implementing binding() under a different signature: 
resolveExpressionExpecting

and can benefit from registerResult() also to avoid overload-re-resolution
and type-re-inference.

It is looking, walking and quacking like a duck: I wish I could recall that
particular reason why I felt earlier RE should not implement Invocation,
but raking my brain is of no avail ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2479225</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-07 23:32:31 -0500</bug_when>
    <thetext>I think both Stephan &amp; I indirectly seem to have acknowledged this problem
of not tracking on a per context basis via comments:

// TODO: define life-cycle: when to re-initialize? How long to keep value?

and 

// CHECK 

referenced in https://bugs.eclipse.org/bugs/show_bug.cgi?id=437444#c119.

I merrily blew both comments away.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2479226</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-07 23:52:52 -0500</bug_when>
    <thetext>Fix and tests here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=b79c86afbec252e4061e220059353bed4588479c.

I&apos;ll wait for opinions on https://bugs.eclipse.org/bugs/show_bug.cgi?id=448797
before reopening.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2479422</commentid>
    <comment_count>5</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-11-08 13:42:45 -0500</bug_when>
    <thetext>I pulled the latest changes and I now see a new regression with this code:

package any;
import java.util.List;
public class FindSourceCodeMain2 {
	public static &lt;T&gt; List&lt;T&gt; of() { return null; }
	public static @SafeVarargs &lt;T&gt; List&lt;T&gt; of(T... values) { return null; }
	static void walkAll() {
		FindSourceCodeMain2.&lt;String&gt; of();
	}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2479423</commentid>
    <comment_count>6</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-11-08 13:44:45 -0500</bug_when>
    <thetext>Sorry, I forgot the new stack trace, it looks like this:

java.lang.ArrayIndexOutOfBoundsException: -1
	at org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.getParameter(InferenceContext18.java:1385)
	at org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.isMoreSpecificThan(InferenceContext18.java:628)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.mostSpecificMethodBinding(Scope.java:4296)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findDefaultAbstractMethod(Scope.java:1161)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1781)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1520)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getMethod(Scope.java:2793)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.findMethodBinding(MessageSend.java:880)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:701)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:611)
	at org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.resolve(LocalDeclaration.java:251)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:621)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:307)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:531)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1207)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1320)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:590)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:1204)
...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2479424</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-08 13:48:33 -0500</bug_when>
    <thetext>(In reply to Timo Kinnunen from comment #5)
&gt; I pulled the latest changes and I now see a new regression with this code:

Thanks, reproduced, fix under test. Sorry about the regression.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2479425</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-08 14:01:48 -0500</bug_when>
    <thetext>The unintentional egregious one line change that caused the latest problem
is fixed here:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=ec1408476a66b2a958a4e514cbefd2cf0438efc9

Thanks Timo.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2479433</commentid>
    <comment_count>9</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-11-08 14:42:30 -0500</bug_when>
    <thetext>Thanks, this works again.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2479468</commentid>
    <comment_count>10</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-11-08 17:28:29 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #2)
&gt; Problem is that we are not tracking inference kind for reference expressions
&gt; on a per candidate basis, but just have a single variable which gets trashed
&gt; by further look ups.
&gt; 
&gt; I am implementing tracking on a per IC18 basis, but this revives the
&gt; discussion
&gt; around https://bugs.eclipse.org/bugs/show_bug.cgi?id=448797.
&gt; 
&gt; With RE implementing:
&gt; 
&gt; arguments(),
&gt; getInferenceContext()
&gt; registerInferenceContext()
&gt; 
&gt; it is only missing two methods:
&gt; 
&gt; binding() and
&gt; registerResult().
&gt; 
&gt; It is implementing binding() under a different signature: 
&gt; resolveExpressionExpecting
&gt; 
&gt; and can benefit from registerResult() also to avoid overload-re-resolution
&gt; and type-re-inference.
&gt; 
&gt; It is looking, walking and quacking like a duck: I wish I could recall that
&gt; particular reason why I felt earlier RE should not implement Invocation,
&gt; but raking my brain is of no avail ...

It quacks but it has no beak.

See bug 448797 comment 1 mentioning the difference between arguments() of a *real* invocation, and RE.createPseudoExpressions().</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2479622</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-09 04:22:56 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #10)

&gt; It quacks but it has no beak.

:) OK, I need to stop sounding like a broken record :)

As this is not a form vs substance issue, we can put it to rest declaring 
status quo as final.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2494371</commentid>
    <comment_count>12</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-12-09 04:56:38 -0500</bug_when>
    <thetext>Verified for 4.5 M4 using build I20141208-2000</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>