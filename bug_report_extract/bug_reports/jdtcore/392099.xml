<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>392099</bug_id>
          
          <creation_ts>2012-10-16 13:26:00 -0400</creation_ts>
          <short_desc>[1.8][compiler][null] Apply null annotation on types for null analysis</short_desc>
          <delta_ts>2014-03-11 13:27:33 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.2</version>
          <rep_platform>PC</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          <dependson>383595</dependson>
    
    <dependson>392238</dependson>
    
    <dependson>392245</dependson>
    
    <dependson>392384</dependson>
    
    <dependson>392862</dependson>
    
    <dependson>394539</dependson>
    
    <dependson>396258</dependson>
    
    <dependson>403216</dependson>
    
    <dependson>411964</dependson>
    
    <dependson>414444</dependson>
    
    <dependson>415291</dependson>
    
    <dependson>416174</dependson>
    
    <dependson>416175</dependson>
    
    <dependson>416176</dependson>
    
    <dependson>416180</dependson>
    
    <dependson>416181</dependson>
    
    <dependson>416182</dependson>
    
    <dependson>416190</dependson>
    
    <dependson>416307</dependson>
    
    <dependson>417295</dependson>
    
    <dependson>417758</dependson>
    
    <dependson>424624</dependson>
    
    <dependson>426582</dependson>
    
    <dependson>427163</dependson>
    
    <dependson>428980</dependson>
    
    <dependson>429384</dependson>
          <blocked>415043</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Stephan Herrmann">stephan.herrmann</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>deepakazad</cc>
    
    <cc>h.klene</cc>
    
    <cc>jarthana</cc>
    
    <cc>kivancmuslu</cc>
    
    <cc>markus_keller</cc>
    
    <cc>Sebastian.Zarnekow</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>1</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2172566</commentid>
    <comment_count>0</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-10-16 13:26:47 -0400</bug_when>
    <thetext>Given the good progress in supporting JSR 308 by the compiler I&apos;m going to investigate what it takes to consume such type annotations for null analysis.

This will also serve as the first field study to challenge the JSR 308 implementation in use.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2172597</commentid>
    <comment_count>1</comment_count>
    <who name="Sebastian Zarnekow">Sebastian.Zarnekow</who>
    <bug_when>2012-10-16 14:19:42 -0400</bug_when>
    <thetext>Really looking forward to this one!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2172688</commentid>
    <comment_count>2</comment_count>
      <attachid>222435</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-10-16 17:17:32 -0400</bug_when>
    <thetext>Created attachment 222435
WIP

And now for some good news:

With the attached patch the most obvious cases already work! :)
Feel free to peek into the test to see what&apos;s alread working.

Based on the solid foundation of the JSR 308 work this was much easier so far than I&apos;d expected, cool.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2172746</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-10-17 02:14:15 -0400</bug_when>
    <thetext>(In reply to comment #0)
&gt; Given the good progress in supporting JSR 308 by the compiler I&apos;m going to
&gt; investigate what it takes to consume such type annotations for null analysis.
&gt; 
&gt; This will also serve as the first field study to challenge the JSR 308
&gt; implementation in use.

That is very welcome. For our part, Jay and I will work on providing rapid
fixes to issues found (beginning with bug 392119 which just got resolved)

(In reply to comment #2)
&gt; Created attachment 222435 [details]
&gt; WIP
&gt; 
&gt; And now for some good news:
&gt; 
&gt; With the attached patch the most obvious cases already work! :)
&gt; Feel free to peek into the test to see what&apos;s alread working.
&gt; 
&gt; Based on the solid foundation of the JSR 308 work this was much easier so
&gt; far than I&apos;d expected, cool.

Terrific. Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2173263</commentid>
    <comment_count>4</comment_count>
    <who name="Sebastian Zarnekow">Sebastian.Zarnekow</who>
    <bug_when>2012-10-17 17:53:54 -0400</bug_when>
    <thetext>How will @NonNullByDefault be applied to TYPE_USE annotations?

Consider the following:

@NonNullByDefault(false)
void takeList(@NonNull List&lt;String&gt; list) { }

Is that equivalent to

void takeList(@NonNull List&lt;@Nullable String&gt; list)
void takeList(@NonNull List&lt;@NonNull String&gt; list)
void takeList(@NonNull List&lt;/* unknown */ String&gt; list)

Will @NonNullByDefault be available on TYPE_USE, too, e.g. for

@NonNullByDefault(true) 
Map&lt;A, Map&lt;B, C&gt;&gt; to denote that all keys, values etc have to be non-null?

Another on about @NonNullByDefault: How is that applied to local variables in method bodies? Is it evaluated at all?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2173267</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-10-17 18:09:27 -0400</bug_when>
    <thetext>(In reply to comment #3)
&gt; ... For our part, Jay and I will work on providing rapid
&gt; fixes to issues found (beginning with bug 392119 which just got resolved)

Thanks, cool (so the potential red herring *was* fishy in the end :) )


Before diving into more details, let me document the key design in this bug, which may or may not appear obvious:

With null annotations applied to types *per use* we no longer get away by a coarse grained representation in MethodBindings, we need to encode this information into the TypeBindings, which means for each ReferenceBinding &apos;X&apos; we potentially get additional bindings &apos;@NonNull X&apos; and &apos;@Nullable X&apos;.

Technically, this instantiation from &apos;X&apos; to &apos;@NonNull X&apos; is the exact same business as instantiating &apos;Y&lt;Z&gt;&apos; into &apos;Y&lt;String&gt;&apos;.

Correspondingly, the central addition is just one more argument in 
  LookupEnvironment.createParameterizedType(... long annotationTagBits ...)
where these tagbits can potentially hold any of TagBits.Annotation*, practically at this point only AnnotationNonNull and AnnotationNullable are used. By integrating with the existing infrastructure we get caching/re-use of instantiated type bindings for free.

One reason for documenting this here is: team members debugging this area will find instances of ParameterizedTypeBinding that in fact have zero arguments and are distinguished from their original just by the tagBits.

The same naturally follows for ParameterizedMethodBinding - with differences in tagBits plus parameterNonNullness.


I will soon release the bulk of the positive handling in this bug. Bug 392238 has been opened for detecting and rejecting nonsensical declarations and more sub-tasks will be opened for issues like null annotations on array dimensions etc.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2173273</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-10-17 18:25:49 -0400</bug_when>
    <thetext>(In reply to comment #4)
&gt; How will @NonNullByDefault be applied to TYPE_USE annotations?
&gt; 
&gt; Consider the following:
&gt; 
&gt; @NonNullByDefault(false)
&gt; void takeList(@NonNull List&lt;String&gt; list) { }

This one is easy: since any default is cancelled (by saying &apos;false&apos;) the signature is evaluated verbatim as written.

Tricky case is
  @NonNullByDefault
  void takeList(List&lt;String&gt; list) { }

Worst case scenario: we may have to introduce another parameter to the @NonNullByDefault annotation, s.t. like:
  @NonNullByDefault(location={PARAMETER, TYPE_USE})

Assuming, we&apos;ll have this parameter, what should be its default?
Then if we agree on the default and agree that this default makes sense *always*, we can spare the parameter :)

&gt; Will @NonNullByDefault be available on TYPE_USE, too, e.g. for
&gt; 
&gt; @NonNullByDefault(true) 
&gt; Map&lt;A, Map&lt;B, C&gt;&gt; to denote that all keys, values etc have to be non-null?

With the above location parameter you&apos;d be able to express this exactly.

&gt; Another on about @NonNullByDefault: How is that applied to local variables
&gt; in method bodies? Is it evaluated at all?

This one is already answered by the javadoc of NonNullByDefault:

  Entities affected by &lt;code&gt;@NonNullByDefault&lt;/code&gt; are:
  &lt;ul&gt;
  &lt;li&gt;method return values&lt;/li&gt;
  &lt;li&gt;parameters of a method or constructor.&lt;/li&gt;
  &lt;/ul&gt;
  Local variables are &lt;em&gt;not&lt;/em&gt; affected.
 
Reason being: for local variables analysis is already good enough.
Explicit annotations for locals should be relevant only rarely.

Thanks for raising this question, indeed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2173277</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-10-17 18:31:25 -0400</bug_when>
    <thetext>(In reply to comment #4)
&gt; How will @NonNullByDefault be applied to TYPE_USE annotations?

To be continued in bug 392245.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2173437</commentid>
    <comment_count>8</comment_count>
    <who name="Sebastian Zarnekow">Sebastian.Zarnekow</who>
    <bug_when>2012-10-18 04:56:25 -0400</bug_when>
    <thetext>(In reply to comment #6)

&gt; 
&gt; This one is already answered by the javadoc of NonNullByDefault:
&gt; 

Sorry about that, I somehow had jdt.annotation from 201203xx in my target platform. JavaDoc was different at that time. Thanks for clarifying this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2173805</commentid>
    <comment_count>9</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-10-18 15:26:12 -0400</bug_when>
    <thetext>One more implementation note on what&apos;s brewing:

Inside ParameterizedQualifiedTypeReference.internalResolveType(..) I&apos;m changing the order of:

		TypeBinding type = internalResolveLeafType(scope, checkBounds);
		createArrayType(scope);
		resolveAnnotations(scope);

pulling the last line to the front, because type resolution already needs access to resolved annotations, now.

Mentioning this here, because changed-order things are always slightly more delicate than, e.g., adding new code.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2173808</commentid>
    <comment_count>10</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-10-18 15:33:15 -0400</bug_when>
    <thetext>(In reply to comment #9)
It seems this actually fixed a bug: Previously GrammarCoverageTests308.test039() was reporting unresolved annotations only 10 times, but there are 14 unresolved locations. Fixed with my change from comment 9 :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2173837</commentid>
    <comment_count>11</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-10-18 16:25:05 -0400</bug_when>
    <thetext>I&apos;ve pushed the first bulk to JAVA_BETA8 via commit 63af609b0c4ca15a76568f63423f1cb23d7be92e

to be continued in sub-tasks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2173937</commentid>
    <comment_count>12</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-10-19 01:03:51 -0400</bug_when>
    <thetext>(In reply to comment #10)
&gt; (In reply to comment #9)
&gt; It seems this actually fixed a bug: Previously
&gt; GrammarCoverageTests308.test039() was reporting unresolved annotations only
&gt; 10 times, but there are 14 unresolved locations. 

I would say that was deliberate - where type annotations are illegal, we are
nulling it out after complaining, because we don&apos;t want to report additional
errors.

I am OK with the double reporting though.

I distinctly remember moving it around and leaving it there because there
were some failures otherwise, but I am not able to reconstruct the scenario
now.

Could you please see if PSTR needs harmonizing too ?

Code of the form:

this.resolvedType = captureTypeAnnotations(scope, previousType, this.resolvedType, this.annotations[tokenIndex]);

and

argTypes[j] = captureTypeAnnotations(scope, qualifyingType, argType, arg.annotations[0]);

makes for jarring reading. Can&apos;t this be arranged so that capturing
type annotations is act in itself without the side of effect of doing
something in addition and returning ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2174056</commentid>
    <comment_count>13</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-10-19 07:37:22 -0400</bug_when>
    <thetext>(In reply to comment #12)
&gt; (In reply to comment #10)
&gt; &gt; (In reply to comment #9)
&gt; &gt; It seems this actually fixed a bug: Previously
&gt; &gt; GrammarCoverageTests308.test039() was reporting unresolved annotations only
&gt; &gt; 10 times, but there are 14 unresolved locations. 
&gt; 
&gt; I would say that was deliberate - where type annotations are illegal, we are
&gt; nulling it out after complaining, because we don&apos;t want to report additional
&gt; errors.

I see, thanks.
 
&gt; I am OK with the double reporting though.

I think for &quot;unresolved&quot; errors it makes sense to report despite the wrong position. I&apos;ll keep an eye on other duplication of errors that might be more confusing than this one.
 
&gt; I distinctly remember moving it around and leaving it there because there
&gt; were some failures otherwise, but I am not able to reconstruct the scenario
&gt; now.

I was afraid there might be some invisible dependencies...

&gt; Could you please see if PSTR needs harmonizing too ?

I will take a look. Either I&apos;m missing some relevant test or the situation for PSTR is simpler...

&gt; Code of the form:
&gt; 
&gt; this.resolvedType = captureTypeAnnotations(scope, previousType,
&gt; this.resolvedType, this.annotations[tokenIndex]);
&gt; 
&gt; and
&gt; 
&gt; argTypes[j] = captureTypeAnnotations(scope, qualifyingType, argType,
&gt; arg.annotations[0]);
&gt; 
&gt; makes for jarring reading. Can&apos;t this be arranged so that capturing
&gt; type annotations is act in itself without the side of effect of doing
&gt; something in addition and returning ?

Is this a matter of naming? Would it be clearer to you if the method were named s.t. like &quot;createAnnotatedTypeBinding&quot;, &quot;convertTo...&quot;? Did you see the comment before the declaration of that method? Does it help any? The returned type binding is the only effect of this method, aside from caching inside LookupEnvironment.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2174105</commentid>
    <comment_count>14</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-10-19 09:12:28 -0400</bug_when>
    <thetext>(In reply to comment #13)

&gt; &gt; makes for jarring reading. Can&apos;t this be arranged so that capturing
&gt; &gt; type annotations is act in itself without the side of effect of doing
&gt; &gt; something in addition and returning ?
&gt; 
&gt; Is this a matter of naming? Would it be clearer to you if the method were
&gt; named s.t. like &quot;createAnnotatedTypeBinding&quot;, &quot;convertTo...&quot;? Did you see
&gt; the comment before the declaration of that method? Does it help any? The
&gt; returned type binding is the only effect of this method, aside from caching
&gt; inside LookupEnvironment.

OK, I was mistaken - I thought it wrapping some existing code also.

createAnnotatedTypeBinding is a much better choice IMO. Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2174402</commentid>
    <comment_count>15</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-10-19 18:25:22 -0400</bug_when>
    <thetext>(In reply to comment #12)
&gt; Could you please see if PSTR needs harmonizing too ?

I tried to create a test that would require such adjustment in PSTR, but so far I failed, the difference being:

PQTR: For &quot;Outer. @Nullable Inner&lt;T&gt;&quot; we need the resolved annotation already inside PQTR.internalResolveLeafType(..).

PSTR: For &quot;@Nullable X&lt;T&gt;&quot; we have two situations:
A the annotation is seen as a SE7 annotation
  =&gt; resolving and analysing annotations happens outside the PSTR node
B the annotation makes no sense :), like in
  - cast &quot;(@Nullable X&lt;T&gt;)x&quot; (cannot insert dynamic check)
  - (x instanceof @Nullable X&lt;T&gt;) (if it succeeds value cannot be null)
  - alloc: &quot;new @Nullable X&lt;T&gt;()&quot; - cannot be null :)

There ought to be a non-SE7 position, where null annotations on PSTR can be used, but we&apos;ll get there when we get there, I guess.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2184287</commentid>
    <comment_count>16</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-11-15 18:22:22 -0500</bug_when>
    <thetext>(In reply to comment #15)
&gt; There ought to be a non-SE7 position, where null annotations on PSTR can be
&gt; used, but we&apos;ll get there when we get there, I guess.

How about this: &quot;Foo&lt;S,T extends @NonNull Bar&lt;S&gt;&gt;&quot;

=&gt; need to evaluate null annotations on type bounds and check instantiations of such generic types -&gt; additional constraint on actual type argument.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2185760</commentid>
    <comment_count>17</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-11-20 13:12:53 -0500</bug_when>
    <thetext>A heads-up from work regarding annotations on array types (bug 392862 and friends):

Considering how a declaration like &quot;@NonNull Object [] var&quot; should be evaluated it seems that we cannot accept @NonNull as a declaration annotation *and* a type annotation simultaneously (see bug 394539 comment 1).

In this matter I currently see two options:
(1) *Change* the existing annotations from @Target({ METHOD, PARAMETER, LOCAL_VARIABLE }) to @Target(TYPE_USE), i.e., *replace* previous targets with TYPE_USE.
(2) Create a new set of annotations for 1.8 code

While (2) would completely avoid any issues of incompatibility it would make migration from SE7 annotations to JSR308 annotations pretty painful.

OTOH, for (1) to work smoothly we&apos;d need to
(a) address how to tell the two versions of annotations apart
(b) ensure that re-interpretation of SE7 null annotations as JSR308 annotations preserves the original semantics (such as to simulate that these annotations simply become more powerful, while in reality they&apos;re replaced entirely).

Does anyone see another more compelling option?

Issue (a) can easily be solved for OSGi contexts by creating a bundle org.eclipse.jdt.annotation_2.0.0 with BREE 1.8. However, for non-OSGi contexts I don&apos;t see an easy way how projects can make sure they&apos;re using the right set of annotations.

I&apos;ll start investigating by looking into (b).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2187789</commentid>
    <comment_count>18</comment_count>
    <who name="Kivanc Muslu">kivancmuslu</who>
    <bug_when>2012-11-26 21:31:04 -0500</bug_when>
    <thetext>I just wanted say that I am also looking forward to get this feature and an as early integration as possible with JSR 308. Even the current version of Nullness analysis provided in Eclipse (with experimental field support) works quite solid and I am looking forward for even more expressiveness.

Thanks and keep up the good job!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2189735</commentid>
    <comment_count>19</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-12-02 09:15:55 -0500</bug_when>
    <thetext>(In reply to comment #18)

Thanks for your kind words :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2217657</commentid>
    <comment_count>20</comment_count>
    <who name="Holger Klene">h.klene</who>
    <bug_when>2013-02-16 08:30:07 -0500</bug_when>
    <thetext>I&apos;m trying to get my head around JSR308. e.g.

public class X {
	@Nullable String nullable = null;
	@NonNull Integer nonnull = 1;

	@NonNullByDefault(false)
	&lt;S extends Object&gt; S magic(S param) {
		return param;
	}

	public void test() {
		nullable = magic(nullable);	// A
		nonnull = magic(nonnull);	// B
	}
}

I cannot say either:
&lt;S extends @NonNull Object&gt; as this won&apos;t accept the parameter at A
&lt;S extends @Nullable Object&gt; as this won&apos;t assign correctly at B

Is there some type-variable to propagate nullness, deriving the result of a method from the parameter?
Could the nullness of a parameter also be inverted?

Is &lt;@NonNull S extends @Nullable Object &amp; @NonNull Serializable&gt; prohibited? If the mixture is illegal, a single annotation in front of S would suffice, right (saves some verbose typing)?

Thanks!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2217671</commentid>
    <comment_count>21</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-02-16 09:30:54 -0500</bug_when>
    <thetext>(In reply to comment #20)
&gt; I&apos;m trying to get my head around JSR308. e.g.

Sorry, we&apos;re busy *implementing* Java 8, we cannot provide support for
all subtleties of *using* those new features.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2275945</commentid>
    <comment_count>22</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-06-22 18:48:47 -0400</bug_when>
    <thetext>Preparing to address bug 392384 I stumbled upon this:
The strategy outlined in comment 5 produced illegal signatures in byte code for methods like this:
  List&lt;@Nullable String&gt; getSomeStrings() { ... }
which would cause this error:
  The class file X contains a signature &apos;()Ljava/util/List&lt;Ljava/lang/String&lt;&gt;;&gt;;&apos; ill-formed at position 36

The problem is that we generate a generic signature for the type argument String - due to the type annotation. To fix this we need to avoid setting ExtraCompilerModifiers.AccGenericSignature if only tagBits but no type arguments motivated the creation of a ParameterizedTypeBinding. This is easily achieved by passing null type arguments instead of Binding.NO_TYPES. Checks to cope with null type arguments are already present in PTB. (Note that an empty array of type arguments is used to denote a diamond binding prior to inferences).

Released for BETA_JAVA8 via commit 1351b74cfa5cac286b3d17f0119e045000dd6ce3</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2294632</commentid>
    <comment_count>23</comment_count>
      <attachid>234400</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-08-14 06:13:41 -0400</bug_when>
    <thetext>Created attachment 234400
Changes to NullAnnotationTests

This patch illustrates the effect of those changes I have in my workspace.

Many expected error messages are no longer given directly, but using the
indirection of a tiny function that assembles the expected error based on
the current compliance.

This part only shows how existing diagnostics change.
In 1.8 mode a few  messages are marked with &quot;(type annotations)&quot;. I&apos;m not sure
if this addition is useful for the user, but during development it helps me see
which part of the implementation generated the diagnostic :)

The patch also shows some shy efforts of aligning different messages.
E.g., the words &quot;specify&quot; and &quot;declare&quot; where used inconsistently, 
I&apos;m now preferring &quot;specify&quot; in contexts referring to nullness
(e.g., &quot;specified as @Nullable&quot;).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2294633</commentid>
    <comment_count>24</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-08-14 06:16:16 -0400</bug_when>
    <thetext>My pending change also introduces a few new diagnostics, collected here for
reference:

For syntactic analysis (to distinguish from other messages):

- RedundantNullCheckOnField:
  Redundant null check: The field {0} cannot be null at this location (ignoring concurrency)

- FieldComparisonYieldsFalse
  Null comparison always yields false: The field {0} cannot be null at this location (ignoring concurrency)

Type annotations:

- NullityUncheckedTypeAnnotationDetail
  Null type safety (type annotations): The expression of type &apos;&apos;{1}&apos;&apos; needs unchecked conversion to conform to &apos;&apos;{0}&apos;&apos;
  Example: ...&apos;List&lt;Object&gt;&apos; needs unchecked conversion to conform to &apos;List&lt;@NonNull Object&gt;&apos;

- RedundantNullCheckAgainstNonNullType
  Redundant null check: comparing &apos;&apos;{0}&apos;&apos; against null
  Example: ...&apos;comparing &apos;@NonNull String&apos; against null

- NullAnnotationUnsupportedLocation
  The nullness annotation &apos;&apos;{0}&apos;&apos; is not applicable at this location
  Reported against TypeDeclaration, ConstructorDeclaration</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2294640</commentid>
    <comment_count>25</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-08-14 06:38:03 -0400</bug_when>
    <thetext>Documenting the central mechanism behind the &quot;deep encoding&quot; of null type
annotations into TypeBindings:

The central function for encoding is:
- LookupEnvironment.createAnnotatedType()
  which works for 
  - ReferenceBinding 
    specific treatment for ParameterizedTypeBinding, UnresolvedReferenceBinding
  - ArrayBinding
  Not yet: PolyTypeBinding (see bug 415043 item (6)).

This function uses the existing infra structure in LookupEnvironment for
sharing equal bindings.

Since the duplication of TypeBindings for the sake of type annotations
influences type comparison using &quot;==&quot;, I introduced a new function:
- TypeBinding.unannotated() 
  which removes differences due only to null type annotations,
  after application of this function regular &quot;==&quot; comparison is restored.
So far I only found one location needing to call unannotated():
- LambdaExpression.resolveType() 
  (when comparing parameters of descriptor and binding)
Additionally, this function is used to wipe annotations which have been
detected as bogus (e.g., contradictory).

I&apos;m sure that more locations need to follow suite, but I&apos;m hopeful that these
locations will be few.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2295329</commentid>
    <comment_count>26</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-08-15 13:44:48 -0400</bug_when>
    <thetext>I released the bulk of this via commit https://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=8a1621e802c664e59aba36b8a87f59ae57902e37

I&apos;m open to any comments, ranging from white box code review to comments on
error messages (see comment 23 and comment 24).

I&apos;ll continue to &quot;harden&quot; the implementation via bug 415043.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2300505</commentid>
    <comment_count>27</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-08-29 06:42:21 -0400</bug_when>
    <thetext>After bug 415043 has been resolved let me summarize my experience so far, also as input for the discussion in bug 409586.

The deep encoding as employed for null type annotations well serves its purpose for analysis, but for the price of two levels of complication:

Binding identity:
Since &apos;String&apos; and &apos;@NonNull String&apos; are now represented by different type bindings, any code doing == or != comparison can possibly draw the wrong conclusion when finding those types to be different. This risk is reduced by two independent measures:
 - isCompatibleWith() retrieves the unannotated() binding before comparison
 - many locations call erasure() or original() before comparison. Since these methods
   implicitly answer the unannotated type, identity comparison is OK
This doesn&apos;t fully eliminate the risk, the remains have to be dealt with via testing.
OTOH, I don&apos;t see any alternative to this design.

Binding classification:
Normally, being annotated would be a property that does not impact the classification of a type binding, i.e., an annotated STB be an STB, an annotated ArrayBinding an ArrayBinding etc. This is relevant for
 - instanceof checks
 - queries like isParameterizedType()
 - query kind()
For various reasons, however, I&apos;ve implemented an exception: annotated STB and BTB are not encoded as STB/BTB but as PTB instead. For most aspects this design does &quot;the right thing&quot;, e.g., in terms of caching, structural combinatorics and calling erasure() / original() were appropriate. Remaining issues relate to &quot;what do we conclude, when we see a type as parameterized?&quot; 
So far I found one conclusion which is wrong for annotated types without arguments:
 - a type needs an instance context to have access to a class level type variable
For this (and potentially similar) aspects, we will have to add more specific queries (in addition to queries like isParameterized()), and apply these on a case-by-case basis.

This issue bears an unavoidable difficulty: many code locations perform a switch over kind() which requires that all relevant kinds of types can be enumerated in a linear fashion. This can only ever be an approximation that cannot truly reflect the underlying combinatorics. Thus, kind() can only show the most relevant property of a type, not all of its properties (would require a multi dimensional answer instead of int).

Interestingly, this difficulty is very similar to a situation we have in Object Teams, where all kinds of ReferenceBinding are further classified into plain-Java, Roles, Teams and Role-and-Team. For OT the solution was found in two steps:
 - create a hierarchy of binding types that is able to structurally represent all legal combinations
 - add the necessary queries to distinguish type properties relevant for different tasks during compilation

Over time I will compare both situations (JDT+308 vs. OT) more in detail to see if the existing impl for OT bears more lessons that are relevant for JDT.


Level of confidence:
I admit that the design has a non-null risk, so I&apos;m happy that annotation based null analysis can be disabled per a compiler option :)
However, I&apos;ve run all of RunJDTCoreTest with this analysis *enabled* and fixed all bugs demonstrated by this exercise. As the next level of hardening I&apos;m thinking of running all tests even with tweaking @NonNullByDefault to apply globally. This will force null annotations to be seen *everywhere*, and should reveal the majority of remaining bugs.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2301637</commentid>
    <comment_count>28</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-09-01 09:41:37 -0400</bug_when>
    <thetext>Commit e097bd9e8b95f2f5601006e28238301c69bf5baf has been booked on this bug,
which is a pure refactoring / cleanup change.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2345399</commentid>
    <comment_count>29</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-02 06:50:14 -0500</bug_when>
    <thetext>Suitable quick assist/fix have been requested in bug 415180 and bug 424802.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2370200</commentid>
    <comment_count>30</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-02 07:32:55 -0500</bug_when>
    <thetext>Some good news due to recent changes in the implementation:

(In reply to Holger Klene from comment #20)
&gt; I&apos;m trying to get my head around JSR308. e.g.
&gt; 
&gt; public class X {
&gt; 	@Nullable String nullable = null;
&gt; 	@NonNull Integer nonnull = 1;
&gt; 
&gt; 	@NonNullByDefault(false)
&gt; 	&lt;S extends Object&gt; S magic(S param) {
&gt; 		return param;
&gt; 	}
&gt; 
&gt; 	public void test() {
&gt; 		nullable = magic(nullable);	// A
&gt; 		nonnull = magic(nonnull);	// B
&gt; 	}
&gt; }
&gt; 
&gt; I cannot say either:
&gt; &lt;S extends @NonNull Object&gt; as this won&apos;t accept the parameter at A
&gt; &lt;S extends @Nullable Object&gt; as this won&apos;t assign correctly at B

The above example is now accepted by the compiler!
 
&gt; Is there some type-variable to propagate nullness, deriving the result of a
&gt; method from the parameter?

For all type parameters that have no null annotation of their own, inference now tries to infer the nullness along with the type.

&gt; Could the nullness of a parameter also be inverted?

Sorry, no, type inference has no concept of negation.
 
&gt; Is &lt;@NonNull S extends @Nullable Object &amp; @NonNull Serializable&gt; prohibited?


Compiler says:

    &lt;@NonNull S extends @Nullable Object &amp; @NonNull Serializable&gt; S m(S s) { return s; }
                        ^^^^^^^^^
This nullness annotation conflicts with a &apos;@NonNull&apos; annotation which is effective on the same type parameter 

&gt; If the mixture is illegal, a single annotation in front of S would suffice,
&gt; right (saves some verbose typing)?

right</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2370210</commentid>
    <comment_count>31</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-02 09:20:06 -0500</bug_when>
    <thetext>FYI: Bug 392245 has some discussion about the details of @NonNullByDefault in the era of type annotations.

My current proposal can be found in bug 392245 comment 9.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2374478</commentid>
    <comment_count>32</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-11 12:32:57 -0400</bug_when>
    <thetext>With no more open subtasks this RFE is resolved.

Follow-up tasks (like bug 429958) will be managed on their own right.

Folks, we have the option to handle nullness as an integral part of the type system :)

Thanks for all support!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2374502</commentid>
    <comment_count>33</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-11 13:27:33 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #32)

&gt; Folks, we have the option to handle nullness as an integral part of the type
&gt; system :)

Hearty congratulations on this terrific job !

&gt; Thanks for all support!

Hey, Thank you,</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>222435</attachid>
            <date>2012-10-16 17:17:00 -0400</date>
            <delta_ts>2012-10-16 17:17:32 -0400</delta_ts>
            <desc>WIP</desc>
            <filename>clipboard.txt</filename>
            <type>text/plain</type>
            <size>32556</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxUeXBlQW5ub3Rh
dGlvblRlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9v
cmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxUeXBlQW5u
b3RhdGlvblRlc3QuamF2YQpuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwLi5jYmI5
MjA5Ci0tLSAvZGV2L251bGwKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGls
ZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVs
bFR5cGVBbm5vdGF0aW9uVGVzdC5qYXZhCkBAIC0wLDAgKzEsMzk3IEBACisvKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKgorICogQ29weXJpZ2h0IChjKSAyMDEyIEdLIFNvZnR3YXJlIEFHIGFuZCBvdGhl
cnMuCisgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBh
bnlpbmcgbWF0ZXJpYWxzCisgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9m
IHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKKyAqIHdoaWNoIGFjY29tcGFuaWVzIHRo
aXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CisgKiBodHRwOi8vd3d3LmVjbGlw
c2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbAorICogCisgKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0
aW9uIG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVyIHRoZSBK
YXZhCisgKiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFibGUgZm9y
IHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBjb2RlIGlzIG5v
dCBjb21wYXRpYmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KKyAqCisgKiBD
b250cmlidXRvcnM6CisgKiAgICAgU3RlcGhhbiBIZXJybWFubiAtIGluaXRpYWwgQVBJIGFuZCBp
bXBsZW1lbnRhdGlvbgorICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCitwYWNrYWdlIG9yZy5lY2xp
cHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyLnJlZ3Jlc3Npb247CisKK2ltcG9ydCBqYXZhLmlv
LkZpbGU7CitpbXBvcnQgamF2YS51dGlsLk1hcDsKKworaW1wb3J0IGp1bml0LmZyYW1ld29yay5U
ZXN0OworCitpbXBvcnQgb3JnLmVjbGlwc2UuY29yZS5ydW50aW1lLkZpbGVMb2NhdG9yOworaW1w
b3J0IG9yZy5lY2xpcHNlLmNvcmUucnVudGltZS5QbGF0Zm9ybTsKK2ltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuY29yZS5KYXZhQ29yZTsKKworcHVibGljIGNsYXNzIE51bGxUeXBlQW5ub3RhdGlvblRl
c3QgZXh0ZW5kcyBBYnN0cmFjdENvbXBhcmFibGVUZXN0IHsKKworCS8vIEZJWE1FIChzdGVwaGFu
KTogdXNlIHRoaXMgdHlwZSBhcyBsb25nIGFzIHdlIGRvbid0IGNvbXBpbGUgYWdhaW5zdCBhIEpS
RTg6CisJcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIEVMRU1FTlRfVFlQRV9TT1VSQ0UgPSAi
cGFja2FnZSBqYXZhLmxhbmcuYW5ub3RhdGlvbjtcbiIgKworCSJwdWJsaWMgZW51bSBFbGVtZW50
VHlwZSB7XG4iICsKKwkiICAgIFRZUEUsXG4iICsKKwkiICAgIEZJRUxELFxuIiArCisJIiAgICBN
RVRIT0QsXG4iICsKKwkiICAgIFBBUkFNRVRFUixcbiIgKworCSIgICAgQ09OU1RSVUNUT1IsXG4i
ICsKKwkiICAgIExPQ0FMX1ZBUklBQkxFLFxuIiArCisJIiAgICBBTk5PVEFUSU9OX1RZUEUsXG4i
ICsKKwkiICAgIFBBQ0tBR0UsXG4iICsKKwkiICAgIFRZUEVfUEFSQU1FVEVSLFxuIiArCisJIiAg
ICBUWVBFX1VTRVxuIiArCisJIn1cbiI7CisKKwlwcml2YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcg
RUxFTUVOVF9UWVBFX0pBVkEgPSAiamF2YS9sYW5nL2Fubm90YXRpb24vRWxlbWVudFR5cGUuamF2
YSI7CisKKwkvLyBjbGFzcyBsaWJyYXJpZXMgaW5jbHVkaW5nIG91ciBkZWZhdWx0IG51bGwgYW5u
b3RhdGlvbiB0eXBlczoKKwlTdHJpbmdbXSBMSUJTOworCisJLy8gRklYTUUgKHN0ZXBoYW4pOiB1
c2UgdGhlc2UgYW5ub3RhdGlvbiB0eXBlcyBhcyBsb25nIGFzIHdlIGRvbid0IGNvbXBpbGUgYWdh
aW5zdCBhbiB1cGRhdGVkIG9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uIGJ1bmRsZToKKwkvLyBu
YW1lcyBhbmQgY29udGVudCBvZiBjdXN0b20gYW5ub3RhdGlvbnMgdXNlZCBpbiBhIGZldyB0ZXN0
czoKKwlwcml2YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcgQ1VTVE9NX05PTk5VTExfTkFNRSA9ICJv
cmcvZm9vL05vbk51bGwuamF2YSI7CisJcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIENVU1RP
TV9OT05OVUxMX0NPTlRFTlQgPQorCQkicGFja2FnZSBvcmcuZm9vO1xuIiArCisJCSJpbXBvcnQg
c3RhdGljIGphdmEubGFuZy5hbm5vdGF0aW9uLkVsZW1lbnRUeXBlLio7XG4iICsKKwkJImltcG9y
dCBqYXZhLmxhbmcuYW5ub3RhdGlvbi4qO1xuIiArCisJCSJAUmV0ZW50aW9uKFJldGVudGlvblBv
bGljeS5DTEFTUylcbiIgKworCQkiQFRhcmdldCh7TUVUSE9ELFBBUkFNRVRFUixMT0NBTF9WQVJJ
QUJMRSxUWVBFX1VTRX0pXG4iICsKKwkJInB1YmxpYyBAaW50ZXJmYWNlIE5vbk51bGwge1xuIiAr
CisJCSJ9XG4iOworCXByaXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZyBDVVNUT01fTlVMTEFCTEVf
TkFNRSA9ICJvcmcvZm9vL051bGxhYmxlLmphdmEiOworCXByaXZhdGUgc3RhdGljIGZpbmFsIFN0
cmluZyBDVVNUT01fTlVMTEFCTEVfQ09OVEVOVCA9ICJwYWNrYWdlIG9yZy5mb287XG4iICsKKwkJ
ImltcG9ydCBzdGF0aWMgamF2YS5sYW5nLmFubm90YXRpb24uRWxlbWVudFR5cGUuKjtcbiIgKwor
CQkiaW1wb3J0IGphdmEubGFuZy5hbm5vdGF0aW9uLio7XG4iICsKKwkJIkBSZXRlbnRpb24oUmV0
ZW50aW9uUG9saWN5LkNMQVNTKVxuIiArCisJCSJAVGFyZ2V0KHtNRVRIT0QsUEFSQU1FVEVSLExP
Q0FMX1ZBUklBQkxFLFRZUEVfVVNFfSlcbiIgKworCQkicHVibGljIEBpbnRlcmZhY2UgTnVsbGFi
bGUge1xuIiArCisJCSJ9XG4iOworCisJcHVibGljIE51bGxUeXBlQW5ub3RhdGlvblRlc3QoU3Ry
aW5nIG5hbWUpIHsKKwkJc3VwZXIobmFtZSk7CisJfQorCisJLy8gU3RhdGljIGluaXRpYWxpemVy
IHRvIHNwZWNpZnkgdGVzdHMgc3Vic2V0IHVzaW5nIFRFU1RTXyogc3RhdGljIHZhcmlhYmxlcwor
CS8vIEFsbCBzcGVjaWZpZWQgdGVzdHMgd2hpY2ggZG8gbm90IGJlbG9uZyB0byB0aGUgY2xhc3Mg
YXJlIHNraXBwZWQuLi4KKwlzdGF0aWMgeworLy8JCQlURVNUU19OQU1FUyA9IG5ldyBTdHJpbmdb
XSB7ICJ0ZXN0X25lc3RlZFR5cGVfMDMiIH07CisvLwkJCVRFU1RTX05VTUJFUlMgPSBuZXcgaW50
W10geyA1NjEgfTsKKy8vCQkJVEVTVFNfUkFOR0UgPSBuZXcgaW50W10geyAxLCAyMDQ5IH07CisJ
fQorCisJcHVibGljIHN0YXRpYyBUZXN0IHN1aXRlKCkgeworCQlyZXR1cm4gYnVpbGRNaW5pbWFs
Q29tcGxpYW5jZVRlc3RTdWl0ZSh0ZXN0Q2xhc3MoKSwgRl8xXzgpOworCX0KKworCXB1YmxpYyBz
dGF0aWMgQ2xhc3MgdGVzdENsYXNzKCkgeworCQlyZXR1cm4gTnVsbFR5cGVBbm5vdGF0aW9uVGVz
dC5jbGFzczsKKwl9CisKKwkvLyBGSVhNRTogZXh0cmFjdCB0aGVzZSBjb3BpZXMgZnJvbSBOdWxs
QW5ub3RhdGlvblRlc3QgdG8gYSBjb21tb24gc3VwZXIgY2xhc3M6CisJCisJcHJvdGVjdGVkIHZv
aWQgc2V0VXAoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJc3VwZXIuc2V0VXAoKTsKKwkJaWYgKHRo
aXMuTElCUyA9PSBudWxsKSB7CisJCQlTdHJpbmdbXSBkZWZhdWx0TGlicyA9IGdldERlZmF1bHRD
bGFzc1BhdGhzKCk7CisJCQlpbnQgbGVuID0gZGVmYXVsdExpYnMubGVuZ3RoOworCQkJdGhpcy5M
SUJTID0gbmV3IFN0cmluZ1tsZW4rMV07CisJCQlTeXN0ZW0uYXJyYXljb3B5KGRlZmF1bHRMaWJz
LCAwLCB0aGlzLkxJQlMsIDAsIGxlbik7CisJCQlGaWxlIGJ1bmRsZUZpbGUgPSBGaWxlTG9jYXRv
ci5nZXRCdW5kbGVGaWxlKFBsYXRmb3JtLmdldEJ1bmRsZSgib3JnLmVjbGlwc2UuamR0LmFubm90
YXRpb24iKSk7CisJCQlpZiAoYnVuZGxlRmlsZS5pc0RpcmVjdG9yeSgpKQorCQkJCXRoaXMuTElC
U1tsZW5dID0gYnVuZGxlRmlsZS5nZXRQYXRoKCkrIi9iaW4iOworCQkJZWxzZQorCQkJCXRoaXMu
TElCU1tsZW5dID0gYnVuZGxlRmlsZS5nZXRQYXRoKCk7CisJCX0KKwl9CisJLy8gQ29uZGl0aW9u
YWxseSBhdWdtZW50IHByb2JsZW0gZGV0ZWN0aW9uIHNldHRpbmdzCisJc3RhdGljIGJvb2xlYW4g
c2V0TnVsbFJlbGF0ZWRPcHRpb25zID0gdHJ1ZTsKKwlwcm90ZWN0ZWQgTWFwIGdldENvbXBpbGVy
T3B0aW9ucygpIHsKKwkgICAgTWFwIGRlZmF1bHRPcHRpb25zID0gc3VwZXIuZ2V0Q29tcGlsZXJP
cHRpb25zKCk7CisJICAgIGlmIChzZXROdWxsUmVsYXRlZE9wdGlvbnMpIHsKKwkgICAgCWRlZmF1
bHRPcHRpb25zLnB1dChKYXZhQ29yZS5DT01QSUxFUl9QQl9OVUxMX1JFRkVSRU5DRSwgSmF2YUNv
cmUuRVJST1IpOworCQkgICAgZGVmYXVsdE9wdGlvbnMucHV0KEphdmFDb3JlLkNPTVBJTEVSX1BC
X1BPVEVOVElBTF9OVUxMX1JFRkVSRU5DRSwgSmF2YUNvcmUuRVJST1IpOworCQkgICAgZGVmYXVs
dE9wdGlvbnMucHV0KEphdmFDb3JlLkNPTVBJTEVSX1BCX1JFRFVOREFOVF9OVUxMX0NIRUNLLCBK
YXZhQ29yZS5FUlJPUik7CisJCQlkZWZhdWx0T3B0aW9ucy5wdXQoSmF2YUNvcmUuQ09NUElMRVJf
UEJfSU5DTFVERV9BU1NFUlRTX0lOX05VTExfQU5BTFlTSVMsIEphdmFDb3JlLkVOQUJMRUQpOwor
CisJCQlkZWZhdWx0T3B0aW9ucy5wdXQoSmF2YUNvcmUuQ09NUElMRVJfUEJfTUlTU0lOR19PVkVS
UklERV9BTk5PVEFUSU9OX0ZPUl9JTlRFUkZBQ0VfTUVUSE9EX0lNUExFTUVOVEFUSU9OLCBKYXZh
Q29yZS5ESVNBQkxFRCk7CisKKwkJCS8vIGVuYWJsZSBudWxsIGFubm90YXRpb25zOgorCQkJZGVm
YXVsdE9wdGlvbnMucHV0KEphdmFDb3JlLkNPTVBJTEVSX0FOTk9UQVRJT05fTlVMTF9BTkFMWVNJ
UywgSmF2YUNvcmUuRU5BQkxFRCk7CisJCQkvLyBsZWF2ZSBvdGhlciBuZXcgb3B0aW9ucyBhdCB0
aGVzZSBkZWZhdWx0czoKKy8vCQkJZGVmYXVsdE9wdGlvbnMucHV0KENvbXBpbGVyT3B0aW9ucy5P
UFRJT05fUmVwb3J0TnVsbENvbnRyYWN0VmlvbGF0aW9uLCBKYXZhQ29yZS5FUlJPUik7CisvLwkJ
CWRlZmF1bHRPcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydFBvdGVudGlh
bE51bGxDb250cmFjdFZpb2xhdGlvbiwgSmF2YUNvcmUuRVJST1IpOworLy8JCQlkZWZhdWx0T3B0
aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9SZXBvcnROdWxsQ29udHJhY3RJbnN1ZmZp
Y2llbnRJbmZvLCBDb21waWxlck9wdGlvbnMuV0FSTklORyk7CisKKy8vCQkJZGVmYXVsdE9wdGlv
bnMucHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJT05fTnVsbGFibGVBbm5vdGF0aW9uTmFtZSwgIm9y
Zy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uLk51bGxhYmxlIik7CisvLwkJCWRlZmF1bHRPcHRpb25z
LnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX05vbk51bGxBbm5vdGF0aW9uTmFtZSwgIm9yZy5l
Y2xpcHNlLmpkdC5hbm5vdGF0aW9uLk5vbk51bGwiKTsKKwkgICAgfQorCSAgICByZXR1cm4gZGVm
YXVsdE9wdGlvbnM7CisJfQorCXZvaWQgcnVuTmVnYXRpdmVUZXN0V2l0aExpYnMoU3RyaW5nW10g
dGVzdEZpbGVzLCBTdHJpbmcgZXhwZWN0ZWRFcnJvckxvZykgeworCQlydW5OZWdhdGl2ZVRlc3Qo
CisJCQkJdGVzdEZpbGVzLAorCQkJCWV4cGVjdGVkRXJyb3JMb2csCisJCQkJdGhpcy5MSUJTLAor
CQkJCWZhbHNlIC8qc2hvdWxkRmx1c2gqLyk7CisJfQorCXZvaWQgcnVuTmVnYXRpdmVUZXN0V2l0
aExpYnMoYm9vbGVhbiBzaG91bGRGbHVzaE91dHB1dERpcmVjdG9yeSwgU3RyaW5nW10gdGVzdEZp
bGVzLCBNYXAgY3VzdG9tT3B0aW9ucywgU3RyaW5nIGV4cGVjdGVkRXJyb3JMb2cpIHsKKwkJcnVu
TmVnYXRpdmVUZXN0KAorCQkJCXNob3VsZEZsdXNoT3V0cHV0RGlyZWN0b3J5LAorCQkJCXRlc3RG
aWxlcywKKwkJCQl0aGlzLkxJQlMsCisJCQkJY3VzdG9tT3B0aW9ucywKKwkJCQlleHBlY3RlZEVy
cm9yTG9nLAorCQkJCS8vIHJ1bnRpbWUgb3B0aW9ucworCQkJICAgIEphdmFjVGVzdE9wdGlvbnMu
RXhjdXNlLkVjbGlwc2VXYXJuaW5nQ29uZmlndXJlZEFzRXJyb3IpOworCX0KKwl2b2lkIHJ1bk5l
Z2F0aXZlVGVzdFdpdGhMaWJzKFN0cmluZ1tdIHRlc3RGaWxlcywgTWFwIGN1c3RvbU9wdGlvbnMs
IFN0cmluZyBleHBlY3RlZEVycm9yTG9nKSB7CisJCXJ1bk5lZ2F0aXZlVGVzdFdpdGhMaWJzKGZh
bHNlIC8qIGZsdXNoIG91dHB1dCBkaXJlY3RvcnkgKi8sCXRlc3RGaWxlcywgY3VzdG9tT3B0aW9u
cywgZXhwZWN0ZWRFcnJvckxvZyk7CisJfQorCXZvaWQgcnVuQ29uZm9ybVRlc3RXaXRoTGlicyhT
dHJpbmdbXSB0ZXN0RmlsZXMsIE1hcCBjdXN0b21PcHRpb25zLCBTdHJpbmcgZXhwZWN0ZWRDb21w
aWxlckxvZykgeworCQlydW5Db25mb3JtVGVzdFdpdGhMaWJzKGZhbHNlIC8qIGZsdXNoIG91dHB1
dCBkaXJlY3RvcnkgKi8sIHRlc3RGaWxlcywgY3VzdG9tT3B0aW9ucywgZXhwZWN0ZWRDb21waWxl
ckxvZyk7CisJfQorCXZvaWQgcnVuQ29uZm9ybVRlc3RXaXRoTGlicyhib29sZWFuIHNob3VsZEZs
dXNoT3V0cHV0RGlyZWN0b3J5LCBTdHJpbmdbXSB0ZXN0RmlsZXMsIE1hcCBjdXN0b21PcHRpb25z
LCBTdHJpbmcgZXhwZWN0ZWRDb21waWxlckxvZykgeworCQlydW5Db25mb3JtVGVzdCgKKwkJCQlz
aG91bGRGbHVzaE91dHB1dERpcmVjdG9yeSwKKwkJCQl0ZXN0RmlsZXMsCisJCQkJdGhpcy5MSUJT
LAorCQkJCWN1c3RvbU9wdGlvbnMsCisJCQkJZXhwZWN0ZWRDb21waWxlckxvZywKKwkJCQkiIiwv
KiBleHBlY3RlZCBvdXRwdXQgKi8KKwkJCQkiIiwvKiBleHBlY3RlZCBlcnJvciAqLworCQkJICAg
IEphdmFjVGVzdE9wdGlvbnMuRXhjdXNlLkVjbGlwc2VXYXJuaW5nQ29uZmlndXJlZEFzRXJyb3Ip
OworCX0KKwl2b2lkIHJ1bkNvbmZvcm1UZXN0KFN0cmluZ1tdIHRlc3RGaWxlcywgTWFwIGN1c3Rv
bU9wdGlvbnMsIFN0cmluZyBleHBlY3RlZE91dHB1dFN0cmluZykgeworCQlydW5Db25mb3JtVGVz
dCgKKwkJCQl0ZXN0RmlsZXMsCisJCQkJZXhwZWN0ZWRPdXRwdXRTdHJpbmcsCisJCQkJbnVsbCAv
KmNsYXNzTGlicmFyaWVzKi8sCisJCQkJdHJ1ZSAvKnNob3VsZEZsdXNoT3V0cHV0RGlyZWN0b3J5
Ki8sCisJCQkJbnVsbCAvKnZtQXJndW1lbnRzKi8sCisJCQkJY3VzdG9tT3B0aW9ucywKKwkJCQlu
dWxsIC8qY3VzdG9tUmVxdWVzdG9yKi8pOworCisJfQorCisJLy8gYSBsaXN0IHdpdGggbnVsbGFi
bGUgZWxlbWVudHMgaXMgdXNlZAorCXB1YmxpYyB2b2lkIHRlc3Rfbm9ubnVsbF9saXN0X2VsZW1l
bnRzXzAxKCkgeworCQlNYXAgY3VzdG9tT3B0aW9ucyA9IGdldENvbXBpbGVyT3B0aW9ucygpOwor
CQljdXN0b21PcHRpb25zLnB1dChKYXZhQ29yZS5DT01QSUxFUl9OVUxMQUJMRV9BTk5PVEFUSU9O
X05BTUUsICJvcmcuZm9vLk51bGxhYmxlIik7CisJCWN1c3RvbU9wdGlvbnMucHV0KEphdmFDb3Jl
LkNPTVBJTEVSX05PTk5VTExfQU5OT1RBVElPTl9OQU1FLCAib3JnLmZvby5Ob25OdWxsIik7CisJ
CXJ1bk5lZ2F0aXZlVGVzdCgKKwkJCW5ldyBTdHJpbmdbXSB7CisJCQkJRUxFTUVOVF9UWVBFX0pB
VkEsCisJCQkJRUxFTUVOVF9UWVBFX1NPVVJDRSwKKwkJCQlDVVNUT01fTlVMTEFCTEVfTkFNRSwK
KwkJCQlDVVNUT01fTlVMTEFCTEVfQ09OVEVOVCwKKwkJCQlDVVNUT01fTk9OTlVMTF9OQU1FLAor
CQkJCUNVU1RPTV9OT05OVUxMX0NPTlRFTlQsCisJCQkJIlguamF2YSIsCisJCQkJICAiaW1wb3J0
IG9yZy5mb28uKjtcbiIgKworCQkJCSAgImltcG9ydCBqYXZhLnV0aWwuTGlzdDtcbiIgKworCQkJ
CSAgInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJCSAgIiAgICB2b2lkIGZvbyhMaXN0PEBOdWxs
YWJsZSBPYmplY3Q+IGwpIHtcbiIgKworCQkJCSAgIiAgICAgICAgU3lzdGVtLm91dC5wcmludChs
LmdldCgwKS50b1N0cmluZygpKTsgLy8gcHJvYmxlbTogcmV0cmlldmVkIGVsZW1lbnQgY2FuIGJl
IG51bGxcbiIgKworCQkJCSAgIiAgICAgICAgbC5hZGQobnVsbCk7XG4iICsKKwkJCQkgICIgICAg
fVxuIiArCisJCQkJICAiICAgIHZvaWQgYmFyKGphdmEudXRpbC5MaXN0PEBOdWxsYWJsZSBqYXZh
LmxhbmcuT2JqZWN0PiBsKSB7XG4iICsKKwkJCQkgICIgICAgICAgIFN5c3RlbS5vdXQucHJpbnQo
bC5nZXQoMSkudG9TdHJpbmcoKSk7IC8vIHByb2JsZW06IHJldHJpZXZlZCBlbGVtZW50IGNhbiBi
ZSBudWxsXG4iICsKKwkJCQkgICIgICAgICAgIGwuYWRkKG51bGwpO1xuIiArCisJCQkJICAiICAg
IH1cbiIgKworCQkJCSAgIn1cbiJ9LAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCSIxLiBFUlJP
UiBpbiBYLmphdmEgKGF0IGxpbmUgNSlcbiIgKyAKKwkJCSIJU3lzdGVtLm91dC5wcmludChsLmdl
dCgwKS50b1N0cmluZygpKTsgLy8gcHJvYmxlbTogcmV0cmlldmVkIGVsZW1lbnQgY2FuIGJlIG51
bGxcbiIgKyAKKwkJCSIJICAgICAgICAgICAgICAgICBeXl5eXl5eXlxuIiArIAorCQkJIlBvdGVu
dGlhbCBudWxsIHBvaW50ZXIgYWNjZXNzOiBUaGUgbWV0aG9kIGdldChpbnQpIG1heSByZXR1cm4g
bnVsbFxuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCSIyLiBFUlJPUiBpbiBYLmphdmEg
KGF0IGxpbmUgOSlcbiIgKyAKKwkJCSIJU3lzdGVtLm91dC5wcmludChsLmdldCgxKS50b1N0cmlu
ZygpKTsgLy8gcHJvYmxlbTogcmV0cmlldmVkIGVsZW1lbnQgY2FuIGJlIG51bGxcbiIgKyAKKwkJ
CSIJICAgICAgICAgICAgICAgICBeXl5eXl5eXlxuIiArIAorCQkJIlBvdGVudGlhbCBudWxsIHBv
aW50ZXIgYWNjZXNzOiBUaGUgbWV0aG9kIGdldChpbnQpIG1heSByZXR1cm4gbnVsbFxuIiArIAor
CQkJIi0tLS0tLS0tLS1cbiIsCisJCQludWxsLAorCQkJdHJ1ZSwgLyogc2hvdWxkRmx1c2gqLwor
CQkJY3VzdG9tT3B0aW9ucyk7CisJfQorCisJLy8gYSBsaXN0IHdpdGggbm9uLW51bGwgZWxlbWVu
dHMgaXMgdXNlZAorCXB1YmxpYyB2b2lkIHRlc3Rfbm9ubnVsbF9saXN0X2VsZW1lbnRzXzAyKCkg
eworCQlNYXAgY3VzdG9tT3B0aW9ucyA9IGdldENvbXBpbGVyT3B0aW9ucygpOworCQljdXN0b21P
cHRpb25zLnB1dChKYXZhQ29yZS5DT01QSUxFUl9OVUxMQUJMRV9BTk5PVEFUSU9OX05BTUUsICJv
cmcuZm9vLk51bGxhYmxlIik7CisJCWN1c3RvbU9wdGlvbnMucHV0KEphdmFDb3JlLkNPTVBJTEVS
X05PTk5VTExfQU5OT1RBVElPTl9OQU1FLCAib3JnLmZvby5Ob25OdWxsIik7CisJCXJ1bk5lZ2F0
aXZlVGVzdCgKKwkJCW5ldyBTdHJpbmdbXSB7CisJCQkJRUxFTUVOVF9UWVBFX0pBVkEsCisJCQkJ
RUxFTUVOVF9UWVBFX1NPVVJDRSwKKwkJCQlDVVNUT01fTlVMTEFCTEVfTkFNRSwKKwkJCQlDVVNU
T01fTlVMTEFCTEVfQ09OVEVOVCwKKwkJCQlDVVNUT01fTk9OTlVMTF9OQU1FLAorCQkJCUNVU1RP
TV9OT05OVUxMX0NPTlRFTlQsCisJCQkJIlguamF2YSIsCisJCQkJICAiaW1wb3J0IG9yZy5mb28u
KjtcbiIgKworCQkJCSAgImltcG9ydCBqYXZhLnV0aWwuTGlzdDtcbiIgKworCQkJCSAgInB1Ymxp
YyBjbGFzcyBYIHtcbiIgKworCQkJCSAgIiAgICB2b2lkIGZvbyhMaXN0PEBOb25OdWxsIE9iamVj
dD4gbCkge1xuIiArCisJCQkJICAiICAgICAgICBTeXN0ZW0ub3V0LnByaW50KGwuZ2V0KDApLnRv
U3RyaW5nKCkpO1xuIiArCisJCQkJICAiICAgICAgICBsLmFkZChudWxsKTsgLy8gcHJvYmxlbTog
Y2Fubm90IGluc2VydCAnbnVsbCcgaW50byB0aGlzIGxpc3RcbiIgKworCQkJCSAgIiAgICB9XG4i
ICsKKwkJCQkgICIgICAgdm9pZCBiYXIoamF2YS51dGlsLkxpc3Q8QE5vbk51bGwgamF2YS5sYW5n
Lk9iamVjdD4gbCkge1xuIiArCisJCQkJICAiICAgICAgICBTeXN0ZW0ub3V0LnByaW50KGwuZ2V0
KDApLnRvU3RyaW5nKCkpO1xuIiArCisJCQkJICAiICAgICAgICBsLmFkZCgwLCBudWxsKTsgLy8g
cHJvYmxlbTogY2Fubm90IGluc2VydCAnbnVsbCcgaW50byB0aGlzIGxpc3RcbiIgKworCQkJCSAg
IiAgICB9XG4iICsKKwkJCQkgICJ9XG4ifSwKKwkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkiMS4g
RVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDYpXG4iICsgCisJCQkiCWwuYWRkKG51bGwpOyAvLyBw
cm9ibGVtOiBjYW5ub3QgaW5zZXJ0ICdudWxsJyBpbnRvIHRoaXMgbGlzdFxuIiArIAorCQkJIgkg
ICAgICBeXl5eXG4iICsgCisJCQkiTnVsbCB0eXBlIG1pc21hdGNoOiByZXF1aXJlZCBcJ0BOb25O
dWxsIE9iamVjdFwnIGJ1dCB0aGUgcHJvdmlkZWQgdmFsdWUgaXMgbnVsbFxuIiArIAorCQkJIi0t
LS0tLS0tLS1cbiIgKyAKKwkJCSIyLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTApXG4iICsg
CisJCQkiCWwuYWRkKDAsIG51bGwpOyAvLyBwcm9ibGVtOiBjYW5ub3QgaW5zZXJ0ICdudWxsJyBp
bnRvIHRoaXMgbGlzdFxuIiArIAorCQkJIgkgICAgICAgICBeXl5eXG4iICsgCisJCQkiTnVsbCB0
eXBlIG1pc21hdGNoOiByZXF1aXJlZCBcJ0BOb25OdWxsIE9iamVjdFwnIGJ1dCB0aGUgcHJvdmlk
ZWQgdmFsdWUgaXMgbnVsbFxuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIsCisJCQludWxsLAorCQkJ
dHJ1ZSwgLyogc2hvdWxkRmx1c2gqLworCQkJY3VzdG9tT3B0aW9ucyk7CisJfQorCisJLy8gYW4g
b3V0ZXIgYW4gaW5uZXIgY2xhc3MgYm90aCBoYXZlIGEgdHlwZSBwYXJhbWV0ZXIsCisJLy8gY2xp
ZW50IGluc3RhbnRpYXRlcyB3aXRoIG51bGxhYmxlL25vbm51bGwgYWN0dWFsIHR5cGUgYXJndW1l
bnRzCisJcHVibGljIHZvaWQgdGVzdF9uZXN0ZWRUeXBlXzAxKCkgeworCQlNYXAgY3VzdG9tT3B0
aW9ucyA9IGdldENvbXBpbGVyT3B0aW9ucygpOworCQljdXN0b21PcHRpb25zLnB1dChKYXZhQ29y
ZS5DT01QSUxFUl9OVUxMQUJMRV9BTk5PVEFUSU9OX05BTUUsICJvcmcuZm9vLk51bGxhYmxlIik7
CisJCWN1c3RvbU9wdGlvbnMucHV0KEphdmFDb3JlLkNPTVBJTEVSX05PTk5VTExfQU5OT1RBVElP
Tl9OQU1FLCAib3JnLmZvby5Ob25OdWxsIik7CisJCXJ1bk5lZ2F0aXZlVGVzdCgKKwkJCW5ldyBT
dHJpbmdbXSB7CisJCQkJRUxFTUVOVF9UWVBFX0pBVkEsCisJCQkJRUxFTUVOVF9UWVBFX1NPVVJD
RSwKKwkJCQlDVVNUT01fTlVMTEFCTEVfTkFNRSwKKwkJCQlDVVNUT01fTlVMTEFCTEVfQ09OVEVO
VCwKKwkJCQlDVVNUT01fTk9OTlVMTF9OQU1FLAorCQkJCUNVU1RPTV9OT05OVUxMX0NPTlRFTlQs
CisJCQkJIkEuamF2YSIsCisJCQkJICAiaW1wb3J0IG9yZy5mb28uKjtcbiIgKworCQkJCSAgInB1
YmxpYyBjbGFzcyBBPFg+IHtcbiIgKworCQkJCSAgIiAgICBwdWJsaWMgY2xhc3MgSTxZPiB7XG4i
ICsKKwkJCQkgICIgICAgICAgIHB1YmxpYyBYIGZvbyhZIGwpIHtcbiIgKworCQkJCSAgIiAgICAg
ICAgICAgIHJldHVybiBudWxsO1xuIiArCisJCQkJICAiICAgICAgICB9XG4iICsKKwkJCQkgICIg
ICAgfVxuIiArCisJCQkJICAiICAgIHZvaWQgYmFyKEE8QE51bGxhYmxlIE9iamVjdD4uSTxATm9u
TnVsbCBPYmplY3Q+IGkpIHtcbiIgKyAvLyBsZWdhbCBpbnN0YW50aWF0aW9uCisJCQkJICAiICAg
ICAgICBATm9uTnVsbCBPYmplY3QgbyA9IGkuZm9vKG51bGwpOyAvLyBwcm9ibGVtczogYXJndW1l
bnQgYW5kIGFzc2lnbm1lbnQgdmlvbGF0ZSBudWxsIGNvbnRyYWN0c1xuIiArCisJCQkJICAiICAg
IH1cbiIgKworCQkJCSAgIn1cbiJ9LAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCSIxLiBFUlJP
UiBpbiBBLmphdmEgKGF0IGxpbmUgOSlcbiIgKyAKKwkJCSIJQE5vbk51bGwgT2JqZWN0IG8gPSBp
LmZvbyhudWxsKTsgLy8gcHJvYmxlbXM6IGFyZ3VtZW50IGFuZCBhc3NpZ25tZW50IHZpb2xhdGUg
bnVsbCBjb250cmFjdHNcbiIgKyAKKwkJCSIJICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXl5e
XlxuIiArIAorCQkJIk51bGwgdHlwZSBtaXNtYXRjaDogcmVxdWlyZWQgXCdATm9uTnVsbCBPYmpl
Y3RcJyBidXQgdGhlIHByb3ZpZGVkIHZhbHVlIGlzIGluZmVycmVkIGFzIEBOdWxsYWJsZVxuIiAr
IAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCSIyLiBFUlJPUiBpbiBBLmphdmEgKGF0IGxpbmUg
OSlcbiIgKyAKKwkJCSIJQE5vbk51bGwgT2JqZWN0IG8gPSBpLmZvbyhudWxsKTsgLy8gcHJvYmxl
bXM6IGFyZ3VtZW50IGFuZCBhc3NpZ25tZW50IHZpb2xhdGUgbnVsbCBjb250cmFjdHNcbiIgKyAK
KwkJCSIJICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXG4iICsgCisJCQkiTnVsbCB0eXBl
IG1pc21hdGNoOiByZXF1aXJlZCBcJ0BOb25OdWxsIE9iamVjdFwnIGJ1dCB0aGUgcHJvdmlkZWQg
dmFsdWUgaXMgbnVsbFxuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIsCisJCQludWxsLAorCQkJdHJ1
ZSwgLyogc2hvdWxkRmx1c2gqLworCQkJY3VzdG9tT3B0aW9ucyk7CisJfQorCisJLy8gYW4gb3V0
ZXIgYW4gaW5uZXIgY2xhc3MgYm90aCBoYXZlIGEgdHlwZSBwYXJhbWV0ZXIsCisJLy8gYSBzdWJj
bGFzcyBpbnN0YW50aWF0ZXMgd2l0aCBudWxsYWJsZS9ub25udWxsIGFjdHVhbCB0eXBlIGFyZ3Vt
ZW50cworCS8vIGFuZCBjb3JyZWN0bHkgaW1wbGVtZW50cyBhbiBhYnN0cmFjdCBpbmhlcml0ZWQg
bWV0aG9kCisJLy8gY29tcGlsZSBlcnJvcnMgb25seSBpbnNpZGUgdGhhdCBtZXRob2QKKwlwdWJs
aWMgdm9pZCB0ZXN0X25lc3RlZFR5cGVfMDIoKSB7CisJCU1hcCBjdXN0b21PcHRpb25zID0gZ2V0
Q29tcGlsZXJPcHRpb25zKCk7CisJCWN1c3RvbU9wdGlvbnMucHV0KEphdmFDb3JlLkNPTVBJTEVS
X05VTExBQkxFX0FOTk9UQVRJT05fTkFNRSwgIm9yZy5mb28uTnVsbGFibGUiKTsKKwkJY3VzdG9t
T3B0aW9ucy5wdXQoSmF2YUNvcmUuQ09NUElMRVJfTk9OTlVMTF9BTk5PVEFUSU9OX05BTUUsICJv
cmcuZm9vLk5vbk51bGwiKTsKKwkJcnVuTmVnYXRpdmVUZXN0KAorCQkJbmV3IFN0cmluZ1tdIHsK
KwkJCQlFTEVNRU5UX1RZUEVfSkFWQSwKKwkJCQlFTEVNRU5UX1RZUEVfU09VUkNFLAorCQkJCUNV
U1RPTV9OVUxMQUJMRV9OQU1FLAorCQkJCUNVU1RPTV9OVUxMQUJMRV9DT05URU5ULAorCQkJCUNV
U1RPTV9OT05OVUxMX05BTUUsCisJCQkJQ1VTVE9NX05PTk5VTExfQ09OVEVOVCwKKwkJCQkiQS5q
YXZhIiwKKwkJCQkgICJwdWJsaWMgY2xhc3MgQTxYPiB7XG4iICsKKwkJCQkgICIgICAgcHVibGlj
IGFic3RyYWN0IGNsYXNzIEk8WT4ge1xuIiArCisJCQkJICAiICAgICAgICBwdWJsaWMgYWJzdHJh
Y3QgWCBmb28oWSBsKTtcbiIgKworCQkJCSAgIiAgICAgICAgcHVibGljIFggaWRYKFggaW4pIHsg
cmV0dXJuIGluOyB9XG4iICsKKwkJCQkgICIgICAgICAgIHB1YmxpYyBZIGlkWShZIGluKSB7IHJl
dHVybiBpbjsgfVxuIiArCisJCQkJICAiICAgIH1cbiIgKworCQkJCSAgIn1cbiIsCisJCQkJIkIu
amF2YSIsCisJCQkJICAiaW1wb3J0IG9yZy5mb28uKjtcbiIgKworCQkJCSAgInB1YmxpYyBjbGFz
cyBCIGV4dGVuZHMgQTxATm9uTnVsbCBPYmplY3Q+IHtcbiIgKworCQkJCSAgIiAgICBwdWJsaWMg
Y2xhc3MgSiBleHRlbmRzIEk8QE51bGxhYmxlIFN0cmluZz4ge1xuIiArCisJCQkJICAiICAgICAg
ICBAT3ZlcnJpZGVcbiIgKworCQkJCSAgIiAgICAgICAgcHVibGljIEBOb25OdWxsIE9iamVjdCBm
b28oQE51bGxhYmxlIFN0cmluZyBsKSB7XG4iICsKKwkJCQkgICIgICAgICAgICAgICBTeXN0ZW0u
b3V0LnByaW50KGlkWChudWxsKSk7XG4iICsKKwkJCQkgICIgICAgICAgICAgICByZXR1cm4gaWRZ
KG51bGwpO1xuIiArCisJCQkJICAiICAgICAgICB9XG4iICsKKwkJCQkgICIgICAgfVxuIiArCisJ
CQkJICAifVxuIn0sCisJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJIjEuIEVSUk9SIGluIEIuamF2
YSAoYXQgbGluZSA2KVxuIiArIAorCQkJIglTeXN0ZW0ub3V0LnByaW50KGlkWChudWxsKSk7XG4i
ICsgCisJCQkiCSAgICAgICAgICAgICAgICAgICAgIF5eXl5cbiIgKyAKKwkJCSJOdWxsIHR5cGUg
bWlzbWF0Y2g6IHJlcXVpcmVkIFwnQE5vbk51bGwgT2JqZWN0XCcgYnV0IHRoZSBwcm92aWRlZCB2
YWx1ZSBpcyBudWxsXG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJIjIuIEVSUk9SIGlu
IEIuamF2YSAoYXQgbGluZSA3KVxuIiArIAorCQkJIglyZXR1cm4gaWRZKG51bGwpO1xuIiArIAor
CQkJIgkgICAgICAgXl5eXl5eXl5eXG4iICsgCisJCQkiTnVsbCB0eXBlIG1pc21hdGNoOiByZXF1
aXJlZCBcJ0BOb25OdWxsIE9iamVjdFwnIGJ1dCB0aGUgcHJvdmlkZWQgdmFsdWUgaXMgaW5mZXJy
ZWQgYXMgQE51bGxhYmxlXG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIiwKKwkJCW51bGwsCisJCQl0
cnVlLCAvKiBzaG91bGRGbHVzaCovCisJCQljdXN0b21PcHRpb25zKTsKKwl9CisKKwkvLyBhbiBv
dXRlciBhbiBpbm5lciBjbGFzcyBib3RoIGhhdmUgYSB0eXBlIHBhcmFtZXRlciwKKwkvLyBhIHN1
YmNsYXNzIGluc3RhbnRpYXRlcyB3aXRoIG51bGxhYmxlL25vbm51bGwgYWN0dWFsIHR5cGUgYXJn
dW1lbnRzCisJLy8gYW5kIGluY29ycmVjdGx5IGltcGxlbWVudHMgYW4gYWJzdHJhY3QgaW5oZXJp
dGVkIG1ldGhvZAorCXB1YmxpYyB2b2lkIHRlc3RfbmVzdGVkVHlwZV8wMygpIHsKKwkJTWFwIGN1
c3RvbU9wdGlvbnMgPSBnZXRDb21waWxlck9wdGlvbnMoKTsKKwkJY3VzdG9tT3B0aW9ucy5wdXQo
SmF2YUNvcmUuQ09NUElMRVJfTlVMTEFCTEVfQU5OT1RBVElPTl9OQU1FLCAib3JnLmZvby5OdWxs
YWJsZSIpOworCQljdXN0b21PcHRpb25zLnB1dChKYXZhQ29yZS5DT01QSUxFUl9OT05OVUxMX0FO
Tk9UQVRJT05fTkFNRSwgIm9yZy5mb28uTm9uTnVsbCIpOworCQlydW5OZWdhdGl2ZVRlc3QoCisJ
CQluZXcgU3RyaW5nW10geworCQkJCUVMRU1FTlRfVFlQRV9KQVZBLAorCQkJCUVMRU1FTlRfVFlQ
RV9TT1VSQ0UsCisJCQkJQ1VTVE9NX05VTExBQkxFX05BTUUsCisJCQkJQ1VTVE9NX05VTExBQkxF
X0NPTlRFTlQsCisJCQkJQ1VTVE9NX05PTk5VTExfTkFNRSwKKwkJCQlDVVNUT01fTk9OTlVMTF9D
T05URU5ULAorCQkJCSJBLmphdmEiLAorCQkJCSAgInB1YmxpYyBjbGFzcyBBPFg+IHtcbiIgKwor
CQkJCSAgIiAgICBwdWJsaWMgYWJzdHJhY3QgY2xhc3MgSTxZPiB7XG4iICsKKwkJCQkgICIgICAg
ICAgIHB1YmxpYyBhYnN0cmFjdCBYIGZvbyhZIGwpO1xuIiArCisJCQkJICAiICAgIH1cbiIgKwor
CQkJCSAgIn1cbiIsCisJCQkJIkIuamF2YSIsCisJCQkJICAiaW1wb3J0IG9yZy5mb28uKjtcbiIg
KworCQkJCSAgInB1YmxpYyBjbGFzcyBCIGV4dGVuZHMgQTxATm9uTnVsbCBPYmplY3Q+IHtcbiIg
KworCQkJCSAgIiAgICBwdWJsaWMgY2xhc3MgSiBleHRlbmRzIEk8QE51bGxhYmxlIFN0cmluZz4g
e1xuIiArCisJCQkJICAiICAgICAgICBAT3ZlcnJpZGVcbiIgKworCQkJCSAgIiAgICAgICAgcHVi
bGljIEBOdWxsYWJsZSBPYmplY3QgZm9vKEBOb25OdWxsIFN0cmluZyBsKSB7XG4iICsKKwkJCQkg
ICIgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiIgKworCQkJCSAgIiAgICAgICAgfVxuIiArCisJ
CQkJICAiICAgIH1cbiIgKworCQkJCSAgIn1cbiJ9LAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJ
CSIxLiBFUlJPUiBpbiBCLmphdmEgKGF0IGxpbmUgNSlcbiIgKyAKKwkJCSIJcHVibGljIEBOdWxs
YWJsZSBPYmplY3QgZm9vKEBOb25OdWxsIFN0cmluZyBsKSB7XG4iICsgCisJCQkiCSAgICAgICBe
Xl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCQkiVGhlIHJldHVybiB0eXBlIGlzIGluY29tcGF0aWJs
ZSB3aXRoIHRoZSBATm9uTnVsbCByZXR1cm4gZnJvbSBBPE9iamVjdD4uSTxTdHJpbmc+LmZvbyhT
dHJpbmcpXG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJIjIuIEVSUk9SIGluIEIuamF2
YSAoYXQgbGluZSA1KVxuIiArIAorCQkJIglwdWJsaWMgQE51bGxhYmxlIE9iamVjdCBmb28oQE5v
bk51bGwgU3RyaW5nIGwpIHtcbiIgKyAKKwkJCSIJICAgICAgICAgICAgICAgICAgICAgICAgICAg
IF5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkJIklsbGVnYWwgcmVkZWZpbml0aW9uIG9mIHBhcmFt
ZXRlciBsLCBpbmhlcml0ZWQgbWV0aG9kIGZyb20gQTxPYmplY3Q+Lkk8U3RyaW5nPiBkZWNsYXJl
cyB0aGlzIHBhcmFtZXRlciBhcyBATnVsbGFibGVcbiIgKyAKKwkJCSItLS0tLS0tLS0tXG4iLAor
CQkJbnVsbCwKKwkJCXRydWUsIC8qIHNob3VsZEZsdXNoKi8KKwkJCWN1c3RvbU9wdGlvbnMpOwor
CX0KK30KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUGFyYW1ldGVyaXplZFF1YWxpZmllZFR5cGVS
ZWZlcmVuY2UuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUGFyYW1ldGVyaXplZFF1YWxpZmllZFR5cGVSZWZl
cmVuY2UuamF2YQppbmRleCAwM2U1N2U1Li43OTk1MzZmIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0
L1BhcmFtZXRlcml6ZWRRdWFsaWZpZWRUeXBlUmVmZXJlbmNlLmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fz
dC9QYXJhbWV0ZXJpemVkUXVhbGlmaWVkVHlwZVJlZmVyZW5jZS5qYXZhCkBAIC0xMSw3ICsxMSw5
IEBACiAgKiAKICAqIENvbnRyaWJ1dG9yczoKICAqICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0
aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24KLSAqICAgICBTdGVwaGFuIEhlcnJtYW5uIC0gQ29u
dHJpYnV0aW9uIGZvciBCdWcgMzQyNjcxIC0gQ2xhc3NDYXN0RXhjZXB0aW9uOiBvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlNvdXJjZVR5cGVCaW5kaW5nIGNhbm5vdCBi
ZSBjYXN0IHRvIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuQXJyYXlC
aW5kaW5nCisgKiAgICAgU3RlcGhhbiBIZXJybWFubiAtIENvbnRyaWJ1dGlvbnMgZm9yCisgKgkJ
CQkJCQkJYnVnIDM0MjY3MSAtIENsYXNzQ2FzdEV4Y2VwdGlvbjogb3JnLmVjbGlwc2UuamR0Lmlu
dGVybmFsLmNvbXBpbGVyLmxvb2t1cC5Tb3VyY2VUeXBlQmluZGluZyBjYW5ub3QgYmUgY2FzdCB0
byBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkFycmF5QmluZGluZwor
ICoJCQkJCQkJCWJ1ZyAzOTIwOTkgLSBbMS44XVtjb21waWxlcl1bbnVsbF0gQXBwbHkgbnVsbCBh
bm5vdGF0aW9uIG9uIHR5cGVzIGZvciBudWxsIGFuYWx5c2lzCiAgKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKi8KIHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdDsKIApA
QCAtMjQ4LDcgKzI1MCw3IEBACiAJCQkJCWlmIChhcmdUeXBlID09IG51bGwpIHsKIAkJCQkJCWFy
Z0hhc0Vycm9yID0gdHJ1ZTsKIAkJCQkJfSBlbHNlIHsKLQkJCQkJCWFyZ1R5cGVzW2pdID0gYXJn
VHlwZTsKKwkJCQkJCWFyZ1R5cGVzW2pdID0gY2FwdHVyZVR5cGVBbm5vdGF0aW9ucyhzY29wZSwg
cXVhbGlmeWluZ1R5cGUsIGFyZ1R5cGUsIGFyZy5hbm5vdGF0aW9ucyk7CiAJCQkJCX0KIAkJCQl9
CiAJCQkJaWYgKGFyZ0hhc0Vycm9yKSB7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1BhcmFtZXRl
cml6ZWRTaW5nbGVUeXBlUmVmZXJlbmNlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1BhcmFtZXRlcml6ZWRT
aW5nbGVUeXBlUmVmZXJlbmNlLmphdmEKaW5kZXggYmRiNDllNi4uNTYzZTU0NSAxMDA2NDQKLS0t
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FzdC9QYXJhbWV0ZXJpemVkU2luZ2xlVHlwZVJlZmVyZW5jZS5qYXZhCisrKyBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hc3QvUGFyYW1ldGVyaXplZFNpbmdsZVR5cGVSZWZlcmVuY2UuamF2YQpAQCAtMTEs
NyArMTEsOSBAQAogICogCiAgKiBDb250cmlidXRvcnM6CiAgKiAgICAgSUJNIENvcnBvcmF0aW9u
IC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCi0gKiAgICAgU3RlcGhhbiBIZXJybWFu
biAtIENvbnRyaWJ1dGlvbiBmb3IgQnVnIDM0MjY3MSAtIENsYXNzQ2FzdEV4Y2VwdGlvbjogb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5Tb3VyY2VUeXBlQmluZGluZyBj
YW5ub3QgYmUgY2FzdCB0byBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3Vw
LkFycmF5QmluZGluZworICogICAgIFN0ZXBoYW4gSGVycm1hbm4gLSBDb250cmlidXRpb25zIGZv
cgorICoJCQkJCQkJCWJ1ZyAzNDI2NzEgLSBDbGFzc0Nhc3RFeGNlcHRpb246IG9yZy5lY2xpcHNl
LmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuU291cmNlVHlwZUJpbmRpbmcgY2Fubm90IGJl
IGNhc3QgdG8gb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5BcnJheUJp
bmRpbmcKKyAqCQkJCQkJCQlidWcgMzkyMDk5IC0gWzEuOF1bY29tcGlsZXJdW251bGxdIEFwcGx5
IG51bGwgYW5ub3RhdGlvbiBvbiB0eXBlcyBmb3IgbnVsbCBhbmFseXNpcwogICoqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKiovCiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5h
c3Q7CiAKQEAgLTIxOCw3ICsyMjAsNyBAQAogCQkgICAgIGlmIChhcmdUeXBlID09IG51bGwpIHsK
IAkJICAgICAgICAgYXJnSGFzRXJyb3IgPSB0cnVlOwogCQkgICAgIH0gZWxzZSB7Ci0JCQkgICAg
YXJnVHlwZXNbaV0gPSBhcmdUeXBlOworCQkJICAgIGFyZ1R5cGVzW2ldID0gY2FwdHVyZVR5cGVB
bm5vdGF0aW9ucyhzY29wZSwgZW5jbG9zaW5nVHlwZSwgYXJnVHlwZSwgdHlwZUFyZ3VtZW50LmFu
bm90YXRpb25zKTsKIAkJICAgICB9CiAJCX0KIAkJaWYgKGFyZ0hhc0Vycm9yKSB7CmRpZmYgLS1n
aXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXN0L1R5cGVSZWZlcmVuY2UuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvVHlwZVJlZmVy
ZW5jZS5qYXZhCmluZGV4IDM2YmQ3YWIuLjIzOGQ0ZWQgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3Qv
VHlwZVJlZmVyZW5jZS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvVHlwZVJlZmVyZW5jZS5qYXZhCkBA
IC0xMSw2ICsxMSw4IEBACiAgKiAKICAqIENvbnRyaWJ1dG9yczoKICAqICAgICBJQk0gQ29ycG9y
YXRpb24gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24KKyAqICAgICBTdGVwaGFuIEhl
cnJtYW5uIC0gQ29udHJpYnV0aW9uIGZvcgorICoJCQkJCQkJCWJ1ZyAzOTIwOTkgLSBbMS44XVtj
b21waWxlcl1bbnVsbF0gQXBwbHkgbnVsbCBhbm5vdGF0aW9uIG9uIHR5cGVzIGZvciBudWxsIGFu
YWx5c2lzCiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KIHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0
LmludGVybmFsLmNvbXBpbGVyLmFzdDsKIApAQCAtNTM0LDQgKzUzNiwzMyBAQAogcHVibGljIGlu
dCBnZXRBbm5vdGF0YWJsZUxldmVscygpIHsKIAlyZXR1cm4gMTsKIH0KKy8vIElmIHR5cGVBcmd1
bWVudEFubm90YXRpb25zIGNvbnRhaW4gYW55IHRoYXQgYXJlIGV2YWx1YXRlZCBieSB0aGUgY29t
cGlsZXIKKy8vIGNyZWF0ZS9yZXRyaWV2ZSBhIHBhcmFtZXRlcml6ZWQgdHlwZSBiaW5kaW5nCisv
LyBjYXB0dXJpbmcgdGhlIGVmZmVjdCBvZiB0aGVzZSBhbm5vdGF0aW9ucyBpbnRvIHRoZSByZXNv
bHZlZCB0eXBlIGJpbmRpbmcuCitwcm90ZWN0ZWQgVHlwZUJpbmRpbmcgY2FwdHVyZVR5cGVBbm5v
dGF0aW9ucyhTY29wZSBzY29wZSwgUmVmZXJlbmNlQmluZGluZyBlbmNsb3NpbmdUeXBlLCBUeXBl
QmluZGluZyBhcmdUeXBlLCBBbm5vdGF0aW9uW11bXSB0eXBlQXJndW1lbnRBbm5vdGF0aW9ucykg
eworCWlmICghc2NvcGUuY29tcGlsZXJPcHRpb25zKCkuaXNBbm5vdGF0aW9uQmFzZWROdWxsQW5h
bHlzaXNFbmFibGVkCisJCQl8fCB0eXBlQXJndW1lbnRBbm5vdGF0aW9ucyA9PSBudWxsIAorCQkJ
fHwgIShhcmdUeXBlIGluc3RhbmNlb2YgUmVmZXJlbmNlQmluZGluZykpCisJeworCQlyZXR1cm4g
YXJnVHlwZTsKKwl9CisgICAgaW50IGFubm90TGVuID0gdHlwZUFyZ3VtZW50QW5ub3RhdGlvbnMu
bGVuZ3RoOworICAgIGxvbmcgYW5ub3RhdGlvbkJpdHMgPSAwTDsKKyAgICBmb3IgKGludCBqID0g
MDsgaiA8IGFubm90TGVuOyBqKyspIHsKKyAgICAJQW5ub3RhdGlvbltdIHRtcEFubm90YXRpb25z
ID0gdHlwZUFyZ3VtZW50QW5ub3RhdGlvbnNbal07CisgICAgCS8vIEZJWE1FIChzdGVwaGFuKSBo
YW5kbGUgYm90aCBkaW1lbnNpb25zCisgICAgCWlmICh0bXBBbm5vdGF0aW9ucyAhPSBudWxsICYm
IHRtcEFubm90YXRpb25zLmxlbmd0aCA9PSAxICYmIHRtcEFubm90YXRpb25zWzBdIGluc3RhbmNl
b2YgTWFya2VyQW5ub3RhdGlvbikgeworCQkJc3dpdGNoICgoKE1hcmtlckFubm90YXRpb24pdG1w
QW5ub3RhdGlvbnNbMF0pLmdldENvbXBpbGVyQW5ub3RhdGlvbigpLmdldEFubm90YXRpb25UeXBl
KCkuaWQpIHsKKwkgICAgCQljYXNlIFR5cGVJZHMuVF9Db25maWd1cmVkQW5ub3RhdGlvbk5vbk51
bGwgOiAKKwkgICAgCQkJYW5ub3RhdGlvbkJpdHMgfD0gVGFnQml0cy5Bbm5vdGF0aW9uTm9uTnVs
bDsKKwkgICAgCQkJYnJlYWs7CisJICAgIAkJY2FzZSBUeXBlSWRzLlRfQ29uZmlndXJlZEFubm90
YXRpb25OdWxsYWJsZSA6IAorCSAgICAJCQlhbm5vdGF0aW9uQml0cyB8PSBUYWdCaXRzLkFubm90
YXRpb25OdWxsYWJsZTsKKwkgICAgCQkJYnJlYWs7CisJICAgIAkJZGVmYXVsdDogLy8gbm8gb3Ro
ZXIgYW5ub3RhdGlvbnMgYXJlIGN1cnJlbnRseSBoYW5kbGVkCisJICAgIAl9CisgICAgCX0gZWxz
ZSB7IC8qIFRPRE8gKHN0ZXBoYW4pOiBhbnl0aGluZyB0byBkbyBoZXJlPyAqLyB9CisJfQorCXJl
dHVybiBzY29wZS5lbnZpcm9ubWVudCgpLmNyZWF0ZVBhcmFtZXRlcml6ZWRUeXBlKChSZWZlcmVu
Y2VCaW5kaW5nKSBhcmdUeXBlLCBCaW5kaW5nLk5PX1RZUEVTLCBhbm5vdGF0aW9uQml0cywgZW5j
bG9zaW5nVHlwZSk7Cit9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0xvb2t1cEVudmly
b25tZW50LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0xvb2t1cEVudmlyb25tZW50LmphdmEKaW5kZXgg
MTZlYWJhMy4uNzYwNTEyOCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Mb29rdXBFbnZpcm9u
bWVudC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvTG9va3VwRW52aXJvbm1lbnQuamF2YQpAQCAt
NCw2ICs0LDEwIEBACiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRo
ZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMg
ZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CiAgKiBodHRwOi8vd3d3LmVjbGlwc2Uu
b3JnL2xlZ2FsL2VwbC12MTAuaHRtbAorICogCisgKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9u
IG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVyIHRoZSBKYXZh
CisgKiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFibGUgZm9yIHRl
c3RpbmcgYW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBjb2RlIGlzIG5vdCBj
b21wYXRpYmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KICAqCiAgKiBDb250
cmlidXRvcnM6CiAgKiAgICAgSUJNIENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxl
bWVudGF0aW9uCkBAIC0xMSw2ICsxNSw3IEBACiAgKiAgICAgCQkJCQkJCWJ1ZyAzMzc4NjggLSBb
Y29tcGlsZXJdW21vZGVsXSBpbmNvbXBsZXRlIHN1cHBvcnQgZm9yIHBhY2thZ2UtaW5mby5qYXZh
IHdoZW4gdXNpbmcgU2VhcmNoYWJsZUVudmlyb25tZW50CiAgKgkJCQkJCQkJYnVnIDE4NjM0MiAt
IFtjb21waWxlcl1bbnVsbF0gVXNpbmcgYW5ub3RhdGlvbnMgZm9yIG51bGwgY2hlY2tpbmcKICAq
CQkJCQkJCQlidWcgMzY1NTMxIC0gW2NvbXBpbGVyXVtudWxsXSBpbnZlc3RpZ2F0ZSBhbHRlcm5h
dGl2ZSBzdHJhdGVneSBmb3IgaW50ZXJuYWxseSBlbmNvZGluZyBudWxsbmVzcyBkZWZhdWx0cwor
ICoJCQkJCQkJCWJ1ZyAzOTIwOTkgLSBbMS44XVtjb21waWxlcl1bbnVsbF0gQXBwbHkgbnVsbCBh
bm5vdGF0aW9uIG9uIHR5cGVzIGZvciBudWxsIGFuYWx5c2lzCiAgKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKi8KIHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cDsK
IApAQCAtOTM3LDYgKzk0MiwxMCBAQAogfQogCiBwdWJsaWMgUGFyYW1ldGVyaXplZFR5cGVCaW5k
aW5nIGNyZWF0ZVBhcmFtZXRlcml6ZWRUeXBlKFJlZmVyZW5jZUJpbmRpbmcgZ2VuZXJpY1R5cGUs
IFR5cGVCaW5kaW5nW10gdHlwZUFyZ3VtZW50cywgUmVmZXJlbmNlQmluZGluZyBlbmNsb3NpbmdU
eXBlKSB7CisJcmV0dXJuIGNyZWF0ZVBhcmFtZXRlcml6ZWRUeXBlKGdlbmVyaWNUeXBlLCB0eXBl
QXJndW1lbnRzLCAwTCwgZW5jbG9zaW5nVHlwZSk7Cit9CisvKiBOb3RlOiBhbm5vdGF0aW9uQml0
cyBhcmUgZXhhY3RseSB0aG9zZSB0YWdCaXRzIGZyb20gYW5ub3RhdGlvbnMgb24gdHlwZSBwYXJh
bWV0ZXJzIHRoYXQgYXJlIGludGVycHJldGVkIGJ5IHRoZSBjb21waWxlciwgY3VycmVudGx5OiBu
dWxsIGFubm90YXRpb25zLiAqLworcHVibGljIFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZyBjcmVh
dGVQYXJhbWV0ZXJpemVkVHlwZShSZWZlcmVuY2VCaW5kaW5nIGdlbmVyaWNUeXBlLCBUeXBlQmlu
ZGluZ1tdIHR5cGVBcmd1bWVudHMsIGxvbmcgYW5ub3RhdGlvbkJpdHMsIFJlZmVyZW5jZUJpbmRp
bmcgZW5jbG9zaW5nVHlwZSkgewogCS8vIGNhY2hlZCBpbmZvIGlzIGFycmF5IG9mIGFscmVhZHkg
Y3JlYXRlZCBwYXJhbWV0ZXJpemVkIHR5cGVzIGZvciB0aGlzIHR5cGUKIAlQYXJhbWV0ZXJpemVk
VHlwZUJpbmRpbmdbXSBjYWNoZWRJbmZvID0gKFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZ1tdKXRo
aXMudW5pcXVlUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5ncy5nZXQoZ2VuZXJpY1R5cGUpOwogCWlu
dCBhcmdMZW5ndGggPSB0eXBlQXJndW1lbnRzID09IG51bGwgPyAwOiB0eXBlQXJndW1lbnRzLmxl
bmd0aDsKQEAgLTk1MCw2ICs5NTksNyBAQAogCQkJICAgIGlmIChjYWNoZWRUeXBlID09IG51bGwp
IGJyZWFrIG5leHRDYWNoZWRUeXBlOwogCQkJICAgIGlmIChjYWNoZWRUeXBlLmFjdHVhbFR5cGUo
KSAhPSBnZW5lcmljVHlwZSkgY29udGludWUgbmV4dENhY2hlZFR5cGU7IC8vIHJlbWFpbiBvZiB1
bnJlc29sdmVkIHR5cGUKIAkJCSAgICBpZiAoY2FjaGVkVHlwZS5lbmNsb3NpbmdUeXBlKCkgIT0g
ZW5jbG9zaW5nVHlwZSkgY29udGludWUgbmV4dENhY2hlZFR5cGU7CisJCQkgICAgaWYgKGFubm90
YXRpb25CaXRzICE9IDAgJiYgKChjYWNoZWRUeXBlLnRhZ0JpdHMgJiBhbm5vdGF0aW9uQml0cykg
IT0gYW5ub3RhdGlvbkJpdHMpKSBjb250aW51ZSBuZXh0Q2FjaGVkVHlwZTsKIAkJCQlUeXBlQmlu
ZGluZ1tdIGNhY2hlZEFyZ3VtZW50cyA9IGNhY2hlZFR5cGUuYXJndW1lbnRzOwogCQkJCWludCBj
YWNoZWRBcmdMZW5ndGggPSBjYWNoZWRBcmd1bWVudHMgPT0gbnVsbCA/IDAgOiBjYWNoZWRBcmd1
bWVudHMubGVuZ3RoOwogCQkJCWlmIChhcmdMZW5ndGggIT0gY2FjaGVkQXJnTGVuZ3RoKSBjb250
aW51ZSBuZXh0Q2FjaGVkVHlwZTsgLy8gd291bGQgYmUgYW4gZXJyb3Igc2l0dWF0aW9uIChmcm9t
IHVucmVzb2x2ZWQgYmluYXJpZXMpCkBAIC05NzIsNiArOTgyLDcgQEAKIAl9CiAJLy8gYWRkIG5l
dyBiaW5kaW5nCiAJUGFyYW1ldGVyaXplZFR5cGVCaW5kaW5nIHBhcmFtZXRlcml6ZWRUeXBlID0g
bmV3IFBhcmFtZXRlcml6ZWRUeXBlQmluZGluZyhnZW5lcmljVHlwZSx0eXBlQXJndW1lbnRzLCBl
bmNsb3NpbmdUeXBlLCB0aGlzKTsKKwlwYXJhbWV0ZXJpemVkVHlwZS50YWdCaXRzIHw9IGFubm90
YXRpb25CaXRzOwogCWNhY2hlZEluZm9baW5kZXhdID0gcGFyYW1ldGVyaXplZFR5cGU7CiAJcmV0
dXJuIHBhcmFtZXRlcml6ZWRUeXBlOwogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9QYXJh
bWV0ZXJpemVkTWV0aG9kQmluZGluZy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9QYXJhbWV0ZXJpemVk
TWV0aG9kQmluZGluZy5qYXZhCmluZGV4IGM3ZjhhZDMuLmFlOGQ4Y2IgMTAwNjQ0Ci0tLSBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9sb29rdXAvUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbmcuamF2YQorKysgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
bG9va3VwL1BhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW5nLmphdmEKQEAgLTQsMTAgKzQsMTYgQEAK
ICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVi
bGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24s
IGFuZCBpcyBhdmFpbGFibGUgYXQKICAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBs
LXYxMC5odG1sCisgKiAKKyAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHkt
ZHJhZnQgc3BlY2lmaWNhdGlvbiBkZXZlbG9wZWQgdW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0
eSBQcm9jZXNzIChKQ1ApIGFuZCBpcyBtYWRlIGF2YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZh
bHVhdGlvbiBwdXJwb3NlcworICogb25seS4gVGhlIGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0
aCBhbnkgc3BlY2lmaWNhdGlvbiBvZiB0aGUgSkNQLgogICoKICAqIENvbnRyaWJ1dG9yczoKICAq
ICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24KLSAq
ICAgICBTdGVwaGFuIEhlcnJtYW5uIC0gQ29udHJpYnV0aW9uIGZvciBidWcgMTg2MzQyIC0gW2Nv
bXBpbGVyXVtudWxsXSBVc2luZyBhbm5vdGF0aW9ucyBmb3IgbnVsbCBjaGVja2luZworICogICAg
IFN0ZXBoYW4gSGVycm1hbm4gLSBDb250cmlidXRpb25zIGZvcgorICoJCQkJCQkJCWJ1ZyAxODYz
NDIgLSBbY29tcGlsZXJdW251bGxdIFVzaW5nIGFubm90YXRpb25zIGZvciBudWxsIGNoZWNraW5n
CisgKgkJCQkJCQkJYnVnIDM5MjA5OSAtIFsxLjhdW2NvbXBpbGVyXVtudWxsXSBBcHBseSBudWxs
IGFubm90YXRpb24gb24gdHlwZXMgZm9yIG51bGwgYW5hbHlzaXMKICAqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqLwogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3Vw
OwogCkBAIC0xMTIsNiArMTE4LDI0IEBACiAJCQl0aGlzLnRocm93bkV4Y2VwdGlvbnMgPSBTY29w
ZS5zdWJzdGl0dXRlKHN1YnN0aXR1dGlvbiwgdGhpcy50aHJvd25FeGNlcHRpb25zKTsKIAkJCS8v
IGVycm9yIGNhc2Ugd2hlcmUgZXhjZXB0aW9uIHR5cGUgdmFyaWFibGUgd291bGQgaGF2ZSBiZWVu
IHN1YnN0aXR1dGVkIGJ5IGEgbm9uLXJlZmVyZW5jZSB0eXBlICgyMDc1NzMpCiAJCQlpZiAodGhp
cy50aHJvd25FeGNlcHRpb25zID09IG51bGwpIHRoaXMudGhyb3duRXhjZXB0aW9ucyA9IEJpbmRp
bmcuTk9fRVhDRVBUSU9OUzsKKworCQkJLy8gYWZ0ZXIgc3Vic3RpdHV0aW9uIHRyYW5zZmVyIG51
bGxuZXNzIGluZm9ybWF0aW9uIGZyb20gdHlwZSBhbm5vdGF0aW9uczoKKwkJCWlmIChwYXJhbWV0
ZXJpemVkRGVjbGFyaW5nQ2xhc3MuZW52aXJvbm1lbnQuZ2xvYmFsT3B0aW9ucy5pc0Fubm90YXRp
b25CYXNlZE51bGxBbmFseXNpc0VuYWJsZWQpIHsKKwkJCQlsb25nIHJldHVybk51bGxCaXRzID0g
dGhpcy5yZXR1cm5UeXBlLnRhZ0JpdHMgJiBUYWdCaXRzLkFubm90YXRpb25OdWxsTUFTSzsKKwkJ
CQlpZiAocmV0dXJuTnVsbEJpdHMgIT0gMEwpIHsKKwkJCQkJdGhpcy50YWdCaXRzICY9IH5UYWdC
aXRzLkFubm90YXRpb25OdWxsTUFTSzsKKwkJCQkJdGhpcy50YWdCaXRzIHw9IHJldHVybk51bGxC
aXRzOworCQkJCX0KKwkJCQlpbnQgcGFyYW1ldGVyc0xlbiA9IHRoaXMucGFyYW1ldGVycy5sZW5n
dGg7CisJCQkJZm9yIChpbnQgaT0wOyBpPHBhcmFtZXRlcnNMZW47IGkrKykgeworCQkJCQlsb25n
IHBhcmFtVGFnQml0cyA9IHRoaXMucGFyYW1ldGVyc1tpXS50YWdCaXRzICYgVGFnQml0cy5Bbm5v
dGF0aW9uTnVsbE1BU0s7CisJCQkJCWlmIChwYXJhbVRhZ0JpdHMgIT0gMCkgeworCQkJCQkJaWYg
KHRoaXMucGFyYW1ldGVyTm9uTnVsbG5lc3MgPT0gbnVsbCkKKwkJCQkJCQl0aGlzLnBhcmFtZXRl
ck5vbk51bGxuZXNzID0gbmV3IEJvb2xlYW5bcGFyYW1ldGVyc0xlbl07CisJCQkJCQl0aGlzLnBh
cmFtZXRlck5vbk51bGxuZXNzW2ldID0gQm9vbGVhbi52YWx1ZU9mKHBhcmFtVGFnQml0cyA9PSBU
YWdCaXRzLkFubm90YXRpb25Ob25OdWxsKTsKKwkJCQkJfQorCQkJCX0KKwkJCX0KIAkJfQogCQlj
aGVja01pc3NpbmdUeXBlOiB7CiAJCQlpZiAoKHRoaXMudGFnQml0cyAmIFRhZ0JpdHMuSGFzTWlz
c2luZ1R5cGUpICE9IDApCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1BhcmFtZXRlcml6ZWRU
eXBlQmluZGluZy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9QYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcu
amF2YQppbmRleCAxZWNmN2FhLi4xMTBhYjhmIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Bh
cmFtZXRlcml6ZWRUeXBlQmluZGluZy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUGFyYW1ldGVy
aXplZFR5cGVCaW5kaW5nLmphdmEKQEAgLTQsMTAgKzQsMTYgQEAKICAqIGFyZSBtYWRlIGF2YWls
YWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAog
ICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUg
YXQKICAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCisgKiAKKyAq
IFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQgc3BlY2lmaWNhdGlv
biBkZXZlbG9wZWQgdW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0eSBQcm9jZXNzIChKQ1ApIGFu
ZCBpcyBtYWRlIGF2YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiBwdXJwb3Nlcwor
ICogb25seS4gVGhlIGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkgc3BlY2lmaWNhdGlv
biBvZiB0aGUgSkNQLgogICoKICAqIENvbnRyaWJ1dG9yczoKICAqICAgICBJQk0gQ29ycG9yYXRp
b24gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24KLSAqICAgICBTdGVwaGFuIEhlcnJt
YW5uIC0gQ29udHJpYnV0aW9uIGZvciBidWcgMzQ5MzI2IC0gWzEuN10gbmV3IHdhcm5pbmcgZm9y
IG1pc3NpbmcgdHJ5LXdpdGgtcmVzb3VyY2VzCisgKiAgICAgU3RlcGhhbiBIZXJybWFubiAtIENv
bnRyaWJ1dGlvbnMgZm9yCisgKgkJCQkJCQkJYnVnIDM0OTMyNiAtIFsxLjddIG5ldyB3YXJuaW5n
IGZvciBtaXNzaW5nIHRyeS13aXRoLXJlc291cmNlcworICoJCQkJCQkJCWJ1ZyAzOTIwOTkgLSBb
MS44XVtjb21waWxlcl1bbnVsbF0gQXBwbHkgbnVsbCBhbm5vdGF0aW9uIG9uIHR5cGVzIGZvciBu
dWxsIGFuYWx5c2lzCiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KIHBhY2thZ2Ugb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cDsKIApAQCAtMzE3LDEyICszMjMsMjIgQEAK
IAkgKi8KIAlwdWJsaWMgU3RyaW5nIGRlYnVnTmFtZSgpIHsKIAkgICAgU3RyaW5nQnVmZmVyIG5h
bWVCdWZmZXIgPSBuZXcgU3RyaW5nQnVmZmVyKDEwKTsKKwkgICAgaWYgKHRoaXMuZW52aXJvbm1l
bnQuZ2xvYmFsT3B0aW9ucy5pc0Fubm90YXRpb25CYXNlZE51bGxBbmFseXNpc0VuYWJsZWQpIHsK
KwkgICAgCS8vIHJlc3RvcmUgYXBwbGllZCBudWxsIGFubm90YXRpb24gZnJvbSB0YWdCaXRzOgor
CQkgICAgaWYgKCh0aGlzLnRhZ0JpdHMgJiBUYWdCaXRzLkFubm90YXRpb25Ob25OdWxsKSAhPSAw
KSB7CisJCSAgICAJY2hhcltdW10gbm9uTnVsbEFubm90YXRpb25OYW1lID0gZW52aXJvbm1lbnQo
KS5nZXROb25OdWxsQW5ub3RhdGlvbk5hbWUoKTsKKwkJCQluYW1lQnVmZmVyLmFwcGVuZCgnQCcp
LmFwcGVuZChub25OdWxsQW5ub3RhdGlvbk5hbWVbbm9uTnVsbEFubm90YXRpb25OYW1lLmxlbmd0
aC0xXSkuYXBwZW5kKCcgJyk7CisJCSAgICB9IGVsc2UgaWYgKCh0aGlzLnRhZ0JpdHMgJiBUYWdC
aXRzLkFubm90YXRpb25OdWxsYWJsZSkgIT0gMCkgeworCQkgICAgCWNoYXJbXVtdIG51bGxhYmxl
QW5ub3RhdGlvbk5hbWUgPSBlbnZpcm9ubWVudCgpLmdldE51bGxhYmxlQW5ub3RhdGlvbk5hbWUo
KTsKKwkJCQluYW1lQnVmZmVyLmFwcGVuZCgnQCcpLmFwcGVuZChudWxsYWJsZUFubm90YXRpb25O
YW1lW251bGxhYmxlQW5ub3RhdGlvbk5hbWUubGVuZ3RoLTFdKS5hcHBlbmQoJyAnKTsKKwkJICAg
IH0KKwkgICAgfQogCSAgICBpZiAodGhpcy50eXBlIGluc3RhbmNlb2YgVW5yZXNvbHZlZFJlZmVy
ZW5jZUJpbmRpbmcpIHsKIAkgICAgCW5hbWVCdWZmZXIuYXBwZW5kKHRoaXMudHlwZSk7CiAJICAg
IH0gZWxzZSB7CiAJCQluYW1lQnVmZmVyLmFwcGVuZCh0aGlzLnR5cGUuc291cmNlTmFtZSgpKTsK
IAkgICAgfQotCQlpZiAodGhpcy5hcmd1bWVudHMgIT0gbnVsbCkgeworCQlpZiAodGhpcy5hcmd1
bWVudHMgIT0gbnVsbCAmJiB0aGlzLmFyZ3VtZW50cy5sZW5ndGggPiAwKSB7IC8vIGVtcHR5IGFy
Z3VtZW50cyBhcnJheSBoYXBwZW5zIHdoZW4gUFRCIGhhcyBiZWVuIGNyZWF0ZWQganVzdCB0byBj
YXB0dXJlIHR5cGUgYW5ub3RhdGlvbnMKIAkJCW5hbWVCdWZmZXIuYXBwZW5kKCc8Jyk7CiAJCSAg
ICBmb3IgKGludCBpID0gMCwgbGVuZ3RoID0gdGhpcy5hcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVu
Z3RoOyBpKyspIHsKIAkJICAgICAgICBpZiAoaSA+IDApIG5hbWVCdWZmZXIuYXBwZW5kKCcsJyk7
CkBAIC04NDcsNyArODYzLDcgQEAKIAkJfSBlbHNlIHsKIAkJCW5hbWVCdWZmZXIuYXBwZW5kKENo
YXJPcGVyYXRpb24uY29uY2F0V2l0aCh0aGlzLnR5cGUuY29tcG91bmROYW1lLCAnLicpKTsKIAkJ
fQotCQlpZiAodGhpcy5hcmd1bWVudHMgIT0gbnVsbCkgeworCQlpZiAodGhpcy5hcmd1bWVudHMg
IT0gbnVsbCAmJiB0aGlzLmFyZ3VtZW50cy5sZW5ndGggPiAwKSB7IC8vIGVtcHR5IGFyZ3VtZW50
cyBhcnJheSBoYXBwZW5zIHdoZW4gUFRCIGhhcyBiZWVuIGNyZWF0ZWQganVzdCB0byBjYXB0dXJl
IHR5cGUgYW5ub3RhdGlvbnMKIAkJCW5hbWVCdWZmZXIuYXBwZW5kKCc8Jyk7CiAJCSAgICBmb3Ig
KGludCBpID0gMCwgbGVuZ3RoID0gdGhpcy5hcmd1bWVudHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBp
KyspIHsKIAkJICAgICAgICBpZiAoaSA+IDApIG5hbWVCdWZmZXIuYXBwZW5kKCcsJyk7CkBAIC05
MTgsNyArOTM0LDcgQEAKIAkJfSBlbHNlIHsKIAkJCW5hbWVCdWZmZXIuYXBwZW5kKHRoaXMudHlw
ZS5zb3VyY2VOYW1lKTsKIAkJfQotCQlpZiAodGhpcy5hcmd1bWVudHMgIT0gbnVsbCkgeworCQlp
ZiAodGhpcy5hcmd1bWVudHMgIT0gbnVsbCAmJiB0aGlzLmFyZ3VtZW50cy5sZW5ndGggPiAwKSB7
IC8vIGVtcHR5IGFyZ3VtZW50cyBhcnJheSBoYXBwZW5zIHdoZW4gUFRCIGhhcyBiZWVuIGNyZWF0
ZWQganVzdCB0byBjYXB0dXJlIHR5cGUgYW5ub3RhdGlvbnMKIAkJCW5hbWVCdWZmZXIuYXBwZW5k
KCc8Jyk7CiAJCSAgICBmb3IgKGludCBpID0gMCwgbGVuZ3RoID0gdGhpcy5hcmd1bWVudHMubGVu
Z3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKIAkJICAgICAgICBpZiAoaSA+IDApIG5hbWVCdWZmZXIu
YXBwZW5kKCcsJyk7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1RhZ0JpdHMuamF2YSBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9sb29rdXAvVGFnQml0cy5qYXZhCmluZGV4IDZmNTk0MjIuLmFhMGQ0MjIgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9sb29rdXAvVGFnQml0cy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvVGFnQml0
cy5qYXZhCkBAIC0xMSw3ICsxMSw5IEBACiAgKiAKICAqIENvbnRyaWJ1dG9yczoKICAqICAgICBJ
Qk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24KLSAqICAgICBT
dGVwaGFuIEhlcnJtYW5uIC0gQ29udHJpYnV0aW9uIGZvciBidWcgMTg2MzQyIC0gW2NvbXBpbGVy
XVtudWxsXSBVc2luZyBhbm5vdGF0aW9ucyBmb3IgbnVsbCBjaGVja2luZworICogICAgIFN0ZXBo
YW4gSGVycm1hbm4gLSBDb250cmlidXRpb25zIGZvcgorICoJCQkJCQkJCWJ1ZyAxODYzNDIgLSBb
Y29tcGlsZXJdW251bGxdIFVzaW5nIGFubm90YXRpb25zIGZvciBudWxsIGNoZWNraW5nCisgKgkJ
CQkJCQkJYnVnIDM5MjA5OSAtIFsxLjhdW2NvbXBpbGVyXVtudWxsXSBBcHBseSBudWxsIGFubm90
YXRpb24gb24gdHlwZXMgZm9yIG51bGwgYW5hbHlzaXMKICAqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
LwogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwOwogCkBA
IC0xNTgsNiArMTYwLDcgQEAKIAkJCQl8IEFubm90YXRpb25Ob25OdWxsCiAJCQkJfCBBbm5vdGF0
aW9uTm9uTnVsbEJ5RGVmYXVsdAogCQkJCXwgQW5ub3RhdGlvbk51bGxVbnNwZWNpZmllZEJ5RGVm
YXVsdDsKKwlsb25nIEFubm90YXRpb25OdWxsTUFTSyA9IEFubm90YXRpb25OdWxsYWJsZSB8IEFu
bm90YXRpb25Ob25OdWxsOwogCiAJbG9uZyBEZWZhdWx0VmFsdWVSZXNvbHZlZCA9IEFTVE5vZGUu
Qml0NjBMOwog
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>234400</attachid>
            <date>2013-08-14 06:13:00 -0400</date>
            <delta_ts>2013-08-14 06:13:41 -0400</delta_ts>
            <desc>Changes to NullAnnotationTests</desc>
            <filename>Bug_392099_test_changes.patch</filename>
            <type>text/plain</type>
            <size>54456</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxBbm5vdGF0aW9u
VGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbEFubm90YXRpb25U
ZXN0LmphdmEKaW5kZXggYzU4NWQ0OS4uNzMyODg5YyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Nv
bXBpbGVyL3JlZ3Jlc3Npb24vTnVsbEFubm90YXRpb25UZXN0LmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3Rz
L2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbEFubm90YXRpb25UZXN0LmphdmEKQEAgLTE3LDEwICsx
NywxMyBAQCBpbXBvcnQgamF2YS51dGlsLk1hcDsKIGltcG9ydCBqdW5pdC5mcmFtZXdvcmsuVGVz
dDsKIAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLkphdmFDb3JlOworaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5jbGFzc2ZtdC5DbGFzc0ZpbGVDb25zdGFudHM7
CiAKIC8vIHNlZSBidWcgMTg2MzQyIC0gW2NvbXBpbGVyXVtudWxsXSBVc2luZyBhbm5vdGF0aW9u
cyBmb3IgbnVsbCBjaGVja2luZwogcHVibGljIGNsYXNzIE51bGxBbm5vdGF0aW9uVGVzdCBleHRl
bmRzIEFic3RyYWN0TnVsbEFubm90YXRpb25UZXN0IHsKIAorcHJpdmF0ZSBTdHJpbmcgVEVTVF9K
QVJfU1VGRklYID0gIi5qYXIiOworCiBwdWJsaWMgTnVsbEFubm90YXRpb25UZXN0KFN0cmluZyBu
YW1lKSB7CiAJc3VwZXIobmFtZSk7CiB9CkBAIC0yOCw3ICszMSw3IEBAIHB1YmxpYyBOdWxsQW5u
b3RhdGlvblRlc3QoU3RyaW5nIG5hbWUpIHsKIC8vIFN0YXRpYyBpbml0aWFsaXplciB0byBzcGVj
aWZ5IHRlc3RzIHN1YnNldCB1c2luZyBURVNUU18qIHN0YXRpYyB2YXJpYWJsZXMKIC8vIEFsbCBz
cGVjaWZpZWQgdGVzdHMgd2hpY2ggZG8gbm90IGJlbG9uZyB0byB0aGUgY2xhc3MgYXJlIHNraXBw
ZWQuLi4KIHN0YXRpYyB7Ci0vLwkJVEVTVFNfTkFNRVMgPSBuZXcgU3RyaW5nW10geyAidGVzdF9u
dWxsYWJsZV9maWVsZF8xMGMiIH07CisvLwkJVEVTVFNfTkFNRVMgPSBuZXcgU3RyaW5nW10geyAi
dGVzdF9ub25udWxsX3Zhcl9pbl9jb25zdHJvbF9zdHJ1Y3R1cmVfMSIgfTsKIC8vCQlURVNUU19O
VU1CRVJTID0gbmV3IGludFtdIHsgNTYxIH07CiAvLwkJVEVTVFNfUkFOR0UgPSBuZXcgaW50W10g
eyAxLCAyMDQ5IH07CiB9CkBAIC00MSw2ICs0NCw3NCBAQCBwdWJsaWMgc3RhdGljIENsYXNzIHRl
c3RDbGFzcygpIHsKIAlyZXR1cm4gTnVsbEFubm90YXRpb25UZXN0LmNsYXNzOwogfQogCitTdHJp
bmcgbWlzbWF0Y2hfTm9uTnVsbF9OdWxsYWJsZShTdHJpbmcgdHlwZSkgeworCXJldHVybiAJKHRo
aXMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCkgCisJCQk/ICJO
dWxsIHR5cGUgbWlzbWF0Y2g6IHJlcXVpcmVkIFwnQE5vbk51bGwgIit0eXBlKyJcJyBidXQgdGhl
IHByb3ZpZGVkIHZhbHVlIGlzIHNwZWNpZmllZCBhcyBATnVsbGFibGVcbiIgCisJCQk6ICJOdWxs
IHR5cGUgbWlzbWF0Y2ggKHR5cGUgYW5ub3RhdGlvbnMpOiByZXF1aXJlZCAnQE5vbk51bGwgIit0
eXBlKyInIGJ1dCB0aGlzIGV4cHJlc3Npb24gaGFzIHR5cGUgJ0BOdWxsYWJsZSAiK3R5cGUrIidc
biI7Cit9CitTdHJpbmcgbnVsbFR5cGVTYWZldHkoKSB7CisJcmV0dXJuICh0aGlzLmNvbXBsaWFu
Y2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzgpCisJCQk/ICJOdWxsIHR5cGUgc2Fm
ZXR5OiAiCisJCQk6ICJOdWxsIHR5cGUgc2FmZXR5ICh0eXBlIGFubm90YXRpb25zKTogIjsKK30K
K1N0cmluZyBtaXNtYXRjaF9Ob25OdWxsX051bGwoU3RyaW5nIHR5cGUpIHsKKwlyZXR1cm4gCSh0
aGlzLmNvbXBsaWFuY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzgpIAorCQkJPyAi
TnVsbCB0eXBlIG1pc21hdGNoOiByZXF1aXJlZCBcJ0BOb25OdWxsICIrdHlwZSsiXCcgYnV0IHRo
ZSBwcm92aWRlZCB2YWx1ZSBpcyBudWxsXG4iIAorCQkJOiAiTnVsbCB0eXBlIG1pc21hdGNoOiBy
ZXF1aXJlZCBcJ0BOb25OdWxsICIrdHlwZSsiXCcgYnV0IHRoZSBwcm92aWRlZCB2YWx1ZSBpcyBu
dWxsXG4iOworfQorU3RyaW5nIHZhcmlhYmxlTWF5QmVOdWxsKFN0cmluZyB2YXIpIHsKKwlyZXR1
cm4gCSh0aGlzLmNvbXBsaWFuY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzgpIAor
CQkJPyAiUG90ZW50aWFsIG51bGwgcG9pbnRlciBhY2Nlc3M6IFRoZSB2YXJpYWJsZSAiK3Zhcisi
IG1heSBiZSBudWxsIGF0IHRoaXMgbG9jYXRpb25cbiIgCisJCQk6ICJQb3RlbnRpYWwgbnVsbCBw
b2ludGVyIGFjY2VzczogdGhpcyBleHByZXNzaW9uIGhhcyBhICdATnVsbGFibGUnIHR5cGVcbiI7
Cit9CitTdHJpbmcgcmVkdW5kYW50X2NoZWNrX25vbm51bGwoU3RyaW5nIGV4cHIsIFN0cmluZyB0
eXBlKSB7CisJcmV0dXJuIHRoaXMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRz
LkpESzFfOAorCQkJPyAiUmVkdW5kYW50IG51bGwgY2hlY2s6ICIrZXhwcisiIGlzIHNwZWNpZmll
ZCBhcyBATm9uTnVsbFxuIgorCQkJOiAiUmVkdW5kYW50IG51bGwgY2hlY2s6IGNvbXBhcmluZyAn
Iit0eXBlKyInIGFnYWluc3QgbnVsbFxuIjsKK30KK1N0cmluZyByZWR1bmRhbnRDaGVja19tZXRo
b2RfY2Fubm90X3JldHVybl9udWxsKFN0cmluZyBtZXRob2QsIFN0cmluZyB0eXBlKSB7CisJcmV0
dXJuIHRoaXMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOAorCQkJ
PyAiUmVkdW5kYW50IG51bGwgY2hlY2s6IFRoZSBtZXRob2QgIittZXRob2QrIiBjYW5ub3QgcmV0
dXJuIG51bGxcbiIKKwkJCTogIlJlZHVuZGFudCBudWxsIGNoZWNrOiBjb21wYXJpbmcgJ0BOb25O
dWxsICIrdHlwZSsiJyBhZ2FpbnN0IG51bGxcbiI7Cit9CitTdHJpbmcgY2hlY2tBbHdheXNGYWxz
ZV9tZXRob2RfY2Fubm90X3JldHVybl9udWxsKFN0cmluZyBtZXRob2QsIFN0cmluZyB0eXBlKSB7
CisJcmV0dXJuIHRoaXMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFf
OAorCQkJPyAiTnVsbCBjb21wYXJpc29uIGFsd2F5cyB5aWVsZHMgZmFsc2U6IFRoZSBtZXRob2Qg
IittZXRob2QrIiBjYW5ub3QgcmV0dXJuIG51bGxcbiIKKwkJCTogIlJlZHVuZGFudCBudWxsIGNo
ZWNrOiBjb21wYXJpbmcgJ0BOb25OdWxsICIrdHlwZSsiJyBhZ2FpbnN0IG51bGxcbiI7Cit9CitT
dHJpbmcgcmVkdW5kYW50X2NoZWNrX2Nhbm9ubHludWxsKFN0cmluZyBleHByLCBTdHJpbmcgdHlw
ZSkgeworCXJldHVybiB0aGlzLmNvbXBsaWFuY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5K
REsxXzgKKwkJCT8gIlJlZHVuZGFudCBudWxsIGNoZWNrOiAiK2V4cHIrIiBjYW4gb25seSBiZSBu
dWxsIGF0IHRoaXMgbG9jYXRpb25cbiIKKwkJCTogIlJlZHVuZGFudCBudWxsIGNoZWNrOiBjb21w
YXJpbmcgJ0BOb25OdWxsICIrdHlwZSsiJyBhZ2FpbnN0IG51bGxcbiI7Cit9CisKK1N0cmluZyBj
aGVja0Fsd2F5c0ZhbHNlX25vbm51bGwoU3RyaW5nIGV4cHIsIFN0cmluZyB0eXBlKSB7CisJcmV0
dXJuICh0aGlzLmNvbXBsaWFuY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzgpCisJ
CT8gIk51bGwgY29tcGFyaXNvbiBhbHdheXMgeWllbGRzIGZhbHNlOiAiK2V4cHIrIiBpcyBzcGVj
aWZpZWQgYXMgQE5vbk51bGxcbiIKKwkJOiAiUmVkdW5kYW50IG51bGwgY2hlY2s6IGNvbXBhcmlu
ZyAnQE5vbk51bGwgIit0eXBlKyInIGFnYWluc3QgbnVsbFxuIjsKK30KK1N0cmluZyBwb3ROUEVf
bnVsbGFibGUoU3RyaW5nIGV4cHIpIHsKKwlyZXR1cm4gKHRoaXMuY29tcGxpYW5jZUxldmVsIDwg
Q2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCkKKwkJPyAiUG90ZW50aWFsIG51bGwgcG9pbnRlciBh
Y2Nlc3M6ICIrZXhwcisiIGlzIHNwZWNpZmllZCBhcyBATnVsbGFibGVcbiIKKwkJOiAiUG90ZW50
aWFsIG51bGwgcG9pbnRlciBhY2Nlc3M6IHRoaXMgZXhwcmVzc2lvbiBoYXMgYSAnQE51bGxhYmxl
JyB0eXBlXG4iOworfQorU3RyaW5nIHBvdE5QRV9udWxsYWJsZV9tYXliZW51bGwoU3RyaW5nIGV4
cHIpIHsKKwlyZXR1cm4gKHRoaXMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRz
LkpESzFfOCkKKwkJPyAiUG90ZW50aWFsIG51bGwgcG9pbnRlciBhY2Nlc3M6ICIrZXhwcisiIG1h
eSBiZSBudWxsIGF0IHRoaXMgbG9jYXRpb25cbiIKKwkJOiAiUG90ZW50aWFsIG51bGwgcG9pbnRl
ciBhY2Nlc3M6IHRoaXMgZXhwcmVzc2lvbiBoYXMgYSAnQE51bGxhYmxlJyB0eXBlXG4iOworfQor
U3RyaW5nIG5vbk51bGxBcnJheU9mKFN0cmluZyBzdHJpbmcpIHsKKwlyZXR1cm4gKHRoaXMuY29t
cGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCkKKwkJCT8gIkBOb25OdWxs
IE9iamVjdFtdIgorCQkJOiAiT2JqZWN0IEBOb25OdWxsW10iOworfQorCitwcm90ZWN0ZWQgdm9p
ZCBzZXRVcCgpIHRocm93cyBFeGNlcHRpb24geworCXN1cGVyLnNldFVwKCk7CisJaWYgKHRoaXMu
Y29tcGxpYW5jZUxldmVsID49IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzgpCisJCXRoaXMuVEVT
VF9KQVJfU1VGRklYID0gIl8xLjguamFyIjsKK30KKwogLy8gYSBudWxsYWJsZSBhcmd1bWVudCBp
cyBkZXJlZmVyZW5jZWQgd2l0aG91dCBhIGNoZWNrCiBwdWJsaWMgdm9pZCB0ZXN0X251bGxhYmxl
X3BhcmFtdGVyXzAwMSgpIHsKIAlydW5OZWdhdGl2ZVRlc3QoCkBAIC01Niw3ICsxMjcsNyBAQCBw
dWJsaWMgdm9pZCB0ZXN0X251bGxhYmxlX3BhcmFtdGVyXzAwMSgpIHsKIAkJIjEuIEVSUk9SIGlu
IFguamF2YSAoYXQgbGluZSA0KVxuIiArCiAJCSIJU3lzdGVtLm91dC5wcmludChvLnRvU3RyaW5n
KCkpO1xuIiArCiAJCSIJICAgICAgICAgICAgICAgICBeXG4iICsKLQkJIlBvdGVudGlhbCBudWxs
IHBvaW50ZXIgYWNjZXNzOiBUaGUgdmFyaWFibGUgbyBtYXkgYmUgbnVsbCBhdCB0aGlzIGxvY2F0
aW9uXG4iICsKKwkJdmFyaWFibGVNYXlCZU51bGwoIm8iKSArCiAJCSItLS0tLS0tLS0tXG4iLAog
CQl0aGlzLkxJQlMsCiAJCXRydWUgLyogc2hvdWxkRmx1c2gqLyk7CkBAIC05OCw3ICsxNjksNyBA
QCBwdWJsaWMgdm9pZCB0ZXN0X25vbm51bGxfcGFyYW1ldGVyXzAwMSgpIHsKIAkJIjEuIEVSUk9S
IGluIFguamF2YSAoYXQgbGluZSA0KVxuIiArCiAJCSIJaWYgKG8gIT0gbnVsbClcbiIgKwogCQki
CSAgICBeXG4iICsKLQkJIlJlZHVuZGFudCBudWxsIGNoZWNrOiBUaGUgdmFyaWFibGUgbyBpcyBz
cGVjaWZpZWQgYXMgQE5vbk51bGxcbiIgKworCQlyZWR1bmRhbnRfY2hlY2tfbm9ubnVsbCgiVGhl
IHZhcmlhYmxlIG8iLCAiQE5vbk51bGwgT2JqZWN0IikgKwogCQkiLS0tLS0tLS0tLVxuIiwKIAkJ
dGhpcy5MSUJTLAogCQl0cnVlIC8qIHNob3VsZEZsdXNoKi8pOwpAQCAtMjA5LDcgKzI4MCw3IEBA
IHB1YmxpYyB2b2lkIHRlc3Rfbm9ubnVsbF9wYXJhbWV0ZXJfMDA1KCkgewogCQkiMS4gV0FSTklO
RyBpbiBYLmphdmEgKGF0IGxpbmUgMylcbiIgKwogCQkiCWwuc2V0T2JqZWN0KG8pO1xuIiArCiAJ
CSIJICAgICAgICAgICAgXlxuIiArCi0JCSJOdWxsIHR5cGUgc2FmZXR5OiBUaGUgZXhwcmVzc2lv
biBvZiB0eXBlIE9iamVjdCBuZWVkcyB1bmNoZWNrZWQgY29udmVyc2lvbiB0byBjb25mb3JtIHRv
IFwnQE5vbk51bGwgT2JqZWN0XCdcbiIgKworCQludWxsVHlwZVNhZmV0eSgpICsgIlRoZSBleHBy
ZXNzaW9uIG9mIHR5cGUgJ09iamVjdCcgbmVlZHMgdW5jaGVja2VkIGNvbnZlcnNpb24gdG8gY29u
Zm9ybSB0byBcJ0BOb25OdWxsIE9iamVjdFwnXG4iICsKIAkJIi0tLS0tLS0tLS1cbiIpOwogfQog
Ly8gYSB0ZXJuYXJ5IG5vbi1udWxsIGV4cHJlc3Npb24gaXMgcGFzc2VkIHRvIGEgbm9ubnVsbCBw
YXJhbWV0ZXIKQEAgLTI1NCw3ICszMjUsNyBAQCBwdWJsaWMgdm9pZCB0ZXN0X25vbm51bGxfcGFy
YW1ldGVyXzAwNygpIHsKIAkJIjEuIEVSUk9SIGluIFhTdWIuamF2YSAoYXQgbGluZSA0KVxuIiAr
CiAJCSIJc3VwZXIoYik7XG4iICsKIAkJIgkgICAgICBeXG4iICsKLQkJIk51bGwgdHlwZSBtaXNt
YXRjaDogcmVxdWlyZWQgXCdATm9uTnVsbCBTdHJpbmdcJyBidXQgdGhlIHByb3ZpZGVkIHZhbHVl
IGlzIHNwZWNpZmllZCBhcyBATnVsbGFibGVcbiIgKworCQltaXNtYXRjaF9Ob25OdWxsX051bGxh
YmxlKCJTdHJpbmciKSArCiAJCSItLS0tLS0tLS0tXG4iKTsKIH0KIC8vIGEgbnVsbGFibGUgdmFs
dWUgaXMgcGFzc2VkIHRvIGEgbm9uLW51bGwgcGFyYW1ldGVyIGluIGFuIGFsbG9jYXRpb24gZXhw
cmVzc2lvbgpAQCAtMjc2LDcgKzM0Nyw3IEBAIHB1YmxpYyB2b2lkIHRlc3Rfbm9ubnVsbF9wYXJh
bWV0ZXJfMDA4KCkgewogCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDUpXG4iICsKIAkJ
IglyZXR1cm4gbmV3IFgoYik7XG4iICsKIAkJIgkgICAgICAgICAgICAgXlxuIiArCi0JCSJOdWxs
IHR5cGUgbWlzbWF0Y2g6IHJlcXVpcmVkIFwnQE5vbk51bGwgU3RyaW5nXCcgYnV0IHRoZSBwcm92
aWRlZCB2YWx1ZSBpcyBzcGVjaWZpZWQgYXMgQE51bGxhYmxlXG4iICsKKwkJbWlzbWF0Y2hfTm9u
TnVsbF9OdWxsYWJsZSgiU3RyaW5nIikgKwogCQkiLS0tLS0tLS0tLVxuIiAgLyogY29tcGlsZXIg
b3V0cHV0ICovKTsKIH0KIC8vIGEgbnVsbGFibGUgdmFsdWUgaXMgcGFzc2VkIHRvIGEgbm9uLW51
bGwgcGFyYW1ldGVyIGluIGEgcXVhbGlmaWVkIGFsbG9jYXRpb24gZXhwcmVzc2lvbgpAQCAtMzAw
LDcgKzM3MSw3IEBAIHB1YmxpYyB2b2lkIHRlc3Rfbm9ubnVsbF9wYXJhbWV0ZXJfMDA5KCkgewog
CQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDcpXG4iICsKIAkJIglyZXR1cm4gdGhpcy5u
ZXcgTG9jYWwoYik7XG4iICsKIAkJIgkgICAgICAgICAgICAgICAgICAgICAgXlxuIiArCi0JCSJO
dWxsIHR5cGUgbWlzbWF0Y2g6IHJlcXVpcmVkIFwnQE5vbk51bGwgU3RyaW5nXCcgYnV0IHRoZSBw
cm92aWRlZCB2YWx1ZSBpcyBzcGVjaWZpZWQgYXMgQE51bGxhYmxlXG4iICsKKwkJbWlzbWF0Y2hf
Tm9uTnVsbF9OdWxsYWJsZSgiU3RyaW5nIikgKwogCQkiLS0tLS0tLS0tLVxuIiAgLyogY29tcGls
ZXIgb3V0cHV0ICovKTsKIH0KIC8vIG51bGwgaXMgcGFzc2VkIHRvIGEgbm9uLW51bGwgcGFyYW1l
dGVyIGluIGEgcXVhbGlmaWVkIGFsbG9jYXRpb24gZXhwcmVzc2lvbiwgYWNyb3NzIENVcwpAQCAt
NDE3LDcgKzQ4OCw3IEBAIHB1YmxpYyB2b2lkIHRlc3Rfbm9ubnVsbF9wYXJhbWV0ZXJfMDEyKCkg
ewogCQkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDQpXG4iICsgCiAJCSIJQ29udGFpbmlu
Z0lubmVyMi5Jbm5lciBpbm5lciA9IGNvbnRhaW5lci5uZXcgSW5uZXIobnVsbCk7XG4iICsgCiAJ
CSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXl5e
XlxuIiArIAotCQkiTnVsbCB0eXBlIG1pc21hdGNoOiByZXF1aXJlZCBcJ0BOb25OdWxsIE9iamVj
dFwnIGJ1dCB0aGUgcHJvdmlkZWQgdmFsdWUgaXMgbnVsbFxuIiArIAorCQltaXNtYXRjaF9Ob25O
dWxsX051bGwoIk9iamVjdCIpICsKIAkJIi0tLS0tLS0tLS1cbiIgIC8qIGNvbXBpbGVyIG91dHB1
dCAqLyk7CiB9CiAvLyBhIG1ldGhvZCBvZiBhIGxvY2FsIGNsYXNzIGhhcyBhIG5vbi1udWxsIHBh
cmFtZXRlciwgY2xpZW50IHBhc3NlcyBudWxsCkBAIC00NTAsNyArNTIxLDkgQEAgcHVibGljIHZv
aWQgdGVzdF9ub25udWxsX3BhcmFtZXRlcl8wMTUoKSB7CiAJCQkiWC5qYXZhIiwKIAkJCSJpbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uKjtcbiIgKwogCQkJInB1YmxpYyBjbGFzcyBY
IHtcbiIgKwotCQkJIiAgICB2b2lkIGZvbyhATm9uTnVsbCBPYmplY3QgLi4uIG8pIHtcbiIgKwor
CQkJKCh0aGlzLmNvbXBsaWFuY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzgpCisJ
CQkgPyAiICAgIHZvaWQgZm9vKEBOb25OdWxsIE9iamVjdCAuLi4gbykge1xuIgorCQkJIDogIiAg
ICB2b2lkIGZvbyhPYmplY3QgQE5vbk51bGwuLi4gbykge1xuIikgKwogCQkJIiAgICAgICAgaWYg
KG8gIT0gbnVsbClcbiIgKwogCQkJIiAgICAgICAgICAgICAgU3lzdGVtLm91dC5wcmludChvLnRv
U3RyaW5nKCkpO1xuIiArCiAJCQkiICAgIH1cbiIgKwpAQCAtNDcyLDEyICs1NDUsMTIgQEAgcHVi
bGljIHZvaWQgdGVzdF9ub25udWxsX3BhcmFtZXRlcl8wMTUoKSB7CiAJCQkiMS4gRVJST1IgaW4g
WC5qYXZhIChhdCBsaW5lIDQpXG4iICsgCiAJCQkiCWlmIChvICE9IG51bGwpXG4iICsgCiAJCQki
CSAgICBeXG4iICsgCi0JCQkiUmVkdW5kYW50IG51bGwgY2hlY2s6IFRoZSB2YXJpYWJsZSBvIGlz
IHNwZWNpZmllZCBhcyBATm9uTnVsbFxuIiArIAorCQkJcmVkdW5kYW50X2NoZWNrX25vbm51bGwo
IlRoZSB2YXJpYWJsZSBvIiwgIk9iamVjdCBATm9uTnVsbFtdIikgKyAKIAkJCSItLS0tLS0tLS0t
XG4iICsgCiAJCQkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDE0KVxuIiArIAogCQkJIglm
b28ob2Jqcyk7XG4iICsgCiAJCQkiCSAgICBeXl5eXG4iICsgCi0JCQkiTnVsbCB0eXBlIG1pc21h
dGNoOiByZXF1aXJlZCBcJ0BOb25OdWxsIE9iamVjdFtdXCcgYnV0IHRoZSBwcm92aWRlZCB2YWx1
ZSBpcyBudWxsXG4iICsgCisJCQkiTnVsbCB0eXBlIG1pc21hdGNoOiByZXF1aXJlZCBcJyIrbm9u
TnVsbEFycmF5T2YoIk9iamVjdCIpKyJcJyBidXQgdGhlIHByb3ZpZGVkIHZhbHVlIGlzIG51bGxc
biIgKyAKIAkJCSItLS0tLS0tLS0tXG4iICsgCiAJCQkiMy4gV0FSTklORyBpbiBYLmphdmEgKGF0
IGxpbmUgMTgpXG4iICsgCiAJCQkiCWZvbzIoMiwgbnVsbCk7XG4iICsgCkBAIC00ODcsNyArNTYw
LDcgQEAgcHVibGljIHZvaWQgdGVzdF9ub25udWxsX3BhcmFtZXRlcl8wMTUoKSB7CiAJCQkiNC4g
RVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDE4KVxuIiArIAogCQkJIglmb28yKDIsIG51bGwpO1xu
IiArIAogCQkJIgkgICAgICAgIF5eXl5cbiIgKyAKLQkJCSJOdWxsIHR5cGUgbWlzbWF0Y2g6IHJl
cXVpcmVkIFwnQE5vbk51bGwgT2JqZWN0W11cJyBidXQgdGhlIHByb3ZpZGVkIHZhbHVlIGlzIG51
bGxcbiIgKyAKKwkJCSJOdWxsIHR5cGUgbWlzbWF0Y2g6IHJlcXVpcmVkIFwnIitub25OdWxsQXJy
YXlPZigiT2JqZWN0IikrIlwnIGJ1dCB0aGUgcHJvdmlkZWQgdmFsdWUgaXMgbnVsbFxuIiArIAog
CQkJIi0tLS0tLS0tLS1cbiIsCiAJCXRoaXMuTElCUywKIAkJdHJ1ZSAvKiBzaG91bGRGbHVzaCov
KTsKQEAgLTQ5OSwxNSArNTcyLDIxIEBAIHB1YmxpYyB2b2lkIHRlc3Rfbm9ubnVsbF9wYXJhbWV0
ZXJfMDE2KCkgewogCQkJIlguamF2YSIsCiAJCQkiaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5hbm5v
dGF0aW9uLio7XG4iICsKIAkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKLQkJCSIgICAgWChATm9u
TnVsbCBPYmplY3QgLi4uIG8pIHtcbiIgKworCQkJKCh0aGlzLmNvbXBsaWFuY2VMZXZlbCA8IENs
YXNzRmlsZUNvbnN0YW50cy5KREsxXzgpCisJCQkgPyAiICAgIFgoQE5vbk51bGwgT2JqZWN0IC4u
LiBvKSB7XG4iCisJCQkgOiAiICAgIFgoT2JqZWN0IEBOb25OdWxsLi4uIG8pIHtcbiIpICsKIAkJ
CSIgICAgICAgIGlmIChvICE9IG51bGwpXG4iICsKIAkJCSIgICAgICAgICAgICAgIFN5c3RlbS5v
dXQucHJpbnQoby50b1N0cmluZygpKTtcbiIgKwogCQkJIiAgICB9XG4iICsKIAkJCSIgICAgY2xh
c3MgWSBleHRlbmRzIFgge1xuIiArCi0JCQkiICAgICAgICBZKGludCBpLCBATm9uTnVsbCBPYmpl
Y3QgLi4uIG8pIHtcbiIgKworCQkJKCh0aGlzLmNvbXBsaWFuY2VMZXZlbCA8IENsYXNzRmlsZUNv
bnN0YW50cy5KREsxXzgpCisJCQkgPyAiICAgIFkoaW50IGksIEBOb25OdWxsIE9iamVjdCAuLi4g
bykge1xuIgorCQkJIDogIiAgICBZKGludCBpLCBPYmplY3QgQE5vbk51bGwuLi4gbykge1xuIikg
KwogCQkJIiAgICAgICAgCXN1cGVyKGksIChPYmplY3QpbnVsbCk7XG4iICsKIAkJCSIgICAgICAg
IH1cbiIgKwotCQkJIiAgICAgICAgWShjaGFyIGMsIEBOb25OdWxsIE9iamVjdCAuLi4gbykge1xu
IiArCisJCQkoKHRoaXMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFf
OCkKKwkJCSA/ICIgICAgWShjaGFyIGMsIEBOb25OdWxsIE9iamVjdCAuLi4gbykge1xuIgorCQkJ
IDogIiAgICBZKGNoYXIgYywgT2JqZWN0IEBOb25OdWxsLi4uIG8pIHtcbiIpICsKIAkJCSIgICAg
ICAgIAl0aGlzKDEsIG5ldyBPYmplY3QoKSwgbnVsbCk7XG4iICsKIAkJCSIgICAgICAgIH1cbiIg
KwogCQkJIiAgICB9XG4iICsKQEAgLTUyNCwxNyArNjAzLDE3IEBAIHB1YmxpYyB2b2lkIHRlc3Rf
bm9ubnVsbF9wYXJhbWV0ZXJfMDE2KCkgewogCQkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGlu
ZSA0KVxuIiArCiAJCQkiCWlmIChvICE9IG51bGwpXG4iICsKIAkJCSIJICAgIF5cbiIgKwotCQkJ
IlJlZHVuZGFudCBudWxsIGNoZWNrOiBUaGUgdmFyaWFibGUgbyBpcyBzcGVjaWZpZWQgYXMgQE5v
bk51bGxcbiIgKworCQkJcmVkdW5kYW50X2NoZWNrX25vbm51bGwoIlRoZSB2YXJpYWJsZSBvIiwg
Ik9iamVjdCBATm9uTnVsbFtdIikgKyAKIAkJCSItLS0tLS0tLS0tXG4iICsKIAkJCSIyLiBFUlJP
UiBpbiBYLmphdmEgKGF0IGxpbmUgMTYpXG4iICsKIAkJCSIJbmV3IFgoKE9iamVjdFtdKW51bGwp
O1xuIiArCiAJCQkiCSAgICAgIF5eXl5eXl5eXl5eXl5eXG4iICsKLQkJCSJOdWxsIHR5cGUgbWlz
bWF0Y2g6IHJlcXVpcmVkIFwnQE5vbk51bGwgT2JqZWN0W11cJyBidXQgdGhlIHByb3ZpZGVkIHZh
bHVlIGlzIG51bGxcbiIgKworCQkJIk51bGwgdHlwZSBtaXNtYXRjaDogcmVxdWlyZWQgXCciK25v
bk51bGxBcnJheU9mKCJPYmplY3QiKSsiXCcgYnV0IHRoZSBwcm92aWRlZCB2YWx1ZSBpcyBudWxs
XG4iICsKIAkJCSItLS0tLS0tLS0tXG4iICsKIAkJCSIzLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxp
bmUgMjEpXG4iICsKIAkJCSIJdGhpcy5uZXcgWSgyLCAoT2JqZWN0W10pbnVsbCk7XG4iICsKIAkJ
CSIJICAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXlxuIiArCi0JCQkiTnVsbCB0eXBlIG1pc21h
dGNoOiByZXF1aXJlZCBcJ0BOb25OdWxsIE9iamVjdFtdXCcgYnV0IHRoZSBwcm92aWRlZCB2YWx1
ZSBpcyBudWxsXG4iICsKKwkJCSJOdWxsIHR5cGUgbWlzbWF0Y2g6IHJlcXVpcmVkIFwnIitub25O
dWxsQXJyYXlPZigiT2JqZWN0IikrIlwnIGJ1dCB0aGUgcHJvdmlkZWQgdmFsdWUgaXMgbnVsbFxu
IiArCiAJCQkiLS0tLS0tLS0tLVxuIiwKIAkJdGhpcy5MSUJTLAogCQl0cnVlIC8qIHNob3VsZEZs
dXNoKi8pOwpAQCAtNjA4LDggKzY4Nyw4IEBAIHB1YmxpYyB2b2lkIHRlc3Rfbm9ubnVsbF9wYXJh
bWV0ZXJfMDE0KCkgewogCQkiLS0tLS0tLS0tLVxuIiArIAogCQkiMS4gRVJST1IgaW4gQi5qYXZh
IChhdCBsaW5lIDgpXG4iICsgCiAJCSIJbC5jYWxsTWUoZ2V0TnVsbCgpKTtcbiIgKyAKLQkJIgkg
ICAgICAgICBeXl5eXl5eXl5cbiIgKyAKLQkJIk51bGwgdHlwZSBtaXNtYXRjaDogcmVxdWlyZWQg
XCdATm9uTnVsbCBPYmplY3RcJyBidXQgdGhlIHByb3ZpZGVkIHZhbHVlIGlzIGluZmVycmVkIGFz
IEBOdWxsYWJsZVxuIiArIAorCQkiCSAgICAgICAgIF5eXl5eXl5eXlxuIiArCisJCW1pc21hdGNo
X05vbk51bGxfTnVsbGFibGUoIk9iamVjdCIpICsKIAkJIi0tLS0tLS0tLS1cbiIpOwogfQogLy8g
YXNzaWduaW5nIHBvdGVudGlhbCBudWxsIHRvIGEgbm9ubnVsbCBsb2NhbCB2YXJpYWJsZQpAQCAt
NjQwLDcgKzcxOSw3IEBAIHB1YmxpYyB2b2lkIHRlc3Rfbm9ubnVsbF9sb2NhbF8wMDEoKSB7CiAJ
CSIzLiBXQVJOSU5HIGluIFguamF2YSAoYXQgbGluZSA3KVxuIiArCiAJCSIJQE5vbk51bGwgT2Jq
ZWN0IG8zID0gcDtcbiIgKwogCQkiCSAgICAgICAgICAgICAgICAgICAgIF5cbiIgKwotCQkiTnVs
bCB0eXBlIHNhZmV0eTogVGhlIGV4cHJlc3Npb24gb2YgdHlwZSBPYmplY3QgbmVlZHMgdW5jaGVj
a2VkIGNvbnZlcnNpb24gdG8gY29uZm9ybSB0byBcJ0BOb25OdWxsIE9iamVjdFwnXG4iICsKKwkJ
bnVsbFR5cGVTYWZldHkoKSArICJUaGUgZXhwcmVzc2lvbiBvZiB0eXBlICdPYmplY3QnIG5lZWRz
IHVuY2hlY2tlZCBjb252ZXJzaW9uIHRvIGNvbmZvcm0gdG8gXCdATm9uTnVsbCBPYmplY3RcJ1xu
IiArCiAJCSItLS0tLS0tLS0tXG4iLAogCQl0aGlzLkxJQlMsCiAJCXRydWUgLyogc2hvdWxkRmx1
c2gqLyk7CkBAIC02NzcsNyArNzU2LDcgQEAgcHVibGljIHZvaWQgdGVzdF9ub25udWxsX2xvY2Fs
XzAwMigpIHsKIAkJIjMuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDEwKVxuIiArCiAJCSIJ
bzMgPSBwO1xuIiArCiAJCSIJICAgICBeXG4iICsKLQkJIk51bGwgdHlwZSBzYWZldHk6IFRoZSBl
eHByZXNzaW9uIG9mIHR5cGUgT2JqZWN0IG5lZWRzIHVuY2hlY2tlZCBjb252ZXJzaW9uIHRvIGNv
bmZvcm0gdG8gXCdATm9uTnVsbCBPYmplY3RcJ1xuIiArCisJCW51bGxUeXBlU2FmZXR5KCkgKyAi
VGhlIGV4cHJlc3Npb24gb2YgdHlwZSAnT2JqZWN0JyBuZWVkcyB1bmNoZWNrZWQgY29udmVyc2lv
biB0byBjb25mb3JtIHRvIFwnQE5vbk51bGwgT2JqZWN0XCdcbiIgKwogCQkiLS0tLS0tLS0tLVxu
IiwKIAkJdGhpcy5MSUJTLAogCQl0cnVlIC8qIHNob3VsZEZsdXNoKi8pOwpAQCAtNzUwLDcgKzgy
OSw3IEBAIHB1YmxpYyB2b2lkIHRlc3RfcGFyYW1ldGVyX3NwZWNpZmljYXRpb25faW5oZXJpdGFu
Y2VfMDAyKCkgewogCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDMpXG4iICsKIAkJIgl2
b2lkIGZvbyhPYmplY3Qgbykge1xuIiArCiAJCSIJICAgICAgICAgXl5eXl5eXG4iICsKLQkJIk1p
c3NpbmcgbnVsbGFibGUgYW5ub3RhdGlvbjogaW5oZXJpdGVkIG1ldGhvZCBmcm9tIExpYiBkZWNs
YXJlcyB0aGlzIHBhcmFtZXRlciBhcyBATnVsbGFibGVcbiIgKworCQkiTWlzc2luZyBudWxsYWJs
ZSBhbm5vdGF0aW9uOiBpbmhlcml0ZWQgbWV0aG9kIGZyb20gTGliIHNwZWNpZmllcyB0aGlzIHBh
cmFtZXRlciBhcyBATnVsbGFibGVcbiIgKwogCQkiLS0tLS0tLS0tLVxuIik7CiB9CiAvLyBhIG1l
dGhvZCByZWxheGVzIHRoZSBwYXJhbWV0ZXIgbnVsbCBzcGVjaWZpY2F0aW9uLCBzdXBlciBpbnRl
cmZhY2UgZGVjbGFyZXMgcGFyYW1ldGVyIG8gYXMgQE5vbk51bGwKQEAgLTk0OCwxOCArMTAyNywx
OCBAQCBwdWJsaWMgdm9pZCB0ZXN0X3BhcmFtZXRlcl9zcGVjaWZpY2F0aW9uX2luaGVyaXRhbmNl
XzAwOCgpIHsKIAkJIjEuIFdBUk5JTkcgaW4gWFN1Yi5qYXZhIChhdCBsaW5lIDMpXG4iICsgCiAJ
CSIJcHVibGljIHZvaWQgcHJpbnRPYmplY3QoT2JqZWN0IG8pIHsgc3VwZXIucHJpbnRPYmplY3Qo
byk7IH1cbiIgKyAKIAkJIgkgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5cbiIgKyAKLQkJ
Ik1pc3Npbmcgbm9uLW51bGwgYW5ub3RhdGlvbjogaW5oZXJpdGVkIG1ldGhvZCBmcm9tIFggZGVj
bGFyZXMgdGhpcyBwYXJhbWV0ZXIgYXMgQE5vbk51bGxcbiIgKyAKKwkJIk1pc3Npbmcgbm9uLW51
bGwgYW5ub3RhdGlvbjogaW5oZXJpdGVkIG1ldGhvZCBmcm9tIFggc3BlY2lmaWVzIHRoaXMgcGFy
YW1ldGVyIGFzIEBOb25OdWxsXG4iICsgCiAJCSItLS0tLS0tLS0tXG4iICsgCiAJCSIyLiBFUlJP
UiBpbiBYU3ViLmphdmEgKGF0IGxpbmUgMylcbiIgKwogCQkiCXB1YmxpYyB2b2lkIHByaW50T2Jq
ZWN0KE9iamVjdCBvKSB7IHN1cGVyLnByaW50T2JqZWN0KG8pOyB9XG4iICsKIAkJIgkgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXG4iICsKLQkJ
Ik51bGwgdHlwZSBzYWZldHk6IFRoZSBleHByZXNzaW9uIG9mIHR5cGUgT2JqZWN0IG5lZWRzIHVu
Y2hlY2tlZCBjb252ZXJzaW9uIHRvIGNvbmZvcm0gdG8gXCdATm9uTnVsbCBPYmplY3RcJ1xuIiAr
CisJCW51bGxUeXBlU2FmZXR5KCkgKyAiVGhlIGV4cHJlc3Npb24gb2YgdHlwZSAnT2JqZWN0JyBu
ZWVkcyB1bmNoZWNrZWQgY29udmVyc2lvbiB0byBjb25mb3JtIHRvIFwnQE5vbk51bGwgT2JqZWN0
XCdcbiIgKwogCQkiLS0tLS0tLS0tLVxuIiArCiAJCSItLS0tLS0tLS0tXG4iICsKIAkJIjEuIEVS
Uk9SIGluIE0uamF2YSAoYXQgbGluZSAzKVxuIiArCiAJCSIJeC5wcmludE9iamVjdChvKTtcbiIg
KwogCQkiCSAgICAgICAgICAgICAgXlxuIiArCi0JCSJOdWxsIHR5cGUgc2FmZXR5OiBUaGUgZXhw
cmVzc2lvbiBvZiB0eXBlIE9iamVjdCBuZWVkcyB1bmNoZWNrZWQgY29udmVyc2lvbiB0byBjb25m
b3JtIHRvIFwnQE5vbk51bGwgT2JqZWN0XCdcbiIgKworCQludWxsVHlwZVNhZmV0eSgpICsgIlRo
ZSBleHByZXNzaW9uIG9mIHR5cGUgJ09iamVjdCcgbmVlZHMgdW5jaGVja2VkIGNvbnZlcnNpb24g
dG8gY29uZm9ybSB0byBcJ0BOb25OdWxsIE9iamVjdFwnXG4iICsKIAkJIi0tLS0tLS0tLS1cbiIp
OwogfQogLy8gYSBzdGF0aWMgbWV0aG9kIGhhcyBhIG1vcmUgcmVsYXhlZCBudWxsIGNvbnRyYWN0
IHRoYW4gYSBsaWtlIG1ldGhvZCBpbiB0aGUgc3VwZXIgY2xhc3MsIGJ1dCBubyBvdmVycmlkaW5n
LgpAQCAtMTI0OSw3ICsxMzI4LDcgQEAgcHVibGljIHZvaWQgdGVzdF9wYXJhbWV0ZXJfc3BlY2lm
aWNhdGlvbl9pbmhlcml0YW5jZV8wMTYoKSB7CiAJCSIxLiBFUlJPUiBpbiBYU3ViLmphdmEgKGF0
IGxpbmUgMylcbiIgKwogCQkiCXB1YmxpYyB2b2lkIGZvbyhTdHJpbmcgcykgeyBpZiAocyAhPSBu
dWxsKSBzdXBlci5mb28ocyk7IH1cbiIgKwogCQkiCSAgICAgICAgICAgICAgICBeXl5eXl5cbiIg
KwotCQkiTWlzc2luZyBub24tbnVsbCBhbm5vdGF0aW9uOiBpbmhlcml0ZWQgbWV0aG9kIGZyb20g
WCBkZWNsYXJlcyB0aGlzIHBhcmFtZXRlciBhcyBATm9uTnVsbFxuIiArCisJCSJNaXNzaW5nIG5v
bi1udWxsIGFubm90YXRpb246IGluaGVyaXRlZCBtZXRob2QgZnJvbSBYIHNwZWNpZmllcyB0aGlz
IHBhcmFtZXRlciBhcyBATm9uTnVsbFxuIiArCiAJCSItLS0tLS0tLS0tXG4iKTsKIH0KIApAQCAt
MTI4MCw3ICsxMzU5LDcgQEAgcHVibGljIHZvaWQgdGVzdF9wYXJhbWV0ZXJfc3BlY2lmaWNhdGlv
bl9pbmhlcml0YW5jZV8wMTcoKSB7CiAJCSIxLiBXQVJOSU5HIGluIFhTdWIuamF2YSAoYXQgbGlu
ZSAxKVxuIiArIAogCQkiCXB1YmxpYyBjbGFzcyBYU3ViIGV4dGVuZHMgWCBpbXBsZW1lbnRzIElY
IHtcbiIgKyAKIAkJIgkgICAgICAgICAgICAgXl5eXlxuIiArIAotCQkiTWlzc2luZyBub24tbnVs
bCBhbm5vdGF0aW9uOiBpbmhlcml0ZWQgbWV0aG9kIGZyb20gSVggZGVjbGFyZXMgdGhpcyBwYXJh
bWV0ZXIgYXMgQE5vbk51bGxcbiIgKyAKKwkJIk1pc3Npbmcgbm9uLW51bGwgYW5ub3RhdGlvbjog
aW5oZXJpdGVkIG1ldGhvZCBmcm9tIElYIHNwZWNpZmllcyB0aGlzIHBhcmFtZXRlciBhcyBATm9u
TnVsbFxuIiArIAogCQkiLS0tLS0tLS0tLVxuIik7CiB9CiAKQEAgLTEzOTQsNyArMTQ3Myw3IEBA
IHB1YmxpYyB2b2lkIHRlc3Rfbm9ubnVsbF9yZXR1cm5fMDAxKCkgewogCQkiMS4gRVJST1IgaW4g
WC5qYXZhIChhdCBsaW5lIDQpXG4iICsKIAkJIglpZiAobyAhPSBudWxsKVxuIiArCiAJCSIJICAg
IF5cbiIgKwotCQkiUmVkdW5kYW50IG51bGwgY2hlY2s6IFRoZSB2YXJpYWJsZSBvIGNhbm5vdCBi
ZSBudWxsIGF0IHRoaXMgbG9jYXRpb25cbiIgKworCQkiUmVkdW5kYW50IG51bGwgY2hlY2s6IFRo
ZSB2YXJpYWJsZSBvIGNhbm5vdCBiZSBudWxsIGF0IHRoaXMgbG9jYXRpb25cbiIgKyAvLyBubyBp
bW1lZGlhdGUgdHlwZSBhbm5vdGF0aW9uCiAJCSItLS0tLS0tLS0tXG4iKTsKIH0KIC8vIGEgbm9u
LW51bGwgbWV0aG9kIHJldHVybnMgbnVsbApAQCAtMTQzNSw3ICsxNTE0LDcgQEAgcHVibGljIHZv
aWQgdGVzdF9ub25udWxsX3JldHVybl8wMDQoKSB7CiAJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0
IGxpbmUgNClcbiIgKwogCQkiCXJldHVybiBvO1xuIiArCiAJCSIJICAgICAgIF5cbiIgKwotCQki
TnVsbCB0eXBlIG1pc21hdGNoOiByZXF1aXJlZCBcJ0BOb25OdWxsIE9iamVjdFwnIGJ1dCB0aGUg
cHJvdmlkZWQgdmFsdWUgaXMgc3BlY2lmaWVkIGFzIEBOdWxsYWJsZVxuIiArCisJCW1pc21hdGNo
X05vbk51bGxfTnVsbGFibGUoIk9iamVjdCIpICsKIAkJIi0tLS0tLS0tLS1cbiIpOwogfQogLy8g
YSBub24tbnVsbCBtZXRob2QgcmV0dXJucyBpdHMgbm9uLW51bGwgYXJndW1lbnQKQEAgLTE0Njks
NyArMTU0OCw3IEBAIHB1YmxpYyB2b2lkIHRlc3Rfbm9ubnVsbF9yZXR1cm5fMDA2KCkgewogCQki
MS4gV0FSTklORyBpbiBYLmphdmEgKGF0IGxpbmUgNClcbiIgKwogCQkiCXJldHVybiBvO1xuIiAr
CiAJCSIJICAgICAgIF5cbiIgKwotCQkiTnVsbCB0eXBlIHNhZmV0eTogVGhlIGV4cHJlc3Npb24g
b2YgdHlwZSBPYmplY3QgbmVlZHMgdW5jaGVja2VkIGNvbnZlcnNpb24gdG8gY29uZm9ybSB0byBc
J0BOb25OdWxsIE9iamVjdFwnXG4iICsKKwkJbnVsbFR5cGVTYWZldHkoKSArICJUaGUgZXhwcmVz
c2lvbiBvZiB0eXBlICdPYmplY3QnIG5lZWRzIHVuY2hlY2tlZCBjb252ZXJzaW9uIHRvIGNvbmZv
cm0gdG8gXCdATm9uTnVsbCBPYmplY3RcJ1xuIiArCiAJCSItLS0tLS0tLS0tXG4iKTsKIH0KIC8v
IGEgcmVzdWx0IGZyb20gYSBudWxsYWJsZSBtZXRob2QgaXMgZGlyZWN0bHkgZGVyZWZlcmVuY2Vk
CkBAIC0xNTE3LDcgKzE1OTYsNyBAQCBwdWJsaWMgdm9pZCB0ZXN0X25vbm51bGxfcmV0dXJuXzAw
OCgpIHsKIAkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA3KVxuIiArCiAJCSIJaWYgKGdl
dE9iamVjdCgpID09IG51bGwpXG4iICsKIAkJIgkgICAgXl5eXl5eXl5eXl5cbiIgKwotCQkiTnVs
bCBjb21wYXJpc29uIGFsd2F5cyB5aWVsZHMgZmFsc2U6IFRoZSBtZXRob2QgZ2V0T2JqZWN0KCkg
Y2Fubm90IHJldHVybiBudWxsXG4iICsKKwkJY2hlY2tBbHdheXNGYWxzZV9tZXRob2RfY2Fubm90
X3JldHVybl9udWxsKCJnZXRPYmplY3QoKSIsICJPYmplY3QiKSArCiAJCSItLS0tLS0tLS0tXG4i
ICsgCiAJCSIyLiBXQVJOSU5HIGluIFguamF2YSAoYXQgbGluZSA4KVxuIiArIAogCQkiCXRocm93
IG5ldyBSdW50aW1lRXhjZXB0aW9uKCk7XG4iICsgCkBAIC0xNTU0LDcgKzE2MzMsNyBAQCBwdWJs
aWMgdm9pZCB0ZXN0X25vbm51bGxfcmV0dXJuXzAwOSgpIHsKIAkJIjIuIEVSUk9SIGluIFguamF2
YSAoYXQgbGluZSA4KVxuIiArCiAJCSIJaWYgKGxlZnQgIT0gZ2V0T2JqZWN0KCkpXG4iICsKIAkJ
IgkgICAgICAgICAgICBeXl5eXl5eXl5eXlxuIiArCi0JCSJSZWR1bmRhbnQgbnVsbCBjaGVjazog
VGhlIG1ldGhvZCBnZXRPYmplY3QoKSBjYW5ub3QgcmV0dXJuIG51bGxcbiIgKworCQlyZWR1bmRh
bnRDaGVja19tZXRob2RfY2Fubm90X3JldHVybl9udWxsKCJnZXRPYmplY3QoKSIsICJPYmplY3Qi
KSArCiAJCSItLS0tLS0tLS0tXG4iKTsKIH0KIC8vIGEgcmVzdWx0IGZyb20gYSBub25udWxsIG1l
dGhvZCBpcyBkaXJlY3RseSBjaGVja2VkIGZvciBudWxsIChmcm9tIGxvY2FsKTogbm90IHJlZHVu
ZGFudCBkdWUgdG8gbG9vcApAQCAtMTYxMSw3ICsxNjkwLDcgQEAgcHVibGljIHZvaWQgX3Rlc3Rf
bm9ubnVsbF9yZXR1cm5fMDA5YigpIHsKIAkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA5
KVxuIiArCiAJCSIJaWYgKGxlZnQgIT0gZ2V0T2JqZWN0KCkpXG4iICsKIAkJIgkgICAgXl5eXlxu
IiArCi0JCSJSZWR1bmRhbnQgbnVsbCBjaGVjazogVGhlIHZhcmlhYmxlIGxlZnQgY2FuIG9ubHkg
YmUgbnVsbCBhdCB0aGlzIGxvY2F0aW9uXG4iICsKKwkJcmVkdW5kYW50X2NoZWNrX2Nhbm9ubHlu
dWxsKCJUaGUgdmFyaWFibGUgbGVmdCIsICJPYmplY3QiKSArCiAJCSItLS0tLS0tLS0tXG4iICsK
IAkJIjIuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA5KVxuIiArCiAJCSIJaWYgKGxlZnQgIT0g
Z2V0T2JqZWN0KCkpXG4iICsKQEAgLTE2NzEsNyArMTc1MCw5IEBAIHB1YmxpYyB2b2lkIHRlc3Rf
bm9ubnVsbF9yZXR1cm5fMDExKCkgewogCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDUp
XG4iICsKIAkJIglpZiAoZHViaW91cyA9PSBudWxsKVxuIiArCiAJCSIJICAgIF5eXl5eXl5cbiIg
KwotCQkiTnVsbCBjb21wYXJpc29uIGFsd2F5cyB5aWVsZHMgZmFsc2U6IFRoZSB2YXJpYWJsZSBk
dWJpb3VzIGlzIHNwZWNpZmllZCBhcyBATm9uTnVsbFxuIiArCisJCSgodGhpcy5jb21wbGlhbmNl
TGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84KQorCQkJPyAiTnVsbCBjb21wYXJpc29u
IGFsd2F5cyB5aWVsZHMgZmFsc2U6IFRoZSB2YXJpYWJsZSBkdWJpb3VzIGlzIHNwZWNpZmllZCBh
cyBATm9uTnVsbFxuIgorCQkJOiAiUmVkdW5kYW50IG51bGwgY2hlY2s6IGNvbXBhcmluZyAnQE5v
bk51bGwgT2JqZWN0JyBhZ2FpbnN0IG51bGxcbiIgKSArCiAJCSItLS0tLS0tLS0tXG4iICsKIAkJ
IjIuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDYpXG4iICsKIAkJIglyZXR1cm4gZHViaW91
cztcbiIgKwpAQCAtMTg3Nyw3ICsxOTU4LDcgQEAgcHVibGljIHZvaWQgdGVzdF9hbm5vdGF0aW9u
X2ltcG9ydF8wMDUoKSB7CiAJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNClcbiIgKwog
CQkiCXJldHVybiBsLmdldE9iamVjdCgpO1xuIiArCiAJCSIJICAgICAgIF5eXl5eXl5eXl5eXl5c
biIgKwotCQkiTnVsbCB0eXBlIHNhZmV0eTogVGhlIGV4cHJlc3Npb24gb2YgdHlwZSBPYmplY3Qg
bmVlZHMgdW5jaGVja2VkIGNvbnZlcnNpb24gdG8gY29uZm9ybSB0byBcJ0BNdXN0Tm90QmVOdWxs
IE9iamVjdFwnXG4iICsKKwkJbnVsbFR5cGVTYWZldHkoKSArICJUaGUgZXhwcmVzc2lvbiBvZiB0
eXBlICdPYmplY3QnIG5lZWRzIHVuY2hlY2tlZCBjb252ZXJzaW9uIHRvIGNvbmZvcm0gdG8gXCdA
TXVzdE5vdEJlTnVsbCBPYmplY3RcJ1xuIiArCiAJCSItLS0tLS0tLS0tXG4iLAogCQlKYXZhY1Rl
c3RPcHRpb25zLkV4Y3VzZS5FY2xpcHNlV2FybmluZ0NvbmZpZ3VyZWRBc0Vycm9yKTsKIH0KQEAg
LTE5MzAsNyArMjAxMSw5IEBAIHB1YmxpYyB2b2lkIHRlc3RfaWxsZWdhbF9hbm5vdGF0aW9uXzAw
MSgpIHsKIAkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAyKVxuIiArCiAJCSIJQE5vbk51
bGwgcHVibGljIGNsYXNzIFgge1xuIiArCiAJCSIJXl5eXl5eXl5cbiIgKwotCQkiVGhlIGFubm90
YXRpb24gQE5vbk51bGwgaXMgZGlzYWxsb3dlZCBmb3IgdGhpcyBsb2NhdGlvblxuIiArCisJCSgo
dGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84KQorCQk/ICJU
aGUgYW5ub3RhdGlvbiBATm9uTnVsbCBpcyBkaXNhbGxvd2VkIGZvciB0aGlzIGxvY2F0aW9uXG4i
CisJCTogIlRoZSBudWxsbmVzcyBhbm5vdGF0aW9uICdOb25OdWxsJyBpcyBub3QgYXBwbGljYWJs
ZSBhdCB0aGlzIGxvY2F0aW9uXG4iKSArCiAJCSItLS0tLS0tLS0tXG4iLAogCQl0aGlzLkxJQlMs
CiAJCWZhbHNlLypzaG91bGRGbHVzaCovKTsKQEAgLTE5NzIsOCArMjA1NSwzMCBAQCBwdWJsaWMg
dm9pZCB0ZXN0X2lsbGVnYWxfYW5ub3RhdGlvbl8wMDMoKSB7CiAJCSItLS0tLS0tLS0tXG4iICsK
IAkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAzKVxuIiArCiAJCSIJQE5vbk51bGwgdm9p
ZCBmb28oKSB7fVxuIiArCi0JCSIJXl5eXl5eXl5eXl5eXlxuIiArCi0JCSJUaGUgbnVsbG5lc3Mg
YW5ub3RhdGlvbiBATm9uTnVsbCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIHByaW1pdGl2ZSB0
eXBlIHZvaWRcbiIgKworCQkiCV5eXl5eXl5eXG4iICsgCisJCSgodGhpcy5jb21wbGlhbmNlTGV2
ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84KQorCQkJPyAiVGhlIG51bGxuZXNzIGFubm90
YXRpb24gQE5vbk51bGwgaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBwcmltaXRpdmUgdHlwZSB2
b2lkXG4iCisJCQk6ICJUeXBlIGFubm90YXRpb24gaXMgaWxsZWdhbCBmb3IgYSBtZXRob2QgdGhh
dCByZXR1cm5zIHZvaWRcbiIpICsKKwkJIi0tLS0tLS0tLS1cbiIsCisJCXRoaXMuTElCUywKKwkJ
ZmFsc2UvKnNob3VsZEZsdXNoKi8pOworfQorCisvLyBhIG51bGwgYW5ub3RhdGlvbiBpcyBpbGxl
Z2FsbHkgdXNlZCBvbiBhbiBpbnQgbWV0aG9kOgorcHVibGljIHZvaWQgdGVzdF9pbGxlZ2FsX2Fu
bm90YXRpb25fMDAzYigpIHsKKwlydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJ
CQkiWC5qYXZhIiwKKwkJCSJpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uKjtcbiIg
KworCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJIglATm9uTnVsbCBpbnQgZm9vKCkgeyBy
ZXR1cm4gMTsgfVxuIiArCisJCQkifVxuIgorCQl9LAorCQkiLS0tLS0tLS0tLVxuIiArCisJCSIx
LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMylcbiIgKworCQkiCUBOb25OdWxsIGludCBmb28o
KSB7IHJldHVybiAxOyB9XG4iICsKKwkJIgleXl5eXl5eXlxuIiArIAorCQkiVGhlIG51bGxuZXNz
IGFubm90YXRpb24gQE5vbk51bGwgaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBwcmltaXRpdmUg
dHlwZSBpbnRcbiIgKwogCQkiLS0tLS0tLS0tLVxuIiwKIAkJdGhpcy5MSUJTLAogCQlmYWxzZS8q
c2hvdWxkRmx1c2gqLyk7CkBAIC0xOTkyLDcgKzIwOTcsNyBAQCBwdWJsaWMgdm9pZCB0ZXN0X2ls
bGVnYWxfYW5ub3RhdGlvbl8wMDQoKSB7CiAJCSItLS0tLS0tLS0tXG4iICsKIAkJIjEuIEVSUk9S
IGluIFguamF2YSAoYXQgbGluZSAzKVxuIiArCiAJCSIJdm9pZCBmb28oQE51bGxhYmxlIGludCBp
KSB7fVxuIiArCi0JCSIJICAgICAgICAgXl5eXl5eXl5eXl5eXlxuIiArCisJCSIJICAgICAgICAg
Xl5eXl5eXl5eXG4iICsKIAkJIlRoZSBudWxsbmVzcyBhbm5vdGF0aW9uIEBOdWxsYWJsZSBpcyBu
b3QgYXBwbGljYWJsZSBmb3IgdGhlIHByaW1pdGl2ZSB0eXBlIGludFxuIiArCiAJCSItLS0tLS0t
LS0tXG4iLAogCQl0aGlzLkxJQlMsCkBAIC0yMDE1LDcgKzIxMjAsNyBAQCBwdWJsaWMgdm9pZCB0
ZXN0X2lsbGVnYWxfYW5ub3RhdGlvbl8wMDUoKSB7CiAJCSItLS0tLS0tLS0tXG4iICsKIAkJIjEu
IEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA0KVxuIiArCiAJCSIJQE51bGxhYmxlIGludCBpID0g
MztcbiIgKwotCQkiCV5eXl5eXl5eXl5eXl5cbiIgKworCQkiCV5eXl5eXl5eXlxuIiArCiAJCSJU
aGUgbnVsbG5lc3MgYW5ub3RhdGlvbiBATnVsbGFibGUgaXMgbm90IGFwcGxpY2FibGUgZm9yIHRo
ZSBwcmltaXRpdmUgdHlwZSBpbnRcbiIgKwogCQkiLS0tLS0tLS0tLVxuIiwKIAkJdGhpcy5MSUJT
LApAQCAtMjA5MCw2ICsyMTk1LDI4IEBAIHB1YmxpYyB2b2lkIHRlc3RfaWxsZWdhbF9hbm5vdGF0
aW9uXzAwNygpIHsKIAkJIi0tLS0tLS0tLS1cbiIpOwogfQogCisvLyBhIG51bGwgYW5ub3RhdGlv
biBpcyBpbGxlZ2FsbHkgdXNlZCBvbiBhIGNvbnN0cnVjdG9yOgorcHVibGljIHZvaWQgdGVzdF9p
bGxlZ2FsX2Fubm90YXRpb25fMDA4KCkgeworCXJ1bk5lZ2F0aXZlVGVzdCgKKwkJbmV3IFN0cmlu
Z1tdIHsKKwkJCSJYLmphdmEiLAorCQkJImltcG9ydCBvcmcuZWNsaXBzZS5qZHQuYW5ub3RhdGlv
bi4qO1xuIiArCisJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkiCUBOb25OdWxsIFgoKSB7
fVxuIiArCisJCQkifVxuIgorCQl9LAorCQkiLS0tLS0tLS0tLVxuIiArCisJCSIxLiBFUlJPUiBp
biBYLmphdmEgKGF0IGxpbmUgMylcbiIgKworCQkiCUBOb25OdWxsIFgoKSB7fVxuIiArCisJCSIJ
Xl5eXl5eXl5cbiIgKworCQkoKHRoaXMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3Rh
bnRzLkpESzFfOCkKKwkJID8gIlRoZSBhbm5vdGF0aW9uIEBOb25OdWxsIGlzIGRpc2FsbG93ZWQg
Zm9yIHRoaXMgbG9jYXRpb25cbiIKKwkJIDogIlRoZSBudWxsbmVzcyBhbm5vdGF0aW9uICdOb25O
dWxsJyBpcyBub3QgYXBwbGljYWJsZSBhdCB0aGlzIGxvY2F0aW9uXG4iICkgKworCQkiLS0tLS0t
LS0tLVxuIiwKKwkJdGhpcy5MSUJTLAorCQlmYWxzZS8qc2hvdWxkRmx1c2gqLyk7Cit9CisKIHB1
YmxpYyB2b2lkIHRlc3RfZGVmYXVsdF9udWxsbmVzc18wMDIoKSB7CiAJTWFwIGN1c3RvbU9wdGlv
bnMgPSBnZXRDb21waWxlck9wdGlvbnMoKTsKIC8vCWN1c3RvbU9wdGlvbnMucHV0KENvbXBpbGVy
T3B0aW9ucy5PUFRJT05fUmVwb3J0UG90ZW50aWFsTnVsbFNwZWNWaW9sYXRpb24sIEphdmFDb3Jl
LkVSUk9SKTsKQEAgLTIxNzAsNyArMjI5Nyw3IEBAIHB1YmxpYyB2b2lkIHRlc3RfZGVmYXVsdF9u
dWxsbmVzc18wMDMoKSB7CiAJCSIyLiBFUlJPUiBpbiBwMlxcWS5qYXZhIChhdCBsaW5lIDYpXG4i
ICsKIAkJIgliYXIobyk7XG4iICsKIAkJIgkgICAgXlxuIiArCi0JCSJOdWxsIHR5cGUgbWlzbWF0
Y2g6IHJlcXVpcmVkIFwnQE5vbk51bGwgT2JqZWN0XCcgYnV0IHRoZSBwcm92aWRlZCB2YWx1ZSBp
cyBzcGVjaWZpZWQgYXMgQE51bGxhYmxlXG4iICsKKwkJbWlzbWF0Y2hfTm9uTnVsbF9OdWxsYWJs
ZSgiT2JqZWN0IikgKwogCQkiLS0tLS0tLS0tLVxuIik7CiB9CiAvLyBwYWNrYWdlIGxldmVsIGRl
ZmF1bHQgaXMgY29uc3VtZWQgZnJvbSBwYWNrYWdlLWluZm8uY2xhc3MsIHNpbWlsYXJseSBmb3Ig
dHlwZSBsZXZlbCBkZWZhdWx0CkBAIC0yMjIyLDEyICsyMzQ5LDEyIEBAIHB1YmxpYyB2b2lkIHRl
c3RfZGVmYXVsdF9udWxsbmVzc18wMDNhKCkgewogCQkiMi4gRVJST1IgaW4gcDJcXFkuamF2YSAo
YXQgbGluZSA2KVxuIiArCiAJCSIJYmFyKG8pO1xuIiArCiAJCSIJICAgIF5cbiIgKwotCQkiTnVs
bCB0eXBlIG1pc21hdGNoOiByZXF1aXJlZCBcJ0BOb25OdWxsIE9iamVjdFwnIGJ1dCB0aGUgcHJv
dmlkZWQgdmFsdWUgaXMgc3BlY2lmaWVkIGFzIEBOdWxsYWJsZVxuIiArCisJCW1pc21hdGNoX05v
bk51bGxfTnVsbGFibGUoIk9iamVjdCIpICsKIAkJIi0tLS0tLS0tLS1cbiIgKwogCQkiMy4gRVJS
T1IgaW4gcDJcXFkuamF2YSAoYXQgbGluZSA3KVxuIiArCiAJCSIJYWNjZXB0KG8pO1xuIiArCiAJ
CSIJICAgICAgIF5cbiIgKwotCQkiTnVsbCB0eXBlIG1pc21hdGNoOiByZXF1aXJlZCBcJ0BOb25O
dWxsIE9iamVjdFwnIGJ1dCB0aGUgcHJvdmlkZWQgdmFsdWUgaXMgc3BlY2lmaWVkIGFzIEBOdWxs
YWJsZVxuIiArCisJCW1pc21hdGNoX05vbk51bGxfTnVsbGFibGUoIk9iamVjdCIpICsKIAkJIi0t
LS0tLS0tLS1cbiIpOwogfQogLy8gc2FtZSBhcyB0ZXN0X2RlZmF1bHRfbnVsbG5lc3NfMDAzYSwg
YnV0IGRlZmF1bHQtaW5kdWNlZCBhbm5vdGF0aW9ucyBhcmUgY29tYmluZWQgd2l0aCBleHBsaWNp
dCBvbmVzIChub3QgbnVsbCByZWxhdGVkKQpAQCAtMjI4NSwxMiArMjQxMiwxMiBAQCBwdWJsaWMg
dm9pZCB0ZXN0X2RlZmF1bHRfbnVsbG5lc3NfMDAzYigpIHsKIAkJIjIuIEVSUk9SIGluIHAyXFxZ
LmphdmEgKGF0IGxpbmUgNilcbiIgKwogCQkiCWJhcihvKTtcbiIgKwogCQkiCSAgICBeXG4iICsK
LQkJIk51bGwgdHlwZSBtaXNtYXRjaDogcmVxdWlyZWQgXCdATm9uTnVsbCBPYmplY3RcJyBidXQg
dGhlIHByb3ZpZGVkIHZhbHVlIGlzIHNwZWNpZmllZCBhcyBATnVsbGFibGVcbiIgKworCQltaXNt
YXRjaF9Ob25OdWxsX051bGxhYmxlKCJPYmplY3QiKSArCiAJCSItLS0tLS0tLS0tXG4iICsKIAkJ
IjMuIEVSUk9SIGluIHAyXFxZLmphdmEgKGF0IGxpbmUgNylcbiIgKwogCQkiCWFjY2VwdChvKTtc
biIgKwogCQkiCSAgICAgICBeXG4iICsKLQkJIk51bGwgdHlwZSBtaXNtYXRjaDogcmVxdWlyZWQg
XCdATm9uTnVsbCBPYmplY3RcJyBidXQgdGhlIHByb3ZpZGVkIHZhbHVlIGlzIHNwZWNpZmllZCBh
cyBATnVsbGFibGVcbiIgKworCQltaXNtYXRjaF9Ob25OdWxsX051bGxhYmxlKCJPYmplY3QiKSAr
CiAJCSItLS0tLS0tLS0tXG4iKTsKIH0KIC8vIGRvbid0IGFwcGx5IHR5cGUtbGV2ZWwgZGVmYXVs
dCB0byBub24tcmVmZXJlbmNlIHR5cGUKQEAgLTI3MTIsNyArMjgzOSw3IEBAIHB1YmxpYyB2b2lk
IHRlc3RfZGVmYXVsdF9udWxsbmVzc18wMTYoKSB7CiAJCSI0LiBFUlJPUiBpbiBYLmphdmEgKGF0
IGxpbmUgMTEpXG4iICsgCiAJCSIJaUZvbyA9IGFyZztcbiIgKyAKIAkJIgkgICAgICAgXl5eXG4i
ICsgCi0JCSJOdWxsIHR5cGUgbWlzbWF0Y2g6IHJlcXVpcmVkIFwnQE5vbk51bGwgT2JqZWN0XCcg
YnV0IHRoZSBwcm92aWRlZCB2YWx1ZSBpcyBzcGVjaWZpZWQgYXMgQE51bGxhYmxlXG4iICsgCisJ
CW1pc21hdGNoX05vbk51bGxfTnVsbGFibGUoIk9iamVjdCIpICsgCiAJCSItLS0tLS0tLS0tXG4i
KTsKIH0KIApAQCAtMzEzNSw3ICszMjYyLDcgQEAgcHVibGljIHZvaWQgdGVzdF9ub25udWxsX3Zh
cl9pbl9jb25zdHJvbF9zdHJ1Y3R1cmVfMSgpIHsKIAkJIjIuIEVSUk9SIGluIFguamF2YSAoYXQg
bGluZSAxMClcbiIgKwogCQkiCXByaW50KHMpO1xuIiArCiAJCSIJICAgICAgXlxuIiArCi0JCSJO
dWxsIHR5cGUgbWlzbWF0Y2g6IHJlcXVpcmVkIFwnQE5vbk51bGwgU3RyaW5nXCcgYnV0IHRoZSBw
cm92aWRlZCB2YWx1ZSBpcyBzcGVjaWZpZWQgYXMgQE51bGxhYmxlXG4iICsKKwkJbWlzbWF0Y2hf
Tm9uTnVsbF9OdWxsYWJsZSgiU3RyaW5nIikgKwogCQkiLS0tLS0tLS0tLVxuIiArCiAJCSIzLiBF
UlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTUpXG4iICsKIAkJIglwcmludChzKTtcbiIgKwpAQCAt
MzE4Nyw3ICszMzE0LDcgQEAgcHVibGljIHZvaWQgdGVzdF9ub25udWxsX3Zhcl9pbl9jb25zdHJv
bF9zdHJ1Y3R1cmVfMigpIHsKIAkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMClcbiIg
KwogCQkiCXByaW50KHMpO1xuIiArCiAJCSIJICAgICAgXlxuIiArCi0JCSJOdWxsIHR5cGUgbWlz
bWF0Y2g6IHJlcXVpcmVkIFwnQE5vbk51bGwgU3RyaW5nXCcgYnV0IHRoZSBwcm92aWRlZCB2YWx1
ZSBpcyBzcGVjaWZpZWQgYXMgQE51bGxhYmxlXG4iICsKKwkJbWlzbWF0Y2hfTm9uTnVsbF9OdWxs
YWJsZSgiU3RyaW5nIikgKwogCQkiLS0tLS0tLS0tLVxuIiArCiAJCSIyLiBFUlJPUiBpbiBYLmph
dmEgKGF0IGxpbmUgMTYpXG4iICsKIAkJIglwcmludChzKTtcbiIgKwpAQCAtMzIzNCw3ICszMzYx
LDcgQEAgcHVibGljIHZvaWQgdGVzdF9ub25udWxsX3Zhcl9pbl9jb25zdHJvbF9zdHJ1Y3R1cmVf
MygpIHsKIAkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMilcbiIgKwogCQkiCXByaW50
KHMpO1xuIiArCiAJCSIJICAgICAgXlxuIiArCi0JCSJOdWxsIHR5cGUgbWlzbWF0Y2g6IHJlcXVp
cmVkIFwnQE5vbk51bGwgU3RyaW5nXCcgYnV0IHRoZSBwcm92aWRlZCB2YWx1ZSBpcyBzcGVjaWZp
ZWQgYXMgQE51bGxhYmxlXG4iICsKKwkJbWlzbWF0Y2hfTm9uTnVsbF9OdWxsYWJsZSgiU3RyaW5n
IikgKwogCQkiLS0tLS0tLS0tLVxuIiArCiAJCSIyLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUg
MTkpXG4iICsKIAkJIglwcmludChzKTtcbiIgKwpAQCAtMzM0OCw4ICszNDc1LDggQEAgcHVibGlj
IHZvaWQgdGVzdF9tZXNzYWdlX3NlbmRfaW5fY29udHJvbF9zdHJ1Y3R1cmVfMDIoKSB7CiAJCSIt
LS0tLS0tLS0tXG4iICsgCiAJCSIxLiBXQVJOSU5HIGluIEJ1ZzM3MDkzMC5qYXZhIChhdCBsaW5l
IDUpXG4iICsgCiAJCSIJZm9yKEBOb25OdWxsIFN0cmluZyBzOiBsaXN0KSB7IC8vIHdhcm5pbmcg
aGVyZTogaW5zdWZmaWNpZW50IGluZm8gb24gZWxlbWVudHNcbiIgKyAKLQkJIgkgICAgICAgICAg
ICAgICAgICAgICAgIF5eXl5cbiIgKyAKLQkJIk51bGwgdHlwZSBzYWZldHk6IFRoZSBleHByZXNz
aW9uIG9mIHR5cGUgU3RyaW5nIG5lZWRzIHVuY2hlY2tlZCBjb252ZXJzaW9uIHRvIGNvbmZvcm0g
dG8gXCdATm9uTnVsbCBTdHJpbmdcJ1xuIiArIAorCQkiCSAgICAgICAgICAgICAgICAgICAgICAg
Xl5eXlxuIiArCisJCW51bGxUeXBlU2FmZXR5KCkgKyAiVGhlIGV4cHJlc3Npb24gb2YgdHlwZSAn
U3RyaW5nJyBuZWVkcyB1bmNoZWNrZWQgY29udmVyc2lvbiB0byBjb25mb3JtIHRvIFwnQE5vbk51
bGwgU3RyaW5nXCdcbiIgKwogCQkiLS0tLS0tLS0tLVxuIik7CiB9CiAvL0J1ZyAzNzA5MzAgLSBO
b25OdWxsIGFubm90YXRpb24gbm90IGNvbnNpZGVyZWQgZm9yIGVuaGFuY2VkIGZvciBsb29wcyBv
dmVyIGFycmF5CkBAIC0zMzcyLDcgKzM0OTksNyBAQCBwdWJsaWMgdm9pZCB0ZXN0X21lc3NhZ2Vf
c2VuZF9pbl9jb250cm9sX3N0cnVjdHVyZV8wMmEoKSB7CiAJCSIxLiBXQVJOSU5HIGluIEJ1ZzM3
MDkzMC5qYXZhIChhdCBsaW5lIDQpXG4iICsgCiAJCSIJZm9yKEBOb25OdWxsIFN0cmluZyBzOiBh
cnJheSkgeyAvLyB3YXJuaW5nIGhlcmU6IGluc3VmZmljaWVudCBpbmZvIG9uIGVsZW1lbnRzXG4i
ICsgCiAJCSIJICAgICAgICAgICAgICAgICAgICAgICBeXl5eXlxuIiArIAotCQkiTnVsbCB0eXBl
IHNhZmV0eTogVGhlIGV4cHJlc3Npb24gb2YgdHlwZSBTdHJpbmcgbmVlZHMgdW5jaGVja2VkIGNv
bnZlcnNpb24gdG8gY29uZm9ybSB0byBcJ0BOb25OdWxsIFN0cmluZ1wnXG4iICsgCisJCW51bGxU
eXBlU2FmZXR5KCkgKyAiVGhlIGV4cHJlc3Npb24gb2YgdHlwZSAnU3RyaW5nJyBuZWVkcyB1bmNo
ZWNrZWQgY29udmVyc2lvbiB0byBjb25mb3JtIHRvIFwnQE5vbk51bGwgU3RyaW5nXCdcbiIgKwog
CQkiLS0tLS0tLS0tLVxuIik7CiB9CiAvL0J1ZyAzNzA5MzAgLSBOb25OdWxsIGFubm90YXRpb24g
bm90IGNvbnNpZGVyZWQgZm9yIGVuaGFuY2VkIGZvciBsb29wcwpAQCAtMzM5Niw3ICszNTIzLDcg
QEAgcHVibGljIHZvaWQgdGVzdF9tZXNzYWdlX3NlbmRfaW5fY29udHJvbF9zdHJ1Y3R1cmVfMDMo
KSB7CiAJCSIxLiBFUlJPUiBpbiBCdWczNzA5MzAuamF2YSAoYXQgbGluZSA2KVxuIiArIAogCQki
CWV4cGVjdE5vbk51bGwocyk7IC8vIHdhcm5pbmcgaGVyZVxuIiArIAogCQkiCSAgICAgICAgICAg
ICAgXlxuIiArIAotCQkiTnVsbCB0eXBlIG1pc21hdGNoOiByZXF1aXJlZCBcJ0BOb25OdWxsIFN0
cmluZ1wnIGJ1dCB0aGUgcHJvdmlkZWQgdmFsdWUgaXMgc3BlY2lmaWVkIGFzIEBOdWxsYWJsZVxu
IiArIAorCQltaXNtYXRjaF9Ob25OdWxsX051bGxhYmxlKCJTdHJpbmciKSArIAogCQkiLS0tLS0t
LS0tLVxuIik7CiB9CiBwdWJsaWMgdm9pZCB0ZXN0X2Fzc2lnbm1lbnRfZXhwcmVzc2lvbl8xKCkg
ewpAQCAtMzQ3NSw3ICszNjAyLDcgQEAgcHVibGljIHZvaWQgdGVzdF9uZXN0aW5nXzEoKSB7CiAJ
CSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTYpXG4iICsKIAkJIglwcmludChzMik7XG4i
ICsKIAkJIgkgICAgICBeXlxuIiArCi0JCSJOdWxsIHR5cGUgbWlzbWF0Y2g6IHJlcXVpcmVkIFwn
QE5vbk51bGwgU3RyaW5nXCcgYnV0IHRoZSBwcm92aWRlZCB2YWx1ZSBpcyBzcGVjaWZpZWQgYXMg
QE51bGxhYmxlXG4iICsKKwkJbWlzbWF0Y2hfTm9uTnVsbF9OdWxsYWJsZSgiU3RyaW5nIikgKwog
CQkiLS0tLS0tLS0tLVxuIiArCiAJCSIyLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMjUpXG4i
ICsKIAkJIglATm9uTnVsbCBTdHJpbmcgczNSID0gczM7XG4iICsKQEAgLTM4MzcsMTIgKzM5NjQs
MTIgQEAgcHVibGljIHZvaWQgdGVzdF9ub25udWxsX2ZpZWxkXzUoKSB7CiAJCSIxLiBFUlJPUiBp
biBYLmphdmEgKGF0IGxpbmUgNSlcbiIgKyAKIAkJIglyZXR1cm4gbyA9PSBudWxsO1xuIiArIAog
CQkiCSAgICAgICBeXG4iICsgCi0JCSJOdWxsIGNvbXBhcmlzb24gYWx3YXlzIHlpZWxkcyBmYWxz
ZTogVGhlIGZpZWxkIG8gaXMgZGVjbGFyZWQgYXMgQE5vbk51bGxcbiIgKyAKKwkJY2hlY2tBbHdh
eXNGYWxzZV9ub25udWxsKCJUaGUgZmllbGQgbyIsICJPYmplY3QiKSArCiAJCSItLS0tLS0tLS0t
XG4iICsgCiAJCSIyLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgOClcbiIgKyAKIAkJIglyZXR1
cm4gdGhpcy5vICE9IG51bGw7XG4iICsgCi0JCSIJICAgICAgICAgICAgXlxuIiArIAotCQkiUmVk
dW5kYW50IG51bGwgY2hlY2s6IFRoZSBmaWVsZCBvIGlzIGRlY2xhcmVkIGFzIEBOb25OdWxsXG4i
ICsgCisJCSIJICAgICAgICAgICAgXlxuIiArCisJCXJlZHVuZGFudF9jaGVja19ub25udWxsKCJU
aGUgZmllbGQgbyIsICJATm9uTnVsbCBPYmplY3QiKSArCiAJCSItLS0tLS0tLS0tXG4iKTsKIH0K
IApAQCAtMzg2OCwxMiArMzk5NSwxMiBAQCBwdWJsaWMgdm9pZCB0ZXN0X25vbm51bGxfZmllbGRf
NigpIHsKIAkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA1KVxuIiArIAogCQkiCWlmIChv
ICE9IG51bGwpXG4iICsgCiAJCSIJICAgIF5cbiIgKyAKLQkJIlJlZHVuZGFudCBudWxsIGNoZWNr
OiBUaGUgZmllbGQgbyBpcyBkZWNsYXJlZCBhcyBATm9uTnVsbFxuIiArIAorCQlyZWR1bmRhbnRf
Y2hlY2tfbm9ubnVsbCgiVGhlIGZpZWxkIG8iLCAiQE5vbk51bGwgT2JqZWN0IikgKyAKIAkJIi0t
LS0tLS0tLS1cbiIgKyAKIAkJIjIuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA4KVxuIiArIAog
CQkiCXJldHVybiB0aGlzLm8gPT0gbnVsbDtcbiIgKyAKIAkJIgkgICAgICAgICAgICBeXG4iICsg
Ci0JCSJOdWxsIGNvbXBhcmlzb24gYWx3YXlzIHlpZWxkcyBmYWxzZTogVGhlIGZpZWxkIG8gaXMg
ZGVjbGFyZWQgYXMgQE5vbk51bGxcbiIgKyAKKwkJY2hlY2tBbHdheXNGYWxzZV9ub25udWxsKCJU
aGUgZmllbGQgbyIsICJPYmplY3QiKSArCiAJCSItLS0tLS0tLS0tXG4iKTsKIH0KIApAQCAtMzkx
MCwxMiArNDAzNywxMiBAQCBwdWJsaWMgdm9pZCB0ZXN0X25vbm51bGxfZmllbGRfNygpIHsKIAkJ
IjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA3KVxuIiArIAogCQkiCWlmIChPYmplY3RzLm8g
IT0gbnVsbCkgLy8gcmVkdW5kYW50XG4iICsgCiAJCSIJICAgICAgICAgICAgXlxuIiArIAotCQki
UmVkdW5kYW50IG51bGwgY2hlY2s6IFRoZSBmaWVsZCBvIGlzIGRlY2xhcmVkIGFzIEBOb25OdWxs
XG4iICsgCisJCXJlZHVuZGFudF9jaGVja19ub25udWxsKCJUaGUgZmllbGQgbyIsICJATm9uTnVs
bCBPYmplY3QiKSArIAogCQkiLS0tLS0tLS0tLVxuIiArIAogCQkiMi4gRVJST1IgaW4gWC5qYXZh
IChhdCBsaW5lIDEzKVxuIiArIAogCQkiCWlmIChudWxsICE9IE9iamVjdHMubykgLy8gcmVkdW5k
YW50XG4iICsgCiAJCSIJICAgICAgICAgICAgICAgICAgICBeXG4iICsgCi0JCSJSZWR1bmRhbnQg
bnVsbCBjaGVjazogVGhlIGZpZWxkIG8gaXMgZGVjbGFyZWQgYXMgQE5vbk51bGxcbiIgKyAKKwkJ
cmVkdW5kYW50X2NoZWNrX25vbm51bGwoIlRoZSBmaWVsZCBvIiwgIkBOb25OdWxsIE9iamVjdCIp
ICsgCiAJCSItLS0tLS0tLS0tXG4iKTsKIH0KIApAQCAtMzk0Niw3ICs0MDczLDcgQEAgcHVibGlj
IHZvaWQgdGVzdF9ub25udWxsX2ZpZWxkXzgoKSB7CiAJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0
IGxpbmUgNylcbiIgKyAKIAkJIglpZiAob2Jqcy5vID09IG51bGwpIC8vIGFsd2F5cyBmYWxzZVxu
IiArIAogCQkiCSAgICAgICAgIF5cbiIgKyAKLQkJIk51bGwgY29tcGFyaXNvbiBhbHdheXMgeWll
bGRzIGZhbHNlOiBUaGUgZmllbGQgbyBpcyBkZWNsYXJlZCBhcyBATm9uTnVsbFxuIiArIAorCQlj
aGVja0Fsd2F5c0ZhbHNlX25vbm51bGwoIlRoZSBmaWVsZCBvIiwgIk9iamVjdCIpICsgCiAJCSIt
LS0tLS0tLS0tXG4iICsgCiAJCSIyLiBXQVJOSU5HIGluIFguamF2YSAoYXQgbGluZSA4KVxuIiAr
IAogCQkiCVN5c3RlbS5vdXQucHJpbnQoXCJub3QgbnVsbFwiKTtcbiIgKyAKQEAgLTM5ODYsMTIg
KzQxMTMsMTIgQEAgcHVibGljIHZvaWQgdGVzdF9ub25udWxsX2ZpZWxkXzkoKSB7CiAJCSIxLiBF
UlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgOClcbiIgKyAKIAkJIglpZiAodGhpcy5vYmpzLm8gIT0g
bnVsbCkgLy8gcmVkdW5kYW50XG4iICsgCiAJCSIJICAgICAgICAgICAgICBeXG4iICsgCi0JCSJS
ZWR1bmRhbnQgbnVsbCBjaGVjazogVGhlIGZpZWxkIG8gaXMgZGVjbGFyZWQgYXMgQE5vbk51bGxc
biIgKyAKKwkJcmVkdW5kYW50X2NoZWNrX25vbm51bGwoIlRoZSBmaWVsZCBvIiwgIkBOb25OdWxs
IE9iamVjdCIpICsgCiAJCSItLS0tLS0tLS0tXG4iICsgCiAJCSIyLiBFUlJPUiBpbiBYLmphdmEg
KGF0IGxpbmUgMTEpXG4iICsgCiAJCSIJaWYgKGdldE9ianMoKS5vICE9IG51bGwpIC8vIHJlZHVu
ZGFudFxuIiArIAotCQkiCSAgICAgICAgICAgICAgXlxuIiArIAotCQkiUmVkdW5kYW50IG51bGwg
Y2hlY2s6IFRoZSBmaWVsZCBvIGlzIGRlY2xhcmVkIGFzIEBOb25OdWxsXG4iICsgCisJCSIJICAg
ICAgICAgICAgICBeXG4iICsKKwkJcmVkdW5kYW50X2NoZWNrX25vbm51bGwoIlRoZSBmaWVsZCBv
IiwgIkBOb25OdWxsIE9iamVjdCIpICsgCiAJCSItLS0tLS0tLS0tXG4iKTsKIH0KIApAQCAtNDAx
OSw3ICs0MTQ2LDcgQEAgcHVibGljIHZvaWQgdGVzdF9ub25udWxsX2ZpZWxkXzExKCkgewogCQki
MS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDUpXG4iICsgCiAJCSIJbyA9IHg7XG4iICsgCiAJ
CSIJICAgIF5cbiIgKyAKLQkJIk51bGwgdHlwZSBtaXNtYXRjaDogcmVxdWlyZWQgXCdATm9uTnVs
bCBPYmplY3RcJyBidXQgdGhlIHByb3ZpZGVkIHZhbHVlIGlzIHNwZWNpZmllZCBhcyBATnVsbGFi
bGVcbiIgKyAKKwkJbWlzbWF0Y2hfTm9uTnVsbF9OdWxsYWJsZSgiT2JqZWN0IikgKyAKIAkJIi0t
LS0tLS0tLS1cbiIgKyAKIAkJIjIuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMClcbiIgKyAK
IAkJIglvYmpzLm8gPSBudWxsO1xuIiArIApAQCAtNDA0Myw3ICs0MTcwLDcgQEAgcHVibGljIHZv
aWQgdGVzdF9ub25udWxsX2ZpZWxkXzEyKCkgewogCQkiLS0tLS0tLS0tLVxuIiArIAogCQkiMS4g
RVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDMpXG4iICsgCiAJCSIJQE5vbk51bGwgaW50IG8gPSAx
O1xuIiArIAotCQkiCV5eXl5eXl5eXl5eXlxuIiArIAorCQkiCV5eXl5eXl5eXG4iICsgCiAJCSJU
aGUgbnVsbG5lc3MgYW5ub3RhdGlvbiBATm9uTnVsbCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhl
IHByaW1pdGl2ZSB0eXBlIGludFxuIiArIAogCQkiLS0tLS0tLS0tLVxuIik7CiB9CkBAIC00MjM0
LDggKzQzNjEsOCBAQCBwdWJsaWMgdm9pZCB0ZXN0X251bGxhYmxlX2ZpZWxkXzEoKSB7CiAJCSIt
LS0tLS0tLS0tXG4iICsgCiAJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNSlcbiIgKyAK
IAkJIglyZXR1cm4gdGhpcy5vLnRvU3RyaW5nKCk7XG4iICsgCi0JCSIJICAgICAgICAgICAgXlxu
IiArIAotCQkiUG90ZW50aWFsIG51bGwgcG9pbnRlciBhY2Nlc3M6IFRoZSBmaWVsZCBvIGlzIGRl
Y2xhcmVkIGFzIEBOdWxsYWJsZVxuIiArIAorCQkiCSAgICAgICAgICAgIF5cbiIgKworCQlwb3RO
UEVfbnVsbGFibGUoIlRoZSBmaWVsZCBvIikgKyAKIAkJIi0tLS0tLS0tLS1cbiIpOwogfQogLy8g
YWNjZXNzIHRvIGEgbnVsbGFibGUgZmllbGQgLSBzaW5nbGUgbmFtZSByZWZlcmVuY2UKQEAgLTQy
NTcsNyArNDM4NCw3IEBAIHB1YmxpYyB2b2lkIHRlc3RfbnVsbGFibGVfZmllbGRfMigpIHsKIAkJ
IjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA1KVxuIiArIAogCQkiCXJldHVybiBvLnRvU3Ry
aW5nKCk7XG4iICsgCiAJCSIJICAgICAgIF5cbiIgKyAKLQkJIlBvdGVudGlhbCBudWxsIHBvaW50
ZXIgYWNjZXNzOiBUaGUgZmllbGQgbyBpcyBkZWNsYXJlZCBhcyBATnVsbGFibGVcbiIgKyAKKwkJ
cG90TlBFX251bGxhYmxlKCJUaGUgZmllbGQgbyIpICsKIAkJIi0tLS0tLS0tLS1cbiIpOwogfQog
Ly8gYWNjZXNzIHRvIGEgbnVsbGFibGUgZmllbGQgLSBxdWFsaWZpZWQgbmFtZSByZWZlcmVuY2UK
QEAgLTQyODAsMTIgKzQ0MDcsMTIgQEAgcHVibGljIHZvaWQgdGVzdF9udWxsYWJsZV9maWVsZF8z
KCkgewogCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDYpXG4iICsKIAkJIglyZXR1cm4g
b3RoZXIuby50b1N0cmluZygpO1xuIiArCiAJCSIJICAgICAgIF5eXl5eXG4iICsKLQkJIlBvdGVu
dGlhbCBudWxsIHBvaW50ZXIgYWNjZXNzOiBUaGUgZmllbGQgb3RoZXIgaXMgZGVjbGFyZWQgYXMg
QE51bGxhYmxlXG4iICsKKwkJcG90TlBFX251bGxhYmxlKCJUaGUgZmllbGQgb3RoZXIiKSArCiAJ
CSItLS0tLS0tLS0tXG4iICsKIAkJIjIuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA2KVxuIiAr
CiAJCSIJcmV0dXJuIG90aGVyLm8udG9TdHJpbmcoKTtcbiIgKwogCQkiCSAgICAgICAgICAgICBe
XG4iICsKLQkJIlBvdGVudGlhbCBudWxsIHBvaW50ZXIgYWNjZXNzOiBUaGUgZmllbGQgbyBpcyBk
ZWNsYXJlZCBhcyBATnVsbGFibGVcbiIgKworCQlwb3ROUEVfbnVsbGFibGUoIlRoZSBmaWVsZCBv
IikgKwogCQkiLS0tLS0tLS0tLVxuIik7CiB9CiAvLyBhY2Nlc3MgdG8gYSBudWxsYWJsZSBmaWVs
ZCAtIHF1YWxpZmllZCBuYW1lIHJlZmVyZW5jZSAtIG11bHRpcGxlIHNlZ21lbnRzCkBAIC00MzA4
LDE3ICs0NDM1LDE3IEBAIHB1YmxpYyB2b2lkIHRlc3RfbnVsbGFibGVfZmllbGRfM20oKSB7CiAJ
CSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNilcbiIgKwogCQkiCXJldHVybiBvdGhlci5v
dGhlci5vLnRvU3RyaW5nKCk7XG4iICsKIAkJIgkgICAgICAgXl5eXl5cbiIgKwotCQkiUG90ZW50
aWFsIG51bGwgcG9pbnRlciBhY2Nlc3M6IFRoZSBmaWVsZCBvdGhlciBpcyBkZWNsYXJlZCBhcyBA
TnVsbGFibGVcbiIgKworCQlwb3ROUEVfbnVsbGFibGUoIlRoZSBmaWVsZCBvdGhlciIpICsKIAkJ
Ii0tLS0tLS0tLS1cbiIgKwogCQkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDYpXG4iICsK
IAkJIglyZXR1cm4gb3RoZXIub3RoZXIuby50b1N0cmluZygpO1xuIiArCiAJCSIJICAgICAgICAg
ICAgIF5eXl5eXG4iICsKLQkJIlBvdGVudGlhbCBudWxsIHBvaW50ZXIgYWNjZXNzOiBUaGUgZmll
bGQgb3RoZXIgaXMgZGVjbGFyZWQgYXMgQE51bGxhYmxlXG4iICsKKwkJcG90TlBFX251bGxhYmxl
KCJUaGUgZmllbGQgb3RoZXIiKSArCiAJCSItLS0tLS0tLS0tXG4iICsKIAkJIjMuIEVSUk9SIGlu
IFguamF2YSAoYXQgbGluZSA2KVxuIiArCiAJCSIJcmV0dXJuIG90aGVyLm90aGVyLm8udG9TdHJp
bmcoKTtcbiIgKwogCQkiCSAgICAgICAgICAgICAgICAgICBeXG4iICsKLQkJIlBvdGVudGlhbCBu
dWxsIHBvaW50ZXIgYWNjZXNzOiBUaGUgZmllbGQgbyBpcyBkZWNsYXJlZCBhcyBATnVsbGFibGVc
biIgKworCQlwb3ROUEVfbnVsbGFibGUoIlRoZSBmaWVsZCBvIikgKwogCQkiLS0tLS0tLS0tLVxu
Iik7CiB9CiAvLyBhY2Nlc3MgdG8gYSBudWxsYWJsZSBmaWVsZCAtIGRlcmVmZXJlbmNlIGFmdGVy
IGNoZWNrCkBAIC00MzU2LDEyICs0NDgzLDEyIEBAIHB1YmxpYyB2b2lkIHRlc3RfbnVsbGFibGVf
ZmllbGRfNCgpIHsKIAkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMilcbiIgKyAKIAkJ
IglTdHJpbmcgbG9jYWwgPSBvLnRvU3RyaW5nKCk7XG4iICsgCiAJCSIJICAgICAgICAgICAgICAg
XlxuIiArIAotCQkiUG90ZW50aWFsIG51bGwgcG9pbnRlciBhY2Nlc3M6IFRoZSBmaWVsZCBvIGlz
IGRlY2xhcmVkIGFzIEBOdWxsYWJsZVxuIiArIAorCQlwb3ROUEVfbnVsbGFibGUoIlRoZSBmaWVs
ZCBvIikgKyAKIAkJIi0tLS0tLS0tLS1cbiIgKyAKIAkJIjIuIEVSUk9SIGluIFguamF2YSAoYXQg
bGluZSAxNSlcbiIgKyAKIAkJIglyZXR1cm4gdGhpcy5vLnRvU3RyaW5nKCk7IC8vIHdhcm4gaGVy
ZVxuIiArIAogCQkiCSAgICAgICAgICAgIF5cbiIgKyAKLQkJIlBvdGVudGlhbCBudWxsIHBvaW50
ZXIgYWNjZXNzOiBUaGUgZmllbGQgbyBpcyBkZWNsYXJlZCBhcyBATnVsbGFibGVcbiIgKyAKKwkJ
cG90TlBFX251bGxhYmxlKCJUaGUgZmllbGQgbyIpICsgCiAJCSItLS0tLS0tLS0tXG4iKTsKIH0K
IApAQCAtNDM5Myw4ICs0NTIwLDggQEAgcHVibGljIHZvaWQgdGVzdF9udWxsYWJsZV9maWVsZF81
KCkgewogCQkiLS0tLS0tLS0tLVxuIiArIAogCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5l
IDUpXG4iICsgCiAJCSIJcmV0dXJuIHkuei5vLnRvU3RyaW5nKCk7IC8vIHBvdC5OUEUgb24gelxu
IiArIAotCQkiCSAgICAgICAgIF5cbiIgKyAKLQkJIlBvdGVudGlhbCBudWxsIHBvaW50ZXIgYWNj
ZXNzOiBUaGUgZmllbGQgeiBpcyBkZWNsYXJlZCBhcyBATnVsbGFibGVcbiIgKyAKKwkJIgkgICAg
ICAgICBeXG4iICsKKwkJcG90TlBFX251bGxhYmxlKCJUaGUgZmllbGQgeiIpICsgCiAJCSItLS0t
LS0tLS0tXG4iKTsKIH0KIApAQCAtNDQyOCwxMiArNDU1NSwxMiBAQCBwdWJsaWMgdm9pZCB0ZXN0
X251bGxhYmxlX2ZpZWxkXzYoKSB7CiAJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNSlc
biIgKyAKIAkJIglyZXR1cm4geS56Lm8udG9TdHJpbmcoKTsgLy8gcG90Lk5QRSBvbiB5IGFuZCBv
XG4iICsgCiAJCSIJICAgICAgIF5cbiIgKyAKLQkJIlBvdGVudGlhbCBudWxsIHBvaW50ZXIgYWNj
ZXNzOiBUaGUgZmllbGQgeSBpcyBkZWNsYXJlZCBhcyBATnVsbGFibGVcbiIgKyAKKwkJcG90TlBF
X251bGxhYmxlKCJUaGUgZmllbGQgeSIpICsgCiAJCSItLS0tLS0tLS0tXG4iICsgCiAJCSIyLiBF
UlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNSlcbiIgKyAKIAkJIglyZXR1cm4geS56Lm8udG9TdHJp
bmcoKTsgLy8gcG90Lk5QRSBvbiB5IGFuZCBvXG4iICsgCiAJCSIJICAgICAgICAgICBeXG4iICsg
Ci0JCSJQb3RlbnRpYWwgbnVsbCBwb2ludGVyIGFjY2VzczogVGhlIGZpZWxkIG8gaXMgZGVjbGFy
ZWQgYXMgQE51bGxhYmxlXG4iICsgCisJCXBvdE5QRV9udWxsYWJsZSgiVGhlIGZpZWxkIG8iKSAr
IAogCQkiLS0tLS0tLS0tLVxuIik7CiB9CiAKQEAgLTQ0NjAsMTMgKzQ1ODcsMTMgQEAgcHVibGlj
IHZvaWQgdGVzdF9udWxsYWJsZV9maWVsZF83KCkgewogCQkiLS0tLS0tLS0tLVxuIiArIAogCQki
MS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDUpXG4iICsgCiAJCSIJcmV0dXJuIHRoaXMueS5v
LnRvU3RyaW5nKCk7IC8vIHBvdC5OUEUgb24geSBhbmQgb1xuIiArIAotCQkiCSAgICAgICAgICAg
IF5cbiIgKyAKLQkJIlBvdGVudGlhbCBudWxsIHBvaW50ZXIgYWNjZXNzOiBUaGUgZmllbGQgeSBp
cyBkZWNsYXJlZCBhcyBATnVsbGFibGVcbiIgKyAKKwkJIgkgICAgICAgICAgICBeXG4iICsKKwkJ
cG90TlBFX251bGxhYmxlKCJUaGUgZmllbGQgeSIpICsgCiAJCSItLS0tLS0tLS0tXG4iICsgCiAJ
CSIyLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNSlcbiIgKyAKIAkJIglyZXR1cm4gdGhpcy55
Lm8udG9TdHJpbmcoKTsgLy8gcG90Lk5QRSBvbiB5IGFuZCBvXG4iICsgCi0JCSIJICAgICAgICAg
ICAgICBeXG4iICsgCi0JCSJQb3RlbnRpYWwgbnVsbCBwb2ludGVyIGFjY2VzczogVGhlIGZpZWxk
IG8gaXMgZGVjbGFyZWQgYXMgQE51bGxhYmxlXG4iICsgCisJCSIJICAgICAgICAgICAgICBeXG4i
ICsKKwkJcG90TlBFX251bGxhYmxlKCJUaGUgZmllbGQgbyIpICsgCiAJCSItLS0tLS0tLS0tXG4i
KTsKIH0KIApAQCAtNDUwNSw3ICs0NjMyLDcgQEAgcHVibGljIHZvaWQgdGVzdF9udWxsYWJsZV9m
aWVsZF85KCkgewogCQkJIi0tLS0tLS0tLS1cbiIgKyAKIAkJCSIxLiBFUlJPUiBpbiBYLmphdmEg
KGF0IGxpbmUgMylcbiIgKyAKIAkJCSIJQE51bGxhYmxlIGludCBpO1xuIiArIAotCQkJIgleXl5e
Xl5eXl5eXl5eXG4iICsgCisJCQkiCV5eXl5eXl5eXlxuIiArIAogCQkJIlRoZSBudWxsbmVzcyBh
bm5vdGF0aW9uIEBOdWxsYWJsZSBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIHByaW1pdGl2ZSB0
eXBlIGludFxuIiArIAogCQkJIi0tLS0tLS0tLS1cbiIpOwkKIH0KQEAgLTQ1NzksMzcgKzQ3MDYs
MzcgQEAgcHVibGljIHZvaWQgdGVzdF9udWxsYWJsZV9maWVsZF8xMGIoKSB7CiAJCSIxLiBFUlJP
UiBpbiBYLmphdmEgKGF0IGxpbmUgNylcbiIgKyAKIAkJIglTeXN0ZW0ub3V0LnByaW50bG4ob3Ro
ZXIubzEudG9TdHJpbmcoKSk7XG4iICsgCiAJCSIJICAgICAgICAgICAgICAgICAgICAgICAgIF5e
XG4iICsgCi0JCSJQb3RlbnRpYWwgbnVsbCBwb2ludGVyIGFjY2VzczogVGhlIGZpZWxkIG8xIGlz
IGRlY2xhcmVkIGFzIEBOdWxsYWJsZVxuIiArIAorCQlwb3ROUEVfbnVsbGFibGUoIlRoZSBmaWVs
ZCBvMSIpICsgCiAJCSItLS0tLS0tLS0tXG4iICsgCiAJCSIyLiBFUlJPUiBpbiBYLmphdmEgKGF0
IGxpbmUgMTApXG4iICsgCiAJCSIJU3lzdGVtLm91dC5wcmludGxuKG8yLnRvU3RyaW5nKCkpO1xu
IiArIAogCQkiCSAgICAgICAgICAgICAgICAgICBeXlxuIiArIAotCQkiUG90ZW50aWFsIG51bGwg
cG9pbnRlciBhY2Nlc3M6IFRoZSBmaWVsZCBvMiBpcyBkZWNsYXJlZCBhcyBATnVsbGFibGVcbiIg
KyAKKwkJcG90TlBFX251bGxhYmxlKCJUaGUgZmllbGQgbzIiKSArIAogCQkiLS0tLS0tLS0tLVxu
IiArIAogCQkiMy4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDEyKVxuIiArIAogCQkiCVN5c3Rl
bS5vdXQucHJpbnRsbih0aGlzLm8yLnRvU3RyaW5nKCkpO1xuIiArIAogCQkiCSAgICAgICAgICAg
ICAgICAgICAgICAgIF5eXG4iICsgCi0JCSJQb3RlbnRpYWwgbnVsbCBwb2ludGVyIGFjY2Vzczog
VGhlIGZpZWxkIG8yIGlzIGRlY2xhcmVkIGFzIEBOdWxsYWJsZVxuIiArIAorCQlwb3ROUEVfbnVs
bGFibGUoIlRoZSBmaWVsZCBvMiIpICsgCiAJCSItLS0tLS0tLS0tXG4iICsgCiAJCSI0LiBFUlJP
UiBpbiBYLmphdmEgKGF0IGxpbmUgMTMpXG4iICsgCiAJCSIJU3lzdGVtLm91dC5wcmludGxuIChu
dWxsICE9IG8zID8gbzMudG9TdHJpbmcoKSA6IFwibm90aGluZ1wiKTtcbiIgKyAKIAkJIgkgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXlxuIiArIAotCQkiUG90ZW50aWFsIG51bGwg
cG9pbnRlciBhY2Nlc3M6IFRoZSBmaWVsZCBvMyBpcyBkZWNsYXJlZCBhcyBATnVsbGFibGVcbiIg
KyAKKwkJcG90TlBFX251bGxhYmxlKCJUaGUgZmllbGQgbzMiKSArIAogCQkiLS0tLS0tLS0tLVxu
IiArIAogCQkiNS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDE1KVxuIiArIAogCQkiCVN5c3Rl
bS5vdXQucHJpbnRsbih4Lm8xLnRvU3RyaW5nKCkpO1xuIiArIAogCQkiCSAgICAgICAgICAgICAg
ICAgICAgIF5eXG4iICsgCi0JCSJQb3RlbnRpYWwgbnVsbCBwb2ludGVyIGFjY2VzczogVGhlIGZp
ZWxkIG8xIGlzIGRlY2xhcmVkIGFzIEBOdWxsYWJsZVxuIiArIAorCQlwb3ROUEVfbnVsbGFibGUo
IlRoZSBmaWVsZCBvMSIpICsgCiAJCSItLS0tLS0tLS0tXG4iICsgCiAJCSI2LiBFUlJPUiBpbiBY
LmphdmEgKGF0IGxpbmUgMTcpXG4iICsgCiAJCSIJU3lzdGVtLm91dC5wcmludGxuKHRoaXMueC5v
MS50b1N0cmluZygpKTtcbiIgKyAKIAkJIgkgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXG4i
ICsgCi0JCSJQb3RlbnRpYWwgbnVsbCBwb2ludGVyIGFjY2VzczogVGhlIGZpZWxkIG8xIGlzIGRl
Y2xhcmVkIGFzIEBOdWxsYWJsZVxuIiArIAorCQlwb3ROUEVfbnVsbGFibGUoIlRoZSBmaWVsZCBv
MSIpICsgCiAJCSItLS0tLS0tLS0tXG4iICsgCiAJCSI3LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxp
bmUgMTkpXG4iICsgCiAJCSIJU3lzdGVtLm91dC5wcmludGxuKHRoaXMueC5vMS50b1N0cmluZygp
KTtcbiIgKyAKIAkJIgkgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXG4iICsgCi0JCSJQb3Rl
bnRpYWwgbnVsbCBwb2ludGVyIGFjY2VzczogVGhlIGZpZWxkIG8xIGlzIGRlY2xhcmVkIGFzIEBO
dWxsYWJsZVxuIiArIAorCQlwb3ROUEVfbnVsbGFibGUoIlRoZSBmaWVsZCBvMSIpICsgCiAJCSIt
LS0tLS0tLS0tXG4iKTsKIH0KIApAQCAtNDY0NywyMiArNDc3NCwyMiBAQCBwdWJsaWMgdm9pZCB0
ZXN0X251bGxhYmxlX2ZpZWxkXzEwYygpIHsKIAkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGlu
ZSA4KVxuIiArCiAJCSIJU3lzdGVtLm91dC5wcmludGxuKG8yLnRvU3RyaW5nKCkpOyAvLyB3YXJu
IGhlcmU6IGRpc2p1bmt0aW9uIGlzIG5vIHByb3RlY3Rpb25cbiIgKwogCQkiCSAgICAgICAgICAg
ICAgICAgICBeXlxuIiArCi0JCSJQb3RlbnRpYWwgbnVsbCBwb2ludGVyIGFjY2VzczogVGhlIGZp
ZWxkIG8yIGlzIGRlY2xhcmVkIGFzIEBOdWxsYWJsZVxuIiArCisJCXBvdE5QRV9udWxsYWJsZSgi
VGhlIGZpZWxkIG8yIikgKwogCQkiLS0tLS0tLS0tLVxuIiArCiAJCSIyLiBFUlJPUiBpbiBYLmph
dmEgKGF0IGxpbmUgMTApXG4iICsKIAkJIglTeXN0ZW0ub3V0LnByaW50bG4obzEudG9TdHJpbmco
KSk7IC8vIHdhcm4gaGVyZTogbmVnYXRlZCBpbmVxdWFsaXR5IGlzIG5vIHByb3RlY3Rpb25cbiIg
KwogCQkiCSAgICAgICAgICAgICAgICAgICBeXlxuIiArCi0JCSJQb3RlbnRpYWwgbnVsbCBwb2lu
dGVyIGFjY2VzczogVGhlIGZpZWxkIG8xIGlzIGRlY2xhcmVkIGFzIEBOdWxsYWJsZVxuIiArCisJ
CXBvdE5QRV9udWxsYWJsZSgiVGhlIGZpZWxkIG8xIikgKwogCQkiLS0tLS0tLS0tLVxuIiArCiAJ
CSIzLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTQpXG4iICsKIAkJIglTeXN0ZW0ub3V0LnBy
aW50bG4obzIudG9TdHJpbmcoKSk7IC8vIHdhcm4gaGVyZTogbmVnYXRlZCBjb25qdW5jdGlvbiBp
cyBubyBwcm90ZWN0aW9uXG4iICsKIAkJIgkgICAgICAgICAgICAgICAgICAgXl5cbiIgKwotCQki
UG90ZW50aWFsIG51bGwgcG9pbnRlciBhY2Nlc3M6IFRoZSBmaWVsZCBvMiBpcyBkZWNsYXJlZCBh
cyBATnVsbGFibGVcbiIgKworCQlwb3ROUEVfbnVsbGFibGUoIlRoZSBmaWVsZCBvMiIpICsKIAkJ
Ii0tLS0tLS0tLS1cbiIgKwogCQkiNC4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDE2KVxuIiAr
CiAJCSIJU3lzdGVtLm91dC5wcmludGxuKG8xLnRvU3RyaW5nKCkpOyAvLyB3YXJuIGhlcmU6IGRv
dWJsZSBuZWdhdGlvbiBpcyBubyBwcm90ZWN0aW9uXG4iICsKIAkJIgkgICAgICAgICAgICAgICAg
ICAgXl5cbiIgKwotCQkiUG90ZW50aWFsIG51bGwgcG9pbnRlciBhY2Nlc3M6IFRoZSBmaWVsZCBv
MSBpcyBkZWNsYXJlZCBhcyBATnVsbGFibGVcbiIgKworCQlwb3ROUEVfbnVsbGFibGUoIlRoZSBm
aWVsZCBvMSIpICsKIAkJIi0tLS0tLS0tLS1cbiIpOwogfQogCkBAIC00Njk1LDcgKzQ4MjIsNyBA
QCBwdWJsaWMgdm9pZCB0ZXN0X251bGxhYmxlX2ZpZWxkXzEwZCgpIHsKIAkJIjEuIEVSUk9SIGlu
IFguamF2YSAoYXQgbGluZSAxMilcbiIgKyAKIAkJIglTeXN0ZW0ub3V0LnByaW50bG4obzEudG9T
dHJpbmcoKSk7IC8vIGluZm8gaXMgZXhwaXJlZFxuIiArIAogCQkiCSAgICAgICAgICAgICAgICAg
ICBeXlxuIiArIAotCQkiUG90ZW50aWFsIG51bGwgcG9pbnRlciBhY2Nlc3M6IFRoZSBmaWVsZCBv
MSBpcyBkZWNsYXJlZCBhcyBATnVsbGFibGVcbiIgKyAKKwkJcG90TlBFX251bGxhYmxlKCJUaGUg
ZmllbGQgbzEiKSArIAogCQkiLS0tLS0tLS0tLVxuIik7CiB9CiAKQEAgLTQ3MzYsNyArNDg2Myw3
IEBAIHB1YmxpYyB2b2lkIHRlc3RfbnVsbGFibGVfZmllbGRfMTBlKCkgewogCQkiMi4gRVJST1Ig
aW4gWC5qYXZhIChhdCBsaW5lIDYpXG4iICsgCiAJCSIJU3lzdGVtLm91dC5wcmludGxuKHRoaXMu
bzIudG9TdHJpbmcoKSk7IC8vIGZpZWxkIGFjY2VzcyBpcyBub3QgcHJvdGVjdGVkXG4iICsgCiAJ
CSIJICAgICAgICAgICAgICAgICAgICAgICAgXl5cbiIgKyAKLQkJIlBvdGVudGlhbCBudWxsIHBv
aW50ZXIgYWNjZXNzOiBUaGUgZmllbGQgbzIgaXMgZGVjbGFyZWQgYXMgQE51bGxhYmxlXG4iICsg
CisJCXBvdE5QRV9udWxsYWJsZSgiVGhlIGZpZWxkIG8yIikgKyAKIAkJIi0tLS0tLS0tLS1cbiIg
KyAKIAkJIjMuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDEyKVxuIiArIAogCQkiCVkgbzEg
PSBuZXcgWSgpO1xuIiArIApAQCAtNDc0NiwxMiArNDg3MywxMiBAQCBwdWJsaWMgdm9pZCB0ZXN0
X251bGxhYmxlX2ZpZWxkXzEwZSgpIHsKIAkJIjQuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAx
NClcbiIgKyAKIAkJIglTeXN0ZW0ub3V0LnByaW50bG4odGhpcy5vMS5vMi50b1N0cmluZygpKTsg
Ly8gZmllbGQgYWNjZXNzIHZpYSBvdGhlciBmaWVsZCBub3QgcHJvdGVjdGVkXG4iICsgCiAJCSIJ
ICAgICAgICAgICAgICAgICAgICAgICAgICAgXl5cbiIgKyAKLQkJIlBvdGVudGlhbCBudWxsIHBv
aW50ZXIgYWNjZXNzOiBUaGUgZmllbGQgbzIgaXMgZGVjbGFyZWQgYXMgQE51bGxhYmxlXG4iICsg
CisJCXBvdE5QRV9udWxsYWJsZSgiVGhlIGZpZWxkIG8yIikgKyAKIAkJIi0tLS0tLS0tLS1cbiIg
KyAKIAkJIjUuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxNilcbiIgKyAKIAkJIglTeXN0ZW0u
b3V0LnByaW50bG4obzEubzIudG9TdHJpbmcoKSk7IC8vIGZpZWxkIGFjY2VzcyB2aWEgbG9jYWwg
bm90IHByb3RlY3RlZFxuIiArIAogCQkiCSAgICAgICAgICAgICAgICAgICAgICBeXlxuIiArIAot
CQkiUG90ZW50aWFsIG51bGwgcG9pbnRlciBhY2Nlc3M6IFRoZSBmaWVsZCBvMiBpcyBkZWNsYXJl
ZCBhcyBATnVsbGFibGVcbiIgKyAKKwkJcG90TlBFX251bGxhYmxlKCJUaGUgZmllbGQgbzIiKSAr
IAogCQkiLS0tLS0tLS0tLVxuIik7CiB9CiAKQEAgLTQ3ODAsMTIgKzQ5MDcsMTIgQEAgcHVibGlj
IHZvaWQgdGVzdF9udWxsYWJsZV9maWVsZF8xMGYoKSB7CiAJCSIxLiBFUlJPUiBpbiBYLmphdmEg
KGF0IGxpbmUgNSlcbiIgKyAKIAkJIglpZiAobzEgIT0gbnVsbCAmJiBvMSAhPSBudWxsKSAvLyBz
ZWNvbmQgdGVybSBpcyByZWR1bmRhbnRcbiIgKyAKIAkJIgkgICAgICAgICAgICAgICAgICBeXlxu
IiArIAotCQkiUmVkdW5kYW50IG51bGwgY2hlY2s6IHRoaXMgZXhwcmVzc2lvbiBjYW5ub3QgYmUg
bnVsbFxuIiArIAorCQkiUmVkdW5kYW50IG51bGwgY2hlY2s6IFRoZSBmaWVsZCBvMSBjYW5ub3Qg
YmUgbnVsbCBhdCB0aGlzIGxvY2F0aW9uIChpZ25vcmluZyBjb25jdXJyZW5jeSlcbiIgKyAKIAkJ
Ii0tLS0tLS0tLS1cbiIgKyAKIAkJIjIuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA4KVxuIiAr
IAogCQkiCWlmIChvMSAhPSBudWxsKSAvLyB0aGlzIGlmIGlzIHJlZHVuZGFudFxuIiArIAogCQki
CSAgICBeXlxuIiArIAotCQkiUmVkdW5kYW50IG51bGwgY2hlY2s6IHRoaXMgZXhwcmVzc2lvbiBj
YW5ub3QgYmUgbnVsbFxuIiArIAorCQkiUmVkdW5kYW50IG51bGwgY2hlY2s6IFRoZSBmaWVsZCBv
MSBjYW5ub3QgYmUgbnVsbCBhdCB0aGlzIGxvY2F0aW9uIChpZ25vcmluZyBjb25jdXJyZW5jeSlc
biIgKyAKIAkJIi0tLS0tLS0tLS1cbiIpOwogfQogCkBAIC00ODk1LDIyICs1MDIyLDIyIEBAIHB1
YmxpYyB2b2lkIHRlc3RfbnVsbGFibGVfZmllbGRfMTIoKSB7CiAJCSIxLiBFUlJPUiBpbiBYLmph
dmEgKGF0IGxpbmUgNilcbiIgKyAKIAkJIglTeXN0ZW0ub3V0LnByaW50bG4oZ29vKCkrb3RoZXIu
bzEudG9TdHJpbmcoKSk7IC8vIHdhcm4gaGVyZTogZXhwaXJlZCBieSBjYWxsIHRvIGdvbygpXG4i
ICsgCiAJCSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXG4iICsgCi0JCSJQb3Rl
bnRpYWwgbnVsbCBwb2ludGVyIGFjY2VzczogVGhlIGZpZWxkIG8xIGlzIGRlY2xhcmVkIGFzIEBO
dWxsYWJsZVxuIiArIAorCQlwb3ROUEVfbnVsbGFibGUoIlRoZSBmaWVsZCBvMSIpICsgCiAJCSIt
LS0tLS0tLS0tXG4iICsgCiAJCSIyLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgOSlcbiIgKyAK
IAkJIglTeXN0ZW0ub3V0LnByaW50bG4obzIudG9TdHJpbmcoKSk7IC8vIHdhcm4gaGVyZTogbm90
IHByb3RlY3RlZFxuIiArCiAJCSIJICAgICAgICAgICAgICAgICAgIF5eXG4iICsgCi0JCSJQb3Rl
bnRpYWwgbnVsbCBwb2ludGVyIGFjY2VzczogVGhlIGZpZWxkIG8yIGlzIGRlY2xhcmVkIGFzIEBO
dWxsYWJsZVxuIiArCisJCXBvdE5QRV9udWxsYWJsZSgiVGhlIGZpZWxkIG8yIikgKwogCQkiLS0t
LS0tLS0tLVxuIiArCiAJCSIzLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTEpXG4iICsgCiAJ
CSIJU3lzdGVtLm91dC5wcmludGxuKG8zLnRvU3RyaW5nKCkpOyAvLyB3YXJuIGhlcmU6IGV4cGly
ZWQgYnkgZW1wdHkgc3RhdGVtZW50XG4iICsgCiAJCSIJICAgICAgICAgICAgICAgICAgIF5eXG4i
ICsgCi0JCSJQb3RlbnRpYWwgbnVsbCBwb2ludGVyIGFjY2VzczogVGhlIGZpZWxkIG8zIGlzIGRl
Y2xhcmVkIGFzIEBOdWxsYWJsZVxuIiArIAorCQlwb3ROUEVfbnVsbGFibGUoIlRoZSBmaWVsZCBv
MyIpICsgCiAJCSItLS0tLS0tLS0tXG4iICsgCiAJCSI0LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxp
bmUgMTMpXG4iICsgCiAJCSIJU3lzdGVtLm91dC5wcmludGxuKG80LnRvU3RyaW5nKCkpOyAvLyB3
YXJuIGhlcmU6IGV4cGlyZWQgYnkgY2FsbCB0byBob28oKVxuIiArIAogCQkiCSAgICAgICAgICAg
ICAgICAgICBeXlxuIiArIAotCQkiUG90ZW50aWFsIG51bGwgcG9pbnRlciBhY2Nlc3M6IFRoZSBm
aWVsZCBvNCBpcyBkZWNsYXJlZCBhcyBATnVsbGFibGVcbiIgKyAKKwkJcG90TlBFX251bGxhYmxl
KCJUaGUgZmllbGQgbzQiKSArIAogCQkiLS0tLS0tLS0tLVxuIik7CiB9CiAKQEAgLTQ5MzgsNyAr
NTA2NSw3IEBAIHB1YmxpYyB2b2lkIHRlc3RfbnVsbGFibGVfZmllbGRfMTMoKSB7CiAJCSIxLiBF
UlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgNylcbiIgKyAKIAkJIgl0aGlzLm8yID0gb3RoZXIubzE7
IC8vIHdhcm4gaGVyZTogYXNzaWduIEBOdWxsYWJsZSB0byBATm9uTnVsbFxuIiArIAogCQkiCSAg
ICAgICAgICBeXl5eXl5eXlxuIiArIAotCQkiTnVsbCB0eXBlIG1pc21hdGNoOiByZXF1aXJlZCBc
J0BOb25OdWxsIE9iamVjdFwnIGJ1dCB0aGUgcHJvdmlkZWQgdmFsdWUgaXMgc3BlY2lmaWVkIGFz
IEBOdWxsYWJsZVxuIiArIAorCQltaXNtYXRjaF9Ob25OdWxsX051bGxhYmxlKCJPYmplY3QiKSAr
IAogCQkiLS0tLS0tLS0tLVxuIik7CiB9CiAKQEAgLTQ5ODcsNyArNTExNCw3IEBAIHB1YmxpYyB2
b2lkIHRlc3RfbnVsbGFibGVfZmllbGRfMTRhKCkgewogCQkiMS4gRVJST1IgaW4gWC5qYXZhIChh
dCBsaW5lIDYpXG4iICsgCiAJCSIJcmV0dXJuIHRoaXMuby50b1N0cmluZygpOyAvLyB3YXJuIGhl
cmUsIGNoZWNrIGhhcyBubyBlZmZlY3RcbiIgKyAKIAkJIgkgICAgICAgICAgICBeXG4iICsgCi0J
CSJQb3RlbnRpYWwgbnVsbCBwb2ludGVyIGFjY2VzczogVGhlIGZpZWxkIG8gaXMgZGVjbGFyZWQg
YXMgQE51bGxhYmxlXG4iICsgCisJCXBvdE5QRV9udWxsYWJsZSgiVGhlIGZpZWxkIG8iKSArIAog
CQkiLS0tLS0tLS0tLVxuIik7CiB9CiAKQEAgLTUwMTYsMTcgKzUxNDMsMTcgQEAgcHVibGljIHZv
aWQgdGVzdF9udWxsYWJsZV9maWVsZF8xNSgpIHsKIAkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQg
bGluZSA4KVxuIiArIAogCQkiCSgoTnVtYmVyKW51bGxhYmxlKS5pbnRWYWx1ZSgpOyAvLyBBXG4i
ICsgCiAJCSIJICAgICAgICAgXl5eXl5eXl5cbiIgKyAKLQkJIlBvdGVudGlhbCBudWxsIHBvaW50
ZXIgYWNjZXNzOiBUaGUgZmllbGQgbnVsbGFibGUgaXMgZGVjbGFyZWQgYXMgQE51bGxhYmxlXG4i
ICsgCisJCXBvdE5QRV9udWxsYWJsZSgiVGhlIGZpZWxkIG51bGxhYmxlIikgKyAKIAkJIi0tLS0t
LS0tLS1cbiIgKyAKIAkJIjIuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMSlcbiIgKyAKIAkJ
IgludWxsYWJsZS50b1N0cmluZygpOyAvLyBCXG4iICsgCiAJCSIJXl5eXl5eXl5cbiIgKyAKLQkJ
IlBvdGVudGlhbCBudWxsIHBvaW50ZXIgYWNjZXNzOiBUaGUgZmllbGQgbnVsbGFibGUgaXMgZGVj
bGFyZWQgYXMgQE51bGxhYmxlXG4iICsgCisJCXBvdE5QRV9udWxsYWJsZSgiVGhlIGZpZWxkIG51
bGxhYmxlIikgKyAKIAkJIi0tLS0tLS0tLS1cbiIgKyAKIAkJIjMuIEVSUk9SIGluIFguamF2YSAo
YXQgbGluZSAxMylcbiIgKyAKIAkJIgludWxsYWJsZS50b1N0cmluZygpOyAvLyBDXG4iICsgCiAJ
CSIJXl5eXl5eXl5cbiIgKyAKLQkJIlBvdGVudGlhbCBudWxsIHBvaW50ZXIgYWNjZXNzOiBUaGUg
ZmllbGQgbnVsbGFibGUgaXMgZGVjbGFyZWQgYXMgQE51bGxhYmxlXG4iICsgCisJCXBvdE5QRV9u
dWxsYWJsZSgiVGhlIGZpZWxkIG51bGxhYmxlIikgKyAKIAkJIi0tLS0tLS0tLS1cbiIpOwogfQog
Ly8gYW4gZW51bSBpcyBkZWNsYXJlZCB3aXRoaW4gdGhlIHNjb3BlIG9mIGEgbnVsbC1kZWZhdWx0
CkBAIC01MTI3LDcgKzUyNTQsNyBAQCBwdWJsaWMgdm9pZCB0ZXN0QnVnMzcyMDExKCkgewogLy8g
aHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM3NDEyOSAgLSBt
b3JlIHRlc3RzIGZvciBidWcgMzcyMDExCiAvLyBUZXN0IHdoZXRoZXIgQE5vbk51bGxCeURlZmF1
bHQgb24gYSBiaW5hcnkgcGFja2FnZSBvciBhbiBlbmNsb3NpbmcgdHlwZSBpcyByZXNwZWN0ZWQg
ZnJvbSBlbmNsb3NlZCBlbGVtZW50cy4KIHB1YmxpYyB2b2lkIHRlc3RCdWczNzQxMjkoKSB7Ci0J
U3RyaW5nIHBhdGggPSB0aGlzLmdldENvbXBpbGVyVGVzdHNQbHVnaW5EaXJlY3RvcnlQYXRoKCkg
KyBGaWxlLnNlcGFyYXRvciArICJ3b3Jrc3BhY2UiICsgRmlsZS5zZXBhcmF0b3IgKyAiVGVzdDM3
NDEyOS5qYXIiOworCVN0cmluZyBwYXRoID0gdGhpcy5nZXRDb21waWxlclRlc3RzUGx1Z2luRGly
ZWN0b3J5UGF0aCgpICsgRmlsZS5zZXBhcmF0b3IgKyAid29ya3NwYWNlIiArIEZpbGUuc2VwYXJh
dG9yICsgIlRlc3QzNzQxMjkiK3RoaXMuVEVTVF9KQVJfU1VGRklYOwogCS8qIGNvbnRlbnQgb2Yg
VGVzdDM3MjEyOS5qYXI6CiAJIAlwMWJpbi9wYWNrYWdlLWluZm8uamF2YToKIAkgCQlAb3JnLmVj
bGlwc2UuamR0LmFubm90YXRpb24uTm9uTnVsbEJ5RGVmYXVsdApAQCAtNTIxMSwyNyArNTMzOCwy
NyBAQCBwdWJsaWMgdm9pZCB0ZXN0QnVnMzc0MTI5KCkgewogCQkJIjEuIEVSUk9SIGluIGJ1ZzM3
NDEyOVxcVGVzdC5qYXZhIChhdCBsaW5lIDIyKVxuIiArIAogCQkJIglzID0gYzEuZ2V0SWQobiwg
bik7IC8vIGVycm9yIG9uIGZpcnN0IGFyZyAocGFja2FnZSBkZWZhdWx0KVxuIiArIAogCQkJIgkg
ICAgICAgICAgICAgXlxuIiArIAotCQkJIk51bGwgdHlwZSBtaXNtYXRjaDogcmVxdWlyZWQgXCdA
Tm9uTnVsbCBTdHJpbmdcJyBidXQgdGhlIHByb3ZpZGVkIHZhbHVlIGlzIHNwZWNpZmllZCBhcyBA
TnVsbGFibGVcbiIgKyAKKwkJCW1pc21hdGNoX05vbk51bGxfTnVsbGFibGUoIlN0cmluZyIpICsg
CiAJCQkiLS0tLS0tLS0tLVxuIiArIAogCQkJIjIuIEVSUk9SIGluIGJ1ZzM3NDEyOVxcVGVzdC5q
YXZhIChhdCBsaW5lIDIzKVxuIiArIAogCQkJIglzID0gYzFpLmdldElkKG4sIG4pOyAvLyBlcnJv
ciBvbiBmaXJzdCBhcmcgKHBhY2thZ2UgZGVmYXVsdCBwcm9wYWdhdGVkIGludG8gaW5uZXIpXG4i
ICsgCiAJCQkiCSAgICAgICAgICAgICAgXlxuIiArIAotCQkJIk51bGwgdHlwZSBtaXNtYXRjaDog
cmVxdWlyZWQgXCdATm9uTnVsbCBTdHJpbmdcJyBidXQgdGhlIHByb3ZpZGVkIHZhbHVlIGlzIHNw
ZWNpZmllZCBhcyBATnVsbGFibGVcbiIgKyAKKwkJCW1pc21hdGNoX05vbk51bGxfTnVsbGFibGUo
IlN0cmluZyIpICsgCiAJCQkiLS0tLS0tLS0tLVxuIiArIAogCQkJIjMuIEVSUk9SIGluIGJ1ZzM3
NDEyOVxcVGVzdC5qYXZhIChhdCBsaW5lIDI0KVxuIiArIAogCQkJIglzID0gYzIuZ2V0SWQobiwg
bik7IC8vIGVycm9yIG9uIGZpcnN0IGFyZyAodHlwZSBkZWZhdWx0KVxuIiArIAogCQkJIgkgICAg
ICAgICAgICAgXlxuIiArIAotCQkJIk51bGwgdHlwZSBtaXNtYXRjaDogcmVxdWlyZWQgXCdATm9u
TnVsbCBTdHJpbmdcJyBidXQgdGhlIHByb3ZpZGVkIHZhbHVlIGlzIHNwZWNpZmllZCBhcyBATnVs
bGFibGVcbiIgKyAKKwkJCW1pc21hdGNoX05vbk51bGxfTnVsbGFibGUoIlN0cmluZyIpICsgCiAJ
CQkiLS0tLS0tLS0tLVxuIiArIAogCQkJIjQuIFdBUk5JTkcgaW4gYnVnMzc0MTI5XFxUZXN0Lmph
dmEgKGF0IGxpbmUgMjUpXG4iICsgCiAJCQkiCXMgPSBjMmkuZ2V0SWQobiwgbik7IC8vIG5vIGFy
ZyBlcnJvciAoY2FuY2VsZWQgZGVmYXVsdCksIHJldHVybiByZXF1aXJlcyB1bmNoZWNrZWQgY29u
dmVyc2lvblxuIiArIAogCQkJIgkgICAgXl5eXl5eXl5eXl5eXl5eXG4iICsgCi0JCQkiTnVsbCB0
eXBlIHNhZmV0eTogVGhlIGV4cHJlc3Npb24gb2YgdHlwZSBTdHJpbmcgbmVlZHMgdW5jaGVja2Vk
IGNvbnZlcnNpb24gdG8gY29uZm9ybSB0byBcJ0BOb25OdWxsIFN0cmluZ1wnXG4iICsgCisJCQlu
dWxsVHlwZVNhZmV0eSgpICsgIlRoZSBleHByZXNzaW9uIG9mIHR5cGUgJ1N0cmluZycgbmVlZHMg
dW5jaGVja2VkIGNvbnZlcnNpb24gdG8gY29uZm9ybSB0byBcJ0BOb25OdWxsIFN0cmluZ1wnXG4i
ICsgCiAJCQkiLS0tLS0tLS0tLVxuIiArIAogCQkJIjUuIEVSUk9SIGluIGJ1ZzM3NDEyOVxcVGVz
dC5qYXZhIChhdCBsaW5lIDI2KVxuIiArIAogCQkJIglzID0gYzMuZ2V0SWQobiwgbik7IC8vIGVy
cm9yIG9uIGZpcnN0IGFyZyAobWV0aG9kIGRlZmF1bHQpXG4iICsgCiAJCQkiCSAgICAgICAgICAg
ICBeXG4iICsgCi0JCQkiTnVsbCB0eXBlIG1pc21hdGNoOiByZXF1aXJlZCBcJ0BOb25OdWxsIFN0
cmluZ1wnIGJ1dCB0aGUgcHJvdmlkZWQgdmFsdWUgaXMgc3BlY2lmaWVkIGFzIEBOdWxsYWJsZVxu
IiArIAorCQkJbWlzbWF0Y2hfTm9uTnVsbF9OdWxsYWJsZSgiU3RyaW5nIikgKyAKIAkJCSItLS0t
LS0tLS0tXG4iLAogCQlsaWJzLAogCQl0cnVlIC8qIHNob3VsZEZsdXNoKi8pOwpAQCAtNTM0Myw3
ICs1NDcwLDcgQEAgcHVibGljIHZvaWQgdGVzdEJ1ZzM4ODYzMF8yKCkgewogCQkiMS4gRVJST1Ig
aW4gWC5qYXZhIChhdCBsaW5lIDcpXG4iICsgCiAJCSIJU3lzdGVtLm91dC5wcmludGxuKGEudG9T
dHJpbmcoKSk7XG4iICsgCiAJCSIJICAgICAgICAgICAgICAgICAgIF5cbiIgKyAKLQkJIlBvdGVu
dGlhbCBudWxsIHBvaW50ZXIgYWNjZXNzOiBUaGUgdmFyaWFibGUgYSBtYXkgYmUgbnVsbCBhdCB0
aGlzIGxvY2F0aW9uXG4iICsgCisJCXZhcmlhYmxlTWF5QmVOdWxsKCJhIikgKyAKIAkJIi0tLS0t
LS0tLS1cbiIpOwogfQogCkBAIC01NDEyLDcgKzU1MzksNyBAQCBwdWJsaWMgY2xhc3MgQzIgaW1w
bGVtZW50cyBpMi5JMiB7CiAvLyBUZXN0IHdoZXRoZXIgbnVsbCBhbm5vdGF0aW9ucyBmcm9tIGEg
c3VwZXIgaW50ZXJmYWNlIGFyZSByZXNwZWN0ZWQKIC8vIENsYXNzIGFuZCBpdHMgc3VwZXIgaW50
ZXJmYWNlIGJvdGggcmVhZCBmcm9tIGJpbmFyeQogcHVibGljIHZvaWQgdGVzdEJ1ZzM4ODI4MV8w
MSgpIHsKLQlTdHJpbmcgcGF0aCA9IHRoaXMuZ2V0Q29tcGlsZXJUZXN0c1BsdWdpbkRpcmVjdG9y
eVBhdGgoKSArIEZpbGUuc2VwYXJhdG9yICsgIndvcmtzcGFjZSIgKyBGaWxlLnNlcGFyYXRvciAr
ICJUZXN0Mzg4MjgxLmphciI7CisJU3RyaW5nIHBhdGggPSB0aGlzLmdldENvbXBpbGVyVGVzdHNQ
bHVnaW5EaXJlY3RvcnlQYXRoKCkgKyBGaWxlLnNlcGFyYXRvciArICJ3b3Jrc3BhY2UiICsgRmls
ZS5zZXBhcmF0b3IgKyAiVGVzdDM4ODI4MSIrdGhpcy5URVNUX0pBUl9TVUZGSVg7CiAJU3RyaW5n
W10gbGlicyA9IG5ldyBTdHJpbmdbdGhpcy5MSUJTLmxlbmd0aCArIDFdOwogCVN5c3RlbS5hcnJh
eWNvcHkodGhpcy5MSUJTLCAwLCBsaWJzLCAwLCB0aGlzLkxJQlMubGVuZ3RoKTsKIAlsaWJzW3Ro
aXMuTElCUy5sZW5ndGhdID0gcGF0aDsKQEAgLTU0NDksNyArNTU3Niw3IEBAIHB1YmxpYyB2b2lk
IHRlc3RCdWczODgyODFfMDEoKSB7CiAvLyBUZXN0IHdoZXRoZXIgbnVsbCBhbm5vdGF0aW9ucyBm
cm9tIGEgc3VwZXIgaW50ZXJmYWNlIGFyZSByZXNwZWN0ZWQKIC8vIENsYXNzIGZyb20gc291cmNl
LCBpdHMgc3VwZXJzIChjbGFzcyArIHN1cGVyIGludGVyZmFjZSkgZnJvbSBiaW5hcnkKIHB1Ymxp
YyB2b2lkIHRlc3RCdWczODgyODFfMDIoKSB7Ci0JU3RyaW5nIHBhdGggPSB0aGlzLmdldENvbXBp
bGVyVGVzdHNQbHVnaW5EaXJlY3RvcnlQYXRoKCkgKyBGaWxlLnNlcGFyYXRvciArICJ3b3Jrc3Bh
Y2UiICsgRmlsZS5zZXBhcmF0b3IgKyAiVGVzdDM4ODI4MS5qYXIiOworCVN0cmluZyBwYXRoID0g
dGhpcy5nZXRDb21waWxlclRlc3RzUGx1Z2luRGlyZWN0b3J5UGF0aCgpICsgRmlsZS5zZXBhcmF0
b3IgKyAid29ya3NwYWNlIiArIEZpbGUuc2VwYXJhdG9yICsgIlRlc3QzODgyODEiK3RoaXMuVEVT
VF9KQVJfU1VGRklYOwogCVN0cmluZ1tdIGxpYnMgPSBuZXcgU3RyaW5nW3RoaXMuTElCUy5sZW5n
dGggKyAxXTsKIAlTeXN0ZW0uYXJyYXljb3B5KHRoaXMuTElCUywgMCwgbGlicywgMCwgdGhpcy5M
SUJTLmxlbmd0aCk7CiAJbGlic1t0aGlzLkxJQlMubGVuZ3RoXSA9IHBhdGg7CkBAIC01NDgzLDgg
KzU2MTAsOCBAQCBwdWJsaWMgdm9pZCB0ZXN0QnVnMzg4MjgxXzAyKCkgewogCQkiLS0tLS0tLS0t
LVxuIiArIAogCQkiMS4gRVJST1IgaW4gY3Rlc3RcXEMuamF2YSAoYXQgbGluZSA1KVxuIiArIAog
CQkiCVN5c3RlbS5vdXQucHJpbnRsbihhMS50b1N0cmluZygpKTsgICAvLyAoMSlcbiIgKyAKLQkJ
IgkgICAgICAgICAgICAgICAgICAgXl5cbiIgKyAKLQkJIlBvdGVudGlhbCBudWxsIHBvaW50ZXIg
YWNjZXNzOiBUaGUgdmFyaWFibGUgYTEgbWF5IGJlIG51bGwgYXQgdGhpcyBsb2NhdGlvblxuIiAr
IAorCQkiCSAgICAgICAgICAgICAgICAgICBeXlxuIiArCisJCXBvdE5QRV9udWxsYWJsZV9tYXli
ZW51bGwoIlRoZSB2YXJpYWJsZSBhMSIpICsKIAkJIi0tLS0tLS0tLS1cbiIgKyAKIAkJIjIuIEVS
Uk9SIGluIGN0ZXN0XFxDLmphdmEgKGF0IGxpbmUgNilcbiIgKyAKIAkJIglyZXR1cm4gbnVsbDsg
ICAgICAgICAgICAgICAgICAgICAgICAgLy8gKDIpXG4iICsgCkBAIC01NTExLDcgKzU2MzgsNyBA
QCBwdWJsaWMgdm9pZCB0ZXN0QnVnMzg4MjgxXzAyKCkgewogLy8gVGVzdCB3aGV0aGVyIG51bGwg
YW5ub3RhdGlvbnMgZnJvbSBhIHN1cGVyIGludGVyZmFjZSB0cmlnZ2VyIGFuIGVycm9yIGFnYWlu
c3QgdGhlIG92ZXJyaWRpbmcgaW1wbGVtZW50YXRpb24KIC8vIENsYXNzIGZyb20gc291cmNlLCBp
dHMgc3VwZXIgaW50ZXJmYWNlIGZyb20gYmluYXJ5CiBwdWJsaWMgdm9pZCB0ZXN0QnVnMzg4Mjgx
XzAzKCkgewotCVN0cmluZyBwYXRoID0gdGhpcy5nZXRDb21waWxlclRlc3RzUGx1Z2luRGlyZWN0
b3J5UGF0aCgpICsgRmlsZS5zZXBhcmF0b3IgKyAid29ya3NwYWNlIiArIEZpbGUuc2VwYXJhdG9y
ICsgIlRlc3QzODgyODEuamFyIjsKKwlTdHJpbmcgcGF0aCA9IHRoaXMuZ2V0Q29tcGlsZXJUZXN0
c1BsdWdpbkRpcmVjdG9yeVBhdGgoKSArIEZpbGUuc2VwYXJhdG9yICsgIndvcmtzcGFjZSIgKyBG
aWxlLnNlcGFyYXRvciArICJUZXN0Mzg4MjgxIit0aGlzLlRFU1RfSkFSX1NVRkZJWDsKIAlTdHJp
bmdbXSBsaWJzID0gbmV3IFN0cmluZ1t0aGlzLkxJQlMubGVuZ3RoICsgMV07CiAJU3lzdGVtLmFy
cmF5Y29weSh0aGlzLkxJQlMsIDAsIGxpYnMsIDAsIHRoaXMuTElCUy5sZW5ndGgpOwogCWxpYnNb
dGhpcy5MSUJTLmxlbmd0aF0gPSBwYXRoOwpAQCAtNTUzOSw4ICs1NjY2LDggQEAgcHVibGljIHZv
aWQgdGVzdEJ1ZzM4ODI4MV8wMygpIHsKIAkJIi0tLS0tLS0tLS1cbiIgKyAKIAkJIjEuIEVSUk9S
IGluIGN0ZXN0XFxDLmphdmEgKGF0IGxpbmUgNClcbiIgKyAKIAkJIglTeXN0ZW0ub3V0LnByaW50
bG4oYTEudG9TdHJpbmcoKSk7ICAgLy8gKDEpXG4iICsgCi0JCSIJICAgICAgICAgICAgICAgICAg
IF5eXG4iICsgCi0JCSJQb3RlbnRpYWwgbnVsbCBwb2ludGVyIGFjY2VzczogVGhlIHZhcmlhYmxl
IGExIG1heSBiZSBudWxsIGF0IHRoaXMgbG9jYXRpb25cbiIgKyAKKwkJIgkgICAgICAgICAgICAg
ICAgICAgXl5cbiIgKworCQlwb3ROUEVfbnVsbGFibGVfbWF5YmVudWxsKCJUaGUgdmFyaWFibGUg
YTEiKSArCiAJCSItLS0tLS0tLS0tXG4iICsgCiAJCSIyLiBFUlJPUiBpbiBjdGVzdFxcQy5qYXZh
IChhdCBsaW5lIDUpXG4iICsgCiAJCSIJcmV0dXJuIG51bGw7ICAgICAgICAgICAgICAgICAgICAg
ICAgIC8vICgyKVxuIiArIApAQCAtNTU0OSw4ICs1Njc2LDggQEAgcHVibGljIHZvaWQgdGVzdEJ1
ZzM4ODI4MV8wMygpIHsKIAkJIi0tLS0tLS0tLS1cbiIgKyAKIAkJIjMuIEVSUk9SIGluIGN0ZXN0
XFxDLmphdmEgKGF0IGxpbmUgMTIpXG4iICsgCiAJCSIJU3lzdGVtLm91dC5wcmludGxuKGExLnRv
U3RyaW5nKCkpOyAgIC8vICgzKVxuIiArIAotCQkiCSAgICAgICAgICAgICAgICAgICBeXlxuIiAr
IAotCQkiUG90ZW50aWFsIG51bGwgcG9pbnRlciBhY2Nlc3M6IFRoZSB2YXJpYWJsZSBhMSBtYXkg
YmUgbnVsbCBhdCB0aGlzIGxvY2F0aW9uXG4iICsgCisJCSIJICAgICAgICAgICAgICAgICAgIF5e
XG4iICsKKwkJcG90TlBFX251bGxhYmxlX21heWJlbnVsbCgiVGhlIHZhcmlhYmxlIGExIikgKwog
CQkiLS0tLS0tLS0tLVxuIiwKIAkJbGlicywJCQogCQl0cnVlIC8qIHNob3VsZEZsdXNoKi8sCkBA
IC01NTkyLDcgKzU3MTksNyBAQCBwdWJsaWMgdm9pZCB0ZXN0QnVnMzg4MjgxXzA0KCkgewogCQki
MS4gRVJST1IgaW4gY3Rlc3RcXEMuamF2YSAoYXQgbGluZSA1KVxuIiArIAogCQkiCVN5c3RlbS5v
dXQucHJpbnRsbihzMi50b1N0cmluZygpKTsgICAvLyAoMSlcbiIgKyAKIAkJIgkgICAgICAgICAg
ICAgICAgICAgXl5cbiIgKyAKLQkJIlBvdGVudGlhbCBudWxsIHBvaW50ZXIgYWNjZXNzOiBUaGUg
dmFyaWFibGUgczIgbWF5IGJlIG51bGwgYXQgdGhpcyBsb2NhdGlvblxuIiArIAorCQl2YXJpYWJs
ZU1heUJlTnVsbCgiczIiKSArCiAJCSItLS0tLS0tLS0tXG4iICsgCiAJCSIyLiBFUlJPUiBpbiBj
dGVzdFxcQy5qYXZhIChhdCBsaW5lIDYpXG4iICsgCiAJCSIJcmV0dXJuIG51bGw7ICAgICAgICAg
ICAgICAgICAgICAgICAgIC8vICgyKVxuIiArIApAQCAtNTYwMiw3ICs1NzI5LDcgQEAgcHVibGlj
IHZvaWQgdGVzdEJ1ZzM4ODI4MV8wNCgpIHsKIAkJIjMuIEVSUk9SIGluIGN0ZXN0XFxDLmphdmEg
KGF0IGxpbmUgOSlcbiIgKyAKIAkJIglTeXN0ZW0ub3V0LnByaW50bG4oczEudG9TdHJpbmcoKSk7
ICAgLy8gKDMpXG4iICsgCiAJCSIJICAgICAgICAgICAgICAgICAgIF5eXG4iICsgCi0JCSJQb3Rl
bnRpYWwgbnVsbCBwb2ludGVyIGFjY2VzczogVGhlIHZhcmlhYmxlIHMxIG1heSBiZSBudWxsIGF0
IHRoaXMgbG9jYXRpb25cbiIgKyAKKwkJdmFyaWFibGVNYXlCZU51bGwoInMxIikgKwogCQkiLS0t
LS0tLS0tLVxuIik7CiB9CiAKQEAgLTU2MTEsNyArNTczOCw3IEBAIHB1YmxpYyB2b2lkIHRlc3RC
dWczODgyODFfMDQoKSB7CiAvLyBDbGFzcyBmcm9tIHNvdXJjZSwgaXRzIHN1cGVyIGludGVyZmFj
ZSBmcm9tIGJpbmFyeQogLy8gU3VwZXIgaW50ZXJmYWNlIHN1YmplY3QgdG8gcGFja2FnZSBsZXZl
bCBATm9uTnVsbEJ5RGVmYXVsdAogcHVibGljIHZvaWQgdGVzdEJ1ZzM4ODI4MV8wNSgpIHsKLQlT
dHJpbmcgcGF0aCA9IHRoaXMuZ2V0Q29tcGlsZXJUZXN0c1BsdWdpbkRpcmVjdG9yeVBhdGgoKSAr
IEZpbGUuc2VwYXJhdG9yICsgIndvcmtzcGFjZSIgKyBGaWxlLnNlcGFyYXRvciArICJUZXN0Mzg4
MjgxLmphciI7CisJU3RyaW5nIHBhdGggPSB0aGlzLmdldENvbXBpbGVyVGVzdHNQbHVnaW5EaXJl
Y3RvcnlQYXRoKCkgKyBGaWxlLnNlcGFyYXRvciArICJ3b3Jrc3BhY2UiICsgRmlsZS5zZXBhcmF0
b3IgKyAiVGVzdDM4ODI4MSIrdGhpcy5URVNUX0pBUl9TVUZGSVg7CiAJU3RyaW5nW10gbGlicyA9
IG5ldyBTdHJpbmdbdGhpcy5MSUJTLmxlbmd0aCArIDFdOwogCVN5c3RlbS5hcnJheWNvcHkodGhp
cy5MSUJTLCAwLCBsaWJzLCAwLCB0aGlzLkxJQlMubGVuZ3RoKTsKIAlsaWJzW3RoaXMuTElCUy5s
ZW5ndGhdID0gcGF0aDsKQEAgLTU2NjQsNyArNTc5MSw3IEBAIHB1YmxpYyB2b2lkIHRlc3RCdWcz
ODgyODFfMDUoKSB7CiAvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5j
Z2k/aWQ9Mzg4MjgxCiAvLyBDb25mbGljdGluZyBhbm5vdGF0aW9ucyBmcm9tIHNldmVyYWwgaW5k
aXJlY3Qgc3VwZXIgaW50ZXJmYWNlcyBtdXN0IGJlIGRldGVjdGVkCiBwdWJsaWMgdm9pZCB0ZXN0
QnVnMzg4MjgxXzA2KCkgewotCVN0cmluZyBwYXRoID0gdGhpcy5nZXRDb21waWxlclRlc3RzUGx1
Z2luRGlyZWN0b3J5UGF0aCgpICsgRmlsZS5zZXBhcmF0b3IgKyAid29ya3NwYWNlIiArIEZpbGUu
c2VwYXJhdG9yICsgIlRlc3QzODgyODEuamFyIjsKKwlTdHJpbmcgcGF0aCA9IHRoaXMuZ2V0Q29t
cGlsZXJUZXN0c1BsdWdpbkRpcmVjdG9yeVBhdGgoKSArIEZpbGUuc2VwYXJhdG9yICsgIndvcmtz
cGFjZSIgKyBGaWxlLnNlcGFyYXRvciArICJUZXN0Mzg4MjgxIit0aGlzLlRFU1RfSkFSX1NVRkZJ
WDsKIAlTdHJpbmdbXSBsaWJzID0gbmV3IFN0cmluZ1t0aGlzLkxJQlMubGVuZ3RoICsgMV07CiAJ
U3lzdGVtLmFycmF5Y29weSh0aGlzLkxJQlMsIDAsIGxpYnMsIDAsIHRoaXMuTElCUy5sZW5ndGgp
OwogCWxpYnNbdGhpcy5MSUJTLmxlbmd0aF0gPSBwYXRoOwpAQCAtNTc0NCw3ICs1ODcxLDcgQEAg
cHVibGljIHZvaWQgdGVzdEJ1ZzM4ODI4MV8wNygpIHsKIAkJIjMuIEVSUk9SIGluIHAyXFxTdWIu
amF2YSAoYXQgbGluZSA3KVxuIiArIAogCQkiCVN5c3RlbS5vdXQucHJpbnRsbihhcmcudG9TdHJp
bmcoKSk7IC8vICgxKVxuIiArIAogCQkiCSAgICAgICAgICAgICAgICAgICBeXl5cbiIgKyAKLQkJ
IlBvdGVudGlhbCBudWxsIHBvaW50ZXIgYWNjZXNzOiBUaGUgdmFyaWFibGUgYXJnIG1heSBiZSBu
dWxsIGF0IHRoaXMgbG9jYXRpb25cbiIgKyAKKwkJdmFyaWFibGVNYXlCZU51bGwoImFyZyIpICsK
IAkJIi0tLS0tLS0tLS1cbiIgKyAKIAkJIi0tLS0tLS0tLS1cbiIgKyAKIAkJIjEuIEVSUk9SIGlu
IENsaWVudC5qYXZhIChhdCBsaW5lIDQpXG4iICsgCkBAIC01NzU3LDcgKzU4ODQsNyBAQCBwdWJs
aWMgdm9pZCB0ZXN0QnVnMzg4MjgxXzA3KCkgewogLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3Jn
L2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM4ODI4MQogLy8gcmVwb3J0IGNvbmZsaWN0IGJldHdlZW4g
aW5oZXJpdGFuY2UgYW5kIGRlZmF1bHQgLSBiaW5hcnkgdHlwZXMKIHB1YmxpYyB2b2lkIHRlc3RC
dWczODgyODFfMDgoKSB7Ci0JU3RyaW5nIHBhdGggPSB0aGlzLmdldENvbXBpbGVyVGVzdHNQbHVn
aW5EaXJlY3RvcnlQYXRoKCkgKyBGaWxlLnNlcGFyYXRvciArICJ3b3Jrc3BhY2UiICsgRmlsZS5z
ZXBhcmF0b3IgKyAiVGVzdDM4ODI4MS5qYXIiOworCVN0cmluZyBwYXRoID0gdGhpcy5nZXRDb21w
aWxlclRlc3RzUGx1Z2luRGlyZWN0b3J5UGF0aCgpICsgRmlsZS5zZXBhcmF0b3IgKyAid29ya3Nw
YWNlIiArIEZpbGUuc2VwYXJhdG9yICsgIlRlc3QzODgyODEiK3RoaXMuVEVTVF9KQVJfU1VGRklY
OwogCVN0cmluZ1tdIGxpYnMgPSBuZXcgU3RyaW5nW3RoaXMuTElCUy5sZW5ndGggKyAxXTsKIAlT
eXN0ZW0uYXJyYXljb3B5KHRoaXMuTElCUywgMCwgbGlicywgMCwgdGhpcy5MSUJTLmxlbmd0aCk7
CiAJbGlic1t0aGlzLkxJQlMubGVuZ3RoXSA9IHBhdGg7CkBAIC01ODAxLDggKzU5MjgsOCBAQCBw
dWJsaWMgdm9pZCB0ZXN0QnVnMzg4MjgxXzA4KCkgewogCQkiLS0tLS0tLS0tLVxuIiArIAogCQki
My4gRVJST1IgaW4gY3Rlc3RcXEN0ZXN0LmphdmEgKGF0IGxpbmUgMTIpXG4iICsgCiAJCSIJU3lz
dGVtLm91dC5wcmludGxuKG8xLnRvU3RyaW5nKCkpOyAvLyAoMSkgaW5oZXJpdGVkIEBOdWxsYWJs
ZVxuIiArIAotCQkiCSAgICAgICAgICAgICAgICAgICBeXlxuIiArIAotCQkiUG90ZW50aWFsIG51
bGwgcG9pbnRlciBhY2Nlc3M6IFRoZSB2YXJpYWJsZSBvMSBtYXkgYmUgbnVsbCBhdCB0aGlzIGxv
Y2F0aW9uXG4iICsgCisJCSIJICAgICAgICAgICAgICAgICAgIF5eXG4iICsKKwkJcG90TlBFX251
bGxhYmxlX21heWJlbnVsbCgiVGhlIHZhcmlhYmxlIG8xIikgKwogCQkiLS0tLS0tLS0tLVxuIiAr
IAogCQkiNC4gRVJST1IgaW4gY3Rlc3RcXEN0ZXN0LmphdmEgKGF0IGxpbmUgMTMpXG4iICsgCiAJ
CSIJcmV0dXJuIG51bGw7IC8vICgyKSBATm9uTnVsbEJ5RGVmYXVsdCBpbiBpMi5JSVxuIiArIApA
QCAtNTk5Myw3ICs2MTIwLDcgQEAgcHVibGljIHZvaWQgdGVzdEJ1ZzM4MjA2OV9rKCkgewogCQkJ
IjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxMSlcbiIgKyAKIAkJCSIJcmV0dXJuIG8xLmxl
bmd0aCgpOyAvLyBubyBsb25nZXIgcHJvdGVjdGVkXG4iICsgCiAJCQkiCSAgICAgICBeXlxuIiAr
IAotCQkJIlBvdGVudGlhbCBudWxsIHBvaW50ZXIgYWNjZXNzOiBUaGUgZmllbGQgbzEgaXMgZGVj
bGFyZWQgYXMgQE51bGxhYmxlXG4iICsgCisJCQlwb3ROUEVfbnVsbGFibGUoIlRoZSBmaWVsZCBv
MSIpICsgCiAJCQkiLS0tLS0tLS0tLVxuIik7CiB9CiAvL2h0dHBzOi8vYnVncy5lY2xpcHNlLm9y
Zy80MDA3NjE6IFtjb21waWxlcl1bbnVsbF0gbnVsbCBtYXkgYmUgcmV0dXJuIGFzIGJvb2xlYW4g
d2l0aG91dCBhIGRpYWdub3N0aWMK
</data>

          </attachment>
      

    </bug>

</bugzilla>