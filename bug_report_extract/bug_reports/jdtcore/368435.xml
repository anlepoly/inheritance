<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>368435</bug_id>
          
          <creation_ts>2012-01-12 05:56:00 -0500</creation_ts>
          <short_desc>[compiler] NPE while compile a method with unused local</short_desc>
          <delta_ts>2014-03-03 09:49:32 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>3.7.2</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Olliver Johann">ojohann</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>daniel_megert</cc>
    
    <cc>jarthana</cc>
    
    <cc>Olivier_Thomann</cc>
    
    <cc>patric</cc>
    
    <cc>roger.butenuth</cc>
    
    <cc>satyam.kandula</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      <flag name="pmc_approved"
          id="48013"
          type_id="2"
          status="+"
          setter="daniel_megert"
    />
    <flag name="review"
          id="47965"
          type_id="1"
          status="+"
          setter="stephan.herrmann"
    />
    <flag name="review"
          id="47966"
          type_id="1"
          status="+"
          setter="Olivier_Thomann"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2049400</commentid>
    <comment_count>0</comment_count>
    <who name="Olliver Johann">ojohann</who>
    <bug_when>2012-01-12 05:56:09 -0500</bug_when>
    <thetext>Build Identifier: I20110613-1736

with https://bugs.eclipse.org/bugs/show_bug.cgi?id=328519 you have made an change in the jdt java compiler.

since this change you cant create class files from the attached code.

in my oppinion is this an error in the java compile.

see AbstractMethodDeclaration.java / generateCode(ClassScope classScope, ClassFile classFile) {...}

thx.

Olliver Johann

Reproducible: Always

Steps to Reproduce:
1. see eclipse project
2. compile java-files
3. check class files</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2049402</commentid>
    <comment_count>1</comment_count>
      <attachid>209361</attachid>
    <who name="Olliver Johann">ojohann</who>
    <bug_when>2012-01-12 05:57:36 -0500</bug_when>
    <thetext>Created attachment 209361
eclipse project with src

eclipse project with src</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2049424</commentid>
    <comment_count>2</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-01-12 06:38:46 -0500</bug_when>
    <thetext>I couldn&apos;t reproduce this with 3.8M4.

You are saying that the given two java files in the attached zip don&apos;t compile? What compile error do you get? I could compile and even run those files alright.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2049427</commentid>
    <comment_count>3</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-01-12 06:42:50 -0500</bug_when>
    <thetext>Sorry I could reproduce this if I import the whole project. Individually those 2 java classes don&apos;t cause a problem.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2049430</commentid>
    <comment_count>4</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-01-12 06:46:31 -0500</bug_when>
    <thetext>The bug happens only when &quot;Preserve unused locals&quot; is disabled.
So the workaround is to enable that option till this gets fixed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2049439</commentid>
    <comment_count>5</comment_count>
    <who name="Olliver Johann">ojohann</who>
    <bug_when>2012-01-12 07:03:58 -0500</bug_when>
    <thetext>We have found this error in our project with a tomcat v7_21 with use ecj-3.7.jar.
In this envirorment it is not possible to enable &quot;Preserve unused locals&quot; and the default is &quot;off&quot;.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2049482</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-12 08:33:15 -0500</bug_when>
    <thetext>Wow. A very interesting problem indeed.

Bug arises due to interplay between the two restart modes
one for goto_w generation and another for unused local handling
introduced for https://bugs.eclipse.org/bugs/show_bug.cgi?id=185682.

Having restarted for one cause, when we are forced to restart for
another, we claim it is futile to do so having attempted restart
already.

Fix is to encode the reason for restart so we don&apos;t attempt the
same restart twice, but will accommodate disparate restart requests.
Patch will follow shortly.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2049501</commentid>
    <comment_count>7</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-01-12 08:54:41 -0500</bug_when>
    <thetext>Seems like another candidate in the works for 3.7.2!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2049525</commentid>
    <comment_count>8</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-01-12 09:33:50 -0500</bug_when>
    <thetext>I wish we would have gotten rid of the restart from bug 328519, sigh.

Somehow we never finished the discussion in bug 328830, which btw. has a 
lot of background info on this issue.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2049592</commentid>
    <comment_count>9</comment_count>
      <attachid>209388</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-12 11:10:06 -0500</bug_when>
    <thetext>Created attachment 209388
Patch under test</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2049684</commentid>
    <comment_count>10</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-12 13:25:02 -0500</bug_when>
    <thetext>Released in 3.8 M5 via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=6d6867f51ab2593e87423b03682d06ffbcaebc01.

Ayush, please review for possible 3.7.2 inclusion.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2049685</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-12 13:26:19 -0500</bug_when>
    <thetext>Stephan, please review for 3.7.2 possible inclusion. TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2049811</commentid>
    <comment_count>12</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-01-12 18:25:31 -0500</bug_when>
    <thetext>(In reply to comment #11)
&gt; Stephan, please review for 3.7.2 possible inclusion. TIA.

With memories of non-termination due to infinite restarts 
(see bug 328830 comment 22) I&apos;m reluctant to approve this patch.
Aren&apos;t we now abandoning our back door out of the restart loop?
Are we sure that the number of restarts is finite? How?

Srikanth, do you have a good story to comfort my worries?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2049835</commentid>
    <comment_count>13</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-12 20:00:13 -0500</bug_when>
    <thetext>(In reply to comment #12)
&gt; (In reply to comment #11)
&gt; &gt; Stephan, please review for 3.7.2 possible inclusion. TIA.
&gt; 
&gt; With memories of non-termination due to infinite restarts 
&gt; (see bug 328830 comment 22) I&apos;m reluctant to approve this patch.
&gt; Aren&apos;t we now abandoning our back door out of the restart loop?
&gt; Are we sure that the number of restarts is finite? How?
&gt; 
&gt; Srikanth, do you have a good story to comfort my worries?

Hakuna matata !

It is easier to review this patch in 3.8 HEAD by comparing
with previous element than by looking at the patch posted.

Some observations:

-- All changes are under an if of the form:
   if (e.compilationResult == CodeStream.RESTART_IN_WIDE_MODE)
   So any behavior change can come about only when the most recent
   abort cause is branch offset overflow.
-- We want to support RESTART_IN_WIDE_MODE arising after a
   potential RESTART_CODE_GEN_FOR_UNUSED_LOCALS_MODE. In fact
   the current bug is due to our failing to do so.
-- The number of RESTART_IN_WIDE_MODE&apos;s not only finite, but is
   exactly one. See that the throws of the form:
   throw new AbortMethod(CodeStream.RESTART_IN_WIDE_MODE, null);
   are guarded by checks to if !this.wideMode.
-- codeStream.wideMode is not altered within the code generation
   loop after it is set to wide mode just before restart.

I think it is a good idea to mark Olivier for review since he made
some changes around this area recently. Olivier, if you have a moment,
appreciate a quick review. TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2049840</commentid>
    <comment_count>14</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-12 20:02:56 -0500</bug_when>
    <thetext>(In reply to comment #13)

&gt; -- codeStream.wideMode is not altered within the code generation
&gt;    loop after it is set to wide mode just before restart.

BTW, the only reset that happens happens in AMD.generateCode(..)
at the top. Similar resets should be there in CDi.java and 
Clinit.java - No ? The absence is harmless (though will generate
slightly bigger class files.)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2049869</commentid>
    <comment_count>15</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-12 22:13:07 -0500</bug_when>
    <thetext>(In reply to comment #13)

&gt; -- codeStream.wideMode is not altered within the code generation
&gt;    loop after it is set to wide mode just before restart.

(In reply to comment #14)

&gt; BTW, the only reset that happens happens in AMD.generateCode(..)
&gt; at the top.

See that AMD.generateCode itself may be reentered while compiling
something like:

public class X {
	void foo() {
		new X() {
			void goo() { // reenter generate code for method
			}
		};
	}
}

but this will be for a different class file and a different code stream.
Since methods of a class don&apos;t nest and further since the wide mode flag
is an instance variable, we are good.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2049871</commentid>
    <comment_count>16</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-12 22:27:28 -0500</bug_when>
    <thetext>Confirmed that this problem exists on 3.7.1.

How common is this problem and what is required to
trigger it ? 

-- During code generation there should be a requirement for a
   goto bytecode whose target is &gt; 7FFF in either direction.
   e.g: if ( ... ) {
        // huge block of code here...
        }

   Think of generated code.

AND

-- Later stages of code generation discovering that they need to
   emit some local variable which earlier phases thought was unused.

Workarounds:

-- Per comment#4, set &quot;Preserve unused locals&quot; to on.
-- Tweak the code to &quot;use&quot; those variables - this can be hard
   to figure out.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2049875</commentid>
    <comment_count>17</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-12 22:38:46 -0500</bug_when>
    <thetext>(In reply to comment #6)

&gt; Fix is to encode the reason for restart so we don&apos;t attempt the
&gt; same restart twice, but will accommodate disparate restart requests.
&gt; Patch will follow shortly.

For the record, this was the not the fix adopted. We now use a 
simpler restart loop which recognizes that a restart in wide 
mode can happen but once per method.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2049881</commentid>
    <comment_count>18</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-12 22:50:56 -0500</bug_when>
    <thetext>(In reply to comment #3)
&gt; Sorry I could reproduce this if I import the whole project. Individually those
&gt; 2 java classes don&apos;t cause a problem.

Actually one of them always fails to compile and the other does compile
fine. The broken case is enough, the good one is there just to show
(I think) that some incremental changes break the compiler (by
causing the branch offsets to overflow)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2049920</commentid>
    <comment_count>19</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-13 02:05:10 -0500</bug_when>
    <thetext>Already released for 3.8 M5.

Based on review feedback, will decide the course of
action for 3.7.2.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2049936</commentid>
    <comment_count>20</comment_count>
    <who name="Roger Butenuth">roger.butenuth</who>
    <bug_when>2012-01-13 02:42:27 -0500</bug_when>
    <thetext>(In reply to comment #18)
&gt; (In reply to comment #3)
&gt; &gt; Sorry I could reproduce this if I import the whole project. Individually those
&gt; &gt; 2 java classes don&apos;t cause a problem.
&gt; 
&gt; Actually one of them always fails to compile and the other does compile
&gt; fine. The broken case is enough, the good one is there just to show
&gt; (I think) that some incremental changes break the compiler (by
&gt; causing the branch offsets to overflow)

This is not true, both fail (if preserve locals == false), but in different ways:
 - CheckCompile does not show any error in Eclipse, but the compiled class is broken (contains only a throw with &quot;unresolved compilation problem&quot;.
 - CheckCompileSimple causes a NPE in the compiler</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2049957</commentid>
    <comment_count>21</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-13 03:50:12 -0500</bug_when>
    <thetext>(In reply to comment #20)

[...]

&gt; &gt; fine. The broken case is enough, the good one is there just to show
&gt; &gt; (I think) that some incremental changes break the compiler (by
&gt; &gt; causing the branch offsets to overflow)
&gt; 
&gt; This is not true, both fail (if preserve locals == false), but in different
&gt; ways:
&gt;  - CheckCompile does not show any error in Eclipse, but the compiled class is
&gt; broken (contains only a throw with &quot;unresolved compilation problem&quot;.
&gt;  - CheckCompileSimple causes a NPE in the compiler

I see, Thanks for the clarification. I had observed this dual failure
mode, but hadn&apos;t realized that the two test cases are showcase each
problem.

The patch fixes both issues :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2050178</commentid>
    <comment_count>22</comment_count>
    <who name="Roger Butenuth">roger.butenuth</who>
    <bug_when>2012-01-13 10:58:47 -0500</bug_when>
    <thetext>(In reply to comment #21)
&gt; (In reply to comment #20)
&gt; 
&gt; [...]

What about 3.7.2? The bug is quite nasty: You get a corrupt class file without an error message during compile.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2050192</commentid>
    <comment_count>23</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-13 11:15:07 -0500</bug_when>
    <thetext>(In reply to comment #22)

&gt; What about 3.7.2? The bug is quite nasty: You get a corrupt class file without
&gt; an error message during compile.

See comment#19. We are in 3.7.2 RC2, so multiple reviews are required
and have been requested.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2051053</commentid>
    <comment_count>24</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2012-01-16 11:33:11 -0500</bug_when>
    <thetext>Looks good to me.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2051356</commentid>
    <comment_count>25</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-16 23:18:10 -0500</bug_when>
    <thetext>(In reply to comment #24)
&gt; Looks good to me.

Thanks Olivier.

Stephan, sorry to nag while you are busy, this needs two reviews and 
needs to make it to RC2 build 18 Jan if possible.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2051476</commentid>
    <comment_count>26</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-17 06:59:52 -0500</bug_when>
    <thetext>Dani, even as we are waiting for a second review, a heads up
that this needs a back port. Ideally for RC2.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2051521</commentid>
    <comment_count>27</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2012-01-17 08:29:05 -0500</bug_when>
    <thetext>(In reply to comment #26)
&gt; Dani, even as we are waiting for a second review, a heads up
&gt; that this needs a back port. Ideally for RC2.

This is a severe regression that got introduced during 3.7. I verified that the patch fixes the problem but did not do a full code review.

+1 to backport once we have the second review.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2051613</commentid>
    <comment_count>28</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-01-17 10:57:33 -0500</bug_when>
    <thetext>To turn my vague memories into knowledge I traveled back in time to the time of bug 328830 comment 22. The issue back then did not involve restart for wide mode but arose because a restart for unused locals was not able to remedy its cause. This happened because in a method in a local class by referring to a local from the enclosing method we made that local relevant - the restart was unsuccessful because it could only influence generating locals in the current method, but  would have needed to influence the enclosing method.
We are still only a few line changes apart from that situation occurring again, and for restart for local generation it is not easy to show the absence of infinite regression. That&apos;s why I still think this use of the restart mechanisms should be backed out.

So much for the records.

For the current bug I understand that the patch only affects restart for wide mode. For this case and based on the clear reasoning in comment 13 I&apos;m convinced that restart will happen at most once per method. Thus the change is safe.

For further follow-up regarding comment 14 one should check if the comment in Clinit is still relevant (&quot;// should never occur ...&quot;).

+1 for backporting.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2051653</commentid>
    <comment_count>29</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-01-17 11:27:44 -0500</bug_when>
    <thetext>(In reply to comment #28)

&gt; and for restart for local generation it is not easy to show the absence of
&gt; infinite regression. That&apos;s why I still think this use of the restart
&gt; mechanisms should be backed out.

Can you raise a separate defect for this ? Or is bug 328830 the right one
to discuss this ?

&gt; +1 for backporting.

Ayush, can you please release this in 3.7.2 stream along with the fix for
bug 361963, TIA. 

Jay - FYI.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2051666</commentid>
    <comment_count>30</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-01-17 11:41:14 -0500</bug_when>
    <thetext>(In reply to comment #29)
&gt; (In reply to comment #28)
&gt; 
&gt; &gt; and for restart for local generation it is not easy to show the absence of
&gt; &gt; infinite regression. That&apos;s why I still think this use of the restart
&gt; &gt; mechanisms should be backed out.
&gt; 
&gt; Can you raise a separate defect for this ? Or is bug 328830 the right one
&gt; to discuss this ?

I don&apos;t think we need a new bug, bug 328830 has all the context and all the options.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2051850</commentid>
    <comment_count>31</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-01-17 15:58:50 -0500</bug_when>
    <thetext>(In reply to comment #29) 
&gt; Ayush, can you please release this in 3.7.2 stream along with the fix for
&gt; bug 361963

http://images.fanpop.com/images/image_uploads/i-can-but-i-won-t--garfield-262532_1024_768.jpg

PS: Just kidding :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2051997</commentid>
    <comment_count>32</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-01-18 01:17:34 -0500</bug_when>
    <thetext>Released into 3.7 maintenance via commit 8d116352a80813f7ae91cb458eb818290b4d92c0</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2052747</commentid>
    <comment_count>33</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-01-19 05:33:19 -0500</bug_when>
    <thetext>Verified for 3.7.2RC2 using build M20120118-0800</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2078480</commentid>
    <comment_count>34</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-03-12 02:04:58 -0400</bug_when>
    <thetext>This seem to have been missed out in our M5 verification. Marking it for M6.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2078768</commentid>
    <comment_count>35</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2012-03-12 10:34:41 -0400</bug_when>
    <thetext>Verified for 3.8M6 using build I20120306-0800</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>209361</attachid>
            <date>2012-01-12 05:57:00 -0500</date>
            <delta_ts>2012-01-12 05:57:36 -0500</delta_ts>
            <desc>eclipse project with src</desc>
            <filename>CheckCompile.zip</filename>
            <type>application/x-zip-compressed</type>
            <size>5403</size>
            <attacher name="Olliver Johann">ojohann</attacher>
            
              <data encoding="base64">UEsDBAoAAAAAALNNLEAAAAAAAAAAAAAAAAANAKYAQ2hlY2tDb21waWxlL1NEkQAEAgAAAAgA/bxy
t2NkYGkQYWBgMGCAAB8gZmQFM1lFgcR6kXm65dVPGRIN5MybBXHLMTIxMDAx7GDkAclyqoBIAWS1
v6LLrZRtDcU7ZLLMF4HEmVQY/jPKM+BVg8UcZDuBFmI1B0MNAXMiWAibA1ZDwF+5OMzBUEPAnGgi
wicaET4LcLlZB2rOSgYhnP4CqQEAVVQNAAexnQ5PArkOT7GdDk9QSwMECgAAAAAAs00sQAAAAAAA
AAAAAAAAABUApgBDaGVja0NvbXBpbGUvY2xhc3Nlcy9TRJEABAIAAAAIAP28crdjZGBpEGFgYDBg
gAAfIGZkBTNZRYHEepF5uuXVTxkSDeTMmwVxyzEyMTAwMexg5AHJcqqASAFktb+iy62UbQ3FO2Sy
zBeBxJlUGP4zyjPgVYPFHGQ7gRZiNQdDDQFzIlgImwNWQ8BfuTjMwVBDwJxoIsInGhE+C3C5WQdq
zkoGIZz+AqkBAFVUDQAHsZ0OT+S6Dk+xnQ5PUEsDBBQAAAAIAJRNLECAEd9vIAQAAHNLBAAoAIQA
Q2hlY2tDb21waWxlL3NyYy9DaGVja0NvbXBpbGVTaW1wbGUuamF2YVNEbwAsAQAAAAgAc7HwOWNk
YGkQYWBgMGCAAB8gZmQFM1lFgcR6kXm65dVPGRIN5MybBXHLMTIxMDAxPGBgA0urMPxnlEdR+yu6
3ErZ1lC8QybLfBErdjXI5gENI6gmgoWwXblEqImGumclgxBOu3SA4gBVVA0AB3idDk+xnQ5PsZ0O
T+3QPUsDQRAA0D6Q/7BYRYQQKwvRxlar2InFua5x8e4S7i5qlPx3TxI0goKVhbxhYb/ezA47HCyW
N2WOIZZF24az+xQfzubVIpdpmqtFmcLrcDAchD62sO2Krp8e5/k2VEWuR9OuyfXs6joUzazdf/dh
G99UizGchDo9fXM32j/+TI1xvOjLdh+H6482mvxYdGnTwNbsPtofhNw/Mtmplu/CaLpqu1SN47Jp
Ut1d5ipd5LLMbZ99Gg6PJpPJ+Zc677HNmS+7TTdlPcoHB7t9/qD2ipu49xv3vHrhOI7jOI7jOI7j
OI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7j
OI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7j
OI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7j
OI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7j
OI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7j
OI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7j
OI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7j
OI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7j
OI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7j
OI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7j
OI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7jOI7j
OI7jOI7jOI7jOI7jOI7jOO4P3OduHVLZpvD6071f5DiO4ziO4ziO4ziO4ziO4ziO4ziO4ziO4ziO
4ziO4ziO4ziO4ziO4ziO4ziO4ziO4ziO4ziO4ziO4ziO4ziO4ziO4ziO4ziO4ziO4ziO4ziO4ziO
4ziO4ziO4ziO4ziO4ziO4ziO4ziO4ziO4ziO4ziO4ziO4ziO4ziO4ziO4ziO4ziO4ziO4ziO4ziO
4ziO4ziO4ziO4ziO4ziO4ziO4ziO+59uvVn2Uz/eAFBLAwQUAAAACADhSixAr51297gAAAAxAQAA
FwCEAENoZWNrQ29tcGlsZS8uY2xhc3NwYXRoU0RvACwBAAAACABzsfA5Y2RgaRBhYGAwYIAAHyBm
ZAUzWUWBxHqRebrl1U8ZEg3kzJsFccsxMjEwMDE8YGADS6sw/GeUR1H7K7rcStnWULxDJst8ESt2
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
fn46zm5fyBYvZOXv7HuYXd53fVqexE3bpqb/kpfpIpeSu2Hz5/Dh43w+Px99w1Pte1abfveS0sxu
q+rwjf9QR/VVPHqL+3X/m+M4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4
juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4
juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4
juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4
juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4
juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4
juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4
juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4
juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4
juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4
juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4
juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juM4juO4/+Be7VpU1WHPNqTSpfDw
al8Z971plz/CcRzHcRzHcRzHcRzHcRzHcRzHcRzHcRzHcRzHcRzHcRzHcRzHcRzHcRzHcRzHcRzH
cRzHcRzHcRzHcRzHcRzHcRzHcRzHcRzHcRzHcRzHcRzHcRzHcRzHcRzHcRzHcRzHcRzHcRzHcRzH
cRzHcRzHcRzHcRzHcRzHcRzHcRzHcRzHcRzHcRzHcRzHcRzHcRzHcRzHcRzHcRzHcRzHcRzHcRz3
Pl2pqkO13V2HY7g9AlBLAQIWCwoAAAAAALNNLEAAAAAAAAAAAAAAAAANABEAAAAAAAAAEAD/QQAA
AABDaGVja0NvbXBpbGUvU0QEAAQCAABVVAUAB7GdDk9QSwECFgsKAAAAAACzTSxAAAAAAAAAAAAA
AAAAFQARAAAAAAAAABAA/0HRAAAAQ2hlY2tDb21waWxlL2NsYXNzZXMvU0QEAAQCAABVVAUAB7Gd
Dk9QSwECFgsUAAAACACUTSxAgBHfbyAEAABzSwQAKAARAAAAAAABACAAtoGqAQAAQ2hlY2tDb21w
aWxlL3NyYy9DaGVja0NvbXBpbGVTaW1wbGUuamF2YVNEBAAsAQAAVVQFAAd4nQ5PUEsBAhYLFAAA
AAgA4UosQK+ddve4AAAAMQEAABcAEQAAAAAAAQAgALaBlAYAAENoZWNrQ29tcGlsZS8uY2xhc3Nw
YXRoU0QEACwBAABVVAUAB2aYDk9QSwECFgsUAAAACADhSixA/vEYXcEAAACEAQAAFQARAAAAAAAB
ACAAtoEFCAAAQ2hlY2tDb21waWxlLy5wcm9qZWN0U0QEACwBAABVVAUAB2aYDk9QSwECFgsKAAAA
AACzTSxAAAAAAAAAAAAAAAAAFwARAAAAAAAAABAA/0F9CQAAQ2hlY2tDb21waWxlLy5zZXR0aW5n
cy9TRAQABAIAAFVUBQAHsZ0OT1BLAQIWCxQAAAAIAJ1NLEDOvkHc4gAAAHkCAAAxABEAAAAAAAEA
IAC2gVgKAABDaGVja0NvbXBpbGUvLnNldHRpbmdzL29yZy5lY2xpcHNlLmpkdC5jb3JlLnByZWZz
U0QEACwBAABVVAUAB4mdDk9QSwECFgsKAAAAAACzTSxAAAAAAAAAAAAAAAAAEQARAAAAAAAAABAA
/0ENDAAAQ2hlY2tDb21waWxlL3NyYy9TRAQABAIAAFVUBQAHsZ0OT1BLAQIWCxQAAAAIAB1NLECI
rmpsNwQAAA9MBAAiABEAAAAAAAEAIAC2geIMAABDaGVja0NvbXBpbGUvc3JjL0NoZWNrQ29tcGls
ZS5qYXZhU0QEACwBAABVVAUAB5mcDk9QSwUGAAAAAAkACQAoAwAA3REAAAAA
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>209388</attachid>
            <date>2012-01-12 11:10:00 -0500</date>
            <delta_ts>2012-01-12 11:10:06 -0500</delta_ts>
            <desc>Patch under test</desc>
            <filename>patch.txt</filename>
            <type>text/plain</type>
            <size>8398</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1hMYXJnZVRlc3QuamF2
YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1hMYXJnZVRlc3QuamF2YQppbmRleCBl
Y2I3Mzg3Li4yMTVjOWU2IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5j
b21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lv
bi9YTGFyZ2VUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGls
ZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vWExh
cmdlVGVzdC5qYXZhCkBAIC0xLDUgKzEsNSBAQAogLyoqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAq
IENvcHlyaWdodCAoYykgMjAwNSwgMjAxMSBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAq
IENvcHlyaWdodCAoYykgMjAwNSwgMjAxMiBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAq
IEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBt
YXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVj
bGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0
cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKQEAgLTMwLDYgKzMwLDEwMCBAQAogCXJldHVy
biBidWlsZEFsbENvbXBsaWFuY2VzVGVzdFN1aXRlKHRlc3RDbGFzcygpKTsKIH0KIAorLy8gaHR0
cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM2ODQzNQorcHVibGlj
IHZvaWQgdGVzdDM2ODQzNSgpIHsKKwlNYXAgc2V0dGluZ3MgPSBnZXRDb21waWxlck9wdGlvbnMo
KTsKKwlzZXR0aW5ncy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9QcmVzZXJ2ZVVudXNlZExv
Y2FsLCBDb21waWxlck9wdGlvbnMuT1BUSU1JWkVfT1VUKTsKKwlTdHJpbmdCdWZmZXIgc291cmNl
Q29kZSA9IG5ldyBTdHJpbmdCdWZmZXIoCisJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQki
ICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKworCQkJIiAg
ICAgICAgU3lzdGVtLm91dC5wcmludGxuKFwiU1VDQ0VTU1wiKTtcbiIgKworCQkJIiAgICB9XG4i
ICsKKwkJCSIgICAgcHVibGljIHZvaWQgcHJpbnQoKSB7XG4iICsKKwkJCSIgICAgICAgIGludCBp
ID0gMDtcbiIgKworCQkJIiAgICAgICAgaWYgKFN5c3RlbS5jdXJyZW50VGltZU1pbGxpcygpID4g
MTcwMDBMKSB7XG4iICsKKwkJCSIgICAgICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oaSsrKTtc
biIpOworCQorCWZvciAoaW50IGkgPSAwOyBpIDwgNTAwMDsgaSsrKSB7CisJCXNvdXJjZUNvZGUu
YXBwZW5kKCJcdFx0CQlTeXN0ZW0ub3V0LnByaW50bG4oXCJ4eXpcIik7XG4iKTsKKwl9CisJc291
cmNlQ29kZS5hcHBlbmQoIn1cbn1cbn1cbiIpOworCQorCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJ
CQluZXcgU3RyaW5nW10geworCQkJCQkiWC5qYXZhIiwKKwkJCQkJc291cmNlQ29kZS50b1N0cmlu
ZygpCisJCQl9LAorCQkJIlNVQ0NFU1MiLAorCQkJbnVsbCwKKwkJCXRydWUsCisJCQludWxsLAor
CQkJc2V0dGluZ3MsCisJCQludWxsKTsKK30KKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9i
dWdzL3Nob3dfYnVnLmNnaT9pZD0zNjg0MzUKK3B1YmxpYyB2b2lkIHRlc3QzNjg0MzViKCkgewor
CU1hcCBzZXR0aW5ncyA9IGdldENvbXBpbGVyT3B0aW9ucygpOworCXNldHRpbmdzLnB1dChDb21w
aWxlck9wdGlvbnMuT1BUSU9OX1ByZXNlcnZlVW51c2VkTG9jYWwsIENvbXBpbGVyT3B0aW9ucy5P
UFRJTUlaRV9PVVQpOworCVN0cmluZ0J1ZmZlciBzb3VyY2VDb2RlID0gbmV3IFN0cmluZ0J1ZmZl
cigKKwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCSIgICAgcHVibGljIHN0YXRpYyB2b2lk
IG1haW4oU3RyaW5nW10gYXJncykge1xuIiArCisJCQkiICAgICAgICBTeXN0ZW0ub3V0LnByaW50
bG4oXCJTVUNDRVNTXCIpO1xuIiArCisJCQkiICAgIH1cbiIgKworCQkJIiAgICBwdWJsaWMgWCgp
IHtcbiIgKworCQkJIiAgICAgICAgaW50IGkgPSAwO1xuIiArCisJCQkiICAgICAgICBpZiAoU3lz
dGVtLmN1cnJlbnRUaW1lTWlsbGlzKCkgPiAxNzAwMEwpIHtcbiIgKworCQkJIiAgICAgICAgICAg
IFN5c3RlbS5vdXQucHJpbnRsbihpKyspO1xuIik7CisJCisJZm9yIChpbnQgaSA9IDA7IGkgPCA1
MDAwOyBpKyspIHsKKwkJc291cmNlQ29kZS5hcHBlbmQoIlx0XHQJCVN5c3RlbS5vdXQucHJpbnRs
bihcInh5elwiKTtcbiIpOworCX0KKwlzb3VyY2VDb2RlLmFwcGVuZCgifVxufVxufVxuIik7CisJ
CisJdGhpcy5ydW5Db25mb3JtVGVzdCgKKwkJCW5ldyBTdHJpbmdbXSB7CisJCQkJCSJYLmphdmEi
LAorCQkJCQlzb3VyY2VDb2RlLnRvU3RyaW5nKCkKKwkJCX0sCisJCQkiU1VDQ0VTUyIsCisJCQlu
dWxsLAorCQkJdHJ1ZSwKKwkJCW51bGwsCisJCQlzZXR0aW5ncywKKwkJCW51bGwpOworfQorLy8g
aHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM2ODQzNQorcHVi
bGljIHZvaWQgdGVzdDM2ODQzNWMoKSB7CisJTWFwIHNldHRpbmdzID0gZ2V0Q29tcGlsZXJPcHRp
b25zKCk7CisJc2V0dGluZ3MucHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJT05fUHJlc2VydmVVbnVz
ZWRMb2NhbCwgQ29tcGlsZXJPcHRpb25zLk9QVElNSVpFX09VVCk7CisJU3RyaW5nQnVmZmVyIHNv
dXJjZUNvZGUgPSBuZXcgU3RyaW5nQnVmZmVyKAorCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKwor
CQkJIiAgICBwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsKKwkJ
CSIgICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihcIlNVQ0NFU1NcIik7XG4iICsKKwkJCSIgICAg
fVxuIiArCisJCQkiICAgIHtcbiIgKworCQkJIiAgICAgICAgaW50IGkgPSAwO1xuIiArCisJCQki
ICAgICAgICBpZiAoU3lzdGVtLmN1cnJlbnRUaW1lTWlsbGlzKCkgPiAxNzAwMEwpIHtcbiIgKwor
CQkJIiAgICAgICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihpKyspO1xuIik7CisJCisJZm9yIChp
bnQgaSA9IDA7IGkgPCA1MDAwOyBpKyspIHsKKwkJc291cmNlQ29kZS5hcHBlbmQoIlx0XHQJCVN5
c3RlbS5vdXQucHJpbnRsbihcInh5elwiKTtcbiIpOworCX0KKwlzb3VyY2VDb2RlLmFwcGVuZCgi
fVxufVxufVxuIik7CisJCisJdGhpcy5ydW5Db25mb3JtVGVzdCgKKwkJCW5ldyBTdHJpbmdbXSB7
CisJCQkJCSJYLmphdmEiLAorCQkJCQlzb3VyY2VDb2RlLnRvU3RyaW5nKCkKKwkJCX0sCisJCQki
U1VDQ0VTUyIsCisJCQludWxsLAorCQkJdHJ1ZSwKKwkJCW51bGwsCisJCQlzZXR0aW5ncywKKwkJ
CW51bGwpOworfQorCiBwdWJsaWMgdm9pZCB0ZXN0MDAxKCkgewogCXRoaXMucnVuQ29uZm9ybVRl
c3QoCiAJCW5ldyBTdHJpbmdbXSB7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Fic3RyYWN0TWV0
aG9kRGVjbGFyYXRpb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWJzdHJhY3RNZXRob2REZWNsYXJhdGlv
bi5qYXZhCmluZGV4IDkwNWMwYmYuLjdhN2E1MDYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWJz
dHJhY3RNZXRob2REZWNsYXJhdGlvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWJzdHJhY3RNZXRo
b2REZWNsYXJhdGlvbi5qYXZhCkBAIC0yNjMsMTcgKzI2MywxMCBAQAogCQkJCS8vIGEgZmF0YWwg
ZXJyb3Igd2FzIGRldGVjdGVkIGR1cmluZyBjb2RlIGdlbmVyYXRpb24sIG5lZWQgdG8gcmVzdGFy
dCBjb2RlIGdlbiBpZiBwb3NzaWJsZQogCQkJCWlmIChlLmNvbXBpbGF0aW9uUmVzdWx0ID09IENv
ZGVTdHJlYW0uUkVTVEFSVF9JTl9XSURFX01PREUpIHsKIAkJCQkJLy8gYSBicmFuY2ggdGFyZ2V0
IHJlcXVpcmVkIGEgZ290b193LCByZXN0YXJ0IGNvZGUgZ2VuIGluIHdpZGUgbW9kZS4KLQkJCQkJ
aWYgKCFyZXN0YXJ0KSB7Ci0JCQkJCQljbGFzc0ZpbGUuY29udGVudHNPZmZzZXQgPSBwcm9ibGVt
UmVzZXRQQzsKLQkJCQkJCWNsYXNzRmlsZS5tZXRob2RDb3VudC0tOwotCQkJCQkJY2xhc3NGaWxl
LmNvZGVTdHJlYW0ucmVzZXRJbldpZGVNb2RlKCk7IC8vIHJlcXVlc3Qgd2lkZSBtb2RlCi0JCQkJ
CQlyZXN0YXJ0ID0gdHJ1ZTsKLQkJCQkJfSBlbHNlIHsKLQkJCQkJCS8vIGFmdGVyIHJlc3RhcnRp
bmcgaW4gd2lkZSBtb2RlLCBjb2RlIGdlbmVyYXRpb24gZmFpbGVkIGFnYWluCi0JCQkJCQkvLyBy
ZXBvcnQgYSBwcm9ibGVtCi0JCQkJCQlyZXN0YXJ0ID0gZmFsc2U7Ci0JCQkJCQlhYm9ydCA9IHRy
dWU7Ci0JCQkJCX0KKwkJCQkJY2xhc3NGaWxlLmNvbnRlbnRzT2Zmc2V0ID0gcHJvYmxlbVJlc2V0
UEM7CisJCQkJCWNsYXNzRmlsZS5tZXRob2RDb3VudC0tOworCQkJCQljbGFzc0ZpbGUuY29kZVN0
cmVhbS5yZXNldEluV2lkZU1vZGUoKTsgLy8gcmVxdWVzdCB3aWRlIG1vZGUKKwkJCQkJcmVzdGFy
dCA9IHRydWU7CiAJCQkJfSBlbHNlIGlmIChlLmNvbXBpbGF0aW9uUmVzdWx0ID09IENvZGVTdHJl
YW0uUkVTVEFSVF9DT0RFX0dFTl9GT1JfVU5VU0VEX0xPQ0FMU19NT0RFKSB7CiAJCQkJCWNsYXNz
RmlsZS5jb250ZW50c09mZnNldCA9IHByb2JsZW1SZXNldFBDOwogCQkJCQljbGFzc0ZpbGUubWV0
aG9kQ291bnQtLTsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQ2xpbml0LmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
YXN0L0NsaW5pdC5qYXZhCmluZGV4IDNjY2IwYmEuLjJkZDU1ODAgMTAwNjQ0Ci0tLSBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hc3QvQ2xpbml0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9DbGluaXQuamF2YQpAQCAtMSw1ICsx
LDUgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIw
MTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIw
MTIgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBU
aGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBh
dmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYx
LjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxh
YmxlIGF0CkBAIC0xMTgsMTYgKzExOCwxMSBAQAogCQkJCS8vIGNhc2VzLgogCQkJCWlmIChlLmNv
bXBpbGF0aW9uUmVzdWx0ID09IENvZGVTdHJlYW0uUkVTVEFSVF9JTl9XSURFX01PREUpIHsKIAkJ
CQkJLy8gYSBicmFuY2ggdGFyZ2V0IHJlcXVpcmVkIGEgZ290b193LCByZXN0YXJ0IGNvZGUgZ2Vu
IGluIHdpZGUgbW9kZS4KLQkJCQkJaWYgKCFyZXN0YXJ0KSB7Ci0JCQkJCQljbGFzc0ZpbGUuY29u
dGVudHNPZmZzZXQgPSBjbGluaXRPZmZzZXQ7Ci0JCQkJCQljbGFzc0ZpbGUubWV0aG9kQ291bnQt
LTsKLQkJCQkJCWNsYXNzRmlsZS5jb2RlU3RyZWFtLnJlc2V0SW5XaWRlTW9kZSgpOyAvLyByZXF1
ZXN0IHdpZGUgbW9kZQotCQkJCQkJLy8gcmVzdGFydCBtZXRob2QgZ2VuZXJhdGlvbgotCQkJCQkJ
cmVzdGFydCA9IHRydWU7Ci0JCQkJCX0gZWxzZSB7Ci0JCQkJCQljbGFzc0ZpbGUuY29udGVudHNP
ZmZzZXQgPSBjbGluaXRPZmZzZXQ7Ci0JCQkJCQljbGFzc0ZpbGUubWV0aG9kQ291bnQtLTsKLQkJ
CQkJfQorCQkJCQljbGFzc0ZpbGUuY29udGVudHNPZmZzZXQgPSBjbGluaXRPZmZzZXQ7CisJCQkJ
CWNsYXNzRmlsZS5tZXRob2RDb3VudC0tOworCQkJCQljbGFzc0ZpbGUuY29kZVN0cmVhbS5yZXNl
dEluV2lkZU1vZGUoKTsgLy8gcmVxdWVzdCB3aWRlIG1vZGUKKwkJCQkJLy8gcmVzdGFydCBtZXRo
b2QgZ2VuZXJhdGlvbgorCQkJCQlyZXN0YXJ0ID0gdHJ1ZTsKIAkJCQl9IGVsc2UgaWYgKGUuY29t
cGlsYXRpb25SZXN1bHQgPT0gQ29kZVN0cmVhbS5SRVNUQVJUX0NPREVfR0VOX0ZPUl9VTlVTRURf
TE9DQUxTX01PREUpIHsKIAkJCQkJY2xhc3NGaWxlLmNvbnRlbnRzT2Zmc2V0ID0gY2xpbml0T2Zm
c2V0OwogCQkJCQljbGFzc0ZpbGUubWV0aG9kQ291bnQtLTsKZGlmZiAtLWdpdCBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvQ29uc3RydWN0b3JEZWNsYXJhdGlvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Db25zdHJ1Y3RvckRl
Y2xhcmF0aW9uLmphdmEKaW5kZXggMDU2NTlhZC4uZDI1OWYxOCAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FzdC9Db25zdHJ1Y3RvckRlY2xhcmF0aW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Db25zdHJ1
Y3RvckRlY2xhcmF0aW9uLmphdmEKQEAgLTEsNSArMSw1IEBACiAvKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKgotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3Ro
ZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEyIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3Ro
ZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21w
YW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBv
ZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0
aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdApAQCAtMjEwLDE1ICsyMTAsMTAg
QEAKIAkJfSBjYXRjaCAoQWJvcnRNZXRob2QgZSkgewogCQkJaWYgKGUuY29tcGlsYXRpb25SZXN1
bHQgPT0gQ29kZVN0cmVhbS5SRVNUQVJUX0lOX1dJREVfTU9ERSkgewogCQkJCS8vIGEgYnJhbmNo
IHRhcmdldCByZXF1aXJlZCBhIGdvdG9fdywgcmVzdGFydCBjb2RlIGdlbiBpbiB3aWRlIG1vZGUu
Ci0JCQkJaWYgKCFyZXN0YXJ0KSB7Ci0JCQkJCWNsYXNzRmlsZS5jb250ZW50c09mZnNldCA9IHBy
b2JsZW1SZXNldFBDOwotCQkJCQljbGFzc0ZpbGUubWV0aG9kQ291bnQtLTsKLQkJCQkJY2xhc3NG
aWxlLmNvZGVTdHJlYW0ucmVzZXRJbldpZGVNb2RlKCk7IC8vIHJlcXVlc3Qgd2lkZSBtb2RlCi0J
CQkJCXJlc3RhcnQgPSB0cnVlOwotCQkJCX0gZWxzZSB7Ci0JCQkJCXJlc3RhcnQgPSBmYWxzZTsK
LQkJCQkJYWJvcnQgPSB0cnVlOwotCQkJCX0KKwkJCQljbGFzc0ZpbGUuY29udGVudHNPZmZzZXQg
PSBwcm9ibGVtUmVzZXRQQzsKKwkJCQljbGFzc0ZpbGUubWV0aG9kQ291bnQtLTsKKwkJCQljbGFz
c0ZpbGUuY29kZVN0cmVhbS5yZXNldEluV2lkZU1vZGUoKTsgLy8gcmVxdWVzdCB3aWRlIG1vZGUK
KwkJCQlyZXN0YXJ0ID0gdHJ1ZTsKIAkJCX0gZWxzZSBpZiAoZS5jb21waWxhdGlvblJlc3VsdCA9
PSBDb2RlU3RyZWFtLlJFU1RBUlRfQ09ERV9HRU5fRk9SX1VOVVNFRF9MT0NBTFNfTU9ERSkgewog
CQkJCWNsYXNzRmlsZS5jb250ZW50c09mZnNldCA9IHByb2JsZW1SZXNldFBDOwogCQkJCWNsYXNz
RmlsZS5tZXRob2RDb3VudC0tOw==
</data>

          </attachment>
      

    </bug>

</bugzilla>