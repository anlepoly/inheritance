<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>409250</bug_id>
          
          <creation_ts>2013-05-28 04:18:00 -0400</creation_ts>
          <short_desc>[1.8][compiler] Various loose ends in 308 code generation.</short_desc>
          <delta_ts>2013-08-25 08:02:29 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>409235</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Andrew Clement">aclement</assigned_to>
          
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="59128"
          type_id="1"
          status="+"
          setter="srikanth_sankaran"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2264086</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-05-28 04:18:10 -0400</bug_when>
    <thetext>BETA_JAVA8:

This bug will be used to cover the loose ends discovered in code review
of the core implementation of JSR308 code generation.

(1) Should TypeAnnotationCodeStream.invoke(byte, MethodBinding, TypeBinding, 
TypeReference[]) be checking for ASTNode.HasTypeAnnotations ?

(2) Is ExtendedAnnotation violating javadoc of 
IExtendedAnnotation.getLocalVariableTable() ?

(3)  CodeStream(s): Is the method CodeStream.newArray(TypeReference, 
ArrayBinding) needed ? 

(4) ClassFile.addFieldAttributes: Needs a relook. When a field declaration 
carries a type annotation (or for that matter when a type annotation occurs in 
any place where a Java SE5 annotation can occur, we leave it annotating the 
declared entity - i.e the type annotation is not moved to the type.) So code 
fragments like if (fieldType.bits &amp; ASTNode.HasTypeAnnotations) != 0) may not 
get executed at all. Until the resolve phase, we don&apos;t know whether an 
annotation is a type declaration and so the HasTypeAnnotations bit cannot be set 
in these places.

For concern 4, Andy&apos;s initial response is available at

https://bugs.eclipse.org/bugs/show_bug.cgi?id=383624#c54

I feel the suggestion to set the bit only during resolution is
a good one.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2295596</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-08-16 08:41:24 -0400</bug_when>
    <thetext>I just commented on https://bugs.eclipse.org/bugs/show_bug.cgi?id=414384
that that is the only open issue against your name - Andy, please also
take up this one. Thanks!

If these two are resolved, we are ready to declare the 308 code generation project (https://bugs.eclipse.org/bugs/show_bug.cgi?id=409235) completed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2298557</commentid>
    <comment_count>2</comment_count>
    <who name="Andrew Clement">aclement</who>
    <bug_when>2013-08-23 16:10:06 -0400</bug_when>
    <thetext>&gt; (1) Should TypeAnnotationCodeStream.invoke(byte, MethodBinding, TypeBinding, 
TypeReference[]) be checking for ASTNode.HasTypeAnnotations ?

Checking it feels like a nice cheap check before going looking for something that may or may not be there. Or do you think something more untoward is happening?

I see the TODO on that line says can we do the test at a higher level?  We can, but it does make a bit of a mess of the codebase.  Requiring the caller to discover/remember whether any of the type arguments have type annotations and pass that information around in addition to the type arguments. I am inclined to leave it as it is.

But really the reason to change any of this is if we think the extra overhead of iterating through type arguments in the invoke() method is too costly. Given that most methods don&apos;t have type arguments that code just won&apos;t run anyway, in the normal case.

&gt; (2) Is ExtendedAnnotation violating javadoc of IExtendedAnnotation.getLocalVariableTable() ?

I guess this refers to the fact that it might return a null object when the javadoc says it will return an empty array.  This should be tidied up, yes, but in practice it won&apos;t go wrong right now as nobody asks for the local variable table unless they are expecting it to be there at the moment.

&gt; (3)  CodeStream(s): Is the method CodeStream.newArray(TypeReference, 
ArrayBinding) needed ? 

No, we can ditch it.

&gt; (4) ClassFile.addFieldAttributes: Needs a relook. 

Ok, I can switch it to setting the bit during resolution.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2298559</commentid>
    <comment_count>3</comment_count>
      <attachid>234718</attachid>
    <who name="Andrew Clement">aclement</who>
    <bug_when>2013-08-23 16:12:26 -0400</bug_when>
    <thetext>Created attachment 234718
patch to address the issues here

This includes the changes I mention in the previous comment

(1) removed TODO
(2) creates an empty array by default that will be used.  Could set it empty on reference but I just went this way...
(3) Unnecessary newArray removed
(4) parser setting of bits removed. resolution steps in local/field declarations now setting the bits.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2298705</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-08-25 08:02:29 -0400</bug_when>
    <thetext>For some reason, your patches don&apos;t apply clean when I paste them on the
package explorer. The problem seems to be always with the last file, I get
by applying the changes manually.

Fix looks good: Released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=e965722f47023ae407b487744865b93f56cfe7d1.

Thanks Andy</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>234718</attachid>
            <date>2013-08-23 16:12:00 -0400</date>
            <delta_ts>2013-08-23 16:12:26 -0400</delta_ts>
            <desc>patch to address the issues here</desc>
            <filename>0001-Fix-Bug-409250.patch</filename>
            <type>text/plain</type>
            <size>22265</size>
            <attacher name="Andrew Clement">aclement</attacher>
            
              <data encoding="base64">RnJvbSBkMGFmYzQxYjUwYTRiN2M0YjJkMmQxYzk3YTBkYWY1ZGI4NjExYmYzIE1vbiBTZXAgMTcg
MDA6MDA6MDAgMjAwMQpGcm9tOiBBbmR5IENsZW1lbnQgPGFjbGVtZW50QGdvcGl2b3RhbC5jb20+
CkRhdGU6IEZyaSwgMjMgQXVnIDIwMTMgMTM6MDk6MTQgLTA3MDAKU3ViamVjdDogW1BBVENIXSBG
aXggQnVnIDQwOTI1MAoKLS0tCiAuLi4vZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0
L0ZpZWxkRGVjbGFyYXRpb24uamF2YSB8IDEzICsrKysrKysrKysrKysKIC4uLi9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvTG9jYWxEZWNsYXJhdGlvbi5qYXZhIHwgMTIgKysrKysr
KysrKysrCiAuLi4vb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9TdGF0ZW1l
bnQuamF2YSAgICB8ICA3ICsrKystLS0KIC4uLi9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9jb2RlZ2VuL0NvZGVTdHJlYW0uamF2YSAgIHwgMTEgKysrKy0tLS0tLS0KIC4uLi9pbnRlcm5h
bC9jb21waWxlci9jb2RlZ2VuL1R5cGVBbm5vdGF0aW9uQ29kZVN0cmVhbS5qYXZhIHwgIDMgKyst
CiAuLi4vb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3BhcnNlci9QYXJzZXIuamF2
YSAgICB8ICA2ICsrLS0tLQogLi4uL2pkdC9pbnRlcm5hbC9ldmFsL0NvZGVTbmlwcGV0QWxsb2Nh
dGlvbkV4cHJlc3Npb24uamF2YSAgfCAgNSArKystLQogLi4uL2VjbGlwc2UvamR0L2ludGVybmFs
L2V2YWwvQ29kZVNuaXBwZXRNZXNzYWdlU2VuZC5qYXZhICAgfCAgNSArKystLQogLi4uL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3V0aWwvSUV4dGVuZGVkQW5ub3RhdGlvbi5qYXZhICAgICAgfCAgNSAr
KystLQogLi4uL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvdXRpbC9FeHRlbmRlZEFubm90YXRp
b24uamF2YSAgfCAgNiArKysrLS0KIDEwIGZpbGVzIGNoYW5nZWQsIDUwIGluc2VydGlvbnMoKyks
IDIzIGRlbGV0aW9ucygtKQoKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRmllbGREZWNsYXJhdGlv
bi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2FzdC9GaWVsZERlY2xhcmF0aW9uLmphdmEKaW5kZXggYjgyZjg1MC4u
NWQ4ZTRhMyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9GaWVsZERlY2xhcmF0aW9uLmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FzdC9GaWVsZERlY2xhcmF0aW9uLmphdmEKQEAgLTE1LDYgKzE1LDggQEAKICAq
CQkJCQkJCQlidWcgMzk1MDAyIC0gU2VsZiBib3VuZCBnZW5lcmljIGNsYXNzIGRvZXNuJ3QgcmVz
b2x2ZSBib3VuZHMgcHJvcGVybHkgZm9yIHdpbGRjYXJkcyBmb3IgY2VydGFpbiBwYXJhbWV0cmlz
YXRpb24uCiAgKgkJCQkJCQkJYnVnIDMzMTY0OSAtIFtjb21waWxlcl1bbnVsbF0gY29uc2lkZXIg
bnVsbCBhbm5vdGF0aW9ucyBmb3IgZmllbGRzCiAgKgkJCQkJCQkJYnVnIDQwMDc2MSAtIFtjb21w
aWxlcl1bbnVsbF0gbnVsbCBtYXkgYmUgcmV0dXJuIGFzIGJvb2xlYW4gd2l0aG91dCBhIGRpYWdu
b3N0aWMKKyAqICAgICAgICBBbmR5IENsZW1lbnQgKEdvUGl2b3RhbCwgSW5jKSBhY2xlbWVudEBn
b3Bpdm90YWwuY29tIC0gQ29udHJpYnV0aW9ucyBmb3IKKyAqCQkJCQkJCQlCdWcgNDA5MjUwIC0g
WzEuOF1bY29tcGlsZXJdIFZhcmlvdXMgbG9vc2UgZW5kcyBpbiAzMDggY29kZSBnZW5lcmF0aW9u
CiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKi8KIHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmludGVy
bmFsLmNvbXBpbGVyLmFzdDsKIApAQCAtMjI1LDYgKzIyNywxNyBAQCBwdWJsaWMgdm9pZCByZXNv
bHZlKE1ldGhvZFNjb3BlIGluaXRpYWxpemF0aW9uU2NvcGUpIHsKIAkJaW5pdGlhbGl6YXRpb25T
Y29wZS5sYXN0VmlzaWJsZUZpZWxkSUQgPSB0aGlzLmJpbmRpbmcuaWQ7CiAKIAkJcmVzb2x2ZUFu
bm90YXRpb25zKGluaXRpYWxpemF0aW9uU2NvcGUsIHRoaXMuYW5ub3RhdGlvbnMsIHRoaXMuYmlu
ZGluZyk7CisJCS8vIENoZWNrIGlmIHRoaXMgZGVjbGFyYXRpb24gc2hvdWxkIG5vdyBoYXZlIHRo
ZSB0eXBlIGFubm90YXRpb25zIGJpdCBzZXQKKwkJaWYgKHRoaXMuYW5ub3RhdGlvbnMgIT0gbnVs
bCkgeworCQkJZm9yIChpbnQgaSA9IDAsIG1heCA9IHRoaXMuYW5ub3RhdGlvbnMubGVuZ3RoOyBp
IDwgbWF4OyBpKyspIHsKKwkJCQlUeXBlQmluZGluZyByZXNvbHZlZEFubm90YXRpb25UeXBlID0g
dGhpcy5hbm5vdGF0aW9uc1tpXS5yZXNvbHZlZFR5cGU7CisJCQkJaWYgKHJlc29sdmVkQW5ub3Rh
dGlvblR5cGUgIT0gbnVsbCAmJiAocmVzb2x2ZWRBbm5vdGF0aW9uVHlwZS5nZXRBbm5vdGF0aW9u
VGFnQml0cygpICYgVGFnQml0cy5Bbm5vdGF0aW9uRm9yVHlwZVVzZSkgIT0gMCkgeworCQkJCQl0
aGlzLmJpdHMgfD0gQVNUTm9kZS5IYXNUeXBlQW5ub3RhdGlvbnM7CisJCQkJCWJyZWFrOworCQkJ
CX0KKwkJCX0KKwkJfQorCQkKIAkJLy8gY2hlY2sgQERlcHJlY2F0ZWQgYW5ub3RhdGlvbiBwcmVz
ZW5jZQogCQlpZiAoKHRoaXMuYmluZGluZy5nZXRBbm5vdGF0aW9uVGFnQml0cygpICYgVGFnQml0
cy5Bbm5vdGF0aW9uRGVwcmVjYXRlZCkgPT0gMAogCQkJCSYmICh0aGlzLmJpbmRpbmcubW9kaWZp
ZXJzICYgQ2xhc3NGaWxlQ29uc3RhbnRzLkFjY0RlcHJlY2F0ZWQpICE9IDAKZGlmZiAtLWdpdCBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hc3QvTG9jYWxEZWNsYXJhdGlvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Mb2NhbERlY2xh
cmF0aW9uLmphdmEKaW5kZXggNGRhOTFmNS4uODNiOTIwOSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fz
dC9Mb2NhbERlY2xhcmF0aW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Mb2NhbERlY2xhcmF0aW9u
LmphdmEKQEAgLTI3LDYgKzI3LDggQEAKICAqCQkJCQkJCWJ1ZyA0MDA3NjEgLSBbY29tcGlsZXJd
W251bGxdIG51bGwgbWF5IGJlIHJldHVybiBhcyBib29sZWFuIHdpdGhvdXQgYSBkaWFnbm9zdGlj
CiAgKiAgICAgSmVzcGVyIFMgTW9sbGVyIC0gQ29udHJpYnV0aW9ucyBmb3IKICAqCQkJCQkJCUJ1
ZyAzNzg2NzQgLSAiVGhlIG1ldGhvZCBjYW4gYmUgZGVjbGFyZWQgYXMgc3RhdGljIiBpcyB3cm9u
ZworICogICAgICAgIEFuZHkgQ2xlbWVudCAoR29QaXZvdGFsLCBJbmMpIGFjbGVtZW50QGdvcGl2
b3RhbC5jb20gLSBDb250cmlidXRpb25zIGZvcgorICoJCQkJCQkJQnVnIDQwOTI1MCAtIFsxLjhd
W2NvbXBpbGVyXSBWYXJpb3VzIGxvb3NlIGVuZHMgaW4gMzA4IGNvZGUgZ2VuZXJhdGlvbgogICoq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKiovCiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b21waWxlci5hc3Q7CiAKQEAgLTI3OSw2ICsyODEsMTYgQEAgcHVibGljIEZsb3dJbmZvIGFuYWx5
c2VDb2RlKEJsb2NrU2NvcGUgY3VycmVudFNjb3BlLCBGbG93Q29udGV4dCBmbG93Q29udGV4dCwg
RmwKIAkJfQogCQkvLyBvbmx5IHJlc29sdmUgYW5ub3RhdGlvbiBhdCB0aGUgZW5kLCBmb3IgY29u
c3RhbnQgdG8gYmUgcG9zaXRpb25lZCBiZWZvcmUgKDk2OTkxKQogCQlyZXNvbHZlQW5ub3RhdGlv
bnMoc2NvcGUsIHRoaXMuYW5ub3RhdGlvbnMsIHRoaXMuYmluZGluZyk7CisJCS8vIENoZWNrIGlm
IHRoaXMgZGVjbGFyYXRpb24gc2hvdWxkIG5vdyBoYXZlIHRoZSB0eXBlIGFubm90YXRpb25zIGJp
dCBzZXQKKwkJaWYgKHRoaXMuYW5ub3RhdGlvbnMgIT0gbnVsbCkgeworCQkJZm9yIChpbnQgaSA9
IDAsIG1heCA9IHRoaXMuYW5ub3RhdGlvbnMubGVuZ3RoOyBpIDwgbWF4OyBpKyspIHsKKwkJCQlU
eXBlQmluZGluZyByZXNvbHZlZEFubm90YXRpb25UeXBlID0gdGhpcy5hbm5vdGF0aW9uc1tpXS5y
ZXNvbHZlZFR5cGU7CisJCQkJaWYgKHJlc29sdmVkQW5ub3RhdGlvblR5cGUgIT0gbnVsbCAmJiAo
cmVzb2x2ZWRBbm5vdGF0aW9uVHlwZS5nZXRBbm5vdGF0aW9uVGFnQml0cygpICYgVGFnQml0cy5B
bm5vdGF0aW9uRm9yVHlwZVVzZSkgIT0gMCkgeworCQkJCQl0aGlzLmJpdHMgfD0gQVNUTm9kZS5I
YXNUeXBlQW5ub3RhdGlvbnM7CisJCQkJCWJyZWFrOworCQkJCX0KKwkJCX0KKwkJfQogCQlzY29w
ZS52YWxpZGF0ZU51bGxBbm5vdGF0aW9uKHRoaXMuYmluZGluZy50YWdCaXRzLCB0aGlzLnR5cGUs
IHRoaXMuYW5ub3RhdGlvbnMpOwogCX0KIApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9TdGF0ZW1l
bnQuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9hc3QvU3RhdGVtZW50LmphdmEKaW5kZXggMjEwOGFkZS4uNjUzZGMy
OCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9TdGF0ZW1lbnQuamF2YQorKysgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0
L1N0YXRlbWVudC5qYXZhCkBAIC0yNyw2ICsyNyw3IEBACiAgKgkJCQkJCQkJQnVnIDQxNTI5MSAt
IFsxLjhdW251bGxdIGRpZmZlcmVudGlhdGUgdHlwZSBpbmNvbXBhdGliaWxpdGllcyBkdWUgdG8g
bnVsbCBhbm5vdGF0aW9ucwogICogICAgICAgIEFuZHkgQ2xlbWVudCAtIENvbnRyaWJ1dGlvbnMg
Zm9yCiAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgQnVnIDM4MzYyNCAtIFsxLjhdW2NvbXBp
bGVyXSBSZXZpdmUgY29kZSBnZW5lcmF0aW9uIHN1cHBvcnQgZm9yIHR5cGUgYW5ub3RhdGlvbnMg
KGZyb20gT2xpdmllcidzIHdvcmspCisgKiAgICAgICAgICAgICAgICAgICAgICAgICAgQnVnIDQw
OTI1MCAtIFsxLjhdW2NvbXBpbGVyXSBWYXJpb3VzIGxvb3NlIGVuZHMgaW4gMzA4IGNvZGUgZ2Vu
ZXJhdGlvbgogICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpk
dC5pbnRlcm5hbC5jb21waWxlci5hc3Q7CiAKQEAgLTMwMSw3ICszMDIsNyBAQCBwdWJsaWMgdm9p
ZCBnZW5lcmF0ZUFyZ3VtZW50cyhNZXRob2RCaW5kaW5nIGJpbmRpbmcsIEV4cHJlc3Npb25bXSBh
cmd1bWVudHMsIEJsbwogCQkJLy8gY2FsbGVkIHdpdGggKGFyZ0xlbmd0aCAtIGxhc3RJbmRleCkg
ZWxlbWVudHMgOiBmb28oMSwgMikgb3IgZm9vKDEsIDIsIDMsIDQpCiAJCQkvLyBuZWVkIHRvIGdl
biBlbGVtZW50cyBpbnRvIGFuIGFycmF5LCB0aGVuIGdlbiBlYWNoIHJlbWFpbmluZyBlbGVtZW50
IGludG8gY3JlYXRlZCBhcnJheQogCQkJY29kZVN0cmVhbS5nZW5lcmF0ZUlubGluZWRWYWx1ZShh
cmdMZW5ndGggLSB2YXJBcmdJbmRleCk7Ci0JCQljb2RlU3RyZWFtLm5ld0FycmF5KG51bGwsIGNv
ZGVHZW5WYXJBcmdzVHlwZSk7IC8vIGNyZWF0ZSBhIG1vbm8tZGltZW5zaW9uYWwgYXJyYXkKKwkJ
CWNvZGVTdHJlYW0ubmV3QXJyYXkoY29kZUdlblZhckFyZ3NUeXBlKTsgLy8gY3JlYXRlIGEgbW9u
by1kaW1lbnNpb25hbCBhcnJheQogCQkJZm9yIChpbnQgaSA9IHZhckFyZ0luZGV4OyBpIDwgYXJn
TGVuZ3RoOyBpKyspIHsKIAkJCQljb2RlU3RyZWFtLmR1cCgpOwogCQkJCWNvZGVTdHJlYW0uZ2Vu
ZXJhdGVJbmxpbmVkVmFsdWUoaSAtIHZhckFyZ0luZGV4KTsKQEAgLTMyMCw3ICszMjEsNyBAQCBw
dWJsaWMgdm9pZCBnZW5lcmF0ZUFyZ3VtZW50cyhNZXRob2RCaW5kaW5nIGJpbmRpbmcsIEV4cHJl
c3Npb25bXSBhcmd1bWVudHMsIEJsbwogCQkJCS8vIHJpZ2h0IG51bWJlciBidXQgbm90IGRpcmVj
dGx5IGNvbXBhdGlibGUgb3IgdG9vIG1hbnkgYXJndW1lbnRzIC0gd3JhcCBleHRyYSBpbnRvIGFy
cmF5CiAJCQkJLy8gbmVlZCB0byBnZW4gZWxlbWVudHMgaW50byBhbiBhcnJheSwgdGhlbiBnZW4g
ZWFjaCByZW1haW5pbmcgZWxlbWVudCBpbnRvIGNyZWF0ZWQgYXJyYXkKIAkJCQljb2RlU3RyZWFt
LmdlbmVyYXRlSW5saW5lZFZhbHVlKDEpOwotCQkJCWNvZGVTdHJlYW0ubmV3QXJyYXkobnVsbCwg
Y29kZUdlblZhckFyZ3NUeXBlKTsgLy8gY3JlYXRlIGEgbW9uby1kaW1lbnNpb25hbCBhcnJheQor
CQkJCWNvZGVTdHJlYW0ubmV3QXJyYXkoY29kZUdlblZhckFyZ3NUeXBlKTsgLy8gY3JlYXRlIGEg
bW9uby1kaW1lbnNpb25hbCBhcnJheQogCQkJCWNvZGVTdHJlYW0uZHVwKCk7CiAJCQkJY29kZVN0
cmVhbS5nZW5lcmF0ZUlubGluZWRWYWx1ZSgwKTsKIAkJCQlhcmd1bWVudHNbdmFyQXJnSW5kZXhd
LmdlbmVyYXRlQ29kZShjdXJyZW50U2NvcGUsIGNvZGVTdHJlYW0sIHRydWUpOwpAQCAtMzMwLDcg
KzMzMSw3IEBAIHB1YmxpYyB2b2lkIGdlbmVyYXRlQXJndW1lbnRzKE1ldGhvZEJpbmRpbmcgYmlu
ZGluZywgRXhwcmVzc2lvbltdIGFyZ3VtZW50cywgQmxvCiAJCQkvLyBzY2VuYXJpbzogZm9vKDEp
IC0tPiBmb28oMSwgbmV3IGludFswXSkKIAkJCS8vIGdlbmVyYXRlIGNvZGUgZm9yIGFuIGVtcHR5
IGFycmF5IG9mIHBhcmFtZXRlclR5cGUKIAkJCWNvZGVTdHJlYW0uZ2VuZXJhdGVJbmxpbmVkVmFs
dWUoMCk7Ci0JCQljb2RlU3RyZWFtLm5ld0FycmF5KG51bGwsIGNvZGVHZW5WYXJBcmdzVHlwZSk7
IC8vIGNyZWF0ZSBhIG1vbm8tZGltZW5zaW9uYWwgYXJyYXkKKwkJCWNvZGVTdHJlYW0ubmV3QXJy
YXkoY29kZUdlblZhckFyZ3NUeXBlKTsgLy8gY3JlYXRlIGEgbW9uby1kaW1lbnNpb25hbCBhcnJh
eQogCQl9CiAJfSBlbHNlIGlmIChhcmd1bWVudHMgIT0gbnVsbCkgeyAvLyBzdGFuZGFyZCBnZW5l
cmF0aW9uIGZvciBtZXRob2QgYXJndW1lbnRzCiAJCWZvciAoaW50IGkgPSAwLCBtYXggPSBhcmd1
bWVudHMubGVuZ3RoOyBpIDwgbWF4OyBpKyspCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvY29kZWdlbi9D
b2RlU3RyZWFtLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvY29kZWdlbi9Db2RlU3RyZWFtLmphdmEKaW5kZXggMTQy
MmY3NC4uYTMxNDZhYiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2NvZGVnZW4vQ29kZVN0cmVhbS5qYXZh
CisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9jb2RlZ2VuL0NvZGVTdHJlYW0uamF2YQpAQCAtMjAsNiArMjAsNyBAQAog
ICogICAgICAgICAgICAgICAgICAgICAgICAgIEJ1ZyAzODM2MjQgLSBbMS44XVtjb21waWxlcl0g
UmV2aXZlIGNvZGUgZ2VuZXJhdGlvbiBzdXBwb3J0IGZvciB0eXBlIGFubm90YXRpb25zIChmcm9t
IE9saXZpZXIncyB3b3JrKQogICogICAgICAgICAgICAgICAgICAgICAgICAgIEJ1ZyA0MDkyNDcg
LSBbMS44XVtjb21waWxlcl0gVmVyaWZ5IGVycm9yIHdpdGggY29kZSBhbGxvY2F0aW5nIG11bHRp
ZGltZW5zaW9uYWwgYXJyYXkKICAqICAgICAgICAgICAgICAgICAgICAgICAgICBCdWcgNDA5MjM2
IC0gWzEuOF1bY29tcGlsZXJdIFR5cGUgYW5ub3RhdGlvbnMgb24gaW50ZXJzZWN0aW9uIGNhc3Qg
dHlwZXMgZHJvcHBlZCBieSBjb2RlIGdlbmVyYXRvcgorICogICAgICAgICAgICAgICAgICAgICAg
ICAgIEJ1ZyA0MDkyNTAgLSBbMS44XVtjb21waWxlcl0gVmFyaW91cyBsb29zZSBlbmRzIGluIDMw
OCBjb2RlIGdlbmVyYXRpb24KICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwogcGFja2FnZSBvcmcu
ZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuY29kZWdlbjsKIApAQCAtMTg3NCw3ICsxODc1
LDcgQEAgcHVibGljIHZvaWQgZ2VuZXJhdGVFbXVsYXRpb25Gb3JDb25zdHJ1Y3RvcihTY29wZSBz
Y29wZSwgTWV0aG9kQmluZGluZyBtZXRob2RCaW4KIAlpbnZva2VDbGFzc0Zvck5hbWUoKTsKIAlp
bnQgcGFyYW1MZW5ndGggPSBtZXRob2RCaW5kaW5nLnBhcmFtZXRlcnMubGVuZ3RoOwogCXRoaXMu
Z2VuZXJhdGVJbmxpbmVkVmFsdWUocGFyYW1MZW5ndGgpOwotCW5ld0FycmF5KG51bGwsIHNjb3Bl
LmNyZWF0ZUFycmF5VHlwZShzY29wZS5nZXRUeXBlKFR5cGVDb25zdGFudHMuSkFWQV9MQU5HX0NM
QVNTLCAzKSwgMSkpOworCW5ld0FycmF5KHNjb3BlLmNyZWF0ZUFycmF5VHlwZShzY29wZS5nZXRU
eXBlKFR5cGVDb25zdGFudHMuSkFWQV9MQU5HX0NMQVNTLCAzKSwgMSkpOwogCWlmIChwYXJhbUxl
bmd0aCA+IDApIHsKIAkJZHVwKCk7CiAJCWZvciAoaW50IGkgPSAwOyBpIDwgcGFyYW1MZW5ndGg7
IGkrKykgewpAQCAtMTkzMCw3ICsxOTMxLDcgQEAgcHVibGljIHZvaWQgZ2VuZXJhdGVFbXVsYXRp
b25Gb3JNZXRob2QoU2NvcGUgc2NvcGUsIE1ldGhvZEJpbmRpbmcgbWV0aG9kQmluZGluZykKIAl0
aGlzLmxkYyhTdHJpbmcudmFsdWVPZihtZXRob2RCaW5kaW5nLnNlbGVjdG9yKSk7CiAJaW50IHBh
cmFtTGVuZ3RoID0gbWV0aG9kQmluZGluZy5wYXJhbWV0ZXJzLmxlbmd0aDsKIAl0aGlzLmdlbmVy
YXRlSW5saW5lZFZhbHVlKHBhcmFtTGVuZ3RoKTsKLQluZXdBcnJheShudWxsLCBzY29wZS5jcmVh
dGVBcnJheVR5cGUoc2NvcGUuZ2V0VHlwZShUeXBlQ29uc3RhbnRzLkpBVkFfTEFOR19DTEFTUywg
MyksIDEpKTsKKwluZXdBcnJheShzY29wZS5jcmVhdGVBcnJheVR5cGUoc2NvcGUuZ2V0VHlwZShU
eXBlQ29uc3RhbnRzLkpBVkFfTEFOR19DTEFTUywgMyksIDEpKTsKIAlpZiAocGFyYW1MZW5ndGgg
PiAwKSB7CiAJCWR1cCgpOwogCQlmb3IgKGludCBpID0gMDsgaSA8IHBhcmFtTGVuZ3RoOyBpKysp
IHsKQEAgLTI1MzAsNyArMjUzMSw3IEBAIHB1YmxpYyB2b2lkIGdlbmVyYXRlU3ludGhldGljQm9k
eUZvckVudW1WYWx1ZXMoU3ludGhldGljTWV0aG9kQmluZGluZyBtZXRob2RCaW5kCiAJYXJyYXls
ZW5ndGgoKTsKIAlkdXAoKTsKIAlpc3RvcmVfMSgpOwotCW5ld0FycmF5KG51bGwsIChBcnJheUJp
bmRpbmcpIGVudW1BcnJheSk7CisJbmV3QXJyYXkoKEFycmF5QmluZGluZykgZW51bUFycmF5KTsK
IAlkdXAoKTsKIAlhc3RvcmVfMigpOwogCWljb25zdF8wKCk7CkBAIC01NzU2LDEwICs1NzU3LDYg
QEAgcHVibGljIHZvaWQgbmV3YXJyYXkoaW50IGFycmF5X1R5cGUpIHsKIH0KIAogcHVibGljIHZv
aWQgbmV3QXJyYXkoQXJyYXlCaW5kaW5nIGFycmF5QmluZGluZykgewotCXRoaXMubmV3QXJyYXko
bnVsbCwgYXJyYXlCaW5kaW5nKTsKLX0KLQotcHVibGljIHZvaWQgbmV3QXJyYXkoVHlwZVJlZmVy
ZW5jZSB0eXBlUmVmZXJlbmNlLCBBcnJheUJpbmRpbmcgYXJyYXlCaW5kaW5nKSB7CiAJdGhpcy5u
ZXdBcnJheShudWxsLCBudWxsLCBhcnJheUJpbmRpbmcpOwogfQogCmRpZmYgLS1naXQgYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvY29kZWdlbi9UeXBlQW5ub3RhdGlvbkNvZGVTdHJlYW0uamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9jb2RlZ2Vu
L1R5cGVBbm5vdGF0aW9uQ29kZVN0cmVhbS5qYXZhCmluZGV4IDlkMmU4NDIuLmJjNjZlNWIgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9jb2RlZ2VuL1R5cGVBbm5vdGF0aW9uQ29kZVN0cmVhbS5qYXZhCisr
KyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9jb2RlZ2VuL1R5cGVBbm5vdGF0aW9uQ29kZVN0cmVhbS5qYXZhCkBAIC0xNSw2
ICsxNSw3IEBACiAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgQnVnIDM4MzYyNCAtIFsxLjhd
W2NvbXBpbGVyXSBSZXZpdmUgY29kZSBnZW5lcmF0aW9uIHN1cHBvcnQgZm9yIHR5cGUgYW5ub3Rh
dGlvbnMgKGZyb20gT2xpdmllcidzIHdvcmspCiAgKiAgICAgICAgICAgICAgICAgICAgICAgICAg
QnVnIDQwOTI0NyAtIFsxLjhdW2NvbXBpbGVyXSBWZXJpZnkgZXJyb3Igd2l0aCBjb2RlIGFsbG9j
YXRpbmcgbXVsdGlkaW1lbnNpb25hbCBhcnJheQogICogICAgICAgICAgICAgICAgICAgICAgICAg
IEJ1ZyA0MDk1MTcgLSBbMS44XVtjb21waWxlcl0gVHlwZSBhbm5vdGF0aW9uIHByb2JsZW1zIG9u
IG1vcmUgZWxhYm9yYXRlIGFycmF5IHJlZmVyZW5jZXMKKyAqICAgICAgICAgICAgICAgICAgICAg
ICAgICBCdWcgNDA5MjUwIC0gWzEuOF1bY29tcGlsZXJdIFZhcmlvdXMgbG9vc2UgZW5kcyBpbiAz
MDggY29kZSBnZW5lcmF0aW9uCiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KIHBhY2thZ2Ugb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmNvZGVnZW47CiAKQEAgLTk4LDcgKzk5LDcg
QEAgcHVibGljIGNsYXNzIFR5cGVBbm5vdGF0aW9uQ29kZVN0cmVhbSBleHRlbmRzIFN0YWNrTWFw
RnJhbWVDb2RlU3RyZWFtIHsKIAkJCQkJOiBBbm5vdGF0aW9uVGFyZ2V0VHlwZUNvbnN0YW50cy5N
RVRIT0RfSU5WT0NBVElPTl9UWVBFX0FSR1VNRU5UOwogCQkJZm9yIChpbnQgaSA9IDAsIG1heCA9
IHR5cGVBcmd1bWVudHMubGVuZ3RoOyBpIDwgbWF4OyBpKyspIHsKIAkJCQlUeXBlUmVmZXJlbmNl
IHR5cGVBcmd1bWVudCA9IHR5cGVBcmd1bWVudHNbaV07Ci0JCQkJaWYgKCh0eXBlQXJndW1lbnQu
Yml0cyAmIEFTVE5vZGUuSGFzVHlwZUFubm90YXRpb25zKSAhPSAwKSB7IC8vIFRPRE8gY2FuIGNo
ZWNrIHRoaXMgYXQgYSBoaWdoZXIgbGV2ZWw/CisJCQkJaWYgKCh0eXBlQXJndW1lbnQuYml0cyAm
IEFTVE5vZGUuSGFzVHlwZUFubm90YXRpb25zKSAhPSAwKSB7CiAJCQkJCWFkZEFubm90YXRpb25D
b250ZXh0KHR5cGVBcmd1bWVudCwgdGhpcy5wb3NpdGlvbiwgaSwgdGFyZ2V0VHlwZSk7CiAJCQkJ
fQogCQkJfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3BhcnNlci9QYXJzZXIuamF2YSBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9w
YXJzZXIvUGFyc2VyLmphdmEKaW5kZXggODJiYTZmYS4uNDc5NjU4NCAxMDA2NDQKLS0tIGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL3BhcnNlci9QYXJzZXIuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcGFyc2VyL1BhcnNlci5qYXZhCkBA
IC0yNiw2ICsyNiw3IEBACiAgKgkJCQkJCQkJCWJ1ZyAzOTMxOTIgLSBJbmNvbXBsZXRlIHR5cGUg
aGllcmFyY2h5IHdpdGggPiAxMCBhbm5vdGF0aW9ucwogICogICAgICAgIEFuZHkgQ2xlbWVudCAt
IENvbnRyaWJ1dGlvbnMgZm9yCiAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgQnVnIDM4MzYy
NCAtIFsxLjhdW2NvbXBpbGVyXSBSZXZpdmUgY29kZSBnZW5lcmF0aW9uIHN1cHBvcnQgZm9yIHR5
cGUgYW5ub3RhdGlvbnMgKGZyb20gT2xpdmllcidzIHdvcmspCisgKiAgICAgICAgICAgICAgICAg
ICAgICAgICAgQnVnIDQwOTI1MCAtIFsxLjhdW2NvbXBpbGVyXSBWYXJpb3VzIGxvb3NlIGVuZHMg
aW4gMzA4IGNvZGUgZ2VuZXJhdGlvbgogICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCiBwYWNrYWdl
IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5wYXJzZXI7CiAKQEAgLTM1MjIsNyAr
MzUyMyw2IEBAIHByb3RlY3RlZCB2b2lkIGNvbnN1bWVFbnRlclZhcmlhYmxlKCkgewogCQkJCQlk
ZWNsYXJhdGlvbi5hbm5vdGF0aW9ucyA9IG5ldyBBbm5vdGF0aW9uW2xlbmd0aF0sCiAJCQkJCTAs
CiAJCQkJCWxlbmd0aCk7Ci0JCQkJZGVjbGFyYXRpb24uYml0cyB8PSBBU1ROb2RlLkhhc1R5cGVB
bm5vdGF0aW9uczsKIAkJCX0KIAkJCXR5cGUgPSBnZXRUeXBlUmVmZXJlbmNlKHR5cGVEaW0gPSB0
aGlzLmludFN0YWNrW3RoaXMuaW50UHRyLS1dKTsgLy8gdHlwZSBkaW1lbnNpb24KIAkJCWlmIChk
ZWNsYXJhdGlvbi5kZWNsYXJhdGlvblNvdXJjZVN0YXJ0ID09IC0xKSB7CkBAIC0zNTQ0LDcgKzM1
NDQsNiBAQCBwcm90ZWN0ZWQgdm9pZCBjb25zdW1lRW50ZXJWYXJpYWJsZSgpIHsKIAkJCQkJZGVj
bGFyYXRpb24uYW5ub3RhdGlvbnMgPSBuZXcgQW5ub3RhdGlvbltsZW5ndGhdLAogCQkJCQkwLAog
CQkJCQlsZW5ndGgpOwotCQkJCWRlY2xhcmF0aW9uLmJpdHMgfD0gQVNUTm9kZS5IYXNUeXBlQW5u
b3RhdGlvbnM7CiAJCQl9CiAJCQkvLyBTdG9yZSBqYXZhZG9jIG9ubHkgb24gZmlyc3QgZGVjbGFy
YXRpb24gYXMgaXQgaXMgdGhlIHNhbWUgZm9yIGFsbCBvbmVzCiAJCQlGaWVsZERlY2xhcmF0aW9u
IGZpZWxkRGVjbGFyYXRpb24gPSAoRmllbGREZWNsYXJhdGlvbikgZGVjbGFyYXRpb247CkBAIC0z
NTYyLDcgKzM1NjEsNiBAQCBwcm90ZWN0ZWQgdm9pZCBjb25zdW1lRW50ZXJWYXJpYWJsZSgpIHsK
IAkJaWYgKGFubm90YXRpb25zICE9IG51bGwpIHsKIAkJCWZpbmFsIGludCBhbm5vdGF0aW9uc0xl
bmd0aCA9IGFubm90YXRpb25zLmxlbmd0aDsKIAkJCVN5c3RlbS5hcnJheWNvcHkoYW5ub3RhdGlv
bnMsIDAsIGRlY2xhcmF0aW9uLmFubm90YXRpb25zID0gbmV3IEFubm90YXRpb25bYW5ub3RhdGlv
bnNMZW5ndGhdLCAwLCBhbm5vdGF0aW9uc0xlbmd0aCk7Ci0JCQlkZWNsYXJhdGlvbi5iaXRzIHw9
IEFTVE5vZGUuSGFzVHlwZUFubm90YXRpb25zOwogCQl9CiAJfQogCkBAIC0zNTc1LDcgKzM1NzMs
NyBAQCBwcm90ZWN0ZWQgdm9pZCBjb25zdW1lRW50ZXJWYXJpYWJsZSgpIHsKIAkJQW5ub3RhdGlv
bltdW10gYW5ub3RhdGlvbnNPbkRpbWVuc2lvbnMgPSB0eXBlLmdldEFubm90YXRpb25zT25EaW1l
bnNpb25zKCk7CiAJCWlmIChhbm5vdGF0aW9uc09uRGltZW5zaW9ucyAhPSBudWxsIHx8IGFubm90
YXRpb25zT25FeHRlbmRlZERpbWVuc2lvbnMgIT0gbnVsbCkgewogCQkJYW5ub3RhdGlvbnNPbkFs
bERpbWVuc2lvbnMgPSBnZXRNZXJnZWRBbm5vdGF0aW9uc09uRGltZW5zaW9ucyh0eXBlRGltLCBh
bm5vdGF0aW9uc09uRGltZW5zaW9ucywgZXh0ZW5kZWREaW1lbnNpb24sIGFubm90YXRpb25zT25F
eHRlbmRlZERpbWVuc2lvbnMpOyAKLQkJCWRlY2xhcmF0aW9uLmJpdHMgfD0gKHR5cGUuYml0cyAm
IEFTVE5vZGUuSGFzVHlwZUFubm90YXRpb25zKTsKKy8vCQkJZGVjbGFyYXRpb24uYml0cyB8PSAo
dHlwZS5iaXRzICYgQVNUTm9kZS5IYXNUeXBlQW5ub3RhdGlvbnMpOwogCQl9CiAJCWRlY2xhcmF0
aW9uLnR5cGUgPSBjb3B5RGltcyh0eXBlLCBkaW1lbnNpb24sIGFubm90YXRpb25zT25BbGxEaW1l
bnNpb25zKTsKIAl9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9ldmFsL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9ldmFsL0NvZGVTbmlwcGV0QWxsb2NhdGlvbkV4cHJlc3Npb24u
amF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2V2YWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2V2YWwvQ29kZVNuaXBwZXRBbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCmluZGV4IGJjZTQ3NDQu
LjdlZWE5YjYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2V2YWwvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2V2YWwvQ29kZVNuaXBwZXRBbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZh
CisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2V2YWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2V2YWwvQ29kZVNuaXBwZXRBbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCkBAIC0xNCw2ICsxNCw3
IEBACiAgKiAgICAgICAgQW5keSBDbGVtZW50IChHb1Bpdm90YWwsIEluYykgYWNsZW1lbnRAZ29w
aXZvdGFsLmNvbSAtIENvbnRyaWJ1dGlvbnMgZm9yCiAgKiAgICAgICAgICAgICAgICAgICAgICAg
ICAgQnVnIDM4MzYyNCAtIFsxLjhdW2NvbXBpbGVyXSBSZXZpdmUgY29kZSBnZW5lcmF0aW9uIHN1
cHBvcnQgZm9yIHR5cGUgYW5ub3RhdGlvbnMgKGZyb20gT2xpdmllcidzIHdvcmspCiAgKiAgICAg
ICAgICAgICAgICAgICAgICAgICAgQnVnIDQwOTI0NSAtIFsxLjhdW2NvbXBpbGVyXSBUeXBlIGFu
bm90YXRpb25zIGRyb3BwZWQgd2hlbiBjYWxsIGlzIHJvdXRlZCB0aHJvdWdoIGEgc3ludGhldGlj
IGJyaWRnZSBtZXRob2QKKyAqICAgICAgICAgICAgICAgICAgICAgICAgICBCdWcgNDA5MjUwIC0g
WzEuOF1bY29tcGlsZXJdIFZhcmlvdXMgbG9vc2UgZW5kcyBpbiAzMDggY29kZSBnZW5lcmF0aW9u
CiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKi8KIHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmludGVy
bmFsLmV2YWw7CiAKQEAgLTkyLDcgKzkzLDcgQEAgcHVibGljIHZvaWQgZ2VuZXJhdGVDb2RlKEJs
b2NrU2NvcGUgY3VycmVudFNjb3BlLCBDb2RlU3RyZWFtIGNvZGVTdHJlYW0sIAlib29sZWEKIAkJ
aWYgKHRoaXMuYXJndW1lbnRzICE9IG51bGwpIHsKIAkJCWludCBhcmdzTGVuZ3RoID0gdGhpcy5h
cmd1bWVudHMubGVuZ3RoOwogCQkJY29kZVN0cmVhbS5nZW5lcmF0ZUlubGluZWRWYWx1ZShhcmdz
TGVuZ3RoKTsKLQkJCWNvZGVTdHJlYW0ubmV3QXJyYXkobnVsbCwgY3VycmVudFNjb3BlLmNyZWF0
ZUFycmF5VHlwZShjdXJyZW50U2NvcGUuZ2V0VHlwZShUeXBlQ29uc3RhbnRzLkpBVkFfTEFOR19P
QkpFQ1QsIDMpLCAxKSk7CisJCQljb2RlU3RyZWFtLm5ld0FycmF5KGN1cnJlbnRTY29wZS5jcmVh
dGVBcnJheVR5cGUoY3VycmVudFNjb3BlLmdldFR5cGUoVHlwZUNvbnN0YW50cy5KQVZBX0xBTkdf
T0JKRUNULCAzKSwgMSkpOwogCQkJY29kZVN0cmVhbS5kdXAoKTsKIAkJCWZvciAoaW50IGkgPSAw
OyBpIDwgYXJnc0xlbmd0aDsgaSsrKSB7CiAJCQkJY29kZVN0cmVhbS5nZW5lcmF0ZUlubGluZWRW
YWx1ZShpKTsKQEAgLTEwOCw3ICsxMDksNyBAQCBwdWJsaWMgdm9pZCBnZW5lcmF0ZUNvZGUoQmxv
Y2tTY29wZSBjdXJyZW50U2NvcGUsIENvZGVTdHJlYW0gY29kZVN0cmVhbSwgCWJvb2xlYQogCQkJ
fQogCQl9IGVsc2UgewogCQkJY29kZVN0cmVhbS5nZW5lcmF0ZUlubGluZWRWYWx1ZSgwKTsKLQkJ
CWNvZGVTdHJlYW0ubmV3QXJyYXkobnVsbCwgY3VycmVudFNjb3BlLmNyZWF0ZUFycmF5VHlwZShj
dXJyZW50U2NvcGUuZ2V0VHlwZShUeXBlQ29uc3RhbnRzLkpBVkFfTEFOR19PQkpFQ1QsIDMpLCAx
KSk7CisJCQljb2RlU3RyZWFtLm5ld0FycmF5KGN1cnJlbnRTY29wZS5jcmVhdGVBcnJheVR5cGUo
Y3VycmVudFNjb3BlLmdldFR5cGUoVHlwZUNvbnN0YW50cy5KQVZBX0xBTkdfT0JKRUNULCAzKSwg
MSkpOwogCQl9CiAJCWNvZGVTdHJlYW0uaW52b2tlSmF2YUxhbmdSZWZsZWN0Q29uc3RydWN0b3JO
ZXdJbnN0YW5jZSgpOwogCQljb2RlU3RyZWFtLmNoZWNrY2FzdChhbGxvY2F0ZWRUeXBlKTsKZGlm
ZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2V2YWwvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2V2YWwvQ29kZVNuaXBwZXRNZXNzYWdlU2VuZC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvZXZhbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvZXZhbC9Db2RlU25pcHBldE1lc3NhZ2VT
ZW5kLmphdmEKaW5kZXggOTcwNzU2Mi4uMDM5YTg5NCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvZXZhbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvZXZhbC9Db2RlU25pcHBldE1l
c3NhZ2VTZW5kLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZXZhbC9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvZXZhbC9Db2RlU25pcHBldE1lc3NhZ2VTZW5kLmphdmEKQEAgLTEzLDYg
KzEzLDcgQEAKICAqICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVt
ZW50YXRpb24KICAqICAgICAgICBBbmR5IENsZW1lbnQgKEdvUGl2b3RhbCwgSW5jKSBhY2xlbWVu
dEBnb3Bpdm90YWwuY29tIC0gQ29udHJpYnV0aW9ucyBmb3IKICAqICAgICAgICAgICAgICAgICAg
ICAgICAgICBCdWcgNDA5MjQ1IC0gWzEuOF1bY29tcGlsZXJdIFR5cGUgYW5ub3RhdGlvbnMgZHJv
cHBlZCB3aGVuIGNhbGwgaXMgcm91dGVkIHRocm91Z2ggYSBzeW50aGV0aWMgYnJpZGdlIG1ldGhv
ZAorICogICAgICAgICAgICAgICAgICAgICAgICAgIEJ1ZyA0MDkyNTAgLSBbMS44XVtjb21waWxl
cl0gVmFyaW91cyBsb29zZSBlbmRzIGluIDMwOCBjb2RlIGdlbmVyYXRpb24KICAqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqLwogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuZXZhbDsKIApA
QCAtMTE3LDcgKzExOCw3IEBAIHB1YmxpYyB2b2lkIGdlbmVyYXRlQ29kZShCbG9ja1Njb3BlIGN1
cnJlbnRTY29wZSwgQ29kZVN0cmVhbSBjb2RlU3RyZWFtLCBib29sZWFuCiAJCWlmICh0aGlzLmFy
Z3VtZW50cyAhPSBudWxsKSB7CiAJCQlpbnQgYXJnc0xlbmd0aCA9IHRoaXMuYXJndW1lbnRzLmxl
bmd0aDsKIAkJCWNvZGVTdHJlYW0uZ2VuZXJhdGVJbmxpbmVkVmFsdWUoYXJnc0xlbmd0aCk7Ci0J
CQljb2RlU3RyZWFtLm5ld0FycmF5KG51bGwsIGN1cnJlbnRTY29wZS5jcmVhdGVBcnJheVR5cGUo
Y3VycmVudFNjb3BlLmdldFR5cGUoVHlwZUNvbnN0YW50cy5KQVZBX0xBTkdfT0JKRUNULCAzKSwg
MSkpOworCQkJY29kZVN0cmVhbS5uZXdBcnJheShjdXJyZW50U2NvcGUuY3JlYXRlQXJyYXlUeXBl
KGN1cnJlbnRTY29wZS5nZXRUeXBlKFR5cGVDb25zdGFudHMuSkFWQV9MQU5HX09CSkVDVCwgMyks
IDEpKTsKIAkJCWNvZGVTdHJlYW0uZHVwKCk7CiAJCQlmb3IgKGludCBpID0gMDsgaSA8IGFyZ3NM
ZW5ndGg7IGkrKykgewogCQkJCWNvZGVTdHJlYW0uZ2VuZXJhdGVJbmxpbmVkVmFsdWUoaSk7CkBA
IC0xMzMsNyArMTM0LDcgQEAgcHVibGljIHZvaWQgZ2VuZXJhdGVDb2RlKEJsb2NrU2NvcGUgY3Vy
cmVudFNjb3BlLCBDb2RlU3RyZWFtIGNvZGVTdHJlYW0sIGJvb2xlYW4KIAkJCX0KIAkJfSBlbHNl
IHsKIAkJCWNvZGVTdHJlYW0uZ2VuZXJhdGVJbmxpbmVkVmFsdWUoMCk7Ci0JCQljb2RlU3RyZWFt
Lm5ld0FycmF5KG51bGwsIGN1cnJlbnRTY29wZS5jcmVhdGVBcnJheVR5cGUoY3VycmVudFNjb3Bl
LmdldFR5cGUoVHlwZUNvbnN0YW50cy5KQVZBX0xBTkdfT0JKRUNULCAzKSwgMSkpOworCQkJY29k
ZVN0cmVhbS5uZXdBcnJheShjdXJyZW50U2NvcGUuY3JlYXRlQXJyYXlUeXBlKGN1cnJlbnRTY29w
ZS5nZXRUeXBlKFR5cGVDb25zdGFudHMuSkFWQV9MQU5HX09CSkVDVCwgMyksIDEpKTsKIAkJfQog
CQljb2RlU3RyZWFtLmludm9rZUphdmFMYW5nUmVmbGVjdE1ldGhvZEludm9rZSgpOwogCmRpZmYg
LS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvY29yZS91
dGlsL0lFeHRlbmRlZEFubm90YXRpb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVs
L29yZy9lY2xpcHNlL2pkdC9jb3JlL3V0aWwvSUV4dGVuZGVkQW5ub3RhdGlvbi5qYXZhCmluZGV4
IDc2ZWRkMjUuLjg4MjY3NWEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVs
L29yZy9lY2xpcHNlL2pkdC9jb3JlL3V0aWwvSUV4dGVuZGVkQW5ub3RhdGlvbi5qYXZhCisrKyBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9jb3JlL3V0aWwvSUV4
dGVuZGVkQW5ub3RhdGlvbi5qYXZhCkBAIC0xMyw2ICsxMyw3IEBACiAgKiAgICAgSUJNIENvcnBv
cmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCiAgKiAgICAgICAgQW5keSBD
bGVtZW50IChHb1Bpdm90YWwsIEluYykgYWNsZW1lbnRAZ29waXZvdGFsLmNvbSAtIENvbnRyaWJ1
dGlvbnMgZm9yCiAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgQnVnIDM4MzYyNCAtIFsxLjhd
W2NvbXBpbGVyXSBSZXZpdmUgY29kZSBnZW5lcmF0aW9uIHN1cHBvcnQgZm9yIHR5cGUgYW5ub3Rh
dGlvbnMgKGZyb20gT2xpdmllcidzIHdvcmspCisgKiAgICAgICAgICAgICAgICAgICAgICAgICAg
QnVnIDQwOTI1MCAtIFsxLjhdW2NvbXBpbGVyXSBWYXJpb3VzIGxvb3NlIGVuZHMgaW4gMzA4IGNv
ZGUgZ2VuZXJhdGlvbgogICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCiBwYWNrYWdlIG9yZy5lY2xp
cHNlLmpkdC5jb3JlLnV0aWw7CiAKQEAgLTczLDcgKzc0LDcgQEAgcHVibGljIGludGVyZmFjZSBJ
RXh0ZW5kZWRBbm5vdGF0aW9uIGV4dGVuZHMgSUFubm90YXRpb24gewogCSAqIEFuc3dlciBiYWNr
IHRoZSBsb2NhbCB2YXJpYWJsZSByZWZlcmVuY2UgaW5mbyB0YWJsZSBsZW5ndGggb2YgdGhpcyBl
bnRyeSBhcyBzcGVjaWZpZWQgaW4KIAkgKiB0aGUgSlZNIHNwZWNpZmljYXRpb25zLgogCSAqIAot
CSAqIDxwPlRoaXMgaXMgZGVmaW5lZCBvbmx5IGZvciBhbm5vdGF0aW9ucyByZWxhdGVkIGEgbG9j
YWwgdmFyaWFibGUuPC9wPgorCSAqIDxwPlRoaXMgaXMgZGVmaW5lZCBvbmx5IGZvciBhbm5vdGF0
aW9ucyByZWxhdGVkIHRvIGEgbG9jYWwgdmFyaWFibGUuPC9wPgogCSAqCiAJICogQHJldHVybiB0
aGUgbG9jYWwgdmFyaWFibGUgcmVmZXJlbmNlIGluZm8gdGFibGUgbGVuZ3RoIG9mIHRoaXMgZW50
cnkgYXMgc3BlY2lmaWVkIGluCiAJICogdGhlIEpWTSBzcGVjaWZpY2F0aW9ucwpAQCAtODQsNyAr
ODUsNyBAQCBwdWJsaWMgaW50ZXJmYWNlIElFeHRlbmRlZEFubm90YXRpb24gZXh0ZW5kcyBJQW5u
b3RhdGlvbiB7CiAJICogQW5zd2VyIGJhY2sgdGhlIGxvY2FsIHZhcmlhYmxlIHJlZmVyZW5jZSBp
bmZvIHRhYmxlIG9mIHRoaXMgZW50cnkgYXMgc3BlY2lmaWVkIGluCiAJICogdGhlIEpWTSBzcGVj
aWZpY2F0aW9ucy4gQW5zd2VyIGFuIGVtcHR5IGFycmF5IGlmIG5vbmUuCiAJICogCi0JICogPHA+
VGhpcyBpcyBkZWZpbmVkIG9ubHkgZm9yIGFubm90YXRpb25zIHJlbGF0ZWQgYSBsb2NhbCB2YXJp
YWJsZS48L3A+CisJICogPHA+VGhpcyBpcyBkZWZpbmVkIG9ubHkgZm9yIGFubm90YXRpb25zIHJl
bGF0ZWQgdG8gYSBsb2NhbCB2YXJpYWJsZS48L3A+CiAJICoKIAkgKiBAcmV0dXJuIHRoZSBsb2Nh
bCB2YXJpYWJsZSByZWZlcmVuY2UgaW5mbyB0YWJsZSBvZiB0aGlzIGVudHJ5IGFzIHNwZWNpZmll
ZCBpbgogCSAqIHRoZSBKVk0gc3BlY2lmaWNhdGlvbnMuIEFuc3dlciBhbiBlbXB0eSBhcnJheSBp
ZiBub25lCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29yZS91dGlsL0V4dGVuZGVkQW5ub3RhdGlvbi5qYXZhIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvdXRpbC9F
eHRlbmRlZEFubm90YXRpb24uamF2YQppbmRleCBhYTYxODdiLi5kNWYwNjA2IDEwMDY0NAotLS0g
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29y
ZS91dGlsL0V4dGVuZGVkQW5ub3RhdGlvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3V0aWwvRXh0ZW5kZWRBbm5vdGF0
aW9uLmphdmEKQEAgLTE0LDYgKzE0LDcgQEAKICAqICAgICAgICBBbmR5IENsZW1lbnQgKEdvUGl2
b3RhbCwgSW5jKSBhY2xlbWVudEBnb3Bpdm90YWwuY29tIC0gQ29udHJpYnV0aW9ucyBmb3IKICAq
ICAgICAgICAgICAgICAgICAgICAgICAgICBCdWcgMzgzNjI0IC0gWzEuOF1bY29tcGlsZXJdIFJl
dml2ZSBjb2RlIGdlbmVyYXRpb24gc3VwcG9ydCBmb3IgdHlwZSBhbm5vdGF0aW9ucyAoZnJvbSBP
bGl2aWVyJ3Mgd29yaykKICAqICAgICAgICAgICAgICAgICAgICAgICAgICBCdWcgNDA5MjM2IC0g
WzEuOF1bY29tcGlsZXJdIFR5cGUgYW5ub3RhdGlvbnMgb24gaW50ZXJzZWN0aW9uIGNhc3QgdHlw
ZXMgZHJvcHBlZCBieSBjb2RlIGdlbmVyYXRvcgorICogICAgICAgICAgICAgICAgICAgICAgICAg
IEJ1ZyA0MDkyNTAgLSBbMS44XVtjb21waWxlcl0gVmFyaW91cyBsb29zZSBlbmRzIGluIDMwOCBj
b2RlIGdlbmVyYXRpb24KICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwogcGFja2FnZSBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29yZS51dGlsOwogCkBAIC01OSw2ICs2MCw3IEBAIHB1YmxpYyBj
bGFzcyBFeHRlbmRlZEFubm90YXRpb24gZXh0ZW5kcyBDbGFzc0ZpbGVTdHJ1Y3QgaW1wbGVtZW50
cyBJRXh0ZW5kZWRBbm5vCiAKIAlwcml2YXRlIHN0YXRpYyBmaW5hbCBJQW5ub3RhdGlvbkNvbXBv
bmVudFtdIE5PX0VOVFJJRVMgPSBuZXcgSUFubm90YXRpb25Db21wb25lbnRbMF07CiAJcHJpdmF0
ZSBmaW5hbCBzdGF0aWMgaW50W11bXSBOT19UWVBFUEFUSCA9IG5ldyBpbnRbMF1bMF07CisJcHJp
dmF0ZSBmaW5hbCBzdGF0aWMgSUxvY2FsVmFyaWFibGVSZWZlcmVuY2VJbmZvW10gTk9fTE9DQUxf
VkFSSUFCTEVfVEFCTEVfRU5UUklFUyA9IG5ldyBJTG9jYWxWYXJpYWJsZVJlZmVyZW5jZUluZm9b
MF07CiAKIAlwcml2YXRlIGludCB0YXJnZXRUeXBlOwogCXByaXZhdGUgaW50IGFubm90YXRpb25U
eXBlSW5kZXg7CkBAIC03NCw3ICs3Niw3IEBAIHB1YmxpYyBjbGFzcyBFeHRlbmRlZEFubm90YXRp
b24gZXh0ZW5kcyBDbGFzc0ZpbGVTdHJ1Y3QgaW1wbGVtZW50cyBJRXh0ZW5kZWRBbm5vCiAJcHJp
dmF0ZSBpbnQgdHlwZVBhcmFtZXRlckJvdW5kSW5kZXg7CiAJcHJpdmF0ZSBpbnQgcGFyYW1ldGVy
SW5kZXg7CiAJcHJpdmF0ZSBpbnQgZXhjZXB0aW9uVGFibGVJbmRleDsKLQlwcml2YXRlIElMb2Nh
bFZhcmlhYmxlUmVmZXJlbmNlSW5mb1tdIGxvY2FsVmFyaWFibGVUYWJsZTsKKwlwcml2YXRlIElM
b2NhbFZhcmlhYmxlUmVmZXJlbmNlSW5mb1tdIGxvY2FsVmFyaWFibGVUYWJsZSA9IE5PX0xPQ0FM
X1ZBUklBQkxFX1RBQkxFX0VOVFJJRVM7CiAJCiAJLyoqCiAJICogQ29uc3RydWN0b3IgZm9yIEV4
dGVuZGVkQW5ub3RhdGlvbiwgYnVpbGRzIGFuIGFubm90YXRpb24gZnJvbSB0aGUgc3VwcGxpZWQg
Ynl0ZXN0cmVhbS4KQEAgLTI3MSw3ICsyNzMsNyBAQCBwdWJsaWMgY2xhc3MgRXh0ZW5kZWRBbm5v
dGF0aW9uIGV4dGVuZHMgQ2xhc3NGaWxlU3RydWN0IGltcGxlbWVudHMgSUV4dGVuZGVkQW5ubwog
CX0KIAogCXB1YmxpYyBpbnQgZ2V0TG9jYWxWYXJpYWJsZVJlZmVuY2VJbmZvTGVuZ3RoKCkgewot
CQlyZXR1cm4gdGhpcy5sb2NhbFZhcmlhYmxlVGFibGUgIT0gbnVsbCA/IHRoaXMubG9jYWxWYXJp
YWJsZVRhYmxlLmxlbmd0aCA6IDA7CisJCXJldHVybiB0aGlzLmxvY2FsVmFyaWFibGVUYWJsZS5s
ZW5ndGg7CiAJfQogCiAJcHVibGljIElMb2NhbFZhcmlhYmxlUmVmZXJlbmNlSW5mb1tdIGdldExv
Y2FsVmFyaWFibGVUYWJsZSgpIHsKLS0gCjEuNy4xMS4yCgo=
</data>

          </attachment>
      

    </bug>

</bugzilla>