<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>384663</bug_id>
          
          <creation_ts>2012-07-09 17:26:00 -0400</creation_ts>
          <short_desc>Package Based Annotation Compilation Error in JDT 3.8/4.2 (works in 3.7.2)</short_desc>
          <delta_ts>2012-10-10 02:50:30 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>3.8.1</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Olivier Thomann">Olivier_Thomann</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>alfred.nathaniel</cc>
    
    <cc>amj87.iitr</cc>
    
    <cc>jarthana</cc>
    
    <cc>k.electron</cc>
    
    <cc>mseashore</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>3</votes>

      

      

      <flag name="review"
          id="52559"
          type_id="1"
          status="+"
          setter="amj87.iitr"
    />
    <flag name="review"
          id="52560"
          type_id="1"
          status="+"
          setter="srikanth_sankaran"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2134737</commentid>
    <comment_count>0</comment_count>
      <attachid>218465</attachid>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2012-07-09 17:26:53 -0400</bug_when>
    <thetext>Created attachment 218465
Project to reproduce the error

From http://www.eclipse.org/forums/index.php/mv/msg/367209/894624/#msg_894624

I&apos;m seeing an issue in Eclipse 4.2/3.8 (works properly in Eclipse 3.7.2) where errors occur using a custom annotation on a Java package (package-info.java). I have attached a Java project which appears to illustrate the issue and described the issue below. Please let me know if there is additional information I should gather, additional workarounds to try or a different place I should post asking for information/help. Any ideas/information/direction would be most helpful.

I have a custom annotation (ArrayAnnotationDefinition.java) which allows adding metadata to a Java package to be read at runtime (package-info.java). There are two attributes on the annotation (attrib1 and attrib2, both Strings).

In 3.8/4.2, the compilation of a package-info.java fails on startup or clean (this compiles without errors in Eclipse 3.7.2). If auto-compile on, the errors will go away when any changes are made to package-info.java. For example, if you do the &apos;quick-fix&apos; to fix package-info.java, no changes are made, but the errors go away until code is &apos;cleaned&apos; when the errors return again.

I have attached a sample project (test-array-annotation-issue.zip) which works when imported into a clean install of 3.7.2 but displays an error when imported into a clean install of 3.8.0, 4.2.0 or the latest 4.2 nightly build (eclipse-SDK-N20120708-2000-win32). This is running on Windows 7 - 32 bit Eclipse - Java 7 32-bit.

In creating the simplest possible sample project to recreate the error, it appears the error will only appear if the following things are true:
-An &apos;array&apos; annotation exists (ArrayAnnotationDefinition.java) which has multiple attributes (attrib1 and attrib2). Just a single attribute does not display the issue.
-a package-info.java file exists to annotate a Java package (annotations.test) with the array annotation (ArrayAnnotationDefinition.java)
-the package being annotated (annotations.test) needs to have a Java interface (IExtendsInterface.java) which extends another interface inside that package (Interface.java). Just having an interface which extends something like &apos;Serializable&apos; or an interface in another package does not trigger this error.

Thanks in advance for any help/guidance you can provide. -Matt</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2134768</commentid>
    <comment_count>1</comment_count>
      <attachid>218474</attachid>
    <who name="Matt Seashore">mseashore</who>
    <bug_when>2012-07-09 18:37:31 -0400</bug_when>
    <thetext>Created attachment 218474
Project to Reproduce (slightly simpler - non array annotation)

Correction to the conditions which trigger the error.  

The annotation doesn&apos;t have to be an &apos;array&apos; annotation, this error occurs if the annotation has only a single &apos;value&apos; as well.  I didn&apos;t notice as I must have forgotten to do a &apos;clean&apos; to trigger the error again. 

I&apos;ve attached another simpler project to reproduce.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2134788</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-07-09 19:48:14 -0400</bug_when>
    <thetext>This is caused by resolving happening at an unfortunate point in time:

I&apos;m looking at this call-stack:

PackageBinding.getTypeOrPackage(char[]) line: 181	
CompilationUnitScope.findImport(char[][], int) line: 438	
CompilationUnitScope.findSingleImport(char[][], int, boolean) line: 492	
CompilationUnitScope.resolveSingleImport(ImportBinding, int) line: 705	
MethodScope(Scope).getTypeOrPackage(char[], int, boolean) line: 2748	
MethodScope(Scope).getType(char[]) line: 2481	
SingleTypeReference.getTypeBinding(Scope) line: 59	
SingleTypeReference(TypeReference).internalResolveType(Scope) line: 392	
SingleTypeReference(TypeReference).resolveType(BlockScope, boolean) line: 476	
SingleTypeReference(TypeReference).resolveType(BlockScope) line: 472	
SingleMemberAnnotation(Annotation).resolveType(BlockScope) line: 661	
ASTNode.resolveAnnotations(BlockScope, Annotation[], Binding) line: 710	
SourceTypeBinding.getAnnotationTagBits() line: 788	
SourceTypeBinding.initializeDeprecatedAnnotationTagBits() line: 1103	
PackageBinding.isViewedAsDeprecated() line: 227	
SourceTypeBinding(ReferenceBinding).isViewedAsDeprecated() line: 1324	
SingleTypeReference(ASTNode).isTypeUseDeprecated(TypeBinding, Scope) line: 519	
SingleTypeReference(TypeReference).internalResolveType(Scope) line: 413	
SingleTypeReference(TypeReference).resolveType(ClassScope) line: 480	
SingleTypeReference(TypeReference).resolveSuperType(ClassScope) line: 458	
ClassScope.findSupertype(TypeReference) line: 1229	
ClassScope.connectSuperInterfaces() line: 995	
ClassScope.connectTypeHierarchy() line: 1050	
CompilationUnitScope.connectTypeHierarchy() line: 304	
LookupEnvironment.completeTypeBindings() line: 214	
Compiler.internalBeginToCompile(ICompilationUnit[], int) line: 746	


These are the most important steps:

- During Compiler.internalBeginToCompile() all type bindings have been created.

- completeTypeBindings() is processing IExtendsInterface, while AnnotationDefinition is still waiting for this step.

- connectSuperInterfaces() needs to resolve the super reference &quot;Interface&quot;

- via isTypeUseDeprecated() we branch off into retrieving and resolving package-info.java

- this causes resolving of annotations of package-info.java (e.g.: getAnnotationTagBits())

- thus we are resolving the SingleTypeReference(&quot;AnnotationDefinition&quot;)

- we actually find that type using PackageBinding.getType0(name)

BUT, that type has no fields and methods, yet, because that&apos;s done during completeTypeBindings() (via buildFieldsAndMethods()).

Later during Annotation.resolveType() (for SingleMemberAnnotation(&apos;@AnnotationDefinition(&quot;Test1&quot;)&apos;)) we call methods() before methods have been created. Thus, no method &quot;value()&quot; can be found!!


By contrast, if the annotation type were not included in step 1 (buildTypeBindings()), PackageBinding.getTypeOrPackage() would ask the environment, and the answer would be passed to Compiler.accept() which would trigger completeTypeBindings() and all would be well.


Why is PackageBinding.getTypeOrPackage() allowed to return a half-cooked (not completed) type??

How can we trigger out-of-order completing this type?


I&apos;ll take a look, soon, how this can be fixed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2134862</commentid>
    <comment_count>3</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-07-10 02:05:44 -0400</bug_when>
    <thetext>This is a potential backport candidate</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2135239</commentid>
    <comment_count>4</comment_count>
      <attachid>218517</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-07-10 13:59:57 -0400</bug_when>
    <thetext>Created attachment 218517
proposed fix

This is the minimally invasive patch that fixes the immediate issue.
JDT/Core tests are currently running.

Why it fixes the problem:
When methods() is called before completeTypeBindings(), building the methods
on-demand is all we need to resolve &quot;values()&quot;.

Why this should be safe:
ClassScope.buildMethods() is already protected against duplicate invocations 
(using sourceType.areMethodsInitialized())

Is this solution complete?
I briefly scanned all callers of methods() and fields() and could not see
anything that looked immediately dangerous. Right in Annotation.resolveType()
we don&apos;t seem to need more initialization of the annotation type.

Could it be done differently?
Instead of always checking inside methods() I could trigger the same 
on-demand initialization from Annotation.resolveType(), which limits the
change even more. OTOH, it looks fine and consistent to check inside 
methods() whether methods have indeed been built.

Ayush, what do you think, is this safe for back-porting as-is?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2136852</commentid>
    <comment_count>5</comment_count>
    <who name="Matt Seashore">mseashore</who>
    <bug_when>2012-07-13 16:52:33 -0400</bug_when>
    <thetext>I&apos;m not sure this affects the backporting discussion, but for what it&apos;s worth, I&apos;ve applied the patch to the git R3_8_maintenance branch and rebuilt the org.eclipse.jdt.core jar.  I have been running with the patched jdt jar in my 4.2.0 Eclipse while working the last couple of days. 

I can confirm that the patch fixes the issue when compiling package based annotations in my code base.  Additionally, I have not seen any other issues as a result.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2142883</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-07-28 11:16:35 -0400</bug_when>
    <thetext>Released for 4.3M1 via commit https://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=19d165e647c4c3cdf16627c1161435f046ff5fb5

Submitted to gerrit (https://git.eclipse.org/r/#/c/7010/) for inclusion in 3.8.1.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2142888</commentid>
    <comment_count>7</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-07-28 13:00:59 -0400</bug_when>
    <thetext>(In reply to comment #6)
&gt; Released for 4.3M1 via commit
&gt; https://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
&gt; ?id=19d165e647c4c3cdf16627c1161435f046ff5fb5
&gt; 
&gt; Submitted to gerrit (https://git.eclipse.org/r/#/c/7010/) for inclusion in
&gt; 3.8.1.

Added review comments.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2143064</commentid>
    <comment_count>8</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-07-30 06:45:27 -0400</bug_when>
    <thetext>(In reply to comment #7)
&gt; (In reply to comment #6)
&gt; &gt; Released for 4.3M1 via commit
&gt; &gt; https://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
&gt; &gt; ?id=19d165e647c4c3cdf16627c1161435f046ff5fb5
&gt; &gt; 
&gt; &gt; Submitted to gerrit (https://git.eclipse.org/r/#/c/7010/) for inclusion in
&gt; &gt; 3.8.1.
&gt; 
&gt; Added review comments.

Woops, looks like gerrit does not wait for the second reviewer to finish review. As soon as i gave all +1&apos;s it merged the patch to git even though Srikanth&apos;s review is pending.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2143807</commentid>
    <comment_count>9</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-08-01 03:49:34 -0400</bug_when>
    <thetext>Sorry for the delay in reviewing this. I expect to complete the review
well in time for RC1.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2144041</commentid>
    <comment_count>10</comment_count>
    <who name="Karim Fatehi">k.electron</who>
    <bug_when>2012-08-01 14:58:23 -0400</bug_when>
    <thetext>This unfortunately affects our product as well. I assume this wont go into a release build of eclipse till next year?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2144057</commentid>
    <comment_count>11</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-08-01 15:29:44 -0400</bug_when>
    <thetext>(In reply to comment #10)
&gt; This unfortunately affects our product as well. I assume this wont go into a
&gt; release build of eclipse till next year?

This will go into Juno SR1, so you can upgrade in September this year and get the fix.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2144330</commentid>
    <comment_count>12</comment_count>
    <who name="Karim Fatehi">k.electron</who>
    <bug_when>2012-08-02 09:25:12 -0400</bug_when>
    <thetext>perfect. thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2145437</commentid>
    <comment_count>13</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-08-07 03:15:50 -0400</bug_when>
    <thetext>Patch looks good - please release for 3.8.1</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2145469</commentid>
    <comment_count>14</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-08-07 04:19:25 -0400</bug_when>
    <thetext>(In reply to comment #13)
&gt; Patch looks good - please release for 3.8.1

It was already released in 3.8.1 via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=R3_8_maintenance&amp;id=b5a12d3a1233e21825f67e92c5509db2c5b736b3</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2145549</commentid>
    <comment_count>15</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-08-07 08:21:34 -0400</bug_when>
    <thetext>Verified for 4.3 M1 using Build id: I20120805-2000</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2148980</commentid>
    <comment_count>16</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-08-16 06:01:34 -0400</bug_when>
    <thetext>Verified for 3.8.1 with build M20120815-1200</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2169515</commentid>
    <comment_count>17</comment_count>
    <who name="Alfred Nathaniel">alfred.nathaniel</who>
    <bug_when>2012-10-09 11:06:54 -0400</bug_when>
    <thetext>Looks like it just missed Juno SR1 :-(

    Eclipse Java Development Tools	3.8.1.v20120814-104540-8-8nFqpFNOfwKDRVz-tXOcL5d_83</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2169516</commentid>
    <comment_count>18</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-10-09 11:10:30 -0400</bug_when>
    <thetext>(In reply to comment #17)
&gt; Looks like it just missed Juno SR1 :-(
&gt; 
&gt;     Eclipse Java Development Tools
&gt; 3.8.1.v20120814-104540-8-8nFqpFNOfwKDRVz-tXOcL5d_83

That is not what comment#16 indicates, Jay could you double check.
Perhaps this is an altogether different problem ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2169597</commentid>
    <comment_count>19</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-10-09 13:48:00 -0400</bug_when>
    <thetext>The patch was released to the maintenance branch as of v20120728-150915.
This should clearly be in Juno SR1.

The slight offset between

(In reply to comment #16)
&gt; Verified for 3.8.1 with build M20120815-1200

and

(In reply to comment #17)
&gt;     Eclipse Java Development Tools
&gt; 3.8.1.v20120814-104540-8-8nFqpFNOfwKDRVz-tXOcL5d_83

shouldn&apos;t make any difference because all tags in that range point to the same commit in JDT/Core.

All that counts is: can the bug still be reproduced in Juno SR1? I believe it cannot.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2169777</commentid>
    <comment_count>20</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-10-10 00:32:26 -0400</bug_when>
    <thetext>(In reply to comment #19)
&gt; All that counts is: can the bug still be reproduced in Juno SR1? I believe
&gt; it cannot.

Just to reaffirm, I tried to reproduce this with SR1 build and both projects attached to comment #0 and comment #1 work alright. As Srikanth said, may be the scenario is different?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2169795</commentid>
    <comment_count>21</comment_count>
    <who name="Alfred Nathaniel">alfred.nathaniel</who>
    <bug_when>2012-10-10 02:50:30 -0400</bug_when>
    <thetext>Right, a Clean Project fixed my problem.
Sorry for the bother.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>218465</attachid>
            <date>2012-07-09 17:26:00 -0400</date>
            <delta_ts>2012-07-09 17:26:53 -0400</delta_ts>
            <desc>Project to reproduce the error</desc>
            <filename>test-array-annotation-issue.zip</filename>
            <type>application/zip</type>
            <size>4537</size>
            <attacher name="Olivier Thomann">Olivier_Thomann</attacher>
            
              <data encoding="base64">UEsDBBQAAAAAAHls6UAAAAAAAAAAAAAAAAAFAAAAdGVzdC9QSwMEFAAAAAgAeWzpQPUz20CSAAAA
6AAAAA8AAAB0ZXN0Ly5jbGFzc3BhdGh9jj0LwjAYhGcF/0PIbqqbQ2IRqaBDhVJniUloo/FNyIfo
v7cqRRe73R0Pd0fz+9Wgm/JBW2B4TmYYKRBWamgYPtSb6QLny8mYCsNDcDy2nRl9nYLoH+iiQTIc
vMDoFX5k9p8UFnrS+oYoYbQLipxlJIYnEG23TnZVcVzvy3q1LYtqqM2m6FLsC08a3jDNfi8/AVBL
AwQUAAAACAB5bOlAHSWuNLsAAAB8AQAADQAAAHRlc3QvLnByb2plY3R9kMsOwiAQRdea+A9N94Lu
XNB2ofEH1A9AmDQ05RGgjZ8vL1MfiSvmXGbmXiDdQ47VDNYJrZp6j3Z1BYppLlTf1LfreXuou3az
JsbqAZg/gWNWGB+6g7oiikpoPThPcCyTxrSUoHxLcKmi+lrgEuAPuk9i5BcDLFLBYxiliiel2Gjb
I2CjMA7QwD1i2oaCzjQNgM0RygS1/RS9XWH8LkT+cknKEiNa+slC6i7wJ0G+Jzifed2yID339/ee
UEsDBBQAAAAAAHls6UAAAAAAAAAAAAAAAAAPAAAAdGVzdC8uc2V0dGluZ3MvUEsDBBQAAAAAAGdu
6UAAAAAAAAAAAAAAAAAJAAAAdGVzdC9iaW4vUEsDBBQAAAAAAGdu6UAAAAAAAAAAAAAAAAAVAAAA
dGVzdC9iaW4vYW5ub3RhdGlvbnMvUEsDBBQAAAAIAGdu6UAr718sDwEAANsBAAA0AAAAdGVzdC9i
aW4vYW5ub3RhdGlvbnMvQXJyYXlBbm5vdGF0aW9uRGVmaW5pdGlvbi5jbGFzc4VRu07DQBCcDQmG
8AqQBiEeQiKCBgsoqSwICBEgSgIN1SVarIucM7LPkfxrFHwAH4XYo4gboxR3O5qdmx3dfv98fgG4
RNNDhXCsjImtsjo2qR8kicqDGXHD79pohzxUCY2xmio/Uib0n4djHlkPi4SDgi2s/MKE4ClrEz08
JzRPTjuFvC+sCa9mggtCvR9nyYhvdcSE/X/jnDkTwk4vM1ZP+FWnehhxoUwJh53SXD22bBySsbWp
ijKZ05oj7caRHuUuZ+/laXD/2CbslT8ZqCRkK8qj8n474ol4DvIPdnbd4PohuGu3CIQFOTXZS6Uq
DSzBffiyVGFQ/7tXsCp1V9CaaNcZG2hg08E3EGML279QSwMEFAAAAAAAZ27pQAAAAAAAAAAAAAAA
ABoAAAB0ZXN0L2Jpbi9hbm5vdGF0aW9ucy90ZXN0L1BLAwQUAAAACABnbulAA2G28IAAAACmAAAA
MQAAAHRlc3QvYmluL2Fubm90YXRpb25zL3Rlc3QvSUV4dGVuZHNJbnRlcmZhY2UuY2xhc3NljDsO
wkAQQ73hs0BFRUHJAdiCM4CUioITDMuAEkWzUnZAnI2CA3AolEmTJpZsy4Xf7//5Ajhg6VE47Egk
KWmVJAflrKE8vpXllktRbu8U2WPqsK7pRaEheYTzteaoHnOH7eg9vBxWl/RsI5+qxsZmhN33RGM4
TMwzmKy9ZYFFB1BLAwQUAAAACABnbulATcNuamwAAAB0AAAAKQAAAHRlc3QvYmluL2Fubm90YXRp
b25zL3Rlc3QvSW50ZXJmYWNlLmNsYXNzPYo9CoNAEEa/MYkLKULqHCJb5A6BVCk8wbiMosgs6Ojh
LDyAhxJ/Cl/xeMWbl3EC8IFzSAgvVo3GVkXtvEln/qcmbcFBHK6EZ80D+4a19P+8lmCEexb7Nsi3
aoTwOPf3fqYEwgUHW902J0hXUEsDBBQAAAAIAGdu6UAMTIqdcAAAAHoAAAAsAAAAdGVzdC9iaW4v
YW5ub3RhdGlvbnMvdGVzdC9wYWNrYWdlLWluZm8uY2xhc3NNiz0OgkAQhd/gzyZW2th5BN3CO9ha
eIJxM5JFMmtk4HAUHIBDEdiOV7x8xfeNUz8AuMM5FIQLqyZji0kbb9KY/3H4cinXqJ/ksCUcK+7Y
16ylf74rCUY4vFL7D/KItRBO6+KW5TNA2CAv0275AvsZUEsDBBQAAAAAAHls6UAAAAAAAAAAAAAA
AAAJAAAAdGVzdC9zcmMvUEsDBBQAAAAAAHls6UAAAAAAAAAAAAAAAAAVAAAAdGVzdC9zcmMvYW5u
b3RhdGlvbnMvUEsDBBQAAAAIAHls6UAyHPoLAwEAAHMCAAAzAAAAdGVzdC9zcmMvYW5ub3RhdGlv
bnMvQXJyYXlBbm5vdGF0aW9uRGVmaW5pdGlvbi5qYXZhrZFBT8JAEIXP7q+YYyG6IDftpbUSJUZD
sP6AoQxltexupgtJY/zvTtsEDQfCgTlt3nz75iVvNLzsKBhC5nzDptwEiIoBTMbjO3hgh6uN89cw
s4WGlkqrCjqqBqaaeE8rLXpvYAOb5S44ru9bQaa3eHZetuwdYzDOwo34mWCwgoypkwS/7IyUx+IL
SwK01oXuSB0rZbaSIsAn7lFXaEv9t9bTirZkQ954ik+CCwrCyetMbO4qUzSn4Ry5pCAJk8O36MhA
Lz7e8tnrdKCSno7+JdbzNHtJn2Tpd0uhITE2EK+xIEiZsUkPtx5pbazpmvhWV+9Smi0BQ1vebTSI
j6RJK/2oX1BLAwQUAAAAAAB5bOlAAAAAAAAAAAAAAAAAGgAAAHRlc3Qvc3JjL2Fubm90YXRpb25z
L3Rlc3QvUEsDBBQAAAAIAHls6UAttPZdSQAAAFYAAAAwAAAAdGVzdC9zcmMvYW5ub3RhdGlvbnMv
dGVzdC9JRXh0ZW5kc0ludGVyZmFjZS5qYXZhPcjBCYAwDAXQs5kiE7iAZw8dI9YoQUmL+YIg7u6h
0Hd8VfIhu7K4FwiseIzQwERU7+W0zObQa5OsnOYH6mukPtqC+9BLA330A1BLAwQKAAAAAAB5bOlA
G+FhUkIAAABCAAAAKAAAAHRlc3Qvc3JjL2Fubm90YXRpb25zL3Rlc3QvSW50ZXJmYWNlLmphdmFw
YWNrYWdlIGFubm90YXRpb25zLnRlc3Q7DQoNCg0KcHVibGljIGludGVyZmFjZSBJbnRlcmZhY2Ug
ew0KDQp9DQpQSwMEFAAAAAgAeWzpQOXbx1ZdAAAAiAAAACsAAAB0ZXN0L3NyYy9hbm5vdGF0aW9u
cy90ZXN0L3BhY2thZ2UtaW5mby5qYXZhdY1BCoAgEEXXzinCVUEEupUgoSN0gSkshkhFZ9PtK4Sg
RbvPe/DfYFPC03ofGJmCH91Knp5VI3OiWfVycpmVbEGIgnRBWjYQcdlxcxW+B7nj2xmgI4bEH/Gb
MgAXUEsBAj8AFAAAAAAAeWzpQAAAAAAAAAAAAAAAAAUAJAAAAAAAAAAQAAAAAAAAAHRlc3QvCgAg
AAAAAAABABgA9WizCgpezQH1aLMKCl7NAVXisQoKXs0BUEsBAj8AFAAAAAgAeWzpQPUz20CSAAAA
6AAAAA8AJAAAAAAAAAAgAAAAIwAAAHRlc3QvLmNsYXNzcGF0aAoAIAAAAAAAAQAYAHUwsgoKXs0B
ZQmyCgpezQFlCbIKCl7NAVBLAQI/ABQAAAAIAHls6UAdJa40uwAAAHwBAAANACQAAAAAAAAAIAAA
AOIAAAB0ZXN0Ly5wcm9qZWN0CgAgAAAAAAABABgAdTCyCgpezQF1MLIKCl7NAXUwsgoKXs0BUEsB
Aj8AFAAAAAAAeWzpQAAAAAAAAAAAAAAAAA8AJAAAAAAAAAAQAAAAyAEAAHRlc3QvLnNldHRpbmdz
LwoAIAAAAAAAAQAYAIVXsgoKXs0BhVeyCgpezQGFV7IKCl7NAVBLAQI/ABQAAAAAAGdu6UAAAAAA
AAAAAAAAAAAJACQAAAAAAAAAEAAAAPUBAAB0ZXN0L2Jpbi8KACAAAAAAAAEAGADcPGIxDF7NAdw8
YjEMXs0BhVeyCgpezQFQSwECPwAUAAAAAABnbulAAAAAAAAAAAAAAAAAFQAkAAAAAAAAABAAAAAc
AgAAdGVzdC9iaW4vYW5ub3RhdGlvbnMvCgAgAAAAAAABABgAOu+HMQxezQE674cxDF7NAdw8YjEM
Xs0BUEsBAj8AFAAAAAgAZ27pQCvvXywPAQAA2wEAADQAJAAAAAAAAAAgAAAATwIAAHRlc3QvYmlu
L2Fubm90YXRpb25zL0FycmF5QW5ub3RhdGlvbkRlZmluaXRpb24uY2xhc3MKACAAAAAAAAEAGABM
FogxDF7NATrvhzEMXs0BOu+HMQxezQFQSwECPwAUAAAAAABnbulAAAAAAAAAAAAAAAAAGgAkAAAA
AAAAABAAAACwAwAAdGVzdC9iaW4vYW5ub3RhdGlvbnMvdGVzdC8KACAAAAAAAAEAGADgK4cxDF7N
AeArhzEMXs0BAItiMQxezQFQSwECPwAUAAAACABnbulAA2G28IAAAACmAAAAMQAkAAAAAAAAACAA
AADoAwAAdGVzdC9iaW4vYW5ub3RhdGlvbnMvdGVzdC9JRXh0ZW5kc0ludGVyZmFjZS5jbGFzcwoA
IAAAAAAAAQAYAOArhzEMXs0BvN2GMQxezQG83YYxDF7NAVBLAQI/ABQAAAAIAGdu6UBNw25qbAAA
AHQAAAApACQAAAAAAAAAIAAAALcEAAB0ZXN0L2Jpbi9hbm5vdGF0aW9ucy90ZXN0L0ludGVyZmFj
ZS5jbGFzcwoAIAAAAAAAAQAYAKq2hjEMXs0BqraGMQxezQGqtoYxDF7NAVBLAQI/ABQAAAAIAGdu
6UAMTIqdcAAAAHoAAAAsACQAAAAAAAAAIAAAAGoFAAB0ZXN0L2Jpbi9hbm5vdGF0aW9ucy90ZXN0
L3BhY2thZ2UtaW5mby5jbGFzcwoAIAAAAAAAAQAYACylhTEMXs0BLKWFMQxezQEspYUxDF7NAVBL
AQI/ABQAAAAAAHls6UAAAAAAAAAAAAAAAAAJACQAAAAAAAAAEAAAACQGAAB0ZXN0L3NyYy8KACAA
AAAAAAEAGAAFkLMKCl7NAQWQswoKXs0B9WizCgpezQFQSwECPwAUAAAAAAB5bOlAAAAAAAAAAAAA
AAAAFQAkAAAAAAAAABAAAABLBgAAdGVzdC9zcmMvYW5ub3RhdGlvbnMvCgAgAAAAAAABABgAFbez
CgpezQEVt7MKCl7NAQWQswoKXs0BUEsBAj8AFAAAAAgAeWzpQDIc+gsDAQAAcwIAADMAJAAAAAAA
AAAgAAAAfgYAAHRlc3Qvc3JjL2Fubm90YXRpb25zL0FycmF5QW5ub3RhdGlvbkRlZmluaXRpb24u
amF2YQoAIAAAAAAAAQAYAAWQswoKXs0BBZCzCgpezQEFkLMKCl7NAVBLAQI/ABQAAAAAAHls6UAA
AAAAAAAAAAAAAAAaACQAAAAAAAAAEAAAANIHAAB0ZXN0L3NyYy9hbm5vdGF0aW9ucy90ZXN0LwoA
IAAAAAAAAQAYADUFtAoKXs0BNQW0CgpezQEVt7MKCl7NAVBLAQI/ABQAAAAIAHls6UAttPZdSQAA
AFYAAAAwACQAAAAAAAAAIAAAAAoIAAB0ZXN0L3NyYy9hbm5vdGF0aW9ucy90ZXN0L0lFeHRlbmRz
SW50ZXJmYWNlLmphdmEKACAAAAAAAAEAGAAVt7MKCl7NARW3swoKXs0BFbezCgpezQFQSwECPwAK
AAAAAAB5bOlAG+FhUkIAAABCAAAAKAAkAAAAAAAAACAAAAChCAAAdGVzdC9zcmMvYW5ub3RhdGlv
bnMvdGVzdC9JbnRlcmZhY2UuamF2YQoAIAAAAAAAAQAYACXeswoKXs0BJd6zCgpezQEl3rMKCl7N
AVBLAQI/ABQAAAAIAHls6UDl28dWXQAAAIgAAAArACQAAAAAAAAAIAAAACkJAAB0ZXN0L3NyYy9h
bm5vdGF0aW9ucy90ZXN0L3BhY2thZ2UtaW5mby5qYXZhCgAgAAAAAAABABgANQW0CgpezQEl3rMK
Cl7NASXeswoKXs0BUEsFBgAAAAASABIA1AcAAM8JAAAAAA==
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>218474</attachid>
            <date>2012-07-09 18:37:00 -0400</date>
            <delta_ts>2012-07-10 14:09:31 -0400</delta_ts>
            <desc>Project to Reproduce (slightly simpler - non array annotation)</desc>
            <filename>projectToRepoduce-simpleAnnotation.zip</filename>
            <type>application/x-zip-compressed</type>
            <size>3191</size>
            <attacher name="Matt Seashore">mseashore</attacher>
            
              <data encoding="base64">UEsDBBQACAgIAHls6UAAAAAAAAAAAAAAAAAPAAAAdGVzdC8uY2xhc3NwYXRos7GvyM1RKEstKs7M
z7NVMtQzUFJIzUvOT8nMS7dVCg1x07VQsrfj5bJJzkksLi5ILMkAcjgRvNS8kqJKhezMvBRbpeKi
ZCUFkCCEqY9bZXJ+HkxlflG6XmpyTmZBcapeVkqJXk5iaV5yBtB2Pa8g13hnf78QR08/1yB8puWX
lhSUlsAMTMrMAyu20Ud2MgBQSwcI9TPbQI8AAADoAAAAUEsDBBQACAgIAHls6UAAAAAAAAAAAAAA
AAANAAAAdGVzdC8ucHJvamVjdHVQSw7CIBBda+IdGvaC7lzQutB4AfUACJOGpnwCtPH4AqU2NXE3
7828D9DzW/XVCM5Lo2t0xAdUgeZGSN3W6Pm47U/o3Oy21DrTAQ9X8NxJG+J1ZDdUMwVNAB8oyWPi
uFEKdGgomafEFgOfAVmh1yB7cbfAEyrwEqVMi8yUGONaDLyX1gPuRMDcuDiwkWUBuKVCVDDXDinb
F0zWBCW/KYWZa8TIMDgo1xP432DapwL5LtstBt/nrn/vA1BLBwgdJa40ugAAAHwBAABQSwMEFAAI
CAgAIITpQAAAAAAAAAAAAAAAAA8AAAB0ZXN0Ly5zZXR0aW5ncy8DAFBLBwgAAAAAAgAAAAAAAABQ
SwMEFAAICAgA44PpQAAAAAAAAAAAAAAAAC8AAAB0ZXN0L2Jpbi9hbm5vdGF0aW9ucy9Bbm5vdGF0
aW9uRGVmaW5pdGlvbi5jbGFzc4WQv07DMBDGvysUQ/lXEAtCCMRQwUKHjkwRBIQoUKWBhcmNjsiV
66DEqdRXY+ABeCjEhYEwRGI43yff776z7/Pr/QPAALsKLcKxdi7z2pvMFf3gV1/xq3GmUgrLhO5U
z3Xfapf2HydTTrzCCuGovq1d/pgQ2nNtSybsnZ4Na3jsc+PSC0JnnJV5wtfGCrPfNP286pJaVDpv
ZvxsCjOxXJOF/GDY+IyIPbtKyZzeP8gosyZZCKiip4f49j4kHDa3xDpP2Qt50lwPLc/EM168cWU3
Ci7vgpuwRyAsSbRl8yT7VFgV1cLaz9nBuuQDURvCKMYmtrBdyRcQo4udb1BLBwgyq5PV/AAAALUB
AABQSwMEFAAICAgA44PpQAAAAAAAAAAAAAAAADEAAAB0ZXN0L2Jpbi9hbm5vdGF0aW9ucy90ZXN0
L0lFeHRlbmRzSW50ZXJmYWNlLmNsYXNzO/Vv1z4GBgZjBk52BiZGBqXEvLz8ksSSzPy8Yv2S1OIS
fU/XipLUvJRiz7yS1KK0xORUdgYWRgaBrMSyRP2cxLx0ff+krNTkEnYGNkYGKUzdMF2MDFzB+aVF
yalumTlAjhiGsXogE4FmMDIwAzErAwgwMrADSSYGDgBQSwcIA2G28HoAAACmAAAAUEsDBBQACAgI
AOOD6UAAAAAAAAAAAAAAAAApAAAAdGVzdC9iaW4vYW5ub3RhdGlvbnMvdGVzdC9JbnRlcmZhY2Uu
Y2xhc3M79W/XPgYGBmMGdnYGJkYGqcS8vPySxJLM/Lxi/ZLU4hJ9z7yS1KK0xORUdgYWRgaBrMSy
RP2cxLx0ff+krNTkEkYGruD80qLkVLfMnFRGBj64cj2QSjZGBkYGZgYIYGRgBZJMDGwAUEsHCE3D
bmpnAAAAdAAAAFBLAwQUAAgICADjg+lAAAAAAAAAAAAAAAAALAAAAHRlc3QvYmluL2Fubm90YXRp
b25zL3Rlc3QvcGFja2FnZS1pbmZvLmNsYXNzO/Vv1z4GBgZjBnZ2BiZGBtnEvLz8ksSSzPy8Yv2S
1OIS/YLE5OzE9FTdzLy0fHYGFkYGgazEskT9nMS8dH3/pKzU5BJGBq7g/NKi5FS3zJxURgZBZB16
IMViDAyMDMwMEMDIwAokmRjYAFBLBwgMTIqdagAAAHoAAABQSwMEFAAICAgA4IPpQAAAAAAAAAAA
AAAAAC4AAAB0ZXN0L3NyYy9hbm5vdGF0aW9ucy9Bbm5vdGF0aW9uRGVmaW5pdGlvbi5qYXZhrZHB
TsMwDIbP5Cl8bCfIJm7QS0uZYEKgaZQH8DKvC2RJlKaVKsS743bSQBwmDvtP0e8vvy17OjmvBEyg
dL4Put5FSFQK17PZDdwFh5ud85ewsErCQBXGwEg1EKih0NFGsn8IsDHodRtdaG4HY9AY8eg8V4N3
AaN2Fq44T0eNBspAo8X4eTUVHtUH1gRorYtjkyYTQu95igjv2KE0aGv5U5ZzQ3uyseo9ZSfBFUXm
+PVPbOmMVv1puMJQU+QJ8+O35E+AXL29VIvneSryA538mlgui/KpeOCib9dMQ65tpLBFRVAc29zT
Vg+r5yN8iotXvpetoUPTUpJm4kt8A1BLBwi9iLiN/QAAAFkCAABQSwMEFAAICAgATnbpQAAAAAAA
AAAAAAAAADAAAAB0ZXN0L3NyYy9hbm5vdGF0aW9ucy90ZXN0L0lFeHRlbmRzSW50ZXJmYWNlLmph
dmErSEzOTkxPVUjMy8svSSzJzM8r1itJLS6x5uIqKE3KyUxWyMwrSS1KS0xOVfB0rShJzUsp9oSL
pEIEFOAiXNVcnFy1XABQSwcILbT2XUUAAABWAAAAUEsDBBQACAgIAHls6UAAAAAAAAAAAAAAAAAo
AAAAdGVzdC9zcmMvYW5ub3RhdGlvbnMvdGVzdC9JbnRlcmZhY2UuamF2YStITM5OTE9VSMzLyy9J
LMnMzyvWK0ktLrHm5QLBgtKknMxkhcy8ktSitMTkVAVPOKsaJF/LywUAUEsHCBvhYVI4AAAAQgAA
AFBLAwQUAAgICADgg+lAAAAAAAAAAAAAAAAAKwAAAHRlc3Qvc3JjL2Fubm90YXRpb25zL3Rlc3Qv
cGFja2FnZS1pbmZvLmphdmFzcMzLyy9JLMnMz3NJTcvMywSxNJRCUotLDJU0FbgKEpOzE9NTFRLh
yor1SoCS1lyZuQX5RSUoEtjMsubiAgBQSwcIPBIXBz8AAABkAAAAUEsBAhQAFAAICAgAeWzpQPUz
20CPAAAA6AAAAA8AAAAAAAAAAAAAAAAAAAAAAHRlc3QvLmNsYXNzcGF0aFBLAQIUABQACAgIAHls
6UAdJa40ugAAAHwBAAANAAAAAAAAAAAAAAAAAMwAAAB0ZXN0Ly5wcm9qZWN0UEsBAhQAFAAICAgA
IITpQAAAAAACAAAAAAAAAA8AAAAAAAAAAAAAAAAAwQEAAHRlc3QvLnNldHRpbmdzL1BLAQIUABQA
CAgIAOOD6UAyq5PV/AAAALUBAAAvAAAAAAAAAAAAAAAAAAACAAB0ZXN0L2Jpbi9hbm5vdGF0aW9u
cy9Bbm5vdGF0aW9uRGVmaW5pdGlvbi5jbGFzc1BLAQIUABQACAgIAOOD6UADYbbwegAAAKYAAAAx
AAAAAAAAAAAAAAAAAFkDAAB0ZXN0L2Jpbi9hbm5vdGF0aW9ucy90ZXN0L0lFeHRlbmRzSW50ZXJm
YWNlLmNsYXNzUEsBAhQAFAAICAgA44PpQE3DbmpnAAAAdAAAACkAAAAAAAAAAAAAAAAAMgQAAHRl
c3QvYmluL2Fubm90YXRpb25zL3Rlc3QvSW50ZXJmYWNlLmNsYXNzUEsBAhQAFAAICAgA44PpQAxM
ip1qAAAAegAAACwAAAAAAAAAAAAAAAAA8AQAAHRlc3QvYmluL2Fubm90YXRpb25zL3Rlc3QvcGFj
a2FnZS1pbmZvLmNsYXNzUEsBAhQAFAAICAgA4IPpQL2IuI39AAAAWQIAAC4AAAAAAAAAAAAAAAAA
tAUAAHRlc3Qvc3JjL2Fubm90YXRpb25zL0Fubm90YXRpb25EZWZpbml0aW9uLmphdmFQSwECFAAU
AAgICABOdulALbT2XUUAAABWAAAAMAAAAAAAAAAAAAAAAAANBwAAdGVzdC9zcmMvYW5ub3RhdGlv
bnMvdGVzdC9JRXh0ZW5kc0ludGVyZmFjZS5qYXZhUEsBAhQAFAAICAgAeWzpQBvhYVI4AAAAQgAA
ACgAAAAAAAAAAAAAAAAAsAcAAHRlc3Qvc3JjL2Fubm90YXRpb25zL3Rlc3QvSW50ZXJmYWNlLmph
dmFQSwECFAAUAAgICADgg+lAPBIXBz8AAABkAAAAKwAAAAAAAAAAAAAAAAA+CAAAdGVzdC9zcmMv
YW5ub3RhdGlvbnMvdGVzdC9wYWNrYWdlLWluZm8uamF2YVBLBQYAAAAACwALAIsDAADWCAAAAAA=
</data>
<flag name="iplog"
          id="52554"
          type_id="7"
          status="+"
          setter="stephan.herrmann"
    />
          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>218517</attachid>
            <date>2012-07-10 13:59:00 -0400</date>
            <delta_ts>2012-07-10 13:59:57 -0400</delta_ts>
            <desc>proposed fix</desc>
            <filename>Bug_384663.patch</filename>
            <type>text/plain</type>
            <size>2655</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0Fubm90YXRpb25UZXN0
LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlw
c2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9Bbm5vdGF0aW9uVGVzdC5qYXZh
CmluZGV4IDg3NWM1OGUuLjI5NzAwOWMgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
LnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9y
ZWdyZXNzaW9uL0Fubm90YXRpb25UZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUu
dGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3Jl
Z3Jlc3Npb24vQW5ub3RhdGlvblRlc3QuamF2YQpAQCAtNDcsNyArNDcsNyBAQAogCS8vIFN0YXRp
YyBpbml0aWFsaXplciB0byBzcGVjaWZ5IHRlc3RzIHN1YnNldCB1c2luZyBURVNUU18qIHN0YXRp
YyB2YXJpYWJsZXMKIAkvLyBBbGwgc3BlY2lmaWVkIHRlc3RzIHdoaWNoIGRvIG5vdCBiZWxvbmcg
dG8gdGhlIGNsYXNzIGFyZSBza2lwcGVkLi4uCiAJc3RhdGljIHsKLS8vCQlURVNUU19OQU1FUyA9
IG5ldyBTdHJpbmdbXSB7ICJ0ZXN0QnVnMzc2NDI5IiB9OworLy8JCVRFU1RTX05BTUVTID0gbmV3
IFN0cmluZ1tdIHsgInRlc3RCdWczODQ2NjMiIH07CiAvLwkJVEVTVFNfTlVNQkVSUyA9IG5ldyBp
bnRbXSB7IDI5NyB9OwogLy8JCVRFU1RTX1JBTkdFID0gbmV3IGludFtdIHsgMjk0LCAtMSB9Owog
CX0KQEAgLTEwNjA4LDQgKzEwNjA4LDMyIEBACiAJCQlleHBlY3RlZEVycm9yU3RyaW5nLAogCQkJ
SmF2YWNUZXN0T3B0aW9ucy5FeGN1c2UuRWNsaXBzZVdhcm5pbmdDb25maWd1cmVkQXNFcnJvcik7
CiB9CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvMzg0NjYzCisvLyBQYWNrYWdlIEJhc2Vk
IEFubm90YXRpb24gQ29tcGlsYXRpb24gRXJyb3IgaW4gSkRUIDMuOC80LjIgKHdvcmtzIGluIDMu
Ny4yKQorcHVibGljIHZvaWQgdGVzdEJ1ZzM4NDY2MygpIHsKKwlTdHJpbmdbXSB0ZXN0RmlsZXMg
PSB7CisJCSJhbm5vdGF0aW9ucy90ZXN0L0lFeHRlbmRzSW50ZXJmYWNlLmphdmEiLAorCQkicGFj
a2FnZSBhbm5vdGF0aW9ucy50ZXN0O1xuIiArCisJCSJwdWJsaWMgaW50ZXJmYWNlIElFeHRlbmRz
SW50ZXJmYWNlIGV4dGVuZHMgSW50ZXJmYWNlIHt9XG4iLAorCisJCSJhbm5vdGF0aW9ucy90ZXN0
L0ludGVyZmFjZS5qYXZhIiwKKwkJInBhY2thZ2UgYW5ub3RhdGlvbnMudGVzdDtcbiIgKworCQki
cHVibGljIGludGVyZmFjZSBJbnRlcmZhY2Uge31cbiIsCisKKwkJImFubm90YXRpb25zL3Rlc3Qv
cGFja2FnZS1pbmZvLmphdmEiLAorCQkiQEFubm90YXRpb25EZWZpbml0aW9uKFwiVGVzdDFcIikg
XG4iICsKKwkJInBhY2thZ2UgYW5ub3RhdGlvbnMudGVzdDtcbiIgKworCQkiaW1wb3J0IGFubm90
YXRpb25zLkFubm90YXRpb25EZWZpbml0aW9uOyIsCisKKwkJImFubm90YXRpb25zL0Fubm90YXRp
b25EZWZpbml0aW9uLmphdmEiLAorCQkicGFja2FnZSBhbm5vdGF0aW9ucztcbiIgKworCQkiaW1w
b3J0IGphdmEubGFuZy5hbm5vdGF0aW9uLio7XG4iICsKKwkJIkBSZXRlbnRpb24oUmV0ZW50aW9u
UG9saWN5LlJVTlRJTUUpXG4iICsKKwkJIkBUYXJnZXQoRWxlbWVudFR5cGUuUEFDS0FHRSlcbiIg
KworCQkicHVibGljIEBpbnRlcmZhY2UgQW5ub3RhdGlvbkRlZmluaXRpb24ge1xuIiArCisJCSIJ
U3RyaW5nIHZhbHVlKCk7XG4iICsgCisJCSJ9IiwKKwl9OworCXJ1bkNvbmZvcm1UZXN0KHRlc3RG
aWxlcyk7Cit9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1NvdXJjZVR5cGVCaW5kaW5n
LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvbG9va3VwL1NvdXJjZVR5cGVCaW5kaW5nLmphdmEKaW5kZXggOTAxNzY5
Yy4uMzcwZjk3YyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Tb3VyY2VUeXBlQmluZGluZy5q
YXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9sb29rdXAvU291cmNlVHlwZUJpbmRpbmcuamF2YQpAQCAtMTE4MCw2
ICsxMTgwLDEwIEBACiAJaWYgKCh0aGlzLnRhZ0JpdHMgJiBUYWdCaXRzLkFyZU1ldGhvZHNDb21w
bGV0ZSkgIT0gMCkKIAkJcmV0dXJuIHRoaXMubWV0aG9kczsKIAorCWlmICghYXJlTWV0aG9kc0lu
aXRpYWxpemVkKCkpIHsgLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnLzM4NDY2MworCQl0aGlz
LnNjb3BlLmJ1aWxkTWV0aG9kcygpOworCX0KKwogCS8vIGxhemlseSBzb3J0IG1ldGhvZHMKIAlp
ZiAoKHRoaXMudGFnQml0cyAmIFRhZ0JpdHMuQXJlTWV0aG9kc1NvcnRlZCkgPT0gMCkgewogCQlp
bnQgbGVuZ3RoID0gdGhpcy5tZXRob2RzLmxlbmd0aDsK
</data>

          </attachment>
      

    </bug>

</bugzilla>