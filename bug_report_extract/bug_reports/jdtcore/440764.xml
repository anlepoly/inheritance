<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>440764</bug_id>
          
          <creation_ts>2014-07-30 08:36:00 -0400</creation_ts>
          <short_desc>[1.8][null]IllegalArgumentExc in EJC</short_desc>
          <delta_ts>2014-08-28 03:26:35 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.5</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.4.1</target_milestone>
          
          <blocked>440630</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Holger Klene">h.klene</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>jarthana</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="63130"
          type_id="1"
          status="+"
          setter="jarthana"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2433585</commentid>
    <comment_count>0</comment_count>
    <who name="Holger Klene">h.klene</who>
    <bug_when>2014-07-30 08:36:16 -0400</bug_when>
    <thetext>This ticket is a subtask of bug 440630 comment 1 issue 2

Download bug 440630 attachement 245468 and unzip as workspace and open with Eclipse Mars 5.5 nightly from July 28th 2014
In addition open the log-file in Kate or any other editor to monitor for changes.
Deleted the // at the beginning of line A
Kate signals a change in the log file, though eclipse silently ignored the exception (BTW, the java-file in Eclipse is still dirty and unsaved)

java.lang.IllegalArgumentException: Type doesn&apos;t have its own method?
	at org.eclipse.jdt.internal.compiler.lookup.SyntheticFactoryMethodBinding.applyTypeArgumentsOnConstructor(SyntheticFactoryMethodBinding.java:40)
	at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.registerInferenceContext(AllocationExpression.java:776)
	at org.eclipse.jdt.internal.compiler.lookup.ParameterizedGenericMethodBinding.computeCompatibleMethod(ParameterizedGenericMethodBinding.java:170)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:739)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.computeCompatibleMethod(Scope.java:695)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getStaticFactory(Scope.java:5056)
	at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.inferElidedTypes(AllocationExpression.java:581)
	at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.resolvePart2(AllocationExpression.java:497)
	at org.eclipse.jdt.internal.compiler.ast.AllocationExpression.resolveType(AllocationExpression.java:487)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:602)
	at org.eclipse.jdt.internal.compiler.ast.Expression.resolve(Expression.java:1020)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:619)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:299)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:529)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1207)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1320)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:587)
	at org.eclipse.jdt.internal.compiler.Compiler.resolve(Compiler.java:929)
	at org.eclipse.jdt.internal.core.CompilationUnitProblemFinder.process(CompilationUnitProblemFinder.java:197)
	at org.eclipse.jdt.internal.core.CompilationUnit.buildStructure(CompilationUnit.java:194)
	at org.eclipse.jdt.internal.core.Openable.generateInfos(Openable.java:259)
	at org.eclipse.jdt.internal.core.JavaElement.openWhenClosed(JavaElement.java:557)
	at org.eclipse.jdt.internal.core.CompilationUnit.makeConsistent(CompilationUnit.java:1082)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.makeConsistent(ReconcileWorkingCopyOperation.java:171)
	at org.eclipse.jdt.internal.core.ReconcileWorkingCopyOperation.executeOperation(ReconcileWorkingCopyOperation.java:90)
	at org.eclipse.jdt.internal.core.JavaModelOperation.run(JavaModelOperation.java:729)
	at org.eclipse.jdt.internal.core.JavaModelOperation.runOperation(JavaModelOperation.java:789)
	at org.eclipse.jdt.internal.core.CompilationUnit.reconcile(CompilationUnit.java:1247)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:126)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.access$0(JavaReconcilingStrategy.java:108)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy$1.run(JavaReconcilingStrategy.java:89)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:87)
	at org.eclipse.jdt.internal.ui.text.java.JavaReconcilingStrategy.reconcile(JavaReconcilingStrategy.java:151)
	at org.eclipse.jdt.internal.ui.text.CompositeReconcilingStrategy.reconcile(CompositeReconcilingStrategy.java:86)
	at org.eclipse.jdt.internal.ui.text.JavaCompositeReconcilingStrategy.reconcile(JavaCompositeReconcilingStrategy.java:104)
	at org.eclipse.jface.text.reconciler.MonoReconciler.process(MonoReconciler.java:77)
	at org.eclipse.jface.text.reconciler.AbstractReconciler$BackgroundThread.run(AbstractReconciler.java:206)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2434891</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-08-02 08:23:03 -0400</bug_when>
    <thetext>Minimal repro:

//---
import java.util.Comparator;

import org.eclipse.jdt.annotation.*;

@NonNullByDefault({ DefaultLocation.TYPE_PARAMETER })
public class Extract&lt;T&gt; implements Comparator&lt;@NonNull T&gt;  {
	public Extract(Comparator&lt;T&gt; wrapped) {
	}

	@Override
	public int compare(T o1, T o2) {
		return 0;
	}
	
	void test(final Comparator&lt;@Nullable Integer&gt; c) {
		new Extract&lt;&gt;(c).compare(1, null);
	}
}
//---</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2434897</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-08-02 08:57:11 -0400</bug_when>
    <thetext>During diamond inference we fail to find the real method that is represented by a given factory method. This happens, because the ParameterizedTypeBinding contains a ProblemMethodBinding (conflicting null annotations).

This can be easily fixed by extracting the closestMatch from the ProblemMethodBinding.

We only have to ensure that the problem represent by the ProblemMethodBinding is not silently ignored.

I have a patch under test ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2434907</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-08-02 10:06:23 -0400</bug_when>
    <thetext>Released for 4.5 M1 via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=55e73883e7d976f9cccec7b53550d84ac74291b1

Proposing for 4.4.1, because:

- throwing IAE from the compiler is never good.

- the fix is small and directly acknowledges the fact that a MethodBinding can always be a ProblemMethodBinding.

Also: 

(In reply to Stephan Herrmann from comment #2)
&gt; We only have to ensure that the problem represent by the
&gt; ProblemMethodBinding is not silently ignored.

This is not an issue, because the result of applyTypeArgumentsOnConstructor() is not directly used for resolving, but only as a lookup key into a map of inference contexts.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2435570</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-08-05 05:35:14 -0400</bug_when>
    <thetext>Forgot to set the &quot;?&quot; flag on this one :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2435657</commentid>
    <comment_count>5</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-08-05 08:26:35 -0400</bug_when>
    <thetext>+1 for 4.4.1</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2436707</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-08-07 09:37:15 -0400</bug_when>
    <thetext>Released for 4.4.1 via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=R4_4_maintenance&amp;id=2f34290d149abfcd53dc3ac52d72eca8adcbea3a

This version of added tests has different expectation (than master version) because bug 434602 has not been back ported, but the main point to test is: absence of IAE.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2444680</commentid>
    <comment_count>7</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-08-28 03:26:35 -0400</bug_when>
    <thetext>Verified for 4.4.1 with build M20140827-0800

and

Verified for 4.5 M2 with build I20140819-2200</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>