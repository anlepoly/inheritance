<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>413613</bug_id>
          
          <creation_ts>2013-07-24 05:57:00 -0400</creation_ts>
          <short_desc>[1.8] APT should support SE8 annotations</short_desc>
          <delta_ts>2013-10-11 03:57:16 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>APT</component>
          <version>4.3</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          <dependson>414627</dependson>
          <blocked>287648</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Jay Arthanareeswaran">jarthana</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>eclipse</cc>
    
    <cc>jesper</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="59590"
          type_id="1"
          status="+"
          setter="srikanth_sankaran"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2287742</commentid>
    <comment_count>0</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-07-24 05:57:49 -0400</bug_when>
    <thetext>APT currently handles only SE7 annotations and new code has to be added for annotations in SE8 locations, such as receiver, type use etc.

I believe AnnotationDiscoveryVisitor should be updated to provide support for new annotatable AST nodes. This needs further investigation, though.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2294609</commentid>
    <comment_count>1</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-08-14 05:10:00 -0400</bug_when>
    <thetext>Been going through the proposed changes to the APT apis, such as AnnotatedConstruct etc. and I couldn&apos;t determine whether we have enough support for type annotations. It&apos;s been said that an AnnotatedConstruct can be a an Element or TypeMirror. It&apos;s also been said that the existing methods such as RoundEnvironment#getElementsAnnotatedWith(...) support only declaration elements, which itself is fine. 

I can&apos;t figure out (from the javadoc) how to get handles to the TypeMirror from the type use locations, such as a cast expression. Even if one says we get the TypeMirror by invoking Element#asType, I don&apos;t know what elements are to be used for such scenarios.

Honestly, I don&apos;t know if this is a valid question as I might have missed something and hence would like to hear from Walter if the question makes sense before checking with the type annotations team.

Walter, can you throw some light on this? Thanks in advance.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2300344</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-08-28 19:00:09 -0400</bug_when>
    <thetext>I guess cast expression is an unlucky example since javax.lang.model doesn&apos;t encode method bodies, right?


Would the following sequence answer your question?

- TypeElement#getTypeParameters()
  -&gt; List&lt;? extends TypeParameterElement&gt;
- TypeParameterElement#getBounds()
  -&gt; List&lt;? extends TypeMirror&gt;

Now you want to see the @NonNull from

  class X&lt;T extends @NonNull Y&gt; { .. }

Similar for 

  class X&lt;@NonNull T&gt; { .. }

  class X extends @NonNull Y { .. }

  class X extends Y&lt;@NonNull String&gt; { .. }

  void foo(Object @NonNull[] arg) { ... }

etc.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2301122</commentid>
    <comment_count>3</comment_count>
      <attachid>235009</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-08-30 02:47:58 -0400</bug_when>
    <thetext>Created attachment 235009
Prototype

This patch provides APT support for type annotations in super classes, like the following example:

public class Test extends @TypeUseAnnotation(&quot;super&quot;) Object {}

This is just a POC that we can make it work with the compiler support. However, you can also see there are lot of issues with it. I am listing them just for the records and don&apos;t expect to have any further discussion on or spend more time on.

1. In the current implementation (not talking about this patch), the APT models just wrap the bindings and provide additional information such as getSuperClass() on the fly from the binding. If want to make it work for SE8, we should start storing additional information in the APT models, such as TypeElementImpl, as this prototype shows.

2. Worst of all, the effort to reconstruct the model. In the AnnotationDiscoveryVisitor, we create an element (such as TypeElementImpl and store it only when necessary, i.e. only when it the type declaration has annotations. But that won&apos;t work anymore.

Anyway, we will have a better picture when we conclude our discussion on bug 409586.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2313700</commentid>
    <comment_count>4</comment_count>
      <attachid>236059</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-10-03 02:02:11 -0400</bug_when>
    <thetext>Created attachment 236059
Combined fix for this and bug 414627

Now that we have the annotated bindings, the work for supporting SE8 annotations in SE8 locations is far simplified and hence I have moved the fix for bug 414627 into this one. Only question that remains to be answered is how best to accommodated the new tests that need Java 8 in the test project&apos;s classpath.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2313703</commentid>
    <comment_count>5</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-10-03 02:27:18 -0400</bug_when>
    <thetext>Forgot to mention that three of the new tests and an existing APT tests fail with Javac 8. The existing test is about how Javac interprets whitespace in Javadoc. And failure of new tests could simply mean Javac&apos;s APT is incomplete.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2314214</commentid>
    <comment_count>6</comment_count>
      <attachid>236094</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-10-04 05:05:09 -0400</bug_when>
    <thetext>Created attachment 236094
Latest patch

The previous patch had some glitch with the path for one of the files. Looks like some problem with patch generator. I have manually adjusted the patch, which should apply fine now.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2314253</commentid>
    <comment_count>7</comment_count>
      <attachid>236098</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-10-04 06:24:05 -0400</bug_when>
    <thetext>Created attachment 236098
Latest patch

The last one had problems too. This one should work.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2314273</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-04 07:22:52 -0400</bug_when>
    <thetext>I made one pass over the changes and here are some comments. I need to study
this more closely as well as read up the relevant parts of the spec, will do
so next week:

1. AnnotationDiscoveryVisitor: I think needs much more changes. For example
when we see a type declaration, don&apos;t we have to visit the super types, 
type parameters etc ? Likewise for MethodDeclaration: thrown types, receiver,
type variables etc ? Basically we have to visit most every node types in
the TypeReference hierarchy ? If this is not essential and we have tests that
show that to be the case, I need to understand how things work in the APT
world - it is unfamiliar territory for me.

2. ArrayTypeImpl.getAnnotationBindings: I don&apos;t think we need to spell out
the fully qualified name of AB, because the method already returns just AB
and suitable imports should be in place. (3 places use FQN)

3. Should org.eclipse.jdt.internal.compiler.apt.model.ElementImpl.toString()
explicitly print the annotations ? _binding.toString would also print them.
(This is true for type annotations. Not for SE7 annotations)

4. I don&apos;t think ElementsImpl.isFunctionalInterface(TypeElement) should
check for STB. BinaryTypeBindings, ParameterizedTypeBindings, RawTypeBindings
etc could also be functional interfaces.

5. ExecutableElementImpl: remove the comment, &quot;What is the likelihood ...&quot;
The code is doing being defensive and that is good for us.

6. TypeMirrorImpl: The comment: Caution: _env will be NULL for PrimitiveTypeImpl
needs to be suitably amended.

7. TypeMirrorImpl.getAnnotationBindings() should cast to TypeBinding and invoke
getTypeAnnotations() and

8. PrimitiveTypeImpl#getAnnotationBindings can be gotten rid of.

I didn&apos;t review the test changes yet.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2314295</commentid>
    <comment_count>9</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-04 08:21:48 -0400</bug_when>
    <thetext>(9) TypeMirrorImpl.getAnnotationMirrors() calls 
TypeMirrorImpl.getAnnotationBindings() which calls getTypeAnnotations().
This would mean that we would loose the ability to query SE5 annotations
on a TypeMirror that corresponds to a declaration site ?

This may require some changes on the compiler side. We may have to remove
the new API and make getAnnotations() do its job instead.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2314300</commentid>
    <comment_count>10</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-04 08:26:00 -0400</bug_when>
    <thetext>(10) org.eclipse.jdt.internal.compiler.apt.model.ElementImpl.equals(Object)
and similar methods may need inspection.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2314466</commentid>
    <comment_count>11</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-10-04 12:31:22 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #8)
&gt; 1. AnnotationDiscoveryVisitor: I think needs much more changes. For example
&gt; when we see a type declaration, don&apos;t we have to visit the super types, 
&gt; type parameters etc ? Likewise for MethodDeclaration: thrown types, receiver,
&gt; type variables etc ? Basically we have to visit most every node types in
&gt; the TypeReference hierarchy ? If this is not essential and we have tests that
&gt; show that to be the case, I need to understand how things work in the APT
&gt; world - it is unfamiliar territory for me.

javax.annotation.processing.RoundEnvironment doesn&apos;t have any API that pertains to TypeMirror. An annotated construct can either be an Element or TypeMirror. While an Element represent declaration elements such as field, type declaration, method etc, TypeMirror represents a &apos;type use&apos;. So, I guess we are not obliged to track them. This was my initial confusion too as there didn&apos;t appear to be any API that expose type annotated type mirrors. So, looks like the only way to get hold of them is via the Element&apos;s APIs that return a TypeMirror, such as javax.lang.model.element.TypeElement.getSuperclass().


(In reply to Srikanth Sankaran from comment #9)
&gt; (9) TypeMirrorImpl.getAnnotationMirrors() calls 
&gt; TypeMirrorImpl.getAnnotationBindings() which calls getTypeAnnotations().
&gt; This would mean that we would loose the ability to query SE5 annotations
&gt; on a TypeMirror that corresponds to a declaration site ?
&gt; 
&gt; This may require some changes on the compiler side. We may have to remove
&gt; the new API and make getAnnotations() do its job instead.

May be not. As I just mentioned, elements represent declarations. For e.g. in case of a method, the method declaration is represented by ExecutableElementImpl but the return type is a ExecutableTypeImpl. Also note that the former uses getAnnotations() but the latter invokes getTypeAnnotations(). For a field, it&apos;s even more straight forward, as we will have two distinct objects of type VariableElement and TypeMirror to hold the SE7 and SE8 annotations respectively.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2314601</commentid>
    <comment_count>12</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-04 19:56:38 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #11)

&gt; javax.annotation.processing.RoundEnvironment doesn&apos;t have any API that
&gt; pertains to TypeMirror. An annotated construct can either be an Element or
&gt; TypeMirror. While an Element represent declaration elements such as field,
&gt; type declaration, method etc, TypeMirror represents a &apos;type use&apos;. So, I
&gt; guess we are not obliged to track them. This was my initial confusion too as
&gt; there didn&apos;t appear to be any API that expose type annotated type mirrors.
&gt; So, looks like the only way to get hold of them is via the Element&apos;s APIs
&gt; that return a TypeMirror, such as
&gt; javax.lang.model.element.TypeElement.getSuperclass().

We need to check if for example, 
RoundEnvironment.getElementsAnnotatedWith(Class&lt;? extends Annotation&gt;) should return field below if T a type annotation:

public class X {
class Y {}
X.@T Y xy;
}

(1) Can you check what javac does here ? 

Something else that may need change on the compiler side:

@T
public class X {
X x;
}

Today, the field x&apos;s type shares the binding with the declaration. We may
have to start doling out unique bindings for unannotated type uses and not
let them bind to declaration.

(2) Can you see what javac does here ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2314651</commentid>
    <comment_count>13</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-05 08:51:44 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #11)

&gt; TypeMirror. While an Element represent declaration elements such as field,
&gt; type declaration, method etc, TypeMirror represents a &apos;type use&apos;.

Let us check that assumption. TypeMirror is not a Java 8 interface. I think
it can represent both a type use and type declaration.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2314655</commentid>
    <comment_count>14</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-10-05 09:44:11 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #13)
&gt; Let us check that assumption. TypeMirror is not a Java 8 interface. I think
&gt; it can represent both a type use and type declaration.

This is from the Javadoc of DeclaredType, which is a sub type of TypeMirror:

&quot;While a TypeElement represents a class or interface element, a DeclaredType represents a class or interface type, the latter being a use (or invocation) of the former. See TypeElement for more on this distinction.&quot;

The TypeElement also has this:

&quot;While a TypeElement represents a class or interface element, a DeclaredType represents a class or interface type, the latter being a use (or invocation) of the former. The distinction is most apparent with generic types, for which a single element can define a whole family of types. For example, the element java.util.Set corresponds to the parameterized types java.util.Set&lt;String&gt; and java.util.Set&lt;Number&gt; (and many others), and to the raw type java.util.Set.&quot;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2314666</commentid>
    <comment_count>15</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-05 11:23:59 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #14)
&gt; (In reply to Srikanth Sankaran from comment #13)
&gt; &gt; Let us check that assumption. TypeMirror is not a Java 8 interface. I think
&gt; &gt; it can represent both a type use and type declaration.
&gt; 
&gt; This is from the Javadoc of DeclaredType, which is a sub type of TypeMirror:

I believe this is orthogonal to the issue at hand, let us write some programs
to verify reference compiler behavior early next week and take it from there.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2314714</commentid>
    <comment_count>16</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-05 20:49:19 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #8)

&gt; 1. AnnotationDiscoveryVisitor: I think needs much more changes. For example
&gt; when we see a type declaration, don&apos;t we have to visit the super types, 
&gt; type parameters etc ? Likewise for MethodDeclaration: thrown types, receiver,
&gt; type variables etc ? Basically we have to visit most every node types in
&gt; the TypeReference hierarchy ? If this is not essential and we have tests that

Note that org.eclipse.jdt.internal.compiler.CompilationResult.hasAnnotations
is not updated properly for type annotations, so if a file has only type
annotations, it won&apos;t be exposed to the processor at the moment.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2314850</commentid>
    <comment_count>17</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-10-07 01:36:49 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #12)
&gt; We need to check if for example, 
&gt; RoundEnvironment.getElementsAnnotatedWith(Class&lt;? extends Annotation&gt;)
&gt; should return field below if T a type annotation:
&gt; 
&gt; public class X {
&gt; class Y {}
&gt; X.@T Y xy;
&gt; }
&gt; 
&gt; (1) Can you check what javac does here ? 

Both Javac and eclipse return empty result.

&gt; Something else that may need change on the compiler side:
&gt; 
&gt; @T
&gt; public class X {
&gt; X x;
&gt; }
&gt; 
&gt; Today, the field x&apos;s type shares the binding with the declaration. We may
&gt; have to start doling out unique bindings for unannotated type uses and not
&gt; let them bind to declaration.
&gt; 
&gt; (2) Can you see what javac does here ?

Both Javac and eclipse expose the annotation only through the TypeElement of &apos;X&apos; and not through TypeElement.asType and x&apos;s type mirror.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2315380</commentid>
    <comment_count>18</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-07 23:48:21 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #8)
&gt; I made one pass over the changes and here are some comments. I need to study
&gt; this more closely as well as read up the relevant parts of the spec, will do
&gt; so next week:
&gt; 
&gt; 1. AnnotationDiscoveryVisitor: I think needs much more changes.

For the record, Jay and I review the specification and here are the
findings:

    - Type use annotations from a type use site are not &quot;to be discovered&quot;
    - Annotations on a type parameter are a part of the discovery process.

so AnnotationDiscoveryVisitor needs to change only to accommodate the
latter.

(In reply to Jayaprakash Arthanareeswaran from comment #17)
&gt; (In reply to Srikanth Sankaran from comment #12)
&gt; &gt; We need to check if for example, 
&gt; &gt; RoundEnvironment.getElementsAnnotatedWith(Class&lt;? extends Annotation&gt;)
&gt; &gt; should return field below if T a type annotation:
&gt; &gt; 
&gt; &gt; public class X {
&gt; &gt; class Y {}
&gt; &gt; X.@T Y xy;
&gt; &gt; }
&gt; &gt; 
&gt; &gt; (1) Can you check what javac does here ? 
&gt; 
&gt; Both Javac and eclipse return empty result.

Great, per above, we know now that this is the intended behavior.

&gt; 
&gt; &gt; Something else that may need change on the compiler side:
&gt; &gt; 
&gt; &gt; @T
&gt; &gt; public class X {
&gt; &gt; X x;
&gt; &gt; }
&gt; &gt; 
&gt; &gt; Today, the field x&apos;s type shares the binding with the declaration. We may
&gt; &gt; have to start doling out unique bindings for unannotated type uses and not
&gt; &gt; let them bind to declaration.
&gt; &gt; 
&gt; &gt; (2) Can you see what javac does here ?
&gt; 
&gt; Both Javac and eclipse expose the annotation only through the TypeElement of
&gt; &apos;X&apos; and not through TypeElement.asType and x&apos;s type mirror.

OK, I have asked on the EG list about this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2315381</commentid>
    <comment_count>19</comment_count>
      <attachid>236197</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-10-08 00:04:47 -0400</bug_when>
    <thetext>Created attachment 236197
Latest patch

All but 3 new tests (Javac tests) fail.

Srikanth, the AnnotationDiscoveryVisitor has to call ASTNode#resolveAnnotations(..., true) explicitly to get type annotations on parameters, even though we do have the following code in the visit(Argument ...) method:

typeDeclaration.binding.resolveTypesFor(binding);

For other nodes, resolveTypesFor seems to be sufficient. Any idea?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2315383</commentid>
    <comment_count>20</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-08 00:33:02 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #19)
&gt; Created attachment 236197 [details]
&gt; Latest patch
&gt; 
&gt; All but 3 new tests (Javac tests) fail.
&gt; 
&gt; Srikanth, the AnnotationDiscoveryVisitor has to call
&gt; ASTNode#resolveAnnotations(..., true) explicitly to get type annotations on
&gt; parameters, even though we do have the following code in the visit(Argument
&gt; ...) method:
&gt; 
&gt; typeDeclaration.binding.resolveTypesFor(binding);

That is because, to support null analysis, we have pulled up the code that
handles annotations on arguments to a different code path. See org.eclipse.jdt.internal.compiler.ast.Argument.createBinding(MethodScope, TypeBinding)

&gt; For other nodes, resolveTypesFor seems to be sufficient. Any idea?

I am actually surprised that we need to call resolveAnnotations at all
from APT. We need to study this further.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2315388</commentid>
    <comment_count>21</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-08 02:10:49 -0400</bug_when>
    <thetext>Comments on the latest patch:

(1) (a) I prefer that we retain the old behavior in ADV with respect to
calling ASTNode#resolveAnnotations - until we understand this better
and (b) eliminate the code change in ASTNode#resolveAnnotations. This
change does not look right actually, it would copy over the compiler
binding just for annotations[0] and return after the switch breaks.

(2) In TypeMirrorImpl: since for unannotated primitive types env could
be null, the implementations of AnnotatedConstruct methods in TypeMirrorImpl
should guard for that case ? You are advising caution in the comment and
throwing caution to the wind :) Could we have a test case for the unannotated
primitive case please ?

(3) ExecutableTypeImpl.getReceiverType() should guard for binding being
null which may the case for initializers.

(4) Same method; Per javadoc of javax.lang.model.type.ExecutableType.getReceiverType(), should return
javax.lang.model.type.NoType for statics, initializers and non-inner
class constructors. Presently would return a mirror for declaring class
of statics/initializers/non-inner constructors which is wrong.

(5) Same comment as (3) and (4) for ExecutableElementImpl.getReceiverType()
*and* ExecutableElementImpl.isDefault()

(6) TypesImpl.isSameType(TypeMirror, TypeMirror) should compare types
ignoring annotations.

(7) Per comment#16, TypeVariableBinding.setTypeAnnotations should update
org.eclipse.jdt.internal.compiler.CompilationResult.hasAnnotations. We
need a test case that has annotations only on type parameters and see if
they get discovered.

(8) We can remove the method org.eclipse.jdt.internal.compiler.ast.ASTNode.resolveAnnotations(BlockScope, Annotation[], Binding) since APT calls the other method now.

I still have Factory.java and the tests to review, but you can start working
in parallel on these tasks so we can push it out later today.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2315405</commentid>
    <comment_count>22</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-08 03:34:58 -0400</bug_when>
    <thetext>Other than the issues listed in comment#21, the code changes looks good. 
Released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=f8cf1cf93993a2a964d587ccb545506c0c4fdc0b.

I&apos;ll now look through the tests.

Jesper, this provides the framework for you to build a solution for
https://bugs.eclipse.org/bugs/show_bug.cgi?id=418000. Specifically
TypeMirrorImpl.get* methods and ElementImpl.get* methods - both sets
of methods fall back on Factory.get* methods.

Stephan, thanks for raising the issue of lack of support for 
javax.lang.model in Eclipse several weeks ago.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2315472</commentid>
    <comment_count>23</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-08 06:05:50 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #22)
&gt; Other than the issues listed in comment#21, the code changes looks good. 
&gt; Released here:
&gt; http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
&gt; ?h=BETA_JAVA8&amp;id=f8cf1cf93993a2a964d587ccb545506c0c4fdc0b.

I overlooked the need to re-generate the jar with the processors to
include the new Java 8 tests processor. Done and released here:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=5765df1275966cf54b6ae659d19f8222fd521042</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2315535</commentid>
    <comment_count>24</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-08 08:40:23 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #5)
&gt; Forgot to mention that three of the new tests and an existing APT tests fail
&gt; with Javac 8. The existing test is about how Javac interprets whitespace in
&gt; Javadoc. And failure of new tests could simply mean Javac&apos;s APT is
&gt; incomplete.

OK. I confirm that 3 new tests that are failing with javac (they pass with
eclipse) are due to javac bugs. I have disabled those tests from being run
with javac for now here:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=fe1cca21c75376196f24571fde35528fa6315198.

------------------

That leaves us with 3 old failures. These are in two buckets:

(1) testTypesWithSystemCompiler and testTypesWithEclipseCompiler
are due to the same problem. In JRE8, the class HashMap#HashIterator
is not generic. I believe it was previously generic (JRE7 ?)

I suspect this class is not standard API since it is missing in
IBM JREs (See also https://bugs.eclipse.org/bugs/show_bug.cgi?id=258906)

Tests should be rewritten to avoid using non-standard classes.

(2) The other bug is due to as Jay mentioned how the javadoc is differently
formatted. I see this comment in ElementsImpl#formatJavadoc:

/**
	 * Strip the comment characters from a javadoc comment. Assume the comment is already
	 * missing its closing delimiter.
	 *
	 * Javac&apos;s behavior with regard to tab expansion and trimming of whitespace and
	 * asterisks is bizarre and undocumented.  We do our best here to emulate it.
	 */

So the tests should be rewritten to convert all tabs to spaces, strip out all
non-significant white spaces before comparing. Jay, please raise a follow
up defect for (1) and (2) and assign this to Shankha and work with him
on that.

Once it is all green, we should hook up APT#AllTests to RunAllJava8Tests.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2315536</commentid>
    <comment_count>25</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-08 08:42:17 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #22)

&gt; I&apos;ll now look through the tests.

The tests have been reviewed too. We have pretty good coverage there, Thanks
Jay ! Once a follow up patch that addresses the review comments is posted,
I&apos;ll glance through that and release it and we can declare done on APT work
for Java 8.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2315669</commentid>
    <comment_count>26</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-08 11:09:18 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #19)
&gt; Created attachment 236197 [details]
&gt; Latest patch
&gt; 
&gt; All but 3 new tests (Javac tests) fail.

You are a bad boy if you made all but 3 new tests fail :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2315944</commentid>
    <comment_count>27</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-08 22:57:20 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #18)

&gt; &gt; &gt; Something else that may need change on the compiler side:
&gt; &gt; &gt; 
&gt; &gt; &gt; @T
&gt; &gt; &gt; public class X {
&gt; &gt; &gt; X x;
&gt; &gt; &gt; }
&gt; &gt; &gt; 
&gt; &gt; &gt; Today, the field x&apos;s type shares the binding with the declaration. We may
&gt; &gt; &gt; have to start doling out unique bindings for unannotated type uses and not
&gt; &gt; &gt; let them bind to declaration.
&gt; &gt; &gt; 
&gt; &gt; &gt; (2) Can you see what javac does here ?
&gt; &gt; 
&gt; &gt; Both Javac and eclipse expose the annotation only through the TypeElement of
&gt; &gt; &apos;X&apos; and not through TypeElement.asType and x&apos;s type mirror.
&gt; 
&gt; OK, I have asked on the EG list about this.

We have clarification from EG that TypeMirror&apos;s only expose annotations from
use sites and declaration annotations can be retrieved only from elements.
So the observed behavior from both ECJ and javac is the right behavior and
no follow up is needed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2316150</commentid>
    <comment_count>28</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-09 08:32:46 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #8)

&gt; 4. I don&apos;t think ElementsImpl.isFunctionalInterface(TypeElement) should
&gt; check for STB. BinaryTypeBindings, ParameterizedTypeBindings, RawTypeBindings
&gt; etc could also be functional interfaces.

This point can be ignored. Since we don&apos;t create elements for non-source
constructs and since the type element for PTB and RTB is the generic type
which is an STB.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2316200</commentid>
    <comment_count>29</comment_count>
      <attachid>236290</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-10-09 09:46:03 -0400</bug_when>
    <thetext>Created attachment 236290
Follow up items

Patch with changes as suggested + New tests added to cover the following scenarios:
   Annotations present only on type parameters in a compilation unit being discovered
   Unannotated primitive types
   getReceiverType() being tested for member&apos;s constructor, top level constructor and method and static method
	
One of the new tests fail with Javac (_testTypeAnnotations14WithJavac). Looks like a bug again with Javac and I have disabled it for now.

Some comments on some of the suggestions:

(In reply to Srikanth Sankaran from comment #10)
&gt; (10) org.eclipse.jdt.internal.compiler.apt.model.ElementImpl.equals(Object)
&gt; and similar methods may need inspection.

The current implementation depends on binding equality and with introduction of annotated bindings means the equality will be true only if they have the same annotations. The Javadoc of Element#equals() also is not very specific. So, I think we can live with this.

&gt; (1) (a) I prefer that we retain the old behavior in ADV with respect to
&gt; calling ASTNode#resolveAnnotations - until we understand this better
&gt; and (b) eliminate the code change in ASTNode#resolveAnnotations. This
&gt; change does not look right actually, it would copy over the compiler
&gt; binding just for annotations[0] and return after the switch breaks.

Why aren&apos;t we expecting the recipient to be TYPE_PARAMETER? I have coded resolveAnnotations() to accommodate this.

&gt; (8) We can remove the method
&gt; org.eclipse.jdt.internal.compiler.ast.ASTNode.resolveAnnotations(BlockScope,
&gt; Annotation[], Binding) since APT calls the other method now.

I still see quite a few references to this method. Should they start using the new method too, so we can get rid of this one?

I have also made one additional change but not relevant here, but would be a fix for bug 416001.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2316389</commentid>
    <comment_count>30</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-09 15:00:09 -0400</bug_when>
    <thetext>
I made the following changes:

 - AnnotationDiscoveryVisitor:
   
   - I don&apos;t think you meant to put the following statements inside the
     for loop: :)
     
     ASTNode.resolveAnnotations(scope, annotations, currentBinding, true);
     Element element = null;

     The latter defeats the objective behind bug 416001 and the former
     is loop invariant code.

   - I apologize for not catching this in the prior round of review:
     visit(MethodDeclaration) and visit(ConstructorDeclaration) should
     not return true and fall back on the respective type&apos;s visit
     methods to take over and drive. This will result in a whole bunch
     of irrelevant nodes being traversed, most notably method and
     constructor bodies. Instead these methods in ADV should explicitly
     cause traversal of additional nodes relevant to Java 8 viz type
     parameters.

   - visit(TypeParameter, BlockScope) should the force the method
     to declare itself. When we process annotations, it is guaranteed
     that the type parameters for class/interfaces/member types are
     connected, but this is not true for method type parameters.

- ASTNode.java:

   - The first change is not correct. We are in a context where we are
     handling shared annotations: Only fields and locals can share
     annotations. Since type parameters cannot, this code change should
     be backed out.

- TypeParameter.java:

   - We should not check for hasTypeAnnotations() here. This one returns
     true if there are any type annotations *anywhere* in the construct. 
     So will return true, if the bounds of the type parameter has type 
     annotations, but the type parameter itself is unannotated. I changed
     this to look for annotations length &gt; 0.

- TypesImpl.java:

   - Changed the calls to prototype() to unannotated(). prototype() would
     work, in fact STB#unannotated() does return its prototype, but
     unannotated() is the right method to call, politically correctly
     speaking. unannotated() would work for any type that can be annotated
     but prototype() would work only for those types that track a prototype.
     STB is certainly one of them, but opting for the more general call.

- Didn&apos;t see any material changes in LambdaTest.java and Z.java

- I don&apos;t think you want to declare variables of KKK types :)

With these changes, I released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=2e4e63b9ed8aad7925bed1f9109d7e2d1a341f45

Jay, please add Java8ElementsTests to RunAllJava8Tests and send a note
to the team that everyone should have APT projects imported into their
workspace if not already done so.

Thanks Jay, Walter many thanks for pitching in with your comments and views.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2316397</commentid>
    <comment_count>31</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-09 15:09:05 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #30)

&gt;    - visit(TypeParameter, BlockScope) should the force the method
&gt;      to declare itself. When we process annotations, it is guaranteed

I meant to force the method to resolve itself.

(In reply to Jayaprakash Arthanareeswaran from comment #29)

&gt; Patch with changes as suggested + New tests added to cover the following
&gt; scenarios:

The tests offer excellent coverage, thanks. We caught 4 javac bugs, that
is good :)

&gt; (In reply to Srikanth Sankaran from comment #10)
&gt; &gt; (10) org.eclipse.jdt.internal.compiler.apt.model.ElementImpl.equals(Object)
&gt; &gt; and similar methods may need inspection.
&gt; 
&gt; The current implementation depends on binding equality and with introduction
&gt; of annotated bindings means the equality will be true only if they have the
&gt; same annotations. The Javadoc of Element#equals() also is not very specific.
&gt; So, I think we can live with this.

This method is broken, but is not relevant to current topic since we are
dealing with TypeMirrors and not Element&apos;s. Basically this method should
do what ITypeBinding.isEqualTo does: i.e compare binding keys.

&gt; &gt; (1) (a) I prefer that we retain the old behavior in ADV with respect to
&gt; &gt; calling ASTNode#resolveAnnotations - until we understand this better
&gt; &gt; and (b) eliminate the code change in ASTNode#resolveAnnotations. This
&gt; &gt; change does not look right actually, it would copy over the compiler
&gt; &gt; binding just for annotations[0] and return after the switch breaks.
&gt; 
&gt; Why aren&apos;t we expecting the recipient to be TYPE_PARAMETER? I have coded
&gt; resolveAnnotations() to accommodate this.

As I mentioned in earlier comment, this chunk of code is for handing
shared annotations, type parameters cannot share annotations, Shared
annotations come in to play only for fields and locals in declarations
such as:

 @Positive int @NonNull [] f1, f2;

Since the fields, f1 and f2 share their types, they also share their
annotations and the annotations resolved on behalf on one field should
be copied over to the other.

&gt; &gt; (8) We can remove the method
&gt; &gt; org.eclipse.jdt.internal.compiler.ast.ASTNode.resolveAnnotations(BlockScope,
&gt; &gt; Annotation[], Binding) since APT calls the other method now.
&gt; 
&gt; I still see quite a few references to this method. Should they start using
&gt; the new method too, so we can get rid of this one?

Sorry, bad recommendation.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2316491</commentid>
    <comment_count>32</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-10-10 00:16:38 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #30)
&gt; With these changes, I released here:
&gt; http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
&gt; ?h=BETA_JAVA8&amp;id=2e4e63b9ed8aad7925bed1f9109d7e2d1a341f45

Thanks Srikanth, the changes look good.

Just noticed that there 3 additional failures in Java8ElementTests when run as part of org.eclipse.jdt.compiler.apt.tests.AllTests. Most likely to due to the fact there are additional elements being discovered in other tests&apos; source. Will probably need a filter to exclude those. I will investigate.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2316492</commentid>
    <comment_count>33</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-10 00:23:28 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #32)
&gt; (In reply to Srikanth Sankaran from comment #30)
&gt; &gt; With these changes, I released here:
&gt; &gt; http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
&gt; &gt; ?h=BETA_JAVA8&amp;id=2e4e63b9ed8aad7925bed1f9109d7e2d1a341f45
&gt; 
&gt; Thanks Srikanth, the changes look good.
&gt; 
&gt; Just noticed that there 3 additional failures in Java8ElementTests when run
&gt; as part of org.eclipse.jdt.compiler.apt.tests.AllTests. Most likely to due
&gt; to the fact there are additional elements being discovered in other tests&apos;
&gt; source. Will probably need a filter to exclude those. I will investigate.

Hmm. I am pretty certain I ran AllTests, don&apos;t know what went wrong.
I will be running the tests again for https://bugs.eclipse.org/bugs/show_bug.cgi?id=418000 anyways and I can take a look too.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2316494</commentid>
    <comment_count>34</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-10-10 00:39:14 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #32)
&gt; Just noticed that there 3 additional failures in Java8ElementTests when run
&gt; as part of org.eclipse.jdt.compiler.apt.tests.AllTests. Most likely to due
&gt; to the fact there are additional elements being discovered in other tests&apos;
&gt; source. Will probably need a filter to exclude those. I will investigate.

Should&apos;ve mentioned that these are failures with Javac compiler.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2316511</commentid>
    <comment_count>35</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-10-10 02:59:08 -0400</bug_when>
    <thetext>The Java8ElementProcessor when used in IDE passes all but one test. 

Missing root element KKK

That&apos;s because unlike the unit tests, in IDE, I am not selectively copying source files to be processed. So, obviously we would get more elements discovered than we expect. I have manually verified that nothing is left out of discovery too.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2316870</commentid>
    <comment_count>36</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-10 12:50:06 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #33)

&gt; &gt; Just noticed that there 3 additional failures in Java8ElementTests when run
&gt; &gt; as part of org.eclipse.jdt.compiler.apt.tests.AllTests. Most likely to due
&gt; &gt; to the fact there are additional elements being discovered in other tests&apos;
&gt; &gt; source. Will probably need a filter to exclude those. I will investigate.
&gt; 
&gt; Hmm. I am pretty certain I ran AllTests, don&apos;t know what went wrong.
&gt; I will be running the tests again for
&gt; https://bugs.eclipse.org/bugs/show_bug.cgi?id=418000 anyways and I can take
&gt; a look too.

I still see only three failures, the same ones for which bug 418920 was raised.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2317055</commentid>
    <comment_count>37</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2013-10-11 03:57:16 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #36)
&gt; I still see only three failures, the same ones for which bug 418920 was
&gt; raised.

You are right, no additional failures. Must have had something to do with my workspace state. I no longer see those failures.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>235009</attachid>
            <date>2013-08-30 02:47:00 -0400</date>
            <delta_ts>2013-10-03 02:02:11 -0400</delta_ts>
            <desc>Prototype</desc>
            <filename>Bug-413613--Prototype.patch</filename>
            <type>text/plain</type>
            <size>21092</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMAojUCBvcmcuZWNsaXBzZS5qZHQuY29tcGls
ZXIuYXB0LnRlc3RzCmRpZmYgLS1naXQgbGliL2FwdHRlc3Rwcm9jZXNzb3JzLmphciBsaWIvYXB0
dGVzdHByb2Nlc3NvcnMuamFyCmluZGV4IGJhZjRiMWUuLmU3ZDMyMTYgMTAwNjQ0Ci0tLSBsaWIv
YXB0dGVzdHByb2Nlc3NvcnMuamFyCisrKyBsaWIvYXB0dGVzdHByb2Nlc3NvcnMuamFyCkJpbmFy
eSBmaWxlcyBkaWZmZXIKZGlmZiAtLWdpdCBwcm9jZXNzb3JzL29yZy9lY2xpcHNlL2pkdC9jb21w
aWxlci9hcHQvdGVzdHMvcHJvY2Vzc29ycy9lbGVtZW50cy9FbGVtZW50UHJvYy5qYXZhIHByb2Nl
c3NvcnMvb3JnL2VjbGlwc2UvamR0L2NvbXBpbGVyL2FwdC90ZXN0cy9wcm9jZXNzb3JzL2VsZW1l
bnRzL0VsZW1lbnRQcm9jLmphdmEKaW5kZXggMzgzMjI1Zi4uOTJkMmVlYSAxMDA2NDQKLS0tIHBy
b2Nlc3NvcnMvb3JnL2VjbGlwc2UvamR0L2NvbXBpbGVyL2FwdC90ZXN0cy9wcm9jZXNzb3JzL2Vs
ZW1lbnRzL0VsZW1lbnRQcm9jLmphdmEKKysrIHByb2Nlc3NvcnMvb3JnL2VjbGlwc2UvamR0L2Nv
bXBpbGVyL2FwdC90ZXN0cy9wcm9jZXNzb3JzL2VsZW1lbnRzL0VsZW1lbnRQcm9jLmphdmEKQEAg
LTI3LDQgKzI3LDUgQEAKIGltcG9ydCBqYXZheC5hbm5vdGF0aW9uLnByb2Nlc3NpbmcuU3VwcG9y
dGVkQW5ub3RhdGlvblR5cGVzOwogaW1wb3J0IGphdmF4LmFubm90YXRpb24ucHJvY2Vzc2luZy5T
dXBwb3J0ZWRTb3VyY2VWZXJzaW9uOworaW1wb3J0IGphdmF4LmxhbmcubW9kZWwuQW5ub3RhdGVk
Q29uc3RydWN0OwogaW1wb3J0IGphdmF4LmxhbmcubW9kZWwuU291cmNlVmVyc2lvbjsKIGltcG9y
dCBqYXZheC5sYW5nLm1vZGVsLmVsZW1lbnQuQW5ub3RhdGlvbk1pcnJvcjsKQEAgLTE0NCw1ICsx
NDUsOCBAQAogCQkJcmV0dXJuIGZhbHNlOwogCQl9Ci0JCWlmICghZXhhbWluZVNFOFNwZWNpZmlj
cygpKSB7CisJCWlmICghZXhhbWluZVNFOFNwZWNpZmljc0FQSXMoKSkgeworCQkJcmV0dXJuIGZh
bHNlOworCQl9CisJCWlmICghZXhhbWluZVNFOEFubm90YXRpb25zKHJvdW5kRW52KSkgewogCQkJ
cmV0dXJuIGZhbHNlOwogCQl9CkBAIC05NjIsMTIgKzk2NiwyOCBAQAogCQlyZXR1cm4gdHJ1ZTsK
IAl9Ci0JcHJpdmF0ZSBib29sZWFuIGV4YW1pbmVTRThTcGVjaWZpY3MoKSB7Ci0JCVR5cGVFbGVt
ZW50IGFubm90YXRlZFR5cGUgPSBfZWxlbWVudFV0aWxzLmdldFR5cGVFbGVtZW50KCJ0YXJnZXRz
Lm1vZGVsLnBjLlR5cGVBbm5vdGF0aW9uVGVzdCIpOwotCQlpZiAoIWV4YW1pbmVTRThBbm5vdGF0
aW9uTWV0aG9kcyhhbm5vdGF0ZWRUeXBlLCAiY2xhc3MiKSkgcmV0dXJuIGZhbHNlOworCXByaXZh
dGUgYm9vbGVhbiBleGFtaW5lU0U4QW5ub3RhdGlvbnMoUm91bmRFbnZpcm9ubWVudCByb3VuZEVu
dikgeworCQlTZXQ8PyBleHRlbmRzIEVsZW1lbnQ+IGVsZW1lbnRzID0gcm91bmRFbnYuZ2V0RWxl
bWVudHNBbm5vdGF0ZWRXaXRoKFR5cGVVc2VBbm5vdGF0aW9uLmNsYXNzKTsKKwkJVHlwZUVsZW1l
bnQgYW5ub3RhdGVkVHlwZSA9IG51bGw7CisJCWZvciAoRWxlbWVudCBlbGVtZW50IDogZWxlbWVu
dHMpIHsKKwkJCWlmIChlbGVtZW50IGluc3RhbmNlb2YgVHlwZUVsZW1lbnQgJiYgKChUeXBlRWxl
bWVudCkgZWxlbWVudCkuZ2V0U2ltcGxlTmFtZSgpLnRvU3RyaW5nKCkuZXF1YWxzKCJUeXBlVXNl
VGVzdDEiKSkgeworCQkJCWFubm90YXRlZFR5cGUgPSAoVHlwZUVsZW1lbnQpIGVsZW1lbnQ7CisJ
CQkJYnJlYWs7CisJCQl9CisJCX0KKwkJaWYgKGFubm90YXRlZFR5cGUgPT0gbnVsbCkgcmV0dXJu
IGZhbHNlOworCQlpZiAoIWV4YW1pbmVBbm5vdGF0ZWRDb25zdHJ1Y3QoYW5ub3RhdGVkVHlwZSwg
ImNsYXNzIikpIHJldHVybiBmYWxzZTsKKwkJVHlwZU1pcnJvciBzdXBlckNsYXNzID0gYW5ub3Rh
dGVkVHlwZS5nZXRTdXBlcmNsYXNzKCk7CisJCWlmICghZXhhbWluZUFubm90YXRlZENvbnN0cnVj
dChzdXBlckNsYXNzLCAic3VwZXIiKSkgcmV0dXJuIGZhbHNlOworCQlyZXR1cm4gdHJ1ZTsKKwl9
CisJCisJCisJcHJpdmF0ZSBib29sZWFuIGV4YW1pbmVTRThTcGVjaWZpY3NBUElzKCkgeworCQlU
eXBlRWxlbWVudCBhbm5vdGF0ZWRUeXBlID0gX2VsZW1lbnRVdGlscy5nZXRUeXBlRWxlbWVudCgi
dGFyZ2V0cy5tb2RlbC5wYy5Bbm5vdGF0ZWRDb25zdHJ1Y3RUZXN0Iik7CisJCWlmICghZXhhbWlu
ZUFubm90YXRlZENvbnN0cnVjdChhbm5vdGF0ZWRUeXBlLCAiY2xhc3MiKSkgcmV0dXJuIGZhbHNl
OwogCQlpZiAoX2VsZW1lbnRVdGlscy5pc0Z1bmN0aW9uYWxJbnRlcmZhY2UoYW5ub3RhdGVkVHlw
ZSkpIHJldHVybiBmYWxzZTsKIAotCQlTeXN0ZW0ub3V0LnByaW50bG4oIjExMTExMTEiKTsKIAkJ
TGlzdDw/IGV4dGVuZHMgRWxlbWVudD4gbWVtYmVycyA9IF9lbGVtZW50VXRpbHMuZ2V0QWxsTWVt
YmVycyhhbm5vdGF0ZWRUeXBlKTsKLQkJRXhlY3V0YWJsZUVsZW1lbnQgbWV0aG9kID0gbnVsbDsg
Ly8oRXhlY3V0YWJsZUVsZW1lbnQpIG1ldGhvZHMuZ2V0KDApOworCQlFeGVjdXRhYmxlRWxlbWVu
dCBtZXRob2QgPSBudWxsOwogCQlmb3IgKEV4ZWN1dGFibGVFbGVtZW50IG1lbWJlciA6IEVsZW1l
bnRGaWx0ZXIubWV0aG9kc0luKG1lbWJlcnMpKSB7CiAJCQlpZiAoImZvbyIuZXF1YWxzKG1lbWJl
ci5nZXRTaW1wbGVOYW1lKCkudG9TdHJpbmcoKSkpIHsKQEAgLTk3NywxMiArOTk3LDEwIEBACiAJ
CX0KIAotCQlpZiAoIWV4YW1pbmVTRThBbm5vdGF0aW9uTWV0aG9kcyhtZXRob2QsICJtZXRob2Qi
KSkgcmV0dXJuIGZhbHNlOworCQlpZiAoIWV4YW1pbmVBbm5vdGF0ZWRDb25zdHJ1Y3QobWV0aG9k
LCAibWV0aG9kIikpIHJldHVybiBmYWxzZTsKIAkJaWYgKG1ldGhvZCA9PSBudWxsIHx8IG1ldGhv
ZC5pc0RlZmF1bHQoKSkgcmV0dXJuIGZhbHNlOwotCQlTeXN0ZW0ub3V0LnByaW50bG4oIjIyMjIy
MjIyIik7CiAJCWFubm90YXRlZFR5cGUgPSBfZWxlbWVudFV0aWxzLmdldFR5cGVFbGVtZW50KCJ0
YXJnZXRzLm1vZGVsLnBjLkRlZmF1bHRJbnRlcmZhY2UiKTsKLQkJaWYgKCFleGFtaW5lU0U4QW5u
b3RhdGlvbk1ldGhvZHMoYW5ub3RhdGVkVHlwZSwgImludGVyZmFjZSIpKSByZXR1cm4gZmFsc2U7
CisJCWlmICghZXhhbWluZUFubm90YXRlZENvbnN0cnVjdChhbm5vdGF0ZWRUeXBlLCAiaW50ZXJm
YWNlIikpIHJldHVybiBmYWxzZTsKIAkJaWYgKF9lbGVtZW50VXRpbHMuaXNGdW5jdGlvbmFsSW50
ZXJmYWNlKGFubm90YXRlZFR5cGUpKSByZXR1cm4gZmFsc2U7CiAKLQkJU3lzdGVtLm91dC5wcmlu
dGxuKCIzIik7CiAJCW1lbWJlcnMgPSBfZWxlbWVudFV0aWxzLmdldEFsbE1lbWJlcnMoYW5ub3Rh
dGVkVHlwZSk7CiAJCWZvciAoRXhlY3V0YWJsZUVsZW1lbnQgbWVtYmVyIDogRWxlbWVudEZpbHRl
ci5tZXRob2RzSW4obWVtYmVycykpIHsKQEAgLTk5Miw4ICsxMDEwLDcgQEAKIAkJCX0KIAkJfQot
CQlpZiAoIWV4YW1pbmVTRThBbm5vdGF0aW9uTWV0aG9kcyhtZXRob2QsICJkZWZhdWx0IikpIHJl
dHVybiBmYWxzZTsKKwkJaWYgKCFleGFtaW5lQW5ub3RhdGVkQ29uc3RydWN0KG1ldGhvZCwgImRl
ZmF1bHQiKSkgcmV0dXJuIGZhbHNlOwogCQlpZiAobWV0aG9kID09IG51bGwgfHwgIW1ldGhvZC5p
c0RlZmF1bHQoKSkgcmV0dXJuIGZhbHNlOwogCi0JCVN5c3RlbS5vdXQucHJpbnRsbigiNCIpOwog
CQlmb3IgKEV4ZWN1dGFibGVFbGVtZW50IG1lbWJlciA6IEVsZW1lbnRGaWx0ZXIubWV0aG9kc0lu
KG1lbWJlcnMpKSB7CiAJCQlpZiAoInN0YXRpY01ldGhvZCIuZXF1YWxzKG1lbWJlci5nZXRTaW1w
bGVOYW1lKCkudG9TdHJpbmcoKSkpIHsKQEAgLTEwMDIsMTMgKzEwMTksMTEgQEAKIAkJCX0KIAkJ
fQotCQlpZiAoIWV4YW1pbmVTRThBbm5vdGF0aW9uTWV0aG9kcyhtZXRob2QsICJzdGF0aWMiKSkg
cmV0dXJuIGZhbHNlOworCQlpZiAoIWV4YW1pbmVBbm5vdGF0ZWRDb25zdHJ1Y3QobWV0aG9kLCAi
c3RhdGljIikpIHJldHVybiBmYWxzZTsKIAkJaWYgKG1ldGhvZCA9PSBudWxsIHx8IG1ldGhvZC5p
c0RlZmF1bHQoKSkgcmV0dXJuIGZhbHNlOwogCi0JCVN5c3RlbS5vdXQucHJpbnRsbigiNSIpOwog
CQlhbm5vdGF0ZWRUeXBlID0gX2VsZW1lbnRVdGlscy5nZXRUeXBlRWxlbWVudCgidGFyZ2V0cy5t
b2RlbC5wYy5GdW5jdGlvbmFsSW50ZXJmYWNlIik7Ci0JCWlmICghZXhhbWluZVNFOEFubm90YXRp
b25NZXRob2RzKGFubm90YXRlZFR5cGUsICJmdW5jdGlvbmFsIikpIHJldHVybiBmYWxzZTsKKwkJ
aWYgKCFleGFtaW5lQW5ub3RhdGVkQ29uc3RydWN0KGFubm90YXRlZFR5cGUsICJmdW5jdGlvbmFs
IikpIHJldHVybiBmYWxzZTsKIAkJaWYgKCFfZWxlbWVudFV0aWxzLmlzRnVuY3Rpb25hbEludGVy
ZmFjZShhbm5vdGF0ZWRUeXBlKSkgcmV0dXJuIGZhbHNlOwogCi0JCVN5c3RlbS5vdXQucHJpbnRs
bigiNiIpOwogCQltZW1iZXJzID0gX2VsZW1lbnRVdGlscy5nZXRBbGxNZW1iZXJzKGFubm90YXRl
ZFR5cGUpOwogCQlmb3IgKEV4ZWN1dGFibGVFbGVtZW50IG1lbWJlciA6IEVsZW1lbnRGaWx0ZXIu
bWV0aG9kc0luKG1lbWJlcnMpKSB7CkBAIC0xMDE4LDUgKzEwMzMsNSBAQAogCQkJfQogCQl9CQkK
LQkJaWYgKCFleGFtaW5lU0U4QW5ub3RhdGlvbk1ldGhvZHMobWV0aG9kLCAiYWJzdHJhY3QiKSkg
cmV0dXJuIGZhbHNlOworCQlpZiAoIWV4YW1pbmVBbm5vdGF0ZWRDb25zdHJ1Y3QobWV0aG9kLCAi
YWJzdHJhY3QiKSkgcmV0dXJuIGZhbHNlOwogCQlpZiAobWV0aG9kID09IG51bGwgfHwgbWV0aG9k
LmlzRGVmYXVsdCgpKSByZXR1cm4gZmFsc2U7CiAJCQpAQCAtMTAyNCw1ICsxMDM5LDUgQEAKIAl9
CiAJCi0JcHJpdmF0ZSA8QSBleHRlbmRzIEFubm90YXRpb24+IGJvb2xlYW4gZXhhbWluZVNFOEFu
bm90YXRpb25NZXRob2RzKEVsZW1lbnQgY29uc3RydWN0LCAgU3RyaW5nIHZhbHVlKSB7CisJcHJp
dmF0ZSA8QSBleHRlbmRzIEFubm90YXRpb24+IGJvb2xlYW4gZXhhbWluZUFubm90YXRlZENvbnN0
cnVjdChBbm5vdGF0ZWRDb25zdHJ1Y3QgY29uc3RydWN0LCAgU3RyaW5nIHZhbHVlKSB7CiAJCVR5
cGVVc2VBbm5vdGF0aW9uIGFubm90ID0gY29uc3RydWN0LmdldEFubm90YXRpb24oVHlwZVVzZUFu
bm90YXRpb24uY2xhc3MpOwogCQlpZiAoYW5ub3QgPT0gbnVsbCkgcmV0dXJuIGZhbHNlOwpkaWZm
IC0tZ2l0IHJlc291cmNlcy90YXJnZXRzL21vZGVsL3BjL0Fubm90YXRlZENvbnN0cnVjdFRlc3Qu
amF2YSByZXNvdXJjZXMvdGFyZ2V0cy9tb2RlbC9wYy9Bbm5vdGF0ZWRDb25zdHJ1Y3RUZXN0Lmph
dmEKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMC4uMjhhMTEwZAotLS0gL2Rldi9u
dWxsCisrKyByZXNvdXJjZXMvdGFyZ2V0cy9tb2RlbC9wYy9Bbm5vdGF0ZWRDb25zdHJ1Y3RUZXN0
LmphdmEKQEAgLTAsMCArMSwyNSBAQAorcGFja2FnZSB0YXJnZXRzLm1vZGVsLnBjOworCitpbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLmFwdC50ZXN0cy5hbm5vdGF0aW9ucy4qOworCitA
VHlwZVVzZUFubm90YXRpb24oImNsYXNzIikKK3B1YmxpYyBjbGFzcyBBbm5vdGF0ZWRDb25zdHJ1
Y3RUZXN0IHsKKwlAVHlwZVVzZUFubm90YXRpb24oIm1ldGhvZCIpIFN0cmluZyBmb28oKSB7CisJ
CXJldHVybiBudWxsOworCX0KK30gICAgIAorCitAVHlwZVVzZUFubm90YXRpb24oImludGVyZmFj
ZSIpCitpbnRlcmZhY2UgRGVmYXVsdEludGVyZmFjZSB7CisJcHVibGljIGRlZmF1bHQgQFR5cGVV
c2VBbm5vdGF0aW9uKCJkZWZhdWx0IikgU3RyaW5nIGRlZmF1bHRNZXRob2QgKCkgeworCQlyZXR1
cm4gbnVsbDsKKwl9CisJcHVibGljIHN0YXRpYyBAVHlwZVVzZUFubm90YXRpb24oInN0YXRpYyIp
IFN0cmluZyBzdGF0aWNNZXRob2QgKCkgeworCQlyZXR1cm4gbnVsbDsKKwl9Cit9ICAgICAKKwor
QFR5cGVVc2VBbm5vdGF0aW9uKCJmdW5jdGlvbmFsIikKK2ludGVyZmFjZSBGdW5jdGlvbmFsSW50
ZXJmYWNlIHsKKwlwdWJsaWMgYWJzdHJhY3QgQFR5cGVVc2VBbm5vdGF0aW9uKCJhYnN0cmFjdCIp
IFN0cmluZyBhYnN0cmFjdE1ldGhvZCAoKTsKK30gClwgTm8gbmV3bGluZSBhdCBlbmQgb2YgZmls
ZQpkaWZmIC0tZ2l0IHJlc291cmNlcy90YXJnZXRzL21vZGVsL3BjL1R5cGVBbm5vdGF0aW9uVGVz
dC5qYXZhIHJlc291cmNlcy90YXJnZXRzL21vZGVsL3BjL1R5cGVBbm5vdGF0aW9uVGVzdC5qYXZh
CmRlbGV0ZWQgZmlsZSBtb2RlIDEwMDY0NAppbmRleCBmYjlkMzgxLi4wMDAwMDAwCi0tLSByZXNv
dXJjZXMvdGFyZ2V0cy9tb2RlbC9wYy9UeXBlQW5ub3RhdGlvblRlc3QuamF2YQorKysgL2Rldi9u
dWxsCkBAIC0xLDI1ICswLDAgQEAKLXBhY2thZ2UgdGFyZ2V0cy5tb2RlbC5wYzsKLQotaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5jb21waWxlci5hcHQudGVzdHMuYW5ub3RhdGlvbnMuKjsKLQotQFR5
cGVVc2VBbm5vdGF0aW9uKCJjbGFzcyIpCi1wdWJsaWMgY2xhc3MgVHlwZUFubm90YXRpb25UZXN0
IHsKLQlAVHlwZVVzZUFubm90YXRpb24oIm1ldGhvZCIpIFN0cmluZyBmb28oKSB7Ci0JCXJldHVy
biBudWxsOwotCX0KLX0gICAgIAotCi1AVHlwZVVzZUFubm90YXRpb24oImludGVyZmFjZSIpCi1p
bnRlcmZhY2UgRGVmYXVsdEludGVyZmFjZSB7Ci0JcHVibGljIGRlZmF1bHQgQFR5cGVVc2VBbm5v
dGF0aW9uKCJkZWZhdWx0IikgU3RyaW5nIGRlZmF1bHRNZXRob2QgKCkgewotCQlyZXR1cm4gbnVs
bDsKLQl9Ci0JcHVibGljIHN0YXRpYyBAVHlwZVVzZUFubm90YXRpb24oInN0YXRpYyIpIFN0cmlu
ZyBzdGF0aWNNZXRob2QgKCkgewotCQlyZXR1cm4gbnVsbDsKLQl9Ci19ICAgICAKLQotQFR5cGVV
c2VBbm5vdGF0aW9uKCJmdW5jdGlvbmFsIikKLWludGVyZmFjZSBGdW5jdGlvbmFsSW50ZXJmYWNl
IHsKLQlwdWJsaWMgYWJzdHJhY3QgQFR5cGVVc2VBbm5vdGF0aW9uKCJhYnN0cmFjdCIpIFN0cmlu
ZyBhYnN0cmFjdE1ldGhvZCAoKTsKLX0gClwgTm8gbmV3bGluZSBhdCBlbmQgb2YgZmlsZQpkaWZm
IC0tZ2l0IHJlc291cmNlcy90YXJnZXRzL21vZGVsL3BjL1R5cGVVc2VUZXN0MS5qYXZhIHJlc291
cmNlcy90YXJnZXRzL21vZGVsL3BjL1R5cGVVc2VUZXN0MS5qYXZhCm5ldyBmaWxlIG1vZGUgMTAw
NjQ0CmluZGV4IDAwMDAwMDAuLmY3NmM4NGIKLS0tIC9kZXYvbnVsbAorKysgcmVzb3VyY2VzL3Rh
cmdldHMvbW9kZWwvcGMvVHlwZVVzZVRlc3QxLmphdmEKQEAgLTAsMCArMSw3IEBACitwYWNrYWdl
IHRhcmdldHMubW9kZWwucGM7CisKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29tcGlsZXIuYXB0
LnRlc3RzLmFubm90YXRpb25zLio7CisKK0BUeXBlVXNlQW5ub3RhdGlvbigiY2xhc3MiKQorcHVi
bGljIGNsYXNzIFR5cGVVc2VUZXN0MSBleHRlbmRzIEBUeXBlVXNlQW5ub3RhdGlvbigic3VwZXIi
KSBPYmplY3QgeworfQpcIE5vIG5ld2xpbmUgYXQgZW5kIG9mIGZpbGUKI1Agb3JnLmVjbGlwc2Uu
amR0LmNvbXBpbGVyLmFwdApkaWZmIC0tZ2l0IHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvYXB0L2Rpc3BhdGNoL0Fubm90YXRpb25EaXNjb3ZlcnlWaXNpdG9yLmphdmEgc3Jj
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQvZGlzcGF0Y2gvQW5ub3RhdGlv
bkRpc2NvdmVyeVZpc2l0b3IuamF2YQppbmRleCA0NTE2OGY3Li5lMTBhYjdmIDEwMDY0NAotLS0g
c3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQvZGlzcGF0Y2gvQW5ub3Rh
dGlvbkRpc2NvdmVyeVZpc2l0b3IuamF2YQorKysgc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hcHQvZGlzcGF0Y2gvQW5ub3RhdGlvbkRpc2NvdmVyeVZpc2l0b3IuamF2YQpA
QCAtMTEsNCArMTEsNyBAQAogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIuYXB0LmRpc3BhdGNoOwogCitpbXBvcnQgamF2YS51dGlsLkhhc2hTZXQ7CitpbXBvcnQgamF2
YS51dGlsLlNldDsKKwogaW1wb3J0IGphdmF4LmxhbmcubW9kZWwuZWxlbWVudC5FbGVtZW50Owog
aW1wb3J0IGphdmF4LmxhbmcubW9kZWwuZWxlbWVudC5UeXBlRWxlbWVudDsKQEAgLTE2LDEyICsx
OSwxNSBAQAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5BU1RWaXNp
dG9yOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hcHQubW9kZWwu
RmFjdG9yeTsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXB0Lm1v
ZGVsLlR5cGVFbGVtZW50SW1wbDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29t
cGlsZXIuYXB0LnV0aWwuTWFueVRvTWFueTsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJu
YWwuY29tcGlsZXIuYXN0LkFTVE5vZGU7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFs
LmNvbXBpbGVyLmFzdC5BYnN0cmFjdE1ldGhvZERlY2xhcmF0aW9uOwogaW1wb3J0IG9yZy5lY2xp
cHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuQW5ub3RhdGlvbjsKK2ltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkFubm90YXRpb24uVHlwZVVzZUJpbmRpbmc7
CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5Bcmd1bWVudDsK
IGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkNvbnN0cnVjdG9y
RGVjbGFyYXRpb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFz
dC5GaWVsZERlY2xhcmF0aW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21w
aWxlci5hc3QuTWV0aG9kRGVjbGFyYXRpb247CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVy
bmFsLmNvbXBpbGVyLmFzdC5TaW5nbGVUeXBlUmVmZXJlbmNlOwogaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuVHlwZURlY2xhcmF0aW9uOwogaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5pbXBsLlJlZmVyZW5jZUNvbnRleHQ7CkBAIC00
OSw0ICs1NSw2IEBACiAJICovCiAJZmluYWwgTWFueVRvTWFueTxUeXBlRWxlbWVudCwgRWxlbWVu
dD4gX2Fubm9Ub0VsZW1lbnQ7CisJCisJZmluYWwgU2V0PFR5cGVFbGVtZW50PiBfdG9wTGV2ZWxU
eXBlczsKIAogCXB1YmxpYyBBbm5vdGF0aW9uRGlzY292ZXJ5VmlzaXRvcihCYXNlUHJvY2Vzc2lu
Z0VudkltcGwgZW52KSB7CkBAIC01NCw0ICs2Miw1IEBACiAJCV9mYWN0b3J5ID0gZW52LmdldEZh
Y3RvcnkoKTsKIAkJX2Fubm9Ub0VsZW1lbnQgPSBuZXcgTWFueVRvTWFueTxUeXBlRWxlbWVudCwg
RWxlbWVudD4oKTsKKwkJX3RvcExldmVsVHlwZXMgPSBuZXcgSGFzaFNldDxUeXBlRWxlbWVudD4o
KTsKIAl9CiAKQEAgLTExNyw0ICsxMjYsMTUgQEAKIAl9CiAKKwlwcml2YXRlIFR5cGVVc2VCaW5k
aW5nIHByb2Nlc3NBbm5vdGF0ZWRUeXBlUmVmZXJlbmNlKFNpbmdsZVR5cGVSZWZlcmVuY2UgdHlw
ZSwgQ2xhc3NTY29wZSBzY29wZSkgeworCQl0eXBlLnJlc29sdmVUeXBlKHNjb3BlKTsKKwkJQW5u
b3RhdGlvbltdW10gYW5ub3RhdGlvbnMgPSB0eXBlLmFubm90YXRpb25zOworCQlBbm5vdGF0aW9u
W10gYW5ub3RzOworCQlpZiAoYW5ub3RhdGlvbnMgIT0gbnVsbCAmJiAoYW5ub3RzID0gYW5ub3Rh
dGlvbnNbMF0pICE9IG51bGwpIHsKKwkJCS8vdGhpcy5yZXNvbHZlVHlwZUFubm90YXRpb25zKGFu
bm90cywgKFR5cGVVc2VCaW5kaW5nKSBhbm5vdHNbMF0ucmVjaXBpZW50KTsKKwkJCXJldHVybiAo
VHlwZVVzZUJpbmRpbmcpIGFubm90c1swXS5yZWNpcGllbnQ7CisJCX0KKwkJcmV0dXJuIG51bGw7
CisJfQorCQogCUBPdmVycmlkZQogCXB1YmxpYyBib29sZWFuIHZpc2l0KE1ldGhvZERlY2xhcmF0
aW9uIG1ldGhvZERlY2xhcmF0aW9uLCBDbGFzc1Njb3BlIHNjb3BlKSB7CkBAIC0xNjUsMjcgKzE4
NSwzNSBAQAogCQl9CiAJCUFubm90YXRpb25bXSBhbm5vdGF0aW9ucyA9IHR5cGVEZWNsYXJhdGlv
bi5hbm5vdGF0aW9uczsKKwkJVHlwZUVsZW1lbnRJbXBsIHR5cGVJbXBsID0gbnVsbDsKIAkJaWYg
KGFubm90YXRpb25zICE9IG51bGwpIHsKLQkJCXRoaXMucmVzb2x2ZUFubm90YXRpb25zKAorCQkJ
dHlwZUltcGwgPSAoVHlwZUVsZW1lbnRJbXBsKSB0aGlzLnJlc29sdmVBbm5vdGF0aW9ucygKIAkJ
CQkJdHlwZURlY2xhcmF0aW9uLnN0YXRpY0luaXRpYWxpemVyU2NvcGUsCiAJCQkJCWFubm90YXRp
b25zLAogCQkJCQliaW5kaW5nKTsKIAkJfQorCQlpZiAodHlwZURlY2xhcmF0aW9uLnN1cGVyY2xh
c3MgIT0gbnVsbCAmJiB0eXBlRGVjbGFyYXRpb24uc3VwZXJjbGFzcy5hbm5vdGF0aW9ucyAhPSBu
dWxsKSB7CisJCQlUeXBlVXNlQmluZGluZyBzdXBlckNsYXNzID0gcHJvY2Vzc0Fubm90YXRlZFR5
cGVSZWZlcmVuY2UoKFNpbmdsZVR5cGVSZWZlcmVuY2UpIHR5cGVEZWNsYXJhdGlvbi5zdXBlcmNs
YXNzLCB0eXBlRGVjbGFyYXRpb24uc2NvcGUpOworCQkJaWYgKHR5cGVJbXBsICE9IG51bGwpIHsK
KwkJCQl0eXBlSW1wbC5zdXBlckNsYXNzID0gc3VwZXJDbGFzczsKKwkJCX0KKwkJfQogCQlyZXR1
cm4gdHJ1ZTsKIAl9CiAKLQlwcml2YXRlIHZvaWQgcmVzb2x2ZUFubm90YXRpb25zKAorCXByaXZh
dGUgRWxlbWVudCByZXNvbHZlQW5ub3RhdGlvbnMoCiAJCQlCbG9ja1Njb3BlIHNjb3BlLAogCQkJ
QW5ub3RhdGlvbltdIGFubm90YXRpb25zLAogCQkJQmluZGluZyBjdXJyZW50QmluZGluZykgewog
CQlBU1ROb2RlLnJlc29sdmVBbm5vdGF0aW9ucyhzY29wZSwgYW5ub3RhdGlvbnMsIGN1cnJlbnRC
aW5kaW5nKTsKLQkJCisJCUVsZW1lbnQgZWxlbWVudCA9IG51bGw7CiAJCWZvciAoQW5ub3RhdGlv
biBhbm5vdGF0aW9uIDogYW5ub3RhdGlvbnMpIHsKIAkJCUFubm90YXRpb25CaW5kaW5nIGJpbmRp
bmcgPSBhbm5vdGF0aW9uLmdldENvbXBpbGVyQW5ub3RhdGlvbigpOwogCQkJaWYgKGJpbmRpbmcg
IT0gbnVsbCkgeyAvLyBiaW5kaW5nIHNob3VsZCBiZSByZXNvbHZlZCwgYnV0IGluIGNhc2UgaXQn
cyBub3QsIGlnbm9yZSBpdAogCQkJCVR5cGVFbGVtZW50IGFubm8gPSAoVHlwZUVsZW1lbnQpX2Zh
Y3RvcnkubmV3RWxlbWVudChiaW5kaW5nLmdldEFubm90YXRpb25UeXBlKCkpOyAKLQkJCQlFbGVt
ZW50IGVsZW1lbnQgPSBfZmFjdG9yeS5uZXdFbGVtZW50KGN1cnJlbnRCaW5kaW5nKTsKKwkJCQll
bGVtZW50ID0gX2ZhY3RvcnkubmV3RWxlbWVudChjdXJyZW50QmluZGluZyk7CiAJCQkJX2Fubm9U
b0VsZW1lbnQucHV0KGFubm8sIGVsZW1lbnQpOwogCQkJfQogCQl9CisJCXJldHVybiBlbGVtZW50
OwogCX0KIH0KZGlmZiAtLWdpdCBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FwdC9tb2RlbC9GYWN0b3J5LmphdmEgc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9hcHQvbW9kZWwvRmFjdG9yeS5qYXZhCmluZGV4IDJiZmQxMjIuLjM1MDY1ZDEgMTAwNjQ0
Ci0tLSBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9GYWN0
b3J5LmphdmEKKysrIHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21v
ZGVsL0ZhY3RvcnkuamF2YQpAQCAtNDEsNCArNDEsNSBAQAogaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5jb3JlLmNvbXBpbGVyLkNoYXJPcGVyYXRpb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0Lmlu
dGVybmFsLmNvbXBpbGVyLmFwdC5kaXNwYXRjaC5CYXNlUHJvY2Vzc2luZ0VudkltcGw7CitpbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5Bbm5vdGF0aW9uLlR5cGVV
c2VCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5jbGFz
c2ZtdC5DbGFzc0ZpbGVDb25zdGFudHM7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFs
LmNvbXBpbGVyLmxvb2t1cC5Bbm5vdGF0aW9uQmluZGluZzsKQEAgLTQ2NSw0ICs0NjYsNiBAQAog
CQljYXNlIEJpbmRpbmcuVFlQRV9QQVJBTUVURVI6CiAJCQlyZXR1cm4gbmV3IFR5cGVWYXJpYWJs
ZUltcGwoX2VudiwgKFR5cGVWYXJpYWJsZUJpbmRpbmcpIGJpbmRpbmcpOworCQljYXNlIEJpbmRp
bmcuVFlQRV9VU0U6CisJCQlyZXR1cm4gbmV3IFJlZmVyZW5jZVR5cGVJbXBsKF9lbnYsIChUeXBl
VXNlQmluZGluZykgYmluZGluZyk7CiAJCX0KIAkJcmV0dXJuIG51bGw7CmRpZmYgLS1naXQgc3Jj
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQvbW9kZWwvUmVmZXJlbmNlVHlw
ZUltcGwuamF2YSBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2Rl
bC9SZWZlcmVuY2VUeXBlSW1wbC5qYXZhCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAw
MDAuLjc5N2JjMGYKLS0tIC9kZXYvbnVsbAorKysgc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hcHQvbW9kZWwvUmVmZXJlbmNlVHlwZUltcGwuamF2YQpAQCAtMCwwICsxLDI3
IEBACitwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hcHQubW9kZWw7
CisKK2ltcG9ydCBqYXZheC5sYW5nLm1vZGVsLnR5cGUuUmVmZXJlbmNlVHlwZTsKKworaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hcHQuZGlzcGF0Y2guQmFzZVByb2Nl
c3NpbmdFbnZJbXBsOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5h
c3QuQW5ub3RhdGlvbi5UeXBlVXNlQmluZGluZzsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50
ZXJuYWwuY29tcGlsZXIubG9va3VwLkJpbmRpbmc7CisKK3B1YmxpYyBjbGFzcyBSZWZlcmVuY2VU
eXBlSW1wbCBleHRlbmRzIFR5cGVNaXJyb3JJbXBsIGltcGxlbWVudHMgUmVmZXJlbmNlVHlwZSB7
CisKKwlSZWZlcmVuY2VUeXBlSW1wbChCYXNlUHJvY2Vzc2luZ0VudkltcGwgZW52LCBUeXBlVXNl
QmluZGluZyBiaW5kaW5nKSB7CisJCXN1cGVyKGVudiwgYmluZGluZyk7CisJfQorCisJCisJLyog
cGFja2FnZSAqLyBCaW5kaW5nIGJpbmRpbmcoKSB7CisJCQlyZXR1cm4gKChUeXBlVXNlQmluZGlu
ZykgX2JpbmRpbmcpLnR5cGU7CisJfQorCQorCS8qIChub24tSmF2YWRvYykKKwkgKiBAc2VlIGph
dmEubGFuZy5PYmplY3QjdG9TdHJpbmcoKQorCSAqLworCUBPdmVycmlkZQorCXB1YmxpYyBTdHJp
bmcgdG9TdHJpbmcoKSB7CisJCXJldHVybiBuZXcgU3RyaW5nKCgoVHlwZVVzZUJpbmRpbmcpIF9i
aW5kaW5nKS50eXBlLnJlYWRhYmxlTmFtZSgpKTsKKwl9Cit9CmRpZmYgLS1naXQgc3JjL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQvbW9kZWwvVHlwZUVsZW1lbnRJbXBsLmph
dmEgc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQvbW9kZWwvVHlwZUVs
ZW1lbnRJbXBsLmphdmEKaW5kZXggNWQ1ZTk2Ni4uNjE2NzQzYSAxMDA2NDQKLS0tIHNyYy9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL1R5cGVFbGVtZW50SW1wbC5q
YXZhCisrKyBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9U
eXBlRWxlbWVudEltcGwuamF2YQpAQCAtMzMsNCArMzMsNSBAQAogaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5jb3JlLmNvbXBpbGVyLkNoYXJPcGVyYXRpb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmludGVybmFsLmNvbXBpbGVyLmFwdC5kaXNwYXRjaC5CYXNlUHJvY2Vzc2luZ0VudkltcGw7Citp
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5Bbm5vdGF0aW9uLlR5
cGVVc2VCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5j
bGFzc2ZtdC5DbGFzc0ZpbGVDb25zdGFudHM7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVy
bmFsLmNvbXBpbGVyLmxvb2t1cC5Bbm5vdGF0aW9uQmluZGluZzsKQEAgLTQ0LDQgKzQ1LDYgQEAK
IAkKIAlwcml2YXRlIGZpbmFsIEVsZW1lbnRLaW5kIF9raW5kSGludDsKKwkKKwlwdWJsaWMgVHlw
ZVVzZUJpbmRpbmcgc3VwZXJDbGFzcyA9IG51bGw7CiAJCiAJLyoqCkBAIC0yMTQsNiArMjE3LDEx
IEBACiAJQE92ZXJyaWRlCiAJcHVibGljIFR5cGVNaXJyb3IgZ2V0U3VwZXJjbGFzcygpIHsKKwkJ
UmVmZXJlbmNlQmluZGluZyBzdXBlckJpbmRpbmcgPSBudWxsOwogCQlSZWZlcmVuY2VCaW5kaW5n
IGJpbmRpbmcgPSAoUmVmZXJlbmNlQmluZGluZylfYmluZGluZzsKLQkJUmVmZXJlbmNlQmluZGlu
ZyBzdXBlckJpbmRpbmcgPSBiaW5kaW5nLnN1cGVyY2xhc3MoKTsKKwkJaWYgKHN1cGVyQ2xhc3Mg
PT0gbnVsbCkgeworCQkJc3VwZXJCaW5kaW5nID0gYmluZGluZy5zdXBlcmNsYXNzKCk7CisJCX0g
ZWxzZSB7CisJCQlzdXBlckJpbmRpbmcgPSB0aGlzLnN1cGVyQ2xhc3M7CisJCX0KIAkJaWYgKG51
bGwgPT0gc3VwZXJCaW5kaW5nIHx8IGJpbmRpbmcuaXNJbnRlcmZhY2UoKSkgewogCQkJcmV0dXJu
IF9lbnYuZ2V0RmFjdG9yeSgpLmdldE5vVHlwZShUeXBlS2luZC5OT05FKTsKI1Agb3JnLmVjbGlw
c2UuamR0LmNvcmUKZGlmZiAtLWdpdCBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvYXN0L0Fubm90YXRpb24uamF2YSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYXN0L0Fubm90YXRpb24uamF2YQppbmRleCAwOTdkOTY2Li4yZjUxNzE3
IDEwMDY0NAotLS0gY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fz
dC9Bbm5vdGF0aW9uLmphdmEKKysrIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hc3QvQW5ub3RhdGlvbi5qYXZhCkBAIC0zNCw0ICszNCw1IEBACiBpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmltcGwuSXJyaXRhbnRTZXQ7CiBpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC4qOworaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci51dGlsLlNpbXBsZUxvb2t1cFRhYmxlOwogCiAv
KioKQEAgLTUyMSw3ICs1MjIsMTIgQEAKIAlwdWJsaWMgc3RhdGljIGNsYXNzIFR5cGVVc2VCaW5k
aW5nIGV4dGVuZHMgUmVmZXJlbmNlQmluZGluZyB7CiAJCXByaXZhdGUgaW50IGtpbmQ7Ci0JCXB1
YmxpYyBUeXBlVXNlQmluZGluZyhpbnQga2luZCkgeworCQlwdWJsaWMgVHlwZUJpbmRpbmcgdHlw
ZTsKKwkJcHJpdmF0ZSBTY29wZSBzY29wZTsKKwkJcHJpdmF0ZSBTaW1wbGVMb29rdXBUYWJsZSBz
dG9yZWRBbm5vdGF0aW9ucyA9IG51bGw7IAorCQlwdWJsaWMgVHlwZVVzZUJpbmRpbmcoaW50IGtp
bmQsIFR5cGVCaW5kaW5nIHR5cGUsIFNjb3BlIHNjb3BlKSB7CiAJCQl0aGlzLnRhZ0JpdHMgPSAw
TDsKIAkJCXRoaXMua2luZCA9IGtpbmQ7CisJCQl0aGlzLnR5cGUgPSB0eXBlOworCQkJdGhpcy5z
Y29wZSA9IHNjb3BlOwogCQl9CiAJCXB1YmxpYyBpbnQga2luZCgpIHsKQEAgLTUzMSw0ICs1Mzcs
MTMgQEAKIAkJCXJldHVybiBmYWxzZTsKIAkJfQorCQlwcm90ZWN0ZWQgU2ltcGxlTG9va3VwVGFi
bGUgc3RvcmVkQW5ub3RhdGlvbnMoYm9vbGVhbiBmb3JjZUluaXRpYWxpemUpIHsKKwkJCWlmIChm
b3JjZUluaXRpYWxpemUgJiYgdGhpcy5zdG9yZWRBbm5vdGF0aW9ucyA9PSBudWxsICYmIHRoaXMu
c2NvcGUgIT0gbnVsbCkgeworCQkJCXRoaXMuc2NvcGUucmVmZXJlbmNlQ29tcGlsYXRpb25Vbml0
KCkuY29tcGlsYXRpb25SZXN1bHQuaGFzQW5ub3RhdGlvbnMgPSB0cnVlOworCQkJCWlmICghdGhp
cy5zY29wZS5lbnZpcm9ubWVudCgpLmdsb2JhbE9wdGlvbnMuc3RvcmVBbm5vdGF0aW9ucykKKwkJ
CQkJcmV0dXJuIG51bGw7CisJCQkJdGhpcy5zdG9yZWRBbm5vdGF0aW9ucyA9IG5ldyBTaW1wbGVM
b29rdXBUYWJsZSgzKTsKKwkJCX0KKwkJCXJldHVybiB0aGlzLnN0b3JlZEFubm90YXRpb25zOwor
CQl9CiAJfQogCmRpZmYgLS1naXQgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FzdC9BcnJheUFsbG9jYXRpb25FeHByZXNzaW9uLmphdmEgY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BcnJheUFsbG9jYXRpb25FeHByZXNzaW9u
LmphdmEKaW5kZXggNDE4YmUxNS4uZmVhY2QzMSAxMDA2NDQKLS0tIGNvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQXJyYXlBbGxvY2F0aW9uRXhwcmVzc2lvbi5q
YXZhCisrKyBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Fy
cmF5QWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YQpAQCAtMTgzLDUgKzE4Myw1IEBACiAJCQlmb3Ig
KGludCBpID0gMCwgbWF4ID0gdGhpcy5hbm5vdGF0aW9uc09uRGltZW5zaW9ucy5sZW5ndGg7IGkg
PCBtYXg7IGkrKykgewogCQkJCUFubm90YXRpb25bXSBhbm5vdGF0aW9ucyA9IHRoaXMuYW5ub3Rh
dGlvbnNPbkRpbWVuc2lvbnNbaV07Ci0JCQkJcmVzb2x2ZUFubm90YXRpb25zKHNjb3BlLCBhbm5v
dGF0aW9ucywgbmV3IEFubm90YXRpb24uVHlwZVVzZUJpbmRpbmcoQmluZGluZy5UWVBFX1VTRSkp
OworCQkJCXJlc29sdmVBbm5vdGF0aW9ucyhzY29wZSwgYW5ub3RhdGlvbnMsIG5ldyBBbm5vdGF0
aW9uLlR5cGVVc2VCaW5kaW5nKEJpbmRpbmcuVFlQRV9VU0UsIHRoaXMucmVzb2x2ZWRUeXBlLCBu
dWxsKSk7CiAJCQl9CiAJCX0KZGlmZiAtLWdpdCBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYXN0L1R5cGVQYXJhbWV0ZXIuamF2YSBjb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1R5cGVQYXJhbWV0ZXIuamF2YQppbmRleCA3MTIy
ZmI2Li5iOWQ1MGZkIDEwMDY0NAotLS0gY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FzdC9UeXBlUGFyYW1ldGVyLmphdmEKKysrIGNvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvVHlwZVBhcmFtZXRlci5qYXZhCkBAIC0xMTgsNSAr
MTE4LDUgQEAKIAkJQmxvY2tTY29wZSByZXNvbHV0aW9uU2NvcGUgPSBTY29wZS50eXBlQW5ub3Rh
dGlvbnNSZXNvbHV0aW9uU2NvcGUoc2NvcGUpOwogCQlpZiAocmVzb2x1dGlvblNjb3BlICE9IG51
bGwpIHsKLQkJCXJlc29sdmVBbm5vdGF0aW9ucyhyZXNvbHV0aW9uU2NvcGUsIHRoaXMuYW5ub3Rh
dGlvbnMsIG5ldyBBbm5vdGF0aW9uLlR5cGVVc2VCaW5kaW5nKEJpbmRpbmcuVFlQRV9QQVJBTUVU
RVIpKTsKKwkJCXJlc29sdmVBbm5vdGF0aW9ucyhyZXNvbHV0aW9uU2NvcGUsIHRoaXMuYW5ub3Rh
dGlvbnMsIG5ldyBBbm5vdGF0aW9uLlR5cGVVc2VCaW5kaW5nKEJpbmRpbmcuVFlQRV9QQVJBTUVU
RVIsIHRoaXMuYmluZGluZywgc2NvcGUpKTsKIAkJCWlmICh0aGlzLmJpbmRpbmcgIT0gbnVsbCAm
JiB0aGlzLmJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkKIAkJCQl0aGlzLmJpbmRpbmcuZXZhbHVh
dGVOdWxsQW5ub3RhdGlvbnModGhpcy5hbm5vdGF0aW9ucyk7CmRpZmYgLS1naXQgY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9UeXBlUmVmZXJlbmNlLmphdmEg
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9UeXBlUmVmZXJl
bmNlLmphdmEKaW5kZXggM2Y3MDg2OS4uODg2NTg1ZiAxMDA2NDQKLS0tIGNvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvVHlwZVJlZmVyZW5jZS5qYXZhCisrKyBj
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1R5cGVSZWZlcmVu
Y2UuamF2YQpAQCAtNTY1LDUgKzU2NSw1IEBACiAJCQkJCUFubm90YXRpb25bXSBjdXJyZW50QW5u
b3RhdGlvbnMgPSB0aGlzLmFubm90YXRpb25zW2ldOwogCQkJCQlpZiAoY3VycmVudEFubm90YXRp
b25zICE9IG51bGwpIHsKLQkJCQkJCXJlc29sdmVBbm5vdGF0aW9ucyhyZXNvbHV0aW9uU2NvcGUs
IGN1cnJlbnRBbm5vdGF0aW9ucywgbmV3IEFubm90YXRpb24uVHlwZVVzZUJpbmRpbmcoaXNXaWxk
Y2FyZCgpID8gQmluZGluZy5UWVBFX1BBUkFNRVRFUiA6IEJpbmRpbmcuVFlQRV9VU0UpKTsKKwkJ
CQkJCXJlc29sdmVBbm5vdGF0aW9ucyhyZXNvbHV0aW9uU2NvcGUsIGN1cnJlbnRBbm5vdGF0aW9u
cywgbmV3IEFubm90YXRpb24uVHlwZVVzZUJpbmRpbmcoaXNXaWxkY2FyZCgpID8gQmluZGluZy5U
WVBFX1BBUkFNRVRFUiA6IEJpbmRpbmcuVFlQRV9VU0UsIHRoaXMucmVzb2x2ZWRUeXBlLCBzY29w
ZSkpOwogCQkJCQkJaWYgKGV2YWxOdWxsQW5ub3RhdGlvbnMpIHsKIAkJCQkJCQlpbnQgbGVuID0g
Y3VycmVudEFubm90YXRpb25zLmxlbmd0aDsKQEAgLTU5MCw1ICs1OTAsNSBAQAogCQkJCQlBbm5v
dGF0aW9uIFtdIGRpbWVuc2lvbkFubm90YXRpb25zID0gYW5ub3RhdGlvbnNPbkRpbWVuc2lvbnNb
aV07CiAJCQkJCWlmIChkaW1lbnNpb25Bbm5vdGF0aW9ucyAgIT0gbnVsbCkgewotCQkJCQkJcmVz
b2x2ZUFubm90YXRpb25zKHJlc29sdXRpb25TY29wZSwgZGltZW5zaW9uQW5ub3RhdGlvbnMsIG5l
dyBBbm5vdGF0aW9uLlR5cGVVc2VCaW5kaW5nKEJpbmRpbmcuVFlQRV9VU0UpKTsKKwkJCQkJCXJl
c29sdmVBbm5vdGF0aW9ucyhyZXNvbHV0aW9uU2NvcGUsIGRpbWVuc2lvbkFubm90YXRpb25zLCBu
ZXcgQW5ub3RhdGlvbi5UeXBlVXNlQmluZGluZyhCaW5kaW5nLlRZUEVfVVNFLCB0aGlzLnJlc29s
dmVkVHlwZSwgc2NvcGUpKTsKIAkJCQkJCWlmIChldmFsTnVsbEFubm90YXRpb25zICYmIGlzQXJy
YXlSZWZlcmVuY2UpIHsKIAkJCQkJCQlpbnQgbGVuID0gZGltZW5zaW9uQW5ub3RhdGlvbnMubGVu
Z3RoOwpkaWZmIC0tZ2l0IGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9sb29rdXAvQmluYXJ5VHlwZUJpbmRpbmcuamF2YSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0JpbmFyeVR5cGVCaW5kaW5nLmphdmEKaW5kZXggOWNj
NDc4ZS4uNzY0ODRjYyAxMDA2NDQKLS0tIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9sb29rdXAvQmluYXJ5VHlwZUJpbmRpbmcuamF2YQorKysgY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9CaW5hcnlUeXBlQmluZGluZy5q
YXZhCkBAIC0xMTk3LDUgKzExOTcsNSBAQAogCXJldHVybiBBbm5vdGF0aW9uQmluZGluZy5hZGRT
dGFuZGFyZEFubm90YXRpb25zKHN1cGVyLnJldHJpZXZlQW5ub3RhdGlvbnMoYmluZGluZyksIGJp
bmRpbmcuZ2V0QW5ub3RhdGlvblRhZ0JpdHMoKSwgdGhpcy5lbnZpcm9ubWVudCk7CiB9Ci1TaW1w
bGVMb29rdXBUYWJsZSBzdG9yZWRBbm5vdGF0aW9ucyhib29sZWFuIGZvcmNlSW5pdGlhbGl6ZSkg
eworcHJvdGVjdGVkIFNpbXBsZUxvb2t1cFRhYmxlIHN0b3JlZEFubm90YXRpb25zKGJvb2xlYW4g
Zm9yY2VJbml0aWFsaXplKSB7CiAJaWYgKGZvcmNlSW5pdGlhbGl6ZSAmJiB0aGlzLnN0b3JlZEFu
bm90YXRpb25zID09IG51bGwpIHsKIAkJaWYgKCF0aGlzLmVudmlyb25tZW50Lmdsb2JhbE9wdGlv
bnMuc3RvcmVBbm5vdGF0aW9ucykKZGlmZiAtLWdpdCBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1JlZmVyZW5jZUJpbmRpbmcuamF2YSBjb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1JlZmVyZW5jZUJpbmRpbmcu
amF2YQppbmRleCA4MTcxZGZjLi4xN2QxNjc3IDEwMDY0NAotLS0gY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9SZWZlcmVuY2VCaW5kaW5nLmphdmEKKysr
IGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUmVmZXJl
bmNlQmluZGluZy5qYXZhCkBAIC0xNTc0LDUgKzE1NzQsNSBAQAogfQogCi1TaW1wbGVMb29rdXBU
YWJsZSBzdG9yZWRBbm5vdGF0aW9ucyhib29sZWFuIGZvcmNlSW5pdGlhbGl6ZSkgeworcHJvdGVj
dGVkIFNpbXBsZUxvb2t1cFRhYmxlIHN0b3JlZEFubm90YXRpb25zKGJvb2xlYW4gZm9yY2VJbml0
aWFsaXplKSB7CiAJcmV0dXJuIG51bGw7IC8vIG92ZXJycmlkZSBpZiBpbnRlcmVzdGVkIGluIHN0
b3JpbmcgYW5ub3RhdGlvbnMgZm9yIHRoZSByZWNlaXZlciwgaXRzIGZpZWxkcyBhbmQgbWV0aG9k
cwogfQpkaWZmIC0tZ2l0IGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9sb29rdXAvU291cmNlVHlwZUJpbmRpbmcuamF2YSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1NvdXJjZVR5cGVCaW5kaW5nLmphdmEKaW5kZXggODkw
NDYyOS4uMTVhMTlkMSAxMDA2NDQKLS0tIGNvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9sb29rdXAvU291cmNlVHlwZUJpbmRpbmcuamF2YQorKysgY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Tb3VyY2VUeXBlQmluZGluZy5q
YXZhCkBAIC0xODkzLDUgKzE4OTMsNSBAQAogCXJldHVybiB0aGlzLnNjb3BlLnJlZmVyZW5jZUNv
bnRleHQuc291cmNlU3RhcnQ7CiB9Ci1TaW1wbGVMb29rdXBUYWJsZSBzdG9yZWRBbm5vdGF0aW9u
cyhib29sZWFuIGZvcmNlSW5pdGlhbGl6ZSkgeworcHJvdGVjdGVkIFNpbXBsZUxvb2t1cFRhYmxl
IHN0b3JlZEFubm90YXRpb25zKGJvb2xlYW4gZm9yY2VJbml0aWFsaXplKSB7CiAJaWYgKGZvcmNl
SW5pdGlhbGl6ZSAmJiB0aGlzLnN0b3JlZEFubm90YXRpb25zID09IG51bGwgJiYgdGhpcy5zY29w
ZSAhPSBudWxsKSB7IC8vIHNjb3BlIG51bGwgd2hlbiBubyBhbm5vdGF0aW9uIGNhY2hlZCwgYW5k
IHR5cGUgZ290IHByb2Nlc3NlZCBmdWxseSAoMTU5NjMxKQogCQl0aGlzLnNjb3BlLnJlZmVyZW5j
ZUNvbXBpbGF0aW9uVW5pdCgpLmNvbXBpbGF0aW9uUmVzdWx0Lmhhc0Fubm90YXRpb25zID0gdHJ1
ZTs=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>236059</attachid>
            <date>2013-10-03 02:02:00 -0400</date>
            <delta_ts>2013-10-04 05:05:09 -0400</delta_ts>
            <desc>Combined fix for this and bug 414627</desc>
            <filename>Fix-for-bug-413613.patch</filename>
            <type>text/plain</type>
            <size>72928</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMAojUCBvcmcuZWNsaXBzZS5qZHQuY29tcGls
ZXIuYXB0LnRlc3RzCmRpZmYgLS1naXQgLmNsYXNzcGF0aCAuY2xhc3NwYXRoCmluZGV4IDYxOTA4
MmMuLjg4ZGFkNTMgMTAwNjQ0Ci0tLSAuY2xhc3NwYXRoCisrKyAuY2xhc3NwYXRoCkBAIC00LDUg
KzQsNSBAQAogCTxjbGFzc3BhdGhlbnRyeSBraW5kPSJzcmMiIG91dHB1dD0iYmlucHJvY2Vzc29y
cyIgcGF0aD0icHJvY2Vzc29ycyIvPgogCTxjbGFzc3BhdGhlbnRyeSBraW5kPSJjb24iIHBhdGg9
Im9yZy5lY2xpcHNlLnBkZS5jb3JlLnJlcXVpcmVkUGx1Z2lucyIvPgotCTxjbGFzc3BhdGhlbnRy
eSBraW5kPSJjb24iIHBhdGg9Im9yZy5lY2xpcHNlLmpkdC5sYXVuY2hpbmcuSlJFX0NPTlRBSU5F
Ui9vcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuZGVidWcudWkubGF1bmNoZXIuU3RhbmRhcmRWTVR5
cGUvSmF2YVNFLTEuNiIvPgorCTxjbGFzc3BhdGhlbnRyeSBraW5kPSJjb24iIHBhdGg9Im9yZy5l
Y2xpcHNlLmpkdC5sYXVuY2hpbmcuSlJFX0NPTlRBSU5FUi9vcmcuZWNsaXBzZS5qZHQuaW50ZXJu
YWwuZGVidWcudWkubGF1bmNoZXIuU3RhbmRhcmRWTVR5cGUvSmF2YVNFLTEuOCIvPgogCTxjbGFz
c3BhdGhlbnRyeSBraW5kPSJvdXRwdXQiIHBhdGg9ImJpbiIvPgogPC9jbGFzc3BhdGg+CmRpZmYg
LS1naXQgbGliL2FwdHRlc3Rwcm9jZXNzb3JzLmphciBsaWIvYXB0dGVzdHByb2Nlc3NvcnMuamFy
CmluZGV4IGVkOWJiY2YuLmIxZjgxYWMgMTAwNjQ0Ci0tLSBsaWIvYXB0dGVzdHByb2Nlc3NvcnMu
amFyCisrKyBsaWIvYXB0dGVzdHByb2Nlc3NvcnMuamFyCkJpbmFyeSBmaWxlcyBkaWZmZXIKZGlm
ZiAtLWdpdCBwcm9jZXNzb3JzL01FVEEtSU5GL3NlcnZpY2VzL2phdmF4LmFubm90YXRpb24ucHJv
Y2Vzc2luZy5Qcm9jZXNzb3IgcHJvY2Vzc29ycy9NRVRBLUlORi9zZXJ2aWNlcy9qYXZheC5hbm5v
dGF0aW9uLnByb2Nlc3NpbmcuUHJvY2Vzc29yCmluZGV4IDMyN2E4NjUuLmY3ZDAzMjAgMTAwNjQ0
Ci0tLSBwcm9jZXNzb3JzL01FVEEtSU5GL3NlcnZpY2VzL2phdmF4LmFubm90YXRpb24ucHJvY2Vz
c2luZy5Qcm9jZXNzb3IKKysrIHByb2Nlc3NvcnMvTUVUQS1JTkYvc2VydmljZXMvamF2YXguYW5u
b3RhdGlvbi5wcm9jZXNzaW5nLlByb2Nlc3NvcgpAQCAtMiw0ICsyLDUgQEAKIG9yZy5lY2xpcHNl
LmpkdC5jb21waWxlci5hcHQudGVzdHMucHJvY2Vzc29ycy5jaGVja2FyZ3MuQ2hlY2tBcmdzUHJv
Ywogb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLmFwdC50ZXN0cy5wcm9jZXNzb3JzLmVsZW1lbnRz
LkVsZW1lbnRQcm9jCitvcmcuZWNsaXBzZS5qZHQuY29tcGlsZXIuYXB0LnRlc3RzLnByb2Nlc3Nv
cnMuZWxlbWVudHMuSmF2YThFbGVtZW50UHJvY2Vzc29yCiBvcmcuZWNsaXBzZS5qZHQuY29tcGls
ZXIuYXB0LnRlc3RzLnByb2Nlc3NvcnMuZmlsZXIuRmlsZXJQcm9jCiBvcmcuZWNsaXBzZS5qZHQu
Y29tcGlsZXIuYXB0LnRlc3RzLnByb2Nlc3NvcnMubWVzc2FnZXIuTWVzc2FnZXJQcm9jCmRpZmYg
LS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29tcGlsZXIuYXB0LnRlc3RzL3Byb2Nlc3NvcnMvb3Jn
L2VjbGlwc2UvamR0L2NvbXBpbGVyL2FwdC90ZXN0cy9hbm5vdGF0aW9ucy9UeXBlJDEuamF2YSBi
L29yZy5lY2xpcHNlLmpkdC5jb21waWxlci5hcHQudGVzdHMvcHJvY2Vzc29ycy9vcmcvZWNsaXBz
ZS9qZHQvY29tcGlsZXIvYXB0L3Rlc3RzL2Fubm90YXRpb25zL1R5cGUkMS5qYXZhCm5ldyBmaWxl
IG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAuLjQ0YTc0M2IKLS0tIC9kZXYvbnVsbAorKysgYi9v
cmcuZWNsaXBzZS5qZHQuY29tcGlsZXIuYXB0LnRlc3RzL3Byb2Nlc3NvcnMvb3JnL2VjbGlwc2Uv
amR0L2NvbXBpbGVyL2FwdC90ZXN0cy9hbm5vdGF0aW9ucy9UeXBlJDEuamF2YQpAQCAtMCwwICsx
LDIyIEBACisvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgorICogQ29weXJpZ2h0IChjKSAyMDEzIElC
TSBDb3Jwb3JhdGlvbi4KKyAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQg
dGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKKyAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0
aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAorICogd2hpY2ggYWNj
b21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKKyAqIGh0dHA6
Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCisgKiAKKyAqIFRoaXMgaXMgYW4g
aW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQgc3BlY2lmaWNhdGlvbiBkZXZlbG9wZWQg
dW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0eSBQcm9jZXNzIChKQ1ApIGFuZCBpcyBtYWRlIGF2
YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiBwdXJwb3NlcworICogb25seS4gVGhl
IGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkgc3BlY2lmaWNhdGlvbiBvZiB0aGUgSkNQ
LgorICogCisgKiBDb250cmlidXRvcnM6CisgKiAgICAgSUJNIENvcnBvcmF0aW9uIC0gaW5pdGlh
bCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCisgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KK3BhY2th
Z2Ugb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLmFwdC50ZXN0cy5hbm5vdGF0aW9uczsKKworaW1w
b3J0IGphdmEubGFuZy5hbm5vdGF0aW9uLkVsZW1lbnRUeXBlOworaW1wb3J0IGphdmEubGFuZy5h
bm5vdGF0aW9uLlRhcmdldDsKKworQFRhcmdldChFbGVtZW50VHlwZS5UWVBFX1VTRSkKK3B1Ymxp
YyBAaW50ZXJmYWNlIFR5cGUkMSB7Cit9CmRpZmYgLS1naXQgcHJvY2Vzc29ycy9vcmcvZWNsaXBz
ZS9qZHQvY29tcGlsZXIvYXB0L3Rlc3RzL2Fubm90YXRpb25zL1R5cGUuamF2YSBwcm9jZXNzb3Jz
L29yZy9lY2xpcHNlL2pkdC9jb21waWxlci9hcHQvdGVzdHMvYW5ub3RhdGlvbnMvVHlwZS5qYXZh
Cm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAuLjhlNDAzODEKLS0tIC9kZXYvbnVs
bAorKysgcHJvY2Vzc29ycy9vcmcvZWNsaXBzZS9qZHQvY29tcGlsZXIvYXB0L3Rlc3RzL2Fubm90
YXRpb25zL1R5cGUuamF2YQpAQCAtMCwwICsxLDI2IEBACisvKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KgorICogQ29weXJpZ2h0IChjKSAyMDEzIElCTSBDb3Jwb3JhdGlvbi4KKyAqIEFsbCByaWdodHMg
cmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKKyAq
IGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGlj
IExpY2Vuc2UgdjEuMAorICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFu
ZCBpcyBhdmFpbGFibGUgYXQKKyAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYx
MC5odG1sCisgKiAKKyAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJh
ZnQgc3BlY2lmaWNhdGlvbiBkZXZlbG9wZWQgdW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0eSBQ
cm9jZXNzIChKQ1ApIGFuZCBpcyBtYWRlIGF2YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVh
dGlvbiBwdXJwb3NlcworICogb25seS4gVGhlIGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBh
bnkgc3BlY2lmaWNhdGlvbiBvZiB0aGUgSkNQLgorICogCisgKiBDb250cmlidXRvcnM6CisgKiAg
ICAgSUJNIENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCisgKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKi8KK3BhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLmFw
dC50ZXN0cy5hbm5vdGF0aW9uczsKKworaW1wb3J0IGphdmEubGFuZy5hbm5vdGF0aW9uLkVsZW1l
bnRUeXBlOworaW1wb3J0IGphdmEubGFuZy5hbm5vdGF0aW9uLlRhcmdldDsKKworQFRhcmdldChF
bGVtZW50VHlwZS5UWVBFX1VTRSkKK3B1YmxpYyBAaW50ZXJmYWNlIFR5cGUgeworCVN0cmluZyB2
YWx1ZSgpIGRlZmF1bHQgIiI7CisJQFRhcmdldChFbGVtZW50VHlwZS5UWVBFX1VTRSkKKwlAaW50
ZXJmYWNlIE9uZSB7CisJfQorfQpcIE5vIG5ld2xpbmUgYXQgZW5kIG9mIGZpbGUKZGlmZiAtLWdp
dCBwcm9jZXNzb3JzL29yZy9lY2xpcHNlL2pkdC9jb21waWxlci9hcHQvdGVzdHMvcHJvY2Vzc29y
cy9lbGVtZW50cy9KYXZhOEVsZW1lbnRQcm9jZXNzb3IuamF2YSBwcm9jZXNzb3JzL29yZy9lY2xp
cHNlL2pkdC9jb21waWxlci9hcHQvdGVzdHMvcHJvY2Vzc29ycy9lbGVtZW50cy9KYXZhOEVsZW1l
bnRQcm9jZXNzb3IuamF2YQpuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwLi5iN2Ex
NWM1Ci0tLSAvZGV2L251bGwKKysrIHByb2Nlc3NvcnMvb3JnL2VjbGlwc2UvamR0L2NvbXBpbGVy
L2FwdC90ZXN0cy9wcm9jZXNzb3JzL2VsZW1lbnRzL0phdmE4RWxlbWVudFByb2Nlc3Nvci5qYXZh
CkBAIC0wLDAgKzEsNTY1IEBACisvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgorICogQ29weXJpZ2h0
IChjKSAyMDEzIElCTSBDb3Jwb3JhdGlvbi4KKyAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMg
cHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKKyAqIGFyZSBtYWRlIGF2YWls
YWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAor
ICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUg
YXQKKyAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCisgKiAKKyAq
IFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQgc3BlY2lmaWNhdGlv
biBkZXZlbG9wZWQgdW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0eSBQcm9jZXNzIChKQ1ApIGFu
ZCBpcyBtYWRlIGF2YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiBwdXJwb3Nlcwor
ICogb25seS4gVGhlIGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkgc3BlY2lmaWNhdGlv
biBvZiB0aGUgSkNQLgorICogCisgKiBDb250cmlidXRvcnM6CisgKiAgICAgSUJNIENvcnBvcmF0
aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCisgKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKi8KKworcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuY29tcGlsZXIuYXB0LnRlc3RzLnByb2Nl
c3NvcnMuZWxlbWVudHM7CisKK2ltcG9ydCBqYXZhLmxhbmcuYW5ub3RhdGlvbi5Bbm5vdGF0aW9u
OworaW1wb3J0IGphdmEubGFuZy5yZWZsZWN0Lkludm9jYXRpb25UYXJnZXRFeGNlcHRpb247Citp
bXBvcnQgamF2YS5sYW5nLnJlZmxlY3QuTWV0aG9kOworaW1wb3J0IGphdmEudXRpbC5MaXN0Owor
aW1wb3J0IGphdmEudXRpbC5NYXA7CitpbXBvcnQgamF2YS51dGlsLlNldDsKKworaW1wb3J0IGph
dmF4LmFubm90YXRpb24ucHJvY2Vzc2luZy5Sb3VuZEVudmlyb25tZW50OworaW1wb3J0IGphdmF4
LmFubm90YXRpb24ucHJvY2Vzc2luZy5TdXBwb3J0ZWRBbm5vdGF0aW9uVHlwZXM7CitpbXBvcnQg
amF2YXguYW5ub3RhdGlvbi5wcm9jZXNzaW5nLlN1cHBvcnRlZFNvdXJjZVZlcnNpb247CitpbXBv
cnQgamF2YXgubGFuZy5tb2RlbC5Bbm5vdGF0ZWRDb25zdHJ1Y3Q7CitpbXBvcnQgamF2YXgubGFu
Zy5tb2RlbC5Tb3VyY2VWZXJzaW9uOworaW1wb3J0IGphdmF4LmxhbmcubW9kZWwuZWxlbWVudC5B
bm5vdGF0aW9uTWlycm9yOworaW1wb3J0IGphdmF4LmxhbmcubW9kZWwuZWxlbWVudC5Bbm5vdGF0
aW9uVmFsdWU7CitpbXBvcnQgamF2YXgubGFuZy5tb2RlbC5lbGVtZW50LkVsZW1lbnQ7CitpbXBv
cnQgamF2YXgubGFuZy5tb2RlbC5lbGVtZW50LkV4ZWN1dGFibGVFbGVtZW50OworaW1wb3J0IGph
dmF4LmxhbmcubW9kZWwuZWxlbWVudC5UeXBlRWxlbWVudDsKK2ltcG9ydCBqYXZheC5sYW5nLm1v
ZGVsLmVsZW1lbnQuVHlwZVBhcmFtZXRlckVsZW1lbnQ7CitpbXBvcnQgamF2YXgubGFuZy5tb2Rl
bC5lbGVtZW50LlZhcmlhYmxlRWxlbWVudDsKK2ltcG9ydCBqYXZheC5sYW5nLm1vZGVsLnR5cGUu
QXJyYXlUeXBlOworaW1wb3J0IGphdmF4LmxhbmcubW9kZWwudHlwZS5EZWNsYXJlZFR5cGU7Citp
bXBvcnQgamF2YXgubGFuZy5tb2RlbC50eXBlLlR5cGVLaW5kOworaW1wb3J0IGphdmF4Lmxhbmcu
bW9kZWwudHlwZS5UeXBlTWlycm9yOworaW1wb3J0IGphdmF4LmxhbmcubW9kZWwudXRpbC5FbGVt
ZW50RmlsdGVyOworCitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLmFwdC50ZXN0cy5h
bm5vdGF0aW9ucy5UeXBlOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb21waWxlci5hcHQudGVz
dHMuYW5ub3RhdGlvbnMuVHlwZSQxOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb21waWxlci5h
cHQudGVzdHMucHJvY2Vzc29ycy5iYXNlLkJhc2VQcm9jZXNzb3I7CisKKy8qKgorICogQSBwcm9j
ZXNzb3IgdGhhdCBleHBsb3JlcyB0aGUgamF2YSA4IHNwZWNpZmljIGVsZW1lbnRzIGFuZCB2YWxp
ZGF0ZXMgdGhlIGxhbWJkYSBhbmQgCisgKiB0eXBlIGFubm90YXRlZCBlbGVtZW50cy4gVG8gZW5h
YmxlIHRoaXMgcHJvY2Vzc29yLCBhZGQgCisgKiAtQW9yZy5lY2xpcHNlLmpkdC5jb21waWxlci5h
cHQudGVzdHMucHJvY2Vzc29ycy5lbGVtZW50cy5KYXZhOEVsZW1lbnRQcm9jZXNzb3IgdG8gdGhl
IGNvbW1hbmQgbGluZS4KKyAqIEBzaW5jZSAzLjkgQkVUQV9KQVZBOAorICovCitAU3VwcG9ydGVk
QW5ub3RhdGlvblR5cGVzKCJvcmcuZWNsaXBzZS5qZHQuY29tcGlsZXIuYXB0LnRlc3RzLmFubm90
YXRpb25zLlR5cGUiKQorQFN1cHBvcnRlZFNvdXJjZVZlcnNpb24oU291cmNlVmVyc2lvbi5SRUxF
QVNFXzgpCitwdWJsaWMgY2xhc3MgSmF2YThFbGVtZW50UHJvY2Vzc29yIGV4dGVuZHMgQmFzZVBy
b2Nlc3NvciB7CisJCisJLy8gQWx3YXlzIHJldHVybiBmYWxzZSBmcm9tIHRoaXMgcHJvY2Vzc29y
LCBiZWNhdXNlIGl0IHN1cHBvcnRzICIqIi4KKwkvLyBUaGUgcmV0dXJuIHZhbHVlIGRvZXMgbm90
IHNpZ25pZnkgc3VjY2VzcyBvciBmYWlsdXJlIQorCUBPdmVycmlkZQorCXB1YmxpYyBib29sZWFu
IHByb2Nlc3MoU2V0PD8gZXh0ZW5kcyBUeXBlRWxlbWVudD4gYW5ub3RhdGlvbnMsIFJvdW5kRW52
aXJvbm1lbnQgcm91bmRFbnYpIHsKKwkJaWYgKHJvdW5kRW52LnByb2Nlc3NpbmdPdmVyKCkpIHsK
KwkJCXJldHVybiBmYWxzZTsKKwkJfQorCisJCU1hcDxTdHJpbmcsIFN0cmluZz4gb3B0aW9ucyA9
IHByb2Nlc3NpbmdFbnYuZ2V0T3B0aW9ucygpOworCQlpZiAoIW9wdGlvbnMuY29udGFpbnNLZXko
dGhpcy5nZXRDbGFzcygpLmdldE5hbWUoKSkpIHsKKwkJCS8vIERpc2FibGUgdGhpcyBwcm9jZXNz
b3IgdW5sZXNzIHdlIGFyZSBpbnRlbnRpb25hbGx5IHBlcmZvcm1pbmcgdGhlIHRlc3QuCisJCQly
ZXR1cm4gZmFsc2U7CisJCX0gZWxzZSB7CisJCQl0cnkgeworCQkJCWlmICghaW52b2tlVGVzdE1l
dGhvZHMob3B0aW9ucykpIHsKKwkJCQkJdGVzdEFsbCgpOworCQkJCX0KKwkJCQlzdXBlci5yZXBv
cnRTdWNjZXNzKCk7CisJCQl9IGNhdGNoIChBc3NlcnRpb25GYWlsZWRFcnJvciBlKSB7CisJCQkJ
c3VwZXIucmVwb3J0RXJyb3IoZ2V0RXhjZXB0aW9uU3RhY2tUcmFjZShlKSk7CisJCQl9IGNhdGNo
IChUaHJvd2FibGUgZSkgeworCQkJCWUucHJpbnRTdGFja1RyYWNlKCk7CisJCQl9CisJCX0KKwkJ
cmV0dXJuIGZhbHNlOworCX0KKwlwdWJsaWMgYm9vbGVhbiBpbnZva2VUZXN0TWV0aG9kcyhNYXA8
U3RyaW5nLCBTdHJpbmc+IG9wdGlvbnMpIHRocm93cyBUaHJvd2FibGUgeworCQlNZXRob2QgdGVz
dE1ldGhvZCA9IG51bGw7CisJCVNldDxTdHJpbmc+IGtleXMgPSBvcHRpb25zLmtleVNldCgpOwor
CQlib29sZWFuIHRlc3RzRm91bmQgPSBmYWxzZTsKKwkJZm9yIChTdHJpbmcgb3B0aW9uIDoga2V5
cykgeworCQkJaWYgKG9wdGlvbi5zdGFydHNXaXRoKCJ0ZXN0IikpIHsKKwkJCQl0cnkgeworCQkJ
CQl0ZXN0TWV0aG9kID0gdGhpcy5nZXRDbGFzcygpLmdldERlY2xhcmVkTWV0aG9kKG9wdGlvbiwg
bmV3IENsYXNzWzBdKTsKKwkJCQkJaWYgKHRlc3RNZXRob2QgIT0gbnVsbCkgeworCQkJCQkJdGVz
dHNGb3VuZCA9IHRydWU7CisJCQkJCQl0ZXN0TWV0aG9kLmludm9rZSh0aGlzLCAgbmV3IE9iamVj
dFswXSk7CisJCQkJCX0KKwkJCQl9IGNhdGNoIChJbnZvY2F0aW9uVGFyZ2V0RXhjZXB0aW9uIGUp
IHsKKwkJCQkJdGhyb3cgZS5nZXRDYXVzZSgpOworCQkJCX0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7
CisJCQkJCXN1cGVyLnJlcG9ydEVycm9yKGdldEV4Y2VwdGlvblN0YWNrVHJhY2UoZSkpOworCQkJ
CX0KKwkJCX0KKwkJfQorCQlyZXR1cm4gdGVzdHNGb3VuZDsKKwl9CisJcHVibGljIHZvaWQgdGVz
dEFsbCgpIHRocm93cyBBc3NlcnRpb25GYWlsZWRFcnJvciB7CisJCXRlc3RTRThTcGVjaWZpY3Mo
KTsKKwkJdGVzdExhbWJkYVNwZWNpZmljcygpOworCQl0ZXN0VHlwZUFubm90YXRpb25zKCk7CisJ
CXRlc3RUeXBlQW5ub3RhdGlvbnMxKCk7CisJCXRlc3RUeXBlQW5ub3RhdGlvbnMyKCk7CisJCXRl
c3RUeXBlQW5ub3RhdGlvbnMzKCk7CisJCXRlc3RUeXBlQW5ub3RhdGlvbnM0KCk7CisJCXRlc3RU
eXBlQW5ub3RhdGlvbnM1KCk7CisJCXRlc3RUeXBlQW5ub3RhdGlvbnM2KCk7CisJCXRlc3RUeXBl
QW5ub3RhdGlvbnM3KCk7CisJCXRlc3RUeXBlQW5ub3RhdGlvbnM4KCk7CisJfQorCQorCXB1Ymxp
YyB2b2lkIHRlc3RMYW1iZGFTcGVjaWZpY3MoKSB7CisJCVR5cGVFbGVtZW50IGFubm90YXRlZFR5
cGUgPSBfZWxlbWVudFV0aWxzLmdldFR5cGVFbGVtZW50KCJ0YXJnZXRzLm1vZGVsOC5MYW1iZGFU
ZXN0Iik7CisJCWFzc2VydE5vdE51bGwoIkphdmE4RWxlbWVudFByb2Nlc3NvciNleGFtaW5lTGFt
YmRhU3BlY2lmaWNzOiBUeXBlIGVsZW1lbnQgZm9yIExhbWJkYVRlc3Qgc2hvdWxkIG5vdCBiZSBu
dWxsIiwgYW5ub3RhdGVkVHlwZSk7CisJCWFzc2VydEZhbHNlKCJKYXZhOEVsZW1lbnRQcm9jZXNz
b3IjZXhhbWluZUxhbWJkYVNwZWNpZmljczogVHlwZSBMYW1iZGFUZXN0IGlzIG5vdCBhIGZ1bmN0
aW9uYWwgaW50ZXJmYWNlIiwgX2VsZW1lbnRVdGlscy5pc0Z1bmN0aW9uYWxJbnRlcmZhY2UoYW5u
b3RhdGVkVHlwZSkpOworCQlMaXN0PD8gZXh0ZW5kcyBFbGVtZW50PiBtZW1iZXJzID0gX2VsZW1l
bnRVdGlscy5nZXRBbGxNZW1iZXJzKGFubm90YXRlZFR5cGUpOworCQlFeGVjdXRhYmxlRWxlbWVu
dCBtZXRob2QgPSBudWxsOworCQlmb3IgKEV4ZWN1dGFibGVFbGVtZW50IG1lbWJlciA6IEVsZW1l
bnRGaWx0ZXIubWV0aG9kc0luKG1lbWJlcnMpKSB7CisJCQlpZiAoImZvbyIuZXF1YWxzKG1lbWJl
ci5nZXRTaW1wbGVOYW1lKCkudG9TdHJpbmcoKSkpIHsKKwkJCQltZXRob2QgPSBtZW1iZXI7CisJ
CQkJYnJlYWs7CisJCQl9CisJCX0KKwkJYXNzZXJ0Tm90TnVsbCgiSmF2YThFbGVtZW50UHJvY2Vz
c29yI2V4YW1pbmVMYW1iZGFTcGVjaWZpY3M6IEVsZW1lbnQgZm9yIG1ldGhvZCBmb28gc2hvdWxk
IG5vdCBiZSBudWxsIiwgbWV0aG9kKTsKKwkJYXNzZXJ0RmFsc2UoIkphdmE4RWxlbWVudFByb2Nl
c3NvciNleGFtaW5lTGFtYmRhU3BlY2lmaWNzOiBNZXRob2QgZm9vIGlzIG5vdCBhIGRlZmF1bHQg
bWV0aG9kIiwgbWV0aG9kLmlzRGVmYXVsdCgpKTsKKworCQlhbm5vdGF0ZWRUeXBlID0gX2VsZW1l
bnRVdGlscy5nZXRUeXBlRWxlbWVudCgidGFyZ2V0cy5tb2RlbDguRGVmYXVsdEludGVyZmFjZSIp
OworCQlhc3NlcnROb3ROdWxsKCJKYXZhOEVsZW1lbnRQcm9jZXNzb3IjZXhhbWluZUxhbWJkYVNw
ZWNpZmljczogVHlwZSBlbGVtZW50IGZvciBEZWZhdWx0SW50ZXJmYWNlIHNob3VsZCBub3QgYmUg
bnVsbCIsIGFubm90YXRlZFR5cGUpOworCQlhc3NlcnRGYWxzZSgiSmF2YThFbGVtZW50UHJvY2Vz
c29yI2V4YW1pbmVMYW1iZGFTcGVjaWZpY3M6IFR5cGUgRGVmYXVsdEludGVyZmFjZSBpcyBub3Qg
YSBmdW5jdGlvbmFsIGludGVyZmFjZSIsIF9lbGVtZW50VXRpbHMuaXNGdW5jdGlvbmFsSW50ZXJm
YWNlKGFubm90YXRlZFR5cGUpKTsKKworCQltZXRob2QgPSBudWxsOworCQltZW1iZXJzID0gX2Vs
ZW1lbnRVdGlscy5nZXRBbGxNZW1iZXJzKGFubm90YXRlZFR5cGUpOworCQlmb3IgKEV4ZWN1dGFi
bGVFbGVtZW50IG1lbWJlciA6IEVsZW1lbnRGaWx0ZXIubWV0aG9kc0luKG1lbWJlcnMpKSB7CisJ
CQlpZiAoImRlZmF1bHRNZXRob2QiLmVxdWFscyhtZW1iZXIuZ2V0U2ltcGxlTmFtZSgpLnRvU3Ry
aW5nKCkpKSB7CisJCQkJbWV0aG9kID0gbWVtYmVyOworCQkJCWJyZWFrOworCQkJfQorCQl9CisJ
CWFzc2VydE5vdE51bGwoIkphdmE4RWxlbWVudFByb2Nlc3NvciNleGFtaW5lTGFtYmRhU3BlY2lm
aWNzOiBFbGVtZW50IGZvciBtZXRob2QgZGVmYXVsdE1ldGhvZCgpIHNob3VsZCBub3QgYmUgbnVs
bCIsIG1ldGhvZCk7CisJCWFzc2VydFRydWUoIkphdmE4RWxlbWVudFByb2Nlc3NvciNleGFtaW5l
TGFtYmRhU3BlY2lmaWNzOiBNZXRob2QgZGVmYXVsdE1ldGhvZCgpIHNob3VsZCBiZSBhIGRlZmF1
bHQgbWV0aG9kIiwgbWV0aG9kLmlzRGVmYXVsdCgpKTsKKworCQltZXRob2QgPSBudWxsOworCQlm
b3IgKEV4ZWN1dGFibGVFbGVtZW50IG1lbWJlciA6IEVsZW1lbnRGaWx0ZXIubWV0aG9kc0luKG1l
bWJlcnMpKSB7CisJCQlpZiAoInN0YXRpY01ldGhvZCIuZXF1YWxzKG1lbWJlci5nZXRTaW1wbGVO
YW1lKCkudG9TdHJpbmcoKSkpIHsKKwkJCQltZXRob2QgPSBtZW1iZXI7CisJCQkJYnJlYWs7CisJ
CQl9CisJCX0KKwkJYXNzZXJ0Tm90TnVsbCgiSmF2YThFbGVtZW50UHJvY2Vzc29yI2V4YW1pbmVM
YW1iZGFTcGVjaWZpY3M6IEVsZW1lbnQgZm9yIG1ldGhvZCBzdGF0aWNNZXRob2QoKSBzaG91bGQg
bm90IGJlIG51bGwiLCBtZXRob2QpOworCQlhc3NlcnRGYWxzZSgiSmF2YThFbGVtZW50UHJvY2Vz
c29yI2V4YW1pbmVMYW1iZGFTcGVjaWZpY3M6IE1ldGhvZCBzdGF0aWNNZXRob2QoKSBzaG91bGUg
bm90IGJlIGEgZGVmYXVsdCBtZXRob2QiLCBtZXRob2QuaXNEZWZhdWx0KCkpOworCisJCWFubm90
YXRlZFR5cGUgPSBfZWxlbWVudFV0aWxzLmdldFR5cGVFbGVtZW50KCJ0YXJnZXRzLm1vZGVsOC5G
dW5jdGlvbmFsSW50ZXJmYWNlIik7CisJCWFzc2VydE5vdE51bGwoIkphdmE4RWxlbWVudFByb2Nl
c3NvciNleGFtaW5lTGFtYmRhU3BlY2lmaWNzOiBUeXBlIGVsZW1lbnQgZm9yIEZ1bmN0aW9uYWxJ
bnRlcmZhY2Ugc2hvdWxkIG5vdCBiZSBudWxsIiwgYW5ub3RhdGVkVHlwZSk7CisJCWFzc2VydFRy
dWUoIkphdmE4RWxlbWVudFByb2Nlc3NvciNleGFtaW5lTGFtYmRhU3BlY2lmaWNzOiBUeXBlIEZ1
bmN0aW9uYWxJbnRlcmZhY2Ugc2hvdWxkIGJlIGEgZnVuY3Rpb25hbCBpbnRlcmZhY2UiLCBfZWxl
bWVudFV0aWxzLmlzRnVuY3Rpb25hbEludGVyZmFjZShhbm5vdGF0ZWRUeXBlKSk7CisKKwkJbWV0
aG9kID0gbnVsbDsKKwkJbWVtYmVycyA9IF9lbGVtZW50VXRpbHMuZ2V0QWxsTWVtYmVycyhhbm5v
dGF0ZWRUeXBlKTsKKwkJZm9yIChFeGVjdXRhYmxlRWxlbWVudCBtZW1iZXIgOiBFbGVtZW50Rmls
dGVyLm1ldGhvZHNJbihtZW1iZXJzKSkgeworCQkJaWYgKCJhYnN0cmFjdE1ldGhvZCIuZXF1YWxz
KG1lbWJlci5nZXRTaW1wbGVOYW1lKCkudG9TdHJpbmcoKSkpIHsKKwkJCQltZXRob2QgPSBtZW1i
ZXI7CisJCQkJYnJlYWs7CisJCQl9CisJCX0KKwkJYXNzZXJ0Tm90TnVsbCgiSmF2YThFbGVtZW50
UHJvY2Vzc29yI2V4YW1pbmVMYW1iZGFTcGVjaWZpY3M6IEVsZW1lbnQgZm9yIG1ldGhvZCBhYnN0
cmFjdE1ldGhvZCgpIHNob3VsZCBub3QgYmUgbnVsbCIsIG1ldGhvZCk7CisJCWFzc2VydEZhbHNl
KCJKYXZhOEVsZW1lbnRQcm9jZXNzb3IjZXhhbWluZUxhbWJkYVNwZWNpZmljczogTWV0aG9kIGFi
c3RyYWN0TWV0aG9kKCkgc2hvdWxkIG5vdCBiZSBhIGRlZmF1bHQgbWV0aG9kIiwgbWV0aG9kLmlz
RGVmYXVsdCgpKTsKKwl9CisKKwlwdWJsaWMgdm9pZCB0ZXN0U0U4U3BlY2lmaWNzKCkgeworCQlU
eXBlRWxlbWVudCBhbm5vdGF0ZWRUeXBlID0gX2VsZW1lbnRVdGlscy5nZXRUeXBlRWxlbWVudCgi
dGFyZ2V0cy5tb2RlbDguWCIpOworCQlleGFtaW5lU0U4QW5ub3RhdGlvbk1ldGhvZHMoIkphdmE4
RWxlbWVudFByb2Nlc3NvciNleGFtaW5lU0U4U3BlY2lmaWNzOiAiLCBhbm5vdGF0ZWRUeXBlLCAi
YyIpOworCisJCUxpc3Q8PyBleHRlbmRzIEVsZW1lbnQ+IG1lbWJlcnMgPSBfZWxlbWVudFV0aWxz
LmdldEFsbE1lbWJlcnMoYW5ub3RhdGVkVHlwZSk7CisJCUV4ZWN1dGFibGVFbGVtZW50IG1ldGhv
ZCA9IG51bGw7CisJCVZhcmlhYmxlRWxlbWVudCBmaWVsZCA9IG51bGwsIGZpZWxkMSA9IG51bGw7
CisJCUV4ZWN1dGFibGVFbGVtZW50IG1ldGhvZDIgPSBudWxsOworCQlmb3IgKEVsZW1lbnQgbWVt
YmVyIDogbWVtYmVycykgeworCQkJaWYgKCJmb28iLmVxdWFscyhtZW1iZXIuZ2V0U2ltcGxlTmFt
ZSgpLnRvU3RyaW5nKCkpKSB7CisJCQkJbWV0aG9kID0gKEV4ZWN1dGFibGVFbGVtZW50KSBtZW1i
ZXI7CisJCQl9IGVsc2UgaWYgKCJfZmllbGQiLmVxdWFscyhtZW1iZXIuZ2V0U2ltcGxlTmFtZSgp
LnRvU3RyaW5nKCkpKSB7CisJCQkJZmllbGQgPSAoVmFyaWFibGVFbGVtZW50KSBtZW1iZXI7CisJ
CQl9IGVsc2UgaWYgKCJub0Fubm90YXRpb25IZXJlIi5lcXVhbHMobWVtYmVyLmdldFNpbXBsZU5h
bWUoKS50b1N0cmluZygpKSkgeworCQkJCW1ldGhvZDIgPSAoRXhlY3V0YWJsZUVsZW1lbnQpIG1l
bWJlcjsKKwkJCX0gZWxzZSBpZiAoIl9maWVsZDEiLmVxdWFscyhtZW1iZXIuZ2V0U2ltcGxlTmFt
ZSgpLnRvU3RyaW5nKCkpKSB7CisJCQkJZmllbGQxID0gKFZhcmlhYmxlRWxlbWVudCkgbWVtYmVy
OworCQkJfQorCQl9CisJCWFzc2VydE5vdE51bGwoIk1ldGhvZCBzaG91bGQgbm90IGJlIG51bGwi
LCBtZXRob2QpOworCQlUeXBlTWlycm9yIHR5cGVNaXJyb3IgPSBtZXRob2QuZ2V0UmV0dXJuVHlw
ZSgpOworCQlhc3NlcnROb3ROdWxsKCJKYXZhOEVsZW1lbnRQcm9jZXNzb3IjZXhhbWluZVNFOFNw
ZWNpZmljczogRWxlbWVudCBmb3IgbWV0aG9kIGZvbyBzaG91bGQgbm90IGJlIG51bGwiLCB0eXBl
TWlycm9yKTsKKwkJZXhhbWluZVNFOEFubm90YXRpb25NZXRob2RzKCJKYXZhOEVsZW1lbnRQcm9j
ZXNzb3IjZXhhbWluZVNFOFNwZWNpZmljczogIiwgdHlwZU1pcnJvciwgIm0iKTsKKwkJTGlzdDw/
IGV4dGVuZHMgQW5ub3RhdGlvbk1pcnJvcj4gbGlzdCA9IHR5cGVNaXJyb3IuZ2V0QW5ub3RhdGlv
bk1pcnJvcnMoKTsKKwkJYXNzZXJ0RXF1YWxzKCJKYXZhOEVsZW1lbnRQcm9jZXNzb3IjZXhhbWlu
ZVNFOFNwZWNpZmljczogSW5jb3JyZWN0IG5vIG9mIGFubm90YXRpb24gbWlycm9ycyIsIDEsIGxp
c3Quc2l6ZSgpKTsKKwkJYXNzZXJ0Tm90TnVsbCgiSmF2YThFbGVtZW50UHJvY2Vzc29yI2V4YW1p
bmVTRThTcGVjaWZpY3M6IEVsZW1lbnQgZm9yIGZpZWxkIF9maWVsZCBzaG91bGQgbm90IGJlIG51
bGwiLCBmaWVsZCk7CisJCXR5cGVNaXJyb3IgPSBmaWVsZC5hc1R5cGUoKTsgCisJCWV4YW1pbmVT
RThBbm5vdGF0aW9uTWV0aG9kcygiSmF2YThFbGVtZW50UHJvY2Vzc29yI2V4YW1pbmVTRThTcGVj
aWZpY3M6ICIsIHR5cGVNaXJyb3IsICJmIik7CisJCQorCQl0eXBlTWlycm9yID0gZmllbGQxLmFz
VHlwZSgpOworCQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZU1pcnJvciwgbmV3IFN0cmluZ1td
eyJAVHlwZSh2YWx1ZT1mMSkifSk7CisJCQorCQl0eXBlTWlycm9yID0gbWV0aG9kMi5nZXRSZXR1
cm5UeXBlKCk7CisJCWFzc2VydE5vdE51bGwoIkphdmE4RWxlbWVudFByb2Nlc3NvciNleGFtaW5l
U0U4U3BlY2lmaWNzOiBFbGVtZW50IGZvciBtZXRob2Qgbm9Bbm5vdGF0aW9uSGVyZSBzaG91bGQg
bm90IGJlIG51bGwiLCB0eXBlTWlycm9yKTsKKwkJVHlwZSBhbm5vdCA9IHR5cGVNaXJyb3IuZ2V0
QW5ub3RhdGlvbihUeXBlLmNsYXNzKTsKKwkJYXNzZXJ0TnVsbCgiQW5ub3RhdGlvbiBzaG91bGQg
bm90IGJlIHByZXNlbnQiLCBhbm5vdCk7CisJCUFubm90YXRpb25bXSBhbm5vdHMgPSB0eXBlTWly
cm9yLmdldEFubm90YXRpb25zQnlUeXBlKFR5cGUuY2xhc3MpOworCQlhc3NlcnRFcXVhbHMoIkFu
bm90YXRpb24gaXMgbm90IGVtcHR5IGxpc3QiLCAwLCBhbm5vdHMubGVuZ3RoKTsKKwl9CisJCisJ
cHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9ucygpIHsKKwkJVHlwZUVsZW1lbnQgYW5ub3Rh
dGVkVHlwZSA9IF9lbGVtZW50VXRpbHMuZ2V0VHlwZUVsZW1lbnQoInRhcmdldHMubW9kZWw4Llgi
KTsKKwkJVHlwZU1pcnJvciBzdXBlclR5cGUgPSBhbm5vdGF0ZWRUeXBlLmdldFN1cGVyY2xhc3Mo
KTsKKwkJYXNzZXJ0Tm90TnVsbCgiSmF2YThFbGVtZW50UHJvY2Vzc29yI2V4YW1pbmVTRThTcGVj
aWZpY3M6IHN1cGVyIHR5cGUgbm90IGJlIG51bGwiLCBzdXBlclR5cGUpOworCQl2ZXJpZnlUeXBl
QW5ub3RhdGlvbnMoc3VwZXJUeXBlLCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPXMpIn0pOwor
CisJCUxpc3Q8PyBleHRlbmRzIFR5cGVNaXJyb3I+IGludGVyZmFjZXMgID0gYW5ub3RhdGVkVHlw
ZS5nZXRJbnRlcmZhY2VzKCk7CisJCWFzc2VydE5vdE51bGwoIkphdmE4RWxlbWVudFByb2Nlc3Nv
ciNleGFtaW5lU0U4U3BlY2lmaWNzOiBzdXBlciBpbnRlcmZhY2VzIGxpc3Qgc2hvdWxkIG5vdCBi
ZSBudWxsIiwgaW50ZXJmYWNlcyk7CisJCWFzc2VydEVxdWFscygiSmF2YThFbGVtZW50UHJvY2Vz
c29yI2V4YW1pbmVTRThTcGVjaWZpY3M6IGluY29ycmVjdCBubyBvZiBzdXBlciBpbnRlcmZhY2Vz
IiwgMiwgaW50ZXJmYWNlcy5zaXplKCkpOworCQlzdXBlclR5cGUgPSBpbnRlcmZhY2VzLmdldCgw
KTsKKwkJdmVyaWZ5VHlwZUFubm90YXRpb25zKHN1cGVyVHlwZSwgbmV3IFN0cmluZ1tdeyJAVHlw
ZSh2YWx1ZT1pMSkifSk7CisJCXN1cGVyVHlwZSA9IGludGVyZmFjZXMuZ2V0KDEpOworCQl2ZXJp
ZnlUeXBlQW5ub3RhdGlvbnMoc3VwZXJUeXBlLCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPWky
KSJ9KTsKKwl9CisJCisJcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczEoKSB7CisJCVR5
cGVFbGVtZW50IGFubm90YXRlZFR5cGUgPSBfZWxlbWVudFV0aWxzLmdldFR5cGVFbGVtZW50KCJ0
YXJnZXRzLm1vZGVsOC5YIik7CisJCUxpc3Q8PyBleHRlbmRzIEVsZW1lbnQ+IG1lbWJlcnMgPSBf
ZWxlbWVudFV0aWxzLmdldEFsbE1lbWJlcnMoYW5ub3RhdGVkVHlwZSk7CisJCUV4ZWN1dGFibGVF
bGVtZW50IG1ldGhvZCA9IG51bGw7CisJCWZvciAoRWxlbWVudCBtZW1iZXIgOiBtZW1iZXJzKSB7
CisJCQlpZiAoImJhciIuZXF1YWxzKG1lbWJlci5nZXRTaW1wbGVOYW1lKCkudG9TdHJpbmcoKSkp
IHsKKwkJCQltZXRob2QgPSAoRXhlY3V0YWJsZUVsZW1lbnQpIG1lbWJlcjsKKwkJCX0KKwkJfQor
CQlMaXN0PD8gZXh0ZW5kcyBWYXJpYWJsZUVsZW1lbnQ+IHBhcmFtcyA9IG1ldGhvZC5nZXRQYXJh
bWV0ZXJzKCk7CisJCWFzc2VydEVxdWFscygiSW5jb3JyZWN0IG5vIG9mIHBhcmFtcyBmb3IgbWV0
aG9kIGJhcigpIiwgMiwgcGFyYW1zLnNpemUoKSk7CisJCVZhcmlhYmxlRWxlbWVudCBwYXJhbSA9
IChWYXJpYWJsZUVsZW1lbnQpIHBhcmFtcy5nZXQoMCk7CisJCVR5cGVNaXJyb3IgdHlwZU1pcnJv
ciA9IHBhcmFtLmFzVHlwZSgpOworCQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZU1pcnJvciwg
bmV3IFN0cmluZ1tdeyJAVHlwZSh2YWx1ZT1wMSkifSk7CisJCXBhcmFtID0gKFZhcmlhYmxlRWxl
bWVudCkgcGFyYW1zLmdldCgxKTsKKwkJdHlwZU1pcnJvciA9IHBhcmFtLmFzVHlwZSgpOworCQl2
ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZU1pcnJvciwgbmV3IFN0cmluZ1tdeyJAVHlwZSh2YWx1
ZT1wMikifSk7CisJfQorCQorCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnMyKCkgewor
CQlUeXBlRWxlbWVudCBhbm5vdGF0ZWRUeXBlID0gX2VsZW1lbnRVdGlscy5nZXRUeXBlRWxlbWVu
dCgidGFyZ2V0cy5tb2RlbDguWSIpOworCQlMaXN0PD8gZXh0ZW5kcyBFbGVtZW50PiBtZW1iZXJz
ID0gX2VsZW1lbnRVdGlscy5nZXRBbGxNZW1iZXJzKGFubm90YXRlZFR5cGUpOworCQlWYXJpYWJs
ZUVsZW1lbnQgZmllbGQyID0gbnVsbDsKKwkJVmFyaWFibGVFbGVtZW50IGZpZWxkMyA9IG51bGw7
CisJCWZvciAoRWxlbWVudCBtZW1iZXIgOiBtZW1iZXJzKSB7CisJCQlpZiAoIl9maWVsZDIiLmVx
dWFscyhtZW1iZXIuZ2V0U2ltcGxlTmFtZSgpLnRvU3RyaW5nKCkpKSB7CisJCQkJZmllbGQyID0g
KFZhcmlhYmxlRWxlbWVudCkgbWVtYmVyOworCQkJfSBlbHNlIGlmICgiX2ZpZWxkMyIuZXF1YWxz
KG1lbWJlci5nZXRTaW1wbGVOYW1lKCkudG9TdHJpbmcoKSkpIHsKKwkJCQlmaWVsZDMgPSAoVmFy
aWFibGVFbGVtZW50KSBtZW1iZXI7CisJCQl9CisJCX0KKwkJCisJCS8vQFR5cGUoImYiKSBTdHJp
bmcgQFR5cGUoImYxIikgW10gQFR5cGUoImYyIikgW10gX2ZpZWxkMiBAVHlwZSgiZjMiKSBbXSwg
X2ZpZWxkMyBAVHlwZSgiZjQiKSBbXVtdID0gbnVsbDsKKwkJYXNzZXJ0Tm90TnVsbCgiSmF2YThF
bGVtZW50UHJvY2Vzc29yI2V4YW1pbmVTRThTcGVjaWZpY3M6IEVsZW1lbnQgZm9yIGZpZWxkIF9m
aWVsZDIgc2hvdWxkIG5vdCBiZSBudWxsIiwgZmllbGQyKTsKKwkJVHlwZU1pcnJvciB0eXBlTWly
cm9yID0gZmllbGQyLmFzVHlwZSgpOworCQlhc3NlcnRFcXVhbHMoIlNob3VsZCBiZSBhbiBhcnJh
eSB0eXBlIiwgVHlwZUtpbmQuQVJSQVksIHR5cGVNaXJyb3IuZ2V0S2luZCgpKTsKKwkJdmVyaWZ5
VHlwZUFubm90YXRpb25zKHR5cGVNaXJyb3IsIG5ldyBTdHJpbmdbXXsiQFR5cGUodmFsdWU9ZjMp
In0pOworCQl0eXBlTWlycm9yID0gKChBcnJheVR5cGUpIHR5cGVNaXJyb3IpLmdldENvbXBvbmVu
dFR5cGUoKTsKKwkJYXNzZXJ0RXF1YWxzKCJTaG91bGQgYmUgYW4gYXJyYXkgdHlwZSIsIFR5cGVL
aW5kLkFSUkFZLCB0eXBlTWlycm9yLmdldEtpbmQoKSk7CisJCXZlcmlmeVR5cGVBbm5vdGF0aW9u
cyh0eXBlTWlycm9yLCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPWYxKSJ9KTsKKwkJdHlwZU1p
cnJvciA9ICgoQXJyYXlUeXBlKSB0eXBlTWlycm9yKS5nZXRDb21wb25lbnRUeXBlKCk7CisJCWFz
c2VydEVxdWFscygiU2hvdWxkIGJlIGFuIGFycmF5IHR5cGUiLCBUeXBlS2luZC5BUlJBWSwgdHlw
ZU1pcnJvci5nZXRLaW5kKCkpOworCQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZU1pcnJvciwg
bmV3IFN0cmluZ1tdeyJAVHlwZSh2YWx1ZT1mMikifSk7CisKKwkJYXNzZXJ0Tm90TnVsbCgiSmF2
YThFbGVtZW50UHJvY2Vzc29yI2V4YW1pbmVTRThTcGVjaWZpY3M6IEVsZW1lbnQgZm9yIGZpZWxk
IF9maWVsZDMgc2hvdWxkIG5vdCBiZSBudWxsIiwgZmllbGQzKTsKKwkJdHlwZU1pcnJvciA9IGZp
ZWxkMy5hc1R5cGUoKTsKKwkJLy8gVGhlIHNlY29uZCBmaWVsZCBiaW5kaW5nIGRvZXNuJ3Qgc2Vl
bSB0byBoYXZlIHRoZSBhbm5vdGF0aW9ucy4gVG8gYmUgaW52ZXN0aWdhdGVkCisJCXZlcmlmeVR5
cGVBbm5vdGF0aW9ucyh0eXBlTWlycm9yLCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPWY0KSJ9
KTsKKwkJdHlwZU1pcnJvciA9ICgoQXJyYXlUeXBlKSB0eXBlTWlycm9yKS5nZXRDb21wb25lbnRU
eXBlKCk7CisJCWFzc2VydEVxdWFscygiU2hvdWxkIGJlIGFuIGFycmF5IHR5cGUiLCBUeXBlS2lu
ZC5BUlJBWSwgdHlwZU1pcnJvci5nZXRLaW5kKCkpOworCQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnMo
dHlwZU1pcnJvciwgbmV3IFN0cmluZ1tde30pOworCQl0eXBlTWlycm9yID0gKChBcnJheVR5cGUp
IHR5cGVNaXJyb3IpLmdldENvbXBvbmVudFR5cGUoKTsKKwkJYXNzZXJ0RXF1YWxzKCJTaG91bGQg
YmUgYW4gYXJyYXkgdHlwZSIsIFR5cGVLaW5kLkFSUkFZLCB0eXBlTWlycm9yLmdldEtpbmQoKSk7
CisJCXZlcmlmeVR5cGVBbm5vdGF0aW9ucyh0eXBlTWlycm9yLCBuZXcgU3RyaW5nW117IkBUeXBl
KHZhbHVlPWYxKSJ9KTsKKwkJdHlwZU1pcnJvciA9ICgoQXJyYXlUeXBlKSB0eXBlTWlycm9yKS5n
ZXRDb21wb25lbnRUeXBlKCk7CisJCWFzc2VydEVxdWFscygiU2hvdWxkIGJlIGFuIGFycmF5IHR5
cGUiLCBUeXBlS2luZC5BUlJBWSwgdHlwZU1pcnJvci5nZXRLaW5kKCkpOworCQl2ZXJpZnlUeXBl
QW5ub3RhdGlvbnModHlwZU1pcnJvciwgbmV3IFN0cmluZ1tdeyJAVHlwZSh2YWx1ZT1mMikifSk7
CisJfQorCQorCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnMzKCkgeworCQlUeXBlRWxl
bWVudCBhbm5vdGF0ZWRUeXBlID0gX2VsZW1lbnRVdGlscy5nZXRUeXBlRWxlbWVudCgidGFyZ2V0
cy5tb2RlbDguWSIpOworCQlMaXN0PD8gZXh0ZW5kcyBFbGVtZW50PiBtZW1iZXJzID0gX2VsZW1l
bnRVdGlscy5nZXRBbGxNZW1iZXJzKGFubm90YXRlZFR5cGUpOworCQlFeGVjdXRhYmxlRWxlbWVu
dCBtZXRob2QgPSBudWxsOworCQlmb3IgKEVsZW1lbnQgbWVtYmVyIDogbWVtYmVycykgeworCQkJ
aWYgKCJmb28iLmVxdWFscyhtZW1iZXIuZ2V0U2ltcGxlTmFtZSgpLnRvU3RyaW5nKCkpKSB7CisJ
CQkJbWV0aG9kID0gKEV4ZWN1dGFibGVFbGVtZW50KSBtZW1iZXI7CisJCQl9CisJCX0KKwkJLy8g
QFR5cGUoIm0iKSBTdHJpbmcgQFR5cGUoIm0xIikgW10gZm9vKCkgQFR5cGUoIm0yIikgW10gQFR5
cGUoIm0zIikgW10ge30KKwkJYXNzZXJ0Tm90TnVsbCgiTWV0aG9kIHNob3VsZCBub3QgYmUgbnVs
bCIsIG1ldGhvZCk7CisJCVR5cGVNaXJyb3IgdHlwZU1pcnJvciA9IG1ldGhvZC5nZXRSZXR1cm5U
eXBlKCk7CisJCXZlcmlmeVR5cGVBbm5vdGF0aW9ucyh0eXBlTWlycm9yLCBuZXcgU3RyaW5nW117
IkBUeXBlKHZhbHVlPW0yKSJ9KTsKKwkJYXNzZXJ0RXF1YWxzKCJTaG91bGQgYmUgYW4gYXJyYXkg
dHlwZSIsIFR5cGVLaW5kLkFSUkFZLCB0eXBlTWlycm9yLmdldEtpbmQoKSk7CisJCXR5cGVNaXJy
b3IgPSAoKEFycmF5VHlwZSkgdHlwZU1pcnJvcikuZ2V0Q29tcG9uZW50VHlwZSgpOworCQl2ZXJp
ZnlUeXBlQW5ub3RhdGlvbnModHlwZU1pcnJvciwgbmV3IFN0cmluZ1tdeyJAVHlwZSh2YWx1ZT1t
MykifSk7CisJCWFzc2VydEVxdWFscygiU2hvdWxkIGJlIGFuIGFycmF5IHR5cGUiLCBUeXBlS2lu
ZC5BUlJBWSwgdHlwZU1pcnJvci5nZXRLaW5kKCkpOworCQl0eXBlTWlycm9yID0gKChBcnJheVR5
cGUpIHR5cGVNaXJyb3IpLmdldENvbXBvbmVudFR5cGUoKTsKKwkJdmVyaWZ5VHlwZUFubm90YXRp
b25zKHR5cGVNaXJyb3IsIG5ldyBTdHJpbmdbXXsiQFR5cGUodmFsdWU9bTEpIn0pOworCQlhc3Nl
cnRFcXVhbHMoIlNob3VsZCBiZSBhbiBhcnJheSB0eXBlIiwgVHlwZUtpbmQuQVJSQVksIHR5cGVN
aXJyb3IuZ2V0S2luZCgpKTsKKwkJdHlwZU1pcnJvciA9ICgoQXJyYXlUeXBlKSB0eXBlTWlycm9y
KS5nZXRDb21wb25lbnRUeXBlKCk7CisJCXZlcmlmeVR5cGVBbm5vdGF0aW9ucyh0eXBlTWlycm9y
LCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPW0pIn0pOworCX0KKworCXB1YmxpYyB2b2lkIHRl
c3RUeXBlQW5ub3RhdGlvbnM0KCkgeworCQkvLyB2b2lkIGJhciggQFR5cGUoInAxIikgU3RyaW5n
IFtdIGEgQFR5cGUoInAyIikgW10sIEBUeXBlKCJwMyIpIGludCBAVHlwZSgicDQiKSBbXSBiIFtd
IEBUeXBlKCJwNSIpIFtdKSB7fQorCQlUeXBlRWxlbWVudCBhbm5vdGF0ZWRUeXBlID0gX2VsZW1l
bnRVdGlscy5nZXRUeXBlRWxlbWVudCgidGFyZ2V0cy5tb2RlbDguWSIpOworCQlMaXN0PD8gZXh0
ZW5kcyBFbGVtZW50PiBtZW1iZXJzID0gX2VsZW1lbnRVdGlscy5nZXRBbGxNZW1iZXJzKGFubm90
YXRlZFR5cGUpOworCQlFeGVjdXRhYmxlRWxlbWVudCBtZXRob2QgPSBudWxsOworCQlmb3IgKEVs
ZW1lbnQgbWVtYmVyIDogbWVtYmVycykgeworCQkJaWYgKCJiYXIiLmVxdWFscyhtZW1iZXIuZ2V0
U2ltcGxlTmFtZSgpLnRvU3RyaW5nKCkpKSB7CisJCQkJbWV0aG9kID0gKEV4ZWN1dGFibGVFbGVt
ZW50KSBtZW1iZXI7CisJCQl9CisJCX0KKwkJYXNzZXJ0Tm90TnVsbCgiTWV0aG9kIHNob3VsZCBu
b3QgYmUgbnVsbCIsIG1ldGhvZCk7CisJCUxpc3Q8PyBleHRlbmRzIFZhcmlhYmxlRWxlbWVudD4g
cGFyYW1zID0gbWV0aG9kLmdldFBhcmFtZXRlcnMoKTsKKwkJYXNzZXJ0RXF1YWxzKCJJbmNvcnJl
Y3Qgbm8gb2YgcGFyYW1zIGZvciBtZXRob2QgYmFyKCkiLCAyLCBwYXJhbXMuc2l6ZSgpKTsKKwkJ
VmFyaWFibGVFbGVtZW50IHBhcmFtID0gKFZhcmlhYmxlRWxlbWVudCkgcGFyYW1zLmdldCgwKTsK
KwkJVHlwZU1pcnJvciB0eXBlTWlycm9yID0gcGFyYW0uYXNUeXBlKCk7CisJCXZlcmlmeVR5cGVB
bm5vdGF0aW9ucyh0eXBlTWlycm9yLCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPXAyKSJ9KTsK
KwkJYXNzZXJ0RXF1YWxzKCJTaG91bGQgYmUgYW4gYXJyYXkgdHlwZSIsIFR5cGVLaW5kLkFSUkFZ
LCB0eXBlTWlycm9yLmdldEtpbmQoKSk7CisJCXR5cGVNaXJyb3IgPSAoKEFycmF5VHlwZSkgdHlw
ZU1pcnJvcikuZ2V0Q29tcG9uZW50VHlwZSgpOworCQkKKwkJdmVyaWZ5VHlwZUFubm90YXRpb25z
KHR5cGVNaXJyb3IsIG5ldyBTdHJpbmdbXXt9KTsKKwkJYXNzZXJ0RXF1YWxzKCJTaG91bGQgYmUg
YW4gYXJyYXkgdHlwZSIsIFR5cGVLaW5kLkFSUkFZLCB0eXBlTWlycm9yLmdldEtpbmQoKSk7CisJ
CXR5cGVNaXJyb3IgPSAoKEFycmF5VHlwZSkgdHlwZU1pcnJvcikuZ2V0Q29tcG9uZW50VHlwZSgp
OworCQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZU1pcnJvciwgbmV3IFN0cmluZ1tdeyJAVHlw
ZSh2YWx1ZT1wMSkifSk7CisKKwkJcGFyYW0gPSAoVmFyaWFibGVFbGVtZW50KSBwYXJhbXMuZ2V0
KDEpOworCQl0eXBlTWlycm9yID0gcGFyYW0uYXNUeXBlKCk7CisJCXZlcmlmeVR5cGVBbm5vdGF0
aW9ucyh0eXBlTWlycm9yLCBuZXcgU3RyaW5nW117fSk7CisJCWFzc2VydEVxdWFscygiU2hvdWxk
IGJlIGFuIGFycmF5IHR5cGUiLCBUeXBlS2luZC5BUlJBWSwgdHlwZU1pcnJvci5nZXRLaW5kKCkp
OworCQl0eXBlTWlycm9yID0gKChBcnJheVR5cGUpIHR5cGVNaXJyb3IpLmdldENvbXBvbmVudFR5
cGUoKTsKKwkJCisJCXZlcmlmeVR5cGVBbm5vdGF0aW9ucyh0eXBlTWlycm9yLCBuZXcgU3RyaW5n
W117IkBUeXBlKHZhbHVlPXA1KSJ9KTsKKwkJYXNzZXJ0RXF1YWxzKCJTaG91bGQgYmUgYW4gYXJy
YXkgdHlwZSIsIFR5cGVLaW5kLkFSUkFZLCB0eXBlTWlycm9yLmdldEtpbmQoKSk7CisJCXR5cGVN
aXJyb3IgPSAoKEFycmF5VHlwZSkgdHlwZU1pcnJvcikuZ2V0Q29tcG9uZW50VHlwZSgpOworCQl2
ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZU1pcnJvciwgbmV3IFN0cmluZ1tdeyJAVHlwZSh2YWx1
ZT1wNCkifSk7CisJCWFzc2VydEVxdWFscygiU2hvdWxkIGJlIGFuIGFycmF5IHR5cGUiLCBUeXBl
S2luZC5BUlJBWSwgdHlwZU1pcnJvci5nZXRLaW5kKCkpOworCQl0eXBlTWlycm9yID0gKChBcnJh
eVR5cGUpIHR5cGVNaXJyb3IpLmdldENvbXBvbmVudFR5cGUoKTsKKwkJdmVyaWZ5VHlwZUFubm90
YXRpb25zKHR5cGVNaXJyb3IsIG5ldyBTdHJpbmdbXXsiQFR5cGUodmFsdWU9cDMpIn0pOworCQkK
Kwl9CisJCisJcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczUoKSB7CisJCS8vIHZvaWQg
Zm9vMigpIHRocm93cyAoQFR5cGUoImUxIikgTnVsbFBvaW50ZXJFeGNlcHRpb24sIChAVHlwZSgi
ZTIiKSBBcnJheUluZGV4T3V0T2ZCb3VuZHNFeGNlcHRpb24ge30KKwkJVHlwZUVsZW1lbnQgYW5u
b3RhdGVkVHlwZSA9IF9lbGVtZW50VXRpbHMuZ2V0VHlwZUVsZW1lbnQoInRhcmdldHMubW9kZWw4
LlkiKTsKKwkJTGlzdDw/IGV4dGVuZHMgRWxlbWVudD4gbWVtYmVycyA9IF9lbGVtZW50VXRpbHMu
Z2V0QWxsTWVtYmVycyhhbm5vdGF0ZWRUeXBlKTsKKwkJRXhlY3V0YWJsZUVsZW1lbnQgbWV0aG9k
ID0gbnVsbDsKKwkJZm9yIChFbGVtZW50IG1lbWJlciA6IG1lbWJlcnMpIHsKKwkJCWlmICgiZm9v
MiIuZXF1YWxzKG1lbWJlci5nZXRTaW1wbGVOYW1lKCkudG9TdHJpbmcoKSkpIHsKKwkJCQltZXRo
b2QgPSAoRXhlY3V0YWJsZUVsZW1lbnQpIG1lbWJlcjsKKwkJCX0KKwkJfQorCQlMaXN0PD9leHRl
bmRzIFR5cGVNaXJyb3I+IGV4Y2VwdGlvbnMgPSBtZXRob2QuZ2V0VGhyb3duVHlwZXMoKTsKKwkJ
YXNzZXJ0RXF1YWxzKCJJbmNvcnJlY3Qgbm8gb2YgdGhyb3duIGV4Y2VwdGlvbnMiLCAyLCBleGNl
cHRpb25zLnNpemUoKSk7CisJCVR5cGVNaXJyb3IgdHlwZU1pcnJvciA9IGV4Y2VwdGlvbnMuZ2V0
KDApOworCQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZU1pcnJvciwgbmV3IFN0cmluZ1tdeyJA
VHlwZSh2YWx1ZT1lMSkifSk7CisJCXR5cGVNaXJyb3IgPSBleGNlcHRpb25zLmdldCgxKTsKKwkJ
dmVyaWZ5VHlwZUFubm90YXRpb25zKHR5cGVNaXJyb3IsIG5ldyBTdHJpbmdbXXsiQFR5cGUodmFs
dWU9ZTIpIn0pOworCX0KKworCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnM2KCkgewor
CQkvLyB2b2lkIGJhcjIgKEBUeXBlKCJwMSIpIFN0cmluZyBAVHlwZSgicDIiKSBbXSBAVHlwZSgi
cDMiKSAuLi4gYXJncykge30KKwkJVHlwZUVsZW1lbnQgYW5ub3RhdGVkVHlwZSA9IF9lbGVtZW50
VXRpbHMuZ2V0VHlwZUVsZW1lbnQoInRhcmdldHMubW9kZWw4LlkiKTsKKwkJTGlzdDw/IGV4dGVu
ZHMgRWxlbWVudD4gbWVtYmVycyA9IF9lbGVtZW50VXRpbHMuZ2V0QWxsTWVtYmVycyhhbm5vdGF0
ZWRUeXBlKTsKKwkJRXhlY3V0YWJsZUVsZW1lbnQgbWV0aG9kID0gbnVsbDsKKwkJZm9yIChFbGVt
ZW50IG1lbWJlciA6IG1lbWJlcnMpIHsKKwkJCWlmICgiYmFyMiIuZXF1YWxzKG1lbWJlci5nZXRT
aW1wbGVOYW1lKCkudG9TdHJpbmcoKSkpIHsKKwkJCQltZXRob2QgPSAoRXhlY3V0YWJsZUVsZW1l
bnQpIG1lbWJlcjsKKwkJCX0KKwkJfQorCQlMaXN0PD8gZXh0ZW5kcyBWYXJpYWJsZUVsZW1lbnQ+
IHBhcmFtcyA9IG1ldGhvZC5nZXRQYXJhbWV0ZXJzKCk7CisJCWFzc2VydEVxdWFscygiSW5jb3Jy
ZWN0IG5vIG9mIHBhcmFtZXRlcnMiLCAxLCBwYXJhbXMuc2l6ZSgpKTsKKwkJVHlwZU1pcnJvciB0
eXBlTWlycm9yID0gcGFyYW1zLmdldCgwKS5hc1R5cGUoKTsKKwkJdmVyaWZ5VHlwZUFubm90YXRp
b25zKHR5cGVNaXJyb3IsIG5ldyBTdHJpbmdbXXsiQFR5cGUodmFsdWU9cDIpIn0pOworCQlhc3Nl
cnRFcXVhbHMoIlNob3VsZCBiZSBhbiBhcnJheSB0eXBlIiwgVHlwZUtpbmQuQVJSQVksIHR5cGVN
aXJyb3IuZ2V0S2luZCgpKTsKKwkJdHlwZU1pcnJvciA9ICgoQXJyYXlUeXBlKSB0eXBlTWlycm9y
KS5nZXRDb21wb25lbnRUeXBlKCk7CisJCXZlcmlmeVR5cGVBbm5vdGF0aW9ucyh0eXBlTWlycm9y
LCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPXAzKSJ9KTsKKwkJYXNzZXJ0RXF1YWxzKCJTaG91
bGQgYmUgYW4gYXJyYXkgdHlwZSIsIFR5cGVLaW5kLkFSUkFZLCB0eXBlTWlycm9yLmdldEtpbmQo
KSk7CisJCXR5cGVNaXJyb3IgPSAoKEFycmF5VHlwZSkgdHlwZU1pcnJvcikuZ2V0Q29tcG9uZW50
VHlwZSgpOworCQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZU1pcnJvciwgbmV3IFN0cmluZ1td
eyJAVHlwZSh2YWx1ZT1wMSkifSk7CisKKwl9CisKKwlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90
YXRpb25zNygpIHsKKwkJLy8gcHVibGljIGNsYXNzIFogPEBUeXBlKCJ0cDEiKSBLLCBAVHlwZSgi
dHAyIikgVj4geworCQlUeXBlRWxlbWVudCB0eXBlWiA9IF9lbGVtZW50VXRpbHMuZ2V0VHlwZUVs
ZW1lbnQoInRhcmdldHMubW9kZWw4LloiKTsKKwkJVHlwZU1pcnJvciB0eXBlTWlycm9yID0gdHlw
ZVouYXNUeXBlKCk7CisJCUxpc3Q8PyBleHRlbmRzIFR5cGVQYXJhbWV0ZXJFbGVtZW50PiB0eXBl
UGFyYW1zID0gdHlwZVouZ2V0VHlwZVBhcmFtZXRlcnMoKTsKKwkJYXNzZXJ0RXF1YWxzKCJJbmNv
cnJlY3Qgbm8gb2YgdHlwZSBwYXJhbXMiLCAyLCB0eXBlUGFyYW1zLnNpemUoKSk7CisJCVR5cGVQ
YXJhbWV0ZXJFbGVtZW50IHR5cGVQYXJhbSA9IHR5cGVQYXJhbXMuZ2V0KDApOworCQl2ZXJpZnlU
eXBlQW5ub3RhdGlvbnModHlwZVBhcmFtLCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPXRwMSki
fSk7CisJCXR5cGVNaXJyb3IgPSB0eXBlUGFyYW0uYXNUeXBlKCk7CisJCXZlcmlmeVR5cGVBbm5v
dGF0aW9ucyh0eXBlTWlycm9yLCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPXRwMSkifSk7CisJ
CXR5cGVQYXJhbSA9IHR5cGVQYXJhbXMuZ2V0KDEpOworCQl0eXBlTWlycm9yID0gdHlwZVBhcmFt
LmFzVHlwZSgpOworCQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZVBhcmFtLCBuZXcgU3RyaW5n
W117IkBUeXBlKHZhbHVlPXRwMikifSk7CisJCXZlcmlmeVR5cGVBbm5vdGF0aW9ucyh0eXBlTWly
cm9yLCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPXRwMikifSk7CisJfQorCQorCXB1YmxpYyB2
b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnM4KCkgeworCQlUeXBlRWxlbWVudCB0eXBlWiA9IF9lbGVt
ZW50VXRpbHMuZ2V0VHlwZUVsZW1lbnQoInRhcmdldHMubW9kZWw4LloiKTsKKwkJTGlzdDw/IGV4
dGVuZHMgRWxlbWVudD4gbWVtYmVycyA9IF9lbGVtZW50VXRpbHMuZ2V0QWxsTWVtYmVycyh0eXBl
Wik7CisJCUV4ZWN1dGFibGVFbGVtZW50IG1ldGhvZCA9IG51bGw7CisJCVZhcmlhYmxlRWxlbWVu
dCBmaWVsZCA9IG51bGw7CisJCWZvciAoRWxlbWVudCBtZW1iZXIgOiBtZW1iZXJzKSB7CisJCQlp
ZiAoImZvbyIuZXF1YWxzKG1lbWJlci5nZXRTaW1wbGVOYW1lKCkudG9TdHJpbmcoKSkpIHsKKwkJ
CQltZXRob2QgPSAoRXhlY3V0YWJsZUVsZW1lbnQpIG1lbWJlcjsKKwkJCX0gZWxzZSBpZiAoInox
Ii5lcXVhbHMobWVtYmVyLmdldFNpbXBsZU5hbWUoKS50b1N0cmluZygpKSkgeworCQkJCWZpZWxk
ID0gKFZhcmlhYmxlRWxlbWVudCkgbWVtYmVyOworCQkJfQorCQl9CisJCQorCQkvLyBwdWJsaWMg
PEBUeXBlKCJtcDEiKSBULCBAVHlwZSgibXAyIikgVT4gdm9pZCBmb28oKSB7fQkKKwkJTGlzdDw/
IGV4dGVuZHMgVHlwZVBhcmFtZXRlckVsZW1lbnQ+IHR5cGVQYXJhbXMgPSBtZXRob2QuZ2V0VHlw
ZVBhcmFtZXRlcnMoKTsKKwkJYXNzZXJ0RXF1YWxzKCJJbmNvcnJlY3Qgbm8gb2YgdHlwZSBwYXJh
bXMiLCAyLCB0eXBlUGFyYW1zLnNpemUoKSk7CisJCVR5cGVQYXJhbWV0ZXJFbGVtZW50IHR5cGVQ
YXJhbSA9IHR5cGVQYXJhbXMuZ2V0KDApOworCQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZVBh
cmFtLCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPW1wMSkifSk7CisJCXR5cGVQYXJhbSA9IHR5
cGVQYXJhbXMuZ2V0KDEpOworCQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZVBhcmFtLCBuZXcg
U3RyaW5nW117IkBUeXBlKHZhbHVlPW1wMikifSk7CisJCS8vWjxAVHlwZSgidGExIikgU3RyaW5n
LCBAVHlwZSgidGEyIikgT2JqZWN0PiB6MSA9IG51bGw7CisJCS8vIEFQSXMgZG9uJ3QgZXhwb3Nl
IHRoZSB0eXBlIGFyZ3VtZW50cyBvbiBhIFR5cGVNaXJyb3IKKwkJVHlwZU1pcnJvciB0eXBlTWly
cm9yID0gZmllbGQuYXNUeXBlKCk7CisJCXZlcmlmeVR5cGVBbm5vdGF0aW9ucyh0eXBlTWlycm9y
LCBuZXcgU3RyaW5nW117fSk7CisJfQorCisJcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9u
czkoKSB7CisJCVR5cGVFbGVtZW50IGFubm90YXRlZFR5cGUgPSBfZWxlbWVudFV0aWxzLmdldFR5
cGVFbGVtZW50KCJ0YXJnZXRzLm1vZGVsOC5YIik7CisJCUxpc3Q8PyBleHRlbmRzIEVsZW1lbnQ+
IG1lbWJlcnMgPSBfZWxlbWVudFV0aWxzLmdldEFsbE1lbWJlcnMoYW5ub3RhdGVkVHlwZSk7CisJ
CQorCQlWYXJpYWJsZUVsZW1lbnQgZmllbGQyID0gbnVsbDsKKwkJZm9yIChWYXJpYWJsZUVsZW1l
bnQgbWVtYmVyIDogRWxlbWVudEZpbHRlci5maWVsZHNJbihtZW1iZXJzKSkgeworCQkJaWYgKCJf
ZmllbGQyIi5lcXVhbHMobWVtYmVyLmdldFNpbXBsZU5hbWUoKS50b1N0cmluZygpKSkgeworCQkJ
CWZpZWxkMiA9IChWYXJpYWJsZUVsZW1lbnQpIG1lbWJlcjsKKwkJCQlicmVhazsKKwkJCX0KKwkJ
fQorCQlUeXBlTWlycm9yIHR5cGVNaXJyb3IgPSBmaWVsZDIuYXNUeXBlKCk7CisJCVR5cGUkMSBh
bm5vdDEgPSB0eXBlTWlycm9yLmdldEFubm90YXRpb24oVHlwZSQxLmNsYXNzKTsKKwkJYXNzZXJ0
Tm90TnVsbCgiQW5ub3RhdGlvbiBzaG91bGQgbm90IGJlIG51bGwiLCBhbm5vdDEpOworCQlUeXBl
Lk9uZSBhbm5vdDIgPSB0eXBlTWlycm9yLmdldEFubm90YXRpb24oVHlwZS5PbmUuY2xhc3MpOwor
CQlhc3NlcnROb3ROdWxsKCJBbm5vdGF0aW9uIHNob3VsZCBub3QgYmUgbnVsbCIsIGFubm90Mik7
CisJfQorCisJcHJpdmF0ZSBTdHJpbmcgZ2V0RXhjZXB0aW9uU3RhY2tUcmFjZShUaHJvd2FibGUg
dCkgeworCQlTdHJpbmdCdWZmZXIgYnVmID0gbmV3IFN0cmluZ0J1ZmZlcih0LmdldE1lc3NhZ2Uo
KSk7CisJCVN0YWNrVHJhY2VFbGVtZW50W10gdHJhY2VzID0gdC5nZXRTdGFja1RyYWNlKCk7CisJ
CWZvciAoaW50IGkgPSAwOyBpIDwgdHJhY2VzLmxlbmd0aDsgaSsrKSB7CisJCQlTdGFja1RyYWNl
RWxlbWVudCB0cmFjZSA9IHRyYWNlc1tpXTsKKwkJCWJ1Zi5hcHBlbmQoIlxuXHRhdCAiICsgdHJh
Y2UpOworCQkJaWYgKGkgPT0gMTIpCisJCQkJYnJlYWs7IC8vIERvbid0IGR1bXAgYWxsIHN0YWNr
cworCQl9CisJCXJldHVybiBidWYudG9TdHJpbmcoKTsKKworCX0KKworCQorCXByaXZhdGUgdm9p
ZCB2ZXJpZnlUeXBlQW5ub3RhdGlvbnMoQW5ub3RhdGVkQ29uc3RydWN0IGNvbnN0cnVjdCwgU3Ry
aW5nW10gYW5ub3RzKSB7CisJCUxpc3Q8PyBleHRlbmRzIEFubm90YXRpb25NaXJyb3I+IGFubm90
YXRpb25zID0gY29uc3RydWN0LmdldEFubm90YXRpb25NaXJyb3JzKCk7CisJCWFzc2VydEVxdWFs
cygiSW5jb3JyZWN0IG5vIG9mIGFubm90YXRpb25zIiwgYW5ub3RzLmxlbmd0aCwgYW5ub3RhdGlv
bnMuc2l6ZSgpKTsKKwkJZm9yKGludCBpID0gMCwgbGVuZ3RoID0gYW5ub3RzLmxlbmd0aDsgaSA8
IGxlbmd0aDsgaSsrKSB7CisJCQlBbm5vdGF0aW9uTWlycm9yIG1pcnJvciA9IGFubm90YXRpb25z
LmdldChpKTsKKwkJCWFzc2VydEVxdWFscygiSW52YWxpZCBhbm5vdGF0aW9uIHZhbHVlIiwgYW5u
b3RzW2ldLCBnZXRBbm5vdGF0aW9uU3RyaW5nKG1pcnJvcikpOworCQl9CisJfQorCXByaXZhdGUg
U3RyaW5nIGdldEFubm90YXRpb25TdHJpbmcoQW5ub3RhdGlvbk1pcnJvciBhbm5vdCkgeworCQlE
ZWNsYXJlZFR5cGUgYW5ub3RUeXBlID0gYW5ub3QuZ2V0QW5ub3RhdGlvblR5cGUoKTsKKwkJVHlw
ZUVsZW1lbnQgdHlwZSA9IChUeXBlRWxlbWVudCkgYW5ub3RUeXBlLmFzRWxlbWVudCgpOworCQlT
dHJpbmdCdWZmZXIgYnVmID0gbmV3IFN0cmluZ0J1ZmZlcigiQCIgKyB0eXBlLmdldFNpbXBsZU5h
bWUoKSk7CisJCU1hcDw/IGV4dGVuZHMgRXhlY3V0YWJsZUVsZW1lbnQsID8gZXh0ZW5kcyBBbm5v
dGF0aW9uVmFsdWU+IHZhbHVlcyA9IGFubm90LmdldEVsZW1lbnRWYWx1ZXMoKTsKKwkJU2V0PD8g
ZXh0ZW5kcyBFeGVjdXRhYmxlRWxlbWVudD4ga2V5cyA9IHZhbHVlcy5rZXlTZXQoKTsKKwkJYnVm
LmFwcGVuZCgnKCcpOworCQlmb3IgKEV4ZWN1dGFibGVFbGVtZW50IGV4ZWN1dGFibGVFbGVtZW50
IDoga2V5cykgeyAvLyBATWFya2VyMygpCisJCQlidWYuYXBwZW5kKGV4ZWN1dGFibGVFbGVtZW50
LmdldFNpbXBsZU5hbWUoKSk7CisJCQlidWYuYXBwZW5kKCc9Jyk7CisJCQlBbm5vdGF0aW9uVmFs
dWUgdmFsdWUgPSB2YWx1ZXMuZ2V0KGV4ZWN1dGFibGVFbGVtZW50KTsKKwkJCWJ1Zi5hcHBlbmQo
dmFsdWUuZ2V0VmFsdWUoKSk7CisJCX0KKwkJYnVmLmFwcGVuZCgnKScpOworCQlyZXR1cm4gYnVm
LnRvU3RyaW5nKCk7CisJfQorCXByaXZhdGUgPEEgZXh0ZW5kcyBBbm5vdGF0aW9uPiB2b2lkIGV4
YW1pbmVTRThBbm5vdGF0aW9uTWV0aG9kcyhTdHJpbmcgbXNnLCBBbm5vdGF0ZWRDb25zdHJ1Y3Qg
Y29uc3RydWN0LCAgU3RyaW5nIHZhbHVlKSB7CisJCVR5cGUgYW5ub3QgPSBjb25zdHJ1Y3QuZ2V0
QW5ub3RhdGlvbihUeXBlLmNsYXNzKTsKKwkJYXNzZXJ0Tm90TnVsbChtc2cgKyAiQW5ub3RhdGlv
biBmb3IgZWxlbWVudCAiICsgY29uc3RydWN0LnRvU3RyaW5nKCkgKyAiIHNob3VsZCBub3QgYmUg
bnVsbCIsIGFubm90KTsKKwkJYXNzZXJ0U2FtZShtc2cgKyAiSW52YWxpZCBhbm5vdGF0aW9uIHR5
cGUiICwgVHlwZS5jbGFzcywgYW5ub3QuYW5ub3RhdGlvblR5cGUoKSk7CisJCWFzc2VydEVxdWFs
cyhtc2cgKyAiSW52YWxpZCBhbm5vdGF0aW9uIHZhbHVlIiwgdmFsdWUsIGFubm90LnZhbHVlKCkp
OworCQkKKwkJQW5ub3RhdGlvbltdIGFubm90cyA9IGNvbnN0cnVjdC5nZXRBbm5vdGF0aW9uc0J5
VHlwZShUeXBlLmNsYXNzKTsKKwkJYXNzZXJ0RXF1YWxzKG1zZyArICJJbmNvcnJlY3Qgbm8gb2Yg
YW5ub3RhdGlvbnMiLCAxLCBhbm5vdHMubGVuZ3RoKTsKKwkJYW5ub3QgPSAoVHlwZSkgYW5ub3Rz
WzBdOworCQlhc3NlcnRTYW1lKG1zZyArICJJbnZhbGlkIGFubm90YXRpb24gdHlwZSIgLCBUeXBl
LmNsYXNzLCBhbm5vdHNbMF0uYW5ub3RhdGlvblR5cGUoKSk7CisJCWFzc2VydEVxdWFscyhtc2cg
KyAiSW52YWxpZCBhbm5vdGF0aW9uIHZhbHVlIiwgdmFsdWUsIGFubm90LnZhbHVlKCkpOworCX0K
KwkKKwlwdWJsaWMgdm9pZCByZXBvcnRFcnJvcihTdHJpbmcgbXNnKSB7CisJCXRocm93IG5ldyBB
c3NlcnRpb25GYWlsZWRFcnJvcihtc2cpOworCX0KKwkKKwlwdWJsaWMgdm9pZCBhc3NlcnRUcnVl
KFN0cmluZyBtc2csIGJvb2xlYW4gdmFsdWUpIHsKKwkJaWYgKCF2YWx1ZSkgcmVwb3J0RXJyb3Io
bXNnKTsKKwl9CisJcHVibGljIHZvaWQgYXNzZXJ0RmFsc2UoU3RyaW5nIG1zZywgYm9vbGVhbiB2
YWx1ZSkgeworCQlpZiAodmFsdWUpIHJlcG9ydEVycm9yKG1zZyk7CisJfQorCXB1YmxpYyB2b2lk
IGFzc2VydFNhbWUoU3RyaW5nIG1zZywgT2JqZWN0IG9iajEsIE9iamVjdCBvYmoyKSB7CisJCWlm
IChvYmoxICE9IG9iajIpIHsKKwkJCXJlcG9ydEVycm9yKG1zZyArICIsIHNob3VsZCBiZSAiICsg
b2JqMS50b1N0cmluZygpICsgIiBidXQgIiArIG9iajIudG9TdHJpbmcoKSk7CisJCX0KKwl9CisJ
cHVibGljIHZvaWQgYXNzZXJ0Tm90TnVsbChTdHJpbmcgbXNnLCBPYmplY3Qgb2JqKSB7CisJCWlm
IChvYmogPT0gbnVsbCkgeworCQkJcmVwb3J0RXJyb3IobXNnKTsKKwkJfQorCX0KKwlwdWJsaWMg
dm9pZCBhc3NlcnROdWxsKFN0cmluZyBtc2csIE9iamVjdCBvYmopIHsKKwkJaWYgKG9iaiAhPSBu
dWxsKSB7CisJCQlyZXBvcnRFcnJvcihtc2cpOworCQl9CisJfQorICAgIHB1YmxpYyB2b2lkIGFz
c2VydEVxdWFscyhTdHJpbmcgbWVzc2FnZSwgT2JqZWN0IGV4cGVjdGVkLCBPYmplY3QgYWN0dWFs
KSB7CisgICAgICAgIGlmIChlcXVhbHNSZWdhcmRpbmdOdWxsKGV4cGVjdGVkLCBhY3R1YWwpKSB7
CisgICAgICAgICAgICByZXR1cm47CisgICAgICAgIH0gZWxzZSB7CisgICAgICAgIAlyZXBvcnRF
cnJvcihtZXNzYWdlICsgIiwgZXhwZWN0ZWQgIiArIGV4cGVjdGVkLnRvU3RyaW5nKCkgKyAiIGJ1
dCB3YXMgIiArIGFjdHVhbC50b1N0cmluZygpKTsKKyAgICAgICAgfQorICAgIH0KKworICAgIHN0
YXRpYyBib29sZWFuIGVxdWFsc1JlZ2FyZGluZ051bGwoT2JqZWN0IGV4cGVjdGVkLCBPYmplY3Qg
YWN0dWFsKSB7CisgICAgICAgIGlmIChleHBlY3RlZCA9PSBudWxsKSB7CisgICAgICAgICAgICBy
ZXR1cm4gYWN0dWFsID09IG51bGw7CisgICAgICAgIH0KKyAgICAgICAgcmV0dXJuIGV4cGVjdGVk
LmVxdWFscyhhY3R1YWwpOworICAgIH0KKyAgICAKKwlwdWJsaWMgdm9pZCBhc3NlcnRFcXVhbHMo
U3RyaW5nIG1zZywgaW50IGV4cGVjdGVkLCBpbnQgYWN0dWFsKSB7CisJCWlmIChleHBlY3RlZCAh
PSBhY3R1YWwpIHsKKwkJCVN0cmluZ0J1ZmZlciBidWYgPSBuZXcgU3RyaW5nQnVmZmVyKCk7CisJ
CQlidWYuYXBwZW5kKG1zZyk7CisJCQlidWYuYXBwZW5kKCIsIGV4cGVjdGVkICIgKyBleHBlY3Rl
ZCArICIgYnV0IHdhcyAiICsgYWN0dWFsKTsKKwkJCXJlcG9ydEVycm9yKGJ1Zi50b1N0cmluZygp
KTsKKwkJfQorCX0KKwlwdWJsaWMgdm9pZCBhc3NlcnRFcXVhbHMoT2JqZWN0IGV4cGVjdGVkLCBP
YmplY3QgYWN0dWFsKSB7CisJCWlmIChleHBlY3RlZCAhPSBhY3R1YWwpIHsKKwkJCQorCQl9CisJ
fQorCXByaXZhdGUgY2xhc3MgQXNzZXJ0aW9uRmFpbGVkRXJyb3IgZXh0ZW5kcyBFcnJvciB7CisJ
CXByaXZhdGUgc3RhdGljIGZpbmFsIGxvbmcgc2VyaWFsVmVyc2lvblVJRCA9IDFMOworCisJCXB1
YmxpYyBBc3NlcnRpb25GYWlsZWRFcnJvcihTdHJpbmcgbXNnKSB7CisJCQlzdXBlcihtc2cpOwor
CQl9CisJfQorCQorfQpkaWZmIC0tZ2l0IHJlc291cmNlcy90YXJnZXRzL21vZGVsOC9MYW1iZGFU
ZXN0LmphdmEgcmVzb3VyY2VzL3RhcmdldHMvbW9kZWw4L0xhbWJkYVRlc3QuamF2YQpuZXcgZmls
ZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwLi42NTg5ZWIxCi0tLSAvZGV2L251bGwKKysrIHJl
c291cmNlcy90YXJnZXRzL21vZGVsOC9MYW1iZGFUZXN0LmphdmEKQEAgLTAsMCArMSwzNSBAQAor
LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioKKyAqIENvcHlyaWdodCAoYykgMjAxMyBJQk0gQ29ycG9y
YXRpb24uCisgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2Nv
bXBhbnlpbmcgbWF0ZXJpYWxzCisgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1z
IG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKKyAqIHdoaWNoIGFjY29tcGFuaWVz
IHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CisgKiBodHRwOi8vd3d3LmVj
bGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbAorICogCisgKiBUaGlzIGlzIGFuIGltcGxlbWVu
dGF0aW9uIG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVyIHRo
ZSBKYXZhCisgKiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFibGUg
Zm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBjb2RlIGlz
IG5vdCBjb21wYXRpYmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KKyAqIAor
ICogQ29udHJpYnV0b3JzOgorICogICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJIGFu
ZCBpbXBsZW1lbnRhdGlvbgorICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCisKK3BhY2thZ2UgdGFy
Z2V0cy5tb2RlbDg7CisKK3B1YmxpYyBjbGFzcyBMYW1iZGFUZXN0IHsKKwlwdWJsaWMgU3RyaW5n
IGZvbygpIHsKKwkJcmV0dXJuIG51bGw7CisJfQorfSAgICAgCisKK2ludGVyZmFjZSBEZWZhdWx0
SW50ZXJmYWNlIHsKKwlwdWJsaWMgZGVmYXVsdCBTdHJpbmcgZGVmYXVsdE1ldGhvZCAoKSB7CisJ
CXJldHVybiBudWxsOworCX0KKwlwdWJsaWMgc3RhdGljIFN0cmluZyBzdGF0aWNNZXRob2QgKCkg
eworCQlyZXR1cm4gbnVsbDsKKwl9Cit9ICAgICAKKworaW50ZXJmYWNlIEZ1bmN0aW9uYWxJbnRl
cmZhY2UgeworCXB1YmxpYyBhYnN0cmFjdCBTdHJpbmcgYWJzdHJhY3RNZXRob2QgKCk7Cit9Clwg
Tm8gbmV3bGluZSBhdCBlbmQgb2YgZmlsZQpkaWZmIC0tZ2l0IHJlc291cmNlcy90YXJnZXRzL21v
ZGVsOC9YLmphdmEgcmVzb3VyY2VzL3RhcmdldHMvbW9kZWw4L1guamF2YQpuZXcgZmlsZSBtb2Rl
IDEwMDY0NAppbmRleCAwMDAwMDAwLi5hNjI1YmJlCi0tLSAvZGV2L251bGwKKysrIHJlc291cmNl
cy90YXJnZXRzL21vZGVsOC9YLmphdmEKQEAgLTAsMCArMSwzNSBAQAorLyoqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioKKyAqIENvcHlyaWdodCAoYykgMjAxMyBJQk0gQ29ycG9yYXRpb24uCisgKiBBbGwg
cmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJp
YWxzCisgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNl
IFB1YmxpYyBMaWNlbnNlIHYxLjAKKyAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0
aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CisgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2Fs
L2VwbC12MTAuaHRtbAorICogCisgKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGFuIGVh
cmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVyIHRoZSBKYXZhCisgKiBDb21t
dW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFibGUgZm9yIHRlc3RpbmcgYW5k
IGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBjb2RlIGlzIG5vdCBjb21wYXRpYmxl
IHdpdGggYW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KKyAqIAorICogQ29udHJpYnV0b3Jz
OgorICogICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlv
bgorICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKiovCitwYWNrYWdlIHRhcmdldHMubW9kZWw4OworCitp
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLmFwdC50ZXN0cy5hbm5vdGF0aW9ucy5UeXBl
OworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb21waWxlci5hcHQudGVzdHMuYW5ub3RhdGlvbnMu
VHlwZSQxOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb21waWxlci5hcHQudGVzdHMuYW5ub3Rh
dGlvbnMuVHlwZS5PbmU7CisKK0BUeXBlKCJjIikKK3B1YmxpYyBjbGFzcyBYIGV4dGVuZHMgQFR5
cGUoInMiKSBPYmplY3QgaW1wbGVtZW50cyBAVHlwZSgiaTEiKSBJLCBAVHlwZSgiaTIiKSBKIHsK
KwlAVHlwZSgiZiIpIFN0cmluZyBfZmllbGQgPSBudWxsOworCUBUeXBlKCJmMSIpIFggX2ZpZWxk
MSA9IG51bGw7CisJQFR5cGUkMSBAT25lIFN0cmluZyBfZmllbGQyID0gbnVsbDsKKwlwdWJsaWMg
dm9pZCBub0Fubm90YXRpb25IZXJlKCkgeworCX0KKwlARGVwcmVjYXRlZCBAVHlwZSgibSIpIFN0
cmluZyBmb28oKSB7CisJCXJldHVybiBudWxsOworCX0KKwl2b2lkIGJhcihAVHlwZSgicDEiKSBT
dHJpbmcgcDEsIEBUeXBlKCJwMiIpIFN0cmluZyBwMikge30KK30KKworaW50ZXJmYWNlIEkge30K
K2ludGVyZmFjZSBKIHt9CmRpZmYgLS1naXQgcmVzb3VyY2VzL3RhcmdldHMvbW9kZWw4L1kuamF2
YSByZXNvdXJjZXMvdGFyZ2V0cy9tb2RlbDgvWS5qYXZhCm5ldyBmaWxlIG1vZGUgMTAwNjQ0Cmlu
ZGV4IDAwMDAwMDAuLjljN2YyYjkKLS0tIC9kZXYvbnVsbAorKysgcmVzb3VyY2VzL3RhcmdldHMv
bW9kZWw4L1kuamF2YQpAQCAtMCwwICsxLDI4IEBACisvKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgor
ICogQ29weXJpZ2h0IChjKSAyMDEzIElCTSBDb3Jwb3JhdGlvbi4KKyAqIEFsbCByaWdodHMgcmVz
ZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKKyAqIGFy
ZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExp
Y2Vuc2UgdjEuMAorICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBp
cyBhdmFpbGFibGUgYXQKKyAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5o
dG1sCisgKiAKKyAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQg
c3BlY2lmaWNhdGlvbiBkZXZlbG9wZWQgdW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0eSBQcm9j
ZXNzIChKQ1ApIGFuZCBpcyBtYWRlIGF2YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlv
biBwdXJwb3NlcworICogb25seS4gVGhlIGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkg
c3BlY2lmaWNhdGlvbiBvZiB0aGUgSkNQLgorICogCisgKiBDb250cmlidXRvcnM6CisgKiAgICAg
SUJNIENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCisgKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKi8KK3BhY2thZ2UgdGFyZ2V0cy5tb2RlbDg7CisKK2ltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuY29tcGlsZXIuYXB0LnRlc3RzLmFubm90YXRpb25zLlR5cGU7CisKK3B1Ymxp
YyBjbGFzcyBZIHsKKwlAVHlwZSgiZiIpIFN0cmluZyBAVHlwZSgiZjEiKSBbXSBAVHlwZSgiZjIi
KSBbXSBfZmllbGQyIEBUeXBlKCJmMyIpIFtdLCBfZmllbGQzIEBUeXBlKCJmNCIpIFtdW10gPSBu
dWxsOworCQorCUBEZXByZWNhdGVkIEBUeXBlKCJtIikgU3RyaW5nIEBUeXBlKCJtMSIpIFtdIGZv
bygpIEBUeXBlKCJtMiIpIFtdIEBUeXBlKCJtMyIpIFtdIHsKKwkJcmV0dXJuIG51bGw7CisJfQor
CXZvaWQgYmFyIChAVHlwZSgicDEiKSBTdHJpbmcgW10gYSBAVHlwZSgicDIiKSBbXSwgQFR5cGUo
InAzIikgaW50IEBUeXBlKCJwNCIpIFtdIGIgW10gQFR5cGUoInA1IikgW10pIHt9CisJdm9pZCBm
b28yKCkgdGhyb3dzIEBUeXBlKCJlMSIpIE51bGxQb2ludGVyRXhjZXB0aW9uLCBAVHlwZSgiZTIi
KSBBcnJheUluZGV4T3V0T2ZCb3VuZHNFeGNlcHRpb24ge30KKwl2b2lkIGJhcjIgKEBUeXBlKCJw
MSIpIFN0cmluZyBAVHlwZSgicDIiKSBbXSBAVHlwZSgicDMiKSAuLi4gYXJncykge30KK30KZGlm
ZiAtLWdpdCByZXNvdXJjZXMvdGFyZ2V0cy9tb2RlbDgvWi5qYXZhIHJlc291cmNlcy90YXJnZXRz
L21vZGVsOC9aLmphdmEKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMC4uMjQ2MWFh
ZAotLS0gL2Rldi9udWxsCisrKyByZXNvdXJjZXMvdGFyZ2V0cy9tb2RlbDgvWi5qYXZhCkBAIC0w
LDAgKzEsMjMgQEAKKy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCisgKiBDb3B5cmlnaHQgKGMpIDIw
MTMgSUJNIENvcnBvcmF0aW9uLgorICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFt
IGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscworICogYXJlIG1hZGUgYXZhaWxhYmxlIHVu
ZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCisgKiB3aGlj
aCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdAorICog
aHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKKyAqIAorICogVGhpcyBp
cyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBhbiBlYXJseS1kcmFmdCBzcGVjaWZpY2F0aW9uIGRldmVs
b3BlZCB1bmRlciB0aGUgSmF2YQorICogQ29tbXVuaXR5IFByb2Nlc3MgKEpDUCkgYW5kIGlzIG1h
ZGUgYXZhaWxhYmxlIGZvciB0ZXN0aW5nIGFuZCBldmFsdWF0aW9uIHB1cnBvc2VzCisgKiBvbmx5
LiBUaGUgY29kZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGFueSBzcGVjaWZpY2F0aW9uIG9mIHRo
ZSBKQ1AuCisgKiAKKyAqIENvbnRyaWJ1dG9yczoKKyAqICAgICBJQk0gQ29ycG9yYXRpb24gLSBp
bml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24KKyAqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwor
cGFja2FnZSB0YXJnZXRzLm1vZGVsODsKKworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb21waWxl
ci5hcHQudGVzdHMuYW5ub3RhdGlvbnMuVHlwZTsKKworcHVibGljIGNsYXNzIFogPEBUeXBlKCJ0
cDEiKSBLLCBAVHlwZSgidHAyIikgVj4geworCVo8QFR5cGUoInRhMSIpIFN0cmluZywgQFR5cGUo
InRhMiIpIE9iamVjdD4gejEgPSBudWxsOworCXB1YmxpYyA8QFR5cGUoIm1wMSIpIFQsIEBUeXBl
KCJtcDIiKSBVPiB2b2lkIGZvbygpIHt9Cit9CisKZGlmZiAtLWdpdCBzcmMvb3JnL2VjbGlwc2Uv
amR0L2NvbXBpbGVyL2FwdC90ZXN0cy9BbGxUZXN0cy5qYXZhIHNyYy9vcmcvZWNsaXBzZS9qZHQv
Y29tcGlsZXIvYXB0L3Rlc3RzL0FsbFRlc3RzLmphdmEKaW5kZXggYjNkY2ZjNy4uOGMyNjA5NiAx
MDA2NDQKLS0tIHNyYy9vcmcvZWNsaXBzZS9qZHQvY29tcGlsZXIvYXB0L3Rlc3RzL0FsbFRlc3Rz
LmphdmEKKysrIHNyYy9vcmcvZWNsaXBzZS9qZHQvY29tcGlsZXIvYXB0L3Rlc3RzL0FsbFRlc3Rz
LmphdmEKQEAgLTEsNCArMSw0IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJp
Z2h0IChjKSAyMDA2LCAyMDExIEJFQSBTeXN0ZW1zLCBJbmMuIAorICogQ29weXJpZ2h0IChjKSAy
MDA2LCAyMDEzIEJFQSBTeXN0ZW1zLCBJbmMuIGFuZCBvdGhlcnMKICAqIEFsbCByaWdodHMgcmVz
ZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFy
ZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExp
Y2Vuc2UgdjEuMApAQCAtNiw2ICs2LDExIEBACiAgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xl
Z2FsL2VwbC12MTAuaHRtbAogICoKKyAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4g
ZWFybHktZHJhZnQgc3BlY2lmaWNhdGlvbiBkZXZlbG9wZWQgdW5kZXIgdGhlIEphdmEKKyAqIENv
bW11bml0eSBQcm9jZXNzIChKQ1ApIGFuZCBpcyBtYWRlIGF2YWlsYWJsZSBmb3IgdGVzdGluZyBh
bmQgZXZhbHVhdGlvbiBwdXJwb3NlcworICogb25seS4gVGhlIGNvZGUgaXMgbm90IGNvbXBhdGli
bGUgd2l0aCBhbnkgc3BlY2lmaWNhdGlvbiBvZiB0aGUgSkNQLgorICogCiAgKiBDb250cmlidXRv
cnM6CiAgKiAgICB3aGFybGV5QGJlYS5jb20gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRp
b24KKyAqICAgIElCTSBDb3Jwb3JhdGlvbiAtIEphdmEgOCBzdXBwb3J0CiAgKiAgICAKICAqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqLwpAQCAtMzAsNCArMzUsNSBAQAogCQlzdWl0ZS5hZGRUZXN0U3Vp
dGUoTW9kZWxVdGlsVGVzdHMuY2xhc3MpOwogCQlzdWl0ZS5hZGRUZXN0U3VpdGUoTmVnYXRpdmVU
ZXN0cy5jbGFzcyk7CisJCXN1aXRlLmFkZFRlc3RTdWl0ZShKYXZhOEVsZW1lbnRzVGVzdHMuY2xh
c3MpOwogCQlyZXR1cm4gc3VpdGU7CiAJfQpkaWZmIC0tZ2l0IHNyYy9vcmcvZWNsaXBzZS9qZHQv
Y29tcGlsZXIvYXB0L3Rlc3RzL0phdmE4RWxlbWVudHNUZXN0cy5qYXZhIHNyYy9vcmcvZWNsaXBz
ZS9qZHQvY29tcGlsZXIvYXB0L3Rlc3RzL0phdmE4RWxlbWVudHNUZXN0cy5qYXZhCm5ldyBmaWxl
IG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAuLmVmYjgyZjgKLS0tIC9kZXYvbnVsbAorKysgc3Jj
L29yZy9lY2xpcHNlL2pkdC9jb21waWxlci9hcHQvdGVzdHMvSmF2YThFbGVtZW50c1Rlc3RzLmph
dmEKQEAgLTAsMCArMSwxNzEgQEAKKy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCisgKiBDb3B5cmln
aHQgKGMpIDIwMTMgSUJNIENvcnBvcmF0aW9uLgorICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhp
cyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscworICogYXJlIG1hZGUgYXZh
aWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4w
CisgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJs
ZSBhdAorICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKKyAqCisg
KiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRp
b24gZGV2ZWxvcGVkIHVuZGVyIHRoZSBKYXZhCisgKiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQKSBh
bmQgaXMgbWFkZSBhdmFpbGFibGUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gcHVycG9zZXMK
KyAqIG9ubHkuIFRoZSBjb2RlIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggYW55IHNwZWNpZmljYXRp
b24gb2YgdGhlIEpDUC4KKyAqIAorICogQ29udHJpYnV0b3JzOgorICogICAgIElCTSBDb3Jwb3Jh
dGlvbiAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgorICoqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKiovCisKK3BhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLmFwdC50ZXN0czsKKwor
aW1wb3J0IGphdmEuaW8uRmlsZTsKK2ltcG9ydCBqYXZhLmlvLklPRXhjZXB0aW9uOworaW1wb3J0
IGphdmEudXRpbC5BcnJheUxpc3Q7CitpbXBvcnQgamF2YS51dGlsLkxpc3Q7CisKK2ltcG9ydCBq
YXZheC5sYW5nLm1vZGVsLlNvdXJjZVZlcnNpb247CitpbXBvcnQgamF2YXgudG9vbHMuSmF2YUNv
bXBpbGVyOworaW1wb3J0IGphdmF4LnRvb2xzLlRvb2xQcm92aWRlcjsKKworaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci50b29sLkVjbGlwc2VDb21waWxlcjsKKworaW1w
b3J0IGp1bml0LmZyYW1ld29yay5UZXN0Q2FzZTsKKworcHVibGljIGNsYXNzIEphdmE4RWxlbWVu
dHNUZXN0cyBleHRlbmRzIFRlc3RDYXNlIHsKKwkKKwlwcml2YXRlIHN0YXRpYyBmaW5hbCBTdHJp
bmcgVFlQRV9BTk5PVEFUSU9OX1BST0MgPSAib3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLmFwdC50
ZXN0cy5wcm9jZXNzb3JzLmVsZW1lbnRzLkphdmE4RWxlbWVudFByb2Nlc3NvciI7CisKKwlAT3Zl
cnJpZGUKKwlwcm90ZWN0ZWQgdm9pZCBzZXRVcCgpIHRocm93cyBFeGNlcHRpb24geworCQlzdXBl
ci5zZXRVcCgpOworCQlCYXRjaFRlc3RVdGlscy5pbml0KCk7CisJfQorCisJcHVibGljIHZvaWQg
dGVzdFNFOFNwZWNpZmljcygpIHRocm93cyBFeGNlcHRpb24geworCQlKYXZhQ29tcGlsZXIgY29t
cGlsZXIgPSBCYXRjaFRlc3RVdGlscy5nZXRFY2xpcHNlQ29tcGlsZXIoKTsKKwkJaW50ZXJuYWxU
ZXN0KGNvbXBpbGVyLCBUWVBFX0FOTk9UQVRJT05fUFJPQywgInRlc3RTRThTcGVjaWZpY3MiKTsK
Kwl9CisJcHVibGljIHZvaWQgdGVzdFNFOFNwZWNpZmljc1dpdGhKYXZhYygpIHRocm93cyBFeGNl
cHRpb24geworCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBUb29sUHJvdmlkZXIuZ2V0U3lzdGVt
SmF2YUNvbXBpbGVyKCk7CisJCWludGVybmFsVGVzdChjb21waWxlciwgVFlQRV9BTk5PVEFUSU9O
X1BST0MsICJ0ZXN0U0U4U3BlY2lmaWNzIik7CisJfQorCXB1YmxpYyB2b2lkIHRlc3RMYW1iZGFT
cGVjaWZpY3MoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0g
QmF0Y2hUZXN0VXRpbHMuZ2V0RWNsaXBzZUNvbXBpbGVyKCk7CisJCWludGVybmFsVGVzdChjb21w
aWxlciwgVFlQRV9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0TGFtYmRhU3BlY2lmaWNzIik7CisJfQor
CXB1YmxpYyB2b2lkIHRlc3RMYW1iZGFTcGVjaWZpY3NXaXRoSmF2YWMoKSB0aHJvd3MgRXhjZXB0
aW9uIHsKKwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gVG9vbFByb3ZpZGVyLmdldFN5c3RlbUph
dmFDb21waWxlcigpOworCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIFRZUEVfQU5OT1RBVElPTl9Q
Uk9DLCAidGVzdExhbWJkYVNwZWNpZmljcyIpOworCX0KKwlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFu
bm90YXRpb25zKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCUphdmFDb21waWxlciBjb21waWxlciA9
IEJhdGNoVGVzdFV0aWxzLmdldEVjbGlwc2VDb21waWxlcigpOworCQlpbnRlcm5hbFRlc3QoY29t
cGlsZXIsIFRZUEVfQU5OT1RBVElPTl9QUk9DLCAidGVzdFR5cGVBbm5vdGF0aW9ucyIpOworCX0K
KwlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90YXRpb25zV2l0aEphdmFjKCkgdGhyb3dzIEV4Y2Vw
dGlvbiB7CisJCUphdmFDb21waWxlciBjb21waWxlciA9IFRvb2xQcm92aWRlci5nZXRTeXN0ZW1K
YXZhQ29tcGlsZXIoKTsKKwkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBUWVBFX0FOTk9UQVRJT05f
UFJPQywgInRlc3RUeXBlQW5ub3RhdGlvbnMiKTsKKwl9CisJcHVibGljIHZvaWQgdGVzdFR5cGVB
bm5vdGF0aW9uczEoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVy
ID0gQmF0Y2hUZXN0VXRpbHMuZ2V0RWNsaXBzZUNvbXBpbGVyKCk7CisJCWludGVybmFsVGVzdChj
b21waWxlciwgVFlQRV9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0VHlwZUFubm90YXRpb25zMSIpOwor
CX0KKwlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90YXRpb25zMVdpdGhKYXZhYygpIHRocm93cyBF
eGNlcHRpb24geworCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBUb29sUHJvdmlkZXIuZ2V0U3lz
dGVtSmF2YUNvbXBpbGVyKCk7CisJCWludGVybmFsVGVzdChjb21waWxlciwgVFlQRV9BTk5PVEFU
SU9OX1BST0MsICJ0ZXN0VHlwZUFubm90YXRpb25zMSIpOworCX0KKwlwdWJsaWMgdm9pZCB0ZXN0
VHlwZUFubm90YXRpb25zMigpIHRocm93cyBFeGNlcHRpb24geworCQlKYXZhQ29tcGlsZXIgY29t
cGlsZXIgPSBCYXRjaFRlc3RVdGlscy5nZXRFY2xpcHNlQ29tcGlsZXIoKTsKKwkJaW50ZXJuYWxU
ZXN0KGNvbXBpbGVyLCBUWVBFX0FOTk9UQVRJT05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlvbnMy
Iik7CisJfQorCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnMyV2l0aEphdmFjKCkgdGhy
b3dzIEV4Y2VwdGlvbiB7CisJCUphdmFDb21waWxlciBjb21waWxlciA9IFRvb2xQcm92aWRlci5n
ZXRTeXN0ZW1KYXZhQ29tcGlsZXIoKTsKKwkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBUWVBFX0FO
Tk9UQVRJT05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlvbnMyIik7CisJfQorCXB1YmxpYyB2b2lk
IHRlc3RUeXBlQW5ub3RhdGlvbnMzKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCUphdmFDb21waWxl
ciBjb21waWxlciA9IEJhdGNoVGVzdFV0aWxzLmdldEVjbGlwc2VDb21waWxlcigpOworCQlpbnRl
cm5hbFRlc3QoY29tcGlsZXIsIFRZUEVfQU5OT1RBVElPTl9QUk9DLCAidGVzdFR5cGVBbm5vdGF0
aW9uczMiKTsKKwl9CisJcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczNXaXRoSmF2YWMo
KSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gVG9vbFByb3Zp
ZGVyLmdldFN5c3RlbUphdmFDb21waWxlcigpOworCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIFRZ
UEVfQU5OT1RBVElPTl9QUk9DLCAidGVzdFR5cGVBbm5vdGF0aW9uczMiKTsKKwl9CisJcHVibGlj
IHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczQoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJSmF2YUNv
bXBpbGVyIGNvbXBpbGVyID0gQmF0Y2hUZXN0VXRpbHMuZ2V0RWNsaXBzZUNvbXBpbGVyKCk7CisJ
CWludGVybmFsVGVzdChjb21waWxlciwgVFlQRV9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0VHlwZUFu
bm90YXRpb25zNCIpOworCX0KKwlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90YXRpb25zNFdpdGhK
YXZhYygpIHRocm93cyBFeGNlcHRpb24geworCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBUb29s
UHJvdmlkZXIuZ2V0U3lzdGVtSmF2YUNvbXBpbGVyKCk7CisJCWludGVybmFsVGVzdChjb21waWxl
ciwgVFlQRV9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0VHlwZUFubm90YXRpb25zNCIpOworCX0KKwlw
dWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90YXRpb25zNSgpIHRocm93cyBFeGNlcHRpb24geworCQlK
YXZhQ29tcGlsZXIgY29tcGlsZXIgPSBCYXRjaFRlc3RVdGlscy5nZXRFY2xpcHNlQ29tcGlsZXIo
KTsKKwkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBUWVBFX0FOTk9UQVRJT05fUFJPQywgInRlc3RU
eXBlQW5ub3RhdGlvbnM1Iik7CisJfQorCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnM1
V2l0aEphdmFjKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCUphdmFDb21waWxlciBjb21waWxlciA9
IFRvb2xQcm92aWRlci5nZXRTeXN0ZW1KYXZhQ29tcGlsZXIoKTsKKwkJaW50ZXJuYWxUZXN0KGNv
bXBpbGVyLCBUWVBFX0FOTk9UQVRJT05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlvbnM1Iik7CisJ
fQorCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnM2KCkgdGhyb3dzIEV4Y2VwdGlvbiB7
CisJCUphdmFDb21waWxlciBjb21waWxlciA9IEJhdGNoVGVzdFV0aWxzLmdldEVjbGlwc2VDb21w
aWxlcigpOworCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIFRZUEVfQU5OT1RBVElPTl9QUk9DLCAi
dGVzdFR5cGVBbm5vdGF0aW9uczYiKTsKKwl9CisJcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0
aW9uczZXaXRoSmF2YWMoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJSmF2YUNvbXBpbGVyIGNvbXBp
bGVyID0gVG9vbFByb3ZpZGVyLmdldFN5c3RlbUphdmFDb21waWxlcigpOworCQlpbnRlcm5hbFRl
c3QoY29tcGlsZXIsIFRZUEVfQU5OT1RBVElPTl9QUk9DLCAidGVzdFR5cGVBbm5vdGF0aW9uczYi
KTsKKwl9CisJcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczcoKSB0aHJvd3MgRXhjZXB0
aW9uIHsKKwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gQmF0Y2hUZXN0VXRpbHMuZ2V0RWNsaXBz
ZUNvbXBpbGVyKCk7CisJCWludGVybmFsVGVzdChjb21waWxlciwgVFlQRV9BTk5PVEFUSU9OX1BS
T0MsICJ0ZXN0VHlwZUFubm90YXRpb25zNyIpOworCX0KKwlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFu
bm90YXRpb25zN1dpdGhKYXZhYygpIHRocm93cyBFeGNlcHRpb24geworCQlKYXZhQ29tcGlsZXIg
Y29tcGlsZXIgPSBUb29sUHJvdmlkZXIuZ2V0U3lzdGVtSmF2YUNvbXBpbGVyKCk7CisJCWludGVy
bmFsVGVzdChjb21waWxlciwgVFlQRV9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0VHlwZUFubm90YXRp
b25zNyIpOworCX0KKwlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90YXRpb25zOCgpIHRocm93cyBF
eGNlcHRpb24geworCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBCYXRjaFRlc3RVdGlscy5nZXRF
Y2xpcHNlQ29tcGlsZXIoKTsKKwkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBUWVBFX0FOTk9UQVRJ
T05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlvbnM4Iik7CisJfQorCXB1YmxpYyB2b2lkIHRlc3RU
eXBlQW5ub3RhdGlvbnM4V2l0aEphdmFjKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCUphdmFDb21w
aWxlciBjb21waWxlciA9IFRvb2xQcm92aWRlci5nZXRTeXN0ZW1KYXZhQ29tcGlsZXIoKTsKKwkJ
aW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBUWVBFX0FOTk9UQVRJT05fUFJPQywgInRlc3RUeXBlQW5u
b3RhdGlvbnM4Iik7CisJfQorCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnM5KCkgdGhy
b3dzIEV4Y2VwdGlvbiB7CisJCUphdmFDb21waWxlciBjb21waWxlciA9IEJhdGNoVGVzdFV0aWxz
LmdldEVjbGlwc2VDb21waWxlcigpOworCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIFRZUEVfQU5O
T1RBVElPTl9QUk9DLCAidGVzdFR5cGVBbm5vdGF0aW9uczkiKTsKKwl9CisJcHVibGljIHZvaWQg
dGVzdFR5cGVBbm5vdGF0aW9uczlXaXRoSmF2YWMoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJSmF2
YUNvbXBpbGVyIGNvbXBpbGVyID0gVG9vbFByb3ZpZGVyLmdldFN5c3RlbUphdmFDb21waWxlcigp
OworCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIFRZUEVfQU5OT1RBVElPTl9QUk9DLCAidGVzdFR5
cGVBbm5vdGF0aW9uczkiKTsKKwl9CisKKwlwcml2YXRlIHZvaWQgaW50ZXJuYWxUZXN0KEphdmFD
b21waWxlciBjb21waWxlciwgU3RyaW5nIHByb2Nlc3NvciwgU3RyaW5nIHRlc3RNZXRob2QpIHRo
cm93cyBJT0V4Y2VwdGlvbiB7CisJCWlmICghY2FuUnVuSmF2YTgoKSkgeworCQkJcmV0dXJuOwor
CQl9CisJCVN5c3RlbS5jbGVhclByb3BlcnR5KHByb2Nlc3Nvcik7CisJCUZpbGUgdGFyZ2V0Rm9s
ZGVyID0gVGVzdFV0aWxzLmNvbmNhdFBhdGgoQmF0Y2hUZXN0VXRpbHMuZ2V0U3JjRm9sZGVyTmFt
ZSgpLCAidGFyZ2V0cyIsICJtb2RlbDgiKTsKKwkJQmF0Y2hUZXN0VXRpbHMuY29weVJlc291cmNl
cygidGFyZ2V0cy9tb2RlbDgiLCB0YXJnZXRGb2xkZXIpOworCisJCUxpc3Q8U3RyaW5nPiBvcHRp
b25zID0gbmV3IEFycmF5TGlzdDxTdHJpbmc+KCk7CisJCW9wdGlvbnMuYWRkKCItQSIgKyBwcm9j
ZXNzb3IpOworCQlvcHRpb25zLmFkZCgiLUEiICsgdGVzdE1ldGhvZCk7CisJCS8vIEphdmFjIDEu
OCBkb2Vzbid0ICh5ZXQ/KSBzdXBwb3J0IHRoZSAtMS44IG9wdGlvbgorCQlpZiAoY29tcGlsZXIg
aW5zdGFuY2VvZiBFY2xpcHNlQ29tcGlsZXIpIHsKKwkJCW9wdGlvbnMuYWRkKCItMS44Iik7CisJ
CX0KKwkJQmF0Y2hUZXN0VXRpbHMuY29tcGlsZVRyZWUoY29tcGlsZXIsIG9wdGlvbnMsIHRhcmdl
dEZvbGRlcik7CisKKwkJLy8gSWYgaXQgc3VjY2VlZGVkLCB0aGUgcHJvY2Vzc29yIHdpbGwgaGF2
ZSBzZXQgdGhpcyBwcm9wZXJ0eSB0byAic3VjY2VlZGVkIjsKKwkJLy8gaWYgbm90LCBpdCB3aWxs
IHNldCBpdCB0byBhbiBlcnJvciB2YWx1ZS4KKwkJYXNzZXJ0RXF1YWxzKCJzdWNjZWVkZWQiLCBT
eXN0ZW0uZ2V0UHJvcGVydHkocHJvY2Vzc29yKSk7CisJfQorCXB1YmxpYyBib29sZWFuIGNhblJ1
bkphdmE4KCkgeworCQl0cnkgeworCQkJU291cmNlVmVyc2lvbi52YWx1ZU9mKCJSRUxFQVNFXzgi
KTsKKwkJfSBjYXRjaChJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24gaWFlKSB7CisJCQlyZXR1cm4g
ZmFsc2U7CisJCX0KKwkJcmV0dXJuIHRydWU7CisJfQorCUBPdmVycmlkZQorCXByb3RlY3RlZCB2
b2lkIHRlYXJEb3duKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCXN1cGVyLnRlYXJEb3duKCk7CisJ
fQorfQojUCBvcmcuZWNsaXBzZS5qZHQuY29tcGlsZXIuYXB0CmRpZmYgLS1naXQgc3JjL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQvZGlzcGF0Y2gvQW5ub3RhdGlvbkRpc2Nv
dmVyeVZpc2l0b3IuamF2YSBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fw
dC9kaXNwYXRjaC9Bbm5vdGF0aW9uRGlzY292ZXJ5VmlzaXRvci5qYXZhCmluZGV4IDQ1MTY4Zjcu
LjExMGU0ZmQgMTAwNjQ0Ci0tLSBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FwdC9kaXNwYXRjaC9Bbm5vdGF0aW9uRGlzY292ZXJ5VmlzaXRvci5qYXZhCisrKyBzcmMvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9kaXNwYXRjaC9Bbm5vdGF0aW9uRGlz
Y292ZXJ5VmlzaXRvci5qYXZhCkBAIC0xNzgsNSArMTc4LDUgQEAKIAkJCUFubm90YXRpb25bXSBh
bm5vdGF0aW9ucywKIAkJCUJpbmRpbmcgY3VycmVudEJpbmRpbmcpIHsKLQkJQVNUTm9kZS5yZXNv
bHZlQW5ub3RhdGlvbnMoc2NvcGUsIGFubm90YXRpb25zLCBjdXJyZW50QmluZGluZyk7CisJCUFT
VE5vZGUucmVzb2x2ZUFubm90YXRpb25zKHNjb3BlLCBhbm5vdGF0aW9ucywgY3VycmVudEJpbmRp
bmcsIHRydWUpOwogCQkKIAkJZm9yIChBbm5vdGF0aW9uIGFubm90YXRpb24gOiBhbm5vdGF0aW9u
cykgewpkaWZmIC0tZ2l0IHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0
L21vZGVsL0FycmF5VHlwZUltcGwuamF2YSBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FwdC9tb2RlbC9BcnJheVR5cGVJbXBsLmphdmEKaW5kZXggMGE0Y2Y2OS4uMjE5Njk0
NSAxMDA2NDQKLS0tIHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21v
ZGVsL0FycmF5VHlwZUltcGwuamF2YQorKysgc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hcHQvbW9kZWwvQXJyYXlUeXBlSW1wbC5qYXZhCkBAIC0xLDQgKzEsNCBAQAogLyoq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwNywgMjAxMSBCRUEgU3lz
dGVtcywgSW5jLiAKKyAqIENvcHlyaWdodCAoYykgMjAwNywgMjAxMyBCRUEgU3lzdGVtcywgSW5j
LiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0
aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRo
ZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCkBAIC02LDcgKzYsMTIg
QEAKICAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCiAgKgorICog
VGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBhbiBlYXJseS1kcmFmdCBzcGVjaWZpY2F0aW9u
IGRldmVsb3BlZCB1bmRlciB0aGUgSmF2YQorICogQ29tbXVuaXR5IFByb2Nlc3MgKEpDUCkgYW5k
IGlzIG1hZGUgYXZhaWxhYmxlIGZvciB0ZXN0aW5nIGFuZCBldmFsdWF0aW9uIHB1cnBvc2VzCisg
KiBvbmx5LiBUaGUgY29kZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGFueSBzcGVjaWZpY2F0aW9u
IG9mIHRoZSBKQ1AuCisgKgogICogQ29udHJpYnV0b3JzOgogICogICAgd2hhcmxleUBiZWEuY29t
IC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCiAgKiAgICBJQk0gQ29ycG9yYXRpb24g
LSBmaXggZm9yIDM0MjU5OAorICogICAgSUJNIENvcnBvcmF0aW9uIC0gSmF2YSA4IHN1cHBvcnQK
ICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqLwogCkBAIC0xOSw1ICsyNCw3IEBACiAKIGltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXB0LmRpc3BhdGNoLkJhc2VQcm9jZXNz
aW5nRW52SW1wbDsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9v
a3VwLkFubm90YXRpb25CaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b21waWxlci5sb29rdXAuQXJyYXlCaW5kaW5nOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRl
cm5hbC5jb21waWxlci5sb29rdXAuQmluZGluZzsKIAogLyoqCkBAIC00NSw1ICs1MiwxOSBAQAog
CQlyZXR1cm4gdi52aXNpdEFycmF5KHRoaXMsIHApOwogCX0KLQkKKworCXByb3RlY3RlZCBBbm5v
dGF0aW9uQmluZGluZ1tdIGdldEFubm90YXRpb25CaW5kaW5ncygpIHsKKwkJb3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5Bbm5vdGF0aW9uQmluZGluZ1tdIG9sZGllcyA9
ICgoQXJyYXlCaW5kaW5nKV9iaW5kaW5nKS5nZXRUeXBlQW5ub3RhdGlvbnMoKTsKKwkJb3JnLmVj
bGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5Bbm5vdGF0aW9uQmluZGluZ1tdIG5l
d2JpZXMgPSBCaW5kaW5nLk5PX0FOTk9UQVRJT05TOworCQkvLyBTdHJpcCBvdXQgdGhlIGFubm90
YXRpb25zIG9uIHN1YiBhcnJheXMKKwkJZm9yIChpbnQgaSA9IDAsIGxlbmd0aCA9IG9sZGllcyA9
PSBudWxsID8gMCA6IG9sZGllcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgeworCQkJaWYgKG9s
ZGllc1tpXSA9PSBudWxsKSB7CisJCQkJU3lzdGVtLmFycmF5Y29weShvbGRpZXMsIDAsIG5ld2Jp
ZXMgPSAKKwkJCQkJCW5ldyBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3Vw
LkFubm90YXRpb25CaW5kaW5nW2ldLCAwLCBpKTsKKwkJCQlyZXR1cm4gbmV3YmllczsKKwkJCX0K
KwkJfQorCQlyZXR1cm4gbmV3YmllczsKKwl9CisKIAkvKiAobm9uLUphdmFkb2MpCiAJICogQHNl
ZSBqYXZheC5sYW5nLm1vZGVsLnR5cGUuVHlwZU1pcnJvciNnZXRLaW5kKCkKZGlmZiAtLWdpdCBz
cmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9FbGVtZW50SW1w
bC5qYXZhIHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL0Vs
ZW1lbnRJbXBsLmphdmEKaW5kZXggOTk4ZTNkNi4uNDQxNDZhNCAxMDA2NDQKLS0tIHNyYy9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL0VsZW1lbnRJbXBsLmphdmEK
KysrIHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL0VsZW1l
bnRJbXBsLmphdmEKQEAgLTEsNCArMSw0IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICog
Q29weXJpZ2h0IChjKSAyMDA1LCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICog
Q29weXJpZ2h0IChjKSAyMDA1LCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICog
QWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1h
dGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNs
aXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCkBAIC02LDQgKzYsOCBAQAogICogaHR0cDovL3d3dy5l
Y2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKICAqCisgKiBUaGlzIGlzIGFuIGltcGxlbWVu
dGF0aW9uIG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVyIHRo
ZSBKYXZhCisgKiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFibGUg
Zm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBjb2RlIGlz
IG5vdCBjb21wYXRpYmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KKyAqIAog
ICogQ29udHJpYnV0b3JzOgogICogICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJIGFu
ZCBpbXBsZW1lbnRhdGlvbgpAQCAtMTIsNSArMTYsNCBAQAogCiBpbXBvcnQgamF2YS5sYW5nLmFu
bm90YXRpb24uQW5ub3RhdGlvbjsKLWltcG9ydCBqYXZhLmxhbmcucmVmbGVjdC5Qcm94eTsKIGlt
cG9ydCBqYXZhLnV0aWwuQ29sbGVjdGlvbnM7CiBpbXBvcnQgamF2YS51dGlsLkxpc3Q7CkBAIC0y
NSw5ICsyOCw3IEBACiBpbXBvcnQgamF2YXgubGFuZy5tb2RlbC51dGlsLkVsZW1lbnRzOwogCi1p
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuQ2hhck9wZXJhdGlvbjsKIGltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXB0LmRpc3BhdGNoLkJhc2VQcm9j
ZXNzaW5nRW52SW1wbDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
bG9va3VwLkFubm90YXRpb25CaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5h
bC5jb21waWxlci5sb29rdXAuQmluZGluZzsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJu
YWwuY29tcGlsZXIubG9va3VwLlJlZmVyZW5jZUJpbmRpbmc7CiAKIC8qKgpAQCAtNTEsMzUgKzUy
LDcgQEAKIAl9CiAKLQlAU3VwcHJlc3NXYXJuaW5ncygidW5jaGVja2VkIikgLy8gZm9yIGNhc3Qg
b2YgbmV3UHJveHlJbnN0YW5jZSgpIHRvIEEKIAlAT3ZlcnJpZGUKIAlwdWJsaWMgPEEgZXh0ZW5k
cyBBbm5vdGF0aW9uPiBBIGdldEFubm90YXRpb24oQ2xhc3M8QT4gYW5ub3RhdGlvbkNsYXNzKSB7
Ci0JCUFubm90YXRpb25CaW5kaW5nW10gYW5ub0luc3RhbmNlcyA9IGdldEFubm90YXRpb25CaW5k
aW5ncygpOwotCQlpZiggYW5ub0luc3RhbmNlcyA9PSBudWxsIHx8IGFubm9JbnN0YW5jZXMubGVu
Z3RoID09IDAgfHwgYW5ub3RhdGlvbkNsYXNzID09IG51bGwgKSAKLQkJCXJldHVybiBudWxsOwot
Ci0JCVN0cmluZyBhbm5vVHlwZU5hbWUgPSBhbm5vdGF0aW9uQ2xhc3MuZ2V0TmFtZSgpOwotCQlp
ZiggYW5ub1R5cGVOYW1lID09IG51bGwgKSByZXR1cm4gbnVsbDsKLQkJYW5ub1R5cGVOYW1lID0g
YW5ub1R5cGVOYW1lLnJlcGxhY2UoJyQnLCAnLicpOwotCQlmb3IoIEFubm90YXRpb25CaW5kaW5n
IGFubm9JbnN0YW5jZSA6IGFubm9JbnN0YW5jZXMpIHsKLQkJCWlmIChhbm5vSW5zdGFuY2UgPT0g
bnVsbCkKLQkJCQljb250aW51ZTsKLQkJCVJlZmVyZW5jZUJpbmRpbmcgYmluZGluZyA9IGFubm9J
bnN0YW5jZS5nZXRBbm5vdGF0aW9uVHlwZSgpOwotCQkJaWYgKCBiaW5kaW5nICE9IG51bGwgJiYg
YmluZGluZy5pc0Fubm90YXRpb25UeXBlKCkgKSB7Ci0JCQkJY2hhcltdIHFOYW1lOwotCQkJCWlm
IChiaW5kaW5nLmlzTWVtYmVyVHlwZSgpKSB7Ci0JCQkJCXFOYW1lID0gQ2hhck9wZXJhdGlvbi5j
b25jYXRXaXRoKGJpbmRpbmcuZW5jbG9zaW5nVHlwZSgpLmNvbXBvdW5kTmFtZSwgYmluZGluZy5z
b3VyY2VOYW1lLCAnLicpOwotCQkJCQlDaGFyT3BlcmF0aW9uLnJlcGxhY2UocU5hbWUsICckJywg
Jy4nKTsKLQkJCQl9IGVsc2UgewotCQkJCQlxTmFtZSA9IENoYXJPcGVyYXRpb24uY29uY2F0V2l0
aChiaW5kaW5nLmNvbXBvdW5kTmFtZSwgJy4nKTsKLQkJCQl9Ci0JCQkJaWYoIGFubm9UeXBlTmFt
ZS5lcXVhbHMobmV3IFN0cmluZyhxTmFtZSkpICl7Ci0JCQkJCUFubm90YXRpb25NaXJyb3JJbXBs
IGFubm9NaXJyb3IgPQotCQkJCQkJKEFubm90YXRpb25NaXJyb3JJbXBsKV9lbnYuZ2V0RmFjdG9y
eSgpLm5ld0Fubm90YXRpb25NaXJyb3IoYW5ub0luc3RhbmNlKTsKLQkJCQkJcmV0dXJuIChBKVBy
b3h5Lm5ld1Byb3h5SW5zdGFuY2UoYW5ub3RhdGlvbkNsYXNzLmdldENsYXNzTG9hZGVyKCksCi0J
CQkJCQkJbmV3IENsYXNzW117IGFubm90YXRpb25DbGFzcyB9LCBhbm5vTWlycm9yICk7Ci0JCQkJ
fQotCQkJfQotCQl9Ci0JCXJldHVybiBudWxsOyAKKwkJcmV0dXJuIF9lbnYuZ2V0RmFjdG9yeSgp
LmdldEFubm90YXRpb24oZ2V0QW5ub3RhdGlvbkJpbmRpbmdzKCksIGFubm90YXRpb25DbGFzcyk7
CiAJfQogCQpAQCAtOTIsNCArNjUsOCBAQAogCXB1YmxpYyBMaXN0PD8gZXh0ZW5kcyBBbm5vdGF0
aW9uTWlycm9yPiBnZXRBbm5vdGF0aW9uTWlycm9ycygpIHsKIAkJcmV0dXJuIF9lbnYuZ2V0RmFj
dG9yeSgpLmdldEFubm90YXRpb25NaXJyb3JzKGdldEFubm90YXRpb25CaW5kaW5ncygpKTsKKwl9
CisKKwlwdWJsaWMgPEEgZXh0ZW5kcyBBbm5vdGF0aW9uPiBBW10gZ2V0QW5ub3RhdGlvbnNCeVR5
cGUoQ2xhc3M8QT4gYW5ub3RhdGlvblR5cGUpIHsKKwkJcmV0dXJuIF9lbnYuZ2V0RmFjdG9yeSgp
LmdldEFubm90YXRpb25zQnlUeXBlKGdldEFubm90YXRpb25CaW5kaW5ncygpLCBhbm5vdGF0aW9u
VHlwZSk7CQogCX0KIApAQCAtMTMyLDUgKzEwOSwxMiBAQAogCUBPdmVycmlkZQogCXB1YmxpYyBT
dHJpbmcgdG9TdHJpbmcoKSB7Ci0JCXJldHVybiBfYmluZGluZy50b1N0cmluZygpOworCQlTdHJp
bmdCdWZmZXIgYnVmID0gbmV3IFN0cmluZ0J1ZmZlcigpOworCQlMaXN0PD8gZXh0ZW5kcyBBbm5v
dGF0aW9uTWlycm9yPiBhbm5vdHMgPSBnZXRBbm5vdGF0aW9uTWlycm9ycygpOworCQlmb3IgKEFu
bm90YXRpb25NaXJyb3IgYW5ub3RhdGlvbk1pcnJvciA6IGFubm90cykgeworCQkJYnVmLmFwcGVu
ZChhbm5vdGF0aW9uTWlycm9yLnRvU3RyaW5nKCkpOworCQkJYnVmLmFwcGVuZCgnICcpOworCQl9
CisJCWJ1Zi5hcHBlbmQoX2JpbmRpbmcudG9TdHJpbmcoKSk7CisJCXJldHVybiBidWYudG9TdHJp
bmcoKTsKIAl9CiAKZGlmZiAtLWdpdCBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FwdC9tb2RlbC9FbGVtZW50c0ltcGwuamF2YSBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9FbGVtZW50c0ltcGwuamF2YQppbmRleCA4ZTc2NjRhLi4z
MmJmYzJmIDEwMDY0NAotLS0gc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
cHQvbW9kZWwvRWxlbWVudHNJbXBsLmphdmEKKysrIHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXB0L21vZGVsL0VsZW1lbnRzSW1wbC5qYXZhCkBAIC0xLDQgKzEsNCBAQAog
LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwNiwgMjAxMiBCRUEg
U3lzdGVtcywgSW5jLiBhbmQgb3RoZXJzCisgKiBDb3B5cmlnaHQgKGMpIDIwMDYsIDIwMTMgQkVB
IFN5c3RlbXMsIEluYy4gYW5kIG90aGVycwogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBw
cm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxh
YmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCkBA
IC02LDggKzYsMTMgQEAKICAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5o
dG1sCiAgKgorICogVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBhbiBlYXJseS1kcmFmdCBz
cGVjaWZpY2F0aW9uIGRldmVsb3BlZCB1bmRlciB0aGUgSmF2YQorICogQ29tbXVuaXR5IFByb2Nl
c3MgKEpDUCkgYW5kIGlzIG1hZGUgYXZhaWxhYmxlIGZvciB0ZXN0aW5nIGFuZCBldmFsdWF0aW9u
IHB1cnBvc2VzCisgKiBvbmx5LiBUaGUgY29kZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGFueSBz
cGVjaWZpY2F0aW9uIG9mIHRoZSBKQ1AuCisgKiAKICAqIENvbnRyaWJ1dG9yczoKICAqICAgIHdo
YXJsZXlAYmVhLmNvbSAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgogICogICAgSUJN
IENvcnBvcmF0aW9uIC0gRml4IGZvciBidWcgMzQxNDk0CiAgKiAgICBJQk0gQ29ycG9yYXRpb24g
LSBGaXggZm9yIGJ1ZyAzMjg1NzUKKyAqICAgIElCTSBDb3Jwb3JhdGlvbiAtIEphdmEgOCBzdXBw
b3J0CiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KIApAQCAtNzAzLDMgKzcwOCwxMyBAQAogCX0K
IAorCXB1YmxpYyBib29sZWFuIGlzRnVuY3Rpb25hbEludGVyZmFjZShUeXBlRWxlbWVudCB0eXBl
KSB7CisJCWlmICh0eXBlICE9IG51bGwgJiYgdHlwZS5nZXRLaW5kKCkgPT0gRWxlbWVudEtpbmQu
SU5URVJGQUNFKSB7CisJCQlSZWZlcmVuY2VCaW5kaW5nIGJpbmRpbmcgPSAoUmVmZXJlbmNlQmlu
ZGluZykoKFR5cGVFbGVtZW50SW1wbCkgdHlwZSkuX2JpbmRpbmc7CisJCQlpZiAoYmluZGluZyBp
bnN0YW5jZW9mIFNvdXJjZVR5cGVCaW5kaW5nKSB7CisJCQkJcmV0dXJuIGJpbmRpbmcuaXNGdW5j
dGlvbmFsSW50ZXJmYWNlKCgoU291cmNlVHlwZUJpbmRpbmcpIGJpbmRpbmcpLnNjb3BlKTsKKwkJ
CX0KKwkJfQorCQlyZXR1cm4gZmFsc2U7CisJfQorCiB9CmRpZmYgLS1naXQgc3JjL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQvbW9kZWwvRXJyb3JUeXBlRWxlbWVudC5qYXZh
IHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL0Vycm9yVHlw
ZUVsZW1lbnQuamF2YQppbmRleCAzZWNjYmY5Li5iNmJlMzhlIDEwMDY0NAotLS0gc3JjL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQvbW9kZWwvRXJyb3JUeXBlRWxlbWVudC5q
YXZhCisrKyBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9F
cnJvclR5cGVFbGVtZW50LmphdmEKQEAgLTEsOCArMSwxMiBAQAogLyoqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwNywgMjAxMSBJQk0gQ29ycG9yYXRpb24gYW5kIG90
aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwNywgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5kIG90
aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29t
cGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMg
b2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMg
dGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKICAqIGh0dHA6Ly93d3cuZWNs
aXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCisgKgorICogVGhpcyBpcyBhbiBpbXBsZW1lbnRh
dGlvbiBvZiBhbiBlYXJseS1kcmFmdCBzcGVjaWZpY2F0aW9uIGRldmVsb3BlZCB1bmRlciB0aGUg
SmF2YQorICogQ29tbXVuaXR5IFByb2Nlc3MgKEpDUCkgYW5kIGlzIG1hZGUgYXZhaWxhYmxlIGZv
ciB0ZXN0aW5nIGFuZCBldmFsdWF0aW9uIHB1cnBvc2VzCisgKiBvbmx5LiBUaGUgY29kZSBpcyBu
b3QgY29tcGF0aWJsZSB3aXRoIGFueSBzcGVjaWZpY2F0aW9uIG9mIHRoZSBKQ1AuCiAgKgogICog
Q29udHJpYnV0b3JzOgpAQCAtMTEwLDQgKzExNCwxMCBAQAogCQlyZXR1cm4gQ29sbGVjdGlvbnMu
ZW1wdHlMaXN0KCk7CiAJfQorCQorCUBTdXBwcmVzc1dhcm5pbmdzKCJ1bmNoZWNrZWQiKQorCXB1
YmxpYyA8QSBleHRlbmRzIEFubm90YXRpb24+IEFbXSBnZXRBbm5vdGF0aW9uc0J5VHlwZShDbGFz
czxBPiBhbm5vdGF0aW9uVHlwZSkgeworCQlyZXR1cm4gKEFbXSkgRmFjdG9yeS5FTVBUWV9BTk5P
VEFUSU9OUzsKKwl9CisKIAogCS8qIChub24tSmF2YWRvYykKZGlmZiAtLWdpdCBzcmMvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9FcnJvclR5cGVJbXBsLmphdmEg
c3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQvbW9kZWwvRXJyb3JUeXBl
SW1wbC5qYXZhCmluZGV4IDZiODI2YjcuLmY3ZDczNjcgMTAwNjQ0Ci0tLSBzcmMvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9FcnJvclR5cGVJbXBsLmphdmEKKysr
IHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL0Vycm9yVHlw
ZUltcGwuamF2YQpAQCAtMSw4ICsxLDEyIEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICog
Q29weXJpZ2h0IChjKSAyMDA3LCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICog
Q29weXJpZ2h0IChjKSAyMDA3LCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICog
QWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1h
dGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNs
aXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3Ry
aWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdAogICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9s
ZWdhbC9lcGwtdjEwLmh0bWwKKyAqCisgKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGFu
IGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVyIHRoZSBKYXZhCisgKiBD
b21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFibGUgZm9yIHRlc3Rpbmcg
YW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBjb2RlIGlzIG5vdCBjb21wYXRp
YmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KICAqCiAgKiBDb250cmlidXRv
cnM6CkBAIC0xMSw4ICsxNSwxMCBAQAogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwu
Y29tcGlsZXIuYXB0Lm1vZGVsOwogCitpbXBvcnQgamF2YS5sYW5nLmFubm90YXRpb24uQW5ub3Rh
dGlvbjsKIGltcG9ydCBqYXZhLnV0aWwuQXJyYXlMaXN0OwogaW1wb3J0IGphdmEudXRpbC5Db2xs
ZWN0aW9uczsKIGltcG9ydCBqYXZhLnV0aWwuTGlzdDsKIAoraW1wb3J0IGphdmF4LmxhbmcubW9k
ZWwuZWxlbWVudC5Bbm5vdGF0aW9uTWlycm9yOwogaW1wb3J0IGphdmF4LmxhbmcubW9kZWwuZWxl
bWVudC5FbGVtZW50OwogaW1wb3J0IGphdmF4LmxhbmcubW9kZWwudHlwZS5FcnJvclR5cGU7CkBA
IC04Niw0ICs5MiwxNyBAQAogCX0KIAorCXB1YmxpYyBMaXN0PD8gZXh0ZW5kcyBBbm5vdGF0aW9u
TWlycm9yPiBnZXRBbm5vdGF0aW9uTWlycm9ycygpIHsKKwkJcmV0dXJuIEZhY3RvcnkuRU1QVFlf
QU5OT1RBVElPTl9NSVJST1JTOworCX0KKworCXB1YmxpYyA8QSBleHRlbmRzIEFubm90YXRpb24+
IEEgZ2V0QW5ub3RhdGlvbihDbGFzczxBPiBhbm5vdGF0aW9uVHlwZSkgeworCQlyZXR1cm4gbnVs
bDsKKwl9CisKKwlAU3VwcHJlc3NXYXJuaW5ncygidW5jaGVja2VkIikKKwlwdWJsaWMgPEEgZXh0
ZW5kcyBBbm5vdGF0aW9uPiBBW10gZ2V0QW5ub3RhdGlvbnNCeVR5cGUoQ2xhc3M8QT4gYW5ub3Rh
dGlvblR5cGUpIHsKKwkJcmV0dXJuIChBW10pIEZhY3RvcnkuRU1QVFlfQU5OT1RBVElPTlM7CisJ
fQorCiAJLyogKG5vbi1KYXZhZG9jKQogCSAqIEBzZWUgamF2YXgubGFuZy5tb2RlbC50eXBlLlR5
cGVNaXJyb3IjZ2V0S2luZCgpCmRpZmYgLS1naXQgc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hcHQvbW9kZWwvRXhlY3V0YWJsZUVsZW1lbnRJbXBsLmphdmEgc3JjL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQvbW9kZWwvRXhlY3V0YWJsZUVsZW1lbnRJ
bXBsLmphdmEKaW5kZXggMzNiODI0MS4uYjU0MzEyMCAxMDA2NDQKLS0tIHNyYy9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL0V4ZWN1dGFibGVFbGVtZW50SW1wbC5q
YXZhCisrKyBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9F
eGVjdXRhYmxlRWxlbWVudEltcGwuamF2YQpAQCAtMSw4ICsxLDEyIEBACiAvKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDA1LCAyMDA5IElCTSBDb3Jwb3JhdGlvbiBh
bmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDA1LCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBh
bmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUg
YWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0
ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBh
bmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdAogICogaHR0cDovL3d3
dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKKyAqCisgKiBUaGlzIGlzIGFuIGltcGxl
bWVudGF0aW9uIG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVy
IHRoZSBKYXZhCisgKiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFi
bGUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBjb2Rl
IGlzIG5vdCBjb21wYXRpYmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KICAq
CiAgKiBDb250cmlidXRvcnM6CkBAIC0zMzUsMyArMzM5LDE3IEBACiAJfQogCisJcHVibGljIFR5
cGVNaXJyb3IgZ2V0UmVjZWl2ZXJUeXBlKCkgeworCQlNZXRob2RCaW5kaW5nIGJpbmRpbmcgPSAo
TWV0aG9kQmluZGluZylfYmluZGluZzsKKwkJLy8gV2hhdCBpcyB0aGUgbGlrZWxpaG9vZCBvZiB0
aGlzIGJlaW5nIG51bGw/CisJCWlmIChiaW5kaW5nLmRlY2xhcmluZ0NsYXNzICE9IG51bGwpIHsK
KwkJCXJldHVybiBfZW52LmdldEZhY3RvcnkoKS5uZXdUeXBlTWlycm9yKGJpbmRpbmcuZGVjbGFy
aW5nQ2xhc3MpOworCQl9CisJCXJldHVybiBOb1R5cGVJbXBsLk5PX1RZUEVfTk9ORTsKKwl9CisK
KwlwdWJsaWMgYm9vbGVhbiBpc0RlZmF1bHQoKSB7CisJCU1ldGhvZEJpbmRpbmcgYmluZGluZyA9
IChNZXRob2RCaW5kaW5nKV9iaW5kaW5nOworCQlyZXR1cm4gYmluZGluZy5pc0RlZmF1bHRNZXRo
b2QoKTsKKwl9CisKIH0KZGlmZiAtLWdpdCBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FwdC9tb2RlbC9FeGVjdXRhYmxlVHlwZUltcGwuamF2YSBzcmMvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9FeGVjdXRhYmxlVHlwZUltcGwuamF2YQpp
bmRleCAzNjgxYWJlLi40NjI0YTZiIDEwMDY0NAotLS0gc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hcHQvbW9kZWwvRXhlY3V0YWJsZVR5cGVJbXBsLmphdmEKKysrIHNyYy9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL0V4ZWN1dGFibGVUeXBl
SW1wbC5qYXZhCkBAIC0xLDggKzEsMTIgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBD
b3B5cmlnaHQgKGMpIDIwMDYsIDIwMTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBD
b3B5cmlnaHQgKGMpIDIwMDYsIDIwMTMgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBB
bGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0
ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xp
cHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJp
YnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CiAgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xl
Z2FsL2VwbC12MTAuaHRtbAorICoKKyAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4g
ZWFybHktZHJhZnQgc3BlY2lmaWNhdGlvbiBkZXZlbG9wZWQgdW5kZXIgdGhlIEphdmEKKyAqIENv
bW11bml0eSBQcm9jZXNzIChKQ1ApIGFuZCBpcyBtYWRlIGF2YWlsYWJsZSBmb3IgdGVzdGluZyBh
bmQgZXZhbHVhdGlvbiBwdXJwb3NlcworICogb25seS4gVGhlIGNvZGUgaXMgbm90IGNvbXBhdGli
bGUgd2l0aCBhbnkgc3BlY2lmaWNhdGlvbiBvZiB0aGUgSkNQLgogICoKICAqIENvbnRyaWJ1dG9y
czoKQEAgLTEyMywzICsxMjcsMTEgQEAKIAkJcmV0dXJuIFR5cGVLaW5kLkVYRUNVVEFCTEU7CiAJ
fQorCisJcHVibGljIFR5cGVNaXJyb3IgZ2V0UmVjZWl2ZXJUeXBlKCkgeworCQlNZXRob2RCaW5k
aW5nIGJpbmRpbmcgPSAoTWV0aG9kQmluZGluZylfYmluZGluZzsKKwkJaWYgKGJpbmRpbmcuZGVj
bGFyaW5nQ2xhc3MgIT0gbnVsbCkgeworCQkJcmV0dXJuIF9lbnYuZ2V0RmFjdG9yeSgpLm5ld1R5
cGVNaXJyb3IoYmluZGluZy5kZWNsYXJpbmdDbGFzcyk7CisJCX0KKwkJcmV0dXJuIE5vVHlwZUlt
cGwuTk9fVFlQRV9OT05FOworCX0KIH0KZGlmZiAtLWdpdCBzcmMvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9GYWN0b3J5LmphdmEgc3JjL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hcHQvbW9kZWwvRmFjdG9yeS5qYXZhCmluZGV4IDcxYzdhYjku
LjA2ZWE0YmEgMTAwNjQ0Ci0tLSBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FwdC9tb2RlbC9GYWN0b3J5LmphdmEKKysrIHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvYXB0L21vZGVsL0ZhY3RvcnkuamF2YQpAQCAtMSw0ICsxLDQgQEAKIC8qKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDcsIDIwMTIgQkVBIFN5c3RlbXMs
IEluYy4gYW5kIG90aGVycyAKKyAqIENvcHlyaWdodCAoYykgMjAwNywgMjAxMyBCRUEgU3lzdGVt
cywgSW5jLiBhbmQgb3RoZXJzIAogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFt
IGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVu
ZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCkBAIC02LDEy
ICs2LDE5IEBACiAgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbAog
ICoKKyAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQgc3BlY2lm
aWNhdGlvbiBkZXZlbG9wZWQgdW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0eSBQcm9jZXNzIChK
Q1ApIGFuZCBpcyBtYWRlIGF2YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiBwdXJw
b3NlcworICogb25seS4gVGhlIGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkgc3BlY2lm
aWNhdGlvbiBvZiB0aGUgSkNQLgorICoKICAqIENvbnRyaWJ1dG9yczoKICAqICAgIHdoYXJsZXlA
YmVhLmNvbSAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgogICogICAgSUJNIENvcnBv
cmF0aW9uIC0gZml4IGZvciAzNDI1OTgKKyAqICAgIElCTSBDb3Jwb3JhdGlvbiAtIEphdmEgOCBz
dXBwb3J0CiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KIAogcGFja2FnZSBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIuYXB0Lm1vZGVsOwogCitpbXBvcnQgamF2YS5sYW5nLmFubm90
YXRpb24uQW5ub3RhdGlvbjsKIGltcG9ydCBqYXZhLmxhbmcucmVmbGVjdC5BcnJheTsKK2ltcG9y
dCBqYXZhLmxhbmcucmVmbGVjdC5Qcm94eTsKIGltcG9ydCBqYXZhLnV0aWwuQXJyYXlMaXN0Owog
aW1wb3J0IGphdmEudXRpbC5Db2xsZWN0aW9uczsKQEAgLTMyLDQgKzM5LDUgQEAKIGltcG9ydCBq
YXZheC5sYW5nLm1vZGVsLnR5cGUuVHlwZU1pcnJvcjsKIAoraW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5jb3JlLmNvbXBpbGVyLkNoYXJPcGVyYXRpb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0Lmlu
dGVybmFsLmNvbXBpbGVyLmFwdC5kaXNwYXRjaC5CYXNlUHJvY2Vzc2luZ0VudkltcGw7CiBpbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmNsYXNzZm10LkNsYXNzRmlsZUNv
bnN0YW50czsKQEAgLTY1LDQgKzczLDYgQEAKIAogCXByaXZhdGUgZmluYWwgQmFzZVByb2Nlc3Np
bmdFbnZJbXBsIF9lbnY7CisJcHVibGljIHN0YXRpYyBBbm5vdGF0aW9uW10gRU1QVFlfQU5OT1RB
VElPTlMgPSBuZXcgQW5ub3RhdGlvblswXTsKKwlwdWJsaWMgc3RhdGljIExpc3Q8PyBleHRlbmRz
IEFubm90YXRpb25NaXJyb3I+IEVNUFRZX0FOTk9UQVRJT05fTUlSUk9SUyA9IENvbGxlY3Rpb25z
LmVtcHR5TGlzdCgpOwogCQogCS8qKgpAQCAtODksNCArOTksNTYgQEAKIAl9CiAJCisJQFN1cHBy
ZXNzV2FybmluZ3MoInVuY2hlY2tlZCIpIC8vIGZvciB0aGUgY2FzdCB0byBBCisJcHVibGljIDxB
IGV4dGVuZHMgQW5ub3RhdGlvbj4gQVtdIGdldEFubm90YXRpb25zQnlUeXBlKEFubm90YXRpb25C
aW5kaW5nW10gYW5ub0luc3RhbmNlcywgQ2xhc3M8QT4gYW5ub3RhdGlvbkNsYXNzKSB7CisJCUFb
XSByZXN1bHQgPSBnZXRBbm5vdGF0aW9ucyhhbm5vSW5zdGFuY2VzLCBhbm5vdGF0aW9uQ2xhc3Ms
IGZhbHNlKTsKKwkJcmV0dXJuIHJlc3VsdCA9PSBudWxsID8gKEFbXSkgRU1QVFlfQU5OT1RBVElP
TlMgOiByZXN1bHQ7CisJfQorCQorCQorCXB1YmxpYyA8QSBleHRlbmRzIEFubm90YXRpb24+IEEg
Z2V0QW5ub3RhdGlvbihBbm5vdGF0aW9uQmluZGluZ1tdIGFubm9JbnN0YW5jZXMsIENsYXNzPEE+
IGFubm90YXRpb25DbGFzcykgeworCQlBW10gcmVzdWx0ID0gZ2V0QW5ub3RhdGlvbnMoYW5ub0lu
c3RhbmNlcywgYW5ub3RhdGlvbkNsYXNzLCB0cnVlKTsKKwkJcmV0dXJuIHJlc3VsdCA9PSBudWxs
ID8gbnVsbCA6IHJlc3VsdFswXTsKKwl9CisKKwlAU3VwcHJlc3NXYXJuaW5ncygidW5jaGVja2Vk
IikgLy8gZm9yIGNhc3Qgb2YgbmV3UHJveHlJbnN0YW5jZSgpIHRvIEEKKwlwcml2YXRlIDxBIGV4
dGVuZHMgQW5ub3RhdGlvbj4gQVtdIGdldEFubm90YXRpb25zKEFubm90YXRpb25CaW5kaW5nW10g
YW5ub0luc3RhbmNlcywgQ2xhc3M8QT4gYW5ub3RhdGlvbkNsYXNzLCBib29sZWFuIGp1c3RUaGVG
aXJzdCkgeworCQlpZihhbm5vSW5zdGFuY2VzID09IG51bGwgfHwgYW5ub0luc3RhbmNlcy5sZW5n
dGggPT0gMCB8fCBhbm5vdGF0aW9uQ2xhc3MgPT0gbnVsbCApIAorCQkJcmV0dXJuIG51bGw7CisK
KwkJU3RyaW5nIGFubm9UeXBlTmFtZSA9IGFubm90YXRpb25DbGFzcy5nZXROYW1lKCk7CisJCWlm
KGFubm9UeXBlTmFtZSA9PSBudWxsICkgcmV0dXJuIG51bGw7CisKKwkJTGlzdDxBPiBsaXN0ID0g
bmV3IEFycmF5TGlzdDxBPihhbm5vSW5zdGFuY2VzLmxlbmd0aCk7CisJCWZvcihBbm5vdGF0aW9u
QmluZGluZyBhbm5vSW5zdGFuY2UgOiBhbm5vSW5zdGFuY2VzKSB7CisJCQlpZiAoYW5ub0luc3Rh
bmNlID09IG51bGwpCisJCQkJY29udGludWU7CisJCQkKKwkJCUFubm90YXRpb25NaXJyb3JJbXBs
IGFubm9NaXJyb3IgPSBjcmVhdGVBbm5vdGF0aW9uTWlycm9yKGFubm9UeXBlTmFtZSwgYW5ub0lu
c3RhbmNlKTsKKwkJCWlmIChhbm5vTWlycm9yICE9IG51bGwpIHsKKwkJCQlsaXN0LmFkZCgoQSlQ
cm94eS5uZXdQcm94eUluc3RhbmNlKGFubm90YXRpb25DbGFzcy5nZXRDbGFzc0xvYWRlcigpLCBu
ZXcgQ2xhc3NbXXsgYW5ub3RhdGlvbkNsYXNzIH0sIGFubm9NaXJyb3IpKTsKKwkJCQlpZiAoanVz
dFRoZUZpcnN0KSBicmVhazsKKwkJCX0KKwkJfQorCQlyZXR1cm4gbGlzdC5zaXplKCkgPiAwID8g
KEFbXSkgbGlzdC50b0FycmF5KG5ldyBBbm5vdGF0aW9uW2xpc3Quc2l6ZSgpXSkgOiAgbnVsbDsK
Kwl9CisKKwlwcml2YXRlIEFubm90YXRpb25NaXJyb3JJbXBsIGNyZWF0ZUFubm90YXRpb25NaXJy
b3IoU3RyaW5nIGFubm9UeXBlTmFtZSwgQW5ub3RhdGlvbkJpbmRpbmcgYW5ub0luc3RhbmNlKSB7
CisJCVJlZmVyZW5jZUJpbmRpbmcgYmluZGluZyA9IGFubm9JbnN0YW5jZS5nZXRBbm5vdGF0aW9u
VHlwZSgpOworCQlpZiAoYmluZGluZyAhPSBudWxsICYmIGJpbmRpbmcuaXNBbm5vdGF0aW9uVHlw
ZSgpICkgeworCQkJY2hhcltdIHFOYW1lOworCQkJaWYgKGJpbmRpbmcuaXNNZW1iZXJUeXBlKCkp
IHsKKwkJCQlhbm5vVHlwZU5hbWUgPSBhbm5vVHlwZU5hbWUucmVwbGFjZSgnJCcsICcuJyk7CisJ
CQkJcU5hbWUgPSBDaGFyT3BlcmF0aW9uLmNvbmNhdFdpdGgoYmluZGluZy5lbmNsb3NpbmdUeXBl
KCkuY29tcG91bmROYW1lLCBiaW5kaW5nLnNvdXJjZU5hbWUsICcuJyk7CisJCQkJQ2hhck9wZXJh
dGlvbi5yZXBsYWNlKHFOYW1lLCAnJCcsICcuJyk7CisJCQl9IGVsc2UgeworCQkJCXFOYW1lID0g
Q2hhck9wZXJhdGlvbi5jb25jYXRXaXRoKGJpbmRpbmcuY29tcG91bmROYW1lLCAnLicpOworCQkJ
fQorCQkJaWYoYW5ub1R5cGVOYW1lLmVxdWFscyhuZXcgU3RyaW5nKHFOYW1lKSkgKXsKKwkJCQly
ZXR1cm4gKEFubm90YXRpb25NaXJyb3JJbXBsKV9lbnYuZ2V0RmFjdG9yeSgpLm5ld0Fubm90YXRp
b25NaXJyb3IoYW5ub0luc3RhbmNlKTsKKwkJCX0KKwkJfQorCQlyZXR1cm4gbnVsbDsKKwl9CisK
IAlwcml2YXRlIHN0YXRpYyB2b2lkIGFwcGVuZE1vZGlmaWVyKFNldDxNb2RpZmllcj4gcmVzdWx0
LCBpbnQgbW9kaWZpZXJzLCBpbnQgbW9kaWZpZXJDb25zdGFudCwgTW9kaWZpZXIgbW9kaWZpZXIp
IHsKIAkJaWYgKChtb2RpZmllcnMgJiBtb2RpZmllckNvbnN0YW50KSAhPSAwKSB7CkBAIC0zNDMs
NCArNDA1LDEyIEBACiAJCX0KIAl9CisJCisJcHVibGljIFByaW1pdGl2ZVR5cGVJbXBsIGdldFBy
aW1pdGl2ZVR5cGUoQmFzZVR5cGVCaW5kaW5nIGJpbmRpbmcpIHsKKwkJQW5ub3RhdGlvbkJpbmRp
bmdbXSBhbm5vdGF0aW9ucyA9IGJpbmRpbmcuZ2V0VHlwZUFubm90YXRpb25zKCk7CisJCWlmIChh
bm5vdGF0aW9ucyA9PSBudWxsIHx8IGFubm90YXRpb25zLmxlbmd0aCA9PSAwKSB7CisJCQlyZXR1
cm4gZ2V0UHJpbWl0aXZlVHlwZShQcmltaXRpdmVUeXBlSW1wbC5nZXRLaW5kKGJpbmRpbmcpKTsK
KwkJfQorCQlyZXR1cm4gbmV3IFByaW1pdGl2ZVR5cGVJbXBsKF9lbnYsIGJpbmRpbmcpOworCX0K
IAogCS8qKgpAQCAtMzgwLDEwICs0NTAsMTAgQEAKIAkJCUJhc2VUeXBlQmluZGluZyBidGIgPSAo
QmFzZVR5cGVCaW5kaW5nKWJpbmRpbmc7CiAJCQlzd2l0Y2ggKGJ0Yi5pZCkgewotCQkJY2FzZSBU
eXBlSWRzLlRfdm9pZDoKLQkJCQlyZXR1cm4gZ2V0Tm9UeXBlKFR5cGVLaW5kLlZPSUQpOwotCQkJ
Y2FzZSBUeXBlSWRzLlRfbnVsbDoKLQkJCQlyZXR1cm4gZ2V0TnVsbFR5cGUoKTsKLQkJCWRlZmF1
bHQ6Ci0JCQkJcmV0dXJuIGdldFByaW1pdGl2ZVR5cGUoUHJpbWl0aXZlVHlwZUltcGwuZ2V0S2lu
ZCgoQmFzZVR5cGVCaW5kaW5nKWJpbmRpbmcpKTsKKwkJCQljYXNlIFR5cGVJZHMuVF92b2lkOgor
CQkJCQlyZXR1cm4gZ2V0Tm9UeXBlKFR5cGVLaW5kLlZPSUQpOworCQkJCWNhc2UgVHlwZUlkcy5U
X251bGw6CisJCQkJCXJldHVybiBnZXROdWxsVHlwZSgpOworCQkJCWRlZmF1bHQ6CisJCQkJCXJl
dHVybiBnZXRQcmltaXRpdmVUeXBlKGJ0Yik7CiAJCQl9CiAKZGlmZiAtLWdpdCBzcmMvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9Ob1R5cGVJbXBsLmphdmEgc3Jj
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQvbW9kZWwvTm9UeXBlSW1wbC5q
YXZhCmluZGV4IDQ5OWZmMTYuLjM5YjFmMjQgMTAwNjQ0Ci0tLSBzcmMvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9Ob1R5cGVJbXBsLmphdmEKKysrIHNyYy9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL05vVHlwZUltcGwuamF2YQpA
QCAtMSw0ICsxLDQgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMp
IDIwMDcsIDIwMTEgQkVBIFN5c3RlbXMsIEluYy4KKyAqIENvcHlyaWdodCAoYykgMjAwNywgMjAx
MyBCRUEgU3lzdGVtcywgSW5jLiBhbmQgb3RoZXJzCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBU
aGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBh
dmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYx
LjAKQEAgLTYsMTAgKzYsMTkgQEAKICAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBs
LXYxMC5odG1sCiAgKgorICogVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBhbiBlYXJseS1k
cmFmdCBzcGVjaWZpY2F0aW9uIGRldmVsb3BlZCB1bmRlciB0aGUgSmF2YQorICogQ29tbXVuaXR5
IFByb2Nlc3MgKEpDUCkgYW5kIGlzIG1hZGUgYXZhaWxhYmxlIGZvciB0ZXN0aW5nIGFuZCBldmFs
dWF0aW9uIHB1cnBvc2VzCisgKiBvbmx5LiBUaGUgY29kZSBpcyBub3QgY29tcGF0aWJsZSB3aXRo
IGFueSBzcGVjaWZpY2F0aW9uIG9mIHRoZSBKQ1AuCisgKgogICogQ29udHJpYnV0b3JzOgogICog
ICAgd2hhcmxleUBiZWEuY29tIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCisgKiAg
ICBJQk0gQ29ycG9yYXRpb24gLSBKYXZhIDggc3VwcG9ydAogICoqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KiovCiAKIHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFwdC5tb2Rl
bDsKIAoraW1wb3J0IGphdmEubGFuZy5hbm5vdGF0aW9uLkFubm90YXRpb247CitpbXBvcnQgamF2
YS51dGlsLkxpc3Q7CisKK2ltcG9ydCBqYXZheC5sYW5nLm1vZGVsLmVsZW1lbnQuQW5ub3RhdGlv
bk1pcnJvcjsKIGltcG9ydCBqYXZheC5sYW5nLm1vZGVsLnR5cGUuTm9UeXBlOwogaW1wb3J0IGph
dmF4LmxhbmcubW9kZWwudHlwZS5OdWxsVHlwZTsKQEAgLTY3LDMgKzc2LDE2IEBACiAJfQogCisJ
cHVibGljIExpc3Q8PyBleHRlbmRzIEFubm90YXRpb25NaXJyb3I+IGdldEFubm90YXRpb25NaXJy
b3JzKCkgeworCQlyZXR1cm4gRmFjdG9yeS5FTVBUWV9BTk5PVEFUSU9OX01JUlJPUlM7CisJfQor
CisJcHVibGljIDxBIGV4dGVuZHMgQW5ub3RhdGlvbj4gQSBnZXRBbm5vdGF0aW9uKENsYXNzPEE+
IGFubm90YXRpb25UeXBlKSB7CisJCXJldHVybiBudWxsOworCX0KKworCUBTdXBwcmVzc1dhcm5p
bmdzKCJ1bmNoZWNrZWQiKQorCXB1YmxpYyA8QSBleHRlbmRzIEFubm90YXRpb24+IEFbXSBnZXRB
bm5vdGF0aW9uc0J5VHlwZShDbGFzczxBPiBhbm5vdGF0aW9uVHlwZSkgeworCQlyZXR1cm4gKEFb
XSkgRmFjdG9yeS5FTVBUWV9BTk5PVEFUSU9OUzsKKwl9CisKIH0KZGlmZiAtLWdpdCBzcmMvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9QcmltaXRpdmVUeXBlSW1w
bC5qYXZhIHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL1By
aW1pdGl2ZVR5cGVJbXBsLmphdmEKaW5kZXggNzdmZTJkNy4uMzlhOWFiYyAxMDA2NDQKLS0tIHNy
Yy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL1ByaW1pdGl2ZVR5
cGVJbXBsLmphdmEKKysrIHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0
L21vZGVsL1ByaW1pdGl2ZVR5cGVJbXBsLmphdmEKQEAgLTEsNCArMSw0IEBACiAvKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDA3IEJFQSBTeXN0ZW1zLCBJbmMuIAor
ICogQ29weXJpZ2h0IChjKSAyMDA3LCAyMDEzIEJFQSBTeXN0ZW1zLCBJbmMuIGFuZCBvdGhlcnMu
CiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlp
bmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRo
ZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKQEAgLTYsNyArNiwxMSBAQAogICogaHR0cDov
L3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKICAqCisgKiBUaGlzIGlzIGFuIGlt
cGxlbWVudGF0aW9uIG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVu
ZGVyIHRoZSBKYXZhCisgKiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFp
bGFibGUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBj
b2RlIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4K
KyAqCiAgKiBDb250cmlidXRvcnM6CiAgKiAgICB3aGFybGV5QGJlYS5jb20gLSBpbml0aWFsIEFQ
SSBhbmQgaW1wbGVtZW50YXRpb24KLSAqICAgIAorICogICAgSUJNIENvcnBvcmF0aW9uIC0gSmF2
YSA4IHN1cHBvcnQKICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwogCkBAIC0xNyw0ICsyMSw2IEBA
CiBpbXBvcnQgamF2YXgubGFuZy5tb2RlbC50eXBlLlR5cGVWaXNpdG9yOwogCitpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFwdC5kaXNwYXRjaC5CYXNlUHJvY2Vzc2lu
Z0VudkltcGw7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1
cC5Bbm5vdGF0aW9uQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29t
cGlsZXIubG9va3VwLkJhc2VUeXBlQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50
ZXJuYWwuY29tcGlsZXIubG9va3VwLlR5cGVCaW5kaW5nOwpAQCAtNDUsNCArNTEsOSBAQAogCX0K
IAkKKwlQcmltaXRpdmVUeXBlSW1wbChCYXNlUHJvY2Vzc2luZ0VudkltcGwgZW52LCBCYXNlVHlw
ZUJpbmRpbmcgYmluZGluZykgeworCQkvLyBGcm9tIEphdmEgOCwgYmFzZSB0eXBlIGJpbmRpbmdz
IGNhbiBob2xkIGFubm90YXRpb25zIGFuZCBoZW5jZSBuZWVkIHRoZSBlbnZpcm9ubWVudC4KKwkJ
c3VwZXIoZW52LCBiaW5kaW5nKTsKKwl9CisJCiAJQE92ZXJyaWRlCiAJcHVibGljIDxSLCBQPiBS
IGFjY2VwdChUeXBlVmlzaXRvcjxSLCBQPiB2LCBQIHApCkBAIC01MSw0ICs2Miw4IEBACiAJfQog
CisJcHJvdGVjdGVkIEFubm90YXRpb25CaW5kaW5nW10gZ2V0QW5ub3RhdGlvbkJpbmRpbmdzKCkg
eworCQlyZXR1cm4gKChCYXNlVHlwZUJpbmRpbmcpX2JpbmRpbmcpLmdldFR5cGVBbm5vdGF0aW9u
cygpOworCX0KKwogCS8qIChub24tSmF2YWRvYykKIAkgKiBAc2VlIG9yZy5lY2xpcHNlLmpkdC5p
bnRlcm5hbC5jb21waWxlci5hcHQubW9kZWwuVHlwZU1pcnJvckltcGwjZ2V0S2luZCgpCmRpZmYg
LS1naXQgc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQvbW9kZWwvVHlw
ZU1pcnJvckltcGwuamF2YSBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fw
dC9tb2RlbC9UeXBlTWlycm9ySW1wbC5qYXZhCmluZGV4IDIyYjdhNDQuLjEyMWU3MGIgMTAwNjQ0
Ci0tLSBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9UeXBl
TWlycm9ySW1wbC5qYXZhCisrKyBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FwdC9tb2RlbC9UeXBlTWlycm9ySW1wbC5qYXZhCkBAIC0xLDQgKzEsNCBAQAogLyoqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwNyBCRUEgU3lzdGVtcywgSW5jLiAK
KyAqIENvcHlyaWdodCAoYykgMjAwNywgMjAxMyBCRUEgU3lzdGVtcywgSW5jLiBhbmQgb3RoZXJz
LgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55
aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0
aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCkBAIC02LDExICs2LDE5IEBACiAgKiBodHRw
Oi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbAogICoKKyAqIFRoaXMgaXMgYW4g
aW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQgc3BlY2lmaWNhdGlvbiBkZXZlbG9wZWQg
dW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0eSBQcm9jZXNzIChKQ1ApIGFuZCBpcyBtYWRlIGF2
YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiBwdXJwb3NlcworICogb25seS4gVGhl
IGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkgc3BlY2lmaWNhdGlvbiBvZiB0aGUgSkNQ
LgorICoKICAqIENvbnRyaWJ1dG9yczoKICAqICAgIHdoYXJsZXlAYmVhLmNvbSAtIGluaXRpYWwg
QVBJIGFuZCBpbXBsZW1lbnRhdGlvbgotICogICAgCisgKiAgICBJQk0gQ29ycG9yYXRpb24gLSBK
YXZhIDggc3VwcG9ydAogICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCiAKIHBhY2thZ2Ugb3JnLmVj
bGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFwdC5tb2RlbDsKIAoraW1wb3J0IGphdmEubGFu
Zy5hbm5vdGF0aW9uLkFubm90YXRpb247CitpbXBvcnQgamF2YS51dGlsLkxpc3Q7CisKK2ltcG9y
dCBqYXZheC5sYW5nLm1vZGVsLmVsZW1lbnQuQW5ub3RhdGlvbk1pcnJvcjsKIGltcG9ydCBqYXZh
eC5sYW5nLm1vZGVsLnR5cGUuVHlwZUtpbmQ7CiBpbXBvcnQgamF2YXgubGFuZy5tb2RlbC50eXBl
LlR5cGVNaXJyb3I7CkBAIC0xOCw1ICsyNiw3IEBACiAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIuYXB0LmRpc3BhdGNoLkJhc2VQcm9jZXNzaW5nRW52SW1wbDsKK2lt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkFubm90YXRpb25C
aW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAu
QmluZGluZzsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3Vw
LlJlZmVyZW5jZUJpbmRpbmc7CiAKIC8qKgpAQCAtMTA3LDQgKzExNywyMCBAQAogCX0KIAorCXBy
b3RlY3RlZCBBbm5vdGF0aW9uQmluZGluZ1tdIGdldEFubm90YXRpb25CaW5kaW5ncygpIHsKKwkJ
cmV0dXJuICgoUmVmZXJlbmNlQmluZGluZylfYmluZGluZykuZ2V0VHlwZUFubm90YXRpb25zKCk7
CisJfQorCisJcHVibGljIExpc3Q8PyBleHRlbmRzIEFubm90YXRpb25NaXJyb3I+IGdldEFubm90
YXRpb25NaXJyb3JzKCkgeworCQlyZXR1cm4gX2Vudi5nZXRGYWN0b3J5KCkuZ2V0QW5ub3RhdGlv
bk1pcnJvcnMoZ2V0QW5ub3RhdGlvbkJpbmRpbmdzKCkpOworCX0KKworCXB1YmxpYyA8QSBleHRl
bmRzIEFubm90YXRpb24+IEEgZ2V0QW5ub3RhdGlvbihDbGFzczxBPiBhbm5vdGF0aW9uVHlwZSkg
eworCQlyZXR1cm4gX2Vudi5nZXRGYWN0b3J5KCkuZ2V0QW5ub3RhdGlvbihnZXRBbm5vdGF0aW9u
QmluZGluZ3MoKSwgYW5ub3RhdGlvblR5cGUpOworCX0KKworCXB1YmxpYyA8QSBleHRlbmRzIEFu
bm90YXRpb24+IEFbXSBnZXRBbm5vdGF0aW9uc0J5VHlwZShDbGFzczxBPiBhbm5vdGF0aW9uVHlw
ZSkgeworCQlyZXR1cm4gX2Vudi5nZXRGYWN0b3J5KCkuZ2V0QW5ub3RhdGlvbnNCeVR5cGUoZ2V0
QW5ub3RhdGlvbkJpbmRpbmdzKCksIGFubm90YXRpb25UeXBlKTsKKwl9CisKIAkKIH0KZGlmZiAt
LWdpdCBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9UeXBl
UGFyYW1ldGVyRWxlbWVudEltcGwuamF2YSBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FwdC9tb2RlbC9UeXBlUGFyYW1ldGVyRWxlbWVudEltcGwuamF2YQppbmRleCA3ZGE3
YzNhLi4wYzQ4N2E2IDEwMDY0NAotLS0gc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9hcHQvbW9kZWwvVHlwZVBhcmFtZXRlckVsZW1lbnRJbXBsLmphdmEKKysrIHNyYy9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL1R5cGVQYXJhbWV0ZXJFbGVt
ZW50SW1wbC5qYXZhCkBAIC0xLDQgKzEsNCBAQAogLyoqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAq
IENvcHlyaWdodCAoYykgMjAwNywgMjAxMSBCRUEgU3lzdGVtcywgSW5jLgorICogQ29weXJpZ2h0
IChjKSAyMDA3LCAyMDEzIEJFQSBTeXN0ZW1zLCBJbmMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVk
LiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFk
ZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNl
IHYxLjAKQEAgLTYsOCArNiwxMyBAQAogICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9l
cGwtdjEwLmh0bWwKICAqCisgKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGFuIGVhcmx5
LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVyIHRoZSBKYXZhCisgKiBDb21tdW5p
dHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFibGUgZm9yIHRlc3RpbmcgYW5kIGV2
YWx1YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBjb2RlIGlzIG5vdCBjb21wYXRpYmxlIHdp
dGggYW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KKyAqCiAgKiBDb250cmlidXRvcnM6CiAg
KiAgICB3aGFybGV5QGJlYS5jb20gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24KICAq
ICAgIElCTSBDb3Jwb3JhdGlvbiAtIGZpeCBmb3IgMzQyNDcwCiAgKiAgICBJQk0gQ29ycG9yYXRp
b24gLSBmaXggZm9yIDM0MjU5OAorICogICAgSUJNIENvcnBvcmF0aW9uIC0gSmF2YSA4IHN1cHBv
cnQKICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqLwogCkBAIC0xMzUsNSArMTQwLDUgQEAKIAlwcm90
ZWN0ZWQgQW5ub3RhdGlvbkJpbmRpbmdbXSBnZXRBbm5vdGF0aW9uQmluZGluZ3MoKQogCXsKLQkJ
cmV0dXJuIG51bGw7CisJCXJldHVybiAoKFR5cGVWYXJpYWJsZUJpbmRpbmcpX2JpbmRpbmcpLmdl
dFR5cGVBbm5vdGF0aW9ucygpOwogCX0KIA==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>236094</attachid>
            <date>2013-10-04 05:05:00 -0400</date>
            <delta_ts>2013-10-04 06:24:05 -0400</delta_ts>
            <desc>Latest patch</desc>
            <filename>Fix-for-bug-413613.patch</filename>
            <type>text/plain</type>
            <size>72922</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMAojUCBvcmcuZWNsaXBzZS5qZHQuY29tcGls
ZXIuYXB0LnRlc3RzCmRpZmYgLS1naXQgLmNsYXNzcGF0aCAuY2xhc3NwYXRoCmluZGV4IDYxOTA4
MmMuLjg4ZGFkNTMgMTAwNjQ0Ci0tLSAuY2xhc3NwYXRoCisrKyAuY2xhc3NwYXRoCkBAIC00LDUg
KzQsNSBAQAogCTxjbGFzc3BhdGhlbnRyeSBraW5kPSJzcmMiIG91dHB1dD0iYmlucHJvY2Vzc29y
cyIgcGF0aD0icHJvY2Vzc29ycyIvPgogCTxjbGFzc3BhdGhlbnRyeSBraW5kPSJjb24iIHBhdGg9
Im9yZy5lY2xpcHNlLnBkZS5jb3JlLnJlcXVpcmVkUGx1Z2lucyIvPgotCTxjbGFzc3BhdGhlbnRy
eSBraW5kPSJjb24iIHBhdGg9Im9yZy5lY2xpcHNlLmpkdC5sYXVuY2hpbmcuSlJFX0NPTlRBSU5F
Ui9vcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuZGVidWcudWkubGF1bmNoZXIuU3RhbmRhcmRWTVR5
cGUvSmF2YVNFLTEuNiIvPgorCTxjbGFzc3BhdGhlbnRyeSBraW5kPSJjb24iIHBhdGg9Im9yZy5l
Y2xpcHNlLmpkdC5sYXVuY2hpbmcuSlJFX0NPTlRBSU5FUi9vcmcuZWNsaXBzZS5qZHQuaW50ZXJu
YWwuZGVidWcudWkubGF1bmNoZXIuU3RhbmRhcmRWTVR5cGUvSmF2YVNFLTEuOCIvPgogCTxjbGFz
c3BhdGhlbnRyeSBraW5kPSJvdXRwdXQiIHBhdGg9ImJpbiIvPgogPC9jbGFzc3BhdGg+CmRpZmYg
LS1naXQgbGliL2FwdHRlc3Rwcm9jZXNzb3JzLmphciBsaWIvYXB0dGVzdHByb2Nlc3NvcnMuamFy
CmluZGV4IGVkOWJiY2YuLmIxZjgxYWMgMTAwNjQ0Ci0tLSBsaWIvYXB0dGVzdHByb2Nlc3NvcnMu
amFyCisrKyBsaWIvYXB0dGVzdHByb2Nlc3NvcnMuamFyCkJpbmFyeSBmaWxlcyBkaWZmZXIKZGlm
ZiAtLWdpdCBwcm9jZXNzb3JzL01FVEEtSU5GL3NlcnZpY2VzL2phdmF4LmFubm90YXRpb24ucHJv
Y2Vzc2luZy5Qcm9jZXNzb3IgcHJvY2Vzc29ycy9NRVRBLUlORi9zZXJ2aWNlcy9qYXZheC5hbm5v
dGF0aW9uLnByb2Nlc3NpbmcuUHJvY2Vzc29yCmluZGV4IDMyN2E4NjUuLmY3ZDAzMjAgMTAwNjQ0
Ci0tLSBwcm9jZXNzb3JzL01FVEEtSU5GL3NlcnZpY2VzL2phdmF4LmFubm90YXRpb24ucHJvY2Vz
c2luZy5Qcm9jZXNzb3IKKysrIHByb2Nlc3NvcnMvTUVUQS1JTkYvc2VydmljZXMvamF2YXguYW5u
b3RhdGlvbi5wcm9jZXNzaW5nLlByb2Nlc3NvcgpAQCAtMiw0ICsyLDUgQEAKIG9yZy5lY2xpcHNl
LmpkdC5jb21waWxlci5hcHQudGVzdHMucHJvY2Vzc29ycy5jaGVja2FyZ3MuQ2hlY2tBcmdzUHJv
Ywogb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLmFwdC50ZXN0cy5wcm9jZXNzb3JzLmVsZW1lbnRz
LkVsZW1lbnRQcm9jCitvcmcuZWNsaXBzZS5qZHQuY29tcGlsZXIuYXB0LnRlc3RzLnByb2Nlc3Nv
cnMuZWxlbWVudHMuSmF2YThFbGVtZW50UHJvY2Vzc29yCiBvcmcuZWNsaXBzZS5qZHQuY29tcGls
ZXIuYXB0LnRlc3RzLnByb2Nlc3NvcnMuZmlsZXIuRmlsZXJQcm9jCiBvcmcuZWNsaXBzZS5qZHQu
Y29tcGlsZXIuYXB0LnRlc3RzLnByb2Nlc3NvcnMubWVzc2FnZXIuTWVzc2FnZXJQcm9jCmRpZmYg
LS1naXQgb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLmFwdC50ZXN0cy9wcm9jZXNzb3JzL29yZy9l
Y2xpcHNlL2pkdC9jb21waWxlci9hcHQvdGVzdHMvYW5ub3RhdGlvbnMvVHlwZSQxLmphdmEgb3Jn
LmVjbGlwc2UuamR0LmNvbXBpbGVyLmFwdC50ZXN0cy9wcm9jZXNzb3JzL29yZy9lY2xpcHNlL2pk
dC9jb21waWxlci9hcHQvdGVzdHMvYW5ub3RhdGlvbnMvVHlwZSQxLmphdmEKbmV3IGZpbGUgbW9k
ZSAxMDA2NDQKaW5kZXggMDAwMDAwMC4uNDRhNzQzYgotLS0gL2Rldi9udWxsCisrKyBvcmcuZWNs
aXBzZS5qZHQuY29tcGlsZXIuYXB0LnRlc3RzL3Byb2Nlc3NvcnMvb3JnL2VjbGlwc2UvamR0L2Nv
bXBpbGVyL2FwdC90ZXN0cy9hbm5vdGF0aW9ucy9UeXBlJDEuamF2YQpAQCAtMCwwICsxLDIyIEBA
CisvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKgorICogQ29weXJpZ2h0IChjKSAyMDEzIElCTSBDb3Jw
b3JhdGlvbi4KKyAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFj
Y29tcGFueWluZyBtYXRlcmlhbHMKKyAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVy
bXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAorICogd2hpY2ggYWNjb21wYW5p
ZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKKyAqIGh0dHA6Ly93d3cu
ZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCisgKiAKKyAqIFRoaXMgaXMgYW4gaW1wbGVt
ZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQgc3BlY2lmaWNhdGlvbiBkZXZlbG9wZWQgdW5kZXIg
dGhlIEphdmEKKyAqIENvbW11bml0eSBQcm9jZXNzIChKQ1ApIGFuZCBpcyBtYWRlIGF2YWlsYWJs
ZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiBwdXJwb3NlcworICogb25seS4gVGhlIGNvZGUg
aXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkgc3BlY2lmaWNhdGlvbiBvZiB0aGUgSkNQLgorICog
CisgKiBDb250cmlidXRvcnM6CisgKiAgICAgSUJNIENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkg
YW5kIGltcGxlbWVudGF0aW9uCisgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KK3BhY2thZ2Ugb3Jn
LmVjbGlwc2UuamR0LmNvbXBpbGVyLmFwdC50ZXN0cy5hbm5vdGF0aW9uczsKKworaW1wb3J0IGph
dmEubGFuZy5hbm5vdGF0aW9uLkVsZW1lbnRUeXBlOworaW1wb3J0IGphdmEubGFuZy5hbm5vdGF0
aW9uLlRhcmdldDsKKworQFRhcmdldChFbGVtZW50VHlwZS5UWVBFX1VTRSkKK3B1YmxpYyBAaW50
ZXJmYWNlIFR5cGUkMSB7Cit9CmRpZmYgLS1naXQgcHJvY2Vzc29ycy9vcmcvZWNsaXBzZS9qZHQv
Y29tcGlsZXIvYXB0L3Rlc3RzL2Fubm90YXRpb25zL1R5cGUuamF2YSBwcm9jZXNzb3JzL29yZy9l
Y2xpcHNlL2pkdC9jb21waWxlci9hcHQvdGVzdHMvYW5ub3RhdGlvbnMvVHlwZS5qYXZhCm5ldyBm
aWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAuLjhlNDAzODEKLS0tIC9kZXYvbnVsbAorKysg
cHJvY2Vzc29ycy9vcmcvZWNsaXBzZS9qZHQvY29tcGlsZXIvYXB0L3Rlc3RzL2Fubm90YXRpb25z
L1R5cGUuamF2YQpAQCAtMCwwICsxLDI2IEBACisvKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgorICog
Q29weXJpZ2h0IChjKSAyMDEzIElCTSBDb3Jwb3JhdGlvbi4KKyAqIEFsbCByaWdodHMgcmVzZXJ2
ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKKyAqIGFyZSBt
YWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vu
c2UgdjEuMAorICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBh
dmFpbGFibGUgYXQKKyAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1s
CisgKiAKKyAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQgc3Bl
Y2lmaWNhdGlvbiBkZXZlbG9wZWQgdW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0eSBQcm9jZXNz
IChKQ1ApIGFuZCBpcyBtYWRlIGF2YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiBw
dXJwb3NlcworICogb25seS4gVGhlIGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkgc3Bl
Y2lmaWNhdGlvbiBvZiB0aGUgSkNQLgorICogCisgKiBDb250cmlidXRvcnM6CisgKiAgICAgSUJN
IENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCisgKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKi8KK3BhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLmFwdC50ZXN0
cy5hbm5vdGF0aW9uczsKKworaW1wb3J0IGphdmEubGFuZy5hbm5vdGF0aW9uLkVsZW1lbnRUeXBl
OworaW1wb3J0IGphdmEubGFuZy5hbm5vdGF0aW9uLlRhcmdldDsKKworQFRhcmdldChFbGVtZW50
VHlwZS5UWVBFX1VTRSkKK3B1YmxpYyBAaW50ZXJmYWNlIFR5cGUgeworCVN0cmluZyB2YWx1ZSgp
IGRlZmF1bHQgIiI7CisJQFRhcmdldChFbGVtZW50VHlwZS5UWVBFX1VTRSkKKwlAaW50ZXJmYWNl
IE9uZSB7CisJfQorfQpcIE5vIG5ld2xpbmUgYXQgZW5kIG9mIGZpbGUKZGlmZiAtLWdpdCBwcm9j
ZXNzb3JzL29yZy9lY2xpcHNlL2pkdC9jb21waWxlci9hcHQvdGVzdHMvcHJvY2Vzc29ycy9lbGVt
ZW50cy9KYXZhOEVsZW1lbnRQcm9jZXNzb3IuamF2YSBwcm9jZXNzb3JzL29yZy9lY2xpcHNlL2pk
dC9jb21waWxlci9hcHQvdGVzdHMvcHJvY2Vzc29ycy9lbGVtZW50cy9KYXZhOEVsZW1lbnRQcm9j
ZXNzb3IuamF2YQpuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwLi5iN2ExNWM1Ci0t
LSAvZGV2L251bGwKKysrIHByb2Nlc3NvcnMvb3JnL2VjbGlwc2UvamR0L2NvbXBpbGVyL2FwdC90
ZXN0cy9wcm9jZXNzb3JzL2VsZW1lbnRzL0phdmE4RWxlbWVudFByb2Nlc3Nvci5qYXZhCkBAIC0w
LDAgKzEsNTY1IEBACisvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgorICogQ29weXJpZ2h0IChjKSAy
MDEzIElCTSBDb3Jwb3JhdGlvbi4KKyAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3Jh
bSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKKyAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1
bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAorICogd2hp
Y2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKKyAq
IGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCisgKiAKKyAqIFRoaXMg
aXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQgc3BlY2lmaWNhdGlvbiBkZXZl
bG9wZWQgdW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0eSBQcm9jZXNzIChKQ1ApIGFuZCBpcyBt
YWRlIGF2YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiBwdXJwb3NlcworICogb25s
eS4gVGhlIGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkgc3BlY2lmaWNhdGlvbiBvZiB0
aGUgSkNQLgorICogCisgKiBDb250cmlidXRvcnM6CisgKiAgICAgSUJNIENvcnBvcmF0aW9uIC0g
aW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCisgKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8K
KworcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuY29tcGlsZXIuYXB0LnRlc3RzLnByb2Nlc3NvcnMu
ZWxlbWVudHM7CisKK2ltcG9ydCBqYXZhLmxhbmcuYW5ub3RhdGlvbi5Bbm5vdGF0aW9uOworaW1w
b3J0IGphdmEubGFuZy5yZWZsZWN0Lkludm9jYXRpb25UYXJnZXRFeGNlcHRpb247CitpbXBvcnQg
amF2YS5sYW5nLnJlZmxlY3QuTWV0aG9kOworaW1wb3J0IGphdmEudXRpbC5MaXN0OworaW1wb3J0
IGphdmEudXRpbC5NYXA7CitpbXBvcnQgamF2YS51dGlsLlNldDsKKworaW1wb3J0IGphdmF4LmFu
bm90YXRpb24ucHJvY2Vzc2luZy5Sb3VuZEVudmlyb25tZW50OworaW1wb3J0IGphdmF4LmFubm90
YXRpb24ucHJvY2Vzc2luZy5TdXBwb3J0ZWRBbm5vdGF0aW9uVHlwZXM7CitpbXBvcnQgamF2YXgu
YW5ub3RhdGlvbi5wcm9jZXNzaW5nLlN1cHBvcnRlZFNvdXJjZVZlcnNpb247CitpbXBvcnQgamF2
YXgubGFuZy5tb2RlbC5Bbm5vdGF0ZWRDb25zdHJ1Y3Q7CitpbXBvcnQgamF2YXgubGFuZy5tb2Rl
bC5Tb3VyY2VWZXJzaW9uOworaW1wb3J0IGphdmF4LmxhbmcubW9kZWwuZWxlbWVudC5Bbm5vdGF0
aW9uTWlycm9yOworaW1wb3J0IGphdmF4LmxhbmcubW9kZWwuZWxlbWVudC5Bbm5vdGF0aW9uVmFs
dWU7CitpbXBvcnQgamF2YXgubGFuZy5tb2RlbC5lbGVtZW50LkVsZW1lbnQ7CitpbXBvcnQgamF2
YXgubGFuZy5tb2RlbC5lbGVtZW50LkV4ZWN1dGFibGVFbGVtZW50OworaW1wb3J0IGphdmF4Lmxh
bmcubW9kZWwuZWxlbWVudC5UeXBlRWxlbWVudDsKK2ltcG9ydCBqYXZheC5sYW5nLm1vZGVsLmVs
ZW1lbnQuVHlwZVBhcmFtZXRlckVsZW1lbnQ7CitpbXBvcnQgamF2YXgubGFuZy5tb2RlbC5lbGVt
ZW50LlZhcmlhYmxlRWxlbWVudDsKK2ltcG9ydCBqYXZheC5sYW5nLm1vZGVsLnR5cGUuQXJyYXlU
eXBlOworaW1wb3J0IGphdmF4LmxhbmcubW9kZWwudHlwZS5EZWNsYXJlZFR5cGU7CitpbXBvcnQg
amF2YXgubGFuZy5tb2RlbC50eXBlLlR5cGVLaW5kOworaW1wb3J0IGphdmF4LmxhbmcubW9kZWwu
dHlwZS5UeXBlTWlycm9yOworaW1wb3J0IGphdmF4LmxhbmcubW9kZWwudXRpbC5FbGVtZW50Rmls
dGVyOworCitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLmFwdC50ZXN0cy5hbm5vdGF0
aW9ucy5UeXBlOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb21waWxlci5hcHQudGVzdHMuYW5u
b3RhdGlvbnMuVHlwZSQxOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb21waWxlci5hcHQudGVz
dHMucHJvY2Vzc29ycy5iYXNlLkJhc2VQcm9jZXNzb3I7CisKKy8qKgorICogQSBwcm9jZXNzb3Ig
dGhhdCBleHBsb3JlcyB0aGUgamF2YSA4IHNwZWNpZmljIGVsZW1lbnRzIGFuZCB2YWxpZGF0ZXMg
dGhlIGxhbWJkYSBhbmQgCisgKiB0eXBlIGFubm90YXRlZCBlbGVtZW50cy4gVG8gZW5hYmxlIHRo
aXMgcHJvY2Vzc29yLCBhZGQgCisgKiAtQW9yZy5lY2xpcHNlLmpkdC5jb21waWxlci5hcHQudGVz
dHMucHJvY2Vzc29ycy5lbGVtZW50cy5KYXZhOEVsZW1lbnRQcm9jZXNzb3IgdG8gdGhlIGNvbW1h
bmQgbGluZS4KKyAqIEBzaW5jZSAzLjkgQkVUQV9KQVZBOAorICovCitAU3VwcG9ydGVkQW5ub3Rh
dGlvblR5cGVzKCJvcmcuZWNsaXBzZS5qZHQuY29tcGlsZXIuYXB0LnRlc3RzLmFubm90YXRpb25z
LlR5cGUiKQorQFN1cHBvcnRlZFNvdXJjZVZlcnNpb24oU291cmNlVmVyc2lvbi5SRUxFQVNFXzgp
CitwdWJsaWMgY2xhc3MgSmF2YThFbGVtZW50UHJvY2Vzc29yIGV4dGVuZHMgQmFzZVByb2Nlc3Nv
ciB7CisJCisJLy8gQWx3YXlzIHJldHVybiBmYWxzZSBmcm9tIHRoaXMgcHJvY2Vzc29yLCBiZWNh
dXNlIGl0IHN1cHBvcnRzICIqIi4KKwkvLyBUaGUgcmV0dXJuIHZhbHVlIGRvZXMgbm90IHNpZ25p
Znkgc3VjY2VzcyBvciBmYWlsdXJlIQorCUBPdmVycmlkZQorCXB1YmxpYyBib29sZWFuIHByb2Nl
c3MoU2V0PD8gZXh0ZW5kcyBUeXBlRWxlbWVudD4gYW5ub3RhdGlvbnMsIFJvdW5kRW52aXJvbm1l
bnQgcm91bmRFbnYpIHsKKwkJaWYgKHJvdW5kRW52LnByb2Nlc3NpbmdPdmVyKCkpIHsKKwkJCXJl
dHVybiBmYWxzZTsKKwkJfQorCisJCU1hcDxTdHJpbmcsIFN0cmluZz4gb3B0aW9ucyA9IHByb2Nl
c3NpbmdFbnYuZ2V0T3B0aW9ucygpOworCQlpZiAoIW9wdGlvbnMuY29udGFpbnNLZXkodGhpcy5n
ZXRDbGFzcygpLmdldE5hbWUoKSkpIHsKKwkJCS8vIERpc2FibGUgdGhpcyBwcm9jZXNzb3IgdW5s
ZXNzIHdlIGFyZSBpbnRlbnRpb25hbGx5IHBlcmZvcm1pbmcgdGhlIHRlc3QuCisJCQlyZXR1cm4g
ZmFsc2U7CisJCX0gZWxzZSB7CisJCQl0cnkgeworCQkJCWlmICghaW52b2tlVGVzdE1ldGhvZHMo
b3B0aW9ucykpIHsKKwkJCQkJdGVzdEFsbCgpOworCQkJCX0KKwkJCQlzdXBlci5yZXBvcnRTdWNj
ZXNzKCk7CisJCQl9IGNhdGNoIChBc3NlcnRpb25GYWlsZWRFcnJvciBlKSB7CisJCQkJc3VwZXIu
cmVwb3J0RXJyb3IoZ2V0RXhjZXB0aW9uU3RhY2tUcmFjZShlKSk7CisJCQl9IGNhdGNoIChUaHJv
d2FibGUgZSkgeworCQkJCWUucHJpbnRTdGFja1RyYWNlKCk7CisJCQl9CisJCX0KKwkJcmV0dXJu
IGZhbHNlOworCX0KKwlwdWJsaWMgYm9vbGVhbiBpbnZva2VUZXN0TWV0aG9kcyhNYXA8U3RyaW5n
LCBTdHJpbmc+IG9wdGlvbnMpIHRocm93cyBUaHJvd2FibGUgeworCQlNZXRob2QgdGVzdE1ldGhv
ZCA9IG51bGw7CisJCVNldDxTdHJpbmc+IGtleXMgPSBvcHRpb25zLmtleVNldCgpOworCQlib29s
ZWFuIHRlc3RzRm91bmQgPSBmYWxzZTsKKwkJZm9yIChTdHJpbmcgb3B0aW9uIDoga2V5cykgewor
CQkJaWYgKG9wdGlvbi5zdGFydHNXaXRoKCJ0ZXN0IikpIHsKKwkJCQl0cnkgeworCQkJCQl0ZXN0
TWV0aG9kID0gdGhpcy5nZXRDbGFzcygpLmdldERlY2xhcmVkTWV0aG9kKG9wdGlvbiwgbmV3IENs
YXNzWzBdKTsKKwkJCQkJaWYgKHRlc3RNZXRob2QgIT0gbnVsbCkgeworCQkJCQkJdGVzdHNGb3Vu
ZCA9IHRydWU7CisJCQkJCQl0ZXN0TWV0aG9kLmludm9rZSh0aGlzLCAgbmV3IE9iamVjdFswXSk7
CisJCQkJCX0KKwkJCQl9IGNhdGNoIChJbnZvY2F0aW9uVGFyZ2V0RXhjZXB0aW9uIGUpIHsKKwkJ
CQkJdGhyb3cgZS5nZXRDYXVzZSgpOworCQkJCX0gY2F0Y2ggKEV4Y2VwdGlvbiBlKSB7CisJCQkJ
CXN1cGVyLnJlcG9ydEVycm9yKGdldEV4Y2VwdGlvblN0YWNrVHJhY2UoZSkpOworCQkJCX0KKwkJ
CX0KKwkJfQorCQlyZXR1cm4gdGVzdHNGb3VuZDsKKwl9CisJcHVibGljIHZvaWQgdGVzdEFsbCgp
IHRocm93cyBBc3NlcnRpb25GYWlsZWRFcnJvciB7CisJCXRlc3RTRThTcGVjaWZpY3MoKTsKKwkJ
dGVzdExhbWJkYVNwZWNpZmljcygpOworCQl0ZXN0VHlwZUFubm90YXRpb25zKCk7CisJCXRlc3RU
eXBlQW5ub3RhdGlvbnMxKCk7CisJCXRlc3RUeXBlQW5ub3RhdGlvbnMyKCk7CisJCXRlc3RUeXBl
QW5ub3RhdGlvbnMzKCk7CisJCXRlc3RUeXBlQW5ub3RhdGlvbnM0KCk7CisJCXRlc3RUeXBlQW5u
b3RhdGlvbnM1KCk7CisJCXRlc3RUeXBlQW5ub3RhdGlvbnM2KCk7CisJCXRlc3RUeXBlQW5ub3Rh
dGlvbnM3KCk7CisJCXRlc3RUeXBlQW5ub3RhdGlvbnM4KCk7CisJfQorCQorCXB1YmxpYyB2b2lk
IHRlc3RMYW1iZGFTcGVjaWZpY3MoKSB7CisJCVR5cGVFbGVtZW50IGFubm90YXRlZFR5cGUgPSBf
ZWxlbWVudFV0aWxzLmdldFR5cGVFbGVtZW50KCJ0YXJnZXRzLm1vZGVsOC5MYW1iZGFUZXN0Iik7
CisJCWFzc2VydE5vdE51bGwoIkphdmE4RWxlbWVudFByb2Nlc3NvciNleGFtaW5lTGFtYmRhU3Bl
Y2lmaWNzOiBUeXBlIGVsZW1lbnQgZm9yIExhbWJkYVRlc3Qgc2hvdWxkIG5vdCBiZSBudWxsIiwg
YW5ub3RhdGVkVHlwZSk7CisJCWFzc2VydEZhbHNlKCJKYXZhOEVsZW1lbnRQcm9jZXNzb3IjZXhh
bWluZUxhbWJkYVNwZWNpZmljczogVHlwZSBMYW1iZGFUZXN0IGlzIG5vdCBhIGZ1bmN0aW9uYWwg
aW50ZXJmYWNlIiwgX2VsZW1lbnRVdGlscy5pc0Z1bmN0aW9uYWxJbnRlcmZhY2UoYW5ub3RhdGVk
VHlwZSkpOworCQlMaXN0PD8gZXh0ZW5kcyBFbGVtZW50PiBtZW1iZXJzID0gX2VsZW1lbnRVdGls
cy5nZXRBbGxNZW1iZXJzKGFubm90YXRlZFR5cGUpOworCQlFeGVjdXRhYmxlRWxlbWVudCBtZXRo
b2QgPSBudWxsOworCQlmb3IgKEV4ZWN1dGFibGVFbGVtZW50IG1lbWJlciA6IEVsZW1lbnRGaWx0
ZXIubWV0aG9kc0luKG1lbWJlcnMpKSB7CisJCQlpZiAoImZvbyIuZXF1YWxzKG1lbWJlci5nZXRT
aW1wbGVOYW1lKCkudG9TdHJpbmcoKSkpIHsKKwkJCQltZXRob2QgPSBtZW1iZXI7CisJCQkJYnJl
YWs7CisJCQl9CisJCX0KKwkJYXNzZXJ0Tm90TnVsbCgiSmF2YThFbGVtZW50UHJvY2Vzc29yI2V4
YW1pbmVMYW1iZGFTcGVjaWZpY3M6IEVsZW1lbnQgZm9yIG1ldGhvZCBmb28gc2hvdWxkIG5vdCBi
ZSBudWxsIiwgbWV0aG9kKTsKKwkJYXNzZXJ0RmFsc2UoIkphdmE4RWxlbWVudFByb2Nlc3NvciNl
eGFtaW5lTGFtYmRhU3BlY2lmaWNzOiBNZXRob2QgZm9vIGlzIG5vdCBhIGRlZmF1bHQgbWV0aG9k
IiwgbWV0aG9kLmlzRGVmYXVsdCgpKTsKKworCQlhbm5vdGF0ZWRUeXBlID0gX2VsZW1lbnRVdGls
cy5nZXRUeXBlRWxlbWVudCgidGFyZ2V0cy5tb2RlbDguRGVmYXVsdEludGVyZmFjZSIpOworCQlh
c3NlcnROb3ROdWxsKCJKYXZhOEVsZW1lbnRQcm9jZXNzb3IjZXhhbWluZUxhbWJkYVNwZWNpZmlj
czogVHlwZSBlbGVtZW50IGZvciBEZWZhdWx0SW50ZXJmYWNlIHNob3VsZCBub3QgYmUgbnVsbCIs
IGFubm90YXRlZFR5cGUpOworCQlhc3NlcnRGYWxzZSgiSmF2YThFbGVtZW50UHJvY2Vzc29yI2V4
YW1pbmVMYW1iZGFTcGVjaWZpY3M6IFR5cGUgRGVmYXVsdEludGVyZmFjZSBpcyBub3QgYSBmdW5j
dGlvbmFsIGludGVyZmFjZSIsIF9lbGVtZW50VXRpbHMuaXNGdW5jdGlvbmFsSW50ZXJmYWNlKGFu
bm90YXRlZFR5cGUpKTsKKworCQltZXRob2QgPSBudWxsOworCQltZW1iZXJzID0gX2VsZW1lbnRV
dGlscy5nZXRBbGxNZW1iZXJzKGFubm90YXRlZFR5cGUpOworCQlmb3IgKEV4ZWN1dGFibGVFbGVt
ZW50IG1lbWJlciA6IEVsZW1lbnRGaWx0ZXIubWV0aG9kc0luKG1lbWJlcnMpKSB7CisJCQlpZiAo
ImRlZmF1bHRNZXRob2QiLmVxdWFscyhtZW1iZXIuZ2V0U2ltcGxlTmFtZSgpLnRvU3RyaW5nKCkp
KSB7CisJCQkJbWV0aG9kID0gbWVtYmVyOworCQkJCWJyZWFrOworCQkJfQorCQl9CisJCWFzc2Vy
dE5vdE51bGwoIkphdmE4RWxlbWVudFByb2Nlc3NvciNleGFtaW5lTGFtYmRhU3BlY2lmaWNzOiBF
bGVtZW50IGZvciBtZXRob2QgZGVmYXVsdE1ldGhvZCgpIHNob3VsZCBub3QgYmUgbnVsbCIsIG1l
dGhvZCk7CisJCWFzc2VydFRydWUoIkphdmE4RWxlbWVudFByb2Nlc3NvciNleGFtaW5lTGFtYmRh
U3BlY2lmaWNzOiBNZXRob2QgZGVmYXVsdE1ldGhvZCgpIHNob3VsZCBiZSBhIGRlZmF1bHQgbWV0
aG9kIiwgbWV0aG9kLmlzRGVmYXVsdCgpKTsKKworCQltZXRob2QgPSBudWxsOworCQlmb3IgKEV4
ZWN1dGFibGVFbGVtZW50IG1lbWJlciA6IEVsZW1lbnRGaWx0ZXIubWV0aG9kc0luKG1lbWJlcnMp
KSB7CisJCQlpZiAoInN0YXRpY01ldGhvZCIuZXF1YWxzKG1lbWJlci5nZXRTaW1wbGVOYW1lKCku
dG9TdHJpbmcoKSkpIHsKKwkJCQltZXRob2QgPSBtZW1iZXI7CisJCQkJYnJlYWs7CisJCQl9CisJ
CX0KKwkJYXNzZXJ0Tm90TnVsbCgiSmF2YThFbGVtZW50UHJvY2Vzc29yI2V4YW1pbmVMYW1iZGFT
cGVjaWZpY3M6IEVsZW1lbnQgZm9yIG1ldGhvZCBzdGF0aWNNZXRob2QoKSBzaG91bGQgbm90IGJl
IG51bGwiLCBtZXRob2QpOworCQlhc3NlcnRGYWxzZSgiSmF2YThFbGVtZW50UHJvY2Vzc29yI2V4
YW1pbmVMYW1iZGFTcGVjaWZpY3M6IE1ldGhvZCBzdGF0aWNNZXRob2QoKSBzaG91bGUgbm90IGJl
IGEgZGVmYXVsdCBtZXRob2QiLCBtZXRob2QuaXNEZWZhdWx0KCkpOworCisJCWFubm90YXRlZFR5
cGUgPSBfZWxlbWVudFV0aWxzLmdldFR5cGVFbGVtZW50KCJ0YXJnZXRzLm1vZGVsOC5GdW5jdGlv
bmFsSW50ZXJmYWNlIik7CisJCWFzc2VydE5vdE51bGwoIkphdmE4RWxlbWVudFByb2Nlc3NvciNl
eGFtaW5lTGFtYmRhU3BlY2lmaWNzOiBUeXBlIGVsZW1lbnQgZm9yIEZ1bmN0aW9uYWxJbnRlcmZh
Y2Ugc2hvdWxkIG5vdCBiZSBudWxsIiwgYW5ub3RhdGVkVHlwZSk7CisJCWFzc2VydFRydWUoIkph
dmE4RWxlbWVudFByb2Nlc3NvciNleGFtaW5lTGFtYmRhU3BlY2lmaWNzOiBUeXBlIEZ1bmN0aW9u
YWxJbnRlcmZhY2Ugc2hvdWxkIGJlIGEgZnVuY3Rpb25hbCBpbnRlcmZhY2UiLCBfZWxlbWVudFV0
aWxzLmlzRnVuY3Rpb25hbEludGVyZmFjZShhbm5vdGF0ZWRUeXBlKSk7CisKKwkJbWV0aG9kID0g
bnVsbDsKKwkJbWVtYmVycyA9IF9lbGVtZW50VXRpbHMuZ2V0QWxsTWVtYmVycyhhbm5vdGF0ZWRU
eXBlKTsKKwkJZm9yIChFeGVjdXRhYmxlRWxlbWVudCBtZW1iZXIgOiBFbGVtZW50RmlsdGVyLm1l
dGhvZHNJbihtZW1iZXJzKSkgeworCQkJaWYgKCJhYnN0cmFjdE1ldGhvZCIuZXF1YWxzKG1lbWJl
ci5nZXRTaW1wbGVOYW1lKCkudG9TdHJpbmcoKSkpIHsKKwkJCQltZXRob2QgPSBtZW1iZXI7CisJ
CQkJYnJlYWs7CisJCQl9CisJCX0KKwkJYXNzZXJ0Tm90TnVsbCgiSmF2YThFbGVtZW50UHJvY2Vz
c29yI2V4YW1pbmVMYW1iZGFTcGVjaWZpY3M6IEVsZW1lbnQgZm9yIG1ldGhvZCBhYnN0cmFjdE1l
dGhvZCgpIHNob3VsZCBub3QgYmUgbnVsbCIsIG1ldGhvZCk7CisJCWFzc2VydEZhbHNlKCJKYXZh
OEVsZW1lbnRQcm9jZXNzb3IjZXhhbWluZUxhbWJkYVNwZWNpZmljczogTWV0aG9kIGFic3RyYWN0
TWV0aG9kKCkgc2hvdWxkIG5vdCBiZSBhIGRlZmF1bHQgbWV0aG9kIiwgbWV0aG9kLmlzRGVmYXVs
dCgpKTsKKwl9CisKKwlwdWJsaWMgdm9pZCB0ZXN0U0U4U3BlY2lmaWNzKCkgeworCQlUeXBlRWxl
bWVudCBhbm5vdGF0ZWRUeXBlID0gX2VsZW1lbnRVdGlscy5nZXRUeXBlRWxlbWVudCgidGFyZ2V0
cy5tb2RlbDguWCIpOworCQlleGFtaW5lU0U4QW5ub3RhdGlvbk1ldGhvZHMoIkphdmE4RWxlbWVu
dFByb2Nlc3NvciNleGFtaW5lU0U4U3BlY2lmaWNzOiAiLCBhbm5vdGF0ZWRUeXBlLCAiYyIpOwor
CisJCUxpc3Q8PyBleHRlbmRzIEVsZW1lbnQ+IG1lbWJlcnMgPSBfZWxlbWVudFV0aWxzLmdldEFs
bE1lbWJlcnMoYW5ub3RhdGVkVHlwZSk7CisJCUV4ZWN1dGFibGVFbGVtZW50IG1ldGhvZCA9IG51
bGw7CisJCVZhcmlhYmxlRWxlbWVudCBmaWVsZCA9IG51bGwsIGZpZWxkMSA9IG51bGw7CisJCUV4
ZWN1dGFibGVFbGVtZW50IG1ldGhvZDIgPSBudWxsOworCQlmb3IgKEVsZW1lbnQgbWVtYmVyIDog
bWVtYmVycykgeworCQkJaWYgKCJmb28iLmVxdWFscyhtZW1iZXIuZ2V0U2ltcGxlTmFtZSgpLnRv
U3RyaW5nKCkpKSB7CisJCQkJbWV0aG9kID0gKEV4ZWN1dGFibGVFbGVtZW50KSBtZW1iZXI7CisJ
CQl9IGVsc2UgaWYgKCJfZmllbGQiLmVxdWFscyhtZW1iZXIuZ2V0U2ltcGxlTmFtZSgpLnRvU3Ry
aW5nKCkpKSB7CisJCQkJZmllbGQgPSAoVmFyaWFibGVFbGVtZW50KSBtZW1iZXI7CisJCQl9IGVs
c2UgaWYgKCJub0Fubm90YXRpb25IZXJlIi5lcXVhbHMobWVtYmVyLmdldFNpbXBsZU5hbWUoKS50
b1N0cmluZygpKSkgeworCQkJCW1ldGhvZDIgPSAoRXhlY3V0YWJsZUVsZW1lbnQpIG1lbWJlcjsK
KwkJCX0gZWxzZSBpZiAoIl9maWVsZDEiLmVxdWFscyhtZW1iZXIuZ2V0U2ltcGxlTmFtZSgpLnRv
U3RyaW5nKCkpKSB7CisJCQkJZmllbGQxID0gKFZhcmlhYmxlRWxlbWVudCkgbWVtYmVyOworCQkJ
fQorCQl9CisJCWFzc2VydE5vdE51bGwoIk1ldGhvZCBzaG91bGQgbm90IGJlIG51bGwiLCBtZXRo
b2QpOworCQlUeXBlTWlycm9yIHR5cGVNaXJyb3IgPSBtZXRob2QuZ2V0UmV0dXJuVHlwZSgpOwor
CQlhc3NlcnROb3ROdWxsKCJKYXZhOEVsZW1lbnRQcm9jZXNzb3IjZXhhbWluZVNFOFNwZWNpZmlj
czogRWxlbWVudCBmb3IgbWV0aG9kIGZvbyBzaG91bGQgbm90IGJlIG51bGwiLCB0eXBlTWlycm9y
KTsKKwkJZXhhbWluZVNFOEFubm90YXRpb25NZXRob2RzKCJKYXZhOEVsZW1lbnRQcm9jZXNzb3Ij
ZXhhbWluZVNFOFNwZWNpZmljczogIiwgdHlwZU1pcnJvciwgIm0iKTsKKwkJTGlzdDw/IGV4dGVu
ZHMgQW5ub3RhdGlvbk1pcnJvcj4gbGlzdCA9IHR5cGVNaXJyb3IuZ2V0QW5ub3RhdGlvbk1pcnJv
cnMoKTsKKwkJYXNzZXJ0RXF1YWxzKCJKYXZhOEVsZW1lbnRQcm9jZXNzb3IjZXhhbWluZVNFOFNw
ZWNpZmljczogSW5jb3JyZWN0IG5vIG9mIGFubm90YXRpb24gbWlycm9ycyIsIDEsIGxpc3Quc2l6
ZSgpKTsKKwkJYXNzZXJ0Tm90TnVsbCgiSmF2YThFbGVtZW50UHJvY2Vzc29yI2V4YW1pbmVTRThT
cGVjaWZpY3M6IEVsZW1lbnQgZm9yIGZpZWxkIF9maWVsZCBzaG91bGQgbm90IGJlIG51bGwiLCBm
aWVsZCk7CisJCXR5cGVNaXJyb3IgPSBmaWVsZC5hc1R5cGUoKTsgCisJCWV4YW1pbmVTRThBbm5v
dGF0aW9uTWV0aG9kcygiSmF2YThFbGVtZW50UHJvY2Vzc29yI2V4YW1pbmVTRThTcGVjaWZpY3M6
ICIsIHR5cGVNaXJyb3IsICJmIik7CisJCQorCQl0eXBlTWlycm9yID0gZmllbGQxLmFzVHlwZSgp
OworCQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZU1pcnJvciwgbmV3IFN0cmluZ1tdeyJAVHlw
ZSh2YWx1ZT1mMSkifSk7CisJCQorCQl0eXBlTWlycm9yID0gbWV0aG9kMi5nZXRSZXR1cm5UeXBl
KCk7CisJCWFzc2VydE5vdE51bGwoIkphdmE4RWxlbWVudFByb2Nlc3NvciNleGFtaW5lU0U4U3Bl
Y2lmaWNzOiBFbGVtZW50IGZvciBtZXRob2Qgbm9Bbm5vdGF0aW9uSGVyZSBzaG91bGQgbm90IGJl
IG51bGwiLCB0eXBlTWlycm9yKTsKKwkJVHlwZSBhbm5vdCA9IHR5cGVNaXJyb3IuZ2V0QW5ub3Rh
dGlvbihUeXBlLmNsYXNzKTsKKwkJYXNzZXJ0TnVsbCgiQW5ub3RhdGlvbiBzaG91bGQgbm90IGJl
IHByZXNlbnQiLCBhbm5vdCk7CisJCUFubm90YXRpb25bXSBhbm5vdHMgPSB0eXBlTWlycm9yLmdl
dEFubm90YXRpb25zQnlUeXBlKFR5cGUuY2xhc3MpOworCQlhc3NlcnRFcXVhbHMoIkFubm90YXRp
b24gaXMgbm90IGVtcHR5IGxpc3QiLCAwLCBhbm5vdHMubGVuZ3RoKTsKKwl9CisJCisJcHVibGlj
IHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9ucygpIHsKKwkJVHlwZUVsZW1lbnQgYW5ub3RhdGVkVHlw
ZSA9IF9lbGVtZW50VXRpbHMuZ2V0VHlwZUVsZW1lbnQoInRhcmdldHMubW9kZWw4LlgiKTsKKwkJ
VHlwZU1pcnJvciBzdXBlclR5cGUgPSBhbm5vdGF0ZWRUeXBlLmdldFN1cGVyY2xhc3MoKTsKKwkJ
YXNzZXJ0Tm90TnVsbCgiSmF2YThFbGVtZW50UHJvY2Vzc29yI2V4YW1pbmVTRThTcGVjaWZpY3M6
IHN1cGVyIHR5cGUgbm90IGJlIG51bGwiLCBzdXBlclR5cGUpOworCQl2ZXJpZnlUeXBlQW5ub3Rh
dGlvbnMoc3VwZXJUeXBlLCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPXMpIn0pOworCisJCUxp
c3Q8PyBleHRlbmRzIFR5cGVNaXJyb3I+IGludGVyZmFjZXMgID0gYW5ub3RhdGVkVHlwZS5nZXRJ
bnRlcmZhY2VzKCk7CisJCWFzc2VydE5vdE51bGwoIkphdmE4RWxlbWVudFByb2Nlc3NvciNleGFt
aW5lU0U4U3BlY2lmaWNzOiBzdXBlciBpbnRlcmZhY2VzIGxpc3Qgc2hvdWxkIG5vdCBiZSBudWxs
IiwgaW50ZXJmYWNlcyk7CisJCWFzc2VydEVxdWFscygiSmF2YThFbGVtZW50UHJvY2Vzc29yI2V4
YW1pbmVTRThTcGVjaWZpY3M6IGluY29ycmVjdCBubyBvZiBzdXBlciBpbnRlcmZhY2VzIiwgMiwg
aW50ZXJmYWNlcy5zaXplKCkpOworCQlzdXBlclR5cGUgPSBpbnRlcmZhY2VzLmdldCgwKTsKKwkJ
dmVyaWZ5VHlwZUFubm90YXRpb25zKHN1cGVyVHlwZSwgbmV3IFN0cmluZ1tdeyJAVHlwZSh2YWx1
ZT1pMSkifSk7CisJCXN1cGVyVHlwZSA9IGludGVyZmFjZXMuZ2V0KDEpOworCQl2ZXJpZnlUeXBl
QW5ub3RhdGlvbnMoc3VwZXJUeXBlLCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPWkyKSJ9KTsK
Kwl9CisJCisJcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczEoKSB7CisJCVR5cGVFbGVt
ZW50IGFubm90YXRlZFR5cGUgPSBfZWxlbWVudFV0aWxzLmdldFR5cGVFbGVtZW50KCJ0YXJnZXRz
Lm1vZGVsOC5YIik7CisJCUxpc3Q8PyBleHRlbmRzIEVsZW1lbnQ+IG1lbWJlcnMgPSBfZWxlbWVu
dFV0aWxzLmdldEFsbE1lbWJlcnMoYW5ub3RhdGVkVHlwZSk7CisJCUV4ZWN1dGFibGVFbGVtZW50
IG1ldGhvZCA9IG51bGw7CisJCWZvciAoRWxlbWVudCBtZW1iZXIgOiBtZW1iZXJzKSB7CisJCQlp
ZiAoImJhciIuZXF1YWxzKG1lbWJlci5nZXRTaW1wbGVOYW1lKCkudG9TdHJpbmcoKSkpIHsKKwkJ
CQltZXRob2QgPSAoRXhlY3V0YWJsZUVsZW1lbnQpIG1lbWJlcjsKKwkJCX0KKwkJfQorCQlMaXN0
PD8gZXh0ZW5kcyBWYXJpYWJsZUVsZW1lbnQ+IHBhcmFtcyA9IG1ldGhvZC5nZXRQYXJhbWV0ZXJz
KCk7CisJCWFzc2VydEVxdWFscygiSW5jb3JyZWN0IG5vIG9mIHBhcmFtcyBmb3IgbWV0aG9kIGJh
cigpIiwgMiwgcGFyYW1zLnNpemUoKSk7CisJCVZhcmlhYmxlRWxlbWVudCBwYXJhbSA9IChWYXJp
YWJsZUVsZW1lbnQpIHBhcmFtcy5nZXQoMCk7CisJCVR5cGVNaXJyb3IgdHlwZU1pcnJvciA9IHBh
cmFtLmFzVHlwZSgpOworCQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZU1pcnJvciwgbmV3IFN0
cmluZ1tdeyJAVHlwZSh2YWx1ZT1wMSkifSk7CisJCXBhcmFtID0gKFZhcmlhYmxlRWxlbWVudCkg
cGFyYW1zLmdldCgxKTsKKwkJdHlwZU1pcnJvciA9IHBhcmFtLmFzVHlwZSgpOworCQl2ZXJpZnlU
eXBlQW5ub3RhdGlvbnModHlwZU1pcnJvciwgbmV3IFN0cmluZ1tdeyJAVHlwZSh2YWx1ZT1wMiki
fSk7CisJfQorCQorCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnMyKCkgeworCQlUeXBl
RWxlbWVudCBhbm5vdGF0ZWRUeXBlID0gX2VsZW1lbnRVdGlscy5nZXRUeXBlRWxlbWVudCgidGFy
Z2V0cy5tb2RlbDguWSIpOworCQlMaXN0PD8gZXh0ZW5kcyBFbGVtZW50PiBtZW1iZXJzID0gX2Vs
ZW1lbnRVdGlscy5nZXRBbGxNZW1iZXJzKGFubm90YXRlZFR5cGUpOworCQlWYXJpYWJsZUVsZW1l
bnQgZmllbGQyID0gbnVsbDsKKwkJVmFyaWFibGVFbGVtZW50IGZpZWxkMyA9IG51bGw7CisJCWZv
ciAoRWxlbWVudCBtZW1iZXIgOiBtZW1iZXJzKSB7CisJCQlpZiAoIl9maWVsZDIiLmVxdWFscyht
ZW1iZXIuZ2V0U2ltcGxlTmFtZSgpLnRvU3RyaW5nKCkpKSB7CisJCQkJZmllbGQyID0gKFZhcmlh
YmxlRWxlbWVudCkgbWVtYmVyOworCQkJfSBlbHNlIGlmICgiX2ZpZWxkMyIuZXF1YWxzKG1lbWJl
ci5nZXRTaW1wbGVOYW1lKCkudG9TdHJpbmcoKSkpIHsKKwkJCQlmaWVsZDMgPSAoVmFyaWFibGVF
bGVtZW50KSBtZW1iZXI7CisJCQl9CisJCX0KKwkJCisJCS8vQFR5cGUoImYiKSBTdHJpbmcgQFR5
cGUoImYxIikgW10gQFR5cGUoImYyIikgW10gX2ZpZWxkMiBAVHlwZSgiZjMiKSBbXSwgX2ZpZWxk
MyBAVHlwZSgiZjQiKSBbXVtdID0gbnVsbDsKKwkJYXNzZXJ0Tm90TnVsbCgiSmF2YThFbGVtZW50
UHJvY2Vzc29yI2V4YW1pbmVTRThTcGVjaWZpY3M6IEVsZW1lbnQgZm9yIGZpZWxkIF9maWVsZDIg
c2hvdWxkIG5vdCBiZSBudWxsIiwgZmllbGQyKTsKKwkJVHlwZU1pcnJvciB0eXBlTWlycm9yID0g
ZmllbGQyLmFzVHlwZSgpOworCQlhc3NlcnRFcXVhbHMoIlNob3VsZCBiZSBhbiBhcnJheSB0eXBl
IiwgVHlwZUtpbmQuQVJSQVksIHR5cGVNaXJyb3IuZ2V0S2luZCgpKTsKKwkJdmVyaWZ5VHlwZUFu
bm90YXRpb25zKHR5cGVNaXJyb3IsIG5ldyBTdHJpbmdbXXsiQFR5cGUodmFsdWU9ZjMpIn0pOwor
CQl0eXBlTWlycm9yID0gKChBcnJheVR5cGUpIHR5cGVNaXJyb3IpLmdldENvbXBvbmVudFR5cGUo
KTsKKwkJYXNzZXJ0RXF1YWxzKCJTaG91bGQgYmUgYW4gYXJyYXkgdHlwZSIsIFR5cGVLaW5kLkFS
UkFZLCB0eXBlTWlycm9yLmdldEtpbmQoKSk7CisJCXZlcmlmeVR5cGVBbm5vdGF0aW9ucyh0eXBl
TWlycm9yLCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPWYxKSJ9KTsKKwkJdHlwZU1pcnJvciA9
ICgoQXJyYXlUeXBlKSB0eXBlTWlycm9yKS5nZXRDb21wb25lbnRUeXBlKCk7CisJCWFzc2VydEVx
dWFscygiU2hvdWxkIGJlIGFuIGFycmF5IHR5cGUiLCBUeXBlS2luZC5BUlJBWSwgdHlwZU1pcnJv
ci5nZXRLaW5kKCkpOworCQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZU1pcnJvciwgbmV3IFN0
cmluZ1tdeyJAVHlwZSh2YWx1ZT1mMikifSk7CisKKwkJYXNzZXJ0Tm90TnVsbCgiSmF2YThFbGVt
ZW50UHJvY2Vzc29yI2V4YW1pbmVTRThTcGVjaWZpY3M6IEVsZW1lbnQgZm9yIGZpZWxkIF9maWVs
ZDMgc2hvdWxkIG5vdCBiZSBudWxsIiwgZmllbGQzKTsKKwkJdHlwZU1pcnJvciA9IGZpZWxkMy5h
c1R5cGUoKTsKKwkJLy8gVGhlIHNlY29uZCBmaWVsZCBiaW5kaW5nIGRvZXNuJ3Qgc2VlbSB0byBo
YXZlIHRoZSBhbm5vdGF0aW9ucy4gVG8gYmUgaW52ZXN0aWdhdGVkCisJCXZlcmlmeVR5cGVBbm5v
dGF0aW9ucyh0eXBlTWlycm9yLCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPWY0KSJ9KTsKKwkJ
dHlwZU1pcnJvciA9ICgoQXJyYXlUeXBlKSB0eXBlTWlycm9yKS5nZXRDb21wb25lbnRUeXBlKCk7
CisJCWFzc2VydEVxdWFscygiU2hvdWxkIGJlIGFuIGFycmF5IHR5cGUiLCBUeXBlS2luZC5BUlJB
WSwgdHlwZU1pcnJvci5nZXRLaW5kKCkpOworCQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZU1p
cnJvciwgbmV3IFN0cmluZ1tde30pOworCQl0eXBlTWlycm9yID0gKChBcnJheVR5cGUpIHR5cGVN
aXJyb3IpLmdldENvbXBvbmVudFR5cGUoKTsKKwkJYXNzZXJ0RXF1YWxzKCJTaG91bGQgYmUgYW4g
YXJyYXkgdHlwZSIsIFR5cGVLaW5kLkFSUkFZLCB0eXBlTWlycm9yLmdldEtpbmQoKSk7CisJCXZl
cmlmeVR5cGVBbm5vdGF0aW9ucyh0eXBlTWlycm9yLCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVl
PWYxKSJ9KTsKKwkJdHlwZU1pcnJvciA9ICgoQXJyYXlUeXBlKSB0eXBlTWlycm9yKS5nZXRDb21w
b25lbnRUeXBlKCk7CisJCWFzc2VydEVxdWFscygiU2hvdWxkIGJlIGFuIGFycmF5IHR5cGUiLCBU
eXBlS2luZC5BUlJBWSwgdHlwZU1pcnJvci5nZXRLaW5kKCkpOworCQl2ZXJpZnlUeXBlQW5ub3Rh
dGlvbnModHlwZU1pcnJvciwgbmV3IFN0cmluZ1tdeyJAVHlwZSh2YWx1ZT1mMikifSk7CisJfQor
CQorCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnMzKCkgeworCQlUeXBlRWxlbWVudCBh
bm5vdGF0ZWRUeXBlID0gX2VsZW1lbnRVdGlscy5nZXRUeXBlRWxlbWVudCgidGFyZ2V0cy5tb2Rl
bDguWSIpOworCQlMaXN0PD8gZXh0ZW5kcyBFbGVtZW50PiBtZW1iZXJzID0gX2VsZW1lbnRVdGls
cy5nZXRBbGxNZW1iZXJzKGFubm90YXRlZFR5cGUpOworCQlFeGVjdXRhYmxlRWxlbWVudCBtZXRo
b2QgPSBudWxsOworCQlmb3IgKEVsZW1lbnQgbWVtYmVyIDogbWVtYmVycykgeworCQkJaWYgKCJm
b28iLmVxdWFscyhtZW1iZXIuZ2V0U2ltcGxlTmFtZSgpLnRvU3RyaW5nKCkpKSB7CisJCQkJbWV0
aG9kID0gKEV4ZWN1dGFibGVFbGVtZW50KSBtZW1iZXI7CisJCQl9CisJCX0KKwkJLy8gQFR5cGUo
Im0iKSBTdHJpbmcgQFR5cGUoIm0xIikgW10gZm9vKCkgQFR5cGUoIm0yIikgW10gQFR5cGUoIm0z
IikgW10ge30KKwkJYXNzZXJ0Tm90TnVsbCgiTWV0aG9kIHNob3VsZCBub3QgYmUgbnVsbCIsIG1l
dGhvZCk7CisJCVR5cGVNaXJyb3IgdHlwZU1pcnJvciA9IG1ldGhvZC5nZXRSZXR1cm5UeXBlKCk7
CisJCXZlcmlmeVR5cGVBbm5vdGF0aW9ucyh0eXBlTWlycm9yLCBuZXcgU3RyaW5nW117IkBUeXBl
KHZhbHVlPW0yKSJ9KTsKKwkJYXNzZXJ0RXF1YWxzKCJTaG91bGQgYmUgYW4gYXJyYXkgdHlwZSIs
IFR5cGVLaW5kLkFSUkFZLCB0eXBlTWlycm9yLmdldEtpbmQoKSk7CisJCXR5cGVNaXJyb3IgPSAo
KEFycmF5VHlwZSkgdHlwZU1pcnJvcikuZ2V0Q29tcG9uZW50VHlwZSgpOworCQl2ZXJpZnlUeXBl
QW5ub3RhdGlvbnModHlwZU1pcnJvciwgbmV3IFN0cmluZ1tdeyJAVHlwZSh2YWx1ZT1tMykifSk7
CisJCWFzc2VydEVxdWFscygiU2hvdWxkIGJlIGFuIGFycmF5IHR5cGUiLCBUeXBlS2luZC5BUlJB
WSwgdHlwZU1pcnJvci5nZXRLaW5kKCkpOworCQl0eXBlTWlycm9yID0gKChBcnJheVR5cGUpIHR5
cGVNaXJyb3IpLmdldENvbXBvbmVudFR5cGUoKTsKKwkJdmVyaWZ5VHlwZUFubm90YXRpb25zKHR5
cGVNaXJyb3IsIG5ldyBTdHJpbmdbXXsiQFR5cGUodmFsdWU9bTEpIn0pOworCQlhc3NlcnRFcXVh
bHMoIlNob3VsZCBiZSBhbiBhcnJheSB0eXBlIiwgVHlwZUtpbmQuQVJSQVksIHR5cGVNaXJyb3Iu
Z2V0S2luZCgpKTsKKwkJdHlwZU1pcnJvciA9ICgoQXJyYXlUeXBlKSB0eXBlTWlycm9yKS5nZXRD
b21wb25lbnRUeXBlKCk7CisJCXZlcmlmeVR5cGVBbm5vdGF0aW9ucyh0eXBlTWlycm9yLCBuZXcg
U3RyaW5nW117IkBUeXBlKHZhbHVlPW0pIn0pOworCX0KKworCXB1YmxpYyB2b2lkIHRlc3RUeXBl
QW5ub3RhdGlvbnM0KCkgeworCQkvLyB2b2lkIGJhciggQFR5cGUoInAxIikgU3RyaW5nIFtdIGEg
QFR5cGUoInAyIikgW10sIEBUeXBlKCJwMyIpIGludCBAVHlwZSgicDQiKSBbXSBiIFtdIEBUeXBl
KCJwNSIpIFtdKSB7fQorCQlUeXBlRWxlbWVudCBhbm5vdGF0ZWRUeXBlID0gX2VsZW1lbnRVdGls
cy5nZXRUeXBlRWxlbWVudCgidGFyZ2V0cy5tb2RlbDguWSIpOworCQlMaXN0PD8gZXh0ZW5kcyBF
bGVtZW50PiBtZW1iZXJzID0gX2VsZW1lbnRVdGlscy5nZXRBbGxNZW1iZXJzKGFubm90YXRlZFR5
cGUpOworCQlFeGVjdXRhYmxlRWxlbWVudCBtZXRob2QgPSBudWxsOworCQlmb3IgKEVsZW1lbnQg
bWVtYmVyIDogbWVtYmVycykgeworCQkJaWYgKCJiYXIiLmVxdWFscyhtZW1iZXIuZ2V0U2ltcGxl
TmFtZSgpLnRvU3RyaW5nKCkpKSB7CisJCQkJbWV0aG9kID0gKEV4ZWN1dGFibGVFbGVtZW50KSBt
ZW1iZXI7CisJCQl9CisJCX0KKwkJYXNzZXJ0Tm90TnVsbCgiTWV0aG9kIHNob3VsZCBub3QgYmUg
bnVsbCIsIG1ldGhvZCk7CisJCUxpc3Q8PyBleHRlbmRzIFZhcmlhYmxlRWxlbWVudD4gcGFyYW1z
ID0gbWV0aG9kLmdldFBhcmFtZXRlcnMoKTsKKwkJYXNzZXJ0RXF1YWxzKCJJbmNvcnJlY3Qgbm8g
b2YgcGFyYW1zIGZvciBtZXRob2QgYmFyKCkiLCAyLCBwYXJhbXMuc2l6ZSgpKTsKKwkJVmFyaWFi
bGVFbGVtZW50IHBhcmFtID0gKFZhcmlhYmxlRWxlbWVudCkgcGFyYW1zLmdldCgwKTsKKwkJVHlw
ZU1pcnJvciB0eXBlTWlycm9yID0gcGFyYW0uYXNUeXBlKCk7CisJCXZlcmlmeVR5cGVBbm5vdGF0
aW9ucyh0eXBlTWlycm9yLCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPXAyKSJ9KTsKKwkJYXNz
ZXJ0RXF1YWxzKCJTaG91bGQgYmUgYW4gYXJyYXkgdHlwZSIsIFR5cGVLaW5kLkFSUkFZLCB0eXBl
TWlycm9yLmdldEtpbmQoKSk7CisJCXR5cGVNaXJyb3IgPSAoKEFycmF5VHlwZSkgdHlwZU1pcnJv
cikuZ2V0Q29tcG9uZW50VHlwZSgpOworCQkKKwkJdmVyaWZ5VHlwZUFubm90YXRpb25zKHR5cGVN
aXJyb3IsIG5ldyBTdHJpbmdbXXt9KTsKKwkJYXNzZXJ0RXF1YWxzKCJTaG91bGQgYmUgYW4gYXJy
YXkgdHlwZSIsIFR5cGVLaW5kLkFSUkFZLCB0eXBlTWlycm9yLmdldEtpbmQoKSk7CisJCXR5cGVN
aXJyb3IgPSAoKEFycmF5VHlwZSkgdHlwZU1pcnJvcikuZ2V0Q29tcG9uZW50VHlwZSgpOworCQl2
ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZU1pcnJvciwgbmV3IFN0cmluZ1tdeyJAVHlwZSh2YWx1
ZT1wMSkifSk7CisKKwkJcGFyYW0gPSAoVmFyaWFibGVFbGVtZW50KSBwYXJhbXMuZ2V0KDEpOwor
CQl0eXBlTWlycm9yID0gcGFyYW0uYXNUeXBlKCk7CisJCXZlcmlmeVR5cGVBbm5vdGF0aW9ucyh0
eXBlTWlycm9yLCBuZXcgU3RyaW5nW117fSk7CisJCWFzc2VydEVxdWFscygiU2hvdWxkIGJlIGFu
IGFycmF5IHR5cGUiLCBUeXBlS2luZC5BUlJBWSwgdHlwZU1pcnJvci5nZXRLaW5kKCkpOworCQl0
eXBlTWlycm9yID0gKChBcnJheVR5cGUpIHR5cGVNaXJyb3IpLmdldENvbXBvbmVudFR5cGUoKTsK
KwkJCisJCXZlcmlmeVR5cGVBbm5vdGF0aW9ucyh0eXBlTWlycm9yLCBuZXcgU3RyaW5nW117IkBU
eXBlKHZhbHVlPXA1KSJ9KTsKKwkJYXNzZXJ0RXF1YWxzKCJTaG91bGQgYmUgYW4gYXJyYXkgdHlw
ZSIsIFR5cGVLaW5kLkFSUkFZLCB0eXBlTWlycm9yLmdldEtpbmQoKSk7CisJCXR5cGVNaXJyb3Ig
PSAoKEFycmF5VHlwZSkgdHlwZU1pcnJvcikuZ2V0Q29tcG9uZW50VHlwZSgpOworCQl2ZXJpZnlU
eXBlQW5ub3RhdGlvbnModHlwZU1pcnJvciwgbmV3IFN0cmluZ1tdeyJAVHlwZSh2YWx1ZT1wNCki
fSk7CisJCWFzc2VydEVxdWFscygiU2hvdWxkIGJlIGFuIGFycmF5IHR5cGUiLCBUeXBlS2luZC5B
UlJBWSwgdHlwZU1pcnJvci5nZXRLaW5kKCkpOworCQl0eXBlTWlycm9yID0gKChBcnJheVR5cGUp
IHR5cGVNaXJyb3IpLmdldENvbXBvbmVudFR5cGUoKTsKKwkJdmVyaWZ5VHlwZUFubm90YXRpb25z
KHR5cGVNaXJyb3IsIG5ldyBTdHJpbmdbXXsiQFR5cGUodmFsdWU9cDMpIn0pOworCQkKKwl9CisJ
CisJcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczUoKSB7CisJCS8vIHZvaWQgZm9vMigp
IHRocm93cyAoQFR5cGUoImUxIikgTnVsbFBvaW50ZXJFeGNlcHRpb24sIChAVHlwZSgiZTIiKSBB
cnJheUluZGV4T3V0T2ZCb3VuZHNFeGNlcHRpb24ge30KKwkJVHlwZUVsZW1lbnQgYW5ub3RhdGVk
VHlwZSA9IF9lbGVtZW50VXRpbHMuZ2V0VHlwZUVsZW1lbnQoInRhcmdldHMubW9kZWw4LlkiKTsK
KwkJTGlzdDw/IGV4dGVuZHMgRWxlbWVudD4gbWVtYmVycyA9IF9lbGVtZW50VXRpbHMuZ2V0QWxs
TWVtYmVycyhhbm5vdGF0ZWRUeXBlKTsKKwkJRXhlY3V0YWJsZUVsZW1lbnQgbWV0aG9kID0gbnVs
bDsKKwkJZm9yIChFbGVtZW50IG1lbWJlciA6IG1lbWJlcnMpIHsKKwkJCWlmICgiZm9vMiIuZXF1
YWxzKG1lbWJlci5nZXRTaW1wbGVOYW1lKCkudG9TdHJpbmcoKSkpIHsKKwkJCQltZXRob2QgPSAo
RXhlY3V0YWJsZUVsZW1lbnQpIG1lbWJlcjsKKwkJCX0KKwkJfQorCQlMaXN0PD9leHRlbmRzIFR5
cGVNaXJyb3I+IGV4Y2VwdGlvbnMgPSBtZXRob2QuZ2V0VGhyb3duVHlwZXMoKTsKKwkJYXNzZXJ0
RXF1YWxzKCJJbmNvcnJlY3Qgbm8gb2YgdGhyb3duIGV4Y2VwdGlvbnMiLCAyLCBleGNlcHRpb25z
LnNpemUoKSk7CisJCVR5cGVNaXJyb3IgdHlwZU1pcnJvciA9IGV4Y2VwdGlvbnMuZ2V0KDApOwor
CQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZU1pcnJvciwgbmV3IFN0cmluZ1tdeyJAVHlwZSh2
YWx1ZT1lMSkifSk7CisJCXR5cGVNaXJyb3IgPSBleGNlcHRpb25zLmdldCgxKTsKKwkJdmVyaWZ5
VHlwZUFubm90YXRpb25zKHR5cGVNaXJyb3IsIG5ldyBTdHJpbmdbXXsiQFR5cGUodmFsdWU9ZTIp
In0pOworCX0KKworCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnM2KCkgeworCQkvLyB2
b2lkIGJhcjIgKEBUeXBlKCJwMSIpIFN0cmluZyBAVHlwZSgicDIiKSBbXSBAVHlwZSgicDMiKSAu
Li4gYXJncykge30KKwkJVHlwZUVsZW1lbnQgYW5ub3RhdGVkVHlwZSA9IF9lbGVtZW50VXRpbHMu
Z2V0VHlwZUVsZW1lbnQoInRhcmdldHMubW9kZWw4LlkiKTsKKwkJTGlzdDw/IGV4dGVuZHMgRWxl
bWVudD4gbWVtYmVycyA9IF9lbGVtZW50VXRpbHMuZ2V0QWxsTWVtYmVycyhhbm5vdGF0ZWRUeXBl
KTsKKwkJRXhlY3V0YWJsZUVsZW1lbnQgbWV0aG9kID0gbnVsbDsKKwkJZm9yIChFbGVtZW50IG1l
bWJlciA6IG1lbWJlcnMpIHsKKwkJCWlmICgiYmFyMiIuZXF1YWxzKG1lbWJlci5nZXRTaW1wbGVO
YW1lKCkudG9TdHJpbmcoKSkpIHsKKwkJCQltZXRob2QgPSAoRXhlY3V0YWJsZUVsZW1lbnQpIG1l
bWJlcjsKKwkJCX0KKwkJfQorCQlMaXN0PD8gZXh0ZW5kcyBWYXJpYWJsZUVsZW1lbnQ+IHBhcmFt
cyA9IG1ldGhvZC5nZXRQYXJhbWV0ZXJzKCk7CisJCWFzc2VydEVxdWFscygiSW5jb3JyZWN0IG5v
IG9mIHBhcmFtZXRlcnMiLCAxLCBwYXJhbXMuc2l6ZSgpKTsKKwkJVHlwZU1pcnJvciB0eXBlTWly
cm9yID0gcGFyYW1zLmdldCgwKS5hc1R5cGUoKTsKKwkJdmVyaWZ5VHlwZUFubm90YXRpb25zKHR5
cGVNaXJyb3IsIG5ldyBTdHJpbmdbXXsiQFR5cGUodmFsdWU9cDIpIn0pOworCQlhc3NlcnRFcXVh
bHMoIlNob3VsZCBiZSBhbiBhcnJheSB0eXBlIiwgVHlwZUtpbmQuQVJSQVksIHR5cGVNaXJyb3Iu
Z2V0S2luZCgpKTsKKwkJdHlwZU1pcnJvciA9ICgoQXJyYXlUeXBlKSB0eXBlTWlycm9yKS5nZXRD
b21wb25lbnRUeXBlKCk7CisJCXZlcmlmeVR5cGVBbm5vdGF0aW9ucyh0eXBlTWlycm9yLCBuZXcg
U3RyaW5nW117IkBUeXBlKHZhbHVlPXAzKSJ9KTsKKwkJYXNzZXJ0RXF1YWxzKCJTaG91bGQgYmUg
YW4gYXJyYXkgdHlwZSIsIFR5cGVLaW5kLkFSUkFZLCB0eXBlTWlycm9yLmdldEtpbmQoKSk7CisJ
CXR5cGVNaXJyb3IgPSAoKEFycmF5VHlwZSkgdHlwZU1pcnJvcikuZ2V0Q29tcG9uZW50VHlwZSgp
OworCQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZU1pcnJvciwgbmV3IFN0cmluZ1tdeyJAVHlw
ZSh2YWx1ZT1wMSkifSk7CisKKwl9CisKKwlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90YXRpb25z
NygpIHsKKwkJLy8gcHVibGljIGNsYXNzIFogPEBUeXBlKCJ0cDEiKSBLLCBAVHlwZSgidHAyIikg
Vj4geworCQlUeXBlRWxlbWVudCB0eXBlWiA9IF9lbGVtZW50VXRpbHMuZ2V0VHlwZUVsZW1lbnQo
InRhcmdldHMubW9kZWw4LloiKTsKKwkJVHlwZU1pcnJvciB0eXBlTWlycm9yID0gdHlwZVouYXNU
eXBlKCk7CisJCUxpc3Q8PyBleHRlbmRzIFR5cGVQYXJhbWV0ZXJFbGVtZW50PiB0eXBlUGFyYW1z
ID0gdHlwZVouZ2V0VHlwZVBhcmFtZXRlcnMoKTsKKwkJYXNzZXJ0RXF1YWxzKCJJbmNvcnJlY3Qg
bm8gb2YgdHlwZSBwYXJhbXMiLCAyLCB0eXBlUGFyYW1zLnNpemUoKSk7CisJCVR5cGVQYXJhbWV0
ZXJFbGVtZW50IHR5cGVQYXJhbSA9IHR5cGVQYXJhbXMuZ2V0KDApOworCQl2ZXJpZnlUeXBlQW5u
b3RhdGlvbnModHlwZVBhcmFtLCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPXRwMSkifSk7CisJ
CXR5cGVNaXJyb3IgPSB0eXBlUGFyYW0uYXNUeXBlKCk7CisJCXZlcmlmeVR5cGVBbm5vdGF0aW9u
cyh0eXBlTWlycm9yLCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPXRwMSkifSk7CisJCXR5cGVQ
YXJhbSA9IHR5cGVQYXJhbXMuZ2V0KDEpOworCQl0eXBlTWlycm9yID0gdHlwZVBhcmFtLmFzVHlw
ZSgpOworCQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZVBhcmFtLCBuZXcgU3RyaW5nW117IkBU
eXBlKHZhbHVlPXRwMikifSk7CisJCXZlcmlmeVR5cGVBbm5vdGF0aW9ucyh0eXBlTWlycm9yLCBu
ZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPXRwMikifSk7CisJfQorCQorCXB1YmxpYyB2b2lkIHRl
c3RUeXBlQW5ub3RhdGlvbnM4KCkgeworCQlUeXBlRWxlbWVudCB0eXBlWiA9IF9lbGVtZW50VXRp
bHMuZ2V0VHlwZUVsZW1lbnQoInRhcmdldHMubW9kZWw4LloiKTsKKwkJTGlzdDw/IGV4dGVuZHMg
RWxlbWVudD4gbWVtYmVycyA9IF9lbGVtZW50VXRpbHMuZ2V0QWxsTWVtYmVycyh0eXBlWik7CisJ
CUV4ZWN1dGFibGVFbGVtZW50IG1ldGhvZCA9IG51bGw7CisJCVZhcmlhYmxlRWxlbWVudCBmaWVs
ZCA9IG51bGw7CisJCWZvciAoRWxlbWVudCBtZW1iZXIgOiBtZW1iZXJzKSB7CisJCQlpZiAoImZv
byIuZXF1YWxzKG1lbWJlci5nZXRTaW1wbGVOYW1lKCkudG9TdHJpbmcoKSkpIHsKKwkJCQltZXRo
b2QgPSAoRXhlY3V0YWJsZUVsZW1lbnQpIG1lbWJlcjsKKwkJCX0gZWxzZSBpZiAoInoxIi5lcXVh
bHMobWVtYmVyLmdldFNpbXBsZU5hbWUoKS50b1N0cmluZygpKSkgeworCQkJCWZpZWxkID0gKFZh
cmlhYmxlRWxlbWVudCkgbWVtYmVyOworCQkJfQorCQl9CisJCQorCQkvLyBwdWJsaWMgPEBUeXBl
KCJtcDEiKSBULCBAVHlwZSgibXAyIikgVT4gdm9pZCBmb28oKSB7fQkKKwkJTGlzdDw/IGV4dGVu
ZHMgVHlwZVBhcmFtZXRlckVsZW1lbnQ+IHR5cGVQYXJhbXMgPSBtZXRob2QuZ2V0VHlwZVBhcmFt
ZXRlcnMoKTsKKwkJYXNzZXJ0RXF1YWxzKCJJbmNvcnJlY3Qgbm8gb2YgdHlwZSBwYXJhbXMiLCAy
LCB0eXBlUGFyYW1zLnNpemUoKSk7CisJCVR5cGVQYXJhbWV0ZXJFbGVtZW50IHR5cGVQYXJhbSA9
IHR5cGVQYXJhbXMuZ2V0KDApOworCQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZVBhcmFtLCBu
ZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPW1wMSkifSk7CisJCXR5cGVQYXJhbSA9IHR5cGVQYXJh
bXMuZ2V0KDEpOworCQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZVBhcmFtLCBuZXcgU3RyaW5n
W117IkBUeXBlKHZhbHVlPW1wMikifSk7CisJCS8vWjxAVHlwZSgidGExIikgU3RyaW5nLCBAVHlw
ZSgidGEyIikgT2JqZWN0PiB6MSA9IG51bGw7CisJCS8vIEFQSXMgZG9uJ3QgZXhwb3NlIHRoZSB0
eXBlIGFyZ3VtZW50cyBvbiBhIFR5cGVNaXJyb3IKKwkJVHlwZU1pcnJvciB0eXBlTWlycm9yID0g
ZmllbGQuYXNUeXBlKCk7CisJCXZlcmlmeVR5cGVBbm5vdGF0aW9ucyh0eXBlTWlycm9yLCBuZXcg
U3RyaW5nW117fSk7CisJfQorCisJcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczkoKSB7
CisJCVR5cGVFbGVtZW50IGFubm90YXRlZFR5cGUgPSBfZWxlbWVudFV0aWxzLmdldFR5cGVFbGVt
ZW50KCJ0YXJnZXRzLm1vZGVsOC5YIik7CisJCUxpc3Q8PyBleHRlbmRzIEVsZW1lbnQ+IG1lbWJl
cnMgPSBfZWxlbWVudFV0aWxzLmdldEFsbE1lbWJlcnMoYW5ub3RhdGVkVHlwZSk7CisJCQorCQlW
YXJpYWJsZUVsZW1lbnQgZmllbGQyID0gbnVsbDsKKwkJZm9yIChWYXJpYWJsZUVsZW1lbnQgbWVt
YmVyIDogRWxlbWVudEZpbHRlci5maWVsZHNJbihtZW1iZXJzKSkgeworCQkJaWYgKCJfZmllbGQy
Ii5lcXVhbHMobWVtYmVyLmdldFNpbXBsZU5hbWUoKS50b1N0cmluZygpKSkgeworCQkJCWZpZWxk
MiA9IChWYXJpYWJsZUVsZW1lbnQpIG1lbWJlcjsKKwkJCQlicmVhazsKKwkJCX0KKwkJfQorCQlU
eXBlTWlycm9yIHR5cGVNaXJyb3IgPSBmaWVsZDIuYXNUeXBlKCk7CisJCVR5cGUkMSBhbm5vdDEg
PSB0eXBlTWlycm9yLmdldEFubm90YXRpb24oVHlwZSQxLmNsYXNzKTsKKwkJYXNzZXJ0Tm90TnVs
bCgiQW5ub3RhdGlvbiBzaG91bGQgbm90IGJlIG51bGwiLCBhbm5vdDEpOworCQlUeXBlLk9uZSBh
bm5vdDIgPSB0eXBlTWlycm9yLmdldEFubm90YXRpb24oVHlwZS5PbmUuY2xhc3MpOworCQlhc3Nl
cnROb3ROdWxsKCJBbm5vdGF0aW9uIHNob3VsZCBub3QgYmUgbnVsbCIsIGFubm90Mik7CisJfQor
CisJcHJpdmF0ZSBTdHJpbmcgZ2V0RXhjZXB0aW9uU3RhY2tUcmFjZShUaHJvd2FibGUgdCkgewor
CQlTdHJpbmdCdWZmZXIgYnVmID0gbmV3IFN0cmluZ0J1ZmZlcih0LmdldE1lc3NhZ2UoKSk7CisJ
CVN0YWNrVHJhY2VFbGVtZW50W10gdHJhY2VzID0gdC5nZXRTdGFja1RyYWNlKCk7CisJCWZvciAo
aW50IGkgPSAwOyBpIDwgdHJhY2VzLmxlbmd0aDsgaSsrKSB7CisJCQlTdGFja1RyYWNlRWxlbWVu
dCB0cmFjZSA9IHRyYWNlc1tpXTsKKwkJCWJ1Zi5hcHBlbmQoIlxuXHRhdCAiICsgdHJhY2UpOwor
CQkJaWYgKGkgPT0gMTIpCisJCQkJYnJlYWs7IC8vIERvbid0IGR1bXAgYWxsIHN0YWNrcworCQl9
CisJCXJldHVybiBidWYudG9TdHJpbmcoKTsKKworCX0KKworCQorCXByaXZhdGUgdm9pZCB2ZXJp
ZnlUeXBlQW5ub3RhdGlvbnMoQW5ub3RhdGVkQ29uc3RydWN0IGNvbnN0cnVjdCwgU3RyaW5nW10g
YW5ub3RzKSB7CisJCUxpc3Q8PyBleHRlbmRzIEFubm90YXRpb25NaXJyb3I+IGFubm90YXRpb25z
ID0gY29uc3RydWN0LmdldEFubm90YXRpb25NaXJyb3JzKCk7CisJCWFzc2VydEVxdWFscygiSW5j
b3JyZWN0IG5vIG9mIGFubm90YXRpb25zIiwgYW5ub3RzLmxlbmd0aCwgYW5ub3RhdGlvbnMuc2l6
ZSgpKTsKKwkJZm9yKGludCBpID0gMCwgbGVuZ3RoID0gYW5ub3RzLmxlbmd0aDsgaSA8IGxlbmd0
aDsgaSsrKSB7CisJCQlBbm5vdGF0aW9uTWlycm9yIG1pcnJvciA9IGFubm90YXRpb25zLmdldChp
KTsKKwkJCWFzc2VydEVxdWFscygiSW52YWxpZCBhbm5vdGF0aW9uIHZhbHVlIiwgYW5ub3RzW2ld
LCBnZXRBbm5vdGF0aW9uU3RyaW5nKG1pcnJvcikpOworCQl9CisJfQorCXByaXZhdGUgU3RyaW5n
IGdldEFubm90YXRpb25TdHJpbmcoQW5ub3RhdGlvbk1pcnJvciBhbm5vdCkgeworCQlEZWNsYXJl
ZFR5cGUgYW5ub3RUeXBlID0gYW5ub3QuZ2V0QW5ub3RhdGlvblR5cGUoKTsKKwkJVHlwZUVsZW1l
bnQgdHlwZSA9IChUeXBlRWxlbWVudCkgYW5ub3RUeXBlLmFzRWxlbWVudCgpOworCQlTdHJpbmdC
dWZmZXIgYnVmID0gbmV3IFN0cmluZ0J1ZmZlcigiQCIgKyB0eXBlLmdldFNpbXBsZU5hbWUoKSk7
CisJCU1hcDw/IGV4dGVuZHMgRXhlY3V0YWJsZUVsZW1lbnQsID8gZXh0ZW5kcyBBbm5vdGF0aW9u
VmFsdWU+IHZhbHVlcyA9IGFubm90LmdldEVsZW1lbnRWYWx1ZXMoKTsKKwkJU2V0PD8gZXh0ZW5k
cyBFeGVjdXRhYmxlRWxlbWVudD4ga2V5cyA9IHZhbHVlcy5rZXlTZXQoKTsKKwkJYnVmLmFwcGVu
ZCgnKCcpOworCQlmb3IgKEV4ZWN1dGFibGVFbGVtZW50IGV4ZWN1dGFibGVFbGVtZW50IDoga2V5
cykgeyAvLyBATWFya2VyMygpCisJCQlidWYuYXBwZW5kKGV4ZWN1dGFibGVFbGVtZW50LmdldFNp
bXBsZU5hbWUoKSk7CisJCQlidWYuYXBwZW5kKCc9Jyk7CisJCQlBbm5vdGF0aW9uVmFsdWUgdmFs
dWUgPSB2YWx1ZXMuZ2V0KGV4ZWN1dGFibGVFbGVtZW50KTsKKwkJCWJ1Zi5hcHBlbmQodmFsdWUu
Z2V0VmFsdWUoKSk7CisJCX0KKwkJYnVmLmFwcGVuZCgnKScpOworCQlyZXR1cm4gYnVmLnRvU3Ry
aW5nKCk7CisJfQorCXByaXZhdGUgPEEgZXh0ZW5kcyBBbm5vdGF0aW9uPiB2b2lkIGV4YW1pbmVT
RThBbm5vdGF0aW9uTWV0aG9kcyhTdHJpbmcgbXNnLCBBbm5vdGF0ZWRDb25zdHJ1Y3QgY29uc3Ry
dWN0LCAgU3RyaW5nIHZhbHVlKSB7CisJCVR5cGUgYW5ub3QgPSBjb25zdHJ1Y3QuZ2V0QW5ub3Rh
dGlvbihUeXBlLmNsYXNzKTsKKwkJYXNzZXJ0Tm90TnVsbChtc2cgKyAiQW5ub3RhdGlvbiBmb3Ig
ZWxlbWVudCAiICsgY29uc3RydWN0LnRvU3RyaW5nKCkgKyAiIHNob3VsZCBub3QgYmUgbnVsbCIs
IGFubm90KTsKKwkJYXNzZXJ0U2FtZShtc2cgKyAiSW52YWxpZCBhbm5vdGF0aW9uIHR5cGUiICwg
VHlwZS5jbGFzcywgYW5ub3QuYW5ub3RhdGlvblR5cGUoKSk7CisJCWFzc2VydEVxdWFscyhtc2cg
KyAiSW52YWxpZCBhbm5vdGF0aW9uIHZhbHVlIiwgdmFsdWUsIGFubm90LnZhbHVlKCkpOworCQkK
KwkJQW5ub3RhdGlvbltdIGFubm90cyA9IGNvbnN0cnVjdC5nZXRBbm5vdGF0aW9uc0J5VHlwZShU
eXBlLmNsYXNzKTsKKwkJYXNzZXJ0RXF1YWxzKG1zZyArICJJbmNvcnJlY3Qgbm8gb2YgYW5ub3Rh
dGlvbnMiLCAxLCBhbm5vdHMubGVuZ3RoKTsKKwkJYW5ub3QgPSAoVHlwZSkgYW5ub3RzWzBdOwor
CQlhc3NlcnRTYW1lKG1zZyArICJJbnZhbGlkIGFubm90YXRpb24gdHlwZSIgLCBUeXBlLmNsYXNz
LCBhbm5vdHNbMF0uYW5ub3RhdGlvblR5cGUoKSk7CisJCWFzc2VydEVxdWFscyhtc2cgKyAiSW52
YWxpZCBhbm5vdGF0aW9uIHZhbHVlIiwgdmFsdWUsIGFubm90LnZhbHVlKCkpOworCX0KKwkKKwlw
dWJsaWMgdm9pZCByZXBvcnRFcnJvcihTdHJpbmcgbXNnKSB7CisJCXRocm93IG5ldyBBc3NlcnRp
b25GYWlsZWRFcnJvcihtc2cpOworCX0KKwkKKwlwdWJsaWMgdm9pZCBhc3NlcnRUcnVlKFN0cmlu
ZyBtc2csIGJvb2xlYW4gdmFsdWUpIHsKKwkJaWYgKCF2YWx1ZSkgcmVwb3J0RXJyb3IobXNnKTsK
Kwl9CisJcHVibGljIHZvaWQgYXNzZXJ0RmFsc2UoU3RyaW5nIG1zZywgYm9vbGVhbiB2YWx1ZSkg
eworCQlpZiAodmFsdWUpIHJlcG9ydEVycm9yKG1zZyk7CisJfQorCXB1YmxpYyB2b2lkIGFzc2Vy
dFNhbWUoU3RyaW5nIG1zZywgT2JqZWN0IG9iajEsIE9iamVjdCBvYmoyKSB7CisJCWlmIChvYmox
ICE9IG9iajIpIHsKKwkJCXJlcG9ydEVycm9yKG1zZyArICIsIHNob3VsZCBiZSAiICsgb2JqMS50
b1N0cmluZygpICsgIiBidXQgIiArIG9iajIudG9TdHJpbmcoKSk7CisJCX0KKwl9CisJcHVibGlj
IHZvaWQgYXNzZXJ0Tm90TnVsbChTdHJpbmcgbXNnLCBPYmplY3Qgb2JqKSB7CisJCWlmIChvYmog
PT0gbnVsbCkgeworCQkJcmVwb3J0RXJyb3IobXNnKTsKKwkJfQorCX0KKwlwdWJsaWMgdm9pZCBh
c3NlcnROdWxsKFN0cmluZyBtc2csIE9iamVjdCBvYmopIHsKKwkJaWYgKG9iaiAhPSBudWxsKSB7
CisJCQlyZXBvcnRFcnJvcihtc2cpOworCQl9CisJfQorICAgIHB1YmxpYyB2b2lkIGFzc2VydEVx
dWFscyhTdHJpbmcgbWVzc2FnZSwgT2JqZWN0IGV4cGVjdGVkLCBPYmplY3QgYWN0dWFsKSB7Cisg
ICAgICAgIGlmIChlcXVhbHNSZWdhcmRpbmdOdWxsKGV4cGVjdGVkLCBhY3R1YWwpKSB7CisgICAg
ICAgICAgICByZXR1cm47CisgICAgICAgIH0gZWxzZSB7CisgICAgICAgIAlyZXBvcnRFcnJvciht
ZXNzYWdlICsgIiwgZXhwZWN0ZWQgIiArIGV4cGVjdGVkLnRvU3RyaW5nKCkgKyAiIGJ1dCB3YXMg
IiArIGFjdHVhbC50b1N0cmluZygpKTsKKyAgICAgICAgfQorICAgIH0KKworICAgIHN0YXRpYyBi
b29sZWFuIGVxdWFsc1JlZ2FyZGluZ051bGwoT2JqZWN0IGV4cGVjdGVkLCBPYmplY3QgYWN0dWFs
KSB7CisgICAgICAgIGlmIChleHBlY3RlZCA9PSBudWxsKSB7CisgICAgICAgICAgICByZXR1cm4g
YWN0dWFsID09IG51bGw7CisgICAgICAgIH0KKyAgICAgICAgcmV0dXJuIGV4cGVjdGVkLmVxdWFs
cyhhY3R1YWwpOworICAgIH0KKyAgICAKKwlwdWJsaWMgdm9pZCBhc3NlcnRFcXVhbHMoU3RyaW5n
IG1zZywgaW50IGV4cGVjdGVkLCBpbnQgYWN0dWFsKSB7CisJCWlmIChleHBlY3RlZCAhPSBhY3R1
YWwpIHsKKwkJCVN0cmluZ0J1ZmZlciBidWYgPSBuZXcgU3RyaW5nQnVmZmVyKCk7CisJCQlidWYu
YXBwZW5kKG1zZyk7CisJCQlidWYuYXBwZW5kKCIsIGV4cGVjdGVkICIgKyBleHBlY3RlZCArICIg
YnV0IHdhcyAiICsgYWN0dWFsKTsKKwkJCXJlcG9ydEVycm9yKGJ1Zi50b1N0cmluZygpKTsKKwkJ
fQorCX0KKwlwdWJsaWMgdm9pZCBhc3NlcnRFcXVhbHMoT2JqZWN0IGV4cGVjdGVkLCBPYmplY3Qg
YWN0dWFsKSB7CisJCWlmIChleHBlY3RlZCAhPSBhY3R1YWwpIHsKKwkJCQorCQl9CisJfQorCXBy
aXZhdGUgY2xhc3MgQXNzZXJ0aW9uRmFpbGVkRXJyb3IgZXh0ZW5kcyBFcnJvciB7CisJCXByaXZh
dGUgc3RhdGljIGZpbmFsIGxvbmcgc2VyaWFsVmVyc2lvblVJRCA9IDFMOworCisJCXB1YmxpYyBB
c3NlcnRpb25GYWlsZWRFcnJvcihTdHJpbmcgbXNnKSB7CisJCQlzdXBlcihtc2cpOworCQl9CisJ
fQorCQorfQpkaWZmIC0tZ2l0IHJlc291cmNlcy90YXJnZXRzL21vZGVsOC9MYW1iZGFUZXN0Lmph
dmEgcmVzb3VyY2VzL3RhcmdldHMvbW9kZWw4L0xhbWJkYVRlc3QuamF2YQpuZXcgZmlsZSBtb2Rl
IDEwMDY0NAppbmRleCAwMDAwMDAwLi42NTg5ZWIxCi0tLSAvZGV2L251bGwKKysrIHJlc291cmNl
cy90YXJnZXRzL21vZGVsOC9MYW1iZGFUZXN0LmphdmEKQEAgLTAsMCArMSwzNSBAQAorLyoqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioKKyAqIENvcHlyaWdodCAoYykgMjAxMyBJQk0gQ29ycG9yYXRpb24u
CisgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlp
bmcgbWF0ZXJpYWxzCisgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRo
ZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKKyAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMg
ZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CisgKiBodHRwOi8vd3d3LmVjbGlwc2Uu
b3JnL2xlZ2FsL2VwbC12MTAuaHRtbAorICogCisgKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9u
IG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVyIHRoZSBKYXZh
CisgKiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFibGUgZm9yIHRl
c3RpbmcgYW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBjb2RlIGlzIG5vdCBj
b21wYXRpYmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KKyAqIAorICogQ29u
dHJpYnV0b3JzOgorICogICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJIGFuZCBpbXBs
ZW1lbnRhdGlvbgorICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCisKK3BhY2thZ2UgdGFyZ2V0cy5t
b2RlbDg7CisKK3B1YmxpYyBjbGFzcyBMYW1iZGFUZXN0IHsKKwlwdWJsaWMgU3RyaW5nIGZvbygp
IHsKKwkJcmV0dXJuIG51bGw7CisJfQorfSAgICAgCisKK2ludGVyZmFjZSBEZWZhdWx0SW50ZXJm
YWNlIHsKKwlwdWJsaWMgZGVmYXVsdCBTdHJpbmcgZGVmYXVsdE1ldGhvZCAoKSB7CisJCXJldHVy
biBudWxsOworCX0KKwlwdWJsaWMgc3RhdGljIFN0cmluZyBzdGF0aWNNZXRob2QgKCkgeworCQly
ZXR1cm4gbnVsbDsKKwl9Cit9ICAgICAKKworaW50ZXJmYWNlIEZ1bmN0aW9uYWxJbnRlcmZhY2Ug
eworCXB1YmxpYyBhYnN0cmFjdCBTdHJpbmcgYWJzdHJhY3RNZXRob2QgKCk7Cit9ClwgTm8gbmV3
bGluZSBhdCBlbmQgb2YgZmlsZQpkaWZmIC0tZ2l0IHJlc291cmNlcy90YXJnZXRzL21vZGVsOC9Y
LmphdmEgcmVzb3VyY2VzL3RhcmdldHMvbW9kZWw4L1guamF2YQpuZXcgZmlsZSBtb2RlIDEwMDY0
NAppbmRleCAwMDAwMDAwLi5hNjI1YmJlCi0tLSAvZGV2L251bGwKKysrIHJlc291cmNlcy90YXJn
ZXRzL21vZGVsOC9YLmphdmEKQEAgLTAsMCArMSwzNSBAQAorLyoqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioKKyAqIENvcHlyaWdodCAoYykgMjAxMyBJQk0gQ29ycG9yYXRpb24uCisgKiBBbGwgcmlnaHRz
IHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCisg
KiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1Ymxp
YyBMaWNlbnNlIHYxLjAKKyAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBh
bmQgaXMgYXZhaWxhYmxlIGF0CisgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12
MTAuaHRtbAorICogCisgKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGFuIGVhcmx5LWRy
YWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVyIHRoZSBKYXZhCisgKiBDb21tdW5pdHkg
UHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFibGUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1
YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBjb2RlIGlzIG5vdCBjb21wYXRpYmxlIHdpdGgg
YW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KKyAqIAorICogQ29udHJpYnV0b3JzOgorICog
ICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgorICoq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKiovCitwYWNrYWdlIHRhcmdldHMubW9kZWw4OworCitpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLmFwdC50ZXN0cy5hbm5vdGF0aW9ucy5UeXBlOworaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5jb21waWxlci5hcHQudGVzdHMuYW5ub3RhdGlvbnMuVHlwZSQx
OworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb21waWxlci5hcHQudGVzdHMuYW5ub3RhdGlvbnMu
VHlwZS5PbmU7CisKK0BUeXBlKCJjIikKK3B1YmxpYyBjbGFzcyBYIGV4dGVuZHMgQFR5cGUoInMi
KSBPYmplY3QgaW1wbGVtZW50cyBAVHlwZSgiaTEiKSBJLCBAVHlwZSgiaTIiKSBKIHsKKwlAVHlw
ZSgiZiIpIFN0cmluZyBfZmllbGQgPSBudWxsOworCUBUeXBlKCJmMSIpIFggX2ZpZWxkMSA9IG51
bGw7CisJQFR5cGUkMSBAT25lIFN0cmluZyBfZmllbGQyID0gbnVsbDsKKwlwdWJsaWMgdm9pZCBu
b0Fubm90YXRpb25IZXJlKCkgeworCX0KKwlARGVwcmVjYXRlZCBAVHlwZSgibSIpIFN0cmluZyBm
b28oKSB7CisJCXJldHVybiBudWxsOworCX0KKwl2b2lkIGJhcihAVHlwZSgicDEiKSBTdHJpbmcg
cDEsIEBUeXBlKCJwMiIpIFN0cmluZyBwMikge30KK30KKworaW50ZXJmYWNlIEkge30KK2ludGVy
ZmFjZSBKIHt9CmRpZmYgLS1naXQgcmVzb3VyY2VzL3RhcmdldHMvbW9kZWw4L1kuamF2YSByZXNv
dXJjZXMvdGFyZ2V0cy9tb2RlbDgvWS5qYXZhCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAw
MDAwMDAuLjljN2YyYjkKLS0tIC9kZXYvbnVsbAorKysgcmVzb3VyY2VzL3RhcmdldHMvbW9kZWw4
L1kuamF2YQpAQCAtMCwwICsxLDI4IEBACisvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgorICogQ29w
eXJpZ2h0IChjKSAyMDEzIElCTSBDb3Jwb3JhdGlvbi4KKyAqIEFsbCByaWdodHMgcmVzZXJ2ZWQu
IFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKKyAqIGFyZSBtYWRl
IGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2Ug
djEuMAorICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFp
bGFibGUgYXQKKyAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCisg
KiAKKyAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQgc3BlY2lm
aWNhdGlvbiBkZXZlbG9wZWQgdW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0eSBQcm9jZXNzIChK
Q1ApIGFuZCBpcyBtYWRlIGF2YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiBwdXJw
b3NlcworICogb25seS4gVGhlIGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkgc3BlY2lm
aWNhdGlvbiBvZiB0aGUgSkNQLgorICogCisgKiBDb250cmlidXRvcnM6CisgKiAgICAgSUJNIENv
cnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCisgKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKi8KK3BhY2thZ2UgdGFyZ2V0cy5tb2RlbDg7CisKK2ltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuY29tcGlsZXIuYXB0LnRlc3RzLmFubm90YXRpb25zLlR5cGU7CisKK3B1YmxpYyBjbGFz
cyBZIHsKKwlAVHlwZSgiZiIpIFN0cmluZyBAVHlwZSgiZjEiKSBbXSBAVHlwZSgiZjIiKSBbXSBf
ZmllbGQyIEBUeXBlKCJmMyIpIFtdLCBfZmllbGQzIEBUeXBlKCJmNCIpIFtdW10gPSBudWxsOwor
CQorCUBEZXByZWNhdGVkIEBUeXBlKCJtIikgU3RyaW5nIEBUeXBlKCJtMSIpIFtdIGZvbygpIEBU
eXBlKCJtMiIpIFtdIEBUeXBlKCJtMyIpIFtdIHsKKwkJcmV0dXJuIG51bGw7CisJfQorCXZvaWQg
YmFyIChAVHlwZSgicDEiKSBTdHJpbmcgW10gYSBAVHlwZSgicDIiKSBbXSwgQFR5cGUoInAzIikg
aW50IEBUeXBlKCJwNCIpIFtdIGIgW10gQFR5cGUoInA1IikgW10pIHt9CisJdm9pZCBmb28yKCkg
dGhyb3dzIEBUeXBlKCJlMSIpIE51bGxQb2ludGVyRXhjZXB0aW9uLCBAVHlwZSgiZTIiKSBBcnJh
eUluZGV4T3V0T2ZCb3VuZHNFeGNlcHRpb24ge30KKwl2b2lkIGJhcjIgKEBUeXBlKCJwMSIpIFN0
cmluZyBAVHlwZSgicDIiKSBbXSBAVHlwZSgicDMiKSAuLi4gYXJncykge30KK30KZGlmZiAtLWdp
dCByZXNvdXJjZXMvdGFyZ2V0cy9tb2RlbDgvWi5qYXZhIHJlc291cmNlcy90YXJnZXRzL21vZGVs
OC9aLmphdmEKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMC4uMjQ2MWFhZAotLS0g
L2Rldi9udWxsCisrKyByZXNvdXJjZXMvdGFyZ2V0cy9tb2RlbDgvWi5qYXZhCkBAIC0wLDAgKzEs
MjMgQEAKKy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCisgKiBDb3B5cmlnaHQgKGMpIDIwMTMgSUJN
IENvcnBvcmF0aW9uLgorICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0
aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscworICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRo
ZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCisgKiB3aGljaCBhY2Nv
bXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdAorICogaHR0cDov
L3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKKyAqIAorICogVGhpcyBpcyBhbiBp
bXBsZW1lbnRhdGlvbiBvZiBhbiBlYXJseS1kcmFmdCBzcGVjaWZpY2F0aW9uIGRldmVsb3BlZCB1
bmRlciB0aGUgSmF2YQorICogQ29tbXVuaXR5IFByb2Nlc3MgKEpDUCkgYW5kIGlzIG1hZGUgYXZh
aWxhYmxlIGZvciB0ZXN0aW5nIGFuZCBldmFsdWF0aW9uIHB1cnBvc2VzCisgKiBvbmx5LiBUaGUg
Y29kZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGFueSBzcGVjaWZpY2F0aW9uIG9mIHRoZSBKQ1Au
CisgKiAKKyAqIENvbnRyaWJ1dG9yczoKKyAqICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFs
IEFQSSBhbmQgaW1wbGVtZW50YXRpb24KKyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLworcGFja2Fn
ZSB0YXJnZXRzLm1vZGVsODsKKworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb21waWxlci5hcHQu
dGVzdHMuYW5ub3RhdGlvbnMuVHlwZTsKKworcHVibGljIGNsYXNzIFogPEBUeXBlKCJ0cDEiKSBL
LCBAVHlwZSgidHAyIikgVj4geworCVo8QFR5cGUoInRhMSIpIFN0cmluZywgQFR5cGUoInRhMiIp
IE9iamVjdD4gejEgPSBudWxsOworCXB1YmxpYyA8QFR5cGUoIm1wMSIpIFQsIEBUeXBlKCJtcDIi
KSBVPiB2b2lkIGZvbygpIHt9Cit9CisKZGlmZiAtLWdpdCBzcmMvb3JnL2VjbGlwc2UvamR0L2Nv
bXBpbGVyL2FwdC90ZXN0cy9BbGxUZXN0cy5qYXZhIHNyYy9vcmcvZWNsaXBzZS9qZHQvY29tcGls
ZXIvYXB0L3Rlc3RzL0FsbFRlc3RzLmphdmEKaW5kZXggYjNkY2ZjNy4uOGMyNjA5NiAxMDA2NDQK
LS0tIHNyYy9vcmcvZWNsaXBzZS9qZHQvY29tcGlsZXIvYXB0L3Rlc3RzL0FsbFRlc3RzLmphdmEK
KysrIHNyYy9vcmcvZWNsaXBzZS9qZHQvY29tcGlsZXIvYXB0L3Rlc3RzL0FsbFRlc3RzLmphdmEK
QEAgLTEsNCArMSw0IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChj
KSAyMDA2LCAyMDExIEJFQSBTeXN0ZW1zLCBJbmMuIAorICogQ29weXJpZ2h0IChjKSAyMDA2LCAy
MDEzIEJFQSBTeXN0ZW1zLCBJbmMuIGFuZCBvdGhlcnMKICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQu
IFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRl
IGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2Ug
djEuMApAQCAtNiw2ICs2LDExIEBACiAgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2Vw
bC12MTAuaHRtbAogICoKKyAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHkt
ZHJhZnQgc3BlY2lmaWNhdGlvbiBkZXZlbG9wZWQgdW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0
eSBQcm9jZXNzIChKQ1ApIGFuZCBpcyBtYWRlIGF2YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZh
bHVhdGlvbiBwdXJwb3NlcworICogb25seS4gVGhlIGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0
aCBhbnkgc3BlY2lmaWNhdGlvbiBvZiB0aGUgSkNQLgorICogCiAgKiBDb250cmlidXRvcnM6CiAg
KiAgICB3aGFybGV5QGJlYS5jb20gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24KKyAq
ICAgIElCTSBDb3Jwb3JhdGlvbiAtIEphdmEgOCBzdXBwb3J0CiAgKiAgICAKICAqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqLwpAQCAtMzAsNCArMzUsNSBAQAogCQlzdWl0ZS5hZGRUZXN0U3VpdGUoTW9k
ZWxVdGlsVGVzdHMuY2xhc3MpOwogCQlzdWl0ZS5hZGRUZXN0U3VpdGUoTmVnYXRpdmVUZXN0cy5j
bGFzcyk7CisJCXN1aXRlLmFkZFRlc3RTdWl0ZShKYXZhOEVsZW1lbnRzVGVzdHMuY2xhc3MpOwog
CQlyZXR1cm4gc3VpdGU7CiAJfQpkaWZmIC0tZ2l0IHNyYy9vcmcvZWNsaXBzZS9qZHQvY29tcGls
ZXIvYXB0L3Rlc3RzL0phdmE4RWxlbWVudHNUZXN0cy5qYXZhIHNyYy9vcmcvZWNsaXBzZS9qZHQv
Y29tcGlsZXIvYXB0L3Rlc3RzL0phdmE4RWxlbWVudHNUZXN0cy5qYXZhCm5ldyBmaWxlIG1vZGUg
MTAwNjQ0CmluZGV4IDAwMDAwMDAuLmVmYjgyZjgKLS0tIC9kZXYvbnVsbAorKysgc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb21waWxlci9hcHQvdGVzdHMvSmF2YThFbGVtZW50c1Rlc3RzLmphdmEKQEAg
LTAsMCArMSwxNzEgQEAKKy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCisgKiBDb3B5cmlnaHQgKGMp
IDIwMTMgSUJNIENvcnBvcmF0aW9uLgorICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9n
cmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscworICogYXJlIG1hZGUgYXZhaWxhYmxl
IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCisgKiB3
aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdAor
ICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKKyAqCisgKiBUaGlz
IGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2
ZWxvcGVkIHVuZGVyIHRoZSBKYXZhCisgKiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMg
bWFkZSBhdmFpbGFibGUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9u
bHkuIFRoZSBjb2RlIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24gb2Yg
dGhlIEpDUC4KKyAqIAorICogQ29udHJpYnV0b3JzOgorICogICAgIElCTSBDb3Jwb3JhdGlvbiAt
IGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgorICoqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiov
CisKK3BhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLmFwdC50ZXN0czsKKworaW1wb3J0
IGphdmEuaW8uRmlsZTsKK2ltcG9ydCBqYXZhLmlvLklPRXhjZXB0aW9uOworaW1wb3J0IGphdmEu
dXRpbC5BcnJheUxpc3Q7CitpbXBvcnQgamF2YS51dGlsLkxpc3Q7CisKK2ltcG9ydCBqYXZheC5s
YW5nLm1vZGVsLlNvdXJjZVZlcnNpb247CitpbXBvcnQgamF2YXgudG9vbHMuSmF2YUNvbXBpbGVy
OworaW1wb3J0IGphdmF4LnRvb2xzLlRvb2xQcm92aWRlcjsKKworaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5pbnRlcm5hbC5jb21waWxlci50b29sLkVjbGlwc2VDb21waWxlcjsKKworaW1wb3J0IGp1
bml0LmZyYW1ld29yay5UZXN0Q2FzZTsKKworcHVibGljIGNsYXNzIEphdmE4RWxlbWVudHNUZXN0
cyBleHRlbmRzIFRlc3RDYXNlIHsKKwkKKwlwcml2YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcgVFlQ
RV9BTk5PVEFUSU9OX1BST0MgPSAib3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLmFwdC50ZXN0cy5w
cm9jZXNzb3JzLmVsZW1lbnRzLkphdmE4RWxlbWVudFByb2Nlc3NvciI7CisKKwlAT3ZlcnJpZGUK
Kwlwcm90ZWN0ZWQgdm9pZCBzZXRVcCgpIHRocm93cyBFeGNlcHRpb24geworCQlzdXBlci5zZXRV
cCgpOworCQlCYXRjaFRlc3RVdGlscy5pbml0KCk7CisJfQorCisJcHVibGljIHZvaWQgdGVzdFNF
OFNwZWNpZmljcygpIHRocm93cyBFeGNlcHRpb24geworCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIg
PSBCYXRjaFRlc3RVdGlscy5nZXRFY2xpcHNlQ29tcGlsZXIoKTsKKwkJaW50ZXJuYWxUZXN0KGNv
bXBpbGVyLCBUWVBFX0FOTk9UQVRJT05fUFJPQywgInRlc3RTRThTcGVjaWZpY3MiKTsKKwl9CisJ
cHVibGljIHZvaWQgdGVzdFNFOFNwZWNpZmljc1dpdGhKYXZhYygpIHRocm93cyBFeGNlcHRpb24g
eworCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBUb29sUHJvdmlkZXIuZ2V0U3lzdGVtSmF2YUNv
bXBpbGVyKCk7CisJCWludGVybmFsVGVzdChjb21waWxlciwgVFlQRV9BTk5PVEFUSU9OX1BST0Ms
ICJ0ZXN0U0U4U3BlY2lmaWNzIik7CisJfQorCXB1YmxpYyB2b2lkIHRlc3RMYW1iZGFTcGVjaWZp
Y3MoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gQmF0Y2hU
ZXN0VXRpbHMuZ2V0RWNsaXBzZUNvbXBpbGVyKCk7CisJCWludGVybmFsVGVzdChjb21waWxlciwg
VFlQRV9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0TGFtYmRhU3BlY2lmaWNzIik7CisJfQorCXB1Ymxp
YyB2b2lkIHRlc3RMYW1iZGFTcGVjaWZpY3NXaXRoSmF2YWMoKSB0aHJvd3MgRXhjZXB0aW9uIHsK
KwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gVG9vbFByb3ZpZGVyLmdldFN5c3RlbUphdmFDb21w
aWxlcigpOworCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIFRZUEVfQU5OT1RBVElPTl9QUk9DLCAi
dGVzdExhbWJkYVNwZWNpZmljcyIpOworCX0KKwlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90YXRp
b25zKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCUphdmFDb21waWxlciBjb21waWxlciA9IEJhdGNo
VGVzdFV0aWxzLmdldEVjbGlwc2VDb21waWxlcigpOworCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIs
IFRZUEVfQU5OT1RBVElPTl9QUk9DLCAidGVzdFR5cGVBbm5vdGF0aW9ucyIpOworCX0KKwlwdWJs
aWMgdm9pZCB0ZXN0VHlwZUFubm90YXRpb25zV2l0aEphdmFjKCkgdGhyb3dzIEV4Y2VwdGlvbiB7
CisJCUphdmFDb21waWxlciBjb21waWxlciA9IFRvb2xQcm92aWRlci5nZXRTeXN0ZW1KYXZhQ29t
cGlsZXIoKTsKKwkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBUWVBFX0FOTk9UQVRJT05fUFJPQywg
InRlc3RUeXBlQW5ub3RhdGlvbnMiKTsKKwl9CisJcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0
aW9uczEoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gQmF0
Y2hUZXN0VXRpbHMuZ2V0RWNsaXBzZUNvbXBpbGVyKCk7CisJCWludGVybmFsVGVzdChjb21waWxl
ciwgVFlQRV9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0VHlwZUFubm90YXRpb25zMSIpOworCX0KKwlw
dWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90YXRpb25zMVdpdGhKYXZhYygpIHRocm93cyBFeGNlcHRp
b24geworCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBUb29sUHJvdmlkZXIuZ2V0U3lzdGVtSmF2
YUNvbXBpbGVyKCk7CisJCWludGVybmFsVGVzdChjb21waWxlciwgVFlQRV9BTk5PVEFUSU9OX1BS
T0MsICJ0ZXN0VHlwZUFubm90YXRpb25zMSIpOworCX0KKwlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFu
bm90YXRpb25zMigpIHRocm93cyBFeGNlcHRpb24geworCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIg
PSBCYXRjaFRlc3RVdGlscy5nZXRFY2xpcHNlQ29tcGlsZXIoKTsKKwkJaW50ZXJuYWxUZXN0KGNv
bXBpbGVyLCBUWVBFX0FOTk9UQVRJT05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlvbnMyIik7CisJ
fQorCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnMyV2l0aEphdmFjKCkgdGhyb3dzIEV4
Y2VwdGlvbiB7CisJCUphdmFDb21waWxlciBjb21waWxlciA9IFRvb2xQcm92aWRlci5nZXRTeXN0
ZW1KYXZhQ29tcGlsZXIoKTsKKwkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBUWVBFX0FOTk9UQVRJ
T05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlvbnMyIik7CisJfQorCXB1YmxpYyB2b2lkIHRlc3RU
eXBlQW5ub3RhdGlvbnMzKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCUphdmFDb21waWxlciBjb21w
aWxlciA9IEJhdGNoVGVzdFV0aWxzLmdldEVjbGlwc2VDb21waWxlcigpOworCQlpbnRlcm5hbFRl
c3QoY29tcGlsZXIsIFRZUEVfQU5OT1RBVElPTl9QUk9DLCAidGVzdFR5cGVBbm5vdGF0aW9uczMi
KTsKKwl9CisJcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczNXaXRoSmF2YWMoKSB0aHJv
d3MgRXhjZXB0aW9uIHsKKwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gVG9vbFByb3ZpZGVyLmdl
dFN5c3RlbUphdmFDb21waWxlcigpOworCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIFRZUEVfQU5O
T1RBVElPTl9QUk9DLCAidGVzdFR5cGVBbm5vdGF0aW9uczMiKTsKKwl9CisJcHVibGljIHZvaWQg
dGVzdFR5cGVBbm5vdGF0aW9uczQoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJSmF2YUNvbXBpbGVy
IGNvbXBpbGVyID0gQmF0Y2hUZXN0VXRpbHMuZ2V0RWNsaXBzZUNvbXBpbGVyKCk7CisJCWludGVy
bmFsVGVzdChjb21waWxlciwgVFlQRV9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0VHlwZUFubm90YXRp
b25zNCIpOworCX0KKwlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90YXRpb25zNFdpdGhKYXZhYygp
IHRocm93cyBFeGNlcHRpb24geworCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBUb29sUHJvdmlk
ZXIuZ2V0U3lzdGVtSmF2YUNvbXBpbGVyKCk7CisJCWludGVybmFsVGVzdChjb21waWxlciwgVFlQ
RV9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0VHlwZUFubm90YXRpb25zNCIpOworCX0KKwlwdWJsaWMg
dm9pZCB0ZXN0VHlwZUFubm90YXRpb25zNSgpIHRocm93cyBFeGNlcHRpb24geworCQlKYXZhQ29t
cGlsZXIgY29tcGlsZXIgPSBCYXRjaFRlc3RVdGlscy5nZXRFY2xpcHNlQ29tcGlsZXIoKTsKKwkJ
aW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBUWVBFX0FOTk9UQVRJT05fUFJPQywgInRlc3RUeXBlQW5u
b3RhdGlvbnM1Iik7CisJfQorCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnM1V2l0aEph
dmFjKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCUphdmFDb21waWxlciBjb21waWxlciA9IFRvb2xQ
cm92aWRlci5nZXRTeXN0ZW1KYXZhQ29tcGlsZXIoKTsKKwkJaW50ZXJuYWxUZXN0KGNvbXBpbGVy
LCBUWVBFX0FOTk9UQVRJT05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlvbnM1Iik7CisJfQorCXB1
YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnM2KCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCUph
dmFDb21waWxlciBjb21waWxlciA9IEJhdGNoVGVzdFV0aWxzLmdldEVjbGlwc2VDb21waWxlcigp
OworCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIFRZUEVfQU5OT1RBVElPTl9QUk9DLCAidGVzdFR5
cGVBbm5vdGF0aW9uczYiKTsKKwl9CisJcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczZX
aXRoSmF2YWMoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0g
VG9vbFByb3ZpZGVyLmdldFN5c3RlbUphdmFDb21waWxlcigpOworCQlpbnRlcm5hbFRlc3QoY29t
cGlsZXIsIFRZUEVfQU5OT1RBVElPTl9QUk9DLCAidGVzdFR5cGVBbm5vdGF0aW9uczYiKTsKKwl9
CisJcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczcoKSB0aHJvd3MgRXhjZXB0aW9uIHsK
KwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gQmF0Y2hUZXN0VXRpbHMuZ2V0RWNsaXBzZUNvbXBp
bGVyKCk7CisJCWludGVybmFsVGVzdChjb21waWxlciwgVFlQRV9BTk5PVEFUSU9OX1BST0MsICJ0
ZXN0VHlwZUFubm90YXRpb25zNyIpOworCX0KKwlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90YXRp
b25zN1dpdGhKYXZhYygpIHRocm93cyBFeGNlcHRpb24geworCQlKYXZhQ29tcGlsZXIgY29tcGls
ZXIgPSBUb29sUHJvdmlkZXIuZ2V0U3lzdGVtSmF2YUNvbXBpbGVyKCk7CisJCWludGVybmFsVGVz
dChjb21waWxlciwgVFlQRV9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0VHlwZUFubm90YXRpb25zNyIp
OworCX0KKwlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90YXRpb25zOCgpIHRocm93cyBFeGNlcHRp
b24geworCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBCYXRjaFRlc3RVdGlscy5nZXRFY2xpcHNl
Q29tcGlsZXIoKTsKKwkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBUWVBFX0FOTk9UQVRJT05fUFJP
QywgInRlc3RUeXBlQW5ub3RhdGlvbnM4Iik7CisJfQorCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5u
b3RhdGlvbnM4V2l0aEphdmFjKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCUphdmFDb21waWxlciBj
b21waWxlciA9IFRvb2xQcm92aWRlci5nZXRTeXN0ZW1KYXZhQ29tcGlsZXIoKTsKKwkJaW50ZXJu
YWxUZXN0KGNvbXBpbGVyLCBUWVBFX0FOTk9UQVRJT05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlv
bnM4Iik7CisJfQorCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnM5KCkgdGhyb3dzIEV4
Y2VwdGlvbiB7CisJCUphdmFDb21waWxlciBjb21waWxlciA9IEJhdGNoVGVzdFV0aWxzLmdldEVj
bGlwc2VDb21waWxlcigpOworCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIFRZUEVfQU5OT1RBVElP
Tl9QUk9DLCAidGVzdFR5cGVBbm5vdGF0aW9uczkiKTsKKwl9CisJcHVibGljIHZvaWQgdGVzdFR5
cGVBbm5vdGF0aW9uczlXaXRoSmF2YWMoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJSmF2YUNvbXBp
bGVyIGNvbXBpbGVyID0gVG9vbFByb3ZpZGVyLmdldFN5c3RlbUphdmFDb21waWxlcigpOworCQlp
bnRlcm5hbFRlc3QoY29tcGlsZXIsIFRZUEVfQU5OT1RBVElPTl9QUk9DLCAidGVzdFR5cGVBbm5v
dGF0aW9uczkiKTsKKwl9CisKKwlwcml2YXRlIHZvaWQgaW50ZXJuYWxUZXN0KEphdmFDb21waWxl
ciBjb21waWxlciwgU3RyaW5nIHByb2Nlc3NvciwgU3RyaW5nIHRlc3RNZXRob2QpIHRocm93cyBJ
T0V4Y2VwdGlvbiB7CisJCWlmICghY2FuUnVuSmF2YTgoKSkgeworCQkJcmV0dXJuOworCQl9CisJ
CVN5c3RlbS5jbGVhclByb3BlcnR5KHByb2Nlc3Nvcik7CisJCUZpbGUgdGFyZ2V0Rm9sZGVyID0g
VGVzdFV0aWxzLmNvbmNhdFBhdGgoQmF0Y2hUZXN0VXRpbHMuZ2V0U3JjRm9sZGVyTmFtZSgpLCAi
dGFyZ2V0cyIsICJtb2RlbDgiKTsKKwkJQmF0Y2hUZXN0VXRpbHMuY29weVJlc291cmNlcygidGFy
Z2V0cy9tb2RlbDgiLCB0YXJnZXRGb2xkZXIpOworCisJCUxpc3Q8U3RyaW5nPiBvcHRpb25zID0g
bmV3IEFycmF5TGlzdDxTdHJpbmc+KCk7CisJCW9wdGlvbnMuYWRkKCItQSIgKyBwcm9jZXNzb3Ip
OworCQlvcHRpb25zLmFkZCgiLUEiICsgdGVzdE1ldGhvZCk7CisJCS8vIEphdmFjIDEuOCBkb2Vz
bid0ICh5ZXQ/KSBzdXBwb3J0IHRoZSAtMS44IG9wdGlvbgorCQlpZiAoY29tcGlsZXIgaW5zdGFu
Y2VvZiBFY2xpcHNlQ29tcGlsZXIpIHsKKwkJCW9wdGlvbnMuYWRkKCItMS44Iik7CisJCX0KKwkJ
QmF0Y2hUZXN0VXRpbHMuY29tcGlsZVRyZWUoY29tcGlsZXIsIG9wdGlvbnMsIHRhcmdldEZvbGRl
cik7CisKKwkJLy8gSWYgaXQgc3VjY2VlZGVkLCB0aGUgcHJvY2Vzc29yIHdpbGwgaGF2ZSBzZXQg
dGhpcyBwcm9wZXJ0eSB0byAic3VjY2VlZGVkIjsKKwkJLy8gaWYgbm90LCBpdCB3aWxsIHNldCBp
dCB0byBhbiBlcnJvciB2YWx1ZS4KKwkJYXNzZXJ0RXF1YWxzKCJzdWNjZWVkZWQiLCBTeXN0ZW0u
Z2V0UHJvcGVydHkocHJvY2Vzc29yKSk7CisJfQorCXB1YmxpYyBib29sZWFuIGNhblJ1bkphdmE4
KCkgeworCQl0cnkgeworCQkJU291cmNlVmVyc2lvbi52YWx1ZU9mKCJSRUxFQVNFXzgiKTsKKwkJ
fSBjYXRjaChJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24gaWFlKSB7CisJCQlyZXR1cm4gZmFsc2U7
CisJCX0KKwkJcmV0dXJuIHRydWU7CisJfQorCUBPdmVycmlkZQorCXByb3RlY3RlZCB2b2lkIHRl
YXJEb3duKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCXN1cGVyLnRlYXJEb3duKCk7CisJfQorfQoj
UCBvcmcuZWNsaXBzZS5qZHQuY29tcGlsZXIuYXB0CmRpZmYgLS1naXQgc3JjL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQvZGlzcGF0Y2gvQW5ub3RhdGlvbkRpc2NvdmVyeVZp
c2l0b3IuamF2YSBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9kaXNw
YXRjaC9Bbm5vdGF0aW9uRGlzY292ZXJ5VmlzaXRvci5qYXZhCmluZGV4IDQ1MTY4ZjcuLjExMGU0
ZmQgMTAwNjQ0Ci0tLSBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9k
aXNwYXRjaC9Bbm5vdGF0aW9uRGlzY292ZXJ5VmlzaXRvci5qYXZhCisrKyBzcmMvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9kaXNwYXRjaC9Bbm5vdGF0aW9uRGlzY292ZXJ5
VmlzaXRvci5qYXZhCkBAIC0xNzgsNSArMTc4LDUgQEAKIAkJCUFubm90YXRpb25bXSBhbm5vdGF0
aW9ucywKIAkJCUJpbmRpbmcgY3VycmVudEJpbmRpbmcpIHsKLQkJQVNUTm9kZS5yZXNvbHZlQW5u
b3RhdGlvbnMoc2NvcGUsIGFubm90YXRpb25zLCBjdXJyZW50QmluZGluZyk7CisJCUFTVE5vZGUu
cmVzb2x2ZUFubm90YXRpb25zKHNjb3BlLCBhbm5vdGF0aW9ucywgY3VycmVudEJpbmRpbmcsIHRy
dWUpOwogCQkKIAkJZm9yIChBbm5vdGF0aW9uIGFubm90YXRpb24gOiBhbm5vdGF0aW9ucykgewpk
aWZmIC0tZ2l0IHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVs
L0FycmF5VHlwZUltcGwuamF2YSBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FwdC9tb2RlbC9BcnJheVR5cGVJbXBsLmphdmEKaW5kZXggMGE0Y2Y2OS4uMjE5Njk0NSAxMDA2
NDQKLS0tIHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL0Fy
cmF5VHlwZUltcGwuamF2YQorKysgc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hcHQvbW9kZWwvQXJyYXlUeXBlSW1wbC5qYXZhCkBAIC0xLDQgKzEsNCBAQAogLyoqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwNywgMjAxMSBCRUEgU3lzdGVtcywg
SW5jLiAKKyAqIENvcHlyaWdodCAoYykgMjAwNywgMjAxMyBCRUEgU3lzdGVtcywgSW5jLiBhbmQg
b3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNj
b21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJt
cyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCkBAIC02LDcgKzYsMTIgQEAKICAq
IGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCiAgKgorICogVGhpcyBp
cyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBhbiBlYXJseS1kcmFmdCBzcGVjaWZpY2F0aW9uIGRldmVs
b3BlZCB1bmRlciB0aGUgSmF2YQorICogQ29tbXVuaXR5IFByb2Nlc3MgKEpDUCkgYW5kIGlzIG1h
ZGUgYXZhaWxhYmxlIGZvciB0ZXN0aW5nIGFuZCBldmFsdWF0aW9uIHB1cnBvc2VzCisgKiBvbmx5
LiBUaGUgY29kZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGFueSBzcGVjaWZpY2F0aW9uIG9mIHRo
ZSBKQ1AuCisgKgogICogQ29udHJpYnV0b3JzOgogICogICAgd2hhcmxleUBiZWEuY29tIC0gaW5p
dGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCiAgKiAgICBJQk0gQ29ycG9yYXRpb24gLSBmaXgg
Zm9yIDM0MjU5OAorICogICAgSUJNIENvcnBvcmF0aW9uIC0gSmF2YSA4IHN1cHBvcnQKICAqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqLwogCkBAIC0xOSw1ICsyNCw3IEBACiAKIGltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXB0LmRpc3BhdGNoLkJhc2VQcm9jZXNzaW5nRW52
SW1wbDsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkFu
bm90YXRpb25CaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxl
ci5sb29rdXAuQXJyYXlCaW5kaW5nOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b21waWxlci5sb29rdXAuQmluZGluZzsKIAogLyoqCkBAIC00NSw1ICs1MiwxOSBAQAogCQlyZXR1
cm4gdi52aXNpdEFycmF5KHRoaXMsIHApOwogCX0KLQkKKworCXByb3RlY3RlZCBBbm5vdGF0aW9u
QmluZGluZ1tdIGdldEFubm90YXRpb25CaW5kaW5ncygpIHsKKwkJb3JnLmVjbGlwc2UuamR0Lmlu
dGVybmFsLmNvbXBpbGVyLmxvb2t1cC5Bbm5vdGF0aW9uQmluZGluZ1tdIG9sZGllcyA9ICgoQXJy
YXlCaW5kaW5nKV9iaW5kaW5nKS5nZXRUeXBlQW5ub3RhdGlvbnMoKTsKKwkJb3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5Bbm5vdGF0aW9uQmluZGluZ1tdIG5ld2JpZXMg
PSBCaW5kaW5nLk5PX0FOTk9UQVRJT05TOworCQkvLyBTdHJpcCBvdXQgdGhlIGFubm90YXRpb25z
IG9uIHN1YiBhcnJheXMKKwkJZm9yIChpbnQgaSA9IDAsIGxlbmd0aCA9IG9sZGllcyA9PSBudWxs
ID8gMCA6IG9sZGllcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgeworCQkJaWYgKG9sZGllc1tp
XSA9PSBudWxsKSB7CisJCQkJU3lzdGVtLmFycmF5Y29weShvbGRpZXMsIDAsIG5ld2JpZXMgPSAK
KwkJCQkJCW5ldyBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkFubm90
YXRpb25CaW5kaW5nW2ldLCAwLCBpKTsKKwkJCQlyZXR1cm4gbmV3YmllczsKKwkJCX0KKwkJfQor
CQlyZXR1cm4gbmV3YmllczsKKwl9CisKIAkvKiAobm9uLUphdmFkb2MpCiAJICogQHNlZSBqYXZh
eC5sYW5nLm1vZGVsLnR5cGUuVHlwZU1pcnJvciNnZXRLaW5kKCkKZGlmZiAtLWdpdCBzcmMvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9FbGVtZW50SW1wbC5qYXZh
IHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL0VsZW1lbnRJ
bXBsLmphdmEKaW5kZXggOTk4ZTNkNi4uNDQxNDZhNCAxMDA2NDQKLS0tIHNyYy9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL0VsZW1lbnRJbXBsLmphdmEKKysrIHNy
Yy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL0VsZW1lbnRJbXBs
LmphdmEKQEAgLTEsNCArMSw0IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJp
Z2h0IChjKSAyMDA1LCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJp
Z2h0IChjKSAyMDA1LCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJp
Z2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFs
cwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQ
dWJsaWMgTGljZW5zZSB2MS4wCkBAIC02LDQgKzYsOCBAQAogICogaHR0cDovL3d3dy5lY2xpcHNl
Lm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKICAqCisgKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9u
IG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVyIHRoZSBKYXZh
CisgKiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFibGUgZm9yIHRl
c3RpbmcgYW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBjb2RlIGlzIG5vdCBj
b21wYXRpYmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KKyAqIAogICogQ29u
dHJpYnV0b3JzOgogICogICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJIGFuZCBpbXBs
ZW1lbnRhdGlvbgpAQCAtMTIsNSArMTYsNCBAQAogCiBpbXBvcnQgamF2YS5sYW5nLmFubm90YXRp
b24uQW5ub3RhdGlvbjsKLWltcG9ydCBqYXZhLmxhbmcucmVmbGVjdC5Qcm94eTsKIGltcG9ydCBq
YXZhLnV0aWwuQ29sbGVjdGlvbnM7CiBpbXBvcnQgamF2YS51dGlsLkxpc3Q7CkBAIC0yNSw5ICsy
OCw3IEBACiBpbXBvcnQgamF2YXgubGFuZy5tb2RlbC51dGlsLkVsZW1lbnRzOwogCi1pbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuQ2hhck9wZXJhdGlvbjsKIGltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXB0LmRpc3BhdGNoLkJhc2VQcm9jZXNzaW5n
RW52SW1wbDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3Vw
LkFubm90YXRpb25CaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21w
aWxlci5sb29rdXAuQmluZGluZzsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29t
cGlsZXIubG9va3VwLlJlZmVyZW5jZUJpbmRpbmc7CiAKIC8qKgpAQCAtNTEsMzUgKzUyLDcgQEAK
IAl9CiAKLQlAU3VwcHJlc3NXYXJuaW5ncygidW5jaGVja2VkIikgLy8gZm9yIGNhc3Qgb2YgbmV3
UHJveHlJbnN0YW5jZSgpIHRvIEEKIAlAT3ZlcnJpZGUKIAlwdWJsaWMgPEEgZXh0ZW5kcyBBbm5v
dGF0aW9uPiBBIGdldEFubm90YXRpb24oQ2xhc3M8QT4gYW5ub3RhdGlvbkNsYXNzKSB7Ci0JCUFu
bm90YXRpb25CaW5kaW5nW10gYW5ub0luc3RhbmNlcyA9IGdldEFubm90YXRpb25CaW5kaW5ncygp
OwotCQlpZiggYW5ub0luc3RhbmNlcyA9PSBudWxsIHx8IGFubm9JbnN0YW5jZXMubGVuZ3RoID09
IDAgfHwgYW5ub3RhdGlvbkNsYXNzID09IG51bGwgKSAKLQkJCXJldHVybiBudWxsOwotCi0JCVN0
cmluZyBhbm5vVHlwZU5hbWUgPSBhbm5vdGF0aW9uQ2xhc3MuZ2V0TmFtZSgpOwotCQlpZiggYW5u
b1R5cGVOYW1lID09IG51bGwgKSByZXR1cm4gbnVsbDsKLQkJYW5ub1R5cGVOYW1lID0gYW5ub1R5
cGVOYW1lLnJlcGxhY2UoJyQnLCAnLicpOwotCQlmb3IoIEFubm90YXRpb25CaW5kaW5nIGFubm9J
bnN0YW5jZSA6IGFubm9JbnN0YW5jZXMpIHsKLQkJCWlmIChhbm5vSW5zdGFuY2UgPT0gbnVsbCkK
LQkJCQljb250aW51ZTsKLQkJCVJlZmVyZW5jZUJpbmRpbmcgYmluZGluZyA9IGFubm9JbnN0YW5j
ZS5nZXRBbm5vdGF0aW9uVHlwZSgpOwotCQkJaWYgKCBiaW5kaW5nICE9IG51bGwgJiYgYmluZGlu
Zy5pc0Fubm90YXRpb25UeXBlKCkgKSB7Ci0JCQkJY2hhcltdIHFOYW1lOwotCQkJCWlmIChiaW5k
aW5nLmlzTWVtYmVyVHlwZSgpKSB7Ci0JCQkJCXFOYW1lID0gQ2hhck9wZXJhdGlvbi5jb25jYXRX
aXRoKGJpbmRpbmcuZW5jbG9zaW5nVHlwZSgpLmNvbXBvdW5kTmFtZSwgYmluZGluZy5zb3VyY2VO
YW1lLCAnLicpOwotCQkJCQlDaGFyT3BlcmF0aW9uLnJlcGxhY2UocU5hbWUsICckJywgJy4nKTsK
LQkJCQl9IGVsc2UgewotCQkJCQlxTmFtZSA9IENoYXJPcGVyYXRpb24uY29uY2F0V2l0aChiaW5k
aW5nLmNvbXBvdW5kTmFtZSwgJy4nKTsKLQkJCQl9Ci0JCQkJaWYoIGFubm9UeXBlTmFtZS5lcXVh
bHMobmV3IFN0cmluZyhxTmFtZSkpICl7Ci0JCQkJCUFubm90YXRpb25NaXJyb3JJbXBsIGFubm9N
aXJyb3IgPQotCQkJCQkJKEFubm90YXRpb25NaXJyb3JJbXBsKV9lbnYuZ2V0RmFjdG9yeSgpLm5l
d0Fubm90YXRpb25NaXJyb3IoYW5ub0luc3RhbmNlKTsKLQkJCQkJcmV0dXJuIChBKVByb3h5Lm5l
d1Byb3h5SW5zdGFuY2UoYW5ub3RhdGlvbkNsYXNzLmdldENsYXNzTG9hZGVyKCksCi0JCQkJCQkJ
bmV3IENsYXNzW117IGFubm90YXRpb25DbGFzcyB9LCBhbm5vTWlycm9yICk7Ci0JCQkJfQotCQkJ
fQotCQl9Ci0JCXJldHVybiBudWxsOyAKKwkJcmV0dXJuIF9lbnYuZ2V0RmFjdG9yeSgpLmdldEFu
bm90YXRpb24oZ2V0QW5ub3RhdGlvbkJpbmRpbmdzKCksIGFubm90YXRpb25DbGFzcyk7CiAJfQog
CQpAQCAtOTIsNCArNjUsOCBAQAogCXB1YmxpYyBMaXN0PD8gZXh0ZW5kcyBBbm5vdGF0aW9uTWly
cm9yPiBnZXRBbm5vdGF0aW9uTWlycm9ycygpIHsKIAkJcmV0dXJuIF9lbnYuZ2V0RmFjdG9yeSgp
LmdldEFubm90YXRpb25NaXJyb3JzKGdldEFubm90YXRpb25CaW5kaW5ncygpKTsKKwl9CisKKwlw
dWJsaWMgPEEgZXh0ZW5kcyBBbm5vdGF0aW9uPiBBW10gZ2V0QW5ub3RhdGlvbnNCeVR5cGUoQ2xh
c3M8QT4gYW5ub3RhdGlvblR5cGUpIHsKKwkJcmV0dXJuIF9lbnYuZ2V0RmFjdG9yeSgpLmdldEFu
bm90YXRpb25zQnlUeXBlKGdldEFubm90YXRpb25CaW5kaW5ncygpLCBhbm5vdGF0aW9uVHlwZSk7
CQogCX0KIApAQCAtMTMyLDUgKzEwOSwxMiBAQAogCUBPdmVycmlkZQogCXB1YmxpYyBTdHJpbmcg
dG9TdHJpbmcoKSB7Ci0JCXJldHVybiBfYmluZGluZy50b1N0cmluZygpOworCQlTdHJpbmdCdWZm
ZXIgYnVmID0gbmV3IFN0cmluZ0J1ZmZlcigpOworCQlMaXN0PD8gZXh0ZW5kcyBBbm5vdGF0aW9u
TWlycm9yPiBhbm5vdHMgPSBnZXRBbm5vdGF0aW9uTWlycm9ycygpOworCQlmb3IgKEFubm90YXRp
b25NaXJyb3IgYW5ub3RhdGlvbk1pcnJvciA6IGFubm90cykgeworCQkJYnVmLmFwcGVuZChhbm5v
dGF0aW9uTWlycm9yLnRvU3RyaW5nKCkpOworCQkJYnVmLmFwcGVuZCgnICcpOworCQl9CisJCWJ1
Zi5hcHBlbmQoX2JpbmRpbmcudG9TdHJpbmcoKSk7CisJCXJldHVybiBidWYudG9TdHJpbmcoKTsK
IAl9CiAKZGlmZiAtLWdpdCBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fw
dC9tb2RlbC9FbGVtZW50c0ltcGwuamF2YSBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FwdC9tb2RlbC9FbGVtZW50c0ltcGwuamF2YQppbmRleCA4ZTc2NjRhLi4zMmJmYzJm
IDEwMDY0NAotLS0gc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQvbW9k
ZWwvRWxlbWVudHNJbXBsLmphdmEKKysrIHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvYXB0L21vZGVsL0VsZW1lbnRzSW1wbC5qYXZhCkBAIC0xLDQgKzEsNCBAQAogLyoqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwNiwgMjAxMiBCRUEgU3lzdGVt
cywgSW5jLiBhbmQgb3RoZXJzCisgKiBDb3B5cmlnaHQgKGMpIDIwMDYsIDIwMTMgQkVBIFN5c3Rl
bXMsIEluYy4gYW5kIG90aGVycwogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFt
IGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVu
ZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCkBAIC02LDgg
KzYsMTMgQEAKICAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCiAg
KgorICogVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBhbiBlYXJseS1kcmFmdCBzcGVjaWZp
Y2F0aW9uIGRldmVsb3BlZCB1bmRlciB0aGUgSmF2YQorICogQ29tbXVuaXR5IFByb2Nlc3MgKEpD
UCkgYW5kIGlzIG1hZGUgYXZhaWxhYmxlIGZvciB0ZXN0aW5nIGFuZCBldmFsdWF0aW9uIHB1cnBv
c2VzCisgKiBvbmx5LiBUaGUgY29kZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGFueSBzcGVjaWZp
Y2F0aW9uIG9mIHRoZSBKQ1AuCisgKiAKICAqIENvbnRyaWJ1dG9yczoKICAqICAgIHdoYXJsZXlA
YmVhLmNvbSAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgogICogICAgSUJNIENvcnBv
cmF0aW9uIC0gRml4IGZvciBidWcgMzQxNDk0CiAgKiAgICBJQk0gQ29ycG9yYXRpb24gLSBGaXgg
Zm9yIGJ1ZyAzMjg1NzUKKyAqICAgIElCTSBDb3Jwb3JhdGlvbiAtIEphdmEgOCBzdXBwb3J0CiAg
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKi8KIApAQCAtNzAzLDMgKzcwOCwxMyBAQAogCX0KIAorCXB1
YmxpYyBib29sZWFuIGlzRnVuY3Rpb25hbEludGVyZmFjZShUeXBlRWxlbWVudCB0eXBlKSB7CisJ
CWlmICh0eXBlICE9IG51bGwgJiYgdHlwZS5nZXRLaW5kKCkgPT0gRWxlbWVudEtpbmQuSU5URVJG
QUNFKSB7CisJCQlSZWZlcmVuY2VCaW5kaW5nIGJpbmRpbmcgPSAoUmVmZXJlbmNlQmluZGluZyko
KFR5cGVFbGVtZW50SW1wbCkgdHlwZSkuX2JpbmRpbmc7CisJCQlpZiAoYmluZGluZyBpbnN0YW5j
ZW9mIFNvdXJjZVR5cGVCaW5kaW5nKSB7CisJCQkJcmV0dXJuIGJpbmRpbmcuaXNGdW5jdGlvbmFs
SW50ZXJmYWNlKCgoU291cmNlVHlwZUJpbmRpbmcpIGJpbmRpbmcpLnNjb3BlKTsKKwkJCX0KKwkJ
fQorCQlyZXR1cm4gZmFsc2U7CisJfQorCiB9CmRpZmYgLS1naXQgc3JjL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hcHQvbW9kZWwvRXJyb3JUeXBlRWxlbWVudC5qYXZhIHNyYy9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL0Vycm9yVHlwZUVsZW1l
bnQuamF2YQppbmRleCAzZWNjYmY5Li5iNmJlMzhlIDEwMDY0NAotLS0gc3JjL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQvbW9kZWwvRXJyb3JUeXBlRWxlbWVudC5qYXZhCisr
KyBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9FcnJvclR5
cGVFbGVtZW50LmphdmEKQEAgLTEsOCArMSwxMiBAQAogLyoqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioK
LSAqIENvcHlyaWdodCAoYykgMjAwNywgMjAxMSBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4K
KyAqIENvcHlyaWdodCAoYykgMjAwNywgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4K
ICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWlu
ZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhl
IEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBk
aXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKICAqIGh0dHA6Ly93d3cuZWNsaXBzZS5v
cmcvbGVnYWwvZXBsLXYxMC5odG1sCisgKgorICogVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBv
ZiBhbiBlYXJseS1kcmFmdCBzcGVjaWZpY2F0aW9uIGRldmVsb3BlZCB1bmRlciB0aGUgSmF2YQor
ICogQ29tbXVuaXR5IFByb2Nlc3MgKEpDUCkgYW5kIGlzIG1hZGUgYXZhaWxhYmxlIGZvciB0ZXN0
aW5nIGFuZCBldmFsdWF0aW9uIHB1cnBvc2VzCisgKiBvbmx5LiBUaGUgY29kZSBpcyBub3QgY29t
cGF0aWJsZSB3aXRoIGFueSBzcGVjaWZpY2F0aW9uIG9mIHRoZSBKQ1AuCiAgKgogICogQ29udHJp
YnV0b3JzOgpAQCAtMTEwLDQgKzExNCwxMCBAQAogCQlyZXR1cm4gQ29sbGVjdGlvbnMuZW1wdHlM
aXN0KCk7CiAJfQorCQorCUBTdXBwcmVzc1dhcm5pbmdzKCJ1bmNoZWNrZWQiKQorCXB1YmxpYyA8
QSBleHRlbmRzIEFubm90YXRpb24+IEFbXSBnZXRBbm5vdGF0aW9uc0J5VHlwZShDbGFzczxBPiBh
bm5vdGF0aW9uVHlwZSkgeworCQlyZXR1cm4gKEFbXSkgRmFjdG9yeS5FTVBUWV9BTk5PVEFUSU9O
UzsKKwl9CisKIAogCS8qIChub24tSmF2YWRvYykKZGlmZiAtLWdpdCBzcmMvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9FcnJvclR5cGVJbXBsLmphdmEgc3JjL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQvbW9kZWwvRXJyb3JUeXBlSW1wbC5q
YXZhCmluZGV4IDZiODI2YjcuLmY3ZDczNjcgMTAwNjQ0Ci0tLSBzcmMvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9FcnJvclR5cGVJbXBsLmphdmEKKysrIHNyYy9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL0Vycm9yVHlwZUltcGwu
amF2YQpAQCAtMSw4ICsxLDEyIEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJp
Z2h0IChjKSAyMDA3LCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJp
Z2h0IChjKSAyMDA3LCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJp
Z2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFs
cwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQ
dWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlv
biwgYW5kIGlzIGF2YWlsYWJsZSBhdAogICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9l
cGwtdjEwLmh0bWwKKyAqCisgKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGFuIGVhcmx5
LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVyIHRoZSBKYXZhCisgKiBDb21tdW5p
dHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFibGUgZm9yIHRlc3RpbmcgYW5kIGV2
YWx1YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBjb2RlIGlzIG5vdCBjb21wYXRpYmxlIHdp
dGggYW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KICAqCiAgKiBDb250cmlidXRvcnM6CkBA
IC0xMSw4ICsxNSwxMCBAQAogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIuYXB0Lm1vZGVsOwogCitpbXBvcnQgamF2YS5sYW5nLmFubm90YXRpb24uQW5ub3RhdGlvbjsK
IGltcG9ydCBqYXZhLnV0aWwuQXJyYXlMaXN0OwogaW1wb3J0IGphdmEudXRpbC5Db2xsZWN0aW9u
czsKIGltcG9ydCBqYXZhLnV0aWwuTGlzdDsKIAoraW1wb3J0IGphdmF4LmxhbmcubW9kZWwuZWxl
bWVudC5Bbm5vdGF0aW9uTWlycm9yOwogaW1wb3J0IGphdmF4LmxhbmcubW9kZWwuZWxlbWVudC5F
bGVtZW50OwogaW1wb3J0IGphdmF4LmxhbmcubW9kZWwudHlwZS5FcnJvclR5cGU7CkBAIC04Niw0
ICs5MiwxNyBAQAogCX0KIAorCXB1YmxpYyBMaXN0PD8gZXh0ZW5kcyBBbm5vdGF0aW9uTWlycm9y
PiBnZXRBbm5vdGF0aW9uTWlycm9ycygpIHsKKwkJcmV0dXJuIEZhY3RvcnkuRU1QVFlfQU5OT1RB
VElPTl9NSVJST1JTOworCX0KKworCXB1YmxpYyA8QSBleHRlbmRzIEFubm90YXRpb24+IEEgZ2V0
QW5ub3RhdGlvbihDbGFzczxBPiBhbm5vdGF0aW9uVHlwZSkgeworCQlyZXR1cm4gbnVsbDsKKwl9
CisKKwlAU3VwcHJlc3NXYXJuaW5ncygidW5jaGVja2VkIikKKwlwdWJsaWMgPEEgZXh0ZW5kcyBB
bm5vdGF0aW9uPiBBW10gZ2V0QW5ub3RhdGlvbnNCeVR5cGUoQ2xhc3M8QT4gYW5ub3RhdGlvblR5
cGUpIHsKKwkJcmV0dXJuIChBW10pIEZhY3RvcnkuRU1QVFlfQU5OT1RBVElPTlM7CisJfQorCiAJ
LyogKG5vbi1KYXZhZG9jKQogCSAqIEBzZWUgamF2YXgubGFuZy5tb2RlbC50eXBlLlR5cGVNaXJy
b3IjZ2V0S2luZCgpCmRpZmYgLS1naXQgc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9hcHQvbW9kZWwvRXhlY3V0YWJsZUVsZW1lbnRJbXBsLmphdmEgc3JjL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQvbW9kZWwvRXhlY3V0YWJsZUVsZW1lbnRJbXBsLmph
dmEKaW5kZXggMzNiODI0MS4uYjU0MzEyMCAxMDA2NDQKLS0tIHNyYy9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL0V4ZWN1dGFibGVFbGVtZW50SW1wbC5qYXZhCisr
KyBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9FeGVjdXRh
YmxlRWxlbWVudEltcGwuamF2YQpAQCAtMSw4ICsxLDEyIEBACiAvKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKgotICogQ29weXJpZ2h0IChjKSAyMDA1LCAyMDA5IElCTSBDb3Jwb3JhdGlvbiBhbmQgb3Ro
ZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDA1LCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3Ro
ZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21w
YW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBv
ZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0
aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdAogICogaHR0cDovL3d3dy5lY2xp
cHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKKyAqCisgKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0
aW9uIG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVyIHRoZSBK
YXZhCisgKiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFibGUgZm9y
IHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBjb2RlIGlzIG5v
dCBjb21wYXRpYmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KICAqCiAgKiBD
b250cmlidXRvcnM6CkBAIC0zMzUsMyArMzM5LDE3IEBACiAJfQogCisJcHVibGljIFR5cGVNaXJy
b3IgZ2V0UmVjZWl2ZXJUeXBlKCkgeworCQlNZXRob2RCaW5kaW5nIGJpbmRpbmcgPSAoTWV0aG9k
QmluZGluZylfYmluZGluZzsKKwkJLy8gV2hhdCBpcyB0aGUgbGlrZWxpaG9vZCBvZiB0aGlzIGJl
aW5nIG51bGw/CisJCWlmIChiaW5kaW5nLmRlY2xhcmluZ0NsYXNzICE9IG51bGwpIHsKKwkJCXJl
dHVybiBfZW52LmdldEZhY3RvcnkoKS5uZXdUeXBlTWlycm9yKGJpbmRpbmcuZGVjbGFyaW5nQ2xh
c3MpOworCQl9CisJCXJldHVybiBOb1R5cGVJbXBsLk5PX1RZUEVfTk9ORTsKKwl9CisKKwlwdWJs
aWMgYm9vbGVhbiBpc0RlZmF1bHQoKSB7CisJCU1ldGhvZEJpbmRpbmcgYmluZGluZyA9IChNZXRo
b2RCaW5kaW5nKV9iaW5kaW5nOworCQlyZXR1cm4gYmluZGluZy5pc0RlZmF1bHRNZXRob2QoKTsK
Kwl9CisKIH0KZGlmZiAtLWdpdCBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FwdC9tb2RlbC9FeGVjdXRhYmxlVHlwZUltcGwuamF2YSBzcmMvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9FeGVjdXRhYmxlVHlwZUltcGwuamF2YQppbmRleCAz
NjgxYWJlLi40NjI0YTZiIDEwMDY0NAotLS0gc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hcHQvbW9kZWwvRXhlY3V0YWJsZVR5cGVJbXBsLmphdmEKKysrIHNyYy9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL0V4ZWN1dGFibGVUeXBlSW1wbC5q
YXZhCkBAIC0xLDggKzEsMTIgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmln
aHQgKGMpIDIwMDYsIDIwMTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmln
aHQgKGMpIDIwMDYsIDIwMTMgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmln
aHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxz
CiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1
YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9u
LCBhbmQgaXMgYXZhaWxhYmxlIGF0CiAgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2Vw
bC12MTAuaHRtbAorICoKKyAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHkt
ZHJhZnQgc3BlY2lmaWNhdGlvbiBkZXZlbG9wZWQgdW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0
eSBQcm9jZXNzIChKQ1ApIGFuZCBpcyBtYWRlIGF2YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZh
bHVhdGlvbiBwdXJwb3NlcworICogb25seS4gVGhlIGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0
aCBhbnkgc3BlY2lmaWNhdGlvbiBvZiB0aGUgSkNQLgogICoKICAqIENvbnRyaWJ1dG9yczoKQEAg
LTEyMywzICsxMjcsMTEgQEAKIAkJcmV0dXJuIFR5cGVLaW5kLkVYRUNVVEFCTEU7CiAJfQorCisJ
cHVibGljIFR5cGVNaXJyb3IgZ2V0UmVjZWl2ZXJUeXBlKCkgeworCQlNZXRob2RCaW5kaW5nIGJp
bmRpbmcgPSAoTWV0aG9kQmluZGluZylfYmluZGluZzsKKwkJaWYgKGJpbmRpbmcuZGVjbGFyaW5n
Q2xhc3MgIT0gbnVsbCkgeworCQkJcmV0dXJuIF9lbnYuZ2V0RmFjdG9yeSgpLm5ld1R5cGVNaXJy
b3IoYmluZGluZy5kZWNsYXJpbmdDbGFzcyk7CisJCX0KKwkJcmV0dXJuIE5vVHlwZUltcGwuTk9f
VFlQRV9OT05FOworCX0KIH0KZGlmZiAtLWdpdCBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FwdC9tb2RlbC9GYWN0b3J5LmphdmEgc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hcHQvbW9kZWwvRmFjdG9yeS5qYXZhCmluZGV4IDcxYzdhYjkuLjA2ZWE0
YmEgMTAwNjQ0Ci0tLSBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9t
b2RlbC9GYWN0b3J5LmphdmEKKysrIHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvYXB0L21vZGVsL0ZhY3RvcnkuamF2YQpAQCAtMSw0ICsxLDQgQEAKIC8qKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDcsIDIwMTIgQkVBIFN5c3RlbXMsIEluYy4g
YW5kIG90aGVycyAKKyAqIENvcHlyaWdodCAoYykgMjAwNywgMjAxMyBCRUEgU3lzdGVtcywgSW5j
LiBhbmQgb3RoZXJzIAogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0
aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRo
ZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCkBAIC02LDEyICs2LDE5
IEBACiAgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbAogICoKKyAq
IFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQgc3BlY2lmaWNhdGlv
biBkZXZlbG9wZWQgdW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0eSBQcm9jZXNzIChKQ1ApIGFu
ZCBpcyBtYWRlIGF2YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiBwdXJwb3Nlcwor
ICogb25seS4gVGhlIGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkgc3BlY2lmaWNhdGlv
biBvZiB0aGUgSkNQLgorICoKICAqIENvbnRyaWJ1dG9yczoKICAqICAgIHdoYXJsZXlAYmVhLmNv
bSAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgogICogICAgSUJNIENvcnBvcmF0aW9u
IC0gZml4IGZvciAzNDI1OTgKKyAqICAgIElCTSBDb3Jwb3JhdGlvbiAtIEphdmEgOCBzdXBwb3J0
CiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKi8KIAogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50
ZXJuYWwuY29tcGlsZXIuYXB0Lm1vZGVsOwogCitpbXBvcnQgamF2YS5sYW5nLmFubm90YXRpb24u
QW5ub3RhdGlvbjsKIGltcG9ydCBqYXZhLmxhbmcucmVmbGVjdC5BcnJheTsKK2ltcG9ydCBqYXZh
LmxhbmcucmVmbGVjdC5Qcm94eTsKIGltcG9ydCBqYXZhLnV0aWwuQXJyYXlMaXN0OwogaW1wb3J0
IGphdmEudXRpbC5Db2xsZWN0aW9uczsKQEAgLTMyLDQgKzM5LDUgQEAKIGltcG9ydCBqYXZheC5s
YW5nLm1vZGVsLnR5cGUuVHlwZU1pcnJvcjsKIAoraW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3Jl
LmNvbXBpbGVyLkNoYXJPcGVyYXRpb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFs
LmNvbXBpbGVyLmFwdC5kaXNwYXRjaC5CYXNlUHJvY2Vzc2luZ0VudkltcGw7CiBpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmNsYXNzZm10LkNsYXNzRmlsZUNvbnN0YW50
czsKQEAgLTY1LDQgKzczLDYgQEAKIAogCXByaXZhdGUgZmluYWwgQmFzZVByb2Nlc3NpbmdFbnZJ
bXBsIF9lbnY7CisJcHVibGljIHN0YXRpYyBBbm5vdGF0aW9uW10gRU1QVFlfQU5OT1RBVElPTlMg
PSBuZXcgQW5ub3RhdGlvblswXTsKKwlwdWJsaWMgc3RhdGljIExpc3Q8PyBleHRlbmRzIEFubm90
YXRpb25NaXJyb3I+IEVNUFRZX0FOTk9UQVRJT05fTUlSUk9SUyA9IENvbGxlY3Rpb25zLmVtcHR5
TGlzdCgpOwogCQogCS8qKgpAQCAtODksNCArOTksNTYgQEAKIAl9CiAJCisJQFN1cHByZXNzV2Fy
bmluZ3MoInVuY2hlY2tlZCIpIC8vIGZvciB0aGUgY2FzdCB0byBBCisJcHVibGljIDxBIGV4dGVu
ZHMgQW5ub3RhdGlvbj4gQVtdIGdldEFubm90YXRpb25zQnlUeXBlKEFubm90YXRpb25CaW5kaW5n
W10gYW5ub0luc3RhbmNlcywgQ2xhc3M8QT4gYW5ub3RhdGlvbkNsYXNzKSB7CisJCUFbXSByZXN1
bHQgPSBnZXRBbm5vdGF0aW9ucyhhbm5vSW5zdGFuY2VzLCBhbm5vdGF0aW9uQ2xhc3MsIGZhbHNl
KTsKKwkJcmV0dXJuIHJlc3VsdCA9PSBudWxsID8gKEFbXSkgRU1QVFlfQU5OT1RBVElPTlMgOiBy
ZXN1bHQ7CisJfQorCQorCQorCXB1YmxpYyA8QSBleHRlbmRzIEFubm90YXRpb24+IEEgZ2V0QW5u
b3RhdGlvbihBbm5vdGF0aW9uQmluZGluZ1tdIGFubm9JbnN0YW5jZXMsIENsYXNzPEE+IGFubm90
YXRpb25DbGFzcykgeworCQlBW10gcmVzdWx0ID0gZ2V0QW5ub3RhdGlvbnMoYW5ub0luc3RhbmNl
cywgYW5ub3RhdGlvbkNsYXNzLCB0cnVlKTsKKwkJcmV0dXJuIHJlc3VsdCA9PSBudWxsID8gbnVs
bCA6IHJlc3VsdFswXTsKKwl9CisKKwlAU3VwcHJlc3NXYXJuaW5ncygidW5jaGVja2VkIikgLy8g
Zm9yIGNhc3Qgb2YgbmV3UHJveHlJbnN0YW5jZSgpIHRvIEEKKwlwcml2YXRlIDxBIGV4dGVuZHMg
QW5ub3RhdGlvbj4gQVtdIGdldEFubm90YXRpb25zKEFubm90YXRpb25CaW5kaW5nW10gYW5ub0lu
c3RhbmNlcywgQ2xhc3M8QT4gYW5ub3RhdGlvbkNsYXNzLCBib29sZWFuIGp1c3RUaGVGaXJzdCkg
eworCQlpZihhbm5vSW5zdGFuY2VzID09IG51bGwgfHwgYW5ub0luc3RhbmNlcy5sZW5ndGggPT0g
MCB8fCBhbm5vdGF0aW9uQ2xhc3MgPT0gbnVsbCApIAorCQkJcmV0dXJuIG51bGw7CisKKwkJU3Ry
aW5nIGFubm9UeXBlTmFtZSA9IGFubm90YXRpb25DbGFzcy5nZXROYW1lKCk7CisJCWlmKGFubm9U
eXBlTmFtZSA9PSBudWxsICkgcmV0dXJuIG51bGw7CisKKwkJTGlzdDxBPiBsaXN0ID0gbmV3IEFy
cmF5TGlzdDxBPihhbm5vSW5zdGFuY2VzLmxlbmd0aCk7CisJCWZvcihBbm5vdGF0aW9uQmluZGlu
ZyBhbm5vSW5zdGFuY2UgOiBhbm5vSW5zdGFuY2VzKSB7CisJCQlpZiAoYW5ub0luc3RhbmNlID09
IG51bGwpCisJCQkJY29udGludWU7CisJCQkKKwkJCUFubm90YXRpb25NaXJyb3JJbXBsIGFubm9N
aXJyb3IgPSBjcmVhdGVBbm5vdGF0aW9uTWlycm9yKGFubm9UeXBlTmFtZSwgYW5ub0luc3RhbmNl
KTsKKwkJCWlmIChhbm5vTWlycm9yICE9IG51bGwpIHsKKwkJCQlsaXN0LmFkZCgoQSlQcm94eS5u
ZXdQcm94eUluc3RhbmNlKGFubm90YXRpb25DbGFzcy5nZXRDbGFzc0xvYWRlcigpLCBuZXcgQ2xh
c3NbXXsgYW5ub3RhdGlvbkNsYXNzIH0sIGFubm9NaXJyb3IpKTsKKwkJCQlpZiAoanVzdFRoZUZp
cnN0KSBicmVhazsKKwkJCX0KKwkJfQorCQlyZXR1cm4gbGlzdC5zaXplKCkgPiAwID8gKEFbXSkg
bGlzdC50b0FycmF5KG5ldyBBbm5vdGF0aW9uW2xpc3Quc2l6ZSgpXSkgOiAgbnVsbDsKKwl9CisK
Kwlwcml2YXRlIEFubm90YXRpb25NaXJyb3JJbXBsIGNyZWF0ZUFubm90YXRpb25NaXJyb3IoU3Ry
aW5nIGFubm9UeXBlTmFtZSwgQW5ub3RhdGlvbkJpbmRpbmcgYW5ub0luc3RhbmNlKSB7CisJCVJl
ZmVyZW5jZUJpbmRpbmcgYmluZGluZyA9IGFubm9JbnN0YW5jZS5nZXRBbm5vdGF0aW9uVHlwZSgp
OworCQlpZiAoYmluZGluZyAhPSBudWxsICYmIGJpbmRpbmcuaXNBbm5vdGF0aW9uVHlwZSgpICkg
eworCQkJY2hhcltdIHFOYW1lOworCQkJaWYgKGJpbmRpbmcuaXNNZW1iZXJUeXBlKCkpIHsKKwkJ
CQlhbm5vVHlwZU5hbWUgPSBhbm5vVHlwZU5hbWUucmVwbGFjZSgnJCcsICcuJyk7CisJCQkJcU5h
bWUgPSBDaGFyT3BlcmF0aW9uLmNvbmNhdFdpdGgoYmluZGluZy5lbmNsb3NpbmdUeXBlKCkuY29t
cG91bmROYW1lLCBiaW5kaW5nLnNvdXJjZU5hbWUsICcuJyk7CisJCQkJQ2hhck9wZXJhdGlvbi5y
ZXBsYWNlKHFOYW1lLCAnJCcsICcuJyk7CisJCQl9IGVsc2UgeworCQkJCXFOYW1lID0gQ2hhck9w
ZXJhdGlvbi5jb25jYXRXaXRoKGJpbmRpbmcuY29tcG91bmROYW1lLCAnLicpOworCQkJfQorCQkJ
aWYoYW5ub1R5cGVOYW1lLmVxdWFscyhuZXcgU3RyaW5nKHFOYW1lKSkgKXsKKwkJCQlyZXR1cm4g
KEFubm90YXRpb25NaXJyb3JJbXBsKV9lbnYuZ2V0RmFjdG9yeSgpLm5ld0Fubm90YXRpb25NaXJy
b3IoYW5ub0luc3RhbmNlKTsKKwkJCX0KKwkJfQorCQlyZXR1cm4gbnVsbDsKKwl9CisKIAlwcml2
YXRlIHN0YXRpYyB2b2lkIGFwcGVuZE1vZGlmaWVyKFNldDxNb2RpZmllcj4gcmVzdWx0LCBpbnQg
bW9kaWZpZXJzLCBpbnQgbW9kaWZpZXJDb25zdGFudCwgTW9kaWZpZXIgbW9kaWZpZXIpIHsKIAkJ
aWYgKChtb2RpZmllcnMgJiBtb2RpZmllckNvbnN0YW50KSAhPSAwKSB7CkBAIC0zNDMsNCArNDA1
LDEyIEBACiAJCX0KIAl9CisJCisJcHVibGljIFByaW1pdGl2ZVR5cGVJbXBsIGdldFByaW1pdGl2
ZVR5cGUoQmFzZVR5cGVCaW5kaW5nIGJpbmRpbmcpIHsKKwkJQW5ub3RhdGlvbkJpbmRpbmdbXSBh
bm5vdGF0aW9ucyA9IGJpbmRpbmcuZ2V0VHlwZUFubm90YXRpb25zKCk7CisJCWlmIChhbm5vdGF0
aW9ucyA9PSBudWxsIHx8IGFubm90YXRpb25zLmxlbmd0aCA9PSAwKSB7CisJCQlyZXR1cm4gZ2V0
UHJpbWl0aXZlVHlwZShQcmltaXRpdmVUeXBlSW1wbC5nZXRLaW5kKGJpbmRpbmcpKTsKKwkJfQor
CQlyZXR1cm4gbmV3IFByaW1pdGl2ZVR5cGVJbXBsKF9lbnYsIGJpbmRpbmcpOworCX0KIAogCS8q
KgpAQCAtMzgwLDEwICs0NTAsMTAgQEAKIAkJCUJhc2VUeXBlQmluZGluZyBidGIgPSAoQmFzZVR5
cGVCaW5kaW5nKWJpbmRpbmc7CiAJCQlzd2l0Y2ggKGJ0Yi5pZCkgewotCQkJY2FzZSBUeXBlSWRz
LlRfdm9pZDoKLQkJCQlyZXR1cm4gZ2V0Tm9UeXBlKFR5cGVLaW5kLlZPSUQpOwotCQkJY2FzZSBU
eXBlSWRzLlRfbnVsbDoKLQkJCQlyZXR1cm4gZ2V0TnVsbFR5cGUoKTsKLQkJCWRlZmF1bHQ6Ci0J
CQkJcmV0dXJuIGdldFByaW1pdGl2ZVR5cGUoUHJpbWl0aXZlVHlwZUltcGwuZ2V0S2luZCgoQmFz
ZVR5cGVCaW5kaW5nKWJpbmRpbmcpKTsKKwkJCQljYXNlIFR5cGVJZHMuVF92b2lkOgorCQkJCQly
ZXR1cm4gZ2V0Tm9UeXBlKFR5cGVLaW5kLlZPSUQpOworCQkJCWNhc2UgVHlwZUlkcy5UX251bGw6
CisJCQkJCXJldHVybiBnZXROdWxsVHlwZSgpOworCQkJCWRlZmF1bHQ6CisJCQkJCXJldHVybiBn
ZXRQcmltaXRpdmVUeXBlKGJ0Yik7CiAJCQl9CiAKZGlmZiAtLWdpdCBzcmMvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9Ob1R5cGVJbXBsLmphdmEgc3JjL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQvbW9kZWwvTm9UeXBlSW1wbC5qYXZhCmlu
ZGV4IDQ5OWZmMTYuLjM5YjFmMjQgMTAwNjQ0Ci0tLSBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9Ob1R5cGVJbXBsLmphdmEKKysrIHNyYy9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL05vVHlwZUltcGwuamF2YQpAQCAtMSw0
ICsxLDQgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDcs
IDIwMTEgQkVBIFN5c3RlbXMsIEluYy4KKyAqIENvcHlyaWdodCAoYykgMjAwNywgMjAxMyBCRUEg
U3lzdGVtcywgSW5jLiBhbmQgb3RoZXJzCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHBy
b2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFi
bGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKQEAg
LTYsMTAgKzYsMTkgQEAKICAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5o
dG1sCiAgKgorICogVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBhbiBlYXJseS1kcmFmdCBz
cGVjaWZpY2F0aW9uIGRldmVsb3BlZCB1bmRlciB0aGUgSmF2YQorICogQ29tbXVuaXR5IFByb2Nl
c3MgKEpDUCkgYW5kIGlzIG1hZGUgYXZhaWxhYmxlIGZvciB0ZXN0aW5nIGFuZCBldmFsdWF0aW9u
IHB1cnBvc2VzCisgKiBvbmx5LiBUaGUgY29kZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGFueSBz
cGVjaWZpY2F0aW9uIG9mIHRoZSBKQ1AuCisgKgogICogQ29udHJpYnV0b3JzOgogICogICAgd2hh
cmxleUBiZWEuY29tIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCisgKiAgICBJQk0g
Q29ycG9yYXRpb24gLSBKYXZhIDggc3VwcG9ydAogICoqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCiAK
IHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFwdC5tb2RlbDsKIAor
aW1wb3J0IGphdmEubGFuZy5hbm5vdGF0aW9uLkFubm90YXRpb247CitpbXBvcnQgamF2YS51dGls
Lkxpc3Q7CisKK2ltcG9ydCBqYXZheC5sYW5nLm1vZGVsLmVsZW1lbnQuQW5ub3RhdGlvbk1pcnJv
cjsKIGltcG9ydCBqYXZheC5sYW5nLm1vZGVsLnR5cGUuTm9UeXBlOwogaW1wb3J0IGphdmF4Lmxh
bmcubW9kZWwudHlwZS5OdWxsVHlwZTsKQEAgLTY3LDMgKzc2LDE2IEBACiAJfQogCisJcHVibGlj
IExpc3Q8PyBleHRlbmRzIEFubm90YXRpb25NaXJyb3I+IGdldEFubm90YXRpb25NaXJyb3JzKCkg
eworCQlyZXR1cm4gRmFjdG9yeS5FTVBUWV9BTk5PVEFUSU9OX01JUlJPUlM7CisJfQorCisJcHVi
bGljIDxBIGV4dGVuZHMgQW5ub3RhdGlvbj4gQSBnZXRBbm5vdGF0aW9uKENsYXNzPEE+IGFubm90
YXRpb25UeXBlKSB7CisJCXJldHVybiBudWxsOworCX0KKworCUBTdXBwcmVzc1dhcm5pbmdzKCJ1
bmNoZWNrZWQiKQorCXB1YmxpYyA8QSBleHRlbmRzIEFubm90YXRpb24+IEFbXSBnZXRBbm5vdGF0
aW9uc0J5VHlwZShDbGFzczxBPiBhbm5vdGF0aW9uVHlwZSkgeworCQlyZXR1cm4gKEFbXSkgRmFj
dG9yeS5FTVBUWV9BTk5PVEFUSU9OUzsKKwl9CisKIH0KZGlmZiAtLWdpdCBzcmMvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9QcmltaXRpdmVUeXBlSW1wbC5qYXZh
IHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL1ByaW1pdGl2
ZVR5cGVJbXBsLmphdmEKaW5kZXggNzdmZTJkNy4uMzlhOWFiYyAxMDA2NDQKLS0tIHNyYy9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL1ByaW1pdGl2ZVR5cGVJbXBs
LmphdmEKKysrIHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVs
L1ByaW1pdGl2ZVR5cGVJbXBsLmphdmEKQEAgLTEsNCArMSw0IEBACiAvKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDA3IEJFQSBTeXN0ZW1zLCBJbmMuIAorICogQ29w
eXJpZ2h0IChjKSAyMDA3LCAyMDEzIEJFQSBTeXN0ZW1zLCBJbmMuIGFuZCBvdGhlcnMuCiAgKiBB
bGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0
ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xp
cHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKQEAgLTYsNyArNiwxMSBAQAogICogaHR0cDovL3d3dy5l
Y2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKICAqCisgKiBUaGlzIGlzIGFuIGltcGxlbWVu
dGF0aW9uIG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVyIHRo
ZSBKYXZhCisgKiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFibGUg
Zm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBjb2RlIGlz
IG5vdCBjb21wYXRpYmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KKyAqCiAg
KiBDb250cmlidXRvcnM6CiAgKiAgICB3aGFybGV5QGJlYS5jb20gLSBpbml0aWFsIEFQSSBhbmQg
aW1wbGVtZW50YXRpb24KLSAqICAgIAorICogICAgSUJNIENvcnBvcmF0aW9uIC0gSmF2YSA4IHN1
cHBvcnQKICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwogCkBAIC0xNyw0ICsyMSw2IEBACiBpbXBv
cnQgamF2YXgubGFuZy5tb2RlbC50eXBlLlR5cGVWaXNpdG9yOwogCitpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFwdC5kaXNwYXRjaC5CYXNlUHJvY2Vzc2luZ0Vudklt
cGw7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5Bbm5v
dGF0aW9uQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
bG9va3VwLkJhc2VUeXBlQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwu
Y29tcGlsZXIubG9va3VwLlR5cGVCaW5kaW5nOwpAQCAtNDUsNCArNTEsOSBAQAogCX0KIAkKKwlQ
cmltaXRpdmVUeXBlSW1wbChCYXNlUHJvY2Vzc2luZ0VudkltcGwgZW52LCBCYXNlVHlwZUJpbmRp
bmcgYmluZGluZykgeworCQkvLyBGcm9tIEphdmEgOCwgYmFzZSB0eXBlIGJpbmRpbmdzIGNhbiBo
b2xkIGFubm90YXRpb25zIGFuZCBoZW5jZSBuZWVkIHRoZSBlbnZpcm9ubWVudC4KKwkJc3VwZXIo
ZW52LCBiaW5kaW5nKTsKKwl9CisJCiAJQE92ZXJyaWRlCiAJcHVibGljIDxSLCBQPiBSIGFjY2Vw
dChUeXBlVmlzaXRvcjxSLCBQPiB2LCBQIHApCkBAIC01MSw0ICs2Miw4IEBACiAJfQogCisJcHJv
dGVjdGVkIEFubm90YXRpb25CaW5kaW5nW10gZ2V0QW5ub3RhdGlvbkJpbmRpbmdzKCkgeworCQly
ZXR1cm4gKChCYXNlVHlwZUJpbmRpbmcpX2JpbmRpbmcpLmdldFR5cGVBbm5vdGF0aW9ucygpOwor
CX0KKwogCS8qIChub24tSmF2YWRvYykKIAkgKiBAc2VlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5h
bC5jb21waWxlci5hcHQubW9kZWwuVHlwZU1pcnJvckltcGwjZ2V0S2luZCgpCmRpZmYgLS1naXQg
c3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQvbW9kZWwvVHlwZU1pcnJv
ckltcGwuamF2YSBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2Rl
bC9UeXBlTWlycm9ySW1wbC5qYXZhCmluZGV4IDIyYjdhNDQuLjEyMWU3MGIgMTAwNjQ0Ci0tLSBz
cmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9UeXBlTWlycm9y
SW1wbC5qYXZhCisrKyBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9t
b2RlbC9UeXBlTWlycm9ySW1wbC5qYXZhCkBAIC0xLDQgKzEsNCBAQAogLyoqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwNyBCRUEgU3lzdGVtcywgSW5jLiAKKyAqIENv
cHlyaWdodCAoYykgMjAwNywgMjAxMyBCRUEgU3lzdGVtcywgSW5jLiBhbmQgb3RoZXJzLgogICog
QWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1h
dGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNs
aXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCkBAIC02LDExICs2LDE5IEBACiAgKiBodHRwOi8vd3d3
LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbAogICoKKyAqIFRoaXMgaXMgYW4gaW1wbGVt
ZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQgc3BlY2lmaWNhdGlvbiBkZXZlbG9wZWQgdW5kZXIg
dGhlIEphdmEKKyAqIENvbW11bml0eSBQcm9jZXNzIChKQ1ApIGFuZCBpcyBtYWRlIGF2YWlsYWJs
ZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiBwdXJwb3NlcworICogb25seS4gVGhlIGNvZGUg
aXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkgc3BlY2lmaWNhdGlvbiBvZiB0aGUgSkNQLgorICoK
ICAqIENvbnRyaWJ1dG9yczoKICAqICAgIHdoYXJsZXlAYmVhLmNvbSAtIGluaXRpYWwgQVBJIGFu
ZCBpbXBsZW1lbnRhdGlvbgotICogICAgCisgKiAgICBJQk0gQ29ycG9yYXRpb24gLSBKYXZhIDgg
c3VwcG9ydAogICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCiAKIHBhY2thZ2Ugb3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvbXBpbGVyLmFwdC5tb2RlbDsKIAoraW1wb3J0IGphdmEubGFuZy5hbm5v
dGF0aW9uLkFubm90YXRpb247CitpbXBvcnQgamF2YS51dGlsLkxpc3Q7CisKK2ltcG9ydCBqYXZh
eC5sYW5nLm1vZGVsLmVsZW1lbnQuQW5ub3RhdGlvbk1pcnJvcjsKIGltcG9ydCBqYXZheC5sYW5n
Lm1vZGVsLnR5cGUuVHlwZUtpbmQ7CiBpbXBvcnQgamF2YXgubGFuZy5tb2RlbC50eXBlLlR5cGVN
aXJyb3I7CkBAIC0xOCw1ICsyNiw3IEBACiAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJu
YWwuY29tcGlsZXIuYXB0LmRpc3BhdGNoLkJhc2VQcm9jZXNzaW5nRW52SW1wbDsKK2ltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkFubm90YXRpb25CaW5kaW5n
OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuQmluZGlu
ZzsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlJlZmVy
ZW5jZUJpbmRpbmc7CiAKIC8qKgpAQCAtMTA3LDQgKzExNywyMCBAQAogCX0KIAorCXByb3RlY3Rl
ZCBBbm5vdGF0aW9uQmluZGluZ1tdIGdldEFubm90YXRpb25CaW5kaW5ncygpIHsKKwkJcmV0dXJu
ICgoUmVmZXJlbmNlQmluZGluZylfYmluZGluZykuZ2V0VHlwZUFubm90YXRpb25zKCk7CisJfQor
CisJcHVibGljIExpc3Q8PyBleHRlbmRzIEFubm90YXRpb25NaXJyb3I+IGdldEFubm90YXRpb25N
aXJyb3JzKCkgeworCQlyZXR1cm4gX2Vudi5nZXRGYWN0b3J5KCkuZ2V0QW5ub3RhdGlvbk1pcnJv
cnMoZ2V0QW5ub3RhdGlvbkJpbmRpbmdzKCkpOworCX0KKworCXB1YmxpYyA8QSBleHRlbmRzIEFu
bm90YXRpb24+IEEgZ2V0QW5ub3RhdGlvbihDbGFzczxBPiBhbm5vdGF0aW9uVHlwZSkgeworCQly
ZXR1cm4gX2Vudi5nZXRGYWN0b3J5KCkuZ2V0QW5ub3RhdGlvbihnZXRBbm5vdGF0aW9uQmluZGlu
Z3MoKSwgYW5ub3RhdGlvblR5cGUpOworCX0KKworCXB1YmxpYyA8QSBleHRlbmRzIEFubm90YXRp
b24+IEFbXSBnZXRBbm5vdGF0aW9uc0J5VHlwZShDbGFzczxBPiBhbm5vdGF0aW9uVHlwZSkgewor
CQlyZXR1cm4gX2Vudi5nZXRGYWN0b3J5KCkuZ2V0QW5ub3RhdGlvbnNCeVR5cGUoZ2V0QW5ub3Rh
dGlvbkJpbmRpbmdzKCksIGFubm90YXRpb25UeXBlKTsKKwl9CisKIAkKIH0KZGlmZiAtLWdpdCBz
cmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9UeXBlUGFyYW1l
dGVyRWxlbWVudEltcGwuamF2YSBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FwdC9tb2RlbC9UeXBlUGFyYW1ldGVyRWxlbWVudEltcGwuamF2YQppbmRleCA3ZGE3YzNhLi4w
YzQ4N2E2IDEwMDY0NAotLS0gc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
cHQvbW9kZWwvVHlwZVBhcmFtZXRlckVsZW1lbnRJbXBsLmphdmEKKysrIHNyYy9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL1R5cGVQYXJhbWV0ZXJFbGVtZW50SW1w
bC5qYXZhCkBAIC0xLDQgKzEsNCBAQAogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHly
aWdodCAoYykgMjAwNywgMjAxMSBCRUEgU3lzdGVtcywgSW5jLgorICogQ29weXJpZ2h0IChjKSAy
MDA3LCAyMDEzIEJFQSBTeXN0ZW1zLCBJbmMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlz
IHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFp
bGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAK
QEAgLTYsOCArNiwxMyBAQAogICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEw
Lmh0bWwKICAqCisgKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGFuIGVhcmx5LWRyYWZ0
IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVyIHRoZSBKYXZhCisgKiBDb21tdW5pdHkgUHJv
Y2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFibGUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRp
b24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBjb2RlIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggYW55
IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KKyAqCiAgKiBDb250cmlidXRvcnM6CiAgKiAgICB3
aGFybGV5QGJlYS5jb20gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24KICAqICAgIElC
TSBDb3Jwb3JhdGlvbiAtIGZpeCBmb3IgMzQyNDcwCiAgKiAgICBJQk0gQ29ycG9yYXRpb24gLSBm
aXggZm9yIDM0MjU5OAorICogICAgSUJNIENvcnBvcmF0aW9uIC0gSmF2YSA4IHN1cHBvcnQKICAq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqLwogCkBAIC0xMzUsNSArMTQwLDUgQEAKIAlwcm90ZWN0ZWQg
QW5ub3RhdGlvbkJpbmRpbmdbXSBnZXRBbm5vdGF0aW9uQmluZGluZ3MoKQogCXsKLQkJcmV0dXJu
IG51bGw7CisJCXJldHVybiAoKFR5cGVWYXJpYWJsZUJpbmRpbmcpX2JpbmRpbmcpLmdldFR5cGVB
bm5vdGF0aW9ucygpOwogCX0KIA==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>236098</attachid>
            <date>2013-10-04 06:24:00 -0400</date>
            <delta_ts>2013-10-08 00:04:47 -0400</delta_ts>
            <desc>Latest patch</desc>
            <filename>Fix-for-bug-413613.patch</filename>
            <type>text/plain</type>
            <size>72817</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMAojUCBvcmcuZWNsaXBzZS5qZHQuY29tcGls
ZXIuYXB0LnRlc3RzCmRpZmYgLS1naXQgLmNsYXNzcGF0aCAuY2xhc3NwYXRoCmluZGV4IDYxOTA4
MmMuLjg4ZGFkNTMgMTAwNjQ0Ci0tLSAuY2xhc3NwYXRoCisrKyAuY2xhc3NwYXRoCkBAIC00LDUg
KzQsNSBAQAogCTxjbGFzc3BhdGhlbnRyeSBraW5kPSJzcmMiIG91dHB1dD0iYmlucHJvY2Vzc29y
cyIgcGF0aD0icHJvY2Vzc29ycyIvPgogCTxjbGFzc3BhdGhlbnRyeSBraW5kPSJjb24iIHBhdGg9
Im9yZy5lY2xpcHNlLnBkZS5jb3JlLnJlcXVpcmVkUGx1Z2lucyIvPgotCTxjbGFzc3BhdGhlbnRy
eSBraW5kPSJjb24iIHBhdGg9Im9yZy5lY2xpcHNlLmpkdC5sYXVuY2hpbmcuSlJFX0NPTlRBSU5F
Ui9vcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuZGVidWcudWkubGF1bmNoZXIuU3RhbmRhcmRWTVR5
cGUvSmF2YVNFLTEuNiIvPgorCTxjbGFzc3BhdGhlbnRyeSBraW5kPSJjb24iIHBhdGg9Im9yZy5l
Y2xpcHNlLmpkdC5sYXVuY2hpbmcuSlJFX0NPTlRBSU5FUi9vcmcuZWNsaXBzZS5qZHQuaW50ZXJu
YWwuZGVidWcudWkubGF1bmNoZXIuU3RhbmRhcmRWTVR5cGUvSmF2YVNFLTEuOCIvPgogCTxjbGFz
c3BhdGhlbnRyeSBraW5kPSJvdXRwdXQiIHBhdGg9ImJpbiIvPgogPC9jbGFzc3BhdGg+CmRpZmYg
LS1naXQgbGliL2FwdHRlc3Rwcm9jZXNzb3JzLmphciBsaWIvYXB0dGVzdHByb2Nlc3NvcnMuamFy
CmluZGV4IGVkOWJiY2YuLmIxZjgxYWMgMTAwNjQ0Ci0tLSBsaWIvYXB0dGVzdHByb2Nlc3NvcnMu
amFyCisrKyBsaWIvYXB0dGVzdHByb2Nlc3NvcnMuamFyCkJpbmFyeSBmaWxlcyBkaWZmZXIKZGlm
ZiAtLWdpdCBwcm9jZXNzb3JzL01FVEEtSU5GL3NlcnZpY2VzL2phdmF4LmFubm90YXRpb24ucHJv
Y2Vzc2luZy5Qcm9jZXNzb3IgcHJvY2Vzc29ycy9NRVRBLUlORi9zZXJ2aWNlcy9qYXZheC5hbm5v
dGF0aW9uLnByb2Nlc3NpbmcuUHJvY2Vzc29yCmluZGV4IDMyN2E4NjUuLmY3ZDAzMjAgMTAwNjQ0
Ci0tLSBwcm9jZXNzb3JzL01FVEEtSU5GL3NlcnZpY2VzL2phdmF4LmFubm90YXRpb24ucHJvY2Vz
c2luZy5Qcm9jZXNzb3IKKysrIHByb2Nlc3NvcnMvTUVUQS1JTkYvc2VydmljZXMvamF2YXguYW5u
b3RhdGlvbi5wcm9jZXNzaW5nLlByb2Nlc3NvcgpAQCAtMiw0ICsyLDUgQEAKIG9yZy5lY2xpcHNl
LmpkdC5jb21waWxlci5hcHQudGVzdHMucHJvY2Vzc29ycy5jaGVja2FyZ3MuQ2hlY2tBcmdzUHJv
Ywogb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLmFwdC50ZXN0cy5wcm9jZXNzb3JzLmVsZW1lbnRz
LkVsZW1lbnRQcm9jCitvcmcuZWNsaXBzZS5qZHQuY29tcGlsZXIuYXB0LnRlc3RzLnByb2Nlc3Nv
cnMuZWxlbWVudHMuSmF2YThFbGVtZW50UHJvY2Vzc29yCiBvcmcuZWNsaXBzZS5qZHQuY29tcGls
ZXIuYXB0LnRlc3RzLnByb2Nlc3NvcnMuZmlsZXIuRmlsZXJQcm9jCiBvcmcuZWNsaXBzZS5qZHQu
Y29tcGlsZXIuYXB0LnRlc3RzLnByb2Nlc3NvcnMubWVzc2FnZXIuTWVzc2FnZXJQcm9jCmRpZmYg
LS1naXQgcHJvY2Vzc29ycy9vcmcvZWNsaXBzZS9qZHQvY29tcGlsZXIvYXB0L3Rlc3RzL2Fubm90
YXRpb25zL1R5cGUkMS5qYXZhIHByb2Nlc3NvcnMvb3JnL2VjbGlwc2UvamR0L2NvbXBpbGVyL2Fw
dC90ZXN0cy9hbm5vdGF0aW9ucy9UeXBlJDEuamF2YQpuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRl
eCAwMDAwMDAwLi40NGE3NDNiCi0tLSAvZGV2L251bGwKKysrIHByb2Nlc3NvcnMvb3JnL2VjbGlw
c2UvamR0L2NvbXBpbGVyL2FwdC90ZXN0cy9hbm5vdGF0aW9ucy9UeXBlJDEuamF2YQpAQCAtMCww
ICsxLDIyIEBACisvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgorICogQ29weXJpZ2h0IChjKSAyMDEz
IElCTSBDb3Jwb3JhdGlvbi4KKyAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBh
bmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKKyAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRl
ciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAorICogd2hpY2gg
YWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKKyAqIGh0
dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCisgKiAKKyAqIFRoaXMgaXMg
YW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQgc3BlY2lmaWNhdGlvbiBkZXZlbG9w
ZWQgdW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0eSBQcm9jZXNzIChKQ1ApIGFuZCBpcyBtYWRl
IGF2YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiBwdXJwb3NlcworICogb25seS4g
VGhlIGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkgc3BlY2lmaWNhdGlvbiBvZiB0aGUg
SkNQLgorICogCisgKiBDb250cmlidXRvcnM6CisgKiAgICAgSUJNIENvcnBvcmF0aW9uIC0gaW5p
dGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCisgKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KK3Bh
Y2thZ2Ugb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLmFwdC50ZXN0cy5hbm5vdGF0aW9uczsKKwor
aW1wb3J0IGphdmEubGFuZy5hbm5vdGF0aW9uLkVsZW1lbnRUeXBlOworaW1wb3J0IGphdmEubGFu
Zy5hbm5vdGF0aW9uLlRhcmdldDsKKworQFRhcmdldChFbGVtZW50VHlwZS5UWVBFX1VTRSkKK3B1
YmxpYyBAaW50ZXJmYWNlIFR5cGUkMSB7Cit9CmRpZmYgLS1naXQgcHJvY2Vzc29ycy9vcmcvZWNs
aXBzZS9qZHQvY29tcGlsZXIvYXB0L3Rlc3RzL2Fubm90YXRpb25zL1R5cGUuamF2YSBwcm9jZXNz
b3JzL29yZy9lY2xpcHNlL2pkdC9jb21waWxlci9hcHQvdGVzdHMvYW5ub3RhdGlvbnMvVHlwZS5q
YXZhCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAuLjhlNDAzODEKLS0tIC9kZXYv
bnVsbAorKysgcHJvY2Vzc29ycy9vcmcvZWNsaXBzZS9qZHQvY29tcGlsZXIvYXB0L3Rlc3RzL2Fu
bm90YXRpb25zL1R5cGUuamF2YQpAQCAtMCwwICsxLDI2IEBACisvKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKgorICogQ29weXJpZ2h0IChjKSAyMDEzIElCTSBDb3Jwb3JhdGlvbi4KKyAqIEFsbCByaWdo
dHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMK
KyAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVi
bGljIExpY2Vuc2UgdjEuMAorICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24s
IGFuZCBpcyBhdmFpbGFibGUgYXQKKyAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBs
LXYxMC5odG1sCisgKiAKKyAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHkt
ZHJhZnQgc3BlY2lmaWNhdGlvbiBkZXZlbG9wZWQgdW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0
eSBQcm9jZXNzIChKQ1ApIGFuZCBpcyBtYWRlIGF2YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZh
bHVhdGlvbiBwdXJwb3NlcworICogb25seS4gVGhlIGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0
aCBhbnkgc3BlY2lmaWNhdGlvbiBvZiB0aGUgSkNQLgorICogCisgKiBDb250cmlidXRvcnM6Cisg
KiAgICAgSUJNIENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCisg
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKi8KK3BhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVy
LmFwdC50ZXN0cy5hbm5vdGF0aW9uczsKKworaW1wb3J0IGphdmEubGFuZy5hbm5vdGF0aW9uLkVs
ZW1lbnRUeXBlOworaW1wb3J0IGphdmEubGFuZy5hbm5vdGF0aW9uLlRhcmdldDsKKworQFRhcmdl
dChFbGVtZW50VHlwZS5UWVBFX1VTRSkKK3B1YmxpYyBAaW50ZXJmYWNlIFR5cGUgeworCVN0cmlu
ZyB2YWx1ZSgpIGRlZmF1bHQgIiI7CisJQFRhcmdldChFbGVtZW50VHlwZS5UWVBFX1VTRSkKKwlA
aW50ZXJmYWNlIE9uZSB7CisJfQorfQpcIE5vIG5ld2xpbmUgYXQgZW5kIG9mIGZpbGUKZGlmZiAt
LWdpdCBwcm9jZXNzb3JzL29yZy9lY2xpcHNlL2pkdC9jb21waWxlci9hcHQvdGVzdHMvcHJvY2Vz
c29ycy9lbGVtZW50cy9KYXZhOEVsZW1lbnRQcm9jZXNzb3IuamF2YSBwcm9jZXNzb3JzL29yZy9l
Y2xpcHNlL2pkdC9jb21waWxlci9hcHQvdGVzdHMvcHJvY2Vzc29ycy9lbGVtZW50cy9KYXZhOEVs
ZW1lbnRQcm9jZXNzb3IuamF2YQpuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwLi5i
N2ExNWM1Ci0tLSAvZGV2L251bGwKKysrIHByb2Nlc3NvcnMvb3JnL2VjbGlwc2UvamR0L2NvbXBp
bGVyL2FwdC90ZXN0cy9wcm9jZXNzb3JzL2VsZW1lbnRzL0phdmE4RWxlbWVudFByb2Nlc3Nvci5q
YXZhCkBAIC0wLDAgKzEsNTY1IEBACisvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgorICogQ29weXJp
Z2h0IChjKSAyMDEzIElCTSBDb3Jwb3JhdGlvbi4KKyAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRo
aXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKKyAqIGFyZSBtYWRlIGF2
YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEu
MAorICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFi
bGUgYXQKKyAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCisgKiAK
KyAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQgc3BlY2lmaWNh
dGlvbiBkZXZlbG9wZWQgdW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0eSBQcm9jZXNzIChKQ1Ap
IGFuZCBpcyBtYWRlIGF2YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiBwdXJwb3Nl
cworICogb25seS4gVGhlIGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkgc3BlY2lmaWNh
dGlvbiBvZiB0aGUgSkNQLgorICogCisgKiBDb250cmlidXRvcnM6CisgKiAgICAgSUJNIENvcnBv
cmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCisgKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKi8KKworcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuY29tcGlsZXIuYXB0LnRlc3RzLnBy
b2Nlc3NvcnMuZWxlbWVudHM7CisKK2ltcG9ydCBqYXZhLmxhbmcuYW5ub3RhdGlvbi5Bbm5vdGF0
aW9uOworaW1wb3J0IGphdmEubGFuZy5yZWZsZWN0Lkludm9jYXRpb25UYXJnZXRFeGNlcHRpb247
CitpbXBvcnQgamF2YS5sYW5nLnJlZmxlY3QuTWV0aG9kOworaW1wb3J0IGphdmEudXRpbC5MaXN0
OworaW1wb3J0IGphdmEudXRpbC5NYXA7CitpbXBvcnQgamF2YS51dGlsLlNldDsKKworaW1wb3J0
IGphdmF4LmFubm90YXRpb24ucHJvY2Vzc2luZy5Sb3VuZEVudmlyb25tZW50OworaW1wb3J0IGph
dmF4LmFubm90YXRpb24ucHJvY2Vzc2luZy5TdXBwb3J0ZWRBbm5vdGF0aW9uVHlwZXM7CitpbXBv
cnQgamF2YXguYW5ub3RhdGlvbi5wcm9jZXNzaW5nLlN1cHBvcnRlZFNvdXJjZVZlcnNpb247Citp
bXBvcnQgamF2YXgubGFuZy5tb2RlbC5Bbm5vdGF0ZWRDb25zdHJ1Y3Q7CitpbXBvcnQgamF2YXgu
bGFuZy5tb2RlbC5Tb3VyY2VWZXJzaW9uOworaW1wb3J0IGphdmF4LmxhbmcubW9kZWwuZWxlbWVu
dC5Bbm5vdGF0aW9uTWlycm9yOworaW1wb3J0IGphdmF4LmxhbmcubW9kZWwuZWxlbWVudC5Bbm5v
dGF0aW9uVmFsdWU7CitpbXBvcnQgamF2YXgubGFuZy5tb2RlbC5lbGVtZW50LkVsZW1lbnQ7Citp
bXBvcnQgamF2YXgubGFuZy5tb2RlbC5lbGVtZW50LkV4ZWN1dGFibGVFbGVtZW50OworaW1wb3J0
IGphdmF4LmxhbmcubW9kZWwuZWxlbWVudC5UeXBlRWxlbWVudDsKK2ltcG9ydCBqYXZheC5sYW5n
Lm1vZGVsLmVsZW1lbnQuVHlwZVBhcmFtZXRlckVsZW1lbnQ7CitpbXBvcnQgamF2YXgubGFuZy5t
b2RlbC5lbGVtZW50LlZhcmlhYmxlRWxlbWVudDsKK2ltcG9ydCBqYXZheC5sYW5nLm1vZGVsLnR5
cGUuQXJyYXlUeXBlOworaW1wb3J0IGphdmF4LmxhbmcubW9kZWwudHlwZS5EZWNsYXJlZFR5cGU7
CitpbXBvcnQgamF2YXgubGFuZy5tb2RlbC50eXBlLlR5cGVLaW5kOworaW1wb3J0IGphdmF4Lmxh
bmcubW9kZWwudHlwZS5UeXBlTWlycm9yOworaW1wb3J0IGphdmF4LmxhbmcubW9kZWwudXRpbC5F
bGVtZW50RmlsdGVyOworCitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLmFwdC50ZXN0
cy5hbm5vdGF0aW9ucy5UeXBlOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb21waWxlci5hcHQu
dGVzdHMuYW5ub3RhdGlvbnMuVHlwZSQxOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb21waWxl
ci5hcHQudGVzdHMucHJvY2Vzc29ycy5iYXNlLkJhc2VQcm9jZXNzb3I7CisKKy8qKgorICogQSBw
cm9jZXNzb3IgdGhhdCBleHBsb3JlcyB0aGUgamF2YSA4IHNwZWNpZmljIGVsZW1lbnRzIGFuZCB2
YWxpZGF0ZXMgdGhlIGxhbWJkYSBhbmQgCisgKiB0eXBlIGFubm90YXRlZCBlbGVtZW50cy4gVG8g
ZW5hYmxlIHRoaXMgcHJvY2Vzc29yLCBhZGQgCisgKiAtQW9yZy5lY2xpcHNlLmpkdC5jb21waWxl
ci5hcHQudGVzdHMucHJvY2Vzc29ycy5lbGVtZW50cy5KYXZhOEVsZW1lbnRQcm9jZXNzb3IgdG8g
dGhlIGNvbW1hbmQgbGluZS4KKyAqIEBzaW5jZSAzLjkgQkVUQV9KQVZBOAorICovCitAU3VwcG9y
dGVkQW5ub3RhdGlvblR5cGVzKCJvcmcuZWNsaXBzZS5qZHQuY29tcGlsZXIuYXB0LnRlc3RzLmFu
bm90YXRpb25zLlR5cGUiKQorQFN1cHBvcnRlZFNvdXJjZVZlcnNpb24oU291cmNlVmVyc2lvbi5S
RUxFQVNFXzgpCitwdWJsaWMgY2xhc3MgSmF2YThFbGVtZW50UHJvY2Vzc29yIGV4dGVuZHMgQmFz
ZVByb2Nlc3NvciB7CisJCisJLy8gQWx3YXlzIHJldHVybiBmYWxzZSBmcm9tIHRoaXMgcHJvY2Vz
c29yLCBiZWNhdXNlIGl0IHN1cHBvcnRzICIqIi4KKwkvLyBUaGUgcmV0dXJuIHZhbHVlIGRvZXMg
bm90IHNpZ25pZnkgc3VjY2VzcyBvciBmYWlsdXJlIQorCUBPdmVycmlkZQorCXB1YmxpYyBib29s
ZWFuIHByb2Nlc3MoU2V0PD8gZXh0ZW5kcyBUeXBlRWxlbWVudD4gYW5ub3RhdGlvbnMsIFJvdW5k
RW52aXJvbm1lbnQgcm91bmRFbnYpIHsKKwkJaWYgKHJvdW5kRW52LnByb2Nlc3NpbmdPdmVyKCkp
IHsKKwkJCXJldHVybiBmYWxzZTsKKwkJfQorCisJCU1hcDxTdHJpbmcsIFN0cmluZz4gb3B0aW9u
cyA9IHByb2Nlc3NpbmdFbnYuZ2V0T3B0aW9ucygpOworCQlpZiAoIW9wdGlvbnMuY29udGFpbnNL
ZXkodGhpcy5nZXRDbGFzcygpLmdldE5hbWUoKSkpIHsKKwkJCS8vIERpc2FibGUgdGhpcyBwcm9j
ZXNzb3IgdW5sZXNzIHdlIGFyZSBpbnRlbnRpb25hbGx5IHBlcmZvcm1pbmcgdGhlIHRlc3QuCisJ
CQlyZXR1cm4gZmFsc2U7CisJCX0gZWxzZSB7CisJCQl0cnkgeworCQkJCWlmICghaW52b2tlVGVz
dE1ldGhvZHMob3B0aW9ucykpIHsKKwkJCQkJdGVzdEFsbCgpOworCQkJCX0KKwkJCQlzdXBlci5y
ZXBvcnRTdWNjZXNzKCk7CisJCQl9IGNhdGNoIChBc3NlcnRpb25GYWlsZWRFcnJvciBlKSB7CisJ
CQkJc3VwZXIucmVwb3J0RXJyb3IoZ2V0RXhjZXB0aW9uU3RhY2tUcmFjZShlKSk7CisJCQl9IGNh
dGNoIChUaHJvd2FibGUgZSkgeworCQkJCWUucHJpbnRTdGFja1RyYWNlKCk7CisJCQl9CisJCX0K
KwkJcmV0dXJuIGZhbHNlOworCX0KKwlwdWJsaWMgYm9vbGVhbiBpbnZva2VUZXN0TWV0aG9kcyhN
YXA8U3RyaW5nLCBTdHJpbmc+IG9wdGlvbnMpIHRocm93cyBUaHJvd2FibGUgeworCQlNZXRob2Qg
dGVzdE1ldGhvZCA9IG51bGw7CisJCVNldDxTdHJpbmc+IGtleXMgPSBvcHRpb25zLmtleVNldCgp
OworCQlib29sZWFuIHRlc3RzRm91bmQgPSBmYWxzZTsKKwkJZm9yIChTdHJpbmcgb3B0aW9uIDog
a2V5cykgeworCQkJaWYgKG9wdGlvbi5zdGFydHNXaXRoKCJ0ZXN0IikpIHsKKwkJCQl0cnkgewor
CQkJCQl0ZXN0TWV0aG9kID0gdGhpcy5nZXRDbGFzcygpLmdldERlY2xhcmVkTWV0aG9kKG9wdGlv
biwgbmV3IENsYXNzWzBdKTsKKwkJCQkJaWYgKHRlc3RNZXRob2QgIT0gbnVsbCkgeworCQkJCQkJ
dGVzdHNGb3VuZCA9IHRydWU7CisJCQkJCQl0ZXN0TWV0aG9kLmludm9rZSh0aGlzLCAgbmV3IE9i
amVjdFswXSk7CisJCQkJCX0KKwkJCQl9IGNhdGNoIChJbnZvY2F0aW9uVGFyZ2V0RXhjZXB0aW9u
IGUpIHsKKwkJCQkJdGhyb3cgZS5nZXRDYXVzZSgpOworCQkJCX0gY2F0Y2ggKEV4Y2VwdGlvbiBl
KSB7CisJCQkJCXN1cGVyLnJlcG9ydEVycm9yKGdldEV4Y2VwdGlvblN0YWNrVHJhY2UoZSkpOwor
CQkJCX0KKwkJCX0KKwkJfQorCQlyZXR1cm4gdGVzdHNGb3VuZDsKKwl9CisJcHVibGljIHZvaWQg
dGVzdEFsbCgpIHRocm93cyBBc3NlcnRpb25GYWlsZWRFcnJvciB7CisJCXRlc3RTRThTcGVjaWZp
Y3MoKTsKKwkJdGVzdExhbWJkYVNwZWNpZmljcygpOworCQl0ZXN0VHlwZUFubm90YXRpb25zKCk7
CisJCXRlc3RUeXBlQW5ub3RhdGlvbnMxKCk7CisJCXRlc3RUeXBlQW5ub3RhdGlvbnMyKCk7CisJ
CXRlc3RUeXBlQW5ub3RhdGlvbnMzKCk7CisJCXRlc3RUeXBlQW5ub3RhdGlvbnM0KCk7CisJCXRl
c3RUeXBlQW5ub3RhdGlvbnM1KCk7CisJCXRlc3RUeXBlQW5ub3RhdGlvbnM2KCk7CisJCXRlc3RU
eXBlQW5ub3RhdGlvbnM3KCk7CisJCXRlc3RUeXBlQW5ub3RhdGlvbnM4KCk7CisJfQorCQorCXB1
YmxpYyB2b2lkIHRlc3RMYW1iZGFTcGVjaWZpY3MoKSB7CisJCVR5cGVFbGVtZW50IGFubm90YXRl
ZFR5cGUgPSBfZWxlbWVudFV0aWxzLmdldFR5cGVFbGVtZW50KCJ0YXJnZXRzLm1vZGVsOC5MYW1i
ZGFUZXN0Iik7CisJCWFzc2VydE5vdE51bGwoIkphdmE4RWxlbWVudFByb2Nlc3NvciNleGFtaW5l
TGFtYmRhU3BlY2lmaWNzOiBUeXBlIGVsZW1lbnQgZm9yIExhbWJkYVRlc3Qgc2hvdWxkIG5vdCBi
ZSBudWxsIiwgYW5ub3RhdGVkVHlwZSk7CisJCWFzc2VydEZhbHNlKCJKYXZhOEVsZW1lbnRQcm9j
ZXNzb3IjZXhhbWluZUxhbWJkYVNwZWNpZmljczogVHlwZSBMYW1iZGFUZXN0IGlzIG5vdCBhIGZ1
bmN0aW9uYWwgaW50ZXJmYWNlIiwgX2VsZW1lbnRVdGlscy5pc0Z1bmN0aW9uYWxJbnRlcmZhY2Uo
YW5ub3RhdGVkVHlwZSkpOworCQlMaXN0PD8gZXh0ZW5kcyBFbGVtZW50PiBtZW1iZXJzID0gX2Vs
ZW1lbnRVdGlscy5nZXRBbGxNZW1iZXJzKGFubm90YXRlZFR5cGUpOworCQlFeGVjdXRhYmxlRWxl
bWVudCBtZXRob2QgPSBudWxsOworCQlmb3IgKEV4ZWN1dGFibGVFbGVtZW50IG1lbWJlciA6IEVs
ZW1lbnRGaWx0ZXIubWV0aG9kc0luKG1lbWJlcnMpKSB7CisJCQlpZiAoImZvbyIuZXF1YWxzKG1l
bWJlci5nZXRTaW1wbGVOYW1lKCkudG9TdHJpbmcoKSkpIHsKKwkJCQltZXRob2QgPSBtZW1iZXI7
CisJCQkJYnJlYWs7CisJCQl9CisJCX0KKwkJYXNzZXJ0Tm90TnVsbCgiSmF2YThFbGVtZW50UHJv
Y2Vzc29yI2V4YW1pbmVMYW1iZGFTcGVjaWZpY3M6IEVsZW1lbnQgZm9yIG1ldGhvZCBmb28gc2hv
dWxkIG5vdCBiZSBudWxsIiwgbWV0aG9kKTsKKwkJYXNzZXJ0RmFsc2UoIkphdmE4RWxlbWVudFBy
b2Nlc3NvciNleGFtaW5lTGFtYmRhU3BlY2lmaWNzOiBNZXRob2QgZm9vIGlzIG5vdCBhIGRlZmF1
bHQgbWV0aG9kIiwgbWV0aG9kLmlzRGVmYXVsdCgpKTsKKworCQlhbm5vdGF0ZWRUeXBlID0gX2Vs
ZW1lbnRVdGlscy5nZXRUeXBlRWxlbWVudCgidGFyZ2V0cy5tb2RlbDguRGVmYXVsdEludGVyZmFj
ZSIpOworCQlhc3NlcnROb3ROdWxsKCJKYXZhOEVsZW1lbnRQcm9jZXNzb3IjZXhhbWluZUxhbWJk
YVNwZWNpZmljczogVHlwZSBlbGVtZW50IGZvciBEZWZhdWx0SW50ZXJmYWNlIHNob3VsZCBub3Qg
YmUgbnVsbCIsIGFubm90YXRlZFR5cGUpOworCQlhc3NlcnRGYWxzZSgiSmF2YThFbGVtZW50UHJv
Y2Vzc29yI2V4YW1pbmVMYW1iZGFTcGVjaWZpY3M6IFR5cGUgRGVmYXVsdEludGVyZmFjZSBpcyBu
b3QgYSBmdW5jdGlvbmFsIGludGVyZmFjZSIsIF9lbGVtZW50VXRpbHMuaXNGdW5jdGlvbmFsSW50
ZXJmYWNlKGFubm90YXRlZFR5cGUpKTsKKworCQltZXRob2QgPSBudWxsOworCQltZW1iZXJzID0g
X2VsZW1lbnRVdGlscy5nZXRBbGxNZW1iZXJzKGFubm90YXRlZFR5cGUpOworCQlmb3IgKEV4ZWN1
dGFibGVFbGVtZW50IG1lbWJlciA6IEVsZW1lbnRGaWx0ZXIubWV0aG9kc0luKG1lbWJlcnMpKSB7
CisJCQlpZiAoImRlZmF1bHRNZXRob2QiLmVxdWFscyhtZW1iZXIuZ2V0U2ltcGxlTmFtZSgpLnRv
U3RyaW5nKCkpKSB7CisJCQkJbWV0aG9kID0gbWVtYmVyOworCQkJCWJyZWFrOworCQkJfQorCQl9
CisJCWFzc2VydE5vdE51bGwoIkphdmE4RWxlbWVudFByb2Nlc3NvciNleGFtaW5lTGFtYmRhU3Bl
Y2lmaWNzOiBFbGVtZW50IGZvciBtZXRob2QgZGVmYXVsdE1ldGhvZCgpIHNob3VsZCBub3QgYmUg
bnVsbCIsIG1ldGhvZCk7CisJCWFzc2VydFRydWUoIkphdmE4RWxlbWVudFByb2Nlc3NvciNleGFt
aW5lTGFtYmRhU3BlY2lmaWNzOiBNZXRob2QgZGVmYXVsdE1ldGhvZCgpIHNob3VsZCBiZSBhIGRl
ZmF1bHQgbWV0aG9kIiwgbWV0aG9kLmlzRGVmYXVsdCgpKTsKKworCQltZXRob2QgPSBudWxsOwor
CQlmb3IgKEV4ZWN1dGFibGVFbGVtZW50IG1lbWJlciA6IEVsZW1lbnRGaWx0ZXIubWV0aG9kc0lu
KG1lbWJlcnMpKSB7CisJCQlpZiAoInN0YXRpY01ldGhvZCIuZXF1YWxzKG1lbWJlci5nZXRTaW1w
bGVOYW1lKCkudG9TdHJpbmcoKSkpIHsKKwkJCQltZXRob2QgPSBtZW1iZXI7CisJCQkJYnJlYWs7
CisJCQl9CisJCX0KKwkJYXNzZXJ0Tm90TnVsbCgiSmF2YThFbGVtZW50UHJvY2Vzc29yI2V4YW1p
bmVMYW1iZGFTcGVjaWZpY3M6IEVsZW1lbnQgZm9yIG1ldGhvZCBzdGF0aWNNZXRob2QoKSBzaG91
bGQgbm90IGJlIG51bGwiLCBtZXRob2QpOworCQlhc3NlcnRGYWxzZSgiSmF2YThFbGVtZW50UHJv
Y2Vzc29yI2V4YW1pbmVMYW1iZGFTcGVjaWZpY3M6IE1ldGhvZCBzdGF0aWNNZXRob2QoKSBzaG91
bGUgbm90IGJlIGEgZGVmYXVsdCBtZXRob2QiLCBtZXRob2QuaXNEZWZhdWx0KCkpOworCisJCWFu
bm90YXRlZFR5cGUgPSBfZWxlbWVudFV0aWxzLmdldFR5cGVFbGVtZW50KCJ0YXJnZXRzLm1vZGVs
OC5GdW5jdGlvbmFsSW50ZXJmYWNlIik7CisJCWFzc2VydE5vdE51bGwoIkphdmE4RWxlbWVudFBy
b2Nlc3NvciNleGFtaW5lTGFtYmRhU3BlY2lmaWNzOiBUeXBlIGVsZW1lbnQgZm9yIEZ1bmN0aW9u
YWxJbnRlcmZhY2Ugc2hvdWxkIG5vdCBiZSBudWxsIiwgYW5ub3RhdGVkVHlwZSk7CisJCWFzc2Vy
dFRydWUoIkphdmE4RWxlbWVudFByb2Nlc3NvciNleGFtaW5lTGFtYmRhU3BlY2lmaWNzOiBUeXBl
IEZ1bmN0aW9uYWxJbnRlcmZhY2Ugc2hvdWxkIGJlIGEgZnVuY3Rpb25hbCBpbnRlcmZhY2UiLCBf
ZWxlbWVudFV0aWxzLmlzRnVuY3Rpb25hbEludGVyZmFjZShhbm5vdGF0ZWRUeXBlKSk7CisKKwkJ
bWV0aG9kID0gbnVsbDsKKwkJbWVtYmVycyA9IF9lbGVtZW50VXRpbHMuZ2V0QWxsTWVtYmVycyhh
bm5vdGF0ZWRUeXBlKTsKKwkJZm9yIChFeGVjdXRhYmxlRWxlbWVudCBtZW1iZXIgOiBFbGVtZW50
RmlsdGVyLm1ldGhvZHNJbihtZW1iZXJzKSkgeworCQkJaWYgKCJhYnN0cmFjdE1ldGhvZCIuZXF1
YWxzKG1lbWJlci5nZXRTaW1wbGVOYW1lKCkudG9TdHJpbmcoKSkpIHsKKwkJCQltZXRob2QgPSBt
ZW1iZXI7CisJCQkJYnJlYWs7CisJCQl9CisJCX0KKwkJYXNzZXJ0Tm90TnVsbCgiSmF2YThFbGVt
ZW50UHJvY2Vzc29yI2V4YW1pbmVMYW1iZGFTcGVjaWZpY3M6IEVsZW1lbnQgZm9yIG1ldGhvZCBh
YnN0cmFjdE1ldGhvZCgpIHNob3VsZCBub3QgYmUgbnVsbCIsIG1ldGhvZCk7CisJCWFzc2VydEZh
bHNlKCJKYXZhOEVsZW1lbnRQcm9jZXNzb3IjZXhhbWluZUxhbWJkYVNwZWNpZmljczogTWV0aG9k
IGFic3RyYWN0TWV0aG9kKCkgc2hvdWxkIG5vdCBiZSBhIGRlZmF1bHQgbWV0aG9kIiwgbWV0aG9k
LmlzRGVmYXVsdCgpKTsKKwl9CisKKwlwdWJsaWMgdm9pZCB0ZXN0U0U4U3BlY2lmaWNzKCkgewor
CQlUeXBlRWxlbWVudCBhbm5vdGF0ZWRUeXBlID0gX2VsZW1lbnRVdGlscy5nZXRUeXBlRWxlbWVu
dCgidGFyZ2V0cy5tb2RlbDguWCIpOworCQlleGFtaW5lU0U4QW5ub3RhdGlvbk1ldGhvZHMoIkph
dmE4RWxlbWVudFByb2Nlc3NvciNleGFtaW5lU0U4U3BlY2lmaWNzOiAiLCBhbm5vdGF0ZWRUeXBl
LCAiYyIpOworCisJCUxpc3Q8PyBleHRlbmRzIEVsZW1lbnQ+IG1lbWJlcnMgPSBfZWxlbWVudFV0
aWxzLmdldEFsbE1lbWJlcnMoYW5ub3RhdGVkVHlwZSk7CisJCUV4ZWN1dGFibGVFbGVtZW50IG1l
dGhvZCA9IG51bGw7CisJCVZhcmlhYmxlRWxlbWVudCBmaWVsZCA9IG51bGwsIGZpZWxkMSA9IG51
bGw7CisJCUV4ZWN1dGFibGVFbGVtZW50IG1ldGhvZDIgPSBudWxsOworCQlmb3IgKEVsZW1lbnQg
bWVtYmVyIDogbWVtYmVycykgeworCQkJaWYgKCJmb28iLmVxdWFscyhtZW1iZXIuZ2V0U2ltcGxl
TmFtZSgpLnRvU3RyaW5nKCkpKSB7CisJCQkJbWV0aG9kID0gKEV4ZWN1dGFibGVFbGVtZW50KSBt
ZW1iZXI7CisJCQl9IGVsc2UgaWYgKCJfZmllbGQiLmVxdWFscyhtZW1iZXIuZ2V0U2ltcGxlTmFt
ZSgpLnRvU3RyaW5nKCkpKSB7CisJCQkJZmllbGQgPSAoVmFyaWFibGVFbGVtZW50KSBtZW1iZXI7
CisJCQl9IGVsc2UgaWYgKCJub0Fubm90YXRpb25IZXJlIi5lcXVhbHMobWVtYmVyLmdldFNpbXBs
ZU5hbWUoKS50b1N0cmluZygpKSkgeworCQkJCW1ldGhvZDIgPSAoRXhlY3V0YWJsZUVsZW1lbnQp
IG1lbWJlcjsKKwkJCX0gZWxzZSBpZiAoIl9maWVsZDEiLmVxdWFscyhtZW1iZXIuZ2V0U2ltcGxl
TmFtZSgpLnRvU3RyaW5nKCkpKSB7CisJCQkJZmllbGQxID0gKFZhcmlhYmxlRWxlbWVudCkgbWVt
YmVyOworCQkJfQorCQl9CisJCWFzc2VydE5vdE51bGwoIk1ldGhvZCBzaG91bGQgbm90IGJlIG51
bGwiLCBtZXRob2QpOworCQlUeXBlTWlycm9yIHR5cGVNaXJyb3IgPSBtZXRob2QuZ2V0UmV0dXJu
VHlwZSgpOworCQlhc3NlcnROb3ROdWxsKCJKYXZhOEVsZW1lbnRQcm9jZXNzb3IjZXhhbWluZVNF
OFNwZWNpZmljczogRWxlbWVudCBmb3IgbWV0aG9kIGZvbyBzaG91bGQgbm90IGJlIG51bGwiLCB0
eXBlTWlycm9yKTsKKwkJZXhhbWluZVNFOEFubm90YXRpb25NZXRob2RzKCJKYXZhOEVsZW1lbnRQ
cm9jZXNzb3IjZXhhbWluZVNFOFNwZWNpZmljczogIiwgdHlwZU1pcnJvciwgIm0iKTsKKwkJTGlz
dDw/IGV4dGVuZHMgQW5ub3RhdGlvbk1pcnJvcj4gbGlzdCA9IHR5cGVNaXJyb3IuZ2V0QW5ub3Rh
dGlvbk1pcnJvcnMoKTsKKwkJYXNzZXJ0RXF1YWxzKCJKYXZhOEVsZW1lbnRQcm9jZXNzb3IjZXhh
bWluZVNFOFNwZWNpZmljczogSW5jb3JyZWN0IG5vIG9mIGFubm90YXRpb24gbWlycm9ycyIsIDEs
IGxpc3Quc2l6ZSgpKTsKKwkJYXNzZXJ0Tm90TnVsbCgiSmF2YThFbGVtZW50UHJvY2Vzc29yI2V4
YW1pbmVTRThTcGVjaWZpY3M6IEVsZW1lbnQgZm9yIGZpZWxkIF9maWVsZCBzaG91bGQgbm90IGJl
IG51bGwiLCBmaWVsZCk7CisJCXR5cGVNaXJyb3IgPSBmaWVsZC5hc1R5cGUoKTsgCisJCWV4YW1p
bmVTRThBbm5vdGF0aW9uTWV0aG9kcygiSmF2YThFbGVtZW50UHJvY2Vzc29yI2V4YW1pbmVTRThT
cGVjaWZpY3M6ICIsIHR5cGVNaXJyb3IsICJmIik7CisJCQorCQl0eXBlTWlycm9yID0gZmllbGQx
LmFzVHlwZSgpOworCQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZU1pcnJvciwgbmV3IFN0cmlu
Z1tdeyJAVHlwZSh2YWx1ZT1mMSkifSk7CisJCQorCQl0eXBlTWlycm9yID0gbWV0aG9kMi5nZXRS
ZXR1cm5UeXBlKCk7CisJCWFzc2VydE5vdE51bGwoIkphdmE4RWxlbWVudFByb2Nlc3NvciNleGFt
aW5lU0U4U3BlY2lmaWNzOiBFbGVtZW50IGZvciBtZXRob2Qgbm9Bbm5vdGF0aW9uSGVyZSBzaG91
bGQgbm90IGJlIG51bGwiLCB0eXBlTWlycm9yKTsKKwkJVHlwZSBhbm5vdCA9IHR5cGVNaXJyb3Iu
Z2V0QW5ub3RhdGlvbihUeXBlLmNsYXNzKTsKKwkJYXNzZXJ0TnVsbCgiQW5ub3RhdGlvbiBzaG91
bGQgbm90IGJlIHByZXNlbnQiLCBhbm5vdCk7CisJCUFubm90YXRpb25bXSBhbm5vdHMgPSB0eXBl
TWlycm9yLmdldEFubm90YXRpb25zQnlUeXBlKFR5cGUuY2xhc3MpOworCQlhc3NlcnRFcXVhbHMo
IkFubm90YXRpb24gaXMgbm90IGVtcHR5IGxpc3QiLCAwLCBhbm5vdHMubGVuZ3RoKTsKKwl9CisJ
CisJcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9ucygpIHsKKwkJVHlwZUVsZW1lbnQgYW5u
b3RhdGVkVHlwZSA9IF9lbGVtZW50VXRpbHMuZ2V0VHlwZUVsZW1lbnQoInRhcmdldHMubW9kZWw4
LlgiKTsKKwkJVHlwZU1pcnJvciBzdXBlclR5cGUgPSBhbm5vdGF0ZWRUeXBlLmdldFN1cGVyY2xh
c3MoKTsKKwkJYXNzZXJ0Tm90TnVsbCgiSmF2YThFbGVtZW50UHJvY2Vzc29yI2V4YW1pbmVTRThT
cGVjaWZpY3M6IHN1cGVyIHR5cGUgbm90IGJlIG51bGwiLCBzdXBlclR5cGUpOworCQl2ZXJpZnlU
eXBlQW5ub3RhdGlvbnMoc3VwZXJUeXBlLCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPXMpIn0p
OworCisJCUxpc3Q8PyBleHRlbmRzIFR5cGVNaXJyb3I+IGludGVyZmFjZXMgID0gYW5ub3RhdGVk
VHlwZS5nZXRJbnRlcmZhY2VzKCk7CisJCWFzc2VydE5vdE51bGwoIkphdmE4RWxlbWVudFByb2Nl
c3NvciNleGFtaW5lU0U4U3BlY2lmaWNzOiBzdXBlciBpbnRlcmZhY2VzIGxpc3Qgc2hvdWxkIG5v
dCBiZSBudWxsIiwgaW50ZXJmYWNlcyk7CisJCWFzc2VydEVxdWFscygiSmF2YThFbGVtZW50UHJv
Y2Vzc29yI2V4YW1pbmVTRThTcGVjaWZpY3M6IGluY29ycmVjdCBubyBvZiBzdXBlciBpbnRlcmZh
Y2VzIiwgMiwgaW50ZXJmYWNlcy5zaXplKCkpOworCQlzdXBlclR5cGUgPSBpbnRlcmZhY2VzLmdl
dCgwKTsKKwkJdmVyaWZ5VHlwZUFubm90YXRpb25zKHN1cGVyVHlwZSwgbmV3IFN0cmluZ1tdeyJA
VHlwZSh2YWx1ZT1pMSkifSk7CisJCXN1cGVyVHlwZSA9IGludGVyZmFjZXMuZ2V0KDEpOworCQl2
ZXJpZnlUeXBlQW5ub3RhdGlvbnMoc3VwZXJUeXBlLCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVl
PWkyKSJ9KTsKKwl9CisJCisJcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczEoKSB7CisJ
CVR5cGVFbGVtZW50IGFubm90YXRlZFR5cGUgPSBfZWxlbWVudFV0aWxzLmdldFR5cGVFbGVtZW50
KCJ0YXJnZXRzLm1vZGVsOC5YIik7CisJCUxpc3Q8PyBleHRlbmRzIEVsZW1lbnQ+IG1lbWJlcnMg
PSBfZWxlbWVudFV0aWxzLmdldEFsbE1lbWJlcnMoYW5ub3RhdGVkVHlwZSk7CisJCUV4ZWN1dGFi
bGVFbGVtZW50IG1ldGhvZCA9IG51bGw7CisJCWZvciAoRWxlbWVudCBtZW1iZXIgOiBtZW1iZXJz
KSB7CisJCQlpZiAoImJhciIuZXF1YWxzKG1lbWJlci5nZXRTaW1wbGVOYW1lKCkudG9TdHJpbmco
KSkpIHsKKwkJCQltZXRob2QgPSAoRXhlY3V0YWJsZUVsZW1lbnQpIG1lbWJlcjsKKwkJCX0KKwkJ
fQorCQlMaXN0PD8gZXh0ZW5kcyBWYXJpYWJsZUVsZW1lbnQ+IHBhcmFtcyA9IG1ldGhvZC5nZXRQ
YXJhbWV0ZXJzKCk7CisJCWFzc2VydEVxdWFscygiSW5jb3JyZWN0IG5vIG9mIHBhcmFtcyBmb3Ig
bWV0aG9kIGJhcigpIiwgMiwgcGFyYW1zLnNpemUoKSk7CisJCVZhcmlhYmxlRWxlbWVudCBwYXJh
bSA9IChWYXJpYWJsZUVsZW1lbnQpIHBhcmFtcy5nZXQoMCk7CisJCVR5cGVNaXJyb3IgdHlwZU1p
cnJvciA9IHBhcmFtLmFzVHlwZSgpOworCQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZU1pcnJv
ciwgbmV3IFN0cmluZ1tdeyJAVHlwZSh2YWx1ZT1wMSkifSk7CisJCXBhcmFtID0gKFZhcmlhYmxl
RWxlbWVudCkgcGFyYW1zLmdldCgxKTsKKwkJdHlwZU1pcnJvciA9IHBhcmFtLmFzVHlwZSgpOwor
CQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZU1pcnJvciwgbmV3IFN0cmluZ1tdeyJAVHlwZSh2
YWx1ZT1wMikifSk7CisJfQorCQorCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnMyKCkg
eworCQlUeXBlRWxlbWVudCBhbm5vdGF0ZWRUeXBlID0gX2VsZW1lbnRVdGlscy5nZXRUeXBlRWxl
bWVudCgidGFyZ2V0cy5tb2RlbDguWSIpOworCQlMaXN0PD8gZXh0ZW5kcyBFbGVtZW50PiBtZW1i
ZXJzID0gX2VsZW1lbnRVdGlscy5nZXRBbGxNZW1iZXJzKGFubm90YXRlZFR5cGUpOworCQlWYXJp
YWJsZUVsZW1lbnQgZmllbGQyID0gbnVsbDsKKwkJVmFyaWFibGVFbGVtZW50IGZpZWxkMyA9IG51
bGw7CisJCWZvciAoRWxlbWVudCBtZW1iZXIgOiBtZW1iZXJzKSB7CisJCQlpZiAoIl9maWVsZDIi
LmVxdWFscyhtZW1iZXIuZ2V0U2ltcGxlTmFtZSgpLnRvU3RyaW5nKCkpKSB7CisJCQkJZmllbGQy
ID0gKFZhcmlhYmxlRWxlbWVudCkgbWVtYmVyOworCQkJfSBlbHNlIGlmICgiX2ZpZWxkMyIuZXF1
YWxzKG1lbWJlci5nZXRTaW1wbGVOYW1lKCkudG9TdHJpbmcoKSkpIHsKKwkJCQlmaWVsZDMgPSAo
VmFyaWFibGVFbGVtZW50KSBtZW1iZXI7CisJCQl9CisJCX0KKwkJCisJCS8vQFR5cGUoImYiKSBT
dHJpbmcgQFR5cGUoImYxIikgW10gQFR5cGUoImYyIikgW10gX2ZpZWxkMiBAVHlwZSgiZjMiKSBb
XSwgX2ZpZWxkMyBAVHlwZSgiZjQiKSBbXVtdID0gbnVsbDsKKwkJYXNzZXJ0Tm90TnVsbCgiSmF2
YThFbGVtZW50UHJvY2Vzc29yI2V4YW1pbmVTRThTcGVjaWZpY3M6IEVsZW1lbnQgZm9yIGZpZWxk
IF9maWVsZDIgc2hvdWxkIG5vdCBiZSBudWxsIiwgZmllbGQyKTsKKwkJVHlwZU1pcnJvciB0eXBl
TWlycm9yID0gZmllbGQyLmFzVHlwZSgpOworCQlhc3NlcnRFcXVhbHMoIlNob3VsZCBiZSBhbiBh
cnJheSB0eXBlIiwgVHlwZUtpbmQuQVJSQVksIHR5cGVNaXJyb3IuZ2V0S2luZCgpKTsKKwkJdmVy
aWZ5VHlwZUFubm90YXRpb25zKHR5cGVNaXJyb3IsIG5ldyBTdHJpbmdbXXsiQFR5cGUodmFsdWU9
ZjMpIn0pOworCQl0eXBlTWlycm9yID0gKChBcnJheVR5cGUpIHR5cGVNaXJyb3IpLmdldENvbXBv
bmVudFR5cGUoKTsKKwkJYXNzZXJ0RXF1YWxzKCJTaG91bGQgYmUgYW4gYXJyYXkgdHlwZSIsIFR5
cGVLaW5kLkFSUkFZLCB0eXBlTWlycm9yLmdldEtpbmQoKSk7CisJCXZlcmlmeVR5cGVBbm5vdGF0
aW9ucyh0eXBlTWlycm9yLCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPWYxKSJ9KTsKKwkJdHlw
ZU1pcnJvciA9ICgoQXJyYXlUeXBlKSB0eXBlTWlycm9yKS5nZXRDb21wb25lbnRUeXBlKCk7CisJ
CWFzc2VydEVxdWFscygiU2hvdWxkIGJlIGFuIGFycmF5IHR5cGUiLCBUeXBlS2luZC5BUlJBWSwg
dHlwZU1pcnJvci5nZXRLaW5kKCkpOworCQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZU1pcnJv
ciwgbmV3IFN0cmluZ1tdeyJAVHlwZSh2YWx1ZT1mMikifSk7CisKKwkJYXNzZXJ0Tm90TnVsbCgi
SmF2YThFbGVtZW50UHJvY2Vzc29yI2V4YW1pbmVTRThTcGVjaWZpY3M6IEVsZW1lbnQgZm9yIGZp
ZWxkIF9maWVsZDMgc2hvdWxkIG5vdCBiZSBudWxsIiwgZmllbGQzKTsKKwkJdHlwZU1pcnJvciA9
IGZpZWxkMy5hc1R5cGUoKTsKKwkJLy8gVGhlIHNlY29uZCBmaWVsZCBiaW5kaW5nIGRvZXNuJ3Qg
c2VlbSB0byBoYXZlIHRoZSBhbm5vdGF0aW9ucy4gVG8gYmUgaW52ZXN0aWdhdGVkCisJCXZlcmlm
eVR5cGVBbm5vdGF0aW9ucyh0eXBlTWlycm9yLCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPWY0
KSJ9KTsKKwkJdHlwZU1pcnJvciA9ICgoQXJyYXlUeXBlKSB0eXBlTWlycm9yKS5nZXRDb21wb25l
bnRUeXBlKCk7CisJCWFzc2VydEVxdWFscygiU2hvdWxkIGJlIGFuIGFycmF5IHR5cGUiLCBUeXBl
S2luZC5BUlJBWSwgdHlwZU1pcnJvci5nZXRLaW5kKCkpOworCQl2ZXJpZnlUeXBlQW5ub3RhdGlv
bnModHlwZU1pcnJvciwgbmV3IFN0cmluZ1tde30pOworCQl0eXBlTWlycm9yID0gKChBcnJheVR5
cGUpIHR5cGVNaXJyb3IpLmdldENvbXBvbmVudFR5cGUoKTsKKwkJYXNzZXJ0RXF1YWxzKCJTaG91
bGQgYmUgYW4gYXJyYXkgdHlwZSIsIFR5cGVLaW5kLkFSUkFZLCB0eXBlTWlycm9yLmdldEtpbmQo
KSk7CisJCXZlcmlmeVR5cGVBbm5vdGF0aW9ucyh0eXBlTWlycm9yLCBuZXcgU3RyaW5nW117IkBU
eXBlKHZhbHVlPWYxKSJ9KTsKKwkJdHlwZU1pcnJvciA9ICgoQXJyYXlUeXBlKSB0eXBlTWlycm9y
KS5nZXRDb21wb25lbnRUeXBlKCk7CisJCWFzc2VydEVxdWFscygiU2hvdWxkIGJlIGFuIGFycmF5
IHR5cGUiLCBUeXBlS2luZC5BUlJBWSwgdHlwZU1pcnJvci5nZXRLaW5kKCkpOworCQl2ZXJpZnlU
eXBlQW5ub3RhdGlvbnModHlwZU1pcnJvciwgbmV3IFN0cmluZ1tdeyJAVHlwZSh2YWx1ZT1mMiki
fSk7CisJfQorCQorCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnMzKCkgeworCQlUeXBl
RWxlbWVudCBhbm5vdGF0ZWRUeXBlID0gX2VsZW1lbnRVdGlscy5nZXRUeXBlRWxlbWVudCgidGFy
Z2V0cy5tb2RlbDguWSIpOworCQlMaXN0PD8gZXh0ZW5kcyBFbGVtZW50PiBtZW1iZXJzID0gX2Vs
ZW1lbnRVdGlscy5nZXRBbGxNZW1iZXJzKGFubm90YXRlZFR5cGUpOworCQlFeGVjdXRhYmxlRWxl
bWVudCBtZXRob2QgPSBudWxsOworCQlmb3IgKEVsZW1lbnQgbWVtYmVyIDogbWVtYmVycykgewor
CQkJaWYgKCJmb28iLmVxdWFscyhtZW1iZXIuZ2V0U2ltcGxlTmFtZSgpLnRvU3RyaW5nKCkpKSB7
CisJCQkJbWV0aG9kID0gKEV4ZWN1dGFibGVFbGVtZW50KSBtZW1iZXI7CisJCQl9CisJCX0KKwkJ
Ly8gQFR5cGUoIm0iKSBTdHJpbmcgQFR5cGUoIm0xIikgW10gZm9vKCkgQFR5cGUoIm0yIikgW10g
QFR5cGUoIm0zIikgW10ge30KKwkJYXNzZXJ0Tm90TnVsbCgiTWV0aG9kIHNob3VsZCBub3QgYmUg
bnVsbCIsIG1ldGhvZCk7CisJCVR5cGVNaXJyb3IgdHlwZU1pcnJvciA9IG1ldGhvZC5nZXRSZXR1
cm5UeXBlKCk7CisJCXZlcmlmeVR5cGVBbm5vdGF0aW9ucyh0eXBlTWlycm9yLCBuZXcgU3RyaW5n
W117IkBUeXBlKHZhbHVlPW0yKSJ9KTsKKwkJYXNzZXJ0RXF1YWxzKCJTaG91bGQgYmUgYW4gYXJy
YXkgdHlwZSIsIFR5cGVLaW5kLkFSUkFZLCB0eXBlTWlycm9yLmdldEtpbmQoKSk7CisJCXR5cGVN
aXJyb3IgPSAoKEFycmF5VHlwZSkgdHlwZU1pcnJvcikuZ2V0Q29tcG9uZW50VHlwZSgpOworCQl2
ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZU1pcnJvciwgbmV3IFN0cmluZ1tdeyJAVHlwZSh2YWx1
ZT1tMykifSk7CisJCWFzc2VydEVxdWFscygiU2hvdWxkIGJlIGFuIGFycmF5IHR5cGUiLCBUeXBl
S2luZC5BUlJBWSwgdHlwZU1pcnJvci5nZXRLaW5kKCkpOworCQl0eXBlTWlycm9yID0gKChBcnJh
eVR5cGUpIHR5cGVNaXJyb3IpLmdldENvbXBvbmVudFR5cGUoKTsKKwkJdmVyaWZ5VHlwZUFubm90
YXRpb25zKHR5cGVNaXJyb3IsIG5ldyBTdHJpbmdbXXsiQFR5cGUodmFsdWU9bTEpIn0pOworCQlh
c3NlcnRFcXVhbHMoIlNob3VsZCBiZSBhbiBhcnJheSB0eXBlIiwgVHlwZUtpbmQuQVJSQVksIHR5
cGVNaXJyb3IuZ2V0S2luZCgpKTsKKwkJdHlwZU1pcnJvciA9ICgoQXJyYXlUeXBlKSB0eXBlTWly
cm9yKS5nZXRDb21wb25lbnRUeXBlKCk7CisJCXZlcmlmeVR5cGVBbm5vdGF0aW9ucyh0eXBlTWly
cm9yLCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPW0pIn0pOworCX0KKworCXB1YmxpYyB2b2lk
IHRlc3RUeXBlQW5ub3RhdGlvbnM0KCkgeworCQkvLyB2b2lkIGJhciggQFR5cGUoInAxIikgU3Ry
aW5nIFtdIGEgQFR5cGUoInAyIikgW10sIEBUeXBlKCJwMyIpIGludCBAVHlwZSgicDQiKSBbXSBi
IFtdIEBUeXBlKCJwNSIpIFtdKSB7fQorCQlUeXBlRWxlbWVudCBhbm5vdGF0ZWRUeXBlID0gX2Vs
ZW1lbnRVdGlscy5nZXRUeXBlRWxlbWVudCgidGFyZ2V0cy5tb2RlbDguWSIpOworCQlMaXN0PD8g
ZXh0ZW5kcyBFbGVtZW50PiBtZW1iZXJzID0gX2VsZW1lbnRVdGlscy5nZXRBbGxNZW1iZXJzKGFu
bm90YXRlZFR5cGUpOworCQlFeGVjdXRhYmxlRWxlbWVudCBtZXRob2QgPSBudWxsOworCQlmb3Ig
KEVsZW1lbnQgbWVtYmVyIDogbWVtYmVycykgeworCQkJaWYgKCJiYXIiLmVxdWFscyhtZW1iZXIu
Z2V0U2ltcGxlTmFtZSgpLnRvU3RyaW5nKCkpKSB7CisJCQkJbWV0aG9kID0gKEV4ZWN1dGFibGVF
bGVtZW50KSBtZW1iZXI7CisJCQl9CisJCX0KKwkJYXNzZXJ0Tm90TnVsbCgiTWV0aG9kIHNob3Vs
ZCBub3QgYmUgbnVsbCIsIG1ldGhvZCk7CisJCUxpc3Q8PyBleHRlbmRzIFZhcmlhYmxlRWxlbWVu
dD4gcGFyYW1zID0gbWV0aG9kLmdldFBhcmFtZXRlcnMoKTsKKwkJYXNzZXJ0RXF1YWxzKCJJbmNv
cnJlY3Qgbm8gb2YgcGFyYW1zIGZvciBtZXRob2QgYmFyKCkiLCAyLCBwYXJhbXMuc2l6ZSgpKTsK
KwkJVmFyaWFibGVFbGVtZW50IHBhcmFtID0gKFZhcmlhYmxlRWxlbWVudCkgcGFyYW1zLmdldCgw
KTsKKwkJVHlwZU1pcnJvciB0eXBlTWlycm9yID0gcGFyYW0uYXNUeXBlKCk7CisJCXZlcmlmeVR5
cGVBbm5vdGF0aW9ucyh0eXBlTWlycm9yLCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPXAyKSJ9
KTsKKwkJYXNzZXJ0RXF1YWxzKCJTaG91bGQgYmUgYW4gYXJyYXkgdHlwZSIsIFR5cGVLaW5kLkFS
UkFZLCB0eXBlTWlycm9yLmdldEtpbmQoKSk7CisJCXR5cGVNaXJyb3IgPSAoKEFycmF5VHlwZSkg
dHlwZU1pcnJvcikuZ2V0Q29tcG9uZW50VHlwZSgpOworCQkKKwkJdmVyaWZ5VHlwZUFubm90YXRp
b25zKHR5cGVNaXJyb3IsIG5ldyBTdHJpbmdbXXt9KTsKKwkJYXNzZXJ0RXF1YWxzKCJTaG91bGQg
YmUgYW4gYXJyYXkgdHlwZSIsIFR5cGVLaW5kLkFSUkFZLCB0eXBlTWlycm9yLmdldEtpbmQoKSk7
CisJCXR5cGVNaXJyb3IgPSAoKEFycmF5VHlwZSkgdHlwZU1pcnJvcikuZ2V0Q29tcG9uZW50VHlw
ZSgpOworCQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZU1pcnJvciwgbmV3IFN0cmluZ1tdeyJA
VHlwZSh2YWx1ZT1wMSkifSk7CisKKwkJcGFyYW0gPSAoVmFyaWFibGVFbGVtZW50KSBwYXJhbXMu
Z2V0KDEpOworCQl0eXBlTWlycm9yID0gcGFyYW0uYXNUeXBlKCk7CisJCXZlcmlmeVR5cGVBbm5v
dGF0aW9ucyh0eXBlTWlycm9yLCBuZXcgU3RyaW5nW117fSk7CisJCWFzc2VydEVxdWFscygiU2hv
dWxkIGJlIGFuIGFycmF5IHR5cGUiLCBUeXBlS2luZC5BUlJBWSwgdHlwZU1pcnJvci5nZXRLaW5k
KCkpOworCQl0eXBlTWlycm9yID0gKChBcnJheVR5cGUpIHR5cGVNaXJyb3IpLmdldENvbXBvbmVu
dFR5cGUoKTsKKwkJCisJCXZlcmlmeVR5cGVBbm5vdGF0aW9ucyh0eXBlTWlycm9yLCBuZXcgU3Ry
aW5nW117IkBUeXBlKHZhbHVlPXA1KSJ9KTsKKwkJYXNzZXJ0RXF1YWxzKCJTaG91bGQgYmUgYW4g
YXJyYXkgdHlwZSIsIFR5cGVLaW5kLkFSUkFZLCB0eXBlTWlycm9yLmdldEtpbmQoKSk7CisJCXR5
cGVNaXJyb3IgPSAoKEFycmF5VHlwZSkgdHlwZU1pcnJvcikuZ2V0Q29tcG9uZW50VHlwZSgpOwor
CQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZU1pcnJvciwgbmV3IFN0cmluZ1tdeyJAVHlwZSh2
YWx1ZT1wNCkifSk7CisJCWFzc2VydEVxdWFscygiU2hvdWxkIGJlIGFuIGFycmF5IHR5cGUiLCBU
eXBlS2luZC5BUlJBWSwgdHlwZU1pcnJvci5nZXRLaW5kKCkpOworCQl0eXBlTWlycm9yID0gKChB
cnJheVR5cGUpIHR5cGVNaXJyb3IpLmdldENvbXBvbmVudFR5cGUoKTsKKwkJdmVyaWZ5VHlwZUFu
bm90YXRpb25zKHR5cGVNaXJyb3IsIG5ldyBTdHJpbmdbXXsiQFR5cGUodmFsdWU9cDMpIn0pOwor
CQkKKwl9CisJCisJcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczUoKSB7CisJCS8vIHZv
aWQgZm9vMigpIHRocm93cyAoQFR5cGUoImUxIikgTnVsbFBvaW50ZXJFeGNlcHRpb24sIChAVHlw
ZSgiZTIiKSBBcnJheUluZGV4T3V0T2ZCb3VuZHNFeGNlcHRpb24ge30KKwkJVHlwZUVsZW1lbnQg
YW5ub3RhdGVkVHlwZSA9IF9lbGVtZW50VXRpbHMuZ2V0VHlwZUVsZW1lbnQoInRhcmdldHMubW9k
ZWw4LlkiKTsKKwkJTGlzdDw/IGV4dGVuZHMgRWxlbWVudD4gbWVtYmVycyA9IF9lbGVtZW50VXRp
bHMuZ2V0QWxsTWVtYmVycyhhbm5vdGF0ZWRUeXBlKTsKKwkJRXhlY3V0YWJsZUVsZW1lbnQgbWV0
aG9kID0gbnVsbDsKKwkJZm9yIChFbGVtZW50IG1lbWJlciA6IG1lbWJlcnMpIHsKKwkJCWlmICgi
Zm9vMiIuZXF1YWxzKG1lbWJlci5nZXRTaW1wbGVOYW1lKCkudG9TdHJpbmcoKSkpIHsKKwkJCQlt
ZXRob2QgPSAoRXhlY3V0YWJsZUVsZW1lbnQpIG1lbWJlcjsKKwkJCX0KKwkJfQorCQlMaXN0PD9l
eHRlbmRzIFR5cGVNaXJyb3I+IGV4Y2VwdGlvbnMgPSBtZXRob2QuZ2V0VGhyb3duVHlwZXMoKTsK
KwkJYXNzZXJ0RXF1YWxzKCJJbmNvcnJlY3Qgbm8gb2YgdGhyb3duIGV4Y2VwdGlvbnMiLCAyLCBl
eGNlcHRpb25zLnNpemUoKSk7CisJCVR5cGVNaXJyb3IgdHlwZU1pcnJvciA9IGV4Y2VwdGlvbnMu
Z2V0KDApOworCQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZU1pcnJvciwgbmV3IFN0cmluZ1td
eyJAVHlwZSh2YWx1ZT1lMSkifSk7CisJCXR5cGVNaXJyb3IgPSBleGNlcHRpb25zLmdldCgxKTsK
KwkJdmVyaWZ5VHlwZUFubm90YXRpb25zKHR5cGVNaXJyb3IsIG5ldyBTdHJpbmdbXXsiQFR5cGUo
dmFsdWU9ZTIpIn0pOworCX0KKworCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnM2KCkg
eworCQkvLyB2b2lkIGJhcjIgKEBUeXBlKCJwMSIpIFN0cmluZyBAVHlwZSgicDIiKSBbXSBAVHlw
ZSgicDMiKSAuLi4gYXJncykge30KKwkJVHlwZUVsZW1lbnQgYW5ub3RhdGVkVHlwZSA9IF9lbGVt
ZW50VXRpbHMuZ2V0VHlwZUVsZW1lbnQoInRhcmdldHMubW9kZWw4LlkiKTsKKwkJTGlzdDw/IGV4
dGVuZHMgRWxlbWVudD4gbWVtYmVycyA9IF9lbGVtZW50VXRpbHMuZ2V0QWxsTWVtYmVycyhhbm5v
dGF0ZWRUeXBlKTsKKwkJRXhlY3V0YWJsZUVsZW1lbnQgbWV0aG9kID0gbnVsbDsKKwkJZm9yIChF
bGVtZW50IG1lbWJlciA6IG1lbWJlcnMpIHsKKwkJCWlmICgiYmFyMiIuZXF1YWxzKG1lbWJlci5n
ZXRTaW1wbGVOYW1lKCkudG9TdHJpbmcoKSkpIHsKKwkJCQltZXRob2QgPSAoRXhlY3V0YWJsZUVs
ZW1lbnQpIG1lbWJlcjsKKwkJCX0KKwkJfQorCQlMaXN0PD8gZXh0ZW5kcyBWYXJpYWJsZUVsZW1l
bnQ+IHBhcmFtcyA9IG1ldGhvZC5nZXRQYXJhbWV0ZXJzKCk7CisJCWFzc2VydEVxdWFscygiSW5j
b3JyZWN0IG5vIG9mIHBhcmFtZXRlcnMiLCAxLCBwYXJhbXMuc2l6ZSgpKTsKKwkJVHlwZU1pcnJv
ciB0eXBlTWlycm9yID0gcGFyYW1zLmdldCgwKS5hc1R5cGUoKTsKKwkJdmVyaWZ5VHlwZUFubm90
YXRpb25zKHR5cGVNaXJyb3IsIG5ldyBTdHJpbmdbXXsiQFR5cGUodmFsdWU9cDIpIn0pOworCQlh
c3NlcnRFcXVhbHMoIlNob3VsZCBiZSBhbiBhcnJheSB0eXBlIiwgVHlwZUtpbmQuQVJSQVksIHR5
cGVNaXJyb3IuZ2V0S2luZCgpKTsKKwkJdHlwZU1pcnJvciA9ICgoQXJyYXlUeXBlKSB0eXBlTWly
cm9yKS5nZXRDb21wb25lbnRUeXBlKCk7CisJCXZlcmlmeVR5cGVBbm5vdGF0aW9ucyh0eXBlTWly
cm9yLCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPXAzKSJ9KTsKKwkJYXNzZXJ0RXF1YWxzKCJT
aG91bGQgYmUgYW4gYXJyYXkgdHlwZSIsIFR5cGVLaW5kLkFSUkFZLCB0eXBlTWlycm9yLmdldEtp
bmQoKSk7CisJCXR5cGVNaXJyb3IgPSAoKEFycmF5VHlwZSkgdHlwZU1pcnJvcikuZ2V0Q29tcG9u
ZW50VHlwZSgpOworCQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZU1pcnJvciwgbmV3IFN0cmlu
Z1tdeyJAVHlwZSh2YWx1ZT1wMSkifSk7CisKKwl9CisKKwlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFu
bm90YXRpb25zNygpIHsKKwkJLy8gcHVibGljIGNsYXNzIFogPEBUeXBlKCJ0cDEiKSBLLCBAVHlw
ZSgidHAyIikgVj4geworCQlUeXBlRWxlbWVudCB0eXBlWiA9IF9lbGVtZW50VXRpbHMuZ2V0VHlw
ZUVsZW1lbnQoInRhcmdldHMubW9kZWw4LloiKTsKKwkJVHlwZU1pcnJvciB0eXBlTWlycm9yID0g
dHlwZVouYXNUeXBlKCk7CisJCUxpc3Q8PyBleHRlbmRzIFR5cGVQYXJhbWV0ZXJFbGVtZW50PiB0
eXBlUGFyYW1zID0gdHlwZVouZ2V0VHlwZVBhcmFtZXRlcnMoKTsKKwkJYXNzZXJ0RXF1YWxzKCJJ
bmNvcnJlY3Qgbm8gb2YgdHlwZSBwYXJhbXMiLCAyLCB0eXBlUGFyYW1zLnNpemUoKSk7CisJCVR5
cGVQYXJhbWV0ZXJFbGVtZW50IHR5cGVQYXJhbSA9IHR5cGVQYXJhbXMuZ2V0KDApOworCQl2ZXJp
ZnlUeXBlQW5ub3RhdGlvbnModHlwZVBhcmFtLCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPXRw
MSkifSk7CisJCXR5cGVNaXJyb3IgPSB0eXBlUGFyYW0uYXNUeXBlKCk7CisJCXZlcmlmeVR5cGVB
bm5vdGF0aW9ucyh0eXBlTWlycm9yLCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPXRwMSkifSk7
CisJCXR5cGVQYXJhbSA9IHR5cGVQYXJhbXMuZ2V0KDEpOworCQl0eXBlTWlycm9yID0gdHlwZVBh
cmFtLmFzVHlwZSgpOworCQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZVBhcmFtLCBuZXcgU3Ry
aW5nW117IkBUeXBlKHZhbHVlPXRwMikifSk7CisJCXZlcmlmeVR5cGVBbm5vdGF0aW9ucyh0eXBl
TWlycm9yLCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPXRwMikifSk7CisJfQorCQorCXB1Ymxp
YyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnM4KCkgeworCQlUeXBlRWxlbWVudCB0eXBlWiA9IF9l
bGVtZW50VXRpbHMuZ2V0VHlwZUVsZW1lbnQoInRhcmdldHMubW9kZWw4LloiKTsKKwkJTGlzdDw/
IGV4dGVuZHMgRWxlbWVudD4gbWVtYmVycyA9IF9lbGVtZW50VXRpbHMuZ2V0QWxsTWVtYmVycyh0
eXBlWik7CisJCUV4ZWN1dGFibGVFbGVtZW50IG1ldGhvZCA9IG51bGw7CisJCVZhcmlhYmxlRWxl
bWVudCBmaWVsZCA9IG51bGw7CisJCWZvciAoRWxlbWVudCBtZW1iZXIgOiBtZW1iZXJzKSB7CisJ
CQlpZiAoImZvbyIuZXF1YWxzKG1lbWJlci5nZXRTaW1wbGVOYW1lKCkudG9TdHJpbmcoKSkpIHsK
KwkJCQltZXRob2QgPSAoRXhlY3V0YWJsZUVsZW1lbnQpIG1lbWJlcjsKKwkJCX0gZWxzZSBpZiAo
InoxIi5lcXVhbHMobWVtYmVyLmdldFNpbXBsZU5hbWUoKS50b1N0cmluZygpKSkgeworCQkJCWZp
ZWxkID0gKFZhcmlhYmxlRWxlbWVudCkgbWVtYmVyOworCQkJfQorCQl9CisJCQorCQkvLyBwdWJs
aWMgPEBUeXBlKCJtcDEiKSBULCBAVHlwZSgibXAyIikgVT4gdm9pZCBmb28oKSB7fQkKKwkJTGlz
dDw/IGV4dGVuZHMgVHlwZVBhcmFtZXRlckVsZW1lbnQ+IHR5cGVQYXJhbXMgPSBtZXRob2QuZ2V0
VHlwZVBhcmFtZXRlcnMoKTsKKwkJYXNzZXJ0RXF1YWxzKCJJbmNvcnJlY3Qgbm8gb2YgdHlwZSBw
YXJhbXMiLCAyLCB0eXBlUGFyYW1zLnNpemUoKSk7CisJCVR5cGVQYXJhbWV0ZXJFbGVtZW50IHR5
cGVQYXJhbSA9IHR5cGVQYXJhbXMuZ2V0KDApOworCQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlw
ZVBhcmFtLCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPW1wMSkifSk7CisJCXR5cGVQYXJhbSA9
IHR5cGVQYXJhbXMuZ2V0KDEpOworCQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZVBhcmFtLCBu
ZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPW1wMikifSk7CisJCS8vWjxAVHlwZSgidGExIikgU3Ry
aW5nLCBAVHlwZSgidGEyIikgT2JqZWN0PiB6MSA9IG51bGw7CisJCS8vIEFQSXMgZG9uJ3QgZXhw
b3NlIHRoZSB0eXBlIGFyZ3VtZW50cyBvbiBhIFR5cGVNaXJyb3IKKwkJVHlwZU1pcnJvciB0eXBl
TWlycm9yID0gZmllbGQuYXNUeXBlKCk7CisJCXZlcmlmeVR5cGVBbm5vdGF0aW9ucyh0eXBlTWly
cm9yLCBuZXcgU3RyaW5nW117fSk7CisJfQorCisJcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0
aW9uczkoKSB7CisJCVR5cGVFbGVtZW50IGFubm90YXRlZFR5cGUgPSBfZWxlbWVudFV0aWxzLmdl
dFR5cGVFbGVtZW50KCJ0YXJnZXRzLm1vZGVsOC5YIik7CisJCUxpc3Q8PyBleHRlbmRzIEVsZW1l
bnQ+IG1lbWJlcnMgPSBfZWxlbWVudFV0aWxzLmdldEFsbE1lbWJlcnMoYW5ub3RhdGVkVHlwZSk7
CisJCQorCQlWYXJpYWJsZUVsZW1lbnQgZmllbGQyID0gbnVsbDsKKwkJZm9yIChWYXJpYWJsZUVs
ZW1lbnQgbWVtYmVyIDogRWxlbWVudEZpbHRlci5maWVsZHNJbihtZW1iZXJzKSkgeworCQkJaWYg
KCJfZmllbGQyIi5lcXVhbHMobWVtYmVyLmdldFNpbXBsZU5hbWUoKS50b1N0cmluZygpKSkgewor
CQkJCWZpZWxkMiA9IChWYXJpYWJsZUVsZW1lbnQpIG1lbWJlcjsKKwkJCQlicmVhazsKKwkJCX0K
KwkJfQorCQlUeXBlTWlycm9yIHR5cGVNaXJyb3IgPSBmaWVsZDIuYXNUeXBlKCk7CisJCVR5cGUk
MSBhbm5vdDEgPSB0eXBlTWlycm9yLmdldEFubm90YXRpb24oVHlwZSQxLmNsYXNzKTsKKwkJYXNz
ZXJ0Tm90TnVsbCgiQW5ub3RhdGlvbiBzaG91bGQgbm90IGJlIG51bGwiLCBhbm5vdDEpOworCQlU
eXBlLk9uZSBhbm5vdDIgPSB0eXBlTWlycm9yLmdldEFubm90YXRpb24oVHlwZS5PbmUuY2xhc3Mp
OworCQlhc3NlcnROb3ROdWxsKCJBbm5vdGF0aW9uIHNob3VsZCBub3QgYmUgbnVsbCIsIGFubm90
Mik7CisJfQorCisJcHJpdmF0ZSBTdHJpbmcgZ2V0RXhjZXB0aW9uU3RhY2tUcmFjZShUaHJvd2Fi
bGUgdCkgeworCQlTdHJpbmdCdWZmZXIgYnVmID0gbmV3IFN0cmluZ0J1ZmZlcih0LmdldE1lc3Nh
Z2UoKSk7CisJCVN0YWNrVHJhY2VFbGVtZW50W10gdHJhY2VzID0gdC5nZXRTdGFja1RyYWNlKCk7
CisJCWZvciAoaW50IGkgPSAwOyBpIDwgdHJhY2VzLmxlbmd0aDsgaSsrKSB7CisJCQlTdGFja1Ry
YWNlRWxlbWVudCB0cmFjZSA9IHRyYWNlc1tpXTsKKwkJCWJ1Zi5hcHBlbmQoIlxuXHRhdCAiICsg
dHJhY2UpOworCQkJaWYgKGkgPT0gMTIpCisJCQkJYnJlYWs7IC8vIERvbid0IGR1bXAgYWxsIHN0
YWNrcworCQl9CisJCXJldHVybiBidWYudG9TdHJpbmcoKTsKKworCX0KKworCQorCXByaXZhdGUg
dm9pZCB2ZXJpZnlUeXBlQW5ub3RhdGlvbnMoQW5ub3RhdGVkQ29uc3RydWN0IGNvbnN0cnVjdCwg
U3RyaW5nW10gYW5ub3RzKSB7CisJCUxpc3Q8PyBleHRlbmRzIEFubm90YXRpb25NaXJyb3I+IGFu
bm90YXRpb25zID0gY29uc3RydWN0LmdldEFubm90YXRpb25NaXJyb3JzKCk7CisJCWFzc2VydEVx
dWFscygiSW5jb3JyZWN0IG5vIG9mIGFubm90YXRpb25zIiwgYW5ub3RzLmxlbmd0aCwgYW5ub3Rh
dGlvbnMuc2l6ZSgpKTsKKwkJZm9yKGludCBpID0gMCwgbGVuZ3RoID0gYW5ub3RzLmxlbmd0aDsg
aSA8IGxlbmd0aDsgaSsrKSB7CisJCQlBbm5vdGF0aW9uTWlycm9yIG1pcnJvciA9IGFubm90YXRp
b25zLmdldChpKTsKKwkJCWFzc2VydEVxdWFscygiSW52YWxpZCBhbm5vdGF0aW9uIHZhbHVlIiwg
YW5ub3RzW2ldLCBnZXRBbm5vdGF0aW9uU3RyaW5nKG1pcnJvcikpOworCQl9CisJfQorCXByaXZh
dGUgU3RyaW5nIGdldEFubm90YXRpb25TdHJpbmcoQW5ub3RhdGlvbk1pcnJvciBhbm5vdCkgewor
CQlEZWNsYXJlZFR5cGUgYW5ub3RUeXBlID0gYW5ub3QuZ2V0QW5ub3RhdGlvblR5cGUoKTsKKwkJ
VHlwZUVsZW1lbnQgdHlwZSA9IChUeXBlRWxlbWVudCkgYW5ub3RUeXBlLmFzRWxlbWVudCgpOwor
CQlTdHJpbmdCdWZmZXIgYnVmID0gbmV3IFN0cmluZ0J1ZmZlcigiQCIgKyB0eXBlLmdldFNpbXBs
ZU5hbWUoKSk7CisJCU1hcDw/IGV4dGVuZHMgRXhlY3V0YWJsZUVsZW1lbnQsID8gZXh0ZW5kcyBB
bm5vdGF0aW9uVmFsdWU+IHZhbHVlcyA9IGFubm90LmdldEVsZW1lbnRWYWx1ZXMoKTsKKwkJU2V0
PD8gZXh0ZW5kcyBFeGVjdXRhYmxlRWxlbWVudD4ga2V5cyA9IHZhbHVlcy5rZXlTZXQoKTsKKwkJ
YnVmLmFwcGVuZCgnKCcpOworCQlmb3IgKEV4ZWN1dGFibGVFbGVtZW50IGV4ZWN1dGFibGVFbGVt
ZW50IDoga2V5cykgeyAvLyBATWFya2VyMygpCisJCQlidWYuYXBwZW5kKGV4ZWN1dGFibGVFbGVt
ZW50LmdldFNpbXBsZU5hbWUoKSk7CisJCQlidWYuYXBwZW5kKCc9Jyk7CisJCQlBbm5vdGF0aW9u
VmFsdWUgdmFsdWUgPSB2YWx1ZXMuZ2V0KGV4ZWN1dGFibGVFbGVtZW50KTsKKwkJCWJ1Zi5hcHBl
bmQodmFsdWUuZ2V0VmFsdWUoKSk7CisJCX0KKwkJYnVmLmFwcGVuZCgnKScpOworCQlyZXR1cm4g
YnVmLnRvU3RyaW5nKCk7CisJfQorCXByaXZhdGUgPEEgZXh0ZW5kcyBBbm5vdGF0aW9uPiB2b2lk
IGV4YW1pbmVTRThBbm5vdGF0aW9uTWV0aG9kcyhTdHJpbmcgbXNnLCBBbm5vdGF0ZWRDb25zdHJ1
Y3QgY29uc3RydWN0LCAgU3RyaW5nIHZhbHVlKSB7CisJCVR5cGUgYW5ub3QgPSBjb25zdHJ1Y3Qu
Z2V0QW5ub3RhdGlvbihUeXBlLmNsYXNzKTsKKwkJYXNzZXJ0Tm90TnVsbChtc2cgKyAiQW5ub3Rh
dGlvbiBmb3IgZWxlbWVudCAiICsgY29uc3RydWN0LnRvU3RyaW5nKCkgKyAiIHNob3VsZCBub3Qg
YmUgbnVsbCIsIGFubm90KTsKKwkJYXNzZXJ0U2FtZShtc2cgKyAiSW52YWxpZCBhbm5vdGF0aW9u
IHR5cGUiICwgVHlwZS5jbGFzcywgYW5ub3QuYW5ub3RhdGlvblR5cGUoKSk7CisJCWFzc2VydEVx
dWFscyhtc2cgKyAiSW52YWxpZCBhbm5vdGF0aW9uIHZhbHVlIiwgdmFsdWUsIGFubm90LnZhbHVl
KCkpOworCQkKKwkJQW5ub3RhdGlvbltdIGFubm90cyA9IGNvbnN0cnVjdC5nZXRBbm5vdGF0aW9u
c0J5VHlwZShUeXBlLmNsYXNzKTsKKwkJYXNzZXJ0RXF1YWxzKG1zZyArICJJbmNvcnJlY3Qgbm8g
b2YgYW5ub3RhdGlvbnMiLCAxLCBhbm5vdHMubGVuZ3RoKTsKKwkJYW5ub3QgPSAoVHlwZSkgYW5u
b3RzWzBdOworCQlhc3NlcnRTYW1lKG1zZyArICJJbnZhbGlkIGFubm90YXRpb24gdHlwZSIgLCBU
eXBlLmNsYXNzLCBhbm5vdHNbMF0uYW5ub3RhdGlvblR5cGUoKSk7CisJCWFzc2VydEVxdWFscyht
c2cgKyAiSW52YWxpZCBhbm5vdGF0aW9uIHZhbHVlIiwgdmFsdWUsIGFubm90LnZhbHVlKCkpOwor
CX0KKwkKKwlwdWJsaWMgdm9pZCByZXBvcnRFcnJvcihTdHJpbmcgbXNnKSB7CisJCXRocm93IG5l
dyBBc3NlcnRpb25GYWlsZWRFcnJvcihtc2cpOworCX0KKwkKKwlwdWJsaWMgdm9pZCBhc3NlcnRU
cnVlKFN0cmluZyBtc2csIGJvb2xlYW4gdmFsdWUpIHsKKwkJaWYgKCF2YWx1ZSkgcmVwb3J0RXJy
b3IobXNnKTsKKwl9CisJcHVibGljIHZvaWQgYXNzZXJ0RmFsc2UoU3RyaW5nIG1zZywgYm9vbGVh
biB2YWx1ZSkgeworCQlpZiAodmFsdWUpIHJlcG9ydEVycm9yKG1zZyk7CisJfQorCXB1YmxpYyB2
b2lkIGFzc2VydFNhbWUoU3RyaW5nIG1zZywgT2JqZWN0IG9iajEsIE9iamVjdCBvYmoyKSB7CisJ
CWlmIChvYmoxICE9IG9iajIpIHsKKwkJCXJlcG9ydEVycm9yKG1zZyArICIsIHNob3VsZCBiZSAi
ICsgb2JqMS50b1N0cmluZygpICsgIiBidXQgIiArIG9iajIudG9TdHJpbmcoKSk7CisJCX0KKwl9
CisJcHVibGljIHZvaWQgYXNzZXJ0Tm90TnVsbChTdHJpbmcgbXNnLCBPYmplY3Qgb2JqKSB7CisJ
CWlmIChvYmogPT0gbnVsbCkgeworCQkJcmVwb3J0RXJyb3IobXNnKTsKKwkJfQorCX0KKwlwdWJs
aWMgdm9pZCBhc3NlcnROdWxsKFN0cmluZyBtc2csIE9iamVjdCBvYmopIHsKKwkJaWYgKG9iaiAh
PSBudWxsKSB7CisJCQlyZXBvcnRFcnJvcihtc2cpOworCQl9CisJfQorICAgIHB1YmxpYyB2b2lk
IGFzc2VydEVxdWFscyhTdHJpbmcgbWVzc2FnZSwgT2JqZWN0IGV4cGVjdGVkLCBPYmplY3QgYWN0
dWFsKSB7CisgICAgICAgIGlmIChlcXVhbHNSZWdhcmRpbmdOdWxsKGV4cGVjdGVkLCBhY3R1YWwp
KSB7CisgICAgICAgICAgICByZXR1cm47CisgICAgICAgIH0gZWxzZSB7CisgICAgICAgIAlyZXBv
cnRFcnJvcihtZXNzYWdlICsgIiwgZXhwZWN0ZWQgIiArIGV4cGVjdGVkLnRvU3RyaW5nKCkgKyAi
IGJ1dCB3YXMgIiArIGFjdHVhbC50b1N0cmluZygpKTsKKyAgICAgICAgfQorICAgIH0KKworICAg
IHN0YXRpYyBib29sZWFuIGVxdWFsc1JlZ2FyZGluZ051bGwoT2JqZWN0IGV4cGVjdGVkLCBPYmpl
Y3QgYWN0dWFsKSB7CisgICAgICAgIGlmIChleHBlY3RlZCA9PSBudWxsKSB7CisgICAgICAgICAg
ICByZXR1cm4gYWN0dWFsID09IG51bGw7CisgICAgICAgIH0KKyAgICAgICAgcmV0dXJuIGV4cGVj
dGVkLmVxdWFscyhhY3R1YWwpOworICAgIH0KKyAgICAKKwlwdWJsaWMgdm9pZCBhc3NlcnRFcXVh
bHMoU3RyaW5nIG1zZywgaW50IGV4cGVjdGVkLCBpbnQgYWN0dWFsKSB7CisJCWlmIChleHBlY3Rl
ZCAhPSBhY3R1YWwpIHsKKwkJCVN0cmluZ0J1ZmZlciBidWYgPSBuZXcgU3RyaW5nQnVmZmVyKCk7
CisJCQlidWYuYXBwZW5kKG1zZyk7CisJCQlidWYuYXBwZW5kKCIsIGV4cGVjdGVkICIgKyBleHBl
Y3RlZCArICIgYnV0IHdhcyAiICsgYWN0dWFsKTsKKwkJCXJlcG9ydEVycm9yKGJ1Zi50b1N0cmlu
ZygpKTsKKwkJfQorCX0KKwlwdWJsaWMgdm9pZCBhc3NlcnRFcXVhbHMoT2JqZWN0IGV4cGVjdGVk
LCBPYmplY3QgYWN0dWFsKSB7CisJCWlmIChleHBlY3RlZCAhPSBhY3R1YWwpIHsKKwkJCQorCQl9
CisJfQorCXByaXZhdGUgY2xhc3MgQXNzZXJ0aW9uRmFpbGVkRXJyb3IgZXh0ZW5kcyBFcnJvciB7
CisJCXByaXZhdGUgc3RhdGljIGZpbmFsIGxvbmcgc2VyaWFsVmVyc2lvblVJRCA9IDFMOworCisJ
CXB1YmxpYyBBc3NlcnRpb25GYWlsZWRFcnJvcihTdHJpbmcgbXNnKSB7CisJCQlzdXBlcihtc2cp
OworCQl9CisJfQorCQorfQpkaWZmIC0tZ2l0IHJlc291cmNlcy90YXJnZXRzL21vZGVsOC9MYW1i
ZGFUZXN0LmphdmEgcmVzb3VyY2VzL3RhcmdldHMvbW9kZWw4L0xhbWJkYVRlc3QuamF2YQpuZXcg
ZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwLi42NTg5ZWIxCi0tLSAvZGV2L251bGwKKysr
IHJlc291cmNlcy90YXJnZXRzL21vZGVsOC9MYW1iZGFUZXN0LmphdmEKQEAgLTAsMCArMSwzNSBA
QAorLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioKKyAqIENvcHlyaWdodCAoYykgMjAxMyBJQk0gQ29y
cG9yYXRpb24uCisgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBh
Y2NvbXBhbnlpbmcgbWF0ZXJpYWxzCisgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRl
cm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKKyAqIHdoaWNoIGFjY29tcGFu
aWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CisgKiBodHRwOi8vd3d3
LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbAorICogCisgKiBUaGlzIGlzIGFuIGltcGxl
bWVudGF0aW9uIG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVy
IHRoZSBKYXZhCisgKiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFi
bGUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBjb2Rl
IGlzIG5vdCBjb21wYXRpYmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KKyAq
IAorICogQ29udHJpYnV0b3JzOgorICogICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJ
IGFuZCBpbXBsZW1lbnRhdGlvbgorICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCisKK3BhY2thZ2Ug
dGFyZ2V0cy5tb2RlbDg7CisKK3B1YmxpYyBjbGFzcyBMYW1iZGFUZXN0IHsKKwlwdWJsaWMgU3Ry
aW5nIGZvbygpIHsKKwkJcmV0dXJuIG51bGw7CisJfQorfSAgICAgCisKK2ludGVyZmFjZSBEZWZh
dWx0SW50ZXJmYWNlIHsKKwlwdWJsaWMgZGVmYXVsdCBTdHJpbmcgZGVmYXVsdE1ldGhvZCAoKSB7
CisJCXJldHVybiBudWxsOworCX0KKwlwdWJsaWMgc3RhdGljIFN0cmluZyBzdGF0aWNNZXRob2Qg
KCkgeworCQlyZXR1cm4gbnVsbDsKKwl9Cit9ICAgICAKKworaW50ZXJmYWNlIEZ1bmN0aW9uYWxJ
bnRlcmZhY2UgeworCXB1YmxpYyBhYnN0cmFjdCBTdHJpbmcgYWJzdHJhY3RNZXRob2QgKCk7Cit9
ClwgTm8gbmV3bGluZSBhdCBlbmQgb2YgZmlsZQpkaWZmIC0tZ2l0IHJlc291cmNlcy90YXJnZXRz
L21vZGVsOC9YLmphdmEgcmVzb3VyY2VzL3RhcmdldHMvbW9kZWw4L1guamF2YQpuZXcgZmlsZSBt
b2RlIDEwMDY0NAppbmRleCAwMDAwMDAwLi5hNjI1YmJlCi0tLSAvZGV2L251bGwKKysrIHJlc291
cmNlcy90YXJnZXRzL21vZGVsOC9YLmphdmEKQEAgLTAsMCArMSwzNSBAQAorLyoqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioKKyAqIENvcHlyaWdodCAoYykgMjAxMyBJQk0gQ29ycG9yYXRpb24uCisgKiBB
bGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0
ZXJpYWxzCisgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xp
cHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKKyAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJp
YnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CisgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xl
Z2FsL2VwbC12MTAuaHRtbAorICogCisgKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGFu
IGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVyIHRoZSBKYXZhCisgKiBD
b21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFibGUgZm9yIHRlc3Rpbmcg
YW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBjb2RlIGlzIG5vdCBjb21wYXRp
YmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KKyAqIAorICogQ29udHJpYnV0
b3JzOgorICogICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRh
dGlvbgorICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCitwYWNrYWdlIHRhcmdldHMubW9kZWw4Owor
CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLmFwdC50ZXN0cy5hbm5vdGF0aW9ucy5U
eXBlOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb21waWxlci5hcHQudGVzdHMuYW5ub3RhdGlv
bnMuVHlwZSQxOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb21waWxlci5hcHQudGVzdHMuYW5u
b3RhdGlvbnMuVHlwZS5PbmU7CisKK0BUeXBlKCJjIikKK3B1YmxpYyBjbGFzcyBYIGV4dGVuZHMg
QFR5cGUoInMiKSBPYmplY3QgaW1wbGVtZW50cyBAVHlwZSgiaTEiKSBJLCBAVHlwZSgiaTIiKSBK
IHsKKwlAVHlwZSgiZiIpIFN0cmluZyBfZmllbGQgPSBudWxsOworCUBUeXBlKCJmMSIpIFggX2Zp
ZWxkMSA9IG51bGw7CisJQFR5cGUkMSBAT25lIFN0cmluZyBfZmllbGQyID0gbnVsbDsKKwlwdWJs
aWMgdm9pZCBub0Fubm90YXRpb25IZXJlKCkgeworCX0KKwlARGVwcmVjYXRlZCBAVHlwZSgibSIp
IFN0cmluZyBmb28oKSB7CisJCXJldHVybiBudWxsOworCX0KKwl2b2lkIGJhcihAVHlwZSgicDEi
KSBTdHJpbmcgcDEsIEBUeXBlKCJwMiIpIFN0cmluZyBwMikge30KK30KKworaW50ZXJmYWNlIEkg
e30KK2ludGVyZmFjZSBKIHt9CmRpZmYgLS1naXQgcmVzb3VyY2VzL3RhcmdldHMvbW9kZWw4L1ku
amF2YSByZXNvdXJjZXMvdGFyZ2V0cy9tb2RlbDgvWS5qYXZhCm5ldyBmaWxlIG1vZGUgMTAwNjQ0
CmluZGV4IDAwMDAwMDAuLjljN2YyYjkKLS0tIC9kZXYvbnVsbAorKysgcmVzb3VyY2VzL3Rhcmdl
dHMvbW9kZWw4L1kuamF2YQpAQCAtMCwwICsxLDI4IEBACisvKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KgorICogQ29weXJpZ2h0IChjKSAyMDEzIElCTSBDb3Jwb3JhdGlvbi4KKyAqIEFsbCByaWdodHMg
cmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKKyAq
IGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGlj
IExpY2Vuc2UgdjEuMAorICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFu
ZCBpcyBhdmFpbGFibGUgYXQKKyAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYx
MC5odG1sCisgKiAKKyAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJh
ZnQgc3BlY2lmaWNhdGlvbiBkZXZlbG9wZWQgdW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0eSBQ
cm9jZXNzIChKQ1ApIGFuZCBpcyBtYWRlIGF2YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVh
dGlvbiBwdXJwb3NlcworICogb25seS4gVGhlIGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBh
bnkgc3BlY2lmaWNhdGlvbiBvZiB0aGUgSkNQLgorICogCisgKiBDb250cmlidXRvcnM6CisgKiAg
ICAgSUJNIENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCisgKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKi8KK3BhY2thZ2UgdGFyZ2V0cy5tb2RlbDg7CisKK2ltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuY29tcGlsZXIuYXB0LnRlc3RzLmFubm90YXRpb25zLlR5cGU7CisKK3B1
YmxpYyBjbGFzcyBZIHsKKwlAVHlwZSgiZiIpIFN0cmluZyBAVHlwZSgiZjEiKSBbXSBAVHlwZSgi
ZjIiKSBbXSBfZmllbGQyIEBUeXBlKCJmMyIpIFtdLCBfZmllbGQzIEBUeXBlKCJmNCIpIFtdW10g
PSBudWxsOworCQorCUBEZXByZWNhdGVkIEBUeXBlKCJtIikgU3RyaW5nIEBUeXBlKCJtMSIpIFtd
IGZvbygpIEBUeXBlKCJtMiIpIFtdIEBUeXBlKCJtMyIpIFtdIHsKKwkJcmV0dXJuIG51bGw7CisJ
fQorCXZvaWQgYmFyIChAVHlwZSgicDEiKSBTdHJpbmcgW10gYSBAVHlwZSgicDIiKSBbXSwgQFR5
cGUoInAzIikgaW50IEBUeXBlKCJwNCIpIFtdIGIgW10gQFR5cGUoInA1IikgW10pIHt9CisJdm9p
ZCBmb28yKCkgdGhyb3dzIEBUeXBlKCJlMSIpIE51bGxQb2ludGVyRXhjZXB0aW9uLCBAVHlwZSgi
ZTIiKSBBcnJheUluZGV4T3V0T2ZCb3VuZHNFeGNlcHRpb24ge30KKwl2b2lkIGJhcjIgKEBUeXBl
KCJwMSIpIFN0cmluZyBAVHlwZSgicDIiKSBbXSBAVHlwZSgicDMiKSAuLi4gYXJncykge30KK30K
ZGlmZiAtLWdpdCByZXNvdXJjZXMvdGFyZ2V0cy9tb2RlbDgvWi5qYXZhIHJlc291cmNlcy90YXJn
ZXRzL21vZGVsOC9aLmphdmEKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMC4uMjQ2
MWFhZAotLS0gL2Rldi9udWxsCisrKyByZXNvdXJjZXMvdGFyZ2V0cy9tb2RlbDgvWi5qYXZhCkBA
IC0wLDAgKzEsMjMgQEAKKy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCisgKiBDb3B5cmlnaHQgKGMp
IDIwMTMgSUJNIENvcnBvcmF0aW9uLgorICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9n
cmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscworICogYXJlIG1hZGUgYXZhaWxhYmxl
IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCisgKiB3
aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdAor
ICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKKyAqIAorICogVGhp
cyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBhbiBlYXJseS1kcmFmdCBzcGVjaWZpY2F0aW9uIGRl
dmVsb3BlZCB1bmRlciB0aGUgSmF2YQorICogQ29tbXVuaXR5IFByb2Nlc3MgKEpDUCkgYW5kIGlz
IG1hZGUgYXZhaWxhYmxlIGZvciB0ZXN0aW5nIGFuZCBldmFsdWF0aW9uIHB1cnBvc2VzCisgKiBv
bmx5LiBUaGUgY29kZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGFueSBzcGVjaWZpY2F0aW9uIG9m
IHRoZSBKQ1AuCisgKiAKKyAqIENvbnRyaWJ1dG9yczoKKyAqICAgICBJQk0gQ29ycG9yYXRpb24g
LSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24KKyAqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
LworcGFja2FnZSB0YXJnZXRzLm1vZGVsODsKKworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb21w
aWxlci5hcHQudGVzdHMuYW5ub3RhdGlvbnMuVHlwZTsKKworcHVibGljIGNsYXNzIFogPEBUeXBl
KCJ0cDEiKSBLLCBAVHlwZSgidHAyIikgVj4geworCVo8QFR5cGUoInRhMSIpIFN0cmluZywgQFR5
cGUoInRhMiIpIE9iamVjdD4gejEgPSBudWxsOworCXB1YmxpYyA8QFR5cGUoIm1wMSIpIFQsIEBU
eXBlKCJtcDIiKSBVPiB2b2lkIGZvbygpIHt9Cit9CisKZGlmZiAtLWdpdCBzcmMvb3JnL2VjbGlw
c2UvamR0L2NvbXBpbGVyL2FwdC90ZXN0cy9BbGxUZXN0cy5qYXZhIHNyYy9vcmcvZWNsaXBzZS9q
ZHQvY29tcGlsZXIvYXB0L3Rlc3RzL0FsbFRlc3RzLmphdmEKaW5kZXggYjNkY2ZjNy4uOGMyNjA5
NiAxMDA2NDQKLS0tIHNyYy9vcmcvZWNsaXBzZS9qZHQvY29tcGlsZXIvYXB0L3Rlc3RzL0FsbFRl
c3RzLmphdmEKKysrIHNyYy9vcmcvZWNsaXBzZS9qZHQvY29tcGlsZXIvYXB0L3Rlc3RzL0FsbFRl
c3RzLmphdmEKQEAgLTEsNCArMSw0IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29w
eXJpZ2h0IChjKSAyMDA2LCAyMDExIEJFQSBTeXN0ZW1zLCBJbmMuIAorICogQ29weXJpZ2h0IChj
KSAyMDA2LCAyMDEzIEJFQSBTeXN0ZW1zLCBJbmMuIGFuZCBvdGhlcnMKICAqIEFsbCByaWdodHMg
cmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAq
IGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGlj
IExpY2Vuc2UgdjEuMApAQCAtNiw2ICs2LDExIEBACiAgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3Jn
L2xlZ2FsL2VwbC12MTAuaHRtbAogICoKKyAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2Yg
YW4gZWFybHktZHJhZnQgc3BlY2lmaWNhdGlvbiBkZXZlbG9wZWQgdW5kZXIgdGhlIEphdmEKKyAq
IENvbW11bml0eSBQcm9jZXNzIChKQ1ApIGFuZCBpcyBtYWRlIGF2YWlsYWJsZSBmb3IgdGVzdGlu
ZyBhbmQgZXZhbHVhdGlvbiBwdXJwb3NlcworICogb25seS4gVGhlIGNvZGUgaXMgbm90IGNvbXBh
dGlibGUgd2l0aCBhbnkgc3BlY2lmaWNhdGlvbiBvZiB0aGUgSkNQLgorICogCiAgKiBDb250cmli
dXRvcnM6CiAgKiAgICB3aGFybGV5QGJlYS5jb20gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50
YXRpb24KKyAqICAgIElCTSBDb3Jwb3JhdGlvbiAtIEphdmEgOCBzdXBwb3J0CiAgKiAgICAKICAq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqLwpAQCAtMzAsNCArMzUsNSBAQAogCQlzdWl0ZS5hZGRUZXN0
U3VpdGUoTW9kZWxVdGlsVGVzdHMuY2xhc3MpOwogCQlzdWl0ZS5hZGRUZXN0U3VpdGUoTmVnYXRp
dmVUZXN0cy5jbGFzcyk7CisJCXN1aXRlLmFkZFRlc3RTdWl0ZShKYXZhOEVsZW1lbnRzVGVzdHMu
Y2xhc3MpOwogCQlyZXR1cm4gc3VpdGU7CiAJfQpkaWZmIC0tZ2l0IHNyYy9vcmcvZWNsaXBzZS9q
ZHQvY29tcGlsZXIvYXB0L3Rlc3RzL0phdmE4RWxlbWVudHNUZXN0cy5qYXZhIHNyYy9vcmcvZWNs
aXBzZS9qZHQvY29tcGlsZXIvYXB0L3Rlc3RzL0phdmE4RWxlbWVudHNUZXN0cy5qYXZhCm5ldyBm
aWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAuLmVmYjgyZjgKLS0tIC9kZXYvbnVsbAorKysg
c3JjL29yZy9lY2xpcHNlL2pkdC9jb21waWxlci9hcHQvdGVzdHMvSmF2YThFbGVtZW50c1Rlc3Rz
LmphdmEKQEAgLTAsMCArMSwxNzEgQEAKKy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCisgKiBDb3B5
cmlnaHQgKGMpIDIwMTMgSUJNIENvcnBvcmF0aW9uLgorICogQWxsIHJpZ2h0cyByZXNlcnZlZC4g
VGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscworICogYXJlIG1hZGUg
YXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2
MS4wCisgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWls
YWJsZSBhdAorICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKKyAq
CisgKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmlj
YXRpb24gZGV2ZWxvcGVkIHVuZGVyIHRoZSBKYXZhCisgKiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQ
KSBhbmQgaXMgbWFkZSBhdmFpbGFibGUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gcHVycG9z
ZXMKKyAqIG9ubHkuIFRoZSBjb2RlIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggYW55IHNwZWNpZmlj
YXRpb24gb2YgdGhlIEpDUC4KKyAqIAorICogQ29udHJpYnV0b3JzOgorICogICAgIElCTSBDb3Jw
b3JhdGlvbiAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgorICoqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKiovCisKK3BhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLmFwdC50ZXN0czsK
KworaW1wb3J0IGphdmEuaW8uRmlsZTsKK2ltcG9ydCBqYXZhLmlvLklPRXhjZXB0aW9uOworaW1w
b3J0IGphdmEudXRpbC5BcnJheUxpc3Q7CitpbXBvcnQgamF2YS51dGlsLkxpc3Q7CisKK2ltcG9y
dCBqYXZheC5sYW5nLm1vZGVsLlNvdXJjZVZlcnNpb247CitpbXBvcnQgamF2YXgudG9vbHMuSmF2
YUNvbXBpbGVyOworaW1wb3J0IGphdmF4LnRvb2xzLlRvb2xQcm92aWRlcjsKKworaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci50b29sLkVjbGlwc2VDb21waWxlcjsKKwor
aW1wb3J0IGp1bml0LmZyYW1ld29yay5UZXN0Q2FzZTsKKworcHVibGljIGNsYXNzIEphdmE4RWxl
bWVudHNUZXN0cyBleHRlbmRzIFRlc3RDYXNlIHsKKwkKKwlwcml2YXRlIHN0YXRpYyBmaW5hbCBT
dHJpbmcgVFlQRV9BTk5PVEFUSU9OX1BST0MgPSAib3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLmFw
dC50ZXN0cy5wcm9jZXNzb3JzLmVsZW1lbnRzLkphdmE4RWxlbWVudFByb2Nlc3NvciI7CisKKwlA
T3ZlcnJpZGUKKwlwcm90ZWN0ZWQgdm9pZCBzZXRVcCgpIHRocm93cyBFeGNlcHRpb24geworCQlz
dXBlci5zZXRVcCgpOworCQlCYXRjaFRlc3RVdGlscy5pbml0KCk7CisJfQorCisJcHVibGljIHZv
aWQgdGVzdFNFOFNwZWNpZmljcygpIHRocm93cyBFeGNlcHRpb24geworCQlKYXZhQ29tcGlsZXIg
Y29tcGlsZXIgPSBCYXRjaFRlc3RVdGlscy5nZXRFY2xpcHNlQ29tcGlsZXIoKTsKKwkJaW50ZXJu
YWxUZXN0KGNvbXBpbGVyLCBUWVBFX0FOTk9UQVRJT05fUFJPQywgInRlc3RTRThTcGVjaWZpY3Mi
KTsKKwl9CisJcHVibGljIHZvaWQgdGVzdFNFOFNwZWNpZmljc1dpdGhKYXZhYygpIHRocm93cyBF
eGNlcHRpb24geworCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBUb29sUHJvdmlkZXIuZ2V0U3lz
dGVtSmF2YUNvbXBpbGVyKCk7CisJCWludGVybmFsVGVzdChjb21waWxlciwgVFlQRV9BTk5PVEFU
SU9OX1BST0MsICJ0ZXN0U0U4U3BlY2lmaWNzIik7CisJfQorCXB1YmxpYyB2b2lkIHRlc3RMYW1i
ZGFTcGVjaWZpY3MoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVy
ID0gQmF0Y2hUZXN0VXRpbHMuZ2V0RWNsaXBzZUNvbXBpbGVyKCk7CisJCWludGVybmFsVGVzdChj
b21waWxlciwgVFlQRV9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0TGFtYmRhU3BlY2lmaWNzIik7CisJ
fQorCXB1YmxpYyB2b2lkIHRlc3RMYW1iZGFTcGVjaWZpY3NXaXRoSmF2YWMoKSB0aHJvd3MgRXhj
ZXB0aW9uIHsKKwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gVG9vbFByb3ZpZGVyLmdldFN5c3Rl
bUphdmFDb21waWxlcigpOworCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIFRZUEVfQU5OT1RBVElP
Tl9QUk9DLCAidGVzdExhbWJkYVNwZWNpZmljcyIpOworCX0KKwlwdWJsaWMgdm9pZCB0ZXN0VHlw
ZUFubm90YXRpb25zKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCUphdmFDb21waWxlciBjb21waWxl
ciA9IEJhdGNoVGVzdFV0aWxzLmdldEVjbGlwc2VDb21waWxlcigpOworCQlpbnRlcm5hbFRlc3Qo
Y29tcGlsZXIsIFRZUEVfQU5OT1RBVElPTl9QUk9DLCAidGVzdFR5cGVBbm5vdGF0aW9ucyIpOwor
CX0KKwlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90YXRpb25zV2l0aEphdmFjKCkgdGhyb3dzIEV4
Y2VwdGlvbiB7CisJCUphdmFDb21waWxlciBjb21waWxlciA9IFRvb2xQcm92aWRlci5nZXRTeXN0
ZW1KYXZhQ29tcGlsZXIoKTsKKwkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBUWVBFX0FOTk9UQVRJ
T05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlvbnMiKTsKKwl9CisJcHVibGljIHZvaWQgdGVzdFR5
cGVBbm5vdGF0aW9uczEoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJSmF2YUNvbXBpbGVyIGNvbXBp
bGVyID0gQmF0Y2hUZXN0VXRpbHMuZ2V0RWNsaXBzZUNvbXBpbGVyKCk7CisJCWludGVybmFsVGVz
dChjb21waWxlciwgVFlQRV9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0VHlwZUFubm90YXRpb25zMSIp
OworCX0KKwlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90YXRpb25zMVdpdGhKYXZhYygpIHRocm93
cyBFeGNlcHRpb24geworCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBUb29sUHJvdmlkZXIuZ2V0
U3lzdGVtSmF2YUNvbXBpbGVyKCk7CisJCWludGVybmFsVGVzdChjb21waWxlciwgVFlQRV9BTk5P
VEFUSU9OX1BST0MsICJ0ZXN0VHlwZUFubm90YXRpb25zMSIpOworCX0KKwlwdWJsaWMgdm9pZCB0
ZXN0VHlwZUFubm90YXRpb25zMigpIHRocm93cyBFeGNlcHRpb24geworCQlKYXZhQ29tcGlsZXIg
Y29tcGlsZXIgPSBCYXRjaFRlc3RVdGlscy5nZXRFY2xpcHNlQ29tcGlsZXIoKTsKKwkJaW50ZXJu
YWxUZXN0KGNvbXBpbGVyLCBUWVBFX0FOTk9UQVRJT05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlv
bnMyIik7CisJfQorCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnMyV2l0aEphdmFjKCkg
dGhyb3dzIEV4Y2VwdGlvbiB7CisJCUphdmFDb21waWxlciBjb21waWxlciA9IFRvb2xQcm92aWRl
ci5nZXRTeXN0ZW1KYXZhQ29tcGlsZXIoKTsKKwkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBUWVBF
X0FOTk9UQVRJT05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlvbnMyIik7CisJfQorCXB1YmxpYyB2
b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnMzKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCUphdmFDb21w
aWxlciBjb21waWxlciA9IEJhdGNoVGVzdFV0aWxzLmdldEVjbGlwc2VDb21waWxlcigpOworCQlp
bnRlcm5hbFRlc3QoY29tcGlsZXIsIFRZUEVfQU5OT1RBVElPTl9QUk9DLCAidGVzdFR5cGVBbm5v
dGF0aW9uczMiKTsKKwl9CisJcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczNXaXRoSmF2
YWMoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gVG9vbFBy
b3ZpZGVyLmdldFN5c3RlbUphdmFDb21waWxlcigpOworCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIs
IFRZUEVfQU5OT1RBVElPTl9QUk9DLCAidGVzdFR5cGVBbm5vdGF0aW9uczMiKTsKKwl9CisJcHVi
bGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczQoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJSmF2
YUNvbXBpbGVyIGNvbXBpbGVyID0gQmF0Y2hUZXN0VXRpbHMuZ2V0RWNsaXBzZUNvbXBpbGVyKCk7
CisJCWludGVybmFsVGVzdChjb21waWxlciwgVFlQRV9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0VHlw
ZUFubm90YXRpb25zNCIpOworCX0KKwlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90YXRpb25zNFdp
dGhKYXZhYygpIHRocm93cyBFeGNlcHRpb24geworCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBU
b29sUHJvdmlkZXIuZ2V0U3lzdGVtSmF2YUNvbXBpbGVyKCk7CisJCWludGVybmFsVGVzdChjb21w
aWxlciwgVFlQRV9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0VHlwZUFubm90YXRpb25zNCIpOworCX0K
KwlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90YXRpb25zNSgpIHRocm93cyBFeGNlcHRpb24gewor
CQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBCYXRjaFRlc3RVdGlscy5nZXRFY2xpcHNlQ29tcGls
ZXIoKTsKKwkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBUWVBFX0FOTk9UQVRJT05fUFJPQywgInRl
c3RUeXBlQW5ub3RhdGlvbnM1Iik7CisJfQorCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlv
bnM1V2l0aEphdmFjKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCUphdmFDb21waWxlciBjb21waWxl
ciA9IFRvb2xQcm92aWRlci5nZXRTeXN0ZW1KYXZhQ29tcGlsZXIoKTsKKwkJaW50ZXJuYWxUZXN0
KGNvbXBpbGVyLCBUWVBFX0FOTk9UQVRJT05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlvbnM1Iik7
CisJfQorCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnM2KCkgdGhyb3dzIEV4Y2VwdGlv
biB7CisJCUphdmFDb21waWxlciBjb21waWxlciA9IEJhdGNoVGVzdFV0aWxzLmdldEVjbGlwc2VD
b21waWxlcigpOworCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIFRZUEVfQU5OT1RBVElPTl9QUk9D
LCAidGVzdFR5cGVBbm5vdGF0aW9uczYiKTsKKwl9CisJcHVibGljIHZvaWQgdGVzdFR5cGVBbm5v
dGF0aW9uczZXaXRoSmF2YWMoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJSmF2YUNvbXBpbGVyIGNv
bXBpbGVyID0gVG9vbFByb3ZpZGVyLmdldFN5c3RlbUphdmFDb21waWxlcigpOworCQlpbnRlcm5h
bFRlc3QoY29tcGlsZXIsIFRZUEVfQU5OT1RBVElPTl9QUk9DLCAidGVzdFR5cGVBbm5vdGF0aW9u
czYiKTsKKwl9CisJcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczcoKSB0aHJvd3MgRXhj
ZXB0aW9uIHsKKwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gQmF0Y2hUZXN0VXRpbHMuZ2V0RWNs
aXBzZUNvbXBpbGVyKCk7CisJCWludGVybmFsVGVzdChjb21waWxlciwgVFlQRV9BTk5PVEFUSU9O
X1BST0MsICJ0ZXN0VHlwZUFubm90YXRpb25zNyIpOworCX0KKwlwdWJsaWMgdm9pZCB0ZXN0VHlw
ZUFubm90YXRpb25zN1dpdGhKYXZhYygpIHRocm93cyBFeGNlcHRpb24geworCQlKYXZhQ29tcGls
ZXIgY29tcGlsZXIgPSBUb29sUHJvdmlkZXIuZ2V0U3lzdGVtSmF2YUNvbXBpbGVyKCk7CisJCWlu
dGVybmFsVGVzdChjb21waWxlciwgVFlQRV9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0VHlwZUFubm90
YXRpb25zNyIpOworCX0KKwlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90YXRpb25zOCgpIHRocm93
cyBFeGNlcHRpb24geworCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBCYXRjaFRlc3RVdGlscy5n
ZXRFY2xpcHNlQ29tcGlsZXIoKTsKKwkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBUWVBFX0FOTk9U
QVRJT05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlvbnM4Iik7CisJfQorCXB1YmxpYyB2b2lkIHRl
c3RUeXBlQW5ub3RhdGlvbnM4V2l0aEphdmFjKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCUphdmFD
b21waWxlciBjb21waWxlciA9IFRvb2xQcm92aWRlci5nZXRTeXN0ZW1KYXZhQ29tcGlsZXIoKTsK
KwkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBUWVBFX0FOTk9UQVRJT05fUFJPQywgInRlc3RUeXBl
QW5ub3RhdGlvbnM4Iik7CisJfQorCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnM5KCkg
dGhyb3dzIEV4Y2VwdGlvbiB7CisJCUphdmFDb21waWxlciBjb21waWxlciA9IEJhdGNoVGVzdFV0
aWxzLmdldEVjbGlwc2VDb21waWxlcigpOworCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIFRZUEVf
QU5OT1RBVElPTl9QUk9DLCAidGVzdFR5cGVBbm5vdGF0aW9uczkiKTsKKwl9CisJcHVibGljIHZv
aWQgdGVzdFR5cGVBbm5vdGF0aW9uczlXaXRoSmF2YWMoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJ
SmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gVG9vbFByb3ZpZGVyLmdldFN5c3RlbUphdmFDb21waWxl
cigpOworCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIFRZUEVfQU5OT1RBVElPTl9QUk9DLCAidGVz
dFR5cGVBbm5vdGF0aW9uczkiKTsKKwl9CisKKwlwcml2YXRlIHZvaWQgaW50ZXJuYWxUZXN0KEph
dmFDb21waWxlciBjb21waWxlciwgU3RyaW5nIHByb2Nlc3NvciwgU3RyaW5nIHRlc3RNZXRob2Qp
IHRocm93cyBJT0V4Y2VwdGlvbiB7CisJCWlmICghY2FuUnVuSmF2YTgoKSkgeworCQkJcmV0dXJu
OworCQl9CisJCVN5c3RlbS5jbGVhclByb3BlcnR5KHByb2Nlc3Nvcik7CisJCUZpbGUgdGFyZ2V0
Rm9sZGVyID0gVGVzdFV0aWxzLmNvbmNhdFBhdGgoQmF0Y2hUZXN0VXRpbHMuZ2V0U3JjRm9sZGVy
TmFtZSgpLCAidGFyZ2V0cyIsICJtb2RlbDgiKTsKKwkJQmF0Y2hUZXN0VXRpbHMuY29weVJlc291
cmNlcygidGFyZ2V0cy9tb2RlbDgiLCB0YXJnZXRGb2xkZXIpOworCisJCUxpc3Q8U3RyaW5nPiBv
cHRpb25zID0gbmV3IEFycmF5TGlzdDxTdHJpbmc+KCk7CisJCW9wdGlvbnMuYWRkKCItQSIgKyBw
cm9jZXNzb3IpOworCQlvcHRpb25zLmFkZCgiLUEiICsgdGVzdE1ldGhvZCk7CisJCS8vIEphdmFj
IDEuOCBkb2Vzbid0ICh5ZXQ/KSBzdXBwb3J0IHRoZSAtMS44IG9wdGlvbgorCQlpZiAoY29tcGls
ZXIgaW5zdGFuY2VvZiBFY2xpcHNlQ29tcGlsZXIpIHsKKwkJCW9wdGlvbnMuYWRkKCItMS44Iik7
CisJCX0KKwkJQmF0Y2hUZXN0VXRpbHMuY29tcGlsZVRyZWUoY29tcGlsZXIsIG9wdGlvbnMsIHRh
cmdldEZvbGRlcik7CisKKwkJLy8gSWYgaXQgc3VjY2VlZGVkLCB0aGUgcHJvY2Vzc29yIHdpbGwg
aGF2ZSBzZXQgdGhpcyBwcm9wZXJ0eSB0byAic3VjY2VlZGVkIjsKKwkJLy8gaWYgbm90LCBpdCB3
aWxsIHNldCBpdCB0byBhbiBlcnJvciB2YWx1ZS4KKwkJYXNzZXJ0RXF1YWxzKCJzdWNjZWVkZWQi
LCBTeXN0ZW0uZ2V0UHJvcGVydHkocHJvY2Vzc29yKSk7CisJfQorCXB1YmxpYyBib29sZWFuIGNh
blJ1bkphdmE4KCkgeworCQl0cnkgeworCQkJU291cmNlVmVyc2lvbi52YWx1ZU9mKCJSRUxFQVNF
XzgiKTsKKwkJfSBjYXRjaChJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24gaWFlKSB7CisJCQlyZXR1
cm4gZmFsc2U7CisJCX0KKwkJcmV0dXJuIHRydWU7CisJfQorCUBPdmVycmlkZQorCXByb3RlY3Rl
ZCB2b2lkIHRlYXJEb3duKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCXN1cGVyLnRlYXJEb3duKCk7
CisJfQorfQojUCBvcmcuZWNsaXBzZS5qZHQuY29tcGlsZXIuYXB0CmRpZmYgLS1naXQgc3JjL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQvZGlzcGF0Y2gvQW5ub3RhdGlvbkRp
c2NvdmVyeVZpc2l0b3IuamF2YSBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FwdC9kaXNwYXRjaC9Bbm5vdGF0aW9uRGlzY292ZXJ5VmlzaXRvci5qYXZhCmluZGV4IDQ1MTY4
ZjcuLjExMGU0ZmQgMTAwNjQ0Ci0tLSBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FwdC9kaXNwYXRjaC9Bbm5vdGF0aW9uRGlzY292ZXJ5VmlzaXRvci5qYXZhCisrKyBzcmMv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9kaXNwYXRjaC9Bbm5vdGF0aW9u
RGlzY292ZXJ5VmlzaXRvci5qYXZhCkBAIC0xNzgsNSArMTc4LDUgQEAKIAkJCUFubm90YXRpb25b
XSBhbm5vdGF0aW9ucywKIAkJCUJpbmRpbmcgY3VycmVudEJpbmRpbmcpIHsKLQkJQVNUTm9kZS5y
ZXNvbHZlQW5ub3RhdGlvbnMoc2NvcGUsIGFubm90YXRpb25zLCBjdXJyZW50QmluZGluZyk7CisJ
CUFTVE5vZGUucmVzb2x2ZUFubm90YXRpb25zKHNjb3BlLCBhbm5vdGF0aW9ucywgY3VycmVudEJp
bmRpbmcsIHRydWUpOwogCQkKIAkJZm9yIChBbm5vdGF0aW9uIGFubm90YXRpb24gOiBhbm5vdGF0
aW9ucykgewpkaWZmIC0tZ2l0IHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
YXB0L21vZGVsL0FycmF5VHlwZUltcGwuamF2YSBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FwdC9tb2RlbC9BcnJheVR5cGVJbXBsLmphdmEKaW5kZXggMGE0Y2Y2OS4uMjE5
Njk0NSAxMDA2NDQKLS0tIHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0
L21vZGVsL0FycmF5VHlwZUltcGwuamF2YQorKysgc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hcHQvbW9kZWwvQXJyYXlUeXBlSW1wbC5qYXZhCkBAIC0xLDQgKzEsNCBAQAog
LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwNywgMjAxMSBCRUEg
U3lzdGVtcywgSW5jLiAKKyAqIENvcHlyaWdodCAoYykgMjAwNywgMjAxMyBCRUEgU3lzdGVtcywg
SW5jLiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFu
ZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVy
IHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCkBAIC02LDcgKzYs
MTIgQEAKICAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCiAgKgor
ICogVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBhbiBlYXJseS1kcmFmdCBzcGVjaWZpY2F0
aW9uIGRldmVsb3BlZCB1bmRlciB0aGUgSmF2YQorICogQ29tbXVuaXR5IFByb2Nlc3MgKEpDUCkg
YW5kIGlzIG1hZGUgYXZhaWxhYmxlIGZvciB0ZXN0aW5nIGFuZCBldmFsdWF0aW9uIHB1cnBvc2Vz
CisgKiBvbmx5LiBUaGUgY29kZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGFueSBzcGVjaWZpY2F0
aW9uIG9mIHRoZSBKQ1AuCisgKgogICogQ29udHJpYnV0b3JzOgogICogICAgd2hhcmxleUBiZWEu
Y29tIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCiAgKiAgICBJQk0gQ29ycG9yYXRp
b24gLSBmaXggZm9yIDM0MjU5OAorICogICAgSUJNIENvcnBvcmF0aW9uIC0gSmF2YSA4IHN1cHBv
cnQKICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqLwogCkBAIC0xOSw1ICsyNCw3IEBACiAKIGltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXB0LmRpc3BhdGNoLkJhc2VQcm9j
ZXNzaW5nRW52SW1wbDsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
bG9va3VwLkFubm90YXRpb25CaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5h
bC5jb21waWxlci5sb29rdXAuQXJyYXlCaW5kaW5nOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5p
bnRlcm5hbC5jb21waWxlci5sb29rdXAuQmluZGluZzsKIAogLyoqCkBAIC00NSw1ICs1MiwxOSBA
QAogCQlyZXR1cm4gdi52aXNpdEFycmF5KHRoaXMsIHApOwogCX0KLQkKKworCXByb3RlY3RlZCBB
bm5vdGF0aW9uQmluZGluZ1tdIGdldEFubm90YXRpb25CaW5kaW5ncygpIHsKKwkJb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5Bbm5vdGF0aW9uQmluZGluZ1tdIG9sZGll
cyA9ICgoQXJyYXlCaW5kaW5nKV9iaW5kaW5nKS5nZXRUeXBlQW5ub3RhdGlvbnMoKTsKKwkJb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5Bbm5vdGF0aW9uQmluZGluZ1td
IG5ld2JpZXMgPSBCaW5kaW5nLk5PX0FOTk9UQVRJT05TOworCQkvLyBTdHJpcCBvdXQgdGhlIGFu
bm90YXRpb25zIG9uIHN1YiBhcnJheXMKKwkJZm9yIChpbnQgaSA9IDAsIGxlbmd0aCA9IG9sZGll
cyA9PSBudWxsID8gMCA6IG9sZGllcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgeworCQkJaWYg
KG9sZGllc1tpXSA9PSBudWxsKSB7CisJCQkJU3lzdGVtLmFycmF5Y29weShvbGRpZXMsIDAsIG5l
d2JpZXMgPSAKKwkJCQkJCW5ldyBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9v
a3VwLkFubm90YXRpb25CaW5kaW5nW2ldLCAwLCBpKTsKKwkJCQlyZXR1cm4gbmV3YmllczsKKwkJ
CX0KKwkJfQorCQlyZXR1cm4gbmV3YmllczsKKwl9CisKIAkvKiAobm9uLUphdmFkb2MpCiAJICog
QHNlZSBqYXZheC5sYW5nLm1vZGVsLnR5cGUuVHlwZU1pcnJvciNnZXRLaW5kKCkKZGlmZiAtLWdp
dCBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9FbGVtZW50
SW1wbC5qYXZhIHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVs
L0VsZW1lbnRJbXBsLmphdmEKaW5kZXggOTk4ZTNkNi4uNDQxNDZhNCAxMDA2NDQKLS0tIHNyYy9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL0VsZW1lbnRJbXBsLmph
dmEKKysrIHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL0Vs
ZW1lbnRJbXBsLmphdmEKQEAgLTEsNCArMSw0IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgot
ICogQ29weXJpZ2h0IChjKSAyMDA1LCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgor
ICogQ29weXJpZ2h0IChjKSAyMDA1LCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgog
ICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5n
IG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUg
RWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCkBAIC02LDQgKzYsOCBAQAogICogaHR0cDovL3d3
dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKICAqCisgKiBUaGlzIGlzIGFuIGltcGxl
bWVudGF0aW9uIG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVy
IHRoZSBKYXZhCisgKiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFi
bGUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBjb2Rl
IGlzIG5vdCBjb21wYXRpYmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KKyAq
IAogICogQ29udHJpYnV0b3JzOgogICogICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJ
IGFuZCBpbXBsZW1lbnRhdGlvbgpAQCAtMTIsNSArMTYsNCBAQAogCiBpbXBvcnQgamF2YS5sYW5n
LmFubm90YXRpb24uQW5ub3RhdGlvbjsKLWltcG9ydCBqYXZhLmxhbmcucmVmbGVjdC5Qcm94eTsK
IGltcG9ydCBqYXZhLnV0aWwuQ29sbGVjdGlvbnM7CiBpbXBvcnQgamF2YS51dGlsLkxpc3Q7CkBA
IC0yNSw5ICsyOCw3IEBACiBpbXBvcnQgamF2YXgubGFuZy5tb2RlbC51dGlsLkVsZW1lbnRzOwog
Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuQ2hhck9wZXJhdGlvbjsKIGlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXB0LmRpc3BhdGNoLkJhc2VQ
cm9jZXNzaW5nRW52SW1wbDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIubG9va3VwLkFubm90YXRpb25CaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRl
cm5hbC5jb21waWxlci5sb29rdXAuQmluZGluZzsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50
ZXJuYWwuY29tcGlsZXIubG9va3VwLlJlZmVyZW5jZUJpbmRpbmc7CiAKIC8qKgpAQCAtNTEsMzUg
KzUyLDcgQEAKIAl9CiAKLQlAU3VwcHJlc3NXYXJuaW5ncygidW5jaGVja2VkIikgLy8gZm9yIGNh
c3Qgb2YgbmV3UHJveHlJbnN0YW5jZSgpIHRvIEEKIAlAT3ZlcnJpZGUKIAlwdWJsaWMgPEEgZXh0
ZW5kcyBBbm5vdGF0aW9uPiBBIGdldEFubm90YXRpb24oQ2xhc3M8QT4gYW5ub3RhdGlvbkNsYXNz
KSB7Ci0JCUFubm90YXRpb25CaW5kaW5nW10gYW5ub0luc3RhbmNlcyA9IGdldEFubm90YXRpb25C
aW5kaW5ncygpOwotCQlpZiggYW5ub0luc3RhbmNlcyA9PSBudWxsIHx8IGFubm9JbnN0YW5jZXMu
bGVuZ3RoID09IDAgfHwgYW5ub3RhdGlvbkNsYXNzID09IG51bGwgKSAKLQkJCXJldHVybiBudWxs
OwotCi0JCVN0cmluZyBhbm5vVHlwZU5hbWUgPSBhbm5vdGF0aW9uQ2xhc3MuZ2V0TmFtZSgpOwot
CQlpZiggYW5ub1R5cGVOYW1lID09IG51bGwgKSByZXR1cm4gbnVsbDsKLQkJYW5ub1R5cGVOYW1l
ID0gYW5ub1R5cGVOYW1lLnJlcGxhY2UoJyQnLCAnLicpOwotCQlmb3IoIEFubm90YXRpb25CaW5k
aW5nIGFubm9JbnN0YW5jZSA6IGFubm9JbnN0YW5jZXMpIHsKLQkJCWlmIChhbm5vSW5zdGFuY2Ug
PT0gbnVsbCkKLQkJCQljb250aW51ZTsKLQkJCVJlZmVyZW5jZUJpbmRpbmcgYmluZGluZyA9IGFu
bm9JbnN0YW5jZS5nZXRBbm5vdGF0aW9uVHlwZSgpOwotCQkJaWYgKCBiaW5kaW5nICE9IG51bGwg
JiYgYmluZGluZy5pc0Fubm90YXRpb25UeXBlKCkgKSB7Ci0JCQkJY2hhcltdIHFOYW1lOwotCQkJ
CWlmIChiaW5kaW5nLmlzTWVtYmVyVHlwZSgpKSB7Ci0JCQkJCXFOYW1lID0gQ2hhck9wZXJhdGlv
bi5jb25jYXRXaXRoKGJpbmRpbmcuZW5jbG9zaW5nVHlwZSgpLmNvbXBvdW5kTmFtZSwgYmluZGlu
Zy5zb3VyY2VOYW1lLCAnLicpOwotCQkJCQlDaGFyT3BlcmF0aW9uLnJlcGxhY2UocU5hbWUsICck
JywgJy4nKTsKLQkJCQl9IGVsc2UgewotCQkJCQlxTmFtZSA9IENoYXJPcGVyYXRpb24uY29uY2F0
V2l0aChiaW5kaW5nLmNvbXBvdW5kTmFtZSwgJy4nKTsKLQkJCQl9Ci0JCQkJaWYoIGFubm9UeXBl
TmFtZS5lcXVhbHMobmV3IFN0cmluZyhxTmFtZSkpICl7Ci0JCQkJCUFubm90YXRpb25NaXJyb3JJ
bXBsIGFubm9NaXJyb3IgPQotCQkJCQkJKEFubm90YXRpb25NaXJyb3JJbXBsKV9lbnYuZ2V0RmFj
dG9yeSgpLm5ld0Fubm90YXRpb25NaXJyb3IoYW5ub0luc3RhbmNlKTsKLQkJCQkJcmV0dXJuIChB
KVByb3h5Lm5ld1Byb3h5SW5zdGFuY2UoYW5ub3RhdGlvbkNsYXNzLmdldENsYXNzTG9hZGVyKCks
Ci0JCQkJCQkJbmV3IENsYXNzW117IGFubm90YXRpb25DbGFzcyB9LCBhbm5vTWlycm9yICk7Ci0J
CQkJfQotCQkJfQotCQl9Ci0JCXJldHVybiBudWxsOyAKKwkJcmV0dXJuIF9lbnYuZ2V0RmFjdG9y
eSgpLmdldEFubm90YXRpb24oZ2V0QW5ub3RhdGlvbkJpbmRpbmdzKCksIGFubm90YXRpb25DbGFz
cyk7CiAJfQogCQpAQCAtOTIsNCArNjUsOCBAQAogCXB1YmxpYyBMaXN0PD8gZXh0ZW5kcyBBbm5v
dGF0aW9uTWlycm9yPiBnZXRBbm5vdGF0aW9uTWlycm9ycygpIHsKIAkJcmV0dXJuIF9lbnYuZ2V0
RmFjdG9yeSgpLmdldEFubm90YXRpb25NaXJyb3JzKGdldEFubm90YXRpb25CaW5kaW5ncygpKTsK
Kwl9CisKKwlwdWJsaWMgPEEgZXh0ZW5kcyBBbm5vdGF0aW9uPiBBW10gZ2V0QW5ub3RhdGlvbnNC
eVR5cGUoQ2xhc3M8QT4gYW5ub3RhdGlvblR5cGUpIHsKKwkJcmV0dXJuIF9lbnYuZ2V0RmFjdG9y
eSgpLmdldEFubm90YXRpb25zQnlUeXBlKGdldEFubm90YXRpb25CaW5kaW5ncygpLCBhbm5vdGF0
aW9uVHlwZSk7CQogCX0KIApAQCAtMTMyLDUgKzEwOSwxMiBAQAogCUBPdmVycmlkZQogCXB1Ymxp
YyBTdHJpbmcgdG9TdHJpbmcoKSB7Ci0JCXJldHVybiBfYmluZGluZy50b1N0cmluZygpOworCQlT
dHJpbmdCdWZmZXIgYnVmID0gbmV3IFN0cmluZ0J1ZmZlcigpOworCQlMaXN0PD8gZXh0ZW5kcyBB
bm5vdGF0aW9uTWlycm9yPiBhbm5vdHMgPSBnZXRBbm5vdGF0aW9uTWlycm9ycygpOworCQlmb3Ig
KEFubm90YXRpb25NaXJyb3IgYW5ub3RhdGlvbk1pcnJvciA6IGFubm90cykgeworCQkJYnVmLmFw
cGVuZChhbm5vdGF0aW9uTWlycm9yLnRvU3RyaW5nKCkpOworCQkJYnVmLmFwcGVuZCgnICcpOwor
CQl9CisJCWJ1Zi5hcHBlbmQoX2JpbmRpbmcudG9TdHJpbmcoKSk7CisJCXJldHVybiBidWYudG9T
dHJpbmcoKTsKIAl9CiAKZGlmZiAtLWdpdCBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FwdC9tb2RlbC9FbGVtZW50c0ltcGwuamF2YSBzcmMvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9FbGVtZW50c0ltcGwuamF2YQppbmRleCA4ZTc2NjRh
Li4zMmJmYzJmIDEwMDY0NAotLS0gc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hcHQvbW9kZWwvRWxlbWVudHNJbXBsLmphdmEKKysrIHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL0VsZW1lbnRzSW1wbC5qYXZhCkBAIC0xLDQgKzEsNCBA
QAogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwNiwgMjAxMiBC
RUEgU3lzdGVtcywgSW5jLiBhbmQgb3RoZXJzCisgKiBDb3B5cmlnaHQgKGMpIDIwMDYsIDIwMTMg
QkVBIFN5c3RlbXMsIEluYy4gYW5kIG90aGVycwogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhp
cyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZh
aWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4w
CkBAIC02LDggKzYsMTMgQEAKICAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYx
MC5odG1sCiAgKgorICogVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBhbiBlYXJseS1kcmFm
dCBzcGVjaWZpY2F0aW9uIGRldmVsb3BlZCB1bmRlciB0aGUgSmF2YQorICogQ29tbXVuaXR5IFBy
b2Nlc3MgKEpDUCkgYW5kIGlzIG1hZGUgYXZhaWxhYmxlIGZvciB0ZXN0aW5nIGFuZCBldmFsdWF0
aW9uIHB1cnBvc2VzCisgKiBvbmx5LiBUaGUgY29kZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGFu
eSBzcGVjaWZpY2F0aW9uIG9mIHRoZSBKQ1AuCisgKiAKICAqIENvbnRyaWJ1dG9yczoKICAqICAg
IHdoYXJsZXlAYmVhLmNvbSAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgogICogICAg
SUJNIENvcnBvcmF0aW9uIC0gRml4IGZvciBidWcgMzQxNDk0CiAgKiAgICBJQk0gQ29ycG9yYXRp
b24gLSBGaXggZm9yIGJ1ZyAzMjg1NzUKKyAqICAgIElCTSBDb3Jwb3JhdGlvbiAtIEphdmEgOCBz
dXBwb3J0CiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KIApAQCAtNzAzLDMgKzcwOCwxMyBAQAog
CX0KIAorCXB1YmxpYyBib29sZWFuIGlzRnVuY3Rpb25hbEludGVyZmFjZShUeXBlRWxlbWVudCB0
eXBlKSB7CisJCWlmICh0eXBlICE9IG51bGwgJiYgdHlwZS5nZXRLaW5kKCkgPT0gRWxlbWVudEtp
bmQuSU5URVJGQUNFKSB7CisJCQlSZWZlcmVuY2VCaW5kaW5nIGJpbmRpbmcgPSAoUmVmZXJlbmNl
QmluZGluZykoKFR5cGVFbGVtZW50SW1wbCkgdHlwZSkuX2JpbmRpbmc7CisJCQlpZiAoYmluZGlu
ZyBpbnN0YW5jZW9mIFNvdXJjZVR5cGVCaW5kaW5nKSB7CisJCQkJcmV0dXJuIGJpbmRpbmcuaXNG
dW5jdGlvbmFsSW50ZXJmYWNlKCgoU291cmNlVHlwZUJpbmRpbmcpIGJpbmRpbmcpLnNjb3BlKTsK
KwkJCX0KKwkJfQorCQlyZXR1cm4gZmFsc2U7CisJfQorCiB9CmRpZmYgLS1naXQgc3JjL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQvbW9kZWwvRXJyb3JUeXBlRWxlbWVudC5q
YXZhIHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL0Vycm9y
VHlwZUVsZW1lbnQuamF2YQppbmRleCAzZWNjYmY5Li5iNmJlMzhlIDEwMDY0NAotLS0gc3JjL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQvbW9kZWwvRXJyb3JUeXBlRWxlbWVu
dC5qYXZhCisrKyBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2Rl
bC9FcnJvclR5cGVFbGVtZW50LmphdmEKQEAgLTEsOCArMSwxMiBAQAogLyoqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwNywgMjAxMSBJQk0gQ29ycG9yYXRpb24gYW5k
IG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwNywgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5k
IG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFj
Y29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVy
bXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5p
ZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKICAqIGh0dHA6Ly93d3cu
ZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCisgKgorICogVGhpcyBpcyBhbiBpbXBsZW1l
bnRhdGlvbiBvZiBhbiBlYXJseS1kcmFmdCBzcGVjaWZpY2F0aW9uIGRldmVsb3BlZCB1bmRlciB0
aGUgSmF2YQorICogQ29tbXVuaXR5IFByb2Nlc3MgKEpDUCkgYW5kIGlzIG1hZGUgYXZhaWxhYmxl
IGZvciB0ZXN0aW5nIGFuZCBldmFsdWF0aW9uIHB1cnBvc2VzCisgKiBvbmx5LiBUaGUgY29kZSBp
cyBub3QgY29tcGF0aWJsZSB3aXRoIGFueSBzcGVjaWZpY2F0aW9uIG9mIHRoZSBKQ1AuCiAgKgog
ICogQ29udHJpYnV0b3JzOgpAQCAtMTEwLDQgKzExNCwxMCBAQAogCQlyZXR1cm4gQ29sbGVjdGlv
bnMuZW1wdHlMaXN0KCk7CiAJfQorCQorCUBTdXBwcmVzc1dhcm5pbmdzKCJ1bmNoZWNrZWQiKQor
CXB1YmxpYyA8QSBleHRlbmRzIEFubm90YXRpb24+IEFbXSBnZXRBbm5vdGF0aW9uc0J5VHlwZShD
bGFzczxBPiBhbm5vdGF0aW9uVHlwZSkgeworCQlyZXR1cm4gKEFbXSkgRmFjdG9yeS5FTVBUWV9B
Tk5PVEFUSU9OUzsKKwl9CisKIAogCS8qIChub24tSmF2YWRvYykKZGlmZiAtLWdpdCBzcmMvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9FcnJvclR5cGVJbXBsLmph
dmEgc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQvbW9kZWwvRXJyb3JU
eXBlSW1wbC5qYXZhCmluZGV4IDZiODI2YjcuLmY3ZDczNjcgMTAwNjQ0Ci0tLSBzcmMvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9FcnJvclR5cGVJbXBsLmphdmEK
KysrIHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL0Vycm9y
VHlwZUltcGwuamF2YQpAQCAtMSw4ICsxLDEyIEBACiAvKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgot
ICogQ29weXJpZ2h0IChjKSAyMDA3LCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgor
ICogQ29weXJpZ2h0IChjKSAyMDA3LCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgog
ICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5n
IG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUg
RWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRp
c3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdAogICogaHR0cDovL3d3dy5lY2xpcHNlLm9y
Zy9sZWdhbC9lcGwtdjEwLmh0bWwKKyAqCisgKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9m
IGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVyIHRoZSBKYXZhCisg
KiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFibGUgZm9yIHRlc3Rp
bmcgYW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBjb2RlIGlzIG5vdCBjb21w
YXRpYmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KICAqCiAgKiBDb250cmli
dXRvcnM6CkBAIC0xMSw4ICsxNSwxMCBAQAogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJu
YWwuY29tcGlsZXIuYXB0Lm1vZGVsOwogCitpbXBvcnQgamF2YS5sYW5nLmFubm90YXRpb24uQW5u
b3RhdGlvbjsKIGltcG9ydCBqYXZhLnV0aWwuQXJyYXlMaXN0OwogaW1wb3J0IGphdmEudXRpbC5D
b2xsZWN0aW9uczsKIGltcG9ydCBqYXZhLnV0aWwuTGlzdDsKIAoraW1wb3J0IGphdmF4Lmxhbmcu
bW9kZWwuZWxlbWVudC5Bbm5vdGF0aW9uTWlycm9yOwogaW1wb3J0IGphdmF4LmxhbmcubW9kZWwu
ZWxlbWVudC5FbGVtZW50OwogaW1wb3J0IGphdmF4LmxhbmcubW9kZWwudHlwZS5FcnJvclR5cGU7
CkBAIC04Niw0ICs5MiwxNyBAQAogCX0KIAorCXB1YmxpYyBMaXN0PD8gZXh0ZW5kcyBBbm5vdGF0
aW9uTWlycm9yPiBnZXRBbm5vdGF0aW9uTWlycm9ycygpIHsKKwkJcmV0dXJuIEZhY3RvcnkuRU1Q
VFlfQU5OT1RBVElPTl9NSVJST1JTOworCX0KKworCXB1YmxpYyA8QSBleHRlbmRzIEFubm90YXRp
b24+IEEgZ2V0QW5ub3RhdGlvbihDbGFzczxBPiBhbm5vdGF0aW9uVHlwZSkgeworCQlyZXR1cm4g
bnVsbDsKKwl9CisKKwlAU3VwcHJlc3NXYXJuaW5ncygidW5jaGVja2VkIikKKwlwdWJsaWMgPEEg
ZXh0ZW5kcyBBbm5vdGF0aW9uPiBBW10gZ2V0QW5ub3RhdGlvbnNCeVR5cGUoQ2xhc3M8QT4gYW5u
b3RhdGlvblR5cGUpIHsKKwkJcmV0dXJuIChBW10pIEZhY3RvcnkuRU1QVFlfQU5OT1RBVElPTlM7
CisJfQorCiAJLyogKG5vbi1KYXZhZG9jKQogCSAqIEBzZWUgamF2YXgubGFuZy5tb2RlbC50eXBl
LlR5cGVNaXJyb3IjZ2V0S2luZCgpCmRpZmYgLS1naXQgc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hcHQvbW9kZWwvRXhlY3V0YWJsZUVsZW1lbnRJbXBsLmphdmEgc3JjL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQvbW9kZWwvRXhlY3V0YWJsZUVsZW1l
bnRJbXBsLmphdmEKaW5kZXggMzNiODI0MS4uYjU0MzEyMCAxMDA2NDQKLS0tIHNyYy9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL0V4ZWN1dGFibGVFbGVtZW50SW1w
bC5qYXZhCisrKyBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2Rl
bC9FeGVjdXRhYmxlRWxlbWVudEltcGwuamF2YQpAQCAtMSw4ICsxLDEyIEBACiAvKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDA1LCAyMDA5IElCTSBDb3Jwb3JhdGlv
biBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDA1LCAyMDEzIElCTSBDb3Jwb3JhdGlv
biBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0
aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRo
ZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2Nv
bXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdAogICogaHR0cDov
L3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKKyAqCisgKiBUaGlzIGlzIGFuIGlt
cGxlbWVudGF0aW9uIG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVu
ZGVyIHRoZSBKYXZhCisgKiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFp
bGFibGUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBj
b2RlIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4K
ICAqCiAgKiBDb250cmlidXRvcnM6CkBAIC0zMzUsMyArMzM5LDE3IEBACiAJfQogCisJcHVibGlj
IFR5cGVNaXJyb3IgZ2V0UmVjZWl2ZXJUeXBlKCkgeworCQlNZXRob2RCaW5kaW5nIGJpbmRpbmcg
PSAoTWV0aG9kQmluZGluZylfYmluZGluZzsKKwkJLy8gV2hhdCBpcyB0aGUgbGlrZWxpaG9vZCBv
ZiB0aGlzIGJlaW5nIG51bGw/CisJCWlmIChiaW5kaW5nLmRlY2xhcmluZ0NsYXNzICE9IG51bGwp
IHsKKwkJCXJldHVybiBfZW52LmdldEZhY3RvcnkoKS5uZXdUeXBlTWlycm9yKGJpbmRpbmcuZGVj
bGFyaW5nQ2xhc3MpOworCQl9CisJCXJldHVybiBOb1R5cGVJbXBsLk5PX1RZUEVfTk9ORTsKKwl9
CisKKwlwdWJsaWMgYm9vbGVhbiBpc0RlZmF1bHQoKSB7CisJCU1ldGhvZEJpbmRpbmcgYmluZGlu
ZyA9IChNZXRob2RCaW5kaW5nKV9iaW5kaW5nOworCQlyZXR1cm4gYmluZGluZy5pc0RlZmF1bHRN
ZXRob2QoKTsKKwl9CisKIH0KZGlmZiAtLWdpdCBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FwdC9tb2RlbC9FeGVjdXRhYmxlVHlwZUltcGwuamF2YSBzcmMvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9FeGVjdXRhYmxlVHlwZUltcGwuamF2
YQppbmRleCAzNjgxYWJlLi40NjI0YTZiIDEwMDY0NAotLS0gc3JjL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9hcHQvbW9kZWwvRXhlY3V0YWJsZVR5cGVJbXBsLmphdmEKKysrIHNy
Yy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL0V4ZWN1dGFibGVU
eXBlSW1wbC5qYXZhCkBAIC0xLDggKzEsMTIgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0g
KiBDb3B5cmlnaHQgKGMpIDIwMDYsIDIwMTEgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisg
KiBDb3B5cmlnaHQgKGMpIDIwMDYsIDIwMTMgSUJNIENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAg
KiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcg
bWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBF
Y2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlz
dHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CiAgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3Jn
L2xlZ2FsL2VwbC12MTAuaHRtbAorICoKKyAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2Yg
YW4gZWFybHktZHJhZnQgc3BlY2lmaWNhdGlvbiBkZXZlbG9wZWQgdW5kZXIgdGhlIEphdmEKKyAq
IENvbW11bml0eSBQcm9jZXNzIChKQ1ApIGFuZCBpcyBtYWRlIGF2YWlsYWJsZSBmb3IgdGVzdGlu
ZyBhbmQgZXZhbHVhdGlvbiBwdXJwb3NlcworICogb25seS4gVGhlIGNvZGUgaXMgbm90IGNvbXBh
dGlibGUgd2l0aCBhbnkgc3BlY2lmaWNhdGlvbiBvZiB0aGUgSkNQLgogICoKICAqIENvbnRyaWJ1
dG9yczoKQEAgLTEyMywzICsxMjcsMTEgQEAKIAkJcmV0dXJuIFR5cGVLaW5kLkVYRUNVVEFCTEU7
CiAJfQorCisJcHVibGljIFR5cGVNaXJyb3IgZ2V0UmVjZWl2ZXJUeXBlKCkgeworCQlNZXRob2RC
aW5kaW5nIGJpbmRpbmcgPSAoTWV0aG9kQmluZGluZylfYmluZGluZzsKKwkJaWYgKGJpbmRpbmcu
ZGVjbGFyaW5nQ2xhc3MgIT0gbnVsbCkgeworCQkJcmV0dXJuIF9lbnYuZ2V0RmFjdG9yeSgpLm5l
d1R5cGVNaXJyb3IoYmluZGluZy5kZWNsYXJpbmdDbGFzcyk7CisJCX0KKwkJcmV0dXJuIE5vVHlw
ZUltcGwuTk9fVFlQRV9OT05FOworCX0KIH0KZGlmZiAtLWdpdCBzcmMvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9GYWN0b3J5LmphdmEgc3JjL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQvbW9kZWwvRmFjdG9yeS5qYXZhCmluZGV4IDcxYzdh
YjkuLjA2ZWE0YmEgMTAwNjQ0Ci0tLSBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FwdC9tb2RlbC9GYWN0b3J5LmphdmEKKysrIHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXB0L21vZGVsL0ZhY3RvcnkuamF2YQpAQCAtMSw0ICsxLDQgQEAKIC8qKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDcsIDIwMTIgQkVBIFN5c3Rl
bXMsIEluYy4gYW5kIG90aGVycyAKKyAqIENvcHlyaWdodCAoYykgMjAwNywgMjAxMyBCRUEgU3lz
dGVtcywgSW5jLiBhbmQgb3RoZXJzIAogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9n
cmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxl
IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCkBAIC02
LDEyICs2LDE5IEBACiAgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRt
bAogICoKKyAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQgc3Bl
Y2lmaWNhdGlvbiBkZXZlbG9wZWQgdW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0eSBQcm9jZXNz
IChKQ1ApIGFuZCBpcyBtYWRlIGF2YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiBw
dXJwb3NlcworICogb25seS4gVGhlIGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkgc3Bl
Y2lmaWNhdGlvbiBvZiB0aGUgSkNQLgorICoKICAqIENvbnRyaWJ1dG9yczoKICAqICAgIHdoYXJs
ZXlAYmVhLmNvbSAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgogICogICAgSUJNIENv
cnBvcmF0aW9uIC0gZml4IGZvciAzNDI1OTgKKyAqICAgIElCTSBDb3Jwb3JhdGlvbiAtIEphdmEg
OCBzdXBwb3J0CiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KIAogcGFja2FnZSBvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXB0Lm1vZGVsOwogCitpbXBvcnQgamF2YS5sYW5nLmFu
bm90YXRpb24uQW5ub3RhdGlvbjsKIGltcG9ydCBqYXZhLmxhbmcucmVmbGVjdC5BcnJheTsKK2lt
cG9ydCBqYXZhLmxhbmcucmVmbGVjdC5Qcm94eTsKIGltcG9ydCBqYXZhLnV0aWwuQXJyYXlMaXN0
OwogaW1wb3J0IGphdmEudXRpbC5Db2xsZWN0aW9uczsKQEAgLTMyLDQgKzM5LDUgQEAKIGltcG9y
dCBqYXZheC5sYW5nLm1vZGVsLnR5cGUuVHlwZU1pcnJvcjsKIAoraW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5jb3JlLmNvbXBpbGVyLkNoYXJPcGVyYXRpb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmludGVybmFsLmNvbXBpbGVyLmFwdC5kaXNwYXRjaC5CYXNlUHJvY2Vzc2luZ0VudkltcGw7CiBp
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmNsYXNzZm10LkNsYXNzRmls
ZUNvbnN0YW50czsKQEAgLTY1LDQgKzczLDYgQEAKIAogCXByaXZhdGUgZmluYWwgQmFzZVByb2Nl
c3NpbmdFbnZJbXBsIF9lbnY7CisJcHVibGljIHN0YXRpYyBBbm5vdGF0aW9uW10gRU1QVFlfQU5O
T1RBVElPTlMgPSBuZXcgQW5ub3RhdGlvblswXTsKKwlwdWJsaWMgc3RhdGljIExpc3Q8PyBleHRl
bmRzIEFubm90YXRpb25NaXJyb3I+IEVNUFRZX0FOTk9UQVRJT05fTUlSUk9SUyA9IENvbGxlY3Rp
b25zLmVtcHR5TGlzdCgpOwogCQogCS8qKgpAQCAtODksNCArOTksNTYgQEAKIAl9CiAJCisJQFN1
cHByZXNzV2FybmluZ3MoInVuY2hlY2tlZCIpIC8vIGZvciB0aGUgY2FzdCB0byBBCisJcHVibGlj
IDxBIGV4dGVuZHMgQW5ub3RhdGlvbj4gQVtdIGdldEFubm90YXRpb25zQnlUeXBlKEFubm90YXRp
b25CaW5kaW5nW10gYW5ub0luc3RhbmNlcywgQ2xhc3M8QT4gYW5ub3RhdGlvbkNsYXNzKSB7CisJ
CUFbXSByZXN1bHQgPSBnZXRBbm5vdGF0aW9ucyhhbm5vSW5zdGFuY2VzLCBhbm5vdGF0aW9uQ2xh
c3MsIGZhbHNlKTsKKwkJcmV0dXJuIHJlc3VsdCA9PSBudWxsID8gKEFbXSkgRU1QVFlfQU5OT1RB
VElPTlMgOiByZXN1bHQ7CisJfQorCQorCQorCXB1YmxpYyA8QSBleHRlbmRzIEFubm90YXRpb24+
IEEgZ2V0QW5ub3RhdGlvbihBbm5vdGF0aW9uQmluZGluZ1tdIGFubm9JbnN0YW5jZXMsIENsYXNz
PEE+IGFubm90YXRpb25DbGFzcykgeworCQlBW10gcmVzdWx0ID0gZ2V0QW5ub3RhdGlvbnMoYW5u
b0luc3RhbmNlcywgYW5ub3RhdGlvbkNsYXNzLCB0cnVlKTsKKwkJcmV0dXJuIHJlc3VsdCA9PSBu
dWxsID8gbnVsbCA6IHJlc3VsdFswXTsKKwl9CisKKwlAU3VwcHJlc3NXYXJuaW5ncygidW5jaGVj
a2VkIikgLy8gZm9yIGNhc3Qgb2YgbmV3UHJveHlJbnN0YW5jZSgpIHRvIEEKKwlwcml2YXRlIDxB
IGV4dGVuZHMgQW5ub3RhdGlvbj4gQVtdIGdldEFubm90YXRpb25zKEFubm90YXRpb25CaW5kaW5n
W10gYW5ub0luc3RhbmNlcywgQ2xhc3M8QT4gYW5ub3RhdGlvbkNsYXNzLCBib29sZWFuIGp1c3RU
aGVGaXJzdCkgeworCQlpZihhbm5vSW5zdGFuY2VzID09IG51bGwgfHwgYW5ub0luc3RhbmNlcy5s
ZW5ndGggPT0gMCB8fCBhbm5vdGF0aW9uQ2xhc3MgPT0gbnVsbCApIAorCQkJcmV0dXJuIG51bGw7
CisKKwkJU3RyaW5nIGFubm9UeXBlTmFtZSA9IGFubm90YXRpb25DbGFzcy5nZXROYW1lKCk7CisJ
CWlmKGFubm9UeXBlTmFtZSA9PSBudWxsICkgcmV0dXJuIG51bGw7CisKKwkJTGlzdDxBPiBsaXN0
ID0gbmV3IEFycmF5TGlzdDxBPihhbm5vSW5zdGFuY2VzLmxlbmd0aCk7CisJCWZvcihBbm5vdGF0
aW9uQmluZGluZyBhbm5vSW5zdGFuY2UgOiBhbm5vSW5zdGFuY2VzKSB7CisJCQlpZiAoYW5ub0lu
c3RhbmNlID09IG51bGwpCisJCQkJY29udGludWU7CisJCQkKKwkJCUFubm90YXRpb25NaXJyb3JJ
bXBsIGFubm9NaXJyb3IgPSBjcmVhdGVBbm5vdGF0aW9uTWlycm9yKGFubm9UeXBlTmFtZSwgYW5u
b0luc3RhbmNlKTsKKwkJCWlmIChhbm5vTWlycm9yICE9IG51bGwpIHsKKwkJCQlsaXN0LmFkZCgo
QSlQcm94eS5uZXdQcm94eUluc3RhbmNlKGFubm90YXRpb25DbGFzcy5nZXRDbGFzc0xvYWRlcigp
LCBuZXcgQ2xhc3NbXXsgYW5ub3RhdGlvbkNsYXNzIH0sIGFubm9NaXJyb3IpKTsKKwkJCQlpZiAo
anVzdFRoZUZpcnN0KSBicmVhazsKKwkJCX0KKwkJfQorCQlyZXR1cm4gbGlzdC5zaXplKCkgPiAw
ID8gKEFbXSkgbGlzdC50b0FycmF5KG5ldyBBbm5vdGF0aW9uW2xpc3Quc2l6ZSgpXSkgOiAgbnVs
bDsKKwl9CisKKwlwcml2YXRlIEFubm90YXRpb25NaXJyb3JJbXBsIGNyZWF0ZUFubm90YXRpb25N
aXJyb3IoU3RyaW5nIGFubm9UeXBlTmFtZSwgQW5ub3RhdGlvbkJpbmRpbmcgYW5ub0luc3RhbmNl
KSB7CisJCVJlZmVyZW5jZUJpbmRpbmcgYmluZGluZyA9IGFubm9JbnN0YW5jZS5nZXRBbm5vdGF0
aW9uVHlwZSgpOworCQlpZiAoYmluZGluZyAhPSBudWxsICYmIGJpbmRpbmcuaXNBbm5vdGF0aW9u
VHlwZSgpICkgeworCQkJY2hhcltdIHFOYW1lOworCQkJaWYgKGJpbmRpbmcuaXNNZW1iZXJUeXBl
KCkpIHsKKwkJCQlhbm5vVHlwZU5hbWUgPSBhbm5vVHlwZU5hbWUucmVwbGFjZSgnJCcsICcuJyk7
CisJCQkJcU5hbWUgPSBDaGFyT3BlcmF0aW9uLmNvbmNhdFdpdGgoYmluZGluZy5lbmNsb3NpbmdU
eXBlKCkuY29tcG91bmROYW1lLCBiaW5kaW5nLnNvdXJjZU5hbWUsICcuJyk7CisJCQkJQ2hhck9w
ZXJhdGlvbi5yZXBsYWNlKHFOYW1lLCAnJCcsICcuJyk7CisJCQl9IGVsc2UgeworCQkJCXFOYW1l
ID0gQ2hhck9wZXJhdGlvbi5jb25jYXRXaXRoKGJpbmRpbmcuY29tcG91bmROYW1lLCAnLicpOwor
CQkJfQorCQkJaWYoYW5ub1R5cGVOYW1lLmVxdWFscyhuZXcgU3RyaW5nKHFOYW1lKSkgKXsKKwkJ
CQlyZXR1cm4gKEFubm90YXRpb25NaXJyb3JJbXBsKV9lbnYuZ2V0RmFjdG9yeSgpLm5ld0Fubm90
YXRpb25NaXJyb3IoYW5ub0luc3RhbmNlKTsKKwkJCX0KKwkJfQorCQlyZXR1cm4gbnVsbDsKKwl9
CisKIAlwcml2YXRlIHN0YXRpYyB2b2lkIGFwcGVuZE1vZGlmaWVyKFNldDxNb2RpZmllcj4gcmVz
dWx0LCBpbnQgbW9kaWZpZXJzLCBpbnQgbW9kaWZpZXJDb25zdGFudCwgTW9kaWZpZXIgbW9kaWZp
ZXIpIHsKIAkJaWYgKChtb2RpZmllcnMgJiBtb2RpZmllckNvbnN0YW50KSAhPSAwKSB7CkBAIC0z
NDMsNCArNDA1LDEyIEBACiAJCX0KIAl9CisJCisJcHVibGljIFByaW1pdGl2ZVR5cGVJbXBsIGdl
dFByaW1pdGl2ZVR5cGUoQmFzZVR5cGVCaW5kaW5nIGJpbmRpbmcpIHsKKwkJQW5ub3RhdGlvbkJp
bmRpbmdbXSBhbm5vdGF0aW9ucyA9IGJpbmRpbmcuZ2V0VHlwZUFubm90YXRpb25zKCk7CisJCWlm
IChhbm5vdGF0aW9ucyA9PSBudWxsIHx8IGFubm90YXRpb25zLmxlbmd0aCA9PSAwKSB7CisJCQly
ZXR1cm4gZ2V0UHJpbWl0aXZlVHlwZShQcmltaXRpdmVUeXBlSW1wbC5nZXRLaW5kKGJpbmRpbmcp
KTsKKwkJfQorCQlyZXR1cm4gbmV3IFByaW1pdGl2ZVR5cGVJbXBsKF9lbnYsIGJpbmRpbmcpOwor
CX0KIAogCS8qKgpAQCAtMzgwLDEwICs0NTAsMTAgQEAKIAkJCUJhc2VUeXBlQmluZGluZyBidGIg
PSAoQmFzZVR5cGVCaW5kaW5nKWJpbmRpbmc7CiAJCQlzd2l0Y2ggKGJ0Yi5pZCkgewotCQkJY2Fz
ZSBUeXBlSWRzLlRfdm9pZDoKLQkJCQlyZXR1cm4gZ2V0Tm9UeXBlKFR5cGVLaW5kLlZPSUQpOwot
CQkJY2FzZSBUeXBlSWRzLlRfbnVsbDoKLQkJCQlyZXR1cm4gZ2V0TnVsbFR5cGUoKTsKLQkJCWRl
ZmF1bHQ6Ci0JCQkJcmV0dXJuIGdldFByaW1pdGl2ZVR5cGUoUHJpbWl0aXZlVHlwZUltcGwuZ2V0
S2luZCgoQmFzZVR5cGVCaW5kaW5nKWJpbmRpbmcpKTsKKwkJCQljYXNlIFR5cGVJZHMuVF92b2lk
OgorCQkJCQlyZXR1cm4gZ2V0Tm9UeXBlKFR5cGVLaW5kLlZPSUQpOworCQkJCWNhc2UgVHlwZUlk
cy5UX251bGw6CisJCQkJCXJldHVybiBnZXROdWxsVHlwZSgpOworCQkJCWRlZmF1bHQ6CisJCQkJ
CXJldHVybiBnZXRQcmltaXRpdmVUeXBlKGJ0Yik7CiAJCQl9CiAKZGlmZiAtLWdpdCBzcmMvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9Ob1R5cGVJbXBsLmphdmEg
c3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQvbW9kZWwvTm9UeXBlSW1w
bC5qYXZhCmluZGV4IDQ5OWZmMTYuLjM5YjFmMjQgMTAwNjQ0Ci0tLSBzcmMvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9Ob1R5cGVJbXBsLmphdmEKKysrIHNyYy9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL05vVHlwZUltcGwuamF2
YQpAQCAtMSw0ICsxLDQgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQg
KGMpIDIwMDcsIDIwMTEgQkVBIFN5c3RlbXMsIEluYy4KKyAqIENvcHlyaWdodCAoYykgMjAwNywg
MjAxMyBCRUEgU3lzdGVtcywgSW5jLiBhbmQgb3RoZXJzCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVk
LiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFk
ZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNl
IHYxLjAKQEAgLTYsMTAgKzYsMTkgQEAKICAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwv
ZXBsLXYxMC5odG1sCiAgKgorICogVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBhbiBlYXJs
eS1kcmFmdCBzcGVjaWZpY2F0aW9uIGRldmVsb3BlZCB1bmRlciB0aGUgSmF2YQorICogQ29tbXVu
aXR5IFByb2Nlc3MgKEpDUCkgYW5kIGlzIG1hZGUgYXZhaWxhYmxlIGZvciB0ZXN0aW5nIGFuZCBl
dmFsdWF0aW9uIHB1cnBvc2VzCisgKiBvbmx5LiBUaGUgY29kZSBpcyBub3QgY29tcGF0aWJsZSB3
aXRoIGFueSBzcGVjaWZpY2F0aW9uIG9mIHRoZSBKQ1AuCisgKgogICogQ29udHJpYnV0b3JzOgog
ICogICAgd2hhcmxleUBiZWEuY29tIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCisg
KiAgICBJQk0gQ29ycG9yYXRpb24gLSBKYXZhIDggc3VwcG9ydAogICoqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKiovCiAKIHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFwdC5t
b2RlbDsKIAoraW1wb3J0IGphdmEubGFuZy5hbm5vdGF0aW9uLkFubm90YXRpb247CitpbXBvcnQg
amF2YS51dGlsLkxpc3Q7CisKK2ltcG9ydCBqYXZheC5sYW5nLm1vZGVsLmVsZW1lbnQuQW5ub3Rh
dGlvbk1pcnJvcjsKIGltcG9ydCBqYXZheC5sYW5nLm1vZGVsLnR5cGUuTm9UeXBlOwogaW1wb3J0
IGphdmF4LmxhbmcubW9kZWwudHlwZS5OdWxsVHlwZTsKQEAgLTY3LDMgKzc2LDE2IEBACiAJfQog
CisJcHVibGljIExpc3Q8PyBleHRlbmRzIEFubm90YXRpb25NaXJyb3I+IGdldEFubm90YXRpb25N
aXJyb3JzKCkgeworCQlyZXR1cm4gRmFjdG9yeS5FTVBUWV9BTk5PVEFUSU9OX01JUlJPUlM7CisJ
fQorCisJcHVibGljIDxBIGV4dGVuZHMgQW5ub3RhdGlvbj4gQSBnZXRBbm5vdGF0aW9uKENsYXNz
PEE+IGFubm90YXRpb25UeXBlKSB7CisJCXJldHVybiBudWxsOworCX0KKworCUBTdXBwcmVzc1dh
cm5pbmdzKCJ1bmNoZWNrZWQiKQorCXB1YmxpYyA8QSBleHRlbmRzIEFubm90YXRpb24+IEFbXSBn
ZXRBbm5vdGF0aW9uc0J5VHlwZShDbGFzczxBPiBhbm5vdGF0aW9uVHlwZSkgeworCQlyZXR1cm4g
KEFbXSkgRmFjdG9yeS5FTVBUWV9BTk5PVEFUSU9OUzsKKwl9CisKIH0KZGlmZiAtLWdpdCBzcmMv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9QcmltaXRpdmVUeXBl
SW1wbC5qYXZhIHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVs
L1ByaW1pdGl2ZVR5cGVJbXBsLmphdmEKaW5kZXggNzdmZTJkNy4uMzlhOWFiYyAxMDA2NDQKLS0t
IHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL1ByaW1pdGl2
ZVR5cGVJbXBsLmphdmEKKysrIHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
YXB0L21vZGVsL1ByaW1pdGl2ZVR5cGVJbXBsLmphdmEKQEAgLTEsNCArMSw0IEBACiAvKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDA3IEJFQSBTeXN0ZW1zLCBJbmMu
IAorICogQ29weXJpZ2h0IChjKSAyMDA3LCAyMDEzIEJFQSBTeXN0ZW1zLCBJbmMuIGFuZCBvdGhl
cnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBh
bnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9m
IHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKQEAgLTYsNyArNiwxMSBAQAogICogaHR0
cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKICAqCisgKiBUaGlzIGlzIGFu
IGltcGxlbWVudGF0aW9uIG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVk
IHVuZGVyIHRoZSBKYXZhCisgKiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBh
dmFpbGFibGUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRo
ZSBjb2RlIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpD
UC4KKyAqCiAgKiBDb250cmlidXRvcnM6CiAgKiAgICB3aGFybGV5QGJlYS5jb20gLSBpbml0aWFs
IEFQSSBhbmQgaW1wbGVtZW50YXRpb24KLSAqICAgIAorICogICAgSUJNIENvcnBvcmF0aW9uIC0g
SmF2YSA4IHN1cHBvcnQKICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwogCkBAIC0xNyw0ICsyMSw2
IEBACiBpbXBvcnQgamF2YXgubGFuZy5tb2RlbC50eXBlLlR5cGVWaXNpdG9yOwogCitpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFwdC5kaXNwYXRjaC5CYXNlUHJvY2Vz
c2luZ0VudkltcGw7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxv
b2t1cC5Bbm5vdGF0aW9uQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwu
Y29tcGlsZXIubG9va3VwLkJhc2VUeXBlQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlR5cGVCaW5kaW5nOwpAQCAtNDUsNCArNTEsOSBAQAog
CX0KIAkKKwlQcmltaXRpdmVUeXBlSW1wbChCYXNlUHJvY2Vzc2luZ0VudkltcGwgZW52LCBCYXNl
VHlwZUJpbmRpbmcgYmluZGluZykgeworCQkvLyBGcm9tIEphdmEgOCwgYmFzZSB0eXBlIGJpbmRp
bmdzIGNhbiBob2xkIGFubm90YXRpb25zIGFuZCBoZW5jZSBuZWVkIHRoZSBlbnZpcm9ubWVudC4K
KwkJc3VwZXIoZW52LCBiaW5kaW5nKTsKKwl9CisJCiAJQE92ZXJyaWRlCiAJcHVibGljIDxSLCBQ
PiBSIGFjY2VwdChUeXBlVmlzaXRvcjxSLCBQPiB2LCBQIHApCkBAIC01MSw0ICs2Miw4IEBACiAJ
fQogCisJcHJvdGVjdGVkIEFubm90YXRpb25CaW5kaW5nW10gZ2V0QW5ub3RhdGlvbkJpbmRpbmdz
KCkgeworCQlyZXR1cm4gKChCYXNlVHlwZUJpbmRpbmcpX2JpbmRpbmcpLmdldFR5cGVBbm5vdGF0
aW9ucygpOworCX0KKwogCS8qIChub24tSmF2YWRvYykKIAkgKiBAc2VlIG9yZy5lY2xpcHNlLmpk
dC5pbnRlcm5hbC5jb21waWxlci5hcHQubW9kZWwuVHlwZU1pcnJvckltcGwjZ2V0S2luZCgpCmRp
ZmYgLS1naXQgc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQvbW9kZWwv
VHlwZU1pcnJvckltcGwuamF2YSBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FwdC9tb2RlbC9UeXBlTWlycm9ySW1wbC5qYXZhCmluZGV4IDIyYjdhNDQuLjEyMWU3MGIgMTAw
NjQ0Ci0tLSBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9U
eXBlTWlycm9ySW1wbC5qYXZhCisrKyBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FwdC9tb2RlbC9UeXBlTWlycm9ySW1wbC5qYXZhCkBAIC0xLDQgKzEsNCBAQAogLyoqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwNyBCRUEgU3lzdGVtcywgSW5j
LiAKKyAqIENvcHlyaWdodCAoYykgMjAwNywgMjAxMyBCRUEgU3lzdGVtcywgSW5jLiBhbmQgb3Ro
ZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21w
YW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBv
ZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCkBAIC02LDExICs2LDE5IEBACiAgKiBo
dHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbAogICoKKyAqIFRoaXMgaXMg
YW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQgc3BlY2lmaWNhdGlvbiBkZXZlbG9w
ZWQgdW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0eSBQcm9jZXNzIChKQ1ApIGFuZCBpcyBtYWRl
IGF2YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiBwdXJwb3NlcworICogb25seS4g
VGhlIGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkgc3BlY2lmaWNhdGlvbiBvZiB0aGUg
SkNQLgorICoKICAqIENvbnRyaWJ1dG9yczoKICAqICAgIHdoYXJsZXlAYmVhLmNvbSAtIGluaXRp
YWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgotICogICAgCisgKiAgICBJQk0gQ29ycG9yYXRpb24g
LSBKYXZhIDggc3VwcG9ydAogICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCiAKIHBhY2thZ2Ugb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFwdC5tb2RlbDsKIAoraW1wb3J0IGphdmEu
bGFuZy5hbm5vdGF0aW9uLkFubm90YXRpb247CitpbXBvcnQgamF2YS51dGlsLkxpc3Q7CisKK2lt
cG9ydCBqYXZheC5sYW5nLm1vZGVsLmVsZW1lbnQuQW5ub3RhdGlvbk1pcnJvcjsKIGltcG9ydCBq
YXZheC5sYW5nLm1vZGVsLnR5cGUuVHlwZUtpbmQ7CiBpbXBvcnQgamF2YXgubGFuZy5tb2RlbC50
eXBlLlR5cGVNaXJyb3I7CkBAIC0xOCw1ICsyNiw3IEBACiAKIGltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIuYXB0LmRpc3BhdGNoLkJhc2VQcm9jZXNzaW5nRW52SW1wbDsK
K2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkFubm90YXRp
b25CaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29r
dXAuQmluZGluZzsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9v
a3VwLlJlZmVyZW5jZUJpbmRpbmc7CiAKIC8qKgpAQCAtMTA3LDQgKzExNywyMCBAQAogCX0KIAor
CXByb3RlY3RlZCBBbm5vdGF0aW9uQmluZGluZ1tdIGdldEFubm90YXRpb25CaW5kaW5ncygpIHsK
KwkJcmV0dXJuICgoUmVmZXJlbmNlQmluZGluZylfYmluZGluZykuZ2V0VHlwZUFubm90YXRpb25z
KCk7CisJfQorCisJcHVibGljIExpc3Q8PyBleHRlbmRzIEFubm90YXRpb25NaXJyb3I+IGdldEFu
bm90YXRpb25NaXJyb3JzKCkgeworCQlyZXR1cm4gX2Vudi5nZXRGYWN0b3J5KCkuZ2V0QW5ub3Rh
dGlvbk1pcnJvcnMoZ2V0QW5ub3RhdGlvbkJpbmRpbmdzKCkpOworCX0KKworCXB1YmxpYyA8QSBl
eHRlbmRzIEFubm90YXRpb24+IEEgZ2V0QW5ub3RhdGlvbihDbGFzczxBPiBhbm5vdGF0aW9uVHlw
ZSkgeworCQlyZXR1cm4gX2Vudi5nZXRGYWN0b3J5KCkuZ2V0QW5ub3RhdGlvbihnZXRBbm5vdGF0
aW9uQmluZGluZ3MoKSwgYW5ub3RhdGlvblR5cGUpOworCX0KKworCXB1YmxpYyA8QSBleHRlbmRz
IEFubm90YXRpb24+IEFbXSBnZXRBbm5vdGF0aW9uc0J5VHlwZShDbGFzczxBPiBhbm5vdGF0aW9u
VHlwZSkgeworCQlyZXR1cm4gX2Vudi5nZXRGYWN0b3J5KCkuZ2V0QW5ub3RhdGlvbnNCeVR5cGUo
Z2V0QW5ub3RhdGlvbkJpbmRpbmdzKCksIGFubm90YXRpb25UeXBlKTsKKwl9CisKIAkKIH0KZGlm
ZiAtLWdpdCBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9U
eXBlUGFyYW1ldGVyRWxlbWVudEltcGwuamF2YSBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FwdC9tb2RlbC9UeXBlUGFyYW1ldGVyRWxlbWVudEltcGwuamF2YQppbmRleCA3
ZGE3YzNhLi4wYzQ4N2E2IDEwMDY0NAotLS0gc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hcHQvbW9kZWwvVHlwZVBhcmFtZXRlckVsZW1lbnRJbXBsLmphdmEKKysrIHNyYy9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL1R5cGVQYXJhbWV0ZXJF
bGVtZW50SW1wbC5qYXZhCkBAIC0xLDQgKzEsNCBAQAogLyoqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioK
LSAqIENvcHlyaWdodCAoYykgMjAwNywgMjAxMSBCRUEgU3lzdGVtcywgSW5jLgorICogQ29weXJp
Z2h0IChjKSAyMDA3LCAyMDEzIEJFQSBTeXN0ZW1zLCBJbmMuCiAgKiBBbGwgcmlnaHRzIHJlc2Vy
dmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUg
bWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNl
bnNlIHYxLjAKQEAgLTYsOCArNiwxMyBAQAogICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdh
bC9lcGwtdjEwLmh0bWwKICAqCisgKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGFuIGVh
cmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVyIHRoZSBKYXZhCisgKiBDb21t
dW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFibGUgZm9yIHRlc3RpbmcgYW5k
IGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBjb2RlIGlzIG5vdCBjb21wYXRpYmxl
IHdpdGggYW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KKyAqCiAgKiBDb250cmlidXRvcnM6
CiAgKiAgICB3aGFybGV5QGJlYS5jb20gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24K
ICAqICAgIElCTSBDb3Jwb3JhdGlvbiAtIGZpeCBmb3IgMzQyNDcwCiAgKiAgICBJQk0gQ29ycG9y
YXRpb24gLSBmaXggZm9yIDM0MjU5OAorICogICAgSUJNIENvcnBvcmF0aW9uIC0gSmF2YSA4IHN1
cHBvcnQKICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwogCkBAIC0xMzUsNSArMTQwLDUgQEAKIAlw
cm90ZWN0ZWQgQW5ub3RhdGlvbkJpbmRpbmdbXSBnZXRBbm5vdGF0aW9uQmluZGluZ3MoKQogCXsK
LQkJcmV0dXJuIG51bGw7CisJCXJldHVybiAoKFR5cGVWYXJpYWJsZUJpbmRpbmcpX2JpbmRpbmcp
LmdldFR5cGVBbm5vdGF0aW9ucygpOwogCX0KIA==
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>236197</attachid>
            <date>2013-10-08 00:04:00 -0400</date>
            <delta_ts>2013-10-08 00:04:47 -0400</delta_ts>
            <desc>Latest patch</desc>
            <filename>Fix-for-bug-413613.patch</filename>
            <type>text/plain</type>
            <size>80984</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMAojUCBvcmcuZWNsaXBzZS5qZHQuY29tcGls
ZXIuYXB0LnRlc3RzCmRpZmYgLS1naXQgLmNsYXNzcGF0aCAuY2xhc3NwYXRoCmluZGV4IDYxOTA4
MmMuLjg4ZGFkNTMgMTAwNjQ0Ci0tLSAuY2xhc3NwYXRoCisrKyAuY2xhc3NwYXRoCkBAIC00LDUg
KzQsNSBAQAogCTxjbGFzc3BhdGhlbnRyeSBraW5kPSJzcmMiIG91dHB1dD0iYmlucHJvY2Vzc29y
cyIgcGF0aD0icHJvY2Vzc29ycyIvPgogCTxjbGFzc3BhdGhlbnRyeSBraW5kPSJjb24iIHBhdGg9
Im9yZy5lY2xpcHNlLnBkZS5jb3JlLnJlcXVpcmVkUGx1Z2lucyIvPgotCTxjbGFzc3BhdGhlbnRy
eSBraW5kPSJjb24iIHBhdGg9Im9yZy5lY2xpcHNlLmpkdC5sYXVuY2hpbmcuSlJFX0NPTlRBSU5F
Ui9vcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuZGVidWcudWkubGF1bmNoZXIuU3RhbmRhcmRWTVR5
cGUvSmF2YVNFLTEuNiIvPgorCTxjbGFzc3BhdGhlbnRyeSBraW5kPSJjb24iIHBhdGg9Im9yZy5l
Y2xpcHNlLmpkdC5sYXVuY2hpbmcuSlJFX0NPTlRBSU5FUi9vcmcuZWNsaXBzZS5qZHQuaW50ZXJu
YWwuZGVidWcudWkubGF1bmNoZXIuU3RhbmRhcmRWTVR5cGUvSmF2YVNFLTEuOCIvPgogCTxjbGFz
c3BhdGhlbnRyeSBraW5kPSJvdXRwdXQiIHBhdGg9ImJpbiIvPgogPC9jbGFzc3BhdGg+CmRpZmYg
LS1naXQgbGliL2FwdHRlc3Rwcm9jZXNzb3JzLmphciBsaWIvYXB0dGVzdHByb2Nlc3NvcnMuamFy
CmluZGV4IGVkOWJiY2YuLmM3N2MyZDMgMTAwNjQ0Ci0tLSBsaWIvYXB0dGVzdHByb2Nlc3NvcnMu
amFyCisrKyBsaWIvYXB0dGVzdHByb2Nlc3NvcnMuamFyCkJpbmFyeSBmaWxlcyBkaWZmZXIKZGlm
ZiAtLWdpdCBwcm9jZXNzb3JzL01FVEEtSU5GL3NlcnZpY2VzL2phdmF4LmFubm90YXRpb24ucHJv
Y2Vzc2luZy5Qcm9jZXNzb3IgcHJvY2Vzc29ycy9NRVRBLUlORi9zZXJ2aWNlcy9qYXZheC5hbm5v
dGF0aW9uLnByb2Nlc3NpbmcuUHJvY2Vzc29yCmluZGV4IDMyN2E4NjUuLmY3ZDAzMjAgMTAwNjQ0
Ci0tLSBwcm9jZXNzb3JzL01FVEEtSU5GL3NlcnZpY2VzL2phdmF4LmFubm90YXRpb24ucHJvY2Vz
c2luZy5Qcm9jZXNzb3IKKysrIHByb2Nlc3NvcnMvTUVUQS1JTkYvc2VydmljZXMvamF2YXguYW5u
b3RhdGlvbi5wcm9jZXNzaW5nLlByb2Nlc3NvcgpAQCAtMiw0ICsyLDUgQEAKIG9yZy5lY2xpcHNl
LmpkdC5jb21waWxlci5hcHQudGVzdHMucHJvY2Vzc29ycy5jaGVja2FyZ3MuQ2hlY2tBcmdzUHJv
Ywogb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLmFwdC50ZXN0cy5wcm9jZXNzb3JzLmVsZW1lbnRz
LkVsZW1lbnRQcm9jCitvcmcuZWNsaXBzZS5qZHQuY29tcGlsZXIuYXB0LnRlc3RzLnByb2Nlc3Nv
cnMuZWxlbWVudHMuSmF2YThFbGVtZW50UHJvY2Vzc29yCiBvcmcuZWNsaXBzZS5qZHQuY29tcGls
ZXIuYXB0LnRlc3RzLnByb2Nlc3NvcnMuZmlsZXIuRmlsZXJQcm9jCiBvcmcuZWNsaXBzZS5qZHQu
Y29tcGlsZXIuYXB0LnRlc3RzLnByb2Nlc3NvcnMubWVzc2FnZXIuTWVzc2FnZXJQcm9jCmRpZmYg
LS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29tcGlsZXIuYXB0LnRlc3RzL3Byb2Nlc3NvcnMvb3Jn
L2VjbGlwc2UvamR0L2NvbXBpbGVyL2FwdC90ZXN0cy9hbm5vdGF0aW9ucy9UeXBlJDEuamF2YSBi
L29yZy5lY2xpcHNlLmpkdC5jb21waWxlci5hcHQudGVzdHMvcHJvY2Vzc29ycy9vcmcvZWNsaXBz
ZS9qZHQvY29tcGlsZXIvYXB0L3Rlc3RzL2Fubm90YXRpb25zL1R5cGUkMS5qYXZhCm5ldyBmaWxl
IG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAuLjQ0YTc0M2IKLS0tIC9kZXYvbnVsbAorKysgYi9v
cmcuZWNsaXBzZS5qZHQuY29tcGlsZXIuYXB0LnRlc3RzL3Byb2Nlc3NvcnMvb3JnL2VjbGlwc2Uv
amR0L2NvbXBpbGVyL2FwdC90ZXN0cy9hbm5vdGF0aW9ucy9UeXBlJDEuamF2YQpAQCAtMCwwICsx
LDIyIEBACisvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgorICogQ29weXJpZ2h0IChjKSAyMDEzIElC
TSBDb3Jwb3JhdGlvbi4KKyAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQg
dGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKKyAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0
aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAorICogd2hpY2ggYWNj
b21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKKyAqIGh0dHA6
Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCisgKiAKKyAqIFRoaXMgaXMgYW4g
aW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQgc3BlY2lmaWNhdGlvbiBkZXZlbG9wZWQg
dW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0eSBQcm9jZXNzIChKQ1ApIGFuZCBpcyBtYWRlIGF2
YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiBwdXJwb3NlcworICogb25seS4gVGhl
IGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkgc3BlY2lmaWNhdGlvbiBvZiB0aGUgSkNQ
LgorICogCisgKiBDb250cmlidXRvcnM6CisgKiAgICAgSUJNIENvcnBvcmF0aW9uIC0gaW5pdGlh
bCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCisgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KK3BhY2th
Z2Ugb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLmFwdC50ZXN0cy5hbm5vdGF0aW9uczsKKworaW1w
b3J0IGphdmEubGFuZy5hbm5vdGF0aW9uLkVsZW1lbnRUeXBlOworaW1wb3J0IGphdmEubGFuZy5h
bm5vdGF0aW9uLlRhcmdldDsKKworQFRhcmdldChFbGVtZW50VHlwZS5UWVBFX1VTRSkKK3B1Ymxp
YyBAaW50ZXJmYWNlIFR5cGUkMSB7Cit9CmRpZmYgLS1naXQgcHJvY2Vzc29ycy9vcmcvZWNsaXBz
ZS9qZHQvY29tcGlsZXIvYXB0L3Rlc3RzL2Fubm90YXRpb25zL1R5cGUuamF2YSBwcm9jZXNzb3Jz
L29yZy9lY2xpcHNlL2pkdC9jb21waWxlci9hcHQvdGVzdHMvYW5ub3RhdGlvbnMvVHlwZS5qYXZh
Cm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAuLjhlNDAzODEKLS0tIC9kZXYvbnVs
bAorKysgcHJvY2Vzc29ycy9vcmcvZWNsaXBzZS9qZHQvY29tcGlsZXIvYXB0L3Rlc3RzL2Fubm90
YXRpb25zL1R5cGUuamF2YQpAQCAtMCwwICsxLDI2IEBACisvKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KgorICogQ29weXJpZ2h0IChjKSAyMDEzIElCTSBDb3Jwb3JhdGlvbi4KKyAqIEFsbCByaWdodHMg
cmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKKyAq
IGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGlj
IExpY2Vuc2UgdjEuMAorICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFu
ZCBpcyBhdmFpbGFibGUgYXQKKyAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYx
MC5odG1sCisgKiAKKyAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJh
ZnQgc3BlY2lmaWNhdGlvbiBkZXZlbG9wZWQgdW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0eSBQ
cm9jZXNzIChKQ1ApIGFuZCBpcyBtYWRlIGF2YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVh
dGlvbiBwdXJwb3NlcworICogb25seS4gVGhlIGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBh
bnkgc3BlY2lmaWNhdGlvbiBvZiB0aGUgSkNQLgorICogCisgKiBDb250cmlidXRvcnM6CisgKiAg
ICAgSUJNIENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCisgKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKi8KK3BhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLmFw
dC50ZXN0cy5hbm5vdGF0aW9uczsKKworaW1wb3J0IGphdmEubGFuZy5hbm5vdGF0aW9uLkVsZW1l
bnRUeXBlOworaW1wb3J0IGphdmEubGFuZy5hbm5vdGF0aW9uLlRhcmdldDsKKworQFRhcmdldChF
bGVtZW50VHlwZS5UWVBFX1VTRSkKK3B1YmxpYyBAaW50ZXJmYWNlIFR5cGUgeworCVN0cmluZyB2
YWx1ZSgpIGRlZmF1bHQgIiI7CisJQFRhcmdldChFbGVtZW50VHlwZS5UWVBFX1VTRSkKKwlAaW50
ZXJmYWNlIE9uZSB7CisJfQorfQpcIE5vIG5ld2xpbmUgYXQgZW5kIG9mIGZpbGUKZGlmZiAtLWdp
dCBwcm9jZXNzb3JzL29yZy9lY2xpcHNlL2pkdC9jb21waWxlci9hcHQvdGVzdHMvcHJvY2Vzc29y
cy9lbGVtZW50cy9KYXZhOEVsZW1lbnRQcm9jZXNzb3IuamF2YSBwcm9jZXNzb3JzL29yZy9lY2xp
cHNlL2pkdC9jb21waWxlci9hcHQvdGVzdHMvcHJvY2Vzc29ycy9lbGVtZW50cy9KYXZhOEVsZW1l
bnRQcm9jZXNzb3IuamF2YQpuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRleCAwMDAwMDAwLi4wZWZk
OTAyCi0tLSAvZGV2L251bGwKKysrIHByb2Nlc3NvcnMvb3JnL2VjbGlwc2UvamR0L2NvbXBpbGVy
L2FwdC90ZXN0cy9wcm9jZXNzb3JzL2VsZW1lbnRzL0phdmE4RWxlbWVudFByb2Nlc3Nvci5qYXZh
CkBAIC0wLDAgKzEsNjM5IEBACisvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgorICogQ29weXJpZ2h0
IChjKSAyMDEzIElCTSBDb3Jwb3JhdGlvbi4KKyAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMg
cHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKKyAqIGFyZSBtYWRlIGF2YWls
YWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAor
ICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUg
YXQKKyAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCisgKiAKKyAq
IFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQgc3BlY2lmaWNhdGlv
biBkZXZlbG9wZWQgdW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0eSBQcm9jZXNzIChKQ1ApIGFu
ZCBpcyBtYWRlIGF2YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiBwdXJwb3Nlcwor
ICogb25seS4gVGhlIGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkgc3BlY2lmaWNhdGlv
biBvZiB0aGUgSkNQLgorICogCisgKiBDb250cmlidXRvcnM6CisgKiAgICAgSUJNIENvcnBvcmF0
aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCisgKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKi8KKworcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuY29tcGlsZXIuYXB0LnRlc3RzLnByb2Nl
c3NvcnMuZWxlbWVudHM7CisKK2ltcG9ydCBqYXZhLmxhbmcuYW5ub3RhdGlvbi5Bbm5vdGF0aW9u
OworaW1wb3J0IGphdmEubGFuZy5yZWZsZWN0Lkludm9jYXRpb25UYXJnZXRFeGNlcHRpb247Citp
bXBvcnQgamF2YS5sYW5nLnJlZmxlY3QuTWV0aG9kOworaW1wb3J0IGphdmEudXRpbC5IYXNoU2V0
OworaW1wb3J0IGphdmEudXRpbC5MaXN0OworaW1wb3J0IGphdmEudXRpbC5NYXA7CitpbXBvcnQg
amF2YS51dGlsLlNldDsKKworaW1wb3J0IGphdmF4LmFubm90YXRpb24ucHJvY2Vzc2luZy5Sb3Vu
ZEVudmlyb25tZW50OworaW1wb3J0IGphdmF4LmFubm90YXRpb24ucHJvY2Vzc2luZy5TdXBwb3J0
ZWRBbm5vdGF0aW9uVHlwZXM7CitpbXBvcnQgamF2YXguYW5ub3RhdGlvbi5wcm9jZXNzaW5nLlN1
cHBvcnRlZFNvdXJjZVZlcnNpb247CitpbXBvcnQgamF2YXgubGFuZy5tb2RlbC5Bbm5vdGF0ZWRD
b25zdHJ1Y3Q7CitpbXBvcnQgamF2YXgubGFuZy5tb2RlbC5Tb3VyY2VWZXJzaW9uOworaW1wb3J0
IGphdmF4LmxhbmcubW9kZWwuZWxlbWVudC5Bbm5vdGF0aW9uTWlycm9yOworaW1wb3J0IGphdmF4
LmxhbmcubW9kZWwuZWxlbWVudC5Bbm5vdGF0aW9uVmFsdWU7CitpbXBvcnQgamF2YXgubGFuZy5t
b2RlbC5lbGVtZW50LkVsZW1lbnQ7CitpbXBvcnQgamF2YXgubGFuZy5tb2RlbC5lbGVtZW50LkV4
ZWN1dGFibGVFbGVtZW50OworaW1wb3J0IGphdmF4LmxhbmcubW9kZWwuZWxlbWVudC5UeXBlRWxl
bWVudDsKK2ltcG9ydCBqYXZheC5sYW5nLm1vZGVsLmVsZW1lbnQuVHlwZVBhcmFtZXRlckVsZW1l
bnQ7CitpbXBvcnQgamF2YXgubGFuZy5tb2RlbC5lbGVtZW50LlZhcmlhYmxlRWxlbWVudDsKK2lt
cG9ydCBqYXZheC5sYW5nLm1vZGVsLnR5cGUuQXJyYXlUeXBlOworaW1wb3J0IGphdmF4Lmxhbmcu
bW9kZWwudHlwZS5EZWNsYXJlZFR5cGU7CitpbXBvcnQgamF2YXgubGFuZy5tb2RlbC50eXBlLkV4
ZWN1dGFibGVUeXBlOworaW1wb3J0IGphdmF4LmxhbmcubW9kZWwudHlwZS5UeXBlS2luZDsKK2lt
cG9ydCBqYXZheC5sYW5nLm1vZGVsLnR5cGUuVHlwZU1pcnJvcjsKK2ltcG9ydCBqYXZheC5sYW5n
Lm1vZGVsLnV0aWwuRWxlbWVudEZpbHRlcjsKKworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb21w
aWxlci5hcHQudGVzdHMuYW5ub3RhdGlvbnMuVHlwZTsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
Y29tcGlsZXIuYXB0LnRlc3RzLmFubm90YXRpb25zLlR5cGUkMTsKK2ltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuY29tcGlsZXIuYXB0LnRlc3RzLnByb2Nlc3NvcnMuYmFzZS5CYXNlUHJvY2Vzc29yOwor
CisvKioKKyAqIEEgcHJvY2Vzc29yIHRoYXQgZXhwbG9yZXMgdGhlIGphdmEgOCBzcGVjaWZpYyBl
bGVtZW50cyBhbmQgdmFsaWRhdGVzIHRoZSBsYW1iZGEgYW5kIAorICogdHlwZSBhbm5vdGF0ZWQg
ZWxlbWVudHMuIFRvIGVuYWJsZSB0aGlzIHByb2Nlc3NvciwgYWRkIAorICogLUFvcmcuZWNsaXBz
ZS5qZHQuY29tcGlsZXIuYXB0LnRlc3RzLnByb2Nlc3NvcnMuZWxlbWVudHMuSmF2YThFbGVtZW50
UHJvY2Vzc29yIHRvIHRoZSBjb21tYW5kIGxpbmUuCisgKiBAc2luY2UgMy45IEJFVEFfSkFWQTgK
KyAqLworQFN1cHBvcnRlZEFubm90YXRpb25UeXBlcyh7Im9yZy5lY2xpcHNlLmpkdC5jb21waWxl
ci5hcHQudGVzdHMuYW5ub3RhdGlvbnMuVHlwZSIsICJvcmcuZWNsaXBzZS5qZHQuY29tcGlsZXIu
YXB0LnRlc3RzLmFubm90YXRpb25zLlR5cGUkMSJ9KQorQFN1cHBvcnRlZFNvdXJjZVZlcnNpb24o
U291cmNlVmVyc2lvbi5SRUxFQVNFXzgpCitwdWJsaWMgY2xhc3MgSmF2YThFbGVtZW50UHJvY2Vz
c29yIGV4dGVuZHMgQmFzZVByb2Nlc3NvciB7CisJCisJCXByaXZhdGUgc3RhdGljIGZpbmFsIFN0
cmluZ1tdIEVMRU1FTlRfTkFNRVMgPSBuZXcgU3RyaW5nW10geworCQkJInRhcmdldHMubW9kZWw4
LlgiLCAiVCIsICJVIiwgIksiLCAiViJ9OworCQorCVJvdW5kRW52aXJvbm1lbnQgcm91bmRFbnYg
PSBudWxsOworCS8vIEFsd2F5cyByZXR1cm4gZmFsc2UgZnJvbSB0aGlzIHByb2Nlc3NvciwgYmVj
YXVzZSBpdCBzdXBwb3J0cyAiKiIuCisJLy8gVGhlIHJldHVybiB2YWx1ZSBkb2VzIG5vdCBzaWdu
aWZ5IHN1Y2Nlc3Mgb3IgZmFpbHVyZSEKKwlAT3ZlcnJpZGUKKwlwdWJsaWMgYm9vbGVhbiBwcm9j
ZXNzKFNldDw/IGV4dGVuZHMgVHlwZUVsZW1lbnQ+IGFubm90YXRpb25zLCBSb3VuZEVudmlyb25t
ZW50IHJvdW5kRW52KSB7CisJCWlmIChyb3VuZEVudi5wcm9jZXNzaW5nT3ZlcigpKSB7CisJCQly
ZXR1cm4gZmFsc2U7CisJCX0KKwkJCisJCXRoaXMucm91bmRFbnYgPSByb3VuZEVudjsKKworCQlN
YXA8U3RyaW5nLCBTdHJpbmc+IG9wdGlvbnMgPSBwcm9jZXNzaW5nRW52LmdldE9wdGlvbnMoKTsK
KwkJaWYgKCFvcHRpb25zLmNvbnRhaW5zS2V5KHRoaXMuZ2V0Q2xhc3MoKS5nZXROYW1lKCkpKSB7
CisJCQkvLyBEaXNhYmxlIHRoaXMgcHJvY2Vzc29yIHVubGVzcyB3ZSBhcmUgaW50ZW50aW9uYWxs
eSBwZXJmb3JtaW5nIHRoZSB0ZXN0LgorCQkJcmV0dXJuIGZhbHNlOworCQl9IGVsc2UgeworCQkJ
dHJ5IHsKKwkJCQlpZiAoIWludm9rZVRlc3RNZXRob2RzKG9wdGlvbnMpKSB7CisJCQkJCXRlc3RB
bGwoKTsKKwkJCQl9CisJCQkJc3VwZXIucmVwb3J0U3VjY2VzcygpOworCQkJfSBjYXRjaCAoQXNz
ZXJ0aW9uRmFpbGVkRXJyb3IgZSkgeworCQkJCXN1cGVyLnJlcG9ydEVycm9yKGdldEV4Y2VwdGlv
blN0YWNrVHJhY2UoZSkpOworCQkJfSBjYXRjaCAoVGhyb3dhYmxlIGUpIHsKKwkJCQllLnByaW50
U3RhY2tUcmFjZSgpOworCQkJfQorCQl9CisJCXJldHVybiBmYWxzZTsKKwl9CisJcHVibGljIGJv
b2xlYW4gaW52b2tlVGVzdE1ldGhvZHMoTWFwPFN0cmluZywgU3RyaW5nPiBvcHRpb25zKSB0aHJv
d3MgVGhyb3dhYmxlIHsKKwkJTWV0aG9kIHRlc3RNZXRob2QgPSBudWxsOworCQlTZXQ8U3RyaW5n
PiBrZXlzID0gb3B0aW9ucy5rZXlTZXQoKTsKKwkJYm9vbGVhbiB0ZXN0c0ZvdW5kID0gZmFsc2U7
CisJCWZvciAoU3RyaW5nIG9wdGlvbiA6IGtleXMpIHsKKwkJCWlmIChvcHRpb24uc3RhcnRzV2l0
aCgidGVzdCIpKSB7CisJCQkJdHJ5IHsKKwkJCQkJdGVzdE1ldGhvZCA9IHRoaXMuZ2V0Q2xhc3Mo
KS5nZXREZWNsYXJlZE1ldGhvZChvcHRpb24sIG5ldyBDbGFzc1swXSk7CisJCQkJCWlmICh0ZXN0
TWV0aG9kICE9IG51bGwpIHsKKwkJCQkJCXRlc3RzRm91bmQgPSB0cnVlOworCQkJCQkJdGVzdE1l
dGhvZC5pbnZva2UodGhpcywgIG5ldyBPYmplY3RbMF0pOworCQkJCQl9CisJCQkJfSBjYXRjaCAo
SW52b2NhdGlvblRhcmdldEV4Y2VwdGlvbiBlKSB7CisJCQkJCXRocm93IGUuZ2V0Q2F1c2UoKTsK
KwkJCQl9IGNhdGNoIChFeGNlcHRpb24gZSkgeworCQkJCQlzdXBlci5yZXBvcnRFcnJvcihnZXRF
eGNlcHRpb25TdGFja1RyYWNlKGUpKTsKKwkJCQl9CisJCQl9CisJCX0KKwkJcmV0dXJuIHRlc3Rz
Rm91bmQ7CisJfQorCXB1YmxpYyB2b2lkIHRlc3RBbGwoKSB0aHJvd3MgQXNzZXJ0aW9uRmFpbGVk
RXJyb3IgeworCQl0ZXN0U0U4U3BlY2lmaWNzKCk7CisJCXRlc3RMYW1iZGFTcGVjaWZpY3MoKTsK
KwkJdGVzdFR5cGVBbm5vdGF0aW9ucygpOworCQl0ZXN0VHlwZUFubm90YXRpb25zMSgpOworCQl0
ZXN0VHlwZUFubm90YXRpb25zMigpOworCQl0ZXN0VHlwZUFubm90YXRpb25zMygpOworCQl0ZXN0
VHlwZUFubm90YXRpb25zNCgpOworCQl0ZXN0VHlwZUFubm90YXRpb25zNSgpOworCQl0ZXN0VHlw
ZUFubm90YXRpb25zNigpOworCQl0ZXN0VHlwZUFubm90YXRpb25zNygpOworCQl0ZXN0VHlwZUFu
bm90YXRpb25zOCgpOworCQl0ZXN0VHlwZUFubm90YXRpb25zOSgpOworCQl0ZXN0VHlwZUFubm90
YXRpb25zMTAoKTsKKwkJdGVzdFR5cGVBbm5vdGF0aW9uczExKCk7CisJfQorCQorCXB1YmxpYyB2
b2lkIHRlc3RMYW1iZGFTcGVjaWZpY3MoKSB7CisJCVR5cGVFbGVtZW50IGFubm90YXRlZFR5cGUg
PSBfZWxlbWVudFV0aWxzLmdldFR5cGVFbGVtZW50KCJ0YXJnZXRzLm1vZGVsOC5MYW1iZGFUZXN0
Iik7CisJCWFzc2VydE5vdE51bGwoIkphdmE4RWxlbWVudFByb2Nlc3NvciNleGFtaW5lTGFtYmRh
U3BlY2lmaWNzOiBUeXBlIGVsZW1lbnQgZm9yIExhbWJkYVRlc3Qgc2hvdWxkIG5vdCBiZSBudWxs
IiwgYW5ub3RhdGVkVHlwZSk7CisJCWFzc2VydEZhbHNlKCJKYXZhOEVsZW1lbnRQcm9jZXNzb3Ij
ZXhhbWluZUxhbWJkYVNwZWNpZmljczogVHlwZSBMYW1iZGFUZXN0IGlzIG5vdCBhIGZ1bmN0aW9u
YWwgaW50ZXJmYWNlIiwgX2VsZW1lbnRVdGlscy5pc0Z1bmN0aW9uYWxJbnRlcmZhY2UoYW5ub3Rh
dGVkVHlwZSkpOworCQlMaXN0PD8gZXh0ZW5kcyBFbGVtZW50PiBtZW1iZXJzID0gX2VsZW1lbnRV
dGlscy5nZXRBbGxNZW1iZXJzKGFubm90YXRlZFR5cGUpOworCQlFeGVjdXRhYmxlRWxlbWVudCBt
ZXRob2QgPSBudWxsOworCQlmb3IgKEV4ZWN1dGFibGVFbGVtZW50IG1lbWJlciA6IEVsZW1lbnRG
aWx0ZXIubWV0aG9kc0luKG1lbWJlcnMpKSB7CisJCQlpZiAoImZvbyIuZXF1YWxzKG1lbWJlci5n
ZXRTaW1wbGVOYW1lKCkudG9TdHJpbmcoKSkpIHsKKwkJCQltZXRob2QgPSBtZW1iZXI7CisJCQkJ
YnJlYWs7CisJCQl9CisJCX0KKwkJYXNzZXJ0Tm90TnVsbCgiSmF2YThFbGVtZW50UHJvY2Vzc29y
I2V4YW1pbmVMYW1iZGFTcGVjaWZpY3M6IEVsZW1lbnQgZm9yIG1ldGhvZCBmb28gc2hvdWxkIG5v
dCBiZSBudWxsIiwgbWV0aG9kKTsKKwkJYXNzZXJ0RmFsc2UoIkphdmE4RWxlbWVudFByb2Nlc3Nv
ciNleGFtaW5lTGFtYmRhU3BlY2lmaWNzOiBNZXRob2QgZm9vIGlzIG5vdCBhIGRlZmF1bHQgbWV0
aG9kIiwgbWV0aG9kLmlzRGVmYXVsdCgpKTsKKworCQlhbm5vdGF0ZWRUeXBlID0gX2VsZW1lbnRV
dGlscy5nZXRUeXBlRWxlbWVudCgidGFyZ2V0cy5tb2RlbDguRGVmYXVsdEludGVyZmFjZSIpOwor
CQlhc3NlcnROb3ROdWxsKCJKYXZhOEVsZW1lbnRQcm9jZXNzb3IjZXhhbWluZUxhbWJkYVNwZWNp
ZmljczogVHlwZSBlbGVtZW50IGZvciBEZWZhdWx0SW50ZXJmYWNlIHNob3VsZCBub3QgYmUgbnVs
bCIsIGFubm90YXRlZFR5cGUpOworCQlhc3NlcnRGYWxzZSgiSmF2YThFbGVtZW50UHJvY2Vzc29y
I2V4YW1pbmVMYW1iZGFTcGVjaWZpY3M6IFR5cGUgRGVmYXVsdEludGVyZmFjZSBpcyBub3QgYSBm
dW5jdGlvbmFsIGludGVyZmFjZSIsIF9lbGVtZW50VXRpbHMuaXNGdW5jdGlvbmFsSW50ZXJmYWNl
KGFubm90YXRlZFR5cGUpKTsKKworCQltZXRob2QgPSBudWxsOworCQltZW1iZXJzID0gX2VsZW1l
bnRVdGlscy5nZXRBbGxNZW1iZXJzKGFubm90YXRlZFR5cGUpOworCQlmb3IgKEV4ZWN1dGFibGVF
bGVtZW50IG1lbWJlciA6IEVsZW1lbnRGaWx0ZXIubWV0aG9kc0luKG1lbWJlcnMpKSB7CisJCQlp
ZiAoImRlZmF1bHRNZXRob2QiLmVxdWFscyhtZW1iZXIuZ2V0U2ltcGxlTmFtZSgpLnRvU3RyaW5n
KCkpKSB7CisJCQkJbWV0aG9kID0gbWVtYmVyOworCQkJCWJyZWFrOworCQkJfQorCQl9CisJCWFz
c2VydE5vdE51bGwoIkphdmE4RWxlbWVudFByb2Nlc3NvciNleGFtaW5lTGFtYmRhU3BlY2lmaWNz
OiBFbGVtZW50IGZvciBtZXRob2QgZGVmYXVsdE1ldGhvZCgpIHNob3VsZCBub3QgYmUgbnVsbCIs
IG1ldGhvZCk7CisJCWFzc2VydFRydWUoIkphdmE4RWxlbWVudFByb2Nlc3NvciNleGFtaW5lTGFt
YmRhU3BlY2lmaWNzOiBNZXRob2QgZGVmYXVsdE1ldGhvZCgpIHNob3VsZCBiZSBhIGRlZmF1bHQg
bWV0aG9kIiwgbWV0aG9kLmlzRGVmYXVsdCgpKTsKKworCQltZXRob2QgPSBudWxsOworCQlmb3Ig
KEV4ZWN1dGFibGVFbGVtZW50IG1lbWJlciA6IEVsZW1lbnRGaWx0ZXIubWV0aG9kc0luKG1lbWJl
cnMpKSB7CisJCQlpZiAoInN0YXRpY01ldGhvZCIuZXF1YWxzKG1lbWJlci5nZXRTaW1wbGVOYW1l
KCkudG9TdHJpbmcoKSkpIHsKKwkJCQltZXRob2QgPSBtZW1iZXI7CisJCQkJYnJlYWs7CisJCQl9
CisJCX0KKwkJYXNzZXJ0Tm90TnVsbCgiSmF2YThFbGVtZW50UHJvY2Vzc29yI2V4YW1pbmVMYW1i
ZGFTcGVjaWZpY3M6IEVsZW1lbnQgZm9yIG1ldGhvZCBzdGF0aWNNZXRob2QoKSBzaG91bGQgbm90
IGJlIG51bGwiLCBtZXRob2QpOworCQlhc3NlcnRGYWxzZSgiSmF2YThFbGVtZW50UHJvY2Vzc29y
I2V4YW1pbmVMYW1iZGFTcGVjaWZpY3M6IE1ldGhvZCBzdGF0aWNNZXRob2QoKSBzaG91bGUgbm90
IGJlIGEgZGVmYXVsdCBtZXRob2QiLCBtZXRob2QuaXNEZWZhdWx0KCkpOworCisJCWFubm90YXRl
ZFR5cGUgPSBfZWxlbWVudFV0aWxzLmdldFR5cGVFbGVtZW50KCJ0YXJnZXRzLm1vZGVsOC5GdW5j
dGlvbmFsSW50ZXJmYWNlIik7CisJCWFzc2VydE5vdE51bGwoIkphdmE4RWxlbWVudFByb2Nlc3Nv
ciNleGFtaW5lTGFtYmRhU3BlY2lmaWNzOiBUeXBlIGVsZW1lbnQgZm9yIEZ1bmN0aW9uYWxJbnRl
cmZhY2Ugc2hvdWxkIG5vdCBiZSBudWxsIiwgYW5ub3RhdGVkVHlwZSk7CisJCWFzc2VydFRydWUo
IkphdmE4RWxlbWVudFByb2Nlc3NvciNleGFtaW5lTGFtYmRhU3BlY2lmaWNzOiBUeXBlIEZ1bmN0
aW9uYWxJbnRlcmZhY2Ugc2hvdWxkIGJlIGEgZnVuY3Rpb25hbCBpbnRlcmZhY2UiLCBfZWxlbWVu
dFV0aWxzLmlzRnVuY3Rpb25hbEludGVyZmFjZShhbm5vdGF0ZWRUeXBlKSk7CisKKwkJbWV0aG9k
ID0gbnVsbDsKKwkJbWVtYmVycyA9IF9lbGVtZW50VXRpbHMuZ2V0QWxsTWVtYmVycyhhbm5vdGF0
ZWRUeXBlKTsKKwkJZm9yIChFeGVjdXRhYmxlRWxlbWVudCBtZW1iZXIgOiBFbGVtZW50RmlsdGVy
Lm1ldGhvZHNJbihtZW1iZXJzKSkgeworCQkJaWYgKCJhYnN0cmFjdE1ldGhvZCIuZXF1YWxzKG1l
bWJlci5nZXRTaW1wbGVOYW1lKCkudG9TdHJpbmcoKSkpIHsKKwkJCQltZXRob2QgPSBtZW1iZXI7
CisJCQkJYnJlYWs7CisJCQl9CisJCX0KKwkJYXNzZXJ0Tm90TnVsbCgiSmF2YThFbGVtZW50UHJv
Y2Vzc29yI2V4YW1pbmVMYW1iZGFTcGVjaWZpY3M6IEVsZW1lbnQgZm9yIG1ldGhvZCBhYnN0cmFj
dE1ldGhvZCgpIHNob3VsZCBub3QgYmUgbnVsbCIsIG1ldGhvZCk7CisJCWFzc2VydEZhbHNlKCJK
YXZhOEVsZW1lbnRQcm9jZXNzb3IjZXhhbWluZUxhbWJkYVNwZWNpZmljczogTWV0aG9kIGFic3Ry
YWN0TWV0aG9kKCkgc2hvdWxkIG5vdCBiZSBhIGRlZmF1bHQgbWV0aG9kIiwgbWV0aG9kLmlzRGVm
YXVsdCgpKTsKKwl9CisKKwlwdWJsaWMgdm9pZCB0ZXN0U0U4U3BlY2lmaWNzKCkgeworCQlUeXBl
RWxlbWVudCBhbm5vdGF0ZWRUeXBlID0gX2VsZW1lbnRVdGlscy5nZXRUeXBlRWxlbWVudCgidGFy
Z2V0cy5tb2RlbDguWCIpOworCQlleGFtaW5lU0U4QW5ub3RhdGlvbk1ldGhvZHMoIkphdmE4RWxl
bWVudFByb2Nlc3NvciNleGFtaW5lU0U4U3BlY2lmaWNzOiAiLCBhbm5vdGF0ZWRUeXBlLCAiYyIp
OworCisJCUxpc3Q8PyBleHRlbmRzIEVsZW1lbnQ+IG1lbWJlcnMgPSBfZWxlbWVudFV0aWxzLmdl
dEFsbE1lbWJlcnMoYW5ub3RhdGVkVHlwZSk7CisJCUV4ZWN1dGFibGVFbGVtZW50IG1ldGhvZCA9
IG51bGw7CisJCVZhcmlhYmxlRWxlbWVudCBmaWVsZCA9IG51bGwsIGZpZWxkMSA9IG51bGw7CisJ
CUV4ZWN1dGFibGVFbGVtZW50IG1ldGhvZDIgPSBudWxsOworCQlmb3IgKEVsZW1lbnQgbWVtYmVy
IDogbWVtYmVycykgeworCQkJaWYgKCJmb28iLmVxdWFscyhtZW1iZXIuZ2V0U2ltcGxlTmFtZSgp
LnRvU3RyaW5nKCkpKSB7CisJCQkJbWV0aG9kID0gKEV4ZWN1dGFibGVFbGVtZW50KSBtZW1iZXI7
CisJCQl9IGVsc2UgaWYgKCJfZmllbGQiLmVxdWFscyhtZW1iZXIuZ2V0U2ltcGxlTmFtZSgpLnRv
U3RyaW5nKCkpKSB7CisJCQkJZmllbGQgPSAoVmFyaWFibGVFbGVtZW50KSBtZW1iZXI7CisJCQl9
IGVsc2UgaWYgKCJub0Fubm90YXRpb25IZXJlIi5lcXVhbHMobWVtYmVyLmdldFNpbXBsZU5hbWUo
KS50b1N0cmluZygpKSkgeworCQkJCW1ldGhvZDIgPSAoRXhlY3V0YWJsZUVsZW1lbnQpIG1lbWJl
cjsKKwkJCX0gZWxzZSBpZiAoIl9maWVsZDEiLmVxdWFscyhtZW1iZXIuZ2V0U2ltcGxlTmFtZSgp
LnRvU3RyaW5nKCkpKSB7CisJCQkJZmllbGQxID0gKFZhcmlhYmxlRWxlbWVudCkgbWVtYmVyOwor
CQkJfQorCQl9CisJCWFzc2VydE5vdE51bGwoIk1ldGhvZCBzaG91bGQgbm90IGJlIG51bGwiLCBt
ZXRob2QpOworCQlUeXBlTWlycm9yIHR5cGVNaXJyb3IgPSBtZXRob2QuZ2V0UmV0dXJuVHlwZSgp
OworCQlhc3NlcnROb3ROdWxsKCJKYXZhOEVsZW1lbnRQcm9jZXNzb3IjZXhhbWluZVNFOFNwZWNp
ZmljczogRWxlbWVudCBmb3IgbWV0aG9kIGZvbyBzaG91bGQgbm90IGJlIG51bGwiLCB0eXBlTWly
cm9yKTsKKwkJZXhhbWluZVNFOEFubm90YXRpb25NZXRob2RzKCJKYXZhOEVsZW1lbnRQcm9jZXNz
b3IjZXhhbWluZVNFOFNwZWNpZmljczogIiwgdHlwZU1pcnJvciwgIm0iKTsKKwkJTGlzdDw/IGV4
dGVuZHMgQW5ub3RhdGlvbk1pcnJvcj4gbGlzdCA9IHR5cGVNaXJyb3IuZ2V0QW5ub3RhdGlvbk1p
cnJvcnMoKTsKKwkJYXNzZXJ0RXF1YWxzKCJKYXZhOEVsZW1lbnRQcm9jZXNzb3IjZXhhbWluZVNF
OFNwZWNpZmljczogSW5jb3JyZWN0IG5vIG9mIGFubm90YXRpb24gbWlycm9ycyIsIDEsIGxpc3Qu
c2l6ZSgpKTsKKwkJYXNzZXJ0Tm90TnVsbCgiSmF2YThFbGVtZW50UHJvY2Vzc29yI2V4YW1pbmVT
RThTcGVjaWZpY3M6IEVsZW1lbnQgZm9yIGZpZWxkIF9maWVsZCBzaG91bGQgbm90IGJlIG51bGwi
LCBmaWVsZCk7CisJCXR5cGVNaXJyb3IgPSBmaWVsZC5hc1R5cGUoKTsgCisJCWV4YW1pbmVTRThB
bm5vdGF0aW9uTWV0aG9kcygiSmF2YThFbGVtZW50UHJvY2Vzc29yI2V4YW1pbmVTRThTcGVjaWZp
Y3M6ICIsIHR5cGVNaXJyb3IsICJmIik7CisJCQorCQl0eXBlTWlycm9yID0gZmllbGQxLmFzVHlw
ZSgpOworCQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZU1pcnJvciwgbmV3IFN0cmluZ1tdeyJA
VHlwZSh2YWx1ZT1mMSkifSk7CisJCQorCQl0eXBlTWlycm9yID0gbWV0aG9kMi5nZXRSZXR1cm5U
eXBlKCk7CisJCWFzc2VydE5vdE51bGwoIkphdmE4RWxlbWVudFByb2Nlc3NvciNleGFtaW5lU0U4
U3BlY2lmaWNzOiBFbGVtZW50IGZvciBtZXRob2Qgbm9Bbm5vdGF0aW9uSGVyZSBzaG91bGQgbm90
IGJlIG51bGwiLCB0eXBlTWlycm9yKTsKKwkJVHlwZSBhbm5vdCA9IHR5cGVNaXJyb3IuZ2V0QW5u
b3RhdGlvbihUeXBlLmNsYXNzKTsKKwkJYXNzZXJ0TnVsbCgiQW5ub3RhdGlvbiBzaG91bGQgbm90
IGJlIHByZXNlbnQiLCBhbm5vdCk7CisJCUFubm90YXRpb25bXSBhbm5vdHMgPSB0eXBlTWlycm9y
LmdldEFubm90YXRpb25zQnlUeXBlKFR5cGUuY2xhc3MpOworCQlhc3NlcnRFcXVhbHMoIkFubm90
YXRpb24gaXMgbm90IGVtcHR5IGxpc3QiLCAwLCBhbm5vdHMubGVuZ3RoKTsKKwl9CisJCisJcHVi
bGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9ucygpIHsKKwkJVHlwZUVsZW1lbnQgYW5ub3RhdGVk
VHlwZSA9IF9lbGVtZW50VXRpbHMuZ2V0VHlwZUVsZW1lbnQoInRhcmdldHMubW9kZWw4LlgiKTsK
KwkJVHlwZU1pcnJvciBzdXBlclR5cGUgPSBhbm5vdGF0ZWRUeXBlLmdldFN1cGVyY2xhc3MoKTsK
KwkJYXNzZXJ0Tm90TnVsbCgiSmF2YThFbGVtZW50UHJvY2Vzc29yI2V4YW1pbmVTRThTcGVjaWZp
Y3M6IHN1cGVyIHR5cGUgbm90IGJlIG51bGwiLCBzdXBlclR5cGUpOworCQl2ZXJpZnlUeXBlQW5u
b3RhdGlvbnMoc3VwZXJUeXBlLCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPXMpIn0pOworCisJ
CUxpc3Q8PyBleHRlbmRzIFR5cGVNaXJyb3I+IGludGVyZmFjZXMgID0gYW5ub3RhdGVkVHlwZS5n
ZXRJbnRlcmZhY2VzKCk7CisJCWFzc2VydE5vdE51bGwoIkphdmE4RWxlbWVudFByb2Nlc3NvciNl
eGFtaW5lU0U4U3BlY2lmaWNzOiBzdXBlciBpbnRlcmZhY2VzIGxpc3Qgc2hvdWxkIG5vdCBiZSBu
dWxsIiwgaW50ZXJmYWNlcyk7CisJCWFzc2VydEVxdWFscygiSmF2YThFbGVtZW50UHJvY2Vzc29y
I2V4YW1pbmVTRThTcGVjaWZpY3M6IGluY29ycmVjdCBubyBvZiBzdXBlciBpbnRlcmZhY2VzIiwg
MiwgaW50ZXJmYWNlcy5zaXplKCkpOworCQlzdXBlclR5cGUgPSBpbnRlcmZhY2VzLmdldCgwKTsK
KwkJdmVyaWZ5VHlwZUFubm90YXRpb25zKHN1cGVyVHlwZSwgbmV3IFN0cmluZ1tdeyJAVHlwZSh2
YWx1ZT1pMSkifSk7CisJCXN1cGVyVHlwZSA9IGludGVyZmFjZXMuZ2V0KDEpOworCQl2ZXJpZnlU
eXBlQW5ub3RhdGlvbnMoc3VwZXJUeXBlLCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPWkyKSJ9
KTsKKwl9CisJCisJcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczEoKSB7CisJCVR5cGVF
bGVtZW50IGFubm90YXRlZFR5cGUgPSBfZWxlbWVudFV0aWxzLmdldFR5cGVFbGVtZW50KCJ0YXJn
ZXRzLm1vZGVsOC5YIik7CisJCUxpc3Q8PyBleHRlbmRzIEVsZW1lbnQ+IG1lbWJlcnMgPSBfZWxl
bWVudFV0aWxzLmdldEFsbE1lbWJlcnMoYW5ub3RhdGVkVHlwZSk7CisJCUV4ZWN1dGFibGVFbGVt
ZW50IG1ldGhvZCA9IG51bGw7CisJCWZvciAoRWxlbWVudCBtZW1iZXIgOiBtZW1iZXJzKSB7CisJ
CQlpZiAoImJhciIuZXF1YWxzKG1lbWJlci5nZXRTaW1wbGVOYW1lKCkudG9TdHJpbmcoKSkpIHsK
KwkJCQltZXRob2QgPSAoRXhlY3V0YWJsZUVsZW1lbnQpIG1lbWJlcjsKKwkJCX0KKwkJfQorCQlM
aXN0PD8gZXh0ZW5kcyBWYXJpYWJsZUVsZW1lbnQ+IHBhcmFtcyA9IG1ldGhvZC5nZXRQYXJhbWV0
ZXJzKCk7CisJCWFzc2VydEVxdWFscygiSW5jb3JyZWN0IG5vIG9mIHBhcmFtcyBmb3IgbWV0aG9k
IGJhcigpIiwgMiwgcGFyYW1zLnNpemUoKSk7CisJCVZhcmlhYmxlRWxlbWVudCBwYXJhbSA9IChW
YXJpYWJsZUVsZW1lbnQpIHBhcmFtcy5nZXQoMCk7CisJCVR5cGVNaXJyb3IgdHlwZU1pcnJvciA9
IHBhcmFtLmFzVHlwZSgpOworCQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZU1pcnJvciwgbmV3
IFN0cmluZ1tdeyJAVHlwZSh2YWx1ZT1wMSkifSk7CisJCXBhcmFtID0gKFZhcmlhYmxlRWxlbWVu
dCkgcGFyYW1zLmdldCgxKTsKKwkJdHlwZU1pcnJvciA9IHBhcmFtLmFzVHlwZSgpOworCQl2ZXJp
ZnlUeXBlQW5ub3RhdGlvbnModHlwZU1pcnJvciwgbmV3IFN0cmluZ1tdeyJAVHlwZSh2YWx1ZT1w
MikifSk7CisJfQorCQorCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnMyKCkgeworCQlU
eXBlRWxlbWVudCBhbm5vdGF0ZWRUeXBlID0gX2VsZW1lbnRVdGlscy5nZXRUeXBlRWxlbWVudCgi
dGFyZ2V0cy5tb2RlbDguWSIpOworCQlMaXN0PD8gZXh0ZW5kcyBFbGVtZW50PiBtZW1iZXJzID0g
X2VsZW1lbnRVdGlscy5nZXRBbGxNZW1iZXJzKGFubm90YXRlZFR5cGUpOworCQlWYXJpYWJsZUVs
ZW1lbnQgZmllbGQyID0gbnVsbDsKKwkJVmFyaWFibGVFbGVtZW50IGZpZWxkMyA9IG51bGw7CisJ
CWZvciAoRWxlbWVudCBtZW1iZXIgOiBtZW1iZXJzKSB7CisJCQlpZiAoIl9maWVsZDIiLmVxdWFs
cyhtZW1iZXIuZ2V0U2ltcGxlTmFtZSgpLnRvU3RyaW5nKCkpKSB7CisJCQkJZmllbGQyID0gKFZh
cmlhYmxlRWxlbWVudCkgbWVtYmVyOworCQkJfSBlbHNlIGlmICgiX2ZpZWxkMyIuZXF1YWxzKG1l
bWJlci5nZXRTaW1wbGVOYW1lKCkudG9TdHJpbmcoKSkpIHsKKwkJCQlmaWVsZDMgPSAoVmFyaWFi
bGVFbGVtZW50KSBtZW1iZXI7CisJCQl9CisJCX0KKwkJCisJCS8vQFR5cGUoImYiKSBTdHJpbmcg
QFR5cGUoImYxIikgW10gQFR5cGUoImYyIikgW10gX2ZpZWxkMiBAVHlwZSgiZjMiKSBbXSwgX2Zp
ZWxkMyBAVHlwZSgiZjQiKSBbXVtdID0gbnVsbDsKKwkJYXNzZXJ0Tm90TnVsbCgiSmF2YThFbGVt
ZW50UHJvY2Vzc29yI2V4YW1pbmVTRThTcGVjaWZpY3M6IEVsZW1lbnQgZm9yIGZpZWxkIF9maWVs
ZDIgc2hvdWxkIG5vdCBiZSBudWxsIiwgZmllbGQyKTsKKwkJVHlwZU1pcnJvciB0eXBlTWlycm9y
ID0gZmllbGQyLmFzVHlwZSgpOworCQlhc3NlcnRFcXVhbHMoIlNob3VsZCBiZSBhbiBhcnJheSB0
eXBlIiwgVHlwZUtpbmQuQVJSQVksIHR5cGVNaXJyb3IuZ2V0S2luZCgpKTsKKwkJdmVyaWZ5VHlw
ZUFubm90YXRpb25zKHR5cGVNaXJyb3IsIG5ldyBTdHJpbmdbXXsiQFR5cGUodmFsdWU9ZjMpIn0p
OworCQl0eXBlTWlycm9yID0gKChBcnJheVR5cGUpIHR5cGVNaXJyb3IpLmdldENvbXBvbmVudFR5
cGUoKTsKKwkJYXNzZXJ0RXF1YWxzKCJTaG91bGQgYmUgYW4gYXJyYXkgdHlwZSIsIFR5cGVLaW5k
LkFSUkFZLCB0eXBlTWlycm9yLmdldEtpbmQoKSk7CisJCXZlcmlmeVR5cGVBbm5vdGF0aW9ucyh0
eXBlTWlycm9yLCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPWYxKSJ9KTsKKwkJdHlwZU1pcnJv
ciA9ICgoQXJyYXlUeXBlKSB0eXBlTWlycm9yKS5nZXRDb21wb25lbnRUeXBlKCk7CisJCWFzc2Vy
dEVxdWFscygiU2hvdWxkIGJlIGFuIGFycmF5IHR5cGUiLCBUeXBlS2luZC5BUlJBWSwgdHlwZU1p
cnJvci5nZXRLaW5kKCkpOworCQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZU1pcnJvciwgbmV3
IFN0cmluZ1tdeyJAVHlwZSh2YWx1ZT1mMikifSk7CisKKwkJYXNzZXJ0Tm90TnVsbCgiSmF2YThF
bGVtZW50UHJvY2Vzc29yI2V4YW1pbmVTRThTcGVjaWZpY3M6IEVsZW1lbnQgZm9yIGZpZWxkIF9m
aWVsZDMgc2hvdWxkIG5vdCBiZSBudWxsIiwgZmllbGQzKTsKKwkJdHlwZU1pcnJvciA9IGZpZWxk
My5hc1R5cGUoKTsKKwkJLy8gVGhlIHNlY29uZCBmaWVsZCBiaW5kaW5nIGRvZXNuJ3Qgc2VlbSB0
byBoYXZlIHRoZSBhbm5vdGF0aW9ucy4gVG8gYmUgaW52ZXN0aWdhdGVkCisJCXZlcmlmeVR5cGVB
bm5vdGF0aW9ucyh0eXBlTWlycm9yLCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPWY0KSJ9KTsK
KwkJdHlwZU1pcnJvciA9ICgoQXJyYXlUeXBlKSB0eXBlTWlycm9yKS5nZXRDb21wb25lbnRUeXBl
KCk7CisJCWFzc2VydEVxdWFscygiU2hvdWxkIGJlIGFuIGFycmF5IHR5cGUiLCBUeXBlS2luZC5B
UlJBWSwgdHlwZU1pcnJvci5nZXRLaW5kKCkpOworCQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlw
ZU1pcnJvciwgbmV3IFN0cmluZ1tde30pOworCQl0eXBlTWlycm9yID0gKChBcnJheVR5cGUpIHR5
cGVNaXJyb3IpLmdldENvbXBvbmVudFR5cGUoKTsKKwkJYXNzZXJ0RXF1YWxzKCJTaG91bGQgYmUg
YW4gYXJyYXkgdHlwZSIsIFR5cGVLaW5kLkFSUkFZLCB0eXBlTWlycm9yLmdldEtpbmQoKSk7CisJ
CXZlcmlmeVR5cGVBbm5vdGF0aW9ucyh0eXBlTWlycm9yLCBuZXcgU3RyaW5nW117IkBUeXBlKHZh
bHVlPWYxKSJ9KTsKKwkJdHlwZU1pcnJvciA9ICgoQXJyYXlUeXBlKSB0eXBlTWlycm9yKS5nZXRD
b21wb25lbnRUeXBlKCk7CisJCWFzc2VydEVxdWFscygiU2hvdWxkIGJlIGFuIGFycmF5IHR5cGUi
LCBUeXBlS2luZC5BUlJBWSwgdHlwZU1pcnJvci5nZXRLaW5kKCkpOworCQl2ZXJpZnlUeXBlQW5u
b3RhdGlvbnModHlwZU1pcnJvciwgbmV3IFN0cmluZ1tdeyJAVHlwZSh2YWx1ZT1mMikifSk7CisJ
fQorCQorCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnMzKCkgeworCQlUeXBlRWxlbWVu
dCBhbm5vdGF0ZWRUeXBlID0gX2VsZW1lbnRVdGlscy5nZXRUeXBlRWxlbWVudCgidGFyZ2V0cy5t
b2RlbDguWSIpOworCQlMaXN0PD8gZXh0ZW5kcyBFbGVtZW50PiBtZW1iZXJzID0gX2VsZW1lbnRV
dGlscy5nZXRBbGxNZW1iZXJzKGFubm90YXRlZFR5cGUpOworCQlFeGVjdXRhYmxlRWxlbWVudCBt
ZXRob2QgPSBudWxsOworCQlmb3IgKEVsZW1lbnQgbWVtYmVyIDogbWVtYmVycykgeworCQkJaWYg
KCJmb28iLmVxdWFscyhtZW1iZXIuZ2V0U2ltcGxlTmFtZSgpLnRvU3RyaW5nKCkpKSB7CisJCQkJ
bWV0aG9kID0gKEV4ZWN1dGFibGVFbGVtZW50KSBtZW1iZXI7CisJCQl9CisJCX0KKwkJLy8gQFR5
cGUoIm0iKSBTdHJpbmcgQFR5cGUoIm0xIikgW10gZm9vKCkgQFR5cGUoIm0yIikgW10gQFR5cGUo
Im0zIikgW10ge30KKwkJYXNzZXJ0Tm90TnVsbCgiTWV0aG9kIHNob3VsZCBub3QgYmUgbnVsbCIs
IG1ldGhvZCk7CisJCVR5cGVNaXJyb3IgdHlwZU1pcnJvciA9IG1ldGhvZC5nZXRSZXR1cm5UeXBl
KCk7CisJCXZlcmlmeVR5cGVBbm5vdGF0aW9ucyh0eXBlTWlycm9yLCBuZXcgU3RyaW5nW117IkBU
eXBlKHZhbHVlPW0yKSJ9KTsKKwkJYXNzZXJ0RXF1YWxzKCJTaG91bGQgYmUgYW4gYXJyYXkgdHlw
ZSIsIFR5cGVLaW5kLkFSUkFZLCB0eXBlTWlycm9yLmdldEtpbmQoKSk7CisJCXR5cGVNaXJyb3Ig
PSAoKEFycmF5VHlwZSkgdHlwZU1pcnJvcikuZ2V0Q29tcG9uZW50VHlwZSgpOworCQl2ZXJpZnlU
eXBlQW5ub3RhdGlvbnModHlwZU1pcnJvciwgbmV3IFN0cmluZ1tdeyJAVHlwZSh2YWx1ZT1tMyki
fSk7CisJCWFzc2VydEVxdWFscygiU2hvdWxkIGJlIGFuIGFycmF5IHR5cGUiLCBUeXBlS2luZC5B
UlJBWSwgdHlwZU1pcnJvci5nZXRLaW5kKCkpOworCQl0eXBlTWlycm9yID0gKChBcnJheVR5cGUp
IHR5cGVNaXJyb3IpLmdldENvbXBvbmVudFR5cGUoKTsKKwkJdmVyaWZ5VHlwZUFubm90YXRpb25z
KHR5cGVNaXJyb3IsIG5ldyBTdHJpbmdbXXsiQFR5cGUodmFsdWU9bTEpIn0pOworCQlhc3NlcnRF
cXVhbHMoIlNob3VsZCBiZSBhbiBhcnJheSB0eXBlIiwgVHlwZUtpbmQuQVJSQVksIHR5cGVNaXJy
b3IuZ2V0S2luZCgpKTsKKwkJdHlwZU1pcnJvciA9ICgoQXJyYXlUeXBlKSB0eXBlTWlycm9yKS5n
ZXRDb21wb25lbnRUeXBlKCk7CisJCXZlcmlmeVR5cGVBbm5vdGF0aW9ucyh0eXBlTWlycm9yLCBu
ZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPW0pIn0pOworCX0KKworCXB1YmxpYyB2b2lkIHRlc3RU
eXBlQW5ub3RhdGlvbnM0KCkgeworCQkvLyB2b2lkIGJhciggQFR5cGUoInAxIikgU3RyaW5nIFtd
IGEgQFR5cGUoInAyIikgW10sIEBUeXBlKCJwMyIpIGludCBAVHlwZSgicDQiKSBbXSBiIFtdIEBU
eXBlKCJwNSIpIFtdKSB7fQorCQlUeXBlRWxlbWVudCBhbm5vdGF0ZWRUeXBlID0gX2VsZW1lbnRV
dGlscy5nZXRUeXBlRWxlbWVudCgidGFyZ2V0cy5tb2RlbDguWSIpOworCQlMaXN0PD8gZXh0ZW5k
cyBFbGVtZW50PiBtZW1iZXJzID0gX2VsZW1lbnRVdGlscy5nZXRBbGxNZW1iZXJzKGFubm90YXRl
ZFR5cGUpOworCQlFeGVjdXRhYmxlRWxlbWVudCBtZXRob2QgPSBudWxsOworCQlmb3IgKEVsZW1l
bnQgbWVtYmVyIDogbWVtYmVycykgeworCQkJaWYgKCJiYXIiLmVxdWFscyhtZW1iZXIuZ2V0U2lt
cGxlTmFtZSgpLnRvU3RyaW5nKCkpKSB7CisJCQkJbWV0aG9kID0gKEV4ZWN1dGFibGVFbGVtZW50
KSBtZW1iZXI7CisJCQl9CisJCX0KKwkJYXNzZXJ0Tm90TnVsbCgiTWV0aG9kIHNob3VsZCBub3Qg
YmUgbnVsbCIsIG1ldGhvZCk7CisJCUxpc3Q8PyBleHRlbmRzIFZhcmlhYmxlRWxlbWVudD4gcGFy
YW1zID0gbWV0aG9kLmdldFBhcmFtZXRlcnMoKTsKKwkJYXNzZXJ0RXF1YWxzKCJJbmNvcnJlY3Qg
bm8gb2YgcGFyYW1zIGZvciBtZXRob2QgYmFyKCkiLCAyLCBwYXJhbXMuc2l6ZSgpKTsKKwkJVmFy
aWFibGVFbGVtZW50IHBhcmFtID0gKFZhcmlhYmxlRWxlbWVudCkgcGFyYW1zLmdldCgwKTsKKwkJ
VHlwZU1pcnJvciB0eXBlTWlycm9yID0gcGFyYW0uYXNUeXBlKCk7CisJCXZlcmlmeVR5cGVBbm5v
dGF0aW9ucyh0eXBlTWlycm9yLCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPXAyKSJ9KTsKKwkJ
YXNzZXJ0RXF1YWxzKCJTaG91bGQgYmUgYW4gYXJyYXkgdHlwZSIsIFR5cGVLaW5kLkFSUkFZLCB0
eXBlTWlycm9yLmdldEtpbmQoKSk7CisJCXR5cGVNaXJyb3IgPSAoKEFycmF5VHlwZSkgdHlwZU1p
cnJvcikuZ2V0Q29tcG9uZW50VHlwZSgpOworCQkKKwkJdmVyaWZ5VHlwZUFubm90YXRpb25zKHR5
cGVNaXJyb3IsIG5ldyBTdHJpbmdbXXt9KTsKKwkJYXNzZXJ0RXF1YWxzKCJTaG91bGQgYmUgYW4g
YXJyYXkgdHlwZSIsIFR5cGVLaW5kLkFSUkFZLCB0eXBlTWlycm9yLmdldEtpbmQoKSk7CisJCXR5
cGVNaXJyb3IgPSAoKEFycmF5VHlwZSkgdHlwZU1pcnJvcikuZ2V0Q29tcG9uZW50VHlwZSgpOwor
CQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZU1pcnJvciwgbmV3IFN0cmluZ1tdeyJAVHlwZSh2
YWx1ZT1wMSkifSk7CisKKwkJcGFyYW0gPSAoVmFyaWFibGVFbGVtZW50KSBwYXJhbXMuZ2V0KDEp
OworCQl0eXBlTWlycm9yID0gcGFyYW0uYXNUeXBlKCk7CisJCXZlcmlmeVR5cGVBbm5vdGF0aW9u
cyh0eXBlTWlycm9yLCBuZXcgU3RyaW5nW117fSk7CisJCWFzc2VydEVxdWFscygiU2hvdWxkIGJl
IGFuIGFycmF5IHR5cGUiLCBUeXBlS2luZC5BUlJBWSwgdHlwZU1pcnJvci5nZXRLaW5kKCkpOwor
CQl0eXBlTWlycm9yID0gKChBcnJheVR5cGUpIHR5cGVNaXJyb3IpLmdldENvbXBvbmVudFR5cGUo
KTsKKwkJCisJCXZlcmlmeVR5cGVBbm5vdGF0aW9ucyh0eXBlTWlycm9yLCBuZXcgU3RyaW5nW117
IkBUeXBlKHZhbHVlPXA1KSJ9KTsKKwkJYXNzZXJ0RXF1YWxzKCJTaG91bGQgYmUgYW4gYXJyYXkg
dHlwZSIsIFR5cGVLaW5kLkFSUkFZLCB0eXBlTWlycm9yLmdldEtpbmQoKSk7CisJCXR5cGVNaXJy
b3IgPSAoKEFycmF5VHlwZSkgdHlwZU1pcnJvcikuZ2V0Q29tcG9uZW50VHlwZSgpOworCQl2ZXJp
ZnlUeXBlQW5ub3RhdGlvbnModHlwZU1pcnJvciwgbmV3IFN0cmluZ1tdeyJAVHlwZSh2YWx1ZT1w
NCkifSk7CisJCWFzc2VydEVxdWFscygiU2hvdWxkIGJlIGFuIGFycmF5IHR5cGUiLCBUeXBlS2lu
ZC5BUlJBWSwgdHlwZU1pcnJvci5nZXRLaW5kKCkpOworCQl0eXBlTWlycm9yID0gKChBcnJheVR5
cGUpIHR5cGVNaXJyb3IpLmdldENvbXBvbmVudFR5cGUoKTsKKwkJdmVyaWZ5VHlwZUFubm90YXRp
b25zKHR5cGVNaXJyb3IsIG5ldyBTdHJpbmdbXXsiQFR5cGUodmFsdWU9cDMpIn0pOworCQkKKwl9
CisJCisJcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczUoKSB7CisJCS8vIHZvaWQgZm9v
MigpIHRocm93cyAoQFR5cGUoImUxIikgTnVsbFBvaW50ZXJFeGNlcHRpb24sIChAVHlwZSgiZTIi
KSBBcnJheUluZGV4T3V0T2ZCb3VuZHNFeGNlcHRpb24ge30KKwkJVHlwZUVsZW1lbnQgYW5ub3Rh
dGVkVHlwZSA9IF9lbGVtZW50VXRpbHMuZ2V0VHlwZUVsZW1lbnQoInRhcmdldHMubW9kZWw4Llki
KTsKKwkJTGlzdDw/IGV4dGVuZHMgRWxlbWVudD4gbWVtYmVycyA9IF9lbGVtZW50VXRpbHMuZ2V0
QWxsTWVtYmVycyhhbm5vdGF0ZWRUeXBlKTsKKwkJRXhlY3V0YWJsZUVsZW1lbnQgbWV0aG9kID0g
bnVsbDsKKwkJZm9yIChFbGVtZW50IG1lbWJlciA6IG1lbWJlcnMpIHsKKwkJCWlmICgiZm9vMiIu
ZXF1YWxzKG1lbWJlci5nZXRTaW1wbGVOYW1lKCkudG9TdHJpbmcoKSkpIHsKKwkJCQltZXRob2Qg
PSAoRXhlY3V0YWJsZUVsZW1lbnQpIG1lbWJlcjsKKwkJCX0KKwkJfQorCQlMaXN0PD9leHRlbmRz
IFR5cGVNaXJyb3I+IGV4Y2VwdGlvbnMgPSBtZXRob2QuZ2V0VGhyb3duVHlwZXMoKTsKKwkJYXNz
ZXJ0RXF1YWxzKCJJbmNvcnJlY3Qgbm8gb2YgdGhyb3duIGV4Y2VwdGlvbnMiLCAyLCBleGNlcHRp
b25zLnNpemUoKSk7CisJCVR5cGVNaXJyb3IgdHlwZU1pcnJvciA9IGV4Y2VwdGlvbnMuZ2V0KDAp
OworCQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZU1pcnJvciwgbmV3IFN0cmluZ1tdeyJAVHlw
ZSh2YWx1ZT1lMSkifSk7CisJCXR5cGVNaXJyb3IgPSBleGNlcHRpb25zLmdldCgxKTsKKwkJdmVy
aWZ5VHlwZUFubm90YXRpb25zKHR5cGVNaXJyb3IsIG5ldyBTdHJpbmdbXXsiQFR5cGUodmFsdWU9
ZTIpIn0pOworCX0KKworCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnM2KCkgeworCQkv
LyB2b2lkIGJhcjIgKEBUeXBlKCJwMSIpIFN0cmluZyBAVHlwZSgicDIiKSBbXSBAVHlwZSgicDMi
KSAuLi4gYXJncykge30KKwkJVHlwZUVsZW1lbnQgYW5ub3RhdGVkVHlwZSA9IF9lbGVtZW50VXRp
bHMuZ2V0VHlwZUVsZW1lbnQoInRhcmdldHMubW9kZWw4LlkiKTsKKwkJTGlzdDw/IGV4dGVuZHMg
RWxlbWVudD4gbWVtYmVycyA9IF9lbGVtZW50VXRpbHMuZ2V0QWxsTWVtYmVycyhhbm5vdGF0ZWRU
eXBlKTsKKwkJRXhlY3V0YWJsZUVsZW1lbnQgbWV0aG9kID0gbnVsbDsKKwkJZm9yIChFbGVtZW50
IG1lbWJlciA6IG1lbWJlcnMpIHsKKwkJCWlmICgiYmFyMiIuZXF1YWxzKG1lbWJlci5nZXRTaW1w
bGVOYW1lKCkudG9TdHJpbmcoKSkpIHsKKwkJCQltZXRob2QgPSAoRXhlY3V0YWJsZUVsZW1lbnQp
IG1lbWJlcjsKKwkJCX0KKwkJfQorCQlMaXN0PD8gZXh0ZW5kcyBWYXJpYWJsZUVsZW1lbnQ+IHBh
cmFtcyA9IG1ldGhvZC5nZXRQYXJhbWV0ZXJzKCk7CisJCWFzc2VydEVxdWFscygiSW5jb3JyZWN0
IG5vIG9mIHBhcmFtZXRlcnMiLCAxLCBwYXJhbXMuc2l6ZSgpKTsKKwkJVHlwZU1pcnJvciB0eXBl
TWlycm9yID0gcGFyYW1zLmdldCgwKS5hc1R5cGUoKTsKKwkJdmVyaWZ5VHlwZUFubm90YXRpb25z
KHR5cGVNaXJyb3IsIG5ldyBTdHJpbmdbXXsiQFR5cGUodmFsdWU9cDIpIn0pOworCQlhc3NlcnRF
cXVhbHMoIlNob3VsZCBiZSBhbiBhcnJheSB0eXBlIiwgVHlwZUtpbmQuQVJSQVksIHR5cGVNaXJy
b3IuZ2V0S2luZCgpKTsKKwkJdHlwZU1pcnJvciA9ICgoQXJyYXlUeXBlKSB0eXBlTWlycm9yKS5n
ZXRDb21wb25lbnRUeXBlKCk7CisJCXZlcmlmeVR5cGVBbm5vdGF0aW9ucyh0eXBlTWlycm9yLCBu
ZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPXAzKSJ9KTsKKwkJYXNzZXJ0RXF1YWxzKCJTaG91bGQg
YmUgYW4gYXJyYXkgdHlwZSIsIFR5cGVLaW5kLkFSUkFZLCB0eXBlTWlycm9yLmdldEtpbmQoKSk7
CisJCXR5cGVNaXJyb3IgPSAoKEFycmF5VHlwZSkgdHlwZU1pcnJvcikuZ2V0Q29tcG9uZW50VHlw
ZSgpOworCQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZU1pcnJvciwgbmV3IFN0cmluZ1tdeyJA
VHlwZSh2YWx1ZT1wMSkifSk7CisKKwl9CisKKwlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90YXRp
b25zNygpIHsKKwkJLy8gcHVibGljIGNsYXNzIFogPEBUeXBlKCJ0cDEiKSBLLCBAVHlwZSgidHAy
IikgVj4geworCQlUeXBlRWxlbWVudCB0eXBlWiA9IF9lbGVtZW50VXRpbHMuZ2V0VHlwZUVsZW1l
bnQoInRhcmdldHMubW9kZWw4LloiKTsKKwkJVHlwZU1pcnJvciB0eXBlTWlycm9yID0gdHlwZVou
YXNUeXBlKCk7CisJCUxpc3Q8PyBleHRlbmRzIFR5cGVQYXJhbWV0ZXJFbGVtZW50PiB0eXBlUGFy
YW1zID0gdHlwZVouZ2V0VHlwZVBhcmFtZXRlcnMoKTsKKwkJYXNzZXJ0RXF1YWxzKCJJbmNvcnJl
Y3Qgbm8gb2YgdHlwZSBwYXJhbXMiLCAyLCB0eXBlUGFyYW1zLnNpemUoKSk7CisJCVR5cGVQYXJh
bWV0ZXJFbGVtZW50IHR5cGVQYXJhbSA9IHR5cGVQYXJhbXMuZ2V0KDApOworCQl2ZXJpZnlUeXBl
QW5ub3RhdGlvbnModHlwZVBhcmFtLCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPXRwMSkifSk7
CisJCXR5cGVNaXJyb3IgPSB0eXBlUGFyYW0uYXNUeXBlKCk7CisJCXZlcmlmeVR5cGVBbm5vdGF0
aW9ucyh0eXBlTWlycm9yLCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPXRwMSkifSk7CisJCXR5
cGVQYXJhbSA9IHR5cGVQYXJhbXMuZ2V0KDEpOworCQl0eXBlTWlycm9yID0gdHlwZVBhcmFtLmFz
VHlwZSgpOworCQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZVBhcmFtLCBuZXcgU3RyaW5nW117
IkBUeXBlKHZhbHVlPXRwMikifSk7CisJCXZlcmlmeVR5cGVBbm5vdGF0aW9ucyh0eXBlTWlycm9y
LCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPXRwMikifSk7CisJfQorCQorCXB1YmxpYyB2b2lk
IHRlc3RUeXBlQW5ub3RhdGlvbnM4KCkgeworCQlUeXBlRWxlbWVudCB0eXBlWiA9IF9lbGVtZW50
VXRpbHMuZ2V0VHlwZUVsZW1lbnQoInRhcmdldHMubW9kZWw4LloiKTsKKwkJTGlzdDw/IGV4dGVu
ZHMgRWxlbWVudD4gbWVtYmVycyA9IF9lbGVtZW50VXRpbHMuZ2V0QWxsTWVtYmVycyh0eXBlWik7
CisJCUV4ZWN1dGFibGVFbGVtZW50IG1ldGhvZCA9IG51bGw7CisJCVZhcmlhYmxlRWxlbWVudCBm
aWVsZCA9IG51bGw7CisJCWZvciAoRWxlbWVudCBtZW1iZXIgOiBtZW1iZXJzKSB7CisJCQlpZiAo
ImZvbyIuZXF1YWxzKG1lbWJlci5nZXRTaW1wbGVOYW1lKCkudG9TdHJpbmcoKSkpIHsKKwkJCQlt
ZXRob2QgPSAoRXhlY3V0YWJsZUVsZW1lbnQpIG1lbWJlcjsKKwkJCX0gZWxzZSBpZiAoInoxIi5l
cXVhbHMobWVtYmVyLmdldFNpbXBsZU5hbWUoKS50b1N0cmluZygpKSkgeworCQkJCWZpZWxkID0g
KFZhcmlhYmxlRWxlbWVudCkgbWVtYmVyOworCQkJfQorCQl9CisJCQorCQkvLyBwdWJsaWMgPEBU
eXBlKCJtcDEiKSBULCBAVHlwZSgibXAyIikgVT4gdm9pZCBmb28oKSB7fQkKKwkJTGlzdDw/IGV4
dGVuZHMgVHlwZVBhcmFtZXRlckVsZW1lbnQ+IHR5cGVQYXJhbXMgPSBtZXRob2QuZ2V0VHlwZVBh
cmFtZXRlcnMoKTsKKwkJYXNzZXJ0RXF1YWxzKCJJbmNvcnJlY3Qgbm8gb2YgdHlwZSBwYXJhbXMi
LCAyLCB0eXBlUGFyYW1zLnNpemUoKSk7CisJCVR5cGVQYXJhbWV0ZXJFbGVtZW50IHR5cGVQYXJh
bSA9IHR5cGVQYXJhbXMuZ2V0KDApOworCQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZVBhcmFt
LCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPW1wMSkifSk7CisJCXR5cGVQYXJhbSA9IHR5cGVQ
YXJhbXMuZ2V0KDEpOworCQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZVBhcmFtLCBuZXcgU3Ry
aW5nW117IkBUeXBlKHZhbHVlPW1wMikifSk7CisJCS8vWjxAVHlwZSgidGExIikgU3RyaW5nLCBA
VHlwZSgidGEyIikgT2JqZWN0PiB6MSA9IG51bGw7CisJCS8vIEFQSXMgZG9uJ3QgZXhwb3NlIHRo
ZSB0eXBlIGFyZ3VtZW50cyBvbiBhIFR5cGVNaXJyb3IKKwkJVHlwZU1pcnJvciB0eXBlTWlycm9y
ID0gZmllbGQuYXNUeXBlKCk7CisJCXZlcmlmeVR5cGVBbm5vdGF0aW9ucyh0eXBlTWlycm9yLCBu
ZXcgU3RyaW5nW117fSk7CisJfQorCisJcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczko
KSB7CisJCVR5cGVFbGVtZW50IGFubm90YXRlZFR5cGUgPSBfZWxlbWVudFV0aWxzLmdldFR5cGVF
bGVtZW50KCJ0YXJnZXRzLm1vZGVsOC5YIik7CisJCUxpc3Q8PyBleHRlbmRzIEVsZW1lbnQ+IG1l
bWJlcnMgPSBfZWxlbWVudFV0aWxzLmdldEFsbE1lbWJlcnMoYW5ub3RhdGVkVHlwZSk7CisJCQor
CQlWYXJpYWJsZUVsZW1lbnQgZmllbGQyID0gbnVsbDsKKwkJZm9yIChWYXJpYWJsZUVsZW1lbnQg
bWVtYmVyIDogRWxlbWVudEZpbHRlci5maWVsZHNJbihtZW1iZXJzKSkgeworCQkJaWYgKCJfZmll
bGQyIi5lcXVhbHMobWVtYmVyLmdldFNpbXBsZU5hbWUoKS50b1N0cmluZygpKSkgeworCQkJCWZp
ZWxkMiA9IChWYXJpYWJsZUVsZW1lbnQpIG1lbWJlcjsKKwkJCQlicmVhazsKKwkJCX0KKwkJfQor
CQlUeXBlTWlycm9yIHR5cGVNaXJyb3IgPSBmaWVsZDIuYXNUeXBlKCk7CisJCVR5cGUkMSBhbm5v
dDEgPSB0eXBlTWlycm9yLmdldEFubm90YXRpb24oVHlwZSQxLmNsYXNzKTsKKwkJYXNzZXJ0Tm90
TnVsbCgiQW5ub3RhdGlvbiBzaG91bGQgbm90IGJlIG51bGwiLCBhbm5vdDEpOworCQlUeXBlLk9u
ZSBhbm5vdDIgPSB0eXBlTWlycm9yLmdldEFubm90YXRpb24oVHlwZS5PbmUuY2xhc3MpOworCQlh
c3NlcnROb3ROdWxsKCJBbm5vdGF0aW9uIHNob3VsZCBub3QgYmUgbnVsbCIsIGFubm90Mik7CisJ
fQorCQorCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnMxMCgpIHsKKwkJVHlwZUVsZW1l
bnQgYW5ub3RhdGVkVHlwZSA9IF9lbGVtZW50VXRpbHMuZ2V0VHlwZUVsZW1lbnQoInRhcmdldHMu
bW9kZWw4LlgiKTsKKwkJTGlzdDw/IGV4dGVuZHMgRWxlbWVudD4gbWVtYmVycyA9IF9lbGVtZW50
VXRpbHMuZ2V0QWxsTWVtYmVycyhhbm5vdGF0ZWRUeXBlKTsKKwkJVmFyaWFibGVFbGVtZW50IGZp
ZWxkMyA9IG51bGw7CisJCWZvciAoRWxlbWVudCBtZW1iZXIgOiBtZW1iZXJzKSB7CisJCQlpZiAo
Il9maWVsZDMiLmVxdWFscyhtZW1iZXIuZ2V0U2ltcGxlTmFtZSgpLnRvU3RyaW5nKCkpKSB7CisJ
CQkJZmllbGQzID0gKFZhcmlhYmxlRWxlbWVudCkgbWVtYmVyOworCQkJfQorCQl9CisJCXZlcmlm
eVR5cGVBbm5vdGF0aW9ucyhhbm5vdGF0ZWRUeXBlLCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVl
PWMpIn0pOworCQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnMoYW5ub3RhdGVkVHlwZS5hc1R5cGUoKSwg
bmV3IFN0cmluZ1tde30pOworCQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnMoZmllbGQzLCBuZXcgU3Ry
aW5nW117fSk7CisJCXZlcmlmeVR5cGVBbm5vdGF0aW9ucyhmaWVsZDMuYXNUeXBlKCksIG5ldyBT
dHJpbmdbXXt9KTsKKwl9CisKKwlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90YXRpb25zMTEoKSB7
CisJCVR5cGVFbGVtZW50IGFubm90YXRlZFR5cGUgPSBfZWxlbWVudFV0aWxzLmdldFR5cGVFbGVt
ZW50KCJ0YXJnZXRzLm1vZGVsOC5YIik7CisJCUxpc3Q8PyBleHRlbmRzIEVsZW1lbnQ+IG1lbWJl
cnMgPSBfZWxlbWVudFV0aWxzLmdldEFsbE1lbWJlcnMoYW5ub3RhdGVkVHlwZSk7CisJCVZhcmlh
YmxlRWxlbWVudCB4eSA9IG51bGw7CisJCWZvciAoRWxlbWVudCBtZW1iZXIgOiBtZW1iZXJzKSB7
CisJCQlpZiAoInh5Ii5lcXVhbHMobWVtYmVyLmdldFNpbXBsZU5hbWUoKS50b1N0cmluZygpKSkg
eworCQkJCXh5ID0gKFZhcmlhYmxlRWxlbWVudCkgbWVtYmVyOworCQkJfQorCQl9CisJCXZlcmlm
eVR5cGVBbm5vdGF0aW9ucyh4eSwgbmV3IFN0cmluZ1tde30pOworCQl2ZXJpZnlUeXBlQW5ub3Rh
dGlvbnMoeHkuYXNUeXBlKCksIG5ldyBTdHJpbmdbXXsiQFR5cGUodmFsdWU9eHkpIn0pOworCQkK
KwkJU2V0PFN0cmluZz4gZXhwZWN0ZWRFbGVtZW50TmFtZXMgPSBuZXcgSGFzaFNldDxTdHJpbmc+
KEVMRU1FTlRfTkFNRVMubGVuZ3RoKTsKKwkJZm9yIChTdHJpbmcgbmFtZSA6IEVMRU1FTlRfTkFN
RVMpIHsKKwkJCWV4cGVjdGVkRWxlbWVudE5hbWVzLmFkZChuYW1lKTsKKwkJfQorCQlTZXQ8PyBl
eHRlbmRzIEVsZW1lbnQ+IGFjdHVhbEVsbWVudHMgPSByb3VuZEVudi5nZXRFbGVtZW50c0Fubm90
YXRlZFdpdGgoVHlwZS5jbGFzcyk7CisJCWFzc2VydE5vdE51bGwoIlJvdW5kRW52aXJvbm1lbnQj
Z2V0RWxlbWVudHNBbm5vdGF0ZWRXaXRoIHJldHVybmVkIG51bGwiLCBhY3R1YWxFbG1lbnRzKTsK
KwkJCisJCWZvciAoRWxlbWVudCBlIDogYWN0dWFsRWxtZW50cykgeworCQkJaWYgKGUgaW5zdGFu
Y2VvZiBUeXBlRWxlbWVudCkgeworCQkJCVN0cmluZyBuYW1lID0gKChUeXBlRWxlbWVudCkgZSku
Z2V0UXVhbGlmaWVkTmFtZSgpLnRvU3RyaW5nKCk7CisJCQkJaWYgKCFleHBlY3RlZEVsZW1lbnRO
YW1lcy5yZW1vdmUobmFtZSkpIHsKKwkJCQkJcmVwb3J0RXJyb3IoIk1pc3Npbmcgcm9vdCBlbGVt
ZW50ICIgKyBuYW1lKTsKKwkJCQl9CisJCQl9IGVsc2UgaWYgKGUgaW5zdGFuY2VvZiBUeXBlUGFy
YW1ldGVyRWxlbWVudCkgeworCQkJCVN0cmluZyBuYW1lID0gKChUeXBlUGFyYW1ldGVyRWxlbWVu
dCkgZSkuZ2V0U2ltcGxlTmFtZSgpLnRvU3RyaW5nKCk7CisJCQkJaWYgKCFleHBlY3RlZEVsZW1l
bnROYW1lcy5yZW1vdmUobmFtZSkpIHsKKwkJCQkJcmVwb3J0RXJyb3IoIk1pc3Npbmcgcm9vdCBl
bGVtZW50ICIgKyBuYW1lKTsKKwkJCQl9CisJCQl9CisJCX0KKwkJYXNzZXJ0VHJ1ZSgiRm91bmQg
dW5leHBlY3RlZCBleHRyYSBlbGVtZW50cyIsIGV4cGVjdGVkRWxlbWVudE5hbWVzLmlzRW1wdHko
KSk7CisJfQorCisJcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczEyKCkgeworCQlUeXBl
RWxlbWVudCBhbm5vdGF0ZWRUeXBlID0gX2VsZW1lbnRVdGlscy5nZXRUeXBlRWxlbWVudCgidGFy
Z2V0cy5tb2RlbDguWCIpOworCQlMaXN0PD8gZXh0ZW5kcyBFbGVtZW50PiBtZW1iZXJzID0gX2Vs
ZW1lbnRVdGlscy5nZXRBbGxNZW1iZXJzKGFubm90YXRlZFR5cGUpOworCQlFeGVjdXRhYmxlRWxl
bWVudCBiYXIyID0gbnVsbDsKKwkJZm9yIChFbGVtZW50IG1lbWJlciA6IG1lbWJlcnMpIHsKKwkJ
CWlmICgiYmFyMiIuZXF1YWxzKG1lbWJlci5nZXRTaW1wbGVOYW1lKCkudG9TdHJpbmcoKSkpIHsK
KwkJCQliYXIyID0gKEV4ZWN1dGFibGVFbGVtZW50KSBtZW1iZXI7CisJCQl9CisJCX0KKwkJVHlw
ZU1pcnJvciB0eXBlTWlycm9yID0gYmFyMi5nZXRSZWNlaXZlclR5cGUoKTsKKwkJdmVyaWZ5VHlw
ZUFubm90YXRpb25zKHR5cGVNaXJyb3IsIG5ldyBTdHJpbmdbXXsiQFR5cGUodmFsdWU9cmVjZWl2
ZXIpIn0pOworCQlFeGVjdXRhYmxlVHlwZSB0eXBlID0gKEV4ZWN1dGFibGVUeXBlKSBiYXIyLmFz
VHlwZSgpOworCQl2ZXJpZnlUeXBlQW5ub3RhdGlvbnModHlwZS5nZXRSZWNlaXZlclR5cGUoKSwg
bmV3IFN0cmluZ1tdeyJAVHlwZSh2YWx1ZT1yZWNlaXZlcikifSk7CisJfQorCXByaXZhdGUgU3Ry
aW5nIGdldEV4Y2VwdGlvblN0YWNrVHJhY2UoVGhyb3dhYmxlIHQpIHsKKwkJU3RyaW5nQnVmZmVy
IGJ1ZiA9IG5ldyBTdHJpbmdCdWZmZXIodC5nZXRNZXNzYWdlKCkpOworCQlTdGFja1RyYWNlRWxl
bWVudFtdIHRyYWNlcyA9IHQuZ2V0U3RhY2tUcmFjZSgpOworCQlmb3IgKGludCBpID0gMDsgaSA8
IHRyYWNlcy5sZW5ndGg7IGkrKykgeworCQkJU3RhY2tUcmFjZUVsZW1lbnQgdHJhY2UgPSB0cmFj
ZXNbaV07CisJCQlidWYuYXBwZW5kKCJcblx0YXQgIiArIHRyYWNlKTsKKwkJCWlmIChpID09IDEy
KQorCQkJCWJyZWFrOyAvLyBEb24ndCBkdW1wIGFsbCBzdGFja3MKKwkJfQorCQlyZXR1cm4gYnVm
LnRvU3RyaW5nKCk7CisJfQorCisJCisJcHJpdmF0ZSB2b2lkIHZlcmlmeVR5cGVBbm5vdGF0aW9u
cyhBbm5vdGF0ZWRDb25zdHJ1Y3QgY29uc3RydWN0LCBTdHJpbmdbXSBhbm5vdHMpIHsKKwkJTGlz
dDw/IGV4dGVuZHMgQW5ub3RhdGlvbk1pcnJvcj4gYW5ub3RhdGlvbnMgPSBjb25zdHJ1Y3QuZ2V0
QW5ub3RhdGlvbk1pcnJvcnMoKTsKKwkJYXNzZXJ0RXF1YWxzKCJJbmNvcnJlY3Qgbm8gb2YgYW5u
b3RhdGlvbnMiLCBhbm5vdHMubGVuZ3RoLCBhbm5vdGF0aW9ucy5zaXplKCkpOworCQlmb3IoaW50
IGkgPSAwLCBsZW5ndGggPSBhbm5vdHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKKwkJCUFu
bm90YXRpb25NaXJyb3IgbWlycm9yID0gYW5ub3RhdGlvbnMuZ2V0KGkpOworCQkJYXNzZXJ0RXF1
YWxzKCJJbnZhbGlkIGFubm90YXRpb24gdmFsdWUiLCBhbm5vdHNbaV0sIGdldEFubm90YXRpb25T
dHJpbmcobWlycm9yKSk7CisJCX0KKwl9CisJcHJpdmF0ZSBTdHJpbmcgZ2V0QW5ub3RhdGlvblN0
cmluZyhBbm5vdGF0aW9uTWlycm9yIGFubm90KSB7CisJCURlY2xhcmVkVHlwZSBhbm5vdFR5cGUg
PSBhbm5vdC5nZXRBbm5vdGF0aW9uVHlwZSgpOworCQlUeXBlRWxlbWVudCB0eXBlID0gKFR5cGVF
bGVtZW50KSBhbm5vdFR5cGUuYXNFbGVtZW50KCk7CisJCVN0cmluZ0J1ZmZlciBidWYgPSBuZXcg
U3RyaW5nQnVmZmVyKCJAIiArIHR5cGUuZ2V0U2ltcGxlTmFtZSgpKTsKKwkJTWFwPD8gZXh0ZW5k
cyBFeGVjdXRhYmxlRWxlbWVudCwgPyBleHRlbmRzIEFubm90YXRpb25WYWx1ZT4gdmFsdWVzID0g
YW5ub3QuZ2V0RWxlbWVudFZhbHVlcygpOworCQlTZXQ8PyBleHRlbmRzIEV4ZWN1dGFibGVFbGVt
ZW50PiBrZXlzID0gdmFsdWVzLmtleVNldCgpOworCQlidWYuYXBwZW5kKCcoJyk7CisJCWZvciAo
RXhlY3V0YWJsZUVsZW1lbnQgZXhlY3V0YWJsZUVsZW1lbnQgOiBrZXlzKSB7IC8vIEBNYXJrZXIz
KCkKKwkJCWJ1Zi5hcHBlbmQoZXhlY3V0YWJsZUVsZW1lbnQuZ2V0U2ltcGxlTmFtZSgpKTsKKwkJ
CWJ1Zi5hcHBlbmQoJz0nKTsKKwkJCUFubm90YXRpb25WYWx1ZSB2YWx1ZSA9IHZhbHVlcy5nZXQo
ZXhlY3V0YWJsZUVsZW1lbnQpOworCQkJYnVmLmFwcGVuZCh2YWx1ZS5nZXRWYWx1ZSgpKTsKKwkJ
fQorCQlidWYuYXBwZW5kKCcpJyk7CisJCXJldHVybiBidWYudG9TdHJpbmcoKTsKKwl9CisJcHJp
dmF0ZSA8QSBleHRlbmRzIEFubm90YXRpb24+IHZvaWQgZXhhbWluZVNFOEFubm90YXRpb25NZXRo
b2RzKFN0cmluZyBtc2csIEFubm90YXRlZENvbnN0cnVjdCBjb25zdHJ1Y3QsICBTdHJpbmcgdmFs
dWUpIHsKKwkJVHlwZSBhbm5vdCA9IGNvbnN0cnVjdC5nZXRBbm5vdGF0aW9uKFR5cGUuY2xhc3Mp
OworCQlhc3NlcnROb3ROdWxsKG1zZyArICJBbm5vdGF0aW9uIGZvciBlbGVtZW50ICIgKyBjb25z
dHJ1Y3QudG9TdHJpbmcoKSArICIgc2hvdWxkIG5vdCBiZSBudWxsIiwgYW5ub3QpOworCQlhc3Nl
cnRTYW1lKG1zZyArICJJbnZhbGlkIGFubm90YXRpb24gdHlwZSIgLCBUeXBlLmNsYXNzLCBhbm5v
dC5hbm5vdGF0aW9uVHlwZSgpKTsKKwkJYXNzZXJ0RXF1YWxzKG1zZyArICJJbnZhbGlkIGFubm90
YXRpb24gdmFsdWUiLCB2YWx1ZSwgYW5ub3QudmFsdWUoKSk7CisJCQorCQlBbm5vdGF0aW9uW10g
YW5ub3RzID0gY29uc3RydWN0LmdldEFubm90YXRpb25zQnlUeXBlKFR5cGUuY2xhc3MpOworCQlh
c3NlcnRFcXVhbHMobXNnICsgIkluY29ycmVjdCBubyBvZiBhbm5vdGF0aW9ucyIsIDEsIGFubm90
cy5sZW5ndGgpOworCQlhbm5vdCA9IChUeXBlKSBhbm5vdHNbMF07CisJCWFzc2VydFNhbWUobXNn
ICsgIkludmFsaWQgYW5ub3RhdGlvbiB0eXBlIiAsIFR5cGUuY2xhc3MsIGFubm90c1swXS5hbm5v
dGF0aW9uVHlwZSgpKTsKKwkJYXNzZXJ0RXF1YWxzKG1zZyArICJJbnZhbGlkIGFubm90YXRpb24g
dmFsdWUiLCB2YWx1ZSwgYW5ub3QudmFsdWUoKSk7CisJfQorCQorCXB1YmxpYyB2b2lkIHJlcG9y
dEVycm9yKFN0cmluZyBtc2cpIHsKKwkJdGhyb3cgbmV3IEFzc2VydGlvbkZhaWxlZEVycm9yKG1z
Zyk7CisJfQorCQorCXB1YmxpYyB2b2lkIGFzc2VydFRydWUoU3RyaW5nIG1zZywgYm9vbGVhbiB2
YWx1ZSkgeworCQlpZiAoIXZhbHVlKSByZXBvcnRFcnJvcihtc2cpOworCX0KKwlwdWJsaWMgdm9p
ZCBhc3NlcnRGYWxzZShTdHJpbmcgbXNnLCBib29sZWFuIHZhbHVlKSB7CisJCWlmICh2YWx1ZSkg
cmVwb3J0RXJyb3IobXNnKTsKKwl9CisJcHVibGljIHZvaWQgYXNzZXJ0U2FtZShTdHJpbmcgbXNn
LCBPYmplY3Qgb2JqMSwgT2JqZWN0IG9iajIpIHsKKwkJaWYgKG9iajEgIT0gb2JqMikgeworCQkJ
cmVwb3J0RXJyb3IobXNnICsgIiwgc2hvdWxkIGJlICIgKyBvYmoxLnRvU3RyaW5nKCkgKyAiIGJ1
dCAiICsgb2JqMi50b1N0cmluZygpKTsKKwkJfQorCX0KKwlwdWJsaWMgdm9pZCBhc3NlcnROb3RO
dWxsKFN0cmluZyBtc2csIE9iamVjdCBvYmopIHsKKwkJaWYgKG9iaiA9PSBudWxsKSB7CisJCQly
ZXBvcnRFcnJvcihtc2cpOworCQl9CisJfQorCXB1YmxpYyB2b2lkIGFzc2VydE51bGwoU3RyaW5n
IG1zZywgT2JqZWN0IG9iaikgeworCQlpZiAob2JqICE9IG51bGwpIHsKKwkJCXJlcG9ydEVycm9y
KG1zZyk7CisJCX0KKwl9CisgICAgcHVibGljIHZvaWQgYXNzZXJ0RXF1YWxzKFN0cmluZyBtZXNz
YWdlLCBPYmplY3QgZXhwZWN0ZWQsIE9iamVjdCBhY3R1YWwpIHsKKyAgICAgICAgaWYgKGVxdWFs
c1JlZ2FyZGluZ051bGwoZXhwZWN0ZWQsIGFjdHVhbCkpIHsKKyAgICAgICAgICAgIHJldHVybjsK
KyAgICAgICAgfSBlbHNlIHsKKyAgICAgICAgCXJlcG9ydEVycm9yKG1lc3NhZ2UgKyAiLCBleHBl
Y3RlZCAiICsgZXhwZWN0ZWQudG9TdHJpbmcoKSArICIgYnV0IHdhcyAiICsgYWN0dWFsLnRvU3Ry
aW5nKCkpOworICAgICAgICB9CisgICAgfQorCisgICAgc3RhdGljIGJvb2xlYW4gZXF1YWxzUmVn
YXJkaW5nTnVsbChPYmplY3QgZXhwZWN0ZWQsIE9iamVjdCBhY3R1YWwpIHsKKyAgICAgICAgaWYg
KGV4cGVjdGVkID09IG51bGwpIHsKKyAgICAgICAgICAgIHJldHVybiBhY3R1YWwgPT0gbnVsbDsK
KyAgICAgICAgfQorICAgICAgICByZXR1cm4gZXhwZWN0ZWQuZXF1YWxzKGFjdHVhbCk7CisgICAg
fQorICAgIAorCXB1YmxpYyB2b2lkIGFzc2VydEVxdWFscyhTdHJpbmcgbXNnLCBpbnQgZXhwZWN0
ZWQsIGludCBhY3R1YWwpIHsKKwkJaWYgKGV4cGVjdGVkICE9IGFjdHVhbCkgeworCQkJU3RyaW5n
QnVmZmVyIGJ1ZiA9IG5ldyBTdHJpbmdCdWZmZXIoKTsKKwkJCWJ1Zi5hcHBlbmQobXNnKTsKKwkJ
CWJ1Zi5hcHBlbmQoIiwgZXhwZWN0ZWQgIiArIGV4cGVjdGVkICsgIiBidXQgd2FzICIgKyBhY3R1
YWwpOworCQkJcmVwb3J0RXJyb3IoYnVmLnRvU3RyaW5nKCkpOworCQl9CisJfQorCXB1YmxpYyB2
b2lkIGFzc2VydEVxdWFscyhPYmplY3QgZXhwZWN0ZWQsIE9iamVjdCBhY3R1YWwpIHsKKwkJaWYg
KGV4cGVjdGVkICE9IGFjdHVhbCkgeworCQkJCisJCX0KKwl9CisJcHJpdmF0ZSBjbGFzcyBBc3Nl
cnRpb25GYWlsZWRFcnJvciBleHRlbmRzIEVycm9yIHsKKwkJcHJpdmF0ZSBzdGF0aWMgZmluYWwg
bG9uZyBzZXJpYWxWZXJzaW9uVUlEID0gMUw7CisKKwkJcHVibGljIEFzc2VydGlvbkZhaWxlZEVy
cm9yKFN0cmluZyBtc2cpIHsKKwkJCXN1cGVyKG1zZyk7CisJCX0KKwl9CisJCit9CmRpZmYgLS1n
aXQgcmVzb3VyY2VzL3RhcmdldHMvbW9kZWw4L0xhbWJkYVRlc3QuamF2YSByZXNvdXJjZXMvdGFy
Z2V0cy9tb2RlbDgvTGFtYmRhVGVzdC5qYXZhCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAw
MDAwMDAuLjY1ODllYjEKLS0tIC9kZXYvbnVsbAorKysgcmVzb3VyY2VzL3RhcmdldHMvbW9kZWw4
L0xhbWJkYVRlc3QuamF2YQpAQCAtMCwwICsxLDM1IEBACisvKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KgorICogQ29weXJpZ2h0IChjKSAyMDEzIElCTSBDb3Jwb3JhdGlvbi4KKyAqIEFsbCByaWdodHMg
cmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKKyAq
IGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGlj
IExpY2Vuc2UgdjEuMAorICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFu
ZCBpcyBhdmFpbGFibGUgYXQKKyAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYx
MC5odG1sCisgKiAKKyAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJh
ZnQgc3BlY2lmaWNhdGlvbiBkZXZlbG9wZWQgdW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0eSBQ
cm9jZXNzIChKQ1ApIGFuZCBpcyBtYWRlIGF2YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVh
dGlvbiBwdXJwb3NlcworICogb25seS4gVGhlIGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBh
bnkgc3BlY2lmaWNhdGlvbiBvZiB0aGUgSkNQLgorICogCisgKiBDb250cmlidXRvcnM6CisgKiAg
ICAgSUJNIENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCisgKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKi8KKworcGFja2FnZSB0YXJnZXRzLm1vZGVsODsKKworcHVibGlj
IGNsYXNzIExhbWJkYVRlc3QgeworCXB1YmxpYyBTdHJpbmcgZm9vKCkgeworCQlyZXR1cm4gbnVs
bDsKKwl9Cit9ICAgICAKKworaW50ZXJmYWNlIERlZmF1bHRJbnRlcmZhY2UgeworCXB1YmxpYyBk
ZWZhdWx0IFN0cmluZyBkZWZhdWx0TWV0aG9kICgpIHsKKwkJcmV0dXJuIG51bGw7CisJfQorCXB1
YmxpYyBzdGF0aWMgU3RyaW5nIHN0YXRpY01ldGhvZCAoKSB7CisJCXJldHVybiBudWxsOworCX0K
K30gICAgIAorCitpbnRlcmZhY2UgRnVuY3Rpb25hbEludGVyZmFjZSB7CisJcHVibGljIGFic3Ry
YWN0IFN0cmluZyBhYnN0cmFjdE1ldGhvZCAoKTsKK30KXCBObyBuZXdsaW5lIGF0IGVuZCBvZiBm
aWxlCmRpZmYgLS1naXQgcmVzb3VyY2VzL3RhcmdldHMvbW9kZWw4L1guamF2YSByZXNvdXJjZXMv
dGFyZ2V0cy9tb2RlbDgvWC5qYXZhCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAu
LmI4ZTY5MGUKLS0tIC9kZXYvbnVsbAorKysgcmVzb3VyY2VzL3RhcmdldHMvbW9kZWw4L1guamF2
YQpAQCAtMCwwICsxLDM5IEBACisvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgorICogQ29weXJpZ2h0
IChjKSAyMDEzIElCTSBDb3Jwb3JhdGlvbi4KKyAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMg
cHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKKyAqIGFyZSBtYWRlIGF2YWls
YWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAor
ICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUg
YXQKKyAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCisgKiAKKyAq
IFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQgc3BlY2lmaWNhdGlv
biBkZXZlbG9wZWQgdW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0eSBQcm9jZXNzIChKQ1ApIGFu
ZCBpcyBtYWRlIGF2YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiBwdXJwb3Nlcwor
ICogb25seS4gVGhlIGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkgc3BlY2lmaWNhdGlv
biBvZiB0aGUgSkNQLgorICogCisgKiBDb250cmlidXRvcnM6CisgKiAgICAgSUJNIENvcnBvcmF0
aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCisgKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKi8KK3BhY2thZ2UgdGFyZ2V0cy5tb2RlbDg7CisKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
Y29tcGlsZXIuYXB0LnRlc3RzLmFubm90YXRpb25zLlR5cGU7CitpbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmNvbXBpbGVyLmFwdC50ZXN0cy5hbm5vdGF0aW9ucy5UeXBlJDE7CitpbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmNvbXBpbGVyLmFwdC50ZXN0cy5hbm5vdGF0aW9ucy5UeXBlLk9uZTsKKworQFR5
cGUoImMiKQorcHVibGljIGNsYXNzIFggZXh0ZW5kcyBAVHlwZSgicyIpIE9iamVjdCBpbXBsZW1l
bnRzIEBUeXBlKCJpMSIpIEksIEBUeXBlKCJpMiIpIEogeworCUBUeXBlKCJmIikgU3RyaW5nIF9m
aWVsZCA9IG51bGw7CisJQFR5cGUoImYxIikgWCBfZmllbGQxID0gbnVsbDsKKwlAVHlwZSQxIEBP
bmUgU3RyaW5nIF9maWVsZDIgPSBudWxsOworCVggX2ZpZWxkMyA9IG51bGw7CisJWC4gQFR5cGUo
Inh5IikgWFkgeHk7CisJcHVibGljIHZvaWQgbm9Bbm5vdGF0aW9uSGVyZSgpIHsKKwl9CisJQERl
cHJlY2F0ZWQgQFR5cGUoIm0iKSBTdHJpbmcgZm9vKCkgeworCQlyZXR1cm4gbnVsbDsKKwl9CisJ
dm9pZCBiYXIoQFR5cGUoInAxIikgU3RyaW5nIHAxLCBAVHlwZSgicDIiKSBTdHJpbmcgcDIpIHt9
CisJcHVibGljIHZvaWQgYmFyMihAVHlwZSgicmVjZWl2ZXIiKSBYIHRoaXMpIHt9CisJY2xhc3Mg
WFkge30KK30KKworaW50ZXJmYWNlIEkge30KK2ludGVyZmFjZSBKIHt9CmRpZmYgLS1naXQgcmVz
b3VyY2VzL3RhcmdldHMvbW9kZWw4L1kuamF2YSByZXNvdXJjZXMvdGFyZ2V0cy9tb2RlbDgvWS5q
YXZhCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAuLjljN2YyYjkKLS0tIC9kZXYv
bnVsbAorKysgcmVzb3VyY2VzL3RhcmdldHMvbW9kZWw4L1kuamF2YQpAQCAtMCwwICsxLDI4IEBA
CisvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKgorICogQ29weXJpZ2h0IChjKSAyMDEzIElCTSBDb3Jw
b3JhdGlvbi4KKyAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFj
Y29tcGFueWluZyBtYXRlcmlhbHMKKyAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVy
bXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAorICogd2hpY2ggYWNjb21wYW5p
ZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKKyAqIGh0dHA6Ly93d3cu
ZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCisgKiAKKyAqIFRoaXMgaXMgYW4gaW1wbGVt
ZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQgc3BlY2lmaWNhdGlvbiBkZXZlbG9wZWQgdW5kZXIg
dGhlIEphdmEKKyAqIENvbW11bml0eSBQcm9jZXNzIChKQ1ApIGFuZCBpcyBtYWRlIGF2YWlsYWJs
ZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiBwdXJwb3NlcworICogb25seS4gVGhlIGNvZGUg
aXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkgc3BlY2lmaWNhdGlvbiBvZiB0aGUgSkNQLgorICog
CisgKiBDb250cmlidXRvcnM6CisgKiAgICAgSUJNIENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkg
YW5kIGltcGxlbWVudGF0aW9uCisgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KK3BhY2thZ2UgdGFy
Z2V0cy5tb2RlbDg7CisKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29tcGlsZXIuYXB0LnRlc3Rz
LmFubm90YXRpb25zLlR5cGU7CisKK3B1YmxpYyBjbGFzcyBZIHsKKwlAVHlwZSgiZiIpIFN0cmlu
ZyBAVHlwZSgiZjEiKSBbXSBAVHlwZSgiZjIiKSBbXSBfZmllbGQyIEBUeXBlKCJmMyIpIFtdLCBf
ZmllbGQzIEBUeXBlKCJmNCIpIFtdW10gPSBudWxsOworCQorCUBEZXByZWNhdGVkIEBUeXBlKCJt
IikgU3RyaW5nIEBUeXBlKCJtMSIpIFtdIGZvbygpIEBUeXBlKCJtMiIpIFtdIEBUeXBlKCJtMyIp
IFtdIHsKKwkJcmV0dXJuIG51bGw7CisJfQorCXZvaWQgYmFyIChAVHlwZSgicDEiKSBTdHJpbmcg
W10gYSBAVHlwZSgicDIiKSBbXSwgQFR5cGUoInAzIikgaW50IEBUeXBlKCJwNCIpIFtdIGIgW10g
QFR5cGUoInA1IikgW10pIHt9CisJdm9pZCBmb28yKCkgdGhyb3dzIEBUeXBlKCJlMSIpIE51bGxQ
b2ludGVyRXhjZXB0aW9uLCBAVHlwZSgiZTIiKSBBcnJheUluZGV4T3V0T2ZCb3VuZHNFeGNlcHRp
b24ge30KKwl2b2lkIGJhcjIgKEBUeXBlKCJwMSIpIFN0cmluZyBAVHlwZSgicDIiKSBbXSBAVHlw
ZSgicDMiKSAuLi4gYXJncykge30KK30KZGlmZiAtLWdpdCByZXNvdXJjZXMvdGFyZ2V0cy9tb2Rl
bDgvWi5qYXZhIHJlc291cmNlcy90YXJnZXRzL21vZGVsOC9aLmphdmEKbmV3IGZpbGUgbW9kZSAx
MDA2NDQKaW5kZXggMDAwMDAwMC4uMjQ2MWFhZAotLS0gL2Rldi9udWxsCisrKyByZXNvdXJjZXMv
dGFyZ2V0cy9tb2RlbDgvWi5qYXZhCkBAIC0wLDAgKzEsMjMgQEAKKy8qKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqCisgKiBDb3B5cmlnaHQgKGMpIDIwMTMgSUJNIENvcnBvcmF0aW9uLgorICogQWxsIHJp
Z2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFs
cworICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQ
dWJsaWMgTGljZW5zZSB2MS4wCisgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlv
biwgYW5kIGlzIGF2YWlsYWJsZSBhdAorICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9l
cGwtdjEwLmh0bWwKKyAqIAorICogVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBhbiBlYXJs
eS1kcmFmdCBzcGVjaWZpY2F0aW9uIGRldmVsb3BlZCB1bmRlciB0aGUgSmF2YQorICogQ29tbXVu
aXR5IFByb2Nlc3MgKEpDUCkgYW5kIGlzIG1hZGUgYXZhaWxhYmxlIGZvciB0ZXN0aW5nIGFuZCBl
dmFsdWF0aW9uIHB1cnBvc2VzCisgKiBvbmx5LiBUaGUgY29kZSBpcyBub3QgY29tcGF0aWJsZSB3
aXRoIGFueSBzcGVjaWZpY2F0aW9uIG9mIHRoZSBKQ1AuCisgKiAKKyAqIENvbnRyaWJ1dG9yczoK
KyAqICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24K
KyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqLworcGFja2FnZSB0YXJnZXRzLm1vZGVsODsKKworaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5jb21waWxlci5hcHQudGVzdHMuYW5ub3RhdGlvbnMuVHlwZTsK
KworcHVibGljIGNsYXNzIFogPEBUeXBlKCJ0cDEiKSBLLCBAVHlwZSgidHAyIikgVj4geworCVo8
QFR5cGUoInRhMSIpIFN0cmluZywgQFR5cGUoInRhMiIpIE9iamVjdD4gejEgPSBudWxsOworCXB1
YmxpYyA8QFR5cGUoIm1wMSIpIFQsIEBUeXBlKCJtcDIiKSBVPiB2b2lkIGZvbygpIHt9Cit9CisK
ZGlmZiAtLWdpdCBzcmMvb3JnL2VjbGlwc2UvamR0L2NvbXBpbGVyL2FwdC90ZXN0cy9BbGxUZXN0
cy5qYXZhIHNyYy9vcmcvZWNsaXBzZS9qZHQvY29tcGlsZXIvYXB0L3Rlc3RzL0FsbFRlc3RzLmph
dmEKaW5kZXggYjNkY2ZjNy4uOGMyNjA5NiAxMDA2NDQKLS0tIHNyYy9vcmcvZWNsaXBzZS9qZHQv
Y29tcGlsZXIvYXB0L3Rlc3RzL0FsbFRlc3RzLmphdmEKKysrIHNyYy9vcmcvZWNsaXBzZS9qZHQv
Y29tcGlsZXIvYXB0L3Rlc3RzL0FsbFRlc3RzLmphdmEKQEAgLTEsNCArMSw0IEBACiAvKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDA2LCAyMDExIEJFQSBTeXN0ZW1z
LCBJbmMuIAorICogQ29weXJpZ2h0IChjKSAyMDA2LCAyMDEzIEJFQSBTeXN0ZW1zLCBJbmMuIGFu
ZCBvdGhlcnMKICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFj
Y29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVy
bXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMApAQCAtNiw2ICs2LDExIEBACiAg
KiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbAogICoKKyAqIFRoaXMg
aXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQgc3BlY2lmaWNhdGlvbiBkZXZl
bG9wZWQgdW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0eSBQcm9jZXNzIChKQ1ApIGFuZCBpcyBt
YWRlIGF2YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiBwdXJwb3NlcworICogb25s
eS4gVGhlIGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkgc3BlY2lmaWNhdGlvbiBvZiB0
aGUgSkNQLgorICogCiAgKiBDb250cmlidXRvcnM6CiAgKiAgICB3aGFybGV5QGJlYS5jb20gLSBp
bml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24KKyAqICAgIElCTSBDb3Jwb3JhdGlvbiAtIEph
dmEgOCBzdXBwb3J0CiAgKiAgICAKICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwpAQCAtMzAsNCAr
MzUsNSBAQAogCQlzdWl0ZS5hZGRUZXN0U3VpdGUoTW9kZWxVdGlsVGVzdHMuY2xhc3MpOwogCQlz
dWl0ZS5hZGRUZXN0U3VpdGUoTmVnYXRpdmVUZXN0cy5jbGFzcyk7CisJCXN1aXRlLmFkZFRlc3RT
dWl0ZShKYXZhOEVsZW1lbnRzVGVzdHMuY2xhc3MpOwogCQlyZXR1cm4gc3VpdGU7CiAJfQpkaWZm
IC0tZ2l0IHNyYy9vcmcvZWNsaXBzZS9qZHQvY29tcGlsZXIvYXB0L3Rlc3RzL0phdmE4RWxlbWVu
dHNUZXN0cy5qYXZhIHNyYy9vcmcvZWNsaXBzZS9qZHQvY29tcGlsZXIvYXB0L3Rlc3RzL0phdmE4
RWxlbWVudHNUZXN0cy5qYXZhCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAuLmEx
NzE3OGQKLS0tIC9kZXYvbnVsbAorKysgc3JjL29yZy9lY2xpcHNlL2pkdC9jb21waWxlci9hcHQv
dGVzdHMvSmF2YThFbGVtZW50c1Rlc3RzLmphdmEKQEAgLTAsMCArMSwyMDEgQEAKKy8qKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqCisgKiBDb3B5cmlnaHQgKGMpIDIwMTMgSUJNIENvcnBvcmF0aW9uLgor
ICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5n
IG1hdGVyaWFscworICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUg
RWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCisgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRp
c3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdAorICogaHR0cDovL3d3dy5lY2xpcHNlLm9y
Zy9sZWdhbC9lcGwtdjEwLmh0bWwKKyAqCisgKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9m
IGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVyIHRoZSBKYXZhCisg
KiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFibGUgZm9yIHRlc3Rp
bmcgYW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBjb2RlIGlzIG5vdCBjb21w
YXRpYmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KKyAqIAorICogQ29udHJp
YnV0b3JzOgorICogICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1l
bnRhdGlvbgorICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCisKK3BhY2thZ2Ugb3JnLmVjbGlwc2Uu
amR0LmNvbXBpbGVyLmFwdC50ZXN0czsKKworaW1wb3J0IGphdmEuaW8uRmlsZTsKK2ltcG9ydCBq
YXZhLmlvLklPRXhjZXB0aW9uOworaW1wb3J0IGphdmEudXRpbC5BcnJheUxpc3Q7CitpbXBvcnQg
amF2YS51dGlsLkxpc3Q7CisKK2ltcG9ydCBqYXZheC5sYW5nLm1vZGVsLlNvdXJjZVZlcnNpb247
CitpbXBvcnQgamF2YXgudG9vbHMuSmF2YUNvbXBpbGVyOworaW1wb3J0IGphdmF4LnRvb2xzLlRv
b2xQcm92aWRlcjsKKworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci50
b29sLkVjbGlwc2VDb21waWxlcjsKKworaW1wb3J0IGp1bml0LmZyYW1ld29yay5UZXN0Q2FzZTsK
KworcHVibGljIGNsYXNzIEphdmE4RWxlbWVudHNUZXN0cyBleHRlbmRzIFRlc3RDYXNlIHsKKwkK
Kwlwcml2YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmcgVFlQRV9BTk5PVEFUSU9OX1BST0MgPSAib3Jn
LmVjbGlwc2UuamR0LmNvbXBpbGVyLmFwdC50ZXN0cy5wcm9jZXNzb3JzLmVsZW1lbnRzLkphdmE4
RWxlbWVudFByb2Nlc3NvciI7CisKKwlAT3ZlcnJpZGUKKwlwcm90ZWN0ZWQgdm9pZCBzZXRVcCgp
IHRocm93cyBFeGNlcHRpb24geworCQlzdXBlci5zZXRVcCgpOworCQlCYXRjaFRlc3RVdGlscy5p
bml0KCk7CisJfQorCisJcHVibGljIHZvaWQgdGVzdFNFOFNwZWNpZmljcygpIHRocm93cyBFeGNl
cHRpb24geworCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBCYXRjaFRlc3RVdGlscy5nZXRFY2xp
cHNlQ29tcGlsZXIoKTsKKwkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBUWVBFX0FOTk9UQVRJT05f
UFJPQywgInRlc3RTRThTcGVjaWZpY3MiKTsKKwl9CisJcHVibGljIHZvaWQgdGVzdFNFOFNwZWNp
Zmljc1dpdGhKYXZhYygpIHRocm93cyBFeGNlcHRpb24geworCQlKYXZhQ29tcGlsZXIgY29tcGls
ZXIgPSBUb29sUHJvdmlkZXIuZ2V0U3lzdGVtSmF2YUNvbXBpbGVyKCk7CisJCWludGVybmFsVGVz
dChjb21waWxlciwgVFlQRV9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0U0U4U3BlY2lmaWNzIik7CisJ
fQorCXB1YmxpYyB2b2lkIHRlc3RMYW1iZGFTcGVjaWZpY3MoKSB0aHJvd3MgRXhjZXB0aW9uIHsK
KwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gQmF0Y2hUZXN0VXRpbHMuZ2V0RWNsaXBzZUNvbXBp
bGVyKCk7CisJCWludGVybmFsVGVzdChjb21waWxlciwgVFlQRV9BTk5PVEFUSU9OX1BST0MsICJ0
ZXN0TGFtYmRhU3BlY2lmaWNzIik7CisJfQorCXB1YmxpYyB2b2lkIHRlc3RMYW1iZGFTcGVjaWZp
Y3NXaXRoSmF2YWMoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVy
ID0gVG9vbFByb3ZpZGVyLmdldFN5c3RlbUphdmFDb21waWxlcigpOworCQlpbnRlcm5hbFRlc3Qo
Y29tcGlsZXIsIFRZUEVfQU5OT1RBVElPTl9QUk9DLCAidGVzdExhbWJkYVNwZWNpZmljcyIpOwor
CX0KKwlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90YXRpb25zKCkgdGhyb3dzIEV4Y2VwdGlvbiB7
CisJCUphdmFDb21waWxlciBjb21waWxlciA9IEJhdGNoVGVzdFV0aWxzLmdldEVjbGlwc2VDb21w
aWxlcigpOworCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIFRZUEVfQU5OT1RBVElPTl9QUk9DLCAi
dGVzdFR5cGVBbm5vdGF0aW9ucyIpOworCX0KKwlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90YXRp
b25zV2l0aEphdmFjKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCUphdmFDb21waWxlciBjb21waWxl
ciA9IFRvb2xQcm92aWRlci5nZXRTeXN0ZW1KYXZhQ29tcGlsZXIoKTsKKwkJaW50ZXJuYWxUZXN0
KGNvbXBpbGVyLCBUWVBFX0FOTk9UQVRJT05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlvbnMiKTsK
Kwl9CisJcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczEoKSB0aHJvd3MgRXhjZXB0aW9u
IHsKKwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gQmF0Y2hUZXN0VXRpbHMuZ2V0RWNsaXBzZUNv
bXBpbGVyKCk7CisJCWludGVybmFsVGVzdChjb21waWxlciwgVFlQRV9BTk5PVEFUSU9OX1BST0Ms
ICJ0ZXN0VHlwZUFubm90YXRpb25zMSIpOworCX0KKwlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90
YXRpb25zMVdpdGhKYXZhYygpIHRocm93cyBFeGNlcHRpb24geworCQlKYXZhQ29tcGlsZXIgY29t
cGlsZXIgPSBUb29sUHJvdmlkZXIuZ2V0U3lzdGVtSmF2YUNvbXBpbGVyKCk7CisJCWludGVybmFs
VGVzdChjb21waWxlciwgVFlQRV9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0VHlwZUFubm90YXRpb25z
MSIpOworCX0KKwlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90YXRpb25zMigpIHRocm93cyBFeGNl
cHRpb24geworCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBCYXRjaFRlc3RVdGlscy5nZXRFY2xp
cHNlQ29tcGlsZXIoKTsKKwkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBUWVBFX0FOTk9UQVRJT05f
UFJPQywgInRlc3RUeXBlQW5ub3RhdGlvbnMyIik7CisJfQorCXB1YmxpYyB2b2lkIHRlc3RUeXBl
QW5ub3RhdGlvbnMyV2l0aEphdmFjKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCUphdmFDb21waWxl
ciBjb21waWxlciA9IFRvb2xQcm92aWRlci5nZXRTeXN0ZW1KYXZhQ29tcGlsZXIoKTsKKwkJaW50
ZXJuYWxUZXN0KGNvbXBpbGVyLCBUWVBFX0FOTk9UQVRJT05fUFJPQywgInRlc3RUeXBlQW5ub3Rh
dGlvbnMyIik7CisJfQorCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnMzKCkgdGhyb3dz
IEV4Y2VwdGlvbiB7CisJCUphdmFDb21waWxlciBjb21waWxlciA9IEJhdGNoVGVzdFV0aWxzLmdl
dEVjbGlwc2VDb21waWxlcigpOworCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIFRZUEVfQU5OT1RB
VElPTl9QUk9DLCAidGVzdFR5cGVBbm5vdGF0aW9uczMiKTsKKwl9CisJcHVibGljIHZvaWQgdGVz
dFR5cGVBbm5vdGF0aW9uczNXaXRoSmF2YWMoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJSmF2YUNv
bXBpbGVyIGNvbXBpbGVyID0gVG9vbFByb3ZpZGVyLmdldFN5c3RlbUphdmFDb21waWxlcigpOwor
CQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIFRZUEVfQU5OT1RBVElPTl9QUk9DLCAidGVzdFR5cGVB
bm5vdGF0aW9uczMiKTsKKwl9CisJcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczQoKSB0
aHJvd3MgRXhjZXB0aW9uIHsKKwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gQmF0Y2hUZXN0VXRp
bHMuZ2V0RWNsaXBzZUNvbXBpbGVyKCk7CisJCWludGVybmFsVGVzdChjb21waWxlciwgVFlQRV9B
Tk5PVEFUSU9OX1BST0MsICJ0ZXN0VHlwZUFubm90YXRpb25zNCIpOworCX0KKwlwdWJsaWMgdm9p
ZCB0ZXN0VHlwZUFubm90YXRpb25zNFdpdGhKYXZhYygpIHRocm93cyBFeGNlcHRpb24geworCQlK
YXZhQ29tcGlsZXIgY29tcGlsZXIgPSBUb29sUHJvdmlkZXIuZ2V0U3lzdGVtSmF2YUNvbXBpbGVy
KCk7CisJCWludGVybmFsVGVzdChjb21waWxlciwgVFlQRV9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0
VHlwZUFubm90YXRpb25zNCIpOworCX0KKwlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90YXRpb25z
NSgpIHRocm93cyBFeGNlcHRpb24geworCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBCYXRjaFRl
c3RVdGlscy5nZXRFY2xpcHNlQ29tcGlsZXIoKTsKKwkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBU
WVBFX0FOTk9UQVRJT05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlvbnM1Iik7CisJfQorCXB1Ymxp
YyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnM1V2l0aEphdmFjKCkgdGhyb3dzIEV4Y2VwdGlvbiB7
CisJCUphdmFDb21waWxlciBjb21waWxlciA9IFRvb2xQcm92aWRlci5nZXRTeXN0ZW1KYXZhQ29t
cGlsZXIoKTsKKwkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBUWVBFX0FOTk9UQVRJT05fUFJPQywg
InRlc3RUeXBlQW5ub3RhdGlvbnM1Iik7CisJfQorCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3Rh
dGlvbnM2KCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCUphdmFDb21waWxlciBjb21waWxlciA9IEJh
dGNoVGVzdFV0aWxzLmdldEVjbGlwc2VDb21waWxlcigpOworCQlpbnRlcm5hbFRlc3QoY29tcGls
ZXIsIFRZUEVfQU5OT1RBVElPTl9QUk9DLCAidGVzdFR5cGVBbm5vdGF0aW9uczYiKTsKKwl9CisJ
cHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczZXaXRoSmF2YWMoKSB0aHJvd3MgRXhjZXB0
aW9uIHsKKwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gVG9vbFByb3ZpZGVyLmdldFN5c3RlbUph
dmFDb21waWxlcigpOworCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIFRZUEVfQU5OT1RBVElPTl9Q
Uk9DLCAidGVzdFR5cGVBbm5vdGF0aW9uczYiKTsKKwl9CisJcHVibGljIHZvaWQgdGVzdFR5cGVB
bm5vdGF0aW9uczcoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVy
ID0gQmF0Y2hUZXN0VXRpbHMuZ2V0RWNsaXBzZUNvbXBpbGVyKCk7CisJCWludGVybmFsVGVzdChj
b21waWxlciwgVFlQRV9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0VHlwZUFubm90YXRpb25zNyIpOwor
CX0KKwlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90YXRpb25zN1dpdGhKYXZhYygpIHRocm93cyBF
eGNlcHRpb24geworCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBUb29sUHJvdmlkZXIuZ2V0U3lz
dGVtSmF2YUNvbXBpbGVyKCk7CisJCWludGVybmFsVGVzdChjb21waWxlciwgVFlQRV9BTk5PVEFU
SU9OX1BST0MsICJ0ZXN0VHlwZUFubm90YXRpb25zNyIpOworCX0KKwlwdWJsaWMgdm9pZCB0ZXN0
VHlwZUFubm90YXRpb25zOCgpIHRocm93cyBFeGNlcHRpb24geworCQlKYXZhQ29tcGlsZXIgY29t
cGlsZXIgPSBCYXRjaFRlc3RVdGlscy5nZXRFY2xpcHNlQ29tcGlsZXIoKTsKKwkJaW50ZXJuYWxU
ZXN0KGNvbXBpbGVyLCBUWVBFX0FOTk9UQVRJT05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlvbnM4
Iik7CisJfQorCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnM4V2l0aEphdmFjKCkgdGhy
b3dzIEV4Y2VwdGlvbiB7CisJCUphdmFDb21waWxlciBjb21waWxlciA9IFRvb2xQcm92aWRlci5n
ZXRTeXN0ZW1KYXZhQ29tcGlsZXIoKTsKKwkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBUWVBFX0FO
Tk9UQVRJT05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlvbnM4Iik7CisJfQorCXB1YmxpYyB2b2lk
IHRlc3RUeXBlQW5ub3RhdGlvbnM5KCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCUphdmFDb21waWxl
ciBjb21waWxlciA9IEJhdGNoVGVzdFV0aWxzLmdldEVjbGlwc2VDb21waWxlcigpOworCQlpbnRl
cm5hbFRlc3QoY29tcGlsZXIsIFRZUEVfQU5OT1RBVElPTl9QUk9DLCAidGVzdFR5cGVBbm5vdGF0
aW9uczkiKTsKKwl9CisJcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczlXaXRoSmF2YWMo
KSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gVG9vbFByb3Zp
ZGVyLmdldFN5c3RlbUphdmFDb21waWxlcigpOworCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIFRZ
UEVfQU5OT1RBVElPTl9QUk9DLCAidGVzdFR5cGVBbm5vdGF0aW9uczkiKTsKKwl9CisJcHVibGlj
IHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczEwKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCVN5c3Rl
bS5vdXQucHJpbnRsbigiRWNsaXBzZSBjb21waWxlcjoiKTsKKwkJSmF2YUNvbXBpbGVyIGNvbXBp
bGVyID0gQmF0Y2hUZXN0VXRpbHMuZ2V0RWNsaXBzZUNvbXBpbGVyKCk7CisJCWludGVybmFsVGVz
dChjb21waWxlciwgVFlQRV9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0VHlwZUFubm90YXRpb25zMTAi
KTsKKwl9CisJcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczEwV2l0aEphdmFjKCkgdGhy
b3dzIEV4Y2VwdGlvbiB7CisJCVN5c3RlbS5vdXQucHJpbnRsbigiSmF2YWMgY29tcGlsZXI6Iik7
CisJCUphdmFDb21waWxlciBjb21waWxlciA9IFRvb2xQcm92aWRlci5nZXRTeXN0ZW1KYXZhQ29t
cGlsZXIoKTsKKwkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBUWVBFX0FOTk9UQVRJT05fUFJPQywg
InRlc3RUeXBlQW5ub3RhdGlvbnMxMCIpOworCX0KKwlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90
YXRpb25zMTEoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJU3lzdGVtLm91dC5wcmludGxuKCJFY2xp
cHNlIGNvbXBpbGVyOiIpOworCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBCYXRjaFRlc3RVdGls
cy5nZXRFY2xpcHNlQ29tcGlsZXIoKTsKKwkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBUWVBFX0FO
Tk9UQVRJT05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlvbnMxMSIpOworCX0KKwlwdWJsaWMgdm9p
ZCB0ZXN0VHlwZUFubm90YXRpb25zMTFXaXRoSmF2YWMoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJ
U3lzdGVtLm91dC5wcmludGxuKCJKYXZhYyBjb21waWxlcjoiKTsKKwkJSmF2YUNvbXBpbGVyIGNv
bXBpbGVyID0gVG9vbFByb3ZpZGVyLmdldFN5c3RlbUphdmFDb21waWxlcigpOworCQlpbnRlcm5h
bFRlc3QoY29tcGlsZXIsIFRZUEVfQU5OT1RBVElPTl9QUk9DLCAidGVzdFR5cGVBbm5vdGF0aW9u
czExIik7CisJfQorCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnMxMigpIHRocm93cyBF
eGNlcHRpb24geworCQlTeXN0ZW0ub3V0LnByaW50bG4oIkVjbGlwc2UgY29tcGlsZXI6Iik7CisJ
CUphdmFDb21waWxlciBjb21waWxlciA9IEJhdGNoVGVzdFV0aWxzLmdldEVjbGlwc2VDb21waWxl
cigpOworCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIFRZUEVfQU5OT1RBVElPTl9QUk9DLCAidGVz
dFR5cGVBbm5vdGF0aW9uczEyIik7CisJfQorCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlv
bnMxMldpdGhKYXZhYygpIHRocm93cyBFeGNlcHRpb24geworCQlTeXN0ZW0ub3V0LnByaW50bG4o
IkphdmFjIGNvbXBpbGVyOiIpOworCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBUb29sUHJvdmlk
ZXIuZ2V0U3lzdGVtSmF2YUNvbXBpbGVyKCk7CisJCWludGVybmFsVGVzdChjb21waWxlciwgVFlQ
RV9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0VHlwZUFubm90YXRpb25zMTIiKTsKKwl9CisKKwlwcml2
YXRlIHZvaWQgaW50ZXJuYWxUZXN0KEphdmFDb21waWxlciBjb21waWxlciwgU3RyaW5nIHByb2Nl
c3NvciwgU3RyaW5nIHRlc3RNZXRob2QpIHRocm93cyBJT0V4Y2VwdGlvbiB7CisJCWlmICghY2Fu
UnVuSmF2YTgoKSkgeworCQkJcmV0dXJuOworCQl9CisJCVN5c3RlbS5jbGVhclByb3BlcnR5KHBy
b2Nlc3Nvcik7CisJCUZpbGUgdGFyZ2V0Rm9sZGVyID0gVGVzdFV0aWxzLmNvbmNhdFBhdGgoQmF0
Y2hUZXN0VXRpbHMuZ2V0U3JjRm9sZGVyTmFtZSgpLCAidGFyZ2V0cyIsICJtb2RlbDgiKTsKKwkJ
QmF0Y2hUZXN0VXRpbHMuY29weVJlc291cmNlcygidGFyZ2V0cy9tb2RlbDgiLCB0YXJnZXRGb2xk
ZXIpOworCisJCUxpc3Q8U3RyaW5nPiBvcHRpb25zID0gbmV3IEFycmF5TGlzdDxTdHJpbmc+KCk7
CisJCW9wdGlvbnMuYWRkKCItQSIgKyBwcm9jZXNzb3IpOworCQlvcHRpb25zLmFkZCgiLUEiICsg
dGVzdE1ldGhvZCk7CisJCS8vIEphdmFjIDEuOCBkb2Vzbid0ICh5ZXQ/KSBzdXBwb3J0IHRoZSAt
MS44IG9wdGlvbgorCQlpZiAoY29tcGlsZXIgaW5zdGFuY2VvZiBFY2xpcHNlQ29tcGlsZXIpIHsK
KwkJCW9wdGlvbnMuYWRkKCItMS44Iik7CisJCX0KKwkJQmF0Y2hUZXN0VXRpbHMuY29tcGlsZVRy
ZWUoY29tcGlsZXIsIG9wdGlvbnMsIHRhcmdldEZvbGRlcik7CisKKwkJLy8gSWYgaXQgc3VjY2Vl
ZGVkLCB0aGUgcHJvY2Vzc29yIHdpbGwgaGF2ZSBzZXQgdGhpcyBwcm9wZXJ0eSB0byAic3VjY2Vl
ZGVkIjsKKwkJLy8gaWYgbm90LCBpdCB3aWxsIHNldCBpdCB0byBhbiBlcnJvciB2YWx1ZS4KKwkJ
YXNzZXJ0RXF1YWxzKCJzdWNjZWVkZWQiLCBTeXN0ZW0uZ2V0UHJvcGVydHkocHJvY2Vzc29yKSk7
CisJfQorCXB1YmxpYyBib29sZWFuIGNhblJ1bkphdmE4KCkgeworCQl0cnkgeworCQkJU291cmNl
VmVyc2lvbi52YWx1ZU9mKCJSRUxFQVNFXzgiKTsKKwkJfSBjYXRjaChJbGxlZ2FsQXJndW1lbnRF
eGNlcHRpb24gaWFlKSB7CisJCQlyZXR1cm4gZmFsc2U7CisJCX0KKwkJcmV0dXJuIHRydWU7CisJ
fQorCUBPdmVycmlkZQorCXByb3RlY3RlZCB2b2lkIHRlYXJEb3duKCkgdGhyb3dzIEV4Y2VwdGlv
biB7CisJCXN1cGVyLnRlYXJEb3duKCk7CisJfQorfQojUCBvcmcuZWNsaXBzZS5qZHQuY29tcGls
ZXIuYXB0CmRpZmYgLS1naXQgc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
cHQvZGlzcGF0Y2gvQW5ub3RhdGlvbkRpc2NvdmVyeVZpc2l0b3IuamF2YSBzcmMvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9kaXNwYXRjaC9Bbm5vdGF0aW9uRGlzY292ZXJ5
VmlzaXRvci5qYXZhCmluZGV4IDQ1MTY4ZjcuLjc0NDI4ZDggMTAwNjQ0Ci0tLSBzcmMvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9kaXNwYXRjaC9Bbm5vdGF0aW9uRGlzY292
ZXJ5VmlzaXRvci5qYXZhCisrKyBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FwdC9kaXNwYXRjaC9Bbm5vdGF0aW9uRGlzY292ZXJ5VmlzaXRvci5qYXZhCkBAIC0yNSw0ICsy
NSw1IEBACiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5NZXRo
b2REZWNsYXJhdGlvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
YXN0LlR5cGVEZWNsYXJhdGlvbjsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29t
cGlsZXIuYXN0LlR5cGVQYXJhbWV0ZXI7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFs
LmNvbXBpbGVyLmltcGwuUmVmZXJlbmNlQ29udGV4dDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkFubm90YXRpb25CaW5kaW5nOwpAQCAtMzYsNCArMzcs
NSBAQAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuTWV0
aG9kU2NvcGU7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1
cC5Tb3VyY2VUeXBlQmluZGluZzsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29t
cGlsZXIubG9va3VwLlR5cGVWYXJpYWJsZUJpbmRpbmc7CiAKIC8qKgpAQCAtOTMsMTIgKzk1LDUg
QEAKIAkJCQkJY29uc3RydWN0b3JCaW5kaW5nKTsKIAkJfQotCQlBcmd1bWVudFtdIGFyZ3VtZW50
cyA9IGNvbnN0cnVjdG9yRGVjbGFyYXRpb24uYXJndW1lbnRzOwotCQlpZiAoYXJndW1lbnRzICE9
IG51bGwpIHsKLQkJCWludCBhcmd1bWVudExlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7Ci0JCQlm
b3IgKGludCBpID0gMDsgaSA8IGFyZ3VtZW50TGVuZ3RoOyBpKyspIHsKLQkJCQlhcmd1bWVudHNb
aV0udHJhdmVyc2UodGhpcywgY29uc3RydWN0b3JEZWNsYXJhdGlvbi5zY29wZSk7Ci0JCQl9Ci0J
CX0KLQkJcmV0dXJuIGZhbHNlOworCQlyZXR1cm4gdHJ1ZTsKIAl9CiAKQEAgLTExMyw0ICsxMDgs
MzAgQEAKIAkJCSgoU291cmNlVHlwZUJpbmRpbmcpIGZpZWxkQmluZGluZy5kZWNsYXJpbmdDbGFz
cykucmVzb2x2ZVR5cGVGb3IoZmllbGRCaW5kaW5nKTsKIAkJCXRoaXMucmVzb2x2ZUFubm90YXRp
b25zKHNjb3BlLCBhbm5vdGF0aW9ucywgZmllbGRCaW5kaW5nKTsKKwkJfQorCQlyZXR1cm4gZmFs
c2U7CisJfQorCisJQE92ZXJyaWRlCisJcHVibGljIGJvb2xlYW4gdmlzaXQoVHlwZVBhcmFtZXRl
ciB0eXBlUGFyYW1ldGVyLCBDbGFzc1Njb3BlIHNjb3BlKSB7CisJCUFubm90YXRpb25bXSBhbm5v
dGF0aW9ucyA9IHR5cGVQYXJhbWV0ZXIuYW5ub3RhdGlvbnM7CisJCWlmIChhbm5vdGF0aW9ucyAh
PSBudWxsKSB7CisJCQlUeXBlVmFyaWFibGVCaW5kaW5nIGJpbmRpbmcgPSB0eXBlUGFyYW1ldGVy
LmJpbmRpbmc7CisJCQlpZiAoYmluZGluZyA9PSBudWxsKSB7CisJCQkJcmV0dXJuIGZhbHNlOwor
CQkJfQorCQkJdGhpcy5yZXNvbHZlQW5ub3RhdGlvbnMoc2NvcGUucmVmZXJlbmNlQ29udGV4dC5p
bml0aWFsaXplclNjb3BlLCBhbm5vdGF0aW9ucywgYmluZGluZyk7CisJCX0KKwkJcmV0dXJuIGZh
bHNlOworCX0KKwkKKwlAT3ZlcnJpZGUKKwlwdWJsaWMgYm9vbGVhbiB2aXNpdChUeXBlUGFyYW1l
dGVyIHR5cGVQYXJhbWV0ZXIsIEJsb2NrU2NvcGUgc2NvcGUpIHsKKwkJQW5ub3RhdGlvbltdIGFu
bm90YXRpb25zID0gdHlwZVBhcmFtZXRlci5hbm5vdGF0aW9uczsKKwkJaWYgKGFubm90YXRpb25z
ICE9IG51bGwpIHsKKwkJCVR5cGVWYXJpYWJsZUJpbmRpbmcgYmluZGluZyA9IHR5cGVQYXJhbWV0
ZXIuYmluZGluZzsKKwkJCWlmIChiaW5kaW5nID09IG51bGwpIHsKKwkJCQlyZXR1cm4gZmFsc2U7
CisJCQl9CisJCQl0aGlzLnJlc29sdmVBbm5vdGF0aW9ucyhzY29wZSwgYW5ub3RhdGlvbnMsIGJp
bmRpbmcpOwogCQl9CiAJCXJldHVybiBmYWxzZTsKQEAgLTEzMSwxMyArMTUyLDUgQEAKIAkJCQkJ
bWV0aG9kQmluZGluZyk7CiAJCX0KLQotCQlBcmd1bWVudFtdIGFyZ3VtZW50cyA9IG1ldGhvZERl
Y2xhcmF0aW9uLmFyZ3VtZW50czsKLQkJaWYgKGFyZ3VtZW50cyAhPSBudWxsKSB7Ci0JCQlpbnQg
YXJndW1lbnRMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoOwotCQkJZm9yIChpbnQgaSA9IDA7IGkg
PCBhcmd1bWVudExlbmd0aDsgaSsrKSB7Ci0JCQkJYXJndW1lbnRzW2ldLnRyYXZlcnNlKHRoaXMs
IG1ldGhvZERlY2xhcmF0aW9uLnNjb3BlKTsKLQkJCX0KLQkJfQotCQlyZXR1cm4gZmFsc2U7CisJ
CXJldHVybiB0cnVlOwogCX0KIApAQCAtMTc4LDggKzE5MSwxMiBAQAogCQkJQW5ub3RhdGlvbltd
IGFubm90YXRpb25zLAogCQkJQmluZGluZyBjdXJyZW50QmluZGluZykgewotCQlBU1ROb2RlLnJl
c29sdmVBbm5vdGF0aW9ucyhzY29wZSwgYW5ub3RhdGlvbnMsIGN1cnJlbnRCaW5kaW5nKTsKLQkJ
CisJCWJvb2xlYW4gcmVzb2x2ZWQgPSBmYWxzZTsKIAkJZm9yIChBbm5vdGF0aW9uIGFubm90YXRp
b24gOiBhbm5vdGF0aW9ucykgewogCQkJQW5ub3RhdGlvbkJpbmRpbmcgYmluZGluZyA9IGFubm90
YXRpb24uZ2V0Q29tcGlsZXJBbm5vdGF0aW9uKCk7CisJCQlpZiAoYmluZGluZyA9PSBudWxsICYm
ICFyZXNvbHZlZCkgeworCQkJCUFTVE5vZGUucmVzb2x2ZUFubm90YXRpb25zKHNjb3BlLCBhbm5v
dGF0aW9ucywgY3VycmVudEJpbmRpbmcsIHRydWUpOworCQkJCWJpbmRpbmcgPSBhbm5vdGF0aW9u
LmdldENvbXBpbGVyQW5ub3RhdGlvbigpOworCQkJCXJlc29sdmVkID0gdHJ1ZTsKKwkJCX0KIAkJ
CWlmIChiaW5kaW5nICE9IG51bGwpIHsgLy8gYmluZGluZyBzaG91bGQgYmUgcmVzb2x2ZWQsIGJ1
dCBpbiBjYXNlIGl0J3Mgbm90LCBpZ25vcmUgaXQKIAkJCQlUeXBlRWxlbWVudCBhbm5vID0gKFR5
cGVFbGVtZW50KV9mYWN0b3J5Lm5ld0VsZW1lbnQoYmluZGluZy5nZXRBbm5vdGF0aW9uVHlwZSgp
KTsgCmRpZmYgLS1naXQgc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQv
bW9kZWwvQXJyYXlUeXBlSW1wbC5qYXZhIHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvYXB0L21vZGVsL0FycmF5VHlwZUltcGwuamF2YQppbmRleCAwYTRjZjY5Li5hMGIxN2Uw
IDEwMDY0NAotLS0gc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQvbW9k
ZWwvQXJyYXlUeXBlSW1wbC5qYXZhCisrKyBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FwdC9tb2RlbC9BcnJheVR5cGVJbXBsLmphdmEKQEAgLTEsNCArMSw0IEBACiAvKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDA3LCAyMDExIEJFQSBTeXN0
ZW1zLCBJbmMuIAorICogQ29weXJpZ2h0IChjKSAyMDA3LCAyMDEzIEJFQSBTeXN0ZW1zLCBJbmMu
IGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRo
ZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhl
IHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKQEAgLTYsNyArNiwxMiBA
QAogICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKICAqCisgKiBU
aGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24g
ZGV2ZWxvcGVkIHVuZGVyIHRoZSBKYXZhCisgKiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQg
aXMgbWFkZSBhdmFpbGFibGUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAq
IG9ubHkuIFRoZSBjb2RlIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24g
b2YgdGhlIEpDUC4KKyAqCiAgKiBDb250cmlidXRvcnM6CiAgKiAgICB3aGFybGV5QGJlYS5jb20g
LSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24KICAqICAgIElCTSBDb3Jwb3JhdGlvbiAt
IGZpeCBmb3IgMzQyNTk4CisgKiAgICBJQk0gQ29ycG9yYXRpb24gLSBKYXZhIDggc3VwcG9ydAog
ICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKiovCiAKQEAgLTE5LDUgKzI0LDcgQEAKIAogaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hcHQuZGlzcGF0Y2guQmFzZVByb2Nlc3Np
bmdFbnZJbXBsOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29r
dXAuQW5ub3RhdGlvbkJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNv
bXBpbGVyLmxvb2t1cC5BcnJheUJpbmRpbmc7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVy
bmFsLmNvbXBpbGVyLmxvb2t1cC5CaW5kaW5nOwogCiAvKioKQEAgLTQ1LDUgKzUyLDE4IEBACiAJ
CXJldHVybiB2LnZpc2l0QXJyYXkodGhpcywgcCk7CiAJfQotCQorCisJcHJvdGVjdGVkIEFubm90
YXRpb25CaW5kaW5nW10gZ2V0QW5ub3RhdGlvbkJpbmRpbmdzKCkgeworCQlBbm5vdGF0aW9uQmlu
ZGluZ1tdIG9sZGllcyA9ICgoQXJyYXlCaW5kaW5nKV9iaW5kaW5nKS5nZXRUeXBlQW5ub3RhdGlv
bnMoKTsKKwkJQW5ub3RhdGlvbkJpbmRpbmdbXSBuZXdiaWVzID0gQmluZGluZy5OT19BTk5PVEFU
SU9OUzsKKwkJLy8gU3RyaXAgb3V0IHRoZSBhbm5vdGF0aW9ucyBvbiBzdWIgYXJyYXlzCisJCWZv
ciAoaW50IGkgPSAwLCBsZW5ndGggPSBvbGRpZXMgPT0gbnVsbCA/IDAgOiBvbGRpZXMubGVuZ3Ro
OyBpIDwgbGVuZ3RoOyBpKyspIHsKKwkJCWlmIChvbGRpZXNbaV0gPT0gbnVsbCkgeworCQkJCVN5
c3RlbS5hcnJheWNvcHkob2xkaWVzLCAwLCBuZXdiaWVzID0gbmV3IEFubm90YXRpb25CaW5kaW5n
W2ldLCAwLCBpKTsKKwkJCQlyZXR1cm4gbmV3YmllczsKKwkJCX0KKwkJfQorCQlyZXR1cm4gbmV3
YmllczsKKwl9CisKIAkvKiAobm9uLUphdmFkb2MpCiAJICogQHNlZSBqYXZheC5sYW5nLm1vZGVs
LnR5cGUuVHlwZU1pcnJvciNnZXRLaW5kKCkKZGlmZiAtLWdpdCBzcmMvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9FbGVtZW50SW1wbC5qYXZhIHNyYy9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL0VsZW1lbnRJbXBsLmphdmEKaW5k
ZXggOTk4ZTNkNi4uNDQxNDZhNCAxMDA2NDQKLS0tIHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXB0L21vZGVsL0VsZW1lbnRJbXBsLmphdmEKKysrIHNyYy9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL0VsZW1lbnRJbXBsLmphdmEKQEAgLTEs
NCArMSw0IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDA1
LCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDA1
LCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZl
ZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1h
ZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5z
ZSB2MS4wCkBAIC02LDQgKzYsOCBAQAogICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9l
cGwtdjEwLmh0bWwKICAqCisgKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGFuIGVhcmx5
LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVyIHRoZSBKYXZhCisgKiBDb21tdW5p
dHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFibGUgZm9yIHRlc3RpbmcgYW5kIGV2
YWx1YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBjb2RlIGlzIG5vdCBjb21wYXRpYmxlIHdp
dGggYW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KKyAqIAogICogQ29udHJpYnV0b3JzOgog
ICogICAgIElCTSBDb3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgpA
QCAtMTIsNSArMTYsNCBAQAogCiBpbXBvcnQgamF2YS5sYW5nLmFubm90YXRpb24uQW5ub3RhdGlv
bjsKLWltcG9ydCBqYXZhLmxhbmcucmVmbGVjdC5Qcm94eTsKIGltcG9ydCBqYXZhLnV0aWwuQ29s
bGVjdGlvbnM7CiBpbXBvcnQgamF2YS51dGlsLkxpc3Q7CkBAIC0yNSw5ICsyOCw3IEBACiBpbXBv
cnQgamF2YXgubGFuZy5tb2RlbC51dGlsLkVsZW1lbnRzOwogCi1pbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmNvcmUuY29tcGlsZXIuQ2hhck9wZXJhdGlvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIuYXB0LmRpc3BhdGNoLkJhc2VQcm9jZXNzaW5nRW52SW1wbDsKIGlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkFubm90YXRpb25C
aW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAu
QmluZGluZzsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3Vw
LlJlZmVyZW5jZUJpbmRpbmc7CiAKIC8qKgpAQCAtNTEsMzUgKzUyLDcgQEAKIAl9CiAKLQlAU3Vw
cHJlc3NXYXJuaW5ncygidW5jaGVja2VkIikgLy8gZm9yIGNhc3Qgb2YgbmV3UHJveHlJbnN0YW5j
ZSgpIHRvIEEKIAlAT3ZlcnJpZGUKIAlwdWJsaWMgPEEgZXh0ZW5kcyBBbm5vdGF0aW9uPiBBIGdl
dEFubm90YXRpb24oQ2xhc3M8QT4gYW5ub3RhdGlvbkNsYXNzKSB7Ci0JCUFubm90YXRpb25CaW5k
aW5nW10gYW5ub0luc3RhbmNlcyA9IGdldEFubm90YXRpb25CaW5kaW5ncygpOwotCQlpZiggYW5u
b0luc3RhbmNlcyA9PSBudWxsIHx8IGFubm9JbnN0YW5jZXMubGVuZ3RoID09IDAgfHwgYW5ub3Rh
dGlvbkNsYXNzID09IG51bGwgKSAKLQkJCXJldHVybiBudWxsOwotCi0JCVN0cmluZyBhbm5vVHlw
ZU5hbWUgPSBhbm5vdGF0aW9uQ2xhc3MuZ2V0TmFtZSgpOwotCQlpZiggYW5ub1R5cGVOYW1lID09
IG51bGwgKSByZXR1cm4gbnVsbDsKLQkJYW5ub1R5cGVOYW1lID0gYW5ub1R5cGVOYW1lLnJlcGxh
Y2UoJyQnLCAnLicpOwotCQlmb3IoIEFubm90YXRpb25CaW5kaW5nIGFubm9JbnN0YW5jZSA6IGFu
bm9JbnN0YW5jZXMpIHsKLQkJCWlmIChhbm5vSW5zdGFuY2UgPT0gbnVsbCkKLQkJCQljb250aW51
ZTsKLQkJCVJlZmVyZW5jZUJpbmRpbmcgYmluZGluZyA9IGFubm9JbnN0YW5jZS5nZXRBbm5vdGF0
aW9uVHlwZSgpOwotCQkJaWYgKCBiaW5kaW5nICE9IG51bGwgJiYgYmluZGluZy5pc0Fubm90YXRp
b25UeXBlKCkgKSB7Ci0JCQkJY2hhcltdIHFOYW1lOwotCQkJCWlmIChiaW5kaW5nLmlzTWVtYmVy
VHlwZSgpKSB7Ci0JCQkJCXFOYW1lID0gQ2hhck9wZXJhdGlvbi5jb25jYXRXaXRoKGJpbmRpbmcu
ZW5jbG9zaW5nVHlwZSgpLmNvbXBvdW5kTmFtZSwgYmluZGluZy5zb3VyY2VOYW1lLCAnLicpOwot
CQkJCQlDaGFyT3BlcmF0aW9uLnJlcGxhY2UocU5hbWUsICckJywgJy4nKTsKLQkJCQl9IGVsc2Ug
ewotCQkJCQlxTmFtZSA9IENoYXJPcGVyYXRpb24uY29uY2F0V2l0aChiaW5kaW5nLmNvbXBvdW5k
TmFtZSwgJy4nKTsKLQkJCQl9Ci0JCQkJaWYoIGFubm9UeXBlTmFtZS5lcXVhbHMobmV3IFN0cmlu
ZyhxTmFtZSkpICl7Ci0JCQkJCUFubm90YXRpb25NaXJyb3JJbXBsIGFubm9NaXJyb3IgPQotCQkJ
CQkJKEFubm90YXRpb25NaXJyb3JJbXBsKV9lbnYuZ2V0RmFjdG9yeSgpLm5ld0Fubm90YXRpb25N
aXJyb3IoYW5ub0luc3RhbmNlKTsKLQkJCQkJcmV0dXJuIChBKVByb3h5Lm5ld1Byb3h5SW5zdGFu
Y2UoYW5ub3RhdGlvbkNsYXNzLmdldENsYXNzTG9hZGVyKCksCi0JCQkJCQkJbmV3IENsYXNzW117
IGFubm90YXRpb25DbGFzcyB9LCBhbm5vTWlycm9yICk7Ci0JCQkJfQotCQkJfQotCQl9Ci0JCXJl
dHVybiBudWxsOyAKKwkJcmV0dXJuIF9lbnYuZ2V0RmFjdG9yeSgpLmdldEFubm90YXRpb24oZ2V0
QW5ub3RhdGlvbkJpbmRpbmdzKCksIGFubm90YXRpb25DbGFzcyk7CiAJfQogCQpAQCAtOTIsNCAr
NjUsOCBAQAogCXB1YmxpYyBMaXN0PD8gZXh0ZW5kcyBBbm5vdGF0aW9uTWlycm9yPiBnZXRBbm5v
dGF0aW9uTWlycm9ycygpIHsKIAkJcmV0dXJuIF9lbnYuZ2V0RmFjdG9yeSgpLmdldEFubm90YXRp
b25NaXJyb3JzKGdldEFubm90YXRpb25CaW5kaW5ncygpKTsKKwl9CisKKwlwdWJsaWMgPEEgZXh0
ZW5kcyBBbm5vdGF0aW9uPiBBW10gZ2V0QW5ub3RhdGlvbnNCeVR5cGUoQ2xhc3M8QT4gYW5ub3Rh
dGlvblR5cGUpIHsKKwkJcmV0dXJuIF9lbnYuZ2V0RmFjdG9yeSgpLmdldEFubm90YXRpb25zQnlU
eXBlKGdldEFubm90YXRpb25CaW5kaW5ncygpLCBhbm5vdGF0aW9uVHlwZSk7CQogCX0KIApAQCAt
MTMyLDUgKzEwOSwxMiBAQAogCUBPdmVycmlkZQogCXB1YmxpYyBTdHJpbmcgdG9TdHJpbmcoKSB7
Ci0JCXJldHVybiBfYmluZGluZy50b1N0cmluZygpOworCQlTdHJpbmdCdWZmZXIgYnVmID0gbmV3
IFN0cmluZ0J1ZmZlcigpOworCQlMaXN0PD8gZXh0ZW5kcyBBbm5vdGF0aW9uTWlycm9yPiBhbm5v
dHMgPSBnZXRBbm5vdGF0aW9uTWlycm9ycygpOworCQlmb3IgKEFubm90YXRpb25NaXJyb3IgYW5u
b3RhdGlvbk1pcnJvciA6IGFubm90cykgeworCQkJYnVmLmFwcGVuZChhbm5vdGF0aW9uTWlycm9y
LnRvU3RyaW5nKCkpOworCQkJYnVmLmFwcGVuZCgnICcpOworCQl9CisJCWJ1Zi5hcHBlbmQoX2Jp
bmRpbmcudG9TdHJpbmcoKSk7CisJCXJldHVybiBidWYudG9TdHJpbmcoKTsKIAl9CiAKZGlmZiAt
LWdpdCBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9FbGVt
ZW50c0ltcGwuamF2YSBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9t
b2RlbC9FbGVtZW50c0ltcGwuamF2YQppbmRleCA4ZTc2NjRhLi4zMmJmYzJmIDEwMDY0NAotLS0g
c3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQvbW9kZWwvRWxlbWVudHNJ
bXBsLmphdmEKKysrIHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21v
ZGVsL0VsZW1lbnRzSW1wbC5qYXZhCkBAIC0xLDQgKzEsNCBAQAogLyoqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwNiwgMjAxMiBCRUEgU3lzdGVtcywgSW5jLiBhbmQg
b3RoZXJzCisgKiBDb3B5cmlnaHQgKGMpIDIwMDYsIDIwMTMgQkVBIFN5c3RlbXMsIEluYy4gYW5k
IG90aGVycwogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNj
b21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJt
cyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCkBAIC02LDggKzYsMTMgQEAKICAq
IGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCiAgKgorICogVGhpcyBp
cyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBhbiBlYXJseS1kcmFmdCBzcGVjaWZpY2F0aW9uIGRldmVs
b3BlZCB1bmRlciB0aGUgSmF2YQorICogQ29tbXVuaXR5IFByb2Nlc3MgKEpDUCkgYW5kIGlzIG1h
ZGUgYXZhaWxhYmxlIGZvciB0ZXN0aW5nIGFuZCBldmFsdWF0aW9uIHB1cnBvc2VzCisgKiBvbmx5
LiBUaGUgY29kZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGFueSBzcGVjaWZpY2F0aW9uIG9mIHRo
ZSBKQ1AuCisgKiAKICAqIENvbnRyaWJ1dG9yczoKICAqICAgIHdoYXJsZXlAYmVhLmNvbSAtIGlu
aXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgogICogICAgSUJNIENvcnBvcmF0aW9uIC0gRml4
IGZvciBidWcgMzQxNDk0CiAgKiAgICBJQk0gQ29ycG9yYXRpb24gLSBGaXggZm9yIGJ1ZyAzMjg1
NzUKKyAqICAgIElCTSBDb3Jwb3JhdGlvbiAtIEphdmEgOCBzdXBwb3J0CiAgKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKi8KIApAQCAtNzAzLDMgKzcwOCwxMyBAQAogCX0KIAorCXB1YmxpYyBib29sZWFu
IGlzRnVuY3Rpb25hbEludGVyZmFjZShUeXBlRWxlbWVudCB0eXBlKSB7CisJCWlmICh0eXBlICE9
IG51bGwgJiYgdHlwZS5nZXRLaW5kKCkgPT0gRWxlbWVudEtpbmQuSU5URVJGQUNFKSB7CisJCQlS
ZWZlcmVuY2VCaW5kaW5nIGJpbmRpbmcgPSAoUmVmZXJlbmNlQmluZGluZykoKFR5cGVFbGVtZW50
SW1wbCkgdHlwZSkuX2JpbmRpbmc7CisJCQlpZiAoYmluZGluZyBpbnN0YW5jZW9mIFNvdXJjZVR5
cGVCaW5kaW5nKSB7CisJCQkJcmV0dXJuIGJpbmRpbmcuaXNGdW5jdGlvbmFsSW50ZXJmYWNlKCgo
U291cmNlVHlwZUJpbmRpbmcpIGJpbmRpbmcpLnNjb3BlKTsKKwkJCX0KKwkJfQorCQlyZXR1cm4g
ZmFsc2U7CisJfQorCiB9CmRpZmYgLS1naXQgc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hcHQvbW9kZWwvRXJyb3JUeXBlRWxlbWVudC5qYXZhIHNyYy9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL0Vycm9yVHlwZUVsZW1lbnQuamF2YQppbmRl
eCAzZWNjYmY5Li5iNmJlMzhlIDEwMDY0NAotLS0gc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hcHQvbW9kZWwvRXJyb3JUeXBlRWxlbWVudC5qYXZhCisrKyBzcmMvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9FcnJvclR5cGVFbGVtZW50Lmph
dmEKQEAgLTEsOCArMSwxMiBAQAogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdo
dCAoYykgMjAwNywgMjAxMSBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdo
dCAoYykgMjAwNywgMjAxMyBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAqIEFsbCByaWdo
dHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMK
ICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVi
bGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24s
IGFuZCBpcyBhdmFpbGFibGUgYXQKICAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBs
LXYxMC5odG1sCisgKgorICogVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBhbiBlYXJseS1k
cmFmdCBzcGVjaWZpY2F0aW9uIGRldmVsb3BlZCB1bmRlciB0aGUgSmF2YQorICogQ29tbXVuaXR5
IFByb2Nlc3MgKEpDUCkgYW5kIGlzIG1hZGUgYXZhaWxhYmxlIGZvciB0ZXN0aW5nIGFuZCBldmFs
dWF0aW9uIHB1cnBvc2VzCisgKiBvbmx5LiBUaGUgY29kZSBpcyBub3QgY29tcGF0aWJsZSB3aXRo
IGFueSBzcGVjaWZpY2F0aW9uIG9mIHRoZSBKQ1AuCiAgKgogICogQ29udHJpYnV0b3JzOgpAQCAt
MTEwLDQgKzExNCwxMCBAQAogCQlyZXR1cm4gQ29sbGVjdGlvbnMuZW1wdHlMaXN0KCk7CiAJfQor
CQorCUBTdXBwcmVzc1dhcm5pbmdzKCJ1bmNoZWNrZWQiKQorCXB1YmxpYyA8QSBleHRlbmRzIEFu
bm90YXRpb24+IEFbXSBnZXRBbm5vdGF0aW9uc0J5VHlwZShDbGFzczxBPiBhbm5vdGF0aW9uVHlw
ZSkgeworCQlyZXR1cm4gKEFbXSkgRmFjdG9yeS5FTVBUWV9BTk5PVEFUSU9OUzsKKwl9CisKIAog
CS8qIChub24tSmF2YWRvYykKZGlmZiAtLWdpdCBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FwdC9tb2RlbC9FcnJvclR5cGVJbXBsLmphdmEgc3JjL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hcHQvbW9kZWwvRXJyb3JUeXBlSW1wbC5qYXZhCmluZGV4IDZi
ODI2YjcuLmY3ZDczNjcgMTAwNjQ0Ci0tLSBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FwdC9tb2RlbC9FcnJvclR5cGVJbXBsLmphdmEKKysrIHNyYy9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL0Vycm9yVHlwZUltcGwuamF2YQpAQCAtMSw4
ICsxLDEyIEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDA3
LCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDA3
LCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZl
ZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1h
ZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5z
ZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2
YWlsYWJsZSBhdAogICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwK
KyAqCisgKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNp
ZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVyIHRoZSBKYXZhCisgKiBDb21tdW5pdHkgUHJvY2VzcyAo
SkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFibGUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gcHVy
cG9zZXMKKyAqIG9ubHkuIFRoZSBjb2RlIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggYW55IHNwZWNp
ZmljYXRpb24gb2YgdGhlIEpDUC4KICAqCiAgKiBDb250cmlidXRvcnM6CkBAIC0xMSw4ICsxNSwx
MCBAQAogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXB0Lm1vZGVs
OwogCitpbXBvcnQgamF2YS5sYW5nLmFubm90YXRpb24uQW5ub3RhdGlvbjsKIGltcG9ydCBqYXZh
LnV0aWwuQXJyYXlMaXN0OwogaW1wb3J0IGphdmEudXRpbC5Db2xsZWN0aW9uczsKIGltcG9ydCBq
YXZhLnV0aWwuTGlzdDsKIAoraW1wb3J0IGphdmF4LmxhbmcubW9kZWwuZWxlbWVudC5Bbm5vdGF0
aW9uTWlycm9yOwogaW1wb3J0IGphdmF4LmxhbmcubW9kZWwuZWxlbWVudC5FbGVtZW50OwogaW1w
b3J0IGphdmF4LmxhbmcubW9kZWwudHlwZS5FcnJvclR5cGU7CkBAIC04Niw0ICs5MiwxNyBAQAog
CX0KIAorCXB1YmxpYyBMaXN0PD8gZXh0ZW5kcyBBbm5vdGF0aW9uTWlycm9yPiBnZXRBbm5vdGF0
aW9uTWlycm9ycygpIHsKKwkJcmV0dXJuIEZhY3RvcnkuRU1QVFlfQU5OT1RBVElPTl9NSVJST1JT
OworCX0KKworCXB1YmxpYyA8QSBleHRlbmRzIEFubm90YXRpb24+IEEgZ2V0QW5ub3RhdGlvbihD
bGFzczxBPiBhbm5vdGF0aW9uVHlwZSkgeworCQlyZXR1cm4gbnVsbDsKKwl9CisKKwlAU3VwcHJl
c3NXYXJuaW5ncygidW5jaGVja2VkIikKKwlwdWJsaWMgPEEgZXh0ZW5kcyBBbm5vdGF0aW9uPiBB
W10gZ2V0QW5ub3RhdGlvbnNCeVR5cGUoQ2xhc3M8QT4gYW5ub3RhdGlvblR5cGUpIHsKKwkJcmV0
dXJuIChBW10pIEZhY3RvcnkuRU1QVFlfQU5OT1RBVElPTlM7CisJfQorCiAJLyogKG5vbi1KYXZh
ZG9jKQogCSAqIEBzZWUgamF2YXgubGFuZy5tb2RlbC50eXBlLlR5cGVNaXJyb3IjZ2V0S2luZCgp
CmRpZmYgLS1naXQgc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQvbW9k
ZWwvRXhlY3V0YWJsZUVsZW1lbnRJbXBsLmphdmEgc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hcHQvbW9kZWwvRXhlY3V0YWJsZUVsZW1lbnRJbXBsLmphdmEKaW5kZXggMzNi
ODI0MS4uNGRjOGIxNiAxMDA2NDQKLS0tIHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvYXB0L21vZGVsL0V4ZWN1dGFibGVFbGVtZW50SW1wbC5qYXZhCisrKyBzcmMvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9FeGVjdXRhYmxlRWxlbWVudElt
cGwuamF2YQpAQCAtMSw4ICsxLDEyIEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29w
eXJpZ2h0IChjKSAyMDA1LCAyMDA5IElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29w
eXJpZ2h0IChjKSAyMDA1LCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxs
IHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVy
aWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBz
ZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1
dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdAogICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdh
bC9lcGwtdjEwLmh0bWwKKyAqCisgKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGFuIGVh
cmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVyIHRoZSBKYXZhCisgKiBDb21t
dW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFibGUgZm9yIHRlc3RpbmcgYW5k
IGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBjb2RlIGlzIG5vdCBjb21wYXRpYmxl
IHdpdGggYW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KICAqCiAgKiBDb250cmlidXRvcnM6
CkBAIC0zMzUsMyArMzM5LDE5IEBACiAJfQogCisJcHVibGljIFR5cGVNaXJyb3IgZ2V0UmVjZWl2
ZXJUeXBlKCkgeworCQlNZXRob2RCaW5kaW5nIGJpbmRpbmcgPSAoTWV0aG9kQmluZGluZylfYmlu
ZGluZzsKKwkJaWYgKGJpbmRpbmcucmVjZWl2ZXIgIT0gbnVsbCkgeworCQkJcmV0dXJuIF9lbnYu
Z2V0RmFjdG9yeSgpLm5ld1R5cGVNaXJyb3IoYmluZGluZy5yZWNlaXZlcik7CisJCX0KKwkJaWYg
KGJpbmRpbmcuZGVjbGFyaW5nQ2xhc3MgIT0gbnVsbCkgeworCQkJcmV0dXJuIF9lbnYuZ2V0RmFj
dG9yeSgpLm5ld1R5cGVNaXJyb3IoYmluZGluZy5kZWNsYXJpbmdDbGFzcyk7CisJCX0KKwkJcmV0
dXJuIE5vVHlwZUltcGwuTk9fVFlQRV9OT05FOworCX0KKworCXB1YmxpYyBib29sZWFuIGlzRGVm
YXVsdCgpIHsKKwkJTWV0aG9kQmluZGluZyBiaW5kaW5nID0gKE1ldGhvZEJpbmRpbmcpX2JpbmRp
bmc7CisJCXJldHVybiBiaW5kaW5nLmlzRGVmYXVsdE1ldGhvZCgpOworCX0KKwogfQpkaWZmIC0t
Z2l0IHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL0V4ZWN1
dGFibGVUeXBlSW1wbC5qYXZhIHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
YXB0L21vZGVsL0V4ZWN1dGFibGVUeXBlSW1wbC5qYXZhCmluZGV4IDM2ODFhYmUuLmVkYzU4ZGEg
MTAwNjQ0Ci0tLSBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2Rl
bC9FeGVjdXRhYmxlVHlwZUltcGwuamF2YQorKysgc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hcHQvbW9kZWwvRXhlY3V0YWJsZVR5cGVJbXBsLmphdmEKQEAgLTEsOCArMSwx
MiBAQAogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwNiwgMjAx
MSBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwNiwgMjAx
MyBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRo
aXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2
YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEu
MAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFi
bGUgYXQKICAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCisgKgor
ICogVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBhbiBlYXJseS1kcmFmdCBzcGVjaWZpY2F0
aW9uIGRldmVsb3BlZCB1bmRlciB0aGUgSmF2YQorICogQ29tbXVuaXR5IFByb2Nlc3MgKEpDUCkg
YW5kIGlzIG1hZGUgYXZhaWxhYmxlIGZvciB0ZXN0aW5nIGFuZCBldmFsdWF0aW9uIHB1cnBvc2Vz
CisgKiBvbmx5LiBUaGUgY29kZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGFueSBzcGVjaWZpY2F0
aW9uIG9mIHRoZSBKQ1AuCiAgKgogICogQ29udHJpYnV0b3JzOgpAQCAtMTIzLDMgKzEyNywxNCBA
QAogCQlyZXR1cm4gVHlwZUtpbmQuRVhFQ1VUQUJMRTsKIAl9CisKKwlwdWJsaWMgVHlwZU1pcnJv
ciBnZXRSZWNlaXZlclR5cGUoKSB7CisJCU1ldGhvZEJpbmRpbmcgYmluZGluZyA9IChNZXRob2RC
aW5kaW5nKV9iaW5kaW5nOworCQlpZiAoYmluZGluZy5yZWNlaXZlciAhPSBudWxsKSB7CisJCQly
ZXR1cm4gX2Vudi5nZXRGYWN0b3J5KCkubmV3VHlwZU1pcnJvcihiaW5kaW5nLnJlY2VpdmVyKTsK
KwkJfQorCQlpZiAoYmluZGluZy5kZWNsYXJpbmdDbGFzcyAhPSBudWxsKSB7CisJCQlyZXR1cm4g
X2Vudi5nZXRGYWN0b3J5KCkubmV3VHlwZU1pcnJvcihiaW5kaW5nLmRlY2xhcmluZ0NsYXNzKTsK
KwkJfQorCQlyZXR1cm4gTm9UeXBlSW1wbC5OT19UWVBFX05PTkU7CisJfQogfQpkaWZmIC0tZ2l0
IHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL0ZhY3Rvcnku
amF2YSBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9GYWN0
b3J5LmphdmEKaW5kZXggNzFjN2FiOS4uMDZlYTRiYSAxMDA2NDQKLS0tIHNyYy9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL0ZhY3RvcnkuamF2YQorKysgc3JjL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQvbW9kZWwvRmFjdG9yeS5qYXZhCkBA
IC0xLDQgKzEsNCBAQAogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykg
MjAwNywgMjAxMiBCRUEgU3lzdGVtcywgSW5jLiBhbmQgb3RoZXJzIAorICogQ29weXJpZ2h0IChj
KSAyMDA3LCAyMDEzIEJFQSBTeXN0ZW1zLCBJbmMuIGFuZCBvdGhlcnMgCiAgKiBBbGwgcmlnaHRz
IHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAg
KiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1Ymxp
YyBMaWNlbnNlIHYxLjAKQEAgLTYsMTIgKzYsMTkgQEAKICAqIGh0dHA6Ly93d3cuZWNsaXBzZS5v
cmcvbGVnYWwvZXBsLXYxMC5odG1sCiAgKgorICogVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBv
ZiBhbiBlYXJseS1kcmFmdCBzcGVjaWZpY2F0aW9uIGRldmVsb3BlZCB1bmRlciB0aGUgSmF2YQor
ICogQ29tbXVuaXR5IFByb2Nlc3MgKEpDUCkgYW5kIGlzIG1hZGUgYXZhaWxhYmxlIGZvciB0ZXN0
aW5nIGFuZCBldmFsdWF0aW9uIHB1cnBvc2VzCisgKiBvbmx5LiBUaGUgY29kZSBpcyBub3QgY29t
cGF0aWJsZSB3aXRoIGFueSBzcGVjaWZpY2F0aW9uIG9mIHRoZSBKQ1AuCisgKgogICogQ29udHJp
YnV0b3JzOgogICogICAgd2hhcmxleUBiZWEuY29tIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVu
dGF0aW9uCiAgKiAgICBJQk0gQ29ycG9yYXRpb24gLSBmaXggZm9yIDM0MjU5OAorICogICAgSUJN
IENvcnBvcmF0aW9uIC0gSmF2YSA4IHN1cHBvcnQKICAqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwog
CiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hcHQubW9kZWw7CiAK
K2ltcG9ydCBqYXZhLmxhbmcuYW5ub3RhdGlvbi5Bbm5vdGF0aW9uOwogaW1wb3J0IGphdmEubGFu
Zy5yZWZsZWN0LkFycmF5OworaW1wb3J0IGphdmEubGFuZy5yZWZsZWN0LlByb3h5OwogaW1wb3J0
IGphdmEudXRpbC5BcnJheUxpc3Q7CiBpbXBvcnQgamF2YS51dGlsLkNvbGxlY3Rpb25zOwpAQCAt
MzIsNCArMzksNSBAQAogaW1wb3J0IGphdmF4LmxhbmcubW9kZWwudHlwZS5UeXBlTWlycm9yOwog
CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuQ2hhck9wZXJhdGlvbjsKIGlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXB0LmRpc3BhdGNoLkJhc2VQ
cm9jZXNzaW5nRW52SW1wbDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIuY2xhc3NmbXQuQ2xhc3NGaWxlQ29uc3RhbnRzOwpAQCAtNjUsNCArNzMsNiBAQAogCiAJcHJp
dmF0ZSBmaW5hbCBCYXNlUHJvY2Vzc2luZ0VudkltcGwgX2VudjsKKwlwdWJsaWMgc3RhdGljIEFu
bm90YXRpb25bXSBFTVBUWV9BTk5PVEFUSU9OUyA9IG5ldyBBbm5vdGF0aW9uWzBdOworCXB1Ymxp
YyBzdGF0aWMgTGlzdDw/IGV4dGVuZHMgQW5ub3RhdGlvbk1pcnJvcj4gRU1QVFlfQU5OT1RBVElP
Tl9NSVJST1JTID0gQ29sbGVjdGlvbnMuZW1wdHlMaXN0KCk7CiAJCiAJLyoqCkBAIC04OSw0ICs5
OSw1NiBAQAogCX0KIAkKKwlAU3VwcHJlc3NXYXJuaW5ncygidW5jaGVja2VkIikgLy8gZm9yIHRo
ZSBjYXN0IHRvIEEKKwlwdWJsaWMgPEEgZXh0ZW5kcyBBbm5vdGF0aW9uPiBBW10gZ2V0QW5ub3Rh
dGlvbnNCeVR5cGUoQW5ub3RhdGlvbkJpbmRpbmdbXSBhbm5vSW5zdGFuY2VzLCBDbGFzczxBPiBh
bm5vdGF0aW9uQ2xhc3MpIHsKKwkJQVtdIHJlc3VsdCA9IGdldEFubm90YXRpb25zKGFubm9JbnN0
YW5jZXMsIGFubm90YXRpb25DbGFzcywgZmFsc2UpOworCQlyZXR1cm4gcmVzdWx0ID09IG51bGwg
PyAoQVtdKSBFTVBUWV9BTk5PVEFUSU9OUyA6IHJlc3VsdDsKKwl9CisJCisJCisJcHVibGljIDxB
IGV4dGVuZHMgQW5ub3RhdGlvbj4gQSBnZXRBbm5vdGF0aW9uKEFubm90YXRpb25CaW5kaW5nW10g
YW5ub0luc3RhbmNlcywgQ2xhc3M8QT4gYW5ub3RhdGlvbkNsYXNzKSB7CisJCUFbXSByZXN1bHQg
PSBnZXRBbm5vdGF0aW9ucyhhbm5vSW5zdGFuY2VzLCBhbm5vdGF0aW9uQ2xhc3MsIHRydWUpOwor
CQlyZXR1cm4gcmVzdWx0ID09IG51bGwgPyBudWxsIDogcmVzdWx0WzBdOworCX0KKworCUBTdXBw
cmVzc1dhcm5pbmdzKCJ1bmNoZWNrZWQiKSAvLyBmb3IgY2FzdCBvZiBuZXdQcm94eUluc3RhbmNl
KCkgdG8gQQorCXByaXZhdGUgPEEgZXh0ZW5kcyBBbm5vdGF0aW9uPiBBW10gZ2V0QW5ub3RhdGlv
bnMoQW5ub3RhdGlvbkJpbmRpbmdbXSBhbm5vSW5zdGFuY2VzLCBDbGFzczxBPiBhbm5vdGF0aW9u
Q2xhc3MsIGJvb2xlYW4ganVzdFRoZUZpcnN0KSB7CisJCWlmKGFubm9JbnN0YW5jZXMgPT0gbnVs
bCB8fCBhbm5vSW5zdGFuY2VzLmxlbmd0aCA9PSAwIHx8IGFubm90YXRpb25DbGFzcyA9PSBudWxs
ICkgCisJCQlyZXR1cm4gbnVsbDsKKworCQlTdHJpbmcgYW5ub1R5cGVOYW1lID0gYW5ub3RhdGlv
bkNsYXNzLmdldE5hbWUoKTsKKwkJaWYoYW5ub1R5cGVOYW1lID09IG51bGwgKSByZXR1cm4gbnVs
bDsKKworCQlMaXN0PEE+IGxpc3QgPSBuZXcgQXJyYXlMaXN0PEE+KGFubm9JbnN0YW5jZXMubGVu
Z3RoKTsKKwkJZm9yKEFubm90YXRpb25CaW5kaW5nIGFubm9JbnN0YW5jZSA6IGFubm9JbnN0YW5j
ZXMpIHsKKwkJCWlmIChhbm5vSW5zdGFuY2UgPT0gbnVsbCkKKwkJCQljb250aW51ZTsKKwkJCQor
CQkJQW5ub3RhdGlvbk1pcnJvckltcGwgYW5ub01pcnJvciA9IGNyZWF0ZUFubm90YXRpb25NaXJy
b3IoYW5ub1R5cGVOYW1lLCBhbm5vSW5zdGFuY2UpOworCQkJaWYgKGFubm9NaXJyb3IgIT0gbnVs
bCkgeworCQkJCWxpc3QuYWRkKChBKVByb3h5Lm5ld1Byb3h5SW5zdGFuY2UoYW5ub3RhdGlvbkNs
YXNzLmdldENsYXNzTG9hZGVyKCksIG5ldyBDbGFzc1tdeyBhbm5vdGF0aW9uQ2xhc3MgfSwgYW5u
b01pcnJvcikpOworCQkJCWlmIChqdXN0VGhlRmlyc3QpIGJyZWFrOworCQkJfQorCQl9CisJCXJl
dHVybiBsaXN0LnNpemUoKSA+IDAgPyAoQVtdKSBsaXN0LnRvQXJyYXkobmV3IEFubm90YXRpb25b
bGlzdC5zaXplKCldKSA6ICBudWxsOworCX0KKworCXByaXZhdGUgQW5ub3RhdGlvbk1pcnJvcklt
cGwgY3JlYXRlQW5ub3RhdGlvbk1pcnJvcihTdHJpbmcgYW5ub1R5cGVOYW1lLCBBbm5vdGF0aW9u
QmluZGluZyBhbm5vSW5zdGFuY2UpIHsKKwkJUmVmZXJlbmNlQmluZGluZyBiaW5kaW5nID0gYW5u
b0luc3RhbmNlLmdldEFubm90YXRpb25UeXBlKCk7CisJCWlmIChiaW5kaW5nICE9IG51bGwgJiYg
YmluZGluZy5pc0Fubm90YXRpb25UeXBlKCkgKSB7CisJCQljaGFyW10gcU5hbWU7CisJCQlpZiAo
YmluZGluZy5pc01lbWJlclR5cGUoKSkgeworCQkJCWFubm9UeXBlTmFtZSA9IGFubm9UeXBlTmFt
ZS5yZXBsYWNlKCckJywgJy4nKTsKKwkJCQlxTmFtZSA9IENoYXJPcGVyYXRpb24uY29uY2F0V2l0
aChiaW5kaW5nLmVuY2xvc2luZ1R5cGUoKS5jb21wb3VuZE5hbWUsIGJpbmRpbmcuc291cmNlTmFt
ZSwgJy4nKTsKKwkJCQlDaGFyT3BlcmF0aW9uLnJlcGxhY2UocU5hbWUsICckJywgJy4nKTsKKwkJ
CX0gZWxzZSB7CisJCQkJcU5hbWUgPSBDaGFyT3BlcmF0aW9uLmNvbmNhdFdpdGgoYmluZGluZy5j
b21wb3VuZE5hbWUsICcuJyk7CisJCQl9CisJCQlpZihhbm5vVHlwZU5hbWUuZXF1YWxzKG5ldyBT
dHJpbmcocU5hbWUpKSApeworCQkJCXJldHVybiAoQW5ub3RhdGlvbk1pcnJvckltcGwpX2Vudi5n
ZXRGYWN0b3J5KCkubmV3QW5ub3RhdGlvbk1pcnJvcihhbm5vSW5zdGFuY2UpOworCQkJfQorCQl9
CisJCXJldHVybiBudWxsOworCX0KKwogCXByaXZhdGUgc3RhdGljIHZvaWQgYXBwZW5kTW9kaWZp
ZXIoU2V0PE1vZGlmaWVyPiByZXN1bHQsIGludCBtb2RpZmllcnMsIGludCBtb2RpZmllckNvbnN0
YW50LCBNb2RpZmllciBtb2RpZmllcikgewogCQlpZiAoKG1vZGlmaWVycyAmIG1vZGlmaWVyQ29u
c3RhbnQpICE9IDApIHsKQEAgLTM0Myw0ICs0MDUsMTIgQEAKIAkJfQogCX0KKwkKKwlwdWJsaWMg
UHJpbWl0aXZlVHlwZUltcGwgZ2V0UHJpbWl0aXZlVHlwZShCYXNlVHlwZUJpbmRpbmcgYmluZGlu
ZykgeworCQlBbm5vdGF0aW9uQmluZGluZ1tdIGFubm90YXRpb25zID0gYmluZGluZy5nZXRUeXBl
QW5ub3RhdGlvbnMoKTsKKwkJaWYgKGFubm90YXRpb25zID09IG51bGwgfHwgYW5ub3RhdGlvbnMu
bGVuZ3RoID09IDApIHsKKwkJCXJldHVybiBnZXRQcmltaXRpdmVUeXBlKFByaW1pdGl2ZVR5cGVJ
bXBsLmdldEtpbmQoYmluZGluZykpOworCQl9CisJCXJldHVybiBuZXcgUHJpbWl0aXZlVHlwZUlt
cGwoX2VudiwgYmluZGluZyk7CisJfQogCiAJLyoqCkBAIC0zODAsMTAgKzQ1MCwxMCBAQAogCQkJ
QmFzZVR5cGVCaW5kaW5nIGJ0YiA9IChCYXNlVHlwZUJpbmRpbmcpYmluZGluZzsKIAkJCXN3aXRj
aCAoYnRiLmlkKSB7Ci0JCQljYXNlIFR5cGVJZHMuVF92b2lkOgotCQkJCXJldHVybiBnZXROb1R5
cGUoVHlwZUtpbmQuVk9JRCk7Ci0JCQljYXNlIFR5cGVJZHMuVF9udWxsOgotCQkJCXJldHVybiBn
ZXROdWxsVHlwZSgpOwotCQkJZGVmYXVsdDoKLQkJCQlyZXR1cm4gZ2V0UHJpbWl0aXZlVHlwZShQ
cmltaXRpdmVUeXBlSW1wbC5nZXRLaW5kKChCYXNlVHlwZUJpbmRpbmcpYmluZGluZykpOworCQkJ
CWNhc2UgVHlwZUlkcy5UX3ZvaWQ6CisJCQkJCXJldHVybiBnZXROb1R5cGUoVHlwZUtpbmQuVk9J
RCk7CisJCQkJY2FzZSBUeXBlSWRzLlRfbnVsbDoKKwkJCQkJcmV0dXJuIGdldE51bGxUeXBlKCk7
CisJCQkJZGVmYXVsdDoKKwkJCQkJcmV0dXJuIGdldFByaW1pdGl2ZVR5cGUoYnRiKTsKIAkJCX0K
IApkaWZmIC0tZ2l0IHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21v
ZGVsL05vVHlwZUltcGwuamF2YSBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FwdC9tb2RlbC9Ob1R5cGVJbXBsLmphdmEKaW5kZXggNDk5ZmYxNi4uMzliMWYyNCAxMDA2NDQK
LS0tIHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL05vVHlw
ZUltcGwuamF2YQorKysgc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQv
bW9kZWwvTm9UeXBlSW1wbC5qYXZhCkBAIC0xLDQgKzEsNCBAQAogLyoqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwNywgMjAxMSBCRUEgU3lzdGVtcywgSW5jLgorICog
Q29weXJpZ2h0IChjKSAyMDA3LCAyMDEzIEJFQSBTeXN0ZW1zLCBJbmMuIGFuZCBvdGhlcnMKICAq
IEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBt
YXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVj
bGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMApAQCAtNiwxMCArNiwxOSBAQAogICogaHR0cDovL3d3
dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKICAqCisgKiBUaGlzIGlzIGFuIGltcGxl
bWVudGF0aW9uIG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVy
IHRoZSBKYXZhCisgKiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFi
bGUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBjb2Rl
IGlzIG5vdCBjb21wYXRpYmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KKyAq
CiAgKiBDb250cmlidXRvcnM6CiAgKiAgICB3aGFybGV5QGJlYS5jb20gLSBpbml0aWFsIEFQSSBh
bmQgaW1wbGVtZW50YXRpb24KKyAqICAgIElCTSBDb3Jwb3JhdGlvbiAtIEphdmEgOCBzdXBwb3J0
CiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKi8KIAogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50
ZXJuYWwuY29tcGlsZXIuYXB0Lm1vZGVsOwogCitpbXBvcnQgamF2YS5sYW5nLmFubm90YXRpb24u
QW5ub3RhdGlvbjsKK2ltcG9ydCBqYXZhLnV0aWwuTGlzdDsKKworaW1wb3J0IGphdmF4Lmxhbmcu
bW9kZWwuZWxlbWVudC5Bbm5vdGF0aW9uTWlycm9yOwogaW1wb3J0IGphdmF4LmxhbmcubW9kZWwu
dHlwZS5Ob1R5cGU7CiBpbXBvcnQgamF2YXgubGFuZy5tb2RlbC50eXBlLk51bGxUeXBlOwpAQCAt
NjcsMyArNzYsMTYgQEAKIAl9CiAKKwlwdWJsaWMgTGlzdDw/IGV4dGVuZHMgQW5ub3RhdGlvbk1p
cnJvcj4gZ2V0QW5ub3RhdGlvbk1pcnJvcnMoKSB7CisJCXJldHVybiBGYWN0b3J5LkVNUFRZX0FO
Tk9UQVRJT05fTUlSUk9SUzsKKwl9CisKKwlwdWJsaWMgPEEgZXh0ZW5kcyBBbm5vdGF0aW9uPiBB
IGdldEFubm90YXRpb24oQ2xhc3M8QT4gYW5ub3RhdGlvblR5cGUpIHsKKwkJcmV0dXJuIG51bGw7
CisJfQorCisJQFN1cHByZXNzV2FybmluZ3MoInVuY2hlY2tlZCIpCisJcHVibGljIDxBIGV4dGVu
ZHMgQW5ub3RhdGlvbj4gQVtdIGdldEFubm90YXRpb25zQnlUeXBlKENsYXNzPEE+IGFubm90YXRp
b25UeXBlKSB7CisJCXJldHVybiAoQVtdKSBGYWN0b3J5LkVNUFRZX0FOTk9UQVRJT05TOworCX0K
KwogfQpkaWZmIC0tZ2l0IHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0
L21vZGVsL1ByaW1pdGl2ZVR5cGVJbXBsLmphdmEgc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hcHQvbW9kZWwvUHJpbWl0aXZlVHlwZUltcGwuamF2YQppbmRleCA3N2ZlMmQ3
Li40NGIwNTM2IDEwMDY0NAotLS0gc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hcHQvbW9kZWwvUHJpbWl0aXZlVHlwZUltcGwuamF2YQorKysgc3JjL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hcHQvbW9kZWwvUHJpbWl0aXZlVHlwZUltcGwuamF2YQpAQCAt
MSw0ICsxLDQgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIw
MDcgQkVBIFN5c3RlbXMsIEluYy4gCisgKiBDb3B5cmlnaHQgKGMpIDIwMDcsIDIwMTMgQkVBIFN5
c3RlbXMsIEluYy4gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJv
Z3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJs
ZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMApAQCAt
Niw3ICs2LDExIEBACiAgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRt
bAogICoKKyAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQgc3Bl
Y2lmaWNhdGlvbiBkZXZlbG9wZWQgdW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0eSBQcm9jZXNz
IChKQ1ApIGFuZCBpcyBtYWRlIGF2YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiBw
dXJwb3NlcworICogb25seS4gVGhlIGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkgc3Bl
Y2lmaWNhdGlvbiBvZiB0aGUgSkNQLgorICoKICAqIENvbnRyaWJ1dG9yczoKICAqICAgIHdoYXJs
ZXlAYmVhLmNvbSAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgotICogICAgCisgKiAg
ICBJQk0gQ29ycG9yYXRpb24gLSBKYXZhIDggc3VwcG9ydAogICoqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KiovCiAKQEAgLTE3LDQgKzIxLDUgQEAKIGltcG9ydCBqYXZheC5sYW5nLm1vZGVsLnR5cGUuVHlw
ZVZpc2l0b3I7CiAKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXB0
LmRpc3BhdGNoLkJhc2VQcm9jZXNzaW5nRW52SW1wbDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkJhc2VUeXBlQmluZGluZzsKIGltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlR5cGVCaW5kaW5nOwpAQCAtNDUsNCAr
NTAsOSBAQAogCX0KIAkKKwlQcmltaXRpdmVUeXBlSW1wbChCYXNlUHJvY2Vzc2luZ0VudkltcGwg
ZW52LCBCYXNlVHlwZUJpbmRpbmcgYmluZGluZykgeworCQkvLyBGcm9tIEphdmEgOCwgYmFzZSB0
eXBlIGJpbmRpbmdzIGNhbiBob2xkIGFubm90YXRpb25zIGFuZCBoZW5jZSBuZWVkIHRoZSBlbnZp
cm9ubWVudC4KKwkJc3VwZXIoZW52LCBiaW5kaW5nKTsKKwl9CisJCiAJQE92ZXJyaWRlCiAJcHVi
bGljIDxSLCBQPiBSIGFjY2VwdChUeXBlVmlzaXRvcjxSLCBQPiB2LCBQIHApCmRpZmYgLS1naXQg
c3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQvbW9kZWwvVHlwZU1pcnJv
ckltcGwuamF2YSBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2Rl
bC9UeXBlTWlycm9ySW1wbC5qYXZhCmluZGV4IDIyYjdhNDQuLmEwOGEyOTUgMTAwNjQ0Ci0tLSBz
cmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9UeXBlTWlycm9y
SW1wbC5qYXZhCisrKyBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9t
b2RlbC9UeXBlTWlycm9ySW1wbC5qYXZhCkBAIC0xLDQgKzEsNCBAQAogLyoqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwNyBCRUEgU3lzdGVtcywgSW5jLiAKKyAqIENv
cHlyaWdodCAoYykgMjAwNywgMjAxMyBCRUEgU3lzdGVtcywgSW5jLiBhbmQgb3RoZXJzLgogICog
QWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1h
dGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNs
aXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCkBAIC02LDExICs2LDE5IEBACiAgKiBodHRwOi8vd3d3
LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbAogICoKKyAqIFRoaXMgaXMgYW4gaW1wbGVt
ZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQgc3BlY2lmaWNhdGlvbiBkZXZlbG9wZWQgdW5kZXIg
dGhlIEphdmEKKyAqIENvbW11bml0eSBQcm9jZXNzIChKQ1ApIGFuZCBpcyBtYWRlIGF2YWlsYWJs
ZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiBwdXJwb3NlcworICogb25seS4gVGhlIGNvZGUg
aXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkgc3BlY2lmaWNhdGlvbiBvZiB0aGUgSkNQLgorICoK
ICAqIENvbnRyaWJ1dG9yczoKICAqICAgIHdoYXJsZXlAYmVhLmNvbSAtIGluaXRpYWwgQVBJIGFu
ZCBpbXBsZW1lbnRhdGlvbgotICogICAgCisgKiAgICBJQk0gQ29ycG9yYXRpb24gLSBKYXZhIDgg
c3VwcG9ydAogICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCiAKIHBhY2thZ2Ugb3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvbXBpbGVyLmFwdC5tb2RlbDsKIAoraW1wb3J0IGphdmEubGFuZy5hbm5v
dGF0aW9uLkFubm90YXRpb247CitpbXBvcnQgamF2YS51dGlsLkxpc3Q7CisKK2ltcG9ydCBqYXZh
eC5sYW5nLm1vZGVsLmVsZW1lbnQuQW5ub3RhdGlvbk1pcnJvcjsKIGltcG9ydCBqYXZheC5sYW5n
Lm1vZGVsLnR5cGUuVHlwZUtpbmQ7CiBpbXBvcnQgamF2YXgubGFuZy5tb2RlbC50eXBlLlR5cGVN
aXJyb3I7CkBAIC0xOCw1ICsyNiw3IEBACiAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJu
YWwuY29tcGlsZXIuYXB0LmRpc3BhdGNoLkJhc2VQcm9jZXNzaW5nRW52SW1wbDsKK2ltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkFubm90YXRpb25CaW5kaW5n
OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuQmluZGlu
ZzsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlR5cGVC
aW5kaW5nOwogCiAvKioKQEAgLTI3LDUgKzM3LDUgQEAKIHB1YmxpYyBjbGFzcyBUeXBlTWlycm9y
SW1wbCBpbXBsZW1lbnRzIFR5cGVNaXJyb3IgewogCi0JLy8gQ2F1dGlvbjogX2VudiB3aWxsIGJl
IE5VTEwgZm9yIFByaW1pdGl2ZVR5cGVJbXBsLgorCS8vIENhdXRpb246IF9lbnYgd2lsbCBiZSBO
VUxMIGZvciB1bmFubm90YXRlZCBwcmltaXRpdmUgdHlwZXMgKFByaW1pdGl2ZVR5cGVJbXBsKS4K
IAlwcm90ZWN0ZWQgZmluYWwgQmFzZVByb2Nlc3NpbmdFbnZJbXBsIF9lbnY7CiAJcHJvdGVjdGVk
IGZpbmFsIEJpbmRpbmcgX2JpbmRpbmc7CkBAIC0xMDcsNCArMTE3LDIwIEBACiAJfQogCisJcHJv
dGVjdGVkIEFubm90YXRpb25CaW5kaW5nW10gZ2V0QW5ub3RhdGlvbkJpbmRpbmdzKCkgeworCQly
ZXR1cm4gKChUeXBlQmluZGluZylfYmluZGluZykuZ2V0VHlwZUFubm90YXRpb25zKCk7CisJfQor
CisJcHVibGljIExpc3Q8PyBleHRlbmRzIEFubm90YXRpb25NaXJyb3I+IGdldEFubm90YXRpb25N
aXJyb3JzKCkgeworCQlyZXR1cm4gX2Vudi5nZXRGYWN0b3J5KCkuZ2V0QW5ub3RhdGlvbk1pcnJv
cnMoZ2V0QW5ub3RhdGlvbkJpbmRpbmdzKCkpOworCX0KKworCXB1YmxpYyA8QSBleHRlbmRzIEFu
bm90YXRpb24+IEEgZ2V0QW5ub3RhdGlvbihDbGFzczxBPiBhbm5vdGF0aW9uVHlwZSkgeworCQly
ZXR1cm4gX2Vudi5nZXRGYWN0b3J5KCkuZ2V0QW5ub3RhdGlvbihnZXRBbm5vdGF0aW9uQmluZGlu
Z3MoKSwgYW5ub3RhdGlvblR5cGUpOworCX0KKworCXB1YmxpYyA8QSBleHRlbmRzIEFubm90YXRp
b24+IEFbXSBnZXRBbm5vdGF0aW9uc0J5VHlwZShDbGFzczxBPiBhbm5vdGF0aW9uVHlwZSkgewor
CQlyZXR1cm4gX2Vudi5nZXRGYWN0b3J5KCkuZ2V0QW5ub3RhdGlvbnNCeVR5cGUoZ2V0QW5ub3Rh
dGlvbkJpbmRpbmdzKCksIGFubm90YXRpb25UeXBlKTsKKwl9CisKIAkKIH0KZGlmZiAtLWdpdCBz
cmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9UeXBlUGFyYW1l
dGVyRWxlbWVudEltcGwuamF2YSBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FwdC9tb2RlbC9UeXBlUGFyYW1ldGVyRWxlbWVudEltcGwuamF2YQppbmRleCA3ZGE3YzNhLi42
MGNhZmZkIDEwMDY0NAotLS0gc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
cHQvbW9kZWwvVHlwZVBhcmFtZXRlckVsZW1lbnRJbXBsLmphdmEKKysrIHNyYy9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL1R5cGVQYXJhbWV0ZXJFbGVtZW50SW1w
bC5qYXZhCkBAIC0xLDQgKzEsNCBAQAogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHly
aWdodCAoYykgMjAwNywgMjAxMSBCRUEgU3lzdGVtcywgSW5jLgorICogQ29weXJpZ2h0IChjKSAy
MDA3LCAyMDEzIEJFQSBTeXN0ZW1zLCBJbmMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlz
IHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFp
bGFibGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAK
QEAgLTYsOCArNiwxMyBAQAogICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEw
Lmh0bWwKICAqCisgKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGFuIGVhcmx5LWRyYWZ0
IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVyIHRoZSBKYXZhCisgKiBDb21tdW5pdHkgUHJv
Y2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFibGUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRp
b24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBjb2RlIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggYW55
IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KKyAqCiAgKiBDb250cmlidXRvcnM6CiAgKiAgICB3
aGFybGV5QGJlYS5jb20gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24KICAqICAgIElC
TSBDb3Jwb3JhdGlvbiAtIGZpeCBmb3IgMzQyNDcwCiAgKiAgICBJQk0gQ29ycG9yYXRpb24gLSBm
aXggZm9yIDM0MjU5OAorICogICAgSUJNIENvcnBvcmF0aW9uIC0gSmF2YSA4IHN1cHBvcnQKICAq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqLwogCkBAIC0xMjksNSArMTM0LDUgQEAKIAkvKgogCSAqIChu
b24tSmF2YWRvYykKLQkgKiBKYXZhIGRvZXMgbm90IGN1cnJlbnRseSBzdXBwb3J0IGFubm90YXRp
b25zIG9uIHR5cGUgcGFyYW1ldGVycy4KKwkgKiBKYXZhIHN1cHBvcnRzIGFubm90YXRpb25zIG9u
IHR5cGUgcGFyYW1ldGVycyBmcm9tIEpMUzgKIAkgKiBAc2VlIGphdmF4LmxhbmcubW9kZWwuZWxl
bWVudC5FbGVtZW50I2dldEFubm90YXRpb25NaXJyb3JzKCkKIAkgKi8KQEAgLTEzNSw1ICsxNDAs
NSBAQAogCXByb3RlY3RlZCBBbm5vdGF0aW9uQmluZGluZ1tdIGdldEFubm90YXRpb25CaW5kaW5n
cygpCiAJewotCQlyZXR1cm4gbnVsbDsKKwkJcmV0dXJuICgoVHlwZVZhcmlhYmxlQmluZGluZylf
YmluZGluZykuZ2V0VHlwZUFubm90YXRpb25zKCk7CiAJfQogCiNQIG9yZy5lY2xpcHNlLmpkdC5j
b3JlCmRpZmYgLS1naXQgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FzdC9BU1ROb2RlLmphdmEgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9BU1ROb2RlLmphdmEKaW5kZXggZmNiODFmYS4uNDFiNDliZSAxMDA2NDQKLS0tIGNv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQVNUTm9kZS5qYXZh
CisrKyBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FTVE5v
ZGUuamF2YQpAQCAtNzgzLDQgKzc4Myw5IEBACiAJCQkJCQl9CiAJCQkJCQlicmVhazsKKwkJCQkJ
ZGVmYXVsdDoKKwkJCQkJCWlmIChhbm5vdGF0aW9ucyAhPSBudWxsKSB7CisJCQkJCQkJYW5ub3Rh
dGlvbnNbaV0gPSBhbm5vdGF0aW9uLmdldENvbXBpbGVyQW5ub3RhdGlvbigpOworCQkJCQkJfQor
CQkJCQkJYnJlYWs7CiAJCQkJfQogCQkJCXJldHVybiBhbm5vdGF0aW9uczs=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>236290</attachid>
            <date>2013-10-09 09:46:00 -0400</date>
            <delta_ts>2013-10-09 09:46:03 -0400</delta_ts>
            <desc>Follow up items</desc>
            <filename>Fix-for-bug-413613--Follow-up-items.patch</filename>
            <type>text/plain</type>
            <size>25307</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMAojUCBvcmcuZWNsaXBzZS5qZHQuY29tcGls
ZXIuYXB0LnRlc3RzCmRpZmYgLS1naXQgbGliL2FwdHRlc3Rwcm9jZXNzb3JzLmphciBsaWIvYXB0
dGVzdHByb2Nlc3NvcnMuamFyCmluZGV4IGY3NzVlMzMuLjgyMzYzNzYgMTAwNjQ0Ci0tLSBsaWIv
YXB0dGVzdHByb2Nlc3NvcnMuamFyCisrKyBsaWIvYXB0dGVzdHByb2Nlc3NvcnMuamFyCkJpbmFy
eSBmaWxlcyBkaWZmZXIKZGlmZiAtLWdpdCBwcm9jZXNzb3JzL29yZy9lY2xpcHNlL2pkdC9jb21w
aWxlci9hcHQvdGVzdHMvcHJvY2Vzc29ycy9lbGVtZW50cy9KYXZhOEVsZW1lbnRQcm9jZXNzb3Iu
amF2YSBwcm9jZXNzb3JzL29yZy9lY2xpcHNlL2pkdC9jb21waWxlci9hcHQvdGVzdHMvcHJvY2Vz
c29ycy9lbGVtZW50cy9KYXZhOEVsZW1lbnRQcm9jZXNzb3IuamF2YQppbmRleCAwZWZkOTAyLi44
ZmFkMDgzIDEwMDY0NAotLS0gcHJvY2Vzc29ycy9vcmcvZWNsaXBzZS9qZHQvY29tcGlsZXIvYXB0
L3Rlc3RzL3Byb2Nlc3NvcnMvZWxlbWVudHMvSmF2YThFbGVtZW50UHJvY2Vzc29yLmphdmEKKysr
IHByb2Nlc3NvcnMvb3JnL2VjbGlwc2UvamR0L2NvbXBpbGVyL2FwdC90ZXN0cy9wcm9jZXNzb3Jz
L2VsZW1lbnRzL0phdmE4RWxlbWVudFByb2Nlc3Nvci5qYXZhCkBAIC01Nyw2ICs1Nyw3IEBACiBw
dWJsaWMgY2xhc3MgSmF2YThFbGVtZW50UHJvY2Vzc29yIGV4dGVuZHMgQmFzZVByb2Nlc3NvciB7
CiAJCi0JCXByaXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZ1tdIEVMRU1FTlRfTkFNRVMgPSBuZXcg
U3RyaW5nW10gewotCQkJInRhcmdldHMubW9kZWw4LlgiLCAiVCIsICJVIiwgIksiLCAiViJ9Owor
CQlwcml2YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmdbXSBFTEVNRU5UX05BTUVTID0gbmV3IFN0cmlu
Z1tdIHsidGFyZ2V0cy5tb2RlbDguWCIsICJUIiwgIlUiLCAiSyIsICJWIiwgIktLIiwgIlZWIiwg
IktLSyIsICJWVlYifTsKKwkJcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nW10gVFlQRV9QQVJB
TV9FTEVNRU5UU19aMSA9IG5ldyBTdHJpbmdbXSB7IktLIiwgIlZWIn07CisJCXByaXZhdGUgc3Rh
dGljIGZpbmFsIFN0cmluZ1tdIFRZUEVfUEFSQU1fRUxFTUVOVFNfWjIgPSBuZXcgU3RyaW5nW10g
eyJLS0siLCAiVlZWIn07CiAJCiAJUm91bmRFbnZpcm9ubWVudCByb3VuZEVudiA9IG51bGw7CkBA
IC04OSw0ICs5MCw1IEBACiAJCXJldHVybiBmYWxzZTsKIAl9CisKIAlwdWJsaWMgYm9vbGVhbiBp
bnZva2VUZXN0TWV0aG9kcyhNYXA8U3RyaW5nLCBTdHJpbmc+IG9wdGlvbnMpIHRocm93cyBUaHJv
d2FibGUgewogCQlNZXRob2QgdGVzdE1ldGhvZCA9IG51bGw7CkBAIC0xMTAsNCArMTEyLDUgQEAK
IAkJcmV0dXJuIHRlc3RzRm91bmQ7CiAJfQorCiAJcHVibGljIHZvaWQgdGVzdEFsbCgpIHRocm93
cyBBc3NlcnRpb25GYWlsZWRFcnJvciB7CiAJCXRlc3RTRThTcGVjaWZpY3MoKTsKQEAgLTEyNSw0
ICsxMjgsOSBAQAogCQl0ZXN0VHlwZUFubm90YXRpb25zMTAoKTsKIAkJdGVzdFR5cGVBbm5vdGF0
aW9uczExKCk7CisJCXRlc3RUeXBlQW5ub3RhdGlvbnMxMigpOworCQl0ZXN0VHlwZUFubm90YXRp
b25zMTMoKTsKKwkJdGVzdFR5cGVBbm5vdGF0aW9uczE0KCk7CisJCXRlc3RUeXBlQW5ub3RhdGlv
bnMxNSgpOworCQl0ZXN0VHlwZUFubm90YXRpb25zMTYoKTsKIAl9CiAJCkBAIC0xODksNSArMTk3
LDUgQEAKIAkJTGlzdDw/IGV4dGVuZHMgRWxlbWVudD4gbWVtYmVycyA9IF9lbGVtZW50VXRpbHMu
Z2V0QWxsTWVtYmVycyhhbm5vdGF0ZWRUeXBlKTsKIAkJRXhlY3V0YWJsZUVsZW1lbnQgbWV0aG9k
ID0gbnVsbDsKLQkJVmFyaWFibGVFbGVtZW50IGZpZWxkID0gbnVsbCwgZmllbGQxID0gbnVsbDsK
KwkJVmFyaWFibGVFbGVtZW50IGZpZWxkID0gbnVsbCwgZmllbGQxID0gbnVsbCwgZmllbGQxMSA9
IG51bGw7CiAJCUV4ZWN1dGFibGVFbGVtZW50IG1ldGhvZDIgPSBudWxsOwogCQlmb3IgKEVsZW1l
bnQgbWVtYmVyIDogbWVtYmVycykgewpAQCAtMjAwLDUgKzIwOCw4IEBACiAJCQl9IGVsc2UgaWYg
KCJfZmllbGQxIi5lcXVhbHMobWVtYmVyLmdldFNpbXBsZU5hbWUoKS50b1N0cmluZygpKSkgewog
CQkJCWZpZWxkMSA9IChWYXJpYWJsZUVsZW1lbnQpIG1lbWJlcjsKKwkJCX0gZWxzZSBpZiAoIl9m
aWVsZDExIi5lcXVhbHMobWVtYmVyLmdldFNpbXBsZU5hbWUoKS50b1N0cmluZygpKSkgeworCQkJ
CWZpZWxkMTEgPSAoVmFyaWFibGVFbGVtZW50KSBtZW1iZXI7CiAJCQl9CisJCQkKIAkJfQogCQlh
c3NlcnROb3ROdWxsKCJNZXRob2Qgc2hvdWxkIG5vdCBiZSBudWxsIiwgbWV0aG9kKTsKQEAgLTIx
Miw2ICsyMjMsMTAgQEAKIAkJZXhhbWluZVNFOEFubm90YXRpb25NZXRob2RzKCJKYXZhOEVsZW1l
bnRQcm9jZXNzb3IjZXhhbWluZVNFOFNwZWNpZmljczogIiwgdHlwZU1pcnJvciwgImYiKTsKIAkJ
CisJCVR5cGVNaXJyb3Igc2ltaWxhciA9IHR5cGVNaXJyb3I7CiAJCXR5cGVNaXJyb3IgPSBmaWVs
ZDEuYXNUeXBlKCk7CisJCWFzc2VydEZhbHNlKCJTaG91bGQgYmUgb2Ygc2FtZSB0eXBlIiwgX3R5
cGVVdGlscy5pc1NhbWVUeXBlKHR5cGVNaXJyb3IsIHNpbWlsYXIpKTsKIAkJdmVyaWZ5VHlwZUFu
bm90YXRpb25zKHR5cGVNaXJyb3IsIG5ldyBTdHJpbmdbXXsiQFR5cGUodmFsdWU9ZjEpIn0pOwor
CQlzaW1pbGFyID0gZmllbGQxMS5hc1R5cGUoKTsKKwkJYXNzZXJ0VHJ1ZSgiU2hvdWxkIGJlIG9m
IHNhbWUgdHlwZSIsIF90eXBlVXRpbHMuaXNTYW1lVHlwZSh0eXBlTWlycm9yLCBzaW1pbGFyKSk7
CiAJCQogCQl0eXBlTWlycm9yID0gbWV0aG9kMi5nZXRSZXR1cm5UeXBlKCk7CkBAIC00MzYsNiAr
NDUxLDggQEAKIAkJVHlwZVBhcmFtZXRlckVsZW1lbnQgdHlwZVBhcmFtID0gdHlwZVBhcmFtcy5n
ZXQoMCk7CiAJCXZlcmlmeVR5cGVBbm5vdGF0aW9ucyh0eXBlUGFyYW0sIG5ldyBTdHJpbmdbXXsi
QFR5cGUodmFsdWU9bXAxKSJ9KTsKKwkJdmVyaWZ5VHlwZUFubm90YXRpb25zKHR5cGVQYXJhbS5h
c1R5cGUoKSwgbmV3IFN0cmluZ1tdeyJAVHlwZSh2YWx1ZT1tcDEpIn0pOwogCQl0eXBlUGFyYW0g
PSB0eXBlUGFyYW1zLmdldCgxKTsKIAkJdmVyaWZ5VHlwZUFubm90YXRpb25zKHR5cGVQYXJhbSwg
bmV3IFN0cmluZ1tdeyJAVHlwZSh2YWx1ZT1tcDIpIn0pOworCQl2ZXJpZnlUeXBlQW5ub3RhdGlv
bnModHlwZVBhcmFtLmFzVHlwZSgpLCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPW1wMikifSk7
CiAJCS8vWjxAVHlwZSgidGExIikgU3RyaW5nLCBAVHlwZSgidGEyIikgT2JqZWN0PiB6MSA9IG51
bGw7CiAJCS8vIEFQSXMgZG9uJ3QgZXhwb3NlIHRoZSB0eXBlIGFyZ3VtZW50cyBvbiBhIFR5cGVN
aXJyb3IKQEAgLTUyNiw0ICs1NDMsMTA1IEBACiAJCXZlcmlmeVR5cGVBbm5vdGF0aW9ucyh0eXBl
LmdldFJlY2VpdmVyVHlwZSgpLCBuZXcgU3RyaW5nW117IkBUeXBlKHZhbHVlPXJlY2VpdmVyKSJ9
KTsKIAl9CisJCisJcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczEzKCkgeworCQlUeXBl
RWxlbWVudCBhbm5vdGF0ZWRUeXBlID0gX2VsZW1lbnRVdGlscy5nZXRUeXBlRWxlbWVudCgidGFy
Z2V0cy5tb2RlbDguWCIpOworCQlMaXN0PD8gZXh0ZW5kcyBFbGVtZW50PiBtZW1iZXJzID0gX2Vs
ZW1lbnRVdGlscy5nZXRBbGxNZW1iZXJzKGFubm90YXRlZFR5cGUpOworCQkKKwkJVmFyaWFibGVF
bGVtZW50IGZpZWxkID0gbnVsbDsKKwkJZm9yIChWYXJpYWJsZUVsZW1lbnQgbWVtYmVyIDogRWxl
bWVudEZpbHRlci5maWVsZHNJbihtZW1iZXJzKSkgeworCQkJaWYgKCJfaSIuZXF1YWxzKG1lbWJl
ci5nZXRTaW1wbGVOYW1lKCkudG9TdHJpbmcoKSkpIHsKKwkJCQlmaWVsZCA9IChWYXJpYWJsZUVs
ZW1lbnQpIG1lbWJlcjsKKwkJCQlicmVhazsKKwkJCX0KKwkJfQorCQlUeXBlTWlycm9yIHR5cGVN
aXJyb3IgPSBmaWVsZC5hc1R5cGUoKTsKKwkJdmVyaWZ5VHlwZUFubm90YXRpb25zKHR5cGVNaXJy
b3IsIG5ldyBTdHJpbmdbXXt9KTsKKwl9CisKKwlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90YXRp
b25zMTQoKSB7CisJCVR5cGVFbGVtZW50IGFubm90YXRlZFR5cGUgPSBfZWxlbWVudFV0aWxzLmdl
dFR5cGVFbGVtZW50KCJ0YXJnZXRzLm1vZGVsOC5YIik7CisJCUxpc3Q8PyBleHRlbmRzIEVsZW1l
bnQ+IG1lbWJlcnMgPSBfZWxlbWVudFV0aWxzLmdldEFsbE1lbWJlcnMoYW5ub3RhdGVkVHlwZSk7
CisJCUV4ZWN1dGFibGVFbGVtZW50IG1haW4gPSBudWxsOworCQlFeGVjdXRhYmxlRWxlbWVudCBj
b25zdHIgPSBudWxsOworCQlUeXBlRWxlbWVudCBYWSA9IG51bGw7CisJCWZvciAoRWxlbWVudCBt
ZW1iZXIgOiBtZW1iZXJzKSB7CisJCQlpZiAoIm1haW4iLmVxdWFscyhtZW1iZXIuZ2V0U2ltcGxl
TmFtZSgpLnRvU3RyaW5nKCkpKSB7CisJCQkJbWFpbiA9IChFeGVjdXRhYmxlRWxlbWVudCkgbWVt
YmVyOworCQkJfSBlbHNlIGlmICgiPGluaXQ+Ii5lcXVhbHMobWVtYmVyLmdldFNpbXBsZU5hbWUo
KS50b1N0cmluZygpKSkgeworCQkJCWNvbnN0ciA9IChFeGVjdXRhYmxlRWxlbWVudCkgbWVtYmVy
OworCQkJfSBlbHNlIGlmICgiWFkiLmVxdWFscyhtZW1iZXIuZ2V0U2ltcGxlTmFtZSgpLnRvU3Ry
aW5nKCkpKSB7CisJCQkJWFkgPSAoVHlwZUVsZW1lbnQpIG1lbWJlcjsKKwkJCX0KKwkJfQorCQlU
eXBlTWlycm9yIHR5cGVNaXJyb3IgPSBtYWluLmdldFJlY2VpdmVyVHlwZSgpOworCQlhc3NlcnRO
b3ROdWxsKCJUeXBlTWlycm9yIHNob3VsZCBub3QgYmUgbnVsbCIsIHR5cGVNaXJyb3IpOworCQlh
c3NlcnRTYW1lKCJTaG91bGQgYmUgbm8gdHlwZSIsIFR5cGVLaW5kLk5PTkUsIHR5cGVNaXJyb3Iu
Z2V0S2luZCgpKTsKKwkJRXhlY3V0YWJsZVR5cGUgdHlwZSA9IChFeGVjdXRhYmxlVHlwZSkgbWFp
bi5hc1R5cGUoKTsKKwkJdHlwZU1pcnJvciA9IHR5cGUuZ2V0UmVjZWl2ZXJUeXBlKCk7CisJCWFz
c2VydE5vdE51bGwoIlR5cGVNaXJyb3Igc2hvdWxkIG5vdCBiZSBudWxsIiwgdHlwZU1pcnJvcik7
CisJCWFzc2VydFNhbWUoIlNob3VsZCBiZSBubyB0eXBlIiwgVHlwZUtpbmQuTk9ORSwgdHlwZU1p
cnJvci5nZXRLaW5kKCkpOwkJCQkKKwkJdHlwZU1pcnJvciA9IGNvbnN0ci5nZXRSZWNlaXZlclR5
cGUoKTsKKwkJYXNzZXJ0Tm90TnVsbCgiVHlwZU1pcnJvciBzaG91bGQgbm90IGJlIG51bGwiLCB0
eXBlTWlycm9yKTsKKwkJYXNzZXJ0U2FtZSgiU2hvdWxkIGJlIG5vIHR5cGUiLCBUeXBlS2luZC5O
T05FLCB0eXBlTWlycm9yLmdldEtpbmQoKSk7CisJCXR5cGUgPSAoRXhlY3V0YWJsZVR5cGUpIGNv
bnN0ci5hc1R5cGUoKTsKKwkJdHlwZU1pcnJvciA9IHR5cGUuZ2V0UmVjZWl2ZXJUeXBlKCk7CisJ
CWFzc2VydE5vdE51bGwoIlR5cGVNaXJyb3Igc2hvdWxkIG5vdCBiZSBudWxsIiwgdHlwZU1pcnJv
cik7CisJCWFzc2VydFNhbWUoIlNob3VsZCBiZSBubyB0eXBlIiwgVHlwZUtpbmQuTk9ORSwgdHlw
ZU1pcnJvci5nZXRLaW5kKCkpOworCQkKKwkJbWVtYmVycyA9IF9lbGVtZW50VXRpbHMuZ2V0QWxs
TWVtYmVycyhYWSk7CisJCWZvciAoRWxlbWVudCBtZW1iZXIgOiBtZW1iZXJzKSB7CisJCQlpZiAo
Ijxpbml0PiIuZXF1YWxzKG1lbWJlci5nZXRTaW1wbGVOYW1lKCkudG9TdHJpbmcoKSkpIHsKKwkJ
CQljb25zdHIgPSAoRXhlY3V0YWJsZUVsZW1lbnQpIG1lbWJlcjsKKwkJCX0KKwkJfQorCQl0eXBl
TWlycm9yID0gY29uc3RyLmdldFJlY2VpdmVyVHlwZSgpOworCQlhc3NlcnROb3ROdWxsKCJUeXBl
TWlycm9yIHNob3VsZCBub3QgYmUgbnVsbCIsIHR5cGVNaXJyb3IpOworCQlhc3NlcnROb3RTYW1l
KCJTaG91bGQgbm90IGJlIG5vIHR5cGUiLCBUeXBlS2luZC5OT05FLCB0eXBlTWlycm9yLmdldEtp
bmQoKSk7CisJCXZlcmlmeVR5cGVBbm5vdGF0aW9ucyh0eXBlTWlycm9yLCBuZXcgU3RyaW5nW117
IkBUeXBlKHZhbHVlPXJlY2VpdmVyKSJ9KTsKKwkJdHlwZSA9IChFeGVjdXRhYmxlVHlwZSkgY29u
c3RyLmFzVHlwZSgpOworCQl0eXBlTWlycm9yID0gdHlwZS5nZXRSZWNlaXZlclR5cGUoKTsKKwkJ
YXNzZXJ0Tm90TnVsbCgiVHlwZU1pcnJvciBzaG91bGQgbm90IGJlIG51bGwiLCB0eXBlTWlycm9y
KTsKKwkJdmVyaWZ5VHlwZUFubm90YXRpb25zKHR5cGVNaXJyb3IsIG5ldyBTdHJpbmdbXXsiQFR5
cGUodmFsdWU9cmVjZWl2ZXIpIn0pOworCQlhc3NlcnROb3RTYW1lKCJTaG91bGQgbm90IGJlIG5v
IHR5cGUiLCBUeXBlS2luZC5OT05FLCB0eXBlTWlycm9yLmdldEtpbmQoKSk7CisJfQorCisJcHVi
bGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczE1KCkgeworCQlTZXQ8U3RyaW5nPiBleHBlY3Rl
ZEVsZW1lbnROYW1lcyA9IG5ldyBIYXNoU2V0PFN0cmluZz4oVFlQRV9QQVJBTV9FTEVNRU5UU19a
MS5sZW5ndGgpOworCQlmb3IgKFN0cmluZyBuYW1lIDogVFlQRV9QQVJBTV9FTEVNRU5UU19aMSkg
eworCQkJZXhwZWN0ZWRFbGVtZW50TmFtZXMuYWRkKG5hbWUpOworCQl9CisJCVNldDw/IGV4dGVu
ZHMgRWxlbWVudD4gYWN0dWFsRWxtZW50cyA9IHJvdW5kRW52LmdldEVsZW1lbnRzQW5ub3RhdGVk
V2l0aChUeXBlLmNsYXNzKTsKKwkJYXNzZXJ0Tm90TnVsbCgiUm91bmRFbnZpcm9ubWVudCNnZXRF
bGVtZW50c0Fubm90YXRlZFdpdGggcmV0dXJuZWQgbnVsbCIsIGFjdHVhbEVsbWVudHMpOworCQkK
KwkJZm9yIChFbGVtZW50IGUgOiBhY3R1YWxFbG1lbnRzKSB7CisJCQlpZiAoZSBpbnN0YW5jZW9m
IFR5cGVQYXJhbWV0ZXJFbGVtZW50KSB7CisJCQkJU3RyaW5nIG5hbWUgPSAoKFR5cGVQYXJhbWV0
ZXJFbGVtZW50KSBlKS5nZXRTaW1wbGVOYW1lKCkudG9TdHJpbmcoKTsKKwkJCQlpZiAoIWV4cGVj
dGVkRWxlbWVudE5hbWVzLnJlbW92ZShuYW1lKSkgeworCQkJCQlyZXBvcnRFcnJvcigiTWlzc2lu
ZyByb290IGVsZW1lbnQgIiArIG5hbWUpOworCQkJCX0KKwkJCX0KKwkJfQorCQlhc3NlcnRUcnVl
KCJGb3VuZCB1bmV4cGVjdGVkIGV4dHJhIGVsZW1lbnRzIiwgZXhwZWN0ZWRFbGVtZW50TmFtZXMu
aXNFbXB0eSgpKTsKKwl9CisKKwlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90YXRpb25zMTYoKSB7
CisJCVNldDxTdHJpbmc+IGV4cGVjdGVkRWxlbWVudE5hbWVzID0gbmV3IEhhc2hTZXQ8U3RyaW5n
PihUWVBFX1BBUkFNX0VMRU1FTlRTX1oyLmxlbmd0aCk7CisJCWZvciAoU3RyaW5nIG5hbWUgOiBU
WVBFX1BBUkFNX0VMRU1FTlRTX1oyKSB7CisJCQlleHBlY3RlZEVsZW1lbnROYW1lcy5hZGQobmFt
ZSk7CisJCX0KKwkJU2V0PD8gZXh0ZW5kcyBFbGVtZW50PiBhY3R1YWxFbG1lbnRzID0gcm91bmRF
bnYuZ2V0RWxlbWVudHNBbm5vdGF0ZWRXaXRoKFR5cGUuY2xhc3MpOworCQlhc3NlcnROb3ROdWxs
KCJSb3VuZEVudmlyb25tZW50I2dldEVsZW1lbnRzQW5ub3RhdGVkV2l0aCByZXR1cm5lZCBudWxs
IiwgYWN0dWFsRWxtZW50cyk7CisJCQorCQlmb3IgKEVsZW1lbnQgZSA6IGFjdHVhbEVsbWVudHMp
IHsKKwkJCWlmIChlIGluc3RhbmNlb2YgVHlwZVBhcmFtZXRlckVsZW1lbnQpIHsKKwkJCQlTdHJp
bmcgbmFtZSA9ICgoVHlwZVBhcmFtZXRlckVsZW1lbnQpIGUpLmdldFNpbXBsZU5hbWUoKS50b1N0
cmluZygpOworCQkJCWlmICghZXhwZWN0ZWRFbGVtZW50TmFtZXMucmVtb3ZlKG5hbWUpKSB7CisJ
CQkJCXJlcG9ydEVycm9yKCJNaXNzaW5nIHJvb3QgZWxlbWVudCAiICsgbmFtZSk7CisJCQkJfQor
CQkJfQorCQl9CisJCWFzc2VydFRydWUoIkZvdW5kIHVuZXhwZWN0ZWQgZXh0cmEgZWxlbWVudHMi
LCBleHBlY3RlZEVsZW1lbnROYW1lcy5pc0VtcHR5KCkpOworCX0KKwogCXByaXZhdGUgU3RyaW5n
IGdldEV4Y2VwdGlvblN0YWNrVHJhY2UoVGhyb3dhYmxlIHQpIHsKIAkJU3RyaW5nQnVmZmVyIGJ1
ZiA9IG5ldyBTdHJpbmdCdWZmZXIodC5nZXRNZXNzYWdlKCkpOwpAQCAtNTM4LDUgKzY1Niw0IEBA
CiAJfQogCi0JCiAJcHJpdmF0ZSB2b2lkIHZlcmlmeVR5cGVBbm5vdGF0aW9ucyhBbm5vdGF0ZWRD
b25zdHJ1Y3QgY29uc3RydWN0LCBTdHJpbmdbXSBhbm5vdHMpIHsKIAkJTGlzdDw/IGV4dGVuZHMg
QW5ub3RhdGlvbk1pcnJvcj4gYW5ub3RhdGlvbnMgPSBjb25zdHJ1Y3QuZ2V0QW5ub3RhdGlvbk1p
cnJvcnMoKTsKQEAgLTU0Nyw0ICs2NjQsNSBAQAogCQl9CiAJfQorCiAJcHJpdmF0ZSBTdHJpbmcg
Z2V0QW5ub3RhdGlvblN0cmluZyhBbm5vdGF0aW9uTWlycm9yIGFubm90KSB7CiAJCURlY2xhcmVk
VHlwZSBhbm5vdFR5cGUgPSBhbm5vdC5nZXRBbm5vdGF0aW9uVHlwZSgpOwpAQCAtNTYzLDQgKzY4
MSw1IEBACiAJCXJldHVybiBidWYudG9TdHJpbmcoKTsKIAl9CisKIAlwcml2YXRlIDxBIGV4dGVu
ZHMgQW5ub3RhdGlvbj4gdm9pZCBleGFtaW5lU0U4QW5ub3RhdGlvbk1ldGhvZHMoU3RyaW5nIG1z
ZywgQW5ub3RhdGVkQ29uc3RydWN0IGNvbnN0cnVjdCwgIFN0cmluZyB2YWx1ZSkgewogCQlUeXBl
IGFubm90ID0gY29uc3RydWN0LmdldEFubm90YXRpb24oVHlwZS5jbGFzcyk7CkBAIC01ODksNCAr
NzA4LDkgQEAKIAkJaWYgKG9iajEgIT0gb2JqMikgewogCQkJcmVwb3J0RXJyb3IobXNnICsgIiwg
c2hvdWxkIGJlICIgKyBvYmoxLnRvU3RyaW5nKCkgKyAiIGJ1dCAiICsgb2JqMi50b1N0cmluZygp
KTsKKwkJfQorCX0KKwlwdWJsaWMgdm9pZCBhc3NlcnROb3RTYW1lKFN0cmluZyBtc2csIE9iamVj
dCBvYmoxLCBPYmplY3Qgb2JqMikgeworCQlpZiAob2JqMSA9PSBvYmoyKSB7CisJCQlyZXBvcnRF
cnJvcihtc2cgKyAiLCAiICsgb2JqMS50b1N0cmluZygpICsgIiBzaG91bGQgbm90IGJlIHNhbWUg
YXMgIiArIG9iajIudG9TdHJpbmcoKSk7CiAJCX0KIAl9CkBAIC02MzYsNCArNzYwLDMgQEAKIAkJ
fQogCX0KLQkKIH0KZGlmZiAtLWdpdCByZXNvdXJjZXMvdGFyZ2V0cy9tb2RlbDgvTGFtYmRhVGVz
dC5qYXZhIHJlc291cmNlcy90YXJnZXRzL21vZGVsOC9MYW1iZGFUZXN0LmphdmEKaW5kZXggNjU4
OWViMS4uMTQ2NjVkOCAxMDA2NDQKLS0tIHJlc291cmNlcy90YXJnZXRzL21vZGVsOC9MYW1iZGFU
ZXN0LmphdmEKKysrIHJlc291cmNlcy90YXJnZXRzL21vZGVsOC9MYW1iZGFUZXN0LmphdmEKQEAg
LTMzLDMgKzMzLDMgQEAKIGludGVyZmFjZSBGdW5jdGlvbmFsSW50ZXJmYWNlIHsKIAlwdWJsaWMg
YWJzdHJhY3QgU3RyaW5nIGFic3RyYWN0TWV0aG9kICgpOwotfQpcIE5vIG5ld2xpbmUgYXQgZW5k
IG9mIGZpbGUKK30KZGlmZiAtLWdpdCByZXNvdXJjZXMvdGFyZ2V0cy9tb2RlbDgvWC5qYXZhIHJl
c291cmNlcy90YXJnZXRzL21vZGVsOC9YLmphdmEKaW5kZXggYjhlNjkwZS4uMWYzNmNjNCAxMDA2
NDQKLS0tIHJlc291cmNlcy90YXJnZXRzL21vZGVsOC9YLmphdmEKKysrIHJlc291cmNlcy90YXJn
ZXRzL21vZGVsOC9YLmphdmEKQEAgLTIzLDcgKzIzLDkgQEAKIAlAVHlwZSgiZiIpIFN0cmluZyBf
ZmllbGQgPSBudWxsOwogCUBUeXBlKCJmMSIpIFggX2ZpZWxkMSA9IG51bGw7CisJQFR5cGUoImYx
IikgWCBfZmllbGQxMSA9IG51bGw7CiAJQFR5cGUkMSBAT25lIFN0cmluZyBfZmllbGQyID0gbnVs
bDsKIAlYIF9maWVsZDMgPSBudWxsOwogCVguIEBUeXBlKCJ4eSIpIFhZIHh5OworCWludCBfaSA9
IDEwOwogCXB1YmxpYyB2b2lkIG5vQW5ub3RhdGlvbkhlcmUoKSB7CiAJfQpAQCAtMzMsNSArMzUs
MTAgQEAKIAl2b2lkIGJhcihAVHlwZSgicDEiKSBTdHJpbmcgcDEsIEBUeXBlKCJwMiIpIFN0cmlu
ZyBwMikge30KIAlwdWJsaWMgdm9pZCBiYXIyKEBUeXBlKCJyZWNlaXZlciIpIFggdGhpcykge30K
LQljbGFzcyBYWSB7fQorCS8vIFN0YXRpYyBtZXRob2RzIGFuZCB0b3AgbGV2ZWwgY29uc3RydWN0
b3JzIGRvIG5vdCBoYXZlIHJlY2VpdmVycworCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmlu
Z1tdIGFyZ3MpIHt9CisJcHVibGljIFgoKXt9CisJY2xhc3MgWFkgeworCQlYWShAVHlwZSgicmVj
ZWl2ZXIiKSBYIFgudGhpcykge30KKwl9CiB9CiAKZGlmZiAtLWdpdCByZXNvdXJjZXMvdGFyZ2V0
cy9tb2RlbDgvWi5qYXZhIHJlc291cmNlcy90YXJnZXRzL21vZGVsOC9aLmphdmEKaW5kZXggMjQ2
MWFhZC4uN2EyMGU1NSAxMDA2NDQKLS0tIHJlc291cmNlcy90YXJnZXRzL21vZGVsOC9aLmphdmEK
KysrIHJlc291cmNlcy90YXJnZXRzL21vZGVsOC9aLmphdmEKQEAgLTIxLDMgKzIxLDIgQEAKIAlw
dWJsaWMgPEBUeXBlKCJtcDEiKSBULCBAVHlwZSgibXAyIikgVT4gdm9pZCBmb28oKSB7fQogfQot
CmRpZmYgLS1naXQgcmVzb3VyY2VzL3RhcmdldHMvbW9kZWw4L1oxLmphdmEgcmVzb3VyY2VzL3Rh
cmdldHMvbW9kZWw4L1oxLmphdmEKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMC4u
OTEzZDljNgotLS0gL2Rldi9udWxsCisrKyByZXNvdXJjZXMvdGFyZ2V0cy9tb2RlbDgvWjEuamF2
YQpAQCAtMCwwICsxLDIwIEBACisvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgorICogQ29weXJpZ2h0
IChjKSAyMDEzIElCTSBDb3Jwb3JhdGlvbi4KKyAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMg
cHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKKyAqIGFyZSBtYWRlIGF2YWls
YWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAor
ICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUg
YXQKKyAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCisgKiAKKyAq
IFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQgc3BlY2lmaWNhdGlv
biBkZXZlbG9wZWQgdW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0eSBQcm9jZXNzIChKQ1ApIGFu
ZCBpcyBtYWRlIGF2YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiBwdXJwb3Nlcwor
ICogb25seS4gVGhlIGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkgc3BlY2lmaWNhdGlv
biBvZiB0aGUgSkNQLgorICogCisgKiBDb250cmlidXRvcnM6CisgKiAgICAgSUJNIENvcnBvcmF0
aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCisgKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKi8KK3BhY2thZ2UgdGFyZ2V0cy5tb2RlbDg7CisKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
Y29tcGlsZXIuYXB0LnRlc3RzLmFubm90YXRpb25zLlR5cGU7CisKK3B1YmxpYyBjbGFzcyBaMSA8
QFR5cGUoInRwMSIpIEtLLCBAVHlwZSgidHAyIikgVlY+IHsKK30KXCBObyBuZXdsaW5lIGF0IGVu
ZCBvZiBmaWxlCmRpZmYgLS1naXQgcmVzb3VyY2VzL3RhcmdldHMvbW9kZWw4L1oyLmphdmEgcmVz
b3VyY2VzL3RhcmdldHMvbW9kZWw4L1oyLmphdmEKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXgg
MDAwMDAwMC4uNWNlYjdiYwotLS0gL2Rldi9udWxsCisrKyByZXNvdXJjZXMvdGFyZ2V0cy9tb2Rl
bDgvWjIuamF2YQpAQCAtMCwwICsxLDIxIEBACisvKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgorICog
Q29weXJpZ2h0IChjKSAyMDEzIElCTSBDb3Jwb3JhdGlvbi4KKyAqIEFsbCByaWdodHMgcmVzZXJ2
ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKKyAqIGFyZSBt
YWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vu
c2UgdjEuMAorICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBh
dmFpbGFibGUgYXQKKyAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1s
CisgKiAKKyAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQgc3Bl
Y2lmaWNhdGlvbiBkZXZlbG9wZWQgdW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0eSBQcm9jZXNz
IChKQ1ApIGFuZCBpcyBtYWRlIGF2YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiBw
dXJwb3NlcworICogb25seS4gVGhlIGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkgc3Bl
Y2lmaWNhdGlvbiBvZiB0aGUgSkNQLgorICogCisgKiBDb250cmlidXRvcnM6CisgKiAgICAgSUJN
IENvcnBvcmF0aW9uIC0gaW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCisgKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKi8KK3BhY2thZ2UgdGFyZ2V0cy5tb2RlbDg7CisKK2ltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuY29tcGlsZXIuYXB0LnRlc3RzLmFubm90YXRpb25zLlR5cGU7CisKK3B1YmxpYyBj
bGFzcyBaMiB7CisJcHVibGljIDxAVHlwZSgibXAxIikgS0tLLCBAVHlwZSgibXAyIikgVlZWPiB2
b2lkIGZvbygpIHt9Cit9CmRpZmYgLS1naXQgc3JjL29yZy9lY2xpcHNlL2pkdC9jb21waWxlci9h
cHQvdGVzdHMvSmF2YThFbGVtZW50c1Rlc3RzLmphdmEgc3JjL29yZy9lY2xpcHNlL2pkdC9jb21w
aWxlci9hcHQvdGVzdHMvSmF2YThFbGVtZW50c1Rlc3RzLmphdmEKaW5kZXggNjZlMGFiYy4uYmJh
MTNkNSAxMDA2NDQKLS0tIHNyYy9vcmcvZWNsaXBzZS9qZHQvY29tcGlsZXIvYXB0L3Rlc3RzL0ph
dmE4RWxlbWVudHNUZXN0cy5qYXZhCisrKyBzcmMvb3JnL2VjbGlwc2UvamR0L2NvbXBpbGVyL2Fw
dC90ZXN0cy9KYXZhOEVsZW1lbnRzVGVzdHMuamF2YQpAQCAtMTM2LDM1ICsxMzYsNjQgQEAKIAl9
CiAJcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczEwKCkgdGhyb3dzIEV4Y2VwdGlvbiB7
Ci0JCVN5c3RlbS5vdXQucHJpbnRsbigiRWNsaXBzZSBjb21waWxlcjoiKTsKIAkJSmF2YUNvbXBp
bGVyIGNvbXBpbGVyID0gQmF0Y2hUZXN0VXRpbHMuZ2V0RWNsaXBzZUNvbXBpbGVyKCk7CiAJCWlu
dGVybmFsVGVzdChjb21waWxlciwgVFlQRV9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0VHlwZUFubm90
YXRpb25zMTAiKTsKIAl9CiAJcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczEwV2l0aEph
dmFjKCkgdGhyb3dzIEV4Y2VwdGlvbiB7Ci0JCVN5c3RlbS5vdXQucHJpbnRsbigiSmF2YWMgY29t
cGlsZXI6Iik7CiAJCUphdmFDb21waWxlciBjb21waWxlciA9IFRvb2xQcm92aWRlci5nZXRTeXN0
ZW1KYXZhQ29tcGlsZXIoKTsKIAkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBUWVBFX0FOTk9UQVRJ
T05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlvbnMxMCIpOwogCX0KIAlwdWJsaWMgdm9pZCB0ZXN0
VHlwZUFubm90YXRpb25zMTEoKSB0aHJvd3MgRXhjZXB0aW9uIHsKLQkJU3lzdGVtLm91dC5wcmlu
dGxuKCJFY2xpcHNlIGNvbXBpbGVyOiIpOwogCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBCYXRj
aFRlc3RVdGlscy5nZXRFY2xpcHNlQ29tcGlsZXIoKTsKIAkJaW50ZXJuYWxUZXN0KGNvbXBpbGVy
LCBUWVBFX0FOTk9UQVRJT05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlvbnMxMSIpOwogCX0KIAlw
dWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90YXRpb25zMTFXaXRoSmF2YWMoKSB0aHJvd3MgRXhjZXB0
aW9uIHsKLQkJU3lzdGVtLm91dC5wcmludGxuKCJKYXZhYyBjb21waWxlcjoiKTsKIAkJSmF2YUNv
bXBpbGVyIGNvbXBpbGVyID0gVG9vbFByb3ZpZGVyLmdldFN5c3RlbUphdmFDb21waWxlcigpOwog
CQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIFRZUEVfQU5OT1RBVElPTl9QUk9DLCAidGVzdFR5cGVB
bm5vdGF0aW9uczExIik7CiAJfQogCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnMxMigp
IHRocm93cyBFeGNlcHRpb24gewotCQlTeXN0ZW0ub3V0LnByaW50bG4oIkVjbGlwc2UgY29tcGls
ZXI6Iik7CiAJCUphdmFDb21waWxlciBjb21waWxlciA9IEJhdGNoVGVzdFV0aWxzLmdldEVjbGlw
c2VDb21waWxlcigpOwogCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIFRZUEVfQU5OT1RBVElPTl9Q
Uk9DLCAidGVzdFR5cGVBbm5vdGF0aW9uczEyIik7CiAJfQogCXB1YmxpYyB2b2lkIHRlc3RUeXBl
QW5ub3RhdGlvbnMxMldpdGhKYXZhYygpIHRocm93cyBFeGNlcHRpb24gewotCQlTeXN0ZW0ub3V0
LnByaW50bG4oIkphdmFjIGNvbXBpbGVyOiIpOwogCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBU
b29sUHJvdmlkZXIuZ2V0U3lzdGVtSmF2YUNvbXBpbGVyKCk7CiAJCWludGVybmFsVGVzdChjb21w
aWxlciwgVFlQRV9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0VHlwZUFubm90YXRpb25zMTIiKTsKIAl9
CisJcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczEzKCkgdGhyb3dzIEV4Y2VwdGlvbiB7
CisJCUphdmFDb21waWxlciBjb21waWxlciA9IEJhdGNoVGVzdFV0aWxzLmdldEVjbGlwc2VDb21w
aWxlcigpOworCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIFRZUEVfQU5OT1RBVElPTl9QUk9DLCAi
dGVzdFR5cGVBbm5vdGF0aW9uczEzIik7CisJfQorCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3Rh
dGlvbnMxM1dpdGhKYXZhYygpIHRocm93cyBFeGNlcHRpb24geworCQlKYXZhQ29tcGlsZXIgY29t
cGlsZXIgPSBUb29sUHJvdmlkZXIuZ2V0U3lzdGVtSmF2YUNvbXBpbGVyKCk7CisJCWludGVybmFs
VGVzdChjb21waWxlciwgVFlQRV9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0VHlwZUFubm90YXRpb25z
MTMiKTsKKwl9CisJcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczE0KCkgdGhyb3dzIEV4
Y2VwdGlvbiB7CisJCUphdmFDb21waWxlciBjb21waWxlciA9IEJhdGNoVGVzdFV0aWxzLmdldEVj
bGlwc2VDb21waWxlcigpOworCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIFRZUEVfQU5OT1RBVElP
Tl9QUk9DLCAidGVzdFR5cGVBbm5vdGF0aW9uczE0Iik7CisJfQorCXB1YmxpYyB2b2lkIF90ZXN0
VHlwZUFubm90YXRpb25zMTRXaXRoSmF2YWMoKSB0aHJvd3MgRXhjZXB0aW9uIHsgLy8gRGlzYWJs
ZWQgZm9yIG5vdy4gSmF2YWMgcmV0dXJucyBudWxsIGFzIHJlY2VpdmVyIHR5cGUgd2hlcmUgaXQg
c2hvdWxkIGJlIHR5cGUgJ05vbmUnCisJCUphdmFDb21waWxlciBjb21waWxlciA9IFRvb2xQcm92
aWRlci5nZXRTeXN0ZW1KYXZhQ29tcGlsZXIoKTsKKwkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBU
WVBFX0FOTk9UQVRJT05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlvbnMxNCIpOworCX0KKwlwdWJs
aWMgdm9pZCB0ZXN0VHlwZUFubm90YXRpb25zMTUoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJSmF2
YUNvbXBpbGVyIGNvbXBpbGVyID0gQmF0Y2hUZXN0VXRpbHMuZ2V0RWNsaXBzZUNvbXBpbGVyKCk7
CisJCWludGVybmFsVGVzdChjb21waWxlciwgVFlQRV9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0VHlw
ZUFubm90YXRpb25zMTUiLCAiWjEuamF2YSIpOworCX0KKwlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFu
bm90YXRpb25zMTVXaXRoSmF2YWMoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKwkJSmF2YUNvbXBpbGVy
IGNvbXBpbGVyID0gVG9vbFByb3ZpZGVyLmdldFN5c3RlbUphdmFDb21waWxlcigpOworCQlpbnRl
cm5hbFRlc3QoY29tcGlsZXIsIFRZUEVfQU5OT1RBVElPTl9QUk9DLCAidGVzdFR5cGVBbm5vdGF0
aW9uczE1IiwgIloxLmphdmEiKTsKKwl9CisJcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9u
czE2KCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisJCUphdmFDb21waWxlciBjb21waWxlciA9IEJhdGNo
VGVzdFV0aWxzLmdldEVjbGlwc2VDb21waWxlcigpOworCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIs
IFRZUEVfQU5OT1RBVElPTl9QUk9DLCAidGVzdFR5cGVBbm5vdGF0aW9uczE2IiwgIloyLmphdmEi
KTsKKwl9CisJcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczE2V2l0aEphdmFjKCkgdGhy
b3dzIEV4Y2VwdGlvbiB7CisJCUphdmFDb21waWxlciBjb21waWxlciA9IFRvb2xQcm92aWRlci5n
ZXRTeXN0ZW1KYXZhQ29tcGlsZXIoKTsKKwkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBUWVBFX0FO
Tk9UQVRJT05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlvbnMxNiIsICJaMi5qYXZhIik7CisJfQog
CiAJcHJpdmF0ZSB2b2lkIGludGVybmFsVGVzdChKYXZhQ29tcGlsZXIgY29tcGlsZXIsIFN0cmlu
ZyBwcm9jZXNzb3IsIFN0cmluZyB0ZXN0TWV0aG9kKSB0aHJvd3MgSU9FeGNlcHRpb24geworCQlp
bnRlcm5hbFRlc3QoY29tcGlsZXIsIHByb2Nlc3NvciwgdGVzdE1ldGhvZCwgbnVsbCk7CisJfQor
CXByaXZhdGUgdm9pZCBpbnRlcm5hbFRlc3QoSmF2YUNvbXBpbGVyIGNvbXBpbGVyLCBTdHJpbmcg
cHJvY2Vzc29yLCBTdHJpbmcgdGVzdE1ldGhvZCwgU3RyaW5nIHRlc3RDbGFzcykgdGhyb3dzIElP
RXhjZXB0aW9uIHsKIAkJaWYgKCFjYW5SdW5KYXZhOCgpKSB7CiAJCQlyZXR1cm47CkBAIC0xNzIs
NSArMjAxLDEwIEBACiAJCVN5c3RlbS5jbGVhclByb3BlcnR5KHByb2Nlc3Nvcik7CiAJCUZpbGUg
dGFyZ2V0Rm9sZGVyID0gVGVzdFV0aWxzLmNvbmNhdFBhdGgoQmF0Y2hUZXN0VXRpbHMuZ2V0U3Jj
Rm9sZGVyTmFtZSgpLCAidGFyZ2V0cyIsICJtb2RlbDgiKTsKLQkJQmF0Y2hUZXN0VXRpbHMuY29w
eVJlc291cmNlcygidGFyZ2V0cy9tb2RlbDgiLCB0YXJnZXRGb2xkZXIpOworCQlpZiAodGVzdENs
YXNzID09IG51bGwgfHwgdGVzdENsYXNzLmVxdWFscygiIikpIHsKKwkJCUJhdGNoVGVzdFV0aWxz
LmNvcHlSZXNvdXJjZXMoInRhcmdldHMvbW9kZWw4IiwgdGFyZ2V0Rm9sZGVyKTsKKwkJfSBlbHNl
IHsKKwkJCUJhdGNoVGVzdFV0aWxzLmNvcHlSZXNvdXJjZSgidGFyZ2V0cy9tb2RlbDgvIiArIHRl
c3RDbGFzcywgdGFyZ2V0Rm9sZGVyKTsKKwkJfQorCQkKIAogCQlMaXN0PFN0cmluZz4gb3B0aW9u
cyA9IG5ldyBBcnJheUxpc3Q8U3RyaW5nPigpOwojUCBvcmcuZWNsaXBzZS5qZHQuY29tcGlsZXIu
YXB0CmRpZmYgLS1naXQgc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQv
ZGlzcGF0Y2gvQW5ub3RhdGlvbkRpc2NvdmVyeVZpc2l0b3IuamF2YSBzcmMvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9kaXNwYXRjaC9Bbm5vdGF0aW9uRGlzY292ZXJ5Vmlz
aXRvci5qYXZhCmluZGV4IDc0NDI4ZDguLjAxNjg4MjcgMTAwNjQ0Ci0tLSBzcmMvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9kaXNwYXRjaC9Bbm5vdGF0aW9uRGlzY292ZXJ5
VmlzaXRvci5qYXZhCisrKyBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fw
dC9kaXNwYXRjaC9Bbm5vdGF0aW9uRGlzY292ZXJ5VmlzaXRvci5qYXZhCkBAIC0xOTEsMTUgKzE5
MSwxMyBAQAogCQkJQW5ub3RhdGlvbltdIGFubm90YXRpb25zLAogCQkJQmluZGluZyBjdXJyZW50
QmluZGluZykgewotCQlib29sZWFuIHJlc29sdmVkID0gZmFsc2U7CiAJCWZvciAoQW5ub3RhdGlv
biBhbm5vdGF0aW9uIDogYW5ub3RhdGlvbnMpIHsKKwkJCUFTVE5vZGUucmVzb2x2ZUFubm90YXRp
b25zKHNjb3BlLCBhbm5vdGF0aW9ucywgY3VycmVudEJpbmRpbmcsIHRydWUpOwogCQkJQW5ub3Rh
dGlvbkJpbmRpbmcgYmluZGluZyA9IGFubm90YXRpb24uZ2V0Q29tcGlsZXJBbm5vdGF0aW9uKCk7
Ci0JCQlpZiAoYmluZGluZyA9PSBudWxsICYmICFyZXNvbHZlZCkgewotCQkJCUFTVE5vZGUucmVz
b2x2ZUFubm90YXRpb25zKHNjb3BlLCBhbm5vdGF0aW9ucywgY3VycmVudEJpbmRpbmcsIHRydWUp
OwotCQkJCWJpbmRpbmcgPSBhbm5vdGF0aW9uLmdldENvbXBpbGVyQW5ub3RhdGlvbigpOwotCQkJ
CXJlc29sdmVkID0gdHJ1ZTsKLQkJCX0KKwkJCUVsZW1lbnQgZWxlbWVudCA9IG51bGw7CiAJCQlp
ZiAoYmluZGluZyAhPSBudWxsKSB7IC8vIGJpbmRpbmcgc2hvdWxkIGJlIHJlc29sdmVkLCBidXQg
aW4gY2FzZSBpdCdzIG5vdCwgaWdub3JlIGl0Ci0JCQkJVHlwZUVsZW1lbnQgYW5ubyA9IChUeXBl
RWxlbWVudClfZmFjdG9yeS5uZXdFbGVtZW50KGJpbmRpbmcuZ2V0QW5ub3RhdGlvblR5cGUoKSk7
IAotCQkJCUVsZW1lbnQgZWxlbWVudCA9IF9mYWN0b3J5Lm5ld0VsZW1lbnQoY3VycmVudEJpbmRp
bmcpOworCQkJCVR5cGVFbGVtZW50IGFubm8gPSAoVHlwZUVsZW1lbnQpX2ZhY3RvcnkubmV3RWxl
bWVudChiaW5kaW5nLmdldEFubm90YXRpb25UeXBlKCkpOworCQkJCWlmIChlbGVtZW50ID09IG51
bGwpIHsKKwkJCQkJZWxlbWVudCA9IF9mYWN0b3J5Lm5ld0VsZW1lbnQoY3VycmVudEJpbmRpbmcp
OworCQkJCX0KIAkJCQlfYW5ub1RvRWxlbWVudC5wdXQoYW5ubywgZWxlbWVudCk7CiAJCQl9CmRp
ZmYgLS1naXQgc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQvbW9kZWwv
RWxlbWVudEltcGwuamF2YSBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fw
dC9tb2RlbC9FbGVtZW50SW1wbC5qYXZhCmluZGV4IDQ0MTQ2YTQuLmQwOWYyZmUgMTAwNjQ0Ci0t
LSBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9FbGVtZW50
SW1wbC5qYXZhCisrKyBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9t
b2RlbC9FbGVtZW50SW1wbC5qYXZhCkBAIC0xMDksMTIgKzEwOSw1IEBACiAJQE92ZXJyaWRlCiAJ
cHVibGljIFN0cmluZyB0b1N0cmluZygpIHsKLQkJU3RyaW5nQnVmZmVyIGJ1ZiA9IG5ldyBTdHJp
bmdCdWZmZXIoKTsKLQkJTGlzdDw/IGV4dGVuZHMgQW5ub3RhdGlvbk1pcnJvcj4gYW5ub3RzID0g
Z2V0QW5ub3RhdGlvbk1pcnJvcnMoKTsKLQkJZm9yIChBbm5vdGF0aW9uTWlycm9yIGFubm90YXRp
b25NaXJyb3IgOiBhbm5vdHMpIHsKLQkJCWJ1Zi5hcHBlbmQoYW5ub3RhdGlvbk1pcnJvci50b1N0
cmluZygpKTsKLQkJCWJ1Zi5hcHBlbmQoJyAnKTsKLQkJfQotCQlidWYuYXBwZW5kKF9iaW5kaW5n
LnRvU3RyaW5nKCkpOwotCQlyZXR1cm4gYnVmLnRvU3RyaW5nKCk7CisJCXJldHVybiBfYmluZGlu
Zy50b1N0cmluZygpOwogCX0KIApkaWZmIC0tZ2l0IHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXB0L21vZGVsL0V4ZWN1dGFibGVFbGVtZW50SW1wbC5qYXZhIHNyYy9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL0V4ZWN1dGFibGVFbGVtZW50
SW1wbC5qYXZhCmluZGV4IDRkYzhiMTYuLjQ5ZTMwYmYgMTAwNjQ0Ci0tLSBzcmMvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9FeGVjdXRhYmxlRWxlbWVudEltcGwu
amF2YQorKysgc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQvbW9kZWwv
RXhlY3V0YWJsZUVsZW1lbnRJbXBsLmphdmEKQEAgLTM0MCwxNyArMzQwLDEyIEBACiAKIAlwdWJs
aWMgVHlwZU1pcnJvciBnZXRSZWNlaXZlclR5cGUoKSB7Ci0JCU1ldGhvZEJpbmRpbmcgYmluZGlu
ZyA9IChNZXRob2RCaW5kaW5nKV9iaW5kaW5nOwotCQlpZiAoYmluZGluZy5yZWNlaXZlciAhPSBu
dWxsKSB7Ci0JCQlyZXR1cm4gX2Vudi5nZXRGYWN0b3J5KCkubmV3VHlwZU1pcnJvcihiaW5kaW5n
LnJlY2VpdmVyKTsKLQkJfQotCQlpZiAoYmluZGluZy5kZWNsYXJpbmdDbGFzcyAhPSBudWxsKSB7
Ci0JCQlyZXR1cm4gX2Vudi5nZXRGYWN0b3J5KCkubmV3VHlwZU1pcnJvcihiaW5kaW5nLmRlY2xh
cmluZ0NsYXNzKTsKLQkJfQotCQlyZXR1cm4gTm9UeXBlSW1wbC5OT19UWVBFX05PTkU7CisJCXJl
dHVybiBfZW52LmdldEZhY3RvcnkoKS5nZXRSZWNlaXZlclR5cGUoKE1ldGhvZEJpbmRpbmcpIF9i
aW5kaW5nKTsKIAl9CiAKIAlwdWJsaWMgYm9vbGVhbiBpc0RlZmF1bHQoKSB7Ci0JCU1ldGhvZEJp
bmRpbmcgYmluZGluZyA9IChNZXRob2RCaW5kaW5nKV9iaW5kaW5nOwotCQlyZXR1cm4gYmluZGlu
Zy5pc0RlZmF1bHRNZXRob2QoKTsKKwkJaWYgKF9iaW5kaW5nICE9IG51bGwpIHsKKwkJCXJldHVy
biAoKE1ldGhvZEJpbmRpbmcpX2JpbmRpbmcpLmlzRGVmYXVsdE1ldGhvZCgpOworCQl9CisJCXJl
dHVybiBmYWxzZTsKIAl9CiAKZGlmZiAtLWdpdCBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FwdC9tb2RlbC9FeGVjdXRhYmxlVHlwZUltcGwuamF2YSBzcmMvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9FeGVjdXRhYmxlVHlwZUltcGwuamF2
YQppbmRleCBlZGM1OGRhLi4wYWFlNDdhIDEwMDY0NAotLS0gc3JjL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9hcHQvbW9kZWwvRXhlY3V0YWJsZVR5cGVJbXBsLmphdmEKKysrIHNy
Yy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0L21vZGVsL0V4ZWN1dGFibGVU
eXBlSW1wbC5qYXZhCkBAIC0xMjksMTIgKzEyOSw1IEBACiAKIAlwdWJsaWMgVHlwZU1pcnJvciBn
ZXRSZWNlaXZlclR5cGUoKSB7Ci0JCU1ldGhvZEJpbmRpbmcgYmluZGluZyA9IChNZXRob2RCaW5k
aW5nKV9iaW5kaW5nOwotCQlpZiAoYmluZGluZy5yZWNlaXZlciAhPSBudWxsKSB7Ci0JCQlyZXR1
cm4gX2Vudi5nZXRGYWN0b3J5KCkubmV3VHlwZU1pcnJvcihiaW5kaW5nLnJlY2VpdmVyKTsKLQkJ
fQotCQlpZiAoYmluZGluZy5kZWNsYXJpbmdDbGFzcyAhPSBudWxsKSB7Ci0JCQlyZXR1cm4gX2Vu
di5nZXRGYWN0b3J5KCkubmV3VHlwZU1pcnJvcihiaW5kaW5nLmRlY2xhcmluZ0NsYXNzKTsKLQkJ
fQotCQlyZXR1cm4gTm9UeXBlSW1wbC5OT19UWVBFX05PTkU7CisJCXJldHVybiBfZW52LmdldEZh
Y3RvcnkoKS5nZXRSZWNlaXZlclR5cGUoKE1ldGhvZEJpbmRpbmcpIF9iaW5kaW5nKTsKIAl9CiB9
CmRpZmYgLS1naXQgc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQvbW9k
ZWwvRmFjdG9yeS5qYXZhIHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXB0
L21vZGVsL0ZhY3RvcnkuamF2YQppbmRleCAwNmVhNGJhLi42M2Q3NGY5IDEwMDY0NAotLS0gc3Jj
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hcHQvbW9kZWwvRmFjdG9yeS5qYXZh
CisrKyBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9GYWN0
b3J5LmphdmEKQEAgLTIyMyw0ICsyMjMsMTggQEAKICAgICB9CiAgICAgCisJcHVibGljIFR5cGVN
aXJyb3IgZ2V0UmVjZWl2ZXJUeXBlKE1ldGhvZEJpbmRpbmcgYmluZGluZykgeworCQlpZiAoYmlu
ZGluZyAhPSBudWxsKSB7CisJCQlpZiAoYmluZGluZy5yZWNlaXZlciAhPSBudWxsKSB7CisJCQkJ
cmV0dXJuIF9lbnYuZ2V0RmFjdG9yeSgpLm5ld1R5cGVNaXJyb3IoYmluZGluZy5yZWNlaXZlcik7
CisJCQl9CisJCQlpZiAoYmluZGluZy5kZWNsYXJpbmdDbGFzcyAhPSBudWxsKSB7CisJCQkJaWYg
KCFiaW5kaW5nLmlzU3RhdGljKCkgJiYgKCFiaW5kaW5nLmlzQ29uc3RydWN0b3IoKSB8fCBiaW5k
aW5nLmRlY2xhcmluZ0NsYXNzLmlzTWVtYmVyVHlwZSgpKSkgeworCQkJCQlyZXR1cm4gX2Vudi5n
ZXRGYWN0b3J5KCkubmV3VHlwZU1pcnJvcihiaW5kaW5nLmRlY2xhcmluZ0NsYXNzKTsJCisJCQkJ
fQorCQkJfQorCQl9CisJCXJldHVybiBOb1R5cGVJbXBsLk5PX1RZUEVfTk9ORTsKKwl9CisgICAg
CiAJcHVibGljIHN0YXRpYyBTZXQ8TW9kaWZpZXI+IGdldE1vZGlmaWVycyhpbnQgbW9kaWZpZXJz
LCBFbGVtZW50S2luZCBraW5kKSB7CiAJCXJldHVybiBnZXRNb2RpZmllcnMobW9kaWZpZXJzLCBr
aW5kLCBmYWxzZSk7CmRpZmYgLS1naXQgc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9hcHQvbW9kZWwvVHlwZU1pcnJvckltcGwuamF2YSBzcmMvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9UeXBlTWlycm9ySW1wbC5qYXZhCmluZGV4IGEwOGEy
OTUuLmM3MTU3MjYgMTAwNjQ0Ci0tLSBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FwdC9tb2RlbC9UeXBlTWlycm9ySW1wbC5qYXZhCisrKyBzcmMvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9UeXBlTWlycm9ySW1wbC5qYXZhCkBAIC0xMjIs
MTMgKzEyMiwxNiBAQAogCiAJcHVibGljIExpc3Q8PyBleHRlbmRzIEFubm90YXRpb25NaXJyb3I+
IGdldEFubm90YXRpb25NaXJyb3JzKCkgewotCQlyZXR1cm4gX2Vudi5nZXRGYWN0b3J5KCkuZ2V0
QW5ub3RhdGlvbk1pcnJvcnMoZ2V0QW5ub3RhdGlvbkJpbmRpbmdzKCkpOworCQlyZXR1cm4gX2Vu
diA9PSBudWxsID8gRmFjdG9yeS5FTVBUWV9BTk5PVEFUSU9OX01JUlJPUlMgOiAKKwkJCQkJCQkJ
X2Vudi5nZXRGYWN0b3J5KCkuZ2V0QW5ub3RhdGlvbk1pcnJvcnMoZ2V0QW5ub3RhdGlvbkJpbmRp
bmdzKCkpOwogCX0KIAogCXB1YmxpYyA8QSBleHRlbmRzIEFubm90YXRpb24+IEEgZ2V0QW5ub3Rh
dGlvbihDbGFzczxBPiBhbm5vdGF0aW9uVHlwZSkgewotCQlyZXR1cm4gX2Vudi5nZXRGYWN0b3J5
KCkuZ2V0QW5ub3RhdGlvbihnZXRBbm5vdGF0aW9uQmluZGluZ3MoKSwgYW5ub3RhdGlvblR5cGUp
OworCQlyZXR1cm4gX2VudiA9PSBudWxsID8gbnVsbCA6IF9lbnYuZ2V0RmFjdG9yeSgpLmdldEFu
bm90YXRpb24oZ2V0QW5ub3RhdGlvbkJpbmRpbmdzKCksIGFubm90YXRpb25UeXBlKTsKIAl9CiAK
KwlAU3VwcHJlc3NXYXJuaW5ncygidW5jaGVja2VkIikKIAlwdWJsaWMgPEEgZXh0ZW5kcyBBbm5v
dGF0aW9uPiBBW10gZ2V0QW5ub3RhdGlvbnNCeVR5cGUoQ2xhc3M8QT4gYW5ub3RhdGlvblR5cGUp
IHsKLQkJcmV0dXJuIF9lbnYuZ2V0RmFjdG9yeSgpLmdldEFubm90YXRpb25zQnlUeXBlKGdldEFu
bm90YXRpb25CaW5kaW5ncygpLCBhbm5vdGF0aW9uVHlwZSk7CisJCXJldHVybiBfZW52ID09IG51
bGwgPyAoQVtdKSBGYWN0b3J5LkVNUFRZX0FOTk9UQVRJT05TIDogCisJCQkJCQkJCV9lbnYuZ2V0
RmFjdG9yeSgpLmdldEFubm90YXRpb25zQnlUeXBlKGdldEFubm90YXRpb25CaW5kaW5ncygpLCBh
bm5vdGF0aW9uVHlwZSk7CiAJfQogCmRpZmYgLS1naXQgc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hcHQvbW9kZWwvVHlwZXNJbXBsLmphdmEgc3JjL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hcHQvbW9kZWwvVHlwZXNJbXBsLmphdmEKaW5kZXggMTg3ZmMw
Yi4uNDg5OGU1YiAxMDA2NDQKLS0tIHNyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvYXB0L21vZGVsL1R5cGVzSW1wbC5qYXZhCisrKyBzcmMvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2FwdC9tb2RlbC9UeXBlc0ltcGwuamF2YQpAQCAtMzk2LDUgKzM5NiwxMiBA
QAogICAgICAgICBCaW5kaW5nIGIxID0gKChUeXBlTWlycm9ySW1wbCl0MSkuYmluZGluZygpOwog
ICAgICAgICBCaW5kaW5nIGIyID0gKChUeXBlTWlycm9ySW1wbCl0MikuYmluZGluZygpOwotICAg
ICAgICByZXR1cm4gYjEgPT0gYjI7CisKKyAgICAgICAgaWYgKGIxID09IGIyKSB7CisgICAgICAg
ICAgICByZXR1cm4gdHJ1ZTsKKyAgICAgICAgfQorICAgICAgICBpZiAoIShiMSBpbnN0YW5jZW9m
IFR5cGVCaW5kaW5nKSB8fCAhKGIyIGluc3RhbmNlb2YgVHlwZUJpbmRpbmcpKSB7CisgICAgICAg
ICAgICByZXR1cm4gZmFsc2U7CisgICAgICAgIH0KKyAgICAgICAgcmV0dXJuICgoVHlwZUJpbmRp
bmcpIGIxKS5wcm90b3R5cGUoKSA9PSAoKFR5cGVCaW5kaW5nKSBiMikucHJvdG90eXBlKCk7IAog
ICAgIH0KIAojUCBvcmcuZWNsaXBzZS5qZHQuY29yZQpkaWZmIC0tZ2l0IGNvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQVNUTm9kZS5qYXZhIGNvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQVNUTm9kZS5qYXZhCmluZGV4IDA5
MWFkMjIuLjlmNDRjOGQgMTAwNjQ0Ci0tLSBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXN0L0FTVE5vZGUuamF2YQorKysgY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BU1ROb2RlLmphdmEKQEAgLTczMSw0ICs3MzEsNSBAQAog
CQkJCXN3aXRjaCAocmVjaXBpZW50LmtpbmQoKSkgewogCQkJCQljYXNlIEJpbmRpbmcuVFlQRV9V
U0U6CisJCQkJCWNhc2UgQmluZGluZy5UWVBFX1BBUkFNRVRFUjoKIAkJCQkJCWlmIChhbm5vdGF0
aW9ucyAhPSBudWxsKSB7CiAJCQkJCQkJLy8gbmVlZCB0byBmaWxsIHRoZSBpbnN0YW5jZXMgYXJy
YXkKQEAgLTc4Miw5ICs3ODMsNCBAQAogCQkJCQkJCQl9CiAJCQkJCQkJfQotCQkJCQkJfQotCQkJ
CQkJYnJlYWs7Ci0JCQkJCWRlZmF1bHQ6Ci0JCQkJCQlpZiAoYW5ub3RhdGlvbnMgIT0gbnVsbCkg
ewotCQkJCQkJCWFubm90YXRpb25zW2ldID0gYW5ub3RhdGlvbi5nZXRDb21waWxlckFubm90YXRp
b24oKTsKIAkJCQkJCX0KIAkJCQkJCWJyZWFrOwpkaWZmIC0tZ2l0IGNvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvVHlwZVBhcmFtZXRlci5qYXZhIGNvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvVHlwZVBhcmFtZXRlci5qYXZh
CmluZGV4IDc5ZTk3OGIuLjlmM2M1MWMgMTAwNjQ0Ci0tLSBjb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1R5cGVQYXJhbWV0ZXIuamF2YQorKysgY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9UeXBlUGFyYW1ldGVyLmphdmEK
QEAgLTEyMiw0ICsxMjIsNyBAQAogCQkJQW5ub3RhdGlvbkJpbmRpbmcgW10gYW5ub3RhdGlvbkJp
bmRpbmdzID0gcmVzb2x2ZUFubm90YXRpb25zKHJlc29sdXRpb25TY29wZSwgdGhpcy5hbm5vdGF0
aW9ucywgdGhpcy5iaW5kaW5nLCBmYWxzZSk7CiAJCQl0aGlzLmJpbmRpbmcuc2V0VHlwZUFubm90
YXRpb25zKGFubm90YXRpb25CaW5kaW5ncywgc2NvcGUuZW52aXJvbm1lbnQoKS5nbG9iYWxPcHRp
b25zLmlzQW5ub3RhdGlvbkJhc2VkTnVsbEFuYWx5c2lzRW5hYmxlZCk7CisJCQlpZiAodGhpcy5i
aW5kaW5nLmhhc1R5cGVBbm5vdGF0aW9ucygpKSB7IC8vIFR5cGUgcGFyYW1ldGVycyBjYW4gb25s
eSBoYXZlIHR5cGUgYW5ub3RhdGlvbnMKKwkJCQlzY29wZS5yZWZlcmVuY2VDb21waWxhdGlvblVu
aXQoKS5jb21waWxhdGlvblJlc3VsdC5oYXNBbm5vdGF0aW9ucyA9IHRydWU7CisJCQl9CiAJCQlp
ZiAodGhpcy5iaW5kaW5nICE9IG51bGwgJiYgdGhpcy5iaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCkp
CiAJCQkJdGhpcy5iaW5kaW5nLmV2YWx1YXRlTnVsbEFubm90YXRpb25zKHNjb3BlLCB0aGlzKTs=
</data>

          </attachment>
      

    </bug>

</bugzilla>