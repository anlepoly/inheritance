<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>426540</bug_id>
          
          <creation_ts>2014-01-24 02:37:00 -0500</creation_ts>
          <short_desc>[1.8][compiler] Inference/overload resolution failure</short_desc>
          <delta_ts>2014-01-26 13:58:58 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>424053</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>jarthana</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2353982</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-24 02:37:57 -0500</bug_when>
    <thetext>// --
import java.util.stream.Stream;
import java.util.Collections;
import static java.util.stream.Collectors.collectingAndThen;
import static java.util.stream.Collectors.toList;
public class X {
	Object o = ((Stream&lt;Integer&gt;) null).collect(collectingAndThen(toList(), Collections::unmodifiableList));
}

This snippet fails to compile with HEAD. b123 likes the code fine.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354585</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-25 17:55:37 -0500</bug_when>
    <thetext>I could trace the failure back to the following incident:

On Dec 9 I asked the EG [1] whether a particular rule should/should not apply substitution. In my implementation I pre-emtively inserted the substitution where it yielded best results.

On Dec 17 I received answer [2] that the substitution must actually happen in an earlier step.

Is adopted the new official rule while forgetting to remove my workaround. Now the workaround prevented that analysis of toList() could feed relationship to the type &quot;List&quot; into the inference. In the sequel the RE was resolved with a target type of Function&lt;Object,Object&gt;, to which no matching sam could be found.

Tricky issue, with a tiny fix: Removing the obsolete workaround fixes the issue. Released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=dca0c800b618e06354348679c785dbf10c5f5a8f


[1] http://mail.openjdk.java.net/pipermail/lambda-spec-experts/2013-December/000460.html
[2] http://mail.openjdk.java.net/pipermail/lambda-spec-experts/2013-December/000475.html</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354615</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-26 06:12:05 -0500</bug_when>
    <thetext>When we slightly modified, inference still fails: 

Arrays.asList((List&lt;Integer&gt;) null).stream().collect(collectingAndThen(toList(), Collections::unmodifiableList)).remove(0);

elicits:

The method remove(int) is undefined for the type Object

b123 compiles is alright. Thanks for taking a look.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354649</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-26 13:58:58 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #2)
&gt; When we slightly modified, inference still fails: 
&gt; 
&gt; Arrays.asList((List&lt;Integer&gt;)
&gt; null).stream().collect(collectingAndThen(toList(),
&gt; Collections::unmodifiableList)).remove(0);
&gt; 
&gt; elicits:
&gt; 
&gt; The method remove(int) is undefined for the type Object
&gt; 
&gt; b123 compiles is alright. Thanks for taking a look.

Yes, the code looks mildly similar, but I&apos;m afraid this new bug is going to be a longer story, so I gave it a home of its own: bug 426671</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>