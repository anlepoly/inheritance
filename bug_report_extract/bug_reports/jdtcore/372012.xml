<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>372012</bug_id>
          
          <creation_ts>2012-02-20 05:51:00 -0500</creation_ts>
          <short_desc>[compiler][null] Warn when defaults not specified</short_desc>
          <delta_ts>2012-03-13 14:12:31 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>3.8 M6</target_milestone>
          
          <blocked>372013</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Ayushman Jain">amj87.iitr</reporter>
          <assigned_to name="Ayushman Jain">amj87.iitr</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>markus_keller</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="48797"
          type_id="1"
          status="+"
          setter="stephan.herrmann"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2068124</commentid>
    <comment_count>0</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-02-20 05:51:44 -0500</bug_when>
    <thetext>HEAD after fix for bug 366063 does not support workspace/project-wide nullness defaults. 
We need to investigate a configurable option to warn in the following cases:
1) For named packages, if the package-info.java does not contain the @NonNullByDefault annotation, or if it contains no package-info.java, warn at exactly one class inside the package
2) For default packages, warn at each class inside the package which does not contain the @NonNullByDefault annotation.

The warning message can be &quot;A default null annotation has not been specified for the package {0}&quot; and &quot;A default null annotation has not been specified for the type {0}&quot;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2068151</commentid>
    <comment_count>1</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2012-02-20 07:11:12 -0500</bug_when>
    <thetext>This fix should replace JavaCore#COMPILER_NONNULL_IS_DEFAULT by an option that states an intention, but doesn&apos;t change behavior, e.g. COMPILER_PB_MISSING_NONNULL_BY_DEFAULT_ANNOTATION.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2068167</commentid>
    <comment_count>2</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2012-02-20 08:04:48 -0500</bug_when>
    <thetext>And the option should not be boolean but with values error/warning/ignore.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2069417</commentid>
    <comment_count>3</comment_count>
      <attachid>211418</attachid>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-02-22 10:52:04 -0500</bug_when>
    <thetext>Created attachment 211418
proposed fix

This patch warns in the following cases:
(1) Package-info.java exists and does not have any default nullness annotation: warn at ONLY package-info.java
(2) Package-info.java does not exist inside a named package: warn at the package declaration site in each type inside the package
For 1 and 2, warning is
&quot;A default nullness annotation has not been specified for the package {0}&quot;
(3) Default package: Warn (blaming the type) at each type that does not contain a default nullness annotation. Warning is
&quot;A default nullness annotation has not been specified for the type{0}&quot;

For (2), Srikanth suggested to warn at only 1 type instead of all types. However, asssigning a special bit to the package binding to signal that it has been warned against does not quite work for the incremental builder because the binding is re-created for each type and the warning re-appears. The only solution here may be to store the bindings of already warned packages in lookup environment. However, in the current scenario where you see warnings on all types, the only fix possible is to put the annotation by creating a package-info.java  which will wipe out all warnings in that package. So, I&apos;m not too motivated to go beyond what&apos;s in the current patch.

Srikanth/Stephan, any issues with the above conclusion?
(Patch still needs regression tests)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2069771</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-02-23 00:26:55 -0500</bug_when>
    <thetext>(In reply to comment #3)

&gt; binding is re-created for each type and the warning re-appears. The only
&gt; solution here may be to store the bindings of already warned packages in lookup
&gt; environment. 

Why won&apos;t we do that ? Producing identical warnings for every type in the
package is not very useful ? On large projects this could produce thousands
of warnings where we could do away with just a few dozens of them ?

&gt; (3) Default package: Warn (blaming the type) at each type that does not contain
&gt; a default nullness annotation. Warning is
&gt; &quot;A default nullness annotation has not been specified for the type{0}&quot;

Does it make sense to restrict this warning only for top level types ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2069774</commentid>
    <comment_count>5</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-02-23 00:51:08 -0500</bug_when>
    <thetext>(In reply to comment #4)
&gt; Why won&apos;t we do that ? Producing identical warnings for every type in the
&gt; package is not very useful ? On large projects this could produce thousands
&gt; of warnings where we could do away with just a few dozens of them ?
The point here is for the user to actually notice that warning. Having it on one type in a package with 100 types may mean that it might skip the field of view of the user. Having the warning on all types is more consistent. In that sense, by doing the extra work to restrict the warning on one type does not offer a great advantage. Anyway, when there&apos;s a package-info, the warning comes only on the package-info. 

Markus, what&apos;s your opinion on this?

&gt; Does it make sense to restrict this warning only for top level types ?
Yes, and thats what the patch already does.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2069821</commentid>
    <comment_count>6</comment_count>
      <attachid>211472</attachid>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-02-23 03:58:44 -0500</bug_when>
    <thetext>Created attachment 211472
proposed fix v1.0 + regression tests

Complete patch.
Batch COmpiler option -nonNullByDefault has been replaced by &quot;missingDefaultAnnot&quot;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2069890</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-02-23 06:54:30 -0500</bug_when>
    <thetext>In bug 366063 I argued that reporting a warning against a package would require a few infrastructural changes. I&apos;m not sure if/how this influenced the current design to report problems against types in bogus packages.

However, if no agreement can be found, how to exactly report using only types as the point of reference, shouldn&apos;t we indeed have the discussion how reporting against a package could be implemented?

Just want to be sure that my words of warning don&apos;t block a better solution. Sorry for being late with these remarks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2069896</commentid>
    <comment_count>8</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2012-02-23 07:23:49 -0500</bug_when>
    <thetext>I like the error on the package-info.java if the file already exists.

Otherwise, I&apos;d prefer an error on the package.
If that&apos;s too hard, the second-best would be an error on any single type of the package (preferably the lexically first one).
As last resort, an error in every CU would also be acceptable if the other solutions turn out to be too expensive.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2069900</commentid>
    <comment_count>9</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2012-02-23 07:28:09 -0500</bug_when>
    <thetext>(In reply to comment #5)
&gt; The point here is for the user to actually notice that warning. Having it on
&gt; one type in a package with 100 types may mean that it might skip the field of
&gt; view of the user.

I don&apos;t buy that argument. A user who cares about this will set the problem to error. In that case, a flood of errors on all CUs is counterproductive.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2072767</commentid>
    <comment_count>10</comment_count>
      <attachid>211800</attachid>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-02-29 09:17:41 -0500</bug_when>
    <thetext>Created attachment 211800
patch to warn on package only

Here&apos;s an experiment for warning on package and not its CU&apos;s, in case there&apos;s no package-info.java.
There are a couple of problems with this though:
1) Somehow I see 2 warnings for each problem on the package resource, not sure where the duplicate warning comes from.
2) When the user corrects the issue by creating a package-info.java and putting the default annotation there, the incremental builder doesn&apos;t rebuild the CU&apos;s against which the problem was originally recorded. Hence, the marker does not get deleted until a full build occurs.

Not sure how to solve these problems. Stephan, do you have any ideas? I&apos;m guessing the first problem can be solved, but second one is going to be a dead-end.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2072773</commentid>
    <comment_count>11</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-02-29 09:19:41 -0500</bug_when>
    <thetext>(In reply to comment #10)
&gt; Created attachment 211800 [details]
&gt; patch to warn on package only

Relevant changes are in org.eclipse.jdt.internal.core.builder.AbstractImageBuilder.storeTasksFor(SourceFile, CategorizedProblem[]) and org.eclipse.jdt.internal.compiler.problem.ProblemHandler.handle(int, String[], int, String[], int, int, int, ReferenceContext, CompilationResult)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2072823</commentid>
    <comment_count>12</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-02-29 10:08:01 -0500</bug_when>
    <thetext>(In reply to comment #10)
&gt; Created attachment 211800 [details]
&gt; patch to warn on package only
&gt; 
&gt; Here&apos;s an experiment for warning on package and not its CU&apos;s, in case there&apos;s
&gt; no package-info.java.
&gt; There are a couple of problems with this though:
&gt; 1) Somehow I see 2 warnings for each problem on the package resource, not sure
&gt; where the duplicate warning comes from.
&gt; 2) When the user corrects the issue by creating a package-info.java and putting
&gt; the default annotation there, the incremental builder doesn&apos;t rebuild the CU&apos;s
&gt; against which the problem was originally recorded.

This also means this incremental build is inconsistent, right?
Sounds like we should feed more cus into the next build iteration?
This change would be necessary independtly of how we report errors, right?

&gt; Hence, the marker does not get deleted until a full build occurs.
&gt; 
&gt; Not sure how to solve these problems. Stephan, do you have any ideas? I&apos;m
&gt; guessing the first problem can be solved, but second one is going to be a
&gt; dead-end.

I can take a look later today or tomorrow.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2072876</commentid>
    <comment_count>13</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-02-29 11:09:01 -0500</bug_when>
    <thetext>(In reply to comment #10)

&gt; 2) When the user corrects the issue by creating a package-info.java and putting
&gt; the default annotation there, the incremental builder doesn&apos;t rebuild the CU&apos;s
&gt; against which the problem was originally recorded. Hence, the marker does not
&gt; get deleted until a full build occurs.

If package-info.java exists already and an annotation is added now, does
incremental rebuild files properly ? (It should as this is something
that got fixed during bug 214948) Is it only when package-info is created
freshly that you are observing an anamalous behavior ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2072904</commentid>
    <comment_count>14</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-02-29 11:38:22 -0500</bug_when>
    <thetext>(In reply to comment #13)
&gt; If package-info.java exists already and an annotation is added now, does
&gt; incremental rebuild files properly ? (It should as this is something
&gt; that got fixed during bug 214948) Is it only when package-info is created
&gt; freshly that you are observing an anamalous behavior ?
Exactly. Thats because the error was reported on the contained CU&apos;s, and adding the package-info.java doesn&apos;t trigger their build.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2073392</commentid>
    <comment_count>15</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-01 00:36:59 -0500</bug_when>
    <thetext>(In reply to comment #14)
&gt; (In reply to comment #13)
&gt; &gt; If package-info.java exists already and an annotation is added now, does
&gt; &gt; incremental rebuild files properly ? (It should as this is something
&gt; &gt; that got fixed during bug 214948) Is it only when package-info is created
&gt; &gt; freshly that you are observing an anamalous behavior ?
&gt; Exactly. Thats because the error was reported on the contained CU&apos;s, and adding
&gt; the package-info.java doesn&apos;t trigger their build.

OK, then this is something orthogonal to the current issue.
We need to make sure that if observe a delta that indicates
that a package-info file got created (and if there are package
level annotations), then the package should be rebuilt.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2073542</commentid>
    <comment_count>16</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-03-01 08:24:59 -0500</bug_when>
    <thetext>(In reply to comment #15)
&gt; OK, then this is something orthogonal to the current issue.
&gt; We need to make sure that if observe a delta that indicates
&gt; that a package-info file got created (and if there are package
&gt; level annotations), then the package should be rebuilt.
I was wrong. We do build all the types in the package correctly. The problem is that the markers which were created for the package resource do not get deleted on an incremental build, and so the problems view still shows those errors that are now actually fixed. We need to find a way to delete markers on package resource as soon as package-info.java is created.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2073616</commentid>
    <comment_count>17</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-01 09:45:37 -0500</bug_when>
    <thetext>I&apos;d say we need to remove all package-problems when package-info.java is compiled, right?

I tried this snippet:

	if (CharOperation.equals(sourceFile.getMainTypeName(), TypeConstants.PACKAGE_INFO_NAME)) {
		IResource pkgResource = sourceFile.resource.getParent();
		JavaBuilder.removeProblemsFor(pkgResource);
	}

assuming we have this problem only for incremental builds the correct location would be as the first statement in IncrementalImageBuilder.updateProblemsFor()

From quick experiments in a runtime workbench this seems to do the trick.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2073880</commentid>
    <comment_count>18</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-03-01 14:36:46 -0500</bug_when>
    <thetext>(In reply to comment #17)
&gt; I&apos;d say we need to remove all package-problems when package-info.java is
&gt; compiled, right?
&gt; 
&gt; I tried this snippet:
&gt; 
&gt;     if (CharOperation.equals(sourceFile.getMainTypeName(),
&gt; TypeConstants.PACKAGE_INFO_NAME)) {
&gt;         IResource pkgResource = sourceFile.resource.getParent();
&gt;         JavaBuilder.removeProblemsFor(pkgResource);
&gt;     }
Yes, I was playing around with resource.deleteMarkers instead of JavaBuilder.removeProblemsFor. However, I don&apos;t know why, when I press space in a file with no package-info and save, a new &quot;missing default annotation&quot; problem appears, and the list keeps on increasing with every subsequent save. Couldn&apos;t yet find out the cause for this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2073924</commentid>
    <comment_count>19</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-01 16:00:15 -0500</bug_when>
    <thetext>(In reply to comment #18)
&gt; (In reply to comment #17)
&gt; &gt; I&apos;d say we need to remove all package-problems when package-info.java is
&gt; &gt; compiled, right?
&gt; &gt; 
&gt; &gt; I tried this snippet:
&gt; &gt; 
&gt; &gt;     if (CharOperation.equals(sourceFile.getMainTypeName(),
&gt; &gt; TypeConstants.PACKAGE_INFO_NAME)) {
&gt; &gt;         IResource pkgResource = sourceFile.resource.getParent();
&gt; &gt;         JavaBuilder.removeProblemsFor(pkgResource);
&gt; &gt;     }
&gt; Yes, I was playing around with resource.deleteMarkers instead of
&gt; JavaBuilder.removeProblemsFor.

OK, for a marker on a package, which actually corresponds to a resource, going directly to resource.deleteMarkers might be enough.

&gt; However, I don&apos;t know why, when I press space in
&gt; a file with no package-info and save, a new &quot;missing default annotation&quot;
&gt; problem appears, and the list keeps on increasing with every subsequent save.
&gt; Couldn&apos;t yet find out the cause for this.

If I understand correctly, so far you ensure uniqueness of the marker only within the context of one build, right? So each build creates a new marker, as it doesn&apos;t see that one already exists, right?

So in AbstractImageBuilder.storeProblemsFor(), right when you detect IProblem.MissingNonNullByDefaultAnnotationOnPackage and lookup the package resource, why not first look if a corresponding marker already exists (and skip this problem if so)? S.t. like:

	IMarker[] existingMarker = resource.findMarkers(IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER, false, IResource.DEPTH_ZERO);
	int len = existingMarker.length;
	for (int j=0; j&lt;len; j++) {
		if (((Integer)existingMarker[j].getAttribute(IJavaModelMarker.ID)).intValue() == IProblem.MissingNonNullByDefaultAnnotationOnPackage) {
			continue problems; // marker already present
		}
	}

(I added &quot;problems&quot; as a label for the outer loop).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2074097</commentid>
    <comment_count>20</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-03-02 00:39:29 -0500</bug_when>
    <thetext>(In reply to comment #19)
&gt; So in AbstractImageBuilder.storeProblemsFor(), right when you detect
&gt; IProblem.MissingNonNullByDefaultAnnotationOnPackage and lookup the package
&gt; resource, why not first look if a corresponding marker already exists (and skip
&gt; this problem if so)? S.t. like:

Oh, so for CU&apos;s those markers don&apos;t get recreated because of the removeProblemsFor(..) call in org.eclipse.jdt.internal.core.builder.IncrementalImageBuilder.updateProblemsFor(SourceFile, CompilationResult). Hmm, makes sense.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2074185</commentid>
    <comment_count>21</comment_count>
      <attachid>211945</attachid>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-03-02 04:36:41 -0500</bug_when>
    <thetext>Created attachment 211945
proposed fix v2.0 + regression tests

This fix includes fix for warning on package instead of its CU&apos;s as well as fixes for the incremental build. The problem marker is only created once for each package (ProblemHandler) , and deleted as soon as a package-info.java is added(IncrementalImageBuilder).
Running all Junits.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2074325</commentid>
    <comment_count>22</comment_count>
      <attachid>211956</attachid>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-03-02 08:46:19 -0500</bug_when>
    <thetext>Created attachment 211956
proposed fix v2.1 + regression tests

This patch
- fixes a small issue with file separator for calculating package fragment in ProblemHandler
- for batch compiler, it makes the warning come back on the CU&apos;s of a package to warn for missing default annotation.
- updates a couple of tests (BatchCOmpilerTest and CompilerInvocationTests)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2074327</commentid>
    <comment_count>23</comment_count>
      <attachid>211957</attachid>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-03-02 08:47:36 -0500</bug_when>
    <thetext>Created attachment 211957
doc patch</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2074330</commentid>
    <comment_count>24</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-03-02 08:49:21 -0500</bug_when>
    <thetext>(In reply to comment #22)
&gt; - for batch compiler, it makes the warning come back on the CU&apos;s of a package
&gt; to warn for missing default annotation.
Does anyone have any issue with this? On the command line, it makes more sense to warn against a tangible line in the source. Also, I did not think it was worth the effort to make the warning appear on only 1 CU here, since this is a special case for the batch compiler.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2074800</commentid>
    <comment_count>25</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-02 23:56:22 -0500</bug_when>
    <thetext>Stephan, please give this patch a final once-over, thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2075148</commentid>
    <comment_count>26</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-05 05:58:21 -0500</bug_when>
    <thetext>I still see a few issues:

(1)
(In reply to comment #21)
&gt; [...] The problem marker is only created once for
&gt; each package (ProblemHandler) 

Blocker: Sorry, but I think these classes are off limits for the compiler which cannot depend on the model. Seems like these issues must be handled in the builder, or would that cause trouble for the batch compiler?

(2)
Discussion: From reading SourceTypeBinding.evaluateNullAnnotations() it seems that you&apos;ll report a missing default even if all types in a package do have a default annotation. Is that intended? Won&apos;t users expect that annotating all types should be sufficient? Simply changing the order of checks inside said method could achieve this change in semantics.

(3)
Javadoc of COMPILER_PB_MISSING_NONNULL_BY_DEFAULT_ANNOTATION contains a little stutter. May need to align doc with result of discussion (2).

(4)
Nitpick: Same method evaluateNullAnnotations(): name of local variable &quot;isDefault&quot; is ambiguous in this context

(5)
Tests: I couldn&apos;t find any tests checking specifically for the marker on a package. Maybe some should be added to NullAnnotationModelTests? (Or just add an additional check to existing tests).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2075244</commentid>
    <comment_count>27</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-03-05 09:12:57 -0500</bug_when>
    <thetext>(In reply to comment #26)
&gt; Blocker: Sorry, but I think these classes are off limits for the compiler which
&gt; cannot depend on the model. Seems like these issues must be handled in the
&gt; builder, or would that cause trouble for the batch compiler?
Hmm, you&apos;re right. But then I&apos;d have to create a CategorizedProblem for each type in the package, and they cannot be of IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER  category because then they will appear on the editor in the CU&apos;s. Maybe creating a new category along with some UI work will help? I&apos;m not sure how that works, can try. Will have to think of a way to create only 1 categorized problem for each package. Sigh.

&gt; (2)
&gt; Discussion: From reading SourceTypeBinding.evaluateNullAnnotations() it seems
&gt; that you&apos;ll report a missing default even if all types in a package do have a
&gt; default annotation. Is that intended? Won&apos;t users expect that annotating all
&gt; types should be sufficient? Simply changing the order of checks inside said
&gt; method could achieve this change in semantics.
Yes, I meant to do that when the other things were working but slipped out of my mind. 
 
&gt; (5)
&gt; Tests: I couldn&apos;t find any tests checking specifically for the marker on a
&gt; package. Maybe some should be added to NullAnnotationModelTests? (Or just add
&gt; an additional check to existing tests).
AnnotationDependencyTests has a test for that case</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2075635</commentid>
    <comment_count>28</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-05 23:37:26 -0500</bug_when>
    <thetext>(In reply to comment #27)
&gt; (In reply to comment #26)
&gt; &gt; Blocker: Sorry, but I think these classes are off limits for the compiler which
&gt; &gt; cannot depend on the model. Seems like these issues must be handled in the
&gt; &gt; builder, or would that cause trouble for the batch compiler?
&gt; Hmm, you&apos;re right. But then I&apos;d have to create a CategorizedProblem for each
&gt; type in the package, and they cannot be of
&gt; IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER  category because then they will
&gt; appear on the editor in the CU&apos;s. Maybe creating a new category along with some
&gt; UI work will help? I&apos;m not sure how that works, can try. Will have to think of
&gt; a way to create only 1 categorized problem for each package. Sigh.

Do these problems still exist if we opt for a simple `report against the first
CU in the package&apos; approach ? Such a solution would surely eliminate the need for
any special treatment for the batch compiler,  may also eliminate the other
complications we are discussing ? Not sure if we are over-engineering here.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2075821</commentid>
    <comment_count>29</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-06 07:22:16 -0500</bug_when>
    <thetext>(In reply to comment #28)
&gt; (In reply to comment #27)
&gt; &gt; (In reply to comment #26)
&gt; &gt; &gt; Blocker: Sorry, but I think these classes are off limits for the compiler which
&gt; &gt; &gt; cannot depend on the model. Seems like these issues must be handled in the
&gt; &gt; &gt; builder, or would that cause trouble for the batch compiler?
&gt; &gt; Hmm, you&apos;re right. But then I&apos;d have to create a CategorizedProblem for each
&gt; &gt; type in the package, and they cannot be of
&gt; &gt; IJavaModelMarker.JAVA_MODEL_PROBLEM_MARKER  category because then they will
&gt; &gt; appear on the editor in the CU&apos;s. Maybe creating a new category along with some
&gt; &gt; UI work will help? I&apos;m not sure how that works, can try. Will have to think of
&gt; &gt; a way to create only 1 categorized problem for each package. Sigh.
&gt; 
&gt; Do these problems still exist if we opt for a simple `report against the first
&gt; CU in the package&apos; approach ? Such a solution would surely eliminate the need
&gt; for
&gt; any special treatment for the batch compiler,  may also eliminate the other
&gt; complications we are discussing ? Not sure if we are over-engineering here.

I would think of a four-step process:
- compiler remembers in PackageBinding.tagBits when this problem has been created -&gt; report at most once per build
- problem is attached to the current CU
- builder detects these problems (either by problemId or by category) and when creating the marker redirects that marker to the package
- builder only adds a new marker if none of the same kind is already found (see comment 19) -&gt; avoid duplicates from subsequent builds

I think most of this exists or existed in the patch plus previous comments.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2075846</commentid>
    <comment_count>30</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-06 07:59:27 -0500</bug_when>
    <thetext>(In reply to comment #29)

&gt; - builder detects these problems (either by problemId or by category) and when
&gt; creating the marker redirects that marker to the package
&gt; - builder only adds a new marker if none of the same kind is already found (see
&gt; comment 19) -&gt; avoid duplicates from subsequent builds

Are these last two steps absolutely necessary ? Sorry I have missed out
some discussion/context here.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2075854</commentid>
    <comment_count>31</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-06 08:13:07 -0500</bug_when>
    <thetext>(In reply to comment #30)
&gt; (In reply to comment #29)
&gt; 
&gt; &gt; - builder detects these problems (either by problemId or by category) and when
&gt; &gt; creating the marker redirects that marker to the package
&gt; &gt; - builder only adds a new marker if none of the same kind is already found (see
&gt; &gt; comment 19) -&gt; avoid duplicates from subsequent builds
&gt; 
&gt; Are these last two steps absolutely necessary ? Sorry I have missed out
&gt; some discussion/context here.

They&apos;d implement the change from marking a random CU towards marking the package. This needs to happen outside the compiler because the compiler can&apos;t see IPackageFragment. The last item fixes the problem observed in comment 18.

Part of this existed in the patch in comment 10, see the change in AbstractImageBuilder.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2075866</commentid>
    <comment_count>32</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-06 08:27:44 -0500</bug_when>
    <thetext>(In reply to comment #31)

&gt; They&apos;d implement the change from marking a random CU towards marking the
&gt; package. This needs to happen outside the compiler because the compiler can&apos;t
&gt; see IPackageFragment. 

I see. I was questioning the need to do this. Could we be lazy and report
it against some unique CU per package per build loop and get away with it ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2075881</commentid>
    <comment_count>33</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-06 08:58:31 -0500</bug_when>
    <thetext>(In reply to comment #32)
&gt; (In reply to comment #31)
&gt; 
&gt; &gt; They&apos;d implement the change from marking a random CU towards marking the
&gt; &gt; package. This needs to happen outside the compiler because the compiler can&apos;t
&gt; &gt; see IPackageFragment. 
&gt; 
&gt; I see. I was questioning the need to do this. Could we be lazy and report
&gt; it against some unique CU per package per build loop and get away with it ?

Ayush and me where trying to find a solution to comply with Markus&apos; request:

(In reply to comment #8)
&gt; I like the error on the package-info.java if the file already exists.
&gt; 
&gt; Otherwise, I&apos;d prefer an error on the package.
&gt; If that&apos;s too hard, the second-best would be an error on any single type of the
&gt; package (preferably the lexically first one).
&gt; As last resort, an error in every CU would also be acceptable if the other
&gt; solutions turn out to be too expensive.

I think we&apos;re close to the preferred solution. Still, if &quot;close&quot; isn&apos;t close enough considering the time line, we may have to revert to the &quot;second-best&quot; solution, which may not be easier, which would then take us to the &quot;last resort&quot;. Necessity is relative :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2075894</commentid>
    <comment_count>34</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-03-06 09:15:46 -0500</bug_when>
    <thetext>(In reply to comment #32)
&gt; I see. I was questioning the need to do this. Could we be lazy and report
&gt; it against some unique CU per package per build loop and get away with it ?
A problem with this is also that everytime we compile only a single CU, we don&apos;t know whether an earlier CU has already triggered this warning. Saving this info in the package binding also won&apos;t help since the binding is not persisted across two separate builds (eg. p.A already has warned, now I create p.B - the warning comes on both A and B)

(In reply to comment #29)

&gt; - builder detects these problems (either by problemId or by category) and when
&gt; creating the marker redirects that marker to the package
The problem here is that even when the builder redirects creation of the marker to the package, the CU open in the editor still shows this warning, even though there are no markers on the CU&apos;s in the package explorer. (Maybe the editor picks it directly from the unit.)
In fact, I like this - the warning marker remains only on the package, but the open editor still shows it on the package declaration, enabling the user to employ the quick fix right there. Stephan, whats your take on this?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2075907</commentid>
    <comment_count>35</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-06 09:36:32 -0500</bug_when>
    <thetext>(In reply to comment #34)
&gt; (In reply to comment #32)
&gt; &gt; I see. I was questioning the need to do this. Could we be lazy and report
&gt; &gt; it against some unique CU per package per build loop and get away with it ?
&gt; A problem with this is also that everytime we compile only a single CU, we
&gt; don&apos;t know whether an earlier CU has already triggered this warning. Saving
&gt; this info in the package binding also won&apos;t help since the binding is not
&gt; persisted across two separate builds (eg. p.A already has warned, now I create
&gt; p.B - the warning comes on both A and B)

That&apos;s why I mentioned item 4:
&quot;- builder only adds a new marker if none of the same kind is already found (see
comment 19) -&gt; avoid duplicates from subsequent builds&quot;

Placing the snippet from comment 19 into the builder worked OK in my workspace.

The trick with PackageBinding.tagBits only helps for:
- batch compilation
- minimizing the creation of unnecessary CategorizedProblems

 
&gt; (In reply to comment #29)
&gt; 
&gt; &gt; - builder detects these problems (either by problemId or by category) and when
&gt; &gt; creating the marker redirects that marker to the package
&gt; The problem here is that even when the builder redirects creation of the marker
&gt; to the package, the CU open in the editor still shows this warning, even though
&gt; there are no markers on the CU&apos;s in the package explorer. (Maybe the editor
&gt; picks it directly from the unit.)
&gt; In fact, I like this - the warning marker remains only on the package, but the
&gt; open editor still shows it on the package declaration, enabling the user to
&gt; employ the quick fix right there. Stephan, whats your take on this?

Wait, that&apos;s the reconciler, right? So, it won&apos;t spam the ProblemsView?
In that case we might indeed just leave that part as you say, I like that, despite the little inconsistency.

If we change our mind on this, a simple change in CompilationUnitProblemFinder.process() should buy us any desired behavior.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2075918</commentid>
    <comment_count>36</comment_count>
      <attachid>212134</attachid>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-03-06 09:45:58 -0500</bug_when>
    <thetext>Created attachment 212134
proposed fix v3.0 + regression tests

Let me attach the patch to better answer your question. The Problems View is not polluted, and even the package explorer isn&apos;t. Only the open editor shows the warning. You can test the patch to see the new behaviour (which is same as previous patch&apos;s behaviour, except that now there&apos;s a warning ONLY in the open editor.)

(Tests may still need an update)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2075922</commentid>
    <comment_count>37</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-03-06 09:47:56 -0500</bug_when>
    <thetext>(In reply to comment #35)
&gt; The trick with PackageBinding.tagBits only helps for:
&gt; - batch compilation
&gt; - minimizing the creation of unnecessary CategorizedProblems
This is handled in the patch by marking the default nullness of the package as NULL_UNSPECIFIED_DEFAULT as soon as warning is reported.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2075998</commentid>
    <comment_count>38</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-03-06 10:56:12 -0500</bug_when>
    <thetext>(In reply to comment #36)
&gt; Created attachment 212134 [details]
&gt; proposed fix v3.0 + regression tests
In IncrementalImageBuilder where we delete markers on package, the depth should be IResource.DEPTH_ZERO and not DEPTH_INFINITE.
I will also take care of points 3 and 4 of comment 26, and then the patch should be good to go</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2076012</commentid>
    <comment_count>39</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-06 11:03:51 -0500</bug_when>
    <thetext>(In reply to comment #33)

&gt; I think we&apos;re close to the preferred solution. Still, if &quot;close&quot; isn&apos;t close
&gt; enough considering the time line,

Great, I&apos;ll let you two decide. I thought we were not converging, but
that seems to be incorrect, so we are good.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2076089</commentid>
    <comment_count>40</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-06 12:39:52 -0500</bug_when>
    <thetext>Using fix v3.0 I only see one issue remaining: When adding a default annotation to a type where the package lacks such default, during incremental compilation the problem is wrongly removed from the package. However, this can easily be fixed just by removing the else block in IncrementalImageBuilder.updateProblemsFor(): for resolving this problem users have only two options: add/edit package-info.java or change the preference. The latter would require a full build to take effect, so only actions involving package-info.java need to be handled during incremental compilation.

Judging from this status plus the planned changes mentioned in comment 38 this patch is essentially ready to go. Since I will be offline for a few days I&apos;m giving my +1 trusting Ayush to walk the last yards to finish.

Here are a few final, but not vital remarks:

(a) Some reminders regarding stale changes that are no longer needed:
- a block in ProblemReporter
- all changes in PackageFragment and Util

(b) BatchCompilerTest contains bogus references to bug 325342. Also the combination with a syntax error looks unmotivated to me.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2076092</commentid>
    <comment_count>41</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-03-06 12:50:14 -0500</bug_when>
    <thetext>(In reply to comment #40)
&gt; Using fix v3.0 I only see one issue remaining: When adding a default annotation
&gt; to a type where the package lacks such default, during incremental compilation
&gt; the problem is wrongly removed from the package. However, this can easily be
&gt; fixed just by removing the else block in
&gt; IncrementalImageBuilder.updateProblemsFor(): for resolving this problem users
&gt; have only two options: add/edit package-info.java or change the preference. The
&gt; latter would require a full build to take effect, so only actions involving
&gt; package-info.java need to be handled during incremental compilation.
Actually the else block there was put intentionally because there&apos;s one case which would break otherwise:
1) Types A and B exist in p. B has default annotation but A doesn&apos;t.
2) Now I add default annotation to A -&gt; incremental build happens -&gt; But marker is not removed and we still get the missing default annotation warning on package even though all types in it have a default annotation. We want this case to be silent right?
Thats why its necessary. Let me know if i&apos;m missing something.

[..]
&gt; (a) Some reminders regarding stale changes that are no longer needed:
&gt; - a block in ProblemReporter
&gt; - all changes in PackageFragment and Util
&gt; (b) BatchCompilerTest contains bogus references to bug 325342. Also the
&gt; combination with a syntax error looks unmotivated to me.
Yeah, will clean this up.

Thanks a lot once again for your patient reviews and ideas!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2076105</commentid>
    <comment_count>42</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-06 13:19:22 -0500</bug_when>
    <thetext>(In reply to comment #41)
&gt; (In reply to comment #40)
&gt; Actually the else block there was put intentionally because there&apos;s one case
&gt; which would break otherwise:
&gt; 1) Types A and B exist in p. B has default annotation but A doesn&apos;t.
&gt; 2) Now I add default annotation to A -&gt; incremental build happens -&gt; But marker
&gt; is not removed and we still get the missing default annotation warning on
&gt; package even though all types in it have a default annotation. We want this
&gt; case to be silent right?
&gt; Thats why its necessary. Let me know if i&apos;m missing something.

Outch, you&apos;re right. I remember. Now that&apos;s quite a riddle :)

So we want the last one leaving to turn off the light: the last CU lacking a default, when the default is added remove the warning.

How can incremental compilation know this? A custom marker attribute comes to mind that counts the number of CUs lacking a default, with proper incr/decr operations during incremental build. But that sounds like an expensive solution.

So, if you don&apos;t want to go that road, I would be fine with going back one little step and go on issuing the warning, even if all types in the package have a type level default. The semantics would be: warn if any *package* lacks a default - so that would be clean, we&apos;ll just have to cope with those users that will be surprised that type level defaults don&apos;t suffice. Mh, still better than the randomness during incremental compilation, I guess.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2076115</commentid>
    <comment_count>43</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-03-06 13:36:20 -0500</bug_when>
    <thetext>(In reply to comment #42)
&gt; So, if you don&apos;t want to go that road, I would be fine with going back one
&gt; little step and go on issuing the warning, even if all types in the package
&gt; have a type level default. The semantics would be: warn if any *package* lacks
&gt; a default - so that would be clean, we&apos;ll just have to cope with those users
&gt; that will be surprised that type level defaults don&apos;t suffice. Mh, still better
&gt; than the randomness during incremental compilation, I guess.

Yes this matches what Srikanth and I discussed in the beginning and also fixes bug 373405. ;)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2076370</commentid>
    <comment_count>44</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-03-07 03:13:44 -0500</bug_when>
    <thetext>Released jdt.core part via commit a234173ab4d645c8990c97cafa00ec82ce0a909f</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2076377</commentid>
    <comment_count>45</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-03-07 03:36:05 -0500</bug_when>
    <thetext>Released doc patch via http://git.eclipse.org/c/platform/eclipse.platform.common.git/commit/?id=9f135bcee4d4a35fc4076870014073f697e544c3</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2079790</commentid>
    <comment_count>46</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-13 14:12:31 -0400</bug_when>
    <thetext>I have raised three FUPs: bug 374063 (Core), bug 374122 (Doc) and bug 374111 (UI); other than that the fix works as desired.

Verified for 3.8 M6 using build I20120312-1800.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>211418</attachid>
            <date>2012-02-22 10:52:00 -0500</date>
            <delta_ts>2012-02-23 03:58:44 -0500</delta_ts>
            <desc>proposed fix</desc>
            <filename>Fixed-bug-372012-compilernull-Warn-when-defaults-not.patch</filename>
            <type>text/plain</type>
            <size>25238</size>
            <attacher name="Ayushman Jain">amj87.iitr</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0JhdGNoQ29tcGlsZXJU
ZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2Vj
bGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9CYXRjaENvbXBpbGVyVGVz
dC5qYXZhCmluZGV4IDI3MTRlNjkuLmNkMmUwODAgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21w
aWxlci9yZWdyZXNzaW9uL0JhdGNoQ29tcGlsZXJUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Nv
bXBpbGVyL3JlZ3Jlc3Npb24vQmF0Y2hDb21waWxlclRlc3QuamF2YQpAQCAtNzksNyArNzksNyBA
QAogCQkJIn1cbiI7CiAKIAlzdGF0aWMgewotLy8JCVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1td
IHsgInRlc3QzMSIgfTsKKwkJVEVTVFNfTkFNRVMgPSBuZXcgU3RyaW5nW10geyAidGVzdDMxNV93
YXJuX29wdGlvbnMiIH07CiAvLwkJVEVTVFNfTlVNQkVSUyA9IG5ldyBpbnRbXSB7IDMwNiB9Owog
Ly8JCVRFU1RTX1JBTkdFID0gbmV3IGludFtdIHsgMjk4LCAtMSB9OwogCX0KQEAgLTEyNTg3LDMx
ICsxMjU4NywyOCBAQAogfQogCiAvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93
X2J1Zy5jZ2k/aWQ9MzI1MzQyCi0vLyAtd2FybiBvcHRpb24gLSByZWdyZXNzaW9uIHRlc3RzIHRv
IGNoZWNrIG9wdGlvbiBudWxsQW5ub3QKLS8vIE51bGwgd2FybmluZ3MgYmVjYXVzZSBvZiBhbm5v
dGF0aW9ucywgZ2xvYmFsIG5vbk51bGxCeURlZmF1bHQKLS8vIERJU0FCTEVEIGR1ZSB0byBkeXNm
dW5jdGlvbmFsIGdsb2JhbCBkZWZhdWx0IGFmdGVyIEJ1ZyAzNjYwNjMgLSBDb21waWxlciBzaG91
bGQgbm90IGFkZCBzeW50aGV0aWMgQE5vbk51bGwgYW5ub3RhdGlvbnMKLXB1YmxpYyB2b2lkIF90
ZXN0MzE1X3dhcm5fb3B0aW9ucygpIHsKKy8vIC13YXJuIG9wdGlvbiAtIHJlZ3Jlc3Npb24gdGVz
dHMgdG8gY2hlY2sgb3B0aW9uIG51bGxBbm5vdCBhbmQgbWlzc2luZ0RlZmF1bHRBbm5vdAorLy8g
aHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM3MjAxMgorcHVi
bGljIHZvaWQgdGVzdDMxNV93YXJuX29wdGlvbnMoKSB7CiAJdGhpcy5ydW5Db25mb3JtVGVzdCgK
IAkJbmV3IFN0cmluZ1tdIHsKKwkJCQkicC9wYWNrYWdlLWluZm8uamF2YSIsCisJCQkJIkBvcmcu
ZWNsaXBzZS5qZHQuYW5ub3RhdGlvbi5Ob25OdWxsQnlEZWZhdWx0XG4iICsKKwkJCQkicGFja2Fn
ZSBwO1xuIiwKIAkJCQkicC9YLmphdmEiLAogCQkJCSJwYWNrYWdlIHA7XG4iICsKLQkJCQkiaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uLio7XG4iICsKLQkJCQkiQFN1cHByZXNzV2Fy
bmluZ3MoXCJ1bnVzZWRcIilcbiIgKwogCQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKLQkJCQki
ICBPYmplY3QgZm9vKEBOdWxsYWJsZSBPYmplY3QgbywgT2JqZWN0IG8yKSB7XG4iICsKLQkJCQki
ICAgIGlmIChvLnRvU3RyaW5nKCkgPT0gXCJcIil7IHJldHVybiBudWxsO31cbiIgKwotCQkJCSIg
ICAgaWYgKG8yID09IG51bGwpIHt9XG4iICsKLQkJCQkiICAgIGdvbyhudWxsKS50b1N0cmluZygp
O1xuIiArCi0JCQkJIgkgcmV0dXJuIG51bGw7XG4iICsKLQkJCQkiICB9XG4iICsKLQkJCQkiICBA
TnVsbGFibGUgT2JqZWN0IGdvbyhPYmplY3QgbzIpIHtcbiIgKwotCQkJCSIgICAgcmV0dXJuIG5l
dyBPYmplY3QoKTtcbiIgKwotCQkJCSIgIH1cbiIgKwotCQkJCSIgIEBOb25OdWxsQnlEZWZhdWx0
IE9iamVjdCBob28oT2JqZWN0IG8yKSB7XG4iICsgLy8gcmVkdW5kYW50Ci0JCQkJIiAgICBpZiAo
bzIgPT0gbnVsbClcbiIgKwotCQkJCSIJICAgIHJldHVybiBudWxsO1xuIiArCi0JCQkJIiAgICBy
ZXR1cm4gdGhpcztcbiIgKwotCQkJCSIgIH1cbiIgKworCQkJCSJ9XG4iLAorCQkJCSJwMS9YMS5q
YXZhIiwKKwkJCQkicGFja2FnZSBwMTtcbiIgKworCQkJCSJwdWJsaWMgY2xhc3MgWDEge1xuIiAr
CisJCQkJIn1cbiIsCisJCQkJInAxL1gxYS5qYXZhIiwKKwkJCQkicGFja2FnZSBwMTtcbiIgKwor
CQkJCSJwdWJsaWMgY2xhc3MgWDFhIHtcbiIgKworCQkJCSJ9XG4iLAorCQkJCSJEZWZhdWx0MS5q
YXZhIiwKKwkJCQkicHVibGljIGNsYXNzIERlZmF1bHQxIHtcbiIgKwogCQkJCSJ9XG4iLAogCQkJ
CSJvcmcvZWNsaXBzZS9qZHQvYW5ub3RhdGlvbi9Ob25OdWxsLmphdmEiLAogCQkJCU5PTk5VTExf
QU5OT1RBVElPTl9DT05URU5ULApAQCAtMTI2MjMsNTAgKzEyNjIwLDg0IEBACiAJCSJcIiIgKyBP
VVRQVVRfRElSICsgIEZpbGUuc2VwYXJhdG9yICsgInAiICsgRmlsZS5zZXBhcmF0b3IgKyAiWC5q
YXZhXCIiCiAJCSsgIiAtc291cmNlcGF0aCBcIiIgKyBPVVRQVVRfRElSICsgIlwiIgogCQkrICIg
LTEuNSIKLQkJKyAiIC13YXJuOitudWxsQW5ub3QgLXdhcm46K251bGwgLW5vbk51bGxCeURlZmF1
bHQgLXByb2M6bm9uZSAtZCBcIiIgKyBPVVRQVVRfRElSICsgIlwiIiwKKwkJKyAiIC13YXJuOitu
dWxsQW5ub3QgLXdhcm46K251bGwgLW1pc3NpbmdEZWZhdWx0QW5ub3QgLXByb2M6bm9uZSAtZCBc
IiIgKyBPVVRQVVRfRElSICsgIlwiIiwKKwkJIiIsCisJCSIiLAorCQl0cnVlKTsKK30KKworLy8g
aHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTMyNTM0MgorLy8g
LXdhcm4gb3B0aW9uIC0gcmVncmVzc2lvbiB0ZXN0cyB0byBjaGVjayBvcHRpb24gbnVsbEFubm90
IGFuZCBtaXNzaW5nRGVmYXVsdEFubm90CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVn
cy9zaG93X2J1Zy5jZ2k/aWQ9MzcyMDEyCitwdWJsaWMgdm9pZCB0ZXN0MzE1X3dhcm5fb3B0aW9u
c19hKCkgeworCXRoaXMucnVuTmVnYXRpdmVUZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJCSJw
MS9YMS5qYXZhIiwKKwkJCQkicGFja2FnZSBwMTtcbiIgKworCQkJCSJwdWJsaWMgY2xhc3MgWDEg
e1xuIiArCisJCQkJIglab3JrO1xuIiArCisJCQkJIn1cbiIsCisJCQkJIm9yZy9lY2xpcHNlL2pk
dC9hbm5vdGF0aW9uL05vbk51bGwuamF2YSIsCisJCQkJTk9OTlVMTF9BTk5PVEFUSU9OX0NPTlRF
TlQsCisJCQkJIm9yZy9lY2xpcHNlL2pkdC9hbm5vdGF0aW9uL051bGxhYmxlLmphdmEiLAorCQkJ
CU5VTExBQkxFX0FOTk9UQVRJT05fQ09OVEVOVCwKKwkJCQkib3JnL2VjbGlwc2UvamR0L2Fubm90
YXRpb24vTm9uTnVsbEJ5RGVmYXVsdC5qYXZhIiwJCQkJCisJCQkJTk9OTlVMTF9CWV9ERUZBVUxU
X0FOTk9UQVRJT05fQ09OVEVOVAorCQl9LAorCQkiXCIiICsgT1VUUFVUX0RJUiArICBGaWxlLnNl
cGFyYXRvciArICJwMSIgKyBGaWxlLnNlcGFyYXRvciArICJYMS5qYXZhXCIiCisJCSsgIiAtc291
cmNlcGF0aCBcIiIgKyBPVVRQVVRfRElSICsgIlwiIgorCQkrICIgLTEuNSIKKwkJKyAiIC13YXJu
OitudWxsQW5ub3QgLXdhcm46K251bGwgLW1pc3NpbmdEZWZhdWx0QW5ub3QgLXByb2M6bm9uZSAt
ZCBcIiIgKyBPVVRQVVRfRElSICsgIlwiIiwKIAkJIiIsCiAJCSItLS0tLS0tLS0tXG4iICsgCi0J
CSIxLiBXQVJOSU5HIGluIC0tLU9VVFBVVF9ESVJfUExBQ0VIT0xERVItLS0vcC9YLmphdmEgKGF0
IGxpbmUgNilcbiIgKyAKLQkJIglpZiAoby50b1N0cmluZygpID09IFwiXCIpeyByZXR1cm4gbnVs
bDt9XG4iICsgCi0JCSIJICAgIF5cbiIgKyAKLQkJIlBvdGVudGlhbCBudWxsIHBvaW50ZXIgYWNj
ZXNzOiBUaGUgdmFyaWFibGUgbyBtYXkgYmUgbnVsbCBhdCB0aGlzIGxvY2F0aW9uXG4iICsgCisJ
CSIxLiBXQVJOSU5HIGluIC0tLU9VVFBVVF9ESVJfUExBQ0VIT0xERVItLS0vcDEvWDEuamF2YSAo
YXQgbGluZSAxKVxuIiArIAorCQkiCXBhY2thZ2UgcDE7XG4iICsgCisJCSIJICAgICAgICBeXlxu
IiArIAorCQkiQSBkZWZhdWx0IG51bGxuZXNzIGFubm90YXRpb24gaGFzIG5vdCBiZWVuIHNwZWNp
ZmllZCBmb3IgdGhlIHBhY2thZ2UgcDFcbiIgKyAKIAkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJIjIu
IFdBUk5JTkcgaW4gLS0tT1VUUFVUX0RJUl9QTEFDRUhPTERFUi0tLS9wL1guamF2YSAoYXQgbGlu
ZSA2KVxuIiArIAotCQkiCWlmIChvLnRvU3RyaW5nKCkgPT0gXCJcIil7IHJldHVybiBudWxsO31c
biIgKyAKLQkJIgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5cbiIgKyAKLQkJ
IlR5cGUgbWlzbWF0Y2g6IHJlcXVpcmVkIFwnQE5vbk51bGwgT2JqZWN0XCcgYnV0IHRoZSBwcm92
aWRlZCB2YWx1ZSBpcyBudWxsXG4iICsgCisJCSIyLiBFUlJPUiBpbiAtLS1PVVRQVVRfRElSX1BM
QUNFSE9MREVSLS0tL3AxL1gxLmphdmEgKGF0IGxpbmUgMylcbiIgKyAKKwkJIglab3JrO1xuIiAr
IAorCQkiCV5eXl5cbiIgKyAKKwkJIlN5bnRheCBlcnJvciBvbiB0b2tlbiBcIlpvcmtcIiwgVmFy
aWFibGVEZWNsYXJhdG9yIGV4cGVjdGVkIGFmdGVyIHRoaXMgdG9rZW5cbiIgKyAKIAkJIi0tLS0t
LS0tLS1cbiIgKyAKLQkJIjMuIFdBUk5JTkcgaW4gLS0tT1VUUFVUX0RJUl9QTEFDRUhPTERFUi0t
LS9wL1guamF2YSAoYXQgbGluZSA3KVxuIiArIAotCQkiCWlmIChvMiA9PSBudWxsKSB7fVxuIiAr
IAotCQkiCSAgICBeXlxuIiArIAotCQkiTnVsbCBjb21wYXJpc29uIGFsd2F5cyB5aWVsZHMgZmFs
c2U6IFRoZSB2YXJpYWJsZSBvMiBjYW5ub3QgYmUgbnVsbCBhdCB0aGlzIGxvY2F0aW9uXG4iICsg
CisJCSIyIHByb2JsZW1zICgxIGVycm9yLCAxIHdhcm5pbmcpIiwgCisJCXRydWUpOworfQorCisv
LyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzI1MzQyCisv
LyAtd2FybiBvcHRpb24gLSByZWdyZXNzaW9uIHRlc3RzIHRvIGNoZWNrIG9wdGlvbiBudWxsQW5u
b3QgYW5kIG1pc3NpbmdEZWZhdWx0QW5ub3QKKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9i
dWdzL3Nob3dfYnVnLmNnaT9pZD0zNzIwMTIKK3B1YmxpYyB2b2lkIHRlc3QzMTVfd2Fybl9vcHRp
b25zX2IoKSB7CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkJ
IlgxLmphdmEiLAorCQkJCSJwdWJsaWMgY2xhc3MgWDEge1xuIiArCisJCQkJIglab3JrO1xuIiAr
CisJCQkJIn1cbiIsCisJCQkJIm9yZy9lY2xpcHNlL2pkdC9hbm5vdGF0aW9uL05vbk51bGwuamF2
YSIsCisJCQkJTk9OTlVMTF9BTk5PVEFUSU9OX0NPTlRFTlQsCisJCQkJIm9yZy9lY2xpcHNlL2pk
dC9hbm5vdGF0aW9uL051bGxhYmxlLmphdmEiLAorCQkJCU5VTExBQkxFX0FOTk9UQVRJT05fQ09O
VEVOVCwKKwkJCQkib3JnL2VjbGlwc2UvamR0L2Fubm90YXRpb24vTm9uTnVsbEJ5RGVmYXVsdC5q
YXZhIiwJCQkJCisJCQkJTk9OTlVMTF9CWV9ERUZBVUxUX0FOTk9UQVRJT05fQ09OVEVOVAorCQl9
LAorCQkiXCIiICsgT1VUUFVUX0RJUiArICBGaWxlLnNlcGFyYXRvciArICJYMS5qYXZhXCIiCisJ
CSsgIiAtc291cmNlcGF0aCBcIiIgKyBPVVRQVVRfRElSICsgIlwiIgorCQkrICIgLTEuNSIKKwkJ
KyAiIC13YXJuOitudWxsQW5ub3QgLXdhcm46K251bGwgLW1pc3NpbmdEZWZhdWx0QW5ub3QgLXBy
b2M6bm9uZSAtZCBcIiIgKyBPVVRQVVRfRElSICsgIlwiIiwKKwkJIiIsCiAJCSItLS0tLS0tLS0t
XG4iICsgCi0JCSI0LiBXQVJOSU5HIGluIC0tLU9VVFBVVF9ESVJfUExBQ0VIT0xERVItLS0vcC9Y
LmphdmEgKGF0IGxpbmUgOClcbiIgKyAKLQkJIglnb28obnVsbCkudG9TdHJpbmcoKTtcbiIgKyAK
LQkJIgleXl5eXl5eXl5cbiIgKyAKLQkJIlBvdGVudGlhbCBudWxsIHBvaW50ZXIgYWNjZXNzOiBU
aGUgbWV0aG9kIGdvbyhPYmplY3QpIG1heSByZXR1cm4gbnVsbFxuIiArIAorCQkiMS4gV0FSTklO
RyBpbiAtLS1PVVRQVVRfRElSX1BMQUNFSE9MREVSLS0tL1gxLmphdmEgKGF0IGxpbmUgMSlcbiIg
KyAKKwkJIglwdWJsaWMgY2xhc3MgWDEge1xuIiArIAorCQkiCSAgICAgICAgICAgICBeXlxuIiAr
IAorCQkiQSBkZWZhdWx0IG51bGxuZXNzIGFubm90YXRpb24gaGFzIG5vdCBiZWVuIHNwZWNpZmll
ZCBmb3IgdGhlIHR5cGUgWDFcbiIgKyAKIAkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJIjUuIFdBUk5J
TkcgaW4gLS0tT1VUUFVUX0RJUl9QTEFDRUhPTERFUi0tLS9wL1guamF2YSAoYXQgbGluZSA4KVxu
IiArIAotCQkiCWdvbyhudWxsKS50b1N0cmluZygpO1xuIiArIAotCQkiCSAgICBeXl5eXG4iICsg
Ci0JCSJUeXBlIG1pc21hdGNoOiByZXF1aXJlZCBcJ0BOb25OdWxsIE9iamVjdFwnIGJ1dCB0aGUg
cHJvdmlkZWQgdmFsdWUgaXMgbnVsbFxuIiArIAorCQkiMi4gRVJST1IgaW4gLS0tT1VUUFVUX0RJ
Ul9QTEFDRUhPTERFUi0tLS9YMS5qYXZhIChhdCBsaW5lIDIpXG4iICsgCisJCSIJWm9yaztcbiIg
KyAKKwkJIgleXl5eXG4iICsgCisJCSJTeW50YXggZXJyb3Igb24gdG9rZW4gXCJab3JrXCIsIFZh
cmlhYmxlRGVjbGFyYXRvciBleHBlY3RlZCBhZnRlciB0aGlzIHRva2VuXG4iICsgCiAJCSItLS0t
LS0tLS0tXG4iICsgCi0JCSI2LiBXQVJOSU5HIGluIC0tLU9VVFBVVF9ESVJfUExBQ0VIT0xERVIt
LS0vcC9YLmphdmEgKGF0IGxpbmUgOSlcbiIgKyAKLQkJIglyZXR1cm4gbnVsbDtcbiIgKyAKLQkJ
IgkgICAgICAgXl5eXlxuIiArIAotCQkiVHlwZSBtaXNtYXRjaDogcmVxdWlyZWQgXCdATm9uTnVs
bCBPYmplY3RcJyBidXQgdGhlIHByb3ZpZGVkIHZhbHVlIGlzIG51bGxcbiIgKyAKLQkJIi0tLS0t
LS0tLS1cbiIgKyAKLQkJIjcuIFdBUk5JTkcgaW4gLS0tT1VUUFVUX0RJUl9QTEFDRUhPTERFUi0t
LS9wL1guamF2YSAoYXQgbGluZSAxNClcbiIgKyAKLQkJIglATm9uTnVsbEJ5RGVmYXVsdCBPYmpl
Y3QgaG9vKE9iamVjdCBvMikge1xuIiArIAotCQkiCV5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCi0J
CSJOdWxsbmVzcyBkZWZhdWx0IGlzIHJlZHVuZGFudCB3aXRoIHRoZSBnbG9iYWwgZGVmYXVsdFxu
IiArIAotCQkiLS0tLS0tLS0tLVxuIiArIAotCQkiOC4gV0FSTklORyBpbiAtLS1PVVRQVVRfRElS
X1BMQUNFSE9MREVSLS0tL3AvWC5qYXZhIChhdCBsaW5lIDE1KVxuIiArIAotCQkiCWlmIChvMiA9
PSBudWxsKVxuIiArIAotCQkiCSAgICBeXlxuIiArIAotCQkiTnVsbCBjb21wYXJpc29uIGFsd2F5
cyB5aWVsZHMgZmFsc2U6IFRoZSB2YXJpYWJsZSBvMiBjYW5ub3QgYmUgbnVsbCBhdCB0aGlzIGxv
Y2F0aW9uXG4iICsgCi0JCSItLS0tLS0tLS0tXG4iICsgCi0JCSI4IHByb2JsZW1zICg4IHdhcm5p
bmdzKSIsIAorCQkiMiBwcm9ibGVtcyAoMSBlcnJvciwgMSB3YXJuaW5nKSIsIAogCQl0cnVlKTsK
IH0KIApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvYmF0Y2gvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2JhdGNoL01haW4uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2JhdGNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9iYXRjaC9NYWluLmph
dmEKaW5kZXggMTRkZjAxNi4uYjQ3OTc3OSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvYmF0Y2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2JhdGNoL01haW4uamF2
YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9iYXRjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYmF0Y2gvTWFpbi5qYXZhCkBAIC0yMzgwLDggKzIzODAsOCBAQAogCQkJCQlt
b2RlID0gSU5TSURFX1dBUk5JTkdTX1BST1BFUlRJRVM7CiAJCQkJCWNvbnRpbnVlOwogCQkJCX0K
LQkJCQlpZiAoY3VycmVudEFyZy5lcXVhbHMoIi1ub25OdWxsQnlEZWZhdWx0IikpIHsgLy8kTk9O
LU5MUy0xJAotCQkJCQl0aGlzLm9wdGlvbnMucHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJT05fTm9u
TnVsbElzRGVmYXVsdCwgQ29tcGlsZXJPcHRpb25zLkVOQUJMRUQpOworCQkJCWlmIChjdXJyZW50
QXJnLmVxdWFscygiLW1pc3NpbmdEZWZhdWx0QW5ub3QiKSkgeyAvLyROT04tTkxTLTEkCisJCQkJ
CXRoaXMub3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9SZXBvcnRNaXNzaW5nTm9u
TnVsbEJ5RGVmYXVsdEFubm90YXRpb24sIENvbXBpbGVyT3B0aW9ucy5XQVJOSU5HKTsKIAkJCQkJ
Y29udGludWU7CiAJCQkJfQogCQkJCWJyZWFrOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvYmF0Y2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2JhdGNoL21lc3Nh
Z2VzLnByb3BlcnRpZXMgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9iYXRjaC9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvYmF0Y2gvbWVzc2FnZXMucHJvcGVydGllcwppbmRleCAwMGE1
Zjc0Li5iYzZmZmQxIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9iYXRjaC9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYmF0Y2gvbWVzc2FnZXMucHJvcGVydGllcwor
KysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9iYXRjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvYmF0Y2gvbWVzc2FnZXMucHJvcGVydGllcwpAQCAtMjUxLDcgKzI1MSw3IEBACiBc
ICAgIC1lbmFibGVKYXZhZG9jICAgICBjb25zaWRlciByZWZlcmVuY2VzIGluIGphdmFkb2NcblwK
IFwgICAgLVhlbWFjcyAgICAgICAgICAgIHVzZWQgdG8gZW5hYmxlIGVtYWNzLXN0eWxlIG91dHB1
dCBpbiB0aGUgY29uc29sZS5cblwKIFwgICAgICAgICAgICAgICAgICAgICAgIEl0IGRvZXMgbm90
IGFmZmVjdCB0aGUgeG1sIGxvZyBvdXRwdXRcblwKLVwgICAgLW5vbk51bGxCeURlZmF1bHQgIGZv
ciBhbm5vdGF0aW9uIGJhc2VkIG51bGwgYW5hbHlzaXMgYXNzdW1lIG5vbm51bGxcblwKK1wgICAg
LW1pc3NpbmdEZWZhdWx0QW5ub3QgIHJlcG9ydCBtaXNzaW5nIGRlZmF1bHQgYW5ub3RhdGlvbiBv
biBwYWNrYWdlL3R5cGVcblwKIFwgICAgICAgICAgICAgICAgICAgICAgIGFzIHRoZSBnbG9iYWwg
ZGVmYXVsdFxuXAogXCBcblwKIFwgICAgLT8gLWhlbHAgICAgICAgICAgIHByaW50IHRoaXMgaGVs
cCBtZXNzYWdlXG5cCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvY29yZS9jb21waWxlci9JUHJvYmxlbS5qYXZhIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2NvcmUvY29tcGlsZXIvSVByb2JsZW0u
amF2YQppbmRleCBjODg0NGEzLi44YTU2MjQ3IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvY29yZS9jb21waWxlci9JUHJvYmxlbS5qYXZh
CisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L2NvbXBpbGVyL0lQcm9ibGVtLmphdmEKQEAgLTE0NDIsNyArMTQ0Miw4IEBACiAJaW50IFJlcXVp
cmVkTm9uTnVsbEJ1dFByb3ZpZGVkUG90ZW50aWFsTnVsbCA9IFR5cGVSZWxhdGVkICsgOTExOwog
CS8qKiBAc2luY2UgMy44ICovCiAJaW50IFJlcXVpcmVkTm9uTnVsbEJ1dFByb3ZpZGVkVW5rbm93
biA9IFR5cGVSZWxhdGVkICsgOTEyOwotCS8vIHJlbW92ZWQgZHVyaW5nIDMuOCBNNjogSW1wb3J0
UmVsYXRlZCArIDkxMyAKKwkvKiogQHNpbmNlIDMuOCAqLworCWludCBNaXNzaW5nTm9uTnVsbEJ5
RGVmYXVsdEFubm90YXRpb25PblBhY2thZ2UgPSBJbnRlcm5hbCArIDkxMzsgLy8gaHR0cHM6Ly9i
dWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM3MjAxMgogCS8qKiBAc2luY2Ug
My44ICovCiAJaW50IElsbGVnYWxSZXR1cm5OdWxsaXR5UmVkZWZpbml0aW9uID0gTWV0aG9kUmVs
YXRlZCArIDkxNDsKIAkvKiogQHNpbmNlIDMuOCAqLwpAQCAtMTQ3Myw2ICsxNDc0LDggQEAKIAlp
bnQgUmVkdW5kYW50TnVsbERlZmF1bHRBbm5vdGF0aW9uTWV0aG9kID0gSW50ZXJuYWwgKyA5Mjg7
CiAJLyoqIEBzaW5jZSAzLjggKi8KIAlpbnQgQ29udHJhZGljdG9yeU51bGxBbm5vdGF0aW9ucyA9
IEludGVybmFsICsgOTI5OworCS8qKiBAc2luY2UgMy44ICovCisJaW50IE1pc3NpbmdOb25OdWxs
QnlEZWZhdWx0QW5ub3RhdGlvbk9uVHlwZSA9IEludGVybmFsICsgOTMwOyAvLyBodHRwczovL2J1
Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzcyMDEyCiAKIAkvKioKIAkgKiBF
eHRlcm5hbCBwcm9ibGVtcyAtLSBUaGVzZSBhcmUgcHJvYmxlbXMgZGVmaW5lZCBieSBvdGhlciBw
bHVnaW5zCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvaW1wbC9Db21waWxlck9wdGlvbnMuamF2YSBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9pbXBsL0NvbXBpbGVyT3B0aW9ucy5qYXZhCmluZGV4IDkzMjM2YWIuLjQ5YzU2ZWMgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9pbXBsL0NvbXBpbGVyT3B0aW9ucy5qYXZhCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9p
bXBsL0NvbXBpbGVyT3B0aW9ucy5qYXZhCkBAIC0yOSw3ICsyOSw2IEBACiBpbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5BU1ROb2RlOwogaW1wb3J0IG9yZy5lY2xp
cHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5jbGFzc2ZtdC5DbGFzc0ZpbGVDb25zdGFudHM7CiBp
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5FeHRyYUNvbXBp
bGVyTW9kaWZpZXJzOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5s
b29rdXAuVGFnQml0czsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
cHJvYmxlbS5Qcm9ibGVtU2V2ZXJpdGllczsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJu
YWwuY29tcGlsZXIudXRpbC5VdGlsOwogCkBAIC0xNTgsNyArMTU3LDcgQEAKIAlzdGF0aWMgZmlu
YWwgY2hhcltdW10gREVGQVVMVF9OVUxMQUJMRV9BTk5PVEFUSU9OX05BTUUgPSBDaGFyT3BlcmF0
aW9uLnNwbGl0T24oJy4nLCAib3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTnVsbGFibGUiLnRv
Q2hhckFycmF5KCkpOyAvLyROT04tTkxTLTEkCiAJc3RhdGljIGZpbmFsIGNoYXJbXVtdIERFRkFV
TFRfTk9OTlVMTF9BTk5PVEFUSU9OX05BTUUgPSBDaGFyT3BlcmF0aW9uLnNwbGl0T24oJy4nLCAi
b3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTm9uTnVsbCIudG9DaGFyQXJyYXkoKSk7IC8vJE5P
Ti1OTFMtMSQKIAlzdGF0aWMgZmluYWwgY2hhcltdW10gREVGQVVMVF9OT05OVUxMQllERUZBVUxU
X0FOTk9UQVRJT05fTkFNRSA9IENoYXJPcGVyYXRpb24uc3BsaXRPbignLicsICJvcmcuZWNsaXBz
ZS5qZHQuYW5ub3RhdGlvbi5Ob25OdWxsQnlEZWZhdWx0Ii50b0NoYXJBcnJheSgpKTsgLy8kTk9O
LU5MUy0xJAotCXB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIE9QVElPTl9Ob25OdWxsSXNEZWZh
dWx0ID0gIm9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLmFubm90YXRpb24ubm9ubnVsbGlz
ZGVmYXVsdCI7ICAvLyROT04tTkxTLTEkCisJcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgT1BU
SU9OX1JlcG9ydE1pc3NpbmdOb25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbiA9ICJvcmcuZWNsaXBz
ZS5qZHQuY29yZS5jb21waWxlci5hbm5vdGF0aW9uLm1pc3NpbmdOb25OdWxsQnlEZWZhdWx0QW5u
b3RhdGlvbiI7ICAvLyROT04tTkxTLTEkCiAJLyoqCiAJICogUG9zc2libGUgdmFsdWVzIGZvciBj
b25maWd1cmFibGUgb3B0aW9ucwogCSAqLwpAQCAtMjY5LDYgKzI2OCw3IEBACiAJcHVibGljIHN0
YXRpYyBmaW5hbCBpbnQgUG90ZW50aWFsTnVsbFNwZWNWaW9sYXRpb24gPSBJcnJpdGFudFNldC5H
Uk9VUDIgfCBBU1ROb2RlLkJpdDEyOwogCXB1YmxpYyBzdGF0aWMgZmluYWwgaW50IE51bGxTcGVj
SW5zdWZmaWNpZW50SW5mbyA9IElycml0YW50U2V0LkdST1VQMiB8IEFTVE5vZGUuQml0MTM7CiAJ
cHVibGljIHN0YXRpYyBmaW5hbCBpbnQgUmVkdW5kYW50TnVsbEFubm90YXRpb24gPSBJcnJpdGFu
dFNldC5HUk9VUDIgfCBBU1ROb2RlLkJpdDE0OworCXB1YmxpYyBzdGF0aWMgZmluYWwgaW50IE1p
c3NpbmdOb25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbiA9IElycml0YW50U2V0LkdST1VQMiB8IEFT
VE5vZGUuQml0MTU7CiAKIAkvLyBTZXZlcml0eSBsZXZlbCBmb3IgaGFuZGxlcnMKIAkvKiogCkBA
IC01OTQsNiArNTk0LDggQEAKIAkJCQlyZXR1cm4gT1BUSU9OX1JlcG9ydE1ldGhvZENhbkJlU3Rh
dGljOwogCQkJY2FzZSBNZXRob2RDYW5CZVBvdGVudGlhbGx5U3RhdGljIDoKIAkJCQlyZXR1cm4g
T1BUSU9OX1JlcG9ydE1ldGhvZENhbkJlUG90ZW50aWFsbHlTdGF0aWM7CisJCQljYXNlIE1pc3Np
bmdOb25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbiA6CisJCQkJcmV0dXJuIE9QVElPTl9SZXBvcnRN
aXNzaW5nTm9uTnVsbEJ5RGVmYXVsdEFubm90YXRpb247CiAJCQljYXNlIFJlZHVuZGFudFNwZWNp
ZmljYXRpb25PZlR5cGVBcmd1bWVudHMgOgogCQkJCXJldHVybiBPUFRJT05fUmVwb3J0UmVkdW5k
YW50U3BlY2lmaWNhdGlvbk9mVHlwZUFyZ3VtZW50czsKIAkJCWNhc2UgVW5jbG9zZWRDbG9zZWFi
bGUgOgpAQCAtNzgwLDcgKzc4Miw3IEBACiAJCQlPUFRJT05fTm9uTnVsbEFubm90YXRpb25OYW1l
LAogCQkJT1BUSU9OX051bGxhYmxlQW5ub3RhdGlvbk5hbWUsCiAJCQlPUFRJT05fTm9uTnVsbEJ5
RGVmYXVsdEFubm90YXRpb25OYW1lLAotCQkJT1BUSU9OX05vbk51bGxJc0RlZmF1bHQsCisJCQlP
UFRJT05fUmVwb3J0TWlzc2luZ05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uLAogCQkJT1BUSU9O
X1JlcG9ydE51bGxTcGVjVmlvbGF0aW9uLAogCQkJT1BUSU9OX1JlcG9ydFBvdGVudGlhbE51bGxT
cGVjVmlvbGF0aW9uLAogCQkJT1BUSU9OX1JlcG9ydE51bGxTcGVjSW5zdWZmaWNpZW50SW5mbywK
QEAgLTEwNzYsMTAgKzEwNzgsNyBAQAogCQlvcHRpb25zTWFwLnB1dChPUFRJT05fTnVsbGFibGVB
bm5vdGF0aW9uTmFtZSwgU3RyaW5nLnZhbHVlT2YoQ2hhck9wZXJhdGlvbi5jb25jYXRXaXRoKHRo
aXMubnVsbGFibGVBbm5vdGF0aW9uTmFtZSwgJy4nKSkpOwogCQlvcHRpb25zTWFwLnB1dChPUFRJ
T05fTm9uTnVsbEFubm90YXRpb25OYW1lLCBTdHJpbmcudmFsdWVPZihDaGFyT3BlcmF0aW9uLmNv
bmNhdFdpdGgodGhpcy5ub25OdWxsQW5ub3RhdGlvbk5hbWUsICcuJykpKTsKIAkJb3B0aW9uc01h
cC5wdXQoT1BUSU9OX05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uTmFtZSwgU3RyaW5nLnZhbHVl
T2YoQ2hhck9wZXJhdGlvbi5jb25jYXRXaXRoKHRoaXMubm9uTnVsbEJ5RGVmYXVsdEFubm90YXRp
b25OYW1lLCAnLicpKSk7Ci0JCWlmICh0aGlzLmludGVuZGVkRGVmYXVsdE5vbk51bGxuZXNzID09
IFRhZ0JpdHMuQW5ub3RhdGlvbk5vbk51bGwpCi0JCQlvcHRpb25zTWFwLnB1dChPUFRJT05fTm9u
TnVsbElzRGVmYXVsdCwgQ29tcGlsZXJPcHRpb25zLkVOQUJMRUQpOwotCQllbHNlCi0JCQlvcHRp
b25zTWFwLnB1dChPUFRJT05fTm9uTnVsbElzRGVmYXVsdCwgQ29tcGlsZXJPcHRpb25zLkRJU0FC
TEVEKTsKKwkJb3B0aW9uc01hcC5wdXQoT1BUSU9OX1JlcG9ydE1pc3NpbmdOb25OdWxsQnlEZWZh
dWx0QW5ub3RhdGlvbiwgZ2V0U2V2ZXJpdHlTdHJpbmcoTWlzc2luZ05vbk51bGxCeURlZmF1bHRB
bm5vdGF0aW9uKSk7CiAJCXJldHVybiBvcHRpb25zTWFwOwogCX0KIApAQCAtMTU1NCwxMiArMTU1
Myw3IEBACiAJCQlpZiAoKG9wdGlvblZhbHVlID0gb3B0aW9uc01hcC5nZXQoT1BUSU9OX05vbk51
bGxCeURlZmF1bHRBbm5vdGF0aW9uTmFtZSkpICE9IG51bGwpIHsKIAkJCQl0aGlzLm5vbk51bGxC
eURlZmF1bHRBbm5vdGF0aW9uTmFtZSA9IENoYXJPcGVyYXRpb24uc3BsaXRBbmRUcmltT24oJy4n
LCAoKFN0cmluZylvcHRpb25WYWx1ZSkudG9DaGFyQXJyYXkoKSk7CiAJCQl9Ci0JCQlpZiAoKG9w
dGlvblZhbHVlID0gb3B0aW9uc01hcC5nZXQoT1BUSU9OX05vbk51bGxJc0RlZmF1bHQpKSAhPSBu
dWxsKSB7Ci0JCQkJaWYgKENvbXBpbGVyT3B0aW9ucy5FTkFCTEVELmVxdWFscyhvcHRpb25WYWx1
ZSkpCi0JCQkJCXRoaXMuaW50ZW5kZWREZWZhdWx0Tm9uTnVsbG5lc3MgPSBUYWdCaXRzLkFubm90
YXRpb25Ob25OdWxsOwotCQkJCWVsc2UgaWYgKENvbXBpbGVyT3B0aW9ucy5ESVNBQkxFRC5lcXVh
bHMob3B0aW9uVmFsdWUpKQotCQkJCQl0aGlzLmludGVuZGVkRGVmYXVsdE5vbk51bGxuZXNzID0g
MDsKLQkJCX0KKwkJCWlmICgob3B0aW9uVmFsdWUgPSBvcHRpb25zTWFwLmdldChPUFRJT05fUmVw
b3J0TWlzc2luZ05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uKSkgIT0gbnVsbCkgdXBkYXRlU2V2
ZXJpdHkoTWlzc2luZ05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uLCBvcHRpb25WYWx1ZSk7CiAJ
CX0KIAogCQkvLyBKYXZhZG9jIG9wdGlvbnMKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU291
cmNlVHlwZUJpbmRpbmcuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU291cmNlVHlwZUJpbmRpbmcuamF2
YQppbmRleCA1M2EyYjFiLi5jNjNhMmUwIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1NvdXJj
ZVR5cGVCaW5kaW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Tb3VyY2VUeXBlQmluZGluZy5q
YXZhCkBAIC0xNjMzLDYgKzE2MzMsMjMgQEAKIHByaXZhdGUgdm9pZCBldmFsdWF0ZU51bGxBbm5v
dGF0aW9ucyhsb25nIGFubm90YXRpb25UYWdCaXRzKSB7CiAJaWYgKHRoaXMubnVsbG5lc3NEZWZh
dWx0SW5pdGlhbGl6ZWQgPiAwIHx8ICF0aGlzLnNjb3BlLmNvbXBpbGVyT3B0aW9ucygpLmlzQW5u
b3RhdGlvbkJhc2VkTnVsbEFuYWx5c2lzRW5hYmxlZCkKIAkJcmV0dXJuOworCWJvb2xlYW4gaXNQ
YWNrYWdlSW5mbyA9IENoYXJPcGVyYXRpb24uZXF1YWxzKHRoaXMuc291cmNlTmFtZSwgVHlwZUNv
bnN0YW50cy5QQUNLQUdFX0lORk9fTkFNRSk7CisJUGFja2FnZUJpbmRpbmcgcGtnID0gZ2V0UGFj
a2FnZSgpOworCWJvb2xlYW4gaXNEZWZhdWx0ID0gKHBrZy5jb21wb3VuZE5hbWUgPT0gQ2hhck9w
ZXJhdGlvbi5OT19DSEFSX0NIQVIpOworCWJvb2xlYW4gaXNOdWxsbmVzc0Fubm90YXRpb25QYWNr
YWdlID0gCisJCQlwa2cgPT0gdGhpcy5zY29wZS5lbnZpcm9ubWVudCgpLm5vbm51bGxBbm5vdGF0
aW9uUGFja2FnZQorCQkJfHwgcGtnID09IHRoaXMuc2NvcGUuZW52aXJvbm1lbnQoKS5udWxsYWJs
ZUFubm90YXRpb25QYWNrYWdlCisJCQl8fCBwa2cgPT0gdGhpcy5zY29wZS5lbnZpcm9ubWVudCgp
Lm5vbm51bGxCeURlZmF1bHRBbm5vdGF0aW9uUGFja2FnZTsKKwlpZiAocGtnLmRlZmF1bHROdWxs
bmVzcyA9PSBOT19OVUxMX0RFRkFVTFQgJiYgIWlzRGVmYXVsdCAmJiAhaXNQYWNrYWdlSW5mbyAm
JiAhaXNOdWxsbmVzc0Fubm90YXRpb25QYWNrYWdlKSB7CisJCVJlZmVyZW5jZUJpbmRpbmcgcGFj
a2FnZUluZm8gPSBwa2cuZ2V0VHlwZShUeXBlQ29uc3RhbnRzLlBBQ0tBR0VfSU5GT19OQU1FKTsK
KwkJaWYgKHBhY2thZ2VJbmZvID09IG51bGwpIHsKKwkJCS8vIG5vIHBrZ0luZm8gLSBjb21wbGFp
bgorCQkJdGhpcy5zY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5taXNzaW5nTm9uTnVsbEJ5RGVmYXVs
dEFubm90YXRpb24odGhpcy5zY29wZS5yZWZlcmVuY2VDb250ZXh0KTsKKwkJfSBlbHNlIHsKKwkJ
CS8vIGlmIHBrZ0luZm8gaGFzIG5vIGRlZmF1bHQgYW5ub3QuIC0gY29tcGxhaW4KKwkJCXBhY2th
Z2VJbmZvLmdldEFubm90YXRpb25UYWdCaXRzKCk7CisJCX0KKwl9CiAJdGhpcy5udWxsbmVzc0Rl
ZmF1bHRJbml0aWFsaXplZCA9IDE7CiAJLy8gdHJhbnNmZXIgbnVsbG5lc3MgaW5mbyBmcm9tIHRh
Z0JpdHMgdG8gdGhpcy5udWxsbmVzc0RlZmF1bHRBbm5vdGF0aW9uCiAJaW50IG5ld0RlZmF1bHRO
dWxsbmVzcyA9IE5PX05VTExfREVGQVVMVDsKQEAgLTE2NDEsMTQgKzE2NTgsMTcgQEAKIAllbHNl
IGlmICgoYW5ub3RhdGlvblRhZ0JpdHMgJiBUYWdCaXRzLkFubm90YXRpb25Ob25OdWxsQnlEZWZh
dWx0KSAhPSAwKQogCQluZXdEZWZhdWx0TnVsbG5lc3MgPSBOT05OVUxMX0JZX0RFRkFVTFQ7CiAJ
aWYgKG5ld0RlZmF1bHROdWxsbmVzcyAhPSBOT19OVUxMX0RFRkFVTFQpIHsKLQkJaWYgKENoYXJP
cGVyYXRpb24uZXF1YWxzKHRoaXMuc291cmNlTmFtZSwgVHlwZUNvbnN0YW50cy5QQUNLQUdFX0lO
Rk9fTkFNRSkpIHsKLQkJCWdldFBhY2thZ2UoKS5kZWZhdWx0TnVsbG5lc3MgPSBuZXdEZWZhdWx0
TnVsbG5lc3M7CisJCWlmIChpc1BhY2thZ2VJbmZvKSB7CisJCQlwa2cuZGVmYXVsdE51bGxuZXNz
ID0gbmV3RGVmYXVsdE51bGxuZXNzOwogCQl9IGVsc2UgewogCQkJdGhpcy5kZWZhdWx0TnVsbG5l
c3MgPSBuZXdEZWZhdWx0TnVsbG5lc3M7CiAJCQlUeXBlRGVjbGFyYXRpb24gdHlwZURlY2wgPSB0
aGlzLnNjb3BlLnJlZmVyZW5jZUNvbnRleHQ7CiAJCQlsb25nIG51bGxEZWZhdWx0Qml0cyA9IGFu
bm90YXRpb25UYWdCaXRzICYgKFRhZ0JpdHMuQW5ub3RhdGlvbk51bGxVbnNwZWNpZmllZEJ5RGVm
YXVsdHxUYWdCaXRzLkFubm90YXRpb25Ob25OdWxsQnlEZWZhdWx0KTsKIAkJCWNoZWNrUmVkdW5k
YW50TnVsbG5lc3NEZWZhdWx0UmVjdXJzZSh0eXBlRGVjbCwgdHlwZURlY2wuYW5ub3RhdGlvbnMs
IG51bGxEZWZhdWx0Qml0cyk7CiAJCX0KKwl9IGVsc2UgaWYgKGlzUGFja2FnZUluZm8gfHwgaXNE
ZWZhdWx0KSB7CisJCXRoaXMuc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkubWlzc2luZ05vbk51bGxC
eURlZmF1bHRBbm5vdGF0aW9uKHRoaXMuc2NvcGUucmVmZXJlbmNlQ29udGV4dCk7CisJCXBrZy5k
ZWZhdWx0TnVsbG5lc3MgPSBOVUxMX1VOU1BFQ0lGSUVEX0JZX0RFRkFVTFQ7CiAJfQogfQogCmRp
ZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9Qcm9ibGVtUmVwb3J0ZXIuamF2YSBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9w
cm9ibGVtL1Byb2JsZW1SZXBvcnRlci5qYXZhCmluZGV4IDNkZDYzOWEuLmY0NTIzMWYgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9wcm9ibGVtL1Byb2JsZW1SZXBvcnRlci5qYXZhCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9w
cm9ibGVtL1Byb2JsZW1SZXBvcnRlci5qYXZhCkBAIC00NjgsNiArNDY4LDEwIEBACiAJCQkJCiAJ
CWNhc2UgSVByb2JsZW0uUmVkdW5kYW50U3BlY2lmaWNhdGlvbk9mVHlwZUFyZ3VtZW50czoKIAkJ
CXJldHVybiBDb21waWxlck9wdGlvbnMuUmVkdW5kYW50U3BlY2lmaWNhdGlvbk9mVHlwZUFyZ3Vt
ZW50czsKKwkJCQorCQljYXNlIElQcm9ibGVtLk1pc3NpbmdOb25OdWxsQnlEZWZhdWx0QW5ub3Rh
dGlvbk9uUGFja2FnZToKKwkJY2FzZSBJUHJvYmxlbS5NaXNzaW5nTm9uTnVsbEJ5RGVmYXVsdEFu
bm90YXRpb25PblR5cGU6CisJCQlyZXR1cm4gQ29tcGlsZXJPcHRpb25zLk1pc3NpbmdOb25OdWxs
QnlEZWZhdWx0QW5ub3RhdGlvbjsKIAl9CiAJcmV0dXJuIDA7CiB9CkBAIC04MTcxLDkgKzgxNzUs
NyBAQAogCQlhcmd1bWVudC50eXBlLnNvdXJjZVN0YXJ0LAogCQlhcmd1bWVudC50eXBlLnNvdXJj
ZUVuZCk7CiB9Ci1wdWJsaWMgdm9pZCBpbGxlZ2FsUmV0dXJuUmVkZWZpbml0aW9uKEFic3RyYWN0
TWV0aG9kRGVjbGFyYXRpb24gYWJzdHJhY3RNZXRob2REZWNsLAotCQkJCQkJCQkJICBNZXRob2RC
aW5kaW5nIGluaGVyaXRlZE1ldGhvZCwgY2hhcltdW10gbm9uTnVsbEFubm90YXRpb25OYW1lKQot
eworcHVibGljIHZvaWQgaWxsZWdhbFJldHVyblJlZGVmaW5pdGlvbihBYnN0cmFjdE1ldGhvZERl
Y2xhcmF0aW9uIGFic3RyYWN0TWV0aG9kRGVjbCwgTWV0aG9kQmluZGluZyBpbmhlcml0ZWRNZXRo
b2QsIGNoYXJbXVtdIG5vbk51bGxBbm5vdGF0aW9uTmFtZSkgewogCU1ldGhvZERlY2xhcmF0aW9u
IG1ldGhvZERlY2wgPSAoTWV0aG9kRGVjbGFyYXRpb24pIGFic3RyYWN0TWV0aG9kRGVjbDsKIAlT
dHJpbmdCdWZmZXIgbWV0aG9kU2lnbmF0dXJlID0gbmV3IFN0cmluZ0J1ZmZlcigpOwogCW1ldGhv
ZFNpZ25hdHVyZQpAQCAtODMxOSw0ICs4MzIxLDM0IEBACiAJfQogCXJldHVybiBudWxsOwogfQor
Ly8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM3MjAxMgor
cHVibGljIHZvaWQgbWlzc2luZ05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uKFR5cGVEZWNsYXJh
dGlvbiB0eXBlKSB7CisJaW50IHNldmVyaXR5OworCUNvbXBpbGF0aW9uVW5pdERlY2xhcmF0aW9u
IGNvbXBVbml0RGVjbCA9IHR5cGUuZ2V0Q29tcGlsYXRpb25Vbml0RGVjbGFyYXRpb24oKTsKKwlT
dHJpbmdbXSBhcmd1bWVudHM7CisJaWYgKGNvbXBVbml0RGVjbC5jdXJyZW50UGFja2FnZSA9PSBu
dWxsKSB7CisJCXNldmVyaXR5ID0gY29tcHV0ZVNldmVyaXR5KElQcm9ibGVtLk1pc3NpbmdOb25O
dWxsQnlEZWZhdWx0QW5ub3RhdGlvbk9uVHlwZSk7CisJCWlmIChzZXZlcml0eSA9PSBQcm9ibGVt
U2V2ZXJpdGllcy5JZ25vcmUpIHJldHVybjsKKwkJLy8gRGVmYXVsdCBwYWNrYWdlCisJCVR5cGVC
aW5kaW5nIGJpbmRpbmcgPSB0eXBlLmJpbmRpbmc7CisJCXRoaXMuaGFuZGxlKAorCQkJCUlQcm9i
bGVtLk1pc3NpbmdOb25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbk9uVHlwZSwKKwkJCQluZXcgU3Ry
aW5nW10ge25ldyBTdHJpbmcoYmluZGluZy5yZWFkYWJsZU5hbWUoKSksIH0sCisJCQkJbmV3IFN0
cmluZ1tdIHtuZXcgU3RyaW5nKGJpbmRpbmcuc2hvcnRSZWFkYWJsZU5hbWUoKSksfSwKKwkJCQlz
ZXZlcml0eSwKKwkJCQl0eXBlLnNvdXJjZVN0YXJ0LAorCQkJCXR5cGUuc291cmNlRW5kKTsKKwl9
IGVsc2UgeworCQlzZXZlcml0eSA9IGNvbXB1dGVTZXZlcml0eShJUHJvYmxlbS5NaXNzaW5nTm9u
TnVsbEJ5RGVmYXVsdEFubm90YXRpb25PblBhY2thZ2UpOworCQlpZiAoc2V2ZXJpdHkgPT0gUHJv
YmxlbVNldmVyaXRpZXMuSWdub3JlKSByZXR1cm47CisJCWFyZ3VtZW50cyA9IG5ldyBTdHJpbmdb
XSB7Q2hhck9wZXJhdGlvbi50b1N0cmluZyhjb21wVW5pdERlY2wuY3VycmVudFBhY2thZ2UudG9r
ZW5zKX07CisJCXRoaXMuaGFuZGxlKAorCQkJSVByb2JsZW0uTWlzc2luZ05vbk51bGxCeURlZmF1
bHRBbm5vdGF0aW9uT25QYWNrYWdlLAorCQkJYXJndW1lbnRzLAorCQkJYXJndW1lbnRzLAorCQkJ
c2V2ZXJpdHksCisJCQljb21wVW5pdERlY2wuY3VycmVudFBhY2thZ2Uuc291cmNlU3RhcnQsCisJ
CQljb21wVW5pdERlY2wuY3VycmVudFBhY2thZ2Uuc291cmNlRW5kKTsKKwl9Cit9CiB9CmRpZmYg
LS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9tZXNzYWdlcy5wcm9wZXJ0aWVzIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2Js
ZW0vbWVzc2FnZXMucHJvcGVydGllcwppbmRleCAyNjVlZmFlLi4xYTA2NGUzIDEwMDY0NAotLS0g
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvcHJvYmxlbS9tZXNzYWdlcy5wcm9wZXJ0aWVzCisrKyBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVt
L21lc3NhZ2VzLnByb3BlcnRpZXMKQEAgLTY2Miw3ICs2NjIsNyBAQAogOTEwID0gVHlwZSBtaXNt
YXRjaDogcmVxdWlyZWQgJydAezB9IHsxfScnIGJ1dCB0aGUgcHJvdmlkZWQgdmFsdWUgaXMgbnVs
bAogOTExID0gVHlwZSBtaXNtYXRjaDogcmVxdWlyZWQgJydAezB9IHsxfScnIGJ1dCB0aGUgcHJv
dmlkZWQgdmFsdWUgY2FuIGJlIG51bGwKIDkxMiA9IFBvdGVudGlhbCB0eXBlIG1pc21hdGNoOiBy
ZXF1aXJlZCAnJ0B7MH0gezF9JycgYnV0IG51bGxuZXNzIG9mIHRoZSBwcm92aWRlZCB2YWx1ZSBp
cyB1bmtub3duCi0jOTEzIHJlbW92ZWQKKzkxMyA9IEEgZGVmYXVsdCBudWxsbmVzcyBhbm5vdGF0
aW9uIGhhcyBub3QgYmVlbiBzcGVjaWZpZWQgZm9yIHRoZSBwYWNrYWdlIHswfQogOTE0ID0gVGhl
IHJldHVybiB0eXBlIGlzIGluY29tcGF0aWJsZSB3aXRoIHRoZSBAezF9IHJldHVybiBmcm9tIHsw
fQogOTE1ID0gSWxsZWdhbCByZWRlZmluaXRpb24gb2YgcGFyYW1ldGVyIHswfSwgaW5oZXJpdGVk
IG1ldGhvZCBmcm9tIHsxfSBkZWNsYXJlcyB0aGlzIHBhcmFtZXRlciBhcyBAezJ9CiA5MTYgPSBJ
bGxlZ2FsIHJlZGVmaW5pdGlvbiBvZiBwYXJhbWV0ZXIgezB9LCBpbmhlcml0ZWQgbWV0aG9kIGZy
b20gezF9IGRvZXMgbm90IGNvbnN0cmFpbiB0aGlzIHBhcmFtZXRlcgpAQCAtNjc4LDYgKzY3OCw3
IEBACiA5MjcgPSBOdWxsbmVzcyBkZWZhdWx0IGlzIHJlZHVuZGFudCB3aXRoIGEgZGVmYXVsdCBz
cGVjaWZpZWQgZm9yIHRoZSBlbmNsb3NpbmcgdHlwZSB7MH0KIDkyOCA9IE51bGxuZXNzIGRlZmF1
bHQgaXMgcmVkdW5kYW50IHdpdGggYSBkZWZhdWx0IHNwZWNpZmllZCBmb3IgdGhlIGVuY2xvc2lu
ZyBtZXRob2QgezB9CiA5MjkgPSBDb250cmFkaWN0b3J5IG51bGwgc3BlY2lmaWNhdGlvbjsgb25s
eSBvbmUgb2YgQHswfSBhbmQgQHsxfSBjYW4gYmUgc3BlY2lmaWVkIGF0IGFueSBsb2NhdGlvbgor
OTMwID0gQSBkZWZhdWx0IG51bGxuZXNzIGFubm90YXRpb24gaGFzIG5vdCBiZWVuIHNwZWNpZmll
ZCBmb3IgdGhlIHR5cGUgezB9CiAKICMjIyBFTEFCT1JBVElPTlMKICMjIEFjY2VzcyByZXN0cmlj
dGlvbnMKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNl
L2pkdC9jb3JlL0phdmFDb3JlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcv
ZWNsaXBzZS9qZHQvY29yZS9KYXZhQ29yZS5qYXZhCmluZGV4IDE4ODg3NDcuLjA3ZTU0YzEgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L0phdmFDb3JlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlw
c2UvamR0L2NvcmUvSmF2YUNvcmUuamF2YQpAQCAtMTQ5Myw5ICsxNDkzLDcgQEAKIAkgKiAgICB3
aXRoaW4gdGhlIGFubm90YXRlZCBlbGVtZW50IHdpbGwgYmUgdHJlYXRlZCBhcyBpZiB0aGV5IHdl
cmUgc3BlY2lmaWVkIHdpdGggdGhlIG5vbi1udWxsIGFubm90YXRpb24KIAkgKiAgICAoc2VlIHtA
bGluayAjQ09NUElMRVJfTk9OTlVMTF9BTk5PVEFUSU9OX05BTUV9KS48L3A+CiAJICogPHA+SWYg
dGhlIGFubm90YXRpb24gaXMgYXBwbGllZCB3aXRoIHRoZSBjb25zdGFudCA8Y29kZT5mYWxzZTwv
Y29kZT4gYXMgaXRzIGFyZ3VtZW50Ci0JICogICAgYWxsIGNvcnJlc3BvbmRpbmcgZGVmYXVsdHMg
YXQgb3V0ZXIgc2NvcGVzIHdpbGwgYmUgY2FuY2VsZWQgZm9yIHRoZSBhbm5vdGF0ZWQgZWxlbWVu
dC4KLQkgKiAgICBUaGlzIGluY2x1ZGVzIGRlZmF1bHRzIHNwZWNpZmllZCB1c2luZyB0aGlzIGFu
bm90YXRpb24gdHlwZSBvciBhIGRlZmF1bHQgZGVmaW5lZCB1c2luZwotCSAqICAgIHRoZSBjb21w
aWxlciBvcHRpb24ge0BsaW5rICNDT01QSUxFUl9OT05OVUxMX0lTX0RFRkFVTFR9LjwvcD4KKwkg
KiAgICBhbGwgY29ycmVzcG9uZGluZyBkZWZhdWx0cyBhdCBvdXRlciBzY29wZXMgd2lsbCBiZSBj
YW5jZWxlZCBmb3IgdGhlIGFubm90YXRlZCBlbGVtZW50LjwvcD4KIAkgKiA8cD5UaGlzIG9wdGlv
biBvbmx5IGhhcyBhbiBlZmZlY3QgaWYgdGhlIG9wdGlvbiB7QGxpbmsgI0NPTVBJTEVSX0FOTk9U
QVRJT05fTlVMTF9BTkFMWVNJU30gaXMgZW5hYmxlZC48L3A+CiAJICogPGRsPgogCSAqIDxkdD5P
cHRpb24gaWQ6PC9kdD48ZGQ+PGNvZGU+Im9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLmFu
bm90YXRpb24ubm9ubnVsbGJ5ZGVmYXVsdCI8L2NvZGU+PC9kZD4KQEAgLTE1MDgsMTkgKzE1MDYs
MjIgQEAKIAkgKi8KIAlwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBDT01QSUxFUl9OT05OVUxM
X0JZX0RFRkFVTFRfQU5OT1RBVElPTl9OQU1FID0gUExVR0lOX0lEICsgIi5jb21waWxlci5hbm5v
dGF0aW9uLm5vbm51bGxieWRlZmF1bHQiOyAvLyROT04tTkxTLTEkCiAJLyoqCi0JICogQ29tcGls
ZXIgb3B0aW9uIElEOiBHbG9iYWxseSBzcGVjaWZ5IG5vbi1udWxsIGFzIHRoZSBhc3N1bWVkIGRl
ZmF1bHQgZm9yIHVuYW5ub3RhdGVkIHR5cGVzLgotCSAqIDxwPldoZW4gZW5hYmxlZCwgdGhpcyBv
cHRpb24gZ2xvYmFsbHkgYWNoaWV2ZXMgdGhlIHNhbWUgZWZmZWN0IAotCSAqICAgIGFzIHNwZWNp
Znlpbmcge0BsaW5rICNDT01QSUxFUl9OT05OVUxMX0FOTk9UQVRJT05fTkFNRX0gZG9lcyBmb3Ig
aW5kaXZpZHVhbCBlbGVtZW50cy48L3A+CisJICogQ29tcGlsZXIgb3B0aW9uIElEOiBSZXBvcnRp
bmcgbWlzc2luZyBkZWZhdWx0IG51bGxuZXNzIGFubm90YXRpb24uCisJICogPHA+V2hlbiBlbmFi
bGVkLCB0aGUgY29tcGlsZXIgd2lsbCBpc3N1ZSBhbiBlcnJvciBvciBhIHdhcm5pbmcgaW4gdGhl
IGZvbGxvd2luZyBjYXNlczo8L3A+CisJICogPHVsPgorCSAqIDxsaT4gV2hlbiBhIHBhY2thZ2Ut
aW5mby5qYXZhIGRvZXMgbm90IGNvbnRhaW4gYSBkZWZhdWx0IG51bGxuZXNzIGFubm90YXRpb24u
PC9saT4KKwkgKiA8bGk+IFdoZW4gYSB0eXBlIGluc2lkZSBhIGRlZmF1bHQgcGFja2FnZSBkb2Vz
IG5vdCBjb250YWluIGEgZGVmYXVsdCBudWxsbmVzcyBhbm5vdGF0aW9uLjwvbGk+CisJICogPC91
bD4KIAkgKiA8cD5UaGlzIG9wdGlvbiBvbmx5IGhhcyBhbiBlZmZlY3QgaWYgdGhlIG9wdGlvbiB7
QGxpbmsgI0NPTVBJTEVSX0FOTk9UQVRJT05fTlVMTF9BTkFMWVNJU30gaXMgZW5hYmxlZC48L3A+
CiAJICogPGRsPgotCSAqIDxkdD5PcHRpb24gaWQ6PC9kdD48ZGQ+PGNvZGU+Im9yZy5lY2xpcHNl
LmpkdC5jb3JlLmNvbXBpbGVyLmFubm90YXRpb24ubm9ubnVsbGlzZGVmYXVsdCI8L2NvZGU+PC9k
ZD4KLQkgKiA8ZHQ+UG9zc2libGUgdmFsdWVzOjwvZHQ+PGRkPjxjb2RlPnsgImRpc2FibGVkIiwg
ImVuYWJsZWQiIH08L2NvZGU+LjwvZGQ+Ci0JICogPGR0PkRlZmF1bHQ6PC9kdD48ZGQ+PGNvZGU+
ImRpc2FibGVkIjwvY29kZT48L2RkPgorCSAqIDxkdD5PcHRpb24gaWQ6PC9kdD48ZGQ+PGNvZGU+
Im9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLmFubm90YXRpb24ubWlzc2luZ05vbk51bGxC
eURlZmF1bHRBbm5vdGF0aW9uIjwvY29kZT48L2RkPgorCSAqIDxkdD5Qb3NzaWJsZSB2YWx1ZXM6
PC9kdD48ZGQ+PGNvZGU+eyAiZXJyb3IiLCAid2FybmluZyIsICJpZ25vcmUiIH08L2NvZGU+Ljwv
ZGQ+CisJICogPGR0PkRlZmF1bHQ6PC9kdD48ZGQ+PGNvZGU+Imlnbm9yZSI8L2NvZGU+PC9kZD4K
IAkgKiA8L2RsPgogCSAqIEBzaW5jZSAzLjgKIAkgKiBAY2F0ZWdvcnkgQ29tcGlsZXJPcHRpb25J
RAogCSAqLwotCXB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIENPTVBJTEVSX05PTk5VTExfSVNf
REVGQVVMVCA9IFBMVUdJTl9JRCArICIuY29tcGlsZXIuYW5ub3RhdGlvbi5ub25udWxsaXNkZWZh
dWx0IjsgLy8kTk9OLU5MUy0xJAorCXB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIENPTVBJTEVS
X1BCX01JU1NJTkdfTk9OTlVMTF9CWV9ERUZBVUxUX0FOTk9UQVRJT04gPSBQTFVHSU5fSUQgKyAi
LmNvbXBpbGVyLmFubm90YXRpb24ubWlzc2luZ05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uIjsg
Ly8kTk9OLU5MUy0xJAogCS8qKgogCSAqIENvbXBpbGVyIG9wdGlvbiBJRDogUmVwb3J0aW5nIFZp
b2xhdGlvbnMgb2YgTnVsbCBTcGVjaWZpY2F0aW9ucy4KIAkgKiA8cD5EZXBlbmRpbmcgb24gdGhp
cyBvcHRpb24sIHRoZSBjb21waWxlciB3aWxsIGlzc3VlIGVpdGhlciBhbiBlcnJvciBvciBhIHdh
cm5pbmcKQEAgLTE2MjIsOCArMTYyMyw3IEBACiAJICogPHA+V2hlbiBlbmFibGVkLCB0aGUgY29t
cGlsZXIgd2lsbCBpc3N1ZSBhbiBlcnJvciBvciBhIHdhcm5pbmcgd2hlbiBhIG5vbi1udWxsIGFu
bm90YXRpb24KIAkgKiAgICAoc2VlIHtAbGluayAjQ09NUElMRVJfTk9OTlVMTF9BTk5PVEFUSU9O
X05BTUV9KQogCSAqICAgIGlzIGFwcGxpZWQgYWx0aG91Z2ggdGhlIHNhbWUgZWZmZWN0IGlzIGFs
cmVhZHkgYWNoaWV2ZWQgYnkgYSBkZWZhdWx0IGFwcGxpY2FibGUgYXQgdGhlCi0JICogICAgY3Vy
cmVudCBsb2NhdGlvbi4gU3VjaCBhIGRlZmF1bHQgbWF5IGJlIHNldCBieSBlbmFibGluZyB0aGUg
b3B0aW9uCi0JICogICAge0BsaW5rICNDT01QSUxFUl9OT05OVUxMX0lTX0RFRkFVTFR9IG9yIGJ5
IHVzaW5nIHRoZSBhbm5vdGF0aW9uIHNwZWNpZmllZCBieSB0aGUgb3B0aW9uCisJICogICAgY3Vy
cmVudCBsb2NhdGlvbi4gU3VjaCBhIGRlZmF1bHQgbWF5IGJlIHNldCBieSB1c2luZyB0aGUgYW5u
b3RhdGlvbiBzcGVjaWZpZWQgYnkgdGhlIG9wdGlvbgogCSAqICAgIHtAbGluayAjQ09NUElMRVJf
Tk9OTlVMTF9CWV9ERUZBVUxUX0FOTk9UQVRJT05fTkFNRX0uCiAJICogPC9wPgogCSAqIDxwPlRo
aXMgb3B0aW9uIG9ubHkgaGFzIGFuIGVmZmVjdCBpZiB0aGUgb3B0aW9uIHtAbGluayAjQ09NUElM
RVJfQU5OT1RBVElPTl9OVUxMX0FOQUxZU0lTfSBpcyBlbmFibGVkLjwvcD4=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>211472</attachid>
            <date>2012-02-23 03:58:00 -0500</date>
            <delta_ts>2012-03-02 04:36:41 -0500</delta_ts>
            <desc>proposed fix v1.0 + regression tests</desc>
            <filename>Fixed-bug-372012-compilernull-Warn-when-defaults-not.patch</filename>
            <type>text/plain</type>
            <size>40209</size>
            <attacher name="Ayushman Jain">amj87.iitr</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0JhdGNoQ29tcGlsZXJU
ZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2Vj
bGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9CYXRjaENvbXBpbGVyVGVz
dC5qYXZhCmluZGV4IDI3MTRlNjkuLmViODFlZWIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21w
aWxlci9yZWdyZXNzaW9uL0JhdGNoQ29tcGlsZXJUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Nv
bXBpbGVyL3JlZ3Jlc3Npb24vQmF0Y2hDb21waWxlclRlc3QuamF2YQpAQCAtNzksNyArNzksNyBA
QAogCQkJIn1cbiI7CiAKIAlzdGF0aWMgewotLy8JCVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1td
IHsgInRlc3QzMSIgfTsKKy8vCQlURVNUU19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7ICJ0ZXN0MzE1
X3dhcm5fb3B0aW9ucyIgfTsKIC8vCQlURVNUU19OVU1CRVJTID0gbmV3IGludFtdIHsgMzA2IH07
CiAvLwkJVEVTVFNfUkFOR0UgPSBuZXcgaW50W10geyAyOTgsIC0xIH07CiAJfQpAQCAtMTY0MSw5
ICsxNjQxLDggQEAKICAgICAgICAgIiAgICAtZW5hYmxlSmF2YWRvYyAgICAgY29uc2lkZXIgcmVm
ZXJlbmNlcyBpbiBqYXZhZG9jXG4iICsKICAgICAgICAgIiAgICAtWGVtYWNzICAgICAgICAgICAg
dXNlZCB0byBlbmFibGUgZW1hY3Mtc3R5bGUgb3V0cHV0IGluIHRoZSBjb25zb2xlLlxuIiArCiAg
ICAgICAgICIgICAgICAgICAgICAgICAgICAgICAgIEl0IGRvZXMgbm90IGFmZmVjdCB0aGUgeG1s
IGxvZyBvdXRwdXRcbiIgKwotICAgICAgICAiICAgIC1ub25OdWxsQnlEZWZhdWx0ICBmb3IgYW5u
b3RhdGlvbiBiYXNlZCBudWxsIGFuYWx5c2lzIGFzc3VtZSBub25udWxsXG4iICsgCi0gICAgICAg
ICIgICAgICAgICAgICAgICAgICAgICAgIGFzIHRoZSBnbG9iYWwgZGVmYXVsdFxuIiArIAotICAg
ICAgICAiIFxuIiArCisgICAgICAgICIgICAgLW1pc3NpbmdEZWZhdWx0QW5ub3QgIHJlcG9ydCBt
aXNzaW5nIGRlZmF1bHQgbnVsbG5lc3MgYW5ub3RhdGlvblxuIiArIAorICAgICAgICAiIFxuIiAr
IAogICAgICAgICAiICAgIC0/IC1oZWxwICAgICAgICAgICBwcmludCB0aGlzIGhlbHAgbWVzc2Fn
ZVxuIiArCiAgICAgICAgICIgICAgLXYgLXZlcnNpb24gICAgICAgIHByaW50IGNvbXBpbGVyIHZl
cnNpb25cbiIgKwogICAgICAgICAiICAgIC1zaG93dmVyc2lvbiAgICAgICBwcmludCBjb21waWxl
ciB2ZXJzaW9uIGFuZCBjb250aW51ZVxuIiArCkBAIC0xODMyLDkgKzE4MzEsOSBAQAogCQkJIgkJ
PGFyZ3VtZW50IHZhbHVlPVwiLS0tT1VUUFVUX0RJUl9QTEFDRUhPTERFUi0tLVwiLz5cbiIgKyAK
IAkJCSIJPC9jb21tYW5kX2xpbmU+XG4iICsgCiAJCQkiCTxvcHRpb25zPlxuIiArIAorCQkJIgkJ
PG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5hbm5vdGF0aW9uLm1p
c3NpbmdOb25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvblwiIHZhbHVlPVwiaWdub3JlXCIvPlxuIiAr
IAogCQkJIgkJPG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5hbm5v
dGF0aW9uLm5vbm51bGxcIiB2YWx1ZT1cIm9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uLk5vbk51
bGxcIi8+XG4iICsgCiAJCQkiCQk8b3B0aW9uIGtleT1cIm9yZy5lY2xpcHNlLmpkdC5jb3JlLmNv
bXBpbGVyLmFubm90YXRpb24ubm9ubnVsbGJ5ZGVmYXVsdFwiIHZhbHVlPVwib3JnLmVjbGlwc2Uu
amR0LmFubm90YXRpb24uTm9uTnVsbEJ5RGVmYXVsdFwiLz5cbiIgKyAKLQkJCSIJCTxvcHRpb24g
a2V5PVwib3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuYW5ub3RhdGlvbi5ub25udWxsaXNk
ZWZhdWx0XCIgdmFsdWU9XCJkaXNhYmxlZFwiLz5cbiIgKyAKIAkJCSIJCTxvcHRpb24ga2V5PVwi
b3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuYW5ub3RhdGlvbi5udWxsYWJsZVwiIHZhbHVl
PVwib3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTnVsbGFibGVcIi8+XG4iICsgCiAJCQkiCQk8
b3B0aW9uIGtleT1cIm9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLmFubm90YXRpb24ubnVs
bGFuYWx5c2lzXCIgdmFsdWU9XCJkaXNhYmxlZFwiLz5cbiIgKyAKIAkJCSIJCTxvcHRpb24ga2V5
PVwib3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuY29kZWdlbi5pbmxpbmVKc3JCeXRlY29k
ZVwiIHZhbHVlPVwiZGlzYWJsZWRcIi8+XG4iICsgCkBAIC0xMjU4NywzMSArMTI1ODYsMjggQEAK
IH0KIAogLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTMy
NTM0MgotLy8gLXdhcm4gb3B0aW9uIC0gcmVncmVzc2lvbiB0ZXN0cyB0byBjaGVjayBvcHRpb24g
bnVsbEFubm90Ci0vLyBOdWxsIHdhcm5pbmdzIGJlY2F1c2Ugb2YgYW5ub3RhdGlvbnMsIGdsb2Jh
bCBub25OdWxsQnlEZWZhdWx0Ci0vLyBESVNBQkxFRCBkdWUgdG8gZHlzZnVuY3Rpb25hbCBnbG9i
YWwgZGVmYXVsdCBhZnRlciBCdWcgMzY2MDYzIC0gQ29tcGlsZXIgc2hvdWxkIG5vdCBhZGQgc3lu
dGhldGljIEBOb25OdWxsIGFubm90YXRpb25zCi1wdWJsaWMgdm9pZCBfdGVzdDMxNV93YXJuX29w
dGlvbnMoKSB7CisvLyAtd2FybiBvcHRpb24gLSByZWdyZXNzaW9uIHRlc3RzIHRvIGNoZWNrIG9w
dGlvbiBudWxsQW5ub3QgYW5kIG1pc3NpbmdEZWZhdWx0QW5ub3QKKy8vIGh0dHBzOi8vYnVncy5l
Y2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNzIwMTIKK3B1YmxpYyB2b2lkIHRlc3Qz
MTVfd2Fybl9vcHRpb25zKCkgewogCXRoaXMucnVuQ29uZm9ybVRlc3QoCiAJCW5ldyBTdHJpbmdb
XSB7CisJCQkJInAvcGFja2FnZS1pbmZvLmphdmEiLAorCQkJCSJAb3JnLmVjbGlwc2UuamR0LmFu
bm90YXRpb24uTm9uTnVsbEJ5RGVmYXVsdFxuIiArCisJCQkJInBhY2thZ2UgcDtcbiIsCiAJCQkJ
InAvWC5qYXZhIiwKIAkJCQkicGFja2FnZSBwO1xuIiArCi0JCQkJImltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuYW5ub3RhdGlvbi4qO1xuIiArCi0JCQkJIkBTdXBwcmVzc1dhcm5pbmdzKFwidW51c2Vk
XCIpXG4iICsKIAkJCQkicHVibGljIGNsYXNzIFgge1xuIiArCi0JCQkJIiAgT2JqZWN0IGZvbyhA
TnVsbGFibGUgT2JqZWN0IG8sIE9iamVjdCBvMikge1xuIiArCi0JCQkJIiAgICBpZiAoby50b1N0
cmluZygpID09IFwiXCIpeyByZXR1cm4gbnVsbDt9XG4iICsKLQkJCQkiICAgIGlmIChvMiA9PSBu
dWxsKSB7fVxuIiArCi0JCQkJIiAgICBnb28obnVsbCkudG9TdHJpbmcoKTtcbiIgKwotCQkJCSIJ
IHJldHVybiBudWxsO1xuIiArCi0JCQkJIiAgfVxuIiArCi0JCQkJIiAgQE51bGxhYmxlIE9iamVj
dCBnb28oT2JqZWN0IG8yKSB7XG4iICsKLQkJCQkiICAgIHJldHVybiBuZXcgT2JqZWN0KCk7XG4i
ICsKLQkJCQkiICB9XG4iICsKLQkJCQkiICBATm9uTnVsbEJ5RGVmYXVsdCBPYmplY3QgaG9vKE9i
amVjdCBvMikge1xuIiArIC8vIHJlZHVuZGFudAotCQkJCSIgICAgaWYgKG8yID09IG51bGwpXG4i
ICsKLQkJCQkiCSAgICByZXR1cm4gbnVsbDtcbiIgKwotCQkJCSIgICAgcmV0dXJuIHRoaXM7XG4i
ICsKLQkJCQkiICB9XG4iICsKKwkJCQkifVxuIiwKKwkJCQkicDEvWDEuamF2YSIsCisJCQkJInBh
Y2thZ2UgcDE7XG4iICsKKwkJCQkicHVibGljIGNsYXNzIFgxIHtcbiIgKworCQkJCSJ9XG4iLAor
CQkJCSJwMS9YMWEuamF2YSIsCisJCQkJInBhY2thZ2UgcDE7XG4iICsKKwkJCQkicHVibGljIGNs
YXNzIFgxYSB7XG4iICsKKwkJCQkifVxuIiwKKwkJCQkiRGVmYXVsdDEuamF2YSIsCisJCQkJInB1
YmxpYyBjbGFzcyBEZWZhdWx0MSB7XG4iICsKIAkJCQkifVxuIiwKIAkJCQkib3JnL2VjbGlwc2Uv
amR0L2Fubm90YXRpb24vTm9uTnVsbC5qYXZhIiwKIAkJCQlOT05OVUxMX0FOTk9UQVRJT05fQ09O
VEVOVCwKQEAgLTEyNjIzLDUwICsxMjYxOSw4NCBAQAogCQkiXCIiICsgT1VUUFVUX0RJUiArICBG
aWxlLnNlcGFyYXRvciArICJwIiArIEZpbGUuc2VwYXJhdG9yICsgIlguamF2YVwiIgogCQkrICIg
LXNvdXJjZXBhdGggXCIiICsgT1VUUFVUX0RJUiArICJcIiIKIAkJKyAiIC0xLjUiCi0JCSsgIiAt
d2FybjorbnVsbEFubm90IC13YXJuOitudWxsIC1ub25OdWxsQnlEZWZhdWx0IC1wcm9jOm5vbmUg
LWQgXCIiICsgT1VUUFVUX0RJUiArICJcIiIsCisJCSsgIiAtd2FybjorbnVsbEFubm90IC13YXJu
OitudWxsIC1taXNzaW5nRGVmYXVsdEFubm90IC1wcm9jOm5vbmUgLWQgXCIiICsgT1VUUFVUX0RJ
UiArICJcIiIsCisJCSIiLAorCQkiIiwKKwkJdHJ1ZSk7Cit9CisKKy8vIGh0dHBzOi8vYnVncy5l
Y2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zMjUzNDIKKy8vIC13YXJuIG9wdGlvbiAt
IHJlZ3Jlc3Npb24gdGVzdHMgdG8gY2hlY2sgb3B0aW9uIG51bGxBbm5vdCBhbmQgbWlzc2luZ0Rl
ZmF1bHRBbm5vdAorLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dp
P2lkPTM3MjAxMgorcHVibGljIHZvaWQgdGVzdDMxNV93YXJuX29wdGlvbnNfYSgpIHsKKwl0aGlz
LnJ1bk5lZ2F0aXZlVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCQkicDEvWDEuamF2YSIsCisJ
CQkJInBhY2thZ2UgcDE7XG4iICsKKwkJCQkicHVibGljIGNsYXNzIFgxIHtcbiIgKworCQkJCSIJ
Wm9yaztcbiIgKworCQkJCSJ9XG4iLAorCQkJCSJvcmcvZWNsaXBzZS9qZHQvYW5ub3RhdGlvbi9O
b25OdWxsLmphdmEiLAorCQkJCU5PTk5VTExfQU5OT1RBVElPTl9DT05URU5ULAorCQkJCSJvcmcv
ZWNsaXBzZS9qZHQvYW5ub3RhdGlvbi9OdWxsYWJsZS5qYXZhIiwKKwkJCQlOVUxMQUJMRV9BTk5P
VEFUSU9OX0NPTlRFTlQsCisJCQkJIm9yZy9lY2xpcHNlL2pkdC9hbm5vdGF0aW9uL05vbk51bGxC
eURlZmF1bHQuamF2YSIsCQkJCQorCQkJCU5PTk5VTExfQllfREVGQVVMVF9BTk5PVEFUSU9OX0NP
TlRFTlQKKwkJfSwKKwkJIlwiIiArIE9VVFBVVF9ESVIgKyAgRmlsZS5zZXBhcmF0b3IgKyAicDEi
ICsgRmlsZS5zZXBhcmF0b3IgKyAiWDEuamF2YVwiIgorCQkrICIgLXNvdXJjZXBhdGggXCIiICsg
T1VUUFVUX0RJUiArICJcIiIKKwkJKyAiIC0xLjUiCisJCSsgIiAtd2FybjorbnVsbEFubm90IC13
YXJuOitudWxsIC1taXNzaW5nRGVmYXVsdEFubm90IC1wcm9jOm5vbmUgLWQgXCIiICsgT1VUUFVU
X0RJUiArICJcIiIsCiAJCSIiLAogCQkiLS0tLS0tLS0tLVxuIiArIAotCQkiMS4gV0FSTklORyBp
biAtLS1PVVRQVVRfRElSX1BMQUNFSE9MREVSLS0tL3AvWC5qYXZhIChhdCBsaW5lIDYpXG4iICsg
Ci0JCSIJaWYgKG8udG9TdHJpbmcoKSA9PSBcIlwiKXsgcmV0dXJuIG51bGw7fVxuIiArIAotCQki
CSAgICBeXG4iICsgCi0JCSJQb3RlbnRpYWwgbnVsbCBwb2ludGVyIGFjY2VzczogVGhlIHZhcmlh
YmxlIG8gbWF5IGJlIG51bGwgYXQgdGhpcyBsb2NhdGlvblxuIiArIAorCQkiMS4gV0FSTklORyBp
biAtLS1PVVRQVVRfRElSX1BMQUNFSE9MREVSLS0tL3AxL1gxLmphdmEgKGF0IGxpbmUgMSlcbiIg
KyAKKwkJIglwYWNrYWdlIHAxO1xuIiArIAorCQkiCSAgICAgICAgXl5cbiIgKyAKKwkJIkEgZGVm
YXVsdCBudWxsbmVzcyBhbm5vdGF0aW9uIGhhcyBub3QgYmVlbiBzcGVjaWZpZWQgZm9yIHRoZSBw
YWNrYWdlIHAxXG4iICsgCiAJCSItLS0tLS0tLS0tXG4iICsgCi0JCSIyLiBXQVJOSU5HIGluIC0t
LU9VVFBVVF9ESVJfUExBQ0VIT0xERVItLS0vcC9YLmphdmEgKGF0IGxpbmUgNilcbiIgKyAKLQkJ
IglpZiAoby50b1N0cmluZygpID09IFwiXCIpeyByZXR1cm4gbnVsbDt9XG4iICsgCi0JCSIJICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXG4iICsgCi0JCSJUeXBlIG1pc21hdGNo
OiByZXF1aXJlZCBcJ0BOb25OdWxsIE9iamVjdFwnIGJ1dCB0aGUgcHJvdmlkZWQgdmFsdWUgaXMg
bnVsbFxuIiArIAorCQkiMi4gRVJST1IgaW4gLS0tT1VUUFVUX0RJUl9QTEFDRUhPTERFUi0tLS9w
MS9YMS5qYXZhIChhdCBsaW5lIDMpXG4iICsgCisJCSIJWm9yaztcbiIgKyAKKwkJIgleXl5eXG4i
ICsgCisJCSJTeW50YXggZXJyb3Igb24gdG9rZW4gXCJab3JrXCIsIFZhcmlhYmxlRGVjbGFyYXRv
ciBleHBlY3RlZCBhZnRlciB0aGlzIHRva2VuXG4iICsgCiAJCSItLS0tLS0tLS0tXG4iICsgCi0J
CSIzLiBXQVJOSU5HIGluIC0tLU9VVFBVVF9ESVJfUExBQ0VIT0xERVItLS0vcC9YLmphdmEgKGF0
IGxpbmUgNylcbiIgKyAKLQkJIglpZiAobzIgPT0gbnVsbCkge31cbiIgKyAKLQkJIgkgICAgXl5c
biIgKyAKLQkJIk51bGwgY29tcGFyaXNvbiBhbHdheXMgeWllbGRzIGZhbHNlOiBUaGUgdmFyaWFi
bGUgbzIgY2Fubm90IGJlIG51bGwgYXQgdGhpcyBsb2NhdGlvblxuIiArIAorCQkiMiBwcm9ibGVt
cyAoMSBlcnJvciwgMSB3YXJuaW5nKSIsIAorCQl0cnVlKTsKK30KKworLy8gaHR0cHM6Ly9idWdz
LmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTMyNTM0MgorLy8gLXdhcm4gb3B0aW9u
IC0gcmVncmVzc2lvbiB0ZXN0cyB0byBjaGVjayBvcHRpb24gbnVsbEFubm90IGFuZCBtaXNzaW5n
RGVmYXVsdEFubm90CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5j
Z2k/aWQ9MzcyMDEyCitwdWJsaWMgdm9pZCB0ZXN0MzE1X3dhcm5fb3B0aW9uc19iKCkgeworCXRo
aXMucnVuTmVnYXRpdmVUZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJCSJYMS5qYXZhIiwKKwkJ
CQkicHVibGljIGNsYXNzIFgxIHtcbiIgKworCQkJCSIJWm9yaztcbiIgKworCQkJCSJ9XG4iLAor
CQkJCSJvcmcvZWNsaXBzZS9qZHQvYW5ub3RhdGlvbi9Ob25OdWxsLmphdmEiLAorCQkJCU5PTk5V
TExfQU5OT1RBVElPTl9DT05URU5ULAorCQkJCSJvcmcvZWNsaXBzZS9qZHQvYW5ub3RhdGlvbi9O
dWxsYWJsZS5qYXZhIiwKKwkJCQlOVUxMQUJMRV9BTk5PVEFUSU9OX0NPTlRFTlQsCisJCQkJIm9y
Zy9lY2xpcHNlL2pkdC9hbm5vdGF0aW9uL05vbk51bGxCeURlZmF1bHQuamF2YSIsCQkJCQorCQkJ
CU5PTk5VTExfQllfREVGQVVMVF9BTk5PVEFUSU9OX0NPTlRFTlQKKwkJfSwKKwkJIlwiIiArIE9V
VFBVVF9ESVIgKyAgRmlsZS5zZXBhcmF0b3IgKyAiWDEuamF2YVwiIgorCQkrICIgLXNvdXJjZXBh
dGggXCIiICsgT1VUUFVUX0RJUiArICJcIiIKKwkJKyAiIC0xLjUiCisJCSsgIiAtd2FybjorbnVs
bEFubm90IC13YXJuOitudWxsIC1taXNzaW5nRGVmYXVsdEFubm90IC1wcm9jOm5vbmUgLWQgXCIi
ICsgT1VUUFVUX0RJUiArICJcIiIsCisJCSIiLAogCQkiLS0tLS0tLS0tLVxuIiArIAotCQkiNC4g
V0FSTklORyBpbiAtLS1PVVRQVVRfRElSX1BMQUNFSE9MREVSLS0tL3AvWC5qYXZhIChhdCBsaW5l
IDgpXG4iICsgCi0JCSIJZ29vKG51bGwpLnRvU3RyaW5nKCk7XG4iICsgCi0JCSIJXl5eXl5eXl5e
XG4iICsgCi0JCSJQb3RlbnRpYWwgbnVsbCBwb2ludGVyIGFjY2VzczogVGhlIG1ldGhvZCBnb28o
T2JqZWN0KSBtYXkgcmV0dXJuIG51bGxcbiIgKyAKKwkJIjEuIFdBUk5JTkcgaW4gLS0tT1VUUFVU
X0RJUl9QTEFDRUhPTERFUi0tLS9YMS5qYXZhIChhdCBsaW5lIDEpXG4iICsgCisJCSIJcHVibGlj
IGNsYXNzIFgxIHtcbiIgKyAKKwkJIgkgICAgICAgICAgICAgXl5cbiIgKyAKKwkJIkEgZGVmYXVs
dCBudWxsbmVzcyBhbm5vdGF0aW9uIGhhcyBub3QgYmVlbiBzcGVjaWZpZWQgZm9yIHRoZSB0eXBl
IFgxXG4iICsgCiAJCSItLS0tLS0tLS0tXG4iICsgCi0JCSI1LiBXQVJOSU5HIGluIC0tLU9VVFBV
VF9ESVJfUExBQ0VIT0xERVItLS0vcC9YLmphdmEgKGF0IGxpbmUgOClcbiIgKyAKLQkJIglnb28o
bnVsbCkudG9TdHJpbmcoKTtcbiIgKyAKLQkJIgkgICAgXl5eXlxuIiArIAotCQkiVHlwZSBtaXNt
YXRjaDogcmVxdWlyZWQgXCdATm9uTnVsbCBPYmplY3RcJyBidXQgdGhlIHByb3ZpZGVkIHZhbHVl
IGlzIG51bGxcbiIgKyAKKwkJIjIuIEVSUk9SIGluIC0tLU9VVFBVVF9ESVJfUExBQ0VIT0xERVIt
LS0vWDEuamF2YSAoYXQgbGluZSAyKVxuIiArIAorCQkiCVpvcms7XG4iICsgCisJCSIJXl5eXlxu
IiArIAorCQkiU3ludGF4IGVycm9yIG9uIHRva2VuIFwiWm9ya1wiLCBWYXJpYWJsZURlY2xhcmF0
b3IgZXhwZWN0ZWQgYWZ0ZXIgdGhpcyB0b2tlblxuIiArIAogCQkiLS0tLS0tLS0tLVxuIiArIAot
CQkiNi4gV0FSTklORyBpbiAtLS1PVVRQVVRfRElSX1BMQUNFSE9MREVSLS0tL3AvWC5qYXZhIChh
dCBsaW5lIDkpXG4iICsgCi0JCSIJcmV0dXJuIG51bGw7XG4iICsgCi0JCSIJICAgICAgIF5eXl5c
biIgKyAKLQkJIlR5cGUgbWlzbWF0Y2g6IHJlcXVpcmVkIFwnQE5vbk51bGwgT2JqZWN0XCcgYnV0
IHRoZSBwcm92aWRlZCB2YWx1ZSBpcyBudWxsXG4iICsgCi0JCSItLS0tLS0tLS0tXG4iICsgCi0J
CSI3LiBXQVJOSU5HIGluIC0tLU9VVFBVVF9ESVJfUExBQ0VIT0xERVItLS0vcC9YLmphdmEgKGF0
IGxpbmUgMTQpXG4iICsgCi0JCSIJQE5vbk51bGxCeURlZmF1bHQgT2JqZWN0IGhvbyhPYmplY3Qg
bzIpIHtcbiIgKyAKLQkJIgleXl5eXl5eXl5eXl5eXl5eXlxuIiArIAotCQkiTnVsbG5lc3MgZGVm
YXVsdCBpcyByZWR1bmRhbnQgd2l0aCB0aGUgZ2xvYmFsIGRlZmF1bHRcbiIgKyAKLQkJIi0tLS0t
LS0tLS1cbiIgKyAKLQkJIjguIFdBUk5JTkcgaW4gLS0tT1VUUFVUX0RJUl9QTEFDRUhPTERFUi0t
LS9wL1guamF2YSAoYXQgbGluZSAxNSlcbiIgKyAKLQkJIglpZiAobzIgPT0gbnVsbClcbiIgKyAK
LQkJIgkgICAgXl5cbiIgKyAKLQkJIk51bGwgY29tcGFyaXNvbiBhbHdheXMgeWllbGRzIGZhbHNl
OiBUaGUgdmFyaWFibGUgbzIgY2Fubm90IGJlIG51bGwgYXQgdGhpcyBsb2NhdGlvblxuIiArIAot
CQkiLS0tLS0tLS0tLVxuIiArIAotCQkiOCBwcm9ibGVtcyAoOCB3YXJuaW5ncykiLCAKKwkJIjIg
cHJvYmxlbXMgKDEgZXJyb3IsIDEgd2FybmluZykiLCAKIAkJdHJ1ZSk7CiB9CiAKZGlmZiAtLWdp
dCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxBbm5vdGF0aW9uVGVzdC5qYXZh
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pk
dC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbEFubm90YXRpb25UZXN0LmphdmEK
aW5kZXggZWJkNWRmMC4uNzJjZmM1NiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUu
dGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3Jl
Z3Jlc3Npb24vTnVsbEFubm90YXRpb25UZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vTnVsbEFubm90YXRpb25UZXN0LmphdmEKQEAgLTUzLDcgKzUzLDcgQEAKIC8v
IFN0YXRpYyBpbml0aWFsaXplciB0byBzcGVjaWZ5IHRlc3RzIHN1YnNldCB1c2luZyBURVNUU18q
IHN0YXRpYyB2YXJpYWJsZXMKIC8vIEFsbCBzcGVjaWZpZWQgdGVzdHMgd2hpY2ggZG8gbm90IGJl
bG9uZyB0byB0aGUgY2xhc3MgYXJlIHNraXBwZWQuLi4KIHN0YXRpYyB7Ci0vLwkJVEVTVFNfTkFN
RVMgPSBuZXcgU3RyaW5nW10geyAidGVzdF9tZXNzYWdlX3NlbmRfaW5fY29udHJvbF9zdHJ1Y3R1
cmVfMDIiIH07CisvLwkJVEVTVFNfTkFNRVMgPSBuZXcgU3RyaW5nW10geyAidGVzdF9taXNzaW5n
X2RlZmF1bHRfYW5ub3RhdGlvbiIgfTsKIC8vCQlURVNUU19OVU1CRVJTID0gbmV3IGludFtdIHsg
NTYxIH07CiAvLwkJVEVTVFNfUkFOR0UgPSBuZXcgaW50W10geyAxLCAyMDQ5IH07CiB9CkBAIC0x
OTE0LDI5ICsxOTE0LDYgQEAKIAkJIi0tLS0tLS0tLS1cbiIsCiAJCUphdmFjVGVzdE9wdGlvbnMu
RXhjdXNlLkVjbGlwc2VXYXJuaW5nQ29uZmlndXJlZEFzRXJyb3IpOwogfQotLy8gdXNpbmcgbnVs
bG5lc3MgZGVmYXVsdGluZyB0byBub25udWxsLCBtaXNzaW5nIGFubm90YXRpb24gdHlwZXMsIG5v
IGxvbmdlciBhIHByb2JsZW0KLXB1YmxpYyB2b2lkIHRlc3RfYW5ub3RhdGlvbl9pbXBvcnRfMDA3
KCkgewotCU1hcCBjdXN0b21PcHRpb25zID0gZ2V0Q29tcGlsZXJPcHRpb25zKCk7Ci0JY3VzdG9t
T3B0aW9ucy5wdXQoSmF2YUNvcmUuQ09NUElMRVJfUEJfTlVMTF9TUEVDSUZJQ0FUSU9OX0lOU1VG
RklDSUVOVF9JTkZPLCBKYXZhQ29yZS5FUlJPUik7Ci0JY3VzdG9tT3B0aW9ucy5wdXQoSmF2YUNv
cmUuQ09NUElMRVJfTlVMTEFCTEVfQU5OT1RBVElPTl9OQU1FLCAib3JnLmZvby5NYXlCZU51bGwi
KTsKLQljdXN0b21PcHRpb25zLnB1dChKYXZhQ29yZS5DT01QSUxFUl9OT05OVUxMX0FOTk9UQVRJ
T05fTkFNRSwgIm9yZy5mb28uTXVzdE5vdEJlTnVsbCIpOwotCWN1c3RvbU9wdGlvbnMucHV0KEph
dmFDb3JlLkNPTVBJTEVSX05PTk5VTExfSVNfREVGQVVMVCwgSmF2YUNvcmUuRU5BQkxFRCk7Ci0J
cnVuQ29uZm9ybVRlc3RXaXRoTGlicygKLQkJbmV3IFN0cmluZ1tdIHsKLQkJCSJMaWIuamF2YSIs
Ci0JCQkicHVibGljIGNsYXNzIExpYiB7XG4iICsKLQkJCSIgICAgT2JqZWN0IGdldE9iamVjdCgp
IHsgcmV0dXJuIG5ldyBPYmplY3QoKTsgfVxuIiArCi0JCQkifVxuIiwKLQkJCSJYLmphdmEiLAot
CQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKwotCQkJIiAgICBPYmplY3QgZ2V0T2JqZWN0KExpYiBs
KSB7XG4iICsKLQkJCSIgICAgICAgIHJldHVybiBsLmdldE9iamVjdCgpO1xuIiArCi0JCQkiICAg
IH1cbiIgKwotCQkJIn1cbiIKLQkJfSwKLQkJY3VzdG9tT3B0aW9ucywKLQkJIiIpOwotfQogCiAv
LyBhIG51bGwgYW5ub3RhdGlvbiBpcyBpbGxlZ2FsbHkgdXNlZCBvbiBhIGNsYXNzOgogcHVibGlj
IHZvaWQgdGVzdF9pbGxlZ2FsX2Fubm90YXRpb25fMDAxKCkgewpAQCAtMjQwOSw3ICsyMzg2LDcg
QEAKIHB1YmxpYyB2b2lkIF90ZXN0X2RlZmF1bHRfbnVsbG5lc3NfMDA3KCkgewogCU1hcCBjdXN0
b21PcHRpb25zID0gZ2V0Q29tcGlsZXJPcHRpb25zKCk7CiAvLwljdXN0b21PcHRpb25zLnB1dChD
b21waWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydFBvdGVudGlhbE51bGxTcGVjVmlvbGF0aW9uLCBK
YXZhQ29yZS5FUlJPUik7Ci0JY3VzdG9tT3B0aW9ucy5wdXQoSmF2YUNvcmUuQ09NUElMRVJfTk9O
TlVMTF9JU19ERUZBVUxULCBKYXZhQ29yZS5FTkFCTEVEKTsKKy8vCWN1c3RvbU9wdGlvbnMucHV0
KEphdmFDb3JlLkNPTVBJTEVSX05PTk5VTExfSVNfREVGQVVMVCwgSmF2YUNvcmUuRU5BQkxFRCk7
CiAJcnVuTmVnYXRpdmVUZXN0V2l0aExpYnMoCiAJCW5ldyBTdHJpbmdbXSB7CiAJCQkiWC5qYXZh
IiwKQEAgLTI4NjAsNDggKzI4MzcsMTEwIEBACiAJCSItLS0tLS0tLS0tXG4iKTsKIH0KIAotLy8g
cmVkdW5kYW50IGRlZmF1bHQgYW5ub3RhdGlvbnMgLSBwYWNrYWdlIC8gY2xhc3MgLyBtZXRob2Qg
dnMgZ2xvYmFsIGRlZmF1bHQKLS8vIERJU0FCTEVEIGR1ZSB0byBkeXNmdW5jdGlvbmFsIGdsb2Jh
bCBkZWZhdWx0IGFmdGVyIEJ1ZyAzNjYwNjMgLSBDb21waWxlciBzaG91bGQgbm90IGFkZCBzeW50
aGV0aWMgQE5vbk51bGwgYW5ub3RhdGlvbnMKLXB1YmxpYyB2b2lkIF90ZXN0X3JlZHVuZGFudF9h
bm5vdGF0aW9uXzAzKCkgeworLy8gdGVzdCBtaXNzaW5nIGRlZmF1bHQgbnVsbG5lc3MgYW5ub3Rh
dGlvbiBmb3IgdHlwZXMgaW4gZGVmYXVsdCBwYWNrYWdlCitwdWJsaWMgdm9pZCB0ZXN0X21pc3Np
bmdfZGVmYXVsdF9hbm5vdGF0aW9uXzAxKCkgewogCU1hcCBjdXN0b21PcHRpb25zID0gZ2V0Q29t
cGlsZXJPcHRpb25zKCk7Ci0JY3VzdG9tT3B0aW9ucy5wdXQoSmF2YUNvcmUuQ09NUElMRVJfTk9O
TlVMTF9JU19ERUZBVUxULCBKYXZhQ29yZS5FTkFCTEVEKTsKLQlydW5Db25mb3JtVGVzdFdpdGhM
aWJzKAorCWN1c3RvbU9wdGlvbnMucHV0KEphdmFDb3JlLkNPTVBJTEVSX1BCX01JU1NJTkdfTk9O
TlVMTF9CWV9ERUZBVUxUX0FOTk9UQVRJT04sIEphdmFDb3JlLkVSUk9SKTsKKwlydW5OZWdhdGl2
ZVRlc3RXaXRoTGlicygKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJMaWIuamF2YSIsCisJCQkicHVi
bGljIGNsYXNzIExpYiB7XG4iICsKKwkJCSIgICAgT2JqZWN0IGdldE9iamVjdCgpIHsgcmV0dXJu
IG5ldyBPYmplY3QoKTsgfVxuIiArCisJCQkifVxuIiwKKwkJCSJYLmphdmEiLAorCQkJInB1Ymxp
YyBjbGFzcyBYIHtcbiIgKworCQkJIgkgY2xhc3MgWElubmVye31cbiIgKyAgLy8gZG9uJ3Qgd2Fy
biBmb3IgaW5uZXIgdHlwZXMKKwkJCSIgICAgT2JqZWN0IGdldE9iamVjdChMaWIgbCkge1xuIiAr
CisJCQkiICAgICAgICByZXR1cm4gbC5nZXRPYmplY3QoKTtcbiIgKworCQkJIiAgICB9XG4iICsK
KwkJCSJ9XG4iCisJCX0sCisJCWN1c3RvbU9wdGlvbnMsCisJCSItLS0tLS0tLS0tXG4iICsgCisJ
CSIxLiBFUlJPUiBpbiBMaWIuamF2YSAoYXQgbGluZSAxKVxuIiArIAorCQkiCXB1YmxpYyBjbGFz
cyBMaWIge1xuIiArIAorCQkiCSAgICAgICAgICAgICBeXl5cbiIgKyAKKwkJIkEgZGVmYXVsdCBu
dWxsbmVzcyBhbm5vdGF0aW9uIGhhcyBub3QgYmVlbiBzcGVjaWZpZWQgZm9yIHRoZSB0eXBlIExp
YlxuIiArIAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiMS4g
RVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDEpXG4iICsgCisJCSIJcHVibGljIGNsYXNzIFgge1xu
IiArIAorCQkiCSAgICAgICAgICAgICBeXG4iICsgCisJCSJBIGRlZmF1bHQgbnVsbG5lc3MgYW5u
b3RhdGlvbiBoYXMgbm90IGJlZW4gc3BlY2lmaWVkIGZvciB0aGUgdHlwZSBYXG4iICsgCisJCSIt
LS0tLS0tLS0tXG4iKTsKK30KKworLy8gdGVzdCBtaXNzaW5nIGRlZmF1bHQgbnVsbG5lc3MgYW5u
b3RhdGlvbiBmb3IgYSBwYWNrYWdlIHdpdGggcGFja2FnZS1pbmZvCitwdWJsaWMgdm9pZCB0ZXN0
X21pc3NpbmdfZGVmYXVsdF9hbm5vdGF0aW9uXzAyKCkgeworCU1hcCBjdXN0b21PcHRpb25zID0g
Z2V0Q29tcGlsZXJPcHRpb25zKCk7CisJY3VzdG9tT3B0aW9ucy5wdXQoSmF2YUNvcmUuQ09NUElM
RVJfUEJfTUlTU0lOR19OT05OVUxMX0JZX0RFRkFVTFRfQU5OT1RBVElPTiwgSmF2YUNvcmUuRVJS
T1IpOworCXJ1bk5lZ2F0aXZlVGVzdFdpdGhMaWJzKAorCQluZXcgU3RyaW5nW10geworCQkJInAy
L3BhY2thZ2UtaW5mby5qYXZhIiwKKwkJCSJwYWNrYWdlIHAyO1xuIiwKKwkJCSJwMi9ZLmphdmEi
LAorCQkJInBhY2thZ2UgcDI7XG4iICsKKwkJCSJpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmFubm90
YXRpb24uKjtcbiIgKworCQkJIkBOb25OdWxsQnlEZWZhdWx0XG4iICsKKwkJCSJwdWJsaWMgY2xh
c3MgWSB7XG4iICsKKwkJCSIgICB2b2lkIGZvbygpIHt9XG4iICsKKwkJCSJ9XG4iLAorCQkJInAz
L3BhY2thZ2UtaW5mby5qYXZhIiwKKwkJCSJAb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTm9u
TnVsbEJ5RGVmYXVsdCBwYWNrYWdlIHAzO1xuIiwKKwkJCSJwMy9aLmphdmEiLAorCQkJInBhY2th
Z2UgcDM7XG4iICsKKwkJCSJpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uKjtcbiIg
KworCQkJInB1YmxpYyBjbGFzcyBaIHtcbiIgKworCQkJIiAgICBATm9uTnVsbEJ5RGVmYXVsdCB2
b2lkIGJhcigpIHt9XG4iICsKKwkJCSJ9XG4iLAorCQl9LAorCQljdXN0b21PcHRpb25zLAorCQki
LS0tLS0tLS0tLVxuIiArIAorCQkiMS4gRVJST1IgaW4gcDJcXHBhY2thZ2UtaW5mby5qYXZhIChh
dCBsaW5lIDEpXG4iICsgCisJCSIJcGFja2FnZSBwMjtcbiIgKyAKKwkJIgkgICAgICAgIF5eXG4i
ICsgCisJCSJBIGRlZmF1bHQgbnVsbG5lc3MgYW5ub3RhdGlvbiBoYXMgbm90IGJlZW4gc3BlY2lm
aWVkIGZvciB0aGUgcGFja2FnZSBwMlxuIiArIAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiLS0t
LS0tLS0tLVxuIiArIAorCQkiMS4gV0FSTklORyBpbiBwM1xcWi5qYXZhIChhdCBsaW5lIDQpXG4i
ICsgCisJCSIJQE5vbk51bGxCeURlZmF1bHQgdm9pZCBiYXIoKSB7fVxuIiArIAorCQkiCV5eXl5e
Xl5eXl5eXl5eXl5eXG4iICsgCisJCSJOdWxsbmVzcyBkZWZhdWx0IGlzIHJlZHVuZGFudCB3aXRo
IGEgZGVmYXVsdCBzcGVjaWZpZWQgZm9yIHRoZSBlbmNsb3NpbmcgcGFja2FnZSBwM1xuIiArIAor
CQkiLS0tLS0tLS0tLVxuIik7Cit9CisKKy8vIHRlc3QgbWlzc2luZyBkZWZhdWx0IG51bGxuZXNz
IGFubm90YXRpb24gZm9yIGEgcGFja2FnZSB3aXRob3V0IHBhY2thZ2UtaW5mbworcHVibGljIHZv
aWQgdGVzdF9taXNzaW5nX2RlZmF1bHRfYW5ub3RhdGlvbl8wMygpIHsKKwlNYXAgY3VzdG9tT3B0
aW9ucyA9IGdldENvbXBpbGVyT3B0aW9ucygpOworCWN1c3RvbU9wdGlvbnMucHV0KEphdmFDb3Jl
LkNPTVBJTEVSX1BCX01JU1NJTkdfTk9OTlVMTF9CWV9ERUZBVUxUX0FOTk9UQVRJT04sIEphdmFD
b3JlLkVSUk9SKTsKKwlydW5OZWdhdGl2ZVRlc3RXaXRoTGlicygKIAkJbmV3IFN0cmluZ1tdIHsK
IAkJCSJwMi9ZLmphdmEiLAogCQkJInBhY2thZ2UgcDI7XG4iICsKIAkJCSJpbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmFubm90YXRpb24uKjtcbiIgKwogCQkJIkBOb25OdWxsQnlEZWZhdWx0XG4iICsK
IAkJCSJwdWJsaWMgY2xhc3MgWSB7XG4iICsKLQkJCSIgICAgQE5vbk51bGxCeURlZmF1bHQgdm9p
ZCBmb28oKSB7fVxuIiArCi0JCQkifVxuIiArCi0JCQkiY2xhc3MgWiB7XG4iICsKKwkJCSIgICB2
b2lkIGZvbygpIHt9XG4iICsKKwkJCSJ9XG4iLAorCQkJInAyL1ouamF2YSIsCisJCQkicGFja2Fn
ZSBwMjtcbiIgKworCQkJImltcG9ydCBvcmcuZWNsaXBzZS5qZHQuYW5ub3RhdGlvbi4qO1xuIiAr
CisJCQkicHVibGljIGNsYXNzIFoge1xuIiArCiAJCQkiICAgIEBOb25OdWxsQnlEZWZhdWx0IHZv
aWQgYmFyKCkge31cbiIgKwogCQkJIn1cbiIsCi0JCQkicDMvcGFja2FnZS1pbmZvLmphdmEiLAot
CQkJIkBvcmcuZWNsaXBzZS5qZHQuYW5ub3RhdGlvbi5Ob25OdWxsQnlEZWZhdWx0IHBhY2thZ2Ug
cDM7XG4iCiAJCX0sCiAJCWN1c3RvbU9wdGlvbnMsCiAJCSItLS0tLS0tLS0tXG4iICsgCi0JCSIx
LiBXQVJOSU5HIGluIHAyXFxZLmphdmEgKGF0IGxpbmUgMylcbiIgKwotCQkiCUBOb25OdWxsQnlE
ZWZhdWx0XG4iICsKLQkJIgleXl5eXl5eXl5eXl5eXl5eXlxuIiArCi0JCSJOdWxsbmVzcyBkZWZh
dWx0IGlzIHJlZHVuZGFudCB3aXRoIHRoZSBnbG9iYWwgZGVmYXVsdFxuIiArCi0JCSItLS0tLS0t
LS0tXG4iICsKLQkJIjIuIFdBUk5JTkcgaW4gcDJcXFkuamF2YSAoYXQgbGluZSA1KVxuIiArCi0J
CSIJQE5vbk51bGxCeURlZmF1bHQgdm9pZCBmb28oKSB7fVxuIiArCi0JCSIJXl5eXl5eXl5eXl5e
Xl5eXl5cbiIgKwotCQkiTnVsbG5lc3MgZGVmYXVsdCBpcyByZWR1bmRhbnQgd2l0aCBhIGRlZmF1
bHQgc3BlY2lmaWVkIGZvciB0aGUgZW5jbG9zaW5nIHR5cGUgWVxuIiArCi0JCSItLS0tLS0tLS0t
XG4iICsKLQkJIjMuIFdBUk5JTkcgaW4gcDJcXFkuamF2YSAoYXQgbGluZSA4KVxuIiArCi0JCSIJ
QE5vbk51bGxCeURlZmF1bHQgdm9pZCBiYXIoKSB7fVxuIiArCi0JCSIJXl5eXl5eXl5eXl5eXl5e
Xl5cbiIgKwotCQkiTnVsbG5lc3MgZGVmYXVsdCBpcyByZWR1bmRhbnQgd2l0aCB0aGUgZ2xvYmFs
IGRlZmF1bHRcbiIgKwotCQkiLS0tLS0tLS0tLVxuIiArCi0JCSItLS0tLS0tLS0tXG4iICsKLQkJ
IjEuIFdBUk5JTkcgaW4gcDNcXHBhY2thZ2UtaW5mby5qYXZhIChhdCBsaW5lIDEpXG4iICsKLQkJ
IglAb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTm9uTnVsbEJ5RGVmYXVsdCBwYWNrYWdlIHAz
O1xuIiArCi0JCSIJXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5c
biIgKwotCQkiTnVsbG5lc3MgZGVmYXVsdCBpcyByZWR1bmRhbnQgd2l0aCB0aGUgZ2xvYmFsIGRl
ZmF1bHRcbiIgKworCQkiMS4gRVJST1IgaW4gcDJcXFkuamF2YSAoYXQgbGluZSAxKVxuIiArIAor
CQkiCXBhY2thZ2UgcDI7XG4iICsgCisJCSIJICAgICAgICBeXlxuIiArIAorCQkiQSBkZWZhdWx0
IG51bGxuZXNzIGFubm90YXRpb24gaGFzIG5vdCBiZWVuIHNwZWNpZmllZCBmb3IgdGhlIHBhY2th
Z2UgcDJcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJ
IjEuIEVSUk9SIGluIHAyXFxaLmphdmEgKGF0IGxpbmUgMSlcbiIgKyAKKwkJIglwYWNrYWdlIHAy
O1xuIiArIAorCQkiCSAgICAgICAgXl5cbiIgKyAKKwkJIkEgZGVmYXVsdCBudWxsbmVzcyBhbm5v
dGF0aW9uIGhhcyBub3QgYmVlbiBzcGVjaWZpZWQgZm9yIHRoZSBwYWNrYWdlIHAyXG4iICsgCiAJ
CSItLS0tLS0tLS0tXG4iKTsKIH0KIApAQCAtMzA5MCw4ICszMTI5LDYgQEAKIC8vIGEgbm9ubnVs
bCB2YXJpYWJsZSBpcyBkZXJlZmVyZW5jZWQgaW4gYSBmaW5hbGx5IGJsb2NrIGluc2lkZSBhIGxv
b3AKIHB1YmxpYyB2b2lkIHRlc3Rfbm9ubnVsbF92YXJfaW5fY29uc3Ryb2xfc3RydWN0dXJlXzMo
KSB7CiAJTWFwIGN1c3RvbU9wdGlvbnMgPSBnZXRDb21waWxlck9wdGlvbnMoKTsKLS8vCWN1c3Rv
bU9wdGlvbnMucHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJT05fUmVwb3J0UG90ZW50aWFsTnVsbFNw
ZWNWaW9sYXRpb24sIEphdmFDb3JlLkVSUk9SKTsKLQljdXN0b21PcHRpb25zLnB1dChKYXZhQ29y
ZS5DT01QSUxFUl9OT05OVUxMX0lTX0RFRkFVTFQsIEphdmFDb3JlLkVOQUJMRUQpOwogCWN1c3Rv
bU9wdGlvbnMucHV0KEphdmFDb3JlLkNPTVBJTEVSX1BCX1JFRFVOREFOVF9OVUxMX0FOTk9UQVRJ
T04sIEphdmFDb3JlLklHTk9SRSk7CiAJcnVuTmVnYXRpdmVUZXN0V2l0aExpYnMoCiAJCW5ldyBT
dHJpbmdbXSB7CkBAIC0zMjcxLDggKzMzMDgsNiBAQAogfQogcHVibGljIHZvaWQgdGVzdF9hc3Np
Z25tZW50X2V4cHJlc3Npb25fMSgpIHsKIAlNYXAgY3VzdG9tT3B0aW9ucyA9IGdldENvbXBpbGVy
T3B0aW9ucygpOwotLy8JY3VzdG9tT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9S
ZXBvcnRQb3RlbnRpYWxOdWxsU3BlY1Zpb2xhdGlvbiwgSmF2YUNvcmUuRVJST1IpOwotCWN1c3Rv
bU9wdGlvbnMucHV0KEphdmFDb3JlLkNPTVBJTEVSX05PTk5VTExfSVNfREVGQVVMVCwgSmF2YUNv
cmUuRU5BQkxFRCk7CiAJY3VzdG9tT3B0aW9ucy5wdXQoSmF2YUNvcmUuQ09NUElMRVJfUEJfUkVE
VU5EQU5UX05VTExfQ0hFQ0ssIEphdmFDb3JlLkVSUk9SKTsKIAlydW5Db25mb3JtVGVzdFdpdGhM
aWJzKAogCQluZXcgU3RyaW5nW10gewpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUu
dGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21vZGVsL051bGxBbm5v
dGF0aW9uTW9kZWxUZXN0cy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwv
c3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21vZGVsL051bGxBbm5vdGF0aW9uTW9kZWxU
ZXN0cy5qYXZhCmluZGV4IDgyZTU0MjIuLjkxOWU3ZDggMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9tb2Rl
bC9OdWxsQW5ub3RhdGlvbk1vZGVsVGVzdHMuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvbW9kZWwvTnVsbEFu
bm90YXRpb25Nb2RlbFRlc3RzLmphdmEKQEAgLTUzLDcgKzUzLDcgQEAKIAl9CiAKIAlzdGF0aWMg
ewotLy8JCVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1tdIHsgInRlc3RNaXNzaW5nQW5ub3RhdGlv
bjUiIH07CisvLwkJVEVTVFNfTkFNRVMgPSBuZXcgU3RyaW5nW10geyAidGVzdENvbnZlcnRlZFNv
dXJjZVR5cGUxIiB9OwogCX0KIAogCXB1YmxpYyB2b2lkIHNldFVwKCkgdGhyb3dzIEV4Y2VwdGlv
biB7CkBAIC02NywxOCArNjcsMTcgQEAKIAkJcmV0dXJuIEZpbGVMb2NhdG9yLnRvRmlsZVVSTChs
aWJFbnRyeSkuZ2V0UGF0aCgpOwogCX0KIAotCS8vIERJU0FCTEVEIGR1ZSB0byBkeXNmdW5jdGlv
bmFsIGdsb2JhbCBkZWZhdWx0IGFmdGVyIEJ1ZyAzNjYwNjMgLSBDb21waWxlciBzaG91bGQgbm90
IGFkZCBzeW50aGV0aWMgQE5vbk51bGwgYW5ub3RhdGlvbnMKLQlwdWJsaWMgdm9pZCBfdGVzdENv
bnZlcnRlZFNvdXJjZVR5cGUxKCkgdGhyb3dzIENvcmVFeGNlcHRpb24sIEludGVycnVwdGVkRXhj
ZXB0aW9uIHsKKwlwdWJsaWMgdm9pZCB0ZXN0Q29udmVydGVkU291cmNlVHlwZTEoKSB0aHJvd3Mg
Q29yZUV4Y2VwdGlvbiwgSW50ZXJydXB0ZWRFeGNlcHRpb24gewogICAgIAl0cnkgewogCQkJLy8g
UmVzb3VyY2VzIGNyZWF0aW9uCiAJCQlJSmF2YVByb2plY3QgcCA9IGNyZWF0ZUphdmFQcm9qZWN0
KCJQIiwgbmV3IFN0cmluZ1tdIHsiIn0sIG5ldyBTdHJpbmdbXSB7IkpDTDE1X0xJQiIsIHRoaXMu
QU5OT1RBVElPTl9MSUJ9LCAiYmluIiwgIjEuNSIpOwogCQkJcC5zZXRPcHRpb24oSmF2YUNvcmUu
Q09NUElMRVJfQU5OT1RBVElPTl9OVUxMX0FOQUxZU0lTLCBKYXZhQ29yZS5FTkFCTEVEKTsKLQkJ
CXAuc2V0T3B0aW9uKEphdmFDb3JlLkNPTVBJTEVSX05PTk5VTExfSVNfREVGQVVMVCwgSmF2YUNv
cmUuRU5BQkxFRCk7CiAKIAkJCXRoaXMuY3JlYXRlRm9sZGVyKCIvUC9wMSIpOwogCQkJU3RyaW5n
IGMxU291cmNlU3RyaW5nID0KIAkJCQkicGFja2FnZSBwMTtcbiIgKwogCQkJCSJpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmFubm90YXRpb24uKjtcbiIgKworCQkJCSJAb3JnLmVjbGlwc2UuamR0LmFu
bm90YXRpb24uTm9uTnVsbEJ5RGVmYXVsdFxuIiArCiAJCQkJInB1YmxpYyBjbGFzcyBDMSB7XG4i
ICsKIAkJCQkiCSBwdWJsaWMgU3RyaW5nIGZvbyhATnVsbGFibGUgT2JqZWN0IGFyZykge1xuIiAr
IC8vIHRoaXMgaXMgY29uc3VtZWQgdmlhIFNvdXJjZVR5cGVDb252ZXJ0ZXIKIAkJCQkiCQlyZXR1
cm4gYXJnID09IG51bGwgPyBcIlwiIDogYXJnLnRvU3RyaW5nKCk7XG4iICsKQEAgLTkxLDYgKzkw
LDcgQEAKIAkJCXRoaXMuY3JlYXRlRm9sZGVyKCIvUC9wMiIpOwogCQkJU3RyaW5nIGMyU291cmNl
U3RyaW5nID0KIAkJCQkicGFja2FnZSBwMjtcbiIgKworCQkJCSJAb3JnLmVjbGlwc2UuamR0LmFu
bm90YXRpb24uTm9uTnVsbEJ5RGVmYXVsdFxuIiArCiAJCQkJInB1YmxpYyBjbGFzcyBDMiB7XG4i
ICsKIAkJCQkiCSBTdHJpbmcgYmFyKHAxLkMxIGMsIEMyIGMyKSB7O1xuIiArCiAJCQkJIiAgICAg
ICAgcmV0dXJuIGMuZm9vKG51bGwpO1xuIiArIC8vIGRvbid0IGNvbXBsYWluIGRlc3BpdGUgZGVm
YXVsdCBub25udWxsLCBmb28gaGFzIGV4cGxpY2l0IEBOdWxsYWJsZQpAQCAtMTA5LDcgKzEwOSw3
IEBACiAJCQlnZXRDb21waWxhdGlvblVuaXQoIi9QL3AyL0MyLmphdmEiKS5nZXRXb3JraW5nQ29w
eSh0aGlzLndjT3duZXIsIG51bGwpOwogCiAJCQlhc3NlcnRQcm9ibGVtcygiVW5leHBlY3RlZCBw
cm9ibGVtcyIsICItLS0tLS0tLS0tXG4iICsKLQkJCQkJIjEuIFdBUk5JTkcgaW4gL1AvcDIvQzIu
amF2YSAoYXQgbGluZSA3KVxuIiArCisJCQkJCSIxLiBXQVJOSU5HIGluIC9QL3AyL0MyLmphdmEg
KGF0IGxpbmUgOClcbiIgKwogCQkJCQkiCXJldHVybiBhcmcgPT0gbnVsbCA/IG51bGwgOiBhcmcu
dG9TdHJpbmcoKTtcbiIgKwogCQkJCQkiCSAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXlxuIiArCiAJCQkJCSJQb3RlbnRpYWwgdHlwZSBtaXNtYXRjaDogcmVxdWlyZWQg
XCdATm9uTnVsbCBTdHJpbmdcJyBidXQgbnVsbG5lc3Mgb2YgdGhlIHByb3ZpZGVkIHZhbHVlIGlz
IHVua25vd25cbiIgKwpAQCAtMTE5LDIxICsxMTksMjAgQEAKICAgICAJfQogICAgIH0KIAotCS8v
IERJU0FCTEVEIGR1ZSB0byBkeXNmdW5jdGlvbmFsIGdsb2JhbCBkZWZhdWx0IGFmdGVyIEJ1ZyAz
NjYwNjMgLSBDb21waWxlciBzaG91bGQgbm90IGFkZCBzeW50aGV0aWMgQE5vbk51bGwgYW5ub3Rh
dGlvbnMKLQlwdWJsaWMgdm9pZCBfdGVzdEJpbmFyeVR5cGUxKCkgdGhyb3dzIENvcmVFeGNlcHRp
b24sIEludGVycnVwdGVkRXhjZXB0aW9uLCBJT0V4Y2VwdGlvbiB7CisJcHVibGljIHZvaWQgdGVz
dEJpbmFyeVR5cGUxKCkgdGhyb3dzIENvcmVFeGNlcHRpb24sIEludGVycnVwdGVkRXhjZXB0aW9u
LCBJT0V4Y2VwdGlvbiB7CiAgICAgCXRyeSB7CiAJCQkvLyBSZXNvdXJjZXMgY3JlYXRpb24KIAkJ
CUlKYXZhUHJvamVjdCBwID0gY3JlYXRlSmF2YVByb2plY3QoIlAiLCBuZXcgU3RyaW5nW10geyIi
fSwKIAkJCQkJCQkJCQkJICAgbmV3IFN0cmluZ1tdIHsiSkNMMTVfTElCIiwgdGhpcy5BTk5PVEFU
SU9OX0xJQiwgdGVzdEphclBhdGgoImV4YW1wbGUuamFyIil9LAogCQkJCQkJCQkJCQkgICAiYmlu
IiwgIjEuNSIpOwogCQkJcC5zZXRPcHRpb24oSmF2YUNvcmUuQ09NUElMRVJfQU5OT1RBVElPTl9O
VUxMX0FOQUxZU0lTLCBKYXZhQ29yZS5FTkFCTEVEKTsKLQkJCXAuc2V0T3B0aW9uKEphdmFDb3Jl
LkNPTVBJTEVSX05PTk5VTExfSVNfREVGQVVMVCwgSmF2YUNvcmUuRU5BQkxFRCk7CiAKIAkJCS8v
IGV4YW1wbGUuamFyIGNvbnRhaW5zIHAxL0MxLmphdmEganVzdCBsaWtlIHRlc3RDb252ZXJ0ZWRT
b3VyY2VUeXBlMSgpCiAKIAkJCXRoaXMuY3JlYXRlRm9sZGVyKCIvUC9wMiIpOwogCQkJU3RyaW5n
IGMyU291cmNlU3RyaW5nID0KIAkJCQkicGFja2FnZSBwMjtcbiIgKworCQkJCSJAb3JnLmVjbGlw
c2UuamR0LmFubm90YXRpb24uTm9uTnVsbEJ5RGVmYXVsdFxuIiArCiAJCQkJInB1YmxpYyBjbGFz
cyBDMiB7XG4iICsKIAkJCQkiCSBTdHJpbmcgYmFyKHAxLkMxIGMpIHs7XG4iICsKIAkJCQkiICAg
ICAgICByZXR1cm4gYy5mb28obnVsbCk7XG4iICsgLy8gZG9uJ3QgY29tcGxhaW4gZGVzcGl0ZSBk
ZWZhdWx0IG5vbm51bGwsIGZvbyBoYXMgZXhwbGljaXQgQE51bGxhYmxlCkBAIC0xNTIsNyArMTUx
LDcgQEAKIAkJCWdldENvbXBpbGF0aW9uVW5pdCgiL1AvcDIvQzIuamF2YSIpLmdldFdvcmtpbmdD
b3B5KHRoaXMud2NPd25lciwgbnVsbCk7CiAKIAkJCWFzc2VydFByb2JsZW1zKCJVbmV4cGVjdGVk
IHByb2JsZW1zIiwgIi0tLS0tLS0tLS1cbiIgKwotCQkJCQkiMS4gV0FSTklORyBpbiAvUC9wMi9D
Mi5qYXZhIChhdCBsaW5lIDcpXG4iICsKKwkJCQkJIjEuIFdBUk5JTkcgaW4gL1AvcDIvQzIuamF2
YSAoYXQgbGluZSA4KVxuIiArCiAJCQkJCSIJcmV0dXJuIGFyZyA9PSBudWxsID8gbnVsbCA6IGFy
Zy50b1N0cmluZygpO1xuIiArCiAJCQkJCSIJICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXG4iICsKIAkJCQkJIlBvdGVudGlhbCB0eXBlIG1pc21hdGNoOiByZXF1aXJl
ZCBcJ0BOb25OdWxsIFN0cmluZ1wnIGJ1dCBudWxsbmVzcyBvZiB0aGUgcHJvdmlkZWQgdmFsdWUg
aXMgdW5rbm93blxuIiArCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9iYXRjaC9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYmF0Y2gvTWFpbi5qYXZhIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvYmF0Y2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Jh
dGNoL01haW4uamF2YQppbmRleCAxNGRmMDE2Li5iNDc5Nzc5IDEwMDY0NAotLS0gYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9iYXRjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYmF0
Y2gvTWFpbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2JhdGNoL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9iYXRjaC9NYWluLmphdmEKQEAgLTIzODAsOCArMjM4MCw4
IEBACiAJCQkJCW1vZGUgPSBJTlNJREVfV0FSTklOR1NfUFJPUEVSVElFUzsKIAkJCQkJY29udGlu
dWU7CiAJCQkJfQotCQkJCWlmIChjdXJyZW50QXJnLmVxdWFscygiLW5vbk51bGxCeURlZmF1bHQi
KSkgeyAvLyROT04tTkxTLTEkCi0JCQkJCXRoaXMub3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25z
Lk9QVElPTl9Ob25OdWxsSXNEZWZhdWx0LCBDb21waWxlck9wdGlvbnMuRU5BQkxFRCk7CisJCQkJ
aWYgKGN1cnJlbnRBcmcuZXF1YWxzKCItbWlzc2luZ0RlZmF1bHRBbm5vdCIpKSB7IC8vJE5PTi1O
TFMtMSQKKwkJCQkJdGhpcy5vcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1JlcG9y
dE1pc3NpbmdOb25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbiwgQ29tcGlsZXJPcHRpb25zLldBUk5J
TkcpOwogCQkJCQljb250aW51ZTsKIAkJCQl9CiAJCQkJYnJlYWs7CmRpZmYgLS1naXQgYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9iYXRjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
YmF0Y2gvbWVzc2FnZXMucHJvcGVydGllcyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2JhdGNoL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9iYXRjaC9tZXNzYWdlcy5wcm9wZXJ0aWVz
CmluZGV4IDAwYTVmNzQuLjdkMmFkNGYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2JhdGNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9iYXRjaC9tZXNzYWdlcy5w
cm9wZXJ0aWVzCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2JhdGNoL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9iYXRjaC9tZXNzYWdlcy5wcm9wZXJ0aWVzCkBAIC0yNTEsOCAr
MjUxLDcgQEAKIFwgICAgLWVuYWJsZUphdmFkb2MgICAgIGNvbnNpZGVyIHJlZmVyZW5jZXMgaW4g
amF2YWRvY1xuXAogXCAgICAtWGVtYWNzICAgICAgICAgICAgdXNlZCB0byBlbmFibGUgZW1hY3Mt
c3R5bGUgb3V0cHV0IGluIHRoZSBjb25zb2xlLlxuXAogXCAgICAgICAgICAgICAgICAgICAgICAg
SXQgZG9lcyBub3QgYWZmZWN0IHRoZSB4bWwgbG9nIG91dHB1dFxuXAotXCAgICAtbm9uTnVsbEJ5
RGVmYXVsdCAgZm9yIGFubm90YXRpb24gYmFzZWQgbnVsbCBhbmFseXNpcyBhc3N1bWUgbm9ubnVs
bFxuXAotXCAgICAgICAgICAgICAgICAgICAgICAgYXMgdGhlIGdsb2JhbCBkZWZhdWx0XG5cCitc
ICAgIC1taXNzaW5nRGVmYXVsdEFubm90ICByZXBvcnQgbWlzc2luZyBkZWZhdWx0IG51bGxuZXNz
IGFubm90YXRpb25cblwKIFwgXG5cCiBcICAgIC0/IC1oZWxwICAgICAgICAgICBwcmludCB0aGlz
IGhlbHAgbWVzc2FnZVxuXAogXCAgICAtdiAtdmVyc2lvbiAgICAgICAgcHJpbnQgY29tcGlsZXIg
dmVyc2lvblxuXApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2NvcmUvY29tcGlsZXIvSVByb2JsZW0uamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9jb3JlL2NvbXBpbGVyL0lQcm9ibGVtLmph
dmEKaW5kZXggYzg4NDRhMy4uOGE1NjI0NyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2NvcmUvY29tcGlsZXIvSVByb2JsZW0uamF2YQor
KysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvY29yZS9j
b21waWxlci9JUHJvYmxlbS5qYXZhCkBAIC0xNDQyLDcgKzE0NDIsOCBAQAogCWludCBSZXF1aXJl
ZE5vbk51bGxCdXRQcm92aWRlZFBvdGVudGlhbE51bGwgPSBUeXBlUmVsYXRlZCArIDkxMTsKIAkv
KiogQHNpbmNlIDMuOCAqLwogCWludCBSZXF1aXJlZE5vbk51bGxCdXRQcm92aWRlZFVua25vd24g
PSBUeXBlUmVsYXRlZCArIDkxMjsKLQkvLyByZW1vdmVkIGR1cmluZyAzLjggTTY6IEltcG9ydFJl
bGF0ZWQgKyA5MTMgCisJLyoqIEBzaW5jZSAzLjggKi8KKwlpbnQgTWlzc2luZ05vbk51bGxCeURl
ZmF1bHRBbm5vdGF0aW9uT25QYWNrYWdlID0gSW50ZXJuYWwgKyA5MTM7IC8vIGh0dHBzOi8vYnVn
cy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNzIwMTIKIAkvKiogQHNpbmNlIDMu
OCAqLwogCWludCBJbGxlZ2FsUmV0dXJuTnVsbGl0eVJlZGVmaW5pdGlvbiA9IE1ldGhvZFJlbGF0
ZWQgKyA5MTQ7CiAJLyoqIEBzaW5jZSAzLjggKi8KQEAgLTE0NzMsNiArMTQ3NCw4IEBACiAJaW50
IFJlZHVuZGFudE51bGxEZWZhdWx0QW5ub3RhdGlvbk1ldGhvZCA9IEludGVybmFsICsgOTI4Owog
CS8qKiBAc2luY2UgMy44ICovCiAJaW50IENvbnRyYWRpY3RvcnlOdWxsQW5ub3RhdGlvbnMgPSBJ
bnRlcm5hbCArIDkyOTsKKwkvKiogQHNpbmNlIDMuOCAqLworCWludCBNaXNzaW5nTm9uTnVsbEJ5
RGVmYXVsdEFubm90YXRpb25PblR5cGUgPSBJbnRlcm5hbCArIDkzMDsgLy8gaHR0cHM6Ly9idWdz
LmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM3MjAxMgogCiAJLyoqCiAJICogRXh0
ZXJuYWwgcHJvYmxlbXMgLS0gVGhlc2UgYXJlIHByb2JsZW1zIGRlZmluZWQgYnkgb3RoZXIgcGx1
Z2lucwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2ltcGwvQ29tcGlsZXJPcHRpb25zLmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvaW1wbC9Db21waWxlck9wdGlvbnMuamF2YQppbmRleCA5MzIzNmFiLi4yYzk2OGU2IDEwMDY0
NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvaW1wbC9Db21waWxlck9wdGlvbnMuamF2YQorKysgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvaW1w
bC9Db21waWxlck9wdGlvbnMuamF2YQpAQCAtMjksNyArMjksNiBAQAogaW1wb3J0IG9yZy5lY2xp
cHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuQVNUTm9kZTsKIGltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuY2xhc3NmbXQuQ2xhc3NGaWxlQ29uc3RhbnRzOwogaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuRXh0cmFDb21waWxl
ck1vZGlmaWVyczsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9v
a3VwLlRhZ0JpdHM7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLnBy
b2JsZW0uUHJvYmxlbVNldmVyaXRpZXM7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFs
LmNvbXBpbGVyLnV0aWwuVXRpbDsKIApAQCAtMTU4LDcgKzE1Nyw3IEBACiAJc3RhdGljIGZpbmFs
IGNoYXJbXVtdIERFRkFVTFRfTlVMTEFCTEVfQU5OT1RBVElPTl9OQU1FID0gQ2hhck9wZXJhdGlv
bi5zcGxpdE9uKCcuJywgIm9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uLk51bGxhYmxlIi50b0No
YXJBcnJheSgpKTsgLy8kTk9OLU5MUy0xJAogCXN0YXRpYyBmaW5hbCBjaGFyW11bXSBERUZBVUxU
X05PTk5VTExfQU5OT1RBVElPTl9OQU1FID0gQ2hhck9wZXJhdGlvbi5zcGxpdE9uKCcuJywgIm9y
Zy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uLk5vbk51bGwiLnRvQ2hhckFycmF5KCkpOyAvLyROT04t
TkxTLTEkCiAJc3RhdGljIGZpbmFsIGNoYXJbXVtdIERFRkFVTFRfTk9OTlVMTEJZREVGQVVMVF9B
Tk5PVEFUSU9OX05BTUUgPSBDaGFyT3BlcmF0aW9uLnNwbGl0T24oJy4nLCAib3JnLmVjbGlwc2Uu
amR0LmFubm90YXRpb24uTm9uTnVsbEJ5RGVmYXVsdCIudG9DaGFyQXJyYXkoKSk7IC8vJE5PTi1O
TFMtMSQKLQlwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBPUFRJT05fTm9uTnVsbElzRGVmYXVs
dCA9ICJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5hbm5vdGF0aW9uLm5vbm51bGxpc2Rl
ZmF1bHQiOyAgLy8kTk9OLU5MUy0xJAorCXB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIE9QVElP
Tl9SZXBvcnRNaXNzaW5nTm9uTnVsbEJ5RGVmYXVsdEFubm90YXRpb24gPSAib3JnLmVjbGlwc2Uu
amR0LmNvcmUuY29tcGlsZXIuYW5ub3RhdGlvbi5taXNzaW5nTm9uTnVsbEJ5RGVmYXVsdEFubm90
YXRpb24iOyAgLy8kTk9OLU5MUy0xJAogCS8qKgogCSAqIFBvc3NpYmxlIHZhbHVlcyBmb3IgY29u
ZmlndXJhYmxlIG9wdGlvbnMKIAkgKi8KQEAgLTI2OSw2ICsyNjgsNyBAQAogCXB1YmxpYyBzdGF0
aWMgZmluYWwgaW50IFBvdGVudGlhbE51bGxTcGVjVmlvbGF0aW9uID0gSXJyaXRhbnRTZXQuR1JP
VVAyIHwgQVNUTm9kZS5CaXQxMjsKIAlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBOdWxsU3BlY0lu
c3VmZmljaWVudEluZm8gPSBJcnJpdGFudFNldC5HUk9VUDIgfCBBU1ROb2RlLkJpdDEzOwogCXB1
YmxpYyBzdGF0aWMgZmluYWwgaW50IFJlZHVuZGFudE51bGxBbm5vdGF0aW9uID0gSXJyaXRhbnRT
ZXQuR1JPVVAyIHwgQVNUTm9kZS5CaXQxNDsKKwlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBNaXNz
aW5nTm9uTnVsbEJ5RGVmYXVsdEFubm90YXRpb24gPSBJcnJpdGFudFNldC5HUk9VUDIgfCBBU1RO
b2RlLkJpdDE1OwogCiAJLy8gU2V2ZXJpdHkgbGV2ZWwgZm9yIGhhbmRsZXJzCiAJLyoqIApAQCAt
NTk0LDYgKzU5NCw4IEBACiAJCQkJcmV0dXJuIE9QVElPTl9SZXBvcnRNZXRob2RDYW5CZVN0YXRp
YzsKIAkJCWNhc2UgTWV0aG9kQ2FuQmVQb3RlbnRpYWxseVN0YXRpYyA6CiAJCQkJcmV0dXJuIE9Q
VElPTl9SZXBvcnRNZXRob2RDYW5CZVBvdGVudGlhbGx5U3RhdGljOworCQkJY2FzZSBNaXNzaW5n
Tm9uTnVsbEJ5RGVmYXVsdEFubm90YXRpb24gOgorCQkJCXJldHVybiBPUFRJT05fUmVwb3J0TWlz
c2luZ05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uOwogCQkJY2FzZSBSZWR1bmRhbnRTcGVjaWZp
Y2F0aW9uT2ZUeXBlQXJndW1lbnRzIDoKIAkJCQlyZXR1cm4gT1BUSU9OX1JlcG9ydFJlZHVuZGFu
dFNwZWNpZmljYXRpb25PZlR5cGVBcmd1bWVudHM7CiAJCQljYXNlIFVuY2xvc2VkQ2xvc2VhYmxl
IDoKQEAgLTc4MCw3ICs3ODIsNyBAQAogCQkJT1BUSU9OX05vbk51bGxBbm5vdGF0aW9uTmFtZSwK
IAkJCU9QVElPTl9OdWxsYWJsZUFubm90YXRpb25OYW1lLAogCQkJT1BUSU9OX05vbk51bGxCeURl
ZmF1bHRBbm5vdGF0aW9uTmFtZSwKLQkJCU9QVElPTl9Ob25OdWxsSXNEZWZhdWx0LAorCQkJT1BU
SU9OX1JlcG9ydE1pc3NpbmdOb25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbiwKIAkJCU9QVElPTl9S
ZXBvcnROdWxsU3BlY1Zpb2xhdGlvbiwKIAkJCU9QVElPTl9SZXBvcnRQb3RlbnRpYWxOdWxsU3Bl
Y1Zpb2xhdGlvbiwKIAkJCU9QVElPTl9SZXBvcnROdWxsU3BlY0luc3VmZmljaWVudEluZm8sCkBA
IC04NjcsNiArODY5LDggQEAKIAkJCWNhc2UgTWlzc2luZ0phdmFkb2NDb21tZW50cyA6CiAJCQlj
YXNlIE1pc3NpbmdKYXZhZG9jVGFnczoKIAkJCQlyZXR1cm4gImphdmFkb2MiOyAvLyROT04tTkxT
LTEkCisJCQljYXNlIE1pc3NpbmdOb25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbjoKKwkJCQlyZXR1
cm4gIm1pc3NpbmdEZWZhdWx0QW5ub3QiOyAvLyROT04tTkxTLTEkCiAJCQljYXNlIE1pc3NpbmdT
eW5jaHJvbml6ZWRNb2RpZmllckluSW5oZXJpdGVkTWV0aG9kOgogCQkJCXJldHVybiAic3luYy1v
dmVycmlkZSI7CSAvLyROT04tTkxTLTEkCiAJCX0KQEAgLTEwNzYsMTAgKzEwODAsNyBAQAogCQlv
cHRpb25zTWFwLnB1dChPUFRJT05fTnVsbGFibGVBbm5vdGF0aW9uTmFtZSwgU3RyaW5nLnZhbHVl
T2YoQ2hhck9wZXJhdGlvbi5jb25jYXRXaXRoKHRoaXMubnVsbGFibGVBbm5vdGF0aW9uTmFtZSwg
Jy4nKSkpOwogCQlvcHRpb25zTWFwLnB1dChPUFRJT05fTm9uTnVsbEFubm90YXRpb25OYW1lLCBT
dHJpbmcudmFsdWVPZihDaGFyT3BlcmF0aW9uLmNvbmNhdFdpdGgodGhpcy5ub25OdWxsQW5ub3Rh
dGlvbk5hbWUsICcuJykpKTsKIAkJb3B0aW9uc01hcC5wdXQoT1BUSU9OX05vbk51bGxCeURlZmF1
bHRBbm5vdGF0aW9uTmFtZSwgU3RyaW5nLnZhbHVlT2YoQ2hhck9wZXJhdGlvbi5jb25jYXRXaXRo
KHRoaXMubm9uTnVsbEJ5RGVmYXVsdEFubm90YXRpb25OYW1lLCAnLicpKSk7Ci0JCWlmICh0aGlz
LmludGVuZGVkRGVmYXVsdE5vbk51bGxuZXNzID09IFRhZ0JpdHMuQW5ub3RhdGlvbk5vbk51bGwp
Ci0JCQlvcHRpb25zTWFwLnB1dChPUFRJT05fTm9uTnVsbElzRGVmYXVsdCwgQ29tcGlsZXJPcHRp
b25zLkVOQUJMRUQpOwotCQllbHNlCi0JCQlvcHRpb25zTWFwLnB1dChPUFRJT05fTm9uTnVsbElz
RGVmYXVsdCwgQ29tcGlsZXJPcHRpb25zLkRJU0FCTEVEKTsKKwkJb3B0aW9uc01hcC5wdXQoT1BU
SU9OX1JlcG9ydE1pc3NpbmdOb25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbiwgZ2V0U2V2ZXJpdHlT
dHJpbmcoTWlzc2luZ05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uKSk7CiAJCXJldHVybiBvcHRp
b25zTWFwOwogCX0KIApAQCAtMTU1NCwxMiArMTU1NSw3IEBACiAJCQlpZiAoKG9wdGlvblZhbHVl
ID0gb3B0aW9uc01hcC5nZXQoT1BUSU9OX05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uTmFtZSkp
ICE9IG51bGwpIHsKIAkJCQl0aGlzLm5vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uTmFtZSA9IENo
YXJPcGVyYXRpb24uc3BsaXRBbmRUcmltT24oJy4nLCAoKFN0cmluZylvcHRpb25WYWx1ZSkudG9D
aGFyQXJyYXkoKSk7CiAJCQl9Ci0JCQlpZiAoKG9wdGlvblZhbHVlID0gb3B0aW9uc01hcC5nZXQo
T1BUSU9OX05vbk51bGxJc0RlZmF1bHQpKSAhPSBudWxsKSB7Ci0JCQkJaWYgKENvbXBpbGVyT3B0
aW9ucy5FTkFCTEVELmVxdWFscyhvcHRpb25WYWx1ZSkpCi0JCQkJCXRoaXMuaW50ZW5kZWREZWZh
dWx0Tm9uTnVsbG5lc3MgPSBUYWdCaXRzLkFubm90YXRpb25Ob25OdWxsOwotCQkJCWVsc2UgaWYg
KENvbXBpbGVyT3B0aW9ucy5ESVNBQkxFRC5lcXVhbHMob3B0aW9uVmFsdWUpKQotCQkJCQl0aGlz
LmludGVuZGVkRGVmYXVsdE5vbk51bGxuZXNzID0gMDsKLQkJCX0KKwkJCWlmICgob3B0aW9uVmFs
dWUgPSBvcHRpb25zTWFwLmdldChPUFRJT05fUmVwb3J0TWlzc2luZ05vbk51bGxCeURlZmF1bHRB
bm5vdGF0aW9uKSkgIT0gbnVsbCkgdXBkYXRlU2V2ZXJpdHkoTWlzc2luZ05vbk51bGxCeURlZmF1
bHRBbm5vdGF0aW9uLCBvcHRpb25WYWx1ZSk7CiAJCX0KIAogCQkvLyBKYXZhZG9jIG9wdGlvbnMK
ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU291cmNlVHlwZUJpbmRpbmcuamF2YSBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9sb29rdXAvU291cmNlVHlwZUJpbmRpbmcuamF2YQppbmRleCA1M2EyYjFiLi41NWE2NzdmIDEw
MDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1NvdXJjZVR5cGVCaW5kaW5nLmphdmEKKysrIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2xvb2t1cC9Tb3VyY2VUeXBlQmluZGluZy5qYXZhCkBAIC0xNjMzLDYgKzE2MzMsMjMgQEAK
IHByaXZhdGUgdm9pZCBldmFsdWF0ZU51bGxBbm5vdGF0aW9ucyhsb25nIGFubm90YXRpb25UYWdC
aXRzKSB7CiAJaWYgKHRoaXMubnVsbG5lc3NEZWZhdWx0SW5pdGlhbGl6ZWQgPiAwIHx8ICF0aGlz
LnNjb3BlLmNvbXBpbGVyT3B0aW9ucygpLmlzQW5ub3RhdGlvbkJhc2VkTnVsbEFuYWx5c2lzRW5h
YmxlZCkKIAkJcmV0dXJuOworCWJvb2xlYW4gaXNQYWNrYWdlSW5mbyA9IENoYXJPcGVyYXRpb24u
ZXF1YWxzKHRoaXMuc291cmNlTmFtZSwgVHlwZUNvbnN0YW50cy5QQUNLQUdFX0lORk9fTkFNRSk7
CisJUGFja2FnZUJpbmRpbmcgcGtnID0gZ2V0UGFja2FnZSgpOworCWJvb2xlYW4gaXNEZWZhdWx0
ID0gKHBrZy5jb21wb3VuZE5hbWUgPT0gQ2hhck9wZXJhdGlvbi5OT19DSEFSX0NIQVIpOworCWJv
b2xlYW4gaXNOdWxsbmVzc0Fubm90YXRpb25QYWNrYWdlID0gCisJCQlwa2cgPT0gdGhpcy5zY29w
ZS5lbnZpcm9ubWVudCgpLm5vbm51bGxBbm5vdGF0aW9uUGFja2FnZQorCQkJfHwgcGtnID09IHRo
aXMuc2NvcGUuZW52aXJvbm1lbnQoKS5udWxsYWJsZUFubm90YXRpb25QYWNrYWdlCisJCQl8fCBw
a2cgPT0gdGhpcy5zY29wZS5lbnZpcm9ubWVudCgpLm5vbm51bGxCeURlZmF1bHRBbm5vdGF0aW9u
UGFja2FnZTsKKwlpZiAocGtnLmRlZmF1bHROdWxsbmVzcyA9PSBOT19OVUxMX0RFRkFVTFQgJiYg
IWlzRGVmYXVsdCAmJiAhaXNQYWNrYWdlSW5mbyAmJiAhaXNOdWxsbmVzc0Fubm90YXRpb25QYWNr
YWdlKSB7CisJCVJlZmVyZW5jZUJpbmRpbmcgcGFja2FnZUluZm8gPSBwa2cuZ2V0VHlwZShUeXBl
Q29uc3RhbnRzLlBBQ0tBR0VfSU5GT19OQU1FKTsKKwkJaWYgKHBhY2thZ2VJbmZvID09IG51bGwp
IHsKKwkJCS8vIG5vIHBrZ0luZm8gLSBjb21wbGFpbgorCQkJdGhpcy5zY29wZS5wcm9ibGVtUmVw
b3J0ZXIoKS5taXNzaW5nTm9uTnVsbEJ5RGVmYXVsdEFubm90YXRpb24odGhpcy5zY29wZS5yZWZl
cmVuY2VDb250ZXh0KTsKKwkJfSBlbHNlIHsKKwkJCS8vIGlmIHBrZ0luZm8gaGFzIG5vIGRlZmF1
bHQgYW5ub3QuIC0gY29tcGxhaW4KKwkJCXBhY2thZ2VJbmZvLmdldEFubm90YXRpb25UYWdCaXRz
KCk7CisJCX0KKwl9CiAJdGhpcy5udWxsbmVzc0RlZmF1bHRJbml0aWFsaXplZCA9IDE7CiAJLy8g
dHJhbnNmZXIgbnVsbG5lc3MgaW5mbyBmcm9tIHRhZ0JpdHMgdG8gdGhpcy5udWxsbmVzc0RlZmF1
bHRBbm5vdGF0aW9uCiAJaW50IG5ld0RlZmF1bHROdWxsbmVzcyA9IE5PX05VTExfREVGQVVMVDsK
QEAgLTE2NDEsMTQgKzE2NTgsMTggQEAKIAllbHNlIGlmICgoYW5ub3RhdGlvblRhZ0JpdHMgJiBU
YWdCaXRzLkFubm90YXRpb25Ob25OdWxsQnlEZWZhdWx0KSAhPSAwKQogCQluZXdEZWZhdWx0TnVs
bG5lc3MgPSBOT05OVUxMX0JZX0RFRkFVTFQ7CiAJaWYgKG5ld0RlZmF1bHROdWxsbmVzcyAhPSBO
T19OVUxMX0RFRkFVTFQpIHsKLQkJaWYgKENoYXJPcGVyYXRpb24uZXF1YWxzKHRoaXMuc291cmNl
TmFtZSwgVHlwZUNvbnN0YW50cy5QQUNLQUdFX0lORk9fTkFNRSkpIHsKLQkJCWdldFBhY2thZ2Uo
KS5kZWZhdWx0TnVsbG5lc3MgPSBuZXdEZWZhdWx0TnVsbG5lc3M7CisJCWlmIChpc1BhY2thZ2VJ
bmZvKSB7CisJCQlwa2cuZGVmYXVsdE51bGxuZXNzID0gbmV3RGVmYXVsdE51bGxuZXNzOwogCQl9
IGVsc2UgewogCQkJdGhpcy5kZWZhdWx0TnVsbG5lc3MgPSBuZXdEZWZhdWx0TnVsbG5lc3M7CiAJ
CQlUeXBlRGVjbGFyYXRpb24gdHlwZURlY2wgPSB0aGlzLnNjb3BlLnJlZmVyZW5jZUNvbnRleHQ7
CiAJCQlsb25nIG51bGxEZWZhdWx0Qml0cyA9IGFubm90YXRpb25UYWdCaXRzICYgKFRhZ0JpdHMu
QW5ub3RhdGlvbk51bGxVbnNwZWNpZmllZEJ5RGVmYXVsdHxUYWdCaXRzLkFubm90YXRpb25Ob25O
dWxsQnlEZWZhdWx0KTsKIAkJCWNoZWNrUmVkdW5kYW50TnVsbG5lc3NEZWZhdWx0UmVjdXJzZSh0
eXBlRGVjbCwgdHlwZURlY2wuYW5ub3RhdGlvbnMsIG51bGxEZWZhdWx0Qml0cyk7CiAJCX0KKwl9
IGVsc2UgaWYgKGlzUGFja2FnZUluZm8gfHwgKGlzRGVmYXVsdCAmJiAhKHRoaXMgaW5zdGFuY2Vv
ZiBOZXN0ZWRUeXBlQmluZGluZykpKSB7CisJCXRoaXMuc2NvcGUucHJvYmxlbVJlcG9ydGVyKCku
bWlzc2luZ05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uKHRoaXMuc2NvcGUucmVmZXJlbmNlQ29u
dGV4dCk7CisJCWlmICghaXNEZWZhdWx0KQorCQkJcGtnLmRlZmF1bHROdWxsbmVzcyA9IE5VTExf
VU5TUEVDSUZJRURfQllfREVGQVVMVDsKIAl9CiB9CiAKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9i
bGVtL1Byb2JsZW1SZXBvcnRlci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxlbVJlcG9ydGVy
LmphdmEKaW5kZXggM2RkNjM5YS4uZWM0NWEzOSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0v
UHJvYmxlbVJlcG9ydGVyLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxlbVJlcG9ydGVy
LmphdmEKQEAgLTQ2OCw2ICs0NjgsMTAgQEAKIAkJCQkKIAkJY2FzZSBJUHJvYmxlbS5SZWR1bmRh
bnRTcGVjaWZpY2F0aW9uT2ZUeXBlQXJndW1lbnRzOgogCQkJcmV0dXJuIENvbXBpbGVyT3B0aW9u
cy5SZWR1bmRhbnRTcGVjaWZpY2F0aW9uT2ZUeXBlQXJndW1lbnRzOworCQkJCisJCWNhc2UgSVBy
b2JsZW0uTWlzc2luZ05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uT25QYWNrYWdlOgorCQljYXNl
IElQcm9ibGVtLk1pc3NpbmdOb25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbk9uVHlwZToKKwkJCXJl
dHVybiBDb21waWxlck9wdGlvbnMuTWlzc2luZ05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uOwog
CX0KIAlyZXR1cm4gMDsKIH0KQEAgLTU3Myw2ICs1NzcsNyBAQAogCQkJY2FzZSBDb21waWxlck9w
dGlvbnMuTnVsbFNwZWNWaW9sYXRpb24gOgogCQkJY2FzZSBDb21waWxlck9wdGlvbnMuUG90ZW50
aWFsTnVsbFNwZWNWaW9sYXRpb24gOgogCQkJY2FzZSBDb21waWxlck9wdGlvbnMuTnVsbFNwZWNJ
bnN1ZmZpY2llbnRJbmZvIDoKKwkJCWNhc2UgQ29tcGlsZXJPcHRpb25zLk1pc3NpbmdOb25OdWxs
QnlEZWZhdWx0QW5ub3RhdGlvbjoKIAkJCQlyZXR1cm4gQ2F0ZWdvcml6ZWRQcm9ibGVtLkNBVF9Q
T1RFTlRJQUxfUFJPR1JBTU1JTkdfUFJPQkxFTTsKIAkJCWNhc2UgQ29tcGlsZXJPcHRpb25zLlJl
ZHVuZGFudE51bGxBbm5vdGF0aW9uIDoKIAkJCQlyZXR1cm4gQ2F0ZWdvcml6ZWRQcm9ibGVtLkNB
VF9VTk5FQ0VTU0FSWV9DT0RFOwpAQCAtODE3MSw5ICs4MTc2LDcgQEAKIAkJYXJndW1lbnQudHlw
ZS5zb3VyY2VTdGFydCwKIAkJYXJndW1lbnQudHlwZS5zb3VyY2VFbmQpOwogfQotcHVibGljIHZv
aWQgaWxsZWdhbFJldHVyblJlZGVmaW5pdGlvbihBYnN0cmFjdE1ldGhvZERlY2xhcmF0aW9uIGFi
c3RyYWN0TWV0aG9kRGVjbCwKLQkJCQkJCQkJCSAgTWV0aG9kQmluZGluZyBpbmhlcml0ZWRNZXRo
b2QsIGNoYXJbXVtdIG5vbk51bGxBbm5vdGF0aW9uTmFtZSkKLXsKK3B1YmxpYyB2b2lkIGlsbGVn
YWxSZXR1cm5SZWRlZmluaXRpb24oQWJzdHJhY3RNZXRob2REZWNsYXJhdGlvbiBhYnN0cmFjdE1l
dGhvZERlY2wsIE1ldGhvZEJpbmRpbmcgaW5oZXJpdGVkTWV0aG9kLCBjaGFyW11bXSBub25OdWxs
QW5ub3RhdGlvbk5hbWUpIHsKIAlNZXRob2REZWNsYXJhdGlvbiBtZXRob2REZWNsID0gKE1ldGhv
ZERlY2xhcmF0aW9uKSBhYnN0cmFjdE1ldGhvZERlY2w7CiAJU3RyaW5nQnVmZmVyIG1ldGhvZFNp
Z25hdHVyZSA9IG5ldyBTdHJpbmdCdWZmZXIoKTsKIAltZXRob2RTaWduYXR1cmUKQEAgLTgzMTks
NCArODMyMiwzNCBAQAogCX0KIAlyZXR1cm4gbnVsbDsKIH0KKy8vIGh0dHBzOi8vYnVncy5lY2xp
cHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNzIwMTIKK3B1YmxpYyB2b2lkIG1pc3NpbmdO
b25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbihUeXBlRGVjbGFyYXRpb24gdHlwZSkgeworCWludCBz
ZXZlcml0eTsKKwlDb21waWxhdGlvblVuaXREZWNsYXJhdGlvbiBjb21wVW5pdERlY2wgPSB0eXBl
LmdldENvbXBpbGF0aW9uVW5pdERlY2xhcmF0aW9uKCk7CisJU3RyaW5nW10gYXJndW1lbnRzOwor
CWlmIChjb21wVW5pdERlY2wuY3VycmVudFBhY2thZ2UgPT0gbnVsbCkgeworCQlzZXZlcml0eSA9
IGNvbXB1dGVTZXZlcml0eShJUHJvYmxlbS5NaXNzaW5nTm9uTnVsbEJ5RGVmYXVsdEFubm90YXRp
b25PblR5cGUpOworCQlpZiAoc2V2ZXJpdHkgPT0gUHJvYmxlbVNldmVyaXRpZXMuSWdub3JlKSBy
ZXR1cm47CisJCS8vIERlZmF1bHQgcGFja2FnZQorCQlUeXBlQmluZGluZyBiaW5kaW5nID0gdHlw
ZS5iaW5kaW5nOworCQl0aGlzLmhhbmRsZSgKKwkJCQlJUHJvYmxlbS5NaXNzaW5nTm9uTnVsbEJ5
RGVmYXVsdEFubm90YXRpb25PblR5cGUsCisJCQkJbmV3IFN0cmluZ1tdIHtuZXcgU3RyaW5nKGJp
bmRpbmcucmVhZGFibGVOYW1lKCkpLCB9LAorCQkJCW5ldyBTdHJpbmdbXSB7bmV3IFN0cmluZyhi
aW5kaW5nLnNob3J0UmVhZGFibGVOYW1lKCkpLH0sCisJCQkJc2V2ZXJpdHksCisJCQkJdHlwZS5z
b3VyY2VTdGFydCwKKwkJCQl0eXBlLnNvdXJjZUVuZCk7CisJfSBlbHNlIHsKKwkJc2V2ZXJpdHkg
PSBjb21wdXRlU2V2ZXJpdHkoSVByb2JsZW0uTWlzc2luZ05vbk51bGxCeURlZmF1bHRBbm5vdGF0
aW9uT25QYWNrYWdlKTsKKwkJaWYgKHNldmVyaXR5ID09IFByb2JsZW1TZXZlcml0aWVzLklnbm9y
ZSkgcmV0dXJuOworCQlhcmd1bWVudHMgPSBuZXcgU3RyaW5nW10ge0NoYXJPcGVyYXRpb24udG9T
dHJpbmcoY29tcFVuaXREZWNsLmN1cnJlbnRQYWNrYWdlLnRva2Vucyl9OworCQl0aGlzLmhhbmRs
ZSgKKwkJCUlQcm9ibGVtLk1pc3NpbmdOb25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbk9uUGFja2Fn
ZSwKKwkJCWFyZ3VtZW50cywKKwkJCWFyZ3VtZW50cywKKwkJCXNldmVyaXR5LAorCQkJY29tcFVu
aXREZWNsLmN1cnJlbnRQYWNrYWdlLnNvdXJjZVN0YXJ0LAorCQkJY29tcFVuaXREZWNsLmN1cnJl
bnRQYWNrYWdlLnNvdXJjZUVuZCk7CisJfQorfQogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2Js
ZW0vbWVzc2FnZXMucHJvcGVydGllcyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL21lc3NhZ2VzLnByb3BlcnRp
ZXMKaW5kZXggMjY1ZWZhZS4uMWEwNjRlMyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vbWVz
c2FnZXMucHJvcGVydGllcworKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9tZXNzYWdlcy5wcm9wZXJ0aWVz
CkBAIC02NjIsNyArNjYyLDcgQEAKIDkxMCA9IFR5cGUgbWlzbWF0Y2g6IHJlcXVpcmVkICcnQHsw
fSB7MX0nJyBidXQgdGhlIHByb3ZpZGVkIHZhbHVlIGlzIG51bGwKIDkxMSA9IFR5cGUgbWlzbWF0
Y2g6IHJlcXVpcmVkICcnQHswfSB7MX0nJyBidXQgdGhlIHByb3ZpZGVkIHZhbHVlIGNhbiBiZSBu
dWxsCiA5MTIgPSBQb3RlbnRpYWwgdHlwZSBtaXNtYXRjaDogcmVxdWlyZWQgJydAezB9IHsxfScn
IGJ1dCBudWxsbmVzcyBvZiB0aGUgcHJvdmlkZWQgdmFsdWUgaXMgdW5rbm93bgotIzkxMyByZW1v
dmVkCis5MTMgPSBBIGRlZmF1bHQgbnVsbG5lc3MgYW5ub3RhdGlvbiBoYXMgbm90IGJlZW4gc3Bl
Y2lmaWVkIGZvciB0aGUgcGFja2FnZSB7MH0KIDkxNCA9IFRoZSByZXR1cm4gdHlwZSBpcyBpbmNv
bXBhdGlibGUgd2l0aCB0aGUgQHsxfSByZXR1cm4gZnJvbSB7MH0KIDkxNSA9IElsbGVnYWwgcmVk
ZWZpbml0aW9uIG9mIHBhcmFtZXRlciB7MH0sIGluaGVyaXRlZCBtZXRob2QgZnJvbSB7MX0gZGVj
bGFyZXMgdGhpcyBwYXJhbWV0ZXIgYXMgQHsyfQogOTE2ID0gSWxsZWdhbCByZWRlZmluaXRpb24g
b2YgcGFyYW1ldGVyIHswfSwgaW5oZXJpdGVkIG1ldGhvZCBmcm9tIHsxfSBkb2VzIG5vdCBjb25z
dHJhaW4gdGhpcyBwYXJhbWV0ZXIKQEAgLTY3OCw2ICs2NzgsNyBAQAogOTI3ID0gTnVsbG5lc3Mg
ZGVmYXVsdCBpcyByZWR1bmRhbnQgd2l0aCBhIGRlZmF1bHQgc3BlY2lmaWVkIGZvciB0aGUgZW5j
bG9zaW5nIHR5cGUgezB9CiA5MjggPSBOdWxsbmVzcyBkZWZhdWx0IGlzIHJlZHVuZGFudCB3aXRo
IGEgZGVmYXVsdCBzcGVjaWZpZWQgZm9yIHRoZSBlbmNsb3NpbmcgbWV0aG9kIHswfQogOTI5ID0g
Q29udHJhZGljdG9yeSBudWxsIHNwZWNpZmljYXRpb247IG9ubHkgb25lIG9mIEB7MH0gYW5kIEB7
MX0gY2FuIGJlIHNwZWNpZmllZCBhdCBhbnkgbG9jYXRpb24KKzkzMCA9IEEgZGVmYXVsdCBudWxs
bmVzcyBhbm5vdGF0aW9uIGhhcyBub3QgYmVlbiBzcGVjaWZpZWQgZm9yIHRoZSB0eXBlIHswfQog
CiAjIyMgRUxBQk9SQVRJT05TCiAjIyBBY2Nlc3MgcmVzdHJpY3Rpb25zCmRpZmYgLS1naXQgYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvY29yZS9KYXZhQ29yZS5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2NvcmUvSmF2
YUNvcmUuamF2YQppbmRleCAxODg4NzQ3Li4wN2U1NGMxIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvY29yZS9KYXZhQ29yZS5qYXZhCisrKyBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9jb3JlL0phdmFDb3Jl
LmphdmEKQEAgLTE0OTMsOSArMTQ5Myw3IEBACiAJICogICAgd2l0aGluIHRoZSBhbm5vdGF0ZWQg
ZWxlbWVudCB3aWxsIGJlIHRyZWF0ZWQgYXMgaWYgdGhleSB3ZXJlIHNwZWNpZmllZCB3aXRoIHRo
ZSBub24tbnVsbCBhbm5vdGF0aW9uCiAJICogICAgKHNlZSB7QGxpbmsgI0NPTVBJTEVSX05PTk5V
TExfQU5OT1RBVElPTl9OQU1FfSkuPC9wPgogCSAqIDxwPklmIHRoZSBhbm5vdGF0aW9uIGlzIGFw
cGxpZWQgd2l0aCB0aGUgY29uc3RhbnQgPGNvZGU+ZmFsc2U8L2NvZGU+IGFzIGl0cyBhcmd1bWVu
dAotCSAqICAgIGFsbCBjb3JyZXNwb25kaW5nIGRlZmF1bHRzIGF0IG91dGVyIHNjb3BlcyB3aWxs
IGJlIGNhbmNlbGVkIGZvciB0aGUgYW5ub3RhdGVkIGVsZW1lbnQuCi0JICogICAgVGhpcyBpbmNs
dWRlcyBkZWZhdWx0cyBzcGVjaWZpZWQgdXNpbmcgdGhpcyBhbm5vdGF0aW9uIHR5cGUgb3IgYSBk
ZWZhdWx0IGRlZmluZWQgdXNpbmcKLQkgKiAgICB0aGUgY29tcGlsZXIgb3B0aW9uIHtAbGluayAj
Q09NUElMRVJfTk9OTlVMTF9JU19ERUZBVUxUfS48L3A+CisJICogICAgYWxsIGNvcnJlc3BvbmRp
bmcgZGVmYXVsdHMgYXQgb3V0ZXIgc2NvcGVzIHdpbGwgYmUgY2FuY2VsZWQgZm9yIHRoZSBhbm5v
dGF0ZWQgZWxlbWVudC48L3A+CiAJICogPHA+VGhpcyBvcHRpb24gb25seSBoYXMgYW4gZWZmZWN0
IGlmIHRoZSBvcHRpb24ge0BsaW5rICNDT01QSUxFUl9BTk5PVEFUSU9OX05VTExfQU5BTFlTSVN9
IGlzIGVuYWJsZWQuPC9wPgogCSAqIDxkbD4KIAkgKiA8ZHQ+T3B0aW9uIGlkOjwvZHQ+PGRkPjxj
b2RlPiJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5hbm5vdGF0aW9uLm5vbm51bGxieWRl
ZmF1bHQiPC9jb2RlPjwvZGQ+CkBAIC0xNTA4LDE5ICsxNTA2LDIyIEBACiAJICovCiAJcHVibGlj
IHN0YXRpYyBmaW5hbCBTdHJpbmcgQ09NUElMRVJfTk9OTlVMTF9CWV9ERUZBVUxUX0FOTk9UQVRJ
T05fTkFNRSA9IFBMVUdJTl9JRCArICIuY29tcGlsZXIuYW5ub3RhdGlvbi5ub25udWxsYnlkZWZh
dWx0IjsgLy8kTk9OLU5MUy0xJAogCS8qKgotCSAqIENvbXBpbGVyIG9wdGlvbiBJRDogR2xvYmFs
bHkgc3BlY2lmeSBub24tbnVsbCBhcyB0aGUgYXNzdW1lZCBkZWZhdWx0IGZvciB1bmFubm90YXRl
ZCB0eXBlcy4KLQkgKiA8cD5XaGVuIGVuYWJsZWQsIHRoaXMgb3B0aW9uIGdsb2JhbGx5IGFjaGll
dmVzIHRoZSBzYW1lIGVmZmVjdCAKLQkgKiAgICBhcyBzcGVjaWZ5aW5nIHtAbGluayAjQ09NUElM
RVJfTk9OTlVMTF9BTk5PVEFUSU9OX05BTUV9IGRvZXMgZm9yIGluZGl2aWR1YWwgZWxlbWVudHMu
PC9wPgorCSAqIENvbXBpbGVyIG9wdGlvbiBJRDogUmVwb3J0aW5nIG1pc3NpbmcgZGVmYXVsdCBu
dWxsbmVzcyBhbm5vdGF0aW9uLgorCSAqIDxwPldoZW4gZW5hYmxlZCwgdGhlIGNvbXBpbGVyIHdp
bGwgaXNzdWUgYW4gZXJyb3Igb3IgYSB3YXJuaW5nIGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6PC9w
PgorCSAqIDx1bD4KKwkgKiA8bGk+IFdoZW4gYSBwYWNrYWdlLWluZm8uamF2YSBkb2VzIG5vdCBj
b250YWluIGEgZGVmYXVsdCBudWxsbmVzcyBhbm5vdGF0aW9uLjwvbGk+CisJICogPGxpPiBXaGVu
IGEgdHlwZSBpbnNpZGUgYSBkZWZhdWx0IHBhY2thZ2UgZG9lcyBub3QgY29udGFpbiBhIGRlZmF1
bHQgbnVsbG5lc3MgYW5ub3RhdGlvbi48L2xpPgorCSAqIDwvdWw+CiAJICogPHA+VGhpcyBvcHRp
b24gb25seSBoYXMgYW4gZWZmZWN0IGlmIHRoZSBvcHRpb24ge0BsaW5rICNDT01QSUxFUl9BTk5P
VEFUSU9OX05VTExfQU5BTFlTSVN9IGlzIGVuYWJsZWQuPC9wPgogCSAqIDxkbD4KLQkgKiA8ZHQ+
T3B0aW9uIGlkOjwvZHQ+PGRkPjxjb2RlPiJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5h
bm5vdGF0aW9uLm5vbm51bGxpc2RlZmF1bHQiPC9jb2RlPjwvZGQ+Ci0JICogPGR0PlBvc3NpYmxl
IHZhbHVlczo8L2R0PjxkZD48Y29kZT57ICJkaXNhYmxlZCIsICJlbmFibGVkIiB9PC9jb2RlPi48
L2RkPgotCSAqIDxkdD5EZWZhdWx0OjwvZHQ+PGRkPjxjb2RlPiJkaXNhYmxlZCI8L2NvZGU+PC9k
ZD4KKwkgKiA8ZHQ+T3B0aW9uIGlkOjwvZHQ+PGRkPjxjb2RlPiJvcmcuZWNsaXBzZS5qZHQuY29y
ZS5jb21waWxlci5hbm5vdGF0aW9uLm1pc3NpbmdOb25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbiI8
L2NvZGU+PC9kZD4KKwkgKiA8ZHQ+UG9zc2libGUgdmFsdWVzOjwvZHQ+PGRkPjxjb2RlPnsgImVy
cm9yIiwgIndhcm5pbmciLCAiaWdub3JlIiB9PC9jb2RlPi48L2RkPgorCSAqIDxkdD5EZWZhdWx0
OjwvZHQ+PGRkPjxjb2RlPiJpZ25vcmUiPC9jb2RlPjwvZGQ+CiAJICogPC9kbD4KIAkgKiBAc2lu
Y2UgMy44CiAJICogQGNhdGVnb3J5IENvbXBpbGVyT3B0aW9uSUQKIAkgKi8KLQlwdWJsaWMgc3Rh
dGljIGZpbmFsIFN0cmluZyBDT01QSUxFUl9OT05OVUxMX0lTX0RFRkFVTFQgPSBQTFVHSU5fSUQg
KyAiLmNvbXBpbGVyLmFubm90YXRpb24ubm9ubnVsbGlzZGVmYXVsdCI7IC8vJE5PTi1OTFMtMSQK
KwlwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBDT01QSUxFUl9QQl9NSVNTSU5HX05PTk5VTExf
QllfREVGQVVMVF9BTk5PVEFUSU9OID0gUExVR0lOX0lEICsgIi5jb21waWxlci5hbm5vdGF0aW9u
Lm1pc3NpbmdOb25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbiI7IC8vJE5PTi1OTFMtMSQKIAkvKioK
IAkgKiBDb21waWxlciBvcHRpb24gSUQ6IFJlcG9ydGluZyBWaW9sYXRpb25zIG9mIE51bGwgU3Bl
Y2lmaWNhdGlvbnMuCiAJICogPHA+RGVwZW5kaW5nIG9uIHRoaXMgb3B0aW9uLCB0aGUgY29tcGls
ZXIgd2lsbCBpc3N1ZSBlaXRoZXIgYW4gZXJyb3Igb3IgYSB3YXJuaW5nCkBAIC0xNjIyLDggKzE2
MjMsNyBAQAogCSAqIDxwPldoZW4gZW5hYmxlZCwgdGhlIGNvbXBpbGVyIHdpbGwgaXNzdWUgYW4g
ZXJyb3Igb3IgYSB3YXJuaW5nIHdoZW4gYSBub24tbnVsbCBhbm5vdGF0aW9uCiAJICogICAgKHNl
ZSB7QGxpbmsgI0NPTVBJTEVSX05PTk5VTExfQU5OT1RBVElPTl9OQU1FfSkKIAkgKiAgICBpcyBh
cHBsaWVkIGFsdGhvdWdoIHRoZSBzYW1lIGVmZmVjdCBpcyBhbHJlYWR5IGFjaGlldmVkIGJ5IGEg
ZGVmYXVsdCBhcHBsaWNhYmxlIGF0IHRoZQotCSAqICAgIGN1cnJlbnQgbG9jYXRpb24uIFN1Y2gg
YSBkZWZhdWx0IG1heSBiZSBzZXQgYnkgZW5hYmxpbmcgdGhlIG9wdGlvbgotCSAqICAgIHtAbGlu
ayAjQ09NUElMRVJfTk9OTlVMTF9JU19ERUZBVUxUfSBvciBieSB1c2luZyB0aGUgYW5ub3RhdGlv
biBzcGVjaWZpZWQgYnkgdGhlIG9wdGlvbgorCSAqICAgIGN1cnJlbnQgbG9jYXRpb24uIFN1Y2gg
YSBkZWZhdWx0IG1heSBiZSBzZXQgYnkgdXNpbmcgdGhlIGFubm90YXRpb24gc3BlY2lmaWVkIGJ5
IHRoZSBvcHRpb24KIAkgKiAgICB7QGxpbmsgI0NPTVBJTEVSX05PTk5VTExfQllfREVGQVVMVF9B
Tk5PVEFUSU9OX05BTUV9LgogCSAqIDwvcD4KIAkgKiA8cD5UaGlzIG9wdGlvbiBvbmx5IGhhcyBh
biBlZmZlY3QgaWYgdGhlIG9wdGlvbiB7QGxpbmsgI0NPTVBJTEVSX0FOTk9UQVRJT05fTlVMTF9B
TkFMWVNJU30gaXMgZW5hYmxlZC48L3A+
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>211800</attachid>
            <date>2012-02-29 09:17:00 -0500</date>
            <delta_ts>2012-03-02 04:36:41 -0500</delta_ts>
            <desc>patch to warn on package only</desc>
            <filename>Fixed-bug-372012-compilernull-Warn-when-defaults-not.patch</filename>
            <type>text/plain</type>
            <size>44030</size>
            <attacher name="Ayushman Jain">amj87.iitr</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0JhdGNoQ29tcGlsZXJU
ZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2Vj
bGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9CYXRjaENvbXBpbGVyVGVz
dC5qYXZhCmluZGV4IDAzMGYwZmQuLmU2MDZiOWYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21w
aWxlci9yZWdyZXNzaW9uL0JhdGNoQ29tcGlsZXJUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Nv
bXBpbGVyL3JlZ3Jlc3Npb24vQmF0Y2hDb21waWxlclRlc3QuamF2YQpAQCAtNzksNyArNzksNyBA
QAogCQkJIn1cbiI7CiAKIAlzdGF0aWMgewotLy8JCVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1td
IHsgInRlc3QzMSIgfTsKKy8vCQlURVNUU19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7ICJ0ZXN0MzE1
X3dhcm5fb3B0aW9ucyIgfTsKIC8vCQlURVNUU19OVU1CRVJTID0gbmV3IGludFtdIHsgMzA2IH07
CiAvLwkJVEVTVFNfUkFOR0UgPSBuZXcgaW50W10geyAyOTgsIC0xIH07CiAJfQpAQCAtMTY0NCw5
ICsxNjQ0LDggQEAKICAgICAgICAgIiAgICAtZW5hYmxlSmF2YWRvYyAgICAgY29uc2lkZXIgcmVm
ZXJlbmNlcyBpbiBqYXZhZG9jXG4iICsKICAgICAgICAgIiAgICAtWGVtYWNzICAgICAgICAgICAg
dXNlZCB0byBlbmFibGUgZW1hY3Mtc3R5bGUgb3V0cHV0IGluIHRoZSBjb25zb2xlLlxuIiArCiAg
ICAgICAgICIgICAgICAgICAgICAgICAgICAgICAgIEl0IGRvZXMgbm90IGFmZmVjdCB0aGUgeG1s
IGxvZyBvdXRwdXRcbiIgKwotICAgICAgICAiICAgIC1ub25OdWxsQnlEZWZhdWx0ICBmb3IgYW5u
b3RhdGlvbiBiYXNlZCBudWxsIGFuYWx5c2lzIGFzc3VtZSBub25udWxsXG4iICsgCi0gICAgICAg
ICIgICAgICAgICAgICAgICAgICAgICAgIGFzIHRoZSBnbG9iYWwgZGVmYXVsdFxuIiArIAotICAg
ICAgICAiIFxuIiArCisgICAgICAgICIgICAgLW1pc3NpbmdEZWZhdWx0QW5ub3QgIHJlcG9ydCBt
aXNzaW5nIGRlZmF1bHQgbnVsbG5lc3MgYW5ub3RhdGlvblxuIiArIAorICAgICAgICAiIFxuIiAr
IAogICAgICAgICAiICAgIC0/IC1oZWxwICAgICAgICAgICBwcmludCB0aGlzIGhlbHAgbWVzc2Fn
ZVxuIiArCiAgICAgICAgICIgICAgLXYgLXZlcnNpb24gICAgICAgIHByaW50IGNvbXBpbGVyIHZl
cnNpb25cbiIgKwogICAgICAgICAiICAgIC1zaG93dmVyc2lvbiAgICAgICBwcmludCBjb21waWxl
ciB2ZXJzaW9uIGFuZCBjb250aW51ZVxuIiArCkBAIC0xODM4LDkgKzE4MzcsOSBAQAogCQkJIgkJ
PGFyZ3VtZW50IHZhbHVlPVwiLS0tT1VUUFVUX0RJUl9QTEFDRUhPTERFUi0tLVwiLz5cbiIgKyAK
IAkJCSIJPC9jb21tYW5kX2xpbmU+XG4iICsgCiAJCQkiCTxvcHRpb25zPlxuIiArIAorCQkJIgkJ
PG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5hbm5vdGF0aW9uLm1p
c3NpbmdOb25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvblwiIHZhbHVlPVwiaWdub3JlXCIvPlxuIiAr
IAogCQkJIgkJPG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5hbm5v
dGF0aW9uLm5vbm51bGxcIiB2YWx1ZT1cIm9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uLk5vbk51
bGxcIi8+XG4iICsgCiAJCQkiCQk8b3B0aW9uIGtleT1cIm9yZy5lY2xpcHNlLmpkdC5jb3JlLmNv
bXBpbGVyLmFubm90YXRpb24ubm9ubnVsbGJ5ZGVmYXVsdFwiIHZhbHVlPVwib3JnLmVjbGlwc2Uu
amR0LmFubm90YXRpb24uTm9uTnVsbEJ5RGVmYXVsdFwiLz5cbiIgKyAKLQkJCSIJCTxvcHRpb24g
a2V5PVwib3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuYW5ub3RhdGlvbi5ub25udWxsaXNk
ZWZhdWx0XCIgdmFsdWU9XCJkaXNhYmxlZFwiLz5cbiIgKyAKIAkJCSIJCTxvcHRpb24ga2V5PVwi
b3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuYW5ub3RhdGlvbi5udWxsYWJsZVwiIHZhbHVl
PVwib3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTnVsbGFibGVcIi8+XG4iICsgCiAJCQkiCQk8
b3B0aW9uIGtleT1cIm9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLmFubm90YXRpb24ubnVs
bGFuYWx5c2lzXCIgdmFsdWU9XCJkaXNhYmxlZFwiLz5cbiIgKyAKIAkJCSIJCTxvcHRpb24ga2V5
PVwib3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuY29kZWdlbi5pbmxpbmVKc3JCeXRlY29k
ZVwiIHZhbHVlPVwiZGlzYWJsZWRcIi8+XG4iICsgCkBAIC0xMjU5OCwzMSArMTI1OTcsMjggQEAK
IH0KIAogLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTMy
NTM0MgotLy8gLXdhcm4gb3B0aW9uIC0gcmVncmVzc2lvbiB0ZXN0cyB0byBjaGVjayBvcHRpb24g
bnVsbEFubm90Ci0vLyBOdWxsIHdhcm5pbmdzIGJlY2F1c2Ugb2YgYW5ub3RhdGlvbnMsIGdsb2Jh
bCBub25OdWxsQnlEZWZhdWx0Ci0vLyBESVNBQkxFRCBkdWUgdG8gZHlzZnVuY3Rpb25hbCBnbG9i
YWwgZGVmYXVsdCBhZnRlciBCdWcgMzY2MDYzIC0gQ29tcGlsZXIgc2hvdWxkIG5vdCBhZGQgc3lu
dGhldGljIEBOb25OdWxsIGFubm90YXRpb25zCi1wdWJsaWMgdm9pZCBfdGVzdDMxNV93YXJuX29w
dGlvbnMoKSB7CisvLyAtd2FybiBvcHRpb24gLSByZWdyZXNzaW9uIHRlc3RzIHRvIGNoZWNrIG9w
dGlvbiBudWxsQW5ub3QgYW5kIG1pc3NpbmdEZWZhdWx0QW5ub3QKKy8vIGh0dHBzOi8vYnVncy5l
Y2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNzIwMTIKK3B1YmxpYyB2b2lkIHRlc3Qz
MTVfd2Fybl9vcHRpb25zKCkgewogCXRoaXMucnVuQ29uZm9ybVRlc3QoCiAJCW5ldyBTdHJpbmdb
XSB7CisJCQkJInAvcGFja2FnZS1pbmZvLmphdmEiLAorCQkJCSJAb3JnLmVjbGlwc2UuamR0LmFu
bm90YXRpb24uTm9uTnVsbEJ5RGVmYXVsdFxuIiArCisJCQkJInBhY2thZ2UgcDtcbiIsCiAJCQkJ
InAvWC5qYXZhIiwKIAkJCQkicGFja2FnZSBwO1xuIiArCi0JCQkJImltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuYW5ub3RhdGlvbi4qO1xuIiArCi0JCQkJIkBTdXBwcmVzc1dhcm5pbmdzKFwidW51c2Vk
XCIpXG4iICsKIAkJCQkicHVibGljIGNsYXNzIFgge1xuIiArCi0JCQkJIiAgT2JqZWN0IGZvbyhA
TnVsbGFibGUgT2JqZWN0IG8sIE9iamVjdCBvMikge1xuIiArCi0JCQkJIiAgICBpZiAoby50b1N0
cmluZygpID09IFwiXCIpeyByZXR1cm4gbnVsbDt9XG4iICsKLQkJCQkiICAgIGlmIChvMiA9PSBu
dWxsKSB7fVxuIiArCi0JCQkJIiAgICBnb28obnVsbCkudG9TdHJpbmcoKTtcbiIgKwotCQkJCSIJ
IHJldHVybiBudWxsO1xuIiArCi0JCQkJIiAgfVxuIiArCi0JCQkJIiAgQE51bGxhYmxlIE9iamVj
dCBnb28oT2JqZWN0IG8yKSB7XG4iICsKLQkJCQkiICAgIHJldHVybiBuZXcgT2JqZWN0KCk7XG4i
ICsKLQkJCQkiICB9XG4iICsKLQkJCQkiICBATm9uTnVsbEJ5RGVmYXVsdCBPYmplY3QgaG9vKE9i
amVjdCBvMikge1xuIiArIC8vIHJlZHVuZGFudAotCQkJCSIgICAgaWYgKG8yID09IG51bGwpXG4i
ICsKLQkJCQkiCSAgICByZXR1cm4gbnVsbDtcbiIgKwotCQkJCSIgICAgcmV0dXJuIHRoaXM7XG4i
ICsKLQkJCQkiICB9XG4iICsKKwkJCQkifVxuIiwKKwkJCQkicDEvWDEuamF2YSIsCisJCQkJInBh
Y2thZ2UgcDE7XG4iICsKKwkJCQkicHVibGljIGNsYXNzIFgxIHtcbiIgKworCQkJCSJ9XG4iLAor
CQkJCSJwMS9YMWEuamF2YSIsCisJCQkJInBhY2thZ2UgcDE7XG4iICsKKwkJCQkicHVibGljIGNs
YXNzIFgxYSB7XG4iICsKKwkJCQkifVxuIiwKKwkJCQkiRGVmYXVsdDEuamF2YSIsCisJCQkJInB1
YmxpYyBjbGFzcyBEZWZhdWx0MSB7XG4iICsKIAkJCQkifVxuIiwKIAkJCQkib3JnL2VjbGlwc2Uv
amR0L2Fubm90YXRpb24vTm9uTnVsbC5qYXZhIiwKIAkJCQlOT05OVUxMX0FOTk9UQVRJT05fQ09O
VEVOVCwKQEAgLTEyNjM0LDUwICsxMjYzMCw4NCBAQAogCQkiXCIiICsgT1VUUFVUX0RJUiArICBG
aWxlLnNlcGFyYXRvciArICJwIiArIEZpbGUuc2VwYXJhdG9yICsgIlguamF2YVwiIgogCQkrICIg
LXNvdXJjZXBhdGggXCIiICsgT1VUUFVUX0RJUiArICJcIiIKIAkJKyAiIC0xLjUiCi0JCSsgIiAt
d2FybjorbnVsbEFubm90IC13YXJuOitudWxsIC1ub25OdWxsQnlEZWZhdWx0IC1wcm9jOm5vbmUg
LWQgXCIiICsgT1VUUFVUX0RJUiArICJcIiIsCisJCSsgIiAtd2FybjorbnVsbEFubm90IC13YXJu
OitudWxsIC1taXNzaW5nRGVmYXVsdEFubm90IC1wcm9jOm5vbmUgLWQgXCIiICsgT1VUUFVUX0RJ
UiArICJcIiIsCisJCSIiLAorCQkiIiwKKwkJdHJ1ZSk7Cit9CisKKy8vIGh0dHBzOi8vYnVncy5l
Y2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zMjUzNDIKKy8vIC13YXJuIG9wdGlvbiAt
IHJlZ3Jlc3Npb24gdGVzdHMgdG8gY2hlY2sgb3B0aW9uIG51bGxBbm5vdCBhbmQgbWlzc2luZ0Rl
ZmF1bHRBbm5vdAorLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dp
P2lkPTM3MjAxMgorcHVibGljIHZvaWQgdGVzdDMxNV93YXJuX29wdGlvbnNfYSgpIHsKKwl0aGlz
LnJ1bk5lZ2F0aXZlVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCQkicDEvWDEuamF2YSIsCisJ
CQkJInBhY2thZ2UgcDE7XG4iICsKKwkJCQkicHVibGljIGNsYXNzIFgxIHtcbiIgKworCQkJCSIJ
Wm9yaztcbiIgKworCQkJCSJ9XG4iLAorCQkJCSJvcmcvZWNsaXBzZS9qZHQvYW5ub3RhdGlvbi9O
b25OdWxsLmphdmEiLAorCQkJCU5PTk5VTExfQU5OT1RBVElPTl9DT05URU5ULAorCQkJCSJvcmcv
ZWNsaXBzZS9qZHQvYW5ub3RhdGlvbi9OdWxsYWJsZS5qYXZhIiwKKwkJCQlOVUxMQUJMRV9BTk5P
VEFUSU9OX0NPTlRFTlQsCisJCQkJIm9yZy9lY2xpcHNlL2pkdC9hbm5vdGF0aW9uL05vbk51bGxC
eURlZmF1bHQuamF2YSIsCQkJCQorCQkJCU5PTk5VTExfQllfREVGQVVMVF9BTk5PVEFUSU9OX0NP
TlRFTlQKKwkJfSwKKwkJIlwiIiArIE9VVFBVVF9ESVIgKyAgRmlsZS5zZXBhcmF0b3IgKyAicDEi
ICsgRmlsZS5zZXBhcmF0b3IgKyAiWDEuamF2YVwiIgorCQkrICIgLXNvdXJjZXBhdGggXCIiICsg
T1VUUFVUX0RJUiArICJcIiIKKwkJKyAiIC0xLjUiCisJCSsgIiAtd2FybjorbnVsbEFubm90IC13
YXJuOitudWxsIC1taXNzaW5nRGVmYXVsdEFubm90IC1wcm9jOm5vbmUgLWQgXCIiICsgT1VUUFVU
X0RJUiArICJcIiIsCiAJCSIiLAogCQkiLS0tLS0tLS0tLVxuIiArIAotCQkiMS4gV0FSTklORyBp
biAtLS1PVVRQVVRfRElSX1BMQUNFSE9MREVSLS0tL3AvWC5qYXZhIChhdCBsaW5lIDYpXG4iICsg
Ci0JCSIJaWYgKG8udG9TdHJpbmcoKSA9PSBcIlwiKXsgcmV0dXJuIG51bGw7fVxuIiArIAotCQki
CSAgICBeXG4iICsgCi0JCSJQb3RlbnRpYWwgbnVsbCBwb2ludGVyIGFjY2VzczogVGhlIHZhcmlh
YmxlIG8gbWF5IGJlIG51bGwgYXQgdGhpcyBsb2NhdGlvblxuIiArIAorCQkiMS4gV0FSTklORyBp
biAtLS1PVVRQVVRfRElSX1BMQUNFSE9MREVSLS0tL3AxL1gxLmphdmEgKGF0IGxpbmUgMSlcbiIg
KyAKKwkJIglwYWNrYWdlIHAxO1xuIiArIAorCQkiCSAgICAgICAgXl5cbiIgKyAKKwkJIkEgZGVm
YXVsdCBudWxsbmVzcyBhbm5vdGF0aW9uIGhhcyBub3QgYmVlbiBzcGVjaWZpZWQgZm9yIHRoZSBw
YWNrYWdlIHAxXG4iICsgCiAJCSItLS0tLS0tLS0tXG4iICsgCi0JCSIyLiBXQVJOSU5HIGluIC0t
LU9VVFBVVF9ESVJfUExBQ0VIT0xERVItLS0vcC9YLmphdmEgKGF0IGxpbmUgNilcbiIgKyAKLQkJ
IglpZiAoby50b1N0cmluZygpID09IFwiXCIpeyByZXR1cm4gbnVsbDt9XG4iICsgCi0JCSIJICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXG4iICsgCi0JCSJUeXBlIG1pc21hdGNo
OiByZXF1aXJlZCBcJ0BOb25OdWxsIE9iamVjdFwnIGJ1dCB0aGUgcHJvdmlkZWQgdmFsdWUgaXMg
bnVsbFxuIiArIAorCQkiMi4gRVJST1IgaW4gLS0tT1VUUFVUX0RJUl9QTEFDRUhPTERFUi0tLS9w
MS9YMS5qYXZhIChhdCBsaW5lIDMpXG4iICsgCisJCSIJWm9yaztcbiIgKyAKKwkJIgleXl5eXG4i
ICsgCisJCSJTeW50YXggZXJyb3Igb24gdG9rZW4gXCJab3JrXCIsIFZhcmlhYmxlRGVjbGFyYXRv
ciBleHBlY3RlZCBhZnRlciB0aGlzIHRva2VuXG4iICsgCiAJCSItLS0tLS0tLS0tXG4iICsgCi0J
CSIzLiBXQVJOSU5HIGluIC0tLU9VVFBVVF9ESVJfUExBQ0VIT0xERVItLS0vcC9YLmphdmEgKGF0
IGxpbmUgNylcbiIgKyAKLQkJIglpZiAobzIgPT0gbnVsbCkge31cbiIgKyAKLQkJIgkgICAgXl5c
biIgKyAKLQkJIk51bGwgY29tcGFyaXNvbiBhbHdheXMgeWllbGRzIGZhbHNlOiBUaGUgdmFyaWFi
bGUgbzIgY2Fubm90IGJlIG51bGwgYXQgdGhpcyBsb2NhdGlvblxuIiArIAorCQkiMiBwcm9ibGVt
cyAoMSBlcnJvciwgMSB3YXJuaW5nKSIsIAorCQl0cnVlKTsKK30KKworLy8gaHR0cHM6Ly9idWdz
LmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTMyNTM0MgorLy8gLXdhcm4gb3B0aW9u
IC0gcmVncmVzc2lvbiB0ZXN0cyB0byBjaGVjayBvcHRpb24gbnVsbEFubm90IGFuZCBtaXNzaW5n
RGVmYXVsdEFubm90CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5j
Z2k/aWQ9MzcyMDEyCitwdWJsaWMgdm9pZCB0ZXN0MzE1X3dhcm5fb3B0aW9uc19iKCkgeworCXRo
aXMucnVuTmVnYXRpdmVUZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJCSJYMS5qYXZhIiwKKwkJ
CQkicHVibGljIGNsYXNzIFgxIHtcbiIgKworCQkJCSIJWm9yaztcbiIgKworCQkJCSJ9XG4iLAor
CQkJCSJvcmcvZWNsaXBzZS9qZHQvYW5ub3RhdGlvbi9Ob25OdWxsLmphdmEiLAorCQkJCU5PTk5V
TExfQU5OT1RBVElPTl9DT05URU5ULAorCQkJCSJvcmcvZWNsaXBzZS9qZHQvYW5ub3RhdGlvbi9O
dWxsYWJsZS5qYXZhIiwKKwkJCQlOVUxMQUJMRV9BTk5PVEFUSU9OX0NPTlRFTlQsCisJCQkJIm9y
Zy9lY2xpcHNlL2pkdC9hbm5vdGF0aW9uL05vbk51bGxCeURlZmF1bHQuamF2YSIsCQkJCQorCQkJ
CU5PTk5VTExfQllfREVGQVVMVF9BTk5PVEFUSU9OX0NPTlRFTlQKKwkJfSwKKwkJIlwiIiArIE9V
VFBVVF9ESVIgKyAgRmlsZS5zZXBhcmF0b3IgKyAiWDEuamF2YVwiIgorCQkrICIgLXNvdXJjZXBh
dGggXCIiICsgT1VUUFVUX0RJUiArICJcIiIKKwkJKyAiIC0xLjUiCisJCSsgIiAtd2FybjorbnVs
bEFubm90IC13YXJuOitudWxsIC1taXNzaW5nRGVmYXVsdEFubm90IC1wcm9jOm5vbmUgLWQgXCIi
ICsgT1VUUFVUX0RJUiArICJcIiIsCisJCSIiLAogCQkiLS0tLS0tLS0tLVxuIiArIAotCQkiNC4g
V0FSTklORyBpbiAtLS1PVVRQVVRfRElSX1BMQUNFSE9MREVSLS0tL3AvWC5qYXZhIChhdCBsaW5l
IDgpXG4iICsgCi0JCSIJZ29vKG51bGwpLnRvU3RyaW5nKCk7XG4iICsgCi0JCSIJXl5eXl5eXl5e
XG4iICsgCi0JCSJQb3RlbnRpYWwgbnVsbCBwb2ludGVyIGFjY2VzczogVGhlIG1ldGhvZCBnb28o
T2JqZWN0KSBtYXkgcmV0dXJuIG51bGxcbiIgKyAKKwkJIjEuIFdBUk5JTkcgaW4gLS0tT1VUUFVU
X0RJUl9QTEFDRUhPTERFUi0tLS9YMS5qYXZhIChhdCBsaW5lIDEpXG4iICsgCisJCSIJcHVibGlj
IGNsYXNzIFgxIHtcbiIgKyAKKwkJIgkgICAgICAgICAgICAgXl5cbiIgKyAKKwkJIkEgZGVmYXVs
dCBudWxsbmVzcyBhbm5vdGF0aW9uIGhhcyBub3QgYmVlbiBzcGVjaWZpZWQgZm9yIHRoZSB0eXBl
IFgxXG4iICsgCiAJCSItLS0tLS0tLS0tXG4iICsgCi0JCSI1LiBXQVJOSU5HIGluIC0tLU9VVFBV
VF9ESVJfUExBQ0VIT0xERVItLS0vcC9YLmphdmEgKGF0IGxpbmUgOClcbiIgKyAKLQkJIglnb28o
bnVsbCkudG9TdHJpbmcoKTtcbiIgKyAKLQkJIgkgICAgXl5eXlxuIiArIAotCQkiVHlwZSBtaXNt
YXRjaDogcmVxdWlyZWQgXCdATm9uTnVsbCBPYmplY3RcJyBidXQgdGhlIHByb3ZpZGVkIHZhbHVl
IGlzIG51bGxcbiIgKyAKKwkJIjIuIEVSUk9SIGluIC0tLU9VVFBVVF9ESVJfUExBQ0VIT0xERVIt
LS0vWDEuamF2YSAoYXQgbGluZSAyKVxuIiArIAorCQkiCVpvcms7XG4iICsgCisJCSIJXl5eXlxu
IiArIAorCQkiU3ludGF4IGVycm9yIG9uIHRva2VuIFwiWm9ya1wiLCBWYXJpYWJsZURlY2xhcmF0
b3IgZXhwZWN0ZWQgYWZ0ZXIgdGhpcyB0b2tlblxuIiArIAogCQkiLS0tLS0tLS0tLVxuIiArIAot
CQkiNi4gV0FSTklORyBpbiAtLS1PVVRQVVRfRElSX1BMQUNFSE9MREVSLS0tL3AvWC5qYXZhIChh
dCBsaW5lIDkpXG4iICsgCi0JCSIJcmV0dXJuIG51bGw7XG4iICsgCi0JCSIJICAgICAgIF5eXl5c
biIgKyAKLQkJIlR5cGUgbWlzbWF0Y2g6IHJlcXVpcmVkIFwnQE5vbk51bGwgT2JqZWN0XCcgYnV0
IHRoZSBwcm92aWRlZCB2YWx1ZSBpcyBudWxsXG4iICsgCi0JCSItLS0tLS0tLS0tXG4iICsgCi0J
CSI3LiBXQVJOSU5HIGluIC0tLU9VVFBVVF9ESVJfUExBQ0VIT0xERVItLS0vcC9YLmphdmEgKGF0
IGxpbmUgMTQpXG4iICsgCi0JCSIJQE5vbk51bGxCeURlZmF1bHQgT2JqZWN0IGhvbyhPYmplY3Qg
bzIpIHtcbiIgKyAKLQkJIgleXl5eXl5eXl5eXl5eXl5eXlxuIiArIAotCQkiTnVsbG5lc3MgZGVm
YXVsdCBpcyByZWR1bmRhbnQgd2l0aCB0aGUgZ2xvYmFsIGRlZmF1bHRcbiIgKyAKLQkJIi0tLS0t
LS0tLS1cbiIgKyAKLQkJIjguIFdBUk5JTkcgaW4gLS0tT1VUUFVUX0RJUl9QTEFDRUhPTERFUi0t
LS9wL1guamF2YSAoYXQgbGluZSAxNSlcbiIgKyAKLQkJIglpZiAobzIgPT0gbnVsbClcbiIgKyAK
LQkJIgkgICAgXl5cbiIgKyAKLQkJIk51bGwgY29tcGFyaXNvbiBhbHdheXMgeWllbGRzIGZhbHNl
OiBUaGUgdmFyaWFibGUgbzIgY2Fubm90IGJlIG51bGwgYXQgdGhpcyBsb2NhdGlvblxuIiArIAot
CQkiLS0tLS0tLS0tLVxuIiArIAotCQkiOCBwcm9ibGVtcyAoOCB3YXJuaW5ncykiLCAKKwkJIjIg
cHJvYmxlbXMgKDEgZXJyb3IsIDEgd2FybmluZykiLCAKIAkJdHJ1ZSk7CiB9CiAKZGlmZiAtLWdp
dCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxBbm5vdGF0aW9uVGVzdC5qYXZh
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pk
dC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbEFubm90YXRpb25UZXN0LmphdmEK
aW5kZXggYjY0ZTVlOC4uYzVlN2NhZSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUu
dGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3Jl
Z3Jlc3Npb24vTnVsbEFubm90YXRpb25UZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vTnVsbEFubm90YXRpb25UZXN0LmphdmEKQEAgLTE5MTQsMjkgKzE5MTQsNiBA
QAogCQkiLS0tLS0tLS0tLVxuIiwKIAkJSmF2YWNUZXN0T3B0aW9ucy5FeGN1c2UuRWNsaXBzZVdh
cm5pbmdDb25maWd1cmVkQXNFcnJvcik7CiB9Ci0vLyB1c2luZyBudWxsbmVzcyBkZWZhdWx0aW5n
IHRvIG5vbm51bGwsIG1pc3NpbmcgYW5ub3RhdGlvbiB0eXBlcywgbm8gbG9uZ2VyIGEgcHJvYmxl
bQotcHVibGljIHZvaWQgdGVzdF9hbm5vdGF0aW9uX2ltcG9ydF8wMDcoKSB7Ci0JTWFwIGN1c3Rv
bU9wdGlvbnMgPSBnZXRDb21waWxlck9wdGlvbnMoKTsKLQljdXN0b21PcHRpb25zLnB1dChKYXZh
Q29yZS5DT01QSUxFUl9QQl9OVUxMX1NQRUNJRklDQVRJT05fSU5TVUZGSUNJRU5UX0lORk8sIEph
dmFDb3JlLkVSUk9SKTsKLQljdXN0b21PcHRpb25zLnB1dChKYXZhQ29yZS5DT01QSUxFUl9OVUxM
QUJMRV9BTk5PVEFUSU9OX05BTUUsICJvcmcuZm9vLk1heUJlTnVsbCIpOwotCWN1c3RvbU9wdGlv
bnMucHV0KEphdmFDb3JlLkNPTVBJTEVSX05PTk5VTExfQU5OT1RBVElPTl9OQU1FLCAib3JnLmZv
by5NdXN0Tm90QmVOdWxsIik7Ci0JY3VzdG9tT3B0aW9ucy5wdXQoSmF2YUNvcmUuQ09NUElMRVJf
Tk9OTlVMTF9JU19ERUZBVUxULCBKYXZhQ29yZS5FTkFCTEVEKTsKLQlydW5Db25mb3JtVGVzdFdp
dGhMaWJzKAotCQluZXcgU3RyaW5nW10gewotCQkJIkxpYi5qYXZhIiwKLQkJCSJwdWJsaWMgY2xh
c3MgTGliIHtcbiIgKwotCQkJIiAgICBPYmplY3QgZ2V0T2JqZWN0KCkgeyByZXR1cm4gbmV3IE9i
amVjdCgpOyB9XG4iICsKLQkJCSJ9XG4iLAotCQkJIlguamF2YSIsCi0JCQkicHVibGljIGNsYXNz
IFgge1xuIiArCi0JCQkiICAgIE9iamVjdCBnZXRPYmplY3QoTGliIGwpIHtcbiIgKwotCQkJIiAg
ICAgICAgcmV0dXJuIGwuZ2V0T2JqZWN0KCk7XG4iICsKLQkJCSIgICAgfVxuIiArCi0JCQkifVxu
IgotCQl9LAotCQljdXN0b21PcHRpb25zLAotCQkiIik7Ci19CiAKIC8vIGEgbnVsbCBhbm5vdGF0
aW9uIGlzIGlsbGVnYWxseSB1c2VkIG9uIGEgY2xhc3M6CiBwdWJsaWMgdm9pZCB0ZXN0X2lsbGVn
YWxfYW5ub3RhdGlvbl8wMDEoKSB7CkBAIC0yNDA5LDcgKzIzODYsNyBAQAogcHVibGljIHZvaWQg
X3Rlc3RfZGVmYXVsdF9udWxsbmVzc18wMDcoKSB7CiAJTWFwIGN1c3RvbU9wdGlvbnMgPSBnZXRD
b21waWxlck9wdGlvbnMoKTsKIC8vCWN1c3RvbU9wdGlvbnMucHV0KENvbXBpbGVyT3B0aW9ucy5P
UFRJT05fUmVwb3J0UG90ZW50aWFsTnVsbFNwZWNWaW9sYXRpb24sIEphdmFDb3JlLkVSUk9SKTsK
LQljdXN0b21PcHRpb25zLnB1dChKYXZhQ29yZS5DT01QSUxFUl9OT05OVUxMX0lTX0RFRkFVTFQs
IEphdmFDb3JlLkVOQUJMRUQpOworLy8JY3VzdG9tT3B0aW9ucy5wdXQoSmF2YUNvcmUuQ09NUElM
RVJfTk9OTlVMTF9JU19ERUZBVUxULCBKYXZhQ29yZS5FTkFCTEVEKTsKIAlydW5OZWdhdGl2ZVRl
c3RXaXRoTGlicygKIAkJbmV3IFN0cmluZ1tdIHsKIAkJCSJYLmphdmEiLApAQCAtMjg2MCw0OCAr
MjgzNywxMTAgQEAKIAkJIi0tLS0tLS0tLS1cbiIpOwogfQogCi0vLyByZWR1bmRhbnQgZGVmYXVs
dCBhbm5vdGF0aW9ucyAtIHBhY2thZ2UgLyBjbGFzcyAvIG1ldGhvZCB2cyBnbG9iYWwgZGVmYXVs
dAotLy8gRElTQUJMRUQgZHVlIHRvIGR5c2Z1bmN0aW9uYWwgZ2xvYmFsIGRlZmF1bHQgYWZ0ZXIg
QnVnIDM2NjA2MyAtIENvbXBpbGVyIHNob3VsZCBub3QgYWRkIHN5bnRoZXRpYyBATm9uTnVsbCBh
bm5vdGF0aW9ucwotcHVibGljIHZvaWQgX3Rlc3RfcmVkdW5kYW50X2Fubm90YXRpb25fMDMoKSB7
CisvLyB0ZXN0IG1pc3NpbmcgZGVmYXVsdCBudWxsbmVzcyBhbm5vdGF0aW9uIGZvciB0eXBlcyBp
biBkZWZhdWx0IHBhY2thZ2UKK3B1YmxpYyB2b2lkIHRlc3RfbWlzc2luZ19kZWZhdWx0X2Fubm90
YXRpb25fMDEoKSB7CiAJTWFwIGN1c3RvbU9wdGlvbnMgPSBnZXRDb21waWxlck9wdGlvbnMoKTsK
LQljdXN0b21PcHRpb25zLnB1dChKYXZhQ29yZS5DT01QSUxFUl9OT05OVUxMX0lTX0RFRkFVTFQs
IEphdmFDb3JlLkVOQUJMRUQpOwotCXJ1bkNvbmZvcm1UZXN0V2l0aExpYnMoCisJY3VzdG9tT3B0
aW9ucy5wdXQoSmF2YUNvcmUuQ09NUElMRVJfUEJfTUlTU0lOR19OT05OVUxMX0JZX0RFRkFVTFRf
QU5OT1RBVElPTiwgSmF2YUNvcmUuRVJST1IpOworCXJ1bk5lZ2F0aXZlVGVzdFdpdGhMaWJzKAor
CQluZXcgU3RyaW5nW10geworCQkJIkxpYi5qYXZhIiwKKwkJCSJwdWJsaWMgY2xhc3MgTGliIHtc
biIgKworCQkJIiAgICBPYmplY3QgZ2V0T2JqZWN0KCkgeyByZXR1cm4gbmV3IE9iamVjdCgpOyB9
XG4iICsKKwkJCSJ9XG4iLAorCQkJIlguamF2YSIsCisJCQkicHVibGljIGNsYXNzIFgge1xuIiAr
CisJCQkiCSBjbGFzcyBYSW5uZXJ7fVxuIiArICAvLyBkb24ndCB3YXJuIGZvciBpbm5lciB0eXBl
cworCQkJIiAgICBPYmplY3QgZ2V0T2JqZWN0KExpYiBsKSB7XG4iICsKKwkJCSIgICAgICAgIHJl
dHVybiBsLmdldE9iamVjdCgpO1xuIiArCisJCQkiICAgIH1cbiIgKworCQkJIn1cbiIKKwkJfSwK
KwkJY3VzdG9tT3B0aW9ucywKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjEuIEVSUk9SIGluIExp
Yi5qYXZhIChhdCBsaW5lIDEpXG4iICsgCisJCSIJcHVibGljIGNsYXNzIExpYiB7XG4iICsgCisJ
CSIJICAgICAgICAgICAgIF5eXlxuIiArIAorCQkiQSBkZWZhdWx0IG51bGxuZXNzIGFubm90YXRp
b24gaGFzIG5vdCBiZWVuIHNwZWNpZmllZCBmb3IgdGhlIHR5cGUgTGliXG4iICsgCisJCSItLS0t
LS0tLS0tXG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJPUiBpbiBYLmphdmEg
KGF0IGxpbmUgMSlcbiIgKyAKKwkJIglwdWJsaWMgY2xhc3MgWCB7XG4iICsgCisJCSIJICAgICAg
ICAgICAgIF5cbiIgKyAKKwkJIkEgZGVmYXVsdCBudWxsbmVzcyBhbm5vdGF0aW9uIGhhcyBub3Qg
YmVlbiBzcGVjaWZpZWQgZm9yIHRoZSB0eXBlIFhcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIpOwor
fQorCisvLyB0ZXN0IG1pc3NpbmcgZGVmYXVsdCBudWxsbmVzcyBhbm5vdGF0aW9uIGZvciBhIHBh
Y2thZ2Ugd2l0aCBwYWNrYWdlLWluZm8KK3B1YmxpYyB2b2lkIHRlc3RfbWlzc2luZ19kZWZhdWx0
X2Fubm90YXRpb25fMDIoKSB7CisJTWFwIGN1c3RvbU9wdGlvbnMgPSBnZXRDb21waWxlck9wdGlv
bnMoKTsKKwljdXN0b21PcHRpb25zLnB1dChKYXZhQ29yZS5DT01QSUxFUl9QQl9NSVNTSU5HX05P
Tk5VTExfQllfREVGQVVMVF9BTk5PVEFUSU9OLCBKYXZhQ29yZS5FUlJPUik7CisJcnVuTmVnYXRp
dmVUZXN0V2l0aExpYnMoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkicDIvcGFja2FnZS1pbmZvLmph
dmEiLAorCQkJInBhY2thZ2UgcDI7XG4iLAorCQkJInAyL1kuamF2YSIsCisJCQkicGFja2FnZSBw
MjtcbiIgKworCQkJImltcG9ydCBvcmcuZWNsaXBzZS5qZHQuYW5ub3RhdGlvbi4qO1xuIiArCisJ
CQkiQE5vbk51bGxCeURlZmF1bHRcbiIgKworCQkJInB1YmxpYyBjbGFzcyBZIHtcbiIgKworCQkJ
IiAgIHZvaWQgZm9vKCkge31cbiIgKworCQkJIn1cbiIsCisJCQkicDMvcGFja2FnZS1pbmZvLmph
dmEiLAorCQkJIkBvcmcuZWNsaXBzZS5qZHQuYW5ub3RhdGlvbi5Ob25OdWxsQnlEZWZhdWx0IHBh
Y2thZ2UgcDM7XG4iLAorCQkJInAzL1ouamF2YSIsCisJCQkicGFja2FnZSBwMztcbiIgKworCQkJ
ImltcG9ydCBvcmcuZWNsaXBzZS5qZHQuYW5ub3RhdGlvbi4qO1xuIiArCisJCQkicHVibGljIGNs
YXNzIFoge1xuIiArCisJCQkiICAgIEBOb25OdWxsQnlEZWZhdWx0IHZvaWQgYmFyKCkge31cbiIg
KworCQkJIn1cbiIsCisJCX0sCisJCWN1c3RvbU9wdGlvbnMsCisJCSItLS0tLS0tLS0tXG4iICsg
CisJCSIxLiBFUlJPUiBpbiBwMlxccGFja2FnZS1pbmZvLmphdmEgKGF0IGxpbmUgMSlcbiIgKyAK
KwkJIglwYWNrYWdlIHAyO1xuIiArIAorCQkiCSAgICAgICAgXl5cbiIgKyAKKwkJIkEgZGVmYXVs
dCBudWxsbmVzcyBhbm5vdGF0aW9uIGhhcyBub3QgYmVlbiBzcGVjaWZpZWQgZm9yIHRoZSBwYWNr
YWdlIHAyXG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJ
CSIxLiBXQVJOSU5HIGluIHAzXFxaLmphdmEgKGF0IGxpbmUgNClcbiIgKyAKKwkJIglATm9uTnVs
bEJ5RGVmYXVsdCB2b2lkIGJhcigpIHt9XG4iICsgCisJCSIJXl5eXl5eXl5eXl5eXl5eXl5cbiIg
KyAKKwkJIk51bGxuZXNzIGRlZmF1bHQgaXMgcmVkdW5kYW50IHdpdGggYSBkZWZhdWx0IHNwZWNp
ZmllZCBmb3IgdGhlIGVuY2xvc2luZyBwYWNrYWdlIHAzXG4iICsgCisJCSItLS0tLS0tLS0tXG4i
KTsKK30KKworLy8gdGVzdCBtaXNzaW5nIGRlZmF1bHQgbnVsbG5lc3MgYW5ub3RhdGlvbiBmb3Ig
YSBwYWNrYWdlIHdpdGhvdXQgcGFja2FnZS1pbmZvCitwdWJsaWMgdm9pZCB0ZXN0X21pc3Npbmdf
ZGVmYXVsdF9hbm5vdGF0aW9uXzAzKCkgeworCU1hcCBjdXN0b21PcHRpb25zID0gZ2V0Q29tcGls
ZXJPcHRpb25zKCk7CisJY3VzdG9tT3B0aW9ucy5wdXQoSmF2YUNvcmUuQ09NUElMRVJfUEJfTUlT
U0lOR19OT05OVUxMX0JZX0RFRkFVTFRfQU5OT1RBVElPTiwgSmF2YUNvcmUuRVJST1IpOworCXJ1
bk5lZ2F0aXZlVGVzdFdpdGhMaWJzKAogCQluZXcgU3RyaW5nW10gewogCQkJInAyL1kuamF2YSIs
CiAJCQkicGFja2FnZSBwMjtcbiIgKwogCQkJImltcG9ydCBvcmcuZWNsaXBzZS5qZHQuYW5ub3Rh
dGlvbi4qO1xuIiArCiAJCQkiQE5vbk51bGxCeURlZmF1bHRcbiIgKwogCQkJInB1YmxpYyBjbGFz
cyBZIHtcbiIgKwotCQkJIiAgICBATm9uTnVsbEJ5RGVmYXVsdCB2b2lkIGZvbygpIHt9XG4iICsK
LQkJCSJ9XG4iICsKLQkJCSJjbGFzcyBaIHtcbiIgKworCQkJIiAgIHZvaWQgZm9vKCkge31cbiIg
KworCQkJIn1cbiIsCisJCQkicDIvWi5qYXZhIiwKKwkJCSJwYWNrYWdlIHAyO1xuIiArCisJCQki
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uLio7XG4iICsKKwkJCSJwdWJsaWMgY2xh
c3MgWiB7XG4iICsKIAkJCSIgICAgQE5vbk51bGxCeURlZmF1bHQgdm9pZCBiYXIoKSB7fVxuIiAr
CiAJCQkifVxuIiwKLQkJCSJwMy9wYWNrYWdlLWluZm8uamF2YSIsCi0JCQkiQG9yZy5lY2xpcHNl
LmpkdC5hbm5vdGF0aW9uLk5vbk51bGxCeURlZmF1bHQgcGFja2FnZSBwMztcbiIKIAkJfSwKIAkJ
Y3VzdG9tT3B0aW9ucywKIAkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJIjEuIFdBUk5JTkcgaW4gcDJc
XFkuamF2YSAoYXQgbGluZSAzKVxuIiArCi0JCSIJQE5vbk51bGxCeURlZmF1bHRcbiIgKwotCQki
CV5eXl5eXl5eXl5eXl5eXl5eXG4iICsKLQkJIk51bGxuZXNzIGRlZmF1bHQgaXMgcmVkdW5kYW50
IHdpdGggdGhlIGdsb2JhbCBkZWZhdWx0XG4iICsKLQkJIi0tLS0tLS0tLS1cbiIgKwotCQkiMi4g
V0FSTklORyBpbiBwMlxcWS5qYXZhIChhdCBsaW5lIDUpXG4iICsKLQkJIglATm9uTnVsbEJ5RGVm
YXVsdCB2b2lkIGZvbygpIHt9XG4iICsKLQkJIgleXl5eXl5eXl5eXl5eXl5eXlxuIiArCi0JCSJO
dWxsbmVzcyBkZWZhdWx0IGlzIHJlZHVuZGFudCB3aXRoIGEgZGVmYXVsdCBzcGVjaWZpZWQgZm9y
IHRoZSBlbmNsb3NpbmcgdHlwZSBZXG4iICsKLQkJIi0tLS0tLS0tLS1cbiIgKwotCQkiMy4gV0FS
TklORyBpbiBwMlxcWS5qYXZhIChhdCBsaW5lIDgpXG4iICsKLQkJIglATm9uTnVsbEJ5RGVmYXVs
dCB2b2lkIGJhcigpIHt9XG4iICsKLQkJIgleXl5eXl5eXl5eXl5eXl5eXlxuIiArCi0JCSJOdWxs
bmVzcyBkZWZhdWx0IGlzIHJlZHVuZGFudCB3aXRoIHRoZSBnbG9iYWwgZGVmYXVsdFxuIiArCi0J
CSItLS0tLS0tLS0tXG4iICsKLQkJIi0tLS0tLS0tLS1cbiIgKwotCQkiMS4gV0FSTklORyBpbiBw
M1xccGFja2FnZS1pbmZvLmphdmEgKGF0IGxpbmUgMSlcbiIgKwotCQkiCUBvcmcuZWNsaXBzZS5q
ZHQuYW5ub3RhdGlvbi5Ob25OdWxsQnlEZWZhdWx0IHBhY2thZ2UgcDM7XG4iICsKLQkJIgleXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArCi0JCSJOdWxsbmVz
cyBkZWZhdWx0IGlzIHJlZHVuZGFudCB3aXRoIHRoZSBnbG9iYWwgZGVmYXVsdFxuIiArCisJCSIx
LiBFUlJPUiBpbiBwMlxcWS5qYXZhIChhdCBsaW5lIDEpXG4iICsgCisJCSIJcGFja2FnZSBwMjtc
biIgKyAKKwkJIgkgICAgICAgIF5eXG4iICsgCisJCSJBIGRlZmF1bHQgbnVsbG5lc3MgYW5ub3Rh
dGlvbiBoYXMgbm90IGJlZW4gc3BlY2lmaWVkIGZvciB0aGUgcGFja2FnZSBwMlxuIiArIAorCQki
LS0tLS0tLS0tLVxuIiArIAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiMS4gRVJST1IgaW4gcDJc
XFouamF2YSAoYXQgbGluZSAxKVxuIiArIAorCQkiCXBhY2thZ2UgcDI7XG4iICsgCisJCSIJICAg
ICAgICBeXlxuIiArIAorCQkiQSBkZWZhdWx0IG51bGxuZXNzIGFubm90YXRpb24gaGFzIG5vdCBi
ZWVuIHNwZWNpZmllZCBmb3IgdGhlIHBhY2thZ2UgcDJcbiIgKyAKIAkJIi0tLS0tLS0tLS1cbiIp
OwogfQogCkBAIC0zMDkwLDggKzMxMjksNiBAQAogLy8gYSBub25udWxsIHZhcmlhYmxlIGlzIGRl
cmVmZXJlbmNlZCBpbiBhIGZpbmFsbHkgYmxvY2sgaW5zaWRlIGEgbG9vcAogcHVibGljIHZvaWQg
dGVzdF9ub25udWxsX3Zhcl9pbl9jb25zdHJvbF9zdHJ1Y3R1cmVfMygpIHsKIAlNYXAgY3VzdG9t
T3B0aW9ucyA9IGdldENvbXBpbGVyT3B0aW9ucygpOwotLy8JY3VzdG9tT3B0aW9ucy5wdXQoQ29t
cGlsZXJPcHRpb25zLk9QVElPTl9SZXBvcnRQb3RlbnRpYWxOdWxsU3BlY1Zpb2xhdGlvbiwgSmF2
YUNvcmUuRVJST1IpOwotCWN1c3RvbU9wdGlvbnMucHV0KEphdmFDb3JlLkNPTVBJTEVSX05PTk5V
TExfSVNfREVGQVVMVCwgSmF2YUNvcmUuRU5BQkxFRCk7CiAJY3VzdG9tT3B0aW9ucy5wdXQoSmF2
YUNvcmUuQ09NUElMRVJfUEJfUkVEVU5EQU5UX05VTExfQU5OT1RBVElPTiwgSmF2YUNvcmUuSUdO
T1JFKTsKIAlydW5OZWdhdGl2ZVRlc3RXaXRoTGlicygKIAkJbmV3IFN0cmluZ1tdIHsKQEAgLTMy
NzEsOCArMzMwOCw2IEBACiB9CiBwdWJsaWMgdm9pZCB0ZXN0X2Fzc2lnbm1lbnRfZXhwcmVzc2lv
bl8xKCkgewogCU1hcCBjdXN0b21PcHRpb25zID0gZ2V0Q29tcGlsZXJPcHRpb25zKCk7Ci0vLwlj
dXN0b21PcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydFBvdGVudGlhbE51
bGxTcGVjVmlvbGF0aW9uLCBKYXZhQ29yZS5FUlJPUik7Ci0JY3VzdG9tT3B0aW9ucy5wdXQoSmF2
YUNvcmUuQ09NUElMRVJfTk9OTlVMTF9JU19ERUZBVUxULCBKYXZhQ29yZS5FTkFCTEVEKTsKIAlj
dXN0b21PcHRpb25zLnB1dChKYXZhQ29yZS5DT01QSUxFUl9QQl9SRURVTkRBTlRfTlVMTF9DSEVD
SywgSmF2YUNvcmUuRVJST1IpOwogCXJ1bkNvbmZvcm1UZXN0V2l0aExpYnMoCiAJCW5ldyBTdHJp
bmdbXSB7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMv
b3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvbW9kZWwvTnVsbEFubm90YXRpb25Nb2RlbFRlc3Rz
LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2Uv
amR0L2NvcmUvdGVzdHMvbW9kZWwvTnVsbEFubm90YXRpb25Nb2RlbFRlc3RzLmphdmEKaW5kZXgg
ODJlNTQyMi4uOTE5ZTdkOCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMu
bW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21vZGVsL051bGxBbm5vdGF0aW9u
TW9kZWxUZXN0cy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3Ny
Yy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9tb2RlbC9OdWxsQW5ub3RhdGlvbk1vZGVsVGVz
dHMuamF2YQpAQCAtNTMsNyArNTMsNyBAQAogCX0KIAogCXN0YXRpYyB7Ci0vLwkJVEVTVFNfTkFN
RVMgPSBuZXcgU3RyaW5nW10geyAidGVzdE1pc3NpbmdBbm5vdGF0aW9uNSIgfTsKKy8vCQlURVNU
U19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7ICJ0ZXN0Q29udmVydGVkU291cmNlVHlwZTEiIH07CiAJ
fQogCiAJcHVibGljIHZvaWQgc2V0VXAoKSB0aHJvd3MgRXhjZXB0aW9uIHsKQEAgLTY3LDE4ICs2
NywxNyBAQAogCQlyZXR1cm4gRmlsZUxvY2F0b3IudG9GaWxlVVJMKGxpYkVudHJ5KS5nZXRQYXRo
KCk7CiAJfQogCi0JLy8gRElTQUJMRUQgZHVlIHRvIGR5c2Z1bmN0aW9uYWwgZ2xvYmFsIGRlZmF1
bHQgYWZ0ZXIgQnVnIDM2NjA2MyAtIENvbXBpbGVyIHNob3VsZCBub3QgYWRkIHN5bnRoZXRpYyBA
Tm9uTnVsbCBhbm5vdGF0aW9ucwotCXB1YmxpYyB2b2lkIF90ZXN0Q29udmVydGVkU291cmNlVHlw
ZTEoKSB0aHJvd3MgQ29yZUV4Y2VwdGlvbiwgSW50ZXJydXB0ZWRFeGNlcHRpb24geworCXB1Ymxp
YyB2b2lkIHRlc3RDb252ZXJ0ZWRTb3VyY2VUeXBlMSgpIHRocm93cyBDb3JlRXhjZXB0aW9uLCBJ
bnRlcnJ1cHRlZEV4Y2VwdGlvbiB7CiAgICAgCXRyeSB7CiAJCQkvLyBSZXNvdXJjZXMgY3JlYXRp
b24KIAkJCUlKYXZhUHJvamVjdCBwID0gY3JlYXRlSmF2YVByb2plY3QoIlAiLCBuZXcgU3RyaW5n
W10geyIifSwgbmV3IFN0cmluZ1tdIHsiSkNMMTVfTElCIiwgdGhpcy5BTk5PVEFUSU9OX0xJQn0s
ICJiaW4iLCAiMS41Iik7CiAJCQlwLnNldE9wdGlvbihKYXZhQ29yZS5DT01QSUxFUl9BTk5PVEFU
SU9OX05VTExfQU5BTFlTSVMsIEphdmFDb3JlLkVOQUJMRUQpOwotCQkJcC5zZXRPcHRpb24oSmF2
YUNvcmUuQ09NUElMRVJfTk9OTlVMTF9JU19ERUZBVUxULCBKYXZhQ29yZS5FTkFCTEVEKTsKIAog
CQkJdGhpcy5jcmVhdGVGb2xkZXIoIi9QL3AxIik7CiAJCQlTdHJpbmcgYzFTb3VyY2VTdHJpbmcg
PQogCQkJCSJwYWNrYWdlIHAxO1xuIiArCiAJCQkJImltcG9ydCBvcmcuZWNsaXBzZS5qZHQuYW5u
b3RhdGlvbi4qO1xuIiArCisJCQkJIkBvcmcuZWNsaXBzZS5qZHQuYW5ub3RhdGlvbi5Ob25OdWxs
QnlEZWZhdWx0XG4iICsKIAkJCQkicHVibGljIGNsYXNzIEMxIHtcbiIgKwogCQkJCSIJIHB1Ymxp
YyBTdHJpbmcgZm9vKEBOdWxsYWJsZSBPYmplY3QgYXJnKSB7XG4iICsgLy8gdGhpcyBpcyBjb25z
dW1lZCB2aWEgU291cmNlVHlwZUNvbnZlcnRlcgogCQkJCSIJCXJldHVybiBhcmcgPT0gbnVsbCA/
IFwiXCIgOiBhcmcudG9TdHJpbmcoKTtcbiIgKwpAQCAtOTEsNiArOTAsNyBAQAogCQkJdGhpcy5j
cmVhdGVGb2xkZXIoIi9QL3AyIik7CiAJCQlTdHJpbmcgYzJTb3VyY2VTdHJpbmcgPQogCQkJCSJw
YWNrYWdlIHAyO1xuIiArCisJCQkJIkBvcmcuZWNsaXBzZS5qZHQuYW5ub3RhdGlvbi5Ob25OdWxs
QnlEZWZhdWx0XG4iICsKIAkJCQkicHVibGljIGNsYXNzIEMyIHtcbiIgKwogCQkJCSIJIFN0cmlu
ZyBiYXIocDEuQzEgYywgQzIgYzIpIHs7XG4iICsKIAkJCQkiICAgICAgICByZXR1cm4gYy5mb28o
bnVsbCk7XG4iICsgLy8gZG9uJ3QgY29tcGxhaW4gZGVzcGl0ZSBkZWZhdWx0IG5vbm51bGwsIGZv
byBoYXMgZXhwbGljaXQgQE51bGxhYmxlCkBAIC0xMDksNyArMTA5LDcgQEAKIAkJCWdldENvbXBp
bGF0aW9uVW5pdCgiL1AvcDIvQzIuamF2YSIpLmdldFdvcmtpbmdDb3B5KHRoaXMud2NPd25lciwg
bnVsbCk7CiAKIAkJCWFzc2VydFByb2JsZW1zKCJVbmV4cGVjdGVkIHByb2JsZW1zIiwgIi0tLS0t
LS0tLS1cbiIgKwotCQkJCQkiMS4gV0FSTklORyBpbiAvUC9wMi9DMi5qYXZhIChhdCBsaW5lIDcp
XG4iICsKKwkJCQkJIjEuIFdBUk5JTkcgaW4gL1AvcDIvQzIuamF2YSAoYXQgbGluZSA4KVxuIiAr
CiAJCQkJCSIJcmV0dXJuIGFyZyA9PSBudWxsID8gbnVsbCA6IGFyZy50b1N0cmluZygpO1xuIiAr
CiAJCQkJCSIJICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsK
IAkJCQkJIlBvdGVudGlhbCB0eXBlIG1pc21hdGNoOiByZXF1aXJlZCBcJ0BOb25OdWxsIFN0cmlu
Z1wnIGJ1dCBudWxsbmVzcyBvZiB0aGUgcHJvdmlkZWQgdmFsdWUgaXMgdW5rbm93blxuIiArCkBA
IC0xMTksMjEgKzExOSwyMCBAQAogICAgIAl9CiAgICAgfQogCi0JLy8gRElTQUJMRUQgZHVlIHRv
IGR5c2Z1bmN0aW9uYWwgZ2xvYmFsIGRlZmF1bHQgYWZ0ZXIgQnVnIDM2NjA2MyAtIENvbXBpbGVy
IHNob3VsZCBub3QgYWRkIHN5bnRoZXRpYyBATm9uTnVsbCBhbm5vdGF0aW9ucwotCXB1YmxpYyB2
b2lkIF90ZXN0QmluYXJ5VHlwZTEoKSB0aHJvd3MgQ29yZUV4Y2VwdGlvbiwgSW50ZXJydXB0ZWRF
eGNlcHRpb24sIElPRXhjZXB0aW9uIHsKKwlwdWJsaWMgdm9pZCB0ZXN0QmluYXJ5VHlwZTEoKSB0
aHJvd3MgQ29yZUV4Y2VwdGlvbiwgSW50ZXJydXB0ZWRFeGNlcHRpb24sIElPRXhjZXB0aW9uIHsK
ICAgICAJdHJ5IHsKIAkJCS8vIFJlc291cmNlcyBjcmVhdGlvbgogCQkJSUphdmFQcm9qZWN0IHAg
PSBjcmVhdGVKYXZhUHJvamVjdCgiUCIsIG5ldyBTdHJpbmdbXSB7IiJ9LAogCQkJCQkJCQkJCQkg
ICBuZXcgU3RyaW5nW10geyJKQ0wxNV9MSUIiLCB0aGlzLkFOTk9UQVRJT05fTElCLCB0ZXN0SmFy
UGF0aCgiZXhhbXBsZS5qYXIiKX0sCiAJCQkJCQkJCQkJCSAgICJiaW4iLCAiMS41Iik7CiAJCQlw
LnNldE9wdGlvbihKYXZhQ29yZS5DT01QSUxFUl9BTk5PVEFUSU9OX05VTExfQU5BTFlTSVMsIEph
dmFDb3JlLkVOQUJMRUQpOwotCQkJcC5zZXRPcHRpb24oSmF2YUNvcmUuQ09NUElMRVJfTk9OTlVM
TF9JU19ERUZBVUxULCBKYXZhQ29yZS5FTkFCTEVEKTsKIAogCQkJLy8gZXhhbXBsZS5qYXIgY29u
dGFpbnMgcDEvQzEuamF2YSBqdXN0IGxpa2UgdGVzdENvbnZlcnRlZFNvdXJjZVR5cGUxKCkKIAog
CQkJdGhpcy5jcmVhdGVGb2xkZXIoIi9QL3AyIik7CiAJCQlTdHJpbmcgYzJTb3VyY2VTdHJpbmcg
PQogCQkJCSJwYWNrYWdlIHAyO1xuIiArCisJCQkJIkBvcmcuZWNsaXBzZS5qZHQuYW5ub3RhdGlv
bi5Ob25OdWxsQnlEZWZhdWx0XG4iICsKIAkJCQkicHVibGljIGNsYXNzIEMyIHtcbiIgKwogCQkJ
CSIJIFN0cmluZyBiYXIocDEuQzEgYykgeztcbiIgKwogCQkJCSIgICAgICAgIHJldHVybiBjLmZv
byhudWxsKTtcbiIgKyAvLyBkb24ndCBjb21wbGFpbiBkZXNwaXRlIGRlZmF1bHQgbm9ubnVsbCwg
Zm9vIGhhcyBleHBsaWNpdCBATnVsbGFibGUKQEAgLTE1Miw3ICsxNTEsNyBAQAogCQkJZ2V0Q29t
cGlsYXRpb25Vbml0KCIvUC9wMi9DMi5qYXZhIikuZ2V0V29ya2luZ0NvcHkodGhpcy53Y093bmVy
LCBudWxsKTsKIAogCQkJYXNzZXJ0UHJvYmxlbXMoIlVuZXhwZWN0ZWQgcHJvYmxlbXMiLCAiLS0t
LS0tLS0tLVxuIiArCi0JCQkJCSIxLiBXQVJOSU5HIGluIC9QL3AyL0MyLmphdmEgKGF0IGxpbmUg
NylcbiIgKworCQkJCQkiMS4gV0FSTklORyBpbiAvUC9wMi9DMi5qYXZhIChhdCBsaW5lIDgpXG4i
ICsKIAkJCQkJIglyZXR1cm4gYXJnID09IG51bGwgPyBudWxsIDogYXJnLnRvU3RyaW5nKCk7XG4i
ICsKIAkJCQkJIgkgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5cbiIg
KwogCQkJCQkiUG90ZW50aWFsIHR5cGUgbWlzbWF0Y2g6IHJlcXVpcmVkIFwnQE5vbk51bGwgU3Ry
aW5nXCcgYnV0IG51bGxuZXNzIG9mIHRoZSBwcm92aWRlZCB2YWx1ZSBpcyB1bmtub3duXG4iICsK
ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2JhdGNoL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9iYXRjaC9NYWluLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9i
YXRjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYmF0Y2gvTWFpbi5qYXZhCmlu
ZGV4IDk3YTk2NTQuLjZiYjgyM2MgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Jh
dGNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9iYXRjaC9NYWluLmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvYmF0Y2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2JhdGNoL01haW4uamF2YQpAQCAtMjQxMiw4ICsyNDEyLDggQEAKIAkJCQkJbW9kZSA9
IElOU0lERV9XQVJOSU5HU19QUk9QRVJUSUVTOwogCQkJCQljb250aW51ZTsKIAkJCQl9Ci0JCQkJ
aWYgKGN1cnJlbnRBcmcuZXF1YWxzKCItbm9uTnVsbEJ5RGVmYXVsdCIpKSB7IC8vJE5PTi1OTFMt
MSQKLQkJCQkJdGhpcy5vcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX05vbk51bGxJ
c0RlZmF1bHQsIENvbXBpbGVyT3B0aW9ucy5FTkFCTEVEKTsKKwkJCQlpZiAoY3VycmVudEFyZy5l
cXVhbHMoIi1taXNzaW5nRGVmYXVsdEFubm90IikpIHsgLy8kTk9OLU5MUy0xJAorCQkJCQl0aGlz
Lm9wdGlvbnMucHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJT05fUmVwb3J0TWlzc2luZ05vbk51bGxC
eURlZmF1bHRBbm5vdGF0aW9uLCBDb21waWxlck9wdGlvbnMuV0FSTklORyk7CiAJCQkJCWNvbnRp
bnVlOwogCQkJCX0KIAkJCQlicmVhazsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2JhdGNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9iYXRjaC9tZXNzYWdlcy5w
cm9wZXJ0aWVzIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvYmF0Y2gvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2JhdGNoL21lc3NhZ2VzLnByb3BlcnRpZXMKaW5kZXggYjFjYmY4OS4u
ZGQzNjJkZSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvYmF0Y2gvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2JhdGNoL21lc3NhZ2VzLnByb3BlcnRpZXMKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvYmF0Y2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2JhdGNoL21lc3NhZ2VzLnByb3BlcnRpZXMKQEAgLTI1NSw4ICsyNTUsNyBAQAogXCAgICAt
ZW5hYmxlSmF2YWRvYyAgICAgY29uc2lkZXIgcmVmZXJlbmNlcyBpbiBqYXZhZG9jXG5cCiBcICAg
IC1YZW1hY3MgICAgICAgICAgICB1c2VkIHRvIGVuYWJsZSBlbWFjcy1zdHlsZSBvdXRwdXQgaW4g
dGhlIGNvbnNvbGUuXG5cCiBcICAgICAgICAgICAgICAgICAgICAgICBJdCBkb2VzIG5vdCBhZmZl
Y3QgdGhlIHhtbCBsb2cgb3V0cHV0XG5cCi1cICAgIC1ub25OdWxsQnlEZWZhdWx0ICBmb3IgYW5u
b3RhdGlvbiBiYXNlZCBudWxsIGFuYWx5c2lzIGFzc3VtZSBub25udWxsXG5cCi1cICAgICAgICAg
ICAgICAgICAgICAgICBhcyB0aGUgZ2xvYmFsIGRlZmF1bHRcblwKK1wgICAgLW1pc3NpbmdEZWZh
dWx0QW5ub3QgIHJlcG9ydCBtaXNzaW5nIGRlZmF1bHQgbnVsbG5lc3MgYW5ub3RhdGlvblxuXAog
XCBcblwKIFwgICAgLT8gLWhlbHAgICAgICAgICAgIHByaW50IHRoaXMgaGVscCBtZXNzYWdlXG5c
CiBcICAgIC12IC12ZXJzaW9uICAgICAgICBwcmludCBjb21waWxlciB2ZXJzaW9uXG5cCmRpZmYg
LS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvY29y
ZS9jb21waWxlci9JUHJvYmxlbS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2NvcmUvY29tcGlsZXIvSVByb2JsZW0uamF2YQppbmRleCA5MzdhMTkw
Li5iODgzNTRkIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvY29yZS9jb21waWxlci9JUHJvYmxlbS5qYXZhCisrKyBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9jb3JlL2NvbXBpbGVyL0lQcm9ibGVt
LmphdmEKQEAgLTE0NDQsNyArMTQ0NCw4IEBACiAJaW50IFJlcXVpcmVkTm9uTnVsbEJ1dFByb3Zp
ZGVkUG90ZW50aWFsTnVsbCA9IFR5cGVSZWxhdGVkICsgOTExOwogCS8qKiBAc2luY2UgMy44ICov
CiAJaW50IFJlcXVpcmVkTm9uTnVsbEJ1dFByb3ZpZGVkVW5rbm93biA9IFR5cGVSZWxhdGVkICsg
OTEyOwotCS8vIHJlbW92ZWQgZHVyaW5nIDMuOCBNNjogSW1wb3J0UmVsYXRlZCArIDkxMyAKKwkv
KiogQHNpbmNlIDMuOCAqLworCWludCBNaXNzaW5nTm9uTnVsbEJ5RGVmYXVsdEFubm90YXRpb25P
blBhY2thZ2UgPSBJbnRlcm5hbCArIDkxMzsgLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1
Z3Mvc2hvd19idWcuY2dpP2lkPTM3MjAxMgogCS8qKiBAc2luY2UgMy44ICovCiAJaW50IElsbGVn
YWxSZXR1cm5OdWxsaXR5UmVkZWZpbml0aW9uID0gTWV0aG9kUmVsYXRlZCArIDkxNDsKIAkvKiog
QHNpbmNlIDMuOCAqLwpAQCAtMTQ3NSw2ICsxNDc2LDggQEAKIAlpbnQgUmVkdW5kYW50TnVsbERl
ZmF1bHRBbm5vdGF0aW9uTWV0aG9kID0gSW50ZXJuYWwgKyA5Mjg7CiAJLyoqIEBzaW5jZSAzLjgg
Ki8KIAlpbnQgQ29udHJhZGljdG9yeU51bGxBbm5vdGF0aW9ucyA9IEludGVybmFsICsgOTI5Owor
CS8qKiBAc2luY2UgMy44ICovCisJaW50IE1pc3NpbmdOb25OdWxsQnlEZWZhdWx0QW5ub3RhdGlv
bk9uVHlwZSA9IEludGVybmFsICsgOTMwOyAvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVn
cy9zaG93X2J1Zy5jZ2k/aWQ9MzcyMDEyCiAKIAkvKioKIAkgKiBFeHRlcm5hbCBwcm9ibGVtcyAt
LSBUaGVzZSBhcmUgcHJvYmxlbXMgZGVmaW5lZCBieSBvdGhlciBwbHVnaW5zCmRpZmYgLS1naXQg
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvaW1wbC9Db21waWxlck9wdGlvbnMuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9pbXBsL0NvbXBpbGVy
T3B0aW9ucy5qYXZhCmluZGV4IGM3NjQ0MWIuLjgzODMzZmIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9p
bXBsL0NvbXBpbGVyT3B0aW9ucy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9pbXBsL0NvbXBpbGVyT3B0aW9u
cy5qYXZhCkBAIC0yOSw3ICsyOSw2IEBACiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFs
LmNvbXBpbGVyLmFzdC5BU1ROb2RlOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b21waWxlci5jbGFzc2ZtdC5DbGFzc0ZpbGVDb25zdGFudHM7CiBpbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5FeHRyYUNvbXBpbGVyTW9kaWZpZXJzOwotaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuVGFnQml0czsKIGlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIucHJvYmxlbS5Qcm9ibGVtU2V2
ZXJpdGllczsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIudXRpbC5V
dGlsOwogCkBAIC0xNTgsNyArMTU3LDcgQEAKIAlzdGF0aWMgZmluYWwgY2hhcltdW10gREVGQVVM
VF9OVUxMQUJMRV9BTk5PVEFUSU9OX05BTUUgPSBDaGFyT3BlcmF0aW9uLnNwbGl0T24oJy4nLCAi
b3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTnVsbGFibGUiLnRvQ2hhckFycmF5KCkpOyAvLyRO
T04tTkxTLTEkCiAJc3RhdGljIGZpbmFsIGNoYXJbXVtdIERFRkFVTFRfTk9OTlVMTF9BTk5PVEFU
SU9OX05BTUUgPSBDaGFyT3BlcmF0aW9uLnNwbGl0T24oJy4nLCAib3JnLmVjbGlwc2UuamR0LmFu
bm90YXRpb24uTm9uTnVsbCIudG9DaGFyQXJyYXkoKSk7IC8vJE5PTi1OTFMtMSQKIAlzdGF0aWMg
ZmluYWwgY2hhcltdW10gREVGQVVMVF9OT05OVUxMQllERUZBVUxUX0FOTk9UQVRJT05fTkFNRSA9
IENoYXJPcGVyYXRpb24uc3BsaXRPbignLicsICJvcmcuZWNsaXBzZS5qZHQuYW5ub3RhdGlvbi5O
b25OdWxsQnlEZWZhdWx0Ii50b0NoYXJBcnJheSgpKTsgLy8kTk9OLU5MUy0xJAotCXB1YmxpYyBz
dGF0aWMgZmluYWwgU3RyaW5nIE9QVElPTl9Ob25OdWxsSXNEZWZhdWx0ID0gIm9yZy5lY2xpcHNl
LmpkdC5jb3JlLmNvbXBpbGVyLmFubm90YXRpb24ubm9ubnVsbGlzZGVmYXVsdCI7ICAvLyROT04t
TkxTLTEkCisJcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcgT1BUSU9OX1JlcG9ydE1pc3NpbmdO
b25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbiA9ICJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxl
ci5hbm5vdGF0aW9uLm1pc3NpbmdOb25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbiI7ICAvLyROT04t
TkxTLTEkCiAJLyoqCiAJICogUG9zc2libGUgdmFsdWVzIGZvciBjb25maWd1cmFibGUgb3B0aW9u
cwogCSAqLwpAQCAtMjY5LDYgKzI2OCw3IEBACiAJcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgUG90
ZW50aWFsTnVsbFNwZWNWaW9sYXRpb24gPSBJcnJpdGFudFNldC5HUk9VUDIgfCBBU1ROb2RlLkJp
dDEyOwogCXB1YmxpYyBzdGF0aWMgZmluYWwgaW50IE51bGxTcGVjSW5zdWZmaWNpZW50SW5mbyA9
IElycml0YW50U2V0LkdST1VQMiB8IEFTVE5vZGUuQml0MTM7CiAJcHVibGljIHN0YXRpYyBmaW5h
bCBpbnQgUmVkdW5kYW50TnVsbEFubm90YXRpb24gPSBJcnJpdGFudFNldC5HUk9VUDIgfCBBU1RO
b2RlLkJpdDE0OworCXB1YmxpYyBzdGF0aWMgZmluYWwgaW50IE1pc3NpbmdOb25OdWxsQnlEZWZh
dWx0QW5ub3RhdGlvbiA9IElycml0YW50U2V0LkdST1VQMiB8IEFTVE5vZGUuQml0MTU7CiAKIAkv
LyBTZXZlcml0eSBsZXZlbCBmb3IgaGFuZGxlcnMKIAkvKiogCkBAIC01OTgsNiArNTk4LDggQEAK
IAkJCQlyZXR1cm4gT1BUSU9OX1JlcG9ydE1ldGhvZENhbkJlU3RhdGljOwogCQkJY2FzZSBNZXRo
b2RDYW5CZVBvdGVudGlhbGx5U3RhdGljIDoKIAkJCQlyZXR1cm4gT1BUSU9OX1JlcG9ydE1ldGhv
ZENhbkJlUG90ZW50aWFsbHlTdGF0aWM7CisJCQljYXNlIE1pc3NpbmdOb25OdWxsQnlEZWZhdWx0
QW5ub3RhdGlvbiA6CisJCQkJcmV0dXJuIE9QVElPTl9SZXBvcnRNaXNzaW5nTm9uTnVsbEJ5RGVm
YXVsdEFubm90YXRpb247CiAJCQljYXNlIFJlZHVuZGFudFNwZWNpZmljYXRpb25PZlR5cGVBcmd1
bWVudHMgOgogCQkJCXJldHVybiBPUFRJT05fUmVwb3J0UmVkdW5kYW50U3BlY2lmaWNhdGlvbk9m
VHlwZUFyZ3VtZW50czsKIAkJCWNhc2UgVW5jbG9zZWRDbG9zZWFibGUgOgpAQCAtNzg0LDcgKzc4
Niw3IEBACiAJCQlPUFRJT05fTm9uTnVsbEFubm90YXRpb25OYW1lLAogCQkJT1BUSU9OX051bGxh
YmxlQW5ub3RhdGlvbk5hbWUsCiAJCQlPUFRJT05fTm9uTnVsbEJ5RGVmYXVsdEFubm90YXRpb25O
YW1lLAotCQkJT1BUSU9OX05vbk51bGxJc0RlZmF1bHQsCisJCQlPUFRJT05fUmVwb3J0TWlzc2lu
Z05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uLAogCQkJT1BUSU9OX1JlcG9ydE51bGxTcGVjVmlv
bGF0aW9uLAogCQkJT1BUSU9OX1JlcG9ydFBvdGVudGlhbE51bGxTcGVjVmlvbGF0aW9uLAogCQkJ
T1BUSU9OX1JlcG9ydE51bGxTcGVjSW5zdWZmaWNpZW50SW5mbywKQEAgLTg3MSw2ICs4NzMsOCBA
QAogCQkJY2FzZSBNaXNzaW5nSmF2YWRvY0NvbW1lbnRzIDoKIAkJCWNhc2UgTWlzc2luZ0phdmFk
b2NUYWdzOgogCQkJCXJldHVybiAiamF2YWRvYyI7IC8vJE5PTi1OTFMtMSQKKwkJCWNhc2UgTWlz
c2luZ05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uOgorCQkJCXJldHVybiAibWlzc2luZ0RlZmF1
bHRBbm5vdCI7IC8vJE5PTi1OTFMtMSQKIAkJCWNhc2UgTWlzc2luZ1N5bmNocm9uaXplZE1vZGlm
aWVySW5Jbmhlcml0ZWRNZXRob2Q6CiAJCQkJcmV0dXJuICJzeW5jLW92ZXJyaWRlIjsJIC8vJE5P
Ti1OTFMtMSQKIAkJfQpAQCAtMTA4MCwxMCArMTA4NCw3IEBACiAJCW9wdGlvbnNNYXAucHV0KE9Q
VElPTl9OdWxsYWJsZUFubm90YXRpb25OYW1lLCBTdHJpbmcudmFsdWVPZihDaGFyT3BlcmF0aW9u
LmNvbmNhdFdpdGgodGhpcy5udWxsYWJsZUFubm90YXRpb25OYW1lLCAnLicpKSk7CiAJCW9wdGlv
bnNNYXAucHV0KE9QVElPTl9Ob25OdWxsQW5ub3RhdGlvbk5hbWUsIFN0cmluZy52YWx1ZU9mKENo
YXJPcGVyYXRpb24uY29uY2F0V2l0aCh0aGlzLm5vbk51bGxBbm5vdGF0aW9uTmFtZSwgJy4nKSkp
OwogCQlvcHRpb25zTWFwLnB1dChPUFRJT05fTm9uTnVsbEJ5RGVmYXVsdEFubm90YXRpb25OYW1l
LCBTdHJpbmcudmFsdWVPZihDaGFyT3BlcmF0aW9uLmNvbmNhdFdpdGgodGhpcy5ub25OdWxsQnlE
ZWZhdWx0QW5ub3RhdGlvbk5hbWUsICcuJykpKTsKLQkJaWYgKHRoaXMuaW50ZW5kZWREZWZhdWx0
Tm9uTnVsbG5lc3MgPT0gVGFnQml0cy5Bbm5vdGF0aW9uTm9uTnVsbCkKLQkJCW9wdGlvbnNNYXAu
cHV0KE9QVElPTl9Ob25OdWxsSXNEZWZhdWx0LCBDb21waWxlck9wdGlvbnMuRU5BQkxFRCk7Ci0J
CWVsc2UKLQkJCW9wdGlvbnNNYXAucHV0KE9QVElPTl9Ob25OdWxsSXNEZWZhdWx0LCBDb21waWxl
ck9wdGlvbnMuRElTQUJMRUQpOworCQlvcHRpb25zTWFwLnB1dChPUFRJT05fUmVwb3J0TWlzc2lu
Z05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uLCBnZXRTZXZlcml0eVN0cmluZyhNaXNzaW5nTm9u
TnVsbEJ5RGVmYXVsdEFubm90YXRpb24pKTsKIAkJcmV0dXJuIG9wdGlvbnNNYXA7CiAJfQogCkBA
IC0xNTYwLDEyICsxNTYxLDcgQEAKIAkJCWlmICgob3B0aW9uVmFsdWUgPSBvcHRpb25zTWFwLmdl
dChPUFRJT05fTm9uTnVsbEJ5RGVmYXVsdEFubm90YXRpb25OYW1lKSkgIT0gbnVsbCkgewogCQkJ
CXRoaXMubm9uTnVsbEJ5RGVmYXVsdEFubm90YXRpb25OYW1lID0gQ2hhck9wZXJhdGlvbi5zcGxp
dEFuZFRyaW1PbignLicsICgoU3RyaW5nKW9wdGlvblZhbHVlKS50b0NoYXJBcnJheSgpKTsKIAkJ
CX0KLQkJCWlmICgob3B0aW9uVmFsdWUgPSBvcHRpb25zTWFwLmdldChPUFRJT05fTm9uTnVsbElz
RGVmYXVsdCkpICE9IG51bGwpIHsKLQkJCQlpZiAoQ29tcGlsZXJPcHRpb25zLkVOQUJMRUQuZXF1
YWxzKG9wdGlvblZhbHVlKSkKLQkJCQkJdGhpcy5pbnRlbmRlZERlZmF1bHROb25OdWxsbmVzcyA9
IFRhZ0JpdHMuQW5ub3RhdGlvbk5vbk51bGw7Ci0JCQkJZWxzZSBpZiAoQ29tcGlsZXJPcHRpb25z
LkRJU0FCTEVELmVxdWFscyhvcHRpb25WYWx1ZSkpCi0JCQkJCXRoaXMuaW50ZW5kZWREZWZhdWx0
Tm9uTnVsbG5lc3MgPSAwOwotCQkJfQorCQkJaWYgKChvcHRpb25WYWx1ZSA9IG9wdGlvbnNNYXAu
Z2V0KE9QVElPTl9SZXBvcnRNaXNzaW5nTm9uTnVsbEJ5RGVmYXVsdEFubm90YXRpb24pKSAhPSBu
dWxsKSB1cGRhdGVTZXZlcml0eShNaXNzaW5nTm9uTnVsbEJ5RGVmYXVsdEFubm90YXRpb24sIG9w
dGlvblZhbHVlKTsKIAkJfQogCiAJCS8vIEphdmFkb2Mgb3B0aW9ucwpkaWZmIC0tZ2l0IGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2xvb2t1cC9Tb3VyY2VUeXBlQmluZGluZy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Tb3VyY2VU
eXBlQmluZGluZy5qYXZhCmluZGV4IDUzYTJiMWIuLjU1YTY3N2YgMTAwNjQ0Ci0tLSBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9sb29rdXAvU291cmNlVHlwZUJpbmRpbmcuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1NvdXJj
ZVR5cGVCaW5kaW5nLmphdmEKQEAgLTE2MzMsNiArMTYzMywyMyBAQAogcHJpdmF0ZSB2b2lkIGV2
YWx1YXRlTnVsbEFubm90YXRpb25zKGxvbmcgYW5ub3RhdGlvblRhZ0JpdHMpIHsKIAlpZiAodGhp
cy5udWxsbmVzc0RlZmF1bHRJbml0aWFsaXplZCA+IDAgfHwgIXRoaXMuc2NvcGUuY29tcGlsZXJP
cHRpb25zKCkuaXNBbm5vdGF0aW9uQmFzZWROdWxsQW5hbHlzaXNFbmFibGVkKQogCQlyZXR1cm47
CisJYm9vbGVhbiBpc1BhY2thZ2VJbmZvID0gQ2hhck9wZXJhdGlvbi5lcXVhbHModGhpcy5zb3Vy
Y2VOYW1lLCBUeXBlQ29uc3RhbnRzLlBBQ0tBR0VfSU5GT19OQU1FKTsKKwlQYWNrYWdlQmluZGlu
ZyBwa2cgPSBnZXRQYWNrYWdlKCk7CisJYm9vbGVhbiBpc0RlZmF1bHQgPSAocGtnLmNvbXBvdW5k
TmFtZSA9PSBDaGFyT3BlcmF0aW9uLk5PX0NIQVJfQ0hBUik7CisJYm9vbGVhbiBpc051bGxuZXNz
QW5ub3RhdGlvblBhY2thZ2UgPSAKKwkJCXBrZyA9PSB0aGlzLnNjb3BlLmVudmlyb25tZW50KCku
bm9ubnVsbEFubm90YXRpb25QYWNrYWdlCisJCQl8fCBwa2cgPT0gdGhpcy5zY29wZS5lbnZpcm9u
bWVudCgpLm51bGxhYmxlQW5ub3RhdGlvblBhY2thZ2UKKwkJCXx8IHBrZyA9PSB0aGlzLnNjb3Bl
LmVudmlyb25tZW50KCkubm9ubnVsbEJ5RGVmYXVsdEFubm90YXRpb25QYWNrYWdlOworCWlmIChw
a2cuZGVmYXVsdE51bGxuZXNzID09IE5PX05VTExfREVGQVVMVCAmJiAhaXNEZWZhdWx0ICYmICFp
c1BhY2thZ2VJbmZvICYmICFpc051bGxuZXNzQW5ub3RhdGlvblBhY2thZ2UpIHsKKwkJUmVmZXJl
bmNlQmluZGluZyBwYWNrYWdlSW5mbyA9IHBrZy5nZXRUeXBlKFR5cGVDb25zdGFudHMuUEFDS0FH
RV9JTkZPX05BTUUpOworCQlpZiAocGFja2FnZUluZm8gPT0gbnVsbCkgeworCQkJLy8gbm8gcGtn
SW5mbyAtIGNvbXBsYWluCisJCQl0aGlzLnNjb3BlLnByb2JsZW1SZXBvcnRlcigpLm1pc3NpbmdO
b25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbih0aGlzLnNjb3BlLnJlZmVyZW5jZUNvbnRleHQpOwor
CQl9IGVsc2UgeworCQkJLy8gaWYgcGtnSW5mbyBoYXMgbm8gZGVmYXVsdCBhbm5vdC4gLSBjb21w
bGFpbgorCQkJcGFja2FnZUluZm8uZ2V0QW5ub3RhdGlvblRhZ0JpdHMoKTsKKwkJfQorCX0KIAl0
aGlzLm51bGxuZXNzRGVmYXVsdEluaXRpYWxpemVkID0gMTsKIAkvLyB0cmFuc2ZlciBudWxsbmVz
cyBpbmZvIGZyb20gdGFnQml0cyB0byB0aGlzLm51bGxuZXNzRGVmYXVsdEFubm90YXRpb24KIAlp
bnQgbmV3RGVmYXVsdE51bGxuZXNzID0gTk9fTlVMTF9ERUZBVUxUOwpAQCAtMTY0MSwxNCArMTY1
OCwxOCBAQAogCWVsc2UgaWYgKChhbm5vdGF0aW9uVGFnQml0cyAmIFRhZ0JpdHMuQW5ub3RhdGlv
bk5vbk51bGxCeURlZmF1bHQpICE9IDApCiAJCW5ld0RlZmF1bHROdWxsbmVzcyA9IE5PTk5VTExf
QllfREVGQVVMVDsKIAlpZiAobmV3RGVmYXVsdE51bGxuZXNzICE9IE5PX05VTExfREVGQVVMVCkg
ewotCQlpZiAoQ2hhck9wZXJhdGlvbi5lcXVhbHModGhpcy5zb3VyY2VOYW1lLCBUeXBlQ29uc3Rh
bnRzLlBBQ0tBR0VfSU5GT19OQU1FKSkgewotCQkJZ2V0UGFja2FnZSgpLmRlZmF1bHROdWxsbmVz
cyA9IG5ld0RlZmF1bHROdWxsbmVzczsKKwkJaWYgKGlzUGFja2FnZUluZm8pIHsKKwkJCXBrZy5k
ZWZhdWx0TnVsbG5lc3MgPSBuZXdEZWZhdWx0TnVsbG5lc3M7CiAJCX0gZWxzZSB7CiAJCQl0aGlz
LmRlZmF1bHROdWxsbmVzcyA9IG5ld0RlZmF1bHROdWxsbmVzczsKIAkJCVR5cGVEZWNsYXJhdGlv
biB0eXBlRGVjbCA9IHRoaXMuc2NvcGUucmVmZXJlbmNlQ29udGV4dDsKIAkJCWxvbmcgbnVsbERl
ZmF1bHRCaXRzID0gYW5ub3RhdGlvblRhZ0JpdHMgJiAoVGFnQml0cy5Bbm5vdGF0aW9uTnVsbFVu
c3BlY2lmaWVkQnlEZWZhdWx0fFRhZ0JpdHMuQW5ub3RhdGlvbk5vbk51bGxCeURlZmF1bHQpOwog
CQkJY2hlY2tSZWR1bmRhbnROdWxsbmVzc0RlZmF1bHRSZWN1cnNlKHR5cGVEZWNsLCB0eXBlRGVj
bC5hbm5vdGF0aW9ucywgbnVsbERlZmF1bHRCaXRzKTsKIAkJfQorCX0gZWxzZSBpZiAoaXNQYWNr
YWdlSW5mbyB8fCAoaXNEZWZhdWx0ICYmICEodGhpcyBpbnN0YW5jZW9mIE5lc3RlZFR5cGVCaW5k
aW5nKSkpIHsKKwkJdGhpcy5zY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5taXNzaW5nTm9uTnVsbEJ5
RGVmYXVsdEFubm90YXRpb24odGhpcy5zY29wZS5yZWZlcmVuY2VDb250ZXh0KTsKKwkJaWYgKCFp
c0RlZmF1bHQpCisJCQlwa2cuZGVmYXVsdE51bGxuZXNzID0gTlVMTF9VTlNQRUNJRklFRF9CWV9E
RUZBVUxUOwogCX0KIH0KIApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxlbUhhbmRs
ZXIuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9wcm9ibGVtL1Byb2JsZW1IYW5kbGVyLmphdmEKaW5kZXggOTM0MTg2
My4uMGQzMzI3ZCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxlbUhhbmRsZXIuamF2
YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9Qcm9ibGVtSGFuZGxlci5qYXZhCkBAIC0xMzcsNyArMTM3
LDkgQEAKIAkJCXJldHVybjsgLy8gaWdub3JlIG5vbiByZXBvcnRhYmxlIHdhcm5pbmcKIAkJfQog
CX0KLQorCWlmIChwcm9ibGVtSWQgPT0gSVByb2JsZW0uTWlzc2luZ05vbk51bGxCeURlZmF1bHRB
bm5vdGF0aW9uT25QYWNrYWdlICYmIHByb2JsZW1FbmRQb3NpdGlvbiA8IDAgJiYgcHJvYmxlbVN0
YXJ0UG9zaXRpb24gPCAwKSB7CisJCXJlZmVyZW5jZUNvbnRleHQgPSBudWxsOworCX0KIAlpbnRb
XSBsaW5lRW5kczsKIAlpbnQgbGluZU51bWJlciA9IHByb2JsZW1TdGFydFBvc2l0aW9uID49IDAK
IAkJCT8gVXRpbC5nZXRMaW5lTnVtYmVyKHByb2JsZW1TdGFydFBvc2l0aW9uLCBsaW5lRW5kcyA9
IHVuaXRSZXN1bHQuZ2V0TGluZVNlcGFyYXRvclBvc2l0aW9ucygpLCAwLCBsaW5lRW5kcy5sZW5n
dGgtMSkKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL1Byb2JsZW1SZXBvcnRlci5qYXZhIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL3Byb2JsZW0vUHJvYmxlbVJlcG9ydGVyLmphdmEKaW5kZXggMzc5ZjIzMi4uOTk3Njc2
NiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxlbVJlcG9ydGVyLmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL3Byb2JsZW0vUHJvYmxlbVJlcG9ydGVyLmphdmEKQEAgLTQ2OSw2ICs0NjksMTAgQEAK
IAkJCQkKIAkJY2FzZSBJUHJvYmxlbS5SZWR1bmRhbnRTcGVjaWZpY2F0aW9uT2ZUeXBlQXJndW1l
bnRzOgogCQkJcmV0dXJuIENvbXBpbGVyT3B0aW9ucy5SZWR1bmRhbnRTcGVjaWZpY2F0aW9uT2ZU
eXBlQXJndW1lbnRzOworCQkJCisJCWNhc2UgSVByb2JsZW0uTWlzc2luZ05vbk51bGxCeURlZmF1
bHRBbm5vdGF0aW9uT25QYWNrYWdlOgorCQljYXNlIElQcm9ibGVtLk1pc3NpbmdOb25OdWxsQnlE
ZWZhdWx0QW5ub3RhdGlvbk9uVHlwZToKKwkJCXJldHVybiBDb21waWxlck9wdGlvbnMuTWlzc2lu
Z05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uOwogCX0KIAlyZXR1cm4gMDsKIH0KQEAgLTU3NCw2
ICs1NzgsNyBAQAogCQkJY2FzZSBDb21waWxlck9wdGlvbnMuTnVsbFNwZWNWaW9sYXRpb24gOgog
CQkJY2FzZSBDb21waWxlck9wdGlvbnMuUG90ZW50aWFsTnVsbFNwZWNWaW9sYXRpb24gOgogCQkJ
Y2FzZSBDb21waWxlck9wdGlvbnMuTnVsbFNwZWNJbnN1ZmZpY2llbnRJbmZvIDoKKwkJCWNhc2Ug
Q29tcGlsZXJPcHRpb25zLk1pc3NpbmdOb25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbjoKIAkJCQly
ZXR1cm4gQ2F0ZWdvcml6ZWRQcm9ibGVtLkNBVF9QT1RFTlRJQUxfUFJPR1JBTU1JTkdfUFJPQkxF
TTsKIAkJCWNhc2UgQ29tcGlsZXJPcHRpb25zLlJlZHVuZGFudE51bGxBbm5vdGF0aW9uIDoKIAkJ
CQlyZXR1cm4gQ2F0ZWdvcml6ZWRQcm9ibGVtLkNBVF9VTk5FQ0VTU0FSWV9DT0RFOwpAQCAtODE4
MCw5ICs4MTg1LDcgQEAKIAkJYXJndW1lbnQudHlwZS5zb3VyY2VTdGFydCwKIAkJYXJndW1lbnQu
dHlwZS5zb3VyY2VFbmQpOwogfQotcHVibGljIHZvaWQgaWxsZWdhbFJldHVyblJlZGVmaW5pdGlv
bihBYnN0cmFjdE1ldGhvZERlY2xhcmF0aW9uIGFic3RyYWN0TWV0aG9kRGVjbCwKLQkJCQkJCQkJ
CSAgTWV0aG9kQmluZGluZyBpbmhlcml0ZWRNZXRob2QsIGNoYXJbXVtdIG5vbk51bGxBbm5vdGF0
aW9uTmFtZSkKLXsKK3B1YmxpYyB2b2lkIGlsbGVnYWxSZXR1cm5SZWRlZmluaXRpb24oQWJzdHJh
Y3RNZXRob2REZWNsYXJhdGlvbiBhYnN0cmFjdE1ldGhvZERlY2wsIE1ldGhvZEJpbmRpbmcgaW5o
ZXJpdGVkTWV0aG9kLCBjaGFyW11bXSBub25OdWxsQW5ub3RhdGlvbk5hbWUpIHsKIAlNZXRob2RE
ZWNsYXJhdGlvbiBtZXRob2REZWNsID0gKE1ldGhvZERlY2xhcmF0aW9uKSBhYnN0cmFjdE1ldGhv
ZERlY2w7CiAJU3RyaW5nQnVmZmVyIG1ldGhvZFNpZ25hdHVyZSA9IG5ldyBTdHJpbmdCdWZmZXIo
KTsKIAltZXRob2RTaWduYXR1cmUKQEAgLTgzMjgsNCArODMzMSw0MCBAQAogCX0KIAlyZXR1cm4g
bnVsbDsKIH0KKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9p
ZD0zNzIwMTIKK3B1YmxpYyB2b2lkIG1pc3NpbmdOb25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbihU
eXBlRGVjbGFyYXRpb24gdHlwZSkgeworCWludCBzZXZlcml0eTsKKwlDb21waWxhdGlvblVuaXRE
ZWNsYXJhdGlvbiBjb21wVW5pdERlY2wgPSB0eXBlLmdldENvbXBpbGF0aW9uVW5pdERlY2xhcmF0
aW9uKCk7CisJU3RyaW5nW10gYXJndW1lbnRzOworCWlmIChjb21wVW5pdERlY2wuY3VycmVudFBh
Y2thZ2UgPT0gbnVsbCkgeworCQlzZXZlcml0eSA9IGNvbXB1dGVTZXZlcml0eShJUHJvYmxlbS5N
aXNzaW5nTm9uTnVsbEJ5RGVmYXVsdEFubm90YXRpb25PblR5cGUpOworCQlpZiAoc2V2ZXJpdHkg
PT0gUHJvYmxlbVNldmVyaXRpZXMuSWdub3JlKSByZXR1cm47CisJCS8vIERlZmF1bHQgcGFja2Fn
ZQorCQlUeXBlQmluZGluZyBiaW5kaW5nID0gdHlwZS5iaW5kaW5nOworCQl0aGlzLmhhbmRsZSgK
KwkJCQlJUHJvYmxlbS5NaXNzaW5nTm9uTnVsbEJ5RGVmYXVsdEFubm90YXRpb25PblR5cGUsCisJ
CQkJbmV3IFN0cmluZ1tdIHtuZXcgU3RyaW5nKGJpbmRpbmcucmVhZGFibGVOYW1lKCkpLCB9LAor
CQkJCW5ldyBTdHJpbmdbXSB7bmV3IFN0cmluZyhiaW5kaW5nLnNob3J0UmVhZGFibGVOYW1lKCkp
LH0sCisJCQkJc2V2ZXJpdHksCisJCQkJdHlwZS5zb3VyY2VTdGFydCwKKwkJCQl0eXBlLnNvdXJj
ZUVuZCk7CisJfSBlbHNlIHsKKwkJc2V2ZXJpdHkgPSBjb21wdXRlU2V2ZXJpdHkoSVByb2JsZW0u
TWlzc2luZ05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uT25QYWNrYWdlKTsKKwkJaWYgKHNldmVy
aXR5ID09IFByb2JsZW1TZXZlcml0aWVzLklnbm9yZSkgcmV0dXJuOworCQlpbnQgc291cmNlU3Rh
cnQgPSAtMTsKKwkJaW50IHNvdXJjZUVuZCA9IC0xOworCQlpZiAoQ2hhck9wZXJhdGlvbi5lcXVh
bHModHlwZS5uYW1lLCBUeXBlQ29uc3RhbnRzLlBBQ0tBR0VfSU5GT19OQU1FKSkgeworCQkJc291
cmNlU3RhcnQgPSBjb21wVW5pdERlY2wuY3VycmVudFBhY2thZ2Uuc291cmNlU3RhcnQ7CisJCQlz
b3VyY2VFbmQgPSBjb21wVW5pdERlY2wuY3VycmVudFBhY2thZ2Uuc291cmNlRW5kOworCQl9CisJ
CWFyZ3VtZW50cyA9IG5ldyBTdHJpbmdbXSB7Q2hhck9wZXJhdGlvbi50b1N0cmluZyhjb21wVW5p
dERlY2wuY3VycmVudFBhY2thZ2UudG9rZW5zKX07CisJCXRoaXMuaGFuZGxlKAorCQkJSVByb2Js
ZW0uTWlzc2luZ05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uT25QYWNrYWdlLAorCQkJYXJndW1l
bnRzLAorCQkJYXJndW1lbnRzLAorCQkJc2V2ZXJpdHksCisJCQlzb3VyY2VTdGFydCwKKwkJCXNv
dXJjZUVuZCk7CisJfQorfQogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vbWVzc2FnZXMu
cHJvcGVydGllcyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL21lc3NhZ2VzLnByb3BlcnRpZXMKaW5kZXggZGY3
MGVkZS4uZDZmMDRiZCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vbWVzc2FnZXMucHJvcGVy
dGllcworKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9tZXNzYWdlcy5wcm9wZXJ0aWVzCkBAIC02NjMsNyAr
NjYzLDcgQEAKIDkxMCA9IFR5cGUgbWlzbWF0Y2g6IHJlcXVpcmVkICcnQHswfSB7MX0nJyBidXQg
dGhlIHByb3ZpZGVkIHZhbHVlIGlzIG51bGwKIDkxMSA9IFR5cGUgbWlzbWF0Y2g6IHJlcXVpcmVk
ICcnQHswfSB7MX0nJyBidXQgdGhlIHByb3ZpZGVkIHZhbHVlIGNhbiBiZSBudWxsCiA5MTIgPSBQ
b3RlbnRpYWwgdHlwZSBtaXNtYXRjaDogcmVxdWlyZWQgJydAezB9IHsxfScnIGJ1dCBudWxsbmVz
cyBvZiB0aGUgcHJvdmlkZWQgdmFsdWUgaXMgdW5rbm93bgotIzkxMyByZW1vdmVkCis5MTMgPSBB
IGRlZmF1bHQgbnVsbG5lc3MgYW5ub3RhdGlvbiBoYXMgbm90IGJlZW4gc3BlY2lmaWVkIGZvciB0
aGUgcGFja2FnZSB7MH0KIDkxNCA9IFRoZSByZXR1cm4gdHlwZSBpcyBpbmNvbXBhdGlibGUgd2l0
aCB0aGUgQHsxfSByZXR1cm4gZnJvbSB7MH0KIDkxNSA9IElsbGVnYWwgcmVkZWZpbml0aW9uIG9m
IHBhcmFtZXRlciB7MH0sIGluaGVyaXRlZCBtZXRob2QgZnJvbSB7MX0gZGVjbGFyZXMgdGhpcyBw
YXJhbWV0ZXIgYXMgQHsyfQogOTE2ID0gSWxsZWdhbCByZWRlZmluaXRpb24gb2YgcGFyYW1ldGVy
IHswfSwgaW5oZXJpdGVkIG1ldGhvZCBmcm9tIHsxfSBkb2VzIG5vdCBjb25zdHJhaW4gdGhpcyBw
YXJhbWV0ZXIKQEAgLTY3OSw2ICs2NzksNyBAQAogOTI3ID0gTnVsbG5lc3MgZGVmYXVsdCBpcyBy
ZWR1bmRhbnQgd2l0aCBhIGRlZmF1bHQgc3BlY2lmaWVkIGZvciB0aGUgZW5jbG9zaW5nIHR5cGUg
ezB9CiA5MjggPSBOdWxsbmVzcyBkZWZhdWx0IGlzIHJlZHVuZGFudCB3aXRoIGEgZGVmYXVsdCBz
cGVjaWZpZWQgZm9yIHRoZSBlbmNsb3NpbmcgbWV0aG9kIHswfQogOTI5ID0gQ29udHJhZGljdG9y
eSBudWxsIHNwZWNpZmljYXRpb247IG9ubHkgb25lIG9mIEB7MH0gYW5kIEB7MX0gY2FuIGJlIHNw
ZWNpZmllZCBhdCBhbnkgbG9jYXRpb24KKzkzMCA9IEEgZGVmYXVsdCBudWxsbmVzcyBhbm5vdGF0
aW9uIGhhcyBub3QgYmVlbiBzcGVjaWZpZWQgZm9yIHRoZSB0eXBlIHswfQogCiAjIyMgRUxBQk9S
QVRJT05TCiAjIyBBY2Nlc3MgcmVzdHJpY3Rpb25zCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvY29yZS9KYXZhQ29yZS5qYXZhIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2NvcmUvSmF2YUNvcmUuamF2YQpp
bmRleCAxODg4NzQ3Li4wN2U1NGMxIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9t
b2RlbC9vcmcvZWNsaXBzZS9qZHQvY29yZS9KYXZhQ29yZS5qYXZhCisrKyBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9jb3JlL0phdmFDb3JlLmphdmEKQEAgLTE0
OTMsOSArMTQ5Myw3IEBACiAJICogICAgd2l0aGluIHRoZSBhbm5vdGF0ZWQgZWxlbWVudCB3aWxs
IGJlIHRyZWF0ZWQgYXMgaWYgdGhleSB3ZXJlIHNwZWNpZmllZCB3aXRoIHRoZSBub24tbnVsbCBh
bm5vdGF0aW9uCiAJICogICAgKHNlZSB7QGxpbmsgI0NPTVBJTEVSX05PTk5VTExfQU5OT1RBVElP
Tl9OQU1FfSkuPC9wPgogCSAqIDxwPklmIHRoZSBhbm5vdGF0aW9uIGlzIGFwcGxpZWQgd2l0aCB0
aGUgY29uc3RhbnQgPGNvZGU+ZmFsc2U8L2NvZGU+IGFzIGl0cyBhcmd1bWVudAotCSAqICAgIGFs
bCBjb3JyZXNwb25kaW5nIGRlZmF1bHRzIGF0IG91dGVyIHNjb3BlcyB3aWxsIGJlIGNhbmNlbGVk
IGZvciB0aGUgYW5ub3RhdGVkIGVsZW1lbnQuCi0JICogICAgVGhpcyBpbmNsdWRlcyBkZWZhdWx0
cyBzcGVjaWZpZWQgdXNpbmcgdGhpcyBhbm5vdGF0aW9uIHR5cGUgb3IgYSBkZWZhdWx0IGRlZmlu
ZWQgdXNpbmcKLQkgKiAgICB0aGUgY29tcGlsZXIgb3B0aW9uIHtAbGluayAjQ09NUElMRVJfTk9O
TlVMTF9JU19ERUZBVUxUfS48L3A+CisJICogICAgYWxsIGNvcnJlc3BvbmRpbmcgZGVmYXVsdHMg
YXQgb3V0ZXIgc2NvcGVzIHdpbGwgYmUgY2FuY2VsZWQgZm9yIHRoZSBhbm5vdGF0ZWQgZWxlbWVu
dC48L3A+CiAJICogPHA+VGhpcyBvcHRpb24gb25seSBoYXMgYW4gZWZmZWN0IGlmIHRoZSBvcHRp
b24ge0BsaW5rICNDT01QSUxFUl9BTk5PVEFUSU9OX05VTExfQU5BTFlTSVN9IGlzIGVuYWJsZWQu
PC9wPgogCSAqIDxkbD4KIAkgKiA8ZHQ+T3B0aW9uIGlkOjwvZHQ+PGRkPjxjb2RlPiJvcmcuZWNs
aXBzZS5qZHQuY29yZS5jb21waWxlci5hbm5vdGF0aW9uLm5vbm51bGxieWRlZmF1bHQiPC9jb2Rl
PjwvZGQ+CkBAIC0xNTA4LDE5ICsxNTA2LDIyIEBACiAJICovCiAJcHVibGljIHN0YXRpYyBmaW5h
bCBTdHJpbmcgQ09NUElMRVJfTk9OTlVMTF9CWV9ERUZBVUxUX0FOTk9UQVRJT05fTkFNRSA9IFBM
VUdJTl9JRCArICIuY29tcGlsZXIuYW5ub3RhdGlvbi5ub25udWxsYnlkZWZhdWx0IjsgLy8kTk9O
LU5MUy0xJAogCS8qKgotCSAqIENvbXBpbGVyIG9wdGlvbiBJRDogR2xvYmFsbHkgc3BlY2lmeSBu
b24tbnVsbCBhcyB0aGUgYXNzdW1lZCBkZWZhdWx0IGZvciB1bmFubm90YXRlZCB0eXBlcy4KLQkg
KiA8cD5XaGVuIGVuYWJsZWQsIHRoaXMgb3B0aW9uIGdsb2JhbGx5IGFjaGlldmVzIHRoZSBzYW1l
IGVmZmVjdCAKLQkgKiAgICBhcyBzcGVjaWZ5aW5nIHtAbGluayAjQ09NUElMRVJfTk9OTlVMTF9B
Tk5PVEFUSU9OX05BTUV9IGRvZXMgZm9yIGluZGl2aWR1YWwgZWxlbWVudHMuPC9wPgorCSAqIENv
bXBpbGVyIG9wdGlvbiBJRDogUmVwb3J0aW5nIG1pc3NpbmcgZGVmYXVsdCBudWxsbmVzcyBhbm5v
dGF0aW9uLgorCSAqIDxwPldoZW4gZW5hYmxlZCwgdGhlIGNvbXBpbGVyIHdpbGwgaXNzdWUgYW4g
ZXJyb3Igb3IgYSB3YXJuaW5nIGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6PC9wPgorCSAqIDx1bD4K
KwkgKiA8bGk+IFdoZW4gYSBwYWNrYWdlLWluZm8uamF2YSBkb2VzIG5vdCBjb250YWluIGEgZGVm
YXVsdCBudWxsbmVzcyBhbm5vdGF0aW9uLjwvbGk+CisJICogPGxpPiBXaGVuIGEgdHlwZSBpbnNp
ZGUgYSBkZWZhdWx0IHBhY2thZ2UgZG9lcyBub3QgY29udGFpbiBhIGRlZmF1bHQgbnVsbG5lc3Mg
YW5ub3RhdGlvbi48L2xpPgorCSAqIDwvdWw+CiAJICogPHA+VGhpcyBvcHRpb24gb25seSBoYXMg
YW4gZWZmZWN0IGlmIHRoZSBvcHRpb24ge0BsaW5rICNDT01QSUxFUl9BTk5PVEFUSU9OX05VTExf
QU5BTFlTSVN9IGlzIGVuYWJsZWQuPC9wPgogCSAqIDxkbD4KLQkgKiA8ZHQ+T3B0aW9uIGlkOjwv
ZHQ+PGRkPjxjb2RlPiJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5hbm5vdGF0aW9uLm5v
bm51bGxpc2RlZmF1bHQiPC9jb2RlPjwvZGQ+Ci0JICogPGR0PlBvc3NpYmxlIHZhbHVlczo8L2R0
PjxkZD48Y29kZT57ICJkaXNhYmxlZCIsICJlbmFibGVkIiB9PC9jb2RlPi48L2RkPgotCSAqIDxk
dD5EZWZhdWx0OjwvZHQ+PGRkPjxjb2RlPiJkaXNhYmxlZCI8L2NvZGU+PC9kZD4KKwkgKiA8ZHQ+
T3B0aW9uIGlkOjwvZHQ+PGRkPjxjb2RlPiJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5h
bm5vdGF0aW9uLm1pc3NpbmdOb25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbiI8L2NvZGU+PC9kZD4K
KwkgKiA8ZHQ+UG9zc2libGUgdmFsdWVzOjwvZHQ+PGRkPjxjb2RlPnsgImVycm9yIiwgIndhcm5p
bmciLCAiaWdub3JlIiB9PC9jb2RlPi48L2RkPgorCSAqIDxkdD5EZWZhdWx0OjwvZHQ+PGRkPjxj
b2RlPiJpZ25vcmUiPC9jb2RlPjwvZGQ+CiAJICogPC9kbD4KIAkgKiBAc2luY2UgMy44CiAJICog
QGNhdGVnb3J5IENvbXBpbGVyT3B0aW9uSUQKIAkgKi8KLQlwdWJsaWMgc3RhdGljIGZpbmFsIFN0
cmluZyBDT01QSUxFUl9OT05OVUxMX0lTX0RFRkFVTFQgPSBQTFVHSU5fSUQgKyAiLmNvbXBpbGVy
LmFubm90YXRpb24ubm9ubnVsbGlzZGVmYXVsdCI7IC8vJE5PTi1OTFMtMSQKKwlwdWJsaWMgc3Rh
dGljIGZpbmFsIFN0cmluZyBDT01QSUxFUl9QQl9NSVNTSU5HX05PTk5VTExfQllfREVGQVVMVF9B
Tk5PVEFUSU9OID0gUExVR0lOX0lEICsgIi5jb21waWxlci5hbm5vdGF0aW9uLm1pc3NpbmdOb25O
dWxsQnlEZWZhdWx0QW5ub3RhdGlvbiI7IC8vJE5PTi1OTFMtMSQKIAkvKioKIAkgKiBDb21waWxl
ciBvcHRpb24gSUQ6IFJlcG9ydGluZyBWaW9sYXRpb25zIG9mIE51bGwgU3BlY2lmaWNhdGlvbnMu
CiAJICogPHA+RGVwZW5kaW5nIG9uIHRoaXMgb3B0aW9uLCB0aGUgY29tcGlsZXIgd2lsbCBpc3N1
ZSBlaXRoZXIgYW4gZXJyb3Igb3IgYSB3YXJuaW5nCkBAIC0xNjIyLDggKzE2MjMsNyBAQAogCSAq
IDxwPldoZW4gZW5hYmxlZCwgdGhlIGNvbXBpbGVyIHdpbGwgaXNzdWUgYW4gZXJyb3Igb3IgYSB3
YXJuaW5nIHdoZW4gYSBub24tbnVsbCBhbm5vdGF0aW9uCiAJICogICAgKHNlZSB7QGxpbmsgI0NP
TVBJTEVSX05PTk5VTExfQU5OT1RBVElPTl9OQU1FfSkKIAkgKiAgICBpcyBhcHBsaWVkIGFsdGhv
dWdoIHRoZSBzYW1lIGVmZmVjdCBpcyBhbHJlYWR5IGFjaGlldmVkIGJ5IGEgZGVmYXVsdCBhcHBs
aWNhYmxlIGF0IHRoZQotCSAqICAgIGN1cnJlbnQgbG9jYXRpb24uIFN1Y2ggYSBkZWZhdWx0IG1h
eSBiZSBzZXQgYnkgZW5hYmxpbmcgdGhlIG9wdGlvbgotCSAqICAgIHtAbGluayAjQ09NUElMRVJf
Tk9OTlVMTF9JU19ERUZBVUxUfSBvciBieSB1c2luZyB0aGUgYW5ub3RhdGlvbiBzcGVjaWZpZWQg
YnkgdGhlIG9wdGlvbgorCSAqICAgIGN1cnJlbnQgbG9jYXRpb24uIFN1Y2ggYSBkZWZhdWx0IG1h
eSBiZSBzZXQgYnkgdXNpbmcgdGhlIGFubm90YXRpb24gc3BlY2lmaWVkIGJ5IHRoZSBvcHRpb24K
IAkgKiAgICB7QGxpbmsgI0NPTVBJTEVSX05PTk5VTExfQllfREVGQVVMVF9BTk5PVEFUSU9OX05B
TUV9LgogCSAqIDwvcD4KIAkgKiA8cD5UaGlzIG9wdGlvbiBvbmx5IGhhcyBhbiBlZmZlY3QgaWYg
dGhlIG9wdGlvbiB7QGxpbmsgI0NPTVBJTEVSX0FOTk9UQVRJT05fTlVMTF9BTkFMWVNJU30gaXMg
ZW5hYmxlZC48L3A+CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9idWlsZGVyL0Fic3RyYWN0SW1hZ2VCdWlsZGVyLmph
dmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29yZS9idWlsZGVyL0Fic3RyYWN0SW1hZ2VCdWlsZGVyLmphdmEKaW5kZXggNTMxYjJiNS4uZDYx
Y2IyZCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvcmUvYnVpbGRlci9BYnN0cmFjdEltYWdlQnVpbGRlci5qYXZhCisrKyBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3Jl
L2J1aWxkZXIvQWJzdHJhY3RJbWFnZUJ1aWxkZXIuamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMDkgSUJNIENvcnBv
cmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTIgSUJNIENvcnBv
cmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0g
YW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5k
ZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNo
IGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC0y
NSw2ICsyNSw3IEBACiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLnV0
aWwuU2ltcGxlU2V0OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci51
dGlsLlN1ZmZpeENvbnN0YW50czsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29y
ZS5KYXZhTW9kZWxNYW5hZ2VyOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3Jl
LlBhY2thZ2VGcmFnbWVudDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS51
dGlsLk1lc3NhZ2VzOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLnV0aWwu
VXRpbDsKIApAQCAtNzA2LDggKzcwNywxMiBAQAogCQlib29sZWFuIG1hbmFnZWRQcm9ibGVtID0g
ZmFsc2U7CiAJCWlmIChJSmF2YU1vZGVsTWFya2VyLkpBVkFfTU9ERUxfUFJPQkxFTV9NQVJLRVIu
ZXF1YWxzKG1hcmtlclR5cGUpCiAJCQkJfHwgKG1hbmFnZWRQcm9ibGVtID0gbWFuYWdlZE1hcmtl
clR5cGVzLmNvbnRhaW5zKG1hcmtlclR5cGUpKSkgeworCQkJaWYgKGlkID09IElQcm9ibGVtLk1p
c3NpbmdOb25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbk9uUGFja2FnZSAmJiAhKENoYXJPcGVyYXRp
b24uZXF1YWxzKHNvdXJjZUZpbGUuZ2V0TWFpblR5cGVOYW1lKCksIFR5cGVDb25zdGFudHMuUEFD
S0FHRV9JTkZPX05BTUUpKSkgeworCQkJCWludCBwa2dFbmQgPSBDaGFyT3BlcmF0aW9uLmxhc3RJ
bmRleE9mKCcvJywgc291cmNlRmlsZS5nZXRGaWxlTmFtZSgpKTsKKwkJCQlQYWNrYWdlRnJhZ21l
bnQgcGtnID0gKFBhY2thZ2VGcmFnbWVudCkgVXRpbC5nZXRQYWNrYWdlRnJhZ21lbnQoc291cmNl
RmlsZS5nZXRGaWxlTmFtZSgpLCBwa2dFbmQsIC0xIC8qbm8gamFyIHNlcGFyYXRvciBmb3IgamF2
YSBmaWxlcyovKTsKKwkJCQlyZXNvdXJjZSA9IHBrZy5yZXNvdXJjZSgpOworCQkJfQogCQkJSU1h
cmtlciBtYXJrZXIgPSByZXNvdXJjZS5jcmVhdGVNYXJrZXIobWFya2VyVHlwZSk7Ci0KIAkJCVN0
cmluZ1tdIGF0dHJpYnV0ZU5hbWVzID0gSkFWQV9QUk9CTEVNX01BUktFUl9BVFRSSUJVVEVfTkFN
RVM7CiAJCQlpbnQgc3RhbmRhcmRMZW5ndGggPSBhdHRyaWJ1dGVOYW1lcy5sZW5ndGg7CiAJCQlT
dHJpbmdbXSBhbGxOYW1lcyA9IGF0dHJpYnV0ZU5hbWVzOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvdXRpbC9VdGls
LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29yZS91dGlsL1V0aWwuamF2YQppbmRleCAyMDIzOTU0Li5lNDVlODczIDEwMDY0NAotLS0g
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29y
ZS91dGlsL1V0aWwuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29yZS91dGlsL1V0aWwuamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8q
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTEgSUJNIENv
cnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTIgSUJNIENv
cnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dy
YW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUg
dW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdo
aWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBA
IC05NDAsNyArOTQwLDcgQEAKIAkJcmV0dXJuIGxpbmVTZXBhcmF0b3I7CiAJfQogCi0JcHJpdmF0
ZSBzdGF0aWMgSVBhY2thZ2VGcmFnbWVudCBnZXRQYWNrYWdlRnJhZ21lbnQoY2hhcltdIGZpbGVO
YW1lLCBpbnQgcGtnRW5kLCBpbnQgamFyU2VwYXJhdG9yKSB7CisJcHVibGljIHN0YXRpYyBJUGFj
a2FnZUZyYWdtZW50IGdldFBhY2thZ2VGcmFnbWVudChjaGFyW10gZmlsZU5hbWUsIGludCBwa2dF
bmQsIGludCBqYXJTZXBhcmF0b3IpIHsKIAkJaWYgKGphclNlcGFyYXRvciAhPSAtMSkgewogCQkJ
U3RyaW5nIGphck1lbWVudG8gPSBuZXcgU3RyaW5nKGZpbGVOYW1lLCAwLCBqYXJTZXBhcmF0b3Ip
OwogCQkJUGFja2FnZUZyYWdtZW50Um9vdCByb290ID0gKFBhY2thZ2VGcmFnbWVudFJvb3QpIEph
dmFDb3JlLmNyZWF0ZShqYXJNZW1lbnRvKTs=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>211945</attachid>
            <date>2012-03-02 04:36:00 -0500</date>
            <delta_ts>2012-03-02 08:46:19 -0500</delta_ts>
            <desc>proposed fix v2.0 + regression tests</desc>
            <filename>Fixed-bug-372012-compilernull-Warn-when-defaults-not.patch</filename>
            <type>text/plain</type>
            <size>54142</size>
            <attacher name="Ayushman Jain">amj87.iitr</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmJ1aWxkZXIvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2J1aWxkZXIvQW5ub3RhdGlvbkRlcGVuZGVuY3lUZXN0cy5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuYnVpbGRlci9zcmMvb3JnL2VjbGlwc2Uv
amR0L2NvcmUvdGVzdHMvYnVpbGRlci9Bbm5vdGF0aW9uRGVwZW5kZW5jeVRlc3RzLmphdmEKaW5k
ZXggOTQ5MDM4ZC4uNDk0OTAwMSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVz
dHMuYnVpbGRlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvYnVpbGRlci9Bbm5vdGF0
aW9uRGVwZW5kZW5jeVRlc3RzLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMu
YnVpbGRlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvYnVpbGRlci9Bbm5vdGF0aW9u
RGVwZW5kZW5jeVRlc3RzLmphdmEKQEAgLTE1MDcsNCArMTUwNyw0MyBAQAogCQkvLyB2ZXJpZnkg
dGhhdCBUZXN0MSB3YXMgcmVjb21waWxlZAogCQlleHBlY3RpbmdVbmlxdWVDb21waWxlZENsYXNz
ZXMobmV3IFN0cmluZ1tdIHsgInAxLlRlc3QxIiwgInAxLlRlc3QyIiB9KTsKIAl9CisJCisJLy8g
aHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM3MjAxMgorCXB1
YmxpYyB2b2lkIHRlc3RCdWczNzIwMTIoKSB0aHJvd3MgSmF2YU1vZGVsRXhjZXB0aW9uLCBJT0V4
Y2VwdGlvbiB7CisJCS8vIHByZXBhcmUgdGhlIHByb2plY3Q6CisJCXNldHVwUHJvamVjdEZvck51
bGxBbm5vdGF0aW9ucygpOworCQllbnYuZ2V0SmF2YVByb2plY3QodGhpcy5wcm9qZWN0UGF0aCku
c2V0T3B0aW9uKEphdmFDb3JlLkNPTVBJTEVSX1BCX01JU1NJTkdfTk9OTlVMTF9CWV9ERUZBVUxU
X0FOTk9UQVRJT04sIEphdmFDb3JlLkVSUk9SKTsKKwkJZW52LmdldEphdmFQcm9qZWN0KHRoaXMu
cHJvamVjdFBhdGgpLnNldE9wdGlvbihKYXZhQ29yZS5DT01QSUxFUl9QQl9SRURVTkRBTlRfTlVM
TF9BTk5PVEFUSU9OLCBKYXZhQ29yZS5FUlJPUik7CisJCVN0cmluZyB0ZXN0MUNvZGUgPSAicGFj
a2FnZSBwMTtcbiIJKworCQkJInB1YmxpYyBjbGFzcyBUZXN0MSB7XG4iICsKKwkJCSIgICAgcHVi
bGljIHZvaWQgZm9vKCkge1xuIiArCisJCQkiICAgICAgICBuZXcgVGVzdDIoKS5iYXIoXCJcIik7
XG4iICsKKwkJCSIgICAgfVxuIiArCisJCQkiCSBjbGFzcyBUZXN0MUlubmVye31cbiIgKworCQkJ
In0iOworCQlTdHJpbmcgdGVzdDJDb2RlID0gInBhY2thZ2UgcDE7XG4iICsKKwkJCSJAb3JnLmVj
bGlwc2UuamR0LmFubm90YXRpb24uTm9uTnVsbEJ5RGVmYXVsdFxuIiArCisJCQkicHVibGljIGNs
YXNzIFRlc3QyIHtcbiIgKworCQkJIiAgICBwdWJsaWMgdm9pZCBiYXIoU3RyaW5nIHN0cikge31c
biIgKworCQkJIn0iOworCisJCUlQYXRoIHRlc3QxUGF0aCA9IGVudi5hZGRDbGFzcyggdGhpcy5z
cmNSb290LCAicDEiLCAiVGVzdDEiLCB0ZXN0MUNvZGUgKTsKKwkJZW52LmFkZENsYXNzKCB0aGlz
LnNyY1Jvb3QsICJwMSIsICJUZXN0MiIsIHRlc3QyQ29kZSApOworCisJCWZ1bGxCdWlsZCggdGhp
cy5wcm9qZWN0UGF0aCApOworCQlleHBlY3RpbmdOb1Byb2JsZW1zRm9yKHRlc3QxUGF0aCk7CisJ
CWV4cGVjdGluZ1Byb2JsZW1zRm9yKHRoaXMuc3JjUm9vdCwgCisJCQkJIlByb2JsZW0gOiBBIGRl
ZmF1bHQgbnVsbG5lc3MgYW5ub3RhdGlvbiBoYXMgbm90IGJlZW4gc3BlY2lmaWVkIGZvciB0aGUg
cGFja2FnZSBwMSBbIHJlc291cmNlIDogPC9Qcm9qZWN0L3NyYy9wMT4gcmFuZ2UgOiA8LTEsLTE+
IGNhdGVnb3J5IDogPDkwPiBzZXZlcml0eSA6IDwyPl0iKTsKKworCQkvLyBhZGQgcGFja2FnZS1p
bmZvLmphdmEgd2l0aCBkZWZhdWx0IGFubm90YXRpb24KKwkJU3RyaW5nIHBhY2thZ2VJbmZvQ29k
ZSA9ICJAb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTm9uTnVsbEJ5RGVmYXVsdFxuIiArCisJ
CQkicGFja2FnZSBwMTtcbiI7CisJCWVudi5hZGRDbGFzcyggdGhpcy5zcmNSb290LCAicDEiLCAi
cGFja2FnZS1pbmZvIiwgcGFja2FnZUluZm9Db2RlICk7CisJCWluY3JlbWVudGFsQnVpbGQoIHRo
aXMucHJvamVjdFBhdGggKTsKKwkJZXhwZWN0aW5nUHJvYmxlbXNGb3IodGhpcy5wcm9qZWN0UGF0
aCwKKwkJCQkiUHJvYmxlbSA6IE51bGxuZXNzIGRlZmF1bHQgaXMgcmVkdW5kYW50IHdpdGggYSBk
ZWZhdWx0IHNwZWNpZmllZCBmb3IgdGhlIGVuY2xvc2luZyBwYWNrYWdlIHAxIFsgcmVzb3VyY2Ug
OiA8L1Byb2plY3Qvc3JjL3AxL1Rlc3QyLmphdmE+IHJhbmdlIDogPDEyLDU2PiBjYXRlZ29yeSA6
IDwxMjA+IHNldmVyaXR5IDogPDI+XSIpOworCisJCS8vIHZlcmlmeSB0aGF0IGFsbCBwYWNrYWdl
IENVJ3Mgd2VyZSByZWNvbXBpbGVkCisJCWV4cGVjdGluZ1VuaXF1ZUNvbXBpbGVkQ2xhc3Nlcyhu
ZXcgU3RyaW5nW10geyAicDEuVGVzdDEiLCAicDEuVGVzdDEkVGVzdDFJbm5lciIsICJwMS5UZXN0
MiIsICJwMS5wYWNrYWdlLWluZm8iIH0pOworCX0KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9j
b21waWxlci9yZWdyZXNzaW9uL0JhdGNoQ29tcGlsZXJUZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29t
cGlsZXIvcmVncmVzc2lvbi9CYXRjaENvbXBpbGVyVGVzdC5qYXZhCmluZGV4IDAzMGYwZmQuLmU2
MDZiOWYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3Ny
Yy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0JhdGNoQ29t
cGlsZXJUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIv
c3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vQmF0Y2hD
b21waWxlclRlc3QuamF2YQpAQCAtNzksNyArNzksNyBAQAogCQkJIn1cbiI7CiAKIAlzdGF0aWMg
ewotLy8JCVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1tdIHsgInRlc3QzMSIgfTsKKy8vCQlURVNU
U19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7ICJ0ZXN0MzE1X3dhcm5fb3B0aW9ucyIgfTsKIC8vCQlU
RVNUU19OVU1CRVJTID0gbmV3IGludFtdIHsgMzA2IH07CiAvLwkJVEVTVFNfUkFOR0UgPSBuZXcg
aW50W10geyAyOTgsIC0xIH07CiAJfQpAQCAtMTY0NCw5ICsxNjQ0LDggQEAKICAgICAgICAgIiAg
ICAtZW5hYmxlSmF2YWRvYyAgICAgY29uc2lkZXIgcmVmZXJlbmNlcyBpbiBqYXZhZG9jXG4iICsK
ICAgICAgICAgIiAgICAtWGVtYWNzICAgICAgICAgICAgdXNlZCB0byBlbmFibGUgZW1hY3Mtc3R5
bGUgb3V0cHV0IGluIHRoZSBjb25zb2xlLlxuIiArCiAgICAgICAgICIgICAgICAgICAgICAgICAg
ICAgICAgIEl0IGRvZXMgbm90IGFmZmVjdCB0aGUgeG1sIGxvZyBvdXRwdXRcbiIgKwotICAgICAg
ICAiICAgIC1ub25OdWxsQnlEZWZhdWx0ICBmb3IgYW5ub3RhdGlvbiBiYXNlZCBudWxsIGFuYWx5
c2lzIGFzc3VtZSBub25udWxsXG4iICsgCi0gICAgICAgICIgICAgICAgICAgICAgICAgICAgICAg
IGFzIHRoZSBnbG9iYWwgZGVmYXVsdFxuIiArIAotICAgICAgICAiIFxuIiArCisgICAgICAgICIg
ICAgLW1pc3NpbmdEZWZhdWx0QW5ub3QgIHJlcG9ydCBtaXNzaW5nIGRlZmF1bHQgbnVsbG5lc3Mg
YW5ub3RhdGlvblxuIiArIAorICAgICAgICAiIFxuIiArIAogICAgICAgICAiICAgIC0/IC1oZWxw
ICAgICAgICAgICBwcmludCB0aGlzIGhlbHAgbWVzc2FnZVxuIiArCiAgICAgICAgICIgICAgLXYg
LXZlcnNpb24gICAgICAgIHByaW50IGNvbXBpbGVyIHZlcnNpb25cbiIgKwogICAgICAgICAiICAg
IC1zaG93dmVyc2lvbiAgICAgICBwcmludCBjb21waWxlciB2ZXJzaW9uIGFuZCBjb250aW51ZVxu
IiArCkBAIC0xODM4LDkgKzE4MzcsOSBAQAogCQkJIgkJPGFyZ3VtZW50IHZhbHVlPVwiLS0tT1VU
UFVUX0RJUl9QTEFDRUhPTERFUi0tLVwiLz5cbiIgKyAKIAkJCSIJPC9jb21tYW5kX2xpbmU+XG4i
ICsgCiAJCQkiCTxvcHRpb25zPlxuIiArIAorCQkJIgkJPG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBz
ZS5qZHQuY29yZS5jb21waWxlci5hbm5vdGF0aW9uLm1pc3NpbmdOb25OdWxsQnlEZWZhdWx0QW5u
b3RhdGlvblwiIHZhbHVlPVwiaWdub3JlXCIvPlxuIiArIAogCQkJIgkJPG9wdGlvbiBrZXk9XCJv
cmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5hbm5vdGF0aW9uLm5vbm51bGxcIiB2YWx1ZT1c
Im9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uLk5vbk51bGxcIi8+XG4iICsgCiAJCQkiCQk8b3B0
aW9uIGtleT1cIm9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLmFubm90YXRpb24ubm9ubnVs
bGJ5ZGVmYXVsdFwiIHZhbHVlPVwib3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTm9uTnVsbEJ5
RGVmYXVsdFwiLz5cbiIgKyAKLQkJCSIJCTxvcHRpb24ga2V5PVwib3JnLmVjbGlwc2UuamR0LmNv
cmUuY29tcGlsZXIuYW5ub3RhdGlvbi5ub25udWxsaXNkZWZhdWx0XCIgdmFsdWU9XCJkaXNhYmxl
ZFwiLz5cbiIgKyAKIAkJCSIJCTxvcHRpb24ga2V5PVwib3JnLmVjbGlwc2UuamR0LmNvcmUuY29t
cGlsZXIuYW5ub3RhdGlvbi5udWxsYWJsZVwiIHZhbHVlPVwib3JnLmVjbGlwc2UuamR0LmFubm90
YXRpb24uTnVsbGFibGVcIi8+XG4iICsgCiAJCQkiCQk8b3B0aW9uIGtleT1cIm9yZy5lY2xpcHNl
LmpkdC5jb3JlLmNvbXBpbGVyLmFubm90YXRpb24ubnVsbGFuYWx5c2lzXCIgdmFsdWU9XCJkaXNh
YmxlZFwiLz5cbiIgKyAKIAkJCSIJCTxvcHRpb24ga2V5PVwib3JnLmVjbGlwc2UuamR0LmNvcmUu
Y29tcGlsZXIuY29kZWdlbi5pbmxpbmVKc3JCeXRlY29kZVwiIHZhbHVlPVwiZGlzYWJsZWRcIi8+
XG4iICsgCkBAIC0xMjU5OCwzMSArMTI1OTcsMjggQEAKIH0KIAogLy8gaHR0cHM6Ly9idWdzLmVj
bGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTMyNTM0MgotLy8gLXdhcm4gb3B0aW9uIC0g
cmVncmVzc2lvbiB0ZXN0cyB0byBjaGVjayBvcHRpb24gbnVsbEFubm90Ci0vLyBOdWxsIHdhcm5p
bmdzIGJlY2F1c2Ugb2YgYW5ub3RhdGlvbnMsIGdsb2JhbCBub25OdWxsQnlEZWZhdWx0Ci0vLyBE
SVNBQkxFRCBkdWUgdG8gZHlzZnVuY3Rpb25hbCBnbG9iYWwgZGVmYXVsdCBhZnRlciBCdWcgMzY2
MDYzIC0gQ29tcGlsZXIgc2hvdWxkIG5vdCBhZGQgc3ludGhldGljIEBOb25OdWxsIGFubm90YXRp
b25zCi1wdWJsaWMgdm9pZCBfdGVzdDMxNV93YXJuX29wdGlvbnMoKSB7CisvLyAtd2FybiBvcHRp
b24gLSByZWdyZXNzaW9uIHRlc3RzIHRvIGNoZWNrIG9wdGlvbiBudWxsQW5ub3QgYW5kIG1pc3Np
bmdEZWZhdWx0QW5ub3QKKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVn
LmNnaT9pZD0zNzIwMTIKK3B1YmxpYyB2b2lkIHRlc3QzMTVfd2Fybl9vcHRpb25zKCkgewogCXRo
aXMucnVuQ29uZm9ybVRlc3QoCiAJCW5ldyBTdHJpbmdbXSB7CisJCQkJInAvcGFja2FnZS1pbmZv
LmphdmEiLAorCQkJCSJAb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTm9uTnVsbEJ5RGVmYXVs
dFxuIiArCisJCQkJInBhY2thZ2UgcDtcbiIsCiAJCQkJInAvWC5qYXZhIiwKIAkJCQkicGFja2Fn
ZSBwO1xuIiArCi0JCQkJImltcG9ydCBvcmcuZWNsaXBzZS5qZHQuYW5ub3RhdGlvbi4qO1xuIiAr
Ci0JCQkJIkBTdXBwcmVzc1dhcm5pbmdzKFwidW51c2VkXCIpXG4iICsKIAkJCQkicHVibGljIGNs
YXNzIFgge1xuIiArCi0JCQkJIiAgT2JqZWN0IGZvbyhATnVsbGFibGUgT2JqZWN0IG8sIE9iamVj
dCBvMikge1xuIiArCi0JCQkJIiAgICBpZiAoby50b1N0cmluZygpID09IFwiXCIpeyByZXR1cm4g
bnVsbDt9XG4iICsKLQkJCQkiICAgIGlmIChvMiA9PSBudWxsKSB7fVxuIiArCi0JCQkJIiAgICBn
b28obnVsbCkudG9TdHJpbmcoKTtcbiIgKwotCQkJCSIJIHJldHVybiBudWxsO1xuIiArCi0JCQkJ
IiAgfVxuIiArCi0JCQkJIiAgQE51bGxhYmxlIE9iamVjdCBnb28oT2JqZWN0IG8yKSB7XG4iICsK
LQkJCQkiICAgIHJldHVybiBuZXcgT2JqZWN0KCk7XG4iICsKLQkJCQkiICB9XG4iICsKLQkJCQki
ICBATm9uTnVsbEJ5RGVmYXVsdCBPYmplY3QgaG9vKE9iamVjdCBvMikge1xuIiArIC8vIHJlZHVu
ZGFudAotCQkJCSIgICAgaWYgKG8yID09IG51bGwpXG4iICsKLQkJCQkiCSAgICByZXR1cm4gbnVs
bDtcbiIgKwotCQkJCSIgICAgcmV0dXJuIHRoaXM7XG4iICsKLQkJCQkiICB9XG4iICsKKwkJCQki
fVxuIiwKKwkJCQkicDEvWDEuamF2YSIsCisJCQkJInBhY2thZ2UgcDE7XG4iICsKKwkJCQkicHVi
bGljIGNsYXNzIFgxIHtcbiIgKworCQkJCSJ9XG4iLAorCQkJCSJwMS9YMWEuamF2YSIsCisJCQkJ
InBhY2thZ2UgcDE7XG4iICsKKwkJCQkicHVibGljIGNsYXNzIFgxYSB7XG4iICsKKwkJCQkifVxu
IiwKKwkJCQkiRGVmYXVsdDEuamF2YSIsCisJCQkJInB1YmxpYyBjbGFzcyBEZWZhdWx0MSB7XG4i
ICsKIAkJCQkifVxuIiwKIAkJCQkib3JnL2VjbGlwc2UvamR0L2Fubm90YXRpb24vTm9uTnVsbC5q
YXZhIiwKIAkJCQlOT05OVUxMX0FOTk9UQVRJT05fQ09OVEVOVCwKQEAgLTEyNjM0LDUwICsxMjYz
MCw4NCBAQAogCQkiXCIiICsgT1VUUFVUX0RJUiArICBGaWxlLnNlcGFyYXRvciArICJwIiArIEZp
bGUuc2VwYXJhdG9yICsgIlguamF2YVwiIgogCQkrICIgLXNvdXJjZXBhdGggXCIiICsgT1VUUFVU
X0RJUiArICJcIiIKIAkJKyAiIC0xLjUiCi0JCSsgIiAtd2FybjorbnVsbEFubm90IC13YXJuOitu
dWxsIC1ub25OdWxsQnlEZWZhdWx0IC1wcm9jOm5vbmUgLWQgXCIiICsgT1VUUFVUX0RJUiArICJc
IiIsCisJCSsgIiAtd2FybjorbnVsbEFubm90IC13YXJuOitudWxsIC1taXNzaW5nRGVmYXVsdEFu
bm90IC1wcm9jOm5vbmUgLWQgXCIiICsgT1VUUFVUX0RJUiArICJcIiIsCisJCSIiLAorCQkiIiwK
KwkJdHJ1ZSk7Cit9CisKKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVn
LmNnaT9pZD0zMjUzNDIKKy8vIC13YXJuIG9wdGlvbiAtIHJlZ3Jlc3Npb24gdGVzdHMgdG8gY2hl
Y2sgb3B0aW9uIG51bGxBbm5vdCBhbmQgbWlzc2luZ0RlZmF1bHRBbm5vdAorLy8gaHR0cHM6Ly9i
dWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM3MjAxMgorcHVibGljIHZvaWQg
dGVzdDMxNV93YXJuX29wdGlvbnNfYSgpIHsKKwl0aGlzLnJ1bk5lZ2F0aXZlVGVzdCgKKwkJbmV3
IFN0cmluZ1tdIHsKKwkJCQkicDEvWDEuamF2YSIsCisJCQkJInBhY2thZ2UgcDE7XG4iICsKKwkJ
CQkicHVibGljIGNsYXNzIFgxIHtcbiIgKworCQkJCSIJWm9yaztcbiIgKworCQkJCSJ9XG4iLAor
CQkJCSJvcmcvZWNsaXBzZS9qZHQvYW5ub3RhdGlvbi9Ob25OdWxsLmphdmEiLAorCQkJCU5PTk5V
TExfQU5OT1RBVElPTl9DT05URU5ULAorCQkJCSJvcmcvZWNsaXBzZS9qZHQvYW5ub3RhdGlvbi9O
dWxsYWJsZS5qYXZhIiwKKwkJCQlOVUxMQUJMRV9BTk5PVEFUSU9OX0NPTlRFTlQsCisJCQkJIm9y
Zy9lY2xpcHNlL2pkdC9hbm5vdGF0aW9uL05vbk51bGxCeURlZmF1bHQuamF2YSIsCQkJCQorCQkJ
CU5PTk5VTExfQllfREVGQVVMVF9BTk5PVEFUSU9OX0NPTlRFTlQKKwkJfSwKKwkJIlwiIiArIE9V
VFBVVF9ESVIgKyAgRmlsZS5zZXBhcmF0b3IgKyAicDEiICsgRmlsZS5zZXBhcmF0b3IgKyAiWDEu
amF2YVwiIgorCQkrICIgLXNvdXJjZXBhdGggXCIiICsgT1VUUFVUX0RJUiArICJcIiIKKwkJKyAi
IC0xLjUiCisJCSsgIiAtd2FybjorbnVsbEFubm90IC13YXJuOitudWxsIC1taXNzaW5nRGVmYXVs
dEFubm90IC1wcm9jOm5vbmUgLWQgXCIiICsgT1VUUFVUX0RJUiArICJcIiIsCiAJCSIiLAogCQki
LS0tLS0tLS0tLVxuIiArIAotCQkiMS4gV0FSTklORyBpbiAtLS1PVVRQVVRfRElSX1BMQUNFSE9M
REVSLS0tL3AvWC5qYXZhIChhdCBsaW5lIDYpXG4iICsgCi0JCSIJaWYgKG8udG9TdHJpbmcoKSA9
PSBcIlwiKXsgcmV0dXJuIG51bGw7fVxuIiArIAotCQkiCSAgICBeXG4iICsgCi0JCSJQb3RlbnRp
YWwgbnVsbCBwb2ludGVyIGFjY2VzczogVGhlIHZhcmlhYmxlIG8gbWF5IGJlIG51bGwgYXQgdGhp
cyBsb2NhdGlvblxuIiArIAorCQkiMS4gV0FSTklORyBpbiAtLS1PVVRQVVRfRElSX1BMQUNFSE9M
REVSLS0tL3AxL1gxLmphdmEgKGF0IGxpbmUgMSlcbiIgKyAKKwkJIglwYWNrYWdlIHAxO1xuIiAr
IAorCQkiCSAgICAgICAgXl5cbiIgKyAKKwkJIkEgZGVmYXVsdCBudWxsbmVzcyBhbm5vdGF0aW9u
IGhhcyBub3QgYmVlbiBzcGVjaWZpZWQgZm9yIHRoZSBwYWNrYWdlIHAxXG4iICsgCiAJCSItLS0t
LS0tLS0tXG4iICsgCi0JCSIyLiBXQVJOSU5HIGluIC0tLU9VVFBVVF9ESVJfUExBQ0VIT0xERVIt
LS0vcC9YLmphdmEgKGF0IGxpbmUgNilcbiIgKyAKLQkJIglpZiAoby50b1N0cmluZygpID09IFwi
XCIpeyByZXR1cm4gbnVsbDt9XG4iICsgCi0JCSIJICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICBeXl5eXG4iICsgCi0JCSJUeXBlIG1pc21hdGNoOiByZXF1aXJlZCBcJ0BOb25OdWxsIE9i
amVjdFwnIGJ1dCB0aGUgcHJvdmlkZWQgdmFsdWUgaXMgbnVsbFxuIiArIAorCQkiMi4gRVJST1Ig
aW4gLS0tT1VUUFVUX0RJUl9QTEFDRUhPTERFUi0tLS9wMS9YMS5qYXZhIChhdCBsaW5lIDMpXG4i
ICsgCisJCSIJWm9yaztcbiIgKyAKKwkJIgleXl5eXG4iICsgCisJCSJTeW50YXggZXJyb3Igb24g
dG9rZW4gXCJab3JrXCIsIFZhcmlhYmxlRGVjbGFyYXRvciBleHBlY3RlZCBhZnRlciB0aGlzIHRv
a2VuXG4iICsgCiAJCSItLS0tLS0tLS0tXG4iICsgCi0JCSIzLiBXQVJOSU5HIGluIC0tLU9VVFBV
VF9ESVJfUExBQ0VIT0xERVItLS0vcC9YLmphdmEgKGF0IGxpbmUgNylcbiIgKyAKLQkJIglpZiAo
bzIgPT0gbnVsbCkge31cbiIgKyAKLQkJIgkgICAgXl5cbiIgKyAKLQkJIk51bGwgY29tcGFyaXNv
biBhbHdheXMgeWllbGRzIGZhbHNlOiBUaGUgdmFyaWFibGUgbzIgY2Fubm90IGJlIG51bGwgYXQg
dGhpcyBsb2NhdGlvblxuIiArIAorCQkiMiBwcm9ibGVtcyAoMSBlcnJvciwgMSB3YXJuaW5nKSIs
IAorCQl0cnVlKTsKK30KKworLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19i
dWcuY2dpP2lkPTMyNTM0MgorLy8gLXdhcm4gb3B0aW9uIC0gcmVncmVzc2lvbiB0ZXN0cyB0byBj
aGVjayBvcHRpb24gbnVsbEFubm90IGFuZCBtaXNzaW5nRGVmYXVsdEFubm90CisvLyBodHRwczov
L2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzcyMDEyCitwdWJsaWMgdm9p
ZCB0ZXN0MzE1X3dhcm5fb3B0aW9uc19iKCkgeworCXRoaXMucnVuTmVnYXRpdmVUZXN0KAorCQlu
ZXcgU3RyaW5nW10geworCQkJCSJYMS5qYXZhIiwKKwkJCQkicHVibGljIGNsYXNzIFgxIHtcbiIg
KworCQkJCSIJWm9yaztcbiIgKworCQkJCSJ9XG4iLAorCQkJCSJvcmcvZWNsaXBzZS9qZHQvYW5u
b3RhdGlvbi9Ob25OdWxsLmphdmEiLAorCQkJCU5PTk5VTExfQU5OT1RBVElPTl9DT05URU5ULAor
CQkJCSJvcmcvZWNsaXBzZS9qZHQvYW5ub3RhdGlvbi9OdWxsYWJsZS5qYXZhIiwKKwkJCQlOVUxM
QUJMRV9BTk5PVEFUSU9OX0NPTlRFTlQsCisJCQkJIm9yZy9lY2xpcHNlL2pkdC9hbm5vdGF0aW9u
L05vbk51bGxCeURlZmF1bHQuamF2YSIsCQkJCQorCQkJCU5PTk5VTExfQllfREVGQVVMVF9BTk5P
VEFUSU9OX0NPTlRFTlQKKwkJfSwKKwkJIlwiIiArIE9VVFBVVF9ESVIgKyAgRmlsZS5zZXBhcmF0
b3IgKyAiWDEuamF2YVwiIgorCQkrICIgLXNvdXJjZXBhdGggXCIiICsgT1VUUFVUX0RJUiArICJc
IiIKKwkJKyAiIC0xLjUiCisJCSsgIiAtd2FybjorbnVsbEFubm90IC13YXJuOitudWxsIC1taXNz
aW5nRGVmYXVsdEFubm90IC1wcm9jOm5vbmUgLWQgXCIiICsgT1VUUFVUX0RJUiArICJcIiIsCisJ
CSIiLAogCQkiLS0tLS0tLS0tLVxuIiArIAotCQkiNC4gV0FSTklORyBpbiAtLS1PVVRQVVRfRElS
X1BMQUNFSE9MREVSLS0tL3AvWC5qYXZhIChhdCBsaW5lIDgpXG4iICsgCi0JCSIJZ29vKG51bGwp
LnRvU3RyaW5nKCk7XG4iICsgCi0JCSIJXl5eXl5eXl5eXG4iICsgCi0JCSJQb3RlbnRpYWwgbnVs
bCBwb2ludGVyIGFjY2VzczogVGhlIG1ldGhvZCBnb28oT2JqZWN0KSBtYXkgcmV0dXJuIG51bGxc
biIgKyAKKwkJIjEuIFdBUk5JTkcgaW4gLS0tT1VUUFVUX0RJUl9QTEFDRUhPTERFUi0tLS9YMS5q
YXZhIChhdCBsaW5lIDEpXG4iICsgCisJCSIJcHVibGljIGNsYXNzIFgxIHtcbiIgKyAKKwkJIgkg
ICAgICAgICAgICAgXl5cbiIgKyAKKwkJIkEgZGVmYXVsdCBudWxsbmVzcyBhbm5vdGF0aW9uIGhh
cyBub3QgYmVlbiBzcGVjaWZpZWQgZm9yIHRoZSB0eXBlIFgxXG4iICsgCiAJCSItLS0tLS0tLS0t
XG4iICsgCi0JCSI1LiBXQVJOSU5HIGluIC0tLU9VVFBVVF9ESVJfUExBQ0VIT0xERVItLS0vcC9Y
LmphdmEgKGF0IGxpbmUgOClcbiIgKyAKLQkJIglnb28obnVsbCkudG9TdHJpbmcoKTtcbiIgKyAK
LQkJIgkgICAgXl5eXlxuIiArIAotCQkiVHlwZSBtaXNtYXRjaDogcmVxdWlyZWQgXCdATm9uTnVs
bCBPYmplY3RcJyBidXQgdGhlIHByb3ZpZGVkIHZhbHVlIGlzIG51bGxcbiIgKyAKKwkJIjIuIEVS
Uk9SIGluIC0tLU9VVFBVVF9ESVJfUExBQ0VIT0xERVItLS0vWDEuamF2YSAoYXQgbGluZSAyKVxu
IiArIAorCQkiCVpvcms7XG4iICsgCisJCSIJXl5eXlxuIiArIAorCQkiU3ludGF4IGVycm9yIG9u
IHRva2VuIFwiWm9ya1wiLCBWYXJpYWJsZURlY2xhcmF0b3IgZXhwZWN0ZWQgYWZ0ZXIgdGhpcyB0
b2tlblxuIiArIAogCQkiLS0tLS0tLS0tLVxuIiArIAotCQkiNi4gV0FSTklORyBpbiAtLS1PVVRQ
VVRfRElSX1BMQUNFSE9MREVSLS0tL3AvWC5qYXZhIChhdCBsaW5lIDkpXG4iICsgCi0JCSIJcmV0
dXJuIG51bGw7XG4iICsgCi0JCSIJICAgICAgIF5eXl5cbiIgKyAKLQkJIlR5cGUgbWlzbWF0Y2g6
IHJlcXVpcmVkIFwnQE5vbk51bGwgT2JqZWN0XCcgYnV0IHRoZSBwcm92aWRlZCB2YWx1ZSBpcyBu
dWxsXG4iICsgCi0JCSItLS0tLS0tLS0tXG4iICsgCi0JCSI3LiBXQVJOSU5HIGluIC0tLU9VVFBV
VF9ESVJfUExBQ0VIT0xERVItLS0vcC9YLmphdmEgKGF0IGxpbmUgMTQpXG4iICsgCi0JCSIJQE5v
bk51bGxCeURlZmF1bHQgT2JqZWN0IGhvbyhPYmplY3QgbzIpIHtcbiIgKyAKLQkJIgleXl5eXl5e
Xl5eXl5eXl5eXlxuIiArIAotCQkiTnVsbG5lc3MgZGVmYXVsdCBpcyByZWR1bmRhbnQgd2l0aCB0
aGUgZ2xvYmFsIGRlZmF1bHRcbiIgKyAKLQkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJIjguIFdBUk5J
TkcgaW4gLS0tT1VUUFVUX0RJUl9QTEFDRUhPTERFUi0tLS9wL1guamF2YSAoYXQgbGluZSAxNSlc
biIgKyAKLQkJIglpZiAobzIgPT0gbnVsbClcbiIgKyAKLQkJIgkgICAgXl5cbiIgKyAKLQkJIk51
bGwgY29tcGFyaXNvbiBhbHdheXMgeWllbGRzIGZhbHNlOiBUaGUgdmFyaWFibGUgbzIgY2Fubm90
IGJlIG51bGwgYXQgdGhpcyBsb2NhdGlvblxuIiArIAotCQkiLS0tLS0tLS0tLVxuIiArIAotCQki
OCBwcm9ibGVtcyAoOCB3YXJuaW5ncykiLCAKKwkJIjIgcHJvYmxlbXMgKDEgZXJyb3IsIDEgd2Fy
bmluZykiLCAKIAkJdHJ1ZSk7CiB9CiAKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
LnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9y
ZWdyZXNzaW9uL051bGxBbm5vdGF0aW9uVGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUu
dGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3Jl
Z3Jlc3Npb24vTnVsbEFubm90YXRpb25UZXN0LmphdmEKaW5kZXggYjY0ZTVlOC4uYzVlN2NhZSAx
MDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbEFubm90YXRpb25U
ZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbEFubm90YXRp
b25UZXN0LmphdmEKQEAgLTE5MTQsMjkgKzE5MTQsNiBAQAogCQkiLS0tLS0tLS0tLVxuIiwKIAkJ
SmF2YWNUZXN0T3B0aW9ucy5FeGN1c2UuRWNsaXBzZVdhcm5pbmdDb25maWd1cmVkQXNFcnJvcik7
CiB9Ci0vLyB1c2luZyBudWxsbmVzcyBkZWZhdWx0aW5nIHRvIG5vbm51bGwsIG1pc3NpbmcgYW5u
b3RhdGlvbiB0eXBlcywgbm8gbG9uZ2VyIGEgcHJvYmxlbQotcHVibGljIHZvaWQgdGVzdF9hbm5v
dGF0aW9uX2ltcG9ydF8wMDcoKSB7Ci0JTWFwIGN1c3RvbU9wdGlvbnMgPSBnZXRDb21waWxlck9w
dGlvbnMoKTsKLQljdXN0b21PcHRpb25zLnB1dChKYXZhQ29yZS5DT01QSUxFUl9QQl9OVUxMX1NQ
RUNJRklDQVRJT05fSU5TVUZGSUNJRU5UX0lORk8sIEphdmFDb3JlLkVSUk9SKTsKLQljdXN0b21P
cHRpb25zLnB1dChKYXZhQ29yZS5DT01QSUxFUl9OVUxMQUJMRV9BTk5PVEFUSU9OX05BTUUsICJv
cmcuZm9vLk1heUJlTnVsbCIpOwotCWN1c3RvbU9wdGlvbnMucHV0KEphdmFDb3JlLkNPTVBJTEVS
X05PTk5VTExfQU5OT1RBVElPTl9OQU1FLCAib3JnLmZvby5NdXN0Tm90QmVOdWxsIik7Ci0JY3Vz
dG9tT3B0aW9ucy5wdXQoSmF2YUNvcmUuQ09NUElMRVJfTk9OTlVMTF9JU19ERUZBVUxULCBKYXZh
Q29yZS5FTkFCTEVEKTsKLQlydW5Db25mb3JtVGVzdFdpdGhMaWJzKAotCQluZXcgU3RyaW5nW10g
ewotCQkJIkxpYi5qYXZhIiwKLQkJCSJwdWJsaWMgY2xhc3MgTGliIHtcbiIgKwotCQkJIiAgICBP
YmplY3QgZ2V0T2JqZWN0KCkgeyByZXR1cm4gbmV3IE9iamVjdCgpOyB9XG4iICsKLQkJCSJ9XG4i
LAotCQkJIlguamF2YSIsCi0JCQkicHVibGljIGNsYXNzIFgge1xuIiArCi0JCQkiICAgIE9iamVj
dCBnZXRPYmplY3QoTGliIGwpIHtcbiIgKwotCQkJIiAgICAgICAgcmV0dXJuIGwuZ2V0T2JqZWN0
KCk7XG4iICsKLQkJCSIgICAgfVxuIiArCi0JCQkifVxuIgotCQl9LAotCQljdXN0b21PcHRpb25z
LAotCQkiIik7Ci19CiAKIC8vIGEgbnVsbCBhbm5vdGF0aW9uIGlzIGlsbGVnYWxseSB1c2VkIG9u
IGEgY2xhc3M6CiBwdWJsaWMgdm9pZCB0ZXN0X2lsbGVnYWxfYW5ub3RhdGlvbl8wMDEoKSB7CkBA
IC0yNDA5LDcgKzIzODYsNyBAQAogcHVibGljIHZvaWQgX3Rlc3RfZGVmYXVsdF9udWxsbmVzc18w
MDcoKSB7CiAJTWFwIGN1c3RvbU9wdGlvbnMgPSBnZXRDb21waWxlck9wdGlvbnMoKTsKIC8vCWN1
c3RvbU9wdGlvbnMucHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJT05fUmVwb3J0UG90ZW50aWFsTnVs
bFNwZWNWaW9sYXRpb24sIEphdmFDb3JlLkVSUk9SKTsKLQljdXN0b21PcHRpb25zLnB1dChKYXZh
Q29yZS5DT01QSUxFUl9OT05OVUxMX0lTX0RFRkFVTFQsIEphdmFDb3JlLkVOQUJMRUQpOworLy8J
Y3VzdG9tT3B0aW9ucy5wdXQoSmF2YUNvcmUuQ09NUElMRVJfTk9OTlVMTF9JU19ERUZBVUxULCBK
YXZhQ29yZS5FTkFCTEVEKTsKIAlydW5OZWdhdGl2ZVRlc3RXaXRoTGlicygKIAkJbmV3IFN0cmlu
Z1tdIHsKIAkJCSJYLmphdmEiLApAQCAtMjg2MCw0OCArMjgzNywxMTAgQEAKIAkJIi0tLS0tLS0t
LS1cbiIpOwogfQogCi0vLyByZWR1bmRhbnQgZGVmYXVsdCBhbm5vdGF0aW9ucyAtIHBhY2thZ2Ug
LyBjbGFzcyAvIG1ldGhvZCB2cyBnbG9iYWwgZGVmYXVsdAotLy8gRElTQUJMRUQgZHVlIHRvIGR5
c2Z1bmN0aW9uYWwgZ2xvYmFsIGRlZmF1bHQgYWZ0ZXIgQnVnIDM2NjA2MyAtIENvbXBpbGVyIHNo
b3VsZCBub3QgYWRkIHN5bnRoZXRpYyBATm9uTnVsbCBhbm5vdGF0aW9ucwotcHVibGljIHZvaWQg
X3Rlc3RfcmVkdW5kYW50X2Fubm90YXRpb25fMDMoKSB7CisvLyB0ZXN0IG1pc3NpbmcgZGVmYXVs
dCBudWxsbmVzcyBhbm5vdGF0aW9uIGZvciB0eXBlcyBpbiBkZWZhdWx0IHBhY2thZ2UKK3B1Ymxp
YyB2b2lkIHRlc3RfbWlzc2luZ19kZWZhdWx0X2Fubm90YXRpb25fMDEoKSB7CiAJTWFwIGN1c3Rv
bU9wdGlvbnMgPSBnZXRDb21waWxlck9wdGlvbnMoKTsKLQljdXN0b21PcHRpb25zLnB1dChKYXZh
Q29yZS5DT01QSUxFUl9OT05OVUxMX0lTX0RFRkFVTFQsIEphdmFDb3JlLkVOQUJMRUQpOwotCXJ1
bkNvbmZvcm1UZXN0V2l0aExpYnMoCisJY3VzdG9tT3B0aW9ucy5wdXQoSmF2YUNvcmUuQ09NUElM
RVJfUEJfTUlTU0lOR19OT05OVUxMX0JZX0RFRkFVTFRfQU5OT1RBVElPTiwgSmF2YUNvcmUuRVJS
T1IpOworCXJ1bk5lZ2F0aXZlVGVzdFdpdGhMaWJzKAorCQluZXcgU3RyaW5nW10geworCQkJIkxp
Yi5qYXZhIiwKKwkJCSJwdWJsaWMgY2xhc3MgTGliIHtcbiIgKworCQkJIiAgICBPYmplY3QgZ2V0
T2JqZWN0KCkgeyByZXR1cm4gbmV3IE9iamVjdCgpOyB9XG4iICsKKwkJCSJ9XG4iLAorCQkJIlgu
amF2YSIsCisJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkiCSBjbGFzcyBYSW5uZXJ7fVxu
IiArICAvLyBkb24ndCB3YXJuIGZvciBpbm5lciB0eXBlcworCQkJIiAgICBPYmplY3QgZ2V0T2Jq
ZWN0KExpYiBsKSB7XG4iICsKKwkJCSIgICAgICAgIHJldHVybiBsLmdldE9iamVjdCgpO1xuIiAr
CisJCQkiICAgIH1cbiIgKworCQkJIn1cbiIKKwkJfSwKKwkJY3VzdG9tT3B0aW9ucywKKwkJIi0t
LS0tLS0tLS1cbiIgKyAKKwkJIjEuIEVSUk9SIGluIExpYi5qYXZhIChhdCBsaW5lIDEpXG4iICsg
CisJCSIJcHVibGljIGNsYXNzIExpYiB7XG4iICsgCisJCSIJICAgICAgICAgICAgIF5eXlxuIiAr
IAorCQkiQSBkZWZhdWx0IG51bGxuZXNzIGFubm90YXRpb24gaGFzIG5vdCBiZWVuIHNwZWNpZmll
ZCBmb3IgdGhlIHR5cGUgTGliXG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSItLS0tLS0t
LS0tXG4iICsgCisJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMSlcbiIgKyAKKwkJIglw
dWJsaWMgY2xhc3MgWCB7XG4iICsgCisJCSIJICAgICAgICAgICAgIF5cbiIgKyAKKwkJIkEgZGVm
YXVsdCBudWxsbmVzcyBhbm5vdGF0aW9uIGhhcyBub3QgYmVlbiBzcGVjaWZpZWQgZm9yIHRoZSB0
eXBlIFhcbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIpOworfQorCisvLyB0ZXN0IG1pc3NpbmcgZGVm
YXVsdCBudWxsbmVzcyBhbm5vdGF0aW9uIGZvciBhIHBhY2thZ2Ugd2l0aCBwYWNrYWdlLWluZm8K
K3B1YmxpYyB2b2lkIHRlc3RfbWlzc2luZ19kZWZhdWx0X2Fubm90YXRpb25fMDIoKSB7CisJTWFw
IGN1c3RvbU9wdGlvbnMgPSBnZXRDb21waWxlck9wdGlvbnMoKTsKKwljdXN0b21PcHRpb25zLnB1
dChKYXZhQ29yZS5DT01QSUxFUl9QQl9NSVNTSU5HX05PTk5VTExfQllfREVGQVVMVF9BTk5PVEFU
SU9OLCBKYXZhQ29yZS5FUlJPUik7CisJcnVuTmVnYXRpdmVUZXN0V2l0aExpYnMoCisJCW5ldyBT
dHJpbmdbXSB7CisJCQkicDIvcGFja2FnZS1pbmZvLmphdmEiLAorCQkJInBhY2thZ2UgcDI7XG4i
LAorCQkJInAyL1kuamF2YSIsCisJCQkicGFja2FnZSBwMjtcbiIgKworCQkJImltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuYW5ub3RhdGlvbi4qO1xuIiArCisJCQkiQE5vbk51bGxCeURlZmF1bHRcbiIg
KworCQkJInB1YmxpYyBjbGFzcyBZIHtcbiIgKworCQkJIiAgIHZvaWQgZm9vKCkge31cbiIgKwor
CQkJIn1cbiIsCisJCQkicDMvcGFja2FnZS1pbmZvLmphdmEiLAorCQkJIkBvcmcuZWNsaXBzZS5q
ZHQuYW5ub3RhdGlvbi5Ob25OdWxsQnlEZWZhdWx0IHBhY2thZ2UgcDM7XG4iLAorCQkJInAzL1ou
amF2YSIsCisJCQkicGFja2FnZSBwMztcbiIgKworCQkJImltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
YW5ub3RhdGlvbi4qO1xuIiArCisJCQkicHVibGljIGNsYXNzIFoge1xuIiArCisJCQkiICAgIEBO
b25OdWxsQnlEZWZhdWx0IHZvaWQgYmFyKCkge31cbiIgKworCQkJIn1cbiIsCisJCX0sCisJCWN1
c3RvbU9wdGlvbnMsCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJPUiBpbiBwMlxccGFj
a2FnZS1pbmZvLmphdmEgKGF0IGxpbmUgMSlcbiIgKyAKKwkJIglwYWNrYWdlIHAyO1xuIiArIAor
CQkiCSAgICAgICAgXl5cbiIgKyAKKwkJIkEgZGVmYXVsdCBudWxsbmVzcyBhbm5vdGF0aW9uIGhh
cyBub3QgYmVlbiBzcGVjaWZpZWQgZm9yIHRoZSBwYWNrYWdlIHAyXG4iICsgCisJCSItLS0tLS0t
LS0tXG4iICsgCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBXQVJOSU5HIGluIHAzXFxaLmph
dmEgKGF0IGxpbmUgNClcbiIgKyAKKwkJIglATm9uTnVsbEJ5RGVmYXVsdCB2b2lkIGJhcigpIHt9
XG4iICsgCisJCSIJXl5eXl5eXl5eXl5eXl5eXl5cbiIgKyAKKwkJIk51bGxuZXNzIGRlZmF1bHQg
aXMgcmVkdW5kYW50IHdpdGggYSBkZWZhdWx0IHNwZWNpZmllZCBmb3IgdGhlIGVuY2xvc2luZyBw
YWNrYWdlIHAzXG4iICsgCisJCSItLS0tLS0tLS0tXG4iKTsKK30KKworLy8gdGVzdCBtaXNzaW5n
IGRlZmF1bHQgbnVsbG5lc3MgYW5ub3RhdGlvbiBmb3IgYSBwYWNrYWdlIHdpdGhvdXQgcGFja2Fn
ZS1pbmZvCitwdWJsaWMgdm9pZCB0ZXN0X21pc3NpbmdfZGVmYXVsdF9hbm5vdGF0aW9uXzAzKCkg
eworCU1hcCBjdXN0b21PcHRpb25zID0gZ2V0Q29tcGlsZXJPcHRpb25zKCk7CisJY3VzdG9tT3B0
aW9ucy5wdXQoSmF2YUNvcmUuQ09NUElMRVJfUEJfTUlTU0lOR19OT05OVUxMX0JZX0RFRkFVTFRf
QU5OT1RBVElPTiwgSmF2YUNvcmUuRVJST1IpOworCXJ1bk5lZ2F0aXZlVGVzdFdpdGhMaWJzKAog
CQluZXcgU3RyaW5nW10gewogCQkJInAyL1kuamF2YSIsCiAJCQkicGFja2FnZSBwMjtcbiIgKwog
CQkJImltcG9ydCBvcmcuZWNsaXBzZS5qZHQuYW5ub3RhdGlvbi4qO1xuIiArCiAJCQkiQE5vbk51
bGxCeURlZmF1bHRcbiIgKwogCQkJInB1YmxpYyBjbGFzcyBZIHtcbiIgKwotCQkJIiAgICBATm9u
TnVsbEJ5RGVmYXVsdCB2b2lkIGZvbygpIHt9XG4iICsKLQkJCSJ9XG4iICsKLQkJCSJjbGFzcyBa
IHtcbiIgKworCQkJIiAgIHZvaWQgZm9vKCkge31cbiIgKworCQkJIn1cbiIsCisJCQkicDIvWi5q
YXZhIiwKKwkJCSJwYWNrYWdlIHAyO1xuIiArCisJCQkiaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5h
bm5vdGF0aW9uLio7XG4iICsKKwkJCSJwdWJsaWMgY2xhc3MgWiB7XG4iICsKIAkJCSIgICAgQE5v
bk51bGxCeURlZmF1bHQgdm9pZCBiYXIoKSB7fVxuIiArCiAJCQkifVxuIiwKLQkJCSJwMy9wYWNr
YWdlLWluZm8uamF2YSIsCi0JCQkiQG9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uLk5vbk51bGxC
eURlZmF1bHQgcGFja2FnZSBwMztcbiIKIAkJfSwKIAkJY3VzdG9tT3B0aW9ucywKIAkJIi0tLS0t
LS0tLS1cbiIgKyAKLQkJIjEuIFdBUk5JTkcgaW4gcDJcXFkuamF2YSAoYXQgbGluZSAzKVxuIiAr
Ci0JCSIJQE5vbk51bGxCeURlZmF1bHRcbiIgKwotCQkiCV5eXl5eXl5eXl5eXl5eXl5eXG4iICsK
LQkJIk51bGxuZXNzIGRlZmF1bHQgaXMgcmVkdW5kYW50IHdpdGggdGhlIGdsb2JhbCBkZWZhdWx0
XG4iICsKLQkJIi0tLS0tLS0tLS1cbiIgKwotCQkiMi4gV0FSTklORyBpbiBwMlxcWS5qYXZhIChh
dCBsaW5lIDUpXG4iICsKLQkJIglATm9uTnVsbEJ5RGVmYXVsdCB2b2lkIGZvbygpIHt9XG4iICsK
LQkJIgleXl5eXl5eXl5eXl5eXl5eXlxuIiArCi0JCSJOdWxsbmVzcyBkZWZhdWx0IGlzIHJlZHVu
ZGFudCB3aXRoIGEgZGVmYXVsdCBzcGVjaWZpZWQgZm9yIHRoZSBlbmNsb3NpbmcgdHlwZSBZXG4i
ICsKLQkJIi0tLS0tLS0tLS1cbiIgKwotCQkiMy4gV0FSTklORyBpbiBwMlxcWS5qYXZhIChhdCBs
aW5lIDgpXG4iICsKLQkJIglATm9uTnVsbEJ5RGVmYXVsdCB2b2lkIGJhcigpIHt9XG4iICsKLQkJ
IgleXl5eXl5eXl5eXl5eXl5eXlxuIiArCi0JCSJOdWxsbmVzcyBkZWZhdWx0IGlzIHJlZHVuZGFu
dCB3aXRoIHRoZSBnbG9iYWwgZGVmYXVsdFxuIiArCi0JCSItLS0tLS0tLS0tXG4iICsKLQkJIi0t
LS0tLS0tLS1cbiIgKwotCQkiMS4gV0FSTklORyBpbiBwM1xccGFja2FnZS1pbmZvLmphdmEgKGF0
IGxpbmUgMSlcbiIgKwotCQkiCUBvcmcuZWNsaXBzZS5qZHQuYW5ub3RhdGlvbi5Ob25OdWxsQnlE
ZWZhdWx0IHBhY2thZ2UgcDM7XG4iICsKLQkJIgleXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXlxuIiArCi0JCSJOdWxsbmVzcyBkZWZhdWx0IGlzIHJlZHVuZGFudCB3
aXRoIHRoZSBnbG9iYWwgZGVmYXVsdFxuIiArCisJCSIxLiBFUlJPUiBpbiBwMlxcWS5qYXZhIChh
dCBsaW5lIDEpXG4iICsgCisJCSIJcGFja2FnZSBwMjtcbiIgKyAKKwkJIgkgICAgICAgIF5eXG4i
ICsgCisJCSJBIGRlZmF1bHQgbnVsbG5lc3MgYW5ub3RhdGlvbiBoYXMgbm90IGJlZW4gc3BlY2lm
aWVkIGZvciB0aGUgcGFja2FnZSBwMlxuIiArIAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiLS0t
LS0tLS0tLVxuIiArIAorCQkiMS4gRVJST1IgaW4gcDJcXFouamF2YSAoYXQgbGluZSAxKVxuIiAr
IAorCQkiCXBhY2thZ2UgcDI7XG4iICsgCisJCSIJICAgICAgICBeXlxuIiArIAorCQkiQSBkZWZh
dWx0IG51bGxuZXNzIGFubm90YXRpb24gaGFzIG5vdCBiZWVuIHNwZWNpZmllZCBmb3IgdGhlIHBh
Y2thZ2UgcDJcbiIgKyAKIAkJIi0tLS0tLS0tLS1cbiIpOwogfQogCkBAIC0zMDkwLDggKzMxMjks
NiBAQAogLy8gYSBub25udWxsIHZhcmlhYmxlIGlzIGRlcmVmZXJlbmNlZCBpbiBhIGZpbmFsbHkg
YmxvY2sgaW5zaWRlIGEgbG9vcAogcHVibGljIHZvaWQgdGVzdF9ub25udWxsX3Zhcl9pbl9jb25z
dHJvbF9zdHJ1Y3R1cmVfMygpIHsKIAlNYXAgY3VzdG9tT3B0aW9ucyA9IGdldENvbXBpbGVyT3B0
aW9ucygpOwotLy8JY3VzdG9tT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9SZXBv
cnRQb3RlbnRpYWxOdWxsU3BlY1Zpb2xhdGlvbiwgSmF2YUNvcmUuRVJST1IpOwotCWN1c3RvbU9w
dGlvbnMucHV0KEphdmFDb3JlLkNPTVBJTEVSX05PTk5VTExfSVNfREVGQVVMVCwgSmF2YUNvcmUu
RU5BQkxFRCk7CiAJY3VzdG9tT3B0aW9ucy5wdXQoSmF2YUNvcmUuQ09NUElMRVJfUEJfUkVEVU5E
QU5UX05VTExfQU5OT1RBVElPTiwgSmF2YUNvcmUuSUdOT1JFKTsKIAlydW5OZWdhdGl2ZVRlc3RX
aXRoTGlicygKIAkJbmV3IFN0cmluZ1tdIHsKQEAgLTMyNzEsOCArMzMwOCw2IEBACiB9CiBwdWJs
aWMgdm9pZCB0ZXN0X2Fzc2lnbm1lbnRfZXhwcmVzc2lvbl8xKCkgewogCU1hcCBjdXN0b21PcHRp
b25zID0gZ2V0Q29tcGlsZXJPcHRpb25zKCk7Ci0vLwljdXN0b21PcHRpb25zLnB1dChDb21waWxl
ck9wdGlvbnMuT1BUSU9OX1JlcG9ydFBvdGVudGlhbE51bGxTcGVjVmlvbGF0aW9uLCBKYXZhQ29y
ZS5FUlJPUik7Ci0JY3VzdG9tT3B0aW9ucy5wdXQoSmF2YUNvcmUuQ09NUElMRVJfTk9OTlVMTF9J
U19ERUZBVUxULCBKYXZhQ29yZS5FTkFCTEVEKTsKIAljdXN0b21PcHRpb25zLnB1dChKYXZhQ29y
ZS5DT01QSUxFUl9QQl9SRURVTkRBTlRfTlVMTF9DSEVDSywgSmF2YUNvcmUuRVJST1IpOwogCXJ1
bkNvbmZvcm1UZXN0V2l0aExpYnMoCiAJCW5ldyBTdHJpbmdbXSB7CmRpZmYgLS1naXQgYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVz
dHMvbW9kZWwvTnVsbEFubm90YXRpb25Nb2RlbFRlc3RzLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvbW9kZWwvTnVs
bEFubm90YXRpb25Nb2RlbFRlc3RzLmphdmEKaW5kZXggODJlNTQyMi4uMGI3OTQ0YSAxMDA2NDQK
LS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pk
dC9jb3JlL3Rlc3RzL21vZGVsL051bGxBbm5vdGF0aW9uTW9kZWxUZXN0cy5qYXZhCisrKyBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90
ZXN0cy9tb2RlbC9OdWxsQW5ub3RhdGlvbk1vZGVsVGVzdHMuamF2YQpAQCAtMzAsNiArMzAsNyBA
QAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLklKYXZhTW9kZWxNYXJrZXI7CiBpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmNvcmUuSUphdmFQcm9qZWN0OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5jb3JlLkphdmFDb3JlOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLkphdmFNb2RlbEV4
Y2VwdGlvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5JUHJvYmxlbTsK
IGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQVNUOwogaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5jb3JlLmRvbS5BU1RQYXJzZXI7CkBAIC01Myw3ICs1NCw3IEBACiAJfQogCiAJc3RhdGlj
IHsKLS8vCQlURVNUU19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7ICJ0ZXN0TWlzc2luZ0Fubm90YXRp
b241IiB9OworLy8JCVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1tdIHsgInRlc3RDb252ZXJ0ZWRT
b3VyY2VUeXBlMSIgfTsKIAl9CiAKIAlwdWJsaWMgdm9pZCBzZXRVcCgpIHRocm93cyBFeGNlcHRp
b24gewpAQCAtNjcsMTggKzY4LDE3IEBACiAJCXJldHVybiBGaWxlTG9jYXRvci50b0ZpbGVVUkwo
bGliRW50cnkpLmdldFBhdGgoKTsKIAl9CiAKLQkvLyBESVNBQkxFRCBkdWUgdG8gZHlzZnVuY3Rp
b25hbCBnbG9iYWwgZGVmYXVsdCBhZnRlciBCdWcgMzY2MDYzIC0gQ29tcGlsZXIgc2hvdWxkIG5v
dCBhZGQgc3ludGhldGljIEBOb25OdWxsIGFubm90YXRpb25zCi0JcHVibGljIHZvaWQgX3Rlc3RD
b252ZXJ0ZWRTb3VyY2VUeXBlMSgpIHRocm93cyBDb3JlRXhjZXB0aW9uLCBJbnRlcnJ1cHRlZEV4
Y2VwdGlvbiB7CisJcHVibGljIHZvaWQgdGVzdENvbnZlcnRlZFNvdXJjZVR5cGUxKCkgdGhyb3dz
IENvcmVFeGNlcHRpb24sIEludGVycnVwdGVkRXhjZXB0aW9uIHsKICAgICAJdHJ5IHsKIAkJCS8v
IFJlc291cmNlcyBjcmVhdGlvbgogCQkJSUphdmFQcm9qZWN0IHAgPSBjcmVhdGVKYXZhUHJvamVj
dCgiUCIsIG5ldyBTdHJpbmdbXSB7IiJ9LCBuZXcgU3RyaW5nW10geyJKQ0wxNV9MSUIiLCB0aGlz
LkFOTk9UQVRJT05fTElCfSwgImJpbiIsICIxLjUiKTsKIAkJCXAuc2V0T3B0aW9uKEphdmFDb3Jl
LkNPTVBJTEVSX0FOTk9UQVRJT05fTlVMTF9BTkFMWVNJUywgSmF2YUNvcmUuRU5BQkxFRCk7Ci0J
CQlwLnNldE9wdGlvbihKYXZhQ29yZS5DT01QSUxFUl9OT05OVUxMX0lTX0RFRkFVTFQsIEphdmFD
b3JlLkVOQUJMRUQpOwogCiAJCQl0aGlzLmNyZWF0ZUZvbGRlcigiL1AvcDEiKTsKIAkJCVN0cmlu
ZyBjMVNvdXJjZVN0cmluZyA9CiAJCQkJInBhY2thZ2UgcDE7XG4iICsKIAkJCQkiaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uLio7XG4iICsKKwkJCQkiQG9yZy5lY2xpcHNlLmpkdC5h
bm5vdGF0aW9uLk5vbk51bGxCeURlZmF1bHRcbiIgKwogCQkJCSJwdWJsaWMgY2xhc3MgQzEge1xu
IiArCiAJCQkJIgkgcHVibGljIFN0cmluZyBmb28oQE51bGxhYmxlIE9iamVjdCBhcmcpIHtcbiIg
KyAvLyB0aGlzIGlzIGNvbnN1bWVkIHZpYSBTb3VyY2VUeXBlQ29udmVydGVyCiAJCQkJIgkJcmV0
dXJuIGFyZyA9PSBudWxsID8gXCJcIiA6IGFyZy50b1N0cmluZygpO1xuIiArCkBAIC05MSw2ICs5
MSw3IEBACiAJCQl0aGlzLmNyZWF0ZUZvbGRlcigiL1AvcDIiKTsKIAkJCVN0cmluZyBjMlNvdXJj
ZVN0cmluZyA9CiAJCQkJInBhY2thZ2UgcDI7XG4iICsKKwkJCQkiQG9yZy5lY2xpcHNlLmpkdC5h
bm5vdGF0aW9uLk5vbk51bGxCeURlZmF1bHRcbiIgKwogCQkJCSJwdWJsaWMgY2xhc3MgQzIge1xu
IiArCiAJCQkJIgkgU3RyaW5nIGJhcihwMS5DMSBjLCBDMiBjMikgeztcbiIgKwogCQkJCSIgICAg
ICAgIHJldHVybiBjLmZvbyhudWxsKTtcbiIgKyAvLyBkb24ndCBjb21wbGFpbiBkZXNwaXRlIGRl
ZmF1bHQgbm9ubnVsbCwgZm9vIGhhcyBleHBsaWNpdCBATnVsbGFibGUKQEAgLTEwOSw3ICsxMTAs
NyBAQAogCQkJZ2V0Q29tcGlsYXRpb25Vbml0KCIvUC9wMi9DMi5qYXZhIikuZ2V0V29ya2luZ0Nv
cHkodGhpcy53Y093bmVyLCBudWxsKTsKIAogCQkJYXNzZXJ0UHJvYmxlbXMoIlVuZXhwZWN0ZWQg
cHJvYmxlbXMiLCAiLS0tLS0tLS0tLVxuIiArCi0JCQkJCSIxLiBXQVJOSU5HIGluIC9QL3AyL0My
LmphdmEgKGF0IGxpbmUgNylcbiIgKworCQkJCQkiMS4gV0FSTklORyBpbiAvUC9wMi9DMi5qYXZh
IChhdCBsaW5lIDgpXG4iICsKIAkJCQkJIglyZXR1cm4gYXJnID09IG51bGwgPyBudWxsIDogYXJn
LnRvU3RyaW5nKCk7XG4iICsKIAkJCQkJIgkgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5cbiIgKwogCQkJCQkiUG90ZW50aWFsIHR5cGUgbWlzbWF0Y2g6IHJlcXVpcmVk
IFwnQE5vbk51bGwgU3RyaW5nXCcgYnV0IG51bGxuZXNzIG9mIHRoZSBwcm92aWRlZCB2YWx1ZSBp
cyB1bmtub3duXG4iICsKQEAgLTExOSwyMSArMTIwLDIwIEBACiAgICAgCX0KICAgICB9CiAKLQkv
LyBESVNBQkxFRCBkdWUgdG8gZHlzZnVuY3Rpb25hbCBnbG9iYWwgZGVmYXVsdCBhZnRlciBCdWcg
MzY2MDYzIC0gQ29tcGlsZXIgc2hvdWxkIG5vdCBhZGQgc3ludGhldGljIEBOb25OdWxsIGFubm90
YXRpb25zCi0JcHVibGljIHZvaWQgX3Rlc3RCaW5hcnlUeXBlMSgpIHRocm93cyBDb3JlRXhjZXB0
aW9uLCBJbnRlcnJ1cHRlZEV4Y2VwdGlvbiwgSU9FeGNlcHRpb24geworCXB1YmxpYyB2b2lkIHRl
c3RCaW5hcnlUeXBlMSgpIHRocm93cyBDb3JlRXhjZXB0aW9uLCBJbnRlcnJ1cHRlZEV4Y2VwdGlv
biwgSU9FeGNlcHRpb24gewogICAgIAl0cnkgewogCQkJLy8gUmVzb3VyY2VzIGNyZWF0aW9uCiAJ
CQlJSmF2YVByb2plY3QgcCA9IGNyZWF0ZUphdmFQcm9qZWN0KCJQIiwgbmV3IFN0cmluZ1tdIHsi
In0sCiAJCQkJCQkJCQkJCSAgIG5ldyBTdHJpbmdbXSB7IkpDTDE1X0xJQiIsIHRoaXMuQU5OT1RB
VElPTl9MSUIsIHRlc3RKYXJQYXRoKCJleGFtcGxlLmphciIpfSwKIAkJCQkJCQkJCQkJICAgImJp
biIsICIxLjUiKTsKIAkJCXAuc2V0T3B0aW9uKEphdmFDb3JlLkNPTVBJTEVSX0FOTk9UQVRJT05f
TlVMTF9BTkFMWVNJUywgSmF2YUNvcmUuRU5BQkxFRCk7Ci0JCQlwLnNldE9wdGlvbihKYXZhQ29y
ZS5DT01QSUxFUl9OT05OVUxMX0lTX0RFRkFVTFQsIEphdmFDb3JlLkVOQUJMRUQpOwogCiAJCQkv
LyBleGFtcGxlLmphciBjb250YWlucyBwMS9DMS5qYXZhIGp1c3QgbGlrZSB0ZXN0Q29udmVydGVk
U291cmNlVHlwZTEoKQogCiAJCQl0aGlzLmNyZWF0ZUZvbGRlcigiL1AvcDIiKTsKIAkJCVN0cmlu
ZyBjMlNvdXJjZVN0cmluZyA9CiAJCQkJInBhY2thZ2UgcDI7XG4iICsKKwkJCQkiQG9yZy5lY2xp
cHNlLmpkdC5hbm5vdGF0aW9uLk5vbk51bGxCeURlZmF1bHRcbiIgKwogCQkJCSJwdWJsaWMgY2xh
c3MgQzIge1xuIiArCiAJCQkJIgkgU3RyaW5nIGJhcihwMS5DMSBjKSB7O1xuIiArCiAJCQkJIiAg
ICAgICAgcmV0dXJuIGMuZm9vKG51bGwpO1xuIiArIC8vIGRvbid0IGNvbXBsYWluIGRlc3BpdGUg
ZGVmYXVsdCBub25udWxsLCBmb28gaGFzIGV4cGxpY2l0IEBOdWxsYWJsZQpAQCAtMTUyLDcgKzE1
Miw3IEBACiAJCQlnZXRDb21waWxhdGlvblVuaXQoIi9QL3AyL0MyLmphdmEiKS5nZXRXb3JraW5n
Q29weSh0aGlzLndjT3duZXIsIG51bGwpOwogCiAJCQlhc3NlcnRQcm9ibGVtcygiVW5leHBlY3Rl
ZCBwcm9ibGVtcyIsICItLS0tLS0tLS0tXG4iICsKLQkJCQkJIjEuIFdBUk5JTkcgaW4gL1AvcDIv
QzIuamF2YSAoYXQgbGluZSA3KVxuIiArCisJCQkJCSIxLiBXQVJOSU5HIGluIC9QL3AyL0MyLmph
dmEgKGF0IGxpbmUgOClcbiIgKwogCQkJCQkiCXJldHVybiBhcmcgPT0gbnVsbCA/IG51bGwgOiBh
cmcudG9TdHJpbmcoKTtcbiIgKwogCQkJCQkiCSAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXlxuIiArCiAJCQkJCSJQb3RlbnRpYWwgdHlwZSBtaXNtYXRjaDogcmVxdWly
ZWQgXCdATm9uTnVsbCBTdHJpbmdcJyBidXQgbnVsbG5lc3Mgb2YgdGhlIHByb3ZpZGVkIHZhbHVl
IGlzIHVua25vd25cbiIgKwpAQCAtNDg2LDQgKzQ4NiwyOCBAQAogICAgIAkJZGVsZXRlUHJvamVj
dCgiUCIpOwogICAgIAl9CiAJfQorCS8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3No
b3dfYnVnLmNnaT9pZD0zNzIwMTIKKwkvLyBubyBwcm9ibGVtIHNob3VsZCBiZSBjcmVhdGVkIGZv
ciBhIGNvbXBpbGF0aW9uIHVuaXQgaW4gYSBwYWNrYWdlIG1pc3NpbmcgcGFja2FnZS1pbmZvIHdo
ZW4gdGhlIHdhcm5pbmcgaXMgZW5hYmxlZAorCXB1YmxpYyB2b2lkIHRlc3RCdWczNzIwMTIoKSB0
aHJvd3MgSmF2YU1vZGVsRXhjZXB0aW9uLCBJT0V4Y2VwdGlvbiwgQ29yZUV4Y2VwdGlvbiwgSW50
ZXJydXB0ZWRFeGNlcHRpb24geworCQl0cnkgeworCQkJLy8gUmVzb3VyY2VzIGNyZWF0aW9uCisJ
CQlJSmF2YVByb2plY3QgcCA9IGNyZWF0ZUphdmFQcm9qZWN0KCJQIiwgbmV3IFN0cmluZ1tdIHsi
In0sIG5ldyBTdHJpbmdbXSB7IkpDTDE1X0xJQiIsIHRoaXMuQU5OT1RBVElPTl9MSUJ9LCAiYmlu
IiwgIjEuNSIpOworCQkJcC5zZXRPcHRpb24oSmF2YUNvcmUuQ09NUElMRVJfQU5OT1RBVElPTl9O
VUxMX0FOQUxZU0lTLCBKYXZhQ29yZS5FTkFCTEVEKTsKKwkJCXAuc2V0T3B0aW9uKEphdmFDb3Jl
LkNPTVBJTEVSX05PTk5VTExfQU5OT1RBVElPTl9OQU1FLCAiaW4udmFsaWQiKTsKKwkJCXAuc2V0
T3B0aW9uKEphdmFDb3JlLkNPTVBJTEVSX1BCX01JU1NJTkdfTk9OTlVMTF9CWV9ERUZBVUxUX0FO
Tk9UQVRJT04sIEphdmFDb3JlLkVSUk9SKTsKKworCQkJdGhpcy5jcmVhdGVGb2xkZXIoIi9QL3Ax
Iik7CisJCQlTdHJpbmcgYzFTb3VyY2VTdHJpbmcgPQorCQkJCSJwYWNrYWdlIHAxO1xuIiArCisJ
CQkJInB1YmxpYyBjbGFzcyBDMSB7XG4iICsKKwkJCQkiCSBwdWJsaWMgU3RyaW5nIGZvbyhPYmpl
Y3QgYXJnKSB7XG4iICsKKwkJCQkiCQlyZXR1cm4gYXJnID09IG51bGwgPyBcIlwiIDogYXJnLnRv
U3RyaW5nKCk7XG4iICsKKwkJCQkiCSB9XG4iICsKKwkJCQkifVxuIjsKKworCQkJYXNzZXJ0Tm9Q
cm9ibGVtKGMxU291cmNlU3RyaW5nLnRvQ2hhckFycmF5KCksIGdldENvbXBpbGF0aW9uVW5pdCgi
L1AvcDEvQzEuamF2YSIpKTsKKyAgICAJfSBmaW5hbGx5IHsKKyAgICAJCWRlbGV0ZVByb2plY3Qo
IlAiKTsKKyAgICAJfQorCX0KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Jh
dGNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9iYXRjaC9NYWluLmphdmEgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9iYXRjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvYmF0Y2gvTWFpbi5qYXZhCmluZGV4IDk3YTk2NTQuLjZiYjgyM2MgMTAwNjQ0Ci0tLSBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2JhdGNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9iYXRjaC9NYWluLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvYmF0Y2gvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2JhdGNoL01haW4uamF2YQpAQCAtMjQxMiw4ICsy
NDEyLDggQEAKIAkJCQkJbW9kZSA9IElOU0lERV9XQVJOSU5HU19QUk9QRVJUSUVTOwogCQkJCQlj
b250aW51ZTsKIAkJCQl9Ci0JCQkJaWYgKGN1cnJlbnRBcmcuZXF1YWxzKCItbm9uTnVsbEJ5RGVm
YXVsdCIpKSB7IC8vJE5PTi1OTFMtMSQKLQkJCQkJdGhpcy5vcHRpb25zLnB1dChDb21waWxlck9w
dGlvbnMuT1BUSU9OX05vbk51bGxJc0RlZmF1bHQsIENvbXBpbGVyT3B0aW9ucy5FTkFCTEVEKTsK
KwkJCQlpZiAoY3VycmVudEFyZy5lcXVhbHMoIi1taXNzaW5nRGVmYXVsdEFubm90IikpIHsgLy8k
Tk9OLU5MUy0xJAorCQkJCQl0aGlzLm9wdGlvbnMucHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJT05f
UmVwb3J0TWlzc2luZ05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uLCBDb21waWxlck9wdGlvbnMu
V0FSTklORyk7CiAJCQkJCWNvbnRpbnVlOwogCQkJCX0KIAkJCQlicmVhazsKZGlmZiAtLWdpdCBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2JhdGNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9iYXRjaC9tZXNzYWdlcy5wcm9wZXJ0aWVzIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvYmF0
Y2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2JhdGNoL21lc3NhZ2VzLnByb3Bl
cnRpZXMKaW5kZXggYjFjYmY4OS4uZGQzNjJkZSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvYmF0Y2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2JhdGNoL21lc3Nh
Z2VzLnByb3BlcnRpZXMKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvYmF0Y2gvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2JhdGNoL21lc3NhZ2VzLnByb3BlcnRpZXMKQEAgLTI1
NSw4ICsyNTUsNyBAQAogXCAgICAtZW5hYmxlSmF2YWRvYyAgICAgY29uc2lkZXIgcmVmZXJlbmNl
cyBpbiBqYXZhZG9jXG5cCiBcICAgIC1YZW1hY3MgICAgICAgICAgICB1c2VkIHRvIGVuYWJsZSBl
bWFjcy1zdHlsZSBvdXRwdXQgaW4gdGhlIGNvbnNvbGUuXG5cCiBcICAgICAgICAgICAgICAgICAg
ICAgICBJdCBkb2VzIG5vdCBhZmZlY3QgdGhlIHhtbCBsb2cgb3V0cHV0XG5cCi1cICAgIC1ub25O
dWxsQnlEZWZhdWx0ICBmb3IgYW5ub3RhdGlvbiBiYXNlZCBudWxsIGFuYWx5c2lzIGFzc3VtZSBu
b25udWxsXG5cCi1cICAgICAgICAgICAgICAgICAgICAgICBhcyB0aGUgZ2xvYmFsIGRlZmF1bHRc
blwKK1wgICAgLW1pc3NpbmdEZWZhdWx0QW5ub3QgIHJlcG9ydCBtaXNzaW5nIGRlZmF1bHQgbnVs
bG5lc3MgYW5ub3RhdGlvblxuXAogXCBcblwKIFwgICAgLT8gLWhlbHAgICAgICAgICAgIHByaW50
IHRoaXMgaGVscCBtZXNzYWdlXG5cCiBcICAgIC12IC12ZXJzaW9uICAgICAgICBwcmludCBjb21w
aWxlciB2ZXJzaW9uXG5cCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvY29yZS9jb21waWxlci9JUHJvYmxlbS5qYXZhIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2NvcmUvY29tcGlsZXIvSVByb2Js
ZW0uamF2YQppbmRleCA5MzdhMTkwLi5iODgzNTRkIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvY29yZS9jb21waWxlci9JUHJvYmxlbS5q
YXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9j
b3JlL2NvbXBpbGVyL0lQcm9ibGVtLmphdmEKQEAgLTE0NDQsNyArMTQ0NCw4IEBACiAJaW50IFJl
cXVpcmVkTm9uTnVsbEJ1dFByb3ZpZGVkUG90ZW50aWFsTnVsbCA9IFR5cGVSZWxhdGVkICsgOTEx
OwogCS8qKiBAc2luY2UgMy44ICovCiAJaW50IFJlcXVpcmVkTm9uTnVsbEJ1dFByb3ZpZGVkVW5r
bm93biA9IFR5cGVSZWxhdGVkICsgOTEyOwotCS8vIHJlbW92ZWQgZHVyaW5nIDMuOCBNNjogSW1w
b3J0UmVsYXRlZCArIDkxMyAKKwkvKiogQHNpbmNlIDMuOCAqLworCWludCBNaXNzaW5nTm9uTnVs
bEJ5RGVmYXVsdEFubm90YXRpb25PblBhY2thZ2UgPSBJbnRlcm5hbCArIDkxMzsgLy8gaHR0cHM6
Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM3MjAxMgogCS8qKiBAc2lu
Y2UgMy44ICovCiAJaW50IElsbGVnYWxSZXR1cm5OdWxsaXR5UmVkZWZpbml0aW9uID0gTWV0aG9k
UmVsYXRlZCArIDkxNDsKIAkvKiogQHNpbmNlIDMuOCAqLwpAQCAtMTQ3NSw2ICsxNDc2LDggQEAK
IAlpbnQgUmVkdW5kYW50TnVsbERlZmF1bHRBbm5vdGF0aW9uTWV0aG9kID0gSW50ZXJuYWwgKyA5
Mjg7CiAJLyoqIEBzaW5jZSAzLjggKi8KIAlpbnQgQ29udHJhZGljdG9yeU51bGxBbm5vdGF0aW9u
cyA9IEludGVybmFsICsgOTI5OworCS8qKiBAc2luY2UgMy44ICovCisJaW50IE1pc3NpbmdOb25O
dWxsQnlEZWZhdWx0QW5ub3RhdGlvbk9uVHlwZSA9IEludGVybmFsICsgOTMwOyAvLyBodHRwczov
L2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzcyMDEyCiAKIAkvKioKIAkg
KiBFeHRlcm5hbCBwcm9ibGVtcyAtLSBUaGVzZSBhcmUgcHJvYmxlbXMgZGVmaW5lZCBieSBvdGhl
ciBwbHVnaW5zCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvaW1wbC9Db21waWxlck9wdGlvbnMuamF2YSBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9pbXBsL0NvbXBpbGVyT3B0aW9ucy5qYXZhCmluZGV4IGM3NjQ0MWIuLjgzODMzZmIg
MTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9pbXBsL0NvbXBpbGVyT3B0aW9ucy5qYXZhCisrKyBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9pbXBsL0NvbXBpbGVyT3B0aW9ucy5qYXZhCkBAIC0yOSw3ICsyOSw2IEBACiBpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5BU1ROb2RlOwogaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5jbGFzc2ZtdC5DbGFzc0ZpbGVDb25zdGFudHM7
CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5FeHRyYUNv
bXBpbGVyTW9kaWZpZXJzOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxl
ci5sb29rdXAuVGFnQml0czsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIucHJvYmxlbS5Qcm9ibGVtU2V2ZXJpdGllczsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50
ZXJuYWwuY29tcGlsZXIudXRpbC5VdGlsOwogCkBAIC0xNTgsNyArMTU3LDcgQEAKIAlzdGF0aWMg
ZmluYWwgY2hhcltdW10gREVGQVVMVF9OVUxMQUJMRV9BTk5PVEFUSU9OX05BTUUgPSBDaGFyT3Bl
cmF0aW9uLnNwbGl0T24oJy4nLCAib3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTnVsbGFibGUi
LnRvQ2hhckFycmF5KCkpOyAvLyROT04tTkxTLTEkCiAJc3RhdGljIGZpbmFsIGNoYXJbXVtdIERF
RkFVTFRfTk9OTlVMTF9BTk5PVEFUSU9OX05BTUUgPSBDaGFyT3BlcmF0aW9uLnNwbGl0T24oJy4n
LCAib3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTm9uTnVsbCIudG9DaGFyQXJyYXkoKSk7IC8v
JE5PTi1OTFMtMSQKIAlzdGF0aWMgZmluYWwgY2hhcltdW10gREVGQVVMVF9OT05OVUxMQllERUZB
VUxUX0FOTk9UQVRJT05fTkFNRSA9IENoYXJPcGVyYXRpb24uc3BsaXRPbignLicsICJvcmcuZWNs
aXBzZS5qZHQuYW5ub3RhdGlvbi5Ob25OdWxsQnlEZWZhdWx0Ii50b0NoYXJBcnJheSgpKTsgLy8k
Tk9OLU5MUy0xJAotCXB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIE9QVElPTl9Ob25OdWxsSXNE
ZWZhdWx0ID0gIm9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLmFubm90YXRpb24ubm9ubnVs
bGlzZGVmYXVsdCI7ICAvLyROT04tTkxTLTEkCisJcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcg
T1BUSU9OX1JlcG9ydE1pc3NpbmdOb25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbiA9ICJvcmcuZWNs
aXBzZS5qZHQuY29yZS5jb21waWxlci5hbm5vdGF0aW9uLm1pc3NpbmdOb25OdWxsQnlEZWZhdWx0
QW5ub3RhdGlvbiI7ICAvLyROT04tTkxTLTEkCiAJLyoqCiAJICogUG9zc2libGUgdmFsdWVzIGZv
ciBjb25maWd1cmFibGUgb3B0aW9ucwogCSAqLwpAQCAtMjY5LDYgKzI2OCw3IEBACiAJcHVibGlj
IHN0YXRpYyBmaW5hbCBpbnQgUG90ZW50aWFsTnVsbFNwZWNWaW9sYXRpb24gPSBJcnJpdGFudFNl
dC5HUk9VUDIgfCBBU1ROb2RlLkJpdDEyOwogCXB1YmxpYyBzdGF0aWMgZmluYWwgaW50IE51bGxT
cGVjSW5zdWZmaWNpZW50SW5mbyA9IElycml0YW50U2V0LkdST1VQMiB8IEFTVE5vZGUuQml0MTM7
CiAJcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgUmVkdW5kYW50TnVsbEFubm90YXRpb24gPSBJcnJp
dGFudFNldC5HUk9VUDIgfCBBU1ROb2RlLkJpdDE0OworCXB1YmxpYyBzdGF0aWMgZmluYWwgaW50
IE1pc3NpbmdOb25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbiA9IElycml0YW50U2V0LkdST1VQMiB8
IEFTVE5vZGUuQml0MTU7CiAKIAkvLyBTZXZlcml0eSBsZXZlbCBmb3IgaGFuZGxlcnMKIAkvKiog
CkBAIC01OTgsNiArNTk4LDggQEAKIAkJCQlyZXR1cm4gT1BUSU9OX1JlcG9ydE1ldGhvZENhbkJl
U3RhdGljOwogCQkJY2FzZSBNZXRob2RDYW5CZVBvdGVudGlhbGx5U3RhdGljIDoKIAkJCQlyZXR1
cm4gT1BUSU9OX1JlcG9ydE1ldGhvZENhbkJlUG90ZW50aWFsbHlTdGF0aWM7CisJCQljYXNlIE1p
c3NpbmdOb25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbiA6CisJCQkJcmV0dXJuIE9QVElPTl9SZXBv
cnRNaXNzaW5nTm9uTnVsbEJ5RGVmYXVsdEFubm90YXRpb247CiAJCQljYXNlIFJlZHVuZGFudFNw
ZWNpZmljYXRpb25PZlR5cGVBcmd1bWVudHMgOgogCQkJCXJldHVybiBPUFRJT05fUmVwb3J0UmVk
dW5kYW50U3BlY2lmaWNhdGlvbk9mVHlwZUFyZ3VtZW50czsKIAkJCWNhc2UgVW5jbG9zZWRDbG9z
ZWFibGUgOgpAQCAtNzg0LDcgKzc4Niw3IEBACiAJCQlPUFRJT05fTm9uTnVsbEFubm90YXRpb25O
YW1lLAogCQkJT1BUSU9OX051bGxhYmxlQW5ub3RhdGlvbk5hbWUsCiAJCQlPUFRJT05fTm9uTnVs
bEJ5RGVmYXVsdEFubm90YXRpb25OYW1lLAotCQkJT1BUSU9OX05vbk51bGxJc0RlZmF1bHQsCisJ
CQlPUFRJT05fUmVwb3J0TWlzc2luZ05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uLAogCQkJT1BU
SU9OX1JlcG9ydE51bGxTcGVjVmlvbGF0aW9uLAogCQkJT1BUSU9OX1JlcG9ydFBvdGVudGlhbE51
bGxTcGVjVmlvbGF0aW9uLAogCQkJT1BUSU9OX1JlcG9ydE51bGxTcGVjSW5zdWZmaWNpZW50SW5m
bywKQEAgLTg3MSw2ICs4NzMsOCBAQAogCQkJY2FzZSBNaXNzaW5nSmF2YWRvY0NvbW1lbnRzIDoK
IAkJCWNhc2UgTWlzc2luZ0phdmFkb2NUYWdzOgogCQkJCXJldHVybiAiamF2YWRvYyI7IC8vJE5P
Ti1OTFMtMSQKKwkJCWNhc2UgTWlzc2luZ05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uOgorCQkJ
CXJldHVybiAibWlzc2luZ0RlZmF1bHRBbm5vdCI7IC8vJE5PTi1OTFMtMSQKIAkJCWNhc2UgTWlz
c2luZ1N5bmNocm9uaXplZE1vZGlmaWVySW5Jbmhlcml0ZWRNZXRob2Q6CiAJCQkJcmV0dXJuICJz
eW5jLW92ZXJyaWRlIjsJIC8vJE5PTi1OTFMtMSQKIAkJfQpAQCAtMTA4MCwxMCArMTA4NCw3IEBA
CiAJCW9wdGlvbnNNYXAucHV0KE9QVElPTl9OdWxsYWJsZUFubm90YXRpb25OYW1lLCBTdHJpbmcu
dmFsdWVPZihDaGFyT3BlcmF0aW9uLmNvbmNhdFdpdGgodGhpcy5udWxsYWJsZUFubm90YXRpb25O
YW1lLCAnLicpKSk7CiAJCW9wdGlvbnNNYXAucHV0KE9QVElPTl9Ob25OdWxsQW5ub3RhdGlvbk5h
bWUsIFN0cmluZy52YWx1ZU9mKENoYXJPcGVyYXRpb24uY29uY2F0V2l0aCh0aGlzLm5vbk51bGxB
bm5vdGF0aW9uTmFtZSwgJy4nKSkpOwogCQlvcHRpb25zTWFwLnB1dChPUFRJT05fTm9uTnVsbEJ5
RGVmYXVsdEFubm90YXRpb25OYW1lLCBTdHJpbmcudmFsdWVPZihDaGFyT3BlcmF0aW9uLmNvbmNh
dFdpdGgodGhpcy5ub25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbk5hbWUsICcuJykpKTsKLQkJaWYg
KHRoaXMuaW50ZW5kZWREZWZhdWx0Tm9uTnVsbG5lc3MgPT0gVGFnQml0cy5Bbm5vdGF0aW9uTm9u
TnVsbCkKLQkJCW9wdGlvbnNNYXAucHV0KE9QVElPTl9Ob25OdWxsSXNEZWZhdWx0LCBDb21waWxl
ck9wdGlvbnMuRU5BQkxFRCk7Ci0JCWVsc2UKLQkJCW9wdGlvbnNNYXAucHV0KE9QVElPTl9Ob25O
dWxsSXNEZWZhdWx0LCBDb21waWxlck9wdGlvbnMuRElTQUJMRUQpOworCQlvcHRpb25zTWFwLnB1
dChPUFRJT05fUmVwb3J0TWlzc2luZ05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uLCBnZXRTZXZl
cml0eVN0cmluZyhNaXNzaW5nTm9uTnVsbEJ5RGVmYXVsdEFubm90YXRpb24pKTsKIAkJcmV0dXJu
IG9wdGlvbnNNYXA7CiAJfQogCkBAIC0xNTYwLDEyICsxNTYxLDcgQEAKIAkJCWlmICgob3B0aW9u
VmFsdWUgPSBvcHRpb25zTWFwLmdldChPUFRJT05fTm9uTnVsbEJ5RGVmYXVsdEFubm90YXRpb25O
YW1lKSkgIT0gbnVsbCkgewogCQkJCXRoaXMubm9uTnVsbEJ5RGVmYXVsdEFubm90YXRpb25OYW1l
ID0gQ2hhck9wZXJhdGlvbi5zcGxpdEFuZFRyaW1PbignLicsICgoU3RyaW5nKW9wdGlvblZhbHVl
KS50b0NoYXJBcnJheSgpKTsKIAkJCX0KLQkJCWlmICgob3B0aW9uVmFsdWUgPSBvcHRpb25zTWFw
LmdldChPUFRJT05fTm9uTnVsbElzRGVmYXVsdCkpICE9IG51bGwpIHsKLQkJCQlpZiAoQ29tcGls
ZXJPcHRpb25zLkVOQUJMRUQuZXF1YWxzKG9wdGlvblZhbHVlKSkKLQkJCQkJdGhpcy5pbnRlbmRl
ZERlZmF1bHROb25OdWxsbmVzcyA9IFRhZ0JpdHMuQW5ub3RhdGlvbk5vbk51bGw7Ci0JCQkJZWxz
ZSBpZiAoQ29tcGlsZXJPcHRpb25zLkRJU0FCTEVELmVxdWFscyhvcHRpb25WYWx1ZSkpCi0JCQkJ
CXRoaXMuaW50ZW5kZWREZWZhdWx0Tm9uTnVsbG5lc3MgPSAwOwotCQkJfQorCQkJaWYgKChvcHRp
b25WYWx1ZSA9IG9wdGlvbnNNYXAuZ2V0KE9QVElPTl9SZXBvcnRNaXNzaW5nTm9uTnVsbEJ5RGVm
YXVsdEFubm90YXRpb24pKSAhPSBudWxsKSB1cGRhdGVTZXZlcml0eShNaXNzaW5nTm9uTnVsbEJ5
RGVmYXVsdEFubm90YXRpb24sIG9wdGlvblZhbHVlKTsKIAkJfQogCiAJCS8vIEphdmFkb2Mgb3B0
aW9ucwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Tb3VyY2VUeXBlQmluZGluZy5qYXZhIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2xvb2t1cC9Tb3VyY2VUeXBlQmluZGluZy5qYXZhCmluZGV4IDUzYTJiMWIuLmVhN2Y4
MmQgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU291cmNlVHlwZUJpbmRpbmcuamF2YQorKysg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvbG9va3VwL1NvdXJjZVR5cGVCaW5kaW5nLmphdmEKQEAgLTE2MzMsNiArMTYzMywy
MyBAQAogcHJpdmF0ZSB2b2lkIGV2YWx1YXRlTnVsbEFubm90YXRpb25zKGxvbmcgYW5ub3RhdGlv
blRhZ0JpdHMpIHsKIAlpZiAodGhpcy5udWxsbmVzc0RlZmF1bHRJbml0aWFsaXplZCA+IDAgfHwg
IXRoaXMuc2NvcGUuY29tcGlsZXJPcHRpb25zKCkuaXNBbm5vdGF0aW9uQmFzZWROdWxsQW5hbHlz
aXNFbmFibGVkKQogCQlyZXR1cm47CisJYm9vbGVhbiBpc1BhY2thZ2VJbmZvID0gQ2hhck9wZXJh
dGlvbi5lcXVhbHModGhpcy5zb3VyY2VOYW1lLCBUeXBlQ29uc3RhbnRzLlBBQ0tBR0VfSU5GT19O
QU1FKTsKKwlQYWNrYWdlQmluZGluZyBwa2cgPSBnZXRQYWNrYWdlKCk7CisJYm9vbGVhbiBpc0Rl
ZmF1bHQgPSAocGtnLmNvbXBvdW5kTmFtZSA9PSBDaGFyT3BlcmF0aW9uLk5PX0NIQVJfQ0hBUik7
CisJYm9vbGVhbiBpc051bGxuZXNzQW5ub3RhdGlvblBhY2thZ2UgPSAKKwkJCXBrZyA9PSB0aGlz
LnNjb3BlLmVudmlyb25tZW50KCkubm9ubnVsbEFubm90YXRpb25QYWNrYWdlCisJCQl8fCBwa2cg
PT0gdGhpcy5zY29wZS5lbnZpcm9ubWVudCgpLm51bGxhYmxlQW5ub3RhdGlvblBhY2thZ2UKKwkJ
CXx8IHBrZyA9PSB0aGlzLnNjb3BlLmVudmlyb25tZW50KCkubm9ubnVsbEJ5RGVmYXVsdEFubm90
YXRpb25QYWNrYWdlOworCWlmIChwa2cuZGVmYXVsdE51bGxuZXNzID09IE5PX05VTExfREVGQVVM
VCAmJiAhaXNEZWZhdWx0ICYmICFpc1BhY2thZ2VJbmZvICYmICFpc051bGxuZXNzQW5ub3RhdGlv
blBhY2thZ2UgJiYgISh0aGlzIGluc3RhbmNlb2YgTmVzdGVkVHlwZUJpbmRpbmcpKSB7CisJCVJl
ZmVyZW5jZUJpbmRpbmcgcGFja2FnZUluZm8gPSBwa2cuZ2V0VHlwZShUeXBlQ29uc3RhbnRzLlBB
Q0tBR0VfSU5GT19OQU1FKTsKKwkJaWYgKHBhY2thZ2VJbmZvID09IG51bGwpIHsKKwkJCS8vIG5v
IHBrZ0luZm8gLSBjb21wbGFpbgorCQkJdGhpcy5zY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5taXNz
aW5nTm9uTnVsbEJ5RGVmYXVsdEFubm90YXRpb24odGhpcy5zY29wZS5yZWZlcmVuY2VDb250ZXh0
KTsKKwkJfSBlbHNlIHsKKwkJCS8vIGlmIHBrZ0luZm8gaGFzIG5vIGRlZmF1bHQgYW5ub3QuIC0g
Y29tcGxhaW4KKwkJCXBhY2thZ2VJbmZvLmdldEFubm90YXRpb25UYWdCaXRzKCk7CisJCX0KKwl9
CiAJdGhpcy5udWxsbmVzc0RlZmF1bHRJbml0aWFsaXplZCA9IDE7CiAJLy8gdHJhbnNmZXIgbnVs
bG5lc3MgaW5mbyBmcm9tIHRhZ0JpdHMgdG8gdGhpcy5udWxsbmVzc0RlZmF1bHRBbm5vdGF0aW9u
CiAJaW50IG5ld0RlZmF1bHROdWxsbmVzcyA9IE5PX05VTExfREVGQVVMVDsKQEAgLTE2NDEsMTQg
KzE2NTgsMTggQEAKIAllbHNlIGlmICgoYW5ub3RhdGlvblRhZ0JpdHMgJiBUYWdCaXRzLkFubm90
YXRpb25Ob25OdWxsQnlEZWZhdWx0KSAhPSAwKQogCQluZXdEZWZhdWx0TnVsbG5lc3MgPSBOT05O
VUxMX0JZX0RFRkFVTFQ7CiAJaWYgKG5ld0RlZmF1bHROdWxsbmVzcyAhPSBOT19OVUxMX0RFRkFV
TFQpIHsKLQkJaWYgKENoYXJPcGVyYXRpb24uZXF1YWxzKHRoaXMuc291cmNlTmFtZSwgVHlwZUNv
bnN0YW50cy5QQUNLQUdFX0lORk9fTkFNRSkpIHsKLQkJCWdldFBhY2thZ2UoKS5kZWZhdWx0TnVs
bG5lc3MgPSBuZXdEZWZhdWx0TnVsbG5lc3M7CisJCWlmIChpc1BhY2thZ2VJbmZvKSB7CisJCQlw
a2cuZGVmYXVsdE51bGxuZXNzID0gbmV3RGVmYXVsdE51bGxuZXNzOwogCQl9IGVsc2UgewogCQkJ
dGhpcy5kZWZhdWx0TnVsbG5lc3MgPSBuZXdEZWZhdWx0TnVsbG5lc3M7CiAJCQlUeXBlRGVjbGFy
YXRpb24gdHlwZURlY2wgPSB0aGlzLnNjb3BlLnJlZmVyZW5jZUNvbnRleHQ7CiAJCQlsb25nIG51
bGxEZWZhdWx0Qml0cyA9IGFubm90YXRpb25UYWdCaXRzICYgKFRhZ0JpdHMuQW5ub3RhdGlvbk51
bGxVbnNwZWNpZmllZEJ5RGVmYXVsdHxUYWdCaXRzLkFubm90YXRpb25Ob25OdWxsQnlEZWZhdWx0
KTsKIAkJCWNoZWNrUmVkdW5kYW50TnVsbG5lc3NEZWZhdWx0UmVjdXJzZSh0eXBlRGVjbCwgdHlw
ZURlY2wuYW5ub3RhdGlvbnMsIG51bGxEZWZhdWx0Qml0cyk7CiAJCX0KKwl9IGVsc2UgaWYgKGlz
UGFja2FnZUluZm8gfHwgKGlzRGVmYXVsdCAmJiAhKHRoaXMgaW5zdGFuY2VvZiBOZXN0ZWRUeXBl
QmluZGluZykpKSB7CisJCXRoaXMuc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkubWlzc2luZ05vbk51
bGxCeURlZmF1bHRBbm5vdGF0aW9uKHRoaXMuc2NvcGUucmVmZXJlbmNlQ29udGV4dCk7CisJCWlm
ICghaXNEZWZhdWx0KQorCQkJcGtnLmRlZmF1bHROdWxsbmVzcyA9IE5VTExfVU5TUEVDSUZJRURf
QllfREVGQVVMVDsKIAl9CiB9CiAKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL1Byb2JsZW1I
YW5kbGVyLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9Qcm9ibGVtSGFuZGxlci5qYXZhCmluZGV4IDkz
NDE4NjMuLjQ2OWY4MGEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL1Byb2JsZW1IYW5kbGVy
LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxlbUhhbmRsZXIuamF2YQpAQCAtMTAsNiAr
MTAsMTAgQEAKICAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwogcGFja2FnZSBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIucHJvYmxlbTsKIAoraW1wb3J0IG9yZy5lY2xpcHNlLmNvcmUu
cmVzb3VyY2VzLklNYXJrZXI7CitpbXBvcnQgb3JnLmVjbGlwc2UuY29yZS5yZXNvdXJjZXMuSVJl
c291cmNlOworaW1wb3J0IG9yZy5lY2xpcHNlLmNvcmUucnVudGltZS5Db3JlRXhjZXB0aW9uOwor
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLklKYXZhTW9kZWxNYXJrZXI7CiBpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuQ2F0ZWdvcml6ZWRQcm9ibGVtOwogaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLkNoYXJPcGVyYXRpb247CiBpbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmNvcmUuY29tcGlsZXIuSVByb2JsZW07CkBAIC0yMSw2ICsyNSw4IEBACiBpbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmltcGwuQ29tcGlsZXJPcHRpb25z
OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5pbXBsLlJlZmVyZW5j
ZUNvbnRleHQ7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLnV0aWwu
VXRpbDsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS5KYXZhTW9kZWxNYW5h
Z2VyOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLlBhY2thZ2VGcmFnbWVu
dDsKIAogLyoKICAqIENvbXBpbGVyIGVycm9yIGhhbmRsZXIsIHJlc3BvbnNpYmxlIHRvIGRldGVy
bWluZSB3aGV0aGVyCkBAIC0xMzcsNyArMTQzLDcgQEAKIAkJCXJldHVybjsgLy8gaWdub3JlIG5v
biByZXBvcnRhYmxlIHdhcm5pbmcKIAkJfQogCX0KLQorCQogCWludFtdIGxpbmVFbmRzOwogCWlu
dCBsaW5lTnVtYmVyID0gcHJvYmxlbVN0YXJ0UG9zaXRpb24gPj0gMAogCQkJPyBVdGlsLmdldExp
bmVOdW1iZXIocHJvYmxlbVN0YXJ0UG9zaXRpb24sIGxpbmVFbmRzID0gdW5pdFJlc3VsdC5nZXRM
aW5lU2VwYXJhdG9yUG9zaXRpb25zKCksIDAsIGxpbmVFbmRzLmxlbmd0aC0xKQpAQCAtMTU5LDcg
KzE2NSwyNyBAQAogCQkJY29sdW1uTnVtYmVyKTsKIAogCWlmIChwcm9ibGVtID09IG51bGwpIHJl
dHVybjsgLy8gcHJvYmxlbSBjb3VsZG4ndCBiZSBjcmVhdGVkLCBpZ25vcmUKLQorCWlmIChwcm9i
bGVtSWQgPT0gSVByb2JsZW0uTWlzc2luZ05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uT25QYWNr
YWdlICYmIHByb2JsZW1FbmRQb3NpdGlvbiA8IDAgJiYgcHJvYmxlbVN0YXJ0UG9zaXRpb24gPCAw
KSB7CisJCWludCBwa2dFbmQgPSBDaGFyT3BlcmF0aW9uLmxhc3RJbmRleE9mKCcvJywgdW5pdFJl
c3VsdC5nZXRGaWxlTmFtZSgpKTsKKwkJUGFja2FnZUZyYWdtZW50IHBrZyA9IChQYWNrYWdlRnJh
Z21lbnQpIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLnV0aWwuVXRpbC5nZXRQYWNrYWdl
RnJhZ21lbnQodW5pdFJlc3VsdC5nZXRGaWxlTmFtZSgpLCBwa2dFbmQsIC0xIC8qbm8gamFyIHNl
cGFyYXRvciBmb3IgamF2YSBmaWxlcyovKTsKKwkJSU1hcmtlcltdIGV4aXN0aW5nTWFya2VyOwor
CQl0cnkgeworCQkJZXhpc3RpbmdNYXJrZXIgPSBwa2cucmVzb3VyY2UoKS5maW5kTWFya2VycyhJ
SmF2YU1vZGVsTWFya2VyLkpBVkFfTU9ERUxfUFJPQkxFTV9NQVJLRVIsIGZhbHNlLCBJUmVzb3Vy
Y2UuREVQVEhfWkVSTyk7CisJCQlpbnQgbGVuID0gZXhpc3RpbmdNYXJrZXIubGVuZ3RoOworCQkJ
Zm9yIChpbnQgaj0wOyBqIDwgbGVuOyBqKyspIHsKKwkJCQlpZiAoKChJbnRlZ2VyKWV4aXN0aW5n
TWFya2VyW2pdLmdldEF0dHJpYnV0ZShJSmF2YU1vZGVsTWFya2VyLklEKSkuaW50VmFsdWUoKSA9
PSBJUHJvYmxlbS5NaXNzaW5nTm9uTnVsbEJ5RGVmYXVsdEFubm90YXRpb25PblBhY2thZ2UpIHsK
KwkJCQkJcmV0dXJuOyAvLyBtYXJrZXIgYWxyZWFkeSBwcmVzZW50CisJCQkJfQorCQkJfQorCQl9
IGNhdGNoIChDb3JlRXhjZXB0aW9uIGUpIHsKKwkJCS8vIG1hcmtlciByZXRyaWV2YWwgZmFpbGVk
LCBjYW5ub3QgZG8gbXVjaAorCQkJaWYgKEphdmFNb2RlbE1hbmFnZXIuVkVSQk9TRSkgeworCQkJ
CWUucHJpbnRTdGFja1RyYWNlKCk7CisJCQl9CisJCX0KKwkJcGtnLmNyZWF0ZVBhY2thZ2VQcm9i
bGVtTWFya2VyKHByb2JsZW0pOworCQlyZXR1cm47CisJfQogCXN3aXRjaCAoc2V2ZXJpdHkgJiBQ
cm9ibGVtU2V2ZXJpdGllcy5FcnJvcikgewogCQljYXNlIFByb2JsZW1TZXZlcml0aWVzLkVycm9y
IDoKIAkJCXJlY29yZChwcm9ibGVtLCB1bml0UmVzdWx0LCByZWZlcmVuY2VDb250ZXh0KTsKZGlm
ZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9wcm9ibGVtL1Byb2JsZW1SZXBvcnRlci5qYXZhIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3By
b2JsZW0vUHJvYmxlbVJlcG9ydGVyLmphdmEKaW5kZXggMzc5ZjIzMi4uOTk3Njc2NiAxMDA2NDQK
LS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxlbVJlcG9ydGVyLmphdmEKKysrIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3By
b2JsZW0vUHJvYmxlbVJlcG9ydGVyLmphdmEKQEAgLTQ2OSw2ICs0NjksMTAgQEAKIAkJCQkKIAkJ
Y2FzZSBJUHJvYmxlbS5SZWR1bmRhbnRTcGVjaWZpY2F0aW9uT2ZUeXBlQXJndW1lbnRzOgogCQkJ
cmV0dXJuIENvbXBpbGVyT3B0aW9ucy5SZWR1bmRhbnRTcGVjaWZpY2F0aW9uT2ZUeXBlQXJndW1l
bnRzOworCQkJCisJCWNhc2UgSVByb2JsZW0uTWlzc2luZ05vbk51bGxCeURlZmF1bHRBbm5vdGF0
aW9uT25QYWNrYWdlOgorCQljYXNlIElQcm9ibGVtLk1pc3NpbmdOb25OdWxsQnlEZWZhdWx0QW5u
b3RhdGlvbk9uVHlwZToKKwkJCXJldHVybiBDb21waWxlck9wdGlvbnMuTWlzc2luZ05vbk51bGxC
eURlZmF1bHRBbm5vdGF0aW9uOwogCX0KIAlyZXR1cm4gMDsKIH0KQEAgLTU3NCw2ICs1NzgsNyBA
QAogCQkJY2FzZSBDb21waWxlck9wdGlvbnMuTnVsbFNwZWNWaW9sYXRpb24gOgogCQkJY2FzZSBD
b21waWxlck9wdGlvbnMuUG90ZW50aWFsTnVsbFNwZWNWaW9sYXRpb24gOgogCQkJY2FzZSBDb21w
aWxlck9wdGlvbnMuTnVsbFNwZWNJbnN1ZmZpY2llbnRJbmZvIDoKKwkJCWNhc2UgQ29tcGlsZXJP
cHRpb25zLk1pc3NpbmdOb25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbjoKIAkJCQlyZXR1cm4gQ2F0
ZWdvcml6ZWRQcm9ibGVtLkNBVF9QT1RFTlRJQUxfUFJPR1JBTU1JTkdfUFJPQkxFTTsKIAkJCWNh
c2UgQ29tcGlsZXJPcHRpb25zLlJlZHVuZGFudE51bGxBbm5vdGF0aW9uIDoKIAkJCQlyZXR1cm4g
Q2F0ZWdvcml6ZWRQcm9ibGVtLkNBVF9VTk5FQ0VTU0FSWV9DT0RFOwpAQCAtODE4MCw5ICs4MTg1
LDcgQEAKIAkJYXJndW1lbnQudHlwZS5zb3VyY2VTdGFydCwKIAkJYXJndW1lbnQudHlwZS5zb3Vy
Y2VFbmQpOwogfQotcHVibGljIHZvaWQgaWxsZWdhbFJldHVyblJlZGVmaW5pdGlvbihBYnN0cmFj
dE1ldGhvZERlY2xhcmF0aW9uIGFic3RyYWN0TWV0aG9kRGVjbCwKLQkJCQkJCQkJCSAgTWV0aG9k
QmluZGluZyBpbmhlcml0ZWRNZXRob2QsIGNoYXJbXVtdIG5vbk51bGxBbm5vdGF0aW9uTmFtZSkK
LXsKK3B1YmxpYyB2b2lkIGlsbGVnYWxSZXR1cm5SZWRlZmluaXRpb24oQWJzdHJhY3RNZXRob2RE
ZWNsYXJhdGlvbiBhYnN0cmFjdE1ldGhvZERlY2wsIE1ldGhvZEJpbmRpbmcgaW5oZXJpdGVkTWV0
aG9kLCBjaGFyW11bXSBub25OdWxsQW5ub3RhdGlvbk5hbWUpIHsKIAlNZXRob2REZWNsYXJhdGlv
biBtZXRob2REZWNsID0gKE1ldGhvZERlY2xhcmF0aW9uKSBhYnN0cmFjdE1ldGhvZERlY2w7CiAJ
U3RyaW5nQnVmZmVyIG1ldGhvZFNpZ25hdHVyZSA9IG5ldyBTdHJpbmdCdWZmZXIoKTsKIAltZXRo
b2RTaWduYXR1cmUKQEAgLTgzMjgsNCArODMzMSw0MCBAQAogCX0KIAlyZXR1cm4gbnVsbDsKIH0K
Ky8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNzIwMTIK
K3B1YmxpYyB2b2lkIG1pc3NpbmdOb25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbihUeXBlRGVjbGFy
YXRpb24gdHlwZSkgeworCWludCBzZXZlcml0eTsKKwlDb21waWxhdGlvblVuaXREZWNsYXJhdGlv
biBjb21wVW5pdERlY2wgPSB0eXBlLmdldENvbXBpbGF0aW9uVW5pdERlY2xhcmF0aW9uKCk7CisJ
U3RyaW5nW10gYXJndW1lbnRzOworCWlmIChjb21wVW5pdERlY2wuY3VycmVudFBhY2thZ2UgPT0g
bnVsbCkgeworCQlzZXZlcml0eSA9IGNvbXB1dGVTZXZlcml0eShJUHJvYmxlbS5NaXNzaW5nTm9u
TnVsbEJ5RGVmYXVsdEFubm90YXRpb25PblR5cGUpOworCQlpZiAoc2V2ZXJpdHkgPT0gUHJvYmxl
bVNldmVyaXRpZXMuSWdub3JlKSByZXR1cm47CisJCS8vIERlZmF1bHQgcGFja2FnZQorCQlUeXBl
QmluZGluZyBiaW5kaW5nID0gdHlwZS5iaW5kaW5nOworCQl0aGlzLmhhbmRsZSgKKwkJCQlJUHJv
YmxlbS5NaXNzaW5nTm9uTnVsbEJ5RGVmYXVsdEFubm90YXRpb25PblR5cGUsCisJCQkJbmV3IFN0
cmluZ1tdIHtuZXcgU3RyaW5nKGJpbmRpbmcucmVhZGFibGVOYW1lKCkpLCB9LAorCQkJCW5ldyBT
dHJpbmdbXSB7bmV3IFN0cmluZyhiaW5kaW5nLnNob3J0UmVhZGFibGVOYW1lKCkpLH0sCisJCQkJ
c2V2ZXJpdHksCisJCQkJdHlwZS5zb3VyY2VTdGFydCwKKwkJCQl0eXBlLnNvdXJjZUVuZCk7CisJ
fSBlbHNlIHsKKwkJc2V2ZXJpdHkgPSBjb21wdXRlU2V2ZXJpdHkoSVByb2JsZW0uTWlzc2luZ05v
bk51bGxCeURlZmF1bHRBbm5vdGF0aW9uT25QYWNrYWdlKTsKKwkJaWYgKHNldmVyaXR5ID09IFBy
b2JsZW1TZXZlcml0aWVzLklnbm9yZSkgcmV0dXJuOworCQlpbnQgc291cmNlU3RhcnQgPSAtMTsK
KwkJaW50IHNvdXJjZUVuZCA9IC0xOworCQlpZiAoQ2hhck9wZXJhdGlvbi5lcXVhbHModHlwZS5u
YW1lLCBUeXBlQ29uc3RhbnRzLlBBQ0tBR0VfSU5GT19OQU1FKSkgeworCQkJc291cmNlU3RhcnQg
PSBjb21wVW5pdERlY2wuY3VycmVudFBhY2thZ2Uuc291cmNlU3RhcnQ7CisJCQlzb3VyY2VFbmQg
PSBjb21wVW5pdERlY2wuY3VycmVudFBhY2thZ2Uuc291cmNlRW5kOworCQl9CisJCWFyZ3VtZW50
cyA9IG5ldyBTdHJpbmdbXSB7Q2hhck9wZXJhdGlvbi50b1N0cmluZyhjb21wVW5pdERlY2wuY3Vy
cmVudFBhY2thZ2UudG9rZW5zKX07CisJCXRoaXMuaGFuZGxlKAorCQkJSVByb2JsZW0uTWlzc2lu
Z05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uT25QYWNrYWdlLAorCQkJYXJndW1lbnRzLAorCQkJ
YXJndW1lbnRzLAorCQkJc2V2ZXJpdHksCisJCQlzb3VyY2VTdGFydCwKKwkJCXNvdXJjZUVuZCk7
CisJfQorfQogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vbWVzc2FnZXMucHJvcGVydGll
cyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9wcm9ibGVtL21lc3NhZ2VzLnByb3BlcnRpZXMKaW5kZXggZGY3MGVkZS4uZDZm
MDRiZCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vbWVzc2FnZXMucHJvcGVydGllcworKysg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvcHJvYmxlbS9tZXNzYWdlcy5wcm9wZXJ0aWVzCkBAIC02NjMsNyArNjYzLDcgQEAK
IDkxMCA9IFR5cGUgbWlzbWF0Y2g6IHJlcXVpcmVkICcnQHswfSB7MX0nJyBidXQgdGhlIHByb3Zp
ZGVkIHZhbHVlIGlzIG51bGwKIDkxMSA9IFR5cGUgbWlzbWF0Y2g6IHJlcXVpcmVkICcnQHswfSB7
MX0nJyBidXQgdGhlIHByb3ZpZGVkIHZhbHVlIGNhbiBiZSBudWxsCiA5MTIgPSBQb3RlbnRpYWwg
dHlwZSBtaXNtYXRjaDogcmVxdWlyZWQgJydAezB9IHsxfScnIGJ1dCBudWxsbmVzcyBvZiB0aGUg
cHJvdmlkZWQgdmFsdWUgaXMgdW5rbm93bgotIzkxMyByZW1vdmVkCis5MTMgPSBBIGRlZmF1bHQg
bnVsbG5lc3MgYW5ub3RhdGlvbiBoYXMgbm90IGJlZW4gc3BlY2lmaWVkIGZvciB0aGUgcGFja2Fn
ZSB7MH0KIDkxNCA9IFRoZSByZXR1cm4gdHlwZSBpcyBpbmNvbXBhdGlibGUgd2l0aCB0aGUgQHsx
fSByZXR1cm4gZnJvbSB7MH0KIDkxNSA9IElsbGVnYWwgcmVkZWZpbml0aW9uIG9mIHBhcmFtZXRl
ciB7MH0sIGluaGVyaXRlZCBtZXRob2QgZnJvbSB7MX0gZGVjbGFyZXMgdGhpcyBwYXJhbWV0ZXIg
YXMgQHsyfQogOTE2ID0gSWxsZWdhbCByZWRlZmluaXRpb24gb2YgcGFyYW1ldGVyIHswfSwgaW5o
ZXJpdGVkIG1ldGhvZCBmcm9tIHsxfSBkb2VzIG5vdCBjb25zdHJhaW4gdGhpcyBwYXJhbWV0ZXIK
QEAgLTY3OSw2ICs2NzksNyBAQAogOTI3ID0gTnVsbG5lc3MgZGVmYXVsdCBpcyByZWR1bmRhbnQg
d2l0aCBhIGRlZmF1bHQgc3BlY2lmaWVkIGZvciB0aGUgZW5jbG9zaW5nIHR5cGUgezB9CiA5Mjgg
PSBOdWxsbmVzcyBkZWZhdWx0IGlzIHJlZHVuZGFudCB3aXRoIGEgZGVmYXVsdCBzcGVjaWZpZWQg
Zm9yIHRoZSBlbmNsb3NpbmcgbWV0aG9kIHswfQogOTI5ID0gQ29udHJhZGljdG9yeSBudWxsIHNw
ZWNpZmljYXRpb247IG9ubHkgb25lIG9mIEB7MH0gYW5kIEB7MX0gY2FuIGJlIHNwZWNpZmllZCBh
dCBhbnkgbG9jYXRpb24KKzkzMCA9IEEgZGVmYXVsdCBudWxsbmVzcyBhbm5vdGF0aW9uIGhhcyBu
b3QgYmVlbiBzcGVjaWZpZWQgZm9yIHRoZSB0eXBlIHswfQogCiAjIyMgRUxBQk9SQVRJT05TCiAj
IyBBY2Nlc3MgcmVzdHJpY3Rpb25zCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9t
b2RlbC9vcmcvZWNsaXBzZS9qZHQvY29yZS9KYXZhQ29yZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2NvcmUvSmF2YUNvcmUuamF2YQppbmRleCAxODg4
NzQ3Li4wN2U1NGMxIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcv
ZWNsaXBzZS9qZHQvY29yZS9KYXZhQ29yZS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L21vZGVsL29yZy9lY2xpcHNlL2pkdC9jb3JlL0phdmFDb3JlLmphdmEKQEAgLTE0OTMsOSArMTQ5
Myw3IEBACiAJICogICAgd2l0aGluIHRoZSBhbm5vdGF0ZWQgZWxlbWVudCB3aWxsIGJlIHRyZWF0
ZWQgYXMgaWYgdGhleSB3ZXJlIHNwZWNpZmllZCB3aXRoIHRoZSBub24tbnVsbCBhbm5vdGF0aW9u
CiAJICogICAgKHNlZSB7QGxpbmsgI0NPTVBJTEVSX05PTk5VTExfQU5OT1RBVElPTl9OQU1FfSku
PC9wPgogCSAqIDxwPklmIHRoZSBhbm5vdGF0aW9uIGlzIGFwcGxpZWQgd2l0aCB0aGUgY29uc3Rh
bnQgPGNvZGU+ZmFsc2U8L2NvZGU+IGFzIGl0cyBhcmd1bWVudAotCSAqICAgIGFsbCBjb3JyZXNw
b25kaW5nIGRlZmF1bHRzIGF0IG91dGVyIHNjb3BlcyB3aWxsIGJlIGNhbmNlbGVkIGZvciB0aGUg
YW5ub3RhdGVkIGVsZW1lbnQuCi0JICogICAgVGhpcyBpbmNsdWRlcyBkZWZhdWx0cyBzcGVjaWZp
ZWQgdXNpbmcgdGhpcyBhbm5vdGF0aW9uIHR5cGUgb3IgYSBkZWZhdWx0IGRlZmluZWQgdXNpbmcK
LQkgKiAgICB0aGUgY29tcGlsZXIgb3B0aW9uIHtAbGluayAjQ09NUElMRVJfTk9OTlVMTF9JU19E
RUZBVUxUfS48L3A+CisJICogICAgYWxsIGNvcnJlc3BvbmRpbmcgZGVmYXVsdHMgYXQgb3V0ZXIg
c2NvcGVzIHdpbGwgYmUgY2FuY2VsZWQgZm9yIHRoZSBhbm5vdGF0ZWQgZWxlbWVudC48L3A+CiAJ
ICogPHA+VGhpcyBvcHRpb24gb25seSBoYXMgYW4gZWZmZWN0IGlmIHRoZSBvcHRpb24ge0BsaW5r
ICNDT01QSUxFUl9BTk5PVEFUSU9OX05VTExfQU5BTFlTSVN9IGlzIGVuYWJsZWQuPC9wPgogCSAq
IDxkbD4KIAkgKiA8ZHQ+T3B0aW9uIGlkOjwvZHQ+PGRkPjxjb2RlPiJvcmcuZWNsaXBzZS5qZHQu
Y29yZS5jb21waWxlci5hbm5vdGF0aW9uLm5vbm51bGxieWRlZmF1bHQiPC9jb2RlPjwvZGQ+CkBA
IC0xNTA4LDE5ICsxNTA2LDIyIEBACiAJICovCiAJcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcg
Q09NUElMRVJfTk9OTlVMTF9CWV9ERUZBVUxUX0FOTk9UQVRJT05fTkFNRSA9IFBMVUdJTl9JRCAr
ICIuY29tcGlsZXIuYW5ub3RhdGlvbi5ub25udWxsYnlkZWZhdWx0IjsgLy8kTk9OLU5MUy0xJAog
CS8qKgotCSAqIENvbXBpbGVyIG9wdGlvbiBJRDogR2xvYmFsbHkgc3BlY2lmeSBub24tbnVsbCBh
cyB0aGUgYXNzdW1lZCBkZWZhdWx0IGZvciB1bmFubm90YXRlZCB0eXBlcy4KLQkgKiA8cD5XaGVu
IGVuYWJsZWQsIHRoaXMgb3B0aW9uIGdsb2JhbGx5IGFjaGlldmVzIHRoZSBzYW1lIGVmZmVjdCAK
LQkgKiAgICBhcyBzcGVjaWZ5aW5nIHtAbGluayAjQ09NUElMRVJfTk9OTlVMTF9BTk5PVEFUSU9O
X05BTUV9IGRvZXMgZm9yIGluZGl2aWR1YWwgZWxlbWVudHMuPC9wPgorCSAqIENvbXBpbGVyIG9w
dGlvbiBJRDogUmVwb3J0aW5nIG1pc3NpbmcgZGVmYXVsdCBudWxsbmVzcyBhbm5vdGF0aW9uLgor
CSAqIDxwPldoZW4gZW5hYmxlZCwgdGhlIGNvbXBpbGVyIHdpbGwgaXNzdWUgYW4gZXJyb3Igb3Ig
YSB3YXJuaW5nIGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6PC9wPgorCSAqIDx1bD4KKwkgKiA8bGk+
IFdoZW4gYSBwYWNrYWdlLWluZm8uamF2YSBkb2VzIG5vdCBjb250YWluIGEgZGVmYXVsdCBudWxs
bmVzcyBhbm5vdGF0aW9uLjwvbGk+CisJICogPGxpPiBXaGVuIGEgdHlwZSBpbnNpZGUgYSBkZWZh
dWx0IHBhY2thZ2UgZG9lcyBub3QgY29udGFpbiBhIGRlZmF1bHQgbnVsbG5lc3MgYW5ub3RhdGlv
bi48L2xpPgorCSAqIDwvdWw+CiAJICogPHA+VGhpcyBvcHRpb24gb25seSBoYXMgYW4gZWZmZWN0
IGlmIHRoZSBvcHRpb24ge0BsaW5rICNDT01QSUxFUl9BTk5PVEFUSU9OX05VTExfQU5BTFlTSVN9
IGlzIGVuYWJsZWQuPC9wPgogCSAqIDxkbD4KLQkgKiA8ZHQ+T3B0aW9uIGlkOjwvZHQ+PGRkPjxj
b2RlPiJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5hbm5vdGF0aW9uLm5vbm51bGxpc2Rl
ZmF1bHQiPC9jb2RlPjwvZGQ+Ci0JICogPGR0PlBvc3NpYmxlIHZhbHVlczo8L2R0PjxkZD48Y29k
ZT57ICJkaXNhYmxlZCIsICJlbmFibGVkIiB9PC9jb2RlPi48L2RkPgotCSAqIDxkdD5EZWZhdWx0
OjwvZHQ+PGRkPjxjb2RlPiJkaXNhYmxlZCI8L2NvZGU+PC9kZD4KKwkgKiA8ZHQ+T3B0aW9uIGlk
OjwvZHQ+PGRkPjxjb2RlPiJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5hbm5vdGF0aW9u
Lm1pc3NpbmdOb25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbiI8L2NvZGU+PC9kZD4KKwkgKiA8ZHQ+
UG9zc2libGUgdmFsdWVzOjwvZHQ+PGRkPjxjb2RlPnsgImVycm9yIiwgIndhcm5pbmciLCAiaWdu
b3JlIiB9PC9jb2RlPi48L2RkPgorCSAqIDxkdD5EZWZhdWx0OjwvZHQ+PGRkPjxjb2RlPiJpZ25v
cmUiPC9jb2RlPjwvZGQ+CiAJICogPC9kbD4KIAkgKiBAc2luY2UgMy44CiAJICogQGNhdGVnb3J5
IENvbXBpbGVyT3B0aW9uSUQKIAkgKi8KLQlwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBDT01Q
SUxFUl9OT05OVUxMX0lTX0RFRkFVTFQgPSBQTFVHSU5fSUQgKyAiLmNvbXBpbGVyLmFubm90YXRp
b24ubm9ubnVsbGlzZGVmYXVsdCI7IC8vJE5PTi1OTFMtMSQKKwlwdWJsaWMgc3RhdGljIGZpbmFs
IFN0cmluZyBDT01QSUxFUl9QQl9NSVNTSU5HX05PTk5VTExfQllfREVGQVVMVF9BTk5PVEFUSU9O
ID0gUExVR0lOX0lEICsgIi5jb21waWxlci5hbm5vdGF0aW9uLm1pc3NpbmdOb25OdWxsQnlEZWZh
dWx0QW5ub3RhdGlvbiI7IC8vJE5PTi1OTFMtMSQKIAkvKioKIAkgKiBDb21waWxlciBvcHRpb24g
SUQ6IFJlcG9ydGluZyBWaW9sYXRpb25zIG9mIE51bGwgU3BlY2lmaWNhdGlvbnMuCiAJICogPHA+
RGVwZW5kaW5nIG9uIHRoaXMgb3B0aW9uLCB0aGUgY29tcGlsZXIgd2lsbCBpc3N1ZSBlaXRoZXIg
YW4gZXJyb3Igb3IgYSB3YXJuaW5nCkBAIC0xNjIyLDggKzE2MjMsNyBAQAogCSAqIDxwPldoZW4g
ZW5hYmxlZCwgdGhlIGNvbXBpbGVyIHdpbGwgaXNzdWUgYW4gZXJyb3Igb3IgYSB3YXJuaW5nIHdo
ZW4gYSBub24tbnVsbCBhbm5vdGF0aW9uCiAJICogICAgKHNlZSB7QGxpbmsgI0NPTVBJTEVSX05P
Tk5VTExfQU5OT1RBVElPTl9OQU1FfSkKIAkgKiAgICBpcyBhcHBsaWVkIGFsdGhvdWdoIHRoZSBz
YW1lIGVmZmVjdCBpcyBhbHJlYWR5IGFjaGlldmVkIGJ5IGEgZGVmYXVsdCBhcHBsaWNhYmxlIGF0
IHRoZQotCSAqICAgIGN1cnJlbnQgbG9jYXRpb24uIFN1Y2ggYSBkZWZhdWx0IG1heSBiZSBzZXQg
YnkgZW5hYmxpbmcgdGhlIG9wdGlvbgotCSAqICAgIHtAbGluayAjQ09NUElMRVJfTk9OTlVMTF9J
U19ERUZBVUxUfSBvciBieSB1c2luZyB0aGUgYW5ub3RhdGlvbiBzcGVjaWZpZWQgYnkgdGhlIG9w
dGlvbgorCSAqICAgIGN1cnJlbnQgbG9jYXRpb24uIFN1Y2ggYSBkZWZhdWx0IG1heSBiZSBzZXQg
YnkgdXNpbmcgdGhlIGFubm90YXRpb24gc3BlY2lmaWVkIGJ5IHRoZSBvcHRpb24KIAkgKiAgICB7
QGxpbmsgI0NPTVBJTEVSX05PTk5VTExfQllfREVGQVVMVF9BTk5PVEFUSU9OX05BTUV9LgogCSAq
IDwvcD4KIAkgKiA8cD5UaGlzIG9wdGlvbiBvbmx5IGhhcyBhbiBlZmZlY3QgaWYgdGhlIG9wdGlv
biB7QGxpbmsgI0NPTVBJTEVSX0FOTk9UQVRJT05fTlVMTF9BTkFMWVNJU30gaXMgZW5hYmxlZC48
L3A+CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29yZS9QYWNrYWdlRnJhZ21lbnQuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL1BhY2thZ2VGcmFnbWVudC5q
YXZhCmluZGV4IDM1ZmIzNGIuLjI5ZmViOWUgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL1BhY2thZ2VGcmFnbWVudC5q
YXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb3JlL1BhY2thZ2VGcmFnbWVudC5qYXZhCkBAIC0xLDUgKzEsNSBAQAogLyoqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAwOSBJQk0gQ29ycG9yYXRp
b24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMiBJQk0gQ29ycG9yYXRp
b24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQg
dGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0
aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNj
b21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKQEAgLTE3LDYg
KzE3LDcgQEAKIAogaW1wb3J0IG9yZy5lY2xpcHNlLmNvcmUucmVzb3VyY2VzLklDb250YWluZXI7
CiBpbXBvcnQgb3JnLmVjbGlwc2UuY29yZS5yZXNvdXJjZXMuSUZvbGRlcjsKK2ltcG9ydCBvcmcu
ZWNsaXBzZS5jb3JlLnJlc291cmNlcy5JTWFya2VyOwogaW1wb3J0IG9yZy5lY2xpcHNlLmNvcmUu
cmVzb3VyY2VzLklSZXNvdXJjZTsKIGltcG9ydCBvcmcuZWNsaXBzZS5jb3JlLnJ1bnRpbWUuQ29y
ZUV4Y2VwdGlvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5jb3JlLnJ1bnRpbWUuSVBhdGg7CkBAIC0y
Nyw2ICsyOCw3IEBACiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuSUNsYXNzRmlsZTsKIGlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5JQ29tcGlsYXRpb25Vbml0OwogaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5jb3JlLklKYXZhRWxlbWVudDsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29y
ZS5JSmF2YU1vZGVsTWFya2VyOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLklKYXZhTW9k
ZWxTdGF0dXNDb25zdGFudHM7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuSUphdmFQcm9q
ZWN0OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLklQYWNrYWdlRnJhZ21lbnQ7CkBAIC0z
Niw4ICszOCwxMCBAQAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLkphdmFDb3JlOwogaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLkphdmFNb2RlbEV4Y2VwdGlvbjsKIGltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuY29yZS5Xb3JraW5nQ29weU93bmVyOworaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5jb3JlLmNvbXBpbGVyLkNhdGVnb3JpemVkUHJvYmxlbTsKIGltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIudXRpbC5TdWZmaXhDb25zdGFudHM7CiBpbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmludGVybmFsLmNvcmUuSmF2YU1vZGVsTWFuYWdlci5QZXJQcm9qZWN0SW5mbzsK
K2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS5idWlsZGVyLkphdmFCdWlsZGVy
OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLnV0aWwuTWVtZW50b1Rva2Vu
aXplcjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS51dGlsLk1lc3NhZ2Vz
OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLnV0aWwuVXRpbDsKQEAgLTUx
Miw0ICs1MTYsNjggQEAKIAogCXJldHVybiBKYXZhTW9kZWxTdGF0dXMuVkVSSUZJRURfT0s7CiB9
CisKKy8qKgorICogUmVjb3JkIGEgbmV3IG1hcmtlciBkZW5vdGluZyBhIHBhY2thZ2UgcHJvYmxl
bQorICovCitwdWJsaWMgdm9pZCBjcmVhdGVQYWNrYWdlUHJvYmxlbU1hcmtlcihDYXRlZ29yaXpl
ZFByb2JsZW0gcHJvYmxlbSkgeworCVN0cmluZyBtYXJrZXJUeXBlID0gcHJvYmxlbS5nZXRNYXJr
ZXJUeXBlKCk7CisJSVJlc291cmNlIHJlc291cmNlID0gdGhpcy5yZXNvdXJjZSgpOworCWludCBp
ZCA9IHByb2JsZW0uZ2V0SUQoKTsKKwlib29sZWFuIG1hbmFnZWRQcm9ibGVtID0gZmFsc2U7CisJ
aWYgKElKYXZhTW9kZWxNYXJrZXIuSkFWQV9NT0RFTF9QUk9CTEVNX01BUktFUi5lcXVhbHMobWFy
a2VyVHlwZSkpIHsKKwkJSU1hcmtlciBtYXJrZXI7CisJCXRyeSB7CisJCQltYXJrZXIgPSByZXNv
dXJjZS5jcmVhdGVNYXJrZXIobWFya2VyVHlwZSk7CisJCQlTdHJpbmdbXSBhdHRyaWJ1dGVOYW1l
cyA9IHsKKwkJCQlJTWFya2VyLk1FU1NBR0UsCisJCQkJSU1hcmtlci5TRVZFUklUWSwKKwkJCQlJ
SmF2YU1vZGVsTWFya2VyLklELAorCQkJCUlNYXJrZXIuQ0hBUl9TVEFSVCwKKwkJCQlJTWFya2Vy
LkNIQVJfRU5ELAorCQkJCUlNYXJrZXIuTElORV9OVU1CRVIsCisJCQkJSUphdmFNb2RlbE1hcmtl
ci5BUkdVTUVOVFMsCisJCQkJSUphdmFNb2RlbE1hcmtlci5DQVRFR09SWV9JRCwKKwkJCX07CisJ
CQlpbnQgc3RhbmRhcmRMZW5ndGggPSBhdHRyaWJ1dGVOYW1lcy5sZW5ndGg7CisJCQlTdHJpbmdb
XSBhbGxOYW1lcyA9IGF0dHJpYnV0ZU5hbWVzOworCQkJaW50IG1hbmFnZWRMZW5ndGggPSBtYW5h
Z2VkUHJvYmxlbSA/IDAgOiAxOworCQkJU3RyaW5nW10gZXh0cmFBdHRyaWJ1dGVOYW1lcyA9IHBy
b2JsZW0uZ2V0RXh0cmFNYXJrZXJBdHRyaWJ1dGVOYW1lcygpOworCQkJaW50IGV4dHJhTGVuZ3Ro
ID0gZXh0cmFBdHRyaWJ1dGVOYW1lcyA9PSBudWxsID8gMCA6IGV4dHJhQXR0cmlidXRlTmFtZXMu
bGVuZ3RoOworCQkJaWYgKG1hbmFnZWRMZW5ndGggPiAwIHx8IGV4dHJhTGVuZ3RoID4gMCkgewor
CQkJCWFsbE5hbWVzID0gbmV3IFN0cmluZ1tzdGFuZGFyZExlbmd0aCArIG1hbmFnZWRMZW5ndGgg
KyBleHRyYUxlbmd0aF07CisJCQkJU3lzdGVtLmFycmF5Y29weShhdHRyaWJ1dGVOYW1lcywgMCwg
YWxsTmFtZXMsIDAsIHN0YW5kYXJkTGVuZ3RoKTsKKwkJCQlpZiAobWFuYWdlZExlbmd0aCA+IDAp
CisJCQkJCWFsbE5hbWVzW3N0YW5kYXJkTGVuZ3RoXSA9IElNYXJrZXIuU09VUkNFX0lEOworCQkJ
CVN5c3RlbS5hcnJheWNvcHkoZXh0cmFBdHRyaWJ1dGVOYW1lcywgMCwgYWxsTmFtZXMsIHN0YW5k
YXJkTGVuZ3RoICsgbWFuYWdlZExlbmd0aCwgZXh0cmFMZW5ndGgpOworCQkJfQorCQorCQkJT2Jq
ZWN0W10gYWxsVmFsdWVzID0gbmV3IE9iamVjdFthbGxOYW1lcy5sZW5ndGhdOworCQkJLy8gc3Rh
bmRhcmQgYXR0cmlidXRlcworCQkJaW50IGluZGV4ID0gMDsKKwkJCWFsbFZhbHVlc1tpbmRleCsr
XSA9IHByb2JsZW0uZ2V0TWVzc2FnZSgpOyAvLyBtZXNzYWdlCisJCQlhbGxWYWx1ZXNbaW5kZXgr
K10gPSBwcm9ibGVtLmlzRXJyb3IoKSA/IG5ldyBJbnRlZ2VyKElNYXJrZXIuU0VWRVJJVFlfRVJS
T1IpIDogbmV3IEludGVnZXIoSU1hcmtlci5TRVZFUklUWV9XQVJOSU5HKTsgLy8gc2V2ZXJpdHkK
KwkJCWFsbFZhbHVlc1tpbmRleCsrXSA9IG5ldyBJbnRlZ2VyKGlkKTsgLy8gSUQKKwkJCWFsbFZh
bHVlc1tpbmRleCsrXSA9IG5ldyBJbnRlZ2VyKHByb2JsZW0uZ2V0U291cmNlU3RhcnQoKSk7IC8v
IHN0YXJ0CisJCQlpbnQgZW5kID0gcHJvYmxlbS5nZXRTb3VyY2VFbmQoKTsKKwkJCWFsbFZhbHVl
c1tpbmRleCsrXSA9IG5ldyBJbnRlZ2VyKGVuZCA+IDAgPyBlbmQgKyAxIDogZW5kKTsgLy8gZW5k
CisJCQlhbGxWYWx1ZXNbaW5kZXgrK10gPSBuZXcgSW50ZWdlcihwcm9ibGVtLmdldFNvdXJjZUxp
bmVOdW1iZXIoKSk7IC8vIGxpbmUKKwkJCWFsbFZhbHVlc1tpbmRleCsrXSA9IFV0aWwuZ2V0UHJv
YmxlbUFyZ3VtZW50c0Zvck1hcmtlcihwcm9ibGVtLmdldEFyZ3VtZW50cygpKTsgLy8gYXJndW1l
bnRzCisJCQlhbGxWYWx1ZXNbaW5kZXgrK10gPSBuZXcgSW50ZWdlcihwcm9ibGVtLmdldENhdGVn
b3J5SUQoKSk7IC8vIGNhdGVnb3J5IElECisJCQkvLyBTT1VSQ0VfSUQgYXR0cmlidXRlIGZvciBK
RFQgcHJvYmxlbXMKKwkJCWlmIChtYW5hZ2VkTGVuZ3RoID4gMCkKKwkJCQlhbGxWYWx1ZXNbaW5k
ZXgrK10gPSBKYXZhQnVpbGRlci5TT1VSQ0VfSUQ7CisJCQkvLyBvcHRpb25hbCBleHRyYSBhdHRy
aWJ1dGVzCisJCQlpZiAoZXh0cmFMZW5ndGggPiAwKQorCQkJCVN5c3RlbS5hcnJheWNvcHkocHJv
YmxlbS5nZXRFeHRyYU1hcmtlckF0dHJpYnV0ZVZhbHVlcygpLCAwLCBhbGxWYWx1ZXMsIGluZGV4
LCBleHRyYUxlbmd0aCk7CisJCisJCQltYXJrZXIuc2V0QXR0cmlidXRlcyhhbGxOYW1lcywgYWxs
VmFsdWVzKTsKKwkJfSBjYXRjaCAoQ29yZUV4Y2VwdGlvbiBlKSB7CisJCQkvLyBjb3VsZCBub3Qg
Y3JlYXRlIG1hcmtlcjogY2Fubm90IGRvIG11Y2gKKwkJCWlmIChKYXZhTW9kZWxNYW5hZ2VyLlZF
UkJPU0UpIHsKKwkJCQllLnByaW50U3RhY2tUcmFjZSgpOworCQkJfQorCQl9CisJfQorfQogfQpk
aWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvcmUvYnVpbGRlci9JbmNyZW1lbnRhbEltYWdlQnVpbGRlci5qYXZhIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvYnVpbGRl
ci9JbmNyZW1lbnRhbEltYWdlQnVpbGRlci5qYXZhCmluZGV4IGQxMzI1YzEuLmViNGU5NWMgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb3JlL2J1aWxkZXIvSW5jcmVtZW50YWxJbWFnZUJ1aWxkZXIuamF2YQorKysgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9idWls
ZGVyL0luY3JlbWVudGFsSW1hZ2VCdWlsZGVyLmphdmEKQEAgLTEsNSArMSw1IEBACiAvKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEwIElCTSBDb3Jwb3Jh
dGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEyIElCTSBDb3Jwb3Jh
dGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFu
ZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVy
IHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBh
Y2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdApAQCAtNzk2
LDYgKzc5NiwxMCBAQAogfQogCiBwcm90ZWN0ZWQgdm9pZCB1cGRhdGVQcm9ibGVtc0ZvcihTb3Vy
Y2VGaWxlIHNvdXJjZUZpbGUsIENvbXBpbGF0aW9uUmVzdWx0IHJlc3VsdCkgdGhyb3dzIENvcmVF
eGNlcHRpb24geworCWlmIChDaGFyT3BlcmF0aW9uLmVxdWFscyhzb3VyY2VGaWxlLmdldE1haW5U
eXBlTmFtZSgpLCBUeXBlQ29uc3RhbnRzLlBBQ0tBR0VfSU5GT19OQU1FKSkgeworCQlJUmVzb3Vy
Y2UgcGtnUmVzb3VyY2UgPSBzb3VyY2VGaWxlLnJlc291cmNlLmdldFBhcmVudCgpOworCQlwa2dS
ZXNvdXJjZS5kZWxldGVNYXJrZXJzKElKYXZhTW9kZWxNYXJrZXIuSkFWQV9NT0RFTF9QUk9CTEVN
X01BUktFUiwgZmFsc2UsIElSZXNvdXJjZS5ERVBUSF9JTkZJTklURSk7CisJfQogCUlNYXJrZXJb
XSBtYXJrZXJzID0gSmF2YUJ1aWxkZXIuZ2V0UHJvYmxlbXNGb3Ioc291cmNlRmlsZS5yZXNvdXJj
ZSk7CiAJQ2F0ZWdvcml6ZWRQcm9ibGVtW10gcHJvYmxlbXMgPSByZXN1bHQuZ2V0UHJvYmxlbXMo
KTsKIAlpZiAocHJvYmxlbXMgPT0gbnVsbCAmJiBtYXJrZXJzLmxlbmd0aCA9PSAwKSByZXR1cm47
CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29yZS91dGlsL1V0aWwuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVs
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3V0aWwvVXRpbC5qYXZhCmluZGV4IDIwMjM5
NTQuLmU0NWU4NzMgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3V0aWwvVXRpbC5qYXZhCisrKyBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL3V0aWwvVXRpbC5q
YXZhCkBAIC0xLDUgKzEsNSBAQAogLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKLSAqIENvcHlyaWdo
dCAoYykgMjAwMCwgMjAxMSBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdo
dCAoYykgMjAwMCwgMjAxMiBJQk0gQ29ycG9yYXRpb24gYW5kIG90aGVycy4KICAqIEFsbCByaWdo
dHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMK
ICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVi
bGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24s
IGFuZCBpcyBhdmFpbGFibGUgYXQKQEAgLTk0MCw3ICs5NDAsNyBAQAogCQlyZXR1cm4gbGluZVNl
cGFyYXRvcjsKIAl9CiAKLQlwcml2YXRlIHN0YXRpYyBJUGFja2FnZUZyYWdtZW50IGdldFBhY2th
Z2VGcmFnbWVudChjaGFyW10gZmlsZU5hbWUsIGludCBwa2dFbmQsIGludCBqYXJTZXBhcmF0b3Ip
IHsKKwlwdWJsaWMgc3RhdGljIElQYWNrYWdlRnJhZ21lbnQgZ2V0UGFja2FnZUZyYWdtZW50KGNo
YXJbXSBmaWxlTmFtZSwgaW50IHBrZ0VuZCwgaW50IGphclNlcGFyYXRvcikgewogCQlpZiAoamFy
U2VwYXJhdG9yICE9IC0xKSB7CiAJCQlTdHJpbmcgamFyTWVtZW50byA9IG5ldyBTdHJpbmcoZmls
ZU5hbWUsIDAsIGphclNlcGFyYXRvcik7CiAJCQlQYWNrYWdlRnJhZ21lbnRSb290IHJvb3QgPSAo
UGFja2FnZUZyYWdtZW50Um9vdCkgSmF2YUNvcmUuY3JlYXRlKGphck1lbWVudG8pOw==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>211956</attachid>
            <date>2012-03-02 08:46:00 -0500</date>
            <delta_ts>2012-03-06 09:45:58 -0500</delta_ts>
            <desc>proposed fix v2.1 + regression tests</desc>
            <filename>Fixed-bug-372012-compilernull-Warn-when-defaults-not.patch</filename>
            <type>text/plain</type>
            <size>56754</size>
            <attacher name="Ayushman Jain">amj87.iitr</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmJ1aWxkZXIvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2J1aWxkZXIvQW5ub3RhdGlvbkRlcGVuZGVuY3lUZXN0cy5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuYnVpbGRlci9zcmMvb3JnL2VjbGlwc2Uv
amR0L2NvcmUvdGVzdHMvYnVpbGRlci9Bbm5vdGF0aW9uRGVwZW5kZW5jeVRlc3RzLmphdmEKaW5k
ZXggOTQ5MDM4ZC4uMjhhMmQ3MiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVz
dHMuYnVpbGRlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvYnVpbGRlci9Bbm5vdGF0
aW9uRGVwZW5kZW5jeVRlc3RzLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMu
YnVpbGRlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvYnVpbGRlci9Bbm5vdGF0aW9u
RGVwZW5kZW5jeVRlc3RzLmphdmEKQEAgLTE1MDcsNCArMTUwNyw0NSBAQAogCQkvLyB2ZXJpZnkg
dGhhdCBUZXN0MSB3YXMgcmVjb21waWxlZAogCQlleHBlY3RpbmdVbmlxdWVDb21waWxlZENsYXNz
ZXMobmV3IFN0cmluZ1tdIHsgInAxLlRlc3QxIiwgInAxLlRlc3QyIiB9KTsKIAl9CisJCisJLy8g
aHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM3MjAxMgorCS8v
IHRlc3QgbWlzc2luZyBkZWZhdWx0IG51bGxuZXNzIGFubm90YXRpb24gZm9yIGEgcGFja2FnZSB3
aXRob3V0IHBhY2thZ2UtaW5mbworCS8vIHRlc3Qgd2hlbiB0aGUgcGFja2FnZS1pbmZvIGlzIGFk
ZGVkIHdpdGggdGhlIGRlZmF1bHQgYW5ub3RhdGlvbiwgdGhlIHByb2JsZW0gZGlzYXBwZWFycwor
CXB1YmxpYyB2b2lkIHRlc3RCdWczNzIwMTIoKSB0aHJvd3MgSmF2YU1vZGVsRXhjZXB0aW9uLCBJ
T0V4Y2VwdGlvbiB7CisJCS8vIHByZXBhcmUgdGhlIHByb2plY3Q6CisJCXNldHVwUHJvamVjdEZv
ck51bGxBbm5vdGF0aW9ucygpOworCQllbnYuZ2V0SmF2YVByb2plY3QodGhpcy5wcm9qZWN0UGF0
aCkuc2V0T3B0aW9uKEphdmFDb3JlLkNPTVBJTEVSX1BCX01JU1NJTkdfTk9OTlVMTF9CWV9ERUZB
VUxUX0FOTk9UQVRJT04sIEphdmFDb3JlLkVSUk9SKTsKKwkJZW52LmdldEphdmFQcm9qZWN0KHRo
aXMucHJvamVjdFBhdGgpLnNldE9wdGlvbihKYXZhQ29yZS5DT01QSUxFUl9QQl9SRURVTkRBTlRf
TlVMTF9BTk5PVEFUSU9OLCBKYXZhQ29yZS5FUlJPUik7CisJCVN0cmluZyB0ZXN0MUNvZGUgPSAi
cGFja2FnZSBwMTtcbiIJKworCQkJInB1YmxpYyBjbGFzcyBUZXN0MSB7XG4iICsKKwkJCSIgICAg
cHVibGljIHZvaWQgZm9vKCkge1xuIiArCisJCQkiICAgICAgICBuZXcgVGVzdDIoKS5iYXIoXCJc
Iik7XG4iICsKKwkJCSIgICAgfVxuIiArCisJCQkiCSBjbGFzcyBUZXN0MUlubmVye31cbiIgKwor
CQkJIn0iOworCQlTdHJpbmcgdGVzdDJDb2RlID0gInBhY2thZ2UgcDE7XG4iICsKKwkJCSJAb3Jn
LmVjbGlwc2UuamR0LmFubm90YXRpb24uTm9uTnVsbEJ5RGVmYXVsdFxuIiArCisJCQkicHVibGlj
IGNsYXNzIFRlc3QyIHtcbiIgKworCQkJIiAgICBwdWJsaWMgdm9pZCBiYXIoU3RyaW5nIHN0cikg
e31cbiIgKworCQkJIn0iOworCisJCUlQYXRoIHRlc3QxUGF0aCA9IGVudi5hZGRDbGFzcyggdGhp
cy5zcmNSb290LCAicDEiLCAiVGVzdDEiLCB0ZXN0MUNvZGUgKTsKKwkJZW52LmFkZENsYXNzKCB0
aGlzLnNyY1Jvb3QsICJwMSIsICJUZXN0MiIsIHRlc3QyQ29kZSApOworCisJCWZ1bGxCdWlsZCgg
dGhpcy5wcm9qZWN0UGF0aCApOworCQlleHBlY3RpbmdOb1Byb2JsZW1zRm9yKHRlc3QxUGF0aCk7
CisJCWV4cGVjdGluZ1Byb2JsZW1zRm9yKHRoaXMuc3JjUm9vdCwgCisJCQkJIlByb2JsZW0gOiBB
IGRlZmF1bHQgbnVsbG5lc3MgYW5ub3RhdGlvbiBoYXMgbm90IGJlZW4gc3BlY2lmaWVkIGZvciB0
aGUgcGFja2FnZSBwMSBbIHJlc291cmNlIDogPC9Qcm9qZWN0L3NyYy9wMT4gcmFuZ2UgOiA8LTEs
LTE+IGNhdGVnb3J5IDogPDkwPiBzZXZlcml0eSA6IDwyPl0iKTsKKworCQkvLyBhZGQgcGFja2Fn
ZS1pbmZvLmphdmEgd2l0aCBkZWZhdWx0IGFubm90YXRpb24KKwkJU3RyaW5nIHBhY2thZ2VJbmZv
Q29kZSA9ICJAb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTm9uTnVsbEJ5RGVmYXVsdFxuIiAr
CisJCQkicGFja2FnZSBwMTtcbiI7CisJCWVudi5hZGRDbGFzcyggdGhpcy5zcmNSb290LCAicDEi
LCAicGFja2FnZS1pbmZvIiwgcGFja2FnZUluZm9Db2RlICk7CisJCWluY3JlbWVudGFsQnVpbGQo
IHRoaXMucHJvamVjdFBhdGggKTsKKwkJZXhwZWN0aW5nUHJvYmxlbXNGb3IodGhpcy5wcm9qZWN0
UGF0aCwKKwkJCQkiUHJvYmxlbSA6IE51bGxuZXNzIGRlZmF1bHQgaXMgcmVkdW5kYW50IHdpdGgg
YSBkZWZhdWx0IHNwZWNpZmllZCBmb3IgdGhlIGVuY2xvc2luZyBwYWNrYWdlIHAxIFsgcmVzb3Vy
Y2UgOiA8L1Byb2plY3Qvc3JjL3AxL1Rlc3QyLmphdmE+IHJhbmdlIDogPDEyLDU2PiBjYXRlZ29y
eSA6IDwxMjA+IHNldmVyaXR5IDogPDI+XSIpOworCisJCS8vIHZlcmlmeSB0aGF0IGFsbCBwYWNr
YWdlIENVJ3Mgd2VyZSByZWNvbXBpbGVkCisJCWV4cGVjdGluZ1VuaXF1ZUNvbXBpbGVkQ2xhc3Nl
cyhuZXcgU3RyaW5nW10geyAicDEuVGVzdDEiLCAicDEuVGVzdDEkVGVzdDFJbm5lciIsICJwMS5U
ZXN0MiIsICJwMS5wYWNrYWdlLWluZm8iIH0pOworCX0KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0
cy9jb21waWxlci9yZWdyZXNzaW9uL0JhdGNoQ29tcGlsZXJUZXN0LmphdmEgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
Y29tcGlsZXIvcmVncmVzc2lvbi9CYXRjaENvbXBpbGVyVGVzdC5qYXZhCmluZGV4IDAzMGYwZmQu
LjRiOTgyOGMgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVy
L3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0JhdGNo
Q29tcGlsZXJUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGls
ZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vQmF0
Y2hDb21waWxlclRlc3QuamF2YQpAQCAtNzksNyArNzksNyBAQAogCQkJIn1cbiI7CiAKIAlzdGF0
aWMgewotLy8JCVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1tdIHsgInRlc3QzMSIgfTsKKy8vCQlU
RVNUU19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7ICJ0ZXN0MzE1X3dhcm5fb3B0aW9uc19hIiB9Owog
Ly8JCVRFU1RTX05VTUJFUlMgPSBuZXcgaW50W10geyAzMDYgfTsKIC8vCQlURVNUU19SQU5HRSA9
IG5ldyBpbnRbXSB7IDI5OCwgLTEgfTsKIAl9CkBAIC0xNjQ0LDkgKzE2NDQsOCBAQAogICAgICAg
ICAiICAgIC1lbmFibGVKYXZhZG9jICAgICBjb25zaWRlciByZWZlcmVuY2VzIGluIGphdmFkb2Nc
biIgKwogICAgICAgICAiICAgIC1YZW1hY3MgICAgICAgICAgICB1c2VkIHRvIGVuYWJsZSBlbWFj
cy1zdHlsZSBvdXRwdXQgaW4gdGhlIGNvbnNvbGUuXG4iICsKICAgICAgICAgIiAgICAgICAgICAg
ICAgICAgICAgICAgSXQgZG9lcyBub3QgYWZmZWN0IHRoZSB4bWwgbG9nIG91dHB1dFxuIiArCi0g
ICAgICAgICIgICAgLW5vbk51bGxCeURlZmF1bHQgIGZvciBhbm5vdGF0aW9uIGJhc2VkIG51bGwg
YW5hbHlzaXMgYXNzdW1lIG5vbm51bGxcbiIgKyAKLSAgICAgICAgIiAgICAgICAgICAgICAgICAg
ICAgICAgYXMgdGhlIGdsb2JhbCBkZWZhdWx0XG4iICsgCi0gICAgICAgICIgXG4iICsKKyAgICAg
ICAgIiAgICAtbWlzc2luZ051bGxEZWZhdWx0ICByZXBvcnQgbWlzc2luZyBkZWZhdWx0IG51bGxu
ZXNzIGFubm90YXRpb25cbiIgKyAKKyAgICAgICAgIiBcbiIgKyAKICAgICAgICAgIiAgICAtPyAt
aGVscCAgICAgICAgICAgcHJpbnQgdGhpcyBoZWxwIG1lc3NhZ2VcbiIgKwogICAgICAgICAiICAg
IC12IC12ZXJzaW9uICAgICAgICBwcmludCBjb21waWxlciB2ZXJzaW9uXG4iICsKICAgICAgICAg
IiAgICAtc2hvd3ZlcnNpb24gICAgICAgcHJpbnQgY29tcGlsZXIgdmVyc2lvbiBhbmQgY29udGlu
dWVcbiIgKwpAQCAtMTgzOCw5ICsxODM3LDkgQEAKIAkJCSIJCTxhcmd1bWVudCB2YWx1ZT1cIi0t
LU9VVFBVVF9ESVJfUExBQ0VIT0xERVItLS1cIi8+XG4iICsgCiAJCQkiCTwvY29tbWFuZF9saW5l
PlxuIiArIAogCQkJIgk8b3B0aW9ucz5cbiIgKyAKKwkJCSIJCTxvcHRpb24ga2V5PVwib3JnLmVj
bGlwc2UuamR0LmNvcmUuY29tcGlsZXIuYW5ub3RhdGlvbi5taXNzaW5nTm9uTnVsbEJ5RGVmYXVs
dEFubm90YXRpb25cIiB2YWx1ZT1cImlnbm9yZVwiLz5cbiIgKyAKIAkJCSIJCTxvcHRpb24ga2V5
PVwib3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuYW5ub3RhdGlvbi5ub25udWxsXCIgdmFs
dWU9XCJvcmcuZWNsaXBzZS5qZHQuYW5ub3RhdGlvbi5Ob25OdWxsXCIvPlxuIiArIAogCQkJIgkJ
PG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5hbm5vdGF0aW9uLm5v
bm51bGxieWRlZmF1bHRcIiB2YWx1ZT1cIm9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uLk5vbk51
bGxCeURlZmF1bHRcIi8+XG4iICsgCi0JCQkiCQk8b3B0aW9uIGtleT1cIm9yZy5lY2xpcHNlLmpk
dC5jb3JlLmNvbXBpbGVyLmFubm90YXRpb24ubm9ubnVsbGlzZGVmYXVsdFwiIHZhbHVlPVwiZGlz
YWJsZWRcIi8+XG4iICsgCiAJCQkiCQk8b3B0aW9uIGtleT1cIm9yZy5lY2xpcHNlLmpkdC5jb3Jl
LmNvbXBpbGVyLmFubm90YXRpb24ubnVsbGFibGVcIiB2YWx1ZT1cIm9yZy5lY2xpcHNlLmpkdC5h
bm5vdGF0aW9uLk51bGxhYmxlXCIvPlxuIiArIAogCQkJIgkJPG9wdGlvbiBrZXk9XCJvcmcuZWNs
aXBzZS5qZHQuY29yZS5jb21waWxlci5hbm5vdGF0aW9uLm51bGxhbmFseXNpc1wiIHZhbHVlPVwi
ZGlzYWJsZWRcIi8+XG4iICsgCiAJCQkiCQk8b3B0aW9uIGtleT1cIm9yZy5lY2xpcHNlLmpkdC5j
b3JlLmNvbXBpbGVyLmNvZGVnZW4uaW5saW5lSnNyQnl0ZWNvZGVcIiB2YWx1ZT1cImRpc2FibGVk
XCIvPlxuIiArIApAQCAtMTI1OTgsMzEgKzEyNTk3LDI4IEBACiB9CiAKIC8vIGh0dHBzOi8vYnVn
cy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zMjUzNDIKLS8vIC13YXJuIG9wdGlv
biAtIHJlZ3Jlc3Npb24gdGVzdHMgdG8gY2hlY2sgb3B0aW9uIG51bGxBbm5vdAotLy8gTnVsbCB3
YXJuaW5ncyBiZWNhdXNlIG9mIGFubm90YXRpb25zLCBnbG9iYWwgbm9uTnVsbEJ5RGVmYXVsdAot
Ly8gRElTQUJMRUQgZHVlIHRvIGR5c2Z1bmN0aW9uYWwgZ2xvYmFsIGRlZmF1bHQgYWZ0ZXIgQnVn
IDM2NjA2MyAtIENvbXBpbGVyIHNob3VsZCBub3QgYWRkIHN5bnRoZXRpYyBATm9uTnVsbCBhbm5v
dGF0aW9ucwotcHVibGljIHZvaWQgX3Rlc3QzMTVfd2Fybl9vcHRpb25zKCkgeworLy8gLXdhcm4g
b3B0aW9uIC0gcmVncmVzc2lvbiB0ZXN0cyB0byBjaGVjayBvcHRpb24gbnVsbEFubm90IGFuZCBt
aXNzaW5nTnVsbERlZmF1bHQKKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3df
YnVnLmNnaT9pZD0zNzIwMTIKK3B1YmxpYyB2b2lkIHRlc3QzMTVfd2Fybl9vcHRpb25zKCkgewog
CXRoaXMucnVuQ29uZm9ybVRlc3QoCiAJCW5ldyBTdHJpbmdbXSB7CisJCQkJInAvcGFja2FnZS1p
bmZvLmphdmEiLAorCQkJCSJAb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTm9uTnVsbEJ5RGVm
YXVsdFxuIiArCisJCQkJInBhY2thZ2UgcDtcbiIsCiAJCQkJInAvWC5qYXZhIiwKIAkJCQkicGFj
a2FnZSBwO1xuIiArCi0JCQkJImltcG9ydCBvcmcuZWNsaXBzZS5qZHQuYW5ub3RhdGlvbi4qO1xu
IiArCi0JCQkJIkBTdXBwcmVzc1dhcm5pbmdzKFwidW51c2VkXCIpXG4iICsKIAkJCQkicHVibGlj
IGNsYXNzIFgge1xuIiArCi0JCQkJIiAgT2JqZWN0IGZvbyhATnVsbGFibGUgT2JqZWN0IG8sIE9i
amVjdCBvMikge1xuIiArCi0JCQkJIiAgICBpZiAoby50b1N0cmluZygpID09IFwiXCIpeyByZXR1
cm4gbnVsbDt9XG4iICsKLQkJCQkiICAgIGlmIChvMiA9PSBudWxsKSB7fVxuIiArCi0JCQkJIiAg
ICBnb28obnVsbCkudG9TdHJpbmcoKTtcbiIgKwotCQkJCSIJIHJldHVybiBudWxsO1xuIiArCi0J
CQkJIiAgfVxuIiArCi0JCQkJIiAgQE51bGxhYmxlIE9iamVjdCBnb28oT2JqZWN0IG8yKSB7XG4i
ICsKLQkJCQkiICAgIHJldHVybiBuZXcgT2JqZWN0KCk7XG4iICsKLQkJCQkiICB9XG4iICsKLQkJ
CQkiICBATm9uTnVsbEJ5RGVmYXVsdCBPYmplY3QgaG9vKE9iamVjdCBvMikge1xuIiArIC8vIHJl
ZHVuZGFudAotCQkJCSIgICAgaWYgKG8yID09IG51bGwpXG4iICsKLQkJCQkiCSAgICByZXR1cm4g
bnVsbDtcbiIgKwotCQkJCSIgICAgcmV0dXJuIHRoaXM7XG4iICsKLQkJCQkiICB9XG4iICsKKwkJ
CQkifVxuIiwKKwkJCQkicDEvWDEuamF2YSIsCisJCQkJInBhY2thZ2UgcDE7XG4iICsKKwkJCQki
cHVibGljIGNsYXNzIFgxIHtcbiIgKworCQkJCSJ9XG4iLAorCQkJCSJwMS9YMWEuamF2YSIsCisJ
CQkJInBhY2thZ2UgcDE7XG4iICsKKwkJCQkicHVibGljIGNsYXNzIFgxYSB7XG4iICsKKwkJCQki
fVxuIiwKKwkJCQkiRGVmYXVsdDEuamF2YSIsCisJCQkJInB1YmxpYyBjbGFzcyBEZWZhdWx0MSB7
XG4iICsKIAkJCQkifVxuIiwKIAkJCQkib3JnL2VjbGlwc2UvamR0L2Fubm90YXRpb24vTm9uTnVs
bC5qYXZhIiwKIAkJCQlOT05OVUxMX0FOTk9UQVRJT05fQ09OVEVOVCwKQEAgLTEyNjM0LDUwICsx
MjYzMCw4NSBAQAogCQkiXCIiICsgT1VUUFVUX0RJUiArICBGaWxlLnNlcGFyYXRvciArICJwIiAr
IEZpbGUuc2VwYXJhdG9yICsgIlguamF2YVwiIgogCQkrICIgLXNvdXJjZXBhdGggXCIiICsgT1VU
UFVUX0RJUiArICJcIiIKIAkJKyAiIC0xLjUiCi0JCSsgIiAtd2FybjorbnVsbEFubm90IC13YXJu
OitudWxsIC1ub25OdWxsQnlEZWZhdWx0IC1wcm9jOm5vbmUgLWQgXCIiICsgT1VUUFVUX0RJUiAr
ICJcIiIsCisJCSsgIiAtd2FybjorbnVsbEFubm90IC13YXJuOitudWxsIC1taXNzaW5nTnVsbERl
ZmF1bHQgLXByb2M6bm9uZSAtZCBcIiIgKyBPVVRQVVRfRElSICsgIlwiIiwKKwkJIiIsCisJCSIi
LAorCQl0cnVlKTsKK30KKworLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19i
dWcuY2dpP2lkPTMyNTM0MgorLy8gLXdhcm4gb3B0aW9uIC0gcmVncmVzc2lvbiB0ZXN0cyB0byBj
aGVjayBvcHRpb24gbnVsbEFubm90IGFuZCBtaXNzaW5nTnVsbERlZmF1bHQKKy8vIGh0dHBzOi8v
YnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNzIwMTIKK3B1YmxpYyB2b2lk
IHRlc3QzMTVfd2Fybl9vcHRpb25zX2EoKSB7CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5l
dyBTdHJpbmdbXSB7CisJCQkJInAxL1gxLmphdmEiLAorCQkJCSJwYWNrYWdlIHAxO1xuIiArCisJ
CQkJInB1YmxpYyBjbGFzcyBYMSB7XG4iICsKKwkJCQkiICAgY2xhc3MgSW5uZXJ7fTtcbiIgKwor
CQkJCSIJWm9yaztcbiIgKworCQkJCSJ9XG4iLAorCQkJCSJvcmcvZWNsaXBzZS9qZHQvYW5ub3Rh
dGlvbi9Ob25OdWxsLmphdmEiLAorCQkJCU5PTk5VTExfQU5OT1RBVElPTl9DT05URU5ULAorCQkJ
CSJvcmcvZWNsaXBzZS9qZHQvYW5ub3RhdGlvbi9OdWxsYWJsZS5qYXZhIiwKKwkJCQlOVUxMQUJM
RV9BTk5PVEFUSU9OX0NPTlRFTlQsCisJCQkJIm9yZy9lY2xpcHNlL2pkdC9hbm5vdGF0aW9uL05v
bk51bGxCeURlZmF1bHQuamF2YSIsCQkJCQorCQkJCU5PTk5VTExfQllfREVGQVVMVF9BTk5PVEFU
SU9OX0NPTlRFTlQKKwkJfSwKKwkJIlwiIiArIE9VVFBVVF9ESVIgKyAgRmlsZS5zZXBhcmF0b3Ig
KyAicDEiICsgRmlsZS5zZXBhcmF0b3IgKyAiWDEuamF2YVwiIgorCQkrICIgLXNvdXJjZXBhdGgg
XCIiICsgT1VUUFVUX0RJUiArICJcIiIKKwkJKyAiIC0xLjUiCisJCSsgIiAtd2FybjorbnVsbEFu
bm90IC13YXJuOitudWxsIC1taXNzaW5nTnVsbERlZmF1bHQgLXByb2M6bm9uZSAtZCBcIiIgKyBP
VVRQVVRfRElSICsgIlwiIiwKIAkJIiIsCiAJCSItLS0tLS0tLS0tXG4iICsgCi0JCSIxLiBXQVJO
SU5HIGluIC0tLU9VVFBVVF9ESVJfUExBQ0VIT0xERVItLS0vcC9YLmphdmEgKGF0IGxpbmUgNilc
biIgKyAKLQkJIglpZiAoby50b1N0cmluZygpID09IFwiXCIpeyByZXR1cm4gbnVsbDt9XG4iICsg
Ci0JCSIJICAgIF5cbiIgKyAKLQkJIlBvdGVudGlhbCBudWxsIHBvaW50ZXIgYWNjZXNzOiBUaGUg
dmFyaWFibGUgbyBtYXkgYmUgbnVsbCBhdCB0aGlzIGxvY2F0aW9uXG4iICsgCisJCSIxLiBXQVJO
SU5HIGluIC0tLU9VVFBVVF9ESVJfUExBQ0VIT0xERVItLS0vcDEvWDEuamF2YSAoYXQgbGluZSAx
KVxuIiArIAorCQkiCXBhY2thZ2UgcDE7XG4iICsgCisJCSIJICAgICAgICBeXlxuIiArIAorCQki
QSBkZWZhdWx0IG51bGxuZXNzIGFubm90YXRpb24gaGFzIG5vdCBiZWVuIHNwZWNpZmllZCBmb3Ig
dGhlIHBhY2thZ2UgcDFcbiIgKyAKIAkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJIjIuIFdBUk5JTkcg
aW4gLS0tT1VUUFVUX0RJUl9QTEFDRUhPTERFUi0tLS9wL1guamF2YSAoYXQgbGluZSA2KVxuIiAr
IAotCQkiCWlmIChvLnRvU3RyaW5nKCkgPT0gXCJcIil7IHJldHVybiBudWxsO31cbiIgKyAKLQkJ
IgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5cbiIgKyAKLQkJIlR5cGUgbWlz
bWF0Y2g6IHJlcXVpcmVkIFwnQE5vbk51bGwgT2JqZWN0XCcgYnV0IHRoZSBwcm92aWRlZCB2YWx1
ZSBpcyBudWxsXG4iICsgCisJCSIyLiBFUlJPUiBpbiAtLS1PVVRQVVRfRElSX1BMQUNFSE9MREVS
LS0tL3AxL1gxLmphdmEgKGF0IGxpbmUgNClcbiIgKyAKKwkJIglab3JrO1xuIiArIAorCQkiCV5e
Xl5cbiIgKyAKKwkJIlN5bnRheCBlcnJvciBvbiB0b2tlbiBcIlpvcmtcIiwgVmFyaWFibGVEZWNs
YXJhdG9yIGV4cGVjdGVkIGFmdGVyIHRoaXMgdG9rZW5cbiIgKyAKIAkJIi0tLS0tLS0tLS1cbiIg
KyAKLQkJIjMuIFdBUk5JTkcgaW4gLS0tT1VUUFVUX0RJUl9QTEFDRUhPTERFUi0tLS9wL1guamF2
YSAoYXQgbGluZSA3KVxuIiArIAotCQkiCWlmIChvMiA9PSBudWxsKSB7fVxuIiArIAotCQkiCSAg
ICBeXlxuIiArIAotCQkiTnVsbCBjb21wYXJpc29uIGFsd2F5cyB5aWVsZHMgZmFsc2U6IFRoZSB2
YXJpYWJsZSBvMiBjYW5ub3QgYmUgbnVsbCBhdCB0aGlzIGxvY2F0aW9uXG4iICsgCisJCSIyIHBy
b2JsZW1zICgxIGVycm9yLCAxIHdhcm5pbmcpIiwgCisJCXRydWUpOworfQorCisvLyBodHRwczov
L2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzI1MzQyCisvLyAtd2FybiBv
cHRpb24gLSByZWdyZXNzaW9uIHRlc3RzIHRvIGNoZWNrIG9wdGlvbiBudWxsQW5ub3QgYW5kIG1p
c3NpbmdOdWxsRGVmYXVsdAorLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19i
dWcuY2dpP2lkPTM3MjAxMgorcHVibGljIHZvaWQgdGVzdDMxNV93YXJuX29wdGlvbnNfYigpIHsK
Kwl0aGlzLnJ1bk5lZ2F0aXZlVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCQkiWDEuamF2YSIs
CisJCQkJInB1YmxpYyBjbGFzcyBYMSB7XG4iICsKKwkJCQkiCVpvcms7XG4iICsKKwkJCQkifVxu
IiwKKwkJCQkib3JnL2VjbGlwc2UvamR0L2Fubm90YXRpb24vTm9uTnVsbC5qYXZhIiwKKwkJCQlO
T05OVUxMX0FOTk9UQVRJT05fQ09OVEVOVCwKKwkJCQkib3JnL2VjbGlwc2UvamR0L2Fubm90YXRp
b24vTnVsbGFibGUuamF2YSIsCisJCQkJTlVMTEFCTEVfQU5OT1RBVElPTl9DT05URU5ULAorCQkJ
CSJvcmcvZWNsaXBzZS9qZHQvYW5ub3RhdGlvbi9Ob25OdWxsQnlEZWZhdWx0LmphdmEiLAkJCQkK
KwkJCQlOT05OVUxMX0JZX0RFRkFVTFRfQU5OT1RBVElPTl9DT05URU5UCisJCX0sCisJCSJcIiIg
KyBPVVRQVVRfRElSICsgIEZpbGUuc2VwYXJhdG9yICsgIlgxLmphdmFcIiIKKwkJKyAiIC1zb3Vy
Y2VwYXRoIFwiIiArIE9VVFBVVF9ESVIgKyAiXCIiCisJCSsgIiAtMS41IgorCQkrICIgLXdhcm46
K251bGxBbm5vdCAtd2FybjorbnVsbCAtbWlzc2luZ051bGxEZWZhdWx0IC1wcm9jOm5vbmUgLWQg
XCIiICsgT1VUUFVUX0RJUiArICJcIiIsCisJCSIiLAogCQkiLS0tLS0tLS0tLVxuIiArIAotCQki
NC4gV0FSTklORyBpbiAtLS1PVVRQVVRfRElSX1BMQUNFSE9MREVSLS0tL3AvWC5qYXZhIChhdCBs
aW5lIDgpXG4iICsgCi0JCSIJZ29vKG51bGwpLnRvU3RyaW5nKCk7XG4iICsgCi0JCSIJXl5eXl5e
Xl5eXG4iICsgCi0JCSJQb3RlbnRpYWwgbnVsbCBwb2ludGVyIGFjY2VzczogVGhlIG1ldGhvZCBn
b28oT2JqZWN0KSBtYXkgcmV0dXJuIG51bGxcbiIgKyAKKwkJIjEuIFdBUk5JTkcgaW4gLS0tT1VU
UFVUX0RJUl9QTEFDRUhPTERFUi0tLS9YMS5qYXZhIChhdCBsaW5lIDEpXG4iICsgCisJCSIJcHVi
bGljIGNsYXNzIFgxIHtcbiIgKyAKKwkJIgkgICAgICAgICAgICAgXl5cbiIgKyAKKwkJIkEgZGVm
YXVsdCBudWxsbmVzcyBhbm5vdGF0aW9uIGhhcyBub3QgYmVlbiBzcGVjaWZpZWQgZm9yIHRoZSB0
eXBlIFgxXG4iICsgCiAJCSItLS0tLS0tLS0tXG4iICsgCi0JCSI1LiBXQVJOSU5HIGluIC0tLU9V
VFBVVF9ESVJfUExBQ0VIT0xERVItLS0vcC9YLmphdmEgKGF0IGxpbmUgOClcbiIgKyAKLQkJIgln
b28obnVsbCkudG9TdHJpbmcoKTtcbiIgKyAKLQkJIgkgICAgXl5eXlxuIiArIAotCQkiVHlwZSBt
aXNtYXRjaDogcmVxdWlyZWQgXCdATm9uTnVsbCBPYmplY3RcJyBidXQgdGhlIHByb3ZpZGVkIHZh
bHVlIGlzIG51bGxcbiIgKyAKKwkJIjIuIEVSUk9SIGluIC0tLU9VVFBVVF9ESVJfUExBQ0VIT0xE
RVItLS0vWDEuamF2YSAoYXQgbGluZSAyKVxuIiArIAorCQkiCVpvcms7XG4iICsgCisJCSIJXl5e
XlxuIiArIAorCQkiU3ludGF4IGVycm9yIG9uIHRva2VuIFwiWm9ya1wiLCBWYXJpYWJsZURlY2xh
cmF0b3IgZXhwZWN0ZWQgYWZ0ZXIgdGhpcyB0b2tlblxuIiArIAogCQkiLS0tLS0tLS0tLVxuIiAr
IAotCQkiNi4gV0FSTklORyBpbiAtLS1PVVRQVVRfRElSX1BMQUNFSE9MREVSLS0tL3AvWC5qYXZh
IChhdCBsaW5lIDkpXG4iICsgCi0JCSIJcmV0dXJuIG51bGw7XG4iICsgCi0JCSIJICAgICAgIF5e
Xl5cbiIgKyAKLQkJIlR5cGUgbWlzbWF0Y2g6IHJlcXVpcmVkIFwnQE5vbk51bGwgT2JqZWN0XCcg
YnV0IHRoZSBwcm92aWRlZCB2YWx1ZSBpcyBudWxsXG4iICsgCi0JCSItLS0tLS0tLS0tXG4iICsg
Ci0JCSI3LiBXQVJOSU5HIGluIC0tLU9VVFBVVF9ESVJfUExBQ0VIT0xERVItLS0vcC9YLmphdmEg
KGF0IGxpbmUgMTQpXG4iICsgCi0JCSIJQE5vbk51bGxCeURlZmF1bHQgT2JqZWN0IGhvbyhPYmpl
Y3QgbzIpIHtcbiIgKyAKLQkJIgleXl5eXl5eXl5eXl5eXl5eXlxuIiArIAotCQkiTnVsbG5lc3Mg
ZGVmYXVsdCBpcyByZWR1bmRhbnQgd2l0aCB0aGUgZ2xvYmFsIGRlZmF1bHRcbiIgKyAKLQkJIi0t
LS0tLS0tLS1cbiIgKyAKLQkJIjguIFdBUk5JTkcgaW4gLS0tT1VUUFVUX0RJUl9QTEFDRUhPTERF
Ui0tLS9wL1guamF2YSAoYXQgbGluZSAxNSlcbiIgKyAKLQkJIglpZiAobzIgPT0gbnVsbClcbiIg
KyAKLQkJIgkgICAgXl5cbiIgKyAKLQkJIk51bGwgY29tcGFyaXNvbiBhbHdheXMgeWllbGRzIGZh
bHNlOiBUaGUgdmFyaWFibGUgbzIgY2Fubm90IGJlIG51bGwgYXQgdGhpcyBsb2NhdGlvblxuIiAr
IAotCQkiLS0tLS0tLS0tLVxuIiArIAotCQkiOCBwcm9ibGVtcyAoOCB3YXJuaW5ncykiLCAKKwkJ
IjIgcHJvYmxlbXMgKDEgZXJyb3IsIDEgd2FybmluZykiLCAKIAkJdHJ1ZSk7CiB9CiAKZGlmZiAt
LWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBz
ZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0NvbXBpbGVySW52b2NhdGlvblRl
c3RzLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2Vj
bGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9Db21waWxlckludm9jYXRp
b25UZXN0cy5qYXZhCmluZGV4IDIzZGNiN2IuLmY4NmM1OGEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0
cy9jb21waWxlci9yZWdyZXNzaW9uL0NvbXBpbGVySW52b2NhdGlvblRlc3RzLmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9j
b3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vQ29tcGlsZXJJbnZvY2F0aW9uVGVzdHMuamF2
YQpAQCAtNjk4LDYgKzY5OCw4IEBACiAJCWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0KCJN
aXNzaW5nRW5jbG9zaW5nSW5zdGFuY2VGb3JDb25zdHJ1Y3RvckNhbGwiLCBuZXcgUHJvYmxlbUF0
dHJpYnV0ZXMoQ2F0ZWdvcml6ZWRQcm9ibGVtLkNBVF9UWVBFKSk7CiAJCWV4cGVjdGVkUHJvYmxl
bUF0dHJpYnV0ZXMucHV0KCJNaXNzaW5nRW51bUNvbnN0YW50Q2FzZSIsIG5ldyBQcm9ibGVtQXR0
cmlidXRlcyhDYXRlZ29yaXplZFByb2JsZW0uQ0FUX1BPVEVOVElBTF9QUk9HUkFNTUlOR19QUk9C
TEVNKSk7CiAJCWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0KCJNaXNzaW5nRW51bURlZmF1
bHRDYXNlIiwgbmV3IFByb2JsZW1BdHRyaWJ1dGVzKENhdGVnb3JpemVkUHJvYmxlbS5DQVRfUE9U
RU5USUFMX1BST0dSQU1NSU5HX1BST0JMRU0pKTsKKwkJZXhwZWN0ZWRQcm9ibGVtQXR0cmlidXRl
cy5wdXQoIk1pc3NpbmdOb25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbk9uUGFja2FnZSIsIG5ldyBQ
cm9ibGVtQXR0cmlidXRlcyhDYXRlZ29yaXplZFByb2JsZW0uQ0FUX1BPVEVOVElBTF9QUk9HUkFN
TUlOR19QUk9CTEVNKSk7CisJCWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0KCJNaXNzaW5n
Tm9uTnVsbEJ5RGVmYXVsdEFubm90YXRpb25PblR5cGUiLCBuZXcgUHJvYmxlbUF0dHJpYnV0ZXMo
Q2F0ZWdvcml6ZWRQcm9ibGVtLkNBVF9QT1RFTlRJQUxfUFJPR1JBTU1JTkdfUFJPQkxFTSkpOwog
CQlleHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiTWlzc2luZ092ZXJyaWRlQW5ub3RhdGlv
biIsIG5ldyBQcm9ibGVtQXR0cmlidXRlcyhDYXRlZ29yaXplZFByb2JsZW0uQ0FUX0NPREVfU1RZ
TEUpKTsKIAkJZXhwZWN0ZWRQcm9ibGVtQXR0cmlidXRlcy5wdXQoIk1pc3NpbmdPdmVycmlkZUFu
bm90YXRpb25Gb3JJbnRlcmZhY2VNZXRob2RJbXBsZW1lbnRhdGlvbiIsIG5ldyBQcm9ibGVtQXR0
cmlidXRlcyhDYXRlZ29yaXplZFByb2JsZW0uQ0FUX0NPREVfU1RZTEUpKTsKIAkJZXhwZWN0ZWRQ
cm9ibGVtQXR0cmlidXRlcy5wdXQoIk1pc3NpbmdSZXR1cm5UeXBlIiwgbmV3IFByb2JsZW1BdHRy
aWJ1dGVzKENhdGVnb3JpemVkUHJvYmxlbS5DQVRfVFlQRSkpOwpAQCAtMTM5Myw2ICsxMzk1LDgg
QEAKIAkJZXhwZWN0ZWRQcm9ibGVtQXR0cmlidXRlcy5wdXQoIk1pc3NpbmdFbmNsb3NpbmdJbnN0
YW5jZUZvckNvbnN0cnVjdG9yQ2FsbCIsIFNLSVApOwogCQlleHBlY3RlZFByb2JsZW1BdHRyaWJ1
dGVzLnB1dCgiTWlzc2luZ0VudW1Db25zdGFudENhc2UiLCBuZXcgUHJvYmxlbUF0dHJpYnV0ZXMo
SmF2YUNvcmUuQ09NUElMRVJfUEJfSU5DT01QTEVURV9FTlVNX1NXSVRDSCkpOwogCQlleHBlY3Rl
ZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiTWlzc2luZ0VudW1EZWZhdWx0Q2FzZSIsIG5ldyBQcm9i
bGVtQXR0cmlidXRlcyhKYXZhQ29yZS5DT01QSUxFUl9QQl9JTkNPTVBMRVRFX0VOVU1fU1dJVENI
KSk7CisJCWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0KCJNaXNzaW5nTm9uTnVsbEJ5RGVm
YXVsdEFubm90YXRpb25PblBhY2thZ2UiLCBuZXcgUHJvYmxlbUF0dHJpYnV0ZXMoSmF2YUNvcmUu
Q09NUElMRVJfUEJfTUlTU0lOR19OT05OVUxMX0JZX0RFRkFVTFRfQU5OT1RBVElPTikpOworCQll
eHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiTWlzc2luZ05vbk51bGxCeURlZmF1bHRBbm5v
dGF0aW9uT25UeXBlIiwgbmV3IFByb2JsZW1BdHRyaWJ1dGVzKEphdmFDb3JlLkNPTVBJTEVSX1BC
X01JU1NJTkdfTk9OTlVMTF9CWV9ERUZBVUxUX0FOTk9UQVRJT04pKTsKIAkJZXhwZWN0ZWRQcm9i
bGVtQXR0cmlidXRlcy5wdXQoIk1pc3NpbmdPdmVycmlkZUFubm90YXRpb24iLCBuZXcgUHJvYmxl
bUF0dHJpYnV0ZXMoSmF2YUNvcmUuQ09NUElMRVJfUEJfTUlTU0lOR19PVkVSUklERV9BTk5PVEFU
SU9OKSk7CiAJCWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0KCJNaXNzaW5nT3ZlcnJpZGVB
bm5vdGF0aW9uRm9ySW50ZXJmYWNlTWV0aG9kSW1wbGVtZW50YXRpb24iLCBuZXcgUHJvYmxlbUF0
dHJpYnV0ZXMoSmF2YUNvcmUuQ09NUElMRVJfUEJfTUlTU0lOR19PVkVSUklERV9BTk5PVEFUSU9O
KSk7CiAJCWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0KCJNaXNzaW5nUmV0dXJuVHlwZSIs
IFNLSVApOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIv
c3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbEFu
bm90YXRpb25UZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OdWxsQW5u
b3RhdGlvblRlc3QuamF2YQppbmRleCBiNjRlNWU4Li43MzhiZmRkIDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OdWxsQW5ub3RhdGlvblRlc3QuamF2YQorKysgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2Nv
cmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OdWxsQW5ub3RhdGlvblRlc3QuamF2YQpAQCAt
NTMsNyArNTMsNyBAQAogLy8gU3RhdGljIGluaXRpYWxpemVyIHRvIHNwZWNpZnkgdGVzdHMgc3Vi
c2V0IHVzaW5nIFRFU1RTXyogc3RhdGljIHZhcmlhYmxlcwogLy8gQWxsIHNwZWNpZmllZCB0ZXN0
cyB3aGljaCBkbyBub3QgYmVsb25nIHRvIHRoZSBjbGFzcyBhcmUgc2tpcHBlZC4uLgogc3RhdGlj
IHsKLS8vCQlURVNUU19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7ICJ0ZXN0QnVnMzcyMDExIiB9Owor
Ly8JCVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1tdIHsgInRlc3RfbWlzc2luZ19kZWZhdWx0X2Fu
bm90YXRpb25fMDMiIH07CiAvLwkJVEVTVFNfTlVNQkVSUyA9IG5ldyBpbnRbXSB7IDU2MSB9Owog
Ly8JCVRFU1RTX1JBTkdFID0gbmV3IGludFtdIHsgMSwgMjA0OSB9OwogfQpAQCAtMTkxNCwyOSAr
MTkxNCw2IEBACiAJCSItLS0tLS0tLS0tXG4iLAogCQlKYXZhY1Rlc3RPcHRpb25zLkV4Y3VzZS5F
Y2xpcHNlV2FybmluZ0NvbmZpZ3VyZWRBc0Vycm9yKTsKIH0KLS8vIHVzaW5nIG51bGxuZXNzIGRl
ZmF1bHRpbmcgdG8gbm9ubnVsbCwgbWlzc2luZyBhbm5vdGF0aW9uIHR5cGVzLCBubyBsb25nZXIg
YSBwcm9ibGVtCi1wdWJsaWMgdm9pZCB0ZXN0X2Fubm90YXRpb25faW1wb3J0XzAwNygpIHsKLQlN
YXAgY3VzdG9tT3B0aW9ucyA9IGdldENvbXBpbGVyT3B0aW9ucygpOwotCWN1c3RvbU9wdGlvbnMu
cHV0KEphdmFDb3JlLkNPTVBJTEVSX1BCX05VTExfU1BFQ0lGSUNBVElPTl9JTlNVRkZJQ0lFTlRf
SU5GTywgSmF2YUNvcmUuRVJST1IpOwotCWN1c3RvbU9wdGlvbnMucHV0KEphdmFDb3JlLkNPTVBJ
TEVSX05VTExBQkxFX0FOTk9UQVRJT05fTkFNRSwgIm9yZy5mb28uTWF5QmVOdWxsIik7Ci0JY3Vz
dG9tT3B0aW9ucy5wdXQoSmF2YUNvcmUuQ09NUElMRVJfTk9OTlVMTF9BTk5PVEFUSU9OX05BTUUs
ICJvcmcuZm9vLk11c3ROb3RCZU51bGwiKTsKLQljdXN0b21PcHRpb25zLnB1dChKYXZhQ29yZS5D
T01QSUxFUl9OT05OVUxMX0lTX0RFRkFVTFQsIEphdmFDb3JlLkVOQUJMRUQpOwotCXJ1bkNvbmZv
cm1UZXN0V2l0aExpYnMoCi0JCW5ldyBTdHJpbmdbXSB7Ci0JCQkiTGliLmphdmEiLAotCQkJInB1
YmxpYyBjbGFzcyBMaWIge1xuIiArCi0JCQkiICAgIE9iamVjdCBnZXRPYmplY3QoKSB7IHJldHVy
biBuZXcgT2JqZWN0KCk7IH1cbiIgKwotCQkJIn1cbiIsCi0JCQkiWC5qYXZhIiwKLQkJCSJwdWJs
aWMgY2xhc3MgWCB7XG4iICsKLQkJCSIgICAgT2JqZWN0IGdldE9iamVjdChMaWIgbCkge1xuIiAr
Ci0JCQkiICAgICAgICByZXR1cm4gbC5nZXRPYmplY3QoKTtcbiIgKwotCQkJIiAgICB9XG4iICsK
LQkJCSJ9XG4iCi0JCX0sCi0JCWN1c3RvbU9wdGlvbnMsCi0JCSIiKTsKLX0KIAogLy8gYSBudWxs
IGFubm90YXRpb24gaXMgaWxsZWdhbGx5IHVzZWQgb24gYSBjbGFzczoKIHB1YmxpYyB2b2lkIHRl
c3RfaWxsZWdhbF9hbm5vdGF0aW9uXzAwMSgpIHsKQEAgLTI0MDksNyArMjM4Niw3IEBACiBwdWJs
aWMgdm9pZCBfdGVzdF9kZWZhdWx0X251bGxuZXNzXzAwNygpIHsKIAlNYXAgY3VzdG9tT3B0aW9u
cyA9IGdldENvbXBpbGVyT3B0aW9ucygpOwogLy8JY3VzdG9tT3B0aW9ucy5wdXQoQ29tcGlsZXJP
cHRpb25zLk9QVElPTl9SZXBvcnRQb3RlbnRpYWxOdWxsU3BlY1Zpb2xhdGlvbiwgSmF2YUNvcmUu
RVJST1IpOwotCWN1c3RvbU9wdGlvbnMucHV0KEphdmFDb3JlLkNPTVBJTEVSX05PTk5VTExfSVNf
REVGQVVMVCwgSmF2YUNvcmUuRU5BQkxFRCk7CisvLwljdXN0b21PcHRpb25zLnB1dChKYXZhQ29y
ZS5DT01QSUxFUl9OT05OVUxMX0lTX0RFRkFVTFQsIEphdmFDb3JlLkVOQUJMRUQpOwogCXJ1bk5l
Z2F0aXZlVGVzdFdpdGhMaWJzKAogCQluZXcgU3RyaW5nW10gewogCQkJIlguamF2YSIsCkBAIC0y
ODYwLDQ4ICsyODM3LDc1IEBACiAJCSItLS0tLS0tLS0tXG4iKTsKIH0KIAotLy8gcmVkdW5kYW50
IGRlZmF1bHQgYW5ub3RhdGlvbnMgLSBwYWNrYWdlIC8gY2xhc3MgLyBtZXRob2QgdnMgZ2xvYmFs
IGRlZmF1bHQKLS8vIERJU0FCTEVEIGR1ZSB0byBkeXNmdW5jdGlvbmFsIGdsb2JhbCBkZWZhdWx0
IGFmdGVyIEJ1ZyAzNjYwNjMgLSBDb21waWxlciBzaG91bGQgbm90IGFkZCBzeW50aGV0aWMgQE5v
bk51bGwgYW5ub3RhdGlvbnMKLXB1YmxpYyB2b2lkIF90ZXN0X3JlZHVuZGFudF9hbm5vdGF0aW9u
XzAzKCkgeworLy8gdGVzdCBtaXNzaW5nIGRlZmF1bHQgbnVsbG5lc3MgYW5ub3RhdGlvbiBmb3Ig
dHlwZXMgaW4gZGVmYXVsdCBwYWNrYWdlCitwdWJsaWMgdm9pZCB0ZXN0X21pc3NpbmdfZGVmYXVs
dF9hbm5vdGF0aW9uXzAxKCkgewogCU1hcCBjdXN0b21PcHRpb25zID0gZ2V0Q29tcGlsZXJPcHRp
b25zKCk7Ci0JY3VzdG9tT3B0aW9ucy5wdXQoSmF2YUNvcmUuQ09NUElMRVJfTk9OTlVMTF9JU19E
RUZBVUxULCBKYXZhQ29yZS5FTkFCTEVEKTsKLQlydW5Db25mb3JtVGVzdFdpdGhMaWJzKAorCWN1
c3RvbU9wdGlvbnMucHV0KEphdmFDb3JlLkNPTVBJTEVSX1BCX01JU1NJTkdfTk9OTlVMTF9CWV9E
RUZBVUxUX0FOTk9UQVRJT04sIEphdmFDb3JlLkVSUk9SKTsKKwlydW5OZWdhdGl2ZVRlc3RXaXRo
TGlicygKIAkJbmV3IFN0cmluZ1tdIHsKKwkJCSJMaWIuamF2YSIsCisJCQkicHVibGljIGNsYXNz
IExpYiB7XG4iICsKKwkJCSIgICAgT2JqZWN0IGdldE9iamVjdCgpIHsgcmV0dXJuIG5ldyBPYmpl
Y3QoKTsgfVxuIiArCisJCQkifVxuIiwKKwkJCSJYLmphdmEiLAorCQkJInB1YmxpYyBjbGFzcyBY
IHtcbiIgKworCQkJIgkgY2xhc3MgWElubmVye31cbiIgKyAgLy8gZG9uJ3Qgd2FybiBmb3IgaW5u
ZXIgdHlwZXMKKwkJCSIgICAgT2JqZWN0IGdldE9iamVjdChMaWIgbCkge1xuIiArCisJCQkiICAg
ICAgICByZXR1cm4gbC5nZXRPYmplY3QoKTtcbiIgKworCQkJIiAgICB9XG4iICsKKwkJCSJ9XG4i
CisJCX0sCisJCWN1c3RvbU9wdGlvbnMsCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJP
UiBpbiBMaWIuamF2YSAoYXQgbGluZSAxKVxuIiArIAorCQkiCXB1YmxpYyBjbGFzcyBMaWIge1xu
IiArIAorCQkiCSAgICAgICAgICAgICBeXl5cbiIgKyAKKwkJIkEgZGVmYXVsdCBudWxsbmVzcyBh
bm5vdGF0aW9uIGhhcyBub3QgYmVlbiBzcGVjaWZpZWQgZm9yIHRoZSB0eXBlIExpYlxuIiArIAor
CQkiLS0tLS0tLS0tLVxuIiArIAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiMS4gRVJST1IgaW4g
WC5qYXZhIChhdCBsaW5lIDEpXG4iICsgCisJCSIJcHVibGljIGNsYXNzIFgge1xuIiArIAorCQki
CSAgICAgICAgICAgICBeXG4iICsgCisJCSJBIGRlZmF1bHQgbnVsbG5lc3MgYW5ub3RhdGlvbiBo
YXMgbm90IGJlZW4gc3BlY2lmaWVkIGZvciB0aGUgdHlwZSBYXG4iICsgCisJCSItLS0tLS0tLS0t
XG4iKTsKK30KKworLy8gdGVzdCBtaXNzaW5nIGRlZmF1bHQgbnVsbG5lc3MgYW5ub3RhdGlvbiBm
b3IgYSBwYWNrYWdlIHdpdGggcGFja2FnZS1pbmZvCitwdWJsaWMgdm9pZCB0ZXN0X21pc3Npbmdf
ZGVmYXVsdF9hbm5vdGF0aW9uXzAyKCkgeworCU1hcCBjdXN0b21PcHRpb25zID0gZ2V0Q29tcGls
ZXJPcHRpb25zKCk7CisJY3VzdG9tT3B0aW9ucy5wdXQoSmF2YUNvcmUuQ09NUElMRVJfUEJfTUlT
U0lOR19OT05OVUxMX0JZX0RFRkFVTFRfQU5OT1RBVElPTiwgSmF2YUNvcmUuRVJST1IpOworCXJ1
bk5lZ2F0aXZlVGVzdFdpdGhMaWJzKAorCQluZXcgU3RyaW5nW10geworCQkJInAyL3BhY2thZ2Ut
aW5mby5qYXZhIiwKKwkJCSJwYWNrYWdlIHAyO1xuIiwKIAkJCSJwMi9ZLmphdmEiLAogCQkJInBh
Y2thZ2UgcDI7XG4iICsKIAkJCSJpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uKjtc
biIgKwogCQkJIkBOb25OdWxsQnlEZWZhdWx0XG4iICsKIAkJCSJwdWJsaWMgY2xhc3MgWSB7XG4i
ICsKLQkJCSIgICAgQE5vbk51bGxCeURlZmF1bHQgdm9pZCBmb28oKSB7fVxuIiArCi0JCQkifVxu
IiArCi0JCQkiY2xhc3MgWiB7XG4iICsKLQkJCSIgICAgQE5vbk51bGxCeURlZmF1bHQgdm9pZCBi
YXIoKSB7fVxuIiArCisJCQkiICAgdm9pZCBmb28oKSB7fVxuIiArCiAJCQkifVxuIiwKIAkJCSJw
My9wYWNrYWdlLWluZm8uamF2YSIsCi0JCQkiQG9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uLk5v
bk51bGxCeURlZmF1bHQgcGFja2FnZSBwMztcbiIKKwkJCSJAb3JnLmVjbGlwc2UuamR0LmFubm90
YXRpb24uTm9uTnVsbEJ5RGVmYXVsdCBwYWNrYWdlIHAzO1xuIiwKKwkJCSJwMy9aLmphdmEiLAor
CQkJInBhY2thZ2UgcDM7XG4iICsKKwkJCSJpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmFubm90YXRp
b24uKjtcbiIgKworCQkJInB1YmxpYyBjbGFzcyBaIHtcbiIgKworCQkJIiAgICBATm9uTnVsbEJ5
RGVmYXVsdCB2b2lkIGJhcigpIHt9XG4iICsKKwkJCSJ9XG4iLAogCQl9LAogCQljdXN0b21PcHRp
b25zLAogCQkiLS0tLS0tLS0tLVxuIiArIAotCQkiMS4gV0FSTklORyBpbiBwMlxcWS5qYXZhIChh
dCBsaW5lIDMpXG4iICsKLQkJIglATm9uTnVsbEJ5RGVmYXVsdFxuIiArCi0JCSIJXl5eXl5eXl5e
Xl5eXl5eXl5cbiIgKwotCQkiTnVsbG5lc3MgZGVmYXVsdCBpcyByZWR1bmRhbnQgd2l0aCB0aGUg
Z2xvYmFsIGRlZmF1bHRcbiIgKwotCQkiLS0tLS0tLS0tLVxuIiArCi0JCSIyLiBXQVJOSU5HIGlu
IHAyXFxZLmphdmEgKGF0IGxpbmUgNSlcbiIgKwotCQkiCUBOb25OdWxsQnlEZWZhdWx0IHZvaWQg
Zm9vKCkge31cbiIgKwotCQkiCV5eXl5eXl5eXl5eXl5eXl5eXG4iICsKLQkJIk51bGxuZXNzIGRl
ZmF1bHQgaXMgcmVkdW5kYW50IHdpdGggYSBkZWZhdWx0IHNwZWNpZmllZCBmb3IgdGhlIGVuY2xv
c2luZyB0eXBlIFlcbiIgKwotCQkiLS0tLS0tLS0tLVxuIiArCi0JCSIzLiBXQVJOSU5HIGluIHAy
XFxZLmphdmEgKGF0IGxpbmUgOClcbiIgKwotCQkiCUBOb25OdWxsQnlEZWZhdWx0IHZvaWQgYmFy
KCkge31cbiIgKwotCQkiCV5eXl5eXl5eXl5eXl5eXl5eXG4iICsKLQkJIk51bGxuZXNzIGRlZmF1
bHQgaXMgcmVkdW5kYW50IHdpdGggdGhlIGdsb2JhbCBkZWZhdWx0XG4iICsKLQkJIi0tLS0tLS0t
LS1cbiIgKwotCQkiLS0tLS0tLS0tLVxuIiArCi0JCSIxLiBXQVJOSU5HIGluIHAzXFxwYWNrYWdl
LWluZm8uamF2YSAoYXQgbGluZSAxKVxuIiArCi0JCSIJQG9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0
aW9uLk5vbk51bGxCeURlZmF1bHQgcGFja2FnZSBwMztcbiIgKwotCQkiCV5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsKLQkJIk51bGxuZXNzIGRlZmF1bHQg
aXMgcmVkdW5kYW50IHdpdGggdGhlIGdsb2JhbCBkZWZhdWx0XG4iICsKKwkJIjEuIEVSUk9SIGlu
IHAyXFxwYWNrYWdlLWluZm8uamF2YSAoYXQgbGluZSAxKVxuIiArIAorCQkiCXBhY2thZ2UgcDI7
XG4iICsgCisJCSIJICAgICAgICBeXlxuIiArIAorCQkiQSBkZWZhdWx0IG51bGxuZXNzIGFubm90
YXRpb24gaGFzIG5vdCBiZWVuIHNwZWNpZmllZCBmb3IgdGhlIHBhY2thZ2UgcDJcbiIgKyAKKwkJ
Ii0tLS0tLS0tLS1cbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjEuIFdBUk5JTkcgaW4g
cDNcXFouamF2YSAoYXQgbGluZSA0KVxuIiArIAorCQkiCUBOb25OdWxsQnlEZWZhdWx0IHZvaWQg
YmFyKCkge31cbiIgKyAKKwkJIgleXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkiTnVsbG5lc3Mg
ZGVmYXVsdCBpcyByZWR1bmRhbnQgd2l0aCBhIGRlZmF1bHQgc3BlY2lmaWVkIGZvciB0aGUgZW5j
bG9zaW5nIHBhY2thZ2UgcDNcbiIgKyAKIAkJIi0tLS0tLS0tLS1cbiIpOwogfQogCkBAIC0zMDkw
LDggKzMwOTQsNiBAQAogLy8gYSBub25udWxsIHZhcmlhYmxlIGlzIGRlcmVmZXJlbmNlZCBpbiBh
IGZpbmFsbHkgYmxvY2sgaW5zaWRlIGEgbG9vcAogcHVibGljIHZvaWQgdGVzdF9ub25udWxsX3Zh
cl9pbl9jb25zdHJvbF9zdHJ1Y3R1cmVfMygpIHsKIAlNYXAgY3VzdG9tT3B0aW9ucyA9IGdldENv
bXBpbGVyT3B0aW9ucygpOwotLy8JY3VzdG9tT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9Q
VElPTl9SZXBvcnRQb3RlbnRpYWxOdWxsU3BlY1Zpb2xhdGlvbiwgSmF2YUNvcmUuRVJST1IpOwot
CWN1c3RvbU9wdGlvbnMucHV0KEphdmFDb3JlLkNPTVBJTEVSX05PTk5VTExfSVNfREVGQVVMVCwg
SmF2YUNvcmUuRU5BQkxFRCk7CiAJY3VzdG9tT3B0aW9ucy5wdXQoSmF2YUNvcmUuQ09NUElMRVJf
UEJfUkVEVU5EQU5UX05VTExfQU5OT1RBVElPTiwgSmF2YUNvcmUuSUdOT1JFKTsKIAlydW5OZWdh
dGl2ZVRlc3RXaXRoTGlicygKIAkJbmV3IFN0cmluZ1tdIHsKQEAgLTMyNzEsOCArMzI3Myw2IEBA
CiB9CiBwdWJsaWMgdm9pZCB0ZXN0X2Fzc2lnbm1lbnRfZXhwcmVzc2lvbl8xKCkgewogCU1hcCBj
dXN0b21PcHRpb25zID0gZ2V0Q29tcGlsZXJPcHRpb25zKCk7Ci0vLwljdXN0b21PcHRpb25zLnB1
dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydFBvdGVudGlhbE51bGxTcGVjVmlvbGF0aW9u
LCBKYXZhQ29yZS5FUlJPUik7Ci0JY3VzdG9tT3B0aW9ucy5wdXQoSmF2YUNvcmUuQ09NUElMRVJf
Tk9OTlVMTF9JU19ERUZBVUxULCBKYXZhQ29yZS5FTkFCTEVEKTsKIAljdXN0b21PcHRpb25zLnB1
dChKYXZhQ29yZS5DT01QSUxFUl9QQl9SRURVTkRBTlRfTlVMTF9DSEVDSywgSmF2YUNvcmUuRVJS
T1IpOwogCXJ1bkNvbmZvcm1UZXN0V2l0aExpYnMoCiAJCW5ldyBTdHJpbmdbXSB7CmRpZmYgLS1n
aXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0
L2NvcmUvdGVzdHMvbW9kZWwvTnVsbEFubm90YXRpb25Nb2RlbFRlc3RzLmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
bW9kZWwvTnVsbEFubm90YXRpb25Nb2RlbFRlc3RzLmphdmEKaW5kZXggODJlNTQyMi4uMGI3OTQ0
YSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21vZGVsL051bGxBbm5vdGF0aW9uTW9kZWxUZXN0cy5qYXZh
CisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9tb2RlbC9OdWxsQW5ub3RhdGlvbk1vZGVsVGVzdHMuamF2YQpAQCAtMzAs
NiArMzAsNyBAQAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLklKYXZhTW9kZWxNYXJrZXI7
CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuSUphdmFQcm9qZWN0OwogaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5jb3JlLkphdmFDb3JlOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLkph
dmFNb2RlbEV4Y2VwdGlvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5J
UHJvYmxlbTsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQVNUOwogaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5BU1RQYXJzZXI7CkBAIC01Myw3ICs1NCw3IEBACiAJfQog
CiAJc3RhdGljIHsKLS8vCQlURVNUU19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7ICJ0ZXN0TWlzc2lu
Z0Fubm90YXRpb241IiB9OworLy8JCVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1tdIHsgInRlc3RD
b252ZXJ0ZWRTb3VyY2VUeXBlMSIgfTsKIAl9CiAKIAlwdWJsaWMgdm9pZCBzZXRVcCgpIHRocm93
cyBFeGNlcHRpb24gewpAQCAtNjcsMTggKzY4LDE3IEBACiAJCXJldHVybiBGaWxlTG9jYXRvci50
b0ZpbGVVUkwobGliRW50cnkpLmdldFBhdGgoKTsKIAl9CiAKLQkvLyBESVNBQkxFRCBkdWUgdG8g
ZHlzZnVuY3Rpb25hbCBnbG9iYWwgZGVmYXVsdCBhZnRlciBCdWcgMzY2MDYzIC0gQ29tcGlsZXIg
c2hvdWxkIG5vdCBhZGQgc3ludGhldGljIEBOb25OdWxsIGFubm90YXRpb25zCi0JcHVibGljIHZv
aWQgX3Rlc3RDb252ZXJ0ZWRTb3VyY2VUeXBlMSgpIHRocm93cyBDb3JlRXhjZXB0aW9uLCBJbnRl
cnJ1cHRlZEV4Y2VwdGlvbiB7CisJcHVibGljIHZvaWQgdGVzdENvbnZlcnRlZFNvdXJjZVR5cGUx
KCkgdGhyb3dzIENvcmVFeGNlcHRpb24sIEludGVycnVwdGVkRXhjZXB0aW9uIHsKICAgICAJdHJ5
IHsKIAkJCS8vIFJlc291cmNlcyBjcmVhdGlvbgogCQkJSUphdmFQcm9qZWN0IHAgPSBjcmVhdGVK
YXZhUHJvamVjdCgiUCIsIG5ldyBTdHJpbmdbXSB7IiJ9LCBuZXcgU3RyaW5nW10geyJKQ0wxNV9M
SUIiLCB0aGlzLkFOTk9UQVRJT05fTElCfSwgImJpbiIsICIxLjUiKTsKIAkJCXAuc2V0T3B0aW9u
KEphdmFDb3JlLkNPTVBJTEVSX0FOTk9UQVRJT05fTlVMTF9BTkFMWVNJUywgSmF2YUNvcmUuRU5B
QkxFRCk7Ci0JCQlwLnNldE9wdGlvbihKYXZhQ29yZS5DT01QSUxFUl9OT05OVUxMX0lTX0RFRkFV
TFQsIEphdmFDb3JlLkVOQUJMRUQpOwogCiAJCQl0aGlzLmNyZWF0ZUZvbGRlcigiL1AvcDEiKTsK
IAkJCVN0cmluZyBjMVNvdXJjZVN0cmluZyA9CiAJCQkJInBhY2thZ2UgcDE7XG4iICsKIAkJCQki
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uLio7XG4iICsKKwkJCQkiQG9yZy5lY2xp
cHNlLmpkdC5hbm5vdGF0aW9uLk5vbk51bGxCeURlZmF1bHRcbiIgKwogCQkJCSJwdWJsaWMgY2xh
c3MgQzEge1xuIiArCiAJCQkJIgkgcHVibGljIFN0cmluZyBmb28oQE51bGxhYmxlIE9iamVjdCBh
cmcpIHtcbiIgKyAvLyB0aGlzIGlzIGNvbnN1bWVkIHZpYSBTb3VyY2VUeXBlQ29udmVydGVyCiAJ
CQkJIgkJcmV0dXJuIGFyZyA9PSBudWxsID8gXCJcIiA6IGFyZy50b1N0cmluZygpO1xuIiArCkBA
IC05MSw2ICs5MSw3IEBACiAJCQl0aGlzLmNyZWF0ZUZvbGRlcigiL1AvcDIiKTsKIAkJCVN0cmlu
ZyBjMlNvdXJjZVN0cmluZyA9CiAJCQkJInBhY2thZ2UgcDI7XG4iICsKKwkJCQkiQG9yZy5lY2xp
cHNlLmpkdC5hbm5vdGF0aW9uLk5vbk51bGxCeURlZmF1bHRcbiIgKwogCQkJCSJwdWJsaWMgY2xh
c3MgQzIge1xuIiArCiAJCQkJIgkgU3RyaW5nIGJhcihwMS5DMSBjLCBDMiBjMikgeztcbiIgKwog
CQkJCSIgICAgICAgIHJldHVybiBjLmZvbyhudWxsKTtcbiIgKyAvLyBkb24ndCBjb21wbGFpbiBk
ZXNwaXRlIGRlZmF1bHQgbm9ubnVsbCwgZm9vIGhhcyBleHBsaWNpdCBATnVsbGFibGUKQEAgLTEw
OSw3ICsxMTAsNyBAQAogCQkJZ2V0Q29tcGlsYXRpb25Vbml0KCIvUC9wMi9DMi5qYXZhIikuZ2V0
V29ya2luZ0NvcHkodGhpcy53Y093bmVyLCBudWxsKTsKIAogCQkJYXNzZXJ0UHJvYmxlbXMoIlVu
ZXhwZWN0ZWQgcHJvYmxlbXMiLCAiLS0tLS0tLS0tLVxuIiArCi0JCQkJCSIxLiBXQVJOSU5HIGlu
IC9QL3AyL0MyLmphdmEgKGF0IGxpbmUgNylcbiIgKworCQkJCQkiMS4gV0FSTklORyBpbiAvUC9w
Mi9DMi5qYXZhIChhdCBsaW5lIDgpXG4iICsKIAkJCQkJIglyZXR1cm4gYXJnID09IG51bGwgPyBu
dWxsIDogYXJnLnRvU3RyaW5nKCk7XG4iICsKIAkJCQkJIgkgICAgICAgXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5cbiIgKwogCQkJCQkiUG90ZW50aWFsIHR5cGUgbWlzbWF0Y2g6
IHJlcXVpcmVkIFwnQE5vbk51bGwgU3RyaW5nXCcgYnV0IG51bGxuZXNzIG9mIHRoZSBwcm92aWRl
ZCB2YWx1ZSBpcyB1bmtub3duXG4iICsKQEAgLTExOSwyMSArMTIwLDIwIEBACiAgICAgCX0KICAg
ICB9CiAKLQkvLyBESVNBQkxFRCBkdWUgdG8gZHlzZnVuY3Rpb25hbCBnbG9iYWwgZGVmYXVsdCBh
ZnRlciBCdWcgMzY2MDYzIC0gQ29tcGlsZXIgc2hvdWxkIG5vdCBhZGQgc3ludGhldGljIEBOb25O
dWxsIGFubm90YXRpb25zCi0JcHVibGljIHZvaWQgX3Rlc3RCaW5hcnlUeXBlMSgpIHRocm93cyBD
b3JlRXhjZXB0aW9uLCBJbnRlcnJ1cHRlZEV4Y2VwdGlvbiwgSU9FeGNlcHRpb24geworCXB1Ymxp
YyB2b2lkIHRlc3RCaW5hcnlUeXBlMSgpIHRocm93cyBDb3JlRXhjZXB0aW9uLCBJbnRlcnJ1cHRl
ZEV4Y2VwdGlvbiwgSU9FeGNlcHRpb24gewogICAgIAl0cnkgewogCQkJLy8gUmVzb3VyY2VzIGNy
ZWF0aW9uCiAJCQlJSmF2YVByb2plY3QgcCA9IGNyZWF0ZUphdmFQcm9qZWN0KCJQIiwgbmV3IFN0
cmluZ1tdIHsiIn0sCiAJCQkJCQkJCQkJCSAgIG5ldyBTdHJpbmdbXSB7IkpDTDE1X0xJQiIsIHRo
aXMuQU5OT1RBVElPTl9MSUIsIHRlc3RKYXJQYXRoKCJleGFtcGxlLmphciIpfSwKIAkJCQkJCQkJ
CQkJICAgImJpbiIsICIxLjUiKTsKIAkJCXAuc2V0T3B0aW9uKEphdmFDb3JlLkNPTVBJTEVSX0FO
Tk9UQVRJT05fTlVMTF9BTkFMWVNJUywgSmF2YUNvcmUuRU5BQkxFRCk7Ci0JCQlwLnNldE9wdGlv
bihKYXZhQ29yZS5DT01QSUxFUl9OT05OVUxMX0lTX0RFRkFVTFQsIEphdmFDb3JlLkVOQUJMRUQp
OwogCiAJCQkvLyBleGFtcGxlLmphciBjb250YWlucyBwMS9DMS5qYXZhIGp1c3QgbGlrZSB0ZXN0
Q29udmVydGVkU291cmNlVHlwZTEoKQogCiAJCQl0aGlzLmNyZWF0ZUZvbGRlcigiL1AvcDIiKTsK
IAkJCVN0cmluZyBjMlNvdXJjZVN0cmluZyA9CiAJCQkJInBhY2thZ2UgcDI7XG4iICsKKwkJCQki
QG9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uLk5vbk51bGxCeURlZmF1bHRcbiIgKwogCQkJCSJw
dWJsaWMgY2xhc3MgQzIge1xuIiArCiAJCQkJIgkgU3RyaW5nIGJhcihwMS5DMSBjKSB7O1xuIiAr
CiAJCQkJIiAgICAgICAgcmV0dXJuIGMuZm9vKG51bGwpO1xuIiArIC8vIGRvbid0IGNvbXBsYWlu
IGRlc3BpdGUgZGVmYXVsdCBub25udWxsLCBmb28gaGFzIGV4cGxpY2l0IEBOdWxsYWJsZQpAQCAt
MTUyLDcgKzE1Miw3IEBACiAJCQlnZXRDb21waWxhdGlvblVuaXQoIi9QL3AyL0MyLmphdmEiKS5n
ZXRXb3JraW5nQ29weSh0aGlzLndjT3duZXIsIG51bGwpOwogCiAJCQlhc3NlcnRQcm9ibGVtcygi
VW5leHBlY3RlZCBwcm9ibGVtcyIsICItLS0tLS0tLS0tXG4iICsKLQkJCQkJIjEuIFdBUk5JTkcg
aW4gL1AvcDIvQzIuamF2YSAoYXQgbGluZSA3KVxuIiArCisJCQkJCSIxLiBXQVJOSU5HIGluIC9Q
L3AyL0MyLmphdmEgKGF0IGxpbmUgOClcbiIgKwogCQkJCQkiCXJldHVybiBhcmcgPT0gbnVsbCA/
IG51bGwgOiBhcmcudG9TdHJpbmcoKTtcbiIgKwogCQkJCQkiCSAgICAgICBeXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArCiAJCQkJCSJQb3RlbnRpYWwgdHlwZSBtaXNtYXRj
aDogcmVxdWlyZWQgXCdATm9uTnVsbCBTdHJpbmdcJyBidXQgbnVsbG5lc3Mgb2YgdGhlIHByb3Zp
ZGVkIHZhbHVlIGlzIHVua25vd25cbiIgKwpAQCAtNDg2LDQgKzQ4NiwyOCBAQAogICAgIAkJZGVs
ZXRlUHJvamVjdCgiUCIpOwogICAgIAl9CiAJfQorCS8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9y
Zy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNzIwMTIKKwkvLyBubyBwcm9ibGVtIHNob3VsZCBiZSBj
cmVhdGVkIGZvciBhIGNvbXBpbGF0aW9uIHVuaXQgaW4gYSBwYWNrYWdlIG1pc3NpbmcgcGFja2Fn
ZS1pbmZvIHdoZW4gdGhlIHdhcm5pbmcgaXMgZW5hYmxlZAorCXB1YmxpYyB2b2lkIHRlc3RCdWcz
NzIwMTIoKSB0aHJvd3MgSmF2YU1vZGVsRXhjZXB0aW9uLCBJT0V4Y2VwdGlvbiwgQ29yZUV4Y2Vw
dGlvbiwgSW50ZXJydXB0ZWRFeGNlcHRpb24geworCQl0cnkgeworCQkJLy8gUmVzb3VyY2VzIGNy
ZWF0aW9uCisJCQlJSmF2YVByb2plY3QgcCA9IGNyZWF0ZUphdmFQcm9qZWN0KCJQIiwgbmV3IFN0
cmluZ1tdIHsiIn0sIG5ldyBTdHJpbmdbXSB7IkpDTDE1X0xJQiIsIHRoaXMuQU5OT1RBVElPTl9M
SUJ9LCAiYmluIiwgIjEuNSIpOworCQkJcC5zZXRPcHRpb24oSmF2YUNvcmUuQ09NUElMRVJfQU5O
T1RBVElPTl9OVUxMX0FOQUxZU0lTLCBKYXZhQ29yZS5FTkFCTEVEKTsKKwkJCXAuc2V0T3B0aW9u
KEphdmFDb3JlLkNPTVBJTEVSX05PTk5VTExfQU5OT1RBVElPTl9OQU1FLCAiaW4udmFsaWQiKTsK
KwkJCXAuc2V0T3B0aW9uKEphdmFDb3JlLkNPTVBJTEVSX1BCX01JU1NJTkdfTk9OTlVMTF9CWV9E
RUZBVUxUX0FOTk9UQVRJT04sIEphdmFDb3JlLkVSUk9SKTsKKworCQkJdGhpcy5jcmVhdGVGb2xk
ZXIoIi9QL3AxIik7CisJCQlTdHJpbmcgYzFTb3VyY2VTdHJpbmcgPQorCQkJCSJwYWNrYWdlIHAx
O1xuIiArCisJCQkJInB1YmxpYyBjbGFzcyBDMSB7XG4iICsKKwkJCQkiCSBwdWJsaWMgU3RyaW5n
IGZvbyhPYmplY3QgYXJnKSB7XG4iICsKKwkJCQkiCQlyZXR1cm4gYXJnID09IG51bGwgPyBcIlwi
IDogYXJnLnRvU3RyaW5nKCk7XG4iICsKKwkJCQkiCSB9XG4iICsKKwkJCQkifVxuIjsKKworCQkJ
YXNzZXJ0Tm9Qcm9ibGVtKGMxU291cmNlU3RyaW5nLnRvQ2hhckFycmF5KCksIGdldENvbXBpbGF0
aW9uVW5pdCgiL1AvcDEvQzEuamF2YSIpKTsKKyAgICAJfSBmaW5hbGx5IHsKKyAgICAJCWRlbGV0
ZVByb2plY3QoIlAiKTsKKyAgICAJfQorCX0KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2JhdGNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9iYXRjaC9NYWlu
LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9iYXRjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYmF0Y2gvTWFpbi5qYXZhCmluZGV4IDk3YTk2NTQuLmY1MWEyYmMgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2JhdGNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9iYXRjaC9NYWluLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvYmF0
Y2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2JhdGNoL01haW4uamF2YQpAQCAt
MjQxMiw4ICsyNDEyLDggQEAKIAkJCQkJbW9kZSA9IElOU0lERV9XQVJOSU5HU19QUk9QRVJUSUVT
OwogCQkJCQljb250aW51ZTsKIAkJCQl9Ci0JCQkJaWYgKGN1cnJlbnRBcmcuZXF1YWxzKCItbm9u
TnVsbEJ5RGVmYXVsdCIpKSB7IC8vJE5PTi1OTFMtMSQKLQkJCQkJdGhpcy5vcHRpb25zLnB1dChD
b21waWxlck9wdGlvbnMuT1BUSU9OX05vbk51bGxJc0RlZmF1bHQsIENvbXBpbGVyT3B0aW9ucy5F
TkFCTEVEKTsKKwkJCQlpZiAoY3VycmVudEFyZy5lcXVhbHMoIi1taXNzaW5nTnVsbERlZmF1bHQi
KSkgeyAvLyROT04tTkxTLTEkCisJCQkJCXRoaXMub3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25z
Lk9QVElPTl9SZXBvcnRNaXNzaW5nTm9uTnVsbEJ5RGVmYXVsdEFubm90YXRpb24sIENvbXBpbGVy
T3B0aW9ucy5XQVJOSU5HKTsKIAkJCQkJY29udGludWU7CiAJCQkJfQogCQkJCWJyZWFrOwpkaWZm
IC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvYmF0Y2gvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2JhdGNoL21lc3NhZ2VzLnByb3BlcnRpZXMgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9iYXRjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYmF0Y2gvbWVzc2Fn
ZXMucHJvcGVydGllcwppbmRleCBiMWNiZjg5Li5lZWJlM2Y5IDEwMDY0NAotLS0gYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9iYXRjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYmF0
Y2gvbWVzc2FnZXMucHJvcGVydGllcworKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9iYXRjaC9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYmF0Y2gvbWVzc2FnZXMucHJvcGVydGll
cwpAQCAtMjU1LDggKzI1NSw3IEBACiBcICAgIC1lbmFibGVKYXZhZG9jICAgICBjb25zaWRlciBy
ZWZlcmVuY2VzIGluIGphdmFkb2NcblwKIFwgICAgLVhlbWFjcyAgICAgICAgICAgIHVzZWQgdG8g
ZW5hYmxlIGVtYWNzLXN0eWxlIG91dHB1dCBpbiB0aGUgY29uc29sZS5cblwKIFwgICAgICAgICAg
ICAgICAgICAgICAgIEl0IGRvZXMgbm90IGFmZmVjdCB0aGUgeG1sIGxvZyBvdXRwdXRcblwKLVwg
ICAgLW5vbk51bGxCeURlZmF1bHQgIGZvciBhbm5vdGF0aW9uIGJhc2VkIG51bGwgYW5hbHlzaXMg
YXNzdW1lIG5vbm51bGxcblwKLVwgICAgICAgICAgICAgICAgICAgICAgIGFzIHRoZSBnbG9iYWwg
ZGVmYXVsdFxuXAorXCAgICAtbWlzc2luZ051bGxEZWZhdWx0ICByZXBvcnQgbWlzc2luZyBkZWZh
dWx0IG51bGxuZXNzIGFubm90YXRpb25cblwKIFwgXG5cCiBcICAgIC0/IC1oZWxwICAgICAgICAg
ICBwcmludCB0aGlzIGhlbHAgbWVzc2FnZVxuXAogXCAgICAtdiAtdmVyc2lvbiAgICAgICAgcHJp
bnQgY29tcGlsZXIgdmVyc2lvblxuXApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2NvcmUvY29tcGlsZXIvSVByb2JsZW0uamF2YSBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9jb3JlL2NvbXBpbGVy
L0lQcm9ibGVtLmphdmEKaW5kZXggOTM3YTE5MC4uYjg4MzU0ZCAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2NvcmUvY29tcGlsZXIvSVBy
b2JsZW0uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvY29yZS9jb21waWxlci9JUHJvYmxlbS5qYXZhCkBAIC0xNDQ0LDcgKzE0NDQsOCBAQAog
CWludCBSZXF1aXJlZE5vbk51bGxCdXRQcm92aWRlZFBvdGVudGlhbE51bGwgPSBUeXBlUmVsYXRl
ZCArIDkxMTsKIAkvKiogQHNpbmNlIDMuOCAqLwogCWludCBSZXF1aXJlZE5vbk51bGxCdXRQcm92
aWRlZFVua25vd24gPSBUeXBlUmVsYXRlZCArIDkxMjsKLQkvLyByZW1vdmVkIGR1cmluZyAzLjgg
TTY6IEltcG9ydFJlbGF0ZWQgKyA5MTMgCisJLyoqIEBzaW5jZSAzLjggKi8KKwlpbnQgTWlzc2lu
Z05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uT25QYWNrYWdlID0gSW50ZXJuYWwgKyA5MTM7IC8v
IGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNzIwMTIKIAkv
KiogQHNpbmNlIDMuOCAqLwogCWludCBJbGxlZ2FsUmV0dXJuTnVsbGl0eVJlZGVmaW5pdGlvbiA9
IE1ldGhvZFJlbGF0ZWQgKyA5MTQ7CiAJLyoqIEBzaW5jZSAzLjggKi8KQEAgLTE0NzUsNiArMTQ3
Niw4IEBACiAJaW50IFJlZHVuZGFudE51bGxEZWZhdWx0QW5ub3RhdGlvbk1ldGhvZCA9IEludGVy
bmFsICsgOTI4OwogCS8qKiBAc2luY2UgMy44ICovCiAJaW50IENvbnRyYWRpY3RvcnlOdWxsQW5u
b3RhdGlvbnMgPSBJbnRlcm5hbCArIDkyOTsKKwkvKiogQHNpbmNlIDMuOCAqLworCWludCBNaXNz
aW5nTm9uTnVsbEJ5RGVmYXVsdEFubm90YXRpb25PblR5cGUgPSBJbnRlcm5hbCArIDkzMDsgLy8g
aHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM3MjAxMgogCiAJ
LyoqCiAJICogRXh0ZXJuYWwgcHJvYmxlbXMgLS0gVGhlc2UgYXJlIHByb2JsZW1zIGRlZmluZWQg
Ynkgb3RoZXIgcGx1Z2lucwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2ltcGwvQ29tcGlsZXJPcHRpb25z
LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvaW1wbC9Db21waWxlck9wdGlvbnMuamF2YQppbmRleCBjNzY0NDFiLi41
ZWIwZGM3IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvaW1wbC9Db21waWxlck9wdGlvbnMuamF2YQorKysg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvaW1wbC9Db21waWxlck9wdGlvbnMuamF2YQpAQCAtMjksNyArMjksNiBAQAogaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuQVNUTm9kZTsKIGltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuY2xhc3NmbXQuQ2xhc3NGaWxlQ29u
c3RhbnRzOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAu
RXh0cmFDb21waWxlck1vZGlmaWVyczsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwu
Y29tcGlsZXIubG9va3VwLlRhZ0JpdHM7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFs
LmNvbXBpbGVyLnByb2JsZW0uUHJvYmxlbVNldmVyaXRpZXM7CiBpbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvbXBpbGVyLnV0aWwuVXRpbDsKIApAQCAtMTU4LDcgKzE1Nyw3IEBACiAJ
c3RhdGljIGZpbmFsIGNoYXJbXVtdIERFRkFVTFRfTlVMTEFCTEVfQU5OT1RBVElPTl9OQU1FID0g
Q2hhck9wZXJhdGlvbi5zcGxpdE9uKCcuJywgIm9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uLk51
bGxhYmxlIi50b0NoYXJBcnJheSgpKTsgLy8kTk9OLU5MUy0xJAogCXN0YXRpYyBmaW5hbCBjaGFy
W11bXSBERUZBVUxUX05PTk5VTExfQU5OT1RBVElPTl9OQU1FID0gQ2hhck9wZXJhdGlvbi5zcGxp
dE9uKCcuJywgIm9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uLk5vbk51bGwiLnRvQ2hhckFycmF5
KCkpOyAvLyROT04tTkxTLTEkCiAJc3RhdGljIGZpbmFsIGNoYXJbXVtdIERFRkFVTFRfTk9OTlVM
TEJZREVGQVVMVF9BTk5PVEFUSU9OX05BTUUgPSBDaGFyT3BlcmF0aW9uLnNwbGl0T24oJy4nLCAi
b3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTm9uTnVsbEJ5RGVmYXVsdCIudG9DaGFyQXJyYXko
KSk7IC8vJE5PTi1OTFMtMSQKLQlwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBPUFRJT05fTm9u
TnVsbElzRGVmYXVsdCA9ICJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5hbm5vdGF0aW9u
Lm5vbm51bGxpc2RlZmF1bHQiOyAgLy8kTk9OLU5MUy0xJAorCXB1YmxpYyBzdGF0aWMgZmluYWwg
U3RyaW5nIE9QVElPTl9SZXBvcnRNaXNzaW5nTm9uTnVsbEJ5RGVmYXVsdEFubm90YXRpb24gPSAi
b3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuYW5ub3RhdGlvbi5taXNzaW5nTm9uTnVsbEJ5
RGVmYXVsdEFubm90YXRpb24iOyAgLy8kTk9OLU5MUy0xJAogCS8qKgogCSAqIFBvc3NpYmxlIHZh
bHVlcyBmb3IgY29uZmlndXJhYmxlIG9wdGlvbnMKIAkgKi8KQEAgLTI2OSw2ICsyNjgsNyBAQAog
CXB1YmxpYyBzdGF0aWMgZmluYWwgaW50IFBvdGVudGlhbE51bGxTcGVjVmlvbGF0aW9uID0gSXJy
aXRhbnRTZXQuR1JPVVAyIHwgQVNUTm9kZS5CaXQxMjsKIAlwdWJsaWMgc3RhdGljIGZpbmFsIGlu
dCBOdWxsU3BlY0luc3VmZmljaWVudEluZm8gPSBJcnJpdGFudFNldC5HUk9VUDIgfCBBU1ROb2Rl
LkJpdDEzOwogCXB1YmxpYyBzdGF0aWMgZmluYWwgaW50IFJlZHVuZGFudE51bGxBbm5vdGF0aW9u
ID0gSXJyaXRhbnRTZXQuR1JPVVAyIHwgQVNUTm9kZS5CaXQxNDsKKwlwdWJsaWMgc3RhdGljIGZp
bmFsIGludCBNaXNzaW5nTm9uTnVsbEJ5RGVmYXVsdEFubm90YXRpb24gPSBJcnJpdGFudFNldC5H
Uk9VUDIgfCBBU1ROb2RlLkJpdDE1OwogCiAJLy8gU2V2ZXJpdHkgbGV2ZWwgZm9yIGhhbmRsZXJz
CiAJLyoqIApAQCAtNTk4LDYgKzU5OCw4IEBACiAJCQkJcmV0dXJuIE9QVElPTl9SZXBvcnRNZXRo
b2RDYW5CZVN0YXRpYzsKIAkJCWNhc2UgTWV0aG9kQ2FuQmVQb3RlbnRpYWxseVN0YXRpYyA6CiAJ
CQkJcmV0dXJuIE9QVElPTl9SZXBvcnRNZXRob2RDYW5CZVBvdGVudGlhbGx5U3RhdGljOworCQkJ
Y2FzZSBNaXNzaW5nTm9uTnVsbEJ5RGVmYXVsdEFubm90YXRpb24gOgorCQkJCXJldHVybiBPUFRJ
T05fUmVwb3J0TWlzc2luZ05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uOwogCQkJY2FzZSBSZWR1
bmRhbnRTcGVjaWZpY2F0aW9uT2ZUeXBlQXJndW1lbnRzIDoKIAkJCQlyZXR1cm4gT1BUSU9OX1Jl
cG9ydFJlZHVuZGFudFNwZWNpZmljYXRpb25PZlR5cGVBcmd1bWVudHM7CiAJCQljYXNlIFVuY2xv
c2VkQ2xvc2VhYmxlIDoKQEAgLTc4NCw3ICs3ODYsNyBAQAogCQkJT1BUSU9OX05vbk51bGxBbm5v
dGF0aW9uTmFtZSwKIAkJCU9QVElPTl9OdWxsYWJsZUFubm90YXRpb25OYW1lLAogCQkJT1BUSU9O
X05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uTmFtZSwKLQkJCU9QVElPTl9Ob25OdWxsSXNEZWZh
dWx0LAorCQkJT1BUSU9OX1JlcG9ydE1pc3NpbmdOb25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbiwK
IAkJCU9QVElPTl9SZXBvcnROdWxsU3BlY1Zpb2xhdGlvbiwKIAkJCU9QVElPTl9SZXBvcnRQb3Rl
bnRpYWxOdWxsU3BlY1Zpb2xhdGlvbiwKIAkJCU9QVElPTl9SZXBvcnROdWxsU3BlY0luc3VmZmlj
aWVudEluZm8sCkBAIC04NTUsNiArODU3LDcgQEAKIAkJCWNhc2UgUG90ZW50aWFsTnVsbFNwZWNW
aW9sYXRpb24gOgogCQkJY2FzZSBOdWxsU3BlY0luc3VmZmljaWVudEluZm8gOgogCQkJY2FzZSBS
ZWR1bmRhbnROdWxsQW5ub3RhdGlvbiA6CisJCQljYXNlIE1pc3NpbmdOb25OdWxsQnlEZWZhdWx0
QW5ub3RhdGlvbjoKIAkJCQlyZXR1cm4gIm51bGwiOyAvLyROT04tTkxTLTEkCiAJCQljYXNlIEZh
bGx0aHJvdWdoQ2FzZSA6CiAJCQkJcmV0dXJuICJmYWxsdGhyb3VnaCI7IC8vJE5PTi1OTFMtMSQK
QEAgLTEwODAsMTAgKzEwODMsNyBAQAogCQlvcHRpb25zTWFwLnB1dChPUFRJT05fTnVsbGFibGVB
bm5vdGF0aW9uTmFtZSwgU3RyaW5nLnZhbHVlT2YoQ2hhck9wZXJhdGlvbi5jb25jYXRXaXRoKHRo
aXMubnVsbGFibGVBbm5vdGF0aW9uTmFtZSwgJy4nKSkpOwogCQlvcHRpb25zTWFwLnB1dChPUFRJ
T05fTm9uTnVsbEFubm90YXRpb25OYW1lLCBTdHJpbmcudmFsdWVPZihDaGFyT3BlcmF0aW9uLmNv
bmNhdFdpdGgodGhpcy5ub25OdWxsQW5ub3RhdGlvbk5hbWUsICcuJykpKTsKIAkJb3B0aW9uc01h
cC5wdXQoT1BUSU9OX05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uTmFtZSwgU3RyaW5nLnZhbHVl
T2YoQ2hhck9wZXJhdGlvbi5jb25jYXRXaXRoKHRoaXMubm9uTnVsbEJ5RGVmYXVsdEFubm90YXRp
b25OYW1lLCAnLicpKSk7Ci0JCWlmICh0aGlzLmludGVuZGVkRGVmYXVsdE5vbk51bGxuZXNzID09
IFRhZ0JpdHMuQW5ub3RhdGlvbk5vbk51bGwpCi0JCQlvcHRpb25zTWFwLnB1dChPUFRJT05fTm9u
TnVsbElzRGVmYXVsdCwgQ29tcGlsZXJPcHRpb25zLkVOQUJMRUQpOwotCQllbHNlCi0JCQlvcHRp
b25zTWFwLnB1dChPUFRJT05fTm9uTnVsbElzRGVmYXVsdCwgQ29tcGlsZXJPcHRpb25zLkRJU0FC
TEVEKTsKKwkJb3B0aW9uc01hcC5wdXQoT1BUSU9OX1JlcG9ydE1pc3NpbmdOb25OdWxsQnlEZWZh
dWx0QW5ub3RhdGlvbiwgZ2V0U2V2ZXJpdHlTdHJpbmcoTWlzc2luZ05vbk51bGxCeURlZmF1bHRB
bm5vdGF0aW9uKSk7CiAJCXJldHVybiBvcHRpb25zTWFwOwogCX0KIApAQCAtMTU2MCwxMiArMTU2
MCw3IEBACiAJCQlpZiAoKG9wdGlvblZhbHVlID0gb3B0aW9uc01hcC5nZXQoT1BUSU9OX05vbk51
bGxCeURlZmF1bHRBbm5vdGF0aW9uTmFtZSkpICE9IG51bGwpIHsKIAkJCQl0aGlzLm5vbk51bGxC
eURlZmF1bHRBbm5vdGF0aW9uTmFtZSA9IENoYXJPcGVyYXRpb24uc3BsaXRBbmRUcmltT24oJy4n
LCAoKFN0cmluZylvcHRpb25WYWx1ZSkudG9DaGFyQXJyYXkoKSk7CiAJCQl9Ci0JCQlpZiAoKG9w
dGlvblZhbHVlID0gb3B0aW9uc01hcC5nZXQoT1BUSU9OX05vbk51bGxJc0RlZmF1bHQpKSAhPSBu
dWxsKSB7Ci0JCQkJaWYgKENvbXBpbGVyT3B0aW9ucy5FTkFCTEVELmVxdWFscyhvcHRpb25WYWx1
ZSkpCi0JCQkJCXRoaXMuaW50ZW5kZWREZWZhdWx0Tm9uTnVsbG5lc3MgPSBUYWdCaXRzLkFubm90
YXRpb25Ob25OdWxsOwotCQkJCWVsc2UgaWYgKENvbXBpbGVyT3B0aW9ucy5ESVNBQkxFRC5lcXVh
bHMob3B0aW9uVmFsdWUpKQotCQkJCQl0aGlzLmludGVuZGVkRGVmYXVsdE5vbk51bGxuZXNzID0g
MDsKLQkJCX0KKwkJCWlmICgob3B0aW9uVmFsdWUgPSBvcHRpb25zTWFwLmdldChPUFRJT05fUmVw
b3J0TWlzc2luZ05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uKSkgIT0gbnVsbCkgdXBkYXRlU2V2
ZXJpdHkoTWlzc2luZ05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uLCBvcHRpb25WYWx1ZSk7CiAJ
CX0KIAogCQkvLyBKYXZhZG9jIG9wdGlvbnMKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU291
cmNlVHlwZUJpbmRpbmcuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU291cmNlVHlwZUJpbmRpbmcuamF2
YQppbmRleCA1M2EyYjFiLi5lYTdmODJkIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1NvdXJj
ZVR5cGVCaW5kaW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Tb3VyY2VUeXBlQmluZGluZy5q
YXZhCkBAIC0xNjMzLDYgKzE2MzMsMjMgQEAKIHByaXZhdGUgdm9pZCBldmFsdWF0ZU51bGxBbm5v
dGF0aW9ucyhsb25nIGFubm90YXRpb25UYWdCaXRzKSB7CiAJaWYgKHRoaXMubnVsbG5lc3NEZWZh
dWx0SW5pdGlhbGl6ZWQgPiAwIHx8ICF0aGlzLnNjb3BlLmNvbXBpbGVyT3B0aW9ucygpLmlzQW5u
b3RhdGlvbkJhc2VkTnVsbEFuYWx5c2lzRW5hYmxlZCkKIAkJcmV0dXJuOworCWJvb2xlYW4gaXNQ
YWNrYWdlSW5mbyA9IENoYXJPcGVyYXRpb24uZXF1YWxzKHRoaXMuc291cmNlTmFtZSwgVHlwZUNv
bnN0YW50cy5QQUNLQUdFX0lORk9fTkFNRSk7CisJUGFja2FnZUJpbmRpbmcgcGtnID0gZ2V0UGFj
a2FnZSgpOworCWJvb2xlYW4gaXNEZWZhdWx0ID0gKHBrZy5jb21wb3VuZE5hbWUgPT0gQ2hhck9w
ZXJhdGlvbi5OT19DSEFSX0NIQVIpOworCWJvb2xlYW4gaXNOdWxsbmVzc0Fubm90YXRpb25QYWNr
YWdlID0gCisJCQlwa2cgPT0gdGhpcy5zY29wZS5lbnZpcm9ubWVudCgpLm5vbm51bGxBbm5vdGF0
aW9uUGFja2FnZQorCQkJfHwgcGtnID09IHRoaXMuc2NvcGUuZW52aXJvbm1lbnQoKS5udWxsYWJs
ZUFubm90YXRpb25QYWNrYWdlCisJCQl8fCBwa2cgPT0gdGhpcy5zY29wZS5lbnZpcm9ubWVudCgp
Lm5vbm51bGxCeURlZmF1bHRBbm5vdGF0aW9uUGFja2FnZTsKKwlpZiAocGtnLmRlZmF1bHROdWxs
bmVzcyA9PSBOT19OVUxMX0RFRkFVTFQgJiYgIWlzRGVmYXVsdCAmJiAhaXNQYWNrYWdlSW5mbyAm
JiAhaXNOdWxsbmVzc0Fubm90YXRpb25QYWNrYWdlICYmICEodGhpcyBpbnN0YW5jZW9mIE5lc3Rl
ZFR5cGVCaW5kaW5nKSkgeworCQlSZWZlcmVuY2VCaW5kaW5nIHBhY2thZ2VJbmZvID0gcGtnLmdl
dFR5cGUoVHlwZUNvbnN0YW50cy5QQUNLQUdFX0lORk9fTkFNRSk7CisJCWlmIChwYWNrYWdlSW5m
byA9PSBudWxsKSB7CisJCQkvLyBubyBwa2dJbmZvIC0gY29tcGxhaW4KKwkJCXRoaXMuc2NvcGUu
cHJvYmxlbVJlcG9ydGVyKCkubWlzc2luZ05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uKHRoaXMu
c2NvcGUucmVmZXJlbmNlQ29udGV4dCk7CisJCX0gZWxzZSB7CisJCQkvLyBpZiBwa2dJbmZvIGhh
cyBubyBkZWZhdWx0IGFubm90LiAtIGNvbXBsYWluCisJCQlwYWNrYWdlSW5mby5nZXRBbm5vdGF0
aW9uVGFnQml0cygpOworCQl9CisJfQogCXRoaXMubnVsbG5lc3NEZWZhdWx0SW5pdGlhbGl6ZWQg
PSAxOwogCS8vIHRyYW5zZmVyIG51bGxuZXNzIGluZm8gZnJvbSB0YWdCaXRzIHRvIHRoaXMubnVs
bG5lc3NEZWZhdWx0QW5ub3RhdGlvbgogCWludCBuZXdEZWZhdWx0TnVsbG5lc3MgPSBOT19OVUxM
X0RFRkFVTFQ7CkBAIC0xNjQxLDE0ICsxNjU4LDE4IEBACiAJZWxzZSBpZiAoKGFubm90YXRpb25U
YWdCaXRzICYgVGFnQml0cy5Bbm5vdGF0aW9uTm9uTnVsbEJ5RGVmYXVsdCkgIT0gMCkKIAkJbmV3
RGVmYXVsdE51bGxuZXNzID0gTk9OTlVMTF9CWV9ERUZBVUxUOwogCWlmIChuZXdEZWZhdWx0TnVs
bG5lc3MgIT0gTk9fTlVMTF9ERUZBVUxUKSB7Ci0JCWlmIChDaGFyT3BlcmF0aW9uLmVxdWFscyh0
aGlzLnNvdXJjZU5hbWUsIFR5cGVDb25zdGFudHMuUEFDS0FHRV9JTkZPX05BTUUpKSB7Ci0JCQln
ZXRQYWNrYWdlKCkuZGVmYXVsdE51bGxuZXNzID0gbmV3RGVmYXVsdE51bGxuZXNzOworCQlpZiAo
aXNQYWNrYWdlSW5mbykgeworCQkJcGtnLmRlZmF1bHROdWxsbmVzcyA9IG5ld0RlZmF1bHROdWxs
bmVzczsKIAkJfSBlbHNlIHsKIAkJCXRoaXMuZGVmYXVsdE51bGxuZXNzID0gbmV3RGVmYXVsdE51
bGxuZXNzOwogCQkJVHlwZURlY2xhcmF0aW9uIHR5cGVEZWNsID0gdGhpcy5zY29wZS5yZWZlcmVu
Y2VDb250ZXh0OwogCQkJbG9uZyBudWxsRGVmYXVsdEJpdHMgPSBhbm5vdGF0aW9uVGFnQml0cyAm
IChUYWdCaXRzLkFubm90YXRpb25OdWxsVW5zcGVjaWZpZWRCeURlZmF1bHR8VGFnQml0cy5Bbm5v
dGF0aW9uTm9uTnVsbEJ5RGVmYXVsdCk7CiAJCQljaGVja1JlZHVuZGFudE51bGxuZXNzRGVmYXVs
dFJlY3Vyc2UodHlwZURlY2wsIHR5cGVEZWNsLmFubm90YXRpb25zLCBudWxsRGVmYXVsdEJpdHMp
OwogCQl9CisJfSBlbHNlIGlmIChpc1BhY2thZ2VJbmZvIHx8IChpc0RlZmF1bHQgJiYgISh0aGlz
IGluc3RhbmNlb2YgTmVzdGVkVHlwZUJpbmRpbmcpKSkgeworCQl0aGlzLnNjb3BlLnByb2JsZW1S
ZXBvcnRlcigpLm1pc3NpbmdOb25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbih0aGlzLnNjb3BlLnJl
ZmVyZW5jZUNvbnRleHQpOworCQlpZiAoIWlzRGVmYXVsdCkKKwkJCXBrZy5kZWZhdWx0TnVsbG5l
c3MgPSBOVUxMX1VOU1BFQ0lGSUVEX0JZX0RFRkFVTFQ7CiAJfQogfQogCmRpZmYgLS1naXQgYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvcHJvYmxlbS9Qcm9ibGVtSGFuZGxlci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxl
bUhhbmRsZXIuamF2YQppbmRleCA5MzQxODYzLi5hYWQ2MjljIDEwMDY0NAotLS0gYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
cHJvYmxlbS9Qcm9ibGVtSGFuZGxlci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL1Byb2JsZW1I
YW5kbGVyLmphdmEKQEAgLTEwLDYgKzEwLDEyIEBACiAgKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8K
IHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLnByb2JsZW07CiAKK2lt
cG9ydCBqYXZhLmlvLkZpbGU7CisKK2ltcG9ydCBvcmcuZWNsaXBzZS5jb3JlLnJlc291cmNlcy5J
TWFya2VyOworaW1wb3J0IG9yZy5lY2xpcHNlLmNvcmUucmVzb3VyY2VzLklSZXNvdXJjZTsKK2lt
cG9ydCBvcmcuZWNsaXBzZS5jb3JlLnJ1bnRpbWUuQ29yZUV4Y2VwdGlvbjsKK2ltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuY29yZS5JSmF2YU1vZGVsTWFya2VyOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5jb3JlLmNvbXBpbGVyLkNhdGVnb3JpemVkUHJvYmxlbTsKIGltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuY29yZS5jb21waWxlci5DaGFyT3BlcmF0aW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5j
b3JlLmNvbXBpbGVyLklQcm9ibGVtOwpAQCAtMjEsNiArMjcsOCBAQAogaW1wb3J0IG9yZy5lY2xp
cHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5pbXBsLkNvbXBpbGVyT3B0aW9uczsKIGltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuaW1wbC5SZWZlcmVuY2VDb250ZXh0Owog
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci51dGlsLlV0aWw7CitpbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvcmUuSmF2YU1vZGVsTWFuYWdlcjsKK2ltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS5QYWNrYWdlRnJhZ21lbnQ7CiAKIC8qCiAg
KiBDb21waWxlciBlcnJvciBoYW5kbGVyLCByZXNwb25zaWJsZSB0byBkZXRlcm1pbmUgd2hldGhl
cgpAQCAtMTM3LDcgKzE0NSw3IEBACiAJCQlyZXR1cm47IC8vIGlnbm9yZSBub24gcmVwb3J0YWJs
ZSB3YXJuaW5nCiAJCX0KIAl9Ci0KKwkKIAlpbnRbXSBsaW5lRW5kczsKIAlpbnQgbGluZU51bWJl
ciA9IHByb2JsZW1TdGFydFBvc2l0aW9uID49IDAKIAkJCT8gVXRpbC5nZXRMaW5lTnVtYmVyKHBy
b2JsZW1TdGFydFBvc2l0aW9uLCBsaW5lRW5kcyA9IHVuaXRSZXN1bHQuZ2V0TGluZVNlcGFyYXRv
clBvc2l0aW9ucygpLCAwLCBsaW5lRW5kcy5sZW5ndGgtMSkKQEAgLTE1OSw3ICsxNjcsMzQgQEAK
IAkJCWNvbHVtbk51bWJlcik7CiAKIAlpZiAocHJvYmxlbSA9PSBudWxsKSByZXR1cm47IC8vIHBy
b2JsZW0gY291bGRuJ3QgYmUgY3JlYXRlZCwgaWdub3JlCi0KKwlpZiAocHJvYmxlbUlkID09IElQ
cm9ibGVtLk1pc3NpbmdOb25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbk9uUGFja2FnZSAmJiBwcm9i
bGVtRW5kUG9zaXRpb24gPCAwICYmIHByb2JsZW1TdGFydFBvc2l0aW9uIDwgMCkgeworCQljaGFy
W10gZmlsZU5hbWUgPSB1bml0UmVzdWx0LmdldEZpbGVOYW1lKCk7CisJCWludCBwa2dFbmQgPSBD
aGFyT3BlcmF0aW9uLmxhc3RJbmRleE9mKCcvJywgZmlsZU5hbWUpOyAvLyBwa2dFbmQgaXMgZXhj
bHVzaXZlCisJCWlmIChwa2dFbmQgPT0gLTEpCisJCQlwa2dFbmQgPSBDaGFyT3BlcmF0aW9uLmxh
c3RJbmRleE9mKEZpbGUuc2VwYXJhdG9yQ2hhciwgZmlsZU5hbWUpOworCQlpZiAocGtnRW5kID09
IC0xKQorCQkJcmV0dXJuOworCQlQYWNrYWdlRnJhZ21lbnQgcGtnID0gKFBhY2thZ2VGcmFnbWVu
dCkgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvcmUudXRpbC5VdGlsLmdldFBhY2thZ2VGcmFn
bWVudCh1bml0UmVzdWx0LmdldEZpbGVOYW1lKCksIHBrZ0VuZCwgLTEgLypubyBqYXIgc2VwYXJh
dG9yIGZvciBqYXZhIGZpbGVzKi8pOworCQlJTWFya2VyW10gZXhpc3RpbmdNYXJrZXI7CisJCWlm
IChwa2cgIT0gbnVsbCkgeworCQkJdHJ5IHsKKwkJCQlleGlzdGluZ01hcmtlciA9IHBrZy5yZXNv
dXJjZSgpLmZpbmRNYXJrZXJzKElKYXZhTW9kZWxNYXJrZXIuSkFWQV9NT0RFTF9QUk9CTEVNX01B
UktFUiwgZmFsc2UsIElSZXNvdXJjZS5ERVBUSF9aRVJPKTsKKwkJCQlpbnQgbGVuID0gZXhpc3Rp
bmdNYXJrZXIubGVuZ3RoOworCQkJCWZvciAoaW50IGo9MDsgaiA8IGxlbjsgaisrKSB7CisJCQkJ
CWlmICgoKEludGVnZXIpZXhpc3RpbmdNYXJrZXJbal0uZ2V0QXR0cmlidXRlKElKYXZhTW9kZWxN
YXJrZXIuSUQpKS5pbnRWYWx1ZSgpID09IElQcm9ibGVtLk1pc3NpbmdOb25OdWxsQnlEZWZhdWx0
QW5ub3RhdGlvbk9uUGFja2FnZSkgeworCQkJCQkJcmV0dXJuOyAvLyBtYXJrZXIgYWxyZWFkeSBw
cmVzZW50CisJCQkJCX0KKwkJCQl9CisJCQl9IGNhdGNoIChDb3JlRXhjZXB0aW9uIGUpIHsKKwkJ
CQkvLyBtYXJrZXIgcmV0cmlldmFsIGZhaWxlZCwgY2Fubm90IGRvIG11Y2gKKwkJCQlpZiAoSmF2
YU1vZGVsTWFuYWdlci5WRVJCT1NFKSB7CisJCQkJCWUucHJpbnRTdGFja1RyYWNlKCk7CisJCQkJ
fQorCQkJfQorCQkJcGtnLmNyZWF0ZVBhY2thZ2VQcm9ibGVtTWFya2VyKHByb2JsZW0pOworCQkJ
cmV0dXJuOworCQl9IC8vIGVsc2UgY29udGludWUgdG8gcmVwb3J0IG9uIHRoZSBjb21waWxhdGlv
biB1bml0CisJfQogCXN3aXRjaCAoc2V2ZXJpdHkgJiBQcm9ibGVtU2V2ZXJpdGllcy5FcnJvcikg
ewogCQljYXNlIFByb2JsZW1TZXZlcml0aWVzLkVycm9yIDoKIAkJCXJlY29yZChwcm9ibGVtLCB1
bml0UmVzdWx0LCByZWZlcmVuY2VDb250ZXh0KTsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVt
L1Byb2JsZW1SZXBvcnRlci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxlbVJlcG9ydGVyLmph
dmEKaW5kZXggMzc5ZjIzMi4uZTM1MTU0YiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJv
YmxlbVJlcG9ydGVyLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxlbVJlcG9ydGVyLmph
dmEKQEAgLTQ2OSw2ICs0NjksMTAgQEAKIAkJCQkKIAkJY2FzZSBJUHJvYmxlbS5SZWR1bmRhbnRT
cGVjaWZpY2F0aW9uT2ZUeXBlQXJndW1lbnRzOgogCQkJcmV0dXJuIENvbXBpbGVyT3B0aW9ucy5S
ZWR1bmRhbnRTcGVjaWZpY2F0aW9uT2ZUeXBlQXJndW1lbnRzOworCQkJCisJCWNhc2UgSVByb2Js
ZW0uTWlzc2luZ05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uT25QYWNrYWdlOgorCQljYXNlIElQ
cm9ibGVtLk1pc3NpbmdOb25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbk9uVHlwZToKKwkJCXJldHVy
biBDb21waWxlck9wdGlvbnMuTWlzc2luZ05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uOwogCX0K
IAlyZXR1cm4gMDsKIH0KQEAgLTU3NCw2ICs1NzgsNyBAQAogCQkJY2FzZSBDb21waWxlck9wdGlv
bnMuTnVsbFNwZWNWaW9sYXRpb24gOgogCQkJY2FzZSBDb21waWxlck9wdGlvbnMuUG90ZW50aWFs
TnVsbFNwZWNWaW9sYXRpb24gOgogCQkJY2FzZSBDb21waWxlck9wdGlvbnMuTnVsbFNwZWNJbnN1
ZmZpY2llbnRJbmZvIDoKKwkJCWNhc2UgQ29tcGlsZXJPcHRpb25zLk1pc3NpbmdOb25OdWxsQnlE
ZWZhdWx0QW5ub3RhdGlvbjoKIAkJCQlyZXR1cm4gQ2F0ZWdvcml6ZWRQcm9ibGVtLkNBVF9QT1RF
TlRJQUxfUFJPR1JBTU1JTkdfUFJPQkxFTTsKIAkJCWNhc2UgQ29tcGlsZXJPcHRpb25zLlJlZHVu
ZGFudE51bGxBbm5vdGF0aW9uIDoKIAkJCQlyZXR1cm4gQ2F0ZWdvcml6ZWRQcm9ibGVtLkNBVF9V
Tk5FQ0VTU0FSWV9DT0RFOwpAQCAtODE4MCw5ICs4MTg1LDcgQEAKIAkJYXJndW1lbnQudHlwZS5z
b3VyY2VTdGFydCwKIAkJYXJndW1lbnQudHlwZS5zb3VyY2VFbmQpOwogfQotcHVibGljIHZvaWQg
aWxsZWdhbFJldHVyblJlZGVmaW5pdGlvbihBYnN0cmFjdE1ldGhvZERlY2xhcmF0aW9uIGFic3Ry
YWN0TWV0aG9kRGVjbCwKLQkJCQkJCQkJCSAgTWV0aG9kQmluZGluZyBpbmhlcml0ZWRNZXRob2Qs
IGNoYXJbXVtdIG5vbk51bGxBbm5vdGF0aW9uTmFtZSkKLXsKK3B1YmxpYyB2b2lkIGlsbGVnYWxS
ZXR1cm5SZWRlZmluaXRpb24oQWJzdHJhY3RNZXRob2REZWNsYXJhdGlvbiBhYnN0cmFjdE1ldGhv
ZERlY2wsIE1ldGhvZEJpbmRpbmcgaW5oZXJpdGVkTWV0aG9kLCBjaGFyW11bXSBub25OdWxsQW5u
b3RhdGlvbk5hbWUpIHsKIAlNZXRob2REZWNsYXJhdGlvbiBtZXRob2REZWNsID0gKE1ldGhvZERl
Y2xhcmF0aW9uKSBhYnN0cmFjdE1ldGhvZERlY2w7CiAJU3RyaW5nQnVmZmVyIG1ldGhvZFNpZ25h
dHVyZSA9IG5ldyBTdHJpbmdCdWZmZXIoKTsKIAltZXRob2RTaWduYXR1cmUKQEAgLTgzMjgsNCAr
ODMzMSw0MCBAQAogCX0KIAlyZXR1cm4gbnVsbDsKIH0KKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNl
Lm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNzIwMTIKK3B1YmxpYyB2b2lkIG1pc3NpbmdOb25O
dWxsQnlEZWZhdWx0QW5ub3RhdGlvbihUeXBlRGVjbGFyYXRpb24gdHlwZSkgeworCWludCBzZXZl
cml0eTsKKwlDb21waWxhdGlvblVuaXREZWNsYXJhdGlvbiBjb21wVW5pdERlY2wgPSB0eXBlLmdl
dENvbXBpbGF0aW9uVW5pdERlY2xhcmF0aW9uKCk7CisJU3RyaW5nW10gYXJndW1lbnRzOworCWlm
IChjb21wVW5pdERlY2wuY3VycmVudFBhY2thZ2UgPT0gbnVsbCkgeworCQlzZXZlcml0eSA9IGNv
bXB1dGVTZXZlcml0eShJUHJvYmxlbS5NaXNzaW5nTm9uTnVsbEJ5RGVmYXVsdEFubm90YXRpb25P
blR5cGUpOworCQlpZiAoc2V2ZXJpdHkgPT0gUHJvYmxlbVNldmVyaXRpZXMuSWdub3JlKSByZXR1
cm47CisJCS8vIERlZmF1bHQgcGFja2FnZQorCQlUeXBlQmluZGluZyBiaW5kaW5nID0gdHlwZS5i
aW5kaW5nOworCQl0aGlzLmhhbmRsZSgKKwkJCQlJUHJvYmxlbS5NaXNzaW5nTm9uTnVsbEJ5RGVm
YXVsdEFubm90YXRpb25PblR5cGUsCisJCQkJbmV3IFN0cmluZ1tdIHtuZXcgU3RyaW5nKGJpbmRp
bmcucmVhZGFibGVOYW1lKCkpLCB9LAorCQkJCW5ldyBTdHJpbmdbXSB7bmV3IFN0cmluZyhiaW5k
aW5nLnNob3J0UmVhZGFibGVOYW1lKCkpLH0sCisJCQkJc2V2ZXJpdHksCisJCQkJdHlwZS5zb3Vy
Y2VTdGFydCwKKwkJCQl0eXBlLnNvdXJjZUVuZCk7CisJfSBlbHNlIHsKKwkJc2V2ZXJpdHkgPSBj
b21wdXRlU2V2ZXJpdHkoSVByb2JsZW0uTWlzc2luZ05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9u
T25QYWNrYWdlKTsKKwkJaWYgKHNldmVyaXR5ID09IFByb2JsZW1TZXZlcml0aWVzLklnbm9yZSkg
cmV0dXJuOworLy8JCWludCBzb3VyY2VTdGFydCA9IC0xOworLy8JCWludCBzb3VyY2VFbmQgPSAt
MTsKKy8vCQlpZiAoQ2hhck9wZXJhdGlvbi5lcXVhbHModHlwZS5uYW1lLCBUeXBlQ29uc3RhbnRz
LlBBQ0tBR0VfSU5GT19OQU1FKSkgeworLy8JCQlzb3VyY2VTdGFydCA9IGNvbXBVbml0RGVjbC5j
dXJyZW50UGFja2FnZS5zb3VyY2VTdGFydDsKKy8vCQkJc291cmNlRW5kID0gY29tcFVuaXREZWNs
LmN1cnJlbnRQYWNrYWdlLnNvdXJjZUVuZDsKKy8vCQl9CisJCWFyZ3VtZW50cyA9IG5ldyBTdHJp
bmdbXSB7Q2hhck9wZXJhdGlvbi50b1N0cmluZyhjb21wVW5pdERlY2wuY3VycmVudFBhY2thZ2Uu
dG9rZW5zKX07CisJCXRoaXMuaGFuZGxlKAorCQkJSVByb2JsZW0uTWlzc2luZ05vbk51bGxCeURl
ZmF1bHRBbm5vdGF0aW9uT25QYWNrYWdlLAorCQkJYXJndW1lbnRzLAorCQkJYXJndW1lbnRzLAor
CQkJc2V2ZXJpdHksCisJCQljb21wVW5pdERlY2wuY3VycmVudFBhY2thZ2Uuc291cmNlU3RhcnQs
CisJCQljb21wVW5pdERlY2wuY3VycmVudFBhY2thZ2Uuc291cmNlRW5kKTsKKwl9Cit9CiB9CmRp
ZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9tZXNzYWdlcy5wcm9wZXJ0aWVzIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3By
b2JsZW0vbWVzc2FnZXMucHJvcGVydGllcwppbmRleCBkZjcwZWRlLi5kNmYwNGJkIDEwMDY0NAot
LS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvcHJvYmxlbS9tZXNzYWdlcy5wcm9wZXJ0aWVzCisrKyBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9i
bGVtL21lc3NhZ2VzLnByb3BlcnRpZXMKQEAgLTY2Myw3ICs2NjMsNyBAQAogOTEwID0gVHlwZSBt
aXNtYXRjaDogcmVxdWlyZWQgJydAezB9IHsxfScnIGJ1dCB0aGUgcHJvdmlkZWQgdmFsdWUgaXMg
bnVsbAogOTExID0gVHlwZSBtaXNtYXRjaDogcmVxdWlyZWQgJydAezB9IHsxfScnIGJ1dCB0aGUg
cHJvdmlkZWQgdmFsdWUgY2FuIGJlIG51bGwKIDkxMiA9IFBvdGVudGlhbCB0eXBlIG1pc21hdGNo
OiByZXF1aXJlZCAnJ0B7MH0gezF9JycgYnV0IG51bGxuZXNzIG9mIHRoZSBwcm92aWRlZCB2YWx1
ZSBpcyB1bmtub3duCi0jOTEzIHJlbW92ZWQKKzkxMyA9IEEgZGVmYXVsdCBudWxsbmVzcyBhbm5v
dGF0aW9uIGhhcyBub3QgYmVlbiBzcGVjaWZpZWQgZm9yIHRoZSBwYWNrYWdlIHswfQogOTE0ID0g
VGhlIHJldHVybiB0eXBlIGlzIGluY29tcGF0aWJsZSB3aXRoIHRoZSBAezF9IHJldHVybiBmcm9t
IHswfQogOTE1ID0gSWxsZWdhbCByZWRlZmluaXRpb24gb2YgcGFyYW1ldGVyIHswfSwgaW5oZXJp
dGVkIG1ldGhvZCBmcm9tIHsxfSBkZWNsYXJlcyB0aGlzIHBhcmFtZXRlciBhcyBAezJ9CiA5MTYg
PSBJbGxlZ2FsIHJlZGVmaW5pdGlvbiBvZiBwYXJhbWV0ZXIgezB9LCBpbmhlcml0ZWQgbWV0aG9k
IGZyb20gezF9IGRvZXMgbm90IGNvbnN0cmFpbiB0aGlzIHBhcmFtZXRlcgpAQCAtNjc5LDYgKzY3
OSw3IEBACiA5MjcgPSBOdWxsbmVzcyBkZWZhdWx0IGlzIHJlZHVuZGFudCB3aXRoIGEgZGVmYXVs
dCBzcGVjaWZpZWQgZm9yIHRoZSBlbmNsb3NpbmcgdHlwZSB7MH0KIDkyOCA9IE51bGxuZXNzIGRl
ZmF1bHQgaXMgcmVkdW5kYW50IHdpdGggYSBkZWZhdWx0IHNwZWNpZmllZCBmb3IgdGhlIGVuY2xv
c2luZyBtZXRob2QgezB9CiA5MjkgPSBDb250cmFkaWN0b3J5IG51bGwgc3BlY2lmaWNhdGlvbjsg
b25seSBvbmUgb2YgQHswfSBhbmQgQHsxfSBjYW4gYmUgc3BlY2lmaWVkIGF0IGFueSBsb2NhdGlv
bgorOTMwID0gQSBkZWZhdWx0IG51bGxuZXNzIGFubm90YXRpb24gaGFzIG5vdCBiZWVuIHNwZWNp
ZmllZCBmb3IgdGhlIHR5cGUgezB9CiAKICMjIyBFTEFCT1JBVElPTlMKICMjIEFjY2VzcyByZXN0
cmljdGlvbnMKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xp
cHNlL2pkdC9jb3JlL0phdmFDb3JlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9v
cmcvZWNsaXBzZS9qZHQvY29yZS9KYXZhQ29yZS5qYXZhCmluZGV4IDE4ODg3NDcuLmViODViMTMg
MTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9j
b3JlL0phdmFDb3JlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2Vj
bGlwc2UvamR0L2NvcmUvSmF2YUNvcmUuamF2YQpAQCAtMTQ5Myw5ICsxNDkzLDcgQEAKIAkgKiAg
ICB3aXRoaW4gdGhlIGFubm90YXRlZCBlbGVtZW50IHdpbGwgYmUgdHJlYXRlZCBhcyBpZiB0aGV5
IHdlcmUgc3BlY2lmaWVkIHdpdGggdGhlIG5vbi1udWxsIGFubm90YXRpb24KIAkgKiAgICAoc2Vl
IHtAbGluayAjQ09NUElMRVJfTk9OTlVMTF9BTk5PVEFUSU9OX05BTUV9KS48L3A+CiAJICogPHA+
SWYgdGhlIGFubm90YXRpb24gaXMgYXBwbGllZCB3aXRoIHRoZSBjb25zdGFudCA8Y29kZT5mYWxz
ZTwvY29kZT4gYXMgaXRzIGFyZ3VtZW50Ci0JICogICAgYWxsIGNvcnJlc3BvbmRpbmcgZGVmYXVs
dHMgYXQgb3V0ZXIgc2NvcGVzIHdpbGwgYmUgY2FuY2VsZWQgZm9yIHRoZSBhbm5vdGF0ZWQgZWxl
bWVudC4KLQkgKiAgICBUaGlzIGluY2x1ZGVzIGRlZmF1bHRzIHNwZWNpZmllZCB1c2luZyB0aGlz
IGFubm90YXRpb24gdHlwZSBvciBhIGRlZmF1bHQgZGVmaW5lZCB1c2luZwotCSAqICAgIHRoZSBj
b21waWxlciBvcHRpb24ge0BsaW5rICNDT01QSUxFUl9OT05OVUxMX0lTX0RFRkFVTFR9LjwvcD4K
KwkgKiAgICBhbGwgY29ycmVzcG9uZGluZyBkZWZhdWx0cyBhdCBvdXRlciBzY29wZXMgd2lsbCBi
ZSBjYW5jZWxlZCBmb3IgdGhlIGFubm90YXRlZCBlbGVtZW50LjwvcD4KIAkgKiA8cD5UaGlzIG9w
dGlvbiBvbmx5IGhhcyBhbiBlZmZlY3QgaWYgdGhlIG9wdGlvbiB7QGxpbmsgI0NPTVBJTEVSX0FO
Tk9UQVRJT05fTlVMTF9BTkFMWVNJU30gaXMgZW5hYmxlZC48L3A+CiAJICogPGRsPgogCSAqIDxk
dD5PcHRpb24gaWQ6PC9kdD48ZGQ+PGNvZGU+Im9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVy
LmFubm90YXRpb24ubm9ubnVsbGJ5ZGVmYXVsdCI8L2NvZGU+PC9kZD4KQEAgLTE1MDgsMTkgKzE1
MDYsMjMgQEAKIAkgKi8KIAlwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBDT01QSUxFUl9OT05O
VUxMX0JZX0RFRkFVTFRfQU5OT1RBVElPTl9OQU1FID0gUExVR0lOX0lEICsgIi5jb21waWxlci5h
bm5vdGF0aW9uLm5vbm51bGxieWRlZmF1bHQiOyAvLyROT04tTkxTLTEkCiAJLyoqCi0JICogQ29t
cGlsZXIgb3B0aW9uIElEOiBHbG9iYWxseSBzcGVjaWZ5IG5vbi1udWxsIGFzIHRoZSBhc3N1bWVk
IGRlZmF1bHQgZm9yIHVuYW5ub3RhdGVkIHR5cGVzLgotCSAqIDxwPldoZW4gZW5hYmxlZCwgdGhp
cyBvcHRpb24gZ2xvYmFsbHkgYWNoaWV2ZXMgdGhlIHNhbWUgZWZmZWN0IAotCSAqICAgIGFzIHNw
ZWNpZnlpbmcge0BsaW5rICNDT01QSUxFUl9OT05OVUxMX0FOTk9UQVRJT05fTkFNRX0gZG9lcyBm
b3IgaW5kaXZpZHVhbCBlbGVtZW50cy48L3A+CisJICogQ29tcGlsZXIgb3B0aW9uIElEOiBSZXBv
cnRpbmcgbWlzc2luZyBkZWZhdWx0IG51bGxuZXNzIGFubm90YXRpb24uCisJICogPHA+V2hlbiBl
bmFibGVkLCB0aGUgY29tcGlsZXIgd2lsbCBpc3N1ZSBhbiBlcnJvciBvciBhIHdhcm5pbmcgaW4g
dGhlIGZvbGxvd2luZyBjYXNlczo8L3A+CisJICogPHVsPgorCSAqIDxsaT4gV2hlbiBhIHBhY2th
Z2UgZG9lcyBub3QgY29udGFpbiBhIGRvZXMgbm90IGNvbnRhaW4gYSBkZWZhdWx0IG51bGxuZXNz
IGFubm90YXRpb24sIGFzIGEgcmVzdWx0IG9mIG1pc3NpbmcgcGFja2FnZS1pbmZvLmphdmEgCisJ
ICogb3IgbWlzc2luZyBkZWZhdWx0IG51bGxuZXNzIGFubm90YXRpb24gaW4gcGFja2FnZS1pbmZv
LmphdmEuPC9saT4KKwkgKiA8bGk+IFdoZW4gYSB0eXBlIGluc2lkZSBhIGRlZmF1bHQgcGFja2Fn
ZSBkb2VzIG5vdCBjb250YWluIGEgZGVmYXVsdCBudWxsbmVzcyBhbm5vdGF0aW9uLjwvbGk+CisJ
ICogPC91bD4KIAkgKiA8cD5UaGlzIG9wdGlvbiBvbmx5IGhhcyBhbiBlZmZlY3QgaWYgdGhlIG9w
dGlvbiB7QGxpbmsgI0NPTVBJTEVSX0FOTk9UQVRJT05fTlVMTF9BTkFMWVNJU30gaXMgZW5hYmxl
ZC48L3A+CiAJICogPGRsPgotCSAqIDxkdD5PcHRpb24gaWQ6PC9kdD48ZGQ+PGNvZGU+Im9yZy5l
Y2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLmFubm90YXRpb24ubm9ubnVsbGlzZGVmYXVsdCI8L2Nv
ZGU+PC9kZD4KLQkgKiA8ZHQ+UG9zc2libGUgdmFsdWVzOjwvZHQ+PGRkPjxjb2RlPnsgImRpc2Fi
bGVkIiwgImVuYWJsZWQiIH08L2NvZGU+LjwvZGQ+Ci0JICogPGR0PkRlZmF1bHQ6PC9kdD48ZGQ+
PGNvZGU+ImRpc2FibGVkIjwvY29kZT48L2RkPgorCSAqIDxkdD5PcHRpb24gaWQ6PC9kdD48ZGQ+
PGNvZGU+Im9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLmFubm90YXRpb24ubWlzc2luZ05v
bk51bGxCeURlZmF1bHRBbm5vdGF0aW9uIjwvY29kZT48L2RkPgorCSAqIDxkdD5Qb3NzaWJsZSB2
YWx1ZXM6PC9kdD48ZGQ+PGNvZGU+eyAiZXJyb3IiLCAid2FybmluZyIsICJpZ25vcmUiIH08L2Nv
ZGU+LjwvZGQ+CisJICogPGR0PkRlZmF1bHQ6PC9kdD48ZGQ+PGNvZGU+Imlnbm9yZSI8L2NvZGU+
PC9kZD4KIAkgKiA8L2RsPgogCSAqIEBzaW5jZSAzLjgKIAkgKiBAY2F0ZWdvcnkgQ29tcGlsZXJP
cHRpb25JRAogCSAqLwotCXB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIENPTVBJTEVSX05PTk5V
TExfSVNfREVGQVVMVCA9IFBMVUdJTl9JRCArICIuY29tcGlsZXIuYW5ub3RhdGlvbi5ub25udWxs
aXNkZWZhdWx0IjsgLy8kTk9OLU5MUy0xJAorCXB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIENP
TVBJTEVSX1BCX01JU1NJTkdfTk9OTlVMTF9CWV9ERUZBVUxUX0FOTk9UQVRJT04gPSBQTFVHSU5f
SUQgKyAiLmNvbXBpbGVyLmFubm90YXRpb24ubWlzc2luZ05vbk51bGxCeURlZmF1bHRBbm5vdGF0
aW9uIjsgLy8kTk9OLU5MUy0xJAogCS8qKgogCSAqIENvbXBpbGVyIG9wdGlvbiBJRDogUmVwb3J0
aW5nIFZpb2xhdGlvbnMgb2YgTnVsbCBTcGVjaWZpY2F0aW9ucy4KIAkgKiA8cD5EZXBlbmRpbmcg
b24gdGhpcyBvcHRpb24sIHRoZSBjb21waWxlciB3aWxsIGlzc3VlIGVpdGhlciBhbiBlcnJvciBv
ciBhIHdhcm5pbmcKQEAgLTE2MjIsOCArMTYyNCw3IEBACiAJICogPHA+V2hlbiBlbmFibGVkLCB0
aGUgY29tcGlsZXIgd2lsbCBpc3N1ZSBhbiBlcnJvciBvciBhIHdhcm5pbmcgd2hlbiBhIG5vbi1u
dWxsIGFubm90YXRpb24KIAkgKiAgICAoc2VlIHtAbGluayAjQ09NUElMRVJfTk9OTlVMTF9BTk5P
VEFUSU9OX05BTUV9KQogCSAqICAgIGlzIGFwcGxpZWQgYWx0aG91Z2ggdGhlIHNhbWUgZWZmZWN0
IGlzIGFscmVhZHkgYWNoaWV2ZWQgYnkgYSBkZWZhdWx0IGFwcGxpY2FibGUgYXQgdGhlCi0JICog
ICAgY3VycmVudCBsb2NhdGlvbi4gU3VjaCBhIGRlZmF1bHQgbWF5IGJlIHNldCBieSBlbmFibGlu
ZyB0aGUgb3B0aW9uCi0JICogICAge0BsaW5rICNDT01QSUxFUl9OT05OVUxMX0lTX0RFRkFVTFR9
IG9yIGJ5IHVzaW5nIHRoZSBhbm5vdGF0aW9uIHNwZWNpZmllZCBieSB0aGUgb3B0aW9uCisJICog
ICAgY3VycmVudCBsb2NhdGlvbi4gU3VjaCBhIGRlZmF1bHQgbWF5IGJlIHNldCBieSB1c2luZyB0
aGUgYW5ub3RhdGlvbiBzcGVjaWZpZWQgYnkgdGhlIG9wdGlvbgogCSAqICAgIHtAbGluayAjQ09N
UElMRVJfTk9OTlVMTF9CWV9ERUZBVUxUX0FOTk9UQVRJT05fTkFNRX0uCiAJICogPC9wPgogCSAq
IDxwPlRoaXMgb3B0aW9uIG9ubHkgaGFzIGFuIGVmZmVjdCBpZiB0aGUgb3B0aW9uIHtAbGluayAj
Q09NUElMRVJfQU5OT1RBVElPTl9OVUxMX0FOQUxZU0lTfSBpcyBlbmFibGVkLjwvcD4KZGlmZiAt
LWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb3JlL1BhY2thZ2VGcmFnbWVudC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvUGFja2FnZUZyYWdtZW50LmphdmEKaW5kZXgg
MzVmYjM0Yi4uMjlmZWI5ZSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvUGFja2FnZUZyYWdtZW50LmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUv
UGFja2FnZUZyYWdtZW50LmphdmEKQEAgLTEsNSArMSw1IEBACiAvKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKgotICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDA5IElCTSBDb3Jwb3JhdGlvbiBhbmQgb3Ro
ZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEyIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3Ro
ZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21w
YW55aW5nIG1hdGVyaWFscwogICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBv
ZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0
aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdApAQCAtMTcsNiArMTcsNyBAQAog
CiBpbXBvcnQgb3JnLmVjbGlwc2UuY29yZS5yZXNvdXJjZXMuSUNvbnRhaW5lcjsKIGltcG9ydCBv
cmcuZWNsaXBzZS5jb3JlLnJlc291cmNlcy5JRm9sZGVyOworaW1wb3J0IG9yZy5lY2xpcHNlLmNv
cmUucmVzb3VyY2VzLklNYXJrZXI7CiBpbXBvcnQgb3JnLmVjbGlwc2UuY29yZS5yZXNvdXJjZXMu
SVJlc291cmNlOwogaW1wb3J0IG9yZy5lY2xpcHNlLmNvcmUucnVudGltZS5Db3JlRXhjZXB0aW9u
OwogaW1wb3J0IG9yZy5lY2xpcHNlLmNvcmUucnVudGltZS5JUGF0aDsKQEAgLTI3LDYgKzI4LDcg
QEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5JQ2xhc3NGaWxlOwogaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5jb3JlLklDb21waWxhdGlvblVuaXQ7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmNvcmUuSUphdmFFbGVtZW50OworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLklKYXZhTW9k
ZWxNYXJrZXI7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuSUphdmFNb2RlbFN0YXR1c0Nv
bnN0YW50czsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5JSmF2YVByb2plY3Q7CiBpbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuSVBhY2thZ2VGcmFnbWVudDsKQEAgLTM2LDggKzM4LDEw
IEBACiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuSmF2YUNvcmU7CiBpbXBvcnQgb3JnLmVj
bGlwc2UuamR0LmNvcmUuSmF2YU1vZGVsRXhjZXB0aW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5jb3JlLldvcmtpbmdDb3B5T3duZXI7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuY29t
cGlsZXIuQ2F0ZWdvcml6ZWRQcm9ibGVtOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5h
bC5jb21waWxlci51dGlsLlN1ZmZpeENvbnN0YW50czsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29yZS5KYXZhTW9kZWxNYW5hZ2VyLlBlclByb2plY3RJbmZvOworaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLmJ1aWxkZXIuSmF2YUJ1aWxkZXI7CiBpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvcmUudXRpbC5NZW1lbnRvVG9rZW5pemVyOwogaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLnV0aWwuTWVzc2FnZXM7CiBpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvcmUudXRpbC5VdGlsOwpAQCAtNTEyLDQgKzUxNiw2
OCBAQAogCiAJcmV0dXJuIEphdmFNb2RlbFN0YXR1cy5WRVJJRklFRF9PSzsKIH0KKworLyoqCisg
KiBSZWNvcmQgYSBuZXcgbWFya2VyIGRlbm90aW5nIGEgcGFja2FnZSBwcm9ibGVtCisgKi8KK3B1
YmxpYyB2b2lkIGNyZWF0ZVBhY2thZ2VQcm9ibGVtTWFya2VyKENhdGVnb3JpemVkUHJvYmxlbSBw
cm9ibGVtKSB7CisJU3RyaW5nIG1hcmtlclR5cGUgPSBwcm9ibGVtLmdldE1hcmtlclR5cGUoKTsK
KwlJUmVzb3VyY2UgcmVzb3VyY2UgPSB0aGlzLnJlc291cmNlKCk7CisJaW50IGlkID0gcHJvYmxl
bS5nZXRJRCgpOworCWJvb2xlYW4gbWFuYWdlZFByb2JsZW0gPSBmYWxzZTsKKwlpZiAoSUphdmFN
b2RlbE1hcmtlci5KQVZBX01PREVMX1BST0JMRU1fTUFSS0VSLmVxdWFscyhtYXJrZXJUeXBlKSkg
eworCQlJTWFya2VyIG1hcmtlcjsKKwkJdHJ5IHsKKwkJCW1hcmtlciA9IHJlc291cmNlLmNyZWF0
ZU1hcmtlcihtYXJrZXJUeXBlKTsKKwkJCVN0cmluZ1tdIGF0dHJpYnV0ZU5hbWVzID0geworCQkJ
CUlNYXJrZXIuTUVTU0FHRSwKKwkJCQlJTWFya2VyLlNFVkVSSVRZLAorCQkJCUlKYXZhTW9kZWxN
YXJrZXIuSUQsCisJCQkJSU1hcmtlci5DSEFSX1NUQVJULAorCQkJCUlNYXJrZXIuQ0hBUl9FTkQs
CisJCQkJSU1hcmtlci5MSU5FX05VTUJFUiwKKwkJCQlJSmF2YU1vZGVsTWFya2VyLkFSR1VNRU5U
UywKKwkJCQlJSmF2YU1vZGVsTWFya2VyLkNBVEVHT1JZX0lELAorCQkJfTsKKwkJCWludCBzdGFu
ZGFyZExlbmd0aCA9IGF0dHJpYnV0ZU5hbWVzLmxlbmd0aDsKKwkJCVN0cmluZ1tdIGFsbE5hbWVz
ID0gYXR0cmlidXRlTmFtZXM7CisJCQlpbnQgbWFuYWdlZExlbmd0aCA9IG1hbmFnZWRQcm9ibGVt
ID8gMCA6IDE7CisJCQlTdHJpbmdbXSBleHRyYUF0dHJpYnV0ZU5hbWVzID0gcHJvYmxlbS5nZXRF
eHRyYU1hcmtlckF0dHJpYnV0ZU5hbWVzKCk7CisJCQlpbnQgZXh0cmFMZW5ndGggPSBleHRyYUF0
dHJpYnV0ZU5hbWVzID09IG51bGwgPyAwIDogZXh0cmFBdHRyaWJ1dGVOYW1lcy5sZW5ndGg7CisJ
CQlpZiAobWFuYWdlZExlbmd0aCA+IDAgfHwgZXh0cmFMZW5ndGggPiAwKSB7CisJCQkJYWxsTmFt
ZXMgPSBuZXcgU3RyaW5nW3N0YW5kYXJkTGVuZ3RoICsgbWFuYWdlZExlbmd0aCArIGV4dHJhTGVu
Z3RoXTsKKwkJCQlTeXN0ZW0uYXJyYXljb3B5KGF0dHJpYnV0ZU5hbWVzLCAwLCBhbGxOYW1lcywg
MCwgc3RhbmRhcmRMZW5ndGgpOworCQkJCWlmIChtYW5hZ2VkTGVuZ3RoID4gMCkKKwkJCQkJYWxs
TmFtZXNbc3RhbmRhcmRMZW5ndGhdID0gSU1hcmtlci5TT1VSQ0VfSUQ7CisJCQkJU3lzdGVtLmFy
cmF5Y29weShleHRyYUF0dHJpYnV0ZU5hbWVzLCAwLCBhbGxOYW1lcywgc3RhbmRhcmRMZW5ndGgg
KyBtYW5hZ2VkTGVuZ3RoLCBleHRyYUxlbmd0aCk7CisJCQl9CisJCisJCQlPYmplY3RbXSBhbGxW
YWx1ZXMgPSBuZXcgT2JqZWN0W2FsbE5hbWVzLmxlbmd0aF07CisJCQkvLyBzdGFuZGFyZCBhdHRy
aWJ1dGVzCisJCQlpbnQgaW5kZXggPSAwOworCQkJYWxsVmFsdWVzW2luZGV4KytdID0gcHJvYmxl
bS5nZXRNZXNzYWdlKCk7IC8vIG1lc3NhZ2UKKwkJCWFsbFZhbHVlc1tpbmRleCsrXSA9IHByb2Js
ZW0uaXNFcnJvcigpID8gbmV3IEludGVnZXIoSU1hcmtlci5TRVZFUklUWV9FUlJPUikgOiBuZXcg
SW50ZWdlcihJTWFya2VyLlNFVkVSSVRZX1dBUk5JTkcpOyAvLyBzZXZlcml0eQorCQkJYWxsVmFs
dWVzW2luZGV4KytdID0gbmV3IEludGVnZXIoaWQpOyAvLyBJRAorCQkJYWxsVmFsdWVzW2luZGV4
KytdID0gbmV3IEludGVnZXIocHJvYmxlbS5nZXRTb3VyY2VTdGFydCgpKTsgLy8gc3RhcnQKKwkJ
CWludCBlbmQgPSBwcm9ibGVtLmdldFNvdXJjZUVuZCgpOworCQkJYWxsVmFsdWVzW2luZGV4Kytd
ID0gbmV3IEludGVnZXIoZW5kID4gMCA/IGVuZCArIDEgOiBlbmQpOyAvLyBlbmQKKwkJCWFsbFZh
bHVlc1tpbmRleCsrXSA9IG5ldyBJbnRlZ2VyKHByb2JsZW0uZ2V0U291cmNlTGluZU51bWJlcigp
KTsgLy8gbGluZQorCQkJYWxsVmFsdWVzW2luZGV4KytdID0gVXRpbC5nZXRQcm9ibGVtQXJndW1l
bnRzRm9yTWFya2VyKHByb2JsZW0uZ2V0QXJndW1lbnRzKCkpOyAvLyBhcmd1bWVudHMKKwkJCWFs
bFZhbHVlc1tpbmRleCsrXSA9IG5ldyBJbnRlZ2VyKHByb2JsZW0uZ2V0Q2F0ZWdvcnlJRCgpKTsg
Ly8gY2F0ZWdvcnkgSUQKKwkJCS8vIFNPVVJDRV9JRCBhdHRyaWJ1dGUgZm9yIEpEVCBwcm9ibGVt
cworCQkJaWYgKG1hbmFnZWRMZW5ndGggPiAwKQorCQkJCWFsbFZhbHVlc1tpbmRleCsrXSA9IEph
dmFCdWlsZGVyLlNPVVJDRV9JRDsKKwkJCS8vIG9wdGlvbmFsIGV4dHJhIGF0dHJpYnV0ZXMKKwkJ
CWlmIChleHRyYUxlbmd0aCA+IDApCisJCQkJU3lzdGVtLmFycmF5Y29weShwcm9ibGVtLmdldEV4
dHJhTWFya2VyQXR0cmlidXRlVmFsdWVzKCksIDAsIGFsbFZhbHVlcywgaW5kZXgsIGV4dHJhTGVu
Z3RoKTsKKwkKKwkJCW1hcmtlci5zZXRBdHRyaWJ1dGVzKGFsbE5hbWVzLCBhbGxWYWx1ZXMpOwor
CQl9IGNhdGNoIChDb3JlRXhjZXB0aW9uIGUpIHsKKwkJCS8vIGNvdWxkIG5vdCBjcmVhdGUgbWFy
a2VyOiBjYW5ub3QgZG8gbXVjaAorCQkJaWYgKEphdmFNb2RlbE1hbmFnZXIuVkVSQk9TRSkgewor
CQkJCWUucHJpbnRTdGFja1RyYWNlKCk7CisJCQl9CisJCX0KKwl9Cit9CiB9CmRpZmYgLS1naXQg
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29y
ZS9idWlsZGVyL0luY3JlbWVudGFsSW1hZ2VCdWlsZGVyLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9idWlsZGVyL0luY3JlbWVu
dGFsSW1hZ2VCdWlsZGVyLmphdmEKaW5kZXggZDEzMjVjMS4uZWI0ZTk1YyAxMDA2NDQKLS0tIGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUv
YnVpbGRlci9JbmNyZW1lbnRhbEltYWdlQnVpbGRlci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL2J1aWxkZXIvSW5jcmVt
ZW50YWxJbWFnZUJ1aWxkZXIuamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTAgSUJNIENvcnBvcmF0aW9uIGFuZCBv
dGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTIgSUJNIENvcnBvcmF0aW9uIGFuZCBv
dGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRoZSBhY2Nv
bXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhlIHRlcm1z
IG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29tcGFuaWVz
IHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC03OTYsNiArNzk2LDEw
IEBACiB9CiAKIHByb3RlY3RlZCB2b2lkIHVwZGF0ZVByb2JsZW1zRm9yKFNvdXJjZUZpbGUgc291
cmNlRmlsZSwgQ29tcGlsYXRpb25SZXN1bHQgcmVzdWx0KSB0aHJvd3MgQ29yZUV4Y2VwdGlvbiB7
CisJaWYgKENoYXJPcGVyYXRpb24uZXF1YWxzKHNvdXJjZUZpbGUuZ2V0TWFpblR5cGVOYW1lKCks
IFR5cGVDb25zdGFudHMuUEFDS0FHRV9JTkZPX05BTUUpKSB7CisJCUlSZXNvdXJjZSBwa2dSZXNv
dXJjZSA9IHNvdXJjZUZpbGUucmVzb3VyY2UuZ2V0UGFyZW50KCk7CisJCXBrZ1Jlc291cmNlLmRl
bGV0ZU1hcmtlcnMoSUphdmFNb2RlbE1hcmtlci5KQVZBX01PREVMX1BST0JMRU1fTUFSS0VSLCBm
YWxzZSwgSVJlc291cmNlLkRFUFRIX0lORklOSVRFKTsKKwl9CiAJSU1hcmtlcltdIG1hcmtlcnMg
PSBKYXZhQnVpbGRlci5nZXRQcm9ibGVtc0Zvcihzb3VyY2VGaWxlLnJlc291cmNlKTsKIAlDYXRl
Z29yaXplZFByb2JsZW1bXSBwcm9ibGVtcyA9IHJlc3VsdC5nZXRQcm9ibGVtcygpOwogCWlmIChw
cm9ibGVtcyA9PSBudWxsICYmIG1hcmtlcnMubGVuZ3RoID09IDApIHJldHVybjsKZGlmZiAtLWdp
dCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b3JlL3V0aWwvVXRpbC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvcmUvdXRpbC9VdGlsLmphdmEKaW5kZXggMjAyMzk1NC4uZTQ1ZTg3
MyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0
L2ludGVybmFsL2NvcmUvdXRpbC9VdGlsLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
bW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvdXRpbC9VdGlsLmphdmEKQEAgLTEs
NSArMSw1IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDAw
LCAyMDExIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0IChjKSAyMDAw
LCAyMDEyIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0cyByZXNlcnZl
ZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwogICogYXJlIG1h
ZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5z
ZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2
YWlsYWJsZSBhdApAQCAtOTQwLDcgKzk0MCw3IEBACiAJCXJldHVybiBsaW5lU2VwYXJhdG9yOwog
CX0KIAotCXByaXZhdGUgc3RhdGljIElQYWNrYWdlRnJhZ21lbnQgZ2V0UGFja2FnZUZyYWdtZW50
KGNoYXJbXSBmaWxlTmFtZSwgaW50IHBrZ0VuZCwgaW50IGphclNlcGFyYXRvcikgeworCXB1Ymxp
YyBzdGF0aWMgSVBhY2thZ2VGcmFnbWVudCBnZXRQYWNrYWdlRnJhZ21lbnQoY2hhcltdIGZpbGVO
YW1lLCBpbnQgcGtnRW5kLCBpbnQgamFyU2VwYXJhdG9yKSB7CiAJCWlmIChqYXJTZXBhcmF0b3Ig
IT0gLTEpIHsKIAkJCVN0cmluZyBqYXJNZW1lbnRvID0gbmV3IFN0cmluZyhmaWxlTmFtZSwgMCwg
amFyU2VwYXJhdG9yKTsKIAkJCVBhY2thZ2VGcmFnbWVudFJvb3Qgcm9vdCA9IChQYWNrYWdlRnJh
Z21lbnRSb290KSBKYXZhQ29yZS5jcmVhdGUoamFyTWVtZW50byk7
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>211957</attachid>
            <date>2012-03-02 08:47:00 -0500</date>
            <delta_ts>2012-03-07 03:36:23 -0500</delta_ts>
            <desc>doc patch</desc>
            <filename>doc-for-bug-372012-compilernull-Warn-when-defaults-n.patch</filename>
            <type>text/plain</type>
            <size>2930</size>
            <attacher name="Ayushman Jain">amj87.iitr</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL2J1bmRsZXMvb3JnLmVjbGlwc2UuamR0LmRvYy5pc3YvZ3VpZGUvamR0X2Fw
aV9vcHRpb25zLmh0bSBiL2J1bmRsZXMvb3JnLmVjbGlwc2UuamR0LmRvYy5pc3YvZ3VpZGUvamR0
X2FwaV9vcHRpb25zLmh0bQppbmRleCAwMjFkMTEzLi5jNTBkOGJkIDEwMDY0NAotLS0gYS9idW5k
bGVzL29yZy5lY2xpcHNlLmpkdC5kb2MuaXN2L2d1aWRlL2pkdF9hcGlfb3B0aW9ucy5odG0KKysr
IGIvYnVuZGxlcy9vcmcuZWNsaXBzZS5qZHQuZG9jLmlzdi9ndWlkZS9qZHRfYXBpX29wdGlvbnMu
aHRtCkBAIC0xNDU4LDYgKzE0NTgsMjkgQEAKIDwvdHI+CiAKIDx0cj4KKzx0ZCBjb2xzcGFuPSIy
Ij48Yj5SZXBvcnRpbmcgbWlzc2luZyBkZWZhdWx0IG51bGxuZXNzIGFubm90YXRpb248L2I+ICg8
Yj48YSBocmVmPQorIi4uL3JlZmVyZW5jZS9hcGkvb3JnL2VjbGlwc2UvamR0L2NvcmUvSmF2YUNv
cmUuaHRtbCNDT01QSUxFUl9QQl9NSVNTSU5HX05PTk5VTExfQllfREVGQVVMVF9BTk5PVEFUSU9O
Ij5DT01QSUxFUl9QQl9NSVNTSU5HX05PTk5VTExfQllfREVGQVVMVF9BTk5PVEFUSU9OPC9hPjwv
Yj4pPC90ZD4KKzwvdHI+Cis8dHIgdmFsaWduPSJ0b3AiPgorPHRkIHJvd3NwYW49IjMiPjxwPldo
ZW4gZW5hYmxlZCwgdGhlIGNvbXBpbGVyIHdpbGwgaXNzdWUgYW4gZXJyb3Igb3IgYSB3YXJuaW5n
IGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6PC9wPgorPHVsPgorPGxpPiBXaGVuIGEgcGFja2FnZSBk
b2VzIG5vdCBjb250YWluIGEgZG9lcyBub3QgY29udGFpbiBhIGRlZmF1bHQgbnVsbG5lc3MgYW5u
b3RhdGlvbiwgYXMgYSByZXN1bHQgb2YgbWlzc2luZyBwYWNrYWdlLWluZm8uamF2YSAKK29yIG1p
c3NpbmcgZGVmYXVsdCBudWxsbmVzcyBhbm5vdGF0aW9uIGluIHBhY2thZ2UtaW5mby5qYXZhLjwv
bGk+Cis8bGk+IFdoZW4gYSB0eXBlIGluc2lkZSBhIGRlZmF1bHQgcGFja2FnZSBkb2VzIG5vdCBj
b250YWluIGEgZGVmYXVsdCBudWxsbmVzcyBhbm5vdGF0aW9uLjwvbGk+Cis8L3VsPgorPHA+VGhp
cyBvcHRpb24gb25seSBoYXMgYW4gZWZmZWN0IGlmIHRoZSBvcHRpb24gPGEgaHJlZj0iLi4vcmVm
ZXJlbmNlL2FwaS9vcmcvZWNsaXBzZS9qZHQvY29yZS9KYXZhQ29yZS5odG1sI0NPTVBJTEVSX0FO
Tk9UQVRJT05fTlVMTF9BTkFMWVNJUyI+Q09NUElMRVJfQU5OT1RBVElPTl9OVUxMX0FOQUxZU0lT
PC9hPiBpcyBlbmFibGVkLjwvcD4KKzwvdGQ+Cis8dGQ+PGI+PGEgaHJlZj0iLi4vcmVmZXJlbmNl
L2FwaS9vcmcvZWNsaXBzZS9qZHQvY29yZS9KYXZhQ29yZS5odG1sI0VSUk9SIj5FUlJPUjwvYT48
L2I+PC90ZD4KKzwvdHI+Cis8dHIgdmFsaWduPSJ0b3AiPgorPHRkPjxiPjxhIGhyZWY9CisiLi4v
cmVmZXJlbmNlL2FwaS9vcmcvZWNsaXBzZS9qZHQvY29yZS9KYXZhQ29yZS5odG1sI1dBUk5JTkci
PldBUk5JTkc8L2E+PC9iPjwvdGQ+Cis8L3RyPgorPHRyIHZhbGlnbj0idG9wIj4KKzx0ZD48Yj48
aT48YSBocmVmPSIuLi9yZWZlcmVuY2UvYXBpL29yZy9lY2xpcHNlL2pkdC9jb3JlL0phdmFDb3Jl
Lmh0bWwjSUdOT1JFIj5JR05PUkU8L2E+PC9iPjwvaT48L3RkPgorPC90cj4KKworPHRyPgogPHRk
IGNvbHNwYW49IjIiPjxhIG5hbWU9IlJFRFVOREFOVF9UWVBFX0FSR1VNRU5UUyIgaWQ9IlJFRFVO
REFOVF9UWVBFX0FSR1VNRU5UUyI+PC9hPjxiPlJlcG9ydGluZyBSZWR1bmRhbnQKIFNwZWNpZmlj
YXRpb24gb2YgdHlwZSBhcmd1bWVudHMgZm9yIGdlbmVyaWMgY2xhc3MgaW5zdGFuY2UgY3JlYXRp
b248L2I+ICg8Yj48YSBocmVmPQogIi4uL3JlZmVyZW5jZS9hcGkvb3JnL2VjbGlwc2UvamR0L2Nv
cmUvSmF2YUNvcmUuaHRtbCNDT01QSUxFUl9QQl9SRURVTkRBTlRfVFlQRV9BUkdVTUVOVFMiPkNP
TVBJTEVSX1BCX1JFRFVOREFOVF9UWVBFX0FSR1VNRU5UUzwvYT48L2I+KTwvdGQ+CmRpZmYgLS1n
aXQgYS9idW5kbGVzL29yZy5lY2xpcHNlLmpkdC5kb2MudXNlci90YXNrcy90YXNrLXVzaW5nX2Jh
dGNoX2NvbXBpbGVyLmh0bSBiL2J1bmRsZXMvb3JnLmVjbGlwc2UuamR0LmRvYy51c2VyL3Rhc2tz
L3Rhc2stdXNpbmdfYmF0Y2hfY29tcGlsZXIuaHRtCmluZGV4IDY3NWE2M2IuLmZhZDRiNTMgMTAw
NjQ0Ci0tLSBhL2J1bmRsZXMvb3JnLmVjbGlwc2UuamR0LmRvYy51c2VyL3Rhc2tzL3Rhc2stdXNp
bmdfYmF0Y2hfY29tcGlsZXIuaHRtCisrKyBiL2J1bmRsZXMvb3JnLmVjbGlwc2UuamR0LmRvYy51
c2VyL3Rhc2tzL3Rhc2stdXNpbmdfYmF0Y2hfY29tcGlsZXIuaHRtCkBAIC04NDEsOSArODQxLDkg
QEAKIDx0ZCBjb2xzcGFuPSIzIj5Db25zaWRlciByZWZlcmVuY2VzIGluc2lkZSBqYXZhZG9jLjwv
dGQ+CiA8L3RyPgogPHRyPgotPHRkIHZhbGlnbj0idG9wIj4tbm9uTnVsbEJ5RGVmYXVsdDwvdGQ+
Ci08dGQgY29sc3Bhbj0iMyI+V2hlbiBhbm5vdGF0aW9uIGJhc2VkIG51bGwgYW5hbHlzaXMgaXMg
ZW5hYmxlZCAodXNpbmcgIm51bGxBbm5vdCIsIGFib3ZlKSBnbG9iYWxseSB1c2Ugbm9ubnVsbCBh
cyB0aGUgZGVmYXVsdC4KLVRoaXMgaW1wbGllcyB0aGF0IGFsbCB0eXBlcyBpbiBtZXRob2Qgc2ln
bmF0dXJlcyB3aXRob3V0IGEgbnVsbCBhbm5vdGF0aW9uIGFyZSBjb25zaWRlcmVkIGFzIHNwZWNp
ZmllZCBub25udWxsLjwvdGQ+Cis8dGQgdmFsaWduPSJ0b3AiPi1taXNzaW5nTnVsbERlZmF1bHQ8
L3RkPgorPHRkIGNvbHNwYW49IjMiPldoZW4gYW5ub3RhdGlvbiBiYXNlZCBudWxsIGFuYWx5c2lz
IGlzIGVuYWJsZWQgKHVzaW5nICJudWxsQW5ub3QiLCBhYm92ZSksIHRoaXMgb3B0aW9uIAord2ls
bCByYWlzZSBhIHdhcm5pbmcgd2hlbmV2ZXIgdGhlcmUgaXMgbm8gZGVmYXVsdCBhbm5vdGF0aW9u
IG9uIGEgcGFja2FnZSBvciBhIHR5cGUuPC90ZD4KIDwvdHI+CiA8dHI+CiA8dGggY29sc3Bhbj0i
NCI+SGVscGluZyBvcHRpb25zPC90aD4=
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>212134</attachid>
            <date>2012-03-06 09:45:00 -0500</date>
            <delta_ts>2012-03-07 03:34:43 -0500</delta_ts>
            <desc>proposed fix v3.0 + regression tests</desc>
            <filename>372012-2.patch</filename>
            <type>text/plain</type>
            <size>58271</size>
            <attacher name="Ayushman Jain">amj87.iitr</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmJ1aWxkZXIvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2J1aWxkZXIvQW5ub3RhdGlvbkRlcGVuZGVuY3lUZXN0cy5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuYnVpbGRlci9zcmMvb3JnL2VjbGlwc2Uv
amR0L2NvcmUvdGVzdHMvYnVpbGRlci9Bbm5vdGF0aW9uRGVwZW5kZW5jeVRlc3RzLmphdmEKaW5k
ZXggOTQ5MDM4ZC4uMjhhMmQ3MiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVz
dHMuYnVpbGRlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvYnVpbGRlci9Bbm5vdGF0
aW9uRGVwZW5kZW5jeVRlc3RzLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMu
YnVpbGRlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvYnVpbGRlci9Bbm5vdGF0aW9u
RGVwZW5kZW5jeVRlc3RzLmphdmEKQEAgLTE1MDcsNCArMTUwNyw0NSBAQAogCQkvLyB2ZXJpZnkg
dGhhdCBUZXN0MSB3YXMgcmVjb21waWxlZAogCQlleHBlY3RpbmdVbmlxdWVDb21waWxlZENsYXNz
ZXMobmV3IFN0cmluZ1tdIHsgInAxLlRlc3QxIiwgInAxLlRlc3QyIiB9KTsKIAl9CisJCisJLy8g
aHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM3MjAxMgorCS8v
IHRlc3QgbWlzc2luZyBkZWZhdWx0IG51bGxuZXNzIGFubm90YXRpb24gZm9yIGEgcGFja2FnZSB3
aXRob3V0IHBhY2thZ2UtaW5mbworCS8vIHRlc3Qgd2hlbiB0aGUgcGFja2FnZS1pbmZvIGlzIGFk
ZGVkIHdpdGggdGhlIGRlZmF1bHQgYW5ub3RhdGlvbiwgdGhlIHByb2JsZW0gZGlzYXBwZWFycwor
CXB1YmxpYyB2b2lkIHRlc3RCdWczNzIwMTIoKSB0aHJvd3MgSmF2YU1vZGVsRXhjZXB0aW9uLCBJ
T0V4Y2VwdGlvbiB7CisJCS8vIHByZXBhcmUgdGhlIHByb2plY3Q6CisJCXNldHVwUHJvamVjdEZv
ck51bGxBbm5vdGF0aW9ucygpOworCQllbnYuZ2V0SmF2YVByb2plY3QodGhpcy5wcm9qZWN0UGF0
aCkuc2V0T3B0aW9uKEphdmFDb3JlLkNPTVBJTEVSX1BCX01JU1NJTkdfTk9OTlVMTF9CWV9ERUZB
VUxUX0FOTk9UQVRJT04sIEphdmFDb3JlLkVSUk9SKTsKKwkJZW52LmdldEphdmFQcm9qZWN0KHRo
aXMucHJvamVjdFBhdGgpLnNldE9wdGlvbihKYXZhQ29yZS5DT01QSUxFUl9QQl9SRURVTkRBTlRf
TlVMTF9BTk5PVEFUSU9OLCBKYXZhQ29yZS5FUlJPUik7CisJCVN0cmluZyB0ZXN0MUNvZGUgPSAi
cGFja2FnZSBwMTtcbiIJKworCQkJInB1YmxpYyBjbGFzcyBUZXN0MSB7XG4iICsKKwkJCSIgICAg
cHVibGljIHZvaWQgZm9vKCkge1xuIiArCisJCQkiICAgICAgICBuZXcgVGVzdDIoKS5iYXIoXCJc
Iik7XG4iICsKKwkJCSIgICAgfVxuIiArCisJCQkiCSBjbGFzcyBUZXN0MUlubmVye31cbiIgKwor
CQkJIn0iOworCQlTdHJpbmcgdGVzdDJDb2RlID0gInBhY2thZ2UgcDE7XG4iICsKKwkJCSJAb3Jn
LmVjbGlwc2UuamR0LmFubm90YXRpb24uTm9uTnVsbEJ5RGVmYXVsdFxuIiArCisJCQkicHVibGlj
IGNsYXNzIFRlc3QyIHtcbiIgKworCQkJIiAgICBwdWJsaWMgdm9pZCBiYXIoU3RyaW5nIHN0cikg
e31cbiIgKworCQkJIn0iOworCisJCUlQYXRoIHRlc3QxUGF0aCA9IGVudi5hZGRDbGFzcyggdGhp
cy5zcmNSb290LCAicDEiLCAiVGVzdDEiLCB0ZXN0MUNvZGUgKTsKKwkJZW52LmFkZENsYXNzKCB0
aGlzLnNyY1Jvb3QsICJwMSIsICJUZXN0MiIsIHRlc3QyQ29kZSApOworCisJCWZ1bGxCdWlsZCgg
dGhpcy5wcm9qZWN0UGF0aCApOworCQlleHBlY3RpbmdOb1Byb2JsZW1zRm9yKHRlc3QxUGF0aCk7
CisJCWV4cGVjdGluZ1Byb2JsZW1zRm9yKHRoaXMuc3JjUm9vdCwgCisJCQkJIlByb2JsZW0gOiBB
IGRlZmF1bHQgbnVsbG5lc3MgYW5ub3RhdGlvbiBoYXMgbm90IGJlZW4gc3BlY2lmaWVkIGZvciB0
aGUgcGFja2FnZSBwMSBbIHJlc291cmNlIDogPC9Qcm9qZWN0L3NyYy9wMT4gcmFuZ2UgOiA8LTEs
LTE+IGNhdGVnb3J5IDogPDkwPiBzZXZlcml0eSA6IDwyPl0iKTsKKworCQkvLyBhZGQgcGFja2Fn
ZS1pbmZvLmphdmEgd2l0aCBkZWZhdWx0IGFubm90YXRpb24KKwkJU3RyaW5nIHBhY2thZ2VJbmZv
Q29kZSA9ICJAb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTm9uTnVsbEJ5RGVmYXVsdFxuIiAr
CisJCQkicGFja2FnZSBwMTtcbiI7CisJCWVudi5hZGRDbGFzcyggdGhpcy5zcmNSb290LCAicDEi
LCAicGFja2FnZS1pbmZvIiwgcGFja2FnZUluZm9Db2RlICk7CisJCWluY3JlbWVudGFsQnVpbGQo
IHRoaXMucHJvamVjdFBhdGggKTsKKwkJZXhwZWN0aW5nUHJvYmxlbXNGb3IodGhpcy5wcm9qZWN0
UGF0aCwKKwkJCQkiUHJvYmxlbSA6IE51bGxuZXNzIGRlZmF1bHQgaXMgcmVkdW5kYW50IHdpdGgg
YSBkZWZhdWx0IHNwZWNpZmllZCBmb3IgdGhlIGVuY2xvc2luZyBwYWNrYWdlIHAxIFsgcmVzb3Vy
Y2UgOiA8L1Byb2plY3Qvc3JjL3AxL1Rlc3QyLmphdmE+IHJhbmdlIDogPDEyLDU2PiBjYXRlZ29y
eSA6IDwxMjA+IHNldmVyaXR5IDogPDI+XSIpOworCisJCS8vIHZlcmlmeSB0aGF0IGFsbCBwYWNr
YWdlIENVJ3Mgd2VyZSByZWNvbXBpbGVkCisJCWV4cGVjdGluZ1VuaXF1ZUNvbXBpbGVkQ2xhc3Nl
cyhuZXcgU3RyaW5nW10geyAicDEuVGVzdDEiLCAicDEuVGVzdDEkVGVzdDFJbm5lciIsICJwMS5U
ZXN0MiIsICJwMS5wYWNrYWdlLWluZm8iIH0pOworCX0KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0
cy9jb21waWxlci9yZWdyZXNzaW9uL0JhdGNoQ29tcGlsZXJUZXN0LmphdmEgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
Y29tcGlsZXIvcmVncmVzc2lvbi9CYXRjaENvbXBpbGVyVGVzdC5qYXZhCmluZGV4IDAzMGYwZmQu
LjRiOTgyOGMgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVy
L3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0JhdGNo
Q29tcGlsZXJUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGls
ZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vQmF0
Y2hDb21waWxlclRlc3QuamF2YQpAQCAtNzksNyArNzksNyBAQAogCQkJIn1cbiI7CiAKIAlzdGF0
aWMgewotLy8JCVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1tdIHsgInRlc3QzMSIgfTsKKy8vCQlU
RVNUU19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7ICJ0ZXN0MzE1X3dhcm5fb3B0aW9uc19hIiB9Owog
Ly8JCVRFU1RTX05VTUJFUlMgPSBuZXcgaW50W10geyAzMDYgfTsKIC8vCQlURVNUU19SQU5HRSA9
IG5ldyBpbnRbXSB7IDI5OCwgLTEgfTsKIAl9CkBAIC0xNjQ0LDkgKzE2NDQsOCBAQAogICAgICAg
ICAiICAgIC1lbmFibGVKYXZhZG9jICAgICBjb25zaWRlciByZWZlcmVuY2VzIGluIGphdmFkb2Nc
biIgKwogICAgICAgICAiICAgIC1YZW1hY3MgICAgICAgICAgICB1c2VkIHRvIGVuYWJsZSBlbWFj
cy1zdHlsZSBvdXRwdXQgaW4gdGhlIGNvbnNvbGUuXG4iICsKICAgICAgICAgIiAgICAgICAgICAg
ICAgICAgICAgICAgSXQgZG9lcyBub3QgYWZmZWN0IHRoZSB4bWwgbG9nIG91dHB1dFxuIiArCi0g
ICAgICAgICIgICAgLW5vbk51bGxCeURlZmF1bHQgIGZvciBhbm5vdGF0aW9uIGJhc2VkIG51bGwg
YW5hbHlzaXMgYXNzdW1lIG5vbm51bGxcbiIgKyAKLSAgICAgICAgIiAgICAgICAgICAgICAgICAg
ICAgICAgYXMgdGhlIGdsb2JhbCBkZWZhdWx0XG4iICsgCi0gICAgICAgICIgXG4iICsKKyAgICAg
ICAgIiAgICAtbWlzc2luZ051bGxEZWZhdWx0ICByZXBvcnQgbWlzc2luZyBkZWZhdWx0IG51bGxu
ZXNzIGFubm90YXRpb25cbiIgKyAKKyAgICAgICAgIiBcbiIgKyAKICAgICAgICAgIiAgICAtPyAt
aGVscCAgICAgICAgICAgcHJpbnQgdGhpcyBoZWxwIG1lc3NhZ2VcbiIgKwogICAgICAgICAiICAg
IC12IC12ZXJzaW9uICAgICAgICBwcmludCBjb21waWxlciB2ZXJzaW9uXG4iICsKICAgICAgICAg
IiAgICAtc2hvd3ZlcnNpb24gICAgICAgcHJpbnQgY29tcGlsZXIgdmVyc2lvbiBhbmQgY29udGlu
dWVcbiIgKwpAQCAtMTgzOCw5ICsxODM3LDkgQEAKIAkJCSIJCTxhcmd1bWVudCB2YWx1ZT1cIi0t
LU9VVFBVVF9ESVJfUExBQ0VIT0xERVItLS1cIi8+XG4iICsgCiAJCQkiCTwvY29tbWFuZF9saW5l
PlxuIiArIAogCQkJIgk8b3B0aW9ucz5cbiIgKyAKKwkJCSIJCTxvcHRpb24ga2V5PVwib3JnLmVj
bGlwc2UuamR0LmNvcmUuY29tcGlsZXIuYW5ub3RhdGlvbi5taXNzaW5nTm9uTnVsbEJ5RGVmYXVs
dEFubm90YXRpb25cIiB2YWx1ZT1cImlnbm9yZVwiLz5cbiIgKyAKIAkJCSIJCTxvcHRpb24ga2V5
PVwib3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuYW5ub3RhdGlvbi5ub25udWxsXCIgdmFs
dWU9XCJvcmcuZWNsaXBzZS5qZHQuYW5ub3RhdGlvbi5Ob25OdWxsXCIvPlxuIiArIAogCQkJIgkJ
PG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5hbm5vdGF0aW9uLm5v
bm51bGxieWRlZmF1bHRcIiB2YWx1ZT1cIm9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uLk5vbk51
bGxCeURlZmF1bHRcIi8+XG4iICsgCi0JCQkiCQk8b3B0aW9uIGtleT1cIm9yZy5lY2xpcHNlLmpk
dC5jb3JlLmNvbXBpbGVyLmFubm90YXRpb24ubm9ubnVsbGlzZGVmYXVsdFwiIHZhbHVlPVwiZGlz
YWJsZWRcIi8+XG4iICsgCiAJCQkiCQk8b3B0aW9uIGtleT1cIm9yZy5lY2xpcHNlLmpkdC5jb3Jl
LmNvbXBpbGVyLmFubm90YXRpb24ubnVsbGFibGVcIiB2YWx1ZT1cIm9yZy5lY2xpcHNlLmpkdC5h
bm5vdGF0aW9uLk51bGxhYmxlXCIvPlxuIiArIAogCQkJIgkJPG9wdGlvbiBrZXk9XCJvcmcuZWNs
aXBzZS5qZHQuY29yZS5jb21waWxlci5hbm5vdGF0aW9uLm51bGxhbmFseXNpc1wiIHZhbHVlPVwi
ZGlzYWJsZWRcIi8+XG4iICsgCiAJCQkiCQk8b3B0aW9uIGtleT1cIm9yZy5lY2xpcHNlLmpkdC5j
b3JlLmNvbXBpbGVyLmNvZGVnZW4uaW5saW5lSnNyQnl0ZWNvZGVcIiB2YWx1ZT1cImRpc2FibGVk
XCIvPlxuIiArIApAQCAtMTI1OTgsMzEgKzEyNTk3LDI4IEBACiB9CiAKIC8vIGh0dHBzOi8vYnVn
cy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zMjUzNDIKLS8vIC13YXJuIG9wdGlv
biAtIHJlZ3Jlc3Npb24gdGVzdHMgdG8gY2hlY2sgb3B0aW9uIG51bGxBbm5vdAotLy8gTnVsbCB3
YXJuaW5ncyBiZWNhdXNlIG9mIGFubm90YXRpb25zLCBnbG9iYWwgbm9uTnVsbEJ5RGVmYXVsdAot
Ly8gRElTQUJMRUQgZHVlIHRvIGR5c2Z1bmN0aW9uYWwgZ2xvYmFsIGRlZmF1bHQgYWZ0ZXIgQnVn
IDM2NjA2MyAtIENvbXBpbGVyIHNob3VsZCBub3QgYWRkIHN5bnRoZXRpYyBATm9uTnVsbCBhbm5v
dGF0aW9ucwotcHVibGljIHZvaWQgX3Rlc3QzMTVfd2Fybl9vcHRpb25zKCkgeworLy8gLXdhcm4g
b3B0aW9uIC0gcmVncmVzc2lvbiB0ZXN0cyB0byBjaGVjayBvcHRpb24gbnVsbEFubm90IGFuZCBt
aXNzaW5nTnVsbERlZmF1bHQKKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3df
YnVnLmNnaT9pZD0zNzIwMTIKK3B1YmxpYyB2b2lkIHRlc3QzMTVfd2Fybl9vcHRpb25zKCkgewog
CXRoaXMucnVuQ29uZm9ybVRlc3QoCiAJCW5ldyBTdHJpbmdbXSB7CisJCQkJInAvcGFja2FnZS1p
bmZvLmphdmEiLAorCQkJCSJAb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTm9uTnVsbEJ5RGVm
YXVsdFxuIiArCisJCQkJInBhY2thZ2UgcDtcbiIsCiAJCQkJInAvWC5qYXZhIiwKIAkJCQkicGFj
a2FnZSBwO1xuIiArCi0JCQkJImltcG9ydCBvcmcuZWNsaXBzZS5qZHQuYW5ub3RhdGlvbi4qO1xu
IiArCi0JCQkJIkBTdXBwcmVzc1dhcm5pbmdzKFwidW51c2VkXCIpXG4iICsKIAkJCQkicHVibGlj
IGNsYXNzIFgge1xuIiArCi0JCQkJIiAgT2JqZWN0IGZvbyhATnVsbGFibGUgT2JqZWN0IG8sIE9i
amVjdCBvMikge1xuIiArCi0JCQkJIiAgICBpZiAoby50b1N0cmluZygpID09IFwiXCIpeyByZXR1
cm4gbnVsbDt9XG4iICsKLQkJCQkiICAgIGlmIChvMiA9PSBudWxsKSB7fVxuIiArCi0JCQkJIiAg
ICBnb28obnVsbCkudG9TdHJpbmcoKTtcbiIgKwotCQkJCSIJIHJldHVybiBudWxsO1xuIiArCi0J
CQkJIiAgfVxuIiArCi0JCQkJIiAgQE51bGxhYmxlIE9iamVjdCBnb28oT2JqZWN0IG8yKSB7XG4i
ICsKLQkJCQkiICAgIHJldHVybiBuZXcgT2JqZWN0KCk7XG4iICsKLQkJCQkiICB9XG4iICsKLQkJ
CQkiICBATm9uTnVsbEJ5RGVmYXVsdCBPYmplY3QgaG9vKE9iamVjdCBvMikge1xuIiArIC8vIHJl
ZHVuZGFudAotCQkJCSIgICAgaWYgKG8yID09IG51bGwpXG4iICsKLQkJCQkiCSAgICByZXR1cm4g
bnVsbDtcbiIgKwotCQkJCSIgICAgcmV0dXJuIHRoaXM7XG4iICsKLQkJCQkiICB9XG4iICsKKwkJ
CQkifVxuIiwKKwkJCQkicDEvWDEuamF2YSIsCisJCQkJInBhY2thZ2UgcDE7XG4iICsKKwkJCQki
cHVibGljIGNsYXNzIFgxIHtcbiIgKworCQkJCSJ9XG4iLAorCQkJCSJwMS9YMWEuamF2YSIsCisJ
CQkJInBhY2thZ2UgcDE7XG4iICsKKwkJCQkicHVibGljIGNsYXNzIFgxYSB7XG4iICsKKwkJCQki
fVxuIiwKKwkJCQkiRGVmYXVsdDEuamF2YSIsCisJCQkJInB1YmxpYyBjbGFzcyBEZWZhdWx0MSB7
XG4iICsKIAkJCQkifVxuIiwKIAkJCQkib3JnL2VjbGlwc2UvamR0L2Fubm90YXRpb24vTm9uTnVs
bC5qYXZhIiwKIAkJCQlOT05OVUxMX0FOTk9UQVRJT05fQ09OVEVOVCwKQEAgLTEyNjM0LDUwICsx
MjYzMCw4NSBAQAogCQkiXCIiICsgT1VUUFVUX0RJUiArICBGaWxlLnNlcGFyYXRvciArICJwIiAr
IEZpbGUuc2VwYXJhdG9yICsgIlguamF2YVwiIgogCQkrICIgLXNvdXJjZXBhdGggXCIiICsgT1VU
UFVUX0RJUiArICJcIiIKIAkJKyAiIC0xLjUiCi0JCSsgIiAtd2FybjorbnVsbEFubm90IC13YXJu
OitudWxsIC1ub25OdWxsQnlEZWZhdWx0IC1wcm9jOm5vbmUgLWQgXCIiICsgT1VUUFVUX0RJUiAr
ICJcIiIsCisJCSsgIiAtd2FybjorbnVsbEFubm90IC13YXJuOitudWxsIC1taXNzaW5nTnVsbERl
ZmF1bHQgLXByb2M6bm9uZSAtZCBcIiIgKyBPVVRQVVRfRElSICsgIlwiIiwKKwkJIiIsCisJCSIi
LAorCQl0cnVlKTsKK30KKworLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19i
dWcuY2dpP2lkPTMyNTM0MgorLy8gLXdhcm4gb3B0aW9uIC0gcmVncmVzc2lvbiB0ZXN0cyB0byBj
aGVjayBvcHRpb24gbnVsbEFubm90IGFuZCBtaXNzaW5nTnVsbERlZmF1bHQKKy8vIGh0dHBzOi8v
YnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNzIwMTIKK3B1YmxpYyB2b2lk
IHRlc3QzMTVfd2Fybl9vcHRpb25zX2EoKSB7CisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCisJCW5l
dyBTdHJpbmdbXSB7CisJCQkJInAxL1gxLmphdmEiLAorCQkJCSJwYWNrYWdlIHAxO1xuIiArCisJ
CQkJInB1YmxpYyBjbGFzcyBYMSB7XG4iICsKKwkJCQkiICAgY2xhc3MgSW5uZXJ7fTtcbiIgKwor
CQkJCSIJWm9yaztcbiIgKworCQkJCSJ9XG4iLAorCQkJCSJvcmcvZWNsaXBzZS9qZHQvYW5ub3Rh
dGlvbi9Ob25OdWxsLmphdmEiLAorCQkJCU5PTk5VTExfQU5OT1RBVElPTl9DT05URU5ULAorCQkJ
CSJvcmcvZWNsaXBzZS9qZHQvYW5ub3RhdGlvbi9OdWxsYWJsZS5qYXZhIiwKKwkJCQlOVUxMQUJM
RV9BTk5PVEFUSU9OX0NPTlRFTlQsCisJCQkJIm9yZy9lY2xpcHNlL2pkdC9hbm5vdGF0aW9uL05v
bk51bGxCeURlZmF1bHQuamF2YSIsCQkJCQorCQkJCU5PTk5VTExfQllfREVGQVVMVF9BTk5PVEFU
SU9OX0NPTlRFTlQKKwkJfSwKKwkJIlwiIiArIE9VVFBVVF9ESVIgKyAgRmlsZS5zZXBhcmF0b3Ig
KyAicDEiICsgRmlsZS5zZXBhcmF0b3IgKyAiWDEuamF2YVwiIgorCQkrICIgLXNvdXJjZXBhdGgg
XCIiICsgT1VUUFVUX0RJUiArICJcIiIKKwkJKyAiIC0xLjUiCisJCSsgIiAtd2FybjorbnVsbEFu
bm90IC13YXJuOitudWxsIC1taXNzaW5nTnVsbERlZmF1bHQgLXByb2M6bm9uZSAtZCBcIiIgKyBP
VVRQVVRfRElSICsgIlwiIiwKIAkJIiIsCiAJCSItLS0tLS0tLS0tXG4iICsgCi0JCSIxLiBXQVJO
SU5HIGluIC0tLU9VVFBVVF9ESVJfUExBQ0VIT0xERVItLS0vcC9YLmphdmEgKGF0IGxpbmUgNilc
biIgKyAKLQkJIglpZiAoby50b1N0cmluZygpID09IFwiXCIpeyByZXR1cm4gbnVsbDt9XG4iICsg
Ci0JCSIJICAgIF5cbiIgKyAKLQkJIlBvdGVudGlhbCBudWxsIHBvaW50ZXIgYWNjZXNzOiBUaGUg
dmFyaWFibGUgbyBtYXkgYmUgbnVsbCBhdCB0aGlzIGxvY2F0aW9uXG4iICsgCisJCSIxLiBXQVJO
SU5HIGluIC0tLU9VVFBVVF9ESVJfUExBQ0VIT0xERVItLS0vcDEvWDEuamF2YSAoYXQgbGluZSAx
KVxuIiArIAorCQkiCXBhY2thZ2UgcDE7XG4iICsgCisJCSIJICAgICAgICBeXlxuIiArIAorCQki
QSBkZWZhdWx0IG51bGxuZXNzIGFubm90YXRpb24gaGFzIG5vdCBiZWVuIHNwZWNpZmllZCBmb3Ig
dGhlIHBhY2thZ2UgcDFcbiIgKyAKIAkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJIjIuIFdBUk5JTkcg
aW4gLS0tT1VUUFVUX0RJUl9QTEFDRUhPTERFUi0tLS9wL1guamF2YSAoYXQgbGluZSA2KVxuIiAr
IAotCQkiCWlmIChvLnRvU3RyaW5nKCkgPT0gXCJcIil7IHJldHVybiBudWxsO31cbiIgKyAKLQkJ
IgkgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5cbiIgKyAKLQkJIlR5cGUgbWlz
bWF0Y2g6IHJlcXVpcmVkIFwnQE5vbk51bGwgT2JqZWN0XCcgYnV0IHRoZSBwcm92aWRlZCB2YWx1
ZSBpcyBudWxsXG4iICsgCisJCSIyLiBFUlJPUiBpbiAtLS1PVVRQVVRfRElSX1BMQUNFSE9MREVS
LS0tL3AxL1gxLmphdmEgKGF0IGxpbmUgNClcbiIgKyAKKwkJIglab3JrO1xuIiArIAorCQkiCV5e
Xl5cbiIgKyAKKwkJIlN5bnRheCBlcnJvciBvbiB0b2tlbiBcIlpvcmtcIiwgVmFyaWFibGVEZWNs
YXJhdG9yIGV4cGVjdGVkIGFmdGVyIHRoaXMgdG9rZW5cbiIgKyAKIAkJIi0tLS0tLS0tLS1cbiIg
KyAKLQkJIjMuIFdBUk5JTkcgaW4gLS0tT1VUUFVUX0RJUl9QTEFDRUhPTERFUi0tLS9wL1guamF2
YSAoYXQgbGluZSA3KVxuIiArIAotCQkiCWlmIChvMiA9PSBudWxsKSB7fVxuIiArIAotCQkiCSAg
ICBeXlxuIiArIAotCQkiTnVsbCBjb21wYXJpc29uIGFsd2F5cyB5aWVsZHMgZmFsc2U6IFRoZSB2
YXJpYWJsZSBvMiBjYW5ub3QgYmUgbnVsbCBhdCB0aGlzIGxvY2F0aW9uXG4iICsgCisJCSIyIHBy
b2JsZW1zICgxIGVycm9yLCAxIHdhcm5pbmcpIiwgCisJCXRydWUpOworfQorCisvLyBodHRwczov
L2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzI1MzQyCisvLyAtd2FybiBv
cHRpb24gLSByZWdyZXNzaW9uIHRlc3RzIHRvIGNoZWNrIG9wdGlvbiBudWxsQW5ub3QgYW5kIG1p
c3NpbmdOdWxsRGVmYXVsdAorLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19i
dWcuY2dpP2lkPTM3MjAxMgorcHVibGljIHZvaWQgdGVzdDMxNV93YXJuX29wdGlvbnNfYigpIHsK
Kwl0aGlzLnJ1bk5lZ2F0aXZlVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCQkiWDEuamF2YSIs
CisJCQkJInB1YmxpYyBjbGFzcyBYMSB7XG4iICsKKwkJCQkiCVpvcms7XG4iICsKKwkJCQkifVxu
IiwKKwkJCQkib3JnL2VjbGlwc2UvamR0L2Fubm90YXRpb24vTm9uTnVsbC5qYXZhIiwKKwkJCQlO
T05OVUxMX0FOTk9UQVRJT05fQ09OVEVOVCwKKwkJCQkib3JnL2VjbGlwc2UvamR0L2Fubm90YXRp
b24vTnVsbGFibGUuamF2YSIsCisJCQkJTlVMTEFCTEVfQU5OT1RBVElPTl9DT05URU5ULAorCQkJ
CSJvcmcvZWNsaXBzZS9qZHQvYW5ub3RhdGlvbi9Ob25OdWxsQnlEZWZhdWx0LmphdmEiLAkJCQkK
KwkJCQlOT05OVUxMX0JZX0RFRkFVTFRfQU5OT1RBVElPTl9DT05URU5UCisJCX0sCisJCSJcIiIg
KyBPVVRQVVRfRElSICsgIEZpbGUuc2VwYXJhdG9yICsgIlgxLmphdmFcIiIKKwkJKyAiIC1zb3Vy
Y2VwYXRoIFwiIiArIE9VVFBVVF9ESVIgKyAiXCIiCisJCSsgIiAtMS41IgorCQkrICIgLXdhcm46
K251bGxBbm5vdCAtd2FybjorbnVsbCAtbWlzc2luZ051bGxEZWZhdWx0IC1wcm9jOm5vbmUgLWQg
XCIiICsgT1VUUFVUX0RJUiArICJcIiIsCisJCSIiLAogCQkiLS0tLS0tLS0tLVxuIiArIAotCQki
NC4gV0FSTklORyBpbiAtLS1PVVRQVVRfRElSX1BMQUNFSE9MREVSLS0tL3AvWC5qYXZhIChhdCBs
aW5lIDgpXG4iICsgCi0JCSIJZ29vKG51bGwpLnRvU3RyaW5nKCk7XG4iICsgCi0JCSIJXl5eXl5e
Xl5eXG4iICsgCi0JCSJQb3RlbnRpYWwgbnVsbCBwb2ludGVyIGFjY2VzczogVGhlIG1ldGhvZCBn
b28oT2JqZWN0KSBtYXkgcmV0dXJuIG51bGxcbiIgKyAKKwkJIjEuIFdBUk5JTkcgaW4gLS0tT1VU
UFVUX0RJUl9QTEFDRUhPTERFUi0tLS9YMS5qYXZhIChhdCBsaW5lIDEpXG4iICsgCisJCSIJcHVi
bGljIGNsYXNzIFgxIHtcbiIgKyAKKwkJIgkgICAgICAgICAgICAgXl5cbiIgKyAKKwkJIkEgZGVm
YXVsdCBudWxsbmVzcyBhbm5vdGF0aW9uIGhhcyBub3QgYmVlbiBzcGVjaWZpZWQgZm9yIHRoZSB0
eXBlIFgxXG4iICsgCiAJCSItLS0tLS0tLS0tXG4iICsgCi0JCSI1LiBXQVJOSU5HIGluIC0tLU9V
VFBVVF9ESVJfUExBQ0VIT0xERVItLS0vcC9YLmphdmEgKGF0IGxpbmUgOClcbiIgKyAKLQkJIgln
b28obnVsbCkudG9TdHJpbmcoKTtcbiIgKyAKLQkJIgkgICAgXl5eXlxuIiArIAotCQkiVHlwZSBt
aXNtYXRjaDogcmVxdWlyZWQgXCdATm9uTnVsbCBPYmplY3RcJyBidXQgdGhlIHByb3ZpZGVkIHZh
bHVlIGlzIG51bGxcbiIgKyAKKwkJIjIuIEVSUk9SIGluIC0tLU9VVFBVVF9ESVJfUExBQ0VIT0xE
RVItLS0vWDEuamF2YSAoYXQgbGluZSAyKVxuIiArIAorCQkiCVpvcms7XG4iICsgCisJCSIJXl5e
XlxuIiArIAorCQkiU3ludGF4IGVycm9yIG9uIHRva2VuIFwiWm9ya1wiLCBWYXJpYWJsZURlY2xh
cmF0b3IgZXhwZWN0ZWQgYWZ0ZXIgdGhpcyB0b2tlblxuIiArIAogCQkiLS0tLS0tLS0tLVxuIiAr
IAotCQkiNi4gV0FSTklORyBpbiAtLS1PVVRQVVRfRElSX1BMQUNFSE9MREVSLS0tL3AvWC5qYXZh
IChhdCBsaW5lIDkpXG4iICsgCi0JCSIJcmV0dXJuIG51bGw7XG4iICsgCi0JCSIJICAgICAgIF5e
Xl5cbiIgKyAKLQkJIlR5cGUgbWlzbWF0Y2g6IHJlcXVpcmVkIFwnQE5vbk51bGwgT2JqZWN0XCcg
YnV0IHRoZSBwcm92aWRlZCB2YWx1ZSBpcyBudWxsXG4iICsgCi0JCSItLS0tLS0tLS0tXG4iICsg
Ci0JCSI3LiBXQVJOSU5HIGluIC0tLU9VVFBVVF9ESVJfUExBQ0VIT0xERVItLS0vcC9YLmphdmEg
KGF0IGxpbmUgMTQpXG4iICsgCi0JCSIJQE5vbk51bGxCeURlZmF1bHQgT2JqZWN0IGhvbyhPYmpl
Y3QgbzIpIHtcbiIgKyAKLQkJIgleXl5eXl5eXl5eXl5eXl5eXlxuIiArIAotCQkiTnVsbG5lc3Mg
ZGVmYXVsdCBpcyByZWR1bmRhbnQgd2l0aCB0aGUgZ2xvYmFsIGRlZmF1bHRcbiIgKyAKLQkJIi0t
LS0tLS0tLS1cbiIgKyAKLQkJIjguIFdBUk5JTkcgaW4gLS0tT1VUUFVUX0RJUl9QTEFDRUhPTERF
Ui0tLS9wL1guamF2YSAoYXQgbGluZSAxNSlcbiIgKyAKLQkJIglpZiAobzIgPT0gbnVsbClcbiIg
KyAKLQkJIgkgICAgXl5cbiIgKyAKLQkJIk51bGwgY29tcGFyaXNvbiBhbHdheXMgeWllbGRzIGZh
bHNlOiBUaGUgdmFyaWFibGUgbzIgY2Fubm90IGJlIG51bGwgYXQgdGhpcyBsb2NhdGlvblxuIiAr
IAotCQkiLS0tLS0tLS0tLVxuIiArIAotCQkiOCBwcm9ibGVtcyAoOCB3YXJuaW5ncykiLCAKKwkJ
IjIgcHJvYmxlbXMgKDEgZXJyb3IsIDEgd2FybmluZykiLCAKIAkJdHJ1ZSk7CiB9CiAKZGlmZiAt
LWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBz
ZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0NvbXBpbGVySW52b2NhdGlvblRl
c3RzLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2Vj
bGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9Db21waWxlckludm9jYXRp
b25UZXN0cy5qYXZhCmluZGV4IDIzZGNiN2IuLmY4NmM1OGEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0
cy9jb21waWxlci9yZWdyZXNzaW9uL0NvbXBpbGVySW52b2NhdGlvblRlc3RzLmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9j
b3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vQ29tcGlsZXJJbnZvY2F0aW9uVGVzdHMuamF2
YQpAQCAtNjk4LDYgKzY5OCw4IEBACiAJCWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0KCJN
aXNzaW5nRW5jbG9zaW5nSW5zdGFuY2VGb3JDb25zdHJ1Y3RvckNhbGwiLCBuZXcgUHJvYmxlbUF0
dHJpYnV0ZXMoQ2F0ZWdvcml6ZWRQcm9ibGVtLkNBVF9UWVBFKSk7CiAJCWV4cGVjdGVkUHJvYmxl
bUF0dHJpYnV0ZXMucHV0KCJNaXNzaW5nRW51bUNvbnN0YW50Q2FzZSIsIG5ldyBQcm9ibGVtQXR0
cmlidXRlcyhDYXRlZ29yaXplZFByb2JsZW0uQ0FUX1BPVEVOVElBTF9QUk9HUkFNTUlOR19QUk9C
TEVNKSk7CiAJCWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0KCJNaXNzaW5nRW51bURlZmF1
bHRDYXNlIiwgbmV3IFByb2JsZW1BdHRyaWJ1dGVzKENhdGVnb3JpemVkUHJvYmxlbS5DQVRfUE9U
RU5USUFMX1BST0dSQU1NSU5HX1BST0JMRU0pKTsKKwkJZXhwZWN0ZWRQcm9ibGVtQXR0cmlidXRl
cy5wdXQoIk1pc3NpbmdOb25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbk9uUGFja2FnZSIsIG5ldyBQ
cm9ibGVtQXR0cmlidXRlcyhDYXRlZ29yaXplZFByb2JsZW0uQ0FUX1BPVEVOVElBTF9QUk9HUkFN
TUlOR19QUk9CTEVNKSk7CisJCWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0KCJNaXNzaW5n
Tm9uTnVsbEJ5RGVmYXVsdEFubm90YXRpb25PblR5cGUiLCBuZXcgUHJvYmxlbUF0dHJpYnV0ZXMo
Q2F0ZWdvcml6ZWRQcm9ibGVtLkNBVF9QT1RFTlRJQUxfUFJPR1JBTU1JTkdfUFJPQkxFTSkpOwog
CQlleHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiTWlzc2luZ092ZXJyaWRlQW5ub3RhdGlv
biIsIG5ldyBQcm9ibGVtQXR0cmlidXRlcyhDYXRlZ29yaXplZFByb2JsZW0uQ0FUX0NPREVfU1RZ
TEUpKTsKIAkJZXhwZWN0ZWRQcm9ibGVtQXR0cmlidXRlcy5wdXQoIk1pc3NpbmdPdmVycmlkZUFu
bm90YXRpb25Gb3JJbnRlcmZhY2VNZXRob2RJbXBsZW1lbnRhdGlvbiIsIG5ldyBQcm9ibGVtQXR0
cmlidXRlcyhDYXRlZ29yaXplZFByb2JsZW0uQ0FUX0NPREVfU1RZTEUpKTsKIAkJZXhwZWN0ZWRQ
cm9ibGVtQXR0cmlidXRlcy5wdXQoIk1pc3NpbmdSZXR1cm5UeXBlIiwgbmV3IFByb2JsZW1BdHRy
aWJ1dGVzKENhdGVnb3JpemVkUHJvYmxlbS5DQVRfVFlQRSkpOwpAQCAtMTM5Myw2ICsxMzk1LDgg
QEAKIAkJZXhwZWN0ZWRQcm9ibGVtQXR0cmlidXRlcy5wdXQoIk1pc3NpbmdFbmNsb3NpbmdJbnN0
YW5jZUZvckNvbnN0cnVjdG9yQ2FsbCIsIFNLSVApOwogCQlleHBlY3RlZFByb2JsZW1BdHRyaWJ1
dGVzLnB1dCgiTWlzc2luZ0VudW1Db25zdGFudENhc2UiLCBuZXcgUHJvYmxlbUF0dHJpYnV0ZXMo
SmF2YUNvcmUuQ09NUElMRVJfUEJfSU5DT01QTEVURV9FTlVNX1NXSVRDSCkpOwogCQlleHBlY3Rl
ZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiTWlzc2luZ0VudW1EZWZhdWx0Q2FzZSIsIG5ldyBQcm9i
bGVtQXR0cmlidXRlcyhKYXZhQ29yZS5DT01QSUxFUl9QQl9JTkNPTVBMRVRFX0VOVU1fU1dJVENI
KSk7CisJCWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0KCJNaXNzaW5nTm9uTnVsbEJ5RGVm
YXVsdEFubm90YXRpb25PblBhY2thZ2UiLCBuZXcgUHJvYmxlbUF0dHJpYnV0ZXMoSmF2YUNvcmUu
Q09NUElMRVJfUEJfTUlTU0lOR19OT05OVUxMX0JZX0RFRkFVTFRfQU5OT1RBVElPTikpOworCQll
eHBlY3RlZFByb2JsZW1BdHRyaWJ1dGVzLnB1dCgiTWlzc2luZ05vbk51bGxCeURlZmF1bHRBbm5v
dGF0aW9uT25UeXBlIiwgbmV3IFByb2JsZW1BdHRyaWJ1dGVzKEphdmFDb3JlLkNPTVBJTEVSX1BC
X01JU1NJTkdfTk9OTlVMTF9CWV9ERUZBVUxUX0FOTk9UQVRJT04pKTsKIAkJZXhwZWN0ZWRQcm9i
bGVtQXR0cmlidXRlcy5wdXQoIk1pc3NpbmdPdmVycmlkZUFubm90YXRpb24iLCBuZXcgUHJvYmxl
bUF0dHJpYnV0ZXMoSmF2YUNvcmUuQ09NUElMRVJfUEJfTUlTU0lOR19PVkVSUklERV9BTk5PVEFU
SU9OKSk7CiAJCWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0KCJNaXNzaW5nT3ZlcnJpZGVB
bm5vdGF0aW9uRm9ySW50ZXJmYWNlTWV0aG9kSW1wbGVtZW50YXRpb24iLCBuZXcgUHJvYmxlbUF0
dHJpYnV0ZXMoSmF2YUNvcmUuQ09NUElMRVJfUEJfTUlTU0lOR19PVkVSUklERV9BTk5PVEFUSU9O
KSk7CiAJCWV4cGVjdGVkUHJvYmxlbUF0dHJpYnV0ZXMucHV0KCJNaXNzaW5nUmV0dXJuVHlwZSIs
IFNLSVApOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIv
c3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbEFu
bm90YXRpb25UZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OdWxsQW5u
b3RhdGlvblRlc3QuamF2YQppbmRleCBiNjRlNWU4Li43MzhiZmRkIDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OdWxsQW5ub3RhdGlvblRlc3QuamF2YQorKysgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2Nv
cmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OdWxsQW5ub3RhdGlvblRlc3QuamF2YQpAQCAt
NTMsNyArNTMsNyBAQAogLy8gU3RhdGljIGluaXRpYWxpemVyIHRvIHNwZWNpZnkgdGVzdHMgc3Vi
c2V0IHVzaW5nIFRFU1RTXyogc3RhdGljIHZhcmlhYmxlcwogLy8gQWxsIHNwZWNpZmllZCB0ZXN0
cyB3aGljaCBkbyBub3QgYmVsb25nIHRvIHRoZSBjbGFzcyBhcmUgc2tpcHBlZC4uLgogc3RhdGlj
IHsKLS8vCQlURVNUU19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7ICJ0ZXN0QnVnMzcyMDExIiB9Owor
Ly8JCVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1tdIHsgInRlc3RfbWlzc2luZ19kZWZhdWx0X2Fu
bm90YXRpb25fMDMiIH07CiAvLwkJVEVTVFNfTlVNQkVSUyA9IG5ldyBpbnRbXSB7IDU2MSB9Owog
Ly8JCVRFU1RTX1JBTkdFID0gbmV3IGludFtdIHsgMSwgMjA0OSB9OwogfQpAQCAtMTkxNCwyOSAr
MTkxNCw2IEBACiAJCSItLS0tLS0tLS0tXG4iLAogCQlKYXZhY1Rlc3RPcHRpb25zLkV4Y3VzZS5F
Y2xpcHNlV2FybmluZ0NvbmZpZ3VyZWRBc0Vycm9yKTsKIH0KLS8vIHVzaW5nIG51bGxuZXNzIGRl
ZmF1bHRpbmcgdG8gbm9ubnVsbCwgbWlzc2luZyBhbm5vdGF0aW9uIHR5cGVzLCBubyBsb25nZXIg
YSBwcm9ibGVtCi1wdWJsaWMgdm9pZCB0ZXN0X2Fubm90YXRpb25faW1wb3J0XzAwNygpIHsKLQlN
YXAgY3VzdG9tT3B0aW9ucyA9IGdldENvbXBpbGVyT3B0aW9ucygpOwotCWN1c3RvbU9wdGlvbnMu
cHV0KEphdmFDb3JlLkNPTVBJTEVSX1BCX05VTExfU1BFQ0lGSUNBVElPTl9JTlNVRkZJQ0lFTlRf
SU5GTywgSmF2YUNvcmUuRVJST1IpOwotCWN1c3RvbU9wdGlvbnMucHV0KEphdmFDb3JlLkNPTVBJ
TEVSX05VTExBQkxFX0FOTk9UQVRJT05fTkFNRSwgIm9yZy5mb28uTWF5QmVOdWxsIik7Ci0JY3Vz
dG9tT3B0aW9ucy5wdXQoSmF2YUNvcmUuQ09NUElMRVJfTk9OTlVMTF9BTk5PVEFUSU9OX05BTUUs
ICJvcmcuZm9vLk11c3ROb3RCZU51bGwiKTsKLQljdXN0b21PcHRpb25zLnB1dChKYXZhQ29yZS5D
T01QSUxFUl9OT05OVUxMX0lTX0RFRkFVTFQsIEphdmFDb3JlLkVOQUJMRUQpOwotCXJ1bkNvbmZv
cm1UZXN0V2l0aExpYnMoCi0JCW5ldyBTdHJpbmdbXSB7Ci0JCQkiTGliLmphdmEiLAotCQkJInB1
YmxpYyBjbGFzcyBMaWIge1xuIiArCi0JCQkiICAgIE9iamVjdCBnZXRPYmplY3QoKSB7IHJldHVy
biBuZXcgT2JqZWN0KCk7IH1cbiIgKwotCQkJIn1cbiIsCi0JCQkiWC5qYXZhIiwKLQkJCSJwdWJs
aWMgY2xhc3MgWCB7XG4iICsKLQkJCSIgICAgT2JqZWN0IGdldE9iamVjdChMaWIgbCkge1xuIiAr
Ci0JCQkiICAgICAgICByZXR1cm4gbC5nZXRPYmplY3QoKTtcbiIgKwotCQkJIiAgICB9XG4iICsK
LQkJCSJ9XG4iCi0JCX0sCi0JCWN1c3RvbU9wdGlvbnMsCi0JCSIiKTsKLX0KIAogLy8gYSBudWxs
IGFubm90YXRpb24gaXMgaWxsZWdhbGx5IHVzZWQgb24gYSBjbGFzczoKIHB1YmxpYyB2b2lkIHRl
c3RfaWxsZWdhbF9hbm5vdGF0aW9uXzAwMSgpIHsKQEAgLTI0MDksNyArMjM4Niw3IEBACiBwdWJs
aWMgdm9pZCBfdGVzdF9kZWZhdWx0X251bGxuZXNzXzAwNygpIHsKIAlNYXAgY3VzdG9tT3B0aW9u
cyA9IGdldENvbXBpbGVyT3B0aW9ucygpOwogLy8JY3VzdG9tT3B0aW9ucy5wdXQoQ29tcGlsZXJP
cHRpb25zLk9QVElPTl9SZXBvcnRQb3RlbnRpYWxOdWxsU3BlY1Zpb2xhdGlvbiwgSmF2YUNvcmUu
RVJST1IpOwotCWN1c3RvbU9wdGlvbnMucHV0KEphdmFDb3JlLkNPTVBJTEVSX05PTk5VTExfSVNf
REVGQVVMVCwgSmF2YUNvcmUuRU5BQkxFRCk7CisvLwljdXN0b21PcHRpb25zLnB1dChKYXZhQ29y
ZS5DT01QSUxFUl9OT05OVUxMX0lTX0RFRkFVTFQsIEphdmFDb3JlLkVOQUJMRUQpOwogCXJ1bk5l
Z2F0aXZlVGVzdFdpdGhMaWJzKAogCQluZXcgU3RyaW5nW10gewogCQkJIlguamF2YSIsCkBAIC0y
ODYwLDQ4ICsyODM3LDc1IEBACiAJCSItLS0tLS0tLS0tXG4iKTsKIH0KIAotLy8gcmVkdW5kYW50
IGRlZmF1bHQgYW5ub3RhdGlvbnMgLSBwYWNrYWdlIC8gY2xhc3MgLyBtZXRob2QgdnMgZ2xvYmFs
IGRlZmF1bHQKLS8vIERJU0FCTEVEIGR1ZSB0byBkeXNmdW5jdGlvbmFsIGdsb2JhbCBkZWZhdWx0
IGFmdGVyIEJ1ZyAzNjYwNjMgLSBDb21waWxlciBzaG91bGQgbm90IGFkZCBzeW50aGV0aWMgQE5v
bk51bGwgYW5ub3RhdGlvbnMKLXB1YmxpYyB2b2lkIF90ZXN0X3JlZHVuZGFudF9hbm5vdGF0aW9u
XzAzKCkgeworLy8gdGVzdCBtaXNzaW5nIGRlZmF1bHQgbnVsbG5lc3MgYW5ub3RhdGlvbiBmb3Ig
dHlwZXMgaW4gZGVmYXVsdCBwYWNrYWdlCitwdWJsaWMgdm9pZCB0ZXN0X21pc3NpbmdfZGVmYXVs
dF9hbm5vdGF0aW9uXzAxKCkgewogCU1hcCBjdXN0b21PcHRpb25zID0gZ2V0Q29tcGlsZXJPcHRp
b25zKCk7Ci0JY3VzdG9tT3B0aW9ucy5wdXQoSmF2YUNvcmUuQ09NUElMRVJfTk9OTlVMTF9JU19E
RUZBVUxULCBKYXZhQ29yZS5FTkFCTEVEKTsKLQlydW5Db25mb3JtVGVzdFdpdGhMaWJzKAorCWN1
c3RvbU9wdGlvbnMucHV0KEphdmFDb3JlLkNPTVBJTEVSX1BCX01JU1NJTkdfTk9OTlVMTF9CWV9E
RUZBVUxUX0FOTk9UQVRJT04sIEphdmFDb3JlLkVSUk9SKTsKKwlydW5OZWdhdGl2ZVRlc3RXaXRo
TGlicygKIAkJbmV3IFN0cmluZ1tdIHsKKwkJCSJMaWIuamF2YSIsCisJCQkicHVibGljIGNsYXNz
IExpYiB7XG4iICsKKwkJCSIgICAgT2JqZWN0IGdldE9iamVjdCgpIHsgcmV0dXJuIG5ldyBPYmpl
Y3QoKTsgfVxuIiArCisJCQkifVxuIiwKKwkJCSJYLmphdmEiLAorCQkJInB1YmxpYyBjbGFzcyBY
IHtcbiIgKworCQkJIgkgY2xhc3MgWElubmVye31cbiIgKyAgLy8gZG9uJ3Qgd2FybiBmb3IgaW5u
ZXIgdHlwZXMKKwkJCSIgICAgT2JqZWN0IGdldE9iamVjdChMaWIgbCkge1xuIiArCisJCQkiICAg
ICAgICByZXR1cm4gbC5nZXRPYmplY3QoKTtcbiIgKworCQkJIiAgICB9XG4iICsKKwkJCSJ9XG4i
CisJCX0sCisJCWN1c3RvbU9wdGlvbnMsCisJCSItLS0tLS0tLS0tXG4iICsgCisJCSIxLiBFUlJP
UiBpbiBMaWIuamF2YSAoYXQgbGluZSAxKVxuIiArIAorCQkiCXB1YmxpYyBjbGFzcyBMaWIge1xu
IiArIAorCQkiCSAgICAgICAgICAgICBeXl5cbiIgKyAKKwkJIkEgZGVmYXVsdCBudWxsbmVzcyBh
bm5vdGF0aW9uIGhhcyBub3QgYmVlbiBzcGVjaWZpZWQgZm9yIHRoZSB0eXBlIExpYlxuIiArIAor
CQkiLS0tLS0tLS0tLVxuIiArIAorCQkiLS0tLS0tLS0tLVxuIiArIAorCQkiMS4gRVJST1IgaW4g
WC5qYXZhIChhdCBsaW5lIDEpXG4iICsgCisJCSIJcHVibGljIGNsYXNzIFgge1xuIiArIAorCQki
CSAgICAgICAgICAgICBeXG4iICsgCisJCSJBIGRlZmF1bHQgbnVsbG5lc3MgYW5ub3RhdGlvbiBo
YXMgbm90IGJlZW4gc3BlY2lmaWVkIGZvciB0aGUgdHlwZSBYXG4iICsgCisJCSItLS0tLS0tLS0t
XG4iKTsKK30KKworLy8gdGVzdCBtaXNzaW5nIGRlZmF1bHQgbnVsbG5lc3MgYW5ub3RhdGlvbiBm
b3IgYSBwYWNrYWdlIHdpdGggcGFja2FnZS1pbmZvCitwdWJsaWMgdm9pZCB0ZXN0X21pc3Npbmdf
ZGVmYXVsdF9hbm5vdGF0aW9uXzAyKCkgeworCU1hcCBjdXN0b21PcHRpb25zID0gZ2V0Q29tcGls
ZXJPcHRpb25zKCk7CisJY3VzdG9tT3B0aW9ucy5wdXQoSmF2YUNvcmUuQ09NUElMRVJfUEJfTUlT
U0lOR19OT05OVUxMX0JZX0RFRkFVTFRfQU5OT1RBVElPTiwgSmF2YUNvcmUuRVJST1IpOworCXJ1
bk5lZ2F0aXZlVGVzdFdpdGhMaWJzKAorCQluZXcgU3RyaW5nW10geworCQkJInAyL3BhY2thZ2Ut
aW5mby5qYXZhIiwKKwkJCSJwYWNrYWdlIHAyO1xuIiwKIAkJCSJwMi9ZLmphdmEiLAogCQkJInBh
Y2thZ2UgcDI7XG4iICsKIAkJCSJpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uKjtc
biIgKwogCQkJIkBOb25OdWxsQnlEZWZhdWx0XG4iICsKIAkJCSJwdWJsaWMgY2xhc3MgWSB7XG4i
ICsKLQkJCSIgICAgQE5vbk51bGxCeURlZmF1bHQgdm9pZCBmb28oKSB7fVxuIiArCi0JCQkifVxu
IiArCi0JCQkiY2xhc3MgWiB7XG4iICsKLQkJCSIgICAgQE5vbk51bGxCeURlZmF1bHQgdm9pZCBi
YXIoKSB7fVxuIiArCisJCQkiICAgdm9pZCBmb28oKSB7fVxuIiArCiAJCQkifVxuIiwKIAkJCSJw
My9wYWNrYWdlLWluZm8uamF2YSIsCi0JCQkiQG9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uLk5v
bk51bGxCeURlZmF1bHQgcGFja2FnZSBwMztcbiIKKwkJCSJAb3JnLmVjbGlwc2UuamR0LmFubm90
YXRpb24uTm9uTnVsbEJ5RGVmYXVsdCBwYWNrYWdlIHAzO1xuIiwKKwkJCSJwMy9aLmphdmEiLAor
CQkJInBhY2thZ2UgcDM7XG4iICsKKwkJCSJpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmFubm90YXRp
b24uKjtcbiIgKworCQkJInB1YmxpYyBjbGFzcyBaIHtcbiIgKworCQkJIiAgICBATm9uTnVsbEJ5
RGVmYXVsdCB2b2lkIGJhcigpIHt9XG4iICsKKwkJCSJ9XG4iLAogCQl9LAogCQljdXN0b21PcHRp
b25zLAogCQkiLS0tLS0tLS0tLVxuIiArIAotCQkiMS4gV0FSTklORyBpbiBwMlxcWS5qYXZhIChh
dCBsaW5lIDMpXG4iICsKLQkJIglATm9uTnVsbEJ5RGVmYXVsdFxuIiArCi0JCSIJXl5eXl5eXl5e
Xl5eXl5eXl5cbiIgKwotCQkiTnVsbG5lc3MgZGVmYXVsdCBpcyByZWR1bmRhbnQgd2l0aCB0aGUg
Z2xvYmFsIGRlZmF1bHRcbiIgKwotCQkiLS0tLS0tLS0tLVxuIiArCi0JCSIyLiBXQVJOSU5HIGlu
IHAyXFxZLmphdmEgKGF0IGxpbmUgNSlcbiIgKwotCQkiCUBOb25OdWxsQnlEZWZhdWx0IHZvaWQg
Zm9vKCkge31cbiIgKwotCQkiCV5eXl5eXl5eXl5eXl5eXl5eXG4iICsKLQkJIk51bGxuZXNzIGRl
ZmF1bHQgaXMgcmVkdW5kYW50IHdpdGggYSBkZWZhdWx0IHNwZWNpZmllZCBmb3IgdGhlIGVuY2xv
c2luZyB0eXBlIFlcbiIgKwotCQkiLS0tLS0tLS0tLVxuIiArCi0JCSIzLiBXQVJOSU5HIGluIHAy
XFxZLmphdmEgKGF0IGxpbmUgOClcbiIgKwotCQkiCUBOb25OdWxsQnlEZWZhdWx0IHZvaWQgYmFy
KCkge31cbiIgKwotCQkiCV5eXl5eXl5eXl5eXl5eXl5eXG4iICsKLQkJIk51bGxuZXNzIGRlZmF1
bHQgaXMgcmVkdW5kYW50IHdpdGggdGhlIGdsb2JhbCBkZWZhdWx0XG4iICsKLQkJIi0tLS0tLS0t
LS1cbiIgKwotCQkiLS0tLS0tLS0tLVxuIiArCi0JCSIxLiBXQVJOSU5HIGluIHAzXFxwYWNrYWdl
LWluZm8uamF2YSAoYXQgbGluZSAxKVxuIiArCi0JCSIJQG9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0
aW9uLk5vbk51bGxCeURlZmF1bHQgcGFja2FnZSBwMztcbiIgKwotCQkiCV5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsKLQkJIk51bGxuZXNzIGRlZmF1bHQg
aXMgcmVkdW5kYW50IHdpdGggdGhlIGdsb2JhbCBkZWZhdWx0XG4iICsKKwkJIjEuIEVSUk9SIGlu
IHAyXFxwYWNrYWdlLWluZm8uamF2YSAoYXQgbGluZSAxKVxuIiArIAorCQkiCXBhY2thZ2UgcDI7
XG4iICsgCisJCSIJICAgICAgICBeXlxuIiArIAorCQkiQSBkZWZhdWx0IG51bGxuZXNzIGFubm90
YXRpb24gaGFzIG5vdCBiZWVuIHNwZWNpZmllZCBmb3IgdGhlIHBhY2thZ2UgcDJcbiIgKyAKKwkJ
Ii0tLS0tLS0tLS1cbiIgKyAKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjEuIFdBUk5JTkcgaW4g
cDNcXFouamF2YSAoYXQgbGluZSA0KVxuIiArIAorCQkiCUBOb25OdWxsQnlEZWZhdWx0IHZvaWQg
YmFyKCkge31cbiIgKyAKKwkJIgleXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkiTnVsbG5lc3Mg
ZGVmYXVsdCBpcyByZWR1bmRhbnQgd2l0aCBhIGRlZmF1bHQgc3BlY2lmaWVkIGZvciB0aGUgZW5j
bG9zaW5nIHBhY2thZ2UgcDNcbiIgKyAKIAkJIi0tLS0tLS0tLS1cbiIpOwogfQogCkBAIC0zMDkw
LDggKzMwOTQsNiBAQAogLy8gYSBub25udWxsIHZhcmlhYmxlIGlzIGRlcmVmZXJlbmNlZCBpbiBh
IGZpbmFsbHkgYmxvY2sgaW5zaWRlIGEgbG9vcAogcHVibGljIHZvaWQgdGVzdF9ub25udWxsX3Zh
cl9pbl9jb25zdHJvbF9zdHJ1Y3R1cmVfMygpIHsKIAlNYXAgY3VzdG9tT3B0aW9ucyA9IGdldENv
bXBpbGVyT3B0aW9ucygpOwotLy8JY3VzdG9tT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9Q
VElPTl9SZXBvcnRQb3RlbnRpYWxOdWxsU3BlY1Zpb2xhdGlvbiwgSmF2YUNvcmUuRVJST1IpOwot
CWN1c3RvbU9wdGlvbnMucHV0KEphdmFDb3JlLkNPTVBJTEVSX05PTk5VTExfSVNfREVGQVVMVCwg
SmF2YUNvcmUuRU5BQkxFRCk7CiAJY3VzdG9tT3B0aW9ucy5wdXQoSmF2YUNvcmUuQ09NUElMRVJf
UEJfUkVEVU5EQU5UX05VTExfQU5OT1RBVElPTiwgSmF2YUNvcmUuSUdOT1JFKTsKIAlydW5OZWdh
dGl2ZVRlc3RXaXRoTGlicygKIAkJbmV3IFN0cmluZ1tdIHsKQEAgLTMyNzEsOCArMzI3Myw2IEBA
CiB9CiBwdWJsaWMgdm9pZCB0ZXN0X2Fzc2lnbm1lbnRfZXhwcmVzc2lvbl8xKCkgewogCU1hcCBj
dXN0b21PcHRpb25zID0gZ2V0Q29tcGlsZXJPcHRpb25zKCk7Ci0vLwljdXN0b21PcHRpb25zLnB1
dChDb21waWxlck9wdGlvbnMuT1BUSU9OX1JlcG9ydFBvdGVudGlhbE51bGxTcGVjVmlvbGF0aW9u
LCBKYXZhQ29yZS5FUlJPUik7Ci0JY3VzdG9tT3B0aW9ucy5wdXQoSmF2YUNvcmUuQ09NUElMRVJf
Tk9OTlVMTF9JU19ERUZBVUxULCBKYXZhQ29yZS5FTkFCTEVEKTsKIAljdXN0b21PcHRpb25zLnB1
dChKYXZhQ29yZS5DT01QSUxFUl9QQl9SRURVTkRBTlRfTlVMTF9DSEVDSywgSmF2YUNvcmUuRVJS
T1IpOwogCXJ1bkNvbmZvcm1UZXN0V2l0aExpYnMoCiAJCW5ldyBTdHJpbmdbXSB7CmRpZmYgLS1n
aXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0
L2NvcmUvdGVzdHMvbW9kZWwvTnVsbEFubm90YXRpb25Nb2RlbFRlc3RzLmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
bW9kZWwvTnVsbEFubm90YXRpb25Nb2RlbFRlc3RzLmphdmEKaW5kZXggODJlNTQyMi4uMGI3OTQ0
YSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL21vZGVsL051bGxBbm5vdGF0aW9uTW9kZWxUZXN0cy5qYXZh
CisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9tb2RlbC9OdWxsQW5ub3RhdGlvbk1vZGVsVGVzdHMuamF2YQpAQCAtMzAs
NiArMzAsNyBAQAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLklKYXZhTW9kZWxNYXJrZXI7
CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuSUphdmFQcm9qZWN0OwogaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5jb3JlLkphdmFDb3JlOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLkph
dmFNb2RlbEV4Y2VwdGlvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5J
UHJvYmxlbTsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5kb20uQVNUOwogaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5jb3JlLmRvbS5BU1RQYXJzZXI7CkBAIC01Myw3ICs1NCw3IEBACiAJfQog
CiAJc3RhdGljIHsKLS8vCQlURVNUU19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7ICJ0ZXN0TWlzc2lu
Z0Fubm90YXRpb241IiB9OworLy8JCVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1tdIHsgInRlc3RD
b252ZXJ0ZWRTb3VyY2VUeXBlMSIgfTsKIAl9CiAKIAlwdWJsaWMgdm9pZCBzZXRVcCgpIHRocm93
cyBFeGNlcHRpb24gewpAQCAtNjcsMTggKzY4LDE3IEBACiAJCXJldHVybiBGaWxlTG9jYXRvci50
b0ZpbGVVUkwobGliRW50cnkpLmdldFBhdGgoKTsKIAl9CiAKLQkvLyBESVNBQkxFRCBkdWUgdG8g
ZHlzZnVuY3Rpb25hbCBnbG9iYWwgZGVmYXVsdCBhZnRlciBCdWcgMzY2MDYzIC0gQ29tcGlsZXIg
c2hvdWxkIG5vdCBhZGQgc3ludGhldGljIEBOb25OdWxsIGFubm90YXRpb25zCi0JcHVibGljIHZv
aWQgX3Rlc3RDb252ZXJ0ZWRTb3VyY2VUeXBlMSgpIHRocm93cyBDb3JlRXhjZXB0aW9uLCBJbnRl
cnJ1cHRlZEV4Y2VwdGlvbiB7CisJcHVibGljIHZvaWQgdGVzdENvbnZlcnRlZFNvdXJjZVR5cGUx
KCkgdGhyb3dzIENvcmVFeGNlcHRpb24sIEludGVycnVwdGVkRXhjZXB0aW9uIHsKICAgICAJdHJ5
IHsKIAkJCS8vIFJlc291cmNlcyBjcmVhdGlvbgogCQkJSUphdmFQcm9qZWN0IHAgPSBjcmVhdGVK
YXZhUHJvamVjdCgiUCIsIG5ldyBTdHJpbmdbXSB7IiJ9LCBuZXcgU3RyaW5nW10geyJKQ0wxNV9M
SUIiLCB0aGlzLkFOTk9UQVRJT05fTElCfSwgImJpbiIsICIxLjUiKTsKIAkJCXAuc2V0T3B0aW9u
KEphdmFDb3JlLkNPTVBJTEVSX0FOTk9UQVRJT05fTlVMTF9BTkFMWVNJUywgSmF2YUNvcmUuRU5B
QkxFRCk7Ci0JCQlwLnNldE9wdGlvbihKYXZhQ29yZS5DT01QSUxFUl9OT05OVUxMX0lTX0RFRkFV
TFQsIEphdmFDb3JlLkVOQUJMRUQpOwogCiAJCQl0aGlzLmNyZWF0ZUZvbGRlcigiL1AvcDEiKTsK
IAkJCVN0cmluZyBjMVNvdXJjZVN0cmluZyA9CiAJCQkJInBhY2thZ2UgcDE7XG4iICsKIAkJCQki
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uLio7XG4iICsKKwkJCQkiQG9yZy5lY2xp
cHNlLmpkdC5hbm5vdGF0aW9uLk5vbk51bGxCeURlZmF1bHRcbiIgKwogCQkJCSJwdWJsaWMgY2xh
c3MgQzEge1xuIiArCiAJCQkJIgkgcHVibGljIFN0cmluZyBmb28oQE51bGxhYmxlIE9iamVjdCBh
cmcpIHtcbiIgKyAvLyB0aGlzIGlzIGNvbnN1bWVkIHZpYSBTb3VyY2VUeXBlQ29udmVydGVyCiAJ
CQkJIgkJcmV0dXJuIGFyZyA9PSBudWxsID8gXCJcIiA6IGFyZy50b1N0cmluZygpO1xuIiArCkBA
IC05MSw2ICs5MSw3IEBACiAJCQl0aGlzLmNyZWF0ZUZvbGRlcigiL1AvcDIiKTsKIAkJCVN0cmlu
ZyBjMlNvdXJjZVN0cmluZyA9CiAJCQkJInBhY2thZ2UgcDI7XG4iICsKKwkJCQkiQG9yZy5lY2xp
cHNlLmpkdC5hbm5vdGF0aW9uLk5vbk51bGxCeURlZmF1bHRcbiIgKwogCQkJCSJwdWJsaWMgY2xh
c3MgQzIge1xuIiArCiAJCQkJIgkgU3RyaW5nIGJhcihwMS5DMSBjLCBDMiBjMikgeztcbiIgKwog
CQkJCSIgICAgICAgIHJldHVybiBjLmZvbyhudWxsKTtcbiIgKyAvLyBkb24ndCBjb21wbGFpbiBk
ZXNwaXRlIGRlZmF1bHQgbm9ubnVsbCwgZm9vIGhhcyBleHBsaWNpdCBATnVsbGFibGUKQEAgLTEw
OSw3ICsxMTAsNyBAQAogCQkJZ2V0Q29tcGlsYXRpb25Vbml0KCIvUC9wMi9DMi5qYXZhIikuZ2V0
V29ya2luZ0NvcHkodGhpcy53Y093bmVyLCBudWxsKTsKIAogCQkJYXNzZXJ0UHJvYmxlbXMoIlVu
ZXhwZWN0ZWQgcHJvYmxlbXMiLCAiLS0tLS0tLS0tLVxuIiArCi0JCQkJCSIxLiBXQVJOSU5HIGlu
IC9QL3AyL0MyLmphdmEgKGF0IGxpbmUgNylcbiIgKworCQkJCQkiMS4gV0FSTklORyBpbiAvUC9w
Mi9DMi5qYXZhIChhdCBsaW5lIDgpXG4iICsKIAkJCQkJIglyZXR1cm4gYXJnID09IG51bGwgPyBu
dWxsIDogYXJnLnRvU3RyaW5nKCk7XG4iICsKIAkJCQkJIgkgICAgICAgXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5cbiIgKwogCQkJCQkiUG90ZW50aWFsIHR5cGUgbWlzbWF0Y2g6
IHJlcXVpcmVkIFwnQE5vbk51bGwgU3RyaW5nXCcgYnV0IG51bGxuZXNzIG9mIHRoZSBwcm92aWRl
ZCB2YWx1ZSBpcyB1bmtub3duXG4iICsKQEAgLTExOSwyMSArMTIwLDIwIEBACiAgICAgCX0KICAg
ICB9CiAKLQkvLyBESVNBQkxFRCBkdWUgdG8gZHlzZnVuY3Rpb25hbCBnbG9iYWwgZGVmYXVsdCBh
ZnRlciBCdWcgMzY2MDYzIC0gQ29tcGlsZXIgc2hvdWxkIG5vdCBhZGQgc3ludGhldGljIEBOb25O
dWxsIGFubm90YXRpb25zCi0JcHVibGljIHZvaWQgX3Rlc3RCaW5hcnlUeXBlMSgpIHRocm93cyBD
b3JlRXhjZXB0aW9uLCBJbnRlcnJ1cHRlZEV4Y2VwdGlvbiwgSU9FeGNlcHRpb24geworCXB1Ymxp
YyB2b2lkIHRlc3RCaW5hcnlUeXBlMSgpIHRocm93cyBDb3JlRXhjZXB0aW9uLCBJbnRlcnJ1cHRl
ZEV4Y2VwdGlvbiwgSU9FeGNlcHRpb24gewogICAgIAl0cnkgewogCQkJLy8gUmVzb3VyY2VzIGNy
ZWF0aW9uCiAJCQlJSmF2YVByb2plY3QgcCA9IGNyZWF0ZUphdmFQcm9qZWN0KCJQIiwgbmV3IFN0
cmluZ1tdIHsiIn0sCiAJCQkJCQkJCQkJCSAgIG5ldyBTdHJpbmdbXSB7IkpDTDE1X0xJQiIsIHRo
aXMuQU5OT1RBVElPTl9MSUIsIHRlc3RKYXJQYXRoKCJleGFtcGxlLmphciIpfSwKIAkJCQkJCQkJ
CQkJICAgImJpbiIsICIxLjUiKTsKIAkJCXAuc2V0T3B0aW9uKEphdmFDb3JlLkNPTVBJTEVSX0FO
Tk9UQVRJT05fTlVMTF9BTkFMWVNJUywgSmF2YUNvcmUuRU5BQkxFRCk7Ci0JCQlwLnNldE9wdGlv
bihKYXZhQ29yZS5DT01QSUxFUl9OT05OVUxMX0lTX0RFRkFVTFQsIEphdmFDb3JlLkVOQUJMRUQp
OwogCiAJCQkvLyBleGFtcGxlLmphciBjb250YWlucyBwMS9DMS5qYXZhIGp1c3QgbGlrZSB0ZXN0
Q29udmVydGVkU291cmNlVHlwZTEoKQogCiAJCQl0aGlzLmNyZWF0ZUZvbGRlcigiL1AvcDIiKTsK
IAkJCVN0cmluZyBjMlNvdXJjZVN0cmluZyA9CiAJCQkJInBhY2thZ2UgcDI7XG4iICsKKwkJCQki
QG9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uLk5vbk51bGxCeURlZmF1bHRcbiIgKwogCQkJCSJw
dWJsaWMgY2xhc3MgQzIge1xuIiArCiAJCQkJIgkgU3RyaW5nIGJhcihwMS5DMSBjKSB7O1xuIiAr
CiAJCQkJIiAgICAgICAgcmV0dXJuIGMuZm9vKG51bGwpO1xuIiArIC8vIGRvbid0IGNvbXBsYWlu
IGRlc3BpdGUgZGVmYXVsdCBub25udWxsLCBmb28gaGFzIGV4cGxpY2l0IEBOdWxsYWJsZQpAQCAt
MTUyLDcgKzE1Miw3IEBACiAJCQlnZXRDb21waWxhdGlvblVuaXQoIi9QL3AyL0MyLmphdmEiKS5n
ZXRXb3JraW5nQ29weSh0aGlzLndjT3duZXIsIG51bGwpOwogCiAJCQlhc3NlcnRQcm9ibGVtcygi
VW5leHBlY3RlZCBwcm9ibGVtcyIsICItLS0tLS0tLS0tXG4iICsKLQkJCQkJIjEuIFdBUk5JTkcg
aW4gL1AvcDIvQzIuamF2YSAoYXQgbGluZSA3KVxuIiArCisJCQkJCSIxLiBXQVJOSU5HIGluIC9Q
L3AyL0MyLmphdmEgKGF0IGxpbmUgOClcbiIgKwogCQkJCQkiCXJldHVybiBhcmcgPT0gbnVsbCA/
IG51bGwgOiBhcmcudG9TdHJpbmcoKTtcbiIgKwogCQkJCQkiCSAgICAgICBeXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArCiAJCQkJCSJQb3RlbnRpYWwgdHlwZSBtaXNtYXRj
aDogcmVxdWlyZWQgXCdATm9uTnVsbCBTdHJpbmdcJyBidXQgbnVsbG5lc3Mgb2YgdGhlIHByb3Zp
ZGVkIHZhbHVlIGlzIHVua25vd25cbiIgKwpAQCAtNDg2LDQgKzQ4NiwyOCBAQAogICAgIAkJZGVs
ZXRlUHJvamVjdCgiUCIpOwogICAgIAl9CiAJfQorCS8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9y
Zy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNzIwMTIKKwkvLyBubyBwcm9ibGVtIHNob3VsZCBiZSBj
cmVhdGVkIGZvciBhIGNvbXBpbGF0aW9uIHVuaXQgaW4gYSBwYWNrYWdlIG1pc3NpbmcgcGFja2Fn
ZS1pbmZvIHdoZW4gdGhlIHdhcm5pbmcgaXMgZW5hYmxlZAorCXB1YmxpYyB2b2lkIHRlc3RCdWcz
NzIwMTIoKSB0aHJvd3MgSmF2YU1vZGVsRXhjZXB0aW9uLCBJT0V4Y2VwdGlvbiwgQ29yZUV4Y2Vw
dGlvbiwgSW50ZXJydXB0ZWRFeGNlcHRpb24geworCQl0cnkgeworCQkJLy8gUmVzb3VyY2VzIGNy
ZWF0aW9uCisJCQlJSmF2YVByb2plY3QgcCA9IGNyZWF0ZUphdmFQcm9qZWN0KCJQIiwgbmV3IFN0
cmluZ1tdIHsiIn0sIG5ldyBTdHJpbmdbXSB7IkpDTDE1X0xJQiIsIHRoaXMuQU5OT1RBVElPTl9M
SUJ9LCAiYmluIiwgIjEuNSIpOworCQkJcC5zZXRPcHRpb24oSmF2YUNvcmUuQ09NUElMRVJfQU5O
T1RBVElPTl9OVUxMX0FOQUxZU0lTLCBKYXZhQ29yZS5FTkFCTEVEKTsKKwkJCXAuc2V0T3B0aW9u
KEphdmFDb3JlLkNPTVBJTEVSX05PTk5VTExfQU5OT1RBVElPTl9OQU1FLCAiaW4udmFsaWQiKTsK
KwkJCXAuc2V0T3B0aW9uKEphdmFDb3JlLkNPTVBJTEVSX1BCX01JU1NJTkdfTk9OTlVMTF9CWV9E
RUZBVUxUX0FOTk9UQVRJT04sIEphdmFDb3JlLkVSUk9SKTsKKworCQkJdGhpcy5jcmVhdGVGb2xk
ZXIoIi9QL3AxIik7CisJCQlTdHJpbmcgYzFTb3VyY2VTdHJpbmcgPQorCQkJCSJwYWNrYWdlIHAx
O1xuIiArCisJCQkJInB1YmxpYyBjbGFzcyBDMSB7XG4iICsKKwkJCQkiCSBwdWJsaWMgU3RyaW5n
IGZvbyhPYmplY3QgYXJnKSB7XG4iICsKKwkJCQkiCQlyZXR1cm4gYXJnID09IG51bGwgPyBcIlwi
IDogYXJnLnRvU3RyaW5nKCk7XG4iICsKKwkJCQkiCSB9XG4iICsKKwkJCQkifVxuIjsKKworCQkJ
YXNzZXJ0Tm9Qcm9ibGVtKGMxU291cmNlU3RyaW5nLnRvQ2hhckFycmF5KCksIGdldENvbXBpbGF0
aW9uVW5pdCgiL1AvcDEvQzEuamF2YSIpKTsKKyAgICAJfSBmaW5hbGx5IHsKKyAgICAJCWRlbGV0
ZVByb2plY3QoIlAiKTsKKyAgICAJfQorCX0KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2JhdGNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9iYXRjaC9NYWlu
LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9iYXRjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYmF0Y2gvTWFpbi5qYXZhCmluZGV4IDk3YTk2NTQuLmY1MWEyYmMgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2JhdGNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9iYXRjaC9NYWluLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvYmF0
Y2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2JhdGNoL01haW4uamF2YQpAQCAt
MjQxMiw4ICsyNDEyLDggQEAKIAkJCQkJbW9kZSA9IElOU0lERV9XQVJOSU5HU19QUk9QRVJUSUVT
OwogCQkJCQljb250aW51ZTsKIAkJCQl9Ci0JCQkJaWYgKGN1cnJlbnRBcmcuZXF1YWxzKCItbm9u
TnVsbEJ5RGVmYXVsdCIpKSB7IC8vJE5PTi1OTFMtMSQKLQkJCQkJdGhpcy5vcHRpb25zLnB1dChD
b21waWxlck9wdGlvbnMuT1BUSU9OX05vbk51bGxJc0RlZmF1bHQsIENvbXBpbGVyT3B0aW9ucy5F
TkFCTEVEKTsKKwkJCQlpZiAoY3VycmVudEFyZy5lcXVhbHMoIi1taXNzaW5nTnVsbERlZmF1bHQi
KSkgeyAvLyROT04tTkxTLTEkCisJCQkJCXRoaXMub3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25z
Lk9QVElPTl9SZXBvcnRNaXNzaW5nTm9uTnVsbEJ5RGVmYXVsdEFubm90YXRpb24sIENvbXBpbGVy
T3B0aW9ucy5XQVJOSU5HKTsKIAkJCQkJY29udGludWU7CiAJCQkJfQogCQkJCWJyZWFrOwpkaWZm
IC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvYmF0Y2gvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2JhdGNoL21lc3NhZ2VzLnByb3BlcnRpZXMgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9iYXRjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYmF0Y2gvbWVzc2Fn
ZXMucHJvcGVydGllcwppbmRleCBiMWNiZjg5Li5lZWJlM2Y5IDEwMDY0NAotLS0gYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9iYXRjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYmF0
Y2gvbWVzc2FnZXMucHJvcGVydGllcworKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9iYXRjaC9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYmF0Y2gvbWVzc2FnZXMucHJvcGVydGll
cwpAQCAtMjU1LDggKzI1NSw3IEBACiBcICAgIC1lbmFibGVKYXZhZG9jICAgICBjb25zaWRlciBy
ZWZlcmVuY2VzIGluIGphdmFkb2NcblwKIFwgICAgLVhlbWFjcyAgICAgICAgICAgIHVzZWQgdG8g
ZW5hYmxlIGVtYWNzLXN0eWxlIG91dHB1dCBpbiB0aGUgY29uc29sZS5cblwKIFwgICAgICAgICAg
ICAgICAgICAgICAgIEl0IGRvZXMgbm90IGFmZmVjdCB0aGUgeG1sIGxvZyBvdXRwdXRcblwKLVwg
ICAgLW5vbk51bGxCeURlZmF1bHQgIGZvciBhbm5vdGF0aW9uIGJhc2VkIG51bGwgYW5hbHlzaXMg
YXNzdW1lIG5vbm51bGxcblwKLVwgICAgICAgICAgICAgICAgICAgICAgIGFzIHRoZSBnbG9iYWwg
ZGVmYXVsdFxuXAorXCAgICAtbWlzc2luZ051bGxEZWZhdWx0ICByZXBvcnQgbWlzc2luZyBkZWZh
dWx0IG51bGxuZXNzIGFubm90YXRpb25cblwKIFwgXG5cCiBcICAgIC0/IC1oZWxwICAgICAgICAg
ICBwcmludCB0aGlzIGhlbHAgbWVzc2FnZVxuXAogXCAgICAtdiAtdmVyc2lvbiAgICAgICAgcHJp
bnQgY29tcGlsZXIgdmVyc2lvblxuXApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2NvcmUvY29tcGlsZXIvSVByb2JsZW0uamF2YSBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9jb3JlL2NvbXBpbGVy
L0lQcm9ibGVtLmphdmEKaW5kZXggOTM3YTE5MC4uYjg4MzU0ZCAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2NvcmUvY29tcGlsZXIvSVBy
b2JsZW0uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvY29yZS9jb21waWxlci9JUHJvYmxlbS5qYXZhCkBAIC0xNDQ0LDcgKzE0NDQsOCBAQAog
CWludCBSZXF1aXJlZE5vbk51bGxCdXRQcm92aWRlZFBvdGVudGlhbE51bGwgPSBUeXBlUmVsYXRl
ZCArIDkxMTsKIAkvKiogQHNpbmNlIDMuOCAqLwogCWludCBSZXF1aXJlZE5vbk51bGxCdXRQcm92
aWRlZFVua25vd24gPSBUeXBlUmVsYXRlZCArIDkxMjsKLQkvLyByZW1vdmVkIGR1cmluZyAzLjgg
TTY6IEltcG9ydFJlbGF0ZWQgKyA5MTMgCisJLyoqIEBzaW5jZSAzLjggKi8KKwlpbnQgTWlzc2lu
Z05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uT25QYWNrYWdlID0gSW50ZXJuYWwgKyA5MTM7IC8v
IGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNzIwMTIKIAkv
KiogQHNpbmNlIDMuOCAqLwogCWludCBJbGxlZ2FsUmV0dXJuTnVsbGl0eVJlZGVmaW5pdGlvbiA9
IE1ldGhvZFJlbGF0ZWQgKyA5MTQ7CiAJLyoqIEBzaW5jZSAzLjggKi8KQEAgLTE0NzUsNiArMTQ3
Niw4IEBACiAJaW50IFJlZHVuZGFudE51bGxEZWZhdWx0QW5ub3RhdGlvbk1ldGhvZCA9IEludGVy
bmFsICsgOTI4OwogCS8qKiBAc2luY2UgMy44ICovCiAJaW50IENvbnRyYWRpY3RvcnlOdWxsQW5u
b3RhdGlvbnMgPSBJbnRlcm5hbCArIDkyOTsKKwkvKiogQHNpbmNlIDMuOCAqLworCWludCBNaXNz
aW5nTm9uTnVsbEJ5RGVmYXVsdEFubm90YXRpb25PblR5cGUgPSBJbnRlcm5hbCArIDkzMDsgLy8g
aHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM3MjAxMgogCiAJ
LyoqCiAJICogRXh0ZXJuYWwgcHJvYmxlbXMgLS0gVGhlc2UgYXJlIHByb2JsZW1zIGRlZmluZWQg
Ynkgb3RoZXIgcGx1Z2lucwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2ltcGwvQ29tcGlsZXJPcHRpb25z
LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvaW1wbC9Db21waWxlck9wdGlvbnMuamF2YQppbmRleCBjNzY0NDFiLi41
ZWIwZGM3IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvaW1wbC9Db21waWxlck9wdGlvbnMuamF2YQorKysg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvaW1wbC9Db21waWxlck9wdGlvbnMuamF2YQpAQCAtMjksNyArMjksNiBAQAogaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuQVNUTm9kZTsKIGltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuY2xhc3NmbXQuQ2xhc3NGaWxlQ29u
c3RhbnRzOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAu
RXh0cmFDb21waWxlck1vZGlmaWVyczsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwu
Y29tcGlsZXIubG9va3VwLlRhZ0JpdHM7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFs
LmNvbXBpbGVyLnByb2JsZW0uUHJvYmxlbVNldmVyaXRpZXM7CiBpbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvbXBpbGVyLnV0aWwuVXRpbDsKIApAQCAtMTU4LDcgKzE1Nyw3IEBACiAJ
c3RhdGljIGZpbmFsIGNoYXJbXVtdIERFRkFVTFRfTlVMTEFCTEVfQU5OT1RBVElPTl9OQU1FID0g
Q2hhck9wZXJhdGlvbi5zcGxpdE9uKCcuJywgIm9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uLk51
bGxhYmxlIi50b0NoYXJBcnJheSgpKTsgLy8kTk9OLU5MUy0xJAogCXN0YXRpYyBmaW5hbCBjaGFy
W11bXSBERUZBVUxUX05PTk5VTExfQU5OT1RBVElPTl9OQU1FID0gQ2hhck9wZXJhdGlvbi5zcGxp
dE9uKCcuJywgIm9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uLk5vbk51bGwiLnRvQ2hhckFycmF5
KCkpOyAvLyROT04tTkxTLTEkCiAJc3RhdGljIGZpbmFsIGNoYXJbXVtdIERFRkFVTFRfTk9OTlVM
TEJZREVGQVVMVF9BTk5PVEFUSU9OX05BTUUgPSBDaGFyT3BlcmF0aW9uLnNwbGl0T24oJy4nLCAi
b3JnLmVjbGlwc2UuamR0LmFubm90YXRpb24uTm9uTnVsbEJ5RGVmYXVsdCIudG9DaGFyQXJyYXko
KSk7IC8vJE5PTi1OTFMtMSQKLQlwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmluZyBPUFRJT05fTm9u
TnVsbElzRGVmYXVsdCA9ICJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5hbm5vdGF0aW9u
Lm5vbm51bGxpc2RlZmF1bHQiOyAgLy8kTk9OLU5MUy0xJAorCXB1YmxpYyBzdGF0aWMgZmluYWwg
U3RyaW5nIE9QVElPTl9SZXBvcnRNaXNzaW5nTm9uTnVsbEJ5RGVmYXVsdEFubm90YXRpb24gPSAi
b3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuYW5ub3RhdGlvbi5taXNzaW5nTm9uTnVsbEJ5
RGVmYXVsdEFubm90YXRpb24iOyAgLy8kTk9OLU5MUy0xJAogCS8qKgogCSAqIFBvc3NpYmxlIHZh
bHVlcyBmb3IgY29uZmlndXJhYmxlIG9wdGlvbnMKIAkgKi8KQEAgLTI2OSw2ICsyNjgsNyBAQAog
CXB1YmxpYyBzdGF0aWMgZmluYWwgaW50IFBvdGVudGlhbE51bGxTcGVjVmlvbGF0aW9uID0gSXJy
aXRhbnRTZXQuR1JPVVAyIHwgQVNUTm9kZS5CaXQxMjsKIAlwdWJsaWMgc3RhdGljIGZpbmFsIGlu
dCBOdWxsU3BlY0luc3VmZmljaWVudEluZm8gPSBJcnJpdGFudFNldC5HUk9VUDIgfCBBU1ROb2Rl
LkJpdDEzOwogCXB1YmxpYyBzdGF0aWMgZmluYWwgaW50IFJlZHVuZGFudE51bGxBbm5vdGF0aW9u
ID0gSXJyaXRhbnRTZXQuR1JPVVAyIHwgQVNUTm9kZS5CaXQxNDsKKwlwdWJsaWMgc3RhdGljIGZp
bmFsIGludCBNaXNzaW5nTm9uTnVsbEJ5RGVmYXVsdEFubm90YXRpb24gPSBJcnJpdGFudFNldC5H
Uk9VUDIgfCBBU1ROb2RlLkJpdDE1OwogCiAJLy8gU2V2ZXJpdHkgbGV2ZWwgZm9yIGhhbmRsZXJz
CiAJLyoqIApAQCAtNTk4LDYgKzU5OCw4IEBACiAJCQkJcmV0dXJuIE9QVElPTl9SZXBvcnRNZXRo
b2RDYW5CZVN0YXRpYzsKIAkJCWNhc2UgTWV0aG9kQ2FuQmVQb3RlbnRpYWxseVN0YXRpYyA6CiAJ
CQkJcmV0dXJuIE9QVElPTl9SZXBvcnRNZXRob2RDYW5CZVBvdGVudGlhbGx5U3RhdGljOworCQkJ
Y2FzZSBNaXNzaW5nTm9uTnVsbEJ5RGVmYXVsdEFubm90YXRpb24gOgorCQkJCXJldHVybiBPUFRJ
T05fUmVwb3J0TWlzc2luZ05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uOwogCQkJY2FzZSBSZWR1
bmRhbnRTcGVjaWZpY2F0aW9uT2ZUeXBlQXJndW1lbnRzIDoKIAkJCQlyZXR1cm4gT1BUSU9OX1Jl
cG9ydFJlZHVuZGFudFNwZWNpZmljYXRpb25PZlR5cGVBcmd1bWVudHM7CiAJCQljYXNlIFVuY2xv
c2VkQ2xvc2VhYmxlIDoKQEAgLTc4NCw3ICs3ODYsNyBAQAogCQkJT1BUSU9OX05vbk51bGxBbm5v
dGF0aW9uTmFtZSwKIAkJCU9QVElPTl9OdWxsYWJsZUFubm90YXRpb25OYW1lLAogCQkJT1BUSU9O
X05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uTmFtZSwKLQkJCU9QVElPTl9Ob25OdWxsSXNEZWZh
dWx0LAorCQkJT1BUSU9OX1JlcG9ydE1pc3NpbmdOb25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbiwK
IAkJCU9QVElPTl9SZXBvcnROdWxsU3BlY1Zpb2xhdGlvbiwKIAkJCU9QVElPTl9SZXBvcnRQb3Rl
bnRpYWxOdWxsU3BlY1Zpb2xhdGlvbiwKIAkJCU9QVElPTl9SZXBvcnROdWxsU3BlY0luc3VmZmlj
aWVudEluZm8sCkBAIC04NTUsNiArODU3LDcgQEAKIAkJCWNhc2UgUG90ZW50aWFsTnVsbFNwZWNW
aW9sYXRpb24gOgogCQkJY2FzZSBOdWxsU3BlY0luc3VmZmljaWVudEluZm8gOgogCQkJY2FzZSBS
ZWR1bmRhbnROdWxsQW5ub3RhdGlvbiA6CisJCQljYXNlIE1pc3NpbmdOb25OdWxsQnlEZWZhdWx0
QW5ub3RhdGlvbjoKIAkJCQlyZXR1cm4gIm51bGwiOyAvLyROT04tTkxTLTEkCiAJCQljYXNlIEZh
bGx0aHJvdWdoQ2FzZSA6CiAJCQkJcmV0dXJuICJmYWxsdGhyb3VnaCI7IC8vJE5PTi1OTFMtMSQK
QEAgLTEwODAsMTAgKzEwODMsNyBAQAogCQlvcHRpb25zTWFwLnB1dChPUFRJT05fTnVsbGFibGVB
bm5vdGF0aW9uTmFtZSwgU3RyaW5nLnZhbHVlT2YoQ2hhck9wZXJhdGlvbi5jb25jYXRXaXRoKHRo
aXMubnVsbGFibGVBbm5vdGF0aW9uTmFtZSwgJy4nKSkpOwogCQlvcHRpb25zTWFwLnB1dChPUFRJ
T05fTm9uTnVsbEFubm90YXRpb25OYW1lLCBTdHJpbmcudmFsdWVPZihDaGFyT3BlcmF0aW9uLmNv
bmNhdFdpdGgodGhpcy5ub25OdWxsQW5ub3RhdGlvbk5hbWUsICcuJykpKTsKIAkJb3B0aW9uc01h
cC5wdXQoT1BUSU9OX05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uTmFtZSwgU3RyaW5nLnZhbHVl
T2YoQ2hhck9wZXJhdGlvbi5jb25jYXRXaXRoKHRoaXMubm9uTnVsbEJ5RGVmYXVsdEFubm90YXRp
b25OYW1lLCAnLicpKSk7Ci0JCWlmICh0aGlzLmludGVuZGVkRGVmYXVsdE5vbk51bGxuZXNzID09
IFRhZ0JpdHMuQW5ub3RhdGlvbk5vbk51bGwpCi0JCQlvcHRpb25zTWFwLnB1dChPUFRJT05fTm9u
TnVsbElzRGVmYXVsdCwgQ29tcGlsZXJPcHRpb25zLkVOQUJMRUQpOwotCQllbHNlCi0JCQlvcHRp
b25zTWFwLnB1dChPUFRJT05fTm9uTnVsbElzRGVmYXVsdCwgQ29tcGlsZXJPcHRpb25zLkRJU0FC
TEVEKTsKKwkJb3B0aW9uc01hcC5wdXQoT1BUSU9OX1JlcG9ydE1pc3NpbmdOb25OdWxsQnlEZWZh
dWx0QW5ub3RhdGlvbiwgZ2V0U2V2ZXJpdHlTdHJpbmcoTWlzc2luZ05vbk51bGxCeURlZmF1bHRB
bm5vdGF0aW9uKSk7CiAJCXJldHVybiBvcHRpb25zTWFwOwogCX0KIApAQCAtMTU2MCwxMiArMTU2
MCw3IEBACiAJCQlpZiAoKG9wdGlvblZhbHVlID0gb3B0aW9uc01hcC5nZXQoT1BUSU9OX05vbk51
bGxCeURlZmF1bHRBbm5vdGF0aW9uTmFtZSkpICE9IG51bGwpIHsKIAkJCQl0aGlzLm5vbk51bGxC
eURlZmF1bHRBbm5vdGF0aW9uTmFtZSA9IENoYXJPcGVyYXRpb24uc3BsaXRBbmRUcmltT24oJy4n
LCAoKFN0cmluZylvcHRpb25WYWx1ZSkudG9DaGFyQXJyYXkoKSk7CiAJCQl9Ci0JCQlpZiAoKG9w
dGlvblZhbHVlID0gb3B0aW9uc01hcC5nZXQoT1BUSU9OX05vbk51bGxJc0RlZmF1bHQpKSAhPSBu
dWxsKSB7Ci0JCQkJaWYgKENvbXBpbGVyT3B0aW9ucy5FTkFCTEVELmVxdWFscyhvcHRpb25WYWx1
ZSkpCi0JCQkJCXRoaXMuaW50ZW5kZWREZWZhdWx0Tm9uTnVsbG5lc3MgPSBUYWdCaXRzLkFubm90
YXRpb25Ob25OdWxsOwotCQkJCWVsc2UgaWYgKENvbXBpbGVyT3B0aW9ucy5ESVNBQkxFRC5lcXVh
bHMob3B0aW9uVmFsdWUpKQotCQkJCQl0aGlzLmludGVuZGVkRGVmYXVsdE5vbk51bGxuZXNzID0g
MDsKLQkJCX0KKwkJCWlmICgob3B0aW9uVmFsdWUgPSBvcHRpb25zTWFwLmdldChPUFRJT05fUmVw
b3J0TWlzc2luZ05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uKSkgIT0gbnVsbCkgdXBkYXRlU2V2
ZXJpdHkoTWlzc2luZ05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uLCBvcHRpb25WYWx1ZSk7CiAJ
CX0KIAogCQkvLyBKYXZhZG9jIG9wdGlvbnMKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU291
cmNlVHlwZUJpbmRpbmcuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU291cmNlVHlwZUJpbmRpbmcuamF2
YQppbmRleCA1M2EyYjFiLi44MmE0N2U1IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1NvdXJj
ZVR5cGVCaW5kaW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Tb3VyY2VUeXBlQmluZGluZy5q
YXZhCkBAIC0xNjMzLDYgKzE2MzMsOSBAQAogcHJpdmF0ZSB2b2lkIGV2YWx1YXRlTnVsbEFubm90
YXRpb25zKGxvbmcgYW5ub3RhdGlvblRhZ0JpdHMpIHsKIAlpZiAodGhpcy5udWxsbmVzc0RlZmF1
bHRJbml0aWFsaXplZCA+IDAgfHwgIXRoaXMuc2NvcGUuY29tcGlsZXJPcHRpb25zKCkuaXNBbm5v
dGF0aW9uQmFzZWROdWxsQW5hbHlzaXNFbmFibGVkKQogCQlyZXR1cm47CisJYm9vbGVhbiBpc1Bh
Y2thZ2VJbmZvID0gQ2hhck9wZXJhdGlvbi5lcXVhbHModGhpcy5zb3VyY2VOYW1lLCBUeXBlQ29u
c3RhbnRzLlBBQ0tBR0VfSU5GT19OQU1FKTsKKwlQYWNrYWdlQmluZGluZyBwa2cgPSBnZXRQYWNr
YWdlKCk7CisJYm9vbGVhbiBpc0RlZmF1bHQgPSAocGtnLmNvbXBvdW5kTmFtZSA9PSBDaGFyT3Bl
cmF0aW9uLk5PX0NIQVJfQ0hBUik7CiAJdGhpcy5udWxsbmVzc0RlZmF1bHRJbml0aWFsaXplZCA9
IDE7CiAJLy8gdHJhbnNmZXIgbnVsbG5lc3MgaW5mbyBmcm9tIHRhZ0JpdHMgdG8gdGhpcy5udWxs
bmVzc0RlZmF1bHRBbm5vdGF0aW9uCiAJaW50IG5ld0RlZmF1bHROdWxsbmVzcyA9IE5PX05VTExf
REVGQVVMVDsKQEAgLTE2NDEsMTQgKzE2NDQsMzUgQEAKIAllbHNlIGlmICgoYW5ub3RhdGlvblRh
Z0JpdHMgJiBUYWdCaXRzLkFubm90YXRpb25Ob25OdWxsQnlEZWZhdWx0KSAhPSAwKQogCQluZXdE
ZWZhdWx0TnVsbG5lc3MgPSBOT05OVUxMX0JZX0RFRkFVTFQ7CiAJaWYgKG5ld0RlZmF1bHROdWxs
bmVzcyAhPSBOT19OVUxMX0RFRkFVTFQpIHsKLQkJaWYgKENoYXJPcGVyYXRpb24uZXF1YWxzKHRo
aXMuc291cmNlTmFtZSwgVHlwZUNvbnN0YW50cy5QQUNLQUdFX0lORk9fTkFNRSkpIHsKLQkJCWdl
dFBhY2thZ2UoKS5kZWZhdWx0TnVsbG5lc3MgPSBuZXdEZWZhdWx0TnVsbG5lc3M7CisJCWlmIChp
c1BhY2thZ2VJbmZvKSB7CisJCQlwa2cuZGVmYXVsdE51bGxuZXNzID0gbmV3RGVmYXVsdE51bGxu
ZXNzOwogCQl9IGVsc2UgewogCQkJdGhpcy5kZWZhdWx0TnVsbG5lc3MgPSBuZXdEZWZhdWx0TnVs
bG5lc3M7CiAJCQlUeXBlRGVjbGFyYXRpb24gdHlwZURlY2wgPSB0aGlzLnNjb3BlLnJlZmVyZW5j
ZUNvbnRleHQ7CiAJCQlsb25nIG51bGxEZWZhdWx0Qml0cyA9IGFubm90YXRpb25UYWdCaXRzICYg
KFRhZ0JpdHMuQW5ub3RhdGlvbk51bGxVbnNwZWNpZmllZEJ5RGVmYXVsdHxUYWdCaXRzLkFubm90
YXRpb25Ob25OdWxsQnlEZWZhdWx0KTsKIAkJCWNoZWNrUmVkdW5kYW50TnVsbG5lc3NEZWZhdWx0
UmVjdXJzZSh0eXBlRGVjbCwgdHlwZURlY2wuYW5ub3RhdGlvbnMsIG51bGxEZWZhdWx0Qml0cyk7
CiAJCX0KKwl9IGVsc2UgeworCQkvLyBubyBkZWZhdWx0IGFubm90YXRpb24gZm91bmQKKwkJYm9v
bGVhbiBpc051bGxuZXNzQW5ub3RhdGlvblBhY2thZ2UgPSAKKwkJCQlwa2cgPT0gdGhpcy5zY29w
ZS5lbnZpcm9ubWVudCgpLm5vbm51bGxBbm5vdGF0aW9uUGFja2FnZQorCQkJCXx8IHBrZyA9PSB0
aGlzLnNjb3BlLmVudmlyb25tZW50KCkubnVsbGFibGVBbm5vdGF0aW9uUGFja2FnZQorCQkJCXx8
IHBrZyA9PSB0aGlzLnNjb3BlLmVudmlyb25tZW50KCkubm9ubnVsbEJ5RGVmYXVsdEFubm90YXRp
b25QYWNrYWdlOworCQlpZiAocGtnLmRlZmF1bHROdWxsbmVzcyA9PSBOT19OVUxMX0RFRkFVTFQg
JiYgIWlzRGVmYXVsdCAmJiAhaXNQYWNrYWdlSW5mbyAmJiAhaXNOdWxsbmVzc0Fubm90YXRpb25Q
YWNrYWdlICYmICEodGhpcyBpbnN0YW5jZW9mIE5lc3RlZFR5cGVCaW5kaW5nKSkgeworCQkJUmVm
ZXJlbmNlQmluZGluZyBwYWNrYWdlSW5mbyA9IHBrZy5nZXRUeXBlKFR5cGVDb25zdGFudHMuUEFD
S0FHRV9JTkZPX05BTUUpOworCQkJaWYgKHBhY2thZ2VJbmZvID09IG51bGwpIHsKKwkJCQkvLyBu
byBwa2dJbmZvIC0gY29tcGxhaW4KKwkJCQl0aGlzLnNjb3BlLnByb2JsZW1SZXBvcnRlcigpLm1p
c3NpbmdOb25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbih0aGlzLnNjb3BlLnJlZmVyZW5jZUNvbnRl
eHQpOworCQkJCXBrZy5kZWZhdWx0TnVsbG5lc3MgPSBOVUxMX1VOU1BFQ0lGSUVEX0JZX0RFRkFV
TFQ7CisJCQl9IGVsc2UgeworCQkJCS8vIGlmIHBrZ0luZm8gaGFzIG5vIGRlZmF1bHQgYW5ub3Qu
IC0gY29tcGxhaW4KKwkJCQlwYWNrYWdlSW5mby5nZXRBbm5vdGF0aW9uVGFnQml0cygpOworCQkJ
fQorCQl9IGVsc2UgaWYgKGlzUGFja2FnZUluZm8gfHwgKGlzRGVmYXVsdCAmJiAhKHRoaXMgaW5z
dGFuY2VvZiBOZXN0ZWRUeXBlQmluZGluZykpKSB7CisJCQl0aGlzLnNjb3BlLnByb2JsZW1SZXBv
cnRlcigpLm1pc3NpbmdOb25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbih0aGlzLnNjb3BlLnJlZmVy
ZW5jZUNvbnRleHQpOworCQkJaWYgKCFpc0RlZmF1bHQpCisJCQkJcGtnLmRlZmF1bHROdWxsbmVz
cyA9IE5VTExfVU5TUEVDSUZJRURfQllfREVGQVVMVDsKKwkJfQogCX0KIH0KIApkaWZmIC0tZ2l0
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxlbUhhbmRsZXIuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL1By
b2JsZW1IYW5kbGVyLmphdmEKaW5kZXggOTM0MTg2My4uN2RkOGNkYyAxMDA2NDQKLS0tIGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL3Byb2JsZW0vUHJvYmxlbUhhbmRsZXIuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9Qcm9i
bGVtSGFuZGxlci5qYXZhCkBAIC0xMzcsNyArMTM3LDcgQEAKIAkJCXJldHVybjsgLy8gaWdub3Jl
IG5vbiByZXBvcnRhYmxlIHdhcm5pbmcKIAkJfQogCX0KLQorCQogCWludFtdIGxpbmVFbmRzOwog
CWludCBsaW5lTnVtYmVyID0gcHJvYmxlbVN0YXJ0UG9zaXRpb24gPj0gMAogCQkJPyBVdGlsLmdl
dExpbmVOdW1iZXIocHJvYmxlbVN0YXJ0UG9zaXRpb24sIGxpbmVFbmRzID0gdW5pdFJlc3VsdC5n
ZXRMaW5lU2VwYXJhdG9yUG9zaXRpb25zKCksIDAsIGxpbmVFbmRzLmxlbmd0aC0xKQpkaWZmIC0t
Z2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJvYmxlbVJlcG9ydGVyLmphdmEgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJvYmxl
bS9Qcm9ibGVtUmVwb3J0ZXIuamF2YQppbmRleCAzNzlmMjMyLi5lMzUxNTRiIDEwMDY0NAotLS0g
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvcHJvYmxlbS9Qcm9ibGVtUmVwb3J0ZXIuamF2YQorKysgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJvYmxl
bS9Qcm9ibGVtUmVwb3J0ZXIuamF2YQpAQCAtNDY5LDYgKzQ2OSwxMCBAQAogCQkJCQogCQljYXNl
IElQcm9ibGVtLlJlZHVuZGFudFNwZWNpZmljYXRpb25PZlR5cGVBcmd1bWVudHM6CiAJCQlyZXR1
cm4gQ29tcGlsZXJPcHRpb25zLlJlZHVuZGFudFNwZWNpZmljYXRpb25PZlR5cGVBcmd1bWVudHM7
CisJCQkKKwkJY2FzZSBJUHJvYmxlbS5NaXNzaW5nTm9uTnVsbEJ5RGVmYXVsdEFubm90YXRpb25P
blBhY2thZ2U6CisJCWNhc2UgSVByb2JsZW0uTWlzc2luZ05vbk51bGxCeURlZmF1bHRBbm5vdGF0
aW9uT25UeXBlOgorCQkJcmV0dXJuIENvbXBpbGVyT3B0aW9ucy5NaXNzaW5nTm9uTnVsbEJ5RGVm
YXVsdEFubm90YXRpb247CiAJfQogCXJldHVybiAwOwogfQpAQCAtNTc0LDYgKzU3OCw3IEBACiAJ
CQljYXNlIENvbXBpbGVyT3B0aW9ucy5OdWxsU3BlY1Zpb2xhdGlvbiA6CiAJCQljYXNlIENvbXBp
bGVyT3B0aW9ucy5Qb3RlbnRpYWxOdWxsU3BlY1Zpb2xhdGlvbiA6CiAJCQljYXNlIENvbXBpbGVy
T3B0aW9ucy5OdWxsU3BlY0luc3VmZmljaWVudEluZm8gOgorCQkJY2FzZSBDb21waWxlck9wdGlv
bnMuTWlzc2luZ05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uOgogCQkJCXJldHVybiBDYXRlZ29y
aXplZFByb2JsZW0uQ0FUX1BPVEVOVElBTF9QUk9HUkFNTUlOR19QUk9CTEVNOwogCQkJY2FzZSBD
b21waWxlck9wdGlvbnMuUmVkdW5kYW50TnVsbEFubm90YXRpb24gOgogCQkJCXJldHVybiBDYXRl
Z29yaXplZFByb2JsZW0uQ0FUX1VOTkVDRVNTQVJZX0NPREU7CkBAIC04MTgwLDkgKzgxODUsNyBA
QAogCQlhcmd1bWVudC50eXBlLnNvdXJjZVN0YXJ0LAogCQlhcmd1bWVudC50eXBlLnNvdXJjZUVu
ZCk7CiB9Ci1wdWJsaWMgdm9pZCBpbGxlZ2FsUmV0dXJuUmVkZWZpbml0aW9uKEFic3RyYWN0TWV0
aG9kRGVjbGFyYXRpb24gYWJzdHJhY3RNZXRob2REZWNsLAotCQkJCQkJCQkJICBNZXRob2RCaW5k
aW5nIGluaGVyaXRlZE1ldGhvZCwgY2hhcltdW10gbm9uTnVsbEFubm90YXRpb25OYW1lKQotewor
cHVibGljIHZvaWQgaWxsZWdhbFJldHVyblJlZGVmaW5pdGlvbihBYnN0cmFjdE1ldGhvZERlY2xh
cmF0aW9uIGFic3RyYWN0TWV0aG9kRGVjbCwgTWV0aG9kQmluZGluZyBpbmhlcml0ZWRNZXRob2Qs
IGNoYXJbXVtdIG5vbk51bGxBbm5vdGF0aW9uTmFtZSkgewogCU1ldGhvZERlY2xhcmF0aW9uIG1l
dGhvZERlY2wgPSAoTWV0aG9kRGVjbGFyYXRpb24pIGFic3RyYWN0TWV0aG9kRGVjbDsKIAlTdHJp
bmdCdWZmZXIgbWV0aG9kU2lnbmF0dXJlID0gbmV3IFN0cmluZ0J1ZmZlcigpOwogCW1ldGhvZFNp
Z25hdHVyZQpAQCAtODMyOCw0ICs4MzMxLDQwIEBACiAJfQogCXJldHVybiBudWxsOwogfQorLy8g
aHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM3MjAxMgorcHVi
bGljIHZvaWQgbWlzc2luZ05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uKFR5cGVEZWNsYXJhdGlv
biB0eXBlKSB7CisJaW50IHNldmVyaXR5OworCUNvbXBpbGF0aW9uVW5pdERlY2xhcmF0aW9uIGNv
bXBVbml0RGVjbCA9IHR5cGUuZ2V0Q29tcGlsYXRpb25Vbml0RGVjbGFyYXRpb24oKTsKKwlTdHJp
bmdbXSBhcmd1bWVudHM7CisJaWYgKGNvbXBVbml0RGVjbC5jdXJyZW50UGFja2FnZSA9PSBudWxs
KSB7CisJCXNldmVyaXR5ID0gY29tcHV0ZVNldmVyaXR5KElQcm9ibGVtLk1pc3NpbmdOb25OdWxs
QnlEZWZhdWx0QW5ub3RhdGlvbk9uVHlwZSk7CisJCWlmIChzZXZlcml0eSA9PSBQcm9ibGVtU2V2
ZXJpdGllcy5JZ25vcmUpIHJldHVybjsKKwkJLy8gRGVmYXVsdCBwYWNrYWdlCisJCVR5cGVCaW5k
aW5nIGJpbmRpbmcgPSB0eXBlLmJpbmRpbmc7CisJCXRoaXMuaGFuZGxlKAorCQkJCUlQcm9ibGVt
Lk1pc3NpbmdOb25OdWxsQnlEZWZhdWx0QW5ub3RhdGlvbk9uVHlwZSwKKwkJCQluZXcgU3RyaW5n
W10ge25ldyBTdHJpbmcoYmluZGluZy5yZWFkYWJsZU5hbWUoKSksIH0sCisJCQkJbmV3IFN0cmlu
Z1tdIHtuZXcgU3RyaW5nKGJpbmRpbmcuc2hvcnRSZWFkYWJsZU5hbWUoKSksfSwKKwkJCQlzZXZl
cml0eSwKKwkJCQl0eXBlLnNvdXJjZVN0YXJ0LAorCQkJCXR5cGUuc291cmNlRW5kKTsKKwl9IGVs
c2UgeworCQlzZXZlcml0eSA9IGNvbXB1dGVTZXZlcml0eShJUHJvYmxlbS5NaXNzaW5nTm9uTnVs
bEJ5RGVmYXVsdEFubm90YXRpb25PblBhY2thZ2UpOworCQlpZiAoc2V2ZXJpdHkgPT0gUHJvYmxl
bVNldmVyaXRpZXMuSWdub3JlKSByZXR1cm47CisvLwkJaW50IHNvdXJjZVN0YXJ0ID0gLTE7Cisv
LwkJaW50IHNvdXJjZUVuZCA9IC0xOworLy8JCWlmIChDaGFyT3BlcmF0aW9uLmVxdWFscyh0eXBl
Lm5hbWUsIFR5cGVDb25zdGFudHMuUEFDS0FHRV9JTkZPX05BTUUpKSB7CisvLwkJCXNvdXJjZVN0
YXJ0ID0gY29tcFVuaXREZWNsLmN1cnJlbnRQYWNrYWdlLnNvdXJjZVN0YXJ0OworLy8JCQlzb3Vy
Y2VFbmQgPSBjb21wVW5pdERlY2wuY3VycmVudFBhY2thZ2Uuc291cmNlRW5kOworLy8JCX0KKwkJ
YXJndW1lbnRzID0gbmV3IFN0cmluZ1tdIHtDaGFyT3BlcmF0aW9uLnRvU3RyaW5nKGNvbXBVbml0
RGVjbC5jdXJyZW50UGFja2FnZS50b2tlbnMpfTsKKwkJdGhpcy5oYW5kbGUoCisJCQlJUHJvYmxl
bS5NaXNzaW5nTm9uTnVsbEJ5RGVmYXVsdEFubm90YXRpb25PblBhY2thZ2UsCisJCQlhcmd1bWVu
dHMsCisJCQlhcmd1bWVudHMsCisJCQlzZXZlcml0eSwKKwkJCWNvbXBVbml0RGVjbC5jdXJyZW50
UGFja2FnZS5zb3VyY2VTdGFydCwKKwkJCWNvbXBVbml0RGVjbC5jdXJyZW50UGFja2FnZS5zb3Vy
Y2VFbmQpOworCX0KK30KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL21lc3NhZ2VzLnBy
b3BlcnRpZXMgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9tZXNzYWdlcy5wcm9wZXJ0aWVzCmluZGV4IGFiOGE3
NTEuLjhhNWQ0ZWYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVtL21lc3NhZ2VzLnByb3BlcnRp
ZXMKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vbWVzc2FnZXMucHJvcGVydGllcwpAQCAtNjYzLDcgKzY2
Myw3IEBACiA5MTAgPSBUeXBlIG1pc21hdGNoOiByZXF1aXJlZCAnJ0B7MH0gezF9JycgYnV0IHRo
ZSBwcm92aWRlZCB2YWx1ZSBpcyBudWxsCiA5MTEgPSBUeXBlIG1pc21hdGNoOiByZXF1aXJlZCAn
J0B7MH0gezF9JycgYnV0IHRoZSBwcm92aWRlZCB2YWx1ZSBjYW4gYmUgbnVsbAogOTEyID0gUG90
ZW50aWFsIHR5cGUgbWlzbWF0Y2g6IHJlcXVpcmVkICcnQHswfSB7MX0nJyBidXQgbnVsbG5lc3Mg
b2YgdGhlIHByb3ZpZGVkIHZhbHVlIGlzIHVua25vd24KLSM5MTMgcmVtb3ZlZAorOTEzID0gQSBk
ZWZhdWx0IG51bGxuZXNzIGFubm90YXRpb24gaGFzIG5vdCBiZWVuIHNwZWNpZmllZCBmb3IgdGhl
IHBhY2thZ2UgezB9CiA5MTQgPSBUaGUgcmV0dXJuIHR5cGUgaXMgaW5jb21wYXRpYmxlIHdpdGgg
dGhlIEB7MX0gcmV0dXJuIGZyb20gezB9CiA5MTUgPSBJbGxlZ2FsIHJlZGVmaW5pdGlvbiBvZiBw
YXJhbWV0ZXIgezB9LCBpbmhlcml0ZWQgbWV0aG9kIGZyb20gezF9IGRlY2xhcmVzIHRoaXMgcGFy
YW1ldGVyIGFzIEB7Mn0KIDkxNiA9IElsbGVnYWwgcmVkZWZpbml0aW9uIG9mIHBhcmFtZXRlciB7
MH0sIGluaGVyaXRlZCBtZXRob2QgZnJvbSB7MX0gZG9lcyBub3QgY29uc3RyYWluIHRoaXMgcGFy
YW1ldGVyCkBAIC02NzksNiArNjc5LDcgQEAKIDkyNyA9IE51bGxuZXNzIGRlZmF1bHQgaXMgcmVk
dW5kYW50IHdpdGggYSBkZWZhdWx0IHNwZWNpZmllZCBmb3IgdGhlIGVuY2xvc2luZyB0eXBlIHsw
fQogOTI4ID0gTnVsbG5lc3MgZGVmYXVsdCBpcyByZWR1bmRhbnQgd2l0aCBhIGRlZmF1bHQgc3Bl
Y2lmaWVkIGZvciB0aGUgZW5jbG9zaW5nIG1ldGhvZCB7MH0KIDkyOSA9IENvbnRyYWRpY3Rvcnkg
bnVsbCBzcGVjaWZpY2F0aW9uOyBvbmx5IG9uZSBvZiBAezB9IGFuZCBAezF9IGNhbiBiZSBzcGVj
aWZpZWQgYXQgYW55IGxvY2F0aW9uCis5MzAgPSBBIGRlZmF1bHQgbnVsbG5lc3MgYW5ub3RhdGlv
biBoYXMgbm90IGJlZW4gc3BlY2lmaWVkIGZvciB0aGUgdHlwZSB7MH0KIAogIyMjIEVMQUJPUkFU
SU9OUwogIyMgQWNjZXNzIHJlc3RyaWN0aW9ucwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2NvcmUvSmF2YUNvcmUuamF2YSBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9jb3JlL0phdmFDb3JlLmphdmEKaW5k
ZXggZjhkNzk1ZC4uMzM2OTgzNyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9k
ZWwvb3JnL2VjbGlwc2UvamR0L2NvcmUvSmF2YUNvcmUuamF2YQorKysgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvY29yZS9KYXZhQ29yZS5qYXZhCkBAIC0xNDk0
LDkgKzE0OTQsNyBAQAogCSAqICAgIHdpdGhpbiB0aGUgYW5ub3RhdGVkIGVsZW1lbnQgd2lsbCBi
ZSB0cmVhdGVkIGFzIGlmIHRoZXkgd2VyZSBzcGVjaWZpZWQgd2l0aCB0aGUgbm9uLW51bGwgYW5u
b3RhdGlvbgogCSAqICAgIChzZWUge0BsaW5rICNDT01QSUxFUl9OT05OVUxMX0FOTk9UQVRJT05f
TkFNRX0pLjwvcD4KIAkgKiA8cD5JZiB0aGUgYW5ub3RhdGlvbiBpcyBhcHBsaWVkIHdpdGggdGhl
IGNvbnN0YW50IDxjb2RlPmZhbHNlPC9jb2RlPiBhcyBpdHMgYXJndW1lbnQKLQkgKiAgICBhbGwg
Y29ycmVzcG9uZGluZyBkZWZhdWx0cyBhdCBvdXRlciBzY29wZXMgd2lsbCBiZSBjYW5jZWxlZCBm
b3IgdGhlIGFubm90YXRlZCBlbGVtZW50LgotCSAqICAgIFRoaXMgaW5jbHVkZXMgZGVmYXVsdHMg
c3BlY2lmaWVkIHVzaW5nIHRoaXMgYW5ub3RhdGlvbiB0eXBlIG9yIGEgZGVmYXVsdCBkZWZpbmVk
IHVzaW5nCi0JICogICAgdGhlIGNvbXBpbGVyIG9wdGlvbiB7QGxpbmsgI0NPTVBJTEVSX05PTk5V
TExfSVNfREVGQVVMVH0uPC9wPgorCSAqICAgIGFsbCBjb3JyZXNwb25kaW5nIGRlZmF1bHRzIGF0
IG91dGVyIHNjb3BlcyB3aWxsIGJlIGNhbmNlbGVkIGZvciB0aGUgYW5ub3RhdGVkIGVsZW1lbnQu
PC9wPgogCSAqIDxwPlRoaXMgb3B0aW9uIG9ubHkgaGFzIGFuIGVmZmVjdCBpZiB0aGUgb3B0aW9u
IHtAbGluayAjQ09NUElMRVJfQU5OT1RBVElPTl9OVUxMX0FOQUxZU0lTfSBpcyBlbmFibGVkLjwv
cD4KIAkgKiA8ZGw+CiAJICogPGR0Pk9wdGlvbiBpZDo8L2R0PjxkZD48Y29kZT4ib3JnLmVjbGlw
c2UuamR0LmNvcmUuY29tcGlsZXIuYW5ub3RhdGlvbi5ub25udWxsYnlkZWZhdWx0IjwvY29kZT48
L2RkPgpAQCAtMTUwOSwxOSArMTUwNywyMyBAQAogCSAqLwogCXB1YmxpYyBzdGF0aWMgZmluYWwg
U3RyaW5nIENPTVBJTEVSX05PTk5VTExfQllfREVGQVVMVF9BTk5PVEFUSU9OX05BTUUgPSBQTFVH
SU5fSUQgKyAiLmNvbXBpbGVyLmFubm90YXRpb24ubm9ubnVsbGJ5ZGVmYXVsdCI7IC8vJE5PTi1O
TFMtMSQKIAkvKioKLQkgKiBDb21waWxlciBvcHRpb24gSUQ6IEdsb2JhbGx5IHNwZWNpZnkgbm9u
LW51bGwgYXMgdGhlIGFzc3VtZWQgZGVmYXVsdCBmb3IgdW5hbm5vdGF0ZWQgdHlwZXMuCi0JICog
PHA+V2hlbiBlbmFibGVkLCB0aGlzIG9wdGlvbiBnbG9iYWxseSBhY2hpZXZlcyB0aGUgc2FtZSBl
ZmZlY3QgCi0JICogICAgYXMgc3BlY2lmeWluZyB7QGxpbmsgI0NPTVBJTEVSX05PTk5VTExfQU5O
T1RBVElPTl9OQU1FfSBkb2VzIGZvciBpbmRpdmlkdWFsIGVsZW1lbnRzLjwvcD4KKwkgKiBDb21w
aWxlciBvcHRpb24gSUQ6IFJlcG9ydGluZyBtaXNzaW5nIGRlZmF1bHQgbnVsbG5lc3MgYW5ub3Rh
dGlvbi4KKwkgKiA8cD5XaGVuIGVuYWJsZWQsIHRoZSBjb21waWxlciB3aWxsIGlzc3VlIGFuIGVy
cm9yIG9yIGEgd2FybmluZyBpbiB0aGUgZm9sbG93aW5nIGNhc2VzOjwvcD4KKwkgKiA8dWw+CisJ
ICogPGxpPiBXaGVuIGEgcGFja2FnZSBkb2VzIG5vdCBjb250YWluIGEgZG9lcyBub3QgY29udGFp
biBhIGRlZmF1bHQgbnVsbG5lc3MgYW5ub3RhdGlvbiwgYXMgYSByZXN1bHQgb2YgbWlzc2luZyBw
YWNrYWdlLWluZm8uamF2YSAKKwkgKiBvciBtaXNzaW5nIGRlZmF1bHQgbnVsbG5lc3MgYW5ub3Rh
dGlvbiBpbiBwYWNrYWdlLWluZm8uamF2YS48L2xpPgorCSAqIDxsaT4gV2hlbiBhIHR5cGUgaW5z
aWRlIGEgZGVmYXVsdCBwYWNrYWdlIGRvZXMgbm90IGNvbnRhaW4gYSBkZWZhdWx0IG51bGxuZXNz
IGFubm90YXRpb24uPC9saT4KKwkgKiA8L3VsPgogCSAqIDxwPlRoaXMgb3B0aW9uIG9ubHkgaGFz
IGFuIGVmZmVjdCBpZiB0aGUgb3B0aW9uIHtAbGluayAjQ09NUElMRVJfQU5OT1RBVElPTl9OVUxM
X0FOQUxZU0lTfSBpcyBlbmFibGVkLjwvcD4KIAkgKiA8ZGw+Ci0JICogPGR0Pk9wdGlvbiBpZDo8
L2R0PjxkZD48Y29kZT4ib3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuYW5ub3RhdGlvbi5u
b25udWxsaXNkZWZhdWx0IjwvY29kZT48L2RkPgotCSAqIDxkdD5Qb3NzaWJsZSB2YWx1ZXM6PC9k
dD48ZGQ+PGNvZGU+eyAiZGlzYWJsZWQiLCAiZW5hYmxlZCIgfTwvY29kZT4uPC9kZD4KLQkgKiA8
ZHQ+RGVmYXVsdDo8L2R0PjxkZD48Y29kZT4iZGlzYWJsZWQiPC9jb2RlPjwvZGQ+CisJICogPGR0
Pk9wdGlvbiBpZDo8L2R0PjxkZD48Y29kZT4ib3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIu
YW5ub3RhdGlvbi5taXNzaW5nTm9uTnVsbEJ5RGVmYXVsdEFubm90YXRpb24iPC9jb2RlPjwvZGQ+
CisJICogPGR0PlBvc3NpYmxlIHZhbHVlczo8L2R0PjxkZD48Y29kZT57ICJlcnJvciIsICJ3YXJu
aW5nIiwgImlnbm9yZSIgfTwvY29kZT4uPC9kZD4KKwkgKiA8ZHQ+RGVmYXVsdDo8L2R0PjxkZD48
Y29kZT4iaWdub3JlIjwvY29kZT48L2RkPgogCSAqIDwvZGw+CiAJICogQHNpbmNlIDMuOAogCSAq
IEBjYXRlZ29yeSBDb21waWxlck9wdGlvbklECiAJICovCi0JcHVibGljIHN0YXRpYyBmaW5hbCBT
dHJpbmcgQ09NUElMRVJfTk9OTlVMTF9JU19ERUZBVUxUID0gUExVR0lOX0lEICsgIi5jb21waWxl
ci5hbm5vdGF0aW9uLm5vbm51bGxpc2RlZmF1bHQiOyAvLyROT04tTkxTLTEkCisJcHVibGljIHN0
YXRpYyBmaW5hbCBTdHJpbmcgQ09NUElMRVJfUEJfTUlTU0lOR19OT05OVUxMX0JZX0RFRkFVTFRf
QU5OT1RBVElPTiA9IFBMVUdJTl9JRCArICIuY29tcGlsZXIuYW5ub3RhdGlvbi5taXNzaW5nTm9u
TnVsbEJ5RGVmYXVsdEFubm90YXRpb24iOyAvLyROT04tTkxTLTEkCiAJLyoqCiAJICogQ29tcGls
ZXIgb3B0aW9uIElEOiBSZXBvcnRpbmcgVmlvbGF0aW9ucyBvZiBOdWxsIFNwZWNpZmljYXRpb25z
LgogCSAqIDxwPkRlcGVuZGluZyBvbiB0aGlzIG9wdGlvbiwgdGhlIGNvbXBpbGVyIHdpbGwgaXNz
dWUgZWl0aGVyIGFuIGVycm9yIG9yIGEgd2FybmluZwpAQCAtMTYyMyw4ICsxNjI1LDcgQEAKIAkg
KiA8cD5XaGVuIGVuYWJsZWQsIHRoZSBjb21waWxlciB3aWxsIGlzc3VlIGFuIGVycm9yIG9yIGEg
d2FybmluZyB3aGVuIGEgbm9uLW51bGwgYW5ub3RhdGlvbgogCSAqICAgIChzZWUge0BsaW5rICND
T01QSUxFUl9OT05OVUxMX0FOTk9UQVRJT05fTkFNRX0pCiAJICogICAgaXMgYXBwbGllZCBhbHRo
b3VnaCB0aGUgc2FtZSBlZmZlY3QgaXMgYWxyZWFkeSBhY2hpZXZlZCBieSBhIGRlZmF1bHQgYXBw
bGljYWJsZSBhdCB0aGUKLQkgKiAgICBjdXJyZW50IGxvY2F0aW9uLiBTdWNoIGEgZGVmYXVsdCBt
YXkgYmUgc2V0IGJ5IGVuYWJsaW5nIHRoZSBvcHRpb24KLQkgKiAgICB7QGxpbmsgI0NPTVBJTEVS
X05PTk5VTExfSVNfREVGQVVMVH0gb3IgYnkgdXNpbmcgdGhlIGFubm90YXRpb24gc3BlY2lmaWVk
IGJ5IHRoZSBvcHRpb24KKwkgKiAgICBjdXJyZW50IGxvY2F0aW9uLiBTdWNoIGEgZGVmYXVsdCBt
YXkgYmUgc2V0IGJ5IHVzaW5nIHRoZSBhbm5vdGF0aW9uIHNwZWNpZmllZCBieSB0aGUgb3B0aW9u
CiAJICogICAge0BsaW5rICNDT01QSUxFUl9OT05OVUxMX0JZX0RFRkFVTFRfQU5OT1RBVElPTl9O
QU1FfS4KIAkgKiA8L3A+CiAJICogPHA+VGhpcyBvcHRpb24gb25seSBoYXMgYW4gZWZmZWN0IGlm
IHRoZSBvcHRpb24ge0BsaW5rICNDT01QSUxFUl9BTk5PVEFUSU9OX05VTExfQU5BTFlTSVN9IGlz
IGVuYWJsZWQuPC9wPgpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvUGFja2FnZUZyYWdtZW50LmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9QYWNrYWdl
RnJhZ21lbnQuamF2YQppbmRleCAzNWZiMzRiLi4yOWZlYjllIDEwMDY0NAotLS0gYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS9QYWNrYWdl
RnJhZ21lbnQuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29yZS9QYWNrYWdlRnJhZ21lbnQuamF2YQpAQCAtMSw1ICsxLDUgQEAK
IC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMDkgSUJN
IENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTIgSUJN
IENvcnBvcmF0aW9uIGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHBy
b2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFi
bGUgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAq
IHdoaWNoIGFjY29tcGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0
CkBAIC0xNyw2ICsxNyw3IEBACiAKIGltcG9ydCBvcmcuZWNsaXBzZS5jb3JlLnJlc291cmNlcy5J
Q29udGFpbmVyOwogaW1wb3J0IG9yZy5lY2xpcHNlLmNvcmUucmVzb3VyY2VzLklGb2xkZXI7Citp
bXBvcnQgb3JnLmVjbGlwc2UuY29yZS5yZXNvdXJjZXMuSU1hcmtlcjsKIGltcG9ydCBvcmcuZWNs
aXBzZS5jb3JlLnJlc291cmNlcy5JUmVzb3VyY2U7CiBpbXBvcnQgb3JnLmVjbGlwc2UuY29yZS5y
dW50aW1lLkNvcmVFeGNlcHRpb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuY29yZS5ydW50aW1lLklQ
YXRoOwpAQCAtMjcsNiArMjgsNyBAQAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLklDbGFz
c0ZpbGU7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuSUNvbXBpbGF0aW9uVW5pdDsKIGlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5JSmF2YUVsZW1lbnQ7CitpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmNvcmUuSUphdmFNb2RlbE1hcmtlcjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29y
ZS5JSmF2YU1vZGVsU3RhdHVzQ29uc3RhbnRzOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3Jl
LklKYXZhUHJvamVjdDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5JUGFja2FnZUZyYWdt
ZW50OwpAQCAtMzYsOCArMzgsMTAgQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5KYXZh
Q29yZTsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5KYXZhTW9kZWxFeGNlcHRpb247CiBp
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuV29ya2luZ0NvcHlPd25lcjsKK2ltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5DYXRlZ29yaXplZFByb2JsZW07CiBpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLnV0aWwuU3VmZml4Q29uc3RhbnRzOwogaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLkphdmFNb2RlbE1hbmFnZXIuUGVyUHJv
amVjdEluZm87CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvcmUuYnVpbGRlci5K
YXZhQnVpbGRlcjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS51dGlsLk1l
bWVudG9Ub2tlbml6ZXI7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvcmUudXRp
bC5NZXNzYWdlczsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29yZS51dGlsLlV0
aWw7CkBAIC01MTIsNCArNTE2LDY4IEBACiAKIAlyZXR1cm4gSmF2YU1vZGVsU3RhdHVzLlZFUklG
SUVEX09LOwogfQorCisvKioKKyAqIFJlY29yZCBhIG5ldyBtYXJrZXIgZGVub3RpbmcgYSBwYWNr
YWdlIHByb2JsZW0KKyAqLworcHVibGljIHZvaWQgY3JlYXRlUGFja2FnZVByb2JsZW1NYXJrZXIo
Q2F0ZWdvcml6ZWRQcm9ibGVtIHByb2JsZW0pIHsKKwlTdHJpbmcgbWFya2VyVHlwZSA9IHByb2Js
ZW0uZ2V0TWFya2VyVHlwZSgpOworCUlSZXNvdXJjZSByZXNvdXJjZSA9IHRoaXMucmVzb3VyY2Uo
KTsKKwlpbnQgaWQgPSBwcm9ibGVtLmdldElEKCk7CisJYm9vbGVhbiBtYW5hZ2VkUHJvYmxlbSA9
IGZhbHNlOworCWlmIChJSmF2YU1vZGVsTWFya2VyLkpBVkFfTU9ERUxfUFJPQkxFTV9NQVJLRVIu
ZXF1YWxzKG1hcmtlclR5cGUpKSB7CisJCUlNYXJrZXIgbWFya2VyOworCQl0cnkgeworCQkJbWFy
a2VyID0gcmVzb3VyY2UuY3JlYXRlTWFya2VyKG1hcmtlclR5cGUpOworCQkJU3RyaW5nW10gYXR0
cmlidXRlTmFtZXMgPSB7CisJCQkJSU1hcmtlci5NRVNTQUdFLAorCQkJCUlNYXJrZXIuU0VWRVJJ
VFksCisJCQkJSUphdmFNb2RlbE1hcmtlci5JRCwKKwkJCQlJTWFya2VyLkNIQVJfU1RBUlQsCisJ
CQkJSU1hcmtlci5DSEFSX0VORCwKKwkJCQlJTWFya2VyLkxJTkVfTlVNQkVSLAorCQkJCUlKYXZh
TW9kZWxNYXJrZXIuQVJHVU1FTlRTLAorCQkJCUlKYXZhTW9kZWxNYXJrZXIuQ0FURUdPUllfSUQs
CisJCQl9OworCQkJaW50IHN0YW5kYXJkTGVuZ3RoID0gYXR0cmlidXRlTmFtZXMubGVuZ3RoOwor
CQkJU3RyaW5nW10gYWxsTmFtZXMgPSBhdHRyaWJ1dGVOYW1lczsKKwkJCWludCBtYW5hZ2VkTGVu
Z3RoID0gbWFuYWdlZFByb2JsZW0gPyAwIDogMTsKKwkJCVN0cmluZ1tdIGV4dHJhQXR0cmlidXRl
TmFtZXMgPSBwcm9ibGVtLmdldEV4dHJhTWFya2VyQXR0cmlidXRlTmFtZXMoKTsKKwkJCWludCBl
eHRyYUxlbmd0aCA9IGV4dHJhQXR0cmlidXRlTmFtZXMgPT0gbnVsbCA/IDAgOiBleHRyYUF0dHJp
YnV0ZU5hbWVzLmxlbmd0aDsKKwkJCWlmIChtYW5hZ2VkTGVuZ3RoID4gMCB8fCBleHRyYUxlbmd0
aCA+IDApIHsKKwkJCQlhbGxOYW1lcyA9IG5ldyBTdHJpbmdbc3RhbmRhcmRMZW5ndGggKyBtYW5h
Z2VkTGVuZ3RoICsgZXh0cmFMZW5ndGhdOworCQkJCVN5c3RlbS5hcnJheWNvcHkoYXR0cmlidXRl
TmFtZXMsIDAsIGFsbE5hbWVzLCAwLCBzdGFuZGFyZExlbmd0aCk7CisJCQkJaWYgKG1hbmFnZWRM
ZW5ndGggPiAwKQorCQkJCQlhbGxOYW1lc1tzdGFuZGFyZExlbmd0aF0gPSBJTWFya2VyLlNPVVJD
RV9JRDsKKwkJCQlTeXN0ZW0uYXJyYXljb3B5KGV4dHJhQXR0cmlidXRlTmFtZXMsIDAsIGFsbE5h
bWVzLCBzdGFuZGFyZExlbmd0aCArIG1hbmFnZWRMZW5ndGgsIGV4dHJhTGVuZ3RoKTsKKwkJCX0K
KwkKKwkJCU9iamVjdFtdIGFsbFZhbHVlcyA9IG5ldyBPYmplY3RbYWxsTmFtZXMubGVuZ3RoXTsK
KwkJCS8vIHN0YW5kYXJkIGF0dHJpYnV0ZXMKKwkJCWludCBpbmRleCA9IDA7CisJCQlhbGxWYWx1
ZXNbaW5kZXgrK10gPSBwcm9ibGVtLmdldE1lc3NhZ2UoKTsgLy8gbWVzc2FnZQorCQkJYWxsVmFs
dWVzW2luZGV4KytdID0gcHJvYmxlbS5pc0Vycm9yKCkgPyBuZXcgSW50ZWdlcihJTWFya2VyLlNF
VkVSSVRZX0VSUk9SKSA6IG5ldyBJbnRlZ2VyKElNYXJrZXIuU0VWRVJJVFlfV0FSTklORyk7IC8v
IHNldmVyaXR5CisJCQlhbGxWYWx1ZXNbaW5kZXgrK10gPSBuZXcgSW50ZWdlcihpZCk7IC8vIElE
CisJCQlhbGxWYWx1ZXNbaW5kZXgrK10gPSBuZXcgSW50ZWdlcihwcm9ibGVtLmdldFNvdXJjZVN0
YXJ0KCkpOyAvLyBzdGFydAorCQkJaW50IGVuZCA9IHByb2JsZW0uZ2V0U291cmNlRW5kKCk7CisJ
CQlhbGxWYWx1ZXNbaW5kZXgrK10gPSBuZXcgSW50ZWdlcihlbmQgPiAwID8gZW5kICsgMSA6IGVu
ZCk7IC8vIGVuZAorCQkJYWxsVmFsdWVzW2luZGV4KytdID0gbmV3IEludGVnZXIocHJvYmxlbS5n
ZXRTb3VyY2VMaW5lTnVtYmVyKCkpOyAvLyBsaW5lCisJCQlhbGxWYWx1ZXNbaW5kZXgrK10gPSBV
dGlsLmdldFByb2JsZW1Bcmd1bWVudHNGb3JNYXJrZXIocHJvYmxlbS5nZXRBcmd1bWVudHMoKSk7
IC8vIGFyZ3VtZW50cworCQkJYWxsVmFsdWVzW2luZGV4KytdID0gbmV3IEludGVnZXIocHJvYmxl
bS5nZXRDYXRlZ29yeUlEKCkpOyAvLyBjYXRlZ29yeSBJRAorCQkJLy8gU09VUkNFX0lEIGF0dHJp
YnV0ZSBmb3IgSkRUIHByb2JsZW1zCisJCQlpZiAobWFuYWdlZExlbmd0aCA+IDApCisJCQkJYWxs
VmFsdWVzW2luZGV4KytdID0gSmF2YUJ1aWxkZXIuU09VUkNFX0lEOworCQkJLy8gb3B0aW9uYWwg
ZXh0cmEgYXR0cmlidXRlcworCQkJaWYgKGV4dHJhTGVuZ3RoID4gMCkKKwkJCQlTeXN0ZW0uYXJy
YXljb3B5KHByb2JsZW0uZ2V0RXh0cmFNYXJrZXJBdHRyaWJ1dGVWYWx1ZXMoKSwgMCwgYWxsVmFs
dWVzLCBpbmRleCwgZXh0cmFMZW5ndGgpOworCQorCQkJbWFya2VyLnNldEF0dHJpYnV0ZXMoYWxs
TmFtZXMsIGFsbFZhbHVlcyk7CisJCX0gY2F0Y2ggKENvcmVFeGNlcHRpb24gZSkgeworCQkJLy8g
Y291bGQgbm90IGNyZWF0ZSBtYXJrZXI6IGNhbm5vdCBkbyBtdWNoCisJCQlpZiAoSmF2YU1vZGVs
TWFuYWdlci5WRVJCT1NFKSB7CisJCQkJZS5wcmludFN0YWNrVHJhY2UoKTsKKwkJCX0KKwkJfQor
CX0KK30KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb3JlL2J1aWxkZXIvQWJzdHJhY3RJbWFnZUJ1aWxkZXIuamF2YSBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3Jl
L2J1aWxkZXIvQWJzdHJhY3RJbWFnZUJ1aWxkZXIuamF2YQppbmRleCA1MzFiMmI1Li5kM2RhNzgz
IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29yZS9idWlsZGVyL0Fic3RyYWN0SW1hZ2VCdWlsZGVyLmphdmEKKysrIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvYnVp
bGRlci9BYnN0cmFjdEltYWdlQnVpbGRlci5qYXZhCkBAIC0xLDUgKzEsNSBAQAogLyoqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAwOSBJQk0gQ29ycG9yYXRp
b24gYW5kIG90aGVycy4KKyAqIENvcHlyaWdodCAoYykgMjAwMCwgMjAxMiBJQk0gQ29ycG9yYXRp
b24gYW5kIG90aGVycy4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQg
dGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0
aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNj
b21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKQEAgLTI1LDYg
KzI1LDcgQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIudXRpbC5T
aW1wbGVTZXQ7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLnV0aWwu
U3VmZml4Q29uc3RhbnRzOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLkph
dmFNb2RlbE1hbmFnZXI7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvcmUuUGFj
a2FnZUZyYWdtZW50OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLnV0aWwu
TWVzc2FnZXM7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvcmUudXRpbC5VdGls
OwogCkBAIC02NzMsNyArNjc0LDcgQEAKIAogCUlSZXNvdXJjZSByZXNvdXJjZSA9IHNvdXJjZUZp
bGUucmVzb3VyY2U7CiAJSGFzaFNldCBtYW5hZ2VkTWFya2VyVHlwZXMgPSBKYXZhTW9kZWxNYW5h
Z2VyLmdldEphdmFNb2RlbE1hbmFnZXIoKS5jb21waWxhdGlvblBhcnRpY2lwYW50cy5tYW5hZ2Vk
TWFya2VyVHlwZXMoKTsKLQlmb3IgKGludCBpID0gMCwgbCA9IHByb2JsZW1zLmxlbmd0aDsgaSA8
IGw7IGkrKykgeworCXByb2JsZW1zOiBmb3IgKGludCBpID0gMCwgbCA9IHByb2JsZW1zLmxlbmd0
aDsgaSA8IGw7IGkrKykgewogCQlDYXRlZ29yaXplZFByb2JsZW0gcHJvYmxlbSA9IHByb2JsZW1z
W2ldOwogCQlpbnQgaWQgPSBwcm9ibGVtLmdldElEKCk7CiAKQEAgLTcwNiw2ICs3MDcsMzMgQEAK
IAkJYm9vbGVhbiBtYW5hZ2VkUHJvYmxlbSA9IGZhbHNlOwogCQlpZiAoSUphdmFNb2RlbE1hcmtl
ci5KQVZBX01PREVMX1BST0JMRU1fTUFSS0VSLmVxdWFscyhtYXJrZXJUeXBlKQogCQkJCXx8ICht
YW5hZ2VkUHJvYmxlbSA9IG1hbmFnZWRNYXJrZXJUeXBlcy5jb250YWlucyhtYXJrZXJUeXBlKSkp
IHsKKwkJCWlmIChpZCA9PSBJUHJvYmxlbS5NaXNzaW5nTm9uTnVsbEJ5RGVmYXVsdEFubm90YXRp
b25PblBhY2thZ2UgJiYgIShDaGFyT3BlcmF0aW9uLmVxdWFscyhzb3VyY2VGaWxlLmdldE1haW5U
eXBlTmFtZSgpLCBUeXBlQ29uc3RhbnRzLlBBQ0tBR0VfSU5GT19OQU1FKSkpIHsKKwkJCQljaGFy
W10gZmlsZU5hbWUgPSBzb3VyY2VGaWxlLmdldEZpbGVOYW1lKCk7CisJCQkJaW50IHBrZ0VuZCA9
IENoYXJPcGVyYXRpb24ubGFzdEluZGV4T2YoJy8nLCBmaWxlTmFtZSk7CisJCQkJaWYgKHBrZ0Vu
ZCA9PSAtMSkKKwkJCQkJcGtnRW5kID0gQ2hhck9wZXJhdGlvbi5sYXN0SW5kZXhPZihGaWxlLnNl
cGFyYXRvckNoYXIsIGZpbGVOYW1lKTsKKwkJCQlQYWNrYWdlRnJhZ21lbnQgcGtnID0gbnVsbDsK
KwkJCQlpZiAocGtnRW5kICE9IC0xKQorCQkJCQlwa2cgPSAoUGFja2FnZUZyYWdtZW50KSBVdGls
LmdldFBhY2thZ2VGcmFnbWVudChzb3VyY2VGaWxlLmdldEZpbGVOYW1lKCksIHBrZ0VuZCwgLTEg
LypubyBqYXIgc2VwYXJhdG9yIGZvciBqYXZhIGZpbGVzKi8pOworCQkJCQorCQkJCWlmIChwa2cg
IT0gbnVsbCkgeworCQkJCQl0cnkgeworCQkJCQkJSU1hcmtlcltdIGV4aXN0aW5nTWFya2VycyA9
IHBrZy5yZXNvdXJjZSgpLmZpbmRNYXJrZXJzKElKYXZhTW9kZWxNYXJrZXIuSkFWQV9NT0RFTF9Q
Uk9CTEVNX01BUktFUiwgZmFsc2UsIElSZXNvdXJjZS5ERVBUSF9aRVJPKTsKKwkJCQkJCWludCBs
ZW4gPSBleGlzdGluZ01hcmtlcnMubGVuZ3RoOworCQkJCQkJZm9yIChpbnQgaj0wOyBqIDwgbGVu
OyBqKyspIHsKKwkJCQkJCQlpZiAoKChJbnRlZ2VyKWV4aXN0aW5nTWFya2Vyc1tqXS5nZXRBdHRy
aWJ1dGUoSUphdmFNb2RlbE1hcmtlci5JRCkpLmludFZhbHVlKCkgPT0gSVByb2JsZW0uTWlzc2lu
Z05vbk51bGxCeURlZmF1bHRBbm5vdGF0aW9uT25QYWNrYWdlKSB7CisJCQkJCQkJCWNvbnRpbnVl
IHByb2JsZW1zOyAvLyBtYXJrZXIgYWxyZWFkeSBwcmVzZW50CisJCQkJCQkJfQorCQkJCQkJfQor
CQkJCQl9IGNhdGNoIChDb3JlRXhjZXB0aW9uIGUpIHsKKwkJCQkJCS8vIG1hcmtlciByZXRyaWV2
YWwgZmFpbGVkLCBjYW5ub3QgZG8gbXVjaAorCQkJCQkJaWYgKEphdmFNb2RlbE1hbmFnZXIuVkVS
Qk9TRSkgeworCQkJCQkJCWUucHJpbnRTdGFja1RyYWNlKCk7CisJCQkJCQl9CisJCQkJCX0KKwkJ
CQkJcmVzb3VyY2UgPSBwa2cucmVzb3VyY2UoKTsKKwkJCQl9CisJCQl9CiAJCQlJTWFya2VyIG1h
cmtlciA9IHJlc291cmNlLmNyZWF0ZU1hcmtlcihtYXJrZXJUeXBlKTsKIAogCQkJU3RyaW5nW10g
YXR0cmlidXRlTmFtZXMgPSBKQVZBX1BST0JMRU1fTUFSS0VSX0FUVFJJQlVURV9OQU1FUzsKZGlm
ZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb3JlL2J1aWxkZXIvSW5jcmVtZW50YWxJbWFnZUJ1aWxkZXIuamF2YSBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL21vZGVsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb3JlL2J1aWxkZXIv
SW5jcmVtZW50YWxJbWFnZUJ1aWxkZXIuamF2YQppbmRleCAxMzZkOGE1Li42MjI4NzNmIDEwMDY0
NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29yZS9idWlsZGVyL0luY3JlbWVudGFsSW1hZ2VCdWlsZGVyLmphdmEKKysrIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvYnVpbGRl
ci9JbmNyZW1lbnRhbEltYWdlQnVpbGRlci5qYXZhCkBAIC0yMSw2ICsyMSw3IEBACiBpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLnByb2JsZW0uKjsKIGltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIudXRpbC5TaW1wbGVMb29rdXBUYWJsZTsKIGlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIudXRpbC5TdWZmaXhDb25zdGFu
dHM7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvcmUuUGFja2FnZUZyYWdtZW50
OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb3JlLnV0aWwuTWVzc2FnZXM7CiBp
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvcmUudXRpbC5VdGlsOwogCkBAIC03OTcs
NiArNzk4LDI2IEBACiB9CiAKIHByb3RlY3RlZCB2b2lkIHVwZGF0ZVByb2JsZW1zRm9yKFNvdXJj
ZUZpbGUgc291cmNlRmlsZSwgQ29tcGlsYXRpb25SZXN1bHQgcmVzdWx0KSB0aHJvd3MgQ29yZUV4
Y2VwdGlvbiB7CisJaWYgKENoYXJPcGVyYXRpb24uZXF1YWxzKHNvdXJjZUZpbGUuZ2V0TWFpblR5
cGVOYW1lKCksIFR5cGVDb25zdGFudHMuUEFDS0FHRV9JTkZPX05BTUUpKSB7CisJCUlSZXNvdXJj
ZSBwa2dSZXNvdXJjZSA9IHNvdXJjZUZpbGUucmVzb3VyY2UuZ2V0UGFyZW50KCk7CisJCWlmIChw
a2dSZXNvdXJjZSAhPSBudWxsICYmIHBrZ1Jlc291cmNlLmV4aXN0cygpKSB7CisJCQlwa2dSZXNv
dXJjZS5kZWxldGVNYXJrZXJzKElKYXZhTW9kZWxNYXJrZXIuSkFWQV9NT0RFTF9QUk9CTEVNX01B
UktFUiwgZmFsc2UsIElSZXNvdXJjZS5ERVBUSF9JTkZJTklURSk7CisJCX0KKwl9IGVsc2Ugewor
CQkvLyB0aGVyZSBtYXkgYmUgbWFya2VycyBvbmx5IG9uIHBhY2thZ2UsIHJlbW92ZSB0aGVtCisJ
CS8vIHNvIHRoYXQgaWYgdGhleSBhcmUgbm8gbG9uZ2VyIHZhbGlkLCB0aGV5IHdvbid0IHBlcnNp
c3QuCisJCWNoYXJbXSBmaWxlTmFtZSA9IHNvdXJjZUZpbGUuZ2V0RmlsZU5hbWUoKTsKKwkJaW50
IHBrZ0VuZCA9IENoYXJPcGVyYXRpb24ubGFzdEluZGV4T2YoJy8nLCBmaWxlTmFtZSk7CisJCWlm
IChwa2dFbmQgPT0gLTEpCisJCQlwa2dFbmQgPSBDaGFyT3BlcmF0aW9uLmxhc3RJbmRleE9mKEZp
bGUuc2VwYXJhdG9yQ2hhciwgZmlsZU5hbWUpOworCQlQYWNrYWdlRnJhZ21lbnQgcGtnID0gbnVs
bDsKKwkJaWYgKHBrZ0VuZCAhPSAtMSkKKwkJCXBrZyA9IChQYWNrYWdlRnJhZ21lbnQpIFV0aWwu
Z2V0UGFja2FnZUZyYWdtZW50KHNvdXJjZUZpbGUuZ2V0RmlsZU5hbWUoKSwgcGtnRW5kLCAtMSAv
Km5vIGphciBzZXBhcmF0b3IgZm9yIGphdmEgZmlsZXMqLyk7CisJCUlSZXNvdXJjZSByZXMgPSBw
a2cgIT0gbnVsbD8gcGtnLmdldFJlc291cmNlKCkgOiBudWxsOworCQlpZiAocmVzICE9IG51bGwg
JiYgcmVzLmV4aXN0cygpKSB7IAorCQkJcmVzLmRlbGV0ZU1hcmtlcnMoSUphdmFNb2RlbE1hcmtl
ci5KQVZBX01PREVMX1BST0JMRU1fTUFSS0VSLCBmYWxzZSwgSVJlc291cmNlLkRFUFRIX0lORklO
SVRFKTsKKwkJfQorCX0KIAlJTWFya2VyW10gbWFya2VycyA9IEphdmFCdWlsZGVyLmdldFByb2Js
ZW1zRm9yKHNvdXJjZUZpbGUucmVzb3VyY2UpOwogCUNhdGVnb3JpemVkUHJvYmxlbVtdIHByb2Js
ZW1zID0gcmVzdWx0LmdldFByb2JsZW1zKCk7CiAJaWYgKHByb2JsZW1zID09IG51bGwgJiYgbWFy
a2Vycy5sZW5ndGggPT0gMCkgcmV0dXJuOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvbW9kZWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvcmUvdXRpbC9VdGlsLmphdmEgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS91
dGlsL1V0aWwuamF2YQppbmRleCAyMDIzOTU0Li5lNDVlODczIDEwMDY0NAotLS0gYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29yZS91dGlsL1V0
aWwuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9tb2RlbC9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29yZS91dGlsL1V0aWwuamF2YQpAQCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTEgSUJNIENvcnBvcmF0aW9u
IGFuZCBvdGhlcnMuCisgKiBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTIgSUJNIENvcnBvcmF0aW9u
IGFuZCBvdGhlcnMuCiAgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBUaGlzIHByb2dyYW0gYW5kIHRo
ZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzCiAgKiBhcmUgbWFkZSBhdmFpbGFibGUgdW5kZXIgdGhl
IHRlcm1zIG9mIHRoZSBFY2xpcHNlIFB1YmxpYyBMaWNlbnNlIHYxLjAKICAqIHdoaWNoIGFjY29t
cGFuaWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC05NDAsNyAr
OTQwLDcgQEAKIAkJcmV0dXJuIGxpbmVTZXBhcmF0b3I7CiAJfQogCi0JcHJpdmF0ZSBzdGF0aWMg
SVBhY2thZ2VGcmFnbWVudCBnZXRQYWNrYWdlRnJhZ21lbnQoY2hhcltdIGZpbGVOYW1lLCBpbnQg
cGtnRW5kLCBpbnQgamFyU2VwYXJhdG9yKSB7CisJcHVibGljIHN0YXRpYyBJUGFja2FnZUZyYWdt
ZW50IGdldFBhY2thZ2VGcmFnbWVudChjaGFyW10gZmlsZU5hbWUsIGludCBwa2dFbmQsIGludCBq
YXJTZXBhcmF0b3IpIHsKIAkJaWYgKGphclNlcGFyYXRvciAhPSAtMSkgewogCQkJU3RyaW5nIGph
ck1lbWVudG8gPSBuZXcgU3RyaW5nKGZpbGVOYW1lLCAwLCBqYXJTZXBhcmF0b3IpOwogCQkJUGFj
a2FnZUZyYWdtZW50Um9vdCByb290ID0gKFBhY2thZ2VGcmFnbWVudFJvb3QpIEphdmFDb3JlLmNy
ZWF0ZShqYXJNZW1lbnRvKTs=
</data>

          </attachment>
      

    </bug>

</bugzilla>