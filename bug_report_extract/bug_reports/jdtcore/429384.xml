<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>429384</bug_id>
          
          <creation_ts>2014-03-01 09:35:00 -0500</creation_ts>
          <short_desc>[1.8][null] implement conformance rules for null-annotated lower / upper type bounds</short_desc>
          <delta_ts>2014-03-07 07:27:43 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>392099</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Stephan Herrmann">stephan.herrmann</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>manpalat</cc>
    
    <cc>shankhba</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2370118</commentid>
    <comment_count>0</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-01 09:35:29 -0500</bug_when>
    <thetext>Null type annotations are not correctly analyzed for various situations like

  List&lt;? extends @Nullable A&gt; la = new ArrayList&lt;@NonNull B&gt;();

Since passing B for &quot;? extends A&quot; is legal (if B extends A), the same statement should also allow to specialize from @Nullable to @NonNull.

Obviously, this has to be considered also when analyzing usage of reference with bounded-wildcard type carrying null type annotations:

  List&lt;? extends @NonNull A&gt; la1 = ...
  la1.add(null); // should be error
  List&lt;? super @NonNull A&gt; la1 = ...
  @NonNull A a = la1.get(0); // should be error

etc. pp.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2370150</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-01 16:41:53 -0500</bug_when>
    <thetext>Tests &amp; fix released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=29bba5ec8d05a9cd1832ad934d2530b41087b676

Main part of the change is to implement smarter extraction of nullTagBits during NullAnnotationMatching.analyse, considering the fact that for wildcards &amp; type variables (incl. captures) we need different rules depending on whether we&apos;re looking at required vs. provided types.

This is done by generally interpreting
 - ... extends @NonNull T  as : must be @NonNull
 - ... extends @Nullable T as : can be @Nullable or @NonNull
 - ... super @NonNull T    as : can be @Nullable or @NonNull
 - ... super @Nullable T   as : must be @Nullable

If both annotations are possible:
 - if it&apos;s a wildcard as a required type, any nullness of the provided type is accepted
 - if it&apos;s a type variable as a provided type, the required type must be a wildcard type accepting both nullness values
 - if it&apos;s a type variable as a required type, we assume the stricter constraint and require @NonNull


For proper error reporting I had to fill in some nullAnnotatedReadableName() methods.


Also propagation of TagBits.HasNullTypeAnnotation was lacking from a few locations.


Finally, I had to fine tune the work from bug 428985 and bug 416190:

When creating an InferenceVariable for a type variable with &quot;extends @NonNull X&quot; the non-null bit is set in the IV&apos;s tagBits as a mandatory property of the solution. For &quot;extends @Nullable&quot; I copy the bit into IV#nullHints to be used if nothing else is requested.

During BoundSet$ThreeSets.setInstantiation(..) we now respect the nullTagBits from (a) a previous instantiation and (b) IV#tagBits, admitting improvement, but keeping @NonNull once set.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372832</commentid>
    <comment_count>2</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-03-07 03:17:01 -0500</bug_when>
    <thetext>Test cases (added as part of the commit) show up the correct errors as part of the fix. Without the fix some of the errors are missing.

e.g. 

1) @NonNull X1 mExtends3(List&lt;X1&gt; t) { return null; } // ERR.
2) &lt;T extends @NonNull A&gt; T mExtends2(List&lt;T&gt; t) { return null; } // missing</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372833</commentid>
    <comment_count>3</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2014-03-07 03:17:14 -0500</bug_when>
    <thetext>Verified as working for Eclipse + Java 8 RC2 using Kepler SR2 +   
Eclipse Java Development Tools Patch for Java 8 Support (BETA) 
1.0.0.v20140306-1935</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>