<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>443467</bug_id>
          
          <creation_ts>2014-09-07 13:42:00 -0400</creation_ts>
          <short_desc>[1.8][null] InternalError: Unexpected binding type</short_desc>
          <delta_ts>2014-09-19 03:41:27 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.5</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 8</op_sys>
          <bug_status>ASSIGNED</bug_status>
          <resolution></resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Timo Kinnunen">timo.kinnunen</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2448514</commentid>
    <comment_count>0</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-09-07 13:42:01 -0400</bug_when>
    <thetext>Got the following scary error while in the middle of rewriting a statement.

To reproduce, using the following source code:

import java.nio.file.Path;
import java.time.Instant;
import java.util.HashMap;
import java.util.stream.Stream;
import javafx.util.Pair;

public class BuildIdeMain {
static void writeUpdates(Stream&lt;Path&gt; filter2, HashMap&lt;Path, Pair&lt;byte[], Instant&gt;&gt; ideFiles, HashMap&lt;Path, Path&gt; updateToFile) {
// filter2.map(p -&gt; new Pair&lt;&gt;(updateToFile.get(p), p-&gt;ideFiles.get(p)));
}
}

Steps:
1. Uncomment the commented line.
2. Save the file with CTRL+S.
3. This causes an internal error message to popup in the workbench, followed by a suggestion to terminate Eclipse. 

After that, commenting the line again, saving the file and then attempting to copy the commented line to the clipboard with CTRL+C causes the entire workbench to deadlock.

Tested with Eclipse SDK Version: Mars (4.5) Build id: I20140903-1100

Here&apos;s the stack trace:

java.lang.InternalError: Unexpected binding type
	at org.eclipse.jdt.internal.compiler.lookup.TypeBindingVisitor.visit(TypeBindingVisitor.java:134)
	at org.eclipse.jdt.internal.compiler.ast.NullAnnotationMatching.checkForContraditions(NullAnnotationMatching.java:459)
	at org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.rebindInnerPolies(InferenceContext18.java:1474)
	at org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.rebindInnerPolies(InferenceContext18.java:1423)
	at org.eclipse.jdt.internal.compiler.lookup.InferenceContext18.inferInvocationType(InferenceContext18.java:560)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.inferInvocationType(Scope.java:5163)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findDefaultAbstractMethod(Scope.java:1300)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod0(Scope.java:1771)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.findMethod(Scope.java:1666)
	at org.eclipse.jdt.internal.compiler.lookup.Scope.getMethod(Scope.java:2941)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.findMethodBinding(MessageSend.java:868)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:699)
	at org.eclipse.jdt.internal.compiler.ast.MessageSend.resolveType(MessageSend.java:603)
	at org.eclipse.jdt.internal.compiler.ast.LocalDeclaration.resolve(LocalDeclaration.java:251)
	at org.eclipse.jdt.internal.compiler.ast.Block.resolve(Block.java:119)
	at org.eclipse.jdt.internal.compiler.ast.ForeachStatement.resolve(ForeachStatement.java:560)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolveStatements(AbstractMethodDeclaration.java:620)
	at org.eclipse.jdt.internal.compiler.ast.MethodDeclaration.resolveStatements(MethodDeclaration.java:306)
	at org.eclipse.jdt.internal.compiler.ast.AbstractMethodDeclaration.resolve(AbstractMethodDeclaration.java:530)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1207)
	at org.eclipse.jdt.internal.compiler.ast.TypeDeclaration.resolve(TypeDeclaration.java:1320)
	at org.eclipse.jdt.internal.compiler.ast.CompilationUnitDeclaration.resolve(CompilationUnitDeclaration.java:590)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:1204)
	at org.eclipse.jdt.core.dom.CompilationUnitResolver.resolve(CompilationUnitResolver.java:689)
	at org.eclipse.jdt.core.dom.ASTParser.internalCreateAST(ASTParser.java:1183)
	at org.eclipse.jdt.core.dom.ASTParser.createAST(ASTParser.java:809)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider$1.run(ASTProvider.java:544)
	at org.eclipse.core.runtime.SafeRunner.run(SafeRunner.java:42)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.createAST(ASTProvider.java:537)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:480)
	at org.eclipse.jdt.internal.ui.javaeditor.ASTProvider.getAST(ASTProvider.java:470)
	at org.eclipse.jdt.ui.SharedASTProvider.getAST(SharedASTProvider.java:128)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup.calculateASTandInform(SelectionListenerWithASTManager.java:170)
	at org.eclipse.jdt.internal.ui.viewsupport.SelectionListenerWithASTManager$PartListenerGroup$3.run(SelectionListenerWithASTManager.java:155)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:54)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2448543</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-08 01:47:16 -0400</bug_when>
    <thetext>Could reproduce the internal error - didn&apos;t check the copy + paste problem.

Stephan, could you follow up ? TypeBindingVisitor is surprised by running into
a PolyTypeBinding.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2448912</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-09-08 14:19:00 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #1)
&gt; Could reproduce the internal error - didn&apos;t check the copy + paste problem.
&gt; 
&gt; Stephan, could you follow up ? TypeBindingVisitor is surprised by running
&gt; into
&gt; a PolyTypeBinding.

Do you think of avoiding this situation or of extending TypeBindingVisitor to cope with a PolyTypeBinding? I&apos;m afraid that subclasses of TypeBindingVisitor may not be able to make hear or tails of a PolyTypeBinding.

Seeing this being called from rebindInnerPolies() I&apos;m in fact surprised, too :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2450286</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-11 06:42:40 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #2)
&gt; (In reply to Srikanth Sankaran from comment #1)
&gt; &gt; Could reproduce the internal error - didn&apos;t check the copy + paste problem.
&gt; &gt; 
&gt; &gt; Stephan, could you follow up ? TypeBindingVisitor is surprised by running
&gt; &gt; into
&gt; &gt; a PolyTypeBinding.
&gt; 
&gt; Do you think of avoiding this situation or of extending TypeBindingVisitor
&gt; to cope with a PolyTypeBinding? I&apos;m afraid that subclasses of
&gt; TypeBindingVisitor may not be able to make hear or tails of a
&gt; PolyTypeBinding.

To answer this question, I tried to study the problem again, but on HEAD I
am seeing three build errors:

Description	Resource	Path	Location	Type
The constructor Pair&lt;Path,Object&gt;(Path, (&lt;no type&gt; p) -&gt; {}) is undefined	X.java	/P/src	line 9	Java Problem
The target type of this expression must be a functional interface	X.java	/P/src	line 9	Java Problem
The target type of this expression must be a functional interface	X.java	/P/src	line 9	Java Problem

Strange.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2450366</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-11 09:51:50 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #3)
&gt; (In reply to Stephan Herrmann from comment #2)
&gt; &gt; (In reply to Srikanth Sankaran from comment #1)
&gt; &gt; &gt; Could reproduce the internal error - didn&apos;t check the copy + paste problem.
&gt; &gt; &gt; 
&gt; &gt; &gt; Stephan, could you follow up ? TypeBindingVisitor is surprised by running
&gt; &gt; &gt; into
&gt; &gt; &gt; a PolyTypeBinding.
&gt; &gt; 
&gt; &gt; Do you think of avoiding this situation or of extending TypeBindingVisitor
&gt; &gt; to cope with a PolyTypeBinding? I&apos;m afraid that subclasses of
&gt; &gt; TypeBindingVisitor may not be able to make hear or tails of a
&gt; &gt; PolyTypeBinding.
&gt; 
&gt; To answer this question, I tried to study the problem again, but on HEAD I
&gt; am seeing three build errors:
&gt; 
&gt; Description	Resource	Path	Location	Type
&gt; The constructor Pair&lt;Path,Object&gt;(Path, (&lt;no type&gt; p) -&gt; {}) is undefined
&gt; X.java	/P/src	line 9	Java Problem
&gt; The target type of this expression must be a functional interface	X.java
&gt; /P/src	line 9	Java Problem
&gt; The target type of this expression must be a functional interface	X.java
&gt; /P/src	line 9	Java Problem
&gt; 
&gt; Strange.

OK, I had temporarily turned off annotation based null analysis, turning it
back on I get the internal error.

Feeding this code to javac I see: 

C:\jtests&gt;C:\work\jdk-8u20-fcs-bin-b26-windows-x64-30_jul_2014\jdk8_20\jdk1.8.0_
20\bin\javac -Xlint:unchecked -Xlint:deprecation -parameters -cp c:\jtests X.jav
a
X.java:9: error: variable p is already defined in method writeUpdates(Stream&lt;Pat
h&gt;,HashMap&lt;Path,Pair&lt;byte[],Instant&gt;&gt;,HashMap&lt;Path,Path&gt;)
 filter2.map(p -&gt; new Pair&lt;&gt;(updateToFile.get(p), p-&gt;ideFiles.get(p)));
                                                  ^
X.java:9: error: incompatible types: cannot infer type-variable(s) K,V
 filter2.map(p -&gt; new Pair&lt;&gt;(updateToFile.get(p), p-&gt;ideFiles.get(p)));
            ^
    (argument mismatch; Object is not a functional interface)
  where K,V are type-variables:
    K extends Object declared in class Pair
    V extends Object declared in class Pair
2 errors


First error looks bogus to me.

I&apos;ll look at it tomorrow and recommend a course of action for the internal
error.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2450392</commentid>
    <comment_count>5</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-09-11 10:25:50 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #4)
&gt; 
&gt; First error looks bogus to me.

This happened in the middle of overwriting a previously valid statement. Due to the severity of the error I did only a cursory reduction for a test-case; the code may well be invalid in all kinds of ways! 

In fact the first error looks totally valid now that I&apos;m looking at the code again from a bit farther away.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2450924</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-12 08:39:11 -0400</bug_when>
    <thetext>As an interim solution, I released a patch to avoid the internal error by 
enhancing the TypeBindingVisitor to have default nop visit method for PolyTypeBindings here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=c556da4b1d090d48013c553ce846a8e1c153e876


This still leaves two points to be investigated further:

(1) PolyTypeBindings being transient data structures, is there some
unexpected control flow that leads to their being exposed to unprepared
parties ? 

(2) The new test shows that we report an error twice. The call stacks
need to be studied to see if this is indicative of a larger problem.

Over to you Stephan.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2451255</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-09-12 18:54:16 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #6)
&gt; Over to you Stephan.

sure, thanks for taking it thus far.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2454048</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-09-19 03:41:27 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #3)

&gt; To answer this question, I tried to study the problem again, but on HEAD I
&gt; am seeing three build errors:
&gt; 
&gt; Description	Resource	Path	Location	Type
&gt; The constructor Pair&lt;Path,Object&gt;(Path, (&lt;no type&gt; p) -&gt; {}) is undefined
&gt; X.java	/P/src	line 9	Java Problem
&gt; The target type of this expression must be a functional interface	X.java
&gt; /P/src	line 9	Java Problem
&gt; The target type of this expression must be a functional interface	X.java
&gt; /P/src	line 9	Java Problem

The repeated error message goes away with the patch proposed at https://bugs.eclipse.org/bugs/show_bug.cgi?id=432682#c10</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>