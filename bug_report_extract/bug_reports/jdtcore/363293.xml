<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>363293</bug_id>
          
          <creation_ts>2011-11-09 07:05:00 -0500</creation_ts>
          <short_desc>resource leaks in org.eclipse.jdt.compiler.tool.tests</short_desc>
          <delta_ts>2011-12-06 06:48:59 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>minor</bug_severity>
          <target_milestone>3.8 M4</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Stephan Herrmann">stephan.herrmann</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>satyam.kandula</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2023398</commentid>
    <comment_count>0</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-11-09 07:05:16 -0500</bug_when>
    <thetext>When compiled using 3.8M3 the test suite org.eclipse.jdt.compiler.tool.tests 
raises 8 warnings like &quot;Resource leak: &apos;fileManager&apos; is never closed&quot;.

It seems that all these warnings are justified and should be fixed in the code.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2023403</commentid>
    <comment_count>1</comment_count>
      <attachid>206678</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-11-09 07:12:07 -0500</bug_when>
    <thetext>Created attachment 206678
proposed patch

This patch resolves the warnings by adding appropriate close() calls.

When I run the tests in the IDE I get one failure, though:
org.eclipse.jdt.compiler.tool.tests.CompilerToolTests.testFileManager2():
  
   Expected: &quot;X2.javaX.java&quot; but got &quot;X.javaX2.java&quot;.

A simple ordering issue, not sure if this is a known issue 
and this is independent of my patch anyway.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2023421</commentid>
    <comment_count>2</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-11-09 07:53:52 -0500</bug_when>
    <thetext>(In reply to comment #1)
Thats strange. Adding close calls seems to have changed the ordering of CU&apos;s in the fileManager. May be worth investigating why this happened, just to be sure there&apos;s no auxilliary problem that arose because of the new close() call.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2023428</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-11-09 08:04:40 -0500</bug_when>
    <thetext>(In reply to comment #2)
&gt; (In reply to comment #1)
&gt; Thats strange. Adding close calls seems to have changed the ordering of CU&apos;s in
&gt; the fileManager. May be worth investigating why this happened, just to be sure
&gt; there&apos;s no auxilliary problem that arose because of the new close() call.

I tried to mention that I see this failure also without the added close calls.

BTW: the doc of JavaFileManager.list(..) doesn&apos;t seem to make any
guarantees regarding the order in the result.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2023440</commentid>
    <comment_count>4</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-11-09 08:25:27 -0500</bug_when>
    <thetext>(In reply to comment #3)
&gt; I tried to mention that I see this failure also without the added close calls.
Ah! I see. I applied your patch and ran the test. Passes on my machine (Win32) everytime.Maybe on linux it gives an incorrect ordering sometimes. So, unless you see the incorrect order everytime you run the test, I guess the patch should be good.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2023493</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-11-09 09:17:34 -0500</bug_when>
    <thetext>(In reply to comment #4)
&gt; (In reply to comment #3)
&gt; &gt; I tried to mention that I see this failure also without the added close calls.
&gt; Ah! I see. I applied your patch and ran the test. Passes on my machine (Win32)
&gt; everytime.Maybe on linux it gives an incorrect ordering sometimes. So, unless
&gt; you see the incorrect order everytime you run the test, I guess the patch
&gt; should be good.

I do see it everytime. Regardless of with/without the close() calls, regardless
of the JRE used: I never see this one test pass.

Perhaps I should just release this patch and open a separate bug on the
ordering issue?
OTOH, I see no reason to actually check the ordering so we could simply
make the test order-independent, right?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2023498</commentid>
    <comment_count>6</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-11-09 09:22:30 -0500</bug_when>
    <thetext>(In reply to comment #5)
&gt; OTOH, I see no reason to actually check the ordering so we could simply
&gt; make the test order-independent, right?

Exactly. I meant to write the same in my previous comment :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2023526</commentid>
    <comment_count>7</comment_count>
      <attachid>206697</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-11-09 09:44:53 -0500</bug_when>
    <thetext>Created attachment 206697
patch with sorting

(In reply to comment #6)
&gt; (In reply to comment #5)
&gt; &gt; OTOH, I see no reason to actually check the ordering so we could simply
&gt; &gt; make the test order-independent, right?
&gt; 
&gt; Exactly. I meant to write the same in my previous comment :)

Here&apos;s a variant with sorting the result before comparison.
I&apos;ve tried it with a number of different JREs.
To be released unless anybody shouts :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2023532</commentid>
    <comment_count>8</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-11-09 09:53:09 -0500</bug_when>
    <thetext>Released for 3.8 M4 
via commit 2a6ccc4326c5f51715033b769f3fad2752538c59</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2035810</commentid>
    <comment_count>9</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-12-05 11:31:47 -0500</bug_when>
    <thetext>The change in AbstractCompilerToolTest.java doesn&apos;t look completely correct. It is ok to close the manager if it is coming from the standard manager, however it should not be closed if it is being passed as the argument.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2035944</commentid>
    <comment_count>10</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-12-05 14:58:08 -0500</bug_when>
    <thetext>(In reply to comment #9)
&gt; The change in AbstractCompilerToolTest.java doesn&apos;t look completely correct. It
&gt; is ok to close the manager if it is coming from the standard manager, however
&gt; it should not be closed if it is being passed as the argument.

Are you saying this, because you think it could break the tests?
-&gt; currently doesn&apos;t. Do you see danger that future tests will
   break because of this?

Or is it more the conceptual question, why the warning was issued in the
first place (since the current method doesn&apos;t have the sole responsibility)?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2036100</commentid>
    <comment_count>11</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-12-05 23:36:26 -0500</bug_when>
    <thetext>(In reply to comment #10) 
&gt; Are you saying this, because you think it could break the tests?
&gt; -&gt; currently doesn&apos;t. Do you see danger that future tests will
&gt;    break because of this?
Yes, the current tests don&apos;t fail because of this, but it could break future tests and I don&apos;t think this is a good idea to close the file that is passed as an argument. 
 
&gt; Or is it more the conceptual question, why the warning was issued in the
&gt; first place (since the current method doesn&apos;t have the sole responsibility)?
Yes, it is also conceptual. I think you wan to address this through bug 361407.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2036267</commentid>
    <comment_count>12</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-12-06 06:46:47 -0500</bug_when>
    <thetext>Filed bug 365710 to take care of the changes.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2036270</commentid>
    <comment_count>13</comment_count>
    <who name="Satyam Kandula">satyam.kandula</who>
    <bug_when>2011-12-06 06:48:59 -0500</bug_when>
    <thetext>Verified for 3.8M4 using build I20111202-0800</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>206678</attachid>
            <date>2011-11-09 07:12:00 -0500</date>
            <delta_ts>2011-11-09 09:44:53 -0500</delta_ts>
            <desc>proposed patch</desc>
            <filename>Bug_363293.patch</filename>
            <type>text/plain</type>
            <size>5152</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb21waWxlci50b29sLnRlc3RzL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29tcGlsZXIvdG9vbC90ZXN0cy9BYnN0cmFjdENvbXBpbGVyVG9vbFRlc3Qu
amF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb21waWxlci50b29sLnRlc3RzL3NyYy9vcmcvZWNsaXBz
ZS9qZHQvY29tcGlsZXIvdG9vbC90ZXN0cy9BYnN0cmFjdENvbXBpbGVyVG9vbFRlc3QuamF2YQpp
bmRleCBjZDZjYmZlLi5jYjI2MjMzIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29tcGls
ZXIudG9vbC50ZXN0cy9zcmMvb3JnL2VjbGlwc2UvamR0L2NvbXBpbGVyL3Rvb2wvdGVzdHMvQWJz
dHJhY3RDb21waWxlclRvb2xUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVy
LnRvb2wudGVzdHMvc3JjL29yZy9lY2xpcHNlL2pkdC9jb21waWxlci90b29sL3Rlc3RzL0Fic3Ry
YWN0Q29tcGlsZXJUb29sVGVzdC5qYXZhCkBAIC0xMiw2ICsxMiw3IEBACiBwYWNrYWdlIG9yZy5l
Y2xpcHNlLmpkdC5jb21waWxlci50b29sLnRlc3RzOwogCiBpbXBvcnQgamF2YS5pby5GaWxlOwor
aW1wb3J0IGphdmEuaW8uSU9FeGNlcHRpb247CiBpbXBvcnQgamF2YS5pby5QcmludFdyaXRlcjsK
IGltcG9ydCBqYXZhLnV0aWwuQXJyYXlMaXN0OwogaW1wb3J0IGphdmEudXRpbC5MaXN0OwpAQCAt
OTgsMTYgKzk5LDI0IEBACiAJCWlmIChtYW5hZ2VyID09IG51bGwpIHsKIAkJCW1hbmFnZXIgPSBD
T01QSUxFUi5nZXRTdGFuZGFyZEZpbGVNYW5hZ2VyKG51bGwsIG51bGwsIG51bGwpOyAvLyB3aWxs
IHBpY2sgZGVmYXVsdHMgdXAKIAkJfQotCQlMaXN0PEZpbGU+IGZpbGVzID0gbmV3IEFycmF5TGlz
dDxGaWxlPigpOwotCQlTdHJpbmdbXSBmaWxlTmFtZXMgPSBhcmd1bWVudHMuZmlsZU5hbWVzOwot
CQlmb3IgKGludCBpID0gMCwgbCA9IGZpbGVOYW1lcy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKLQkJ
CWlmIChmaWxlTmFtZXNbaV0uc3RhcnRzV2l0aChPVVRQVVRfRElSKSkgewotCQkJCWZpbGVzLmFk
ZChuZXcgRmlsZShmaWxlTmFtZXNbaV0pKTsKLQkJCX0gZWxzZSB7Ci0JCQkJZmlsZXMuYWRkKG5l
dyBGaWxlKE9VVFBVVF9ESVIgKyBGaWxlLnNlcGFyYXRvciArIGZpbGVOYW1lc1tpXSkpOworCQl0
cnkgeworCQkJTGlzdDxGaWxlPiBmaWxlcyA9IG5ldyBBcnJheUxpc3Q8RmlsZT4oKTsKKwkJCVN0
cmluZ1tdIGZpbGVOYW1lcyA9IGFyZ3VtZW50cy5maWxlTmFtZXM7CisJCQlmb3IgKGludCBpID0g
MCwgbCA9IGZpbGVOYW1lcy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKKwkJCQlpZiAoZmlsZU5hbWVz
W2ldLnN0YXJ0c1dpdGgoT1VUUFVUX0RJUikpIHsKKwkJCQkJZmlsZXMuYWRkKG5ldyBGaWxlKGZp
bGVOYW1lc1tpXSkpOworCQkJCX0gZWxzZSB7CisJCQkJCWZpbGVzLmFkZChuZXcgRmlsZShPVVRQ
VVRfRElSICsgRmlsZS5zZXBhcmF0b3IgKyBmaWxlTmFtZXNbaV0pKTsKKwkJCQl9CiAJCQl9Ci0J
CX0KLQkJQ29tcGlsYXRpb25UYXNrIHRhc2sgPSBDT01QSUxFUi5nZXRUYXNrKG91dCwgYXJndW1l
bnRzLnN0YW5kYXJkSmF2YUZpbGVNYW5hZ2VyIC8qIGNhcnJ5IHRoZSBudWxsIG92ZXIgKi8sIG5l
dyBDb21waWxlckludm9jYXRpb25EaWFnbm9zdGljTGlzdGVuZXIoZXJyKSwgYXJndW1lbnRzLm9w
dGlvbnMsIG51bGwsIG1hbmFnZXIuZ2V0SmF2YUZpbGVPYmplY3RzRnJvbUZpbGVzKGZpbGVzKSk7
Ci0JCXJldHVybiB0YXNrLmNhbGwoKTsKKwkJCUNvbXBpbGF0aW9uVGFzayB0YXNrID0gQ09NUElM
RVIuZ2V0VGFzayhvdXQsIGFyZ3VtZW50cy5zdGFuZGFyZEphdmFGaWxlTWFuYWdlciAvKiBjYXJy
eSB0aGUgbnVsbCBvdmVyICovLCBuZXcgQ29tcGlsZXJJbnZvY2F0aW9uRGlhZ25vc3RpY0xpc3Rl
bmVyKGVyciksIGFyZ3VtZW50cy5vcHRpb25zLCBudWxsLCBtYW5hZ2VyLmdldEphdmFGaWxlT2Jq
ZWN0c0Zyb21GaWxlcyhmaWxlcykpOworCQkJcmV0dXJuIHRhc2suY2FsbCgpOworCQl9IGZpbmFs
bHkgeworCQkJdHJ5IHsKKwkJCQltYW5hZ2VyLmNsb3NlKCk7CisJCQl9IGNhdGNoIChJT0V4Y2Vw
dGlvbiBlKSB7CisJCQkJLy8gbm9wCisJCQl9CisJCX0JCQogCX0KIH0KZGlmZiAtLWdpdCBhL29y
Zy5lY2xpcHNlLmpkdC5jb21waWxlci50b29sLnRlc3RzL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29t
cGlsZXIvdG9vbC90ZXN0cy9Db21waWxlckludm9jYXRpb25UZXN0cy5qYXZhIGIvb3JnLmVjbGlw
c2UuamR0LmNvbXBpbGVyLnRvb2wudGVzdHMvc3JjL29yZy9lY2xpcHNlL2pkdC9jb21waWxlci90
b29sL3Rlc3RzL0NvbXBpbGVySW52b2NhdGlvblRlc3RzLmphdmEKaW5kZXggNjBiZTk1Zi4uMDlh
MTY4OSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLnRvb2wudGVzdHMvc3Jj
L29yZy9lY2xpcHNlL2pkdC9jb21waWxlci90b29sL3Rlc3RzL0NvbXBpbGVySW52b2NhdGlvblRl
c3RzLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLnRvb2wudGVzdHMvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb21waWxlci90b29sL3Rlc3RzL0NvbXBpbGVySW52b2NhdGlvblRlc3Rz
LmphdmEKQEAgLTUwMiw3ICs1MDIsOSBAQAogCQlyZW1haW5pbmcgPSByZW1haW5pbmdBc0xpc3Qu
aXRlcmF0b3IoKTsKIAkJYXNzZXJ0VHJ1ZSgiZG9lcyBub3Qgc3VwcG9ydCAtZCBvcHRpb24iLCBq
YXZhY1N0YW5kYXJkSmF2YUZpbGVNYW5hZ2VyLmhhbmRsZU9wdGlvbigiLWQiLCByZW1haW5pbmcp
KTsKIAkJYXNzZXJ0RXF1YWxzKCJ1bmV4cGVjdGVkIGNvbnN1bXB0aW9uIHJhdGUiLCAicmVtYWlu
ZGVyIiwgcmVtYWluaW5nLm5leHQoKSk7CisJCWphdmFjU3RhbmRhcmRKYXZhRmlsZU1hbmFnZXIu
Y2xvc2UoKTsKIAl9CisJZWNqU3RhbmRhcmRKYXZhRmlsZU1hbmFnZXIuY2xvc2UoKTsKIH0KIC8v
IGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0yMjY5MTgKIC8v
IG9wdGlvbnMgY29uc3VtcHRpb24gLSBjaGVjayBjb25zdW1wdGlvbiByYXRlIG9uIHN1cHBvcnRl
ZCB6ZXJvLWFyZ3Mgb3B0aW9ucwpAQCAtNTI1LDYgKzUyNyw3IEBACiAJCQlhc3NlcnRFcXVhbHMo
InVuZXhwZWN0ZWQgY29uc3VtcHRpb24gcmF0ZSIsIFJFTUFJTkRFUiwgcmVtYWluaW5nLm5leHQo
KSk7CiAJCX0KIAl9CisJZWNqU3RhbmRhcmRKYXZhRmlsZU1hbmFnZXIuY2xvc2UoKTsKIH0KIC8v
IGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0yMjY5MTgKIC8v
IG9wdGlvbnMgY29uc3VtcHRpb24gLSBjaGVjayBjb25zdW1wdGlvbiByYXRlIG9uIHN1cHBvcnRl
ZCBvbmUtYXJnIG9wdGlvbnMKQEAgLTU0MCw2ICs1NDMsNyBAQAogCQkJYXNzZXJ0RXF1YWxzKCJ1
bmV4cGVjdGVkIGNvbnN1bXB0aW9uIHJhdGUiLCBSRU1BSU5ERVIsIHJlbWFpbmluZy5uZXh0KCkp
OwogCQl9CiAJfQorCWVjalN0YW5kYXJkSmF2YUZpbGVNYW5hZ2VyLmNsb3NlKCk7CiB9CiAvLyB0
ZXN0cyAjMTAtMTEgc2hvdyB0aGF0IGVjaiB0aHJvd3MgYSBSdW50aW1lRXhjZXB0aW9uIHdoZW4g
ZW5jb3VudGVyaW5nIGEgd3JvbmcKIC8vIGVuY29kaW5nIGluIGl0cyBwYXJhbWV0ZXJzLCB3aGls
ZSB0aGUgZGVmYXVsdCBjb21waWxlciBzd2FsbG93cyBpdCBzaWxlbnRseQpkaWZmIC0tZ2l0IGEv
b3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLnRvb2wudGVzdHMvc3JjL29yZy9lY2xpcHNlL2pkdC9j
b21waWxlci90b29sL3Rlc3RzL0NvbXBpbGVyVG9vbFRlc3RzLmphdmEgYi9vcmcuZWNsaXBzZS5q
ZHQuY29tcGlsZXIudG9vbC50ZXN0cy9zcmMvb3JnL2VjbGlwc2UvamR0L2NvbXBpbGVyL3Rvb2wv
dGVzdHMvQ29tcGlsZXJUb29sVGVzdHMuamF2YQppbmRleCA4NGUyYzFmLi42OGZmYWQzIDEwMDY0
NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29tcGlsZXIudG9vbC50ZXN0cy9zcmMvb3JnL2VjbGlw
c2UvamR0L2NvbXBpbGVyL3Rvb2wvdGVzdHMvQ29tcGlsZXJUb29sVGVzdHMuamF2YQorKysgYi9v
cmcuZWNsaXBzZS5qZHQuY29tcGlsZXIudG9vbC50ZXN0cy9zcmMvb3JnL2VjbGlwc2UvamR0L2Nv
bXBpbGVyL3Rvb2wvdGVzdHMvQ29tcGlsZXJUb29sVGVzdHMuamF2YQpAQCAtNjA0LDcgKzYwNCw3
IEBACiAJCWFzc2VydFRydWUoImRlbGV0ZSBmYWlsZWQiLCBpbnB1dEZpbGUuZGVsZXRlKCkpOwog
CX0KIAotCXB1YmxpYyB2b2lkIHRlc3RDb21waWxlck9uZUNsYXNzV2l0aEVjbGlwc2VDb21waWxl
cjQoKSB7CisJcHVibGljIHZvaWQgdGVzdENvbXBpbGVyT25lQ2xhc3NXaXRoRWNsaXBzZUNvbXBp
bGVyNCgpIHRocm93cyBJT0V4Y2VwdGlvbiB7CiAJCUphdmFDb21waWxlciBzeXN0ZW1Db21waWxl
ciA9IFRvb2xQcm92aWRlci5nZXRTeXN0ZW1KYXZhQ29tcGlsZXIoKTsKIAkJaWYgKHN5c3RlbUNv
bXBpbGVyID09IG51bGwpIHsKIAkJCVN5c3RlbS5vdXQucHJpbnRsbigiTm8gc3lzdGVtIGphdmEg
Y29tcGlsZXIgYXZhaWxhYmxlIik7CkBAIC02NTMsNiArNjUzLDcgQEAKIAkJfQogCQkvLyBjaGVj
ayB0aGF0IHRoZSAuY2xhc3MgZmlsZSBleGlzdCBmb3IgWAogCQlhc3NlcnRUcnVlKCJkZWxldGUg
ZmFpbGVkIiwgaW5wdXRGaWxlLmRlbGV0ZSgpKTsKKwkJbWFuYWdlci5jbG9zZSgpOwogCX0KIAog
CXB1YmxpYyB2b2lkIHRlc3RDb21waWxlck9uZUNsYXNzV2l0aEVjbGlwc2VDb21waWxlcjUoKSB7
CkBAIC04NjksNiArODcwLDcgQEAKIAkJCQlidWlsZGVyLmFwcGVuZChuYW1lLnN1YnN0cmluZyhs
YXN0SW5kZXhPZiArIDEpKTsKIAkJCX0KIAkJCWFzc2VydEVxdWFscygiV3JvbmcgY29udGVudHMi
LCAiWC5qYXZhIiwgU3RyaW5nLnZhbHVlT2YoYnVpbGRlcikpOworCQkJZmlsZU1hbmFnZXIuY2xv
c2UoKTsKIAkJfSBjYXRjaCAoSU9FeGNlcHRpb24gZSkgewogCQkJZS5wcmludFN0YWNrVHJhY2Uo
KTsKIAkJfQpAQCAtOTQzLDYgKzk0NSw3IEBACiAJCQkJYnVpbGRlci5hcHBlbmQobmFtZS5zdWJz
dHJpbmcobGFzdEluZGV4T2YgKyAxKSk7CiAJCQl9CiAJCQlhc3NlcnRFcXVhbHMoIldyb25nIGNv
bnRlbnRzIiwgIlgyLmphdmFYLmphdmEiLCBTdHJpbmcudmFsdWVPZihidWlsZGVyKSk7CisJCQlm
aWxlTWFuYWdlci5jbG9zZSgpOwogCQl9IGNhdGNoIChJT0V4Y2VwdGlvbiBlKSB7CiAJCQllLnBy
aW50U3RhY2tUcmFjZSgpOwogCQl9Cg==
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>206697</attachid>
            <date>2011-11-09 09:44:00 -0500</date>
            <delta_ts>2011-11-09 09:44:53 -0500</delta_ts>
            <desc>patch with sorting</desc>
            <filename>Bug_363293_v2.patch</filename>
            <type>text/plain</type>
            <size>5994</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb21waWxlci50b29sLnRlc3RzL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29tcGlsZXIvdG9vbC90ZXN0cy9BYnN0cmFjdENvbXBpbGVyVG9vbFRlc3Qu
amF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb21waWxlci50b29sLnRlc3RzL3NyYy9vcmcvZWNsaXBz
ZS9qZHQvY29tcGlsZXIvdG9vbC90ZXN0cy9BYnN0cmFjdENvbXBpbGVyVG9vbFRlc3QuamF2YQpp
bmRleCBjZDZjYmZlLi5jYjI2MjMzIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29tcGls
ZXIudG9vbC50ZXN0cy9zcmMvb3JnL2VjbGlwc2UvamR0L2NvbXBpbGVyL3Rvb2wvdGVzdHMvQWJz
dHJhY3RDb21waWxlclRvb2xUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVy
LnRvb2wudGVzdHMvc3JjL29yZy9lY2xpcHNlL2pkdC9jb21waWxlci90b29sL3Rlc3RzL0Fic3Ry
YWN0Q29tcGlsZXJUb29sVGVzdC5qYXZhCkBAIC0xMiw2ICsxMiw3IEBACiBwYWNrYWdlIG9yZy5l
Y2xpcHNlLmpkdC5jb21waWxlci50b29sLnRlc3RzOwogCiBpbXBvcnQgamF2YS5pby5GaWxlOwor
aW1wb3J0IGphdmEuaW8uSU9FeGNlcHRpb247CiBpbXBvcnQgamF2YS5pby5QcmludFdyaXRlcjsK
IGltcG9ydCBqYXZhLnV0aWwuQXJyYXlMaXN0OwogaW1wb3J0IGphdmEudXRpbC5MaXN0OwpAQCAt
OTgsMTYgKzk5LDI0IEBACiAJCWlmIChtYW5hZ2VyID09IG51bGwpIHsKIAkJCW1hbmFnZXIgPSBD
T01QSUxFUi5nZXRTdGFuZGFyZEZpbGVNYW5hZ2VyKG51bGwsIG51bGwsIG51bGwpOyAvLyB3aWxs
IHBpY2sgZGVmYXVsdHMgdXAKIAkJfQotCQlMaXN0PEZpbGU+IGZpbGVzID0gbmV3IEFycmF5TGlz
dDxGaWxlPigpOwotCQlTdHJpbmdbXSBmaWxlTmFtZXMgPSBhcmd1bWVudHMuZmlsZU5hbWVzOwot
CQlmb3IgKGludCBpID0gMCwgbCA9IGZpbGVOYW1lcy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKLQkJ
CWlmIChmaWxlTmFtZXNbaV0uc3RhcnRzV2l0aChPVVRQVVRfRElSKSkgewotCQkJCWZpbGVzLmFk
ZChuZXcgRmlsZShmaWxlTmFtZXNbaV0pKTsKLQkJCX0gZWxzZSB7Ci0JCQkJZmlsZXMuYWRkKG5l
dyBGaWxlKE9VVFBVVF9ESVIgKyBGaWxlLnNlcGFyYXRvciArIGZpbGVOYW1lc1tpXSkpOworCQl0
cnkgeworCQkJTGlzdDxGaWxlPiBmaWxlcyA9IG5ldyBBcnJheUxpc3Q8RmlsZT4oKTsKKwkJCVN0
cmluZ1tdIGZpbGVOYW1lcyA9IGFyZ3VtZW50cy5maWxlTmFtZXM7CisJCQlmb3IgKGludCBpID0g
MCwgbCA9IGZpbGVOYW1lcy5sZW5ndGg7IGkgPCBsOyBpKyspIHsKKwkJCQlpZiAoZmlsZU5hbWVz
W2ldLnN0YXJ0c1dpdGgoT1VUUFVUX0RJUikpIHsKKwkJCQkJZmlsZXMuYWRkKG5ldyBGaWxlKGZp
bGVOYW1lc1tpXSkpOworCQkJCX0gZWxzZSB7CisJCQkJCWZpbGVzLmFkZChuZXcgRmlsZShPVVRQ
VVRfRElSICsgRmlsZS5zZXBhcmF0b3IgKyBmaWxlTmFtZXNbaV0pKTsKKwkJCQl9CiAJCQl9Ci0J
CX0KLQkJQ29tcGlsYXRpb25UYXNrIHRhc2sgPSBDT01QSUxFUi5nZXRUYXNrKG91dCwgYXJndW1l
bnRzLnN0YW5kYXJkSmF2YUZpbGVNYW5hZ2VyIC8qIGNhcnJ5IHRoZSBudWxsIG92ZXIgKi8sIG5l
dyBDb21waWxlckludm9jYXRpb25EaWFnbm9zdGljTGlzdGVuZXIoZXJyKSwgYXJndW1lbnRzLm9w
dGlvbnMsIG51bGwsIG1hbmFnZXIuZ2V0SmF2YUZpbGVPYmplY3RzRnJvbUZpbGVzKGZpbGVzKSk7
Ci0JCXJldHVybiB0YXNrLmNhbGwoKTsKKwkJCUNvbXBpbGF0aW9uVGFzayB0YXNrID0gQ09NUElM
RVIuZ2V0VGFzayhvdXQsIGFyZ3VtZW50cy5zdGFuZGFyZEphdmFGaWxlTWFuYWdlciAvKiBjYXJy
eSB0aGUgbnVsbCBvdmVyICovLCBuZXcgQ29tcGlsZXJJbnZvY2F0aW9uRGlhZ25vc3RpY0xpc3Rl
bmVyKGVyciksIGFyZ3VtZW50cy5vcHRpb25zLCBudWxsLCBtYW5hZ2VyLmdldEphdmFGaWxlT2Jq
ZWN0c0Zyb21GaWxlcyhmaWxlcykpOworCQkJcmV0dXJuIHRhc2suY2FsbCgpOworCQl9IGZpbmFs
bHkgeworCQkJdHJ5IHsKKwkJCQltYW5hZ2VyLmNsb3NlKCk7CisJCQl9IGNhdGNoIChJT0V4Y2Vw
dGlvbiBlKSB7CisJCQkJLy8gbm9wCisJCQl9CisJCX0JCQogCX0KIH0KZGlmZiAtLWdpdCBhL29y
Zy5lY2xpcHNlLmpkdC5jb21waWxlci50b29sLnRlc3RzL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29t
cGlsZXIvdG9vbC90ZXN0cy9Db21waWxlckludm9jYXRpb25UZXN0cy5qYXZhIGIvb3JnLmVjbGlw
c2UuamR0LmNvbXBpbGVyLnRvb2wudGVzdHMvc3JjL29yZy9lY2xpcHNlL2pkdC9jb21waWxlci90
b29sL3Rlc3RzL0NvbXBpbGVySW52b2NhdGlvblRlc3RzLmphdmEKaW5kZXggNjBiZTk1Zi4uMDlh
MTY4OSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLnRvb2wudGVzdHMvc3Jj
L29yZy9lY2xpcHNlL2pkdC9jb21waWxlci90b29sL3Rlc3RzL0NvbXBpbGVySW52b2NhdGlvblRl
c3RzLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLnRvb2wudGVzdHMvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb21waWxlci90b29sL3Rlc3RzL0NvbXBpbGVySW52b2NhdGlvblRlc3Rz
LmphdmEKQEAgLTUwMiw3ICs1MDIsOSBAQAogCQlyZW1haW5pbmcgPSByZW1haW5pbmdBc0xpc3Qu
aXRlcmF0b3IoKTsKIAkJYXNzZXJ0VHJ1ZSgiZG9lcyBub3Qgc3VwcG9ydCAtZCBvcHRpb24iLCBq
YXZhY1N0YW5kYXJkSmF2YUZpbGVNYW5hZ2VyLmhhbmRsZU9wdGlvbigiLWQiLCByZW1haW5pbmcp
KTsKIAkJYXNzZXJ0RXF1YWxzKCJ1bmV4cGVjdGVkIGNvbnN1bXB0aW9uIHJhdGUiLCAicmVtYWlu
ZGVyIiwgcmVtYWluaW5nLm5leHQoKSk7CisJCWphdmFjU3RhbmRhcmRKYXZhRmlsZU1hbmFnZXIu
Y2xvc2UoKTsKIAl9CisJZWNqU3RhbmRhcmRKYXZhRmlsZU1hbmFnZXIuY2xvc2UoKTsKIH0KIC8v
IGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0yMjY5MTgKIC8v
IG9wdGlvbnMgY29uc3VtcHRpb24gLSBjaGVjayBjb25zdW1wdGlvbiByYXRlIG9uIHN1cHBvcnRl
ZCB6ZXJvLWFyZ3Mgb3B0aW9ucwpAQCAtNTI1LDYgKzUyNyw3IEBACiAJCQlhc3NlcnRFcXVhbHMo
InVuZXhwZWN0ZWQgY29uc3VtcHRpb24gcmF0ZSIsIFJFTUFJTkRFUiwgcmVtYWluaW5nLm5leHQo
KSk7CiAJCX0KIAl9CisJZWNqU3RhbmRhcmRKYXZhRmlsZU1hbmFnZXIuY2xvc2UoKTsKIH0KIC8v
IGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0yMjY5MTgKIC8v
IG9wdGlvbnMgY29uc3VtcHRpb24gLSBjaGVjayBjb25zdW1wdGlvbiByYXRlIG9uIHN1cHBvcnRl
ZCBvbmUtYXJnIG9wdGlvbnMKQEAgLTU0MCw2ICs1NDMsNyBAQAogCQkJYXNzZXJ0RXF1YWxzKCJ1
bmV4cGVjdGVkIGNvbnN1bXB0aW9uIHJhdGUiLCBSRU1BSU5ERVIsIHJlbWFpbmluZy5uZXh0KCkp
OwogCQl9CiAJfQorCWVjalN0YW5kYXJkSmF2YUZpbGVNYW5hZ2VyLmNsb3NlKCk7CiB9CiAvLyB0
ZXN0cyAjMTAtMTEgc2hvdyB0aGF0IGVjaiB0aHJvd3MgYSBSdW50aW1lRXhjZXB0aW9uIHdoZW4g
ZW5jb3VudGVyaW5nIGEgd3JvbmcKIC8vIGVuY29kaW5nIGluIGl0cyBwYXJhbWV0ZXJzLCB3aGls
ZSB0aGUgZGVmYXVsdCBjb21waWxlciBzd2FsbG93cyBpdCBzaWxlbnRseQpkaWZmIC0tZ2l0IGEv
b3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLnRvb2wudGVzdHMvc3JjL29yZy9lY2xpcHNlL2pkdC9j
b21waWxlci90b29sL3Rlc3RzL0NvbXBpbGVyVG9vbFRlc3RzLmphdmEgYi9vcmcuZWNsaXBzZS5q
ZHQuY29tcGlsZXIudG9vbC50ZXN0cy9zcmMvb3JnL2VjbGlwc2UvamR0L2NvbXBpbGVyL3Rvb2wv
dGVzdHMvQ29tcGlsZXJUb29sVGVzdHMuamF2YQppbmRleCA4NGUyYzFmLi5iZjQ0ZTQwIDEwMDY0
NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29tcGlsZXIudG9vbC50ZXN0cy9zcmMvb3JnL2VjbGlw
c2UvamR0L2NvbXBpbGVyL3Rvb2wvdGVzdHMvQ29tcGlsZXJUb29sVGVzdHMuamF2YQorKysgYi9v
cmcuZWNsaXBzZS5qZHQuY29tcGlsZXIudG9vbC50ZXN0cy9zcmMvb3JnL2VjbGlwc2UvamR0L2Nv
bXBpbGVyL3Rvb2wvdGVzdHMvQ29tcGlsZXJUb29sVGVzdHMuamF2YQpAQCAtMTksNiArMTksNyBA
QAogaW1wb3J0IGphdmEuaW8uU3RyaW5nV3JpdGVyOwogaW1wb3J0IGphdmEubmlvLmNoYXJzZXQu
Q2hhcnNldDsKIGltcG9ydCBqYXZhLnV0aWwuQXJyYXlMaXN0OworaW1wb3J0IGphdmEudXRpbC5D
b2xsZWN0aW9uczsKIGltcG9ydCBqYXZhLnV0aWwuSGFzaFNldDsKIGltcG9ydCBqYXZhLnV0aWwu
SXRlcmF0b3I7CiBpbXBvcnQgamF2YS51dGlsLkxpc3Q7CkBAIC02MDQsNyArNjA1LDcgQEAKIAkJ
YXNzZXJ0VHJ1ZSgiZGVsZXRlIGZhaWxlZCIsIGlucHV0RmlsZS5kZWxldGUoKSk7CiAJfQogCi0J
cHVibGljIHZvaWQgdGVzdENvbXBpbGVyT25lQ2xhc3NXaXRoRWNsaXBzZUNvbXBpbGVyNCgpIHsK
KwlwdWJsaWMgdm9pZCB0ZXN0Q29tcGlsZXJPbmVDbGFzc1dpdGhFY2xpcHNlQ29tcGlsZXI0KCkg
dGhyb3dzIElPRXhjZXB0aW9uIHsKIAkJSmF2YUNvbXBpbGVyIHN5c3RlbUNvbXBpbGVyID0gVG9v
bFByb3ZpZGVyLmdldFN5c3RlbUphdmFDb21waWxlcigpOwogCQlpZiAoc3lzdGVtQ29tcGlsZXIg
PT0gbnVsbCkgewogCQkJU3lzdGVtLm91dC5wcmludGxuKCJObyBzeXN0ZW0gamF2YSBjb21waWxl
ciBhdmFpbGFibGUiKTsKQEAgLTY1Myw2ICs2NTQsNyBAQAogCQl9CiAJCS8vIGNoZWNrIHRoYXQg
dGhlIC5jbGFzcyBmaWxlIGV4aXN0IGZvciBYCiAJCWFzc2VydFRydWUoImRlbGV0ZSBmYWlsZWQi
LCBpbnB1dEZpbGUuZGVsZXRlKCkpOworCQltYW5hZ2VyLmNsb3NlKCk7CiAJfQogCiAJcHVibGlj
IHZvaWQgdGVzdENvbXBpbGVyT25lQ2xhc3NXaXRoRWNsaXBzZUNvbXBpbGVyNSgpIHsKQEAgLTg2
OSw2ICs4NzEsNyBAQAogCQkJCWJ1aWxkZXIuYXBwZW5kKG5hbWUuc3Vic3RyaW5nKGxhc3RJbmRl
eE9mICsgMSkpOwogCQkJfQogCQkJYXNzZXJ0RXF1YWxzKCJXcm9uZyBjb250ZW50cyIsICJYLmph
dmEiLCBTdHJpbmcudmFsdWVPZihidWlsZGVyKSk7CisJCQlmaWxlTWFuYWdlci5jbG9zZSgpOwog
CQl9IGNhdGNoIChJT0V4Y2VwdGlvbiBlKSB7CiAJCQllLnByaW50U3RhY2tUcmFjZSgpOwogCQl9
CkBAIC05MzQsMTUgKzkzNywxNyBAQAogCQkJSXRlcmFibGU8PyBleHRlbmRzIEphdmFGaWxlT2Jq
ZWN0PiBjb21waWxhdGlvblVuaXRzID0gZmlsZU1hbmFnZXIubGlzdChzb3VyY2VMb2MsICIiLCBm
aWxlVHlwZXMsIHRydWUpOwogCQogCQkJSXRlcmF0b3I8PyBleHRlbmRzIEphdmFGaWxlT2JqZWN0
PiBpdCA9IGNvbXBpbGF0aW9uVW5pdHMuaXRlcmF0b3IoKTsKLQkJCVN0cmluZ0J1aWxkZXIgYnVp
bGRlciA9IG5ldyBTdHJpbmdCdWlsZGVyKCk7CisJCQlMaXN0PFN0cmluZz4gbmFtZXMgPSBuZXcg
QXJyYXlMaXN0PFN0cmluZz4oKTsKIAkJCXdoaWxlIChpdC5oYXNOZXh0KCkpIHsKIAkJCQlKYXZh
RmlsZU9iamVjdCBuZXh0ID0gaXQubmV4dCgpOwogCQkJCVN0cmluZyBuYW1lID0gbmV4dC5nZXRO
YW1lKCk7CiAJCQkJbmFtZSA9IG5hbWUucmVwbGFjZSgnXFwnLCAnLycpOwogCQkJCWludCBsYXN0
SW5kZXhPZiA9IG5hbWUubGFzdEluZGV4T2YoJy8nKTsKLQkJCQlidWlsZGVyLmFwcGVuZChuYW1l
LnN1YnN0cmluZyhsYXN0SW5kZXhPZiArIDEpKTsKKwkJCQluYW1lcy5hZGQobmFtZS5zdWJzdHJp
bmcobGFzdEluZGV4T2YgKyAxKSk7CiAJCQl9Ci0JCQlhc3NlcnRFcXVhbHMoIldyb25nIGNvbnRl
bnRzIiwgIlgyLmphdmFYLmphdmEiLCBTdHJpbmcudmFsdWVPZihidWlsZGVyKSk7CisJCQlDb2xs
ZWN0aW9ucy5zb3J0KG5hbWVzKTsKKwkJCWFzc2VydEVxdWFscygiV3JvbmcgY29udGVudHMiLCAi
W1guamF2YSwgWDIuamF2YV0iLCBuYW1lcy50b1N0cmluZygpKTsKKwkJCWZpbGVNYW5hZ2VyLmNs
b3NlKCk7CiAJCX0gY2F0Y2ggKElPRXhjZXB0aW9uIGUpIHsKIAkJCWUucHJpbnRTdGFja1RyYWNl
KCk7CiAJCX0K
</data>

          </attachment>
      

    </bug>

</bugzilla>