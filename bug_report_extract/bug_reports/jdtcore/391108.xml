<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>391108</bug_id>
          
          <creation_ts>2012-10-04 06:26:00 -0400</creation_ts>
          <short_desc>[1.8][compiler] Compiler allows type annotations on void methods.</short_desc>
          <delta_ts>2012-10-16 06:19:18 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.8</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>287648</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="53930"
          type_id="1"
          status="+"
          setter="srikanth_sankaran"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2167762</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-10-04 06:26:59 -0400</bug_when>
    <thetext>BETA_JAVA8:

The following program compiles alright with ECJ while it should not.

// -------------
public class X {
	@Marker public void foo() {
	}
}

@java.lang.annotation.Target (java.lang.annotation.ElementType.TYPE_USE)
@interface Marker {
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2167763</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-10-04 06:30:35 -0400</bug_when>
    <thetext>I found this during the code review for bug 390891. Please see that
there is already a IProblem constant IllegalUsageOfTypeAnnotations
and a message 

641 = Type annotation is illegal for a method that returns void

The problem constant should be renamed IllegalTypeAnnotationsOnVoidMethod.
Likewise the message should be changed to

641 = Type annotations are illegal here as this method returns void</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2167880</commentid>
    <comment_count>2</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-10-04 10:14:14 -0400</bug_when>
    <thetext>The problem lies in SourceTypeBinding.resolveTypesFor(MethodBinding). We invoke method.getAnnotationTagBits() even before the return type is resolved and set for the method binding. But resolving the annotations itself requires a complete method binding.

We either have to push the code that invokes method.getAnnotationTagBits() down or move the code that reports the error from Annotation#resolveType() to SourceTypeBinding. Basically, it&apos;s a question of how early/late do we want to resolve annotations for a method. Of course, we can&apos;t resolve either of them completely without the other. I am working on a patch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2167892</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-10-04 10:39:22 -0400</bug_when>
    <thetext>Stephan understands the nuances here better.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2168261</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-10-05 00:35:41 -0400</bug_when>
    <thetext>Jay, please take a look at org.eclipse.jdt.internal.compiler.ast.TypeReference.baseTypeReference(int, int, Annotation[][])

It would be a very straightforward fix to reject annotations on void types
there.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2168307</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-10-05 02:00:00 -0400</bug_when>
    <thetext>(In reply to comment #4)
&gt; Jay, please take a look at
&gt; org.eclipse.jdt.internal.compiler.ast.TypeReference.baseTypeReference(int,
&gt; int, Annotation[][])
&gt; 
&gt; It would be a very straightforward fix to reject annotations on void types
&gt; there.

Spoke too soon - At the place we are talking about, SE8 annotations show up
as SE5 annotations and the discrimination can happen only later. And SE5 
annotations *are* legal there - So please ignore this suggestion and we need 
to start the investigation with a clean slate.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2168326</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-10-05 03:29:23 -0400</bug_when>
    <thetext>There is some code in org.eclipse.jdt.internal.compiler.ast.Annotation.resolveType(BlockScope)
(search for illegalUsageOfTypeAnnotations) that is not working for some
reason.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2168399</commentid>
    <comment_count>7</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-10-05 06:24:49 -0400</bug_when>
    <thetext>(In reply to comment #6)
&gt; There is some code in
&gt; org.eclipse.jdt.internal.compiler.ast.Annotation.resolveType(BlockScope)
&gt; (search for illegalUsageOfTypeAnnotations) that is not working for some
&gt; reason.

Either it never worked or the timing of the request for resolving annotation has been altered. This is the code I was referring to in comment #2 by &quot;or move the code that reports the error&quot;</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2168412</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-10-05 06:46:03 -0400</bug_when>
    <thetext>(In reply to comment #7)

&gt; Either it never worked or the timing of the request for resolving annotation
&gt; has been altered. This is the code I was referring to in comment #2 by &quot;or
&gt; move the code that reports the error&quot;

I see. I could confirm that the original patch did not have any tests
eliciting this message.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2169537</commentid>
    <comment_count>9</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-10-09 11:32:55 -0400</bug_when>
    <thetext>In SourceTypeBinding:1591, the return type is resolved.
If the resolved return type is void and method declaration
has any type use annotations, we should report an error.

Jay, please investigate this approach.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2169556</commentid>
    <comment_count>10</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-10-09 11:59:55 -0400</bug_when>
    <thetext>(In reply to comment #9)
&gt; In SourceTypeBinding:1591, the return type is resolved.
&gt; If the resolved return type is void and method declaration
&gt; has any type use annotations, we should report an error.

Indeed, this would work and my initial investigation (mentioned in comment #2) early on showed this. But I was more keen on just keeping all the annotation related validations to Annotation. I will explore both options and see which one turns out simpler.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2169666</commentid>
    <comment_count>11</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-10-09 15:26:15 -0400</bug_when>
    <thetext>(In reply to comment #2)
&gt; The problem lies in SourceTypeBinding.resolveTypesFor(MethodBinding). We
&gt; invoke method.getAnnotationTagBits() even before the return type is resolved
&gt; and set for the method binding. But resolving the annotations itself
&gt; requires a complete method binding.
&gt; 
&gt; We either have to push the code that invokes method.getAnnotationTagBits()
&gt; down or move the code that reports the error from Annotation#resolveType()
&gt; to SourceTypeBinding. Basically, it&apos;s a question of how early/late do we
&gt; want to resolve annotations for a method. Of course, we can&apos;t resolve either
&gt; of them completely without the other. I am working on a patch.

Not sure if this is still relevant: For annotation based null analysis I made some changes to when annotations on arguments are resolved, but no change regarding method annotations.
The only assumption that should be maintained here is: method annotations have been resolved before the call to createArgumentBindings(method).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2171883</commentid>
    <comment_count>12</comment_count>
      <attachid>222315</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-10-15 12:08:06 -0400</bug_when>
    <thetext>Created attachment 222315
Proposed fix

Patch under consideration. All Java 8 tests pass. Currently running all tests.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2172154</commentid>
    <comment_count>13</comment_count>
      <attachid>222375</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-10-15 23:58:09 -0400</bug_when>
    <thetext>Created attachment 222375
Alternate fix

Jay, please take a look:

   - Eliminates comments in Annotation.java
   - Handles complaining on annotations on void [] array methods.
   - Refactors common code.
   - Eliminates changes to irrelevant parts
   - Sets the state foundReturnTypeProblem properly for all cases.

Java8 tests pass.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2172155</commentid>
    <comment_count>14</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-10-15 23:59:45 -0400</bug_when>
    <thetext>Please review and release after testing if you agree. Could you add a test
for void [] case ?

@Marker void [] foo() {
} 

and

@Marker void foo() [] {
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2172163</commentid>
    <comment_count>15</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-10-16 01:19:50 -0400</bug_when>
    <thetext>(In reply to comment #13)
&gt; Created attachment 222375 [details]
&gt; Alternate fix
&gt; 
&gt; Jay, please take a look:
&gt; 
&gt;    - Eliminates comments in Annotation.java
&gt;    - Handles complaining on annotations on void [] array methods.
&gt;    - Refactors common code.
&gt;    - Eliminates changes to irrelevant parts
&gt;    - Sets the state foundReturnTypeProblem properly for all cases.
&gt; 
&gt; Java8 tests pass.

Couple of questions:
1. void[] being an illegal return type, we already know the method has problems with the return type and needs to be fixed. At this point, why should we bother about the validating the annotations? It&apos;s extra work since we are not sure if the code was intended to have void as return type.

2. The method itself is alright with the return type. What relevance does the foundReturnTypeProblem have with annotations?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2172167</commentid>
    <comment_count>16</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-10-16 01:36:33 -0400</bug_when>
    <thetext>(In reply to comment #15)

&gt; Couple of questions:
&gt; 1. void[] being an illegal return type, we already know the method has
&gt; problems with the return type and needs to be fixed. At this point, why
&gt; should we bother about the validating the annotations? It&apos;s extra work since
&gt; we are not sure if the code was intended to have void as return type.

But it is not a secondary error. If the dimensions are removed in response to
the first error regarding void [], but the annotations are left in, we would
complain again. As these are unrelated it makes sense to complain together.

On the same note, we should not complain about annotations on dimensions on
a void array. e.g:

void foo() @Blah [] {
}

We don&apos;t complain on Blah missing and that is the right behavior. 

&gt; 2. The method itself is alright with the return type. What relevance does
&gt; the foundReturnTypeProblem have with annotations?

Annotations modify the return type. If the modified return type has a problem
then the method has a return type problem.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2172177</commentid>
    <comment_count>17</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-10-16 02:13:35 -0400</bug_when>
    <thetext>(In reply to comment #16)
&gt; But it is not a secondary error. If the dimensions are removed in response to
&gt; the first error regarding void [], but the annotations are left in, we would
&gt; complain again. As these are unrelated it makes sense to complain together.

But wouldn&apos;t that mean we are assuming that the user intended to use void as return type? Since the annotation validation comes at a cost, albeit small, I think we should avoid guessing and complain only when it&apos;s necessary.

&gt; Annotations modify the return type. If the modified return type has a problem
&gt; then the method has a return type problem.

Shouldn&apos;t we leave that to the annotation processors? Note that we don&apos;t do it in other cases where we report an error on annotation on methods (let&apos;s say the annotation doesn&apos;t have the correct target). We don&apos;t do that in case of arguments with annotations with problems either.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2172181</commentid>
    <comment_count>18</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-10-16 02:27:32 -0400</bug_when>
    <thetext>(In reply to comment #17)
&gt; (In reply to comment #16)
&gt; &gt; But it is not a secondary error. If the dimensions are removed in response to
&gt; &gt; the first error regarding void [], but the annotations are left in, we would
&gt; &gt; complain again. As these are unrelated it makes sense to complain together.
&gt; 
&gt; But wouldn&apos;t that mean we are assuming that the user intended to use void as
&gt; return type? Since the annotation validation comes at a cost, albeit small,
&gt; I think we should avoid guessing and complain only when it&apos;s necessary.

You are arguing my exact point actually, though you are thinking otherwise :)

In what I am suggesting we do, we are not &quot;assuming&quot; or &quot;guessing&quot; anything.
We are reporting against what we *see*. On the other hand, that the user didn&apos;t
intend to use void as the return type constitutes &quot;assuming&quot; and &quot;guessing&quot; :)

&gt; Shouldn&apos;t we leave that to the annotation processors? 

With predefined (meta) annotations such as Target, the compiler *is* 
the annotation processor. An auxiliary annotation processor would not even 
look at Target meta annotation.

&gt; Note that we don&apos;t do
&gt; it in other cases where we report an error on annotation on methods (let&apos;s
&gt; say the annotation doesn&apos;t have the correct target). 

In these cases the annotation is not annotating the return type.

&gt;We don&apos;t do that in
&gt; case of arguments with annotations with problems either.

OK, I am fine if you want to revert that piece of code. In that case
please make rejectTypeAnnotatedVoidMethod a void method.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2172218</commentid>
    <comment_count>19</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-10-16 04:05:59 -0400</bug_when>
    <thetext>(In reply to comment #18)
&gt; In what I am suggesting we do, we are not &quot;assuming&quot; or &quot;guessing&quot; anything.
&gt; We are reporting against what we *see*. On the other hand, that the user
&gt; didn&apos;t
&gt; intend to use void as the return type constitutes &quot;assuming&quot; and &quot;guessing&quot;
&gt; :)

I think we shouldn&apos;t read too much into the relevance between void and void[]. We should simply *see* the void[] as an invalid return type. Just as in this case:
    public X(@Marker void v){}
where we don&apos;t report error on the annotation.

When we report an error against void[] foo(), the programmer can either remove the &apos;[]&apos; or he can write something like int[], which will make the annotations valid. While we can argue that &quot;void&quot; being the most probable intent, I prefer not reporting an error on the merit that we do less.
 
&gt; In these cases the annotation is not annotating the return type.

I meant the code like this:
   @Marker int foo() {}
   @java.lang.annotation.Target(java.lang.annotation.ElementType.TYPE)
   @interface Marker {}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2172221</commentid>
    <comment_count>20</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-10-16 04:10:22 -0400</bug_when>
    <thetext>(In reply to comment #19)
&gt; (In reply to comment #18)
&gt; &gt; In what I am suggesting we do, we are not &quot;assuming&quot; or &quot;guessing&quot; anything.
&gt; &gt; We are reporting against what we *see*. On the other hand, that the user
&gt; &gt; didn&apos;t
&gt; &gt; intend to use void as the return type constitutes &quot;assuming&quot; and &quot;guessing&quot;
&gt; &gt; :)
&gt; 
&gt; I think we shouldn&apos;t read too much into the relevance between void and
&gt; void[]. We should simply *see* the void[] as an invalid return type. Just as
&gt; in this case:
&gt;     public X(@Marker void v){}
&gt; where we don&apos;t report error on the annotation.
&gt; 
&gt; When we report an error against void[] foo(), the programmer can either
&gt; remove the &apos;[]&apos; or he can write something like int[], which will make the
&gt; annotations valid. While we can argue that &quot;void&quot; being the most probable
&gt; intent, I prefer not reporting an error on the merit that we do less.
&gt;  
&gt; &gt; In these cases the annotation is not annotating the return type.
&gt; 
&gt; I meant the code like this:
&gt;    @Marker int foo() {}
&gt;    @java.lang.annotation.Target(java.lang.annotation.ElementType.TYPE)
&gt;    @interface Marker {}

OK, Jay.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2172254</commentid>
    <comment_count>21</comment_count>
      <attachid>222386</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-10-16 05:15:05 -0400</bug_when>
    <thetext>Created attachment 222386
Updated patch

(In reply to comment #15)
&gt; &gt; Jay, please take a look:
&gt; &gt; 
&gt; &gt;    - Eliminates comments in Annotation.java
&gt; &gt;    - Eliminates changes to irrelevant parts

I have retained these two changes from the previous patch and the new method rejectTypeAnnotatedVoidMethod(). For the record, the code in SourceTypeBinding for handling void[] is obsolete and no longer used. I will be removing that code in a separate commit.

Srikanth, are you fine with this patch?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2172274</commentid>
    <comment_count>22</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-10-16 05:41:57 -0400</bug_when>
    <thetext>Patch looks good. Please release. TIA,</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2172300</commentid>
    <comment_count>23</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2012-10-16 06:19:18 -0400</bug_when>
    <thetext>Released the latest patch here:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=b0d0325dfb965a2c15932e4737e1e47a197d7d43</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>222315</attachid>
            <date>2012-10-15 12:08:00 -0400</date>
            <delta_ts>2012-10-16 05:15:05 -0400</delta_ts>
            <desc>Proposed fix</desc>
            <filename>Fix-for-bug-391108.patch</filename>
            <type>text/plain</type>
            <size>4966</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlVHlwZUFu
bm90YXRpb25UZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OZWdhdGl2
ZVR5cGVBbm5vdGF0aW9uVGVzdC5qYXZhCmluZGV4IGExNzc0NjguLjU4MzQ4YzkgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlVHlwZUFubm90YXRpb25U
ZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVnYXRpdmVUeXBl
QW5ub3RhdGlvblRlc3QuamF2YQpAQCAtMjg1OSw0ICsyODU5LDQ1IEBACiAJCQkJIlVucmVwb3J0
ZWQgY2Fubm90IGJlIHJlc29sdmVkIHRvIGEgdHlwZVxuIiArIA0KIAkJCQkiLS0tLS0tLS0tLVxu
Iik7DQotCX0JCQ0KKwl9DQorCXB1YmxpYyB2b2lkIHRlc3RCdWczOTExMDgoKSB7DQorCQl0aGlz
LnJ1bk5lZ2F0aXZlVGVzdCgNCisJCQkJbmV3IFN0cmluZ1tdew0KKwkJCQkJCSJYLmphdmEiLA0K
KwkJCQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsNCisJCQkJCQkiCUBNYXJrZXIgQE1hcmtlcjIg
QE1hcmtlcjMgcHVibGljIHZvaWQgZm9vKCkge31cbiIgKw0KKwkJCQkJCSIJQE1hcmtlciBATWFy
a2VyMiBATWFya2VyMyB2b2lkIGZvbzIoKSB7fVxuIiArDQorCQkJCQkJIn1cbiIgKw0KKwkJCQkJ
CSJAamF2YS5sYW5nLmFubm90YXRpb24uVGFyZ2V0IChqYXZhLmxhbmcuYW5ub3RhdGlvbi5FbGVt
ZW50VHlwZS5UWVBFX1VTRSlcbiIgKw0KKwkJCQkJCSJAaW50ZXJmYWNlIE1hcmtlciB7fVxuIiAr
DQorCQkJCQkJIkBqYXZhLmxhbmcuYW5ub3RhdGlvbi5UYXJnZXQgKGphdmEubGFuZy5hbm5vdGF0
aW9uLkVsZW1lbnRUeXBlLk1FVEhPRClcbiIgKw0KKwkJCQkJCSJAaW50ZXJmYWNlIE1hcmtlcjIg
e31cbiIgKw0KKwkJCQkJCSJAamF2YS5sYW5nLmFubm90YXRpb24uVGFyZ2V0ICh7amF2YS5sYW5n
LmFubm90YXRpb24uRWxlbWVudFR5cGUuVFlQRV9VU0UsIGphdmEubGFuZy5hbm5vdGF0aW9uLkVs
ZW1lbnRUeXBlLk1FVEhPRH0pXG4iICsNCisJCQkJCQkiQGludGVyZmFjZSBNYXJrZXIzIHt9IiwN
CisJCQkJCQkiamF2YS9sYW5nL2Fubm90YXRpb24vRWxlbWVudFR5cGUuamF2YSIsDQorCQkJCQkJ
InBhY2thZ2UgamF2YS5sYW5nLmFubm90YXRpb247XG4iICsNCisJCQkJCQkicHVibGljIGVudW0g
RWxlbWVudFR5cGUge1xuIiArDQorCQkJCQkJIiAgICBUWVBFLFxuIiArDQorCQkJCQkJIiAgICBG
SUVMRCxcbiIgKw0KKwkJCQkJCSIgICAgTUVUSE9ELFxuIiArDQorCQkJCQkJIiAgICBQQVJBTUVU
RVIsXG4iICsNCisJCQkJCQkiICAgIENPTlNUUlVDVE9SLFxuIiArDQorCQkJCQkJIiAgICBMT0NB
TF9WQVJJQUJMRSxcbiIgKw0KKwkJCQkJCSIgICAgQU5OT1RBVElPTl9UWVBFLFxuIiArDQorCQkJ
CQkJIiAgICBQQUNLQUdFLFxuIiArDQorCQkJCQkJIiAgICBUWVBFX1BBUkFNRVRFUixcbiIgKw0K
KwkJCQkJCSIgICAgVFlQRV9VU0VcbiIgKw0KKwkJCQkJCSJ9XG4iDQorCQkJCX0sDQorCQkJCSIt
LS0tLS0tLS0tXG4iICsgDQorCQkJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMilcbiIg
KyANCisJCQkJIglATWFya2VyIEBNYXJrZXIyIEBNYXJrZXIzIHB1YmxpYyB2b2lkIGZvbygpIHt9
XG4iICsgDQorCQkJCSIJXl5eXl5eXlxuIiArIA0KKwkJCQkiVHlwZSBhbm5vdGF0aW9uIGlzIGls
bGVnYWwgZm9yIGEgbWV0aG9kIHRoYXQgcmV0dXJucyB2b2lkXG4iICsgDQorCQkJCSItLS0tLS0t
LS0tXG4iICsgDQorCQkJCSIyLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMylcbiIgKyANCisJ
CQkJIglATWFya2VyIEBNYXJrZXIyIEBNYXJrZXIzIHZvaWQgZm9vMigpIHt9XG4iICsgDQorCQkJ
CSIJXl5eXl5eXlxuIiArIA0KKwkJCQkiVHlwZSBhbm5vdGF0aW9uIGlzIGlsbGVnYWwgZm9yIGEg
bWV0aG9kIHRoYXQgcmV0dXJucyB2b2lkXG4iICsgDQorCQkJCSItLS0tLS0tLS0tXG4iKTsNCisJ
fQ0KIH0NCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Fubm90YXRpb24uamF2YSBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvQW5ub3RhdGlvbi5qYXZhCmluZGV4IDZkMWVmZDguLmYxOGNmN2YgMTAwNjQ0Ci0tLSBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9hc3QvQW5ub3RhdGlvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQW5ub3RhdGlvbi5qYXZh
CkBAIC04NzksOCArODc5LDcgQEAKIAkJCQkJCQlicmVhayBjaGVja1RhcmdldENvbXBhdGliaWxp
dHk7CiAJCQkJCQl9IGVsc2UgaWYgKChtZXRhVGFnQml0cyAmIFRhZ0JpdHMuQW5ub3RhdGlvbkZv
clR5cGVVc2UpICE9IDApIHsKLQkJCQkJCQkvLyBqc3IgMzA4IC0gYW5ub3RhdGlvbiBvbiBtZXRo
b2QgcmV0dXJuIHR5cGUKLQkJCQkJCQlpZiAobWV0aG9kQmluZGluZy5yZXR1cm5UeXBlICE9IG51
bGwgJiYgbWV0aG9kQmluZGluZy5yZXR1cm5UeXBlLmlkID09IFRfdm9pZCkgewotCQkJCQkJCQlz
Y29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5pbGxlZ2FsVXNhZ2VPZlR5cGVBbm5vdGF0aW9ucyh0aGlz
KTsKLQkJCQkJCQl9CisvLwkJCQkJCQkvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9z
aG93X2J1Zy5jZ2k/aWQ9MzkxMTA4CisJCQkJCQkJLy8gVHlwZSBhbm5vdGF0aW9ucyBmb3IgbWV0
aG9kcyB3aXRoIHZvaWQgYXMgcmV0dXJuIHR5cGUgYXJlIG5vdCBhbGxvd2VkCisJCQkJCQkJLy8g
VGhpcyBpcyBkZWZlcnJlZCB0aWxsIFNvdXJjZVR5cGVCaW5kaW5nI3Jlc29sdmVUeXBlc0ZvcihN
ZXRob2RCaW5kaW5nKQogCQkJCQkJCWJyZWFrIGNoZWNrVGFyZ2V0Q29tcGF0aWJpbGl0eTsKIAkJ
CQkJCX0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU291cmNlVHlwZUJpbmRpbmcuamF2YSBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9sb29rdXAvU291cmNlVHlwZUJpbmRpbmcuamF2YQppbmRleCAzZjQwYTkzLi5iYmE4
MWVkIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1NvdXJjZVR5cGVCaW5kaW5nLmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2xvb2t1cC9Tb3VyY2VUeXBlQmluZGluZy5qYXZhCkBAIC0xNjA2LDYgKzE2MDYs
MjEgQEAKIAkJCQltZXRob2QucmV0dXJuVHlwZSA9IG1ldGhvZFR5cGU7CiAJCQkJVHlwZUJpbmRp
bmcgbGVhZlR5cGUgPSBtZXRob2RUeXBlLmxlYWZDb21wb25lbnRUeXBlKCk7Ci0JCQkJaWYgKGxl
YWZUeXBlIGluc3RhbmNlb2YgUmVmZXJlbmNlQmluZGluZyAmJiAoKChSZWZlcmVuY2VCaW5kaW5n
KSBsZWFmVHlwZSkubW9kaWZpZXJzICYgRXh0cmFDb21waWxlck1vZGlmaWVycy5BY2NHZW5lcmlj
U2lnbmF0dXJlKSAhPSAwKQotCQkJCQltZXRob2QubW9kaWZpZXJzIHw9IEV4dHJhQ29tcGlsZXJN
b2RpZmllcnMuQWNjR2VuZXJpY1NpZ25hdHVyZTsKKwkJCQlpZiAobGVhZlR5cGUgaW5zdGFuY2Vv
ZiBSZWZlcmVuY2VCaW5kaW5nKSB7CisJCQkJCWlmICgoKChSZWZlcmVuY2VCaW5kaW5nKSBsZWFm
VHlwZSkubW9kaWZpZXJzICYgRXh0cmFDb21waWxlck1vZGlmaWVycy5BY2NHZW5lcmljU2lnbmF0
dXJlKSAhPSAwKQorCQkJCQkJbWV0aG9kLm1vZGlmaWVycyB8PSBFeHRyYUNvbXBpbGVyTW9kaWZp
ZXJzLkFjY0dlbmVyaWNTaWduYXR1cmU7CisJCQkJfSBlbHNlIGlmIChsZWFmVHlwZSA9PSBUeXBl
QmluZGluZy5WT0lEKSB7ICAvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1
Zy5jZ2k/aWQ9MzkxMTA4CisJCQkJCUFubm90YXRpb25bXSBhbm5vdGF0aW9ucyA9IG1ldGhvZERl
Y2wuYW5ub3RhdGlvbnM7CisJCQkJCWlmIChhbm5vdGF0aW9ucyAhPSBudWxsICYmIGFubm90YXRp
b25zLmxlbmd0aCA+IDApIHsKKwkJCQkJCWZvciAoaW50IGkgPSAwOyBpIDwgYW5ub3RhdGlvbnMu
bGVuZ3RoOyBpKyspIHsKKwkJCQkJCQlSZWZlcmVuY2VCaW5kaW5nIGJpbmRpbmcgPSAoUmVmZXJl
bmNlQmluZGluZykgYW5ub3RhdGlvbnNbaV0ucmVzb2x2ZWRUeXBlOworCQkJCQkJCWlmIChhbm5v
dGF0aW9uc1tpXS5yZWNpcGllbnQua2luZCgpID09IEJpbmRpbmcuTUVUSE9ECisJCQkJCQkJCQkJ
JiYgYmluZGluZyAhPSBudWxsCisJCQkJCQkJCQkJJiYgKGJpbmRpbmcudGFnQml0cyAmIFRhZ0Jp
dHMuQW5ub3RhdGlvbkZvclR5cGVVc2UpICE9IDAKKwkJCQkJCQkJCQkmJiAoYmluZGluZy50YWdC
aXRzICYgVGFnQml0cy5Bbm5vdGF0aW9uRm9yTWV0aG9kKSA9PSAwKSB7CisJCQkJCQkJCW1ldGhv
ZERlY2wuc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuaWxsZWdhbFVzYWdlT2ZUeXBlQW5ub3RhdGlv
bnMoYW5ub3RhdGlvbnNbaV0pOworCQkJCQkJCX0KKwkJCQkJCX0KKwkJCQkJfQorCQkJCX0KIAkJ
CX0KIAkJfQ==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>222375</attachid>
            <date>2012-10-15 23:58:00 -0400</date>
            <delta_ts>2012-10-16 05:15:05 -0400</delta_ts>
            <desc>Alternate fix</desc>
            <filename>stuff.patch</filename>
            <type>text/plain</type>
            <size>5559</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlVHlwZUFu
bm90YXRpb25UZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OZWdhdGl2
ZVR5cGVBbm5vdGF0aW9uVGVzdC5qYXZhCmluZGV4IGExNzc0NjguLjU4MzQ4YzkgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlVHlwZUFubm90YXRpb25U
ZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVnYXRpdmVUeXBl
QW5ub3RhdGlvblRlc3QuamF2YQpAQCAtMjg1OCw1ICsyODU4LDQ2IEBACiAJCQkJIgkgICAgICAg
ICAgIF5eXl5eXl5eXl5cbiIgKyANCiAJCQkJIlVucmVwb3J0ZWQgY2Fubm90IGJlIHJlc29sdmVk
IHRvIGEgdHlwZVxuIiArIA0KIAkJCQkiLS0tLS0tLS0tLVxuIik7DQotCX0JCQ0KKwl9DQorCXB1
YmxpYyB2b2lkIHRlc3RCdWczOTExMDgoKSB7DQorCQl0aGlzLnJ1bk5lZ2F0aXZlVGVzdCgNCisJ
CQkJbmV3IFN0cmluZ1tdew0KKwkJCQkJCSJYLmphdmEiLA0KKwkJCQkJCSJwdWJsaWMgY2xhc3Mg
WCB7XG4iICsNCisJCQkJCQkiCUBNYXJrZXIgQE1hcmtlcjIgQE1hcmtlcjMgcHVibGljIHZvaWQg
Zm9vKCkge31cbiIgKw0KKwkJCQkJCSIJQE1hcmtlciBATWFya2VyMiBATWFya2VyMyB2b2lkIGZv
bzIoKSB7fVxuIiArDQorCQkJCQkJIn1cbiIgKw0KKwkJCQkJCSJAamF2YS5sYW5nLmFubm90YXRp
b24uVGFyZ2V0IChqYXZhLmxhbmcuYW5ub3RhdGlvbi5FbGVtZW50VHlwZS5UWVBFX1VTRSlcbiIg
Kw0KKwkJCQkJCSJAaW50ZXJmYWNlIE1hcmtlciB7fVxuIiArDQorCQkJCQkJIkBqYXZhLmxhbmcu
YW5ub3RhdGlvbi5UYXJnZXQgKGphdmEubGFuZy5hbm5vdGF0aW9uLkVsZW1lbnRUeXBlLk1FVEhP
RClcbiIgKw0KKwkJCQkJCSJAaW50ZXJmYWNlIE1hcmtlcjIge31cbiIgKw0KKwkJCQkJCSJAamF2
YS5sYW5nLmFubm90YXRpb24uVGFyZ2V0ICh7amF2YS5sYW5nLmFubm90YXRpb24uRWxlbWVudFR5
cGUuVFlQRV9VU0UsIGphdmEubGFuZy5hbm5vdGF0aW9uLkVsZW1lbnRUeXBlLk1FVEhPRH0pXG4i
ICsNCisJCQkJCQkiQGludGVyZmFjZSBNYXJrZXIzIHt9IiwNCisJCQkJCQkiamF2YS9sYW5nL2Fu
bm90YXRpb24vRWxlbWVudFR5cGUuamF2YSIsDQorCQkJCQkJInBhY2thZ2UgamF2YS5sYW5nLmFu
bm90YXRpb247XG4iICsNCisJCQkJCQkicHVibGljIGVudW0gRWxlbWVudFR5cGUge1xuIiArDQor
CQkJCQkJIiAgICBUWVBFLFxuIiArDQorCQkJCQkJIiAgICBGSUVMRCxcbiIgKw0KKwkJCQkJCSIg
ICAgTUVUSE9ELFxuIiArDQorCQkJCQkJIiAgICBQQVJBTUVURVIsXG4iICsNCisJCQkJCQkiICAg
IENPTlNUUlVDVE9SLFxuIiArDQorCQkJCQkJIiAgICBMT0NBTF9WQVJJQUJMRSxcbiIgKw0KKwkJ
CQkJCSIgICAgQU5OT1RBVElPTl9UWVBFLFxuIiArDQorCQkJCQkJIiAgICBQQUNLQUdFLFxuIiAr
DQorCQkJCQkJIiAgICBUWVBFX1BBUkFNRVRFUixcbiIgKw0KKwkJCQkJCSIgICAgVFlQRV9VU0Vc
biIgKw0KKwkJCQkJCSJ9XG4iDQorCQkJCX0sDQorCQkJCSItLS0tLS0tLS0tXG4iICsgDQorCQkJ
CSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMilcbiIgKyANCisJCQkJIglATWFya2VyIEBN
YXJrZXIyIEBNYXJrZXIzIHB1YmxpYyB2b2lkIGZvbygpIHt9XG4iICsgDQorCQkJCSIJXl5eXl5e
XlxuIiArIA0KKwkJCQkiVHlwZSBhbm5vdGF0aW9uIGlzIGlsbGVnYWwgZm9yIGEgbWV0aG9kIHRo
YXQgcmV0dXJucyB2b2lkXG4iICsgDQorCQkJCSItLS0tLS0tLS0tXG4iICsgDQorCQkJCSIyLiBF
UlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMylcbiIgKyANCisJCQkJIglATWFya2VyIEBNYXJrZXIy
IEBNYXJrZXIzIHZvaWQgZm9vMigpIHt9XG4iICsgDQorCQkJCSIJXl5eXl5eXlxuIiArIA0KKwkJ
CQkiVHlwZSBhbm5vdGF0aW9uIGlzIGlsbGVnYWwgZm9yIGEgbWV0aG9kIHRoYXQgcmV0dXJucyB2
b2lkXG4iICsgDQorCQkJCSItLS0tLS0tLS0tXG4iKTsNCisJfQ0KIH0NCmRpZmYgLS1naXQgYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvYXN0L0Fubm90YXRpb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQW5ub3RhdGlvbi5qYXZhCmlu
ZGV4IDZkMWVmZDguLjY0ZTE2NzAgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQW5ub3RhdGlvbi5q
YXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9hc3QvQW5ub3RhdGlvbi5qYXZhCkBAIC04NzgsMTAgKzg3OCw2IEBA
CiAJCQkJCQl9IGVsc2UgaWYgKChtZXRhVGFnQml0cyAmIFRhZ0JpdHMuQW5ub3RhdGlvbkZvck1l
dGhvZCkgIT0gMCkgewogCQkJCQkJCWJyZWFrIGNoZWNrVGFyZ2V0Q29tcGF0aWJpbGl0eTsKIAkJ
CQkJCX0gZWxzZSBpZiAoKG1ldGFUYWdCaXRzICYgVGFnQml0cy5Bbm5vdGF0aW9uRm9yVHlwZVVz
ZSkgIT0gMCkgewotCQkJCQkJCS8vIGpzciAzMDggLSBhbm5vdGF0aW9uIG9uIG1ldGhvZCByZXR1
cm4gdHlwZQotCQkJCQkJCWlmIChtZXRob2RCaW5kaW5nLnJldHVyblR5cGUgIT0gbnVsbCAmJiBt
ZXRob2RCaW5kaW5nLnJldHVyblR5cGUuaWQgPT0gVF92b2lkKSB7Ci0JCQkJCQkJCXNjb3BlLnBy
b2JsZW1SZXBvcnRlcigpLmlsbGVnYWxVc2FnZU9mVHlwZUFubm90YXRpb25zKHRoaXMpOwotCQkJ
CQkJCX0KIAkJCQkJCQlicmVhayBjaGVja1RhcmdldENvbXBhdGliaWxpdHk7CiAJCQkJCQl9CiAJ
CQkJCQlicmVhazsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU291cmNlVHlwZUJpbmRpbmcu
amF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9sb29rdXAvU291cmNlVHlwZUJpbmRpbmcuamF2YQppbmRleCAzZjQwYTkz
Li4yOGMyZGJiIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1NvdXJjZVR5cGVCaW5kaW5nLmph
dmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Tb3VyY2VUeXBlQmluZGluZy5qYXZhCkBAIC0xNTk5LDYg
KzE1OTksOSBAQAogCQkJfSBlbHNlIGlmIChtZXRob2RUeXBlLmlzQXJyYXlUeXBlKCkgJiYgKChB
cnJheUJpbmRpbmcpIG1ldGhvZFR5cGUpLmxlYWZDb21wb25lbnRUeXBlID09IFR5cGVCaW5kaW5n
LlZPSUQpIHsKIAkJCQltZXRob2REZWNsLnNjb3BlLnByb2JsZW1SZXBvcnRlcigpLnJldHVyblR5
cGVDYW5ub3RCZVZvaWRBcnJheSgoTWV0aG9kRGVjbGFyYXRpb24pIG1ldGhvZERlY2wpOwogCQkJ
CWZvdW5kUmV0dXJuVHlwZVByb2JsZW0gPSB0cnVlOworCQkJCWlmIChtZXRob2REZWNsLmFubm90
YXRpb25zICE9IG51bGwpIHsKKwkJCQkJcmVqZWN0VHlwZUFubm90YXRlZFZvaWRNZXRob2QobWV0
aG9kRGVjbCk7CisJCQkJfQogCQkJfSBlbHNlIHsKIAkJCQlpZiAoKG1ldGhvZFR5cGUudGFnQml0
cyAmIFRhZ0JpdHMuSGFzTWlzc2luZ1R5cGUpICE9IDApIHsKIAkJCQkJbWV0aG9kLnRhZ0JpdHMg
fD0gVGFnQml0cy5IYXNNaXNzaW5nVHlwZTsKQEAgLTE2MDcsNiArMTYxMCwxMSBAQAogCQkJCVR5
cGVCaW5kaW5nIGxlYWZUeXBlID0gbWV0aG9kVHlwZS5sZWFmQ29tcG9uZW50VHlwZSgpOwogCQkJ
CWlmIChsZWFmVHlwZSBpbnN0YW5jZW9mIFJlZmVyZW5jZUJpbmRpbmcgJiYgKCgoUmVmZXJlbmNl
QmluZGluZykgbGVhZlR5cGUpLm1vZGlmaWVycyAmIEV4dHJhQ29tcGlsZXJNb2RpZmllcnMuQWNj
R2VuZXJpY1NpZ25hdHVyZSkgIT0gMCkKIAkJCQkJbWV0aG9kLm1vZGlmaWVycyB8PSBFeHRyYUNv
bXBpbGVyTW9kaWZpZXJzLkFjY0dlbmVyaWNTaWduYXR1cmU7CisJCQkJZWxzZSBpZiAobGVhZlR5
cGUgPT0gVHlwZUJpbmRpbmcuVk9JRCAmJiBtZXRob2REZWNsLmFubm90YXRpb25zICE9IG51bGwp
IHsKKwkJCQkJaWYgKHJlamVjdFR5cGVBbm5vdGF0ZWRWb2lkTWV0aG9kKG1ldGhvZERlY2wpKSB7
CisJCQkJCQlmb3VuZFJldHVyblR5cGVQcm9ibGVtID0gdHJ1ZTsKKwkJCQkJfQorCQkJCX0KIAkJ
CX0KIAkJfQogCX0KQEAgLTE2MjgsNiArMTYzNiwyNCBAQAogCW1ldGhvZC5tb2RpZmllcnMgJj0g
fkV4dHJhQ29tcGlsZXJNb2RpZmllcnMuQWNjVW5yZXNvbHZlZDsKIAlyZXR1cm4gbWV0aG9kOwog
fQorCisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9Mzkx
MTA4Citwcml2YXRlIGJvb2xlYW4gcmVqZWN0VHlwZUFubm90YXRlZFZvaWRNZXRob2QoQWJzdHJh
Y3RNZXRob2REZWNsYXJhdGlvbiBtZXRob2REZWNsKSB7CisJQW5ub3RhdGlvbltdIGFubm90YXRp
b25zID0gbWV0aG9kRGVjbC5hbm5vdGF0aW9uczsKKwlpbnQgbGVuZ3RoID0gYW5ub3RhdGlvbnMg
PT0gbnVsbCA/IDAgOiBhbm5vdGF0aW9ucy5sZW5ndGg7CisJYm9vbGVhbiB0eXBlQW5ub3RhdGVk
ID0gZmFsc2U7CisJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykgeworCQlSZWZlcmVu
Y2VCaW5kaW5nIGJpbmRpbmcgPSAoUmVmZXJlbmNlQmluZGluZykgYW5ub3RhdGlvbnNbaV0ucmVz
b2x2ZWRUeXBlOworCQlpZiAoYmluZGluZyAhPSBudWxsCisJCQkJJiYgKGJpbmRpbmcudGFnQml0
cyAmIFRhZ0JpdHMuQW5ub3RhdGlvbkZvclR5cGVVc2UpICE9IDAKKwkJCQkmJiAoYmluZGluZy50
YWdCaXRzICYgVGFnQml0cy5Bbm5vdGF0aW9uRm9yTWV0aG9kKSA9PSAwKSB7CisJCQltZXRob2RE
ZWNsLnNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmlsbGVnYWxVc2FnZU9mVHlwZUFubm90YXRpb25z
KGFubm90YXRpb25zW2ldKTsKKwkJCXR5cGVBbm5vdGF0ZWQgPSB0cnVlOworCQl9CisJfQorCXJl
dHVybiB0eXBlQW5ub3RhdGVkOworfQorCiBwcml2YXRlIHZvaWQgY3JlYXRlQXJndW1lbnRCaW5k
aW5ncyhNZXRob2RCaW5kaW5nIG1ldGhvZCkgewogCS8vIGVuc3VyZSBudWxsbmVzcyBkZWZhdWx0
cyBhcmUgaW5pdGlhbGl6ZWQgYXQgYWxsIGVuY2xvc2luZyBsZXZlbHM6CiAJc3dpdGNoICh0aGlz
Lm51bGxuZXNzRGVmYXVsdEluaXRpYWxpemVkKSB7
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>222386</attachid>
            <date>2012-10-16 05:15:00 -0400</date>
            <delta_ts>2012-10-16 05:15:05 -0400</delta_ts>
            <desc>Updated patch</desc>
            <filename>Fix-for-bug-391108.patch</filename>
            <type>text/plain</type>
            <size>4681</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlVHlwZUFu
bm90YXRpb25UZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OZWdhdGl2
ZVR5cGVBbm5vdGF0aW9uVGVzdC5qYXZhCmluZGV4IGExNzc0NjguLjAxMGI1YjYgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlVHlwZUFubm90YXRpb25U
ZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVnYXRpdmVUeXBl
QW5ub3RhdGlvblRlc3QuamF2YQpAQCAtMjg1OSw0ICsyODU5LDQ2IEBACiAJCQkJIlVucmVwb3J0
ZWQgY2Fubm90IGJlIHJlc29sdmVkIHRvIGEgdHlwZVxuIiArIA0KIAkJCQkiLS0tLS0tLS0tLVxu
Iik7DQotCX0JCQ0KKwl9DQorCS8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3df
YnVnLmNnaT9pZD0zOTExMDgNCisJcHVibGljIHZvaWQgdGVzdEJ1ZzM5MTEwOCgpIHsNCisJCXRo
aXMucnVuTmVnYXRpdmVUZXN0KA0KKwkJCQluZXcgU3RyaW5nW117DQorCQkJCQkJIlguamF2YSIs
DQorCQkJCQkJInB1YmxpYyBjbGFzcyBYIHtcbiIgKw0KKwkJCQkJCSIJQE1hcmtlciBATWFya2Vy
MiBATWFya2VyMyBwdWJsaWMgdm9pZCBmb28oKSB7fVxuIiArDQorCQkJCQkJIglATWFya2VyIEBN
YXJrZXIyIEBNYXJrZXIzIHZvaWQgZm9vMigpIHt9XG4iICsNCisJCQkJCQkifVxuIiArDQorCQkJ
CQkJIkBqYXZhLmxhbmcuYW5ub3RhdGlvbi5UYXJnZXQgKGphdmEubGFuZy5hbm5vdGF0aW9uLkVs
ZW1lbnRUeXBlLlRZUEVfVVNFKVxuIiArDQorCQkJCQkJIkBpbnRlcmZhY2UgTWFya2VyIHt9XG4i
ICsNCisJCQkJCQkiQGphdmEubGFuZy5hbm5vdGF0aW9uLlRhcmdldCAoamF2YS5sYW5nLmFubm90
YXRpb24uRWxlbWVudFR5cGUuTUVUSE9EKVxuIiArDQorCQkJCQkJIkBpbnRlcmZhY2UgTWFya2Vy
MiB7fVxuIiArDQorCQkJCQkJIkBqYXZhLmxhbmcuYW5ub3RhdGlvbi5UYXJnZXQgKHtqYXZhLmxh
bmcuYW5ub3RhdGlvbi5FbGVtZW50VHlwZS5UWVBFX1VTRSwgamF2YS5sYW5nLmFubm90YXRpb24u
RWxlbWVudFR5cGUuTUVUSE9EfSlcbiIgKw0KKwkJCQkJCSJAaW50ZXJmYWNlIE1hcmtlcjMge30i
LA0KKwkJCQkJCSJqYXZhL2xhbmcvYW5ub3RhdGlvbi9FbGVtZW50VHlwZS5qYXZhIiwNCisJCQkJ
CQkicGFja2FnZSBqYXZhLmxhbmcuYW5ub3RhdGlvbjtcbiIgKw0KKwkJCQkJCSJwdWJsaWMgZW51
bSBFbGVtZW50VHlwZSB7XG4iICsNCisJCQkJCQkiICAgIFRZUEUsXG4iICsNCisJCQkJCQkiICAg
IEZJRUxELFxuIiArDQorCQkJCQkJIiAgICBNRVRIT0QsXG4iICsNCisJCQkJCQkiICAgIFBBUkFN
RVRFUixcbiIgKw0KKwkJCQkJCSIgICAgQ09OU1RSVUNUT1IsXG4iICsNCisJCQkJCQkiICAgIExP
Q0FMX1ZBUklBQkxFLFxuIiArDQorCQkJCQkJIiAgICBBTk5PVEFUSU9OX1RZUEUsXG4iICsNCisJ
CQkJCQkiICAgIFBBQ0tBR0UsXG4iICsNCisJCQkJCQkiICAgIFRZUEVfUEFSQU1FVEVSLFxuIiAr
DQorCQkJCQkJIiAgICBUWVBFX1VTRVxuIiArDQorCQkJCQkJIn1cbiINCisJCQkJfSwNCisJCQkJ
Ii0tLS0tLS0tLS1cbiIgKyANCisJCQkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAyKVxu
IiArIA0KKwkJCQkiCUBNYXJrZXIgQE1hcmtlcjIgQE1hcmtlcjMgcHVibGljIHZvaWQgZm9vKCkg
e31cbiIgKyANCisJCQkJIgleXl5eXl5eXG4iICsgDQorCQkJCSJUeXBlIGFubm90YXRpb24gaXMg
aWxsZWdhbCBmb3IgYSBtZXRob2QgdGhhdCByZXR1cm5zIHZvaWRcbiIgKyANCisJCQkJIi0tLS0t
LS0tLS1cbiIgKyANCisJCQkJIjIuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAzKVxuIiArIA0K
KwkJCQkiCUBNYXJrZXIgQE1hcmtlcjIgQE1hcmtlcjMgdm9pZCBmb28yKCkge31cbiIgKyANCisJ
CQkJIgleXl5eXl5eXG4iICsgDQorCQkJCSJUeXBlIGFubm90YXRpb24gaXMgaWxsZWdhbCBmb3Ig
YSBtZXRob2QgdGhhdCByZXR1cm5zIHZvaWRcbiIgKyANCisJCQkJIi0tLS0tLS0tLS1cbiIpOw0K
Kwl9DQogfQ0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQW5ub3RhdGlvbi5qYXZhIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FzdC9Bbm5vdGF0aW9uLmphdmEKaW5kZXggNmQxZWZkOC4uNjRlMTY3MCAxMDA2NDQKLS0tIGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FzdC9Bbm5vdGF0aW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Bbm5vdGF0aW9uLmph
dmEKQEAgLTg3OSw4ICs4NzksNCBAQAogCQkJCQkJCWJyZWFrIGNoZWNrVGFyZ2V0Q29tcGF0aWJp
bGl0eTsKIAkJCQkJCX0gZWxzZSBpZiAoKG1ldGFUYWdCaXRzICYgVGFnQml0cy5Bbm5vdGF0aW9u
Rm9yVHlwZVVzZSkgIT0gMCkgewotCQkJCQkJCS8vIGpzciAzMDggLSBhbm5vdGF0aW9uIG9uIG1l
dGhvZCByZXR1cm4gdHlwZQotCQkJCQkJCWlmIChtZXRob2RCaW5kaW5nLnJldHVyblR5cGUgIT0g
bnVsbCAmJiBtZXRob2RCaW5kaW5nLnJldHVyblR5cGUuaWQgPT0gVF92b2lkKSB7Ci0JCQkJCQkJ
CXNjb3BlLnByb2JsZW1SZXBvcnRlcigpLmlsbGVnYWxVc2FnZU9mVHlwZUFubm90YXRpb25zKHRo
aXMpOwotCQkJCQkJCX0KIAkJCQkJCQlicmVhayBjaGVja1RhcmdldENvbXBhdGliaWxpdHk7CiAJ
CQkJCQl9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1NvdXJjZVR5cGVCaW5kaW5nLmphdmEg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvbG9va3VwL1NvdXJjZVR5cGVCaW5kaW5nLmphdmEKaW5kZXggM2Y0MGE5My4uZGY4
YTQ0YSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Tb3VyY2VUeXBlQmluZGluZy5qYXZhCisr
KyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9sb29rdXAvU291cmNlVHlwZUJpbmRpbmcuamF2YQpAQCAtMTYwOCw0ICsxNjA4
LDYgQEAKIAkJCQlpZiAobGVhZlR5cGUgaW5zdGFuY2VvZiBSZWZlcmVuY2VCaW5kaW5nICYmICgo
KFJlZmVyZW5jZUJpbmRpbmcpIGxlYWZUeXBlKS5tb2RpZmllcnMgJiBFeHRyYUNvbXBpbGVyTW9k
aWZpZXJzLkFjY0dlbmVyaWNTaWduYXR1cmUpICE9IDApCiAJCQkJCW1ldGhvZC5tb2RpZmllcnMg
fD0gRXh0cmFDb21waWxlck1vZGlmaWVycy5BY2NHZW5lcmljU2lnbmF0dXJlOworCQkJCWVsc2Ug
aWYgKGxlYWZUeXBlID09IFR5cGVCaW5kaW5nLlZPSUQgJiYgbWV0aG9kRGVjbC5hbm5vdGF0aW9u
cyAhPSBudWxsKQorCQkJCQlyZWplY3RUeXBlQW5ub3RhdGVkVm9pZE1ldGhvZChtZXRob2REZWNs
KTsKIAkJCX0KIAkJfQpAQCAtMTYyOSw0ICsxNjMxLDE3IEBACiAJcmV0dXJuIG1ldGhvZDsKIH0K
Ky8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zOTExMDgK
K3ByaXZhdGUgdm9pZCByZWplY3RUeXBlQW5ub3RhdGVkVm9pZE1ldGhvZChBYnN0cmFjdE1ldGhv
ZERlY2xhcmF0aW9uIG1ldGhvZERlY2wpIHsKKwlBbm5vdGF0aW9uW10gYW5ub3RhdGlvbnMgPSBt
ZXRob2REZWNsLmFubm90YXRpb25zOworCWludCBsZW5ndGggPSBhbm5vdGF0aW9ucyA9PSBudWxs
ID8gMCA6IGFubm90YXRpb25zLmxlbmd0aDsKKwlmb3IgKGludCBpID0gMDsgaSA8IGxlbmd0aDsg
aSsrKSB7CisJCVJlZmVyZW5jZUJpbmRpbmcgYmluZGluZyA9IChSZWZlcmVuY2VCaW5kaW5nKSBh
bm5vdGF0aW9uc1tpXS5yZXNvbHZlZFR5cGU7CisJCWlmIChiaW5kaW5nICE9IG51bGwKKwkJCQkm
JiAoYmluZGluZy50YWdCaXRzICYgVGFnQml0cy5Bbm5vdGF0aW9uRm9yVHlwZVVzZSkgIT0gMAor
CQkJCSYmIChiaW5kaW5nLnRhZ0JpdHMgJiBUYWdCaXRzLkFubm90YXRpb25Gb3JNZXRob2QpID09
IDApIHsKKwkJCW1ldGhvZERlY2wuc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuaWxsZWdhbFVzYWdl
T2ZUeXBlQW5ub3RhdGlvbnMoYW5ub3RhdGlvbnNbaV0pOworCQl9CisJfQorfQogcHJpdmF0ZSB2
b2lkIGNyZWF0ZUFyZ3VtZW50QmluZGluZ3MoTWV0aG9kQmluZGluZyBtZXRob2QpIHsKIAkvLyBl
bnN1cmUgbnVsbG5lc3MgZGVmYXVsdHMgYXJlIGluaXRpYWxpemVkIGF0IGFsbCBlbmNsb3Npbmcg
bGV2ZWxzOg==
</data>

          </attachment>
      

    </bug>

</bugzilla>