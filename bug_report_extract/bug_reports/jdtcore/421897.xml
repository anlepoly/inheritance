<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>421897</bug_id>
          
          <creation_ts>2013-11-16 22:52:00 -0500</creation_ts>
          <short_desc>[1.8][compiler] Errors in lambda body should not influence overload resolution.</short_desc>
          <delta_ts>2013-11-17 00:29:27 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>400871</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2330984</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-11-16 22:52:11 -0500</bug_when>
    <thetext>BETA_JAVA8
----------

An earlier draft of JSR 335 required the compiler to eliminate overloaded
method candidates based on whether the choice of that method would trigger
errors in lambda body.

The latest draft has eliminated this requirement. As a result, the following
program is no longer legal and should be flagged with an ambiguous method
invocation error: 8b115 correctly exhibits this behavior, while eclipse compiles
it fine and resolves the call to foo(I).

// --
interface I {
	int foo(int [] a);
}
interface J  {
	int foo(int a);
}
public class X {
	public static void main(String[] args) {
		System.out.println(foo((a)-&gt;a.length));
	}
	static String foo(I i) {
		return(&quot;foo(I)&quot;);
	}
	static String foo(J j) {
		return(&quot;foo(J)&quot;);
	}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2330985</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-11-16 22:54:11 -0500</bug_when>
    <thetext>Basically, undo https://bugs.eclipse.org/bugs/show_bug.cgi?id=402219.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2330986</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-11-17 00:29:27 -0500</bug_when>
    <thetext>Fix and tests released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=10a59ab8fb6256e59e155c071a356402964eb736

I had to disable a couple of tests for the time being: 
NegativeLambdaExpressionsTest._test401610h &amp;
NegativeLambdaExpressionsTest._test401610i.

These will be reenabled as part of overload resolution work.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>