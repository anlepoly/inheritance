<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>446317</bug_id>
          
          <creation_ts>2014-10-08 09:49:00 -0400</creation_ts>
          <short_desc>[1.8][compiler] java.lang.VerifyError: Bad type on operand stack with Lambdas and/or inner classes</short_desc>
          <delta_ts>2015-01-28 01:30:51 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.5</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>4.4.2</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Helmut Janknecht">helmut.janknecht</reporter>
          <assigned_to name="Sasikanth Bharadwaj">saammana</assigned_to>
          <cc>clovis.seragiotto</cc>
    
    <cc>helmut.janknecht</cc>
    
    <cc>jarthana</cc>
    
    <cc>manpalat</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2461625</commentid>
    <comment_count>0</comment_count>
    <who name="Helmut Janknecht">helmut.janknecht</who>
    <bug_when>2014-10-08 09:49:01 -0400</bug_when>
    <thetext>Similar to https://bugs.eclipse.org/bugs/show_bug.cgi?id=444803 we found slightly different variants using Lambdas/Inner Classes etc. where the ECJ generates invalid bytecode and causes following Exception during verifying:

Exception in thread &quot;main&quot; java.lang.VerifyError: Bad type on operand stack
Exception Details:
  Location:
    java8/ecjissues/AnotherEcjProblem$Sub.&lt;init&gt;(Ljava8/ecjissues/AnotherEcjProblem;)V @8: invokedynamic
  Reason:
    Type uninitializedThis (current frame, stack[2]) is not assignable to &apos;java8/ecjissues/AnotherEcjProblem$Sub&apos;

See following code:

// ----------------------------------------------------------------------

import java.util.function.Consumer;

@SuppressWarnings(&quot;all&quot;)
public class AnotherEcjProblem {

  private final String text = &quot;Bug?&quot;;

  public static void main(String[] args) {
    new AnotherEcjProblem().doIt();
  }

  private void doIt() {
    new Sub();
  }

  private class Super&lt;T&gt; {

    public Super(Consumer&lt;T&gt; consumer) {
    }
  }

  private class Sub extends Super&lt;String&gt; {

    public Sub() {
      super(s -&gt; System.out.println(text));
      // super(s -&gt; System.out.println(&quot;miep&quot;));
    }
  }

}


// ----------------------------------------------------------------------

import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

public class EclipseCompilerAndLambdaCrash {

  public static void main(String[] args) {
    new EclipseCompilerAndLambdaCrash().run();
  }

  public void run() {
    class Inner {
      public Inner() {
        System.out.println(&quot;miep&quot;);
      }
    }

    Map&lt;String, Inner&gt; map = new HashMap&lt;&gt;();
    Function&lt;String, Inner&gt; function = (name) -&gt; {
      Inner i = map.get(name);
      if (i == null) {
        i = new Inner();
        map.put(name, i);
      }
      return i;

    };
    function.apply(&quot;test&quot;);
  }
}

// ----------------------------------------------------------------------

Tested with 4.4.1 and eclipse-SDK-N20141007-2000-win32-x86_64</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2461629</commentid>
    <comment_count>1</comment_count>
    <who name="Helmut Janknecht">helmut.janknecht</who>
    <bug_when>2014-10-08 09:55:51 -0400</bug_when>
    <thetext>Ran the code with Oracle&apos;s JDK build 1.8.0_20-b26 64-Bit.
When compiling with javac it works.

The &quot;real/productive code&quot; in our app is actually triggering a JVM crash when starting with -Xverify:none:

#
# A fatal error has been detected by the Java Runtime Environment:
#
#  EXCEPTION_ACCESS_VIOLATION (0xc0000005) at pc=0x000000000f0318dc, pid=10780, tid=11748
#
# JRE version: Java(TM) SE Runtime Environment (8.0_20-b26) (build 1.8.0_20-b26)
# Java VM: Java HotSpot(TM) 64-Bit Server VM (25.20-b23 mixed mode windows-amd64 compressed oops)
# Problematic frame:
# j  com.ssn.acx.core.decorator.ExecutionContext.getManagedInstance(Ljava/lang/Class;[Ljava/lang/annotation/Annotation;)Ljava/lang/Object;+6


But this I couldn&apos;t reproduce with a simple code snippet yet.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2462243</commentid>
    <comment_count>2</comment_count>
    <who name="Helmut Janknecht">helmut.janknecht</who>
    <bug_when>2014-10-09 09:47:06 -0400</bug_when>
    <thetext>Another example which produces illegal byte code wit Luna/4.4.1 but which works with eclipse-SDK-mars-N20141007-2000-win32-x86_64.


// ----------------------------------------------------------------------

public class CrashLambda {

  public void fun1(final Thread dummy) {
    try {
      new Thread(() -&gt; { //nothing
        });
    } finally {
      new Thread(() -&gt; {
        handle(dummy);
      });
    }
  }

  public void handle(final Thread dummy) {
    //nothing
  }

  public static void main(String[] args) {
    new CrashLambda();
  }
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2462251</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-09 09:54:06 -0400</bug_when>
    <thetext>Helmut, the fix for https://bugs.eclipse.org/bugs/show_bug.cgi?id=444803
has been made in only in Mars ATM, we will backport it.

Are you saying the comment#0 problem happens on Mars recent nightly builds
too ? I cannot check readily as my workspace has a whole lot of changes.

Comment#1 problem should be reported to Sun. Even if we generate bad code,
they shouldn&apos;t crash ;-)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2462492</commentid>
    <comment_count>4</comment_count>
    <who name="Helmut Janknecht">helmut.janknecht</who>
    <bug_when>2014-10-09 14:36:56 -0400</bug_when>
    <thetext>Hi Srikanth,

so with 4.4.1 *all* my examples don&apos;t run and terminate with java.lang.VerifyError.

With eclipse-SDK-mars-N20141007-2000-win32-x86_64 only EclipseCompilerAndLambdaCrash and AnotherEcjProblem do have a problem.
The last one (CrashLambda) with Lambda in finally is working with that mars-nightly.

The EXCEPTION_ACCESS_VIOLATION issue I will report to Oracle as soon as I&apos;m able to boil it down to a small test class.

Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2462502</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-09 14:56:41 -0400</bug_when>
    <thetext>(In reply to Helmut Janknecht from comment #4)
&gt; Hi Srikanth,
&gt; 
&gt; so with 4.4.1 *all* my examples don&apos;t run and terminate with
&gt; java.lang.VerifyError.

OK, thanks, I confirm the problem with the comment#0 snippets on master.
I&apos;ll fix it this week and arrange for back port.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2462659</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-10 01:22:17 -0400</bug_when>
    <thetext>(In reply to Helmut Janknecht from comment #0)
&gt; Similar to https://bugs.eclipse.org/bugs/show_bug.cgi?id=444803 we found
&gt; slightly different variants using Lambdas/Inner Classes etc. where the ECJ
&gt; generates invalid bytecode and causes following Exception during verifying:
&gt; 
&gt; Exception in thread &quot;main&quot; java.lang.VerifyError: Bad type on operand stack
&gt; Exception Details:
&gt;   Location:
&gt;    
&gt; java8/ecjissues/AnotherEcjProblem$Sub.&lt;init&gt;(Ljava8/ecjissues/
&gt; AnotherEcjProblem;)V @8: invokedynamic
&gt;   Reason:
&gt;     Type uninitializedThis (current frame, stack[2]) is not assignable to
&gt; &apos;java8/ecjissues/AnotherEcjProblem$Sub&apos;

Hmm. I get this with javac jdk-8u20-fcs-bin-b26-windows-x64-30_jul_2014
too. The second snippet crashes only with Eclipse.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2462682</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-10 02:42:44 -0400</bug_when>
    <thetext>Helmut, please note that the first snippet in comment#0 is buggy. The lambda
needs to capture its enclosing instance due to the the reference to the
field text. Referring to this/super in an explicit constructor call is illegal.

Both compilers wrongly accept the code. I have a fix under test that
would reject the first snippet and compile the second snippet.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2462688</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-10 03:04:19 -0400</bug_when>
    <thetext>Actually Sasi, this would be a good one for you. TIA. I&apos;ll attach a draft
patch that fails a few cases.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2462689</commentid>
    <comment_count>9</comment_count>
      <attachid>247785</attachid>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-10 03:05:48 -0400</bug_when>
    <thetext>Created attachment 247785
Fails a few tests

We need to look for static contexts and not consider them as referring to
enclosing instance</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2463779</commentid>
    <comment_count>10</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-10-13 07:08:19 -0400</bug_when>
    <thetext>(In reply to comment #8)
&gt; Actually Sasi, this would be a good one for you. TIA. I&apos;ll attach a draft
&gt; patch that fails a few cases.
Most failures occur because tagging a type reference as using enclosing instance state clears the CanBeStatic flag on all intervening method declarations thereby breaking the flow analysis which detects if a method can be potentially static. Restricting this tagging to type references occurring in a lambda solves this problem. 
With this change, SingleTypeReference.getTypeBinding would read

else if (this.resolvedType instanceof LocalTypeBinding) {
			LocalTypeBinding localType = (LocalTypeBinding) this.resolvedType;
			MethodScope methodScope = scope.methodScope();
			if (methodScope != null &amp;&amp; methodScope.referenceContext instanceof LambdaExpression) {
				LambdaExpression lambda = (LambdaExpression) methodScope.referenceContext;
				if (!lambda.scope.isStatic)
					scope.tagAsAccessingEnclosingInstanceStateOf(localType.enclosingType(), false /* ! type variable access */);
			}
		} 
		
Apart from this, couple of other failures are related to wrong number of error messages - where earlier we saw just one error message &quot;No enclosing instance of ...&quot;, we now see an additional error &quot;Cannot refer to this nor super ....&quot; in org.eclipse.jdt.core.tests.compiler.regression.NegativeLambdaExpressionsTest.test433735() and org.eclipse.jdt.core.tests.compiler.regression.NegativeLambdaExpressionsTest.test432531a().

@Srikanth, reporting the second error only if there are no other errors works for these two tests but is that the right thing to do?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2464566</commentid>
    <comment_count>11</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-10-14 06:47:22 -0400</bug_when>
    <thetext>(In reply to comment #10)

&gt; @Srikanth, reporting the second error only if there are no other errors works
&gt; for these two tests but is that the right thing to do?

Below code is compiled by javac 1.8.0_20 but rejected by eclipse

import java.util.function.Supplier;

class E {
	E(Supplier&lt;Object&gt; factory) { }
}

public class Test extends E {
	Test() {
		super( () -&gt; {
			class Z extends E {
				Z() {
					super(() -&gt; new Object());
					//super(null);
				}
			} 
			//return new Z();
			return null;
		});	
	}

	public static void main(String[] args) {
		new Test();
	}
}

Modified the patch to handle this as well. The piece of code that reports an error in BlockScope.addLocalType is moved to SingleTypeReference.getTypeBinding so that only a reference to a local type with in the lambda would result in error. Here&apos;s what the new code looks like

else if (this.resolvedType instanceof LocalTypeBinding) {
			LocalTypeBinding localType = (LocalTypeBinding) this.resolvedType;
			MethodScope methodScope = scope.methodScope();
			if (methodScope != null &amp;&amp; methodScope.referenceContext instanceof LambdaExpression) {
				LambdaExpression lambda = (LambdaExpression) methodScope.referenceContext;
				if (lambda.scope.isConstructorCall) {
					lambda.scope.problemReporter().noSuchEnclosingInstance(lambda.scope.enclosingSourceType(), lambda, true);
				} else if (!lambda.scope.isStatic){
					scope.tagAsAccessingEnclosingInstanceStateOf(localType.enclosingType(), false /* ! type variable access */);
				}
			}
		}
Tests are running. Will post the modified patch once they are complete</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2465273</commentid>
    <comment_count>12</comment_count>
      <attachid>247884</attachid>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-10-15 04:51:51 -0400</bug_when>
    <thetext>Created attachment 247884
Modified patch including new test</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2465277</commentid>
    <comment_count>13</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-10-15 04:55:16 -0400</bug_when>
    <thetext>Attached patch with the proposed modifications and the new test mentioned in comment 11. Srikanth, please take a look</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2468397</commentid>
    <comment_count>14</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-21 01:16:04 -0400</bug_when>
    <thetext>I picked elements from both the patches and release a fix with tests here: 
http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=027433d18c80815de3076b7fd489422a48401f1a

Now error messages match up better with javac.

Thanks Sasi &amp; Helmut.

You may want to follow up with Oracle regarding https://bugs.eclipse.org/bugs/show_bug.cgi?id=446317#c7</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2473164</commentid>
    <comment_count>15</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2014-10-28 23:10:17 -0400</bug_when>
    <thetext>verified for Eclipse Mars 4.5M3 Build id: I20141027-2000</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2503683</commentid>
    <comment_count>16</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-01-09 03:09:32 -0500</bug_when>
    <thetext>This should be backported to 4.4.2 as well as verified for Mars.

Sasi, please proceed with back porting.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2503723</commentid>
    <comment_count>17</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2015-01-09 04:27:40 -0500</bug_when>
    <thetext>*** Bug 457007 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2504273</commentid>
    <comment_count>18</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2015-01-12 01:53:50 -0500</bug_when>
    <thetext>(In reply to comment #16)
&gt; This should be backported to 4.4.2 as well as verified for Mars.
&gt; 
&gt; Sasi, please proceed with back porting.
bug 433735 needs to be committed before this, because this builds on changes from that bug.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2504321</commentid>
    <comment_count>19</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2015-01-12 04:11:01 -0500</bug_when>
    <thetext>Released to 442 via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=R4_4_maintenance&amp;id=95c0fd529832bfe9b5679a196dad12b9222a232d</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2507901</commentid>
    <comment_count>20</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-01-20 10:31:11 -0500</bug_when>
    <thetext>Verified for 4.4.2 RC1 with build M20150114-1500</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2511122</commentid>
    <comment_count>21</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-01-28 01:30:51 -0500</bug_when>
    <thetext>Verified for 4.5 M5 with build I20150127-0900

BTW, the snippet given in comment #0 still compiles with javac (as of b25) and fails at runtime.</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>247785</attachid>
            <date>2014-10-10 03:05:00 -0400</date>
            <delta_ts>2014-10-10 03:05:48 -0400</delta_ts>
            <desc>Fails a few tests</desc>
            <filename>Draft.patch</filename>
            <type>text/plain</type>
            <size>10565</size>
            <attacher name="Srikanth Sankaran">srikanth_sankaran</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0xhbWJkYVJlZ3Jlc3Np
b25UZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3Jn
L2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9MYW1iZGFSZWdyZXNz
aW9uVGVzdC5qYXZhCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAuLmM2Y2M3ZTkK
LS0tIC9kZXYvbnVsbAorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9MYW1iZGFS
ZWdyZXNzaW9uVGVzdC5qYXZhCkBAIC0wLDAgKzEsMTI5IEBACisvKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKgorICogQ29weXJpZ2h0IChjKSAyMDE0IElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgor
ICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5n
IG1hdGVyaWFscworICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUg
RWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCisgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRp
c3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdAorICogaHR0cDovL3d3dy5lY2xpcHNlLm9y
Zy9sZWdhbC9lcGwtdjEwLmh0bWwKKyAqIAorICogQ29udHJpYnV0b3JzOgorICogICAgIElCTSBD
b3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgorICoqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKiovCitwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVy
LnJlZ3Jlc3Npb247CisKK2ltcG9ydCBqdW5pdC5mcmFtZXdvcmsuVGVzdDsKK3B1YmxpYyBjbGFz
cyBMYW1iZGFSZWdyZXNzaW9uVGVzdCBleHRlbmRzIEFic3RyYWN0UmVncmVzc2lvblRlc3Qgewor
CitzdGF0aWMgeworLy8JVEVTVFNfTkFNRVMgPSBuZXcgU3RyaW5nW10geyAidGVzdDAwMiJ9Owor
Ly8JVEVTVFNfTlVNQkVSUyA9IG5ldyBpbnRbXSB7IDUwIH07CisvLwlURVNUU19SQU5HRSA9IG5l
dyBpbnRbXSB7IDExLCAtMSB9OworfQorcHVibGljIExhbWJkYVJlZ3Jlc3Npb25UZXN0KFN0cmlu
ZyBuYW1lKSB7CisJc3VwZXIobmFtZSk7Cit9CitwdWJsaWMgc3RhdGljIFRlc3Qgc3VpdGUoKSB7
CisJcmV0dXJuIGJ1aWxkTWluaW1hbENvbXBsaWFuY2VUZXN0U3VpdGUodGVzdENsYXNzKCksIEZf
MV84KTsKK30KKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9p
ZD00NDYzMTcsIGphdmEubGFuZy5WZXJpZnlFcnJvcjogQmFkIHR5cGUgb24gb3BlcmFuZCBzdGFj
ayB3aXRoIExhbWJkYXMgYW5kL29yIGlubmVyIGNsYXNzZXMgCitwdWJsaWMgdm9pZCB0ZXN0MDAx
KCkgeworCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCQluZXcgU3RyaW5nW10geworCQkJCSJYLmph
dmEiLAorCQkJCSJpbXBvcnQgamF2YS51dGlsLkhhc2hNYXA7XG4iICsKKwkJCQkiaW1wb3J0IGph
dmEudXRpbC5NYXA7XG4iICsKKwkJCQkiaW1wb3J0IGphdmEudXRpbC5mdW5jdGlvbi5GdW5jdGlv
bjtcbiIgKworCQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCQkiICBwdWJsaWMgc3RhdGlj
IHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsKKwkJCQkiICAgIG5ldyBYKCkucnVuKCk7
XG4iICsKKwkJCQkiICB9XG4iICsKKwkJCQkiICBwdWJsaWMgdm9pZCBydW4oKSB7XG4iICsKKwkJ
CQkiICAgIGNsYXNzIElubmVyIHtcbiIgKworCQkJCSIgICAgICBwdWJsaWMgSW5uZXIoKSB7XG4i
ICsKKwkJCQkiICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oXCJtaWVwXCIpO1xuIiArCisJCQkJ
IiAgICAgIH1cbiIgKworCQkJCSIgICAgfVxuIiArCisJCQkJIiAgICBNYXA8U3RyaW5nLCBJbm5l
cj4gbWFwID0gbmV3IEhhc2hNYXA8PigpO1xuIiArCisJCQkJIiAgICBGdW5jdGlvbjxTdHJpbmcs
IElubmVyPiBmdW5jdGlvbiA9IChuYW1lKSAtPiB7XG4iICsKKwkJCQkiICAgICAgSW5uZXIgaSA9
IG1hcC5nZXQobmFtZSk7XG4iICsKKwkJCQkiICAgICAgaWYgKGkgPT0gbnVsbCkge1xuIiArCisJ
CQkJIiAgICAgICAgaSA9IG5ldyBJbm5lcigpO1xuIiArCisJCQkJIiAgICAgICAgbWFwLnB1dChu
YW1lLCBpKTtcbiIgKworCQkJCSIgICAgICB9XG4iICsKKwkJCQkiICAgICAgcmV0dXJuIGk7XG4i
ICsKKwkJCQkiXG4iICsKKwkJCQkiICAgIH07XG4iICsKKwkJCQkiICAgIGZ1bmN0aW9uLmFwcGx5
KFwidGVzdFwiKTtcbiIgKworCQkJCSIgIH1cbiIgKworCQkJCSJ9XG4iLAorCQkJfSwKKwkJCSJt
aWVwIgorCQkJKTsKK30KKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVn
LmNnaT9pZD00NDYzMTcsIGphdmEubGFuZy5WZXJpZnlFcnJvcjogQmFkIHR5cGUgb24gb3BlcmFu
ZCBzdGFjayB3aXRoIExhbWJkYXMgYW5kL29yIGlubmVyIGNsYXNzZXMgCitwdWJsaWMgdm9pZCB0
ZXN0MDAyKCkgeworCXRoaXMucnVuTmVnYXRpdmVUZXN0KAorCQkJbmV3IFN0cmluZ1tdIHsKKwkJ
CQkiWC5qYXZhIiwKKwkJCQkiaW1wb3J0IGphdmEudXRpbC5mdW5jdGlvbi5Db25zdW1lcjtcbiIg
KworCQkJCSJAU3VwcHJlc3NXYXJuaW5ncyhcImFsbFwiKVxuIiArCisJCQkJInB1YmxpYyBjbGFz
cyBYIHtcbiIgKworCQkJCSIgIHByaXZhdGUgZmluYWwgU3RyaW5nIHRleHQgPSBcIkJ1Zz9cIjtc
biIgKworCQkJCSIgIHB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIg
KworCQkJCSIgICAgbmV3IFgoKS5kb0l0KCk7XG4iICsKKwkJCQkiICB9XG4iICsKKwkJCQkiICBw
cml2YXRlIHZvaWQgZG9JdCgpIHtcbiIgKworCQkJCSIgICAgbmV3IFN1YigpO1xuIiArCisJCQkJ
IiAgfVxuIiArCisJCQkJIiAgcHJpdmF0ZSBjbGFzcyBTdXBlcjxUPiB7XG4iICsKKwkJCQkiICAg
IHB1YmxpYyBTdXBlcihDb25zdW1lcjxUPiBjb25zdW1lcikge1xuIiArCisJCQkJIiAgICB9XG4i
ICsKKwkJCQkiICB9XG4iICsKKwkJCQkiICBwcml2YXRlIGNsYXNzIFN1YiBleHRlbmRzIFN1cGVy
PFN0cmluZz4ge1xuIiArCisJCQkJIiAgICBwdWJsaWMgU3ViKCkge1xuIiArCisJCQkJIiAgICAg
IHN1cGVyKHMgLT4gU3lzdGVtLm91dC5wcmludGxuKHRleHQpKTtcbiIgKworCQkJCSIgICAgICAv
LyBzdXBlcihzIC0+IFN5c3RlbS5vdXQucHJpbnRsbihcIm1pZXBcIikpO1xuIiArCisJCQkJIiAg
ICB9XG4iICsKKwkJCQkiICB9XG4iICsKKwkJCQkifVxuIiwKKwkJCX0sCisJCQkiLS0tLS0tLS0t
LVxuIiArIAorCQkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxNylcbiIgKyAKKwkJCSIJ
c3VwZXIocyAtPiBTeXN0ZW0ub3V0LnByaW50bG4odGV4dCkpO1xuIiArIAorCQkJIgkgICAgICBe
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkJIkNhbm5vdCByZWZlciB0byBc
J3RoaXNcJyBub3IgXCdzdXBlclwnIHdoaWxlIGV4cGxpY2l0bHkgaW52b2tpbmcgYSBjb25zdHJ1
Y3RvclxuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIKKwkJCSk7Cit9CisvLyBodHRwczovL2J1Z3Mu
ZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDQ2MzE3LCBqYXZhLmxhbmcuVmVyaWZ5
RXJyb3I6IEJhZCB0eXBlIG9uIG9wZXJhbmQgc3RhY2sgd2l0aCBMYW1iZGFzIGFuZC9vciBpbm5l
ciBjbGFzc2VzIAorcHVibGljIHZvaWQgdGVzdDAwMygpIHsKKwl0aGlzLnJ1bk5lZ2F0aXZlVGVz
dCgKKwkJCW5ldyBTdHJpbmdbXSB7CisJCQkJIlguamF2YSIsCisJCQkJImltcG9ydCBqYXZhLnV0
aWwuZnVuY3Rpb24uQ29uc3VtZXI7XG4iICsKKwkJCQkiQFN1cHByZXNzV2FybmluZ3MoXCJhbGxc
IilcbiIgKworCQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCQkiICBwcml2YXRlIGZpbmFs
IFN0cmluZyB0ZXh0ID0gXCJCdWc/XCI7XG4iICsKKwkJCQkiICBwdWJsaWMgc3RhdGljIHZvaWQg
bWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsKKwkJCQkiICAgIG5ldyBYKCkuZG9JdCgpO1xuIiAr
CisJCQkJIiAgfVxuIiArCisJCQkJIiAgcHJpdmF0ZSB2b2lkIGRvSXQoKSB7XG4iICsKKwkJCQki
ICAgIG5ldyBTdWIoKTtcbiIgKworCQkJCSIgIH1cbiIgKworCQkJCSIgIHByaXZhdGUgY2xhc3Mg
U3VwZXI8VD4ge1xuIiArCisJCQkJIiAgICBwdWJsaWMgU3VwZXIoQ29uc3VtZXI8VD4gY29uc3Vt
ZXIpIHtcbiIgKworCQkJCSIgICAgfVxuIiArCisJCQkJIiAgfVxuIiArCisJCQkJIiAgcHJpdmF0
ZSBjbGFzcyBTdWIgZXh0ZW5kcyBTdXBlcjxTdHJpbmc+IHtcbiIgKworCQkJCSIgICAgcHVibGlj
IFN1YigpIHtcbiIgKworCQkJCSIgICAgICAgc3VwZXIocyAtPiBTeXN0ZW0ub3V0LnByaW50bG4o
XCJtaWVwXCIpKTtcbiIgKworCQkJCSIgICAgfVxuIiArCisJCQkJIiAgfVxuIiArCisJCQkJIn1c
biIsCisJCQl9LAorCQkJIiIKKwkJCSk7Cit9CitwdWJsaWMgc3RhdGljIENsYXNzIHRlc3RDbGFz
cygpIHsKKwlyZXR1cm4gTGFtYmRhUmVncmVzc2lvblRlc3QuY2xhc3M7Cit9Cit9CmRpZmYgLS1n
aXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2Uv
amR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9UZXN0QWxsLmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVz
dHMvY29tcGlsZXIvcmVncmVzc2lvbi9UZXN0QWxsLmphdmEKaW5kZXggNjczODFmYi4uMmMwYmEw
NiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vVGVzdEFsbC5qYXZh
CisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBz
ZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1Rlc3RBbGwuamF2YQpAQCAtMTMx
LDYgKzEzMSw3IEBACiAJc2luY2VfMV84LmFkZChOdWxsVHlwZUFubm90YXRpb25UZXN0LmNsYXNz
KTsKIAlzaW5jZV8xXzguYWRkKE5lZ2F0aXZlTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmNsYXNzKTsK
IAlzaW5jZV8xXzguYWRkKExhbWJkYUV4cHJlc3Npb25zVGVzdC5jbGFzcyk7CisJc2luY2VfMV84
LmFkZChMYW1iZGFSZWdyZXNzaW9uVGVzdC5jbGFzcyk7CiAJc2luY2VfMV84LmFkZChTZXJpYWxp
emFibGVMYW1iZGFUZXN0LmNsYXNzKTsKIAlzaW5jZV8xXzguYWRkKE92ZXJsb2FkUmVzb2x1dGlv
blRlc3Q4LmNsYXNzKTsKIAlzaW5jZV8xXzguYWRkKEpTUjMzNUNsYXNzRmlsZVRlc3QuY2xhc3Mp
OwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb3JlL3Rlc3RzL1J1bk9ubHkzMzVDb21waWxlclRlc3RzLmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVz
dHMvUnVuT25seTMzNUNvbXBpbGVyVGVzdHMuamF2YQppbmRleCBkOThmY2NlLi4zNDg0NTk0IDEw
MDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlw
c2UvamR0L2NvcmUvdGVzdHMvUnVuT25seTMzNUNvbXBpbGVyVGVzdHMuamF2YQorKysgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVz
dHMvUnVuT25seTMzNUNvbXBpbGVyVGVzdHMuamF2YQpAQCAtMjIsNiArMjIsNyBAQAogaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyLnJlZ3Jlc3Npb24uR2VuZXJpY3NS
ZWdyZXNzaW9uVGVzdF8xXzc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29t
cGlsZXIucmVncmVzc2lvbi5HZW5lcmljc1JlZ3Jlc3Npb25UZXN0XzFfODsKIGltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci5yZWdyZXNzaW9uLkxhbWJkYUV4cHJlc3Np
b25zVGVzdDsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci5yZWdy
ZXNzaW9uLkxhbWJkYVJlZ3Jlc3Npb25UZXN0OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3Jl
LnRlc3RzLmNvbXBpbGVyLnJlZ3Jlc3Npb24uTmVnYXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rlc3Q7
CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIucmVncmVzc2lvbi5O
dWxsVHlwZUFubm90YXRpb25UZXN0OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3Rz
LmNvbXBpbGVyLnJlZ3Jlc3Npb24uT3ZlcmxvYWRSZXNvbHV0aW9uVGVzdDg7CkBAIC0zNyw2ICsz
OCw3IEBACiAJCXJldHVybiBuZXcgQ2xhc3NbXSB7CiAJCQlHZW5lcmljc1JlZ3Jlc3Npb25UZXN0
XzFfOC5jbGFzcywKIAkJCUxhbWJkYUV4cHJlc3Npb25zVGVzdC5jbGFzcywKKwkJCUxhbWJkYVJl
Z3Jlc3Npb25UZXN0LmNsYXNzLAogCQkJTmVnYXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuY2xh
c3MsCiAJCQlPdmVybG9hZFJlc29sdXRpb25UZXN0OC5jbGFzcywKIAkJCU51bGxUeXBlQW5ub3Rh
dGlvblRlc3QuY2xhc3MsIC8vIHRlc3RzIHR5cGUgaW5mZXJlbmNlCmRpZmYgLS1naXQgYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVz
dHMvUnVuT25seUphdmE4VGVzdHMuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1v
ZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9SdW5Pbmx5SmF2YThUZXN0cy5qYXZh
CmluZGV4IGQ0YzUzNzEuLjMyODg4OTUgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
LnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9SdW5Pbmx5SmF2YThU
ZXN0cy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9SdW5Pbmx5SmF2YThUZXN0cy5qYXZhCkBAIC00MCw2ICs0
MCw3IEBACiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIucmVncmVz
c2lvbi5KU1IzMDhTcGVjU25pcHBldFRlc3RzOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3Jl
LnRlc3RzLmNvbXBpbGVyLnJlZ3Jlc3Npb24uSlNSMzM1Q2xhc3NGaWxlVGVzdDsKIGltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci5yZWdyZXNzaW9uLkxhbWJkYUV4cHJl
c3Npb25zVGVzdDsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci5y
ZWdyZXNzaW9uLkxhbWJkYVJlZ3Jlc3Npb25UZXN0OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5j
b3JlLnRlc3RzLmNvbXBpbGVyLnJlZ3Jlc3Npb24uTWV0aG9kUGFyYW1ldGVyc0F0dHJpYnV0ZVRl
c3Q7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIucmVncmVzc2lv
bi5OZWdhdGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
Y29yZS50ZXN0cy5jb21waWxlci5yZWdyZXNzaW9uLk5lZ2F0aXZlVHlwZUFubm90YXRpb25UZXN0
OwpAQCAtNzYsNiArNzcsNyBAQAogCQkJTGFtYmRhRXhwcmVzc2lvblN5bnRheFRlc3QuY2xhc3Ms
CiAJCQlOZWdhdGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5jbGFzcywKIAkJCUxhbWJkYUV4cHJl
c3Npb25zVGVzdC5jbGFzcywKKwkJCUxhbWJkYVJlZ3Jlc3Npb25UZXN0LmNsYXNzLAogCQkJU2Vy
aWFsaXphYmxlTGFtYmRhVGVzdC5jbGFzcywKIAkJCU92ZXJsb2FkUmVzb2x1dGlvblRlc3Q4LmNs
YXNzLAogCQkJSlNSMzM1Q2xhc3NGaWxlVGVzdC5jbGFzcywKZGlmZiAtLWdpdCBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9MYW1iZGFFeHByZXNzaW9uLmph
dmEKaW5kZXggMTMzZmNhZC4uZjM0ZTVhZCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9MYW1iZGFF
eHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2Vj
bGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9MYW1iZGFFeHByZXNzaW9uLmphdmEKQEAg
LTQxNSw2ICs0MTUsOSBAQAogCQlpZiAoKHRoaXMuYmluZGluZy50YWdCaXRzICYgVGFnQml0cy5I
YXNNaXNzaW5nVHlwZSkgIT0gMCkgewogCQkJdGhpcy5zY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5t
aXNzaW5nVHlwZUluTGFtYmRhKHRoaXMsIHRoaXMuYmluZGluZyk7CiAJCX0KKwkJaWYgKHRoaXMu
c2hvdWxkQ2FwdHVyZUluc3RhbmNlICYmIHRoaXMuc2NvcGUuaXNDb25zdHJ1Y3RvckNhbGwpIHsK
KwkJCXRoaXMuc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuZmllbGRzT3JUaGlzQmVmb3JlQ29uc3Ry
dWN0b3JJbnZvY2F0aW9uKHRoaXMpOworCQl9CiAJCXJldHVybiB0aGlzLnJlc29sdmVkVHlwZTsK
IAl9CiAKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvU2luZ2xlVHlwZVJlZmVyZW5jZS5qYXZhIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FzdC9TaW5nbGVUeXBlUmVmZXJlbmNlLmphdmEKaW5kZXggNDZkZDI4NS4uYTdmYjJl
MCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9TaW5nbGVUeXBlUmVmZXJlbmNlLmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FzdC9TaW5nbGVUeXBlUmVmZXJlbmNlLmphdmEKQEAgLTU1LDYgKzU1LDkgQEAKIAkJ
CWlmICh0eXBlVmFyaWFibGUuZGVjbGFyaW5nRWxlbWVudCBpbnN0YW5jZW9mIFNvdXJjZVR5cGVC
aW5kaW5nKSB7CiAJCQkJc2NvcGUudGFnQXNBY2Nlc3NpbmdFbmNsb3NpbmdJbnN0YW5jZVN0YXRl
T2YoKFJlZmVyZW5jZUJpbmRpbmcpIHR5cGVWYXJpYWJsZS5kZWNsYXJpbmdFbGVtZW50LCB0cnVl
IC8qIHR5cGUgdmFyaWFibGUgYWNjZXNzICovKTsKIAkJCX0KKwkJfSBlbHNlIGlmICh0aGlzLnJl
c29sdmVkVHlwZSBpbnN0YW5jZW9mIExvY2FsVHlwZUJpbmRpbmcpIHsKKwkJCUxvY2FsVHlwZUJp
bmRpbmcgbG9jYWxUeXBlID0gKExvY2FsVHlwZUJpbmRpbmcpIHRoaXMucmVzb2x2ZWRUeXBlOwor
CQkJc2NvcGUudGFnQXNBY2Nlc3NpbmdFbmNsb3NpbmdJbnN0YW5jZVN0YXRlT2YobG9jYWxUeXBl
LmVuY2xvc2luZ1R5cGUoKSwgZmFsc2UgLyogISB0eXBlIHZhcmlhYmxlIGFjY2VzcyAqLyk7CiAJ
CX0KIAogCQlpZiAoc2NvcGUua2luZCA9PSBTY29wZS5DTEFTU19TQ09QRSAmJiB0aGlzLnJlc29s
dmVkVHlwZS5pc1ZhbGlkQmluZGluZygpKQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Byb2JsZW0vUHJv
YmxlbVJlcG9ydGVyLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9Qcm9ibGVtUmVwb3J0ZXIuamF2YQpp
bmRleCA5M2ZjMDhjLi5iNjE3MDA0IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9Qcm9ibGVt
UmVwb3J0ZXIuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvcHJvYmxlbS9Qcm9ibGVtUmVwb3J0ZXIuamF2YQpA
QCAtMjIwMiw3ICsyMjAyLDcgQEAKIAkJCW5vZGVTb3VyY2VFbmQoaGlkZGVuRmllbGQsIGZpZWxk
RGVjbCkpOwogCX0KIH0KLXB1YmxpYyB2b2lkIGZpZWxkc09yVGhpc0JlZm9yZUNvbnN0cnVjdG9y
SW52b2NhdGlvbihUaGlzUmVmZXJlbmNlIHJlZmVyZW5jZSkgeworcHVibGljIHZvaWQgZmllbGRz
T3JUaGlzQmVmb3JlQ29uc3RydWN0b3JJbnZvY2F0aW9uKEFTVE5vZGUgcmVmZXJlbmNlKSB7CiAJ
dGhpcy5oYW5kbGUoCiAJCUlQcm9ibGVtLlRoaXNTdXBlckR1cmluZ0NvbnN0cnVjdG9ySW52b2Nh
dGlvbiwKIAkJTm9Bcmd1bWVudCw=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>247884</attachid>
            <date>2014-10-15 04:51:00 -0400</date>
            <delta_ts>2014-10-15 04:51:51 -0400</delta_ts>
            <desc>Modified patch including new test</desc>
            <filename>Modified-patch-including-new-test--bug446317.patch</filename>
            <type>text/plain</type>
            <size>12868</size>
            <attacher name="Sasikanth Bharadwaj">saammana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0xhbWJkYVJlZ3Jlc3Np
b25UZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3Jn
L2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9MYW1iZGFSZWdyZXNz
aW9uVGVzdC5qYXZhCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAuLmRiYmVmNDMK
LS0tIC9kZXYvbnVsbAorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9MYW1iZGFS
ZWdyZXNzaW9uVGVzdC5qYXZhCkBAIC0wLDAgKzEsMTU1IEBACisvKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKgorICogQ29weXJpZ2h0IChjKSAyMDE0IElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgor
ICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5n
IG1hdGVyaWFscworICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUg
RWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCisgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRp
c3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdAorICogaHR0cDovL3d3dy5lY2xpcHNlLm9y
Zy9sZWdhbC9lcGwtdjEwLmh0bWwKKyAqIAorICogQ29udHJpYnV0b3JzOgorICogICAgIElCTSBD
b3Jwb3JhdGlvbiAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgorICoqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKiovCitwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVy
LnJlZ3Jlc3Npb247CisKK2ltcG9ydCBqdW5pdC5mcmFtZXdvcmsuVGVzdDsKK3B1YmxpYyBjbGFz
cyBMYW1iZGFSZWdyZXNzaW9uVGVzdCBleHRlbmRzIEFic3RyYWN0UmVncmVzc2lvblRlc3Qgewor
CitzdGF0aWMgeworLy8JVEVTVFNfTkFNRVMgPSBuZXcgU3RyaW5nW10geyAidGVzdDAwMiJ9Owor
Ly8JVEVTVFNfTlVNQkVSUyA9IG5ldyBpbnRbXSB7IDUwIH07CisvLwlURVNUU19SQU5HRSA9IG5l
dyBpbnRbXSB7IDExLCAtMSB9OworfQorcHVibGljIExhbWJkYVJlZ3Jlc3Npb25UZXN0KFN0cmlu
ZyBuYW1lKSB7CisJc3VwZXIobmFtZSk7Cit9CitwdWJsaWMgc3RhdGljIFRlc3Qgc3VpdGUoKSB7
CisJcmV0dXJuIGJ1aWxkTWluaW1hbENvbXBsaWFuY2VUZXN0U3VpdGUodGVzdENsYXNzKCksIEZf
MV84KTsKK30KKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9p
ZD00NDYzMTcsIGphdmEubGFuZy5WZXJpZnlFcnJvcjogQmFkIHR5cGUgb24gb3BlcmFuZCBzdGFj
ayB3aXRoIExhbWJkYXMgYW5kL29yIGlubmVyIGNsYXNzZXMgCitwdWJsaWMgdm9pZCB0ZXN0MDAx
KCkgeworCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCQluZXcgU3RyaW5nW10geworCQkJCSJYLmph
dmEiLAorCQkJCSJpbXBvcnQgamF2YS51dGlsLkhhc2hNYXA7XG4iICsKKwkJCQkiaW1wb3J0IGph
dmEudXRpbC5NYXA7XG4iICsKKwkJCQkiaW1wb3J0IGphdmEudXRpbC5mdW5jdGlvbi5GdW5jdGlv
bjtcbiIgKworCQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCQkiICBwdWJsaWMgc3RhdGlj
IHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsKKwkJCQkiICAgIG5ldyBYKCkucnVuKCk7
XG4iICsKKwkJCQkiICB9XG4iICsKKwkJCQkiICBwdWJsaWMgdm9pZCBydW4oKSB7XG4iICsKKwkJ
CQkiICAgIGNsYXNzIElubmVyIHtcbiIgKworCQkJCSIgICAgICBwdWJsaWMgSW5uZXIoKSB7XG4i
ICsKKwkJCQkiICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4oXCJtaWVwXCIpO1xuIiArCisJCQkJ
IiAgICAgIH1cbiIgKworCQkJCSIgICAgfVxuIiArCisJCQkJIiAgICBNYXA8U3RyaW5nLCBJbm5l
cj4gbWFwID0gbmV3IEhhc2hNYXA8PigpO1xuIiArCisJCQkJIiAgICBGdW5jdGlvbjxTdHJpbmcs
IElubmVyPiBmdW5jdGlvbiA9IChuYW1lKSAtPiB7XG4iICsKKwkJCQkiICAgICAgSW5uZXIgaSA9
IG1hcC5nZXQobmFtZSk7XG4iICsKKwkJCQkiICAgICAgaWYgKGkgPT0gbnVsbCkge1xuIiArCisJ
CQkJIiAgICAgICAgaSA9IG5ldyBJbm5lcigpO1xuIiArCisJCQkJIiAgICAgICAgbWFwLnB1dChu
YW1lLCBpKTtcbiIgKworCQkJCSIgICAgICB9XG4iICsKKwkJCQkiICAgICAgcmV0dXJuIGk7XG4i
ICsKKwkJCQkiXG4iICsKKwkJCQkiICAgIH07XG4iICsKKwkJCQkiICAgIGZ1bmN0aW9uLmFwcGx5
KFwidGVzdFwiKTtcbiIgKworCQkJCSIgIH1cbiIgKworCQkJCSJ9XG4iLAorCQkJfSwKKwkJCSJt
aWVwIgorCQkJKTsKK30KKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVn
LmNnaT9pZD00NDYzMTcsIGphdmEubGFuZy5WZXJpZnlFcnJvcjogQmFkIHR5cGUgb24gb3BlcmFu
ZCBzdGFjayB3aXRoIExhbWJkYXMgYW5kL29yIGlubmVyIGNsYXNzZXMgCitwdWJsaWMgdm9pZCB0
ZXN0MDAyKCkgeworCXRoaXMucnVuTmVnYXRpdmVUZXN0KAorCQkJbmV3IFN0cmluZ1tdIHsKKwkJ
CQkiWC5qYXZhIiwKKwkJCQkiaW1wb3J0IGphdmEudXRpbC5mdW5jdGlvbi5Db25zdW1lcjtcbiIg
KworCQkJCSJAU3VwcHJlc3NXYXJuaW5ncyhcImFsbFwiKVxuIiArCisJCQkJInB1YmxpYyBjbGFz
cyBYIHtcbiIgKworCQkJCSIgIHByaXZhdGUgZmluYWwgU3RyaW5nIHRleHQgPSBcIkJ1Zz9cIjtc
biIgKworCQkJCSIgIHB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIg
KworCQkJCSIgICAgbmV3IFgoKS5kb0l0KCk7XG4iICsKKwkJCQkiICB9XG4iICsKKwkJCQkiICBw
cml2YXRlIHZvaWQgZG9JdCgpIHtcbiIgKworCQkJCSIgICAgbmV3IFN1YigpO1xuIiArCisJCQkJ
IiAgfVxuIiArCisJCQkJIiAgcHJpdmF0ZSBjbGFzcyBTdXBlcjxUPiB7XG4iICsKKwkJCQkiICAg
IHB1YmxpYyBTdXBlcihDb25zdW1lcjxUPiBjb25zdW1lcikge1xuIiArCisJCQkJIiAgICB9XG4i
ICsKKwkJCQkiICB9XG4iICsKKwkJCQkiICBwcml2YXRlIGNsYXNzIFN1YiBleHRlbmRzIFN1cGVy
PFN0cmluZz4ge1xuIiArCisJCQkJIiAgICBwdWJsaWMgU3ViKCkge1xuIiArCisJCQkJIiAgICAg
IHN1cGVyKHMgLT4gU3lzdGVtLm91dC5wcmludGxuKHRleHQpKTtcbiIgKworCQkJCSIgICAgICAv
LyBzdXBlcihzIC0+IFN5c3RlbS5vdXQucHJpbnRsbihcIm1pZXBcIikpO1xuIiArCisJCQkJIiAg
ICB9XG4iICsKKwkJCQkiICB9XG4iICsKKwkJCQkifVxuIiwKKwkJCX0sCisJCQkiLS0tLS0tLS0t
LVxuIiArIAorCQkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAxNylcbiIgKyAKKwkJCSIJ
c3VwZXIocyAtPiBTeXN0ZW0ub3V0LnByaW50bG4odGV4dCkpO1xuIiArIAorCQkJIgkgICAgICBe
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkJIkNhbm5vdCByZWZlciB0byBc
J3RoaXNcJyBub3IgXCdzdXBlclwnIHdoaWxlIGV4cGxpY2l0bHkgaW52b2tpbmcgYSBjb25zdHJ1
Y3RvclxuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIKKwkJCSk7Cit9CisvLyBodHRwczovL2J1Z3Mu
ZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDQ2MzE3LCBqYXZhLmxhbmcuVmVyaWZ5
RXJyb3I6IEJhZCB0eXBlIG9uIG9wZXJhbmQgc3RhY2sgd2l0aCBMYW1iZGFzIGFuZC9vciBpbm5l
ciBjbGFzc2VzIAorcHVibGljIHZvaWQgdGVzdDAwMygpIHsKKwl0aGlzLnJ1bk5lZ2F0aXZlVGVz
dCgKKwkJCW5ldyBTdHJpbmdbXSB7CisJCQkJIlguamF2YSIsCisJCQkJImltcG9ydCBqYXZhLnV0
aWwuZnVuY3Rpb24uQ29uc3VtZXI7XG4iICsKKwkJCQkiQFN1cHByZXNzV2FybmluZ3MoXCJhbGxc
IilcbiIgKworCQkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCQkiICBwcml2YXRlIGZpbmFs
IFN0cmluZyB0ZXh0ID0gXCJCdWc/XCI7XG4iICsKKwkJCQkiICBwdWJsaWMgc3RhdGljIHZvaWQg
bWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsKKwkJCQkiICAgIG5ldyBYKCkuZG9JdCgpO1xuIiAr
CisJCQkJIiAgfVxuIiArCisJCQkJIiAgcHJpdmF0ZSB2b2lkIGRvSXQoKSB7XG4iICsKKwkJCQki
ICAgIG5ldyBTdWIoKTtcbiIgKworCQkJCSIgIH1cbiIgKworCQkJCSIgIHByaXZhdGUgY2xhc3Mg
U3VwZXI8VD4ge1xuIiArCisJCQkJIiAgICBwdWJsaWMgU3VwZXIoQ29uc3VtZXI8VD4gY29uc3Vt
ZXIpIHtcbiIgKworCQkJCSIgICAgfVxuIiArCisJCQkJIiAgfVxuIiArCisJCQkJIiAgcHJpdmF0
ZSBjbGFzcyBTdWIgZXh0ZW5kcyBTdXBlcjxTdHJpbmc+IHtcbiIgKworCQkJCSIgICAgcHVibGlj
IFN1YigpIHtcbiIgKworCQkJCSIgICAgICAgc3VwZXIocyAtPiBTeXN0ZW0ub3V0LnByaW50bG4o
XCJtaWVwXCIpKTtcbiIgKworCQkJCSIgICAgfVxuIiArCisJCQkJIiAgfVxuIiArCisJCQkJIn1c
biIsCisJCQl9LAorCQkJIiIKKwkJCSk7Cit9CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcv
YnVncy9zaG93X2J1Zy5jZ2k/aWQ9NDQ2MzE3LCBqYXZhLmxhbmcuVmVyaWZ5RXJyb3I6IEJhZCB0
eXBlIG9uIG9wZXJhbmQgc3RhY2sgd2l0aCBMYW1iZGFzIGFuZC9vciBpbm5lciBjbGFzc2VzCitw
dWJsaWMgdm9pZCB0ZXN0MDA0KCkgeworCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCW5ldyBTdHJp
bmdbXSB7CisJCQkiWS5qYXZhIiwgCisJCQkiaW1wb3J0IGphdmEudXRpbC5mdW5jdGlvbi5TdXBw
bGllcjtcbiIgKyAKKwkJCSJjbGFzcyBFIHtcbiIgKyAKKwkJCSIJRShTdXBwbGllcjxPYmplY3Q+
IGZhY3RvcnkpIHsgfVxuIiArIAorCQkJIn1cbiIgKyAKKwkJCSJwdWJsaWMgY2xhc3MgWSBleHRl
bmRzIEUge1xuIiArIAorCQkJIglZKCkge1xuIiArIAorCQkJIgkJc3VwZXIoICgpIC0+IHtcbiIg
KyAKKwkJCSIJCQljbGFzcyBaIGV4dGVuZHMgRSB7XG4iICsgCisJCQkiCQkJCVooKSB7XG4iICsg
CisJCQkiCQkJCQlzdXBlcigoKSAtPiBuZXcgT2JqZWN0KCkpO1xuIiArIAorCQkJIgkJCQl9XG4i
ICsgCisJCQkiCQkJfVxuIiArIAorCQkJIgkJCXJldHVybiBudWxsO1xuIiArIAorCQkJIgkJCX0p
O1xuIiArIAorCQkJIgl9XG4iICsgCisJCQkiCXB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmlu
Z1tdIGFyZ3MpIHtcbiIgKyAKKwkJCSIJCW5ldyBZKCk7XG4iICsgCisJCQkiCX1cbiIgKyAKKwkJ
CSJ9IgorCX0pOworfQorcHVibGljIHN0YXRpYyBDbGFzcyB0ZXN0Q2xhc3MoKSB7CisJcmV0dXJu
IExhbWJkYVJlZ3Jlc3Npb25UZXN0LmNsYXNzOworfQorfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3Rz
L2NvbXBpbGVyL3JlZ3Jlc3Npb24vVGVzdEFsbC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUu
dGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3Jl
Z3Jlc3Npb24vVGVzdEFsbC5qYXZhCmluZGV4IDY3MzgxZmIuLjJjMGJhMDYgMTAwNjQ0Ci0tLSBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQv
Y29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1Rlc3RBbGwuamF2YQorKysgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVz
dHMvY29tcGlsZXIvcmVncmVzc2lvbi9UZXN0QWxsLmphdmEKQEAgLTEzMSw2ICsxMzEsNyBAQAog
CXNpbmNlXzFfOC5hZGQoTnVsbFR5cGVBbm5vdGF0aW9uVGVzdC5jbGFzcyk7CiAJc2luY2VfMV84
LmFkZChOZWdhdGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5jbGFzcyk7CiAJc2luY2VfMV84LmFk
ZChMYW1iZGFFeHByZXNzaW9uc1Rlc3QuY2xhc3MpOworCXNpbmNlXzFfOC5hZGQoTGFtYmRhUmVn
cmVzc2lvblRlc3QuY2xhc3MpOwogCXNpbmNlXzFfOC5hZGQoU2VyaWFsaXphYmxlTGFtYmRhVGVz
dC5jbGFzcyk7CiAJc2luY2VfMV84LmFkZChPdmVybG9hZFJlc29sdXRpb25UZXN0OC5jbGFzcyk7
CiAJc2luY2VfMV84LmFkZChKU1IzMzVDbGFzc0ZpbGVUZXN0LmNsYXNzKTsKZGlmZiAtLWdpdCBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLm1vZGVsL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29y
ZS90ZXN0cy9SdW5Pbmx5MzM1Q29tcGlsZXJUZXN0cy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL1J1bk9ubHkzMzVD
b21waWxlclRlc3RzLmphdmEKaW5kZXggZDk4ZmNjZS4uMzQ4NDU5NCAxMDA2NDQKLS0tIGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rl
c3RzL1J1bk9ubHkzMzVDb21waWxlclRlc3RzLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL1J1bk9ubHkzMzVD
b21waWxlclRlc3RzLmphdmEKQEAgLTIyLDYgKzIyLDcgQEAKIGltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuY29yZS50ZXN0cy5jb21waWxlci5yZWdyZXNzaW9uLkdlbmVyaWNzUmVncmVzc2lvblRlc3Rf
MV83OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyLnJlZ3Jlc3Np
b24uR2VuZXJpY3NSZWdyZXNzaW9uVGVzdF8xXzg7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIucmVncmVzc2lvbi5MYW1iZGFFeHByZXNzaW9uc1Rlc3Q7CitpbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIucmVncmVzc2lvbi5MYW1iZGFS
ZWdyZXNzaW9uVGVzdDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxl
ci5yZWdyZXNzaW9uLk5lZ2F0aXZlTGFtYmRhRXhwcmVzc2lvbnNUZXN0OwogaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyLnJlZ3Jlc3Npb24uTnVsbFR5cGVBbm5vdGF0
aW9uVGVzdDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci5yZWdy
ZXNzaW9uLk92ZXJsb2FkUmVzb2x1dGlvblRlc3Q4OwpAQCAtMzcsNiArMzgsNyBAQAogCQlyZXR1
cm4gbmV3IENsYXNzW10gewogCQkJR2VuZXJpY3NSZWdyZXNzaW9uVGVzdF8xXzguY2xhc3MsCiAJ
CQlMYW1iZGFFeHByZXNzaW9uc1Rlc3QuY2xhc3MsCisJCQlMYW1iZGFSZWdyZXNzaW9uVGVzdC5j
bGFzcywKIAkJCU5lZ2F0aXZlTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmNsYXNzLAogCQkJT3Zlcmxv
YWRSZXNvbHV0aW9uVGVzdDguY2xhc3MsCiAJCQlOdWxsVHlwZUFubm90YXRpb25UZXN0LmNsYXNz
LCAvLyB0ZXN0cyB0eXBlIGluZmVyZW5jZQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMubW9kZWwvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL1J1bk9ubHlKYXZh
OFRlc3RzLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2Vj
bGlwc2UvamR0L2NvcmUvdGVzdHMvUnVuT25seUphdmE4VGVzdHMuamF2YQppbmRleCBkNGM1Mzcx
Li4zMjg4ODk1IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvUnVuT25seUphdmE4VGVzdHMuamF2YQorKysg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5tb2RlbC9zcmMvb3JnL2VjbGlwc2UvamR0L2Nv
cmUvdGVzdHMvUnVuT25seUphdmE4VGVzdHMuamF2YQpAQCAtNDAsNiArNDAsNyBAQAogaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyLnJlZ3Jlc3Npb24uSlNSMzA4U3Bl
Y1NuaXBwZXRUZXN0czsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxl
ci5yZWdyZXNzaW9uLkpTUjMzNUNsYXNzRmlsZVRlc3Q7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmNvcmUudGVzdHMuY29tcGlsZXIucmVncmVzc2lvbi5MYW1iZGFFeHByZXNzaW9uc1Rlc3Q7Citp
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIucmVncmVzc2lvbi5MYW1i
ZGFSZWdyZXNzaW9uVGVzdDsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21w
aWxlci5yZWdyZXNzaW9uLk1ldGhvZFBhcmFtZXRlcnNBdHRyaWJ1dGVUZXN0OwogaW1wb3J0IG9y
Zy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyLnJlZ3Jlc3Npb24uTmVnYXRpdmVMYW1i
ZGFFeHByZXNzaW9uc1Rlc3Q7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29t
cGlsZXIucmVncmVzc2lvbi5OZWdhdGl2ZVR5cGVBbm5vdGF0aW9uVGVzdDsKQEAgLTc2LDYgKzc3
LDcgQEAKIAkJCUxhbWJkYUV4cHJlc3Npb25TeW50YXhUZXN0LmNsYXNzLAogCQkJTmVnYXRpdmVM
YW1iZGFFeHByZXNzaW9uc1Rlc3QuY2xhc3MsCiAJCQlMYW1iZGFFeHByZXNzaW9uc1Rlc3QuY2xh
c3MsCisJCQlMYW1iZGFSZWdyZXNzaW9uVGVzdC5jbGFzcywKIAkJCVNlcmlhbGl6YWJsZUxhbWJk
YVRlc3QuY2xhc3MsCiAJCQlPdmVybG9hZFJlc29sdXRpb25UZXN0OC5jbGFzcywKIAkJCUpTUjMz
NUNsYXNzRmlsZVRlc3QuY2xhc3MsCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0xhbWJkYUV4cHJl
c3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhCmluZGV4IDEzM2Zj
YWQuLmYzNGU1YWQgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZh
CisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhCkBAIC00MTUsNiArNDE1LDkg
QEAKIAkJaWYgKCh0aGlzLmJpbmRpbmcudGFnQml0cyAmIFRhZ0JpdHMuSGFzTWlzc2luZ1R5cGUp
ICE9IDApIHsKIAkJCXRoaXMuc2NvcGUucHJvYmxlbVJlcG9ydGVyKCkubWlzc2luZ1R5cGVJbkxh
bWJkYSh0aGlzLCB0aGlzLmJpbmRpbmcpOwogCQl9CisJCWlmICh0aGlzLnNob3VsZENhcHR1cmVJ
bnN0YW5jZSAmJiB0aGlzLnNjb3BlLmlzQ29uc3RydWN0b3JDYWxsKSB7CisJCQl0aGlzLnNjb3Bl
LnByb2JsZW1SZXBvcnRlcigpLmZpZWxkc09yVGhpc0JlZm9yZUNvbnN0cnVjdG9ySW52b2NhdGlv
bih0aGlzKTsKKwkJfQogCQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGU7CiAJfQogCmRpZmYgLS1n
aXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXN0L1NpbmdsZVR5cGVSZWZlcmVuY2UuamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvU2lu
Z2xlVHlwZVJlZmVyZW5jZS5qYXZhCmluZGV4IDQ2ZGQyODUuLjc4MDgwZDggMTAwNjQ0Ci0tLSBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hc3QvU2luZ2xlVHlwZVJlZmVyZW5jZS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvU2lu
Z2xlVHlwZVJlZmVyZW5jZS5qYXZhCkBAIC01NSw2ICs1NSwxNyBAQAogCQkJaWYgKHR5cGVWYXJp
YWJsZS5kZWNsYXJpbmdFbGVtZW50IGluc3RhbmNlb2YgU291cmNlVHlwZUJpbmRpbmcpIHsKIAkJ
CQlzY29wZS50YWdBc0FjY2Vzc2luZ0VuY2xvc2luZ0luc3RhbmNlU3RhdGVPZigoUmVmZXJlbmNl
QmluZGluZykgdHlwZVZhcmlhYmxlLmRlY2xhcmluZ0VsZW1lbnQsIHRydWUgLyogdHlwZSB2YXJp
YWJsZSBhY2Nlc3MgKi8pOwogCQkJfQorCQl9IGVsc2UgaWYgKHRoaXMucmVzb2x2ZWRUeXBlIGlu
c3RhbmNlb2YgTG9jYWxUeXBlQmluZGluZykgeworCQkJTG9jYWxUeXBlQmluZGluZyBsb2NhbFR5
cGUgPSAoTG9jYWxUeXBlQmluZGluZykgdGhpcy5yZXNvbHZlZFR5cGU7CisJCQlNZXRob2RTY29w
ZSBtZXRob2RTY29wZSA9IHNjb3BlLm1ldGhvZFNjb3BlKCk7CisJCQlpZiAobWV0aG9kU2NvcGUg
IT0gbnVsbCAmJiBtZXRob2RTY29wZS5yZWZlcmVuY2VDb250ZXh0IGluc3RhbmNlb2YgTGFtYmRh
RXhwcmVzc2lvbikgeworCQkJCUxhbWJkYUV4cHJlc3Npb24gbGFtYmRhID0gKExhbWJkYUV4cHJl
c3Npb24pIG1ldGhvZFNjb3BlLnJlZmVyZW5jZUNvbnRleHQ7CisJCQkJaWYgKGxhbWJkYS5zY29w
ZS5pc0NvbnN0cnVjdG9yQ2FsbCkgeworCQkJCQlsYW1iZGEuc2NvcGUucHJvYmxlbVJlcG9ydGVy
KCkubm9TdWNoRW5jbG9zaW5nSW5zdGFuY2UobGFtYmRhLnNjb3BlLmVuY2xvc2luZ1NvdXJjZVR5
cGUoKSwgbGFtYmRhLCB0cnVlKTsKKwkJCQl9IGVsc2UgaWYgKCFsYW1iZGEuc2NvcGUuaXNTdGF0
aWMpeworCQkJCQlzY29wZS50YWdBc0FjY2Vzc2luZ0VuY2xvc2luZ0luc3RhbmNlU3RhdGVPZihs
b2NhbFR5cGUuZW5jbG9zaW5nVHlwZSgpLCBmYWxzZSAvKiAhIHR5cGUgdmFyaWFibGUgYWNjZXNz
ICovKTsKKwkJCQl9CisJCQl9CiAJCX0KIAogCQlpZiAoc2NvcGUua2luZCA9PSBTY29wZS5DTEFT
U19TQ09QRSAmJiB0aGlzLnJlc29sdmVkVHlwZS5pc1ZhbGlkQmluZGluZygpKQpkaWZmIC0tZ2l0
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2xvb2t1cC9CbG9ja1Njb3BlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0Jsb2NrU2Nv
cGUuamF2YQppbmRleCBjMDRlOWE4Li4zNzNjY2IxIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3Vw
L0Jsb2NrU2NvcGUuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0Jsb2NrU2NvcGUuamF2YQpAQCAt
MTIxLDExICsxMjEsMTEgQEAKIAlNZXRob2RTY29wZSBtZXRob2RTY29wZSA9IG1ldGhvZFNjb3Bl
KCk7CiAJd2hpbGUgKG1ldGhvZFNjb3BlICE9IG51bGwgJiYgbWV0aG9kU2NvcGUucmVmZXJlbmNl
Q29udGV4dCBpbnN0YW5jZW9mIExhbWJkYUV4cHJlc3Npb24pIHsKIAkJTGFtYmRhRXhwcmVzc2lv
biBsYW1iZGEgPSAoTGFtYmRhRXhwcmVzc2lvbikgbWV0aG9kU2NvcGUucmVmZXJlbmNlQ29udGV4
dDsKLQkJaWYgKCFsYW1iZGEuc2NvcGUuaXNTdGF0aWMpIHsKKwkJaWYgKCFsYW1iZGEuc2NvcGUu
aXNTdGF0aWMgJiYgIWxhbWJkYS5zY29wZS5pc0NvbnN0cnVjdG9yQ2FsbCkgewogCQkJbGFtYmRh
LnNob3VsZENhcHR1cmVJbnN0YW5jZSA9IHRydWU7Ci0JCQlpZiAobGFtYmRhLnNjb3BlLmlzQ29u
c3RydWN0b3JDYWxsKSB7Ci0JCQkJbGFtYmRhLnNjb3BlLnByb2JsZW1SZXBvcnRlcigpLm5vU3Vj
aEVuY2xvc2luZ0luc3RhbmNlKGVuY2xvc2luZ1NvdXJjZVR5cGUoKSwgbGFtYmRhLCB0cnVlKTsK
LQkJCX0KKy8vCQkJaWYgKGxhbWJkYS5zY29wZS5pc0NvbnN0cnVjdG9yQ2FsbCkgeworLy8JCQkJ
bGFtYmRhLnNjb3BlLnByb2JsZW1SZXBvcnRlcigpLm5vU3VjaEVuY2xvc2luZ0luc3RhbmNlKGVu
Y2xvc2luZ1NvdXJjZVR5cGUoKSwgbGFtYmRhLCB0cnVlKTsKKy8vCQkJfQogCQl9CiAJCW1ldGhv
ZFNjb3BlID0gbWV0aG9kU2NvcGUuZW5jbG9zaW5nTWV0aG9kU2NvcGUoKTsKIAl9CmRpZmYgLS1n
aXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvcHJvYmxlbS9Qcm9ibGVtUmVwb3J0ZXIuamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVt
L1Byb2JsZW1SZXBvcnRlci5qYXZhCmluZGV4IDkzZmMwOGMuLmI2MTcwMDQgMTAwNjQ0Ci0tLSBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9wcm9ibGVtL1Byb2JsZW1SZXBvcnRlci5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9wcm9ibGVt
L1Byb2JsZW1SZXBvcnRlci5qYXZhCkBAIC0yMjAyLDcgKzIyMDIsNyBAQAogCQkJbm9kZVNvdXJj
ZUVuZChoaWRkZW5GaWVsZCwgZmllbGREZWNsKSk7CiAJfQogfQotcHVibGljIHZvaWQgZmllbGRz
T3JUaGlzQmVmb3JlQ29uc3RydWN0b3JJbnZvY2F0aW9uKFRoaXNSZWZlcmVuY2UgcmVmZXJlbmNl
KSB7CitwdWJsaWMgdm9pZCBmaWVsZHNPclRoaXNCZWZvcmVDb25zdHJ1Y3Rvckludm9jYXRpb24o
QVNUTm9kZSByZWZlcmVuY2UpIHsKIAl0aGlzLmhhbmRsZSgKIAkJSVByb2JsZW0uVGhpc1N1cGVy
RHVyaW5nQ29uc3RydWN0b3JJbnZvY2F0aW9uLAogCQlOb0FyZ3VtZW50LA==
</data>

          </attachment>
      

    </bug>

</bugzilla>