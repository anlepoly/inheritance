<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>424167</bug_id>
          
          <creation_ts>2013-12-16 13:32:00 -0500</creation_ts>
          <short_desc>[1.8] Fully integrate type inference with overload resolution</short_desc>
          <delta_ts>2014-11-02 11:32:58 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>424053</blocked>
    
    <blocked>424071</blocked>
    
    <blocked>424415</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Stephan Herrmann">stephan.herrmann</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>loskutov</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>timo.kinnunen</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2342449</commentid>
    <comment_count>0</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-16 13:32:37 -0500</bug_when>
    <thetext>As discussed in bug 420525 comment 6 it&apos;s tricky to find the right location where type inference should be finalized, i.e., if during inference we work on lambda copies etc., at what point should this information be accepted into the original lambda?

The current solution works from two sides: in PGMB.computeCompatibleMethod() right after inference, and: ASTNode.resolvePolyExpressionArguments() between two possible attempts of finding a suitable method binding. This works acceptably well for simple examples but gets more and more difficult with deep nesting of poly expressions.

Looking at the spec this issue relates to the distinction of invocation applicability inference (18.5.1) vs. invocation type inference (18.5.2). The former can be performed many times for the same invocation, and after selecting the most specific method the latter is invoked *once*.

Thus the difficulty to find the location for finalizing resolution into poly expressions relates to the fact that we haven&apos;t yet hooked invocation type inference into the proper location.

Initial analysis suggests that
- invocation applicability inference corresponds to
  Scope.computeCompatibleMethod(MethodBinding,TypeBinding[],InvocationSite)
- invocation type inference corresponds to
  Scope.mostSpecificMethodBinding(..)

Both methods end up calling PGMG.computeCompatibleMethod(). Out of 8 clients calling the former, only 5 clients also call the latter.

For now I will draft a solution whereby these clients pass a parameter which control whether we should perform part 1 or part 2 of the inference or both.

A final solution should later check how much of methods like mostSpecificMethodBinding should actually be *replaced* with a 1.8-specific implementation.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2342569</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-12-16 21:20:14 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #0)
&gt; As discussed in bug 420525 comment 6 it&apos;s tricky to find the right location
&gt; where type inference should be finalized, i.e., if during inference we work
&gt; on lambda copies etc., at what point should this information be accepted
&gt; into the original lambda?

Could you explain what exactly is the need for working on lambda during inference ?
i.e you resolve them and do what with it ? What is the information extracted from
the resolution ? Once I understand this better, I may be able to suggest something.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2342571</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-16 21:44:14 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #1)
&gt; (In reply to Stephan Herrmann from comment #0)
&gt; &gt; As discussed in bug 420525 comment 6 it&apos;s tricky to find the right location
&gt; &gt; where type inference should be finalized, i.e., if during inference we work
&gt; &gt; on lambda copies etc., at what point should this information be accepted
&gt; &gt; into the original lambda?
&gt; 
&gt; Could you explain what exactly is the need for working on lambda during
&gt; inference ?
&gt; i.e you resolve them and do what with it ? What is the information extracted
&gt; from
&gt; the resolution ? Once I understand this better, I may be able to suggest
&gt; something.


To answer your questions: in 18.2.1 we need to be able to ask isCompatibleWith (for any kind of expression).

More specifically, the main section to pull lambdas into inference is 18.2.1.1. This starts out by asking whether the lambda is void-compatible or value-compatible. Next, for lambdas with explicit argument types those need to be known. Finally, for all result expression we create a constraint, which for further reduction needs to query the resolved type of the result expression.

To read the same in code see ConstraintExpressionFormula.reduce(InferenceContext18), look for &quot;if (this.left instanceof LambdaExpression)&quot;. AFAICS, working off my current version of lambda.getResolvedCopyForInferenceTargeting() is quite promising.



What keeps me busy right now, is not what to do on the lambda (although there&apos;s certainly room for improvement), but where inside Scope within the range findMethod() -&gt; computeCompatibleMethod() different steps must be triggered. Basically, what I had in one location inside PGMB has to be scattered over all those locations.

I believe to be making some good progress right now. But I should warn you that this will be a significant patch. Not sure whether you want to accept this into EA2 at this point in time. I believe, however, I might be closing the one remaining relevant gap in this implementation. Should I upload a snapshot of my patch for your inspection?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2342576</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-12-16 22:23:11 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #2)

&gt; I believe to be making some good progress right now. But I should warn you
&gt; that this will be a significant patch. Not sure whether you want to accept
&gt; this into EA2 at this point in time.

Let us make haste slowly :)

&gt; I believe, however, I might be closing
&gt; the one remaining relevant gap in this implementation. Should I upload a
&gt; snapshot of my patch for your inspection?

At your convenience, since we are not looking at this for EA2, there is no
hurry.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2342591</commentid>
    <comment_count>4</comment_count>
      <attachid>238391</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-17 00:57:06 -0500</bug_when>
    <thetext>Created attachment 238391
advanced work in progress

With this patch I got rid of my incomplete heuristics of when to trigger which part of inference. Integration with overload resolution is basically done. 

Changes are mostly in those parts that control inference at a high level. Only few changes in FunctionalExpression and friends (e.g., a bit more usage of copy()).

The patch causes a few new regressions in tests, most of which seem to be just switching back to the test results of an earlier version, a handful may be semantically relevant.

On top of this patch I hope advanced issues like bug 420525 _should_ be solvable in a fairly straight-forward way. Without this patch I will have to waive that task.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2343055</commentid>
    <comment_count>5</comment_count>
      <attachid>238421</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-17 21:29:35 -0500</bug_when>
    <thetext>Created attachment 238421
corrected and cleaned-up patch

This patch should be ready for pushing right after EA2 has sailed.

All recent regressions have been fixed, with one single exception in OverloadResolutionTest8.test004(), which looks like a bug in how LE uses enclosingScopesHaveErrors(). I&apos;ll file a ticket in a minute.

The main work in this bug has been documented in the javadoc of PGMB.computeCompatibleMethod(). The responsibility to drive the inference has been split over PGMB plus Scope (findMethod()... family of methods). This should implement the correct interleaving of early inference, overload resolution then final inference (pending bug 423505).

Main responsibility for pushing final inference results into AST nodes is now at InferenceContext18.rebindInnerPolies(), which is integrated into the final part of inference. Conversely, much old stuff could be removed from ASTNode.resolvePolyExpressionArguments(), which is now pretty close to the original state that I found when I started :)

We no longer need to keep track in individual AST nodes, whether resolve is tentative or final, in fact most of the &quot;tentatively&quot; stuff (incl. the unsafe attempts to cleanup afterwards) could be removed after LE.getResolvedCopyForInferenceTargeting() proved to work real well.

One method that could use some more scrutiny is Scope.parameterCompatibilityLevel18(). This is used to &quot;help&quot; findMethod() et al to recognize that parameters will be compatible once the inference results from different levels can be used. In particular the division of responsibilities between the following three methods could use a better explanation:
- InferenceContext18.rebindInnerPolies()
- ASTNode.resolvePolyExpressionArguments()
- Scope.parameterCompatibilityLevel18()
In some part the perform same/similar tasks, but from different scenarios.


Only one bad workaround is still in use: Expression.unresolve(). I added a note referring to the two tests that would currently fail without. I hope to find a better solution, soon.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2343059</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-17 21:45:11 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #5)
&gt; All recent regressions have been fixed, with one single exception in
&gt; OverloadResolutionTest8.test004(), which looks like a bug in how LE uses
&gt; enclosingScopesHaveErrors(). I&apos;ll file a ticket in a minute.

-&gt; bug 424290</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2343237</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-18 08:32:40 -0500</bug_when>
    <thetext>*** Bug 424285 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2343249</commentid>
    <comment_count>8</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-18 08:49:57 -0500</bug_when>
    <thetext>Trying the use case from bug 401272 comment 0 I get an NPE in acceptPendingPolyArguments().

Root cause is: site.inferenceKind() says CHECK_LOOSE, whereas the inference actualy used CHECK_VARARG. This indicates that keeping the inference kind in the AST node is not correct (since several attempts may use different inference kinds). This field should be moved to InferenceContext18. To be included in a next version of the patch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2344527</commentid>
    <comment_count>9</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-22 07:48:32 -0500</bug_when>
    <thetext>The previous patch associated an unfinished InferenceContext18 directly to a PGMB, which is not a complete solution. A distinct IC18 may be in use for each *pair* of (Invocation x MethodBinding). Thus I changed the field in PGMB to a map (PGMB -&gt; IC18) in each implementation of Invocation. (Placing this map in AST classes rather than PGMB facilitates cleanup when no longer in use).

Based on this structure we can now better control the lifecycle of an inference, in particular mark when an inference hasFinished so we don&apos;t need to run it again and again. Also some updates (see ASTNode.resolvePolyExpressionArguments) should only be performed when the enclosing inference has finished.

I also unified the handling of varargs arguments: as per comment 8 it&apos;s now the IC18 that remembers the inferenceKind (specif. LOOSE vs. VARARGS). Based on that information IC18.getParameter extracts &quot;the ith variable-arity parameter type of a method&quot; according to 15.12.2.4.

With this infrastructure in place we can rely on the inference context knowing about varargs invocations - some more varargs bugs could be fixed.

I also prevented one case were Scope would call mostSpecificMethodBinding() for a one-element array of candidates :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2344528</commentid>
    <comment_count>10</comment_count>
      <attachid>238529</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-22 07:54:41 -0500</bug_when>
    <thetext>Created attachment 238529
improved patch

Accumulative patch implementing the items mentions in comment 9</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2344544</commentid>
    <comment_count>11</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-22 11:35:19 -0500</bug_when>
    <thetext>*** Bug 424415 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2344563</commentid>
    <comment_count>12</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-22 17:33:02 -0500</bug_when>
    <thetext>*** Bug 401850 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2344565</commentid>
    <comment_count>13</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-22 18:03:08 -0500</bug_when>
    <thetext>*** Bug 424592 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2344754</commentid>
    <comment_count>14</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-12-23 18:17:03 -0500</bug_when>
    <thetext>I&apos;ve pushed a polished patch as https://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=57e8dd41219d846363c918d62edb5007994c5c79

InferenceContext18 now has some javadoc as an entry point to understanding the implementation of type inference and its integration with the rest of the compiler.

The fix also resolves several other reports, details to be commented in the respective bugs.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2475308</commentid>
    <comment_count>15</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-02 11:32:58 -0500</bug_when>
    <thetext>*** Bug 401850 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>238391</attachid>
            <date>2013-12-17 00:57:00 -0500</date>
            <delta_ts>2013-12-17 21:29:35 -0500</delta_ts>
            <desc>advanced work in progress</desc>
            <filename>Bug424167.patch</filename>
            <type>text/plain</type>
            <size>77062</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNUeXBlVGVz
dC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xp
cHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0Lmph
dmEKaW5kZXggMjhkNTllMS4uN2ZkMTAyNSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0LmphdmEKQEAgLTQ5ODcyLDcgKzQ5ODcyLDYgQEAg
cHVibGljIHZvaWQgdGVzdDE0MzkoKSB7CiAJCQkJIgl9XG4iICsgCiAJCQkJIn1cbiIsLy8tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLQogCQkJfSwKLQkJCSh0aGlzLmNvbXBsaWFuY2VMZXZlbCA8IENsYXNzRmlsZUNv
bnN0YW50cy5KREsxXzggPwogCQkJIi0tLS0tLS0tLS1cbiIgKyAKIAkJCSIxLiBXQVJOSU5HIGlu
IFguamF2YSAoYXQgbGluZSA3KVxuIiArIAogCQkJIgl0aGlzKChMaXN0KSBudWxsLCBudWxsKTtc
biIgKyAKQEAgLTQ5OTEzLDQ0ICs0OTkxMiw3IEBAIHB1YmxpYyB2b2lkIHRlc3QxNDM5KCkgewog
CQkJIglzdXBlcigoTGlzdClsdSwgdCk7XG4iICsgCiAJCQkiCSAgICAgICBeXl5eXG4iICsgCiAJ
CQkiTGlzdCBpcyBhIHJhdyB0eXBlLiBSZWZlcmVuY2VzIHRvIGdlbmVyaWMgdHlwZSBMaXN0PEU+
IHNob3VsZCBiZSBwYXJhbWV0ZXJpemVkXG4iICsgCi0JCQkiLS0tLS0tLS0tLVxuIgotCQkJOiAv
LyBMaW5lIDc6IGluIDEuOCA8VD4gaXMgaW5mZXJlZCB0byA8bnVsbD4gPT4gbm90IGEgY2hlY2tl
ZCBleGNlcHRpb24gCi0JCQkiLS0tLS0tLS0tLVxuIiArIAotCQkJIjEuIFdBUk5JTkcgaW4gWC5q
YXZhIChhdCBsaW5lIDcpXG4iICsgCi0JCQkiCXRoaXMoKExpc3QpIG51bGwsIG51bGwpO1xuIiAr
IAotCQkJIgleXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5cbiIgKyAKLQkJCSJUeXBlIHNhZmV0eTog
VW5jaGVja2VkIGludm9jYXRpb24gWChMaXN0LCBudWxsKSBvZiB0aGUgZ2VuZXJpYyBjb25zdHJ1
Y3RvciBYKExpc3Q8VT4sIFQpIG9mIHR5cGUgWFxuIiArIAotCQkJIi0tLS0tLS0tLS1cbiIgKyAK
LQkJCSIyLiBXQVJOSU5HIGluIFguamF2YSAoYXQgbGluZSA3KVxuIiArIAotCQkJIgl0aGlzKChM
aXN0KSBudWxsLCBudWxsKTtcbiIgKyAKLQkJCSIJICAgICBeXl5eXl5eXl5eXlxuIiArIAotCQkJ
IlR5cGUgc2FmZXR5OiBUaGUgZXhwcmVzc2lvbiBvZiB0eXBlIExpc3QgbmVlZHMgdW5jaGVja2Vk
IGNvbnZlcnNpb24gdG8gY29uZm9ybSB0byBMaXN0PExpc3Q8Pz4+XG4iICsgCi0JCQkiLS0tLS0t
LS0tLVxuIiArIAotCQkJIjMuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDcpXG4iICsgCi0J
CQkiCXRoaXMoKExpc3QpIG51bGwsIG51bGwpO1xuIiArIAotCQkJIgkgICAgICBeXl5eXG4iICsg
Ci0JCQkiTGlzdCBpcyBhIHJhdyB0eXBlLiBSZWZlcmVuY2VzIHRvIGdlbmVyaWMgdHlwZSBMaXN0
PEU+IHNob3VsZCBiZSBwYXJhbWV0ZXJpemVkXG4iICsgCi0JCQkiLS0tLS0tLS0tLVxuIiArIAot
CQkJIjQuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDEyKVxuIiArIAotCQkJIglzdXBlcigo
TGlzdClsdSwgdCk7XG4iICsgCi0JCQkiCV5eXl5eXl5eXl5eXl5eXl5eXl5cbiIgKyAKLQkJCSJU
eXBlIHNhZmV0eTogVW5jaGVja2VkIGludm9jYXRpb24gWChMaXN0LCBUKSBvZiB0aGUgZ2VuZXJp
YyBjb25zdHJ1Y3RvciBYKExpc3Q8VT4sIFQpIG9mIHR5cGUgWFxuIiArIAotCQkJIi0tLS0tLS0t
LS1cbiIgKyAKLQkJCSI1LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTIpXG4iICsgCi0JCQki
CXN1cGVyKChMaXN0KWx1LCB0KTtcbiIgKyAKLQkJCSIJXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiAr
IAotCQkJIlVuaGFuZGxlZCBleGNlcHRpb24gdHlwZSBUaHJvd2FibGVcbiIgKyAKLQkJCSItLS0t
LS0tLS0tXG4iICsgCi0JCQkiNi4gV0FSTklORyBpbiBYLmphdmEgKGF0IGxpbmUgMTIpXG4iICsg
Ci0JCQkiCXN1cGVyKChMaXN0KWx1LCB0KTtcbiIgKyAKLQkJCSIJICAgICAgXl5eXl5eXl5cbiIg
KyAKLQkJCSJUeXBlIHNhZmV0eTogVGhlIGV4cHJlc3Npb24gb2YgdHlwZSBMaXN0IG5lZWRzIHVu
Y2hlY2tlZCBjb252ZXJzaW9uIHRvIGNvbmZvcm0gdG8gTGlzdDxMaXN0PD8+PlxuIiArIAotCQkJ
Ii0tLS0tLS0tLS1cbiIgKyAKLQkJCSI3LiBXQVJOSU5HIGluIFguamF2YSAoYXQgbGluZSAxMilc
biIgKyAKLQkJCSIJc3VwZXIoKExpc3QpbHUsIHQpO1xuIiArIAotCQkJIgkgICAgICAgXl5eXlxu
IiArIAotCQkJIkxpc3QgaXMgYSByYXcgdHlwZS4gUmVmZXJlbmNlcyB0byBnZW5lcmljIHR5cGUg
TGlzdDxFPiBzaG91bGQgYmUgcGFyYW1ldGVyaXplZFxuIiArIAotCQkJIi0tLS0tLS0tLS1cbiIp
KTsKKwkJCSItLS0tLS0tLS0tXG4iKTsKIH0KIC8vaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1
Z3Mvc2hvd19idWcuY2dpP2lkPTI2MDU2NwogcHVibGljIHZvaWQgdGVzdDE0NDAoKSB7CmRpZmYg
LS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlw
c2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25U
ZXN0XzFfOC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdy
ZXNzaW9uVGVzdF8xXzguamF2YQppbmRleCBkNWRjYWI1Li43OTRjOGI0IDEwMDY0NAotLS0gYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2Nv
cmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25UZXN0XzFfOC5q
YXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lv
blRlc3RfMV84LmphdmEKQEAgLTE5LDcgKzE5LDcgQEAgaW1wb3J0IGp1bml0LmZyYW1ld29yay5U
ZXN0OwogcHVibGljIGNsYXNzIEdlbmVyaWNzUmVncmVzc2lvblRlc3RfMV84IGV4dGVuZHMgQWJz
dHJhY3RSZWdyZXNzaW9uVGVzdCB7CiAKIHN0YXRpYyB7Ci0vLwlURVNUU19OQU1FUyA9IG5ldyBT
dHJpbmdbXSB7ICJ0ZXN0QnVnNDI0MDM4IiB9OworLy8JVEVTVFNfTkFNRVMgPSBuZXcgU3RyaW5n
W10geyAidGVzdEJ1ZzQyMDUyNSIgfTsKIC8vCVRFU1RTX05VTUJFUlMgPSBuZXcgaW50W10geyA0
MCwgNDEsIDQzLCA0NSwgNjMsIDY0IH07CiAvLwlURVNUU19SQU5HRSA9IG5ldyBpbnRbXSB7IDEx
LCAtMSB9OwogfQpAQCAtMjMwLDQgKzIzMCwzOSBAQCBwdWJsaWMgdm9pZCB0ZXN0QnVnNDIzNTA0
KCkgewogCQkJIn1cbiIKIAkJfSk7CiB9CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvNDIw
NTI1IC0gWzEuOF0gW2NvbXBpbGVyXSBJbmNvcnJlY3QgZXJyb3IgIlRoZSB0eXBlIEludGVnZXIg
ZG9lcyBub3QgZGVmaW5lIHN1bShPYmplY3QsIE9iamVjdCkgdGhhdCBpcyBhcHBsaWNhYmxlIGhl
cmUiCitwdWJsaWMgdm9pZCB0ZXN0QnVnNDIwNTI1KCkgeworCXJ1bkNvbmZvcm1UZXN0KAorCQlu
ZXcgU3RyaW5nW10geworCQkJIlguamF2YSIsCisJCQkiaW1wb3J0IGphdmEudXRpbC5BcnJheUxp
c3Q7XG4iICsgCisJCQkiaW1wb3J0IGphdmEudXRpbC5MaXN0O1xuIiArIAorCQkJImltcG9ydCBq
YXZhLnV0aWwuY29uY3VycmVudC5Db21wbGV0YWJsZUZ1dHVyZTtcbiIgKyAKKwkJCSJpbXBvcnQg
amF2YS51dGlsLmNvbmN1cnJlbnQuRXhlY3V0aW9uRXhjZXB0aW9uO1xuIiArCisJCQkicHVibGlj
IGNsYXNzIFgge1xuIiArCisJCQkiCXZvaWQgdGVzdChMaXN0PENvbXBsZXRhYmxlRnV0dXJlPElu
dGVnZXI+PiBmdXR1cmVzKSB7XG4iICsgCisJCQkiCQlDb21wbGV0YWJsZUZ1dHVyZS5hbGxPZihm
dXR1cmVzLnRvQXJyYXkobmV3IENvbXBsZXRhYmxlRnV0dXJlPD8+W117fSkpLnRoZW5BcHBseUFz
eW5jKCAoVm9pZCB2KSAtPiB7XG4iICsgCisJCQkiCQkJSW50ZWdlciBmaW5hbFJlc3VsdCA9IGZ1
dHVyZXMuc3RyZWFtKCkubWFwKCAoQ29tcGxldGFibGVGdXR1cmU8SW50ZWdlcj4gZikgLT4ge1xu
IiArIAorCQkJIgkJCQl0cnkge1xuIiArIAorCQkJIgkJCQkJcmV0dXJuIGYuZ2V0KCk7XG4iICsg
CisJCQkiCQkJCX0gY2F0Y2ggKEludGVycnVwdGVkRXhjZXB0aW9uIHwgRXhlY3V0aW9uRXhjZXB0
aW9uIGUpIHtcbiIgKyAKKwkJCSIJCQkJCXJldHVybiAwO1xuIiArIAorCQkJIgkJCQl9XG4iICsg
CisJCQkiCQkJfSkucmVkdWNlKDAsIEludGVnZXI6OnN1bSk7XG4iICsgCisJCQkiCQkJXG4iICsg
CisJCQkiCQkJbG9nKFwiZmluYWwgcmVzdWx0IGlzIFwiICsgZmluYWxSZXN1bHQpO1xuIiArIAor
CQkJIgkJCWlmIChmaW5hbFJlc3VsdCAhPSA1MCl7XG4iICsgCisJCQkiCQkJCXRocm93IG5ldyBS
dW50aW1lRXhjZXB0aW9uKFwiRkFJTEVEXCIpO1xuIiArIAorCQkJIgkJCX0gZWxzZXtcbiIgKyAK
KwkJCSIJCQkJbG9nKFwiU1VDQ0VTU1wiKTtcbiIgKyAKKwkJCSIJCQl9XG4iICsgCisJCQkiCQkJ
XG4iICsgCisJCQkiCQkJcmV0dXJuIG51bGw7XG4iICsgCisJCQkiCQl9KTtcbiIgKyAKKwkJCSJc
biIgKyAKKwkJCSIJfVxuIiArCisJCQkiCXZvaWQgbG9nKFN0cmluZyBtc2cpIHt9XG4iICsKKwkJ
CSJ9XG4iCisJCX0pOworfQogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVz
dHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jl
c3Npb24vTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50
ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVn
cmVzc2lvbi9MYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YQppbmRleCAyMWM1Y2JiLi4zM2E4ZDUz
IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3Jn
L2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9MYW1iZGFFeHByZXNz
aW9uc1Rlc3QuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9MYW1iZGFF
eHByZXNzaW9uc1Rlc3QuamF2YQpAQCAtMjUsNyArMjUsNyBAQCBpbXBvcnQganVuaXQuZnJhbWV3
b3JrLlRlc3Q7CiBwdWJsaWMgY2xhc3MgTGFtYmRhRXhwcmVzc2lvbnNUZXN0IGV4dGVuZHMgQWJz
dHJhY3RSZWdyZXNzaW9uVGVzdCB7CiAKIHN0YXRpYyB7Ci0vLwlURVNUU19OQU1FUyA9IG5ldyBT
dHJpbmdbXSB7ICJ0ZXN0UmVmZXJlbmNlRXhwcmVzc2lvbkluZmVyZW5jZTNhIn07CisvLwlURVNU
U19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7ICJ0ZXN0UmVmZXJlbmNlRXhwcmVzc2lvbkluZmVyZW5j
ZTEifTsKIC8vCVRFU1RTX05VTUJFUlMgPSBuZXcgaW50W10geyA1MCB9OwogLy8JVEVTVFNfUkFO
R0UgPSBuZXcgaW50W10geyAxMSwgLTEgfTsKIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21w
aWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OZWdhdGl2ZUxhbWJkYUV4cHJlc3Npb25zVGVzdC5q
YXZhCmluZGV4IGM2YWY3MDUuLmQyMDE1YWYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxl
ci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKKysrIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVnYXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rlc3Qu
amF2YQpAQCAtNTc0NiwxMyArNTc0NiwxMSBAQCBwdWJsaWMgdm9pZCB0ZXN0NDAxOTM5YSgpIHsK
IAkJCQkiLS0tLS0tLS0tLVxuIiArIAogCQkJCSIyLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUg
OClcbiIgKyAKIAkJCQkiCWZvbygoKS0+eyBpZiAoMSA9PSAyKSB0aHJvdyBuZXcgUnVudGltZUV4
Y2VwdGlvbigpOyB9KTtcbiIgKyAKLQkJCQkiCSAgICBeXl5eXG4iICsgCi0JCQkJIlRoaXMgbWV0
aG9kIG11c3QgcmV0dXJuIGEgcmVzdWx0IG9mIHR5cGUgaW50XG4iICsgCi0JCQkJIi0tLS0tLS0t
LS1cbiIgKyAKLQkJCQkiMy4gV0FSTklORyBpbiBYLmphdmEgKGF0IGxpbmUgOClcbiIgKyAKLQkJ
CQkiCWZvbygoKS0+eyBpZiAoMSA9PSAyKSB0aHJvdyBuZXcgUnVudGltZUV4Y2VwdGlvbigpOyB9
KTtcbiIgKyAKLQkJCQkiCSAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXlxuIiArIAotCQkJCSJEZWFkIGNvZGVcbiIgKyAKKwkJCQkiCV5eXlxuIiArIAor
CQkJCSJUaGUgbWV0aG9kIGZvbyhJKSBpbiB0aGUgdHlwZSBYIGlzIG5vdCBhcHBsaWNhYmxlIGZv
ciB0aGUgYXJndW1lbnRzICgoKSAtPiB7XG4iICsgCisJCQkJIiAgaWYgKCgxID09IDIpKVxuIiAr
IAorCQkJCSIgICAgICB0aHJvdyBuZXcgUnVudGltZUV4Y2VwdGlvbigpO1xuIiArIAorCQkJCSJ9
KVxuIiArIAogCQkJCSItLS0tLS0tLS0tXG4iKTsKIH0KIC8vIGh0dHBzOi8vYnVncy5lY2xpcHNl
Lm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00MDE5MzksIFsxLjhdW2NvbXBpbGVyXSBJbmNvcnJl
Y3Qgc2hhcGUgYW5hbHlzaXMgbGVhZHMgdG8gbWV0aG9kIHJlc29sdXRpb24gZmFpbHVyZSAuCmRp
ZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvYXN0L0FTVE5vZGUuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQVNUTm9kZS5q
YXZhCmluZGV4IGZjODFmOGQuLjdhN2U1NjMgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQVNUTm9k
ZS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvQVNUTm9kZS5qYXZhCkBAIC00NSw3ICs0NSw2IEBAIGlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkJpbmRpbmc7CiBp
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5CbG9ja1Njb3Bl
OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuRXh0cmFD
b21waWxlck1vZGlmaWVyczsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIubG9va3VwLkZpZWxkQmluZGluZzsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwu
Y29tcGlsZXIubG9va3VwLkluZmVyZW5jZUNvbnRleHQxODsKIGltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkludm9jYXRpb25TaXRlOwogaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuTG9jYWxWYXJpYWJsZUJpbmRpbmc7
CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5NZXRob2RC
aW5kaW5nOwpAQCAtNjYzLDEwICs2NjIsMjggQEAgcHVibGljIGFic3RyYWN0IGNsYXNzIEFTVE5v
ZGUgaW1wbGVtZW50cyBUeXBlQ29uc3RhbnRzLCBUeXBlSWRzIHsKIAogCQkJCWlmICh2YXJpYWJs
ZUFyaXR5ICYmIGkgPj0gcGFyYW1ldGVyc0xlbmd0aCAtIDEpCiAJCQkJCWFyZ3VtZW50LnRhZ0Fz
RWxsaXBzaXNBcmd1bWVudCgpOwotCQkJCXVwZGF0ZWRBcmd1bWVudFR5cGUgPSB1cGRhdGVFeHBy
ZXNzaW9uKHNjb3BlLCBhcmd1bWVudCwgYXJndW1lbnRUeXBlc1tpXSwgcGFyYW1ldGVyVHlwZSwg
aW52b2NhdGlvbi5oYXNJbmZlcmVuY2VGaW5pc2hlZCgpKTsKLQkJCQlpZiAodXBkYXRlZEFyZ3Vt
ZW50VHlwZSA9PSBQT0xZX0VSUk9SKSAvLyRJREVOVElUWS1DT01QQVJJU09OJAorCQkJCWlmIChh
cmd1bWVudCBpbnN0YW5jZW9mIExhbWJkYUV4cHJlc3Npb24gJiYgKChMYW1iZGFFeHByZXNzaW9u
KSBhcmd1bWVudCkuaGFzRXJyb3JzKCkpCiAJCQkJCWNvbnRpbnVlOyAvLyBkb24ndCB1cGRhdGUg
aWYgaW5uZXIgcG9seSBoYXMgZXJyb3JzCi0JCQkJaWYgKHByb2JsZW1SZWFzb24gIT0gUHJvYmxl
bVJlYXNvbnMuQW1iaWd1b3VzIAkvLyBwcmVzZXJ2ZSB0aGlzIGVycm9yCisKKwkJCQlpZiAoYXJn
dW1lbnQgaW5zdGFuY2VvZiBJbnZvY2F0aW9uCisJCQkJCQkmJiAoKEludm9jYXRpb24pYXJndW1l
bnQpLmJpbmRpbmcoKSBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGlu
ZykgeworCQkJCQlhcmd1bWVudC5zZXRFeHBlY3RlZFR5cGUocGFyYW1ldGVyVHlwZSk7CisJCQkJ
CUludm9jYXRpb24gaW5uZXJJbnZvY2F0aW9uID0gKEludm9jYXRpb24pIGFyZ3VtZW50OworCQkJ
CQlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgcGFyYW1ldGVyaXplZE1ldGhvZCA9
IChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIGlubmVySW52b2NhdGlvbi5iaW5k
aW5nKCk7CisJCQkJCU1ldGhvZEJpbmRpbmcgaW1wcm92ZWQgPSBwYXJhbWV0ZXJpemVkTWV0aG9k
LmluZmVySW52b2NhdGlvblR5cGUoaW5uZXJJbnZvY2F0aW9uLCBhcmd1bWVudFR5cGVzKTsKKwkJ
CQkJaWYgKGltcHJvdmVkICE9IG51bGwgJiYgaW1wcm92ZWQuaXNWYWxpZEJpbmRpbmcoKSkgewor
CQkJCQkJaW5uZXJJbnZvY2F0aW9uLnVwZGF0ZUJpbmRpbmdzKGltcHJvdmVkKTsKKwkJCQkJCXVw
ZGF0ZWRBcmd1bWVudFR5cGUgPSBpbXByb3ZlZC5yZXR1cm5UeXBlOworCQkJCQl9CisJCQkJfSBl
bHNlIGlmICgoaW52b2NhdGlvbi5pbmZlcmVuY2VLaW5kKCkgPT0gMCB8fCBpbnZvY2F0aW9uLmdl
dEV4cHJlc3Npb25Db250ZXh0KCkgPT0gRXhwcmVzc2lvbkNvbnRleHQuVkFOSUxMQV9DT05URVhU
KQorCQkJCQkJJiYgYXJndW1lbnQuaXNQb2x5RXhwcmVzc2lvbigpKSAKKwkJCQl7CisJCQkJCWFy
Z3VtZW50LnNldEV4cGVjdGVkVHlwZShwYXJhbWV0ZXJUeXBlKTsKKwkJCQkJdXBkYXRlZEFyZ3Vt
ZW50VHlwZSA9IGFyZ3VtZW50LnJlc29sdmVUeXBlKHNjb3BlKTsKKwkJCQl9IGVsc2UgeworCQkJ
CQl1cGRhdGVkQXJndW1lbnRUeXBlID0gYXJndW1lbnQucmVzb2x2ZWRUeXBlOworCQkJCX0KKwkJ
CQlpZiAocHJvYmxlbVJlYXNvbiA9PSBQcm9ibGVtUmVhc29ucy5Ob0Vycm9yIC8vIHByZXNlcnZl
IGVycm9ycwogCQkJCQkJJiYgdXBkYXRlZEFyZ3VtZW50VHlwZSAhPSBudWxsCQkJCQkvLyBkbyB3
ZSBoYXZlIGEgcmVsZXZhbnQgdXBkYXRlPyAuLi4KIAkJCQkJCSYmICEodXBkYXRlZEFyZ3VtZW50
VHlwZSBpbnN0YW5jZW9mIFBvbHlUeXBlQmluZGluZykKIAkJCQkJCSYmIFR5cGVCaW5kaW5nLm5v
dEVxdWFscyh1cGRhdGVkQXJndW1lbnRUeXBlLCBhcmd1bWVudFR5cGVzW2ldKSkKQEAgLTY4MSw4
MyArNjk4LDYgQEAgcHVibGljIGFic3RyYWN0IGNsYXNzIEFTVE5vZGUgaW1wbGVtZW50cyBUeXBl
Q29uc3RhbnRzLCBUeXBlSWRzIHsKIAkJcmV0dXJuIGhhc1VwZGF0ZWRJbm5lcjsKIAl9CiAKLQkv
LyBzcGVjaWFsIGluc3RhbmNlIHVzZWQgdG8gc2lnbmFsIHRoYXQgYW4gaW5uZXIgcG9seSBleHBy
ZXNzaW9uIGhhZCBlcnJvcnMsIHRvIGNhbmNlbCBhbm90aGVyIG1ldGhvZCBsb29rdXAgb2YgdGhl
IG91dGVyIGJhc2VkIG9uIGJvZ3VzIHR5cGUgaW5mb3JtYXRpb24KLQlzdGF0aWMgZmluYWwgVHlw
ZUJpbmRpbmcgUE9MWV9FUlJPUiA9IG5ldyBQb2x5VHlwZUJpbmRpbmcobnVsbCk7Ci0KLQlwcml2
YXRlIHN0YXRpYyBUeXBlQmluZGluZyB1cGRhdGVFeHByZXNzaW9uKEJsb2NrU2NvcGUgc2NvcGUs
IEV4cHJlc3Npb24gZXhwcmVzc2lvbiwgVHlwZUJpbmRpbmcgYXJndW1lbnRUeXBlLCBUeXBlQmlu
ZGluZyBwYXJhbWV0ZXJUeXBlLCBib29sZWFuIGluZmVyZW5jZUZpbmlzaGVkKSB7Ci0JCVR5cGVC
aW5kaW5nIHVwZGF0ZWRBcmd1bWVudFR5cGUgPSBudWxsOwotCQlib29sZWFuIGlzUG9seUFsbG9j
ID0gZmFsc2U7Ci0JCWlmIChleHByZXNzaW9uIGluc3RhbmNlb2YgSW52b2NhdGlvbikgewotCQkJ
SW52b2NhdGlvbiBpbnZvY2F0aW9uID0gKEludm9jYXRpb24pZXhwcmVzc2lvbjsKLQkJCXVwZGF0
ZWRBcmd1bWVudFR5cGUgPSB1cGRhdGVJbnZvY2F0aW9uKGludm9jYXRpb24sIHBhcmFtZXRlclR5
cGUpOwotCQkJaWYgKHVwZGF0ZWRBcmd1bWVudFR5cGUgPT0gbnVsbCAmJiBpbnZvY2F0aW9uLmlu
ZmVyZW5jZUtpbmQoKSAhPSAwICYmICFpbnZvY2F0aW9uLmhhc0luZmVyZW5jZUZpbmlzaGVkKCkp
Ci0JCQkJaXNQb2x5QWxsb2MgPSB0cnVlOwotCQl9IGVsc2UgaWYgKGV4cHJlc3Npb24gaW5zdGFu
Y2VvZiBDb25kaXRpb25hbEV4cHJlc3Npb24pIHsKLQkJCXVwZGF0ZWRBcmd1bWVudFR5cGUgPSB1
cGRhdGVDb25kaXRpb25FeHByZXNpb24oc2NvcGUsICgoQ29uZGl0aW9uYWxFeHByZXNzaW9uKSBl
eHByZXNzaW9uKSwgYXJndW1lbnRUeXBlLCBwYXJhbWV0ZXJUeXBlLCBpbmZlcmVuY2VGaW5pc2hl
ZCk7Ci0JCX0KLQotCQlpZiAodXBkYXRlZEFyZ3VtZW50VHlwZSA9PSBudWxsICYmIChpc1BvbHlB
bGxvYyB8fCBhcmd1bWVudFR5cGUgaW5zdGFuY2VvZiBQb2x5VHlwZUJpbmRpbmcpKSB7Ci0JCQl1
cGRhdGVkQXJndW1lbnRUeXBlID0gdXBkYXRlT3RoZXJQb2x5RXhwcmVzc2lvbihzY29wZSwgZXhw
cmVzc2lvbiwgcGFyYW1ldGVyVHlwZSwgaW5mZXJlbmNlRmluaXNoZWQpOwotCQl9Ci0JCXJldHVy
biB1cGRhdGVkQXJndW1lbnRUeXBlOwotCX0KLQotCXByaXZhdGUgc3RhdGljIFR5cGVCaW5kaW5n
IHVwZGF0ZUNvbmRpdGlvbkV4cHJlc2lvbihCbG9ja1Njb3BlIHNjb3BlLCBDb25kaXRpb25hbEV4
cHJlc3Npb24gZXhwcmVzc2lvbiwgVHlwZUJpbmRpbmcgY3VycmVudFR5cGUsIFR5cGVCaW5kaW5n
IHRhcmdldFR5cGUsIGJvb2xlYW4gaW5mZXJlbmNlRmluaXNoZWQpIHsKLQkJVHlwZUJpbmRpbmcg
dHlwZSA9IHVwZGF0ZUV4cHJlc3Npb24oc2NvcGUsIGV4cHJlc3Npb24udmFsdWVJZlRydWUsIGN1
cnJlbnRUeXBlLCB0YXJnZXRUeXBlLCBpbmZlcmVuY2VGaW5pc2hlZCk7Ci0JCWJvb2xlYW4gZXJy
b3JTZWVuID0gKHR5cGUgPT0gUE9MWV9FUlJPUik7IC8vJElERU5USVRZLUNPTVBBUklTT04kCi0J
CWJvb2xlYW4gaW5jb21wYXRpYmlsaXR5U2VlbiA9ICFlcnJvclNlZW4gJiYgdHlwZSAhPSBudWxs
ICYmICF0eXBlLmlzQ29tcGF0aWJsZVdpdGgodGFyZ2V0VHlwZSk7Ci0JCXR5cGUgPSB1cGRhdGVF
eHByZXNzaW9uKHNjb3BlLCBleHByZXNzaW9uLnZhbHVlSWZGYWxzZSwgY3VycmVudFR5cGUsIHRh
cmdldFR5cGUsIGluZmVyZW5jZUZpbmlzaGVkKTsKLQkJaWYgKGVycm9yU2VlbiB8fCB0eXBlID09
IFBPTFlfRVJST1IpIC8vJElERU5USVRZLUNPTVBBUklTT04kCi0JCQlyZXR1cm4gUE9MWV9FUlJP
UjsKLQkJaWYgKGluY29tcGF0aWJpbGl0eVNlZW4gfHwgdHlwZSAhPSBudWxsICYmICF0eXBlLmlz
Q29tcGF0aWJsZVdpdGgodGFyZ2V0VHlwZSkpCi0JCQlyZXR1cm4gbnVsbDsKLQkJcmV0dXJuIGV4
cHJlc3Npb24ucmVzb2x2ZWRUeXBlID0gdGFyZ2V0VHlwZTsKLQl9Ci0KLQlwcml2YXRlIHN0YXRp
YyBUeXBlQmluZGluZyB1cGRhdGVJbnZvY2F0aW9uKEludm9jYXRpb24gaW5uZXJJbnZvY2F0aW9u
LCBUeXBlQmluZGluZyB0YXJnZXRUeXBlKSB7Ci0JCWJvb2xlYW4gaW52b2NhdGlvbkZpbmlzaGVk
ID0gZmFsc2U7Ci0JCU1ldGhvZEJpbmRpbmcgdXBkYXRlZE1ldGhvZCA9IGlubmVySW52b2NhdGlv
bi5iaW5kaW5nKCk7Ci0JCWlmIChpbm5lckludm9jYXRpb24uaGFzSW5mZXJlbmNlRmluaXNoZWQo
KSAmJiB1cGRhdGVkTWV0aG9kICE9IG51bGwpIHsKLQkJCS8vIG91dGVyIGludm9jYXRpb24gYWxy
ZWFkeSBpbmNsdWRlZCBpbnZvY2F0aW9uIHR5cGUgaW5mZXJlbmNlIGZvciB0aGlzIGlubmVyCi0J
CQlpbnZvY2F0aW9uRmluaXNoZWQgPSB0cnVlOwotCQl9IGVsc2UgewotCQkJLy8gSW5uZXIgSW5m
ZXJlbmNlPwotCQkJSW5mZXJlbmNlQ29udGV4dDE4IGluZkN0eDE4ID0gaW5uZXJJbnZvY2F0aW9u
LmluZmVyZW5jZUNvbnRleHQoKTsKLQkJCWlmIChpbmZDdHgxOCAhPSBudWxsKSB7Ci0JCQkJLy8g
UHJldmlvdXMgdGltZSBhcm91bmQgd2Ugb25seSBwZXJmb3JtZWQgSW52b2NhdGlvbiBBcHBsaWNh
YmlsaXR5IEluZmVyZW5jZSwgZG8gdGhlIHJlc3Qgbm93OgotCQkJCXVwZGF0ZWRNZXRob2QgPSBp
bmZDdHgxOC5nZXRJbnZvY2F0aW9uVHlwZUluZmVyZW5jZVNvbHV0aW9uKGlubmVySW52b2NhdGlv
biwgdGFyZ2V0VHlwZSk7Ci0JCQkJaWYgKHVwZGF0ZWRNZXRob2QgIT0gbnVsbCkgewotCQkJCQlp
bm5lckludm9jYXRpb24udXBkYXRlQmluZGluZ3ModXBkYXRlZE1ldGhvZCk7Ci0JCQkJCWludm9j
YXRpb25GaW5pc2hlZCA9IHRydWU7Ci0JCQkJfQotCQkJfQotCQl9Ci0JCWlmIChpbnZvY2F0aW9u
RmluaXNoZWQpIHsKLQkJCWlmICh1cGRhdGVkTWV0aG9kLmlzQ29uc3RydWN0b3IoKSkKLQkJCQly
ZXR1cm4gdXBkYXRlZE1ldGhvZC5kZWNsYXJpbmdDbGFzczsKLQkJCWVsc2UKLQkJCQlyZXR1cm4g
dXBkYXRlZE1ldGhvZC5yZXR1cm5UeXBlOwotCQl9Ci0JCXJldHVybiBudWxsOwotCX0KLQotCXBy
b3RlY3RlZCBzdGF0aWMgVHlwZUJpbmRpbmcgdXBkYXRlT3RoZXJQb2x5RXhwcmVzc2lvbihCbG9j
a1Njb3BlIHNjb3BlLCBFeHByZXNzaW9uIGV4cHJlc3Npb24sIFR5cGVCaW5kaW5nIHBhcmFtZXRl
clR5cGUsIGJvb2xlYW4gaW5mZXJlbmNlRmluaXNoZWQpIHsKLQkJVHlwZUJpbmRpbmcgdXBkYXRl
ZEFyZ3VtZW50VHlwZTsKLQkJZXhwcmVzc2lvbi5zZXRFeHByZXNzaW9uQ29udGV4dChwYXJhbWV0
ZXJUeXBlICE9IG51bGwgPyBFeHByZXNzaW9uQ29udGV4dC5JTlZPQ0FUSU9OX0NPTlRFWFQ6IEV4
cHJlc3Npb25Db250ZXh0LkFTU0lHTk1FTlRfQ09OVEVYVCk7IC8vIGZvcmNlIHRoZSBlcnJvcnMg
dG8gc3VyZmFjZS4KLQkJLy8gcGVyZm9ybSB0aGUgbGV2ZWwgb2YgcmVzb2x2aW5nIHN1aXRhYmxl
IGZvciB0aGUgc3RhdGUgb2YgYWZmYWlycyBhdCB0aGUgZW5jbG9zaW5nIGNvbnRleHQ6Ci0JCWlm
IChpbmZlcmVuY2VGaW5pc2hlZCkgewotCQkJZXhwcmVzc2lvbi5zZXRFeHBlY3RlZFR5cGUocGFy
YW1ldGVyVHlwZSk7Ci0JCQl1cGRhdGVkQXJndW1lbnRUeXBlID0gZXhwcmVzc2lvbi5yZXNvbHZl
VHlwZShzY29wZSk7Ci0JCX0gZWxzZSB7Ci0JCQl1cGRhdGVkQXJndW1lbnRUeXBlID0gZXhwcmVz
c2lvbi5yZXNvbHZlVGVudGF0aXZlbHkoc2NvcGUsIHBhcmFtZXRlclR5cGUpOwotCQl9Ci0JCWlm
ICh1cGRhdGVkQXJndW1lbnRUeXBlID09IG51bGwgfHwgIXVwZGF0ZWRBcmd1bWVudFR5cGUuaXNW
YWxpZEJpbmRpbmcoKSkKLQkJCXJldHVybiBQT0xZX0VSUk9SOwotCQlpZiAoZXhwcmVzc2lvbiBp
bnN0YW5jZW9mIExhbWJkYUV4cHJlc3Npb24gJiYgKChMYW1iZGFFeHByZXNzaW9uKSBleHByZXNz
aW9uKS5oYXNFcnJvcnMoKSkKLQkJCXJldHVybiBQT0xZX0VSUk9SOwotCQlyZXR1cm4gdXBkYXRl
ZEFyZ3VtZW50VHlwZTsKLQl9Ci0KIAlwdWJsaWMgc3RhdGljIHZvaWQgcmVzb2x2ZUFubm90YXRp
b25zKEJsb2NrU2NvcGUgc2NvcGUsIEFubm90YXRpb25bXSBzb3VyY2VBbm5vdGF0aW9ucywgQmlu
ZGluZyByZWNpcGllbnQpIHsKIAkJcmVzb2x2ZUFubm90YXRpb25zKHNjb3BlLCBzb3VyY2VBbm5v
dGF0aW9ucywgcmVjaXBpZW50LCBmYWxzZSk7CiAJfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9B
bGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BbGxvY2F0aW9uRXhwcmVzc2lv
bi5qYXZhCmluZGV4IGQ3YzFmY2QuLjczZGI4ZTYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWxs
b2NhdGlvbkV4cHJlc3Npb24uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FsbG9jYXRpb25FeHByZXNz
aW9uLmphdmEKQEAgLTYzNCwxOCArNjM0LDEyIEBAIHB1YmxpYyBFeHByZXNzaW9uW10gYXJndW1l
bnRzKCkgewogCXJldHVybiB0aGlzLmFyZ3VtZW50czsKIH0KIHB1YmxpYyBpbnQgaW5mZXJlbmNl
S2luZCgpIHsKLQlyZXR1cm4gKHRoaXMuaW5mZXJlbmNlS2luZCAmIEluZmVyZW5jZUNvbnRleHQx
OC5JTkZFUkVOQ0VfS0lORF9NQVNLKTsKKwlyZXR1cm4gdGhpcy5pbmZlcmVuY2VLaW5kOwogfQog
cHVibGljIHZvaWQgc2V0SW5mZXJlbmNlS2luZChpbnQgY2hlY2tLaW5kKSB7CiAJdGhpcy5pbmZl
cmVuY2VLaW5kID0gY2hlY2tLaW5kOwogfQotcHVibGljIHZvaWQgbWFya0luZmVyZW5jZUZpbmlz
aGVkKCkgewotCXRoaXMuaW5mZXJlbmNlS2luZCB8PSBJbmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tf
RklOSVNIRUQ7Ci19Ci1wdWJsaWMgYm9vbGVhbiBoYXNJbmZlcmVuY2VGaW5pc2hlZCgpIHsKLQly
ZXR1cm4gdGhpcy5pbmZlcmVuY2VLaW5kID09IDAgLy8gb25seSByZWxldmFudCBpZiBpbmZlcmVu
Y2UgaGFzIGJlZW4gc3RhcnRlZAotCQkJfHwgKHRoaXMuaW5mZXJlbmNlS2luZCAmIEluZmVyZW5j
ZUNvbnRleHQxOC5DSEVDS19GSU5JU0hFRCkgIT0gMDsKLX0KKwogcHVibGljIFR5cGVCaW5kaW5n
IHVwZGF0ZUJpbmRpbmdzKE1ldGhvZEJpbmRpbmcgdXBkYXRlZEJpbmRpbmcpIHsKIAl0aGlzLmJp
bmRpbmcgPSB1cGRhdGVkQmluZGluZzsKIAlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGUgPSB1cGRh
dGVkQmluZGluZy5kZWNsYXJpbmdDbGFzczsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRXhwbGlj
aXRDb25zdHJ1Y3RvckNhbGwuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRXhwbGljaXRDb25zdHJ1Y3RvckNh
bGwuamF2YQppbmRleCA0ODY4NWE0Li4xMTFkMjAwIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0V4
cGxpY2l0Q29uc3RydWN0b3JDYWxsLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9FeHBsaWNpdENvbnN0
cnVjdG9yQ2FsbC5qYXZhCkBAIC00OTYsMTggKzQ5NiwxMSBAQCBwdWJsaWMgY2xhc3MgRXhwbGlj
aXRDb25zdHJ1Y3RvckNhbGwgZXh0ZW5kcyBTdGF0ZW1lbnQgaW1wbGVtZW50cyBJbnZvY2F0aW9u
LCBFeAogCQlyZXR1cm4gdGhpcy5pbmZlcmVuY2VDb250ZXh0OwogCX0KIAlwdWJsaWMgaW50IGlu
ZmVyZW5jZUtpbmQoKSB7Ci0JCXJldHVybiAodGhpcy5pbmZlcmVuY2VLaW5kICYgSW5mZXJlbmNl
Q29udGV4dDE4LklORkVSRU5DRV9LSU5EX01BU0spOworCQlyZXR1cm4gdGhpcy5pbmZlcmVuY2VL
aW5kOwogCX0KIAlwdWJsaWMgdm9pZCBzZXRJbmZlcmVuY2VLaW5kKGludCBjaGVja0tpbmQpIHsK
IAkJdGhpcy5pbmZlcmVuY2VLaW5kID0gY2hlY2tLaW5kOwogCX0KLQlwdWJsaWMgdm9pZCBtYXJr
SW5mZXJlbmNlRmluaXNoZWQoKSB7Ci0JCXRoaXMuaW5mZXJlbmNlS2luZCB8PSBJbmZlcmVuY2VD
b250ZXh0MTguQ0hFQ0tfRklOSVNIRUQ7Ci0JfQotCXB1YmxpYyBib29sZWFuIGhhc0luZmVyZW5j
ZUZpbmlzaGVkKCkgewotCQlyZXR1cm4gdGhpcy5pbmZlcmVuY2VLaW5kID09IDAgLy8gb25seSBy
ZWxldmFudCBpZiBpbmZlcmVuY2UgaGFzIGJlZW4gc3RhcnRlZAotCQkJCXx8ICh0aGlzLmluZmVy
ZW5jZUtpbmQgJiBJbmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tfRklOSVNIRUQpICE9IDA7Ci0JfQog
CXB1YmxpYyBUeXBlQmluZGluZyB1cGRhdGVCaW5kaW5ncyhNZXRob2RCaW5kaW5nIHVwZGF0ZWRC
aW5kaW5nKSB7CiAJCXRoaXMuYmluZGluZyA9IHVwZGF0ZWRCaW5kaW5nOwogCQlyZXR1cm4gVHlw
ZUJpbmRpbmcuVk9JRDsgLy8gbm90IGFuIGV4cHJlc3Npb24KZGlmZiAtLWdpdCBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9h
c3QvRnVuY3Rpb25hbEV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRnVuY3Rpb25hbEV4cHJl
c3Npb24uamF2YQppbmRleCBmMjM3NGVmLi5lMWM1N2M5IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0
L0Z1bmN0aW9uYWxFeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9GdW5jdGlvbmFsRXhw
cmVzc2lvbi5qYXZhCkBAIC0zNiw3ICszNiw3IEBAIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50
ZXJuYWwuY29tcGlsZXIubG9va3VwLlNjb3BlOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRl
cm5hbC5jb21waWxlci5sb29rdXAuVHlwZUJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5UeXBlQmluZGluZ1Zpc2l0b3I7CiAKLXB1YmxpYyBh
YnN0cmFjdCBjbGFzcyBGdW5jdGlvbmFsRXhwcmVzc2lvbiBleHRlbmRzIEV4cHJlc3Npb24gaW1w
bGVtZW50cyBQb2x5RXhwcmVzc2lvbiB7CitwdWJsaWMgYWJzdHJhY3QgY2xhc3MgRnVuY3Rpb25h
bEV4cHJlc3Npb24gZXh0ZW5kcyBFeHByZXNzaW9uIHsKIAkKIAlUeXBlQmluZGluZyBleHBlY3Rl
ZFR5cGU7CiAJYm9vbGVhbiBleHBlY3RlZElzRmluYWxUYXJnZXRUeXBlID0gZmFsc2U7IC8vIGZs
aXAgdG8gdHJ1ZSBvbmNlIHRoZSBleHByZXNzaW9uIGNvbnRleHQgaGFzIGRldGVybWluZWQgdGhl
IGZpbmFsIHRhcmdldCB0eXBlIGZvciB0aGlzIGV4cHJlc3Npb24KQEAgLTUxLDcgKzUxLDYgQEAg
cHVibGljIGFic3RyYWN0IGNsYXNzIEZ1bmN0aW9uYWxFeHByZXNzaW9uIGV4dGVuZHMgRXhwcmVz
c2lvbiBpbXBsZW1lbnRzIFBvbHlFeHAKIAlwdWJsaWMgQmxvY2tTY29wZSBlbmNsb3NpbmdTY29w
ZTsKIAlwcm90ZWN0ZWQgYm9vbGVhbiBlbGxpcHNpc0FyZ3VtZW50OwogCXByb3RlY3RlZCBzdGF0
aWMgSUVycm9ySGFuZGxpbmdQb2xpY3kgc2lsZW50RXJyb3JIYW5kbGluZ1BvbGljeSA9IERlZmF1
bHRFcnJvckhhbmRsaW5nUG9saWNpZXMuaWdub3JlQWxsUHJvYmxlbXMoKTsKLQlwcm90ZWN0ZWQg
Ym9vbGVhbiBoYXNJbmZlcmVuY2VGaW5pc2hlZCA9IGZhbHNlOwogCiAJcHVibGljIEZ1bmN0aW9u
YWxFeHByZXNzaW9uKENvbXBpbGF0aW9uUmVzdWx0IGNvbXBpbGF0aW9uUmVzdWx0KSB7CiAJCXRo
aXMuY29tcGlsYXRpb25SZXN1bHQgPSBjb21waWxhdGlvblJlc3VsdDsKQEAgLTg5LDE0ICs4OCw2
IEBAIHB1YmxpYyBhYnN0cmFjdCBjbGFzcyBGdW5jdGlvbmFsRXhwcmVzc2lvbiBleHRlbmRzIEV4
cHJlc3Npb24gaW1wbGVtZW50cyBQb2x5RXhwCiAJcHVibGljIGJvb2xlYW4gaXNQb2x5RXhwcmVz
c2lvbigpIHsKIAkJcmV0dXJuIHRydWU7IC8vIGFsd2F5cyBhcyBwZXIgaW50cm9kdWN0aW9uIG9m
IHBhcnQgRCwgSlNSIDMzNQogCX0KLQkKLQlwdWJsaWMgdm9pZCBtYXJrSW5mZXJlbmNlRmluaXNo
ZWQoKSB7Ci0JCXRoaXMuaGFzSW5mZXJlbmNlRmluaXNoZWQgPSB0cnVlOwotCX0KLQkKLQlwdWJs
aWMgYm9vbGVhbiBoYXNJbmZlcmVuY2VGaW5pc2hlZCgpIHsKLQkJcmV0dXJuIHRoaXMuaGFzSW5m
ZXJlbmNlRmluaXNoZWQ7Ci0JfQogCiAJcHVibGljIFR5cGVCaW5kaW5nIGludm9jYXRpb25UYXJn
ZXRUeXBlKCkgewogCQlpZiAodGhpcy5leHBlY3RlZFR5cGUgPT0gbnVsbCkgcmV0dXJuIG51bGw7
CkBAIC0xNTEsMTkgKzE0MiwxNSBAQCBwdWJsaWMgYWJzdHJhY3QgY2xhc3MgRnVuY3Rpb25hbEV4
cHJlc3Npb24gZXh0ZW5kcyBFeHByZXNzaW9uIGltcGxlbWVudHMgUG9seUV4cAogCiAJLyoqIER1
cmluZyBpbmZlcmVuY2U6IFRyeSB0byBmaW5kIGFuIGFwcGxpY2FibGUgbWV0aG9kIGJpbmRpbmcg
d2l0aG91dCBjYXVzaW5nIHVuZGVzaXJlZCBzaWRlLWVmZmVjdHMuICovCiAJcHVibGljIE1ldGhv
ZEJpbmRpbmcgZmluZENvbXBpbGVUaW1lTWV0aG9kVGFyZ2V0aW5nKFR5cGVCaW5kaW5nIHRhcmdl
dFR5cGUsIFNjb3BlIHNjb3BlKSB7Ci0JCWlmICh0aGlzLmhhc0luZmVyZW5jZUZpbmlzaGVkKQot
CQkJcmV0dXJuIHRoaXMuYmluZGluZzsKIAkJcmV0dXJuIChNZXRob2RCaW5kaW5nKWludGVybmFs
UmVzb2x2ZVRlbnRhdGl2ZWx5KHRhcmdldFR5cGUsIHNjb3BlKVswXTsKIAl9CiAKIAkvKiogRHVy
aW5nIGluZmVyZW5jZTogVHJ5IHRvIHJlc29sdmUgdGhlIHR5cGUgb2YgdGhpcyBleHByZXNzaW9u
IHdpdGhvdXQgY2F1c2luZyB1bmRlc2lyZWQgc2lkZS1lZmZlY3RzLiAqLwogCXB1YmxpYyBUeXBl
QmluZGluZyByZXNvbHZlVGVudGF0aXZlbHkoQmxvY2tTY29wZSBzY29wZSwgVHlwZUJpbmRpbmcg
dGFyZ2V0VHlwZSkgewotCQlpZiAodGhpcy5oYXNJbmZlcmVuY2VGaW5pc2hlZCkKLQkJCXJldHVy
biB0aGlzLnJlc29sdmVkVHlwZTsKIAkJcmV0dXJuIChUeXBlQmluZGluZylpbnRlcm5hbFJlc29s
dmVUZW50YXRpdmVseSh0YXJnZXRUeXBlLCBzY29wZSlbMV07CiAJfQogCi0JcHJpdmF0ZSBPYmpl
Y3RbXSBpbnRlcm5hbFJlc29sdmVUZW50YXRpdmVseShUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBT
Y29wZSBzY29wZSkgeyAvLyBUT0RPOiBjb252ZXJ0IHJldHVybiB0byBQYWlyPE1ldGhvZEJpbmRp
bmcsVHlwZUJpbmRpbmc+CisJT2JqZWN0W10gaW50ZXJuYWxSZXNvbHZlVGVudGF0aXZlbHkoVHlw
ZUJpbmRpbmcgdGFyZ2V0VHlwZSwgU2NvcGUgc2NvcGUpIHsgLy8gVE9ETzogY29udmVydCByZXR1
cm4gdG8gUGFpcjxNZXRob2RCaW5kaW5nLFR5cGVCaW5kaW5nPgogCQkvLyBGSVhNRTogY291bGQg
ZW5jbG9zaW5nU2NvcGUgc3RpbGwgYmUgbnVsbCBoZXJlPz8KIAkJSUVycm9ySGFuZGxpbmdQb2xp
Y3kgb2xkUG9saWN5ID0gdGhpcy5lbmNsb3NpbmdTY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5zd2l0
Y2hFcnJvckhhbmRsaW5nUG9saWN5KHNpbGVudEVycm9ySGFuZGxpbmdQb2xpY3kpOwogCQlFeHBy
ZXNzaW9uQ29udGV4dCBwcmV2aW91c0NvbnRleHQgPSB0aGlzLmV4cHJlc3Npb25Db250ZXh0OwpA
QCAtMTgwLDcgKzE2Nyw2IEBAIHB1YmxpYyBhYnN0cmFjdCBjbGFzcyBGdW5jdGlvbmFsRXhwcmVz
c2lvbiBleHRlbmRzIEV4cHJlc3Npb24gaW1wbGVtZW50cyBQb2x5RXhwCiAJCQkvLyByZW1vdmUg
KmFueSByZWxldmFudCogdHJhY2VzIG9mIHRoaXMgJ2lub2ZmaWNpYWwnIHJlc29sdmluZzoKIAkJ
CXRoaXMuYmluZGluZyA9IHByZXZpb3VzQmluZGluZzsKIAkJCXRoaXMuZGVzY3JpcHRvciA9IHBy
ZXZpb3VzRGVzY3JpcHRvcjsKLQkJCXRoaXMuaGFzSW5mZXJlbmNlRmluaXNoZWQgPSBmYWxzZTsK
IAkJCXNldEV4cHJlc3Npb25Db250ZXh0KHByZXZpb3VzQ29udGV4dCk7CiAJCQl0aGlzLmV4cGVj
dGVkVHlwZSA9IG51bGw7IC8vIGRvbid0IGNhbGwgc2V0RXhwZWN0ZWRUeXBlKG51bGwpLCB3b3Vs
ZCBOUEUKIAkJCWNsZWFuVXBBZnRlclRlbnRhdGl2ZVJlc29sdmUoKTsKQEAgLTI3MCw0ICsyNTYs
OSBAQCBwdWJsaWMgYWJzdHJhY3QgY2xhc3MgRnVuY3Rpb25hbEV4cHJlc3Npb24gZXh0ZW5kcyBF
eHByZXNzaW9uIGltcGxlbWVudHMgUG9seUV4cAogCXB1YmxpYyBpbnQgZGlhZ25vc3RpY3NTb3Vy
Y2VFbmQoKSB7CiAJCXJldHVybiB0aGlzLnNvdXJjZUVuZDsKIAl9CisJcHVibGljIFR5cGVCaW5k
aW5nIGxhc3RFeHBlY3RlZFR5cGU7CisKKwlwdWJsaWMgVHlwZUJpbmRpbmcgZ2V0TGFzdEV4cGVj
dGVkVHlwZSgpIHsKKwkJcmV0dXJuIHRoaXMubGFzdEV4cGVjdGVkVHlwZTsKKwl9CiB9CmRpZmYg
LS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYXN0L0ludm9jYXRpb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvSW52b2NhdGlv
bi5qYXZhCmluZGV4IDJkZWMwMTEuLmVmOTk4N2UgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvSW52
b2NhdGlvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvSW52b2NhdGlvbi5qYXZhCkBAIC0xNSw4ICsx
NSw4IEBACiBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3Q7CiAK
IGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkluZmVyZW5j
ZUNvbnRleHQxODsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9v
a3VwLkludm9jYXRpb25TaXRlOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21w
aWxlci5sb29rdXAuTWV0aG9kQmluZGluZzsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJu
YWwuY29tcGlsZXIubG9va3VwLlBvbHlTaXRlOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRl
cm5hbC5jb21waWxlci5sb29rdXAuVHlwZUJpbmRpbmc7CiAKIC8qKgpAQCAtMjYsNyArMjYsNyBA
QCBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5UeXBlQmlu
ZGluZzsKICAqIDxsaT5JbnZvY2F0aW9uIFR5cGUgSW5mZXJlbmNlICgxOC41LjIpLjwvbGk+CiAg
KiA8L3VsPgogICovCi1wdWJsaWMgaW50ZXJmYWNlIEludm9jYXRpb24gZXh0ZW5kcyBJbnZvY2F0
aW9uU2l0ZSwgUG9seUV4cHJlc3Npb24geworcHVibGljIGludGVyZmFjZSBJbnZvY2F0aW9uIGV4
dGVuZHMgUG9seVNpdGUgewogCiAJRXhwcmVzc2lvbltdIGFyZ3VtZW50cygpOwogCkBAIC0zNCwx
NiArMzQsMTAgQEAgcHVibGljIGludGVyZmFjZSBJbnZvY2F0aW9uIGV4dGVuZHMgSW52b2NhdGlv
blNpdGUsIFBvbHlFeHByZXNzaW9uIHsKIAogCUluZmVyZW5jZUNvbnRleHQxOCBpbmZlcmVuY2VD
b250ZXh0KCk7CiAKLQkvKiogU2VlIHtAbGluayAjaW5mZXJlbmNlQ29udGV4dCgpfS4gKi8KKwkv
KiogU2VlIHtAbGluayBQb2x5U2l0ZSNpbmZlcmVuY2VLaW5kKCl9LiAqLwogCXZvaWQgc2V0SW5m
ZXJlbmNlS2luZChpbnQgY2hlY2tLaW5kKTsKIAogCS8qKgotCSAqIEFuc3dlciBvbmUgb2Yge0Bs
aW5rIEluZmVyZW5jZUNvbnRleHQxOCNDSEVDS19TVFJJQ1R9LCB7QGxpbmsgSW5mZXJlbmNlQ29u
dGV4dDE4I0NIRUNLX0xPT1NFfSAKLQkgKiBvciB7QGxpbmsgSW5mZXJlbmNlQ29udGV4dDE4I0NI
RUNLX1ZBUkFSR30sIHRvIHNpZ25hbCB3aGF0IGtpbmQgb2YgaW5mZXJlbmNlIGhhcyBiZWVuIHVz
ZWQuCi0JICovCi0JaW50IGluZmVyZW5jZUtpbmQoKTsKLQotCS8qKgogCSAqIFdoZXJlIHRoZSBB
U1Qgbm9kZSBtYXkgaG9sZCByZWZlcmVuY2VzIHRvIHRoZSByZXN1bHRzIG9mIEludm9jYXRpb24g
QXBwbGljYWJpbGl0eSBJbmZlcmVuY2UsCiAJICogdGhpcyBtZXRob2QgYWxsb3dzIHRvIHVwZGF0
ZSB0aG9zZSByZWZlcmVuY2VzIHRvIHRoZSByZXN1bHQgb2YgSW52b2NhdGlvbiBUeXBlIEluZmVy
ZW5jZS4KIAkgKiBOb3RlIHRoYXQgcG90ZW50aWFsbHkgbW9yZSB0aGFuIGp1c3QgdGhlIG1ldGhv
ZCBiaW5kaW5nIGlzIHVwZGF0ZWQuCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0xhbWJkYUV4cHJl
c3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhCmluZGV4IDgxMTU4
ZjguLjQ3NmEwY2IgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZh
CisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhCkBAIC03MzcsNiArNzM3LDI2
IEBAIHB1YmxpYyBjbGFzcyBMYW1iZGFFeHByZXNzaW9uIGV4dGVuZHMgRnVuY3Rpb25hbEV4cHJl
c3Npb24gaW1wbGVtZW50cyBSZWZlcmVuY2VDCiAKIAkJcmV0dXJuIHRydWU7CiAJfQorCQorCU9i
amVjdFtdIGludGVybmFsUmVzb2x2ZVRlbnRhdGl2ZWx5KFR5cGVCaW5kaW5nIHRhcmdldFR5cGUs
IFNjb3BlIHNjb3BlKSB7IC8vIFRPRE86IGNvbnZlcnQgcmV0dXJuIHRvIFBhaXI8TWV0aG9kQmlu
ZGluZyxUeXBlQmluZGluZz4KKwkJLy8gRklYTUU6IGNvdWxkIGVuY2xvc2luZ1Njb3BlIHN0aWxs
IGJlIG51bGwgaGVyZT8/CisJCUlFcnJvckhhbmRsaW5nUG9saWN5IG9sZFBvbGljeSA9IHRoaXMu
ZW5jbG9zaW5nU2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuc3dpdGNoRXJyb3JIYW5kbGluZ1BvbGlj
eShzaWxlbnRFcnJvckhhbmRsaW5nUG9saWN5KTsKKwkJTGFtYmRhRXhwcmVzc2lvbiBjb3B5ID0g
Y29weSgpOworCQlpZiAoY29weSA9PSBudWxsKQorCQkJcmV0dXJuIG5ldyBPYmplY3RbXSB7IG51
bGwsIG51bGwgfTsKKwkJdGhpcy5sYXN0Q29weSA9IGNvcHk7CisJCXRyeSB7CisJCQljb3B5LnNl
dEV4cHJlc3Npb25Db250ZXh0KElOVk9DQVRJT05fQ09OVEVYVCk7CisJCQljb3B5LnNldEV4cGVj
dGVkVHlwZSh0YXJnZXRUeXBlKTsKKwkJCVR5cGVCaW5kaW5nIHR5cGUgPSBjb3B5LnJlc29sdmVU
eXBlKHRoaXMuZW5jbG9zaW5nU2NvcGUpOworCQkJcmV0dXJuIG5ldyBPYmplY3RbXSB7IGNvcHku
YmluZGluZywgdHlwZSB9OworCQl9IGZpbmFsbHkgeworCQkJdGhpcy5lbmNsb3NpbmdTY29wZS5w
cm9ibGVtUmVwb3J0ZXIoKS5zd2l0Y2hFcnJvckhhbmRsaW5nUG9saWN5KG9sZFBvbGljeSk7Cisv
LwkJCWNsZWFuVXBBZnRlclRlbnRhdGl2ZVJlc29sdmUoKTsKKwkJfQorCX0KKwkKKwlwcml2YXRl
IExhbWJkYUV4cHJlc3Npb24gbGFzdENvcHkgPSBudWxsOwogCiAJLyoqCiAJICogR2V0IGEgcmVz
b2x2ZWQgY29weSBvZiB0aGlzIGxhbWJkYSBmb3IgdXNlIGJ5IHR5cGUgaW5mZXJlbmNlLCBhcyB0
byBhdm9pZCBzcGlsbGluZyBhbnkgcHJlbWF0dXJlCkBAIC03NTcsNiArNzc3LDcgQEAgcHVibGlj
IGNsYXNzIExhbWJkYUV4cHJlc3Npb24gZXh0ZW5kcyBGdW5jdGlvbmFsRXhwcmVzc2lvbiBpbXBs
ZW1lbnRzIFJlZmVyZW5jZUMKIAkJaWYgKGNvcHkgPT0gbnVsbCkgewogCQkJcmV0dXJuIG51bGw7
CiAJCX0KKwkJdGhpcy5sYXN0Q29weSA9IGNvcHk7CiAJCXRyeSB7CiAJCQljb21waWxlck9wdGlv
bnMuaXNBbm5vdGF0aW9uQmFzZWROdWxsQW5hbHlzaXNFbmFibGVkID0gZmFsc2U7CiAJCQljb3B5
LnNldEV4cHJlc3Npb25Db250ZXh0KHRoaXMuZXhwcmVzc2lvbkNvbnRleHQpOwpAQCAtNzY0LDcg
Kzc4NSw3IEBAIHB1YmxpYyBjbGFzcyBMYW1iZGFFeHByZXNzaW9uIGV4dGVuZHMgRnVuY3Rpb25h
bEV4cHJlc3Npb24gaW1wbGVtZW50cyBSZWZlcmVuY2VDCiAJCQl0aGlzLmhhc0lnbm9yZWRNYW5k
YXRvcnlFcnJvcnMgPSBmYWxzZTsKIAkJCVR5cGVCaW5kaW5nIHR5cGUgPSBjb3B5LnJlc29sdmVU
eXBlKHRoaXMuZW5jbG9zaW5nU2NvcGUpOwogCQkJaWYgKHRoaXMuYm9keSBpbnN0YW5jZW9mIEJs
b2NrKSB7Ci0JCQkJaWYgKHRoaXMucmV0dXJuc1ZvaWQpIHsKKwkJCQlpZiAoY29weS5yZXR1cm5z
Vm9pZCkgewogCQkJCQljb3B5LnNoYXBlQW5hbHlzaXNDb21wbGV0ZSA9IHRydWU7CiAJCQkJfQog
CQkJfSBlbHNlIHsKQEAgLTc3NywxNCArNzk4LDE1IEBAIHB1YmxpYyBjbGFzcyBMYW1iZGFFeHBy
ZXNzaW9uIGV4dGVuZHMgRnVuY3Rpb25hbEV4cHJlc3Npb24gaW1wbGVtZW50cyBSZWZlcmVuY2VD
CiAJCQkJY29weS5zaGFwZUFuYWx5c2lzQ29tcGxldGUgPSB0cnVlOwogCQkJfQogCQkJLy8gRG8g
bm90IHByb2NlZWQgd2l0aCBkYXRhL2NvbnRyb2wgZmxvdyBhbmFseXNpcyBpZiByZXNvbHZlIGVu
Y291bnRlcmVkIGVycm9ycy4KLQkJCWlmICh0eXBlID09IG51bGwgfHwgIXR5cGUuaXNWYWxpZEJp
bmRpbmcoKSB8fCB0aGlzLmhhc0lnbm9yZWRNYW5kYXRvcnlFcnJvcnMgfHwgZW5jbG9zaW5nU2Nv
cGVzSGF2ZUVycm9ycygpKSB7Ci0JCQkJcmV0dXJuIG51bGw7CisJCQlpZiAodHlwZSAhPSBudWxs
ICYmIHR5cGUuaXNWYWxpZEJpbmRpbmcoKSAmJiAhdGhpcy5oYXNJZ25vcmVkTWFuZGF0b3J5RXJy
b3JzICYmICFlbmNsb3NpbmdTY29wZXNIYXZlRXJyb3JzKCkpIHsKKwkJCQkvLyB2YWx1ZSBjb21w
YXRpYmlsaXR5IG9mIGJsb2NrIGxhbWJkYSdzIGlzIHRoZSBvbmx5IG9wZW4gcXVlc3Rpb24uCisJ
CQkJaWYgKCFjb3B5LnNoYXBlQW5hbHlzaXNDb21wbGV0ZSkKKwkJCQkJY29weS52YWx1ZUNvbXBh
dGlibGUgPSBjb3B5LmRvZXNOb3RDb21wbGV0ZU5vcm1hbGx5KCk7CisJCQl9IGVsc2UgeworCQkJ
CWlmICghY29weS5yZXR1cm5zVm9pZCkKKwkJCQkJY29weS52YWx1ZUNvbXBhdGlibGUgPSB0cnVl
OyAvLyBvcHRpbWlzdGljYWxseQogCQkJfQogCQkJCi0JCQkvLyB2YWx1ZSBjb21wYXRpYmlsaXR5
IG9mIGJsb2NrIGxhbWJkYSdzIGlzIHRoZSBvbmx5IG9wZW4gcXVlc3Rpb24uCi0JCQlpZiAoIWNv
cHkuc2hhcGVBbmFseXNpc0NvbXBsZXRlKQotCQkJCWNvcHkudmFsdWVDb21wYXRpYmxlID0gY29w
eS5kb2VzTm90Q29tcGxldGVOb3JtYWxseSgpOwotCQkJCiAJCQljb3B5LnNoYXBlQW5hbHlzaXND
b21wbGV0ZSA9IHRydWU7CiAJCX0gZmluYWxseSB7CiAJCQljb21waWxlck9wdGlvbnMuaXNBbm5v
dGF0aW9uQmFzZWROdWxsQW5hbHlzaXNFbmFibGVkID0gYW5hbHl6ZU5QRTsKQEAgLTExMDgsNCAr
MTEzMCwxMCBAQCBwdWJsaWMgY2xhc3MgTGFtYmRhRXhwcmVzc2lvbiBleHRlbmRzIEZ1bmN0aW9u
YWxFeHByZXNzaW9uIGltcGxlbWVudHMgUmVmZXJlbmNlQwogCXB1YmxpYyBpbnQgZGlhZ25vc3Rp
Y3NTb3VyY2VFbmQoKSB7CiAJCXJldHVybiB0aGlzLmJvZHkgaW5zdGFuY2VvZiBCbG9jayA/IHRo
aXMuYXJyb3dQb3NpdGlvbiA6IHRoaXMuc291cmNlRW5kOwogCX0KKworCXB1YmxpYyBUeXBlQmlu
ZGluZyBnZXRMYXN0RXhwZWN0ZWRUeXBlKCkgeworCQlpZiAodGhpcy5sYXN0Q29weSAhPSBudWxs
KQorCQkJcmV0dXJuIHRoaXMubGFzdENvcHkuZXhwZWN0ZWRUeXBlOworCQlyZXR1cm4gbnVsbDsK
Kwl9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L01lc3NhZ2VTZW5kLmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
YXN0L01lc3NhZ2VTZW5kLmphdmEKaW5kZXggOTY2NzFmNS4uYzFiN2RiNiAxMDA2NDQKLS0tIGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FzdC9NZXNzYWdlU2VuZC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTWVzc2FnZVNlbmQu
amF2YQpAQCAtODQ5LDExICs4NDksNyBAQCBwcm90ZWN0ZWQgdm9pZCBmaW5kTWV0aG9kQmluZGlu
ZyhCbG9ja1Njb3BlIHNjb3BlLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMsCiAJCQk6IHNj
b3BlLmdldE1ldGhvZCh0aGlzLmFjdHVhbFJlY2VpdmVyVHlwZSwgdGhpcy5zZWxlY3RvciwgYXJn
dW1lbnRUeXBlcywgdGhpcyk7CiAJCiAJaWYgKHBvbHlFeHByZXNzaW9uU2VlbikKLQkJaWYgKHJl
c29sdmVQb2x5RXhwcmVzc2lvbkFyZ3VtZW50cyh0aGlzLCBzY29wZSwgdGhpcy5iaW5kaW5nLCBh
cmd1bWVudFR5cGVzKSkgewotCQkJdGhpcy5iaW5kaW5nID0gdGhpcy5yZWNlaXZlci5pc0ltcGxp
Y2l0VGhpcygpCi0JCQkJCT8gc2NvcGUuZ2V0SW1wbGljaXRNZXRob2QodGhpcy5zZWxlY3Rvciwg
YXJndW1lbnRUeXBlcywgdGhpcykKLQkJCQkJOiBzY29wZS5nZXRNZXRob2QodGhpcy5hY3R1YWxS
ZWNlaXZlclR5cGUsIHRoaXMuc2VsZWN0b3IsIGFyZ3VtZW50VHlwZXMsIHRoaXMpOwotCQl9CisJ
CXJlc29sdmVQb2x5RXhwcmVzc2lvbkFyZ3VtZW50cyh0aGlzLCBzY29wZSwgdGhpcy5iaW5kaW5n
LCBhcmd1bWVudFR5cGVzKTsKIH0KIAogcHVibGljIHZvaWQgc2V0QWN0dWFsUmVjZWl2ZXJUeXBl
KFJlZmVyZW5jZUJpbmRpbmcgcmVjZWl2ZXJUeXBlKSB7CkBAIC05NzQsMTQgKzk3MCw3IEBAIHB1
YmxpYyB2b2lkIHNldEluZmVyZW5jZUtpbmQoaW50IGNoZWNrS2luZCkgewogCXRoaXMuaW5mZXJl
bmNlS2luZCA9IGNoZWNrS2luZDsKIH0KIHB1YmxpYyBpbnQgaW5mZXJlbmNlS2luZCgpIHsKLQly
ZXR1cm4gKHRoaXMuaW5mZXJlbmNlS2luZCAmIEluZmVyZW5jZUNvbnRleHQxOC5JTkZFUkVOQ0Vf
S0lORF9NQVNLKTsKLX0KLXB1YmxpYyB2b2lkIG1hcmtJbmZlcmVuY2VGaW5pc2hlZCgpIHsKLQl0
aGlzLmluZmVyZW5jZUtpbmQgfD0gSW5mZXJlbmNlQ29udGV4dDE4LkNIRUNLX0ZJTklTSEVEOwot
fQotcHVibGljIGJvb2xlYW4gaGFzSW5mZXJlbmNlRmluaXNoZWQoKSB7Ci0JcmV0dXJuICh0aGlz
LmluZmVyZW5jZUNvbnRleHQgPT0gbnVsbCAmJiB0aGlzLmluZmVyZW5jZUtpbmQgPT0gMCkgLy8g
b25seSByZWxldmFudCBpZiBpbmZlcmVuY2UgaGFzIGJlZW4gc3RhcnRlZAotCQkJfHwgKHRoaXMu
aW5mZXJlbmNlS2luZCAmIEluZmVyZW5jZUNvbnRleHQxOC5DSEVDS19GSU5JU0hFRCkgIT0gMDsK
KwlyZXR1cm4gdGhpcy5pbmZlcmVuY2VLaW5kOwogfQogcHVibGljIFR5cGVCaW5kaW5nIHVwZGF0
ZUJpbmRpbmdzKE1ldGhvZEJpbmRpbmcgdXBkYXRlZEJpbmRpbmcpIHsKIAl0aGlzLmJpbmRpbmcg
PSB1cGRhdGVkQmluZGluZzsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUG9seUV4cHJlc3Npb24u
amF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hc3QvUG9seUV4cHJlc3Npb24uamF2YQpkZWxldGVkIGZpbGUgbW9kZSAx
MDA2NDQKaW5kZXggNmI3NDFkZi4uMDAwMDAwMAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1BvbHlFeHByZXNz
aW9uLmphdmEKKysrIC9kZXYvbnVsbApAQCAtMSwyOCArMCwwIEBACi0vKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKgotICogQ29weXJpZ2h0IChjKSAyMDEzIEdLIFNvZnR3YXJlIEFHLgotICogQWxsIHJp
Z2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFs
cwotICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQ
dWJsaWMgTGljZW5zZSB2MS4wCi0gKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlv
biwgYW5kIGlzIGF2YWlsYWJsZSBhdAotICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9l
cGwtdjEwLmh0bWwKLSAqCi0gKiBUaGlzIGlzIGFuIGltcGxlbWVudGF0aW9uIG9mIGFuIGVhcmx5
LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVyIHRoZSBKYXZhCi0gKiBDb21tdW5p
dHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFibGUgZm9yIHRlc3RpbmcgYW5kIGV2
YWx1YXRpb24gcHVycG9zZXMKLSAqIG9ubHkuIFRoZSBjb2RlIGlzIG5vdCBjb21wYXRpYmxlIHdp
dGggYW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KLSAqCi0gKiBDb250cmlidXRvcnM6Ci0g
KiAgICAgU3RlcGhhbiBIZXJybWFubiAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgot
ICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKiovCi1wYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5h
bC5jb21waWxlci5hc3Q7Ci0KLS8qKgotICogQWJzdHJhY3Rpb24gb2YgQVNUIG5vZGVzIHRoYXQg
Y2FuIGJlIHBvbHkgZXhwcmVzc2lvbnMgYW5kIHBhcnRpY2lwYXRlIGluIHR5cGUgaW5mZXJlbmNl
LgotICogKG5vdCBpbmNsdWRlZDogQ29uZGl0aW9uYWxFeHByZXNzaW9uKS4KLSAqLwotcHVibGlj
IGludGVyZmFjZSBQb2x5RXhwcmVzc2lvbiB7Ci0KLQkvKiogTWFyayB0aGF0IGluZmVyZW5jZSBm
b3IgdGhpcyBleHByZXNzaW9uIGhhcyBmaW5pc2hlZC4gKi8KLQl2b2lkIG1hcmtJbmZlcmVuY2VG
aW5pc2hlZCgpOwotCi0JLyoqIEFuc3dlciB3aGV0aGVyIHR5cGUgaW5mZXJlbmNlIGZvciB0aGlz
IGV4cHJlc3Npb24gaGFzIGZpbmlzaGVkIChpZiBuZWVkZWQpLiAqLwotCWJvb2xlYW4gaGFzSW5m
ZXJlbmNlRmluaXNoZWQoKTsKLX0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUmVmZXJlbmNlRXhw
cmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9SZWZlcmVuY2VFeHByZXNzaW9uLmphdmEKaW5kZXgg
MTM1M2FmNS4uZjA3N2E1YSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9SZWZlcmVuY2VFeHByZXNz
aW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9SZWZlcmVuY2VFeHByZXNzaW9uLmphdmEKQEAgLTQz
LDEwICs0MywxMCBAQCBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxv
b2t1cC5BcnJheUJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBp
bGVyLmxvb2t1cC5CaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21w
aWxlci5sb29rdXAuQmxvY2tTY29wZTsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwu
Y29tcGlsZXIubG9va3VwLkluZmVyZW5jZUNvbnRleHQxODsKLWltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkludm9jYXRpb25TaXRlOwogaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuTWV0aG9kQmluZGluZzsKIGltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLk5lc3RlZFR5cGVCaW5k
aW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUGFy
YW1ldGVyaXplZFR5cGVCaW5kaW5nOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b21waWxlci5sb29rdXAuUG9seVNpdGU7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFs
LmNvbXBpbGVyLmxvb2t1cC5Qb2x5VHlwZUJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5Qcm9ibGVtUmVhc29uczsKIGltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlJlZmVyZW5jZUJpbmRpbmc7CkBAIC01
OSw3ICs1OSw3IEBAIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9v
a3VwLlR5cGVDb25zdGFudHM7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBp
bGVyLmxvb2t1cC5UeXBlSWRzOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21w
aWxlci5wcm9ibGVtLlByb2JsZW1TZXZlcml0aWVzOwogCi1wdWJsaWMgY2xhc3MgUmVmZXJlbmNl
RXhwcmVzc2lvbiBleHRlbmRzIEZ1bmN0aW9uYWxFeHByZXNzaW9uIGltcGxlbWVudHMgSW52b2Nh
dGlvblNpdGUgeworcHVibGljIGNsYXNzIFJlZmVyZW5jZUV4cHJlc3Npb24gZXh0ZW5kcyBGdW5j
dGlvbmFsRXhwcmVzc2lvbiBpbXBsZW1lbnRzIFBvbHlTaXRlIHsKIAkKIAlwdWJsaWMgRXhwcmVz
c2lvbiBsaHM7CiAJcHVibGljIFR5cGVSZWZlcmVuY2UgW10gdHlwZUFyZ3VtZW50czsKQEAgLTU2
NCw3ICs1NjQsMTEgQEAgcHVibGljIGNsYXNzIFJlZmVyZW5jZUV4cHJlc3Npb24gZXh0ZW5kcyBG
dW5jdGlvbmFsRXhwcmVzc2lvbiBpbXBsZW1lbnRzIEludm9jYXQKIAkJLy8gaXMgbm90IHN1Ympl
Y3QgdG8gSW52b2NhdGlvbiBUeXBlIEluZmVyZW5jZSAoaXMgbm90IGFuIGludm9jYXRpb24pLgog
CQlyZXR1cm4gbmV3IEluZmVyZW5jZUNvbnRleHQxOChzY29wZSwgbnVsbC8qbm8gYXJndW1lbnRz
Ki8sIHRoaXMpOwogCX0KLSAKKworCXB1YmxpYyBpbnQgaW5mZXJlbmNlS2luZCgpIHsgCisJCXJl
dHVybiBJbmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tfTE9PU0U7IC8vIHBhcnRpY2lwYXRlIGluIGlu
ZmVyZW5jZSBidXQgbmV2ZXIgQ0hFQ0tfVkFSQVJHCisJfQorCiAJcHVibGljIGJvb2xlYW4gaXNT
dXBlckFjY2VzcygpIHsKIAkJcmV0dXJuIGZhbHNlOwogCX0KQEAgLTYyMiw4ICs2MjYsNiBAQCBw
dWJsaWMgY2xhc3MgUmVmZXJlbmNlRXhwcmVzc2lvbiBleHRlbmRzIEZ1bmN0aW9uYWxFeHByZXNz
aW9uIGltcGxlbWVudHMgSW52b2NhdAogCX0KIAogCXB1YmxpYyBib29sZWFuIGlzQ29tcGF0aWJs
ZVdpdGgoVHlwZUJpbmRpbmcgbGVmdCwgU2NvcGUgc2NvcGUpIHsKLQkJaWYgKHRoaXMuaGFzSW5m
ZXJlbmNlRmluaXNoZWQpCi0JCQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGUgIT0gbnVsbCA/IHRo
aXMucmVzb2x2ZWRUeXBlLmlzQ29tcGF0aWJsZVdpdGgobGVmdCwgc2NvcGUpIDogZmFsc2U7CiAJ
CS8vIDE1LjI4LjIKIAkJZmluYWwgTWV0aG9kQmluZGluZyBzYW0gPSBsZWZ0LmdldFNpbmdsZUFi
c3RyYWN0TWV0aG9kKHRoaXMuZW5jbG9zaW5nU2NvcGUsIHRydWUpOwogCQlpZiAoc2FtID09IG51
bGwgfHwgIXNhbS5pc1ZhbGlkQmluZGluZygpKQpAQCAtNjM4LDcgKzY0MCw2IEBAIHB1YmxpYyBj
bGFzcyBSZWZlcmVuY2VFeHByZXNzaW9uIGV4dGVuZHMgRnVuY3Rpb25hbEV4cHJlc3Npb24gaW1w
bGVtZW50cyBJbnZvY2F0CiAJCQl0aGlzLmVuY2xvc2luZ1Njb3BlLnByb2JsZW1SZXBvcnRlcigp
LnN3aXRjaEVycm9ySGFuZGxpbmdQb2xpY3kob2xkUG9saWN5KTsKIAkJCWlzQ29tcGF0aWJsZSA9
IHRoaXMuYmluZGluZyAhPSBudWxsICYmIHRoaXMuYmluZGluZy5pc1ZhbGlkQmluZGluZygpOwog
CQkJdGhpcy5iaW5kaW5nID0gbnVsbDsKLQkJCXRoaXMuaGFzSW5mZXJlbmNlRmluaXNoZWQgPSBm
YWxzZTsKIAkJCXNldEV4cGVjdGVkVHlwZShudWxsKTsKIAkJfQogCQlyZXR1cm4gaXNDb21wYXRp
YmxlOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9TdGF0ZW1lbnQuamF2YSBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3Qv
U3RhdGVtZW50LmphdmEKaW5kZXggOTk1YjY4Yi4uZTJmNmY5NCAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FzdC9TdGF0ZW1lbnQuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1N0YXRlbWVudC5qYXZhCkBAIC0z
MzYsMTAgKzMzNiw4IEBAIHB1YmxpYyBFeHByZXNzaW9uQ29udGV4dCBnZXRFeHByZXNzaW9uQ29u
dGV4dCgpIHsKICAqLwogcHJvdGVjdGVkIE1ldGhvZEJpbmRpbmcgZmluZENvbnN0cnVjdG9yQmlu
ZGluZyhCbG9ja1Njb3BlIHNjb3BlLCBJbnZvY2F0aW9uIHNpdGUsIFJlZmVyZW5jZUJpbmRpbmcg
cmVjZWl2ZXJUeXBlLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMsIGJvb2xlYW4gcG9seUV4
cHJlc3Npb25TZWVuKSB7CiAJTWV0aG9kQmluZGluZyBjdG9yQmluZGluZyA9IHNjb3BlLmdldENv
bnN0cnVjdG9yKHJlY2VpdmVyVHlwZSwgYXJndW1lbnRUeXBlcywgc2l0ZSk7Ci0JaWYgKHBvbHlF
eHByZXNzaW9uU2VlbikgewotCQlpZiAocmVzb2x2ZVBvbHlFeHByZXNzaW9uQXJndW1lbnRzKHNp
dGUsIHNjb3BlLCBjdG9yQmluZGluZywgYXJndW1lbnRUeXBlcykpCi0JCQlyZXR1cm4gc2NvcGUu
Z2V0Q29uc3RydWN0b3IocmVjZWl2ZXJUeXBlLCBhcmd1bWVudFR5cGVzLCBzaXRlKTsKLQl9CisJ
aWYgKHBvbHlFeHByZXNzaW9uU2VlbikKKwkJcmVzb2x2ZVBvbHlFeHByZXNzaW9uQXJndW1lbnRz
KHNpdGUsIHNjb3BlLCBjdG9yQmluZGluZywgYXJndW1lbnRUeXBlcyk7CiAJcmV0dXJuIGN0b3JC
aW5kaW5nOwogfQogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50RXhwcmVz
c2lvbkZvcm11bGEuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3RyYWludEV4cHJlc3Npb25Gb3Jt
dWxhLmphdmEKaW5kZXggZTNhMDc2MS4uZmY1NGI4ZSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1
cC9Db25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0Nv
bnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYS5qYXZhCkBAIC01OSwxMSArNTksMTkgQEAgY2xhc3Mg
Q29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhIGV4dGVuZHMgQ29uc3RyYWludEZvcm11bGEgewog
CiAJcHVibGljIE9iamVjdCByZWR1Y2UoSW5mZXJlbmNlQ29udGV4dDE4IGluZmVyZW5jZUNvbnRl
eHQpIHRocm93cyBJbmZlcmVuY2VGYWlsdXJlRXhjZXB0aW9uIHsKIAkJLy8gSkxTIDE4LjIuMQor
CQlpZiAodGhpcy5sZWZ0IGluc3RhbmNlb2YgRnVuY3Rpb25hbEV4cHJlc3Npb24pIHsKKwkJCSgo
RnVuY3Rpb25hbEV4cHJlc3Npb24pIHRoaXMubGVmdCkubGFzdEV4cGVjdGVkVHlwZSA9IHRoaXMu
cmlnaHQ7CisJCX0KIAkJaWYgKHRoaXMucmlnaHQuaXNQcm9wZXJUeXBlKHRydWUpKSB7CiAJCQlU
eXBlQmluZGluZyBleHByVHlwZSA9IHRoaXMubGVmdC5yZXNvbHZlZFR5cGU7CiAJCQlpZiAoZXhw
clR5cGUgPT0gbnVsbCkgewotCQkJCWlmICh0aGlzLmxlZnQgaW5zdGFuY2VvZiBGdW5jdGlvbmFs
RXhwcmVzc2lvbikKKwkJCQlpZiAodGhpcy5sZWZ0IGluc3RhbmNlb2YgRnVuY3Rpb25hbEV4cHJl
c3Npb24pIHsKKwkJCQkJaWYgKHRoaXMubGVmdCBpbnN0YW5jZW9mIExhbWJkYUV4cHJlc3Npb24p
IHsKKwkJCQkJCUxhbWJkYUV4cHJlc3Npb24gY29weSA9ICgoTGFtYmRhRXhwcmVzc2lvbikgdGhp
cy5sZWZ0KS5nZXRSZXNvbHZlZENvcHlGb3JJbmZlcmVuY2VUYXJnZXRpbmcodGhpcy5yaWdodCk7
CisJCQkJCQlyZXR1cm4gKGNvcHkucmVzb2x2ZWRUeXBlICE9IG51bGwgJiYgY29weS5yZXNvbHZl
ZFR5cGUuaXNWYWxpZEJpbmRpbmcoKSkgPyBUUlVFIDogRkFMU0U7CisJCQkJCX0KIAkJCQkJcmV0
dXJuIHRoaXMubGVmdC5pc0NvbXBhdGlibGVXaXRoKHRoaXMucmlnaHQsIGluZmVyZW5jZUNvbnRl
eHQuc2NvcGUpID8gVFJVRSA6IEZBTFNFOworCQkJCX0KIAkJCQlyZXR1cm4gRkFMU0U7CiAJCQl9
IGVsc2UgaWYgKCFleHByVHlwZS5pc1ZhbGlkQmluZGluZygpKSB7CiAJCQkJcmV0dXJuIEZBTFNF
OwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9JbmZlcmVuY2VDb250ZXh0MTguamF2YSBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9sb29rdXAvSW5mZXJlbmNlQ29udGV4dDE4LmphdmEKaW5kZXggY2ViODBlYy4uZGI0Yzhj
ZiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9JbmZlcmVuY2VDb250ZXh0MTguamF2YQorKysg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvbG9va3VwL0luZmVyZW5jZUNvbnRleHQxOC5qYXZhCkBAIC0yNCw2ICsyNCw3IEBA
IGltcG9ydCBqYXZhLnV0aWwuU2V0OwogCiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuY29t
cGlsZXIuQ2hhck9wZXJhdGlvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29t
cGlsZXIuYXN0LkV4cHJlc3Npb247CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNv
bXBpbGVyLmFzdC5GdW5jdGlvbmFsRXhwcmVzc2lvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIuYXN0Lkludm9jYXRpb247CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmludGVybmFsLmNvbXBpbGVyLmFzdC5XaWxkY2FyZDsKIApAQCAtNDgsNiArNDksOSBAQCBwdWJs
aWMgY2xhc3MgSW5mZXJlbmNlQ29udGV4dDE4IHsKIAlDb25zdHJhaW50Rm9ybXVsYVtdIGluaXRp
YWxDb25zdHJhaW50czsKIAlpbnQgdmFyaWFibGVDb3VudCA9IDA7CiAKKwkvKiogc29sdXRpb24g
b2YgYXBwbGljYWJpbGl0eSBpbmZlcmVuY2UsIHN0b3JlZCBmb3IgdXNlIGFzIGZhbGxiYWNrLCBp
ZiBpbnZvY2F0aW9uIHR5cGUgaW5mZXJlbmNlIGZhaWxzLiAqLworCUJvdW5kU2V0IHN0b3JlZFNv
bHV0aW9uOworCiAJTGlzdC8qPEludm9jYXRpb25TaXRlPiovIGlubmVyUG9saWVzID0gbmV3IEFy
cmF5TGlzdCgpOwogCXB1YmxpYyBJbmZlcmVuY2VDb250ZXh0MTggb3V0ZXJDb250ZXh0OwogCXBy
aXZhdGUgQXJyYXlMaXN0IHByb2JsZW1NZXRob2RzOwpAQCAtNjAsMTQgKzY0LDIxIEBAIHB1Ymxp
YyBjbGFzcyBJbmZlcmVuY2VDb250ZXh0MTggewogCUludm9jYXRpb25TaXRlIGN1cnJlbnRJbnZv
Y2F0aW9uOwogCUV4cHJlc3Npb25bXSBpbnZvY2F0aW9uQXJndW1lbnRzOwogCQotCS8vIEJpdG1h
c2ssIGxvd2VyIHR3byBiaXRzOgogCXB1YmxpYyBzdGF0aWMgZmluYWwgaW50IENIRUNLX1NUUklD
VCA9IDE7CiAJcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgQ0hFQ0tfTE9PU0UgPSAyOwogCXB1Ymxp
YyBzdGF0aWMgZmluYWwgaW50IENIRUNLX1ZBUkFSRyA9IDM7Ci0JcHVibGljIHN0YXRpYyBmaW5h
bCBpbnQgSU5GRVJFTkNFX0tJTkRfTUFTSyA9IDM7Ci0JLy8gYml0IDM6Ci0JcHVibGljIHN0YXRp
YyBmaW5hbCBpbnQgQ0hFQ0tfRklOSVNIRUQgPSA0OwogCQorCS8qCisJICogRmxhZ3MgZm9yIFBH
TUIuY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoKSBpdCBpdHMgY2FsbGVycywgdG8gcmVxdWVzdAor
CSAqIHdoaWNoIG9mIHR3byBsZXZlbHMgb2YgaW5mZXJlbmNlIHNob3VsZCBiZSBwZXJmb3JtZWQg
KG9yIGJvdGgpLgorCSAqLworCS8qKiBSZXF1ZXN0IEludm9jYXRpb24gQXBwbGljYWJpbGl0eSBJ
bmZlcmVuY2UgKDE4LjUuMSkuICovCisJcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgQVBQTElDQUJJ
TElUWSA9IDE7CisJLyoqIFJlcXVlc3QgSW52b2NhdGlvbiBUeXBlIEluZmVyZW5jZSAoMTguNS4y
KS4gKi8KKwlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBJTlZPQ0FUSU9OX1RZUEUgPSAyOworCS8q
KiBSZXF1ZXN0IGJvdGgge0BsaW5rICNBUFBMSUNBQklMSVRZfSBhbmQge0BsaW5rICNJTlZPQ0FU
SU9OX1RZUEV9IGluZmVyZW5jZS4gKi8KKwlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBGVUxMX0lO
RkVSRU5DRSA9IEFQUExJQ0FCSUxJVFkgfCBJTlZPQ0FUSU9OX1RZUEU7CisKIAlzdGF0aWMgY2xh
c3MgSW52b2NhdGlvblJlY29yZCB7CiAJCUludm9jYXRpb25TaXRlIHNpdGU7CiAJCUV4cHJlc3Np
b25bXSBpbnZvY2F0aW9uQXJndW1lbnRzOwpAQCAtMzIzLDggKzMzNCwzOSBAQCBwdWJsaWMgY2xh
c3MgSW5mZXJlbmNlQ29udGV4dDE4IHsKIAkJfQogCQlpZiAocmVzdWx0ICE9IG51bGwpIHsKIAkJ
CVR5cGVCaW5kaW5nW10gc29sdXRpb25zID0gZ2V0U29sdXRpb25zKG1ldGhvZC50eXBlVmFyaWFi
bGVzKCksIGludm9jYXRpb24sIHJlc3VsdCk7Ci0JCQlpZiAoc29sdXRpb25zICE9IG51bGwpCisJ
CQlpZiAoc29sdXRpb25zICE9IG51bGwpIHsKKwkJCQkvLyBGSVhNRTogdGhpcyBvbmUgc3RvcmVz
LCB0aGUgbmV4dCBtZXRob2QgZG9lcyBub3QsIE9LPz8KKwkJCQkvLyB0aGlzIGlzIGZpbmFsLCBr
ZWVwIHRoZSByZXN1bHQ6CisJCQkJdGhpcy5jdXJyZW50Qm91bmRzID0gcmVzdWx0OworCQkJCXJl
dHVybiB0aGlzLmVudmlyb25tZW50LmNyZWF0ZVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kKG1l
dGhvZCwgc29sdXRpb25zKTsKKwkJCX0KKwkJfQorCQlyZXR1cm4gbnVsbDsKKwl9CisKKwkvKioK
KwkgKiBTaW1wbGlmaWVkIEFQSSB0byBwZXJmb3JtIEludm9jYXRpb24gVHlwZSBJbmZlcmVuY2Ug
KEpMUyAxOC41LjIpCisJICogYW5kIChpZiBzdWNjZXNzZnVsKSByZXR1cm4gdGhlIHNvbHV0aW9u
LgorCSAqIEBwYXJhbSBzaXRlIGludm9jYXRpb24gYmVpbmcgaW5mZXJyZWQKKwkgKiBAcGFyYW0g
dGFyZ2V0VHlwZSB0YXJnZXQgdHlwZSBmb3IgdGhpcyBpbnZvY2F0aW9uCisJICogQHJldHVybiBh
IG1ldGhvZCBiaW5kaW5nIHdpdGggdXBkYXRlZCB0eXBlIHBhcmFtZXRlcnMsIG9yIG51bGwgaWYg
bm8gc29sdXRpb24gd2FzIGZvdW5kCisJICovCisJcHVibGljIFBhcmFtZXRlcml6ZWRHZW5lcmlj
TWV0aG9kQmluZGluZyBnZXRJbnZvY2F0aW9uVHlwZUluZmVyZW5jZVNvbHV0aW9uKE1ldGhvZEJp
bmRpbmcgbWV0aG9kLCBQb2x5U2l0ZSBzaXRlLCBUeXBlQmluZGluZyB0YXJnZXRUeXBlKSB7CisJ
CS8vIHN0YXJ0IG92ZXIgZnJvbSBhIHByZXZpb3VzIGNhbmRpZGF0ZSBidXQgZGlzY2FyZCBpdHMg
dHlwZSB2YXJpYWJsZSBpbnN0YW50aWF0aW9ucworCQkvLyBUT0RPOiBzaG91bGQgd2UgcmV0YWlu
IGFueSBpbnN0YW50aWF0aW9ucyBvZiB0eXBlIHZhcmlhYmxlcyBub3Qgb3duZWQgYnkgdGhlIG1l
dGhvZD8gCisJCUJvdW5kU2V0IHJlc3VsdCA9IG51bGw7CisJCXRyeSB7CisJCQlyZXN1bHQgPSBp
bmZlckludm9jYXRpb25UeXBlKHRoaXMuY3VycmVudEJvdW5kcywgdGFyZ2V0VHlwZSwgc2l0ZSwg
bWV0aG9kLCBzaXRlLmluZmVyZW5jZUtpbmQoKSk7CisJCX0gY2F0Y2ggKEluZmVyZW5jZUZhaWx1
cmVFeGNlcHRpb24gZSkgeworCQkJcmV0dXJuIG51bGw7CisJCX0KKwkJaWYgKHJlc3VsdCAhPSBu
dWxsKSB7CisJCQlUeXBlQmluZGluZ1tdIHNvbHV0aW9ucyA9IGdldFNvbHV0aW9ucyhtZXRob2Qu
dHlwZVZhcmlhYmxlcygpLCBzaXRlLCByZXN1bHQpOworCQkJaWYgKHNvbHV0aW9ucyAhPSBudWxs
KSB7CisJCQkJLy8gdGhpcyBpcyBmaW5hbCwga2VlcCB0aGUgcmVzdWx0OgorCQkJCXRoaXMuY3Vy
cmVudEJvdW5kcyA9IHJlc3VsdDsKIAkJCQlyZXR1cm4gdGhpcy5lbnZpcm9ubWVudC5jcmVhdGVQ
YXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChtZXRob2QsIHNvbHV0aW9ucyk7CisJCQl9CiAJCX0K
IAkJcmV0dXJuIG51bGw7CiAJfQpAQCAtNjQ3LDEzICs2ODksMjggQEAgcHVibGljIGNsYXNzIElu
ZmVyZW5jZUNvbnRleHQxOCB7CiAJCXRoaXMuY3VycmVudEludm9jYXRpb24gPSByZWNvcmQuc2l0
ZTsKIAkJdGhpcy5pbnZvY2F0aW9uQXJndW1lbnRzID0gcmVjb3JkLmludm9jYXRpb25Bcmd1bWVu
dHM7CiAJfQotCQorCXB1YmxpYyBib29sZWFuIHJlYmluZElubmVyUG9saWVzKFR5cGVCaW5kaW5n
W10gYXJndW1lbnRUeXBlcywgTWV0aG9kQmluZGluZyBtZXRob2QsIFBvbHlTaXRlIHNpdGUpIHsK
KwkJQm91bmRTZXQgYm91bmRzID0gdGhpcy5jdXJyZW50Qm91bmRzOworCQlUeXBlQmluZGluZyB0
YXJnZXRUeXBlID0gc2l0ZS5pbnZvY2F0aW9uVGFyZ2V0VHlwZSgpOworCQlpZiAodGFyZ2V0VHlw
ZSA9PSBudWxsIHx8ICF0YXJnZXRUeXBlLmlzUHJvcGVyVHlwZSh0cnVlKSkgeworCQkJLy8gaW4g
dGhpcyBjYXNlIHdlIGRvbid0IHlldCBoYXZlIHRoZSBzb2x1dGlvbiwgY29tcHV0ZSBpdCBub3c6
CisJCQl0cnkgeworCQkJCWJvdW5kcyA9IGluZmVySW52b2NhdGlvblR5cGUodGhpcy5jdXJyZW50
Qm91bmRzLCBudWxsLCBzaXRlLCBtZXRob2QsIHNpdGUuaW5mZXJlbmNlS2luZCgpKTsKKwkJCX0g
Y2F0Y2ggKEluZmVyZW5jZUZhaWx1cmVFeGNlcHRpb24gZSkgeworCQkJCXJldHVybiBmYWxzZTsK
KwkJCX0KKwkJCWlmIChib3VuZHMgPT0gbnVsbCkKKwkJCQlyZXR1cm4gZmFsc2U7CisJCX0KKwkJ
cmViaW5kSW5uZXJQb2xpZXMoYm91bmRzLCBhcmd1bWVudFR5cGVzLCBtZXRob2QucGFyYW1ldGVy
cywgc2l0ZS5pbmZlcmVuY2VLaW5kKCkpOworCQlyZXR1cm4gdHJ1ZTsKKwl9CiAJLyoqCiAJICog
QWZ0ZXIgaW5mZXJlbmNlIGhhcyBmaW5pc2hlZCwgaXRlcmF0ZSBhbGwgaW5uZXIgcG9seSBleHBy
ZXNzaW9ucywgdGhhdCBoYXZlIGJlZW4KIAkgKiBpbmNsdWRlZCBpbiB0aGUgaW5mZXJlbmNlLiBG
b3IgZWFjaCBvZiB0aGVzZSB1cGRhdGUgc29tZSB0eXBlIGluZm9ybWF0aW9uCiAJICogZnJvbSB0
aGUgaW5mZXJlbmNlIHJlc3VsdCBhbmQgcGVyaGFwcyB0cmlnZ2VyIGZvbGxvdy11cCByZXNvbHZp
bmcgYXMgbmVlZGVkLgogCSAqLwotCXB1YmxpYyB2b2lkIHJlYmluZElubmVyUG9saWVzKEJvdW5k
U2V0IGJvdW5kcywgVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzKSB7CisJcHVibGljIHZvaWQg
cmViaW5kSW5uZXJQb2xpZXMoQm91bmRTZXQgYm91bmRzLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50
VHlwZXMsIFR5cGVCaW5kaW5nW10gcGFyYW1ldGVyVHlwZXMsIGludCBpbmZlcmVuY2VLaW5kKSB7
CiAJCWludCBsZW4gPSB0aGlzLmlubmVyUG9saWVzLnNpemUoKTsKIAkJZm9yIChpbnQgaSA9IDA7
IGkgPCBsZW47IGkrKykgewogCQkJRXhwcmVzc2lvbiBpbm5lciA9IChFeHByZXNzaW9uKSB0aGlz
LmlubmVyUG9saWVzLmdldChpKTsKQEAgLTY3NSwxOCArNzMyLDE0IEBAIHB1YmxpYyBjbGFzcyBJ
bmZlcmVuY2VDb250ZXh0MTggewogCQkJCQljb250aW51ZTsgLy8gcGxheSBzYWZlLCBidXQgc2hv
dWxkbid0IGhhcHBlbiBpbiBhIHJlc29sdmVkIGNvbnRleHQKIAkJCQlQYXJhbWV0ZXJpemVkR2Vu
ZXJpY01ldGhvZEJpbmRpbmcgaW5uZXJCaW5kaW5nID0gdGhpcy5lbnZpcm9ubWVudC5jcmVhdGVQ
YXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChvcmlnaW5hbCwgc29sdXRpb25zKTsKIAkJCQlpbm5l
ck1lc3NhZ2UudXBkYXRlQmluZGluZ3MoaW5uZXJCaW5kaW5nKTsKLQkJCQlpbm5lck1lc3NhZ2Uu
bWFya0luZmVyZW5jZUZpbmlzaGVkKCk7IC8vIGludm9jYXRpb24gdHlwZSBpbmZlcmVuY2UgaGFz
IGFscmVhZHkgaGFwcGVuZWQgb24gdGhlIGlubmVyLCB0b28uCiAJCQkJCiAJCQkJLy8gZmluYWxp
emUgcmVzb2x2aW5nIG9mIGFyZ3VtZW50cyBvZiB0aGUgaW5uZXIgaW52b2NhdGlvbjoKIAkJCQlU
eXBlQmluZGluZ1tdIGlubmVyUGFyYW1ldGVycyA9IGlubmVyQmluZGluZy5wYXJhbWV0ZXJzOwot
CQkJCWludCBpbmZlcmVuY2VLaW5kID0gaW5uZXJNZXNzYWdlLmluZmVyZW5jZUtpbmQoKTsKLQkJ
CQlUeXBlQmluZGluZyB2YXJBcmdzVHlwZSA9IGluZmVyZW5jZUtpbmQgPT0gQ0hFQ0tfVkFSQVJH
ID8gKChBcnJheUJpbmRpbmcpaW5uZXJQYXJhbWV0ZXJzW2lubmVyUGFyYW1ldGVycy5sZW5ndGgt
MV0pLmVsZW1lbnRzVHlwZSgpIDogbnVsbDsgCisJCQkJaW50IGlubmVySW5mZXJlbmNlS2luZCA9
IGlubmVyTWVzc2FnZS5pbmZlcmVuY2VLaW5kKCk7CiAJCQkJRXhwcmVzc2lvbltdIGFyZ3VtZW50
cyA9IGlubmVyTWVzc2FnZS5hcmd1bWVudHMoKTsKIAkJCQlpZiAoYXJndW1lbnRzICE9IG51bGwp
IHsKIAkJCQkJZm9yIChpbnQgaiA9IDA7IGogPCBhcmd1bWVudHMubGVuZ3RoOyBqKyspIHsKLQkJ
CQkJCVR5cGVCaW5kaW5nIHBhcmFtID0gKHZhckFyZ3NUeXBlID09IG51bGwgfHwgKGogPCBpbm5l
clBhcmFtZXRlcnMubGVuZ3RoLTEpKQotCQkJCQkJCQkJCQkJPyBpbm5lclBhcmFtZXRlcnNbal0K
LQkJCQkJCQkJCQkJCTogdmFyQXJnc1R5cGU7CisJCQkJCQlUeXBlQmluZGluZyBwYXJhbSA9IGdl
dFBhcmFtZXRlcihpbm5lclBhcmFtZXRlcnMsIGosIGlubmVySW5mZXJlbmNlS2luZCk7CiAJCQkJ
CQlhcmd1bWVudHNbal0uY2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRUeXBlKHBhcmFtKTsKIAkJCQkJ
fQogCQkJCX0KQEAgLTY5NCw2ICs3NDcsMzMgQEAgcHVibGljIGNsYXNzIEluZmVyZW5jZUNvbnRl
eHQxOCB7CiAJCQkvLyBpbm5lciBGdW5jdGlvbmFsRXhwcmVzc2lvbiBkb24ndCBzZWVtIHRvIGJl
IGluY2x1ZGVkIGluIGluZmVyZW5jZS4KIAkJCS8vIFRPRE8gcmVjaGVjayBhbnkgaW5xdWlyZXMg
b24gdGhvc2UgYWN0dWFsbHkgaW52b2x2ZSBpbmZlcmVuY2Ugb2Ygd2hpY2ggdGhlIHJlc3VsdHMg
YXJlIGluY2x1ZGVkIGhlcmUuIAogCQl9CisJCWFjY2VwdFBlbmRpbmdGdW5jdGlvbmFscyhib3Vu
ZHMsIHBhcmFtZXRlclR5cGVzLCBpbmZlcmVuY2VLaW5kKTsKKwl9CisKKwkvKioKKwkgKiBSZXRy
aWV2ZSB0aGUgcmFuayd0aCBwYXJhbWV0ZXIsIHBvc3NpYmx5IHJlc3BlY3RpbmcgdmFyYXJncyBp
bnZvY2F0aW9uLCBzZWUgMTUuMTIuMi40LgorCSAqIFJldHVybnMgbnVsbCBpZiBvdXQgb2YgYm91
bmRzIGFuZCBDSEVDS19WQVJBUkcgd2FzIG5vdCByZXF1ZXN0ZWQuIAorCSAqLworCXB1YmxpYyBz
dGF0aWMgVHlwZUJpbmRpbmcgZ2V0UGFyYW1ldGVyKFR5cGVCaW5kaW5nW10gcGFyYW1ldGVycywg
aW50IHJhbmssIGludCBpbmZlcmVuY2VLaW5kKSB7CisJCWlmIChpbmZlcmVuY2VLaW5kID09IENI
RUNLX1ZBUkFSRykgeworCQkJaWYgKHJhbmsgPj0gcGFyYW1ldGVycy5sZW5ndGgtMSkKKwkJCQly
ZXR1cm4gKChBcnJheUJpbmRpbmcpcGFyYW1ldGVyc1twYXJhbWV0ZXJzLmxlbmd0aC0xXSkuZWxl
bWVudHNUeXBlKCk7CQkJCisJCX0gZWxzZSBpZiAocmFuayA+PSBwYXJhbWV0ZXJzLmxlbmd0aCkg
eworCQkJcmV0dXJuIG51bGw7CisJCX0KKwkJcmV0dXJuIHBhcmFtZXRlcnNbcmFua107CisJfQor
CisJcHVibGljIE1ldGhvZEJpbmRpbmcgZ2V0UmV0dXJuUHJvYmxlbU1ldGhvZElmTmVlZGVkKFR5
cGVCaW5kaW5nIGV4cGVjdGVkVHlwZSwgTWV0aG9kQmluZGluZyBtZXRob2QpIHsKKwkJaWYgKElu
ZmVyZW5jZUNvbnRleHQxOC5TSU1VTEFURV9CVUdfSkRLXzgwMjY1MjcgJiYgZXhwZWN0ZWRUeXBl
ICE9IG51bGwgJiYgbWV0aG9kLnJldHVyblR5cGUgaW5zdGFuY2VvZiBSZWZlcmVuY2VCaW5kaW5n
KSB7CisJCQlpZiAobWV0aG9kLnJldHVyblR5cGUuZXJhc3VyZSgpLmlzQ29tcGF0aWJsZVdpdGgo
ZXhwZWN0ZWRUeXBlKSkKKwkJCQlyZXR1cm4gbWV0aG9kOyAvLyBkb24ndCBjb3VudCBhcyBwcm9i
bGVtLgorCQkJUHJvYmxlbU1ldGhvZEJpbmRpbmcgcHJvYmxlbU1ldGhvZCA9IG5ldyBQcm9ibGVt
TWV0aG9kQmluZGluZyhtZXRob2QsIG1ldGhvZC5zZWxlY3RvciwgbWV0aG9kLnBhcmFtZXRlcnMs
IFByb2JsZW1SZWFzb25zLlBhcmFtZXRlcml6ZWRNZXRob2RFeHBlY3RlZFR5cGVQcm9ibGVtKTsK
KwkJCXByb2JsZW1NZXRob2QucmV0dXJuVHlwZSA9IGV4cGVjdGVkVHlwZTsKKwkJCXByb2JsZW1N
ZXRob2QuaW5mZXJlbmNlQ29udGV4dCA9IHRoaXM7CisJCQlyZXR1cm4gcHJvYmxlbU1ldGhvZDsK
KwkJfQorCQlyZXR1cm4gbnVsbDsKIAl9CiAKIAkvLyBkZWJ1Z2dpbmc6CkBAIC04MDgsNCArODg4
LDM0IEBAIHB1YmxpYyBjbGFzcyBJbmZlcmVuY2VDb250ZXh0MTggewogCXB1YmxpYyBzdGF0aWMg
dm9pZCBtaXNzaW5nSW1wbGVtZW50YXRpb24oU3RyaW5nIG1zZykgewogCQl0aHJvdyBuZXcgVW5z
dXBwb3J0ZWRPcGVyYXRpb25FeGNlcHRpb24obXNnKTsKIAl9CisKKwlwdWJsaWMgdm9pZCBhY2Nl
cHRQZW5kaW5nRnVuY3Rpb25hbHMoZmluYWwgQm91bmRTZXQgYWNjZXB0ZWRSZXN1bHQsIFR5cGVC
aW5kaW5nW10gcGFyYW1ldGVyVHlwZXMsIGludCBpbmZlcmVuY2VLaW5kKSB7CisJCWlmIChhY2Nl
cHRlZFJlc3VsdCA9PSBudWxsIHx8IHRoaXMuaW52b2NhdGlvbkFyZ3VtZW50cyA9PSBudWxsKSBy
ZXR1cm47CisJCVN1YnN0aXR1dGlvbiBzdWJzdGl0dXRpb24gPSBuZXcgU3Vic3RpdHV0aW9uKCkg
eworCQkJcHVibGljIExvb2t1cEVudmlyb25tZW50IGVudmlyb25tZW50KCkgeyAKKwkJCQlyZXR1
cm4gSW5mZXJlbmNlQ29udGV4dDE4LnRoaXMuZW52aXJvbm1lbnQ7CisJCQl9CisJCQlwdWJsaWMg
Ym9vbGVhbiBpc1Jhd1N1YnN0aXR1dGlvbigpIHsKKwkJCQlyZXR1cm4gZmFsc2U7CisJCQl9CisJ
CQlwdWJsaWMgVHlwZUJpbmRpbmcgc3Vic3RpdHV0ZShUeXBlVmFyaWFibGVCaW5kaW5nIHR5cGVW
YXJpYWJsZSkgeworCQkJCWlmICh0eXBlVmFyaWFibGUgaW5zdGFuY2VvZiBJbmZlcmVuY2VWYXJp
YWJsZSkgeworCQkJCQlyZXR1cm4gYWNjZXB0ZWRSZXN1bHQuZ2V0SW5zdGFudGlhdGlvbigoSW5m
ZXJlbmNlVmFyaWFibGUpIHR5cGVWYXJpYWJsZSk7CisJCQkJfQorCQkJCXJldHVybiB0eXBlVmFy
aWFibGU7CisJCQl9CisJCX07CisJCWZvciAoaW50IGkgPSAwOyBpIDwgdGhpcy5pbnZvY2F0aW9u
QXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7CisJCQlpZiAoISAodGhpcy5pbnZvY2F0aW9uQXJndW1l
bnRzW2ldIGluc3RhbmNlb2YgRnVuY3Rpb25hbEV4cHJlc3Npb24pKQorCQkJCWNvbnRpbnVlOwor
CQkJRnVuY3Rpb25hbEV4cHJlc3Npb24gZnVuY3Rpb25hbCA9IChGdW5jdGlvbmFsRXhwcmVzc2lv
bikgdGhpcy5pbnZvY2F0aW9uQXJndW1lbnRzW2ldOworCQkJVHlwZUJpbmRpbmcgZXhwZWN0ZWRU
eXBlID0gZnVuY3Rpb25hbC5nZXRMYXN0RXhwZWN0ZWRUeXBlKCk7CisJCQlpZiAoZXhwZWN0ZWRU
eXBlID09IG51bGwpCisJCQkJZXhwZWN0ZWRUeXBlID0gZ2V0UGFyYW1ldGVyKHBhcmFtZXRlclR5
cGVzLCBpLCBpbmZlcmVuY2VLaW5kKTsKKwkJCWlmICghZXhwZWN0ZWRUeXBlLmlzUHJvcGVyVHlw
ZSh0cnVlKSkKKwkJCQlleHBlY3RlZFR5cGUgPSBTY29wZS5zdWJzdGl0dXRlKHN1YnN0aXR1dGlv
biwgZXhwZWN0ZWRUeXBlKTsKKwkJCWZ1bmN0aW9uYWwuc2V0RXhwZWN0ZWRUeXBlKGV4cGVjdGVk
VHlwZSk7CisJCQlmdW5jdGlvbmFsLnJlc29sdmUoZnVuY3Rpb25hbC5lbmNsb3NpbmdTY29wZSk7
CisJCX0KKwl9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1BhcmFtZXRlcml6ZWRHZW5l
cmljTWV0aG9kQmluZGluZy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9QYXJhbWV0ZXJpemVkR2VuZXJp
Y01ldGhvZEJpbmRpbmcuamF2YQppbmRleCBhNmEyMjZjLi44NDRhOTAzIDEwMDY0NAotLS0gYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvbG9va3VwL1BhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5qYXZhCisrKyBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9sb29rdXAvUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nLmphdmEKQEAg
LTIzLDcgKzIzLDYgQEAgcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
bG9va3VwOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuRXhw
cmVzc2lvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkV4
cHJlc3Npb25Db250ZXh0OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxl
ci5hc3QuSW52b2NhdGlvbjsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIuYXN0LlBvbHlFeHByZXNzaW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b21waWxlci5hc3QuV2lsZGNhcmQ7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNv
bXBpbGVyLmNsYXNzZm10LkNsYXNzRmlsZUNvbnN0YW50czsKIApAQCAtNDIsMTAgKzQxLDE0IEBA
IHB1YmxpYyBjbGFzcyBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgZXh0ZW5kcyBQ
YXJhbWV0ZXJpemVkTWV0aG9kQmluZGluCiAgICAgcHVibGljIGJvb2xlYW4gaXNSYXc7IC8vIHNl
dCB0byB0cnVlIGZvciBtZXRob2QgYmVoYXZpbmcgYXMgcmF3IGZvciBzdWJzdGl0dXRpb24gcHVy
cG9zZQogICAgIHByaXZhdGUgTWV0aG9kQmluZGluZyB0aWVicmVha01ldGhvZDsKIAorICAgIElu
ZmVyZW5jZUNvbnRleHQxOCBpbmZlcmVuY2VDb250ZXh0OyAvLyBob2xkIG9uIHRvIHRoaXMgY29u
dGV4dCBmcm9tIGludm9jYXRpb24gYXBwbGljYWJpbGl0eSBpbmZlcmVuY2UgdW50aWwgaW52b2Nh
dGlvbiB0eXBlIGluZmVyZW5jZQorCiAJLyoqCiAJICogUGVyZm9ybSBpbmZlcmVuY2Ugb2YgZ2Vu
ZXJpYyBtZXRob2QgdHlwZSBwYXJhbWV0ZXJzIGFuZC9vciBleHBlY3RlZCB0eXBlCiAJICovCi0J
cHVibGljIHN0YXRpYyBNZXRob2RCaW5kaW5nIGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKE1ldGhv
ZEJpbmRpbmcgb3JpZ2luYWxNZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRzLCBTY29wZSBz
Y29wZSwgSW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUpIHsKKwlwdWJsaWMgc3RhdGljIE1l
dGhvZEJpbmRpbmcgY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoTWV0aG9kQmluZGluZyBvcmlnaW5h
bE1ldGhvZCwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudHMsIFNjb3BlIHNjb3BlLAorCQkJSW52b2Nh
dGlvblNpdGUgaW52b2NhdGlvblNpdGUsIGludCBpbmZlcmVuY2VMZXZlbCkKKwl7CiAJCVBhcmFt
ZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBtZXRob2RTdWJzdGl0dXRlOwogCQlUeXBlVmFy
aWFibGVCaW5kaW5nW10gdHlwZVZhcmlhYmxlcyA9IG9yaWdpbmFsTWV0aG9kLnR5cGVWYXJpYWJs
ZXM7CiAJCVR5cGVCaW5kaW5nW10gc3Vic3RpdHV0ZXMgPSBpbnZvY2F0aW9uU2l0ZS5nZW5lcmlj
VHlwZUFyZ3VtZW50cygpOwpAQCAtNjcsNjEgKzcwLDc2IEBAIHB1YmxpYyBjbGFzcyBQYXJhbWV0
ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgZXh0ZW5kcyBQYXJhbWV0ZXJpemVkTWV0aG9kQmlu
ZGluCiAKIC8vID09PT0gMS44OiBUaGUgbWFpbiBkcml2ZXIgZm9yIGluZmVyZW5jZSBvZiBnZW5l
cmljIG1ldGhvZHM6ID09PT0KIAkJCUluZmVyZW5jZUNvbnRleHQxOCBpbmZDdHgxOCA9IG51bGw7
Ci0JCQlpZiAoc2NvcGUuY29tcGlsZXJPcHRpb25zKCkuc291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxl
Q29uc3RhbnRzLkpESzFfOCkKLQkJCQlpbmZDdHgxOCA9IGludm9jYXRpb25TaXRlLmZyZXNoSW5m
ZXJlbmNlQ29udGV4dChzY29wZSk7CisJCQlpZiAoc2NvcGUuY29tcGlsZXJPcHRpb25zKCkuc291
cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCkgeworCQkJCWlmICgoaW5mZXJl
bmNlTGV2ZWwgJiBJbmZlcmVuY2VDb250ZXh0MTguQVBQTElDQUJJTElUWSkgIT0gMCkKKwkJCQkJ
aW5mQ3R4MTggPSBpbnZvY2F0aW9uU2l0ZS5mcmVzaEluZmVyZW5jZUNvbnRleHQoc2NvcGUpOwor
CQkJCWVsc2UgaWYgKGludm9jYXRpb25TaXRlIGluc3RhbmNlb2YgSW52b2NhdGlvbikKKwkJCQkJ
aW5mQ3R4MTggPSAoKEludm9jYXRpb24pIGludm9jYXRpb25TaXRlKS5pbmZlcmVuY2VDb250ZXh0
KCk7CisJCQl9CiAJCQlpZiAoaW5mQ3R4MTggIT0gbnVsbCkgewotCQkJCWludCBjaGVja0tpbmQg
PSBJbmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tfTE9PU0U7IC8vIFRPRE86IHZhbGlkYXRlIGlmIDIg
cGhhc2UgY2hlY2tpbmcgKHN0cmljdC9sb29zZSArIHZhcmFyZykgaXMgc3VmZmljaWVudC4KLQkJ
CQkvLyAxOC41LjEgKEFwcGxpY2FiaWxpdHkpOgotCQkJCWJvb2xlYW4gaXNEaWFtb25kID0gb3Jp
Z2luYWxNZXRob2QuaXNDb25zdHJ1Y3RvcigpCi0JCQkJCQkmJiBpbnZvY2F0aW9uU2l0ZSBpbnN0
YW5jZW9mIEV4cHJlc3Npb24KLQkJCQkJCSYmICgoRXhwcmVzc2lvbilpbnZvY2F0aW9uU2l0ZSku
aXNQb2x5RXhwcmVzc2lvbihvcmlnaW5hbE1ldGhvZCk7Ci0JCQkJaW5mQ3R4MTguaW5mZXJJbnZv
Y2F0aW9uQXBwbGljYWJpbGl0eShvcmlnaW5hbE1ldGhvZCwgYXJndW1lbnRzLCBpc0RpYW1vbmQs
IGNoZWNrS2luZCk7CiAJCQkJdHJ5IHsKLQkJCQkJQm91bmRTZXQgcHJvdmlzaW9uYWxSZXN1bHQg
PSBpbmZDdHgxOC5zb2x2ZSgpOwotCQkJCQlpZiAocHJvdmlzaW9uYWxSZXN1bHQgPT0gbnVsbCAm
JiBvcmlnaW5hbE1ldGhvZC5pc1ZhcmFyZ3MoKSkgewotCQkJCQkJLy8gY2hlY2sgZm9yIHZhcmlh
YmxlIGFyaXR5IGFwcGxpY2FiaWxpdHkKLQkJCQkJCWluZkN0eDE4ID0gaW52b2NhdGlvblNpdGUu
ZnJlc2hJbmZlcmVuY2VDb250ZXh0KHNjb3BlKTsgLy8gc3RhcnQgb3ZlcgotCQkJCQkJY2hlY2tL
aW5kID0gSW5mZXJlbmNlQ29udGV4dDE4LkNIRUNLX1ZBUkFSRzsKKwkJCQkJQm91bmRTZXQgcHJv
dmlzaW9uYWxSZXN1bHQgPSBudWxsOworCQkJCQlCb3VuZFNldCByZXN1bHQgPSBudWxsOworCQkJ
CQlpbnQgY2hlY2tLaW5kID0gSW5mZXJlbmNlQ29udGV4dDE4LkNIRUNLX0xPT1NFOyAvLyBUT0RP
OiB2YWxpZGF0ZSBpZiAyIHBoYXNlIGNoZWNraW5nIChzdHJpY3QvbG9vc2UgKyB2YXJhcmcpIGlz
IHN1ZmZpY2llbnQuCisJCQkJCWlmICgoaW5mZXJlbmNlTGV2ZWwgJiBJbmZlcmVuY2VDb250ZXh0
MTguQVBQTElDQUJJTElUWSkgIT0gMCkgeworCQkJCQkJLy8gLS0tLSAxOC41LjEgKEFwcGxpY2Fi
aWxpdHkpOiAtLS0tCisJCQkJCQlib29sZWFuIGlzRGlhbW9uZCA9IG9yaWdpbmFsTWV0aG9kLmlz
Q29uc3RydWN0b3IoKQorCQkJCQkJCQkmJiBpbnZvY2F0aW9uU2l0ZSBpbnN0YW5jZW9mIEV4cHJl
c3Npb24KKwkJCQkJCQkJJiYgKChFeHByZXNzaW9uKWludm9jYXRpb25TaXRlKS5pc1BvbHlFeHBy
ZXNzaW9uKG9yaWdpbmFsTWV0aG9kKTsKIAkJCQkJCWluZkN0eDE4LmluZmVySW52b2NhdGlvbkFw
cGxpY2FiaWxpdHkob3JpZ2luYWxNZXRob2QsIGFyZ3VtZW50cywgaXNEaWFtb25kLCBjaGVja0tp
bmQpOwogCQkJCQkJcHJvdmlzaW9uYWxSZXN1bHQgPSBpbmZDdHgxOC5zb2x2ZSgpOwotCQkJCQl9
Ci0JCQkJCUJvdW5kU2V0IHJlc3VsdCA9IGluZkN0eDE4LmN1cnJlbnRCb3VuZHMuY29weSgpOyAv
LyB0aGUgcmVzdWx0IGFmdGVyIHJlZHVjdGlvbiwgd2l0aG91dCBlZmZlY3RzIG9mIHJlc29sdmUo
KQotCQkJCQlpZiAocHJvdmlzaW9uYWxSZXN1bHQgIT0gbnVsbCAmJiBpbmZDdHgxOC5pc1Jlc29s
dmVkKHByb3Zpc2lvbmFsUmVzdWx0KSkgewotCQkJCQkJLy8gMTguNS4yIChJbnZvY2F0aW9uIHR5
cGUpOgotCQkJCQkJVHlwZUJpbmRpbmcgZXhwZWN0ZWRUeXBlID0gaW52b2NhdGlvblNpdGUuaW52
b2NhdGlvblRhcmdldFR5cGUoKTsKLQkJCQkJCWJvb2xlYW4gaGFzUmV0dXJuUHJvYmxlbSA9IGZh
bHNlOwotCQkJCQkJYm9vbGVhbiBpbnZvY2F0aW9uVHlwZUluZmVycmVkID0gZmFsc2U7Ci0JCQkJ
CQlpZiAoZXhwZWN0ZWRUeXBlICE9IG51bGwgfHwgaW52b2NhdGlvblNpdGUuZ2V0RXhwcmVzc2lv
bkNvbnRleHQoKSA9PSBFeHByZXNzaW9uQ29udGV4dC5WQU5JTExBX0NPTlRFWFQpIHsKLQkJCQkJ
CQlyZXN1bHQgPSBpbmZDdHgxOC5pbmZlckludm9jYXRpb25UeXBlKHJlc3VsdCwgZXhwZWN0ZWRU
eXBlLCBpbnZvY2F0aW9uU2l0ZSwgb3JpZ2luYWxNZXRob2QsIGNoZWNrS2luZCk7Ci0JCQkJCQkJ
aW52b2NhdGlvblR5cGVJbmZlcnJlZCA9IHRydWU7Ci0JCQkJCQkJaGFzUmV0dXJuUHJvYmxlbSB8
PSByZXN1bHQgPT0gbnVsbDsKLQkJCQkJCQlpZiAoaGFzUmV0dXJuUHJvYmxlbSkKLQkJCQkJCQkJ
cmVzdWx0ID0gcHJvdmlzaW9uYWxSZXN1bHQ7IC8vIGxldCdzIHByZWZlciBhIHR5cGUgZXJyb3Ig
cmVnYXJkaW5nIHRoZSByZXR1cm4gdHlwZSBvdmVyIHJlcG9ydGluZyBubyBtYXRjaCBhdCBhbGwK
LQkJCQkJCX0gZWxzZSB7Ci0JCQkJCQkJLy8gd2UncmUgbm90IHlldCByZWFkeSBmb3IgaW52b2Nh
dGlvbiB0eXBlIGluZmVyZW5jZQotCQkJCQkJCXJlc3VsdCA9IHByb3Zpc2lvbmFsUmVzdWx0Owor
CQkJCQkJaWYgKHByb3Zpc2lvbmFsUmVzdWx0ID09IG51bGwgJiYgb3JpZ2luYWxNZXRob2QuaXNW
YXJhcmdzKCkpIHsKKwkJCQkJCQkvLyBjaGVjayBmb3IgdmFyaWFibGUgYXJpdHkgYXBwbGljYWJp
bGl0eQorCQkJCQkJCWluZkN0eDE4ID0gaW52b2NhdGlvblNpdGUuZnJlc2hJbmZlcmVuY2VDb250
ZXh0KHNjb3BlKTsgLy8gc3RhcnQgb3ZlcgorCQkJCQkJCWluZkN0eDE4LmluZmVySW52b2NhdGlv
bkFwcGxpY2FiaWxpdHkob3JpZ2luYWxNZXRob2QsIGFyZ3VtZW50cywgaXNEaWFtb25kLCBJbmZl
cmVuY2VDb250ZXh0MTguQ0hFQ0tfVkFSQVJHKTsKKwkJCQkJCQlwcm92aXNpb25hbFJlc3VsdCA9
IGluZkN0eDE4LnNvbHZlKCk7CisJCQkJCQkJaWYgKHByb3Zpc2lvbmFsUmVzdWx0ICE9IG51bGwp
CisJCQkJCQkJCWNoZWNrS2luZCA9IEluZmVyZW5jZUNvbnRleHQxOC5DSEVDS19WQVJBUkc7CisJ
CQkJCQl9CisJCQkJCQlpZiAocHJvdmlzaW9uYWxSZXN1bHQgIT0gbnVsbCAmJiBpbmZDdHgxOC5p
c1Jlc29sdmVkKHByb3Zpc2lvbmFsUmVzdWx0KSkgeworCQkJCQkJCWluZkN0eDE4LnN0b3JlZFNv
bHV0aW9uID0gcHJvdmlzaW9uYWxSZXN1bHQ7CiAJCQkJCQl9CisJCQkJCQlpZiAoaW52b2NhdGlv
blNpdGUgaW5zdGFuY2VvZiBJbnZvY2F0aW9uKSB7CisJCQkJCQkJSW52b2NhdGlvbiBpbnZvY2F0
aW9uID0gKEludm9jYXRpb24paW52b2NhdGlvblNpdGU7CisJCQkJCQkJaW52b2NhdGlvbi5zZXRJ
bmZlcmVuY2VLaW5kKGNoZWNrS2luZCk7CisJCQkJCQl9CisJCQkJCX0gZWxzZSB7CisJCQkJCQlw
cm92aXNpb25hbFJlc3VsdCA9IGluZkN0eDE4LnN0b3JlZFNvbHV0aW9uOworCQkJCQkJaWYgKGlu
dm9jYXRpb25TaXRlIGluc3RhbmNlb2YgSW52b2NhdGlvbikgCisJCQkJCQkJY2hlY2tLaW5kID0g
KChJbnZvY2F0aW9uKWludm9jYXRpb25TaXRlKS5pbmZlcmVuY2VLaW5kKCk7CisJCQkJCX0KKwkJ
CQkJcmVzdWx0ID0gaW5mQ3R4MTguY3VycmVudEJvdW5kcy5jb3B5KCk7IC8vIHRoZSByZXN1bHQg
YWZ0ZXIgcmVkdWN0aW9uLCB3aXRob3V0IGVmZmVjdHMgb2YgcmVzb2x2ZSgpCisJCQkJCVR5cGVC
aW5kaW5nIGV4cGVjdGVkVHlwZSA9IGludm9jYXRpb25TaXRlLmludm9jYXRpb25UYXJnZXRUeXBl
KCk7CisJCQkJCWJvb2xlYW4gaGFzUmV0dXJuUHJvYmxlbSA9IGZhbHNlOworCQkJCQlib29sZWFu
IGludm9jYXRpb25UeXBlSW5mZXJyZWQgPSBmYWxzZTsKKwkJCQkJaWYgKChpbmZlcmVuY2VMZXZl
bCAmIEluZmVyZW5jZUNvbnRleHQxOC5JTlZPQ0FUSU9OX1RZUEUpICE9IDAgLy8gcmVxdWVzdGVk
PworCQkJCQkJCSYmIChleHBlY3RlZFR5cGUgIT0gbnVsbCB8fCBpbnZvY2F0aW9uU2l0ZS5nZXRF
eHByZXNzaW9uQ29udGV4dCgpID09IEV4cHJlc3Npb25Db250ZXh0LlZBTklMTEFfQ09OVEVYVCkp
IHsgLy8gcG9zc2libGU/CisJCQkJCQkvLyAtLS0tIDE4LjUuMiAoSW52b2NhdGlvbiB0eXBlKTog
LS0tLQorCQkJCQkJcmVzdWx0ID0gaW5mQ3R4MTguaW5mZXJJbnZvY2F0aW9uVHlwZShyZXN1bHQs
IGV4cGVjdGVkVHlwZSwgaW52b2NhdGlvblNpdGUsIG9yaWdpbmFsTWV0aG9kLCBjaGVja0tpbmQp
OworCQkJCQkJaW52b2NhdGlvblR5cGVJbmZlcnJlZCA9IHRydWU7CisJCQkJCQloYXNSZXR1cm5Q
cm9ibGVtIHw9IHJlc3VsdCA9PSBudWxsOworCQkJCQkJaWYgKGhhc1JldHVyblByb2JsZW0pCisJ
CQkJCQkJcmVzdWx0ID0gcHJvdmlzaW9uYWxSZXN1bHQ7IC8vIGxldCdzIHByZWZlciBhIHR5cGUg
ZXJyb3IgcmVnYXJkaW5nIHRoZSByZXR1cm4gdHlwZSBvdmVyIHJlcG9ydGluZyBubyBtYXRjaCBh
dCBhbGwKKwkJCQkJfSBlbHNlIHsKKwkJCQkJCS8vIHdlJ3JlIG5vdCB5ZXQgcmVhZHkgZm9yIGlu
dm9jYXRpb24gdHlwZSBpbmZlcmVuY2UKKwkJCQkJCXJlc3VsdCA9IHByb3Zpc2lvbmFsUmVzdWx0
OworCQkJCQl9CisJCQkJCWlmIChyZXN1bHQgIT0gbnVsbCkgeworCQkJCQkJLy8gYXNzZW1ibGUg
dGhlIHNvbHV0aW9uIGV0YzoKIAkJCQkJCVR5cGVCaW5kaW5nW10gc29sdXRpb25zID0gaW5mQ3R4
MTguZ2V0U29sdXRpb25zKHR5cGVWYXJpYWJsZXMsIGludm9jYXRpb25TaXRlLCByZXN1bHQpOwog
CQkJCQkJaWYgKHNvbHV0aW9ucyAhPSBudWxsKSB7CiAJCQkJCQkJCiAJCQkJCQkJbWV0aG9kU3Vi
c3RpdHV0ZSA9IHNjb3BlLmVudmlyb25tZW50KCkuY3JlYXRlUGFyYW1ldGVyaXplZEdlbmVyaWNN
ZXRob2Qob3JpZ2luYWxNZXRob2QsIHNvbHV0aW9ucyk7Ci0JCQkJCQkJCi0JCQkJCQkJaWYgKElu
ZmVyZW5jZUNvbnRleHQxOC5TSU1VTEFURV9CVUdfSkRLXzgwMjY1MjcgJiYgZXhwZWN0ZWRUeXBl
ICE9IG51bGwgJiYgbWV0aG9kU3Vic3RpdHV0ZS5yZXR1cm5UeXBlIGluc3RhbmNlb2YgUmVmZXJl
bmNlQmluZGluZykKLQkJCQkJCQkJaGFzUmV0dXJuUHJvYmxlbSAmPSAhbWV0aG9kU3Vic3RpdHV0
ZS5yZXR1cm5UeXBlLmVyYXN1cmUoKS5pc0NvbXBhdGlibGVXaXRoKGV4cGVjdGVkVHlwZSk7Ci0J
CQkJCQkJaWYgKGhhc1JldHVyblByb2JsZW0pIHsKLQkJCQkJCQkJUHJvYmxlbU1ldGhvZEJpbmRp
bmcgcHJvYmxlbU1ldGhvZCA9IG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZyhtZXRob2RTdWJzdGl0
dXRlLCBtZXRob2RTdWJzdGl0dXRlLnNlbGVjdG9yLCBwYXJhbWV0ZXJzLCBQcm9ibGVtUmVhc29u
cy5QYXJhbWV0ZXJpemVkTWV0aG9kRXhwZWN0ZWRUeXBlUHJvYmxlbSk7Ci0JCQkJCQkJCXByb2Js
ZW1NZXRob2QucmV0dXJuVHlwZSA9IGludm9jYXRpb25TaXRlLmludm9jYXRpb25UYXJnZXRUeXBl
KCk7Ci0JCQkJCQkJCXByb2JsZW1NZXRob2QuaW5mZXJlbmNlQ29udGV4dCA9IGluZkN0eDE4Owot
CQkJCQkJCQlyZXR1cm4gcHJvYmxlbU1ldGhvZDsKLQkJCQkJCQl9Ci0JCQkJCQkJaWYgKGludm9j
YXRpb25TaXRlIGluc3RhbmNlb2YgSW52b2NhdGlvbikgewotCQkJCQkJCQlJbnZvY2F0aW9uIGlu
dm9jYXRpb24gPSAoSW52b2NhdGlvbilpbnZvY2F0aW9uU2l0ZTsKLQkJCQkJCQkJaW52b2NhdGlv
bi5zZXRJbmZlcmVuY2VLaW5kKGNoZWNrS2luZCk7CisJCQkJCQkJaWYgKGhhc1JldHVyblByb2Js
ZW0pIHsgLy8gaWxsZWdhbGx5IHdvcmtpbmcgZnJvbSB0aGUgcHJvdmlzaW9uYWwgcmVzdWx0Pwor
CQkJCQkJCQlNZXRob2RCaW5kaW5nIHByb2JsZW1NZXRob2QgPSBpbmZDdHgxOC5nZXRSZXR1cm5Q
cm9ibGVtTWV0aG9kSWZOZWVkZWQoZXhwZWN0ZWRUeXBlLCBtZXRob2RTdWJzdGl0dXRlKTsKKwkJ
CQkJCQkJaWYgKHByb2JsZW1NZXRob2QgaW5zdGFuY2VvZiBQcm9ibGVtTWV0aG9kQmluZGluZykK
KwkJCQkJCQkJCXJldHVybiBwcm9ibGVtTWV0aG9kOwogCQkJCQkJCX0KIAkJCQkJCQlpZiAoaW52
b2NhdGlvblR5cGVJbmZlcnJlZCkgewotCQkJCQkJCQlpZiAoaW52b2NhdGlvblNpdGUgaW5zdGFu
Y2VvZiBQb2x5RXhwcmVzc2lvbikKLQkJCQkJCQkJCSgoUG9seUV4cHJlc3Npb24pIGludm9jYXRp
b25TaXRlKS5tYXJrSW5mZXJlbmNlRmluaXNoZWQoKTsJCQkJCQkJCQkKLQkJCQkJCQkJaW5mQ3R4
MTgucmViaW5kSW5uZXJQb2xpZXMocmVzdWx0LCBhcmd1bWVudHMpOworCQkJCQkJCQlpbmZDdHgx
OC5yZWJpbmRJbm5lclBvbGllcyhyZXN1bHQsIGFyZ3VtZW50cywgbWV0aG9kU3Vic3RpdHV0ZS5w
YXJhbWV0ZXJzLCBjaGVja0tpbmQpOworCQkJCQkJCX0gZWxzZSB7CisJCQkJCQkJCW1ldGhvZFN1
YnN0aXR1dGUuaW5mZXJlbmNlQ29udGV4dCA9IGluZkN0eDE4OyAvLyBrZWVwIGNvbnRleHQgc28g
d2UgY2FuIGZpbmlzaCBsYXRlcgorCQkJCQkJCQlyZXR1cm4gbWV0aG9kU3Vic3RpdHV0ZTsKIAkJ
CQkJCQl9CiAJCQkJCQkJYnJlYWsgY29tcHV0ZVN1YnN0aXR1dGVzOwogCQkJCQkJfQpAQCAtMjEx
LDYgKzIyOSw3NCBAQCBwdWJsaWMgY2xhc3MgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5k
aW5nIGV4dGVuZHMgUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbgogCQlyZXR1cm4gbWV0aG9kU3Vi
c3RpdHV0ZTsKIAl9CiAKKwlwcml2YXRlIE1ldGhvZEJpbmRpbmcgYm91bmRDaGVjazE4KFNjb3Bl
IHNjb3BlLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50cykKKwl7CisJCVN1YnN0aXR1dGlvbiBzdWJz
dGl0dXRpb24gPSB0aGlzOworCQlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgbWV0
aG9kU3Vic3RpdHV0ZSA9IHRoaXM7CisJCVR5cGVWYXJpYWJsZUJpbmRpbmdbXSBvcmlnaW5hbFR5
cGVWYXJpYWJsZXMgPSB0aGlzLm9yaWdpbmFsTWV0aG9kLnR5cGVWYXJpYWJsZXM7CisJCS8vIG1v
c3RseSBvcmlnaW5hbCBleHRyYWN0IGZyb20gYWJvdmUKKwkJZm9yIChpbnQgaSA9IDAsIGxlbmd0
aCA9IG9yaWdpbmFsVHlwZVZhcmlhYmxlcy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgeworCQkg
ICAgVHlwZVZhcmlhYmxlQmluZGluZyB0eXBlVmFyaWFibGUgPSBvcmlnaW5hbFR5cGVWYXJpYWJs
ZXNbaV07CisJCSAgICBUeXBlQmluZGluZyBzdWJzdGl0dXRlID0gbWV0aG9kU3Vic3RpdHV0ZS50
eXBlQXJndW1lbnRzW2ldOyAvLyByZXRhaW4gZm9yIGRpYWdub3N0aWNzCisJCSAgICAvKiBodHRw
czovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9Mzc1Mzk0LCBUbyBhdm9p
ZCBzcHVyaW91cyBib3VuZHMgY2hlY2sgZmFpbHVyZXMgZHVlIHRvIGNpcmN1bGFyaXR5IGluIGZv
cm1hbCBib3VuZHMsIAorCQkgICAgICAgd2Ugc2hvdWxkIGVsaW1pbmF0ZSBvbmx5IHRoZSBsaW5n
ZXJpbmcgZW1iZWRkZWQgdHlwZSB2YXJpYWJsZSByZWZlcmVuY2VzIGFmdGVyIHN1YnN0aXR1dGlv
biwgbm90IGFsaWVuIHR5cGUgdmFyaWFibGUgcmVmZXJlbmNlcworCQkgICAgICAgdGhhdCBjb25z
dGl0dXRlIHRoZSBpbmZlcmVuY2UgcGVyIHNlLgorCQkgICAgICovIAorCQkgICAgVHlwZUJpbmRp
bmcgc3Vic3RpdHV0ZUZvckNoZWNrczsKKwkJICAgIGlmIChzdWJzdGl0dXRlIGluc3RhbmNlb2Yg
VHlwZVZhcmlhYmxlQmluZGluZykgeworCQkgICAgCXN1YnN0aXR1dGVGb3JDaGVja3MgPSBzdWJz
dGl0dXRlOworCQkgICAgfSBlbHNlIHsKKwkJICAgIAlzdWJzdGl0dXRlRm9yQ2hlY2tzID0gU2Nv
cGUuc3Vic3RpdHV0ZShuZXcgTGluZ2VyaW5nVHlwZVZhcmlhYmxlRWxpbWluYXRvcihvcmlnaW5h
bFR5cGVWYXJpYWJsZXMsIG51bGwsIHNjb3BlKSwgc3Vic3RpdHV0ZSk7IC8vIHdoaWxlIHVzaW5n
IHRoaXMgZm9yIGJvdW5kcyBjaGVjaworCQkgICAgfQorCQkgICAgCisJCQlzd2l0Y2ggKHR5cGVW
YXJpYWJsZS5ib3VuZENoZWNrKHN1YnN0aXR1dGlvbiwgc3Vic3RpdHV0ZUZvckNoZWNrcywgc2Nv
cGUpKSB7CisJCQkJY2FzZSBUeXBlQ29uc3RhbnRzLk1JU01BVENIIDoKKwkJCSAgICAgICAgLy8g
aW5jb21wYXRpYmxlIGR1ZSB0byBib3VuZCBjaGVjaworCQkJCQlpbnQgYXJnTGVuZ3RoID0gYXJn
dW1lbnRzLmxlbmd0aDsKKwkJCQkJVHlwZUJpbmRpbmdbXSBhdWdtZW50ZWRBcmd1bWVudHMgPSBu
ZXcgVHlwZUJpbmRpbmdbYXJnTGVuZ3RoICsgMl07IC8vIGFwcGVuZCBvZmZlbmRpbmcgc3Vic3Rp
dHV0ZSBhbmQgdHlwZVZhcmlhYmxlCisJCQkJCVN5c3RlbS5hcnJheWNvcHkoYXJndW1lbnRzLCAw
LCBhdWdtZW50ZWRBcmd1bWVudHMsIDAsIGFyZ0xlbmd0aCk7CisJCQkJCWF1Z21lbnRlZEFyZ3Vt
ZW50c1thcmdMZW5ndGhdID0gc3Vic3RpdHV0ZTsKKwkJCQkJYXVnbWVudGVkQXJndW1lbnRzW2Fy
Z0xlbmd0aCsxXSA9IHR5cGVWYXJpYWJsZTsKKwkJCSAgICAgICAgcmV0dXJuIG5ldyBQcm9ibGVt
TWV0aG9kQmluZGluZyhtZXRob2RTdWJzdGl0dXRlLCB0aGlzLm9yaWdpbmFsTWV0aG9kLnNlbGVj
dG9yLCBhdWdtZW50ZWRBcmd1bWVudHMsIFByb2JsZW1SZWFzb25zLlBhcmFtZXRlckJvdW5kTWlz
bWF0Y2gpOworCQkJCWNhc2UgVHlwZUNvbnN0YW50cy5VTkNIRUNLRUQgOgorCQkJCQkvLyB0b2xl
cmF0ZSB1bmNoZWNrZWQgYm91bmRzCisJCQkJCW1ldGhvZFN1YnN0aXR1dGUudGFnQml0cyB8PSBU
YWdCaXRzLkhhc1VuY2hlY2tlZFR5cGVBcmd1bWVudEZvckJvdW5kQ2hlY2s7CisJCQkJCWJyZWFr
OworCQkJfQorCQl9CisJCXJldHVybiBudWxsOworCX0KKworCXB1YmxpYyBNZXRob2RCaW5kaW5n
IGluZmVySW52b2NhdGlvblR5cGUoUG9seVNpdGUgc2l0ZSwgVHlwZUJpbmRpbmdbXSBhcmd1bWVu
dFR5cGVzKSB7CisJCUluZmVyZW5jZUNvbnRleHQxOCBpbmZDdHgxOCA9IHRoaXMuaW5mZXJlbmNl
Q29udGV4dDsKKwkJaWYgKGluZkN0eDE4ICE9IG51bGwgJiYgc2l0ZS5pbmZlcmVuY2VLaW5kKCkg
PiAwKSB7CisJCQlUeXBlQmluZGluZyB0YXJnZXRUeXBlID0gc2l0ZS5pbnZvY2F0aW9uVGFyZ2V0
VHlwZSgpOworCQkJUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIGZpbmFsTWV0aG9k
ID0gdGhpczsKKwkJCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBtZXRob2RUb0No
ZWNrID0gdGhpczsKKwkJCQorCQkJYm9vbGVhbiBoYXZlUHJvcGVyVGFyZ2V0VHlwZSA9IHRhcmdl
dFR5cGUgIT0gbnVsbCAmJiB0YXJnZXRUeXBlLmlzUHJvcGVyVHlwZSh0cnVlKTsKKwkJCWlmICho
YXZlUHJvcGVyVGFyZ2V0VHlwZSkgeworCQkJCWZpbmFsTWV0aG9kID0gaW5mQ3R4MTguZ2V0SW52
b2NhdGlvblR5cGVJbmZlcmVuY2VTb2x1dGlvbih0aGlzLm9yaWdpbmFsTWV0aG9kLCBzaXRlLCB0
YXJnZXRUeXBlKTsKKwkJCQlpZiAoZmluYWxNZXRob2QgIT0gbnVsbCkKKwkJCQkJbWV0aG9kVG9D
aGVjayA9IGZpbmFsTWV0aG9kOworCQkJfQorCQkJCisJCQlNZXRob2RCaW5kaW5nIHByb2JsZW1N
ZXRob2QgPSBtZXRob2RUb0NoZWNrLmJvdW5kQ2hlY2sxOChpbmZDdHgxOC5zY29wZSwgYXJndW1l
bnRUeXBlcyk7CisJCQlpZiAocHJvYmxlbU1ldGhvZCAhPSBudWxsKQorCQkJCXJldHVybiBwcm9i
bGVtTWV0aG9kOworCisJCQlpZiAoIWhhdmVQcm9wZXJUYXJnZXRUeXBlICYmIHNpdGUuZ2V0RXhw
cmVzc2lvbkNvbnRleHQoKSAhPSBFeHByZXNzaW9uQ29udGV4dC5WQU5JTExBX0NPTlRFWFQpCisJ
CQkJcmV0dXJuIHRoaXM7IC8vIHN0aWxsIG5vdCByZWFkeSEKKworCQkJaWYgKGZpbmFsTWV0aG9k
ICE9IG51bGwpIHsKKwkJCQlpZiAoaW5mQ3R4MTgucmViaW5kSW5uZXJQb2xpZXMoYXJndW1lbnRU
eXBlcywgZmluYWxNZXRob2QsIHNpdGUpKQorCQkJCQlyZXR1cm4gZmluYWxNZXRob2Q7CisJCQl9
CisJCQlyZXR1cm4gaW5mQ3R4MTguZ2V0UmV0dXJuUHJvYmxlbU1ldGhvZElmTmVlZGVkKHRhcmdl
dFR5cGUsIHRoaXMpOworCQl9CisJCXJldHVybiBudWxsOworCX0KKwogCS8qKgogCSAqIENvbGxl
Y3QgYXJndW1lbnQgdHlwZSBtYXBwaW5nLCBoYW5kbGluZyB2YXJhcmdzCiAJICovCmRpZmYgLS1n
aXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvbG9va3VwL1BvbHlTaXRlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1BvbHlTaXRl
LmphdmEKbmV3IGZpbGUgbW9kZSAxMDA2NDQKaW5kZXggMDAwMDAwMC4uNmQ0ZDk4ZAotLS0gL2Rl
di9udWxsCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUG9seVNpdGUuamF2YQpAQCAtMCwwICsxLDMwIEBA
CisvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKgorICogQ29weXJpZ2h0IChjKSAyMDEzIEdLIFNvZnR3
YXJlIEFHLgorICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNj
b21wYW55aW5nIG1hdGVyaWFscworICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJt
cyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCisgKiB3aGljaCBhY2NvbXBhbmll
cyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdAorICogaHR0cDovL3d3dy5l
Y2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKKyAqCisgKiBUaGlzIGlzIGFuIGltcGxlbWVu
dGF0aW9uIG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVuZGVyIHRo
ZSBKYXZhCisgKiBDb21tdW5pdHkgUHJvY2VzcyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFibGUg
Zm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRpb24gcHVycG9zZXMKKyAqIG9ubHkuIFRoZSBjb2RlIGlz
IG5vdCBjb21wYXRpYmxlIHdpdGggYW55IHNwZWNpZmljYXRpb24gb2YgdGhlIEpDUC4KKyAqCisg
KiBDb250cmlidXRvcnM6CisgKiAgICAgU3RlcGhhbiBIZXJybWFubiAtIGluaXRpYWwgQVBJIGFu
ZCBpbXBsZW1lbnRhdGlvbgorICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCitwYWNrYWdlIG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXA7CisKKy8qKgorICogQWJzdHJhY3Rp
b24gZm9yIEFTVCB0aGF0IGlzIHN1YmplY3QgdG8gaW5mZXJlbmNlLCBlaXRoZXIgcmVhbCBpbnZv
Y2F0aW9ucworICogb3IgcmVmZXJlbmNlIGV4cHJlc3Npb25zIHdoaWNoIG1pbWljIGFzIGludm9j
YXRpb25zIGF0IG9uZSBwb2ludCBkdXJpbmcgaW5mZXJlbmNlLgorICovCitwdWJsaWMgaW50ZXJm
YWNlIFBvbHlTaXRlIGV4dGVuZHMgSW52b2NhdGlvblNpdGUgeworCisJLyoqCisJICogQW5zd2Vy
IG9uZSBvZiB7QGxpbmsgSW5mZXJlbmNlQ29udGV4dDE4I0NIRUNLX1NUUklDVH0sIHtAbGluayBJ
bmZlcmVuY2VDb250ZXh0MTgjQ0hFQ0tfTE9PU0V9IAorCSAqIG9yIHtAbGluayBJbmZlcmVuY2VD
b250ZXh0MTgjQ0hFQ0tfVkFSQVJHfSwgdG8gc2lnbmFsIHdoYXQga2luZCBvZiBpbmZlcmVuY2Ug
aGFzIGJlZW4gdXNlZCwKKwkgKiBvciAwIGlmIG5vIGluZmVyZW5jZSBpcyBhY3RpdmUgb24gdGhp
cyBub2RlLgorCSAqLworCWludCBpbmZlcmVuY2VLaW5kKCk7CisKK30KZGlmZiAtLWdpdCBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9sb29rdXAvU2NvcGUuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YQppbmRleCAw
MmI5YzFhLi5jNzIyODM3IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhCkBAIC02NTcsOCArNjU3LDggQEAgcHVibGljIGFi
c3RyYWN0IGNsYXNzIFNjb3BlIHsKIAkgKiBXaWxsIGFuc3dlciBhIHN1YnN0aXR1dGVkIG1ldGhv
ZCBpbiBjYXNlIHRoZSBtZXRob2Qgd2FzIGdlbmVyaWMgYW5kIHR5cGUgaW5mZXJlbmNlIGdvdCB0
cmlnZ2VyZWQ7CiAJICogaW4gY2FzZSB0aGUgbWV0aG9kIHdhcyBvcmlnaW5hbGx5IGNvbXBhdGli
bGUsIHRoZW4gc2ltcGx5IGFuc3dlciBpdCBiYWNrLgogCSAqLwotCXByb3RlY3RlZCBmaW5hbCBN
ZXRob2RCaW5kaW5nIGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKE1ldGhvZEJpbmRpbmcgbWV0aG9k
LCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50cywgSW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUp
IHsKLQkJcmV0dXJuIGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhvZCwgYXJndW1lbnRzLCBp
bnZvY2F0aW9uU2l0ZSwgZmFsc2UpOworCXByb3RlY3RlZCBmaW5hbCBNZXRob2RCaW5kaW5nIGNv
bXB1dGVDb21wYXRpYmxlTWV0aG9kKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBUeXBlQmluZGluZ1td
IGFyZ3VtZW50cywgSW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUsIGludCBpbmZlcmVuY2VM
ZXZlbCkgeworCQlyZXR1cm4gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kLCBhcmd1bWVu
dHMsIGludm9jYXRpb25TaXRlLCBpbmZlcmVuY2VMZXZlbCwgZmFsc2UpOwogCX0JCiAJLyoqCiAJ
ICogSW50ZXJuYWwgdXNlIG9ubHkKQEAgLTY2Niw3ICs2NjYsOSBAQCBwdWJsaWMgYWJzdHJhY3Qg
Y2xhc3MgU2NvcGUgewogCSAqIFdpbGwgYW5zd2VyIGEgc3Vic3RpdHV0ZWQgbWV0aG9kIGluIGNh
c2UgdGhlIG1ldGhvZCB3YXMgZ2VuZXJpYyBhbmQgdHlwZSBpbmZlcmVuY2UgZ290IHRyaWdnZXJl
ZDsKIAkgKiBpbiBjYXNlIHRoZSBtZXRob2Qgd2FzIG9yaWdpbmFsbHkgY29tcGF0aWJsZSwgdGhl
biBzaW1wbHkgYW5zd2VyIGl0IGJhY2suCiAJICovCi0JcHJvdGVjdGVkIGZpbmFsIE1ldGhvZEJp
bmRpbmcgY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoTWV0aG9kQmluZGluZyBtZXRob2QsIFR5cGVC
aW5kaW5nW10gYXJndW1lbnRzLCBJbnZvY2F0aW9uU2l0ZSBpbnZvY2F0aW9uU2l0ZSwgYm9vbGVh
biB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzKSB7CisJcHJvdGVjdGVkIGZpbmFsIE1ldGhvZEJp
bmRpbmcgY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoTWV0aG9kQmluZGluZyBtZXRob2QsIFR5cGVC
aW5kaW5nW10gYXJndW1lbnRzLAorCQkJSW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUsIGlu
dCBpbmZlcmVuY2VMZXZlbCwgYm9vbGVhbiB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzKQorCXsK
IAkJVHlwZUJpbmRpbmdbXSBnZW5lcmljVHlwZUFyZ3VtZW50cyA9IGludm9jYXRpb25TaXRlLmdl
bmVyaWNUeXBlQXJndW1lbnRzKCk7CiAJCVR5cGVCaW5kaW5nW10gcGFyYW1ldGVycyA9IG1ldGhv
ZC5wYXJhbWV0ZXJzOwogCQlUeXBlVmFyaWFibGVCaW5kaW5nW10gdHlwZVZhcmlhYmxlcyA9IG1l
dGhvZC50eXBlVmFyaWFibGVzOwpAQCAtNzAwLDcgKzcwMiw3IEBAIHB1YmxpYyBhYnN0cmFjdCBj
bGFzcyBTY29wZSB7CiAJCQkJYXJndW1lbnRzID0gbmV3QXJnczsKIAkJCWVsc2UgIC8vIGVuc3Vy
ZSB0aGF0IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKCkgYmVsb3cgY2FuIHVwZGF0ZSBhcmd1bWVu
dHMgd2l0aG91dCBoYXJtaW5nIG91ciBjYWxsZXI6IChUT0RPOiBhbHdheXMgY29weSBiZWZvcmUg
dGhlIGxvb3A/IG9ubHkgaW4gMS44PykKIAkJCQlTeXN0ZW0uYXJyYXljb3B5KGFyZ3VtZW50cywg
MCwgYXJndW1lbnRzPW5ldyBUeXBlQmluZGluZ1thcmdMZW5ndGhdLCAwLCBhcmdMZW5ndGgpOwot
CQkJbWV0aG9kID0gUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nLmNvbXB1dGVDb21w
YXRpYmxlTWV0aG9kKG1ldGhvZCwgYXJndW1lbnRzLCB0aGlzLCBpbnZvY2F0aW9uU2l0ZSk7CisJ
CQltZXRob2QgPSBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcuY29tcHV0ZUNvbXBh
dGlibGVNZXRob2QobWV0aG9kLCBhcmd1bWVudHMsIHRoaXMsIGludm9jYXRpb25TaXRlLCBpbmZl
cmVuY2VMZXZlbCk7CiAJCQlpZiAobWV0aG9kID09IG51bGwpIHJldHVybiBudWxsOyAvLyBpbmNv
bXBhdGlibGUKIAkJCWlmICghbWV0aG9kLmlzVmFsaWRCaW5kaW5nKCkpIHJldHVybiBtZXRob2Q7
IC8vIGJvdW5kIGNoZWNrIGlzc3VlIGlzIHRha2luZyBwcmVjZWRlbmNlCiAJCX0gZWxzZSBpZiAo
Z2VuZXJpY1R5cGVBcmd1bWVudHMgIT0gbnVsbCAmJiBjb21waWxlck9wdGlvbnMuY29tcGxpYW5j
ZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfNykgewpAQCAtNzQ0LDggKzc0Niw1MyBA
QCBwdWJsaWMgYWJzdHJhY3QgY2xhc3MgU2NvcGUgewogCS8vIEZJWE1FKHN0ZXBoYW4pOiBmaW5h
bCBpbnRlZ3JhdGlvbiBpbnRvIHRoZSBjb2RlCiAJcHJpdmF0ZSBpbnQgbXlQYXJhbWV0ZXJDb21w
YXRpYmlsaXR5TGV2ZWwoTWV0aG9kQmluZGluZyBtZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1l
bnRzLCBib29sZWFuIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMsIEludm9jYXRpb25TaXRlIHNp
dGUpIHsKIAkJaWYgKHNpdGUgaW5zdGFuY2VvZiBJbnZvY2F0aW9uKSB7Ci0JCQlpZiAoKChJbnZv
Y2F0aW9uKSBzaXRlKS5pbmZlcmVuY2VLaW5kKCkgPiAwKQorCQkJSW52b2NhdGlvbiBpbnZvY2F0
aW9uID0gKEludm9jYXRpb24pIHNpdGU7CisJCQlpZiAoaW52b2NhdGlvbi5pbmZlcmVuY2VLaW5k
KCkgPiAwKQogCQkJCXJldHVybiBDT01QQVRJQkxFOyAvLyBpbmZlcmVuY2UgaXMgcmVzcG9uc2li
bGUsIG5vIG5lZWQgdG8gcmVjaGVjaworCisJCQkvLyBjb2xsZWN0IGlubmVyIGludm9jYXRpb25z
IHdoZXJlIHRoZSBvdXRlciBkaWQgbm90IGludm9sdmUgYW55IGluZmVyZW5jZToKKwkJCUV4cHJl
c3Npb25bXSBpbnZvY2F0aW9uQXJndW1lbnRzID0gaW52b2NhdGlvbi5hcmd1bWVudHMoKTsKKwkJ
CWlmIChpbnZvY2F0aW9uQXJndW1lbnRzICE9IG51bGwpIHsKKwkJCQlpbnQgYXJnTGVuID0gaW52
b2NhdGlvbkFyZ3VtZW50cy5sZW5ndGg7CisJCQkJaW50IGluZmVyZW5jZUtpbmQgPSBpbnZvY2F0
aW9uLmluZmVyZW5jZUtpbmQoKTsKKwkJCQlmb3IgKGludCBpID0gMDsgaSA8IGFyZ0xlbjsgaSsr
KSB7CisJCQkJCUV4cHJlc3Npb24gaW52b2NBcmcgPSBpbnZvY2F0aW9uQXJndW1lbnRzW2ldOwor
CQkJCQlpZiAoaW52b2NBcmcgaW5zdGFuY2VvZiBJbnZvY2F0aW9uICYmIGludm9jQXJnLnJlc29s
dmVkVHlwZSAhPSBudWxsKSB7IC8vIFRPRE8gYW55IHBvbHkKKwkJCQkJCVR5cGVCaW5kaW5nIHRh
cmdldFR5cGUgPSBJbmZlcmVuY2VDb250ZXh0MTguZ2V0UGFyYW1ldGVyKG1ldGhvZC5wYXJhbWV0
ZXJzLCBpLCBpbmZlcmVuY2VLaW5kKTsKKwkJCQkJCWlmICh0YXJnZXRUeXBlID09IG51bGwpIHsK
KwkJCQkJCQlpbmZlcmVuY2VLaW5kID0gSW5mZXJlbmNlQ29udGV4dDE4LkNIRUNLX1ZBUkFSRzsK
KwkJCQkJCQl0YXJnZXRUeXBlID0gSW5mZXJlbmNlQ29udGV4dDE4LmdldFBhcmFtZXRlcihtZXRo
b2QucGFyYW1ldGVycywgaSwgaW5mZXJlbmNlS2luZCk7CisJCQkJCQl9CisJCQkJCQlUeXBlQmlu
ZGluZyByZXNvbHZlZFR5cGUgPSBpbnZvY0FyZy5yZXNvbHZlZFR5cGU7IAorCQkJCQkJaWYgKCFy
ZXNvbHZlZFR5cGUuaXNDb21wYXRpYmxlV2l0aCh0YXJnZXRUeXBlLCB0aGlzKSkgeworCQkJCQkJ
CUludm9jYXRpb24gaW5uZXJQb2x5ID0gKEludm9jYXRpb24pIGludm9jQXJnOworCQkJCQkJCUlu
ZmVyZW5jZUNvbnRleHQxOCBpbmZDdHgxOCA9IGlubmVyUG9seS5pbmZlcmVuY2VDb250ZXh0KCk7
CisJCQkJCQkJaWYgKGluZkN0eDE4ICE9IG51bGwpIHsKKwkJCQkJCQkJTWV0aG9kQmluZGluZyBz
b2x1dGlvbiA9IGluZkN0eDE4LmdldEludm9jYXRpb25UeXBlSW5mZXJlbmNlU29sdXRpb24oaW5u
ZXJQb2x5LCB0YXJnZXRUeXBlKTsKKwkJCQkJCQkJaWYgKHNvbHV0aW9uICE9IG51bGwpIHsKKwkJ
CQkJCQkJCXJldHVybiBpbmZlcmVuY2VLaW5kID09IEluZmVyZW5jZUNvbnRleHQxOC5DSEVDS19W
QVJBUkcgPyBWQVJBUkdTX0NPTVBBVElCTEUgOiBDT01QQVRJQkxFOworCQkJCQkJCQl9IGVsc2Ug
eworCQkJCQkJCQkJTWV0aG9kQmluZGluZyBwcm9ibGVtTWV0aG9kID0gaW5mQ3R4MTguZ2V0UmV0
dXJuUHJvYmxlbU1ldGhvZElmTmVlZGVkKHRhcmdldFR5cGUsIGlubmVyUG9seS5iaW5kaW5nKCkp
OworCQkJCQkJCQkJaWYgKHByb2JsZW1NZXRob2QgIT0gbnVsbCAmJiBwcm9ibGVtTWV0aG9kLmlz
VmFsaWRCaW5kaW5nKCkpCisJCQkJCQkJCQkJcmV0dXJuIENPTVBBVElCTEU7CisJCQkJCQkJCQly
ZXR1cm4gTk9UX0NPTVBBVElCTEU7CisJCQkJCQkJCX0KKwkJCQkJCQl9IGVsc2UgaWYgKGlubmVy
UG9seSBpbnN0YW5jZW9mIEFsbG9jYXRpb25FeHByZXNzaW9uKSB7CisJCQkJCQkJCVR5cGVCaW5k
aW5nW10gdHlwZUFyZ3VtZW50cyA9IHJlc29sdmVkVHlwZS50eXBlQXJndW1lbnRzKCk7CisJCQkJ
CQkJCWlmICh0eXBlQXJndW1lbnRzICE9IG51bGwgJiYgdHlwZUFyZ3VtZW50cy5sZW5ndGggPT0g
MCkgeworCQkJCQkJCQkJQWxsb2NhdGlvbkV4cHJlc3Npb24gYWxsb2MgPSAoQWxsb2NhdGlvbkV4
cHJlc3Npb24pIGlubmVyUG9seTsKKwkJCQkJCQkJCWlmICgoYWxsb2MudHlwZS5iaXRzICYgQVNU
Tm9kZS5Jc0RpYW1vbmQpICE9IDApIHsKKwkJCQkJCQkJCQkvLyBub3QteWV0LWluZmVycmVkIGRp
YW1vbmQ6IGVyYXN1cmUgY29tcGF0aWJpbGl0eSBzaG91bGQgc3VmZmljZSwgZGV0YWlsIHdpbGwg
YmUgY2hlY2tlZCB1c2luZyBpbmZlcmVuY2UKKwkJCQkJCQkJCQlpZiAoaW52b2NBcmcucmVzb2x2
ZWRUeXBlLmlzQ29tcGF0aWJsZVdpdGgodGFyZ2V0VHlwZS5lcmFzdXJlKCksIHRoaXMpKQorCQkJ
CQkJCQkJCQlyZXR1cm4gQ09NUEFUSUJMRTsKKwkJCQkJCQkJCQlyZXR1cm4gTk9UX0NPTVBBVElC
TEU7CisJCQkJCQkJCQl9CisJCQkJCQkJCX0KKwkJCQkJCQl9CisJCQkJCQl9CisJCQkJCX0KKwkJ
CQl9CisJCQl9CiAJCX0KIAkJcmV0dXJuIHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChtZXRo
b2QsIGFyZ3VtZW50cywgdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcyk7CiAJfQpAQCAtMTA4Myw3
ICsxMTMwLDcgQEAgcHVibGljIGFic3RyYWN0IGNsYXNzIFNjb3BlIHsKIAkJCS8vIGFyZ3VtZW50
IHR5cGUgY29tcGF0aWJpbGl0eSBjaGVjawogCQkJZm9yIChpbnQgaSA9IHN0YXJ0Rm91bmRTaXpl
OyBpIDwgZm91bmRTaXplOyBpKyspIHsKIAkJCQlNZXRob2RCaW5kaW5nIG1ldGhvZEJpbmRpbmcg
PSAoTWV0aG9kQmluZGluZykgZm91bmQuZWxlbWVudEF0KGkpOwotCQkJCU1ldGhvZEJpbmRpbmcg
Y29tcGF0aWJsZU1ldGhvZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhvZEJpbmRpbmcs
IGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlKTsKKwkJCQlNZXRob2RCaW5kaW5nIGNvbXBh
dGlibGVNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2RCaW5kaW5nLCBhcmd1
bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSwgSW5mZXJlbmNlQ29udGV4dDE4LkFQUExJQ0FCSUxJ
VFkpOwogCQkJCWlmIChjb21wYXRpYmxlTWV0aG9kICE9IG51bGwpIHsKIAkJCQkJaWYgKGNvbXBh
dGlibGVNZXRob2QuaXNWYWxpZEJpbmRpbmcoKSkgewogCQkJCQkJaWYgKGNvbmNyZXRlTWF0Y2gg
IT0gbnVsbCAmJiBlbnZpcm9ubWVudCgpLm1ldGhvZFZlcmlmaWVyKCkuYXJlTWV0aG9kc0NvbXBh
dGlibGUoY29uY3JldGVNYXRjaCwgY29tcGF0aWJsZU1ldGhvZCkpCkBAIC0xMTA3LDYgKzExNTQs
NyBAQCBwdWJsaWMgYWJzdHJhY3QgY2xhc3MgU2NvcGUgewogCQkJCQlyZXR1cm4gcHJvYmxlbU1l
dGhvZDsgLy8gY2FuIGJlIG51bGwKIAkJCQljb25jcmV0ZU1hdGNoID0gY2FuZGlkYXRlc1swXTsK
IAkJCX0KKwkJCS8vIEZJWE1FIGludm9jYXRpb24gdHlwZSBpbmZlcmVuY2UKIAkJCWNvbXBpbGF0
aW9uVW5pdFNjb3BlKCkucmVjb3JkVHlwZVJlZmVyZW5jZXMoY29uY3JldGVNYXRjaC50aHJvd25F
eGNlcHRpb25zKTsKIAkJCXJldHVybiBjb25jcmV0ZU1hdGNoOwogCQl9CkBAIC0xMTc4LDcgKzEy
MjYsNyBAQCBwdWJsaWMgYWJzdHJhY3QgY2xhc3MgU2NvcGUgewogCQkJCS8vIHRhcmdldGluZyBh
IGdlbmVyaWMgbWV0aG9kIGNvdWxkIGZpbmQgYW4gZXhhY3QgbWF0Y2ggd2l0aCB2YXJpYWJsZSBy
ZXR1cm4gdHlwZQogCQkJCWlmIChpbnZvY2F0aW9uU2l0ZS5nZW5lcmljVHlwZUFyZ3VtZW50cygp
ICE9IG51bGwpIHsKIAkJCQkJLy8gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoLi4pIHdpbGwgcmV0
dXJuIGEgUG9seW1vcnBoaWNNZXRob2RCaW5kaW5nIGlmIG5lZWRlZAotCQkJCQlleGFjdE1ldGhv
ZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKGV4YWN0TWV0aG9kLCBhcmd1bWVudFR5cGVzLCBp
bnZvY2F0aW9uU2l0ZSk7CisJCQkJCWV4YWN0TWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRo
b2QoZXhhY3RNZXRob2QsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlLCBJbmZlcmVuY2VD
b250ZXh0MTguRlVMTF9JTkZFUkVOQ0UpOwogCQkJCX0gZWxzZSBpZiAoKGV4YWN0TWV0aG9kLnRh
Z0JpdHMgJiBUYWdCaXRzLkFubm90YXRpb25Qb2x5bW9ycGhpY1NpZ25hdHVyZSkgIT0gMCkgewog
CQkJCQkvLyBnZW5lcmF0ZSBwb2x5bW9ycGhpYyBtZXRob2QKIAkJCQkJcmV0dXJuIHRoaXMuZW52
aXJvbm1lbnQoKS5jcmVhdGVQb2x5bW9ycGhpY01ldGhvZChleGFjdE1ldGhvZCwgYXJndW1lbnRU
eXBlcyk7CkBAIC0xNTU2LDExICsxNjA0LDI1IEBAIHB1YmxpYyBhYnN0cmFjdCBjbGFzcyBTY29w
ZSB7CiAJCQkvLyBhcmd1bWVudCB0eXBlIGNvbXBhdGliaWxpdHkgY2hlY2sKIAkJCWZvciAoaW50
IGkgPSAwOyBpIDwgZm91bmRTaXplOyBpKyspIHsKIAkJCQlNZXRob2RCaW5kaW5nIG1ldGhvZEJp
bmRpbmcgPSAoTWV0aG9kQmluZGluZykgZm91bmQuZWxlbWVudEF0KGkpOwotCQkJCU1ldGhvZEJp
bmRpbmcgY29tcGF0aWJsZU1ldGhvZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhvZEJp
bmRpbmcsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlKTsKKwkJCQlNZXRob2RCaW5kaW5n
IGNvbXBhdGlibGVNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2RCaW5kaW5n
LCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSwgSW5mZXJlbmNlQ29udGV4dDE4LkFQUExJ
Q0FCSUxJVFkpOwogCQkJCWlmIChjb21wYXRpYmxlTWV0aG9kICE9IG51bGwpIHsKIAkJCQkJaWYg
KGNvbXBhdGlibGVNZXRob2QuaXNWYWxpZEJpbmRpbmcoKSkgewogCQkJCQkJaWYgKGZvdW5kU2l6
ZSA9PSAxICYmIGNvbXBhdGlibGVNZXRob2QuY2FuQmVTZWVuQnkocmVjZWl2ZXJUeXBlLCBpbnZv
Y2F0aW9uU2l0ZSwgdGhpcykpIHsKIAkJCQkJCQkvLyByZXR1cm4gdGhlIHNpbmdsZSB2aXNpYmxl
IG1hdGNoIG5vdworLy8gPT09PSAxLjg6IEZpbmFsaXplIHR5cGUgaW5mZXJlbmNlIG9mIGdlbmVy
aWMgbWV0aG9kczogPT09PQorCQkJCQkJCWlmIChjb21wYXRpYmxlTWV0aG9kIGluc3RhbmNlb2Yg
UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nICYmIGludm9jYXRpb25TaXRlIGluc3Rh
bmNlb2YgUG9seVNpdGUpIHsKKwkJCQkJCQkJUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5k
aW5nIHBhcmFtZXRlcml6ZWRNZXRob2QgPSAoKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmlu
ZGluZykgY29tcGF0aWJsZU1ldGhvZCk7CisJCQkJCQkJCU1ldGhvZEJpbmRpbmcgaW1wcm92ZWQg
PSBwYXJhbWV0ZXJpemVkTWV0aG9kLmluZmVySW52b2NhdGlvblR5cGUoKFBvbHlTaXRlKSBpbnZv
Y2F0aW9uU2l0ZSwgYXJndW1lbnRUeXBlcyk7CisJCQkJCQkJCWlmIChpbXByb3ZlZCAhPSBudWxs
KSB7CisJCQkJCQkJCQlpZiAoaW1wcm92ZWQuaXNWYWxpZEJpbmRpbmcoKSkgeworCQkJCQkJCQkJ
CWNvbXBhdGlibGVNZXRob2QgPSBpbXByb3ZlZDsKKwkJCQkJCQkJCX0gZWxzZSB7CisJCQkJCQkJ
CQkJcHJvYmxlbU1ldGhvZCA9IGltcHJvdmVkOworCQkJCQkJCQkJCWNvbnRpbnVlOworCQkJCQkJ
CQkJfQorCQkJCQkJCQl9CisJCQkJCQkJfQorLy8gPT09PSAxLjggPT09PQogCQkJCQkJCWlmIChz
ZWFyY2hGb3JEZWZhdWx0QWJzdHJhY3RNZXRob2QpCiAJCQkJCQkJCXJldHVybiBmaW5kRGVmYXVs
dEFic3RyYWN0TWV0aG9kKHJlY2VpdmVyVHlwZSwgc2VsZWN0b3IsIGFyZ3VtZW50VHlwZXMsIGlu
dm9jYXRpb25TaXRlLCBjbGFzc0hpZXJhcmNoeVN0YXJ0LCBmb3VuZCwgY29tcGF0aWJsZU1ldGhv
ZCk7CiAJCQkJCQkJdW5pdFNjb3BlLnJlY29yZFR5cGVSZWZlcmVuY2VzKGNvbXBhdGlibGVNZXRo
b2QudGhyb3duRXhjZXB0aW9ucyk7CkBAIC0xNjU1LDYgKzE3MTcsMTcgQEAgcHVibGljIGFic3Ry
YWN0IGNsYXNzIFNjb3BlIHsKIAkJCQlyZXR1cm4gbmV3IFByb2JsZW1NZXRob2RCaW5kaW5nKGNh
bmRpZGF0ZXNbMF0sIGNhbmRpZGF0ZXNbMF0uc2VsZWN0b3IsIGNhbmRpZGF0ZXNbMF0ucGFyYW1l
dGVycywgCiAJCQkJCQljYW5kaWRhdGUuaXNTdGF0aWMoKSAmJiBjYW5kaWRhdGUuZGVjbGFyaW5n
Q2xhc3MuaXNJbnRlcmZhY2UoKSA/IFByb2JsZW1SZWFzb25zLk5vblN0YXRpY09yQWxpZW5UeXBl
UmVjZWl2ZXIgOiBQcm9ibGVtUmVhc29ucy5Ob3RWaXNpYmxlKTsKIAkJCWNhc2UgMSA6CisJCQkJ
Ly8gPT09PSAxLjg6IEZpbmFsaXplIHR5cGUgaW5mZXJlbmNlIG9mIGdlbmVyaWMgbWV0aG9kczog
PT09PQorCQkJCWlmIChjYW5kaWRhdGVzWzBdIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVy
aWNNZXRob2RCaW5kaW5nICYmIGludm9jYXRpb25TaXRlIGluc3RhbmNlb2YgSW52b2NhdGlvbikg
eworCQkJCQlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgcGFyYW1ldGVyaXplZE1l
dGhvZCA9IChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIGNhbmRpZGF0ZXNbMF07
CisJCQkJCUluZmVyZW5jZUNvbnRleHQxOCBpbmZDdHgxOCA9IHBhcmFtZXRlcml6ZWRNZXRob2Qu
aW5mZXJlbmNlQ29udGV4dDsKKwkJCQkJaWYgKGluZkN0eDE4ICE9IG51bGwpIHsKKwkJCQkJCU1l
dGhvZEJpbmRpbmcgaW1wcm92ZWQgPSBwYXJhbWV0ZXJpemVkTWV0aG9kLmluZmVySW52b2NhdGlv
blR5cGUoKEludm9jYXRpb24pIGludm9jYXRpb25TaXRlLCBhcmd1bWVudFR5cGVzKTsKKwkJCQkJ
CWlmIChpbXByb3ZlZCAhPSBudWxsICYmIGltcHJvdmVkLmlzVmFsaWRCaW5kaW5nKCkpCisJCQkJ
CQkJY2FuZGlkYXRlc1swXSA9IGltcHJvdmVkOworCQkJCQl9CisJCQkJfQorCQkJCS8vID09PT0g
MS44ID09PT0KIAkJCQlpZiAoc2VhcmNoRm9yRGVmYXVsdEFic3RyYWN0TWV0aG9kKQogCQkJCQly
ZXR1cm4gZmluZERlZmF1bHRBYnN0cmFjdE1ldGhvZChyZWNlaXZlclR5cGUsIHNlbGVjdG9yLCBh
cmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSwgY2xhc3NIaWVyYXJjaHlTdGFydCwgZm91bmQs
IGNhbmRpZGF0ZXNbMF0pOwogCQkJCXVuaXRTY29wZS5yZWNvcmRUeXBlUmVmZXJlbmNlcyhjYW5k
aWRhdGVzWzBdLnRocm93bkV4Y2VwdGlvbnMpOwpAQCAtMjIwNiw3ICsyMjc5LDcgQEAgcHVibGlj
IGFic3RyYWN0IGNsYXNzIFNjb3BlIHsKIAkJCWlmIChtZXRob2RCaW5kaW5nICE9IG51bGwgJiYg
bWV0aG9kQmluZGluZy5jYW5CZVNlZW5CeShpbnZvY2F0aW9uU2l0ZSwgdGhpcykpIHsKIAkJCSAg
ICAvLyB0YXJnZXRpbmcgYSBub24gZ2VuZXJpYyBjb25zdHJ1Y3RvciB3aXRoIHR5cGUgYXJndW1l
bnRzID8KIAkJCSAgICBpZiAoaW52b2NhdGlvblNpdGUuZ2VuZXJpY1R5cGVBcmd1bWVudHMoKSAh
PSBudWxsKQotCQkJICAgIAltZXRob2RCaW5kaW5nID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2Qo
bWV0aG9kQmluZGluZywgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUpOworCQkJICAgIAlt
ZXRob2RCaW5kaW5nID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kQmluZGluZywgYXJn
dW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUsIEluZmVyZW5jZUNvbnRleHQxOC5GVUxMX0lORkVS
RU5DRSk7CiAJCQkJcmV0dXJuIG1ldGhvZEJpbmRpbmc7CiAJCQl9CiAJCQlNZXRob2RCaW5kaW5n
W10gbWV0aG9kcyA9IHJlY2VpdmVyVHlwZS5nZXRNZXRob2RzKFR5cGVDb25zdGFudHMuSU5JVCwg
YXJndW1lbnRUeXBlcy5sZW5ndGgpOwpAQCAtMjIyMCw3ICsyMjkzLDcgQEAgcHVibGljIGFic3Ry
YWN0IGNsYXNzIFNjb3BlIHsKIAkJCWludCBjb21wYXRpYmxlSW5kZXggPSAwOwogCQkJTWV0aG9k
QmluZGluZyBwcm9ibGVtTWV0aG9kID0gbnVsbDsKIAkJCWZvciAoaW50IGkgPSAwLCBsZW5ndGgg
PSBtZXRob2RzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7Ci0JCQkJTWV0aG9kQmluZGluZyBj
b21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kc1tpXSwgYXJn
dW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUpOworCQkJCU1ldGhvZEJpbmRpbmcgY29tcGF0aWJs
ZU1ldGhvZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhvZHNbaV0sIGFyZ3VtZW50VHlw
ZXMsIGludm9jYXRpb25TaXRlLCBJbmZlcmVuY2VDb250ZXh0MTguQVBQTElDQUJJTElUWSk7CiAJ
CQkJaWYgKGNvbXBhdGlibGVNZXRob2QgIT0gbnVsbCkgewogCQkJCQlpZiAoY29tcGF0aWJsZU1l
dGhvZC5pc1ZhbGlkQmluZGluZygpKQogCQkJCQkJY29tcGF0aWJsZVtjb21wYXRpYmxlSW5kZXgr
K10gPSBjb21wYXRpYmxlTWV0aG9kOwpAQCAtMjUwNSw3ICsyNTc4LDcgQEAgcHVibGljIGFic3Ry
YWN0IGNsYXNzIFNjb3BlIHsKIAkJCQkJCQkJaWYgKGZvdW5kUHJvYmxlbSA9PSBudWxsKQogCQkJ
CQkJCQkJZm91bmRQcm9ibGVtID0gcG9zc2libGU7IC8vIGFuc3dlciBhcyBlcnJvciBjYXNlIG1h
dGNoCiAJCQkJCQkJfSBlbHNlIGlmIChwb3NzaWJsZS5pc1N0YXRpYygpKSB7Ci0JCQkJCQkJCU1l
dGhvZEJpbmRpbmcgY29tcGF0aWJsZU1ldGhvZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKHBv
c3NpYmxlLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSk7CisJCQkJCQkJCU1ldGhvZEJp
bmRpbmcgY29tcGF0aWJsZU1ldGhvZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKHBvc3NpYmxl
LCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSwgSW5mZXJlbmNlQ29udGV4dDE4LkFQUExJ
Q0FCSUxJVFkpOwogCQkJCQkJCQlpZiAoY29tcGF0aWJsZU1ldGhvZCAhPSBudWxsKSB7CiAJCQkJ
CQkJCQlpZiAoY29tcGF0aWJsZU1ldGhvZC5pc1ZhbGlkQmluZGluZygpKSB7CiAJCQkJCQkJCQkJ
aWYgKGNvbXBhdGlibGVNZXRob2QuY2FuQmVTZWVuQnkodW5pdFNjb3BlLmZQYWNrYWdlKSkgewpA
QCAtNDE4MSw3ICs0MjU0LDggQEAgcHVibGljIGFic3RyYWN0IGNsYXNzIFNjb3BlIHsKIAkJCQkJ
CQltZXRob2RUb1Rlc3QgPSBwTmV4dC5vcmlnaW5hbE1ldGhvZDsKIAkJCQkJCX0KIAkJCQkJfQot
CQkJCQlNZXRob2RCaW5kaW5nIGFjY2VwdGFibGUgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZCht
ZXRob2RUb1Rlc3QsIHRpZWJyZWFrTWV0aG9kLnBhcmFtZXRlcnMsIHRpZUJyZWFrSW52b2NhdGlv
blNpdGUsIGxldmVsID09IFZBUkFSR1NfQ09NUEFUSUJMRSk7CisJCQkJCU1ldGhvZEJpbmRpbmcg
YWNjZXB0YWJsZSA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhvZFRvVGVzdCwgdGllYnJl
YWtNZXRob2QucGFyYW1ldGVycywKKwkJCQkJCQl0aWVCcmVha0ludm9jYXRpb25TaXRlLCBJbmZl
cmVuY2VDb250ZXh0MTguSU5WT0NBVElPTl9UWVBFLCBsZXZlbCA9PSBWQVJBUkdTX0NPTVBBVElC
TEUpOwogCQkJCQkvKiBUaGVyZSBhcmUgNCBjaG9pY2VzIHRvIGNvbnNpZGVyIHdpdGggY3VycmVu
dCAmIG5leHQgOgogCQkJCQkgZm9vKEIpICYgZm9vKEEpIHdoZXJlIEIgZXh0ZW5kcyBBCiAJCQkJ
CSAxLiB0aGUgMiBtZXRob2RzIGFyZSBlcXVhbCAoYm90aCBhY2NlcHQgZWFjaCBvdGhlcnMgcGFy
YW1ldGVycykgLT4gd2FudCB0byBjb250aW51ZQpAQCAtNDIwNSw2ICs0Mjc5LDE3IEBAIHB1Ymxp
YyBhYnN0cmFjdCBjbGFzcyBTY29wZSB7CiAJCWlmIChjb3VudCA9PSAxKSB7CiAJCQlmb3IgKGlu
dCBpID0gMDsgaSA8IHZpc2libGVTaXplOyBpKyspIHsKIAkJCQlpZiAobW9yZVNwZWNpZmljW2ld
ICE9IG51bGwpIHsKKwkJCQkJLy8gPT09PSAxLjg6IEZpbmFsaXplIHR5cGUgaW5mZXJlbmNlIG9m
IGdlbmVyaWMgbWV0aG9kczogPT09PQorCQkJCQlpZiAodmlzaWJsZVtpXSBpbnN0YW5jZW9mIFBh
cmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyAmJiBpbnZvY2F0aW9uU2l0ZSBpbnN0YW5j
ZW9mIFBvbHlTaXRlKSB7CisJCQkJCQlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcg
cGFyYW1ldGVyaXplZE1ldGhvZCA9IChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcp
IHZpc2libGVbaV07CisJCQkJCQlJbmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4MTggPSBwYXJhbWV0
ZXJpemVkTWV0aG9kLmluZmVyZW5jZUNvbnRleHQ7CisJCQkJCQlpZiAoaW5mQ3R4MTggIT0gbnVs
bCkgeworCQkJCQkJCU1ldGhvZEJpbmRpbmcgaW1wcm92ZWQgPSBwYXJhbWV0ZXJpemVkTWV0aG9k
LmluZmVySW52b2NhdGlvblR5cGUoKFBvbHlTaXRlKSBpbnZvY2F0aW9uU2l0ZSwgYXJndW1lbnRU
eXBlcyk7CisJCQkJCQkJaWYgKGltcHJvdmVkICE9IG51bGwgJiYgaW1wcm92ZWQuaXNWYWxpZEJp
bmRpbmcoKSkKKwkJCQkJCQkJdmlzaWJsZVtpXSA9IGltcHJvdmVkOworCQkJCQkJfQorCQkJCQl9
CisJCQkJCS8vID09PT0gMS44ID09PT0KIAkJCQkJY29tcGlsYXRpb25Vbml0U2NvcGUoKS5yZWNv
cmRUeXBlUmVmZXJlbmNlcyh2aXNpYmxlW2ldLnRocm93bkV4Y2VwdGlvbnMpOwogCQkJCQlyZXR1
cm4gdmlzaWJsZVtpXTsKIAkJCQl9CkBAIC00NTU0LDcgKzQ2MzksNyBAQCBwdWJsaWMgYWJzdHJh
Y3QgY2xhc3MgU2NvcGUgewogCSAgIHRoYXQgY291bGQgaW5zdGVhZCBiZSBpbnZva2VkIHdpdGgg
aWRlbnRpY2FsIHJlc3VsdHMuIFJldHVybiBudWxsIGlmIG5vIGNvbXBhdGlibGUsIHZpc2libGUs
IG1vc3Qgc3BlY2lmaWMgbWV0aG9kCiAJICAgY291bGQgYmUgZm91bmQuIFRoaXMgbWV0aG9kIGlz
IG1vZGVsZWQgYWZ0ZXIgU2NvcGUuZ2V0Q29uc3RydWN0b3IgYW5kIFNjb3BlLmdldE1ldGhvZC4K
IAkgKi8KLQlwdWJsaWMgTWV0aG9kQmluZGluZyBnZXRTdGF0aWNGYWN0b3J5IChSZWZlcmVuY2VC
aW5kaW5nIGFsbG9jYXRpb25UeXBlLCBSZWZlcmVuY2VCaW5kaW5nIG9yaWdpbmFsRW5jbG9zaW5n
VHlwZSwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzLCBmaW5hbCBJbnZvY2F0aW9uU2l0ZSBh
bGxvY2F0aW9uU2l0ZSkgeworCXB1YmxpYyBNZXRob2RCaW5kaW5nIGdldFN0YXRpY0ZhY3Rvcnkg
KFJlZmVyZW5jZUJpbmRpbmcgYWxsb2NhdGlvblR5cGUsIFJlZmVyZW5jZUJpbmRpbmcgb3JpZ2lu
YWxFbmNsb3NpbmdUeXBlLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMsIGZpbmFsIEludm9j
YXRpb24gYWxsb2NhdGlvblNpdGUpIHsKIAkJVHlwZVZhcmlhYmxlQmluZGluZ1tdIGNsYXNzVHlw
ZVZhcmlhYmxlcyA9IGFsbG9jYXRpb25UeXBlLnR5cGVWYXJpYWJsZXMoKTsKIAkJaW50IGNsYXNz
VHlwZVZhcmlhYmxlc0FyaXR5ID0gY2xhc3NUeXBlVmFyaWFibGVzLmxlbmd0aDsKIAkJTWV0aG9k
QmluZGluZ1tdIG1ldGhvZHMgPSBhbGxvY2F0aW9uVHlwZS5nZXRNZXRob2RzKFR5cGVDb25zdGFu
dHMuSU5JVCwgYXJndW1lbnRUeXBlcy5sZW5ndGgpOwpAQCAtNDY3MCw3ICs0NzU1LDcgQEAgcHVi
bGljIGFic3RyYWN0IGNsYXNzIFNjb3BlIHsKIAkJTWV0aG9kQmluZGluZ1tdIGNvbXBhdGlibGUg
PSBuZXcgTWV0aG9kQmluZGluZ1tzZmldOwogCQlpbnQgY29tcGF0aWJsZUluZGV4ID0gMDsKIAkJ
Zm9yIChpbnQgaSA9IDA7IGkgPCBzZmk7IGkrKykgewotCQkJTWV0aG9kQmluZGluZyBjb21wYXRp
YmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2Qoc3RhdGljRmFjdG9yaWVzW2ldLCBh
cmd1bWVudFR5cGVzLCBhbGxvY2F0aW9uU2l0ZSk7CisJCQlNZXRob2RCaW5kaW5nIGNvbXBhdGli
bGVNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChzdGF0aWNGYWN0b3JpZXNbaV0sIGFy
Z3VtZW50VHlwZXMsIGFsbG9jYXRpb25TaXRlLCBJbmZlcmVuY2VDb250ZXh0MTguQVBQTElDQUJJ
TElUWSk7CiAJCQlpZiAoY29tcGF0aWJsZU1ldGhvZCAhPSBudWxsKSB7CiAJCQkJaWYgKGNvbXBh
dGlibGVNZXRob2QuaXNWYWxpZEJpbmRpbmcoKSkKIAkJCQkJY29tcGF0aWJsZVtjb21wYXRpYmxl
SW5kZXgrK10gPSBjb21wYXRpYmxlTWV0aG9kOwpAQCAtNDY5MCw2ICs0Nzc1LDE5IEBAIHB1Ymxp
YyBhYnN0cmFjdCBjbGFzcyBTY29wZSB7CiAJCWlmICh2aXNpYmxlSW5kZXggPT0gMCkgewogCQkJ
cmV0dXJuIG51bGw7CiAJCX0KKwkJaWYgKHZpc2libGVJbmRleCA9PSAxKSB7CisJCQkvLyA9PT09
IDEuODogRmluYWxpemUgdHlwZSBpbmZlcmVuY2Ugb2YgZ2VuZXJpYyBtZXRob2RzOiA9PT09CisJ
CQlpZiAodmlzaWJsZVswXSBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmlu
ZGluZykgeworCQkJCVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBwYXJhbWV0ZXJp
emVkTWV0aG9kID0gKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgdmlzaWJsZVsw
XTsKKwkJCQlJbmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4MTggPSBwYXJhbWV0ZXJpemVkTWV0aG9k
LmluZmVyZW5jZUNvbnRleHQ7CisJCQkJaWYgKGluZkN0eDE4ICE9IG51bGwpIHsKKwkJCQkJTWV0
aG9kQmluZGluZyBpbXByb3ZlZCA9IHBhcmFtZXRlcml6ZWRNZXRob2QuaW5mZXJJbnZvY2F0aW9u
VHlwZShhbGxvY2F0aW9uU2l0ZSwgYXJndW1lbnRUeXBlcyk7CisJCQkJCWlmIChpbXByb3ZlZCAh
PSBudWxsICYmIGltcHJvdmVkLmlzVmFsaWRCaW5kaW5nKCkpCisJCQkJCQl2aXNpYmxlWzBdID0g
aW1wcm92ZWQ7CisJCQkJfQorCQkJfQorCQkJLy8gPT09PSAxLjggPT09PQorCQl9CiAJCXJldHVy
biB2aXNpYmxlSW5kZXggPT0gMSA/IHZpc2libGVbMF0gOiBtb3N0U3BlY2lmaWNNZXRob2RCaW5k
aW5nKHZpc2libGUsIHZpc2libGVJbmRleCwgYXJndW1lbnRUeXBlcywgYWxsb2NhdGlvblNpdGUs
IGFsbG9jYXRpb25UeXBlKTsKIAl9CiAKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2V2YWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2V2YWwvQ29kZVNuaXBwZXRTY29wZS5qYXZh
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZXZhbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvZXZh
bC9Db2RlU25pcHBldFNjb3BlLmphdmEKaW5kZXggYmEwNGU1MC4uYzNlMDEyMiAxMDA2NDQKLS0t
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZXZhbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvZXZh
bC9Db2RlU25pcHBldFNjb3BlLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvZXZhbC9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvZXZhbC9Db2RlU25pcHBldFNjb3BlLmphdmEKQEAgLTEz
LDYgKzEzLDggQEAKICAqICAgICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBhbmQgaW1w
bGVtZW50YXRpb24KICAqICAgICBKZXNwZXIgUyBNb2xsZXIgPGplc3BlckBzZWxza2FiZXQub3Jn
PiAtIENvbnRyaWJ1dGlvbnMgZm9yCiAgKgkJCQkJCQkJYnVnIDM3ODY3NCAtICJUaGUgbWV0aG9k
IGNhbiBiZSBkZWNsYXJlZCBhcyBzdGF0aWMiIGlzIHdyb25nCisgKiAgICAgU3RlcGhhbiBIZXJy
bWFubiAtIENvbnRyaWJ1dGlvbiBmb3IKKyAqCQkJCQkJCQlCdWcgNDI0MTY3IC0gWzEuOF0gRnVs
bHkgaW50ZWdyYXRlIHR5cGUgaW5mZXJlbmNlIHdpdGggb3ZlcmxvYWQgcmVzb2x1dGlvbiAgICAg
CiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKi8KIHBhY2thZ2Ugb3JnLmVjbGlwc2UuamR0LmludGVy
bmFsLmV2YWw7CiAKQEAgLTIyLDYgKzI0LDcgQEAgaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRl
cm5hbC5jb21waWxlci5sb29rdXAuQXJyYXlCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkJsb2NrU2NvcGU7CiBpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5GaWVsZEJpbmRpbmc7CitpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5JbmZlcmVuY2VDb250ZXh0MTg7
CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5JbnZvY2F0
aW9uU2l0ZTsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3Vw
Lk1ldGhvZEJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVy
Lmxvb2t1cC5QYWNrYWdlQmluZGluZzsKQEAgLTM5OCw3ICs0MDEsNyBAQCBwdWJsaWMgTWV0aG9k
QmluZGluZyBmaW5kTWV0aG9kRm9yQXJyYXkoQXJyYXlCaW5kaW5nIHJlY2VpdmVyVHlwZSwgY2hh
cltdIHNlbGVjdAogCWlmIChtZXRob2RCaW5kaW5nID09IG51bGwpCiAJCXJldHVybiBuZXcgUHJv
YmxlbU1ldGhvZEJpbmRpbmcoc2VsZWN0b3IsIGFyZ3VtZW50VHlwZXMsIFByb2JsZW1SZWFzb25z
Lk5vdEZvdW5kKTsKIAlpZiAobWV0aG9kQmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7Ci0JICAg
IE1ldGhvZEJpbmRpbmcgY29tcGF0aWJsZU1ldGhvZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9k
KG1ldGhvZEJpbmRpbmcsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlKTsKKwkgICAgTWV0
aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0
aG9kQmluZGluZywgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUsIEluZmVyZW5jZUNvbnRl
eHQxOC5GVUxMX0lORkVSRU5DRSk7CiAJICAgIGlmIChjb21wYXRpYmxlTWV0aG9kID09IG51bGwp
CiAJCQlyZXR1cm4gbmV3IFByb2JsZW1NZXRob2RCaW5kaW5nKG1ldGhvZEJpbmRpbmcsIHNlbGVj
dG9yLCBhcmd1bWVudFR5cGVzLCBQcm9ibGVtUmVhc29ucy5Ob3RGb3VuZCk7CiAJICAgIG1ldGhv
ZEJpbmRpbmcgPSBjb21wYXRpYmxlTWV0aG9kOwpAQCAtNTQ0LDcgKzU0Nyw3IEBAIHB1YmxpYyBN
ZXRob2RCaW5kaW5nIGdldENvbnN0cnVjdG9yKFJlZmVyZW5jZUJpbmRpbmcgcmVjZWl2ZXJUeXBl
LCBUeXBlQmluZGluZ1tdCiAJTWV0aG9kQmluZGluZ1tdIGNvbXBhdGlibGUgPSBuZXcgTWV0aG9k
QmluZGluZ1ttZXRob2RzLmxlbmd0aF07CiAJaW50IGNvbXBhdGlibGVJbmRleCA9IDA7CiAJZm9y
IChpbnQgaSA9IDAsIGxlbmd0aCA9IG1ldGhvZHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsK
LQkgICAgTWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVN
ZXRob2QobWV0aG9kc1tpXSwgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUpOworCSAgICBN
ZXRob2RCaW5kaW5nIGNvbXBhdGlibGVNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZCht
ZXRob2RzW2ldLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSwgSW5mZXJlbmNlQ29udGV4
dDE4LkFQUExJQ0FCSUxJVFkpOwogCQlpZiAoY29tcGF0aWJsZU1ldGhvZCAhPSBudWxsKQogCQkJ
Y29tcGF0aWJsZVtjb21wYXRpYmxlSW5kZXgrK10gPSBjb21wYXRpYmxlTWV0aG9kOwogCX0KQEAg
LTU2MCw2ICs1NjMsNyBAQCBwdWJsaWMgTWV0aG9kQmluZGluZyBnZXRDb25zdHJ1Y3RvcihSZWZl
cmVuY2VCaW5kaW5nIHJlY2VpdmVyVHlwZSwgVHlwZUJpbmRpbmdbXQogCQl9CiAJfQogCWlmICh2
aXNpYmxlSW5kZXggPT0gMSkgeworCQkvLyBGSVhNRTogaW52b2NhdGlvbiB0eXBlIGluZmVyZW5j
ZQogCQlyZXR1cm4gdmlzaWJsZVswXTsKIAl9CiAJaWYgKHZpc2libGVJbmRleCA9PSAwKSB7Cg==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>238421</attachid>
            <date>2013-12-17 21:29:00 -0500</date>
            <delta_ts>2013-12-22 07:54:41 -0500</delta_ts>
            <desc>corrected and cleaned-up patch</desc>
            <filename>Bug424167-p2.patch</filename>
            <type>text/plain</type>
            <size>111182</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNUeXBlVGVz
dC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xp
cHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0Lmph
dmEKaW5kZXggMjhkNTllMS4uY2VkMGI1OCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0LmphdmEKQEAgLTQ5OTE0LDcgKzQ5OTE0LDcgQEAg
cHVibGljIHZvaWQgdGVzdDE0MzkoKSB7CiAJCQkiCSAgICAgICBeXl5eXG4iICsgCiAJCQkiTGlz
dCBpcyBhIHJhdyB0eXBlLiBSZWZlcmVuY2VzIHRvIGdlbmVyaWMgdHlwZSBMaXN0PEU+IHNob3Vs
ZCBiZSBwYXJhbWV0ZXJpemVkXG4iICsgCiAJCQkiLS0tLS0tLS0tLVxuIgotCQkJOiAvLyBMaW5l
IDc6IGluIDEuOCA8VD4gaXMgaW5mZXJlZCB0byA8bnVsbD4gPT4gbm90IGEgY2hlY2tlZCBleGNl
cHRpb24gCisJCQk6IC8vIDEuOCBpbmZlcnMgVCBpbiB0aGlzKChMaXN0KSBudWxsLCBudWxsKSB0
byBSdW50aW1lRXhjZXB0aW9uLCBoZW5jZSBubyBlcnJvciBoZXJlICgyLiBhYm92ZSkKIAkJCSIt
LS0tLS0tLS0tXG4iICsgCiAJCQkiMS4gV0FSTklORyBpbiBYLmphdmEgKGF0IGxpbmUgNylcbiIg
KyAKIAkJCSIJdGhpcygoTGlzdCkgbnVsbCwgbnVsbCk7XG4iICsgCkBAIC01MDE1Nyw3ICs1MDE1
Nyw2IEBAIHB1YmxpYyB2b2lkIHRlc3QxNDQ0KCkgewogCQkJIi0tLS0tLS0tLS1cbiIpOwogfQog
Ly9odHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MjYzMjE1IC0g
dmFyaWF0aW9uCi0vLyBGSVhNRSBqYXZhYzggZG9lc24ndCBmaW5kIHRoZSBlcnJvcgogcHVibGlj
IHZvaWQgdGVzdDE0NDUoKSB7CiAJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCiAJCQluZXcgU3RyaW5n
W10gewpAQCAtNTAxODQsOCArNTAxODMsOSBAQCBwdWJsaWMgdm9pZCB0ZXN0MTQ0NSgpIHsKIAkJ
CQkiCQluZXcgPElPRXhjZXB0aW9uPiBYKGwpe30uIDxJT0V4Y2VwdGlvbj4gZm9vKGwpO1xuIiAr
IAogCQkJCSIJfVxuIiArIAogCQkJCSJcbiIgKyAKLQkJCQkifVxuIiwvLy0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
CisJCQkJIn1cbiIsCiAJCQl9LAorCQkJKHRoaXMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxl
Q29uc3RhbnRzLkpESzFfOCA/CiAJCQkiLS0tLS0tLS0tLVxuIiArIAogCQkJIjEuIFdBUk5JTkcg
aW4gWC5qYXZhIChhdCBsaW5lIDgpXG4iICsgCiAJCQkiCXN0YXRpYyB2b2lkIGJhcihMaXN0IGwp
IHtcbiIgKyAKQEAgLTUwMjg2LDcgKzUwMjg2LDEwMCBAQCBwdWJsaWMgdm9pZCB0ZXN0MTQ0NSgp
IHsKIAkJCSIJbmV3IDxJT0V4Y2VwdGlvbj4gWChsKXt9LiA8SU9FeGNlcHRpb24+IGZvbyhsKTtc
biIgKyAKIAkJCSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBe
XG4iICsgCiAJCQkiVHlwZSBzYWZldHk6IFRoZSBleHByZXNzaW9uIG9mIHR5cGUgTGlzdCBuZWVk
cyB1bmNoZWNrZWQgY29udmVyc2lvbiB0byBjb25mb3JtIHRvIExpc3Q8SU9FeGNlcHRpb24+XG4i
ICsgCi0JCQkiLS0tLS0tLS0tLVxuIik7CisJCQkiLS0tLS0tLS0tLVxuIgorCQkJOiAvLyAxLjgg
aW5mZXJzIHR5cGUgcGFyYW1ldGVycyBpbiB0aHJvd3MgY2xhdXNlcyB0byBSdW50aW1lRXhjZXB0
aW9uLCBoZW5jZSBubyBlcnJvcnMKKwkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkiMS4gV0FSTklO
RyBpbiBYLmphdmEgKGF0IGxpbmUgOClcbiIgKyAKKwkJCSIJc3RhdGljIHZvaWQgYmFyKExpc3Qg
bCkge1xuIiArIAorCQkJIgkgICAgICAgICAgICAgICAgXl5eXlxuIiArIAorCQkJIkxpc3QgaXMg
YSByYXcgdHlwZS4gUmVmZXJlbmNlcyB0byBnZW5lcmljIHR5cGUgTGlzdDxFPiBzaG91bGQgYmUg
cGFyYW1ldGVyaXplZFxuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCSIyLiBXQVJOSU5H
IGluIFguamF2YSAoYXQgbGluZSA5KVxuIiArIAorCQkJIgluZXcgWChsKS5mb28obCk7XG4iICsg
CisJCQkiCV5eXl5eXl5eXG4iICsgCisJCQkiVHlwZSBzYWZldHk6IFVuY2hlY2tlZCBpbnZvY2F0
aW9uIFgoTGlzdCkgb2YgdGhlIGdlbmVyaWMgY29uc3RydWN0b3IgWChMaXN0PFQ+KSBvZiB0eXBl
IFhcbiIgKyAKKwkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkiMy4gV0FSTklORyBpbiBYLmphdmEg
KGF0IGxpbmUgOSlcbiIgKyAKKwkJCSIJbmV3IFgobCkuZm9vKGwpO1xuIiArIAorCQkJIgleXl5e
Xl5eXl5eXl5eXl5cbiIgKyAKKwkJCSJUeXBlIHNhZmV0eTogVW5jaGVja2VkIGludm9jYXRpb24g
Zm9vKExpc3QpIG9mIHRoZSBnZW5lcmljIG1ldGhvZCBmb28oTGlzdDxUPikgb2YgdHlwZSBYXG4i
ICsgCisJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJIjQuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBs
aW5lIDkpXG4iICsgCisJCQkiCW5ldyBYKGwpLmZvbyhsKTtcbiIgKyAKKwkJCSIJICAgICAgXlxu
IiArIAorCQkJIlR5cGUgc2FmZXR5OiBUaGUgZXhwcmVzc2lvbiBvZiB0eXBlIExpc3QgbmVlZHMg
dW5jaGVja2VkIGNvbnZlcnNpb24gdG8gY29uZm9ybSB0byBMaXN0PFJ1bnRpbWVFeGNlcHRpb24+
XG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJIjUuIFdBUk5JTkcgaW4gWC5qYXZhIChh
dCBsaW5lIDkpXG4iICsgCisJCQkiCW5ldyBYKGwpLmZvbyhsKTtcbiIgKyAKKwkJCSIJICAgICAg
ICAgICAgIF5cbiIgKyAKKwkJCSJUeXBlIHNhZmV0eTogVGhlIGV4cHJlc3Npb24gb2YgdHlwZSBM
aXN0IG5lZWRzIHVuY2hlY2tlZCBjb252ZXJzaW9uIHRvIGNvbmZvcm0gdG8gTGlzdDxSdW50aW1l
RXhjZXB0aW9uPlxuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCSI2LiBXQVJOSU5HIGlu
IFguamF2YSAoYXQgbGluZSAxMSlcbiIgKyAKKwkJCSIJc3RhdGljIHZvaWQgYmF6KExpc3QgbCkg
dGhyb3dzIElPRXhjZXB0aW9uIHtcbiIgKyAKKwkJCSIJICAgICAgICAgICAgICAgIF5eXl5cbiIg
KyAKKwkJCSJMaXN0IGlzIGEgcmF3IHR5cGUuIFJlZmVyZW5jZXMgdG8gZ2VuZXJpYyB0eXBlIExp
c3Q8RT4gc2hvdWxkIGJlIHBhcmFtZXRlcml6ZWRcbiIgKyAKKwkJCSItLS0tLS0tLS0tXG4iICsg
CisJCQkiNy4gV0FSTklORyBpbiBYLmphdmEgKGF0IGxpbmUgMTIpXG4iICsgCisJCQkiCW5ldyA8
SU9FeGNlcHRpb24+IFgobCkuIDxJT0V4Y2VwdGlvbj4gZm9vKGwpO1xuIiArIAorCQkJIgleXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCQkiVHlwZSBzYWZldHk6IFVuY2hlY2tlZCBpbnZv
Y2F0aW9uIFgoTGlzdCkgb2YgdGhlIGdlbmVyaWMgY29uc3RydWN0b3IgWChMaXN0PFQ+KSBvZiB0
eXBlIFhcbiIgKyAKKwkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkiOC4gV0FSTklORyBpbiBYLmph
dmEgKGF0IGxpbmUgMTIpXG4iICsgCisJCQkiCW5ldyA8SU9FeGNlcHRpb24+IFgobCkuIDxJT0V4
Y2VwdGlvbj4gZm9vKGwpO1xuIiArIAorCQkJIgleXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkJIlR5cGUgc2FmZXR5OiBVbmNoZWNrZWQgaW52b2Nh
dGlvbiBmb28oTGlzdCkgb2YgdGhlIGdlbmVyaWMgbWV0aG9kIGZvbyhMaXN0PFQ+KSBvZiB0eXBl
IFhcbiIgKyAKKwkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkiOS4gV0FSTklORyBpbiBYLmphdmEg
KGF0IGxpbmUgMTIpXG4iICsgCisJCQkiCW5ldyA8SU9FeGNlcHRpb24+IFgobCkuIDxJT0V4Y2Vw
dGlvbj4gZm9vKGwpO1xuIiArIAorCQkJIgkgICAgICAgICAgICAgICAgICAgIF5cbiIgKyAKKwkJ
CSJUeXBlIHNhZmV0eTogVGhlIGV4cHJlc3Npb24gb2YgdHlwZSBMaXN0IG5lZWRzIHVuY2hlY2tl
ZCBjb252ZXJzaW9uIHRvIGNvbmZvcm0gdG8gTGlzdDxJT0V4Y2VwdGlvbj5cbiIgKyAKKwkJCSIt
LS0tLS0tLS0tXG4iICsgCisJCQkiMTAuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDEyKVxu
IiArIAorCQkJIgluZXcgPElPRXhjZXB0aW9uPiBYKGwpLiA8SU9FeGNlcHRpb24+IGZvbyhsKTtc
biIgKyAKKwkJCSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXlxu
IiArIAorCQkJIlR5cGUgc2FmZXR5OiBUaGUgZXhwcmVzc2lvbiBvZiB0eXBlIExpc3QgbmVlZHMg
dW5jaGVja2VkIGNvbnZlcnNpb24gdG8gY29uZm9ybSB0byBMaXN0PElPRXhjZXB0aW9uPlxuIiAr
IAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCSIxMS4gV0FSTklORyBpbiBYLmphdmEgKGF0IGxp
bmUgMTUpXG4iICsgCisJCQkiCVgoTGlzdCBsLCBsb25nIGwyKSB0aHJvd3MgSU9FeGNlcHRpb24g
e1xuIiArIAorCQkJIgkgIF5eXl5cbiIgKyAKKwkJCSJMaXN0IGlzIGEgcmF3IHR5cGUuIFJlZmVy
ZW5jZXMgdG8gZ2VuZXJpYyB0eXBlIExpc3Q8RT4gc2hvdWxkIGJlIHBhcmFtZXRlcml6ZWRcbiIg
KyAKKwkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkiMTIuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBs
aW5lIDE2KVxuIiArIAorCQkJIgk8SU9FeGNlcHRpb24+IHRoaXMobCk7XG4iICsgCisJCQkiCSAg
ICAgICAgICAgICAgXl5eXl5eXl5cbiIgKyAKKwkJCSJUeXBlIHNhZmV0eTogVW5jaGVja2VkIGlu
dm9jYXRpb24gWChMaXN0KSBvZiB0aGUgZ2VuZXJpYyBjb25zdHJ1Y3RvciBYKExpc3Q8VD4pIG9m
IHR5cGUgWFxuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCSIxMy4gV0FSTklORyBpbiBY
LmphdmEgKGF0IGxpbmUgMTYpXG4iICsgCisJCQkiCTxJT0V4Y2VwdGlvbj4gdGhpcyhsKTtcbiIg
KyAKKwkJCSIJICAgICAgICAgICAgICAgICAgIF5cbiIgKyAKKwkJCSJUeXBlIHNhZmV0eTogVGhl
IGV4cHJlc3Npb24gb2YgdHlwZSBMaXN0IG5lZWRzIHVuY2hlY2tlZCBjb252ZXJzaW9uIHRvIGNv
bmZvcm0gdG8gTGlzdDxJT0V4Y2VwdGlvbj5cbiIgKyAKKwkJCSItLS0tLS0tLS0tXG4iICsgCisJ
CQkiMTQuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDE5KVxuIiArIAorCQkJIglzdGF0aWMg
dm9pZCBiYXoyKExpc3QgbCkgdGhyb3dzIElPRXhjZXB0aW9uIHtcbiIgKyAKKwkJCSIJICAgICAg
ICAgICAgICAgICBeXl5eXG4iICsgCisJCQkiTGlzdCBpcyBhIHJhdyB0eXBlLiBSZWZlcmVuY2Vz
IHRvIGdlbmVyaWMgdHlwZSBMaXN0PEU+IHNob3VsZCBiZSBwYXJhbWV0ZXJpemVkXG4iICsgCisJ
CQkiLS0tLS0tLS0tLVxuIiArIAorCQkJIjE1LiBXQVJOSU5HIGluIFguamF2YSAoYXQgbGluZSAy
MClcbiIgKyAKKwkJCSIJbmV3IDxJT0V4Y2VwdGlvbj4gWChsKXt9LiA8SU9FeGNlcHRpb24+IGZv
byhsKTtcbiIgKyAKKwkJCSIJXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCQkiVHlw
ZSBzYWZldHk6IFVuY2hlY2tlZCBpbnZvY2F0aW9uIFgoTGlzdCkgb2YgdGhlIGdlbmVyaWMgY29u
c3RydWN0b3IgWChMaXN0PFQ+KSBvZiB0eXBlIFhcbiIgKyAKKwkJCSItLS0tLS0tLS0tXG4iICsg
CisJCQkiMTYuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDIwKVxuIiArIAorCQkJIgluZXcg
PElPRXhjZXB0aW9uPiBYKGwpe30uIDxJT0V4Y2VwdGlvbj4gZm9vKGwpO1xuIiArIAorCQkJIgle
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCQki
VHlwZSBzYWZldHk6IFVuY2hlY2tlZCBpbnZvY2F0aW9uIGZvbyhMaXN0KSBvZiB0aGUgZ2VuZXJp
YyBtZXRob2QgZm9vKExpc3Q8VD4pIG9mIHR5cGUgWFxuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIg
KyAKKwkJCSIxNy4gV0FSTklORyBpbiBYLmphdmEgKGF0IGxpbmUgMjApXG4iICsgCisJCQkiCW5l
dyA8SU9FeGNlcHRpb24+IFgobCl7fS4gPElPRXhjZXB0aW9uPiBmb28obCk7XG4iICsgCisJCQki
CSAgICAgICAgICAgICAgICAgICAgXlxuIiArIAorCQkJIlR5cGUgc2FmZXR5OiBUaGUgZXhwcmVz
c2lvbiBvZiB0eXBlIExpc3QgbmVlZHMgdW5jaGVja2VkIGNvbnZlcnNpb24gdG8gY29uZm9ybSB0
byBMaXN0PElPRXhjZXB0aW9uPlxuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCSIxOC4g
V0FSTklORyBpbiBYLmphdmEgKGF0IGxpbmUgMjApXG4iICsgCisJCQkiCW5ldyA8SU9FeGNlcHRp
b24+IFgobCl7fS4gPElPRXhjZXB0aW9uPiBmb28obCk7XG4iICsgCisJCQkiCSAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXlxuIiArIAorCQkJIlR5cGUgc2FmZXR5
OiBUaGUgZXhwcmVzc2lvbiBvZiB0eXBlIExpc3QgbmVlZHMgdW5jaGVja2VkIGNvbnZlcnNpb24g
dG8gY29uZm9ybSB0byBMaXN0PElPRXhjZXB0aW9uPlxuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIK
KwkJCSkpOwogfQogLy9odHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/
aWQ9MjAyMzkzCiBwdWJsaWMgdm9pZCB0ZXN0MTQ0NigpIHsKZGlmZiAtLWdpdCBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0
cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3RfMV83LmphdmEgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2Nv
cmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25UZXN0XzFfNy5q
YXZhCmluZGV4IGM4MzQyODEuLjEwZjhhNGQgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxl
ci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3RfMV83LmphdmEKKysrIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rl
c3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVzdF8xXzcuamF2YQpA
QCAtMjQ4LDcgKzI0OCw3IEBAIHB1YmxpYyB2b2lkIHRlc3QwMDFmKCkgewogCQkodGhpcy5jb21w
bGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84ID8KIAkJIlR5cGUgbWlzbWF0
Y2g6IGNhbm5vdCBjb252ZXJ0IGZyb20gWDxPYmplY3Q+LlgyPFN0cmluZz4gdG8gWDxTdHJpbmc+
LlgyPFN0cmluZz5cbiIKIAkJOgotCQkiQ2Fubm90IGluZmVyIHR5cGUgYXJndW1lbnRzIGZvciBY
Mjw+XG4iCisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVydCBmcm9tIFg8T2JqZWN0Pi5Y
MjxPYmplY3Q+IHRvIFg8U3RyaW5nPi5YMjxTdHJpbmc+XG4iCiAJCSkgKwogCQkiLS0tLS0tLS0t
LVxuIik7CiB9CkBAIC0yOTcsNyArMjk3LDcgQEAgcHVibGljIHZvaWQgdGVzdDAwMWcoKSB7CiAJ
CSh0aGlzLmNvbXBsaWFuY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzggPwogCQki
VHlwZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBYPE9iamVjdD4uWDI8SW50ZWdlcj4g
dG8gWDxTdHJpbmc+LlgyPEludGVnZXI+XG4iCiAJCToKLQkJIkNhbm5vdCBpbmZlciB0eXBlIGFy
Z3VtZW50cyBmb3IgWDI8PlxuIgorCQkiVHlwZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJv
bSBYPE9iamVjdD4uWDI8T2JqZWN0PiB0byBYPFN0cmluZz4uWDI8SW50ZWdlcj5cbiIKIAkJKSAr
CiAJCSItLS0tLS0tLS0tXG4iKTsKIH0KQEAgLTM1MCw3ICszNTAsNyBAQCBwdWJsaWMgdm9pZCB0
ZXN0MDAxaCgpIHsKIAkJKHRoaXMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRz
LkpESzFfOCA/CiAJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVydCBmcm9tIFg8T2JqZWN0
Pi5YMjxTdHJpbmc+IHRvIFg8U3RyaW5nPi5YMjxTdHJpbmc+XG4iCiAJCToKLQkJIkNhbm5vdCBp
bmZlciB0eXBlIGFyZ3VtZW50cyBmb3IgWDI8PlxuIgorCQkiVHlwZSBtaXNtYXRjaDogY2Fubm90
IGNvbnZlcnQgZnJvbSBYPE9iamVjdD4uWDI8T2JqZWN0PiB0byBYPFN0cmluZz4uWDI8U3RyaW5n
PlxuIgogCQkpICsKIAkJIi0tLS0tLS0tLS1cbiIgKyAKIAkJIjMuIEVSUk9SIGluIFguamF2YSAo
YXQgbGluZSA5KVxuIiArIApAQCAtNDUwLDcgKzQ1MCw3IEBAIHB1YmxpYyB2b2lkIHRlc3QwMDFp
KCkgewogCQkodGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84
ID8KIAkJIlR5cGUgbWlzbWF0Y2g6IGNhbm5vdCBjb252ZXJ0IGZyb20gWDxPYmplY3Q+LlgyPE9i
amVjdD4uWDIyPFg8U3RyaW5nPj4gdG8gWDxTdHJpbmc+LlgyPEludGVnZXI+LlgyMjxYPFN0cmlu
Zz4+XG4iIAogCQk6Ci0JCSJDYW5ub3QgaW5mZXIgdHlwZSBhcmd1bWVudHMgZm9yIFgyMjw+XG4i
CisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVydCBmcm9tIFg8T2JqZWN0Pi5YMjxPYmpl
Y3Q+LlgyMjxPYmplY3Q+IHRvIFg8U3RyaW5nPi5YMjxJbnRlZ2VyPi5YMjI8WDxTdHJpbmc+Plxu
IgogCQkpICsKIAkJIi0tLS0tLS0tLS1cbiIpOwogfQpAQCAtMTQwOCwyMCArMTQwOCwxMiBAQCBw
dWJsaWMgdm9pZCB0ZXN0MDAzNCgpIHsKIAkJIjYuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAx
OSlcbiIgKyAKIAkJIglYPEludGVnZXI+Llk8U3RyaW5nPiB5NiA9IG5ldyBYPD4oKS5uZXcgWTw+
KDEsXCJcIik7XG4iICsgCiAJCSIJICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXlxuIiArIAotCQkodGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVD
b25zdGFudHMuSkRLMV84ID8KLQkJIlR5cGUgbWlzbWF0Y2g6IGNhbm5vdCBjb252ZXJ0IGZyb20g
WDxPYmplY3Q+Llk8U3RyaW5nPiB0byBYPEludGVnZXI+Llk8U3RyaW5nPlxuIgotCQk6Ci0JCSJD
YW5ub3QgaW5mZXIgdHlwZSBhcmd1bWVudHMgZm9yIFk8PlxuIgotCQkpICsKKwkJIlR5cGUgbWlz
bWF0Y2g6IGNhbm5vdCBjb252ZXJ0IGZyb20gWDxPYmplY3Q+Llk8U3RyaW5nPiB0byBYPEludGVn
ZXI+Llk8U3RyaW5nPlxuIiArCiAJCSItLS0tLS0tLS0tXG4iICsgCiAJCSI3LiBFUlJPUiBpbiBY
LmphdmEgKGF0IGxpbmUgMjApXG4iICsgCiAJCSIJWDxJbnRlZ2VyPi5ZPFN0cmluZz4geTcgPSBu
ZXcgWDw+KCkubmV3IFk8PigxLDEpO1xuIiArIAogCQkiCSAgICAgICAgICAgICAgICAgICAgICAg
ICAgXl5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArCi0JCSh0aGlzLmNvbXBsaWFuY2VMZXZlbCA8
IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzggPwotCQkiVHlwZSBtaXNtYXRjaDogY2Fubm90IGNv
bnZlcnQgZnJvbSBYPE9iamVjdD4uWTxJbnRlZ2VyPiB0byBYPEludGVnZXI+Llk8U3RyaW5nPlxu
IgotCQk6Ci0JCSJDYW5ub3QgaW5mZXIgdHlwZSBhcmd1bWVudHMgZm9yIFk8PlxuIgotCQkpICsK
KwkJIlR5cGUgbWlzbWF0Y2g6IGNhbm5vdCBjb252ZXJ0IGZyb20gWDxPYmplY3Q+Llk8SW50ZWdl
cj4gdG8gWDxJbnRlZ2VyPi5ZPFN0cmluZz5cbiIgKwogCQkiLS0tLS0tLS0tLVxuIik7CiB9CiAv
LyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzQ1NTU5CkBA
IC0xNDY3LDExICsxNDU5LDcgQEAgcHVibGljIHZvaWQgdGVzdDAwMzUoKSB7CiAJCSIyLiBFUlJP
UiBpbiBYLmphdmEgKGF0IGxpbmUgMTgpXG4iICsgCiAJCSIJWDxJbnRlZ2VyPiB4NSA9IG5ldyBY
PD4oXCJcIixcIlwiLFwiXCIpO1xuIiArIAogCQkiCSAgICAgICAgICAgICAgICBeXl5eXl5eXl5e
Xl5eXl5eXlxuIiArIAotCQkodGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFu
dHMuSkRLMV84ID8KLQkJIlR5cGUgbWlzbWF0Y2g6IGNhbm5vdCBjb252ZXJ0IGZyb20gWDxTdHJp
bmc+IHRvIFg8SW50ZWdlcj5cbiIKLQkJOgotCQkiQ2Fubm90IGluZmVyIHR5cGUgYXJndW1lbnRz
IGZvciBYPD5cbiIKLQkJKSArCisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVydCBmcm9t
IFg8U3RyaW5nPiB0byBYPEludGVnZXI+XG4iICsKIAkJIi0tLS0tLS0tLS1cbiIgKyAKIAkJIjMu
IEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAyMClcbiIgKyAKIAkJIglYPEludGVnZXI+Llk8U3Ry
aW5nPiB5MSA9IG5ldyBYPD4oMSwxKS5uZXcgWTw+KCk7XG4iICsgCkBAIC0xNDkxLDIwICsxNDc5
LDEyIEBAIHB1YmxpYyB2b2lkIHRlc3QwMDM1KCkgewogCQkiNi4gRVJST1IgaW4gWC5qYXZhIChh
dCBsaW5lIDI1KVxuIiArIAogCQkiCVg8SW50ZWdlcj4uWTxTdHJpbmc+IHk2ID0gbmV3IFg8Pigp
Lm5ldyBZPD4oMSxcIlwiLDEpO1xuIiArIAogCQkiCSAgICAgICAgICAgICAgICAgICAgICAgICAg
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAotCQkodGhpcy5jb21wbGlhbmNlTGV2ZWwg
PCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84ID8KLQkJIlR5cGUgbWlzbWF0Y2g6IGNhbm5vdCBj
b252ZXJ0IGZyb20gWDxPYmplY3Q+Llk8SW50ZWdlcj4gdG8gWDxJbnRlZ2VyPi5ZPFN0cmluZz5c
biIKLQkJOgotCQkiQ2Fubm90IGluZmVyIHR5cGUgYXJndW1lbnRzIGZvciBZPD5cbiIKLQkJKSAr
CisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVydCBmcm9tIFg8T2JqZWN0Pi5ZPEludGVn
ZXI+IHRvIFg8SW50ZWdlcj4uWTxTdHJpbmc+XG4iICsKIAkJIi0tLS0tLS0tLS1cbiIgKyAKIAkJ
IjcuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAyNilcbiIgKyAKIAkJIglYPEludGVnZXI+Llk8
U3RyaW5nPiB5NyA9IG5ldyBYPD4oKS5uZXcgWTw+KFwiXCIsXCJcIiwxKTtcbiIgKyAKIAkJIgkg
ICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsg
Ci0JCSh0aGlzLmNvbXBsaWFuY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzggPwot
CQkiVHlwZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBYPE9iamVjdD4uWTxJbnRlZ2Vy
PiB0byBYPEludGVnZXI+Llk8U3RyaW5nPlxuIiAKLQkJOgotCQkiQ2Fubm90IGluZmVyIHR5cGUg
YXJndW1lbnRzIGZvciBZPD5cbiIKLQkJKSArCisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29u
dmVydCBmcm9tIFg8T2JqZWN0Pi5ZPEludGVnZXI+IHRvIFg8SW50ZWdlcj4uWTxTdHJpbmc+XG4i
ICsKIAkJIi0tLS0tLS0tLS1cbiIpOwogfQogLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1
Z3Mvc2hvd19idWcuY2dpP2lkPTM0NTU1OQpAQCAtMTU0OCwxMSArMTUyOCw3IEBAIHB1YmxpYyB2
b2lkIHRlc3QwMDM2KCkgewogCQkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDE3KVxuIiAr
IAogCQkiCVg8SW50ZWdlcj4geDUgPSBuZXcgWDw+KFwiXCIsXCJcIixcIlwiKTtcbiIgKyAKIAkJ
IgkgICAgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5cbiIgKyAKLQkJKHRoaXMuY29tcGxp
YW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCA/Ci0JCSJUeXBlIG1pc21hdGNo
OiBjYW5ub3QgY29udmVydCBmcm9tIFg8U3RyaW5nPiB0byBYPEludGVnZXI+XG4iIAotCQk6Ci0J
CSJDYW5ub3QgaW5mZXIgdHlwZSBhcmd1bWVudHMgZm9yIFg8PlxuIgotCQkpICsKKwkJIlR5cGUg
bWlzbWF0Y2g6IGNhbm5vdCBjb252ZXJ0IGZyb20gWDxTdHJpbmc+IHRvIFg8SW50ZWdlcj5cbiIg
KwogCQkiLS0tLS0tLS0tLVxuIiArIAogCQkiMy4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDE5
KVxuIiArIAogCQkiCVg8SW50ZWdlcj4uWTxTdHJpbmc+IHkxID0gbmV3IFg8PigxLDEpLm5ldyBZ
PD4oKTtcbiIgKyAKQEAgLTE1NzIsMjAgKzE1NDgsMTIgQEAgcHVibGljIHZvaWQgdGVzdDAwMzYo
KSB7CiAJCSI2LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMjQpXG4iICsgCiAJCSIJWDxJbnRl
Z2VyPi5ZPFN0cmluZz4geTYgPSBuZXcgWDw+KCkubmV3IFk8PigxLFwiXCIsMSk7XG4iICsgCiAJ
CSIJICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4i
ICsgCi0JCSh0aGlzLmNvbXBsaWFuY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzgg
PwotCQkiVHlwZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBYPE9iamVjdD4uWTxJbnRl
Z2VyPiB0byBYPEludGVnZXI+Llk8U3RyaW5nPlxuIiAKLQkJOgotCQkiQ2Fubm90IGluZmVyIHR5
cGUgYXJndW1lbnRzIGZvciBZPD5cbiIKLQkJKSArCisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3Qg
Y29udmVydCBmcm9tIFg8T2JqZWN0Pi5ZPEludGVnZXI+IHRvIFg8SW50ZWdlcj4uWTxTdHJpbmc+
XG4iICsKIAkJIi0tLS0tLS0tLS1cbiIgKyAKIAkJIjcuIEVSUk9SIGluIFguamF2YSAoYXQgbGlu
ZSAyNSlcbiIgKyAKIAkJIglYPEludGVnZXI+Llk8U3RyaW5nPiB5NyA9IG5ldyBYPD4oKS5uZXcg
WTw+KFwiXCIsXCJcIiwxKTtcbiIgKyAKIAkJIgkgICAgICAgICAgICAgICAgICAgICAgICAgIF5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCi0JCSh0aGlzLmNvbXBsaWFuY2VMZXZlbCA8
IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzggPwotCQkiVHlwZSBtaXNtYXRjaDogY2Fubm90IGNv
bnZlcnQgZnJvbSBYPE9iamVjdD4uWTxJbnRlZ2VyPiB0byBYPEludGVnZXI+Llk8U3RyaW5nPlxu
IiAKLQkJOgotCQkiQ2Fubm90IGluZmVyIHR5cGUgYXJndW1lbnRzIGZvciBZPD5cbiIKLQkJKSAr
CisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVydCBmcm9tIFg8T2JqZWN0Pi5ZPEludGVn
ZXI+IHRvIFg8SW50ZWdlcj4uWTxTdHJpbmc+XG4iICsKIAkJIi0tLS0tLS0tLS1cbiIpOwogfQog
Ly8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM0NTU1OQpA
QCAtMTY0NSwxMSArMTYxMyw3IEBAIHB1YmxpYyB2b2lkIHRlc3QwMDM1YSgpIHsKIAkJIjIuIEVS
Uk9SIGluIFguamF2YSAoYXQgbGluZSAxNClcbiIgKyAKIAkJIglYPEludGVnZXI+IHg1ID0gbmV3
IFg8PihcIlwiLFwiXCIsXCJcIik7XG4iICsgCiAJCSIJICAgICAgICAgICAgICAgIF5eXl5eXl5e
Xl5eXl5eXl5eXG4iICsgCi0JCSh0aGlzLmNvbXBsaWFuY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0
YW50cy5KREsxXzggPwotCQkiVHlwZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBYPFN0
cmluZz4gdG8gWDxJbnRlZ2VyPlxuIiAKLQkJOgotCQkiQ2Fubm90IGluZmVyIHR5cGUgYXJndW1l
bnRzIGZvciBYPD5cbiIKLQkJKSArCisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVydCBm
cm9tIFg8U3RyaW5nPiB0byBYPEludGVnZXI+XG4iICsKIAkJIi0tLS0tLS0tLS1cbiIpOwogfQog
Ly8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM0NTU1OQpA
QCAtMTY4MiwxMSArMTY0Niw3IEBAIHB1YmxpYyB2b2lkIHRlc3QwMDM2YSgpIHsKIAkJIjIuIEVS
Uk9SIGluIFguamF2YSAoYXQgbGluZSAxMylcbiIgKyAKIAkJIglYPEludGVnZXI+IHg1ID0gbmV3
IFg8PihcIlwiLFwiXCIsXCJcIik7XG4iICsgCiAJCSIJICAgICAgICAgICAgICAgIF5eXl5eXl5e
Xl5eXl5eXl5eXG4iICsgCi0JCSh0aGlzLmNvbXBsaWFuY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0
YW50cy5KREsxXzggPwotCQkiVHlwZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBYPFN0
cmluZz4gdG8gWDxJbnRlZ2VyPlxuIiAKLQkJOgotCQkiQ2Fubm90IGluZmVyIHR5cGUgYXJndW1l
bnRzIGZvciBYPD5cbiIKLQkJKSArCisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVydCBm
cm9tIFg8U3RyaW5nPiB0byBYPEludGVnZXI+XG4iICsKIAkJIi0tLS0tLS0tLS1cbiIpOwogfQog
Ly8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM0NTU1OQpA
QCAtMTgyNCwxMSArMTc4NCw3IEBAIHB1YmxpYyB2b2lkIHRlc3QwMDQ0KCkgewogCQkiMS4gRVJS
T1IgaW4gWC5qYXZhIChhdCBsaW5lIDcpXG4iICsgCiAJCSIJWDxTdHJpbmc+Llk8U3RyaW5nPiB4
ID0gbmV3IFg8PigpLm5ldyBZPD4oXCJcIixcIlwiKTtcbiIgKyAKIAkJIgkgICAgICAgICAgICAg
ICAgICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5cbiIgKyAKLQkJKHRoaXMuY29tcGxp
YW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCA/Ci0JCSJUeXBlIG1pc21hdGNo
OiBjYW5ub3QgY29udmVydCBmcm9tIFg8T2JqZWN0Pi5ZPFN0cmluZz4gdG8gWDxTdHJpbmc+Llk8
U3RyaW5nPlxuIgotCQk6Ci0JCSJDYW5ub3QgaW5mZXIgdHlwZSBhcmd1bWVudHMgZm9yIFk8Plxu
IgotCQkpICsKKwkJIlR5cGUgbWlzbWF0Y2g6IGNhbm5vdCBjb252ZXJ0IGZyb20gWDxPYmplY3Q+
Llk8U3RyaW5nPiB0byBYPFN0cmluZz4uWTxTdHJpbmc+XG4iICsKIAkJIi0tLS0tLS0tLS1cbiIp
OwogfQogLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM0
NTk2OApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3Jj
L29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NS
ZWdyZXNzaW9uVGVzdF8xXzguamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBp
bGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dl
bmVyaWNzUmVncmVzc2lvblRlc3RfMV84LmphdmEKaW5kZXggZDVkY2FiNS4uNjk0NDljYSAxMDA2
NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xp
cHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9u
VGVzdF8xXzguamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmlj
c1JlZ3Jlc3Npb25UZXN0XzFfOC5qYXZhCkBAIC0xOSw3ICsxOSw3IEBAIGltcG9ydCBqdW5pdC5m
cmFtZXdvcmsuVGVzdDsKIHB1YmxpYyBjbGFzcyBHZW5lcmljc1JlZ3Jlc3Npb25UZXN0XzFfOCBl
eHRlbmRzIEFic3RyYWN0UmVncmVzc2lvblRlc3QgewogCiBzdGF0aWMgewotLy8JVEVTVFNfTkFN
RVMgPSBuZXcgU3RyaW5nW10geyAidGVzdEJ1ZzQyNDAzOCIgfTsKKy8vCVRFU1RTX05BTUVTID0g
bmV3IFN0cmluZ1tdIHsgInRlc3RCdWc0MjA1MjUiIH07CiAvLwlURVNUU19OVU1CRVJTID0gbmV3
IGludFtdIHsgNDAsIDQxLCA0MywgNDUsIDYzLCA2NCB9OwogLy8JVEVTVFNfUkFOR0UgPSBuZXcg
aW50W10geyAxMSwgLTEgfTsKIH0KQEAgLTIzMCw0ICsyMzAsMzkgQEAgcHVibGljIHZvaWQgdGVz
dEJ1ZzQyMzUwNCgpIHsKIAkJCSJ9XG4iCiAJCX0pOwogfQorLy8gaHR0cHM6Ly9idWdzLmVjbGlw
c2Uub3JnLzQyMDUyNSAtIFsxLjhdIFtjb21waWxlcl0gSW5jb3JyZWN0IGVycm9yICJUaGUgdHlw
ZSBJbnRlZ2VyIGRvZXMgbm90IGRlZmluZSBzdW0oT2JqZWN0LCBPYmplY3QpIHRoYXQgaXMgYXBw
bGljYWJsZSBoZXJlIgorcHVibGljIHZvaWQgX3Rlc3RCdWc0MjA1MjUoKSB7CisJcnVuQ29uZm9y
bVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJpbXBvcnQgamF2YS51
dGlsLkFycmF5TGlzdDtcbiIgKyAKKwkJCSJpbXBvcnQgamF2YS51dGlsLkxpc3Q7XG4iICsgCisJ
CQkiaW1wb3J0IGphdmEudXRpbC5jb25jdXJyZW50LkNvbXBsZXRhYmxlRnV0dXJlO1xuIiArIAor
CQkJImltcG9ydCBqYXZhLnV0aWwuY29uY3VycmVudC5FeGVjdXRpb25FeGNlcHRpb247XG4iICsK
KwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCSIJdm9pZCB0ZXN0KExpc3Q8Q29tcGxldGFi
bGVGdXR1cmU8SW50ZWdlcj4+IGZ1dHVyZXMpIHtcbiIgKyAKKwkJCSIJCUNvbXBsZXRhYmxlRnV0
dXJlLmFsbE9mKGZ1dHVyZXMudG9BcnJheShuZXcgQ29tcGxldGFibGVGdXR1cmU8Pz5bXXt9KSku
dGhlbkFwcGx5QXN5bmMoIChWb2lkIHYpIC0+IHtcbiIgKyAKKwkJCSIJCQlJbnRlZ2VyIGZpbmFs
UmVzdWx0ID0gZnV0dXJlcy5zdHJlYW0oKS5tYXAoIChDb21wbGV0YWJsZUZ1dHVyZTxJbnRlZ2Vy
PiBmKSAtPiB7XG4iICsgCisJCQkiCQkJCXRyeSB7XG4iICsgCisJCQkiCQkJCQlyZXR1cm4gZi5n
ZXQoKTtcbiIgKyAKKwkJCSIJCQkJfSBjYXRjaCAoSW50ZXJydXB0ZWRFeGNlcHRpb24gfCBFeGVj
dXRpb25FeGNlcHRpb24gZSkge1xuIiArIAorCQkJIgkJCQkJcmV0dXJuIDA7XG4iICsgCisJCQki
CQkJCX1cbiIgKyAKKwkJCSIJCQl9KS5yZWR1Y2UoMCwgSW50ZWdlcjo6c3VtKTtcbiIgKyAKKwkJ
CSIJCQlcbiIgKyAKKwkJCSIJCQlsb2coXCJmaW5hbCByZXN1bHQgaXMgXCIgKyBmaW5hbFJlc3Vs
dCk7XG4iICsgCisJCQkiCQkJaWYgKGZpbmFsUmVzdWx0ICE9IDUwKXtcbiIgKyAKKwkJCSIJCQkJ
dGhyb3cgbmV3IFJ1bnRpbWVFeGNlcHRpb24oXCJGQUlMRURcIik7XG4iICsgCisJCQkiCQkJfSBl
bHNle1xuIiArIAorCQkJIgkJCQlsb2coXCJTVUNDRVNTXCIpO1xuIiArIAorCQkJIgkJCX1cbiIg
KyAKKwkJCSIJCQlcbiIgKyAKKwkJCSIJCQlyZXR1cm4gbnVsbDtcbiIgKyAKKwkJCSIJCX0pO1xu
IiArIAorCQkJIlxuIiArIAorCQkJIgl9XG4iICsKKwkJCSIJdm9pZCBsb2coU3RyaW5nIG1zZykg
e31cbiIgKworCQkJIn1cbiIKKwkJfSk7Cit9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29t
cGlsZXIvcmVncmVzc2lvbi9MYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YSBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9j
b21waWxlci9yZWdyZXNzaW9uL0xhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCmluZGV4IDIxYzVj
YmIuLjMzYThkNTMgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBp
bGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0xh
bWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3Rz
LmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNz
aW9uL0xhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCkBAIC0yNSw3ICsyNSw3IEBAIGltcG9ydCBq
dW5pdC5mcmFtZXdvcmsuVGVzdDsKIHB1YmxpYyBjbGFzcyBMYW1iZGFFeHByZXNzaW9uc1Rlc3Qg
ZXh0ZW5kcyBBYnN0cmFjdFJlZ3Jlc3Npb25UZXN0IHsKIAogc3RhdGljIHsKLS8vCVRFU1RTX05B
TUVTID0gbmV3IFN0cmluZ1tdIHsgInRlc3RSZWZlcmVuY2VFeHByZXNzaW9uSW5mZXJlbmNlM2Ei
fTsKKy8vCVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1tdIHsgInRlc3RSZWZlcmVuY2VFeHByZXNz
aW9uSW5mZXJlbmNlMSJ9OwogLy8JVEVTVFNfTlVNQkVSUyA9IG5ldyBpbnRbXSB7IDUwIH07CiAv
LwlURVNUU19SQU5HRSA9IG5ldyBpbnRbXSB7IDExLCAtMSB9OwogfQpkaWZmIC0tZ2l0IGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVnYXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rlc3Qu
amF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBz
ZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRhRXhwcmVz
c2lvbnNUZXN0LmphdmEKaW5kZXggOTRiM2I4MC4uMjdkNWUwZCAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rl
c3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVnYXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2
YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlw
c2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OZWdhdGl2ZUxhbWJkYUV4cHJl
c3Npb25zVGVzdC5qYXZhCkBAIC01NzQ2LDEzICs1NzQ2LDExIEBAIHB1YmxpYyB2b2lkIHRlc3Q0
MDE5MzlhKCkgewogCQkJCSItLS0tLS0tLS0tXG4iICsgCiAJCQkJIjIuIEVSUk9SIGluIFguamF2
YSAoYXQgbGluZSA4KVxuIiArIAogCQkJCSIJZm9vKCgpLT57IGlmICgxID09IDIpIHRocm93IG5l
dyBSdW50aW1lRXhjZXB0aW9uKCk7IH0pO1xuIiArIAotCQkJCSIJICAgIF5eXl5cbiIgKyAKLQkJ
CQkiVGhpcyBtZXRob2QgbXVzdCByZXR1cm4gYSByZXN1bHQgb2YgdHlwZSBpbnRcbiIgKyAKLQkJ
CQkiLS0tLS0tLS0tLVxuIiArIAotCQkJCSIzLiBXQVJOSU5HIGluIFguamF2YSAoYXQgbGluZSA4
KVxuIiArIAotCQkJCSIJZm9vKCgpLT57IGlmICgxID09IDIpIHRocm93IG5ldyBSdW50aW1lRXhj
ZXB0aW9uKCk7IH0pO1xuIiArIAotCQkJCSIJICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCi0JCQkJIkRlYWQgY29kZVxuIiArIAorCQkJCSIJ
Xl5eXG4iICsgCisJCQkJIlRoZSBtZXRob2QgZm9vKEkpIGluIHRoZSB0eXBlIFggaXMgbm90IGFw
cGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKCgpIC0+IHtcbiIgKyAKKwkJCQkiICBpZiAoKDEg
PT0gMikpXG4iICsgCisJCQkJIiAgICAgIHRocm93IG5ldyBSdW50aW1lRXhjZXB0aW9uKCk7XG4i
ICsgCisJCQkJIn0pXG4iICsgCiAJCQkJIi0tLS0tLS0tLS1cbiIpOwogfQogLy8gaHR0cHM6Ly9i
dWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQwMTkzOSwgWzEuOF1bY29tcGls
ZXJdIEluY29ycmVjdCBzaGFwZSBhbmFseXNpcyBsZWFkcyB0byBtZXRob2QgcmVzb2x1dGlvbiBm
YWlsdXJlIC4KQEAgLTc3NDksNCArNzc0Nyw0IEBAIHB1YmxpYyB2b2lkIHRlc3Q0MjM0MjkoKSB7
CiBwdWJsaWMgc3RhdGljIENsYXNzIHRlc3RDbGFzcygpIHsKIAlyZXR1cm4gTmVnYXRpdmVMYW1i
ZGFFeHByZXNzaW9uc1Rlc3QuY2xhc3M7CiB9Ci19ClwgTm8gbmV3bGluZSBhdCBlbmQgb2YgZmls
ZQorfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3Jj
L29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vT3ZlcmxvYWRS
ZXNvbHV0aW9uVGVzdDguamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVy
L3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL092ZXJs
b2FkUmVzb2x1dGlvblRlc3Q4LmphdmEKaW5kZXggNjRhMzQ2YS4uZTM5MGZiMCAxMDA2NDQKLS0t
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pk
dC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vT3ZlcmxvYWRSZXNvbHV0aW9uVGVzdDgu
amF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2Vj
bGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9PdmVybG9hZFJlc29sdXRp
b25UZXN0OC5qYXZhCkBAIC0xMjQsNiArMTI0LDcgQEAgcHVibGljIHZvaWQgdGVzdDAwMygpIHsK
IAkJCSJnb28oSilcbiIgKwogCQkJImdvbyhKKSIpOwogfQorLy8gRkFJTCBjYW5ub3QgZGV0ZWN0
IGVycm9ycyBhZ2FpbnN0IDJuZCBhbmQgM3JkIGxhbWJkYSwgYmVjYXVzZSBvZiBlbmNsb3NpbmdT
Y29wZXNIYXZlRXJyb3JzKCkKIHB1YmxpYyB2b2lkIHRlc3QwMDQoKSB7CiAJdGhpcy5ydW5OZWdh
dGl2ZVRlc3QoCiAJCQluZXcgU3RyaW5nW10gewpAQCAtMTUxLDIxICsxNTIsMjkgQEAgcHVibGlj
IHZvaWQgdGVzdDAwNCgpIHsKIAkJCQkiCX1cbiIgKwogCQkJCSJ9XG4iLAogCQkJfSwKKwkJCS8v
IG5vbmUgb2YgdGhlIGxhbWJkYXMgaXMgY29tcGF0aWJsZSBiZWNhdXNlIG5vbmUgaXMgdmFsdWUt
Y29tcGF0aWJsZSwgd2hlcmVhcyBmb28oKSBuZWVkcyB0byByZXR1cm4gaW50LgogCQkJIi0tLS0t
LS0tLS1cbiIgKyAKIAkJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTEpXG4iICsgCiAJ
CQkiCWdvbygoKS0+IHsgXG4iICsgCi0JCQkiCSAgICBeXl5eXG4iICsgCi0JCQkiVGhpcyBtZXRo
b2QgbXVzdCByZXR1cm4gYSByZXN1bHQgb2YgdHlwZSBpbnRcbiIgKyAKKwkJCSIJXl5eXG4iICsg
CisJCQkiVGhlIG1ldGhvZCBnb28oSikgaW4gdGhlIHR5cGUgWCBpcyBub3QgYXBwbGljYWJsZSBm
b3IgdGhlIGFyZ3VtZW50cyAoKCkgLT4ge1xuIiArIAorCQkJIiAgYm9vbGVhbiB5ID0gdHJ1ZTtc
biIgKyAKKwkJCSIgIHdoaWxlICh5KSAgICA7XG4iICsgCisJCQkifSlcbiIgKyAKIAkJCSItLS0t
LS0tLS0tXG4iICsgCiAJCQkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDE1KVxuIiArIAog
CQkJIglnb28oKCktPiB7IFxuIiArIAotCQkJIgkgICAgXl5eXlxuIiArIAotCQkJIlRoaXMgbWV0
aG9kIG11c3QgcmV0dXJuIGEgcmVzdWx0IG9mIHR5cGUgaW50XG4iICsgCisJCQkiCV5eXlxuIiAr
IAorCQkJIlRoZSBtZXRob2QgZ29vKEopIGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUg
Zm9yIHRoZSBhcmd1bWVudHMgKCgpIC0+IHtcbiIgKyAKKwkJCSIgIHdoaWxlICh4KSAgICA7XG4i
ICsgCisJCQkifSlcbiIgKyAKIAkJCSItLS0tLS0tLS0tXG4iICsgCiAJCQkiMy4gRVJST1IgaW4g
WC5qYXZhIChhdCBsaW5lIDE4KVxuIiArIAogCQkJIglnb28oKCktPiB7IFxuIiArIAotCQkJIgkg
ICAgXl5eXlxuIiArIAotCQkJIlRoaXMgbWV0aG9kIG11c3QgcmV0dXJuIGEgcmVzdWx0IG9mIHR5
cGUgaW50XG4iICsgCisJCQkiCV5eXlxuIiArIAorCQkJIlRoZSBtZXRob2QgZ29vKEopIGluIHRo
ZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKCgpIC0+IHtcbiIg
KyAKKwkJCSIgIHdoaWxlIChmKSAgICA7XG4iICsgCisJCQkifSlcbiIgKyAKIAkJCSItLS0tLS0t
LS0tXG4iKTsKIH0KIHB1YmxpYyB2b2lkIHRlc3QwMDUoKSB7CmRpZmYgLS1naXQgYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVz
dHMvY29tcGlsZXIvcmVncmVzc2lvbi9TdGFja01hcEF0dHJpYnV0ZVRlc3QuamF2YSBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90
ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1N0YWNrTWFwQXR0cmlidXRlVGVzdC5qYXZhCmluZGV4
IDM5MzAwYmIuLmFlNmVjM2UgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3Rz
LmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNz
aW9uL1N0YWNrTWFwQXR0cmlidXRlVGVzdC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
LnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9y
ZWdyZXNzaW9uL1N0YWNrTWFwQXR0cmlidXRlVGVzdC5qYXZhCkBAIC04ODAsMTEgKzg4MCw3IEBA
IHB1YmxpYyBjbGFzcyBTdGFja01hcEF0dHJpYnV0ZVRlc3QgZXh0ZW5kcyBBYnN0cmFjdFJlZ3Jl
c3Npb25UZXN0IHsKIAkJCQkJIiAgICAgICAgW3BjOiAyLCBwYzogMThdIGxvY2FsOiBiYXIgaW5k
ZXg6IDIgdHlwZTogVFxuIiArCiAJCQkJCSIgICAgICBTdGFjayBtYXAgdGFibGU6IG51bWJlciBv
ZiBmcmFtZXMgMlxuIiArCiAJCQkJCSIgICAgICAgIFtwYzogMTMsIGZ1bGwsIHN0YWNrOiB7amF2
YS5pby5QcmludFN0cmVhbX0sIGxvY2Fsczoge1gsIGphdmEubGFuZy5Db21wYXJhYmxlLCBqYXZh
LmxhbmcuQ29tcGFyYWJsZX1dXG4iICsKLQkJCQkJKHRoaXMuY29tcGxpYW5jZUxldmVsIDwgQ2xh
c3NGaWxlQ29uc3RhbnRzLkpESzFfOCA/Ci0JCQkJCSIgICAgICAgIFtwYzogMTQsIGZ1bGwsIHN0
YWNrOiB7amF2YS5pby5QcmludFN0cmVhbSwgamF2YS5sYW5nLkNvbXBhcmFibGV9LCBsb2NhbHM6
IHtYLCBqYXZhLmxhbmcuQ29tcGFyYWJsZSwgamF2YS5sYW5nLkNvbXBhcmFibGV9XVxuIgotCQkJ
CQk6IC8vIGluIDEuOCB0aGUgdGVybmFyeSBpcyByZXNvbHZlZCB0byBpdHMgdGFyZ2V0IHR5cGUg
ai5sLk9iamVjdAotCQkJCQkiICAgICAgICBbcGM6IDE0LCBmdWxsLCBzdGFjazoge2phdmEuaW8u
UHJpbnRTdHJlYW0sIGphdmEubGFuZy5PYmplY3R9LCBsb2NhbHM6IHtYLCBqYXZhLmxhbmcuQ29t
cGFyYWJsZSwgamF2YS5sYW5nLkNvbXBhcmFibGV9XVxuIgotCQkJCQkpOworCQkJCQkiICAgICAg
ICBbcGM6IDE0LCBmdWxsLCBzdGFjazoge2phdmEuaW8uUHJpbnRTdHJlYW0sIGphdmEubGFuZy5D
b21wYXJhYmxlfSwgbG9jYWxzOiB7WCwgamF2YS5sYW5nLkNvbXBhcmFibGUsIGphdmEubGFuZy5D
b21wYXJhYmxlfV1cbiI7CiAKIAkJCWludCBpbmRleCA9IGFjdHVhbE91dHB1dC5pbmRleE9mKGV4
cGVjdGVkT3V0cHV0KTsKIAkJCWlmIChpbmRleCA9PSAtMSB8fCBleHBlY3RlZE91dHB1dC5sZW5n
dGgoKSA9PSAwKSB7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FTVE5vZGUuamF2YSBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hc3QvQVNUTm9kZS5qYXZhCmluZGV4IGIwZmY4ZDguLjgxNGI5NGMgMTAwNjQ0Ci0tLSBhL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9hc3QvQVNUTm9kZS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVy
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQVNUTm9kZS5qYXZhCkBAIC00
NSw3ICs0NSw2IEBAIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9v
a3VwLkJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxv
b2t1cC5CbG9ja1Njb3BlOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxl
ci5sb29rdXAuRXh0cmFDb21waWxlck1vZGlmaWVyczsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkZpZWxkQmluZGluZzsKLWltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkluZmVyZW5jZUNvbnRleHQxODsKIGltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkludm9jYXRpb25TaXRl
OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuTG9jYWxW
YXJpYWJsZUJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVy
Lmxvb2t1cC5NZXRob2RCaW5kaW5nOwpAQCAtNjMwLDE4ICs2MjksMTcgQEAgcHVibGljIGFic3Ry
YWN0IGNsYXNzIEFTVE5vZGUgaW1wbGVtZW50cyBUeXBlQ29uc3RhbnRzLCBUeXBlSWRzIHsKIAl9
CiAKIAkvKioKLQkgKiBBZnRlciBhIGZpcnN0IHJvdW5kIG9mIG1ldGhvZCBsb29rdXAgaGFzIHBy
b2R1Y2VzICdtZXRob2RCaW5kaW5nJyBidXQgd2hlbiBwb2x5IGV4cHJlc3Npb25zIGhhdmUgYmVl
biBzZWVuIGFzIGFyZ3VtZW50cywKKwkgKiBBZnRlciBtZXRob2QgbG9va3VwIGhhcyBwcm9kdWNl
ZCAnbWV0aG9kQmluZGluZycgYnV0IHdoZW4gcG9seSBleHByZXNzaW9ucyBoYXZlIGJlZW4gc2Vl
biBhcyBhcmd1bWVudHMsCiAJICogaW5zcGVjdCB0aGUgYXJndW1lbnRzIHRvIHRyaWdnZXIgYW5v
dGhlciByb3VuZCBvZiByZXNvbHZpbmcgd2l0aCBpbXByb3ZlZCB0YXJnZXQgdHlwZXMgZnJvbSB0
aGUgbWV0aG9kcyBwYXJhbWV0ZXJzLgotCSAqIElmIHRoaXMgcmVzb2x2aW5nIHByb2R1Y2VzIGJl
dHRlciB0eXBlcyBmb3IgYW55IGFyZ3VtZW50cywgdXBkYXRlIHRoZSAnYXJndW1lbnRUeXBlcycg
YXJyYXkgaW4tcGxhY2UgYW5kIAotCSAqIHNpZ25hbCBieSByZXR1cm5pbmcgbnVsbCB0aGF0IHRo
ZSBvdXRlciBzaG91bGQgcGVyZm9ybSBhbm90aGVyIHJvdW5kIG9mIG1ldGhvZCBsb29rdXAuCisJ
ICogSWYgdGhpcyByZXNvbHZpbmcgcHJvZHVjZXMgYmV0dGVyIHR5cGVzIGZvciBhbnkgYXJndW1l
bnRzLCB1cGRhdGUgdGhlICdhcmd1bWVudFR5cGVzJyBhcnJheSBpbi1wbGFjZSBhcyBhbgorCSAq
IGludGVuZGVkIHNpZGUgZWZmZWN0IHRoYXQgd2lsbCBmZWVkIGJldHRlciB0eXBlIGluZm9ybWF0
aW9uIGluIGNoZWNrSW52b2NhdGlvbkFyZ3VtZW50cygpIGFuZCBvdGhlcnMuCiAJICogQHBhcmFt
IGludm9jYXRpb24gdGhlIG91dGVyIGludm9jYXRpb24gd2hpY2ggaXMgYmVpbmcgcmVzb2x2ZWQK
IAkgKiBAcGFyYW0gc2NvcGUgc2NvcGUKLQkgKiBAcGFyYW0gbWV0aG9kQmluZGluZyB0aGUgY2Fu
ZGlkYXRlIG1ldGhvZCBwcm9kdWNlZCBieSB0aGUgZmlyc3Qgcm91bmQgb2YgbG9va3VwCisJICog
QHBhcmFtIG1ldGhvZEJpbmRpbmcgdGhlIG1ldGhvZCBwcm9kdWNlZCBieSBsb29rdXAgKHBvc3Np
Ymx5IGludm9sdmluZyB0eXBlIGluZmVyZW5jZSkuCiAJICogQHBhcmFtIGFyZ3VtZW50VHlwZXMg
dGhlIGFyZ3VtZW50IHR5cGVzIGFzIGNvbGxlY3RlZCBmcm9tIGZpcnN0IHJlc29sdmluZyB0aGUg
aW52b2NhdGlvbiBhcmd1bWVudHMgYW5kIGFzIHVzZWQgZm9yCi0JICogCXRoZSBmaXJzdCByb3Vu
ZCBvZiBtZXRob2QgbG9va3VwLgotCSAqIEByZXR1cm4gdHJ1ZSBzaWduYWxzIHRoYXQgdGhlIGNh
bGxlciBzaG91bGQgdHJ5IGFub3RoZXIgcm91bmQgb2YgbWV0aG9kIGxvb2t1cAorCSAqIAl0aGUg
bWV0aG9kIGxvb2t1cC4KIAkgKi8KLQlwdWJsaWMgc3RhdGljIGJvb2xlYW4gcmVzb2x2ZVBvbHlF
eHByZXNzaW9uQXJndW1lbnRzKEludm9jYXRpb24gaW52b2NhdGlvbiwgQmxvY2tTY29wZSBzY29w
ZSwgTWV0aG9kQmluZGluZyBtZXRob2RCaW5kaW5nLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlw
ZXMpIHsKKwlwdWJsaWMgc3RhdGljIHZvaWQgcmVzb2x2ZVBvbHlFeHByZXNzaW9uQXJndW1lbnRz
KEludm9jYXRpb24gaW52b2NhdGlvbiwgQmxvY2tTY29wZSBzY29wZSwgTWV0aG9kQmluZGluZyBt
ZXRob2RCaW5kaW5nLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMpIHsKIAkJaW50IHByb2Js
ZW1SZWFzb24gPSAwOwogCQlNZXRob2RCaW5kaW5nIGNhbmRpZGF0ZU1ldGhvZDsKIAkJaWYgKG1l
dGhvZEJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkgewpAQCAtNjUyLDcgKzY1MCw2IEBAIHB1Ymxp
YyBhYnN0cmFjdCBjbGFzcyBBU1ROb2RlIGltcGxlbWVudHMgVHlwZUNvbnN0YW50cywgVHlwZUlk
cyB7CiAJCX0gZWxzZSB7CiAJCQljYW5kaWRhdGVNZXRob2QgPSBudWxsOwogCQl9Ci0JCWJvb2xl
YW4gaGFzVXBkYXRlZElubmVyID0gZmFsc2U7CiAJCWlmIChjYW5kaWRhdGVNZXRob2QgIT0gbnVs
bCkgewogCQkJYm9vbGVhbiB2YXJpYWJsZUFyaXR5ID0gY2FuZGlkYXRlTWV0aG9kLmlzVmFyYXJn
cygpOwogCQkJZmluYWwgVHlwZUJpbmRpbmdbXSBwYXJhbWV0ZXJzID0gY2FuZGlkYXRlTWV0aG9k
LnBhcmFtZXRlcnM7CkBAIC02NjAsMTA0ICs2NTcsMzYgQEAgcHVibGljIGFic3RyYWN0IGNsYXNz
IEFTVE5vZGUgaW1wbGVtZW50cyBUeXBlQ29uc3RhbnRzLCBUeXBlSWRzIHsKIAkJCUV4cHJlc3Np
b24gW10gYXJndW1lbnRzID0gaW52b2NhdGlvbi5hcmd1bWVudHMoKTsKIAkJCWZvciAoaW50IGkg
PSAwLCBsZW5ndGggPSBhcmd1bWVudHMgPT0gbnVsbCA/IDAgOiBhcmd1bWVudHMubGVuZ3RoOyBp
IDwgbGVuZ3RoOyBpKyspIHsKIAkJCQlFeHByZXNzaW9uIGFyZ3VtZW50ID0gYXJndW1lbnRzW2ld
OwotCQkJCVR5cGVCaW5kaW5nIHBhcmFtZXRlclR5cGUgPSBpIDwgcGFyYW1ldGVyc0xlbmd0aCA/
IHBhcmFtZXRlcnNbaV0gOiB2YXJpYWJsZUFyaXR5ID8gcGFyYW1ldGVyc1twYXJhbWV0ZXJzTGVu
Z3RoIC0gMV0gOiBudWxsOwogCQkJCVR5cGVCaW5kaW5nIHVwZGF0ZWRBcmd1bWVudFR5cGUgPSBu
dWxsOwogCiAJCQkJaWYgKHZhcmlhYmxlQXJpdHkgJiYgaSA+PSBwYXJhbWV0ZXJzTGVuZ3RoIC0g
MSkKIAkJCQkJYXJndW1lbnQudGFnQXNFbGxpcHNpc0FyZ3VtZW50KCk7Ci0JCQkJdXBkYXRlZEFy
Z3VtZW50VHlwZSA9IHVwZGF0ZUV4cHJlc3Npb24oc2NvcGUsIGFyZ3VtZW50LCBhcmd1bWVudFR5
cGVzW2ldLCBwYXJhbWV0ZXJUeXBlLCBpbnZvY2F0aW9uLmhhc0luZmVyZW5jZUZpbmlzaGVkKCkp
OwotCQkJCWlmICh1cGRhdGVkQXJndW1lbnRUeXBlID09IFBPTFlfRVJST1IpIC8vJElERU5USVRZ
LUNPTVBBUklTT04kCisJCQkJaWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgTGFtYmRhRXhwcmVzc2lv
biAmJiAoKExhbWJkYUV4cHJlc3Npb24pIGFyZ3VtZW50KS5oYXNFcnJvcnMoKSkKIAkJCQkJY29u
dGludWU7IC8vIGRvbid0IHVwZGF0ZSBpZiBpbm5lciBwb2x5IGhhcyBlcnJvcnMKLQkJCQlpZiAo
cHJvYmxlbVJlYXNvbiAhPSBQcm9ibGVtUmVhc29ucy5BbWJpZ3VvdXMgCS8vIHByZXNlcnZlIHRo
aXMgZXJyb3IKLQkJCQkJCSYmIHVwZGF0ZWRBcmd1bWVudFR5cGUgIT0gbnVsbAkJCQkJLy8gZG8g
d2UgaGF2ZSBhIHJlbGV2YW50IHVwZGF0ZT8gLi4uCi0JCQkJCQkmJiAhKHVwZGF0ZWRBcmd1bWVu
dFR5cGUgaW5zdGFuY2VvZiBQb2x5VHlwZUJpbmRpbmcpCi0JCQkJCQkmJiBUeXBlQmluZGluZy5u
b3RFcXVhbHModXBkYXRlZEFyZ3VtZW50VHlwZSwgYXJndW1lbnRUeXBlc1tpXSkpCi0JCQkJewot
CQkJCQkvLyB1cGRhdGUgdGhlIGFyZ3VtZW50VHlwZXMgYXJyYXkgKHN1cHBvc2VkIHRvIGJlIG93
bmVkIGJ5IHRoZSBjYWxsaW5nIG1ldGhvZCkKLQkJCQkJLy8gaW4gb3JkZXIgdG8gZ2l2ZSBiZXR0
ZXIgaW5mb3JtYXRpb24gaW50byBhIHNlY29uZCByb3VuZCBvZiBtZXRob2QgbG9va3VwOgotCQkJ
CQlhcmd1bWVudFR5cGVzW2ldID0gdXBkYXRlZEFyZ3VtZW50VHlwZTsKLQkJCQkJaGFzVXBkYXRl
ZElubmVyID0gdHJ1ZTsKLQkJCQl9Ci0JCQl9Ci0JCX0KLQkJcmV0dXJuIGhhc1VwZGF0ZWRJbm5l
cjsKLQl9Ci0KLQkvLyBzcGVjaWFsIGluc3RhbmNlIHVzZWQgdG8gc2lnbmFsIHRoYXQgYW4gaW5u
ZXIgcG9seSBleHByZXNzaW9uIGhhZCBlcnJvcnMsIHRvIGNhbmNlbCBhbm90aGVyIG1ldGhvZCBs
b29rdXAgb2YgdGhlIG91dGVyIGJhc2VkIG9uIGJvZ3VzIHR5cGUgaW5mb3JtYXRpb24KLQlzdGF0
aWMgZmluYWwgVHlwZUJpbmRpbmcgUE9MWV9FUlJPUiA9IG5ldyBQb2x5VHlwZUJpbmRpbmcobnVs
bCk7Ci0KLQlwcml2YXRlIHN0YXRpYyBUeXBlQmluZGluZyB1cGRhdGVFeHByZXNzaW9uKEJsb2Nr
U2NvcGUgc2NvcGUsIEV4cHJlc3Npb24gZXhwcmVzc2lvbiwgVHlwZUJpbmRpbmcgYXJndW1lbnRU
eXBlLCBUeXBlQmluZGluZyBwYXJhbWV0ZXJUeXBlLCBib29sZWFuIGluZmVyZW5jZUZpbmlzaGVk
KSB7Ci0JCVR5cGVCaW5kaW5nIHVwZGF0ZWRBcmd1bWVudFR5cGUgPSBudWxsOwotCQlib29sZWFu
IGlzUG9seUFsbG9jID0gZmFsc2U7Ci0JCWlmIChleHByZXNzaW9uIGluc3RhbmNlb2YgSW52b2Nh
dGlvbikgewotCQkJSW52b2NhdGlvbiBpbnZvY2F0aW9uID0gKEludm9jYXRpb24pZXhwcmVzc2lv
bjsKLQkJCXVwZGF0ZWRBcmd1bWVudFR5cGUgPSB1cGRhdGVJbnZvY2F0aW9uKGludm9jYXRpb24s
IHBhcmFtZXRlclR5cGUpOwotCQkJaWYgKHVwZGF0ZWRBcmd1bWVudFR5cGUgPT0gbnVsbCAmJiBp
bnZvY2F0aW9uLmluZmVyZW5jZUtpbmQoKSAhPSAwICYmICFpbnZvY2F0aW9uLmhhc0luZmVyZW5j
ZUZpbmlzaGVkKCkpCi0JCQkJaXNQb2x5QWxsb2MgPSB0cnVlOwotCQl9IGVsc2UgaWYgKGV4cHJl
c3Npb24gaW5zdGFuY2VvZiBDb25kaXRpb25hbEV4cHJlc3Npb24pIHsKLQkJCXVwZGF0ZWRBcmd1
bWVudFR5cGUgPSB1cGRhdGVDb25kaXRpb25FeHByZXNpb24oc2NvcGUsICgoQ29uZGl0aW9uYWxF
eHByZXNzaW9uKSBleHByZXNzaW9uKSwgYXJndW1lbnRUeXBlLCBwYXJhbWV0ZXJUeXBlLCBpbmZl
cmVuY2VGaW5pc2hlZCk7Ci0JCX0KLQotCQlpZiAodXBkYXRlZEFyZ3VtZW50VHlwZSA9PSBudWxs
ICYmIChpc1BvbHlBbGxvYyB8fCBhcmd1bWVudFR5cGUgaW5zdGFuY2VvZiBQb2x5VHlwZUJpbmRp
bmcpKSB7Ci0JCQl1cGRhdGVkQXJndW1lbnRUeXBlID0gdXBkYXRlT3RoZXJQb2x5RXhwcmVzc2lv
bihzY29wZSwgZXhwcmVzc2lvbiwgcGFyYW1ldGVyVHlwZSwgaW5mZXJlbmNlRmluaXNoZWQpOwot
CQl9Ci0JCXJldHVybiB1cGRhdGVkQXJndW1lbnRUeXBlOwotCX0KIAotCXByaXZhdGUgc3RhdGlj
IFR5cGVCaW5kaW5nIHVwZGF0ZUNvbmRpdGlvbkV4cHJlc2lvbihCbG9ja1Njb3BlIHNjb3BlLCBD
b25kaXRpb25hbEV4cHJlc3Npb24gZXhwcmVzc2lvbiwgVHlwZUJpbmRpbmcgY3VycmVudFR5cGUs
IFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIGJvb2xlYW4gaW5mZXJlbmNlRmluaXNoZWQpIHsKLQkJ
VHlwZUJpbmRpbmcgdHlwZSA9IHVwZGF0ZUV4cHJlc3Npb24oc2NvcGUsIGV4cHJlc3Npb24udmFs
dWVJZlRydWUsIGN1cnJlbnRUeXBlLCB0YXJnZXRUeXBlLCBpbmZlcmVuY2VGaW5pc2hlZCk7Ci0J
CWJvb2xlYW4gZXJyb3JTZWVuID0gKHR5cGUgPT0gUE9MWV9FUlJPUik7IC8vJElERU5USVRZLUNP
TVBBUklTT04kCi0JCWJvb2xlYW4gaW5jb21wYXRpYmlsaXR5U2VlbiA9ICFlcnJvclNlZW4gJiYg
dHlwZSAhPSBudWxsICYmICF0eXBlLmlzQ29tcGF0aWJsZVdpdGgodGFyZ2V0VHlwZSk7Ci0JCXR5
cGUgPSB1cGRhdGVFeHByZXNzaW9uKHNjb3BlLCBleHByZXNzaW9uLnZhbHVlSWZGYWxzZSwgY3Vy
cmVudFR5cGUsIHRhcmdldFR5cGUsIGluZmVyZW5jZUZpbmlzaGVkKTsKLQkJaWYgKGVycm9yU2Vl
biB8fCB0eXBlID09IFBPTFlfRVJST1IpIC8vJElERU5USVRZLUNPTVBBUklTT04kCi0JCQlyZXR1
cm4gUE9MWV9FUlJPUjsKLQkJaWYgKGluY29tcGF0aWJpbGl0eVNlZW4gfHwgdHlwZSAhPSBudWxs
ICYmICF0eXBlLmlzQ29tcGF0aWJsZVdpdGgodGFyZ2V0VHlwZSkpCi0JCQlyZXR1cm4gbnVsbDsK
LQkJcmV0dXJuIGV4cHJlc3Npb24ucmVzb2x2ZWRUeXBlID0gdGFyZ2V0VHlwZTsKLQl9CisJCQkJ
aWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgSW52b2NhdGlvbiAmJiAoKEludm9jYXRpb24pYXJndW1l
bnQpLmJpbmRpbmcoKSBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGlu
ZykKKwkJCQkJY29udGludWU7IC8vIHRoZXNlIGhhdmUgYmVlbiBkZWFsdCB3aXRoIGR1cmluZyBp
bm5lciBtZXRob2QgbG9va3VwCiAKLQlwcml2YXRlIHN0YXRpYyBUeXBlQmluZGluZyB1cGRhdGVJ
bnZvY2F0aW9uKEludm9jYXRpb24gaW5uZXJJbnZvY2F0aW9uLCBUeXBlQmluZGluZyB0YXJnZXRU
eXBlKSB7Ci0JCWJvb2xlYW4gaW52b2NhdGlvbkZpbmlzaGVkID0gZmFsc2U7Ci0JCU1ldGhvZEJp
bmRpbmcgdXBkYXRlZE1ldGhvZCA9IGlubmVySW52b2NhdGlvbi5iaW5kaW5nKCk7Ci0JCWlmIChp
bm5lckludm9jYXRpb24uaGFzSW5mZXJlbmNlRmluaXNoZWQoKSAmJiB1cGRhdGVkTWV0aG9kICE9
IG51bGwpIHsKLQkJCS8vIG91dGVyIGludm9jYXRpb24gYWxyZWFkeSBpbmNsdWRlZCBpbnZvY2F0
aW9uIHR5cGUgaW5mZXJlbmNlIGZvciB0aGlzIGlubmVyCi0JCQlpbnZvY2F0aW9uRmluaXNoZWQg
PSB0cnVlOwotCQl9IGVsc2UgewotCQkJLy8gSW5uZXIgSW5mZXJlbmNlPwotCQkJSW5mZXJlbmNl
Q29udGV4dDE4IGluZkN0eDE4ID0gaW5uZXJJbnZvY2F0aW9uLmluZmVyZW5jZUNvbnRleHQoKTsK
LQkJCWlmIChpbmZDdHgxOCAhPSBudWxsKSB7Ci0JCQkJLy8gUHJldmlvdXMgdGltZSBhcm91bmQg
d2Ugb25seSBwZXJmb3JtZWQgSW52b2NhdGlvbiBBcHBsaWNhYmlsaXR5IEluZmVyZW5jZSwgZG8g
dGhlIHJlc3Qgbm93OgotCQkJCXVwZGF0ZWRNZXRob2QgPSBpbmZDdHgxOC5nZXRJbnZvY2F0aW9u
VHlwZUluZmVyZW5jZVNvbHV0aW9uKGlubmVySW52b2NhdGlvbiwgdGFyZ2V0VHlwZSk7Ci0JCQkJ
aWYgKHVwZGF0ZWRNZXRob2QgIT0gbnVsbCkgewotCQkJCQlpbm5lckludm9jYXRpb24udXBkYXRl
QmluZGluZ3ModXBkYXRlZE1ldGhvZCk7Ci0JCQkJCWludm9jYXRpb25GaW5pc2hlZCA9IHRydWU7
CisJCQkJaWYgKChpbnZvY2F0aW9uLmluZmVyZW5jZUtpbmQoKSA9PSAwIHx8IGludm9jYXRpb24u
Z2V0RXhwcmVzc2lvbkNvbnRleHQoKSA9PSBFeHByZXNzaW9uQ29udGV4dC5WQU5JTExBX0NPTlRF
WFQpCisJCQkJCQkmJiBhcmd1bWVudC5pc1BvbHlFeHByZXNzaW9uKCkpIAorCQkJCXsKKwkJCQkJ
Ly8gcG9seSBleHByZXNzaW9ucyBpbiBhIG5vbi1pbmZlcmVuY2UgY29udGV4dCBuZWVkIHRvIGJl
IHJlc29sdmVkIG5vdzoKKwkJCQkJLy8gVE9ETyBiZXR0ZXIgZGV0ZWN0aW9uIG9mIG5vbi1pbmZl
cmVuY2UgY29udGV4dD8KKwkJCQkJVHlwZUJpbmRpbmcgcGFyYW1ldGVyVHlwZSA9IGkgPCBwYXJh
bWV0ZXJzTGVuZ3RoID8gcGFyYW1ldGVyc1tpXSA6IHZhcmlhYmxlQXJpdHkgPyBwYXJhbWV0ZXJz
W3BhcmFtZXRlcnNMZW5ndGggLSAxXSA6IG51bGw7CisJCQkJCWFyZ3VtZW50LnNldEV4cGVjdGVk
VHlwZShwYXJhbWV0ZXJUeXBlKTsKKwkJCQkJdXBkYXRlZEFyZ3VtZW50VHlwZSA9IGFyZ3VtZW50
LnJlc29sdmVUeXBlKHNjb3BlKTsKKworCQkJCQlpZiAocHJvYmxlbVJlYXNvbiA9PSBQcm9ibGVt
UmVhc29ucy5Ob0Vycm9yIC8vIHByZXNlcnZlIGVycm9ycworCQkJCQkJCSYmIHVwZGF0ZWRBcmd1
bWVudFR5cGUgIT0gbnVsbAkJCQkJLy8gZG8gd2UgaGF2ZSBhIHJlbGV2YW50IHVwZGF0ZT8gLi4u
CisJCQkJCQkJJiYgISh1cGRhdGVkQXJndW1lbnRUeXBlIGluc3RhbmNlb2YgUG9seVR5cGVCaW5k
aW5nKSkKKwkJCQkJeworCQkJCQkJLy8gdXBkYXRlIHRoZSBhcmd1bWVudFR5cGVzIGFycmF5IChz
dXBwb3NlZCB0byBiZSBvd25lZCBieSB0aGUgY2FsbGluZyBtZXRob2QpCisJCQkJCQkvLyBpbiBv
cmRlciB0byBnaXZlIGJldHRlciBpbmZvcm1hdGlvbiBmb3Igc3Vic2VxdWVudCBjaGVja3MKKwkJ
CQkJCWFyZ3VtZW50VHlwZXNbaV0gPSB1cGRhdGVkQXJndW1lbnRUeXBlOworCQkJCQl9CiAJCQkJ
fQogCQkJfQogCQl9Ci0JCWlmIChpbnZvY2F0aW9uRmluaXNoZWQpIHsKLQkJCWlmICh1cGRhdGVk
TWV0aG9kLmlzQ29uc3RydWN0b3IoKSkKLQkJCQlyZXR1cm4gdXBkYXRlZE1ldGhvZC5kZWNsYXJp
bmdDbGFzczsKLQkJCWVsc2UKLQkJCQlyZXR1cm4gdXBkYXRlZE1ldGhvZC5yZXR1cm5UeXBlOwot
CQl9Ci0JCXJldHVybiBudWxsOwotCX0KLQotCXByb3RlY3RlZCBzdGF0aWMgVHlwZUJpbmRpbmcg
dXBkYXRlT3RoZXJQb2x5RXhwcmVzc2lvbihCbG9ja1Njb3BlIHNjb3BlLCBFeHByZXNzaW9uIGV4
cHJlc3Npb24sIFR5cGVCaW5kaW5nIHBhcmFtZXRlclR5cGUsIGJvb2xlYW4gaW5mZXJlbmNlRmlu
aXNoZWQpIHsKLQkJVHlwZUJpbmRpbmcgdXBkYXRlZEFyZ3VtZW50VHlwZTsKLQkJZXhwcmVzc2lv
bi5zZXRFeHByZXNzaW9uQ29udGV4dChwYXJhbWV0ZXJUeXBlICE9IG51bGwgPyBFeHByZXNzaW9u
Q29udGV4dC5JTlZPQ0FUSU9OX0NPTlRFWFQ6IEV4cHJlc3Npb25Db250ZXh0LkFTU0lHTk1FTlRf
Q09OVEVYVCk7IC8vIGZvcmNlIHRoZSBlcnJvcnMgdG8gc3VyZmFjZS4KLQkJLy8gcGVyZm9ybSB0
aGUgbGV2ZWwgb2YgcmVzb2x2aW5nIHN1aXRhYmxlIGZvciB0aGUgc3RhdGUgb2YgYWZmYWlycyBh
dCB0aGUgZW5jbG9zaW5nIGNvbnRleHQ6Ci0JCWlmIChpbmZlcmVuY2VGaW5pc2hlZCkgewotCQkJ
ZXhwcmVzc2lvbi5zZXRFeHBlY3RlZFR5cGUocGFyYW1ldGVyVHlwZSk7Ci0JCQl1cGRhdGVkQXJn
dW1lbnRUeXBlID0gZXhwcmVzc2lvbi5yZXNvbHZlVHlwZShzY29wZSk7Ci0JCX0gZWxzZSB7Ci0J
CQl1cGRhdGVkQXJndW1lbnRUeXBlID0gZXhwcmVzc2lvbi5yZXNvbHZlVGVudGF0aXZlbHkoc2Nv
cGUsIHBhcmFtZXRlclR5cGUpOwotCQl9Ci0JCWlmICh1cGRhdGVkQXJndW1lbnRUeXBlID09IG51
bGwgfHwgIXVwZGF0ZWRBcmd1bWVudFR5cGUuaXNWYWxpZEJpbmRpbmcoKSkKLQkJCXJldHVybiBQ
T0xZX0VSUk9SOwotCQlpZiAoZXhwcmVzc2lvbiBpbnN0YW5jZW9mIExhbWJkYUV4cHJlc3Npb24g
JiYgKChMYW1iZGFFeHByZXNzaW9uKSBleHByZXNzaW9uKS5oYXNFcnJvcnMoKSkKLQkJCXJldHVy
biBQT0xZX0VSUk9SOwotCQlyZXR1cm4gdXBkYXRlZEFyZ3VtZW50VHlwZTsKIAl9CiAKIAlwdWJs
aWMgc3RhdGljIHZvaWQgcmVzb2x2ZUFubm90YXRpb25zKEJsb2NrU2NvcGUgc2NvcGUsIEFubm90
YXRpb25bXSBzb3VyY2VBbm5vdGF0aW9ucywgQmluZGluZyByZWNpcGllbnQpIHsKZGlmZiAtLWdp
dCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5h
bC9jb21waWxlci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQWxs
b2NhdGlvbkV4cHJlc3Npb24uamF2YQppbmRleCBkN2MxZmNkLi4yOGVjMzliIDEwMDY0NAotLS0g
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvYXN0L0FsbG9jYXRpb25FeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9B
bGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhCkBAIC00ODcsNiArNDg3LDggQEAgcHVibGljIFR5cGVC
aW5kaW5nIHJlc29sdmVUeXBlKEJsb2NrU2NvcGUgc2NvcGUpIHsKIAkJbmV3IEltcGxpY2l0TnVs
bEFubm90YXRpb25WZXJpZmllcihzY29wZS5lbnZpcm9ubWVudCgpLCBjb21waWxlck9wdGlvbnMu
aW5oZXJpdE51bGxBbm5vdGF0aW9ucykKIAkJCQkuY2hlY2tJbXBsaWNpdE51bGxBbm5vdGF0aW9u
cyh0aGlzLmJpbmRpbmcsIG51bGwvKnNyY01ldGhvZCovLCBmYWxzZSwgc2NvcGUpOwogCX0KKwlp
ZiAoZGlhbW9uZE5lZWRzRGVmZXJyaW5nKQorCQlyZXR1cm4gbmV3IFBvbHlUeXBlQmluZGluZyh0
aGlzKTsKIAlyZXR1cm4gYWxsb2NhdGlvblR5cGU7CiB9CiAKQEAgLTYzNCwxOCArNjM2LDEyIEBA
IHB1YmxpYyBFeHByZXNzaW9uW10gYXJndW1lbnRzKCkgewogCXJldHVybiB0aGlzLmFyZ3VtZW50
czsKIH0KIHB1YmxpYyBpbnQgaW5mZXJlbmNlS2luZCgpIHsKLQlyZXR1cm4gKHRoaXMuaW5mZXJl
bmNlS2luZCAmIEluZmVyZW5jZUNvbnRleHQxOC5JTkZFUkVOQ0VfS0lORF9NQVNLKTsKKwlyZXR1
cm4gdGhpcy5pbmZlcmVuY2VLaW5kOwogfQogcHVibGljIHZvaWQgc2V0SW5mZXJlbmNlS2luZChp
bnQgY2hlY2tLaW5kKSB7CiAJdGhpcy5pbmZlcmVuY2VLaW5kID0gY2hlY2tLaW5kOwogfQotcHVi
bGljIHZvaWQgbWFya0luZmVyZW5jZUZpbmlzaGVkKCkgewotCXRoaXMuaW5mZXJlbmNlS2luZCB8
PSBJbmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tfRklOSVNIRUQ7Ci19Ci1wdWJsaWMgYm9vbGVhbiBo
YXNJbmZlcmVuY2VGaW5pc2hlZCgpIHsKLQlyZXR1cm4gdGhpcy5pbmZlcmVuY2VLaW5kID09IDAg
Ly8gb25seSByZWxldmFudCBpZiBpbmZlcmVuY2UgaGFzIGJlZW4gc3RhcnRlZAotCQkJfHwgKHRo
aXMuaW5mZXJlbmNlS2luZCAmIEluZmVyZW5jZUNvbnRleHQxOC5DSEVDS19GSU5JU0hFRCkgIT0g
MDsKLX0KKwogcHVibGljIFR5cGVCaW5kaW5nIHVwZGF0ZUJpbmRpbmdzKE1ldGhvZEJpbmRpbmcg
dXBkYXRlZEJpbmRpbmcpIHsKIAl0aGlzLmJpbmRpbmcgPSB1cGRhdGVkQmluZGluZzsKIAlyZXR1
cm4gdGhpcy5yZXNvbHZlZFR5cGUgPSB1cGRhdGVkQmluZGluZy5kZWNsYXJpbmdDbGFzczsKZGlm
ZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9hc3QvRXhwbGljaXRDb25zdHJ1Y3RvckNhbGwuamF2YSBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hc3QvRXhwbGljaXRDb25zdHJ1Y3RvckNhbGwuamF2YQppbmRleCA0ODY4NWE0Li4xMTFkMjAw
IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0V4cGxpY2l0Q29uc3RydWN0b3JDYWxsLmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FzdC9FeHBsaWNpdENvbnN0cnVjdG9yQ2FsbC5qYXZhCkBAIC00OTYsMTggKzQ5
NiwxMSBAQCBwdWJsaWMgY2xhc3MgRXhwbGljaXRDb25zdHJ1Y3RvckNhbGwgZXh0ZW5kcyBTdGF0
ZW1lbnQgaW1wbGVtZW50cyBJbnZvY2F0aW9uLCBFeAogCQlyZXR1cm4gdGhpcy5pbmZlcmVuY2VD
b250ZXh0OwogCX0KIAlwdWJsaWMgaW50IGluZmVyZW5jZUtpbmQoKSB7Ci0JCXJldHVybiAodGhp
cy5pbmZlcmVuY2VLaW5kICYgSW5mZXJlbmNlQ29udGV4dDE4LklORkVSRU5DRV9LSU5EX01BU0sp
OworCQlyZXR1cm4gdGhpcy5pbmZlcmVuY2VLaW5kOwogCX0KIAlwdWJsaWMgdm9pZCBzZXRJbmZl
cmVuY2VLaW5kKGludCBjaGVja0tpbmQpIHsKIAkJdGhpcy5pbmZlcmVuY2VLaW5kID0gY2hlY2tL
aW5kOwogCX0KLQlwdWJsaWMgdm9pZCBtYXJrSW5mZXJlbmNlRmluaXNoZWQoKSB7Ci0JCXRoaXMu
aW5mZXJlbmNlS2luZCB8PSBJbmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tfRklOSVNIRUQ7Ci0JfQot
CXB1YmxpYyBib29sZWFuIGhhc0luZmVyZW5jZUZpbmlzaGVkKCkgewotCQlyZXR1cm4gdGhpcy5p
bmZlcmVuY2VLaW5kID09IDAgLy8gb25seSByZWxldmFudCBpZiBpbmZlcmVuY2UgaGFzIGJlZW4g
c3RhcnRlZAotCQkJCXx8ICh0aGlzLmluZmVyZW5jZUtpbmQgJiBJbmZlcmVuY2VDb250ZXh0MTgu
Q0hFQ0tfRklOSVNIRUQpICE9IDA7Ci0JfQogCXB1YmxpYyBUeXBlQmluZGluZyB1cGRhdGVCaW5k
aW5ncyhNZXRob2RCaW5kaW5nIHVwZGF0ZWRCaW5kaW5nKSB7CiAJCXRoaXMuYmluZGluZyA9IHVw
ZGF0ZWRCaW5kaW5nOwogCQlyZXR1cm4gVHlwZUJpbmRpbmcuVk9JRDsgLy8gbm90IGFuIGV4cHJl
c3Npb24KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fz
dC9FeHByZXNzaW9uLmphdmEKaW5kZXggODUwNGY4MC4uYjVlZTA4YiAxMDA2NDQKLS0tIGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9FeHByZXNzaW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9FeHByZXNzaW9uLmphdmEK
QEAgLTk1Myw3ICs5NTMsOCBAQCBwdWJsaWMgQ29uc3RhbnQgb3B0aW1pemVkQm9vbGVhbkNvbnN0
YW50KCkgewogcHVibGljIGJvb2xlYW4gaXNQZXJ0aW5lbnRUb0FwcGxpY2FiaWxpdHkoVHlwZUJp
bmRpbmcgdGFyZ2V0VHlwZSwgTWV0aG9kQmluZGluZyBtZXRob2QpIHsKIAlyZXR1cm4gdHJ1ZTsK
IH0KLS8vIGNhbGwgdGhpcyBiZWZvcmUgcmVzb2x2aW5nIGFuIGV4cHJlc3Npb24gZm9yIHRoZSBz
ZWNvbmQgdGltZS4gVE9ETzogaW1wbGVtZW50IGluIG1vcmUgc3ViY2xhc3Nlcywgb3IgZmluZCBh
IGRpZmZlcmVudCBzdHJhdGVneS4KKy8vIGNhbGwgdGhpcyBiZWZvcmUgcmVzb2x2aW5nIGFuIGV4
cHJlc3Npb24gZm9yIHRoZSBzZWNvbmQgdGltZS4KKy8vIEZJWE1FOiB3ZSBzaG91bGQgZmluZCBh
IGJldHRlciBzdHJhdGVneSwgc2VlIExhbWJkYUV4cHJlc3Npb25zVGVzdC50ZXN0TGFtYmRhSW5m
ZXJlbmNlMSgpIGYuIGZvciB0ZXN0cyB0aGF0IGN1cnJlbnRseSBuZWVkIHRoaXMuCiB2b2lkIHVu
cmVzb2x2ZSgpIHsKIAl0aGlzLnJlc29sdmVkVHlwZSA9IG51bGw7CiB9CkBAIC0xMDU4LDE1ICsx
MDU5LDYgQEAgcHVibGljIFR5cGVCaW5kaW5nIHJlc29sdmVUeXBlRXhwZWN0aW5nKEJsb2NrU2Nv
cGUgc2NvcGUsIFR5cGVCaW5kaW5nIGV4cGVjdGVkVHkKIH0KIAogLyoqCi0gKiBJZiB3ZSBtaWdo
dCBzdGlsbCBiZSBpbiB0aGUgY29udGV4dCBvZiBhbiB1bmZpbmlzaGVkIG91dGVyIGluZmVyZW5j
ZSwgdXNlIHRoaXMgbWV0aG9kIHRvCi0gKiB0ZW50YXRpdmVseSByZXNvbHZlIHRoaXMgZXhwcmVz
c2lvbiB3aXRob3V0IGxlYXZpbmcgYW55IHVuZGVzaXJlZCB0cmFjZXMsIGluIGNhc2Ugd2Ugd2ls
bAotICogY29tZSBiYWNrIHdpdGggYSBiZXR0ZXIgdGFyZ2V0IHR5cGUgbGF0ZXIuCi0gKi8KLXB1
YmxpYyBUeXBlQmluZGluZyByZXNvbHZlVGVudGF0aXZlbHkoQmxvY2tTY29wZSBzY29wZSwgVHlw
ZUJpbmRpbmcgdGFyZ2V0VHlwZSkgewotCXJldHVybiByZXNvbHZlVHlwZShzY29wZSk7IC8vIGRl
ZmF1bHQgaXMgdG8gZG8gZnVsbCByZXNvbHV0aW9uIGluIGp1c3QgdGhpcyBvbmUgc3RlcAotfQot
Ci0vKioKICAqIE9uY2Ugb3V0ZXIgY29udGV4dHMgaGF2ZSBmaW5hbGl6ZWQgdGhlIHRhcmdldCB0
eXBlIGZvciB0aGlzIGV4cHJlc3Npb24sCiAgKiBwZXJmb3JtIGFueSBjaGVja3MgdGhhdCBtaWdo
dCBoYXZlIGJlZW4gZGVsYXllZCBwcmV2aW91c2x5LgogICogQHBhcmFtIHRhcmdldFR5cGUgdGhl
IGZpbmFsIHRhcmdldCB0eXBlIChha2EgZXhwZWN0ZWRUeXBlKSBmb3IgdGhpcyBleHByZXNzaW9u
LgpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9GdW5jdGlvbmFsRXhwcmVzc2lvbi5qYXZhIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9GdW5jdGlvbmFsRXhwcmVzc2lvbi5qYXZhCmluZGV4IGYyMzc0ZWYuLmViMzlkMTQg
MTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9hc3QvRnVuY3Rpb25hbEV4cHJlc3Npb24uamF2YQorKysgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvYXN0L0Z1bmN0aW9uYWxFeHByZXNzaW9uLmphdmEKQEAgLTM2LDEwICszNiw5IEBAIGlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlNjb3BlOwogaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuVHlwZUJpbmRpbmc7
CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5UeXBlQmlu
ZGluZ1Zpc2l0b3I7CiAKLXB1YmxpYyBhYnN0cmFjdCBjbGFzcyBGdW5jdGlvbmFsRXhwcmVzc2lv
biBleHRlbmRzIEV4cHJlc3Npb24gaW1wbGVtZW50cyBQb2x5RXhwcmVzc2lvbiB7CitwdWJsaWMg
YWJzdHJhY3QgY2xhc3MgRnVuY3Rpb25hbEV4cHJlc3Npb24gZXh0ZW5kcyBFeHByZXNzaW9uIHsK
IAkKIAlUeXBlQmluZGluZyBleHBlY3RlZFR5cGU7Ci0JYm9vbGVhbiBleHBlY3RlZElzRmluYWxU
YXJnZXRUeXBlID0gZmFsc2U7IC8vIGZsaXAgdG8gdHJ1ZSBvbmNlIHRoZSBleHByZXNzaW9uIGNv
bnRleHQgaGFzIGRldGVybWluZWQgdGhlIGZpbmFsIHRhcmdldCB0eXBlIGZvciB0aGlzIGV4cHJl
c3Npb24KIAlwdWJsaWMgTWV0aG9kQmluZGluZyBkZXNjcmlwdG9yOwogCXB1YmxpYyBNZXRob2RC
aW5kaW5nIGJpbmRpbmc7ICAgICAgICAgICAgICAgICAvLyBDb2RlIGdlbmVyYXRpb24gYmluZGlu
Zy4gTWF5IGluY2x1ZGUgc3ludGhldGljcy4gU2VlIGdldE1ldGhvZEJpbmRpbmcoKQogCXByb3Rl
Y3RlZCBNZXRob2RCaW5kaW5nIGFjdHVhbE1ldGhvZEJpbmRpbmc7ICAvLyB2b2lkIG9mIHN5bnRo
ZXRpY3MuCkBAIC01MSw3ICs1MCw2IEBAIHB1YmxpYyBhYnN0cmFjdCBjbGFzcyBGdW5jdGlvbmFs
RXhwcmVzc2lvbiBleHRlbmRzIEV4cHJlc3Npb24gaW1wbGVtZW50cyBQb2x5RXhwCiAJcHVibGlj
IEJsb2NrU2NvcGUgZW5jbG9zaW5nU2NvcGU7CiAJcHJvdGVjdGVkIGJvb2xlYW4gZWxsaXBzaXNB
cmd1bWVudDsKIAlwcm90ZWN0ZWQgc3RhdGljIElFcnJvckhhbmRsaW5nUG9saWN5IHNpbGVudEVy
cm9ySGFuZGxpbmdQb2xpY3kgPSBEZWZhdWx0RXJyb3JIYW5kbGluZ1BvbGljaWVzLmlnbm9yZUFs
bFByb2JsZW1zKCk7Ci0JcHJvdGVjdGVkIGJvb2xlYW4gaGFzSW5mZXJlbmNlRmluaXNoZWQgPSBm
YWxzZTsKIAogCXB1YmxpYyBGdW5jdGlvbmFsRXhwcmVzc2lvbihDb21waWxhdGlvblJlc3VsdCBj
b21waWxhdGlvblJlc3VsdCkgewogCQl0aGlzLmNvbXBpbGF0aW9uUmVzdWx0ID0gY29tcGlsYXRp
b25SZXN1bHQ7CkBAIC03MCwxMCArNjgsNyBAQCBwdWJsaWMgYWJzdHJhY3QgY2xhc3MgRnVuY3Rp
b25hbEV4cHJlc3Npb24gZXh0ZW5kcyBFeHByZXNzaW9uIGltcGxlbWVudHMgUG9seUV4cAogCQly
ZXR1cm4gbnVsbDsKIAl9CiAJcHVibGljIHZvaWQgc2V0RXhwZWN0ZWRUeXBlKFR5cGVCaW5kaW5n
IGV4cGVjdGVkVHlwZSkgewotCQlpZiAoZXhwZWN0ZWRUeXBlID09IG51bGwpCi0JCQl0aGlzLmV4
cGVjdGVkVHlwZSA9IG51bGw7IC8vIGZvciByZXNldAotCQllbHNlCi0JCQl0aGlzLmV4cGVjdGVk
VHlwZSA9IHRoaXMuZWxsaXBzaXNBcmd1bWVudCA/ICgoQXJyYXlCaW5kaW5nKSBleHBlY3RlZFR5
cGUpLmVsZW1lbnRzVHlwZSgpIDogZXhwZWN0ZWRUeXBlOworCQl0aGlzLmV4cGVjdGVkVHlwZSA9
IHRoaXMuZWxsaXBzaXNBcmd1bWVudCA/ICgoQXJyYXlCaW5kaW5nKSBleHBlY3RlZFR5cGUpLmVs
ZW1lbnRzVHlwZSgpIDogZXhwZWN0ZWRUeXBlOwogCX0KIAkKIAlwdWJsaWMgdm9pZCBzZXRFeHBy
ZXNzaW9uQ29udGV4dChFeHByZXNzaW9uQ29udGV4dCBjb250ZXh0KSB7CkBAIC04OSwxNCArODQs
NiBAQCBwdWJsaWMgYWJzdHJhY3QgY2xhc3MgRnVuY3Rpb25hbEV4cHJlc3Npb24gZXh0ZW5kcyBF
eHByZXNzaW9uIGltcGxlbWVudHMgUG9seUV4cAogCXB1YmxpYyBib29sZWFuIGlzUG9seUV4cHJl
c3Npb24oKSB7CiAJCXJldHVybiB0cnVlOyAvLyBhbHdheXMgYXMgcGVyIGludHJvZHVjdGlvbiBv
ZiBwYXJ0IEQsIEpTUiAzMzUKIAl9Ci0JCi0JcHVibGljIHZvaWQgbWFya0luZmVyZW5jZUZpbmlz
aGVkKCkgewotCQl0aGlzLmhhc0luZmVyZW5jZUZpbmlzaGVkID0gdHJ1ZTsKLQl9Ci0JCi0JcHVi
bGljIGJvb2xlYW4gaGFzSW5mZXJlbmNlRmluaXNoZWQoKSB7Ci0JCXJldHVybiB0aGlzLmhhc0lu
ZmVyZW5jZUZpbmlzaGVkOwotCX0KIAogCXB1YmxpYyBUeXBlQmluZGluZyBpbnZvY2F0aW9uVGFy
Z2V0VHlwZSgpIHsKIAkJaWYgKHRoaXMuZXhwZWN0ZWRUeXBlID09IG51bGwpIHJldHVybiBudWxs
OwpAQCAtMTQ5LDUyICsxMzYsNyBAQCBwdWJsaWMgYWJzdHJhY3QgY2xhc3MgRnVuY3Rpb25hbEV4
cHJlc3Npb24gZXh0ZW5kcyBFeHByZXNzaW9uIGltcGxlbWVudHMgUG9seUV4cAogCQlyZXR1cm4g
dGhpcy5yZXNvbHZlZFR5cGUgPSBudWxsOwogCX0KIAotCS8qKiBEdXJpbmcgaW5mZXJlbmNlOiBU
cnkgdG8gZmluZCBhbiBhcHBsaWNhYmxlIG1ldGhvZCBiaW5kaW5nIHdpdGhvdXQgY2F1c2luZyB1
bmRlc2lyZWQgc2lkZS1lZmZlY3RzLiAqLwotCXB1YmxpYyBNZXRob2RCaW5kaW5nIGZpbmRDb21w
aWxlVGltZU1ldGhvZFRhcmdldGluZyhUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBTY29wZSBzY29w
ZSkgewotCQlpZiAodGhpcy5oYXNJbmZlcmVuY2VGaW5pc2hlZCkKLQkJCXJldHVybiB0aGlzLmJp
bmRpbmc7Ci0JCXJldHVybiAoTWV0aG9kQmluZGluZylpbnRlcm5hbFJlc29sdmVUZW50YXRpdmVs
eSh0YXJnZXRUeXBlLCBzY29wZSlbMF07Ci0JfQotCi0JLyoqIER1cmluZyBpbmZlcmVuY2U6IFRy
eSB0byByZXNvbHZlIHRoZSB0eXBlIG9mIHRoaXMgZXhwcmVzc2lvbiB3aXRob3V0IGNhdXNpbmcg
dW5kZXNpcmVkIHNpZGUtZWZmZWN0cy4gKi8KLQlwdWJsaWMgVHlwZUJpbmRpbmcgcmVzb2x2ZVRl
bnRhdGl2ZWx5KEJsb2NrU2NvcGUgc2NvcGUsIFR5cGVCaW5kaW5nIHRhcmdldFR5cGUpIHsKLQkJ
aWYgKHRoaXMuaGFzSW5mZXJlbmNlRmluaXNoZWQpCi0JCQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5
cGU7Ci0JCXJldHVybiAoVHlwZUJpbmRpbmcpaW50ZXJuYWxSZXNvbHZlVGVudGF0aXZlbHkodGFy
Z2V0VHlwZSwgc2NvcGUpWzFdOwotCX0KLQotCXByaXZhdGUgT2JqZWN0W10gaW50ZXJuYWxSZXNv
bHZlVGVudGF0aXZlbHkoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgU2NvcGUgc2NvcGUpIHsgLy8g
VE9ETzogY29udmVydCByZXR1cm4gdG8gUGFpcjxNZXRob2RCaW5kaW5nLFR5cGVCaW5kaW5nPgot
CQkvLyBGSVhNRTogY291bGQgZW5jbG9zaW5nU2NvcGUgc3RpbGwgYmUgbnVsbCBoZXJlPz8KLQkJ
SUVycm9ySGFuZGxpbmdQb2xpY3kgb2xkUG9saWN5ID0gdGhpcy5lbmNsb3NpbmdTY29wZS5wcm9i
bGVtUmVwb3J0ZXIoKS5zd2l0Y2hFcnJvckhhbmRsaW5nUG9saWN5KHNpbGVudEVycm9ySGFuZGxp
bmdQb2xpY3kpOwotCQlFeHByZXNzaW9uQ29udGV4dCBwcmV2aW91c0NvbnRleHQgPSB0aGlzLmV4
cHJlc3Npb25Db250ZXh0OwotCQlNZXRob2RCaW5kaW5nIHByZXZpb3VzQmluZGluZyA9IHRoaXMu
YmluZGluZzsKLQkJTWV0aG9kQmluZGluZyBwcmV2aW91c0Rlc2NyaXB0b3IgPSB0aGlzLmRlc2Ny
aXB0b3I7Ci0JCXRyeSB7Ci0JCQlzZXRFeHByZXNzaW9uQ29udGV4dChJTlZPQ0FUSU9OX0NPTlRF
WFQpOwotCQkJc2V0RXhwZWN0ZWRUeXBlKHRhcmdldFR5cGUpOwotCQkJdGhpcy5iaW5kaW5nID0g
bnVsbDsKLQkJCVR5cGVCaW5kaW5nIHR5cGUgPSByZXNvbHZlVHlwZSh0aGlzLmVuY2xvc2luZ1Nj
b3BlKTsKLQkJCXJldHVybiBuZXcgT2JqZWN0W10geyB0aGlzLmJpbmRpbmcsIHR5cGUgfTsKLQkJ
fSBmaW5hbGx5IHsKLQkJCXRoaXMuZW5jbG9zaW5nU2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuc3dp
dGNoRXJyb3JIYW5kbGluZ1BvbGljeShvbGRQb2xpY3kpOwotCQkJLy8gcmVtb3ZlICphbnkgcmVs
ZXZhbnQqIHRyYWNlcyBvZiB0aGlzICdpbm9mZmljaWFsJyByZXNvbHZpbmc6Ci0JCQl0aGlzLmJp
bmRpbmcgPSBwcmV2aW91c0JpbmRpbmc7Ci0JCQl0aGlzLmRlc2NyaXB0b3IgPSBwcmV2aW91c0Rl
c2NyaXB0b3I7Ci0JCQl0aGlzLmhhc0luZmVyZW5jZUZpbmlzaGVkID0gZmFsc2U7Ci0JCQlzZXRF
eHByZXNzaW9uQ29udGV4dChwcmV2aW91c0NvbnRleHQpOwotCQkJdGhpcy5leHBlY3RlZFR5cGUg
PSBudWxsOyAvLyBkb24ndCBjYWxsIHNldEV4cGVjdGVkVHlwZShudWxsKSwgd291bGQgTlBFCi0J
CQljbGVhblVwQWZ0ZXJUZW50YXRpdmVSZXNvbHZlKCk7Ci0JCX0KLQl9Ci0KLQl2b2lkIGNsZWFu
VXBBZnRlclRlbnRhdGl2ZVJlc29sdmUoKSB7Ci0JCS8vIG5vcC4gU3ViY2xhc3NlczogZG8geW91
ciBob21ld29yayEKLQl9Ci0KIAlwdWJsaWMgdm9pZCBjaGVja0FnYWluc3RGaW5hbFRhcmdldFR5
cGUoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSkgewotCQlpZiAodGhpcy5leHBlY3RlZElzRmluYWxU
YXJnZXRUeXBlKQotCQkJcmV0dXJuOyAvLyBhbHJlYWR5IGNoZWNrZWQKLQkJdGhpcy5leHBlY3Rl
ZElzRmluYWxUYXJnZXRUeXBlID0gdHJ1ZTsKIAkJcmVzb2x2ZVR5cGVFeHBlY3RpbmcodGhpcy5l
bmNsb3NpbmdTY29wZSwgdGFyZ2V0VHlwZSk7CiAJfQogCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0
L0ludm9jYXRpb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvSW52b2NhdGlvbi5qYXZhCmluZGV4IDJkZWMw
MTEuLmVmOTk4N2UgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvSW52b2NhdGlvbi5qYXZhCisrKyBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hc3QvSW52b2NhdGlvbi5qYXZhCkBAIC0xNSw4ICsxNSw4IEBACiBwYWNrYWdlIG9y
Zy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3Q7CiAKIGltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkluZmVyZW5jZUNvbnRleHQxODsKLWltcG9y
dCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkludm9jYXRpb25TaXRl
OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuTWV0aG9k
QmluZGluZzsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3Vw
LlBvbHlTaXRlOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29r
dXAuVHlwZUJpbmRpbmc7CiAKIC8qKgpAQCAtMjYsNyArMjYsNyBAQCBpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5UeXBlQmluZGluZzsKICAqIDxsaT5JbnZv
Y2F0aW9uIFR5cGUgSW5mZXJlbmNlICgxOC41LjIpLjwvbGk+CiAgKiA8L3VsPgogICovCi1wdWJs
aWMgaW50ZXJmYWNlIEludm9jYXRpb24gZXh0ZW5kcyBJbnZvY2F0aW9uU2l0ZSwgUG9seUV4cHJl
c3Npb24geworcHVibGljIGludGVyZmFjZSBJbnZvY2F0aW9uIGV4dGVuZHMgUG9seVNpdGUgewog
CiAJRXhwcmVzc2lvbltdIGFyZ3VtZW50cygpOwogCkBAIC0zNCwxNiArMzQsMTAgQEAgcHVibGlj
IGludGVyZmFjZSBJbnZvY2F0aW9uIGV4dGVuZHMgSW52b2NhdGlvblNpdGUsIFBvbHlFeHByZXNz
aW9uIHsKIAogCUluZmVyZW5jZUNvbnRleHQxOCBpbmZlcmVuY2VDb250ZXh0KCk7CiAKLQkvKiog
U2VlIHtAbGluayAjaW5mZXJlbmNlQ29udGV4dCgpfS4gKi8KKwkvKiogU2VlIHtAbGluayBQb2x5
U2l0ZSNpbmZlcmVuY2VLaW5kKCl9LiAqLwogCXZvaWQgc2V0SW5mZXJlbmNlS2luZChpbnQgY2hl
Y2tLaW5kKTsKIAogCS8qKgotCSAqIEFuc3dlciBvbmUgb2Yge0BsaW5rIEluZmVyZW5jZUNvbnRl
eHQxOCNDSEVDS19TVFJJQ1R9LCB7QGxpbmsgSW5mZXJlbmNlQ29udGV4dDE4I0NIRUNLX0xPT1NF
fSAKLQkgKiBvciB7QGxpbmsgSW5mZXJlbmNlQ29udGV4dDE4I0NIRUNLX1ZBUkFSR30sIHRvIHNp
Z25hbCB3aGF0IGtpbmQgb2YgaW5mZXJlbmNlIGhhcyBiZWVuIHVzZWQuCi0JICovCi0JaW50IGlu
ZmVyZW5jZUtpbmQoKTsKLQotCS8qKgogCSAqIFdoZXJlIHRoZSBBU1Qgbm9kZSBtYXkgaG9sZCBy
ZWZlcmVuY2VzIHRvIHRoZSByZXN1bHRzIG9mIEludm9jYXRpb24gQXBwbGljYWJpbGl0eSBJbmZl
cmVuY2UsCiAJICogdGhpcyBtZXRob2QgYWxsb3dzIHRvIHVwZGF0ZSB0aG9zZSByZWZlcmVuY2Vz
IHRvIHRoZSByZXN1bHQgb2YgSW52b2NhdGlvbiBUeXBlIEluZmVyZW5jZS4KIAkgKiBOb3RlIHRo
YXQgcG90ZW50aWFsbHkgbW9yZSB0aGFuIGp1c3QgdGhlIG1ldGhvZCBiaW5kaW5nIGlzIHVwZGF0
ZWQuCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0xhbWJkYUV4cHJlc3Npb24uamF2YSBiL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhCmluZGV4IDY3M2RhODEuLjA0N2UyYjIgMTAwNjQ0
Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3Qv
TGFtYmRhRXhwcmVzc2lvbi5qYXZhCkBAIC0zNjgsMjYgKzM2OCw2IEBAIHB1YmxpYyBjbGFzcyBM
YW1iZGFFeHByZXNzaW9uIGV4dGVuZHMgRnVuY3Rpb25hbEV4cHJlc3Npb24gaW1wbGVtZW50cyBS
ZWZlcmVuY2VDCiAJCX0KIAkJcmV0dXJuIHRoaXMucmVzb2x2ZWRUeXBlOwogCX0KLQkKLQl2b2lk
IGNsZWFuVXBBZnRlclRlbnRhdGl2ZVJlc29sdmUoKSB7Ci0JCS8vIHJlbW92ZSB0cmFjZXMgb2Yg
YXR0ZW1wdHMgdG8gcmVzb2x2ZSB0aGUgYXJndW1lbnQgYmVmb3JlIHdlIGhhdmUgdGhlIGZpbmFs
IHRhcmdldCB0eXBlOgotCQlpZiAodGhpcy5hcmd1bWVudHMgIT0gbnVsbCkKLQkJCWZvciAoaW50
IGkgPSAwOyBpIDwgdGhpcy5hcmd1bWVudHMubGVuZ3RoOyBpKyspCi0JCQkJdGhpcy5hcmd1bWVu
dHNbaV0uYmluZGluZyA9IG51bGw7Ci0JCS8vIGFsc28gcmVtb3ZlIHRyYWNlcyBvZiByZWZlcmVu
Y2VzIHRvIHRoaXMgYXJndW1lbnQKLQkJaWYgKHRoaXMuYm9keSAhPSBudWxsKQotCQkJdGhpcy5i
b2R5LnRyYXZlcnNlKG5ldyBBU1RWaXNpdG9yKCkgewotCQkJCXB1YmxpYyBib29sZWFuIHZpc2l0
KFNpbmdsZU5hbWVSZWZlcmVuY2Ugc2luZ2xlTmFtZVJlZmVyZW5jZSwgQmxvY2tTY29wZSBibG9j
a1Njb3BlKSB7Ci0JCQkJCWlmIChzaW5nbGVOYW1lUmVmZXJlbmNlLmJpbmRpbmcgaW5zdGFuY2Vv
ZiBMb2NhbFZhcmlhYmxlQmluZGluZykgewotCQkJCQkJc2luZ2xlTmFtZVJlZmVyZW5jZS5iaXRz
ICY9IH5BU1ROb2RlLlJlc3RyaWN0aXZlRmxhZ01BU0s7Ci0JCQkJCQlzaW5nbGVOYW1lUmVmZXJl
bmNlLmJpdHMgfD0gQmluZGluZy5WQVJJQUJMRTsKLQkJCQkJCXNpbmdsZU5hbWVSZWZlcmVuY2Uu
YWN0dWFsUmVjZWl2ZXJUeXBlID0gbnVsbDsKLQkJCQkJCXNpbmdsZU5hbWVSZWZlcmVuY2UuYmlu
ZGluZyA9IG51bGw7Ci0JCQkJCX0KLQkJCQkJcmV0dXJuIHRydWU7Ci0JCQkJfQotCQkJfSwgdGhp
cy5zY29wZSk7Ci0JfQogCiAJcHVibGljIGJvb2xlYW4gYXJndW1lbnRzVHlwZUVsaWRlZCgpIHsK
IAkJcmV0dXJuIHRoaXMuYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgdGhpcy5hcmd1bWVudHNbMF0u
aGFzRWxpZGVkVHlwZSgpOwpAQCAtNjg2LDcgKzY2Niw3IEBAIHB1YmxpYyBjbGFzcyBMYW1iZGFF
eHByZXNzaW9uIGV4dGVuZHMgRnVuY3Rpb25hbEV4cHJlc3Npb24gaW1wbGVtZW50cyBSZWZlcmVu
Y2VDCiAJCQkJfSBlbHNlIHsKIAkJCQkJdGhpcy52b2lkQ29tcGF0aWJsZSA9ICgoRXhwcmVzc2lv
bikgdGhpcy5ib2R5KS5zdGF0ZW1lbnRFeHByZXNzaW9uKCk7CiAJCQkJCS8vIFRPRE86IGluIGdl
dFJlc29sdmVkQ29weUZvckluZmVyZW5jZVRhcmdldGluZygpIHdlIG5lZWQgdG8gY2hlY2sgaWYg
dGhlIGV4cHJlc3Npb24KLQkJCQkJLy8gICAgICAgICpjb3VsZCogYWxzbyBwcm9jdWRlIGEgdmFs
dWUgYW5kIHNldCB2YWx1ZUNvbXBhdGlibGUgYWNjb3JkaW5nbHkuCisJCQkJCS8vICAgICAgICAq
Y291bGQqIGFsc28gcHJvZHVjZSBhIHZhbHVlIGFuZCBzZXQgdmFsdWVDb21wYXRpYmxlIGFjY29y
ZGluZ2x5LgogCQkJCQkvLyAgICAgICAgSXMgdGhhdCBuZWVkZWQgYWxzbyBoZXJlPwogCQkJCQl0
aGlzLnNoYXBlQW5hbHlzaXNDb21wbGV0ZSA9IHRydWU7CiAJCQkJfQpAQCAtNzY3LDcgKzc0Nyw3
IEBAIHB1YmxpYyBjbGFzcyBMYW1iZGFFeHByZXNzaW9uIGV4dGVuZHMgRnVuY3Rpb25hbEV4cHJl
c3Npb24gaW1wbGVtZW50cyBSZWZlcmVuY2VDCiAJCQl0aGlzLmhhc0lnbm9yZWRNYW5kYXRvcnlF
cnJvcnMgPSBmYWxzZTsKIAkJCVR5cGVCaW5kaW5nIHR5cGUgPSBjb3B5LnJlc29sdmVUeXBlKHRo
aXMuZW5jbG9zaW5nU2NvcGUpOwogCQkJaWYgKHRoaXMuYm9keSBpbnN0YW5jZW9mIEJsb2NrKSB7
Ci0JCQkJaWYgKHRoaXMucmV0dXJuc1ZvaWQpIHsKKwkJCQlpZiAoY29weS5yZXR1cm5zVm9pZCkg
ewogCQkJCQljb3B5LnNoYXBlQW5hbHlzaXNDb21wbGV0ZSA9IHRydWU7CiAJCQkJfQogCQkJfSBl
bHNlIHsKQEAgLTc4MCwxNCArNzYwLDE1IEBAIHB1YmxpYyBjbGFzcyBMYW1iZGFFeHByZXNzaW9u
IGV4dGVuZHMgRnVuY3Rpb25hbEV4cHJlc3Npb24gaW1wbGVtZW50cyBSZWZlcmVuY2VDCiAJCQkJ
Y29weS5zaGFwZUFuYWx5c2lzQ29tcGxldGUgPSB0cnVlOwogCQkJfQogCQkJLy8gRG8gbm90IHBy
b2NlZWQgd2l0aCBkYXRhL2NvbnRyb2wgZmxvdyBhbmFseXNpcyBpZiByZXNvbHZlIGVuY291bnRl
cmVkIGVycm9ycy4KLQkJCWlmICh0eXBlID09IG51bGwgfHwgIXR5cGUuaXNWYWxpZEJpbmRpbmco
KSB8fCB0aGlzLmhhc0lnbm9yZWRNYW5kYXRvcnlFcnJvcnMgfHwgZW5jbG9zaW5nU2NvcGVzSGF2
ZUVycm9ycygpKSB7Ci0JCQkJcmV0dXJuIG51bGw7CisJCQlpZiAodHlwZSAhPSBudWxsICYmIHR5
cGUuaXNWYWxpZEJpbmRpbmcoKSAmJiAhdGhpcy5oYXNJZ25vcmVkTWFuZGF0b3J5RXJyb3JzICYm
ICFlbmNsb3NpbmdTY29wZXNIYXZlRXJyb3JzKCkpIHsKKwkJCQkvLyB2YWx1ZSBjb21wYXRpYmls
aXR5IG9mIGJsb2NrIGxhbWJkYSdzIGlzIHRoZSBvbmx5IG9wZW4gcXVlc3Rpb24uCisJCQkJaWYg
KCFjb3B5LnNoYXBlQW5hbHlzaXNDb21wbGV0ZSkKKwkJCQkJY29weS52YWx1ZUNvbXBhdGlibGUg
PSBjb3B5LmRvZXNOb3RDb21wbGV0ZU5vcm1hbGx5KCk7CisJCQl9IGVsc2UgeworCQkJCWlmICgh
Y29weS5yZXR1cm5zVm9pZCkKKwkJCQkJY29weS52YWx1ZUNvbXBhdGlibGUgPSB0cnVlOyAvLyBv
cHRpbWlzdGljYWxseSwgVE9ETzogaXMgdGhpcyBPSz8/CiAJCQl9CiAJCQkKLQkJCS8vIHZhbHVl
IGNvbXBhdGliaWxpdHkgb2YgYmxvY2sgbGFtYmRhJ3MgaXMgdGhlIG9ubHkgb3BlbiBxdWVzdGlv
bi4KLQkJCWlmICghY29weS5zaGFwZUFuYWx5c2lzQ29tcGxldGUpCi0JCQkJY29weS52YWx1ZUNv
bXBhdGlibGUgPSBjb3B5LmRvZXNOb3RDb21wbGV0ZU5vcm1hbGx5KCk7Ci0JCQkKIAkJCWNvcHku
c2hhcGVBbmFseXNpc0NvbXBsZXRlID0gdHJ1ZTsKIAkJfSBmaW5hbGx5IHsKIAkJCWNvbXBpbGVy
T3B0aW9ucy5pc0Fubm90YXRpb25CYXNlZE51bGxBbmFseXNpc0VuYWJsZWQgPSBhbmFseXplTlBF
OwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9NZXNzYWdlU2VuZC5qYXZhIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9N
ZXNzYWdlU2VuZC5qYXZhCmluZGV4IDk2NjcxZjUuLmMxYjdkYjYgMTAwNjQ0Ci0tLSBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxl
ci9hc3QvTWVzc2FnZVNlbmQuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L01lc3NhZ2VTZW5kLmphdmEK
QEAgLTg0OSwxMSArODQ5LDcgQEAgcHJvdGVjdGVkIHZvaWQgZmluZE1ldGhvZEJpbmRpbmcoQmxv
Y2tTY29wZSBzY29wZSwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzLAogCQkJOiBzY29wZS5n
ZXRNZXRob2QodGhpcy5hY3R1YWxSZWNlaXZlclR5cGUsIHRoaXMuc2VsZWN0b3IsIGFyZ3VtZW50
VHlwZXMsIHRoaXMpOwogCQogCWlmIChwb2x5RXhwcmVzc2lvblNlZW4pCi0JCWlmIChyZXNvbHZl
UG9seUV4cHJlc3Npb25Bcmd1bWVudHModGhpcywgc2NvcGUsIHRoaXMuYmluZGluZywgYXJndW1l
bnRUeXBlcykpIHsKLQkJCXRoaXMuYmluZGluZyA9IHRoaXMucmVjZWl2ZXIuaXNJbXBsaWNpdFRo
aXMoKQotCQkJCQk/IHNjb3BlLmdldEltcGxpY2l0TWV0aG9kKHRoaXMuc2VsZWN0b3IsIGFyZ3Vt
ZW50VHlwZXMsIHRoaXMpCi0JCQkJCTogc2NvcGUuZ2V0TWV0aG9kKHRoaXMuYWN0dWFsUmVjZWl2
ZXJUeXBlLCB0aGlzLnNlbGVjdG9yLCBhcmd1bWVudFR5cGVzLCB0aGlzKTsKLQkJfQorCQlyZXNv
bHZlUG9seUV4cHJlc3Npb25Bcmd1bWVudHModGhpcywgc2NvcGUsIHRoaXMuYmluZGluZywgYXJn
dW1lbnRUeXBlcyk7CiB9CiAKIHB1YmxpYyB2b2lkIHNldEFjdHVhbFJlY2VpdmVyVHlwZShSZWZl
cmVuY2VCaW5kaW5nIHJlY2VpdmVyVHlwZSkgewpAQCAtOTc0LDE0ICs5NzAsNyBAQCBwdWJsaWMg
dm9pZCBzZXRJbmZlcmVuY2VLaW5kKGludCBjaGVja0tpbmQpIHsKIAl0aGlzLmluZmVyZW5jZUtp
bmQgPSBjaGVja0tpbmQ7CiB9CiBwdWJsaWMgaW50IGluZmVyZW5jZUtpbmQoKSB7Ci0JcmV0dXJu
ICh0aGlzLmluZmVyZW5jZUtpbmQgJiBJbmZlcmVuY2VDb250ZXh0MTguSU5GRVJFTkNFX0tJTkRf
TUFTSyk7Ci19Ci1wdWJsaWMgdm9pZCBtYXJrSW5mZXJlbmNlRmluaXNoZWQoKSB7Ci0JdGhpcy5p
bmZlcmVuY2VLaW5kIHw9IEluZmVyZW5jZUNvbnRleHQxOC5DSEVDS19GSU5JU0hFRDsKLX0KLXB1
YmxpYyBib29sZWFuIGhhc0luZmVyZW5jZUZpbmlzaGVkKCkgewotCXJldHVybiAodGhpcy5pbmZl
cmVuY2VDb250ZXh0ID09IG51bGwgJiYgdGhpcy5pbmZlcmVuY2VLaW5kID09IDApIC8vIG9ubHkg
cmVsZXZhbnQgaWYgaW5mZXJlbmNlIGhhcyBiZWVuIHN0YXJ0ZWQKLQkJCXx8ICh0aGlzLmluZmVy
ZW5jZUtpbmQgJiBJbmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tfRklOSVNIRUQpICE9IDA7CisJcmV0
dXJuIHRoaXMuaW5mZXJlbmNlS2luZDsKIH0KIHB1YmxpYyBUeXBlQmluZGluZyB1cGRhdGVCaW5k
aW5ncyhNZXRob2RCaW5kaW5nIHVwZGF0ZWRCaW5kaW5nKSB7CiAJdGhpcy5iaW5kaW5nID0gdXBk
YXRlZEJpbmRpbmc7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1BvbHlFeHByZXNzaW9uLmphdmEg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvYXN0L1BvbHlFeHByZXNzaW9uLmphdmEKZGVsZXRlZCBmaWxlIG1vZGUgMTAwNjQ0
CmluZGV4IDZiNzQxZGYuLjAwMDAwMDAKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Qb2x5RXhwcmVzc2lvbi5q
YXZhCisrKyAvZGV2L251bGwKQEAgLTEsMjggKzAsMCBAQAotLyoqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioKLSAqIENvcHlyaWdodCAoYykgMjAxMyBHSyBTb2Z0d2FyZSBBRy4KLSAqIEFsbCByaWdodHMg
cmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKLSAq
IGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGlj
IExpY2Vuc2UgdjEuMAotICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFu
ZCBpcyBhdmFpbGFibGUgYXQKLSAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYx
MC5odG1sCi0gKgotICogVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBhbiBlYXJseS1kcmFm
dCBzcGVjaWZpY2F0aW9uIGRldmVsb3BlZCB1bmRlciB0aGUgSmF2YQotICogQ29tbXVuaXR5IFBy
b2Nlc3MgKEpDUCkgYW5kIGlzIG1hZGUgYXZhaWxhYmxlIGZvciB0ZXN0aW5nIGFuZCBldmFsdWF0
aW9uIHB1cnBvc2VzCi0gKiBvbmx5LiBUaGUgY29kZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGFu
eSBzcGVjaWZpY2F0aW9uIG9mIHRoZSBKQ1AuCi0gKgotICogQ29udHJpYnV0b3JzOgotICogICAg
IFN0ZXBoYW4gSGVycm1hbm4gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24KLSAqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqLwotcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29t
cGlsZXIuYXN0OwotCi0vKioKLSAqIEFic3RyYWN0aW9uIG9mIEFTVCBub2RlcyB0aGF0IGNhbiBi
ZSBwb2x5IGV4cHJlc3Npb25zIGFuZCBwYXJ0aWNpcGF0ZSBpbiB0eXBlIGluZmVyZW5jZS4KLSAq
IChub3QgaW5jbHVkZWQ6IENvbmRpdGlvbmFsRXhwcmVzc2lvbikuCi0gKi8KLXB1YmxpYyBpbnRl
cmZhY2UgUG9seUV4cHJlc3Npb24gewotCi0JLyoqIE1hcmsgdGhhdCBpbmZlcmVuY2UgZm9yIHRo
aXMgZXhwcmVzc2lvbiBoYXMgZmluaXNoZWQuICovCi0Jdm9pZCBtYXJrSW5mZXJlbmNlRmluaXNo
ZWQoKTsKLQotCS8qKiBBbnN3ZXIgd2hldGhlciB0eXBlIGluZmVyZW5jZSBmb3IgdGhpcyBleHBy
ZXNzaW9uIGhhcyBmaW5pc2hlZCAoaWYgbmVlZGVkKS4gKi8KLQlib29sZWFuIGhhc0luZmVyZW5j
ZUZpbmlzaGVkKCk7Ci19CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVyZW5jZUV4cHJlc3Np
b24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9hc3QvUmVmZXJlbmNlRXhwcmVzc2lvbi5qYXZhCmluZGV4IDEzNTNh
ZjUuLjVkNmEzYzggMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUmVmZXJlbmNlRXhwcmVzc2lvbi5q
YXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9hc3QvUmVmZXJlbmNlRXhwcmVzc2lvbi5qYXZhCkBAIC00MywxMCAr
NDMsMTAgQEAgaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAu
QXJyYXlCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5s
b29rdXAuQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
bG9va3VwLkJsb2NrU2NvcGU7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBp
bGVyLmxvb2t1cC5JbmZlcmVuY2VDb250ZXh0MTg7Ci1pbXBvcnQgb3JnLmVjbGlwc2UuamR0Lmlu
dGVybmFsLmNvbXBpbGVyLmxvb2t1cC5JbnZvY2F0aW9uU2l0ZTsKIGltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLk1ldGhvZEJpbmRpbmc7CiBpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5OZXN0ZWRUeXBlQmluZGluZzsK
IGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlBhcmFtZXRl
cml6ZWRUeXBlQmluZGluZzsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIubG9va3VwLlBvbHlTaXRlOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21w
aWxlci5sb29rdXAuUG9seVR5cGVCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRl
cm5hbC5jb21waWxlci5sb29rdXAuUHJvYmxlbVJlYXNvbnM7CiBpbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5SZWZlcmVuY2VCaW5kaW5nOwpAQCAtNTksNyAr
NTksNyBAQCBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5U
eXBlQ29uc3RhbnRzOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5s
b29rdXAuVHlwZUlkczsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIu
cHJvYmxlbS5Qcm9ibGVtU2V2ZXJpdGllczsKIAotcHVibGljIGNsYXNzIFJlZmVyZW5jZUV4cHJl
c3Npb24gZXh0ZW5kcyBGdW5jdGlvbmFsRXhwcmVzc2lvbiBpbXBsZW1lbnRzIEludm9jYXRpb25T
aXRlIHsKK3B1YmxpYyBjbGFzcyBSZWZlcmVuY2VFeHByZXNzaW9uIGV4dGVuZHMgRnVuY3Rpb25h
bEV4cHJlc3Npb24gaW1wbGVtZW50cyBQb2x5U2l0ZSB7CiAJCiAJcHVibGljIEV4cHJlc3Npb24g
bGhzOwogCXB1YmxpYyBUeXBlUmVmZXJlbmNlIFtdIHR5cGVBcmd1bWVudHM7CkBAIC01MjAsNiAr
NTIwLDcgQEAgcHVibGljIGNsYXNzIFJlZmVyZW5jZUV4cHJlc3Npb24gZXh0ZW5kcyBGdW5jdGlv
bmFsRXhwcmVzc2lvbiBpbXBsZW1lbnRzIEludm9jYXQKICAgICAJcmV0dXJuIHRoaXMucmVzb2x2
ZWRUeXBlOyAvLyBQaGV3ICEKIAl9CiAKKwkvKiogRHVyaW5nIGluZmVyZW5jZTogVHJ5IHRvIGZp
bmQgYW4gYXBwbGljYWJsZSBtZXRob2QgYmluZGluZyB3aXRob3V0IGNhdXNpbmcgdW5kZXNpcmVk
IHNpZGUtZWZmZWN0cy4gKi8KIAlwdWJsaWMgTWV0aG9kQmluZGluZyBmaW5kQ29tcGlsZVRpbWVN
ZXRob2RUYXJnZXRpbmcoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgU2NvcGUgc2NvcGUpIHsKIAkJ
aWYgKHRoaXMuZXhhY3RNZXRob2RCaW5kaW5nICE9IG51bGwpIHsKIAkJCS8vIFRPRE86IHNob3Vs
ZG4ndCBleHRhY3RNZXRob2RCaW5kaW5nIGFscmVhZHkgYmUgcGFyYW1ldGVyaXplZD8KQEAgLTUy
OCw3ICs1MjksMjkgQEAgcHVibGljIGNsYXNzIFJlZmVyZW5jZUV4cHJlc3Npb24gZXh0ZW5kcyBG
dW5jdGlvbmFsRXhwcmVzc2lvbiBpbXBsZW1lbnRzIEludm9jYXQKIAkJCX0KIAkJCXJldHVybiB0
aGlzLmV4YWN0TWV0aG9kQmluZGluZzsKIAkJfQotCQlyZXR1cm4gc3VwZXIuZmluZENvbXBpbGVU
aW1lTWV0aG9kVGFyZ2V0aW5nKHRhcmdldFR5cGUsIHNjb3BlKTsKKwkJcmV0dXJuIGludGVybmFs
UmVzb2x2ZVRlbnRhdGl2ZWx5KHRhcmdldFR5cGUsIHNjb3BlKTsKKwl9CisKKwlNZXRob2RCaW5k
aW5nIGludGVybmFsUmVzb2x2ZVRlbnRhdGl2ZWx5KFR5cGVCaW5kaW5nIHRhcmdldFR5cGUsIFNj
b3BlIHNjb3BlKSB7CisJCS8vIEZJWE1FOiBjb3VsZCBlbmNsb3NpbmdTY29wZSBzdGlsbCBiZSBu
dWxsIGhlcmU/PworCQlJRXJyb3JIYW5kbGluZ1BvbGljeSBvbGRQb2xpY3kgPSB0aGlzLmVuY2xv
c2luZ1Njb3BlLnByb2JsZW1SZXBvcnRlcigpLnN3aXRjaEVycm9ySGFuZGxpbmdQb2xpY3koc2ls
ZW50RXJyb3JIYW5kbGluZ1BvbGljeSk7CisJCUV4cHJlc3Npb25Db250ZXh0IHByZXZpb3VzQ29u
dGV4dCA9IHRoaXMuZXhwcmVzc2lvbkNvbnRleHQ7CisJCU1ldGhvZEJpbmRpbmcgcHJldmlvdXNC
aW5kaW5nID0gdGhpcy5iaW5kaW5nOworCQlNZXRob2RCaW5kaW5nIHByZXZpb3VzRGVzY3JpcHRv
ciA9IHRoaXMuZGVzY3JpcHRvcjsKKwkJdHJ5IHsKKwkJCXNldEV4cHJlc3Npb25Db250ZXh0KElO
Vk9DQVRJT05fQ09OVEVYVCk7CisJCQlzZXRFeHBlY3RlZFR5cGUodGFyZ2V0VHlwZSk7CisJCQl0
aGlzLmJpbmRpbmcgPSBudWxsOworCQkJcmVzb2x2ZVR5cGUodGhpcy5lbmNsb3NpbmdTY29wZSk7
CisJCQlyZXR1cm4gdGhpcy5iaW5kaW5nOworCQl9IGZpbmFsbHkgeworCQkJdGhpcy5lbmNsb3Np
bmdTY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5zd2l0Y2hFcnJvckhhbmRsaW5nUG9saWN5KG9sZFBv
bGljeSk7CisJCQkvLyByZW1vdmUgKmFueSByZWxldmFudCogdHJhY2VzIG9mIHRoaXMgJ2lub2Zm
aWNpYWwnIHJlc29sdmluZzoKKwkJCXRoaXMuYmluZGluZyA9IHByZXZpb3VzQmluZGluZzsKKwkJ
CXRoaXMuZGVzY3JpcHRvciA9IHByZXZpb3VzRGVzY3JpcHRvcjsKKwkJCXNldEV4cHJlc3Npb25D
b250ZXh0KHByZXZpb3VzQ29udGV4dCk7CisJCQl0aGlzLmV4cGVjdGVkVHlwZSA9IG51bGw7IC8v
IGRvbid0IGNhbGwgc2V0RXhwZWN0ZWRUeXBlKG51bGwpLCB3b3VsZCBOUEUKKwkJfQogCX0KIAog
CXB1YmxpYyBib29sZWFuIGlzQ29uc3RydWN0b3JSZWZlcmVuY2UoKSB7CkBAIC01NjQsNyArNTg3
LDExIEBAIHB1YmxpYyBjbGFzcyBSZWZlcmVuY2VFeHByZXNzaW9uIGV4dGVuZHMgRnVuY3Rpb25h
bEV4cHJlc3Npb24gaW1wbGVtZW50cyBJbnZvY2F0CiAJCS8vIGlzIG5vdCBzdWJqZWN0IHRvIElu
dm9jYXRpb24gVHlwZSBJbmZlcmVuY2UgKGlzIG5vdCBhbiBpbnZvY2F0aW9uKS4KIAkJcmV0dXJu
IG5ldyBJbmZlcmVuY2VDb250ZXh0MTgoc2NvcGUsIG51bGwvKm5vIGFyZ3VtZW50cyovLCB0aGlz
KTsKIAl9Ci0gCisKKwlwdWJsaWMgaW50IGluZmVyZW5jZUtpbmQoKSB7IAorCQlyZXR1cm4gSW5m
ZXJlbmNlQ29udGV4dDE4LkNIRUNLX0xPT1NFOyAvLyBwYXJ0aWNpcGF0ZSBpbiBpbmZlcmVuY2Ug
YnV0IG5ldmVyIENIRUNLX1ZBUkFSRworCX0KKwogCXB1YmxpYyBib29sZWFuIGlzU3VwZXJBY2Nl
c3MoKSB7CiAJCXJldHVybiBmYWxzZTsKIAl9CkBAIC02MjIsOCArNjQ5LDYgQEAgcHVibGljIGNs
YXNzIFJlZmVyZW5jZUV4cHJlc3Npb24gZXh0ZW5kcyBGdW5jdGlvbmFsRXhwcmVzc2lvbiBpbXBs
ZW1lbnRzIEludm9jYXQKIAl9CiAKIAlwdWJsaWMgYm9vbGVhbiBpc0NvbXBhdGlibGVXaXRoKFR5
cGVCaW5kaW5nIGxlZnQsIFNjb3BlIHNjb3BlKSB7Ci0JCWlmICh0aGlzLmhhc0luZmVyZW5jZUZp
bmlzaGVkKQotCQkJcmV0dXJuIHRoaXMucmVzb2x2ZWRUeXBlICE9IG51bGwgPyB0aGlzLnJlc29s
dmVkVHlwZS5pc0NvbXBhdGlibGVXaXRoKGxlZnQsIHNjb3BlKSA6IGZhbHNlOwogCQkvLyAxNS4y
OC4yCiAJCWZpbmFsIE1ldGhvZEJpbmRpbmcgc2FtID0gbGVmdC5nZXRTaW5nbGVBYnN0cmFjdE1l
dGhvZCh0aGlzLmVuY2xvc2luZ1Njb3BlLCB0cnVlKTsKIAkJaWYgKHNhbSA9PSBudWxsIHx8ICFz
YW0uaXNWYWxpZEJpbmRpbmcoKSkKQEAgLTYzOCw3ICs2NjMsNiBAQCBwdWJsaWMgY2xhc3MgUmVm
ZXJlbmNlRXhwcmVzc2lvbiBleHRlbmRzIEZ1bmN0aW9uYWxFeHByZXNzaW9uIGltcGxlbWVudHMg
SW52b2NhdAogCQkJdGhpcy5lbmNsb3NpbmdTY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5zd2l0Y2hF
cnJvckhhbmRsaW5nUG9saWN5KG9sZFBvbGljeSk7CiAJCQlpc0NvbXBhdGlibGUgPSB0aGlzLmJp
bmRpbmcgIT0gbnVsbCAmJiB0aGlzLmJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKTsKIAkJCXRoaXMu
YmluZGluZyA9IG51bGw7Ci0JCQl0aGlzLmhhc0luZmVyZW5jZUZpbmlzaGVkID0gZmFsc2U7CiAJ
CQlzZXRFeHBlY3RlZFR5cGUobnVsbCk7CiAJCX0KIAkJcmV0dXJuIGlzQ29tcGF0aWJsZTsKZGlm
ZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9hc3QvU3RhdGVtZW50LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1N0YXRlbWVu
dC5qYXZhCmluZGV4IDk5NWI2OGIuLmI0MDUwMmQgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvU3Rh
dGVtZW50LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9TdGF0ZW1lbnQuamF2YQpAQCAtMzMwLDE2ICsz
MzAsMTMgQEAgcHVibGljIEV4cHJlc3Npb25Db250ZXh0IGdldEV4cHJlc3Npb25Db250ZXh0KCkg
ewogfQogLyoqCiAgKiBGb3IgYWxsIGNvbnN0cnVjdG9yIGludm9jYXRpb25zOiBmaW5kIHRoZSBj
b25zdHJ1Y3RvciBiaW5kaW5nOyAKLSAqIGlmIHBvbHlFeHByZXNzaW9uU2VlbiBhbGxvdyBmb3Ig
dHdvIGF0dGVtcHRzIHdoZXJlIHRoZSBmaXJzdCByb3VuZCBtYXkgc3RvcAotICogYWZ0ZXIgYXBw
bGljYWJpbGl0eSBjaGVja2luZyAoMTguNS4xKSB0byBpbmNsdWRlIG1vcmUgaW5mb3JtYXRpb24g
aW50byB0aGUgZmluYWwKLSAqIGludm9jYXRpb24gdHlwZSBpbmZlcmVuY2UgKDE4LjUuMikuCisg
KiBpZiBwb2x5RXhwcmVzc2lvblNlZW4gcGVyZm9ybSBzb21lIHBvc3QgcHJvY2Vzc2luZyBmb3Ig
dGhvc2UgYW5kIHByb2R1Y2UKKyAqIGFueSB1cGRhdGVzIGFzIHNpZGUtZWZmZWN0cyBpbnRvICdh
cmd1bWVudFR5cGVzJy4KICAqLwogcHJvdGVjdGVkIE1ldGhvZEJpbmRpbmcgZmluZENvbnN0cnVj
dG9yQmluZGluZyhCbG9ja1Njb3BlIHNjb3BlLCBJbnZvY2F0aW9uIHNpdGUsIFJlZmVyZW5jZUJp
bmRpbmcgcmVjZWl2ZXJUeXBlLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMsIGJvb2xlYW4g
cG9seUV4cHJlc3Npb25TZWVuKSB7CiAJTWV0aG9kQmluZGluZyBjdG9yQmluZGluZyA9IHNjb3Bl
LmdldENvbnN0cnVjdG9yKHJlY2VpdmVyVHlwZSwgYXJndW1lbnRUeXBlcywgc2l0ZSk7Ci0JaWYg
KHBvbHlFeHByZXNzaW9uU2VlbikgewotCQlpZiAocmVzb2x2ZVBvbHlFeHByZXNzaW9uQXJndW1l
bnRzKHNpdGUsIHNjb3BlLCBjdG9yQmluZGluZywgYXJndW1lbnRUeXBlcykpCi0JCQlyZXR1cm4g
c2NvcGUuZ2V0Q29uc3RydWN0b3IocmVjZWl2ZXJUeXBlLCBhcmd1bWVudFR5cGVzLCBzaXRlKTsK
LQl9CisJaWYgKHBvbHlFeHByZXNzaW9uU2VlbikKKwkJcmVzb2x2ZVBvbHlFeHByZXNzaW9uQXJn
dW1lbnRzKHNpdGUsIHNjb3BlLCBjdG9yQmluZGluZywgYXJndW1lbnRUeXBlcyk7CiAJcmV0dXJu
IGN0b3JCaW5kaW5nOwogfQogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Cb3VuZFNldC5q
YXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVy
bmFsL2NvbXBpbGVyL2xvb2t1cC9Cb3VuZFNldC5qYXZhCmluZGV4IGRkYTM0MGUuLmZiODA1NGYg
MTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQm91bmRTZXQuamF2YQorKysgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9v
a3VwL0JvdW5kU2V0LmphdmEKQEAgLTI2OCw2ICsyNjgsOCBAQCBjbGFzcyBCb3VuZFNldCB7CiAJ
CQlNYXAuRW50cnkgZW50cnkgPSAoRW50cnkpIHNldHNJdGVyYXRvci5uZXh0KCk7CiAJCQljb3B5
LmJvdW5kc1BlclZhcmlhYmxlLnB1dChlbnRyeS5nZXRLZXkoKSwgKChUaHJlZVNldHMpZW50cnku
Z2V0VmFsdWUoKSkuY29weSgpKTsKIAkJfQorCQljb3B5LmluVGhyb3dzLmFkZEFsbCh0aGlzLmlu
VGhyb3dzKTsKKwkJY29weS5jYXB0dXJlcy5wdXRBbGwodGhpcy5jYXB0dXJlcyk7CiAJCXJldHVy
biBjb3B5OwogCX0KIApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50RXhwcmVz
c2lvbkZvcm11bGEuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3RyYWludEV4cHJlc3Npb25Gb3Jt
dWxhLmphdmEKaW5kZXggZTNhMDc2MS4uMTY2NmMzMSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1
cC9Db25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0Nv
bnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYS5qYXZhCkBAIC02Miw4ICs2MiwxMyBAQCBjbGFzcyBD
b25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEgZXh0ZW5kcyBDb25zdHJhaW50Rm9ybXVsYSB7CiAJ
CWlmICh0aGlzLnJpZ2h0LmlzUHJvcGVyVHlwZSh0cnVlKSkgewogCQkJVHlwZUJpbmRpbmcgZXhw
clR5cGUgPSB0aGlzLmxlZnQucmVzb2x2ZWRUeXBlOwogCQkJaWYgKGV4cHJUeXBlID09IG51bGwp
IHsKLQkJCQlpZiAodGhpcy5sZWZ0IGluc3RhbmNlb2YgRnVuY3Rpb25hbEV4cHJlc3Npb24pCisJ
CQkJaWYgKHRoaXMubGVmdCBpbnN0YW5jZW9mIEZ1bmN0aW9uYWxFeHByZXNzaW9uKSB7CisJCQkJ
CWlmICh0aGlzLmxlZnQgaW5zdGFuY2VvZiBMYW1iZGFFeHByZXNzaW9uKSB7CisJCQkJCQlMYW1i
ZGFFeHByZXNzaW9uIGNvcHkgPSAoKExhbWJkYUV4cHJlc3Npb24pIHRoaXMubGVmdCkuZ2V0UmVz
b2x2ZWRDb3B5Rm9ySW5mZXJlbmNlVGFyZ2V0aW5nKHRoaXMucmlnaHQpOworCQkJCQkJcmV0dXJu
IChjb3B5LnJlc29sdmVkVHlwZSAhPSBudWxsICYmIGNvcHkucmVzb2x2ZWRUeXBlLmlzVmFsaWRC
aW5kaW5nKCkpID8gVFJVRSA6IEZBTFNFOworCQkJCQl9CiAJCQkJCXJldHVybiB0aGlzLmxlZnQu
aXNDb21wYXRpYmxlV2l0aCh0aGlzLnJpZ2h0LCBpbmZlcmVuY2VDb250ZXh0LnNjb3BlKSA/IFRS
VUUgOiBGQUxTRTsKKwkJCQl9CiAJCQkJcmV0dXJuIEZBTFNFOwogCQkJfSBlbHNlIGlmICghZXhw
clR5cGUuaXNWYWxpZEJpbmRpbmcoKSkgewogCQkJCXJldHVybiBGQUxTRTsKQEAgLTk0LDggKzk5
LDggQEAgY2xhc3MgQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhIGV4dGVuZHMgQ29uc3RyYWlu
dEZvcm11bGEgewogCQkJCQkJYXJndW1lbnRUeXBlc1tpXSA9IGFyZ3VtZW50c1tpXS5yZXNvbHZl
ZFR5cGU7CiAJCQkJCWludCBjaGVja1R5cGUgPSAoaW52b2NhdGlvbi5pbmZlcmVuY2VLaW5kKCkg
IT0gMCkgPyBpbnZvY2F0aW9uLmluZmVyZW5jZUtpbmQoKSA6IEluZmVyZW5jZUNvbnRleHQxOC5D
SEVDS19MT09TRTsKIAkJCQkJYm9vbGVhbiBpc0RpYW1vbmQgPSBtZXRob2QuaXNDb25zdHJ1Y3Rv
cigpICYmIHRoaXMubGVmdC5pc1BvbHlFeHByZXNzaW9uKG1ldGhvZCk7Ci0JCQkJCWluZmVySW52
b2NhdGlvbkFwcGxpY2FiaWxpdHkoaW5mZXJlbmNlQ29udGV4dCwgbWV0aG9kLCBhcmd1bWVudFR5
cGVzLCBpc0RpYW1vbmQsIGNoZWNrVHlwZSk7IC8vIEZJWE1FIDMgcGhhc2VzPwotCQkJCQkKKwkJ
CQkJaWYgKCFpbmZlckludm9jYXRpb25BcHBsaWNhYmlsaXR5KGluZmVyZW5jZUNvbnRleHQsIG1l
dGhvZCwgYXJndW1lbnRUeXBlcywgaXNEaWFtb25kLCBjaGVja1R5cGUpKSAvLyBGSVhNRSAzIHBo
YXNlcz8KKwkJCQkJCXJldHVybiBGQUxTRTsKIAkJCQkJaWYgKCFpbmZlclBvbHlJbnZvY2F0aW9u
VHlwZShpbmZlcmVuY2VDb250ZXh0LCBpbnZvY2F0aW9uLCB0aGlzLnJpZ2h0LCBtZXRob2QpKQog
CQkJCQkJcmV0dXJuIEZBTFNFOwogCQkJCQlyZXR1cm4gbnVsbDsgLy8gYWxyZWFkeSBpbmNvcnBv
cmF0ZWQKQEAgLTE0NCwxNCArMTQ5LDEwIEBAIGNsYXNzIENvbnN0cmFpbnRFeHByZXNzaW9uRm9y
bXVsYSBleHRlbmRzIENvbnN0cmFpbnRGb3JtdWxhIHsKIAkJCQkJVHlwZUJpbmRpbmcgciA9IGZ1
bmN0aW9uVHlwZS5yZXR1cm5UeXBlOwogCQkJCQlpZiAobGFtYmRhLmJvZHkoKSBpbnN0YW5jZW9m
IEV4cHJlc3Npb24pIHsKIAkJCQkJCUV4cHJlc3Npb24gYm9keSA9IChFeHByZXNzaW9uKWxhbWJk
YS5ib2R5KCk7Ci0JCQkJCQkvLyBiZWZvcmUgaW50cm9kdWNpbmcgdGhlIGJvZHkgaW50byBpbmZl
cmVuY2UsIHdlIG11c3QgZW5zdXJlIGl0J3MgcmVzb2x2ZWQsIGhtLi4uCi0JCQkJCQllbnN1cmVS
ZXNvbHZlZChsYW1iZGEuZW5jbG9zaW5nU2NvcGUsIGJvZHksIHIpOwogCQkJCQkJcmVzdWx0LmFk
ZChuZXcgQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhKGJvZHksIHIsIENPTVBBVElCTEUpKTsK
IAkJCQkJfSBlbHNlIHsKIAkJCQkJCUV4cHJlc3Npb25bXSBleHBycyA9IGxhbWJkYS5yZXN1bHRF
eHByZXNzaW9ucygpOwogCQkJCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBleHBycy5sZW5ndGg7IGkr
KykgewotCQkJCQkJCS8vIGJlZm9yZSBpbnRyb2R1Y2luZyByZXN1bHQgZXhwcmVzc2lvbnMgaW50
byBpbmZlcmVuY2UsIHdlIG11c3QgZW5zdXJlIHRoZXkncmUgcmVzb2x2ZWQsIGhtLi4uCi0JCQkJ
CQkJZW5zdXJlUmVzb2x2ZWQobGFtYmRhLmVuY2xvc2luZ1Njb3BlLCBleHByc1tpXSwgcik7CiAJ
CQkJCQkJcmVzdWx0LmFkZChuZXcgQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhKGV4cHJzW2ld
LCByLCBDT01QQVRJQkxFKSk7CiAJCQkJCQl9CiAJCQkJCX0KQEAgLTE3OSwyNCArMTgwLDYgQEAg
Y2xhc3MgQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhIGV4dGVuZHMgQ29uc3RyYWludEZvcm11
bGEgewogCQl9CiAJfQogCi0JcHJpdmF0ZSB2b2lkIGVuc3VyZVJlc29sdmVkKEJsb2NrU2NvcGUg
c2NvcGUsIEV4cHJlc3Npb24gZXhwciwgVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSkgewotCQkvLyBU
T0RPIHRoaXMgbWV0aG9kIG1pZ2h0IGJlIG9ic29sZXRlZCBieSB0aGUgdXNlIG9mIExFLmdldFJl
c29sdmVkQ29weUZvckluZmVyZW5jZVRhcmdldGluZygpCi0JCWlmIChleHByLnJlc29sdmVkVHlw
ZSA9PSBudWxsKSB7Ci0JCQlpZiAodGFyZ2V0VHlwZS5pc1Byb3BlclR5cGUodHJ1ZSkpCi0JCQkJ
ZXhwci5zZXRFeHBlY3RlZFR5cGUodGFyZ2V0VHlwZSk7Ci0JCQllbHNlCi0JCQkJZXhwci5zZXRF
eHBlY3RlZFR5cGUobnVsbCk7Ci0JCQlFeHByZXNzaW9uQ29udGV4dCBwcmV2aW91c0V4cHJlc3Np
b25Db250ZXh0ID0gZXhwci5nZXRFeHByZXNzaW9uQ29udGV4dCgpOwotCQkJaWYgKHByZXZpb3Vz
RXhwcmVzc2lvbkNvbnRleHQgPT0gRXhwcmVzc2lvbkNvbnRleHQuVkFOSUxMQV9DT05URVhUKQot
CQkJCWV4cHIuc2V0RXhwcmVzc2lvbkNvbnRleHQoRXhwcmVzc2lvbkNvbnRleHQuQVNTSUdOTUVO
VF9DT05URVhUKTsKLQkJCXRyeSB7Ci0JCQkJZXhwci5yZXNvbHZlVHlwZShzY29wZSk7Ci0JCQl9
IGZpbmFsbHkgewotCQkJCWV4cHIuc2V0RXhwcmVzc2lvbkNvbnRleHQocHJldmlvdXNFeHByZXNz
aW9uQ29udGV4dCk7Ci0JCQl9Ci0JCX0KLQl9Ci0KIAlwcml2YXRlIE9iamVjdCByZWR1Y2VSZWZl
cmVuY2VFeHByZXNzaW9uQ29tcGF0aWJpbGl0eShSZWZlcmVuY2VFeHByZXNzaW9uIHJlZmVyZW5j
ZSwgSW5mZXJlbmNlQ29udGV4dDE4IGluZmVyZW5jZUNvbnRleHQpIHsKIAkJVHlwZUJpbmRpbmcg
dCA9IHRoaXMucmlnaHQ7CiAJCWlmICh0LmlzUHJvcGVyVHlwZSh0cnVlKSkKQEAgLTI0Myw3ICsy
MjYsNyBAQCBjbGFzcyBDb25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEgZXh0ZW5kcyBDb25zdHJh
aW50Rm9ybXVsYSB7CiAJCXJldHVybiBGQUxTRTsKIAl9CiAKLQlzdGF0aWMgdm9pZCBpbmZlcklu
dm9jYXRpb25BcHBsaWNhYmlsaXR5KEluZmVyZW5jZUNvbnRleHQxOCBpbmZlcmVuY2VDb250ZXh0
LCBNZXRob2RCaW5kaW5nIG1ldGhvZCwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudHMsIGJvb2xlYW4g
aXNEaWFtb25kLCBpbnQgY2hlY2tUeXBlKSAKKwlzdGF0aWMgYm9vbGVhbiBpbmZlckludm9jYXRp
b25BcHBsaWNhYmlsaXR5KEluZmVyZW5jZUNvbnRleHQxOCBpbmZlcmVuY2VDb250ZXh0LCBNZXRo
b2RCaW5kaW5nIG1ldGhvZCwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudHMsIGJvb2xlYW4gaXNEaWFt
b25kLCBpbnQgY2hlY2tUeXBlKSAKIAl7CiAJCS8vIDE4LjUuMQogCQlUeXBlVmFyaWFibGVCaW5k
aW5nW10gdHlwZVZhcmlhYmxlcyA9IG1ldGhvZC50eXBlVmFyaWFibGVzOwpAQCAtMjcwLDYgKzI1
MywxMyBAQCBjbGFzcyBDb25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEgZXh0ZW5kcyBDb25zdHJh
aW50Rm9ybXVsYSB7CiAJCX0KIAkJaW5mZXJlbmNlQ29udGV4dC5jcmVhdGVJbml0aWFsQ29uc3Ry
YWludHNGb3JQYXJhbWV0ZXJzKHBhcmFtZXRlcnMsIGNoZWNrVHlwZT09SW5mZXJlbmNlQ29udGV4
dDE4LkNIRUNLX1ZBUkFSRywgdmFyQXJnc1R5cGUsIG1ldGhvZCk7CiAJCWluZmVyZW5jZUNvbnRl
eHQuYWRkVGhyb3dzQ29udHJhaW50cyh0eXBlVmFyaWFibGVzLCBpbmZlcmVuY2VWYXJpYWJsZXMs
IG1ldGhvZC50aHJvd25FeGNlcHRpb25zKTsKKwkJLy8gSW4gY2FzZSB3ZSBuZWVkIENIRUNLX1ZB
UkFSR1MgYXMgYSBuZXh0IGF0dGVtcHQgYWxsIHBhcmFtZXRlciBjb25zdHJhaW50cyBoYXZlIGFs
cmVhZHkgYmVlbiBjcmVhdGVkIGFib3ZlLAorCQkvLyBidXQgbm93IHdlIGNhbiBza2lwIHRoZSBh
dHRlbXB0IHRvIHNvbHZlIHRoaXMgaW5mZXJlbmNlCisJCWlmIChjaGVja1R5cGUgIT0gSW5mZXJl
bmNlQ29udGV4dDE4LkNIRUNLX1ZBUkFSRworCQkJCSYmIGluZmVyZW5jZUNvbnRleHQuaW52b2Nh
dGlvbkFyZ3VtZW50cyAhPSBudWxsCisJCQkJJiYgcGFyYW1ldGVycy5sZW5ndGggIT0gaW5mZXJl
bmNlQ29udGV4dC5pbnZvY2F0aW9uQXJndW1lbnRzLmxlbmd0aCkKKwkJCXJldHVybiBmYWxzZTsK
KwkJcmV0dXJuIHRydWU7CiAJfQogCiAJc3RhdGljIGJvb2xlYW4gaW5mZXJQb2x5SW52b2NhdGlv
blR5cGUoSW5mZXJlbmNlQ29udGV4dDE4IGluZmVyZW5jZUNvbnRleHQsIEludm9jYXRpb25TaXRl
IGludm9jYXRpb25TaXRlLCBUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBNZXRob2RCaW5kaW5nIG1l
dGhvZCkgCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVyZW5jZUNvbnRleHQxOC5qYXZh
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2xvb2t1cC9JbmZlcmVuY2VDb250ZXh0MTguamF2YQppbmRleCBjZWI4MGVjLi43
N2VkMWJhIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0luZmVyZW5jZUNvbnRleHQxOC5qYXZh
CisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9sb29rdXAvSW5mZXJlbmNlQ29udGV4dDE4LmphdmEKQEAgLTIzLDcgKzIz
LDkgQEAgaW1wb3J0IGphdmEudXRpbC5MaXN0OwogaW1wb3J0IGphdmEudXRpbC5TZXQ7CiAKIGlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5DaGFyT3BlcmF0aW9uOworaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuQ29uZGl0aW9uYWxFeHByZXNz
aW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuRXhwcmVz
c2lvbjsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkZ1bmN0
aW9uYWxFeHByZXNzaW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxl
ci5hc3QuSW52b2NhdGlvbjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIuYXN0LldpbGRjYXJkOwogCkBAIC00OCw2ICs1MCw5IEBAIHB1YmxpYyBjbGFzcyBJbmZlcmVu
Y2VDb250ZXh0MTggewogCUNvbnN0cmFpbnRGb3JtdWxhW10gaW5pdGlhbENvbnN0cmFpbnRzOwog
CWludCB2YXJpYWJsZUNvdW50ID0gMDsKIAorCS8qKiBzb2x1dGlvbiBvZiBhcHBsaWNhYmlsaXR5
IGluZmVyZW5jZSwgc3RvcmVkIGZvciB1c2UgYXMgZmFsbGJhY2ssIGlmIGludm9jYXRpb24gdHlw
ZSBpbmZlcmVuY2UgZmFpbHMuICovCisJQm91bmRTZXQgc3RvcmVkU29sdXRpb247CisKIAlMaXN0
Lyo8SW52b2NhdGlvblNpdGU+Ki8gaW5uZXJQb2xpZXMgPSBuZXcgQXJyYXlMaXN0KCk7CiAJcHVi
bGljIEluZmVyZW5jZUNvbnRleHQxOCBvdXRlckNvbnRleHQ7CiAJcHJpdmF0ZSBBcnJheUxpc3Qg
cHJvYmxlbU1ldGhvZHM7CkBAIC02MCwxMyArNjUsOSBAQCBwdWJsaWMgY2xhc3MgSW5mZXJlbmNl
Q29udGV4dDE4IHsKIAlJbnZvY2F0aW9uU2l0ZSBjdXJyZW50SW52b2NhdGlvbjsKIAlFeHByZXNz
aW9uW10gaW52b2NhdGlvbkFyZ3VtZW50czsKIAkKLQkvLyBCaXRtYXNrLCBsb3dlciB0d28gYml0
czoKIAlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBDSEVDS19TVFJJQ1QgPSAxOwogCXB1YmxpYyBz
dGF0aWMgZmluYWwgaW50IENIRUNLX0xPT1NFID0gMjsKIAlwdWJsaWMgc3RhdGljIGZpbmFsIGlu
dCBDSEVDS19WQVJBUkcgPSAzOwotCXB1YmxpYyBzdGF0aWMgZmluYWwgaW50IElORkVSRU5DRV9L
SU5EX01BU0sgPSAzOwotCS8vIGJpdCAzOgotCXB1YmxpYyBzdGF0aWMgZmluYWwgaW50IENIRUNL
X0ZJTklTSEVEID0gNDsKIAkKIAlzdGF0aWMgY2xhc3MgSW52b2NhdGlvblJlY29yZCB7CiAJCUlu
dm9jYXRpb25TaXRlIHNpdGU7CkBAIC0yMTIsOSArMjEzLDEyIEBAIHB1YmxpYyBjbGFzcyBJbmZl
cmVuY2VDb250ZXh0MTggewogCQl9CQkKIAl9CiAKLQkvKiogSkxTIDE4LjUuMSBJbnZvY2F0aW9u
IEFwcGxpY2FiaWxpdHkgSW5mZXJlbmNlICovCi0JcHVibGljIHZvaWQgaW5mZXJJbnZvY2F0aW9u
QXBwbGljYWJpbGl0eShNZXRob2RCaW5kaW5nIG1ldGhvZCwgVHlwZUJpbmRpbmdbXSBhcmd1bWVu
dHMsIGJvb2xlYW4gaXNEaWFtb25kLCBpbnQgY2hlY2tUeXBlKSB7Ci0JCUNvbnN0cmFpbnRFeHBy
ZXNzaW9uRm9ybXVsYS5pbmZlckludm9jYXRpb25BcHBsaWNhYmlsaXR5KHRoaXMsIG1ldGhvZCwg
YXJndW1lbnRzLCBpc0RpYW1vbmQsIGNoZWNrVHlwZSk7CisJLyoqCisJICogSkxTIDE4LjUuMSBJ
bnZvY2F0aW9uIEFwcGxpY2FiaWxpdHkgSW5mZXJlbmNlLgorCSAqIEEgcmVzdWx0IG9mIGZhbHNl
IHNpZ25hbHMgYSBmYWlsdXJlIGR1ZSB0byBhcml0eS1taXNtYXRjaC4KKwkgKi8KKwlwdWJsaWMg
Ym9vbGVhbiBpbmZlckludm9jYXRpb25BcHBsaWNhYmlsaXR5KE1ldGhvZEJpbmRpbmcgbWV0aG9k
LCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50cywgYm9vbGVhbiBpc0RpYW1vbmQsIGludCBjaGVja1R5
cGUpIHsKKwkJcmV0dXJuIENvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYS5pbmZlckludm9jYXRp
b25BcHBsaWNhYmlsaXR5KHRoaXMsIG1ldGhvZCwgYXJndW1lbnRzLCBpc0RpYW1vbmQsIGNoZWNr
VHlwZSk7CiAJfQogCiAJLyoqIEpMUyAxOC41LjIgSW52b2NhdGlvbiBUeXBlIEluZmVyZW5jZSAK
QEAgLTI0NCw2ICsyNDgsOCBAQCBwdWJsaWMgY2xhc3MgSW5mZXJlbmNlQ29udGV4dDE4IHsKIAkJ
CWlmIChhcmd1bWVudHMgIT0gbnVsbCkgewogCQkJCWludCBrID0gYXJndW1lbnRzLmxlbmd0aDsK
IAkJCQlpbnQgcCA9IG1ldGhvZC5wYXJhbWV0ZXJzLmxlbmd0aDsKKwkJCQlpZiAoayA8IChtZXRo
b2QuaXNWYXJhcmdzKCkgPyBwLTEgOiBwKSkKKwkJCQkJcmV0dXJuIG51bGw7IC8vIGluc3VmZmlj
aWVudCBhcmd1bWVudHMgZm9yIHBhcmFtZXRlcnMhCiAJCQkJc3dpdGNoIChjaGVja0tpbmQpIHsK
IAkJCQkJY2FzZSBDSEVDS19TVFJJQ1Q6CiAJCQkJCWNhc2UgQ0hFQ0tfTE9PU0U6CkBAIC0zMjMs
OCArMzI5LDM4IEBAIHB1YmxpYyBjbGFzcyBJbmZlcmVuY2VDb250ZXh0MTggewogCQl9CiAJCWlm
IChyZXN1bHQgIT0gbnVsbCkgewogCQkJVHlwZUJpbmRpbmdbXSBzb2x1dGlvbnMgPSBnZXRTb2x1
dGlvbnMobWV0aG9kLnR5cGVWYXJpYWJsZXMoKSwgaW52b2NhdGlvbiwgcmVzdWx0KTsKLQkJCWlm
IChzb2x1dGlvbnMgIT0gbnVsbCkKKwkJCWlmIChzb2x1dGlvbnMgIT0gbnVsbCkgeworCQkJCS8v
IHRoaXMgaXMgZmluYWwsIGtlZXAgdGhlIHJlc3VsdDoKKwkJCQl0aGlzLmN1cnJlbnRCb3VuZHMg
PSByZXN1bHQ7CiAJCQkJcmV0dXJuIHRoaXMuZW52aXJvbm1lbnQuY3JlYXRlUGFyYW1ldGVyaXpl
ZEdlbmVyaWNNZXRob2QobWV0aG9kLCBzb2x1dGlvbnMpOworCQkJfQorCQl9CisJCXJldHVybiBu
dWxsOworCX0KKworCS8qKgorCSAqIFNpbXBsaWZpZWQgQVBJIHRvIHBlcmZvcm0gSW52b2NhdGlv
biBUeXBlIEluZmVyZW5jZSAoSkxTIDE4LjUuMikKKwkgKiBhbmQgKGlmIHN1Y2Nlc3NmdWwpIHJl
dHVybiB0aGUgc29sdXRpb24uCisJICogQHBhcmFtIHNpdGUgaW52b2NhdGlvbiBiZWluZyBpbmZl
cnJlZAorCSAqIEBwYXJhbSB0YXJnZXRUeXBlIHRhcmdldCB0eXBlIGZvciB0aGlzIGludm9jYXRp
b24KKwkgKiBAcmV0dXJuIGEgbWV0aG9kIGJpbmRpbmcgd2l0aCB1cGRhdGVkIHR5cGUgcGFyYW1l
dGVycywgb3IgbnVsbCBpZiBubyBzb2x1dGlvbiB3YXMgZm91bmQKKwkgKi8KKwlwdWJsaWMgUGFy
YW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIGdldEludm9jYXRpb25UeXBlSW5mZXJlbmNl
U29sdXRpb24oTWV0aG9kQmluZGluZyBtZXRob2QsIFBvbHlTaXRlIHNpdGUsIFR5cGVCaW5kaW5n
IHRhcmdldFR5cGUpIHsKKwkJLy8gc3RhcnQgb3ZlciBmcm9tIGEgcHJldmlvdXMgY2FuZGlkYXRl
IGJ1dCBkaXNjYXJkIGl0cyB0eXBlIHZhcmlhYmxlIGluc3RhbnRpYXRpb25zCisJCS8vIFRPRE86
IHNob3VsZCB3ZSByZXRhaW4gYW55IGluc3RhbnRpYXRpb25zIG9mIHR5cGUgdmFyaWFibGVzIG5v
dCBvd25lZCBieSB0aGUgbWV0aG9kPyAKKwkJQm91bmRTZXQgcmVzdWx0ID0gbnVsbDsKKwkJdHJ5
IHsKKwkJCXJlc3VsdCA9IGluZmVySW52b2NhdGlvblR5cGUodGhpcy5jdXJyZW50Qm91bmRzLCB0
YXJnZXRUeXBlLCBzaXRlLCBtZXRob2QsIHNpdGUuaW5mZXJlbmNlS2luZCgpKTsKKwkJfSBjYXRj
aCAoSW5mZXJlbmNlRmFpbHVyZUV4Y2VwdGlvbiBlKSB7CisJCQlyZXR1cm4gbnVsbDsKKwkJfQor
CQlpZiAocmVzdWx0ICE9IG51bGwpIHsKKwkJCVR5cGVCaW5kaW5nW10gc29sdXRpb25zID0gZ2V0
U29sdXRpb25zKG1ldGhvZC50eXBlVmFyaWFibGVzKCksIHNpdGUsIHJlc3VsdCk7CisJCQlpZiAo
c29sdXRpb25zICE9IG51bGwpIHsKKwkJCQkvLyB0aGlzIGlzIGZpbmFsLCBrZWVwIHRoZSByZXN1
bHQ6CisJCQkJdGhpcy5jdXJyZW50Qm91bmRzID0gcmVzdWx0OworCQkJCXJldHVybiB0aGlzLmVu
dmlyb25tZW50LmNyZWF0ZVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kKG1ldGhvZCwgc29sdXRp
b25zKTsKKwkJCX0KIAkJfQogCQlyZXR1cm4gbnVsbDsKIAl9CkBAIC02MTEsNyArNjQ3LDcgQEAg
cHVibGljIGNsYXNzIEluZmVyZW5jZUNvbnRleHQxOCB7CiAKIAlwcml2YXRlIFR5cGVCaW5kaW5n
W10gdmFyQXJnVHlwZXMoVHlwZUJpbmRpbmdbXSBwYXJhbWV0ZXJzLCBpbnQgaykgewogCQlUeXBl
QmluZGluZ1tdIHR5cGVzID0gbmV3IFR5cGVCaW5kaW5nW2tdOwotCQlpbnQgZGVjbGFyZWRMZW5n
dGggPSBwYXJhbWV0ZXJzLmxlbmd0aDsKKwkJaW50IGRlY2xhcmVkTGVuZ3RoID0gTWF0aC5taW4o
cGFyYW1ldGVycy5sZW5ndGgsIGspOyAvLyBrIG1heSBiZSBsZW5ndGgtMSBpZiBwYXNzaW5nIDAg
dmFyYXJncwogCQlTeXN0ZW0uYXJyYXljb3B5KHBhcmFtZXRlcnMsIDAsIHR5cGVzLCAwLCBkZWNs
YXJlZExlbmd0aCk7CiAJCVR5cGVCaW5kaW5nIGxhc3QgPSBwYXJhbWV0ZXJzW2RlY2xhcmVkTGVu
Z3RoLTFdOwogCQlmb3IgKGludCBpID0gZGVjbGFyZWRMZW5ndGg7IGkgPCBrOyBpKyspCkBAIC02
NDcsMTMgKzY4MywzMyBAQCBwdWJsaWMgY2xhc3MgSW5mZXJlbmNlQ29udGV4dDE4IHsKIAkJdGhp
cy5jdXJyZW50SW52b2NhdGlvbiA9IHJlY29yZC5zaXRlOwogCQl0aGlzLmludm9jYXRpb25Bcmd1
bWVudHMgPSByZWNvcmQuaW52b2NhdGlvbkFyZ3VtZW50czsKIAl9Ci0JCisJcHVibGljIGJvb2xl
YW4gcmViaW5kSW5uZXJQb2xpZXMoVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzLCBNZXRob2RC
aW5kaW5nIG1ldGhvZCwgUG9seVNpdGUgc2l0ZSkgeworCQlCb3VuZFNldCBib3VuZHMgPSB0aGlz
LmN1cnJlbnRCb3VuZHM7CisJCVR5cGVCaW5kaW5nIHRhcmdldFR5cGUgPSBzaXRlLmludm9jYXRp
b25UYXJnZXRUeXBlKCk7CisJCWlmICh0YXJnZXRUeXBlID09IG51bGwgfHwgIXRhcmdldFR5cGUu
aXNQcm9wZXJUeXBlKHRydWUpKSB7CisJCQkvLyBpbiB0aGlzIGNhc2Ugd2UgZG9uJ3QgeWV0IGhh
dmUgdGhlIHNvbHV0aW9uLCBjb21wdXRlIGl0IG5vdzoKKwkJCXRyeSB7CisJCQkJYm91bmRzID0g
aW5mZXJJbnZvY2F0aW9uVHlwZSh0aGlzLmN1cnJlbnRCb3VuZHMsIG51bGwsIHNpdGUsIG1ldGhv
ZCwgc2l0ZS5pbmZlcmVuY2VLaW5kKCkpOworCQkJfSBjYXRjaCAoSW5mZXJlbmNlRmFpbHVyZUV4
Y2VwdGlvbiBlKSB7CisJCQkJcmV0dXJuIGZhbHNlOworCQkJfQorCQkJaWYgKGJvdW5kcyA9PSBu
dWxsKQorCQkJCXJldHVybiBmYWxzZTsKKwkJfQorCQkvLyB3ZSBjYW5ub3QgYmxpbmRseSBiZWxp
ZXZlIHNpdGUuaW5mZXJlbmNlS2luZCgpIGJlY2F1c2Ugb3ZlcmxvYWQgcmVzb2x1dGlvbiBtYXkg
aGF2ZSBjaGVja2VkCisJCS8vIG1ldGhvZHMgdy8gJiB3L28gdmFyYXJncywgc28gbG9vayBhdCB0
aGUgbWV0aG9kLCB0b28uIFRPRE86IHNob3VsZCB3ZSByYXRoZXIgc3RvcmUgdGhpcyBpbmZvIGlu
IHRoZSBjdHg/CisJCWJvb2xlYW4gaXNWYXJBcmdzID0gKHNpdGUuaW5mZXJlbmNlS2luZCgpID09
IEluZmVyZW5jZUNvbnRleHQxOC5DSEVDS19WQVJBUkcpICYmIG1ldGhvZC5pc1ZhcmFyZ3MoKTsK
KwkJcmViaW5kSW5uZXJQb2xpZXMoYm91bmRzLCBhcmd1bWVudFR5cGVzLCBtZXRob2QucGFyYW1l
dGVycywgaXNWYXJBcmdzKTsKKwkJcmV0dXJuIHRydWU7CisJfQogCS8qKgogCSAqIEFmdGVyIGlu
ZmVyZW5jZSBoYXMgZmluaXNoZWQsIGl0ZXJhdGUgYWxsIGlubmVyIHBvbHkgZXhwcmVzc2lvbnMs
IHRoYXQgaGF2ZSBiZWVuCiAJICogaW5jbHVkZWQgaW4gdGhlIGluZmVyZW5jZS4gRm9yIGVhY2gg
b2YgdGhlc2UgdXBkYXRlIHNvbWUgdHlwZSBpbmZvcm1hdGlvbgogCSAqIGZyb20gdGhlIGluZmVy
ZW5jZSByZXN1bHQgYW5kIHBlcmhhcHMgdHJpZ2dlciBmb2xsb3ctdXAgcmVzb2x2aW5nIGFzIG5l
ZWRlZC4KIAkgKi8KLQlwdWJsaWMgdm9pZCByZWJpbmRJbm5lclBvbGllcyhCb3VuZFNldCBib3Vu
ZHMsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcykgeworCXB1YmxpYyB2b2lkIHJlYmluZElu
bmVyUG9saWVzKEJvdW5kU2V0IGJvdW5kcywgVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzLCBU
eXBlQmluZGluZ1tdIHBhcmFtZXRlclR5cGVzLCBib29sZWFuIGlzVmFyQXJncykgeworCQkvLyBU
aGlzIGxvb3BzIG92ZXIgYWxsIHBvbHkgZXhwcmVzc2lvbnMgZm9yIHdoaWNoIGEgc3ViLWluZmVy
ZW5jZSB3YXMgdHJpZ2dlcmVkOgorCQkvLyAoaGFuZGxlcyBnZW5lcmljIGludm9jYXRpb25zKQog
CQlpbnQgbGVuID0gdGhpcy5pbm5lclBvbGllcy5zaXplKCk7CiAJCWZvciAoaW50IGkgPSAwOyBp
IDwgbGVuOyBpKyspIHsKIAkJCUV4cHJlc3Npb24gaW5uZXIgPSAoRXhwcmVzc2lvbikgdGhpcy5p
bm5lclBvbGllcy5nZXQoaSk7CkBAIC02NzUsMjUgKzczMSw4OSBAQCBwdWJsaWMgY2xhc3MgSW5m
ZXJlbmNlQ29udGV4dDE4IHsKIAkJCQkJY29udGludWU7IC8vIHBsYXkgc2FmZSwgYnV0IHNob3Vs
ZG4ndCBoYXBwZW4gaW4gYSByZXNvbHZlZCBjb250ZXh0CiAJCQkJUGFyYW1ldGVyaXplZEdlbmVy
aWNNZXRob2RCaW5kaW5nIGlubmVyQmluZGluZyA9IHRoaXMuZW52aXJvbm1lbnQuY3JlYXRlUGFy
YW1ldGVyaXplZEdlbmVyaWNNZXRob2Qob3JpZ2luYWwsIHNvbHV0aW9ucyk7CiAJCQkJaW5uZXJN
ZXNzYWdlLnVwZGF0ZUJpbmRpbmdzKGlubmVyQmluZGluZyk7Ci0JCQkJaW5uZXJNZXNzYWdlLm1h
cmtJbmZlcmVuY2VGaW5pc2hlZCgpOyAvLyBpbnZvY2F0aW9uIHR5cGUgaW5mZXJlbmNlIGhhcyBh
bHJlYWR5IGhhcHBlbmVkIG9uIHRoZSBpbm5lciwgdG9vLgogCQkJCQogCQkJCS8vIGZpbmFsaXpl
IHJlc29sdmluZyBvZiBhcmd1bWVudHMgb2YgdGhlIGlubmVyIGludm9jYXRpb246CiAJCQkJVHlw
ZUJpbmRpbmdbXSBpbm5lclBhcmFtZXRlcnMgPSBpbm5lckJpbmRpbmcucGFyYW1ldGVyczsKLQkJ
CQlpbnQgaW5mZXJlbmNlS2luZCA9IGlubmVyTWVzc2FnZS5pbmZlcmVuY2VLaW5kKCk7Ci0JCQkJ
VHlwZUJpbmRpbmcgdmFyQXJnc1R5cGUgPSBpbmZlcmVuY2VLaW5kID09IENIRUNLX1ZBUkFSRyA/
ICgoQXJyYXlCaW5kaW5nKWlubmVyUGFyYW1ldGVyc1tpbm5lclBhcmFtZXRlcnMubGVuZ3RoLTFd
KS5lbGVtZW50c1R5cGUoKSA6IG51bGw7IAorCQkJCWJvb2xlYW4gaW5uZXJJc1ZhckFyZ3MgPSAo
aW5uZXJNZXNzYWdlLmluZmVyZW5jZUtpbmQoKSA9PSBJbmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tf
VkFSQVJHKSAmJiBpbm5lckJpbmRpbmcuaXNWYXJhcmdzKCk7CiAJCQkJRXhwcmVzc2lvbltdIGFy
Z3VtZW50cyA9IGlubmVyTWVzc2FnZS5hcmd1bWVudHMoKTsKIAkJCQlpZiAoYXJndW1lbnRzICE9
IG51bGwpIHsKIAkJCQkJZm9yIChpbnQgaiA9IDA7IGogPCBhcmd1bWVudHMubGVuZ3RoOyBqKysp
IHsKLQkJCQkJCVR5cGVCaW5kaW5nIHBhcmFtID0gKHZhckFyZ3NUeXBlID09IG51bGwgfHwgKGog
PCBpbm5lclBhcmFtZXRlcnMubGVuZ3RoLTEpKQotCQkJCQkJCQkJCQkJPyBpbm5lclBhcmFtZXRl
cnNbal0KLQkJCQkJCQkJCQkJCTogdmFyQXJnc1R5cGU7CisJCQkJCQlUeXBlQmluZGluZyBwYXJh
bSA9IGdldFBhcmFtZXRlcihpbm5lclBhcmFtZXRlcnMsIGosIGlubmVySXNWYXJBcmdzKTsKIAkJ
CQkJCWFyZ3VtZW50c1tqXS5jaGVja0FnYWluc3RGaW5hbFRhcmdldFR5cGUocGFyYW0pOwogCQkJ
CQl9CiAJCQkJfQogCQkJfQotCQkJLy8gaW5uZXIgRnVuY3Rpb25hbEV4cHJlc3Npb24gZG9uJ3Qg
c2VlbSB0byBiZSBpbmNsdWRlZCBpbiBpbmZlcmVuY2UuCi0JCQkvLyBUT0RPIHJlY2hlY2sgYW55
IGlucXVpcmVzIG9uIHRob3NlIGFjdHVhbGx5IGludm9sdmUgaW5mZXJlbmNlIG9mIHdoaWNoIHRo
ZSByZXN1bHRzIGFyZSBpbmNsdWRlZCBoZXJlLiAKIAkJfQorCQkvLyBUaGlzIHVwZGF0ZXMgYWxs
IHJlbWFpbmluZyBwb2x5IGV4cHJlc3Npb25zIHRoYXQgYXJlIGRpcmVjdCBhcmd1bWVudHMgb2Yg
dGhlIGN1cnJlbnQgaW52b2NhdGlvbjoKKwkJLy8gKGhhbmRsZXMgRnVuY3Rpb25hbEV4cHJlc3Np
b24gJiBDb25kaXRpb25hbEV4cHJlc3Npb24pCisJCWFjY2VwdFBlbmRpbmdQb2x5QXJndW1lbnRz
KGJvdW5kcywgcGFyYW1ldGVyVHlwZXMsIGlzVmFyQXJncyk7CisJfQorCisJcHJpdmF0ZSB2b2lk
IGFjY2VwdFBlbmRpbmdQb2x5QXJndW1lbnRzKGZpbmFsIEJvdW5kU2V0IGFjY2VwdGVkUmVzdWx0
LCBUeXBlQmluZGluZ1tdIHBhcmFtZXRlclR5cGVzLCBib29sZWFuIGlzVmFyQXJncykgeworCQlp
ZiAoYWNjZXB0ZWRSZXN1bHQgPT0gbnVsbCB8fCB0aGlzLmludm9jYXRpb25Bcmd1bWVudHMgPT0g
bnVsbCkgcmV0dXJuOworCQlTdWJzdGl0dXRpb24gc3Vic3RpdHV0aW9uID0gbmV3IFN1YnN0aXR1
dGlvbigpIHsKKwkJCXB1YmxpYyBMb29rdXBFbnZpcm9ubWVudCBlbnZpcm9ubWVudCgpIHsgCisJ
CQkJcmV0dXJuIEluZmVyZW5jZUNvbnRleHQxOC50aGlzLmVudmlyb25tZW50OworCQkJfQorCQkJ
cHVibGljIGJvb2xlYW4gaXNSYXdTdWJzdGl0dXRpb24oKSB7CisJCQkJcmV0dXJuIGZhbHNlOwor
CQkJfQorCQkJcHVibGljIFR5cGVCaW5kaW5nIHN1YnN0aXR1dGUoVHlwZVZhcmlhYmxlQmluZGlu
ZyB0eXBlVmFyaWFibGUpIHsKKwkJCQlpZiAodHlwZVZhcmlhYmxlIGluc3RhbmNlb2YgSW5mZXJl
bmNlVmFyaWFibGUpIHsKKwkJCQkJcmV0dXJuIGFjY2VwdGVkUmVzdWx0LmdldEluc3RhbnRpYXRp
b24oKEluZmVyZW5jZVZhcmlhYmxlKSB0eXBlVmFyaWFibGUpOworCQkJCX0KKwkJCQlyZXR1cm4g
dHlwZVZhcmlhYmxlOworCQkJfQorCQl9OworCQlmb3IgKGludCBpID0gMDsgaSA8IHRoaXMuaW52
b2NhdGlvbkFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeworCQkJVHlwZUJpbmRpbmcgdGFyZ2V0VHlw
ZSA9IGdldFBhcmFtZXRlcihwYXJhbWV0ZXJUeXBlcywgaSwgaXNWYXJBcmdzKTsKKwkJCWlmICgh
dGFyZ2V0VHlwZS5pc1Byb3BlclR5cGUodHJ1ZSkpCisJCQkJdGFyZ2V0VHlwZSA9IFNjb3BlLnN1
YnN0aXR1dGUoc3Vic3RpdHV0aW9uLCB0YXJnZXRUeXBlKTsKKwkJCWFjY2VwdFBlbmRpbmdFeHBy
ZXNzaW9uKHRoaXMuaW52b2NhdGlvbkFyZ3VtZW50c1tpXSwgdGFyZ2V0VHlwZSk7CisJCX0KKwl9
CisJCisJcHJpdmF0ZSB2b2lkIGFjY2VwdFBlbmRpbmdFeHByZXNzaW9uKEV4cHJlc3Npb24gZXhw
cmVzc2lvbiwgVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSkgeworCQlpZiAoZXhwcmVzc2lvbiBpbnN0
YW5jZW9mIEZ1bmN0aW9uYWxFeHByZXNzaW9uKQorCQkJYWNjcGVjdFBlbmRpbmdGdW5jdGlvbmFs
KChGdW5jdGlvbmFsRXhwcmVzc2lvbikgZXhwcmVzc2lvbiwgdGFyZ2V0VHlwZSk7CisJCWVsc2Ug
aWYgKGV4cHJlc3Npb24gaW5zdGFuY2VvZiBDb25kaXRpb25hbEV4cHJlc3Npb24pCisJCQlhY2Nl
cHRQZW5kaW5nQ29uZGl0aW9uYWwoKENvbmRpdGlvbmFsRXhwcmVzc2lvbikgZXhwcmVzc2lvbiwg
dGFyZ2V0VHlwZSk7CisJCQorCX0KKwlwcml2YXRlIHZvaWQgYWNjZXB0UGVuZGluZ0NvbmRpdGlv
bmFsKENvbmRpdGlvbmFsRXhwcmVzc2lvbiBjb25kaXRpb25hbEV4cHJlc3Npb24sIFR5cGVCaW5k
aW5nIHRhcmdldFR5cGUpIHsKKwkJY29uZGl0aW9uYWxFeHByZXNzaW9uLnJlc29sdmVkVHlwZSA9
IHRhcmdldFR5cGU7CisJCWFjY2VwdFBlbmRpbmdFeHByZXNzaW9uKGNvbmRpdGlvbmFsRXhwcmVz
c2lvbi52YWx1ZUlmVHJ1ZSwgdGFyZ2V0VHlwZSk7CisJfQorCisJcHJpdmF0ZSB2b2lkIGFjY3Bl
Y3RQZW5kaW5nRnVuY3Rpb25hbChGdW5jdGlvbmFsRXhwcmVzc2lvbiBmdW5jdGlvbmFsLCBUeXBl
QmluZGluZyB0YXJnZXRUeXBlKSB7CisJCWZ1bmN0aW9uYWwuc2V0RXhwZWN0ZWRUeXBlKHRhcmdl
dFR5cGUpOworCQlmdW5jdGlvbmFsLnJlc29sdmUoZnVuY3Rpb25hbC5lbmNsb3NpbmdTY29wZSk7
CQkKKwl9CisKKwkvKioKKwkgKiBSZXRyaWV2ZSB0aGUgcmFuayd0aCBwYXJhbWV0ZXIsIHBvc3Np
Ymx5IHJlc3BlY3RpbmcgdmFyYXJncyBpbnZvY2F0aW9uLCBzZWUgMTUuMTIuMi40LgorCSAqIFJl
dHVybnMgbnVsbCBpZiBvdXQgb2YgYm91bmRzIGFuZCBDSEVDS19WQVJBUkcgd2FzIG5vdCByZXF1
ZXN0ZWQuIAorCSAqLworCXB1YmxpYyBzdGF0aWMgVHlwZUJpbmRpbmcgZ2V0UGFyYW1ldGVyKFR5
cGVCaW5kaW5nW10gcGFyYW1ldGVycywgaW50IHJhbmssIGJvb2xlYW4gaXNWYXJBcmdzKSB7CisJ
CWlmIChpc1ZhckFyZ3MpIHsKKwkJCWlmIChyYW5rID49IHBhcmFtZXRlcnMubGVuZ3RoLTEpCisJ
CQkJcmV0dXJuICgoQXJyYXlCaW5kaW5nKXBhcmFtZXRlcnNbcGFyYW1ldGVycy5sZW5ndGgtMV0p
LmVsZW1lbnRzVHlwZSgpOwkJCQorCQl9IGVsc2UgaWYgKHJhbmsgPj0gcGFyYW1ldGVycy5sZW5n
dGgpIHsKKwkJCXJldHVybiBudWxsOworCQl9CisJCXJldHVybiBwYXJhbWV0ZXJzW3JhbmtdOwor
CX0KKworCXB1YmxpYyBNZXRob2RCaW5kaW5nIGdldFJldHVyblByb2JsZW1NZXRob2RJZk5lZWRl
ZChUeXBlQmluZGluZyBleHBlY3RlZFR5cGUsIE1ldGhvZEJpbmRpbmcgbWV0aG9kKSB7CisJCWlm
IChJbmZlcmVuY2VDb250ZXh0MTguU0lNVUxBVEVfQlVHX0pES184MDI2NTI3ICYmIGV4cGVjdGVk
VHlwZSAhPSBudWxsICYmIG1ldGhvZC5yZXR1cm5UeXBlIGluc3RhbmNlb2YgUmVmZXJlbmNlQmlu
ZGluZykgeworCQkJaWYgKG1ldGhvZC5yZXR1cm5UeXBlLmVyYXN1cmUoKS5pc0NvbXBhdGlibGVX
aXRoKGV4cGVjdGVkVHlwZSkpCisJCQkJcmV0dXJuIG1ldGhvZDsgLy8gZG9uJ3QgY291bnQgYXMg
cHJvYmxlbS4KKwkJCVByb2JsZW1NZXRob2RCaW5kaW5nIHByb2JsZW1NZXRob2QgPSBuZXcgUHJv
YmxlbU1ldGhvZEJpbmRpbmcobWV0aG9kLCBtZXRob2Quc2VsZWN0b3IsIG1ldGhvZC5wYXJhbWV0
ZXJzLCBQcm9ibGVtUmVhc29ucy5QYXJhbWV0ZXJpemVkTWV0aG9kRXhwZWN0ZWRUeXBlUHJvYmxl
bSk7CisJCQlwcm9ibGVtTWV0aG9kLnJldHVyblR5cGUgPSBleHBlY3RlZFR5cGU7CisJCQlwcm9i
bGVtTWV0aG9kLmluZmVyZW5jZUNvbnRleHQgPSB0aGlzOworCQkJcmV0dXJuIHByb2JsZW1NZXRo
b2Q7CisJCX0KKwkJcmV0dXJuIG51bGw7CiAJfQogCiAJLy8gZGVidWdnaW5nOgpAQCAtODA4LDQg
KzkyOCw1IEBAIHB1YmxpYyBjbGFzcyBJbmZlcmVuY2VDb250ZXh0MTggewogCXB1YmxpYyBzdGF0
aWMgdm9pZCBtaXNzaW5nSW1wbGVtZW50YXRpb24oU3RyaW5nIG1zZykgewogCQl0aHJvdyBuZXcg
VW5zdXBwb3J0ZWRPcGVyYXRpb25FeGNlcHRpb24obXNnKTsKIAl9CisKIH0KZGlmZiAtLWdpdCBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9sb29rdXAvUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nLmphdmEgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvbG9va3VwL1BhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5qYXZhCmluZGV4
IGE2YTIyNmMuLjJkNjhhODQgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUGFyYW1ldGVyaXpl
ZEdlbmVyaWNNZXRob2RCaW5kaW5nLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9QYXJhbWV0ZXJp
emVkR2VuZXJpY01ldGhvZEJpbmRpbmcuamF2YQpAQCAtMjMsNyArMjMsNiBAQCBwYWNrYWdlIG9y
Zy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXA7CiBpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5FeHByZXNzaW9uOwogaW1wb3J0IG9yZy5lY2xp
cHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuRXhwcmVzc2lvbkNvbnRleHQ7CiBpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5JbnZvY2F0aW9uOwotaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuUG9seUV4cHJlc3Npb247CiBp
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5XaWxkY2FyZDsKIGlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuY2xhc3NmbXQuQ2xhc3NGaWxl
Q29uc3RhbnRzOwogCkBAIC00MiwxMCArNDEsMzcgQEAgcHVibGljIGNsYXNzIFBhcmFtZXRlcml6
ZWRHZW5lcmljTWV0aG9kQmluZGluZyBleHRlbmRzIFBhcmFtZXRlcml6ZWRNZXRob2RCaW5kaW4K
ICAgICBwdWJsaWMgYm9vbGVhbiBpc1JhdzsgLy8gc2V0IHRvIHRydWUgZm9yIG1ldGhvZCBiZWhh
dmluZyBhcyByYXcgZm9yIHN1YnN0aXR1dGlvbiBwdXJwb3NlCiAgICAgcHJpdmF0ZSBNZXRob2RC
aW5kaW5nIHRpZWJyZWFrTWV0aG9kOwogCisgICAgSW5mZXJlbmNlQ29udGV4dDE4IGluZmVyZW5j
ZUNvbnRleHQ7IC8vIGhvbGQgb24gdG8gdGhpcyBjb250ZXh0IGZyb20gaW52b2NhdGlvbiBhcHBs
aWNhYmlsaXR5IGluZmVyZW5jZSB1bnRpbCBpbnZvY2F0aW9uIHR5cGUgaW5mZXJlbmNlCisKIAkv
KioKIAkgKiBQZXJmb3JtIGluZmVyZW5jZSBvZiBnZW5lcmljIG1ldGhvZCB0eXBlIHBhcmFtZXRl
cnMgYW5kL29yIGV4cGVjdGVkIHR5cGUKKwkgKiA8cD4KKwkgKiBJbiAxLjgrIHRoZSBmb2xsb3dp
bmcgZGlzY2lwbGluZSBoYXMgdG8gYmUgb2JzZXJ2ZWQgYnkgY2FsbGVyczoKKwkgKiBFYWNoIGlu
dm9jYXRpb24gbXVzdCBiZSBzdWJqZWN0ZWQgdG8gdHdvIGxldmVscyBvZiBpbmZlcmVuY2U6CisJ
ICogPC9wPgorCSAqIDx1bD4KKwkgKiA8bGk+IHtAbGluayBTY29wZSNBUFBMSUNBQklMSVRZIElu
dm9jYXRpb24gQXBwbGljYWJpbGl0eSBJbmZlcmVuY2V9LCB3aGljaCBtYXkgYmUgYXBwbGllZAor
CSAqICAgICBtdWx0aXBsZSB0aW1lcyBmb3IgdGhlIHNhbWUgaW52b2NhdGlvbjwvbGk+CisJICog
PGxpPiB7QGxpbmsgU2NvcGUjSU5WT0NBVElPTl9UWVBFIEludm9jYXRpb24gVHlwZSBJbmZlcmVu
Y2V9LCB3aGljaCBpcyBmaW5hbGx5IHBlcmZvcm1lZAorCSAqICAgICBmb3IgdGhlIHNlbGVjdGVk
IG1ldGhvZCBhbmQgd2hpY2ggYWRkcyBpbmZvcm1hdGlvbiBmcm9tIHRoZSAidGFyZ2V0IHR5cGUi
LjwvbGk+CisJICogPC91bD4KKwkgKiA8cD4KKwkgKiBDbGllbnRzIGNhbiBjb250cm9sIHdoaWNo
IHBhcnRzIG9mIHRoZSBpbmZlcmVuY2Ugc2hvdWxkIGJlIHBlcmZvcm1lZCBieSBwYXNzaW5nIHRo
ZSBhcHByb3ByaWF0ZQorCSAqIGZsYWdzIGludG8gYXJndW1lbnQgJ2luZmVyZW5jZUxldmVsJy4g
T24gZWFjaCBjYWxsIHBhdGggaXQgbXVzdCBiZSBlbnN1cmVkIHRoYXQgb25lIG9yIG1vcmUKKwkg
KiBpbnZvY2F0aW9uIGFwcGxpY2FiaWxpdHkgaW5mZXJlbmNlcyBhcmUgYWx3YXlzIGZvbGxvd2Vk
IGJ5IGV4YWN0bHkgb25lIGludm9jYXRpb24gdHlwZSBpbmZlcmVuY2UKKwkgKiAodW5sZXNzIGVy
cm9ycyBoYXZlIGJlZW4gZGV0ZWN0ZWQpLgorCSAqIDwvcD4KKwkgKiA8cD4KKwkgKiBJbml0aWFs
IGNsaWVudHMgYXJlIHRoZSBkaXJlY3QgY2FsbGVycyBvZgorCSAqIHtAbGluayBTY29wZSNjb21w
dXRlQ29tcGF0aWJsZU1ldGhvZChNZXRob2RCaW5kaW5nLFR5cGVCaW5kaW5nW10sSW52b2NhdGlv
blNpdGUsaW50KX0sCisJICogd2hpY2ggc2hvdWxkIGVpdGhlciBpbnZva2UgYm90aCBsZXZlbHMg
b2YgaW5mZXJlbmNlIDxlbT5vcjwvZW0+IGRlbGVnYXRlIHRoZSBzZWNvbmQgcGFydCB0bworCSAq
IHtAbGluayBTY29wZSNtb3N0U3BlY2lmaWNNZXRob2RCaW5kaW5nKE1ldGhvZEJpbmRpbmdbXSxp
bnQsVHlwZUJpbmRpbmdbXSxJbnZvY2F0aW9uU2l0ZSxSZWZlcmVuY2VCaW5kaW5nKX0sCisJICog
d2hpY2ggaXMgaW50ZW5kZWQgdG8gZW5zdXJlIGNvbXBsZXRpbmcgdGhlIGluZmVyZW5jZSBvbiBh
bGwgbm9uLWVycm9yIGV4aXRzLgorCSAqIDwvcD4gIAogCSAqLwotCXB1YmxpYyBzdGF0aWMgTWV0
aG9kQmluZGluZyBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChNZXRob2RCaW5kaW5nIG9yaWdpbmFs
TWV0aG9kLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50cywgU2NvcGUgc2NvcGUsIEludm9jYXRpb25T
aXRlIGludm9jYXRpb25TaXRlKSB7CisJcHVibGljIHN0YXRpYyBNZXRob2RCaW5kaW5nIGNvbXB1
dGVDb21wYXRpYmxlTWV0aG9kKE1ldGhvZEJpbmRpbmcgb3JpZ2luYWxNZXRob2QsIFR5cGVCaW5k
aW5nW10gYXJndW1lbnRzLCBTY29wZSBzY29wZSwKKwkJCUludm9jYXRpb25TaXRlIGludm9jYXRp
b25TaXRlLCBpbnQgaW5mZXJlbmNlTGV2ZWwpCisJewogCQlQYXJhbWV0ZXJpemVkR2VuZXJpY01l
dGhvZEJpbmRpbmcgbWV0aG9kU3Vic3RpdHV0ZTsKIAkJVHlwZVZhcmlhYmxlQmluZGluZ1tdIHR5
cGVWYXJpYWJsZXMgPSBvcmlnaW5hbE1ldGhvZC50eXBlVmFyaWFibGVzOwogCQlUeXBlQmluZGlu
Z1tdIHN1YnN0aXR1dGVzID0gaW52b2NhdGlvblNpdGUuZ2VuZXJpY1R5cGVBcmd1bWVudHMoKTsK
QEAgLTY3LDYzICs5Myw4MiBAQCBwdWJsaWMgY2xhc3MgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRo
b2RCaW5kaW5nIGV4dGVuZHMgUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbgogCiAvLyA9PT09IDEu
ODogVGhlIG1haW4gZHJpdmVyIGZvciBpbmZlcmVuY2Ugb2YgZ2VuZXJpYyBtZXRob2RzOiA9PT09
CiAJCQlJbmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4MTggPSBudWxsOwotCQkJaWYgKHNjb3BlLmNv
bXBpbGVyT3B0aW9ucygpLnNvdXJjZUxldmVsID49IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzgp
Ci0JCQkJaW5mQ3R4MTggPSBpbnZvY2F0aW9uU2l0ZS5mcmVzaEluZmVyZW5jZUNvbnRleHQoc2Nv
cGUpOworCQkJaWYgKHNjb3BlLmNvbXBpbGVyT3B0aW9ucygpLnNvdXJjZUxldmVsID49IENsYXNz
RmlsZUNvbnN0YW50cy5KREsxXzgpIHsKKwkJCQlpZiAoKGluZmVyZW5jZUxldmVsICYgU2NvcGUu
QVBQTElDQUJJTElUWSkgIT0gMCkKKwkJCQkJaW5mQ3R4MTggPSBpbnZvY2F0aW9uU2l0ZS5mcmVz
aEluZmVyZW5jZUNvbnRleHQoc2NvcGUpOworCQkJCWVsc2UgaWYgKGludm9jYXRpb25TaXRlIGlu
c3RhbmNlb2YgSW52b2NhdGlvbikKKwkJCQkJaW5mQ3R4MTggPSAoKEludm9jYXRpb24pIGludm9j
YXRpb25TaXRlKS5pbmZlcmVuY2VDb250ZXh0KCk7CisJCQl9CiAJCQlpZiAoaW5mQ3R4MTggIT0g
bnVsbCkgewotCQkJCWludCBjaGVja0tpbmQgPSBJbmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tfTE9P
U0U7IC8vIFRPRE86IHZhbGlkYXRlIGlmIDIgcGhhc2UgY2hlY2tpbmcgKHN0cmljdC9sb29zZSAr
IHZhcmFyZykgaXMgc3VmZmljaWVudC4KLQkJCQkvLyAxOC41LjEgKEFwcGxpY2FiaWxpdHkpOgot
CQkJCWJvb2xlYW4gaXNEaWFtb25kID0gb3JpZ2luYWxNZXRob2QuaXNDb25zdHJ1Y3RvcigpCi0J
CQkJCQkmJiBpbnZvY2F0aW9uU2l0ZSBpbnN0YW5jZW9mIEV4cHJlc3Npb24KLQkJCQkJCSYmICgo
RXhwcmVzc2lvbilpbnZvY2F0aW9uU2l0ZSkuaXNQb2x5RXhwcmVzc2lvbihvcmlnaW5hbE1ldGhv
ZCk7Ci0JCQkJaW5mQ3R4MTguaW5mZXJJbnZvY2F0aW9uQXBwbGljYWJpbGl0eShvcmlnaW5hbE1l
dGhvZCwgYXJndW1lbnRzLCBpc0RpYW1vbmQsIGNoZWNrS2luZCk7CiAJCQkJdHJ5IHsKLQkJCQkJ
Qm91bmRTZXQgcHJvdmlzaW9uYWxSZXN1bHQgPSBpbmZDdHgxOC5zb2x2ZSgpOwotCQkJCQlpZiAo
cHJvdmlzaW9uYWxSZXN1bHQgPT0gbnVsbCAmJiBvcmlnaW5hbE1ldGhvZC5pc1ZhcmFyZ3MoKSkg
ewotCQkJCQkJLy8gY2hlY2sgZm9yIHZhcmlhYmxlIGFyaXR5IGFwcGxpY2FiaWxpdHkKLQkJCQkJ
CWluZkN0eDE4ID0gaW52b2NhdGlvblNpdGUuZnJlc2hJbmZlcmVuY2VDb250ZXh0KHNjb3BlKTsg
Ly8gc3RhcnQgb3ZlcgotCQkJCQkJY2hlY2tLaW5kID0gSW5mZXJlbmNlQ29udGV4dDE4LkNIRUNL
X1ZBUkFSRzsKLQkJCQkJCWluZkN0eDE4LmluZmVySW52b2NhdGlvbkFwcGxpY2FiaWxpdHkob3Jp
Z2luYWxNZXRob2QsIGFyZ3VtZW50cywgaXNEaWFtb25kLCBjaGVja0tpbmQpOwotCQkJCQkJcHJv
dmlzaW9uYWxSZXN1bHQgPSBpbmZDdHgxOC5zb2x2ZSgpOwotCQkJCQl9Ci0JCQkJCUJvdW5kU2V0
IHJlc3VsdCA9IGluZkN0eDE4LmN1cnJlbnRCb3VuZHMuY29weSgpOyAvLyB0aGUgcmVzdWx0IGFm
dGVyIHJlZHVjdGlvbiwgd2l0aG91dCBlZmZlY3RzIG9mIHJlc29sdmUoKQotCQkJCQlpZiAocHJv
dmlzaW9uYWxSZXN1bHQgIT0gbnVsbCAmJiBpbmZDdHgxOC5pc1Jlc29sdmVkKHByb3Zpc2lvbmFs
UmVzdWx0KSkgewotCQkJCQkJLy8gMTguNS4yIChJbnZvY2F0aW9uIHR5cGUpOgotCQkJCQkJVHlw
ZUJpbmRpbmcgZXhwZWN0ZWRUeXBlID0gaW52b2NhdGlvblNpdGUuaW52b2NhdGlvblRhcmdldFR5
cGUoKTsKLQkJCQkJCWJvb2xlYW4gaGFzUmV0dXJuUHJvYmxlbSA9IGZhbHNlOwotCQkJCQkJYm9v
bGVhbiBpbnZvY2F0aW9uVHlwZUluZmVycmVkID0gZmFsc2U7Ci0JCQkJCQlpZiAoZXhwZWN0ZWRU
eXBlICE9IG51bGwgfHwgaW52b2NhdGlvblNpdGUuZ2V0RXhwcmVzc2lvbkNvbnRleHQoKSA9PSBF
eHByZXNzaW9uQ29udGV4dC5WQU5JTExBX0NPTlRFWFQpIHsKLQkJCQkJCQlyZXN1bHQgPSBpbmZD
dHgxOC5pbmZlckludm9jYXRpb25UeXBlKHJlc3VsdCwgZXhwZWN0ZWRUeXBlLCBpbnZvY2F0aW9u
U2l0ZSwgb3JpZ2luYWxNZXRob2QsIGNoZWNrS2luZCk7Ci0JCQkJCQkJaW52b2NhdGlvblR5cGVJ
bmZlcnJlZCA9IHRydWU7Ci0JCQkJCQkJaGFzUmV0dXJuUHJvYmxlbSB8PSByZXN1bHQgPT0gbnVs
bDsKLQkJCQkJCQlpZiAoaGFzUmV0dXJuUHJvYmxlbSkKLQkJCQkJCQkJcmVzdWx0ID0gcHJvdmlz
aW9uYWxSZXN1bHQ7IC8vIGxldCdzIHByZWZlciBhIHR5cGUgZXJyb3IgcmVnYXJkaW5nIHRoZSBy
ZXR1cm4gdHlwZSBvdmVyIHJlcG9ydGluZyBubyBtYXRjaCBhdCBhbGwKLQkJCQkJCX0gZWxzZSB7
Ci0JCQkJCQkJLy8gd2UncmUgbm90IHlldCByZWFkeSBmb3IgaW52b2NhdGlvbiB0eXBlIGluZmVy
ZW5jZQotCQkJCQkJCXJlc3VsdCA9IHByb3Zpc2lvbmFsUmVzdWx0OworCQkJCQlCb3VuZFNldCBw
cm92aXNpb25hbFJlc3VsdCA9IG51bGw7CisJCQkJCUJvdW5kU2V0IHJlc3VsdCA9IG51bGw7CisJ
CQkJCWludCBjaGVja0tpbmQgPSBJbmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tfTE9PU0U7IC8vIFRP
RE86IHZhbGlkYXRlIGlmIDIgcGhhc2UgY2hlY2tpbmcgKHN0cmljdC9sb29zZSArIHZhcmFyZykg
aXMgc3VmZmljaWVudC4KKwkJCQkJaWYgKChpbmZlcmVuY2VMZXZlbCAmIFNjb3BlLkFQUExJQ0FC
SUxJVFkpICE9IDApIHsKKworCQkJCQkJLy8gLS0tLSAxOC41LjEgKEFwcGxpY2FiaWxpdHkpOiAt
LS0tCisJCQkJCQlib29sZWFuIGlzRGlhbW9uZCA9IG9yaWdpbmFsTWV0aG9kLmlzQ29uc3RydWN0
b3IoKQorCQkJCQkJCQkmJiBpbnZvY2F0aW9uU2l0ZSBpbnN0YW5jZW9mIEV4cHJlc3Npb24KKwkJ
CQkJCQkJJiYgKChFeHByZXNzaW9uKWludm9jYXRpb25TaXRlKS5pc1BvbHlFeHByZXNzaW9uKG9y
aWdpbmFsTWV0aG9kKTsKKwkJCQkJCWlmIChpbmZDdHgxOC5pbmZlckludm9jYXRpb25BcHBsaWNh
YmlsaXR5KG9yaWdpbmFsTWV0aG9kLCBhcmd1bWVudHMsIGlzRGlhbW9uZCwgY2hlY2tLaW5kKSkK
KwkJCQkJCQlwcm92aXNpb25hbFJlc3VsdCA9IGluZkN0eDE4LnNvbHZlKCk7CisJCQkJCQlpZiAo
cHJvdmlzaW9uYWxSZXN1bHQgPT0gbnVsbCAmJiBvcmlnaW5hbE1ldGhvZC5pc1ZhcmFyZ3MoKSkg
eworCQkJCQkJCS8vIGNoZWNrIGZvciB2YXJpYWJsZS1hcml0eSBhcHBsaWNhYmlsaXR5CisJCQkJ
CQkJaW5mQ3R4MTggPSBpbnZvY2F0aW9uU2l0ZS5mcmVzaEluZmVyZW5jZUNvbnRleHQoc2NvcGUp
OyAvLyBzdGFydCBvdmVyCisJCQkJCQkJaW5mQ3R4MTguaW5mZXJJbnZvY2F0aW9uQXBwbGljYWJp
bGl0eShvcmlnaW5hbE1ldGhvZCwgYXJndW1lbnRzLCBpc0RpYW1vbmQsIEluZmVyZW5jZUNvbnRl
eHQxOC5DSEVDS19WQVJBUkcpOworCQkJCQkJCXByb3Zpc2lvbmFsUmVzdWx0ID0gaW5mQ3R4MTgu
c29sdmUoKTsKKwkJCQkJCQlpZiAocHJvdmlzaW9uYWxSZXN1bHQgIT0gbnVsbCkKKwkJCQkJCQkJ
Y2hlY2tLaW5kID0gSW5mZXJlbmNlQ29udGV4dDE4LkNIRUNLX1ZBUkFSRzsKKwkJCQkJCX0KKwkJ
CQkJCWlmIChwcm92aXNpb25hbFJlc3VsdCAhPSBudWxsICYmIGluZkN0eDE4LmlzUmVzb2x2ZWQo
cHJvdmlzaW9uYWxSZXN1bHQpKSB7CisJCQkJCQkJaW5mQ3R4MTguc3RvcmVkU29sdXRpb24gPSBw
cm92aXNpb25hbFJlc3VsdDsKIAkJCQkJCX0KKwkJCQkJCWlmIChpbnZvY2F0aW9uU2l0ZSBpbnN0
YW5jZW9mIEludm9jYXRpb24pIHsKKwkJCQkJCQlJbnZvY2F0aW9uIGludm9jYXRpb24gPSAoSW52
b2NhdGlvbilpbnZvY2F0aW9uU2l0ZTsKKwkJCQkJCQlpbnZvY2F0aW9uLnNldEluZmVyZW5jZUtp
bmQoY2hlY2tLaW5kKTsKKwkJCQkJCX0KKwkJCQkJfSBlbHNlIHsKKwkJCQkJCXByb3Zpc2lvbmFs
UmVzdWx0ID0gaW5mQ3R4MTguc3RvcmVkU29sdXRpb247CisJCQkJCQlpZiAoaW52b2NhdGlvblNp
dGUgaW5zdGFuY2VvZiBJbnZvY2F0aW9uKSAKKwkJCQkJCQljaGVja0tpbmQgPSAoKEludm9jYXRp
b24paW52b2NhdGlvblNpdGUpLmluZmVyZW5jZUtpbmQoKTsKKwkJCQkJfQorCQkJCQlyZXN1bHQg
PSBpbmZDdHgxOC5jdXJyZW50Qm91bmRzLmNvcHkoKTsgLy8gdGhlIHJlc3VsdCBhZnRlciByZWR1
Y3Rpb24sIHdpdGhvdXQgZWZmZWN0cyBvZiByZXNvbHZlKCkKKworCQkJCQlUeXBlQmluZGluZyBl
eHBlY3RlZFR5cGUgPSBpbnZvY2F0aW9uU2l0ZS5pbnZvY2F0aW9uVGFyZ2V0VHlwZSgpOworCQkJ
CQlib29sZWFuIGhhc1JldHVyblByb2JsZW0gPSBmYWxzZTsKKwkJCQkJYm9vbGVhbiBpbnZvY2F0
aW9uVHlwZUluZmVycmVkID0gZmFsc2U7CisJCQkJCWlmICgoaW5mZXJlbmNlTGV2ZWwgJiBTY29w
ZS5JTlZPQ0FUSU9OX1RZUEUpICE9IDAgLy8gcmVxdWVzdGVkPworCQkJCQkJCSYmIChleHBlY3Rl
ZFR5cGUgIT0gbnVsbCB8fCBpbnZvY2F0aW9uU2l0ZS5nZXRFeHByZXNzaW9uQ29udGV4dCgpID09
IEV4cHJlc3Npb25Db250ZXh0LlZBTklMTEFfQ09OVEVYVCkpIHsgLy8gcG9zc2libGU/CisKKwkJ
CQkJCS8vIC0tLS0gMTguNS4yIChJbnZvY2F0aW9uIHR5cGUpOiAtLS0tCisJCQkJCQlyZXN1bHQg
PSBpbmZDdHgxOC5pbmZlckludm9jYXRpb25UeXBlKHJlc3VsdCwgZXhwZWN0ZWRUeXBlLCBpbnZv
Y2F0aW9uU2l0ZSwgb3JpZ2luYWxNZXRob2QsIGNoZWNrS2luZCk7CisJCQkJCQlpbnZvY2F0aW9u
VHlwZUluZmVycmVkID0gdHJ1ZTsKKwkJCQkJCWhhc1JldHVyblByb2JsZW0gfD0gcmVzdWx0ID09
IG51bGw7CisJCQkJCQlpZiAoaGFzUmV0dXJuUHJvYmxlbSkKKwkJCQkJCQlyZXN1bHQgPSBwcm92
aXNpb25hbFJlc3VsdDsgLy8gbGV0J3MgcHJlZmVyIGEgdHlwZSBlcnJvciByZWdhcmRpbmcgdGhl
IHJldHVybiB0eXBlIG92ZXIgcmVwb3J0aW5nIG5vIG1hdGNoIGF0IGFsbAorCQkJCQl9IGVsc2Ug
eworCQkJCQkJLy8gd2UncmUgbm90IHlldCByZWFkeSBmb3IgaW52b2NhdGlvbiB0eXBlIGluZmVy
ZW5jZQorCQkJCQkJcmVzdWx0ID0gcHJvdmlzaW9uYWxSZXN1bHQ7CisJCQkJCX0KKworCQkJCQlp
ZiAocmVzdWx0ICE9IG51bGwpIHsKKwkJCQkJCS8vIGFzc2VtYmxlIHRoZSBzb2x1dGlvbiBldGM6
CiAJCQkJCQlUeXBlQmluZGluZ1tdIHNvbHV0aW9ucyA9IGluZkN0eDE4LmdldFNvbHV0aW9ucyh0
eXBlVmFyaWFibGVzLCBpbnZvY2F0aW9uU2l0ZSwgcmVzdWx0KTsKIAkJCQkJCWlmIChzb2x1dGlv
bnMgIT0gbnVsbCkgewogCQkJCQkJCQogCQkJCQkJCW1ldGhvZFN1YnN0aXR1dGUgPSBzY29wZS5l
bnZpcm9ubWVudCgpLmNyZWF0ZVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kKG9yaWdpbmFsTWV0
aG9kLCBzb2x1dGlvbnMpOwotCQkJCQkJCQotCQkJCQkJCWlmIChJbmZlcmVuY2VDb250ZXh0MTgu
U0lNVUxBVEVfQlVHX0pES184MDI2NTI3ICYmIGV4cGVjdGVkVHlwZSAhPSBudWxsICYmIG1ldGhv
ZFN1YnN0aXR1dGUucmV0dXJuVHlwZSBpbnN0YW5jZW9mIFJlZmVyZW5jZUJpbmRpbmcpCi0JCQkJ
CQkJCWhhc1JldHVyblByb2JsZW0gJj0gIW1ldGhvZFN1YnN0aXR1dGUucmV0dXJuVHlwZS5lcmFz
dXJlKCkuaXNDb21wYXRpYmxlV2l0aChleHBlY3RlZFR5cGUpOwotCQkJCQkJCWlmIChoYXNSZXR1
cm5Qcm9ibGVtKSB7Ci0JCQkJCQkJCVByb2JsZW1NZXRob2RCaW5kaW5nIHByb2JsZW1NZXRob2Qg
PSBuZXcgUHJvYmxlbU1ldGhvZEJpbmRpbmcobWV0aG9kU3Vic3RpdHV0ZSwgbWV0aG9kU3Vic3Rp
dHV0ZS5zZWxlY3RvciwgcGFyYW1ldGVycywgUHJvYmxlbVJlYXNvbnMuUGFyYW1ldGVyaXplZE1l
dGhvZEV4cGVjdGVkVHlwZVByb2JsZW0pOwotCQkJCQkJCQlwcm9ibGVtTWV0aG9kLnJldHVyblR5
cGUgPSBpbnZvY2F0aW9uU2l0ZS5pbnZvY2F0aW9uVGFyZ2V0VHlwZSgpOwotCQkJCQkJCQlwcm9i
bGVtTWV0aG9kLmluZmVyZW5jZUNvbnRleHQgPSBpbmZDdHgxODsKLQkJCQkJCQkJcmV0dXJuIHBy
b2JsZW1NZXRob2Q7Ci0JCQkJCQkJfQotCQkJCQkJCWlmIChpbnZvY2F0aW9uU2l0ZSBpbnN0YW5j
ZW9mIEludm9jYXRpb24pIHsKLQkJCQkJCQkJSW52b2NhdGlvbiBpbnZvY2F0aW9uID0gKEludm9j
YXRpb24paW52b2NhdGlvblNpdGU7Ci0JCQkJCQkJCWludm9jYXRpb24uc2V0SW5mZXJlbmNlS2lu
ZChjaGVja0tpbmQpOworCQkJCQkJCWlmIChoYXNSZXR1cm5Qcm9ibGVtKSB7IC8vIGlsbGVnYWxs
eSB3b3JraW5nIGZyb20gdGhlIHByb3Zpc2lvbmFsIHJlc3VsdD8KKwkJCQkJCQkJTWV0aG9kQmlu
ZGluZyBwcm9ibGVtTWV0aG9kID0gaW5mQ3R4MTguZ2V0UmV0dXJuUHJvYmxlbU1ldGhvZElmTmVl
ZGVkKGV4cGVjdGVkVHlwZSwgbWV0aG9kU3Vic3RpdHV0ZSk7CisJCQkJCQkJCWlmIChwcm9ibGVt
TWV0aG9kIGluc3RhbmNlb2YgUHJvYmxlbU1ldGhvZEJpbmRpbmcpCisJCQkJCQkJCQlyZXR1cm4g
cHJvYmxlbU1ldGhvZDsKIAkJCQkJCQl9CiAJCQkJCQkJaWYgKGludm9jYXRpb25UeXBlSW5mZXJy
ZWQpIHsKLQkJCQkJCQkJaWYgKGludm9jYXRpb25TaXRlIGluc3RhbmNlb2YgUG9seUV4cHJlc3Np
b24pCi0JCQkJCQkJCQkoKFBvbHlFeHByZXNzaW9uKSBpbnZvY2F0aW9uU2l0ZSkubWFya0luZmVy
ZW5jZUZpbmlzaGVkKCk7CQkJCQkJCQkJCi0JCQkJCQkJCWluZkN0eDE4LnJlYmluZElubmVyUG9s
aWVzKHJlc3VsdCwgYXJndW1lbnRzKTsKKwkJCQkJCQkJaW5mQ3R4MTgucmViaW5kSW5uZXJQb2xp
ZXMocmVzdWx0LCBhcmd1bWVudHMsIG1ldGhvZFN1YnN0aXR1dGUucGFyYW1ldGVycywgY2hlY2tL
aW5kPT1JbmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tfVkFSQVJHKTsKKwkJCQkJCQkJcmV0dXJuIG1l
dGhvZFN1YnN0aXR1dGUuYm91bmRDaGVjazE4KHNjb3BlLCBhcmd1bWVudHMpOworCQkJCQkJCX0g
ZWxzZSB7CisJCQkJCQkJCW1ldGhvZFN1YnN0aXR1dGUuaW5mZXJlbmNlQ29udGV4dCA9IGluZkN0
eDE4OyAvLyBrZWVwIGNvbnRleHQgc28gd2UgY2FuIGZpbmlzaCBsYXRlcgorCQkJCQkJCQlyZXR1
cm4gbWV0aG9kU3Vic3RpdHV0ZTsKIAkJCQkJCQl9Ci0JCQkJCQkJYnJlYWsgY29tcHV0ZVN1YnN0
aXR1dGVzOwogCQkJCQkJfQogCQkJCQl9CiAJCQkJCXJldHVybiBudWxsOwpAQCAtMjExLDYgKzI1
Niw3NCBAQCBwdWJsaWMgY2xhc3MgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIGV4
dGVuZHMgUGFyYW1ldGVyaXplZE1ldGhvZEJpbmRpbgogCQlyZXR1cm4gbWV0aG9kU3Vic3RpdHV0
ZTsKIAl9CiAKKwlwcml2YXRlIE1ldGhvZEJpbmRpbmcgYm91bmRDaGVjazE4KFNjb3BlIHNjb3Bl
LCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50cykKKwl7CisJCVN1YnN0aXR1dGlvbiBzdWJzdGl0dXRp
b24gPSB0aGlzOworCQlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgbWV0aG9kU3Vi
c3RpdHV0ZSA9IHRoaXM7CisJCVR5cGVWYXJpYWJsZUJpbmRpbmdbXSBvcmlnaW5hbFR5cGVWYXJp
YWJsZXMgPSB0aGlzLm9yaWdpbmFsTWV0aG9kLnR5cGVWYXJpYWJsZXM7CisJCS8vIG1vc3RseSBv
cmlnaW5hbCBleHRyYWN0IGZyb20gYWJvdmUsIFRPRE86IHJlbW92ZSBzdHVmZiB0aGF0J3Mgbm8g
bG9uZ2VyIG5lZWRlZCBpbiAxLjgrCisJCWZvciAoaW50IGkgPSAwLCBsZW5ndGggPSBvcmlnaW5h
bFR5cGVWYXJpYWJsZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKKwkJICAgIFR5cGVWYXJp
YWJsZUJpbmRpbmcgdHlwZVZhcmlhYmxlID0gb3JpZ2luYWxUeXBlVmFyaWFibGVzW2ldOworCQkg
ICAgVHlwZUJpbmRpbmcgc3Vic3RpdHV0ZSA9IG1ldGhvZFN1YnN0aXR1dGUudHlwZUFyZ3VtZW50
c1tpXTsgLy8gcmV0YWluIGZvciBkaWFnbm9zdGljcworCQkgICAgLyogaHR0cHM6Ly9idWdzLmVj
bGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM3NTM5NCwgVG8gYXZvaWQgc3B1cmlvdXMg
Ym91bmRzIGNoZWNrIGZhaWx1cmVzIGR1ZSB0byBjaXJjdWxhcml0eSBpbiBmb3JtYWwgYm91bmRz
LCAKKwkJICAgICAgIHdlIHNob3VsZCBlbGltaW5hdGUgb25seSB0aGUgbGluZ2VyaW5nIGVtYmVk
ZGVkIHR5cGUgdmFyaWFibGUgcmVmZXJlbmNlcyBhZnRlciBzdWJzdGl0dXRpb24sIG5vdCBhbGll
biB0eXBlIHZhcmlhYmxlIHJlZmVyZW5jZXMKKwkJICAgICAgIHRoYXQgY29uc3RpdHV0ZSB0aGUg
aW5mZXJlbmNlIHBlciBzZS4KKwkJICAgICAqLyAKKwkJICAgIFR5cGVCaW5kaW5nIHN1YnN0aXR1
dGVGb3JDaGVja3M7CisJCSAgICBpZiAoc3Vic3RpdHV0ZSBpbnN0YW5jZW9mIFR5cGVWYXJpYWJs
ZUJpbmRpbmcpIHsKKwkJICAgIAlzdWJzdGl0dXRlRm9yQ2hlY2tzID0gc3Vic3RpdHV0ZTsKKwkJ
ICAgIH0gZWxzZSB7CisJCSAgICAJc3Vic3RpdHV0ZUZvckNoZWNrcyA9IFNjb3BlLnN1YnN0aXR1
dGUobmV3IExpbmdlcmluZ1R5cGVWYXJpYWJsZUVsaW1pbmF0b3Iob3JpZ2luYWxUeXBlVmFyaWFi
bGVzLCBudWxsLCBzY29wZSksIHN1YnN0aXR1dGUpOyAvLyB3aGlsZSB1c2luZyB0aGlzIGZvciBi
b3VuZHMgY2hlY2sKKwkJICAgIH0KKwkJICAgIAorCQkJc3dpdGNoICh0eXBlVmFyaWFibGUuYm91
bmRDaGVjayhzdWJzdGl0dXRpb24sIHN1YnN0aXR1dGVGb3JDaGVja3MsIHNjb3BlKSkgeworCQkJ
CWNhc2UgVHlwZUNvbnN0YW50cy5NSVNNQVRDSCA6CisJCQkgICAgICAgIC8vIGluY29tcGF0aWJs
ZSBkdWUgdG8gYm91bmQgY2hlY2sKKwkJCQkJaW50IGFyZ0xlbmd0aCA9IGFyZ3VtZW50cy5sZW5n
dGg7CisJCQkJCVR5cGVCaW5kaW5nW10gYXVnbWVudGVkQXJndW1lbnRzID0gbmV3IFR5cGVCaW5k
aW5nW2FyZ0xlbmd0aCArIDJdOyAvLyBhcHBlbmQgb2ZmZW5kaW5nIHN1YnN0aXR1dGUgYW5kIHR5
cGVWYXJpYWJsZQorCQkJCQlTeXN0ZW0uYXJyYXljb3B5KGFyZ3VtZW50cywgMCwgYXVnbWVudGVk
QXJndW1lbnRzLCAwLCBhcmdMZW5ndGgpOworCQkJCQlhdWdtZW50ZWRBcmd1bWVudHNbYXJnTGVu
Z3RoXSA9IHN1YnN0aXR1dGU7CisJCQkJCWF1Z21lbnRlZEFyZ3VtZW50c1thcmdMZW5ndGgrMV0g
PSB0eXBlVmFyaWFibGU7CisJCQkgICAgICAgIHJldHVybiBuZXcgUHJvYmxlbU1ldGhvZEJpbmRp
bmcobWV0aG9kU3Vic3RpdHV0ZSwgdGhpcy5vcmlnaW5hbE1ldGhvZC5zZWxlY3RvciwgYXVnbWVu
dGVkQXJndW1lbnRzLCBQcm9ibGVtUmVhc29ucy5QYXJhbWV0ZXJCb3VuZE1pc21hdGNoKTsKKwkJ
CQljYXNlIFR5cGVDb25zdGFudHMuVU5DSEVDS0VEIDoKKwkJCQkJLy8gdG9sZXJhdGUgdW5jaGVj
a2VkIGJvdW5kcworCQkJCQltZXRob2RTdWJzdGl0dXRlLnRhZ0JpdHMgfD0gVGFnQml0cy5IYXNV
bmNoZWNrZWRUeXBlQXJndW1lbnRGb3JCb3VuZENoZWNrOworCQkJCQlicmVhazsKKwkJCX0KKwkJ
fQorCQlyZXR1cm4gbnVsbDsKKwl9CisKKwlwdWJsaWMgTWV0aG9kQmluZGluZyBpbmZlckludm9j
YXRpb25UeXBlKFBvbHlTaXRlIHNpdGUsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcykgewor
CQlJbmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4MTggPSB0aGlzLmluZmVyZW5jZUNvbnRleHQ7CisJ
CWlmIChpbmZDdHgxOCAhPSBudWxsICYmIHNpdGUuaW5mZXJlbmNlS2luZCgpID4gMCkgeworCQkJ
VHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSA9IHNpdGUuaW52b2NhdGlvblRhcmdldFR5cGUoKTsKKwkJ
CVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBmaW5hbE1ldGhvZCA9IHRoaXM7CisJ
CQlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgbWV0aG9kVG9DaGVjayA9IHRoaXM7
CisJCQkKKwkJCWJvb2xlYW4gaGF2ZVByb3BlclRhcmdldFR5cGUgPSB0YXJnZXRUeXBlICE9IG51
bGwgJiYgdGFyZ2V0VHlwZS5pc1Byb3BlclR5cGUodHJ1ZSk7CisJCQlpZiAoaGF2ZVByb3BlclRh
cmdldFR5cGUpIHsKKwkJCQlmaW5hbE1ldGhvZCA9IGluZkN0eDE4LmdldEludm9jYXRpb25UeXBl
SW5mZXJlbmNlU29sdXRpb24odGhpcy5vcmlnaW5hbE1ldGhvZCwgc2l0ZSwgdGFyZ2V0VHlwZSk7
CisJCQkJaWYgKGZpbmFsTWV0aG9kICE9IG51bGwpCisJCQkJCW1ldGhvZFRvQ2hlY2sgPSBmaW5h
bE1ldGhvZDsKKwkJCX0KKwkJCQorCQkJTWV0aG9kQmluZGluZyBwcm9ibGVtTWV0aG9kID0gbWV0
aG9kVG9DaGVjay5ib3VuZENoZWNrMTgoaW5mQ3R4MTguc2NvcGUsIGFyZ3VtZW50VHlwZXMpOwor
CQkJaWYgKHByb2JsZW1NZXRob2QgIT0gbnVsbCkKKwkJCQlyZXR1cm4gcHJvYmxlbU1ldGhvZDsK
KworCQkJaWYgKCFoYXZlUHJvcGVyVGFyZ2V0VHlwZSAmJiBzaXRlLmdldEV4cHJlc3Npb25Db250
ZXh0KCkgIT0gRXhwcmVzc2lvbkNvbnRleHQuVkFOSUxMQV9DT05URVhUKQorCQkJCXJldHVybiB0
aGlzOyAvLyBzdGlsbCBub3QgcmVhZHkhCisKKwkJCWlmIChmaW5hbE1ldGhvZCAhPSBudWxsKSB7
CisJCQkJaWYgKGluZkN0eDE4LnJlYmluZElubmVyUG9saWVzKGFyZ3VtZW50VHlwZXMsIGZpbmFs
TWV0aG9kLCBzaXRlKSkKKwkJCQkJcmV0dXJuIGZpbmFsTWV0aG9kOworCQkJfQorCQkJcmV0dXJu
IGluZkN0eDE4LmdldFJldHVyblByb2JsZW1NZXRob2RJZk5lZWRlZCh0YXJnZXRUeXBlLCB0aGlz
KTsKKwkJfQorCQlyZXR1cm4gbnVsbDsKKwl9CisKIAkvKioKIAkgKiBDb2xsZWN0IGFyZ3VtZW50
IHR5cGUgbWFwcGluZywgaGFuZGxpbmcgdmFyYXJncwogCSAqLwpkaWZmIC0tZ2l0IGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2xvb2t1cC9Qb2x5U2l0ZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Qb2x5U2l0ZS5qYXZhCm5ldyBm
aWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAuLjZkNGQ5OGQKLS0tIC9kZXYvbnVsbAorKysg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvbG9va3VwL1BvbHlTaXRlLmphdmEKQEAgLTAsMCArMSwzMCBAQAorLyoqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioKKyAqIENvcHlyaWdodCAoYykgMjAxMyBHSyBTb2Z0d2FyZSBBRy4KKyAq
IEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBt
YXRlcmlhbHMKKyAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVj
bGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAorICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0
cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKKyAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcv
bGVnYWwvZXBsLXYxMC5odG1sCisgKgorICogVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBh
biBlYXJseS1kcmFmdCBzcGVjaWZpY2F0aW9uIGRldmVsb3BlZCB1bmRlciB0aGUgSmF2YQorICog
Q29tbXVuaXR5IFByb2Nlc3MgKEpDUCkgYW5kIGlzIG1hZGUgYXZhaWxhYmxlIGZvciB0ZXN0aW5n
IGFuZCBldmFsdWF0aW9uIHB1cnBvc2VzCisgKiBvbmx5LiBUaGUgY29kZSBpcyBub3QgY29tcGF0
aWJsZSB3aXRoIGFueSBzcGVjaWZpY2F0aW9uIG9mIHRoZSBKQ1AuCisgKgorICogQ29udHJpYnV0
b3JzOgorICogICAgIFN0ZXBoYW4gSGVycm1hbm4gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50
YXRpb24KKyAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLworcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIubG9va3VwOworCisvKioKKyAqIEFic3RyYWN0aW9uIGZvciBBU1Qg
dGhhdCBpcyBzdWJqZWN0IHRvIGluZmVyZW5jZSwgZWl0aGVyIHJlYWwgaW52b2NhdGlvbnMKKyAq
IG9yIHJlZmVyZW5jZSBleHByZXNzaW9ucyB3aGljaCBtaW1pYyBhcyBpbnZvY2F0aW9ucyBhdCBv
bmUgcG9pbnQgZHVyaW5nIGluZmVyZW5jZS4KKyAqLworcHVibGljIGludGVyZmFjZSBQb2x5U2l0
ZSBleHRlbmRzIEludm9jYXRpb25TaXRlIHsKKworCS8qKgorCSAqIEFuc3dlciBvbmUgb2Yge0Bs
aW5rIEluZmVyZW5jZUNvbnRleHQxOCNDSEVDS19TVFJJQ1R9LCB7QGxpbmsgSW5mZXJlbmNlQ29u
dGV4dDE4I0NIRUNLX0xPT1NFfSAKKwkgKiBvciB7QGxpbmsgSW5mZXJlbmNlQ29udGV4dDE4I0NI
RUNLX1ZBUkFSR30sIHRvIHNpZ25hbCB3aGF0IGtpbmQgb2YgaW5mZXJlbmNlIGhhcyBiZWVuIHVz
ZWQsCisJICogb3IgMCBpZiBubyBpbmZlcmVuY2UgaXMgYWN0aXZlIG9uIHRoaXMgbm9kZS4KKwkg
Ki8KKwlpbnQgaW5mZXJlbmNlS2luZCgpOworCit9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3Vw
L1Njb3BlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEKaW5kZXggMDJiOWMxYS4uMTBh
YTNiMSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9s
b29rdXAvU2NvcGUuamF2YQpAQCAtNjMsNiArNjMsMTcgQEAgcHVibGljIGFic3RyYWN0IGNsYXNz
IFNjb3BlIHsKIAlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBOT1RfUkVMQVRFRCA9IDA7CiAJcHVi
bGljIHN0YXRpYyBmaW5hbCBpbnQgTU9SRV9HRU5FUklDID0gMTsKIAorCS8qCisJICogRmxhZ3Mg
Zm9yIFBHTUIuY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoKSBhbmQgaXRzIGNhbGxlcnMsIHRvIHJl
cXVlc3QKKwkgKiB3aGljaCBvZiB0d28gbGV2ZWxzIG9mIGluZmVyZW5jZSBzaG91bGQgYmUgcGVy
Zm9ybWVkIChvciBib3RoKS4KKwkgKi8KKwkvKiogUmVxdWVzdCBJbnZvY2F0aW9uIEFwcGxpY2Fi
aWxpdHkgSW5mZXJlbmNlICgxOC41LjEpLiAqLworCXB1YmxpYyBzdGF0aWMgZmluYWwgaW50IEFQ
UExJQ0FCSUxJVFkgPSAxOworCS8qKiBSZXF1ZXN0IEludm9jYXRpb24gVHlwZSBJbmZlcmVuY2Ug
KDE4LjUuMikuICovCisJcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgSU5WT0NBVElPTl9UWVBFID0g
MjsKKwkvKiogUmVxdWVzdCBib3RoIHtAbGluayAjQVBQTElDQUJJTElUWX0gYW5kIHtAbGluayAj
SU5WT0NBVElPTl9UWVBFfSBpbmZlcmVuY2UuICovCisJcHVibGljIHN0YXRpYyBmaW5hbCBpbnQg
RlVMTF9JTkZFUkVOQ0UgPSBBUFBMSUNBQklMSVRZIHwgSU5WT0NBVElPTl9UWVBFOworCiAJcHVi
bGljIGludCBraW5kOwogCXB1YmxpYyBTY29wZSBwYXJlbnQ7CiAKQEAgLTY1Nyw4ICs2NjgsOCBA
QCBwdWJsaWMgYWJzdHJhY3QgY2xhc3MgU2NvcGUgewogCSAqIFdpbGwgYW5zd2VyIGEgc3Vic3Rp
dHV0ZWQgbWV0aG9kIGluIGNhc2UgdGhlIG1ldGhvZCB3YXMgZ2VuZXJpYyBhbmQgdHlwZSBpbmZl
cmVuY2UgZ290IHRyaWdnZXJlZDsKIAkgKiBpbiBjYXNlIHRoZSBtZXRob2Qgd2FzIG9yaWdpbmFs
bHkgY29tcGF0aWJsZSwgdGhlbiBzaW1wbHkgYW5zd2VyIGl0IGJhY2suCiAJICovCi0JcHJvdGVj
dGVkIGZpbmFsIE1ldGhvZEJpbmRpbmcgY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoTWV0aG9kQmlu
ZGluZyBtZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRzLCBJbnZvY2F0aW9uU2l0ZSBpbnZv
Y2F0aW9uU2l0ZSkgewotCQlyZXR1cm4gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kLCBh
cmd1bWVudHMsIGludm9jYXRpb25TaXRlLCBmYWxzZSk7CisJcHJvdGVjdGVkIGZpbmFsIE1ldGhv
ZEJpbmRpbmcgY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoTWV0aG9kQmluZGluZyBtZXRob2QsIFR5
cGVCaW5kaW5nW10gYXJndW1lbnRzLCBJbnZvY2F0aW9uU2l0ZSBpbnZvY2F0aW9uU2l0ZSwgaW50
IGluZmVyZW5jZUxldmVsKSB7CisJCXJldHVybiBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRo
b2QsIGFyZ3VtZW50cywgaW52b2NhdGlvblNpdGUsIGluZmVyZW5jZUxldmVsLCBmYWxzZSk7CiAJ
fQkKIAkvKioKIAkgKiBJbnRlcm5hbCB1c2Ugb25seQpAQCAtNjY2LDcgKzY3Nyw5IEBAIHB1Ymxp
YyBhYnN0cmFjdCBjbGFzcyBTY29wZSB7CiAJICogV2lsbCBhbnN3ZXIgYSBzdWJzdGl0dXRlZCBt
ZXRob2QgaW4gY2FzZSB0aGUgbWV0aG9kIHdhcyBnZW5lcmljIGFuZCB0eXBlIGluZmVyZW5jZSBn
b3QgdHJpZ2dlcmVkOwogCSAqIGluIGNhc2UgdGhlIG1ldGhvZCB3YXMgb3JpZ2luYWxseSBjb21w
YXRpYmxlLCB0aGVuIHNpbXBseSBhbnN3ZXIgaXQgYmFjay4KIAkgKi8KLQlwcm90ZWN0ZWQgZmlu
YWwgTWV0aG9kQmluZGluZyBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChNZXRob2RCaW5kaW5nIG1l
dGhvZCwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudHMsIEludm9jYXRpb25TaXRlIGludm9jYXRpb25T
aXRlLCBib29sZWFuIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMpIHsKKwlwcm90ZWN0ZWQgZmlu
YWwgTWV0aG9kQmluZGluZyBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChNZXRob2RCaW5kaW5nIG1l
dGhvZCwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudHMsCisJCQlJbnZvY2F0aW9uU2l0ZSBpbnZvY2F0
aW9uU2l0ZSwgaW50IGluZmVyZW5jZUxldmVsLCBib29sZWFuIHRpZWJyZWFraW5nVmFyYXJnc01l
dGhvZHMpCisJewogCQlUeXBlQmluZGluZ1tdIGdlbmVyaWNUeXBlQXJndW1lbnRzID0gaW52b2Nh
dGlvblNpdGUuZ2VuZXJpY1R5cGVBcmd1bWVudHMoKTsKIAkJVHlwZUJpbmRpbmdbXSBwYXJhbWV0
ZXJzID0gbWV0aG9kLnBhcmFtZXRlcnM7CiAJCVR5cGVWYXJpYWJsZUJpbmRpbmdbXSB0eXBlVmFy
aWFibGVzID0gbWV0aG9kLnR5cGVWYXJpYWJsZXM7CkBAIC03MDAsNyArNzEzLDcgQEAgcHVibGlj
IGFic3RyYWN0IGNsYXNzIFNjb3BlIHsKIAkJCQlhcmd1bWVudHMgPSBuZXdBcmdzOwogCQkJZWxz
ZSAgLy8gZW5zdXJlIHRoYXQgY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoKSBiZWxvdyBjYW4gdXBk
YXRlIGFyZ3VtZW50cyB3aXRob3V0IGhhcm1pbmcgb3VyIGNhbGxlcjogKFRPRE86IGFsd2F5cyBj
b3B5IGJlZm9yZSB0aGUgbG9vcD8gb25seSBpbiAxLjg/KQogCQkJCVN5c3RlbS5hcnJheWNvcHko
YXJndW1lbnRzLCAwLCBhcmd1bWVudHM9bmV3IFR5cGVCaW5kaW5nW2FyZ0xlbmd0aF0sIDAsIGFy
Z0xlbmd0aCk7Ci0JCQltZXRob2QgPSBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcu
Y29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kLCBhcmd1bWVudHMsIHRoaXMsIGludm9jYXRp
b25TaXRlKTsKKwkJCW1ldGhvZCA9IFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5j
b21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2QsIGFyZ3VtZW50cywgdGhpcywgaW52b2NhdGlv
blNpdGUsIGluZmVyZW5jZUxldmVsKTsKIAkJCWlmIChtZXRob2QgPT0gbnVsbCkgcmV0dXJuIG51
bGw7IC8vIGluY29tcGF0aWJsZQogCQkJaWYgKCFtZXRob2QuaXNWYWxpZEJpbmRpbmcoKSkgcmV0
dXJuIG1ldGhvZDsgLy8gYm91bmQgY2hlY2sgaXNzdWUgaXMgdGFraW5nIHByZWNlZGVuY2UKIAkJ
fSBlbHNlIGlmIChnZW5lcmljVHlwZUFyZ3VtZW50cyAhPSBudWxsICYmIGNvbXBpbGVyT3B0aW9u
cy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV83KSB7CkBAIC03MTgs
NyArNzMxLDcgQEAgcHVibGljIGFic3RyYWN0IGNsYXNzIFNjb3BlIHsKIAkJCWlmIChDb21waWxl
ck9wdGlvbnMudG9sZXJhdGVJbGxlZ2FsQW1iaWd1b3VzVmFyYXJnc0ludm9jYXRpb24gJiYgY29t
cGlsZXJPcHRpb25zLmNvbXBsaWFuY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzcp
CiAJCQkJdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcyA9IGZhbHNlOwogCQl9Ci0JCWlmICgoY29t
cGF0aWJpbGl0eUxldmVsID0gbXlQYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwobWV0aG9kLCBh
cmd1bWVudHMsIHRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMsIGludm9jYXRpb25TaXRlKSkgPiBO
T1RfQ09NUEFUSUJMRSkgeworCQlpZiAoKGNvbXBhdGliaWxpdHlMZXZlbCA9IHBhcmFtZXRlckNv
bXBhdGliaWxpdHlMZXZlbDE4KG1ldGhvZCwgYXJndW1lbnRzLCB0aWVicmVha2luZ1ZhcmFyZ3NN
ZXRob2RzLCBpbnZvY2F0aW9uU2l0ZSkpID4gTk9UX0NPTVBBVElCTEUpIHsKIAkJCWlmIChjb21w
YXRpYmlsaXR5TGV2ZWwgPT0gVkFSQVJHU19DT01QQVRJQkxFKSB7CiAJCQkJVHlwZUJpbmRpbmcg
dmFyYXJnc0VsZW1lbnRUeXBlID0gbWV0aG9kLnBhcmFtZXRlcnNbbWV0aG9kLnBhcmFtZXRlcnMu
bGVuZ3RoIC0gMV0ubGVhZkNvbXBvbmVudFR5cGUoKTsKIAkJCQlpZiAodmFyYXJnc0VsZW1lbnRU
eXBlIGluc3RhbmNlb2YgUmVmZXJlbmNlQmluZGluZykgewpAQCAtNzQxLDExICs3NTQsNTggQEAg
cHVibGljIGFic3RyYWN0IGNsYXNzIFNjb3BlIHsKIAkJcmV0dXJuIG51bGw7IC8vIGluY29tcGF0
aWJsZQogCX0KIAotCS8vIEZJWE1FKHN0ZXBoYW4pOiBmaW5hbCBpbnRlZ3JhdGlvbiBpbnRvIHRo
ZSBjb2RlCi0JcHJpdmF0ZSBpbnQgbXlQYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwoTWV0aG9k
QmluZGluZyBtZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRzLCBib29sZWFuIHRpZWJyZWFr
aW5nVmFyYXJnc01ldGhvZHMsIEludm9jYXRpb25TaXRlIHNpdGUpIHsKKwlwcml2YXRlIGludCBw
YXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwxOChNZXRob2RCaW5kaW5nIG1ldGhvZCwgVHlwZUJp
bmRpbmdbXSBhcmd1bWVudHMsIGJvb2xlYW4gdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcywgSW52
b2NhdGlvblNpdGUgc2l0ZSkgewogCQlpZiAoc2l0ZSBpbnN0YW5jZW9mIEludm9jYXRpb24pIHsK
LQkJCWlmICgoKEludm9jYXRpb24pIHNpdGUpLmluZmVyZW5jZUtpbmQoKSA+IDApCisJCQlJbnZv
Y2F0aW9uIGludm9jYXRpb24gPSAoSW52b2NhdGlvbikgc2l0ZTsKKwkJCWlmIChpbnZvY2F0aW9u
LmluZmVyZW5jZUtpbmQoKSA+IDApCiAJCQkJcmV0dXJuIENPTVBBVElCTEU7IC8vIGluZmVyZW5j
ZSBpcyByZXNwb25zaWJsZSwgbm8gbmVlZCB0byByZWNoZWNrCisKKwkJCS8vIGNvbGxlY3QgaW5u
ZXIgaW52b2NhdGlvbnMgd2hlcmUgdGhlIG91dGVyIGRpZCBub3QgaW52b2x2ZSBhbnkgaW5mZXJl
bmNlOgorCQkJRXhwcmVzc2lvbltdIGludm9jYXRpb25Bcmd1bWVudHMgPSBpbnZvY2F0aW9uLmFy
Z3VtZW50cygpOworCQkJaWYgKGludm9jYXRpb25Bcmd1bWVudHMgIT0gbnVsbCkgeworCQkJCWlu
dCBhcmdMZW4gPSBpbnZvY2F0aW9uQXJndW1lbnRzLmxlbmd0aDsKKwkJCQlpbnQgaW5mZXJlbmNl
S2luZCA9IGludm9jYXRpb24uaW5mZXJlbmNlS2luZCgpOworCQkJCWZvciAoaW50IGkgPSAwOyBp
IDwgYXJnTGVuOyBpKyspIHsKKwkJCQkJRXhwcmVzc2lvbiBpbnZvY0FyZyA9IGludm9jYXRpb25B
cmd1bWVudHNbaV07CisJCQkJCWlmIChpbnZvY0FyZyBpbnN0YW5jZW9mIEludm9jYXRpb24gJiYg
aW52b2NBcmcucmVzb2x2ZWRUeXBlICE9IG51bGwpIHsgLy8gVE9ETyBhbnkgcG9seQorCQkJCQkJ
VHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSA9IEluZmVyZW5jZUNvbnRleHQxOC5nZXRQYXJhbWV0ZXIo
bWV0aG9kLnBhcmFtZXRlcnMsIGksIGZhbHNlKTsKKwkJCQkJCWlmICh0YXJnZXRUeXBlID09IG51
bGwgJiYgbWV0aG9kLmlzVmFyYXJncygpKSB7CisJCQkJCQkJaW5mZXJlbmNlS2luZCA9IEluZmVy
ZW5jZUNvbnRleHQxOC5DSEVDS19WQVJBUkc7CisJCQkJCQkJdGFyZ2V0VHlwZSA9IEluZmVyZW5j
ZUNvbnRleHQxOC5nZXRQYXJhbWV0ZXIobWV0aG9kLnBhcmFtZXRlcnMsIGksIHRydWUpOworCQkJ
CQkJfQorCQkJCQkJVHlwZUJpbmRpbmcgcmVzb2x2ZWRUeXBlID0gaW52b2NBcmcucmVzb2x2ZWRU
eXBlOyAKKwkJCQkJCWlmICghcmVzb2x2ZWRUeXBlLmlzQ29tcGF0aWJsZVdpdGgodGFyZ2V0VHlw
ZSwgdGhpcykpIHsKKwkJCQkJCQlJbnZvY2F0aW9uIGlubmVyUG9seSA9IChJbnZvY2F0aW9uKSBp
bnZvY0FyZzsKKwkJCQkJCQlJbmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4MTggPSBpbm5lclBvbHku
aW5mZXJlbmNlQ29udGV4dCgpOworCQkJCQkJCWlmIChpbmZDdHgxOCAhPSBudWxsKSB7CisJCQkJ
CQkJCS8vIG5vdCBkZXRlY3RlZCBhcyBjb21wYXRpYmxlLCBiZWNhdXNlIGluZmVyZW5jZSBzdGls
bCBuZWVkcyB0byBjb21wbGV0ZT8KKwkJCQkJCQkJTWV0aG9kQmluZGluZyBzb2x1dGlvbiA9IGlu
ZkN0eDE4LmdldEludm9jYXRpb25UeXBlSW5mZXJlbmNlU29sdXRpb24oaW5uZXJQb2x5LCB0YXJn
ZXRUeXBlKTsKKwkJCQkJCQkJaWYgKHNvbHV0aW9uICE9IG51bGwpIHsKKwkJCQkJCQkJCWlmIChz
b2x1dGlvbi5yZXR1cm5UeXBlICE9IG51bGwgJiYgc29sdXRpb24ucmV0dXJuVHlwZS5pc0NvbXBh
dGlibGVXaXRoKHRhcmdldFR5cGUsIHRoaXMpKQorCQkJCQkJCQkJCXJldHVybiBpbmZlcmVuY2VL
aW5kID09IEluZmVyZW5jZUNvbnRleHQxOC5DSEVDS19WQVJBUkcgPyBWQVJBUkdTX0NPTVBBVElC
TEUgOiBDT01QQVRJQkxFOworCQkJCQkJCQl9IGVsc2UgeworCQkJCQkJCQkJTWV0aG9kQmluZGlu
ZyBwcm9ibGVtTWV0aG9kID0gaW5mQ3R4MTguZ2V0UmV0dXJuUHJvYmxlbU1ldGhvZElmTmVlZGVk
KHRhcmdldFR5cGUsIGlubmVyUG9seS5iaW5kaW5nKCkpOworCQkJCQkJCQkJaWYgKHByb2JsZW1N
ZXRob2QgIT0gbnVsbCAmJiBwcm9ibGVtTWV0aG9kLmlzVmFsaWRCaW5kaW5nKCkpCisJCQkJCQkJ
CQkJcmV0dXJuIENPTVBBVElCTEU7CisJCQkJCQkJCQlyZXR1cm4gTk9UX0NPTVBBVElCTEU7CisJ
CQkJCQkJCX0KKwkJCQkJCQl9IGVsc2UgaWYgKGlubmVyUG9seSBpbnN0YW5jZW9mIEFsbG9jYXRp
b25FeHByZXNzaW9uKSB7CisJCQkJCQkJCS8vIG5vdCBkZXRlY3RlZCBhcyBjb21wYXRpYmxlLCBi
ZWNhdXNlIGl0cyBhIGRpYW1vbmQgd2hvc2UgdHlwZSBoYXNuJ3QgeWV0IGJlZW4gaW5mZXJyZWQ/
CisJCQkJCQkJCVR5cGVCaW5kaW5nW10gdHlwZUFyZ3VtZW50cyA9IHJlc29sdmVkVHlwZS50eXBl
QXJndW1lbnRzKCk7CisJCQkJCQkJCWlmICh0eXBlQXJndW1lbnRzICE9IG51bGwgJiYgdHlwZUFy
Z3VtZW50cy5sZW5ndGggPT0gMCkgeworCQkJCQkJCQkJQWxsb2NhdGlvbkV4cHJlc3Npb24gYWxs
b2MgPSAoQWxsb2NhdGlvbkV4cHJlc3Npb24pIGlubmVyUG9seTsKKwkJCQkJCQkJCWlmICgoYWxs
b2MudHlwZS5iaXRzICYgQVNUTm9kZS5Jc0RpYW1vbmQpICE9IDApIHsKKwkJCQkJCQkJCQkvLyBu
b3QteWV0LWluZmVycmVkIGRpYW1vbmQ6IGVyYXN1cmUgY29tcGF0aWJpbGl0eSBzaG91bGQgc3Vm
ZmljZSwgZGV0YWlsIHdpbGwgYmUgY2hlY2tlZCB1c2luZyBpbmZlcmVuY2UKKwkJCQkJCQkJCQlp
ZiAoaW52b2NBcmcucmVzb2x2ZWRUeXBlLmlzQ29tcGF0aWJsZVdpdGgodGFyZ2V0VHlwZS5lcmFz
dXJlKCksIHRoaXMpKQorCQkJCQkJCQkJCQlyZXR1cm4gQ09NUEFUSUJMRTsKKwkJCQkJCQkJCQly
ZXR1cm4gTk9UX0NPTVBBVElCTEU7CisJCQkJCQkJCQl9CisJCQkJCQkJCX0KKwkJCQkJCQl9CisJ
CQkJCQl9CisJCQkJCX0KKwkJCQl9CisJCQl9CiAJCX0KIAkJcmV0dXJuIHBhcmFtZXRlckNvbXBh
dGliaWxpdHlMZXZlbChtZXRob2QsIGFyZ3VtZW50cywgdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9k
cyk7CiAJfQpAQCAtMTA4Myw3ICsxMTQzLDcgQEAgcHVibGljIGFic3RyYWN0IGNsYXNzIFNjb3Bl
IHsKIAkJCS8vIGFyZ3VtZW50IHR5cGUgY29tcGF0aWJpbGl0eSBjaGVjawogCQkJZm9yIChpbnQg
aSA9IHN0YXJ0Rm91bmRTaXplOyBpIDwgZm91bmRTaXplOyBpKyspIHsKIAkJCQlNZXRob2RCaW5k
aW5nIG1ldGhvZEJpbmRpbmcgPSAoTWV0aG9kQmluZGluZykgZm91bmQuZWxlbWVudEF0KGkpOwot
CQkJCU1ldGhvZEJpbmRpbmcgY29tcGF0aWJsZU1ldGhvZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0
aG9kKG1ldGhvZEJpbmRpbmcsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlKTsKKwkJCQlN
ZXRob2RCaW5kaW5nIGNvbXBhdGlibGVNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZCht
ZXRob2RCaW5kaW5nLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSwgQVBQTElDQUJJTElU
WSk7CiAJCQkJaWYgKGNvbXBhdGlibGVNZXRob2QgIT0gbnVsbCkgewogCQkJCQlpZiAoY29tcGF0
aWJsZU1ldGhvZC5pc1ZhbGlkQmluZGluZygpKSB7CiAJCQkJCQlpZiAoY29uY3JldGVNYXRjaCAh
PSBudWxsICYmIGVudmlyb25tZW50KCkubWV0aG9kVmVyaWZpZXIoKS5hcmVNZXRob2RzQ29tcGF0
aWJsZShjb25jcmV0ZU1hdGNoLCBjb21wYXRpYmxlTWV0aG9kKSkKQEAgLTExMDcsNiArMTE2Nyw4
IEBAIHB1YmxpYyBhYnN0cmFjdCBjbGFzcyBTY29wZSB7CiAJCQkJCXJldHVybiBwcm9ibGVtTWV0
aG9kOyAvLyBjYW4gYmUgbnVsbAogCQkJCWNvbmNyZXRlTWF0Y2ggPSBjYW5kaWRhdGVzWzBdOwog
CQkJfQorCQkJLy8gMS44OiBHaXZlIGluZmVyZW5jZSBhIGNoYW5jZSB0byBwZXJmb3JtIG91dHN0
YW5kaW5nIHRhc2tzICgxOC41LjIpOgorCQkJY29uY3JldGVNYXRjaCA9IGluZmVySW52b2NhdGlv
blR5cGUoaW52b2NhdGlvblNpdGUsIGNvbmNyZXRlTWF0Y2gsIGFyZ3VtZW50VHlwZXMpOwogCQkJ
Y29tcGlsYXRpb25Vbml0U2NvcGUoKS5yZWNvcmRUeXBlUmVmZXJlbmNlcyhjb25jcmV0ZU1hdGNo
LnRocm93bkV4Y2VwdGlvbnMpOwogCQkJcmV0dXJuIGNvbmNyZXRlTWF0Y2g7CiAJCX0KQEAgLTEx
NzgsNyArMTI0MCw3IEBAIHB1YmxpYyBhYnN0cmFjdCBjbGFzcyBTY29wZSB7CiAJCQkJLy8gdGFy
Z2V0aW5nIGEgZ2VuZXJpYyBtZXRob2QgY291bGQgZmluZCBhbiBleGFjdCBtYXRjaCB3aXRoIHZh
cmlhYmxlIHJldHVybiB0eXBlCiAJCQkJaWYgKGludm9jYXRpb25TaXRlLmdlbmVyaWNUeXBlQXJn
dW1lbnRzKCkgIT0gbnVsbCkgewogCQkJCQkvLyBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZCguLikg
d2lsbCByZXR1cm4gYSBQb2x5bW9ycGhpY01ldGhvZEJpbmRpbmcgaWYgbmVlZGVkCi0JCQkJCWV4
YWN0TWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoZXhhY3RNZXRob2QsIGFyZ3VtZW50
VHlwZXMsIGludm9jYXRpb25TaXRlKTsKKwkJCQkJZXhhY3RNZXRob2QgPSBjb21wdXRlQ29tcGF0
aWJsZU1ldGhvZChleGFjdE1ldGhvZCwgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUsIEZV
TExfSU5GRVJFTkNFKTsKIAkJCQl9IGVsc2UgaWYgKChleGFjdE1ldGhvZC50YWdCaXRzICYgVGFn
Qml0cy5Bbm5vdGF0aW9uUG9seW1vcnBoaWNTaWduYXR1cmUpICE9IDApIHsKIAkJCQkJLy8gZ2Vu
ZXJhdGUgcG9seW1vcnBoaWMgbWV0aG9kCiAJCQkJCXJldHVybiB0aGlzLmVudmlyb25tZW50KCku
Y3JlYXRlUG9seW1vcnBoaWNNZXRob2QoZXhhY3RNZXRob2QsIGFyZ3VtZW50VHlwZXMpOwpAQCAt
MTU1NiwxMSArMTYxOCwyNSBAQCBwdWJsaWMgYWJzdHJhY3QgY2xhc3MgU2NvcGUgewogCQkJLy8g
YXJndW1lbnQgdHlwZSBjb21wYXRpYmlsaXR5IGNoZWNrCiAJCQlmb3IgKGludCBpID0gMDsgaSA8
IGZvdW5kU2l6ZTsgaSsrKSB7CiAJCQkJTWV0aG9kQmluZGluZyBtZXRob2RCaW5kaW5nID0gKE1l
dGhvZEJpbmRpbmcpIGZvdW5kLmVsZW1lbnRBdChpKTsKLQkJCQlNZXRob2RCaW5kaW5nIGNvbXBh
dGlibGVNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2RCaW5kaW5nLCBhcmd1
bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSk7CisJCQkJTWV0aG9kQmluZGluZyBjb21wYXRpYmxl
TWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kQmluZGluZywgYXJndW1lbnRU
eXBlcywgaW52b2NhdGlvblNpdGUsIEFQUExJQ0FCSUxJVFkpOwogCQkJCWlmIChjb21wYXRpYmxl
TWV0aG9kICE9IG51bGwpIHsKIAkJCQkJaWYgKGNvbXBhdGlibGVNZXRob2QuaXNWYWxpZEJpbmRp
bmcoKSkgewogCQkJCQkJaWYgKGZvdW5kU2l6ZSA9PSAxICYmIGNvbXBhdGlibGVNZXRob2QuY2Fu
QmVTZWVuQnkocmVjZWl2ZXJUeXBlLCBpbnZvY2F0aW9uU2l0ZSwgdGhpcykpIHsKIAkJCQkJCQkv
LyByZXR1cm4gdGhlIHNpbmdsZSB2aXNpYmxlIG1hdGNoIG5vdworLy8gPT09PSAxLjg6IEZpbmFs
aXplIHR5cGUgaW5mZXJlbmNlIG9mIGdlbmVyaWMgbWV0aG9kczogPT09PQorCQkJCQkJCWlmIChj
b21wYXRpYmxlTWV0aG9kIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5k
aW5nICYmIGludm9jYXRpb25TaXRlIGluc3RhbmNlb2YgUG9seVNpdGUpIHsKKwkJCQkJCQkJUGFy
YW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nIHBhcmFtZXRlcml6ZWRNZXRob2QgPSAoKFBh
cmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgY29tcGF0aWJsZU1ldGhvZCk7CisJCQkJ
CQkJCU1ldGhvZEJpbmRpbmcgaW1wcm92ZWQgPSBwYXJhbWV0ZXJpemVkTWV0aG9kLmluZmVySW52
b2NhdGlvblR5cGUoKFBvbHlTaXRlKSBpbnZvY2F0aW9uU2l0ZSwgYXJndW1lbnRUeXBlcyk7CisJ
CQkJCQkJCWlmIChpbXByb3ZlZCAhPSBudWxsKSB7CisJCQkJCQkJCQlpZiAoaW1wcm92ZWQuaXNW
YWxpZEJpbmRpbmcoKSkgeworCQkJCQkJCQkJCWNvbXBhdGlibGVNZXRob2QgPSBpbXByb3ZlZDsK
KwkJCQkJCQkJCX0gZWxzZSB7CisJCQkJCQkJCQkJcHJvYmxlbU1ldGhvZCA9IGltcHJvdmVkOwor
CQkJCQkJCQkJCWNvbnRpbnVlOworCQkJCQkJCQkJfQorCQkJCQkJCQl9CisJCQkJCQkJfQorLy8g
PT09PSAxLjggPT09PQogCQkJCQkJCWlmIChzZWFyY2hGb3JEZWZhdWx0QWJzdHJhY3RNZXRob2Qp
CiAJCQkJCQkJCXJldHVybiBmaW5kRGVmYXVsdEFic3RyYWN0TWV0aG9kKHJlY2VpdmVyVHlwZSwg
c2VsZWN0b3IsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlLCBjbGFzc0hpZXJhcmNoeVN0
YXJ0LCBmb3VuZCwgY29tcGF0aWJsZU1ldGhvZCk7CiAJCQkJCQkJdW5pdFNjb3BlLnJlY29yZFR5
cGVSZWZlcmVuY2VzKGNvbXBhdGlibGVNZXRob2QudGhyb3duRXhjZXB0aW9ucyk7CkBAIC0xNjU1
LDEwICsxNzMxLDEyIEBAIHB1YmxpYyBhYnN0cmFjdCBjbGFzcyBTY29wZSB7CiAJCQkJcmV0dXJu
IG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZyhjYW5kaWRhdGVzWzBdLCBjYW5kaWRhdGVzWzBdLnNl
bGVjdG9yLCBjYW5kaWRhdGVzWzBdLnBhcmFtZXRlcnMsIAogCQkJCQkJY2FuZGlkYXRlLmlzU3Rh
dGljKCkgJiYgY2FuZGlkYXRlLmRlY2xhcmluZ0NsYXNzLmlzSW50ZXJmYWNlKCkgPyBQcm9ibGVt
UmVhc29ucy5Ob25TdGF0aWNPckFsaWVuVHlwZVJlY2VpdmVyIDogUHJvYmxlbVJlYXNvbnMuTm90
VmlzaWJsZSk7CiAJCQljYXNlIDEgOgorCQkJCS8vIDEuODogR2l2ZSBpbmZlcmVuY2UgYSBjaGFu
Y2UgdG8gcGVyZm9ybSBvdXRzdGFuZGluZyB0YXNrcyAoMTguNS4yKToKKwkJCQljYW5kaWRhdGUg
PSBpbmZlckludm9jYXRpb25UeXBlKGludm9jYXRpb25TaXRlLCBjYW5kaWRhdGVzWzBdLCBhcmd1
bWVudFR5cGVzKTsKIAkJCQlpZiAoc2VhcmNoRm9yRGVmYXVsdEFic3RyYWN0TWV0aG9kKQotCQkJ
CQlyZXR1cm4gZmluZERlZmF1bHRBYnN0cmFjdE1ldGhvZChyZWNlaXZlclR5cGUsIHNlbGVjdG9y
LCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSwgY2xhc3NIaWVyYXJjaHlTdGFydCwgZm91
bmQsIGNhbmRpZGF0ZXNbMF0pOwotCQkJCXVuaXRTY29wZS5yZWNvcmRUeXBlUmVmZXJlbmNlcyhj
YW5kaWRhdGVzWzBdLnRocm93bkV4Y2VwdGlvbnMpOwotCQkJCXJldHVybiBjYW5kaWRhdGVzWzBd
OworCQkJCQlyZXR1cm4gZmluZERlZmF1bHRBYnN0cmFjdE1ldGhvZChyZWNlaXZlclR5cGUsIHNl
bGVjdG9yLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSwgY2xhc3NIaWVyYXJjaHlTdGFy
dCwgZm91bmQsIGNhbmRpZGF0ZSk7CisJCQkJdW5pdFNjb3BlLnJlY29yZFR5cGVSZWZlcmVuY2Vz
KGNhbmRpZGF0ZS50aHJvd25FeGNlcHRpb25zKTsKKwkJCQlyZXR1cm4gY2FuZGlkYXRlOwogCQkJ
ZGVmYXVsdCA6CiAJCQkJYnJlYWs7CiAJCX0KQEAgLTIyMDYsNyArMjI4NCw3IEBAIHB1YmxpYyBh
YnN0cmFjdCBjbGFzcyBTY29wZSB7CiAJCQlpZiAobWV0aG9kQmluZGluZyAhPSBudWxsICYmIG1l
dGhvZEJpbmRpbmcuY2FuQmVTZWVuQnkoaW52b2NhdGlvblNpdGUsIHRoaXMpKSB7CiAJCQkgICAg
Ly8gdGFyZ2V0aW5nIGEgbm9uIGdlbmVyaWMgY29uc3RydWN0b3Igd2l0aCB0eXBlIGFyZ3VtZW50
cyA/CiAJCQkgICAgaWYgKGludm9jYXRpb25TaXRlLmdlbmVyaWNUeXBlQXJndW1lbnRzKCkgIT0g
bnVsbCkKLQkJCSAgICAJbWV0aG9kQmluZGluZyA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1l
dGhvZEJpbmRpbmcsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlKTsKKwkJCSAgICAJbWV0
aG9kQmluZGluZyA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhvZEJpbmRpbmcsIGFyZ3Vt
ZW50VHlwZXMsIGludm9jYXRpb25TaXRlLCBGVUxMX0lORkVSRU5DRSk7CiAJCQkJcmV0dXJuIG1l
dGhvZEJpbmRpbmc7CiAJCQl9CiAJCQlNZXRob2RCaW5kaW5nW10gbWV0aG9kcyA9IHJlY2VpdmVy
VHlwZS5nZXRNZXRob2RzKFR5cGVDb25zdGFudHMuSU5JVCwgYXJndW1lbnRUeXBlcy5sZW5ndGgp
OwpAQCAtMjIyMCw3ICsyMjk4LDcgQEAgcHVibGljIGFic3RyYWN0IGNsYXNzIFNjb3BlIHsKIAkJ
CWludCBjb21wYXRpYmxlSW5kZXggPSAwOwogCQkJTWV0aG9kQmluZGluZyBwcm9ibGVtTWV0aG9k
ID0gbnVsbDsKIAkJCWZvciAoaW50IGkgPSAwLCBsZW5ndGggPSBtZXRob2RzLmxlbmd0aDsgaSA8
IGxlbmd0aDsgaSsrKSB7Ci0JCQkJTWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29t
cHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kc1tpXSwgYXJndW1lbnRUeXBlcywgaW52b2NhdGlv
blNpdGUpOworCQkJCU1ldGhvZEJpbmRpbmcgY29tcGF0aWJsZU1ldGhvZCA9IGNvbXB1dGVDb21w
YXRpYmxlTWV0aG9kKG1ldGhvZHNbaV0sIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlLCBB
UFBMSUNBQklMSVRZKTsKIAkJCQlpZiAoY29tcGF0aWJsZU1ldGhvZCAhPSBudWxsKSB7CiAJCQkJ
CWlmIChjb21wYXRpYmxlTWV0aG9kLmlzVmFsaWRCaW5kaW5nKCkpCiAJCQkJCQljb21wYXRpYmxl
W2NvbXBhdGlibGVJbmRleCsrXSA9IGNvbXBhdGlibGVNZXRob2Q7CkBAIC0yMjQyLDcgKzIzMjAs
MTAgQEAgcHVibGljIGFic3RyYWN0IGNsYXNzIFNjb3BlIHsKIAkJCQlpZiAobWV0aG9kLmNhbkJl
U2VlbkJ5KGludm9jYXRpb25TaXRlLCB0aGlzKSkKIAkJCQkJdmlzaWJsZVt2aXNpYmxlSW5kZXgr
K10gPSBtZXRob2Q7CiAJCQl9Ci0JCQlpZiAodmlzaWJsZUluZGV4ID09IDEpIHJldHVybiB2aXNp
YmxlWzBdOworCQkJaWYgKHZpc2libGVJbmRleCA9PSAxKSB7CisJCQkJLy8gMS44OiBHaXZlIGlu
ZmVyZW5jZSBhIGNoYW5jZSB0byBwZXJmb3JtIG91dHN0YW5kaW5nIHRhc2tzICgxOC41LjIpOgor
CQkJCXJldHVybiBpbmZlckludm9jYXRpb25UeXBlKGludm9jYXRpb25TaXRlLCB2aXNpYmxlWzBd
LCBhcmd1bWVudFR5cGVzKTsKKwkJCX0KIAkJCWlmICh2aXNpYmxlSW5kZXggPT0gMCkKIAkJCQly
ZXR1cm4gbmV3IFByb2JsZW1NZXRob2RCaW5kaW5nKAogCQkJCQljb21wYXRpYmxlWzBdLApAQCAt
MjUwNSw3ICsyNTg2LDcgQEAgcHVibGljIGFic3RyYWN0IGNsYXNzIFNjb3BlIHsKIAkJCQkJCQkJ
aWYgKGZvdW5kUHJvYmxlbSA9PSBudWxsKQogCQkJCQkJCQkJZm91bmRQcm9ibGVtID0gcG9zc2li
bGU7IC8vIGFuc3dlciBhcyBlcnJvciBjYXNlIG1hdGNoCiAJCQkJCQkJfSBlbHNlIGlmIChwb3Nz
aWJsZS5pc1N0YXRpYygpKSB7Ci0JCQkJCQkJCU1ldGhvZEJpbmRpbmcgY29tcGF0aWJsZU1ldGhv
ZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKHBvc3NpYmxlLCBhcmd1bWVudFR5cGVzLCBpbnZv
Y2F0aW9uU2l0ZSk7CisJCQkJCQkJCU1ldGhvZEJpbmRpbmcgY29tcGF0aWJsZU1ldGhvZCA9IGNv
bXB1dGVDb21wYXRpYmxlTWV0aG9kKHBvc3NpYmxlLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9u
U2l0ZSwgQVBQTElDQUJJTElUWSk7CiAJCQkJCQkJCWlmIChjb21wYXRpYmxlTWV0aG9kICE9IG51
bGwpIHsKIAkJCQkJCQkJCWlmIChjb21wYXRpYmxlTWV0aG9kLmlzVmFsaWRCaW5kaW5nKCkpIHsK
IAkJCQkJCQkJCQlpZiAoY29tcGF0aWJsZU1ldGhvZC5jYW5CZVNlZW5CeSh1bml0U2NvcGUuZlBh
Y2thZ2UpKSB7CkBAIC00MTgxLDcgKzQyNjIsOCBAQCBwdWJsaWMgYWJzdHJhY3QgY2xhc3MgU2Nv
cGUgewogCQkJCQkJCW1ldGhvZFRvVGVzdCA9IHBOZXh0Lm9yaWdpbmFsTWV0aG9kOwogCQkJCQkJ
fQogCQkJCQl9Ci0JCQkJCU1ldGhvZEJpbmRpbmcgYWNjZXB0YWJsZSA9IGNvbXB1dGVDb21wYXRp
YmxlTWV0aG9kKG1ldGhvZFRvVGVzdCwgdGllYnJlYWtNZXRob2QucGFyYW1ldGVycywgdGllQnJl
YWtJbnZvY2F0aW9uU2l0ZSwgbGV2ZWwgPT0gVkFSQVJHU19DT01QQVRJQkxFKTsKKwkJCQkJTWV0
aG9kQmluZGluZyBhY2NlcHRhYmxlID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kVG9U
ZXN0LCB0aWVicmVha01ldGhvZC5wYXJhbWV0ZXJzLAorCQkJCQkJCXRpZUJyZWFrSW52b2NhdGlv
blNpdGUsIElOVk9DQVRJT05fVFlQRSwgbGV2ZWwgPT0gVkFSQVJHU19DT01QQVRJQkxFKTsKIAkJ
CQkJLyogVGhlcmUgYXJlIDQgY2hvaWNlcyB0byBjb25zaWRlciB3aXRoIGN1cnJlbnQgJiBuZXh0
IDoKIAkJCQkJIGZvbyhCKSAmIGZvbyhBKSB3aGVyZSBCIGV4dGVuZHMgQQogCQkJCQkgMS4gdGhl
IDIgbWV0aG9kcyBhcmUgZXF1YWwgKGJvdGggYWNjZXB0IGVhY2ggb3RoZXJzIHBhcmFtZXRlcnMp
IC0+IHdhbnQgdG8gY29udGludWUKQEAgLTQyMDUsOCArNDI4NywxMCBAQCBwdWJsaWMgYWJzdHJh
Y3QgY2xhc3MgU2NvcGUgewogCQlpZiAoY291bnQgPT0gMSkgewogCQkJZm9yIChpbnQgaSA9IDA7
IGkgPCB2aXNpYmxlU2l6ZTsgaSsrKSB7CiAJCQkJaWYgKG1vcmVTcGVjaWZpY1tpXSAhPSBudWxs
KSB7Ci0JCQkJCWNvbXBpbGF0aW9uVW5pdFNjb3BlKCkucmVjb3JkVHlwZVJlZmVyZW5jZXModmlz
aWJsZVtpXS50aHJvd25FeGNlcHRpb25zKTsKLQkJCQkJcmV0dXJuIHZpc2libGVbaV07CisJCQkJ
CS8vIDEuODogR2l2ZSBpbmZlcmVuY2UgYSBjaGFuY2UgdG8gcGVyZm9ybSBvdXRzdGFuZGluZyB0
YXNrcyAoMTguNS4yKToKKwkJCQkJTWV0aG9kQmluZGluZyBjYW5kaWRhdGUgPSBpbmZlckludm9j
YXRpb25UeXBlKGludm9jYXRpb25TaXRlLCB2aXNpYmxlW2ldLCBhcmd1bWVudFR5cGVzKTsKKwkJ
CQkJY29tcGlsYXRpb25Vbml0U2NvcGUoKS5yZWNvcmRUeXBlUmVmZXJlbmNlcyhjYW5kaWRhdGUu
dGhyb3duRXhjZXB0aW9ucyk7CisJCQkJCXJldHVybiBjYW5kaWRhdGU7CiAJCQkJfQogCQkJfQog
CQl9IGVsc2UgaWYgKGNvdW50ID09IDApIHsKQEAgLTQzMjMsNyArNDQwNyw4IEBAIHB1YmxpYyBh
YnN0cmFjdCBjbGFzcyBTY29wZSB7CiAJCQkJaWYgKG1vc3RTcGVjaWZpY0V4Y2VwdGlvbnMgIT0g
bnVsbCAmJiBtb3N0U3BlY2lmaWNFeGNlcHRpb25zICE9IGN1cnJlbnQudGhyb3duRXhjZXB0aW9u
cykgewogCQkJCQlyZXR1cm4gbmV3IE1vc3RTcGVjaWZpY0V4Y2VwdGlvbk1ldGhvZEJpbmRpbmco
Y3VycmVudCwgbW9zdFNwZWNpZmljRXhjZXB0aW9ucyk7CiAJCQkJfQotCQkJCXJldHVybiBjdXJy
ZW50OworCQkJCS8vIDEuODogQmVmb3JlIHJldHVybmluZyBnaXZlIGluZmVyZW5jZSBhIGNoYW5j
ZSB0byBwZXJmb3JtIG91dHN0YW5kaW5nIHRhc2tzICgxOC41LjIpOgorCQkJCXJldHVybiBpbmZl
ckludm9jYXRpb25UeXBlKGludm9jYXRpb25TaXRlLCBjdXJyZW50LCBhcmd1bWVudFR5cGVzKTsK
IAkJCX0KIAkJfQogCkBAIC00NTU0LDcgKzQ2MzksNyBAQCBwdWJsaWMgYWJzdHJhY3QgY2xhc3Mg
U2NvcGUgewogCSAgIHRoYXQgY291bGQgaW5zdGVhZCBiZSBpbnZva2VkIHdpdGggaWRlbnRpY2Fs
IHJlc3VsdHMuIFJldHVybiBudWxsIGlmIG5vIGNvbXBhdGlibGUsIHZpc2libGUsIG1vc3Qgc3Bl
Y2lmaWMgbWV0aG9kCiAJICAgY291bGQgYmUgZm91bmQuIFRoaXMgbWV0aG9kIGlzIG1vZGVsZWQg
YWZ0ZXIgU2NvcGUuZ2V0Q29uc3RydWN0b3IgYW5kIFNjb3BlLmdldE1ldGhvZC4KIAkgKi8KLQlw
dWJsaWMgTWV0aG9kQmluZGluZyBnZXRTdGF0aWNGYWN0b3J5IChSZWZlcmVuY2VCaW5kaW5nIGFs
bG9jYXRpb25UeXBlLCBSZWZlcmVuY2VCaW5kaW5nIG9yaWdpbmFsRW5jbG9zaW5nVHlwZSwgVHlw
ZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzLCBmaW5hbCBJbnZvY2F0aW9uU2l0ZSBhbGxvY2F0aW9u
U2l0ZSkgeworCXB1YmxpYyBNZXRob2RCaW5kaW5nIGdldFN0YXRpY0ZhY3RvcnkgKFJlZmVyZW5j
ZUJpbmRpbmcgYWxsb2NhdGlvblR5cGUsIFJlZmVyZW5jZUJpbmRpbmcgb3JpZ2luYWxFbmNsb3Np
bmdUeXBlLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMsIGZpbmFsIEludm9jYXRpb24gYWxs
b2NhdGlvblNpdGUpIHsKIAkJVHlwZVZhcmlhYmxlQmluZGluZ1tdIGNsYXNzVHlwZVZhcmlhYmxl
cyA9IGFsbG9jYXRpb25UeXBlLnR5cGVWYXJpYWJsZXMoKTsKIAkJaW50IGNsYXNzVHlwZVZhcmlh
Ymxlc0FyaXR5ID0gY2xhc3NUeXBlVmFyaWFibGVzLmxlbmd0aDsKIAkJTWV0aG9kQmluZGluZ1td
IG1ldGhvZHMgPSBhbGxvY2F0aW9uVHlwZS5nZXRNZXRob2RzKFR5cGVDb25zdGFudHMuSU5JVCwg
YXJndW1lbnRUeXBlcy5sZW5ndGgpOwpAQCAtNDY3MCw3ICs0NzU1LDcgQEAgcHVibGljIGFic3Ry
YWN0IGNsYXNzIFNjb3BlIHsKIAkJTWV0aG9kQmluZGluZ1tdIGNvbXBhdGlibGUgPSBuZXcgTWV0
aG9kQmluZGluZ1tzZmldOwogCQlpbnQgY29tcGF0aWJsZUluZGV4ID0gMDsKIAkJZm9yIChpbnQg
aSA9IDA7IGkgPCBzZmk7IGkrKykgewotCQkJTWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9k
ID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2Qoc3RhdGljRmFjdG9yaWVzW2ldLCBhcmd1bWVudFR5
cGVzLCBhbGxvY2F0aW9uU2l0ZSk7CisJCQlNZXRob2RCaW5kaW5nIGNvbXBhdGlibGVNZXRob2Qg
PSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChzdGF0aWNGYWN0b3JpZXNbaV0sIGFyZ3VtZW50VHlw
ZXMsIGFsbG9jYXRpb25TaXRlLCBBUFBMSUNBQklMSVRZKTsKIAkJCWlmIChjb21wYXRpYmxlTWV0
aG9kICE9IG51bGwpIHsKIAkJCQlpZiAoY29tcGF0aWJsZU1ldGhvZC5pc1ZhbGlkQmluZGluZygp
KQogCQkJCQljb21wYXRpYmxlW2NvbXBhdGlibGVJbmRleCsrXSA9IGNvbXBhdGlibGVNZXRob2Q7
CkBAIC00NjkwLDYgKzQ3NzUsMTAgQEAgcHVibGljIGFic3RyYWN0IGNsYXNzIFNjb3BlIHsKIAkJ
aWYgKHZpc2libGVJbmRleCA9PSAwKSB7CiAJCQlyZXR1cm4gbnVsbDsKIAkJfQorCQlpZiAodmlz
aWJsZUluZGV4ID09IDEpIHsKKwkJCS8vIDEuODogR2l2ZSBpbmZlcmVuY2UgYSBjaGFuY2UgdG8g
cGVyZm9ybSBvdXRzdGFuZGluZyB0YXNrcyAoMTguNS4yKToKKwkJCXZpc2libGVbMF0gPSBpbmZl
ckludm9jYXRpb25UeXBlKGFsbG9jYXRpb25TaXRlLCB2aXNpYmxlWzBdLCBhcmd1bWVudFR5cGVz
KTsKKwkJfQogCQlyZXR1cm4gdmlzaWJsZUluZGV4ID09IDEgPyB2aXNpYmxlWzBdIDogbW9zdFNw
ZWNpZmljTWV0aG9kQmluZGluZyh2aXNpYmxlLCB2aXNpYmxlSW5kZXgsIGFyZ3VtZW50VHlwZXMs
IGFsbG9jYXRpb25TaXRlLCBhbGxvY2F0aW9uVHlwZSk7CiAJfQogCkBAIC00NzYyLDQgKzQ4NTEs
MjIgQEAgcHVibGljIGFic3RyYWN0IGNsYXNzIFNjb3BlIHsKIAkJCX0KIAkJfQogCX0KKworCS8q
KgorCSAqIEdpdmVuIGEgc2VsZWN0ZWQgYXBwbGliYWJsZSBtZXRob2QsIGNoZWNrIGlmIGl0IGhh
cyBhbiB1bmZpbmlzaGVkIEluZmVyZW5jZUNvbnRleHQxOCBhc3NvY2lhdGVkLgorCSAqIElmIHNv
IHBlcmZvcm0gdGhlIG91dHN0YW5kaW5nIEludm9jYXRpb24gVHlwZSBJbmZlcmVuY2UgYW5kIHJl
dHVybiB0aGUgaW1wcm92ZWQgbWV0aG9kLAorCSAqIG90aGVyd2lzZSByZXR1cm4gdGhlIGFwcGxp
Y2FibGUgbWV0aG9kIHVuY2hhbmdlZC4KKwkgKi8KKwlwcm90ZWN0ZWQgTWV0aG9kQmluZGluZyBp
bmZlckludm9jYXRpb25UeXBlKEludm9jYXRpb25TaXRlIGludm9jYXRpb25TaXRlLCBNZXRob2RC
aW5kaW5nIGFwcGxpY2FibGUsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcykgeworCQlpZiAo
YXBwbGljYWJsZSBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyAm
JiBpbnZvY2F0aW9uU2l0ZSBpbnN0YW5jZW9mIEludm9jYXRpb24pIHsKKwkJCVBhcmFtZXRlcml6
ZWRHZW5lcmljTWV0aG9kQmluZGluZyBwYXJhbWV0ZXJpemVkTWV0aG9kID0gKFBhcmFtZXRlcml6
ZWRHZW5lcmljTWV0aG9kQmluZGluZykgYXBwbGljYWJsZTsKKwkJCUluZmVyZW5jZUNvbnRleHQx
OCBpbmZDdHgxOCA9IHBhcmFtZXRlcml6ZWRNZXRob2QuaW5mZXJlbmNlQ29udGV4dDsKKwkJCWlm
IChpbmZDdHgxOCAhPSBudWxsKSB7CisJCQkJTWV0aG9kQmluZGluZyBpbXByb3ZlZCA9IHBhcmFt
ZXRlcml6ZWRNZXRob2QuaW5mZXJJbnZvY2F0aW9uVHlwZSgoSW52b2NhdGlvbikgaW52b2NhdGlv
blNpdGUsIGFyZ3VtZW50VHlwZXMpOworCQkJCWlmIChpbXByb3ZlZCAhPSBudWxsICYmIGltcHJv
dmVkLmlzVmFsaWRCaW5kaW5nKCkpCisJCQkJCWFwcGxpY2FibGUgPSBpbXByb3ZlZDsKKwkJCX0K
KwkJfQorCQlyZXR1cm4gYXBwbGljYWJsZTsKKwl9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9ldmFsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9ldmFsL0NvZGVTbmlwcGV0
U2NvcGUuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2V2YWwvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2V2YWwvQ29kZVNuaXBwZXRTY29wZS5qYXZhCmluZGV4IGJhMDRlNTAuLmQ1Njc3Nzgg
MTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2V2YWwvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2V2YWwvQ29kZVNuaXBwZXRTY29wZS5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2V2YWwvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2V2YWwvQ29kZVNuaXBwZXRTY29wZS5q
YXZhCkBAIC0xMyw2ICsxMyw4IEBACiAgKiAgICAgSUJNIENvcnBvcmF0aW9uIC0gaW5pdGlhbCBB
UEkgYW5kIGltcGxlbWVudGF0aW9uCiAgKiAgICAgSmVzcGVyIFMgTW9sbGVyIDxqZXNwZXJAc2Vs
c2thYmV0Lm9yZz4gLSBDb250cmlidXRpb25zIGZvcgogICoJCQkJCQkJCWJ1ZyAzNzg2NzQgLSAi
VGhlIG1ldGhvZCBjYW4gYmUgZGVjbGFyZWQgYXMgc3RhdGljIiBpcyB3cm9uZworICogICAgIFN0
ZXBoYW4gSGVycm1hbm4gLSBDb250cmlidXRpb24gZm9yCisgKgkJCQkJCQkJQnVnIDQyNDE2NyAt
IFsxLjhdIEZ1bGx5IGludGVncmF0ZSB0eXBlIGluZmVyZW5jZSB3aXRoIG92ZXJsb2FkIHJlc29s
dXRpb24gICAgIAogICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovCiBwYWNrYWdlIG9yZy5lY2xpcHNl
LmpkdC5pbnRlcm5hbC5ldmFsOwogCkBAIC0zOTgsNyArNDAwLDcgQEAgcHVibGljIE1ldGhvZEJp
bmRpbmcgZmluZE1ldGhvZEZvckFycmF5KEFycmF5QmluZGluZyByZWNlaXZlclR5cGUsIGNoYXJb
XSBzZWxlY3QKIAlpZiAobWV0aG9kQmluZGluZyA9PSBudWxsKQogCQlyZXR1cm4gbmV3IFByb2Js
ZW1NZXRob2RCaW5kaW5nKHNlbGVjdG9yLCBhcmd1bWVudFR5cGVzLCBQcm9ibGVtUmVhc29ucy5O
b3RGb3VuZCk7CiAJaWYgKG1ldGhvZEJpbmRpbmcuaXNWYWxpZEJpbmRpbmcoKSkgewotCSAgICBN
ZXRob2RCaW5kaW5nIGNvbXBhdGlibGVNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZCht
ZXRob2RCaW5kaW5nLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSk7CisJICAgIE1ldGhv
ZEJpbmRpbmcgY29tcGF0aWJsZU1ldGhvZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhv
ZEJpbmRpbmcsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlLCBTY29wZS5GVUxMX0lORkVS
RU5DRSk7CiAJICAgIGlmIChjb21wYXRpYmxlTWV0aG9kID09IG51bGwpCiAJCQlyZXR1cm4gbmV3
IFByb2JsZW1NZXRob2RCaW5kaW5nKG1ldGhvZEJpbmRpbmcsIHNlbGVjdG9yLCBhcmd1bWVudFR5
cGVzLCBQcm9ibGVtUmVhc29ucy5Ob3RGb3VuZCk7CiAJICAgIG1ldGhvZEJpbmRpbmcgPSBjb21w
YXRpYmxlTWV0aG9kOwpAQCAtNTQ0LDcgKzU0Niw3IEBAIHB1YmxpYyBNZXRob2RCaW5kaW5nIGdl
dENvbnN0cnVjdG9yKFJlZmVyZW5jZUJpbmRpbmcgcmVjZWl2ZXJUeXBlLCBUeXBlQmluZGluZ1td
CiAJTWV0aG9kQmluZGluZ1tdIGNvbXBhdGlibGUgPSBuZXcgTWV0aG9kQmluZGluZ1ttZXRob2Rz
Lmxlbmd0aF07CiAJaW50IGNvbXBhdGlibGVJbmRleCA9IDA7CiAJZm9yIChpbnQgaSA9IDAsIGxl
bmd0aCA9IG1ldGhvZHMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHsKLQkgICAgTWV0aG9kQmlu
ZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kc1tp
XSwgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUpOworCSAgICBNZXRob2RCaW5kaW5nIGNv
bXBhdGlibGVNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2RzW2ldLCBhcmd1
bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSwgU2NvcGUuQVBQTElDQUJJTElUWSk7CiAJCWlmIChj
b21wYXRpYmxlTWV0aG9kICE9IG51bGwpCiAJCQljb21wYXRpYmxlW2NvbXBhdGlibGVJbmRleCsr
XSA9IGNvbXBhdGlibGVNZXRob2Q7CiAJfQpAQCAtNTYwLDcgKzU2Miw4IEBAIHB1YmxpYyBNZXRo
b2RCaW5kaW5nIGdldENvbnN0cnVjdG9yKFJlZmVyZW5jZUJpbmRpbmcgcmVjZWl2ZXJUeXBlLCBU
eXBlQmluZGluZ1tdCiAJCX0KIAl9CiAJaWYgKHZpc2libGVJbmRleCA9PSAxKSB7Ci0JCXJldHVy
biB2aXNpYmxlWzBdOworCQkvLyAxLjg6IEdpdmUgaW5mZXJlbmNlIGEgY2hhbmNlIHRvIHBlcmZv
cm0gb3V0c3RhbmRpbmcgdGFza3MgKDE4LjUuMik6CisJCXJldHVybiBpbmZlckludm9jYXRpb25U
eXBlKGludm9jYXRpb25TaXRlLCB2aXNpYmxlWzBdLCBhcmd1bWVudFR5cGVzKTsKIAl9CiAJaWYg
KHZpc2libGVJbmRleCA9PSAwKSB7CiAJCXJldHVybiBuZXcgUHJvYmxlbU1ldGhvZEJpbmRpbmco
Y29tcGF0aWJsZVswXSwgVHlwZUNvbnN0YW50cy5JTklULCBjb21wYXRpYmxlWzBdLnBhcmFtZXRl
cnMsIFByb2JsZW1SZWFzb25zLk5vdFZpc2libGUpOwo=
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>238529</attachid>
            <date>2013-12-22 07:54:00 -0500</date>
            <delta_ts>2013-12-22 07:54:41 -0500</delta_ts>
            <desc>improved patch</desc>
            <filename>Bug_424167_v2.patch</filename>
            <type>text/plain</type>
            <size>130638</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNUeXBlVGVz
dC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xp
cHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0Lmph
dmEKaW5kZXggMTU3ODU0MS4uZmJmNTc2YiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0LmphdmEKQEAgLTQ5OTc4LDcgKzQ5OTc4LDcgQEAg
cHVibGljIHZvaWQgdGVzdDE0MzkoKSB7CiAJCQkiCSAgICAgICBeXl5eXG4iICsgCiAJCQkiTGlz
dCBpcyBhIHJhdyB0eXBlLiBSZWZlcmVuY2VzIHRvIGdlbmVyaWMgdHlwZSBMaXN0PEU+IHNob3Vs
ZCBiZSBwYXJhbWV0ZXJpemVkXG4iICsgCiAJCQkiLS0tLS0tLS0tLVxuIgotCQkJOiAvLyBMaW5l
IDc6IGluIDEuOCA8VD4gaXMgaW5mZXJlZCB0byA8bnVsbD4gPT4gbm90IGEgY2hlY2tlZCBleGNl
cHRpb24gCisJCQk6IC8vIDEuOCBpbmZlcnMgVCBpbiB0aGlzKChMaXN0KSBudWxsLCBudWxsKSB0
byBSdW50aW1lRXhjZXB0aW9uLCBoZW5jZSBubyBlcnJvciBoZXJlICgyLiBhYm92ZSkKIAkJCSIt
LS0tLS0tLS0tXG4iICsgCiAJCQkiMS4gV0FSTklORyBpbiBYLmphdmEgKGF0IGxpbmUgNylcbiIg
KyAKIAkJCSIJdGhpcygoTGlzdCkgbnVsbCwgbnVsbCk7XG4iICsgCkBAIC01MDIyMSw3ICs1MDIy
MSw2IEBAIHB1YmxpYyB2b2lkIHRlc3QxNDQ0KCkgewogCQkJIi0tLS0tLS0tLS1cbiIpOwogfQog
Ly9odHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MjYzMjE1IC0g
dmFyaWF0aW9uCi0vLyBGSVhNRSBqYXZhYzggZG9lc24ndCBmaW5kIHRoZSBlcnJvcgogcHVibGlj
IHZvaWQgdGVzdDE0NDUoKSB7CiAJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCiAJCQluZXcgU3RyaW5n
W10gewpAQCAtNTAyNDgsOCArNTAyNDcsOSBAQCBwdWJsaWMgdm9pZCB0ZXN0MTQ0NSgpIHsKIAkJ
CQkiCQluZXcgPElPRXhjZXB0aW9uPiBYKGwpe30uIDxJT0V4Y2VwdGlvbj4gZm9vKGwpO1xuIiAr
IAogCQkJCSIJfVxuIiArIAogCQkJCSJcbiIgKyAKLQkJCQkifVxuIiwvLy0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
CisJCQkJIn1cbiIsCiAJCQl9LAorCQkJKHRoaXMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxl
Q29uc3RhbnRzLkpESzFfOCA/CiAJCQkiLS0tLS0tLS0tLVxuIiArIAogCQkJIjEuIFdBUk5JTkcg
aW4gWC5qYXZhIChhdCBsaW5lIDgpXG4iICsgCiAJCQkiCXN0YXRpYyB2b2lkIGJhcihMaXN0IGwp
IHtcbiIgKyAKQEAgLTUwMzUwLDcgKzUwMzUwLDEwMCBAQCBwdWJsaWMgdm9pZCB0ZXN0MTQ0NSgp
IHsKIAkJCSIJbmV3IDxJT0V4Y2VwdGlvbj4gWChsKXt9LiA8SU9FeGNlcHRpb24+IGZvbyhsKTtc
biIgKyAKIAkJCSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBe
XG4iICsgCiAJCQkiVHlwZSBzYWZldHk6IFRoZSBleHByZXNzaW9uIG9mIHR5cGUgTGlzdCBuZWVk
cyB1bmNoZWNrZWQgY29udmVyc2lvbiB0byBjb25mb3JtIHRvIExpc3Q8SU9FeGNlcHRpb24+XG4i
ICsgCi0JCQkiLS0tLS0tLS0tLVxuIik7CisJCQkiLS0tLS0tLS0tLVxuIgorCQkJOiAvLyAxLjgg
aW5mZXJzIHR5cGUgcGFyYW1ldGVycyBpbiB0aHJvd3MgY2xhdXNlcyB0byBSdW50aW1lRXhjZXB0
aW9uLCBoZW5jZSBubyBlcnJvcnMKKwkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkiMS4gV0FSTklO
RyBpbiBYLmphdmEgKGF0IGxpbmUgOClcbiIgKyAKKwkJCSIJc3RhdGljIHZvaWQgYmFyKExpc3Qg
bCkge1xuIiArIAorCQkJIgkgICAgICAgICAgICAgICAgXl5eXlxuIiArIAorCQkJIkxpc3QgaXMg
YSByYXcgdHlwZS4gUmVmZXJlbmNlcyB0byBnZW5lcmljIHR5cGUgTGlzdDxFPiBzaG91bGQgYmUg
cGFyYW1ldGVyaXplZFxuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCSIyLiBXQVJOSU5H
IGluIFguamF2YSAoYXQgbGluZSA5KVxuIiArIAorCQkJIgluZXcgWChsKS5mb28obCk7XG4iICsg
CisJCQkiCV5eXl5eXl5eXG4iICsgCisJCQkiVHlwZSBzYWZldHk6IFVuY2hlY2tlZCBpbnZvY2F0
aW9uIFgoTGlzdCkgb2YgdGhlIGdlbmVyaWMgY29uc3RydWN0b3IgWChMaXN0PFQ+KSBvZiB0eXBl
IFhcbiIgKyAKKwkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkiMy4gV0FSTklORyBpbiBYLmphdmEg
KGF0IGxpbmUgOSlcbiIgKyAKKwkJCSIJbmV3IFgobCkuZm9vKGwpO1xuIiArIAorCQkJIgleXl5e
Xl5eXl5eXl5eXl5cbiIgKyAKKwkJCSJUeXBlIHNhZmV0eTogVW5jaGVja2VkIGludm9jYXRpb24g
Zm9vKExpc3QpIG9mIHRoZSBnZW5lcmljIG1ldGhvZCBmb28oTGlzdDxUPikgb2YgdHlwZSBYXG4i
ICsgCisJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJIjQuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBs
aW5lIDkpXG4iICsgCisJCQkiCW5ldyBYKGwpLmZvbyhsKTtcbiIgKyAKKwkJCSIJICAgICAgXlxu
IiArIAorCQkJIlR5cGUgc2FmZXR5OiBUaGUgZXhwcmVzc2lvbiBvZiB0eXBlIExpc3QgbmVlZHMg
dW5jaGVja2VkIGNvbnZlcnNpb24gdG8gY29uZm9ybSB0byBMaXN0PFJ1bnRpbWVFeGNlcHRpb24+
XG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIiArIAorCQkJIjUuIFdBUk5JTkcgaW4gWC5qYXZhIChh
dCBsaW5lIDkpXG4iICsgCisJCQkiCW5ldyBYKGwpLmZvbyhsKTtcbiIgKyAKKwkJCSIJICAgICAg
ICAgICAgIF5cbiIgKyAKKwkJCSJUeXBlIHNhZmV0eTogVGhlIGV4cHJlc3Npb24gb2YgdHlwZSBM
aXN0IG5lZWRzIHVuY2hlY2tlZCBjb252ZXJzaW9uIHRvIGNvbmZvcm0gdG8gTGlzdDxSdW50aW1l
RXhjZXB0aW9uPlxuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCSI2LiBXQVJOSU5HIGlu
IFguamF2YSAoYXQgbGluZSAxMSlcbiIgKyAKKwkJCSIJc3RhdGljIHZvaWQgYmF6KExpc3QgbCkg
dGhyb3dzIElPRXhjZXB0aW9uIHtcbiIgKyAKKwkJCSIJICAgICAgICAgICAgICAgIF5eXl5cbiIg
KyAKKwkJCSJMaXN0IGlzIGEgcmF3IHR5cGUuIFJlZmVyZW5jZXMgdG8gZ2VuZXJpYyB0eXBlIExp
c3Q8RT4gc2hvdWxkIGJlIHBhcmFtZXRlcml6ZWRcbiIgKyAKKwkJCSItLS0tLS0tLS0tXG4iICsg
CisJCQkiNy4gV0FSTklORyBpbiBYLmphdmEgKGF0IGxpbmUgMTIpXG4iICsgCisJCQkiCW5ldyA8
SU9FeGNlcHRpb24+IFgobCkuIDxJT0V4Y2VwdGlvbj4gZm9vKGwpO1xuIiArIAorCQkJIgleXl5e
Xl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCQkiVHlwZSBzYWZldHk6IFVuY2hlY2tlZCBpbnZv
Y2F0aW9uIFgoTGlzdCkgb2YgdGhlIGdlbmVyaWMgY29uc3RydWN0b3IgWChMaXN0PFQ+KSBvZiB0
eXBlIFhcbiIgKyAKKwkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkiOC4gV0FSTklORyBpbiBYLmph
dmEgKGF0IGxpbmUgMTIpXG4iICsgCisJCQkiCW5ldyA8SU9FeGNlcHRpb24+IFgobCkuIDxJT0V4
Y2VwdGlvbj4gZm9vKGwpO1xuIiArIAorCQkJIgleXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXl5eXlxuIiArIAorCQkJIlR5cGUgc2FmZXR5OiBVbmNoZWNrZWQgaW52b2Nh
dGlvbiBmb28oTGlzdCkgb2YgdGhlIGdlbmVyaWMgbWV0aG9kIGZvbyhMaXN0PFQ+KSBvZiB0eXBl
IFhcbiIgKyAKKwkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkiOS4gV0FSTklORyBpbiBYLmphdmEg
KGF0IGxpbmUgMTIpXG4iICsgCisJCQkiCW5ldyA8SU9FeGNlcHRpb24+IFgobCkuIDxJT0V4Y2Vw
dGlvbj4gZm9vKGwpO1xuIiArIAorCQkJIgkgICAgICAgICAgICAgICAgICAgIF5cbiIgKyAKKwkJ
CSJUeXBlIHNhZmV0eTogVGhlIGV4cHJlc3Npb24gb2YgdHlwZSBMaXN0IG5lZWRzIHVuY2hlY2tl
ZCBjb252ZXJzaW9uIHRvIGNvbmZvcm0gdG8gTGlzdDxJT0V4Y2VwdGlvbj5cbiIgKyAKKwkJCSIt
LS0tLS0tLS0tXG4iICsgCisJCQkiMTAuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDEyKVxu
IiArIAorCQkJIgluZXcgPElPRXhjZXB0aW9uPiBYKGwpLiA8SU9FeGNlcHRpb24+IGZvbyhsKTtc
biIgKyAKKwkJCSIJICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXlxu
IiArIAorCQkJIlR5cGUgc2FmZXR5OiBUaGUgZXhwcmVzc2lvbiBvZiB0eXBlIExpc3QgbmVlZHMg
dW5jaGVja2VkIGNvbnZlcnNpb24gdG8gY29uZm9ybSB0byBMaXN0PElPRXhjZXB0aW9uPlxuIiAr
IAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCSIxMS4gV0FSTklORyBpbiBYLmphdmEgKGF0IGxp
bmUgMTUpXG4iICsgCisJCQkiCVgoTGlzdCBsLCBsb25nIGwyKSB0aHJvd3MgSU9FeGNlcHRpb24g
e1xuIiArIAorCQkJIgkgIF5eXl5cbiIgKyAKKwkJCSJMaXN0IGlzIGEgcmF3IHR5cGUuIFJlZmVy
ZW5jZXMgdG8gZ2VuZXJpYyB0eXBlIExpc3Q8RT4gc2hvdWxkIGJlIHBhcmFtZXRlcml6ZWRcbiIg
KyAKKwkJCSItLS0tLS0tLS0tXG4iICsgCisJCQkiMTIuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBs
aW5lIDE2KVxuIiArIAorCQkJIgk8SU9FeGNlcHRpb24+IHRoaXMobCk7XG4iICsgCisJCQkiCSAg
ICAgICAgICAgICAgXl5eXl5eXl5cbiIgKyAKKwkJCSJUeXBlIHNhZmV0eTogVW5jaGVja2VkIGlu
dm9jYXRpb24gWChMaXN0KSBvZiB0aGUgZ2VuZXJpYyBjb25zdHJ1Y3RvciBYKExpc3Q8VD4pIG9m
IHR5cGUgWFxuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCSIxMy4gV0FSTklORyBpbiBY
LmphdmEgKGF0IGxpbmUgMTYpXG4iICsgCisJCQkiCTxJT0V4Y2VwdGlvbj4gdGhpcyhsKTtcbiIg
KyAKKwkJCSIJICAgICAgICAgICAgICAgICAgIF5cbiIgKyAKKwkJCSJUeXBlIHNhZmV0eTogVGhl
IGV4cHJlc3Npb24gb2YgdHlwZSBMaXN0IG5lZWRzIHVuY2hlY2tlZCBjb252ZXJzaW9uIHRvIGNv
bmZvcm0gdG8gTGlzdDxJT0V4Y2VwdGlvbj5cbiIgKyAKKwkJCSItLS0tLS0tLS0tXG4iICsgCisJ
CQkiMTQuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDE5KVxuIiArIAorCQkJIglzdGF0aWMg
dm9pZCBiYXoyKExpc3QgbCkgdGhyb3dzIElPRXhjZXB0aW9uIHtcbiIgKyAKKwkJCSIJICAgICAg
ICAgICAgICAgICBeXl5eXG4iICsgCisJCQkiTGlzdCBpcyBhIHJhdyB0eXBlLiBSZWZlcmVuY2Vz
IHRvIGdlbmVyaWMgdHlwZSBMaXN0PEU+IHNob3VsZCBiZSBwYXJhbWV0ZXJpemVkXG4iICsgCisJ
CQkiLS0tLS0tLS0tLVxuIiArIAorCQkJIjE1LiBXQVJOSU5HIGluIFguamF2YSAoYXQgbGluZSAy
MClcbiIgKyAKKwkJCSIJbmV3IDxJT0V4Y2VwdGlvbj4gWChsKXt9LiA8SU9FeGNlcHRpb24+IGZv
byhsKTtcbiIgKyAKKwkJCSIJXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCQkiVHlw
ZSBzYWZldHk6IFVuY2hlY2tlZCBpbnZvY2F0aW9uIFgoTGlzdCkgb2YgdGhlIGdlbmVyaWMgY29u
c3RydWN0b3IgWChMaXN0PFQ+KSBvZiB0eXBlIFhcbiIgKyAKKwkJCSItLS0tLS0tLS0tXG4iICsg
CisJCQkiMTYuIFdBUk5JTkcgaW4gWC5qYXZhIChhdCBsaW5lIDIwKVxuIiArIAorCQkJIgluZXcg
PElPRXhjZXB0aW9uPiBYKGwpe30uIDxJT0V4Y2VwdGlvbj4gZm9vKGwpO1xuIiArIAorCQkJIgle
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCisJCQki
VHlwZSBzYWZldHk6IFVuY2hlY2tlZCBpbnZvY2F0aW9uIGZvbyhMaXN0KSBvZiB0aGUgZ2VuZXJp
YyBtZXRob2QgZm9vKExpc3Q8VD4pIG9mIHR5cGUgWFxuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIg
KyAKKwkJCSIxNy4gV0FSTklORyBpbiBYLmphdmEgKGF0IGxpbmUgMjApXG4iICsgCisJCQkiCW5l
dyA8SU9FeGNlcHRpb24+IFgobCl7fS4gPElPRXhjZXB0aW9uPiBmb28obCk7XG4iICsgCisJCQki
CSAgICAgICAgICAgICAgICAgICAgXlxuIiArIAorCQkJIlR5cGUgc2FmZXR5OiBUaGUgZXhwcmVz
c2lvbiBvZiB0eXBlIExpc3QgbmVlZHMgdW5jaGVja2VkIGNvbnZlcnNpb24gdG8gY29uZm9ybSB0
byBMaXN0PElPRXhjZXB0aW9uPlxuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCSIxOC4g
V0FSTklORyBpbiBYLmphdmEgKGF0IGxpbmUgMjApXG4iICsgCisJCQkiCW5ldyA8SU9FeGNlcHRp
b24+IFgobCl7fS4gPElPRXhjZXB0aW9uPiBmb28obCk7XG4iICsgCisJCQkiCSAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXlxuIiArIAorCQkJIlR5cGUgc2FmZXR5
OiBUaGUgZXhwcmVzc2lvbiBvZiB0eXBlIExpc3QgbmVlZHMgdW5jaGVja2VkIGNvbnZlcnNpb24g
dG8gY29uZm9ybSB0byBMaXN0PElPRXhjZXB0aW9uPlxuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIK
KwkJCSkpOwogfQogLy9odHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/
aWQ9MjAyMzkzCiBwdWJsaWMgdm9pZCB0ZXN0MTQ0NigpIHsKZGlmZiAtLWdpdCBhL29yZy5lY2xp
cHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0
cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3RfMV83LmphdmEgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2Nv
cmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25UZXN0XzFfNy5q
YXZhCmluZGV4IGM4MzQyODEuLjEwZjhhNGQgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxl
ci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3RfMV83LmphdmEKKysrIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rl
c3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVzdF8xXzcuamF2YQpA
QCAtMjQ4LDcgKzI0OCw3IEBAIHB1YmxpYyB2b2lkIHRlc3QwMDFmKCkgewogCQkodGhpcy5jb21w
bGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84ID8KIAkJIlR5cGUgbWlzbWF0
Y2g6IGNhbm5vdCBjb252ZXJ0IGZyb20gWDxPYmplY3Q+LlgyPFN0cmluZz4gdG8gWDxTdHJpbmc+
LlgyPFN0cmluZz5cbiIKIAkJOgotCQkiQ2Fubm90IGluZmVyIHR5cGUgYXJndW1lbnRzIGZvciBY
Mjw+XG4iCisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVydCBmcm9tIFg8T2JqZWN0Pi5Y
MjxPYmplY3Q+IHRvIFg8U3RyaW5nPi5YMjxTdHJpbmc+XG4iCiAJCSkgKwogCQkiLS0tLS0tLS0t
LVxuIik7CiB9CkBAIC0yOTcsNyArMjk3LDcgQEAgcHVibGljIHZvaWQgdGVzdDAwMWcoKSB7CiAJ
CSh0aGlzLmNvbXBsaWFuY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzggPwogCQki
VHlwZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBYPE9iamVjdD4uWDI8SW50ZWdlcj4g
dG8gWDxTdHJpbmc+LlgyPEludGVnZXI+XG4iCiAJCToKLQkJIkNhbm5vdCBpbmZlciB0eXBlIGFy
Z3VtZW50cyBmb3IgWDI8PlxuIgorCQkiVHlwZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJv
bSBYPE9iamVjdD4uWDI8T2JqZWN0PiB0byBYPFN0cmluZz4uWDI8SW50ZWdlcj5cbiIKIAkJKSAr
CiAJCSItLS0tLS0tLS0tXG4iKTsKIH0KQEAgLTM1MCw3ICszNTAsNyBAQCBwdWJsaWMgdm9pZCB0
ZXN0MDAxaCgpIHsKIAkJKHRoaXMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRz
LkpESzFfOCA/CiAJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVydCBmcm9tIFg8T2JqZWN0
Pi5YMjxTdHJpbmc+IHRvIFg8U3RyaW5nPi5YMjxTdHJpbmc+XG4iCiAJCToKLQkJIkNhbm5vdCBp
bmZlciB0eXBlIGFyZ3VtZW50cyBmb3IgWDI8PlxuIgorCQkiVHlwZSBtaXNtYXRjaDogY2Fubm90
IGNvbnZlcnQgZnJvbSBYPE9iamVjdD4uWDI8T2JqZWN0PiB0byBYPFN0cmluZz4uWDI8U3RyaW5n
PlxuIgogCQkpICsKIAkJIi0tLS0tLS0tLS1cbiIgKyAKIAkJIjMuIEVSUk9SIGluIFguamF2YSAo
YXQgbGluZSA5KVxuIiArIApAQCAtNDUwLDcgKzQ1MCw3IEBAIHB1YmxpYyB2b2lkIHRlc3QwMDFp
KCkgewogCQkodGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84
ID8KIAkJIlR5cGUgbWlzbWF0Y2g6IGNhbm5vdCBjb252ZXJ0IGZyb20gWDxPYmplY3Q+LlgyPE9i
amVjdD4uWDIyPFg8U3RyaW5nPj4gdG8gWDxTdHJpbmc+LlgyPEludGVnZXI+LlgyMjxYPFN0cmlu
Zz4+XG4iIAogCQk6Ci0JCSJDYW5ub3QgaW5mZXIgdHlwZSBhcmd1bWVudHMgZm9yIFgyMjw+XG4i
CisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVydCBmcm9tIFg8T2JqZWN0Pi5YMjxPYmpl
Y3Q+LlgyMjxPYmplY3Q+IHRvIFg8U3RyaW5nPi5YMjxJbnRlZ2VyPi5YMjI8WDxTdHJpbmc+Plxu
IgogCQkpICsKIAkJIi0tLS0tLS0tLS1cbiIpOwogfQpAQCAtMTQwOCwyMCArMTQwOCwxMiBAQCBw
dWJsaWMgdm9pZCB0ZXN0MDAzNCgpIHsKIAkJIjYuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAx
OSlcbiIgKyAKIAkJIglYPEludGVnZXI+Llk8U3RyaW5nPiB5NiA9IG5ldyBYPD4oKS5uZXcgWTw+
KDEsXCJcIik7XG4iICsgCiAJCSIJICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXl5e
Xl5eXl5eXl5eXl5eXlxuIiArIAotCQkodGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVD
b25zdGFudHMuSkRLMV84ID8KLQkJIlR5cGUgbWlzbWF0Y2g6IGNhbm5vdCBjb252ZXJ0IGZyb20g
WDxPYmplY3Q+Llk8U3RyaW5nPiB0byBYPEludGVnZXI+Llk8U3RyaW5nPlxuIgotCQk6Ci0JCSJD
YW5ub3QgaW5mZXIgdHlwZSBhcmd1bWVudHMgZm9yIFk8PlxuIgotCQkpICsKKwkJIlR5cGUgbWlz
bWF0Y2g6IGNhbm5vdCBjb252ZXJ0IGZyb20gWDxPYmplY3Q+Llk8U3RyaW5nPiB0byBYPEludGVn
ZXI+Llk8U3RyaW5nPlxuIiArCiAJCSItLS0tLS0tLS0tXG4iICsgCiAJCSI3LiBFUlJPUiBpbiBY
LmphdmEgKGF0IGxpbmUgMjApXG4iICsgCiAJCSIJWDxJbnRlZ2VyPi5ZPFN0cmluZz4geTcgPSBu
ZXcgWDw+KCkubmV3IFk8PigxLDEpO1xuIiArIAogCQkiCSAgICAgICAgICAgICAgICAgICAgICAg
ICAgXl5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArCi0JCSh0aGlzLmNvbXBsaWFuY2VMZXZlbCA8
IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzggPwotCQkiVHlwZSBtaXNtYXRjaDogY2Fubm90IGNv
bnZlcnQgZnJvbSBYPE9iamVjdD4uWTxJbnRlZ2VyPiB0byBYPEludGVnZXI+Llk8U3RyaW5nPlxu
IgotCQk6Ci0JCSJDYW5ub3QgaW5mZXIgdHlwZSBhcmd1bWVudHMgZm9yIFk8PlxuIgotCQkpICsK
KwkJIlR5cGUgbWlzbWF0Y2g6IGNhbm5vdCBjb252ZXJ0IGZyb20gWDxPYmplY3Q+Llk8SW50ZWdl
cj4gdG8gWDxJbnRlZ2VyPi5ZPFN0cmluZz5cbiIgKwogCQkiLS0tLS0tLS0tLVxuIik7CiB9CiAv
LyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzQ1NTU5CkBA
IC0xNDY3LDExICsxNDU5LDcgQEAgcHVibGljIHZvaWQgdGVzdDAwMzUoKSB7CiAJCSIyLiBFUlJP
UiBpbiBYLmphdmEgKGF0IGxpbmUgMTgpXG4iICsgCiAJCSIJWDxJbnRlZ2VyPiB4NSA9IG5ldyBY
PD4oXCJcIixcIlwiLFwiXCIpO1xuIiArIAogCQkiCSAgICAgICAgICAgICAgICBeXl5eXl5eXl5e
Xl5eXl5eXlxuIiArIAotCQkodGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFu
dHMuSkRLMV84ID8KLQkJIlR5cGUgbWlzbWF0Y2g6IGNhbm5vdCBjb252ZXJ0IGZyb20gWDxTdHJp
bmc+IHRvIFg8SW50ZWdlcj5cbiIKLQkJOgotCQkiQ2Fubm90IGluZmVyIHR5cGUgYXJndW1lbnRz
IGZvciBYPD5cbiIKLQkJKSArCisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVydCBmcm9t
IFg8U3RyaW5nPiB0byBYPEludGVnZXI+XG4iICsKIAkJIi0tLS0tLS0tLS1cbiIgKyAKIAkJIjMu
IEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAyMClcbiIgKyAKIAkJIglYPEludGVnZXI+Llk8U3Ry
aW5nPiB5MSA9IG5ldyBYPD4oMSwxKS5uZXcgWTw+KCk7XG4iICsgCkBAIC0xNDkxLDIwICsxNDc5
LDEyIEBAIHB1YmxpYyB2b2lkIHRlc3QwMDM1KCkgewogCQkiNi4gRVJST1IgaW4gWC5qYXZhIChh
dCBsaW5lIDI1KVxuIiArIAogCQkiCVg8SW50ZWdlcj4uWTxTdHJpbmc+IHk2ID0gbmV3IFg8Pigp
Lm5ldyBZPD4oMSxcIlwiLDEpO1xuIiArIAogCQkiCSAgICAgICAgICAgICAgICAgICAgICAgICAg
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAotCQkodGhpcy5jb21wbGlhbmNlTGV2ZWwg
PCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84ID8KLQkJIlR5cGUgbWlzbWF0Y2g6IGNhbm5vdCBj
b252ZXJ0IGZyb20gWDxPYmplY3Q+Llk8SW50ZWdlcj4gdG8gWDxJbnRlZ2VyPi5ZPFN0cmluZz5c
biIKLQkJOgotCQkiQ2Fubm90IGluZmVyIHR5cGUgYXJndW1lbnRzIGZvciBZPD5cbiIKLQkJKSAr
CisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVydCBmcm9tIFg8T2JqZWN0Pi5ZPEludGVn
ZXI+IHRvIFg8SW50ZWdlcj4uWTxTdHJpbmc+XG4iICsKIAkJIi0tLS0tLS0tLS1cbiIgKyAKIAkJ
IjcuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSAyNilcbiIgKyAKIAkJIglYPEludGVnZXI+Llk8
U3RyaW5nPiB5NyA9IG5ldyBYPD4oKS5uZXcgWTw+KFwiXCIsXCJcIiwxKTtcbiIgKyAKIAkJIgkg
ICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsg
Ci0JCSh0aGlzLmNvbXBsaWFuY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzggPwot
CQkiVHlwZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBYPE9iamVjdD4uWTxJbnRlZ2Vy
PiB0byBYPEludGVnZXI+Llk8U3RyaW5nPlxuIiAKLQkJOgotCQkiQ2Fubm90IGluZmVyIHR5cGUg
YXJndW1lbnRzIGZvciBZPD5cbiIKLQkJKSArCisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29u
dmVydCBmcm9tIFg8T2JqZWN0Pi5ZPEludGVnZXI+IHRvIFg8SW50ZWdlcj4uWTxTdHJpbmc+XG4i
ICsKIAkJIi0tLS0tLS0tLS1cbiIpOwogfQogLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1
Z3Mvc2hvd19idWcuY2dpP2lkPTM0NTU1OQpAQCAtMTU0OCwxMSArMTUyOCw3IEBAIHB1YmxpYyB2
b2lkIHRlc3QwMDM2KCkgewogCQkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDE3KVxuIiAr
IAogCQkiCVg8SW50ZWdlcj4geDUgPSBuZXcgWDw+KFwiXCIsXCJcIixcIlwiKTtcbiIgKyAKIAkJ
IgkgICAgICAgICAgICAgICAgXl5eXl5eXl5eXl5eXl5eXl5cbiIgKyAKLQkJKHRoaXMuY29tcGxp
YW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCA/Ci0JCSJUeXBlIG1pc21hdGNo
OiBjYW5ub3QgY29udmVydCBmcm9tIFg8U3RyaW5nPiB0byBYPEludGVnZXI+XG4iIAotCQk6Ci0J
CSJDYW5ub3QgaW5mZXIgdHlwZSBhcmd1bWVudHMgZm9yIFg8PlxuIgotCQkpICsKKwkJIlR5cGUg
bWlzbWF0Y2g6IGNhbm5vdCBjb252ZXJ0IGZyb20gWDxTdHJpbmc+IHRvIFg8SW50ZWdlcj5cbiIg
KwogCQkiLS0tLS0tLS0tLVxuIiArIAogCQkiMy4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDE5
KVxuIiArIAogCQkiCVg8SW50ZWdlcj4uWTxTdHJpbmc+IHkxID0gbmV3IFg8PigxLDEpLm5ldyBZ
PD4oKTtcbiIgKyAKQEAgLTE1NzIsMjAgKzE1NDgsMTIgQEAgcHVibGljIHZvaWQgdGVzdDAwMzYo
KSB7CiAJCSI2LiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMjQpXG4iICsgCiAJCSIJWDxJbnRl
Z2VyPi5ZPFN0cmluZz4geTYgPSBuZXcgWDw+KCkubmV3IFk8PigxLFwiXCIsMSk7XG4iICsgCiAJ
CSIJICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4i
ICsgCi0JCSh0aGlzLmNvbXBsaWFuY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzgg
PwotCQkiVHlwZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBYPE9iamVjdD4uWTxJbnRl
Z2VyPiB0byBYPEludGVnZXI+Llk8U3RyaW5nPlxuIiAKLQkJOgotCQkiQ2Fubm90IGluZmVyIHR5
cGUgYXJndW1lbnRzIGZvciBZPD5cbiIKLQkJKSArCisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3Qg
Y29udmVydCBmcm9tIFg8T2JqZWN0Pi5ZPEludGVnZXI+IHRvIFg8SW50ZWdlcj4uWTxTdHJpbmc+
XG4iICsKIAkJIi0tLS0tLS0tLS1cbiIgKyAKIAkJIjcuIEVSUk9SIGluIFguamF2YSAoYXQgbGlu
ZSAyNSlcbiIgKyAKIAkJIglYPEludGVnZXI+Llk8U3RyaW5nPiB5NyA9IG5ldyBYPD4oKS5uZXcg
WTw+KFwiXCIsXCJcIiwxKTtcbiIgKyAKIAkJIgkgICAgICAgICAgICAgICAgICAgICAgICAgIF5e
Xl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsgCi0JCSh0aGlzLmNvbXBsaWFuY2VMZXZlbCA8
IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzggPwotCQkiVHlwZSBtaXNtYXRjaDogY2Fubm90IGNv
bnZlcnQgZnJvbSBYPE9iamVjdD4uWTxJbnRlZ2VyPiB0byBYPEludGVnZXI+Llk8U3RyaW5nPlxu
IiAKLQkJOgotCQkiQ2Fubm90IGluZmVyIHR5cGUgYXJndW1lbnRzIGZvciBZPD5cbiIKLQkJKSAr
CisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVydCBmcm9tIFg8T2JqZWN0Pi5ZPEludGVn
ZXI+IHRvIFg8SW50ZWdlcj4uWTxTdHJpbmc+XG4iICsKIAkJIi0tLS0tLS0tLS1cbiIpOwogfQog
Ly8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM0NTU1OQpA
QCAtMTY0NSwxMSArMTYxMyw3IEBAIHB1YmxpYyB2b2lkIHRlc3QwMDM1YSgpIHsKIAkJIjIuIEVS
Uk9SIGluIFguamF2YSAoYXQgbGluZSAxNClcbiIgKyAKIAkJIglYPEludGVnZXI+IHg1ID0gbmV3
IFg8PihcIlwiLFwiXCIsXCJcIik7XG4iICsgCiAJCSIJICAgICAgICAgICAgICAgIF5eXl5eXl5e
Xl5eXl5eXl5eXG4iICsgCi0JCSh0aGlzLmNvbXBsaWFuY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0
YW50cy5KREsxXzggPwotCQkiVHlwZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBYPFN0
cmluZz4gdG8gWDxJbnRlZ2VyPlxuIiAKLQkJOgotCQkiQ2Fubm90IGluZmVyIHR5cGUgYXJndW1l
bnRzIGZvciBYPD5cbiIKLQkJKSArCisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVydCBm
cm9tIFg8U3RyaW5nPiB0byBYPEludGVnZXI+XG4iICsKIAkJIi0tLS0tLS0tLS1cbiIpOwogfQog
Ly8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM0NTU1OQpA
QCAtMTY4MiwxMSArMTY0Niw3IEBAIHB1YmxpYyB2b2lkIHRlc3QwMDM2YSgpIHsKIAkJIjIuIEVS
Uk9SIGluIFguamF2YSAoYXQgbGluZSAxMylcbiIgKyAKIAkJIglYPEludGVnZXI+IHg1ID0gbmV3
IFg8PihcIlwiLFwiXCIsXCJcIik7XG4iICsgCiAJCSIJICAgICAgICAgICAgICAgIF5eXl5eXl5e
Xl5eXl5eXl5eXG4iICsgCi0JCSh0aGlzLmNvbXBsaWFuY2VMZXZlbCA8IENsYXNzRmlsZUNvbnN0
YW50cy5KREsxXzggPwotCQkiVHlwZSBtaXNtYXRjaDogY2Fubm90IGNvbnZlcnQgZnJvbSBYPFN0
cmluZz4gdG8gWDxJbnRlZ2VyPlxuIiAKLQkJOgotCQkiQ2Fubm90IGluZmVyIHR5cGUgYXJndW1l
bnRzIGZvciBYPD5cbiIKLQkJKSArCisJCSJUeXBlIG1pc21hdGNoOiBjYW5ub3QgY29udmVydCBm
cm9tIFg8U3RyaW5nPiB0byBYPEludGVnZXI+XG4iICsKIAkJIi0tLS0tLS0tLS1cbiIpOwogfQog
Ly8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM0NTU1OQpA
QCAtMTgyNCwxMSArMTc4NCw3IEBAIHB1YmxpYyB2b2lkIHRlc3QwMDQ0KCkgewogCQkiMS4gRVJS
T1IgaW4gWC5qYXZhIChhdCBsaW5lIDcpXG4iICsgCiAJCSIJWDxTdHJpbmc+Llk8U3RyaW5nPiB4
ID0gbmV3IFg8PigpLm5ldyBZPD4oXCJcIixcIlwiKTtcbiIgKyAKIAkJIgkgICAgICAgICAgICAg
ICAgICAgICAgICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5cbiIgKyAKLQkJKHRoaXMuY29tcGxp
YW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCA/Ci0JCSJUeXBlIG1pc21hdGNo
OiBjYW5ub3QgY29udmVydCBmcm9tIFg8T2JqZWN0Pi5ZPFN0cmluZz4gdG8gWDxTdHJpbmc+Llk8
U3RyaW5nPlxuIgotCQk6Ci0JCSJDYW5ub3QgaW5mZXIgdHlwZSBhcmd1bWVudHMgZm9yIFk8Plxu
IgotCQkpICsKKwkJIlR5cGUgbWlzbWF0Y2g6IGNhbm5vdCBjb252ZXJ0IGZyb20gWDxPYmplY3Q+
Llk8U3RyaW5nPiB0byBYPFN0cmluZz4uWTxTdHJpbmc+XG4iICsKIAkJIi0tLS0tLS0tLS1cbiIp
OwogfQogLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM0
NTk2OApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3Jj
L29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NS
ZWdyZXNzaW9uVGVzdF8xXzguamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBp
bGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dl
bmVyaWNzUmVncmVzc2lvblRlc3RfMV84LmphdmEKaW5kZXggZDVkY2FiNS4uODBmYmQ1YiAxMDA2
NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xp
cHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9u
VGVzdF8xXzguamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmlj
c1JlZ3Jlc3Npb25UZXN0XzFfOC5qYXZhCkBAIC0xOSw3ICsxOSw3IEBAIGltcG9ydCBqdW5pdC5m
cmFtZXdvcmsuVGVzdDsKIHB1YmxpYyBjbGFzcyBHZW5lcmljc1JlZ3Jlc3Npb25UZXN0XzFfOCBl
eHRlbmRzIEFic3RyYWN0UmVncmVzc2lvblRlc3QgewogCiBzdGF0aWMgewotLy8JVEVTVFNfTkFN
RVMgPSBuZXcgU3RyaW5nW10geyAidGVzdEJ1ZzQyNDAzOCIgfTsKKy8vCVRFU1RTX05BTUVTID0g
bmV3IFN0cmluZ1tdIHsgInRlc3RCdWc0MTQ2MzEiIH07CiAvLwlURVNUU19OVU1CRVJTID0gbmV3
IGludFtdIHsgNDAsIDQxLCA0MywgNDUsIDYzLCA2NCB9OwogLy8JVEVTVFNfUkFOR0UgPSBuZXcg
aW50W10geyAxMSwgLTEgfTsKIH0KQEAgLTIzMCw0ICsyMzAsNjUgQEAgcHVibGljIHZvaWQgdGVz
dEJ1ZzQyMzUwNCgpIHsKIAkJCSJ9XG4iCiAJCX0pOwogfQorLy8gaHR0cHM6Ly9idWdzLmVjbGlw
c2Uub3JnLzQyMDUyNSAtIFsxLjhdIFtjb21waWxlcl0gSW5jb3JyZWN0IGVycm9yICJUaGUgdHlw
ZSBJbnRlZ2VyIGRvZXMgbm90IGRlZmluZSBzdW0oT2JqZWN0LCBPYmplY3QpIHRoYXQgaXMgYXBw
bGljYWJsZSBoZXJlIgorcHVibGljIHZvaWQgX3Rlc3RCdWc0MjA1MjUoKSB7CisJcnVuQ29uZm9y
bVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJCSJpbXBvcnQgamF2YS51
dGlsLkFycmF5TGlzdDtcbiIgKyAKKwkJCSJpbXBvcnQgamF2YS51dGlsLkxpc3Q7XG4iICsgCisJ
CQkiaW1wb3J0IGphdmEudXRpbC5jb25jdXJyZW50LkNvbXBsZXRhYmxlRnV0dXJlO1xuIiArIAor
CQkJImltcG9ydCBqYXZhLnV0aWwuY29uY3VycmVudC5FeGVjdXRpb25FeGNlcHRpb247XG4iICsK
KwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCSIJdm9pZCB0ZXN0KExpc3Q8Q29tcGxldGFi
bGVGdXR1cmU8SW50ZWdlcj4+IGZ1dHVyZXMpIHtcbiIgKyAKKwkJCSIJCUNvbXBsZXRhYmxlRnV0
dXJlLmFsbE9mKGZ1dHVyZXMudG9BcnJheShuZXcgQ29tcGxldGFibGVGdXR1cmU8Pz5bXXt9KSku
dGhlbkFwcGx5QXN5bmMoIChWb2lkIHYpIC0+IHtcbiIgKyAKKwkJCSIJCQlJbnRlZ2VyIGZpbmFs
UmVzdWx0ID0gZnV0dXJlcy5zdHJlYW0oKS5tYXAoIChDb21wbGV0YWJsZUZ1dHVyZTxJbnRlZ2Vy
PiBmKSAtPiB7XG4iICsgCisJCQkiCQkJCXRyeSB7XG4iICsgCisJCQkiCQkJCQlyZXR1cm4gZi5n
ZXQoKTtcbiIgKyAKKwkJCSIJCQkJfSBjYXRjaCAoSW50ZXJydXB0ZWRFeGNlcHRpb24gfCBFeGVj
dXRpb25FeGNlcHRpb24gZSkge1xuIiArIAorCQkJIgkJCQkJcmV0dXJuIDA7XG4iICsgCisJCQki
CQkJCX1cbiIgKyAKKwkJCSIJCQl9KS5yZWR1Y2UoMCwgSW50ZWdlcjo6c3VtKTtcbiIgKyAKKwkJ
CSIJCQlcbiIgKyAKKwkJCSIJCQlsb2coXCJmaW5hbCByZXN1bHQgaXMgXCIgKyBmaW5hbFJlc3Vs
dCk7XG4iICsgCisJCQkiCQkJaWYgKGZpbmFsUmVzdWx0ICE9IDUwKXtcbiIgKyAKKwkJCSIJCQkJ
dGhyb3cgbmV3IFJ1bnRpbWVFeGNlcHRpb24oXCJGQUlMRURcIik7XG4iICsgCisJCQkiCQkJfSBl
bHNle1xuIiArIAorCQkJIgkJCQlsb2coXCJTVUNDRVNTXCIpO1xuIiArIAorCQkJIgkJCX1cbiIg
KyAKKwkJCSIJCQlcbiIgKyAKKwkJCSIJCQlyZXR1cm4gbnVsbDtcbiIgKyAKKwkJCSIJCX0pO1xu
IiArIAorCQkJIlxuIiArIAorCQkJIgl9XG4iICsKKwkJCSIJdm9pZCBsb2coU3RyaW5nIG1zZykg
e31cbiIgKworCQkJIn1cbiIKKwkJfSk7Cit9CisKK3B1YmxpYyB2b2lkIHRlc3RCdWc0MjQ0MTUo
KSB7CisJcnVuQ29uZm9ybVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiWC5qYXZhIiwKKwkJ
CSJcbiIgKyAKKwkJCSJpbXBvcnQgamF2YS51dGlsLkFycmF5TGlzdDtcbiIgKyAKKwkJCSJpbXBv
cnQgamF2YS51dGlsLkNvbGxlY3Rpb247XG4iICsgCisJCQkiXG4iICsgCisJCQkiaW50ZXJmYWNl
IEZ1bmN0aW9uYWw8VD4ge1xuIiArIAorCQkJIiAgIFQgYXBwbHkoKTtcbiIgKyAKKwkJCSJ9XG4i
ICsgCisJCQkiXG4iICsgCisJCQkiY2xhc3MgWCB7XG4iICsgCisJCQkiICAgIHZvaWQgZm9vKE9i
amVjdCBvKSB7IH1cbiIgKyAKKwkJCSJcbiIgKyAKKwkJCSIJPFEgZXh0ZW5kcyBDb2xsZWN0aW9u
PD8+PiBRIGdvbyhGdW5jdGlvbmFsPFE+IHMpIHtcbiIgKyAKKwkJCSIJCXJldHVybiBudWxsO1xu
IiArIAorCQkJIgl9IFxuIiArIAorCQkJIlxuIiArIAorCQkJIiAgICB2b2lkIHRlc3QoKSB7XG4i
ICsgCisJCQkiICAgICAgICBmb28oZ29vKEFycmF5TGlzdDxTdHJpbmc+OjpuZXcpKTtcbiIgKyAK
KwkJCSIgICAgfVxuIiArIAorCQkJIn1cbiIKKwkJfSk7Cit9CiB9CmRpZmYgLS1naXQgYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9MYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YSBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29y
ZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0xhbWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCmlu
ZGV4IGMwYWUzNzUuLjdjZDZiMTIzIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50
ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVn
cmVzc2lvbi9MYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGls
ZXIvcmVncmVzc2lvbi9MYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YQpAQCAtMjUsNyArMjUsNyBA
QCBpbXBvcnQganVuaXQuZnJhbWV3b3JrLlRlc3Q7CiBwdWJsaWMgY2xhc3MgTGFtYmRhRXhwcmVz
c2lvbnNUZXN0IGV4dGVuZHMgQWJzdHJhY3RSZWdyZXNzaW9uVGVzdCB7CiAKIHN0YXRpYyB7Ci0v
LwlURVNUU19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7ICJ0ZXN0UmVmZXJlbmNlRXhwcmVzc2lvbklu
ZmVyZW5jZTNhIn07CisvLwlURVNUU19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7ICJ0ZXN0UmVmZXJl
bmNlRXhwcmVzc2lvbkluZmVyZW5jZTEifTsKIC8vCVRFU1RTX05VTUJFUlMgPSBuZXcgaW50W10g
eyA1MCB9OwogLy8JVEVTVFNfUkFOR0UgPSBuZXcgaW50W10geyAxMSwgLTEgfTsKIH0KZGlmZiAt
LWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBz
ZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRhRXhwcmVz
c2lvbnNUZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMv
b3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OZWdhdGl2ZUxh
bWJkYUV4cHJlc3Npb25zVGVzdC5qYXZhCmluZGV4IDdiYzg2ZWEuLjFiNTlhMGEgMTAwNjQ0Ci0t
LSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9q
ZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL05lZ2F0aXZlTGFtYmRhRXhwcmVzc2lv
bnNUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3Jj
L29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTmVnYXRpdmVM
YW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YQpAQCAtNTc0NiwxMyArNTc0NiwxMSBAQCBwdWJsaWMg
dm9pZCB0ZXN0NDAxOTM5YSgpIHsKIAkJCQkiLS0tLS0tLS0tLVxuIiArIAogCQkJCSIyLiBFUlJP
UiBpbiBYLmphdmEgKGF0IGxpbmUgOClcbiIgKyAKIAkJCQkiCWZvbygoKS0+eyBpZiAoMSA9PSAy
KSB0aHJvdyBuZXcgUnVudGltZUV4Y2VwdGlvbigpOyB9KTtcbiIgKyAKLQkJCQkiCSAgICBeXl5e
XG4iICsgCi0JCQkJIlRoaXMgbWV0aG9kIG11c3QgcmV0dXJuIGEgcmVzdWx0IG9mIHR5cGUgaW50
XG4iICsgCi0JCQkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJCQkiMy4gV0FSTklORyBpbiBYLmphdmEg
KGF0IGxpbmUgOClcbiIgKyAKLQkJCQkiCWZvbygoKS0+eyBpZiAoMSA9PSAyKSB0aHJvdyBuZXcg
UnVudGltZUV4Y2VwdGlvbigpOyB9KTtcbiIgKyAKLQkJCQkiCSAgICAgICAgICAgICAgICAgICAg
ICBeXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXl5eXlxuIiArIAotCQkJCSJEZWFkIGNvZGVcbiIg
KyAKKwkJCQkiCV5eXlxuIiArIAorCQkJCSJUaGUgbWV0aG9kIGZvbyhJKSBpbiB0aGUgdHlwZSBY
IGlzIG5vdCBhcHBsaWNhYmxlIGZvciB0aGUgYXJndW1lbnRzICgoKSAtPiB7XG4iICsgCisJCQkJ
IiAgaWYgKCgxID09IDIpKVxuIiArIAorCQkJCSIgICAgICB0aHJvdyBuZXcgUnVudGltZUV4Y2Vw
dGlvbigpO1xuIiArIAorCQkJCSJ9KVxuIiArIAogCQkJCSItLS0tLS0tLS0tXG4iKTsKIH0KIC8v
IGh0dHBzOi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00MDE5MzksIFsx
LjhdW2NvbXBpbGVyXSBJbmNvcnJlY3Qgc2hhcGUgYW5hbHlzaXMgbGVhZHMgdG8gbWV0aG9kIHJl
c29sdXRpb24gZmFpbHVyZSAuCkBAIC03ODA0LDEyICs3ODAyLDcgQEAgcHVibGljIHZvaWQgdGVz
dDQyMzEyOWIoKSB7CiAJCQkJCSJ9XG4iCiAJCQl9LAogCQkJIi0tLS0tLS0tLS1cbiIgKyAKLQkJ
CSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgOClcbiIgKyAKLQkJCSIJQ29sbGVjdGlvbnMu
c29ydChuZXcgQXJyYXlMaXN0PFg+KEFycmF5cy5hc0xpc3QobmV3IFgoKSwgbmV3IFgoKSwgbmV3
IFgoKSkpLFxuIiArIAotCQkJIgkgICAgICAgICAgICBeXl5eXG4iICsgCi0JCQkiVGhlIG1ldGhv
ZCBzb3J0KExpc3Q8VD4sIENvbXBhcmF0b3I8PyBzdXBlciBUPikgaW4gdGhlIHR5cGUgQ29sbGVj
dGlvbnMgaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKEFycmF5TGlzdDxYPiwg
Q29tcGFyYXRvcjxYPilcbiIgKyAKLQkJCSItLS0tLS0tLS0tXG4iICsgCi0JCQkiMi4gRVJST1Ig
aW4gWC5qYXZhIChhdCBsaW5lIDEyKVxuIiArIAorCQkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQg
bGluZSAxMilcbiIgKyAKIAkJCSIJfVxuIiArIAogCQkJIgleXG4iICsgCiAJCQkiU3ludGF4IGVy
cm9yIG9uIHRva2VuIFwifVwiLCBkZWxldGUgdGhpcyB0b2tlblxuIiArIApAQCAtNzgxOSw0ICs3
ODEyLDQgQEAgcHVibGljIHZvaWQgdGVzdDQyMzEyOWIoKSB7CiBwdWJsaWMgc3RhdGljIENsYXNz
IHRlc3RDbGFzcygpIHsKIAlyZXR1cm4gTmVnYXRpdmVMYW1iZGFFeHByZXNzaW9uc1Rlc3QuY2xh
c3M7CiB9Ci19ClwgTm8gbmV3bGluZSBhdCBlbmQgb2YgZmlsZQorfQpkaWZmIC0tZ2l0IGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3Jl
L3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vT3ZlcmxvYWRSZXNvbHV0aW9uVGVzdDguamF2YSBi
L29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQv
Y29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL092ZXJsb2FkUmVzb2x1dGlvblRlc3Q4Lmph
dmEKaW5kZXggNjRhMzQ2YS4uZTM5MGZiMCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vT3ZlcmxvYWRSZXNvbHV0aW9uVGVzdDguamF2YQorKysgYi9vcmcuZWNsaXBz
ZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMv
Y29tcGlsZXIvcmVncmVzc2lvbi9PdmVybG9hZFJlc29sdXRpb25UZXN0OC5qYXZhCkBAIC0xMjQs
NiArMTI0LDcgQEAgcHVibGljIHZvaWQgdGVzdDAwMygpIHsKIAkJCSJnb28oSilcbiIgKwogCQkJ
ImdvbyhKKSIpOwogfQorLy8gRkFJTCBjYW5ub3QgZGV0ZWN0IGVycm9ycyBhZ2FpbnN0IDJuZCBh
bmQgM3JkIGxhbWJkYSwgYmVjYXVzZSBvZiBlbmNsb3NpbmdTY29wZXNIYXZlRXJyb3JzKCkKIHB1
YmxpYyB2b2lkIHRlc3QwMDQoKSB7CiAJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCiAJCQluZXcgU3Ry
aW5nW10gewpAQCAtMTUxLDIxICsxNTIsMjkgQEAgcHVibGljIHZvaWQgdGVzdDAwNCgpIHsKIAkJ
CQkiCX1cbiIgKwogCQkJCSJ9XG4iLAogCQkJfSwKKwkJCS8vIG5vbmUgb2YgdGhlIGxhbWJkYXMg
aXMgY29tcGF0aWJsZSBiZWNhdXNlIG5vbmUgaXMgdmFsdWUtY29tcGF0aWJsZSwgd2hlcmVhcyBm
b28oKSBuZWVkcyB0byByZXR1cm4gaW50LgogCQkJIi0tLS0tLS0tLS1cbiIgKyAKIAkJCSIxLiBF
UlJPUiBpbiBYLmphdmEgKGF0IGxpbmUgMTEpXG4iICsgCiAJCQkiCWdvbygoKS0+IHsgXG4iICsg
Ci0JCQkiCSAgICBeXl5eXG4iICsgCi0JCQkiVGhpcyBtZXRob2QgbXVzdCByZXR1cm4gYSByZXN1
bHQgb2YgdHlwZSBpbnRcbiIgKyAKKwkJCSIJXl5eXG4iICsgCisJCQkiVGhlIG1ldGhvZCBnb28o
SikgaW4gdGhlIHR5cGUgWCBpcyBub3QgYXBwbGljYWJsZSBmb3IgdGhlIGFyZ3VtZW50cyAoKCkg
LT4ge1xuIiArIAorCQkJIiAgYm9vbGVhbiB5ID0gdHJ1ZTtcbiIgKyAKKwkJCSIgIHdoaWxlICh5
KSAgICA7XG4iICsgCisJCQkifSlcbiIgKyAKIAkJCSItLS0tLS0tLS0tXG4iICsgCiAJCQkiMi4g
RVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDE1KVxuIiArIAogCQkJIglnb28oKCktPiB7IFxuIiAr
IAotCQkJIgkgICAgXl5eXlxuIiArIAotCQkJIlRoaXMgbWV0aG9kIG11c3QgcmV0dXJuIGEgcmVz
dWx0IG9mIHR5cGUgaW50XG4iICsgCisJCQkiCV5eXlxuIiArIAorCQkJIlRoZSBtZXRob2QgZ29v
KEopIGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxpY2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKCgp
IC0+IHtcbiIgKyAKKwkJCSIgIHdoaWxlICh4KSAgICA7XG4iICsgCisJCQkifSlcbiIgKyAKIAkJ
CSItLS0tLS0tLS0tXG4iICsgCiAJCQkiMy4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDE4KVxu
IiArIAogCQkJIglnb28oKCktPiB7IFxuIiArIAotCQkJIgkgICAgXl5eXlxuIiArIAotCQkJIlRo
aXMgbWV0aG9kIG11c3QgcmV0dXJuIGEgcmVzdWx0IG9mIHR5cGUgaW50XG4iICsgCisJCQkiCV5e
XlxuIiArIAorCQkJIlRoZSBtZXRob2QgZ29vKEopIGluIHRoZSB0eXBlIFggaXMgbm90IGFwcGxp
Y2FibGUgZm9yIHRoZSBhcmd1bWVudHMgKCgpIC0+IHtcbiIgKyAKKwkJCSIgIHdoaWxlIChmKSAg
ICA7XG4iICsgCisJCQkifSlcbiIgKyAKIAkJCSItLS0tLS0tLS0tXG4iKTsKIH0KIHB1YmxpYyB2
b2lkIHRlc3QwMDUoKSB7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5j
b21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lv
bi9TdGFja01hcEF0dHJpYnV0ZVRlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3Rz
LmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNz
aW9uL1N0YWNrTWFwQXR0cmlidXRlVGVzdC5qYXZhCmluZGV4IDM5MzAwYmIuLmFlNmVjM2UgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNs
aXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1N0YWNrTWFwQXR0cmlidXRl
VGVzdC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9v
cmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1N0YWNrTWFwQXR0
cmlidXRlVGVzdC5qYXZhCkBAIC04ODAsMTEgKzg4MCw3IEBAIHB1YmxpYyBjbGFzcyBTdGFja01h
cEF0dHJpYnV0ZVRlc3QgZXh0ZW5kcyBBYnN0cmFjdFJlZ3Jlc3Npb25UZXN0IHsKIAkJCQkJIiAg
ICAgICAgW3BjOiAyLCBwYzogMThdIGxvY2FsOiBiYXIgaW5kZXg6IDIgdHlwZTogVFxuIiArCiAJ
CQkJCSIgICAgICBTdGFjayBtYXAgdGFibGU6IG51bWJlciBvZiBmcmFtZXMgMlxuIiArCiAJCQkJ
CSIgICAgICAgIFtwYzogMTMsIGZ1bGwsIHN0YWNrOiB7amF2YS5pby5QcmludFN0cmVhbX0sIGxv
Y2Fsczoge1gsIGphdmEubGFuZy5Db21wYXJhYmxlLCBqYXZhLmxhbmcuQ29tcGFyYWJsZX1dXG4i
ICsKLQkJCQkJKHRoaXMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFf
OCA/Ci0JCQkJCSIgICAgICAgIFtwYzogMTQsIGZ1bGwsIHN0YWNrOiB7amF2YS5pby5QcmludFN0
cmVhbSwgamF2YS5sYW5nLkNvbXBhcmFibGV9LCBsb2NhbHM6IHtYLCBqYXZhLmxhbmcuQ29tcGFy
YWJsZSwgamF2YS5sYW5nLkNvbXBhcmFibGV9XVxuIgotCQkJCQk6IC8vIGluIDEuOCB0aGUgdGVy
bmFyeSBpcyByZXNvbHZlZCB0byBpdHMgdGFyZ2V0IHR5cGUgai5sLk9iamVjdAotCQkJCQkiICAg
ICAgICBbcGM6IDE0LCBmdWxsLCBzdGFjazoge2phdmEuaW8uUHJpbnRTdHJlYW0sIGphdmEubGFu
Zy5PYmplY3R9LCBsb2NhbHM6IHtYLCBqYXZhLmxhbmcuQ29tcGFyYWJsZSwgamF2YS5sYW5nLkNv
bXBhcmFibGV9XVxuIgotCQkJCQkpOworCQkJCQkiICAgICAgICBbcGM6IDE0LCBmdWxsLCBzdGFj
azoge2phdmEuaW8uUHJpbnRTdHJlYW0sIGphdmEubGFuZy5Db21wYXJhYmxlfSwgbG9jYWxzOiB7
WCwgamF2YS5sYW5nLkNvbXBhcmFibGUsIGphdmEubGFuZy5Db21wYXJhYmxlfV1cbiI7CiAKIAkJ
CWludCBpbmRleCA9IGFjdHVhbE91dHB1dC5pbmRleE9mKGV4cGVjdGVkT3V0cHV0KTsKIAkJCWlm
IChpbmRleCA9PSAtMSB8fCBleHBlY3RlZE91dHB1dC5sZW5ndGgoKSA9PSAwKSB7CmRpZmYgLS1n
aXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXN0L0FTVE5vZGUuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQVNUTm9kZS5qYXZhCmlu
ZGV4IGIwZmY4ZDguLmFjNzQ5NzIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQVNUTm9kZS5qYXZh
CisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hc3QvQVNUTm9kZS5qYXZhCkBAIC02MzAsMTggKzYzMCwxNyBAQCBwdWJs
aWMgYWJzdHJhY3QgY2xhc3MgQVNUTm9kZSBpbXBsZW1lbnRzIFR5cGVDb25zdGFudHMsIFR5cGVJ
ZHMgewogCX0KIAogCS8qKgotCSAqIEFmdGVyIGEgZmlyc3Qgcm91bmQgb2YgbWV0aG9kIGxvb2t1
cCBoYXMgcHJvZHVjZXMgJ21ldGhvZEJpbmRpbmcnIGJ1dCB3aGVuIHBvbHkgZXhwcmVzc2lvbnMg
aGF2ZSBiZWVuIHNlZW4gYXMgYXJndW1lbnRzLAorCSAqIEFmdGVyIG1ldGhvZCBsb29rdXAgaGFz
IHByb2R1Y2VkICdtZXRob2RCaW5kaW5nJyBidXQgd2hlbiBwb2x5IGV4cHJlc3Npb25zIGhhdmUg
YmVlbiBzZWVuIGFzIGFyZ3VtZW50cywKIAkgKiBpbnNwZWN0IHRoZSBhcmd1bWVudHMgdG8gdHJp
Z2dlciBhbm90aGVyIHJvdW5kIG9mIHJlc29sdmluZyB3aXRoIGltcHJvdmVkIHRhcmdldCB0eXBl
cyBmcm9tIHRoZSBtZXRob2RzIHBhcmFtZXRlcnMuCi0JICogSWYgdGhpcyByZXNvbHZpbmcgcHJv
ZHVjZXMgYmV0dGVyIHR5cGVzIGZvciBhbnkgYXJndW1lbnRzLCB1cGRhdGUgdGhlICdhcmd1bWVu
dFR5cGVzJyBhcnJheSBpbi1wbGFjZSBhbmQgCi0JICogc2lnbmFsIGJ5IHJldHVybmluZyBudWxs
IHRoYXQgdGhlIG91dGVyIHNob3VsZCBwZXJmb3JtIGFub3RoZXIgcm91bmQgb2YgbWV0aG9kIGxv
b2t1cC4KKwkgKiBJZiB0aGlzIHJlc29sdmluZyBwcm9kdWNlcyBiZXR0ZXIgdHlwZXMgZm9yIGFu
eSBhcmd1bWVudHMsIHVwZGF0ZSB0aGUgJ2FyZ3VtZW50VHlwZXMnIGFycmF5IGluLXBsYWNlIGFz
IGFuCisJICogaW50ZW5kZWQgc2lkZSBlZmZlY3QgdGhhdCB3aWxsIGZlZWQgYmV0dGVyIHR5cGUg
aW5mb3JtYXRpb24gaW4gY2hlY2tJbnZvY2F0aW9uQXJndW1lbnRzKCkgYW5kIG90aGVycy4KIAkg
KiBAcGFyYW0gaW52b2NhdGlvbiB0aGUgb3V0ZXIgaW52b2NhdGlvbiB3aGljaCBpcyBiZWluZyBy
ZXNvbHZlZAogCSAqIEBwYXJhbSBzY29wZSBzY29wZQotCSAqIEBwYXJhbSBtZXRob2RCaW5kaW5n
IHRoZSBjYW5kaWRhdGUgbWV0aG9kIHByb2R1Y2VkIGJ5IHRoZSBmaXJzdCByb3VuZCBvZiBsb29r
dXAKKwkgKiBAcGFyYW0gbWV0aG9kQmluZGluZyB0aGUgbWV0aG9kIHByb2R1Y2VkIGJ5IGxvb2t1
cCAocG9zc2libHkgaW52b2x2aW5nIHR5cGUgaW5mZXJlbmNlKS4KIAkgKiBAcGFyYW0gYXJndW1l
bnRUeXBlcyB0aGUgYXJndW1lbnQgdHlwZXMgYXMgY29sbGVjdGVkIGZyb20gZmlyc3QgcmVzb2x2
aW5nIHRoZSBpbnZvY2F0aW9uIGFyZ3VtZW50cyBhbmQgYXMgdXNlZCBmb3IKLQkgKiAJdGhlIGZp
cnN0IHJvdW5kIG9mIG1ldGhvZCBsb29rdXAuCi0JICogQHJldHVybiB0cnVlIHNpZ25hbHMgdGhh
dCB0aGUgY2FsbGVyIHNob3VsZCB0cnkgYW5vdGhlciByb3VuZCBvZiBtZXRob2QgbG9va3VwCisJ
ICogCXRoZSBtZXRob2QgbG9va3VwLgogCSAqLwotCXB1YmxpYyBzdGF0aWMgYm9vbGVhbiByZXNv
bHZlUG9seUV4cHJlc3Npb25Bcmd1bWVudHMoSW52b2NhdGlvbiBpbnZvY2F0aW9uLCBCbG9ja1Nj
b3BlIHNjb3BlLCBNZXRob2RCaW5kaW5nIG1ldGhvZEJpbmRpbmcsIFR5cGVCaW5kaW5nW10gYXJn
dW1lbnRUeXBlcykgeworCXB1YmxpYyBzdGF0aWMgdm9pZCByZXNvbHZlUG9seUV4cHJlc3Npb25B
cmd1bWVudHMoSW52b2NhdGlvbiBpbnZvY2F0aW9uLCBCbG9ja1Njb3BlIHNjb3BlLCBNZXRob2RC
aW5kaW5nIG1ldGhvZEJpbmRpbmcsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcykgewogCQlp
bnQgcHJvYmxlbVJlYXNvbiA9IDA7CiAJCU1ldGhvZEJpbmRpbmcgY2FuZGlkYXRlTWV0aG9kOwog
CQlpZiAobWV0aG9kQmluZGluZy5pc1ZhbGlkQmluZGluZygpKSB7CkBAIC02NTIsMTEyICs2NTEs
NjggQEAgcHVibGljIGFic3RyYWN0IGNsYXNzIEFTVE5vZGUgaW1wbGVtZW50cyBUeXBlQ29uc3Rh
bnRzLCBUeXBlSWRzIHsKIAkJfSBlbHNlIHsKIAkJCWNhbmRpZGF0ZU1ldGhvZCA9IG51bGw7CiAJ
CX0KLQkJYm9vbGVhbiBoYXNVcGRhdGVkSW5uZXIgPSBmYWxzZTsKIAkJaWYgKGNhbmRpZGF0ZU1l
dGhvZCAhPSBudWxsKSB7CiAJCQlib29sZWFuIHZhcmlhYmxlQXJpdHkgPSBjYW5kaWRhdGVNZXRo
b2QuaXNWYXJhcmdzKCk7CisJCQlJbmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4ID0gbnVsbDsKKwkJ
CWlmIChjYW5kaWRhdGVNZXRob2QgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhv
ZEJpbmRpbmcpIHsKKwkJCQlpbmZDdHggPSBpbnZvY2F0aW9uLmdldEluZmVyZW5jZUNvbnRleHQo
KFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgY2FuZGlkYXRlTWV0aG9kKTsKKwkJ
CQlpZiAoaW5mQ3R4ICE9IG51bGwpIHsKKwkJCQkJaWYgKCFpbmZDdHguaGFzRmluaXNoZWQpCisJ
CQkJCQlyZXR1cm47IC8vIG5vdCB5ZXQgcmVhZHkgZm9yIHB1c2hpbmcgdHlwZSBpbmZvcm1hdGlv
biBkb3duIHRvIGFyZ3VtZW50cworCQkJCQl2YXJpYWJsZUFyaXR5ICY9IGluZkN0eC5pc1ZhckFy
Z3MoKTsgLy8gVE9ETzogaWYgbm8gaW5mQ3R4IGlzIGF2YWlsYWJsZSwgZG8gd2UgaGF2ZSB0byBy
ZS1jaGVjayBpZiB0aGlzIGlzIGEgdmFyYXJncyBpbnZvY2F0aW9uPworCQkJCX0KKwkJCX0KKwkJ
CQogCQkJZmluYWwgVHlwZUJpbmRpbmdbXSBwYXJhbWV0ZXJzID0gY2FuZGlkYXRlTWV0aG9kLnBh
cmFtZXRlcnM7Ci0JCQlmaW5hbCBpbnQgcGFyYW1ldGVyc0xlbmd0aCA9IHBhcmFtZXRlcnMubGVu
Z3RoOwotCQkJRXhwcmVzc2lvbiBbXSBhcmd1bWVudHMgPSBpbnZvY2F0aW9uLmFyZ3VtZW50cygp
OworCQkJRXhwcmVzc2lvbltdIGlubmVyQXJndW1lbnRzID0gaW52b2NhdGlvbi5hcmd1bWVudHMo
KTsKKwkJCUV4cHJlc3Npb24gW10gYXJndW1lbnRzID0gaW5uZXJBcmd1bWVudHM7CiAJCQlmb3Ig
KGludCBpID0gMCwgbGVuZ3RoID0gYXJndW1lbnRzID09IG51bGwgPyAwIDogYXJndW1lbnRzLmxl
bmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7CiAJCQkJRXhwcmVzc2lvbiBhcmd1bWVudCA9IGFyZ3Vt
ZW50c1tpXTsKLQkJCQlUeXBlQmluZGluZyBwYXJhbWV0ZXJUeXBlID0gaSA8IHBhcmFtZXRlcnNM
ZW5ndGggPyBwYXJhbWV0ZXJzW2ldIDogdmFyaWFibGVBcml0eSA/IHBhcmFtZXRlcnNbcGFyYW1l
dGVyc0xlbmd0aCAtIDFdIDogbnVsbDsKIAkJCQlUeXBlQmluZGluZyB1cGRhdGVkQXJndW1lbnRU
eXBlID0gbnVsbDsKKwkJCQlUeXBlQmluZGluZyBwYXJhbWV0ZXJUeXBlID0gSW5mZXJlbmNlQ29u
dGV4dDE4LmdldFBhcmFtZXRlcihwYXJhbWV0ZXJzLCBpLCB2YXJpYWJsZUFyaXR5KTsgCiAKLQkJ
CQlpZiAodmFyaWFibGVBcml0eSAmJiBpID49IHBhcmFtZXRlcnNMZW5ndGggLSAxKQotCQkJCQlh
cmd1bWVudC50YWdBc0VsbGlwc2lzQXJndW1lbnQoKTsKLQkJCQl1cGRhdGVkQXJndW1lbnRUeXBl
ID0gdXBkYXRlRXhwcmVzc2lvbihzY29wZSwgYXJndW1lbnQsIGFyZ3VtZW50VHlwZXNbaV0sIHBh
cmFtZXRlclR5cGUsIGludm9jYXRpb24uaGFzSW5mZXJlbmNlRmluaXNoZWQoKSk7Ci0JCQkJaWYg
KHVwZGF0ZWRBcmd1bWVudFR5cGUgPT0gUE9MWV9FUlJPUikgLy8kSURFTlRJVFktQ09NUEFSSVNP
TiQKKwkJCQlpZiAoYXJndW1lbnQgaW5zdGFuY2VvZiBMYW1iZGFFeHByZXNzaW9uICYmICgoTGFt
YmRhRXhwcmVzc2lvbikgYXJndW1lbnQpLmhhc0Vycm9ycygpKQogCQkJCQljb250aW51ZTsgLy8g
ZG9uJ3QgdXBkYXRlIGlmIGlubmVyIHBvbHkgaGFzIGVycm9ycwotCQkJCWlmIChwcm9ibGVtUmVh
c29uICE9IFByb2JsZW1SZWFzb25zLkFtYmlndW91cyAJLy8gcHJlc2VydmUgdGhpcyBlcnJvcgot
CQkJCQkJJiYgdXBkYXRlZEFyZ3VtZW50VHlwZSAhPSBudWxsCQkJCQkvLyBkbyB3ZSBoYXZlIGEg
cmVsZXZhbnQgdXBkYXRlPyAuLi4KLQkJCQkJCSYmICEodXBkYXRlZEFyZ3VtZW50VHlwZSBpbnN0
YW5jZW9mIFBvbHlUeXBlQmluZGluZykKLQkJCQkJCSYmIFR5cGVCaW5kaW5nLm5vdEVxdWFscyh1
cGRhdGVkQXJndW1lbnRUeXBlLCBhcmd1bWVudFR5cGVzW2ldKSkKLQkJCQl7Ci0JCQkJCS8vIHVw
ZGF0ZSB0aGUgYXJndW1lbnRUeXBlcyBhcnJheSAoc3VwcG9zZWQgdG8gYmUgb3duZWQgYnkgdGhl
IGNhbGxpbmcgbWV0aG9kKQotCQkJCQkvLyBpbiBvcmRlciB0byBnaXZlIGJldHRlciBpbmZvcm1h
dGlvbiBpbnRvIGEgc2Vjb25kIHJvdW5kIG9mIG1ldGhvZCBsb29rdXA6Ci0JCQkJCWFyZ3VtZW50
VHlwZXNbaV0gPSB1cGRhdGVkQXJndW1lbnRUeXBlOwotCQkJCQloYXNVcGRhdGVkSW5uZXIgPSB0
cnVlOwotCQkJCX0KLQkJCX0KLQkJfQotCQlyZXR1cm4gaGFzVXBkYXRlZElubmVyOwotCX0KIAot
CS8vIHNwZWNpYWwgaW5zdGFuY2UgdXNlZCB0byBzaWduYWwgdGhhdCBhbiBpbm5lciBwb2x5IGV4
cHJlc3Npb24gaGFkIGVycm9ycywgdG8gY2FuY2VsIGFub3RoZXIgbWV0aG9kIGxvb2t1cCBvZiB0
aGUgb3V0ZXIgYmFzZWQgb24gYm9ndXMgdHlwZSBpbmZvcm1hdGlvbgotCXN0YXRpYyBmaW5hbCBU
eXBlQmluZGluZyBQT0xZX0VSUk9SID0gbmV3IFBvbHlUeXBlQmluZGluZyhudWxsKTsKLQotCXBy
aXZhdGUgc3RhdGljIFR5cGVCaW5kaW5nIHVwZGF0ZUV4cHJlc3Npb24oQmxvY2tTY29wZSBzY29w
ZSwgRXhwcmVzc2lvbiBleHByZXNzaW9uLCBUeXBlQmluZGluZyBhcmd1bWVudFR5cGUsIFR5cGVC
aW5kaW5nIHBhcmFtZXRlclR5cGUsIGJvb2xlYW4gaW5mZXJlbmNlRmluaXNoZWQpIHsKLQkJVHlw
ZUJpbmRpbmcgdXBkYXRlZEFyZ3VtZW50VHlwZSA9IG51bGw7Ci0JCWJvb2xlYW4gaXNQb2x5QWxs
b2MgPSBmYWxzZTsKLQkJaWYgKGV4cHJlc3Npb24gaW5zdGFuY2VvZiBJbnZvY2F0aW9uKSB7Ci0J
CQlJbnZvY2F0aW9uIGludm9jYXRpb24gPSAoSW52b2NhdGlvbilleHByZXNzaW9uOwotCQkJdXBk
YXRlZEFyZ3VtZW50VHlwZSA9IHVwZGF0ZUludm9jYXRpb24oaW52b2NhdGlvbiwgcGFyYW1ldGVy
VHlwZSk7Ci0JCQlpZiAodXBkYXRlZEFyZ3VtZW50VHlwZSA9PSBudWxsICYmIGludm9jYXRpb24u
aW5mZXJlbmNlS2luZCgpICE9IDAgJiYgIWludm9jYXRpb24uaGFzSW5mZXJlbmNlRmluaXNoZWQo
KSkKLQkJCQlpc1BvbHlBbGxvYyA9IHRydWU7Ci0JCX0gZWxzZSBpZiAoZXhwcmVzc2lvbiBpbnN0
YW5jZW9mIENvbmRpdGlvbmFsRXhwcmVzc2lvbikgewotCQkJdXBkYXRlZEFyZ3VtZW50VHlwZSA9
IHVwZGF0ZUNvbmRpdGlvbkV4cHJlc2lvbihzY29wZSwgKChDb25kaXRpb25hbEV4cHJlc3Npb24p
IGV4cHJlc3Npb24pLCBhcmd1bWVudFR5cGUsIHBhcmFtZXRlclR5cGUsIGluZmVyZW5jZUZpbmlz
aGVkKTsKLQkJfQotCi0JCWlmICh1cGRhdGVkQXJndW1lbnRUeXBlID09IG51bGwgJiYgKGlzUG9s
eUFsbG9jIHx8IGFyZ3VtZW50VHlwZSBpbnN0YW5jZW9mIFBvbHlUeXBlQmluZGluZykpIHsKLQkJ
CXVwZGF0ZWRBcmd1bWVudFR5cGUgPSB1cGRhdGVPdGhlclBvbHlFeHByZXNzaW9uKHNjb3BlLCBl
eHByZXNzaW9uLCBwYXJhbWV0ZXJUeXBlLCBpbmZlcmVuY2VGaW5pc2hlZCk7Ci0JCX0KLQkJcmV0
dXJuIHVwZGF0ZWRBcmd1bWVudFR5cGU7Ci0JfQotCi0JcHJpdmF0ZSBzdGF0aWMgVHlwZUJpbmRp
bmcgdXBkYXRlQ29uZGl0aW9uRXhwcmVzaW9uKEJsb2NrU2NvcGUgc2NvcGUsIENvbmRpdGlvbmFs
RXhwcmVzc2lvbiBleHByZXNzaW9uLCBUeXBlQmluZGluZyBjdXJyZW50VHlwZSwgVHlwZUJpbmRp
bmcgdGFyZ2V0VHlwZSwgYm9vbGVhbiBpbmZlcmVuY2VGaW5pc2hlZCkgewotCQlUeXBlQmluZGlu
ZyB0eXBlID0gdXBkYXRlRXhwcmVzc2lvbihzY29wZSwgZXhwcmVzc2lvbi52YWx1ZUlmVHJ1ZSwg
Y3VycmVudFR5cGUsIHRhcmdldFR5cGUsIGluZmVyZW5jZUZpbmlzaGVkKTsKLQkJYm9vbGVhbiBl
cnJvclNlZW4gPSAodHlwZSA9PSBQT0xZX0VSUk9SKTsgLy8kSURFTlRJVFktQ09NUEFSSVNPTiQK
LQkJYm9vbGVhbiBpbmNvbXBhdGliaWxpdHlTZWVuID0gIWVycm9yU2VlbiAmJiB0eXBlICE9IG51
bGwgJiYgIXR5cGUuaXNDb21wYXRpYmxlV2l0aCh0YXJnZXRUeXBlKTsKLQkJdHlwZSA9IHVwZGF0
ZUV4cHJlc3Npb24oc2NvcGUsIGV4cHJlc3Npb24udmFsdWVJZkZhbHNlLCBjdXJyZW50VHlwZSwg
dGFyZ2V0VHlwZSwgaW5mZXJlbmNlRmluaXNoZWQpOwotCQlpZiAoZXJyb3JTZWVuIHx8IHR5cGUg
PT0gUE9MWV9FUlJPUikgLy8kSURFTlRJVFktQ09NUEFSSVNPTiQKLQkJCXJldHVybiBQT0xZX0VS
Uk9SOwotCQlpZiAoaW5jb21wYXRpYmlsaXR5U2VlbiB8fCB0eXBlICE9IG51bGwgJiYgIXR5cGUu
aXNDb21wYXRpYmxlV2l0aCh0YXJnZXRUeXBlKSkKLQkJCXJldHVybiBudWxsOwotCQlyZXR1cm4g
ZXhwcmVzc2lvbi5yZXNvbHZlZFR5cGUgPSB0YXJnZXRUeXBlOwotCX0KKwkJCQlpZiAoYXJndW1l
bnQgaW5zdGFuY2VvZiBJbnZvY2F0aW9uKSB7CisJCQkJCUludm9jYXRpb24gaW5uZXJJbnZvY2F0
aW9uID0gKEludm9jYXRpb24pYXJndW1lbnQ7CisJCQkJCU1ldGhvZEJpbmRpbmcgYmluZGluZyA9
IGlubmVySW52b2NhdGlvbi5iaW5kaW5nKCk7CisJCQkJCWlmIChiaW5kaW5nIGluc3RhbmNlb2Yg
UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7CisJCQkJCQlQYXJhbWV0ZXJpemVk
R2VuZXJpY01ldGhvZEJpbmRpbmcgcGFyYW1ldGVyaXplZE1ldGhvZCA9IChQYXJhbWV0ZXJpemVk
R2VuZXJpY01ldGhvZEJpbmRpbmcpIGJpbmRpbmc7CisJCQkJCQlJbmZlcmVuY2VDb250ZXh0MTgg
aW5uZXJDb250ZXh0ID0gaW5uZXJJbnZvY2F0aW9uLmdldEluZmVyZW5jZUNvbnRleHQocGFyYW1l
dGVyaXplZE1ldGhvZCk7CisJCQkJCQlpZiAoaW5uZXJDb250ZXh0ICE9IG51bGwgJiYgIWlubmVy
Q29udGV4dC5oYXNGaW5pc2hlZCkgewkJCQkJCQkKKwkJCQkJCQlhcmd1bWVudC5zZXRFeHBlY3Rl
ZFR5cGUocGFyYW1ldGVyVHlwZSk7CisJCQkJCQkJVHlwZUJpbmRpbmdbXSBpbm5lckFyZ3VtZW50
VHlwZXMgPSBudWxsOworCQkJCQkJCWlmIChpbm5lckFyZ3VtZW50cyAhPSBudWxsKSB7CisJCQkJ
CQkJCWlubmVyQXJndW1lbnRUeXBlcyA9IG5ldyBUeXBlQmluZGluZ1tpbm5lckFyZ3VtZW50cy5s
ZW5ndGhdOworCQkJCQkJCQlmb3IgKGludCBqID0gMDsgaiA8IGlubmVyQXJndW1lbnRzLmxlbmd0
aDsgaisrKQorCQkJCQkJCQkJaW5uZXJBcmd1bWVudFR5cGVzW2ldID0gaW5uZXJBcmd1bWVudHNb
aV0ucmVzb2x2ZWRUeXBlOworCQkJCQkJCX0KKwkJCQkJCQlNZXRob2RCaW5kaW5nIGltcHJvdmVk
QmluZGluZyA9IGlubmVyQ29udGV4dC5pbmZlckludm9jYXRpb25UeXBlKGlubmVySW52b2NhdGlv
biwgaW5uZXJBcmd1bWVudFR5cGVzLCBwYXJhbWV0ZXJpemVkTWV0aG9kKTsKKwkJCQkJCQlpbm5l
ckludm9jYXRpb24udXBkYXRlQmluZGluZ3MoaW1wcm92ZWRCaW5kaW5nKTsKKwkJCQkJCX0KKwkJ
CQkJCWNvbnRpbnVlOyAvLyBvdGhlcndpc2UgdGhlc2UgaGF2ZSBiZWVuIGRlYWx0IHdpdGggZHVy
aW5nIGlubmVyIG1ldGhvZCBsb29rdXAKKwkJCQkJfQorCQkJCX0KIAotCXByaXZhdGUgc3RhdGlj
IFR5cGVCaW5kaW5nIHVwZGF0ZUludm9jYXRpb24oSW52b2NhdGlvbiBpbm5lckludm9jYXRpb24s
IFR5cGVCaW5kaW5nIHRhcmdldFR5cGUpIHsKLQkJYm9vbGVhbiBpbnZvY2F0aW9uRmluaXNoZWQg
PSBmYWxzZTsKLQkJTWV0aG9kQmluZGluZyB1cGRhdGVkTWV0aG9kID0gaW5uZXJJbnZvY2F0aW9u
LmJpbmRpbmcoKTsKLQkJaWYgKGlubmVySW52b2NhdGlvbi5oYXNJbmZlcmVuY2VGaW5pc2hlZCgp
ICYmIHVwZGF0ZWRNZXRob2QgIT0gbnVsbCkgewotCQkJLy8gb3V0ZXIgaW52b2NhdGlvbiBhbHJl
YWR5IGluY2x1ZGVkIGludm9jYXRpb24gdHlwZSBpbmZlcmVuY2UgZm9yIHRoaXMgaW5uZXIKLQkJ
CWludm9jYXRpb25GaW5pc2hlZCA9IHRydWU7Ci0JCX0gZWxzZSB7Ci0JCQkvLyBJbm5lciBJbmZl
cmVuY2U/Ci0JCQlJbmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4MTggPSBpbm5lckludm9jYXRpb24u
aW5mZXJlbmNlQ29udGV4dCgpOwotCQkJaWYgKGluZkN0eDE4ICE9IG51bGwpIHsKLQkJCQkvLyBQ
cmV2aW91cyB0aW1lIGFyb3VuZCB3ZSBvbmx5IHBlcmZvcm1lZCBJbnZvY2F0aW9uIEFwcGxpY2Fi
aWxpdHkgSW5mZXJlbmNlLCBkbyB0aGUgcmVzdCBub3c6Ci0JCQkJdXBkYXRlZE1ldGhvZCA9IGlu
ZkN0eDE4LmdldEludm9jYXRpb25UeXBlSW5mZXJlbmNlU29sdXRpb24oaW5uZXJJbnZvY2F0aW9u
LCB0YXJnZXRUeXBlKTsKLQkJCQlpZiAodXBkYXRlZE1ldGhvZCAhPSBudWxsKSB7Ci0JCQkJCWlu
bmVySW52b2NhdGlvbi51cGRhdGVCaW5kaW5ncyh1cGRhdGVkTWV0aG9kKTsKLQkJCQkJaW52b2Nh
dGlvbkZpbmlzaGVkID0gdHJ1ZTsKKwkJCQlpZiAoKGluZkN0eCA9PSBudWxsIHx8IGludm9jYXRp
b24uZ2V0RXhwcmVzc2lvbkNvbnRleHQoKSA9PSBFeHByZXNzaW9uQ29udGV4dC5WQU5JTExBX0NP
TlRFWFQpCisJCQkJCQkmJiBhcmd1bWVudC5pc1BvbHlFeHByZXNzaW9uKCkpIAorCQkJCXsKKwkJ
CQkJLy8gcG9seSBleHByZXNzaW9ucyBpbiBhIG5vbi1pbmZlcmVuY2UgY29udGV4dCBuZWVkIHRv
IGJlIHJlc29sdmVkIG5vdzoKKwkJCQkJYXJndW1lbnQuc2V0RXhwZWN0ZWRUeXBlKHBhcmFtZXRl
clR5cGUpOworCQkJCQl1cGRhdGVkQXJndW1lbnRUeXBlID0gYXJndW1lbnQucmVzb2x2ZVR5cGUo
c2NvcGUpOworCisJCQkJCWlmIChwcm9ibGVtUmVhc29uID09IFByb2JsZW1SZWFzb25zLk5vRXJy
b3IgLy8gcHJlc2VydmUgZXJyb3JzCisJCQkJCQkJJiYgdXBkYXRlZEFyZ3VtZW50VHlwZSAhPSBu
dWxsCQkJCQkvLyBkbyB3ZSBoYXZlIGEgcmVsZXZhbnQgdXBkYXRlPyAuLi4KKwkJCQkJCQkmJiAh
KHVwZGF0ZWRBcmd1bWVudFR5cGUgaW5zdGFuY2VvZiBQb2x5VHlwZUJpbmRpbmcpKQorCQkJCQl7
CisJCQkJCQkvLyB1cGRhdGUgdGhlIGFyZ3VtZW50VHlwZXMgYXJyYXkgKHN1cHBvc2VkIHRvIGJl
IG93bmVkIGJ5IHRoZSBjYWxsaW5nIG1ldGhvZCkKKwkJCQkJCS8vIGluIG9yZGVyIHRvIGdpdmUg
YmV0dGVyIGluZm9ybWF0aW9uIGZvciBzdWJzZXF1ZW50IGNoZWNrcworCQkJCQkJYXJndW1lbnRU
eXBlc1tpXSA9IHVwZGF0ZWRBcmd1bWVudFR5cGU7CisJCQkJCX0KIAkJCQl9CiAJCQl9CiAJCX0K
LQkJaWYgKGludm9jYXRpb25GaW5pc2hlZCkgewotCQkJaWYgKHVwZGF0ZWRNZXRob2QuaXNDb25z
dHJ1Y3RvcigpKQotCQkJCXJldHVybiB1cGRhdGVkTWV0aG9kLmRlY2xhcmluZ0NsYXNzOwotCQkJ
ZWxzZQotCQkJCXJldHVybiB1cGRhdGVkTWV0aG9kLnJldHVyblR5cGU7Ci0JCX0KLQkJcmV0dXJu
IG51bGw7Ci0JfQotCi0JcHJvdGVjdGVkIHN0YXRpYyBUeXBlQmluZGluZyB1cGRhdGVPdGhlclBv
bHlFeHByZXNzaW9uKEJsb2NrU2NvcGUgc2NvcGUsIEV4cHJlc3Npb24gZXhwcmVzc2lvbiwgVHlw
ZUJpbmRpbmcgcGFyYW1ldGVyVHlwZSwgYm9vbGVhbiBpbmZlcmVuY2VGaW5pc2hlZCkgewotCQlU
eXBlQmluZGluZyB1cGRhdGVkQXJndW1lbnRUeXBlOwotCQlleHByZXNzaW9uLnNldEV4cHJlc3Np
b25Db250ZXh0KHBhcmFtZXRlclR5cGUgIT0gbnVsbCA/IEV4cHJlc3Npb25Db250ZXh0LklOVk9D
QVRJT05fQ09OVEVYVDogRXhwcmVzc2lvbkNvbnRleHQuQVNTSUdOTUVOVF9DT05URVhUKTsgLy8g
Zm9yY2UgdGhlIGVycm9ycyB0byBzdXJmYWNlLgotCQkvLyBwZXJmb3JtIHRoZSBsZXZlbCBvZiBy
ZXNvbHZpbmcgc3VpdGFibGUgZm9yIHRoZSBzdGF0ZSBvZiBhZmZhaXJzIGF0IHRoZSBlbmNsb3Np
bmcgY29udGV4dDoKLQkJaWYgKGluZmVyZW5jZUZpbmlzaGVkKSB7Ci0JCQlleHByZXNzaW9uLnNl
dEV4cGVjdGVkVHlwZShwYXJhbWV0ZXJUeXBlKTsKLQkJCXVwZGF0ZWRBcmd1bWVudFR5cGUgPSBl
eHByZXNzaW9uLnJlc29sdmVUeXBlKHNjb3BlKTsKLQkJfSBlbHNlIHsKLQkJCXVwZGF0ZWRBcmd1
bWVudFR5cGUgPSBleHByZXNzaW9uLnJlc29sdmVUZW50YXRpdmVseShzY29wZSwgcGFyYW1ldGVy
VHlwZSk7Ci0JCX0KLQkJaWYgKHVwZGF0ZWRBcmd1bWVudFR5cGUgPT0gbnVsbCB8fCAhdXBkYXRl
ZEFyZ3VtZW50VHlwZS5pc1ZhbGlkQmluZGluZygpKQotCQkJcmV0dXJuIFBPTFlfRVJST1I7Ci0J
CWlmIChleHByZXNzaW9uIGluc3RhbmNlb2YgTGFtYmRhRXhwcmVzc2lvbiAmJiAoKExhbWJkYUV4
cHJlc3Npb24pIGV4cHJlc3Npb24pLmhhc0Vycm9ycygpKQotCQkJcmV0dXJuIFBPTFlfRVJST1I7
Ci0JCXJldHVybiB1cGRhdGVkQXJndW1lbnRUeXBlOwogCX0KIAogCXB1YmxpYyBzdGF0aWMgdm9p
ZCByZXNvbHZlQW5ub3RhdGlvbnMoQmxvY2tTY29wZSBzY29wZSwgQW5ub3RhdGlvbltdIHNvdXJj
ZUFubm90YXRpb25zLCBCaW5kaW5nIHJlY2lwaWVudCkgewpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Fz
dC9BbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BbGxvY2F0aW9uRXhwcmVz
c2lvbi5qYXZhCmluZGV4IGQ3YzFmY2QuLjU3NTI5N2EgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3Qv
QWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0FsbG9jYXRpb25FeHBy
ZXNzaW9uLmphdmEKQEAgLTM4LDEzICszOCwzNyBAQCBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5p
bnRlcm5hbC5jb21waWxlci5hc3Q7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGls
ZXIuSVByb2JsZW07CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLkFT
VFZpc2l0b3I7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmNsYXNz
Zm10LkNsYXNzRmlsZUNvbnN0YW50czsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwu
Y29tcGlsZXIuY29kZWdlbi4qOwotaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21w
aWxlci5mbG93Lio7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmNv
ZGVnZW4uQ29kZVN0cmVhbTsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGls
ZXIuY29kZWdlbi5PcGNvZGVzOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21w
aWxlci5mbG93LkZsb3dDb250ZXh0OworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b21waWxlci5mbG93LkZsb3dJbmZvOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b21waWxlci5pbXBsLkNvbXBpbGVyT3B0aW9uczsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50
ZXJuYWwuY29tcGlsZXIuaW1wbC5Db25zdGFudDsKLWltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50
ZXJuYWwuY29tcGlsZXIubG9va3VwLio7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFs
LmNvbXBpbGVyLmxvb2t1cC5CaW5kaW5nOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5h
bC5jb21waWxlci5sb29rdXAuQmxvY2tTY29wZTsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50
ZXJuYWwuY29tcGlsZXIubG9va3VwLkV4dHJhQ29tcGlsZXJNb2RpZmllcnM7CitpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5JbXBsaWNpdE51bGxBbm5vdGF0
aW9uVmVyaWZpZXI7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxv
b2t1cC5JbmZlcmVuY2VDb250ZXh0MTg7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFs
LmNvbXBpbGVyLmxvb2t1cC5Mb2NhbFR5cGVCaW5kaW5nOworaW1wb3J0IG9yZy5lY2xpcHNlLmpk
dC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuTG9jYWxWYXJpYWJsZUJpbmRpbmc7CitpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5NZXRob2RCaW5kaW5nOwor
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuTmVzdGVkVHlw
ZUJpbmRpbmc7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1
cC5QYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmc7CitpbXBvcnQgb3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5QYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmc7Citp
bXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5Qb2x5VHlwZUJp
bmRpbmc7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5Q
cm9ibGVtTWV0aG9kQmluZGluZzsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29t
cGlsZXIubG9va3VwLlJhd1R5cGVCaW5kaW5nOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRl
cm5hbC5jb21waWxlci5sb29rdXAuUmVmZXJlbmNlQmluZGluZzsKK2ltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlNjb3BlOworaW1wb3J0IG9yZy5lY2xpcHNl
LmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuU291cmNlVHlwZUJpbmRpbmc7CitpbXBvcnQg
b3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5TeW50aGV0aWNBcmd1bWVu
dEJpbmRpbmc7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1
cC5UYWdCaXRzOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29r
dXAuVHlwZUJpbmRpbmc7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVy
Lmxvb2t1cC5UeXBlQ29uc3RhbnRzOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b21waWxlci5sb29rdXAuVHlwZUlkczsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwu
Y29tcGlsZXIucHJvYmxlbS5Qcm9ibGVtUmVwb3J0ZXI7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0
LmludGVybmFsLmNvbXBpbGVyLnByb2JsZW0uUHJvYmxlbVNldmVyaXRpZXM7CitpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLnV0aWwuU2ltcGxlTG9va3VwVGFibGU7CiAK
IHB1YmxpYyBjbGFzcyBBbGxvY2F0aW9uRXhwcmVzc2lvbiBleHRlbmRzIEV4cHJlc3Npb24gaW1w
bGVtZW50cyBJbnZvY2F0aW9uIHsKIApAQCAtNjAsOCArODQsOSBAQCBwdWJsaWMgY2xhc3MgQWxs
b2NhdGlvbkV4cHJlc3Npb24gZXh0ZW5kcyBFeHByZXNzaW9uIGltcGxlbWVudHMgSW52b2NhdGlv
biB7CiAKIAlwdWJsaWMgRmFrZWRUcmFja2luZ1ZhcmlhYmxlIGNsb3NlVHJhY2tlcjsJLy8gd2hl
biBhbGxvY2F0aW9uIGEgQ2xvc2VhYmxlIHN0b3JlIGEgcHJlLWxpbWluYXJ5IHRyYWNraW5nIHZh
cmlhYmxlIGhlcmUKIAlwcml2YXRlIEV4cHJlc3Npb25Db250ZXh0IGV4cHJlc3Npb25Db250ZXh0
ID0gVkFOSUxMQV9DT05URVhUOwotCXByaXZhdGUgaW50IGluZmVyZW5jZUtpbmQ7Ci0JcHJpdmF0
ZSBJbmZlcmVuY2VDb250ZXh0MTggaW5mZXJlbmNlQ29udGV4dDsKKworCSAvLyBob2xkIG9uIHRv
IHRoaXMgY29udGV4dCBmcm9tIGludm9jYXRpb24gYXBwbGljYWJpbGl0eSBpbmZlcmVuY2UgdW50
aWwgaW52b2NhdGlvbiB0eXBlIGluZmVyZW5jZSAocGVyIG1ldGhvZCBjYW5kaWRhdGUpOgorCXBy
aXZhdGUgU2ltcGxlTG9va3VwVGFibGUvKjxQR01CLElDMTg+Ki8gaW5mZXJlbmNlQ29udGV4dHM7
CiAKIHB1YmxpYyBGbG93SW5mbyBhbmFseXNlQ29kZShCbG9ja1Njb3BlIGN1cnJlbnRTY29wZSwg
Rmxvd0NvbnRleHQgZmxvd0NvbnRleHQsIEZsb3dJbmZvIGZsb3dJbmZvKSB7CiAJLy8gY2hlY2sg
Y2FwdHVyZWQgdmFyaWFibGVzIGFyZSBpbml0aWFsaXplZCBpbiBjdXJyZW50IGNvbnRleHQgKDI2
MTM0KQpAQCAtNDUxLDcgKzQ3Niw2IEBAIHB1YmxpYyBUeXBlQmluZGluZyByZXNvbHZlVHlwZShC
bG9ja1Njb3BlIHNjb3BlKSB7CiAJCS8vIGluIHRoaXMgcHJlbGltaW5hcnkgbW9kZSB1c2UgdGhl
IHJhdyByZWNlaXZlciB0eXBlIGZvciBjb25zdHJ1Y3RvciBsb29rdXAsIHRvIGF2b2lkIHNwdXJp
b3VzIHR5cGUgZXJyb3JzCiAJCXJlY2VpdmVyVHlwZSA9IChSZWZlcmVuY2VCaW5kaW5nKSByZWNl
aXZlclR5cGUub3JpZ2luYWwoKTsKIAkJcmVjZWl2ZXJUeXBlID0gc2NvcGUuZW52aXJvbm1lbnQo
KS5jcmVhdGVSYXdUeXBlKHJlY2VpdmVyVHlwZSwgcmVjZWl2ZXJUeXBlLmVuY2xvc2luZ1R5cGUo
KSk7Ci0JCXRoaXMuaW5mZXJlbmNlS2luZCA9IDE7IC8vIGluZmVyZW5jZSBuZWVkZWQhCiAJfQog
CQogCXRoaXMuYmluZGluZyA9IGZpbmRDb25zdHJ1Y3RvckJpbmRpbmcoc2NvcGUsIHRoaXMsIHJl
Y2VpdmVyVHlwZSwgYXJndW1lbnRUeXBlcywgcG9seUV4cHJlc3Npb25TZWVuKTsKQEAgLTQ4Nyw2
ICs1MTEsOCBAQCBwdWJsaWMgVHlwZUJpbmRpbmcgcmVzb2x2ZVR5cGUoQmxvY2tTY29wZSBzY29w
ZSkgewogCQluZXcgSW1wbGljaXROdWxsQW5ub3RhdGlvblZlcmlmaWVyKHNjb3BlLmVudmlyb25t
ZW50KCksIGNvbXBpbGVyT3B0aW9ucy5pbmhlcml0TnVsbEFubm90YXRpb25zKQogCQkJCS5jaGVj
a0ltcGxpY2l0TnVsbEFubm90YXRpb25zKHRoaXMuYmluZGluZywgbnVsbC8qc3JjTWV0aG9kKi8s
IGZhbHNlLCBzY29wZSk7CiAJfQorCWlmIChkaWFtb25kTmVlZHNEZWZlcnJpbmcpCisJCXJldHVy
biBuZXcgUG9seVR5cGVCaW5kaW5nKHRoaXMpOwogCXJldHVybiBhbGxvY2F0aW9uVHlwZTsKIH0K
IApAQCAtNTQyLDcgKzU2OCw2IEBAIHB1YmxpYyB2b2lkIGNoZWNrVHlwZUFyZ3VtZW50UmVkdW5k
YW5jeShQYXJhbWV0ZXJpemVkVHlwZUJpbmRpbmcgYWxsb2NhdGlvblR5cGUsCiAJfQogCVR5cGVC
aW5kaW5nIFtdIGluZmVycmVkVHlwZXM7CiAJaW50IHByZXZpb3VzQml0cyA9IHRoaXMudHlwZS5i
aXRzOwotCWludCBwcmV2aW91c0luZmVyZW5jZUtpbmQgPSB0aGlzLmluZmVyZW5jZUtpbmQ7CiAJ
dHJ5IHsKIAkJLy8gY2hlY2tpbmcgZm9yIHJlZHVuZGFudCB0eXBlIHBhcmFtZXRlcnMgbXVzdCBm
YWtlIGEgZGlhbW9uZCwgCiAJCS8vIHNvIHdlIGluZmVyIHRoZSBzYW1lIHJlc3VsdHMgYXMgd2Ug
d291bGQgZ2V0IHdpdGggYSBkaWFtb25kIGluIHNvdXJjZSBjb2RlOgpAQCAtNTUxLDcgKzU3Niw2
IEBAIHB1YmxpYyB2b2lkIGNoZWNrVHlwZUFyZ3VtZW50UmVkdW5kYW5jeShQYXJhbWV0ZXJpemVk
VHlwZUJpbmRpbmcgYWxsb2NhdGlvblR5cGUsCiAJfSBmaW5hbGx5IHsKIAkJLy8gcmVzZXQgZWZm
ZWN0cyBvZiBpbmZlcmVuY2UKIAkJdGhpcy50eXBlLmJpdHMgPSBwcmV2aW91c0JpdHM7Ci0JCXRo
aXMuaW5mZXJlbmNlS2luZCA9IHByZXZpb3VzSW5mZXJlbmNlS2luZDsKIAl9CiAJaWYgKGluZmVy
cmVkVHlwZXMgPT0gbnVsbCkgewogCQlyZXR1cm47CkBAIC02MzMsMzEgKzY1NywzNyBAQCBwdWJs
aWMgTWV0aG9kQmluZGluZyBiaW5kaW5nKCkgewogcHVibGljIEV4cHJlc3Npb25bXSBhcmd1bWVu
dHMoKSB7CiAJcmV0dXJuIHRoaXMuYXJndW1lbnRzOwogfQotcHVibGljIGludCBpbmZlcmVuY2VL
aW5kKCkgewotCXJldHVybiAodGhpcy5pbmZlcmVuY2VLaW5kICYgSW5mZXJlbmNlQ29udGV4dDE4
LklORkVSRU5DRV9LSU5EX01BU0spOwotfQotcHVibGljIHZvaWQgc2V0SW5mZXJlbmNlS2luZChp
bnQgY2hlY2tLaW5kKSB7Ci0JdGhpcy5pbmZlcmVuY2VLaW5kID0gY2hlY2tLaW5kOwotfQotcHVi
bGljIHZvaWQgbWFya0luZmVyZW5jZUZpbmlzaGVkKCkgewotCXRoaXMuaW5mZXJlbmNlS2luZCB8
PSBJbmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tfRklOSVNIRUQ7Ci19Ci1wdWJsaWMgYm9vbGVhbiBo
YXNJbmZlcmVuY2VGaW5pc2hlZCgpIHsKLQlyZXR1cm4gdGhpcy5pbmZlcmVuY2VLaW5kID09IDAg
Ly8gb25seSByZWxldmFudCBpZiBpbmZlcmVuY2UgaGFzIGJlZW4gc3RhcnRlZAotCQkJfHwgKHRo
aXMuaW5mZXJlbmNlS2luZCAmIEluZmVyZW5jZUNvbnRleHQxOC5DSEVDS19GSU5JU0hFRCkgIT0g
MDsKLX0KLXB1YmxpYyBUeXBlQmluZGluZyB1cGRhdGVCaW5kaW5ncyhNZXRob2RCaW5kaW5nIHVw
ZGF0ZWRCaW5kaW5nKSB7CisKK3B1YmxpYyBib29sZWFuIHVwZGF0ZUJpbmRpbmdzKE1ldGhvZEJp
bmRpbmcgdXBkYXRlZEJpbmRpbmcpIHsKKwlpZiAodGhpcy5iaW5kaW5nID09IHVwZGF0ZWRCaW5k
aW5nKQorCQlyZXR1cm4gZmFsc2U7CisJaWYgKHRoaXMuaW5mZXJlbmNlQ29udGV4dHMgIT0gbnVs
bCkgeworCQlJbmZlcmVuY2VDb250ZXh0MTggY3R4ID0gKEluZmVyZW5jZUNvbnRleHQxOCl0aGlz
LmluZmVyZW5jZUNvbnRleHRzLnJlbW92ZUtleSh0aGlzLmJpbmRpbmcpOworCQlpZiAoY3R4ICE9
IG51bGwgJiYgdXBkYXRlZEJpbmRpbmcgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01l
dGhvZEJpbmRpbmcpIHsKKwkJCXRoaXMuaW5mZXJlbmNlQ29udGV4dHMucHV0KHVwZGF0ZWRCaW5k
aW5nLCBjdHgpOworCQkJY3R4Lmhhc0ZpbmlzaGVkID0gdHJ1ZTsKKwkJfQorCX0KIAl0aGlzLmJp
bmRpbmcgPSB1cGRhdGVkQmluZGluZzsKLQlyZXR1cm4gdGhpcy5yZXNvbHZlZFR5cGUgPSB1cGRh
dGVkQmluZGluZy5kZWNsYXJpbmdDbGFzczsKKwl0aGlzLnJlc29sdmVkVHlwZSA9IHVwZGF0ZWRC
aW5kaW5nLmRlY2xhcmluZ0NsYXNzOworCXJldHVybiB0cnVlOwogfQotcHVibGljIEluZmVyZW5j
ZUNvbnRleHQxOCBpbmZlcmVuY2VDb250ZXh0KCkgewotCXJldHVybiB0aGlzLmluZmVyZW5jZUNv
bnRleHQ7CitwdWJsaWMgdm9pZCByZWdpc3RlckluZmVyZW5jZUNvbnRleHQoUGFyYW1ldGVyaXpl
ZEdlbmVyaWNNZXRob2RCaW5kaW5nIG1ldGhvZCwgSW5mZXJlbmNlQ29udGV4dDE4IGluZkN0eDE4
KSB7CisJaWYgKHRoaXMuaW5mZXJlbmNlQ29udGV4dHMgPT0gbnVsbCkKKwkJdGhpcy5pbmZlcmVu
Y2VDb250ZXh0cyA9IG5ldyBTaW1wbGVMb29rdXBUYWJsZSgpOworCXRoaXMuaW5mZXJlbmNlQ29u
dGV4dHMucHV0KG1ldGhvZCwgaW5mQ3R4MTgpOwogfQorcHVibGljIEluZmVyZW5jZUNvbnRleHQx
OCBnZXRJbmZlcmVuY2VDb250ZXh0KFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBt
ZXRob2QpIHsKKwlpZiAodGhpcy5pbmZlcmVuY2VDb250ZXh0cyA9PSBudWxsKQorCQlyZXR1cm4g
bnVsbDsKKwlyZXR1cm4gKEluZmVyZW5jZUNvbnRleHQxOCkgdGhpcy5pbmZlcmVuY2VDb250ZXh0
cy5nZXQobWV0aG9kKTsKK30KKwogLy8tLSBpbnRlcmZhY2UgSW52b2NhdGlvblNpdGU6IC0tCiBw
dWJsaWMgRXhwcmVzc2lvbkNvbnRleHQgZ2V0RXhwcmVzc2lvbkNvbnRleHQoKSB7CiAJcmV0dXJu
IHRoaXMuZXhwcmVzc2lvbkNvbnRleHQ7CiB9CiBwdWJsaWMgSW5mZXJlbmNlQ29udGV4dDE4IGZy
ZXNoSW5mZXJlbmNlQ29udGV4dChTY29wZSBzY29wZSkgewotCXJldHVybiB0aGlzLmluZmVyZW5j
ZUNvbnRleHQgPSBuZXcgSW5mZXJlbmNlQ29udGV4dDE4KHNjb3BlLCB0aGlzLmFyZ3VtZW50cywg
dGhpcyk7CisJcmV0dXJuIG5ldyBJbmZlcmVuY2VDb250ZXh0MTgoc2NvcGUsIHRoaXMuYXJndW1l
bnRzLCB0aGlzKTsKIH0KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRXhwbGljaXRDb25zdHJ1
Y3RvckNhbGwuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRXhwbGljaXRDb25zdHJ1Y3RvckNhbGwuamF2YQpp
bmRleCA0ODY4NWE0Li42Nzk3MDlkIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0V4cGxpY2l0Q29u
c3RydWN0b3JDYWxsLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9FeHBsaWNpdENvbnN0cnVjdG9yQ2Fs
bC5qYXZhCkBAIC0zNyw2ICszNyw3IEBAIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwu
Y29tcGlsZXIubG9va3VwLkluZmVyZW5jZUNvbnRleHQxODsKIGltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkxvY2FsVHlwZUJpbmRpbmc7CiBpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5NZXRob2RCaW5kaW5nOwogaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuTWV0aG9kU2NvcGU7
CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5QYXJhbWV0
ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVy
bmFsLmNvbXBpbGVyLmxvb2t1cC5Qcm9ibGVtTWV0aG9kQmluZGluZzsKIGltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlJhd1R5cGVCaW5kaW5nOwogaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuUmVmZXJlbmNlQmluZGlu
ZzsKQEAgLTQ3LDYgKzQ4LDcgQEAgaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21w
aWxlci5sb29rdXAuVHlwZUJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFs
LmNvbXBpbGVyLmxvb2t1cC5UeXBlQ29uc3RhbnRzOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5p
bnRlcm5hbC5jb21waWxlci5sb29rdXAuVHlwZUlkczsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlZhcmlhYmxlQmluZGluZzsKK2ltcG9ydCBvcmcuZWNs
aXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIudXRpbC5TaW1wbGVMb29rdXBUYWJsZTsKIAogcHVi
bGljIGNsYXNzIEV4cGxpY2l0Q29uc3RydWN0b3JDYWxsIGV4dGVuZHMgU3RhdGVtZW50IGltcGxl
bWVudHMgSW52b2NhdGlvbiwgRXhwcmVzc2lvbkNvbnRleHQgewogCkBAIC02Niw4ICs2OCw5IEBA
IHB1YmxpYyBjbGFzcyBFeHBsaWNpdENvbnN0cnVjdG9yQ2FsbCBleHRlbmRzIFN0YXRlbWVudCBp
bXBsZW1lbnRzIEludm9jYXRpb24sIEV4CiAKIAkvLyBUT0RPIFJlbW92ZSBvbmNlIERPTVBhcnNl
ciBpcyBhY3RpdmF0ZWQKIAlwdWJsaWMgaW50IHR5cGVBcmd1bWVudHNTb3VyY2VTdGFydDsKLQlw
cml2YXRlIEluZmVyZW5jZUNvbnRleHQxOCBpbmZlcmVuY2VDb250ZXh0OwotCXByaXZhdGUgaW50
IGluZmVyZW5jZUtpbmQ7CisKKwkgLy8gaG9sZCBvbiB0byB0aGlzIGNvbnRleHQgZnJvbSBpbnZv
Y2F0aW9uIGFwcGxpY2FiaWxpdHkgaW5mZXJlbmNlIHVudGlsIGludm9jYXRpb24gdHlwZSBpbmZl
cmVuY2UgKHBlciBtZXRob2QgY2FuZGlkYXRlKToKKwlwcml2YXRlIFNpbXBsZUxvb2t1cFRhYmxl
Lyo8UEdNQixJbmZlcmVuY2VDb250ZXh0MTg+Ki8gaW5mZXJlbmNlQ29udGV4dHM7CiAKIAlwdWJs
aWMgRXhwbGljaXRDb25zdHJ1Y3RvckNhbGwoaW50IGFjY2Vzc01vZGUpIHsKIAkJdGhpcy5hY2Nl
c3NNb2RlID0gYWNjZXNzTW9kZTsKQEAgLTQ5MiwyOSArNDk1LDMyIEBAIHB1YmxpYyBjbGFzcyBF
eHBsaWNpdENvbnN0cnVjdG9yQ2FsbCBleHRlbmRzIFN0YXRlbWVudCBpbXBsZW1lbnRzIEludm9j
YXRpb24sIEV4CiAJcHVibGljIEV4cHJlc3Npb25bXSBhcmd1bWVudHMoKSB7CiAJCXJldHVybiB0
aGlzLmFyZ3VtZW50czsKIAl9Ci0JcHVibGljIEluZmVyZW5jZUNvbnRleHQxOCBpbmZlcmVuY2VD
b250ZXh0KCkgewotCQlyZXR1cm4gdGhpcy5pbmZlcmVuY2VDb250ZXh0OwotCX0KLQlwdWJsaWMg
aW50IGluZmVyZW5jZUtpbmQoKSB7Ci0JCXJldHVybiAodGhpcy5pbmZlcmVuY2VLaW5kICYgSW5m
ZXJlbmNlQ29udGV4dDE4LklORkVSRU5DRV9LSU5EX01BU0spOwotCX0KLQlwdWJsaWMgdm9pZCBz
ZXRJbmZlcmVuY2VLaW5kKGludCBjaGVja0tpbmQpIHsKLQkJdGhpcy5pbmZlcmVuY2VLaW5kID0g
Y2hlY2tLaW5kOwotCX0KLQlwdWJsaWMgdm9pZCBtYXJrSW5mZXJlbmNlRmluaXNoZWQoKSB7Ci0J
CXRoaXMuaW5mZXJlbmNlS2luZCB8PSBJbmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tfRklOSVNIRUQ7
CisJcHVibGljIGJvb2xlYW4gdXBkYXRlQmluZGluZ3MoTWV0aG9kQmluZGluZyB1cGRhdGVkQmlu
ZGluZykgeworCQlpZiAodGhpcy5iaW5kaW5nID09IHVwZGF0ZWRCaW5kaW5nKQorCQkJcmV0dXJu
IGZhbHNlOworCQlpZiAodGhpcy5pbmZlcmVuY2VDb250ZXh0cyAhPSBudWxsKSB7CisJCQlJbmZl
cmVuY2VDb250ZXh0MTggY3R4ID0gKEluZmVyZW5jZUNvbnRleHQxOCl0aGlzLmluZmVyZW5jZUNv
bnRleHRzLnJlbW92ZUtleSh0aGlzLmJpbmRpbmcpOworCQkJaWYgKGN0eCAhPSBudWxsICYmIHVw
ZGF0ZWRCaW5kaW5nIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5n
KSB7CisJCQkJdGhpcy5pbmZlcmVuY2VDb250ZXh0cy5wdXQodXBkYXRlZEJpbmRpbmcsIGN0eCk7
CisJCQkJY3R4Lmhhc0ZpbmlzaGVkID0gdHJ1ZTsKKwkJCX0KKwkJfQorCQl0aGlzLmJpbmRpbmcg
PSB1cGRhdGVkQmluZGluZzsKKwkJcmV0dXJuIHRydWU7CiAJfQotCXB1YmxpYyBib29sZWFuIGhh
c0luZmVyZW5jZUZpbmlzaGVkKCkgewotCQlyZXR1cm4gdGhpcy5pbmZlcmVuY2VLaW5kID09IDAg
Ly8gb25seSByZWxldmFudCBpZiBpbmZlcmVuY2UgaGFzIGJlZW4gc3RhcnRlZAotCQkJCXx8ICh0
aGlzLmluZmVyZW5jZUtpbmQgJiBJbmZlcmVuY2VDb250ZXh0MTguQ0hFQ0tfRklOSVNIRUQpICE9
IDA7CisJcHVibGljIHZvaWQgcmVnaXN0ZXJJbmZlcmVuY2VDb250ZXh0KFBhcmFtZXRlcml6ZWRH
ZW5lcmljTWV0aG9kQmluZGluZyBtZXRob2QsIEluZmVyZW5jZUNvbnRleHQxOCBpbmZDdHgxOCkg
eworCQlpZiAodGhpcy5pbmZlcmVuY2VDb250ZXh0cyA9PSBudWxsKQorCQkJdGhpcy5pbmZlcmVu
Y2VDb250ZXh0cyA9IG5ldyBTaW1wbGVMb29rdXBUYWJsZSgpOworCQl0aGlzLmluZmVyZW5jZUNv
bnRleHRzLnB1dChtZXRob2QsIGluZkN0eDE4KTsKIAl9Ci0JcHVibGljIFR5cGVCaW5kaW5nIHVw
ZGF0ZUJpbmRpbmdzKE1ldGhvZEJpbmRpbmcgdXBkYXRlZEJpbmRpbmcpIHsKLQkJdGhpcy5iaW5k
aW5nID0gdXBkYXRlZEJpbmRpbmc7Ci0JCXJldHVybiBUeXBlQmluZGluZy5WT0lEOyAvLyBub3Qg
YW4gZXhwcmVzc2lvbgorCXB1YmxpYyBJbmZlcmVuY2VDb250ZXh0MTggZ2V0SW5mZXJlbmNlQ29u
dGV4dChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgbWV0aG9kKSB7CisJCWlmICh0
aGlzLmluZmVyZW5jZUNvbnRleHRzID09IG51bGwpCisJCQlyZXR1cm4gbnVsbDsKKwkJcmV0dXJu
IChJbmZlcmVuY2VDb250ZXh0MTgpIHRoaXMuaW5mZXJlbmNlQ29udGV4dHMuZ2V0KG1ldGhvZCk7
CiAJfQogCiAJLy8gLS0gaW50ZXJmYWNlIEludm9jYXRpb25TaXRlOiAtLQogCXB1YmxpYyBJbmZl
cmVuY2VDb250ZXh0MTggZnJlc2hJbmZlcmVuY2VDb250ZXh0KFNjb3BlIHNjb3BlKSB7Ci0JCXJl
dHVybiB0aGlzLmluZmVyZW5jZUNvbnRleHQgPSBuZXcgSW5mZXJlbmNlQ29udGV4dDE4KHNjb3Bl
LCB0aGlzLmFyZ3VtZW50cywgdGhpcyk7CisJCXJldHVybiBuZXcgSW5mZXJlbmNlQ29udGV4dDE4
KHNjb3BlLCB0aGlzLmFyZ3VtZW50cywgdGhpcyk7CiAJfQogfQpkaWZmIC0tZ2l0IGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FzdC9FeHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0V4cHJlc3Npb24uamF2YQppbmRleCA4
NTA0ZjgwLi5iNWVlMDhiIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0V4cHJlc3Npb24uamF2YQor
KysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXN0L0V4cHJlc3Npb24uamF2YQpAQCAtOTUzLDcgKzk1Myw4IEBAIHB1Ymxp
YyBDb25zdGFudCBvcHRpbWl6ZWRCb29sZWFuQ29uc3RhbnQoKSB7CiBwdWJsaWMgYm9vbGVhbiBp
c1BlcnRpbmVudFRvQXBwbGljYWJpbGl0eShUeXBlQmluZGluZyB0YXJnZXRUeXBlLCBNZXRob2RC
aW5kaW5nIG1ldGhvZCkgewogCXJldHVybiB0cnVlOwogfQotLy8gY2FsbCB0aGlzIGJlZm9yZSBy
ZXNvbHZpbmcgYW4gZXhwcmVzc2lvbiBmb3IgdGhlIHNlY29uZCB0aW1lLiBUT0RPOiBpbXBsZW1l
bnQgaW4gbW9yZSBzdWJjbGFzc2VzLCBvciBmaW5kIGEgZGlmZmVyZW50IHN0cmF0ZWd5LgorLy8g
Y2FsbCB0aGlzIGJlZm9yZSByZXNvbHZpbmcgYW4gZXhwcmVzc2lvbiBmb3IgdGhlIHNlY29uZCB0
aW1lLgorLy8gRklYTUU6IHdlIHNob3VsZCBmaW5kIGEgYmV0dGVyIHN0cmF0ZWd5LCBzZWUgTGFt
YmRhRXhwcmVzc2lvbnNUZXN0LnRlc3RMYW1iZGFJbmZlcmVuY2UxKCkgZi4gZm9yIHRlc3RzIHRo
YXQgY3VycmVudGx5IG5lZWQgdGhpcy4KIHZvaWQgdW5yZXNvbHZlKCkgewogCXRoaXMucmVzb2x2
ZWRUeXBlID0gbnVsbDsKIH0KQEAgLTEwNTgsMTUgKzEwNTksNiBAQCBwdWJsaWMgVHlwZUJpbmRp
bmcgcmVzb2x2ZVR5cGVFeHBlY3RpbmcoQmxvY2tTY29wZSBzY29wZSwgVHlwZUJpbmRpbmcgZXhw
ZWN0ZWRUeQogfQogCiAvKioKLSAqIElmIHdlIG1pZ2h0IHN0aWxsIGJlIGluIHRoZSBjb250ZXh0
IG9mIGFuIHVuZmluaXNoZWQgb3V0ZXIgaW5mZXJlbmNlLCB1c2UgdGhpcyBtZXRob2QgdG8KLSAq
IHRlbnRhdGl2ZWx5IHJlc29sdmUgdGhpcyBleHByZXNzaW9uIHdpdGhvdXQgbGVhdmluZyBhbnkg
dW5kZXNpcmVkIHRyYWNlcywgaW4gY2FzZSB3ZSB3aWxsCi0gKiBjb21lIGJhY2sgd2l0aCBhIGJl
dHRlciB0YXJnZXQgdHlwZSBsYXRlci4KLSAqLwotcHVibGljIFR5cGVCaW5kaW5nIHJlc29sdmVU
ZW50YXRpdmVseShCbG9ja1Njb3BlIHNjb3BlLCBUeXBlQmluZGluZyB0YXJnZXRUeXBlKSB7Ci0J
cmV0dXJuIHJlc29sdmVUeXBlKHNjb3BlKTsgLy8gZGVmYXVsdCBpcyB0byBkbyBmdWxsIHJlc29s
dXRpb24gaW4ganVzdCB0aGlzIG9uZSBzdGVwCi19Ci0KLS8qKgogICogT25jZSBvdXRlciBjb250
ZXh0cyBoYXZlIGZpbmFsaXplZCB0aGUgdGFyZ2V0IHR5cGUgZm9yIHRoaXMgZXhwcmVzc2lvbiwK
ICAqIHBlcmZvcm0gYW55IGNoZWNrcyB0aGF0IG1pZ2h0IGhhdmUgYmVlbiBkZWxheWVkIHByZXZp
b3VzbHkuCiAgKiBAcGFyYW0gdGFyZ2V0VHlwZSB0aGUgZmluYWwgdGFyZ2V0IHR5cGUgKGFrYSBl
eHBlY3RlZFR5cGUpIGZvciB0aGlzIGV4cHJlc3Npb24uCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0
L0Z1bmN0aW9uYWxFeHByZXNzaW9uLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxl
ci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Z1bmN0aW9uYWxFeHByZXNz
aW9uLmphdmEKaW5kZXggZjIzNzRlZi4uZWIzOWQxNCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2Uu
amR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9G
dW5jdGlvbmFsRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvRnVuY3Rpb25hbEV4cHJl
c3Npb24uamF2YQpAQCAtMzYsMTAgKzM2LDkgQEAgaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRl
cm5hbC5jb21waWxlci5sb29rdXAuU2NvcGU7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVy
bmFsLmNvbXBpbGVyLmxvb2t1cC5UeXBlQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlR5cGVCaW5kaW5nVmlzaXRvcjsKIAotcHVibGljIGFi
c3RyYWN0IGNsYXNzIEZ1bmN0aW9uYWxFeHByZXNzaW9uIGV4dGVuZHMgRXhwcmVzc2lvbiBpbXBs
ZW1lbnRzIFBvbHlFeHByZXNzaW9uIHsKK3B1YmxpYyBhYnN0cmFjdCBjbGFzcyBGdW5jdGlvbmFs
RXhwcmVzc2lvbiBleHRlbmRzIEV4cHJlc3Npb24gewogCQogCVR5cGVCaW5kaW5nIGV4cGVjdGVk
VHlwZTsKLQlib29sZWFuIGV4cGVjdGVkSXNGaW5hbFRhcmdldFR5cGUgPSBmYWxzZTsgLy8gZmxp
cCB0byB0cnVlIG9uY2UgdGhlIGV4cHJlc3Npb24gY29udGV4dCBoYXMgZGV0ZXJtaW5lZCB0aGUg
ZmluYWwgdGFyZ2V0IHR5cGUgZm9yIHRoaXMgZXhwcmVzc2lvbgogCXB1YmxpYyBNZXRob2RCaW5k
aW5nIGRlc2NyaXB0b3I7CiAJcHVibGljIE1ldGhvZEJpbmRpbmcgYmluZGluZzsgICAgICAgICAg
ICAgICAgIC8vIENvZGUgZ2VuZXJhdGlvbiBiaW5kaW5nLiBNYXkgaW5jbHVkZSBzeW50aGV0aWNz
LiBTZWUgZ2V0TWV0aG9kQmluZGluZygpCiAJcHJvdGVjdGVkIE1ldGhvZEJpbmRpbmcgYWN0dWFs
TWV0aG9kQmluZGluZzsgIC8vIHZvaWQgb2Ygc3ludGhldGljcy4KQEAgLTUxLDcgKzUwLDYgQEAg
cHVibGljIGFic3RyYWN0IGNsYXNzIEZ1bmN0aW9uYWxFeHByZXNzaW9uIGV4dGVuZHMgRXhwcmVz
c2lvbiBpbXBsZW1lbnRzIFBvbHlFeHAKIAlwdWJsaWMgQmxvY2tTY29wZSBlbmNsb3NpbmdTY29w
ZTsKIAlwcm90ZWN0ZWQgYm9vbGVhbiBlbGxpcHNpc0FyZ3VtZW50OwogCXByb3RlY3RlZCBzdGF0
aWMgSUVycm9ySGFuZGxpbmdQb2xpY3kgc2lsZW50RXJyb3JIYW5kbGluZ1BvbGljeSA9IERlZmF1
bHRFcnJvckhhbmRsaW5nUG9saWNpZXMuaWdub3JlQWxsUHJvYmxlbXMoKTsKLQlwcm90ZWN0ZWQg
Ym9vbGVhbiBoYXNJbmZlcmVuY2VGaW5pc2hlZCA9IGZhbHNlOwogCiAJcHVibGljIEZ1bmN0aW9u
YWxFeHByZXNzaW9uKENvbXBpbGF0aW9uUmVzdWx0IGNvbXBpbGF0aW9uUmVzdWx0KSB7CiAJCXRo
aXMuY29tcGlsYXRpb25SZXN1bHQgPSBjb21waWxhdGlvblJlc3VsdDsKQEAgLTcwLDEwICs2OCw3
IEBAIHB1YmxpYyBhYnN0cmFjdCBjbGFzcyBGdW5jdGlvbmFsRXhwcmVzc2lvbiBleHRlbmRzIEV4
cHJlc3Npb24gaW1wbGVtZW50cyBQb2x5RXhwCiAJCXJldHVybiBudWxsOwogCX0KIAlwdWJsaWMg
dm9pZCBzZXRFeHBlY3RlZFR5cGUoVHlwZUJpbmRpbmcgZXhwZWN0ZWRUeXBlKSB7Ci0JCWlmIChl
eHBlY3RlZFR5cGUgPT0gbnVsbCkKLQkJCXRoaXMuZXhwZWN0ZWRUeXBlID0gbnVsbDsgLy8gZm9y
IHJlc2V0Ci0JCWVsc2UKLQkJCXRoaXMuZXhwZWN0ZWRUeXBlID0gdGhpcy5lbGxpcHNpc0FyZ3Vt
ZW50ID8gKChBcnJheUJpbmRpbmcpIGV4cGVjdGVkVHlwZSkuZWxlbWVudHNUeXBlKCkgOiBleHBl
Y3RlZFR5cGU7CisJCXRoaXMuZXhwZWN0ZWRUeXBlID0gdGhpcy5lbGxpcHNpc0FyZ3VtZW50ID8g
KChBcnJheUJpbmRpbmcpIGV4cGVjdGVkVHlwZSkuZWxlbWVudHNUeXBlKCkgOiBleHBlY3RlZFR5
cGU7CiAJfQogCQogCXB1YmxpYyB2b2lkIHNldEV4cHJlc3Npb25Db250ZXh0KEV4cHJlc3Npb25D
b250ZXh0IGNvbnRleHQpIHsKQEAgLTg5LDE0ICs4NCw2IEBAIHB1YmxpYyBhYnN0cmFjdCBjbGFz
cyBGdW5jdGlvbmFsRXhwcmVzc2lvbiBleHRlbmRzIEV4cHJlc3Npb24gaW1wbGVtZW50cyBQb2x5
RXhwCiAJcHVibGljIGJvb2xlYW4gaXNQb2x5RXhwcmVzc2lvbigpIHsKIAkJcmV0dXJuIHRydWU7
IC8vIGFsd2F5cyBhcyBwZXIgaW50cm9kdWN0aW9uIG9mIHBhcnQgRCwgSlNSIDMzNQogCX0KLQkK
LQlwdWJsaWMgdm9pZCBtYXJrSW5mZXJlbmNlRmluaXNoZWQoKSB7Ci0JCXRoaXMuaGFzSW5mZXJl
bmNlRmluaXNoZWQgPSB0cnVlOwotCX0KLQkKLQlwdWJsaWMgYm9vbGVhbiBoYXNJbmZlcmVuY2VG
aW5pc2hlZCgpIHsKLQkJcmV0dXJuIHRoaXMuaGFzSW5mZXJlbmNlRmluaXNoZWQ7Ci0JfQogCiAJ
cHVibGljIFR5cGVCaW5kaW5nIGludm9jYXRpb25UYXJnZXRUeXBlKCkgewogCQlpZiAodGhpcy5l
eHBlY3RlZFR5cGUgPT0gbnVsbCkgcmV0dXJuIG51bGw7CkBAIC0xNDksNTIgKzEzNiw3IEBAIHB1
YmxpYyBhYnN0cmFjdCBjbGFzcyBGdW5jdGlvbmFsRXhwcmVzc2lvbiBleHRlbmRzIEV4cHJlc3Np
b24gaW1wbGVtZW50cyBQb2x5RXhwCiAJCXJldHVybiB0aGlzLnJlc29sdmVkVHlwZSA9IG51bGw7
CiAJfQogCi0JLyoqIER1cmluZyBpbmZlcmVuY2U6IFRyeSB0byBmaW5kIGFuIGFwcGxpY2FibGUg
bWV0aG9kIGJpbmRpbmcgd2l0aG91dCBjYXVzaW5nIHVuZGVzaXJlZCBzaWRlLWVmZmVjdHMuICov
Ci0JcHVibGljIE1ldGhvZEJpbmRpbmcgZmluZENvbXBpbGVUaW1lTWV0aG9kVGFyZ2V0aW5nKFR5
cGVCaW5kaW5nIHRhcmdldFR5cGUsIFNjb3BlIHNjb3BlKSB7Ci0JCWlmICh0aGlzLmhhc0luZmVy
ZW5jZUZpbmlzaGVkKQotCQkJcmV0dXJuIHRoaXMuYmluZGluZzsKLQkJcmV0dXJuIChNZXRob2RC
aW5kaW5nKWludGVybmFsUmVzb2x2ZVRlbnRhdGl2ZWx5KHRhcmdldFR5cGUsIHNjb3BlKVswXTsK
LQl9Ci0KLQkvKiogRHVyaW5nIGluZmVyZW5jZTogVHJ5IHRvIHJlc29sdmUgdGhlIHR5cGUgb2Yg
dGhpcyBleHByZXNzaW9uIHdpdGhvdXQgY2F1c2luZyB1bmRlc2lyZWQgc2lkZS1lZmZlY3RzLiAq
LwotCXB1YmxpYyBUeXBlQmluZGluZyByZXNvbHZlVGVudGF0aXZlbHkoQmxvY2tTY29wZSBzY29w
ZSwgVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSkgewotCQlpZiAodGhpcy5oYXNJbmZlcmVuY2VGaW5p
c2hlZCkKLQkJCXJldHVybiB0aGlzLnJlc29sdmVkVHlwZTsKLQkJcmV0dXJuIChUeXBlQmluZGlu
ZylpbnRlcm5hbFJlc29sdmVUZW50YXRpdmVseSh0YXJnZXRUeXBlLCBzY29wZSlbMV07Ci0JfQot
Ci0JcHJpdmF0ZSBPYmplY3RbXSBpbnRlcm5hbFJlc29sdmVUZW50YXRpdmVseShUeXBlQmluZGlu
ZyB0YXJnZXRUeXBlLCBTY29wZSBzY29wZSkgeyAvLyBUT0RPOiBjb252ZXJ0IHJldHVybiB0byBQ
YWlyPE1ldGhvZEJpbmRpbmcsVHlwZUJpbmRpbmc+Ci0JCS8vIEZJWE1FOiBjb3VsZCBlbmNsb3Np
bmdTY29wZSBzdGlsbCBiZSBudWxsIGhlcmU/PwotCQlJRXJyb3JIYW5kbGluZ1BvbGljeSBvbGRQ
b2xpY3kgPSB0aGlzLmVuY2xvc2luZ1Njb3BlLnByb2JsZW1SZXBvcnRlcigpLnN3aXRjaEVycm9y
SGFuZGxpbmdQb2xpY3koc2lsZW50RXJyb3JIYW5kbGluZ1BvbGljeSk7Ci0JCUV4cHJlc3Npb25D
b250ZXh0IHByZXZpb3VzQ29udGV4dCA9IHRoaXMuZXhwcmVzc2lvbkNvbnRleHQ7Ci0JCU1ldGhv
ZEJpbmRpbmcgcHJldmlvdXNCaW5kaW5nID0gdGhpcy5iaW5kaW5nOwotCQlNZXRob2RCaW5kaW5n
IHByZXZpb3VzRGVzY3JpcHRvciA9IHRoaXMuZGVzY3JpcHRvcjsKLQkJdHJ5IHsKLQkJCXNldEV4
cHJlc3Npb25Db250ZXh0KElOVk9DQVRJT05fQ09OVEVYVCk7Ci0JCQlzZXRFeHBlY3RlZFR5cGUo
dGFyZ2V0VHlwZSk7Ci0JCQl0aGlzLmJpbmRpbmcgPSBudWxsOwotCQkJVHlwZUJpbmRpbmcgdHlw
ZSA9IHJlc29sdmVUeXBlKHRoaXMuZW5jbG9zaW5nU2NvcGUpOwotCQkJcmV0dXJuIG5ldyBPYmpl
Y3RbXSB7IHRoaXMuYmluZGluZywgdHlwZSB9OwotCQl9IGZpbmFsbHkgewotCQkJdGhpcy5lbmNs
b3NpbmdTY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5zd2l0Y2hFcnJvckhhbmRsaW5nUG9saWN5KG9s
ZFBvbGljeSk7Ci0JCQkvLyByZW1vdmUgKmFueSByZWxldmFudCogdHJhY2VzIG9mIHRoaXMgJ2lu
b2ZmaWNpYWwnIHJlc29sdmluZzoKLQkJCXRoaXMuYmluZGluZyA9IHByZXZpb3VzQmluZGluZzsK
LQkJCXRoaXMuZGVzY3JpcHRvciA9IHByZXZpb3VzRGVzY3JpcHRvcjsKLQkJCXRoaXMuaGFzSW5m
ZXJlbmNlRmluaXNoZWQgPSBmYWxzZTsKLQkJCXNldEV4cHJlc3Npb25Db250ZXh0KHByZXZpb3Vz
Q29udGV4dCk7Ci0JCQl0aGlzLmV4cGVjdGVkVHlwZSA9IG51bGw7IC8vIGRvbid0IGNhbGwgc2V0
RXhwZWN0ZWRUeXBlKG51bGwpLCB3b3VsZCBOUEUKLQkJCWNsZWFuVXBBZnRlclRlbnRhdGl2ZVJl
c29sdmUoKTsKLQkJfQotCX0KLQotCXZvaWQgY2xlYW5VcEFmdGVyVGVudGF0aXZlUmVzb2x2ZSgp
IHsKLQkJLy8gbm9wLiBTdWJjbGFzc2VzOiBkbyB5b3VyIGhvbWV3b3JrIQotCX0KLQogCXB1Ymxp
YyB2b2lkIGNoZWNrQWdhaW5zdEZpbmFsVGFyZ2V0VHlwZShUeXBlQmluZGluZyB0YXJnZXRUeXBl
KSB7Ci0JCWlmICh0aGlzLmV4cGVjdGVkSXNGaW5hbFRhcmdldFR5cGUpCi0JCQlyZXR1cm47IC8v
IGFscmVhZHkgY2hlY2tlZAotCQl0aGlzLmV4cGVjdGVkSXNGaW5hbFRhcmdldFR5cGUgPSB0cnVl
OwogCQlyZXNvbHZlVHlwZUV4cGVjdGluZyh0aGlzLmVuY2xvc2luZ1Njb3BlLCB0YXJnZXRUeXBl
KTsKIAl9CiAKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9l
Y2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvSW52b2NhdGlvbi5qYXZhIGIvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FzdC9JbnZvY2F0aW9uLmphdmEKaW5kZXggMmRlYzAxMS4uZWVhY2ViMyAxMDA2NDQKLS0tIGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FzdC9JbnZvY2F0aW9uLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9JbnZvY2F0aW9uLmph
dmEKQEAgLTE3LDM3ICsxNyw0MiBAQCBwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5j
b21waWxlci5hc3Q7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxv
b2t1cC5JbmZlcmVuY2VDb250ZXh0MTg7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFs
LmNvbXBpbGVyLmxvb2t1cC5JbnZvY2F0aW9uU2l0ZTsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIubG9va3VwLk1ldGhvZEJpbmRpbmc7Ci1pbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5UeXBlQmluZGluZzsKK2ltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlBhcmFtZXRlcml6ZWRHZW5lcmlj
TWV0aG9kQmluZGluZzsKIAogLyoqCi0gKiBBYnN0cmFjdGlvbiBmb3IgQVNUIG5vZGVzIHRoYXQg
Y2FuIHRyaWdnZXIgCisgKiBBYnN0cmFjdGlvbiBmb3IgaW52b2NhdGlvbiBBU1Qgbm9kZXMgdGhh
dCBjYW4gdHJpZ2dlciAKICAqIDx1bD4KICAqIDxsaT5JbnZvY2F0aW9uIEFwcGxpY2FiaWxpdHkg
SW5mZXJlbmNlcyAoMTguNS4xKSwgYW5kPC9saT4gCiAgKiA8bGk+SW52b2NhdGlvbiBUeXBlIElu
ZmVyZW5jZSAoMTguNS4yKS48L2xpPgogICogPC91bD4KICAqLwotcHVibGljIGludGVyZmFjZSBJ
bnZvY2F0aW9uIGV4dGVuZHMgSW52b2NhdGlvblNpdGUsIFBvbHlFeHByZXNzaW9uIHsKK3B1Ymxp
YyBpbnRlcmZhY2UgSW52b2NhdGlvbiBleHRlbmRzIEludm9jYXRpb25TaXRlIHsKIAogCUV4cHJl
c3Npb25bXSBhcmd1bWVudHMoKTsKIAogCU1ldGhvZEJpbmRpbmcgYmluZGluZygpOwogCi0JSW5m
ZXJlbmNlQ29udGV4dDE4IGluZmVyZW5jZUNvbnRleHQoKTsKLQotCS8qKiBTZWUge0BsaW5rICNp
bmZlcmVuY2VDb250ZXh0KCl9LiAqLwotCXZvaWQgc2V0SW5mZXJlbmNlS2luZChpbnQgY2hlY2tL
aW5kKTsKLQogCS8qKgotCSAqIEFuc3dlciBvbmUgb2Yge0BsaW5rIEluZmVyZW5jZUNvbnRleHQx
OCNDSEVDS19TVFJJQ1R9LCB7QGxpbmsgSW5mZXJlbmNlQ29udGV4dDE4I0NIRUNLX0xPT1NFfSAK
LQkgKiBvciB7QGxpbmsgSW5mZXJlbmNlQ29udGV4dDE4I0NIRUNLX1ZBUkFSR30sIHRvIHNpZ25h
bCB3aGF0IGtpbmQgb2YgaW5mZXJlbmNlIGhhcyBiZWVuIHVzZWQuCisJICogUmVnaXN0ZXIgdGhl
IGdpdmVuIGluZmVyZW5jZSBjb250ZXh0LCB3aGljaCBwcm9kdWNlZCB0aGUgZ2l2ZW4gbWV0aG9k
IGFzIGl0cyBpbnRlcm1lZGlhdGUgcmVzdWx0LgorCSAqIExhdGVyIHdoZW4gdGhlIHNhbWUgbWV0
aG9kIGlzIHNlbGVjdGVkIGFzIHRoZSBtb3N0IHNwZWNpZmljIG1ldGhvZCwgdGhlIGluZmVyZW5j
ZSBjb250ZXh0CisJICogZm9yIHRoaXMgcGFpciAoSW52b2NhdGlvbiB4IE1ldGhvZEJpbmRpbmcp
IGNhbiBiZSBsb29rZWQgdXAgdXNpbmcge0BsaW5rICNnZXRFeHByZXNzaW9uQ29udGV4dCgpfQor
CSAqIHRvIGNvbnRpbnVlIHRoZSB0eXBlIGluZmVyZW5jZS4KIAkgKi8KLQlpbnQgaW5mZXJlbmNl
S2luZCgpOworCXZvaWQgcmVnaXN0ZXJJbmZlcmVuY2VDb250ZXh0KFBhcmFtZXRlcml6ZWRHZW5l
cmljTWV0aG9kQmluZGluZyBtZXRob2QsIEluZmVyZW5jZUNvbnRleHQxOCBpbmZDdHgxOCk7CisJ
CisJLyoqCisJICogUmV0cmlldmUgYW4gaW5mZXJlbmNlIGNvbnRleHQgZm9yIHRoZSBnaXZlbiBt
ZXRob2Qgd2hpY2ggbXVzdCBoYXZlIGJlZW4gcmVnaXN0ZXJlZAorCSAqIHVzaW5nIHtAbGluayAj
cmVnaXN0ZXJJbmZlcmVuY2VDb250ZXh0KFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGlu
ZywgSW5mZXJlbmNlQ29udGV4dDE4KX0uCisJICogQHBhcmFtIG1ldGhvZCBhbiBpbnRlcm1lZGlh
dGUgcmVzb2x2ZWQgY2FuZGlkYXRlIGZvciB0aGlzIGludm9jYXRpb24KKwkgKiByZXR1cm4gYSBz
dXNwZW5kZWQgaW5mZXJlbmNlIGNvbnRleHQgb3IgbnVsbCBpZiBub25lIHdhcyByZWdpc3RlcmVk
IGZvciB0aGlzIG1ldGhvZC4KKwkgKi8KKwlJbmZlcmVuY2VDb250ZXh0MTggZ2V0SW5mZXJlbmNl
Q29udGV4dChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgbWV0aG9kKTsKIAogCS8q
KgogCSAqIFdoZXJlIHRoZSBBU1Qgbm9kZSBtYXkgaG9sZCByZWZlcmVuY2VzIHRvIHRoZSByZXN1
bHRzIG9mIEludm9jYXRpb24gQXBwbGljYWJpbGl0eSBJbmZlcmVuY2UsCiAJICogdGhpcyBtZXRo
b2QgYWxsb3dzIHRvIHVwZGF0ZSB0aG9zZSByZWZlcmVuY2VzIHRvIHRoZSByZXN1bHQgb2YgSW52
b2NhdGlvbiBUeXBlIEluZmVyZW5jZS4KIAkgKiBOb3RlIHRoYXQgcG90ZW50aWFsbHkgbW9yZSB0
aGFuIGp1c3QgdGhlIG1ldGhvZCBiaW5kaW5nIGlzIHVwZGF0ZWQuCisJICogQHJldHVybiB0cnVl
IGlmIGFuIHVwZGF0ZSBoYXMgaGFwcGVuZWQKIAkgKi8KLQlUeXBlQmluZGluZyB1cGRhdGVCaW5k
aW5ncyhNZXRob2RCaW5kaW5nIHVwZGF0ZWRCaW5kaW5nKTsKLQorCWJvb2xlYW4gdXBkYXRlQmlu
ZGluZ3MoTWV0aG9kQmluZGluZyB1cGRhdGVkQmluZGluZyk7CiB9CmRpZmYgLS1naXQgYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvYXN0L0xhbWJkYUV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lv
bi5qYXZhCmluZGV4IDY3M2RhODEuLjA0N2UyYjIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFt
YmRhRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTGFtYmRhRXhwcmVzc2lvbi5qYXZh
CkBAIC0zNjgsMjYgKzM2OCw2IEBAIHB1YmxpYyBjbGFzcyBMYW1iZGFFeHByZXNzaW9uIGV4dGVu
ZHMgRnVuY3Rpb25hbEV4cHJlc3Npb24gaW1wbGVtZW50cyBSZWZlcmVuY2VDCiAJCX0KIAkJcmV0
dXJuIHRoaXMucmVzb2x2ZWRUeXBlOwogCX0KLQkKLQl2b2lkIGNsZWFuVXBBZnRlclRlbnRhdGl2
ZVJlc29sdmUoKSB7Ci0JCS8vIHJlbW92ZSB0cmFjZXMgb2YgYXR0ZW1wdHMgdG8gcmVzb2x2ZSB0
aGUgYXJndW1lbnQgYmVmb3JlIHdlIGhhdmUgdGhlIGZpbmFsIHRhcmdldCB0eXBlOgotCQlpZiAo
dGhpcy5hcmd1bWVudHMgIT0gbnVsbCkKLQkJCWZvciAoaW50IGkgPSAwOyBpIDwgdGhpcy5hcmd1
bWVudHMubGVuZ3RoOyBpKyspCi0JCQkJdGhpcy5hcmd1bWVudHNbaV0uYmluZGluZyA9IG51bGw7
Ci0JCS8vIGFsc28gcmVtb3ZlIHRyYWNlcyBvZiByZWZlcmVuY2VzIHRvIHRoaXMgYXJndW1lbnQK
LQkJaWYgKHRoaXMuYm9keSAhPSBudWxsKQotCQkJdGhpcy5ib2R5LnRyYXZlcnNlKG5ldyBBU1RW
aXNpdG9yKCkgewotCQkJCXB1YmxpYyBib29sZWFuIHZpc2l0KFNpbmdsZU5hbWVSZWZlcmVuY2Ug
c2luZ2xlTmFtZVJlZmVyZW5jZSwgQmxvY2tTY29wZSBibG9ja1Njb3BlKSB7Ci0JCQkJCWlmIChz
aW5nbGVOYW1lUmVmZXJlbmNlLmJpbmRpbmcgaW5zdGFuY2VvZiBMb2NhbFZhcmlhYmxlQmluZGlu
ZykgewotCQkJCQkJc2luZ2xlTmFtZVJlZmVyZW5jZS5iaXRzICY9IH5BU1ROb2RlLlJlc3RyaWN0
aXZlRmxhZ01BU0s7Ci0JCQkJCQlzaW5nbGVOYW1lUmVmZXJlbmNlLmJpdHMgfD0gQmluZGluZy5W
QVJJQUJMRTsKLQkJCQkJCXNpbmdsZU5hbWVSZWZlcmVuY2UuYWN0dWFsUmVjZWl2ZXJUeXBlID0g
bnVsbDsKLQkJCQkJCXNpbmdsZU5hbWVSZWZlcmVuY2UuYmluZGluZyA9IG51bGw7Ci0JCQkJCX0K
LQkJCQkJcmV0dXJuIHRydWU7Ci0JCQkJfQotCQkJfSwgdGhpcy5zY29wZSk7Ci0JfQogCiAJcHVi
bGljIGJvb2xlYW4gYXJndW1lbnRzVHlwZUVsaWRlZCgpIHsKIAkJcmV0dXJuIHRoaXMuYXJndW1l
bnRzLmxlbmd0aCA+IDAgJiYgdGhpcy5hcmd1bWVudHNbMF0uaGFzRWxpZGVkVHlwZSgpOwpAQCAt
Njg2LDcgKzY2Niw3IEBAIHB1YmxpYyBjbGFzcyBMYW1iZGFFeHByZXNzaW9uIGV4dGVuZHMgRnVu
Y3Rpb25hbEV4cHJlc3Npb24gaW1wbGVtZW50cyBSZWZlcmVuY2VDCiAJCQkJfSBlbHNlIHsKIAkJ
CQkJdGhpcy52b2lkQ29tcGF0aWJsZSA9ICgoRXhwcmVzc2lvbikgdGhpcy5ib2R5KS5zdGF0ZW1l
bnRFeHByZXNzaW9uKCk7CiAJCQkJCS8vIFRPRE86IGluIGdldFJlc29sdmVkQ29weUZvckluZmVy
ZW5jZVRhcmdldGluZygpIHdlIG5lZWQgdG8gY2hlY2sgaWYgdGhlIGV4cHJlc3Npb24KLQkJCQkJ
Ly8gICAgICAgICpjb3VsZCogYWxzbyBwcm9jdWRlIGEgdmFsdWUgYW5kIHNldCB2YWx1ZUNvbXBh
dGlibGUgYWNjb3JkaW5nbHkuCisJCQkJCS8vICAgICAgICAqY291bGQqIGFsc28gcHJvZHVjZSBh
IHZhbHVlIGFuZCBzZXQgdmFsdWVDb21wYXRpYmxlIGFjY29yZGluZ2x5LgogCQkJCQkvLyAgICAg
ICAgSXMgdGhhdCBuZWVkZWQgYWxzbyBoZXJlPwogCQkJCQl0aGlzLnNoYXBlQW5hbHlzaXNDb21w
bGV0ZSA9IHRydWU7CiAJCQkJfQpAQCAtNzY3LDcgKzc0Nyw3IEBAIHB1YmxpYyBjbGFzcyBMYW1i
ZGFFeHByZXNzaW9uIGV4dGVuZHMgRnVuY3Rpb25hbEV4cHJlc3Npb24gaW1wbGVtZW50cyBSZWZl
cmVuY2VDCiAJCQl0aGlzLmhhc0lnbm9yZWRNYW5kYXRvcnlFcnJvcnMgPSBmYWxzZTsKIAkJCVR5
cGVCaW5kaW5nIHR5cGUgPSBjb3B5LnJlc29sdmVUeXBlKHRoaXMuZW5jbG9zaW5nU2NvcGUpOwog
CQkJaWYgKHRoaXMuYm9keSBpbnN0YW5jZW9mIEJsb2NrKSB7Ci0JCQkJaWYgKHRoaXMucmV0dXJu
c1ZvaWQpIHsKKwkJCQlpZiAoY29weS5yZXR1cm5zVm9pZCkgewogCQkJCQljb3B5LnNoYXBlQW5h
bHlzaXNDb21wbGV0ZSA9IHRydWU7CiAJCQkJfQogCQkJfSBlbHNlIHsKQEAgLTc4MCwxNCArNzYw
LDE1IEBAIHB1YmxpYyBjbGFzcyBMYW1iZGFFeHByZXNzaW9uIGV4dGVuZHMgRnVuY3Rpb25hbEV4
cHJlc3Npb24gaW1wbGVtZW50cyBSZWZlcmVuY2VDCiAJCQkJY29weS5zaGFwZUFuYWx5c2lzQ29t
cGxldGUgPSB0cnVlOwogCQkJfQogCQkJLy8gRG8gbm90IHByb2NlZWQgd2l0aCBkYXRhL2NvbnRy
b2wgZmxvdyBhbmFseXNpcyBpZiByZXNvbHZlIGVuY291bnRlcmVkIGVycm9ycy4KLQkJCWlmICh0
eXBlID09IG51bGwgfHwgIXR5cGUuaXNWYWxpZEJpbmRpbmcoKSB8fCB0aGlzLmhhc0lnbm9yZWRN
YW5kYXRvcnlFcnJvcnMgfHwgZW5jbG9zaW5nU2NvcGVzSGF2ZUVycm9ycygpKSB7Ci0JCQkJcmV0
dXJuIG51bGw7CisJCQlpZiAodHlwZSAhPSBudWxsICYmIHR5cGUuaXNWYWxpZEJpbmRpbmcoKSAm
JiAhdGhpcy5oYXNJZ25vcmVkTWFuZGF0b3J5RXJyb3JzICYmICFlbmNsb3NpbmdTY29wZXNIYXZl
RXJyb3JzKCkpIHsKKwkJCQkvLyB2YWx1ZSBjb21wYXRpYmlsaXR5IG9mIGJsb2NrIGxhbWJkYSdz
IGlzIHRoZSBvbmx5IG9wZW4gcXVlc3Rpb24uCisJCQkJaWYgKCFjb3B5LnNoYXBlQW5hbHlzaXND
b21wbGV0ZSkKKwkJCQkJY29weS52YWx1ZUNvbXBhdGlibGUgPSBjb3B5LmRvZXNOb3RDb21wbGV0
ZU5vcm1hbGx5KCk7CisJCQl9IGVsc2UgeworCQkJCWlmICghY29weS5yZXR1cm5zVm9pZCkKKwkJ
CQkJY29weS52YWx1ZUNvbXBhdGlibGUgPSB0cnVlOyAvLyBvcHRpbWlzdGljYWxseSwgVE9ETzog
aXMgdGhpcyBPSz8/CiAJCQl9CiAJCQkKLQkJCS8vIHZhbHVlIGNvbXBhdGliaWxpdHkgb2YgYmxv
Y2sgbGFtYmRhJ3MgaXMgdGhlIG9ubHkgb3BlbiBxdWVzdGlvbi4KLQkJCWlmICghY29weS5zaGFw
ZUFuYWx5c2lzQ29tcGxldGUpCi0JCQkJY29weS52YWx1ZUNvbXBhdGlibGUgPSBjb3B5LmRvZXNO
b3RDb21wbGV0ZU5vcm1hbGx5KCk7Ci0JCQkKIAkJCWNvcHkuc2hhcGVBbmFseXNpc0NvbXBsZXRl
ID0gdHJ1ZTsKIAkJfSBmaW5hbGx5IHsKIAkJCWNvbXBpbGVyT3B0aW9ucy5pc0Fubm90YXRpb25C
YXNlZE51bGxBbmFseXNpc0VuYWJsZWQgPSBhbmFseXplTlBFOwpkaWZmIC0tZ2l0IGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2FzdC9NZXNzYWdlU2VuZC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9NZXNzYWdlU2VuZC5qYXZhCmluZGV4
IDk2NjcxZjUuLmIzYmNjYWIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTWVzc2FnZVNlbmQuamF2
YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYXN0L01lc3NhZ2VTZW5kLmphdmEKQEAgLTgzLDYgKzgzLDcgQEAgaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuVHlwZUNvbnN0YW50
czsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLlR5cGVJ
ZHM7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5UeXBl
VmFyaWFibGVCaW5kaW5nOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxl
ci5wcm9ibGVtLlByb2JsZW1TZXZlcml0aWVzOworaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRl
cm5hbC5jb21waWxlci51dGlsLlNpbXBsZUxvb2t1cFRhYmxlOwogCiBwdWJsaWMgY2xhc3MgTWVz
c2FnZVNlbmQgZXh0ZW5kcyBFeHByZXNzaW9uIGltcGxlbWVudHMgSW52b2NhdGlvbiB7CiAKQEAg
LTEwMCw4ICsxMDEsOSBAQCBwdWJsaWMgY2xhc3MgTWVzc2FnZVNlbmQgZXh0ZW5kcyBFeHByZXNz
aW9uIGltcGxlbWVudHMgSW52b2NhdGlvbiB7CiAJcHVibGljIFR5cGVSZWZlcmVuY2VbXSB0eXBl
QXJndW1lbnRzOwogCXB1YmxpYyBUeXBlQmluZGluZ1tdIGdlbmVyaWNUeXBlQXJndW1lbnRzOwog
CXByaXZhdGUgRXhwcmVzc2lvbkNvbnRleHQgZXhwcmVzc2lvbkNvbnRleHQgPSBWQU5JTExBX0NP
TlRFWFQ7Ci0JcHJpdmF0ZSBpbnQgaW5mZXJlbmNlS2luZCA9IDA7Ci0JcHJpdmF0ZSBJbmZlcmVu
Y2VDb250ZXh0MTggaW5mZXJlbmNlQ29udGV4dDsKKworCSAvLyBob2xkIG9uIHRvIHRoaXMgY29u
dGV4dCBmcm9tIGludm9jYXRpb24gYXBwbGljYWJpbGl0eSBpbmZlcmVuY2UgdW50aWwgaW52b2Nh
dGlvbiB0eXBlIGluZmVyZW5jZSAocGVyIG1ldGhvZCBjYW5kaWRhdGUpOgorCXByaXZhdGUgU2lt
cGxlTG9va3VwVGFibGUvKjxQR01CLEluZmVyZW5jZUNvbnRleHQxOD4qLyBpbmZlcmVuY2VDb250
ZXh0czsKIAogcHVibGljIEZsb3dJbmZvIGFuYWx5c2VDb2RlKEJsb2NrU2NvcGUgY3VycmVudFNj
b3BlLCBGbG93Q29udGV4dCBmbG93Q29udGV4dCwgRmxvd0luZm8gZmxvd0luZm8pIHsKIAlib29s
ZWFuIG5vblN0YXRpYyA9ICF0aGlzLmJpbmRpbmcuaXNTdGF0aWMoKTsKQEAgLTg0OSwxMSArODUx
LDcgQEAgcHJvdGVjdGVkIHZvaWQgZmluZE1ldGhvZEJpbmRpbmcoQmxvY2tTY29wZSBzY29wZSwg
VHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzLAogCQkJOiBzY29wZS5nZXRNZXRob2QodGhpcy5h
Y3R1YWxSZWNlaXZlclR5cGUsIHRoaXMuc2VsZWN0b3IsIGFyZ3VtZW50VHlwZXMsIHRoaXMpOwog
CQogCWlmIChwb2x5RXhwcmVzc2lvblNlZW4pCi0JCWlmIChyZXNvbHZlUG9seUV4cHJlc3Npb25B
cmd1bWVudHModGhpcywgc2NvcGUsIHRoaXMuYmluZGluZywgYXJndW1lbnRUeXBlcykpIHsKLQkJ
CXRoaXMuYmluZGluZyA9IHRoaXMucmVjZWl2ZXIuaXNJbXBsaWNpdFRoaXMoKQotCQkJCQk/IHNj
b3BlLmdldEltcGxpY2l0TWV0aG9kKHRoaXMuc2VsZWN0b3IsIGFyZ3VtZW50VHlwZXMsIHRoaXMp
Ci0JCQkJCTogc2NvcGUuZ2V0TWV0aG9kKHRoaXMuYWN0dWFsUmVjZWl2ZXJUeXBlLCB0aGlzLnNl
bGVjdG9yLCBhcmd1bWVudFR5cGVzLCB0aGlzKTsKLQkJfQorCQlyZXNvbHZlUG9seUV4cHJlc3Np
b25Bcmd1bWVudHModGhpcywgc2NvcGUsIHRoaXMuYmluZGluZywgYXJndW1lbnRUeXBlcyk7CiB9
CiAKIHB1YmxpYyB2b2lkIHNldEFjdHVhbFJlY2VpdmVyVHlwZShSZWZlcmVuY2VCaW5kaW5nIHJl
Y2VpdmVyVHlwZSkgewpAQCAtOTU2LDQxICs5NTQsMzUgQEAgcHVibGljIE1ldGhvZEJpbmRpbmcg
YmluZGluZygpIHsKIHB1YmxpYyBFeHByZXNzaW9uW10gYXJndW1lbnRzKCkgewogCXJldHVybiB0
aGlzLmFyZ3VtZW50czsKIH0KLXB1YmxpYyBJbmZlcmVuY2VDb250ZXh0MTggZnJlc2hJbmZlcmVu
Y2VDb250ZXh0KFNjb3BlIHNjb3BlKSB7Ci0JSW5mZXJlbmNlQ29udGV4dDE4IG91dGVyID0gdGhp
cy5pbmZlcmVuY2VDb250ZXh0ICE9IG51bGwgPyB0aGlzLmluZmVyZW5jZUNvbnRleHQub3V0ZXJD
b250ZXh0IDogbnVsbDsKLQl0aGlzLmluZmVyZW5jZUNvbnRleHQgPSBuZXcgSW5mZXJlbmNlQ29u
dGV4dDE4KHNjb3BlLCB0aGlzLmFyZ3VtZW50cywgdGhpcyk7Ci0JdGhpcy5pbmZlcmVuY2VDb250
ZXh0Lm91dGVyQ29udGV4dCA9IG91dGVyOwotCXJldHVybiB0aGlzLmluZmVyZW5jZUNvbnRleHQ7
Ci19Ci0vKioKLSAqIEhlcmUgaW5mZXJlbmNlIHNpZ25hbHMgaWYgaXQgaGFzIGVzdGFibGlzaGVk
IGFwcGxpY2FiaWxpdHkuCi0gKiBJZiBzbywgaXQgc2V0cyB0aGUgY29ycmVzcG9uZGluZyBjaGVj
a0tpbmQgKHNlZSB7QGxpbmsgSW5mZXJlbmNlQ29udGV4dDE4I0NIRUNLX1NUUklDVH0gZXRjLiku
Ci0gKiBXaGVuIGxhdGVyIHRoZSBtZXNzYWdlIHNlbmQgaXMgdG91Y2hlZCBhZ2FpbiBhcyBhbiBl
bGVtZW50IGluIGFuIG91dGVyIGV4cHJlc3Npb24sCi0gKiB3ZSByZS11c2UgdGhpcyBiaXQgdG8g
cGVyZm9ybSBvbmx5IG9uZSBraW5kIG9mIGNoZWNrLgotICogVE9ETyhzdGVwaGFuKTogY2hlY2sg
aWYgdGhpcyBpcyBzYW5jdGlvbmVkIGJ5IHRoZSBzcGVjLgotICogVE9ETyhzdGVwaGFuKTogY2Yu
IHtAbGluayBFeHByZXNzaW9uI3RhZ0FzRWxsaXBzaXNBcmd1bWVudH0gKG5vdCBpbXBsZW1lbnRl
ZCBpbiB0aGlzIGNsYXNzKQotICovCi1wdWJsaWMgdm9pZCBzZXRJbmZlcmVuY2VLaW5kKGludCBj
aGVja0tpbmQpIHsKLQl0aGlzLmluZmVyZW5jZUtpbmQgPSBjaGVja0tpbmQ7Ci19Ci1wdWJsaWMg
aW50IGluZmVyZW5jZUtpbmQoKSB7Ci0JcmV0dXJuICh0aGlzLmluZmVyZW5jZUtpbmQgJiBJbmZl
cmVuY2VDb250ZXh0MTguSU5GRVJFTkNFX0tJTkRfTUFTSyk7CitwdWJsaWMgRXhwcmVzc2lvbkNv
bnRleHQgZ2V0RXhwcmVzc2lvbkNvbnRleHQoKSB7CisJcmV0dXJuIHRoaXMuZXhwcmVzc2lvbkNv
bnRleHQ7CiB9Ci1wdWJsaWMgdm9pZCBtYXJrSW5mZXJlbmNlRmluaXNoZWQoKSB7Ci0JdGhpcy5p
bmZlcmVuY2VLaW5kIHw9IEluZmVyZW5jZUNvbnRleHQxOC5DSEVDS19GSU5JU0hFRDsKK3B1Ymxp
YyB2b2lkIHJlZ2lzdGVySW5mZXJlbmNlQ29udGV4dChQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhv
ZEJpbmRpbmcgbWV0aG9kLCBJbmZlcmVuY2VDb250ZXh0MTggaW5mQ3R4MTgpIHsKKwlpZiAodGhp
cy5pbmZlcmVuY2VDb250ZXh0cyA9PSBudWxsKQorCQl0aGlzLmluZmVyZW5jZUNvbnRleHRzID0g
bmV3IFNpbXBsZUxvb2t1cFRhYmxlKCk7CisJdGhpcy5pbmZlcmVuY2VDb250ZXh0cy5wdXQobWV0
aG9kLCBpbmZDdHgxOCk7CiB9Ci1wdWJsaWMgYm9vbGVhbiBoYXNJbmZlcmVuY2VGaW5pc2hlZCgp
IHsKLQlyZXR1cm4gKHRoaXMuaW5mZXJlbmNlQ29udGV4dCA9PSBudWxsICYmIHRoaXMuaW5mZXJl
bmNlS2luZCA9PSAwKSAvLyBvbmx5IHJlbGV2YW50IGlmIGluZmVyZW5jZSBoYXMgYmVlbiBzdGFy
dGVkCi0JCQl8fCAodGhpcy5pbmZlcmVuY2VLaW5kICYgSW5mZXJlbmNlQ29udGV4dDE4LkNIRUNL
X0ZJTklTSEVEKSAhPSAwOworcHVibGljIEluZmVyZW5jZUNvbnRleHQxOCBnZXRJbmZlcmVuY2VD
b250ZXh0KFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBtZXRob2QpIHsKKwlpZiAo
dGhpcy5pbmZlcmVuY2VDb250ZXh0cyA9PSBudWxsKQorCQlyZXR1cm4gbnVsbDsKKwlyZXR1cm4g
KEluZmVyZW5jZUNvbnRleHQxOCkgdGhpcy5pbmZlcmVuY2VDb250ZXh0cy5nZXQobWV0aG9kKTsK
IH0KLXB1YmxpYyBUeXBlQmluZGluZyB1cGRhdGVCaW5kaW5ncyhNZXRob2RCaW5kaW5nIHVwZGF0
ZWRCaW5kaW5nKSB7CitwdWJsaWMgYm9vbGVhbiB1cGRhdGVCaW5kaW5ncyhNZXRob2RCaW5kaW5n
IHVwZGF0ZWRCaW5kaW5nKSB7CisJaWYgKHRoaXMuYmluZGluZyA9PSB1cGRhdGVkQmluZGluZykK
KwkJcmV0dXJuIGZhbHNlOworCWlmICh0aGlzLmluZmVyZW5jZUNvbnRleHRzICE9IG51bGwpIHsK
KwkJSW5mZXJlbmNlQ29udGV4dDE4IGN0eCA9IChJbmZlcmVuY2VDb250ZXh0MTgpdGhpcy5pbmZl
cmVuY2VDb250ZXh0cy5yZW1vdmVLZXkodGhpcy5iaW5kaW5nKTsKKwkJaWYgKGN0eCAhPSBudWxs
ICYmIHVwZGF0ZWRCaW5kaW5nIGluc3RhbmNlb2YgUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RC
aW5kaW5nKSB7CisJCQl0aGlzLmluZmVyZW5jZUNvbnRleHRzLnB1dCh1cGRhdGVkQmluZGluZywg
Y3R4KTsKKwkJCWN0eC5oYXNGaW5pc2hlZD10cnVlOworCQl9CisJfQogCXRoaXMuYmluZGluZyA9
IHVwZGF0ZWRCaW5kaW5nOwotCXJldHVybiB0aGlzLnJlc29sdmVkVHlwZSA9IHVwZGF0ZWRCaW5k
aW5nLnJldHVyblR5cGU7Ci19Ci1wdWJsaWMgRXhwcmVzc2lvbkNvbnRleHQgZ2V0RXhwcmVzc2lv
bkNvbnRleHQoKSB7Ci0JcmV0dXJuIHRoaXMuZXhwcmVzc2lvbkNvbnRleHQ7CisJdGhpcy5yZXNv
bHZlZFR5cGUgPSB1cGRhdGVkQmluZGluZy5yZXR1cm5UeXBlOworCXJldHVybiB0cnVlOwogfQot
cHVibGljIEluZmVyZW5jZUNvbnRleHQxOCBpbmZlcmVuY2VDb250ZXh0KCkgewotCXJldHVybiB0
aGlzLmluZmVyZW5jZUNvbnRleHQ7CisvLyAtLSBJbnRlcmZhY2UgSW52b2NhdGlvblNpdGU6IC0t
CitwdWJsaWMgSW5mZXJlbmNlQ29udGV4dDE4IGZyZXNoSW5mZXJlbmNlQ29udGV4dChTY29wZSBz
Y29wZSkgeworCXJldHVybiBuZXcgSW5mZXJlbmNlQ29udGV4dDE4KHNjb3BlLCB0aGlzLmFyZ3Vt
ZW50cywgdGhpcyk7CiB9CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1BvbHlFeHByZXNzaW9u
LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYXN0L1BvbHlFeHByZXNzaW9uLmphdmEKZGVsZXRlZCBmaWxlIG1vZGUg
MTAwNjQ0CmluZGV4IDZiNzQxZGYuLjAwMDAwMDAKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9Qb2x5RXhwcmVz
c2lvbi5qYXZhCisrKyAvZGV2L251bGwKQEAgLTEsMjggKzAsMCBAQAotLyoqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioKLSAqIENvcHlyaWdodCAoYykgMjAxMyBHSyBTb2Z0d2FyZSBBRy4KLSAqIEFsbCBy
aWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlh
bHMKLSAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2Ug
UHVibGljIExpY2Vuc2UgdjEuMAotICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRp
b24sIGFuZCBpcyBhdmFpbGFibGUgYXQKLSAqIGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwv
ZXBsLXYxMC5odG1sCi0gKgotICogVGhpcyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBhbiBlYXJs
eS1kcmFmdCBzcGVjaWZpY2F0aW9uIGRldmVsb3BlZCB1bmRlciB0aGUgSmF2YQotICogQ29tbXVu
aXR5IFByb2Nlc3MgKEpDUCkgYW5kIGlzIG1hZGUgYXZhaWxhYmxlIGZvciB0ZXN0aW5nIGFuZCBl
dmFsdWF0aW9uIHB1cnBvc2VzCi0gKiBvbmx5LiBUaGUgY29kZSBpcyBub3QgY29tcGF0aWJsZSB3
aXRoIGFueSBzcGVjaWZpY2F0aW9uIG9mIHRoZSBKQ1AuCi0gKgotICogQ29udHJpYnV0b3JzOgot
ICogICAgIFN0ZXBoYW4gSGVycm1hbm4gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24K
LSAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqLwotcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJu
YWwuY29tcGlsZXIuYXN0OwotCi0vKioKLSAqIEFic3RyYWN0aW9uIG9mIEFTVCBub2RlcyB0aGF0
IGNhbiBiZSBwb2x5IGV4cHJlc3Npb25zIGFuZCBwYXJ0aWNpcGF0ZSBpbiB0eXBlIGluZmVyZW5j
ZS4KLSAqIChub3QgaW5jbHVkZWQ6IENvbmRpdGlvbmFsRXhwcmVzc2lvbikuCi0gKi8KLXB1Ymxp
YyBpbnRlcmZhY2UgUG9seUV4cHJlc3Npb24gewotCi0JLyoqIE1hcmsgdGhhdCBpbmZlcmVuY2Ug
Zm9yIHRoaXMgZXhwcmVzc2lvbiBoYXMgZmluaXNoZWQuICovCi0Jdm9pZCBtYXJrSW5mZXJlbmNl
RmluaXNoZWQoKTsKLQotCS8qKiBBbnN3ZXIgd2hldGhlciB0eXBlIGluZmVyZW5jZSBmb3IgdGhp
cyBleHByZXNzaW9uIGhhcyBmaW5pc2hlZCAoaWYgbmVlZGVkKS4gKi8KLQlib29sZWFuIGhhc0lu
ZmVyZW5jZUZpbmlzaGVkKCk7Ci19CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1JlZmVyZW5jZUV4
cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUmVmZXJlbmNlRXhwcmVzc2lvbi5qYXZhCmluZGV4
IDBlMmM5MjUuLjE0YjkwYmYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUmVmZXJlbmNlRXhwcmVz
c2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNl
L2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUmVmZXJlbmNlRXhwcmVzc2lvbi5qYXZhCkBAIC01
MjQsNiArNTI0LDcgQEAgcHVibGljIGNsYXNzIFJlZmVyZW5jZUV4cHJlc3Npb24gZXh0ZW5kcyBG
dW5jdGlvbmFsRXhwcmVzc2lvbiBpbXBsZW1lbnRzIEludm9jYXQKICAgICAJcmV0dXJuIHRoaXMu
cmVzb2x2ZWRUeXBlOyAvLyBQaGV3ICEKIAl9CiAKKwkvKiogRHVyaW5nIGluZmVyZW5jZTogVHJ5
IHRvIGZpbmQgYW4gYXBwbGljYWJsZSBtZXRob2QgYmluZGluZyB3aXRob3V0IGNhdXNpbmcgdW5k
ZXNpcmVkIHNpZGUtZWZmZWN0cy4gKi8KIAlwdWJsaWMgTWV0aG9kQmluZGluZyBmaW5kQ29tcGls
ZVRpbWVNZXRob2RUYXJnZXRpbmcoVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSwgU2NvcGUgc2NvcGUp
IHsKIAkJaWYgKHRoaXMuZXhhY3RNZXRob2RCaW5kaW5nICE9IG51bGwpIHsKIAkJCS8vIFRPRE86
IHNob3VsZG4ndCBleHRhY3RNZXRob2RCaW5kaW5nIGFscmVhZHkgYmUgcGFyYW1ldGVyaXplZD8K
QEAgLTUzMiw3ICs1MzMsMjkgQEAgcHVibGljIGNsYXNzIFJlZmVyZW5jZUV4cHJlc3Npb24gZXh0
ZW5kcyBGdW5jdGlvbmFsRXhwcmVzc2lvbiBpbXBsZW1lbnRzIEludm9jYXQKIAkJCX0KIAkJCXJl
dHVybiB0aGlzLmV4YWN0TWV0aG9kQmluZGluZzsKIAkJfQotCQlyZXR1cm4gc3VwZXIuZmluZENv
bXBpbGVUaW1lTWV0aG9kVGFyZ2V0aW5nKHRhcmdldFR5cGUsIHNjb3BlKTsKKwkJcmV0dXJuIGlu
dGVybmFsUmVzb2x2ZVRlbnRhdGl2ZWx5KHRhcmdldFR5cGUsIHNjb3BlKTsKKwl9CisKKwlNZXRo
b2RCaW5kaW5nIGludGVybmFsUmVzb2x2ZVRlbnRhdGl2ZWx5KFR5cGVCaW5kaW5nIHRhcmdldFR5
cGUsIFNjb3BlIHNjb3BlKSB7CisJCS8vIEZJWE1FOiBjb3VsZCBlbmNsb3NpbmdTY29wZSBzdGls
bCBiZSBudWxsIGhlcmU/PworCQlJRXJyb3JIYW5kbGluZ1BvbGljeSBvbGRQb2xpY3kgPSB0aGlz
LmVuY2xvc2luZ1Njb3BlLnByb2JsZW1SZXBvcnRlcigpLnN3aXRjaEVycm9ySGFuZGxpbmdQb2xp
Y3koc2lsZW50RXJyb3JIYW5kbGluZ1BvbGljeSk7CisJCUV4cHJlc3Npb25Db250ZXh0IHByZXZp
b3VzQ29udGV4dCA9IHRoaXMuZXhwcmVzc2lvbkNvbnRleHQ7CisJCU1ldGhvZEJpbmRpbmcgcHJl
dmlvdXNCaW5kaW5nID0gdGhpcy5iaW5kaW5nOworCQlNZXRob2RCaW5kaW5nIHByZXZpb3VzRGVz
Y3JpcHRvciA9IHRoaXMuZGVzY3JpcHRvcjsKKwkJdHJ5IHsKKwkJCXNldEV4cHJlc3Npb25Db250
ZXh0KElOVk9DQVRJT05fQ09OVEVYVCk7CisJCQlzZXRFeHBlY3RlZFR5cGUodGFyZ2V0VHlwZSk7
CisJCQl0aGlzLmJpbmRpbmcgPSBudWxsOworCQkJcmVzb2x2ZVR5cGUodGhpcy5lbmNsb3NpbmdT
Y29wZSk7CisJCQlyZXR1cm4gdGhpcy5iaW5kaW5nOworCQl9IGZpbmFsbHkgeworCQkJdGhpcy5l
bmNsb3NpbmdTY29wZS5wcm9ibGVtUmVwb3J0ZXIoKS5zd2l0Y2hFcnJvckhhbmRsaW5nUG9saWN5
KG9sZFBvbGljeSk7CisJCQkvLyByZW1vdmUgKmFueSByZWxldmFudCogdHJhY2VzIG9mIHRoaXMg
J2lub2ZmaWNpYWwnIHJlc29sdmluZzoKKwkJCXRoaXMuYmluZGluZyA9IHByZXZpb3VzQmluZGlu
ZzsKKwkJCXRoaXMuZGVzY3JpcHRvciA9IHByZXZpb3VzRGVzY3JpcHRvcjsKKwkJCXNldEV4cHJl
c3Npb25Db250ZXh0KHByZXZpb3VzQ29udGV4dCk7CisJCQl0aGlzLmV4cGVjdGVkVHlwZSA9IG51
bGw7IC8vIGRvbid0IGNhbGwgc2V0RXhwZWN0ZWRUeXBlKG51bGwpLCB3b3VsZCBOUEUKKwkJfQog
CX0KIAogCXB1YmxpYyBib29sZWFuIGlzQ29uc3RydWN0b3JSZWZlcmVuY2UoKSB7CkBAIC01NjQs
MTEgKzU4Nyw5IEBAIHB1YmxpYyBjbGFzcyBSZWZlcmVuY2VFeHByZXNzaW9uIGV4dGVuZHMgRnVu
Y3Rpb25hbEV4cHJlc3Npb24gaW1wbGVtZW50cyBJbnZvY2F0CiAJfQogCiAJcHVibGljIEluZmVy
ZW5jZUNvbnRleHQxOCBmcmVzaEluZmVyZW5jZUNvbnRleHQoU2NvcGUgc2NvcGUpIHsKLQkJLy8g
bm8gbmVlZCB0byBzdG9yZSB0aGUgY29udGV4dCBmb3IgbGF0ZXIgdXNlLCBzaW5jZSBSZWZlcmVu
Y2VFeHByZXNzaW9uIAotCQkvLyBpcyBub3Qgc3ViamVjdCB0byBJbnZvY2F0aW9uIFR5cGUgSW5m
ZXJlbmNlIChpcyBub3QgYW4gaW52b2NhdGlvbikuCi0JCXJldHVybiBuZXcgSW5mZXJlbmNlQ29u
dGV4dDE4KHNjb3BlLCBudWxsLypubyBhcmd1bWVudHMqLywgdGhpcyk7CisJCXJldHVybiBudWxs
OyAvLyBzdWJqZWN0IHRvIGluZmVyZW5jZSBvbmx5IGFzIGFuIGFyZ3VtZW50IHRvIGFuIG91dGVy
IGludm9jYXRpb24KIAl9Ci0gCisKIAlwdWJsaWMgYm9vbGVhbiBpc1N1cGVyQWNjZXNzKCkgewog
CQlyZXR1cm4gZmFsc2U7CiAJfQpAQCAtNjI2LDggKzY0Nyw2IEBAIHB1YmxpYyBjbGFzcyBSZWZl
cmVuY2VFeHByZXNzaW9uIGV4dGVuZHMgRnVuY3Rpb25hbEV4cHJlc3Npb24gaW1wbGVtZW50cyBJ
bnZvY2F0CiAJfQogCiAJcHVibGljIGJvb2xlYW4gaXNDb21wYXRpYmxlV2l0aChUeXBlQmluZGlu
ZyBsZWZ0LCBTY29wZSBzY29wZSkgewotCQlpZiAodGhpcy5oYXNJbmZlcmVuY2VGaW5pc2hlZCkK
LQkJCXJldHVybiB0aGlzLnJlc29sdmVkVHlwZSAhPSBudWxsID8gdGhpcy5yZXNvbHZlZFR5cGUu
aXNDb21wYXRpYmxlV2l0aChsZWZ0LCBzY29wZSkgOiBmYWxzZTsKIAkJLy8gMTUuMjguMgogCQlm
aW5hbCBNZXRob2RCaW5kaW5nIHNhbSA9IGxlZnQuZ2V0U2luZ2xlQWJzdHJhY3RNZXRob2QodGhp
cy5lbmNsb3NpbmdTY29wZSwgdHJ1ZSk7CiAJCWlmIChzYW0gPT0gbnVsbCB8fCAhc2FtLmlzVmFs
aWRCaW5kaW5nKCkpCkBAIC02NDIsNyArNjYxLDYgQEAgcHVibGljIGNsYXNzIFJlZmVyZW5jZUV4
cHJlc3Npb24gZXh0ZW5kcyBGdW5jdGlvbmFsRXhwcmVzc2lvbiBpbXBsZW1lbnRzIEludm9jYXQK
IAkJCXRoaXMuZW5jbG9zaW5nU2NvcGUucHJvYmxlbVJlcG9ydGVyKCkuc3dpdGNoRXJyb3JIYW5k
bGluZ1BvbGljeShvbGRQb2xpY3kpOwogCQkJaXNDb21wYXRpYmxlID0gdGhpcy5iaW5kaW5nICE9
IG51bGwgJiYgdGhpcy5iaW5kaW5nLmlzVmFsaWRCaW5kaW5nKCk7CiAJCQl0aGlzLmJpbmRpbmcg
PSBudWxsOwotCQkJdGhpcy5oYXNJbmZlcmVuY2VGaW5pc2hlZCA9IGZhbHNlOwogCQkJc2V0RXhw
ZWN0ZWRUeXBlKG51bGwpOwogCQl9CiAJCXJldHVybiBpc0NvbXBhdGlibGU7CmRpZmYgLS1naXQg
YS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvYXN0L1N0YXRlbWVudC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGls
ZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9TdGF0ZW1lbnQuamF2YQpp
bmRleCA5OTViNjhiLi5iNDA1MDJkIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1N0YXRlbWVudC5q
YXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9hc3QvU3RhdGVtZW50LmphdmEKQEAgLTMzMCwxNiArMzMwLDEzIEBA
IHB1YmxpYyBFeHByZXNzaW9uQ29udGV4dCBnZXRFeHByZXNzaW9uQ29udGV4dCgpIHsKIH0KIC8q
KgogICogRm9yIGFsbCBjb25zdHJ1Y3RvciBpbnZvY2F0aW9uczogZmluZCB0aGUgY29uc3RydWN0
b3IgYmluZGluZzsgCi0gKiBpZiBwb2x5RXhwcmVzc2lvblNlZW4gYWxsb3cgZm9yIHR3byBhdHRl
bXB0cyB3aGVyZSB0aGUgZmlyc3Qgcm91bmQgbWF5IHN0b3AKLSAqIGFmdGVyIGFwcGxpY2FiaWxp
dHkgY2hlY2tpbmcgKDE4LjUuMSkgdG8gaW5jbHVkZSBtb3JlIGluZm9ybWF0aW9uIGludG8gdGhl
IGZpbmFsCi0gKiBpbnZvY2F0aW9uIHR5cGUgaW5mZXJlbmNlICgxOC41LjIpLgorICogaWYgcG9s
eUV4cHJlc3Npb25TZWVuIHBlcmZvcm0gc29tZSBwb3N0IHByb2Nlc3NpbmcgZm9yIHRob3NlIGFu
ZCBwcm9kdWNlCisgKiBhbnkgdXBkYXRlcyBhcyBzaWRlLWVmZmVjdHMgaW50byAnYXJndW1lbnRU
eXBlcycuCiAgKi8KIHByb3RlY3RlZCBNZXRob2RCaW5kaW5nIGZpbmRDb25zdHJ1Y3RvckJpbmRp
bmcoQmxvY2tTY29wZSBzY29wZSwgSW52b2NhdGlvbiBzaXRlLCBSZWZlcmVuY2VCaW5kaW5nIHJl
Y2VpdmVyVHlwZSwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzLCBib29sZWFuIHBvbHlFeHBy
ZXNzaW9uU2VlbikgewogCU1ldGhvZEJpbmRpbmcgY3RvckJpbmRpbmcgPSBzY29wZS5nZXRDb25z
dHJ1Y3RvcihyZWNlaXZlclR5cGUsIGFyZ3VtZW50VHlwZXMsIHNpdGUpOwotCWlmIChwb2x5RXhw
cmVzc2lvblNlZW4pIHsKLQkJaWYgKHJlc29sdmVQb2x5RXhwcmVzc2lvbkFyZ3VtZW50cyhzaXRl
LCBzY29wZSwgY3RvckJpbmRpbmcsIGFyZ3VtZW50VHlwZXMpKQotCQkJcmV0dXJuIHNjb3BlLmdl
dENvbnN0cnVjdG9yKHJlY2VpdmVyVHlwZSwgYXJndW1lbnRUeXBlcywgc2l0ZSk7Ci0JfQorCWlm
IChwb2x5RXhwcmVzc2lvblNlZW4pCisJCXJlc29sdmVQb2x5RXhwcmVzc2lvbkFyZ3VtZW50cyhz
aXRlLCBzY29wZSwgY3RvckJpbmRpbmcsIGFyZ3VtZW50VHlwZXMpOwogCXJldHVybiBjdG9yQmlu
ZGluZzsKIH0KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQm91bmRTZXQuamF2YSBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21w
aWxlci9sb29rdXAvQm91bmRTZXQuamF2YQppbmRleCBkZGEzNDBlLi5mYjgwNTRmIDEwMDY0NAot
LS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvbG9va3VwL0JvdW5kU2V0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Cb3Vu
ZFNldC5qYXZhCkBAIC0yNjgsNiArMjY4LDggQEAgY2xhc3MgQm91bmRTZXQgewogCQkJTWFwLkVu
dHJ5IGVudHJ5ID0gKEVudHJ5KSBzZXRzSXRlcmF0b3IubmV4dCgpOwogCQkJY29weS5ib3VuZHNQ
ZXJWYXJpYWJsZS5wdXQoZW50cnkuZ2V0S2V5KCksICgoVGhyZWVTZXRzKWVudHJ5LmdldFZhbHVl
KCkpLmNvcHkoKSk7CiAJCX0KKwkJY29weS5pblRocm93cy5hZGRBbGwodGhpcy5pblRocm93cyk7
CisJCWNvcHkuY2FwdHVyZXMucHV0QWxsKHRoaXMuY2FwdHVyZXMpOwogCQlyZXR1cm4gY29weTsK
IAl9CiAKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3RyYWludEV4cHJlc3Npb25Gb3Jt
dWxhLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQv
aW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYS5qYXZh
CmluZGV4IGUzYTA3NjEuLjY5ZjFiNjcgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ29uc3Ry
YWludEV4cHJlc3Npb25Gb3JtdWxhLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29t
cGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Db25zdHJhaW50
RXhwcmVzc2lvbkZvcm11bGEuamF2YQpAQCAtNjIsOCArNjIsMTQgQEAgY2xhc3MgQ29uc3RyYWlu
dEV4cHJlc3Npb25Gb3JtdWxhIGV4dGVuZHMgQ29uc3RyYWludEZvcm11bGEgewogCQlpZiAodGhp
cy5yaWdodC5pc1Byb3BlclR5cGUodHJ1ZSkpIHsKIAkJCVR5cGVCaW5kaW5nIGV4cHJUeXBlID0g
dGhpcy5sZWZ0LnJlc29sdmVkVHlwZTsKIAkJCWlmIChleHByVHlwZSA9PSBudWxsKSB7Ci0JCQkJ
aWYgKHRoaXMubGVmdCBpbnN0YW5jZW9mIEZ1bmN0aW9uYWxFeHByZXNzaW9uKQorCQkJCWlmICh0
aGlzLmxlZnQgaW5zdGFuY2VvZiBGdW5jdGlvbmFsRXhwcmVzc2lvbikgeworCQkJCQlpZiAodGhp
cy5sZWZ0IGluc3RhbmNlb2YgTGFtYmRhRXhwcmVzc2lvbikgeworCQkJCQkJLy8gY2YuIE5lZ2F0
aXZlTGFtYmRhRXhwcmVzc2lvblRlc3QudGVzdDQxMjQ1MygpCisJCQkJCQlMYW1iZGFFeHByZXNz
aW9uIGNvcHkgPSAoKExhbWJkYUV4cHJlc3Npb24pIHRoaXMubGVmdCkuZ2V0UmVzb2x2ZWRDb3B5
Rm9ySW5mZXJlbmNlVGFyZ2V0aW5nKHRoaXMucmlnaHQpOworCQkJCQkJcmV0dXJuIChjb3B5LnJl
c29sdmVkVHlwZSAhPSBudWxsICYmIGNvcHkucmVzb2x2ZWRUeXBlLmlzVmFsaWRCaW5kaW5nKCkp
ID8gVFJVRSA6IEZBTFNFOworCQkJCQl9CiAJCQkJCXJldHVybiB0aGlzLmxlZnQuaXNDb21wYXRp
YmxlV2l0aCh0aGlzLnJpZ2h0LCBpbmZlcmVuY2VDb250ZXh0LnNjb3BlKSA/IFRSVUUgOiBGQUxT
RTsKKwkJCQl9CiAJCQkJcmV0dXJuIEZBTFNFOwogCQkJfSBlbHNlIGlmICghZXhwclR5cGUuaXNW
YWxpZEJpbmRpbmcoKSkgewogCQkJCXJldHVybiBGQUxTRTsKQEAgLTgzLDcgKzg5LDggQEAgY2xh
c3MgQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhIGV4dGVuZHMgQ29uc3RyYWludEZvcm11bGEg
ewogCQkJaWYgKHRoaXMubGVmdCBpbnN0YW5jZW9mIEludm9jYXRpb24pIHsKIAkJCQlJbnZvY2F0
aW9uIGludm9jYXRpb24gPSAoSW52b2NhdGlvbikgdGhpcy5sZWZ0OwogCQkJCS8vIGlnbm9yZSBw
cmV2aW91cyAoaW5uZXIpIGluZmVyZW5jZSByZXN1bHQgYW5kIGRvIGEgZnJlc2ggc3RhcnQ6Ci0J
CQkJTWV0aG9kQmluZGluZyBtZXRob2QgPSBpbnZvY2F0aW9uLmJpbmRpbmcoKS5vcmlnaW5hbCgp
OworCQkJCU1ldGhvZEJpbmRpbmcgcHJldmlvdXNNZXRob2QgPSBpbnZvY2F0aW9uLmJpbmRpbmco
KTsKKwkJCQlNZXRob2RCaW5kaW5nIG1ldGhvZCA9IHByZXZpb3VzTWV0aG9kLm9yaWdpbmFsKCk7
CiAJCQkJSW52b2NhdGlvblJlY29yZCBwcmV2SW52b2NhdGlvbiA9IGluZmVyZW5jZUNvbnRleHQu
ZW50ZXJQb2x5SW52b2NhdGlvbihpbnZvY2F0aW9uLCBpbnZvY2F0aW9uLmFyZ3VtZW50cygpKTsK
IAogCQkJCS8vIEludm9jYXRpb24gQXBwbGljYWJpbGl0eSBJbmZlcmVuY2U6IDE4LjUuMQpAQCAt
OTIsMTEgKzk5LDE2IEBAIGNsYXNzIENvbnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYSBleHRlbmRz
IENvbnN0cmFpbnRGb3JtdWxhIHsKIAkJCQkJVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzID0g
YXJndW1lbnRzID09IG51bGwgPyBCaW5kaW5nLk5PX1BBUkFNRVRFUlMgOiBuZXcgVHlwZUJpbmRp
bmdbYXJndW1lbnRzLmxlbmd0aF07CiAJCQkJCWZvciAoaW50IGkgPSAwOyBpIDwgYXJndW1lbnRU
eXBlcy5sZW5ndGg7IGkrKykKIAkJCQkJCWFyZ3VtZW50VHlwZXNbaV0gPSBhcmd1bWVudHNbaV0u
cmVzb2x2ZWRUeXBlOwotCQkJCQlpbnQgY2hlY2tUeXBlID0gKGludm9jYXRpb24uaW5mZXJlbmNl
S2luZCgpICE9IDApID8gaW52b2NhdGlvbi5pbmZlcmVuY2VLaW5kKCkgOiBJbmZlcmVuY2VDb250
ZXh0MTguQ0hFQ0tfTE9PU0U7CisJCQkJCWlmIChwcmV2aW91c01ldGhvZCBpbnN0YW5jZW9mIFBh
cmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgeworCQkJCQkJLy8gZmluZCB0aGUgcHJl
dmlvdXMgaW5uZXIgaW5mZXJlbmNlIGNvbnRleHQgdG8gc2VlIHdoYXQgaW5mZXJlbmNlIGtpbmQg
dGhpcyBpbnZvY2F0aW9uIG5lZWRzOgorCQkJCQkJSW5mZXJlbmNlQ29udGV4dDE4IGlubmVyQ3R4
ID0gaW52b2NhdGlvbi5nZXRJbmZlcmVuY2VDb250ZXh0KChQYXJhbWV0ZXJpemVkR2VuZXJpY01l
dGhvZEJpbmRpbmcpIHByZXZpb3VzTWV0aG9kKTsKKwkJCQkJCWlmIChpbm5lckN0eCA9PSBudWxs
KQorCQkJCQkJCUluZmVyZW5jZUNvbnRleHQxOC5taXNzaW5nSW1wbGVtZW50YXRpb24oIk1pc3Np
bmcgY29udGV4dCBmb3IgaW5uZXIgaW5mZXJlbmNlIGZvciAiK2ludm9jYXRpb24udG9TdHJpbmco
KSk7CisJCQkJCQlpbmZlcmVuY2VDb250ZXh0LmluZmVyZW5jZUtpbmQgPSBpbm5lckN0eC5pbmZl
cmVuY2VLaW5kOworCQkJCQl9CiAJCQkJCWJvb2xlYW4gaXNEaWFtb25kID0gbWV0aG9kLmlzQ29u
c3RydWN0b3IoKSAmJiB0aGlzLmxlZnQuaXNQb2x5RXhwcmVzc2lvbihtZXRob2QpOwotCQkJCQlp
bmZlckludm9jYXRpb25BcHBsaWNhYmlsaXR5KGluZmVyZW5jZUNvbnRleHQsIG1ldGhvZCwgYXJn
dW1lbnRUeXBlcywgaXNEaWFtb25kLCBjaGVja1R5cGUpOyAvLyBGSVhNRSAzIHBoYXNlcz8KLQkJ
CQkJCi0JCQkJCWlmICghaW5mZXJQb2x5SW52b2NhdGlvblR5cGUoaW5mZXJlbmNlQ29udGV4dCwg
aW52b2NhdGlvbiwgdGhpcy5yaWdodCwgbWV0aG9kKSkKKwkJCQkJaWYgKCFpbmZlckludm9jYXRp
b25BcHBsaWNhYmlsaXR5KGluZmVyZW5jZUNvbnRleHQsIG1ldGhvZCwgYXJndW1lbnRUeXBlcywg
aXNEaWFtb25kLCBpbmZlcmVuY2VDb250ZXh0LmluZmVyZW5jZUtpbmQpCisJCQkJCQkJfHwgIWlu
ZmVyUG9seUludm9jYXRpb25UeXBlKGluZmVyZW5jZUNvbnRleHQsIGludm9jYXRpb24sIHRoaXMu
cmlnaHQsIG1ldGhvZCkpCiAJCQkJCQlyZXR1cm4gRkFMU0U7CiAJCQkJCXJldHVybiBudWxsOyAv
LyBhbHJlYWR5IGluY29ycG9yYXRlZAogCQkJCX0gZmluYWxseSB7CkBAIC0xNDQsMTQgKzE1Niwx
MCBAQCBjbGFzcyBDb25zdHJhaW50RXhwcmVzc2lvbkZvcm11bGEgZXh0ZW5kcyBDb25zdHJhaW50
Rm9ybXVsYSB7CiAJCQkJCVR5cGVCaW5kaW5nIHIgPSBmdW5jdGlvblR5cGUucmV0dXJuVHlwZTsK
IAkJCQkJaWYgKGxhbWJkYS5ib2R5KCkgaW5zdGFuY2VvZiBFeHByZXNzaW9uKSB7CiAJCQkJCQlF
eHByZXNzaW9uIGJvZHkgPSAoRXhwcmVzc2lvbilsYW1iZGEuYm9keSgpOwotCQkJCQkJLy8gYmVm
b3JlIGludHJvZHVjaW5nIHRoZSBib2R5IGludG8gaW5mZXJlbmNlLCB3ZSBtdXN0IGVuc3VyZSBp
dCdzIHJlc29sdmVkLCBobS4uLgotCQkJCQkJZW5zdXJlUmVzb2x2ZWQobGFtYmRhLmVuY2xvc2lu
Z1Njb3BlLCBib2R5LCByKTsKIAkJCQkJCXJlc3VsdC5hZGQobmV3IENvbnN0cmFpbnRFeHByZXNz
aW9uRm9ybXVsYShib2R5LCByLCBDT01QQVRJQkxFKSk7CiAJCQkJCX0gZWxzZSB7CiAJCQkJCQlF
eHByZXNzaW9uW10gZXhwcnMgPSBsYW1iZGEucmVzdWx0RXhwcmVzc2lvbnMoKTsKIAkJCQkJCWZv
ciAoaW50IGkgPSAwOyBpIDwgZXhwcnMubGVuZ3RoOyBpKyspIHsKLQkJCQkJCQkvLyBiZWZvcmUg
aW50cm9kdWNpbmcgcmVzdWx0IGV4cHJlc3Npb25zIGludG8gaW5mZXJlbmNlLCB3ZSBtdXN0IGVu
c3VyZSB0aGV5J3JlIHJlc29sdmVkLCBobS4uLgotCQkJCQkJCWVuc3VyZVJlc29sdmVkKGxhbWJk
YS5lbmNsb3NpbmdTY29wZSwgZXhwcnNbaV0sIHIpOwogCQkJCQkJCXJlc3VsdC5hZGQobmV3IENv
bnN0cmFpbnRFeHByZXNzaW9uRm9ybXVsYShleHByc1tpXSwgciwgQ09NUEFUSUJMRSkpOwogCQkJ
CQkJfQogCQkJCQl9CkBAIC0xNzksMjQgKzE4Nyw2IEBAIGNsYXNzIENvbnN0cmFpbnRFeHByZXNz
aW9uRm9ybXVsYSBleHRlbmRzIENvbnN0cmFpbnRGb3JtdWxhIHsKIAkJfQogCX0KIAotCXByaXZh
dGUgdm9pZCBlbnN1cmVSZXNvbHZlZChCbG9ja1Njb3BlIHNjb3BlLCBFeHByZXNzaW9uIGV4cHIs
IFR5cGVCaW5kaW5nIHRhcmdldFR5cGUpIHsKLQkJLy8gVE9ETyB0aGlzIG1ldGhvZCBtaWdodCBi
ZSBvYnNvbGV0ZWQgYnkgdGhlIHVzZSBvZiBMRS5nZXRSZXNvbHZlZENvcHlGb3JJbmZlcmVuY2VU
YXJnZXRpbmcoKQotCQlpZiAoZXhwci5yZXNvbHZlZFR5cGUgPT0gbnVsbCkgewotCQkJaWYgKHRh
cmdldFR5cGUuaXNQcm9wZXJUeXBlKHRydWUpKQotCQkJCWV4cHIuc2V0RXhwZWN0ZWRUeXBlKHRh
cmdldFR5cGUpOwotCQkJZWxzZQotCQkJCWV4cHIuc2V0RXhwZWN0ZWRUeXBlKG51bGwpOwotCQkJ
RXhwcmVzc2lvbkNvbnRleHQgcHJldmlvdXNFeHByZXNzaW9uQ29udGV4dCA9IGV4cHIuZ2V0RXhw
cmVzc2lvbkNvbnRleHQoKTsKLQkJCWlmIChwcmV2aW91c0V4cHJlc3Npb25Db250ZXh0ID09IEV4
cHJlc3Npb25Db250ZXh0LlZBTklMTEFfQ09OVEVYVCkKLQkJCQlleHByLnNldEV4cHJlc3Npb25D
b250ZXh0KEV4cHJlc3Npb25Db250ZXh0LkFTU0lHTk1FTlRfQ09OVEVYVCk7Ci0JCQl0cnkgewot
CQkJCWV4cHIucmVzb2x2ZVR5cGUoc2NvcGUpOwotCQkJfSBmaW5hbGx5IHsKLQkJCQlleHByLnNl
dEV4cHJlc3Npb25Db250ZXh0KHByZXZpb3VzRXhwcmVzc2lvbkNvbnRleHQpOwotCQkJfQotCQl9
Ci0JfQotCiAJcHJpdmF0ZSBPYmplY3QgcmVkdWNlUmVmZXJlbmNlRXhwcmVzc2lvbkNvbXBhdGli
aWxpdHkoUmVmZXJlbmNlRXhwcmVzc2lvbiByZWZlcmVuY2UsIEluZmVyZW5jZUNvbnRleHQxOCBp
bmZlcmVuY2VDb250ZXh0KSB7CiAJCVR5cGVCaW5kaW5nIHQgPSB0aGlzLnJpZ2h0OwogCQlpZiAo
dC5pc1Byb3BlclR5cGUodHJ1ZSkpCkBAIC0yNDMsNyArMjMzLDcgQEAgY2xhc3MgQ29uc3RyYWlu
dEV4cHJlc3Npb25Gb3JtdWxhIGV4dGVuZHMgQ29uc3RyYWludEZvcm11bGEgewogCQlyZXR1cm4g
RkFMU0U7CiAJfQogCi0Jc3RhdGljIHZvaWQgaW5mZXJJbnZvY2F0aW9uQXBwbGljYWJpbGl0eShJ
bmZlcmVuY2VDb250ZXh0MTggaW5mZXJlbmNlQ29udGV4dCwgTWV0aG9kQmluZGluZyBtZXRob2Qs
IFR5cGVCaW5kaW5nW10gYXJndW1lbnRzLCBib29sZWFuIGlzRGlhbW9uZCwgaW50IGNoZWNrVHlw
ZSkgCisJc3RhdGljIGJvb2xlYW4gaW5mZXJJbnZvY2F0aW9uQXBwbGljYWJpbGl0eShJbmZlcmVu
Y2VDb250ZXh0MTggaW5mZXJlbmNlQ29udGV4dCwgTWV0aG9kQmluZGluZyBtZXRob2QsIFR5cGVC
aW5kaW5nW10gYXJndW1lbnRzLCBib29sZWFuIGlzRGlhbW9uZCwgaW50IGNoZWNrVHlwZSkKIAl7
CiAJCS8vIDE4LjUuMQogCQlUeXBlVmFyaWFibGVCaW5kaW5nW10gdHlwZVZhcmlhYmxlcyA9IG1l
dGhvZC50eXBlVmFyaWFibGVzOwpAQCAtMjcwLDYgKzI2MCwxMyBAQCBjbGFzcyBDb25zdHJhaW50
RXhwcmVzc2lvbkZvcm11bGEgZXh0ZW5kcyBDb25zdHJhaW50Rm9ybXVsYSB7CiAJCX0KIAkJaW5m
ZXJlbmNlQ29udGV4dC5jcmVhdGVJbml0aWFsQ29uc3RyYWludHNGb3JQYXJhbWV0ZXJzKHBhcmFt
ZXRlcnMsIGNoZWNrVHlwZT09SW5mZXJlbmNlQ29udGV4dDE4LkNIRUNLX1ZBUkFSRywgdmFyQXJn
c1R5cGUsIG1ldGhvZCk7CiAJCWluZmVyZW5jZUNvbnRleHQuYWRkVGhyb3dzQ29udHJhaW50cyh0
eXBlVmFyaWFibGVzLCBpbmZlcmVuY2VWYXJpYWJsZXMsIG1ldGhvZC50aHJvd25FeGNlcHRpb25z
KTsKKwkJLy8gSW4gY2FzZSB3ZSBuZWVkIENIRUNLX1ZBUkFSR1MgYXMgYSBuZXh0IGF0dGVtcHQg
YWxsIHBhcmFtZXRlciBjb25zdHJhaW50cyBoYXZlIGFscmVhZHkgYmVlbiBjcmVhdGVkIGFib3Zl
LAorCQkvLyBidXQgbm93IHdlIGNhbiBza2lwIHRoZSBhdHRlbXB0IHRvIHNvbHZlIHRoaXMgaW5m
ZXJlbmNlCisJCWlmIChjaGVja1R5cGUgIT0gSW5mZXJlbmNlQ29udGV4dDE4LkNIRUNLX1ZBUkFS
RworCQkJCSYmIGluZmVyZW5jZUNvbnRleHQuaW52b2NhdGlvbkFyZ3VtZW50cyAhPSBudWxsCisJ
CQkJJiYgcGFyYW1ldGVycy5sZW5ndGggIT0gaW5mZXJlbmNlQ29udGV4dC5pbnZvY2F0aW9uQXJn
dW1lbnRzLmxlbmd0aCkKKwkJCXJldHVybiBmYWxzZTsKKwkJcmV0dXJuIHRydWU7CiAJfQogCiAJ
c3RhdGljIGJvb2xlYW4gaW5mZXJQb2x5SW52b2NhdGlvblR5cGUoSW5mZXJlbmNlQ29udGV4dDE4
IGluZmVyZW5jZUNvbnRleHQsIEludm9jYXRpb25TaXRlIGludm9jYXRpb25TaXRlLCBUeXBlQmlu
ZGluZyB0YXJnZXRUeXBlLCBNZXRob2RCaW5kaW5nIG1ldGhvZCkgCmRpZmYgLS1naXQgYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvbG9va3VwL0luZmVyZW5jZUNvbnRleHQxOC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9JbmZlcmVu
Y2VDb250ZXh0MTguamF2YQppbmRleCBjNGYxNjU4Li5jMDg5YzJlIDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvbG9va3VwL0luZmVyZW5jZUNvbnRleHQxOC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvSW5m
ZXJlbmNlQ29udGV4dDE4LmphdmEKQEAgLTIzLDcgKzIzLDEwIEBAIGltcG9ydCBqYXZhLnV0aWwu
TGlzdDsKIGltcG9ydCBqYXZhLnV0aWwuU2V0OwogCiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmNv
cmUuY29tcGlsZXIuQ2hhck9wZXJhdGlvbjsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJu
YWwuY29tcGlsZXIuYXN0LkNvbmRpdGlvbmFsRXhwcmVzc2lvbjsKIGltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkV4cHJlc3Npb247CitpbXBvcnQgb3JnLmVjbGlw
c2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5FeHByZXNzaW9uQ29udGV4dDsKK2ltcG9ydCBv
cmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkZ1bmN0aW9uYWxFeHByZXNzaW9u
OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuSW52b2NhdGlv
bjsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LldpbGRjYXJk
OwogCkBAIC00OCw2ICs1MSwxMSBAQCBwdWJsaWMgY2xhc3MgSW5mZXJlbmNlQ29udGV4dDE4IHsK
IAlDb25zdHJhaW50Rm9ybXVsYVtdIGluaXRpYWxDb25zdHJhaW50czsKIAlpbnQgdmFyaWFibGVD
b3VudCA9IDA7CiAKKwkvKiogc29sdXRpb24gb2YgYXBwbGljYWJpbGl0eSBpbmZlcmVuY2UsIHN0
b3JlZCBmb3IgdXNlIGFzIGZhbGxiYWNrLCBpZiBpbnZvY2F0aW9uIHR5cGUgaW5mZXJlbmNlIGZh
aWxzLiAqLworCUJvdW5kU2V0IHN0b3JlZFNvbHV0aW9uOworCWludCBpbmZlcmVuY2VLaW5kOwor
CXB1YmxpYyBib29sZWFuIGhhc0ZpbmlzaGVkID0gZmFsc2U7CisKIAlMaXN0Lyo8SW52b2NhdGlv
blNpdGU+Ki8gaW5uZXJQb2xpZXMgPSBuZXcgQXJyYXlMaXN0KCk7CiAJcHVibGljIEluZmVyZW5j
ZUNvbnRleHQxOCBvdXRlckNvbnRleHQ7CiAJcHJpdmF0ZSBBcnJheUxpc3QgcHJvYmxlbU1ldGhv
ZHM7CkBAIC02MCwyMiArNjgsMjAgQEAgcHVibGljIGNsYXNzIEluZmVyZW5jZUNvbnRleHQxOCB7
CiAJSW52b2NhdGlvblNpdGUgY3VycmVudEludm9jYXRpb247CiAJRXhwcmVzc2lvbltdIGludm9j
YXRpb25Bcmd1bWVudHM7CiAJCi0JLy8gQml0bWFzaywgbG93ZXIgdHdvIGJpdHM6CiAJcHVibGlj
IHN0YXRpYyBmaW5hbCBpbnQgQ0hFQ0tfU1RSSUNUID0gMTsKIAlwdWJsaWMgc3RhdGljIGZpbmFs
IGludCBDSEVDS19MT09TRSA9IDI7CiAJcHVibGljIHN0YXRpYyBmaW5hbCBpbnQgQ0hFQ0tfVkFS
QVJHID0gMzsKLQlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBJTkZFUkVOQ0VfS0lORF9NQVNLID0g
MzsKLQkvLyBiaXQgMzoKLQlwdWJsaWMgc3RhdGljIGZpbmFsIGludCBDSEVDS19GSU5JU0hFRCA9
IDQ7CiAJCiAJc3RhdGljIGNsYXNzIEludm9jYXRpb25SZWNvcmQgewogCQlJbnZvY2F0aW9uU2l0
ZSBzaXRlOwogCQlFeHByZXNzaW9uW10gaW52b2NhdGlvbkFyZ3VtZW50czsKIAkJSW5mZXJlbmNl
VmFyaWFibGVbXSBpbmZlcmVuY2VWYXJpYWJsZXM7Ci0JCUludm9jYXRpb25SZWNvcmQoSW52b2Nh
dGlvblNpdGUgc2l0ZSwgRXhwcmVzc2lvbltdIGludm9jYXRpb25Bcmd1bWVudHMsIEluZmVyZW5j
ZVZhcmlhYmxlW10gaW5mZXJlbmNlVmFyaWFibGVzKSB7CisJCWludCBpbmZlcmVuY2VLaW5kOwor
CQlJbnZvY2F0aW9uUmVjb3JkKEludm9jYXRpb25TaXRlIHNpdGUsIEV4cHJlc3Npb25bXSBpbnZv
Y2F0aW9uQXJndW1lbnRzLCBJbmZlcmVuY2VWYXJpYWJsZVtdIGluZmVyZW5jZVZhcmlhYmxlcywg
aW50IGluZmVyZW5jZUtpbmQpIHsKIAkJCXRoaXMuc2l0ZSA9IHNpdGU7CiAJCQl0aGlzLmludm9j
YXRpb25Bcmd1bWVudHMgPSBpbnZvY2F0aW9uQXJndW1lbnRzOwogCQkJdGhpcy5pbmZlcmVuY2VW
YXJpYWJsZXMgPSBpbmZlcmVuY2VWYXJpYWJsZXM7CisJCQl0aGlzLmluZmVyZW5jZUtpbmQgPSBp
bmZlcmVuY2VLaW5kOwogCQl9CiAJfQogCQpAQCAtMjEyLDE1ICsyMTgsMTggQEAgcHVibGljIGNs
YXNzIEluZmVyZW5jZUNvbnRleHQxOCB7CiAJCX0JCQogCX0KIAotCS8qKiBKTFMgMTguNS4xIElu
dm9jYXRpb24gQXBwbGljYWJpbGl0eSBJbmZlcmVuY2UgKi8KLQlwdWJsaWMgdm9pZCBpbmZlcklu
dm9jYXRpb25BcHBsaWNhYmlsaXR5KE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBUeXBlQmluZGluZ1td
IGFyZ3VtZW50cywgYm9vbGVhbiBpc0RpYW1vbmQsIGludCBjaGVja1R5cGUpIHsKLQkJQ29uc3Ry
YWludEV4cHJlc3Npb25Gb3JtdWxhLmluZmVySW52b2NhdGlvbkFwcGxpY2FiaWxpdHkodGhpcywg
bWV0aG9kLCBhcmd1bWVudHMsIGlzRGlhbW9uZCwgY2hlY2tUeXBlKTsKKwkvKioKKwkgKiBKTFMg
MTguNS4xIEludm9jYXRpb24gQXBwbGljYWJpbGl0eSBJbmZlcmVuY2UuCisJICogQSByZXN1bHQg
b2YgZmFsc2Ugc2lnbmFscyBhIGZhaWx1cmUgZHVlIHRvIGFyaXR5LW1pc21hdGNoLgorCSAqLwor
CXB1YmxpYyBib29sZWFuIGluZmVySW52b2NhdGlvbkFwcGxpY2FiaWxpdHkoTWV0aG9kQmluZGlu
ZyBtZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRzLCBib29sZWFuIGlzRGlhbW9uZCkgewor
CQlyZXR1cm4gQ29uc3RyYWludEV4cHJlc3Npb25Gb3JtdWxhLmluZmVySW52b2NhdGlvbkFwcGxp
Y2FiaWxpdHkodGhpcywgbWV0aG9kLCBhcmd1bWVudHMsIGlzRGlhbW9uZCwgdGhpcy5pbmZlcmVu
Y2VLaW5kKTsKIAl9CiAKIAkvKiogSkxTIDE4LjUuMiBJbnZvY2F0aW9uIFR5cGUgSW5mZXJlbmNl
IAogCSAqIEBwYXJhbSBiMSAidGhlIGJvdW5kIHNldCBwcm9kdWNlZCBieSByZWR1Y3Rpb24gaW4g
b3JkZXIgdG8gZGVtb25zdHJhdGUgdGhhdCBtIGlzIGFwcGxpY2FibGUgaW4gMTguNS4xIiAKIAkg
Ki8KLQlwdWJsaWMgQm91bmRTZXQgaW5mZXJJbnZvY2F0aW9uVHlwZShCb3VuZFNldCBiMSwgVHlw
ZUJpbmRpbmcgZXhwZWN0ZWRUeXBlLCBJbnZvY2F0aW9uU2l0ZSBpbnZvY2F0aW9uU2l0ZSwgTWV0
aG9kQmluZGluZyBtZXRob2QsIGludCBjaGVja0tpbmQpCisJcHVibGljIEJvdW5kU2V0IGluZmVy
SW52b2NhdGlvblR5cGUoQm91bmRTZXQgYjEsIFR5cGVCaW5kaW5nIGV4cGVjdGVkVHlwZSwgSW52
b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUsIE1ldGhvZEJpbmRpbmcgbWV0aG9kKQogCQkJdGhy
b3dzIEluZmVyZW5jZUZhaWx1cmVFeGNlcHRpb24gCiAJewogCQlCb3VuZFNldCBwcmV2aW91cyA9
IHRoaXMuY3VycmVudEJvdW5kczsKQEAgLTI0NCw3ICsyNTMsOSBAQCBwdWJsaWMgY2xhc3MgSW5m
ZXJlbmNlQ29udGV4dDE4IHsKIAkJCWlmIChhcmd1bWVudHMgIT0gbnVsbCkgewogCQkJCWludCBr
ID0gYXJndW1lbnRzLmxlbmd0aDsKIAkJCQlpbnQgcCA9IG1ldGhvZC5wYXJhbWV0ZXJzLmxlbmd0
aDsKLQkJCQlzd2l0Y2ggKGNoZWNrS2luZCkgeworCQkJCWlmIChrIDwgKG1ldGhvZC5pc1ZhcmFy
Z3MoKSA/IHAtMSA6IHApKQorCQkJCQlyZXR1cm4gbnVsbDsgLy8gaW5zdWZmaWNpZW50IGFyZ3Vt
ZW50cyBmb3IgcGFyYW1ldGVycyEKKwkJCQlzd2l0Y2ggKHRoaXMuaW5mZXJlbmNlS2luZCkgewog
CQkJCQljYXNlIENIRUNLX1NUUklDVDoKIAkJCQkJY2FzZSBDSEVDS19MT09TRToKIAkJCQkJCWZz
ID0gbWV0aG9kLnBhcmFtZXRlcnM7CkBAIC0yNTMsNyArMjY0LDcgQEAgcHVibGljIGNsYXNzIElu
ZmVyZW5jZUNvbnRleHQxOCB7CiAJCQkJCQlmcyA9IHZhckFyZ1R5cGVzKG1ldGhvZC5wYXJhbWV0
ZXJzLCBrKTsKIAkJCQkJCWJyZWFrOwogCQkJCQlkZWZhdWx0OgotCQkJCQkJdGhyb3cgbmV3IEls
bGVnYWxTdGF0ZUV4Y2VwdGlvbigiVW5leHBlY3RlZCBjaGVja0tpbmQgIitjaGVja0tpbmQpOyAv
LyROT04tTkxTLTEkCisJCQkJCQl0aHJvdyBuZXcgSWxsZWdhbFN0YXRlRXhjZXB0aW9uKCJVbmV4
cGVjdGVkIGNoZWNrS2luZCAiK3RoaXMuaW5mZXJlbmNlS2luZCk7IC8vJE5PTi1OTFMtMSQKIAkJ
CQl9CiAJCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBrOyBpKyspIHsKIAkJCQkJVHlwZUJpbmRpbmcg
ZnNpID0gZnNbTWF0aC5taW4oaSwgcC0xKV07CkBAIC0zMDAsMTIgKzMxMSw1MSBAQCBwdWJsaWMg
Y2xhc3MgSW5mZXJlbmNlQ29udGV4dDE4IHsKIAkJCQlyZXR1cm4gbnVsbDsKIAkJCXJldHVybiBz
b2x1dGlvbjsKIAkJfSBmaW5hbGx5IHsKKwkJCXRoaXMuaGFzRmluaXNoZWQgPSB0cnVlOwogCQkJ
dGhpcy5jdXJyZW50Qm91bmRzID0gcHJldmlvdXM7CiAJCX0KIAl9CiAKIAkvKioKIAkgKiBTaW1w
bGlmaWVkIEFQSSB0byBwZXJmb3JtIEludm9jYXRpb24gVHlwZSBJbmZlcmVuY2UgKEpMUyAxOC41
LjIpCisJICogYW5kIHBlcmZvcm0gc3Vic2VxdWVudCBzdGVwczogYm91bmQgY2hlY2ssIHJlYmlu
ZGluZyBvZiBpbm5lciBwb2x5IGV4cHJlc3Npb25zLAorCSAqIGFuZCBjcmVhdGluZyBvZiBhIHBy
b2JsZW0gbWV0aG9kIGJpbmRpbmcgaWYgbmVlZGVkLgorCSAqIFNob3VsZCBvbmx5IGJlIGNhbGxl
ZCBpZiB0aGUgaW5mZXJlbmNlIGhhcyBub3QgeWV0IGZpbmlzaGVkLgorCSAqIEBwYXJhbSBpbnZv
Y2F0aW9uIGludm9jYXRpb24gYmVpbmcgaW5mZXJyZWQKKwkgKiBAcGFyYW0gYXJndW1lbnRUeXBl
cyBhcmd1bWVudHMgYmVpbmcgcGFzc2VkIGludG8gdGhlIGludm9jYXRpb24KKwkgKiBAcGFyYW0g
bWV0aG9kIGN1cnJlbnQgY2FuZGlkYXRlIG1ldGhvZCBiaW5kaW5nIGZvciB0aGlzIGludm9jYXRp
b24KKwkgKiBAcmV0dXJuIGEgdmFsaWQgbWV0aG9kIGJpbmRpbmcgd2l0aCB1cGRhdGVkIHR5cGUg
cGFyYW1ldGVycywKKwkgKiAJb3IgYSBwcm9ibGVtIG1ldGhvZCBiaW5kaW5nIHNpZ25hbGluZyBl
aXRoZXIgaW5mZXJlbmNlIGZhaWx1cmUgb3IgYSBib3VuZCBtaXNtYXRjaC4KKwkgKi8KKwlwdWJs
aWMgLypATm9uTnVsbCovIE1ldGhvZEJpbmRpbmcgaW5mZXJJbnZvY2F0aW9uVHlwZShJbnZvY2F0
aW9uIGludm9jYXRpb24sIFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcywgUGFyYW1ldGVyaXpl
ZEdlbmVyaWNNZXRob2RCaW5kaW5nIG1ldGhvZCkgeworCQkvLyBUT0RPIG9wdGltaXplOiBpZiBv
dXRlckNvbnRleHQgZXhpc3RzIGFuZCBpcyByZXNvbHZlZCwgd2UgcHJvYmFibHkgZG9uJ3QgbmVl
ZCB0byBpbmZlciBhZ2Fpbi4KKwkJVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSA9IGludm9jYXRpb24u
aW52b2NhdGlvblRhcmdldFR5cGUoKTsKKwkJUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5k
aW5nIGZpbmFsTWV0aG9kID0gbWV0aG9kOworCQlQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJp
bmRpbmcgbWV0aG9kVG9DaGVjayA9IG1ldGhvZDsKKwkJCisJCWJvb2xlYW4gaGF2ZVByb3BlclRh
cmdldFR5cGUgPSB0YXJnZXRUeXBlICE9IG51bGwgJiYgdGFyZ2V0VHlwZS5pc1Byb3BlclR5cGUo
dHJ1ZSk7CisJCWlmIChoYXZlUHJvcGVyVGFyZ2V0VHlwZSkgeworCQkJZmluYWxNZXRob2QgPSBn
ZXRJbnZvY2F0aW9uVHlwZUluZmVyZW5jZVNvbHV0aW9uKG1ldGhvZC5vcmlnaW5hbE1ldGhvZCwg
aW52b2NhdGlvbiwgdGFyZ2V0VHlwZSk7CisJCQlpZiAoZmluYWxNZXRob2QgIT0gbnVsbCkKKwkJ
CQltZXRob2RUb0NoZWNrID0gZmluYWxNZXRob2Q7CisJCX0KKwkJCisJCU1ldGhvZEJpbmRpbmcg
cHJvYmxlbU1ldGhvZCA9IG1ldGhvZFRvQ2hlY2suYm91bmRDaGVjazE4KHRoaXMuc2NvcGUsIGFy
Z3VtZW50VHlwZXMpOworCQlpZiAocHJvYmxlbU1ldGhvZCAhPSBudWxsKQorCQkJcmV0dXJuIHBy
b2JsZW1NZXRob2Q7CisKKwkJaWYgKCFoYXZlUHJvcGVyVGFyZ2V0VHlwZSAmJiBpbnZvY2F0aW9u
LmdldEV4cHJlc3Npb25Db250ZXh0KCkgIT0gRXhwcmVzc2lvbkNvbnRleHQuVkFOSUxMQV9DT05U
RVhUKQorCQkJcmV0dXJuIG1ldGhvZDsgLy8gc3RpbGwgbm90IHJlYWR5IQorCisJCWlmIChmaW5h
bE1ldGhvZCAhPSBudWxsKSB7CisJCQlpZiAocmViaW5kSW5uZXJQb2xpZXMoZmluYWxNZXRob2Qs
IGludm9jYXRpb24pKQorCQkJCXJldHVybiBmaW5hbE1ldGhvZDsKKwkJfQorCQlyZXR1cm4gZ2V0
UmV0dXJuUHJvYmxlbU1ldGhvZElmTmVlZGVkKHRhcmdldFR5cGUsIG1ldGhvZCk7CisJfQorCisJ
LyoqCisJICogU2ltcGxpZmllZCBBUEkgdG8gcGVyZm9ybSBJbnZvY2F0aW9uIFR5cGUgSW5mZXJl
bmNlIChKTFMgMTguNS4yKQogCSAqIGFuZCAoaWYgc3VjY2Vzc2Z1bCkgcmV0dXJuIHRoZSBzb2x1
dGlvbi4KIAkgKiBAcGFyYW0gaW52b2NhdGlvbiBpbnZvY2F0aW9uIGJlaW5nIGluZmVycmVkCiAJ
ICogQHBhcmFtIHRhcmdldFR5cGUgdGFyZ2V0IHR5cGUgZm9yIHRoaXMgaW52b2NhdGlvbgpAQCAt
MzE3LDE0ICszNjcsNDkgQEAgcHVibGljIGNsYXNzIEluZmVyZW5jZUNvbnRleHQxOCB7CiAJCU1l
dGhvZEJpbmRpbmcgbWV0aG9kID0gaW52b2NhdGlvbi5iaW5kaW5nKCkub3JpZ2luYWwoKTsKIAkJ
Qm91bmRTZXQgcmVzdWx0ID0gbnVsbDsKIAkJdHJ5IHsKLQkJCXJlc3VsdCA9IGluZmVySW52b2Nh
dGlvblR5cGUodGhpcy5jdXJyZW50Qm91bmRzLCB0YXJnZXRUeXBlLCBpbnZvY2F0aW9uLCBtZXRo
b2QsIGludm9jYXRpb24uaW5mZXJlbmNlS2luZCgpKTsKKwkJCXJlc3VsdCA9IGluZmVySW52b2Nh
dGlvblR5cGUodGhpcy5jdXJyZW50Qm91bmRzLCB0YXJnZXRUeXBlLCBpbnZvY2F0aW9uLCBtZXRo
b2QpOwogCQl9IGNhdGNoIChJbmZlcmVuY2VGYWlsdXJlRXhjZXB0aW9uIGUpIHsKIAkJCXJldHVy
biBudWxsOwogCQl9CiAJCWlmIChyZXN1bHQgIT0gbnVsbCkgewogCQkJVHlwZUJpbmRpbmdbXSBz
b2x1dGlvbnMgPSBnZXRTb2x1dGlvbnMobWV0aG9kLnR5cGVWYXJpYWJsZXMoKSwgaW52b2NhdGlv
biwgcmVzdWx0KTsKLQkJCWlmIChzb2x1dGlvbnMgIT0gbnVsbCkKLQkJCQlyZXR1cm4gdGhpcy5l
bnZpcm9ubWVudC5jcmVhdGVQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChtZXRob2QsIHNvbHV0
aW9ucyk7CisJCQlpZiAoc29sdXRpb25zICE9IG51bGwpIHsKKwkJCQkvLyB0aGlzIGlzIGZpbmFs
LCBrZWVwIHRoZSByZXN1bHQ6CisJCQkJdGhpcy5jdXJyZW50Qm91bmRzID0gcmVzdWx0OworCQkJ
CVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBzdWJzdGl0dXRlTWV0aG9kID0gdGhp
cy5lbnZpcm9ubWVudC5jcmVhdGVQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChtZXRob2QsIHNv
bHV0aW9ucyk7CisJCQkJaW52b2NhdGlvbi5yZWdpc3RlckluZmVyZW5jZUNvbnRleHQoc3Vic3Rp
dHV0ZU1ldGhvZCwgdGhpcyk7CisJCQkJcmV0dXJuIHN1YnN0aXR1dGVNZXRob2Q7CisKKwkJCX0K
KwkJfQorCQlyZXR1cm4gbnVsbDsKKwl9CisKKwkvKioKKwkgKiBTaW1wbGlmaWVkIEFQSSB0byBw
ZXJmb3JtIEludm9jYXRpb24gVHlwZSBJbmZlcmVuY2UgKEpMUyAxOC41LjIpCisJICogYW5kIChp
ZiBzdWNjZXNzZnVsKSByZXR1cm4gdGhlIHNvbHV0aW9uLgorCSAqIEBwYXJhbSBzaXRlIGludm9j
YXRpb24gYmVpbmcgaW5mZXJyZWQKKwkgKiBAcGFyYW0gdGFyZ2V0VHlwZSB0YXJnZXQgdHlwZSBm
b3IgdGhpcyBpbnZvY2F0aW9uCisJICogQHJldHVybiBhIG1ldGhvZCBiaW5kaW5nIHdpdGggdXBk
YXRlZCB0eXBlIHBhcmFtZXRlcnMsIG9yIG51bGwgaWYgbm8gc29sdXRpb24gd2FzIGZvdW5kCisJ
ICovCisJcHVibGljIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBnZXRJbnZvY2F0
aW9uVHlwZUluZmVyZW5jZVNvbHV0aW9uKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBJbnZvY2F0aW9u
IHNpdGUsIFR5cGVCaW5kaW5nIHRhcmdldFR5cGUpIHsKKwkJLy8gc3RhcnQgb3ZlciBmcm9tIGEg
cHJldmlvdXMgY2FuZGlkYXRlIGJ1dCBkaXNjYXJkIGl0cyB0eXBlIHZhcmlhYmxlIGluc3RhbnRp
YXRpb25zCisJCS8vIFRPRE86IHNob3VsZCB3ZSByZXRhaW4gYW55IGluc3RhbnRpYXRpb25zIG9m
IHR5cGUgdmFyaWFibGVzIG5vdCBvd25lZCBieSB0aGUgbWV0aG9kPyAKKwkJQm91bmRTZXQgcmVz
dWx0ID0gbnVsbDsKKwkJdHJ5IHsKKwkJCXJlc3VsdCA9IGluZmVySW52b2NhdGlvblR5cGUodGhp
cy5jdXJyZW50Qm91bmRzLCB0YXJnZXRUeXBlLCBzaXRlLCBtZXRob2QpOworCQl9IGNhdGNoIChJ
bmZlcmVuY2VGYWlsdXJlRXhjZXB0aW9uIGUpIHsKKwkJCXJldHVybiBudWxsOworCQl9CisJCWlm
IChyZXN1bHQgIT0gbnVsbCkgeworCQkJVHlwZUJpbmRpbmdbXSBzb2x1dGlvbnMgPSBnZXRTb2x1
dGlvbnMobWV0aG9kLnR5cGVWYXJpYWJsZXMoKSwgc2l0ZSwgcmVzdWx0KTsKKwkJCWlmIChzb2x1
dGlvbnMgIT0gbnVsbCkgeworCQkJCS8vIHRoaXMgaXMgZmluYWwsIGtlZXAgdGhlIHJlc3VsdDoK
KwkJCQl0aGlzLmN1cnJlbnRCb3VuZHMgPSByZXN1bHQ7CisJCQkJUGFyYW1ldGVyaXplZEdlbmVy
aWNNZXRob2RCaW5kaW5nIHN1YnN0aXR1dGVNZXRob2QgPSB0aGlzLmVudmlyb25tZW50LmNyZWF0
ZVBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kKG1ldGhvZCwgc29sdXRpb25zKTsKKwkJCQlzaXRl
LnJlZ2lzdGVySW5mZXJlbmNlQ29udGV4dChzdWJzdGl0dXRlTWV0aG9kLCB0aGlzKTsKKwkJCQly
ZXR1cm4gc3Vic3RpdHV0ZU1ldGhvZDsKKwkJCX0KIAkJfQogCQlyZXR1cm4gbnVsbDsKIAl9CkBA
IC02MTEsMjcgKzY5NiwyOCBAQCBwdWJsaWMgY2xhc3MgSW5mZXJlbmNlQ29udGV4dDE4IHsKIAog
CXByaXZhdGUgVHlwZUJpbmRpbmdbXSB2YXJBcmdUeXBlcyhUeXBlQmluZGluZ1tdIHBhcmFtZXRl
cnMsIGludCBrKSB7CiAJCVR5cGVCaW5kaW5nW10gdHlwZXMgPSBuZXcgVHlwZUJpbmRpbmdba107
Ci0JCWludCBkZWNsYXJlZExlbmd0aCA9IHBhcmFtZXRlcnMubGVuZ3RoOworCQlpbnQgZGVjbGFy
ZWRMZW5ndGggPSBwYXJhbWV0ZXJzLmxlbmd0aC0xOwogCQlTeXN0ZW0uYXJyYXljb3B5KHBhcmFt
ZXRlcnMsIDAsIHR5cGVzLCAwLCBkZWNsYXJlZExlbmd0aCk7Ci0JCVR5cGVCaW5kaW5nIGxhc3Qg
PSBwYXJhbWV0ZXJzW2RlY2xhcmVkTGVuZ3RoLTFdOworCQlUeXBlQmluZGluZyBsYXN0ID0gKChB
cnJheUJpbmRpbmcpcGFyYW1ldGVyc1tkZWNsYXJlZExlbmd0aF0pLmVsZW1lbnRzVHlwZSgpOwog
CQlmb3IgKGludCBpID0gZGVjbGFyZWRMZW5ndGg7IGkgPCBrOyBpKyspCiAJCQl0eXBlc1tpXSA9
IGxhc3Q7CiAJCXJldHVybiB0eXBlczsKIAl9CiAJCiAJcHVibGljIEludm9jYXRpb25SZWNvcmQg
ZW50ZXJQb2x5SW52b2NhdGlvbihJbnZvY2F0aW9uU2l0ZSBpbnZvY2F0aW9uLCBFeHByZXNzaW9u
W10gaW5uZXJBcmd1bWVudHMpIHsKLQkJSW52b2NhdGlvblJlY29yZCByZWNvcmQgPSBuZXcgSW52
b2NhdGlvblJlY29yZCh0aGlzLmN1cnJlbnRJbnZvY2F0aW9uLCB0aGlzLmludm9jYXRpb25Bcmd1
bWVudHMsIHRoaXMuaW5mZXJlbmNlVmFyaWFibGVzKTsKKwkJSW52b2NhdGlvblJlY29yZCByZWNv
cmQgPSBuZXcgSW52b2NhdGlvblJlY29yZCh0aGlzLmN1cnJlbnRJbnZvY2F0aW9uLCB0aGlzLmlu
dm9jYXRpb25Bcmd1bWVudHMsIHRoaXMuaW5mZXJlbmNlVmFyaWFibGVzLCB0aGlzLmluZmVyZW5j
ZUtpbmQpOwogCQl0aGlzLmluZmVyZW5jZVZhcmlhYmxlcyA9IG51bGw7CiAJCXRoaXMuaW52b2Nh
dGlvbkFyZ3VtZW50cyA9IGlubmVyQXJndW1lbnRzOwogCQl0aGlzLmN1cnJlbnRJbnZvY2F0aW9u
ID0gaW52b2NhdGlvbjsKIAkJCiAJCS8vIHNjaGVkdWxlIGZvciByZS1iaW5kaW5nIHRoZSBpbm5l
ciBhZnRlciBpbmZlcmVuY2Ugc3VjY2VzczoKIAkJdGhpcy5pbm5lclBvbGllcy5hZGQoaW52b2Nh
dGlvbik7Ci0JCWlmIChpbnZvY2F0aW9uIGluc3RhbmNlb2YgSW52b2NhdGlvbikgewotCQkJSW5m
ZXJlbmNlQ29udGV4dDE4IGlubmVyQ29udGV4dCA9ICgoSW52b2NhdGlvbikgaW52b2NhdGlvbiku
aW5mZXJlbmNlQ29udGV4dCgpOwotCQkJaWYgKGlubmVyQ29udGV4dCAhPSBudWxsKQotCQkJCWlu
bmVyQ29udGV4dC5vdXRlckNvbnRleHQgPSB0aGlzOwotCQl9CisvLyBGSVhNRTogY29ubmVjdCBv
dXRlckNvbnRleHQgZHVyaW5nIHJlZ2lzdGVyIChhZnRlciBpbmZlcmVuY2UpPworLy8JCWlmIChp
bnZvY2F0aW9uIGluc3RhbmNlb2YgSW52b2NhdGlvbikgeworLy8JCQlJbmZlcmVuY2VDb250ZXh0
MTggaW5uZXJDb250ZXh0ID0gKChJbnZvY2F0aW9uKSBpbnZvY2F0aW9uKS5pbmZlcmVuY2VDb250
ZXh0KCk7CisvLwkJCWlmIChpbm5lckNvbnRleHQgIT0gbnVsbCkKKy8vCQkJCWlubmVyQ29udGV4
dC5vdXRlckNvbnRleHQgPSB0aGlzOworLy8JCX0KIAkJcmV0dXJuIHJlY29yZDsKIAl9CiAKQEAg
LTY0NiwxNCArNzMyLDM1IEBAIHB1YmxpYyBjbGFzcyBJbmZlcmVuY2VDb250ZXh0MTggewogCQkv
LyByZXBsYWNlIGludm9jYXRpb24gc2l0ZSAmIGFyZ3VtZW50czoKIAkJdGhpcy5jdXJyZW50SW52
b2NhdGlvbiA9IHJlY29yZC5zaXRlOwogCQl0aGlzLmludm9jYXRpb25Bcmd1bWVudHMgPSByZWNv
cmQuaW52b2NhdGlvbkFyZ3VtZW50czsKKwkJdGhpcy5pbmZlcmVuY2VLaW5kID0gcmVjb3JkLmlu
ZmVyZW5jZUtpbmQ7CisJfQorCXB1YmxpYyBib29sZWFuIHJlYmluZElubmVyUG9saWVzKE1ldGhv
ZEJpbmRpbmcgbWV0aG9kLCBJbnZvY2F0aW9uU2l0ZSBzaXRlKSB7CisJCUJvdW5kU2V0IGJvdW5k
cyA9IHRoaXMuY3VycmVudEJvdW5kczsKKwkJVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSA9IHNpdGUu
aW52b2NhdGlvblRhcmdldFR5cGUoKTsKKwkJaWYgKCh0YXJnZXRUeXBlID09IG51bGwgfHwgIXRh
cmdldFR5cGUuaXNQcm9wZXJUeXBlKHRydWUpKSAmJiBzaXRlLmdldEV4cHJlc3Npb25Db250ZXh0
KCkgPT0gRXhwcmVzc2lvbkNvbnRleHQuVkFOSUxMQV9DT05URVhUKSB7CisJCQkvLyBpbiB0aGlz
IGNhc2Ugd2UgZG9uJ3QgeWV0IGhhdmUgdGhlIHNvbHV0aW9uLCBjb21wdXRlIGl0IG5vdzoKKwkJ
CXRyeSB7CisJCQkJYm91bmRzID0gaW5mZXJJbnZvY2F0aW9uVHlwZSh0aGlzLmN1cnJlbnRCb3Vu
ZHMsIG51bGwsIHNpdGUsIG1ldGhvZCk7CisJCQl9IGNhdGNoIChJbmZlcmVuY2VGYWlsdXJlRXhj
ZXB0aW9uIGUpIHsKKwkJCQlyZXR1cm4gZmFsc2U7CisJCQl9CisJCQlpZiAoYm91bmRzID09IG51
bGwpCisJCQkJcmV0dXJuIGZhbHNlOworCQl9CisJCXJlYmluZElubmVyUG9saWVzKGJvdW5kcywg
bWV0aG9kLnBhcmFtZXRlcnMpOworCQlyZXR1cm4gdHJ1ZTsKIAl9Ci0JCiAJLyoqCiAJICogQWZ0
ZXIgaW5mZXJlbmNlIGhhcyBmaW5pc2hlZCwgaXRlcmF0ZSBhbGwgaW5uZXIgcG9seSBleHByZXNz
aW9ucywgdGhhdCBoYXZlIGJlZW4KIAkgKiBpbmNsdWRlZCBpbiB0aGUgaW5mZXJlbmNlLiBGb3Ig
ZWFjaCBvZiB0aGVzZSB1cGRhdGUgc29tZSB0eXBlIGluZm9ybWF0aW9uCiAJICogZnJvbSB0aGUg
aW5mZXJlbmNlIHJlc3VsdCBhbmQgcGVyaGFwcyB0cmlnZ2VyIGZvbGxvdy11cCByZXNvbHZpbmcg
YXMgbmVlZGVkLgogCSAqLwotCXB1YmxpYyB2b2lkIHJlYmluZElubmVyUG9saWVzKEJvdW5kU2V0
IGJvdW5kcywgVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzKSB7CisJcHVibGljIHZvaWQgcmVi
aW5kSW5uZXJQb2xpZXMoQm91bmRTZXQgYm91bmRzLCBUeXBlQmluZGluZ1tdIHBhcmFtZXRlclR5
cGVzKSB7CisJCS8vIFRoaXMgdXBkYXRlcyBhbGwgcmVtYWluaW5nIHBvbHkgZXhwcmVzc2lvbnMg
dGhhdCBhcmUgZGlyZWN0IGFyZ3VtZW50cyBvZiB0aGUgY3VycmVudCBpbnZvY2F0aW9uOgorCQkv
LyAoaGFuZGxlcyBGdW5jdGlvbmFsRXhwcmVzc2lvbiAmIENvbmRpdGlvbmFsRXhwcmVzc2lvbikK
KwkJYWNjZXB0UGVuZGluZ1BvbHlBcmd1bWVudHMoYm91bmRzLCBwYXJhbWV0ZXJUeXBlcywgdGhp
cy5pbmZlcmVuY2VLaW5kID09IENIRUNLX1ZBUkFSRyk7CisJCS8vIFRoaXMgbG9vcHMgb3ZlciBh
bGwgcG9seSBleHByZXNzaW9ucyBmb3Igd2hpY2ggYSBzdWItaW5mZXJlbmNlIHdhcyB0cmlnZ2Vy
ZWQ6CisJCS8vIChoYW5kbGVzIGdlbmVyaWMgaW52b2NhdGlvbnMpCiAJCWludCBsZW4gPSB0aGlz
LmlubmVyUG9saWVzLnNpemUoKTsKIAkJZm9yIChpbnQgaSA9IDA7IGkgPCBsZW47IGkrKykgewog
CQkJRXhwcmVzc2lvbiBpbm5lciA9IChFeHByZXNzaW9uKSB0aGlzLmlubmVyUG9saWVzLmdldChp
KTsKQEAgLTY3NCwyOSArNzgxLDEwMyBAQCBwdWJsaWMgY2xhc3MgSW5mZXJlbmNlQ29udGV4dDE4
IHsKIAkJCQlpZiAoc29sdXRpb25zID09IG51bGwpIAogCQkJCQljb250aW51ZTsgLy8gcGxheSBz
YWZlLCBidXQgc2hvdWxkbid0IGhhcHBlbiBpbiBhIHJlc29sdmVkIGNvbnRleHQKIAkJCQlQYXJh
bWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgaW5uZXJCaW5kaW5nID0gdGhpcy5lbnZpcm9u
bWVudC5jcmVhdGVQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZChvcmlnaW5hbCwgc29sdXRpb25z
KTsKLQkJCQlpbm5lck1lc3NhZ2UudXBkYXRlQmluZGluZ3MoaW5uZXJCaW5kaW5nKTsKLQkJCQlp
bm5lck1lc3NhZ2UubWFya0luZmVyZW5jZUZpbmlzaGVkKCk7IC8vIGludm9jYXRpb24gdHlwZSBp
bmZlcmVuY2UgaGFzIGFscmVhZHkgaGFwcGVuZWQgb24gdGhlIGlubmVyLCB0b28uCiAJCQkJCi0J
CQkJLy8gZmluYWxpemUgcmVzb2x2aW5nIG9mIGFyZ3VtZW50cyBvZiB0aGUgaW5uZXIgaW52b2Nh
dGlvbjoKLQkJCQlUeXBlQmluZGluZ1tdIGlubmVyUGFyYW1ldGVycyA9IGlubmVyQmluZGluZy5w
YXJhbWV0ZXJzOwotCQkJCWludCBpbmZlcmVuY2VLaW5kID0gaW5uZXJNZXNzYWdlLmluZmVyZW5j
ZUtpbmQoKTsKLQkJCQlib29sZWFuIGlzVmFyYXJncyA9IChpbmZlcmVuY2VLaW5kID09IENIRUNL
X1ZBUkFSRykgJiYgaW5uZXJCaW5kaW5nLmlzVmFyYXJncygpOwotCQkJCVR5cGVCaW5kaW5nIHZh
ckFyZ3NUeXBlID0gaXNWYXJhcmdzID8gKChBcnJheUJpbmRpbmcpaW5uZXJQYXJhbWV0ZXJzW2lu
bmVyUGFyYW1ldGVycy5sZW5ndGgtMV0pLmVsZW1lbnRzVHlwZSgpIDogbnVsbDsgCi0JCQkJRXhw
cmVzc2lvbltdIGFyZ3VtZW50cyA9IGlubmVyTWVzc2FnZS5hcmd1bWVudHMoKTsKLQkJCQlpZiAo
YXJndW1lbnRzICE9IG51bGwpIHsKLQkJCQkJZm9yIChpbnQgaiA9IDA7IGogPCBhcmd1bWVudHMu
bGVuZ3RoOyBqKyspIHsKLQkJCQkJCVR5cGVCaW5kaW5nIHBhcmFtID0gKHZhckFyZ3NUeXBlID09
IG51bGwgfHwgKGogPCBpbm5lclBhcmFtZXRlcnMubGVuZ3RoLTEpKQotCQkJCQkJCQkJCQkJPyBp
bm5lclBhcmFtZXRlcnNbal0KLQkJCQkJCQkJCQkJCTogdmFyQXJnc1R5cGU7Ci0JCQkJCQlhcmd1
bWVudHNbal0uY2hlY2tBZ2FpbnN0RmluYWxUYXJnZXRUeXBlKHBhcmFtKTsKKwkJCQlpZiAoaW5u
ZXJNZXNzYWdlLnVwZGF0ZUJpbmRpbmdzKGlubmVyQmluZGluZykpIHsgLy8gb25seSBpZiB3ZSBh
cmUgYWN0dWFsbHkgaW1wcm92aW5nIGFueXRoaW5nCisJCQkJCUluZmVyZW5jZUNvbnRleHQxOCBp
bm5lckNvbnRleHQgPSBpbm5lck1lc3NhZ2UuZ2V0SW5mZXJlbmNlQ29udGV4dChpbm5lckJpbmRp
bmcpOworCQkJCQlpZiAoaW5uZXJDb250ZXh0ICE9IG51bGwpIHsKKwkJCQkJCS8vIGZpbmFsaXpl
IHJlc29sdmluZyBvZiBhcmd1bWVudHMgb2YgdGhlIGlubmVyIGludm9jYXRpb246CisJCQkJCQkv
LyBUT0RPOiBjb21wYXJlIGFuZCBhbGlnbiB3aXRoIEFTVE5vZGUucmVzb2x2ZVBvbHlFeHByZXNz
aW9uQXJndW1lbnRzCisJCQkJCQlUeXBlQmluZGluZ1tdIGlubmVyUGFyYW1ldGVycyA9IGlubmVy
QmluZGluZy5wYXJhbWV0ZXJzOworCQkJCQkJYm9vbGVhbiBpbm5lcklzVmFyQXJncyA9IGlubmVy
Q29udGV4dC5pbmZlcmVuY2VLaW5kID09IEluZmVyZW5jZUNvbnRleHQxOC5DSEVDS19WQVJBUkc7
CisJCQkJCQlFeHByZXNzaW9uW10gYXJndW1lbnRzID0gaW5uZXJNZXNzYWdlLmFyZ3VtZW50cygp
OworCQkJCQkJaWYgKGFyZ3VtZW50cyAhPSBudWxsKSB7CisJCQkJCQkJZm9yIChpbnQgaiA9IDA7
IGogPCBhcmd1bWVudHMubGVuZ3RoOyBqKyspIHsKKwkJCQkJCQkJVHlwZUJpbmRpbmcgcGFyYW0g
PSBnZXRQYXJhbWV0ZXIoaW5uZXJQYXJhbWV0ZXJzLCBqLCBpbm5lcklzVmFyQXJncyk7CisJCQkJ
CQkJCWFyZ3VtZW50c1tqXS5jaGVja0FnYWluc3RGaW5hbFRhcmdldFR5cGUocGFyYW0pOworCQkJ
CQkJCX0KKwkJCQkJCX0KIAkJCQkJfQogCQkJCX0KIAkJCX0KLQkJCS8vIGlubmVyIEZ1bmN0aW9u
YWxFeHByZXNzaW9uIGRvbid0IHNlZW0gdG8gYmUgaW5jbHVkZWQgaW4gaW5mZXJlbmNlLgotCQkJ
Ly8gVE9ETyByZWNoZWNrIGFueSBpbnF1aXJlcyBvbiB0aG9zZSBhY3R1YWxseSBpbnZvbHZlIGlu
ZmVyZW5jZSBvZiB3aGljaCB0aGUgcmVzdWx0cyBhcmUgaW5jbHVkZWQgaGVyZS4gCiAJCX0KIAl9
CiAKKwlwcml2YXRlIHZvaWQgYWNjZXB0UGVuZGluZ1BvbHlBcmd1bWVudHMoZmluYWwgQm91bmRT
ZXQgYWNjZXB0ZWRSZXN1bHQsIFR5cGVCaW5kaW5nW10gcGFyYW1ldGVyVHlwZXMsIGJvb2xlYW4g
aXNWYXJBcmdzKSB7CisJCWlmIChhY2NlcHRlZFJlc3VsdCA9PSBudWxsIHx8IHRoaXMuaW52b2Nh
dGlvbkFyZ3VtZW50cyA9PSBudWxsKSByZXR1cm47CisJCVN1YnN0aXR1dGlvbiBzdWJzdGl0dXRp
b24gPSBuZXcgU3Vic3RpdHV0aW9uKCkgeworCQkJcHVibGljIExvb2t1cEVudmlyb25tZW50IGVu
dmlyb25tZW50KCkgeyAKKwkJCQlyZXR1cm4gSW5mZXJlbmNlQ29udGV4dDE4LnRoaXMuZW52aXJv
bm1lbnQ7CisJCQl9CisJCQlwdWJsaWMgYm9vbGVhbiBpc1Jhd1N1YnN0aXR1dGlvbigpIHsKKwkJ
CQlyZXR1cm4gZmFsc2U7CisJCQl9CisJCQlwdWJsaWMgVHlwZUJpbmRpbmcgc3Vic3RpdHV0ZShU
eXBlVmFyaWFibGVCaW5kaW5nIHR5cGVWYXJpYWJsZSkgeworCQkJCWlmICh0eXBlVmFyaWFibGUg
aW5zdGFuY2VvZiBJbmZlcmVuY2VWYXJpYWJsZSkgeworCQkJCQlyZXR1cm4gYWNjZXB0ZWRSZXN1
bHQuZ2V0SW5zdGFudGlhdGlvbigoSW5mZXJlbmNlVmFyaWFibGUpIHR5cGVWYXJpYWJsZSk7CisJ
CQkJfQorCQkJCXJldHVybiB0eXBlVmFyaWFibGU7CisJCQl9CisJCX07CisJCWZvciAoaW50IGkg
PSAwOyBpIDwgdGhpcy5pbnZvY2F0aW9uQXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7CisJCQlUeXBl
QmluZGluZyB0YXJnZXRUeXBlID0gZ2V0UGFyYW1ldGVyKHBhcmFtZXRlclR5cGVzLCBpLCBpc1Zh
ckFyZ3MpOworCQkJaWYgKCF0YXJnZXRUeXBlLmlzUHJvcGVyVHlwZSh0cnVlKSkKKwkJCQl0YXJn
ZXRUeXBlID0gU2NvcGUuc3Vic3RpdHV0ZShzdWJzdGl0dXRpb24sIHRhcmdldFR5cGUpOworCQkJ
YWNjZXB0UGVuZGluZ0V4cHJlc3Npb24odGhpcy5pbnZvY2F0aW9uQXJndW1lbnRzW2ldLCB0YXJn
ZXRUeXBlKTsKKwkJfQorCX0KKwkKKwlwcml2YXRlIHZvaWQgYWNjZXB0UGVuZGluZ0V4cHJlc3Np
b24oRXhwcmVzc2lvbiBleHByZXNzaW9uLCBUeXBlQmluZGluZyB0YXJnZXRUeXBlKSB7CisJCWlm
IChleHByZXNzaW9uIGluc3RhbmNlb2YgRnVuY3Rpb25hbEV4cHJlc3Npb24pCisJCQlhY2NwZWN0
UGVuZGluZ0Z1bmN0aW9uYWwoKEZ1bmN0aW9uYWxFeHByZXNzaW9uKSBleHByZXNzaW9uLCB0YXJn
ZXRUeXBlKTsKKwkJZWxzZSBpZiAoZXhwcmVzc2lvbiBpbnN0YW5jZW9mIENvbmRpdGlvbmFsRXhw
cmVzc2lvbikKKwkJCWFjY2VwdFBlbmRpbmdDb25kaXRpb25hbCgoQ29uZGl0aW9uYWxFeHByZXNz
aW9uKSBleHByZXNzaW9uLCB0YXJnZXRUeXBlKTsKKwkJCisJfQorCXByaXZhdGUgdm9pZCBhY2Nl
cHRQZW5kaW5nQ29uZGl0aW9uYWwoQ29uZGl0aW9uYWxFeHByZXNzaW9uIGNvbmRpdGlvbmFsRXhw
cmVzc2lvbiwgVHlwZUJpbmRpbmcgdGFyZ2V0VHlwZSkgeworCQljb25kaXRpb25hbEV4cHJlc3Np
b24ucmVzb2x2ZWRUeXBlID0gdGFyZ2V0VHlwZTsKKwkJYWNjZXB0UGVuZGluZ0V4cHJlc3Npb24o
Y29uZGl0aW9uYWxFeHByZXNzaW9uLnZhbHVlSWZUcnVlLCB0YXJnZXRUeXBlKTsKKwl9CisKKwlw
cml2YXRlIHZvaWQgYWNjcGVjdFBlbmRpbmdGdW5jdGlvbmFsKEZ1bmN0aW9uYWxFeHByZXNzaW9u
IGZ1bmN0aW9uYWwsIFR5cGVCaW5kaW5nIHRhcmdldFR5cGUpIHsKKwkJZnVuY3Rpb25hbC5zZXRF
eHBlY3RlZFR5cGUodGFyZ2V0VHlwZSk7CisJCWZ1bmN0aW9uYWwucmVzb2x2ZShmdW5jdGlvbmFs
LmVuY2xvc2luZ1Njb3BlKTsJCQorCX0KKworCXB1YmxpYyBib29sZWFuIGlzVmFyQXJncygpIHsK
KwkJcmV0dXJuIHRoaXMuaW5mZXJlbmNlS2luZCA9PSBDSEVDS19WQVJBUkc7CisJfQorCisJLyoq
CisJICogUmV0cmlldmUgdGhlIHJhbmsndGggcGFyYW1ldGVyLCBwb3NzaWJseSByZXNwZWN0aW5n
IHZhcmFyZ3MgaW52b2NhdGlvbiwgc2VlIDE1LjEyLjIuNC4KKwkgKiBSZXR1cm5zIG51bGwgaWYg
b3V0IG9mIGJvdW5kcyBhbmQgQ0hFQ0tfVkFSQVJHIHdhcyBub3QgcmVxdWVzdGVkLiAKKwkgKi8K
KwlwdWJsaWMgc3RhdGljIFR5cGVCaW5kaW5nIGdldFBhcmFtZXRlcihUeXBlQmluZGluZ1tdIHBh
cmFtZXRlcnMsIGludCByYW5rLCBib29sZWFuIGlzVmFyQXJncykgeworCQlpZiAoaXNWYXJBcmdz
KSB7CisJCQlpZiAocmFuayA+PSBwYXJhbWV0ZXJzLmxlbmd0aC0xKQorCQkJCXJldHVybiAoKEFy
cmF5QmluZGluZylwYXJhbWV0ZXJzW3BhcmFtZXRlcnMubGVuZ3RoLTFdKS5lbGVtZW50c1R5cGUo
KTsJCQkKKwkJfSBlbHNlIGlmIChyYW5rID49IHBhcmFtZXRlcnMubGVuZ3RoKSB7CisJCQlyZXR1
cm4gbnVsbDsKKwkJfQorCQlyZXR1cm4gcGFyYW1ldGVyc1tyYW5rXTsKKwl9CisKKwkvKioKKwkg
KiBDcmVhdGUgYSBwcm9ibGVtIG1ldGhvZCBzaWduYWxpbmcgZmFpbHVyZSBvZiBpbnZvY2F0aW9u
IHR5cGUgaW5mZXJlbmNlLAorCSAqIHVubGVzcyB0aGUgZ2l2ZW4gY2FuZGlkYXRlIGlzIHRvbGVy
YWJsZSB0byBiZSBjb21wYXRpYmxlIHdpdGggYnVnZ3kgamF2YWMuCisJICovCisJcHVibGljIE1l
dGhvZEJpbmRpbmcgZ2V0UmV0dXJuUHJvYmxlbU1ldGhvZElmTmVlZGVkKFR5cGVCaW5kaW5nIGV4
cGVjdGVkVHlwZSwgTWV0aG9kQmluZGluZyBtZXRob2QpIHsKKwkJaWYgKEluZmVyZW5jZUNvbnRl
eHQxOC5TSU1VTEFURV9CVUdfSkRLXzgwMjY1MjcgJiYgZXhwZWN0ZWRUeXBlICE9IG51bGwgJiYg
bWV0aG9kLnJldHVyblR5cGUgaW5zdGFuY2VvZiBSZWZlcmVuY2VCaW5kaW5nKSB7CisJCQlpZiAo
bWV0aG9kLnJldHVyblR5cGUuZXJhc3VyZSgpLmlzQ29tcGF0aWJsZVdpdGgoZXhwZWN0ZWRUeXBl
KSkKKwkJCQlyZXR1cm4gbWV0aG9kOyAvLyBkb24ndCBjb3VudCBhcyBwcm9ibGVtLgorCQl9CisJ
CWlmIChleHBlY3RlZFR5cGUgPT0gbnVsbCkKKwkJCXJldHVybiBtZXRob2Q7IC8vIGFzc3VtZSBp
bmZlcmVuY2UgZmFpbHVyZSBjb25jZXJuZWQgYW5vdGhlciBleHByZXNzaW9uCisJCVByb2JsZW1N
ZXRob2RCaW5kaW5nIHByb2JsZW1NZXRob2QgPSBuZXcgUHJvYmxlbU1ldGhvZEJpbmRpbmcobWV0
aG9kLCBtZXRob2Quc2VsZWN0b3IsIG1ldGhvZC5wYXJhbWV0ZXJzLCBQcm9ibGVtUmVhc29ucy5Q
YXJhbWV0ZXJpemVkTWV0aG9kRXhwZWN0ZWRUeXBlUHJvYmxlbSk7CisJCXByb2JsZW1NZXRob2Qu
cmV0dXJuVHlwZSA9IGV4cGVjdGVkVHlwZTsKKwkJcHJvYmxlbU1ldGhvZC5pbmZlcmVuY2VDb250
ZXh0ID0gdGhpczsKKwkJcmV0dXJuIHByb2JsZW1NZXRob2Q7CisJfQorCiAJLy8gZGVidWdnaW5n
OgogCXB1YmxpYyBTdHJpbmcgdG9TdHJpbmcoKSB7CiAJCVN0cmluZ0J1ZmZlciBidWYgPSBuZXcg
U3RyaW5nQnVmZmVyKCJJbmZlcmVuY2UgQ29udGV4dCIpOyAvLyROT04tTkxTLTEkCmRpZmYgLS1n
aXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvbG9va3VwL1BhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5qYXZh
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2xvb2t1cC9QYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcuamF2YQpp
bmRleCBhNmEyMjZjLi45ODRjMzZlIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1BhcmFtZXRl
cml6ZWRHZW5lcmljTWV0aG9kQmluZGluZy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvUGFyYW1l
dGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nLmphdmEKQEAgLTIzLDcgKzIzLDYgQEAgcGFja2Fn
ZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwOwogaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuRXhwcmVzc2lvbjsKIGltcG9ydCBvcmcu
ZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkV4cHJlc3Npb25Db250ZXh0OwogaW1w
b3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuSW52b2NhdGlvbjsKLWlt
cG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LlBvbHlFeHByZXNzaW9u
OwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuV2lsZGNhcmQ7
CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmNsYXNzZm10LkNsYXNz
RmlsZUNvbnN0YW50czsKIApAQCAtNDQsOCArNDMsMzMgQEAgcHVibGljIGNsYXNzIFBhcmFtZXRl
cml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBleHRlbmRzIFBhcmFtZXRlcml6ZWRNZXRob2RCaW5k
aW4KIAogCS8qKgogCSAqIFBlcmZvcm0gaW5mZXJlbmNlIG9mIGdlbmVyaWMgbWV0aG9kIHR5cGUg
cGFyYW1ldGVycyBhbmQvb3IgZXhwZWN0ZWQgdHlwZQorCSAqIDxwPgorCSAqIEluIDEuOCsgdGhl
IGZvbGxvd2luZyBkaXNjaXBsaW5lIGhhcyB0byBiZSBvYnNlcnZlZCBieSBjYWxsZXJzOgorCSAq
IEVhY2ggaW52b2NhdGlvbiBtdXN0IGJlIHN1YmplY3RlZCB0byB0d28gbGV2ZWxzIG9mIGluZmVy
ZW5jZToKKwkgKiA8L3A+CisJICogPHVsPgorCSAqIDxsaT4ge0BsaW5rIFNjb3BlI0FQUExJQ0FC
SUxJVFkgSW52b2NhdGlvbiBBcHBsaWNhYmlsaXR5IEluZmVyZW5jZX0sIHdoaWNoIG1heSBiZSBh
cHBsaWVkCisJICogICAgIG11bHRpcGxlIHRpbWVzIGZvciB0aGUgc2FtZSBpbnZvY2F0aW9uPC9s
aT4KKwkgKiA8bGk+IHtAbGluayBTY29wZSNJTlZPQ0FUSU9OX1RZUEUgSW52b2NhdGlvbiBUeXBl
IEluZmVyZW5jZX0sIHdoaWNoIGlzIGZpbmFsbHkgcGVyZm9ybWVkCisJICogICAgIGZvciB0aGUg
c2VsZWN0ZWQgbWV0aG9kIGFuZCB3aGljaCBhZGRzIGluZm9ybWF0aW9uIGZyb20gdGhlICJ0YXJn
ZXQgdHlwZSIuPC9saT4KKwkgKiA8L3VsPgorCSAqIDxwPgorCSAqIENsaWVudHMgY2FuIGNvbnRy
b2wgd2hpY2ggcGFydHMgb2YgdGhlIGluZmVyZW5jZSBzaG91bGQgYmUgcGVyZm9ybWVkIGJ5IHBh
c3NpbmcgdGhlIGFwcHJvcHJpYXRlCisJICogZmxhZ3MgaW50byBhcmd1bWVudCAnaW5mZXJlbmNl
TGV2ZWwnLiBPbiBlYWNoIGNhbGwgcGF0aCBpdCBtdXN0IGJlIGVuc3VyZWQgdGhhdCBvbmUgb3Ig
bW9yZQorCSAqIGludm9jYXRpb24gYXBwbGljYWJpbGl0eSBpbmZlcmVuY2VzIGFyZSBhbHdheXMg
Zm9sbG93ZWQgYnkgZXhhY3RseSBvbmUgaW52b2NhdGlvbiB0eXBlIGluZmVyZW5jZQorCSAqICh1
bmxlc3MgZXJyb3JzIGhhdmUgYmVlbiBkZXRlY3RlZCkuCisJICogPC9wPgorCSAqIDxwPgorCSAq
IEluaXRpYWwgY2xpZW50cyBhcmUgdGhlIGRpcmVjdCBjYWxsZXJzIG9mCisJICoge0BsaW5rIFNj
b3BlI2NvbXB1dGVDb21wYXRpYmxlTWV0aG9kKE1ldGhvZEJpbmRpbmcsVHlwZUJpbmRpbmdbXSxJ
bnZvY2F0aW9uU2l0ZSxpbnQpfSwKKwkgKiB3aGljaCBzaG91bGQgZWl0aGVyIGludm9rZSBib3Ro
IGxldmVscyBvZiBpbmZlcmVuY2UgPGVtPm9yPC9lbT4gZGVsZWdhdGUgdGhlIHNlY29uZCBwYXJ0
IHRvCisJICoge0BsaW5rIFNjb3BlI21vc3RTcGVjaWZpY01ldGhvZEJpbmRpbmcoTWV0aG9kQmlu
ZGluZ1tdLGludCxUeXBlQmluZGluZ1tdLEludm9jYXRpb25TaXRlLFJlZmVyZW5jZUJpbmRpbmcp
fSwKKwkgKiB3aGljaCBpcyBpbnRlbmRlZCB0byBlbnN1cmUgY29tcGxldGluZyB0aGUgaW5mZXJl
bmNlIG9uIGFsbCBub24tZXJyb3IgZXhpdHMuCisJICogPC9wPiAgCiAJICovCi0JcHVibGljIHN0
YXRpYyBNZXRob2RCaW5kaW5nIGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKE1ldGhvZEJpbmRpbmcg
b3JpZ2luYWxNZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRzLCBTY29wZSBzY29wZSwgSW52
b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUpIHsKKwlwdWJsaWMgc3RhdGljIE1ldGhvZEJpbmRp
bmcgY29tcHV0ZUNvbXBhdGlibGVNZXRob2QoTWV0aG9kQmluZGluZyBvcmlnaW5hbE1ldGhvZCwg
VHlwZUJpbmRpbmdbXSBhcmd1bWVudHMsIFNjb3BlIHNjb3BlLAorCQkJSW52b2NhdGlvblNpdGUg
aW52b2NhdGlvblNpdGUsIGludCBpbmZlcmVuY2VMZXZlbCkKKwl7CiAJCVBhcmFtZXRlcml6ZWRH
ZW5lcmljTWV0aG9kQmluZGluZyBtZXRob2RTdWJzdGl0dXRlOwogCQlUeXBlVmFyaWFibGVCaW5k
aW5nW10gdHlwZVZhcmlhYmxlcyA9IG9yaWdpbmFsTWV0aG9kLnR5cGVWYXJpYWJsZXM7CiAJCVR5
cGVCaW5kaW5nW10gc3Vic3RpdHV0ZXMgPSBpbnZvY2F0aW9uU2l0ZS5nZW5lcmljVHlwZUFyZ3Vt
ZW50cygpOwpAQCAtNjcsNjMgKzkxLDc2IEBAIHB1YmxpYyBjbGFzcyBQYXJhbWV0ZXJpemVkR2Vu
ZXJpY01ldGhvZEJpbmRpbmcgZXh0ZW5kcyBQYXJhbWV0ZXJpemVkTWV0aG9kQmluZGluCiAKIC8v
ID09PT0gMS44OiBUaGUgbWFpbiBkcml2ZXIgZm9yIGluZmVyZW5jZSBvZiBnZW5lcmljIG1ldGhv
ZHM6ID09PT0KIAkJCUluZmVyZW5jZUNvbnRleHQxOCBpbmZDdHgxOCA9IG51bGw7Ci0JCQlpZiAo
c2NvcGUuY29tcGlsZXJPcHRpb25zKCkuc291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29uc3RhbnRz
LkpESzFfOCkKLQkJCQlpbmZDdHgxOCA9IGludm9jYXRpb25TaXRlLmZyZXNoSW5mZXJlbmNlQ29u
dGV4dChzY29wZSk7CisJCQlpZiAoc2NvcGUuY29tcGlsZXJPcHRpb25zKCkuc291cmNlTGV2ZWwg
Pj0gQ2xhc3NGaWxlQ29uc3RhbnRzLkpESzFfOCkgeworCQkJCWlmICgoaW5mZXJlbmNlTGV2ZWwg
JiBTY29wZS5BUFBMSUNBQklMSVRZKSAhPSAwKQorCQkJCQlpbmZDdHgxOCA9IGludm9jYXRpb25T
aXRlLmZyZXNoSW5mZXJlbmNlQ29udGV4dChzY29wZSk7CisJCQkJZWxzZSBpZiAoaW52b2NhdGlv
blNpdGUgaW5zdGFuY2VvZiBJbnZvY2F0aW9uICYmIG9yaWdpbmFsTWV0aG9kIGluc3RhbmNlb2Yg
UGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2RCaW5kaW5nKQorCQkJCQlpbmZDdHgxOCA9ICgoSW52
b2NhdGlvbikgaW52b2NhdGlvblNpdGUpLmdldEluZmVyZW5jZUNvbnRleHQoKFBhcmFtZXRlcml6
ZWRHZW5lcmljTWV0aG9kQmluZGluZykgb3JpZ2luYWxNZXRob2QpOworCQkJfQogCQkJaWYgKGlu
ZkN0eDE4ICE9IG51bGwpIHsKLQkJCQlpbnQgY2hlY2tLaW5kID0gSW5mZXJlbmNlQ29udGV4dDE4
LkNIRUNLX0xPT1NFOyAvLyBUT0RPOiB2YWxpZGF0ZSBpZiAyIHBoYXNlIGNoZWNraW5nIChzdHJp
Y3QvbG9vc2UgKyB2YXJhcmcpIGlzIHN1ZmZpY2llbnQuCi0JCQkJLy8gMTguNS4xIChBcHBsaWNh
YmlsaXR5KToKLQkJCQlib29sZWFuIGlzRGlhbW9uZCA9IG9yaWdpbmFsTWV0aG9kLmlzQ29uc3Ry
dWN0b3IoKQotCQkJCQkJJiYgaW52b2NhdGlvblNpdGUgaW5zdGFuY2VvZiBFeHByZXNzaW9uCi0J
CQkJCQkmJiAoKEV4cHJlc3Npb24paW52b2NhdGlvblNpdGUpLmlzUG9seUV4cHJlc3Npb24ob3Jp
Z2luYWxNZXRob2QpOwotCQkJCWluZkN0eDE4LmluZmVySW52b2NhdGlvbkFwcGxpY2FiaWxpdHko
b3JpZ2luYWxNZXRob2QsIGFyZ3VtZW50cywgaXNEaWFtb25kLCBjaGVja0tpbmQpOwogCQkJCXRy
eSB7Ci0JCQkJCUJvdW5kU2V0IHByb3Zpc2lvbmFsUmVzdWx0ID0gaW5mQ3R4MTguc29sdmUoKTsK
LQkJCQkJaWYgKHByb3Zpc2lvbmFsUmVzdWx0ID09IG51bGwgJiYgb3JpZ2luYWxNZXRob2QuaXNW
YXJhcmdzKCkpIHsKLQkJCQkJCS8vIGNoZWNrIGZvciB2YXJpYWJsZSBhcml0eSBhcHBsaWNhYmls
aXR5Ci0JCQkJCQlpbmZDdHgxOCA9IGludm9jYXRpb25TaXRlLmZyZXNoSW5mZXJlbmNlQ29udGV4
dChzY29wZSk7IC8vIHN0YXJ0IG92ZXIKLQkJCQkJCWNoZWNrS2luZCA9IEluZmVyZW5jZUNvbnRl
eHQxOC5DSEVDS19WQVJBUkc7Ci0JCQkJCQlpbmZDdHgxOC5pbmZlckludm9jYXRpb25BcHBsaWNh
YmlsaXR5KG9yaWdpbmFsTWV0aG9kLCBhcmd1bWVudHMsIGlzRGlhbW9uZCwgY2hlY2tLaW5kKTsK
LQkJCQkJCXByb3Zpc2lvbmFsUmVzdWx0ID0gaW5mQ3R4MTguc29sdmUoKTsKLQkJCQkJfQotCQkJ
CQlCb3VuZFNldCByZXN1bHQgPSBpbmZDdHgxOC5jdXJyZW50Qm91bmRzLmNvcHkoKTsgLy8gdGhl
IHJlc3VsdCBhZnRlciByZWR1Y3Rpb24sIHdpdGhvdXQgZWZmZWN0cyBvZiByZXNvbHZlKCkKLQkJ
CQkJaWYgKHByb3Zpc2lvbmFsUmVzdWx0ICE9IG51bGwgJiYgaW5mQ3R4MTguaXNSZXNvbHZlZChw
cm92aXNpb25hbFJlc3VsdCkpIHsKLQkJCQkJCS8vIDE4LjUuMiAoSW52b2NhdGlvbiB0eXBlKToK
LQkJCQkJCVR5cGVCaW5kaW5nIGV4cGVjdGVkVHlwZSA9IGludm9jYXRpb25TaXRlLmludm9jYXRp
b25UYXJnZXRUeXBlKCk7Ci0JCQkJCQlib29sZWFuIGhhc1JldHVyblByb2JsZW0gPSBmYWxzZTsK
LQkJCQkJCWJvb2xlYW4gaW52b2NhdGlvblR5cGVJbmZlcnJlZCA9IGZhbHNlOwotCQkJCQkJaWYg
KGV4cGVjdGVkVHlwZSAhPSBudWxsIHx8IGludm9jYXRpb25TaXRlLmdldEV4cHJlc3Npb25Db250
ZXh0KCkgPT0gRXhwcmVzc2lvbkNvbnRleHQuVkFOSUxMQV9DT05URVhUKSB7Ci0JCQkJCQkJcmVz
dWx0ID0gaW5mQ3R4MTguaW5mZXJJbnZvY2F0aW9uVHlwZShyZXN1bHQsIGV4cGVjdGVkVHlwZSwg
aW52b2NhdGlvblNpdGUsIG9yaWdpbmFsTWV0aG9kLCBjaGVja0tpbmQpOwotCQkJCQkJCWludm9j
YXRpb25UeXBlSW5mZXJyZWQgPSB0cnVlOwotCQkJCQkJCWhhc1JldHVyblByb2JsZW0gfD0gcmVz
dWx0ID09IG51bGw7Ci0JCQkJCQkJaWYgKGhhc1JldHVyblByb2JsZW0pCi0JCQkJCQkJCXJlc3Vs
dCA9IHByb3Zpc2lvbmFsUmVzdWx0OyAvLyBsZXQncyBwcmVmZXIgYSB0eXBlIGVycm9yIHJlZ2Fy
ZGluZyB0aGUgcmV0dXJuIHR5cGUgb3ZlciByZXBvcnRpbmcgbm8gbWF0Y2ggYXQgYWxsCi0JCQkJ
CQl9IGVsc2UgewotCQkJCQkJCS8vIHdlJ3JlIG5vdCB5ZXQgcmVhZHkgZm9yIGludm9jYXRpb24g
dHlwZSBpbmZlcmVuY2UKLQkJCQkJCQlyZXN1bHQgPSBwcm92aXNpb25hbFJlc3VsdDsKKwkJCQkJ
Qm91bmRTZXQgcHJvdmlzaW9uYWxSZXN1bHQgPSBudWxsOworCQkJCQlCb3VuZFNldCByZXN1bHQg
PSBudWxsOworCQkJCQlpZiAoKGluZmVyZW5jZUxldmVsICYgU2NvcGUuQVBQTElDQUJJTElUWSkg
IT0gMCkgeworCisJCQkJCQkvLyAtLS0tIDE4LjUuMSAoQXBwbGljYWJpbGl0eSk6IC0tLS0KKwkJ
CQkJCWJvb2xlYW4gaXNEaWFtb25kID0gb3JpZ2luYWxNZXRob2QuaXNDb25zdHJ1Y3RvcigpCisJ
CQkJCQkJCSYmIGludm9jYXRpb25TaXRlIGluc3RhbmNlb2YgRXhwcmVzc2lvbgorCQkJCQkJCQkm
JiAoKEV4cHJlc3Npb24paW52b2NhdGlvblNpdGUpLmlzUG9seUV4cHJlc3Npb24ob3JpZ2luYWxN
ZXRob2QpOworCQkJCQkJaW5mQ3R4MTguaW5mZXJlbmNlS2luZCA9IEluZmVyZW5jZUNvbnRleHQx
OC5DSEVDS19MT09TRTsgLy8gVE9ETzogdmFsaWRhdGUgaWYgMiBwaGFzZSBjaGVja2luZyAoc3Ry
aWN0L2xvb3NlICsgdmFyYXJnKSBpcyBzdWZmaWNpZW50LgorCQkJCQkJaWYgKGluZkN0eDE4Lmlu
ZmVySW52b2NhdGlvbkFwcGxpY2FiaWxpdHkob3JpZ2luYWxNZXRob2QsIGFyZ3VtZW50cywgaXNE
aWFtb25kKSkKKwkJCQkJCQlwcm92aXNpb25hbFJlc3VsdCA9IGluZkN0eDE4LnNvbHZlKCk7CisJ
CQkJCQlpZiAocHJvdmlzaW9uYWxSZXN1bHQgPT0gbnVsbCAmJiBvcmlnaW5hbE1ldGhvZC5pc1Zh
cmFyZ3MoKSkgeworCQkJCQkJCS8vIGNoZWNrIGZvciB2YXJpYWJsZS1hcml0eSBhcHBsaWNhYmls
aXR5CisJCQkJCQkJaW5mQ3R4MTggPSBpbnZvY2F0aW9uU2l0ZS5mcmVzaEluZmVyZW5jZUNvbnRl
eHQoc2NvcGUpOyAvLyBzdGFydCBvdmVyCisJCQkJCQkJaW5mQ3R4MTguaW5mZXJlbmNlS2luZCA9
IEluZmVyZW5jZUNvbnRleHQxOC5DSEVDS19WQVJBUkc7CisJCQkJCQkJaW5mQ3R4MTguaW5mZXJJ
bnZvY2F0aW9uQXBwbGljYWJpbGl0eShvcmlnaW5hbE1ldGhvZCwgYXJndW1lbnRzLCBpc0RpYW1v
bmQpOworCQkJCQkJCXByb3Zpc2lvbmFsUmVzdWx0ID0gaW5mQ3R4MTguc29sdmUoKTsKIAkJCQkJ
CX0KKwkJCQkJCWlmIChwcm92aXNpb25hbFJlc3VsdCAhPSBudWxsICYmIGluZkN0eDE4LmlzUmVz
b2x2ZWQocHJvdmlzaW9uYWxSZXN1bHQpKSB7CisJCQkJCQkJaW5mQ3R4MTguc3RvcmVkU29sdXRp
b24gPSBwcm92aXNpb25hbFJlc3VsdDsKKwkJCQkJCX0KKwkJCQkJfSBlbHNlIHsKKwkJCQkJCXBy
b3Zpc2lvbmFsUmVzdWx0ID0gaW5mQ3R4MTguc3RvcmVkU29sdXRpb247CisJCQkJCX0KKwkJCQkJ
cmVzdWx0ID0gaW5mQ3R4MTguY3VycmVudEJvdW5kcy5jb3B5KCk7IC8vIHRoZSByZXN1bHQgYWZ0
ZXIgcmVkdWN0aW9uLCB3aXRob3V0IGVmZmVjdHMgb2YgcmVzb2x2ZSgpCisKKwkJCQkJVHlwZUJp
bmRpbmcgZXhwZWN0ZWRUeXBlID0gaW52b2NhdGlvblNpdGUuaW52b2NhdGlvblRhcmdldFR5cGUo
KTsKKwkJCQkJYm9vbGVhbiBoYXNSZXR1cm5Qcm9ibGVtID0gZmFsc2U7CisJCQkJCWJvb2xlYW4g
aW52b2NhdGlvblR5cGVJbmZlcnJlZCA9IGZhbHNlOworCQkJCQlpZiAoKGluZmVyZW5jZUxldmVs
ICYgU2NvcGUuSU5WT0NBVElPTl9UWVBFKSAhPSAwIC8vIHJlcXVlc3RlZD8KKwkJCQkJCQkmJiAo
ZXhwZWN0ZWRUeXBlICE9IG51bGwgfHwgaW52b2NhdGlvblNpdGUuZ2V0RXhwcmVzc2lvbkNvbnRl
eHQoKSA9PSBFeHByZXNzaW9uQ29udGV4dC5WQU5JTExBX0NPTlRFWFQpKSB7IC8vIHBvc3NpYmxl
PworCisJCQkJCQkvLyAtLS0tIDE4LjUuMiAoSW52b2NhdGlvbiB0eXBlKTogLS0tLQorCQkJCQkJ
cmVzdWx0ID0gaW5mQ3R4MTguaW5mZXJJbnZvY2F0aW9uVHlwZShyZXN1bHQsIGV4cGVjdGVkVHlw
ZSwgaW52b2NhdGlvblNpdGUsIG9yaWdpbmFsTWV0aG9kKTsKKwkJCQkJCWludm9jYXRpb25UeXBl
SW5mZXJyZWQgPSB0cnVlOworCQkJCQkJaGFzUmV0dXJuUHJvYmxlbSB8PSByZXN1bHQgPT0gbnVs
bDsKKwkJCQkJCWlmIChoYXNSZXR1cm5Qcm9ibGVtKQorCQkJCQkJCXJlc3VsdCA9IHByb3Zpc2lv
bmFsUmVzdWx0OyAvLyBsZXQncyBwcmVmZXIgYSB0eXBlIGVycm9yIHJlZ2FyZGluZyB0aGUgcmV0
dXJuIHR5cGUgb3ZlciByZXBvcnRpbmcgbm8gbWF0Y2ggYXQgYWxsCisJCQkJCX0gZWxzZSB7CisJ
CQkJCQkvLyB3ZSdyZSBub3QgeWV0IHJlYWR5IGZvciBpbnZvY2F0aW9uIHR5cGUgaW5mZXJlbmNl
CisJCQkJCQlyZXN1bHQgPSBwcm92aXNpb25hbFJlc3VsdDsKKwkJCQkJfQorCisJCQkJCWlmIChy
ZXN1bHQgIT0gbnVsbCkgeworCQkJCQkJLy8gYXNzZW1ibGUgdGhlIHNvbHV0aW9uIGV0YzoKIAkJ
CQkJCVR5cGVCaW5kaW5nW10gc29sdXRpb25zID0gaW5mQ3R4MTguZ2V0U29sdXRpb25zKHR5cGVW
YXJpYWJsZXMsIGludm9jYXRpb25TaXRlLCByZXN1bHQpOwogCQkJCQkJaWYgKHNvbHV0aW9ucyAh
PSBudWxsKSB7CiAJCQkJCQkJCiAJCQkJCQkJbWV0aG9kU3Vic3RpdHV0ZSA9IHNjb3BlLmVudmly
b25tZW50KCkuY3JlYXRlUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRob2Qob3JpZ2luYWxNZXRob2Qs
IHNvbHV0aW9ucyk7Ci0JCQkJCQkJCi0JCQkJCQkJaWYgKEluZmVyZW5jZUNvbnRleHQxOC5TSU1V
TEFURV9CVUdfSkRLXzgwMjY1MjcgJiYgZXhwZWN0ZWRUeXBlICE9IG51bGwgJiYgbWV0aG9kU3Vi
c3RpdHV0ZS5yZXR1cm5UeXBlIGluc3RhbmNlb2YgUmVmZXJlbmNlQmluZGluZykKLQkJCQkJCQkJ
aGFzUmV0dXJuUHJvYmxlbSAmPSAhbWV0aG9kU3Vic3RpdHV0ZS5yZXR1cm5UeXBlLmVyYXN1cmUo
KS5pc0NvbXBhdGlibGVXaXRoKGV4cGVjdGVkVHlwZSk7Ci0JCQkJCQkJaWYgKGhhc1JldHVyblBy
b2JsZW0pIHsKLQkJCQkJCQkJUHJvYmxlbU1ldGhvZEJpbmRpbmcgcHJvYmxlbU1ldGhvZCA9IG5l
dyBQcm9ibGVtTWV0aG9kQmluZGluZyhtZXRob2RTdWJzdGl0dXRlLCBtZXRob2RTdWJzdGl0dXRl
LnNlbGVjdG9yLCBwYXJhbWV0ZXJzLCBQcm9ibGVtUmVhc29ucy5QYXJhbWV0ZXJpemVkTWV0aG9k
RXhwZWN0ZWRUeXBlUHJvYmxlbSk7Ci0JCQkJCQkJCXByb2JsZW1NZXRob2QucmV0dXJuVHlwZSA9
IGludm9jYXRpb25TaXRlLmludm9jYXRpb25UYXJnZXRUeXBlKCk7Ci0JCQkJCQkJCXByb2JsZW1N
ZXRob2QuaW5mZXJlbmNlQ29udGV4dCA9IGluZkN0eDE4OwotCQkJCQkJCQlyZXR1cm4gcHJvYmxl
bU1ldGhvZDsKLQkJCQkJCQl9Ci0JCQkJCQkJaWYgKGludm9jYXRpb25TaXRlIGluc3RhbmNlb2Yg
SW52b2NhdGlvbikgewotCQkJCQkJCQlJbnZvY2F0aW9uIGludm9jYXRpb24gPSAoSW52b2NhdGlv
bilpbnZvY2F0aW9uU2l0ZTsKLQkJCQkJCQkJaW52b2NhdGlvbi5zZXRJbmZlcmVuY2VLaW5kKGNo
ZWNrS2luZCk7CisJCQkJCQkJaWYgKGhhc1JldHVyblByb2JsZW0pIHsgLy8gaWxsZWdhbGx5IHdv
cmtpbmcgZnJvbSB0aGUgcHJvdmlzaW9uYWwgcmVzdWx0PworCQkJCQkJCQlNZXRob2RCaW5kaW5n
IHByb2JsZW1NZXRob2QgPSBpbmZDdHgxOC5nZXRSZXR1cm5Qcm9ibGVtTWV0aG9kSWZOZWVkZWQo
ZXhwZWN0ZWRUeXBlLCBtZXRob2RTdWJzdGl0dXRlKTsKKwkJCQkJCQkJaWYgKHByb2JsZW1NZXRo
b2QgaW5zdGFuY2VvZiBQcm9ibGVtTWV0aG9kQmluZGluZykKKwkJCQkJCQkJCXJldHVybiBwcm9i
bGVtTWV0aG9kOwogCQkJCQkJCX0KIAkJCQkJCQlpZiAoaW52b2NhdGlvblR5cGVJbmZlcnJlZCkg
ewotCQkJCQkJCQlpZiAoaW52b2NhdGlvblNpdGUgaW5zdGFuY2VvZiBQb2x5RXhwcmVzc2lvbikK
LQkJCQkJCQkJCSgoUG9seUV4cHJlc3Npb24pIGludm9jYXRpb25TaXRlKS5tYXJrSW5mZXJlbmNl
RmluaXNoZWQoKTsJCQkJCQkJCQkKLQkJCQkJCQkJaW5mQ3R4MTgucmViaW5kSW5uZXJQb2xpZXMo
cmVzdWx0LCBhcmd1bWVudHMpOworCQkJCQkJCQlpbmZDdHgxOC5yZWJpbmRJbm5lclBvbGllcyhy
ZXN1bHQsIG1ldGhvZFN1YnN0aXR1dGUucGFyYW1ldGVycyk7CisJCQkJCQkJCXJldHVybiBtZXRo
b2RTdWJzdGl0dXRlLmJvdW5kQ2hlY2sxOChzY29wZSwgYXJndW1lbnRzKTsKKwkJCQkJCQl9IGVs
c2UgeworCQkJCQkJCQlpZiAoaW52b2NhdGlvblNpdGUgaW5zdGFuY2VvZiBJbnZvY2F0aW9uKQor
CQkJCQkJCQkJKChJbnZvY2F0aW9uKSBpbnZvY2F0aW9uU2l0ZSkucmVnaXN0ZXJJbmZlcmVuY2VD
b250ZXh0KG1ldGhvZFN1YnN0aXR1dGUsIGluZkN0eDE4KTsgLy8ga2VlcCBjb250ZXh0IHNvIHdl
IGNhbiBmaW5pc2ggbGF0ZXIKKwkJCQkJCQkJcmV0dXJuIG1ldGhvZFN1YnN0aXR1dGU7CiAJCQkJ
CQkJfQotCQkJCQkJCWJyZWFrIGNvbXB1dGVTdWJzdGl0dXRlczsKIAkJCQkJCX0KIAkJCQkJfQog
CQkJCQlyZXR1cm4gbnVsbDsKQEAgLTIxMSw2ICsyNDgsNDMgQEAgcHVibGljIGNsYXNzIFBhcmFt
ZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBleHRlbmRzIFBhcmFtZXRlcml6ZWRNZXRob2RC
aW5kaW4KIAkJcmV0dXJuIG1ldGhvZFN1YnN0aXR1dGU7CiAJfQogCisJTWV0aG9kQmluZGluZyBi
b3VuZENoZWNrMTgoU2NvcGUgc2NvcGUsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRzKSB7CisJCVN1
YnN0aXR1dGlvbiBzdWJzdGl0dXRpb24gPSB0aGlzOworCQlQYXJhbWV0ZXJpemVkR2VuZXJpY01l
dGhvZEJpbmRpbmcgbWV0aG9kU3Vic3RpdHV0ZSA9IHRoaXM7CisJCVR5cGVWYXJpYWJsZUJpbmRp
bmdbXSBvcmlnaW5hbFR5cGVWYXJpYWJsZXMgPSB0aGlzLm9yaWdpbmFsTWV0aG9kLnR5cGVWYXJp
YWJsZXM7CisJCS8vIG1vc3RseSBvcmlnaW5hbCBleHRyYWN0IGZyb20gYWJvdmUsIFRPRE86IHJl
bW92ZSBzdHVmZiB0aGF0J3Mgbm8gbG9uZ2VyIG5lZWRlZCBpbiAxLjgrCisJCWZvciAoaW50IGkg
PSAwLCBsZW5ndGggPSBvcmlnaW5hbFR5cGVWYXJpYWJsZXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBp
KyspIHsKKwkJICAgIFR5cGVWYXJpYWJsZUJpbmRpbmcgdHlwZVZhcmlhYmxlID0gb3JpZ2luYWxU
eXBlVmFyaWFibGVzW2ldOworCQkgICAgVHlwZUJpbmRpbmcgc3Vic3RpdHV0ZSA9IG1ldGhvZFN1
YnN0aXR1dGUudHlwZUFyZ3VtZW50c1tpXTsgLy8gcmV0YWluIGZvciBkaWFnbm9zdGljcworCQkg
ICAgLyogaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTM3NTM5
NCwgVG8gYXZvaWQgc3B1cmlvdXMgYm91bmRzIGNoZWNrIGZhaWx1cmVzIGR1ZSB0byBjaXJjdWxh
cml0eSBpbiBmb3JtYWwgYm91bmRzLCAKKwkJICAgICAgIHdlIHNob3VsZCBlbGltaW5hdGUgb25s
eSB0aGUgbGluZ2VyaW5nIGVtYmVkZGVkIHR5cGUgdmFyaWFibGUgcmVmZXJlbmNlcyBhZnRlciBz
dWJzdGl0dXRpb24sIG5vdCBhbGllbiB0eXBlIHZhcmlhYmxlIHJlZmVyZW5jZXMKKwkJICAgICAg
IHRoYXQgY29uc3RpdHV0ZSB0aGUgaW5mZXJlbmNlIHBlciBzZS4KKwkJICAgICAqLyAKKwkJICAg
IFR5cGVCaW5kaW5nIHN1YnN0aXR1dGVGb3JDaGVja3M7CisJCSAgICBpZiAoc3Vic3RpdHV0ZSBp
bnN0YW5jZW9mIFR5cGVWYXJpYWJsZUJpbmRpbmcpIHsKKwkJICAgIAlzdWJzdGl0dXRlRm9yQ2hl
Y2tzID0gc3Vic3RpdHV0ZTsKKwkJICAgIH0gZWxzZSB7CisJCSAgICAJc3Vic3RpdHV0ZUZvckNo
ZWNrcyA9IFNjb3BlLnN1YnN0aXR1dGUobmV3IExpbmdlcmluZ1R5cGVWYXJpYWJsZUVsaW1pbmF0
b3Iob3JpZ2luYWxUeXBlVmFyaWFibGVzLCBudWxsLCBzY29wZSksIHN1YnN0aXR1dGUpOyAvLyB3
aGlsZSB1c2luZyB0aGlzIGZvciBib3VuZHMgY2hlY2sKKwkJICAgIH0KKwkJICAgIAorCQkJc3dp
dGNoICh0eXBlVmFyaWFibGUuYm91bmRDaGVjayhzdWJzdGl0dXRpb24sIHN1YnN0aXR1dGVGb3JD
aGVja3MsIHNjb3BlKSkgeworCQkJCWNhc2UgVHlwZUNvbnN0YW50cy5NSVNNQVRDSCA6CisJCQkg
ICAgICAgIC8vIGluY29tcGF0aWJsZSBkdWUgdG8gYm91bmQgY2hlY2sKKwkJCQkJaW50IGFyZ0xl
bmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7CisJCQkJCVR5cGVCaW5kaW5nW10gYXVnbWVudGVkQXJn
dW1lbnRzID0gbmV3IFR5cGVCaW5kaW5nW2FyZ0xlbmd0aCArIDJdOyAvLyBhcHBlbmQgb2ZmZW5k
aW5nIHN1YnN0aXR1dGUgYW5kIHR5cGVWYXJpYWJsZQorCQkJCQlTeXN0ZW0uYXJyYXljb3B5KGFy
Z3VtZW50cywgMCwgYXVnbWVudGVkQXJndW1lbnRzLCAwLCBhcmdMZW5ndGgpOworCQkJCQlhdWdt
ZW50ZWRBcmd1bWVudHNbYXJnTGVuZ3RoXSA9IHN1YnN0aXR1dGU7CisJCQkJCWF1Z21lbnRlZEFy
Z3VtZW50c1thcmdMZW5ndGgrMV0gPSB0eXBlVmFyaWFibGU7CisJCQkgICAgICAgIHJldHVybiBu
ZXcgUHJvYmxlbU1ldGhvZEJpbmRpbmcobWV0aG9kU3Vic3RpdHV0ZSwgdGhpcy5vcmlnaW5hbE1l
dGhvZC5zZWxlY3RvciwgYXVnbWVudGVkQXJndW1lbnRzLCBQcm9ibGVtUmVhc29ucy5QYXJhbWV0
ZXJCb3VuZE1pc21hdGNoKTsKKwkJCQljYXNlIFR5cGVDb25zdGFudHMuVU5DSEVDS0VEIDoKKwkJ
CQkJLy8gdG9sZXJhdGUgdW5jaGVja2VkIGJvdW5kcworCQkJCQltZXRob2RTdWJzdGl0dXRlLnRh
Z0JpdHMgfD0gVGFnQml0cy5IYXNVbmNoZWNrZWRUeXBlQXJndW1lbnRGb3JCb3VuZENoZWNrOwor
CQkJCQlicmVhazsKKwkJCX0KKwkJfQorCQlyZXR1cm4gbnVsbDsKKwl9CisKIAkvKioKIAkgKiBD
b2xsZWN0IGFyZ3VtZW50IHR5cGUgbWFwcGluZywgaGFuZGxpbmcgdmFyYXJncwogCSAqLwpkaWZm
IC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5q
YXZhCmluZGV4IDAyYjljMWEuLmFkODgxZDMgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2Nv
cGUuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEKQEAgLTYzLDYgKzYzLDE3IEBA
IHB1YmxpYyBhYnN0cmFjdCBjbGFzcyBTY29wZSB7CiAJcHVibGljIHN0YXRpYyBmaW5hbCBpbnQg
Tk9UX1JFTEFURUQgPSAwOwogCXB1YmxpYyBzdGF0aWMgZmluYWwgaW50IE1PUkVfR0VORVJJQyA9
IDE7CiAKKwkvKgorCSAqIEZsYWdzIGZvciBQR01CLmNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKCkg
YW5kIGl0cyBjYWxsZXJzLCB0byByZXF1ZXN0CisJICogd2hpY2ggb2YgdHdvIGxldmVscyBvZiBp
bmZlcmVuY2Ugc2hvdWxkIGJlIHBlcmZvcm1lZCAob3IgYm90aCkuCisJICovCisJLyoqIFJlcXVl
c3QgSW52b2NhdGlvbiBBcHBsaWNhYmlsaXR5IEluZmVyZW5jZSAoMTguNS4xKS4gKi8KKwlwdWJs
aWMgc3RhdGljIGZpbmFsIGludCBBUFBMSUNBQklMSVRZID0gMTsKKwkvKiogUmVxdWVzdCBJbnZv
Y2F0aW9uIFR5cGUgSW5mZXJlbmNlICgxOC41LjIpLiAqLworCXB1YmxpYyBzdGF0aWMgZmluYWwg
aW50IElOVk9DQVRJT05fVFlQRSA9IDI7CisJLyoqIFJlcXVlc3QgYm90aCB7QGxpbmsgI0FQUExJ
Q0FCSUxJVFl9IGFuZCB7QGxpbmsgI0lOVk9DQVRJT05fVFlQRX0gaW5mZXJlbmNlLiAqLworCXB1
YmxpYyBzdGF0aWMgZmluYWwgaW50IEZVTExfSU5GRVJFTkNFID0gQVBQTElDQUJJTElUWSB8IElO
Vk9DQVRJT05fVFlQRTsKKwogCXB1YmxpYyBpbnQga2luZDsKIAlwdWJsaWMgU2NvcGUgcGFyZW50
OwogCkBAIC02NTcsOCArNjY4LDggQEAgcHVibGljIGFic3RyYWN0IGNsYXNzIFNjb3BlIHsKIAkg
KiBXaWxsIGFuc3dlciBhIHN1YnN0aXR1dGVkIG1ldGhvZCBpbiBjYXNlIHRoZSBtZXRob2Qgd2Fz
IGdlbmVyaWMgYW5kIHR5cGUgaW5mZXJlbmNlIGdvdCB0cmlnZ2VyZWQ7CiAJICogaW4gY2FzZSB0
aGUgbWV0aG9kIHdhcyBvcmlnaW5hbGx5IGNvbXBhdGlibGUsIHRoZW4gc2ltcGx5IGFuc3dlciBp
dCBiYWNrLgogCSAqLwotCXByb3RlY3RlZCBmaW5hbCBNZXRob2RCaW5kaW5nIGNvbXB1dGVDb21w
YXRpYmxlTWV0aG9kKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50
cywgSW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUpIHsKLQkJcmV0dXJuIGNvbXB1dGVDb21w
YXRpYmxlTWV0aG9kKG1ldGhvZCwgYXJndW1lbnRzLCBpbnZvY2F0aW9uU2l0ZSwgZmFsc2UpOwor
CXByb3RlY3RlZCBmaW5hbCBNZXRob2RCaW5kaW5nIGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKE1l
dGhvZEJpbmRpbmcgbWV0aG9kLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50cywgSW52b2NhdGlvblNp
dGUgaW52b2NhdGlvblNpdGUsIGludCBpbmZlcmVuY2VMZXZlbCkgeworCQlyZXR1cm4gY29tcHV0
ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kLCBhcmd1bWVudHMsIGludm9jYXRpb25TaXRlLCBpbmZl
cmVuY2VMZXZlbCwgZmFsc2UpOwogCX0JCiAJLyoqCiAJICogSW50ZXJuYWwgdXNlIG9ubHkKQEAg
LTY2Niw3ICs2NzcsOSBAQCBwdWJsaWMgYWJzdHJhY3QgY2xhc3MgU2NvcGUgewogCSAqIFdpbGwg
YW5zd2VyIGEgc3Vic3RpdHV0ZWQgbWV0aG9kIGluIGNhc2UgdGhlIG1ldGhvZCB3YXMgZ2VuZXJp
YyBhbmQgdHlwZSBpbmZlcmVuY2UgZ290IHRyaWdnZXJlZDsKIAkgKiBpbiBjYXNlIHRoZSBtZXRo
b2Qgd2FzIG9yaWdpbmFsbHkgY29tcGF0aWJsZSwgdGhlbiBzaW1wbHkgYW5zd2VyIGl0IGJhY2su
CiAJICovCi0JcHJvdGVjdGVkIGZpbmFsIE1ldGhvZEJpbmRpbmcgY29tcHV0ZUNvbXBhdGlibGVN
ZXRob2QoTWV0aG9kQmluZGluZyBtZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRzLCBJbnZv
Y2F0aW9uU2l0ZSBpbnZvY2F0aW9uU2l0ZSwgYm9vbGVhbiB0aWVicmVha2luZ1ZhcmFyZ3NNZXRo
b2RzKSB7CisJcHJvdGVjdGVkIGZpbmFsIE1ldGhvZEJpbmRpbmcgY29tcHV0ZUNvbXBhdGlibGVN
ZXRob2QoTWV0aG9kQmluZGluZyBtZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRzLAorCQkJ
SW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUsIGludCBpbmZlcmVuY2VMZXZlbCwgYm9vbGVh
biB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzKQorCXsKIAkJVHlwZUJpbmRpbmdbXSBnZW5lcmlj
VHlwZUFyZ3VtZW50cyA9IGludm9jYXRpb25TaXRlLmdlbmVyaWNUeXBlQXJndW1lbnRzKCk7CiAJ
CVR5cGVCaW5kaW5nW10gcGFyYW1ldGVycyA9IG1ldGhvZC5wYXJhbWV0ZXJzOwogCQlUeXBlVmFy
aWFibGVCaW5kaW5nW10gdHlwZVZhcmlhYmxlcyA9IG1ldGhvZC50eXBlVmFyaWFibGVzOwpAQCAt
NzAwLDcgKzcxMyw3IEBAIHB1YmxpYyBhYnN0cmFjdCBjbGFzcyBTY29wZSB7CiAJCQkJYXJndW1l
bnRzID0gbmV3QXJnczsKIAkJCWVsc2UgIC8vIGVuc3VyZSB0aGF0IGNvbXB1dGVDb21wYXRpYmxl
TWV0aG9kKCkgYmVsb3cgY2FuIHVwZGF0ZSBhcmd1bWVudHMgd2l0aG91dCBoYXJtaW5nIG91ciBj
YWxsZXI6IChUT0RPOiBhbHdheXMgY29weSBiZWZvcmUgdGhlIGxvb3A/IG9ubHkgaW4gMS44PykK
IAkJCQlTeXN0ZW0uYXJyYXljb3B5KGFyZ3VtZW50cywgMCwgYXJndW1lbnRzPW5ldyBUeXBlQmlu
ZGluZ1thcmdMZW5ndGhdLCAwLCBhcmdMZW5ndGgpOwotCQkJbWV0aG9kID0gUGFyYW1ldGVyaXpl
ZEdlbmVyaWNNZXRob2RCaW5kaW5nLmNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhvZCwgYXJn
dW1lbnRzLCB0aGlzLCBpbnZvY2F0aW9uU2l0ZSk7CisJCQltZXRob2QgPSBQYXJhbWV0ZXJpemVk
R2VuZXJpY01ldGhvZEJpbmRpbmcuY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kLCBhcmd1
bWVudHMsIHRoaXMsIGludm9jYXRpb25TaXRlLCBpbmZlcmVuY2VMZXZlbCk7CiAJCQlpZiAobWV0
aG9kID09IG51bGwpIHJldHVybiBudWxsOyAvLyBpbmNvbXBhdGlibGUKIAkJCWlmICghbWV0aG9k
LmlzVmFsaWRCaW5kaW5nKCkpIHJldHVybiBtZXRob2Q7IC8vIGJvdW5kIGNoZWNrIGlzc3VlIGlz
IHRha2luZyBwcmVjZWRlbmNlCiAJCX0gZWxzZSBpZiAoZ2VuZXJpY1R5cGVBcmd1bWVudHMgIT0g
bnVsbCAmJiBjb21waWxlck9wdGlvbnMuY29tcGxpYW5jZUxldmVsIDwgQ2xhc3NGaWxlQ29uc3Rh
bnRzLkpESzFfNykgewpAQCAtNzE4LDcgKzczMSw3IEBAIHB1YmxpYyBhYnN0cmFjdCBjbGFzcyBT
Y29wZSB7CiAJCQlpZiAoQ29tcGlsZXJPcHRpb25zLnRvbGVyYXRlSWxsZWdhbEFtYmlndW91c1Zh
cmFyZ3NJbnZvY2F0aW9uICYmIGNvbXBpbGVyT3B0aW9ucy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFz
c0ZpbGVDb25zdGFudHMuSkRLMV83KQogCQkJCXRpZWJyZWFraW5nVmFyYXJnc01ldGhvZHMgPSBm
YWxzZTsKIAkJfQotCQlpZiAoKGNvbXBhdGliaWxpdHlMZXZlbCA9IG15UGFyYW1ldGVyQ29tcGF0
aWJpbGl0eUxldmVsKG1ldGhvZCwgYXJndW1lbnRzLCB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2Rz
LCBpbnZvY2F0aW9uU2l0ZSkpID4gTk9UX0NPTVBBVElCTEUpIHsKKwkJaWYgKChjb21wYXRpYmls
aXR5TGV2ZWwgPSBwYXJhbWV0ZXJDb21wYXRpYmlsaXR5TGV2ZWwxOChtZXRob2QsIGFyZ3VtZW50
cywgdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcywgaW52b2NhdGlvblNpdGUpKSA+IE5PVF9DT01Q
QVRJQkxFKSB7CiAJCQlpZiAoY29tcGF0aWJpbGl0eUxldmVsID09IFZBUkFSR1NfQ09NUEFUSUJM
RSkgewogCQkJCVR5cGVCaW5kaW5nIHZhcmFyZ3NFbGVtZW50VHlwZSA9IG1ldGhvZC5wYXJhbWV0
ZXJzW21ldGhvZC5wYXJhbWV0ZXJzLmxlbmd0aCAtIDFdLmxlYWZDb21wb25lbnRUeXBlKCk7CiAJ
CQkJaWYgKHZhcmFyZ3NFbGVtZW50VHlwZSBpbnN0YW5jZW9mIFJlZmVyZW5jZUJpbmRpbmcpIHsK
QEAgLTc0MSwxMSArNzU0LDYzIEBAIHB1YmxpYyBhYnN0cmFjdCBjbGFzcyBTY29wZSB7CiAJCXJl
dHVybiBudWxsOyAvLyBpbmNvbXBhdGlibGUKIAl9CiAKLQkvLyBGSVhNRShzdGVwaGFuKTogZmlu
YWwgaW50ZWdyYXRpb24gaW50byB0aGUgY29kZQotCXByaXZhdGUgaW50IG15UGFyYW1ldGVyQ29t
cGF0aWJpbGl0eUxldmVsKE1ldGhvZEJpbmRpbmcgbWV0aG9kLCBUeXBlQmluZGluZ1tdIGFyZ3Vt
ZW50cywgYm9vbGVhbiB0aWVicmVha2luZ1ZhcmFyZ3NNZXRob2RzLCBJbnZvY2F0aW9uU2l0ZSBz
aXRlKSB7CisJcHJpdmF0ZSBpbnQgcGFyYW1ldGVyQ29tcGF0aWJpbGl0eUxldmVsMTgoTWV0aG9k
QmluZGluZyBtZXRob2QsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRzLCBib29sZWFuIHRpZWJyZWFr
aW5nVmFyYXJnc01ldGhvZHMsIEludm9jYXRpb25TaXRlIHNpdGUpIHsKIAkJaWYgKHNpdGUgaW5z
dGFuY2VvZiBJbnZvY2F0aW9uKSB7Ci0JCQlpZiAoKChJbnZvY2F0aW9uKSBzaXRlKS5pbmZlcmVu
Y2VLaW5kKCkgPiAwKQotCQkJCXJldHVybiBDT01QQVRJQkxFOyAvLyBpbmZlcmVuY2UgaXMgcmVz
cG9uc2libGUsIG5vIG5lZWQgdG8gcmVjaGVjaworCQkJSW52b2NhdGlvbiBpbnZvY2F0aW9uID0g
KEludm9jYXRpb24pIHNpdGU7CisJCQlpZiAobWV0aG9kIGluc3RhbmNlb2YgUGFyYW1ldGVyaXpl
ZEdlbmVyaWNNZXRob2RCaW5kaW5nKSB7CisJCQkJSW5mZXJlbmNlQ29udGV4dDE4IGluZkN0eCA9
IGludm9jYXRpb24uZ2V0SW5mZXJlbmNlQ29udGV4dCgoUGFyYW1ldGVyaXplZEdlbmVyaWNNZXRo
b2RCaW5kaW5nKSBtZXRob2QpOworCQkJCWlmIChpbmZDdHggIT0gbnVsbCkKKwkJCQkJcmV0dXJu
IENPTVBBVElCTEU7IC8vIGluZmVyZW5jZSBpcyByZXNwb25zaWJsZSwgbm8gbmVlZCB0byByZWNo
ZWNrCisJCQl9CisJCQkvLyBjb2xsZWN0IGlubmVyIGludm9jYXRpb25zIHdoZXJlIHRoZSBvdXRl
ciBkaWQgbm90IGludm9sdmUgYW55IGluZmVyZW5jZToKKwkJCUV4cHJlc3Npb25bXSBpbnZvY2F0
aW9uQXJndW1lbnRzID0gaW52b2NhdGlvbi5hcmd1bWVudHMoKTsKKwkJCWlmIChpbnZvY2F0aW9u
QXJndW1lbnRzICE9IG51bGwpIHsKKwkJCQlpbnQgYXJnTGVuID0gaW52b2NhdGlvbkFyZ3VtZW50
cy5sZW5ndGg7CisJCQkJYm9vbGVhbiBpc1ZhckFyZ3MgPSBmYWxzZTsKKwkJCQlmb3IgKGludCBp
ID0gMDsgaSA8IGFyZ0xlbjsgaSsrKSB7CisJCQkJCUV4cHJlc3Npb24gaW52b2NBcmcgPSBpbnZv
Y2F0aW9uQXJndW1lbnRzW2ldOworCQkJCQlpZiAoaW52b2NBcmcgaW5zdGFuY2VvZiBJbnZvY2F0
aW9uICYmIGludm9jQXJnLnJlc29sdmVkVHlwZSAhPSBudWxsKSB7IC8vIFRPRE8gYW55IHBvbHk/
IFJlZmVyZW5jZUV4cHJlc3Npb24/CisJCQkJCQlJbnZvY2F0aW9uIGlubmVyUG9seSA9IChJbnZv
Y2F0aW9uKSBpbnZvY0FyZzsKKwkJCQkJCVR5cGVCaW5kaW5nIHRhcmdldFR5cGUgPSBJbmZlcmVu
Y2VDb250ZXh0MTguZ2V0UGFyYW1ldGVyKG1ldGhvZC5wYXJhbWV0ZXJzLCBpLCBmYWxzZSk7CisJ
CQkJCQlpZiAodGFyZ2V0VHlwZSA9PSBudWxsICYmIG1ldGhvZC5pc1ZhcmFyZ3MoKSkgeworCQkJ
CQkJCWlzVmFyQXJncyA9IHRydWU7CisJCQkJCQkJdGFyZ2V0VHlwZSA9IEluZmVyZW5jZUNvbnRl
eHQxOC5nZXRQYXJhbWV0ZXIobWV0aG9kLnBhcmFtZXRlcnMsIGksIHRydWUpOworCQkJCQkJfQor
CQkJCQkJVHlwZUJpbmRpbmcgcmVzb2x2ZWRUeXBlID0gaW52b2NBcmcucmVzb2x2ZWRUeXBlOyAK
KwkJCQkJCWlmICghcmVzb2x2ZWRUeXBlLmlzQ29tcGF0aWJsZVdpdGgodGFyZ2V0VHlwZSwgdGhp
cykpIHsKKwkJCQkJCQlNZXRob2RCaW5kaW5nIGlubmVyQmluZGluZyA9IGlubmVyUG9seS5iaW5k
aW5nKCk7CisJCQkJCQkJaWYgKGlubmVyQmluZGluZyBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRH
ZW5lcmljTWV0aG9kQmluZGluZykgeyAvLyBGSVhNRTogZG9lcyB0aGlzIGhhcHBlbj8KKwkJCQkJ
CQkJSW5mZXJlbmNlQ29udGV4dDE4IGluZkN0eDE4ID0gaW5uZXJQb2x5LmdldEluZmVyZW5jZUNv
bnRleHQoKFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgaW5uZXJCaW5kaW5nKTsK
KwkJCQkJCQkJaWYgKGluZkN0eDE4ICE9IG51bGwpIHsKKwkJCQkJCQkJCS8vIG5vdCBkZXRlY3Rl
ZCBhcyBjb21wYXRpYmxlLCBiZWNhdXNlIGluZmVyZW5jZSBzdGlsbCBuZWVkcyB0byBjb21wbGV0
ZT8KKwkJCQkJCQkJCU1ldGhvZEJpbmRpbmcgc29sdXRpb24gPSBpbmZDdHgxOC5nZXRJbnZvY2F0
aW9uVHlwZUluZmVyZW5jZVNvbHV0aW9uKGlubmVyUG9seSwgdGFyZ2V0VHlwZSk7CisJCQkJCQkJ
CQlpZiAoc29sdXRpb24gIT0gbnVsbCkgeworCQkJCQkJCQkJCWlmIChzb2x1dGlvbi5yZXR1cm5U
eXBlICE9IG51bGwgJiYgc29sdXRpb24ucmV0dXJuVHlwZS5pc0NvbXBhdGlibGVXaXRoKHRhcmdl
dFR5cGUsIHRoaXMpKQorCQkJCQkJCQkJCQlyZXR1cm4gaXNWYXJBcmdzID8gVkFSQVJHU19DT01Q
QVRJQkxFIDogQ09NUEFUSUJMRTsKKwkJCQkJCQkJCX0gZWxzZSB7CisJCQkJCQkJCQkJTWV0aG9k
QmluZGluZyBwcm9ibGVtTWV0aG9kID0gaW5mQ3R4MTguZ2V0UmV0dXJuUHJvYmxlbU1ldGhvZElm
TmVlZGVkKHRhcmdldFR5cGUsIGlubmVyUG9seS5iaW5kaW5nKCkpOworCQkJCQkJCQkJCWlmIChw
cm9ibGVtTWV0aG9kICE9IG51bGwgJiYgcHJvYmxlbU1ldGhvZC5pc1ZhbGlkQmluZGluZygpKQor
CQkJCQkJCQkJCQlyZXR1cm4gQ09NUEFUSUJMRTsKKwkJCQkJCQkJCQlyZXR1cm4gTk9UX0NPTVBB
VElCTEU7CisJCQkJCQkJCQl9CisJCQkJCQkJCX0gZWxzZSBpZiAoaW5uZXJQb2x5IGluc3RhbmNl
b2YgQWxsb2NhdGlvbkV4cHJlc3Npb24pIHsKKwkJCQkJCQkJCS8vIG5vdCBkZXRlY3RlZCBhcyBj
b21wYXRpYmxlLCBiZWNhdXNlIGl0cyBhIGRpYW1vbmQgd2hvc2UgdHlwZSBoYXNuJ3QgeWV0IGJl
ZW4gaW5mZXJyZWQ/CisJCQkJCQkJCQlUeXBlQmluZGluZ1tdIHR5cGVBcmd1bWVudHMgPSByZXNv
bHZlZFR5cGUudHlwZUFyZ3VtZW50cygpOworCQkJCQkJCQkJaWYgKHR5cGVBcmd1bWVudHMgIT0g
bnVsbCAmJiB0eXBlQXJndW1lbnRzLmxlbmd0aCA9PSAwKSB7CisJCQkJCQkJCQkJQWxsb2NhdGlv
bkV4cHJlc3Npb24gYWxsb2MgPSAoQWxsb2NhdGlvbkV4cHJlc3Npb24pIGlubmVyUG9seTsKKwkJ
CQkJCQkJCQlpZiAoKGFsbG9jLnR5cGUuYml0cyAmIEFTVE5vZGUuSXNEaWFtb25kKSAhPSAwKSB7
CisJCQkJCQkJCQkJCS8vIG5vdC15ZXQtaW5mZXJyZWQgZGlhbW9uZDogZXJhc3VyZSBjb21wYXRp
YmlsaXR5IHNob3VsZCBzdWZmaWNlLCBkZXRhaWwgd2lsbCBiZSBjaGVja2VkIHVzaW5nIGluZmVy
ZW5jZQorCQkJCQkJCQkJCQlpZiAoaW52b2NBcmcucmVzb2x2ZWRUeXBlLmlzQ29tcGF0aWJsZVdp
dGgodGFyZ2V0VHlwZS5lcmFzdXJlKCksIHRoaXMpKQorCQkJCQkJCQkJCQkJcmV0dXJuIENPTVBB
VElCTEU7CisJCQkJCQkJCQkJCXJldHVybiBOT1RfQ09NUEFUSUJMRTsKKwkJCQkJCQkJCQl9CisJ
CQkJCQkJCQl9CisJCQkJCQkJCX0KKwkJCQkJCQl9CisJCQkJCQl9CisJCQkJCX0KKwkJCQl9CisJ
CQl9CiAJCX0KIAkJcmV0dXJuIHBhcmFtZXRlckNvbXBhdGliaWxpdHlMZXZlbChtZXRob2QsIGFy
Z3VtZW50cywgdGllYnJlYWtpbmdWYXJhcmdzTWV0aG9kcyk7CiAJfQpAQCAtMTA4Myw3ICsxMTQ4
LDcgQEAgcHVibGljIGFic3RyYWN0IGNsYXNzIFNjb3BlIHsKIAkJCS8vIGFyZ3VtZW50IHR5cGUg
Y29tcGF0aWJpbGl0eSBjaGVjawogCQkJZm9yIChpbnQgaSA9IHN0YXJ0Rm91bmRTaXplOyBpIDwg
Zm91bmRTaXplOyBpKyspIHsKIAkJCQlNZXRob2RCaW5kaW5nIG1ldGhvZEJpbmRpbmcgPSAoTWV0
aG9kQmluZGluZykgZm91bmQuZWxlbWVudEF0KGkpOwotCQkJCU1ldGhvZEJpbmRpbmcgY29tcGF0
aWJsZU1ldGhvZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhvZEJpbmRpbmcsIGFyZ3Vt
ZW50VHlwZXMsIGludm9jYXRpb25TaXRlKTsKKwkJCQlNZXRob2RCaW5kaW5nIGNvbXBhdGlibGVN
ZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2RCaW5kaW5nLCBhcmd1bWVudFR5
cGVzLCBpbnZvY2F0aW9uU2l0ZSwgQVBQTElDQUJJTElUWSk7CiAJCQkJaWYgKGNvbXBhdGlibGVN
ZXRob2QgIT0gbnVsbCkgewogCQkJCQlpZiAoY29tcGF0aWJsZU1ldGhvZC5pc1ZhbGlkQmluZGlu
ZygpKSB7CiAJCQkJCQlpZiAoY29uY3JldGVNYXRjaCAhPSBudWxsICYmIGVudmlyb25tZW50KCku
bWV0aG9kVmVyaWZpZXIoKS5hcmVNZXRob2RzQ29tcGF0aWJsZShjb25jcmV0ZU1hdGNoLCBjb21w
YXRpYmxlTWV0aG9kKSkKQEAgLTExMDcsNiArMTE3Miw4IEBAIHB1YmxpYyBhYnN0cmFjdCBjbGFz
cyBTY29wZSB7CiAJCQkJCXJldHVybiBwcm9ibGVtTWV0aG9kOyAvLyBjYW4gYmUgbnVsbAogCQkJ
CWNvbmNyZXRlTWF0Y2ggPSBjYW5kaWRhdGVzWzBdOwogCQkJfQorCQkJLy8gMS44OiBHaXZlIGlu
ZmVyZW5jZSBhIGNoYW5jZSB0byBwZXJmb3JtIG91dHN0YW5kaW5nIHRhc2tzICgxOC41LjIpOgor
CQkJY29uY3JldGVNYXRjaCA9IGluZmVySW52b2NhdGlvblR5cGUoaW52b2NhdGlvblNpdGUsIGNv
bmNyZXRlTWF0Y2gsIGFyZ3VtZW50VHlwZXMpOwogCQkJY29tcGlsYXRpb25Vbml0U2NvcGUoKS5y
ZWNvcmRUeXBlUmVmZXJlbmNlcyhjb25jcmV0ZU1hdGNoLnRocm93bkV4Y2VwdGlvbnMpOwogCQkJ
cmV0dXJuIGNvbmNyZXRlTWF0Y2g7CiAJCX0KQEAgLTExNzgsNyArMTI0NSw3IEBAIHB1YmxpYyBh
YnN0cmFjdCBjbGFzcyBTY29wZSB7CiAJCQkJLy8gdGFyZ2V0aW5nIGEgZ2VuZXJpYyBtZXRob2Qg
Y291bGQgZmluZCBhbiBleGFjdCBtYXRjaCB3aXRoIHZhcmlhYmxlIHJldHVybiB0eXBlCiAJCQkJ
aWYgKGludm9jYXRpb25TaXRlLmdlbmVyaWNUeXBlQXJndW1lbnRzKCkgIT0gbnVsbCkgewogCQkJ
CQkvLyBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZCguLikgd2lsbCByZXR1cm4gYSBQb2x5bW9ycGhp
Y01ldGhvZEJpbmRpbmcgaWYgbmVlZGVkCi0JCQkJCWV4YWN0TWV0aG9kID0gY29tcHV0ZUNvbXBh
dGlibGVNZXRob2QoZXhhY3RNZXRob2QsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlKTsK
KwkJCQkJZXhhY3RNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChleGFjdE1ldGhvZCwg
YXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUsIEZVTExfSU5GRVJFTkNFKTsKIAkJCQl9IGVs
c2UgaWYgKChleGFjdE1ldGhvZC50YWdCaXRzICYgVGFnQml0cy5Bbm5vdGF0aW9uUG9seW1vcnBo
aWNTaWduYXR1cmUpICE9IDApIHsKIAkJCQkJLy8gZ2VuZXJhdGUgcG9seW1vcnBoaWMgbWV0aG9k
CiAJCQkJCXJldHVybiB0aGlzLmVudmlyb25tZW50KCkuY3JlYXRlUG9seW1vcnBoaWNNZXRob2Qo
ZXhhY3RNZXRob2QsIGFyZ3VtZW50VHlwZXMpOwpAQCAtMTU1NiwxMyArMTYyMywzMCBAQCBwdWJs
aWMgYWJzdHJhY3QgY2xhc3MgU2NvcGUgewogCQkJLy8gYXJndW1lbnQgdHlwZSBjb21wYXRpYmls
aXR5IGNoZWNrCiAJCQlmb3IgKGludCBpID0gMDsgaSA8IGZvdW5kU2l6ZTsgaSsrKSB7CiAJCQkJ
TWV0aG9kQmluZGluZyBtZXRob2RCaW5kaW5nID0gKE1ldGhvZEJpbmRpbmcpIGZvdW5kLmVsZW1l
bnRBdChpKTsKLQkJCQlNZXRob2RCaW5kaW5nIGNvbXBhdGlibGVNZXRob2QgPSBjb21wdXRlQ29t
cGF0aWJsZU1ldGhvZChtZXRob2RCaW5kaW5nLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0
ZSk7CisJCQkJTWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGli
bGVNZXRob2QobWV0aG9kQmluZGluZywgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUsIEFQ
UExJQ0FCSUxJVFkpOwogCQkJCWlmIChjb21wYXRpYmxlTWV0aG9kICE9IG51bGwpIHsKIAkJCQkJ
aWYgKGNvbXBhdGlibGVNZXRob2QuaXNWYWxpZEJpbmRpbmcoKSkgewogCQkJCQkJaWYgKGZvdW5k
U2l6ZSA9PSAxICYmIGNvbXBhdGlibGVNZXRob2QuY2FuQmVTZWVuQnkocmVjZWl2ZXJUeXBlLCBp
bnZvY2F0aW9uU2l0ZSwgdGhpcykpIHsKIAkJCQkJCQkvLyByZXR1cm4gdGhlIHNpbmdsZSB2aXNp
YmxlIG1hdGNoIG5vdwogCQkJCQkJCWlmIChzZWFyY2hGb3JEZWZhdWx0QWJzdHJhY3RNZXRob2Qp
CiAJCQkJCQkJCXJldHVybiBmaW5kRGVmYXVsdEFic3RyYWN0TWV0aG9kKHJlY2VpdmVyVHlwZSwg
c2VsZWN0b3IsIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlLCBjbGFzc0hpZXJhcmNoeVN0
YXJ0LCBmb3VuZCwgY29tcGF0aWJsZU1ldGhvZCk7CisvLyA9PT09IDEuODogRmluYWxpemUgdHlw
ZSBpbmZlcmVuY2Ugb2YgZ2VuZXJpYyBtZXRob2RzOiA9PT09CisJCQkJCQkJaWYgKGNvbXBhdGli
bGVNZXRob2QgaW5zdGFuY2VvZiBQYXJhbWV0ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcgJiYg
aW52b2NhdGlvblNpdGUgaW5zdGFuY2VvZiBJbnZvY2F0aW9uKSB7CisJCQkJCQkJCVBhcmFtZXRl
cml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBwYXJhbWV0ZXJpemVkTWV0aG9kID0gKChQYXJhbWV0
ZXJpemVkR2VuZXJpY01ldGhvZEJpbmRpbmcpIGNvbXBhdGlibGVNZXRob2QpOworCQkJCQkJCQlJ
bnZvY2F0aW9uIGludm9jYXRpb24gPSAoSW52b2NhdGlvbikgaW52b2NhdGlvblNpdGU7CisJCQkJ
CQkJCS8vIFRPRE8gdXNlIFNjb3BlLmluZmVySW52b2NhdGlvblR5cGUoKSA/CisJCQkJCQkJCUlu
ZmVyZW5jZUNvbnRleHQxOCBjdHggPSBpbnZvY2F0aW9uLmdldEluZmVyZW5jZUNvbnRleHQocGFy
YW1ldGVyaXplZE1ldGhvZCk7CisJCQkJCQkJCWlmIChjdHggIT0gbnVsbCAmJiAhY3R4Lmhhc0Zp
bmlzaGVkKSB7CisJCQkJCQkJCQlNZXRob2RCaW5kaW5nIGltcHJvdmVkID0gY3R4LmluZmVySW52
b2NhdGlvblR5cGUoaW52b2NhdGlvbiwgYXJndW1lbnRUeXBlcywgcGFyYW1ldGVyaXplZE1ldGhv
ZCk7CisJCQkJCQkJCQlpZiAoaW1wcm92ZWQuaXNWYWxpZEJpbmRpbmcoKSkgeworCQkJCQkJCQkJ
CWNvbXBhdGlibGVNZXRob2QgPSBpbXByb3ZlZDsKKwkJCQkJCQkJCX0gZWxzZSB7CisJCQkJCQkJ
CQkJcHJvYmxlbU1ldGhvZCA9IGltcHJvdmVkOworCQkJCQkJCQkJCWNvbnRpbnVlOworCQkJCQkJ
CQkJfQorCQkJCQkJCQl9CisJCQkJCQkJfQorLy8gPT09PSAxLjggPT09PQogCQkJCQkJCXVuaXRT
Y29wZS5yZWNvcmRUeXBlUmVmZXJlbmNlcyhjb21wYXRpYmxlTWV0aG9kLnRocm93bkV4Y2VwdGlv
bnMpOwogCQkJCQkJCXJldHVybiBjb21wYXRpYmxlTWV0aG9kOwogCQkJCQkJfQpAQCAtMTY1Nyw4
ICsxNzQxLDEwIEBAIHB1YmxpYyBhYnN0cmFjdCBjbGFzcyBTY29wZSB7CiAJCQljYXNlIDEgOgog
CQkJCWlmIChzZWFyY2hGb3JEZWZhdWx0QWJzdHJhY3RNZXRob2QpCiAJCQkJCXJldHVybiBmaW5k
RGVmYXVsdEFic3RyYWN0TWV0aG9kKHJlY2VpdmVyVHlwZSwgc2VsZWN0b3IsIGFyZ3VtZW50VHlw
ZXMsIGludm9jYXRpb25TaXRlLCBjbGFzc0hpZXJhcmNoeVN0YXJ0LCBmb3VuZCwgY2FuZGlkYXRl
c1swXSk7Ci0JCQkJdW5pdFNjb3BlLnJlY29yZFR5cGVSZWZlcmVuY2VzKGNhbmRpZGF0ZXNbMF0u
dGhyb3duRXhjZXB0aW9ucyk7Ci0JCQkJcmV0dXJuIGNhbmRpZGF0ZXNbMF07CisJCQkJLy8gMS44
OiBHaXZlIGluZmVyZW5jZSBhIGNoYW5jZSB0byBwZXJmb3JtIG91dHN0YW5kaW5nIHRhc2tzICgx
OC41LjIpOgorCQkJCWNhbmRpZGF0ZSA9IGluZmVySW52b2NhdGlvblR5cGUoaW52b2NhdGlvblNp
dGUsIGNhbmRpZGF0ZXNbMF0sIGFyZ3VtZW50VHlwZXMpOworCQkJCXVuaXRTY29wZS5yZWNvcmRU
eXBlUmVmZXJlbmNlcyhjYW5kaWRhdGUudGhyb3duRXhjZXB0aW9ucyk7CisJCQkJcmV0dXJuIGNh
bmRpZGF0ZTsKIAkJCWRlZmF1bHQgOgogCQkJCWJyZWFrOwogCQl9CkBAIC0yMjA2LDcgKzIyOTIs
NyBAQCBwdWJsaWMgYWJzdHJhY3QgY2xhc3MgU2NvcGUgewogCQkJaWYgKG1ldGhvZEJpbmRpbmcg
IT0gbnVsbCAmJiBtZXRob2RCaW5kaW5nLmNhbkJlU2VlbkJ5KGludm9jYXRpb25TaXRlLCB0aGlz
KSkgewogCQkJICAgIC8vIHRhcmdldGluZyBhIG5vbiBnZW5lcmljIGNvbnN0cnVjdG9yIHdpdGgg
dHlwZSBhcmd1bWVudHMgPwogCQkJICAgIGlmIChpbnZvY2F0aW9uU2l0ZS5nZW5lcmljVHlwZUFy
Z3VtZW50cygpICE9IG51bGwpCi0JCQkgICAgCW1ldGhvZEJpbmRpbmcgPSBjb21wdXRlQ29tcGF0
aWJsZU1ldGhvZChtZXRob2RCaW5kaW5nLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSk7
CisJCQkgICAgCW1ldGhvZEJpbmRpbmcgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2RC
aW5kaW5nLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSwgRlVMTF9JTkZFUkVOQ0UpOwog
CQkJCXJldHVybiBtZXRob2RCaW5kaW5nOwogCQkJfQogCQkJTWV0aG9kQmluZGluZ1tdIG1ldGhv
ZHMgPSByZWNlaXZlclR5cGUuZ2V0TWV0aG9kcyhUeXBlQ29uc3RhbnRzLklOSVQsIGFyZ3VtZW50
VHlwZXMubGVuZ3RoKTsKQEAgLTIyMjAsNyArMjMwNiw3IEBAIHB1YmxpYyBhYnN0cmFjdCBjbGFz
cyBTY29wZSB7CiAJCQlpbnQgY29tcGF0aWJsZUluZGV4ID0gMDsKIAkJCU1ldGhvZEJpbmRpbmcg
cHJvYmxlbU1ldGhvZCA9IG51bGw7CiAJCQlmb3IgKGludCBpID0gMCwgbGVuZ3RoID0gbWV0aG9k
cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykgewotCQkJCU1ldGhvZEJpbmRpbmcgY29tcGF0aWJs
ZU1ldGhvZCA9IGNvbXB1dGVDb21wYXRpYmxlTWV0aG9kKG1ldGhvZHNbaV0sIGFyZ3VtZW50VHlw
ZXMsIGludm9jYXRpb25TaXRlKTsKKwkJCQlNZXRob2RCaW5kaW5nIGNvbXBhdGlibGVNZXRob2Qg
PSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChtZXRob2RzW2ldLCBhcmd1bWVudFR5cGVzLCBpbnZv
Y2F0aW9uU2l0ZSwgQVBQTElDQUJJTElUWSk7CiAJCQkJaWYgKGNvbXBhdGlibGVNZXRob2QgIT0g
bnVsbCkgewogCQkJCQlpZiAoY29tcGF0aWJsZU1ldGhvZC5pc1ZhbGlkQmluZGluZygpKQogCQkJ
CQkJY29tcGF0aWJsZVtjb21wYXRpYmxlSW5kZXgrK10gPSBjb21wYXRpYmxlTWV0aG9kOwpAQCAt
MjI0Miw3ICsyMzI4LDEwIEBAIHB1YmxpYyBhYnN0cmFjdCBjbGFzcyBTY29wZSB7CiAJCQkJaWYg
KG1ldGhvZC5jYW5CZVNlZW5CeShpbnZvY2F0aW9uU2l0ZSwgdGhpcykpCiAJCQkJCXZpc2libGVb
dmlzaWJsZUluZGV4KytdID0gbWV0aG9kOwogCQkJfQotCQkJaWYgKHZpc2libGVJbmRleCA9PSAx
KSByZXR1cm4gdmlzaWJsZVswXTsKKwkJCWlmICh2aXNpYmxlSW5kZXggPT0gMSkgeworCQkJCS8v
IDEuODogR2l2ZSBpbmZlcmVuY2UgYSBjaGFuY2UgdG8gcGVyZm9ybSBvdXRzdGFuZGluZyB0YXNr
cyAoMTguNS4yKToKKwkJCQlyZXR1cm4gaW5mZXJJbnZvY2F0aW9uVHlwZShpbnZvY2F0aW9uU2l0
ZSwgdmlzaWJsZVswXSwgYXJndW1lbnRUeXBlcyk7CisJCQl9CiAJCQlpZiAodmlzaWJsZUluZGV4
ID09IDApCiAJCQkJcmV0dXJuIG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZygKIAkJCQkJY29tcGF0
aWJsZVswXSwKQEAgLTI1MDUsNyArMjU5NCw3IEBAIHB1YmxpYyBhYnN0cmFjdCBjbGFzcyBTY29w
ZSB7CiAJCQkJCQkJCWlmIChmb3VuZFByb2JsZW0gPT0gbnVsbCkKIAkJCQkJCQkJCWZvdW5kUHJv
YmxlbSA9IHBvc3NpYmxlOyAvLyBhbnN3ZXIgYXMgZXJyb3IgY2FzZSBtYXRjaAogCQkJCQkJCX0g
ZWxzZSBpZiAocG9zc2libGUuaXNTdGF0aWMoKSkgewotCQkJCQkJCQlNZXRob2RCaW5kaW5nIGNv
bXBhdGlibGVNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChwb3NzaWJsZSwgYXJndW1l
bnRUeXBlcywgaW52b2NhdGlvblNpdGUpOworCQkJCQkJCQlNZXRob2RCaW5kaW5nIGNvbXBhdGli
bGVNZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChwb3NzaWJsZSwgYXJndW1lbnRUeXBl
cywgaW52b2NhdGlvblNpdGUsIEFQUExJQ0FCSUxJVFkpOwogCQkJCQkJCQlpZiAoY29tcGF0aWJs
ZU1ldGhvZCAhPSBudWxsKSB7CiAJCQkJCQkJCQlpZiAoY29tcGF0aWJsZU1ldGhvZC5pc1ZhbGlk
QmluZGluZygpKSB7CiAJCQkJCQkJCQkJaWYgKGNvbXBhdGlibGVNZXRob2QuY2FuQmVTZWVuQnko
dW5pdFNjb3BlLmZQYWNrYWdlKSkgewpAQCAtMjUzNiw5ICsyNjI1LDEzIEBAIHB1YmxpYyBhYnN0
cmFjdCBjbGFzcyBTY29wZSB7CiAJCQkJCX0KIAkJCQl9CiAJCQkJaWYgKHZpc2libGUgIT0gbnVs
bCkgewotCQkJCQlNZXRob2RCaW5kaW5nW10gdGVtcCA9IG5ldyBNZXRob2RCaW5kaW5nW3Zpc2li
bGUuc2l6ZV07Ci0JCQkJCXZpc2libGUuY29weUludG8odGVtcCk7Ci0JCQkJCWZvdW5kTWV0aG9k
ID0gbW9zdFNwZWNpZmljTWV0aG9kQmluZGluZyh0ZW1wLCB0ZW1wLmxlbmd0aCwgYXJndW1lbnRU
eXBlcywgaW52b2NhdGlvblNpdGUsIG51bGwpOworCQkJCQlpZiAodmlzaWJsZS5zaXplID09IDEp
IHsKKwkJCQkJCWZvdW5kTWV0aG9kID0gKE1ldGhvZEJpbmRpbmcpIHZpc2libGUuZWxlbWVudEF0
KDApOworCQkJCQl9IGVsc2UgeworCQkJCQkJTWV0aG9kQmluZGluZ1tdIHRlbXAgPSBuZXcgTWV0
aG9kQmluZGluZ1t2aXNpYmxlLnNpemVdOworCQkJCQkJdmlzaWJsZS5jb3B5SW50byh0ZW1wKTsK
KwkJCQkJCWZvdW5kTWV0aG9kID0gbW9zdFNwZWNpZmljTWV0aG9kQmluZGluZyh0ZW1wLCB0ZW1w
Lmxlbmd0aCwgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUsIG51bGwpOworCQkJCQl9CiAJ
CQkJfQogCQkJfQogCQl9CkBAIC00MTgxLDcgKzQyNzQsOCBAQCBwdWJsaWMgYWJzdHJhY3QgY2xh
c3MgU2NvcGUgewogCQkJCQkJCW1ldGhvZFRvVGVzdCA9IHBOZXh0Lm9yaWdpbmFsTWV0aG9kOwog
CQkJCQkJfQogCQkJCQl9Ci0JCQkJCU1ldGhvZEJpbmRpbmcgYWNjZXB0YWJsZSA9IGNvbXB1dGVD
b21wYXRpYmxlTWV0aG9kKG1ldGhvZFRvVGVzdCwgdGllYnJlYWtNZXRob2QucGFyYW1ldGVycywg
dGllQnJlYWtJbnZvY2F0aW9uU2l0ZSwgbGV2ZWwgPT0gVkFSQVJHU19DT01QQVRJQkxFKTsKKwkJ
CQkJTWV0aG9kQmluZGluZyBhY2NlcHRhYmxlID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2QobWV0
aG9kVG9UZXN0LCB0aWVicmVha01ldGhvZC5wYXJhbWV0ZXJzLAorCQkJCQkJCXRpZUJyZWFrSW52
b2NhdGlvblNpdGUsIElOVk9DQVRJT05fVFlQRSwgbGV2ZWwgPT0gVkFSQVJHU19DT01QQVRJQkxF
KTsKIAkJCQkJLyogVGhlcmUgYXJlIDQgY2hvaWNlcyB0byBjb25zaWRlciB3aXRoIGN1cnJlbnQg
JiBuZXh0IDoKIAkJCQkJIGZvbyhCKSAmIGZvbyhBKSB3aGVyZSBCIGV4dGVuZHMgQQogCQkJCQkg
MS4gdGhlIDIgbWV0aG9kcyBhcmUgZXF1YWwgKGJvdGggYWNjZXB0IGVhY2ggb3RoZXJzIHBhcmFt
ZXRlcnMpIC0+IHdhbnQgdG8gY29udGludWUKQEAgLTQyMDUsOCArNDI5OSwxMCBAQCBwdWJsaWMg
YWJzdHJhY3QgY2xhc3MgU2NvcGUgewogCQlpZiAoY291bnQgPT0gMSkgewogCQkJZm9yIChpbnQg
aSA9IDA7IGkgPCB2aXNpYmxlU2l6ZTsgaSsrKSB7CiAJCQkJaWYgKG1vcmVTcGVjaWZpY1tpXSAh
PSBudWxsKSB7Ci0JCQkJCWNvbXBpbGF0aW9uVW5pdFNjb3BlKCkucmVjb3JkVHlwZVJlZmVyZW5j
ZXModmlzaWJsZVtpXS50aHJvd25FeGNlcHRpb25zKTsKLQkJCQkJcmV0dXJuIHZpc2libGVbaV07
CisJCQkJCS8vIDEuODogR2l2ZSBpbmZlcmVuY2UgYSBjaGFuY2UgdG8gcGVyZm9ybSBvdXRzdGFu
ZGluZyB0YXNrcyAoMTguNS4yKToKKwkJCQkJTWV0aG9kQmluZGluZyBjYW5kaWRhdGUgPSBpbmZl
ckludm9jYXRpb25UeXBlKGludm9jYXRpb25TaXRlLCB2aXNpYmxlW2ldLCBhcmd1bWVudFR5cGVz
KTsKKwkJCQkJY29tcGlsYXRpb25Vbml0U2NvcGUoKS5yZWNvcmRUeXBlUmVmZXJlbmNlcyhjYW5k
aWRhdGUudGhyb3duRXhjZXB0aW9ucyk7CisJCQkJCXJldHVybiBjYW5kaWRhdGU7CiAJCQkJfQog
CQkJfQogCQl9IGVsc2UgaWYgKGNvdW50ID09IDApIHsKQEAgLTQzMjMsNyArNDQxOSw4IEBAIHB1
YmxpYyBhYnN0cmFjdCBjbGFzcyBTY29wZSB7CiAJCQkJaWYgKG1vc3RTcGVjaWZpY0V4Y2VwdGlv
bnMgIT0gbnVsbCAmJiBtb3N0U3BlY2lmaWNFeGNlcHRpb25zICE9IGN1cnJlbnQudGhyb3duRXhj
ZXB0aW9ucykgewogCQkJCQlyZXR1cm4gbmV3IE1vc3RTcGVjaWZpY0V4Y2VwdGlvbk1ldGhvZEJp
bmRpbmcoY3VycmVudCwgbW9zdFNwZWNpZmljRXhjZXB0aW9ucyk7CiAJCQkJfQotCQkJCXJldHVy
biBjdXJyZW50OworCQkJCS8vIDEuODogQmVmb3JlIHJldHVybmluZyBnaXZlIGluZmVyZW5jZSBh
IGNoYW5jZSB0byBwZXJmb3JtIG91dHN0YW5kaW5nIHRhc2tzICgxOC41LjIpOgorCQkJCXJldHVy
biBpbmZlckludm9jYXRpb25UeXBlKGludm9jYXRpb25TaXRlLCBjdXJyZW50LCBhcmd1bWVudFR5
cGVzKTsKIAkJCX0KIAkJfQogCkBAIC00NTU0LDcgKzQ2NTEsNyBAQCBwdWJsaWMgYWJzdHJhY3Qg
Y2xhc3MgU2NvcGUgewogCSAgIHRoYXQgY291bGQgaW5zdGVhZCBiZSBpbnZva2VkIHdpdGggaWRl
bnRpY2FsIHJlc3VsdHMuIFJldHVybiBudWxsIGlmIG5vIGNvbXBhdGlibGUsIHZpc2libGUsIG1v
c3Qgc3BlY2lmaWMgbWV0aG9kCiAJICAgY291bGQgYmUgZm91bmQuIFRoaXMgbWV0aG9kIGlzIG1v
ZGVsZWQgYWZ0ZXIgU2NvcGUuZ2V0Q29uc3RydWN0b3IgYW5kIFNjb3BlLmdldE1ldGhvZC4KIAkg
Ki8KLQlwdWJsaWMgTWV0aG9kQmluZGluZyBnZXRTdGF0aWNGYWN0b3J5IChSZWZlcmVuY2VCaW5k
aW5nIGFsbG9jYXRpb25UeXBlLCBSZWZlcmVuY2VCaW5kaW5nIG9yaWdpbmFsRW5jbG9zaW5nVHlw
ZSwgVHlwZUJpbmRpbmdbXSBhcmd1bWVudFR5cGVzLCBmaW5hbCBJbnZvY2F0aW9uU2l0ZSBhbGxv
Y2F0aW9uU2l0ZSkgeworCXB1YmxpYyBNZXRob2RCaW5kaW5nIGdldFN0YXRpY0ZhY3RvcnkgKFJl
ZmVyZW5jZUJpbmRpbmcgYWxsb2NhdGlvblR5cGUsIFJlZmVyZW5jZUJpbmRpbmcgb3JpZ2luYWxF
bmNsb3NpbmdUeXBlLCBUeXBlQmluZGluZ1tdIGFyZ3VtZW50VHlwZXMsIGZpbmFsIEludm9jYXRp
b24gYWxsb2NhdGlvblNpdGUpIHsKIAkJVHlwZVZhcmlhYmxlQmluZGluZ1tdIGNsYXNzVHlwZVZh
cmlhYmxlcyA9IGFsbG9jYXRpb25UeXBlLnR5cGVWYXJpYWJsZXMoKTsKIAkJaW50IGNsYXNzVHlw
ZVZhcmlhYmxlc0FyaXR5ID0gY2xhc3NUeXBlVmFyaWFibGVzLmxlbmd0aDsKIAkJTWV0aG9kQmlu
ZGluZ1tdIG1ldGhvZHMgPSBhbGxvY2F0aW9uVHlwZS5nZXRNZXRob2RzKFR5cGVDb25zdGFudHMu
SU5JVCwgYXJndW1lbnRUeXBlcy5sZW5ndGgpOwpAQCAtNDY3MCw3ICs0NzY3LDcgQEAgcHVibGlj
IGFic3RyYWN0IGNsYXNzIFNjb3BlIHsKIAkJTWV0aG9kQmluZGluZ1tdIGNvbXBhdGlibGUgPSBu
ZXcgTWV0aG9kQmluZGluZ1tzZmldOwogCQlpbnQgY29tcGF0aWJsZUluZGV4ID0gMDsKIAkJZm9y
IChpbnQgaSA9IDA7IGkgPCBzZmk7IGkrKykgewotCQkJTWV0aG9kQmluZGluZyBjb21wYXRpYmxl
TWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRob2Qoc3RhdGljRmFjdG9yaWVzW2ldLCBhcmd1
bWVudFR5cGVzLCBhbGxvY2F0aW9uU2l0ZSk7CisJCQlNZXRob2RCaW5kaW5nIGNvbXBhdGlibGVN
ZXRob2QgPSBjb21wdXRlQ29tcGF0aWJsZU1ldGhvZChzdGF0aWNGYWN0b3JpZXNbaV0sIGFyZ3Vt
ZW50VHlwZXMsIGFsbG9jYXRpb25TaXRlLCBBUFBMSUNBQklMSVRZKTsKIAkJCWlmIChjb21wYXRp
YmxlTWV0aG9kICE9IG51bGwpIHsKIAkJCQlpZiAoY29tcGF0aWJsZU1ldGhvZC5pc1ZhbGlkQmlu
ZGluZygpKQogCQkJCQljb21wYXRpYmxlW2NvbXBhdGlibGVJbmRleCsrXSA9IGNvbXBhdGlibGVN
ZXRob2Q7CkBAIC00NjkwLDYgKzQ3ODcsMTAgQEAgcHVibGljIGFic3RyYWN0IGNsYXNzIFNjb3Bl
IHsKIAkJaWYgKHZpc2libGVJbmRleCA9PSAwKSB7CiAJCQlyZXR1cm4gbnVsbDsKIAkJfQorCQlp
ZiAodmlzaWJsZUluZGV4ID09IDEpIHsKKwkJCS8vIDEuODogR2l2ZSBpbmZlcmVuY2UgYSBjaGFu
Y2UgdG8gcGVyZm9ybSBvdXRzdGFuZGluZyB0YXNrcyAoMTguNS4yKToKKwkJCXZpc2libGVbMF0g
PSBpbmZlckludm9jYXRpb25UeXBlKGFsbG9jYXRpb25TaXRlLCB2aXNpYmxlWzBdLCBhcmd1bWVu
dFR5cGVzKTsKKwkJfQogCQlyZXR1cm4gdmlzaWJsZUluZGV4ID09IDEgPyB2aXNpYmxlWzBdIDog
bW9zdFNwZWNpZmljTWV0aG9kQmluZGluZyh2aXNpYmxlLCB2aXNpYmxlSW5kZXgsIGFyZ3VtZW50
VHlwZXMsIGFsbG9jYXRpb25TaXRlLCBhbGxvY2F0aW9uVHlwZSk7CiAJfQogCkBAIC00NzYyLDQg
KzQ4NjMsMjMgQEAgcHVibGljIGFic3RyYWN0IGNsYXNzIFNjb3BlIHsKIAkJCX0KIAkJfQogCX0K
KworCS8qKgorCSAqIEdpdmVuIGEgc2VsZWN0ZWQgYXBwbGliYWJsZSBtZXRob2QsIGNoZWNrIGlm
IGl0IGhhcyBhbiB1bmZpbmlzaGVkIEluZmVyZW5jZUNvbnRleHQxOCBhc3NvY2lhdGVkLgorCSAq
IElmIHNvIHBlcmZvcm0gdGhlIG91dHN0YW5kaW5nIEludm9jYXRpb24gVHlwZSBJbmZlcmVuY2Ug
YW5kIHJldHVybiB0aGUgaW1wcm92ZWQgbWV0aG9kLAorCSAqIG90aGVyd2lzZSByZXR1cm4gdGhl
IGFwcGxpY2FibGUgbWV0aG9kIHVuY2hhbmdlZC4KKwkgKi8KKwlwcm90ZWN0ZWQgTWV0aG9kQmlu
ZGluZyBpbmZlckludm9jYXRpb25UeXBlKEludm9jYXRpb25TaXRlIGludm9jYXRpb25TaXRlLCBN
ZXRob2RCaW5kaW5nIGFwcGxpY2FibGUsIFR5cGVCaW5kaW5nW10gYXJndW1lbnRUeXBlcykgewor
CQlpZiAoYXBwbGljYWJsZSBpbnN0YW5jZW9mIFBhcmFtZXRlcml6ZWRHZW5lcmljTWV0aG9kQmlu
ZGluZyAmJiBpbnZvY2F0aW9uU2l0ZSBpbnN0YW5jZW9mIEludm9jYXRpb24pIHsKKwkJCUludm9j
YXRpb24gaW52b2NhdGlvbiA9IChJbnZvY2F0aW9uKSBpbnZvY2F0aW9uU2l0ZTsKKwkJCVBhcmFt
ZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZyBwYXJhbWV0ZXJpemVkTWV0aG9kID0gKFBhcmFt
ZXRlcml6ZWRHZW5lcmljTWV0aG9kQmluZGluZykgYXBwbGljYWJsZTsKKwkJCUluZmVyZW5jZUNv
bnRleHQxOCBpbmZDdHgxOCA9IGludm9jYXRpb24uZ2V0SW5mZXJlbmNlQ29udGV4dChwYXJhbWV0
ZXJpemVkTWV0aG9kKTsKKwkJCWlmIChpbmZDdHgxOCAhPSBudWxsICYmICFpbmZDdHgxOC5oYXNG
aW5pc2hlZCkgeworCQkJCU1ldGhvZEJpbmRpbmcgaW1wcm92ZWQgPSBpbmZDdHgxOC5pbmZlcklu
dm9jYXRpb25UeXBlKGludm9jYXRpb24sIGFyZ3VtZW50VHlwZXMsIHBhcmFtZXRlcml6ZWRNZXRo
b2QpOworCQkJCWlmIChpbXByb3ZlZC5pc1ZhbGlkQmluZGluZygpKQorCQkJCQlhcHBsaWNhYmxl
ID0gaW1wcm92ZWQ7CisJCQl9CisJCX0KKwkJcmV0dXJuIGFwcGxpY2FibGU7CisJfQogfQpkaWZm
IC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvZXZhbC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvZXZhbC9Db2RlU25pcHBldFNjb3BlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9ldmFs
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9ldmFsL0NvZGVTbmlwcGV0U2NvcGUuamF2YQppbmRl
eCBiYTA0ZTUwLi5kNTY3Nzc4IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9ldmFs
L29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9ldmFsL0NvZGVTbmlwcGV0U2NvcGUuamF2YQorKysg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9ldmFsL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9ldmFs
L0NvZGVTbmlwcGV0U2NvcGUuamF2YQpAQCAtMTMsNiArMTMsOCBAQAogICogICAgIElCTSBDb3Jw
b3JhdGlvbiAtIGluaXRpYWwgQVBJIGFuZCBpbXBsZW1lbnRhdGlvbgogICogICAgIEplc3BlciBT
IE1vbGxlciA8amVzcGVyQHNlbHNrYWJldC5vcmc+IC0gQ29udHJpYnV0aW9ucyBmb3IKICAqCQkJ
CQkJCQlidWcgMzc4Njc0IC0gIlRoZSBtZXRob2QgY2FuIGJlIGRlY2xhcmVkIGFzIHN0YXRpYyIg
aXMgd3JvbmcKKyAqICAgICBTdGVwaGFuIEhlcnJtYW5uIC0gQ29udHJpYnV0aW9uIGZvcgorICoJ
CQkJCQkJCUJ1ZyA0MjQxNjcgLSBbMS44XSBGdWxseSBpbnRlZ3JhdGUgdHlwZSBpbmZlcmVuY2Ug
d2l0aCBvdmVybG9hZCByZXNvbHV0aW9uICAgICAKICAqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwog
cGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuZXZhbDsKIApAQCAtMzk4LDcgKzQwMCw3
IEBAIHB1YmxpYyBNZXRob2RCaW5kaW5nIGZpbmRNZXRob2RGb3JBcnJheShBcnJheUJpbmRpbmcg
cmVjZWl2ZXJUeXBlLCBjaGFyW10gc2VsZWN0CiAJaWYgKG1ldGhvZEJpbmRpbmcgPT0gbnVsbCkK
IAkJcmV0dXJuIG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZyhzZWxlY3RvciwgYXJndW1lbnRUeXBl
cywgUHJvYmxlbVJlYXNvbnMuTm90Rm91bmQpOwogCWlmIChtZXRob2RCaW5kaW5nLmlzVmFsaWRC
aW5kaW5nKCkpIHsKLQkgICAgTWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0
ZUNvbXBhdGlibGVNZXRob2QobWV0aG9kQmluZGluZywgYXJndW1lbnRUeXBlcywgaW52b2NhdGlv
blNpdGUpOworCSAgICBNZXRob2RCaW5kaW5nIGNvbXBhdGlibGVNZXRob2QgPSBjb21wdXRlQ29t
cGF0aWJsZU1ldGhvZChtZXRob2RCaW5kaW5nLCBhcmd1bWVudFR5cGVzLCBpbnZvY2F0aW9uU2l0
ZSwgU2NvcGUuRlVMTF9JTkZFUkVOQ0UpOwogCSAgICBpZiAoY29tcGF0aWJsZU1ldGhvZCA9PSBu
dWxsKQogCQkJcmV0dXJuIG5ldyBQcm9ibGVtTWV0aG9kQmluZGluZyhtZXRob2RCaW5kaW5nLCBz
ZWxlY3RvciwgYXJndW1lbnRUeXBlcywgUHJvYmxlbVJlYXNvbnMuTm90Rm91bmQpOwogCSAgICBt
ZXRob2RCaW5kaW5nID0gY29tcGF0aWJsZU1ldGhvZDsKQEAgLTU0NCw3ICs1NDYsNyBAQCBwdWJs
aWMgTWV0aG9kQmluZGluZyBnZXRDb25zdHJ1Y3RvcihSZWZlcmVuY2VCaW5kaW5nIHJlY2VpdmVy
VHlwZSwgVHlwZUJpbmRpbmdbXQogCU1ldGhvZEJpbmRpbmdbXSBjb21wYXRpYmxlID0gbmV3IE1l
dGhvZEJpbmRpbmdbbWV0aG9kcy5sZW5ndGhdOwogCWludCBjb21wYXRpYmxlSW5kZXggPSAwOwog
CWZvciAoaW50IGkgPSAwLCBsZW5ndGggPSBtZXRob2RzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsr
KSB7Ci0JICAgIE1ldGhvZEJpbmRpbmcgY29tcGF0aWJsZU1ldGhvZCA9IGNvbXB1dGVDb21wYXRp
YmxlTWV0aG9kKG1ldGhvZHNbaV0sIGFyZ3VtZW50VHlwZXMsIGludm9jYXRpb25TaXRlKTsKKwkg
ICAgTWV0aG9kQmluZGluZyBjb21wYXRpYmxlTWV0aG9kID0gY29tcHV0ZUNvbXBhdGlibGVNZXRo
b2QobWV0aG9kc1tpXSwgYXJndW1lbnRUeXBlcywgaW52b2NhdGlvblNpdGUsIFNjb3BlLkFQUExJ
Q0FCSUxJVFkpOwogCQlpZiAoY29tcGF0aWJsZU1ldGhvZCAhPSBudWxsKQogCQkJY29tcGF0aWJs
ZVtjb21wYXRpYmxlSW5kZXgrK10gPSBjb21wYXRpYmxlTWV0aG9kOwogCX0KQEAgLTU2MCw3ICs1
NjIsOCBAQCBwdWJsaWMgTWV0aG9kQmluZGluZyBnZXRDb25zdHJ1Y3RvcihSZWZlcmVuY2VCaW5k
aW5nIHJlY2VpdmVyVHlwZSwgVHlwZUJpbmRpbmdbXQogCQl9CiAJfQogCWlmICh2aXNpYmxlSW5k
ZXggPT0gMSkgewotCQlyZXR1cm4gdmlzaWJsZVswXTsKKwkJLy8gMS44OiBHaXZlIGluZmVyZW5j
ZSBhIGNoYW5jZSB0byBwZXJmb3JtIG91dHN0YW5kaW5nIHRhc2tzICgxOC41LjIpOgorCQlyZXR1
cm4gaW5mZXJJbnZvY2F0aW9uVHlwZShpbnZvY2F0aW9uU2l0ZSwgdmlzaWJsZVswXSwgYXJndW1l
bnRUeXBlcyk7CiAJfQogCWlmICh2aXNpYmxlSW5kZXggPT0gMCkgewogCQlyZXR1cm4gbmV3IFBy
b2JsZW1NZXRob2RCaW5kaW5nKGNvbXBhdGlibGVbMF0sIFR5cGVDb25zdGFudHMuSU5JVCwgY29t
cGF0aWJsZVswXS5wYXJhbWV0ZXJzLCBQcm9ibGVtUmVhc29ucy5Ob3RWaXNpYmxlKTsK
</data>

          </attachment>
      

    </bug>

</bugzilla>