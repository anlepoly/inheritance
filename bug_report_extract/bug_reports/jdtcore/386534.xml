<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>386534</bug_id>
          
          <creation_ts>2012-08-03 02:27:00 -0400</creation_ts>
          <short_desc>[compiler][resource] &quot;Potential resource leak&quot; false positive warning</short_desc>
          <delta_ts>2012-09-18 02:05:51 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.2</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.3 M2</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Ted Hopp">ted.hopp</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2144589</commentid>
    <comment_count>0</comment_count>
    <who name="Ted Hopp">ted.hopp</who>
    <bug_when>2012-08-03 02:27:01 -0400</bug_when>
    <thetext>The following code generates a warning at the first line of the try block:

static void saveDetails(byte[] detailsData) {
    OutputStream os = null;
    try {
        os = sContext.openFileOutput(DETAILS_FILE_NAME, Context.MODE_PRIVATE);
        os.write(detailsData);
    } catch (IOException e) {
        Log.w(LOG_TAG, &quot;Unable to save details&quot;, e);
    } finally {
        if (os != null) {
            try {
                os.close();
            } catch (IOException ignored) {
            }
        }
    }
}

The method openFileOutput is declared to throw FileNotFoundException. Oddly, similar code in other files does not generate the warning.

The exact wording is: Potential resource leak: &apos;os&apos; may not be closed</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2144673</commentid>
    <comment_count>1</comment_count>
      <attachid>219521</attachid>
    <who name="Tomasz Zarna">tomasz.zarna</who>
    <bug_when>2012-08-03 07:07:57 -0400</bug_when>
    <thetext>Created attachment 219521
Snippet

Having the attached snippet in workspace I see no warnings with default settings. Tod, could you check if I haven&apos;t twisted your example. Could you also try opening the same piece of code in a fresh workspace (to make sure you&apos;re running with default prefs).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2144753</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-08-03 10:42:44 -0400</bug_when>
    <thetext>(In reply to comment #1)
&gt; Having the attached snippet in workspace I see no warnings with default
&gt; settings. Tod, could you check if I haven&apos;t twisted your example. Could you
&gt; also try opening the same piece of code in a fresh workspace (to make sure
&gt; you&apos;re running with default prefs).

Potential resource leaks are ignored by default. That should explain this difference, right?

From looking at the code I&apos;d say this is a duplicate of bug 385415. See there for background and workaround.

I will re-open if that guess is wrong.

*** This bug has been marked as a duplicate of bug 385415 ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2144775</commentid>
    <comment_count>3</comment_count>
    <who name="Ted Hopp">ted.hopp</who>
    <bug_when>2012-08-03 11:00:12 -0400</bug_when>
    <thetext>&gt; Potential resource leaks are ignored by default. That should explain this
&gt; difference, right?

Correct. I turned on most warnings, so this would not show up in a fresh workspace with default settings.

&gt; From looking at the code I&apos;d say this is a duplicate of bug 385415. See
&gt; there for background and workaround.

At first I didn&apos;t think it was a duplicate, because bug 385415 does not involve a finally clause, either in the bug or the proposed workarounds. However, it turns out that the warning goes away if I eliminate the try/catch surrounding the call to os.close(), which is kind of what I get out of bug 385415 after reading it over a couple of times. If that&apos;s how 385415 is understood, then yes, this is a duplicate.

Would it be of value to add this case as a comment to that bug? It seems to be a slightly different code pattern than anything there. Or is having it here enough?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2144838</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-08-03 13:12:33 -0400</bug_when>
    <thetext>(In reply to comment #3)
&gt; Would it be of value to add this case as a comment to that bug? It seems to
&gt; be a slightly different code pattern than anything there. Or is having it
&gt; here enough?

Adding this example as a test is a good idea, but having it in this bug is good enough. Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2152425</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-08-25 17:22:54 -0400</bug_when>
    <thetext>Bad news: work on bug 385415 shows that this is *not* a duplicate.

This bug can be described as a result of out-of-order analysis:
- the analysis first sees &quot;os.close()&quot; and assigns a resource tracker to os (using this tracker the resource is marked as closed)
- later it sees &quot;os = sContext.openFileOutput(..)&quot; handling this as re-assigning a new resource to the same variable, creating a new tracker which is marked open.
I.e., analysis &quot;believes&quot; we have two resources, of which only one is closed

This is due to the internal ordering inside TryStatement.analyseCode(..), which is an intricate issue (designed long before I joined the team).

As a result this bug must be investigated anew.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2160425</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-09-15 18:55:54 -0400</bug_when>
    <thetext>Test &amp; fix have been released for 4.3 M2 via commit 0579ec46f093e76ebfb96f54aeedde906bdc6daa.

In bug 388996 I fixed the general problem of out-of-order analysis as described in comment 5.
For this bug I only had to improve the detection of that pattern: the analysis location can be (deeply) nested within a finally block -&gt; iterate parents until null or FinallyFlowContext.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2161063</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-09-18 02:05:51 -0400</bug_when>
    <thetext>Verified for 4.3 M2 using Build id: I20120917-0800</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>219521</attachid>
            <date>2012-08-03 07:07:00 -0400</date>
            <delta_ts>2012-08-03 07:07:57 -0400</delta_ts>
            <desc>Snippet</desc>
            <filename>Bug.java</filename>
            <type>text/plain</type>
            <size>975</size>
            <attacher name="Tomasz Zarna">tomasz.zarna</attacher>
            
              <data encoding="base64">aW1wb3J0IGphdmEuaW8uRmlsZU5vdEZvdW5kRXhjZXB0aW9uOw0KaW1wb3J0IGphdmEuaW8uSU9F
eGNlcHRpb247DQppbXBvcnQgamF2YS5pby5PdXRwdXRTdHJlYW07DQoNCnB1YmxpYyBjbGFzcyBC
dWcgew0KCXByaXZhdGUgc3RhdGljIGZpbmFsIFN0cmluZyBERVRBSUxTX0ZJTEVfTkFNRSA9IG51
bGw7DQoJcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIExPR19UQUcgPSBudWxsOw0KCXByaXZh
dGUgc3RhdGljIENvbnRleHQgc0NvbnRleHQ7DQoJc3RhdGljIHZvaWQgc2F2ZURldGFpbHMoYnl0
ZVtdIGRldGFpbHNEYXRhKSB7DQoJCU91dHB1dFN0cmVhbSBvcyA9IG51bGw7DQoJCXRyeSB7DQoJ
CQlvcyA9IHNDb250ZXh0Lm9wZW5GaWxlT3V0cHV0KERFVEFJTFNfRklMRV9OQU1FLA0KCQkJCQlD
b250ZXh0Lk1PREVfUFJJVkFURSk7DQoJCQlvcy53cml0ZShkZXRhaWxzRGF0YSk7DQoJCX0gY2F0
Y2ggKElPRXhjZXB0aW9uIGUpIHsNCgkJCUxvZy53KExPR19UQUcsICJVbmFibGUgdG8gc2F2ZSBk
ZXRhaWxzIiwgZSk7DQoJCX0gZmluYWxseSB7DQoJCQlpZiAob3MgIT0gbnVsbCkgew0KCQkJCXRy
eSB7DQoJCQkJCW9zLmNsb3NlKCk7DQoJCQkJfSBjYXRjaCAoSU9FeGNlcHRpb24gaWdub3JlZCkg
ew0KCQkJCX0NCgkJCX0NCgkJfQ0KCX0NCglzdGF0aWMgY2xhc3MgQ29udGV4dCB7DQoJCXB1Ymxp
YyBzdGF0aWMgZmluYWwgU3RyaW5nIE1PREVfUFJJVkFURSA9IG51bGw7DQoJCXB1YmxpYyBPdXRw
dXRTdHJlYW0gb3BlbkZpbGVPdXRwdXQoU3RyaW5nIGRldGFpbHNGaWxlTmFtZSwNCgkJCQlTdHJp
bmcgbW9kZVByaXZhdGUpIHRocm93cyBGaWxlTm90Rm91bmRFeGNlcHRpb257DQoJCQlyZXR1cm4g
bnVsbDsNCgkJfQ0KCX0NCglzdGF0aWMgY2xhc3MgTG9nIHsNCgkJcHVibGljIHN0YXRpYyB2b2lk
IHcoU3RyaW5nIGxvZ1RhZywgU3RyaW5nIHN0cmluZywgSU9FeGNlcHRpb24gZSkgew0KCQl9DQoJ
fQ0KfQ0K
</data>

          </attachment>
      

    </bug>

</bugzilla>