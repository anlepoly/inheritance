<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>417758</bug_id>
          
          <creation_ts>2013-09-21 13:28:00 -0400</creation_ts>
          <short_desc>[1.8][null] Null safety compromise during array creation.</short_desc>
          <delta_ts>2013-10-14 20:56:19 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>392099</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>shankhba</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2309518</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-09-21 13:28:43 -0400</bug_when>
    <thetext>BETA_JAVA8:

// --

import org.eclipse.jdt.annotation.NonNull;

public class X&lt;T&gt; {
   
	public static void main(String[] args) {
		@NonNull String @NonNull [] s = new @NonNull String [] { null };
		if (s != null &amp;&amp; s[0] != null) {
			System.out.println(&quot;Not null&quot;);
		}
		System.out.println(&quot;Length = &quot; + s[0].length());
	}
}

// ---

Program generates an NPE. The warnings about redundant null check from previous 
lines give false assurance, since we don&apos;t warn at the array creation site,
where a null sneaks in.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2309602</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-09-22 13:58:40 -0400</bug_when>
    <thetext>Yea, arrays are a pain, because we don&apos;t have a constructor that can enforce non-null elements.
The inline array initializer must be checked, that&apos;s for sure.

Much more typical, however, will be situations where an array is created with a weaker type and only later casted to a type with non-null elements. We might consider providing a library function to perform this cast in a checked manner:

  &lt;T&gt; @NonNull T[] toNonNullElements(T[] in) throws NullPointerException {...}

Would it make sense to place such a function into the annotations bundle
or should that bundle remain strictly annotations-only?

Another option would be to consider
  @LazyNonNull C[]
as the typical/recommended declaration for arrays that are filled dynamically.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2309621</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-09-22 18:34:06 -0400</bug_when>
    <thetext>Tests &amp; fix released as http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=cbe22d350fa314e6e5df169cf670cab9bb8c2a20

The change looks bigger than it is: I simply pulled up a snippet from ReturnStatement into Statement, where it can be called from ArrayInitializer (which so far had no null checking at all).

The change in ArrayAllocationExpression ensures that type annotations are resolved before the expected type is passed into the ArrayInitializer.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2318053</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2013-10-14 20:56:19 -0400</bug_when>
    <thetext>*** Bug 417757 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>