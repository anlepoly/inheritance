<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>388042</bug_id>
          
          <creation_ts>2012-08-24 21:55:00 -0400</creation_ts>
          <short_desc>Add unimplemented methods fails with exception (with unresolved annotation)</short_desc>
          <delta_ts>2013-06-06 10:27:53 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.2</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.3 M5</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Henrik Lindberg">henrik.lindberg</reporter>
          <assigned_to name="Markus Keller">markus_keller</assigned_to>
          <cc>cps</cc>
    
    <cc>daniel_megert</cc>
    
    <cc>jarthana</cc>
    
    <cc>markus_keller</cc>
    
    <cc>robin</cc>
    
    <cc>ruediger.herrmann</cc>
    
    <cc>snekse+bugs.eclipse</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2152359</commentid>
    <comment_count>0</comment_count>
    <who name="Henrik Lindberg">henrik.lindberg</who>
    <bug_when>2012-08-24 21:55:37 -0400</bug_when>
    <thetext>The following exception:

org.eclipse.jdt.internal.compiler.problem.AbortCompilation: Pb(324) The type javax.annotation.Nullable cannot be resolved. It is indirectly referenced from required .class files
	at org.eclipse.jdt.internal.compiler.problem.ProblemHandler.handle(ProblemHandler.java:135)
	at org.eclipse.jdt.internal.compiler.problem.ProblemHandler.handle(ProblemHandler.java:201)
	at org.eclipse.jdt.internal.compiler.problem.ProblemReporter.handle(ProblemReporter.java:2132)
	at org.eclipse.jdt.internal.compiler.problem.ProblemReporter.isClassPathCorrect(ProblemReporter.java:4162)
	at org.eclipse.jdt.internal.compiler.lookup.UnresolvedReferenceBinding.resolve(UnresolvedReferenceBinding.java:59)
	at org.eclipse.jdt.internal.compiler.lookup.BinaryTypeBinding.resolveType(BinaryTypeBinding.java:131)
	at org.eclipse.jdt.internal.compiler.lookup.UnresolvedAnnotationBinding.getAnnotationType(UnresolvedAnnotationBinding.java:24)
	at org.eclipse.jdt.core.dom.DefaultBindingResolver.getAnnotationInstance(DefaultBindingResolver.java:504)
	at org.eclipse.jdt.core.dom.MethodBinding.getParameterAnnotations(MethodBinding.java:153)
	at org.eclipse.jdt.internal.corext.codemanipulation.StubUtility2.createParameters(StubUtility2.java:504)
	at org.eclipse.jdt.internal.corext.codemanipulation.StubUtility2.createImplementationStub(StubUtility2.java:416)
	at org.eclipse.jdt.internal.corext.fix.AddUnimplementedMethodsOperation.rewriteAST(AddUnimplementedMethodsOperation.java:107)
	at org.eclipse.jdt.internal.corext.fix.CompilationUnitRewriteOperationsFix.createChange(CompilationUnitRewriteOperationsFix.java:101)
	at org.eclipse.jdt.internal.ui.text.correction.proposals.FixCorrectionProposal.createTextChange(FixCorrectionProposal.java:159)
	at org.eclipse.jdt.ui.text.java.correction.CUCorrectionProposal.createChange(CUCorrectionProposal.java:244)
	at org.eclipse.jdt.ui.text.java.correction.ChangeCorrectionProposal.getChange(ChangeCorrectionProposal.java:372)
	at org.eclipse.jdt.ui.text.java.correction.ChangeCorrectionProposal.performChange(ChangeCorrectionProposal.java:136)
	at org.eclipse.jdt.internal.ui.text.correction.proposals.LinkedCorrectionProposal.performChange(LinkedCorrectionProposal.java:150)
	at org.eclipse.jdt.ui.text.java.correction.CUCorrectionProposal.apply(CUCorrectionProposal.java:184)
	at org.eclipse.jdt.internal.ui.text.correction.proposals.FixCorrectionProposal.apply(FixCorrectionProposal.java:191)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.insertProposal(CompletionProposalPopup.java:940)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.insertSelectedProposalWithMask(CompletionProposalPopup.java:891)
	at org.eclipse.jface.text.contentassist.CompletionProposalPopup.verifyKey(CompletionProposalPopup.java:1323)
	at org.eclipse.jface.text.contentassist.ContentAssistant$InternalListener.verifyKey(ContentAssistant.java:808)
	at org.eclipse.jface.text.TextViewer$VerifyKeyListenersManager.verifyKey(TextViewer.java:491)
	at org.eclipse.swt.custom.StyledTextListener.handleEvent(StyledTextListener.java:65)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4134)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1458)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1481)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1466)
	at org.eclipse.swt.widgets.Widget.notifyListeners(Widget.java:1271)
	at org.eclipse.swt.custom.StyledText.handleKeyDown(StyledText.java:5932)
	at org.eclipse.swt.custom.StyledText$7.handleEvent(StyledText.java:5629)
	at org.eclipse.swt.widgets.EventTable.sendEvent(EventTable.java:84)
	at org.eclipse.swt.widgets.Display.sendEvent(Display.java:4134)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1458)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1481)
	at org.eclipse.swt.widgets.Widget.sendEvent(Widget.java:1466)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1495)
	at org.eclipse.swt.widgets.Widget.sendKeyEvent(Widget.java:1491)
	at org.eclipse.swt.widgets.Canvas.sendKeyEvent(Canvas.java:493)
	at org.eclipse.swt.widgets.Control.doCommandBySelector(Control.java:1060)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5585)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSend(Native Method)
	at org.eclipse.swt.internal.cocoa.NSResponder.interpretKeyEvents(NSResponder.java:68)
	at org.eclipse.swt.widgets.Composite.keyDown(Composite.java:587)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5495)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSendSuper(Native Method)
	at org.eclipse.swt.widgets.Widget.callSuper(Widget.java:221)
	at org.eclipse.swt.widgets.Widget.windowSendEvent(Widget.java:2102)
	at org.eclipse.swt.widgets.Shell.windowSendEvent(Shell.java:2284)
	at org.eclipse.swt.widgets.Display.windowProc(Display.java:5557)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSendSuper(Native Method)
	at org.eclipse.swt.widgets.Display.applicationSendEvent(Display.java:5002)
	at org.eclipse.swt.widgets.Display.applicationProc(Display.java:5151)
	at org.eclipse.swt.internal.cocoa.OS.objc_msgSend(Native Method)
	at org.eclipse.swt.internal.cocoa.NSApplication.sendEvent(NSApplication.java:128)
	at org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3616)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$9.run(PartRenderingEngine.java:1022)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:916)
	at org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:86)
	at org.eclipse.ui.internal.Workbench$5.run(Workbench.java:585)
	at org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:332)
	at org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:540)
	at org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:149)
	at org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:124)
	at org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:196)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:110)
	at org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:79)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:353)
	at org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:180)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)
	at java.lang.reflect.Method.invoke(Method.java:597)
	at org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:629)
	at org.eclipse.equinox.launcher.Main.basicRun(Main.java:584)
	at org.eclipse.equinox.launcher.Main.run(Main.java:1438)

eclipse.buildId=I20120608-1400
java.version=1.6.0_31
java.vendor=Apple Inc.
BootLoader constants: OS=macosx, ARCH=x86_64, WS=cocoa, NL=en_US
Framework arguments:  -keyring /Users/henrik/.eclipse_keyring -showlocation
Command-line arguments:  -os macosx -ws cocoa -arch x86_64 

Is the result of using &quot;Add unimplmented methods&quot; on a new com.google.common.base.Function&lt;MyThing, Integer&gt;() {} - from guava 10.0.1

Running on OSx Lion Java 1.6
The exact system configuration (java, project, repository, etc. but using Helios, works as expected).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2152535</commentid>
    <comment_count>1</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2012-08-27 03:59:54 -0400</bug_when>
    <thetext>(In reply to comment #0)
&gt; The following exception:
&gt; 
&gt; org.eclipse.jdt.internal.compiler.problem.AbortCompilation: Pb(324) The type
&gt; javax.annotation.Nullable cannot be resolved. It is indirectly referenced
&gt; from required .class files
...
&gt; Running on OSx Lion Java 1.6
&gt; The exact system configuration (java, project, repository, etc. but using
&gt; Helios, works as expected).

Maybe related to our null-annotation work?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2152949</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-08-27 19:27:54 -0400</bug_when>
    <thetext>(In reply to comment #1)
&gt; Maybe related to our null-annotation work?

In a way, probably.

(In reply to comment #0)
&gt; [...]
&gt; 	at
&gt; org.eclipse.jdt.internal.corext.codemanipulation.StubUtility2.
&gt; createParameters(StubUtility2.java:504)

This code block was introduced for bug 353472.

@Markus, do you have an idea?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2176040</commentid>
    <comment_count>3</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2012-10-25 14:48:23 -0400</bug_when>
    <thetext>(In reply to comment #0)
&gt; Is the result of using &quot;Add unimplmented methods&quot; on a new
&gt; com.google.common.base.Function&lt;MyThing, Integer&gt;() {} - from guava 10.0.1

According to http://google-collections.googlecode.com/svn/trunk/javadoc/com/google/common/base/Function.html , these methods refer to javax.annotation.Nullable, which is probably not available on the project&apos;s classpath.

Nevertheless, that should not abort compilation. Looks like you should set LookupEnvironment#mayTolerateMissingType somewhere around UnresolvedAnnotationBinding.getAnnotationType(..) in the given stack. I&apos;d say unresolvable annotations are OK in binary types and can just be skipped. The VM also accepts Class files even if they contain unresolved annotations.


&gt; The exact system configuration (java, project, repository, etc. but using
&gt; Helios, works as expected).

That&apos;s because the call to MethodBinding#getParameterAnnotations() in StubUtility2#createParameters() has only been added in Helios (bug 353472). Before, probably nobody ever asked for this annotation, so it could stay as UnresolvedAnnotationBinding.

Henrik: A workaround could be to make sure an @interface javax.annotation.Nullable is on the build path of the affected project.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2196965</commentid>
    <comment_count>4</comment_count>
    <who name="Robin Stocker">robin</who>
    <bug_when>2012-12-21 08:31:50 -0500</bug_when>
    <thetext>The same error happens when completing after &quot;return new Function&quot;, with a different stack trace leading up to it:

	...
	at org.eclipse.jdt.core.dom.MethodBinding.getAnnotations(MethodBinding.java:109)
	at org.eclipse.jdt.internal.corext.codemanipulation.StubUtility2.getImplementationModifiers(StubUtility2.java:634)
	at org.eclipse.jdt.internal.corext.codemanipulation.StubUtility2.createImplementationStub(StubUtility2.java:386)
	...

The result is that the long boilerplate of an anonymous inner class including the method has to be typed by hand.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2197888</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-12-31 12:53:35 -0500</bug_when>
    <thetext>(In reply to comment #4)
&gt; The same error happens when completing after &quot;return new Function&quot;, with a
&gt; different stack trace leading up to it:
&gt; 
&gt; 	...
&gt; 	at
&gt; org.eclipse.jdt.core.dom.MethodBinding.getAnnotations(MethodBinding.java:109)
&gt; 	at
&gt; org.eclipse.jdt.internal.corext.codemanipulation.StubUtility2.
&gt; getImplementationModifiers(StubUtility2.java:634)
&gt; 	at
&gt; org.eclipse.jdt.internal.corext.codemanipulation.StubUtility2.
&gt; createImplementationStub(StubUtility2.java:386)
&gt; 	...
&gt; 
&gt; The result is that the long boilerplate of an anonymous inner class
&gt; including the method has to be typed by hand.

Could you please check whether you have all required annotations on your classpath?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2198354</commentid>
    <comment_count>6</comment_count>
    <who name="Robin Stocker">robin</who>
    <bug_when>2013-01-03 08:50:48 -0500</bug_when>
    <thetext>(In reply to comment #5)
&gt; Could you please check whether you have all required annotations on your
&gt; classpath?

They are not on the classpath, no. But according to comment 3, that should not result in an error.

Either the code should be generated without the annotations (the way it worked before), or it should add them and give the user the possibility of removing them from the generated code or extending the classpath (&quot;Foo cannot be resolved to a type&quot;).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2198520</commentid>
    <comment_count>7</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-01-03 13:07:09 -0500</bug_when>
    <thetext>The bug is that the call to MethodBinding#getParameterAnnotations(int) must not throw an AbortCompilation exception. It needs treatment similar to bug 360164.

Fixed with http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=01507ee98d5beecae71082dd137e782bb5a3bef0

Stephan, please speak up if you disagree.


(In reply to comment #4)
&gt; The result is that the long boilerplate of an anonymous inner class
&gt; including the method has to be typed by hand.

If you type this:

	new Function&lt;String, Integer&gt;() {
	};

..., then you can at least use the &quot;Add unimplemented methods&quot; Quick Fix to generated the method.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2200703</commentid>
    <comment_count>8</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-01-09 10:35:35 -0500</bug_when>
    <thetext>*** Bug 397752 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2207323</commentid>
    <comment_count>9</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2013-01-24 15:22:05 -0500</bug_when>
    <thetext>(In reply to comment #7)
&gt; The bug is that the call to MethodBinding#getParameterAnnotations(int) must
&gt; not throw an AbortCompilation exception. It needs treatment similar to bug
&gt; 360164.
&gt; 
&gt; Fixed with
&gt; http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
&gt; ?id=01507ee98d5beecae71082dd137e782bb5a3bef0
&gt; 
&gt; Stephan, please speak up if you disagree.

I made some attempts at breaking your fix, but failed.

My hypothesis was: I could find a situation where an indirectly referenced annotation type would be relevant for compilation.

While it might be possible to support this hypothesis by compiling against a JRE where s.t. like java.lang.annotation.Retention is missing, I did not try such contrived examples.

If a binary class on the classpath depends on an annotation that&apos;s not on the classpath it&apos;s not the compiler&apos;s business to worry about that annotation (as mentioned in comment 3). The annotation cannot influence the compiler-relevant semantics of that class.

Also a binary annotation type on the classpath could depend on another annotation that&apos;s not on the classpath, e.g. (Annotation1 be missing):

@Target(ElementType.TYPE)
public @interface Annotation2 {
	Annotation1 value();
}

Interestingly, in this case resolving Annotation1 is attempted via UnresolvedReferenceBinding not UnresolvedAnnotationBinding.

At this point I gave up breaking the fix :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2207605</commentid>
    <comment_count>10</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-01-25 06:39:48 -0500</bug_when>
    <thetext>(In reply to comment #9)
Thanks for the extensive review, Stephan.

Verified in I20130122-0800.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2269269</commentid>
    <comment_count>11</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2013-06-06 10:27:53 -0400</bug_when>
    <thetext>*** Bug 410076 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>