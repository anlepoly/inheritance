<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>447119</bug_id>
          
          <creation_ts>2014-10-14 10:40:00 -0400</creation_ts>
          <short_desc>[1.8][compiler] method references lost generic type information (4.4 -&gt; 4.4.1 regression)</short_desc>
          <delta_ts>2015-02-19 18:45:53 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>4.4.2</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Marco Trudel">marco</reporter>
          <assigned_to name="Sasikanth Bharadwaj">saammana</assigned_to>
          <cc>jarthana</cc>
    
    <cc>manpalat</cc>
    
    <cc>rhuddusa</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="63636"
          type_id="1"
          status="+"
          setter="srikanth_sankaran"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2464758</commentid>
    <comment_count>0</comment_count>
      <attachid>247862</attachid>
    <who name="Marco Trudel">marco</who>
    <bug_when>2014-10-14 10:40:55 -0400</bug_when>
    <thetext>Created attachment 247862
test class that shows the regression

In 4.4.1, generic type information is lost for lambdas. The attached test class shows the problem. The output is:

Eclipse 4.4.1
-------------
Lambda binds to: Testbed.lambda$0
Methods (with generics):
- java.util.List&lt;java.lang.String&gt; noop(java.util.List&lt;java.lang.String&gt;)
- interface java.util.List lambda$0(interface java.util.List)

Eclipse 4.4.0
-------------
Lambda binds to: Testbed.lambda$0
Methods (with generics):
- java.util.List&lt;java.lang.String&gt; noop(java.util.List&lt;java.lang.String&gt;)
- java.util.List&lt;java.lang.String&gt; lambda$0(java.util.List&lt;java.lang.String&gt;)

jdk 1.8.0_11
------------
Lambda binds to: Testbed.noop
Methods (with generics):
- java.util.List&lt;java.lang.String&gt; noop(java.util.List&lt;java.lang.String&gt;)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2464770</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-14 10:51:01 -0400</bug_when>
    <thetext>Sasi, please take a look. I may have recommended a tad over-aggressive pruning
in https://bugs.eclipse.org/bugs/show_bug.cgi?id=436542</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2464792</commentid>
    <comment_count>2</comment_count>
    <who name="Marco Trudel">marco</who>
    <bug_when>2014-10-14 11:08:21 -0400</bug_when>
    <thetext>If anyone else has to downgrade from 4.4.1 to 4.4.0 and finds auto completion not working anymore, you can fix it via:
Window -&gt; Preferences -&gt; Java -&gt; Editor -&gt; Content Assist -&gt; Advanced -&gt; Restore Defaults</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2464796</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-14 11:12:48 -0400</bug_when>
    <thetext>(In reply to Marco Trudel from comment #2)
&gt; If anyone else has to downgrade from 4.4.1 to 4.4.0 and finds auto
&gt; completion not working anymore, you can fix it via:
&gt; Window -&gt; Preferences -&gt; Java -&gt; Editor -&gt; Content Assist -&gt; Advanced -&gt;
&gt; Restore Defaults


Could you elaborate on this ? What breaks ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2464807</commentid>
    <comment_count>4</comment_count>
    <who name="Marco Trudel">marco</who>
    <bug_when>2014-10-14 11:18:19 -0400</bug_when>
    <thetext>4.4.1 has a fancy new content assist thingy. If you enable it on a workspace in 4.4.1 and then open the same workspace in 4.4.0, CTRL-SPACE will not assist anymore. There&apos;s a message saying &quot;No content assist available&quot; or similar.

It&apos;s independent from the bug I reported here, just a problem if you downgrade from 4.4.1 to 4.4.0. It took me a bit to figure out what was going on so I thought I add a comment, maybe helping someone someday...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2466246</commentid>
    <comment_count>5</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-10-16 05:12:34 -0400</bug_when>
    <thetext>(In reply to comment #1)
&gt; Sasi, please take a look. I may have recommended a tad over-aggressive pruning
&gt; in https://bugs.eclipse.org/bugs/show_bug.cgi?id=436542
There&apos;s nothing lost. It&apos;s the implicit lambda that we generate for the method reference that has caused this confusion.
Using a lambda expression instead of method reference, we can see that javac gives the same result as eclipse.

import java.io.ObjectStreamClass;
import java.io.Serializable;
import java.lang.invoke.SerializedLambda;
import java.lang.reflect.Method;
import java.util.List;
import java.util.function.Function;

public class Testbed
{
	private static interface SerializableFunction&lt;A, R&gt; extends Function&lt;A, R&gt;, Serializable { }
	private static List&lt;String&gt; noop(List&lt;String&gt; l) { return l; }

	public static void main(String[] args) throws Exception
	{
		//SerializableFunction&lt;List&lt;String&gt;, List&lt;String&gt;&gt; f = Testbed::noop;
		SerializableFunction&lt;List&lt;String&gt;, List&lt;String&gt;&gt; f = l -&gt; {
			return l;
		};
		Method invokeWriteReplaceMethod = ObjectStreamClass.class.getDeclaredMethod(&quot;invokeWriteReplace&quot;, Object.class);
		invokeWriteReplaceMethod.setAccessible(true);
		SerializedLambda l = (SerializedLambda)invokeWriteReplaceMethod.invoke(ObjectStreamClass.lookupAny(f.getClass()), f);
		System.out.println(&quot;Lambda binds to: &quot; + l.getImplClass() + &quot;.&quot; + l.getImplMethodName());

		System.out.println(&quot;Methods (with generics):&quot;);
		for(Method m : Testbed.class.getDeclaredMethods())
		{
			if(m.getName().equals(&quot;main&quot;)) continue;
			if(m.getName().contains(&quot;deserializeLambda&quot;)) continue;
			System.out.println(&quot;- &quot; + m.getGenericReturnType() + &quot; &quot; + m.getName() + &quot;(&quot; + m.getGenericParameterTypes()[0] + &quot;)&quot;);
		}
	}
}
Running the above code produces 

Lambda binds to: Testbed.lambda$0
Methods (with generics):
- java.util.List&lt;java.lang.String&gt; noop(java.util.List&lt;java.lang.String&gt;)
- interface java.util.List lambda$0(interface java.util.List)

when compiled by eclipse and

Lambda binds to: Testbed.lambda$main$7796d039$1
Methods (with generics):
- java.util.List&lt;java.lang.String&gt; noop(java.util.List&lt;java.lang.String&gt;)
- interface java.util.List lambda$main$7796d039$1(interface java.util.List)
when compiled by javac</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2466340</commentid>
    <comment_count>6</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-16 06:49:22 -0400</bug_when>
    <thetext>So what is the recommendation ?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2466342</commentid>
    <comment_count>7</comment_count>
    <who name="Marco Trudel">marco</who>
    <bug_when>2014-10-16 06:53:00 -0400</bug_when>
    <thetext>What about not creating an implicit lambda for method references (as javac does)?
This would probably lead to smaller class files and less execution overhead (I&apos;m guessing/assuming).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2466358</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-16 07:27:52 -0400</bug_when>
    <thetext>(In reply to Marco Trudel from comment #7)
&gt; What about not creating an implicit lambda for method references (as javac
&gt; does)?
&gt; This would probably lead to smaller class files and less execution overhead
&gt; (I&apos;m guessing/assuming).

See https://bugs.eclipse.org/bugs/show_bug.cgi?id=430157</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2466371</commentid>
    <comment_count>9</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-10-16 07:57:48 -0400</bug_when>
    <thetext>(In reply to comment #6)
&gt; So what is the recommendation ?
Resolving as invalid since there is no problem here</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2466374</commentid>
    <comment_count>10</comment_count>
    <who name="Marco Trudel">marco</who>
    <bug_when>2014-10-16 08:03:03 -0400</bug_when>
    <thetext>(In reply to Sasikanth Bharadwaj from comment #9)
&gt; (In reply to comment #6)
&gt; &gt; So what is the recommendation ?
&gt; Resolving as invalid since there is no problem here

I strongly disagree. The generic information is lost for method references.
This worked in Eclipse &lt;= 4.4.0 and works in javac. This is clearly an Eclipse regression and incompatibility with javac.

The behavior of implicit lambdas is independent from the problem at hand.

Boldly reopened.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2466396</commentid>
    <comment_count>11</comment_count>
    <who name="Marco Trudel">marco</who>
    <bug_when>2014-10-16 08:19:58 -0400</bug_when>
    <thetext>Just to be sure it&apos;s clear that there is a problem here, consider:


import java.io.ObjectStreamClass;
import java.io.Serializable;
import java.lang.invoke.SerializedLambda;
import java.lang.reflect.Method;
import java.util.List;
import java.util.function.Function;
import java.util.stream.Stream;

public class Testbed
{
	private static interface SerializableFunction&lt;A, R&gt; extends Function&lt;A, R&gt;, Serializable { }
	private static List&lt;String&gt; noop(List&lt;String&gt; l) { return l; }

	public static void main(String[] args) throws Exception
	{
		printGenericSignature((SerializableFunction&lt;List&lt;String&gt;, List&lt;String&gt;&gt;)Testbed::noop);
	}

	private static void printGenericSignature(Function&lt;?, ?&gt; f) throws Exception
	{
		Method invokeWriteReplaceMethod = ObjectStreamClass.class.getDeclaredMethod(&quot;invokeWriteReplace&quot;, Object.class);
		invokeWriteReplaceMethod.setAccessible(true);
		SerializedLambda l = (SerializedLambda)invokeWriteReplaceMethod.invoke(ObjectStreamClass.lookupAny(f.getClass()), f);

		Stream.of(Class.forName(l.getImplClass()).getDeclaredMethods()).
			filter(m -&gt; m.getName().equals(l.getImplMethodName()) &amp;&amp; m.getParameterCount() == 1).
			forEach(m -&gt; System.out.println(m.getGenericReturnType() + &quot; (&quot; + m.getGenericParameterTypes()[0] + &quot;)&quot;));
	}
}


Expected output (Eclipse &lt;= 4.4.0 and javac):
java.util.List&lt;java.lang.String&gt; (java.util.List&lt;java.lang.String&gt;)

Actual output (Eclipse 4.4.1):
interface java.util.List (interface java.util.List)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2466472</commentid>
    <comment_count>12</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-16 08:58:38 -0400</bug_when>
    <thetext>Marco, could you provide a brief description of impact ? I understand
reflection produces different results, but that is just a symptom and
does not really tell us how impacts your product.

Sasi, IIRC, the suppression of generic signature was not absolutely
required for https://bugs.eclipse.org/bugs/show_bug.cgi?id=436542 ? 

In that case we may decide to restore it.

On another note, compilers have a fair bit of leeway in code generation.
Turning method references to implicit lambdas or emitting anonymous
classes for lambdas instead of using the lambda meta factory is all
fair game.

Not saying we won&apos;t fix this, but just pointing out that the compiler
is not incorrect in doing what it does even if it is a bit undesirable.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2466487</commentid>
    <comment_count>13</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-16 09:03:13 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #12)

&gt; Not saying we won&apos;t fix this, but just pointing out that the compiler
&gt; is not incorrect in doing what it does even if it is a bit undesirable.

I meant this part about generating implicit lambda for method references,
not about dropping generic signature.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2466569</commentid>
    <comment_count>14</comment_count>
    <who name="Marco Trudel">marco</who>
    <bug_when>2014-10-16 10:29:37 -0400</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #12)
&gt; Marco, could you provide a brief description of impact ? I understand
&gt; reflection produces different results, but that is just a symptom and
&gt; does not really tell us how impacts your product.

Short version: It&apos;s a blocking bug. We can&apos;t use this version of Eclipse.

Long version: We offer fully automatic C to Java translation (www.mtsystems.ch). The created Java code still seamlessly interfaces with native C libraries (libc, Ncurses, X11, ...). C Function pointers are translated to Java method references. When we pass a method reference to a native function (e.g. scandir() from dirent.h), we get callbacks from C into Java and need to dynamically create the appropriate Java argument objects, including the correct generic types (which we keep at runtime).
This is just one of many places where we need the generic information.

&gt; Sasi, IIRC, the suppression of generic signature was not absolutely
&gt; required for https://bugs.eclipse.org/bugs/show_bug.cgi?id=436542 ? 

It seems that javac is doing the same. So it seems reasonable since this minimizes the chances for incompatibilities.

&gt; In that case we may decide to restore it.
&gt; 
&gt; On another note, compilers have a fair bit of leeway in code generation.
&gt; Turning method references to implicit lambdas or emitting anonymous
&gt; classes for lambdas instead of using the lambda meta factory is all
&gt; fair game.

Agreed. There seem to be three possibilities:

1) No generic information for lambda expressions, change the method reference implementation to use the actual method.
-&gt; identical to the javac behavior, fixes this bug and b/430157

2) Generic information for all lambda expressions (less aggressive pruning).
-&gt; potentially incompatible with javac, fixes this bug, doesnt fix b/430157

3) Declare this bug invalid.
-&gt; incompatible with javac, doesnt fix this bug nor b/430157</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2467002</commentid>
    <comment_count>15</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-17 00:09:15 -0400</bug_when>
    <thetext>Sasi, since this is called out as a blocker, let us try this. In the
lambda synthesized in RE.generateImplicitLambda, let us simply set a 
bit isSynthetic (introduce a new LE constructor with an extra
argument). If this bit is set, then we know that it is not a user coded
lambda and we can emit a generic signature for that by reinstating the
code we pruned earlier.

Can we have tests that compare the reflection results for both user code
lambda case and the synthetic case to establish that we are doing the
right thing ? Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2467129</commentid>
    <comment_count>16</comment_count>
      <attachid>247964</attachid>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-10-17 05:03:45 -0400</bug_when>
    <thetext>Created attachment 247964
Fix and tests</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2467136</commentid>
    <comment_count>17</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-10-17 05:08:46 -0400</bug_when>
    <thetext>(In reply to comment #15)
&gt; Sasi, since this is called out as a blocker, let us try this. In the
&gt; lambda synthesized in RE.generateImplicitLambda, let us simply set a
&gt; bit isSynthetic (introduce a new LE constructor with an extra
&gt; argument). If this bit is set, then we know that it is not a user coded
&gt; lambda and we can emit a generic signature for that by reinstating the
&gt; code we pruned earlier.
&gt; 
Attached patch with the suggested changes.
&gt; Can we have tests that compare the reflection results for both user code
&gt; lambda case and the synthetic case to establish that we are doing the
&gt; right thing ? Thanks.
Added tests for implicit, explicit serializable and non-serializable lambdas. Of these, the output of the case with Serialized implicit lambda differs from that of javac.
Tests are running. Will update once they are done. Srikanth, please review</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2468383</commentid>
    <comment_count>18</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-20 22:55:10 -0400</bug_when>
    <thetext>I made a few changes: 

    - Made the decision of whether to emit generic signatures or not
dependent on whether the method that the method reference binds to has
generic signature or not rather than simply by whether the lambda is
synthetic or not. (this is just code clarity issue)

    - Added a test for comment#0 test case - we should always do this.

Fix and tests are available here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=f670a12d7a86101c01370f88073e79ca2cb2abf6

Jay, this is a must for 4.4.2 as it is a regression in 4.4.1 since 4.4.


(In reply to Sasikanth Bharadwaj from comment #17)
&gt; Added tests for implicit, explicit serializable and non-serializable
&gt; lambdas. Of these, the output of the case with Serialized implicit lambda
&gt; differs from that of javac.

Is this LET.test447119c that you are talking about ? That difference is
unavoidable given we generate implicit lambdas for method references in
some special cases including serialization.

&gt; Tests are running. Will update once they are done. Srikanth, please review

Did they finish ? :)

(In reply to Marco Trudel from comment #10)

[...]

&gt; Boldly reopened.

:) Thanks !</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2468433</commentid>
    <comment_count>19</comment_count>
    <who name="Marco Trudel">marco</who>
    <bug_when>2014-10-21 03:24:43 -0400</bug_when>
    <thetext>Thanks Srikanth and Sasikanth!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2473174</commentid>
    <comment_count>20</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2014-10-29 00:27:13 -0400</bug_when>
    <thetext>Verified for Eclipse Mars 4.5 M3 Build id: I20141027-2000. [not moving to verified state as this is a 4.4.2 candidate]</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2487841</commentid>
    <comment_count>21</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-11-24 03:19:34 -0500</bug_when>
    <thetext>I have reviewed and released this fix for 4.4.2:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=R4_4_maintenance&amp;id=af2cabcc94ca5588340b53b20e92ca1923d40478</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2507888</commentid>
    <comment_count>22</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-01-20 10:10:16 -0500</bug_when>
    <thetext>Verified for 4.4.2 RC1 with build M20150114-1500</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="0"
              isprivate="0"
          >
            <attachid>247862</attachid>
            <date>2014-10-14 10:40:00 -0400</date>
            <delta_ts>2014-10-14 10:40:55 -0400</delta_ts>
            <desc>test class that shows the regression</desc>
            <filename>Testbed.java</filename>
            <type>text/x-java</type>
            <size>1228</size>
            <attacher name="Marco Trudel">marco</attacher>
            
              <data encoding="base64">aW1wb3J0IGphdmEuaW8uT2JqZWN0U3RyZWFtQ2xhc3M7CmltcG9ydCBqYXZhLmlvLlNlcmlhbGl6
YWJsZTsKaW1wb3J0IGphdmEubGFuZy5pbnZva2UuU2VyaWFsaXplZExhbWJkYTsKaW1wb3J0IGph
dmEubGFuZy5yZWZsZWN0Lk1ldGhvZDsKaW1wb3J0IGphdmEudXRpbC5MaXN0OwppbXBvcnQgamF2
YS51dGlsLmZ1bmN0aW9uLkZ1bmN0aW9uOwoKcHVibGljIGNsYXNzIFRlc3RiZWQKewoJcHJpdmF0
ZSBzdGF0aWMgaW50ZXJmYWNlIFNlcmlhbGl6YWJsZUZ1bmN0aW9uPEEsIFI+IGV4dGVuZHMgRnVu
Y3Rpb248QSwgUj4sIFNlcmlhbGl6YWJsZSB7IH0KCXByaXZhdGUgc3RhdGljIExpc3Q8U3RyaW5n
PiBub29wKExpc3Q8U3RyaW5nPiBsKSB7IHJldHVybiBsOyB9CgoJcHVibGljIHN0YXRpYyB2b2lk
IG1haW4oU3RyaW5nW10gYXJncykgdGhyb3dzIEV4Y2VwdGlvbgoJewoJCVNlcmlhbGl6YWJsZUZ1
bmN0aW9uPExpc3Q8U3RyaW5nPiwgTGlzdDxTdHJpbmc+PiBmID0gVGVzdGJlZDo6bm9vcDsKCgkJ
TWV0aG9kIGludm9rZVdyaXRlUmVwbGFjZU1ldGhvZCA9IE9iamVjdFN0cmVhbUNsYXNzLmNsYXNz
LmdldERlY2xhcmVkTWV0aG9kKCJpbnZva2VXcml0ZVJlcGxhY2UiLCBPYmplY3QuY2xhc3MpOwoJ
CWludm9rZVdyaXRlUmVwbGFjZU1ldGhvZC5zZXRBY2Nlc3NpYmxlKHRydWUpOwoJCVNlcmlhbGl6
ZWRMYW1iZGEgbCA9IChTZXJpYWxpemVkTGFtYmRhKWludm9rZVdyaXRlUmVwbGFjZU1ldGhvZC5p
bnZva2UoT2JqZWN0U3RyZWFtQ2xhc3MubG9va3VwQW55KGYuZ2V0Q2xhc3MoKSksIGYpOwoJCVN5
c3RlbS5vdXQucHJpbnRsbigiTGFtYmRhIGJpbmRzIHRvOiAiICsgbC5nZXRJbXBsQ2xhc3MoKSAr
ICIuIiArIGwuZ2V0SW1wbE1ldGhvZE5hbWUoKSk7CgoJCVN5c3RlbS5vdXQucHJpbnRsbigiTWV0
aG9kcyAod2l0aCBnZW5lcmljcyk6Iik7CgkJZm9yKE1ldGhvZCBtIDogVGVzdGJlZC5jbGFzcy5n
ZXREZWNsYXJlZE1ldGhvZHMoKSkKCQl7CgkJCWlmKG0uZ2V0TmFtZSgpLmVxdWFscygibWFpbiIp
KSBjb250aW51ZTsKCQkJaWYobS5nZXROYW1lKCkuY29udGFpbnMoImRlc2VyaWFsaXplTGFtYmRh
IikpIGNvbnRpbnVlOwoJCQlTeXN0ZW0ub3V0LnByaW50bG4oIi0gIiArIG0uZ2V0R2VuZXJpY1Jl
dHVyblR5cGUoKSArICIgIiArIG0uZ2V0TmFtZSgpICsgIigiICsgbS5nZXRHZW5lcmljUGFyYW1l
dGVyVHlwZXMoKVswXSArICIpIik7CgkJfQoJfQp9Cg==
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>247964</attachid>
            <date>2014-10-17 05:03:00 -0400</date>
            <delta_ts>2014-10-17 05:03:45 -0400</delta_ts>
            <desc>Fix and tests</desc>
            <filename>Fix-and-tests-for-Bug447119.patch</filename>
            <type>text/plain</type>
            <size>9508</size>
            <attacher name="Sasikanth Bharadwaj">saammana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0xhbWJkYUV4cHJlc3Np
b25zVGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29y
Zy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhRXhwcmVz
c2lvbnNUZXN0LmphdmEKaW5kZXggYjA1OTg1Yi4uMDM2ZGJhNCAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rl
c3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9j
b3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhRXhwcmVzc2lvbnNUZXN0LmphdmEK
QEAgLTQ4ODIsNiArNDg4MiwxMTAgQEAKIAkJfSwKIAkJIiIpOwogfQorLy8gaHR0cHM6Ly9idWdz
LmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQ0NzExOSwgWzEuOF1bY29tcGlsZXJd
IG1ldGhvZCByZWZlcmVuY2VzIGxvc3QgZ2VuZXJpYyB0eXBlIGluZm9ybWF0aW9uICg0LjQgLT4g
NC40LjEgcmVncmVzc2lvbikgCitwdWJsaWMgdm9pZCB0ZXN0NDQ3MTE5KCkgeworCXRoaXMucnVu
Q29uZm9ybVRlc3QoCisJCQluZXcgU3RyaW5nW10geworCQkJCSJYLmphdmEiLAorCQkJCSJpbXBv
cnQgamF2YS5sYW5nLnJlZmxlY3QuTWV0aG9kO1xuIiArCisJCQkJImltcG9ydCBqYXZhLmxhbmcu
cmVmbGVjdC5QYXJhbWV0ZXI7XG4iICsKKwkJCQkiaW1wb3J0IGphdmEudXRpbC5BcnJheXM7XG4i
ICsKKwkJCQkiaW1wb3J0IGphdmEudXRpbC5mdW5jdGlvbi5GdW5jdGlvbjtcbiIgKworCQkJCSJp
bXBvcnQgamF2YS51dGlsLkxpc3Q7XG4iICsKKwkJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJ
CQkJIiAgICBwcml2YXRlIHN0YXRpYyBMaXN0PFN0cmluZz4gZm9vKExpc3Q8U3RyaW5nPiB4KXty
ZXR1cm4geDt9XG4iICsKKwkJCQkiICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1td
IGFyZ3MpIHtcbiIgKworCQkJCSIgICAgICAgIEZ1bmN0aW9uPExpc3Q8U3RyaW5nPixMaXN0PFN0
cmluZz4+IGYgPSBpIC0+IHsgcmV0dXJuIGk7IH07XG4iICsKKwkJCQkiICAgICAgICBNZXRob2Rb
XSBtZXRob2RzID0gWC5jbGFzcy5nZXREZWNsYXJlZE1ldGhvZHMoKTtcbiIgKworCQkJCSIgICAg
ICAgIGZvciAoTWV0aG9kIG0gOiBtZXRob2RzKSB7XG4iICsKKwkJCQkiICAgICAgICAJaWYgKG0u
Z2V0TmFtZSgpLmNvbnRhaW5zKFwibGFtYmRhXCIpKSB7XG4iICsKKwkJCQkiICAgICAgICAJCVN5
c3RlbS5vdXQucHJpbnRsbihcIi0gXCIgKyBtLmdldEdlbmVyaWNSZXR1cm5UeXBlKCkgKyBcIiBc
IiArIG0uZ2V0TmFtZSgpICsgXCIoXCIgKyBBcnJheXMuYXNMaXN0KG0uZ2V0R2VuZXJpY1BhcmFt
ZXRlclR5cGVzKCkpICsgXCIpXCIpO1xuIiArCisJCQkJIiAgICAgICAgCX1cbiIgKworCQkJCSIg
ICAgICAgIH1cbiIgKworCQkJCSIgICAgfVxuIiArCisJCQkJIn1cbiIKKwkJCX0sCisJCQkiLSBp
bnRlcmZhY2UgamF2YS51dGlsLkxpc3QgbGFtYmRhJDAoW2ludGVyZmFjZSBqYXZhLnV0aWwuTGlz
dF0pIik7Cit9CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/
aWQ9NDQ3MTE5LCBbMS44XVtjb21waWxlcl0gbWV0aG9kIHJlZmVyZW5jZXMgbG9zdCBnZW5lcmlj
IHR5cGUgaW5mb3JtYXRpb24gKDQuNCAtPiA0LjQuMSByZWdyZXNzaW9uKSAKK3B1YmxpYyB2b2lk
IHRlc3Q0NDcxMTlhKCkgeworCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCQluZXcgU3RyaW5nW10g
eworCQkJCSJYLmphdmEiLAorCQkJCSJpbXBvcnQgamF2YS5sYW5nLnJlZmxlY3QuTWV0aG9kO1xu
IiArCisJCQkJImltcG9ydCBqYXZhLmxhbmcucmVmbGVjdC5QYXJhbWV0ZXI7XG4iICsKKwkJCQki
aW1wb3J0IGphdmEudXRpbC5BcnJheXM7XG4iICsKKwkJCQkiaW1wb3J0IGphdmEudXRpbC5mdW5j
dGlvbi5GdW5jdGlvbjtcbiIgKworCQkJCSJpbXBvcnQgamF2YS51dGlsLkxpc3Q7XG4iICsKKwkJ
CQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkJIiAgICBwcml2YXRlIHN0YXRpYyBMaXN0PFN0
cmluZz4gZm9vKExpc3Q8U3RyaW5nPiB4KXtyZXR1cm4geDt9XG4iICsKKwkJCQkiICAgIHB1Ymxp
YyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHtcbiIgKworCQkJCSIgICAgICAgIEZ1
bmN0aW9uPExpc3Q8U3RyaW5nPixMaXN0PFN0cmluZz4+IGYgPSBYOjpmb287XG4iICsKKwkJCQki
ICAgICAgICBNZXRob2RbXSBtZXRob2RzID0gWC5jbGFzcy5nZXREZWNsYXJlZE1ldGhvZHMoKTtc
biIgKworCQkJCSIgICAgICAgIGZvciAoTWV0aG9kIG0gOiBtZXRob2RzKSB7XG4iICsKKwkJCQki
ICAgICAgICAJaWYgKG0uZ2V0TmFtZSgpLmNvbnRhaW5zKFwibGFtYmRhXCIpKSB7XG4iICsKKwkJ
CQkiICAgICAgICAJCVN5c3RlbS5vdXQucHJpbnRsbihcIi0gXCIgKyBtLmdldEdlbmVyaWNSZXR1
cm5UeXBlKCkgKyBcIiBcIiArIG0uZ2V0TmFtZSgpICsgXCIoXCIgKyBBcnJheXMuYXNMaXN0KG0u
Z2V0R2VuZXJpY1BhcmFtZXRlclR5cGVzKCkpICsgXCIpXCIpO1xuIiArCisJCQkJIiAgICAgICAg
CX1cbiIgKworCQkJCSIgICAgICAgIH1cbiIgKworCQkJCSIgICAgfVxuIiArCisJCQkJIn1cbiIK
KwkJCX0sCisJCQkiIik7Cit9CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93
X2J1Zy5jZ2k/aWQ9NDQ3MTE5LCBbMS44XVtjb21waWxlcl0gbWV0aG9kIHJlZmVyZW5jZXMgbG9z
dCBnZW5lcmljIHR5cGUgaW5mb3JtYXRpb24gKDQuNCAtPiA0LjQuMSByZWdyZXNzaW9uKSAKK3B1
YmxpYyB2b2lkIHRlc3Q0NDcxMTliKCkgeworCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCQluZXcg
U3RyaW5nW10geworCQkJCSJYLmphdmEiLAorCQkJCSJpbXBvcnQgamF2YS5sYW5nLnJlZmxlY3Qu
TWV0aG9kO1xuIiArCisJCQkJImltcG9ydCBqYXZhLmxhbmcucmVmbGVjdC5QYXJhbWV0ZXI7XG4i
ICsKKwkJCQkiaW1wb3J0IGphdmEudXRpbC5BcnJheXM7XG4iICsKKwkJCQkiaW1wb3J0IGphdmEu
dXRpbC5mdW5jdGlvbi5GdW5jdGlvbjtcbiIgKworCQkJCSJpbXBvcnQgamF2YS51dGlsLkxpc3Q7
XG4iICsKKwkJCQkiaW1wb3J0IGphdmEuaW8uU2VyaWFsaXphYmxlOyIgKworCQkJCSJwdWJsaWMg
Y2xhc3MgWCB7XG4iICsKKwkJCQkiICAgIHByaXZhdGUgc3RhdGljIGludGVyZmFjZSBTZXJpYWxp
emFibGVGdW5jdGlvbjxBLCBSPiBleHRlbmRzIEZ1bmN0aW9uPEEsIFI+LCBTZXJpYWxpemFibGUg
eyB9IiArCisJCQkJIiAgICBwcml2YXRlIHN0YXRpYyBMaXN0PFN0cmluZz4gZm9vKExpc3Q8U3Ry
aW5nPiB4KXtyZXR1cm4geDt9XG4iICsKKwkJCQkiICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBtYWlu
KFN0cmluZ1tdIGFyZ3MpIHtcbiIgKworCQkJCSIgICAgICAgIFNlcmlhbGl6YWJsZUZ1bmN0aW9u
PExpc3Q8U3RyaW5nPiwgTGlzdDxTdHJpbmc+PiBmID0gaSAtPiB7IHJldHVybiBpOyB9O1xuIiAr
CisJCQkJIiAgICAgICAgTWV0aG9kW10gbWV0aG9kcyA9IFguY2xhc3MuZ2V0RGVjbGFyZWRNZXRo
b2RzKCk7XG4iICsKKwkJCQkiICAgICAgICBmb3IgKE1ldGhvZCBtIDogbWV0aG9kcykge1xuIiAr
CisJCQkJIiAgICAgICAgCWlmIChtLmdldE5hbWUoKS5jb250YWlucyhcImxhbWJkYVwiKSkge1xu
IiArCisJCQkJIiAgICAgICAgCQlTeXN0ZW0ub3V0LnByaW50bG4oXCItIFwiICsgbS5nZXRHZW5l
cmljUmV0dXJuVHlwZSgpICsgXCIgXCIgKyBtLmdldE5hbWUoKSArIFwiKFwiICsgQXJyYXlzLmFz
TGlzdChtLmdldEdlbmVyaWNQYXJhbWV0ZXJUeXBlcygpKSArIFwiKVwiKTtcbiIgKworCQkJCSIg
ICAgICAgIAl9XG4iICsKKwkJCQkiICAgICAgICB9XG4iICsKKwkJCQkiICAgIH1cbiIgKworCQkJ
CSJ9XG4iCisJCQl9LAorCQkJIi0gaW50ZXJmYWNlIGphdmEudXRpbC5MaXN0IGxhbWJkYSQwKFtp
bnRlcmZhY2UgamF2YS51dGlsLkxpc3RdKSIpOworfQorLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uu
b3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQ0NzExOSwgWzEuOF1bY29tcGlsZXJdIG1ldGhvZCBy
ZWZlcmVuY2VzIGxvc3QgZ2VuZXJpYyB0eXBlIGluZm9ybWF0aW9uICg0LjQgLT4gNC40LjEgcmVn
cmVzc2lvbikgCitwdWJsaWMgdm9pZCB0ZXN0NDQ3MTE5YygpIHsKKwl0aGlzLnJ1bkNvbmZvcm1U
ZXN0KAorCQkJbmV3IFN0cmluZ1tdIHsKKwkJCQkiWC5qYXZhIiwKKwkJCQkiaW1wb3J0IGphdmEu
bGFuZy5yZWZsZWN0Lk1ldGhvZDtcbiIgKworCQkJCSJpbXBvcnQgamF2YS5sYW5nLnJlZmxlY3Qu
UGFyYW1ldGVyO1xuIiArCisJCQkJImltcG9ydCBqYXZhLnV0aWwuQXJyYXlzO1xuIiArCisJCQkJ
ImltcG9ydCBqYXZhLnV0aWwuZnVuY3Rpb24uRnVuY3Rpb247XG4iICsKKwkJCQkiaW1wb3J0IGph
dmEudXRpbC5MaXN0O1xuIiArCisJCQkJImltcG9ydCBqYXZhLmlvLlNlcmlhbGl6YWJsZTsiICsK
KwkJCQkicHVibGljIGNsYXNzIFgge1xuIiArCisJCQkJIiAgICBwcml2YXRlIHN0YXRpYyBpbnRl
cmZhY2UgU2VyaWFsaXphYmxlRnVuY3Rpb248QSwgUj4gZXh0ZW5kcyBGdW5jdGlvbjxBLCBSPiwg
U2VyaWFsaXphYmxlIHsgfSIgKworCQkJCSIgICAgcHJpdmF0ZSBzdGF0aWMgTGlzdDxTdHJpbmc+
IGZvbyhMaXN0PFN0cmluZz4geCl7cmV0dXJuIHg7fVxuIiArCisJCQkJIiAgICBwdWJsaWMgc3Rh
dGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7XG4iICsKKwkJCQkiICAgICAgICBTZXJpYWxp
emFibGVGdW5jdGlvbjxMaXN0PFN0cmluZz4sIExpc3Q8U3RyaW5nPj4gZiA9IFg6OmZvbztcbiIg
KworCQkJCSIgICAgICAgIE1ldGhvZFtdIG1ldGhvZHMgPSBYLmNsYXNzLmdldERlY2xhcmVkTWV0
aG9kcygpO1xuIiArCisJCQkJIiAgICAgICAgZm9yIChNZXRob2QgbSA6IG1ldGhvZHMpIHtcbiIg
KworCQkJCSIgICAgICAgIAlpZiAobS5nZXROYW1lKCkuY29udGFpbnMoXCJsYW1iZGFcIikpIHtc
biIgKworCQkJCSIgICAgICAgIAkJU3lzdGVtLm91dC5wcmludGxuKFwiLSBcIiArIG0uZ2V0R2Vu
ZXJpY1JldHVyblR5cGUoKSArIFwiIFwiICsgbS5nZXROYW1lKCkgKyBcIihcIiArIEFycmF5cy5h
c0xpc3QobS5nZXRHZW5lcmljUGFyYW1ldGVyVHlwZXMoKSkgKyBcIilcIik7XG4iICsKKwkJCQki
ICAgICAgICAJfVxuIiArCisJCQkJIiAgICAgICAgfVxuIiArCisJCQkJIiAgICB9XG4iICsKKwkJ
CQkifVxuIgorCQkJfSwKKwkJCSItIGphdmEudXRpbC5MaXN0PGphdmEubGFuZy5TdHJpbmc+IGxh
bWJkYSQwKFtqYXZhLnV0aWwuTGlzdDxqYXZhLmxhbmcuU3RyaW5nPl0pIik7Cit9CiBwdWJsaWMg
c3RhdGljIENsYXNzIHRlc3RDbGFzcygpIHsKIAlyZXR1cm4gTGFtYmRhRXhwcmVzc2lvbnNUZXN0
LmNsYXNzOwogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9MYW1iZGFFeHByZXNzaW9uLmphdmEg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvYXN0L0xhbWJkYUV4cHJlc3Npb24uamF2YQppbmRleCAxMzNmY2FkLi5lMjIwN2Yx
IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0xhbWJkYUV4cHJlc3Npb24uamF2YQorKysgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvYXN0L0xhbWJkYUV4cHJlc3Npb24uamF2YQpAQCAtMTA3LDYgKzEwNyw3IEBACiAJcHJpdmF0
ZSBib29sZWFuIHNoYXBlQW5hbHlzaXNDb21wbGV0ZSA9IGZhbHNlOwogCWJvb2xlYW4gcmV0dXJu
c1ZhbHVlOwogCXB1YmxpYyBib29sZWFuIGlzU2VyaWFsaXphYmxlOworCXB1YmxpYyBib29sZWFu
IGlzSW1wbGljaXQ7CiAJYm9vbGVhbiByZXR1cm5zVm9pZDsKIAlwdWJsaWMgTGFtYmRhRXhwcmVz
c2lvbiBvcmlnaW5hbCA9IHRoaXM7CiAJcHVibGljIFN5bnRoZXRpY0FyZ3VtZW50QmluZGluZ1td
IG91dGVyTG9jYWxWYXJpYWJsZXMgPSBOT19TWU5USEVUSUNfQVJHVU1FTlRTOwpAQCAtMTIxLDEz
ICsxMjIsMTggQEAKIAlwcml2YXRlIHN0YXRpYyBmaW5hbCBTeW50aGV0aWNBcmd1bWVudEJpbmRp
bmcgW10gTk9fU1lOVEhFVElDX0FSR1VNRU5UUyA9IG5ldyBTeW50aGV0aWNBcmd1bWVudEJpbmRp
bmdbMF07CiAJcHJpdmF0ZSBzdGF0aWMgZmluYWwgQmxvY2sgTk9fQk9EWSA9IG5ldyBCbG9jaygw
LCB0cnVlKTsKIAotCXB1YmxpYyBMYW1iZGFFeHByZXNzaW9uKENvbXBpbGF0aW9uUmVzdWx0IGNv
bXBpbGF0aW9uUmVzdWx0LCBib29sZWFuIGFzc2lzdE5vZGUpIHsKKwlwdWJsaWMgTGFtYmRhRXhw
cmVzc2lvbihDb21waWxhdGlvblJlc3VsdCBjb21waWxhdGlvblJlc3VsdCwgYm9vbGVhbiBhc3Np
c3ROb2RlLCBib29sZWFuIGltcGxpY2l0KSB7CiAJCXN1cGVyKGNvbXBpbGF0aW9uUmVzdWx0KTsK
IAkJdGhpcy5hc3Npc3ROb2RlID0gYXNzaXN0Tm9kZTsKKwkJdGhpcy5pc0ltcGxpY2l0ID0gaW1w
bGljaXQ7CiAJCXNldEFyZ3VtZW50cyhOT19BUkdVTUVOVFMpOwogCQlzZXRCb2R5KE5PX0JPRFkp
OwogCX0KLQkKKworCXB1YmxpYyBMYW1iZGFFeHByZXNzaW9uKENvbXBpbGF0aW9uUmVzdWx0IGNv
bXBpbGF0aW9uUmVzdWx0LCBib29sZWFuIGFzc2lzdE5vZGUpIHsKKwkJdGhpcyhjb21waWxhdGlv
blJlc3VsdCwgYXNzaXN0Tm9kZSwgZmFsc2UpOworCX0KKwogCXB1YmxpYyB2b2lkIHNldEFyZ3Vt
ZW50cyhBcmd1bWVudCBbXSBhcmd1bWVudHMpIHsKIAkJdGhpcy5hcmd1bWVudHMgPSBhcmd1bWVu
dHMgIT0gbnVsbCA/IGFyZ3VtZW50cyA6IEFTVE5vZGUuTk9fQVJHVU1FTlRTOwogCQl0aGlzLmFy
Z3VtZW50VHlwZXMgPSBuZXcgVHlwZUJpbmRpbmdbYXJndW1lbnRzICE9IG51bGwgPyBhcmd1bWVu
dHMubGVuZ3RoIDogMF07CkBAIC0zMzcsNyArMzQzLDkgQEAKIAkJCQkJCXRoaXMucmVzb2x2ZWRU
eXBlID0gbnVsbDsgLy8gY29udGludWUgdG8gdHlwZSBjaGVjay4KIAkJCQkJfQogCQkJCX0KLQor
CQkJCVR5cGVCaW5kaW5nIGxlYWZUeXBlID0gcGFyYW1ldGVyVHlwZS5sZWFmQ29tcG9uZW50VHlw
ZSgpOworCQkJCWlmICh0aGlzLmlzSW1wbGljaXQgJiYgbGVhZlR5cGUgaW5zdGFuY2VvZiBSZWZl
cmVuY2VCaW5kaW5nICYmICgoKFJlZmVyZW5jZUJpbmRpbmcpIGxlYWZUeXBlKS5tb2RpZmllcnMg
JiBFeHRyYUNvbXBpbGVyTW9kaWZpZXJzLkFjY0dlbmVyaWNTaWduYXR1cmUpICE9IDApCisJCQkJ
CXRoaXMuYmluZGluZy5tb2RpZmllcnMgfD0gRXh0cmFDb21waWxlck1vZGlmaWVycy5BY2NHZW5l
cmljU2lnbmF0dXJlOwogCQkJCW5ld1BhcmFtZXRlcnNbaV0gPSBhcmd1bWVudC5iaW5kKHRoaXMu
c2NvcGUsIHBhcmFtZXRlclR5cGUsIGZhbHNlKTsJCQkJCiAJCQkJaWYgKGFyZ3VtZW50LmFubm90
YXRpb25zICE9IG51bGwpIHsKIAkJCQkJdGhpcy5iaW5kaW5nLnRhZ0JpdHMgfD0gVGFnQml0cy5I
YXNQYXJhbWV0ZXJBbm5vdGF0aW9uczsKQEAgLTM3Myw2ICszODEsOCBAQAogCQkJaWYgKChleGNl
cHRpb24udGFnQml0cyAmIFRhZ0JpdHMuSGFzTWlzc2luZ1R5cGUpICE9IDApIHsKIAkJCQl0aGlz
LmJpbmRpbmcudGFnQml0cyB8PSBUYWdCaXRzLkhhc01pc3NpbmdUeXBlOwogCQkJfQorCQkJaWYg
KHRoaXMuaXNJbXBsaWNpdCkKKwkJCQl0aGlzLmJpbmRpbmcubW9kaWZpZXJzIHw9IChleGNlcHRp
b24ubW9kaWZpZXJzICYgRXh0cmFDb21waWxlck1vZGlmaWVycy5BY2NHZW5lcmljU2lnbmF0dXJl
KTsKIAkJfQogCQkKIAkJVHlwZUJpbmRpbmcgcmV0dXJuVHlwZSA9IHRoaXMuYmluZGluZy5yZXR1
cm5UeXBlOwpAQCAtMzgwLDYgKzM5MCw5IEBACiAJCQlpZiAoKHJldHVyblR5cGUudGFnQml0cyAm
IFRhZ0JpdHMuSGFzTWlzc2luZ1R5cGUpICE9IDApIHsKIAkJCQl0aGlzLmJpbmRpbmcudGFnQml0
cyB8PSBUYWdCaXRzLkhhc01pc3NpbmdUeXBlOwogCQkJfQorCQkJVHlwZUJpbmRpbmcgbGVhZlR5
cGUgPSByZXR1cm5UeXBlLmxlYWZDb21wb25lbnRUeXBlKCk7CisJCQlpZiAodGhpcy5pc0ltcGxp
Y2l0ICYmIGxlYWZUeXBlIGluc3RhbmNlb2YgUmVmZXJlbmNlQmluZGluZyAmJiAoKChSZWZlcmVu
Y2VCaW5kaW5nKSBsZWFmVHlwZSkubW9kaWZpZXJzICYgRXh0cmFDb21waWxlck1vZGlmaWVycy5B
Y2NHZW5lcmljU2lnbmF0dXJlKSAhPSAwKQorCQkJCXRoaXMuYmluZGluZy5tb2RpZmllcnMgfD0g
RXh0cmFDb21waWxlck1vZGlmaWVycy5BY2NHZW5lcmljU2lnbmF0dXJlOwogCQl9IC8vIFRPRE8g
KHN0ZXBoYW4pOiBlbHNlPyAoY2FuIHRoYXQgaGFwcGVuPykKIAogCQlpZiAoaGF2ZURlc2NyaXB0
b3IgJiYgIWJ1Z2d5QXJndW1lbnRzICYmIGJsb2NrU2NvcGUuY29tcGlsZXJPcHRpb25zKCkuaXNB
bm5vdGF0aW9uQmFzZWROdWxsQW5hbHlzaXNFbmFibGVkKSB7CmRpZmYgLS1naXQgYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
YXN0L1JlZmVyZW5jZUV4cHJlc3Npb24uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUmVmZXJlbmNlRXhwcmVz
c2lvbi5qYXZhCmluZGV4IDM0MzM4Y2EuLjkyMmExZTcgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3Qv
UmVmZXJlbmNlRXhwcmVzc2lvbi5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvUmVmZXJlbmNlRXhwcmVz
c2lvbi5qYXZhCkBAIC0xMTcsNyArMTE3LDcgQEAKIAkJCiAJCWludCBhcmdjID0gdGhpcy5kZXNj
cmlwdG9yLnBhcmFtZXRlcnMubGVuZ3RoOwogCQkKLQkJTGFtYmRhRXhwcmVzc2lvbiBpbXBsaWNp
dExhbWJkYSA9IG5ldyBMYW1iZGFFeHByZXNzaW9uKHRoaXMuY29tcGlsYXRpb25SZXN1bHQsIGZh
bHNlKTsKKwkJTGFtYmRhRXhwcmVzc2lvbiBpbXBsaWNpdExhbWJkYSA9IG5ldyBMYW1iZGFFeHBy
ZXNzaW9uKHRoaXMuY29tcGlsYXRpb25SZXN1bHQsIGZhbHNlLCB0cnVlKTsKIAkJQXJndW1lbnQg
W10gYXJndW1lbnRzID0gbmV3IEFyZ3VtZW50W2FyZ2NdOwogCQlmb3IgKGludCBpID0gMDsgaSA8
IGFyZ2M7IGkrKykKIAkJCWFyZ3VtZW50c1tpXSA9IG5ldyBBcmd1bWVudCgoImFyZyIgKyBpKS50
b0NoYXJBcnJheSgpLCAwLCBudWxsLCAwLCB0cnVlKTsgLy8kTk9OLU5MUy0xJA==
</data>

          </attachment>
      

    </bug>

</bugzilla>