<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>426759</bug_id>
          
          <creation_ts>2014-01-28 00:08:00 -0500</creation_ts>
          <short_desc>APT doesn&apos;t process .class files created/updated in the preivous round of processing</short_desc>
          <delta_ts>2014-02-21 07:00:34 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>APT</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Jay Arthanareeswaran">jarthana</reporter>
          <assigned_to name="Jay Arthanareeswaran">jarthana</assigned_to>
          <cc>eclipse</cc>
    
    <cc>sarika.sinha</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2355197</commentid>
    <comment_count>0</comment_count>
      <attachid>239368</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-01-28 00:08:14 -0500</bug_when>
    <thetext>Created attachment 239368
Patch for testcase

As the attached test cases (in the form of unit tests) demonstrate, the .class files created by the annotation processor doesn&apos;t invoke the processor for another round of processing. Here is what the processor is trying to do:

1. Create a .class file for a package-info with an annotation, such as the following:

  PackageAnnot package targets.filer8;
  @interface PackageAnnot {}

2. The processor is tracking down the no of rounds and during the first round, copies the .class file&apos;s contents from the class loader and writes it using Filer.createClassFile() interface. This is expected (?) to call the annotation processor once again but not. This does happen with Javac, however.

Another but different issue is the behavior is different in the two test processor that are part of the patch. While Java8FilerProcessor#process() doesn&apos;t get the second call, Java8ElementProcessor#process() does get the second call, albeit with no package element as part of root elements. Javac also exibits different behavior across these two processors.

The patch probably contains other unnecessary things, but what is significant is in Java8ElementProcessor and those inside targets.filer8.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2355198</commentid>
    <comment_count>1</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-01-28 00:10:07 -0500</bug_when>
    <thetext>Walter, sorry to trouble you, but do you have some idea what might be going on or what you think is the correct behavior? Thanks!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2355744</commentid>
    <comment_count>2</comment_count>
    <who name="Walter Harley">eclipse</who>
    <bug_when>2014-01-29 01:14:49 -0500</bug_when>
    <thetext>My recollection is that the behavior of .class files causing a new round was explicitly *not* part of the JSR269 spec or of the Java 1.6 behavior.  Perhaps I am wrong; but this seems like something to verify in 1.6 before jumping.

It might be something that they have changed in 1.8 without any notice.

It is worth pointing out that your &quot;#1&quot; example is a little unusual in that the package is being annotated with the very same annotation being declared.  I think that is legitimate, but it wouldn&apos;t surprise me if it exposed bugs.  I would feel more comfortable with a repro that consisted of two files, one of which declared the annotation and the other of which used it, just in order to avoid confusion.

Frankly, before investing much time in rounds triggered by .class generation, I would look into whether anyone actually cared.  It seems like a low-value use case.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2359768</commentid>
    <comment_count>3</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-02-06 13:24:22 -0500</bug_when>
    <thetext>Here&apos;s what&apos;s happening. The following code in HookedJavaFileObject.java :

case CLASS :
IBinaryType binaryType = null;
...
if (binaryType != null) {
	char[] name = binaryType.getName();
	ReferenceBinding type = 
	this._filer._env._compiler.lookupEnvironment.getType(CharOperation.splitOn(&apos;/&apos;, name));
	
	if (type != null &amp;&amp; type.isValidBinding() &amp;&amp; type.isBinaryBinding()) {
		_filer.addNewClassFile(type);
	}
}

What we created was a class file. But by virtue of it being already present in the workspace as a source, the look up environment returns a SourceTypeBinding. Eventually this causes the new class creation not being registered.

But I don&apos;t really know what we can do here.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2360600</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-08 15:27:58 -0500</bug_when>
    <thetext>The javadoc of javax.annotation.processing.Filer.createClassFile(CharSequence, Element...) explicitly mentions about:

     * A class file can also be created to hold information
     * about a package, including package annotations.  To create a
     * class file for a named package, have {@code name} be the
     * package&apos;s name followed by {@code &quot;.package-info&quot;};

Eclipse was lacking support for this.

Added and released here: 

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=00ed17ebccd11fb6934f754c05c5ab1e0f58152f</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2366540</commentid>
    <comment_count>5</comment_count>
    <who name="Sarika Sinha">sarika.sinha</who>
    <bug_when>2014-02-21 03:59:05 -0500</bug_when>
    <thetext>Verified the package annotation can be used on the same package.

Verified as working for Eclipse + Java 8 RC1 using Kepler SR2(RC4) +   
Eclipse Java Development Tools Patch for Java 8 Support (BETA)	
1.0.0.v20140220-2054</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>239368</attachid>
            <date>2014-01-28 00:08:00 -0500</date>
            <delta_ts>2014-02-06 11:40:49 -0500</delta_ts>
            <desc>Patch for testcase</desc>
            <filename>PackageAnnot.patch</filename>
            <type>text/plain</type>
            <size>46148</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb21waWxlci5hcHQudGVzdHMvcHJvY2Vzc29y
cy9vcmcvZWNsaXBzZS9qZHQvY29tcGlsZXIvYXB0L3Rlc3RzL3Byb2Nlc3NvcnMvZWxlbWVudHMv
SmF2YThFbGVtZW50UHJvY2Vzc29yLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29tcGlsZXIuYXB0
LnRlc3RzL3Byb2Nlc3NvcnMvb3JnL2VjbGlwc2UvamR0L2NvbXBpbGVyL2FwdC90ZXN0cy9wcm9j
ZXNzb3JzL2VsZW1lbnRzL0phdmE4RWxlbWVudFByb2Nlc3Nvci5qYXZhCmluZGV4IDAxM2Y5OTku
LjUyZjYzNmEgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb21waWxlci5hcHQudGVzdHMv
cHJvY2Vzc29ycy9vcmcvZWNsaXBzZS9qZHQvY29tcGlsZXIvYXB0L3Rlc3RzL3Byb2Nlc3NvcnMv
ZWxlbWVudHMvSmF2YThFbGVtZW50UHJvY2Vzc29yLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvbXBpbGVyLmFwdC50ZXN0cy9wcm9jZXNzb3JzL29yZy9lY2xpcHNlL2pkdC9jb21waWxlci9h
cHQvdGVzdHMvcHJvY2Vzc29ycy9lbGVtZW50cy9KYXZhOEVsZW1lbnRQcm9jZXNzb3IuamF2YQpA
QCAtMSw1ICsxLDUgQEAKIC8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCi0gKiBDb3B5cmlnaHQgKGMp
IDIwMTMgSUJNIENvcnBvcmF0aW9uLgorICogQ29weXJpZ2h0IChjKSAyMDEzLCAyMDE0IElCTSBD
b3Jwb3JhdGlvbi4KICAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhl
IGFjY29tcGFueWluZyBtYXRlcmlhbHMKICAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUg
dGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAogICogd2hpY2ggYWNjb21w
YW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKQEAgLTE1LDYgKzE1
LDkgQEAKIAogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuY29tcGlsZXIuYXB0LnRlc3RzLnByb2Nl
c3NvcnMuZWxlbWVudHM7CiAKK2ltcG9ydCBqYXZhLmlvLklPRXhjZXB0aW9uOworaW1wb3J0IGph
dmEuaW8uSW5wdXRTdHJlYW07CitpbXBvcnQgamF2YS5pby5PdXRwdXRTdHJlYW07CiBpbXBvcnQg
amF2YS5sYW5nLmFubm90YXRpb24uQW5ub3RhdGlvbjsKIGltcG9ydCBqYXZhLmxhbmcucmVmbGVj
dC5JbnZvY2F0aW9uVGFyZ2V0RXhjZXB0aW9uOwogaW1wb3J0IGphdmEubGFuZy5yZWZsZWN0Lk1l
dGhvZDsKQEAgLTIzLDYgKzI2LDcgQEAKIGltcG9ydCBqYXZhLnV0aWwuTWFwOwogaW1wb3J0IGph
dmEudXRpbC5TZXQ7CiAKK2ltcG9ydCBqYXZheC5hbm5vdGF0aW9uLnByb2Nlc3NpbmcuRmlsZXI7
CiBpbXBvcnQgamF2YXguYW5ub3RhdGlvbi5wcm9jZXNzaW5nLlJvdW5kRW52aXJvbm1lbnQ7CiBp
bXBvcnQgamF2YXguYW5ub3RhdGlvbi5wcm9jZXNzaW5nLlN1cHBvcnRlZEFubm90YXRpb25UeXBl
czsKIGltcG9ydCBqYXZheC5hbm5vdGF0aW9uLnByb2Nlc3NpbmcuU3VwcG9ydGVkU291cmNlVmVy
c2lvbjsKQEAgLTMxLDggKzM1LDEwIEBACiBpbXBvcnQgamF2YXgubGFuZy5tb2RlbC5lbGVtZW50
LkFubm90YXRpb25NaXJyb3I7CiBpbXBvcnQgamF2YXgubGFuZy5tb2RlbC5lbGVtZW50LkFubm90
YXRpb25WYWx1ZTsKIGltcG9ydCBqYXZheC5sYW5nLm1vZGVsLmVsZW1lbnQuRWxlbWVudDsKK2lt
cG9ydCBqYXZheC5sYW5nLm1vZGVsLmVsZW1lbnQuRWxlbWVudEtpbmQ7CiBpbXBvcnQgamF2YXgu
bGFuZy5tb2RlbC5lbGVtZW50LkV4ZWN1dGFibGVFbGVtZW50OwogaW1wb3J0IGphdmF4Lmxhbmcu
bW9kZWwuZWxlbWVudC5Nb2RpZmllcjsKK2ltcG9ydCBqYXZheC5sYW5nLm1vZGVsLmVsZW1lbnQu
UGFja2FnZUVsZW1lbnQ7CiBpbXBvcnQgamF2YXgubGFuZy5tb2RlbC5lbGVtZW50LlR5cGVFbGVt
ZW50OwogaW1wb3J0IGphdmF4LmxhbmcubW9kZWwuZWxlbWVudC5UeXBlUGFyYW1ldGVyRWxlbWVu
dDsKIGltcG9ydCBqYXZheC5sYW5nLm1vZGVsLmVsZW1lbnQuVmFyaWFibGVFbGVtZW50OwpAQCAt
NjcsNyArNzMsNyBAQAogCSAgICAgICAgICAgICAgICAgICAgICAgIm9yZy5lY2xpcHNlLmpkdC5j
b21waWxlci5hcHQudGVzdHMuYW5ub3RhdGlvbnMuRm9vIiwgIm9yZy5lY2xpcHNlLmpkdC5jb21w
aWxlci5hcHQudGVzdHMuYW5ub3RhdGlvbnMuRm9vQ29udGFpbmVyIiwKIAkgICAgICAgICAgICAg
ICAgICAgICAgICJvcmcuZWNsaXBzZS5qZHQuY29tcGlsZXIuYXB0LnRlc3RzLmFubm90YXRpb25z
LklGb28iLCAib3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLmFwdC50ZXN0cy5hbm5vdGF0aW9ucy5J
Rm9vQ29udGFpbmVyIiwKIAkgICAgICAgICAgICAgICAgICAgICAgICJvcmcuZWNsaXBzZS5qZHQu
Y29tcGlsZXIuYXB0LnRlc3RzLmFubm90YXRpb25zLkdvbyIsICJvcmcuZWNsaXBzZS5qZHQuY29t
cGlsZXIuYXB0LnRlc3RzLmFubm90YXRpb25zLkdvb05vbkNvbnRhaW5lciIsCi0JICAgICAgICAg
ICAgICAgICAgICAgICAib3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLmFwdC50ZXN0cy5hbm5vdGF0
aW9ucy5Gb29Ob25Db250YWluZXIifSkKKwkgICAgICAgICAgICAgICAgICAgICAgICJvcmcuZWNs
aXBzZS5qZHQuY29tcGlsZXIuYXB0LnRlc3RzLmFubm90YXRpb25zLkZvb05vbkNvbnRhaW5lciIs
ICJ0YXJnZXRzLmZpbGVyOC5QYWNrYWdlQW5ub3QifSkKIAogQFN1cHBvcnRlZFNvdXJjZVZlcnNp
b24oU291cmNlVmVyc2lvbi5SRUxFQVNFXzgpCiBwdWJsaWMgY2xhc3MgSmF2YThFbGVtZW50UHJv
Y2Vzc29yIGV4dGVuZHMgQmFzZVByb2Nlc3NvciB7CkBAIC03NSw3ICs4MSwxMSBAQAogCQlwcml2
YXRlIHN0YXRpYyBmaW5hbCBTdHJpbmdbXSBFTEVNRU5UX05BTUVTID0gbmV3IFN0cmluZ1tdIHsi
dGFyZ2V0cy5tb2RlbDguWCIsICJUIiwgIlUiLCAiSyIsICJWIiwgIktLIiwgIlZWIiwgIktLSyIs
ICJWVlYifTsKIAkJcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nW10gVFlQRV9QQVJBTV9FTEVN
RU5UU19aMSA9IG5ldyBTdHJpbmdbXSB7IktLIiwgIlZWIn07CiAJCXByaXZhdGUgc3RhdGljIGZp
bmFsIFN0cmluZ1tdIFRZUEVfUEFSQU1fRUxFTUVOVFNfWjIgPSBuZXcgU3RyaW5nW10geyJLS0si
LCAiVlZWIn07Ci0JCisJCVN0cmluZyBzaW1wbGVOYW1lID0gImZpbGVyOCI7CisJCVN0cmluZyBw
YWNrYWdlTmFtZSA9ICJ0YXJnZXRzLmZpbGVyOCI7CisJCWludCByb3VuZE5vID0gMDsKKwkJYm9v
bGVhbiByZXBvcnRTdWNjZXNzQWxyZWFkeSA9IHRydWU7CisJCQogCVJvdW5kRW52aXJvbm1lbnQg
cm91bmRFbnYgPSBudWxsOwogCS8vIEFsd2F5cyByZXR1cm4gZmFsc2UgZnJvbSB0aGlzIHByb2Nl
c3NvciwgYmVjYXVzZSBpdCBzdXBwb3J0cyAiKiIuCiAJLy8gVGhlIHJldHVybiB2YWx1ZSBkb2Vz
IG5vdCBzaWduaWZ5IHN1Y2Nlc3Mgb3IgZmFpbHVyZSEKQEAgLTk2LDcgKzEwNiw5IEBACiAJCQkJ
aWYgKCFpbnZva2VUZXN0TWV0aG9kcyhvcHRpb25zKSkgewogCQkJCQl0ZXN0QWxsKCk7CiAJCQkJ
fQotCQkJCXN1cGVyLnJlcG9ydFN1Y2Nlc3MoKTsKKwkJCQlpZiAodGhpcy5yZXBvcnRTdWNjZXNz
QWxyZWFkeSkgeworCQkJCQlzdXBlci5yZXBvcnRTdWNjZXNzKCk7CisJCQkJfQogCQkJfSBjYXRj
aCAoQXNzZXJ0aW9uRmFpbGVkRXJyb3IgZSkgewogCQkJCXN1cGVyLnJlcG9ydEVycm9yKGdldEV4
Y2VwdGlvblN0YWNrVHJhY2UoZSkpOwogCQkJfSBjYXRjaCAoVGhyb3dhYmxlIGUpIHsKQEAgLTE1
OSw2ICsxNzEsNyBAQAogCQl0ZXN0UmVwZWF0ZWRBbm5vdGF0aW9uczI1KCk7CiAJCXRlc3RUeXBl
QW5ub3RhdGlvbnMyNigpOwogCQl0ZXN0VHlwZUFubm90YXRpb25zMjcoKTsKKwkJdGVzdFBhY2th
Z2VBbm5vdGF0aW9ucygpOwogCX0KIAkKIAlwdWJsaWMgdm9pZCB0ZXN0TGFtYmRhU3BlY2lmaWNz
KCkgewpAQCAtOTQ4LDYgKzk2MSw3MCBAQAogCQl9CiAJCQogCX0KKwlwdWJsaWMgYm9vbGVhbiB0
ZXN0UGFja2FnZUFubm90YXRpb25zKCkgeworCQlTeXN0ZW0ub3V0LnByaW50bG4oIkluc2lkZSBw
cm9jZXNzKCkiKTsKKwkJaWYgKCByb3VuZE5vKysgPT0gMCkgeworCQkJdGhpcy5yZXBvcnRTdWNj
ZXNzQWxyZWFkeSA9IGZhbHNlOworCQkJdHJ5IHsKKwkJCQljcmVhdGVQYWNrYWdlQmluYXJ5KCk7
CisJCQl9IGNhdGNoIChJT0V4Y2VwdGlvbiBlKSB7CisJCQkJZS5wcmludFN0YWNrVHJhY2UoKTsK
KwkJCX0KKwkJCVN5c3RlbS5zZXRQcm9wZXJ0eSh0aGlzLmdldENsYXNzKCkuZ2V0TmFtZSgpLCAi
UHJvY2Vzc29yIGRpZCBub3QgZnVsbHkgZG8gdGhlIGpvYiIpOworCQkJcmV0dXJuIGZhbHNlOwor
CQl9IGVsc2UgeworCQkJdGhpcy5yZXBvcnRTdWNjZXNzQWxyZWFkeSA9IHRydWU7CisJCQlQYWNr
YWdlRWxlbWVudCBwYWNrYWdlRWwgPSBudWxsOworCQkJZm9yIChFbGVtZW50IGVsZW1lbnQgOiBy
b3VuZEVudi5nZXRSb290RWxlbWVudHMoKSkgeworCQkJCWlmIChlbGVtZW50LmdldEtpbmQoKSA9
PSBFbGVtZW50S2luZC5QQUNLQUdFKSB7CisJCQkJCXBhY2thZ2VFbCA9IChQYWNrYWdlRWxlbWVu
dCkgZWxlbWVudDsKKwkJCQl9CisJCQl9CisJCQlhc3NlcnROb3ROdWxsKCJQYWNrYWdlIGVsZW1l
bnQgc2hvdWxkIG5vdCBiZSBudWxsIiwgcGFja2FnZUVsKTsKKwkJCWFzc2VydEVxdWFscygiSW5j
b3JyZWN0IHBhY2thZ2UgbmFtZSIsIHNpbXBsZU5hbWUsIHBhY2thZ2VFbC5nZXRTaW1wbGVOYW1l
KCkudG9TdHJpbmcoKSk7CisJCQlhc3NlcnRFcXVhbHMoIkluY29ycmVjdCBwYWNrYWdlIG5hbWUi
LCBwYWNrYWdlTmFtZSwgcGFja2FnZUVsLmdldFF1YWxpZmllZE5hbWUoKS50b1N0cmluZygpKTsK
KwkJCWFzc2VydEZhbHNlKCJQYWNrYWdlIHNob3VsZCBub3QgYmUgdW5uYW1lZCIsIHBhY2thZ2VF
bC5pc1VubmFtZWQoKSk7IAorCQkJcmV0dXJuIGZhbHNlOworCQl9CisJfQorCXByaXZhdGUgdm9p
ZCBjcmVhdGVQYWNrYWdlQmluYXJ5KCkgdGhyb3dzIElPRXhjZXB0aW9uIHsKKwkJU3RyaW5nIHBh
dGggPSBwYWNrYWdlTmFtZS5yZXBsYWNlKCcuJywgJy8nKTsKKwkJQ2xhc3NMb2FkZXIgbG9hZGVy
ID0gZ2V0Q2xhc3MoKS5nZXRDbGFzc0xvYWRlcigpOworCQlJbnB1dFN0cmVhbSBpbiA9IGxvYWRl
ci5nZXRSZXNvdXJjZUFzU3RyZWFtKHBhdGggKyAiL3BhY2thZ2UtaW5mby5jbGFzcyIpOworCQl0
cnkgeworCQkJRmlsZXIgZmlsZXIgPSBwcm9jZXNzaW5nRW52LmdldEZpbGVyKCk7CisJCQlPdXRw
dXRTdHJlYW0gb3V0ID0gZmlsZXIuY3JlYXRlQ2xhc3NGaWxlKHBhY2thZ2VOYW1lICsgIi5wYWNr
YWdlLWluZm8iKS5vcGVuT3V0cHV0U3RyZWFtKCk7CisJCQl0cnkgeworCQkJCWlmIChpbiAhPSBu
dWxsICYmIG91dCAhPSBudWxsKSB7CisJCQkJCWludCBjID0gaW4ucmVhZCgpOworCQkJCQl3aGls
ZSAoYyAhPSAtMSkgeworCQkJCQkJb3V0LndyaXRlKGMpOworCQkJCQkJYyA9IGluLnJlYWQoKTsK
KwkJCQkJfQorCQkJCX0KKwkJCX0gZmluYWxseSB7CisJCQkJb3V0LmNsb3NlKCk7CisJCQl9CisJ
CX0gZmluYWxseSB7CisJCQlpbi5jbG9zZSgpOworCQl9CisJfQorCisvLwlwdWJsaWMgdm9pZCB0
ZXN0UGFja2FnZUFubm90YXRpb25zKCkgeworLy8JCVN0cmluZyBwYWNrYWdlTmFtZSA9ICJ0YXJn
ZXRzLm1vZGVsOCI7CisvLwkJUGFja2FnZUVsZW1lbnQgcGFja2FnZUVsID0gX2VsZW1lbnRVdGls
cy5nZXRQYWNrYWdlRWxlbWVudChwYWNrYWdlTmFtZSk7CisvLwkJZm9yKEVsZW1lbnQgZTogcm91
bmRFbnYuZ2V0Um9vdEVsZW1lbnRzKCkpIHsKKy8vCQkJU3lzdGVtLm91dC5wcmludGxuKGUudG9T
dHJpbmcoKSk7CisvLwkJCWlmIChlLmdldEtpbmQoKSA9PSBFbGVtZW50S2luZC5QQUNLQUdFKSB7
CisvLwkJCQlwYWNrYWdlRWwgPSAoUGFja2FnZUVsZW1lbnQpIGU7CisvLwkJCQlicmVhazsKKy8v
CQkJfQorLy8JCX0KKy8vCQlhc3NlcnROb3ROdWxsKCJQYWNrYWdlIGVsZW1lbnQgc2hvdWxkIG5v
dCBiZSBudWxsIiwgcGFja2FnZUVsKTsKKy8vCQlhc3NlcnRFcXVhbHMoIkluY29ycmVjdCBlbGVt
ZW50IGtpbmQiLCBFbGVtZW50S2luZC5QQUNLQUdFLCBwYWNrYWdlRWwuZ2V0S2luZCgpKTsKKy8v
CQlhc3NlcnRFcXVhbHMoIkluY29ycmVjdCBwYWNrYWdlIG5hbWUiLCBwYWNrYWdlTmFtZSwgcGFj
a2FnZUVsLmdldFF1YWxpZmllZE5hbWUoKS50b1N0cmluZygpKTsKKy8vCQl2ZXJpZnlBbm5vdGF0
aW9ucyhwYWNrYWdlRWwsIG5ldyBTdHJpbmdbXXsiQFBhY2thZ2VBbm5vdCgpIn0pOworLy8JfQog
CQogCQogCXByaXZhdGUgU3RyaW5nIGdldEV4Y2VwdGlvblN0YWNrVHJhY2UoVGhyb3dhYmxlIHQp
IHsKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb21waWxlci5hcHQudGVzdHMvcHJvY2Vz
c29ycy9vcmcvZWNsaXBzZS9qZHQvY29tcGlsZXIvYXB0L3Rlc3RzL3Byb2Nlc3NvcnMvZmlsZXIv
SmF2YThGaWxlclByb2Nlc3Nvci5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLmFwdC50
ZXN0cy9wcm9jZXNzb3JzL29yZy9lY2xpcHNlL2pkdC9jb21waWxlci9hcHQvdGVzdHMvcHJvY2Vz
c29ycy9maWxlci9KYXZhOEZpbGVyUHJvY2Vzc29yLmphdmEKbmV3IGZpbGUgbW9kZSAxMDA2NDQK
aW5kZXggMDAwMDAwMC4uZmZiMjc2MwotLS0gL2Rldi9udWxsCisrKyBiL29yZy5lY2xpcHNlLmpk
dC5jb21waWxlci5hcHQudGVzdHMvcHJvY2Vzc29ycy9vcmcvZWNsaXBzZS9qZHQvY29tcGlsZXIv
YXB0L3Rlc3RzL3Byb2Nlc3NvcnMvZmlsZXIvSmF2YThGaWxlclByb2Nlc3Nvci5qYXZhCkBAIC0w
LDAgKzEsMTI1IEBACisvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgorICogQ29weXJpZ2h0IChjKSAy
MDE0IElCTSBDb3Jwb3JhdGlvbi4KKyAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3Jh
bSBhbmQgdGhlIGFjY29tcGFueWluZyBtYXRlcmlhbHMKKyAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1
bmRlciB0aGUgdGVybXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMAorICogd2hp
Y2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFpbGFibGUgYXQKKyAq
IGh0dHA6Ly93d3cuZWNsaXBzZS5vcmcvbGVnYWwvZXBsLXYxMC5odG1sCisgKiAKKyAqIFRoaXMg
aXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQgc3BlY2lmaWNhdGlvbiBkZXZl
bG9wZWQgdW5kZXIgdGhlIEphdmEKKyAqIENvbW11bml0eSBQcm9jZXNzIChKQ1ApIGFuZCBpcyBt
YWRlIGF2YWlsYWJsZSBmb3IgdGVzdGluZyBhbmQgZXZhbHVhdGlvbiBwdXJwb3NlcworICogb25s
eS4gVGhlIGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkgc3BlY2lmaWNhdGlvbiBvZiB0
aGUgSkNQLgorICogCisgKiBDb250cmlidXRvcnM6CisgKiAgICAgSUJNIENvcnBvcmF0aW9uIC0g
aW5pdGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uCisgKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8K
KworcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuY29tcGlsZXIuYXB0LnRlc3RzLnByb2Nlc3NvcnMu
ZmlsZXI7CisKK2ltcG9ydCBqYXZhLmlvLklPRXhjZXB0aW9uOworaW1wb3J0IGphdmEuaW8uSW5w
dXRTdHJlYW07CitpbXBvcnQgamF2YS5pby5PdXRwdXRTdHJlYW07CitpbXBvcnQgamF2YS51dGls
LlNldDsKKworaW1wb3J0IGphdmF4LmFubm90YXRpb24ucHJvY2Vzc2luZy5GaWxlcjsKK2ltcG9y
dCBqYXZheC5hbm5vdGF0aW9uLnByb2Nlc3NpbmcuUHJvY2Vzc2luZ0Vudmlyb25tZW50OworaW1w
b3J0IGphdmF4LmFubm90YXRpb24ucHJvY2Vzc2luZy5Sb3VuZEVudmlyb25tZW50OworaW1wb3J0
IGphdmF4LmFubm90YXRpb24ucHJvY2Vzc2luZy5TdXBwb3J0ZWRBbm5vdGF0aW9uVHlwZXM7Citp
bXBvcnQgamF2YXguYW5ub3RhdGlvbi5wcm9jZXNzaW5nLlN1cHBvcnRlZE9wdGlvbnM7CitpbXBv
cnQgamF2YXguYW5ub3RhdGlvbi5wcm9jZXNzaW5nLlN1cHBvcnRlZFNvdXJjZVZlcnNpb247Citp
bXBvcnQgamF2YXgubGFuZy5tb2RlbC5Tb3VyY2VWZXJzaW9uOworaW1wb3J0IGphdmF4Lmxhbmcu
bW9kZWwuZWxlbWVudC5FbGVtZW50OworaW1wb3J0IGphdmF4LmxhbmcubW9kZWwuZWxlbWVudC5F
bGVtZW50S2luZDsKK2ltcG9ydCBqYXZheC5sYW5nLm1vZGVsLmVsZW1lbnQuUGFja2FnZUVsZW1l
bnQ7CitpbXBvcnQgamF2YXgubGFuZy5tb2RlbC5lbGVtZW50LlR5cGVFbGVtZW50OworCitpbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLmFwdC50ZXN0cy5wcm9jZXNzb3JzLmJhc2UuQmFz
ZVByb2Nlc3NvcjsKKworLyoqCisgKiBBIHByb2Nlc3NvciB0aGF0IHJlYWRzIHRoZSBHZW5SZXNv
dXJjZSBhbm5vdGF0aW9uIGFuZCBwcm9kdWNlcyB0aGUgc3BlY2lmaWVkIEphdmEgdHlwZQorICov
CitAU3VwcG9ydGVkQW5ub3RhdGlvblR5cGVzKHsidGFyZ2V0cy5maWxlcjguUGFja2FnZUFubm90
In0pCitAU3VwcG9ydGVkU291cmNlVmVyc2lvbihTb3VyY2VWZXJzaW9uLlJFTEVBU0VfOCkKK0BT
dXBwb3J0ZWRPcHRpb25zKHt9KQorcHVibGljIGNsYXNzIEphdmE4RmlsZXJQcm9jZXNzb3IgZXh0
ZW5kcyBCYXNlUHJvY2Vzc29yIHsKKwkKKwlTdHJpbmcgc2ltcGxlTmFtZSA9ICJmaWxlcjgiOwor
CVN0cmluZyBwYWNrYWdlTmFtZSA9ICJ0YXJnZXRzLmZpbGVyOCI7CisJaW50IHJvdW5kTm8gPSAw
OworCWJvb2xlYW4gcmVwb3J0U3VjY2Vzc0FscmVhZHkgPSB0cnVlOworCQorCS8qIChub24tSmF2
YWRvYykKKwkgKiBAc2VlIGphdmF4LmFubm90YXRpb24ucHJvY2Vzc2luZy5BYnN0cmFjdFByb2Nl
c3NvciNpbml0KGphdmF4LmFubm90YXRpb24ucHJvY2Vzc2luZy5Qcm9jZXNzaW5nRW52aXJvbm1l
bnQpCisJICovCisJQE92ZXJyaWRlCisJcHVibGljIHN5bmNocm9uaXplZCB2b2lkIGluaXQoUHJv
Y2Vzc2luZ0Vudmlyb25tZW50IHByb2Nlc3NpbmdFbnYpIHsKKwkJc3VwZXIuaW5pdChwcm9jZXNz
aW5nRW52KTsKKwl9CisKKwkvKiAobm9uLUphdmFkb2MpCisJICogQHNlZSBqYXZheC5hbm5vdGF0
aW9uLnByb2Nlc3NpbmcuQWJzdHJhY3RQcm9jZXNzb3IjcHJvY2VzcyhqYXZhLnV0aWwuU2V0LCBq
YXZheC5hbm5vdGF0aW9uLnByb2Nlc3NpbmcuUm91bmRFbnZpcm9ubWVudCkKKwkgKi8KKwlAT3Zl
cnJpZGUKKwlwdWJsaWMgYm9vbGVhbiBwcm9jZXNzKFNldDw/IGV4dGVuZHMgVHlwZUVsZW1lbnQ+
IGFubm90YXRpb25zLCBSb3VuZEVudmlyb25tZW50IHJvdW5kRW52KSB7CisJCVN0cmluZyBwYWNr
YWdlTmFtZSA9ICJ0YXJnZXRzLmZpbGVyOCI7CisJCVN5c3RlbS5vdXQucHJpbnRsbigiSW5zaWRl
IHByb2Nlc3MoKSIpOworCQl0aGlzLnJlcG9ydFN1Y2Nlc3NBbHJlYWR5ID0gdHJ1ZTsKKwkJaWYg
KCsrcm91bmRObyA9PSAxKSB7CisJCQl0aGlzLnJlcG9ydFN1Y2Nlc3NBbHJlYWR5ID0gZmFsc2U7
CisJCQl0cnkgeworCQkJCWNyZWF0ZVBhY2thZ2VCaW5hcnkoKTsKKwkJCX0gY2F0Y2ggKElPRXhj
ZXB0aW9uIGUpIHsKKwkJCQllLnByaW50U3RhY2tUcmFjZSgpOworCQkJfQorCQkJU3lzdGVtLnNl
dFByb3BlcnR5KHRoaXMuZ2V0Q2xhc3MoKS5nZXROYW1lKCksICJQcm9jZXNzb3IgZGlkIG5vdCBm
dWxseSBkbyB0aGUgam9iIik7CisJCX0gZWxzZSBpZiAocm91bmRObyA9PSAyKXsKKwkJCVBhY2th
Z2VFbGVtZW50IHBhY2thZ2VFbCA9IG51bGw7CisJCQlmb3IgKEVsZW1lbnQgZSA6IHJvdW5kRW52
LmdldFJvb3RFbGVtZW50cygpKSB7CisJCQkJaWYgKGUuZ2V0S2luZCgpID09IEVsZW1lbnRLaW5k
LlBBQ0tBR0UpIHsKKwkJCQkJcGFja2FnZUVsID0gKFBhY2thZ2VFbGVtZW50KSBlOworCQkJCX0K
KwkJCX0KKwkJCWlmIChwYWNrYWdlRWwgPT0gbnVsbCkgeworCQkJCXJlcG9ydEVycm9yKCJQYWNr
YWdlIEVsZW1lbnQgbm90IGZvdW5kIik7CisJCQkJcmV0dXJuIGZhbHNlOworCQkJfQorCQkJaWYg
KCFwYWNrYWdlTmFtZS5lcXVhbHMocGFja2FnZUVsLmdldFF1YWxpZmllZE5hbWUoKS50b1N0cmlu
ZygpKSkgeworCQkJCXJlcG9ydEVycm9yKCJQYWNrYWdlIEVsZW1lbnQgXCJ0YXJnZXRzLmZpbGVy
OFwiIG5vdCBmb3VuZCIpOworCQkJCXJldHVybiBmYWxzZTsKKwkJCX0KKwkJCWlmIChwYWNrYWdl
RWwuaXNVbm5hbWVkKCkpIHsKKwkJCQlyZXBvcnRFcnJvcigiUGFja2FnZSBpbmZvIG5vdCBmb3Vu
ZCIpOworCQkJCXJldHVybiBmYWxzZTsKKwkJCX0KKwkJCWlmIChwYWNrYWdlRWwuZ2V0QW5ub3Rh
dGlvbk1pcnJvcnMoKS5pc0VtcHR5KCkpIHsKKwkJCQlyZXBvcnRFcnJvcigiQW5ub3RhdG9ucyBu
b3QgZm91bmQgaW4gcGFja2FnZS1pbmZvIik7CisJCQkJcmV0dXJuIGZhbHNlOworCQkJfQorCQl9
CisJCWlmICh0aGlzLnJlcG9ydFN1Y2Nlc3NBbHJlYWR5KSB7CisJCQlzdXBlci5yZXBvcnRTdWNj
ZXNzKCk7CisJCX0KKwkJcmV0dXJuIGZhbHNlOworCX0KKwlwcml2YXRlIHZvaWQgY3JlYXRlUGFj
a2FnZUJpbmFyeSgpIHRocm93cyBJT0V4Y2VwdGlvbiB7CisJCVN0cmluZyBwYXRoID0gcGFja2Fn
ZU5hbWUucmVwbGFjZSgnLicsICcvJyk7CisJCUNsYXNzTG9hZGVyIGxvYWRlciA9IGdldENsYXNz
KCkuZ2V0Q2xhc3NMb2FkZXIoKTsKKwkJSW5wdXRTdHJlYW0gaW4gPSBsb2FkZXIuZ2V0UmVzb3Vy
Y2VBc1N0cmVhbShwYXRoICsgIi9wYWNrYWdlLWluZm8uY2xhc3MiKTsKKwkJdHJ5IHsKKwkJCUZp
bGVyIGZpbGVyID0gcHJvY2Vzc2luZ0Vudi5nZXRGaWxlcigpOworCQkJT3V0cHV0U3RyZWFtIG91
dCA9IGZpbGVyLmNyZWF0ZUNsYXNzRmlsZShwYWNrYWdlTmFtZSArICIucGFja2FnZS1pbmZvIiku
b3Blbk91dHB1dFN0cmVhbSgpOworCQkJdHJ5IHsKKwkJCQlpZiAoaW4gIT0gbnVsbCAmJiBvdXQg
IT0gbnVsbCkgeworCQkJCQlpbnQgYyA9IGluLnJlYWQoKTsKKwkJCQkJd2hpbGUgKGMgIT0gLTEp
IHsKKwkJCQkJCW91dC53cml0ZShjKTsKKwkJCQkJCWMgPSBpbi5yZWFkKCk7CisJCQkJCX0KKwkJ
CQl9CisJCQl9IGZpbmFsbHkgeworCQkJCW91dC5jbG9zZSgpOworCQkJfQorCQl9IGZpbmFsbHkg
eworCQkJaW4uY2xvc2UoKTsKKwkJfQorCX0KK30KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpk
dC5jb21waWxlci5hcHQudGVzdHMvcHJvY2Vzc29ycy90YXJnZXRzL2ZpbGVyOC9wYWNrYWdlLWlu
Zm8uamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb21waWxlci5hcHQudGVzdHMvcHJvY2Vzc29ycy90
YXJnZXRzL2ZpbGVyOC9wYWNrYWdlLWluZm8uamF2YQpuZXcgZmlsZSBtb2RlIDEwMDY0NAppbmRl
eCAwMDAwMDAwLi5iZjM5ODhiCi0tLSAvZGV2L251bGwKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
bXBpbGVyLmFwdC50ZXN0cy9wcm9jZXNzb3JzL3RhcmdldHMvZmlsZXI4L3BhY2thZ2UtaW5mby5q
YXZhCkBAIC0wLDAgKzEsMTggQEAKKy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqDQorICogQ29weXJp
Z2h0IChjKSAyMDE0IElCTSBDb3Jwb3JhdGlvbi4NCisgKiBBbGwgcmlnaHRzIHJlc2VydmVkLiBU
aGlzIHByb2dyYW0gYW5kIHRoZSBhY2NvbXBhbnlpbmcgbWF0ZXJpYWxzDQorICogYXJlIG1hZGUg
YXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2
MS4wDQorICogd2hpY2ggYWNjb21wYW5pZXMgdGhpcyBkaXN0cmlidXRpb24sIGFuZCBpcyBhdmFp
bGFibGUgYXQNCisgKiBodHRwOi8vd3d3LmVjbGlwc2Uub3JnL2xlZ2FsL2VwbC12MTAuaHRtbA0K
KyAqIA0KKyAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYW4gZWFybHktZHJhZnQgc3Bl
Y2lmaWNhdGlvbiBkZXZlbG9wZWQgdW5kZXIgdGhlIEphdmENCisgKiBDb21tdW5pdHkgUHJvY2Vz
cyAoSkNQKSBhbmQgaXMgbWFkZSBhdmFpbGFibGUgZm9yIHRlc3RpbmcgYW5kIGV2YWx1YXRpb24g
cHVycG9zZXMNCisgKiBvbmx5LiBUaGUgY29kZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGFueSBz
cGVjaWZpY2F0aW9uIG9mIHRoZSBKQ1AuDQorICogDQorICogQ29udHJpYnV0b3JzOg0KKyAqICAg
ICBJQk0gQ29ycG9yYXRpb24gLSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24NCisgKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKi8NCisNCitAUGFja2FnZUFubm90IHBhY2thZ2UgdGFyZ2V0cy5m
aWxlcjg7DQorDQorQGludGVyZmFjZSBQYWNrYWdlQW5ub3Qge30KXCBObyBuZXdsaW5lIGF0IGVu
ZCBvZiBmaWxlCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29tcGlsZXIuYXB0LnRlc3Rz
L3Jlc291cmNlcy90YXJnZXRzL2ZpbGVyOC9wYWNrYWdlLWluZm8uamF2YSBiL29yZy5lY2xpcHNl
LmpkdC5jb21waWxlci5hcHQudGVzdHMvcmVzb3VyY2VzL3RhcmdldHMvZmlsZXI4L3BhY2thZ2Ut
aW5mby5qYXZhCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAuLmJmMzk4OGIKLS0t
IC9kZXYvbnVsbAorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29tcGlsZXIuYXB0LnRlc3RzL3Jlc291
cmNlcy90YXJnZXRzL2ZpbGVyOC9wYWNrYWdlLWluZm8uamF2YQpAQCAtMCwwICsxLDE4IEBACisv
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKg0KKyAqIENvcHlyaWdodCAoYykgMjAxNCBJQk0gQ29ycG9y
YXRpb24uDQorICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNj
b21wYW55aW5nIG1hdGVyaWFscw0KKyAqIGFyZSBtYWRlIGF2YWlsYWJsZSB1bmRlciB0aGUgdGVy
bXMgb2YgdGhlIEVjbGlwc2UgUHVibGljIExpY2Vuc2UgdjEuMA0KKyAqIHdoaWNoIGFjY29tcGFu
aWVzIHRoaXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0DQorICogaHR0cDovL3d3
dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwNCisgKiANCisgKiBUaGlzIGlzIGFuIGlt
cGxlbWVudGF0aW9uIG9mIGFuIGVhcmx5LWRyYWZ0IHNwZWNpZmljYXRpb24gZGV2ZWxvcGVkIHVu
ZGVyIHRoZSBKYXZhDQorICogQ29tbXVuaXR5IFByb2Nlc3MgKEpDUCkgYW5kIGlzIG1hZGUgYXZh
aWxhYmxlIGZvciB0ZXN0aW5nIGFuZCBldmFsdWF0aW9uIHB1cnBvc2VzDQorICogb25seS4gVGhl
IGNvZGUgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBhbnkgc3BlY2lmaWNhdGlvbiBvZiB0aGUgSkNQ
Lg0KKyAqIA0KKyAqIENvbnRyaWJ1dG9yczoNCisgKiAgICAgSUJNIENvcnBvcmF0aW9uIC0gaW5p
dGlhbCBBUEkgYW5kIGltcGxlbWVudGF0aW9uDQorICoqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovDQor
DQorQFBhY2thZ2VBbm5vdCBwYWNrYWdlIHRhcmdldHMuZmlsZXI4Ow0KKw0KK0BpbnRlcmZhY2Ug
UGFja2FnZUFubm90IHt9ClwgTm8gbmV3bGluZSBhdCBlbmQgb2YgZmlsZQpkaWZmIC0tZ2l0IGEv
b3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLmFwdC50ZXN0cy9zcmMvb3JnL2VjbGlwc2UvamR0L2Nv
bXBpbGVyL2FwdC90ZXN0cy9KYXZhOEVsZW1lbnRzVGVzdHMuamF2YSBiL29yZy5lY2xpcHNlLmpk
dC5jb21waWxlci5hcHQudGVzdHMvc3JjL29yZy9lY2xpcHNlL2pkdC9jb21waWxlci9hcHQvdGVz
dHMvSmF2YThFbGVtZW50c1Rlc3RzLmphdmEKaW5kZXggYzZkOWIxYi4uMzZmNGY3YiAxMDA2NDQK
LS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLmFwdC50ZXN0cy9zcmMvb3JnL2VjbGlwc2Uv
amR0L2NvbXBpbGVyL2FwdC90ZXN0cy9KYXZhOEVsZW1lbnRzVGVzdHMuamF2YQorKysgYi9vcmcu
ZWNsaXBzZS5qZHQuY29tcGlsZXIuYXB0LnRlc3RzL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29tcGls
ZXIvYXB0L3Rlc3RzL0phdmE4RWxlbWVudHNUZXN0cy5qYXZhCkBAIC00NCwyNTggKzQ0LDI2NiBA
QAogCQlCYXRjaFRlc3RVdGlscy5pbml0KCk7CiAJfQogCi0JcHVibGljIHZvaWQgdGVzdFNFOFNw
ZWNpZmljcygpIHRocm93cyBFeGNlcHRpb24geworLy8JcHVibGljIHZvaWQgdGVzdFNFOFNwZWNp
ZmljcygpIHRocm93cyBFeGNlcHRpb24geworLy8JCUphdmFDb21waWxlciBjb21waWxlciA9IEJh
dGNoVGVzdFV0aWxzLmdldEVjbGlwc2VDb21waWxlcigpOworLy8JCWludGVybmFsVGVzdChjb21w
aWxlciwgSkFWQThfQU5OT1RBVElPTl9QUk9DLCAidGVzdFNFOFNwZWNpZmljcyIpOworLy8JfQor
Ly8JcHVibGljIHZvaWQgX3Rlc3RTRThTcGVjaWZpY3NXaXRoSmF2YWMoKSB0aHJvd3MgRXhjZXB0
aW9uIHsKKy8vCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBUb29sUHJvdmlkZXIuZ2V0U3lzdGVt
SmF2YUNvbXBpbGVyKCk7CisvLwkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBKQVZBOF9BTk5PVEFU
SU9OX1BST0MsICJ0ZXN0U0U4U3BlY2lmaWNzIik7CisvLwl9CisvLwlwdWJsaWMgdm9pZCB0ZXN0
TGFtYmRhU3BlY2lmaWNzKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisvLwkJSmF2YUNvbXBpbGVyIGNv
bXBpbGVyID0gQmF0Y2hUZXN0VXRpbHMuZ2V0RWNsaXBzZUNvbXBpbGVyKCk7CisvLwkJaW50ZXJu
YWxUZXN0KGNvbXBpbGVyLCBKQVZBOF9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0TGFtYmRhU3BlY2lm
aWNzIik7CisvLwl9CisvLwlwdWJsaWMgdm9pZCB0ZXN0TGFtYmRhU3BlY2lmaWNzV2l0aEphdmFj
KCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisvLwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gVG9vbFBy
b3ZpZGVyLmdldFN5c3RlbUphdmFDb21waWxlcigpOworLy8JCWludGVybmFsVGVzdChjb21waWxl
ciwgSkFWQThfQU5OT1RBVElPTl9QUk9DLCAidGVzdExhbWJkYVNwZWNpZmljcyIpOworLy8JfQor
Ly8JcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9ucygpIHRocm93cyBFeGNlcHRpb24gewor
Ly8JCUphdmFDb21waWxlciBjb21waWxlciA9IEJhdGNoVGVzdFV0aWxzLmdldEVjbGlwc2VDb21w
aWxlcigpOworLy8JCWludGVybmFsVGVzdChjb21waWxlciwgSkFWQThfQU5OT1RBVElPTl9QUk9D
LCAidGVzdFR5cGVBbm5vdGF0aW9ucyIpOworLy8JfQorLy8JcHVibGljIHZvaWQgX3Rlc3RUeXBl
QW5ub3RhdGlvbnNXaXRoSmF2YWMoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKy8vCQlKYXZhQ29tcGls
ZXIgY29tcGlsZXIgPSBUb29sUHJvdmlkZXIuZ2V0U3lzdGVtSmF2YUNvbXBpbGVyKCk7CisvLwkJ
aW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBKQVZBOF9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0VHlwZUFu
bm90YXRpb25zIik7CisvLwl9CisvLwlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90YXRpb25zMSgp
IHRocm93cyBFeGNlcHRpb24geworLy8JCUphdmFDb21waWxlciBjb21waWxlciA9IEJhdGNoVGVz
dFV0aWxzLmdldEVjbGlwc2VDb21waWxlcigpOworLy8JCWludGVybmFsVGVzdChjb21waWxlciwg
SkFWQThfQU5OT1RBVElPTl9QUk9DLCAidGVzdFR5cGVBbm5vdGF0aW9uczEiKTsKKy8vCX0KKy8v
CXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnMxV2l0aEphdmFjKCkgdGhyb3dzIEV4Y2Vw
dGlvbiB7CisvLwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gVG9vbFByb3ZpZGVyLmdldFN5c3Rl
bUphdmFDb21waWxlcigpOworLy8JCWludGVybmFsVGVzdChjb21waWxlciwgSkFWQThfQU5OT1RB
VElPTl9QUk9DLCAidGVzdFR5cGVBbm5vdGF0aW9uczEiKTsKKy8vCX0KKy8vCXB1YmxpYyB2b2lk
IHRlc3RUeXBlQW5ub3RhdGlvbnMyKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisvLwkJSmF2YUNvbXBp
bGVyIGNvbXBpbGVyID0gQmF0Y2hUZXN0VXRpbHMuZ2V0RWNsaXBzZUNvbXBpbGVyKCk7CisvLwkJ
aW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBKQVZBOF9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0VHlwZUFu
bm90YXRpb25zMiIpOworLy8JfQorLy8JcHVibGljIHZvaWQgX3Rlc3RUeXBlQW5ub3RhdGlvbnMy
V2l0aEphdmFjKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisvLwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVy
ID0gVG9vbFByb3ZpZGVyLmdldFN5c3RlbUphdmFDb21waWxlcigpOworLy8JCWludGVybmFsVGVz
dChjb21waWxlciwgSkFWQThfQU5OT1RBVElPTl9QUk9DLCAidGVzdFR5cGVBbm5vdGF0aW9uczIi
KTsKKy8vCX0KKy8vCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnMzKCkgdGhyb3dzIEV4
Y2VwdGlvbiB7CisvLwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gQmF0Y2hUZXN0VXRpbHMuZ2V0
RWNsaXBzZUNvbXBpbGVyKCk7CisvLwkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBKQVZBOF9BTk5P
VEFUSU9OX1BST0MsICJ0ZXN0VHlwZUFubm90YXRpb25zMyIpOworLy8JfQorLy8JcHVibGljIHZv
aWQgX3Rlc3RUeXBlQW5ub3RhdGlvbnMzV2l0aEphdmFjKCkgdGhyb3dzIEV4Y2VwdGlvbiB7Cisv
LwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gVG9vbFByb3ZpZGVyLmdldFN5c3RlbUphdmFDb21w
aWxlcigpOworLy8JCWludGVybmFsVGVzdChjb21waWxlciwgSkFWQThfQU5OT1RBVElPTl9QUk9D
LCAidGVzdFR5cGVBbm5vdGF0aW9uczMiKTsKKy8vCX0KKy8vCXB1YmxpYyB2b2lkIHRlc3RUeXBl
QW5ub3RhdGlvbnM0KCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisvLwkJSmF2YUNvbXBpbGVyIGNvbXBp
bGVyID0gQmF0Y2hUZXN0VXRpbHMuZ2V0RWNsaXBzZUNvbXBpbGVyKCk7CisvLwkJaW50ZXJuYWxU
ZXN0KGNvbXBpbGVyLCBKQVZBOF9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0VHlwZUFubm90YXRpb25z
NCIpOworLy8JfQorLy8JcHVibGljIHZvaWQgX3Rlc3RUeXBlQW5ub3RhdGlvbnM0V2l0aEphdmFj
KCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisvLwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gVG9vbFBy
b3ZpZGVyLmdldFN5c3RlbUphdmFDb21waWxlcigpOworLy8JCWludGVybmFsVGVzdChjb21waWxl
ciwgSkFWQThfQU5OT1RBVElPTl9QUk9DLCAidGVzdFR5cGVBbm5vdGF0aW9uczQiKTsKKy8vCX0K
Ky8vCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnM1KCkgdGhyb3dzIEV4Y2VwdGlvbiB7
CisvLwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gQmF0Y2hUZXN0VXRpbHMuZ2V0RWNsaXBzZUNv
bXBpbGVyKCk7CisvLwkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBKQVZBOF9BTk5PVEFUSU9OX1BS
T0MsICJ0ZXN0VHlwZUFubm90YXRpb25zNSIpOworLy8JfQorLy8JcHVibGljIHZvaWQgX3Rlc3RU
eXBlQW5ub3RhdGlvbnM1V2l0aEphdmFjKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisvLwkJSmF2YUNv
bXBpbGVyIGNvbXBpbGVyID0gVG9vbFByb3ZpZGVyLmdldFN5c3RlbUphdmFDb21waWxlcigpOwor
Ly8JCWludGVybmFsVGVzdChjb21waWxlciwgSkFWQThfQU5OT1RBVElPTl9QUk9DLCAidGVzdFR5
cGVBbm5vdGF0aW9uczUiKTsKKy8vCX0KKy8vCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlv
bnM2KCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisvLwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gQmF0
Y2hUZXN0VXRpbHMuZ2V0RWNsaXBzZUNvbXBpbGVyKCk7CisvLwkJaW50ZXJuYWxUZXN0KGNvbXBp
bGVyLCBKQVZBOF9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0VHlwZUFubm90YXRpb25zNiIpOworLy8J
fQorLy8JcHVibGljIHZvaWQgX3Rlc3RUeXBlQW5ub3RhdGlvbnM2V2l0aEphdmFjKCkgdGhyb3dz
IEV4Y2VwdGlvbiB7ICAgLy8gRGlzYWJsZWQgZm9yIG5vdy4gSmF2YWMgOGIxMDggZHJvcHMgYW5u
b3RhdGlvbnMgYXJyYXlzIHByZWNlZGluZyB2YXJhcmdzLgorLy8JCUphdmFDb21waWxlciBjb21w
aWxlciA9IFRvb2xQcm92aWRlci5nZXRTeXN0ZW1KYXZhQ29tcGlsZXIoKTsKKy8vCQlpbnRlcm5h
bFRlc3QoY29tcGlsZXIsIEpBVkE4X0FOTk9UQVRJT05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlv
bnM2Iik7CisvLwl9CisvLwlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90YXRpb25zNygpIHRocm93
cyBFeGNlcHRpb24geworLy8JCUphdmFDb21waWxlciBjb21waWxlciA9IEJhdGNoVGVzdFV0aWxz
LmdldEVjbGlwc2VDb21waWxlcigpOworLy8JCWludGVybmFsVGVzdChjb21waWxlciwgSkFWQThf
QU5OT1RBVElPTl9QUk9DLCAidGVzdFR5cGVBbm5vdGF0aW9uczciKTsKKy8vCX0KKy8vCXB1Ymxp
YyB2b2lkIF90ZXN0VHlwZUFubm90YXRpb25zN1dpdGhKYXZhYygpIHRocm93cyBFeGNlcHRpb24g
eyAgLy8gRGlzYWJsZWQgZm9yIG5vdy4gSmF2YWMgOGIxMDggbWlzYXR0cmlidXRlcyBhbm5vdGF0
aW9ucyBvbiB0eXBlIHBhcmFtZXRlcnMgCisvLwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gVG9v
bFByb3ZpZGVyLmdldFN5c3RlbUphdmFDb21waWxlcigpOworLy8JCWludGVybmFsVGVzdChjb21w
aWxlciwgSkFWQThfQU5OT1RBVElPTl9QUk9DLCAidGVzdFR5cGVBbm5vdGF0aW9uczciKTsKKy8v
CX0KKy8vCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnM4KCkgdGhyb3dzIEV4Y2VwdGlv
biB7CisvLwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gQmF0Y2hUZXN0VXRpbHMuZ2V0RWNsaXBz
ZUNvbXBpbGVyKCk7CisvLwkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBKQVZBOF9BTk5PVEFUSU9O
X1BST0MsICJ0ZXN0VHlwZUFubm90YXRpb25zOCIpOworLy8JfQorLy8JcHVibGljIHZvaWQgX3Rl
c3RUeXBlQW5ub3RhdGlvbnM4V2l0aEphdmFjKCkgdGhyb3dzIEV4Y2VwdGlvbiB7ICAgICAvLyBE
aXNhYmxlZCBmb3Igbm93LiBKYXZhYyA4YjEwOCBtaXNhdHRyaWJ1dGVzIGFubm90YXRpb25zIG9u
IHR5cGUgcGFyYW1ldGVycworLy8JCUphdmFDb21waWxlciBjb21waWxlciA9IFRvb2xQcm92aWRl
ci5nZXRTeXN0ZW1KYXZhQ29tcGlsZXIoKTsKKy8vCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIEpB
VkE4X0FOTk9UQVRJT05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlvbnM4Iik7CisvLwl9CisvLwlw
dWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90YXRpb25zOSgpIHRocm93cyBFeGNlcHRpb24geworLy8J
CUphdmFDb21waWxlciBjb21waWxlciA9IEJhdGNoVGVzdFV0aWxzLmdldEVjbGlwc2VDb21waWxl
cigpOworLy8JCWludGVybmFsVGVzdChjb21waWxlciwgSkFWQThfQU5OT1RBVElPTl9QUk9DLCAi
dGVzdFR5cGVBbm5vdGF0aW9uczkiKTsKKy8vCX0KKy8vCXB1YmxpYyB2b2lkIF90ZXN0VHlwZUFu
bm90YXRpb25zOVdpdGhKYXZhYygpIHRocm93cyBFeGNlcHRpb24geworLy8JCUphdmFDb21waWxl
ciBjb21waWxlciA9IFRvb2xQcm92aWRlci5nZXRTeXN0ZW1KYXZhQ29tcGlsZXIoKTsKKy8vCQlp
bnRlcm5hbFRlc3QoY29tcGlsZXIsIEpBVkE4X0FOTk9UQVRJT05fUFJPQywgInRlc3RUeXBlQW5u
b3RhdGlvbnM5Iik7CisvLwl9CisvLwlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90YXRpb25zMTAo
KSB0aHJvd3MgRXhjZXB0aW9uIHsKKy8vCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBCYXRjaFRl
c3RVdGlscy5nZXRFY2xpcHNlQ29tcGlsZXIoKTsKKy8vCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIs
IEpBVkE4X0FOTk9UQVRJT05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlvbnMxMCIpOworLy8JfQor
Ly8JcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczEwV2l0aEphdmFjKCkgdGhyb3dzIEV4
Y2VwdGlvbiB7CisvLwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gVG9vbFByb3ZpZGVyLmdldFN5
c3RlbUphdmFDb21waWxlcigpOworLy8JCWludGVybmFsVGVzdChjb21waWxlciwgSkFWQThfQU5O
T1RBVElPTl9QUk9DLCAidGVzdFR5cGVBbm5vdGF0aW9uczEwIik7CisvLwl9CisvLwlwdWJsaWMg
dm9pZCB0ZXN0VHlwZUFubm90YXRpb25zMTEoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKy8vCQlKYXZh
Q29tcGlsZXIgY29tcGlsZXIgPSBCYXRjaFRlc3RVdGlscy5nZXRFY2xpcHNlQ29tcGlsZXIoKTsK
Ky8vCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIEpBVkE4X0FOTk9UQVRJT05fUFJPQywgInRlc3RU
eXBlQW5ub3RhdGlvbnMxMSIpOworLy8JfQorLy8JcHVibGljIHZvaWQgX3Rlc3RUeXBlQW5ub3Rh
dGlvbnMxMVdpdGhKYXZhYygpIHRocm93cyBFeGNlcHRpb24geworLy8JCUphdmFDb21waWxlciBj
b21waWxlciA9IFRvb2xQcm92aWRlci5nZXRTeXN0ZW1KYXZhQ29tcGlsZXIoKTsKKy8vCQlpbnRl
cm5hbFRlc3QoY29tcGlsZXIsIEpBVkE4X0FOTk9UQVRJT05fUFJPQywgInRlc3RUeXBlQW5ub3Rh
dGlvbnMxMSIpOworLy8JfQorLy8JcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczEyKCkg
dGhyb3dzIEV4Y2VwdGlvbiB7CisvLwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gQmF0Y2hUZXN0
VXRpbHMuZ2V0RWNsaXBzZUNvbXBpbGVyKCk7CisvLwkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBK
QVZBOF9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0VHlwZUFubm90YXRpb25zMTIiKTsKKy8vCX0KKy8v
CXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnMxMldpdGhKYXZhYygpIHRocm93cyBFeGNl
cHRpb24geworLy8JCUphdmFDb21waWxlciBjb21waWxlciA9IFRvb2xQcm92aWRlci5nZXRTeXN0
ZW1KYXZhQ29tcGlsZXIoKTsKKy8vCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIEpBVkE4X0FOTk9U
QVRJT05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlvbnMxMiIpOworLy8JfQorLy8JcHVibGljIHZv
aWQgdGVzdFR5cGVBbm5vdGF0aW9uczEzKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisvLwkJSmF2YUNv
bXBpbGVyIGNvbXBpbGVyID0gQmF0Y2hUZXN0VXRpbHMuZ2V0RWNsaXBzZUNvbXBpbGVyKCk7Cisv
LwkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBKQVZBOF9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0VHlw
ZUFubm90YXRpb25zMTMiKTsKKy8vCX0KKy8vCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlv
bnMxM1dpdGhKYXZhYygpIHRocm93cyBFeGNlcHRpb24geworLy8JCUphdmFDb21waWxlciBjb21w
aWxlciA9IFRvb2xQcm92aWRlci5nZXRTeXN0ZW1KYXZhQ29tcGlsZXIoKTsKKy8vCQlpbnRlcm5h
bFRlc3QoY29tcGlsZXIsIEpBVkE4X0FOTk9UQVRJT05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlv
bnMxMyIpOworLy8JfQorLy8JcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczE0KCkgdGhy
b3dzIEV4Y2VwdGlvbiB7CisvLwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gQmF0Y2hUZXN0VXRp
bHMuZ2V0RWNsaXBzZUNvbXBpbGVyKCk7CisvLwkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBKQVZB
OF9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0VHlwZUFubm90YXRpb25zMTQiKTsKKy8vCX0KKy8vCXB1
YmxpYyB2b2lkIF90ZXN0VHlwZUFubm90YXRpb25zMTRXaXRoSmF2YWMoKSB0aHJvd3MgRXhjZXB0
aW9uIHsgLy8gRGlzYWJsZWQgZm9yIG5vdy4gSmF2YWMgcmV0dXJucyBudWxsIGFzIHJlY2VpdmVy
IHR5cGUgd2hlcmUgaXQgc2hvdWxkIGJlIHR5cGUgJ05vbmUnCisvLwkJSmF2YUNvbXBpbGVyIGNv
bXBpbGVyID0gVG9vbFByb3ZpZGVyLmdldFN5c3RlbUphdmFDb21waWxlcigpOworLy8JCWludGVy
bmFsVGVzdChjb21waWxlciwgSkFWQThfQU5OT1RBVElPTl9QUk9DLCAidGVzdFR5cGVBbm5vdGF0
aW9uczE0Iik7CisvLwl9CisvLwlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90YXRpb25zMTUoKSB0
aHJvd3MgRXhjZXB0aW9uIHsKKy8vCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBCYXRjaFRlc3RV
dGlscy5nZXRFY2xpcHNlQ29tcGlsZXIoKTsKKy8vCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIEpB
VkE4X0FOTk9UQVRJT05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlvbnMxNSIsICJaMS5qYXZhIik7
CisvLwl9CisvLwlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90YXRpb25zMTVXaXRoSmF2YWMoKSB0
aHJvd3MgRXhjZXB0aW9uIHsKKy8vCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBUb29sUHJvdmlk
ZXIuZ2V0U3lzdGVtSmF2YUNvbXBpbGVyKCk7CisvLwkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBK
QVZBOF9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0VHlwZUFubm90YXRpb25zMTUiLCAiWjEuamF2YSIp
OworLy8JfQorLy8JcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczE2KCkgdGhyb3dzIEV4
Y2VwdGlvbiB7CisvLwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gQmF0Y2hUZXN0VXRpbHMuZ2V0
RWNsaXBzZUNvbXBpbGVyKCk7CisvLwkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBKQVZBOF9BTk5P
VEFUSU9OX1BST0MsICJ0ZXN0VHlwZUFubm90YXRpb25zMTYiLCAiWjIuamF2YSIpOworLy8JfQor
Ly8JcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczE2V2l0aEphdmFjKCkgdGhyb3dzIEV4
Y2VwdGlvbiB7CisvLwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gVG9vbFByb3ZpZGVyLmdldFN5
c3RlbUphdmFDb21waWxlcigpOworLy8JCWludGVybmFsVGVzdChjb21waWxlciwgSkFWQThfQU5O
T1RBVElPTl9QUk9DLCAidGVzdFR5cGVBbm5vdGF0aW9uczE2IiwgIloyLmphdmEiKTsKKy8vCX0K
Ky8vCXB1YmxpYyB2b2lkIHRlc3RSZXBlYXRlZEFubm90YXRpb25zMTcoKSB0aHJvd3MgRXhjZXB0
aW9uIHsKKy8vCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBCYXRjaFRlc3RVdGlscy5nZXRFY2xp
cHNlQ29tcGlsZXIoKTsKKy8vCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIEpBVkE4X0FOTk9UQVRJ
T05fUFJPQywgInRlc3RSZXBlYXRlZEFubm90YXRpb25zMTciLCAiSkVQMTIwLmphdmEiKTsKKy8v
CX0KKy8vCXB1YmxpYyB2b2lkIHRlc3RSZXBlYXRlZEFubm90YXRpb25zMTdXaXRoSmF2YWMoKSB0
aHJvd3MgRXhjZXB0aW9uIHsKKy8vCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBUb29sUHJvdmlk
ZXIuZ2V0U3lzdGVtSmF2YUNvbXBpbGVyKCk7CisvLwkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBK
QVZBOF9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0UmVwZWF0ZWRBbm5vdGF0aW9uczE3IiwgIkpFUDEy
MC5qYXZhIik7CisvLwl9CisvLwlwdWJsaWMgdm9pZCB0ZXN0UmVwZWF0ZWRBbm5vdGF0aW9uczE4
KCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisvLwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gQmF0Y2hU
ZXN0VXRpbHMuZ2V0RWNsaXBzZUNvbXBpbGVyKCk7CisvLwkJaW50ZXJuYWxUZXN0KGNvbXBpbGVy
LCBKQVZBOF9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0UmVwZWF0ZWRBbm5vdGF0aW9uczE4IiwgIkpF
UDEyMF8xLmphdmEiKTsKKy8vCX0KKy8vCXB1YmxpYyB2b2lkIHRlc3RSZXBlYXRlZEFubm90YXRp
b25zMThXaXRoSmF2YWMoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKy8vCQlKYXZhQ29tcGlsZXIgY29t
cGlsZXIgPSBUb29sUHJvdmlkZXIuZ2V0U3lzdGVtSmF2YUNvbXBpbGVyKCk7CisvLwkJaW50ZXJu
YWxUZXN0KGNvbXBpbGVyLCBKQVZBOF9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0UmVwZWF0ZWRBbm5v
dGF0aW9uczE4IiwgIkpFUDEyMF8xLmphdmEiKTsKKy8vCX0KKy8vCXB1YmxpYyB2b2lkIHRlc3RS
ZXBlYXRlZEFubm90YXRpb25zMTkoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKy8vCQlKYXZhQ29tcGls
ZXIgY29tcGlsZXIgPSBCYXRjaFRlc3RVdGlscy5nZXRFY2xpcHNlQ29tcGlsZXIoKTsKKy8vCQlp
bnRlcm5hbFRlc3QoY29tcGlsZXIsIEpBVkE4X0FOTk9UQVRJT05fUFJPQywgInRlc3RSZXBlYXRl
ZEFubm90YXRpb25zMTkiLCAiSkVQMTIwXzIuamF2YSIpOworLy8JfQorLy8JcHVibGljIHZvaWQg
dGVzdFJlcGVhdGVkQW5ub3RhdGlvbnMxOVdpdGhKYXZhYygpIHRocm93cyBFeGNlcHRpb24gewor
Ly8JCUphdmFDb21waWxlciBjb21waWxlciA9IFRvb2xQcm92aWRlci5nZXRTeXN0ZW1KYXZhQ29t
cGlsZXIoKTsKKy8vCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIEpBVkE4X0FOTk9UQVRJT05fUFJP
QywgInRlc3RSZXBlYXRlZEFubm90YXRpb25zMTkiLCAiSkVQMTIwXzIuamF2YSIpOworLy8JfQor
Ly8JcHVibGljIHZvaWQgdGVzdFJlcGVhdGVkQW5ub3RhdGlvbnMyMCgpIHRocm93cyBFeGNlcHRp
b24geworLy8JCUphdmFDb21waWxlciBjb21waWxlciA9IEJhdGNoVGVzdFV0aWxzLmdldEVjbGlw
c2VDb21waWxlcigpOworLy8JCWludGVybmFsVGVzdChjb21waWxlciwgSkFWQThfQU5OT1RBVElP
Tl9QUk9DLCAidGVzdFJlcGVhdGVkQW5ub3RhdGlvbnMyMCIsICJKRVAxMjBfMy5qYXZhIik7Cisv
Lwl9CisvLwlwdWJsaWMgdm9pZCB0ZXN0UmVwZWF0ZWRBbm5vdGF0aW9uczIwV2l0aEphdmFjKCkg
dGhyb3dzIEV4Y2VwdGlvbiB7CisvLwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gVG9vbFByb3Zp
ZGVyLmdldFN5c3RlbUphdmFDb21waWxlcigpOworLy8JCWludGVybmFsVGVzdChjb21waWxlciwg
SkFWQThfQU5OT1RBVElPTl9QUk9DLCAidGVzdFJlcGVhdGVkQW5ub3RhdGlvbnMyMCIsICJKRVAx
MjBfMy5qYXZhIik7CisvLwl9CisvLwkKKy8vCXB1YmxpYyB2b2lkIHRlc3RSZXBlYXRlZEFubm90
YXRpb25zMjEoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKy8vCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIg
PSBCYXRjaFRlc3RVdGlscy5nZXRFY2xpcHNlQ29tcGlsZXIoKTsKKy8vCQlpbnRlcm5hbFRlc3Qo
Y29tcGlsZXIsIEpBVkE4X0FOTk9UQVRJT05fUFJPQywgInRlc3RSZXBlYXRlZEFubm90YXRpb25z
MjEiLCAiSkVQMTIwXzQuamF2YSIpOworLy8JfQorLy8JcHVibGljIHZvaWQgdGVzdFJlcGVhdGVk
QW5ub3RhdGlvbnMyMVdpdGhKYXZhYygpIHRocm93cyBFeGNlcHRpb24geworLy8JCUphdmFDb21w
aWxlciBjb21waWxlciA9IFRvb2xQcm92aWRlci5nZXRTeXN0ZW1KYXZhQ29tcGlsZXIoKTsKKy8v
CQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIEpBVkE4X0FOTk9UQVRJT05fUFJPQywgInRlc3RSZXBl
YXRlZEFubm90YXRpb25zMjEiLCAiSkVQMTIwXzQuamF2YSIpOworLy8JfQorLy8JCisvLwlwdWJs
aWMgdm9pZCB0ZXN0UmVwZWF0ZWRBbm5vdGF0aW9uczIyKCkgdGhyb3dzIEV4Y2VwdGlvbiB7Cisv
LwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gQmF0Y2hUZXN0VXRpbHMuZ2V0RWNsaXBzZUNvbXBp
bGVyKCk7CisvLwkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBKQVZBOF9BTk5PVEFUSU9OX1BST0Ms
ICJ0ZXN0UmVwZWF0ZWRBbm5vdGF0aW9uczIyIiwgIkpFUDEyMF81LmphdmEiKTsKKy8vCX0KKy8v
CQorLy8JcHVibGljIHZvaWQgX3Rlc3RSZXBlYXRlZEFubm90YXRpb25zMjJXaXRoSmF2YWMoKSB0
aHJvd3MgRXhjZXB0aW9uIHsgLy8gRGlzYWJsZWQgZm9yIG5vdywgamF2YWMgOGIxMDggZG9lcyBu
b3Qgc2VlbSB0byBleHBvc2UgYW55IGFubm90YXRpb25zIG9uIGEgdHlwZSBtaXJyb3Igd2hlbiB0
aGVyZSBhcmUgcmVwZWF0ZWQgYW5ub3RhdGlvbnMuCisvLwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVy
ID0gVG9vbFByb3ZpZGVyLmdldFN5c3RlbUphdmFDb21waWxlcigpOworLy8JCWludGVybmFsVGVz
dChjb21waWxlciwgSkFWQThfQU5OT1RBVElPTl9QUk9DLCAidGVzdFJlcGVhdGVkQW5ub3RhdGlv
bnMyMiIsICJKRVAxMjBfNS5qYXZhIik7CisvLwl9CisvLwkKKy8vCXB1YmxpYyB2b2lkIHRlc3RU
eXBlQW5ub3RhdGlvbnMyMygpIHRocm93cyBFeGNlcHRpb24geworLy8JCUphdmFDb21waWxlciBj
b21waWxlciA9IEJhdGNoVGVzdFV0aWxzLmdldEVjbGlwc2VDb21waWxlcigpOworLy8JCWludGVy
bmFsVGVzdChjb21waWxlciwgSkFWQThfQU5OT1RBVElPTl9QUk9DLCAidGVzdFR5cGVBbm5vdGF0
aW9uczIzIik7CisvLwl9CisvLworLy8JcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczIz
V2l0aEphdmFjKCkgdGhyb3dzIEV4Y2VwdGlvbiB7CisvLwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVy
ID0gVG9vbFByb3ZpZGVyLmdldFN5c3RlbUphdmFDb21waWxlcigpOworLy8JCWludGVybmFsVGVz
dChjb21waWxlciwgSkFWQThfQU5OT1RBVElPTl9QUk9DLCAidGVzdFR5cGVBbm5vdGF0aW9uczIz
Iik7CisvLwl9CisvLworLy8JcHVibGljIHZvaWQgdGVzdFJlcGVhdGVkQW5ub3RhdGlvbnMyNCgp
IHRocm93cyBFeGNlcHRpb24geworLy8JCUphdmFDb21waWxlciBjb21waWxlciA9IEJhdGNoVGVz
dFV0aWxzLmdldEVjbGlwc2VDb21waWxlcigpOworLy8JCWludGVybmFsVGVzdChjb21waWxlciwg
SkFWQThfQU5OT1RBVElPTl9QUk9DLCAidGVzdFJlcGVhdGVkQW5ub3RhdGlvbnMyNCIsICJKRVAx
MjBfNi5qYXZhIik7CisvLwl9CisvLworLy8JcHVibGljIHZvaWQgdGVzdFJlcGVhdGVkQW5ub3Rh
dGlvbnMyNFdpdGhKYXZhYygpIHRocm93cyBFeGNlcHRpb24geyAvLyBEaXNhYmxlZCBmb3Igbm93
LCBqYXZhYyA4YjEwOCBkb2VzIG5vdCBzZWVtIHRvIGV4cG9zZSBhbnkgYW5ub3RhdGlvbnMgb24g
YSB0eXBlIG1pcnJvciB3aGVuIHRoZXJlIGFyZSByZXBlYXRlZCBhbm5vdGF0aW9ucy4KKy8vCQlK
YXZhQ29tcGlsZXIgY29tcGlsZXIgPSBUb29sUHJvdmlkZXIuZ2V0U3lzdGVtSmF2YUNvbXBpbGVy
KCk7CisvLwkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBKQVZBOF9BTk5PVEFUSU9OX1BST0MsICJ0
ZXN0UmVwZWF0ZWRBbm5vdGF0aW9uczI0IiwgIkpFUDEyMF82LmphdmEiKTsKKy8vCX0KKy8vCQor
Ly8JcHVibGljIHZvaWQgdGVzdFJlcGVhdGVkQW5ub3RhdGlvbnMyNSgpIHRocm93cyBFeGNlcHRp
b24geworLy8JCUphdmFDb21waWxlciBjb21waWxlciA9IEJhdGNoVGVzdFV0aWxzLmdldEVjbGlw
c2VDb21waWxlcigpOworLy8JCWludGVybmFsVGVzdChjb21waWxlciwgSkFWQThfQU5OT1RBVElP
Tl9QUk9DLCAidGVzdFJlcGVhdGVkQW5ub3RhdGlvbnMyNSIsICJKRVAxMjBfNy5qYXZhIik7Cisv
Lwl9CisvLworLy8JcHVibGljIHZvaWQgdGVzdFJlcGVhdGVkQW5ub3RhdGlvbnMyNVdpdGhKYXZh
YygpIHRocm93cyBFeGNlcHRpb24geyAvLyBEaXNhYmxlZCBmb3Igbm93LCBqYXZhYyA4YjEwOCBk
b2VzIG5vdCBzZWVtIHRvIGV4cG9zZSBhbnkgYW5ub3RhdGlvbnMgb24gYSB0eXBlIG1pcnJvciB3
aGVuIHRoZXJlIGFyZSByZXBlYXRlZCBhbm5vdGF0aW9ucy4KKy8vCQlKYXZhQ29tcGlsZXIgY29t
cGlsZXIgPSBUb29sUHJvdmlkZXIuZ2V0U3lzdGVtSmF2YUNvbXBpbGVyKCk7CisvLwkJaW50ZXJu
YWxUZXN0KGNvbXBpbGVyLCBKQVZBOF9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0UmVwZWF0ZWRBbm5v
dGF0aW9uczI1IiwgIkpFUDEyMF83LmphdmEiKTsKKy8vCX0KKy8vCisvLwlwdWJsaWMgdm9pZCB0
ZXN0VHlwZUFubm90YXRpb25zMjYoKSB0aHJvd3MgRXhjZXB0aW9uIHsKKy8vCQlKYXZhQ29tcGls
ZXIgY29tcGlsZXIgPSBCYXRjaFRlc3RVdGlscy5nZXRFY2xpcHNlQ29tcGlsZXIoKTsKKy8vCQlp
bnRlcm5hbFRlc3QoY29tcGlsZXIsIEpBVkE4X0FOTk9UQVRJT05fUFJPQywgInRlc3RUeXBlQW5u
b3RhdGlvbnMyNiIpOworLy8JfQorLy8KKy8vCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlv
bnMyNldpdGhKYXZhYygpIHRocm93cyBFeGNlcHRpb24geworLy8JCUphdmFDb21waWxlciBjb21w
aWxlciA9IFRvb2xQcm92aWRlci5nZXRTeXN0ZW1KYXZhQ29tcGlsZXIoKTsKKy8vCQlpbnRlcm5h
bFRlc3QoY29tcGlsZXIsIEpBVkE4X0FOTk9UQVRJT05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlv
bnMyNiIpOworLy8JfQorLy8JCisvLwlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90YXRpb25zMjco
KSB0aHJvd3MgRXhjZXB0aW9uIHsKKy8vCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBCYXRjaFRl
c3RVdGlscy5nZXRFY2xpcHNlQ29tcGlsZXIoKTsKKy8vCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIs
IEpBVkE4X0FOTk9UQVRJT05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlvbnMyNyIpOworLy8JfQor
Ly8JCisvLwlwdWJsaWMgdm9pZCBfdGVzdFR5cGVBbm5vdGF0aW9uczI3V2l0aEphdmFjKCkgdGhy
b3dzIEV4Y2VwdGlvbiB7CisvLwkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gVG9vbFByb3ZpZGVy
LmdldFN5c3RlbUphdmFDb21waWxlcigpOworLy8JCWludGVybmFsVGVzdChjb21waWxlciwgSkFW
QThfQU5OT1RBVElPTl9QUk9DLCAidGVzdFR5cGVBbm5vdGF0aW9uczI3Iik7CisvLwl9CisJcHVi
bGljIHZvaWQgdGVzdFBhY2thZ2VBbm5vdGF0aW9ucygpIHRocm93cyBFeGNlcHRpb24gewogCQlK
YXZhQ29tcGlsZXIgY29tcGlsZXIgPSBCYXRjaFRlc3RVdGlscy5nZXRFY2xpcHNlQ29tcGlsZXIo
KTsKLQkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBKQVZBOF9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0
U0U4U3BlY2lmaWNzIik7CisJCWludGVybmFsVGVzdChjb21waWxlciwgSkFWQThfQU5OT1RBVElP
Tl9QUk9DLCAidGVzdFBhY2thZ2VBbm5vdGF0aW9ucyIpOwogCX0KLQlwdWJsaWMgdm9pZCBfdGVz
dFNFOFNwZWNpZmljc1dpdGhKYXZhYygpIHRocm93cyBFeGNlcHRpb24geworCXB1YmxpYyB2b2lk
IHRlc3RQYWNrYWdlQW5ub3RhdGlvbnNXaXRoSmF2YWMoKSB0aHJvd3MgRXhjZXB0aW9uIHsKIAkJ
SmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gVG9vbFByb3ZpZGVyLmdldFN5c3RlbUphdmFDb21waWxl
cigpOwotCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIEpBVkE4X0FOTk9UQVRJT05fUFJPQywgInRl
c3RTRThTcGVjaWZpY3MiKTsKLQl9Ci0JcHVibGljIHZvaWQgdGVzdExhbWJkYVNwZWNpZmljcygp
IHRocm93cyBFeGNlcHRpb24gewotCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBCYXRjaFRlc3RV
dGlscy5nZXRFY2xpcHNlQ29tcGlsZXIoKTsKLQkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBKQVZB
OF9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0TGFtYmRhU3BlY2lmaWNzIik7Ci0JfQotCXB1YmxpYyB2
b2lkIHRlc3RMYW1iZGFTcGVjaWZpY3NXaXRoSmF2YWMoKSB0aHJvd3MgRXhjZXB0aW9uIHsKLQkJ
SmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gVG9vbFByb3ZpZGVyLmdldFN5c3RlbUphdmFDb21waWxl
cigpOwotCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIEpBVkE4X0FOTk9UQVRJT05fUFJPQywgInRl
c3RMYW1iZGFTcGVjaWZpY3MiKTsKLQl9Ci0JcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9u
cygpIHRocm93cyBFeGNlcHRpb24gewotCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBCYXRjaFRl
c3RVdGlscy5nZXRFY2xpcHNlQ29tcGlsZXIoKTsKLQkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBK
QVZBOF9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0VHlwZUFubm90YXRpb25zIik7Ci0JfQotCXB1Ymxp
YyB2b2lkIF90ZXN0VHlwZUFubm90YXRpb25zV2l0aEphdmFjKCkgdGhyb3dzIEV4Y2VwdGlvbiB7
Ci0JCUphdmFDb21waWxlciBjb21waWxlciA9IFRvb2xQcm92aWRlci5nZXRTeXN0ZW1KYXZhQ29t
cGlsZXIoKTsKLQkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBKQVZBOF9BTk5PVEFUSU9OX1BST0Ms
ICJ0ZXN0VHlwZUFubm90YXRpb25zIik7Ci0JfQotCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3Rh
dGlvbnMxKCkgdGhyb3dzIEV4Y2VwdGlvbiB7Ci0JCUphdmFDb21waWxlciBjb21waWxlciA9IEJh
dGNoVGVzdFV0aWxzLmdldEVjbGlwc2VDb21waWxlcigpOwotCQlpbnRlcm5hbFRlc3QoY29tcGls
ZXIsIEpBVkE4X0FOTk9UQVRJT05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlvbnMxIik7Ci0JfQot
CXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnMxV2l0aEphdmFjKCkgdGhyb3dzIEV4Y2Vw
dGlvbiB7Ci0JCUphdmFDb21waWxlciBjb21waWxlciA9IFRvb2xQcm92aWRlci5nZXRTeXN0ZW1K
YXZhQ29tcGlsZXIoKTsKLQkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBKQVZBOF9BTk5PVEFUSU9O
X1BST0MsICJ0ZXN0VHlwZUFubm90YXRpb25zMSIpOwotCX0KLQlwdWJsaWMgdm9pZCB0ZXN0VHlw
ZUFubm90YXRpb25zMigpIHRocm93cyBFeGNlcHRpb24gewotCQlKYXZhQ29tcGlsZXIgY29tcGls
ZXIgPSBCYXRjaFRlc3RVdGlscy5nZXRFY2xpcHNlQ29tcGlsZXIoKTsKLQkJaW50ZXJuYWxUZXN0
KGNvbXBpbGVyLCBKQVZBOF9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0VHlwZUFubm90YXRpb25zMiIp
OwotCX0KLQlwdWJsaWMgdm9pZCBfdGVzdFR5cGVBbm5vdGF0aW9uczJXaXRoSmF2YWMoKSB0aHJv
d3MgRXhjZXB0aW9uIHsKLQkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gVG9vbFByb3ZpZGVyLmdl
dFN5c3RlbUphdmFDb21waWxlcigpOwotCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIEpBVkE4X0FO
Tk9UQVRJT05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlvbnMyIik7Ci0JfQotCXB1YmxpYyB2b2lk
IHRlc3RUeXBlQW5ub3RhdGlvbnMzKCkgdGhyb3dzIEV4Y2VwdGlvbiB7Ci0JCUphdmFDb21waWxl
ciBjb21waWxlciA9IEJhdGNoVGVzdFV0aWxzLmdldEVjbGlwc2VDb21waWxlcigpOwotCQlpbnRl
cm5hbFRlc3QoY29tcGlsZXIsIEpBVkE4X0FOTk9UQVRJT05fUFJPQywgInRlc3RUeXBlQW5ub3Rh
dGlvbnMzIik7Ci0JfQotCXB1YmxpYyB2b2lkIF90ZXN0VHlwZUFubm90YXRpb25zM1dpdGhKYXZh
YygpIHRocm93cyBFeGNlcHRpb24gewotCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBUb29sUHJv
dmlkZXIuZ2V0U3lzdGVtSmF2YUNvbXBpbGVyKCk7Ci0JCWludGVybmFsVGVzdChjb21waWxlciwg
SkFWQThfQU5OT1RBVElPTl9QUk9DLCAidGVzdFR5cGVBbm5vdGF0aW9uczMiKTsKLQl9Ci0JcHVi
bGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczQoKSB0aHJvd3MgRXhjZXB0aW9uIHsKLQkJSmF2
YUNvbXBpbGVyIGNvbXBpbGVyID0gQmF0Y2hUZXN0VXRpbHMuZ2V0RWNsaXBzZUNvbXBpbGVyKCk7
Ci0JCWludGVybmFsVGVzdChjb21waWxlciwgSkFWQThfQU5OT1RBVElPTl9QUk9DLCAidGVzdFR5
cGVBbm5vdGF0aW9uczQiKTsKLQl9Ci0JcHVibGljIHZvaWQgX3Rlc3RUeXBlQW5ub3RhdGlvbnM0
V2l0aEphdmFjKCkgdGhyb3dzIEV4Y2VwdGlvbiB7Ci0JCUphdmFDb21waWxlciBjb21waWxlciA9
IFRvb2xQcm92aWRlci5nZXRTeXN0ZW1KYXZhQ29tcGlsZXIoKTsKLQkJaW50ZXJuYWxUZXN0KGNv
bXBpbGVyLCBKQVZBOF9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0VHlwZUFubm90YXRpb25zNCIpOwot
CX0KLQlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90YXRpb25zNSgpIHRocm93cyBFeGNlcHRpb24g
ewotCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBCYXRjaFRlc3RVdGlscy5nZXRFY2xpcHNlQ29t
cGlsZXIoKTsKLQkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBKQVZBOF9BTk5PVEFUSU9OX1BST0Ms
ICJ0ZXN0VHlwZUFubm90YXRpb25zNSIpOwotCX0KLQlwdWJsaWMgdm9pZCBfdGVzdFR5cGVBbm5v
dGF0aW9uczVXaXRoSmF2YWMoKSB0aHJvd3MgRXhjZXB0aW9uIHsKLQkJSmF2YUNvbXBpbGVyIGNv
bXBpbGVyID0gVG9vbFByb3ZpZGVyLmdldFN5c3RlbUphdmFDb21waWxlcigpOwotCQlpbnRlcm5h
bFRlc3QoY29tcGlsZXIsIEpBVkE4X0FOTk9UQVRJT05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlv
bnM1Iik7Ci0JfQotCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnM2KCkgdGhyb3dzIEV4
Y2VwdGlvbiB7Ci0JCUphdmFDb21waWxlciBjb21waWxlciA9IEJhdGNoVGVzdFV0aWxzLmdldEVj
bGlwc2VDb21waWxlcigpOwotCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIEpBVkE4X0FOTk9UQVRJ
T05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlvbnM2Iik7Ci0JfQotCXB1YmxpYyB2b2lkIF90ZXN0
VHlwZUFubm90YXRpb25zNldpdGhKYXZhYygpIHRocm93cyBFeGNlcHRpb24geyAgIC8vIERpc2Fi
bGVkIGZvciBub3cuIEphdmFjIDhiMTA4IGRyb3BzIGFubm90YXRpb25zIGFycmF5cyBwcmVjZWRp
bmcgdmFyYXJncy4KLQkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gVG9vbFByb3ZpZGVyLmdldFN5
c3RlbUphdmFDb21waWxlcigpOwotCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIEpBVkE4X0FOTk9U
QVRJT05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlvbnM2Iik7Ci0JfQotCXB1YmxpYyB2b2lkIHRl
c3RUeXBlQW5ub3RhdGlvbnM3KCkgdGhyb3dzIEV4Y2VwdGlvbiB7Ci0JCUphdmFDb21waWxlciBj
b21waWxlciA9IEJhdGNoVGVzdFV0aWxzLmdldEVjbGlwc2VDb21waWxlcigpOwotCQlpbnRlcm5h
bFRlc3QoY29tcGlsZXIsIEpBVkE4X0FOTk9UQVRJT05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlv
bnM3Iik7Ci0JfQotCXB1YmxpYyB2b2lkIF90ZXN0VHlwZUFubm90YXRpb25zN1dpdGhKYXZhYygp
IHRocm93cyBFeGNlcHRpb24geyAgLy8gRGlzYWJsZWQgZm9yIG5vdy4gSmF2YWMgOGIxMDggbWlz
YXR0cmlidXRlcyBhbm5vdGF0aW9ucyBvbiB0eXBlIHBhcmFtZXRlcnMgCi0JCUphdmFDb21waWxl
ciBjb21waWxlciA9IFRvb2xQcm92aWRlci5nZXRTeXN0ZW1KYXZhQ29tcGlsZXIoKTsKLQkJaW50
ZXJuYWxUZXN0KGNvbXBpbGVyLCBKQVZBOF9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0VHlwZUFubm90
YXRpb25zNyIpOwotCX0KLQlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90YXRpb25zOCgpIHRocm93
cyBFeGNlcHRpb24gewotCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBCYXRjaFRlc3RVdGlscy5n
ZXRFY2xpcHNlQ29tcGlsZXIoKTsKLQkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBKQVZBOF9BTk5P
VEFUSU9OX1BST0MsICJ0ZXN0VHlwZUFubm90YXRpb25zOCIpOwotCX0KLQlwdWJsaWMgdm9pZCBf
dGVzdFR5cGVBbm5vdGF0aW9uczhXaXRoSmF2YWMoKSB0aHJvd3MgRXhjZXB0aW9uIHsgICAgIC8v
IERpc2FibGVkIGZvciBub3cuIEphdmFjIDhiMTA4IG1pc2F0dHJpYnV0ZXMgYW5ub3RhdGlvbnMg
b24gdHlwZSBwYXJhbWV0ZXJzCi0JCUphdmFDb21waWxlciBjb21waWxlciA9IFRvb2xQcm92aWRl
ci5nZXRTeXN0ZW1KYXZhQ29tcGlsZXIoKTsKLQkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBKQVZB
OF9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0VHlwZUFubm90YXRpb25zOCIpOwotCX0KLQlwdWJsaWMg
dm9pZCB0ZXN0VHlwZUFubm90YXRpb25zOSgpIHRocm93cyBFeGNlcHRpb24gewotCQlKYXZhQ29t
cGlsZXIgY29tcGlsZXIgPSBCYXRjaFRlc3RVdGlscy5nZXRFY2xpcHNlQ29tcGlsZXIoKTsKLQkJ
aW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBKQVZBOF9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0VHlwZUFu
bm90YXRpb25zOSIpOwotCX0KLQlwdWJsaWMgdm9pZCBfdGVzdFR5cGVBbm5vdGF0aW9uczlXaXRo
SmF2YWMoKSB0aHJvd3MgRXhjZXB0aW9uIHsKLQkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gVG9v
bFByb3ZpZGVyLmdldFN5c3RlbUphdmFDb21waWxlcigpOwotCQlpbnRlcm5hbFRlc3QoY29tcGls
ZXIsIEpBVkE4X0FOTk9UQVRJT05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlvbnM5Iik7Ci0JfQot
CXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnMxMCgpIHRocm93cyBFeGNlcHRpb24gewot
CQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBCYXRjaFRlc3RVdGlscy5nZXRFY2xpcHNlQ29tcGls
ZXIoKTsKLQkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBKQVZBOF9BTk5PVEFUSU9OX1BST0MsICJ0
ZXN0VHlwZUFubm90YXRpb25zMTAiKTsKLQl9Ci0JcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0
aW9uczEwV2l0aEphdmFjKCkgdGhyb3dzIEV4Y2VwdGlvbiB7Ci0JCUphdmFDb21waWxlciBjb21w
aWxlciA9IFRvb2xQcm92aWRlci5nZXRTeXN0ZW1KYXZhQ29tcGlsZXIoKTsKLQkJaW50ZXJuYWxU
ZXN0KGNvbXBpbGVyLCBKQVZBOF9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0VHlwZUFubm90YXRpb25z
MTAiKTsKLQl9Ci0JcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczExKCkgdGhyb3dzIEV4
Y2VwdGlvbiB7Ci0JCUphdmFDb21waWxlciBjb21waWxlciA9IEJhdGNoVGVzdFV0aWxzLmdldEVj
bGlwc2VDb21waWxlcigpOwotCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIEpBVkE4X0FOTk9UQVRJ
T05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlvbnMxMSIpOwotCX0KLQlwdWJsaWMgdm9pZCBfdGVz
dFR5cGVBbm5vdGF0aW9uczExV2l0aEphdmFjKCkgdGhyb3dzIEV4Y2VwdGlvbiB7Ci0JCUphdmFD
b21waWxlciBjb21waWxlciA9IFRvb2xQcm92aWRlci5nZXRTeXN0ZW1KYXZhQ29tcGlsZXIoKTsK
LQkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBKQVZBOF9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0VHlw
ZUFubm90YXRpb25zMTEiKTsKLQl9Ci0JcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczEy
KCkgdGhyb3dzIEV4Y2VwdGlvbiB7Ci0JCUphdmFDb21waWxlciBjb21waWxlciA9IEJhdGNoVGVz
dFV0aWxzLmdldEVjbGlwc2VDb21waWxlcigpOwotCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIEpB
VkE4X0FOTk9UQVRJT05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlvbnMxMiIpOwotCX0KLQlwdWJs
aWMgdm9pZCB0ZXN0VHlwZUFubm90YXRpb25zMTJXaXRoSmF2YWMoKSB0aHJvd3MgRXhjZXB0aW9u
IHsKLQkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gVG9vbFByb3ZpZGVyLmdldFN5c3RlbUphdmFD
b21waWxlcigpOwotCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIEpBVkE4X0FOTk9UQVRJT05fUFJP
QywgInRlc3RUeXBlQW5ub3RhdGlvbnMxMiIpOwotCX0KLQlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFu
bm90YXRpb25zMTMoKSB0aHJvd3MgRXhjZXB0aW9uIHsKLQkJSmF2YUNvbXBpbGVyIGNvbXBpbGVy
ID0gQmF0Y2hUZXN0VXRpbHMuZ2V0RWNsaXBzZUNvbXBpbGVyKCk7Ci0JCWludGVybmFsVGVzdChj
b21waWxlciwgSkFWQThfQU5OT1RBVElPTl9QUk9DLCAidGVzdFR5cGVBbm5vdGF0aW9uczEzIik7
Ci0JfQotCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnMxM1dpdGhKYXZhYygpIHRocm93
cyBFeGNlcHRpb24gewotCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBUb29sUHJvdmlkZXIuZ2V0
U3lzdGVtSmF2YUNvbXBpbGVyKCk7Ci0JCWludGVybmFsVGVzdChjb21waWxlciwgSkFWQThfQU5O
T1RBVElPTl9QUk9DLCAidGVzdFR5cGVBbm5vdGF0aW9uczEzIik7Ci0JfQotCXB1YmxpYyB2b2lk
IHRlc3RUeXBlQW5ub3RhdGlvbnMxNCgpIHRocm93cyBFeGNlcHRpb24gewotCQlKYXZhQ29tcGls
ZXIgY29tcGlsZXIgPSBCYXRjaFRlc3RVdGlscy5nZXRFY2xpcHNlQ29tcGlsZXIoKTsKLQkJaW50
ZXJuYWxUZXN0KGNvbXBpbGVyLCBKQVZBOF9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0VHlwZUFubm90
YXRpb25zMTQiKTsKLQl9Ci0JcHVibGljIHZvaWQgX3Rlc3RUeXBlQW5ub3RhdGlvbnMxNFdpdGhK
YXZhYygpIHRocm93cyBFeGNlcHRpb24geyAvLyBEaXNhYmxlZCBmb3Igbm93LiBKYXZhYyByZXR1
cm5zIG51bGwgYXMgcmVjZWl2ZXIgdHlwZSB3aGVyZSBpdCBzaG91bGQgYmUgdHlwZSAnTm9uZScK
LQkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gVG9vbFByb3ZpZGVyLmdldFN5c3RlbUphdmFDb21w
aWxlcigpOwotCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIEpBVkE4X0FOTk9UQVRJT05fUFJPQywg
InRlc3RUeXBlQW5ub3RhdGlvbnMxNCIpOwotCX0KLQlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90
YXRpb25zMTUoKSB0aHJvd3MgRXhjZXB0aW9uIHsKLQkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0g
QmF0Y2hUZXN0VXRpbHMuZ2V0RWNsaXBzZUNvbXBpbGVyKCk7Ci0JCWludGVybmFsVGVzdChjb21w
aWxlciwgSkFWQThfQU5OT1RBVElPTl9QUk9DLCAidGVzdFR5cGVBbm5vdGF0aW9uczE1IiwgIlox
LmphdmEiKTsKLQl9Ci0JcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0aW9uczE1V2l0aEphdmFj
KCkgdGhyb3dzIEV4Y2VwdGlvbiB7Ci0JCUphdmFDb21waWxlciBjb21waWxlciA9IFRvb2xQcm92
aWRlci5nZXRTeXN0ZW1KYXZhQ29tcGlsZXIoKTsKLQkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBK
QVZBOF9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0VHlwZUFubm90YXRpb25zMTUiLCAiWjEuamF2YSIp
OwotCX0KLQlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90YXRpb25zMTYoKSB0aHJvd3MgRXhjZXB0
aW9uIHsKLQkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gQmF0Y2hUZXN0VXRpbHMuZ2V0RWNsaXBz
ZUNvbXBpbGVyKCk7Ci0JCWludGVybmFsVGVzdChjb21waWxlciwgSkFWQThfQU5OT1RBVElPTl9Q
Uk9DLCAidGVzdFR5cGVBbm5vdGF0aW9uczE2IiwgIloyLmphdmEiKTsKLQl9Ci0JcHVibGljIHZv
aWQgdGVzdFR5cGVBbm5vdGF0aW9uczE2V2l0aEphdmFjKCkgdGhyb3dzIEV4Y2VwdGlvbiB7Ci0J
CUphdmFDb21waWxlciBjb21waWxlciA9IFRvb2xQcm92aWRlci5nZXRTeXN0ZW1KYXZhQ29tcGls
ZXIoKTsKLQkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBKQVZBOF9BTk5PVEFUSU9OX1BST0MsICJ0
ZXN0VHlwZUFubm90YXRpb25zMTYiLCAiWjIuamF2YSIpOwotCX0KLQlwdWJsaWMgdm9pZCB0ZXN0
UmVwZWF0ZWRBbm5vdGF0aW9uczE3KCkgdGhyb3dzIEV4Y2VwdGlvbiB7Ci0JCUphdmFDb21waWxl
ciBjb21waWxlciA9IEJhdGNoVGVzdFV0aWxzLmdldEVjbGlwc2VDb21waWxlcigpOwotCQlpbnRl
cm5hbFRlc3QoY29tcGlsZXIsIEpBVkE4X0FOTk9UQVRJT05fUFJPQywgInRlc3RSZXBlYXRlZEFu
bm90YXRpb25zMTciLCAiSkVQMTIwLmphdmEiKTsKLQl9Ci0JcHVibGljIHZvaWQgdGVzdFJlcGVh
dGVkQW5ub3RhdGlvbnMxN1dpdGhKYXZhYygpIHRocm93cyBFeGNlcHRpb24gewotCQlKYXZhQ29t
cGlsZXIgY29tcGlsZXIgPSBUb29sUHJvdmlkZXIuZ2V0U3lzdGVtSmF2YUNvbXBpbGVyKCk7Ci0J
CWludGVybmFsVGVzdChjb21waWxlciwgSkFWQThfQU5OT1RBVElPTl9QUk9DLCAidGVzdFJlcGVh
dGVkQW5ub3RhdGlvbnMxNyIsICJKRVAxMjAuamF2YSIpOwotCX0KLQlwdWJsaWMgdm9pZCB0ZXN0
UmVwZWF0ZWRBbm5vdGF0aW9uczE4KCkgdGhyb3dzIEV4Y2VwdGlvbiB7Ci0JCUphdmFDb21waWxl
ciBjb21waWxlciA9IEJhdGNoVGVzdFV0aWxzLmdldEVjbGlwc2VDb21waWxlcigpOwotCQlpbnRl
cm5hbFRlc3QoY29tcGlsZXIsIEpBVkE4X0FOTk9UQVRJT05fUFJPQywgInRlc3RSZXBlYXRlZEFu
bm90YXRpb25zMTgiLCAiSkVQMTIwXzEuamF2YSIpOwotCX0KLQlwdWJsaWMgdm9pZCB0ZXN0UmVw
ZWF0ZWRBbm5vdGF0aW9uczE4V2l0aEphdmFjKCkgdGhyb3dzIEV4Y2VwdGlvbiB7Ci0JCUphdmFD
b21waWxlciBjb21waWxlciA9IFRvb2xQcm92aWRlci5nZXRTeXN0ZW1KYXZhQ29tcGlsZXIoKTsK
LQkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBKQVZBOF9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0UmVw
ZWF0ZWRBbm5vdGF0aW9uczE4IiwgIkpFUDEyMF8xLmphdmEiKTsKLQl9Ci0JcHVibGljIHZvaWQg
dGVzdFJlcGVhdGVkQW5ub3RhdGlvbnMxOSgpIHRocm93cyBFeGNlcHRpb24gewotCQlKYXZhQ29t
cGlsZXIgY29tcGlsZXIgPSBCYXRjaFRlc3RVdGlscy5nZXRFY2xpcHNlQ29tcGlsZXIoKTsKLQkJ
aW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBKQVZBOF9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0UmVwZWF0
ZWRBbm5vdGF0aW9uczE5IiwgIkpFUDEyMF8yLmphdmEiKTsKLQl9Ci0JcHVibGljIHZvaWQgdGVz
dFJlcGVhdGVkQW5ub3RhdGlvbnMxOVdpdGhKYXZhYygpIHRocm93cyBFeGNlcHRpb24gewotCQlK
YXZhQ29tcGlsZXIgY29tcGlsZXIgPSBUb29sUHJvdmlkZXIuZ2V0U3lzdGVtSmF2YUNvbXBpbGVy
KCk7Ci0JCWludGVybmFsVGVzdChjb21waWxlciwgSkFWQThfQU5OT1RBVElPTl9QUk9DLCAidGVz
dFJlcGVhdGVkQW5ub3RhdGlvbnMxOSIsICJKRVAxMjBfMi5qYXZhIik7Ci0JfQotCXB1YmxpYyB2
b2lkIHRlc3RSZXBlYXRlZEFubm90YXRpb25zMjAoKSB0aHJvd3MgRXhjZXB0aW9uIHsKLQkJSmF2
YUNvbXBpbGVyIGNvbXBpbGVyID0gQmF0Y2hUZXN0VXRpbHMuZ2V0RWNsaXBzZUNvbXBpbGVyKCk7
Ci0JCWludGVybmFsVGVzdChjb21waWxlciwgSkFWQThfQU5OT1RBVElPTl9QUk9DLCAidGVzdFJl
cGVhdGVkQW5ub3RhdGlvbnMyMCIsICJKRVAxMjBfMy5qYXZhIik7Ci0JfQotCXB1YmxpYyB2b2lk
IHRlc3RSZXBlYXRlZEFubm90YXRpb25zMjBXaXRoSmF2YWMoKSB0aHJvd3MgRXhjZXB0aW9uIHsK
LQkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gVG9vbFByb3ZpZGVyLmdldFN5c3RlbUphdmFDb21w
aWxlcigpOwotCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIEpBVkE4X0FOTk9UQVRJT05fUFJPQywg
InRlc3RSZXBlYXRlZEFubm90YXRpb25zMjAiLCAiSkVQMTIwXzMuamF2YSIpOwotCX0KLQkKLQlw
dWJsaWMgdm9pZCB0ZXN0UmVwZWF0ZWRBbm5vdGF0aW9uczIxKCkgdGhyb3dzIEV4Y2VwdGlvbiB7
Ci0JCUphdmFDb21waWxlciBjb21waWxlciA9IEJhdGNoVGVzdFV0aWxzLmdldEVjbGlwc2VDb21w
aWxlcigpOwotCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIEpBVkE4X0FOTk9UQVRJT05fUFJPQywg
InRlc3RSZXBlYXRlZEFubm90YXRpb25zMjEiLCAiSkVQMTIwXzQuamF2YSIpOwotCX0KLQlwdWJs
aWMgdm9pZCB0ZXN0UmVwZWF0ZWRBbm5vdGF0aW9uczIxV2l0aEphdmFjKCkgdGhyb3dzIEV4Y2Vw
dGlvbiB7Ci0JCUphdmFDb21waWxlciBjb21waWxlciA9IFRvb2xQcm92aWRlci5nZXRTeXN0ZW1K
YXZhQ29tcGlsZXIoKTsKLQkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBKQVZBOF9BTk5PVEFUSU9O
X1BST0MsICJ0ZXN0UmVwZWF0ZWRBbm5vdGF0aW9uczIxIiwgIkpFUDEyMF80LmphdmEiKTsKLQl9
Ci0JCi0JcHVibGljIHZvaWQgdGVzdFJlcGVhdGVkQW5ub3RhdGlvbnMyMigpIHRocm93cyBFeGNl
cHRpb24gewotCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBCYXRjaFRlc3RVdGlscy5nZXRFY2xp
cHNlQ29tcGlsZXIoKTsKLQkJaW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBKQVZBOF9BTk5PVEFUSU9O
X1BST0MsICJ0ZXN0UmVwZWF0ZWRBbm5vdGF0aW9uczIyIiwgIkpFUDEyMF81LmphdmEiKTsKLQl9
Ci0JCi0JcHVibGljIHZvaWQgX3Rlc3RSZXBlYXRlZEFubm90YXRpb25zMjJXaXRoSmF2YWMoKSB0
aHJvd3MgRXhjZXB0aW9uIHsgLy8gRGlzYWJsZWQgZm9yIG5vdywgamF2YWMgOGIxMDggZG9lcyBu
b3Qgc2VlbSB0byBleHBvc2UgYW55IGFubm90YXRpb25zIG9uIGEgdHlwZSBtaXJyb3Igd2hlbiB0
aGVyZSBhcmUgcmVwZWF0ZWQgYW5ub3RhdGlvbnMuCi0JCUphdmFDb21waWxlciBjb21waWxlciA9
IFRvb2xQcm92aWRlci5nZXRTeXN0ZW1KYXZhQ29tcGlsZXIoKTsKLQkJaW50ZXJuYWxUZXN0KGNv
bXBpbGVyLCBKQVZBOF9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0UmVwZWF0ZWRBbm5vdGF0aW9uczIy
IiwgIkpFUDEyMF81LmphdmEiKTsKLQl9Ci0JCi0JcHVibGljIHZvaWQgdGVzdFR5cGVBbm5vdGF0
aW9uczIzKCkgdGhyb3dzIEV4Y2VwdGlvbiB7Ci0JCUphdmFDb21waWxlciBjb21waWxlciA9IEJh
dGNoVGVzdFV0aWxzLmdldEVjbGlwc2VDb21waWxlcigpOwotCQlpbnRlcm5hbFRlc3QoY29tcGls
ZXIsIEpBVkE4X0FOTk9UQVRJT05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlvbnMyMyIpOwotCX0K
LQotCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3RhdGlvbnMyM1dpdGhKYXZhYygpIHRocm93cyBF
eGNlcHRpb24gewotCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBUb29sUHJvdmlkZXIuZ2V0U3lz
dGVtSmF2YUNvbXBpbGVyKCk7Ci0JCWludGVybmFsVGVzdChjb21waWxlciwgSkFWQThfQU5OT1RB
VElPTl9QUk9DLCAidGVzdFR5cGVBbm5vdGF0aW9uczIzIik7Ci0JfQotCi0JcHVibGljIHZvaWQg
dGVzdFJlcGVhdGVkQW5ub3RhdGlvbnMyNCgpIHRocm93cyBFeGNlcHRpb24gewotCQlKYXZhQ29t
cGlsZXIgY29tcGlsZXIgPSBCYXRjaFRlc3RVdGlscy5nZXRFY2xpcHNlQ29tcGlsZXIoKTsKLQkJ
aW50ZXJuYWxUZXN0KGNvbXBpbGVyLCBKQVZBOF9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0UmVwZWF0
ZWRBbm5vdGF0aW9uczI0IiwgIkpFUDEyMF82LmphdmEiKTsKLQl9Ci0KLQlwdWJsaWMgdm9pZCB0
ZXN0UmVwZWF0ZWRBbm5vdGF0aW9uczI0V2l0aEphdmFjKCkgdGhyb3dzIEV4Y2VwdGlvbiB7IC8v
IERpc2FibGVkIGZvciBub3csIGphdmFjIDhiMTA4IGRvZXMgbm90IHNlZW0gdG8gZXhwb3NlIGFu
eSBhbm5vdGF0aW9ucyBvbiBhIHR5cGUgbWlycm9yIHdoZW4gdGhlcmUgYXJlIHJlcGVhdGVkIGFu
bm90YXRpb25zLgotCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBUb29sUHJvdmlkZXIuZ2V0U3lz
dGVtSmF2YUNvbXBpbGVyKCk7Ci0JCWludGVybmFsVGVzdChjb21waWxlciwgSkFWQThfQU5OT1RB
VElPTl9QUk9DLCAidGVzdFJlcGVhdGVkQW5ub3RhdGlvbnMyNCIsICJKRVAxMjBfNi5qYXZhIik7
Ci0JfQotCQotCXB1YmxpYyB2b2lkIHRlc3RSZXBlYXRlZEFubm90YXRpb25zMjUoKSB0aHJvd3Mg
RXhjZXB0aW9uIHsKLQkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gQmF0Y2hUZXN0VXRpbHMuZ2V0
RWNsaXBzZUNvbXBpbGVyKCk7Ci0JCWludGVybmFsVGVzdChjb21waWxlciwgSkFWQThfQU5OT1RB
VElPTl9QUk9DLCAidGVzdFJlcGVhdGVkQW5ub3RhdGlvbnMyNSIsICJKRVAxMjBfNy5qYXZhIik7
Ci0JfQotCi0JcHVibGljIHZvaWQgdGVzdFJlcGVhdGVkQW5ub3RhdGlvbnMyNVdpdGhKYXZhYygp
IHRocm93cyBFeGNlcHRpb24geyAvLyBEaXNhYmxlZCBmb3Igbm93LCBqYXZhYyA4YjEwOCBkb2Vz
IG5vdCBzZWVtIHRvIGV4cG9zZSBhbnkgYW5ub3RhdGlvbnMgb24gYSB0eXBlIG1pcnJvciB3aGVu
IHRoZXJlIGFyZSByZXBlYXRlZCBhbm5vdGF0aW9ucy4KLQkJSmF2YUNvbXBpbGVyIGNvbXBpbGVy
ID0gVG9vbFByb3ZpZGVyLmdldFN5c3RlbUphdmFDb21waWxlcigpOwotCQlpbnRlcm5hbFRlc3Qo
Y29tcGlsZXIsIEpBVkE4X0FOTk9UQVRJT05fUFJPQywgInRlc3RSZXBlYXRlZEFubm90YXRpb25z
MjUiLCAiSkVQMTIwXzcuamF2YSIpOwotCX0KLQotCXB1YmxpYyB2b2lkIHRlc3RUeXBlQW5ub3Rh
dGlvbnMyNigpIHRocm93cyBFeGNlcHRpb24gewotCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBC
YXRjaFRlc3RVdGlscy5nZXRFY2xpcHNlQ29tcGlsZXIoKTsKLQkJaW50ZXJuYWxUZXN0KGNvbXBp
bGVyLCBKQVZBOF9BTk5PVEFUSU9OX1BST0MsICJ0ZXN0VHlwZUFubm90YXRpb25zMjYiKTsKLQl9
Ci0KLQlwdWJsaWMgdm9pZCB0ZXN0VHlwZUFubm90YXRpb25zMjZXaXRoSmF2YWMoKSB0aHJvd3Mg
RXhjZXB0aW9uIHsKLQkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0gVG9vbFByb3ZpZGVyLmdldFN5
c3RlbUphdmFDb21waWxlcigpOwotCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIEpBVkE4X0FOTk9U
QVRJT05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlvbnMyNiIpOwotCX0KLQkKLQlwdWJsaWMgdm9p
ZCB0ZXN0VHlwZUFubm90YXRpb25zMjcoKSB0aHJvd3MgRXhjZXB0aW9uIHsKLQkJSmF2YUNvbXBp
bGVyIGNvbXBpbGVyID0gQmF0Y2hUZXN0VXRpbHMuZ2V0RWNsaXBzZUNvbXBpbGVyKCk7Ci0JCWlu
dGVybmFsVGVzdChjb21waWxlciwgSkFWQThfQU5OT1RBVElPTl9QUk9DLCAidGVzdFR5cGVBbm5v
dGF0aW9uczI3Iik7Ci0JfQotCQotCXB1YmxpYyB2b2lkIF90ZXN0VHlwZUFubm90YXRpb25zMjdX
aXRoSmF2YWMoKSB0aHJvd3MgRXhjZXB0aW9uIHsKLQkJSmF2YUNvbXBpbGVyIGNvbXBpbGVyID0g
VG9vbFByb3ZpZGVyLmdldFN5c3RlbUphdmFDb21waWxlcigpOwotCQlpbnRlcm5hbFRlc3QoY29t
cGlsZXIsIEpBVkE4X0FOTk9UQVRJT05fUFJPQywgInRlc3RUeXBlQW5ub3RhdGlvbnMyNyIpOwor
CQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIEpBVkE4X0FOTk9UQVRJT05fUFJPQywgInRlc3RQYWNr
YWdlQW5ub3RhdGlvbnMiKTsKIAl9CiAJCiAJcHJpdmF0ZSB2b2lkIGludGVybmFsVGVzdChKYXZh
Q29tcGlsZXIgY29tcGlsZXIsIFN0cmluZyBwcm9jZXNzb3IsIFN0cmluZyB0ZXN0TWV0aG9kKSB0
aHJvd3MgSU9FeGNlcHRpb24gewpAQCAtMzA2LDExICszMTQsMTEgQEAKIAkJCXJldHVybjsKIAkJ
fQogCQlTeXN0ZW0uY2xlYXJQcm9wZXJ0eShwcm9jZXNzb3IpOwotCQlGaWxlIHRhcmdldEZvbGRl
ciA9IFRlc3RVdGlscy5jb25jYXRQYXRoKEJhdGNoVGVzdFV0aWxzLmdldFNyY0ZvbGRlck5hbWUo
KSwgInRhcmdldHMiLCAibW9kZWw4Iik7CisJCUZpbGUgdGFyZ2V0Rm9sZGVyID0gVGVzdFV0aWxz
LmNvbmNhdFBhdGgoQmF0Y2hUZXN0VXRpbHMuZ2V0U3JjRm9sZGVyTmFtZSgpLCAidGFyZ2V0cyIs
ICJmaWxlcjgiKTsKIAkJaWYgKHRlc3RDbGFzcyA9PSBudWxsIHx8IHRlc3RDbGFzcy5lcXVhbHMo
IiIpKSB7Ci0JCQlCYXRjaFRlc3RVdGlscy5jb3B5UmVzb3VyY2VzKCJ0YXJnZXRzL21vZGVsOCIs
IHRhcmdldEZvbGRlcik7CisJCQlCYXRjaFRlc3RVdGlscy5jb3B5UmVzb3VyY2VzKCJ0YXJnZXRz
L2ZpbGVyOCIsIHRhcmdldEZvbGRlcik7CiAJCX0gZWxzZSB7Ci0JCQlCYXRjaFRlc3RVdGlscy5j
b3B5UmVzb3VyY2UoInRhcmdldHMvbW9kZWw4LyIgKyB0ZXN0Q2xhc3MsIHRhcmdldEZvbGRlcik7
CisJCQlCYXRjaFRlc3RVdGlscy5jb3B5UmVzb3VyY2UoInRhcmdldHMvZmlsZXI4LyIgKyB0ZXN0
Q2xhc3MsIHRhcmdldEZvbGRlcik7CiAJCX0KIAkJCiAKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNl
LmpkdC5jb21waWxlci5hcHQudGVzdHMvc3JjL29yZy9lY2xpcHNlL2pkdC9jb21waWxlci9hcHQv
dGVzdHMvSmF2YThGaWxlclRlc3RzLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29tcGlsZXIuYXB0
LnRlc3RzL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29tcGlsZXIvYXB0L3Rlc3RzL0phdmE4RmlsZXJU
ZXN0cy5qYXZhCm5ldyBmaWxlIG1vZGUgMTAwNjQ0CmluZGV4IDAwMDAwMDAuLmIyZGEyNWQKLS0t
IC9kZXYvbnVsbAorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29tcGlsZXIuYXB0LnRlc3RzL3NyYy9v
cmcvZWNsaXBzZS9qZHQvY29tcGlsZXIvYXB0L3Rlc3RzL0phdmE4RmlsZXJUZXN0cy5qYXZhCkBA
IC0wLDAgKzEsOTkgQEAKKy8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCisgKiBDb3B5cmlnaHQgKGMp
IDIwMTQgSUJNIENvcnBvcmF0aW9uLgorICogQWxsIHJpZ2h0cyByZXNlcnZlZC4gVGhpcyBwcm9n
cmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscworICogYXJlIG1hZGUgYXZhaWxhYmxl
IHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCisgKiB3
aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwgYW5kIGlzIGF2YWlsYWJsZSBhdAor
ICogaHR0cDovL3d3dy5lY2xpcHNlLm9yZy9sZWdhbC9lcGwtdjEwLmh0bWwKKyAqIAorICogVGhp
cyBpcyBhbiBpbXBsZW1lbnRhdGlvbiBvZiBhbiBlYXJseS1kcmFmdCBzcGVjaWZpY2F0aW9uIGRl
dmVsb3BlZCB1bmRlciB0aGUgSmF2YQorICogQ29tbXVuaXR5IFByb2Nlc3MgKEpDUCkgYW5kIGlz
IG1hZGUgYXZhaWxhYmxlIGZvciB0ZXN0aW5nIGFuZCBldmFsdWF0aW9uIHB1cnBvc2VzCisgKiBv
bmx5LiBUaGUgY29kZSBpcyBub3QgY29tcGF0aWJsZSB3aXRoIGFueSBzcGVjaWZpY2F0aW9uIG9m
IHRoZSBKQ1AuCisgKiAKKyAqIENvbnRyaWJ1dG9yczoKKyAqICAgICBJQk0gQ29ycG9yYXRpb24g
LSBpbml0aWFsIEFQSSBhbmQgaW1wbGVtZW50YXRpb24KKyAqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
LworCitwYWNrYWdlIG9yZy5lY2xpcHNlLmpkdC5jb21waWxlci5hcHQudGVzdHM7CisKK2ltcG9y
dCBqYXZhLmlvLkZpbGU7CitpbXBvcnQgamF2YS5pby5JT0V4Y2VwdGlvbjsKK2ltcG9ydCBqYXZh
LnV0aWwuQXJyYXlMaXN0OworaW1wb3J0IGphdmEudXRpbC5MaXN0OworCitpbXBvcnQgamF2YXgu
bGFuZy5tb2RlbC5Tb3VyY2VWZXJzaW9uOworaW1wb3J0IGphdmF4LnRvb2xzLkphdmFDb21waWxl
cjsKK2ltcG9ydCBqYXZheC50b29scy5Ub29sUHJvdmlkZXI7CisKK2ltcG9ydCBvcmcuZWNsaXBz
ZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIudG9vbC5FY2xpcHNlQ29tcGlsZXI7CisKK2ltcG9ydCBq
dW5pdC5mcmFtZXdvcmsuVGVzdENhc2U7CisKK3B1YmxpYyBjbGFzcyBKYXZhOEZpbGVyVGVzdHMg
ZXh0ZW5kcyBUZXN0Q2FzZSB7CisJcHJpdmF0ZSBzdGF0aWMgZmluYWwgU3RyaW5nIEZJTEVSX1BS
T0MgPSAib3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLmFwdC50ZXN0cy5wcm9jZXNzb3JzLmZpbGVy
LkphdmE4RmlsZXJQcm9jZXNzb3IiOworCisJLyoqCisJICogVmFsaWRhdGUgdGhlIHRlc3RFbGVt
ZW50IHRlc3QgYWdhaW5zdCB0aGUgamF2YWMgY29tcGlsZXIuCisJICogQHRocm93cyBJT0V4Y2Vw
dGlvbiAKKwkgKi8KKwlwdWJsaWMgdm9pZCB0ZXN0RmlsZXJXaXRoU3lzdGVtQ29tcGlsZXIoKSB0
aHJvd3MgSU9FeGNlcHRpb24geworCQlKYXZhQ29tcGlsZXIgY29tcGlsZXIgPSBUb29sUHJvdmlk
ZXIuZ2V0U3lzdGVtSmF2YUNvbXBpbGVyKCk7CisJCWlmIChjb21waWxlciA9PSBudWxsKSB7CisJ
CQlTeXN0ZW0ub3V0LnByaW50bG4oIk5vIHN5c3RlbSBqYXZhIGNvbXBpbGVyIGF2YWlsYWJsZSIp
OworCQkJcmV0dXJuOworCQl9CisJCWludGVybmFsVGVzdChjb21waWxlciwgdHJ1ZSk7CisJfQor
CisJLyoqCisJICogQXR0ZW1wdCB0byByZWFkIHZhcmlvdXMgZWxlbWVudHMgb2YgdGhlIEVsZW1l
bnQgaGllcmFyY2h5LgorCSAqIEB0aHJvd3MgSU9FeGNlcHRpb24gCisJICovCisJcHVibGljIHZv
aWQgdGVzdEZpbGVyV2l0aEVjbGlwc2VDb21waWxlcigpIHRocm93cyBJT0V4Y2VwdGlvbiB7CisJ
CUphdmFDb21waWxlciBjb21waWxlciA9IEJhdGNoVGVzdFV0aWxzLmdldEVjbGlwc2VDb21waWxl
cigpOworCQlpbnRlcm5hbFRlc3QoY29tcGlsZXIsIGZhbHNlKTsKKwl9CisKKwlwcml2YXRlIHZv
aWQgaW50ZXJuYWxUZXN0KEphdmFDb21waWxlciBjb21waWxlciwgYm9vbGVhbiBpc1N5c3RlbUNv
bW1waWxlcikgdGhyb3dzIElPRXhjZXB0aW9uIHsKKwkJaWYgKCFjYW5SdW5KYXZhOCgpKSB7CisJ
CQlyZXR1cm47CisJCX0KKwkJU3lzdGVtLmNsZWFyUHJvcGVydHkoRklMRVJfUFJPQyk7CisJCUZp
bGUgdGFyZ2V0Rm9sZGVyID0gVGVzdFV0aWxzLmNvbmNhdFBhdGgoQmF0Y2hUZXN0VXRpbHMuZ2V0
U3JjRm9sZGVyTmFtZSgpLCAidGFyZ2V0cyIsICJmaWxlcjgiKTsKKwkJQmF0Y2hUZXN0VXRpbHMu
Y29weVJlc291cmNlcygidGFyZ2V0cy9maWxlcjgiLCB0YXJnZXRGb2xkZXIpOworCisJCUxpc3Q8
U3RyaW5nPiBvcHRpb25zID0gbmV3IEFycmF5TGlzdDxTdHJpbmc+KCk7CisJCW9wdGlvbnMuYWRk
KCItQSIgKyBGSUxFUl9QUk9DKTsKKwkJLy8gSmF2YWMgMS44IGRvZXNuJ3QgKHlldD8pIHN1cHBv
cnQgdGhlIC0xLjggb3B0aW9uCisJCWlmIChjb21waWxlciBpbnN0YW5jZW9mIEVjbGlwc2VDb21w
aWxlcikgeworCQkJb3B0aW9ucy5hZGQoIi0xLjgiKTsKKwkJfQorCQlCYXRjaFRlc3RVdGlscy5j
b21waWxlVHJlZShjb21waWxlciwgb3B0aW9ucywgdGFyZ2V0Rm9sZGVyKTsKKworCQkvLyBJZiBp
dCBzdWNjZWVkZWQsIHRoZSBwcm9jZXNzb3Igd2lsbCBoYXZlIHNldCB0aGlzIHByb3BlcnR5IHRv
ICJzdWNjZWVkZWQiOworCQkvLyBpZiBub3QsIGl0IHdpbGwgc2V0IGl0IHRvIGFuIGVycm9yIHZh
bHVlLgorCQlhc3NlcnRFcXVhbHMoInN1Y2NlZWRlZCIsIFN5c3RlbS5nZXRQcm9wZXJ0eShGSUxF
Ul9QUk9DKSk7CisJfQorCXB1YmxpYyBib29sZWFuIGNhblJ1bkphdmE4KCkgeworCQl0cnkgewor
CQkJU291cmNlVmVyc2lvbi52YWx1ZU9mKCJSRUxFQVNFXzgiKTsKKwkJfSBjYXRjaChJbGxlZ2Fs
QXJndW1lbnRFeGNlcHRpb24gaWFlKSB7CisJCQlyZXR1cm4gZmFsc2U7CisJCX0KKwkJcmV0dXJu
IHRydWU7CisJfQorCS8qIChub24tSmF2YWRvYykKKwkgKiBAc2VlIGp1bml0LmZyYW1ld29yay5U
ZXN0Q2FzZSNzZXRVcCgpCisJICovCisJcHJvdGVjdGVkIHZvaWQgc2V0VXAoKSB0aHJvd3MgRXhj
ZXB0aW9uIHsKKwkJc3VwZXIuc2V0VXAoKTsKKwkJQmF0Y2hUZXN0VXRpbHMuaW5pdCgpOworCX0K
KworCS8qIChub24tSmF2YWRvYykKKwkgKiBAc2VlIGp1bml0LmZyYW1ld29yay5UZXN0Q2FzZSN0
ZWFyRG93bigpCisJICovCisJcHJvdGVjdGVkIHZvaWQgdGVhckRvd24oKSB0aHJvd3MgRXhjZXB0
aW9uIHsKKwkJc3VwZXIudGVhckRvd24oKTsKKwl9CisKK30=
</data>

          </attachment>
      

    </bug>

</bugzilla>