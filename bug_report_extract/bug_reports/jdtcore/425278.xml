<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>425278</bug_id>
          
          <creation_ts>2014-01-10 06:45:00 -0500</creation_ts>
          <short_desc>[1.8][compiler] Suspect error: The target type of this expression is not a well formed parameterized type due to bound(s) mismatch</short_desc>
          <delta_ts>2014-02-21 07:00:35 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>jarthana</cc>
    
    <cc>sarika.sinha</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2347921</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-10 06:45:37 -0500</bug_when>
    <thetext>// --
interface I&lt;T, S extends X&lt;T&gt;&gt; { 
    T foo(S p);
}

public class X&lt;T&gt;  {
    public void bar() {
    I&lt;Object, X&lt;Object&gt;&gt; f = (p) -&gt; p; // Error
    }
}

Compiles fine with javac.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2348563</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-11 17:37:29 -0500</bug_when>
    <thetext>Bound check is performed for X&lt;java.lang.Object&gt; as a candidate for &lt;S extends X&lt;T&gt;&gt;, which reports MISMATCH because X&lt;Object&gt; is not compatible with X&lt;T&gt;.

We are lacking information that at this point T is being instantiated to Object.

This can be resolved by delaying bound check until we have created the parameterized type, which can then be used as a substitution during bound check.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2348566</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-11 17:48:05 -0500</bug_when>
    <thetext>Released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=0376a8916bf0d47726d1ecccdbf4f7791bd5714e</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2348660</commentid>
    <comment_count>3</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-01-13 00:20:35 -0500</bug_when>
    <thetext>The following case is still rejected:

I&lt;Object, ? extends X&lt;Object&gt;&gt; f = (p) -&gt; p; // Error

Note the &apos;?&apos; for the second type argument.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2348661</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-13 00:22:48 -0500</bug_when>
    <thetext>Stephan, thanks for taking a look at the additional failure.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2353764</commentid>
    <comment_count>5</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-23 13:50:40 -0500</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #3)
&gt; The following case is still rejected:
&gt; 
&gt; I&lt;Object, ? extends X&lt;Object&gt;&gt; f = (p) -&gt; p; // Error
&gt; 
&gt; Note the &apos;?&apos; for the second type argument.

We fail when trying to compute the non-wildcard parameterization of I&lt;Object,? extends X&lt;Object&gt;&gt;

This happens when evaluating the following sentence from 9.8 (Functional Interfaces): &quot;If Ai is a wildcard, and the corresponding type parameter bound, Bi, mentions one of P1...Pn, then Ti is undefined and there is no function type.&quot;

Step-by-step:

From the LHS of the assignment:
F&lt;A1...An&gt; = I&lt;Object,? extends X&lt;Object&gt;&gt;
A1 = Object
A2 = ? extends X&lt;Object&gt;

From the declaration of I:
P1 = T
P2 = S extends X&lt;T&gt;
B1 = n/a
B2 = X&lt;T&gt;

A2 (? extends X&lt;Object&gt;) is a wildcard, and the corresponding bound, B2 (X&lt;T&gt;), mentions P1 (T), then Ti is undefined and there is no function type.

So, how did we get there? Maybe I was using incorrect input?

We need the ground target type according to 15.27.3:

&quot;If T is a wildcard-parameterized functional interface type and the lambda expression is implicitly-typed, then the ground target type is the non-wildcard parameterization (9.8) of the target type.&quot;

T = I&lt;Object, ? extends X&lt;Object&gt;&gt; 
    - a wildcard-parameterized functional interface type, indeed
lambda = (p) -&gt; p
    - implicitly-typed, indeed


The only point against ECJ&apos;s current behavior: javac8 accepts the snippet :(</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2353778</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-23 14:11:55 -0500</bug_when>
    <thetext>Trying to find a counter-example demonstrating that the program is unsafe, I have difficulties in making any use of the wildcard. As given, the wildcard appears in a parameter position, but a parameter &quot;? extends Something&quot; can never be matched, the method cannot be called. When swapping S and T in the definition of foo() we get a wildcard return, which is just as good as directly using the wildcard bound. Saying we can return X *or better* doesn&apos;t add any value to the signature (this flexibility is already given by normal rules of polymorphism).

Does anyone see a usage where this wildcard actually makes a positive difference (other than making f unusable)?


I see two options:

Ask clarification about conflict between my above analysis and javac behaviour

or

Let it rest as an irrelevant corner case.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2353855</commentid>
    <comment_count>7</comment_count>
    <who name="Timo Kinnunen">timo.kinnunen</who>
    <bug_when>2014-01-23 16:27:47 -0500</bug_when>
    <thetext>On one hand, all these are OK by both:

  public void bar() {
    I&lt;Object, X&lt;Object&gt;&gt; f = (p) -&gt; p;
    I&lt;Object, ? extends X&lt;Object&gt;&gt; f2 = f;
    I&lt;?, ? extends X&lt;Object&gt;&gt; f3 = f;
    I&lt;Object, ? extends X&lt;?&gt;&gt; f4 = f;
    I&lt;?, ? extends X&lt;?&gt;&gt; f5 = f;
    I&lt;Object, ?&gt; f6 = f;
    I&lt;?, ?&gt; f7 = f;
  }

And on the other hand, almost all of these are errors according to both:

  public void bar2() {
    I&lt;Object, X&lt;Object&gt;&gt; f = (p) -&gt; p;
    I&lt;Object, ? extends X&lt;Object&gt;&gt; f2 = (p) -&gt; p; // ECJ
    I&lt;?, ? extends X&lt;Object&gt;&gt; f3 = (p) -&gt; p; // ECJ
    I&lt;Object, ? extends X&lt;?&gt;&gt; f4 = (p) -&gt; p; // ECJ, javac
    I&lt;?, ? extends X&lt;?&gt;&gt; f5 = (p) -&gt; p; // ECJ, javac
    I&lt;Object, ?&gt; f6 = (p) -&gt; p; // ECJ, javac
    I&lt;?, ?&gt; f7 = (p) -&gt; p; // ECJ, javac
  }

  So reporting a bug against javac might be a third option.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354299</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-24 12:01:28 -0500</bug_when>
    <thetext>*** Bug 426561 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354622</commentid>
    <comment_count>9</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-26 08:07:10 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #6)

&gt; I see two options:
&gt; 
&gt; Ask clarification about conflict between my above analysis and javac
&gt; behaviour

Let us do this please, TIA.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2359889</commentid>
    <comment_count>10</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-06 18:59:27 -0500</bug_when>
    <thetext>See Stephan&apos;s post here: http://mail.openjdk.java.net/pipermail/lambda-spec-observers/2014-February/000663.html and the spec lead&apos;s acknowledgement that
it is a javac bug here:

http://mail.openjdk.java.net/pipermail/lambda-spec-observers/2014-February/000664.html

Reverting to original resolution state of FIXED instead of INVALID for the
reopen.

Thanks Stephan and Jay.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2359942</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-06 23:54:00 -0500</bug_when>
    <thetext>For the record, here is the javac bug report: https://bugs.openjdk.java.net/browse/JDK-8033810</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2359944</commentid>
    <comment_count>12</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-07 00:26:52 -0500</bug_when>
    <thetext>Test encoding the correct (i.e ECJ&apos;s) behavior released here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=cb8177fed2addb8cad9e088261d782e571c3c039</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2366589</commentid>
    <comment_count>13</comment_count>
    <who name="Sarika Sinha">sarika.sinha</who>
    <bug_when>2014-02-21 04:37:10 -0500</bug_when>
    <thetext>Verified as working for Eclipse + Java 8 RC1 using Kepler SR2(RC4) +   
Eclipse Java Development Tools Patch for Java 8 Support (BETA)	
1.0.0.v20140220-2054</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2366590</commentid>
    <comment_count>14</comment_count>
    <who name="Sarika Sinha">sarika.sinha</who>
    <bug_when>2014-02-21 04:41:13 -0500</bug_when>
    <thetext>Verified as working for Eclipse + Java 8 RC1 using Kepler SR2(RC4) +   
Eclipse Java Development Tools Patch for Java 8 Support (BETA)	
1.0.0.v20140220-2054</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>