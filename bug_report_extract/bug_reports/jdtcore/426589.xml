<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>426589</bug_id>
          
          <creation_ts>2014-01-24 09:54:00 -0500</creation_ts>
          <short_desc>[1.8][compiler] Compiler error with generic method/constructor invocation as vargs argument</short_desc>
          <delta_ts>2014-01-24 19:49:51 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          <blocked>424053</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Thomas Schindl">tom.schindl</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>markus_keller</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2354199</commentid>
    <comment_count>0</comment_count>
    <who name="Thomas Schindl">tom.schindl</who>
    <bug_when>2014-01-24 09:54:10 -0500</bug_when>
    <thetext>the first method does NOT compile, the 2nd does:

import javafx.animation.Interpolator;
import javafx.animation.KeyFrame;
import javafx.animation.KeyValue;
import javafx.beans.property.SimpleDoubleProperty;
import javafx.util.Duration;

public class FXTestCases {
	void test1_fail() {
		KeyFrame keyFrame = new KeyFrame(Duration.millis(100),new KeyValue(new SimpleDoubleProperty(), 0,
                Interpolator.EASE_BOTH));
	}
	
	void test1_success() {
		KeyValue kv = new KeyValue(new SimpleDoubleProperty(), 0,
                Interpolator.EASE_BOTH);
		new KeyFrame(Duration.millis(100),kv);
	}
}

To get the javafx imports resolved in eclipse you need to modify yours project JRE System Library&apos;s Access rules to make &quot;javafx/**&quot; accessible.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354296</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-24 11:56:55 -0500</bug_when>
    <thetext>Sams story as https://bugs.eclipse.org/bugs/show_bug.cgi?id=426590. On
branch head, this compiles fine. But on Java 8 Support (BETA)	1.0.0.v20140124-0106_BETA_JAVA8	org.eclipse.jdt.java8patch.feature.group it is broken
as described.

I&apos;ll wait for tonight&apos;s refresh of the update site, verify the bugs are gone, 
add regression tests from the examples and resolve as WORKSFORME.

Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354342</commentid>
    <comment_count>2</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-01-24 13:07:36 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #1)
On the current BETA_JAVA8 (c37ad47cfe3a592e86ce37a47b02bf6402d7f1de), it doesn&apos;t compile for me (using jdk-8-ea-bin-b120 or jdk-8-ea-bin-b124).

Maybe you have unreleased changes in your workspace that fix this?

This variant with an explicit type argument &quot;new &lt;Number&gt;KeyValue(..)&quot; also compiles for me:

	void test1_success2() {
		KeyFrame keyFrame = new KeyFrame(
				Duration.millis(100),
				new &lt;Number&gt;KeyValue(new SimpleDoubleProperty(), 0, Interpolator.EASE_BOTH));
	}

And this one with a generic method instead of a constructor also fails:

	void test1_fail2() {
		new KeyFrame(Duration.millis(100), getKV());
	}

	private &lt;T&gt; KeyValue getKV() {
		return new KeyValue(new SimpleDoubleProperty(), 0,
				Interpolator.EASE_BOTH);
	}


Hint: Source for jdk8\jre\lib\ext\jfxrt.jar is available in jdk8\javafx-src.zip</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354345</commentid>
    <comment_count>3</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-01-24 13:09:38 -0500</bug_when>
    <thetext>Self-contained example (compiles fine with javac 7 &amp; 8 and with Eclipse master):

package bug426589;

public class Varargs {
	void take(String... strings) {
	}
	
	void test() {
		take(getString());
	}

	private &lt;T&gt; String getString() {
		return &quot;hi&quot;;
	}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354472</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-24 18:01:25 -0500</bug_when>
    <thetext>(In reply to Markus Keller from comment #2)
&gt; (In reply to Srikanth Sankaran from comment #1)
&gt; On the current BETA_JAVA8 (c37ad47cfe3a592e86ce37a47b02bf6402d7f1de), it
&gt; doesn&apos;t compile for me (using jdk-8-ea-bin-b120 or jdk-8-ea-bin-b124).
&gt; 
&gt; Maybe you have unreleased changes in your workspace that fix this?

My bad. No changes in my work space - for a different bug I had changed
the project setting to 1.7 and it stayed that way. So it is actually using
the old inference engine while being successful.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354477</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-24 18:25:13 -0500</bug_when>
    <thetext>Some recent changes in parameterCompatibilityLevel18 seem to have gaps.

Regression test available here: 

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=86a1b5b198226ed2fe9370235bcf14d88172af27

Stephan, thanks for following up.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354488</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-24 18:56:22 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #5)
&gt; Some recent changes in parameterCompatibilityLevel18 seem to have gaps.
&gt; 
&gt; Regression test available here: 
&gt; 
&gt; http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
&gt; ?h=BETA_JAVA8&amp;id=86a1b5b198226ed2fe9370235bcf14d88172af27

I have a fix for this one. Not sure what could have broken it recently, but handling of varargs was a bit naive in this spot :)

Still need to check the other examples.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354489</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-01-24 19:07:38 -0500</bug_when>
    <thetext>All looks well now: test enabled &amp; fix released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=9ea0d26717077cc31f78561d1f110949d5e1c944

Thanks for excellent preparation (test and pointing to the exact method needing a fix).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354495</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-24 19:34:06 -0500</bug_when>
    <thetext>I verified that the test case from comment#0 compiles fine now.</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>