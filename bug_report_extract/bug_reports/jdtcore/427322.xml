<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>427322</bug_id>
          
          <creation_ts>2014-02-03 14:54:00 -0500</creation_ts>
          <short_desc>[1.8][code assist] Eclipse hangs upon completion just past lambda</short_desc>
          <delta_ts>2014-02-25 01:55:22 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3.1</version>
          <rep_platform>All</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>critical</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Cornel Izbasa">cizbasa</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>anchakrk</cc>
    
    <cc>daniel_megert</cc>
    
    <cc>manju656</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2358173</commentid>
    <comment_count>0</comment_count>
    <who name="Cornel Izbasa">cizbasa</who>
    <bug_when>2014-02-03 14:54:11 -0500</bug_when>
    <thetext>Start with the valid and working program below, computing a factorial:
------------------------------------------------
package java8.test;

public class Main {
	
	interface Duo {
		int apply(int n, Duo g);
	}
	
 	public static void main(String[] args) {
		Duo f = (n, g) -&gt; n &gt; 0 ? n * g.apply(n - 1, g) : 1;  
		System.out.println(f.apply(5, f));
	}
}
------------------------------------------------

then change the line declaring the &quot;Duo f&quot; variable as such:
------------------------------------------------
		Duo f = (n, g) -&gt; n &gt; 0 ? n * g.apply(n - 1, g) : 1, f.
------------------------------------------------

After the &quot;.&quot; is entered after &quot;f&quot;, Eclipse hangs and must be killed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2358389</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-04 05:35:42 -0500</bug_when>
    <thetext>Fix and tests here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=696ed15a1e8614ddbc6d608510de2603ca6573e4.

We were missing a call to the routine that handles lambda closure, instead 
waiting for the entire LocalVariableDeclaration to be reduced. However the
fact that we think we are inside the lambda expression even past its closure
interferes with subsequent parsing.

As a follow up, I&apos;ll shortly also hook up the new infrastructure for completion
support in lambda expressions into IProgressMonitor so timeouts would
automatically trigger and preclude such freezes.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2358439</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-02-04 07:36:47 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #1)

&gt; As a follow up, I&apos;ll shortly also hook up the new infrastructure for
&gt; completion
&gt; support in lambda expressions into IProgressMonitor so timeouts would
&gt; automatically trigger and preclude such freezes.

I hooked up the CompletionParser infrastructure into the canonical of scheme
of things i.e IProgressMonitor that the CompletionEngine already tracks:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=7dbc472feab6f8985cd72052d6eaace52c7ea562</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2367849</commentid>
    <comment_count>3</comment_count>
    <who name="ANIRBAN CHAKRABORTY">anchakrk</who>
    <bug_when>2014-02-24 15:02:59 -0500</bug_when>
    <thetext>Verified as working for Eclipse + Java 8 RC1 using Kepler SR1 + Eclipse Java Development Tools Patch for Java 8 Support (BETA) 1.0.0.v20140220-2054</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2367968</commentid>
    <comment_count>4</comment_count>
    <who name="Cornel Izbasa">cizbasa</who>
    <bug_when>2014-02-25 01:55:22 -0500</bug_when>
    <thetext>Great, thanks for the fix!</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>