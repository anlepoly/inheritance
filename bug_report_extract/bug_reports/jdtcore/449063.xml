<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>449063</bug_id>
          
          <creation_ts>2014-10-28 09:56:00 -0400</creation_ts>
          <short_desc>[1.8][compiler] Bring back generic signatures for Lambda Expressions</short_desc>
          <delta_ts>2015-01-14 15:02:13 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>enhancement</bug_severity>
          <target_milestone>4.4.2</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Timo Walther">eclipse.org</reporter>
          <assigned_to name="Sasikanth Bharadwaj">saammana</assigned_to>
          <cc>jarthana</cc>
    
    <cc>markus_keller</cc>
    
    <cc>srikanth_sankaran</cc>
          <qa_contact name="Srikanth Sankaran">srikanth_sankaran</qa_contact>
          <votes>0</votes>

      

      

      <flag name="review"
          id="63758"
          type_id="1"
          status="+"
          setter="srikanth_sankaran"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2472910</commentid>
    <comment_count>0</comment_count>
    <who name="Timo Walther">eclipse.org</who>
    <bug_when>2014-10-28 09:56:20 -0400</bug_when>
    <thetext>Until Eclipse 4.4 the generic signature of a Lambda Expression was stored within the class file, which made it possible to extract type information for creating type-safe programs. With the merge of the patch for Bug 436542 (https://bugs.eclipse.org/bugs/show_bug.cgi?id=436542) this feature has been completely thrown away.

The following snippet shows an example where a generic signature is a very valuable feature:

/////
public class Test {
    public static interface Map&lt;IN, OUT&gt; {
        public OUT map(IN in);
    }

    public static class Tuple&lt;T1, T2&gt; {
        private T1 field1;
        private T2 field2;
    }

    public static void main(String[] strings) throws Exception {
        Map&lt;Tuple&lt;String, Double&gt;, Tuple&lt;Integer, String&gt;&gt; map = (in) -&gt; new Tuple&lt;&gt;();
        SerializedLambda sl = getSerializedLambda(lambda);      
        Method m = getLambdaMethod(sl);

        // Use the type information stored in signature
        System.out.println(m.getGenericReturnType());
        for (Type t : m.getGenericParameterTypes()) {
            System.out.println(t);
        }
    }
}
/////
Another discussion on this topic can be found here: 
http://stackoverflow.com/questions/21887358/reflection-type-inference-on-java-8-lambdas

It would be a great enhancement to bring the functionality back (by default or at least with help of a compiler option).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472928</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-10-28 10:41:47 -0400</bug_when>
    <thetext>Sasi, please take a look. Since the pruning of generic signature was not
essential to the fix for https://bugs.eclipse.org/bugs/show_bug.cgi?id=436542, 
we can restore it.

However, since javac does not emit it, emitting it under an option would
be a safe course particularly to back port to 4.4.2

I am not sure if the UI would support this or this needs to be an option
users will have to directly modify in the preferences file.

Markus, let us know what your thoughts are.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2472981</commentid>
    <comment_count>2</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-10-28 12:17:56 -0400</bug_when>
    <thetext>The exact form of the synthetic lambda method is not specified; not even its existence is granted. I&apos;m not against bringing back generic signatures if they are actually interesting in some special use cases.

If you don&apos;t want to emit them always, you can add an internal option that can be set in org.eclipse.jdt.core.prefs. I wouldn&apos;t make this API, and JDT UI won&apos;t add a checkbox.

As others already said on stackoverflow, lambdas have deliberately been designed without a way to access &quot;this&quot; and without a way to perform reflection. Serialized lambdas are an ugly hack.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2473600</commentid>
    <comment_count>3</comment_count>
    <who name="Timo Walther">eclipse.org</who>
    <bug_when>2014-10-29 10:49:30 -0400</bug_when>
    <thetext>Yes, you are right, it is a very ugly hack and we are aware of that. I&apos;m working for the Apache Flink project and we try to make a best-effort solution for this. We can do a better data-intensive runtime in Java if we have more specific type information. We are also working on a patch to get this into javac (hopefully).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2480986</commentid>
    <comment_count>4</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-11-12 00:01:02 -0500</bug_when>
    <thetext>(In reply to comment #1)
&gt; 
&gt; However, since javac does not emit it, emitting it under an option would
&gt; be a safe course particularly to back port to 4.4.2

patch coming shortly. Am I right in assuming that the implicit lambdas (for method references etc) should also be governed by the same option and should not be given special treatment (as in bug 447119)?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2480997</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-12 01:27:38 -0500</bug_when>
    <thetext>(In reply to Sasikanth Bharadwaj from comment #4)
&gt; (In reply to comment #1)
&gt; &gt; 
&gt; &gt; However, since javac does not emit it, emitting it under an option would
&gt; &gt; be a safe course particularly to back port to 4.4.2
&gt; 
&gt; patch coming shortly. Am I right in assuming that the implicit lambdas (for
&gt; method references etc) should also be governed by the same option and should
&gt; not be given special treatment (as in bug 447119)?

No.

Implicit lambda is a code generation convenience/choice we are using. They
should always carry generic signatures if the arguments, return type or
thrown exceptions have generic signatures.

OIOW master behavior is good.

The new option will when in effect also emit generic signatures for lambda
expressions that today don&apos;t get generic signatures.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2481114</commentid>
    <comment_count>6</comment_count>
      <attachid>248601</attachid>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-11-12 04:50:07 -0500</bug_when>
    <thetext>Created attachment 248601
patch

Added new compiler option and tests for various settings of that option</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2481119</commentid>
    <comment_count>7</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-11-12 04:59:17 -0500</bug_when>
    <thetext>(In reply to comment #5)
&gt; Implicit lambda is a code generation convenience/choice we are using. They
&gt; should always carry generic signatures if the arguments, return type or
&gt; thrown exceptions have generic signatures.
&gt; 
&gt; OIOW master behavior is good.
Thought so. Attached patch with new compiler option and appropriate handling of the option in LambdaExpression. Includes tests for various settings of the option for implicit/explicit lambdas. Srikanth, please go through. 

Used commit http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/diff/?id=1b18be0be9e4004bc36c661ce71eb9b1106a6444 as reference for adding compiler option, if there&apos;s anything missing or unnecessary, please let me know.

All java8 tests pass.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2481737</commentid>
    <comment_count>8</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-11-12 23:50:58 -0500</bug_when>
    <thetext>Patch looks good to me.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2481745</commentid>
    <comment_count>9</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-11-13 01:55:36 -0500</bug_when>
    <thetext>Fix and tests released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/diff/?id=35ce3cd769971f5dca3aae3c48f3088e32084ea9</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2495351</commentid>
    <comment_count>10</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-12-10 11:09:01 -0500</bug_when>
    <thetext>Verified for 4.5 M4 with build I20141209-2000</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2505471</commentid>
    <comment_count>11</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-01-14 06:38:03 -0500</bug_when>
    <thetext>+1 for back porting.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2505777</commentid>
    <comment_count>12</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-01-14 15:02:13 -0500</bug_when>
    <thetext>Pushed for tonight&apos;s M build:


http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=R4_4_maintenance&amp;id=db347133aed2f2a795d0b51f261d5a5aadfdc776</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>248601</attachid>
            <date>2014-11-12 04:50:00 -0500</date>
            <delta_ts>2014-11-12 04:50:07 -0500</delta_ts>
            <desc>patch</desc>
            <filename>fix-and-tests-for-bug449063.patch</filename>
            <type>text/plain</type>
            <size>30083</size>
            <attacher name="Sasikanth Bharadwaj">saammana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb21waWxlci50b29sLnRlc3RzL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29tcGlsZXIvdG9vbC90ZXN0cy9Db21waWxlclRvb2xUZXN0cy5qYXZhIGIv
b3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLnRvb2wudGVzdHMvc3JjL29yZy9lY2xpcHNlL2pkdC9j
b21waWxlci90b29sL3Rlc3RzL0NvbXBpbGVyVG9vbFRlc3RzLmphdmEKaW5kZXggN2NlZjJmMC4u
NjdlN2Q4YiAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLnRvb2wudGVzdHMv
c3JjL29yZy9lY2xpcHNlL2pkdC9jb21waWxlci90b29sL3Rlc3RzL0NvbXBpbGVyVG9vbFRlc3Rz
LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvbXBpbGVyLnRvb2wudGVzdHMvc3JjL29yZy9l
Y2xpcHNlL2pkdC9jb21waWxlci90b29sL3Rlc3RzL0NvbXBpbGVyVG9vbFRlc3RzLmphdmEKQEAg
LTE0MSw2ICsxNDEsNyBAQAogCQkiLXByb2M6bm9uZSIsCiAJCSItcHJvYzpvbmx5IiwKIAkJIi1w
YXJhbWV0ZXJzIiwKKwkJIi1nZW5lcmljc2lnbmF0dXJlIgogCX07CiBzdGF0aWMgZmluYWwgU3Ry
aW5nW10gRkFLRV9aRVJPX0FSR19PUFRJT05TID0gbmV3IFN0cmluZ1tdIHsgCiAJLy8gYSBzZXJp
ZXMgb2YgZmFrZSBvcHRpb25zIHRvIHRlc3QgdGhlIGJlaGF2aW9yIHVwb24gaWdub3JlZCBhbmQg
CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29tcGlsZXIudG9vbC9zcmMvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL3Rvb2wvT3B0aW9ucy5qYXZhIGIvb3JnLmVjbGlwc2Uu
amR0LmNvbXBpbGVyLnRvb2wvc3JjL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci90
b29sL09wdGlvbnMuamF2YQppbmRleCBhNTgxNTA5Li40YjJmMWZmIDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29tcGlsZXIudG9vbC9zcmMvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL3Rvb2wvT3B0aW9ucy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb21waWxlci50
b29sL3NyYy9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvdG9vbC9PcHRpb25zLmph
dmEKQEAgLTEsNSArMSw1IEBACiAvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKgotICogQ29weXJpZ2h0
IChjKSAyMDA2LCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgorICogQ29weXJpZ2h0
IChjKSAyMDA2LCAyMDE0IElCTSBDb3Jwb3JhdGlvbiBhbmQgb3RoZXJzLgogICogQWxsIHJpZ2h0
cyByZXNlcnZlZC4gVGhpcyBwcm9ncmFtIGFuZCB0aGUgYWNjb21wYW55aW5nIG1hdGVyaWFscwog
ICogYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBvZiB0aGUgRWNsaXBzZSBQdWJs
aWMgTGljZW5zZSB2MS4wCiAgKiB3aGljaCBhY2NvbXBhbmllcyB0aGlzIGRpc3RyaWJ1dGlvbiwg
YW5kIGlzIGF2YWlsYWJsZSBhdApAQCAtNjUsNiArNjUsNyBAQAogCQlPcHRpb25zLlpFUk9fQVJH
VU1FTlRfT1BUSU9OUy5hZGQoIi1YcHJpbnRQcm9jZXNzb3JJbmZvIik7Ly8kTk9OLU5MUy0xJAog
CQlPcHRpb25zLlpFUk9fQVJHVU1FTlRfT1BUSU9OUy5hZGQoIi1YcHJpbnRSb3VuZHMiKTsvLyRO
T04tTkxTLTEkCiAJCU9wdGlvbnMuWkVST19BUkdVTUVOVF9PUFRJT05TLmFkZCgiLXBhcmFtZXRl
cnMiKTsvLyROT04tTkxTLTEkCisJCU9wdGlvbnMuWkVST19BUkdVTUVOVF9PUFRJT05TLmFkZCgi
LWdlbmVyaWNzaWduYXR1cmUiKTsvLyROT04tTkxTLTEkCiAKIAkJRklMRV9NQU5BR0VSX09QVElP
TlMgPSBuZXcgSGFzaFNldDxTdHJpbmc+KCk7CiAJCU9wdGlvbnMuRklMRV9NQU5BR0VSX09QVElP
TlMuYWRkKCItYm9vdGNsYXNzcGF0aCIpOy8vJE5PTi1OTFMtMSQKZGlmZiAtLWdpdCBhL29yZy5l
Y2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90
ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0JhdGNoQ29tcGlsZXJUZXN0LmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVz
dHMvY29tcGlsZXIvcmVncmVzc2lvbi9CYXRjaENvbXBpbGVyVGVzdC5qYXZhCmluZGV4IDA1OTNl
NTcuLjFmNDg5NGIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBp
bGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0Jh
dGNoQ29tcGlsZXJUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29t
cGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24v
QmF0Y2hDb21waWxlclRlc3QuamF2YQpAQCAtMTY1Myw2ICsxNjUzLDcgQEAKICAgICAgICAgIiAg
ICAtaW5saW5lSlNSICAgICAgICAgaW5saW5lIEpTUiBieXRlY29kZSAoaW1wbGljaXQgaWYgdGFy
Z2V0ID49IDEuNSlcbiIgKwogICAgICAgICAiICAgIC1lbmFibGVKYXZhZG9jICAgICBjb25zaWRl
ciByZWZlcmVuY2VzIGluIGphdmFkb2NcbiIgKwogICAgICAgICAiICAgIC1wYXJhbWV0ZXJzICAg
ICAgICBnZW5lcmF0ZSBtZXRob2QgcGFyYW1ldGVycyBhdHRyaWJ1dGUgKGZvciB0YXJnZXQgPj0g
MS44KVxuIiArCisgICAgICAgICIgICAgLWdlbmVyaWNzaWduYXR1cmUgIGdlbmVyYXRlIGdlbmVy
aWMgc2lnbmF0dXJlIGZvciBsYW1iZGEgZXhwcmVzc2lvbnNcbiIgKwogICAgICAgICAiICAgIC1Y
ZW1hY3MgICAgICAgICAgICB1c2VkIHRvIGVuYWJsZSBlbWFjcy1zdHlsZSBvdXRwdXQgaW4gdGhl
IGNvbnNvbGUuXG4iICsKICAgICAgICAgIiAgICAgICAgICAgICAgICAgICAgICAgSXQgZG9lcyBu
b3QgYWZmZWN0IHRoZSB4bWwgbG9nIG91dHB1dFxuIiArCiAgICAgICAgICIgICAgLW1pc3NpbmdO
dWxsRGVmYXVsdCAgcmVwb3J0IG1pc3NpbmcgZGVmYXVsdCBudWxsbmVzcyBhbm5vdGF0aW9uXG4i
ICsgCkBAIC0xODk3LDYgKzE4OTgsNyBAQAogCQkJIgkJPG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBz
ZS5qZHQuY29yZS5jb21waWxlci5hbm5vdGF0aW9uLm51bGxhYmxlXCIgdmFsdWU9XCJvcmcuZWNs
aXBzZS5qZHQuYW5ub3RhdGlvbi5OdWxsYWJsZVwiLz5cbiIgKyAKIAkJCSIJCTxvcHRpb24ga2V5
PVwib3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuYW5ub3RhdGlvbi5udWxsYW5hbHlzaXNc
IiB2YWx1ZT1cImRpc2FibGVkXCIvPlxuIiArIAogCQkJIgkJPG9wdGlvbiBrZXk9XCJvcmcuZWNs
aXBzZS5qZHQuY29yZS5jb21waWxlci5jb2RlZ2VuLmlubGluZUpzckJ5dGVjb2RlXCIgdmFsdWU9
XCJkaXNhYmxlZFwiLz5cbiIgKyAKKwkJCSIJCTxvcHRpb24ga2V5PVwib3JnLmVjbGlwc2UuamR0
LmNvcmUuY29tcGlsZXIuY29kZWdlbi5sYW1iZGEuZ2VuZXJpY1NpZ25hdHVyZVwiIHZhbHVlPVwi
ZG8gbm90IGdlbmVyYXRlXCIvPlxuIiArCiAJCQkiCQk8b3B0aW9uIGtleT1cIm9yZy5lY2xpcHNl
LmpkdC5jb3JlLmNvbXBpbGVyLmNvZGVnZW4ubWV0aG9kUGFyYW1ldGVyc1wiIHZhbHVlPVwiZG8g
bm90IGdlbmVyYXRlXCIvPlxuIiArIAogCQkJIgkJPG9wdGlvbiBrZXk9XCJvcmcuZWNsaXBzZS5q
ZHQuY29yZS5jb21waWxlci5jb2RlZ2VuLnNoYXJlQ29tbW9uRmluYWxseUJsb2Nrc1wiIHZhbHVl
PVwiZGlzYWJsZWRcIi8+XG4iICsKIAkJCSIJCTxvcHRpb24ga2V5PVwib3JnLmVjbGlwc2UuamR0
LmNvcmUuY29tcGlsZXIuY29kZWdlbi50YXJnZXRQbGF0Zm9ybVwiIHZhbHVlPVwiMS41XCIvPlxu
IiArIApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3Jj
L29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTGFtYmRhRXhw
cmVzc2lvbnNUZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9z
cmMvb3JnL2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9MYW1iZGFF
eHByZXNzaW9uc1Rlc3QuamF2YQppbmRleCBmYmUwZjAyLi5kNzM0NmE3IDEwMDY0NAotLS0gYS9v
cmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2Nv
cmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9MYW1iZGFFeHByZXNzaW9uc1Rlc3QuamF2YQor
KysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2Uv
amR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9MYW1iZGFFeHByZXNzaW9uc1Rlc3Qu
amF2YQpAQCAtNTE0NCw2ICs1MTQ0LDM1OCBAQAogCQl9LAogCQkidHJ1ZSIpOwogfQorLy8gaHR0
cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQ0OTA2MywgWzEuOF1b
Y29tcGlsZXJdIEJyaW5nIGJhY2sgZ2VuZXJpYyBzaWduYXR1cmVzIGZvciBMYW1iZGEgRXhwcmVz
c2lvbnMgCitwdWJsaWMgdm9pZCB0ZXN0NDQ5MDYzKCkgeworCU1hcCBjdXN0b21PcHRpb25zID0g
Z2V0Q29tcGlsZXJPcHRpb25zKCk7CisJY3VzdG9tT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25z
Lk9QVElPTl9MYW1iZGFHZW5lcmljU2lnbmF0dXJlLCBDb21waWxlck9wdGlvbnMuR0VORVJBVEUp
OworCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiVGVzdC5qYXZh
IiwKKwkJCSJpbXBvcnQgamF2YS5pby5TZXJpYWxpemFibGU7XG4iICsgCisJCQkiaW1wb3J0IGph
dmEubGFuZy5pbnZva2UuU2VyaWFsaXplZExhbWJkYTtcbiIgKyAKKwkJCSJpbXBvcnQgamF2YS5s
YW5nLnJlZmxlY3QuTWV0aG9kO1xuIiArIAorCQkJImltcG9ydCBqYXZhLmxhbmcucmVmbGVjdC5U
eXBlO1xuIiArIAorCQkJInB1YmxpYyBjbGFzcyBUZXN0IHtcbiIgKyAKKwkJCSIgICAgcHVibGlj
IHN0YXRpYyBpbnRlcmZhY2UgTWFwPElOLCBPVVQ+IHtcbiIgKyAKKwkJCSIgICAgICAgIHB1Ymxp
YyBPVVQgbWFwKElOIGluKTtcbiIgKyAKKwkJCSIgICAgfVxuIiArIAorCQkJIiAgICBwdWJsaWMg
c3RhdGljIGNsYXNzIFR1cGxlPFQxLCBUMj4ge1xuIiArIAorCQkJIiAgICAgICAgcHJpdmF0ZSBU
MSBmaWVsZDE7XG4iICsgCisJCQkiICAgICAgICBwcml2YXRlIFQyIGZpZWxkMjtcbiIgKyAKKwkJ
CSIgICAgfVxuIiArIAorCQkJIiAgICBwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBz
dHJpbmdzKSB0aHJvd3MgRXhjZXB0aW9uIHtcbiIgKyAKKwkJCSIgICAgICAgIE1hcDxUdXBsZTxT
dHJpbmcsIERvdWJsZT4sIFR1cGxlPEludGVnZXIsIFN0cmluZz4+IG1hcCA9IChpbikgLT4gbmV3
IFR1cGxlPD4oKTtcbiIgKyAKKwkJCSIgICAgICAgIGZvcihNZXRob2QgbSA6IFRlc3QuY2xhc3Mu
Z2V0RGVjbGFyZWRNZXRob2RzKCkpIHtcbiIgKyAKKwkJCSIgICAgICAgIC8vIFVzZSB0aGUgdHlw
ZSBpbmZvcm1hdGlvbiBzdG9yZWQgaW4gc2lnbmF0dXJlXG4iICsgCisJCQkiICAgICAgICAgICAg
aWYgKG0uZ2V0TmFtZSgpLmNvbnRhaW5zKFwibGFtYmRhXCIpKSB7XG4iICsKKwkJCSIgICAgICAg
ICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihtLmdldEdlbmVyaWNSZXR1cm5UeXBlKCkpO1xuIiAr
IAorCQkJIiAgICAgICAgICAgICAgZm9yIChUeXBlIHQgOiBtLmdldEdlbmVyaWNQYXJhbWV0ZXJU
eXBlcygpKSB7XG4iICsgCisJCQkiICAgICAgICAgICAgICAgICAgU3lzdGVtLm91dC5wcmludGxu
KHQpO1xuIiArIAorCQkJIiAgICAgICAgICAgICAgfVxuIiArCisJCQkiICAgICAgICAgICAgfVxu
IiArCisJCQkiICAgICAgICB9XG4iICsKKwkJCSIgICAgfVxuIiArIAorCQkJIn0iCisJCQl9LAor
CQkJIlRlc3QuVGVzdCRUdXBsZTxqYXZhLmxhbmcuSW50ZWdlciwgamF2YS5sYW5nLlN0cmluZz5c
biIgKworCQkJIlRlc3QuVGVzdCRUdXBsZTxqYXZhLmxhbmcuU3RyaW5nLCBqYXZhLmxhbmcuRG91
YmxlPiIsCisJCQljdXN0b21PcHRpb25zKTsKK30KKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNlLm9y
Zy9idWdzL3Nob3dfYnVnLmNnaT9pZD00NDkwNjMsIFsxLjhdW2NvbXBpbGVyXSBCcmluZyBiYWNr
IGdlbmVyaWMgc2lnbmF0dXJlcyBmb3IgTGFtYmRhIEV4cHJlc3Npb25zIAorcHVibGljIHZvaWQg
dGVzdDQ0OTA2M2EoKSB7CisJTWFwIGN1c3RvbU9wdGlvbnMgPSBnZXRDb21waWxlck9wdGlvbnMo
KTsKKwljdXN0b21PcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX0xhbWJkYUdlbmVy
aWNTaWduYXR1cmUsIENvbXBpbGVyT3B0aW9ucy5HRU5FUkFURSk7CisJdGhpcy5ydW5Db25mb3Jt
VGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJUZXN0LmphdmEiLAorCQkJImltcG9ydCBqYXZh
LmlvLlNlcmlhbGl6YWJsZTtcbiIgKyAKKwkJCSJpbXBvcnQgamF2YS5sYW5nLmludm9rZS5TZXJp
YWxpemVkTGFtYmRhO1xuIiArIAorCQkJImltcG9ydCBqYXZhLmxhbmcucmVmbGVjdC5NZXRob2Q7
XG4iICsgCisJCQkiaW1wb3J0IGphdmEubGFuZy5yZWZsZWN0LlR5cGU7XG4iICsgCisJCQkicHVi
bGljIGNsYXNzIFRlc3Qge1xuIiArIAorCQkJIiAgICBwdWJsaWMgc3RhdGljIGludGVyZmFjZSBN
YXA8SU4sIE9VVD4gZXh0ZW5kcyBTZXJpYWxpemFibGUge1xuIiArIAorCQkJIiAgICAgICAgcHVi
bGljIE9VVCBtYXAoSU4gaW4pO1xuIiArIAorCQkJIiAgICB9XG4iICsgCisJCQkiICAgIHB1Ymxp
YyBzdGF0aWMgY2xhc3MgVHVwbGU8VDEsIFQyPiB7XG4iICsgCisJCQkiICAgICAgICBwcml2YXRl
IFQxIGZpZWxkMTtcbiIgKyAKKwkJCSIgICAgICAgIHByaXZhdGUgVDIgZmllbGQyO1xuIiArIAor
CQkJIiAgICB9XG4iICsgCisJCQkiICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1td
IHN0cmluZ3MpIHRocm93cyBFeGNlcHRpb24ge1xuIiArIAorCQkJIiAgICAgICAgTWFwPFR1cGxl
PFN0cmluZywgRG91YmxlPiwgVHVwbGU8SW50ZWdlciwgU3RyaW5nPj4gbWFwID0gKGluKSAtPiBu
ZXcgVHVwbGU8PigpO1xuIiArIAorCQkJIiAgICAgICAgU2VyaWFsaXplZExhbWJkYSBzbCA9IGdl
dFNlcmlhbGl6ZWRMYW1iZGEobWFwKTsgICAgICBcbiIgKyAKKwkJCSIgICAgICAgIE1ldGhvZCBt
ID0gZ2V0TGFtYmRhTWV0aG9kKHNsKTtcbiIgKyAKKwkJCSIgICAgICAgIC8vIFVzZSB0aGUgdHlw
ZSBpbmZvcm1hdGlvbiBzdG9yZWQgaW4gc2lnbmF0dXJlXG4iICsgCisJCQkiICAgICAgICBTeXN0
ZW0ub3V0LnByaW50bG4obS5nZXRHZW5lcmljUmV0dXJuVHlwZSgpKTtcbiIgKyAKKwkJCSIgICAg
ICAgIGZvciAoVHlwZSB0IDogbS5nZXRHZW5lcmljUGFyYW1ldGVyVHlwZXMoKSkge1xuIiArIAor
CQkJIiAgICAgICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbih0KTtcbiIgKyAKKwkJCSIgICAgICAg
IH1cbiIgKyAKKwkJCSIgICAgfVxuIiArIAorCQkJIiAgICBwdWJsaWMgc3RhdGljIE1ldGhvZCBn
ZXRMYW1iZGFNZXRob2QoU2VyaWFsaXplZExhbWJkYSBsYW1iZGEpIHRocm93cyBFeGNlcHRpb24g
e1xuIiArIAorCQkJIiAgICAgICAgU3RyaW5nIGltcGxDbGFzc05hbWUgPSBsYW1iZGEuZ2V0SW1w
bENsYXNzKCkucmVwbGFjZShcJy9cJywgXCcuXCcpO1xuIiArIAorCQkJIiAgICAgICAgQ2xhc3M8
Pz4gaW1wbENsYXNzID0gQ2xhc3MuZm9yTmFtZShpbXBsQ2xhc3NOYW1lKTtcbiIgKyAKKwkJCSIg
ICAgICAgIFN0cmluZyBsYW1iZGFOYW1lID0gbGFtYmRhLmdldEltcGxNZXRob2ROYW1lKCk7XG4i
ICsgCisJCQkiICAgICAgICBmb3IgKE1ldGhvZCBtIDogaW1wbENsYXNzLmdldERlY2xhcmVkTWV0
aG9kcygpKSB7XG4iICsgCisJCQkiICAgICAgICAgICAgaWYgKG0uZ2V0TmFtZSgpLmVxdWFscyhs
YW1iZGFOYW1lKSkge1xuIiArIAorCQkJIiAgICAgICAgICAgICAgICByZXR1cm4gbTtcbiIgKyAK
KwkJCSIgICAgICAgICAgICB9XG4iICsgCisJCQkiICAgICAgICB9XG4iICsgCisJCQkiICAgICAg
ICB0aHJvdyBuZXcgRXhjZXB0aW9uKFwiTGFtYmRhIE1ldGhvZCBub3QgZm91bmRcIik7XG4iICsg
CisJCQkiICAgIH1cbiIgKyAKKwkJCSIgICAgcHVibGljIHN0YXRpYyBTZXJpYWxpemVkTGFtYmRh
IGdldFNlcmlhbGl6ZWRMYW1iZGEoT2JqZWN0IGZ1bmN0aW9uKSB0aHJvd3MgRXhjZXB0aW9uIHtc
biIgKyAKKwkJCSIgICAgICAgIGlmIChmdW5jdGlvbiA9PSBudWxsIHx8ICEoZnVuY3Rpb24gaW5z
dGFuY2VvZiBqYXZhLmlvLlNlcmlhbGl6YWJsZSkpIHtcbiIgKyAKKwkJCSIgICAgICAgICAgICB0
aHJvdyBuZXcgSWxsZWdhbEFyZ3VtZW50RXhjZXB0aW9uKCk7XG4iICsgCisJCQkiICAgICAgICB9
XG4iICsgCisJCQkiICAgICAgICBmb3IgKENsYXNzPD8+IGNsYXp6ID0gZnVuY3Rpb24uZ2V0Q2xh
c3MoKTsgY2xhenogIT0gbnVsbDsgY2xhenogPSBjbGF6ei5nZXRTdXBlcmNsYXNzKCkpIHtcbiIg
KyAKKwkJCSIgICAgICAgICAgICB0cnkge1xuIiArIAorCQkJIiAgICAgICAgICAgICAgICBNZXRo
b2QgcmVwbGFjZU1ldGhvZCA9IGNsYXp6LmdldERlY2xhcmVkTWV0aG9kKFwid3JpdGVSZXBsYWNl
XCIpO1xuIiArIAorCQkJIiAgICAgICAgICAgICAgICByZXBsYWNlTWV0aG9kLnNldEFjY2Vzc2li
bGUodHJ1ZSk7XG4iICsgCisJCQkiICAgICAgICAgICAgICAgIE9iamVjdCBzZXJpYWxpemVkRm9y
bSA9IHJlcGxhY2VNZXRob2QuaW52b2tlKGZ1bmN0aW9uKTtcbiIgKyAKKwkJCSIgICAgICAgICAg
ICAgICAgaWYgKHNlcmlhbGl6ZWRGb3JtIGluc3RhbmNlb2YgU2VyaWFsaXplZExhbWJkYSkge1xu
IiArIAorCQkJIiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChTZXJpYWxpemVkTGFtYmRhKSBz
ZXJpYWxpemVkRm9ybTtcbiIgKyAKKwkJCSIgICAgICAgICAgICAgICAgfVxuIiArIAorCQkJIiAg
ICAgICAgICAgIH1cbiIgKyAKKwkJCSIgICAgICAgICAgICBjYXRjaCAoTm9TdWNoTWV0aG9kRXJy
b3IgZSkge1xuIiArIAorCQkJIiAgICAgICAgICAgICAgICAvLyBmYWxsIHRocm91Z2ggdGhlIGxv
b3AgYW5kIHRyeSB0aGUgbmV4dCBjbGFzc1xuIiArIAorCQkJIiAgICAgICAgICAgIH1cbiIgKyAK
KwkJCSIgICAgICAgICAgICBjYXRjaCAoVGhyb3dhYmxlIHQpIHtcbiIgKyAKKwkJCSIgICAgICAg
ICAgICAgICAgdGhyb3cgbmV3IFJ1bnRpbWVFeGNlcHRpb24oXCJFcnJvciB3aGlsZSBleHRyYWN0
aW5nIHNlcmlhbGl6ZWQgbGFtYmRhXCIsIHQpO1xuIiArIAorCQkJIiAgICAgICAgICAgIH1cbiIg
KyAKKwkJCSIgICAgICAgIH1cbiIgKyAKKwkJCSIgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24o
XCJ3cml0ZVJlcGxhY2UgbWV0aG9kIG5vdCBmb3VuZFwiKTtcbiIgKyAKKwkJCSIgICAgfVxuIiAr
IAorCQkJIn0iCisJCQl9LAorCQkJIlRlc3QuVGVzdCRUdXBsZTxqYXZhLmxhbmcuSW50ZWdlciwg
amF2YS5sYW5nLlN0cmluZz5cbiIgKworCQkJIlRlc3QuVGVzdCRUdXBsZTxqYXZhLmxhbmcuU3Ry
aW5nLCBqYXZhLmxhbmcuRG91YmxlPiIsCisJCQljdXN0b21PcHRpb25zKTsKK30KKy8vIGh0dHBz
Oi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00NDkwNjMsIFsxLjhdW2Nv
bXBpbGVyXSBCcmluZyBiYWNrIGdlbmVyaWMgc2lnbmF0dXJlcyBmb3IgTGFtYmRhIEV4cHJlc3Np
b25zIAorcHVibGljIHZvaWQgdGVzdDQ0OTA2M2IoKSB7CisJTWFwIGN1c3RvbU9wdGlvbnMgPSBn
ZXRDb21waWxlck9wdGlvbnMoKTsKKwljdXN0b21PcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMu
T1BUSU9OX0xhbWJkYUdlbmVyaWNTaWduYXR1cmUsIENvbXBpbGVyT3B0aW9ucy5ET19OT1RfR0VO
RVJBVEUpOworCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiVGVz
dC5qYXZhIiwKKwkJCSJpbXBvcnQgamF2YS5pby5TZXJpYWxpemFibGU7XG4iICsgCisJCQkiaW1w
b3J0IGphdmEubGFuZy5pbnZva2UuU2VyaWFsaXplZExhbWJkYTtcbiIgKyAKKwkJCSJpbXBvcnQg
amF2YS5sYW5nLnJlZmxlY3QuTWV0aG9kO1xuIiArIAorCQkJImltcG9ydCBqYXZhLmxhbmcucmVm
bGVjdC5UeXBlO1xuIiArIAorCQkJInB1YmxpYyBjbGFzcyBUZXN0IHtcbiIgKyAKKwkJCSIgICAg
cHVibGljIHN0YXRpYyBpbnRlcmZhY2UgTWFwPElOLCBPVVQ+IHtcbiIgKyAKKwkJCSIgICAgICAg
IHB1YmxpYyBPVVQgbWFwKElOIGluKTtcbiIgKyAKKwkJCSIgICAgfVxuIiArIAorCQkJIiAgICBw
dWJsaWMgc3RhdGljIGNsYXNzIFR1cGxlPFQxLCBUMj4ge1xuIiArIAorCQkJIiAgICAgICAgcHJp
dmF0ZSBUMSBmaWVsZDE7XG4iICsgCisJCQkiICAgICAgICBwcml2YXRlIFQyIGZpZWxkMjtcbiIg
KyAKKwkJCSIgICAgfVxuIiArIAorCQkJIiAgICBwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJp
bmdbXSBzdHJpbmdzKSB0aHJvd3MgRXhjZXB0aW9uIHtcbiIgKyAKKwkJCSIgICAgICAgIE1hcDxU
dXBsZTxTdHJpbmcsIERvdWJsZT4sIFR1cGxlPEludGVnZXIsIFN0cmluZz4+IG1hcCA9IChpbikg
LT4gbmV3IFR1cGxlPD4oKTtcbiIgKyAKKwkJCSIgICAgICAgIGZvcihNZXRob2QgbSA6IFRlc3Qu
Y2xhc3MuZ2V0RGVjbGFyZWRNZXRob2RzKCkpIHtcbiIgKyAKKwkJCSIgICAgICAgIC8vIFVzZSB0
aGUgdHlwZSBpbmZvcm1hdGlvbiBzdG9yZWQgaW4gc2lnbmF0dXJlXG4iICsgCisJCQkiICAgICAg
ICAgICAgaWYgKG0uZ2V0TmFtZSgpLmNvbnRhaW5zKFwibGFtYmRhXCIpKSB7XG4iICsKKwkJCSIg
ICAgICAgICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbihtLmdldEdlbmVyaWNSZXR1cm5UeXBlKCkp
O1xuIiArIAorCQkJIiAgICAgICAgICAgICAgZm9yIChUeXBlIHQgOiBtLmdldEdlbmVyaWNQYXJh
bWV0ZXJUeXBlcygpKSB7XG4iICsgCisJCQkiICAgICAgICAgICAgICAgICAgU3lzdGVtLm91dC5w
cmludGxuKHQpO1xuIiArIAorCQkJIiAgICAgICAgICAgICAgfVxuIiArCisJCQkiICAgICAgICAg
ICAgfVxuIiArCisJCQkiICAgICAgICB9XG4iICsKKwkJCSIgICAgfVxuIiArIAorCQkJIn0iCisJ
CQl9LAorCQkJImNsYXNzIFRlc3QkVHVwbGVcbiIgKworCQkJImNsYXNzIFRlc3QkVHVwbGUiLAor
CQkJY3VzdG9tT3B0aW9ucyk7Cit9CisvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9z
aG93X2J1Zy5jZ2k/aWQ9NDQ5MDYzLCBbMS44XVtjb21waWxlcl0gQnJpbmcgYmFjayBnZW5lcmlj
IHNpZ25hdHVyZXMgZm9yIExhbWJkYSBFeHByZXNzaW9ucyAKK3B1YmxpYyB2b2lkIHRlc3Q0NDkw
NjNjKCkgeworCU1hcCBjdXN0b21PcHRpb25zID0gZ2V0Q29tcGlsZXJPcHRpb25zKCk7CisJY3Vz
dG9tT3B0aW9ucy5wdXQoQ29tcGlsZXJPcHRpb25zLk9QVElPTl9MYW1iZGFHZW5lcmljU2lnbmF0
dXJlLCBDb21waWxlck9wdGlvbnMuRE9fTk9UX0dFTkVSQVRFKTsKKwl0aGlzLnJ1bkNvbmZvcm1U
ZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJIlRlc3QuamF2YSIsCisJCQkiaW1wb3J0IGphdmEu
aW8uU2VyaWFsaXphYmxlO1xuIiArIAorCQkJImltcG9ydCBqYXZhLmxhbmcuaW52b2tlLlNlcmlh
bGl6ZWRMYW1iZGE7XG4iICsgCisJCQkiaW1wb3J0IGphdmEubGFuZy5yZWZsZWN0Lk1ldGhvZDtc
biIgKyAKKwkJCSJpbXBvcnQgamF2YS5sYW5nLnJlZmxlY3QuVHlwZTtcbiIgKyAKKwkJCSJwdWJs
aWMgY2xhc3MgVGVzdCB7XG4iICsgCisJCQkiICAgIHB1YmxpYyBzdGF0aWMgaW50ZXJmYWNlIE1h
cDxJTiwgT1VUPiBleHRlbmRzIFNlcmlhbGl6YWJsZSB7XG4iICsgCisJCQkiICAgICAgICBwdWJs
aWMgT1VUIG1hcChJTiBpbik7XG4iICsgCisJCQkiICAgIH1cbiIgKyAKKwkJCSIgICAgcHVibGlj
IHN0YXRpYyBjbGFzcyBUdXBsZTxUMSwgVDI+IHtcbiIgKyAKKwkJCSIgICAgICAgIHByaXZhdGUg
VDEgZmllbGQxO1xuIiArIAorCQkJIiAgICAgICAgcHJpdmF0ZSBUMiBmaWVsZDI7XG4iICsgCisJ
CQkiICAgIH1cbiIgKyAKKwkJCSIgICAgcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10g
c3RyaW5ncykgdGhyb3dzIEV4Y2VwdGlvbiB7XG4iICsgCisJCQkiICAgICAgICBNYXA8VHVwbGU8
U3RyaW5nLCBEb3VibGU+LCBUdXBsZTxJbnRlZ2VyLCBTdHJpbmc+PiBtYXAgPSAoaW4pIC0+IG5l
dyBUdXBsZTw+KCk7XG4iICsgCisJCQkiICAgICAgICBTZXJpYWxpemVkTGFtYmRhIHNsID0gZ2V0
U2VyaWFsaXplZExhbWJkYShtYXApOyAgICAgIFxuIiArIAorCQkJIiAgICAgICAgTWV0aG9kIG0g
PSBnZXRMYW1iZGFNZXRob2Qoc2wpO1xuIiArIAorCQkJIiAgICAgICAgLy8gVXNlIHRoZSB0eXBl
IGluZm9ybWF0aW9uIHN0b3JlZCBpbiBzaWduYXR1cmVcbiIgKyAKKwkJCSIgICAgICAgIFN5c3Rl
bS5vdXQucHJpbnRsbihtLmdldEdlbmVyaWNSZXR1cm5UeXBlKCkpO1xuIiArIAorCQkJIiAgICAg
ICAgZm9yIChUeXBlIHQgOiBtLmdldEdlbmVyaWNQYXJhbWV0ZXJUeXBlcygpKSB7XG4iICsgCisJ
CQkiICAgICAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKHQpO1xuIiArIAorCQkJIiAgICAgICAg
fVxuIiArIAorCQkJIiAgICB9XG4iICsgCisJCQkiICAgIHB1YmxpYyBzdGF0aWMgTWV0aG9kIGdl
dExhbWJkYU1ldGhvZChTZXJpYWxpemVkTGFtYmRhIGxhbWJkYSkgdGhyb3dzIEV4Y2VwdGlvbiB7
XG4iICsgCisJCQkiICAgICAgICBTdHJpbmcgaW1wbENsYXNzTmFtZSA9IGxhbWJkYS5nZXRJbXBs
Q2xhc3MoKS5yZXBsYWNlKFwnL1wnLCBcJy5cJyk7XG4iICsgCisJCQkiICAgICAgICBDbGFzczw/
PiBpbXBsQ2xhc3MgPSBDbGFzcy5mb3JOYW1lKGltcGxDbGFzc05hbWUpO1xuIiArIAorCQkJIiAg
ICAgICAgU3RyaW5nIGxhbWJkYU5hbWUgPSBsYW1iZGEuZ2V0SW1wbE1ldGhvZE5hbWUoKTtcbiIg
KyAKKwkJCSIgICAgICAgIGZvciAoTWV0aG9kIG0gOiBpbXBsQ2xhc3MuZ2V0RGVjbGFyZWRNZXRo
b2RzKCkpIHtcbiIgKyAKKwkJCSIgICAgICAgICAgICBpZiAobS5nZXROYW1lKCkuZXF1YWxzKGxh
bWJkYU5hbWUpKSB7XG4iICsgCisJCQkiICAgICAgICAgICAgICAgIHJldHVybiBtO1xuIiArIAor
CQkJIiAgICAgICAgICAgIH1cbiIgKyAKKwkJCSIgICAgICAgIH1cbiIgKyAKKwkJCSIgICAgICAg
IHRocm93IG5ldyBFeGNlcHRpb24oXCJMYW1iZGEgTWV0aG9kIG5vdCBmb3VuZFwiKTtcbiIgKyAK
KwkJCSIgICAgfVxuIiArIAorCQkJIiAgICBwdWJsaWMgc3RhdGljIFNlcmlhbGl6ZWRMYW1iZGEg
Z2V0U2VyaWFsaXplZExhbWJkYShPYmplY3QgZnVuY3Rpb24pIHRocm93cyBFeGNlcHRpb24ge1xu
IiArIAorCQkJIiAgICAgICAgaWYgKGZ1bmN0aW9uID09IG51bGwgfHwgIShmdW5jdGlvbiBpbnN0
YW5jZW9mIGphdmEuaW8uU2VyaWFsaXphYmxlKSkge1xuIiArIAorCQkJIiAgICAgICAgICAgIHRo
cm93IG5ldyBJbGxlZ2FsQXJndW1lbnRFeGNlcHRpb24oKTtcbiIgKyAKKwkJCSIgICAgICAgIH1c
biIgKyAKKwkJCSIgICAgICAgIGZvciAoQ2xhc3M8Pz4gY2xhenogPSBmdW5jdGlvbi5nZXRDbGFz
cygpOyBjbGF6eiAhPSBudWxsOyBjbGF6eiA9IGNsYXp6LmdldFN1cGVyY2xhc3MoKSkge1xuIiAr
IAorCQkJIiAgICAgICAgICAgIHRyeSB7XG4iICsgCisJCQkiICAgICAgICAgICAgICAgIE1ldGhv
ZCByZXBsYWNlTWV0aG9kID0gY2xhenouZ2V0RGVjbGFyZWRNZXRob2QoXCJ3cml0ZVJlcGxhY2Vc
Iik7XG4iICsgCisJCQkiICAgICAgICAgICAgICAgIHJlcGxhY2VNZXRob2Quc2V0QWNjZXNzaWJs
ZSh0cnVlKTtcbiIgKyAKKwkJCSIgICAgICAgICAgICAgICAgT2JqZWN0IHNlcmlhbGl6ZWRGb3Jt
ID0gcmVwbGFjZU1ldGhvZC5pbnZva2UoZnVuY3Rpb24pO1xuIiArIAorCQkJIiAgICAgICAgICAg
ICAgICBpZiAoc2VyaWFsaXplZEZvcm0gaW5zdGFuY2VvZiBTZXJpYWxpemVkTGFtYmRhKSB7XG4i
ICsgCisJCQkiICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFNlcmlhbGl6ZWRMYW1iZGEpIHNl
cmlhbGl6ZWRGb3JtO1xuIiArIAorCQkJIiAgICAgICAgICAgICAgICB9XG4iICsgCisJCQkiICAg
ICAgICAgICAgfVxuIiArIAorCQkJIiAgICAgICAgICAgIGNhdGNoIChOb1N1Y2hNZXRob2RFcnJv
ciBlKSB7XG4iICsgCisJCQkiICAgICAgICAgICAgICAgIC8vIGZhbGwgdGhyb3VnaCB0aGUgbG9v
cCBhbmQgdHJ5IHRoZSBuZXh0IGNsYXNzXG4iICsgCisJCQkiICAgICAgICAgICAgfVxuIiArIAor
CQkJIiAgICAgICAgICAgIGNhdGNoIChUaHJvd2FibGUgdCkge1xuIiArIAorCQkJIiAgICAgICAg
ICAgICAgICB0aHJvdyBuZXcgUnVudGltZUV4Y2VwdGlvbihcIkVycm9yIHdoaWxlIGV4dHJhY3Rp
bmcgc2VyaWFsaXplZCBsYW1iZGFcIiwgdCk7XG4iICsgCisJCQkiICAgICAgICAgICAgfVxuIiAr
IAorCQkJIiAgICAgICAgfVxuIiArIAorCQkJIiAgICAgICAgdGhyb3cgbmV3IEV4Y2VwdGlvbihc
IndyaXRlUmVwbGFjZSBtZXRob2Qgbm90IGZvdW5kXCIpO1xuIiArIAorCQkJIiAgICB9XG4iICsg
CisJCQkifSIKKwkJCX0sCisJCQkiY2xhc3MgVGVzdCRUdXBsZVxuIiArCisJCQkiY2xhc3MgVGVz
dCRUdXBsZSIsCisJCQljdXN0b21PcHRpb25zKTsKK30KKy8vIGh0dHBzOi8vYnVncy5lY2xpcHNl
Lm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00NDkwNjMsIFsxLjhdW2NvbXBpbGVyXSBCcmluZyBi
YWNrIGdlbmVyaWMgc2lnbmF0dXJlcyBmb3IgTGFtYmRhIEV4cHJlc3Npb25zIAorcHVibGljIHZv
aWQgdGVzdDQ0OTA2M2QoKSB7CisJTWFwIGN1c3RvbU9wdGlvbnMgPSBnZXRDb21waWxlck9wdGlv
bnMoKTsKKwljdXN0b21PcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX0xhbWJkYUdl
bmVyaWNTaWduYXR1cmUsIENvbXBpbGVyT3B0aW9ucy5HRU5FUkFURSk7CisJdGhpcy5ydW5Db25m
b3JtVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJUZXN0LmphdmEiLAorCQkJImltcG9ydCBq
YXZhLmlvLlNlcmlhbGl6YWJsZTtcbiIgKyAKKwkJCSJpbXBvcnQgamF2YS5sYW5nLmludm9rZS5T
ZXJpYWxpemVkTGFtYmRhO1xuIiArIAorCQkJImltcG9ydCBqYXZhLmxhbmcucmVmbGVjdC5NZXRo
b2Q7XG4iICsgCisJCQkiaW1wb3J0IGphdmEubGFuZy5yZWZsZWN0LlR5cGU7XG4iICsgCisJCQki
cHVibGljIGNsYXNzIFRlc3Qge1xuIiArIAorCQkJIiAgICBwdWJsaWMgc3RhdGljIGludGVyZmFj
ZSBNYXA8SU4sIE9VVD4ge1xuIiArIAorCQkJIiAgICAgICAgcHVibGljIE9VVCBtYXAoSU4gaW4p
O1xuIiArIAorCQkJIiAgICB9XG4iICsgCisJCQkiICAgIHB1YmxpYyBzdGF0aWMgVHVwbGU8SW50
ZWdlciwgU3RyaW5nPiBub29wKFR1cGxlPFN0cmluZywgRG91YmxlPiB0KXtyZXR1cm4gbnVsbDt9
XG4iICsKKwkJCSIgICAgcHVibGljIHN0YXRpYyBjbGFzcyBUdXBsZTxUMSwgVDI+IHtcbiIgKyAK
KwkJCSIgICAgICAgIHByaXZhdGUgVDEgZmllbGQxO1xuIiArIAorCQkJIiAgICAgICAgcHJpdmF0
ZSBUMiBmaWVsZDI7XG4iICsgCisJCQkiICAgIH1cbiIgKyAKKwkJCSIgICAgcHVibGljIHN0YXRp
YyB2b2lkIG1haW4oU3RyaW5nW10gc3RyaW5ncykgdGhyb3dzIEV4Y2VwdGlvbiB7XG4iICsgCisJ
CQkiICAgICAgICBNYXA8VHVwbGU8U3RyaW5nLCBEb3VibGU+LCBUdXBsZTxJbnRlZ2VyLCBTdHJp
bmc+PiBtYXAgPSBUZXN0Ojpub29wO1xuIiArIAorCQkJIiAgICAgICAgZm9yKE1ldGhvZCBtIDog
VGVzdC5jbGFzcy5nZXREZWNsYXJlZE1ldGhvZHMoKSkge1xuIiArIAorCQkJIiAgICAgICAgLy8g
VXNlIHRoZSB0eXBlIGluZm9ybWF0aW9uIHN0b3JlZCBpbiBzaWduYXR1cmVcbiIgKyAKKwkJCSIg
ICAgICAgICAgICBpZiAobS5nZXROYW1lKCkuY29udGFpbnMoXCJsYW1iZGFcIikpIHtcbiIgKwor
CQkJIiAgICAgICAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKG0uZ2V0R2VuZXJpY1JldHVyblR5
cGUoKSk7XG4iICsgCisJCQkiICAgICAgICAgICAgICBmb3IgKFR5cGUgdCA6IG0uZ2V0R2VuZXJp
Y1BhcmFtZXRlclR5cGVzKCkpIHtcbiIgKyAKKwkJCSIgICAgICAgICAgICAgICAgICBTeXN0ZW0u
b3V0LnByaW50bG4odCk7XG4iICsgCisJCQkiICAgICAgICAgICAgICB9XG4iICsKKwkJCSIgICAg
ICAgICAgICB9XG4iICsKKwkJCSIgICAgICAgIH1cbiIgKworCQkJIiAgICB9XG4iICsgCisJCQki
fSIKKwkJCX0sCisJCQkiIiwKKwkJCWN1c3RvbU9wdGlvbnMpOworfQorLy8gaHR0cHM6Ly9idWdz
LmVjbGlwc2Uub3JnL2J1Z3Mvc2hvd19idWcuY2dpP2lkPTQ0OTA2MywgWzEuOF1bY29tcGlsZXJd
IEJyaW5nIGJhY2sgZ2VuZXJpYyBzaWduYXR1cmVzIGZvciBMYW1iZGEgRXhwcmVzc2lvbnMgCitw
dWJsaWMgdm9pZCB0ZXN0NDQ5MDYzZSgpIHsKKwlNYXAgY3VzdG9tT3B0aW9ucyA9IGdldENvbXBp
bGVyT3B0aW9ucygpOworCWN1c3RvbU9wdGlvbnMucHV0KENvbXBpbGVyT3B0aW9ucy5PUFRJT05f
TGFtYmRhR2VuZXJpY1NpZ25hdHVyZSwgQ29tcGlsZXJPcHRpb25zLkRPX05PVF9HRU5FUkFURSk7
CisJdGhpcy5ydW5Db25mb3JtVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJUZXN0LmphdmEi
LAorCQkJImltcG9ydCBqYXZhLmlvLlNlcmlhbGl6YWJsZTtcbiIgKyAKKwkJCSJpbXBvcnQgamF2
YS5sYW5nLmludm9rZS5TZXJpYWxpemVkTGFtYmRhO1xuIiArIAorCQkJImltcG9ydCBqYXZhLmxh
bmcucmVmbGVjdC5NZXRob2Q7XG4iICsgCisJCQkiaW1wb3J0IGphdmEubGFuZy5yZWZsZWN0LlR5
cGU7XG4iICsgCisJCQkicHVibGljIGNsYXNzIFRlc3Qge1xuIiArIAorCQkJIiAgICBwdWJsaWMg
c3RhdGljIGludGVyZmFjZSBNYXA8SU4sIE9VVD4gZXh0ZW5kcyBTZXJpYWxpemFibGUge1xuIiAr
IAorCQkJIiAgICAgICAgcHVibGljIE9VVCBtYXAoSU4gaW4pO1xuIiArIAorCQkJIiAgICB9XG4i
ICsgCisJCQkiICAgIHB1YmxpYyBzdGF0aWMgVHVwbGU8SW50ZWdlciwgU3RyaW5nPiBub29wKFR1
cGxlPFN0cmluZywgRG91YmxlPiB0KXtyZXR1cm4gbnVsbDt9XG4iICsKKwkJCSIgICAgcHVibGlj
IHN0YXRpYyBjbGFzcyBUdXBsZTxUMSwgVDI+IHtcbiIgKyAKKwkJCSIgICAgICAgIHByaXZhdGUg
VDEgZmllbGQxO1xuIiArIAorCQkJIiAgICAgICAgcHJpdmF0ZSBUMiBmaWVsZDI7XG4iICsgCisJ
CQkiICAgIH1cbiIgKyAKKwkJCSIgICAgcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10g
c3RyaW5ncykgdGhyb3dzIEV4Y2VwdGlvbiB7XG4iICsgCisJCQkiICAgICAgICBNYXA8VHVwbGU8
U3RyaW5nLCBEb3VibGU+LCBUdXBsZTxJbnRlZ2VyLCBTdHJpbmc+PiBtYXAgPSBUZXN0Ojpub29w
O1xuIiArIAorCQkJIiAgICAgICAgU2VyaWFsaXplZExhbWJkYSBzbCA9IGdldFNlcmlhbGl6ZWRM
YW1iZGEobWFwKTsgICAgICBcbiIgKyAKKwkJCSIgICAgICAgIE1ldGhvZCBtID0gZ2V0TGFtYmRh
TWV0aG9kKHNsKTtcbiIgKyAKKwkJCSIgICAgICAgIC8vIFVzZSB0aGUgdHlwZSBpbmZvcm1hdGlv
biBzdG9yZWQgaW4gc2lnbmF0dXJlXG4iICsgCisJCQkiICAgICAgICBTeXN0ZW0ub3V0LnByaW50
bG4obS5nZXRHZW5lcmljUmV0dXJuVHlwZSgpKTtcbiIgKyAKKwkJCSIgICAgICAgIGZvciAoVHlw
ZSB0IDogbS5nZXRHZW5lcmljUGFyYW1ldGVyVHlwZXMoKSkge1xuIiArIAorCQkJIiAgICAgICAg
ICAgIFN5c3RlbS5vdXQucHJpbnRsbih0KTtcbiIgKyAKKwkJCSIgICAgICAgIH1cbiIgKyAKKwkJ
CSIgICAgfVxuIiArIAorCQkJIiAgICBwdWJsaWMgc3RhdGljIE1ldGhvZCBnZXRMYW1iZGFNZXRo
b2QoU2VyaWFsaXplZExhbWJkYSBsYW1iZGEpIHRocm93cyBFeGNlcHRpb24ge1xuIiArIAorCQkJ
IiAgICAgICAgU3RyaW5nIGltcGxDbGFzc05hbWUgPSBsYW1iZGEuZ2V0SW1wbENsYXNzKCkucmVw
bGFjZShcJy9cJywgXCcuXCcpO1xuIiArIAorCQkJIiAgICAgICAgQ2xhc3M8Pz4gaW1wbENsYXNz
ID0gQ2xhc3MuZm9yTmFtZShpbXBsQ2xhc3NOYW1lKTtcbiIgKyAKKwkJCSIgICAgICAgIFN0cmlu
ZyBsYW1iZGFOYW1lID0gbGFtYmRhLmdldEltcGxNZXRob2ROYW1lKCk7XG4iICsgCisJCQkiICAg
ICAgICBmb3IgKE1ldGhvZCBtIDogaW1wbENsYXNzLmdldERlY2xhcmVkTWV0aG9kcygpKSB7XG4i
ICsgCisJCQkiICAgICAgICAgICAgaWYgKG0uZ2V0TmFtZSgpLmVxdWFscyhsYW1iZGFOYW1lKSkg
e1xuIiArIAorCQkJIiAgICAgICAgICAgICAgICByZXR1cm4gbTtcbiIgKyAKKwkJCSIgICAgICAg
ICAgICB9XG4iICsgCisJCQkiICAgICAgICB9XG4iICsgCisJCQkiICAgICAgICB0aHJvdyBuZXcg
RXhjZXB0aW9uKFwiTGFtYmRhIE1ldGhvZCBub3QgZm91bmRcIik7XG4iICsgCisJCQkiICAgIH1c
biIgKyAKKwkJCSIgICAgcHVibGljIHN0YXRpYyBTZXJpYWxpemVkTGFtYmRhIGdldFNlcmlhbGl6
ZWRMYW1iZGEoT2JqZWN0IGZ1bmN0aW9uKSB0aHJvd3MgRXhjZXB0aW9uIHtcbiIgKyAKKwkJCSIg
ICAgICAgIGlmIChmdW5jdGlvbiA9PSBudWxsIHx8ICEoZnVuY3Rpb24gaW5zdGFuY2VvZiBqYXZh
LmlvLlNlcmlhbGl6YWJsZSkpIHtcbiIgKyAKKwkJCSIgICAgICAgICAgICB0aHJvdyBuZXcgSWxs
ZWdhbEFyZ3VtZW50RXhjZXB0aW9uKCk7XG4iICsgCisJCQkiICAgICAgICB9XG4iICsgCisJCQki
ICAgICAgICBmb3IgKENsYXNzPD8+IGNsYXp6ID0gZnVuY3Rpb24uZ2V0Q2xhc3MoKTsgY2xhenog
IT0gbnVsbDsgY2xhenogPSBjbGF6ei5nZXRTdXBlcmNsYXNzKCkpIHtcbiIgKyAKKwkJCSIgICAg
ICAgICAgICB0cnkge1xuIiArIAorCQkJIiAgICAgICAgICAgICAgICBNZXRob2QgcmVwbGFjZU1l
dGhvZCA9IGNsYXp6LmdldERlY2xhcmVkTWV0aG9kKFwid3JpdGVSZXBsYWNlXCIpO1xuIiArIAor
CQkJIiAgICAgICAgICAgICAgICByZXBsYWNlTWV0aG9kLnNldEFjY2Vzc2libGUodHJ1ZSk7XG4i
ICsgCisJCQkiICAgICAgICAgICAgICAgIE9iamVjdCBzZXJpYWxpemVkRm9ybSA9IHJlcGxhY2VN
ZXRob2QuaW52b2tlKGZ1bmN0aW9uKTtcbiIgKyAKKwkJCSIgICAgICAgICAgICAgICAgaWYgKHNl
cmlhbGl6ZWRGb3JtIGluc3RhbmNlb2YgU2VyaWFsaXplZExhbWJkYSkge1xuIiArIAorCQkJIiAg
ICAgICAgICAgICAgICAgICAgcmV0dXJuIChTZXJpYWxpemVkTGFtYmRhKSBzZXJpYWxpemVkRm9y
bTtcbiIgKyAKKwkJCSIgICAgICAgICAgICAgICAgfVxuIiArIAorCQkJIiAgICAgICAgICAgIH1c
biIgKyAKKwkJCSIgICAgICAgICAgICBjYXRjaCAoTm9TdWNoTWV0aG9kRXJyb3IgZSkge1xuIiAr
IAorCQkJIiAgICAgICAgICAgICAgICAvLyBmYWxsIHRocm91Z2ggdGhlIGxvb3AgYW5kIHRyeSB0
aGUgbmV4dCBjbGFzc1xuIiArIAorCQkJIiAgICAgICAgICAgIH1cbiIgKyAKKwkJCSIgICAgICAg
ICAgICBjYXRjaCAoVGhyb3dhYmxlIHQpIHtcbiIgKyAKKwkJCSIgICAgICAgICAgICAgICAgdGhy
b3cgbmV3IFJ1bnRpbWVFeGNlcHRpb24oXCJFcnJvciB3aGlsZSBleHRyYWN0aW5nIHNlcmlhbGl6
ZWQgbGFtYmRhXCIsIHQpO1xuIiArIAorCQkJIiAgICAgICAgICAgIH1cbiIgKyAKKwkJCSIgICAg
ICAgIH1cbiIgKyAKKwkJCSIgICAgICAgIHRocm93IG5ldyBFeGNlcHRpb24oXCJ3cml0ZVJlcGxh
Y2UgbWV0aG9kIG5vdCBmb3VuZFwiKTtcbiIgKyAKKwkJCSIgICAgfVxuIiArIAorCQkJIn0iCisJ
CQl9LAorCQkJIlRlc3QuVGVzdCRUdXBsZTxqYXZhLmxhbmcuSW50ZWdlciwgamF2YS5sYW5nLlN0
cmluZz5cbiIgKworCQkJIlRlc3QuVGVzdCRUdXBsZTxqYXZhLmxhbmcuU3RyaW5nLCBqYXZhLmxh
bmcuRG91YmxlPiIsCisJCQljdXN0b21PcHRpb25zKTsKK30KKy8vIGh0dHBzOi8vYnVncy5lY2xp
cHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD00NDkwNjMsIFsxLjhdW2NvbXBpbGVyXSBCcmlu
ZyBiYWNrIGdlbmVyaWMgc2lnbmF0dXJlcyBmb3IgTGFtYmRhIEV4cHJlc3Npb25zIAorcHVibGlj
IHZvaWQgdGVzdDQ0OTA2M2YoKSB7CisJTWFwIGN1c3RvbU9wdGlvbnMgPSBnZXRDb21waWxlck9w
dGlvbnMoKTsKKwljdXN0b21PcHRpb25zLnB1dChDb21waWxlck9wdGlvbnMuT1BUSU9OX0xhbWJk
YUdlbmVyaWNTaWduYXR1cmUsIENvbXBpbGVyT3B0aW9ucy5HRU5FUkFURSk7CisJdGhpcy5ydW5D
b25mb3JtVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJUZXN0LmphdmEiLAorCQkJImltcG9y
dCBqYXZhLmlvLlNlcmlhbGl6YWJsZTtcbiIgKyAKKwkJCSJpbXBvcnQgamF2YS5sYW5nLnJlZmxl
Y3QuTWV0aG9kO1xuIiArIAorCQkJImltcG9ydCBqYXZhLmxhbmcucmVmbGVjdC5UeXBlO1xuIiAr
IAorCQkJInB1YmxpYyBjbGFzcyBUZXN0IGltcGxlbWVudHMgU2VyaWFsaXphYmxle1xuIiArIAor
CQkJIiAgICBwdWJsaWMgc3RhdGljIGludGVyZmFjZSBNYXA8SU4sIE9VVD4ge1xuIiArIAorCQkJ
IiAgICAgICAgcHVibGljIE9VVCBtYXAoSU4gaW4pO1xuIiArIAorCQkJIiAgICB9XG4iICsgCisJ
CQkiICAgIHB1YmxpYyBzdGF0aWMgVHVwbGU8SW50ZWdlciwgU3RyaW5nPiBub29wKFR1cGxlPFN0
cmluZywgRG91YmxlPiB0KXtyZXR1cm4gbnVsbDt9XG4iICsKKwkJCSIgICAgcHVibGljIHN0YXRp
YyBjbGFzcyBUdXBsZTxUMSwgVDI+IHtcbiIgKyAKKwkJCSIgICAgICAgIHByaXZhdGUgVDEgZmll
bGQxO1xuIiArIAorCQkJIiAgICAgICAgcHJpdmF0ZSBUMiBmaWVsZDI7XG4iICsgCisJCQkiICAg
IH1cbiIgKyAKKwkJCSIgICAgcHVibGljIHN0YXRpYyB2b2lkIG1haW4oU3RyaW5nW10gc3RyaW5n
cykgdGhyb3dzIEV4Y2VwdGlvbiB7XG4iICsgCisJCQkiICAgICAgICBNYXA8VHVwbGU8U3RyaW5n
LCBEb3VibGU+LCBUdXBsZTxJbnRlZ2VyLCBTdHJpbmc+PiBtYXAgPSBUZXN0Ojpub29wO1xuIiAr
IAorCQkJIiAgICAgICAgZm9yKE1ldGhvZCBtIDogVGVzdC5jbGFzcy5nZXREZWNsYXJlZE1ldGhv
ZHMoKSkge1xuIiArIAorCQkJIiAgICAgICAgLy8gVXNlIHRoZSB0eXBlIGluZm9ybWF0aW9uIHN0
b3JlZCBpbiBzaWduYXR1cmVcbiIgKyAKKwkJCSIgICAgICAgICAgICBpZiAobS5nZXROYW1lKCku
Y29udGFpbnMoXCJsYW1iZGFcIikpIHtcbiIgKworCQkJIiAgICAgICAgICAgICAgU3lzdGVtLm91
dC5wcmludGxuKG0uZ2V0R2VuZXJpY1JldHVyblR5cGUoKSk7XG4iICsgCisJCQkiICAgICAgICAg
ICAgICBmb3IgKFR5cGUgdCA6IG0uZ2V0R2VuZXJpY1BhcmFtZXRlclR5cGVzKCkpIHtcbiIgKyAK
KwkJCSIgICAgICAgICAgICAgICAgICBTeXN0ZW0ub3V0LnByaW50bG4odCk7XG4iICsgCisJCQki
ICAgICAgICAgICAgICB9XG4iICsKKwkJCSIgICAgICAgICAgICB9XG4iICsKKwkJCSIgICAgICAg
IH1cbiIgKworCQkJIiAgICB9XG4iICsgCisJCQkifSIKKwkJCX0sCisJCQkiIiwKKwkJCWN1c3Rv
bU9wdGlvbnMpOworfQogcHVibGljIHN0YXRpYyBDbGFzcyB0ZXN0Q2xhc3MoKSB7CiAJcmV0dXJu
IExhbWJkYUV4cHJlc3Npb25zVGVzdC5jbGFzczsKIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2JhdGNoL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9iYXRjaC9N
YWluLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9iYXRjaC9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYmF0Y2gvTWFpbi5qYXZhCmluZGV4IDNlNGM0NGUuLmQ2ZjkxOTUgMTAw
NjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2JhdGNoL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9iYXRjaC9NYWluLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
YmF0Y2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2JhdGNoL01haW4uamF2YQpA
QCAtMjE5OSw2ICsyMTk5LDEzIEBACiAJCQkJCQkJQ29tcGlsZXJPcHRpb25zLkdFTkVSQVRFKTsK
IAkJCQkJY29udGludWU7CiAJCQkJfQorCQkJCWlmIChjdXJyZW50QXJnLmVxdWFscygiLWdlbmVy
aWNzaWduYXR1cmUiKSkgeyAvLyROT04tTkxTLTEkCisJCQkJCW1vZGUgPSBERUZBVUxUOworCQkJ
CQl0aGlzLm9wdGlvbnMucHV0KAorCQkJCQkJCUNvbXBpbGVyT3B0aW9ucy5PUFRJT05fTGFtYmRh
R2VuZXJpY1NpZ25hdHVyZSwKKwkJCQkJCQlDb21waWxlck9wdGlvbnMuR0VORVJBVEUpOworCQkJ
CQljb250aW51ZTsKKwkJCQl9CiAJCQkJaWYgKGN1cnJlbnRBcmcuc3RhcnRzV2l0aCgiLWciKSkg
eyAvLyROT04tTkxTLTEkCiAJCQkJCW1vZGUgPSBERUZBVUxUOwogCQkJCQlTdHJpbmcgZGVidWdP
cHRpb24gPSBjdXJyZW50QXJnOwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvYmF0
Y2gvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2JhdGNoL21lc3NhZ2VzLnByb3Bl
cnRpZXMgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9iYXRjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYmF0Y2gvbWVzc2FnZXMucHJvcGVydGllcwppbmRleCA3Mjk3NWZkLi5kNDNm
NDcxIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9iYXRjaC9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvYmF0Y2gvbWVzc2FnZXMucHJvcGVydGllcworKysgYi9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9iYXRjaC9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
YmF0Y2gvbWVzc2FnZXMucHJvcGVydGllcwpAQCAtMSw1ICsxLDUgQEAKICMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMj
IyMjIyMjIyMKLSMgQ29weXJpZ2h0IChjKSAyMDAwLCAyMDEzIElCTSBDb3Jwb3JhdGlvbiBhbmQg
b3RoZXJzLgorIyBDb3B5cmlnaHQgKGMpIDIwMDAsIDIwMTQgSUJNIENvcnBvcmF0aW9uIGFuZCBv
dGhlcnMuCiAjIEFsbCByaWdodHMgcmVzZXJ2ZWQuIFRoaXMgcHJvZ3JhbSBhbmQgdGhlIGFjY29t
cGFueWluZyBtYXRlcmlhbHMKICMgYXJlIG1hZGUgYXZhaWxhYmxlIHVuZGVyIHRoZSB0ZXJtcyBv
ZiB0aGUgRWNsaXBzZSBQdWJsaWMgTGljZW5zZSB2MS4wCiAjIHdoaWNoIGFjY29tcGFuaWVzIHRo
aXMgZGlzdHJpYnV0aW9uLCBhbmQgaXMgYXZhaWxhYmxlIGF0CkBAIC0yNTksNiArMjU5LDcgQEAK
IFwgICAgLWlubGluZUpTUiAgICAgICAgIGlubGluZSBKU1IgYnl0ZWNvZGUgKGltcGxpY2l0IGlm
IHRhcmdldCA+PSAxLjUpXG5cCiBcICAgIC1lbmFibGVKYXZhZG9jICAgICBjb25zaWRlciByZWZl
cmVuY2VzIGluIGphdmFkb2NcblwKIFwgICAgLXBhcmFtZXRlcnMgICAgICAgIGdlbmVyYXRlIG1l
dGhvZCBwYXJhbWV0ZXJzIGF0dHJpYnV0ZSAoZm9yIHRhcmdldCA+PSAxLjgpXG5cCitcICAgIC1n
ZW5lcmljc2lnbmF0dXJlICBnZW5lcmF0ZSBnZW5lcmljIHNpZ25hdHVyZSBmb3IgbGFtYmRhIGV4
cHJlc3Npb25zXG5cCiBcICAgIC1YZW1hY3MgICAgICAgICAgICB1c2VkIHRvIGVuYWJsZSBlbWFj
cy1zdHlsZSBvdXRwdXQgaW4gdGhlIGNvbnNvbGUuXG5cCiBcICAgICAgICAgICAgICAgICAgICAg
ICBJdCBkb2VzIG5vdCBhZmZlY3QgdGhlIHhtbCBsb2cgb3V0cHV0XG5cCiBcICAgIC1taXNzaW5n
TnVsbERlZmF1bHQgIHJlcG9ydCBtaXNzaW5nIGRlZmF1bHQgbnVsbG5lc3MgYW5ub3RhdGlvblxu
XApkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9MYW1iZGFFeHByZXNzaW9uLmphdmEgYi9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
YXN0L0xhbWJkYUV4cHJlc3Npb24uamF2YQppbmRleCA2ZTNlMTEzLi40N2IxZjdjIDEwMDY0NAot
LS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXN0L0xhbWJkYUV4cHJlc3Npb24uamF2YQorKysgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0xh
bWJkYUV4cHJlc3Npb24uamF2YQpAQCAtMzM3LDYgKzMzNyw3IEBACiAJCQkJfQogCQkJfQogCQl9
CisJCWJvb2xlYW4gZ2VuZXJpY1NpZ25hdHVyZU5lZWRlZCA9IHRoaXMucmVxdWlyZXNHZW5lcmlj
U2lnbmF0dXJlIHx8IGJsb2NrU2NvcGUuY29tcGlsZXJPcHRpb25zKCkuZ2VuZXJhdGVHZW5lcmlj
U2lnbmF0dXJlRm9yTGFtYmRhRXhwcmVzc2lvbnM7CiAJCWZvciAoaW50IGkgPSAwOyBpIDwgYXJn
dW1lbnRzTGVuZ3RoOyBpKyspIHsKIAkJCUFyZ3VtZW50IGFyZ3VtZW50ID0gdGhpcy5hcmd1bWVu
dHNbaV07CiAJCQlUeXBlQmluZGluZyBhcmd1bWVudFR5cGU7CkBAIC0zNDksNyArMzUwLDcgQEAK
IAkJCQkJCXRoaXMucmVzb2x2ZWRUeXBlID0gbnVsbDsgLy8gY29udGludWUgdG8gdHlwZSBjaGVj
ay4KIAkJCQkJfQogCQkJCX0KLQkJCQlpZiAodGhpcy5yZXF1aXJlc0dlbmVyaWNTaWduYXR1cmUp
IHsKKwkJCQlpZiAoZ2VuZXJpY1NpZ25hdHVyZU5lZWRlZCkgewogCQkJCQlUeXBlQmluZGluZyBs
ZWFmVHlwZSA9IGFyZ3VtZW50VHlwZS5sZWFmQ29tcG9uZW50VHlwZSgpOwogCQkJCQlpZiAobGVh
ZlR5cGUgaW5zdGFuY2VvZiBSZWZlcmVuY2VCaW5kaW5nICYmICgoKFJlZmVyZW5jZUJpbmRpbmcp
IGxlYWZUeXBlKS5tb2RpZmllcnMgJiBFeHRyYUNvbXBpbGVyTW9kaWZpZXJzLkFjY0dlbmVyaWNT
aWduYXR1cmUpICE9IDApCiAJCQkJCQl0aGlzLmJpbmRpbmcubW9kaWZpZXJzIHw9IEV4dHJhQ29t
cGlsZXJNb2RpZmllcnMuQWNjR2VuZXJpY1NpZ25hdHVyZTsKQEAgLTM4OSw3ICszOTAsNyBAQAog
CQkJaWYgKChleGNlcHRpb24udGFnQml0cyAmIFRhZ0JpdHMuSGFzTWlzc2luZ1R5cGUpICE9IDAp
IHsKIAkJCQl0aGlzLmJpbmRpbmcudGFnQml0cyB8PSBUYWdCaXRzLkhhc01pc3NpbmdUeXBlOwog
CQkJfQotCQkJaWYgKHRoaXMucmVxdWlyZXNHZW5lcmljU2lnbmF0dXJlKQorCQkJaWYgKGdlbmVy
aWNTaWduYXR1cmVOZWVkZWQpCiAJCQkJdGhpcy5iaW5kaW5nLm1vZGlmaWVycyB8PSAoZXhjZXB0
aW9uLm1vZGlmaWVycyAmIEV4dHJhQ29tcGlsZXJNb2RpZmllcnMuQWNjR2VuZXJpY1NpZ25hdHVy
ZSk7CiAJCX0KIAkJCkBAIC0zOTgsNyArMzk5LDcgQEAKIAkJCWlmICgocmV0dXJuVHlwZS50YWdC
aXRzICYgVGFnQml0cy5IYXNNaXNzaW5nVHlwZSkgIT0gMCkgewogCQkJCXRoaXMuYmluZGluZy50
YWdCaXRzIHw9IFRhZ0JpdHMuSGFzTWlzc2luZ1R5cGU7CiAJCQl9Ci0JCQlpZiAodGhpcy5yZXF1
aXJlc0dlbmVyaWNTaWduYXR1cmUpIHsKKwkJCWlmIChnZW5lcmljU2lnbmF0dXJlTmVlZGVkKSB7
CiAJCQkJVHlwZUJpbmRpbmcgbGVhZlR5cGUgPSByZXR1cm5UeXBlLmxlYWZDb21wb25lbnRUeXBl
KCk7CiAJCQkJaWYgKGxlYWZUeXBlIGluc3RhbmNlb2YgUmVmZXJlbmNlQmluZGluZyAmJiAoKChS
ZWZlcmVuY2VCaW5kaW5nKSBsZWFmVHlwZSkubW9kaWZpZXJzICYgRXh0cmFDb21waWxlck1vZGlm
aWVycy5BY2NHZW5lcmljU2lnbmF0dXJlKSAhPSAwKQogCQkJCQl0aGlzLmJpbmRpbmcubW9kaWZp
ZXJzIHw9IEV4dHJhQ29tcGlsZXJNb2RpZmllcnMuQWNjR2VuZXJpY1NpZ25hdHVyZTsKZGlmZiAt
LWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9pbXBsL0NvbXBpbGVyT3B0aW9ucy5qYXZhIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2ltcGwvQ29t
cGlsZXJPcHRpb25zLmphdmEKaW5kZXggN2M1ZjE1Ny4uNzc2NzM5NyAxMDA2NDQKLS0tIGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2ltcGwvQ29tcGlsZXJPcHRpb25zLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2ltcGwvQ29tcGlsZXJP
cHRpb25zLmphdmEKQEAgLTUxLDYgKzUxLDcgQEAKIAlwdWJsaWMgc3RhdGljIGZpbmFsIFN0cmlu
ZyBPUFRJT05fU291cmNlRmlsZUF0dHJpYnV0ZSA9ICJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21w
aWxlci5kZWJ1Zy5zb3VyY2VGaWxlIjsgLy8kTk9OLU5MUy0xJAogCXB1YmxpYyBzdGF0aWMgZmlu
YWwgU3RyaW5nIE9QVElPTl9QcmVzZXJ2ZVVudXNlZExvY2FsID0gIm9yZy5lY2xpcHNlLmpkdC5j
b3JlLmNvbXBpbGVyLmNvZGVnZW4udW51c2VkTG9jYWwiOyAvLyROT04tTkxTLTEkCiAJcHVibGlj
IHN0YXRpYyBmaW5hbCBTdHJpbmcgT1BUSU9OX01ldGhvZFBhcmFtZXRlcnNBdHRyaWJ1dGUgPSAi
b3JnLmVjbGlwc2UuamR0LmNvcmUuY29tcGlsZXIuY29kZWdlbi5tZXRob2RQYXJhbWV0ZXJzIjsg
Ly8kTk9OLU5MUy0xJAorCXB1YmxpYyBzdGF0aWMgZmluYWwgU3RyaW5nIE9QVElPTl9MYW1iZGFH
ZW5lcmljU2lnbmF0dXJlID0gIm9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLmNvZGVnZW4u
bGFtYmRhLmdlbmVyaWNTaWduYXR1cmUiOyAvLyROT04tTkxTLTEkCiAJcHVibGljIHN0YXRpYyBm
aW5hbCBTdHJpbmcgT1BUSU9OX0RvY0NvbW1lbnRTdXBwb3J0PSAib3JnLmVjbGlwc2UuamR0LmNv
cmUuY29tcGlsZXIuZG9jLmNvbW1lbnQuc3VwcG9ydCI7IC8vJE5PTi1OTFMtMSQKIAlwdWJsaWMg
c3RhdGljIGZpbmFsIFN0cmluZyBPUFRJT05fUmVwb3J0TWV0aG9kV2l0aENvbnN0cnVjdG9yTmFt
ZSA9ICJvcmcuZWNsaXBzZS5qZHQuY29yZS5jb21waWxlci5wcm9ibGVtLm1ldGhvZFdpdGhDb25z
dHJ1Y3Rvck5hbWUiOyAvLyROT04tTkxTLTEkCiAJcHVibGljIHN0YXRpYyBmaW5hbCBTdHJpbmcg
T1BUSU9OX1JlcG9ydE92ZXJyaWRpbmdQYWNrYWdlRGVmYXVsdE1ldGhvZCA9ICJvcmcuZWNsaXBz
ZS5qZHQuY29yZS5jb21waWxlci5wcm9ibGVtLm92ZXJyaWRpbmdQYWNrYWdlRGVmYXVsdE1ldGhv
ZCI7IC8vJE5PTi1OTFMtMSQKQEAgLTMxNCw3ICszMTUsOSBAQAogCS8qKiBDbGFzc2ZpbGUgZGVi
dWcgaW5mb3JtYXRpb24sIG1heSBjb250YWluIHNvdXJjZSBmaWxlIG5hbWUsIGxpbmUgbnVtYmVy
cywgbG9jYWwgdmFyaWFibGUgdGFibGVzLCBldGMuLi4gKi8KIAlwdWJsaWMgaW50IHByb2R1Y2VE
ZWJ1Z0F0dHJpYnV0ZXM7IAogCS8qKiBDbGFzc2ZpbGUgbWV0aG9kIHBhdGFtZXRlcnMgaW5mb3Jt
YXRpb24gYXMgcGVyIEpFUCAxMTguLi4gKi8KLQlwdWJsaWMgYm9vbGVhbiBwcm9kdWNlTWV0aG9k
UGFyYW1ldGVyczsgCisJcHVibGljIGJvb2xlYW4gcHJvZHVjZU1ldGhvZFBhcmFtZXRlcnM7CisJ
LyoqIEluZGljYXRlcyB3aGV0aGVyIGdlbmVyaWMgc2lnbmF0dXJlIHNob3VsZCBiZSBnZW5lcmF0
ZWQgZm9yIGxhbWJkYSBleHByZXNzaW9ucyAqLworCXB1YmxpYyBib29sZWFuIGdlbmVyYXRlR2Vu
ZXJpY1NpZ25hdHVyZUZvckxhbWJkYUV4cHJlc3Npb25zOwogCS8qKiBDb21wbGlhbmNlIGxldmVs
IGZvciB0aGUgY29tcGlsZXIsIHJlZmVycyB0byBhIEpESyB2ZXJzaW9uLCBlLmcuIHtAbGluayBD
bGFzc0ZpbGVDb25zdGFudHMjSkRLMV80fSAqLwogCXB1YmxpYyBsb25nIGNvbXBsaWFuY2VMZXZl
bDsKIAkvKiogT3JpZ2luYWwgY29tcGxpYW5jZSBsZXZlbCBmb3IgdGhlIGNvbXBpbGVyLCByZWZl
cnMgdG8gYSBKREsgdmVyc2lvbiwgZS5nLiB7QGxpbmsgQ2xhc3NGaWxlQ29uc3RhbnRzI0pESzFf
NH0sCkBAIC0xMDQwLDYgKzEwNDMsNyBAQAogCQlvcHRpb25zTWFwLnB1dChPUFRJT05fTGluZU51
bWJlckF0dHJpYnV0ZSwgKHRoaXMucHJvZHVjZURlYnVnQXR0cmlidXRlcyAmIENsYXNzRmlsZUNv
bnN0YW50cy5BVFRSX0xJTkVTKSAhPSAwID8gR0VORVJBVEUgOiBET19OT1RfR0VORVJBVEUpOwog
CQlvcHRpb25zTWFwLnB1dChPUFRJT05fU291cmNlRmlsZUF0dHJpYnV0ZSwgKHRoaXMucHJvZHVj
ZURlYnVnQXR0cmlidXRlcyAmIENsYXNzRmlsZUNvbnN0YW50cy5BVFRSX1NPVVJDRSkgIT0gMCA/
IEdFTkVSQVRFIDogRE9fTk9UX0dFTkVSQVRFKTsKIAkJb3B0aW9uc01hcC5wdXQoT1BUSU9OX01l
dGhvZFBhcmFtZXRlcnNBdHRyaWJ1dGUsIHRoaXMucHJvZHVjZU1ldGhvZFBhcmFtZXRlcnMgPyBH
RU5FUkFURSA6IERPX05PVF9HRU5FUkFURSk7CisJCW9wdGlvbnNNYXAucHV0KE9QVElPTl9MYW1i
ZGFHZW5lcmljU2lnbmF0dXJlLCB0aGlzLmdlbmVyYXRlR2VuZXJpY1NpZ25hdHVyZUZvckxhbWJk
YUV4cHJlc3Npb25zID8gR0VORVJBVEUgOiBET19OT1RfR0VORVJBVEUpOwogCQlvcHRpb25zTWFw
LnB1dChPUFRJT05fUHJlc2VydmVVbnVzZWRMb2NhbCwgdGhpcy5wcmVzZXJ2ZUFsbExvY2FsVmFy
aWFibGVzID8gUFJFU0VSVkUgOiBPUFRJTUlaRV9PVVQpOwogCQlvcHRpb25zTWFwLnB1dChPUFRJ
T05fRG9jQ29tbWVudFN1cHBvcnQsIHRoaXMuZG9jQ29tbWVudFN1cHBvcnQgPyBFTkFCTEVEIDog
RElTQUJMRUQpOwogCQlvcHRpb25zTWFwLnB1dChPUFRJT05fUmVwb3J0TWV0aG9kV2l0aENvbnN0
cnVjdG9yTmFtZSwgZ2V0U2V2ZXJpdHlTdHJpbmcoTWV0aG9kV2l0aENvbnN0cnVjdG9yTmFtZSkp
OwpAQCAtMTUzNCw2ICsxNTM4LDEzIEBACiAJCQkJdGhpcy5wcm9kdWNlTWV0aG9kUGFyYW1ldGVy
cyA9IGZhbHNlOwogCQkJfQogCQl9CisJCWlmICgob3B0aW9uVmFsdWUgPSBvcHRpb25zTWFwLmdl
dChPUFRJT05fTGFtYmRhR2VuZXJpY1NpZ25hdHVyZSkpICE9IG51bGwpIHsKKwkJCWlmIChHRU5F
UkFURS5lcXVhbHMob3B0aW9uVmFsdWUpKSB7CisJCQkJdGhpcy5nZW5lcmF0ZUdlbmVyaWNTaWdu
YXR1cmVGb3JMYW1iZGFFeHByZXNzaW9ucyA9IHRydWU7CisJCQl9IGVsc2UgaWYgKERPX05PVF9H
RU5FUkFURS5lcXVhbHMob3B0aW9uVmFsdWUpKSB7CisJCQkJdGhpcy5nZW5lcmF0ZUdlbmVyaWNT
aWduYXR1cmVGb3JMYW1iZGFFeHByZXNzaW9ucyA9IGZhbHNlOworCQkJfQorCQl9CiAJCWlmICgo
b3B0aW9uVmFsdWUgPSBvcHRpb25zTWFwLmdldChPUFRJT05fU3VwcHJlc3NXYXJuaW5ncykpICE9
IG51bGwpIHsKIAkJCWlmIChFTkFCTEVELmVxdWFscyhvcHRpb25WYWx1ZSkpIHsKIAkJCQl0aGlz
LnN1cHByZXNzV2FybmluZ3MgPSB0cnVlOwpAQCAtMTgyNiw2ICsxODM3LDcgQEAKIAkJYnVmLmFw
cGVuZCgiXG5cdC0gbGluZSBudW1iZXIgZGVidWcgYXR0cmlidXRlczogIikuYXBwZW5kKCh0aGlz
LnByb2R1Y2VEZWJ1Z0F0dHJpYnV0ZXMgJiBDbGFzc0ZpbGVDb25zdGFudHMuQVRUUl9MSU5FUykg
IT0gMCA/ICJPTiIgOiAiIE9GRiIpOyAvLyROT04tTkxTLTEkIC8vJE5PTi1OTFMtMiQgLy8kTk9O
LU5MUy0zJAogCQlidWYuYXBwZW5kKCJcblx0LSBzb3VyY2UgZGVidWcgYXR0cmlidXRlczogIiku
YXBwZW5kKCh0aGlzLnByb2R1Y2VEZWJ1Z0F0dHJpYnV0ZXMgJiBDbGFzc0ZpbGVDb25zdGFudHMu
QVRUUl9TT1VSQ0UpICE9IDAgPyAiT04iIDogIiBPRkYiKTsgLy8kTk9OLU5MUy0xJCAvLyROT04t
TkxTLTIkIC8vJE5PTi1OTFMtMyQKIAkJYnVmLmFwcGVuZCgiXG5cdC0gTWV0aG9kUGFyYW1ldGVy
cyBhdHRyaWJ1dGVzOiAiKS5hcHBlbmQodGhpcy5wcm9kdWNlTWV0aG9kUGFyYW1ldGVycyA/IEdF
TkVSQVRFIDogRE9fTk9UX0dFTkVSQVRFKTsgLy8kTk9OLU5MUy0xJAorCQlidWYuYXBwZW5kKCJc
blx0LSBHZW5lcmljIHNpZ25hdHVyZSBmb3IgbGFtYmRhIGV4cHJlc3Npb25zOiAiKS5hcHBlbmQo
dGhpcy5nZW5lcmF0ZUdlbmVyaWNTaWduYXR1cmVGb3JMYW1iZGFFeHByZXNzaW9ucyA/IEdFTkVS
QVRFIDogRE9fTk9UX0dFTkVSQVRFKTsgLy8kTk9OLU5MUy0xJAogCQlidWYuYXBwZW5kKCJcblx0
LSBwcmVzZXJ2ZSBhbGwgbG9jYWwgdmFyaWFibGVzOiAiKS5hcHBlbmQodGhpcy5wcmVzZXJ2ZUFs
bExvY2FsVmFyaWFibGVzID8gIk9OIiA6ICIgT0ZGIik7IC8vJE5PTi1OTFMtMSQgLy8kTk9OLU5M
Uy0yJCAvLyROT04tTkxTLTMkCiAJCWJ1Zi5hcHBlbmQoIlxuXHQtIG1ldGhvZCB3aXRoIGNvbnN0
cnVjdG9yIG5hbWU6ICIpLmFwcGVuZChnZXRTZXZlcml0eVN0cmluZyhNZXRob2RXaXRoQ29uc3Ry
dWN0b3JOYW1lKSk7IC8vJE5PTi1OTFMtMSQKIAkJYnVmLmFwcGVuZCgiXG5cdC0gb3ZlcnJpZGRl
biBwYWNrYWdlIGRlZmF1bHQgbWV0aG9kOiAiKS5hcHBlbmQoZ2V0U2V2ZXJpdHlTdHJpbmcoT3Zl
cnJpZGRlblBhY2thZ2VEZWZhdWx0TWV0aG9kKSk7IC8vJE5PTi1OTFMtMSQ=
</data>

          </attachment>
      

    </bug>

</bugzilla>