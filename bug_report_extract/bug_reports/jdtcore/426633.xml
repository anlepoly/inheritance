<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>426633</bug_id>
          
          <creation_ts>2014-01-24 21:59:00 -0500</creation_ts>
          <short_desc>[1.8][compiler] Compiler generates code that invokes inapplicable method.</short_desc>
          <delta_ts>2014-01-25 23:54:41 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>RESOLVED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Srikanth Sankaran">srikanth_sankaran</reporter>
          <assigned_to name="Srikanth Sankaran">srikanth_sankaran</assigned_to>
          <cc>jarthana</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2354498</commentid>
    <comment_count>0</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-24 21:59:33 -0500</bug_when>
    <thetext>Consider the following program:

// -
interface I {
	 &lt;T&gt; void foo (T... p);
}
abstract class A implements I {
	public void foo(Object [] p) {
		System.out.println(&quot;A.foo&quot;);
	}
}
public class X extends A {
	public static void main(String[] args) {
		A a = new X();
		a.foo(&quot;hello&quot;, &quot;world&quot;);
	}
}

At the call site, A.foo is not applicable given the arguments and parameters
differ in length.

I.foo is accessible and applicable, but A.foo does override it without being
applicable.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354499</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-24 22:10:17 -0500</bug_when>
    <thetext>This issue has had a colorful past: 

JDK5 issues:

X.java:5: warning: foo(java.lang.Object[]) in A cannot implement &lt;T&gt;foo(T...) in
 I; overriding method is missing &apos;...&apos;
        public void foo(Object [] p) {
                    ^
X.java:9: warning: foo(java.lang.Object[]) in A cannot implement &lt;T&gt;foo(T...) in
 I; overriding method is missing &apos;...&apos;
public class X extends A {

but then goes ahead and compiles which when run prints A.foo

JDK6:

Silent during compile, A.foo at runtime.

JDK7:

X.java:12: error: method foo in class A cannot be applied to given types;
                a.foo(&quot;hello&quot;, &quot;world&quot;);
                 ^

JDK8:

X.java:12: error: &lt;T&gt;foo(T...) in I is defined in an inaccessible class or inter
face
                a.foo(&quot;hello&quot;, &quot;world&quot;);
                 ^
  where T is a type-variable:
    T extends Object declared in method &lt;T&gt;foo(T...)
1 error

On BETA_JAVA8 head, project setting 1.5 - 1.7 compile the code with a warning

Varargs methods should only override or be overridden by other varargs methods unlike A.foo(Object[]) and 
	 I.foo(Object...)


1.8 setting issues:

The method foo(Object[]) in the type A is not applicable for the arguments (String, String)

but that is due to a recent change in an area that is under flux. And there
are variants which we do compile as we do in 1.7- modes.

We need to emit a clear new diagnostic for this scenario.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354500</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-24 22:46:42 -0500</bug_when>
    <thetext>(In reply to Srikanth Sankaran from comment #1)

&gt; but that is due to a recent change in an area that is under flux. And there
&gt; are variants which we do compile as we do in 1.7- modes.

Consider:

interface I {
	 &lt;T&gt; void foo (T... p);
}
abstract class A  {
	public void foo(Object [] p) {
		System.out.println(&quot;A.foo&quot;);
	}
}
abstract class B extends A implements I {
	
}
public class X extends B implements I {
	public static void main(String[] args) {
		B b = new X();
		b.foo(&quot;hello&quot;, &quot;world&quot;);
	}
}

This is compiled without error in 1.8 and when run prints A.foo.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2354602</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-01-25 23:54:41 -0500</bug_when>
    <thetext>Fix and tests available here: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=2b49f89ec08ec07d960829d0eb3050d846fdb2ac</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>