<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>434044</bug_id>
          
          <creation_ts>2014-05-03 17:56:00 -0400</creation_ts>
          <short_desc>Java 8 generics thinks single method is ambiguous</short_desc>
          <delta_ts>2014-06-08 08:25:26 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.4</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>critical</bug_severity>
          <target_milestone>4.4 RC4</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Garret Wilson">garret</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>daniel_megert</cc>
    
    <cc>garret</cc>
    
    <cc>jarthana</cc>
    
    <cc>jesper</cc>
    
    <cc>manpalat</cc>
    
    <cc>markus_keller</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="62416"
          type_id="1"
          status="+"
          setter="jarthana"
    />
    <flag name="review"
          id="62708"
          type_id="1"
          status="+"
          setter="jesper"
    />
    <flag name="review"
          id="62709"
          type_id="1"
          status="+"
          setter="manpalat"
    />
    <flag name="review"
          id="62827"
          type_id="1"
          status="+"
          setter="daniel_megert"
    />
    <flag name="review"
          id="62832"
          type_id="1"
          status="+"
          setter="markus_keller"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2396487</commentid>
    <comment_count>0</comment_count>
    <who name="Garret Wilson">garret</who>
    <bug_when>2014-05-03 17:56:03 -0400</bug_when>
    <thetext>I have a single method on a generic parameterized class. A caller gets an instance of the class but thinks the method invocation is ambiguous:

The method doFoo() is ambiguous for the type capture#4-of ? extends EclipseJava8Generics.Foo&lt;?&gt;

I will attach a complete test case for reproducing this issue in a separate comment.

See similar Bug 431408.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2396488</commentid>
    <comment_count>1</comment_count>
    <who name="Garret Wilson">garret</who>
    <bug_when>2014-05-03 17:57:34 -0400</bug_when>
    <thetext>public class EclipseJava8Generics {

  public interface Foo&lt;V&gt; {
    public V doFoo();
  }

  public static class FooBar&lt;V, T extends Foo&lt;V&gt;&gt; {
    public T getBar() {
      return null;
    }
  }

  public static class BaseClass {
    protected &lt;V&gt; FooBar&lt;V, ? extends Foo&lt;V&gt;&gt; doSomething() {
      return null;
    }
  }

  public static class DerivedClass extends BaseClass {
    @Override
    protected &lt;V&gt; FooBar&lt;V, ? extends Foo&lt;V&gt;&gt; doSomething() {
      //Eclipse Bug 431408 (resolved) 
      FooBar&lt;V, ? extends Foo&lt;V&gt;&gt; fooBar = super.doSomething();
      return fooBar;
    }
  }

  public static class Factory {

    public static &lt;V, T extends Foo&lt;V&gt;&gt; FooBar&lt;V, T&gt; createFooBar() {
      return null;
    }
  }

  public static void test() {
    final FooBar&lt;?, ? extends Foo&lt;?&gt;&gt; typedProperty = Factory.createFooBar();
    //TODO Eclipse Bug 434044
    final Object propertyValue = typedProperty.getBar().doFoo();

  }

}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2396489</commentid>
    <comment_count>2</comment_count>
    <who name="Garret Wilson">garret</who>
    <bug_when>2014-05-03 18:01:31 -0400</bug_when>
    <thetext>I likely could have come up with an even smaller test case, but I&apos;m expanding the code used to reproduce Bug 431408. The actual code exhibits several additional generics-related bugs in Eclipse 4.4, so I wouldn&apos;t be surprised if I have to reuse that code yet again when I file another bug.

Note that this is a regression; this bug did not appear in Eclipse 4.3.2.

I note that I similarly had to file several generics-related bugs when Eclipse first got generics support.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2396493</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-03 18:57:03 -0400</bug_when>
    <thetext>Thanks for the test.

I&apos;m using this extract:

//--
public class EclipseJava8Generics {

  public interface Foo&lt;V&gt; {
    public V doFoo();
  }

  public static class FooBar&lt;V, T extends Foo&lt;V&gt;&gt; {
    public T getBar() {
      return null;
    }
  }

  public static class Factory {
    public static &lt;V, T extends Foo&lt;V&gt;&gt; FooBar&lt;V, T&gt; createFooBar() {
      return null;
    }
  }

  public static void test() {
    final FooBar&lt;?, ? extends Foo&lt;?&gt;&gt; typedProperty = Factory.createFooBar();
    //TODO Eclipse Bug 434044
    final Object propertyValue = typedProperty.getBar().doFoo();
  }

}
//---

Preliminary analysis:

The expression typedProperty.getBar() has a capture type, which ends up having two super interfaces: Foo&lt;capture#1-of ?&gt; and Foo&lt;capture#3-of ?&gt;.

The method doFoo() is found in both interfaces, neither is more specific than the other =&gt; hence the ambiguity report.

The bug is that we create the two captures in the first place.

Next I&apos;ll investigate why this does *not* happen in 1.7.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2396496</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-03 19:23:09 -0400</bug_when>
    <thetext>Interestingly, the bogus creation of duplicate captures also occurs in 1.7, just in that mode Scope.mostSpecificMethodBinding() has an extra filter to detect when two candidates have the same original, code comment is:
// parameterized superclasses &amp; interfaces may be walked twice from different paths

I&apos;d be surprise if that filtering is mandated by the spec. To me it looks more like a common sense addition in response to reported bugs (just guessing, that was before my time).

I&apos;ll see if we can make a more rigorous fix this time.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2396499</commentid>
    <comment_count>5</comment_count>
      <attachid>242670</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-03 19:56:04 -0400</bug_when>
    <thetext>Created attachment 242670
work in progress

This patch *would* fix the bug, but just in RunAllJava8Tests it produces 24 regressions. What does it tell us: these distinct but equal capture bindings *are* needed for some purpose, weird.

More investigation needed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2399560</commentid>
    <comment_count>6</comment_count>
    <who name="Garret Wilson">garret</who>
    <bug_when>2014-05-09 12:48:30 -0400</bug_when>
    <thetext>Hi, Stephan. Any progress on addressing this? Good luck.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2401620</commentid>
    <comment_count>7</comment_count>
    <who name="Garret Wilson">garret</who>
    <bug_when>2014-05-14 10:19:08 -0400</bug_when>
    <thetext>I&apos;m a little concerned about the state of this bug. It would be quite a shame if 4.4 were released without full support for the Java language, not even supporting Java 7 features available in Eclipse 4.3.

Stephan, do you have any update on this? At the very least, could you just put back in the workarounds that were present for Java 7, to prevent Eclipse 4.4 from being not a step backwards in Java language support?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2401773</commentid>
    <comment_count>8</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-14 13:00:16 -0400</bug_when>
    <thetext>This bug *might* indeed qualify for an RC2 fix. I&apos;ll give it a try, no promise yet ...

But rest assured: every version of every Java compiler contains bugs :-/

No, it&apos;s not an excuse, I know ... :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2403685</commentid>
    <comment_count>9</comment_count>
    <who name="Garret Wilson">garret</who>
    <bug_when>2014-05-19 09:38:55 -0400</bug_when>
    <thetext>&quot;But rest assured: every version of every Java compiler contains bugs ....&quot;

If this were a bug in some newfangled Java 8 lambda expression or something, I could understand. But wouldn&apos;t it be a shame for a new version of Eclipse to introduce *new* bugs that break compilation of *existing* versions of Java?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2403770</commentid>
    <comment_count>10</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-19 12:39:39 -0400</bug_when>
    <thetext>Just to explain the situation: 
The Java-8-enabled compiler contains a complete re-write of central parts of type checking, which in turn goes back to a rewrite of corresponding parts of JLS. So if in the end &quot;nothing changed&quot; for Java 7 features, this means the new implementation has gone from 0 to 100% within months (compare to several years of maturing of the old implementation).

I still haven&apos;t given up the hope of the last few remaining hours ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2403846</commentid>
    <comment_count>11</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-19 16:59:47 -0400</bug_when>
    <thetext>I think I found the root bug:

The bogus type is created by capturing the wildcard &quot;? extends Foo&lt;?&gt;&quot; to yield: 
   capture#2-of ? extends Foo&lt;?&gt;
   with superInterfaces = { Foo&lt;capture#3-of ?&gt;, Foo&lt;capture#1-of ?&gt; }
One superInterface is derived from the type variable&apos;s bound, the other one from the wildcard&apos;s bound.

Apparently, the code tries to merge multiple bounds into a minimal set of superInterfaces, but here we fail, because we first apply capture and then glb. The order must be inverted: first compute glb and then perform capture, because glb on captures has no chance to unify.

With inverted order we first merge:
   glb(Foo&lt;?&gt;, Foo&lt;capture#1-of ?&gt;) -&gt;  Foo&lt;capture#1-of ?&gt;
The next step, capture, is identy, because all wildcards have been captured already.

If anyone wonders, why we start with capture#1 in the input to glb: this type is introduced by sustituting &quot;Foo&lt;V&gt;&quot; as seen via the receiver type &quot;FooBar&lt;capture#1-of ?,capture#2-of ? extends Foo&lt;?&gt;&gt;&quot; (so, this doesn&apos;t qualify as &quot;capturing&quot; in the above reasoning).

I have a simple patch under test. Before posting and asking for review I will just do some code archeology and a full test run.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2403854</commentid>
    <comment_count>12</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-19 18:13:32 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #11)
&gt; Before posting and asking for review I will just do some code archeology


The most relevant change was via bug 112666, which intended to do *less* capturing (&quot;Changed CaptureBinding to only recapture the wildcard bound if the wildcard is extending its bound.&quot;). 
I believe the effect that this caused capture-before-glb was not intended. 
Note that the relevant code branch remained unchanged in that patch, see that http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=d6b4673c8981b96659c9dcea892ebe1f0abbb00b has no changes in the block starting at line 96: http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/tree/org.eclipse.jdt.core/compiler/org/eclipse/jdt/internal/compiler/lookup/CaptureBinding.java?id=d6b4673c8981b96659c9dcea892ebe1f0abbb00b#n96

Ergo: My patch-under-test does not conflict with any deliberate design choice.



Earlier history for the deeply interested reader: the fix that initially introduced capturing the wildcard.bound is : http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=7958800325e781c29b79a69900d300a76f68d447

Comment: *** empty log message ***

Some context can only be obtained by the two adjacent commits:

    http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=dfc12356d0e56187f27726140c3e4ba7be8134b7

which is the fix for bug 100128

and 

    http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=b2575708bb8dc5b4ad7b6e3107e511761c7e9659

which has an additional test for the same bug.

From bug 100128 we learn that Philipe and co where fighting a stack overflow due to a cyclic capture.

The initial fix was confirmed to solve the problem. It must have broken s.t. else, to urge Philipe to make adjustments in that same code area (via the undocumented commit). 


The same piece of code has been changed back and forth later:

Via bug 104082 &amp; bug 104167 it was changed to using originalWildcardBound (no capture).

Still later substitutedWildcardBound was renamed to capturedWildcardBound etc.

None of these changes discusses the interaction of capture &amp; glb, so this order is very likely not carefully planned.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2403857</commentid>
    <comment_count>13</comment_count>
      <attachid>243269</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-19 18:58:42 -0400</bug_when>
    <thetext>Created attachment 243269
proposed patch

Well localized patch that fixes the root problem, RunJDTCoreTests is green with no changes of existing tests.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2403858</commentid>
    <comment_count>14</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-19 19:03:32 -0400</bug_when>
    <thetext>Jay, this patch is ready for review. Thanks.

The problem is a regression in that we report a bogus error at 1.8 which is not reported at 1.7- (nor in previous JDT versions).

- problem analysis is in comment 3 plus comment 11

- code archeology in comment 12,
  TLDR:
  I did not find a hint that the order of capture-then-glb was intentional</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2403909</commentid>
    <comment_count>15</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-20 02:00:42 -0400</bug_when>
    <thetext>Patch looks good. And thanks for digging out all the history.

Just one question: It might seem like overkill, but does it make sense to call capture only as required (i.e. only on required bindings). But I must admit that I don&apos;t have a testcase I can back this with.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404025</commentid>
    <comment_count>16</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-20 05:38:30 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #15)
&gt; Just one question: It might seem like overkill, but does it make sense to
&gt; call capture only as required (i.e. only on required bindings). But I must
&gt; admit that I don&apos;t have a testcase I can back this with.

If it&apos;s about semantics: if a type has no wildcards capture should be the identity function anyway. 
If it&apos;s about performance: yes PTB.capture() could perhaps be sped up if we had a cheap query TB.containsWildcard(). Given we could spare an excursion into environment.createParameterizedType() this may indeed be relevant, performancewise.

-&gt; Should I file a bug for further investigation?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404035</commentid>
    <comment_count>17</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-20 05:46:33 -0400</bug_when>
    <thetext>Test &amp; fix have been released for 4.4 RC2 via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=35479e92cf76ddb81a077e36ac9bcdd2a30c6978</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2404040</commentid>
    <comment_count>18</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-20 05:49:33 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #16)
&gt; If it&apos;s about performance: yes PTB.capture() could perhaps be sped up if we
&gt; had a cheap query TB.containsWildcard(). Given we could spare an excursion
&gt; into environment.createParameterizedType() this may indeed be relevant,
&gt; performancewise.

yes, my concern was performance, but when I was playing around with your patch, I can&apos;t construct a case where greaterLowerBound() would return more than one element in the array and it will go beyond the first two lines. So, let&apos;s not bother about it.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2406866</commentid>
    <comment_count>19</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2014-05-26 01:10:12 -0400</bug_when>
    <thetext>Verified for Eclipse Luna 4.4RC2 Build id: I20140525-2000</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2408294</commentid>
    <comment_count>20</comment_count>
    <who name="Garret Wilson">garret</who>
    <bug_when>2014-05-27 11:03:14 -0400</bug_when>
    <thetext>I&apos;m sorry, guys, but this is still not fixed in Eclipse 4.4RC2. Yes, the original test case passed, but there are other similar test cases that did not pass. For example, the following variation still produces an &quot;ambiguous&quot; error and will not compile:

public class EclipseJava8Generics {

  public interface Foo&lt;V&gt; {
    public V doFoo();
  }

  public static class FooBar&lt;V, T extends Foo&lt;V&gt;&gt; {
    public T getBar() {
      return null;
    }
  }

  public static abstract class AbstractFoo&lt;V&gt; implements Foo&lt;V&gt; {
  }

  public static class Factory {
    public static &lt;V, T extends AbstractFoo&lt;V&gt;&gt; FooBar&lt;V, T&gt; createFooBar() {
      return null;
    }
  }

  public static void test() {
    final FooBar&lt;?, ? extends AbstractFoo&lt;?&gt;&gt; typedProperty = Factory.createFooBar();
    //TODO Eclipse Bug 434044 still exists
    final Object propertyValue = typedProperty.getBar().doFoo();
  }

}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2408327</commentid>
    <comment_count>21</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-27 11:17:14 -0400</bug_when>
    <thetext>(In reply to Garret Wilson from comment #20)
&gt; I&apos;m sorry, guys, but this is still not fixed in Eclipse 4.4RC2. Yes, the
&gt; original test case passed, but there are other similar test cases that did
&gt; not pass. For example, the following variation still produces an &quot;ambiguous&quot;
&gt; error and will not compile:

Can you share the other examples as well? Or are they all same as this one?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2408342</commentid>
    <comment_count>22</comment_count>
    <who name="Garret Wilson">garret</who>
    <bug_when>2014-05-27 11:25:48 -0400</bug_when>
    <thetext>I have a huge code base that is proprietary and confidential; because of this I can&apos;t publish the complete code here, nor would that be useful, as there are a multitude of interconnecting classes.

Each time Eclipse 4.4 supposedly fixes one of the generics bugs I&apos;ve filed, I pull out the original code base that caused the error to begin with and try again to compile it. So far it still isn&apos;t fixed, so I have to try to tease out another example that shows the remaining issue. This is somewhat difficult on my end to include the important parts and leave out the unimportant parts without knowing what the bug is; I had no idea that to know that the presence of an abstract class in the hierarchy was relevant until now, for instance.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2408369</commentid>
    <comment_count>23</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-27 11:42:06 -0400</bug_when>
    <thetext>At a quick glance, I see that the original fix was made was done under the condition that original wild card bound is an interface. In the last example, we are talking about an abstract class. But this needs to be confirmed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2408378</commentid>
    <comment_count>24</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-27 11:48:37 -0400</bug_when>
    <thetext>Yes, the structure of the capture is slightly different:

receiverType = capture#2-of ? extends AbstractFoo&lt;?&gt;
  superInterfaces[0] = interface Foo&lt;capture#1-of ?&gt;
  superclass = class AbstractFoo&lt;capture#3-of ?&gt;
    superInterfaces[0] = interface Foo&lt;capture#3-of ?&gt;

the direct and indirect superInterfaces cause the conflict.

I&apos;ll take a quick look at the spec if it has *anything* to offer for such situations ...

The code in CaptureBinding still has a comment &quot;... then consider glb (202404)&quot; which has never materialized in the code.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2408416</commentid>
    <comment_count>25</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-27 12:34:35 -0400</bug_when>
    <thetext>Log from capturing this type:
  class FooBar&lt;?,? extends AbstractFoo&lt;?&gt;&gt;

The new PTB renders as
  class FooBar&lt;capture#1-of ?,capture#2-of ? extends AbstractFoo&lt;?&gt;&gt;

Next the bounds for the two captures are initialized
  capture#1-of ?
    superclass = j.l.Object
    superInterfaces = []

  capture#2-of ? extends AbstractFoo&lt;?&gt;
    superclass = class AbstractFoo&lt;capture#3-of ?&gt;
    superInterfaces = [interface Foo&lt;capture#1-of ?&gt;]
    
The introduction of capture#3 is unexpected, so lets dive in:

Details from initializing capture#2-of ? extends AbstractFoo&lt;?&gt;
  Underlying typevariable has no superclass but one superInterface:
  - interface Foo&lt;V&gt; 
    substituted to become
    - interface Foo&lt;capture#1-of ?&gt;
  The wildcard bound is:
  - class AbstractFoo&lt;?&gt;
    captured into
    - class AbstractFoo&lt;capture#3-of ?&gt;
  this third capture is set as the superclass of capture#2

This looks highly suspicious, the spec explicitly states:
  &quot;Capture conversion is not applied recursively.&quot;
Why on earth is AbstractFoo&lt;?&gt; captured then? (There is a code comment but it needs more software archeology to grok that).


Next during findDefaultAbstractMethod we traverse all supertypes, again capturing each type that is visited.


Bottom line: the code in this area doesn&apos;t align well with the spec. So we seem to be on our own ...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2408637</commentid>
    <comment_count>26</comment_count>
      <attachid>243591</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-27 16:37:28 -0400</bug_when>
    <thetext>Created attachment 243591
sketch

s.t. in this direction could be used as a stop-gap measure. This is inspired by the 1.7 branch, look for this comment:
	// parameterized superclasses &amp; interfaces may be walked twice from different paths so skip next from now on

I wouldn&apos;t be comfortable with mixing this check into the existing analysis, but as a separate phase the effect can perhaps be controlled.

Attention: this patch as-is creates 55 regressions just in RunAllJava8Tests. We fail to report ambiguities; all cases that I checked involved a conflict between a generic and a non-generic method - that would be swallowed by the patch.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2408782</commentid>
    <comment_count>27</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-28 02:56:21 -0400</bug_when>
    <thetext>I am looking at this code in Scope#findDefaultAbstractMethod():

while (currentType != null) {
	findMethodInSuperInterfaces(currentType, selector, found, invocationSite);
	currentType = currentType.superclass();
}

In our particular scenario, we end up with duplicates because what we have as currentType is the CaptureBinding and CaptureBinding and its superClass are same and have the same methods. Can I assume that if the type&apos;s isCapture() returns true, I need not look at its superClass for its methods or start with its superClass directly?

With that assumption, I know I am just experimenting, but it seems to fix the issue at hand.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2408802</commentid>
    <comment_count>28</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-28 03:25:22 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #27)
&gt; I am looking at this code in Scope#findDefaultAbstractMethod():
&gt; 
&gt; while (currentType != null) {
&gt; 	findMethodInSuperInterfaces(currentType, selector, found, invocationSite);
&gt; 	currentType = currentType.superclass();
&gt; }
&gt; 
&gt; In our particular scenario, we end up with duplicates because what we have
&gt; as currentType is the CaptureBinding and CaptureBinding and its superClass
&gt; are same and have the same methods. Can I assume that if the type&apos;s
&gt; isCapture() returns true, I need not look at its superClass for its methods
&gt; or start with its superClass directly?
&gt; 
&gt; With that assumption, I know I am just experimenting, but it seems to fix
&gt; the issue at hand.

You may have seen that findDefaultAbstractMethod() handles some JDK 1.1
compatibility issue, of which I haven&apos;t the faintest idea :-/

But yes, a change in that area may be a good idea.
How about: for each type visited, if its a capture, remember the wildcard.
If we see another capture of the same wildcard: stop!

how does that fare?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2408882</commentid>
    <comment_count>29</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-28 05:20:23 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #28)
&gt; But yes, a change in that area may be a good idea.
&gt; How about: for each type visited, if its a capture, remember the wildcard.
&gt; If we see another capture of the same wildcard: stop!
&gt; 
&gt; how does that fare?

Did you mean, within the hierarchy where we iterate over super class to find interface methods? That doesn&apos;t seem to help, because the types that are involved in producing duplicate methods are following:

capture#2-of ? extends AbstractFoo&lt;?&gt;
public abstract static class AbstractFoo&lt;capture#3-of ?&gt; (PTB)

the latter being a PTB but both have the same set of super interfaces.

May be I misunderstood what you said?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2408957</commentid>
    <comment_count>30</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-28 07:16:22 -0400</bug_when>
    <thetext>The other question I am trying to find answer to is the code where set the super interfaces in CaptureBinding#initializeBounds() in the second switch. We have a similar code in the first switch where we simply set it to NO_SUPERINTERFACES for non interface capture bindings. I wonder what&apos;s behind this change. But then this is a very old code that has not changed for quite some time :(</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2409085</commentid>
    <comment_count>31</comment_count>
      <attachid>243625</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-28 09:50:27 -0400</bug_when>
    <thetext>Created attachment 243625
Proposed workaround

Yes, this is a workaround to simply not go over the super classes of a capture binding if its super interfaces has already been set, in which cases what we get from the super classes are duplicates. I have verified that this condition is not hit for all other scenarios.

RunAllJava8Tests is green and JRE source compiles as well as before. RunJDTCoreTests is currently being run and I will also verify how this works with my development workspace too + run JDT UI tests just in case. Phew!

All reviewers, please go over the patch carefully, as I am not very familiar with this area of code and I have to say I am trusting the testing I am doing more than the patch itself :(</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2409093</commentid>
    <comment_count>32</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-28 09:57:03 -0400</bug_when>
    <thetext>Update: The patch compiles my JDT workspace well. No issues there.

Another note, I tried but can&apos;t figure out why the regressions can be avoided with the patch given in comment #26. Patch by itself should work (i.e. theoretically speaking)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2409372</commentid>
    <comment_count>33</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-28 14:04:32 -0400</bug_when>
    <thetext>Update: All existing JDT Core and UI tests are green.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2409405</commentid>
    <comment_count>34</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-28 14:32:53 -0400</bug_when>
    <thetext>Congrats for having found a solution that causes no regressions.

(In reply to Jayaprakash Arthanareeswaran from comment #31)
&gt; Created attachment 243625 [details]
&gt; Proposed workaround
&gt; 
&gt; Yes, this is a workaround to simply not go over the super classes of a
&gt; capture binding if its super interfaces has already been set, in which cases
&gt; what we get from the super classes are duplicates. I have verified that this
&gt; condition is not hit for all other scenarios.

Can you say a word, why this should correlate?
- capture has super interfaces set
- these super interfaces are duplicates of those of the superclass

A capture can merge bounds of the wildcard argument plus bounds of the type variable being substituted. If one bound is a class and the other an interface the superclass and direct superinterfaces could be completely unrelated? Am I missing anything?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2409467</commentid>
    <comment_count>35</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-28 15:45:16 -0400</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #34)
&gt; A capture can merge bounds of the wildcard argument plus bounds of the type
&gt; variable being substituted. If one bound is a class and the other an
&gt; interface the superclass and direct superinterfaces could be completely
&gt; unrelated? Am I missing anything?

No, you are right, I didn&apos;t look beyond the given testcase and agree the patch could break something. But so far, my attempts to come up with such a test (based on example from comment #20) haven&apos;t succeeded. I did stumble on this failing test, though, which I first thought of the result of my patch, but compiler rejects the code without the patch too:

public class EclipseJava8Generics {

  public interface Foo&lt;V&gt; {
    public V doFoo();
  }

  public static class FooBar&lt;V, T extends AbstractFoo&lt;V&gt; &amp; Foo&lt;V&gt;&gt; {
    public T getBar() {
      return null;
    }
  }
  
  public static abstract class AbstractFoo&lt;V&gt;  {
  }

  public static class Factory {
    public static &lt;V, T extends AbstractFoo&lt;V&gt; &amp; Foo&lt;V&gt;&gt; FooBar&lt;V, T&gt; createFooBar() {
      return null;
    }
  }
 
  public static void test() {
	  final FooBar typedProperty = Factory.createFooBar(); // Error
  }
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2409538</commentid>
    <comment_count>36</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-05-28 16:50:22 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #31)
&gt; Created attachment 243625 [details] [diff]
&gt; Proposed workaround

Here&apos;s a case where this patch wrongly suppresses an ambiguous method invocation error. Unfortunately, I just found this by trying to break the patch, and not because I really understand what the code is doing.

public class EclipseJava8Generics {

  public interface Nasty {
    public Object doFoo(Integer a);
  }
  public interface Foo&lt;V&gt; {
    public V doFoo(String a);
  }

  public static class FooBar&lt;V, T extends Foo&lt;V&gt;&gt; {
    public T getBar() {
      return null;
    }
  }

  public static abstract class AbstractFoo&lt;V&gt; implements Foo&lt;V&gt;, Nasty {
  }

  public static class Factory {
    public static &lt;V, T extends AbstractFoo&lt;V&gt;&gt; FooBar&lt;V, T&gt; createFooBar() {
      return null;
    }
  }

  public static void test() {
    final FooBar&lt;?, ? extends AbstractFoo&lt;?&gt;&gt; typedProperty = Factory.createFooBar();
    //TODO Eclipse Bug 434044 still exists
    final Object propertyValue = typedProperty.getBar().doFoo(null);
  }
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2409565</commentid>
    <comment_count>37</comment_count>
      <attachid>243670</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-28 19:03:44 -0400</bug_when>
    <thetext>Created attachment 243670
my 3c

--------------

1. An idea:
while traversing super-types we must find &quot;almost identical&quot; types to avoid duplicates.

1.a: feed a collection of visited types into findMethodInSuperInterfaces() to skip those &quot;almost duplicates&quot;

1.b: with the invaluable help from Srikanth (see bug 426984 comment 6) we can rid us of all captures, assuming they only produce noise wrt our endeavour.

Observation: even after uncapture the &quot;almost identical&quot; interfaces are still not really identical:
  interface Foo&lt;?&gt;
  interface Foo&lt;?&gt;
Hm?? 

The two wildcards have a subtle difference:
  one is a substitute for V as declared in FooBar
  the other is a substitute for V as declared in AbstractFoo

Ergo: we indeed inherit different generic variants of the same type?!?

Is ambiguity correctly reported after all?

--------------

2. Another observation:

       We consider these two distinct types as mutually compatible!


The rest can be found in the patch.

I don&apos;t have the time to do extensive testing, did only RunAllJava8Tests, discovered that the patch obsoletes a suspicious 1.8-specific test-tweak (in GenericTypeTest) and otherwise that test suite finished successfully.
So did compiling JRE8 from source.

--------------

3. A bonus question:

Could this skipping of duplicate types obsolete the skipping of duplicate methods a little further down (see comment &quot;// its possible to walk the same superinterface from different classes in the hierarchy&quot;)?

Maybe after Luna :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2409567</commentid>
    <comment_count>38</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-28 19:10:45 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #35)
&gt; I did stumble on
&gt; this failing test, though, which I first thought of the result of my patch,
&gt; but compiler rejects the code without the patch too:

Good catch - maybe. Remember that &quot;m is not applicable for the arguments ()&quot; could simply be our unpolished way of saying: &quot;inference failed&quot;.
So it needs a closer look to check if the error is wrong indeed...</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2409571</commentid>
    <comment_count>39</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-05-28 19:41:36 -0400</bug_when>
    <thetext>optionally, instead of checking mutual compatibility, we could just ask:

	if (uncaptured.isEquivalentTo(visited))

This is slightly simpler (readability &amp; performance) and should still be sufficiently precise to avoid skipping any relevant types.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2409653</commentid>
    <comment_count>40</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-29 04:41:54 -0400</bug_when>
    <thetext>I would personally like to get this included in RC3. But Markus is away till Monday.

Jesper, will you be able to review this one today? TIA</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2409704</commentid>
    <comment_count>41</comment_count>
      <attachid>243676</attachid>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-29 06:45:51 -0400</bug_when>
    <thetext>Created attachment 243676
Patch with Stephan&apos;s suggestion

The previous patch from Stephan was good, uncapture() did the job indeed.

This patch with the change Stephan suggested - using isEquivalent() instead of mutual compatibility and seems to work fine. I have run my usual testing + UI tests. JDT Core are yet to complete. Will report back once done.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2409819</commentid>
    <comment_count>42</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-29 10:51:11 -0400</bug_when>
    <thetext>All tests (UI and core) passed.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2409973</commentid>
    <comment_count>43</comment_count>
    <who name="Garret Wilson">garret</who>
    <bug_when>2014-05-29 13:51:14 -0400</bug_when>
    <thetext>I don&apos;t want to throw you guys off track of the great work you&apos;re doing, but I also know we&apos;re cutting it close to 4.4 release with these generics bugs. So... is the issue I just raised in http://stackoverflow.com/q/23939294/421049 another related Eclipse bug I need to report, or am I in error there?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2409995</commentid>
    <comment_count>44</comment_count>
    <who name="Garret Wilson">garret</who>
    <bug_when>2014-05-29 14:12:32 -0400</bug_when>
    <thetext>Ignore my last comment; Oracle Java 1.8.0 at least says the same thing. Sorry for the tangent.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2410343</commentid>
    <comment_count>45</comment_count>
    <who name="Jesper Moller">jesper</who>
    <bug_when>2014-05-30 09:01:30 -0400</bug_when>
    <thetext>The patch looks quite reasonable to me.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2410420</commentid>
    <comment_count>46</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-30 10:38:24 -0400</bug_when>
    <thetext>Thanks, Jesper, forgot to mark you for review. I was not sure if you will be available this week. Can you please update it now? Thanks!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2410570</commentid>
    <comment_count>47</comment_count>
    <who name="Garret Wilson">garret</who>
    <bug_when>2014-05-30 15:15:54 -0400</bug_when>
    <thetext>Do you guys know if this new patch made it into RC3? I don&apos;t want to bother reverting my workarounds and testing the original code again if not.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2410822</commentid>
    <comment_count>48</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-05-31 12:47:27 -0400</bug_when>
    <thetext>(In reply to Garret Wilson from comment #47)
&gt; Do you guys know if this new patch made it into RC3? I don&apos;t want to bother
&gt; reverting my workarounds and testing the original code again if not.

No, this didn&apos;t go in RC3. We are planning on RC4.

Dani/Markus, can one of you give the other component lead&apos;s approval that is required for RC4? Thanks!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2411051</commentid>
    <comment_count>49</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-06-02 03:58:17 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #41)
&gt; Created attachment 243676 [details]
&gt; Patch with Stephan&apos;s suggestion
&gt; 
&gt; The previous patch from Stephan was good, uncapture() did the job indeed.

Risk assessment: In my opinion, this is a safe fix, because:

1. The code works only for captured bindings, which means other areas of code are not affected.
2. The patch leaves everything else untouched when an equivalent ( uncaptured) binding was not found in the current type&apos;s hierarchy.

Stephan, would like to add anything to this?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2411148</commentid>
    <comment_count>50</comment_count>
    <who name="Dani Megert">daniel_megert</who>
    <bug_when>2014-06-02 06:21:44 -0400</bug_when>
    <thetext>+1 for RC4.

Markus, please also review the fix. Thanks.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2411363</commentid>
    <comment_count>51</comment_count>
    <who name="Markus Keller">markus_keller</who>
    <bug_when>2014-06-02 10:01:13 -0400</bug_when>
    <thetext>(In reply to Jayaprakash Arthanareeswaran from comment #41)
&gt; Created attachment 243676 [details] [diff]
&gt; Patch with Stephan&apos;s suggestion

+1 for RC4. The patch looks safe, and I didn&apos;t find any further problems.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2411444</commentid>
    <comment_count>52</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2014-06-02 11:34:44 -0400</bug_when>
    <thetext>Thanks everyone for the time. 

Patch released via commit:

http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=e34fea35f775affe686777806e78d4b4b98ae8ab</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2411930</commentid>
    <comment_count>53</comment_count>
    <who name="Sasikanth Bharadwaj">saammana</who>
    <bug_when>2014-06-03 06:34:48 -0400</bug_when>
    <thetext>Verified for 4.4 RC4 using I20140602-2000 build</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2414503</commentid>
    <comment_count>54</comment_count>
    <who name="Garret Wilson">garret</who>
    <bug_when>2014-06-07 17:10:05 -0400</bug_when>
    <thetext>Great news! Today I updated to 4.4RC4 and then reverted the workarounds I originally put in place when I discovered these bugs. The original code compiled without a hitch!

Thanks so much for all the hard work on this. Now my coworker using NetBeans can stop sending me snide emails. ;)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2414540</commentid>
    <comment_count>55</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-06-08 08:25:26 -0400</bug_when>
    <thetext>(In reply to Garret Wilson from comment #54)

Thanks for continued re-testing!

FYI: this was the second-to-last code change that went into JDT/Core for Luna (unless ... some catastrophe is detected between now and release).</thetext>
  </long_desc>
      
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>242670</attachid>
            <date>2014-05-03 19:56:00 -0400</date>
            <delta_ts>2014-05-19 18:58:42 -0400</delta_ts>
            <desc>work in progress</desc>
            <filename>wip.patch</filename>
            <type>text/plain</type>
            <size>3483</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9v
cmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVn
cmVzc2lvblRlc3QuamF2YQppbmRleCBlNjJkNDY0Li5lM2IyZjQwIDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25UZXN0LmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pk
dC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVzdC5q
YXZhCkBAIC00Myw3ICs0Myw3IEBACiAJLy8gU3RhdGljIGluaXRpYWxpemVyIHRvIHNwZWNpZnkg
dGVzdHMgc3Vic2V0IHVzaW5nIFRFU1RTXyogc3RhdGljIHZhcmlhYmxlcwogCS8vIEFsbCBzcGVj
aWZpZWQgdGVzdHMgd2hpY2ggZG9lcyBub3QgYmVsb25nIHRvIHRoZSBjbGFzcyBhcmUgc2tpcHBl
ZC4uLgogCXN0YXRpYyB7Ci0vLwkJVEVTVFNfTkFNRVMgPSBuZXcgU3RyaW5nW10geyAidGVzdEJ1
ZzQyNzQzOGMzIiB9OworCQlURVNUU19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7ICJ0ZXN0QnVnYnVn
NDM0MDQ0IiB9OwogLy8JCVRFU1RTX05VTUJFUlMgPSBuZXcgaW50W10geyAxNDY1IH07CiAvLwkJ
VEVTVFNfUkFOR0UgPSBuZXcgaW50W10geyAxMDk3LCAtMSB9OwogCX0KQEAgLTQ3NTgsNSArNDc1
OCwzOCBAQAogCQkiVHlwZSBzYWZldHk6IFVuY2hlY2tlZCBjYXN0IGZyb20gQnVnRWNsaXBzZS5E
b2cgdG8gVFxuIiArIAogCQkiLS0tLS0tLS0tLVxuIik7CiB9CitwdWJsaWMgdm9pZCB0ZXN0QnVn
YnVnNDM0MDQ0KCkgeworCXJ1bkNvbmZvcm1UZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJIkVj
bGlwc2VKYXZhOEdlbmVyaWNzLmphdmEiLAorCQkJInB1YmxpYyBjbGFzcyBFY2xpcHNlSmF2YThH
ZW5lcmljcyB7XG4iICsgCisJCQkiXG4iICsgCisJCQkiICBwdWJsaWMgaW50ZXJmYWNlIEZvbzxW
PiB7XG4iICsgCisJCQkiICAgIHB1YmxpYyBWIGRvRm9vKCk7XG4iICsgCisJCQkiICB9XG4iICsg
CisJCQkiXG4iICsgCisJCQkiICBwdWJsaWMgc3RhdGljIGNsYXNzIEZvb0JhcjxWLCBUIGV4dGVu
ZHMgRm9vPFY+PiB7XG4iICsgCisJCQkiICAgIHB1YmxpYyBUIGdldEJhcigpIHtcbiIgKyAKKwkJ
CSIgICAgICByZXR1cm4gbnVsbDtcbiIgKyAKKwkJCSIgICAgfVxuIiArIAorCQkJIiAgfVxuIiAr
IAorCQkJIlxuIiArIAorCQkJIiAgcHVibGljIHN0YXRpYyBjbGFzcyBGYWN0b3J5IHtcbiIgKyAK
KwkJCSJcbiIgKyAKKwkJCSIgICAgcHVibGljIHN0YXRpYyA8ViwgVCBleHRlbmRzIEZvbzxWPj4g
Rm9vQmFyPFYsIFQ+IGNyZWF0ZUZvb0JhcigpIHtcbiIgKyAKKwkJCSIgICAgICByZXR1cm4gbnVs
bDtcbiIgKyAKKwkJCSIgICAgfVxuIiArIAorCQkJIiAgfVxuIiArIAorCQkJIlxuIiArIAorCQkJ
IiAgcHVibGljIHN0YXRpYyB2b2lkIHRlc3QoKSB7XG4iICsgCisJCQkiICAgIGZpbmFsIEZvb0Jh
cjw/LCA/IGV4dGVuZHMgRm9vPD8+PiB0eXBlZFByb3BlcnR5ID0gRmFjdG9yeS5jcmVhdGVGb29C
YXIoKTtcbiIgKyAKKwkJCSIgICAgLy9UT0RPIEVjbGlwc2UgQnVnIDQzNDA0NFxuIiArIAorCQkJ
IiAgICBmaW5hbCBPYmplY3QgcHJvcGVydHlWYWx1ZSA9IHR5cGVkUHJvcGVydHkuZ2V0QmFyKCku
ZG9Gb28oKTtcbiIgKyAKKwkJCSJcbiIgKyAKKwkJCSIgIH1cbiIgKyAKKwkJCSJcbiIgKyAKKwkJ
CSJ9XG4iCisJCX0pOworfQogfQogCmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvdXRpbC9VdGlsLmphdmEg
Yi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwv
Y29tcGlsZXIvdXRpbC9VdGlsLmphdmEKaW5kZXggY2Q2YzZkMi4uNGE0ZDM2ZiAxMDA2NDQKLS0t
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL3V0aWwvVXRpbC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci91dGlsL1V0aWwuamF2YQpAQCAt
MzYsNiArMzYsNyBAQAogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5i
YXRjaC5GaWxlU3lzdGVtOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxl
ci5iYXRjaC5NYWluOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5j
bGFzc2ZtdC5DbGFzc0ZpbGVDb25zdGFudHM7CitpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVy
bmFsLmNvbXBpbGVyLmxvb2t1cC5DYXB0dXJlQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5q
ZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkV4dHJhQ29tcGlsZXJNb2RpZmllcnM7CiBpbXBv
cnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cC5QYXJhbWV0ZXJpemVk
VHlwZUJpbmRpbmc7CiBpbXBvcnQgb3JnLmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmxv
b2t1cC5SZWZlcmVuY2VCaW5kaW5nOwpAQCAtMTU2OCw5ICsxNTY5LDE5IEBACiAJCWlmIChvbmVM
ZW5ndGggPT0gMCkKIAkJCXJldHVybiB0cnVlOwogCQlmb3IgKGludCBpID0gMDsgaSA8IG9uZS5s
ZW5ndGg7IGkrKykgewotCQkJaWYgKG9uZVtpXSAhPSB0d29baV0pCisJCQlpZiAob25lW2ldICE9
IHR3b1tpXSAmJiAhc2FtZUNhcHR1cmVzKG9uZVtpXSwgdHdvW2ldKSkKIAkJCQlyZXR1cm4gZmFs
c2U7CiAJCX0KIAkJcmV0dXJuIHRydWU7CiAJfQorCisJcHJpdmF0ZSBzdGF0aWMgYm9vbGVhbiBz
YW1lQ2FwdHVyZXMoT2JqZWN0IG9uZSwgT2JqZWN0IHR3bykgeworCQlpZiAob25lIGluc3RhbmNl
b2YgQ2FwdHVyZUJpbmRpbmcgJiYgdHdvIGluc3RhbmNlb2YgQ2FwdHVyZUJpbmRpbmcpIHsKKwkJ
CUNhcHR1cmVCaW5kaW5nIG9uZUNhcHR1cmUgPSAoQ2FwdHVyZUJpbmRpbmcpb25lOworCQkJQ2Fw
dHVyZUJpbmRpbmcgdHdvQ2FwdHVyZSA9IChDYXB0dXJlQmluZGluZyl0d287CisJCQlyZXR1cm4g
b25lQ2FwdHVyZS5zb3VyY2VUeXBlID09IHR3b0NhcHR1cmUuc291cmNlVHlwZSAmJiBvbmVDYXB0
dXJlLnBvc2l0aW9uID09IHR3b0NhcHR1cmUucG9zaXRpb247IC8vJElERU5USVRZLUNPTVBBUklT
T04kIAorCQl9CisJCXJldHVybiBmYWxzZTsKKwl9CisKIH0KXCBObyBuZXdsaW5lIGF0IGVuZCBv
ZiBmaWxl
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>243269</attachid>
            <date>2014-05-19 18:58:00 -0400</date>
            <delta_ts>2014-05-19 18:58:42 -0400</delta_ts>
            <desc>proposed patch</desc>
            <filename>Bug-434044--Java-8-generics-thinks-single-method-is-.patch</filename>
            <type>text/plain</type>
            <size>4239</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9v
cmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVn
cmVzc2lvblRlc3QuamF2YQppbmRleCBmM2UxYTFmLi5iZDc2MzhkIDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25UZXN0LmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pk
dC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVzdC5q
YXZhCkBAIC0yNiw2ICsyNiw3IEBACiAgKgkJCQkJCQkJQnVnIDQzMjYwMyAtIFtjb21waWxlXVsx
LjddIGVjaiByZXBvcnRzIGFuIEVycm9yIHdoaWxlIGphdmFjIGRvZXNuJ3QKICAqCQkJCQkJCQlC
dWcgMzk5NTI3IC0gVHlwZSBpbmZlcmVuY2UgcHJvYmxlbQogICoJCQkJCQkJCUJ1ZyA0MzQ1NzAg
LSBHZW5lcmljIHR5cGUgbWlzbWF0Y2ggZm9yIHBhcmFtZXRyaXplZCBjbGFzcyBhbm5vdGF0aW9u
IGF0dHJpYnV0ZSB3aXRoIGlubmVyIGNsYXNzCisgKgkJCQkJCQkJQnVnIDQzNDA0NCAtIEphdmEg
OCBnZW5lcmljcyB0aGlua3Mgc2luZ2xlIG1ldGhvZCBpcyBhbWJpZ3VvdXMKICAqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqLwogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxl
ci5yZWdyZXNzaW9uOwogCkBAIC00Niw3ICs0Nyw3IEBACiAJLy8gU3RhdGljIGluaXRpYWxpemVy
IHRvIHNwZWNpZnkgdGVzdHMgc3Vic2V0IHVzaW5nIFRFU1RTXyogc3RhdGljIHZhcmlhYmxlcwog
CS8vIEFsbCBzcGVjaWZpZWQgdGVzdHMgd2hpY2ggZG9lcyBub3QgYmVsb25nIHRvIHRoZSBjbGFz
cyBhcmUgc2tpcHBlZC4uLgogCXN0YXRpYyB7Ci0vLwkJVEVTVFNfTkFNRVMgPSBuZXcgU3RyaW5n
W10geyAidGVzdEJ1ZzQyNzQzOGMzIiB9OworLy8JCVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1td
IHsgInRlc3RCdWc0MzQwNDQiIH07CiAvLwkJVEVTVFNfTlVNQkVSUyA9IG5ldyBpbnRbXSB7IDE0
NjUgfTsKIC8vCQlURVNUU19SQU5HRSA9IG5ldyBpbnRbXSB7IDEwOTcsIC0xIH07CiAJfQpAQCAt
NTA4MCw1ICs1MDgxLDM4IEBACiAJCQkifVxuIgogCQl9KTsKIH0KK3B1YmxpYyB2b2lkIHRlc3RC
dWc0MzQwNDQoKSB7CisJcnVuQ29uZm9ybVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJCQkiRWNs
aXBzZUphdmE4R2VuZXJpY3MuamF2YSIsCisJCQkicHVibGljIGNsYXNzIEVjbGlwc2VKYXZhOEdl
bmVyaWNzIHtcbiIgKyAKKwkJCSJcbiIgKyAKKwkJCSIgIHB1YmxpYyBpbnRlcmZhY2UgRm9vPFY+
IHtcbiIgKyAKKwkJCSIgICAgcHVibGljIFYgZG9Gb28oKTtcbiIgKyAKKwkJCSIgIH1cbiIgKyAK
KwkJCSJcbiIgKyAKKwkJCSIgIHB1YmxpYyBzdGF0aWMgY2xhc3MgRm9vQmFyPFYsIFQgZXh0ZW5k
cyBGb288Vj4+IHtcbiIgKyAKKwkJCSIgICAgcHVibGljIFQgZ2V0QmFyKCkge1xuIiArIAorCQkJ
IiAgICAgIHJldHVybiBudWxsO1xuIiArIAorCQkJIiAgICB9XG4iICsgCisJCQkiICB9XG4iICsg
CisJCQkiXG4iICsgCisJCQkiICBwdWJsaWMgc3RhdGljIGNsYXNzIEZhY3Rvcnkge1xuIiArIAor
CQkJIlxuIiArIAorCQkJIiAgICBwdWJsaWMgc3RhdGljIDxWLCBUIGV4dGVuZHMgRm9vPFY+PiBG
b29CYXI8ViwgVD4gY3JlYXRlRm9vQmFyKCkge1xuIiArIAorCQkJIiAgICAgIHJldHVybiBudWxs
O1xuIiArIAorCQkJIiAgICB9XG4iICsgCisJCQkiICB9XG4iICsgCisJCQkiXG4iICsgCisJCQki
ICBwdWJsaWMgc3RhdGljIHZvaWQgdGVzdCgpIHtcbiIgKyAKKwkJCSIgICAgZmluYWwgRm9vQmFy
PD8sID8gZXh0ZW5kcyBGb288Pz4+IHR5cGVkUHJvcGVydHkgPSBGYWN0b3J5LmNyZWF0ZUZvb0Jh
cigpO1xuIiArIAorCQkJIiAgICAvL1RPRE8gRWNsaXBzZSBCdWcgNDM0MDQ0XG4iICsgCisJCQki
ICAgIGZpbmFsIE9iamVjdCBwcm9wZXJ0eVZhbHVlID0gdHlwZWRQcm9wZXJ0eS5nZXRCYXIoKS5k
b0ZvbygpO1xuIiArIAorCQkJIlxuIiArIAorCQkJIiAgfVxuIiArIAorCQkJIlxuIiArIAorCQkJ
In1cbiIKKwkJfSk7Cit9CiB9CiAKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2Nv
bXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ2FwdHVyZUJp
bmRpbmcuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQ2FwdHVyZUJpbmRpbmcuamF2YQppbmRleCA4NDBl
YjgyLi5jZmYwNTAyIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0NhcHR1cmVCaW5kaW5nLmph
dmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2lu
dGVybmFsL2NvbXBpbGVyL2xvb2t1cC9DYXB0dXJlQmluZGluZy5qYXZhCkBAIC0xMCw2ICsxMCw3
IEBACiAgKiAgICAgU3RlcGhhbiBIZXJybWFubiAtIENvbnRyaWJ1dGlvbiBmb3IKICAqCQkJCQkJ
CQlCdWcgNDAwODc0IC0gWzEuOF1bY29tcGlsZXJdIEluZmVyZW5jZSBpbmZyYXN0cnVjdHVyZSBz
aG91bGQgZXZvbHZlIHRvIG1lZXQgSkxTOCAxOC54IChQYXJ0IEcgb2YgSlNSMzM1IHNwZWMpCiAg
KgkJCQkJCQkJQnVnIDQyOTM4NCAtIFsxLjhdW251bGxdIGltcGxlbWVudCBjb25mb3JtYW5jZSBy
dWxlcyBmb3IgbnVsbC1hbm5vdGF0ZWQgbG93ZXIgLyB1cHBlciB0eXBlIGJvdW5kcworICoJCQkJ
CQkJCUJ1ZyA0MzQwNDQgLSBKYXZhIDggZ2VuZXJpY3MgdGhpbmtzIHNpbmdsZSBtZXRob2QgaXMg
YW1iaWd1b3VzCiAgKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi8KIHBhY2thZ2Ugb3JnLmVjbGlwc2Uu
amR0LmludGVybmFsLmNvbXBpbGVyLmxvb2t1cDsKIApAQCAtMTg5LDggKzE5MCwxNCBAQAogCQkJ
CQl9IGVsc2UgewogCQkJCQkJaW50IGxlbmd0aCA9IHN1YnN0aXR1dGVkVmFyaWFibGVJbnRlcmZh
Y2VzLmxlbmd0aDsKIAkJCQkJCVN5c3RlbS5hcnJheWNvcHkoc3Vic3RpdHV0ZWRWYXJpYWJsZUlu
dGVyZmFjZXMsIDAsIHN1YnN0aXR1dGVkVmFyaWFibGVJbnRlcmZhY2VzID0gbmV3IFJlZmVyZW5j
ZUJpbmRpbmdbbGVuZ3RoKzFdLCAxLCBsZW5ndGgpOwotCQkJCQkJc3Vic3RpdHV0ZWRWYXJpYWJs
ZUludGVyZmFjZXNbMF0gPSAgKFJlZmVyZW5jZUJpbmRpbmcpIGNhcHR1cmVkV2lsZGNhcmRCb3Vu
ZDsKLQkJCQkJCXRoaXMuc2V0U3VwZXJJbnRlcmZhY2VzKFNjb3BlLmdyZWF0ZXJMb3dlckJvdW5k
KHN1YnN0aXR1dGVkVmFyaWFibGVJbnRlcmZhY2VzKSk7CisJCQkJCQkvLyB0byBwcm9wZXJseSBz
dXBwb3J0IGdsYiwgcGVyZm9ybSBjYXB0dXJlICphZnRlciogZ2xiLCBzbyByZXN0YXJ0IGZyb20g
dGhlIG9yaWdpbmFsIGJvdW5kOgorCQkJCQkJc3Vic3RpdHV0ZWRWYXJpYWJsZUludGVyZmFjZXNb
MF0gPSAgKFJlZmVyZW5jZUJpbmRpbmcpIG9yaWdpbmFsV2lsZGNhcmRCb3VuZDsKKwkJCQkJCVJl
ZmVyZW5jZUJpbmRpbmdbXSBnbGIgPSBTY29wZS5ncmVhdGVyTG93ZXJCb3VuZChzdWJzdGl0dXRl
ZFZhcmlhYmxlSW50ZXJmYWNlcyk7CisJCQkJCQlpZiAoZ2xiICE9IG51bGwpIHsKKwkJCQkJCQlm
b3IgKGludCBpID0gMDsgaSA8IGdsYi5sZW5ndGg7IGkrKykKKwkJCQkJCQkJZ2xiW2ldID0gKFJl
ZmVyZW5jZUJpbmRpbmcpIGdsYltpXS5jYXB0dXJlKHNjb3BlLCB0aGlzLnBvc2l0aW9uKTsKKwkJ
CQkJCX0KKwkJCQkJCXRoaXMuc2V0U3VwZXJJbnRlcmZhY2VzKGdsYik7CiAJCQkJCX0KIAkJCQl9
IGVsc2UgewogCQkJCQkvLyB0aGUgd2lsZGNhcmQgYm91bmQgc2hvdWxkIGJlIGEgc3VidHlwZSBv
ZiB2YXJpYWJsZSBzdXBlcmNsYXNz
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>243591</attachid>
            <date>2014-05-27 16:37:00 -0400</date>
            <delta_ts>2014-05-28 19:03:44 -0400</delta_ts>
            <desc>sketch</desc>
            <filename>Bug-434044--Java-8-generics-thinks-single-method-is-.patch</filename>
            <type>text/plain</type>
            <size>3189</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9v
cmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVn
cmVzc2lvblRlc3QuamF2YQppbmRleCA5Nzg5OTBkLi40NWQ5Nzk1IDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25UZXN0LmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pk
dC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVzdC5q
YXZhCkBAIC00OCw3ICs0OCw3IEBACiAJLy8gU3RhdGljIGluaXRpYWxpemVyIHRvIHNwZWNpZnkg
dGVzdHMgc3Vic2V0IHVzaW5nIFRFU1RTXyogc3RhdGljIHZhcmlhYmxlcwogCS8vIEFsbCBzcGVj
aWZpZWQgdGVzdHMgd2hpY2ggZG9lcyBub3QgYmVsb25nIHRvIHRoZSBjbGFzcyBhcmUgc2tpcHBl
ZC4uLgogCXN0YXRpYyB7Ci0vLwkJVEVTVFNfTkFNRVMgPSBuZXcgU3RyaW5nW10geyAidGVzdEJ1
ZzQzNTY0MyIgfTsKKy8vCQlURVNUU19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7ICJ0ZXN0QnVnNDM0
MDQ0X2NvbW1lbnQyMCIgfTsKIC8vCQlURVNUU19OVU1CRVJTID0gbmV3IGludFtdIHsgMTQ2NSB9
OwogLy8JCVRFU1RTX1JBTkdFID0gbmV3IGludFtdIHsgMTA5NywgLTEgfTsKIAl9CkBAIC01MjEy
LDYgKzUyMTIsNDAgQEAKIAkJCSJ9XG4iCiAJCX0pOwogfQorcHVibGljIHZvaWQgdGVzdEJ1ZzQz
NDA0NF9jb21tZW50MjAoKSB7CisJcnVuQ29uZm9ybVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7CisJ
CQkiRWNsaXBzZUphdmE4R2VuZXJpY3MuamF2YSIsCisJCQkicHVibGljIGNsYXNzIEVjbGlwc2VK
YXZhOEdlbmVyaWNzIHtcbiIgKyAKKwkJCSJcbiIgKyAKKwkJCSIgIHB1YmxpYyBpbnRlcmZhY2Ug
Rm9vPFY+IHtcbiIgKyAKKwkJCSIgICAgcHVibGljIFYgZG9Gb28oKTtcbiIgKyAKKwkJCSIgIH1c
biIgKyAKKwkJCSJcbiIgKyAKKwkJCSIgIHB1YmxpYyBzdGF0aWMgY2xhc3MgRm9vQmFyPFYsIFQg
ZXh0ZW5kcyBGb288Vj4+IHtcbiIgKyAKKwkJCSIgICAgcHVibGljIFQgZ2V0QmFyKCkge1xuIiAr
IAorCQkJIiAgICAgIHJldHVybiBudWxsO1xuIiArIAorCQkJIiAgICB9XG4iICsgCisJCQkiICB9
XG4iICsgCisJCQkiXG4iICsgCisJCQkiICBwdWJsaWMgc3RhdGljIGFic3RyYWN0IGNsYXNzIEFi
c3RyYWN0Rm9vPFY+IGltcGxlbWVudHMgRm9vPFY+IHtcbiIgKyAKKwkJCSIgIH1cbiIgKyAKKwkJ
CSJcbiIgKyAKKwkJCSIgIHB1YmxpYyBzdGF0aWMgY2xhc3MgRmFjdG9yeSB7XG4iICsgCisJCQki
ICAgIHB1YmxpYyBzdGF0aWMgPFYsIFQgZXh0ZW5kcyBBYnN0cmFjdEZvbzxWPj4gRm9vQmFyPFYs
IFQ+IGNyZWF0ZUZvb0JhcigpIHtcbiIgKyAKKwkJCSIgICAgICByZXR1cm4gbnVsbDtcbiIgKyAK
KwkJCSIgICAgfVxuIiArIAorCQkJIiAgfVxuIiArIAorCQkJIlxuIiArIAorCQkJIiAgcHVibGlj
IHN0YXRpYyB2b2lkIHRlc3QoKSB7XG4iICsgCisJCQkiICAgIGZpbmFsIEZvb0Jhcjw/LCA/IGV4
dGVuZHMgQWJzdHJhY3RGb288Pz4+IHR5cGVkUHJvcGVydHkgPSBGYWN0b3J5LmNyZWF0ZUZvb0Jh
cigpO1xuIiArIAorCQkJIiAgICAvL1RPRE8gRWNsaXBzZSBCdWcgNDM0MDQ0IHN0aWxsIGV4aXN0
c1xuIiArIAorCQkJIiAgICBmaW5hbCBPYmplY3QgcHJvcGVydHlWYWx1ZSA9IHR5cGVkUHJvcGVy
dHkuZ2V0QmFyKCkuZG9Gb28oKTtcbiIgKyAKKwkJCSIgIH1cbiIgKyAKKwkJCSJcbiIgKyAKKwkJ
CSJ9XG4iCisJCX0pOworfQogcHVibGljIHZvaWQgdGVzdEJ1ZzQzNDc5MygpIHsKIAlNYXAgb3B0
aW9ucyA9IGdldENvbXBpbGVyT3B0aW9ucygpOwogCW9wdGlvbnMucHV0KEphdmFDb3JlLkNPTVBJ
TEVSX0FOTk9UQVRJT05fTlVMTF9BTkFMWVNJUywgSmF2YUNvcmUuRU5BQkxFRCk7CmRpZmYgLS1n
aXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEK
aW5kZXggYTFmODA1OC4uNjljYjE4OCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5q
YXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YQpAQCAtNDQ1MSw2ICs0NDUxLDE4IEBA
CiAJCQkJfQogCQkJCW1vcmVTcGVjaWZpY1tjb3VudCsrXSA9IHZpc2libGVbal07CiAJCQl9CisJ
CQljaGVja1NhbWVPcmlnaW5hbHM6CisJCQlpZiAoY291bnQgPiAxKSB7CisJCQkJZm9yIChpbnQg
aSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7CisJCQkJCU1ldGhvZEJpbmRpbmcgb3JpZ2luYWwgPSBt
b3JlU3BlY2lmaWNbaV0ub3JpZ2luYWwoKTsKKwkJCQkJZm9yIChpbnQgaiA9IDA7IGogPCBjb3Vu
dDsgaisrKSB7CisJCQkJCQlpZiAoaSA9PSBqKSBjb250aW51ZTsKKwkJCQkJCWlmIChvcmlnaW5h
bCAhPSBtb3JlU3BlY2lmaWNbaV0ub3JpZ2luYWwoKSkKKwkJCQkJCQlicmVhayBjaGVja1NhbWVP
cmlnaW5hbHM7CisJCQkJCX0KKwkJCQl9CisJCQkJY291bnQgPSAxOyAvLyBvcmlnaW5hbHMgYXJl
IHRoZSBzYW1lLCBzbyBwcmV0ZW5kIHdlIG9ubHkgaGF2ZSBvbmUgY2FuZGlkYXRlCisJCQl9CiAJ
CQlpZiAoY291bnQgPT0gMCkgewogCQkJCXJldHVybiBuZXcgUHJvYmxlbU1ldGhvZEJpbmRpbmco
dmlzaWJsZVswXSwgdmlzaWJsZVswXS5zZWxlY3RvciwgdmlzaWJsZVswXS5wYXJhbWV0ZXJzLCBQ
cm9ibGVtUmVhc29ucy5BbWJpZ3VvdXMpOwogCQkJfSBlbHNlIGlmIChjb3VudCA9PSAxKSB7
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>243625</attachid>
            <date>2014-05-28 09:50:00 -0400</date>
            <delta_ts>2014-05-28 09:50:27 -0400</delta_ts>
            <desc>Proposed workaround</desc>
            <filename>Bug-434044--.patch</filename>
            <type>text/plain</type>
            <size>2431</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVz
c2lvblRlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9v
cmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVn
cmVzc2lvblRlc3QuamF2YQppbmRleCA4YTY0ZGJhLi41YzJhYzMwIDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25UZXN0LmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pk
dC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVzdC5q
YXZhCkBAIC01MjEzLDQgKzUyMTMsMzggQEAKIAkJfSk7CiB9CitwdWJsaWMgdm9pZCB0ZXN0QnVn
NDM0MDQ0X2NvbW1lbnQyMCgpIHsKKwlydW5Db25mb3JtVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsK
KwkJCSJFY2xpcHNlSmF2YThHZW5lcmljcy5qYXZhIiwKKwkJCSJwdWJsaWMgY2xhc3MgRWNsaXBz
ZUphdmE4R2VuZXJpY3Mge1xuIiArIAorCQkJIlxuIiArIAorCQkJIiAgcHVibGljIGludGVyZmFj
ZSBGb288Vj4ge1xuIiArIAorCQkJIiAgICBwdWJsaWMgViBkb0ZvbygpO1xuIiArIAorCQkJIiAg
fVxuIiArIAorCQkJIlxuIiArIAorCQkJIiAgcHVibGljIHN0YXRpYyBjbGFzcyBGb29CYXI8Viwg
VCBleHRlbmRzIEZvbzxWPj4ge1xuIiArIAorCQkJIiAgICBwdWJsaWMgVCBnZXRCYXIoKSB7XG4i
ICsgCisJCQkiICAgICAgcmV0dXJuIG51bGw7XG4iICsgCisJCQkiICAgIH1cbiIgKyAKKwkJCSIg
IH1cbiIgKyAKKwkJCSJcbiIgKyAKKwkJCSIgIHB1YmxpYyBzdGF0aWMgYWJzdHJhY3QgY2xhc3Mg
QWJzdHJhY3RGb288Vj4gaW1wbGVtZW50cyBGb288Vj4ge1xuIiArIAorCQkJIiAgfVxuIiArIAor
CQkJIlxuIiArIAorCQkJIiAgcHVibGljIHN0YXRpYyBjbGFzcyBGYWN0b3J5IHtcbiIgKyAKKwkJ
CSIgICAgcHVibGljIHN0YXRpYyA8ViwgVCBleHRlbmRzIEFic3RyYWN0Rm9vPFY+PiBGb29CYXI8
ViwgVD4gY3JlYXRlRm9vQmFyKCkge1xuIiArIAorCQkJIiAgICAgIHJldHVybiBudWxsO1xuIiAr
IAorCQkJIiAgICB9XG4iICsgCisJCQkiICB9XG4iICsgCisJCQkiXG4iICsgCisJCQkiICBwdWJs
aWMgc3RhdGljIHZvaWQgdGVzdCgpIHtcbiIgKyAKKwkJCSIgICAgZmluYWwgRm9vQmFyPD8sID8g
ZXh0ZW5kcyBBYnN0cmFjdEZvbzw/Pj4gdHlwZWRQcm9wZXJ0eSA9IEZhY3RvcnkuY3JlYXRlRm9v
QmFyKCk7XG4iICsgCisJCQkiICAgIC8vVE9ETyBFY2xpcHNlIEJ1ZyA0MzQwNDQgc3RpbGwgZXhp
c3RzXG4iICsgCisJCQkiICAgIGZpbmFsIE9iamVjdCBwcm9wZXJ0eVZhbHVlID0gdHlwZWRQcm9w
ZXJ0eS5nZXRCYXIoKS5kb0ZvbygpO1xuIiArIAorCQkJIiAgfVxuIiArIAorCQkJIlxuIiArIAor
CQkJIn1cbiIKKwkJfSk7Cit9CiBwdWJsaWMgdm9pZCB0ZXN0QnVnNDM0NzkzKCkgewogCU1hcCBv
cHRpb25zID0gZ2V0Q29tcGlsZXJPcHRpb25zKCk7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3Vw
L1Njb3BlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEKaW5kZXggYTFmODA1OC4uMjhj
OGQ1YyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9s
b29rdXAvU2NvcGUuamF2YQpAQCAtMTI0OCw1ICsxMjQ4LDUgQEAKIAkJd2hpbGUgKGN1cnJlbnRU
eXBlICE9IG51bGwpIHsKIAkJCWZpbmRNZXRob2RJblN1cGVySW50ZXJmYWNlcyhjdXJyZW50VHlw
ZSwgc2VsZWN0b3IsIGZvdW5kLCBpbnZvY2F0aW9uU2l0ZSk7Ci0JCQljdXJyZW50VHlwZSA9IGN1
cnJlbnRUeXBlLnN1cGVyY2xhc3MoKTsKKwkJCWN1cnJlbnRUeXBlID0gKGN1cnJlbnRUeXBlLmlz
Q2FwdHVyZSgpICYmIGN1cnJlbnRUeXBlLnN1cGVySW50ZXJmYWNlcygpICE9IEJpbmRpbmcuTk9f
U1VQRVJJTlRFUkZBQ0VTKSA/IG51bGwgOiBjdXJyZW50VHlwZS5zdXBlcmNsYXNzKCk7CiAJCX0K
IAkJTWV0aG9kQmluZGluZ1tdIGNhbmRpZGF0ZXMgPSBudWxsOw==
</data>

          </attachment>
          <attachment
              isobsolete="1"
              ispatch="1"
              isprivate="0"
          >
            <attachid>243670</attachid>
            <date>2014-05-28 19:03:00 -0400</date>
            <delta_ts>2014-05-29 06:45:51 -0400</delta_ts>
            <desc>my 3c</desc>
            <filename>Bug-434044--Java-8-generics-thinks-single-method-is-.patch</filename>
            <type>text/plain</type>
            <size>7635</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNUeXBlVGVz
dC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xp
cHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0Lmph
dmEKaW5kZXggMDQyNjNiMC4uOWEzODAzYSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0LmphdmEKQEAgLTMzMDIyLDE0ICszMzAyMiwxMSBA
QAogCQkJIgleXl5eXl5eXl5eXl5eXl5eXl5eXl5eXG4iICsKIAkJCSJUeXBlIHNhZmV0eTogVGhl
IG1ldGhvZCBhZGQoT2JqZWN0KSBiZWxvbmdzIHRvIHRoZSByYXcgdHlwZSBDb2xsZWN0aW9uLiBS
ZWZlcmVuY2VzIHRvIGdlbmVyaWMgdHlwZSBDb2xsZWN0aW9uPEU+IHNob3VsZCBiZSBwYXJhbWV0
ZXJpemVkXG4iICsKIAkJCSItLS0tLS0tLS0tXG4iICsKLQkJCSh0aGlzLmNvbXBsaWFuY2VMZXZl
bCA8IENsYXNzRmlsZUNvbnN0YW50cy5KREsxXzggPwogCQkJIjQuIFdBUk5JTkcgaW4gWC5qYXZh
IChhdCBsaW5lIDYpXG4iICsKIAkJCSIJdGhpcy5hZGQobnVsbCk7XG4iICsKIAkJCSIJXl5eXl5e
Xl5eXl5eXl5cbiIgKwogCQkJIlR5cGUgc2FmZXR5OiBUaGUgbWV0aG9kIGFkZChPYmplY3QpIGJl
bG9uZ3MgdG8gdGhlIHJhdyB0eXBlIENvbGxlY3Rpb24uIFJlZmVyZW5jZXMgdG8gZ2VuZXJpYyB0
eXBlIENvbGxlY3Rpb248RT4gc2hvdWxkIGJlIHBhcmFtZXRlcml6ZWRcbiIgKwotCQkJIi0tLS0t
LS0tLS1cbiIKLQkJCTogLy8gMS44IHBpY2tzIHRoZSBub24tcmF3IHZlcnNpb24gYXMgYmVpbmcg
bW9yZSBzcGVjaWZpYyg/KQotCQkJIiIpKTsKKwkJCSItLS0tLS0tLS0tXG4iKTsKIH0KIAogLy9o
dHRwczovL2J1Z3MuZWNsaXBzZS5vcmcvYnVncy9zaG93X2J1Zy5jZ2k/aWQ9MTQyODk3CmRpZmYg
LS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlw
c2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jlc3Npb25U
ZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2Vj
bGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jlc3Np
b25UZXN0LmphdmEKaW5kZXggOTc4OTkwZC4uYzliZTAyZCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlw
c2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3Rz
L2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY3NSZWdyZXNzaW9uVGVzdC5qYXZhCisrKyBiL29y
Zy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29y
ZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3QuamF2YQpA
QCAtNDgsNyArNDgsNyBAQAogCS8vIFN0YXRpYyBpbml0aWFsaXplciB0byBzcGVjaWZ5IHRlc3Rz
IHN1YnNldCB1c2luZyBURVNUU18qIHN0YXRpYyB2YXJpYWJsZXMKIAkvLyBBbGwgc3BlY2lmaWVk
IHRlc3RzIHdoaWNoIGRvZXMgbm90IGJlbG9uZyB0byB0aGUgY2xhc3MgYXJlIHNraXBwZWQuLi4K
IAlzdGF0aWMgewotLy8JCVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1tdIHsgInRlc3RCdWc0MzU2
NDMiIH07CisvLwkJVEVTVFNfTkFNRVMgPSBuZXcgU3RyaW5nW10geyAidGVzdEJ1ZzQzNDA0NF9j
b21tZW50MjAiIH07CiAvLwkJVEVTVFNfTlVNQkVSUyA9IG5ldyBpbnRbXSB7IDE0NjUgfTsKIC8v
CQlURVNUU19SQU5HRSA9IG5ldyBpbnRbXSB7IDEwOTcsIC0xIH07CiAJfQpAQCAtNTIxMiw2ICs1
MjEyLDgyIEBACiAJCQkifVxuIgogCQl9KTsKIH0KK3B1YmxpYyB2b2lkIHRlc3RCdWc0MzQwNDRf
Y29tbWVudDIwKCkgeworCXJ1bkNvbmZvcm1UZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJIkVj
bGlwc2VKYXZhOEdlbmVyaWNzLmphdmEiLAorCQkJInB1YmxpYyBjbGFzcyBFY2xpcHNlSmF2YThH
ZW5lcmljcyB7XG4iICsgCisJCQkiXG4iICsgCisJCQkiICBwdWJsaWMgaW50ZXJmYWNlIEZvbzxW
PiB7XG4iICsgCisJCQkiICAgIHB1YmxpYyBWIGRvRm9vKCk7XG4iICsgCisJCQkiICB9XG4iICsg
CisJCQkiXG4iICsgCisJCQkiICBwdWJsaWMgc3RhdGljIGNsYXNzIEZvb0JhcjxWLCBUIGV4dGVu
ZHMgRm9vPFY+PiB7XG4iICsgCisJCQkiICAgIHB1YmxpYyBUIGdldEJhcigpIHtcbiIgKyAKKwkJ
CSIgICAgICByZXR1cm4gbnVsbDtcbiIgKyAKKwkJCSIgICAgfVxuIiArIAorCQkJIiAgfVxuIiAr
IAorCQkJIlxuIiArIAorCQkJIiAgcHVibGljIHN0YXRpYyBhYnN0cmFjdCBjbGFzcyBBYnN0cmFj
dEZvbzxWPiBpbXBsZW1lbnRzIEZvbzxWPiB7XG4iICsgCisJCQkiICB9XG4iICsgCisJCQkiXG4i
ICsgCisJCQkiICBwdWJsaWMgc3RhdGljIGNsYXNzIEZhY3Rvcnkge1xuIiArIAorCQkJIiAgICBw
dWJsaWMgc3RhdGljIDxWLCBUIGV4dGVuZHMgQWJzdHJhY3RGb288Vj4+IEZvb0JhcjxWLCBUPiBj
cmVhdGVGb29CYXIoKSB7XG4iICsgCisJCQkiICAgICAgcmV0dXJuIG51bGw7XG4iICsgCisJCQki
ICAgIH1cbiIgKyAKKwkJCSIgIH1cbiIgKyAKKwkJCSJcbiIgKyAKKwkJCSIgIHB1YmxpYyBzdGF0
aWMgdm9pZCB0ZXN0KCkge1xuIiArIAorCQkJIiAgICBmaW5hbCBGb29CYXI8PywgPyBleHRlbmRz
IEFic3RyYWN0Rm9vPD8+PiB0eXBlZFByb3BlcnR5ID0gRmFjdG9yeS5jcmVhdGVGb29CYXIoKTtc
biIgKyAKKwkJCSIgICAgLy9UT0RPIEVjbGlwc2UgQnVnIDQzNDA0NCBzdGlsbCBleGlzdHNcbiIg
KyAKKwkJCSIgICAgZmluYWwgT2JqZWN0IHByb3BlcnR5VmFsdWUgPSB0eXBlZFByb3BlcnR5Lmdl
dEJhcigpLmRvRm9vKCk7XG4iICsgCisJCQkiICB9XG4iICsgCisJCQkiXG4iICsgCisJCQkifVxu
IgorCQl9KTsKK30KK3B1YmxpYyB2b2lkIHRlc3RCdWc0MzQwNDRfY29tbWVudDM2KCkgeworCXJ1
bk5lZ2F0aXZlVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJFY2xpcHNlSmF2YThHZW5lcmlj
cy5qYXZhIiwKKwkJCSJwdWJsaWMgY2xhc3MgRWNsaXBzZUphdmE4R2VuZXJpY3Mge1xuIiArIAor
CQkJIlxuIiArIAorCQkJIiAgcHVibGljIGludGVyZmFjZSBOYXN0eSB7XG4iICsgCisJCQkiICAg
IHB1YmxpYyBPYmplY3QgZG9Gb28oSW50ZWdlciBhKTtcbiIgKyAKKwkJCSIgIH1cbiIgKyAKKwkJ
CSIgIHB1YmxpYyBpbnRlcmZhY2UgRm9vPFY+IHtcbiIgKyAKKwkJCSIgICAgcHVibGljIFYgZG9G
b28oU3RyaW5nIGEpO1xuIiArIAorCQkJIiAgfVxuIiArIAorCQkJIlxuIiArIAorCQkJIiAgcHVi
bGljIHN0YXRpYyBjbGFzcyBGb29CYXI8ViwgVCBleHRlbmRzIEZvbzxWPj4ge1xuIiArIAorCQkJ
IiAgICBwdWJsaWMgVCBnZXRCYXIoKSB7XG4iICsgCisJCQkiICAgICAgcmV0dXJuIG51bGw7XG4i
ICsgCisJCQkiICAgIH1cbiIgKyAKKwkJCSIgIH1cbiIgKyAKKwkJCSJcbiIgKyAKKwkJCSIgIHB1
YmxpYyBzdGF0aWMgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RGb288Vj4gaW1wbGVtZW50cyBGb288
Vj4sIE5hc3R5IHtcbiIgKyAKKwkJCSIgIH1cbiIgKyAKKwkJCSJcbiIgKyAKKwkJCSIgIHB1Ymxp
YyBzdGF0aWMgY2xhc3MgRmFjdG9yeSB7XG4iICsgCisJCQkiICAgIHB1YmxpYyBzdGF0aWMgPFYs
IFQgZXh0ZW5kcyBBYnN0cmFjdEZvbzxWPj4gRm9vQmFyPFYsIFQ+IGNyZWF0ZUZvb0JhcigpIHtc
biIgKyAKKwkJCSIgICAgICByZXR1cm4gbnVsbDtcbiIgKyAKKwkJCSIgICAgfVxuIiArIAorCQkJ
IiAgfVxuIiArIAorCQkJIlxuIiArIAorCQkJIiAgcHVibGljIHN0YXRpYyB2b2lkIHRlc3QoKSB7
XG4iICsgCisJCQkiICAgIGZpbmFsIEZvb0Jhcjw/LCA/IGV4dGVuZHMgQWJzdHJhY3RGb288Pz4+
IHR5cGVkUHJvcGVydHkgPSBGYWN0b3J5LmNyZWF0ZUZvb0JhcigpO1xuIiArIAorCQkJIiAgICAv
L1RPRE8gRWNsaXBzZSBCdWcgNDM0MDQ0IHN0aWxsIGV4aXN0c1xuIiArIAorCQkJIiAgICBmaW5h
bCBPYmplY3QgcHJvcGVydHlWYWx1ZSA9IHR5cGVkUHJvcGVydHkuZ2V0QmFyKCkuZG9Gb28obnVs
bCk7XG4iICsgCisJCQkiICB9XG4iICsgCisJCQkifVxuIgorCQl9LAorCQkiLS0tLS0tLS0tLVxu
IiArIAorCQkiMS4gRVJST1IgaW4gRWNsaXBzZUphdmE4R2VuZXJpY3MuamF2YSAoYXQgbGluZSAy
OClcbiIgKyAKKwkJIglmaW5hbCBPYmplY3QgcHJvcGVydHlWYWx1ZSA9IHR5cGVkUHJvcGVydHku
Z2V0QmFyKCkuZG9Gb28obnVsbCk7XG4iICsgCisJCSIJICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgIF5eXl5eXG4iICsgCisJCSJUaGUgbWV0aG9kIGRv
Rm9vKFN0cmluZykgaXMgYW1iaWd1b3VzIGZvciB0aGUgdHlwZSBjYXB0dXJlIzItb2YgPyBleHRl
bmRzIEVjbGlwc2VKYXZhOEdlbmVyaWNzLkFic3RyYWN0Rm9vPD8+XG4iICsgCisJCSItLS0tLS0t
LS0tXG4iKTsKK30KIHB1YmxpYyB2b2lkIHRlc3RCdWc0MzQ3OTMoKSB7CiAJTWFwIG9wdGlvbnMg
PSBnZXRDb21waWxlck9wdGlvbnMoKTsKIAlvcHRpb25zLnB1dChKYXZhQ29yZS5DT01QSUxFUl9B
Tk5PVEFUSU9OX05VTExfQU5BTFlTSVMsIEphdmFDb3JlLkVOQUJMRUQpOwpkaWZmIC0tZ2l0IGEv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIv
b3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5qYXZhCmluZGV4
IGExZjgwNTguLjRhOTg1NzQgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YQor
KysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEKQEAgLTEyNDUsOCArMTI0NSw5IEBACiAJCWlu
dCBzdGFydEZvdW5kU2l6ZSA9IGZvdW5kLnNpemU7CiAJCWZpbmFsIGJvb2xlYW4gc291cmNlTGV2
ZWwxOCA9IHRoaXMuY29tcGlsZXJPcHRpb25zKCkuc291cmNlTGV2ZWwgPj0gQ2xhc3NGaWxlQ29u
c3RhbnRzLkpESzFfODsKIAkJUmVmZXJlbmNlQmluZGluZyBjdXJyZW50VHlwZSA9IGNsYXNzSGll
cmFyY2h5U3RhcnQ7CisJCUxpc3Q8VHlwZUJpbmRpbmc+IHZpc2l0ZWRUeXBlcyA9IG5ldyBBcnJh
eUxpc3Q8VHlwZUJpbmRpbmc+KCk7CiAJCXdoaWxlIChjdXJyZW50VHlwZSAhPSBudWxsKSB7Ci0J
CQlmaW5kTWV0aG9kSW5TdXBlckludGVyZmFjZXMoY3VycmVudFR5cGUsIHNlbGVjdG9yLCBmb3Vu
ZCwgaW52b2NhdGlvblNpdGUpOworCQkJZmluZE1ldGhvZEluU3VwZXJJbnRlcmZhY2VzKGN1cnJl
bnRUeXBlLCBzZWxlY3RvciwgZm91bmQsIHZpc2l0ZWRUeXBlcywgaW52b2NhdGlvblNpdGUpOwog
CQkJY3VycmVudFR5cGUgPSBjdXJyZW50VHlwZS5zdXBlcmNsYXNzKCk7CiAJCX0KIAkJTWV0aG9k
QmluZGluZ1tdIGNhbmRpZGF0ZXMgPSBudWxsOwpAQCAtMTY4Miw3ICsxNjgzLDcgQEAKIAkJCU1l
dGhvZEJpbmRpbmdbXSByZWNlaXZlck1ldGhvZHMgPSByZWNlaXZlclR5cGUuZ2V0TWV0aG9kcyhz
ZWxlY3RvciwgYXJndW1lbnRUeXBlcy5sZW5ndGgpOwogCQkJaWYgKHJlY2VpdmVyTWV0aG9kcy5s
ZW5ndGggPiAwKQogCQkJCWZvdW5kLmFkZEFsbChyZWNlaXZlck1ldGhvZHMpOwotCQkJZmluZE1l
dGhvZEluU3VwZXJJbnRlcmZhY2VzKHJlY2VpdmVyVHlwZSwgc2VsZWN0b3IsIGZvdW5kLCBpbnZv
Y2F0aW9uU2l0ZSk7CisJCQlmaW5kTWV0aG9kSW5TdXBlckludGVyZmFjZXMocmVjZWl2ZXJUeXBl
LCBzZWxlY3RvciwgZm91bmQsIG51bGwsIGludm9jYXRpb25TaXRlKTsKIAkJCWN1cnJlbnRUeXBl
ID0gZ2V0SmF2YUxhbmdPYmplY3QoKTsKIAkJfQogCkBAIC0xOTc5LDE0ICsxOTgwLDIyIEBACiAJ
CXJldHVybiBtZXRob2RCaW5kaW5nOwogCX0KIAotCXByb3RlY3RlZCB2b2lkIGZpbmRNZXRob2RJ
blN1cGVySW50ZXJmYWNlcyhSZWZlcmVuY2VCaW5kaW5nIHJlY2VpdmVyVHlwZSwgY2hhcltdIHNl
bGVjdG9yLCBPYmplY3RWZWN0b3IgZm91bmQsIEludm9jYXRpb25TaXRlIGludm9jYXRpb25TaXRl
KSB7CisJcHJvdGVjdGVkIHZvaWQgZmluZE1ldGhvZEluU3VwZXJJbnRlcmZhY2VzKFJlZmVyZW5j
ZUJpbmRpbmcgcmVjZWl2ZXJUeXBlLCBjaGFyW10gc2VsZWN0b3IsIE9iamVjdFZlY3RvciBmb3Vu
ZCwgTGlzdDxUeXBlQmluZGluZz4gdmlzaXRlZFR5cGVzLCBJbnZvY2F0aW9uU2l0ZSBpbnZvY2F0
aW9uU2l0ZSkgewogCQlSZWZlcmVuY2VCaW5kaW5nIGN1cnJlbnRUeXBlID0gcmVjZWl2ZXJUeXBl
OwogCQlSZWZlcmVuY2VCaW5kaW5nW10gaXRzSW50ZXJmYWNlcyA9IGN1cnJlbnRUeXBlLnN1cGVy
SW50ZXJmYWNlcygpOwogCQlpZiAoaXRzSW50ZXJmYWNlcyAhPSBudWxsICYmIGl0c0ludGVyZmFj
ZXMgIT0gQmluZGluZy5OT19TVVBFUklOVEVSRkFDRVMpIHsKIAkJCVJlZmVyZW5jZUJpbmRpbmdb
XSBpbnRlcmZhY2VzVG9WaXNpdCA9IGl0c0ludGVyZmFjZXM7CiAJCQlpbnQgbmV4dFBvc2l0aW9u
ID0gaW50ZXJmYWNlc1RvVmlzaXQubGVuZ3RoOwotCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBuZXh0
UG9zaXRpb247IGkrKykgeworCQkJaW50ZXJmYWNlczogZm9yIChpbnQgaSA9IDA7IGkgPCBuZXh0
UG9zaXRpb247IGkrKykgewogCQkJCWN1cnJlbnRUeXBlID0gaW50ZXJmYWNlc1RvVmlzaXRbaV07
CisJCQkJaWYgKHZpc2l0ZWRUeXBlcyAhPSBudWxsKSB7CisJCQkJCVR5cGVCaW5kaW5nIHVuY2Fw
dHVyZWQgPSBjdXJyZW50VHlwZS51bmNhcHR1cmUodGhpcyk7CisJCQkJCWZvciAoVHlwZUJpbmRp
bmcgdmlzaXRlZCA6IHZpc2l0ZWRUeXBlcykgeworCQkJCQkJaWYgKHVuY2FwdHVyZWQuaXNDb21w
YXRpYmxlV2l0aCh2aXNpdGVkKSAmJiB2aXNpdGVkLmlzQ29tcGF0aWJsZVdpdGgodW5jYXB0dXJl
ZCkpCisJCQkJCQkJY29udGludWUgaW50ZXJmYWNlczsKKwkJCQkJfQorCQkJCQl2aXNpdGVkVHlw
ZXMuYWRkKHVuY2FwdHVyZWQpOworCQkJCX0KIAkJCQljb21waWxhdGlvblVuaXRTY29wZSgpLnJl
Y29yZFR5cGVSZWZlcmVuY2UoY3VycmVudFR5cGUpOwogCQkJCWN1cnJlbnRUeXBlID0gKFJlZmVy
ZW5jZUJpbmRpbmcpIGN1cnJlbnRUeXBlLmNhcHR1cmUodGhpcywgaW52b2NhdGlvblNpdGUgPT0g
bnVsbCA/IDAgOiBpbnZvY2F0aW9uU2l0ZS5zb3VyY2VFbmQoKSk7CiAJCQkJTWV0aG9kQmluZGlu
Z1tdIGN1cnJlbnRNZXRob2RzID0gY3VycmVudFR5cGUuZ2V0TWV0aG9kcyhzZWxlY3Rvcik7
</data>

          </attachment>
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>243676</attachid>
            <date>2014-05-29 06:45:00 -0400</date>
            <delta_ts>2014-05-29 06:45:51 -0400</delta_ts>
            <desc>Patch with Stephan&apos;s suggestion</desc>
            <filename>Bug-434044.patch</filename>
            <type>text/plain</type>
            <size>6702</size>
            <attacher name="Jay Arthanareeswaran">jarthana</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL0dlbmVyaWNUeXBlVGVz
dC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xp
cHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0Lmph
dmEKaW5kZXggMDQyNjNiMC4uOWEzODAzYSAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vR2VuZXJpY1R5cGVUZXN0LmphdmEKQEAgLTMzMDIzLDEyICszMzAyMyw5IEBA
CiAJCQkiVHlwZSBzYWZldHk6IFRoZSBtZXRob2QgYWRkKE9iamVjdCkgYmVsb25ncyB0byB0aGUg
cmF3IHR5cGUgQ29sbGVjdGlvbi4gUmVmZXJlbmNlcyB0byBnZW5lcmljIHR5cGUgQ29sbGVjdGlv
bjxFPiBzaG91bGQgYmUgcGFyYW1ldGVyaXplZFxuIiArCiAJCQkiLS0tLS0tLS0tLVxuIiArCi0J
CQkodGhpcy5jb21wbGlhbmNlTGV2ZWwgPCBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84ID8KIAkJ
CSI0LiBXQVJOSU5HIGluIFguamF2YSAoYXQgbGluZSA2KVxuIiArCiAJCQkiCXRoaXMuYWRkKG51
bGwpO1xuIiArCiAJCQkiCV5eXl5eXl5eXl5eXl5eXG4iICsKIAkJCSJUeXBlIHNhZmV0eTogVGhl
IG1ldGhvZCBhZGQoT2JqZWN0KSBiZWxvbmdzIHRvIHRoZSByYXcgdHlwZSBDb2xsZWN0aW9uLiBS
ZWZlcmVuY2VzIHRvIGdlbmVyaWMgdHlwZSBDb2xsZWN0aW9uPEU+IHNob3VsZCBiZSBwYXJhbWV0
ZXJpemVkXG4iICsKLQkJCSItLS0tLS0tLS0tXG4iCi0JCQk6IC8vIDEuOCBwaWNrcyB0aGUgbm9u
LXJhdyB2ZXJzaW9uIGFzIGJlaW5nIG1vcmUgc3BlY2lmaWMoPykKLQkJCSIiKSk7CisJCQkiLS0t
LS0tLS0tLVxuIik7CiB9CiAKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3Rz
LmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNz
aW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRl
c3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdy
ZXNzaW9uL0dlbmVyaWNzUmVncmVzc2lvblRlc3QuamF2YQppbmRleCA4YTY0ZGJhLi4zYTdhNWI4
IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3Jn
L2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9HZW5lcmljc1JlZ3Jl
c3Npb25UZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIv
c3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vR2VuZXJp
Y3NSZWdyZXNzaW9uVGVzdC5qYXZhCkBAIC01MjEzLDQgKzUyMTMsODAgQEAKIAkJfSk7CiB9Citw
dWJsaWMgdm9pZCB0ZXN0QnVnNDM0MDQ0X2NvbW1lbnQyMCgpIHsKKwlydW5Db25mb3JtVGVzdCgK
KwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJFY2xpcHNlSmF2YThHZW5lcmljcy5qYXZhIiwKKwkJCSJw
dWJsaWMgY2xhc3MgRWNsaXBzZUphdmE4R2VuZXJpY3Mge1xuIiArIAorCQkJIlxuIiArIAorCQkJ
IiAgcHVibGljIGludGVyZmFjZSBGb288Vj4ge1xuIiArIAorCQkJIiAgICBwdWJsaWMgViBkb0Zv
bygpO1xuIiArIAorCQkJIiAgfVxuIiArIAorCQkJIlxuIiArIAorCQkJIiAgcHVibGljIHN0YXRp
YyBjbGFzcyBGb29CYXI8ViwgVCBleHRlbmRzIEZvbzxWPj4ge1xuIiArIAorCQkJIiAgICBwdWJs
aWMgVCBnZXRCYXIoKSB7XG4iICsgCisJCQkiICAgICAgcmV0dXJuIG51bGw7XG4iICsgCisJCQki
ICAgIH1cbiIgKyAKKwkJCSIgIH1cbiIgKyAKKwkJCSJcbiIgKyAKKwkJCSIgIHB1YmxpYyBzdGF0
aWMgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RGb288Vj4gaW1wbGVtZW50cyBGb288Vj4ge1xuIiAr
IAorCQkJIiAgfVxuIiArIAorCQkJIlxuIiArIAorCQkJIiAgcHVibGljIHN0YXRpYyBjbGFzcyBG
YWN0b3J5IHtcbiIgKyAKKwkJCSIgICAgcHVibGljIHN0YXRpYyA8ViwgVCBleHRlbmRzIEFic3Ry
YWN0Rm9vPFY+PiBGb29CYXI8ViwgVD4gY3JlYXRlRm9vQmFyKCkge1xuIiArIAorCQkJIiAgICAg
IHJldHVybiBudWxsO1xuIiArIAorCQkJIiAgICB9XG4iICsgCisJCQkiICB9XG4iICsgCisJCQki
XG4iICsgCisJCQkiICBwdWJsaWMgc3RhdGljIHZvaWQgdGVzdCgpIHtcbiIgKyAKKwkJCSIgICAg
ZmluYWwgRm9vQmFyPD8sID8gZXh0ZW5kcyBBYnN0cmFjdEZvbzw/Pj4gdHlwZWRQcm9wZXJ0eSA9
IEZhY3RvcnkuY3JlYXRlRm9vQmFyKCk7XG4iICsgCisJCQkiICAgIC8vVE9ETyBFY2xpcHNlIEJ1
ZyA0MzQwNDQgc3RpbGwgZXhpc3RzXG4iICsgCisJCQkiICAgIGZpbmFsIE9iamVjdCBwcm9wZXJ0
eVZhbHVlID0gdHlwZWRQcm9wZXJ0eS5nZXRCYXIoKS5kb0ZvbygpO1xuIiArIAorCQkJIiAgfVxu
IiArIAorCQkJIlxuIiArIAorCQkJIn1cbiIKKwkJfSk7Cit9CitwdWJsaWMgdm9pZCB0ZXN0QnVn
NDM0MDQ0X2NvbW1lbnQzNigpIHsKKwlydW5OZWdhdGl2ZVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7
CisJCQkiRWNsaXBzZUphdmE4R2VuZXJpY3MuamF2YSIsCisJCQkicHVibGljIGNsYXNzIEVjbGlw
c2VKYXZhOEdlbmVyaWNzIHtcbiIgKyAKKwkJCSJcbiIgKyAKKwkJCSIgIHB1YmxpYyBpbnRlcmZh
Y2UgTmFzdHkge1xuIiArIAorCQkJIiAgICBwdWJsaWMgT2JqZWN0IGRvRm9vKEludGVnZXIgYSk7
XG4iICsgCisJCQkiICB9XG4iICsgCisJCQkiICBwdWJsaWMgaW50ZXJmYWNlIEZvbzxWPiB7XG4i
ICsgCisJCQkiICAgIHB1YmxpYyBWIGRvRm9vKFN0cmluZyBhKTtcbiIgKyAKKwkJCSIgIH1cbiIg
KyAKKwkJCSJcbiIgKyAKKwkJCSIgIHB1YmxpYyBzdGF0aWMgY2xhc3MgRm9vQmFyPFYsIFQgZXh0
ZW5kcyBGb288Vj4+IHtcbiIgKyAKKwkJCSIgICAgcHVibGljIFQgZ2V0QmFyKCkge1xuIiArIAor
CQkJIiAgICAgIHJldHVybiBudWxsO1xuIiArIAorCQkJIiAgICB9XG4iICsgCisJCQkiICB9XG4i
ICsgCisJCQkiXG4iICsgCisJCQkiICBwdWJsaWMgc3RhdGljIGFic3RyYWN0IGNsYXNzIEFic3Ry
YWN0Rm9vPFY+IGltcGxlbWVudHMgRm9vPFY+LCBOYXN0eSB7XG4iICsgCisJCQkiICB9XG4iICsg
CisJCQkiXG4iICsgCisJCQkiICBwdWJsaWMgc3RhdGljIGNsYXNzIEZhY3Rvcnkge1xuIiArIAor
CQkJIiAgICBwdWJsaWMgc3RhdGljIDxWLCBUIGV4dGVuZHMgQWJzdHJhY3RGb288Vj4+IEZvb0Jh
cjxWLCBUPiBjcmVhdGVGb29CYXIoKSB7XG4iICsgCisJCQkiICAgICAgcmV0dXJuIG51bGw7XG4i
ICsgCisJCQkiICAgIH1cbiIgKyAKKwkJCSIgIH1cbiIgKyAKKwkJCSJcbiIgKyAKKwkJCSIgIHB1
YmxpYyBzdGF0aWMgdm9pZCB0ZXN0KCkge1xuIiArIAorCQkJIiAgICBmaW5hbCBGb29CYXI8Pywg
PyBleHRlbmRzIEFic3RyYWN0Rm9vPD8+PiB0eXBlZFByb3BlcnR5ID0gRmFjdG9yeS5jcmVhdGVG
b29CYXIoKTtcbiIgKyAKKwkJCSIgICAgLy9UT0RPIEVjbGlwc2UgQnVnIDQzNDA0NCBzdGlsbCBl
eGlzdHNcbiIgKyAKKwkJCSIgICAgZmluYWwgT2JqZWN0IHByb3BlcnR5VmFsdWUgPSB0eXBlZFBy
b3BlcnR5LmdldEJhcigpLmRvRm9vKG51bGwpO1xuIiArIAorCQkJIiAgfVxuIiArIAorCQkJIn1c
biIKKwkJfSwKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjEuIEVSUk9SIGluIEVjbGlwc2VKYXZh
OEdlbmVyaWNzLmphdmEgKGF0IGxpbmUgMjgpXG4iICsgCisJCSIJZmluYWwgT2JqZWN0IHByb3Bl
cnR5VmFsdWUgPSB0eXBlZFByb3BlcnR5LmdldEJhcigpLmRvRm9vKG51bGwpO1xuIiArIAorCQki
CSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBeXl5e
XlxuIiArIAorCQkiVGhlIG1ldGhvZCBkb0ZvbyhTdHJpbmcpIGlzIGFtYmlndW91cyBmb3IgdGhl
IHR5cGUgY2FwdHVyZSMyLW9mID8gZXh0ZW5kcyBFY2xpcHNlSmF2YThHZW5lcmljcy5BYnN0cmFj
dEZvbzw/PlxuIiArIAorCQkiLS0tLS0tLS0tLVxuIik7Cit9CiBwdWJsaWMgdm9pZCB0ZXN0QnVn
NDM0NzkzKCkgewogCU1hcCBvcHRpb25zID0gZ2V0Q29tcGlsZXJPcHRpb25zKCk7CmRpZmYgLS1n
aXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL1Njb3BlLmphdmEK
aW5kZXggYTFmODA1OC4uNmJmMGE0OCAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9TY29wZS5q
YXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9sb29rdXAvU2NvcGUuamF2YQpAQCAtMTI0Niw2ICsxMjQ2LDcgQEAK
IAkJZmluYWwgYm9vbGVhbiBzb3VyY2VMZXZlbDE4ID0gdGhpcy5jb21waWxlck9wdGlvbnMoKS5z
b3VyY2VMZXZlbCA+PSBDbGFzc0ZpbGVDb25zdGFudHMuSkRLMV84OwogCQlSZWZlcmVuY2VCaW5k
aW5nIGN1cnJlbnRUeXBlID0gY2xhc3NIaWVyYXJjaHlTdGFydDsKKwkJTGlzdDxUeXBlQmluZGlu
Zz4gdmlzaXRlZFR5cGVzID0gbmV3IEFycmF5TGlzdDxUeXBlQmluZGluZz4oKTsKIAkJd2hpbGUg
KGN1cnJlbnRUeXBlICE9IG51bGwpIHsKLQkJCWZpbmRNZXRob2RJblN1cGVySW50ZXJmYWNlcyhj
dXJyZW50VHlwZSwgc2VsZWN0b3IsIGZvdW5kLCBpbnZvY2F0aW9uU2l0ZSk7CisJCQlmaW5kTWV0
aG9kSW5TdXBlckludGVyZmFjZXMoY3VycmVudFR5cGUsIHNlbGVjdG9yLCBmb3VuZCwgdmlzaXRl
ZFR5cGVzLCBpbnZvY2F0aW9uU2l0ZSk7CiAJCQljdXJyZW50VHlwZSA9IGN1cnJlbnRUeXBlLnN1
cGVyY2xhc3MoKTsKIAkJfQpAQCAtMTY4Myw1ICsxNjg0LDUgQEAKIAkJCWlmIChyZWNlaXZlck1l
dGhvZHMubGVuZ3RoID4gMCkKIAkJCQlmb3VuZC5hZGRBbGwocmVjZWl2ZXJNZXRob2RzKTsKLQkJ
CWZpbmRNZXRob2RJblN1cGVySW50ZXJmYWNlcyhyZWNlaXZlclR5cGUsIHNlbGVjdG9yLCBmb3Vu
ZCwgaW52b2NhdGlvblNpdGUpOworCQkJZmluZE1ldGhvZEluU3VwZXJJbnRlcmZhY2VzKHJlY2Vp
dmVyVHlwZSwgc2VsZWN0b3IsIGZvdW5kLCBudWxsLCBpbnZvY2F0aW9uU2l0ZSk7CiAJCQljdXJy
ZW50VHlwZSA9IGdldEphdmFMYW5nT2JqZWN0KCk7CiAJCX0KQEAgLTE5ODAsNSArMTk4MSw1IEBA
CiAJfQogCi0JcHJvdGVjdGVkIHZvaWQgZmluZE1ldGhvZEluU3VwZXJJbnRlcmZhY2VzKFJlZmVy
ZW5jZUJpbmRpbmcgcmVjZWl2ZXJUeXBlLCBjaGFyW10gc2VsZWN0b3IsIE9iamVjdFZlY3RvciBm
b3VuZCwgSW52b2NhdGlvblNpdGUgaW52b2NhdGlvblNpdGUpIHsKKwlwcm90ZWN0ZWQgdm9pZCBm
aW5kTWV0aG9kSW5TdXBlckludGVyZmFjZXMoUmVmZXJlbmNlQmluZGluZyByZWNlaXZlclR5cGUs
IGNoYXJbXSBzZWxlY3RvciwgT2JqZWN0VmVjdG9yIGZvdW5kLCBMaXN0PFR5cGVCaW5kaW5nPiB2
aXNpdGVkVHlwZXMsIEludm9jYXRpb25TaXRlIGludm9jYXRpb25TaXRlKSB7CiAJCVJlZmVyZW5j
ZUJpbmRpbmcgY3VycmVudFR5cGUgPSByZWNlaXZlclR5cGU7CiAJCVJlZmVyZW5jZUJpbmRpbmdb
XSBpdHNJbnRlcmZhY2VzID0gY3VycmVudFR5cGUuc3VwZXJJbnRlcmZhY2VzKCk7CkBAIC0xOTg2
LDYgKzE5ODcsMTQgQEAKIAkJCVJlZmVyZW5jZUJpbmRpbmdbXSBpbnRlcmZhY2VzVG9WaXNpdCA9
IGl0c0ludGVyZmFjZXM7CiAJCQlpbnQgbmV4dFBvc2l0aW9uID0gaW50ZXJmYWNlc1RvVmlzaXQu
bGVuZ3RoOwotCQkJZm9yIChpbnQgaSA9IDA7IGkgPCBuZXh0UG9zaXRpb247IGkrKykgeworCQkJ
aW50ZXJmYWNlczogZm9yIChpbnQgaSA9IDA7IGkgPCBuZXh0UG9zaXRpb247IGkrKykgewogCQkJ
CWN1cnJlbnRUeXBlID0gaW50ZXJmYWNlc1RvVmlzaXRbaV07CisJCQkJaWYgKHZpc2l0ZWRUeXBl
cyAhPSBudWxsKSB7CisJCQkJCVR5cGVCaW5kaW5nIHVuY2FwdHVyZWQgPSBjdXJyZW50VHlwZS51
bmNhcHR1cmUodGhpcyk7CisJCQkJCWZvciAoVHlwZUJpbmRpbmcgdmlzaXRlZCA6IHZpc2l0ZWRU
eXBlcykgeworCQkJCQkJaWYgKHVuY2FwdHVyZWQuaXNFcXVpdmFsZW50VG8odmlzaXRlZCkpCisJ
CQkJCQkJY29udGludWUgaW50ZXJmYWNlczsKKwkJCQkJfQorCQkJCQl2aXNpdGVkVHlwZXMuYWRk
KHVuY2FwdHVyZWQpOworCQkJCX0KIAkJCQljb21waWxhdGlvblVuaXRTY29wZSgpLnJlY29yZFR5
cGVSZWZlcmVuY2UoY3VycmVudFR5cGUpOwogCQkJCWN1cnJlbnRUeXBlID0gKFJlZmVyZW5jZUJp
bmRpbmcpIGN1cnJlbnRUeXBlLmNhcHR1cmUodGhpcywgaW52b2NhdGlvblNpdGUgPT0gbnVsbCA/
IDAgOiBpbnZvY2F0aW9uU2l0ZS5zb3VyY2VFbmQoKSk7
</data>

          </attachment>
      

    </bug>

</bugzilla>