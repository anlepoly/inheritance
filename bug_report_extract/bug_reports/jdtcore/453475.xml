<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>453475</bug_id>
          
          <creation_ts>2014-11-27 13:36:00 -0500</creation_ts>
          <short_desc>[1.8][null] Contradictory null annotations (4.5 M3 edition)</short_desc>
          <delta_ts>2015-01-28 03:41:49 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.5</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Linux</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.4.2</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Chris Hubick">chris</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>jarthana</cc>
    
    <cc>manpalat</cc>
    
    <cc>shankhba</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2489894</commentid>
    <comment_count>0</comment_count>
    <who name="Chris Hubick">chris</who>
    <bug_when>2014-11-27 13:36:21 -0500</bug_when>
    <thetext>TestMap.java
------------
&gt; import java.util.*;
&gt; import org.eclipse.jdt.annotation.*;
&gt; 
&gt; @NonNullByDefault
&gt; public abstract class TestMap extends AbstractMap&lt;String,@Nullable String&gt; {
&gt; 
&gt; }

Test.java
------------
&gt; import java.util.*;
&gt; import org.eclipse.jdt.annotation.*;
&gt; 
&gt; @NonNullByDefault
&gt; public class Test {
&gt; 
&gt;   public static final void test(TestMap testMap) {
&gt;     testMap.putAll(new HashMap&lt;String,@Nullable String&gt;()); // Error: Contradictory null annotations: method was inferred as &apos;void putAll(Map&lt;? extends @NonNull String,? extends @NonNull @Nullable String&gt;)&apos;, but only one of &apos;@NonNull&apos; and &apos;@Nullable&apos; can be effective at any location
&gt;   }
&gt; 
&gt; }

eclipse.buildId=4.5.0.I20141029-2000

If I do a &quot;Project-&gt;Clean...&quot; the error disappears and won&apos;t show up until I modify and save Test.java.

Sorry if this is a dup, but all the others are marked verified fixed in earlier releases.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2492985</commentid>
    <comment_count>1</comment_count>
    <who name="Chris Hubick">chris</who>
    <bug_when>2014-12-04 17:18:09 -0500</bug_when>
    <thetext>(In reply to Chris Hubick from comment #0)
&gt; If I do a &quot;Project-&gt;Clean...&quot; the error disappears and won&apos;t show up until I
&gt; modify and save Test.java.

Maybe related to Bug 444024?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2497849</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-12-16 18:39:15 -0500</bug_when>
    <thetext>I can reproduce: TestMap must be read from .class while compiling Test.java.

I assume that merging default &amp; explicit annotations just doesn&apos;t work for type arguments of a BinaryTypeBinding&apos;s super type. Apparently a bug in NonNullDefaultAwareTypeAnnotationWalker.getAnnotationsAtCursor(), which blindly merges annotations without checking for overriding.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2498947</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-12-18 19:08:22 -0500</bug_when>
    <thetext>See https://www.eclipse.org/forums/index.php?t=msg&amp;th=896396&amp;goto=1514995&amp;#msg_1514995 for a related example - perhaps same root cause?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2500004</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-12-22 14:54:16 -0500</bug_when>
    <thetext>Released for 4.5 M5 via commit 7c493ed6b34d98f52ff4fc8520fcd8662e5ffd91.

@Jay: I believe this would be good to have in 4.4.2.

Reading null default annotations from binary types didn&apos;t follow our rules for null defaults:
- @NNBD was wrongly applied despite explicit @Nullable (comment 0)
- @NNBD was wrongly applied to wildcards and type variable use (see comment 3), violating the javadoc of DefaultLocation.

Let me know if you&apos;d like a description of the fix, too.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2505470</commentid>
    <comment_count>5</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-01-14 06:33:15 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #4)
&gt; Released for 4.5 M5 via commit 7c493ed6b34d98f52ff4fc8520fcd8662e5ffd91.
&gt; 
&gt; @Jay: I believe this would be good to have in 4.4.2.

Stephan, sorry I missed out this one. Yes, We can include this one. I tried a quick attempt at back porting along with other ones, but ran into merge conflicts. Will take this up little later.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2505601</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-01-14 10:08:48 -0500</bug_when>
    <thetext>(In reply to Jay Arthanareeswaran from comment #5)
&gt; (In reply to Stephan Herrmann from comment #4)
&gt; &gt; Released for 4.5 M5 via commit 7c493ed6b34d98f52ff4fc8520fcd8662e5ffd91.
&gt; &gt; 
&gt; &gt; @Jay: I believe this would be good to have in 4.4.2.
&gt; 
&gt; Stephan, sorry I missed out this one.

n.p.

&gt; Yes, We can include this one. I tried
&gt; a quick attempt at back porting along with other ones, but ran into merge
&gt; conflicts. Will take this up little later.

I can handle this tomorrow, unless you beat me to it :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2505816</commentid>
    <comment_count>7</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-01-14 17:02:02 -0500</bug_when>
    <thetext>I see why this doesn&apos;t cleanly apply: it depends on commit 63231f253dc3aaae18caf57a7f77da85f8cefe96 (1st part of bug 439516).

I&apos;m running tests against this pair of commits on top of R4_4_maintenance.

If tests pass, I&apos;ll come back and comment on risks with / without those changes.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2505834</commentid>
    <comment_count>8</comment_count>
      <attachid>249951</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-01-14 18:40:00 -0500</bug_when>
    <thetext>Created attachment 249951
Combined patch to consider for 4.4.2

RunJDTCoreTests are green.

Sorry this came piecemeal. Both patches in question are actually closely related:

(from bug 439516 comment #4)
&gt; http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/
&gt; ?id=63231f253dc3aaae18caf57a7f77da85f8cefe96
&gt; Don&apos;t apply nonnull-default on &lt;T extends Object&gt; when read from .class.

and

(In reply to Stephan Herrmann from comment #4)
&gt; Released for 4.5 M5 via commit 7c493ed6b34d98f52ff4fc8520fcd8662e5ffd91.
&gt;
&gt; Reading null default annotations from binary types didn&apos;t follow our rules
&gt; for null defaults:
&gt; - @NNBD was wrongly applied despite explicit @Nullable (comment 0)
&gt; - @NNBD was wrongly applied to wildcards and type variable use (see comment
&gt; 3), violating the javadoc of DefaultLocation.


The first patch may look big, but it&apos;s not complex: we just need to feed one more piece of information into TypeAnnotationWalker - from several places.


While null type annotations are still new, I see the risk that adopters might wrongly adjust their code in response to these bugs.

OTOH, users that don&apos;t enable null type annotations should not be affected, since the main change is in NonNullDefaultAwareTypeAnnotationWalker, which isn&apos;t even instantiated in their case.

For your convenience, I&apos;ve attached a patch combined from both commits under consideration.

OK to release both changes to 4.4.2?


If you&apos;re unsure, it&apos;s probably OK to tell adopters that they should switch to Mars at their earliest convenience, because quite a few bugs are only fixed in master, in particular most from the cluster of bug 438458.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2505886</commentid>
    <comment_count>9</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2015-01-15 01:41:55 -0500</bug_when>
    <thetext>(In reply to Stephan Herrmann from comment #8)
&gt; OK to release both changes to 4.4.2?

+1 for back porting.

&gt; If you&apos;re unsure, it&apos;s probably OK to tell adopters that they should switch
&gt; to Mars at their earliest convenience, because quite a few bugs are only
&gt; fixed in master, in particular most from the cluster of bug 438458.

I share the same thoughts. We can still back port this. But this should be our line or response for those we can&apos;t accommodate in 4.4.2 :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2506028</commentid>
    <comment_count>10</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-01-15 07:30:58 -0500</bug_when>
    <thetext>Thanks, pushed to R4_4_maintenance:

Prerequisite patch #1 from bug 439516 comment #4 via commit e0b75d21a26e97c9a42f6cf8d270088b82d36613

Patch from this bug via commit ecc644906c7fc73a8306ba44f6555680f46dcb51</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2508672</commentid>
    <comment_count>11</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2015-01-21 23:40:32 -0500</bug_when>
    <thetext>Verified for 4.4.2 RC1 using build M20150121-0900.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2508675</commentid>
    <comment_count>12</comment_count>
    <who name="shankha banerjee">shankhba</who>
    <bug_when>2015-01-22 00:15:20 -0500</bug_when>
    <thetext>Verified for 4.5 M5 using build N20150121-2000.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2508895</commentid>
    <comment_count>13</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2015-01-22 07:13:08 -0500</bug_when>
    <thetext>Reverted target milestone the 4.4.2 as that is the lowest version containing the fix.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2511180</commentid>
    <comment_count>14</comment_count>
    <who name="Manoj Palat Away Until May 11 2015">manpalat</who>
    <bug_when>2015-01-28 03:41:49 -0500</bug_when>
    <thetext>Verified for Eclipse Mars 4.5 M5 Build id: I20150126-2000</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>249951</attachid>
            <date>2015-01-14 18:40:00 -0500</date>
            <delta_ts>2015-01-14 18:40:30 -0500</delta_ts>
            <desc>Combined patch to consider for 4.4.2</desc>
            <filename>two-commits.patch</filename>
            <type>text/plain</type>
            <size>25727</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxUeXBlQW5ub3Rh
dGlvblRlc3QuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9v
cmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxUeXBlQW5u
b3RhdGlvblRlc3QuamF2YQppbmRleCBkMjU0NDNlLi4zNTA1M2UxIDEwMDY0NAotLS0gYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2VjbGlwc2UvamR0L2NvcmUv
dGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OdWxsVHlwZUFubm90YXRpb25UZXN0LmphdmEKKysr
IGIvb3JnLmVjbGlwc2UuamR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pk
dC9jb3JlL3Rlc3RzL2NvbXBpbGVyL3JlZ3Jlc3Npb24vTnVsbFR5cGVBbm5vdGF0aW9uVGVzdC5q
YXZhCkBAIC01NTUyLDYgKzU1NTIsMzEgQEAgcHVibGljIHZvaWQgdGVzdFR5cGVWYXJpYWJsZTE5
YSgpIHsKIAkJIlBvdGVudGlhbCBudWxsIHBvaW50ZXIgYWNjZXNzOiBUaGUgbWV0aG9kIGdldDIo
KSBtYXkgcmV0dXJuIG51bGxcbiIgKyAKIAkJIi0tLS0tLS0tLS1cbiIpOwogfQorLy8gQnVnIDQz
OTUxNiAtIFsxLjhdW251bGxdIE5vbk51bGxCeURlZmF1bHQgd3JvbmdseSBhcHBsaWVkIHRvIGlt
cGxpY2l0IHR5cGUgYm91bmQgb2YgYmluYXJ5IHR5cGUKK3B1YmxpYyB2b2lkIHRlc3RUeXBlVmFy
aWFibGUxMCgpIHsKKwlydW5Db25mb3JtVGVzdFdpdGhMaWJzKAorCQluZXcgU3RyaW5nW10gewor
CQkJIlguamF2YSIsCisJCQkiQG9yZy5lY2xpcHNlLmpkdC5hbm5vdGF0aW9uLk5vbk51bGxCeURl
ZmF1bHRcbiIgKworCQkJInB1YmxpYyBjbGFzcyBYPFQ+IHtcbiIgKworCQkJIgl2b2lkIHRlc3Qo
VCB0KSB7fVxuIiArCisJCQkifVxuIgorCQl9LAorCQlnZXRDb21waWxlck9wdGlvbnMoKSwKKwkJ
IiIpOworCXJ1bkNvbmZvcm1UZXN0V2l0aExpYnMoCisJCWZhbHNlLCAKKwkJbmV3IFN0cmluZ1td
IHsKKwkJCSJZLmphdmEiLAorCQkJInB1YmxpYyBjbGFzcyBZIHtcbiIgKworCQkJIgl2b2lkIGZv
byhYPEBvcmcuZWNsaXBzZS5qZHQuYW5ub3RhdGlvbi5OdWxsYWJsZSBTdHJpbmc+IHhzKSB7XG4i
ICsKKwkJCSIJCXhzLnRlc3QobnVsbCk7XG4iICsKKwkJCSIJfVxuIiArCisJCQkifVxuIgorCQl9
LCAKKwkJZ2V0Q29tcGlsZXJPcHRpb25zKCksIAorCQkiIik7Cit9CiBwdWJsaWMgdm9pZCB0ZXN0
QnVnNDM0NjAwKCkgewogCXJ1bkNvbmZvcm1UZXN0V2l0aExpYnMoCiAJCW5ldyBTdHJpbmdbXSB7
CkBAIC01OTk0LDQgKzYwMTksOTQgQEAgcHVibGljIHZvaWQgdGVzdEJ1ZzQ0Mzg3MCgpIHsKIAkJ
bnVsbCwKIAkJIiIpOwogfQorcHVibGljIHZvaWQgdGVzdEJ1ZzQ1MzQ3NSgpIHsKKwlydW5Db25m
b3JtVGVzdFdpdGhMaWJzKAorCQluZXcgU3RyaW5nW10geworCQkJIlRlc3RNYXAuamF2YSIsCisJ
CQkiaW1wb3J0IGphdmEudXRpbC4qO1xuIiArIAorCQkJImltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
YW5ub3RhdGlvbi4qO1xuIiArIAorCQkJIlxuIiArIAorCQkJIkBOb25OdWxsQnlEZWZhdWx0XG4i
ICsgCisJCQkicHVibGljIGFic3RyYWN0IGNsYXNzIFRlc3RNYXAgZXh0ZW5kcyBBYnN0cmFjdE1h
cDxTdHJpbmcsQE51bGxhYmxlIFN0cmluZz4ge1xuIiArIAorCQkJIlxuIiArIAorCQkJIn1cbiIK
KwkJfSwgbnVsbCwgIiIpOworCXJ1bkNvbmZvcm1UZXN0V2l0aExpYnMoCisJCQluZXcgU3RyaW5n
W10geworCQkJIlRlc3QuamF2YSIsCisJCQkiaW1wb3J0IGphdmEudXRpbC4qO1xuIiArIAorCQkJ
ImltcG9ydCBvcmcuZWNsaXBzZS5qZHQuYW5ub3RhdGlvbi4qO1xuIiArIAorCQkJIlxuIiArIAor
CQkJIkBOb25OdWxsQnlEZWZhdWx0XG4iICsgCisJCQkicHVibGljIGNsYXNzIFRlc3Qge1xuIiAr
IAorCQkJIlxuIiArIAorCQkJIiAgcHVibGljIHN0YXRpYyBmaW5hbCB2b2lkIHRlc3QoVGVzdE1h
cCB0ZXN0TWFwKSB7XG4iICsgCisJCQkiICAgIHRlc3RNYXAucHV0QWxsKG5ldyBIYXNoTWFwPFN0
cmluZyxATnVsbGFibGUgU3RyaW5nPigpKTsgLy8gRXJyb3I6IENvbnRyYWRpY3RvcnkgbnVsbCBh
bm5vdGF0aW9uczogbWV0aG9kIHdhcyBpbmZlcnJlZCBhcyAndm9pZCBwdXRBbGwoTWFwPD8gZXh0
ZW5kcyBATm9uTnVsbCBTdHJpbmcsPyBleHRlbmRzIEBOb25OdWxsIEBOdWxsYWJsZSBTdHJpbmc+
KScsIGJ1dCBvbmx5IG9uZSBvZiAnQE5vbk51bGwnIGFuZCAnQE51bGxhYmxlJyBjYW4gYmUgZWZm
ZWN0aXZlIGF0IGFueSBsb2NhdGlvblxuIiArIAorCQkJIiAgfVxuIiArIAorCQkJIlxuIiArIAor
CQkJIn1cbiIKKwkJfSwgbnVsbCwgIiIpOworfQorLy8gYWxzbzogZG9uJ3QgYXBwbHkgZGVmYXVs
dCB0byB1c2Ugb2YgdHlwZSB2YXJpYWJsZQorcHVibGljIHZvaWQgdGVzdEJ1ZzQ1MzQ3NWEoKSB7
CisJcnVuQ29uZm9ybVRlc3RXaXRoTGlicygKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJOYW1lc3Bh
Y2VTdG9yYWdlLmphdmEiLAorCQkJImltcG9ydCBqYXZhLnV0aWwuKjtcbiIgKworCQkJIkBvcmcu
ZWNsaXBzZS5qZHQuYW5ub3RhdGlvbi5Ob25OdWxsQnlEZWZhdWx0XG4iICsgCisJCQkicHVibGlj
IGludGVyZmFjZSBOYW1lc3BhY2VTdG9yYWdlPFQ+IFxuIiArIAorCQkJIntcbiIgKyAKKwkJCSJc
biIgKyAKKwkJCSIJU2V0PFQ+IGdldE9iamVjdHMoKTsgXG4iICsgLy8gaGVyZSA8VD4gd2FzIHdy
b25nbHkgcmVhZCBmcm9tIC5jbGFzcyBhcyA8QE5vbk51bGwgVD4KKwkJCSIJVCBnZXRPYmplY3Qo
VCBpbik7XG4iICsgCisJCQkifVxuIgorCQl9LCBudWxsLCAiIik7CisJcnVuQ29uZm9ybVRlc3RX
aXRoTGlicygKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJOYW1lc3BhY2VTdG9yYWdlSW1wbC5qYXZh
IiwKKwkJCSJpbXBvcnQgamF2YS51dGlsLio7XG4iICsKKwkJCSJAb3JnLmVjbGlwc2UuamR0LmFu
bm90YXRpb24uTm9uTnVsbEJ5RGVmYXVsdFxuIiArIAorCQkJInB1YmxpYyBjbGFzcyBOYW1lc3Bh
Y2VTdG9yYWdlSW1wbDxUPiBpbXBsZW1lbnRzIE5hbWVzcGFjZVN0b3JhZ2U8VD5cbiIgKyAKKwkJ
CSJ7XG4iICsgCisJCQkiCUBPdmVycmlkZVxuIiArIAorCQkJIglwdWJsaWMgIFNldDxUPiBnZXRP
YmplY3RzKCkgXG4iICsgCisJCQkiCXtcbiIgKyAKKwkJCSIJCXJldHVybiBuZXcgVHJlZVNldDxU
PigpO1xuIiArIAorCQkJIgl9XG4iICsgCisJCQkiCUBPdmVycmlkZVxuIiArIAorCQkJIglwdWJs
aWMgVCBnZXRPYmplY3QoVCBpbilcbiIgKyAKKwkJCSIJe1xuIiArIAorCQkJIgkJcmV0dXJuIGlu
O1xuIiArIAorCQkJIgl9XG4iICsgCisJCQkifVxuIgorCQl9LAorCQludWxsLCAiIik7Cit9Cisv
LyBhbHNvOiBkb24ndCBhcHBseSBkZWZhdWx0IHRvIHdpbGRjYXJkCitwdWJsaWMgdm9pZCB0ZXN0
QnVnNDUzNDc1YigpIHsKKwlydW5Db25mb3JtVGVzdFdpdGhMaWJzKAorCQluZXcgU3RyaW5nW10g
eworCQkJIlguamF2YSIsCisJCQkiaW1wb3J0IGphdmEudXRpbC4qO1xuIiArCisJCQkiQG9yZy5l
Y2xpcHNlLmpkdC5hbm5vdGF0aW9uLk5vbk51bGxCeURlZmF1bHRcbiIgKyAKKwkJCSJwdWJsaWMg
aW50ZXJmYWNlIFgge1xuIiArIAorCQkJIlxuIiArIAorCQkJIgl2b2lkIHRlc3QoTGlzdDw/PiBs
aXN0KTtcbiIgKyAgLy8gaGVyZSA8Pz4gd2FzIHdyb25nbHkgcmVhZCBmcm9tIC5jbGFzcyBhcyA8
QE5vbk51bGwgPz4KKwkJCSIJXG4iICsgCisJCQkifVxuIgorCQl9LCBudWxsLCAiIik7CisJcnVu
Q29uZm9ybVRlc3RXaXRoTGlicygKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJZLmphdmEiLAorCQkJ
ImltcG9ydCBqYXZhLnV0aWwuKjtcbiIgKworCQkJImltcG9ydCBvcmcuZWNsaXBzZS5qZHQuYW5u
b3RhdGlvbi4qO1xuIiArCisJCQkicHVibGljIGNsYXNzIFkge1xuIiArIAorCQkJIglwdWJsaWMg
dm9pZCBydW4oWCB4LCBATm9uTnVsbCBMaXN0PEBOdWxsYWJsZSBTdHJpbmc+IHMpIFxuIiArIAor
CQkJIgl7XG4iICsgCisJCQkiCQl4LnRlc3Qocyk7XG4iICsgCisJCQkiCX1cbiIgKyAKKwkJCSJ9
XG4iCisJCX0sCisJCW51bGwsICIiKTsKK30KIH0KZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9jbGFzc2Zt
dC9Ob25OdWxsRGVmYXVsdEF3YXJlVHlwZUFubm90YXRpb25XYWxrZXIuamF2YSBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9j
bGFzc2ZtdC9Ob25OdWxsRGVmYXVsdEF3YXJlVHlwZUFubm90YXRpb25XYWxrZXIuamF2YQppbmRl
eCBmZDgxMDViLi45MTFjZDZmIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvY2xhc3NmbXQvTm9uTnVsbERl
ZmF1bHRBd2FyZVR5cGVBbm5vdGF0aW9uV2Fsa2VyLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2NsYXNzZm10
L05vbk51bGxEZWZhdWx0QXdhcmVUeXBlQW5ub3RhdGlvbldhbGtlci5qYXZhCkBAIC0xNiw2ICsx
Niw3IEBAIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuZW52LklCaW5h
cnlFbGVtZW50VmFsdWVQYWlyOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21w
aWxlci5lbnYuSUJpbmFyeVR5cGVBbm5vdGF0aW9uOwogaW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5p
bnRlcm5hbC5jb21waWxlci5sb29rdXAuQmluZGluZzsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQu
aW50ZXJuYWwuY29tcGlsZXIubG9va3VwLkxvb2t1cEVudmlyb25tZW50OworaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5sb29rdXAuVHlwZUlkczsKIAogLyoqCiAgKiBB
IHR5cGUgYW5ub3RhdGlvbiB3YWxrZXIgdGhhdCBhZGRzIG1pc3NpbmcgTm9uTnVsbCBhbm5vdGF0
aW9ucyBhY2NvcmRpbmcgdG8gdGhlIGN1cnJlbnQgZGVmYXVsdC4KQEAgLTI1LDggKzI2LDExIEBA
IHB1YmxpYyBjbGFzcyBOb25OdWxsRGVmYXVsdEF3YXJlVHlwZUFubm90YXRpb25XYWxrZXIgZXh0
ZW5kcyBUeXBlQW5ub3RhdGlvbldhbGtlCiAJcHJpdmF0ZSBpbnQgZGVmYXVsdE51bGxuZXNzOwog
CXByaXZhdGUgYm9vbGVhbiBhdERlZmF1bHRMb2NhdGlvbjsKIAlwcml2YXRlIGJvb2xlYW4gbmV4
dElzRGVmYXVsdExvY2F0aW9uOworCXByaXZhdGUgYm9vbGVhbiBhdFR5cGVCb3VuZDsKKwlwcml2
YXRlIGJvb2xlYW4gbmV4dElzVHlwZUJvdW5kOwogCXByaXZhdGUgYm9vbGVhbiBpc0VtcHR5Owog
CUlCaW5hcnlBbm5vdGF0aW9uIG5vbk51bGxBbm5vdGF0aW9uOworCUxvb2t1cEVudmlyb25tZW50
IGVudmlyb25tZW50OwogCiAJLyoqIENyZWF0ZSBpbml0aWFsIHdhbGtlciB3aXRoIG5vbi1lbXB0
eSB0eXBlIGFubm90YXRpb25zLiAqLwogCXB1YmxpYyBOb25OdWxsRGVmYXVsdEF3YXJlVHlwZUFu
bm90YXRpb25XYWxrZXIoSUJpbmFyeVR5cGVBbm5vdGF0aW9uW10gdHlwZUFubm90YXRpb25zLApA
QCAtMzQsMjkgKzM4LDM2IEBAIHB1YmxpYyBjbGFzcyBOb25OdWxsRGVmYXVsdEF3YXJlVHlwZUFu
bm90YXRpb25XYWxrZXIgZXh0ZW5kcyBUeXBlQW5ub3RhdGlvbldhbGtlCiAJCXN1cGVyKHR5cGVB
bm5vdGF0aW9ucyk7CiAJCXRoaXMubm9uTnVsbEFubm90YXRpb24gPSBnZXROb25OdWxsQW5ub3Rh
dGlvbihlbnZpcm9ubWVudCk7CiAJCXRoaXMuZGVmYXVsdE51bGxuZXNzID0gZGVmYXVsdE51bGxu
ZXNzOworCQl0aGlzLmVudmlyb25tZW50ID0gZW52aXJvbm1lbnQ7CiAJfQogCQogCS8qKiBDcmVh
dGUgYW4gaW5pdGlhbCB3YWxrZXIgd2l0aG91dCAncmVhbCcgdHlwZSBhbm5vdGF0aW9ucywgYnV0
IHdpdGggYSBub25udWxsIGRlZmF1bHQuICovCiAJcHVibGljIE5vbk51bGxEZWZhdWx0QXdhcmVU
eXBlQW5ub3RhdGlvbldhbGtlcihpbnQgZGVmYXVsdE51bGxuZXNzLCBMb29rdXBFbnZpcm9ubWVu
dCBlbnZpcm9ubWVudCkgewotCQl0aGlzKGRlZmF1bHROdWxsbmVzcywgZ2V0Tm9uTnVsbEFubm90
YXRpb24oZW52aXJvbm1lbnQpLCBmYWxzZSk7CisJCXRoaXMoZGVmYXVsdE51bGxuZXNzLCBnZXRO
b25OdWxsQW5ub3RhdGlvbihlbnZpcm9ubWVudCksIGZhbHNlLCBmYWxzZSwgZW52aXJvbm1lbnQp
OwogCX0KIAogCS8qKiBHZXQgcmVzdHJpY3RlZCB3YWxrZXIsIHN0aWxsIHdpdGggbm9uLWVtcHR5
IHR5cGUgYW5ub3RhdGlvbnMuICovCiAJTm9uTnVsbERlZmF1bHRBd2FyZVR5cGVBbm5vdGF0aW9u
V2Fsa2VyKElCaW5hcnlUeXBlQW5ub3RhdGlvbltdIHR5cGVBbm5vdGF0aW9ucywgbG9uZyBuZXdN
YXRjaGVzLCBpbnQgbmV3UGF0aFB0ciwKLQkJCQkJCWludCBkZWZhdWx0TnVsbG5lc3MsIElCaW5h
cnlBbm5vdGF0aW9uIG5vbk51bGxBbm5vdGF0aW9uLCBib29sZWFuIGF0RGVmYXVsdExvY2F0aW9u
KSB7CisJCQkJCQlpbnQgZGVmYXVsdE51bGxuZXNzLCBJQmluYXJ5QW5ub3RhdGlvbiBub25OdWxs
QW5ub3RhdGlvbiwgYm9vbGVhbiBhdERlZmF1bHRMb2NhdGlvbiwgYm9vbGVhbiBhdFR5cGVCb3Vu
ZCwKKwkJCQkJCUxvb2t1cEVudmlyb25tZW50IGVudmlyb25tZW50KSB7CiAJCXN1cGVyKHR5cGVB
bm5vdGF0aW9ucywgbmV3TWF0Y2hlcywgbmV3UGF0aFB0cik7CiAJCXRoaXMuZGVmYXVsdE51bGxu
ZXNzID0gZGVmYXVsdE51bGxuZXNzOwogCQl0aGlzLm5vbk51bGxBbm5vdGF0aW9uID0gbm9uTnVs
bEFubm90YXRpb247CiAJCXRoaXMuYXREZWZhdWx0TG9jYXRpb24gPSBhdERlZmF1bHRMb2NhdGlv
bjsKKwkJdGhpcy5hdFR5cGVCb3VuZCA9IGF0VHlwZUJvdW5kOworCQl0aGlzLmVudmlyb25tZW50
ID0gZW52aXJvbm1lbnQ7CiAJfQogCiAJLyoqIENyZWF0ZSBhIHJlc3RyaWN0ZWQgd2Fsa2VyIHdp
dGhvdXQgJ3JlYWwnIHR5cGUgYW5ub3RhdGlvbnMsIGJ1dCB3aXRoIGEgbm9ubnVsbCBkZWZhdWx0
LiAqLwotCU5vbk51bGxEZWZhdWx0QXdhcmVUeXBlQW5ub3RhdGlvbldhbGtlcihpbnQgZGVmYXVs
dE51bGxuZXNzLCBJQmluYXJ5QW5ub3RhdGlvbiBub25OdWxsQW5ub3RhdGlvbiwgYm9vbGVhbiBh
dERlZmF1bHRMb2NhdGlvbikgeworCU5vbk51bGxEZWZhdWx0QXdhcmVUeXBlQW5ub3RhdGlvbldh
bGtlcihpbnQgZGVmYXVsdE51bGxuZXNzLCBJQmluYXJ5QW5ub3RhdGlvbiBub25OdWxsQW5ub3Rh
dGlvbiwKKwkJCQkJCWJvb2xlYW4gYXREZWZhdWx0TG9jYXRpb24sIGJvb2xlYW4gYXRUeXBlQm91
bmQsIExvb2t1cEVudmlyb25tZW50IGVudmlyb25tZW50KSB7CiAJCXN1cGVyKG51bGwsIDAsIDAp
OwogCQl0aGlzLm5vbk51bGxBbm5vdGF0aW9uID0gbm9uTnVsbEFubm90YXRpb247CiAJCXRoaXMu
ZGVmYXVsdE51bGxuZXNzID0gZGVmYXVsdE51bGxuZXNzOwogCQl0aGlzLmF0RGVmYXVsdExvY2F0
aW9uID0gYXREZWZhdWx0TG9jYXRpb247CisJCXRoaXMuYXRUeXBlQm91bmQgPSBhdFR5cGVCb3Vu
ZDsKIAkJdGhpcy5pc0VtcHR5ID0gdHJ1ZTsKKwkJdGhpcy5lbnZpcm9ubWVudCA9IGVudmlyb25t
ZW50OwogCX0KIAkKIAlwcml2YXRlIHN0YXRpYyBJQmluYXJ5QW5ub3RhdGlvbiBnZXROb25OdWxs
QW5ub3RhdGlvbihMb29rdXBFbnZpcm9ubWVudCBlbnZpcm9ubWVudCkgewpAQCAtNzksMTYgKzkw
LDIwIEBAIHB1YmxpYyBjbGFzcyBOb25OdWxsRGVmYXVsdEF3YXJlVHlwZUFubm90YXRpb25XYWxr
ZXIgZXh0ZW5kcyBUeXBlQW5ub3RhdGlvbldhbGtlCiAJCS8vIGNvbnNpZGVycyBuZXh0SXNEZWZh
dWx0TG9jYXRpb24gYXMgdGhlIG5ldyBhdERlZmF1bHRMb2NhdGlvbgogCQl0cnkgewogCQkJLy8g
ZG8gd2UgaGF2ZSBhbnkgY2hhbmdlIGF0IGFsbD8KLQkJCWlmICh0aGlzLm1hdGNoZXMgPT0gbmV3
TWF0Y2hlcyAmJiB0aGlzLnBhdGhQdHIgPT0gbmV3UGF0aFB0ciAmJiB0aGlzLmF0RGVmYXVsdExv
Y2F0aW9uID09IHRoaXMubmV4dElzRGVmYXVsdExvY2F0aW9uKQorCQkJaWYgKHRoaXMubWF0Y2hl
cyA9PSBuZXdNYXRjaGVzICYmIHRoaXMucGF0aFB0ciA9PSBuZXdQYXRoUHRyCisJCQkJCSYmIHRo
aXMuYXREZWZhdWx0TG9jYXRpb24gPT0gdGhpcy5uZXh0SXNEZWZhdWx0TG9jYXRpb24gJiYgdGhp
cy5hdFR5cGVCb3VuZCA9PSB0aGlzLm5leHRJc1R5cGVCb3VuZCkKIAkJCQlyZXR1cm4gdGhpczsK
IAkJCS8vIGFyZSB3ZSBydW5uaW5nIG91dCBvZiByZWFsIHR5cGUgYW5ub3RhdGlvbnM/CiAJCQlp
ZiAobmV3TWF0Y2hlcyA9PSAwIHx8IHRoaXMudHlwZUFubm90YXRpb25zID09IG51bGwgfHwgdGhp
cy50eXBlQW5ub3RhdGlvbnMubGVuZ3RoID09IDApCi0JCQkJcmV0dXJuIG5ldyBOb25OdWxsRGVm
YXVsdEF3YXJlVHlwZUFubm90YXRpb25XYWxrZXIodGhpcy5kZWZhdWx0TnVsbG5lc3MsIHRoaXMu
bm9uTnVsbEFubm90YXRpb24sIHRoaXMubmV4dElzRGVmYXVsdExvY2F0aW9uKTsKKwkJCQlyZXR1
cm4gbmV3IE5vbk51bGxEZWZhdWx0QXdhcmVUeXBlQW5ub3RhdGlvbldhbGtlcih0aGlzLmRlZmF1
bHROdWxsbmVzcywgdGhpcy5ub25OdWxsQW5ub3RhdGlvbiwgCisJCQkJCQkJCQkJCQl0aGlzLm5l
eHRJc0RlZmF1bHRMb2NhdGlvbiwgdGhpcy5uZXh0SXNUeXBlQm91bmQsIHRoaXMuZW52aXJvbm1l
bnQpOwogCQkJLy8gcHJvY2VlZCBhcyBub3JtYWwsIGJ1dCBwYXNzIG9uIG91ciBzcGVjaWZpYyBm
aWVsZHMsIHRvbzoKIAkJCXJldHVybiBuZXcgTm9uTnVsbERlZmF1bHRBd2FyZVR5cGVBbm5vdGF0
aW9uV2Fsa2VyKHRoaXMudHlwZUFubm90YXRpb25zLCBuZXdNYXRjaGVzLCBuZXdQYXRoUHRyLAot
CQkJCQkJCQkJCQkJCQkJCXRoaXMuZGVmYXVsdE51bGxuZXNzLCB0aGlzLm5vbk51bGxBbm5vdGF0
aW9uLCB0aGlzLm5leHRJc0RlZmF1bHRMb2NhdGlvbik7CisJCQkJCQkJCQkJCQl0aGlzLmRlZmF1
bHROdWxsbmVzcywgdGhpcy5ub25OdWxsQW5ub3RhdGlvbiwgdGhpcy5uZXh0SXNEZWZhdWx0TG9j
YXRpb24sCisJCQkJCQkJCQkJCQl0aGlzLm5leHRJc1R5cGVCb3VuZCwgdGhpcy5lbnZpcm9ubWVu
dCk7CiAJCX0gZmluYWxseSB7CiAJCQl0aGlzLm5leHRJc0RlZmF1bHRMb2NhdGlvbiA9IGZhbHNl
OyAvLyBleHBpcmUKKwkJCXRoaXMubmV4dElzVHlwZUJvdW5kID0gZmFsc2U7CiAJCX0KIAl9CiAJ
CkBAIC0xMDksNiArMTI0LDcgQEAgcHVibGljIGNsYXNzIE5vbk51bGxEZWZhdWx0QXdhcmVUeXBl
QW5ub3RhdGlvbldhbGtlciBleHRlbmRzIFR5cGVBbm5vdGF0aW9uV2Fsa2UKIAlAT3ZlcnJpZGUK
IAlwdWJsaWMgVHlwZUFubm90YXRpb25XYWxrZXIgdG9UeXBlQm91bmQoc2hvcnQgYm91bmRJbmRl
eCkgewogCQl0aGlzLm5leHRJc0RlZmF1bHRMb2NhdGlvbiA9ICh0aGlzLmRlZmF1bHROdWxsbmVz
cyAmIEJpbmRpbmcuRGVmYXVsdExvY2F0aW9uVHlwZUJvdW5kKSAhPSAwOworCQl0aGlzLm5leHRJ
c1R5cGVCb3VuZCA9IHRydWU7CiAJCWlmICh0aGlzLmlzRW1wdHkpIHJldHVybiByZXN0cmljdCh0
aGlzLm1hdGNoZXMsIHRoaXMucGF0aFB0cik7CiAJCXJldHVybiBzdXBlci50b1R5cGVCb3VuZChi
b3VuZEluZGV4KTsKIAl9CkBAIC0xMTYsNiArMTMyLDcgQEAgcHVibGljIGNsYXNzIE5vbk51bGxE
ZWZhdWx0QXdhcmVUeXBlQW5ub3RhdGlvbldhbGtlciBleHRlbmRzIFR5cGVBbm5vdGF0aW9uV2Fs
a2UKIAlAT3ZlcnJpZGUKIAlwdWJsaWMgVHlwZUFubm90YXRpb25XYWxrZXIgdG9UeXBlUGFyYW1l
dGVyQm91bmRzKGJvb2xlYW4gaXNDbGFzc1R5cGVQYXJhbWV0ZXIsIGludCBwYXJhbWV0ZXJSYW5r
KSB7CiAJCXRoaXMubmV4dElzRGVmYXVsdExvY2F0aW9uID0gKHRoaXMuZGVmYXVsdE51bGxuZXNz
ICYgQmluZGluZy5EZWZhdWx0TG9jYXRpb25UeXBlQm91bmQpICE9IDA7CisJCXRoaXMubmV4dElz
VHlwZUJvdW5kID0gdHJ1ZTsKIAkJaWYgKHRoaXMuaXNFbXB0eSkgcmV0dXJuIHJlc3RyaWN0KHRo
aXMubWF0Y2hlcywgdGhpcy5wYXRoUHRyKTsKIAkJcmV0dXJuIHN1cGVyLnRvVHlwZVBhcmFtZXRl
ckJvdW5kcyhpc0NsYXNzVHlwZVBhcmFtZXRlciwgcGFyYW1ldGVyUmFuayk7CiAJfQpAQCAtMTIz
LDYgKzE0MCw3IEBAIHB1YmxpYyBjbGFzcyBOb25OdWxsRGVmYXVsdEF3YXJlVHlwZUFubm90YXRp
b25XYWxrZXIgZXh0ZW5kcyBUeXBlQW5ub3RhdGlvbldhbGtlCiAJQE92ZXJyaWRlCiAJcHVibGlj
IFR5cGVBbm5vdGF0aW9uV2Fsa2VyIHRvVHlwZUFyZ3VtZW50KGludCByYW5rKSB7CiAJCXRoaXMu
bmV4dElzRGVmYXVsdExvY2F0aW9uID0gKHRoaXMuZGVmYXVsdE51bGxuZXNzICYgQmluZGluZy5E
ZWZhdWx0TG9jYXRpb25UeXBlQXJndW1lbnQpICE9IDA7CisJCXRoaXMubmV4dElzVHlwZUJvdW5k
ID0gZmFsc2U7CiAJCWlmICh0aGlzLmlzRW1wdHkpIHJldHVybiByZXN0cmljdCh0aGlzLm1hdGNo
ZXMsIHRoaXMucGF0aFB0cik7CiAJCXJldHVybiBzdXBlci50b1R5cGVBcmd1bWVudChyYW5rKTsK
IAl9CkBAIC0xMzAsMjEgKzE0OCwzMSBAQCBwdWJsaWMgY2xhc3MgTm9uTnVsbERlZmF1bHRBd2Fy
ZVR5cGVBbm5vdGF0aW9uV2Fsa2VyIGV4dGVuZHMgVHlwZUFubm90YXRpb25XYWxrZQogCUBPdmVy
cmlkZQogCXB1YmxpYyBUeXBlQW5ub3RhdGlvbldhbGtlciB0b1R5cGVQYXJhbWV0ZXIoYm9vbGVh
biBpc0NsYXNzVHlwZVBhcmFtZXRlciwgaW50IHJhbmspIHsKIAkJdGhpcy5uZXh0SXNEZWZhdWx0
TG9jYXRpb24gPSAodGhpcy5kZWZhdWx0TnVsbG5lc3MgJiBCaW5kaW5nLkRlZmF1bHRMb2NhdGlv
blR5cGVQYXJhbWV0ZXIpICE9IDA7CisJCXRoaXMubmV4dElzVHlwZUJvdW5kID0gZmFsc2U7CiAJ
CWlmICh0aGlzLmlzRW1wdHkpIHJldHVybiByZXN0cmljdCh0aGlzLm1hdGNoZXMsIHRoaXMucGF0
aFB0cik7CiAJCXJldHVybiBzdXBlci50b1R5cGVQYXJhbWV0ZXIoaXNDbGFzc1R5cGVQYXJhbWV0
ZXIsIHJhbmspOwogCX0KIAogCUBPdmVycmlkZQotCXB1YmxpYyBJQmluYXJ5QW5ub3RhdGlvbltd
IGdldEFubm90YXRpb25zQXRDdXJzb3IoKSB7Ci0JCUlCaW5hcnlBbm5vdGF0aW9uW10gbm9ybWFs
QW5ub3RhdGlvbnMgPSB0aGlzLmlzRW1wdHkgPyBudWxsIDogc3VwZXIuZ2V0QW5ub3RhdGlvbnNB
dEN1cnNvcigpOwotCQlpZiAodGhpcy5hdERlZmF1bHRMb2NhdGlvbikgeworCXB1YmxpYyBJQmlu
YXJ5QW5ub3RhdGlvbltdIGdldEFubm90YXRpb25zQXRDdXJzb3IoaW50IGN1cnJlbnRUeXBlSWQp
IHsKKwkJSUJpbmFyeUFubm90YXRpb25bXSBub3JtYWxBbm5vdGF0aW9ucyA9IHRoaXMuaXNFbXB0
eSA/IG51bGwgOiBzdXBlci5nZXRBbm5vdGF0aW9uc0F0Q3Vyc29yKGN1cnJlbnRUeXBlSWQpOwor
CQlpZiAodGhpcy5hdERlZmF1bHRMb2NhdGlvbiAmJgorCQkJCSEoY3VycmVudFR5cGVJZCA9PSAt
MSkgJiYgLy8gbmV2ZXIgYXBwbHkgZGVmYXVsdCBvbiB0eXBlIHZhcmlhYmxlIHVzZSBvciB3aWxk
Y2FyZAorCQkJCSEodGhpcy5hdFR5cGVCb3VuZCAmJiBjdXJyZW50VHlwZUlkID09IFR5cGVJZHMu
VF9KYXZhTGFuZ09iamVjdCkpIC8vIGZvciBDTElNQi10by10b3AgY29uc2lkZXIgYSBqLmwuT2Jq
ZWN0IHR5cGUgYm91bmQgYXMgbm8gZXhwbGljaXQgdHlwZSBib3VuZAorCQl7CiAJCQlpZiAobm9y
bWFsQW5ub3RhdGlvbnMgPT0gbnVsbCB8fCBub3JtYWxBbm5vdGF0aW9ucy5sZW5ndGggPT0gMCkK
IAkJCQlyZXR1cm4gbmV3IElCaW5hcnlBbm5vdGF0aW9uW10geyB0aGlzLm5vbk51bGxBbm5vdGF0
aW9uIH07Ci0JCQlpbnQgbGVuID0gbm9ybWFsQW5ub3RhdGlvbnMubGVuZ3RoOwotCQkJSUJpbmFy
eUFubm90YXRpb25bXSBuZXdBbm5vdHMgPSBuZXcgSUJpbmFyeUFubm90YXRpb25bbGVuKzFdOwot
CQkJU3lzdGVtLmFycmF5Y29weShub3JtYWxBbm5vdGF0aW9ucywgMCwgbmV3QW5ub3RzLCAwLCBs
ZW4pOwotCQkJbmV3QW5ub3RzW2xlbl0gPSB0aGlzLm5vbk51bGxBbm5vdGF0aW9uOwotCQkJcmV0
dXJuIG5ld0Fubm90czsKKwkJCWlmICh0aGlzLmVudmlyb25tZW50LmNvbnRhaW5zTnVsbFR5cGVB
bm5vdGF0aW9uKG5vcm1hbEFubm90YXRpb25zKSkgeworCQkJCS8vIG5vIGRlZmF1bHQgYW5ub3Rh
dGlvbiBpZiBleHBsaWNpdCBhbm5vdGF0aW9uIGV4aXN0cworCQkJCXJldHVybiBub3JtYWxBbm5v
dGF0aW9uczsKKwkJCX0gZWxzZSB7CisJCQkJLy8gbWVyZ2U6CisJCQkJaW50IGxlbiA9IG5vcm1h
bEFubm90YXRpb25zLmxlbmd0aDsKKwkJCQlJQmluYXJ5QW5ub3RhdGlvbltdIG5ld0Fubm90cyA9
IG5ldyBJQmluYXJ5QW5ub3RhdGlvbltsZW4rMV07CisJCQkJU3lzdGVtLmFycmF5Y29weShub3Jt
YWxBbm5vdGF0aW9ucywgMCwgbmV3QW5ub3RzLCAwLCBsZW4pOworCQkJCW5ld0Fubm90c1tsZW5d
ID0gdGhpcy5ub25OdWxsQW5ub3RhdGlvbjsKKwkJCQlyZXR1cm4gbmV3QW5ub3RzOworCQkJfQog
CQl9CiAJCXJldHVybiBub3JtYWxBbm5vdGF0aW9uczsKIAl9CmRpZmYgLS1naXQgYS9vcmcuZWNs
aXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIv
Y2xhc3NmbXQvVHlwZUFubm90YXRpb25XYWxrZXIuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9jbGFzc2ZtdC9UeXBl
QW5ub3RhdGlvbldhbGtlci5qYXZhCmluZGV4IDlmMTg5YjcuLmQzNmQ1MmEgMTAwNjQ0Ci0tLSBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9jbGFzc2ZtdC9UeXBlQW5ub3RhdGlvbldhbGtlci5qYXZhCisrKyBiL29yZy5lY2xp
cHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9j
bGFzc2ZtdC9UeXBlQW5ub3RhdGlvbldhbGtlci5qYXZhCkBAIC00MSw3ICs0MSw3IEBAIHB1Ymxp
YyBjbGFzcyBUeXBlQW5ub3RhdGlvbldhbGtlciB7CiAJCXB1YmxpYyBUeXBlQW5ub3RhdGlvbldh
bGtlciB0b1R5cGVCb3VuZChzaG9ydCBib3VuZEluZGV4KSB7IHJldHVybiB0aGlzOyB9CiAJCXB1
YmxpYyBUeXBlQW5ub3RhdGlvbldhbGtlciB0b1R5cGVQYXJhbWV0ZXIoYm9vbGVhbiBpc0NsYXNz
VHlwZVBhcmFtZXRlciwgaW50IHJhbmspIHsgcmV0dXJuIHRoaXM7IH0KIAkJcHVibGljIFR5cGVB
bm5vdGF0aW9uV2Fsa2VyIHRvTmV4dERldGFpbChpbnQgZGV0YWlsS2luZCkgeyByZXR1cm4gdGhp
czsgfQotCQlwdWJsaWMgSUJpbmFyeUFubm90YXRpb25bXSBnZXRBbm5vdGF0aW9uc0F0Q3Vyc29y
KCkgeyByZXR1cm4gTk9fQU5OT1RBVElPTlM7IH0KKwkJcHVibGljIElCaW5hcnlBbm5vdGF0aW9u
W10gZ2V0QW5ub3RhdGlvbnNBdEN1cnNvcihpbnQgY3VycmVudFR5cGVJZCkgeyByZXR1cm4gTk9f
QU5OT1RBVElPTlM7IH0KIAl9OwogCQogCWZpbmFsIHByb3RlY3RlZCBJQmluYXJ5VHlwZUFubm90
YXRpb25bXSB0eXBlQW5ub3RhdGlvbnM7CS8vIHRoZSBhY3R1YWwgbWF0ZXJpYWwgd2UncmUgbWFu
YWdpbmcgaGVyZQpAQCAtMjk3LDggKzI5NywxMCBAQCBwdWJsaWMgY2xhc3MgVHlwZUFubm90YXRp
b25XYWxrZXIgewogCS8qKgogCSAqIFJldHJpZXZlIHRoZSB0eXBlIGFubm90YXRpb25zIGF0IHRo
ZSBjdXJyZW50IHBvc2l0aW9uCiAJICogcmVhY2hlZCBieSBpbnZvY2F0aW9ucyBvZiB0b1hZWigp
IG1ldGhvZHMuCisJICogQHBhcmFtIGN1cnJlbnRUeXBlSWQgdGhlIGlkIG9mIHRoZSB0eXBlIGJl
aW5nIGFubm90YXRlZDsgMCBzaWduYWxzIGRvbid0IGNhcmUgLyB1bmtub3duOworCSAqIAkJIC0x
IHNpZ25hbHMgaWYgYW5ub3RhdGluZyBhIHdpbGRjYXJkIG9yIGEgdXNlIG9mIGEgdHlwZSB2YXJp
YWJsZS4KIAkgKi8KLQlwdWJsaWMgSUJpbmFyeUFubm90YXRpb25bXSBnZXRBbm5vdGF0aW9uc0F0
Q3Vyc29yKCkgeworCXB1YmxpYyBJQmluYXJ5QW5ub3RhdGlvbltdIGdldEFubm90YXRpb25zQXRD
dXJzb3IoaW50IGN1cnJlbnRUeXBlSWQpIHsKIAkJaW50IGxlbmd0aCA9IHRoaXMudHlwZUFubm90
YXRpb25zLmxlbmd0aDsKIAkJSUJpbmFyeUFubm90YXRpb25bXSBmaWx0ZXJlZCA9IG5ldyBJQmlu
YXJ5QW5ub3RhdGlvbltsZW5ndGhdOwogCQlsb25nIHB0ciA9IDE7CmRpZmYgLS1naXQgYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvbG9va3VwL0JpbmFyeVR5cGVCaW5kaW5nLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9j
b21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvbG9va3VwL0JpbmFyeVR5
cGVCaW5kaW5nLmphdmEKaW5kZXggMDQ5ZDI0OC4uZDgyM2VlYSAxMDA2NDQKLS0tIGEvb3JnLmVj
bGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVy
L2xvb2t1cC9CaW5hcnlUeXBlQmluZGluZy5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3Jl
L2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvQmluYXJ5
VHlwZUJpbmRpbmcuamF2YQpAQCAtMjcsNiArMjcsOCBAQAogICoJCQkJCQkJCUJ1ZyA0Mjk5NTgg
LSBbMS44XVtudWxsXSBldmFsdWF0ZSBuZXcgRGVmYXVsdExvY2F0aW9uIGF0dHJpYnV0ZSBvZiBA
Tm9uTnVsbEJ5RGVmYXVsdAogICoJCQkJCQkJCUJ1ZyAzOTA4ODkgLSBbMS44XVtjb21waWxlcl0g
RXZhbHVhdGUgb3B0aW9ucyB0byBzdXBwb3J0IDEuNy0gcHJvamVjdHMgYWdhaW5zdCAxLjggSlJF
LgogICoJCQkJCQkJCUJ1ZyA0Mzg0NTggLSBbMS44XVtudWxsXSBjbGVhbiB1cCBoYW5kbGluZyBv
ZiBudWxsIHR5cGUgYW5ub3RhdGlvbnMgd3J0IHR5cGUgdmFyaWFibGVzCisgKgkJCQkJCQkJQnVn
IDQzOTUxNiAtIFsxLjhdW251bGxdIE5vbk51bGxCeURlZmF1bHQgd3JvbmdseSBhcHBsaWVkIHRv
IGltcGxpY2l0IHR5cGUgYm91bmQgb2YgYmluYXJ5IHR5cGUKKyAqCQkJCQkJCQlCdWcgNDUzNDc1
IC0gWzEuOF1bbnVsbF0gQ29udHJhZGljdG9yeSBudWxsIGFubm90YXRpb25zICg0LjUgTTMgZWRp
dGlvbikKICAqICAgIEplc3BlciBTdGVlbiBNb2xsZXIgLSBDb250cmlidXRpb25zIGZvcgogICoJ
CQkJCQkJCUJ1ZyA0MTIxNTAgWzEuOF0gW2NvbXBpbGVyXSBFbmFibGUgcmVmbGVjdGVkIHBhcmFt
ZXRlciBuYW1lcyBkdXJpbmcgYW5ub3RhdGlvbiBwcm9jZXNzaW5nCiAgKgkJCQkJCQkJQnVnIDQx
MjE1MyAtIFsxLjhdW2NvbXBpbGVyXSBDaGVjayB2YWxpZGl0eSBvZiBhbm5vdGF0aW9ucyB3aGlj
aCBtYXkgYmUgcmVwZWF0YWJsZQpAQCAtNzQ0LDcgKzc0Niw3IEBAIHByaXZhdGUgTWV0aG9kQmlu
ZGluZyBjcmVhdGVNZXRob2QoSUJpbmFyeU1ldGhvZCBtZXRob2QsIGxvbmcgc291cmNlTGV2ZWws
IGNoYXJbCiAJCT8gbmV3IE1ldGhvZEJpbmRpbmcobWV0aG9kTW9kaWZpZXJzLCBwYXJhbWV0ZXJz
LCBleGNlcHRpb25zLCB0aGlzKQogCQk6IG5ldyBNZXRob2RCaW5kaW5nKG1ldGhvZE1vZGlmaWVy
cywgbWV0aG9kLmdldFNlbGVjdG9yKCksIHJldHVyblR5cGUsIHBhcmFtZXRlcnMsIGV4Y2VwdGlv
bnMsIHRoaXMpOwogCQotCUlCaW5hcnlBbm5vdGF0aW9uW10gcmVjZWl2ZXJBbm5vdGF0aW9ucyA9
IHdhbGtlci50b1JlY2VpdmVyKCkuZ2V0QW5ub3RhdGlvbnNBdEN1cnNvcigpOworCUlCaW5hcnlB
bm5vdGF0aW9uW10gcmVjZWl2ZXJBbm5vdGF0aW9ucyA9IHdhbGtlci50b1JlY2VpdmVyKCkuZ2V0
QW5ub3RhdGlvbnNBdEN1cnNvcih0aGlzLmlkKTsKIAlpZiAocmVjZWl2ZXJBbm5vdGF0aW9ucyAh
PSBudWxsICYmIHJlY2VpdmVyQW5ub3RhdGlvbnMubGVuZ3RoID4gMCkgewogCQlyZXN1bHQucmVj
ZWl2ZXIgPSB0aGlzLmVudmlyb25tZW50LmNyZWF0ZUFubm90YXRlZFR5cGUodGhpcywgY3JlYXRl
QW5ub3RhdGlvbnMocmVjZWl2ZXJBbm5vdGF0aW9ucywgdGhpcy5lbnZpcm9ubWVudCwgbWlzc2lu
Z1R5cGVOYW1lcykpOwogCX0KQEAgLTc1Myw3ICs3NTUsNyBAQCBwcml2YXRlIE1ldGhvZEJpbmRp
bmcgY3JlYXRlTWV0aG9kKElCaW5hcnlNZXRob2QgbWV0aG9kLCBsb25nIHNvdXJjZUxldmVsLCBj
aGFyWwogCQlJQmluYXJ5QW5ub3RhdGlvbltdIGFubm90YXRpb25zID0gbWV0aG9kLmdldEFubm90
YXRpb25zKCk7CiAJICAgIGlmIChhbm5vdGF0aW9ucyA9PSBudWxsIHx8IGFubm90YXRpb25zLmxl
bmd0aCA9PSAwKQogCSAgICAJaWYgKG1ldGhvZC5pc0NvbnN0cnVjdG9yKCkpCi0JICAgIAkJYW5u
b3RhdGlvbnMgPSB3YWxrZXIudG9NZXRob2RSZXR1cm4oKS5nZXRBbm5vdGF0aW9uc0F0Q3Vyc29y
KCk7IC8vIEZJWE1FOiBXaGVuIGJvdGggZXhpc3QsIG9yZGVyIGNvdWxkIGJlY29tZSBhbiBpc3N1
ZS4KKwkgICAgCQlhbm5vdGF0aW9ucyA9IHdhbGtlci50b01ldGhvZFJldHVybigpLmdldEFubm90
YXRpb25zQXRDdXJzb3IodGhpcy5pZCk7IC8vIEZJWE1FOiBXaGVuIGJvdGggZXhpc3QsIG9yZGVy
IGNvdWxkIGJlY29tZSBhbiBpc3N1ZS4KIAkJcmVzdWx0LnNldEFubm90YXRpb25zKAogCQkJY3Jl
YXRlQW5ub3RhdGlvbnMoYW5ub3RhdGlvbnMsIHRoaXMuZW52aXJvbm1lbnQsIG1pc3NpbmdUeXBl
TmFtZXMpLAogCQkJcGFyYW1Bbm5vdGF0aW9ucywKQEAgLTg2NSw3ICs4NjcsNyBAQCBwcml2YXRl
IFR5cGVWYXJpYWJsZUJpbmRpbmdbXSBjcmVhdGVUeXBlVmFyaWFibGVzKFNpZ25hdHVyZVdyYXBw
ZXIgd3JhcHBlciwgYm9vbAogCQkJCQkJaW50IGNvbG9uID0gQ2hhck9wZXJhdGlvbi5pbmRleE9m
KFV0aWwuQ19DT0xPTiwgdHlwZVNpZ25hdHVyZSwgaSk7CiAJCQkJCQljaGFyW10gdmFyaWFibGVO
YW1lID0gQ2hhck9wZXJhdGlvbi5zdWJhcnJheSh0eXBlU2lnbmF0dXJlLCBpLCBjb2xvbik7CiAJ
CQkJCQlUeXBlVmFyaWFibGVCaW5kaW5nIHR5cGVWYXJpYWJsZSA9IG5ldyBUeXBlVmFyaWFibGVC
aW5kaW5nKHZhcmlhYmxlTmFtZSwgdGhpcywgcmFuaywgdGhpcy5lbnZpcm9ubWVudCk7Ci0JCQkJ
CQlBbm5vdGF0aW9uQmluZGluZyBbXSBhbm5vdGF0aW9ucyA9IEJpbmFyeVR5cGVCaW5kaW5nLmNy
ZWF0ZUFubm90YXRpb25zKHdhbGtlci50b1R5cGVQYXJhbWV0ZXIoaXNDbGFzc1R5cGVQYXJhbWV0
ZXIsIHJhbmsrKykuZ2V0QW5ub3RhdGlvbnNBdEN1cnNvcigpLCAKKwkJCQkJCUFubm90YXRpb25C
aW5kaW5nIFtdIGFubm90YXRpb25zID0gQmluYXJ5VHlwZUJpbmRpbmcuY3JlYXRlQW5ub3RhdGlv
bnMod2Fsa2VyLnRvVHlwZVBhcmFtZXRlcihpc0NsYXNzVHlwZVBhcmFtZXRlciwgcmFuaysrKS5n
ZXRBbm5vdGF0aW9uc0F0Q3Vyc29yKDApLCAKIAkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJCQkJdGhp
cy5lbnZpcm9ubWVudCwgbWlzc2luZ1R5cGVOYW1lcyk7CiAJCQkJCQlpZiAoYW5ub3RhdGlvbnMg
IT0gbnVsbCAmJiBhbm5vdGF0aW9ucyAhPSBCaW5kaW5nLk5PX0FOTk9UQVRJT05TKQogCQkJCQkJ
CXR5cGVWYXJpYWJsZS5zZXRUeXBlQW5ub3RhdGlvbnMoYW5ub3RhdGlvbnMsIHRoaXMuZW52aXJv
bm1lbnQuZ2xvYmFsT3B0aW9ucy5pc0Fubm90YXRpb25CYXNlZE51bGxBbmFseXNpc0VuYWJsZWQp
OwpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2xvb2t1cC9Mb29rdXBFbnZpcm9ubWVudC5qYXZhIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2xvb2t1cC9Mb29rdXBFbnZpcm9ubWVudC5qYXZhCmluZGV4IGEyNDIwMDAuLjEzMjRhNDUg
MTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pk
dC9pbnRlcm5hbC9jb21waWxlci9sb29rdXAvTG9va3VwRW52aXJvbm1lbnQuamF2YQorKysgYi9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvbG9va3VwL0xvb2t1cEVudmlyb25tZW50LmphdmEKQEAgLTI1LDYgKzI1LDggQEAKICAq
CQkJCQkJCQlCdWcgNDE2MTkwIC0gWzEuOF1bbnVsbF0gZGV0ZWN0IGluY29tcGF0aWJsZSBvdmVy
cmlkZXMgZHVlIHRvIG51bGwgdHlwZSBhbm5vdGF0aW9ucwogICoJCQkJCQkJCUJ1ZyA0MjQ2MjQg
LSBbMS44XVtudWxsXSBpZiBhIHN0YXRpYy1vYmplY3Qgd2l0aCBhbm5vdGF0aW9uIEBOb25OdWxs
IGlzIHVzZWQsIGEgd2FybmluZyBpcyBzaG93bgogICoJCQkJCQkJCUJ1ZyA0Mzg0NTggLSBbMS44
XVtudWxsXSBjbGVhbiB1cCBoYW5kbGluZyBvZiBudWxsIHR5cGUgYW5ub3RhdGlvbnMgd3J0IHR5
cGUgdmFyaWFibGVzCisgKgkJCQkJCQkJQnVnIDQzOTUxNiAtIFsxLjhdW251bGxdIE5vbk51bGxC
eURlZmF1bHQgd3JvbmdseSBhcHBsaWVkIHRvIGltcGxpY2l0IHR5cGUgYm91bmQgb2YgYmluYXJ5
IHR5cGUKKyAqCQkJCQkJCQlCdWcgNDUzNDc1IC0gWzEuOF1bbnVsbF0gQ29udHJhZGljdG9yeSBu
dWxsIGFubm90YXRpb25zICg0LjUgTTMgZWRpdGlvbikKICAqKioqKioqKioqKioqKioqKioqKioq
KioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioq
LwogcGFja2FnZSBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIubG9va3VwOwogCkBA
IC0xMjU3LDcgKzEyNTksNyBAQCBUeXBlQmluZGluZyBnZXRUeXBlRnJvbVNpZ25hdHVyZShjaGFy
W10gc2lnbmF0dXJlLCBpbnQgc3RhcnQsIGludCBlbmQsIGJvb2xlYW4gaQogCUFubm90YXRpb25C
aW5kaW5nIFtdW10gYW5ub3RhdGlvbnNPbkRpbWVuc2lvbnMgPSBudWxsOwogCWlmIChkaW1lbnNp
b24gPiAwICYmIHdhbGtlciAhPSBUeXBlQW5ub3RhdGlvbldhbGtlci5FTVBUWV9BTk5PVEFUSU9O
X1dBTEtFUikgewogCQlmb3IgKGludCBpID0gMDsgaSA8IGRpbWVuc2lvbjsgaSsrKSB7Ci0JCQlB
bm5vdGF0aW9uQmluZGluZyBbXSBhbm5vdGF0aW9ucyA9IEJpbmFyeVR5cGVCaW5kaW5nLmNyZWF0
ZUFubm90YXRpb25zKHdhbGtlci5nZXRBbm5vdGF0aW9uc0F0Q3Vyc29yKCksIHRoaXMsIG1pc3Np
bmdUeXBlTmFtZXMpOworCQkJQW5ub3RhdGlvbkJpbmRpbmcgW10gYW5ub3RhdGlvbnMgPSBCaW5h
cnlUeXBlQmluZGluZy5jcmVhdGVBbm5vdGF0aW9ucyh3YWxrZXIuZ2V0QW5ub3RhdGlvbnNBdEN1
cnNvcigwKSwgdGhpcywgbWlzc2luZ1R5cGVOYW1lcyk7CiAJCQlpZiAoYW5ub3RhdGlvbnMgIT0g
QmluZGluZy5OT19BTk5PVEFUSU9OUykgeyAKIAkJCQlpZiAoYW5ub3RhdGlvbnNPbkRpbWVuc2lv
bnMgPT0gbnVsbCkKIAkJCQkJYW5ub3RhdGlvbnNPbkRpbWVuc2lvbnMgPSBuZXcgQW5ub3RhdGlv
bkJpbmRpbmdbZGltZW5zaW9uXVtdOwpAQCAtMTM0Miw3ICsxMzQ0LDcgQEAgcHJpdmF0ZSBUeXBl
QmluZGluZyBhbm5vdGF0ZVR5cGUoVHlwZUJpbmRpbmcgYmluZGluZywgVHlwZUFubm90YXRpb25X
YWxrZXIgd2Fsa2UKIAl9CiAJQW5ub3RhdGlvbkJpbmRpbmcgW11bXSBhbm5vdGF0aW9ucyA9IG51
bGw7CiAJZm9yIChpbnQgaSA9IDA7IGkgPCBkZXB0aDsgaSsrKSB7Ci0JCUFubm90YXRpb25CaW5k
aW5nW10gYW5ub3RzID0gQmluYXJ5VHlwZUJpbmRpbmcuY3JlYXRlQW5ub3RhdGlvbnMod2Fsa2Vy
LmdldEFubm90YXRpb25zQXRDdXJzb3IoKSwgdGhpcywgbWlzc2luZ1R5cGVOYW1lcyk7CisJCUFu
bm90YXRpb25CaW5kaW5nW10gYW5ub3RzID0gQmluYXJ5VHlwZUJpbmRpbmcuY3JlYXRlQW5ub3Rh
dGlvbnMod2Fsa2VyLmdldEFubm90YXRpb25zQXRDdXJzb3IoYmluZGluZy5pZCksIHRoaXMsIG1p
c3NpbmdUeXBlTmFtZXMpOwogCQlpZiAoYW5ub3RzICE9IG51bGwgJiYgYW5ub3RzLmxlbmd0aCA+
IDApIHsKIAkJCWlmIChhbm5vdGF0aW9ucyA9PSBudWxsKQogCQkJCWFubm90YXRpb25zID0gbmV3
IEFubm90YXRpb25CaW5kaW5nW2RlcHRoXVtdOwpAQCAtMTM4Nyw3ICsxMzg5LDcgQEAgcHVibGlj
IFR5cGVCaW5kaW5nIGdldFR5cGVGcm9tVHlwZVNpZ25hdHVyZShTaWduYXR1cmVXcmFwcGVyIHdy
YXBwZXIsIFR5cGVWYXJpYWIKIAlBbm5vdGF0aW9uQmluZGluZyBbXVtdIGFubm90YXRpb25zT25E
aW1lbnNpb25zID0gbnVsbDsKIAlpZiAoZGltZW5zaW9uID4gMCAmJiB3YWxrZXIgIT0gVHlwZUFu
bm90YXRpb25XYWxrZXIuRU1QVFlfQU5OT1RBVElPTl9XQUxLRVIpIHsKIAkJZm9yIChpbnQgaSA9
IDA7IGkgPCBkaW1lbnNpb247IGkrKykgewotCQkJQW5ub3RhdGlvbkJpbmRpbmcgW10gYW5ub3Rh
dGlvbnMgPSBCaW5hcnlUeXBlQmluZGluZy5jcmVhdGVBbm5vdGF0aW9ucyh3YWxrZXIuZ2V0QW5u
b3RhdGlvbnNBdEN1cnNvcigpLCB0aGlzLCBtaXNzaW5nVHlwZU5hbWVzKTsKKwkJCUFubm90YXRp
b25CaW5kaW5nIFtdIGFubm90YXRpb25zID0gQmluYXJ5VHlwZUJpbmRpbmcuY3JlYXRlQW5ub3Rh
dGlvbnMod2Fsa2VyLmdldEFubm90YXRpb25zQXRDdXJzb3IoMCksIHRoaXMsIG1pc3NpbmdUeXBl
TmFtZXMpOwogCQkJaWYgKGFubm90YXRpb25zICE9IEJpbmRpbmcuTk9fQU5OT1RBVElPTlMpIHsg
CiAJCQkJaWYgKGFubm90YXRpb25zT25EaW1lbnNpb25zID09IG51bGwpCiAJCQkJCWFubm90YXRp
b25zT25EaW1lbnNpb25zID0gbmV3IEFubm90YXRpb25CaW5kaW5nW2RpbWVuc2lvbl1bXTsKQEAg
LTE0MzIsNyArMTQzNCw3IEBAIHB1YmxpYyBUeXBlQmluZGluZyBnZXRUeXBlRnJvbVR5cGVTaWdu
YXR1cmUoU2lnbmF0dXJlV3JhcHBlciB3cmFwcGVyLCBUeXBlVmFyaWFiCiAJaWYgKGFjdHVhbEVu
Y2xvc2luZyAhPSBudWxsKSB7IC8vIGNvbnZlcnQgbmVlZGVkIGlmIHJlYWQgc29tZSBzdGF0aWMg
bWVtYmVyIHR5cGUKIAkJYWN0dWFsRW5jbG9zaW5nID0gKFJlZmVyZW5jZUJpbmRpbmcpIGNvbnZl
cnRUb1Jhd1R5cGUoYWN0dWFsRW5jbG9zaW5nLCBmYWxzZSAvKmRvIG5vdCBmb3JjZSBjb252ZXJz
aW9uIG9mIGVuY2xvc2luZyB0eXBlcyovKTsKIAl9Ci0JQW5ub3RhdGlvbkJpbmRpbmcgW10gYW5u
b3RhdGlvbnMgPSBCaW5hcnlUeXBlQmluZGluZy5jcmVhdGVBbm5vdGF0aW9ucyh3YWxrZXIuZ2V0
QW5ub3RhdGlvbnNBdEN1cnNvcigpLCB0aGlzLCBtaXNzaW5nVHlwZU5hbWVzKTsKKwlBbm5vdGF0
aW9uQmluZGluZyBbXSBhbm5vdGF0aW9ucyA9IEJpbmFyeVR5cGVCaW5kaW5nLmNyZWF0ZUFubm90
YXRpb25zKHdhbGtlci5nZXRBbm5vdGF0aW9uc0F0Q3Vyc29yKGFjdHVhbFR5cGUuaWQpLCB0aGlz
LCBtaXNzaW5nVHlwZU5hbWVzKTsKIAlUeXBlQmluZGluZ1tdIHR5cGVBcmd1bWVudHMgPSBnZXRU
eXBlQXJndW1lbnRzRnJvbVNpZ25hdHVyZSh3cmFwcGVyLCBzdGF0aWNWYXJpYWJsZXMsIGVuY2xv
c2luZ1R5cGUsIGFjdHVhbFR5cGUsIG1pc3NpbmdUeXBlTmFtZXMsIHdhbGtlcik7CiAJUGFyYW1l
dGVyaXplZFR5cGVCaW5kaW5nIHBhcmFtZXRlcml6ZWRUeXBlID0gY3JlYXRlUGFyYW1ldGVyaXpl
ZFR5cGUoYWN0dWFsVHlwZSwgdHlwZUFyZ3VtZW50cywgYWN0dWFsRW5jbG9zaW5nLCBhbm5vdGF0
aW9ucyk7CiAKQEAgLTE0NDYsNyArMTQ0OCw3IEBAIHB1YmxpYyBUeXBlQmluZGluZyBnZXRUeXBl
RnJvbVR5cGVTaWduYXR1cmUoU2lnbmF0dXJlV3JhcHBlciB3cmFwcGVyLCBUeXBlVmFyaWFiCiAJ
CWlmIChtZW1iZXJUeXBlID09IG51bGwpCiAJCQl0aGlzLnByb2JsZW1SZXBvcnRlci5jb3JydXB0
ZWRTaWduYXR1cmUocGFyYW1ldGVyaXplZFR5cGUsIHdyYXBwZXIuc2lnbmF0dXJlLCBtZW1iZXJT
dGFydCk7IC8vIGFib3J0cwogCQl3YWxrZXIgPSB3YWxrZXIudG9OZXh0TmVzdGVkVHlwZSgpOwot
CQlhbm5vdGF0aW9ucyA9IEJpbmFyeVR5cGVCaW5kaW5nLmNyZWF0ZUFubm90YXRpb25zKHdhbGtl
ci5nZXRBbm5vdGF0aW9uc0F0Q3Vyc29yKCksIHRoaXMsIG1pc3NpbmdUeXBlTmFtZXMpOworCQlh
bm5vdGF0aW9ucyA9IEJpbmFyeVR5cGVCaW5kaW5nLmNyZWF0ZUFubm90YXRpb25zKHdhbGtlci5n
ZXRBbm5vdGF0aW9uc0F0Q3Vyc29yKG1lbWJlclR5cGUuaWQpLCB0aGlzLCBtaXNzaW5nVHlwZU5h
bWVzKTsKIAkJaWYgKHdyYXBwZXIuc2lnbmF0dXJlW3dyYXBwZXIuc3RhcnRdID09ICc8Jykgewog
CQkJd3JhcHBlci5zdGFydCsrOyAvLyBza2lwICc8JwogCQkJdHlwZUFyZ3VtZW50cyA9IGdldFR5
cGVBcmd1bWVudHNGcm9tU2lnbmF0dXJlKHdyYXBwZXIsIHN0YXRpY1ZhcmlhYmxlcywgZW5jbG9z
aW5nVHlwZSwgbWVtYmVyVHlwZSwgbWlzc2luZ1R5cGVOYW1lcywgd2Fsa2VyKTsKQEAgLTE0NjAs
NyArMTQ2Miw3IEBAIHB1YmxpYyBUeXBlQmluZGluZyBnZXRUeXBlRnJvbVR5cGVTaWduYXR1cmUo
U2lnbmF0dXJlV3JhcHBlciB3cmFwcGVyLCBUeXBlVmFyaWFiCiB9CiAKIHByaXZhdGUgVHlwZUJp
bmRpbmcgZ2V0VHlwZUZyb21UeXBlVmFyaWFibGUoVHlwZVZhcmlhYmxlQmluZGluZyB0eXBlVmFy
aWFibGVCaW5kaW5nLCBpbnQgZGltZW5zaW9uLCBBbm5vdGF0aW9uQmluZGluZyBbXVtdIGFubm90
YXRpb25zT25EaW1lbnNpb25zLCBUeXBlQW5ub3RhdGlvbldhbGtlciB3YWxrZXIsIGNoYXIgW11b
XVtdIG1pc3NpbmdUeXBlTmFtZXMpIHsKLQlBbm5vdGF0aW9uQmluZGluZyBbXSBhbm5vdGF0aW9u
cyA9IEJpbmFyeVR5cGVCaW5kaW5nLmNyZWF0ZUFubm90YXRpb25zKHdhbGtlci5nZXRBbm5vdGF0
aW9uc0F0Q3Vyc29yKCksIHRoaXMsIG1pc3NpbmdUeXBlTmFtZXMpOworCUFubm90YXRpb25CaW5k
aW5nIFtdIGFubm90YXRpb25zID0gQmluYXJ5VHlwZUJpbmRpbmcuY3JlYXRlQW5ub3RhdGlvbnMo
d2Fsa2VyLmdldEFubm90YXRpb25zQXRDdXJzb3IoLTEpLCB0aGlzLCBtaXNzaW5nVHlwZU5hbWVz
KTsKIAlpZiAoYW5ub3RhdGlvbnMgIT0gbnVsbCAmJiBhbm5vdGF0aW9ucyAhPSBCaW5kaW5nLk5P
X0FOTk9UQVRJT05TKQogCQl0eXBlVmFyaWFibGVCaW5kaW5nID0gKFR5cGVWYXJpYWJsZUJpbmRp
bmcpIGNyZWF0ZUFubm90YXRlZFR5cGUodHlwZVZhcmlhYmxlQmluZGluZywgbmV3IEFubm90YXRp
b25CaW5kaW5nIFtdW10geyBhbm5vdGF0aW9ucyB9KTsKIApAQCAtMTQ4NywxOCArMTQ4OSwxOCBA
QCBUeXBlQmluZGluZyBnZXRUeXBlRnJvbVZhcmlhbnRUeXBlU2lnbmF0dXJlKAogCQkJLy8gPyBz
dXBlciBhVHlwZQogCQkJd3JhcHBlci5zdGFydCsrOwogCQkJVHlwZUJpbmRpbmcgYm91bmQgPSBn
ZXRUeXBlRnJvbVR5cGVTaWduYXR1cmUod3JhcHBlciwgc3RhdGljVmFyaWFibGVzLCBlbmNsb3Np
bmdUeXBlLCBtaXNzaW5nVHlwZU5hbWVzLCB3YWxrZXIudG9XaWxkY2FyZEJvdW5kKCkpOwotCQkJ
QW5ub3RhdGlvbkJpbmRpbmcgW10gYW5ub3RhdGlvbnMgPSBCaW5hcnlUeXBlQmluZGluZy5jcmVh
dGVBbm5vdGF0aW9ucyh3YWxrZXIuZ2V0QW5ub3RhdGlvbnNBdEN1cnNvcigpLCB0aGlzLCBtaXNz
aW5nVHlwZU5hbWVzKTsKKwkJCUFubm90YXRpb25CaW5kaW5nIFtdIGFubm90YXRpb25zID0gQmlu
YXJ5VHlwZUJpbmRpbmcuY3JlYXRlQW5ub3RhdGlvbnMod2Fsa2VyLmdldEFubm90YXRpb25zQXRD
dXJzb3IoLTEpLCB0aGlzLCBtaXNzaW5nVHlwZU5hbWVzKTsKIAkJCXJldHVybiB0aGlzLnR5cGVT
eXN0ZW0uZ2V0V2lsZGNhcmQoZ2VuZXJpY1R5cGUsIHJhbmssIGJvdW5kLCBudWxsIC8qbm8gZXh0
cmEgYm91bmQqLywgV2lsZGNhcmQuU1VQRVIsIGFubm90YXRpb25zKTsKIAkJY2FzZSAnKycgOgog
CQkJLy8gPyBleHRlbmRzIGFUeXBlCiAJCQl3cmFwcGVyLnN0YXJ0Kys7CiAJCQlib3VuZCA9IGdl
dFR5cGVGcm9tVHlwZVNpZ25hdHVyZSh3cmFwcGVyLCBzdGF0aWNWYXJpYWJsZXMsIGVuY2xvc2lu
Z1R5cGUsIG1pc3NpbmdUeXBlTmFtZXMsIHdhbGtlci50b1dpbGRjYXJkQm91bmQoKSk7Ci0JCQlh
bm5vdGF0aW9ucyA9IEJpbmFyeVR5cGVCaW5kaW5nLmNyZWF0ZUFubm90YXRpb25zKHdhbGtlci5n
ZXRBbm5vdGF0aW9uc0F0Q3Vyc29yKCksIHRoaXMsIG1pc3NpbmdUeXBlTmFtZXMpOworCQkJYW5u
b3RhdGlvbnMgPSBCaW5hcnlUeXBlQmluZGluZy5jcmVhdGVBbm5vdGF0aW9ucyh3YWxrZXIuZ2V0
QW5ub3RhdGlvbnNBdEN1cnNvcigtMSksIHRoaXMsIG1pc3NpbmdUeXBlTmFtZXMpOwogCQkJcmV0
dXJuIHRoaXMudHlwZVN5c3RlbS5nZXRXaWxkY2FyZChnZW5lcmljVHlwZSwgcmFuaywgYm91bmQs
IG51bGwgLypubyBleHRyYSBib3VuZCovLCBXaWxkY2FyZC5FWFRFTkRTLCBhbm5vdGF0aW9ucyk7
CiAJCWNhc2UgJyonIDoKIAkJCS8vID8KIAkJCXdyYXBwZXIuc3RhcnQrKzsKLQkJCWFubm90YXRp
b25zID0gQmluYXJ5VHlwZUJpbmRpbmcuY3JlYXRlQW5ub3RhdGlvbnMod2Fsa2VyLmdldEFubm90
YXRpb25zQXRDdXJzb3IoKSwgdGhpcywgbWlzc2luZ1R5cGVOYW1lcyk7CisJCQlhbm5vdGF0aW9u
cyA9IEJpbmFyeVR5cGVCaW5kaW5nLmNyZWF0ZUFubm90YXRpb25zKHdhbGtlci5nZXRBbm5vdGF0
aW9uc0F0Q3Vyc29yKC0xKSwgdGhpcywgbWlzc2luZ1R5cGVOYW1lcyk7CiAJCQlyZXR1cm4gdGhp
cy50eXBlU3lzdGVtLmdldFdpbGRjYXJkKGdlbmVyaWNUeXBlLCByYW5rLCBudWxsLCBudWxsIC8q
bm8gZXh0cmEgYm91bmQqLywgV2lsZGNhcmQuVU5CT1VORCwgYW5ub3RhdGlvbnMpOwogCQlkZWZh
dWx0IDoKIAkJCXJldHVybiBnZXRUeXBlRnJvbVR5cGVTaWduYXR1cmUod3JhcHBlciwgc3RhdGlj
VmFyaWFibGVzLCBlbmNsb3NpbmdUeXBlLCBtaXNzaW5nVHlwZU5hbWVzLCB3YWxrZXIpOwpAQCAt
MTYyOCw0ICsxNjMwLDIxIEBAIHB1YmxpYyBBbm5vdGF0aW9uQmluZGluZ1tdIGZpbHRlck51bGxU
eXBlQW5ub3RhdGlvbnMoQW5ub3RhdGlvbkJpbmRpbmdbXSB0eXBlQW5uCiAJU3lzdGVtLmFycmF5
Y29weShmaWx0ZXJlZCwgMCwgZmlsdGVyZWQgPSBuZXcgQW5ub3RhdGlvbkJpbmRpbmdbY291bnRd
LCAwLCBjb3VudCk7CiAJcmV0dXJuIGZpbHRlcmVkOwogfQorCitwdWJsaWMgYm9vbGVhbiBjb250
YWluc051bGxUeXBlQW5ub3RhdGlvbihJQmluYXJ5QW5ub3RhdGlvbltdIHR5cGVBbm5vdGF0aW9u
cykgeworCWlmICh0eXBlQW5ub3RhdGlvbnMubGVuZ3RoID09IDApCisJCXJldHVybiBmYWxzZTsK
KwljaGFyW11bXSBub25OdWxsQW5ub3RhdGlvbk5hbWUgPSB0aGlzLmdldE5vbk51bGxBbm5vdGF0
aW9uTmFtZSgpOworCWNoYXJbXVtdIG51bGxhYmxlQW5ub3RhdGlvbk5hbWUgPSB0aGlzLmdldE51
bGxhYmxlQW5ub3RhdGlvbk5hbWUoKTsKKwlmb3IgKGludCBpID0gMDsgaSA8IHR5cGVBbm5vdGF0
aW9ucy5sZW5ndGg7IGkrKykgeworCQlJQmluYXJ5QW5ub3RhdGlvbiB0eXBlQW5ub3RhdGlvbiA9
IHR5cGVBbm5vdGF0aW9uc1tpXTsKKwkJY2hhcltdIHR5cGVOYW1lID0gdHlwZUFubm90YXRpb24u
Z2V0VHlwZU5hbWUoKTsKKwkJLy8gdHlwZU5hbWUgbXVzdCBiZSAiTGZvby9YOyIKKwkJaWYgKHR5
cGVOYW1lID09IG51bGwgfHwgdHlwZU5hbWUubGVuZ3RoIDwgMyB8fCB0eXBlTmFtZVswXSAhPSAn
TCcpIGNvbnRpbnVlOworCQljaGFyW11bXSBuYW1lID0gQ2hhck9wZXJhdGlvbi5zcGxpdE9uKCcv
JywgdHlwZU5hbWUsIDEsIHR5cGVOYW1lLmxlbmd0aC0xKTsKKwkJaWYgKENoYXJPcGVyYXRpb24u
ZXF1YWxzKG5hbWUsIG5vbk51bGxBbm5vdGF0aW9uTmFtZSkgfHwgQ2hhck9wZXJhdGlvbi5lcXVh
bHMobmFtZSwgbnVsbGFibGVBbm5vdGF0aW9uTmFtZSkpCisJCQlyZXR1cm4gdHJ1ZTsKKwl9CisJ
cmV0dXJuIGZhbHNlOworfQogfQo=
</data>

          </attachment>
      

    </bug>

</bugzilla>