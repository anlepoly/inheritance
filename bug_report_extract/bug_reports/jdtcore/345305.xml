<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>345305</bug_id>
          
          <creation_ts>2011-05-10 13:26:00 -0400</creation_ts>
          <short_desc>[compiler][null] Compiler misidentifies a case of &quot;variable can only be null&quot;</short_desc>
          <delta_ts>2012-09-17 11:07:59 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.7</version>
          <rep_platform>PC</rep_platform>
          <op_sys>All</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>4.3 M2</target_milestone>
          
          <blocked>385415</blocked>
    
    <blocked>386181</blocked>
          <everconfirmed>1</everconfirmed>
          <reporter name="Mike Schrag">mschrag</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>Olivier_Thomann</cc>
    
    <cc>satyam.kandula</cc>
    
    <cc>srikanth_sankaran</cc>
    
    <cc>stephan.herrmann</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1927401</commentid>
    <comment_count>0</comment_count>
    <who name="Mike Schrag">mschrag</who>
    <bug_when>2011-05-10 13:26:51 -0400</bug_when>
    <thetext>Build Identifier: 3.6.1 M20100909-0800

public class Test {
    public static void main(String[] args) {
        String s = null;
        while (true) {
            try {
                s = &quot;hi&quot;;
            }
            finally {
                s.length();
                s = null;
            }
        }
    }
}

The compiler warns on the s.length() line saying that s can only be null at this point, which is not true -- in fact it can NEVER be null. This test case is totally contrived, but distilled from something more real :)

Reproducible: Always</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1927482</commentid>
    <comment_count>1</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-05-10 14:55:15 -0400</bug_when>
    <thetext>Thanks for the test.

It shows that our null analysis uses a similar flow analysis as is required
for analysing definite assignment - even in cases where this is not optimal.
Consider:

public class Test {
      public static void main(String[] args) {
        String s;
        while (true) {
            try {
                s = &quot;hi&quot;;
            }
            finally {
                s.length();
            }
        }
    }
}

----------
1. ERROR in Test.java (at line 9)
        s.length();
        ^
The local variable s may not have been initialized
----------
1 problem (1 error)

I believe this error is correct, because flow analysis for try-finally is quite
pessimistic (as per the JLS - may want to double check).

However, for null analysis we&apos;re not bound to the JLS and should do better.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1927514</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2011-05-10 15:18:01 -0400</bug_when>
    <thetext>Documenting negative result of search for dups:

It a first look one might think this issue be somewhat related to bug 150082 
(and bug 158000 ?). See NullReferenceTest#test0530_try_finally(), which was 
introduced by the combined fix for both bugs. But in that case the assignment
could indeed be skipped by an unchecked exception.

In the example of this bug nothing can prevent the assignment from being executed,
so we have different situations.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1927517</commentid>
    <comment_count>3</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-05-10 15:21:29 -0400</bug_when>
    <thetext>This will be a good item to fix for 3.8. Too late for 3.7.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2057714</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-01-29 07:24:23 -0500</bug_when>
    <thetext>I suspect that some of the false positives in bug 368546 are related to this issue. I&apos;ll report back any findings once I have a grip on bug 368546.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2083226</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-03-20 11:33:15 -0400</bug_when>
    <thetext>If you plan to include a fix for this in 3.8 M7, please adjust the
target suitably, so it becomes easier to track.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2083247</commentid>
    <comment_count>6</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-03-20 11:45:39 -0400</bug_when>
    <thetext>I don&apos;t think we are in the state to make any promise right now, but we may want to assess this shortly after EclipseCon, OK?</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2101471</commentid>
    <comment_count>7</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-05-02 05:24:33 -0400</bug_when>
    <thetext>Stephan, do you want to investigate this further and see if we can come up with a safe fix for RC1? Otherwise we can move it to 4.3</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2103715</commentid>
    <comment_count>8</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-05-07 10:36:56 -0400</bug_when>
    <thetext>Moving to 4.3</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2141460</commentid>
    <comment_count>9</comment_count>
      <attachid>219137</attachid>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-07-24 17:46:44 -0400</bug_when>
    <thetext>Created attachment 219137
rough sketch of a possible fix

Here&apos;s a rough sketch of how this could possibly be addressed by decoupling null-analysis for try-finally from def-assign analysis.

- more logic to collect null info in FlowContext.initsOnFinally as we go, so that in the end we need less algebraic magic (new: FlowContext.markFinallyNullStatus(), mergeFinallyNullInfo()).

- additionally record null-effects towards finally block after each statement in a try block.

- record at the FlowContext when we see an expression that could possibly through an exception (incl. undeclared exception). From that point onward use any null info only conditionally (incomplete list: MessageSend, AllocationExpression + Expression.checkNPE() - record by setting exceptionlessInScope to null).

- inside TryStatement completely replace magic of NullInfoRegistry with a regular FlowInfo, replace mitigateNullInfoFrom with explicitly adding the null info collected in initsOnFinally.

- changes in UFI avoid NPEs seen along the way (extra[0] was null, while extra[2] was not).

- additional test in TryStatement captures an intermediate regression (which rendered VerifyTests uncompilable - fixed)

- changes in NullReferenceTest:
  - two new tests for this bug
  - started to adapt test results to improved analysis (needs verification)

Status: 26 failures in NullReferenceTest (sum of all compliance levels).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2142422</commentid>
    <comment_count>10</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-07-26 16:00:23 -0400</bug_when>
    <thetext>After fixing said regressions I&apos;ve pushed the patch to https://git.eclipse.org/r/#/c/6991/

Significant new change: removal of NullInfoRegistry and all classes used for testing this :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2142909</commentid>
    <comment_count>11</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-07-29 05:37:30 -0400</bug_when>
    <thetext>After some experimentation the concept from comment 9 works well with just a few improvements:

When recording null info into FlowContext.initsOnFinally, we need to now how to combine the info. This is controlled by the new field FlowContext.conditionalLevel using the following encoding:
 -1: not inside a try-finally, don&apos;t collect info into initsOnFinally.
 0: analyzing a top-level statement inside a try-block: effects will be seen unconditionally inside the corresponding finally-block
 &gt; 0: analyzing a statement/expression that may or may not be executed: effects will affect the finally-block only conditionally
 Field conditionalLevel is maintained like this:
 - ExceptionHandlingFlowContext.&lt;init&gt; initializes to 0, the fun begins.
 - flow contexts inherit value from their parent
 - flow contexts of conditional structures (switch/loop) add 1 to the inherited value, i.e., their entire scope can only conditionally affect the finally-block, except: DoStatement starts with a clean 0, it is not a pre-test loop.
 - if statement and ternary expression temporarily increment the conditionalLevel and reset at their end
 - abrupt exits are signaled (FlowContext.recordAbruptExit()) by incrementing the conditionalLevel (with no matching decrement):
 -- return, break, continue, throw
 -- all expressions that may throw any exception incl. unchecked exceptions
 
The entire class NullInfoRegistry is indeed obsolete now (I never was very comfortable with this class anyway).
Required changes in NullReferenceTest look OK to me (i.e., demonstrate more precise analysis).
Changes in UnconditionalFlowInfo fix two bugs:
- AIOOBE (see comment 9) - proposed fix
- wrong bit arithmetic (see bug 386181) - workaround for now

Advance experiments show that bug 385415 can be easily fixed on top of this patch.

Please mark comments on details in https://git.eclipse.org/r/#/c/6991/, thanks.
Ayush: OK to assign to me? :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2145093</commentid>
    <comment_count>12</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2012-08-06 02:21:32 -0400</bug_when>
    <thetext>Stephan, sorry I couldn&apos;t find time to review this for M1. Ok to move out to M2? (This has a bunch of changes so I don&apos;t want to rush).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2145170</commentid>
    <comment_count>13</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-08-06 06:06:23 -0400</bug_when>
    <thetext>(In reply to comment #12)
&gt; Stephan, sorry I couldn&apos;t find time to review this for M1. Ok to move out to
&gt; M2? (This has a bunch of changes so I don&apos;t want to rush).

Sure, this is not the kind of patch to be released in a hurry :)</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2152409</commentid>
    <comment_count>14</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2012-08-25 13:54:45 -0400</bug_when>
    <thetext>During self-review I made one significant change:

I had some changes in UnconditionalFlowInfo to prevent an AIOOBE.
With the latest version of the patch I can no longer reproduce the AIOOBE and reverting that part of the change has the advantage that we continue to consistently play by the following rule:
- all individual sub-arrays of FlowInfo.extra have the same length (or are null)
If this rule is violated we want to be informed, so we can fix the code.

Additionally, I filed two follow-up issues: bug 388049 and bug 388050.

With these changes / fups the patch has been released for 4.3 M2 via commit http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?id=6d141275326cf4caf65ec5dca68b565e2e9b1360</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2160775</commentid>
    <comment_count>15</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2012-09-17 11:07:59 -0400</bug_when>
    <thetext>Verified for 4.3 M2 using Build id: I20120916-2000</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>219137</attachid>
            <date>2012-07-24 17:46:00 -0400</date>
            <delta_ts>2012-07-24 17:46:44 -0400</delta_ts>
            <desc>rough sketch of a possible fix</desc>
            <filename>wip-345305.patch</filename>
            <type>text/plain</type>
            <size>23592</size>
            <attacher name="Stephan Herrmann">stephan.herrmann</attacher>
            
              <data encoding="base64">ZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL051bGxSZWZlcmVuY2VU
ZXN0LmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3JnL2Vj
bGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9OdWxsUmVmZXJlbmNlVGVz
dC5qYXZhCmluZGV4IGMyZTM4OWYuLjZlMGFjODIgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21w
aWxlci9yZWdyZXNzaW9uL051bGxSZWZlcmVuY2VUZXN0LmphdmEKKysrIGIvb3JnLmVjbGlwc2Uu
amR0LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2Nv
bXBpbGVyL3JlZ3Jlc3Npb24vTnVsbFJlZmVyZW5jZVRlc3QuamF2YQpAQCAtNDksNyArNDksOCBA
QCBwdWJsaWMgTnVsbFJlZmVyZW5jZVRlc3QoU3RyaW5nIG5hbWUpIHsKIC8vIE9ubHkgdGhlIGhp
Z2hlc3QgY29tcGxpYW5jZSBsZXZlbCBpcyBydW47IGFkZCB0aGUgVk0gYXJndW1lbnQKIC8vIC1E
Y29tcGxpYW5jZT0xLjQgKGZvciBleGFtcGxlKSB0byBsb3dlciBpdCBpZiBuZWVkZWQKIHN0YXRp
YyB7Ci0vLwkJVEVTVFNfTkFNRVMgPSBuZXcgU3RyaW5nW10geyAidGVzdEJ1ZzMzNjQyOGYiIH07
CisvLwkJVEVTVFNfTkFNRVMgPSBuZXcgU3RyaW5nW10geyAidGVzdEJ1ZzM0NTMwNV8xIiB9Owor
Ly8JCVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1tdIHsgIl90cnlfIiB9OwogLy8JCVRFU1RTX05V
TUJFUlMgPSBuZXcgaW50W10geyA1NjEgfTsKIC8vCQlURVNUU19SQU5HRSA9IG5ldyBpbnRbXSB7
IDEsIDIwNDkgfTsKIH0KQEAgLTQ2MzksNyArNDY0MCw3IEBAIHB1YmxpYyB2b2lkIHRlc3QwNTA0
X3RyeV9maW5hbGx5KCkgewogLy8gTm90ZTogY29udmVyc2VseSwgd2l0aG91dCBsaW5lIDEsIHdl
IHdvdWxkIGNvbXBsYWluIGFib3V0IHggbm90IGJlaW5nCiAvLyAgICAgICBpbml0aWFsaXplZCAo
Zm9yIHN1cmUpIG9uIGxpbmUgMi4KIHB1YmxpYyB2b2lkIHRlc3QwNTA1X3RyeV9maW5hbGx5KCkg
ewotCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCiAJCW5ldyBT
dHJpbmdbXSB7CiAJCQkiWC5qYXZhIiwKIAkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKQEAgLTQ2
NTIsNyArNDY1MywxMiBAQCBwdWJsaWMgdm9pZCB0ZXN0MDUwNV90cnlfZmluYWxseSgpIHsKIAkJ
CSIgICB9XG4iICsKIAkJCSIgfVxuIiArCiAJCQkifVxuIn0sCi0JCSIiKTsKKwkJCSItLS0tLS0t
LS0tXG4iICsgCisJCQkiMS4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDcpXG4iICsgCisJCQki
CWlmICh4ID09IG51bGwpIHsvKiAqL31cbiIgKyAKKwkJCSIJICAgIF5cbiIgKyAKKwkJCSJSZWR1
bmRhbnQgbnVsbCBjaGVjazogVGhlIHZhcmlhYmxlIHggY2FuIG9ubHkgYmUgbnVsbCBhdCB0aGlz
IGxvY2F0aW9uXG4iICsgCisJCQkiLS0tLS0tLS0tLVxuIik7CiB9CiAKIC8vIG51bGwgYW5hbHlz
aXMgLS0gdHJ5IGZpbmFsbHkKQEAgLTk0MDMsNyArOTQwOSw3IEBAIHB1YmxpYyB2b2lkIHRlc3Qx
MDEzKCkgewogfQogCiBwdWJsaWMgdm9pZCB0ZXN0MTAxNCgpIHsKLQl0aGlzLnJ1bk5lZ2F0aXZl
VGVzdCgKKwl0aGlzLnJ1bkNvbmZvcm1UZXN0KAogCQluZXcgU3RyaW5nW10gewogCQkJIlguamF2
YSIsCiAJCQkicHVibGljIGNsYXNzIFgge1xuIiArCkBAIC05NDE2LDEzICs5NDIyLDcgQEAgcHVi
bGljIHZvaWQgdGVzdDEwMTQoKSB7CiAJCQkiICAgIH1cbiIgKwogCQkJIiAgfVxuIiArCiAJCQki
fVxuIn0sCi0JCSItLS0tLS0tLS0tXG4iICsKLQkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGlu
ZSA3KVxuIiArCi0JCSIJeC5mb28obnVsbCk7XG4iICsKLQkJIgleXG4iICsKLQkJIlBvdGVudGlh
bCBudWxsIHBvaW50ZXIgYWNjZXNzOiBUaGUgdmFyaWFibGUgeCBtYXkgYmUgbnVsbCBhdCB0aGlz
IGxvY2F0aW9uXG4iICsKLQkJIi0tLS0tLS0tLS1cbiIsCi0JICAgIEphdmFjVGVzdE9wdGlvbnMu
RXhjdXNlLkVjbGlwc2VXYXJuaW5nQ29uZmlndXJlZEFzRXJyb3IpOworCQkiIik7CiB9CiAKIHB1
YmxpYyB2b2lkIHRlc3QxMDE1KCkgewpAQCAtOTQ5Miw3ICs5NDkyLDEyIEBAIHB1YmxpYyB2b2lk
IHRlc3QxMDE3KCkgewogCQkJIiAgfVxuIiArCiAJCQkifVxuIn0sCiAJCSItLS0tLS0tLS0tXG4i
ICsKLQkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQgbGluZSA4KVxuIiArCisJCSIxLiBFUlJPUiBp
biBYLmphdmEgKGF0IGxpbmUgNylcbiIgKworCQkiCWlmICh4ID09IG51bGwpIHtcbiIgKyAKKwkJ
IgkgICAgXlxuIiArIAorCQkiUmVkdW5kYW50IG51bGwgY2hlY2s6IFRoZSB2YXJpYWJsZSB4IGNh
biBvbmx5IGJlIG51bGwgYXQgdGhpcyBsb2NhdGlvblxuIiArIAorCQkiLS0tLS0tLS0tLVxuIiAr
IAorCQkiMi4gRVJST1IgaW4gWC5qYXZhIChhdCBsaW5lIDgpXG4iICsgCiAJCSIJeC5mb28obnVs
bCk7XG4iICsKIAkJIgleXG4iICsKIAkJIk51bGwgcG9pbnRlciBhY2Nlc3M6IFRoZSB2YXJpYWJs
ZSB4IGNhbiBvbmx5IGJlIG51bGwgYXQgdGhpcyBsb2NhdGlvblxuIiArCkBAIC05NzQwLDcgKzk3
NDUsNyBAQCBwdWJsaWMgdm9pZCBfdGVzdDEwMjYoKSB7CiB9CiAKIHB1YmxpYyB2b2lkIHRlc3Qx
MDI3KCkgewotCXRoaXMucnVuQ29uZm9ybVRlc3QoCisJdGhpcy5ydW5OZWdhdGl2ZVRlc3QoCiAJ
CW5ldyBTdHJpbmdbXSB7CiAJCQkiWC5qYXZhIiwKIAkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsK
QEAgLTk3NTgsNyArOTc2MywxMiBAQCBwdWJsaWMgdm9pZCB0ZXN0MTAyNygpIHsKIAkJCSIgICAg
aWYgKG8gPT0gbnVsbCkgcmV0dXJuO1xuIiArCiAJCQkiICB9XG4iICsKIAkJCSJ9XG4ifSwKLQkJ
IiIpOworCQkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJCSIxLiBFUlJPUiBpbiBYLmphdmEgKGF0IGxp
bmUgOSlcbiIgKyAKKwkJCSIJaWYgKG8gPT0gbnVsbCkgXG4iICsgCisJCQkiCSAgICBeXG4iICsg
CisJCQkiUmVkdW5kYW50IG51bGwgY2hlY2s6IFRoZSB2YXJpYWJsZSBvIGNhbiBvbmx5IGJlIG51
bGwgYXQgdGhpcyBsb2NhdGlvblxuIiArIAorCQkJIi0tLS0tLS0tLS1cbiIpOwogfQogCiAvLyBU
T0RPIChwaGlsaXBwZSkgcmVlbmFibGUgb25jZSBmaXhlZApAQCAtOTk0MSw3ICs5OTUxLDcgQEAg
cHVibGljIHZvaWQgdGVzdDEwMzMoKSB7CiAKIC8vIGZyb20gQXNzaWdubWVudFRlc3QjdGVzdDAz
NCwgc2ltcGxpZmllZAogcHVibGljIHZvaWQgdGVzdDEwMzQoKSB7Ci0JdGhpcy5ydW5Db25mb3Jt
VGVzdCgKKwl0aGlzLnJ1bk5lZ2F0aXZlVGVzdCgKIAkJbmV3IFN0cmluZ1tdIHsKIAkJCSJYLmph
dmEiLAogCQkJInB1YmxpYyBmaW5hbCBjbGFzcyBYIFxuIiArCkBAIC05OTc0LDcgKzk5ODQsMTIg
QEAgcHVibGljIHZvaWQgdGVzdDEwMzQoKSB7CiAJCQkiCX1cbiIgKwogCQkJIn1cbiIsCiAJCX0s
Ci0JCSIiKTsKKwkJIi0tLS0tLS0tLS1cbiIgKyAKKwkJIjEuIEVSUk9SIGluIFguamF2YSAoYXQg
bGluZSAxNilcbiIgKyAKKwkJIglpZiAocnMgIT0gbnVsbClcbiIgKyAKKwkJIgkgICAgXl5cbiIg
KyAKKwkJIlJlZHVuZGFudCBudWxsIGNoZWNrOiBUaGUgdmFyaWFibGUgcnMgY2Fubm90IGJlIG51
bGwgYXQgdGhpcyBsb2NhdGlvblxuIiArIAorCQkiLS0tLS0tLS0tLVxuIik7CiB9CiAKIHB1Ymxp
YyB2b2lkIHRlc3QxMDM2KCkgewpAQCAtMTU2MDcsNCArMTU2MjIsNDcgQEAgcHVibGljIHZvaWQg
dGVzdEJ1ZzM2MDMyOGQoKSB7CiAJCSIiLC8qIGV4cGVjdGVkIGVycm9yICovCiAJICAgIEphdmFj
VGVzdE9wdGlvbnMuRXhjdXNlLkVjbGlwc2VXYXJuaW5nQ29uZmlndXJlZEFzRXJyb3IpOwogfQor
CisvLyBCdWcgMzQ1MzA1IC0gW2NvbXBpbGVyXVtudWxsXSBDb21waWxlciBtaXNpZGVudGlmaWVz
IGEgY2FzZSBvZiAidmFyaWFibGUgY2FuIG9ubHkgYmUgbnVsbCIKKy8vIHNpbXBsaWZpZWQ6IG9u
bHkgdHJ5LWZpbmFsbHkgaW52b2x2ZWQKK3B1YmxpYyB2b2lkIHRlc3RCdWczNDUzMDVfMSgpIHsK
KwlydW5Db25mb3JtVGVzdCgKKwkJbmV3IFN0cmluZ1tdIHsKKwkJCSJYLmphdmEiLAorCQkJInB1
YmxpYyBjbGFzcyBYIHtcbiIgKworCQkJIiAgICB2b2lkIGZvbygpIHtcbiIgKworCQkJIiAgICAg
ICAgU3RyaW5nIHMgPSBudWxsO1xuIiArIAorCQkJIiAgICAgICAgdHJ5IHtcbiIgKyAKKwkJCSIg
ICAgICAgICAgICBzID0gXCJoaVwiO1xuIiArIAorCQkJIiAgICAgICAgfSBmaW5hbGx5IHtcbiIg
KyAKKwkJCSIgICAgICAgICAgICBzLmxlbmd0aCgpO1xuIiArIAorCQkJIiAgICAgICAgICAgIHMg
PSBudWxsO1xuIiArIAorCQkJIiAgICAgICAgfVxuIiArIAorCQkJIiAgICB9XG4iICsKKwkJCSJ9
XG4iCisJCX0pOworfQorCisvLyBCdWcgMzQ1MzA1IC0gW2NvbXBpbGVyXVtudWxsXSBDb21waWxl
ciBtaXNpZGVudGlmaWVzIGEgY2FzZSBvZiAidmFyaWFibGUgY2FuIG9ubHkgYmUgbnVsbCIKKy8v
IG9yaWdpbmFsIHRlc3QgY2FzZQorcHVibGljIHZvaWQgdGVzdEJ1ZzM0NTMwNV8yKCkgeworCXJ1
bkNvbmZvcm1UZXN0KAorCQluZXcgU3RyaW5nW10geworCQkJIlguamF2YSIsCisJCQkicHVibGlj
IGNsYXNzIFgge1xuIiArCisJCQkiICAgIHZvaWQgZm9vKCkge1xuIiArCisJCQkiICAgICAgICBT
dHJpbmcgcyA9IG51bGw7XG4iICsgCisJCQkiICAgICAgICB3aGlsZSAodHJ1ZSkge1xuIiArIAor
CQkJIiAgICAgICAgICAgIHRyeSB7XG4iICsgCisJCQkiICAgICAgICAgICAgICAgIHMgPSBcImhp
XCI7XG4iICsgCisJCQkiICAgICAgICAgICAgfVxuIiArIAorCQkJIiAgICAgICAgICAgIGZpbmFs
bHkge1xuIiArIAorCQkJIiAgICAgICAgICAgICAgICBzLmxlbmd0aCgpO1xuIiArIAorCQkJIiAg
ICAgICAgICAgICAgICBzID0gbnVsbDtcbiIgKyAKKwkJCSIgICAgICAgICAgICB9XG4iICsgCisJ
CQkiICAgICAgICB9XG4iICsgCisJCQkiICAgIH1cbiIgKworCQkJIn1cbiIKKwkJfSk7Cit9CiB9
ClwgTm8gbmV3bGluZSBhdCBlbmQgb2YgZmlsZQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0
LmNvcmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBp
bGVyL3JlZ3Jlc3Npb24vVHJ5U3RhdGVtZW50VGVzdC5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNv
cmUudGVzdHMuY29tcGlsZXIvc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBpbGVy
L3JlZ3Jlc3Npb24vVHJ5U3RhdGVtZW50VGVzdC5qYXZhCmluZGV4IDZmNjE3MTYuLjk4MDE3YTcg
MTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlLnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcv
ZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdyZXNzaW9uL1RyeVN0YXRlbWVudFRl
c3QuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS50ZXN0cy5jb21waWxlci9zcmMvb3Jn
L2VjbGlwc2UvamR0L2NvcmUvdGVzdHMvY29tcGlsZXIvcmVncmVzc2lvbi9UcnlTdGF0ZW1lbnRU
ZXN0LmphdmEKQEAgLTIzLDcgKzIzLDcgQEAgaW1wb3J0IGp1bml0LmZyYW1ld29yay5UZXN0Owog
cHVibGljIGNsYXNzIFRyeVN0YXRlbWVudFRlc3QgZXh0ZW5kcyBBYnN0cmFjdFJlZ3Jlc3Npb25U
ZXN0IHsKIAogc3RhdGljIHsKLS8vCVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1tdIHsgInRlc3Qw
MDAiIH07CisvLwlURVNUU19OQU1FUyA9IG5ldyBTdHJpbmdbXSB7ICJ0ZXN0MDc0IiB9OwogLy8J
VEVTVFNfTlVNQkVSUyA9IG5ldyBpbnRbXSB7IDc0LCA3NSB9OwogLy8JVEVTVFNfUkFOR0UgPSBu
ZXcgaW50W10geyAxMSwgLTEgfTsKIH0KQEAgLTU5NjEsNiArNTk2MSwzMiBAQCBwdWJsaWMgdm9p
ZCB0ZXN0MDczKCkgewogCQkiTm8gZXhjZXB0aW9uIG9mIHR5cGUgRXhjZXB0aW9uW10gY2FuIGJl
IHRocm93bjsgYW4gZXhjZXB0aW9uIHR5cGUgbXVzdCBiZSBhIHN1YmNsYXNzIG9mIFRocm93YWJs
ZVxuIiArIAogCQkiLS0tLS0tLS0tLVxuIik7CiB9CisvLyB0ZXN0IGZvciByZWdyZXNzaW9uIGR1
cmluZyB3b3JrIG9uIGJ1ZyAzNDUzMDUKKy8vIHNhdyAiVGhlIGxvY2FsIHZhcmlhYmxlIG5hbWUg
bWF5IG5vdCBoYXZlIGJlZW4gaW5pdGlhbGl6ZWQiIGFnYWluc3QgbGFzdCBjb2RlIGxpbmUKK3B1
YmxpYyB2b2lkIHRlc3QwNzQoKSB7CisJcnVuQ29uZm9ybVRlc3QoCisJCW5ldyBTdHJpbmdbXSB7
CisJCQkiWC5qYXZhIiwKKwkJCSJwdWJsaWMgY2xhc3MgWCB7XG4iICsKKwkJCSIJQ2xhc3MgdGVz
dChTdHJpbmcgbmFtZSkgdGhyb3dzIENsYXNzTm90Rm91bmRFeGNlcHRpb24ge1xuIiArIAorCQkJ
IgkJQ2xhc3MgYz0gZmluZENsYXNzKG5hbWUpO1xuIiArIAorCQkJIgkJaWYgKGMgIT0gbnVsbClc
biIgKyAKKwkJCSIJCQlyZXR1cm4gYztcbiIgKyAKKwkJCSIJCWlmIChpc0V4Y2x1ZGVkKG5hbWUp
KSB7XG4iICsgCisJCQkiCQkJdHJ5IHtcbiIgKyAKKwkJCSIJCQkJYz0gZmluZENsYXNzKG5hbWUp
O1xuIiArIAorCQkJIgkJCQlyZXR1cm4gYztcbiIgKyAKKwkJCSIJCQl9IGNhdGNoIChDbGFzc05v
dEZvdW5kRXhjZXB0aW9uIGUpIHtcbiIgKyAKKwkJCSIJCQkJLy8ga2VlcCBzZWFyY2hpbmdcbiIg
KyAKKwkJCSIJCQl9XG4iICsgCisJCQkiCQl9XG4iICsgCisJCQkiCQlyZXR1cm4gZmluZENsYXNz
KG5hbWUpO1xuIiArCisJCQkiICAgIH1cbiIgKyAKKwkJCSIgICAgYm9vbGVhbiBpc0V4Y2x1ZGVk
KFN0cmluZyBuYW1lKSB7IHJldHVybiBmYWxzZTsgfVxuIiArCisJCQkiICAgIENsYXNzIGZpbmRD
bGFzcyhTdHJpbmcgbmFtZSkgdGhyb3dzIENsYXNzTm90Rm91bmRFeGNlcHRpb24geyByZXR1cm4g
bnVsbDsgfVxuIiArCisJCQkifVxuIgorCQl9KTsKK30KIHB1YmxpYyBzdGF0aWMgQ2xhc3MgdGVz
dENsYXNzKCkgewogCXJldHVybiBUcnlTdGF0ZW1lbnRUZXN0LmNsYXNzOwogfQpkaWZmIC0tZ2l0
IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFs
L2NvbXBpbGVyL2FzdC9BbGxvY2F0aW9uRXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0
LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9BbGxv
Y2F0aW9uRXhwcmVzc2lvbi5qYXZhCmluZGV4IDYxMzAwM2IuLmJhNzFkN2EgMTAwNjQ0Ci0tLSBh
L29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9j
b21waWxlci9hc3QvQWxsb2NhdGlvbkV4cHJlc3Npb24uamF2YQorKysgYi9vcmcuZWNsaXBzZS5q
ZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Fs
bG9jYXRpb25FeHByZXNzaW9uLmphdmEKQEAgLTQ2LDYgKzQ2LDggQEAgcHVibGljIEZsb3dJbmZv
IGFuYWx5c2VDb2RlKEJsb2NrU2NvcGUgY3VycmVudFNjb3BlLCBGbG93Q29udGV4dCBmbG93Q29u
dGV4dCwgRmwKIAkvLyBjaGVjayBjYXB0dXJlZCB2YXJpYWJsZXMgYXJlIGluaXRpYWxpemVkIGlu
IGN1cnJlbnQgY29udGV4dCAoMjYxMzQpCiAJY2hlY2tDYXB0dXJlZExvY2FsSW5pdGlhbGl6YXRp
b25JZk5lY2Vzc2FyeSgoUmVmZXJlbmNlQmluZGluZyl0aGlzLmJpbmRpbmcuZGVjbGFyaW5nQ2xh
c3MuZXJhc3VyZSgpLCBjdXJyZW50U2NvcGUsIGZsb3dJbmZvKTsKIAorCS8vIHRoaXMgY29udGV4
dCBpcyBubyBsb25nZXIgZXhjZXB0aW9uLWxlc3M6CisJZmxvd0NvbnRleHQuZXhjZXB0aW9ubGVz
c0luU2NvcGUgPSBudWxsOyAvLyBUT0RPIHdoaXRlbGlzdCBvZiBjdG9ycyB0aGF0IGNhbm5vdCB0
aHJvdyBhbnkgZXhjLj8/CiAJLy8gcHJvY2VzcyBhcmd1bWVudHMKIAlpZiAodGhpcy5hcmd1bWVu
dHMgIT0gbnVsbCkgewogCQlib29sZWFuIGFuYWx5c2VSZXNvdXJjZXMgPSBjdXJyZW50U2NvcGUu
Y29tcGlsZXJPcHRpb25zKCkuYW5hbHlzZVJlc291cmNlTGVha3M7CmRpZmYgLS1naXQgYS9vcmcu
ZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGls
ZXIvYXN0L0Fzc2lnbm1lbnQuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29y
Zy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQXNzaWdubWVudC5qYXZhCmluZGV4
IDRkZmU4NjEuLjQ4ZmViZTkgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBp
bGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQXNzaWdubWVudC5qYXZh
CisrKyBiL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRl
cm5hbC9jb21waWxlci9hc3QvQXNzaWdubWVudC5qYXZhCkBAIC04Miw3ICs4Miw3IEBAIHB1Ymxp
YyBGbG93SW5mbyBhbmFseXNlQ29kZShCbG9ja1Njb3BlIGN1cnJlbnRTY29wZSwgRmxvd0NvbnRl
eHQgZmxvd0NvbnRleHQsIEZsCiAJaWYgKGxvY2FsICE9IG51bGwgJiYgKGxvY2FsLnR5cGUudGFn
Qml0cyAmIFRhZ0JpdHMuSXNCYXNlVHlwZSkgPT0gMCkgewogCQlmbG93SW5mby5tYXJrTnVsbFN0
YXR1cyhsb2NhbCwgbnVsbFN0YXR1cyk7CiAJCWlmIChmbG93Q29udGV4dC5pbml0c09uRmluYWxs
eSAhPSBudWxsKQotCQkJZmxvd0NvbnRleHQuaW5pdHNPbkZpbmFsbHkubWFya051bGxTdGF0dXMo
bG9jYWwsIG51bGxTdGF0dXMpOworCQkJZmxvd0NvbnRleHQubWFya0ZpbmFsbHlOdWxsU3RhdHVz
KGN1cnJlbnRTY29wZSwgbG9jYWwsIG51bGxTdGF0dXMpOwogCX0KIAlyZXR1cm4gZmxvd0luZm87
CiB9CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBz
ZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Jsb2NrLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQu
Y29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Jsb2Nr
LmphdmEKaW5kZXggNTQ2N2Q3OTIuLmIyYzQwMDYgMTAwNjQ0Ci0tLSBhL29yZy5lY2xpcHNlLmpk
dC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvQmxv
Y2suamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9q
ZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L0Jsb2NrLmphdmEKQEAgLTM4LDYgKzM4LDggQEAgcHVi
bGljIEZsb3dJbmZvIGFuYWx5c2VDb2RlKEJsb2NrU2NvcGUgY3VycmVudFNjb3BlLCBGbG93Q29u
dGV4dCBmbG93Q29udGV4dCwgRmwKIAkJaWYgKChjb21wbGFpbnRMZXZlbCA9IHN0YXQuY29tcGxh
aW5JZlVucmVhY2hhYmxlKGZsb3dJbmZvLCB0aGlzLnNjb3BlLCBjb21wbGFpbnRMZXZlbCwgdHJ1
ZSkpIDwgU3RhdGVtZW50LkNPTVBMQUlORURfVU5SRUFDSEFCTEUpIHsKIAkJCWZsb3dJbmZvID0g
c3RhdC5hbmFseXNlQ29kZSh0aGlzLnNjb3BlLCBmbG93Q29udGV4dCwgZmxvd0luZm8pOwogCQl9
CisJCS8vIHJlY29yZCB0aGUgZWZmZWN0IG9mIHN0YXQgb24gdGhlIGZpbmFsbHkgYmxvY2sgb2Yg
YW4gZW5jbG9zaW5nIHRyeS1maW5hbGx5LCBpZiBhbnk6CisJCWZsb3dDb250ZXh0Lm1lcmdlRmlu
YWxseU51bGxJbmZvKGN1cnJlbnRTY29wZSwgZmxvd0luZm8sIHRoaXMpOwogCX0KIAlpZiAodGhp
cy5leHBsaWNpdERlY2xhcmF0aW9ucyA+IDApIHsKIAkJLy8gaWYgYmxvY2sgaGFzIGl0cyBvd24g
c2NvcGUgYW5hbHl6ZSB0cmFja2luZyB2YXJzIG5vdzoKZGlmZiAtLWdpdCBhL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3Qv
RXhwcmVzc2lvbi5qYXZhIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlw
c2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9FeHByZXNzaW9uLmphdmEKaW5kZXggZTU4NWE1
OC4uMDk5MzllYyAxMDA2NDQKLS0tIGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9FeHByZXNzaW9uLmphdmEKKysrIGIv
b3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2Nv
bXBpbGVyL2FzdC9FeHByZXNzaW9uLmphdmEKQEAgLTUzMSw2ICs1MzEsOCBAQCBwdWJsaWMgdm9p
ZCBjaGVja05QRShCbG9ja1Njb3BlIHNjb3BlLCBGbG93Q29udGV4dCBmbG93Q29udGV4dCwgRmxv
d0luZm8gZmxvd0luZgogCQlpZiAoKHRoaXMuYml0cyAmIEFTVE5vZGUuSXNOb25OdWxsKSA9PSAw
KSB7CiAJCQlmbG93Q29udGV4dC5yZWNvcmRVc2luZ051bGxSZWZlcmVuY2Uoc2NvcGUsIGxvY2Fs
LCB0aGlzLAogCQkJCQlGbG93Q29udGV4dC5NQVlfTlVMTCwgZmxvd0luZm8pOworCQkJLy8gdGhp
cyBjb250ZXh0IGlzIG5vIGxvbmdlciBleGNlcHRpb24tbGVzczoKKwkJCWZsb3dDb250ZXh0LmV4
Y2VwdGlvbmxlc3NJblNjb3BlID0gbnVsbDsKIAkJfQogCQlmbG93SW5mby5tYXJrQXNDb21wYXJl
ZEVxdWFsVG9Ob25OdWxsKGxvY2FsKTsKIAkJCS8vIGZyb20gdGhlcmVvbiBpdCBpcyBzZXQKZGlm
ZiAtLWdpdCBhL29yZy5lY2xpcHNlLmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9p
bnRlcm5hbC9jb21waWxlci9hc3QvTWVzc2FnZVNlbmQuamF2YSBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvTWVzc2Fn
ZVNlbmQuamF2YQppbmRleCA0NGY1YmM0Li43ZTZhZWU5IDEwMDY0NAotLS0gYS9vcmcuZWNsaXBz
ZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0
L01lc3NhZ2VTZW5kLmphdmEKKysrIGIvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3Jn
L2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2FzdC9NZXNzYWdlU2VuZC5qYXZhCkBAIC02
NSw2ICs2NSw4IEBAIHB1YmxpYyBjbGFzcyBNZXNzYWdlU2VuZCBleHRlbmRzIEV4cHJlc3Npb24g
aW1wbGVtZW50cyBJbnZvY2F0aW9uU2l0ZSB7CiAJcHVibGljIFR5cGVCaW5kaW5nW10gZ2VuZXJp
Y1R5cGVBcmd1bWVudHM7CiAKIHB1YmxpYyBGbG93SW5mbyBhbmFseXNlQ29kZShCbG9ja1Njb3Bl
IGN1cnJlbnRTY29wZSwgRmxvd0NvbnRleHQgZmxvd0NvbnRleHQsIEZsb3dJbmZvIGZsb3dJbmZv
KSB7CisJLy8gdGhpcyBjb250ZXh0IGlzIG5vIGxvbmdlciBleGNlcHRpb24tbGVzczoKKwlmbG93
Q29udGV4dC5leGNlcHRpb25sZXNzSW5TY29wZSA9IG51bGw7CiAJYm9vbGVhbiBub25TdGF0aWMg
PSAhdGhpcy5iaW5kaW5nLmlzU3RhdGljKCk7CiAJYm9vbGVhbiB3YXNJbnNpZGVBc3NlcnQgPSAo
KGZsb3dDb250ZXh0LnRhZ0JpdHMgJiBGbG93Q29udGV4dC5ISURFX05VTExfQ09NUEFSSVNPTl9X
QVJOSU5HKSAhPSAwKTsKIAlmbG93SW5mbyA9IHRoaXMucmVjZWl2ZXIuYW5hbHlzZUNvZGUoY3Vy
cmVudFNjb3BlLCBmbG93Q29udGV4dCwgZmxvd0luZm8sIG5vblN0YXRpYykudW5jb25kaXRpb25h
bEluaXRzKCk7CmRpZmYgLS1naXQgYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcv
ZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1RyeVN0YXRlbWVudC5qYXZhIGIvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2FzdC9UcnlTdGF0ZW1lbnQuamF2YQppbmRleCAwNjQ4ZTViLi42MzJlMTIwIDEwMDY0NAot
LS0gYS9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJu
YWwvY29tcGlsZXIvYXN0L1RyeVN0YXRlbWVudC5qYXZhCisrKyBiL29yZy5lY2xpcHNlLmpkdC5j
b3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvVHJ5U3Rh
dGVtZW50LmphdmEKQEAgLTEyMiw4ICsxMjIsOCBAQCBwdWJsaWMgRmxvd0luZm8gYW5hbHlzZUNv
ZGUoQmxvY2tTY29wZSBjdXJyZW50U2NvcGUsIEZsb3dDb250ZXh0IGZsb3dDb250ZXh0LCBGbAog
CQkJCW51bGwsCiAJCQkJdGhpcy5zY29wZSwKIAkJCQlmbG93SW5mby51bmNvbmRpdGlvbmFsSW5p
dHMoKSk7Ci0JCWhhbmRsaW5nQ29udGV4dC5pbml0c09uRmluYWxseSA9Ci0JCQluZXcgTnVsbElu
Zm9SZWdpc3RyeShmbG93SW5mby51bmNvbmRpdGlvbmFsSW5pdHMoKSk7CisJCWhhbmRsaW5nQ29u
dGV4dC5pbml0c09uRmluYWxseSA9IGZsb3dJbmZvLnVuY29uZGl0aW9uYWxDb3B5KCk7CisJCWhh
bmRsaW5nQ29udGV4dC5leGNlcHRpb25sZXNzSW5TY29wZSA9IHRoaXMudHJ5QmxvY2suc2NvcGU7
CiAJCS8vIG9ubHkgdHJ5IGJsb2NrcyBpbml0aWFsaXplIHRoYXQgbWVtYmVyIC0gbWF5IGNvbnNp
ZGVyIGNyZWF0aW5nIGEKIAkJLy8gc2VwYXJhdGUgY2xhc3MgaWYgbmVlZGVkCiAKQEAgLTE5NSwx
MyArMTk1LDEzIEBAIHB1YmxpYyBGbG93SW5mbyBhbmFseXNlQ29kZShCbG9ja1Njb3BlIGN1cnJl
bnRTY29wZSwgRmxvd0NvbnRleHQgZmxvd0NvbnRleHQsIEZsCiAJCQkJRmxvd0luZm8gY2F0Y2hJ
bmZvOwogCQkJCWlmIChpc1VuY2hlY2tlZENhdGNoQmxvY2soaSkpIHsKIAkJCQkJY2F0Y2hJbmZv
ID0KLQkJCQkJCWhhbmRsaW5nQ29udGV4dC5pbml0c09uRmluYWxseS5taXRpZ2F0ZU51bGxJbmZv
T2YoCi0JCQkJCQkJZmxvd0luZm8udW5jb25kaXRpb25hbENvcHkoKS4KLQkJCQkJCQkJYWRkUG90
ZW50aWFsSW5pdGlhbGl6YXRpb25zRnJvbSgKLQkJCQkJCQkJCWhhbmRsaW5nQ29udGV4dC5pbml0
c09uRXhjZXB0aW9uKGkpKS4KLQkJCQkJCQkJYWRkUG90ZW50aWFsSW5pdGlhbGl6YXRpb25zRnJv
bSh0cnlJbmZvKS4KLQkJCQkJCQkJYWRkUG90ZW50aWFsSW5pdGlhbGl6YXRpb25zRnJvbSgKLQkJ
CQkJCQkJCWhhbmRsaW5nQ29udGV4dC5pbml0c09uUmV0dXJuKSk7CisJCQkJCQlmbG93SW5mby51
bmNvbmRpdGlvbmFsQ29weSgpLgorCQkJCQkJCWFkZFBvdGVudGlhbEluaXRpYWxpemF0aW9uc0Zy
b20oCisJCQkJCQkJCWhhbmRsaW5nQ29udGV4dC5pbml0c09uRXhjZXB0aW9uKGkpKS4KKwkJCQkJ
CQlhZGRQb3RlbnRpYWxJbml0aWFsaXphdGlvbnNGcm9tKHRyeUluZm8pLgorCQkJCQkJCWFkZFBv
dGVudGlhbEluaXRpYWxpemF0aW9uc0Zyb20oCisJCQkJCQkJCWhhbmRsaW5nQ29udGV4dC5pbml0
c09uUmV0dXJuKS4KKwkJCQkJCWFkZE51bGxJbmZvRnJvbShoYW5kbGluZ0NvbnRleHQuaW5pdHNP
bkZpbmFsbHkpOwogCQkJCX0gZWxzZSB7CiAJCQkJCUZsb3dJbmZvIGluaXRzT25FeGNlcHRpb24g
PSBoYW5kbGluZ0NvbnRleHQuaW5pdHNPbkV4Y2VwdGlvbihpKTsKIAkJCQkJY2F0Y2hJbmZvID0K
QEAgLTI0NCw3ICsyNDQsNyBAQCBwdWJsaWMgRmxvd0luZm8gYW5hbHlzZUNvZGUoQmxvY2tTY29w
ZSBjdXJyZW50U2NvcGUsIEZsb3dDb250ZXh0IGZsb3dDb250ZXh0LCBGbAogCiAJCS8vIGNoYWlu
IHVwIG51bGwgaW5mbyByZWdpc3RyeQogCQlpZiAoZmxvd0NvbnRleHQuaW5pdHNPbkZpbmFsbHkg
IT0gbnVsbCkgewotCQkJZmxvd0NvbnRleHQuaW5pdHNPbkZpbmFsbHkuYWRkKGhhbmRsaW5nQ29u
dGV4dC5pbml0c09uRmluYWxseSk7CisJCQlmbG93Q29udGV4dC5pbml0c09uRmluYWxseS5hZGRO
dWxsSW5mb0Zyb20oaGFuZGxpbmdDb250ZXh0LmluaXRzT25GaW5hbGx5KTsKIAkJfQogCiAJCXJl
dHVybiB0cnlJbmZvOwpAQCAtMjg2LDggKzI4Niw4IEBAIHB1YmxpYyBGbG93SW5mbyBhbmFseXNl
Q29kZShCbG9ja1Njb3BlIGN1cnJlbnRTY29wZSwgRmxvd0NvbnRleHQgZmxvd0NvbnRleHQsIEZs
CiAJCQkJbnVsbCwKIAkJCQl0aGlzLnNjb3BlLAogCQkJCWZsb3dJbmZvLnVuY29uZGl0aW9uYWxJ
bml0cygpKTsKLQkJaGFuZGxpbmdDb250ZXh0LmluaXRzT25GaW5hbGx5ID0KLQkJCW5ldyBOdWxs
SW5mb1JlZ2lzdHJ5KGZsb3dJbmZvLnVuY29uZGl0aW9uYWxJbml0cygpKTsKKwkJaGFuZGxpbmdD
b250ZXh0LmluaXRzT25GaW5hbGx5ID0gZmxvd0luZm8udW5jb25kaXRpb25hbENvcHkoKTsKKwkJ
aGFuZGxpbmdDb250ZXh0LmV4Y2VwdGlvbmxlc3NJblNjb3BlID0gdGhpcy50cnlCbG9jay5zY29w
ZTsKIAkJLy8gb25seSB0cnkgYmxvY2tzIGluaXRpYWxpemUgdGhhdCBtZW1iZXIgLSBtYXkgY29u
c2lkZXIgY3JlYXRpbmcgYQogCQkvLyBzZXBhcmF0ZSBjbGFzcyBpZiBuZWVkZWQKIApAQCAtMzU5
LDEzICszNTksMTMgQEAgcHVibGljIEZsb3dJbmZvIGFuYWx5c2VDb2RlKEJsb2NrU2NvcGUgY3Vy
cmVudFNjb3BlLCBGbG93Q29udGV4dCBmbG93Q29udGV4dCwgRmwKIAkJCQlGbG93SW5mbyBjYXRj
aEluZm87CiAJCQkJaWYgKGlzVW5jaGVja2VkQ2F0Y2hCbG9jayhpKSkgewogCQkJCQljYXRjaElu
Zm8gPQotCQkJCQkJaGFuZGxpbmdDb250ZXh0LmluaXRzT25GaW5hbGx5Lm1pdGlnYXRlTnVsbElu
Zm9PZigKLQkJCQkJCQlmbG93SW5mby51bmNvbmRpdGlvbmFsQ29weSgpLgotCQkJCQkJCQlhZGRQ
b3RlbnRpYWxJbml0aWFsaXphdGlvbnNGcm9tKAotCQkJCQkJCQkJaGFuZGxpbmdDb250ZXh0Lmlu
aXRzT25FeGNlcHRpb24oaSkpLgotCQkJCQkJCQlhZGRQb3RlbnRpYWxJbml0aWFsaXphdGlvbnNG
cm9tKHRyeUluZm8pLgotCQkJCQkJCQlhZGRQb3RlbnRpYWxJbml0aWFsaXphdGlvbnNGcm9tKAot
CQkJCQkJCQkJaGFuZGxpbmdDb250ZXh0LmluaXRzT25SZXR1cm4pKTsKKwkJCQkJCWZsb3dJbmZv
LnVuY29uZGl0aW9uYWxDb3B5KCkuCisJCQkJCQkJYWRkUG90ZW50aWFsSW5pdGlhbGl6YXRpb25z
RnJvbSgKKwkJCQkJCQkJaGFuZGxpbmdDb250ZXh0LmluaXRzT25FeGNlcHRpb24oaSkpLgorCQkJ
CQkJCWFkZFBvdGVudGlhbEluaXRpYWxpemF0aW9uc0Zyb20odHJ5SW5mbykuCisJCQkJCQkJYWRk
UG90ZW50aWFsSW5pdGlhbGl6YXRpb25zRnJvbSgKKwkJCQkJCQkJaGFuZGxpbmdDb250ZXh0Lmlu
aXRzT25SZXR1cm4pLgorCQkJCQkJCWFkZE51bGxJbmZvRnJvbShoYW5kbGluZ0NvbnRleHQuaW5p
dHNPbkZpbmFsbHkpOwogCQkJCX1lbHNlIHsKIAkJCQkJRmxvd0luZm8gaW5pdHNPbkV4Y2VwdGlv
biA9IGhhbmRsaW5nQ29udGV4dC5pbml0c09uRXhjZXB0aW9uKGkpOwogCQkJCQljYXRjaEluZm8g
PQpAQCAtNDA2LDE5ICs0MDYsMjAgQEAgcHVibGljIEZsb3dJbmZvIGFuYWx5c2VDb2RlKEJsb2Nr
U2NvcGUgY3VycmVudFNjb3BlLCBGbG93Q29udGV4dCBmbG93Q29udGV4dCwgRmwKIAkJLy8gd2Ug
YWxzbyBuZWVkIHRvIGNoZWNrIHBvdGVudGlhbCBtdWx0aXBsZSBhc3NpZ25tZW50cyBvZiBmaW5h
bCB2YXJpYWJsZXMgaW5zaWRlIHRoZSBmaW5hbGx5IGJsb2NrCiAJCS8vIG5lZWQgdG8gaW5jbHVk
ZSBwb3RlbnRpYWwgaW5pdHMgZnJvbSByZXR1cm5zIGluc2lkZSB0aGUgdHJ5L2NhdGNoIHBhcnRz
IC0gMUdLMkFPRgogCQlmaW5hbGx5Q29udGV4dC5jb21wbGFpbk9uRGVmZXJyZWRDaGVja3MoCi0J
CQloYW5kbGluZ0NvbnRleHQuaW5pdHNPbkZpbmFsbHkubWl0aWdhdGVOdWxsSW5mb09mKAotCQkJ
CSh0cnlJbmZvLnRhZ0JpdHMgJiBGbG93SW5mby5VTlJFQUNIQUJMRSkgPT0gMCA/Ci0JCQkJCWZs
b3dJbmZvLnVuY29uZGl0aW9uYWxDb3B5KCkuCisJCQkoKHRyeUluZm8udGFnQml0cyAmIEZsb3dJ
bmZvLlVOUkVBQ0hBQkxFKSA9PSAwID8KKwkJCQlmbG93SW5mby51bmNvbmRpdGlvbmFsQ29weSgp
LgogCQkJCQlhZGRQb3RlbnRpYWxJbml0aWFsaXphdGlvbnNGcm9tKHRyeUluZm8pLgotCQkJCQkJ
Ly8gbGlnaHRlbiB0aGUgaW5mbHVlbmNlIG9mIHRoZSB0cnkgYmxvY2ssIHdoaWNoIG1heSBoYXZl
Ci0JCQkJCQkvLyBleGl0ZWQgYXQgYW55IHBvaW50CisJCQkJCS8vIGxpZ2h0ZW4gdGhlIGluZmx1
ZW5jZSBvZiB0aGUgdHJ5IGJsb2NrLCB3aGljaCBtYXkgaGF2ZQorCQkJCQkvLyBleGl0ZWQgYXQg
YW55IHBvaW50CiAJCQkJCWFkZFBvdGVudGlhbEluaXRpYWxpemF0aW9uc0Zyb20oaW5zaWRlU3Vi
Q29udGV4dC5pbml0c09uUmV0dXJuKSA6Ci0JCQkJCWluc2lkZVN1YkNvbnRleHQuaW5pdHNPblJl
dHVybiksCisJCQkJaW5zaWRlU3ViQ29udGV4dC5pbml0c09uUmV0dXJuKS4KKwkJCWFkZE51bGxJ
bmZvRnJvbSgKKwkJCQkJaGFuZGxpbmdDb250ZXh0LmluaXRzT25GaW5hbGx5KSwKIAkJCWN1cnJl
bnRTY29wZSk7CiAKIAkJLy8gY2hhaW4gdXAgbnVsbCBpbmZvIHJlZ2lzdHJ5CiAJCWlmIChmbG93
Q29udGV4dC5pbml0c09uRmluYWxseSAhPSBudWxsKSB7Ci0JCQlmbG93Q29udGV4dC5pbml0c09u
RmluYWxseS5hZGQoaGFuZGxpbmdDb250ZXh0LmluaXRzT25GaW5hbGx5KTsKKwkJCWZsb3dDb250
ZXh0LmluaXRzT25GaW5hbGx5LmFkZE51bGxJbmZvRnJvbShoYW5kbGluZ0NvbnRleHQuaW5pdHNP
bkZpbmFsbHkpOwogCQl9CiAKIAkJdGhpcy5uYXR1cmFsRXhpdE1lcmdlSW5pdFN0YXRlSW5kZXgg
PQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2Uv
amR0L2ludGVybmFsL2NvbXBpbGVyL2Zsb3cvRmxvd0NvbnRleHQuamF2YSBiL29yZy5lY2xpcHNl
LmpkdC5jb3JlL2NvbXBpbGVyL29yZy9lY2xpcHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9mbG93
L0Zsb3dDb250ZXh0LmphdmEKaW5kZXggYjcwMzFkZi4uMTM0ZTk0ZSAxMDA2NDQKLS0tIGEvb3Jn
LmVjbGlwc2UuamR0LmNvcmUvY29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBp
bGVyL2Zsb3cvRmxvd0NvbnRleHQuamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21w
aWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvZmxvdy9GbG93Q29udGV4dC5q
YXZhCkBAIC0yMCw2ICsyMCw3IEBAIGltcG9ydCBqYXZhLnV0aWwuQXJyYXlMaXN0OwogaW1wb3J0
IG9yZy5lY2xpcHNlLmpkdC5jb3JlLmNvbXBpbGVyLkNoYXJPcGVyYXRpb247CiBpbXBvcnQgb3Jn
LmVjbGlwc2UuamR0LmludGVybmFsLmNvbXBpbGVyLmFzdC5BU1ROb2RlOwogaW1wb3J0IG9yZy5l
Y2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuQWJzdHJhY3RNZXRob2REZWNsYXJhdGlv
bjsKK2ltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkJsb2NrOwog
aW1wb3J0IG9yZy5lY2xpcHNlLmpkdC5pbnRlcm5hbC5jb21waWxlci5hc3QuRXhwcmVzc2lvbjsK
IGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0LkZha2VkVHJhY2tp
bmdWYXJpYWJsZTsKIGltcG9ydCBvcmcuZWNsaXBzZS5qZHQuaW50ZXJuYWwuY29tcGlsZXIuYXN0
LkxhYmVsZWRTdGF0ZW1lbnQ7CkBAIC01MiwxMCArNTMsMTIgQEAgcHVibGljIGNsYXNzIEZsb3dD
b250ZXh0IGltcGxlbWVudHMgVHlwZUNvbnN0YW50cyB7CiAJcHVibGljIGZpbmFsIHN0YXRpYyBG
bG93Q29udGV4dCBOb3RDb250aW51YWJsZUNvbnRleHQgPSBuZXcgRmxvd0NvbnRleHQobnVsbCwg
bnVsbCk7CiAJcHVibGljIEFTVE5vZGUgYXNzb2NpYXRlZE5vZGU7CiAJcHVibGljIEZsb3dDb250
ZXh0IHBhcmVudDsKLQlwdWJsaWMgTnVsbEluZm9SZWdpc3RyeSBpbml0c09uRmluYWxseTsKKwlw
dWJsaWMgRmxvd0luZm8gaW5pdHNPbkZpbmFsbHk7CiAJCS8vIG9ubHkgdXNlZCB3aXRoaW4gdHJ5
IGJsb2NrczsgcmVtZW1iZXJzIHVwc3RyZWFtIGZsb3cgaW5mbyBtZXJnZWRXaXRoCiAJCS8vIGFu
eSBudWxsIHJlbGF0ZWQgb3BlcmF0aW9uIGhhcHBlbmluZyB3aXRoaW4gdGhlIHRyeSBibG9jawot
CisJLyoqIElmIG5vbi1udWxsIHRoaXMgc2lnbmFscyB0aGUgb3V0ZXJtb3N0IHNjb3BlIGluIHdo
aWNoIG5vdCBwb3RlbnRpYWxseSB0aHJvd2luZyBleHByZXNzaW9uIGhhcyBiZWVuIHNlZW4sIHll
dC4gKi8KKwlwdWJsaWMgQmxvY2tTY29wZSBleGNlcHRpb25sZXNzSW5TY29wZTsKKwkKIAlwdWJs
aWMgaW50IHRhZ0JpdHM7CiAKIAkvLyBhcnJheSB0byBzdG9yZSB0aGUgcHJvdmlkZWQgYW5kIGV4
cGVjdGVkIHR5cGVzIGZyb20gdGhlIHBvdGVudGlhbCBlcnJvciBsb2NhdGlvbiAoZm9yIGRpc3Bs
YXkgaW4gZXJyb3IgbWVzc2FnZXMpOgpAQCAtNTUwLDYgKzU1MywzNCBAQCBwdWJsaWMgY2hhcltd
IGxhYmVsTmFtZSgpIHsKIAlyZXR1cm4gbnVsbDsKIH0KIAorcHVibGljIHZvaWQgbWFya0ZpbmFs
bHlOdWxsU3RhdHVzKEJsb2NrU2NvcGUgY3VycmVudFNjb3BlLCBMb2NhbFZhcmlhYmxlQmluZGlu
ZyBsb2NhbCwgaW50IG51bGxTdGF0dXMpIHsKKwlpZiAodGhpcy5pbml0c09uRmluYWxseSA9PSBu
dWxsKSB7CisJCXJldHVybjsKKwl9CisJaWYgKHRoaXMuZXhjZXB0aW9ubGVzc0luU2NvcGUgPT0g
Y3VycmVudFNjb3BlKSB7CisJCS8vIG5vIGV4Y2VwdGlvbiBzZWVuOiBjb25zaWRlciB0aGlzIG51
bGxTdGF0dXMgYXMgdW5jb25kaXRpb25hbGx5IGdpdmVuCisJCXRoaXMuaW5pdHNPbkZpbmFsbHku
bWFya051bGxTdGF0dXMobG9jYWwsIG51bGxTdGF0dXMpOworCQlyZXR1cm47CisJfQorCS8vIGV4
Y2VwdGlvbiBzZWVuLCB3ZWFrZW4gc3RhdHVzIHRvIHBvdGVudGlhbGx5XyBhbmQgbWVyZ2Ugd2l0
aCBwcmV2aW91cworCVVuY29uZGl0aW9uYWxGbG93SW5mbyBuZXdJbmZvID0gRmxvd0luZm8uaW5p
dGlhbCgoKFVuY29uZGl0aW9uYWxGbG93SW5mbyl0aGlzLmluaXRzT25GaW5hbGx5KS5tYXhGaWVs
ZENvdW50KTsKKwluZXdJbmZvLm1hcmtOdWxsU3RhdHVzKGxvY2FsLCBudWxsU3RhdHVzKTsKKwl0
aGlzLmluaXRzT25GaW5hbGx5ID0gdGhpcy5pbml0c09uRmluYWxseS5tZXJnZWRXaXRoKG5ld0lu
Zm8pOworfQorCitwdWJsaWMgdm9pZCBtZXJnZUZpbmFsbHlOdWxsSW5mbyhCbG9ja1Njb3BlIGN1
cnJlbnRTY29wZSwgRmxvd0luZm8gZmxvd0luZm8sIEJsb2NrIGJsb2NrKSB7CisJaWYgKHRoaXMu
aW5pdHNPbkZpbmFsbHkgPT0gbnVsbCkgeworCQlyZXR1cm47CisJfQorCWlmICh0aGlzLmV4Y2Vw
dGlvbmxlc3NJblNjb3BlID09IGN1cnJlbnRTY29wZSkgeworCQkvLyBubyBleGNlcHRpb24gc2Vl
bjogYWRvcHQgbnVsbCBpbmZvIGFzIHVuY29uZGl0aW9uYWwKKwkJdGhpcy5pbml0c09uRmluYWxs
eS5hZGROdWxsSW5mb0Zyb20oZmxvd0luZm8pOworCQlyZXR1cm47CisJfQorCS8vIGV4Y2VwdGlv
biBzZWVuOiBtZXJnZSBmbG93SW5mbyB3aXRoIGV4aXN0aW5nIHNpbmNlIGJvdGggcGF0aHMgYXJl
IHBvc3NpYmxlCisJdGhpcy5pbml0c09uRmluYWxseSA9IHRoaXMuaW5pdHNPbkZpbmFsbHkubWVy
Z2VkV2l0aChmbG93SW5mby51bmNvbmRpdGlvbmFsQ29weSgpKTsKK30KKwogcHVibGljIHZvaWQg
cmVjb3JkQnJlYWtGcm9tKEZsb3dJbmZvIGZsb3dJbmZvKSB7CiAJLy8gZGVmYXVsdCBpbXBsZW1l
bnRhdGlvbjogZG8gbm90aGluZwogfQpkaWZmIC0tZ2l0IGEvb3JnLmVjbGlwc2UuamR0LmNvcmUv
Y29tcGlsZXIvb3JnL2VjbGlwc2UvamR0L2ludGVybmFsL2NvbXBpbGVyL2Zsb3cvVW5jb25kaXRp
b25hbEZsb3dJbmZvLmphdmEgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNs
aXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvZmxvdy9VbmNvbmRpdGlvbmFsRmxvd0luZm8uamF2
YQppbmRleCBiODZmZGRmLi43ZDA1ODdjIDEwMDY0NAotLS0gYS9vcmcuZWNsaXBzZS5qZHQuY29y
ZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvZmxvdy9VbmNvbmRp
dGlvbmFsRmxvd0luZm8uamF2YQorKysgYi9vcmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9v
cmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvZmxvdy9VbmNvbmRpdGlvbmFsRmxvd0lu
Zm8uamF2YQpAQCAtMTEwLDYgKzExMCw3IEBAIHByaXZhdGUgRmxvd0luZm8gYWRkSW5mb0Zyb20o
Rmxvd0luZm8gaW5pdHMsIGJvb2xlYW4gaGFuZGxlSW5pdHMpIHsKIAkJLy8gdW5pb24gb2YgcG90
ZW50aWFsbHkgc2V0IG9uZXMKIAkJdGhpcy5wb3RlbnRpYWxJbml0cyB8PSBvdGhlckluaXRzLnBv
dGVudGlhbEluaXRzOwogCX0KKwlpbnQgY2hlY2tJbmRleCA9IGhhbmRsZUluaXRzID8gMCA6IDI7
CiAJCiAJLy8gY29tYmluZSBudWxsIGluZm9ybWF0aW9uCiAJYm9vbGVhbiB0aGlzSGFkTnVsbHMg
PSAodGhpcy50YWdCaXRzICYgTlVMTF9GTEFHX01BU0spICE9IDAsCkBAIC0xNzUsMTAgKzE3Niwx
MCBAQCBwcml2YXRlIEZsb3dJbmZvIGFkZEluZm9Gcm9tKEZsb3dJbmZvIGluaXRzLCBib29sZWFu
IGhhbmRsZUluaXRzKSB7CiAJCQlpZiAob3RoZXJJbml0cy5leHRyYSAhPSBudWxsKSB7CiAJCQkJ
Ly8gYm90aCBzaWRlcyBoYXZlIGV4dHJhIHN0b3JhZ2UKIAkJCQlpbnQgbGVuZ3RoLCBvdGhlckxl
bmd0aDsKLQkJCQlpZiAoKGxlbmd0aCA9IHRoaXMuZXh0cmFbMF0ubGVuZ3RoKSA8Ci0JCQkJCQko
b3RoZXJMZW5ndGggPSBvdGhlckluaXRzLmV4dHJhWzBdLmxlbmd0aCkpIHsKKwkJCQlpZiAoKGxl
bmd0aCA9IHRoaXMuZXh0cmFbY2hlY2tJbmRleF0ubGVuZ3RoKSA8CisJCQkJCQkob3RoZXJMZW5n
dGggPSBvdGhlckluaXRzLmV4dHJhW2NoZWNrSW5kZXhdLmxlbmd0aCkpIHsKIAkJCQkJLy8gY3Vy
cmVudCBzdG9yYWdlIGlzIHNob3J0ZXIgLT4gZ3JvdyBjdXJyZW50Ci0JCQkJCWZvciAoaW50IGog
PSAwOyBqIDwgZXh0cmFMZW5ndGg7IGorKykgeworCQkJCQlmb3IgKGludCBqID0gY2hlY2tJbmRl
eDsgaiA8IGV4dHJhTGVuZ3RoOyBqKyspIHsKIAkJCQkJCVN5c3RlbS5hcnJheWNvcHkodGhpcy5l
eHRyYVtqXSwgMCwKIAkJCQkJCQkodGhpcy5leHRyYVtqXSA9IG5ldyBsb25nW290aGVyTGVuZ3Ro
XSksIDAsIGxlbmd0aCk7CiAJCQkJCX0KQEAgLTIwMiwxMyArMjAzLDE0IEBAIHByaXZhdGUgRmxv
d0luZm8gYWRkSW5mb0Zyb20oRmxvd0luZm8gaW5pdHMsIGJvb2xlYW4gaGFuZGxlSW5pdHMpIHsK
IAkJfSBlbHNlIGlmIChvdGhlckluaXRzLmV4dHJhICE9IG51bGwpIHsKIAkJCS8vIG5vIHN0b3Jh
Z2UgaGVyZSwgYnV0IG90aGVyIGhhcyBleHRyYSBzdG9yYWdlLgogCQkJLy8gc2hvcnRjdXQgcmVn
dWxhciBjb3B5IGJlY2F1c2UgYXJyYXkgY29weSBpcyBiZXR0ZXIKLQkJCWludCBvdGhlckxlbmd0
aDsKKwkJCWludCBvdGhlckxlbmd0aCA9IG90aGVySW5pdHMuZXh0cmFbY2hlY2tJbmRleF0ubGVu
Z3RoOwogCQkJdGhpcy5leHRyYSA9IG5ldyBsb25nW2V4dHJhTGVuZ3RoXVtdOwotCQkJU3lzdGVt
LmFycmF5Y29weShvdGhlckluaXRzLmV4dHJhWzBdLCAwLAotCQkJCSh0aGlzLmV4dHJhWzBdID0g
bmV3IGxvbmdbb3RoZXJMZW5ndGggPQotCQkJCQlvdGhlckluaXRzLmV4dHJhWzBdLmxlbmd0aF0p
LCAwLCBvdGhlckxlbmd0aCk7Ci0JCQlTeXN0ZW0uYXJyYXljb3B5KG90aGVySW5pdHMuZXh0cmFb
MV0sIDAsCi0JCQkJKHRoaXMuZXh0cmFbMV0gPSBuZXcgbG9uZ1tvdGhlckxlbmd0aF0pLCAwLCBv
dGhlckxlbmd0aCk7CisJCQlpZiAoaGFuZGxlSW5pdHMpIHsKKwkJCQlTeXN0ZW0uYXJyYXljb3B5
KG90aGVySW5pdHMuZXh0cmFbMF0sIDAsCisJCQkJCSh0aGlzLmV4dHJhWzBdID0gbmV3IGxvbmdb
b3RoZXJMZW5ndGhdKSwgMCwgb3RoZXJMZW5ndGgpOworCQkJCVN5c3RlbS5hcnJheWNvcHkob3Ro
ZXJJbml0cy5leHRyYVsxXSwgMCwKKwkJCQkJKHRoaXMuZXh0cmFbMV0gPSBuZXcgbG9uZ1tvdGhl
ckxlbmd0aF0pLCAwLCBvdGhlckxlbmd0aCk7CisJCQl9CiAJCQlpZiAob3RoZXJIYXNOdWxscykg
ewogCQkJCWZvciAoaW50IGogPSAyOyBqIDwgZXh0cmFMZW5ndGg7IGorKykgewogCQkJCQlTeXN0
ZW0uYXJyYXljb3B5KG90aGVySW5pdHMuZXh0cmFbal0sIDAsCkBAIC0xNzA0LDEzICsxNzA2LDE0
IEBAIHB1YmxpYyBVbmNvbmRpdGlvbmFsRmxvd0luZm8gbWVyZ2VkV2l0aChVbmNvbmRpdGlvbmFs
Rmxvd0luZm8gb3RoZXJJbml0cykgewogCQlpbnQgbWVyZ2VMaW1pdCA9IDAsIGNvcHlMaW1pdCA9
IDAsIHJlc2V0TGltaXQgPSAwOwogCQlpbnQgaTsKIAkJaWYgKHRoaXMuZXh0cmEgIT0gbnVsbCkg
eworCQkJaW50IGZpcnN0SW5kID0gdGhpcy5leHRyYVswXSAhPSBudWxsID8gMCA6IDI7CiAJCQlp
ZiAob3RoZXJJbml0cy5leHRyYSAhPSBudWxsKSB7CiAJCQkJLy8gYm90aCBzaWRlcyBoYXZlIGV4
dHJhIHN0b3JhZ2UKIAkJCQlpbnQgbGVuZ3RoLCBvdGhlckxlbmd0aDsKLQkJCQlpZiAoKGxlbmd0
aCA9IHRoaXMuZXh0cmFbMF0ubGVuZ3RoKSA8Ci0JCQkJCQkob3RoZXJMZW5ndGggPSBvdGhlcklu
aXRzLmV4dHJhWzBdLmxlbmd0aCkpIHsKKwkJCQlpZiAoKGxlbmd0aCA9IHRoaXMuZXh0cmFbZmly
c3RJbmRdLmxlbmd0aCkgPAorCQkJCQkJKG90aGVyTGVuZ3RoID0gb3RoZXJJbml0cy5leHRyYVtm
aXJzdEluZF0ubGVuZ3RoKSkgewogCQkJCQkvLyBjdXJyZW50IHN0b3JhZ2UgaXMgc2hvcnRlciAt
PiBncm93IGN1cnJlbnQKLQkJCQkJZm9yIChpbnQgaiA9IDA7IGogPCBleHRyYUxlbmd0aDsgaisr
KSB7CisJCQkJCWZvciAoaW50IGogPSBmaXJzdEluZDsgaiA8IGV4dHJhTGVuZ3RoOyBqKyspIHsK
IAkJCQkJCVN5c3RlbS5hcnJheWNvcHkodGhpcy5leHRyYVtqXSwgMCwKIAkJCQkJCQkodGhpcy5l
eHRyYVtqXSA9IG5ldyBsb25nW290aGVyTGVuZ3RoXSksIDAsIGxlbmd0aCk7CiAJCQkJCX0KQEAg
LTE3MzQsNyArMTczNyw3IEBAIHB1YmxpYyBVbmNvbmRpdGlvbmFsRmxvd0luZm8gbWVyZ2VkV2l0
aChVbmNvbmRpdGlvbmFsRmxvd0luZm8gb3RoZXJJbml0cykgewogCQkJCX0KIAkJCX0KIAkJCWVs
c2UgewotCQkJCXJlc2V0TGltaXQgPSB0aGlzLmV4dHJhWzBdLmxlbmd0aDsKKwkJCQlyZXNldExp
bWl0ID0gdGhpcy5leHRyYVtmaXJzdEluZF0ubGVuZ3RoOwogCQkJCWlmIChDT1ZFUkFHRV9URVNU
X0ZMQUcpIHsKIAkJCQkJaWYoQ292ZXJhZ2VUZXN0SWQgPT0gMzUpIHsKIAkJCQkJCXRocm93IG5l
dyBBc3NlcnRpb25GYWlsZWRFeGNlcHRpb24oIkNPVkVSQUdFIDM1Iik7IC8vJE5PTi1OTFMtMSQK
QEAgLTE3NjAsOSArMTc2MywxMyBAQCBwdWJsaWMgVW5jb25kaXRpb25hbEZsb3dJbmZvIG1lcmdl
ZFdpdGgoVW5jb25kaXRpb25hbEZsb3dJbmZvIG90aGVySW5pdHMpIHsKIAkJfQogICAgICAgICAv
LyBNQUNSTyA6J2IsJ2VzL251bGxCaXRcKC5cKS9leHRyYVtcMSArIDFdW2ldL2cKIAkJLy8gbWFu
YWdlIGRlZmluaXRlIGFzc2lnbm1lbnQKLQkJZm9yIChpID0gMDsgaSA8IG1lcmdlTGltaXQ7IGkr
KykgewotCSAgCQl0aGlzLmV4dHJhWzBdW2ldICY9IG90aGVySW5pdHMuZXh0cmFbMF1baV07Ci0J
ICAJCXRoaXMuZXh0cmFbMV1baV0gfD0gb3RoZXJJbml0cy5leHRyYVsxXVtpXTsKKwkJaWYgKHRo
aXMuZXh0cmFbMF0gIT0gbnVsbCkgeworCQkJZm9yIChpID0gMDsgaSA8IG1lcmdlTGltaXQ7IGkr
KykgeworCQkgIAkJdGhpcy5leHRyYVswXVtpXSAmPSBvdGhlckluaXRzLmV4dHJhWzBdW2ldOwor
CQkgIAkJdGhpcy5leHRyYVsxXVtpXSB8PSBvdGhlckluaXRzLmV4dHJhWzFdW2ldOworCQkJfQor
CQl9IGVsc2UgeworCQkJaSA9IDI7CiAJCX0KIAkJZm9yICg7IGkgPCBjb3B5TGltaXQ7IGkrKykg
ewogCQkgIAl0aGlzLmV4dHJhWzFdW2ldID0gb3RoZXJJbml0cy5leHRyYVsxXVtpXTsK
</data>

          </attachment>
      

    </bug>

</bugzilla>