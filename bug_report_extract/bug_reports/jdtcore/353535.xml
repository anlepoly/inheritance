<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>353535</bug_id>
          
          <creation_ts>2011-08-02 02:15:00 -0400</creation_ts>
          <short_desc>Eclipse compiler generates wrong bytecode for nested try-with-resources statements</short_desc>
          <delta_ts>2011-09-14 12:19:16 -0400</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>3.7</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>major</bug_severity>
          <target_milestone>3.7.1</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter>vsb</reporter>
          <assigned_to name="Olivier Thomann">Olivier_Thomann</assigned_to>
          <cc>amj87.iitr</cc>
    
    <cc>cossacking</cc>
    
    <cc>f.ulbricht</cc>
    
    <cc>jarthana</cc>
    
    <cc>Olivier_Thomann</cc>
    
    <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      <flag name="review"
          id="45133"
          type_id="1"
          status="+"
          setter="srikanth_sankaran"
    />

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>1972696</commentid>
    <comment_count>0</comment_count>
    <who name="">vsb</who>
    <bug_when>2011-08-02 02:15:54 -0400</bug_when>
    <thetext>Simple example to reproduce:

package test;

public class Main {
    public static void main(String[] args) throws Throwable {
        int tmp;
        try (A a = null) {
            try (A b = null) {
                tmp = 0;
            }
        }
    }
}

class A implements AutoCloseable {
    @Override
    public void close() {
    }
}

When this code is compiled and run under Eclipse, following exception throwed:

Exception in thread &quot;main&quot; java.lang.VerifyError: Stack map does not match the one at exception handler 103 in method test.Main.main([Ljava/lang/String;)V at offset 4
	at java.lang.Class.getDeclaredMethods0(Native Method)
	at java.lang.Class.privateGetDeclaredMethods(Class.java:2442)
	at java.lang.Class.getMethod0(Class.java:2685)
	at java.lang.Class.getMethod(Class.java:1620)
	at sun.launcher.LauncherHelper.getMainMethod(LauncherHelper.java:484)
	at sun.launcher.LauncherHelper.checkAndLoadMain(LauncherHelper.java:476)

When using Oracle Java compiler from JDK 7.0, this code compiles and run without problems.

I used component named &quot;Eclipse Java Development Tools Patch for Java 7 Support (BETA) 1.0.0.v20110714-1300&quot; to enable Java 7 support.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1972703</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-08-02 02:43:02 -0400</bug_when>
    <thetext>I&apos;ll take a look.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1972711</commentid>
    <comment_count>2</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-08-02 03:05:27 -0400</bug_when>
    <thetext>May be a dup or variant of bug 351653.
Very similar to that problem, the verify error goes away if
you initialize the variable tmp.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1975309</commentid>
    <comment_count>3</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-08-08 04:45:23 -0400</bug_when>
    <thetext>*** Bug 354108 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1975310</commentid>
    <comment_count>4</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-08-08 04:46:24 -0400</bug_when>
    <thetext>Another test case from bug 354108

import java.io.ByteArrayInputStream;
import java.io.InputStream;

public class Test {

public static void main(String[] args) throws Exception {
  int b;
  try (final InputStream in = new ByteArrayInputStream(new byte[] { 42 })) {
    b = in.read();
  }
}
}</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1978967</commentid>
    <comment_count>5</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-08-15 16:04:40 -0400</bug_when>
    <thetext>Unless I missed something, this seems to be fixed into the HEAD stream.
I&apos;ll verify the 3.7 maintenance stream.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1978972</commentid>
    <comment_count>6</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-08-15 16:10:33 -0400</bug_when>
    <thetext>It looks like this is also fixed into version v_B74_R37x.
Vbs, could you please verify with either one of the latest maintenance build (3.7.x or 4.1.x) or one of the latest I build (3.8 or 4.2).</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1979127</commentid>
    <comment_count>7</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-08-16 03:23:52 -0400</bug_when>
    <thetext>(In reply to comment #5)
&gt; Unless I missed something, this seems to be fixed into the HEAD stream.
&gt; I&apos;ll verify the 3.7 maintenance stream.

Olivier, both Ayush and I could reproduce this in HEAD as well as
3.7.1 maintenance stream top of branch, using JDK 7b147.

I have released two disabled regression tests for these via

org.eclipse.jdt.core.tests.compiler.regression.TryWithResourcesStatementTest._test055() and

org.eclipse.jdt.core.tests.compiler.regression.TryWithResourcesStatementTest._test055a().

Thanks for looking into this.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1979232</commentid>
    <comment_count>8</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-08-16 07:44:50 -0400</bug_when>
    <thetext>(In reply to comment #7)
&gt; Olivier, both Ayush and I could reproduce this in HEAD as well as
&gt; 3.7.1 maintenance stream top of branch, using JDK 7b147.
Ok, I got it now. The option -preserveAllLocals needs to be used to reproduce the issue. I&apos;ll take a look today.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1979342</commentid>
    <comment_count>9</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-08-16 10:22:17 -0400</bug_when>
    <thetext>Ok, I know what is going on. Let&apos;s take the example from comment 4.
public static void main(String[] args) throws Exception {
  int b;
  try (final InputStream in = new ByteArrayInputStream(new byte[] { 42 })) {
    b = in.read();
  }
}
The uninitialized variable &apos;b&apos; that is initialized within the twr block has a wrong initialization range. Note that the javac code generation is not perfect as well for the local variable table. It considers only one interval where the variable is actually initialized on multiple intervals.

Here is the generated code:
  public static void main(java.lang.String[] args) throws java.lang.Exception;
     0  aconst_null
     1  astore_2
     2  aconst_null
     3  astore_3
     4  new java.io.ByteArrayInputStream [19]
     7  dup
     8  iconst_1
     9  newarray byte [8]
    11  dup
    12  iconst_0
    13  bipush 42
    15  bastore
    16  invokespecial java.io.ByteArrayInputStream(byte[]) [21]
    19  astore 4 [in]
    21  aload 4 [in]
    23  invokevirtual java.io.InputStream.read() : int [24]
    26  istore_1 [b]
    27  aload 4 [in]
    29  ifnull 75
    32  aload 4 [in]
    34  invokevirtual java.io.InputStream.close() : void [30]
    37  goto 75
    40  astore_2
    41  aload 4 [in]
    43  ifnull 51
    46  aload 4 [in]
    48  invokevirtual java.io.InputStream.close() : void [30]
    51  aload_2
    52  athrow
    53  astore_3
    54  aload_2
    55  ifnonnull 63
    58  aload_3
    59  astore_2
    60  goto 73
    63  aload_2
    64  aload_3
    65  if_acmpeq 73
    68  aload_2
    69  aload_3
    70  invokevirtual java.lang.Throwable.addSuppressed(java.lang.Throwable) : void [33]
    73  aload_2
    74  athrow
    75  getstatic java.lang.System.out : java.io.PrintStream [39]
    78  ldc &lt;String &quot;Done&quot;&gt; [45]
    80  invokevirtual java.io.PrintStream.println(java.lang.String) : void [47]
    83  return
      Exception Table:
        [pc: 21, pc: 27] -&gt; 40 when : java.lang.Throwable
        [pc: 4, pc: 53] -&gt; 53 when : java.lang.Throwable
      Line numbers:
        [pc: 0, line: 7]
        [pc: 21, line: 8]
        [pc: 27, line: 9]
        [pc: 75, line: 10]
        [pc: 83, line: 11]
      Local variable table:
        [pc: 0, pc: 84] local: args index: 0 type: java.lang.String[]
        [pc: 27, pc: 84] local: b index: 1 type: int
        [pc: 21, pc: 51] local: in index: 4 type: java.io.InputStream
      Stack map table: number of frames 6
        [pc: 40, full, stack: {java.lang.Throwable}, locals: {java.lang.String[], int, java.lang.Throwable, java.lang.Throwable, java.io.InputStream}]
        [pc: 51, chop 1 local(s)]
        [pc: 53, same_locals_1_stack_item, stack: {java.lang.Throwable}]
        [pc: 63, same]
        [pc: 73, same]
        [pc: 75, chop 2 local(s)]

You can see thgat the local b is considered to be initialized from 27 till the end of the method. If an exception occurs between line 4 and 27, b is not initialized when reaching the pc 53 (any exception handler), but the stack map in 53 is said to have the same locals from the stack at pc 40 minus the last local (chop at pc 51). This is wrong. The local at position 1 is actually not initialized so we should issue a full stack item instead of the actual stack item.
I&apos;ll investigate how to fix it.

Javac generates the following code:
  public static void main(String[] args) throws Exception;
      0  new ByteArrayInputStream [2]
      3  dup
      4  iconst_1
      5  newarray byte [8]
      7  dup
      8  iconst_0
      9  bipush 42
     11  bastore
     12  invokespecial ByteArrayInputStream(byte[]) [3]
     15  astore_2 [in]
     16  aconst_null
     17  astore_3
     18  aload_2 [in]
     19  invokevirtual InputStream.read() : int [4]
     22  istore_1 [b]
     23  getstatic System.out : PrintStream [5]
     26  iload_1 [b]
     27  invokevirtual PrintStream.println(int) : void [6]
     30  aload_2 [in]
     31  ifnull 106
     34  aload_3
     35  ifnull 56
     38  aload_2 [in]
     39  invokevirtual InputStream.close() : void [7]
     42  goto 106
     45  astore 4 [x2]
     47  aload_3
     48  aload 4 [x2]
     50  invokevirtual Throwable.addSuppressed(Throwable) : void [9]
     53  goto 106
     56  aload_2 [in]
     57  invokevirtual InputStream.close() : void [7]
     60  goto 106
     63  astore 4
     65  aload 4
     67  astore_3
     68  aload 4
     70  athrow
     71  astore 5
     73  aload_2 [in]
     74  ifnull 103
     77  aload_3
     78  ifnull 99
     81  aload_2 [in]
     82  invokevirtual InputStream.close() : void [7]
     85  goto 103
     88  astore 6 [x2]
     90  aload_3
     91  aload 6 [x2]
     93  invokevirtual Throwable.addSuppressed(Throwable) : void [9]
     96  goto 103
     99  aload_2 [in]
    100  invokevirtual InputStream.close() : void [7]
    103  aload 5
    105  athrow
    106  getstatic System.out : PrintStream [5]
    109  ldc &lt;String &quot;Done&quot;&gt; [10]
    111  invokevirtual PrintStream.println(String) : void [11]
    114  return
      Exception Table:
        [pc: 38, pc: 42] -&gt; 45 when : Throwable
        [pc: 18, pc: 30] -&gt; 63 when : Throwable
        [pc: 18, pc: 30] -&gt; 71 when : any
        [pc: 81, pc: 85] -&gt; 88 when : Throwable
        [pc: 63, pc: 73] -&gt; 71 when : any
      Line numbers:
        [pc: 0, line: 7]
        [pc: 18, line: 8]
        [pc: 23, line: 9]
        [pc: 30, line: 10]
        [pc: 63, line: 7]
        [pc: 71, line: 10]
        [pc: 106, line: 11]
        [pc: 114, line: 12]
      Local variable table:
        [pc: 47, pc: 53] local: x2 index: 4 type: Throwable
        [pc: 90, pc: 96] local: x2 index: 6 type: Throwable
        [pc: 16, pc: 106] local: in index: 2 type: InputStream
        [pc: 0, pc: 115] local: args index: 0 type: String[]
        [pc: 23, pc: 115] local: b index: 1 type: int
      Stack map table: number of frames 8
        [pc: 45, full, stack: {Throwable}, locals: {String[], int, InputStream, Throwable}]
        [pc: 56, same]
        [pc: 63, full, stack: {Throwable}, locals: {String[], _, InputStream, Throwable}]
        [pc: 71, same_locals_1_stack_item, stack: {Throwable}]
        [pc: 88, full, stack: {Throwable}, locals: {String[], _, InputStream, Throwable, _, Throwable}]
        [pc: 99, same]
        [pc: 103, same]
        [pc: 106, full, stack: {}, locals: {String[], int}]
}

You can see the full stack item that is showing an uninitialized variable at position 1. But their local variable entry for &apos;b&apos; is bogus as well.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1979420</commentid>
    <comment_count>10</comment_count>
      <attachid>201585</attachid>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-08-16 11:29:21 -0400</bug_when>
    <thetext>Created attachment 201585
Proposed fix + regression tests

Srikanth, please verify.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1980681</commentid>
    <comment_count>11</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2011-08-18 05:18:41 -0400</bug_when>
    <thetext>Analysis and fix look good.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1981089</commentid>
    <comment_count>12</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-08-18 13:08:17 -0400</bug_when>
    <thetext>Released for both HEAD and 3.7 maintenance streams.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1984294</commentid>
    <comment_count>13</comment_count>
    <who name="Jay Arthanareeswaran">jarthana</who>
    <bug_when>2011-08-25 06:57:15 -0400</bug_when>
    <thetext>Verified for 3.7 RC2 with build M20110824-0800.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1985840</commentid>
    <comment_count>14</comment_count>
    <who name="Olivier Thomann">Olivier_Thomann</who>
    <bug_when>2011-08-29 12:34:07 -0400</bug_when>
    <thetext>*** Bug 356018 has been marked as a duplicate of this bug. ***</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1993513</commentid>
    <comment_count>15</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-09-14 12:18:39 -0400</bug_when>
    <thetext>Verified for 3.8M2 using build I20110911-2000.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>1993515</commentid>
    <comment_count>16</comment_count>
    <who name="Ayushman Jain">amj87.iitr</who>
    <bug_when>2011-09-14 12:19:16 -0400</bug_when>
    <thetext>(In reply to comment #13)
&gt; Verified for 3.7 RC2 with build M20110824-0800.

This should be 3.7.1 and not 3.7 :)</thetext>
  </long_desc>
      
          <attachment
              isobsolete="0"
              ispatch="1"
              isprivate="0"
          >
            <attachid>201585</attachid>
            <date>2011-08-16 11:29:00 -0400</date>
            <delta_ts>2011-08-16 11:29:21 -0400</delta_ts>
            <desc>Proposed fix + regression tests</desc>
            <filename>patch_353535.txt</filename>
            <type>text/plain</type>
            <size>6072</size>
            <attacher name="Olivier Thomann">Olivier_Thomann</attacher>
            
              <data encoding="base64">IyMjIEVjbGlwc2UgV29ya3NwYWNlIFBhdGNoIDEuMA0KI1Agb3JnLmVjbGlwc2UuamR0LmNvcmUN
CkluZGV4OiBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29tcGlsZXIvYXN0L1Ry
eVN0YXRlbWVudC5qYXZhDQo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT09PT09PT09PT09PT09PT09PT09DQpSQ1MgZmlsZTogL2N2c3Jvb3QvZWNsaXBzZS9v
cmcuZWNsaXBzZS5qZHQuY29yZS9jb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50ZXJuYWwvY29t
cGlsZXIvYXN0L1RyeVN0YXRlbWVudC5qYXZhLHYNCnJldHJpZXZpbmcgcmV2aXNpb24gMS4xMjAN
CmRpZmYgLXUgLXIxLjEyMCBUcnlTdGF0ZW1lbnQuamF2YQ0KLS0tIGNvbXBpbGVyL29yZy9lY2xp
cHNlL2pkdC9pbnRlcm5hbC9jb21waWxlci9hc3QvVHJ5U3RhdGVtZW50LmphdmEJMjggSnVsIDIw
MTEgMTc6MDc6MDEgLTAwMDAJMS4xMjANCisrKyBjb21waWxlci9vcmcvZWNsaXBzZS9qZHQvaW50
ZXJuYWwvY29tcGlsZXIvYXN0L1RyeVN0YXRlbWVudC5qYXZhCTE2IEF1ZyAyMDExIDE1OjI4OjQ2
IC0wMDAwDQpAQCAtNjUsNiArNjUsNyBAQA0KIAkvLyBmb3IgbG9jYWwgdmFyaWFibGVzIHRhYmxl
IGF0dHJpYnV0ZXMNCiAJaW50IG1lcmdlZEluaXRTdGF0ZUluZGV4ID0gLTE7DQogCWludCBwcmVU
cnlJbml0U3RhdGVJbmRleCA9IC0xOw0KKwlpbnRbXSBwb3N0UmVzb3VyY2VzSW5pdFN0YXRlSW5k
ZXhlczsNCiAJaW50IG5hdHVyYWxFeGl0TWVyZ2VJbml0U3RhdGVJbmRleCA9IC0xOw0KIAlpbnRb
XSBjYXRjaEV4aXRJbml0U3RhdGVJbmRleGVzOw0KIAlwcml2YXRlIExvY2FsVmFyaWFibGVCaW5k
aW5nIHByaW1hcnlFeGNlcHRpb25WYXJpYWJsZTsNCkBAIC05Niw2ICs5NywxMiBAQA0KIAlpZiAo
dGhpcy5yZXR1cm5BZGRyZXNzVmFyaWFibGUgIT0gbnVsbCkgeyAvLyBUT0RPIChwaGlsaXBwZSkg
aWYgc3Vicm91dGluZSBpcyBlc2NhcGluZywgdW51c2VkDQogCQl0aGlzLnJldHVybkFkZHJlc3NW
YXJpYWJsZS51c2VGbGFnID0gTG9jYWxWYXJpYWJsZUJpbmRpbmcuVVNFRDsNCiAJfQ0KKwlpbnQg
cmVzb3VyY2VzTGVuZ3RoID0gdGhpcy5yZXNvdXJjZXMubGVuZ3RoOw0KKwlpZiAocmVzb3VyY2Vz
TGVuZ3RoID4gMCkgew0KKwkJdGhpcy5wb3N0UmVzb3VyY2VzSW5pdFN0YXRlSW5kZXhlcyA9IG5l
dyBpbnRbcmVzb3VyY2VzTGVuZ3RoXTsNCisJfQ0KKw0KKw0KIAlpZiAodGhpcy5zdWJSb3V0aW5l
U3RhcnRMYWJlbCA9PSBudWxsKSB7DQogCQkvLyBubyBmaW5hbGx5IGJsb2NrIC0tIHRoaXMgaXMg
YSBzaW1wbGlmaWVkIGNvcHkgb2YgdGhlIGVsc2UgcGFydA0KIAkJLy8gcHJvY2VzcyB0aGUgdHJ5
IGJsb2NrIGluIGEgY29udGV4dCBoYW5kbGluZyB0aGUgbG9jYWwgZXhjZXB0aW9ucy4NCkBAIC0x
MTQsOCArMTIxLDkgQEANCiAJCS8vIG9ubHkgdHJ5IGJsb2NrcyBpbml0aWFsaXplIHRoYXQgbWVt
YmVyIC0gbWF5IGNvbnNpZGVyIGNyZWF0aW5nIGENCiAJCS8vIHNlcGFyYXRlIGNsYXNzIGlmIG5l
ZWRlZA0KIA0KLQkJZm9yIChpbnQgaSA9IDAsIG1heCA9IHRoaXMucmVzb3VyY2VzLmxlbmd0aDsg
aSA8IG1heDsgaSsrKSB7DQorCQlmb3IgKGludCBpID0gMDsgaSA8IHJlc291cmNlc0xlbmd0aDsg
aSsrKSB7DQogCQkJZmxvd0luZm8gPSB0aGlzLnJlc291cmNlc1tpXS5hbmFseXNlQ29kZShjdXJy
ZW50U2NvcGUsIGhhbmRsaW5nQ29udGV4dCwgZmxvd0luZm8uY29weSgpKTsNCisJCQl0aGlzLnBv
c3RSZXNvdXJjZXNJbml0U3RhdGVJbmRleGVzW2ldID0gY3VycmVudFNjb3BlLm1ldGhvZFNjb3Bl
KCkucmVjb3JkSW5pdGlhbGl6YXRpb25TdGF0ZXMoZmxvd0luZm8pOw0KIAkJCXRoaXMucmVzb3Vy
Y2VzW2ldLmJpbmRpbmcudXNlRmxhZyA9IExvY2FsVmFyaWFibGVCaW5kaW5nLlVTRUQ7IC8vIElz
IGltcGxpY2l0bHkgdXNlZCBhbnl3YXlzLg0KIAkJCVR5cGVCaW5kaW5nIHR5cGUgPSB0aGlzLnJl
c291cmNlc1tpXS5iaW5kaW5nLnR5cGU7DQogCQkJaWYgKHR5cGUgIT0gbnVsbCAmJiB0eXBlLmlz
VmFsaWRCaW5kaW5nKCkpIHsNCkBAIC0yMzksOCArMjQ3LDkgQEANCiAJCS8vIG9ubHkgdHJ5IGJs
b2NrcyBpbml0aWFsaXplIHRoYXQgbWVtYmVyIC0gbWF5IGNvbnNpZGVyIGNyZWF0aW5nIGENCiAJ
CS8vIHNlcGFyYXRlIGNsYXNzIGlmIG5lZWRlZA0KIA0KLQkJZm9yIChpbnQgaSA9IDAsIG1heCA9
IHRoaXMucmVzb3VyY2VzLmxlbmd0aDsgaSA8IG1heDsgaSsrKSB7DQorCQlmb3IgKGludCBpID0g
MDsgaSA8IHJlc291cmNlc0xlbmd0aDsgaSsrKSB7DQogCQkJZmxvd0luZm8gPSB0aGlzLnJlc291
cmNlc1tpXS5hbmFseXNlQ29kZShjdXJyZW50U2NvcGUsIGhhbmRsaW5nQ29udGV4dCwgZmxvd0lu
Zm8uY29weSgpKTsNCisJCQl0aGlzLnBvc3RSZXNvdXJjZXNJbml0U3RhdGVJbmRleGVzW2ldID0g
Y3VycmVudFNjb3BlLm1ldGhvZFNjb3BlKCkucmVjb3JkSW5pdGlhbGl6YXRpb25TdGF0ZXMoZmxv
d0luZm8pOw0KIAkJCXRoaXMucmVzb3VyY2VzW2ldLmJpbmRpbmcudXNlRmxhZyA9IExvY2FsVmFy
aWFibGVCaW5kaW5nLlVTRUQ7IC8vIElzIGltcGxpY2l0bHkgdXNlZCBhbnl3YXlzLg0KIAkJCVR5
cGVCaW5kaW5nIHR5cGUgPSB0aGlzLnJlc291cmNlc1tpXS5iaW5kaW5nLnR5cGU7DQogCQkJaWYg
KHR5cGUgIT0gbnVsbCAmJiB0eXBlLmlzVmFsaWRCaW5kaW5nKCkpIHsNCkBAIC00NjIsNyArNDcx
LDggQEANCiAJCQljb2RlU3RyZWFtLnN0b3JlKHRoaXMuY2F1Z2h0VGhyb3dhYmxlVmFyaWFibGUs
IGZhbHNlIC8qIHZhbHVlIG5vdCByZXF1aXJlZCAqLyk7DQogCQkJY29kZVN0cmVhbS5hZGRWYXJp
YWJsZSh0aGlzLmNhdWdodFRocm93YWJsZVZhcmlhYmxlKTsNCiAJCQlmb3IgKGludCBpID0gMDsg
aSA8PSByZXNvdXJjZUNvdW50OyBpKyspIHsNCi0JCQkJdGhpcy5yZXNvdXJjZUV4Y2VwdGlvbkxh
YmVsc1tpXSA9IG5ldyBFeGNlcHRpb25MYWJlbChjb2RlU3RyZWFtLCB0aGlzLnNjb3BlLmdldEph
dmFMYW5nVGhyb3dhYmxlKCkpOw0KKwkJCQkvLyBwdXQgbnVsbCBmb3IgdGhlIGV4Y2VwdGlvbiB0
eXBlIHRvIHRyZWF0IHRoZW0gYXMgYW55IGV4Y2VwdGlvbiBoYW5kbGVycyAoZXF1aXZhbGVudCB0
byBhIHRyeS9maW5hbGx5KQ0KKwkJCQl0aGlzLnJlc291cmNlRXhjZXB0aW9uTGFiZWxzW2ldID0g
bmV3IEV4Y2VwdGlvbkxhYmVsKGNvZGVTdHJlYW0sIG51bGwpOw0KIAkJCQl0aGlzLnJlc291cmNl
RXhjZXB0aW9uTGFiZWxzW2ldLnBsYWNlU3RhcnQoKTsNCiAJCQkJaWYgKGkgPCByZXNvdXJjZUNv
dW50KSB7DQogCQkJCQl0aGlzLnJlc291cmNlc1tpXS5nZW5lcmF0ZUNvZGUodGhpcy5zY29wZSwg
Y29kZVN0cmVhbSk7IC8vIEluaXRpYWxpemUgcmVzb3VyY2VzIC4uLg0KQEAgLTQ4MSwxMyArNDkx
LDIwIEBADQogCQkJCQlpZiAoaSA+IDApIHsNCiAJCQkJCQlpbnQgaW52b2tlQ2xvc2VTdGFydFBj
ID0gY29kZVN0cmVhbS5wb3NpdGlvbjsgLy8gaHR0cHM6Ly9idWdzLmVjbGlwc2Uub3JnL2J1Z3Mv
c2hvd19idWcuY2dpP2lkPTM0Mzc4NQ0KIAkJCQkJCWNvZGVTdHJlYW0ubG9hZChsb2NhbFZhcmlh
YmxlKTsNCi0JCQkJICAgIAljb2RlU3RyZWFtLmlmbnVsbChleGl0TGFiZWwpOw0KLQkJCQkgICAg
CWNvZGVTdHJlYW0ubG9hZChsb2NhbFZhcmlhYmxlKTsNCi0JCQkJICAgIAljb2RlU3RyZWFtLmlu
dm9rZUF1dG9DbG9zZWFibGVDbG9zZShsb2NhbFZhcmlhYmxlLnR5cGUpOw0KLQkJCQkgICAgCWNv
ZGVTdHJlYW0ucmVjb3JkUG9zaXRpb25zRnJvbShpbnZva2VDbG9zZVN0YXJ0UGMsIHRoaXMudHJ5
QmxvY2suc291cmNlRW5kKTsJDQotCQkJCSAgICB9DQorCQkJCQkJY29kZVN0cmVhbS5pZm51bGwo
ZXhpdExhYmVsKTsNCisJCQkJCQljb2RlU3RyZWFtLmxvYWQobG9jYWxWYXJpYWJsZSk7DQorCQkJ
CQkJY29kZVN0cmVhbS5pbnZva2VBdXRvQ2xvc2VhYmxlQ2xvc2UobG9jYWxWYXJpYWJsZS50eXBl
KTsNCisJCQkJCQljb2RlU3RyZWFtLnJlY29yZFBvc2l0aW9uc0Zyb20oaW52b2tlQ2xvc2VTdGFy
dFBjLCB0aGlzLnRyeUJsb2NrLnNvdXJjZUVuZCk7DQorCQkJCQl9DQogCQkJCQljb2RlU3RyZWFt
LmdvdG9fKGV4aXRMYWJlbCk7IC8vIHNraXAgb3ZlciB0aGUgY2F0Y2ggYmxvY2suDQogCQkJCX0N
CisNCisJCQkJaWYgKGkgPiAwKSB7DQorCQkJCQkvLyBpIGlzIG9mZiBieSBvbmUNCisJCQkJCWNv
ZGVTdHJlYW0ucmVtb3ZlTm90RGVmaW5pdGVseUFzc2lnbmVkVmFyaWFibGVzKGN1cnJlbnRTY29w
ZSwgdGhpcy5wb3N0UmVzb3VyY2VzSW5pdFN0YXRlSW5kZXhlc1tpIC0gMV0pOw0KKwkJCQkJY29k
ZVN0cmVhbS5hZGREZWZpbml0ZWx5QXNzaWduZWRWYXJpYWJsZXMoY3VycmVudFNjb3BlLCB0aGlz
LnBvc3RSZXNvdXJjZXNJbml0U3RhdGVJbmRleGVzW2kgLSAxXSk7DQorCQkJCX0NCisNCiAJCQkJ
Y29kZVN0cmVhbS5wdXNoRXhjZXB0aW9uT25TdGFjayh0aGlzLnNjb3BlLmdldEphdmFMYW5nVGhy
b3dhYmxlKCkpOw0KIAkJCQl0aGlzLnJlc291cmNlRXhjZXB0aW9uTGFiZWxzW2ldLnBsYWNlKCk7
DQogCQkJCWlmIChpID09IHJlc291cmNlQ291bnQpIHsgDQojUCBvcmcuZWNsaXBzZS5qZHQuY29y
ZS50ZXN0cy5jb21waWxlcg0KSW5kZXg6IHNyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9j
b21waWxlci9yZWdyZXNzaW9uL1RyeVdpdGhSZXNvdXJjZXNTdGF0ZW1lbnRUZXN0LmphdmENCj09
PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09
PT09PT09PT0NClJDUyBmaWxlOiAvY3Zzcm9vdC9lY2xpcHNlL29yZy5lY2xpcHNlLmpkdC5jb3Jl
LnRlc3RzLmNvbXBpbGVyL3NyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9y
ZWdyZXNzaW9uL1RyeVdpdGhSZXNvdXJjZXNTdGF0ZW1lbnRUZXN0LmphdmEsdg0KcmV0cmlldmlu
ZyByZXZpc2lvbiAxLjMNCmRpZmYgLXUgLXIxLjMgVHJ5V2l0aFJlc291cmNlc1N0YXRlbWVudFRl
c3QuamF2YQ0KLS0tIHNyYy9vcmcvZWNsaXBzZS9qZHQvY29yZS90ZXN0cy9jb21waWxlci9yZWdy
ZXNzaW9uL1RyeVdpdGhSZXNvdXJjZXNTdGF0ZW1lbnRUZXN0LmphdmEJMTYgQXVnIDIwMTEgMDY6
NDk6MjQgLTAwMDAJMS4zDQorKysgc3JjL29yZy9lY2xpcHNlL2pkdC9jb3JlL3Rlc3RzL2NvbXBp
bGVyL3JlZ3Jlc3Npb24vVHJ5V2l0aFJlc291cmNlc1N0YXRlbWVudFRlc3QuamF2YQkxNiBBdWcg
MjAxMSAxNToyODo0NiAtMDAwMA0KQEAgLTE4LDcgKzE4LDcgQEANCiBwdWJsaWMgY2xhc3MgVHJ5
V2l0aFJlc291cmNlc1N0YXRlbWVudFRlc3QgZXh0ZW5kcyBBYnN0cmFjdFJlZ3Jlc3Npb25UZXN0
IHsNCiANCiBzdGF0aWMgew0KLS8vCVRFU1RTX05BTUVTID0gbmV3IFN0cmluZ1tdIHsgInRlc3Qw
NTMiIH07DQorLy8JVEVTVFNfTkFNRVMgPSBuZXcgU3RyaW5nW10geyAidGVzdDA1NSIsICJ0ZXN0
MDU1YSIgfTsNCiAvLwlURVNUU19OVU1CRVJTID0gbmV3IGludFtdIHsgNTAgfTsNCiAvLwlURVNU
U19SQU5HRSA9IG5ldyBpbnRbXSB7IDExLCAtMSB9Ow0KIH0NCkBAIC0zMzM4LDcgKzMzMzgsNyBA
QA0KIAkJIi0tLS0tLS0tLS1cbiIpOw0KIH0NCiAvLyBodHRwczovL2J1Z3MuZWNsaXBzZS5vcmcv
YnVncy9zaG93X2J1Zy5jZ2k/aWQ9MzUzNTM1ICh2ZXJpZnkgZXJyb3Igd2l0aCB0cnkgd2l0aCBy
ZXNvdXJjZXMpDQotcHVibGljIHZvaWQgX3Rlc3QwNTUoKSB7DQorcHVibGljIHZvaWQgdGVzdDA1
NSgpIHsNCiAJdGhpcy5ydW5Db25mb3JtVGVzdCgNCiAJCW5ldyBTdHJpbmdbXSB7DQogCQkJIlgu
amF2YSIsDQpAQCAtMzM1Nyw3ICszMzU3LDcgQEANCiAJCSJEb25lIik7DQogfQ0KIC8vIGh0dHBz
Oi8vYnVncy5lY2xpcHNlLm9yZy9idWdzL3Nob3dfYnVnLmNnaT9pZD0zNTM1MzUgKHZlcmlmeSBl
cnJvciB3aXRoIHRyeSB3aXRoIHJlc291cmNlcykNCi1wdWJsaWMgdm9pZCBfdGVzdDA1NWEoKSB7
DQorcHVibGljIHZvaWQgdGVzdDA1NWEoKSB7DQogCXRoaXMucnVuQ29uZm9ybVRlc3QoDQogCQlu
ZXcgU3RyaW5nW10gew0KIAkJCSJYLmphdmEiLA0K
</data>

          </attachment>
      

    </bug>

</bugzilla>