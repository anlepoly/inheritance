<?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
<!DOCTYPE bugzilla SYSTEM "https://bugs.eclipse.org/bugs/page.cgi?id=bugzilla.dtd">

<bugzilla version="4.4.7"
          urlbase="https://bugs.eclipse.org/bugs/"
          
          maintainer="webmaster@eclipse.org"
>

    <bug>
          <bug_id>429424</bug_id>
          
          <creation_ts>2014-03-02 18:29:00 -0500</creation_ts>
          <short_desc>[1.8][inference] Problem inferring type of method&apos;s parameter</short_desc>
          <delta_ts>2014-03-06 22:39:19 -0500</delta_ts>
          <reporter_accessible>1</reporter_accessible>
          <cclist_accessible>1</cclist_accessible>
          <classification_id>2</classification_id>
          <classification>Eclipse</classification>
          <product>JDT</product>
          <component>Core</component>
          <version>4.3.1</version>
          <rep_platform>PC</rep_platform>
          <op_sys>Windows 7</op_sys>
          <bug_status>VERIFIED</bug_status>
          <resolution>FIXED</resolution>
          
          
          <bug_file_loc></bug_file_loc>
          <status_whiteboard></status_whiteboard>
          <keywords></keywords>
          <priority>P3</priority>
          <bug_severity>normal</bug_severity>
          <target_milestone>BETA J8</target_milestone>
          
          
          <everconfirmed>1</everconfirmed>
          <reporter name="Kirk Loretz">kirk_loretz</reporter>
          <assigned_to name="Stephan Herrmann">stephan.herrmann</assigned_to>
          <cc>srikanth_sankaran</cc>
          
          <votes>0</votes>

      

      

      

          <comment_sort_order>oldest_to_newest</comment_sort_order>  
          <long_desc isprivate="0" >
    <commentid>2370277</commentid>
    <comment_count>0</comment_count>
    <who name="Kirk Loretz">kirk_loretz</who>
    <bug_when>2014-03-02 18:29:08 -0500</bug_when>
    <thetext>Eclipse Java Development Tools Patch for Java 8 Support (BETA)	1.0.0.v20140302-1952

----------

public class X {
    public static void main (String[] args) {
        List&lt;String&gt; list = new ArrayList&lt;&gt;();
        list.addAll(X.newArrayList());
        System.out.println(list);
    }
    
    public static &lt;T&gt; List&lt;T&gt; newArrayList () {
        return new ArrayList&lt;T&gt;();
    }
}

----------

The list.addAll method gives this warning: &quot;Problem detected during type inference: (Recovered) Internal inconsistency while checking invocation ambiguity&quot;. Of course, giving X.newArrayList() the type witness of &lt;String&gt; fixes things, as does (strangely?) changing the type of &quot;list&quot; to Collection&lt;String&gt;.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2370284</commentid>
    <comment_count>1</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-02 21:14:50 -0500</bug_when>
    <thetext>Thanks Kirk. Stephan, TIA for taking a look.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2370914</commentid>
    <comment_count>2</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-03 20:05:46 -0500</bug_when>
    <thetext>For now you may safely ignore this warning, which is intended for signalling an unexpected internal situation in the compiler.

I have a fix under test, which repairs an odd situation, where the methods addAll() from List and Collection first seemed to compete, but then during mostSpecificMethodBinding() one of them was found incompatible. Nothing dangerous for the given test, but could potentially cause trouble in other situations, so thanks for the test case, indeed!</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2371047</commentid>
    <comment_count>3</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-04 05:15:59 -0500</bug_when>
    <thetext>For posterity one more word on what happened: Scope.compatibilityLevel18FromInner() is potentially causing a side-effect into the resolvedType of arguments of the current invocation. The updated argument types are stored in the InnerInferenceHelper for later use by Scope.mostSpecificMethodBinding. In this bug two methods with equal signatures (from List and from Collection) should receive the same treatment, but since the former already updated the argument&apos;s resolvedType the second method went straight into the &quot;level != NOT_COMPATIBLE&quot; branch, and failed to record anything in the InnerInferenceHelper.
I&apos;ve fixed just that but storing more situations into the InnerInferenceHelper.

Test &amp; fix released via http://git.eclipse.org/c/jdt/eclipse.jdt.core.git/commit/?h=BETA_JAVA8&amp;id=02d4f1049999a6639faf6572ec12176fbdb0f122</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2371053</commentid>
    <comment_count>4</comment_count>
    <who name="Stephan Herrmann">stephan.herrmann</who>
    <bug_when>2014-03-04 05:22:39 -0500</bug_when>
    <thetext>See also bug 429555.</thetext>
  </long_desc><long_desc isprivate="0" >
    <commentid>2372763</commentid>
    <comment_count>5</comment_count>
    <who name="Srikanth Sankaran">srikanth_sankaran</who>
    <bug_when>2014-03-06 22:39:19 -0500</bug_when>
    <thetext>Verified as working for Eclipse + Java 8 RC2 using Kepler SR1 +   
Eclipse Java Development Tools Patch for Java 8 Support (BETA)
1.0.0.v20140306-1935</thetext>
  </long_desc>
      
      

    </bug>

</bugzilla>